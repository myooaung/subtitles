WEBVTT

00:02.340 --> 00:05.860
-Quando si lavora con tipi di unione, come questo

00:05.860 --> 00:06.970
e questo, può essere

00:06.970 --> 00:11.070
complicato ripetere sempre il tipo di unione.

00:11.070 --> 00:13.070
Si potrebbe voler scambiare un nuovo tipo

00:13.070 --> 00:15.330
che reinstalli questo tipo di unione.

00:15.330 --> 00:18.540
E lo si può fare con un'altra bella funzione

00:18.540 --> 00:21.410
dei tipi, quella degli alias di tipo.

00:21.410 --> 00:22.723
Si crea questo alias,

00:24.280 --> 00:25.670
in genere prima di usarlo,

00:25.670 --> 00:29.240
quindi in questo caso qui, all'inizio del file, con la

00:29.240 --> 00:31.240
parola chiave type.

00:31.240 --> 00:34.040
Ora, la parola chiave type non è integrata in

00:34.040 --> 00:35.880
JavaScript, ma è supportata in

00:35.880 --> 00:40.450
TypeScript e dopo type si aggiunge il nome del tipo personalizzato o, per

00:40.450 --> 00:42.860
meglio dire, dell'alias del tipo.

00:42.860 --> 00:44.980
Per esempio combinabile.

00:44.980 --> 00:46.720
Ma il nome dipende da voi.

00:46.720 --> 00:48.380
Qui si può inventare qualsiasi

00:48.380 --> 00:50.520
nome che non sia integrato in JavaScript

00:50.520 --> 00:52.530
o TypeScript come nome di chiave.

00:52.530 --> 00:54.360
Quindi una cosa come la data non sarebbe

00:54.360 --> 00:56.250
consentita, perché è incorporata in JavaScript,

00:56.250 --> 00:58.900
ma combinabile non è incorporata in JavaScript, né in TypeScript,

00:58.900 --> 01:01.170
quindi possiamo usarla.

01:01.170 --> 01:04.550
E ora con il segno di uguale si assegna il tipo che si

01:04.550 --> 01:08.320
vuole codificare nel proprio alias, per così dire.

01:08.320 --> 01:10.300
Quindi possiamo memorizzare un numero

01:10.300 --> 01:12.790
qui e ora, ogni volta che vogliamo assicurarci

01:12.790 --> 01:14.390
che qualcosa sia un numero, possiamo

01:14.390 --> 01:16.400
usare combinable.

01:16.400 --> 01:18.570
Ora, questo non ha molto senso, anzi, probabilmente

01:18.570 --> 01:21.630
renderebbe il nostro codice più facile da leggere.

01:21.630 --> 01:25.500
Se ad esempio usassi combinable qui sotto, questo funzionerebbe

01:25.500 --> 01:27.420
tecnicamente, ma se diamo un'occhiata

01:27.420 --> 01:29.550
al nostro codice, non è ovvio che

01:29.550 --> 01:33.180
qui vogliamo un numero o una stringa.

01:33.180 --> 01:35.560
In genere, quindi, lo si usa insieme

01:35.560 --> 01:37.500
ai tipi di unione.

01:37.500 --> 01:40.380
Quindi possiamo memorizzare un tipo di unione nel nostro

01:40.380 --> 01:42.250
tipo personalizzato, per così dire,

01:42.250 --> 01:45.240
nel nostro alias di tipo e ora fare riferimento a combinable

01:45.240 --> 01:48.170
laggiù invece che al nostro tipo di unione.

01:48.170 --> 01:51.060
Quindi, abbiamo esattamente la stessa configurazione di prima,

01:51.060 --> 01:54.230
solo che abbiamo il nostro alias di tipo riutilizzabile che possiamo

01:54.230 --> 01:55.580
usare al suo posto.

01:55.580 --> 01:57.660
Questo ci consente di risparmiare un po' di codice

01:57.660 --> 01:59.200
in più e di assicurarci di fare sempre

01:59.200 --> 02:04.200
riferimento agli stessi tipi o alla stessa configurazione di tipi quando usiamo combinable.

02:04.234 --> 02:06.600
Naturalmente non possiamo usarlo solo per i

02:06.600 --> 02:08.970
numeri e le stringhe, ma per qualsiasi tipo di

02:08.970 --> 02:11.140
impostazione che vogliamo memorizzare

02:11.140 --> 02:14.810
in un alias, compresi questi due tipi letterali, per esempio.

02:14.810 --> 02:18.210
Quindi, per questi due tipi qui, per questo tipo di unione,

02:18.210 --> 02:20.660
potremmo anche scambiare l'alias di tipo,

02:20.660 --> 02:24.030
ConversionDescriptor, o qualsiasi altro nome si voglia

02:24.030 --> 02:28.920
dare, e memorizzare esattamente questo tipo in questo alias di tipo.

02:28.920 --> 02:32.270
E ora possiamo usare questo alias di tipo laggiù.

02:32.270 --> 02:34.970
Quindi gli alias di tipo sono molto, molto utili.

02:34.970 --> 02:37.490
È possibile codificare definizioni di tipi più complesse

02:37.490 --> 02:40.860
in tipi propri, in nomi di tipi propri, per così dire, e riutilizzarli

02:40.860 --> 02:43.120
ovunque nel codice in cui sia necessaria esattamente

02:43.120 --> 02:45.920
questa configurazione di tipi.

02:45.920 --> 02:48.060
In questo modo si evitano errori di battitura

02:48.060 --> 02:51.000
e si può semplicemente risparmiare codice, scriverlo più

02:51.000 --> 02:53.490
velocemente ed essere sempre più chiari sulle proprie

02:53.490 --> 02:56.010
intenzioni, ad esempio scegliendo nomi di alias di

02:56.010 --> 02:57.653
tipo descrittivi.
