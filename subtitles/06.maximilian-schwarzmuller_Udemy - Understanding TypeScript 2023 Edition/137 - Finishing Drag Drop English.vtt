WEBVTT

1
00:00:02.300 --> 00:00:03.133
<v Instructor>So of course,</v>

2
00:00:03.133 --> 00:00:05.250
our goal is not to just log that ID.

3
00:00:05.250 --> 00:00:09.340
Instead, I wanna extract the project ID here in the log,

4
00:00:09.340 --> 00:00:11.110
in the drop handler.

5
00:00:11.110 --> 00:00:15.410
And with that, the goal is to really move the project now,

6
00:00:15.410 --> 00:00:18.910
or change the project status, to be precise.

7
00:00:18.910 --> 00:00:21.400
Now, how can we do that?

8
00:00:21.400 --> 00:00:26.063
Well, in our state, I would say, in our project state,

9
00:00:26.950 --> 00:00:30.000
where we currently have an addProject method,

10
00:00:30.000 --> 00:00:33.160
we also need a moveProject method.

11
00:00:33.160 --> 00:00:35.060
And the goal of this method will be

12
00:00:35.060 --> 00:00:38.550
to basically switch the status of a project.

13
00:00:38.550 --> 00:00:40.180
Of course, you could also therefore name it,

14
00:00:40.180 --> 00:00:42.970
SwitchProjectStatus, or whatever you want,

15
00:00:42.970 --> 00:00:44.390
but since we're doing drag-and-drop

16
00:00:44.390 --> 00:00:46.440
I'm calling it MoveProject.

17
00:00:46.440 --> 00:00:49.470
So, in MoveProject the goal is to move a project

18
00:00:49.470 --> 00:00:53.860
from the list it's currently in, to a new list.

19
00:00:53.860 --> 00:00:55.460
Now, this doesn't always mean

20
00:00:55.460 --> 00:00:58.030
that we just have to flip the project status

21
00:00:58.030 --> 00:01:00.480
from active to finished and the other way around.

22
00:01:00.480 --> 00:01:02.870
After all, a user could be doing this,

23
00:01:02.870 --> 00:01:05.060
drag-and-drop in the same box.

24
00:01:05.060 --> 00:01:07.120
So, if we then always trigger a method

25
00:01:07.120 --> 00:01:10.680
that switches the status, we would have an unexpected effect

26
00:01:10.680 --> 00:01:12.690
where dropping in the same box

27
00:01:12.690 --> 00:01:15.754
still switches the project to the other box.

28
00:01:15.754 --> 00:01:18.972
So instead, in MoveProject, we really have to know

29
00:01:18.972 --> 00:01:23.402
which project to move, and which box the new box is.

30
00:01:23.402 --> 00:01:24.235
So, which status the new status is.

31
00:01:25.940 --> 00:01:28.190
So, I expect to get the project ID here,

32
00:01:28.190 --> 00:01:31.410
which should be a string, and the new status.

33
00:01:31.410 --> 00:01:34.130
And the new status here, of course,

34
00:01:34.130 --> 00:01:36.410
can be of type ProjectStatus.

35
00:01:38.580 --> 00:01:40.803
And then inside of MoveProject,

36
00:01:41.692 --> 00:01:44.320
I want to find a project with that ID

37
00:01:44.320 --> 00:01:46.830
in my array of projects.

38
00:01:46.830 --> 00:01:49.090
So here, in this array of projects,

39
00:01:49.090 --> 00:01:51.680
and then flip its status.

40
00:01:51.680 --> 00:01:54.580
So for that we can reach out to this project's,

41
00:01:54.580 --> 00:01:57.450
find a project in there,

42
00:01:57.450 --> 00:01:59.440
and the find method is perfect for that.

43
00:01:59.440 --> 00:02:01.210
It runs on every element in this array,

44
00:02:01.210 --> 00:02:02.680
gives us access to every element,

45
00:02:02.680 --> 00:02:03.970
and then we have to return true

46
00:02:03.970 --> 00:02:05.770
if it's the element that we're looking for.

47
00:02:05.770 --> 00:02:07.150
And I wanna return true

48
00:02:07.150 --> 00:02:09.860
if the ID of the element we're currently looking at

49
00:02:09.860 --> 00:02:12.830
is equal to the projectId I'm getting as an argument here,

50
00:02:12.830 --> 00:02:15.420
then we have the element which should change,

51
00:02:15.420 --> 00:02:17.470
and there on this element,

52
00:02:17.470 --> 00:02:21.070
we just have to change the status to the new status.

53
00:02:21.070 --> 00:02:22.653
Now this might be null,

54
00:02:23.490 --> 00:02:26.490
so here I'll call this, project,

55
00:02:26.490 --> 00:02:28.080
stored as now constant called project,

56
00:02:28.080 --> 00:02:30.550
and check if project exists.

57
00:02:30.550 --> 00:02:34.160
And if it exists, then I wannna set the status

58
00:02:34.160 --> 00:02:39.160
equal to the new status here. Simple as that.

59
00:02:39.250 --> 00:02:42.900
This will already change the object in the array

60
00:02:42.900 --> 00:02:45.643
and we're basically done with it.

61
00:02:46.970 --> 00:02:50.010
Of course, however, we're not entirely done.

62
00:02:50.010 --> 00:02:52.250
We now need to let everyone know,

63
00:02:52.250 --> 00:02:56.040
all our listeners, that something changed about our project,

64
00:02:56.040 --> 00:02:57.870
and that they should rerender.

65
00:02:57.870 --> 00:02:59.980
So we have to go through all listeners again,

66
00:02:59.980 --> 00:03:01.910
and since we would repeat code here,

67
00:03:01.910 --> 00:03:04.080
I will outsource this in a new private method,

68
00:03:04.080 --> 00:03:07.920
updateListeners could be a viable name,

69
00:03:07.920 --> 00:03:10.490
and in there I'll have this for loop,

70
00:03:10.490 --> 00:03:13.660
where we go through all listeners and then do something.

71
00:03:13.660 --> 00:03:15.890
And then I will call this updateListeners

72
00:03:15.890 --> 00:03:17.430
both from the addProject,

73
00:03:17.430 --> 00:03:20.890
and also from the moveProject method.

74
00:03:20.890 --> 00:03:23.033
Here, only if we did change something.

75
00:03:24.350 --> 00:03:26.100
So now all listeners will be triggered.

76
00:03:26.100 --> 00:03:28.980
And if you remember, a listener in our app here,

77
00:03:28.980 --> 00:03:33.010
basically leads to the list to rerender its items.

78
00:03:33.010 --> 00:03:35.310
So that will work exactly as it should,

79
00:03:35.310 --> 00:03:37.940
or it should work exactly as it should.

80
00:03:37.940 --> 00:03:40.640
So now we have that moveProject method,

81
00:03:40.640 --> 00:03:43.730
down there in the drop handler, we can now use this.

82
00:03:43.730 --> 00:03:46.390
There we can now use the projectState,

83
00:03:46.390 --> 00:03:49.670
call moveProject, and pass in the project ID,

84
00:03:49.670 --> 00:03:52.296
and now the new project status.

85
00:03:52.296 --> 00:03:54.190
And the new project status

86
00:03:54.190 --> 00:03:57.880
depends on the list on which we drop this.

87
00:03:57.880 --> 00:03:59.630
So, I wanna autobind

88
00:04:00.760 --> 00:04:01.790
my drop handler,

89
00:04:01.790 --> 00:04:04.050
so that the this keyword in the drop handler

90
00:04:04.050 --> 00:04:06.020
refers to the surrounding class,

91
00:04:06.020 --> 00:04:08.500
and this surrounding class is a project list

92
00:04:08.500 --> 00:04:10.320
which, if you remember,

93
00:04:10.320 --> 00:04:13.020
will have a type property here,

94
00:04:13.020 --> 00:04:15.820
we're storing it here, we're having a type, property,

95
00:04:15.820 --> 00:04:18.120
and that is active or finished.

96
00:04:18.120 --> 00:04:21.000
So now we just have to translate active or finished

97
00:04:21.000 --> 00:04:22.640
to our enum values.

98
00:04:22.640 --> 00:04:24.850
So here, I pass in this.type,

99
00:04:24.850 --> 00:04:27.230
and I check if it's equal to active,

100
00:04:27.230 --> 00:04:31.580
in which case, we pass in ProjectStatus.Active,

101
00:04:31.580 --> 00:04:33.750
as the new status of the project,

102
00:04:33.750 --> 00:04:36.190
because that is the status of the list

103
00:04:36.190 --> 00:04:38.160
we moved the project to.

104
00:04:38.160 --> 00:04:41.733
Otherwise, we pass in ProjectStatus.Finished,

105
00:04:42.660 --> 00:04:45.423
and let me reformat that to make it easier to read.

106
00:04:46.730 --> 00:04:48.110
With that let's give it a try.

107
00:04:48.110 --> 00:04:52.440
Let's save all, and add a new project here,

108
00:04:52.440 --> 00:04:56.620
and now drag it to finished projects and it switches,

109
00:04:56.620 --> 00:04:58.270
and the same and if I move it back.

110
00:04:58.270 --> 00:05:02.320
If I let go here in active projects, nothing changes.

111
00:05:02.320 --> 00:05:04.400
Now you will see, if you inspect the DOM,

112
00:05:04.400 --> 00:05:08.100
that technically it rerenders, which might not be ideal,

113
00:05:08.100 --> 00:05:11.450
so we could think about coming up with some solution

114
00:05:11.450 --> 00:05:15.290
which checks whether the status actually did change,

115
00:05:15.290 --> 00:05:17.400
and if it didn't, we don't update,

116
00:05:17.400 --> 00:05:18.890
that's something we can do.

117
00:05:18.890 --> 00:05:22.620
But from a UI perspective, it updates just as it should.

118
00:05:22.620 --> 00:05:24.570
Now let's also add a second project

119
00:05:24.570 --> 00:05:27.120
and see if that destroys something,

120
00:05:27.120 --> 00:05:29.260
if everything still works,

121
00:05:29.260 --> 00:05:31.750
and I would say that looks decent,

122
00:05:31.750 --> 00:05:33.720
that looks pretty good to me.

123
00:05:33.720 --> 00:05:37.120
Everything seems to work exactly the way it should.

124
00:05:37.120 --> 00:05:40.230
So dragging and dropping works just fine here

125
00:05:40.230 --> 00:05:42.600
but there is this one improvement I mentioned

126
00:05:42.600 --> 00:05:46.305
back in the project state, in moveProject,

127
00:05:46.305 --> 00:05:49.470
when I called this updateListeners, we can actually check

128
00:05:49.470 --> 00:05:51.920
if we did really change the status.

129
00:05:51.920 --> 00:05:54.150
So here we can check if project,

130
00:05:54.150 --> 00:05:57.940
so if we did find one, and if then project status,

131
00:05:57.940 --> 00:06:00.270
is different from the new status,

132
00:06:00.270 --> 00:06:03.830
and only then we change the status and update the listeners.

133
00:06:03.830 --> 00:06:06.060
If the status is the same we don't do this

134
00:06:06.060 --> 00:06:09.310
and we avoid the unnecessary rerender cycle.

135
00:06:09.310 --> 00:06:10.143
So now with that,

136
00:06:10.143 --> 00:06:12.900
if we saved it and we quickly add a new project,

137
00:06:12.900 --> 00:06:14.790
you will see if I inspect the elements here

138
00:06:14.790 --> 00:06:18.190
and you watch the L-I and check whether this flashes,

139
00:06:18.190 --> 00:06:21.800
which means it would rerender, it does not flash here,

140
00:06:21.800 --> 00:06:24.490
only droppable flashes, the class we just added,

141
00:06:24.490 --> 00:06:27.970
but the L-I does not flash if I drop in the same box,

142
00:06:27.970 --> 00:06:30.990
it only flashes if I move it to a different box.

143
00:06:30.990 --> 00:06:34.460
And it should flash then because then we really did move it.

144
00:06:34.460 --> 00:06:36.180
So now we optimize this a bit,

145
00:06:36.180 --> 00:06:39.050
and now we have working drag-and-drop here,

146
00:06:39.050 --> 00:06:42.223
all built and powered with and by TypeScript.

