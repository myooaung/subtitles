WEBVTT

00:02.100 --> 00:04.390
ผู้สอน: แน่นอน ตอนนี้ในแอปพลิเคชัน

00:04.390 --> 00:08.640
React ที่ใหญ่กว่า คุณทำงานได้มากกว่าแค่ useRef และ useState

00:08.640 --> 00:10.950
เพื่อให้เข้าใจถึงวิธีที่คุณใช้ TypeScript ที่นั่น

00:10.950 --> 00:13.460
การเลื่อนเมาส์ไปเหนือฟังก์ชันที่คุณกำลังเรียกใช้นั้นมีประโยชน์เสมอ

00:13.460 --> 00:17.090
ดังนั้น hooks อื่นๆ ที่คุณใช้งานอยู่จึงมีประโยชน์เสมอ

00:17.090 --> 00:20.010
ตัวอย่างเช่น หากคุณต้องการใช้เครื่องมือ useEffect ที่นี่

00:20.010 --> 00:26.330
ในคอมโพเนนต์ NewTodo ไม่ว่าจะด้วยเหตุผลใดก็ตาม คุณสามารถเรียกเครื่องมือนั้นและวางเมาส์เหนือเครื่องมือนั้นหลังจากนั้น

00:26.330 --> 00:29.010
เพื่อทำความเข้าใจว่าเครื่องมือประเภทใดใช้งานได้

00:29.010 --> 00:30.960
เช่น อาร์กิวเมนต์แรกคือ EffectCallback

00:30.960 --> 00:33.720
ซึ่งเป็นฟังก์ชันพิเศษ โดยที่ TypeScript จะเตือนคุณหากคุณตั้งค่าไม่ถูกต้อง

00:33.720 --> 00:38.610
อาร์กิวเมนต์ที่สองไม่ใช่อาร์เรย์ของอะไรเลย อะไรทำนองนั้น สิ่งนี้จะช่วยได้เสมอ คุณจะได้เรียนรู้ด้วยว่า

00:38.610 --> 00:52.410
useEffect ไม่ส่งคืนสิ่งใด ตัวอย่างเช่น และใน useState ที่ฉันพูดถึงว่าคุณจะได้รับอาร์เรย์ที่มีองค์ประกอบสองอย่างกลับมาเสมอ คุณยังเห็นว่าที่นี่ useState ส่งคืนอาร์เรย์ นั่นคือสิ่งที่เราเห็นที่นี่ วงเล็บเปิดและปิด โดยที่องค์ประกอบแรกเป็นประเภททั่วไปของคุณ

00:52.410 --> 01:08.600
ดังนั้นรายการ Todos เนื่องจากนั่นคือภาพรวมสถานะของคุณ องค์ประกอบที่สองคือ React

01:08.600 --> 01:08.600
ส่งฟังก์ชันที่นี่ในที่สุด

01:08.600 --> 01:11.370
นั่นคือสิ่งที่เกิดขึ้นที่นี่

01:11.370 --> 01:12.690
จึงจะเป็นประโยชน์

01:12.690 --> 01:15.490
บางทีคุณอาจกำลังทำงานกับ Redux

01:15.490 --> 01:21.360
โชคดีที่ถ้าคุณเข้าไปดูเอกสารประกอบ คุณจะพบคำแนะนำเกี่ยวกับการใช้

01:21.360 --> 01:24.530
Redux กับ TypeScript

01:24.530 --> 01:27.430
ที่นี่ ใต้สูตรอาหาร คุณจะพบการใช้งานกับ TypeScript

01:27.430 --> 01:30.710
และที่นั่น คุณสามารถเรียนรู้วิธีเพิ่มประเภทให้กับการกระทำของคุณ

01:30.710 --> 01:33.270
และไปยังตัวลดขนาด และการจัดการสถานะของคุณด้วย

01:33.270 --> 01:35.540
Redux

01:35.540 --> 01:38.650
มันตรงไปตรงมาจริงๆ ไม่ซับซ้อนเลย และเพิ่มความปลอดภัยประเภทต่างๆ

01:38.650 --> 01:41.520
มากมายที่นั่น

01:41.520 --> 01:43.230
บางทีคุณอาจใช้แพ็คเกจ

01:43.230 --> 01:47.110
React Router แพ็คเกจนี้ที่นี่

01:47.110 --> 01:54.020
ที่นั่นคุณไม่พบสัญลักษณ์ TypeScript ที่นั่น แน่นอนว่าคุณสามารถติดตั้งสิ่งนี้ในโครงการของคุณได้เช่นกัน

01:54.020 --> 01:55.340
ด้วย npm install dash

01:55.340 --> 02:00.740
dash save react dash router dash dom ซึ่งเป็นคำสั่งที่คุณมักจะใช้เพื่อติดตั้งสิ่งนี้

02:00.740 --> 02:03.720
แพ็คเกจในโครงการ React ของคุณ

02:03.720 --> 02:07.000
นี่จะเพิ่มแพ็คเกจ react-router-dom

02:07.000 --> 02:10.250
แต่แพ็คเกจนี้ไม่มีคำแนะนำประเภทพิเศษในหน้านี้

02:10.250 --> 02:12.430
คุณไม่พบสิ่งใดที่เฉพาะเจาะจงสำหรับ

02:12.430 --> 02:14.720
TypeScript ที่นี่ อย่างน้อยที่สุด

02:14.720 --> 02:17.570
ณ เวลาที่ฉันกำลังบันทึกสิ่งนี้

02:17.570 --> 02:19.163
อย่างไรก็ตาม แน่นอนว่าเราสามารถใช้สิ่งนี้ในโครงการ

02:19.163 --> 02:23.920
TypeScript ได้เช่นกัน และจะได้รับการสนับสนุนที่ดีที่นั่น

02:23.920 --> 02:25.800
เมื่อติดตั้งแล้ว คุณจะสังเกตเห็นว่าหากฉันนำเข้าจาก

02:25.800 --> 02:31.880
react-router-dom ฉันไม่มีประเภทการสนับสนุนที่ดีจริงๆ

02:31.880 --> 02:33.870
ตัวอย่างเช่น ถ้าฉันพยายามนำเข้าบางสิ่งที่นี่

02:33.870 --> 02:36.870
ฉันได้รับคำเตือนแล้วว่าไม่พบการประกาศสำหรับโมดูล

02:36.870 --> 02:39.210
react-router-dom ดังนั้นมันจึงไม่พบข้อมูลประเภทใด

02:39.210 --> 02:42.730
ๆ ที่นี่

02:42.730 --> 02:45.420
ในการแก้ไขนั้น แน่นอน เราสามารถทำบางอย่างที่เราเคยทำมาก่อน

02:45.420 --> 02:48.450
npm install dash dash save dash dev, at types, slash

02:48.450 --> 02:52.530
react dash router dash dom, so we cancel the at search types here,

02:52.530 --> 02:59.097
and we're good again, this เป็นเคล็ดลับที่คุณได้เรียนรู้ไปแล้วในช่วงต้นของหลักสูตร แต่แน่นอนว่าไม่จำเป็นต้องลืม

02:59.097 --> 03:06.790
เพียงเพราะเรามีโปรเจ็กต์ที่สามารถทำงานกับ TypeScript ได้ทันที

03:06.790 --> 03:08.140
ถ้าเราเพิ่มบางอย่างที่ไม่ทำงานกับ

03:08.140 --> 03:10.810
TypeScript เช่นอันนี้ เราสามารถเพิ่มแบบนี้ได้

03:10.810 --> 03:17.270
และตอนนี้มันรับรู้ถึง Route แล้ว มันรับรู้ถึงคุณสมบัติอื่นๆ ทั้งหมดจากแพ็คเกจนี้เช่นกัน

03:17.270 --> 03:21.070
นี่เป็นวิธีที่ง่ายที่คุณสามารถเพิ่มการสนับสนุนได้เช่นกัน

03:21.070 --> 03:23.560
และนั่นเป็นวิธีที่คุณควรดำเนินการโดยทั่วไป

03:23.560 --> 03:26.010
ดูเอกสารที่เป็นทางการ ตรวจสอบว่าคุณเห็นคำแนะนำเกี่ยวกับการใช้งาน

03:26.010 --> 03:42.080
TypeScript ที่นั่นหรือไม่ ถ้าไม่ ให้ติดตั้งและดูว่ามีการสนับสนุนประเภทในตัวหรือไม่ อย่างน้อยที่สุดคุณจะได้รับ รองรับการเติมข้อความอัตโนมัติและการคอมไพล์ที่ดี และหากไม่มีให้ติดตั้งแพ็คเกจประเภทดังที่เราทำไว้ที่นี่

03:42.080 --> 03:43.980
และนั่นก็เป็นเช่นนั้นจริงๆ สำหรับโมดูลนี้

03:43.980 --> 03:46.410
และนี่คือวิธีที่คุณสามารถใช้ TypeScript

03:46.410 --> 03:52.450
และฟีเจอร์ที่น่าทึ่งทั้งหมดในแอป React และแน่นอน ทุกสิ่งที่คุณเรียนรู้จากหลักสูตรนี้จะนำไปใช้กับแอป

03:52.450 --> 03:54.370
React ด้วยเช่นกัน

03:54.370 --> 03:56.380
คุณสามารถใช้ฟีเจอร์ TypeScript ทั้งหมดที่คุณได้เรียนรู้จากหลักสูตรนี้ในโครงการ

03:56.380 --> 03:59.130
React
