WEBVTT

00:02.250 --> 00:04.530
Kursleiter: Wir haben auch nützliche Funktionen

00:04.530 --> 00:09.240
im Zusammenhang mit Arrays und Objekten kennengelernt und erfahren, wie wir die Daten,

00:09.240 --> 00:13.600
die in Arrays und Objekten gespeichert sind, abrufen können.

00:13.600 --> 00:17.180
Dazu fügen wir hier ein neues Array hinzu, sagen wir Hobbys,

00:17.180 --> 00:19.880
und das kann ein Array mit Strings sein.

00:22.520 --> 00:26.700
Wie z.B. Sport und Kochen hier und jetzt können

00:26.700 --> 00:31.700
wir natürlich Elemente nach Index abrufen, wie z.B. dies

00:31.810 --> 00:33.030
hier.

00:33.030 --> 00:36.150
Aber Sie sollten diese grundlegenden Dinge über JavaScript wissen.

00:36.150 --> 00:40.310
Next Gen JavaScript, eine nette Funktion einführen, wenn wir alle

00:41.172 --> 00:43.910
Werte eines Arrays zu extrahieren wollen.

00:43.910 --> 00:44.990
Wann könnten Sie das brauchen?

00:44.990 --> 00:48.670
Nun, sagen wir, Sie haben die aktiven Hobbys, und das

00:48.670 --> 00:53.670
ist eine Reihe, wo ich Wandern als Hobby habe, und jetzt möchte ich Sport

00:54.200 --> 00:56.510
und Kochen hinzufügen.

00:56.510 --> 00:58.960
Jetzt können wir ein Element zu aktiven Hobbys hinzufügen,

00:58.960 --> 01:01.290
indem wir push aufrufen. Übrigens, falls Sie sich

01:01.290 --> 01:05.620
fragen, wie ich zu einer Konstanten pushen kann, denken Sie daran, dass Arrays Objekte sind

01:05.620 --> 01:08.130
und Objekte Referenzwerte sind.

01:08.130 --> 01:11.010
Wenn wir drücken, ändern wir einen Speicher, aber nicht die Adresse.

01:11.010 --> 01:14.150
Wenn Ihnen das nichts sagt, sehen Sie sich die zusätzlichen Ressourcen

01:14.150 --> 01:17.390
an, die ich zu diesem Thema an diese Vorlesung angehängt habe. Also

01:17.390 --> 01:20.170
zurück zu diesem Beispiel, wir können hier schieben, aber

01:20.170 --> 01:24.120
schieben, wenn wir die Hobbys schieben, fügen wir Hobbys als neues Array in das

01:24.120 --> 01:27.540
Array ein, also als neues verschachteltes Array.

01:27.540 --> 01:30.920
Welche Arten würde tatsächlich erkennt es, es sagt mir, dass, wenn

01:30.920 --> 01:33.690
ich ein String-Array zu einem Array von Zeichenfolgen

01:33.690 --> 01:36.143
hinzufügen möchten, das ist nicht okay.

01:37.110 --> 01:40.390
Stattdessen nimmt push einzelne Werte an, so dass wir Hobbys

01:40.390 --> 01:44.450
mit Null übergeben können, eigentlich nimmt push sogar eine unbegrenzte

01:44.450 --> 01:47.450
Anzahl von Argumenten an, so dass wir mehrere Elemente

01:47.450 --> 01:51.240
in einer Reihenfolge auf diese Weise anschieben können.

01:51.240 --> 01:54.013
Aber das ist etwas umständlich, und hier kommt der Spread Operator

01:54.013 --> 01:54.890
ins Spiel.

01:54.890 --> 01:57.700
Es sieht so aus, es sind drei Punkte und ja, das sieht

01:57.700 --> 02:00.850
seltsam aus, aber das ist ein gültiger JavaScript-Operator,

02:00.850 --> 02:04.770
der von [Hypescript? ] und danach geben wir das

02:04.770 --> 02:09.547
Array oder das Objekt an, das wir ausbreiten wollen, wie Sie

02:09.547 --> 02:11.700
noch lernen werden.

02:11.700 --> 02:15.160
Also, was dies tut, ist, es sagt JavaScript am Ende, denn das

02:15.160 --> 02:17.690
ist ein Vanilla JavaScript Operator in Modern

02:17.690 --> 02:21.070
JavaScript, so sagt es JavaScript, um alle Elemente nach dem

02:21.070 --> 02:25.500
Array zu ziehen und im Grunde fügen Sie sie als eine Liste von Werten, also nicht

02:25.500 --> 02:28.530
als ein Array, sondern eine Liste der einzelnen Werte

02:28.530 --> 02:31.900
in den Ort, wo Sie einen Operator verwendet, so hier zum Beispiel

02:31.900 --> 02:33.950
ist eine Liste von Argumenten übergeben,

02:33.950 --> 02:36.090
um zu schieben und jetzt ein Ort, wo man

02:36.090 --> 02:39.180
das verwenden könnte, ist direkt, wenn Sie ein neues Array

02:39.180 --> 02:41.740
erstellen.

02:41.740 --> 02:46.220
Dort können Sie auch ein bestehendes Array auf dieses Array verteilen.

02:46.220 --> 02:48.950
Wann immer Sie also eine kommagetrennte Liste von Werten benötigen,

02:48.950 --> 02:51.460
können Sie den Spread-Operator mit einem Array verwenden,

02:51.460 --> 02:54.360
um eine solche kommagetrennte Liste zu erhalten.

02:54.360 --> 02:56.660
Das ist die Idee des Spread-Operators und deshalb

02:56.660 --> 02:59.230
ist er sehr nützlich, um Elemente aus einem Array

02:59.230 --> 03:00.663
herauszuziehen.

03:01.860 --> 03:04.380
Der Spread-Operator, der nicht nur auf Arrays,

03:04.380 --> 03:07.880
sondern auch auf Objekte angewendet werden kann.

03:07.880 --> 03:10.990
Nehmen wir an, wir haben eine Person, die einen Namensschlüssel,

03:10.990 --> 03:14.070
Max, und einen h-Schlüssel, 30, hat, und wollen nun eine

03:14.070 --> 03:16.640
kopierte Person erstellen.

03:16.640 --> 03:19.060
Wenn wir nun eine Person wie diese

03:19.060 --> 03:22.680
zuweisen, kopieren wir den Zeiger auf dieses Personenobjekt

03:22.680 --> 03:25.000
im Speicher in diese Konstante copy

03:25.000 --> 03:27.050
person.

03:27.050 --> 03:30.470
Und wenn Ihnen das noch nicht viel sagt, dann schauen Sie sich doch

03:30.470 --> 03:32.360
mal meine Referenzwertquellen an.

03:32.360 --> 03:36.190
Wir erstellen also nicht wirklich eine Kopie des Objekts.

03:36.190 --> 03:38.610
Um nun eine echte Kopie zu erstellen, können wir den

03:38.610 --> 03:40.880
Verteilungsoperator mit Objekten verwenden.

03:40.880 --> 03:43.400
Wir erstellen ein neues Objekt mit geschweiften

03:43.400 --> 03:46.510
Klammern und verwenden dann den Spreizungsoperator, drei Punkte

03:46.510 --> 03:49.630
mit unserem ersten Objekt, das Sie kopieren möchten.

03:49.630 --> 03:52.970
Damit werden alle Elemente herausgezogen, aber natürlich

03:52.970 --> 03:56.310
sind die Elemente hier Schlüssel-Wert-Paare und nicht einzelne

03:56.310 --> 03:58.630
Werte wie bei einem Array.

03:58.630 --> 04:00.550
Hier haben wir Schlüssel-Wert-Paare.

04:00.550 --> 04:04.110
Diese Schlüssel-Wert-Paare werden also von dort abgezogen und

04:04.110 --> 04:08.010
können dann überall dort verwendet werden, wo Sie Schlüssel-Wert-Paare

04:08.010 --> 04:11.310
benötigen, was in der Regel ein Objekt ist, dem Sie sie nie hinzufügen

04:11.310 --> 04:12.920
werden.

04:12.920 --> 04:15.447
Zu diesem ansonsten leeren Objekt werden nun also

04:15.447 --> 04:19.100
die Schlüssel-Wert-Paare von Person hinzugefügt, und da wir hier ein

04:19.100 --> 04:21.240
neues Objekt erstellt haben und es einfach

04:21.240 --> 04:23.700
zu den Schlüssel-Wert-Paaren hinzufügen, haben

04:23.700 --> 04:27.310
wir eine perfekte Kopie des ursprünglichen Objekts und nicht nur des

04:27.310 --> 04:29.080
Zeigers, der auf das Objekt im Speicher

04:29.080 --> 04:30.803
zeigt.
