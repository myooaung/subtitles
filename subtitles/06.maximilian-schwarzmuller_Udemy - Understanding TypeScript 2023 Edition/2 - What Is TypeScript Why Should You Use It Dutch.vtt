WEBVTT

00:02.350 --> 00:04.170
Instructeur: Wat is TypeScript?

00:04.170 --> 00:06.860
Waar gaat het om, waarom zouden we het gebruiken?

00:06.860 --> 00:10.820
TypeScript is een Superset van JavaScript.

00:10.820 --> 00:12.190
Wat betekent dit?

00:12.190 --> 00:14.250
Het betekent dat TypeScript uiteindelijk

00:14.250 --> 00:16.370
een taal is, een programmeertaal, die

00:16.370 --> 00:18.710
voortbouwt op JavaScript.

00:18.710 --> 00:20.940
Het is geen gloednieuwe taal,

00:20.940 --> 00:23.980
maar neemt de JavaScript-taal en voegt er

00:23.980 --> 00:27.450
nieuwe mogelijkheden en voordelen aan toe.

00:27.450 --> 00:31.720
Het maakt het schrijven van JavaScript-code gemakkelijker en krachtiger, zou

00:31.720 --> 00:32.840
je kunnen zeggen.

00:32.840 --> 00:35.624
Maar we hebben één groot nadeel.

00:35.624 --> 00:39.786
TypeScript kan niet worden uitgevoerd door JavaScript-omgevingen

00:39.786 --> 00:41.760
zoals de browser.

00:41.760 --> 00:44.270
Browsers kunnen TypeScript niet uitvoeren,

00:44.270 --> 00:48.486
en bijvoorbeeld Node. js kan ook geen TypeScript uitvoeren,

00:48.486 --> 00:52.250
dus de omgevingen waar we JavaScript kunnen uitvoeren ondersteunen

00:52.250 --> 00:54.080
TypeScript niet.

00:54.080 --> 00:56.140
Wat is dan het idee achter TypeScript?

00:56.140 --> 01:00.760
Het is een betere versie van JavaScript en we kunnen het niet gebruiken?

01:00.760 --> 01:02.130
Nou, niet helemaal.

01:02.130 --> 01:06.050
TypeScript is een programmeertaal, maar ook een gereedschap.

01:06.050 --> 01:10.049
Het is een krachtige compiler die je over je code laat lopen

01:10.049 --> 01:14.410
om je typescript code te compileren naar JavaScript.

01:14.410 --> 01:16.540
Wat je dus krijgt als resultaat wanneer

01:16.540 --> 01:20.260
je code schrijft in TypeScript is JavaScript.

01:20.260 --> 01:22.870
Maar u schreef die JavaScript-code niet,

01:22.870 --> 01:24.900
u schreef TypeScript-code met

01:24.900 --> 01:27.480
alle nieuwe mogelijkheden en alle voordelen,

01:27.480 --> 01:30.670
en u krijgt normale JavaScript-code.

01:30.670 --> 01:33.810
Dat roept natuurlijk een belangrijke vraag op:

01:33.810 --> 01:36.710
hoe kan TypeScript nieuwe functies toevoegen

01:36.710 --> 01:40.630
als je uiteindelijk gewoon JavaScript krijgt?

01:40.630 --> 01:43.460
En het antwoord is dat de TypeScript compiler deze

01:43.460 --> 01:47.710
nieuwe mogelijkheden compileert tot JavaScript workarounds, dus uiteindelijk

01:47.710 --> 01:50.670
geeft het je misschien een mooiere syntaxis, een makkelijkere

01:50.670 --> 01:52.890
manier om iets te doen, en het zal dan die

01:52.890 --> 01:56.571
mooiere, makkelijkere manier compileren tot een complexere

01:56.571 --> 02:02.060
JavaScript snippet, die je anders zou moeten schrijven.

02:02.060 --> 02:03.230
Dus het is geen magie,

02:03.230 --> 02:06.790
natuurlijk kan het niet toevoegen wat helemaal niet mogelijk is

02:06.790 --> 02:08.610
in de JavaScript-taal, maar het kan

02:08.610 --> 02:11.150
nieuwe functies toevoegen die gewoon gemakkelijker

02:11.150 --> 02:15.020
te gebruiken zijn, mooiere syntaxis, dat soort dingen.

02:15.020 --> 02:17.470
Daarnaast doet TypeScript natuurlijk

02:17.470 --> 02:20.900
één belangrijk ding, wat de naam al impliceert.

02:20.900 --> 02:22.740
Het voegt types toe, het

02:22.740 --> 02:26.230
voegt een functie toe aan de JavaScript-taal,

02:26.230 --> 02:28.750
die we zo dadelijk van dichtbij zullen

02:28.750 --> 02:31.541
bekijken, waardoor je als ontwikkelaar

02:31.541 --> 02:35.070
fouten in je code eerder kunt opsporen voordat

02:35.070 --> 02:38.480
je script draait en de fout optreedt tijdens de

02:38.480 --> 02:41.350
runtime in de browser.

02:41.350 --> 02:44.320
Het geeft u dus niet alleen wat nieuwe mogelijkheden

02:44.320 --> 02:46.690
en mooiere manieren om iets te doen, het

02:46.690 --> 02:50.240
geeft u ook extra foutcontrole waarbij fouten die u anders

02:50.240 --> 02:54.153
als runtime-fouten zou krijgen, vroegtijdig tijdens de ontwikkeling

02:54.153 --> 02:58.370
kunnen worden opgevangen en hersteld.

02:58.370 --> 03:00.600
Waarom zouden we TypeScript gebruiken?

03:00.600 --> 03:02.570
Beschouw dit voorbeeld, een vrij

03:02.570 --> 03:06.710
eenvoudige JavaScript-functie die twee getallen optelt.

03:06.710 --> 03:08.760
Als ik het nu aanroep, merk dan op dat

03:08.760 --> 03:11.810
ik twee strings doorgeef in plaats van twee getallen,

03:11.810 --> 03:14.810
en ik zal je een echt voorbeeld laten zien waar zoiets

03:14.810 --> 03:18.090
realistisch kan gebeuren in slechts een seconde.

03:18.090 --> 03:20.270
Dus, we roepen deze functie aan met twee strings

03:20.270 --> 03:22.519
en als gevolg daarvan zou je hier waarschijnlijk

03:22.519 --> 03:25.260
een ongewenst gedrag krijgen, want als je twee strings

03:25.260 --> 03:27.240
toevoegt, zal JavaScript de strings

03:27.240 --> 03:29.596
aan elkaar rijgen in plaats van hier een wiskundige

03:29.596 --> 03:32.780
berekening uit te voeren.

03:32.780 --> 03:36.310
Het resultaat zou dus niet vijf, maar drieëntwintig zijn,

03:36.310 --> 03:38.980
een aaneenschakeling van de twee getallen.

03:38.980 --> 03:41.690
Dit is een fout die je zou kunnen hebben in JavaScript,

03:41.690 --> 03:43.530
het is geen technische fout, je

03:43.530 --> 03:46.720
krijgt waarschijnlijk geen runtime error, maar je

03:46.720 --> 03:49.832
hebt een logische fout in je code.

03:49.832 --> 03:52.820
En dat kan natuurlijk leiden tot grote problemen in

03:52.820 --> 03:55.870
de webapplicaties die je schrijft met JavaScript.

03:55.870 --> 03:59.360
Nu hebben we in JavaScript natuurlijk beperkende strategieën, we

03:59.360 --> 04:02.541
zouden een if check in de functie kunnen toevoegen om de types

04:02.541 --> 04:05.440
van de invoer tijdens runtime te controleren, we zouden

04:05.440 --> 04:08.240
ook de gebruikersinvoer kunnen valideren en saniteren,

04:08.240 --> 04:10.670
en hoewel we dat allemaal zouden willen doen, zou

04:10.670 --> 04:14.040
het ook mooi zijn als we fouten als deze al tijdens de ontwikkeling

04:14.040 --> 04:15.840
zouden kunnen opvangen.

04:15.840 --> 04:19.220
En gelukkig is dit mogelijk met TypeScript, want ontwikkelaars

04:19.220 --> 04:21.810
kunnen hier ongeldige code schrijven en dit soort

04:21.810 --> 04:23.970
bots introduceren in JavaScript, en met TypeScript

04:23.970 --> 04:26.160
hebben we een hulpmiddel dat ons helpt betere

04:26.160 --> 04:30.060
code te schrijven en dergelijke problemen te voorkomen.

04:30.060 --> 04:31.910
Laten we dit eens nader bekijken.
