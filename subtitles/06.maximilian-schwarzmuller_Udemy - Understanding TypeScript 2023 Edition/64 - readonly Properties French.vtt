WEBVTT

00:02.280 --> 00:04.510
Instructeur : Un autre modificateur est en quelque sorte lié à ce que

00:04.510 --> 00:06.483
vous venez d'apprendre sur les modificateurs d'accès.

00:07.572 --> 00:09.590
Et c'est le modificateur de lecture seule.

00:09.590 --> 00:11.310
Disons que nous avons certains champs,

00:11.310 --> 00:14.220
qui ne doivent pas seulement être privés ou publics, mais

00:14.220 --> 00:18.130
qui ne doivent pas non plus changer après leur initialisation.

00:18.130 --> 00:21.410
Par exemple, l'identifiant ne doit pas changer par la suite.

00:21.410 --> 00:23.520
Pour qu'il soit clair qu'il ne doit pas être modifié,

00:23.520 --> 00:25.670
vous pouvez également ajouter readonly ici.

00:25.670 --> 00:27.890
Et vous auriez pu ajouter cela ici aussi.

00:27.890 --> 00:30.920
Donc ici, vous auriez également écrit private readonly.

00:30.920 --> 00:33.990
Maintenant, le mot-clé readonly, tout comme private et

00:33.990 --> 00:35.710
public, est introduit par TypeScript,

00:35.710 --> 00:37.920
il n'existe pas en JavaScript.

00:37.920 --> 00:39.910
Il s'assure que si vous essayez d'écrire

00:39.910 --> 00:43.180
sur sa propriété par la suite, vous échouez.

00:43.180 --> 00:45.690
Vous ne pouvez donc l'utiliser qu'une seule fois pendant

00:45.690 --> 00:48.620
l'initialisation, mais par la suite, disons que pour addEmployee,

00:48.620 --> 00:52.430
pour une raison quelconque, j'essaie de changer id en d2, vous voyez, nous obtenons

00:52.430 --> 00:54.200
une erreur ici, que je ne peux pas affecter

00:54.200 --> 00:57.790
à id parce qu'il est en lecture seule.

00:57.790 --> 01:00.800
Cela ajoute donc une sécurité supplémentaire pour qu'il soit

01:00.800 --> 01:04.160
bien clair qu'une certaine propriété ne doit être initialisée qu'une

01:04.160 --> 01:05.920
seule fois et ne doit pas changer par la

01:05.920 --> 01:08.860
suite, une exigence que vous avez souvent pour certaines propriétés

01:08.860 --> 01:10.240
dans vos objets.

01:10.240 --> 01:12.630
Cela peut donc ajouter un type de sécurité supplémentaire,

01:12.630 --> 01:14.910
et rendre vos intentions très claires.

01:14.910 --> 01:16.320
Bien sûr, vous pouvez toujours

01:16.320 --> 01:18.350
dire : "C'est moi qui écris le code, je ne

01:18.350 --> 01:20.470
ferai pas ce que je ne veux pas".

01:20.470 --> 01:23.060
Il est toujours bon d'être très clair lorsque vous

01:23.060 --> 01:24.630
définissez votre code.

01:24.630 --> 01:28.320
En effet, a) vous risquez d'oublier ce que vous vouliez faire si vous vous arrêtez

01:28.320 --> 01:31.280
de travailler sur votre code pendant quelques semaines, ou quoi

01:31.280 --> 01:32.270
que ce soit, et b) vous

01:32.270 --> 01:34.340
risquez de travailler en équipe ou de partager

01:34.340 --> 01:36.550
votre code avec d'autres personnes.

01:36.550 --> 01:39.390
Et c'est généralement une bonne idée d'écrire un code

01:39.390 --> 01:42.460
clair et explicite qui rend votre intention très claire.

01:42.460 --> 01:44.280
Et la lecture seule peut vous y aider,

01:44.280 --> 01:47.230
car elle indique très clairement quel est votre objectif.

01:47.230 --> 01:49.570
Si nous regardons l'app. js, comme je l'ai mentionné,

01:49.570 --> 01:53.050
nous ne voyons ni privé ni public, ni en lecture seule, car

01:53.050 --> 01:55.780
tout cela n'existe qu'en TypeScript, pas en

01:55.780 --> 01:57.610
JavaScript.

01:57.610 --> 02:01.420
Nous voyons également quelque chose de différent qui est aussi intéressant,

02:01.420 --> 02:04.580
les méthodes sont ajoutées au prototype de notre fonction

02:04.580 --> 02:06.490
constructeur.

02:06.490 --> 02:08.830
Pour cela, vous devez savoir ce que sont les

02:08.830 --> 02:10.730
prototypes, et les présenter dans

02:10.730 --> 02:12.520
ce cours serait un peu trop.

02:12.520 --> 02:14.140
Vous trouverez ci-joint quelques ressources

02:14.140 --> 02:16.070
où vous pourrez vous plonger dans les prototypes.

02:16.070 --> 02:18.490
Il s'agit d'une partie importante de JavaScript,

02:18.490 --> 02:22.210
surtout de JavaScript avant que nous ayons des classes, et cela ne fait pas

02:22.210 --> 02:24.670
de mal de comprendre les prototypes si vous êtes

02:24.670 --> 02:26.490
un développeur JavaScript.

02:26.490 --> 02:29.030
Ici encore, je ne m'y attarderai pas car il s'agit

02:29.030 --> 02:31.160
d'un sujet purement JavaScript, non

02:31.160 --> 02:33.020
spécifique à TypeScript.

02:33.020 --> 02:34.150
En effet, en TypeScript, nous

02:34.150 --> 02:36.510
travaillons généralement moins avec les prototypes,

02:36.510 --> 02:38.780
car nous pouvons faire plus avec les classes.

02:38.780 --> 02:42.560
Et en relation avec cela, nous avons un autre concept de classe important,

02:42.560 --> 02:43.503
l'héritage.
