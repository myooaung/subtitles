WEBVTT

00:02.180 --> 00:03.710
-: Para isso você encontra em

00:03.710 --> 00:06.590
anexo um projeto inicial como você já o viu várias vezes

00:06.590 --> 00:07.640
no curso, um projeto

00:07.640 --> 00:09.140
muito trivial com um índice

00:09.140 --> 00:12.030
basicamente vazio. arquivo html e um aplicativo

00:12.030 --> 00:14.400
vazio. ts e aqui vamos

00:14.400 --> 00:17.140
construir uma pequena aplicação

00:17.140 --> 00:20.350
de demonstração, um pequeno projeto.

00:20.350 --> 00:24.705
Agora o aplicativo que vamos construir não será muito complexo,

00:24.705 --> 00:28.080
mas será uma bela aplicação onde essencialmente

00:28.080 --> 00:31.480
poderemos gerenciar um par de projetos onde um projeto

00:31.480 --> 00:35.690
essencialmente é um objetivo que você poderia dizer para que

00:35.690 --> 00:37.582
tenhamos listas de projetos

00:37.582 --> 00:43.270
e teremos duas listas de projetos uma lista ativa e uma lista acabada e poderemos

00:43.270 --> 00:46.210
arrastar e soltar itens de uma lista para

00:46.210 --> 00:49.530
a outra e coisas assim.

00:49.530 --> 00:52.734
Agora, é claro que a aplicação em si será agradável,

00:52.734 --> 00:54.619
mas o mais importante é que ela

00:54.619 --> 00:56.570
nos permitirá praticar muitas

00:56.570 --> 00:59.160
das coisas que aprendemos até agora e esse

00:59.160 --> 01:02.240
é, naturalmente, o objetivo deste módulo.

01:02.240 --> 01:04.210
Agora também uma nota importante

01:04.210 --> 01:05.710
para este módulo, vou escrever

01:05.710 --> 01:07.900
todo o código em um único arquivo neste

01:07.900 --> 01:12.010
único aplicativo. ts e, portanto, este

01:12.010 --> 01:17.000
se tornará um arquivo muito grande.

01:17.000 --> 01:19.420
No módulo depois deste módulo eu vou mergulhar

01:19.420 --> 01:21.400
nesse problema e mostrar como o TypeSript

01:21.400 --> 01:24.660
nos permite dividir este arquivo, mas por enquanto, como

01:24.660 --> 01:27.030
ainda não sabemos disso e até agora não tivemos

01:27.030 --> 01:29.680
problemas de tamanho, vamos nos concentrar

01:29.680 --> 01:32.930
em nossa aplicação demo.

01:32.930 --> 01:34.710
E para isso começaremos realmente

01:34.710 --> 01:37.420
a trabalhar no índice. arquivo html.

01:37.420 --> 01:39.100
Em anexo, você encontrará um novo

01:39.100 --> 01:42.430
arquivo para baixar e substituir todo o conteúdo deste índice

01:42.430 --> 01:44.650
inicial. html com o arquivo

01:44.650 --> 01:46.314
baixado e fazer o mesmo

01:46.314 --> 01:48.700
com o app. css ainda não temos

01:48.700 --> 01:50.360
um arquivo, basta adicionar

01:50.360 --> 01:52.870
o arquivo que você encontra anexado a esta

01:52.870 --> 01:54.410
palestra ao seu projeto ao

01:54.410 --> 01:57.010
lado do índice. html porque

01:57.010 --> 01:59.470
lá já importamos.

01:59.470 --> 02:02.200
Então, o que está acontecendo aqui nestes arquivos?

02:02.200 --> 02:04.560
No índice. arquivo html que estamos importando

02:04.560 --> 02:06.900
o aplicativo. css para algum estilo

02:06.900 --> 02:10.484
e o aplicativo. js para alguma lógica JavaScript é claro que não

02:10.484 --> 02:12.240
vamos escrever nenhum código JavaScript como

02:12.240 --> 02:15.589
este, vamos escrever código em app.

02:15.589 --> 02:15.589
ts,

02:15.589 --> 02:19.658
mas isso será compilado em um arquivo JavaScript, é claro.

02:19.658 --> 02:23.320
Agora no corpo desse arquivo html você encontrará

02:23.320 --> 02:25.890
um par de modelos de etiquetas.

02:25.890 --> 02:28.436
As tags modelo são tags html padrão suportadas

02:28.436 --> 02:30.427
por navegadores modernos que nos

02:30.427 --> 02:34.080
permitem especificar algum código html que não é carregado

02:34.080 --> 02:36.060
imediatamente, que não é visível

02:36.060 --> 02:37.870
imediatamente, que não é renderizado

02:37.870 --> 02:40.600
imediatamente, por assim dizer, mas que pode

02:40.600 --> 02:46.310
ser alcançado via JavaScript e, portanto, também via TypeScript para depois renderizá-lo

02:46.310 --> 02:51.911
quando quisermos renderizá-lo para controlá-lo com JavaScript e TypeScript e aí você

02:51.911 --> 02:57.500
vê que eu tenho um formulário com entradas livres basicamente um título, uma descrição

02:57.500 --> 03:00.500
e uma entrada de pessoas onde podemos decidir qual

03:00.500 --> 03:05.550
é o título de nosso projeto e quantas pessoas podem ou devem ser designadas a ele

03:05.550 --> 03:11.386
e, em seguida, o botão adicionar projeto.

03:11.386 --> 03:13.320
Depois temos outro modelo que

03:13.320 --> 03:15.450
contém apenas um item de lista que

03:15.450 --> 03:18.440
será usado para renderizar um único projeto

03:18.440 --> 03:20.100
em nossa lista de projetos

03:20.100 --> 03:22.360
que é então este modelo aqui você

03:22.360 --> 03:23.950
verá que tenho um cabeçalho

03:23.950 --> 03:25.176
com uma seção h2 e depois

03:25.176 --> 03:27.280
uma lista não ordenada e de fato

03:27.280 --> 03:30.150
esta lista não ordenada conterá mais tarde

03:30.150 --> 03:33.988
vários projetos únicos baseados neste modelo que renderizará

03:33.988 --> 03:42.357
os dados inseridos aqui através do formulário no topo e tudo será então anexado com a ajuda do TypeScript a este div aqui

03:42.357 --> 03:45.930
com o id "app".

03:45.930 --> 03:48.970
Agora, app. O css contém apenas alguns

03:48.970 --> 03:50.790
estilos css que você pode ver,

03:50.790 --> 03:52.130
é claro, que eu não vou

03:52.130 --> 03:54.020
focar nisto aqui, já que não tem

03:54.020 --> 03:56.960
nada a ver com TypeScript e agora é nosso trabalho

03:56.960 --> 04:00.216
escrever algum código TypeScript que no final pegue

04:00.216 --> 04:03.502
bem o que o usuário entrar aqui, na verdade, primeiro

04:03.502 --> 04:06.400
de tudo o que torna este formulário e depois pegue

04:06.400 --> 04:08.390
o que o usuário entrar valida o que

04:08.390 --> 04:11.975
o usuário entra, então o título, descrição e as pessoas têm

04:11.975 --> 04:15.030
valores válidos escuta um clique neste botão ou para

04:15.030 --> 04:18.440
o envio do formulário para ser preciso, então cria um novo

04:18.440 --> 04:21.430
projeto, então um novo objeto JavaScript no final

04:21.430 --> 04:24.160
que é armazenado em algum array provavelmente

04:24.160 --> 04:26.490
onde este array é então renderizado a esta

04:26.490 --> 04:29.490
lista e, claro, a lista inteira também precisa ser

04:29.490 --> 04:34.000
adicionada ao dom, então estes são todos os passos e, claro, estes são alguns

04:34.000 --> 04:36.790
passos.

04:36.790 --> 04:39.580
Agora, se você está se sentindo muito confiante, é claro,

04:39.580 --> 04:42.900
aproveite esta oportunidade para fazer uma pausa agora mesmo e

04:42.900 --> 04:45.080
tente implementar isto por conta própria,

04:45.080 --> 04:46.740
não importa o que pareça, no final,

04:46.740 --> 04:48.141
que você tem apenas uma configuração

04:48.141 --> 04:49.990
onde este fórum é visível, onde os usuários

04:49.990 --> 04:51.980
podem entrar em algo lá e onde para cada

04:51.980 --> 04:54.295
projeto você entra em algo que você renderiza

04:54.295 --> 04:57.810
um item desta lista que também deve ser visível se você chegar a isso,

04:57.810 --> 05:00.539
isso já é incrível, mas é claro que também implementaremos

05:00.539 --> 05:06.340
este passo a passo juntos e, depois disso, uma vez que isto for implementado, também nos certificaremos de que realmente

05:06.340 --> 05:09.037
renderizamos listas de ferramentas e podemos alternar

05:09.037 --> 05:15.440
projetos entre estas listas com arrastar e soltar e assim por diante.

05:15.440 --> 05:17.993
Portanto, antes de mais nada, vamos começar.
