WEBVTT

00:02.170 --> 00:04.780
-: Então, o objetivo é construir um componente de lista de afazeres

00:04.780 --> 00:06.330
e, portanto, aqui na pasta de origem,

00:06.330 --> 00:08.600
vou adicionar uma nova subpasta, componentes, e ali uma

00:08.600 --> 00:11.280
"lista de afazeres". arquivo "tsx", que conteria

00:11.280 --> 00:13.690
meu componente de lista de afazeres.

00:13.690 --> 00:15.370
Agora, para construir um componente

00:15.370 --> 00:17.030
de reação, precisamos importar Reagir

00:17.030 --> 00:20.250
de "reagir", caso contrário, o JXS não funcionará neste arquivo.

00:20.250 --> 00:22.820
Então eu crio minha lista de tarefas constante, que

00:22.820 --> 00:24.530
armazena uma função de seta e, claro,

00:24.530 --> 00:26.990
isto não precisa ser uma função de seta, você também

00:26.990 --> 00:30.320
poderia usar uma função com a palavra-chave função.

00:30.320 --> 00:33.160
Agora vamos exportar isto.

00:33.160 --> 00:36.500
Agora, vamos usar nossos recursos extra de digitação, e vamos

00:36.500 --> 00:39.370
definir o tipo de reação. fc para indicar que esta

00:39.370 --> 00:42.010
não deve ser uma função regular, mas um

00:42.010 --> 00:43.950
componente funcional.

00:43.950 --> 00:46.920
Portanto, recebemos um erro porque não estamos devolvendo

00:46.920 --> 00:49.790
algo que se qualifica como um elemento de reação.

00:49.790 --> 00:53.250
Portanto, aqui, devemos retornar, digamos, uma lista não ordenada.

00:53.250 --> 00:54.850
Porque quero fazer uma lista aqui,

00:54.850 --> 00:58.000
retornar uma lista não ordenada por enquanto faz sentido.

00:58.000 --> 01:02.740
Agora, nessa lista não-ordenada, eu quero produzir itens da lista.

01:02.740 --> 01:07.230
Portanto, aqui, poderíamos esperar obter nossas doses, e isso é uma matriz,

01:07.230 --> 01:09.240
e em uma matriz temos um objeto onde

01:09.240 --> 01:11.690
cada item tem uma identificação.

01:11.690 --> 01:15.627
Digamos t1 para fazer um e um texto como

01:15.627 --> 01:18.100
"Termine o curso". Este é apenas um item, mas é claro que você poderia

01:18.100 --> 01:18.933
ter vários desses

01:18.933 --> 01:20.800
objetos nesta matriz.

01:20.800 --> 01:22.010
Aqui em nossa lista, podemos então produzir

01:22.010 --> 01:24.620
dinamicamente as doses e mapeá-las em uma lista de itens da lista.

01:24.620 --> 01:29.620
Então, aqui, nós passamos por todas as tarefas, esta é uma função JavaScript

01:30.250 --> 01:32.930
embutida, é claro, a função de mapa, e

01:32.930 --> 01:35.070
retornamos um item de lista para

01:35.070 --> 01:37.740
cada elemento desta matriz e naquele

01:37.740 --> 01:41.530
item de lista, eu defino "tarefas". texto" como conteúdo no item da lista e acrescente este adereço

01:41.530 --> 01:45.570
chave especial, que Reage realmente

01:45.570 --> 01:47.870
quer em elementos repetidos sentados

01:47.870 --> 01:49.620
um ao lado do outro.

01:49.620 --> 01:51.980
Aqui, devemos escolher algo único e o ID deve ser

01:51.980 --> 01:54.130
qualificado como um identificador único.

01:54.130 --> 01:57.710
Com isso, estamos fazendo uma lista de doses a serem administradas.

01:57.710 --> 02:00.470
Vamos agora integrar o componente de lista de afazeres

02:00.470 --> 02:02.860
no componente de aplicação e para isso, naturalmente,

02:02.860 --> 02:05.520
podemos ir para o componente de aplicação, importar

02:05.520 --> 02:06.930
"TodoList" de ". /componentes/TodoList"

02:06.930 --> 02:11.530
como este, o ". A extensão "tsx" será adicionada automaticamente pelo fluxo de trabalho de

02:11.530 --> 02:14.350
construção que estamos usando sob o capô aqui.

02:14.350 --> 02:17.160
E então, aqui dentro de nosso div, podemos tornar

02:17.160 --> 02:18.850
"TodoList" dessa forma.

02:18.850 --> 02:21.440
Se agora salvarmos isto e voltarmos à página

02:21.440 --> 02:24.190
corrente, vemos este aqui para fazer.

02:24.190 --> 02:25.870
O estilo é horrível e podemos acrescentar

02:25.870 --> 02:29.350
melhor estilo mais tarde, mas, por enquanto, isso deve ser bom.

02:29.350 --> 02:31.680
No entanto, isto não é realmente realista.

02:31.680 --> 02:35.620
Quando estamos construindo este aplicativo de lista de afazeres, mais tarde

02:35.620 --> 02:37.950
quero poder adicionar novas doses com um componente

02:37.950 --> 02:40.063
separado que ainda não temos.

02:40.063 --> 02:42.920
E provavelmente administraremos as doses

02:42.920 --> 02:45.570
aqui neste componente de aplicação porque

02:45.570 --> 02:48.810
aqui neste lugar, teremos um componente que adiciona

02:48.810 --> 02:53.020
as doses e esse componente será capaz de falar de volta a este componente

02:53.020 --> 02:55.280
de aplicação.

02:55.280 --> 02:56.690
Aqui, nós então gerenciamos

02:56.690 --> 02:59.650
nossa matriz de doses e adicionamos doses a essa matriz ou

02:59.650 --> 03:01.510
apagamos doses dessa matriz.

03:01.510 --> 03:04.220
Para fazer a lista de afazeres, passaremos então essa matriz.

03:04.220 --> 03:06.930
Portanto, mesmo que ainda não estejamos administrando,

03:06.930 --> 03:09.270
provavelmente teríamos essa "todos" não na lista

03:09.270 --> 03:11.660
de afazeres, mas no componente de aplicação.

03:11.660 --> 03:15.010
É mais realista que esta matriz acabe mais tarde aqui para que

03:15.010 --> 03:16.740
já possamos movê-la para cá.

03:16.740 --> 03:20.093
Agora, precisamos passá-lo para "TodoList". Para isso, é claro, podemos usar adereços.

03:20.930 --> 03:23.600
Portanto, na lista de afazeres, você poderia ter um adereço

03:23.600 --> 03:25.640
de itens, o nome, naturalmente, depende de nós

03:25.640 --> 03:28.370
porque estamos definindo este componente, podemos definir

03:28.370 --> 03:30.350
como seu adereço deve ser nomeado.

03:30.350 --> 03:32.100
Podemos nos alimentar em nosso conjunto "todos".

03:32.100 --> 03:35.010
Agora, já vemos que a IDE não gosta disso e se eu tentar

03:35.010 --> 03:37.820
salvar isso, também temos um erro de compilação.

03:37.820 --> 03:40.650
Recebemos um erro de compilação porque

03:40.650 --> 03:45.400
os "itens" de propriedade não existem no tipo qualquer.

03:45.400 --> 03:47.830
Portanto, basicamente não existe aqui neste tipo de

03:47.830 --> 03:50.440
cruzamento que, no final, define a estrutura dos adereços

03:50.440 --> 03:52.070
recebidos pela "TodoList". Porque ao usar datilografia com React,

03:52.070 --> 03:55.300
você tem que ser claro sobre os tipos com os quais você está trabalhando.

03:55.300 --> 03:59.470
Isso não significa apenas que você diz ao datilógrafo que este é um tipo

03:59.470 --> 04:02.110
especial de função, não, significa também que

04:02.110 --> 04:05.250
se você confiar em adereços em algum componente, você

04:05.250 --> 04:08.360
diz ao datilógrafo como esses adereços devem se parecer

04:08.360 --> 04:11.020
com a forma como estão estruturados.

04:11.020 --> 04:14.860
Assim, no componente de lista de afazeres, recebemos aqui, certo,

04:14.860 --> 04:17.420
os adereços, isto é, Reage regularmente.

04:17.420 --> 04:19.400
E nos adereços, provavelmente temos a propriedade de nosso item.

04:19.400 --> 04:23.530
Portanto, temos um adereço chamado "itens" e

04:23.530 --> 04:26.200
foi isso mesmo que eu disse aqui

04:26.200 --> 04:30.323
em cima: "Eu tenho este adereço de itens". O problema agora é que isto tecnicamente funcionaria, mas o datilografia

04:31.420 --> 04:33.430
ainda não aborta.

04:33.430 --> 04:35.067
Nós não dissemos realmente que nosso adereço

04:35.067 --> 04:37.140
deveria ter uma propriedade "itens" aqui.

04:37.140 --> 04:39.503
Para dizer isto, podemos usar o fato

04:39.503 --> 04:41.950
de que este tipo de componente de função

04:41.950 --> 04:45.063
aqui é na verdade um tipo genérico.

04:45.063 --> 04:46.913
Um tipo genérico onde podemos definir todos os

04:47.840 --> 04:50.510
adereços extras além do adereços padrão das crianças, que cada componente

04:50.510 --> 04:52.170
tem, o que esperamos aqui.

04:52.170 --> 04:54.250
Assim, podemos adicionar aqui parênteses

04:54.250 --> 04:58.132
angulares e adicionar nosso objeto que descreve a estrutura deste objeto "aderente"

04:58.132 --> 05:00.710
que estamos recebendo aqui ou, para manter nosso código

05:00.710 --> 05:03.670
mais enxuto, fazemos isso em uma interface extra aqui e isso

05:03.670 --> 05:06.170
é totalmente opcional.

05:06.170 --> 05:09.670
Portanto, aqui poderíamos ter os adereços da lista de afazeres

05:09.670 --> 05:12.350
e isto descreve como são os nossos adereços.

05:12.350 --> 05:15.120
E aqui, espero obter uma chave "itens",

05:15.120 --> 05:18.260
onde temos um conjunto de objetos onde cada

05:18.260 --> 05:20.510
objeto tem um ID, que é uma cadeia,

05:20.510 --> 05:23.380
e tem um texto, que é uma cadeia.

05:23.380 --> 05:26.120
Esses são os dados que estamos gerenciando aqui.

05:26.120 --> 05:30.020
Temos um conjunto de objetos com uma cadeia de identificação

05:30.020 --> 05:32.850
e uma cadeia de texto.

05:32.850 --> 05:34.370
Isso é o que eu espero obter aqui é "adereços"

05:34.370 --> 05:36.070
uma série de tais objetos e se estivermos

05:36.070 --> 05:38.940
aqui, podemos agora apontar para esta interface de adereços de lista

05:38.940 --> 05:40.700
de tarefas e agora tudo está bem. Agora o datilografado entende

05:40.700 --> 05:42.670
que aqui, vamos obter adereços,

05:42.670 --> 05:45.040
onde teremos um adereços de itens e que

05:45.040 --> 05:48.640
este adereços de itens será uma matriz onde teremos uma chave

05:48.640 --> 05:52.145
de identificação e uma chave

05:52.145 --> 05:55.000
de texto em cada elemento da matriz.

05:55.000 --> 05:56.920
Portanto, agora se salvarmos isto, ele se compila,

05:56.920 --> 05:58.870
e obtemos novamente o resultado de trabalho.

05:58.870 --> 05:59.850
Portanto, mais uma vez, isto é datilografia sendo usado com React.

05:59.850 --> 06:02.390
Não o usamos apenas para dizer ao React ou para dizer ao digitado,

06:02.390 --> 06:04.188
que este é um componente funcional, mas

06:04.188 --> 06:06.830
também sobre os adereços que este componente eventualmente

06:06.830 --> 06:10.000
recebe e isto nos ajuda muito com a segurança do tipo.

06:10.000 --> 06:13.490
Evita que eu aqui acidentalmente pense que

06:13.490 --> 06:15.130
se chama "todos". Não, isto não é suportado, recebemos um erro.

06:15.130 --> 06:19.060
São itens.

06:19.060 --> 06:21.165
Todos vocês verão aqui a conclusão automática.

06:21.165 --> 06:23.330
Portanto, a codificação fica muito mais fácil quando

06:23.330 --> 06:24.910
se trabalha com datilografia aqui. E isso, é claro, é toda a vantagem do datilografia: simplifica

06:24.910 --> 06:27.160
a codificação, evita erros desnecessários e, como você pode ver, também o faz

06:27.160 --> 06:28.400
em um aplicativo de reação.

06:28.400 --> 06:30.670
Mas é claro que ainda não terminamos.

06:30.670 --> 06:34.420
No momento, nossas doses aqui nunca mudam

06:34.420 --> 06:36.640
e eu quero mudar

06:36.640 --> 06:39.930
isso, quero ter um componente que nos

06:39.930 --> 06:44.120
permita adicionar novas doses.

06:44.120 --> 06:46.080
Então, vamos trabalhar nisso a seguir.
