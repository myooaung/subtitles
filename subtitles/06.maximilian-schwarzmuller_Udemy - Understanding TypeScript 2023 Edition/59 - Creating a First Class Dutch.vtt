WEBVTT

00:02.270 --> 00:03.103
Instructeur: Hiervoor

00:03.103 --> 00:04.620
heb ik een klein startproject voor jullie.

00:04.620 --> 00:05.610
Je vindt het bijgevoegd.

00:05.610 --> 00:07.070
Het is hetzelfde startproject

00:07.070 --> 00:08.810
dat we steeds opnieuw gebruiken.

00:08.810 --> 00:12.080
Je start de ontwikkelserver met npm-start

00:12.080 --> 00:15.510
en vervolgens startte ik de TypeScript-compilatie

00:15.510 --> 00:19.830
in watch mode met tsc-w in een aparte terminal.

00:19.830 --> 00:22.890
Dus hier in mijn ingebouwde terminal heb ik twee tabbladen.

00:22.890 --> 00:24.390
Een met de ontwikkelingsserver

00:24.390 --> 00:26.070
die je in de lucht moet houden zodat

00:26.070 --> 00:27.670
hij op veranderingen let en de

00:27.670 --> 00:30.720
pagina opnieuw laadt en de server in de lucht houdt, en een

00:30.720 --> 00:32.820
ander tabblad waar ik die draaiende TypeScript

00:32.820 --> 00:35.530
compilatie watcher heb staan.

00:35.530 --> 00:36.930
Nu kunnen we werken

00:36.930 --> 00:39.400
in de app. ts bestand dat nu nog leeg

00:39.400 --> 00:41.520
is en begin daar wat code te schrijven en ik

00:41.520 --> 00:42.990
wil meteen beginnen met het definiëren

00:42.990 --> 00:45.603
van een klasse die we kunnen gebruiken.

00:46.490 --> 00:49.420
We doen dit door het sleutelwoord class te gebruiken,

00:49.420 --> 00:51.340
gewoon zo en dan de naam van de class

00:51.340 --> 00:54.030
en laten we zeggen dat we een app bouwen, een

00:54.030 --> 00:56.880
webapplicatie, een gebruikersinterface

00:56.880 --> 01:00.700
voor een webtool waarmee we onze verschillende afdelingen

01:00.700 --> 01:04.100
in ons bedrijf kunnen beheren.

01:04.100 --> 01:05.770
Misschien bouwen we een soort

01:05.770 --> 01:08.440
bedrijfsinterne tool, wat het ook is, en

01:08.440 --> 01:11.290
moeten er meerdere afdelingen zijn.

01:11.290 --> 01:13.790
Nu kunnen we objecten gebruiken om de gegevens

01:13.790 --> 01:16.320
voor de verschillende afdelingen te beheren

01:16.320 --> 01:19.960
en we kunnen dan ook methoden toevoegen aan elk object, zodat

01:19.960 --> 01:21.980
we die afdelingsinformatie kunnen

01:21.980 --> 01:24.020
weergeven op het scherm, en om het maken

01:24.020 --> 01:26.980
van deze verschillende afdelingsobjecten, die er

01:26.980 --> 01:30.430
allemaal hetzelfde uitzien, te vereenvoudigen, maken we

01:30.430 --> 01:33.000
een afdelingsklasse.

01:33.000 --> 01:35.690
Dus we zouden deze klasse Departement kunnen noemen.

01:35.690 --> 01:36.830
De naam is helemaal aan jou.

01:36.830 --> 01:40.030
De conventie is dat het begint met een hoofdletter om duidelijk

01:40.030 --> 01:42.720
te maken dat het om een klasse gaat.

01:42.720 --> 01:45.670
Als je al langer met JavaScript bezig bent, ken je misschien

01:45.670 --> 01:48.270
het idee van constructeursfuncties, en uiteindelijk

01:48.270 --> 01:50.090
zijn klassen syntactische suiker

01:50.090 --> 01:52.140
daarvoor, zou je kunnen zeggen, maar

01:52.140 --> 01:53.920
dat zien we wel als we onze code

01:53.920 --> 01:56.980
hebben gecompileerd.

01:56.980 --> 01:59.220
Dus hier hebben we onze klasse Department

01:59.220 --> 02:02.080
en daarin hebben we misschien een name property.

02:02.080 --> 02:04.010
Je kunt het gewoon zo toevoegen,

02:04.010 --> 02:07.290
zonder let of const ervoor, gewoon zo, direct

02:07.290 --> 02:09.840
in de klasse en dan kun je er natuurlijk

02:09.840 --> 02:12.550
ook een type aan toekennen.

02:12.550 --> 02:14.690
Dat doe je door hier een dubbele punt toe te voegen

02:14.690 --> 02:17.920
en dan het type bijvoorbeeld string en dat is belangrijk.

02:17.920 --> 02:21.150
Dit ziet er misschien uit als een object, maar het is geen object.

02:21.150 --> 02:23.240
In een object gebruik je key-value paren met

02:23.240 --> 02:25.520
een dubbele punt voor een sleutelnaam en dan de

02:25.520 --> 02:27.000
waarde voor de sleutel.

02:27.000 --> 02:28.810
Hier is dat niet het geval.

02:28.810 --> 02:32.250
Dit is een zogenaamd veld van een klasse.

02:32.250 --> 02:34.680
Je maakt ook een klasse met accolades, maar

02:34.680 --> 02:37.110
hier is dit geen sleutel-waardepaar, dit

02:37.110 --> 02:39.120
definieert alleen de naam van een sleutel

02:39.120 --> 02:41.040
die je in het object zult hebben dat

02:41.040 --> 02:43.530
je zult maken op basis van de klasse en je definieert

02:43.530 --> 02:48.530
het waardetype dat die sleutel uiteindelijk zal bevatten.

02:48.550 --> 02:52.363
U kunt hier ook een beginwaarde instellen met de = 'DEFAULT',

02:53.840 --> 02:55.920
maar dat hoeft u niet te doen.

02:55.920 --> 02:59.050
In plaats daarvan heb je in klassen vaak

02:59.050 --> 03:03.410
een speciale functie, een zogenaamde methode.

03:03.410 --> 03:06.780
Functies in objecten worden gewoon methoden genoemd,

03:06.780 --> 03:09.410
en dat is de constructormethode.

03:09.410 --> 03:12.500
We kunnen het zo toevoegen en dit is een gereserveerd woord.

03:12.500 --> 03:16.170
Constructor is een gereserveerd sleutelwoord dat wordt begrepen

03:16.170 --> 03:18.390
door TypeScript en ook door modern JavaScript

03:18.390 --> 03:22.480
en dit is in wezen een functie gebonden aan deze klasse en gebonden aan

03:22.480 --> 03:25.840
elk object dat u maakt op basis van de klasse en die wordt uitgevoerd

03:25.840 --> 03:29.640
wanneer het object wordt gemaakt.

03:29.640 --> 03:33.500
Dus hiermee kun je in principe wat initialisatiewerk doen

03:33.500 --> 03:35.700
voor het object dat je bouwt.

03:35.700 --> 03:38.280
Daarin zou je een argument kunnen aanvaarden.

03:38.280 --> 03:41.910
Laten we het misschien n noemen, wat ook van het type string

03:41.910 --> 03:45.620
kan zijn en dan wil je dat hier in je naamveld opslaan of je kunt

03:45.620 --> 03:47.000
dit doen door naar naam

03:47.000 --> 03:49.050
te reiken met het dit sleutelwoord

03:49.050 --> 03:51.200
en daar n in op te slaan.

03:51.200 --> 03:55.200
Wat dit doet is de waarde van het naamveld, ook wel eigenschap

03:55.200 --> 03:58.630
zo van de naam eigenschap genoemd, instellen op

03:58.630 --> 04:01.180
de waarde die je krijgt op n wanneer

04:01.180 --> 04:04.550
een afdelingsobject wordt gemaakt.

04:04.550 --> 04:07.030
Hoe kunnen we nu zo'n afdelingsobject maken?

04:07.030 --> 04:08.890
Niets makkelijker dan dat.

04:08.890 --> 04:13.110
Buiten de klasse die je gemaakt hebt door het nieuwe sleutelwoord te gebruiken

04:13.110 --> 04:16.200
dat ook in TypeScript en JavaScript is ingebouwd en

04:16.200 --> 04:18.410
dan herhaal je de naam van de klasse, dan

04:18.410 --> 04:20.160
voeg je haakjes toe en dit zou een

04:20.160 --> 04:22.440
nieuw afdelingsobject creëren, maar

04:22.440 --> 04:26.240
de constructor wordt op dit moment aangeroepen wanneer je deze

04:26.240 --> 04:29.620
klasse zo uitvoert met het nieuwe sleutelwoord en de constructor

04:29.620 --> 04:33.440
hier neemt een argument, een string.

04:33.440 --> 04:35.600
Nu geef je constructor argumenten

04:35.600 --> 04:39.800
door aan deze afdelingsoproep hier dus tussen deze haakjes.

04:39.800 --> 04:41.640
Dus hier zouden we dit Boekhouding kunnen

04:41.640 --> 04:44.730
noemen omdat we hier misschien de boekhoudafdeling bouwen.

04:44.730 --> 04:46.100
Dit maakt nu een nieuw

04:46.100 --> 04:49.800
JavaScript-object aan op basis van deze blauwdruk.

04:49.800 --> 04:53.910
Dus nu kunnen we dit bijvoorbeeld opslaan in een constante

04:53.910 --> 04:58.010
en dan console. logboek. boekhouding hier om te zien wat we krijgen.

04:58.010 --> 04:59.620
Als we dat nu opslaan en dan teruggaan

04:59.620 --> 05:02.020
naar onze pagina hier en een kijkje nemen in

05:02.020 --> 05:03.780
de ontwikkelconsole hier in de

05:03.780 --> 05:05.660
def tools, zouden we hier ons afdelingsobject

05:05.660 --> 05:07.930
moeten hebben.

05:07.930 --> 05:10.000
Het is een gewoon JavaScript-object,

05:10.000 --> 05:13.770
met alleen dit afdelings-type eraan vast, en uiteindelijk is

05:13.770 --> 05:15.290
het een object met een sleutel-waardepaar,

05:15.290 --> 05:18.140
waarbij de sleutel de naam is, want die hebben we

05:18.140 --> 05:20.270
hierboven gedefinieerd, en de waarde

05:20.270 --> 05:23.110
Accounting.

05:23.110 --> 05:25.530
We hebben deze boekhoudkundige waarde

05:25.530 --> 05:27.460
hier omdat we deze als argument

05:27.460 --> 05:29.560
doorgeven aan de constructeur.

05:29.560 --> 05:31.770
Daar accepteren we zo'n string, die

05:31.770 --> 05:34.830
de waarde in dit veld herstelt, en velden worden

05:34.830 --> 05:38.400
uiteindelijk gewoon vertaald naar eigenschappen, die

05:38.400 --> 05:41.890
het object op basis van de klasse daarna zal hebben.

05:41.890 --> 05:44.480
Dus dit is hoe we een eenvoudige klasse kunnen

05:44.480 --> 05:46.570
maken en wat het algemene idee is.

05:46.570 --> 05:50.143
Laten we nu eens kijken wat we werkelijk krijgen in JavaScript.
