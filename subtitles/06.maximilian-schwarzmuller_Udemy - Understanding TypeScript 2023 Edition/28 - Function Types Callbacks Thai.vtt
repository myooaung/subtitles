WEBVTT

00:02.440 --> 00:05.170
ผู้สอน: ตอนนี้พูดถึงการเรียกกลับและประเภทฟังก์ชัน

00:05.170 --> 00:08.400
ที่นั่นใช้งานได้ค่อนข้างมากในลักษณะเดียวกัน

00:08.400 --> 00:10.550
สมมติว่าเรามีฟังก์ชันใหม่เพิ่ม

00:11.800 --> 00:14.990
addAndHandle ขึ้นมา

00:14.990 --> 00:22.320
ที่นั่นเราคาดว่าจะได้รับสองหมายเลข จากนั้นฉันยังต้องการฟังก์ชันการโทรกลับที่นี่ด้วย

00:22.320 --> 00:26.670
ดังนั้นฟังก์ชันที่ส่งผ่านและเป็นอาร์กิวเมนต์ที่ควรทำอะไรสักอย่างกับผลลัพธ์

00:26.670 --> 00:29.930
แน่นอนว่าที่นี่เราสร้างผลลัพธ์ได้

00:29.930 --> 00:31.060
แต่ไม่เพียงแค่ส่งคืนเท่านั้น

00:31.060 --> 00:35.670
แต่ฉันต้องการเรียกฟังก์ชันการโทรกลับและส่งต่อผลลัพธ์แทน

00:35.670 --> 00:39.270
ตอนนี้ฉันต้องการให้ชัดเจนว่าการโทรกลับควรเป็นฟังก์ชัน

00:39.270 --> 00:42.190
อีกครั้ง ฉันใช้นิยามประเภทฟังก์ชันที่อาจไม่ส่งคืนอะไรเลย

00:42.190 --> 00:51.280
แต่ใช้ตัวเลขเป็นอาร์กิวเมนต์เพราะเราส่งค่าเป็นตัวเลขตรงนี้

00:51.280 --> 00:52.740
ดังนั้นฟังก์ชันการเรียกกลับ

00:52.740 --> 00:58.460
ฟังก์ชันที่เราส่งไปยังฟังก์ชันนี้ในฐานะพารามิเตอร์ควรยอมรับตัวเลข

00:58.460 --> 01:01.890
ลงไปข้างล่าง เราจะเรียก addAndHandle ส่งผ่าน

01:01.890 --> 01:05.240
10 และ 20 แล้วจึงส่งผ่านฟังก์ชัน

01:05.240 --> 01:07.570
ตัวอย่างเช่น ฟังก์ชันนิรนามที่นี่

01:07.570 --> 01:09.710
ทีนี้ เมื่อเราเรียกฟังก์ชัน แน่นอนว่านี่ไม่ใช่ประเภทของฟังก์ชัน

01:09.710 --> 01:15.150
แต่เป็นค่าที่เป็นรูปธรรมที่เราส่งผ่านสำหรับอาร์กิวเมนต์ที่สามนี้

01:15.150 --> 01:18.870
ดังนั้น นี่คือฟังก์ชันนิรนามที่สร้างที่นี่

01:18.870 --> 01:22.300
และที่นั่น เรารู้ว่าเราจะได้ตัวเลข

01:22.300 --> 01:23.810
อาจจะตั้งชื่อมันว่าผลลัพธ์ที่นี่

01:23.810 --> 01:26.110
แล้วเราจะทำอะไรก็ได้ตามที่เราต้องการ

01:26.110 --> 01:27.623
และตอนนี้ถ้าคุณคอมไพล์สิ่งนี้

01:28.570 --> 01:33.540
เราจะเห็นบันทึกนี้อยู่ตรงนั้น 30 ซึ่งเป็นผลลัพธ์ของฟังก์ชันการเรียกกลับที่เราส่งผ่านไปยัง

01:33.540 --> 01:43.200
addAndHandle โดยที่ addAndHandle จะรวมเป็นตัวเลขสองตัว แล้วเรียกการเรียกกลับโดยที่การเรียกกลับต้องเป็นไปตามเงื่อนไขนี้ที่นี่

01:43.200 --> 01:52.240
ข้อดีของเราในการกำหนดนิยามฟังก์ชันการเรียกกลับที่นี่คือภายในฟังก์ชันที่เราส่งผ่านมันเป็นประเภทการเรียกกลับที่สามารถอนุมานได้ว่าผลลัพธ์จะเป็นตัวเลข

01:52.240 --> 01:56.620
และด้วยเหตุนี้เราจึงสามารถทำอะไรกับผลลัพธ์ที่นี่ได้

01:56.620 --> 01:58.090
สิ่งที่เราสามารถทำได้กับตัวเลขโดยไม่ต้องระบุประเภทอย่างชัดเจนที่นี่

01:58.090 --> 02:08.473
เนื่องจาก TypeScript รู้ว่าผลลัพธ์จะเป็นตัวเลข เนื่องจากเราระบุอย่างชัดเจนว่าการเรียกกลับจะได้รับหนึ่งอาร์กิวเมนต์ซึ่งเป็นตัวเลข

02:09.310 --> 02:13.060
ดังนั้น หากเราคาดว่าจะมีอาร์กิวเมนต์ที่สองที่นี่ในการเรียกกลับ

02:13.060 --> 02:15.460
เราจะได้รับข้อผิดพลาดเพราะเราทราบดี การเรียกกลับที่เราคาดหวังในฟังก์ชัน

02:15.460 --> 02:20.500
addAndHandle ควรมีหนึ่งอาร์กิวเมนต์เท่านั้น

02:20.500 --> 02:23.950
ดังนั้นหากเราส่งฟังก์ชันการเรียกกลับซึ่งรับอาร์กิวเมนต์ที่สอง

02:23.950 --> 02:26.240
นั่นคือข้อผิดพลาดอย่างชัดเจน

02:26.240 --> 02:30.280
สิ่งเดียวที่ TypeScript รับไม่ได้คือถ้าเราส่งคืนบางอย่างที่นี่

02:30.280 --> 02:33.690
หากผลลัพธ์ส่งคืนและการโทรกลับส่งคืนบางสิ่ง

02:33.690 --> 02:37.300
แม้ว่าเราจะระบุชัดเจนว่าไม่ควรส่งคืนสิ่งใด

02:37.300 --> 02:41.180
อย่างไรก็ตาม นี่ไม่ใช่ข้อผิดพลาดหรือบั๊กใน TypeScript

02:41.180 --> 02:43.150
มันเกิดขึ้นจริงตามเจตนา

02:43.150 --> 02:46.000
การระบุ void ที่นี่ในประเภทการโทรกลับของเรา

02:46.000 --> 02:50.910
หมายความว่าเราจะเพิกเฉยต่อผลลัพธ์ใดๆ ที่คุณอาจส่งคืนที่นี่

02:50.910 --> 02:54.030
ดังนั้นเราจึงพูดโดยทั่วไปใน addAndHandle ซึ่งเราได้รับฟังก์ชันการเรียกกลับนั้น

02:54.030 --> 02:58.080
เราจะไม่ทำอะไรกับประเภทการส่งคืน

02:58.080 --> 03:00.600
นั่นเป็นเหตุผลที่คุณจะสามารถคืนบางสิ่งที่นี่ได้โดยไม่มีการลงโทษ

03:00.600 --> 03:10.870
แต่คุณรู้ไหม เพราะมันระบุไว้อย่างชัดเจนในประเภทการเรียกกลับว่าการโทรกลับจะไม่ทำอะไรกับมูลค่าที่คุณอาจส่งคืนที่นี่

03:10.870 --> 03:17.120
ดังนั้น addAndHandle ภายในฟังก์ชันจะไม่ทำอะไรกับค่านั้นที่คุณอาจส่งคืน

03:17.120 --> 03:19.620
และแน่นอนว่าเป็นข้อมูลที่เป็นประโยชน์

03:19.620 --> 03:21.270
คุณอาจคาดหวังว่าในที่นี้

03:21.270 --> 03:25.710
เรากำลังทำบางอย่างกับค่าที่ส่งคืนโดยการโทรกลับ และด้วยการระบุประเภทนี้

03:25.710 --> 03:33.920
เราทำให้ชัดเจนว่าภายใน addAndHandle เราไม่สนใจค่าส่งคืนใดๆ

03:33.920 --> 03:38.260
ดังนั้นสิ่งนี้ไม่ได้บังคับให้คุณส่งการโทรกลับที่ไม่ส่งคืนอะไรเลย

03:38.260 --> 03:42.200
มันแค่บอกคุณว่าสิ่งที่คุณอาจส่งคืนจะไม่ถูกนำไปใช้

03:42.200 --> 03:44.070
สำหรับพารามิเตอร์นั้นแตกต่างกันแน่นอน

03:44.070 --> 03:45.540
สิ่งนี้ถูกบังคับใช้เพราะที่นี่เป็นเรื่องสำคัญจริง

03:45.540 --> 03:51.720
ๆ ที่คุณต้องรู้ว่าคุณกำลังส่งการโทรกลับที่คาดว่าจะมีพารามิเตอร์มากกว่านี้หรือไม่

03:51.720 --> 03:55.350
ถ้าอย่างนั้น คุณจะได้รับข้อผิดพลาดหรือคุณจะไม่ได้รับผลลัพธ์ที่คุณต้องการ

03:55.350 --> 03:57.740
เพราะฉันให้คุณเพียงผลลัพธ์เดียวเท่านั้น

03:57.740 --> 04:02.840
ดังนั้นเราจึงไม่สามารถเพิกเฉยต่อสิ่งที่คุณอาจต้องการได้ เนื่องจากเป็นกรณีของประเภทการคืนสินค้า

04:02.840 --> 04:05.506
เราเพิกเฉยที่นี่สำหรับการส่งผ่านบางสิ่งที่ฟังก์ชัน

04:05.506 --> 04:10.920
addAndHandle รับผิดชอบเพราะนั่นคือจุดที่โทรกลับถูกเรียก

04:10.920 --> 04:13.210
นี่คือเหตุผลที่บังคับใช้พารามิเตอร์และ

04:13.210 --> 04:17.150
TypeScript เข้มงวดมากเกี่ยวกับจำนวนและประเภทของพารามิเตอร์ของฟังก์ชันการเรียกกลับ

04:17.150 --> 04:21.253
และเหตุใดจึงไม่สนใจเกี่ยวกับประเภทการส่งคืน
