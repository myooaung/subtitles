WEBVTT

00:02.210 --> 00:04.150
Istruttore: E questo è tutto per questo modulo.

00:04.150 --> 00:07.040
Abbiamo dato uno sguardo molto dettagliato al compilatore

00:07.040 --> 00:08.140
TypeScript, a come si può

00:08.140 --> 00:10.360
configurare e a come ci si può assicurare che compili

00:10.360 --> 00:12.800
davvero il codice nel modo desiderato.

00:12.800 --> 00:15.190
Abbiamo dato un'occhiata a tutte queste diverse

00:15.190 --> 00:17.030
opzioni, in particolare a quelle rigorose,

00:17.030 --> 00:19.610
che consentono di scrivere codice corretto e di non

00:19.610 --> 00:21.850
incorrere in strani bug, strani bug di runtime

00:21.850 --> 00:24.100
che si possono incontrare, ad esempio, con

00:24.100 --> 00:27.660
i controlli rigorosi di null; inoltre, abbiamo dato un'occhiata al

00:27.660 --> 00:28.960
debug, a come si può facilmente

00:28.960 --> 00:31.390
configurare Chrome e VS Code in modo da poter eseguire

00:31.390 --> 00:34.830
il debug dall'interno di VS Code.

00:34.830 --> 00:37.480
Il debug dall'interno di Chrome con le mappe dei sorgenti

00:37.480 --> 00:38.900
e la scheda Sorgenti, ovviamente,

00:38.900 --> 00:40.390
è sempre un'opzione.

00:40.390 --> 00:42.850
La chiave sono anche le mappe di origine,

00:42.850 --> 00:45.710
che si configurano per essere generate nel file

00:45.710 --> 00:47.350
tsconfig, che sono questi

00:47.350 --> 00:48.900
file di mappa che vivono accanto

00:48.900 --> 00:51.210
ai file JavaScript.

00:51.210 --> 00:54.600
Fondamentalmente fungono da ponte per il debugger

00:54.600 --> 00:56.300
tra i file JavaScript e i file

00:56.300 --> 00:57.820
TypeScript.

00:57.820 --> 01:00.160
E con questo, sappiamo qualcosa in più

01:00.160 --> 01:02.680
su come gestire i nostri progetti.

01:02.680 --> 01:03.870
Vediamo ora cos'altro possiamo

01:03.870 --> 01:06.173
fare con TypeScript e JavaScript.
