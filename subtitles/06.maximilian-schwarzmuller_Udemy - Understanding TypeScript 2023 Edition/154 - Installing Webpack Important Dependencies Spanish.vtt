WEBVTT

00:02.160 --> 00:05.373
-: Así que de vuelta en nuestro proyecto, si quieres usar webpack allí,

00:07.223 --> 00:09.948
en primer lugar voy a dejar mi compilación y ese servidor de desarrollo

00:09.948 --> 00:10.870
actual, y luego stat,

00:10.870 --> 00:13.440
asegúrese de que podemos usar webpack allí.

00:13.440 --> 00:16.420
Ahora bien, como esto ya es un archivo del fichero package

00:16.420 --> 00:19.462
dot json, podemos utilizar NPM para instalar más dependencias

00:19.462 --> 00:21.050
en este proyecto.

00:21.050 --> 00:23.410
Así que simplemente, más bibliotecas de terceros que

00:23.410 --> 00:24.940
necesitamos en este proyecto.

00:24.940 --> 00:28.610
Y aquí no me refiero a las bibliotecas de terceros que proporcionan ciertas

00:28.610 --> 00:31.480
funcionalidades utilizando nuestro código, sino a las

00:31.480 --> 00:33.930
bibliotecas de terceros que nos ayudan a establecer

00:33.930 --> 00:37.157
un flujo de trabajo y una configuración del proyecto que hace que

00:37.157 --> 00:40.430
el desarrollo sea muy eficiente para nosotros.

00:40.430 --> 00:45.110
Lo hacemos con NPM instalado, dash dash safe dash

00:45.110 --> 00:48.600
dev para indicar que es una dependencia

00:48.600 --> 00:53.600
sólo de desarrollo, y luego webpack dash CLI, webpack

00:53.713 --> 00:58.713
dash dev dash server typescript y ts loader.

01:01.030 --> 01:03.040
Así que eso es un montón de paquetes y voy

01:03.040 --> 01:04.800
a decir lo que hacen en un segundo.

01:04.800 --> 01:06.680
Así que, en primer lugar, vamos a pulsar

01:06.680 --> 01:08.485
Enter y asegurarnos de que todos estos

01:08.485 --> 01:10.801
paquetes se instalan en nuestro proyecto, y después

01:10.801 --> 01:14.100
echaremos un vistazo a cada paquete y veremos por qué lo instalamos,

01:14.100 --> 01:16.290
así que esperemos a que termine.

01:16.290 --> 01:18.530
Así que terminó de instalar para mí aquí,

01:18.530 --> 01:21.710
y ahora con eso, vamos a analizar lo que hemos instalado.

01:21.710 --> 01:25.380
En package dot json, la sección de nuevas dependencias dev, o ya existía,

01:25.380 --> 01:27.063
pero ahora tenemos un montón de

01:27.063 --> 01:29.474
nuevos paquetes allí debería decir, estos paquetes

01:29.474 --> 01:31.290
fueron añadidos.

01:31.290 --> 01:33.690
¿Y qué hacen todos estos paquetes?

01:33.690 --> 01:35.460
Empecemos con webpack.

01:35.460 --> 01:37.580
Webpack es la herramienta de la que acabo

01:37.580 --> 01:40.080
de hablar, es el corazón de toda esta configuración

01:40.080 --> 01:41.780
que ahora vamos a crear.

01:41.780 --> 01:43.980
Se trata de una herramienta que nos permite

01:43.980 --> 01:47.150
conectar ciertas funcionalidades para agrupar nuestro código

01:47.150 --> 01:49.210
y también para transformarlo.

01:49.210 --> 01:52.470
Y que transformar nuestra parte de código es importante, estamos teniendo

01:52.470 --> 01:54.740
un proyecto de typescript aquí, ¿verdad?

01:54.740 --> 01:56.620
Ahora, por supuesto, podríamos

01:56.620 --> 02:00.220
utilizar webpack para agrupar toda la salida de JavaScript, pero

02:00.220 --> 02:03.310
sería aún mejor si webpack hiciera ambas cosas.

02:03.310 --> 02:06.250
Transformar nuestro código typescript a JavaScript,

02:06.250 --> 02:10.180
y luego realmente emitir un archivo Javascript empaquetado, y webpack

02:10.180 --> 02:13.420
es capaz de hacer eso afortunadamente.

02:13.420 --> 02:16.610
Necesitamos el CLI de webpack para ejecutar los comandos

02:16.610 --> 02:18.922
de webpack en nuestro proyecto, y el servidor

02:18.922 --> 02:21.603
de desarrollo de webpack para tener ese servidor

02:21.603 --> 02:24.286
de desarrollo incorporado, que inicia webpack

02:24.286 --> 02:27.056
bajo el capó, que vigila nuestros archivos para

02:27.056 --> 02:30.180
los cambios, activa automáticamente webpack para recompilar

02:30.180 --> 02:34.760
cuando algo cambia, y que auto sirve nuestra página.

02:34.760 --> 02:37.300
Y luego tenemos typescript y el cargador de

02:37.300 --> 02:39.460
typescript, el cargador de ts aquí.

02:39.460 --> 02:42.850
Ahora ya hemos instalado typescript globalmente en nuestra

02:42.850 --> 02:46.208
máquina, por lo que podemos ejecutar tsc dash w.

02:46.208 --> 02:49.760
Ahora es una buena práctica autoinstalar una copia de typescript

02:49.760 --> 02:53.450
por proyecto, de modo que para este proyecto, tienes una versión

02:53.450 --> 02:56.000
específica de typescript.

02:56.000 --> 02:58.320
Las ventajas de que si alguna vez cambias tu

02:58.320 --> 03:01.624
versión global de typescript, no rompes la versión de tu proyecto,

03:01.624 --> 03:05.170
la configuración de tu proyecto si ahí estamos rompiendo los cambios

03:05.170 --> 03:07.280
en el propio typescript, así que podemos

03:07.280 --> 03:10.340
bloquear una versión específica de typescript para un proyecto,

03:10.340 --> 03:13.880
por eso lo instalamos por separado aquí.

03:13.880 --> 03:16.440
Y el cargador ts ahora es un paquete que trabajará

03:16.440 --> 03:18.380
junto con webpack.

03:18.380 --> 03:21.068
El cargador ts es un paquete que le dice a webpack

03:21.068 --> 03:24.396
cómo convertir el código typescript a Javascript, de modo

03:24.396 --> 03:29.180
que webpack es capaz de hacer ambas cosas, compilar nuestro código, con la ayuda

03:29.180 --> 03:30.920
del cargador typescript, que

03:30.920 --> 03:33.370
a su vez, por supuesto, utiliza el compilador

03:33.370 --> 03:36.665
typescript bajo el capó, y luego webpack también es capaz

03:36.665 --> 03:41.580
de agrupar nuestros archivos javascript emitidos en un archivo js agrupado en un archivo

03:41.580 --> 03:44.260
de código agrupado.

03:44.260 --> 03:47.440
Bien, y con eso, simplemente empecemos y configuremos

03:47.440 --> 03:50.852
un proyecto webpack para que podamos usar webpack para

03:50.852 --> 03:53.223
todas estas cosas bonitas.
