WEBVTT

00:02.090 --> 00:02.923
Narrador: Para fazer

00:02.923 --> 00:04.750
coisas mais avançadas com decoradores,

00:04.750 --> 00:07.340
você terá que observar que alguns decoradores, por

00:07.340 --> 00:09.200
exemplo, decoradores de classe, mas

00:09.200 --> 00:11.700
também decoradores de método, por exemplo, também

00:11.700 --> 00:14.650
são realmente capazes de devolver algo.

00:14.650 --> 00:16.570
Agora, eu não vou devolver nada a nenhum

00:16.570 --> 00:17.510
decorador.

00:17.510 --> 00:18.430
Não estou falando

00:18.430 --> 00:20.010
da função de decorador, que

00:20.010 --> 00:22.460
é devolvida na fábrica de decoradores.

00:22.460 --> 00:23.701
Eu realmente quero dizer

00:23.701 --> 00:26.040
um valor de retorno dentro da função de decorador,

00:26.040 --> 00:28.890
e nós não temos tal valor em nenhum lugar.

00:28.890 --> 00:31.559
Agora na função WithTemplate, nesta função de

00:31.559 --> 00:34.670
decorador WithTemplate, devo dizer, poderíamos acrescentar

00:34.670 --> 00:36.930
um tal valor de retorno.

00:36.930 --> 00:38.520
E o que você pode retornar e qual

00:38.520 --> 00:40.430
TypeScript é capaz de usar, depende

00:40.430 --> 00:43.660
do tipo de decorador com que você está trabalhando.

00:43.660 --> 00:44.990
Aqui, estamos trabalhando

00:44.990 --> 00:47.270
com um decorador que é adicionado a uma classe,

00:47.270 --> 00:48.750
e em tal função de decorador,

00:48.750 --> 00:51.677
você pode devolver uma nova função de construtor, que

00:51.677 --> 00:53.800
irá substituir a antiga.

00:53.800 --> 00:55.590
Portanto, o que substituirá a classe à qual

00:55.590 --> 00:58.330
você acrescentou ao decorador que você poderia dizer.

00:58.330 --> 01:01.073
Portanto, aqui podemos retornar uma nova função,

01:01.073 --> 01:02.490
uma nova função construtora,

01:02.490 --> 01:06.370
ou simplesmente retornar uma nova classe, no final, porque uma

01:06.370 --> 01:08.280
classe, a palavra-chave classe,

01:08.280 --> 01:11.150
nos permite usar este açúcar sintático para criar

01:11.150 --> 01:13.360
tal função construtora, e a classe

01:13.360 --> 01:17.463
que eu crio aqui não precisa ter um nome, mas podemos e devemos estender

01:17.463 --> 01:22.250
o construtor que estamos recebendo aqui.

01:22.250 --> 01:23.730
Então o que estou fazendo aqui

01:23.730 --> 01:25.848
agora é na minha função de decorador aqui,

01:25.848 --> 01:28.060
estou devolvendo uma nova classe, e novamente

01:28.060 --> 01:29.270
tenha em mente que isso é

01:29.270 --> 01:30.910
apenas açúcar sintático para uma

01:30.910 --> 01:32.770
função de construtor, então estou devolvendo

01:32.770 --> 01:35.400
uma função de construtor, no final, que é baseada na

01:35.400 --> 01:38.830
função de construtor original, para que eu mantenha todas as propriedades

01:38.830 --> 01:44.810
da minha classe original, da minha função de construtor original, não temos necessariamente que fazer isso, mas

01:44.810 --> 01:50.520
eu não quero perder minhas propriedades aqui, então eu vou fazer isso.

01:50.520 --> 01:53.670
E então aqui podemos acrescentar novas funcionalidades.

01:53.670 --> 01:56.716
Por exemplo, e terei que mudar alguns nomes aqui, posso

01:56.716 --> 02:00.340
acrescentar uma nova função de construtor ali, e para evitar confusão,

02:00.340 --> 02:01.500
vou renomear o construtor

02:01.500 --> 02:04.040
que estou recebendo aqui.

02:04.040 --> 02:06.640
Portanto, a classe na qual eu acrescentei

02:06.640 --> 02:09.620
este decorador, vou nomear este aqui, originalConstrutor

02:12.889 --> 02:15.690
e copiar isso tudo aqui.

02:15.690 --> 02:18.950
E agora, em vez desta função construtora aqui, eu tenho

02:18.950 --> 02:20.853
que chamar super para chamar esta

02:20.853 --> 02:24.530
função construtora original de dentro dela, porque se você adicionar

02:24.530 --> 02:25.430
uma função construtora

02:25.430 --> 02:27.410
em uma classe que estende outra classe,

02:27.410 --> 02:29.920
que é, no final, o que estamos fazendo aqui,

02:29.920 --> 02:33.630
então você tem que chamar super.

02:33.630 --> 02:36.108
E agora aqui você pode escrever a lógica que quiser.

02:36.108 --> 02:40.040
E, por exemplo, aqui, poderíamos mover este modelo de renderização

02:40.040 --> 02:42.782
lógica aqui, fora de nossa função de decorador

02:42.782 --> 02:49.020
para esta nova função de construtor que estamos retornando aqui.

02:49.020 --> 02:50.960
Portanto, mais uma vez, tenha realmente em

02:50.960 --> 02:52.550
mente que estamos criando uma classe

02:52.550 --> 02:53.383
aqui que no final apenas

02:53.383 --> 02:54.540
cria uma função construtora

02:54.540 --> 02:55.833
com esta lógica.

02:56.670 --> 02:58.850
Portanto, agora o que estou tentando

02:58.850 --> 03:01.367
fazer é tentar substituir a classe.

03:01.367 --> 03:04.298
A função construtora à qual adicionamos nosso

03:04.298 --> 03:07.550
decorador com uma nova classe, com uma nova função construtora,

03:07.550 --> 03:10.290
onde ainda executo a lógica antiga, mas onde

03:10.290 --> 03:12.920
também adiciono minha própria lógica nova,

03:12.920 --> 03:14.670
e portanto, agora o modelo só

03:14.670 --> 03:17.450
deve realmente ser renderizado ao DOM se eu realmente

03:17.450 --> 03:21.340
instanciar meu objeto aqui.

03:21.340 --> 03:22.890
E não o tempo todo, quando

03:22.890 --> 03:25.180
esta função de decorador é executada,

03:25.180 --> 03:26.340
o que, como você aprendeu,

03:26.340 --> 03:29.620
acontece assim que definimos a classe.

03:29.620 --> 03:31.010
Agora um pequeno ajuste aqui,

03:31.010 --> 03:34.290
eu não chamo mais meu construtor original aqui, em vez disso, podemos

03:34.290 --> 03:37.380
simplesmente acessar isto. nome para obter o valor

03:37.380 --> 03:40.180
de propriedade do nome da instância

03:40.180 --> 03:42.750
que estamos criando.

03:42.750 --> 03:45.120
Agora recebemos uma pequena reclamação lá embaixo

03:45.120 --> 03:47.750
com relação aos tipos que não estão corretos.

03:47.750 --> 03:51.330
Para corrigir isso, porém, podemos transformar nossa função

03:51.330 --> 03:53.990
de decorador em uma função genérica onde obtemos

03:53.990 --> 03:57.113
um tipo, e defini-lo como o tipo de construtor original,

03:58.090 --> 03:59.820
e agora deixar claro que esta

03:59.820 --> 04:01.668
será de fato uma função de construtor,

04:01.668 --> 04:05.780
e podemos deixar isso claro atribuindo um tipo especial, um tipo de

04:05.780 --> 04:09.260
objeto, onde definimos uma nova propriedade, este é um

04:09.260 --> 04:11.610
nome de reserva, é claro, mas diz ao TypeScript

04:11.610 --> 04:17.760
que no final este será um objeto que pode ser novidade.

04:17.760 --> 04:19.690
Portanto, essa será uma função construtora,

04:19.690 --> 04:22.170
uma função que podemos chamar com a nova palavra-chave

04:22.170 --> 04:24.380
para gerar um novo objeto.

04:24.380 --> 04:27.410
E esta nova função, este novo método, no qual o objeto

04:27.410 --> 04:30.660
T se baseia, terá qualquer quantidade de argumentos, então

04:30.660 --> 04:33.520
estou usando parâmetros de descanso aqui para aceitar

04:33.520 --> 04:35.380
quantos argumentos quiser, para

04:35.380 --> 04:37.290
que sejam realmente flexíveis em

04:37.290 --> 04:39.840
relação aos argumentos que podem ser passados

04:39.840 --> 04:42.200
ao construtor da classe que estamos tentando

04:42.200 --> 04:44.000
mudar.

04:45.420 --> 04:46.430
Acrescente a nova

04:46.430 --> 04:49.063
função e, no final, devolva um objeto aqui.

04:50.140 --> 04:53.500
Agora eu também deveria apenas copiar essa definição do parâmetro do resto para

04:53.500 --> 04:55.680
meu construtor aqui, para que este construtor também

04:55.680 --> 04:57.640
seja capaz de aceitar todos os argumentos que

04:57.640 --> 05:00.260
possamos estar recebendo, para que possamos, basicamente,

05:00.260 --> 05:02.380
instanciar a Pessoa com quaisquer argumentos que

05:02.380 --> 05:04.380
você queira passar aqui dentro.

05:04.380 --> 05:06.610
Com quaisquer argumentos que possamos precisar

05:06.610 --> 05:09.279
também aqui, na função de construtor original.

05:09.279 --> 05:11.600
E com isso o único problema que vamos enfrentar

05:11.600 --> 05:14.021
é que não sabemos que tal propriedade de nome existe,

05:14.021 --> 05:16.250
e corretamente, não sabemos a que classe acrescentaremos

05:16.250 --> 05:19.639
este decorador WithTemplate, então não sabemos se haverá uma propriedade

05:19.639 --> 05:23.951
de nome na classe a que a acrescentamos.

05:23.951 --> 05:25.560
Mas, podemos corrigir isso

05:25.560 --> 05:27.140
simplesmente dizendo ao TypeScript

05:27.140 --> 05:30.200
que o objeto T é baseado, de modo que nossa função de

05:30.200 --> 05:32.773
construtor original não produzirá apenas

05:32.773 --> 05:35.530
qualquer objeto, mas na verdade produzirá um

05:35.530 --> 05:37.460
objeto com uma propriedade de nome

05:37.460 --> 05:41.140
que será do tipo string e isso é correto.

05:41.140 --> 05:44.922
Nosso decorador WithTemplate é adicionado a uma classe, que terá um

05:44.922 --> 05:46.250
nome de propriedade.

05:46.250 --> 05:47.300
Se eu comentasse isto,

05:47.300 --> 05:48.133
receberíamos um

05:48.133 --> 05:50.740
erro, porque agora tentaríamos adicionar este

05:50.740 --> 05:53.460
decorador a uma classe que não cumpre este critério,

05:53.460 --> 05:55.543
mas aqui, isto o cumpre.

05:55.543 --> 05:58.790
Agora, recebo aqui um erro quando tento compilar isto, porque

05:58.790 --> 06:00.630
não estou usando args aqui, podemos

06:00.630 --> 06:02.660
mudar isto para um _ para dizer datilografia

06:02.660 --> 06:04.930
que sabemos que não o usamos e que queremos ignorar

06:04.930 --> 06:06.230
isto.

06:06.230 --> 06:08.050
Este é um nome de parâmetro válido,

06:08.050 --> 06:10.678
é apenas um nome especial que digita como um nome

06:10.678 --> 06:13.220
que eu recebo, preciso aceitá-lo, mas não vou

06:13.220 --> 06:15.260
usá-lo como parâmetro.

06:15.260 --> 06:18.273
E com isso, tudo se compila e, se recarregamos,

06:19.440 --> 06:22.420
você vê, ainda vemos Max na página aqui.

06:22.420 --> 06:23.910
O interessante é que, se agora

06:23.910 --> 06:25.480
removermos aquele código

06:25.480 --> 06:27.060
onde instanciamos Pessoa

06:27.060 --> 06:28.440
se eu comentar isso para

06:28.440 --> 06:30.740
que eu apenas encontre uma classe Pessoa,

06:30.740 --> 06:33.550
mas eu nunca o instanto em nenhum lugar, você vê

06:33.550 --> 06:36.890
como ele recarrega, não vemos Max na tela.

06:36.890 --> 06:39.467
Todos os decoradores ainda executam,

06:39.467 --> 06:42.410
mas não entregamos mais nada para a tela.

06:42.410 --> 06:43.243
E a razão disso,

06:43.243 --> 06:46.340
é que agora aprimoramos ainda mais nosso decorador

06:46.340 --> 06:49.520
aqui, aproveitando sua característica onde podemos

06:49.520 --> 06:52.360
devolver um novo valor ou, neste caso, uma

06:52.360 --> 06:55.350
nova função de construtor.

06:55.350 --> 06:57.205
No caso do decorador de classe.

06:57.205 --> 07:00.780
Esta é uma nova função construtora, ou uma nova classe, que,

07:00.780 --> 07:03.040
como expliquei, é apenas açúcar sintático

07:03.040 --> 07:04.300
para a função construtora,

07:04.300 --> 07:06.750
e esta função construtora, portanto, substitui

07:06.750 --> 07:09.070
nossa classe original, nossa função construtora

07:09.070 --> 07:12.160
original.

07:12.160 --> 07:15.220
Agora, como chamei o super aqui dentro,

07:15.220 --> 07:17.610
salvamos a função original.

07:17.610 --> 07:19.690
Nós salvamos a classe original, tudo

07:19.690 --> 07:22.540
que iniciamos aqui basicamente ainda acontece, porque

07:22.540 --> 07:25.530
eu faço isso também no meu construtor substituto, e eu

07:25.530 --> 07:27.480
estendo a classe original.

07:27.480 --> 07:30.420
Portanto, salvamos tudo o que estava na classe original.

07:30.420 --> 07:31.550
Você não precisa fazer isso,

07:31.550 --> 07:32.670
mas eu estou fazendo isso

07:32.670 --> 07:35.560
aqui, porque não quero perder esses dados originais.

07:35.560 --> 07:36.850
Mas, nos bastidores, substituo

07:36.850 --> 07:39.770
a classe por minha nova classe personalizada aqui, e

07:39.770 --> 07:42.370
isso nos permite acrescentar lógica extra, que

07:42.370 --> 07:45.600
deve funcionar quando a classe é instanciada.

07:45.600 --> 07:49.090
E agora, de repente, somos capazes de acrescentar lógica

07:49.090 --> 07:52.410
que não corre quando a classe é definida, mas quando

07:52.410 --> 07:54.660
a classe é instanciada.

07:54.660 --> 07:57.150
E este deve ser, portanto, um grande primeiro

07:57.150 --> 08:01.860
exemplo de todo o poder que você pode desencadear com os decoradores, se você realmente

08:01.860 --> 08:04.480
entender o que pode fazer com eles.

08:04.480 --> 08:06.800
E você não pode simplesmente defini-las como funções,

08:06.800 --> 08:09.970
e não pode simplesmente defini-las com funções de fatores.

08:09.970 --> 08:12.600
Em alguns decoradores, como o decorador de classe,

08:12.600 --> 08:14.400
você também pode devolver algo para

08:14.400 --> 08:17.650
substituir aquilo a que você adicionou o decorador em nosso

08:17.650 --> 08:19.470
caso a classe, por uma nova classe

08:19.470 --> 08:23.000
que pode implementar a classe antiga, mas também adicionar sua

08:23.000 --> 08:25.711
nova lógica personalizada.

08:25.711 --> 08:28.004
E com isso, se comentarmos isso de volta,

08:28.004 --> 08:30.240
novamente rendemos Max à tela com nossa

08:30.240 --> 08:31.570
própria classe que substitui,

08:31.570 --> 08:35.793
ou que se estende e substitui a classe antiga.
