WEBVTT

00:02.160 --> 00:04.930
Eğitmen: İşte temelde gerçek bir projede

00:04.930 --> 00:06.440
aynı örnek.

00:06.440 --> 00:08.550
Bu basit projeyi, dizin HTML dosyasını

00:08.550 --> 00:11.270
ve bu JavaScript dosyasını bir alt dosyada bu videoya

00:11.270 --> 00:13.340
eklenmiş olarak bulacaksınız.

00:13.340 --> 00:16.900
Bunu basitçe açabilir ve ardından dizin HTML dosyasını açabilirsiniz.

00:16.900 --> 00:18.610
Kodu istediğiniz herhangi bir

00:18.610 --> 00:20.890
metin düzenleyicide de açabilirsiniz.

00:20.890 --> 00:22.160
Burada VisualStudioCode kullanıyorum

00:22.160 --> 00:26.250
ve bu modülün ilerleyen bölümlerinde tam kurulumuma geri döneceğim.

00:26.250 --> 00:29.250
Şimdilik, bu iki metin dosyasını herhangi bir metin

00:29.250 --> 00:31.180
düzenleyiciyle açabilirsiniz.

00:31.180 --> 00:34.110
Şimdi burada bulacağınız JavaScript dosyası,

00:34.110 --> 00:37.000
bu dizin HTML dosyasıyla etkileşime giriyor.

00:37.000 --> 00:38.830
Ve sonra bu dizin HTML dosyasında

00:38.830 --> 00:41.050
iki girdi, düğme ve buraya aktarılan herhangi

00:41.050 --> 00:43.698
bir JavaScript dosyası bulacaksınız.

00:43.698 --> 00:45.843
Temel olarak bu unsurlara ulaşıyoruz.

00:45.843 --> 00:47.968
Sonra burada bir fonksiyonumuz ve düğme üzerinde

00:47.968 --> 00:50.020
fonksiyonu tetikleyen ve fonksiyonun sonucunu

00:50.020 --> 00:53.830
konsolda günlüğe kaydeden bir olay dinleyicimiz var.

00:53.830 --> 00:56.750
Şimdi, bu dizin HTML dosyasını Windows

00:56.750 --> 01:00.701
Explorer veya Mac Finder'da üzerine çift tıklayarak

01:00.701 --> 01:03.220
bir tarayıcıda açarsak, göreceğiniz

01:03.220 --> 01:05.150
şey şudur.

01:05.150 --> 01:07.250
İki giriş ve ekle düğmesi ve burada

01:07.250 --> 01:11.170
tarayıcı geliştirici araçlarını da açtım.

01:11.170 --> 01:13.760
Örneğin buraya 10 ve 5 girerseniz, sağ tarafta

01:13.760 --> 01:16.640
sonuç olarak 15 görmeyi bekleyebilirsiniz,

01:16.640 --> 01:19.420
ancak bunun yerine 105 görürsünüz.

01:19.420 --> 01:23.460
Bu da bize JavaScript'in bir zayıflığını gösteriyor.

01:23.460 --> 01:25.890
Bu teknik bir hata değildir.

01:25.890 --> 01:28.050
Atılan bir hata değil, uygulamamızdaki

01:28.050 --> 01:31.640
mantıksal bir hatadır.

01:31.640 --> 01:33.986
Peki bu hata nereden kaynaklanıyor?

01:33.986 --> 01:37.490
Burada JavaScript'te, bu iki girdiye ulaşıyorum ve düğmeye

01:37.490 --> 01:39.612
tıklandığında, sonunda iki girdi

01:39.612 --> 01:41.920
öğesinin değerlerini alıyorum ve bunları

01:41.920 --> 01:45.300
eklemek için buraya aktarıyorum.

01:45.300 --> 01:46.970
Ve burada, JavaScript'te bir

01:46.970 --> 01:50.100
girdi öğesinin değerine eriştiğinizde, bunun her

01:50.100 --> 01:53.130
zaman bir dize olduğunu bilmek önemlidir.

01:53.130 --> 01:55.790
Her zaman, bu hangi tür girdi olursa olsun.

01:55.790 --> 01:59.633
Bu sayı türünde olsun ya da olmasın, her zaman bir dizedir.

02:00.645 --> 02:03.995
Bu fonksiyonun sonuna iki karakter dizisi ekliyorum ve JavaScript'te

02:03.995 --> 02:05.890
iki karakter dizisi eklerseniz, matematiksel

02:05.890 --> 02:09.570
olarak toplanmak yerine birleştirilirler.

02:09.570 --> 02:14.210
Bu yüzden 105, 10 ve 5'in birleştirildiğini görüyoruz.

02:14.210 --> 02:17.090
Burada JavaScript ile ilgili sorun budur.

02:17.090 --> 02:19.980
İşte bu noktada TypeScript bize yardımcı olabilir.

02:19.980 --> 02:22.360
Şimdi TypeScript olmadan, elbette buraya

02:22.360 --> 02:24.380
bir if kontrolü ekleyebilir ve num one'ın

02:24.380 --> 02:28.048
türünün number'a eşit olup olmadığını kontrol edebiliriz.

02:28.048 --> 02:33.048
Ve num two'nun türü sayıya eşitse ve durum buysa, hesaplamamı

02:34.030 --> 02:37.390
bu şekilde döndürürüm, aksi takdirde bir

02:37.390 --> 02:40.588
hata atabilirim veya en azından burada

02:40.588 --> 02:43.304
her parametrenin önüne bir artı ekleyerek

02:43.304 --> 02:47.428
her ikisini de sayıya dönüştürürüm.

02:47.428 --> 02:50.510
Şimdi yazabileceğimiz bazı kodlar var.

02:50.510 --> 02:53.023
JavaScript'te bundan biraz daha rafine olabilir.

02:53.023 --> 02:57.130
Ve bununla birlikte, henüz sayı değillerse sayıları veya girdileri

02:57.130 --> 03:00.670
sayılara dönüştürdüğümüzden emin oluruz.

03:00.670 --> 03:02.430
Bununla birlikte, bunu yeniden

03:02.430 --> 03:05.220
yükler ve tekrarlarsam, değişen kodumuz nedeniyle

03:05.220 --> 03:07.590
şimdi 15 elde ederiz.

03:07.590 --> 03:09.350
Elbette bunu JavaScript'te de yapabiliriz.

03:09.350 --> 03:10.970
Ve bu vanilya JavaScript,

03:10.970 --> 03:13.440
TypeScript ile ilgili hiçbir şey yok.

03:13.440 --> 03:16.640
Ancak aslında en başta önlemek istediğim bir

03:16.640 --> 03:19.048
hata için fazladan kod yazdık.

03:19.048 --> 03:22.210
Bunun olmasını istemiyorum.

03:22.210 --> 03:26.260
Burada karakter dizilerini bile add'e aktaramayacağımızdan emin olmak istiyorum

03:26.260 --> 03:28.930
çünkü add yalnızca sayılar üzerinde çalışan bir fonksiyon

03:29.890 --> 03:31.020
olmalıdır.

03:31.020 --> 03:32.570
Böylece orada bir sayı alıp almadığımızı

03:33.428 --> 03:35.650
kontrol etmemize gerek kalmaz.

03:35.650 --> 03:37.000
Bu yüzden bu işlevi daha önce olduğu

03:37.000 --> 03:38.500
durumda tutmak istiyorum.

03:38.500 --> 03:41.630
Bu fonksiyonu burada istiyorum, tıpkı bunun gibi.

03:41.630 --> 03:44.003
İşte bu noktada TypeScript bize yardımcı olabilir.

03:45.088 --> 03:45.921
Yani TypeScript az

03:45.921 --> 03:48.900
önce gösterdiğim gibi bu gibi durumlarda bize yardımcı olabilir.

03:48.900 --> 03:52.690
Şimdi bize nasıl yardımcı olduğunu görmek için yükleyelim.

03:52.690 --> 03:56.590
Yani typescriptlang'de. org adresinden indir seçeneğine tıklayabilirsiniz.

03:56.590 --> 03:58.540
Ve orada nasıl kurulacağını öğreneceksiniz.

03:58.540 --> 04:00.250
Ve aslında NPM aracını kullanan

04:01.136 --> 04:02.880
bu komutla yükleyeceğiz

04:02.880 --> 04:06.750
ve NPM aracı Node JS paketinin bir parçasıdır.

04:06.750 --> 04:10.210
Yani burada Node JS kodu yazmayacak olsak da, Node

04:10.210 --> 04:12.910
JS'i yüklememiz gerekiyor çünkü perde

04:12.910 --> 04:14.760
arkasında kullandığımız bazı

04:14.760 --> 04:17.770
araçlar tarafından da kullanılacak.

04:17.770 --> 04:21.780
Node JS'yi yüklediğimizde, TypeScript'i makinemize genel

04:21.780 --> 04:24.956
olarak yüklemek için kullanabileceğimiz bir

04:24.956 --> 04:29.200
araç olan Node Paket Yöneticisi NPM'yi de yükleriz.

04:29.200 --> 04:31.452
Bu yüzden sadece nodejs'i ziyaret edin. org'a gidin ve burada

04:31.452 --> 04:34.220
bulduğunuz en son sürümü yükleyin.

04:34.220 --> 04:35.723
Bu düğmeye tıklamanız yeterlidir.

04:36.586 --> 04:38.276
Daha sonra indirilecek ve kurulacaktır ya da bu yükleyici

04:38.276 --> 04:39.420
üzerinden yürüyebilirsiniz.

04:39.420 --> 04:42.360
Tüm işletim sistemleri için desteklenmektedir.

04:42.360 --> 04:45.300
Node JS'yi yükledikten sonra bu komutu

04:45.300 --> 04:47.936
çalıştırabileceksiniz.

04:47.936 --> 04:51.440
Basitçe normal terminalinizi veya komut isteminizi

04:51.440 --> 04:54.800
açın ve ardından bu komutu kopyalayın.

04:54.800 --> 04:57.223
Önemli, Mac ve Linux'ta doğru izinleri almak için

04:57.223 --> 04:59.412
bunun önüne sudo eklemeniz gerekebilir.

04:59.412 --> 05:02.810
Windows'ta bu gerekli olmayacaktır.

05:02.810 --> 05:05.100
Bu yüzden TypeScript'i bu komutla yüklediğinizden

05:05.100 --> 05:06.810
emin olun.

05:06.810 --> 05:09.372
Sizden istenmesi durumunda şifrenizi girin.

05:09.372 --> 05:12.176
Ve bununla birlikte, TypeScript'i makinenize

05:12.176 --> 05:15.430
global olarak yüklediniz, şimdi bu ne anlama geliyor?

05:15.430 --> 05:17.696
TypeScript yüklü.

05:17.696 --> 05:20.810
TypeScript'in bir programlama dili olduğunu unutmayın,

05:20.810 --> 05:22.750
ancak sadece JavaScript'e derleyen

05:22.750 --> 05:25.212
bu derleyiciye, bu araca sahip olduğumuz

05:25.212 --> 05:28.137
için çalışan bir programlama dilidir.

05:28.137 --> 05:31.310
Sonuç olarak, burada kurduğumuz şey, derleyici

05:31.310 --> 05:33.296
ve TypeScript kodunu anlayıp

05:33.296 --> 05:36.116
JavaScript'e dönüştürmek için bilmesi

05:36.116 --> 05:39.020
gereken her şeydir.

05:39.020 --> 05:41.036
Böylece, derleyiciyi yükledik

05:41.036 --> 05:44.460
ve şimdi bir TypeScript dosyasını JavaScript'e

05:44.460 --> 05:47.210
derlemek için bu TypeScript derleyicisini

05:47.210 --> 05:50.870
çağıran TSC komutunu çalıştırabiliriz.

05:50.870 --> 05:54.140
Üzerinde çalıştığımız bu projede bunu görmek için ts kullanarak yeni

05:54.140 --> 05:56.563
bir dosya ekleyelim. örneğin.

05:56.563 --> 05:58.677
İstediğiniz herhangi bir isim, ancak uzantısı . TypeScript

05:58.677 --> 06:03.677
anlamına gelen ts.

06:05.100 --> 06:07.651
Şimdi bu JavaScript kodunu TypeScript

06:07.651 --> 06:09.850
dosyasına kopyalayalım.

06:09.850 --> 06:13.100
Burada VisualStudioCode'da, hemen şimdi düzelteceğimiz bazı

06:13.100 --> 06:14.280
hatalar alıyorum.

06:14.280 --> 06:16.379
Bu da TypeScript'in en büyük avantajlarından biridir.

06:16.379 --> 06:18.915
Eğer doğru IDE'yi kullanıyorsanız, ki benim

06:18.915 --> 06:22.710
tavsiyem gerçekten VisualStudioCode'dur, bu konuya daha sonra

06:22.710 --> 06:24.420
tekrar döneceğim.

06:24.420 --> 06:27.810
O zaman TypeScript dosyalarının içinde çalışırken IDE'de

06:27.810 --> 06:30.230
zaten harika bir destek alırsınız.

06:30.230 --> 06:34.710
Burada zaten temel olarak TypeScript'in kodumu analiz etmesini ve bazı zayıflıkları

06:34.710 --> 06:36.910
belirlemesini sağlıyor.

06:36.910 --> 06:39.720
Bu harika, çünkü ben de tam olarak bunu istiyorum.

06:39.720 --> 06:42.110
Bu örnekte, JavaScript'i yalnızca

06:42.110 --> 06:44.003
JS dosyasını sileyim.

06:45.952 --> 06:48.360
Ve bununla birlikte, bazı hatalar ortadan kalktı

06:48.360 --> 06:50.539
çünkü bazı sabitlerin ve benzerlerinin birden

06:50.539 --> 06:53.230
fazla dosyada kullanıldığını tespit etti.

06:53.230 --> 06:55.787
Ama yine de aşağıda bir hata veriyor.

06:55.787 --> 06:57.700
Ve örneğin gördüğünüz şey, gerçekten bir değer

06:57.700 --> 07:00.108
özelliği olup olmadığından emin olmamasıdır.

07:00.108 --> 07:03.200
Bu JavaScript'te daha önce hiç düşünmediğim

07:03.200 --> 07:05.720
bir hata ama doğru.

07:05.720 --> 07:08.350
Burada bir öğeyi ID'ye göre seçiyorum.

07:08.350 --> 07:11.680
Şimdi TypeScript bunun gerçekten işe yarayıp yaramayacağını bilemez.

07:11.680 --> 07:13.160
Belki burada bir yazım hatası vardır.

07:13.160 --> 07:15.940
Bu durumda, bir öğe seçemem.

07:15.940 --> 07:17.704
Bu öğe sayfada mevcut olmayacaktır.

07:17.704 --> 07:20.164
Yani bir yazım hatası olabilir ve TypeScript bunun çalışıp çalışmadığını

07:20.164 --> 07:22.472
öğrenmek için HTML kodunuzu analiz etmez.

07:22.472 --> 07:24.468
Yani birincisi, bu başarısız olabilir.

07:24.468 --> 07:28.740
Ancak başarılı olsa ve orada bir öğe seçsek bile, bunun bir giriş

07:28.740 --> 07:30.910
öğesi olması gerekmez.

07:30.910 --> 07:34.720
Başka herhangi bir öğe olabilir ve çoğu HTML öğesinin erişebileceğiniz

07:34.720 --> 07:37.450
bir değer özelliği yoktur.

07:37.450 --> 07:38.630
Ve bu zaten harika.

07:38.630 --> 07:41.372
TypeScript bizi daha açık olmaya, niyetlerimiz

07:41.372 --> 07:44.060
hakkında daha net olmaya ve kodumuzu iki kez

07:44.060 --> 07:46.130
kontrol etmeye zorlar.

07:46.130 --> 07:48.100
Örneğin burada, tüm bu sözdizimini

07:48.100 --> 07:49.820
anlamanıza gerek yok.

07:49.820 --> 07:52.172
Kurs boyunca bunu adım adım öğreneceğiz.

07:52.172 --> 07:55.660
Ancak örneğin burada, bir ünlem işareti ekleyerek TypeScript'e

07:55.660 --> 08:00.080
bir öğe alacağımızdan emin olduğumuzu bildirebiliriz.

08:00.080 --> 08:04.170
Bu temel olarak TypeScript'e bunun asla null sonuç vermeyeceğini söyler.

08:04.170 --> 08:06.370
Bu her zaman bir eleman bulacaktır.

08:06.370 --> 08:08.420
Ve bir geliştirici olarak, elbette bunun

08:08.420 --> 08:10.350
her zaman bir öğe bulacağını biliyorum

08:10.350 --> 08:11.920
çünkü kimliği iki kez kontrol

08:11.920 --> 08:14.763
ettim ve evet, burada o kimliğe sahibim.

08:15.610 --> 08:17.270
Şimdi ek olarak, bunun her zaman

08:17.270 --> 08:19.500
bir giriş öğesi olacağını da biliyorum.

08:19.500 --> 08:22.408
Bu nedenle, TypeScript'in bunun hangi tür öğe olacağını bilmesini

08:22.408 --> 08:25.470
sağlamak için daha sonra daha ayrıntılı olarak açıklayacağım

08:25.470 --> 08:27.746
typecasting adı verilen bir sözdizimini HTML

08:27.746 --> 08:30.327
giriş öğesi olarak kullanabiliriz.

08:30.327 --> 08:32.926
Bunu ikinci unsura da uygulayabiliriz.

08:32.926 --> 08:35.650
Burada gerçekten açık olmak gerekirse, bu

08:35.650 --> 08:37.510
TypeScript sözdizimidir.

08:37.510 --> 08:39.520
Bu ünlem işaretini burada kullanabilirim

08:39.520 --> 08:41.600
ve bu tiplemeyi burada kullanabilirim

08:41.600 --> 08:44.786
çünkü bir . ts dosyasında değil, bir TypeScript dosyasındayız.

08:44.786 --> 08:48.380
Bunu JavaScript'e derleyeceğiz.

08:48.380 --> 08:51.050
Bu vanilya JavaScript'te çalışmaz.

08:51.050 --> 08:53.427
Bu orada mevcut değildir.

08:53.427 --> 08:56.300
Bununla birlikte, niyetlerimiz konusunda daha net olmaya ve

08:56.300 --> 08:58.460
kodumuz hakkında gerçekten düşünmeye ve iki kez

08:58.460 --> 09:01.060
kontrol etmeye zorlanıyoruz ki bu harika bir şey.

09:01.060 --> 09:03.160
Ama en büyük avantajı bu bile değil.

09:04.270 --> 09:06.820
En büyük avantajı türlerin eklenmesidir.

09:06.820 --> 09:09.630
Sonuçta TypeScript'e adını veren de budur.

09:09.630 --> 09:12.282
Ve burada bu işlevin üzerinde çalıştığı veri türleri

09:12.282 --> 09:14.204
hakkında hiçbir şey söylemiyorum.

09:14.204 --> 09:17.886
Bu parametrelerden birinin üzerine gelirsek, burada

09:17.886 --> 09:20.126
herhangi bir şey görürüz.

09:20.126 --> 09:22.828
Ve sonuçta, TypeScript bize şunu söylüyor:

09:22.828 --> 09:24.880
"Orada ne olduğunu bilmiyorum. Herhangi bir değer türü olabilir.

09:24.880 --> 09:27.162
Artık TypeScript dosyalarına daha açık bir tür ekleyebiliriz.

09:27.162 --> 09:31.960
Yani JavaScript dosyalarında değil, TypeScript dosyalarında, buraya iki nokta üst üste ekleyerek

09:31.960 --> 09:33.806
ve ardından türü belirterek.

09:33.806 --> 09:38.580
Örneğin, numara.

09:38.580 --> 09:40.730
Bunu burada yapıyorum ve bunu burada yapıyorum.

09:40.730 --> 09:43.300
TypeScript'in ve bu derleyicinin anladığı

09:43.300 --> 09:45.246
bu ekstra sözdizimiyle, TypeScript'e

09:45.246 --> 09:47.928
bunun sayı türünde olacağını ve bunun da sayı

09:47.928 --> 09:50.960
türünde olacağını söylüyoruz.

09:50.960 --> 09:54.010
Ve bu nedenle şimdi burada yine bir hata alıyoruz.

09:54.010 --> 09:56.126
Bu arada, bu hatayı sadece

09:56.126 --> 09:58.060
IDE'de almıyoruz.

09:58.060 --> 09:59.370
Bu kodu derlemeye çalıştığımızda

09:59.370 --> 10:01.940
da alıyoruz çünkü sonuçta yapmamız gereken

10:01.940 --> 10:03.820
şey bu, değil mi?

10:03.820 --> 10:05.326
Şimdi bunu derlemek için bir terminal açacağım.

10:05.326 --> 10:08.670
Ve burada sadece terminalimi veya bu IDE'ye entegre edilmiş

10:08.670 --> 10:10.760
komut istemini açıyorum.

10:10.760 --> 10:13.683
Bu normal sistem komut istemi.

10:14.947 --> 10:16.530
Normal sistem komut terminalini

10:16.530 --> 10:18.110
burada da kullanıyordum, sadece

10:18.110 --> 10:19.533
bu klasöre girmiştim.

10:20.510 --> 10:22.446
Dolayısıyla, yerleşik bir IDE

10:22.446 --> 10:27.420
terminali kullanmıyorsanız, normal terminalinizi kullanabilirsiniz,

10:27.420 --> 10:30.265
ancak CD TypeScript dosyanızı eklediğiniz

10:30.265 --> 10:33.960
ayıklanmış başlangıç klasörüne gider.

10:33.960 --> 10:36.300
Ve bu klasöre girdikten sonra TSC'yi çalıştırabilirsiniz.

10:36.300 --> 10:38.888
Bu, daha önce dash ts kullanarak yüklediğimiz

10:38.888 --> 10:42.980
TypeScript derleyicisini çağıracaktır. ts.

10:42.980 --> 10:47.980
Ve bunu çalıştırırsanız, aslında bir hata alırsınız.

10:47.990 --> 10:50.728
Yine de bir JavaScript dosyası alacaksınız, çünkü

10:50.728 --> 10:53.267
varsayılan olarak TypeScript bunu JavaScript'e

10:53.267 --> 10:57.460
derlemeye devam edecektir, ayrıca bu kursun ilerleyen bölümlerinde bunu nasıl

10:57.460 --> 11:00.050
engelleyeceğinizi de öğreneceksiniz.

11:00.050 --> 11:02.900
Ancak bunu yaparken derleyici hatası verir.

11:02.900 --> 11:05.904
Size string türündeki argümanın number türündeki

11:05.904 --> 11:09.070
parametreye atanamayacağını söyler.

11:09.070 --> 11:13.128
Buradaki sorun, TypeScript'in girdi öğemizin value

11:13.128 --> 11:16.550
özelliğinde elde ettiğimiz şeyin bir dize

11:16.550 --> 11:18.930
olacağını anlamasıdır.

11:18.930 --> 11:23.130
Bunu burada IDE'de de görüyoruz.

11:23.130 --> 11:24.786
Ve bunu add'e aktaramayız çünkü

11:24.786 --> 11:28.130
orada bir dize istemiyoruz, bir sayı istiyoruz.

11:28.130 --> 11:31.026
Bu nedenle, örneğin bunu bir artı ekleyerek burada bir sayıya

11:31.026 --> 11:33.600
dönüştürerek bunu düzeltmemiz gerekir.

11:33.600 --> 11:36.790
Ve bunu yapar yapmaz, bu komutu tekrarlayarak

11:36.790 --> 11:39.708
bu kodu tekrar derleyebiliriz ve şimdi

11:39.708 --> 11:42.406
hatasız derlenir.

11:42.406 --> 11:45.225
Bunu bize TypeScript kullanarak veriyor. JavaScript dosyası ve şimdi yine bazı hatalar

11:45.225 --> 11:49.030
gösteriyor çünkü burada iki

11:49.030 --> 11:50.690
dosyayı aynı anda asla kullanmayacağını

11:50.690 --> 11:53.090
anlamıyor.

11:54.028 --> 11:55.373
Tekrar ediyorum, bu kursun ilerleyen aşamalarında

11:56.466 --> 11:58.530
bunu yapılandırdığımızda daha iyi olacak bir şey.

11:58.530 --> 12:00.428
Bunu şimdilik görmezden gelebiliriz.

12:00.428 --> 12:01.261
Bu yüzden bana bu dosyayı veriyor.

12:02.588 --> 12:04.348
Ve bunu açarsak, burada ilginç bir şey görürüz.

12:04.348 --> 12:06.210
Orada tabii ki bizim tiplerimizin gittiğini görüyoruz.

12:06.210 --> 12:08.690
Bu oyuncu kadrosu gitmiş.

12:08.690 --> 12:11.280
Yine vanilya JavaScript'imiz var.

12:11.280 --> 12:13.308
Burada TypeScript dosyamıza bir göz atarsak,

12:13.308 --> 12:16.250
tüm bu güzel eklemelere sahip olduğumuzu görürüz.

12:16.250 --> 12:18.786
Ancak belirttiğim gibi, bunlar sadece TypeScript özellikleridir.

12:18.786 --> 12:22.130
JavaScript'e derlediğinizde, kodunuzu değerlendirmek ve

12:22.130 --> 12:24.600
olası hataları bulmak için kullanılırlar,

12:24.600 --> 12:26.770
ancak daha sonra çıkarılırlar ve çıktı

12:26.770 --> 12:29.090
olarak normal JavaScript elde ederiz.

12:29.090 --> 12:33.960
Şimdi dizin HTML dosyamıza gidebilir ve ts kullanarak

12:33.960 --> 12:37.010
içe aktarabiliriz. js ve bu önemli.

12:37.010 --> 12:41.230
Tarayıcı TypeScript'i çalıştıramadığı için

12:41.230 --> 12:43.550
JavaScript dosyalarını her zaman içe aktarın.

12:43.550 --> 12:45.990
Derlememizin sonucunu içe aktarmamız gerekiyor.

12:45.990 --> 12:49.480
Ve şimdi bunu yeniden yüklersek, çalışan kodumuzu

12:49.480 --> 12:52.108
elde ederiz çünkü artık, girdilerimizi

12:52.108 --> 12:55.750
fonksiyona aktarmadan önce döküm yaparak bu sorunu

12:55.750 --> 12:57.970
çözdüğümüz uygun JavaScript kodumuz

12:59.410 --> 13:01.110
var.

13:01.110 --> 13:03.010
Ancak buradaki tür ek açıklamalarımız

13:03.986 --> 13:06.087
sayesinde bu sorunları çözebildik.

13:06.087 --> 13:08.100
Ve gördüğünüz gibi, kodun diğer bazı kısımlarını

13:08.100 --> 13:10.720
da daha temiz bir şekilde yazmamız gerekiyordu.

13:10.720 --> 13:13.220
İşte bu yüzden TypeScript muhteşemdir.

13:13.220 --> 13:15.400
Bizi daha iyi, daha temiz ve daha az

13:15.400 --> 13:17.880
hataya eğilimli kod yazmaya zorlar.
