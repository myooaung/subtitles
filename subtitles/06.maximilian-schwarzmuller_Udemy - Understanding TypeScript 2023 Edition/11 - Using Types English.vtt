WEBVTT

1
00:00:02.060 --> 00:00:06.410
<v Instructor>Typescript provides many types to JavaScript.</v>

2
00:00:06.410 --> 00:00:10.100
Now, JavaScript itself, also knows some data types,

3
00:00:10.100 --> 00:00:12.230
and I'll come back to that in this module, as well,

4
00:00:12.230 --> 00:00:14.950
but Typescript adds many more types,

5
00:00:14.950 --> 00:00:17.380
and as you will also learn in this course,

6
00:00:17.380 --> 00:00:21.110
Typescript also enables you to write your own types.

7
00:00:21.110 --> 00:00:24.320
Now, let's start with some of the Core Types,

8
00:00:24.320 --> 00:00:26.250
which JavaScript already knows

9
00:00:26.250 --> 00:00:28.289
and which Typescript also supports,

10
00:00:28.289 --> 00:00:30.550
and we'll also have a look at what the difference

11
00:00:30.550 --> 00:00:33.380
between JavaScript, knowing the type,

12
00:00:33.380 --> 00:00:36.800
and Typescript, using that type, means.

13
00:00:36.800 --> 00:00:38.287
One of the core types we work with

14
00:00:38.287 --> 00:00:41.740
in JavaScript and Typescript, is the number type.

15
00:00:41.740 --> 00:00:45.220
Now, in JavaScript, and the same is true for Typescript,

16
00:00:45.220 --> 00:00:47.290
there is only one number type.

17
00:00:47.290 --> 00:00:50.750
There is no special type for integers or floats.

18
00:00:50.750 --> 00:00:55.520
Instead, these values here, would all be numbers.

19
00:00:55.520 --> 00:00:58.180
One would be a number without the decimal place.

20
00:00:58.180 --> 00:01:01.640
5.3 is obviously one with a decimal place

21
00:01:01.640 --> 00:01:04.532
and all these values are of type number.

22
00:01:04.532 --> 00:01:08.180
Other programming languages have special integer types

23
00:01:08.180 --> 00:01:10.480
and float or double types.

24
00:01:10.480 --> 00:01:11.980
JavaScript doesn't have that

25
00:01:11.980 --> 00:01:14.120
and Typescript doesn't have it either.

26
00:01:14.120 --> 00:01:16.070
So, we have the number type, which we know

27
00:01:16.070 --> 00:01:19.810
from JavaScript, also as a type, in Typescript.

28
00:01:19.810 --> 00:01:23.950
We also have the string data type, and that would be text,

29
00:01:23.950 --> 00:01:26.370
which you can define in one of these three ways,

30
00:01:26.370 --> 00:01:28.285
with single quotes, with double quotes,

31
00:01:28.285 --> 00:01:30.950
or also with backticks.

32
00:01:30.950 --> 00:01:34.720
The last notation with backticks is a special syntax,

33
00:01:34.720 --> 00:01:38.640
provided in modern JavaScript and also in Typescript,

34
00:01:38.640 --> 00:01:42.440
which allows us to write so-called template literals,

35
00:01:42.440 --> 00:01:44.550
that are normal strings where you can

36
00:01:44.550 --> 00:01:47.520
dynamically inject some data into them.

37
00:01:47.520 --> 00:01:49.240
So, strings are simply text

38
00:01:49.240 --> 00:01:53.000
and JavaScript knows about string value types.

39
00:01:53.000 --> 00:01:55.000
Typescript does so, as well.

40
00:01:55.000 --> 00:01:57.240
Last, but not least, one of the core data types,

41
00:01:57.240 --> 00:01:59.790
JavaScript knows and Typescript also supports,

42
00:01:59.790 --> 00:02:02.250
is the Boolean data type.

43
00:02:02.250 --> 00:02:03.810
That would be true or false,

44
00:02:03.810 --> 00:02:06.610
and that's super important in programming, obviously,

45
00:02:06.610 --> 00:02:08.920
especially when working with IF statements.

46
00:02:08.920 --> 00:02:10.970
Here, we got these two values,

47
00:02:10.970 --> 00:02:13.690
and that's important, because in JavaScript,

48
00:02:13.690 --> 00:02:17.520
you also might know this idea of truthy and falsy values,

49
00:02:17.520 --> 00:02:22.190
for example that zero, the number zero, is a falsy value.

50
00:02:22.190 --> 00:02:25.510
If you use it in an IF condition, it is treated as false.

51
00:02:25.510 --> 00:02:28.560
The Boolean data type, really just knows these two values,

52
00:02:28.560 --> 00:02:31.230
though, true or false, and that's not just the case

53
00:02:31.230 --> 00:02:33.160
for Typescript, but also for JavaScript.

54
00:02:33.160 --> 00:02:35.532
This truthy, falsy concept, which you should know,

55
00:02:35.532 --> 00:02:38.280
that is not related to data types.

56
00:02:38.280 --> 00:02:40.840
That's behind-the-scenes work.

57
00:02:40.840 --> 00:02:43.030
JavaScript does add runtime,

58
00:02:43.030 --> 00:02:46.510
when it sees certain values, and IF conditions.

59
00:02:46.510 --> 00:02:48.530
So, with numbers, strings and Booleans,

60
00:02:48.530 --> 00:02:50.060
we get a couple of core data types.

61
00:02:50.060 --> 00:02:51.450
Of course, not all,

62
00:02:51.450 --> 00:02:53.410
we got objects and so on, as well,

63
00:02:53.410 --> 00:02:54.617
but let's focus on these types

64
00:02:54.617 --> 00:02:57.330
and see what Typescript does with them,

65
00:02:57.330 --> 00:03:00.930
or what we can do with them, with the help of Typescript.

66
00:03:00.930 --> 00:03:02.620
For this, I'm back to the project,

67
00:03:02.620 --> 00:03:05.190
we saw in the first course module,

68
00:03:05.190 --> 00:03:07.600
and there I showed you that all you need to do, now,

69
00:03:07.600 --> 00:03:10.320
is run npm start in a terminal,

70
00:03:10.320 --> 00:03:12.280
navigate it into this project folder,

71
00:03:12.280 --> 00:03:15.130
to spin up this live development server,

72
00:03:15.130 --> 00:03:18.110
which will reload, whenever we change something,

73
00:03:18.110 --> 00:03:22.300
and here, I opened up this localhost:3000 address

74
00:03:22.300 --> 00:03:24.890
in the new tab of my browser.

75
00:03:24.890 --> 00:03:26.070
Right know, I'm getting an error,

76
00:03:26.070 --> 00:03:28.300
because I have no app tray as file, yet.

77
00:03:28.300 --> 00:03:30.380
Of course, you'll find this starting project,

78
00:03:30.380 --> 00:03:32.280
all attached to this lecture,

79
00:03:32.280 --> 00:03:34.400
will get such a app tray as file,

80
00:03:34.400 --> 00:03:37.590
which we're trying to import here, in our index html file,

81
00:03:37.590 --> 00:03:42.050
as soon as we compile app.ts from Typescript to JavaScript

82
00:03:42.050 --> 00:03:45.070
and we can do that in a new tab of the terminal,

83
00:03:45.070 --> 00:03:46.860
so that we keep this process running

84
00:03:46.860 --> 00:03:51.117
and open a new tab instead, by simply running tsc app.ts

85
00:03:53.920 --> 00:03:56.630
and what this does is, it compiles the Typescript file

86
00:03:56.630 --> 00:03:58.680
and spits out a JavaScript file,

87
00:03:58.680 --> 00:04:01.570
and once that happens, we can reload this page

88
00:04:01.570 --> 00:04:05.520
and we get the Time to get started... output here.

89
00:04:05.520 --> 00:04:08.000
So, now we have this setup here,

90
00:04:08.000 --> 00:04:10.620
were we can write some Typescript code

91
00:04:10.620 --> 00:04:14.650
and then compile it to JavaScript code, to see what it does.

92
00:04:14.650 --> 00:04:17.000
Now, with that in the Typescript file,

93
00:04:17.000 --> 00:04:18.870
I'll actually get rid of the content there,

94
00:04:18.870 --> 00:04:21.820
because now, I wanna dive into these core data types,

95
00:04:21.820 --> 00:04:23.720
which I just showed you on the slide,

96
00:04:23.720 --> 00:04:27.230
so that you understand how to work with them in Typescript.

97
00:04:27.230 --> 00:04:29.430
Now, let's start very, very simple.

98
00:04:29.430 --> 00:04:32.240
Let's say, we have a new function, add,

99
00:04:32.240 --> 00:04:34.990
and there we expect two numbers, n1 and add two,

100
00:04:34.990 --> 00:04:38.610
and that return n1 plus n2, just like that,

101
00:04:38.610 --> 00:04:42.370
very simple function, nothing Typescript-ish about it.

102
00:04:42.370 --> 00:04:46.080
Now, we have two numbers with which we wanna work.

103
00:04:46.080 --> 00:04:49.800
That could be number1 here, which is, say, five

104
00:04:49.800 --> 00:04:54.680
and also number2, which is maybe 2.8,

105
00:04:54.680 --> 00:04:57.060
whatever you want, two numbers here.

106
00:04:57.060 --> 00:04:59.820
Now, obviously and not very surprisingly,

107
00:04:59.820 --> 00:05:02.950
we can add, or call the add function

108
00:05:02.950 --> 00:05:05.280
and pass in number1 and number2

109
00:05:05.280 --> 00:05:07.320
as arguments to this function,

110
00:05:07.320 --> 00:05:10.360
store the result in a new constant maybe,

111
00:05:10.360 --> 00:05:12.470
and then to see something on the screen,

112
00:05:12.470 --> 00:05:15.080
we can console.log the result.

113
00:05:15.080 --> 00:05:20.080
If we do that, and I recompile this file with tsc app.ts,

114
00:05:20.270 --> 00:05:22.730
then this page should automatically reload, already.

115
00:05:22.730 --> 00:05:24.350
If not, you can manually reload,

116
00:05:24.350 --> 00:05:27.010
of course, and you should see 7.8.

117
00:05:27.010 --> 00:05:30.250
Now, you might think, that's not too special, right?

118
00:05:30.250 --> 00:05:33.650
This is a pretty straight forward JavaScript snippet

119
00:05:33.650 --> 00:05:37.330
and, indeed, there's nothing Typescript-ish does about it.

120
00:05:37.330 --> 00:05:39.450
Well, let's do something which will brake

121
00:05:39.450 --> 00:05:41.900
that snippet in normal JavaScript.

122
00:05:41.900 --> 00:05:45.100
Let's say, this input here is actually not a number,

123
00:05:45.100 --> 00:05:48.530
but some text, a five in text,

124
00:05:48.530 --> 00:05:49.880
and if we now save that,

125
00:05:49.880 --> 00:05:53.380
and rerun our compilation command here,

126
00:05:53.380 --> 00:05:56.110
you'll see that, once this page reloads here,

127
00:05:56.110 --> 00:05:59.530
I get 52.8 as a output and that's obviously

128
00:05:59.530 --> 00:06:02.200
not the correct result of this addition.

129
00:06:02.200 --> 00:06:04.500
Now, do you know why we're getting this output

130
00:06:04.500 --> 00:06:06.450
in normal JavaScript, which we,

131
00:06:06.450 --> 00:06:08.670
in the end are executing here.

132
00:06:08.670 --> 00:06:10.150
Well, we're getting this output,

133
00:06:10.150 --> 00:06:14.710
because this is not the result of the mathematical addition,

134
00:06:14.710 --> 00:06:17.760
but instead, this concatenates this as a string,

135
00:06:17.760 --> 00:06:21.060
because this input, here, five, is a string

136
00:06:21.060 --> 00:06:23.997
and then JavaScript sees, "Okay, I got a string,

137
00:06:23.997 --> 00:06:27.667
"I'm adding something to this string, while certainly,

138
00:06:27.667 --> 00:06:30.467
"this something should also be converted to a string,

139
00:06:30.467 --> 00:06:32.097
"so that overall, I got a string,

140
00:06:32.097 --> 00:06:34.190
"because the first value was a string,"

141
00:06:34.190 --> 00:06:36.210
and hence, what JavaScript does, is,

142
00:06:36.210 --> 00:06:39.240
it converts 2.8 from a number to a string,

143
00:06:39.240 --> 00:06:42.720
concatenates a longer string from five and 2.8,

144
00:06:42.720 --> 00:06:46.700
hence yielding 52.8, as a string and returns that.

145
00:06:46.700 --> 00:06:49.490
So, it's not treating this in a mathematical way,

146
00:06:49.490 --> 00:06:50.850
but instead, as a string,

147
00:06:50.850 --> 00:06:52.900
and with JavaScript, this can happen.

148
00:06:52.900 --> 00:06:54.037
Now, of course, you might think,

149
00:06:54.037 --> 00:06:55.427
"Why would I write such code?

150
00:06:55.427 --> 00:06:58.160
"I'm the developer, why would I make this mistake?"

151
00:06:58.160 --> 00:07:01.230
Well, maybe you're not the one, making this mistake.

152
00:07:01.230 --> 00:07:04.180
Maybe, this is getting fetched from some user input

153
00:07:04.180 --> 00:07:06.690
and you introduced a little bug in your code,

154
00:07:06.690 --> 00:07:09.350
where you forgot to transform this,

155
00:07:09.350 --> 00:07:12.460
or you're working in a team and you're having

156
00:07:12.460 --> 00:07:14.740
a couple of script files, working together,

157
00:07:14.740 --> 00:07:17.270
and some other developer introduced such an error.

158
00:07:17.270 --> 00:07:20.110
It's not impossible to make such errors,

159
00:07:20.110 --> 00:07:22.340
but it can be hard to track them down.

160
00:07:22.340 --> 00:07:24.010
Here, of course, it's pretty obvious

161
00:07:24.010 --> 00:07:26.400
that something went wrong, because we have a basic script,

162
00:07:26.400 --> 00:07:28.320
but in a bigger script, you might not even

163
00:07:28.320 --> 00:07:31.520
immediately recognize that something went wrong here,

164
00:07:31.520 --> 00:07:33.720
and that's were Typescript can help us.

165
00:07:33.720 --> 00:07:36.390
We can add type assignments

166
00:07:36.390 --> 00:07:38.820
in this function, to our parameters.

167
00:07:38.820 --> 00:07:42.280
We can tell Typescript that these two parameters

168
00:07:42.280 --> 00:07:45.340
should be of type number and not be of type,

169
00:07:45.340 --> 00:07:47.535
I don't care which is the default.

170
00:07:47.535 --> 00:07:50.300
So, we do that, by adding a colon here,

171
00:07:50.300 --> 00:07:52.890
after the value to which we wanna assign a type,

172
00:07:52.890 --> 00:07:55.220
so, in this case, after the parameter name

173
00:07:55.220 --> 00:07:57.140
and then the name of the type.

174
00:07:57.140 --> 00:08:00.560
For example, number would be one of the supported names.

175
00:08:00.560 --> 00:08:03.480
Besides number, you also got string,

176
00:08:03.480 --> 00:08:05.990
or Boolean, but we'll come back to those.

177
00:08:05.990 --> 00:08:07.750
For the moment, we need number

178
00:08:07.750 --> 00:08:10.530
and we don't just need it on the first parameter here,

179
00:08:10.530 --> 00:08:12.010
but also on the second one.

180
00:08:12.010 --> 00:08:16.150
So, here also, we can add a colon, and then number,

181
00:08:16.150 --> 00:08:18.367
and now, what we're saying to Typescript, is,

182
00:08:18.367 --> 00:08:22.147
"Hey, both parameters here, should be of type number,

183
00:08:22.147 --> 00:08:25.530
"passing in values of a different type is not allowed,"

184
00:08:25.530 --> 00:08:28.360
and indeed, my IDE already complains here,

185
00:08:28.360 --> 00:08:32.510
because Visual Studio Code has built-in Typescript support,

186
00:08:32.510 --> 00:08:34.260
but even if we would overlook this,

187
00:08:34.260 --> 00:08:39.193
as soon as I recompile this, by rerunning tsc app.ts,

188
00:08:40.040 --> 00:08:41.670
you'll see, we get an error.

189
00:08:41.670 --> 00:08:42.697
We get an error, that,

190
00:08:42.697 --> 00:08:46.250
"Argument of type '"5" is not assignable

191
00:08:46.250 --> 00:08:48.660
to parameter of type 'number',

192
00:08:48.660 --> 00:08:51.140
and it even shows us where this happened

193
00:08:51.140 --> 00:08:54.430
and gives us a line number, line eight,

194
00:08:54.430 --> 00:08:56.740
and it's basically showing us the same, the IDE shows here.

195
00:08:56.740 --> 00:08:58.707
So, in case we overlooked it in the IDE,

196
00:08:58.707 --> 00:09:01.340
compiling it, now throws an error,

197
00:09:01.340 --> 00:09:03.284
and that's the important thing about Typescript.

198
00:09:03.284 --> 00:09:06.220
It only helps us during compilation.

199
00:09:06.220 --> 00:09:10.110
It doesn't change JavaScript to work differently at runtime,

200
00:09:10.110 --> 00:09:13.510
because browsers have no built-in Typescript support.

201
00:09:13.510 --> 00:09:15.700
It can only help us during development,

202
00:09:15.700 --> 00:09:19.310
before we compile our Typescript code to JavaScript,

203
00:09:19.310 --> 00:09:21.520
but there, it's extremely useful,

204
00:09:21.520 --> 00:09:25.560
because it adds an extra step, an extra sanity check,

205
00:09:25.560 --> 00:09:28.407
where here, we find out, "Oh, we made a mistake.

206
00:09:28.407 --> 00:09:31.660
"Here, this shouldn't be a string, this should be a number",

207
00:09:31.660 --> 00:09:34.210
and we can fix this and we're good.

208
00:09:34.210 --> 00:09:35.670
This is what Typescript does.

209
00:09:35.670 --> 00:09:37.390
It helps you during development.

210
00:09:37.390 --> 00:09:40.130
It does not change your runtime code.

211
00:09:40.130 --> 00:09:42.800
Indeed, here, even with the default settings,

212
00:09:42.800 --> 00:09:44.700
it compiled our error here,

213
00:09:44.700 --> 00:09:47.220
even though it detected it during compilation,

214
00:09:47.220 --> 00:09:50.690
and created a file which causes the incorrect result,

215
00:09:50.690 --> 00:09:53.560
because by default, Typescript does not step in, here.

216
00:09:53.560 --> 00:09:56.300
Later you'll learn, how you can make sure that it does,

217
00:09:56.300 --> 00:09:59.260
but by default, it doesn't even block compilation.

218
00:09:59.260 --> 00:10:03.570
Still, it yells at you and points at this mistake,

219
00:10:03.570 --> 00:10:04.850
so that you can fix it,

220
00:10:04.850 --> 00:10:07.450
and so that you can avoid such mistakes here.

221
00:10:07.450 --> 00:10:09.020
By the way, make sure you don't have

222
00:10:09.020 --> 00:10:11.950
app.js and app.ts open at the same time.

223
00:10:11.950 --> 00:10:13.470
You could get errors here in the IDE,

224
00:10:13.470 --> 00:10:15.830
regarding duplicate function implementations.

225
00:10:15.830 --> 00:10:18.003
Closing the JavaScript file fixes this.

