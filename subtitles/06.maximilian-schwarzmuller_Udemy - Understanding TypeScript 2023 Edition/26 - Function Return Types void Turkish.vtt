WEBVTT

00:02.200 --> 00:04.080
Eğitmen: Yeni bir dosyanın daha zamanı geldi.

00:04.080 --> 00:09.080
Uygulamayı yeniden adlandıracağım. takma adları birleştirmek için buraya tıklayın. 'yi seçin ve yeni bir uygulama

00:11.100 --> 00:13.760
ekleyin. ts dosyasında tekrar sıfırdan

00:13.760 --> 00:16.370
başlayabilir, diğer dosyayı kapatabiliriz.

00:16.370 --> 00:20.660
Ve şimdi burada fonksiyonlara biraz daha derinlemesine dalmak istiyorum.

00:20.660 --> 00:22.640
Şimdi, elbette, zaten fonksiyonlarla çalıştık.

00:22.640 --> 00:24.940
Örneğin, burada combine işleviyle birlikte

00:24.940 --> 00:26.340
union aliases dosyasında.

00:26.340 --> 00:29.260
Örneğin, fonksiyonlar için fonksiyonların parametrelerine

00:29.260 --> 00:32.520
tür atayabileceğinizi gördünüz.

00:32.520 --> 00:34.310
Görünüşe göre fonksiyonlar ve türler

00:34.310 --> 00:36.483
ile yapabileceğiniz daha fazla şey var.

00:37.590 --> 00:40.430
Bunun için, dizeleri değil sadece sayıları kabul

00:40.430 --> 00:43.373
eden add fonksiyonumu yeniden oluşturacağım.

00:44.270 --> 00:48.340
Bu da basit bir şey yapar, n bir artı n iki döndürür, yani çok

00:48.340 --> 00:49.513
zor değildir.

00:51.004 --> 00:53.740
Bahsettiğim gibi, parametrelere tür atayabiliyoruz,

00:53.740 --> 00:55.180
bu yeni bir şey değil.

00:55.180 --> 00:57.030
Bununla birlikte, işlevin genel

00:57.030 --> 01:01.050
olarak önemli bir başka türü daha vardır, bir geri dönüş türü vardır.

01:01.050 --> 01:03.990
Ve burada dönüş türü TypeScript tarafından çıkarılır.

01:03.990 --> 01:06.490
Ekle'nin üzerine gelirsek görebiliriz.

01:06.490 --> 01:10.760
Burada en sonda, parametre listesinden sonra gelen iki nokta üst

01:10.760 --> 01:14.190
üste, fonksiyonun geri dönüş tipini tanımlar.

01:14.190 --> 01:16.800
Yani döndürülen değerin türü.

01:16.800 --> 01:20.020
Burada, n bir ve n ikinin toplamını döndürüyorum.

01:20.020 --> 01:23.050
Ve bu girdilerin her ikisi de sayı olduğu için, TypeScript

01:23.050 --> 01:24.930
bunun sonucunun bir sayı olacağını

01:24.930 --> 01:26.770
ve bunu döndürdüğümüz için, bu işlev

01:26.770 --> 01:28.820
verilerinin dönüş türünün bir sayı olacağını

01:28.820 --> 01:30.830
çıkarabilir.

01:30.830 --> 01:33.320
Örneğin toString ile bunları burada dizeler

01:33.320 --> 01:35.363
olarak birleştirirseniz, TypeScript

01:36.550 --> 01:39.030
burada bir dize döndürdüğümüzü doğru

01:39.030 --> 01:41.900
bir şekilde çıkaracaktır.

01:41.900 --> 01:44.350
Elbette, parametre listesinden sonra iki nokta

01:44.350 --> 01:46.910
üst üste ve ardından sayı gibi döndürmek istediğiniz

01:46.910 --> 01:48.490
türü ekleyerek buraya her zaman

01:48.490 --> 01:51.263
açıkça bir dönüş türü atayabiliriz.

01:52.850 --> 01:54.560
Bu, çıkarılan ile aynı türde olacaktır.

01:54.560 --> 01:56.760
Örneğin, bunu string olarak ayarlarsam,

01:56.760 --> 02:00.020
burada bir hata alırım, çünkü buradaki hesaplamam

02:00.020 --> 02:03.540
açıklanan dönüş türümle eşleşmiyor.

02:03.540 --> 02:06.480
Tıpkı değişkenlerde olduğu gibi, TypeScript'in tür çıkarımıyla

02:06.480 --> 02:10.080
ilgili işini yapmasına izin vermek iyi bir fikirdir.

02:10.080 --> 02:12.610
Türü açıkça ayarlamak için özel bir

02:12.610 --> 02:14.810
nedeniniz yoksa, türü ayarlamamalı

02:14.810 --> 02:17.090
ve bunun yerine TypeScript'in türü

02:17.090 --> 02:20.470
çıkarmasına izin vermelisiniz.

02:20.470 --> 02:22.660
Geri dönüş türlerine gelince, daha

02:22.660 --> 02:25.910
önce görmediğimiz ve diğer programlama dilleriyle

02:25.910 --> 02:27.530
deneyiminiz varsa sizin için

02:27.530 --> 02:30.240
yepyeni olabilecek ilginç bir tür var.

02:30.240 --> 02:31.200
Çünkü JavaScript'te

02:31.200 --> 02:33.250
gerçekten var olmayan bir türdür.

02:33.250 --> 02:35.180
Boşluk tipi.

02:35.180 --> 02:38.160
Diyelim ki printResult metodumuz var.

02:38.160 --> 02:41.190
Burada, sayı olması gereken bir

02:41.190 --> 02:44.120
sayı argümanı elde ederiz.

02:44.120 --> 02:47.510
Ve orada, teselli etmek istiyorum. günlük numarası.

02:47.510 --> 02:49.450
Ve teselli etmek istiyorum. sonuç artı sayı dediğim

02:49.450 --> 02:52.150
bir dizenin parçası olarak günlüğe kaydedin.

02:52.150 --> 02:53.670
Şimdi bunlar birleştirilerek uzun

02:53.670 --> 02:56.090
bir dize haline getirilecek ve çıktısı alınacaktır.

02:56.090 --> 02:57.777
Ve şimdi printResult öğesini çağırabilirim.

02:57.777 --> 03:01.020
Örneğin, ekleme işlevi çağrımın sonucunu

03:01.020 --> 03:05.010
beş artı diyelim ki 12 ile buradan geçirin.

03:05.010 --> 03:07.670
Bu yüzden buraya iki sayı ekliyorum.

03:07.670 --> 03:10.160
Ve bunun sonucu, yani add'in döndürdüğü şey, daha

03:10.160 --> 03:13.130
sonra printResult'a bir argüman olarak aktarılır.

03:13.130 --> 03:15.780
Ve bu konsola yazdırılmalıdır.

03:15.780 --> 03:19.150
Şimdi bunu derlersek ve sayfamızda ya da buradaki

03:19.150 --> 03:21.110
sayfamızda buna bakarsak,

03:21.110 --> 03:24.280
sonuç 17'yi görürüz ki bu mantıklıdır.

03:24.280 --> 03:25.660
Şimdi burada ilginç olan

03:25.660 --> 03:27.640
şey printResult'ın dönüş türüdür.

03:27.640 --> 03:30.353
Buradaki dönüş türünün ne olduğunu tahmin edersiniz?

03:31.240 --> 03:33.240
Belki de bunun string olduğunu düşünüyorsunuz,

03:33.240 --> 03:35.150
çünkü burada bir string oluşturuyorum.

03:35.150 --> 03:37.360
Ama unutmayın, bunu iade etmeyeceğiz.

03:37.360 --> 03:39.400
Burada hiçbir şeyi iade etmiyoruz.

03:39.400 --> 03:42.010
Bu nedenle buradaki printResult fonksiyonunun

03:42.010 --> 03:44.990
özel bir dönüş tipi vardır: void.

03:44.990 --> 03:47.910
Şimdi void dönüş tipini diğer programlama dillerinden

03:47.910 --> 03:49.830
fark edebilirsiniz.

03:49.830 --> 03:52.230
İşte böyle bir şey var.

03:52.230 --> 03:53.940
JavaScript bunu gerçekten

03:53.940 --> 03:56.740
bilmiyor ya da bu durumun bir adı yok.

03:56.740 --> 03:58.590
Ancak TypeScript bunu yapar.

03:58.590 --> 04:01.840
Yani aslında buradaki fonksiyonun dönüş tipi void'dir.

04:01.840 --> 04:04.065
Ve tabii ki burada belirtmenize gerek yok.

04:04.065 --> 04:06.440
TypeScript'in çıkarımı işini yaptı.

04:06.440 --> 04:07.630
Ancak bunun void dönüş

04:07.630 --> 04:09.610
türüne sahip olduğunu gerçekten açıkça

04:09.610 --> 04:13.730
belirtmek istiyorum, bu yüzden demo amaçlı olarak buraya ekliyorum.

04:13.730 --> 04:17.070
Şimdi, void gerçekten sadece bu fonksiyonun bir return deyimine

04:17.070 --> 04:21.020
sahip olmadığı, hiçbir şey döndürmediği anlamına gelir.

04:21.020 --> 04:24.540
Başarıyla tamamlanır, işini yapar.

04:24.540 --> 04:28.170
Kodunu çalıştırır, bir hata veya benzeri bir

04:28.170 --> 04:32.550
şey vermez, ancak daha sonra hiçbir şey döndürmez.

04:32.550 --> 04:34.990
Bu void dönüş türüdür.

04:34.990 --> 04:37.330
Şimdi teknik olarak JavaScript'te, tabii

04:37.330 --> 04:39.490
ki, eğer konsol. printResult sonucunu

04:39.490 --> 04:43.550
burada günlüğe kaydedin ve şimdi bunu derliyorum ve burada sayfada

04:43.550 --> 04:46.270
neyin çıktılandığını görüyoruz.

04:46.270 --> 04:49.480
Bunun tarafından undefined döndürüldüğünü görüyoruz.

04:49.480 --> 04:51.540
Yani teknik olarak, ve bu gerçekten

04:51.540 --> 04:56.450
ilginç, JavaScript'te, hiçbir şey döndürmeyen bir fonksiyonun dönüş

04:56.450 --> 05:00.830
değerini kullanırsak, değer olarak undefined alırız.

05:00.830 --> 05:03.730
Ve muhtemelen bildiğiniz gibi, JavaScript'te undefined

05:03.730 --> 05:05.720
aslında gerçek bir değerdir.

05:05.720 --> 05:08.430
Örneğin, var olmayan bir nesne üzerindeki bir özelliğe

05:08.430 --> 05:11.880
erişmeye çalıştığınızda da aldığınız bir değer.

05:11.880 --> 05:13.670
Teknik olarak tanımsız

05:13.670 --> 05:16.680
döndürse de burada void elde ederiz.

05:16.680 --> 05:19.020
Ve şimdi daha da kafa karıştırıcı hale

05:19.020 --> 05:23.300
getirmek için, undefined aslında TypeScript'te bir türdür.

05:23.300 --> 05:25.640
Bir tür olarak undefined'a sahip olabilirsiniz.

05:25.640 --> 05:29.570
Örneğin, yepyeni bir değişken olan someValue, tür

05:30.770 --> 05:33.270
olarak undefined alabilir ve bir

05:33.270 --> 05:34.700
hata almazsınız.

05:34.700 --> 05:37.380
Bu değişken artık sonsuza kadar tanımsız kalacaktır.

05:37.380 --> 05:39.970
Bunun ne kadar faydalı olabileceği farklı bir sorudur.

05:39.970 --> 05:43.720
Ancak undefined, TypeScript'te geçerli bir türdür.

05:43.720 --> 05:46.600
Bununla birlikte, burada bir hata aldığımızı görüyorsunuz.

05:46.600 --> 05:48.010
Ve bir fonksiyonun tanımsız

05:48.010 --> 05:51.690
döndürmesine izin verilmediği için hata alıyoruz.

05:51.690 --> 05:53.300
Teknik olarak elbette öyledir,

05:53.300 --> 05:56.850
ancak TypeScript fonksiyonlar hakkında biraz farklı düşünür.

05:56.850 --> 06:00.200
Bir fonksiyon tanımsız değil de hiçbir şey döndürmüyorsa burada

06:00.200 --> 06:04.300
void kullanmalısınız, çünkü void ile bu fonksiyonun kasıtlı olarak bir return

06:04.300 --> 06:05.940
deyimine sahip olmadığını açıkça

06:05.940 --> 06:08.260
belirtmiş olursunuz.

06:08.260 --> 06:10.690
Burada undefined derseniz, TypeScript

06:10.690 --> 06:13.460
bir değer döndürmediğiniz bir return

06:13.460 --> 06:17.080
deyimine sahip olmanızı bekler.

06:17.080 --> 06:18.660
Teknik fark bu.

06:18.660 --> 06:20.670
Şimdi bir hata almadığımı görüyorsunuz.

06:20.670 --> 06:22.860
JavaScript açısından bakıldığında,

06:22.860 --> 06:26.610
bu temelde bununla aynıdır.

06:26.610 --> 06:29.050
Ancak TypeScript burada bir ayrım yapar

06:29.050 --> 06:31.240
ve bu nedenle bir return deyiminiz yoksa

06:31.240 --> 06:33.760
kullanmanız gereken tür void'dir.

06:33.760 --> 06:37.200
Dürüst olmak gerekirse, nadiren ihtiyaç duyacağınız undefined,

06:37.200 --> 06:41.100
gerçek bir değer döndürmeden geri dönerseniz kullanılabilir.

06:41.100 --> 06:45.750
Ancak yine de, bu nadir bir kullanım durumudur ve void'i bunun gibi bir return deyimiyle

06:45.750 --> 06:47.560
de kullanabilirsiniz.

06:47.560 --> 06:49.040
Bir hata almazsınız.

06:49.040 --> 06:50.610
Ve varsayılan olarak, bu senaryoda

06:50.610 --> 06:52.770
aslında her zaman void kullanırsınız.

06:52.770 --> 06:54.680
Gerçekten tanımsız üretmesi gereken

06:54.680 --> 06:56.750
bir fonksiyonunuz yoksa ve bu konuda

06:56.750 --> 06:58.620
net olmak istemiyorsanız.

06:58.620 --> 07:01.430
Ancak yine de bu durum nadiren geçerli olacaktır.

07:01.430 --> 07:03.620
Burada sadece void ve undefined arasındaki

07:03.620 --> 07:05.870
farkı anladığınızdan emin olmak istiyorum.

07:05.870 --> 07:08.160
void, değer döndürmeyen bir fonksiyona

07:08.160 --> 07:10.930
sahip olduğunuz hemen hemen tüm senaryolarda

07:10.930 --> 07:13.450
kullanacağınız standarttır ve bunu açıkça

07:13.450 --> 07:15.770
atayabilirsiniz.

07:15.770 --> 07:18.780
Ancak elbette, TypeScript de burada yapabileceği

07:18.780 --> 07:20.440
gibi bunu çıkarabilir.

07:20.440 --> 07:23.083
Bunu sadece demo amaçlı buraya ekledim.
