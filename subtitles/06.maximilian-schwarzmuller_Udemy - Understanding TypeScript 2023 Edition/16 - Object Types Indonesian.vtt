WEBVTT

00:02.280 --> 00:03.780
Instruktur: Mari kita gali lebih

00:03.780 --> 00:06.450
dalam tentang tipe-tipe inti yang didukung TypeScript.

00:06.450 --> 00:09.800
Tipe berikutnya yang menarik adalah tipe objek.

00:09.800 --> 00:13.100
Sekarang, Anda tahu objek dalam JavaScript, mereka terlihat seperti ini.

00:13.100 --> 00:14.690
Anda memiliki tanda kurung kurawal

00:14.690 --> 00:16.350
dan kemudian Anda memiliki pasangan

00:16.350 --> 00:20.460
nilai kunci di sana dan nilai-nilai tersebut juga akan diperlakukan sebagai tipe objek dalam

00:20.460 --> 00:22.250
TypeScript, sehingga objek JavaScript

00:22.250 --> 00:23.620
apa pun adalah tipe objek.

00:23.620 --> 00:28.410
Meskipun saya sudah mengatakan ada versi objek yang lebih spesifik di TypeScript

00:28.410 --> 00:30.030
sehingga Anda dapat mengatakan

00:30.030 --> 00:32.514
ini bukan sembarang objek, ini adalah objek

00:32.514 --> 00:35.108
yang harus memiliki properti ini atau yang

00:35.108 --> 00:37.260
harus didasarkan pada fungsi konstruktor

00:37.260 --> 00:39.490
ini atau itu.

00:39.490 --> 00:41.322
Tetapi kita akan sampai di sana selangkah demi selangkah.

00:41.322 --> 00:45.110
Untuk menyelami objek, pertama-tama saya akan mengganti nama aplikasi. ts di sini dan saya akan mengganti

00:45.110 --> 00:49.770
nama ini menjadi dasar-dasar. ts di sini.

00:49.770 --> 00:52.058
Dan menambahkan aplikasi baru. ts, yang kemudian akan

00:52.058 --> 00:55.400
menimpa aplikasi lama. js setelah kita mengkompilasinya,

00:55.400 --> 00:58.600
di mana kita sekarang dapat menyelami objek.

00:58.600 --> 01:01.110
Dan mari kita mulai dengan membuat objek dasar di sini,

01:01.110 --> 01:03.902
katakanlah seseorang dengan tanda kurung kurawal di sini.

01:03.902 --> 01:05.870
Dan kami memberi nama ini.

01:05.870 --> 01:08.230
Di sini saya akan memilih Maximilian karena

01:08.230 --> 01:10.700
itu adalah nama saya dan usia 30 tahun.

01:10.700 --> 01:14.930
Sekarang, tentu saja kita bisa menghibur. log person di sini dan jika kita

01:14.930 --> 01:18.375
melakukannya, dan kita mengkompilasi ini secara

01:18.375 --> 01:23.010
mengejutkan, kita akan melihat objek itu dicetak di sini di

01:23.010 --> 01:24.536
konsol.

01:24.536 --> 01:27.284
Sekarang, apa yang juga dapat kita lakukan dalam

01:27.284 --> 01:31.690
JavaScript adalah kita dapat mencoba mengakses, katakanlah, nama panggilan,

01:31.690 --> 01:33.970
properti yang tidak ada di sini.

01:33.970 --> 01:37.320
Sekarang Anda segera melihat bahwa TypeScript tidak terlalu senang dengan

01:37.320 --> 01:39.820
hal itu, dan karenanya IDE saya memberi tahu saya.

01:39.820 --> 01:42.302
Ini memberitahu saya bahwa nama panggilan properti

01:42.302 --> 01:44.050
tidak ada pada tipe itu.

01:44.050 --> 01:47.642
Jadi jika kita menyimpan itu dan saya mencoba untuk mengkompilasi itu, kita memang

01:47.642 --> 01:49.907
mendapatkan kesalahan yang sama di sana.

01:49.907 --> 01:52.210
Kompiler TypeScript tidak menyukai hal ini dan

01:52.210 --> 01:54.401
memberitahu saya bahwa kita tidak memiliki properti

01:54.401 --> 01:56.430
nama panggilan pada objek ini.

01:56.430 --> 01:59.813
Ia mengetahui bahwa kita tidak memiliki properti nickname ini karena

01:59.813 --> 02:02.936
jika kita mengarahkan kursor ke person yang disimpulkan, kita

02:02.936 --> 02:05.710
dapat melihat ada titik dua setelah person, jadi setelah

02:05.710 --> 02:07.970
nama variabel atau konstanta.

02:07.970 --> 02:11.030
Disimpulkan bahwa ini adalah jenis data yang disimpan

02:11.030 --> 02:12.110
di sana.

02:12.110 --> 02:14.181
Sekarang, itu bukan hanya objek, seperti yang bisa Anda katakan.

02:14.181 --> 02:16.349
Itu adalah objek konkret.

02:16.349 --> 02:18.920
Ini adalah objek dengan kunci nama, di mana kemudian

02:18.920 --> 02:21.430
jenisnya, pada gilirannya, harus berupa string.

02:21.430 --> 02:24.700
Dan kunci usia, di mana jenisnya harus berupa angka.

02:24.700 --> 02:27.116
Dan sebenarnya, ini bisa membingungkan di sini.

02:27.116 --> 02:31.100
Ini, di sini, jelas terlihat seperti objek JavaScript.

02:31.100 --> 02:33.980
Kurung kurawal, pasangan nilai kunci.

02:33.980 --> 02:36.020
Nah, hal penting pertama yang perlu dilihat di sini adalah

02:36.020 --> 02:38.520
bahwa kita memiliki titik koma di sini setelah setiap baris.

02:38.520 --> 02:40.580
Kita tidak memilikinya dalam objek JavaScript.

02:40.580 --> 02:41.750
Kita memiliki koma di sini.

02:41.750 --> 02:44.160
Dan memang, ini bukan objek JavaScript di sini

02:44.160 --> 02:45.940
yang dibuat di suatu tempat.

02:45.940 --> 02:50.600
Ini adalah tipe objek yang disimpulkan oleh TypeScript dan tipe objek

02:50.600 --> 02:53.914
ditulis hampir seperti objek, tetapi tentu saja kita

02:53.914 --> 02:57.106
tidak memiliki pasangan nilai kunci di sana, tetapi

02:57.106 --> 02:59.239
pasangan tipe kunci.

02:59.239 --> 03:02.840
Tipe objek ada di sana untuk mendeskripsikan, yah,

03:02.840 --> 03:06.064
tipe objek yang digunakan di suatu tempat.

03:06.064 --> 03:07.653
Kita bisa lebih umum.

03:07.653 --> 03:10.420
Saya bisa secara eksplisit menetapkan

03:10.420 --> 03:13.640
tipe di sini untuk konstanta objek.

03:13.640 --> 03:16.100
Object adalah salah satu tipe bawaan, seperti halnya

03:16.100 --> 03:17.460
number dan string, dan sekarang

03:17.460 --> 03:21.030
jika saya mengarahkan kursor ke atas ini, kita melihat orang-orang dari tipe

03:21.030 --> 03:24.000
object dan sekarang TypeScript benar-benar hanya peduli tentang

03:24.000 --> 03:26.430
fakta bahwa ini adalah tipe object.

03:26.430 --> 03:28.423
Sekarang, tetap saja, jika kita meng-compile

03:28.423 --> 03:32.808
ini, kita mendapatkan kesalahan itu, karena TypeScript masih menganalisis kode kita

03:32.808 --> 03:35.490
dan melihat bahwa kita mencoba mengakses sesuatu yang

03:35.490 --> 03:36.666
tidak ada di sana, tetapi

03:36.666 --> 03:39.770
penting untuk memahami bahwa semuanya dimulai dengan tipe

03:39.770 --> 03:42.140
objek yang paling umum ini.

03:42.140 --> 03:44.660
Tetapi, sering kali Anda ingin lebih spesifik daripada itu.

03:44.660 --> 03:47.623
Anda tidak hanya ingin bekerja dengan tipe objek generik itu.

03:47.623 --> 03:50.284
Anda benar-benar ingin mendapatkan dukungan penuh.

03:50.284 --> 03:53.550
Sebagai contoh, sekarang, jika saya menambahkan titik di sini dan saya

03:53.550 --> 03:55.570
melihat pelengkapan otomatis saya, saya tidak

03:55.570 --> 03:58.080
mendapatkan bantuan sama sekali oleh IDE saya.

03:58.080 --> 04:00.303
Alasan untuk itu adalah bahwa semua yang

04:00.303 --> 04:04.230
kita katakan pada IDE adalah bahwa kita memiliki nilai di sini, secara pribadi,

04:04.230 --> 04:05.860
yang bertipe objek.

04:05.860 --> 04:08.300
Memang sekarang kita sebenarnya juga mendapatkan error

04:08.300 --> 04:10.210
jika saya mencoba mengakses nama.

04:10.210 --> 04:12.270
Nama ada di sini, bukan?

04:12.270 --> 04:14.120
Tetapi apa yang kita beritahukan kepada TypeScript

04:14.120 --> 04:16.601
di sini adalah bahwa kita hanya memiliki sebuah objek di mana kita

04:16.601 --> 04:18.889
tidak memberikan informasi apapun kepada TypeScript.

04:18.889 --> 04:21.739
Jadi sebenarnya, TypeScript tidak mendukung jenis

04:21.739 --> 04:24.750
properti apapun karena kita tidak memberitahukan apapun

04:24.750 --> 04:26.210
tentang objek.

04:26.210 --> 04:28.050
Jadi, kita harus lebih spesifik.

04:28.050 --> 04:32.000
Dan kita lebih spesifik dengan menetapkan jenis objek tertentu.

04:32.000 --> 04:34.795
Hal yang TypeScript juga disimpulkan secara otomatis.

04:34.795 --> 04:38.548
Kita melakukan ini dengan menambahkan tanda kurung kurawal

04:38.548 --> 04:43.370
di sini setelah titik dua, setelah const atau nama variabel kita.

04:43.370 --> 04:46.213
Jadi, di sini tidak membuat objek JavaScript baru.

04:46.213 --> 04:48.460
Ini sebenarnya akan dihilangkan dari kode

04:48.460 --> 04:50.310
JavaScript yang dikompilasi.

04:50.310 --> 04:52.643
Sebaliknya, ini hanyalah notasi TypeScript

04:52.643 --> 04:55.855
dari tipe objek khusus, jadi bisa dikatakan.

04:55.855 --> 04:59.422
Jadi dari tipe objek di mana kita memberikan beberapa informasi

04:59.422 --> 05:01.434
tentang struktur objek.

05:01.434 --> 05:04.520
Sekarang, dengan menetapkan hanya sepasang kurung kurawal kosong sebagai

05:04.520 --> 05:07.440
tipe, kita pada dasarnya melakukan hal yang sama seperti pada objek.

05:07.440 --> 05:09.765
Kita memberitahukan TypeScript bahwa ini adalah beberapa objek.

05:09.765 --> 05:12.740
Sekarang kita bisa lebih spesifik.

05:12.740 --> 05:16.550
Kita bisa menambahkan entri nilai kunci di sini, namun

05:16.550 --> 05:19.694
bukan nilai kunci, melainkan tipe kunci.

05:19.694 --> 05:22.800
Jadi di sini kita bisa mengatakan objek yang

05:22.800 --> 05:25.091
harus disimpan dalam person harus

05:25.091 --> 05:28.197
memiliki properti nama dan nilai dari properti

05:28.197 --> 05:31.140
nama itu harus bertipe string.

05:31.140 --> 05:33.795
Jadi di sini kita mendeskripsikan jenis nilai

05:33.795 --> 05:36.440
yang pada akhirnya akan disimpan dalam nama.

05:36.440 --> 05:39.320
Sekarang, omong-omong, Anda lihat, saya mendapatkan error di sini.

05:39.320 --> 05:41.090
Karena apa yang saya katakan pada TypeScript

05:41.090 --> 05:43.489
sekarang adalah bahwa orang saya harus memiliki objek

05:43.489 --> 05:45.900
dengan tepat satu pasangan nilai kunci, di mana kuncinya

05:45.900 --> 05:48.626
adalah nama dan nilai dari kunci itu adalah string, tetapi

05:48.626 --> 05:52.730
kami tidak menetapkan objek dengan dua pasangan nilai kunci.

05:52.730 --> 05:55.020
Nama, yang memegang string, itu tidak masalah,

05:55.020 --> 05:58.500
tetapi usia, yang memegang angka, dan itu tidak akan baik-baik saja.

05:58.500 --> 06:01.140
Jadi di sini kita harus menyesuaikan ini dengan menambahkan titik

06:01.140 --> 06:03.520
koma dan kemudian menambahkan pasangan nilai kunci lain

06:03.520 --> 06:06.300
di sini di mana kita mengatakan usia harus bertipe angka.

06:06.300 --> 06:09.670
Jadi bukan 30 di sini, yang sebenarnya akan didukung dalam TypeScript, bahwa

06:09.670 --> 06:12.673
kita membatasinya ke satu nomor tertentu, tetapi kemudian kita akan

06:12.673 --> 06:15.600
mengalami masalah segera setelah kita mengubahnya.

06:15.600 --> 06:19.060
Sebaliknya, di sini saya hanya ingin mengatakan bahwa usia harus berupa angka.

06:19.060 --> 06:22.360
Dan sekarang kita pada dasarnya secara eksplisit menetapkan TypeScript

06:22.360 --> 06:24.870
yang sama yang disimpulkan sebelumnya.

06:24.870 --> 06:26.900
Seperti yang Anda pelajari, itu bukan praktik yang

06:26.900 --> 06:28.570
baik, tetapi untuk memahami tipe objek, saya

06:28.570 --> 06:29.940
ingin melakukannya di sini.

06:29.940 --> 06:32.315
Tetap saja ini adalah sesuatu yang bisa Anda lakukan.

06:32.315 --> 06:37.010
Lebih baik membiarkan TypeScript menyimpulkan ini seperti

06:37.010 --> 06:40.440
yang kita lakukan sebelumnya, seperti ini.

06:40.440 --> 06:42.351
Sekarang, hanya untuk menunjukkan

06:42.351 --> 06:45.450
sesuatu yang menarik, jika saya beralih kembali ke kode

06:45.450 --> 06:47.970
sub-optimal ini, di mana kita secara eksplisit

06:47.970 --> 06:49.920
menetapkan tipe TypeScript akan dapat

06:49.920 --> 06:54.920
menyimpulkan, jika kita mengkompilasi kode ini, tentu saja itu berfungsi.

06:55.180 --> 06:56.900
Kita bisa mengakses properti nama, tetapi jika

06:56.900 --> 06:59.077
kita kemudian melihat app. js kita lihat penugasan

06:59.077 --> 07:01.220
jenis ini dihapus di sini.

07:01.220 --> 07:03.417
Dan itu, tentu saja, harus menjadi sesuatu yang diharapkan.

07:03.417 --> 07:06.290
Seperti yang saya sebutkan, tipe dan tipe assignment

07:06.290 --> 07:08.120
bukan bagian dari JavaScript.

07:08.120 --> 07:09.460
Mereka hanya TypeScript saja.

07:09.460 --> 07:10.800
Saya hanya ingin menunjukkan ini

07:10.800 --> 07:12.840
lagi untuk memperjelas bahwa sintaksis di sini tidak

07:12.840 --> 07:15.080
membuat beberapa objek JavaScript, yang ada di suatu

07:15.080 --> 07:16.485
tempat dalam kode kita.

07:16.485 --> 07:21.263
Ini hanyalah representasi TypeScript dari tipe objek yang membantu

07:21.263 --> 07:24.570
TypeScript memahami objek yang sedang Anda

07:24.570 --> 07:25.900
kerjakan.

07:25.900 --> 07:29.950
Sintaksis yang lebih baik, tentu saja, adalah sintaksis ini, seperti yang Anda pelajari.
