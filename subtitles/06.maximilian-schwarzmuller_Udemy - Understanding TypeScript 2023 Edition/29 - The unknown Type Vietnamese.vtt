WEBVTT

00:02.340 --> 00:04.020
Người hướng dẫn: Chúng ta gần như đã hoàn

00:04.020 --> 00:06.240
thành phần cơ bản về TypeScript và các loại cốt lõi.

00:06.240 --> 00:10.130
Có hai loại nữa mà bạn nên biết vì đôi

00:10.130 --> 00:13.170
khi chúng sẽ quan trọng.

00:13.170 --> 00:16.603
Loại đầu tiên là loại không xác định.

00:17.860 --> 00:20.350
Vì vậy, tôi sẽ đặt tên tệp này là functions. ts và thêm một

00:20.350 --> 00:23.343
ứng dụng mới. ts và trong đó,

00:24.290 --> 00:28.620
giả sử chúng ta có một biến mới, userInput

00:28.620 --> 00:32.143
và đây là loại không xác định.

00:32.143 --> 00:34.850
Nó không phải là loại bất kỳ, sẽ là mặc định, nhưng

00:34.850 --> 00:36.690
không xác định, là loại khác được

00:36.690 --> 00:38.500
TypeScript giới thiệu.

00:38.500 --> 00:40.950
Có thể không biết vì chúng tôi chưa biết

00:40.950 --> 00:42.950
cuối cùng người dùng sẽ nhập gì.

00:42.950 --> 00:45.593
Nếu đó là một số, nếu đó là một chuỗi, chúng tôi không biết.

00:46.770 --> 00:48.960
Bây giờ, điều thú vị về loại không xác định

00:48.960 --> 00:51.020
là chúng ta có thể lưu trữ bất kỳ giá trị

00:51.020 --> 00:54.630
nào trong đó mà không gặp lỗi, vì vậy điều này hoàn toàn được phép.

00:54.630 --> 00:57.660
Nếu bây giờ tôi biên dịch tệp của mình ở đây, bạn

00:57.660 --> 01:00.290
sẽ thấy tôi không gặp lỗi biên dịch nào.

01:00.290 --> 01:01.910
Vì vậy, cho đến nay, nó giống như

01:01.910 --> 01:03.820
thể chúng ta sẽ không chỉ định một loại

01:03.820 --> 01:05.260
ở đây và do đó chúng ta có bất kỳ

01:05.260 --> 01:08.610
loại nào hoặc nếu chúng ta sẽ đặt bất kỳ làm loại một cách rõ ràng.

01:08.610 --> 01:11.810
Tuy nhiên, không biết là khác với bất kỳ.

01:11.810 --> 01:15.430
Điều này ở đây hoạt động, nhưng chúng tôi sẽ gặp

01:15.430 --> 01:19.660
sự cố nếu tôi có một biến khác, giả sử tên người dùng, phải

01:19.660 --> 01:20.890
là một chuỗi.

01:20.890 --> 01:22.860
Và nó chưa được khởi tạo ở đây, nhưng

01:22.860 --> 01:27.200
ở đây tôi muốn đặt tên người dùng bằng với đầu vào người dùng.

01:27.200 --> 01:29.150
Bây giờ bạn thấy chúng tôi đang gặp lỗi.

01:29.150 --> 01:33.010
Loại không xác định không thể gán cho loại chuỗi.

01:33.010 --> 01:34.590
Vì vậy, tên người dùng muốn có

01:34.590 --> 01:37.990
một chuỗi và tất nhiên, ẩn số không được đảm bảo là một chuỗi.

01:37.990 --> 01:41.620
Ở đây, tôi đã chỉ định một cái, nhưng đó chỉ là trường hợp của dòng này.

01:41.620 --> 01:44.460
userInput về mặt kỹ thuật có thể giữ bất kỳ giá

01:44.460 --> 01:46.490
trị nào vì nó không xác định.

01:46.490 --> 01:47.640
Bây giờ, điều thú vị

01:47.640 --> 01:51.060
là nếu tôi chuyển từ không xác định thành bất kỳ, lỗi này sẽ

01:51.060 --> 01:53.900
biến mất vì bất kỳ là loại linh hoạt nhất trong TypeScript

01:53.900 --> 01:56.810
và về cơ bản, nó vô hiệu hóa tất cả kiểm tra loại và TypeScript

01:56.810 --> 02:00.950
chỉ nói, "Tôi bỏ cuộc, bạn muốn làm gì thì làm. Unknown hạn chế hơn một chút so với bất kỳ.

02:00.950 --> 02:05.510
Với ẩn số, trước hết chúng ta phải kiểm tra loại hiện đang

02:05.510 --> 02:08.820
được lưu trữ trong userInput trước khi

02:08.820 --> 02:12.200
chúng ta có thể gán nó cho một biến muốn có

02:12.200 --> 02:14.400
một chuỗi chẳng hạn.

02:14.400 --> 02:16.180
Vì vậy, vì cần có một chuỗi ở đây,

02:16.180 --> 02:18.110
chúng tôi có thể kiểm tra xem loại

02:18.110 --> 02:23.110
userInput có bằng chuỗi hay không và TypeScript sẽ phát hiện kiểm tra này và hiểu rằng

02:23.650 --> 02:26.020
ở đây, những gì được lưu trữ trong userName

02:26.020 --> 02:29.790
vì nó kết thúc câu lệnh if này, nơi tôi kiểm tra userInput thuộc

02:29.790 --> 02:31.830
loại chuỗi, userInput được đảm bảo

02:31.830 --> 02:34.680
là một chuỗi và do đó tôi có thể gán nó cho userName

02:34.680 --> 02:36.920
một cách an toàn.

02:36.920 --> 02:39.990
Vì vậy, tôi cần kiểm tra loại bổ sung như vậy

02:39.990 --> 02:42.670
ở đây không xác định để có thể gán một

02:42.670 --> 02:47.560
giá trị không xác định cho một giá trị có loại cố định và do đó, không

02:47.560 --> 02:50.530
xác định là lựa chọn tốt hơn bất kỳ nếu bạn

02:50.530 --> 02:54.780
biết tôi không thể biết chính xác loại cửa hàng nào trong

02:54.780 --> 02:56.930
ở đó, nó có thể là một con số, nó

02:56.930 --> 02:59.450
có thể là một chuỗi, nhưng cuối cùng

02:59.450 --> 03:02.910
tôi biết mình muốn làm gì với nó.

03:02.910 --> 03:05.470
Chà, chỉ cần thêm một kiểm tra bổ sung để đảm bảo

03:05.470 --> 03:07.440
rằng những gì bạn muốn làm có thể được

03:07.440 --> 03:10.240
thực hiện, để nếu bạn muốn làm việc với một chuỗi,

03:10.240 --> 03:12.160
bạn có một chuỗi và bạn ổn.

03:12.160 --> 03:14.690
Và sau đó, không biết vẫn tốt hơn bất kỳ điều

03:14.690 --> 03:18.720
gì vì nó đảm bảo rằng bạn không được phép làm mọi thứ nhưng ít nhất

03:18.720 --> 03:20.930
bạn phải kiểm tra một số loại.

03:20.930 --> 03:23.260
Tất nhiên, nếu bạn có cơ hội biết trước rằng

03:23.260 --> 03:25.990
userInput luôn là một chuỗi hoặc luôn là một chuỗi

03:25.990 --> 03:28.150
hoặc một số, thì bạn nên sử dụng chuỗi

03:28.150 --> 03:30.000
hoặc một kiểu kết hợp như vậy thay

03:30.000 --> 03:31.680
vì không xác định.

03:31.680 --> 03:34.460
Vì vậy, loại không xác định vẫn là loại bạn không nên sử dụng mọi

03:34.460 --> 03:36.010
lúc, nhưng nó tốt hơn bất kỳ loại nào

03:36.010 --> 03:37.460
vì những lý do được mô tả.
