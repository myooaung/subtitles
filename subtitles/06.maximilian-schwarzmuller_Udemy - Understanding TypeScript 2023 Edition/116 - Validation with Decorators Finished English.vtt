WEBVTT

1
00:00:02.320 --> 00:00:05.210
<v Instructor>To implement this I will first of all</v>

2
00:00:05.210 --> 00:00:08.217
create a interface ValidatorConfig,

3
00:00:09.550 --> 00:00:12.680
where I want to configure that storage I want to work with.

4
00:00:12.680 --> 00:00:15.130
My idea there is to have a couple of properties,

5
00:00:15.130 --> 00:00:17.653
and hence I use this index type notation here.

6
00:00:19.720 --> 00:00:21.450
Which are basically strings,

7
00:00:21.450 --> 00:00:23.440
where the value is yet another object.

8
00:00:23.440 --> 00:00:26.380
Because this here would be basically the class name

9
00:00:26.380 --> 00:00:29.570
for which we want to register some validated properties.

10
00:00:29.570 --> 00:00:31.700
And then in the object which we store there,

11
00:00:31.700 --> 00:00:34.580
we have the concrete properties of the class

12
00:00:34.580 --> 00:00:37.010
that have validators attached to them.

13
00:00:37.010 --> 00:00:40.610
So here we have the validatable property,

14
00:00:40.610 --> 00:00:42.240
if you wanna call it like this,

15
00:00:42.240 --> 00:00:44.660
which also will be a string key.

16
00:00:44.660 --> 00:00:47.350
And then the value for that should be an array of strings

17
00:00:47.350 --> 00:00:50.010
where basically we have something like

18
00:00:52.420 --> 00:00:55.490
required, positive, and so on.

19
00:00:55.490 --> 00:00:57.460
So something like that could be added here

20
00:00:57.460 --> 00:00:59.323
as a list of validators.

21
00:01:00.300 --> 00:01:05.300
Now we can create our registeredValidators config here,

22
00:01:05.790 --> 00:01:07.950
which should be of type ValidatorConfig

23
00:01:07.950 --> 00:01:09.640
which initially is an empty object.

24
00:01:09.640 --> 00:01:11.500
Because initially when the app starts

25
00:01:11.500 --> 00:01:13.920
when our third party library gets loaded,

26
00:01:13.920 --> 00:01:16.293
no validators have been registered yet.

27
00:01:17.640 --> 00:01:19.920
Well, and then here in our directors

28
00:01:19.920 --> 00:01:23.490
we want to add something to that registry.

29
00:01:23.490 --> 00:01:28.020
Now keep in mind that a property decorator function

30
00:01:28.020 --> 00:01:31.010
gets two arguments: the target, which is the prototype

31
00:01:31.010 --> 00:01:33.910
of the object the property sits on,

32
00:01:33.910 --> 00:01:37.340
or the constructor function if it were a static property,

33
00:01:37.340 --> 00:01:39.300
and the property name.

34
00:01:39.300 --> 00:01:40.710
These are the two arguments we get here,

35
00:01:40.710 --> 00:01:44.370
we don't get the descriptor for properties.

36
00:01:44.370 --> 00:01:46.760
Now we can go to our registered validators

37
00:01:46.760 --> 00:01:51.463
and there I wanna add a new entry for target.constructor.

38
00:01:52.730 --> 00:01:56.070
The prototype of the instance we're working with

39
00:01:56.070 --> 00:01:58.430
will have a constructor key which points at

40
00:01:58.430 --> 00:02:02.610
the constructor function that was used to create our object.

41
00:02:02.610 --> 00:02:04.690
And that, therefore, will basically be

42
00:02:04.690 --> 00:02:06.120
something like course here,

43
00:02:06.120 --> 00:02:08.460
so the name of that constructor function in the end

44
00:02:08.460 --> 00:02:10.560
can be retrieved from that constructor.

45
00:02:10.560 --> 00:02:11.900
Because constructor is a function

46
00:02:11.900 --> 00:02:13.400
we can use the name property,

47
00:02:13.400 --> 00:02:15.900
which exists on any function in JavaScript

48
00:02:15.900 --> 00:02:18.310
to get the function name, and this then will be

49
00:02:18.310 --> 00:02:20.620
the course name here for example.

50
00:02:20.620 --> 00:02:23.390
So now we register the class name as a key

51
00:02:23.390 --> 00:02:25.030
in registered validators.

52
00:02:25.030 --> 00:02:28.130
And the value for that then should be another object.

53
00:02:28.130 --> 00:02:30.630
So I set this equal to another object here.

54
00:02:30.630 --> 00:02:32.390
And in that object I also have

55
00:02:32.390 --> 00:02:34.640
a dynamically assigned property

56
00:02:34.640 --> 00:02:37.400
where I use my propName, so the property for which

57
00:02:37.400 --> 00:02:40.190
I want to add a validator as a key.

58
00:02:40.190 --> 00:02:42.310
Now the value here is an array of strings,

59
00:02:42.310 --> 00:02:45.530
and here I will add required as a string.

60
00:02:45.530 --> 00:02:47.920
Now of course this is a very naive validator.

61
00:02:47.920 --> 00:02:50.000
If we had other validators registered

62
00:02:50.000 --> 00:02:52.830
for this property already, I would now overwrite it here.

63
00:02:52.830 --> 00:02:54.900
So it would be better to first retrieve

64
00:02:54.900 --> 00:02:58.360
any existing validators and then copy them into this array

65
00:02:58.360 --> 00:03:01.320
and only add required to that existing array.

66
00:03:01.320 --> 00:03:02.870
Again, to save some time here,

67
00:03:02.870 --> 00:03:04.740
and to just show the general idea,

68
00:03:04.740 --> 00:03:06.873
I will have this more naive approach here.

69
00:03:07.980 --> 00:03:11.180
With that we got the required annotation though,

70
00:03:11.180 --> 00:03:14.690
let's now work on the positive number annotation.

71
00:03:14.690 --> 00:03:16.730
And of course, that's basically the same.

72
00:03:16.730 --> 00:03:21.410
I copy that code but I set this here to positive

73
00:03:21.410 --> 00:03:23.600
or whatever identifier you want to use

74
00:03:23.600 --> 00:03:25.010
and of course we have to make sure

75
00:03:25.010 --> 00:03:27.650
we accept the right arguments.

76
00:03:27.650 --> 00:03:30.990
So with that along with this what we added thus far,

77
00:03:30.990 --> 00:03:34.420
we register these properties and their validators

78
00:03:34.420 --> 00:03:38.640
in our global config when this class is defined.

79
00:03:38.640 --> 00:03:41.460
Now we just need to work on the validate function.

80
00:03:41.460 --> 00:03:43.400
The validate function should go through

81
00:03:43.400 --> 00:03:46.240
all registered validators, and then basically run

82
00:03:46.240 --> 00:03:50.340
different logic based on which validators it finds.

83
00:03:50.340 --> 00:03:54.857
So here first of all I want to retrieve the configuration

84
00:03:54.857 --> 00:03:57.600
for the concrete object we're dealing with.

85
00:03:57.600 --> 00:04:00.390
For that we need to find out which constructor function

86
00:04:00.390 --> 00:04:04.277
the object is based on and then get the validation config

87
00:04:04.277 --> 00:04:07.040
or the property validator mappings here

88
00:04:07.040 --> 00:04:09.070
which we set up for that object.

89
00:04:09.070 --> 00:04:11.960
So here I'll name this object validators,

90
00:04:11.960 --> 00:04:14.520
or objValidatorConfig maybe.

91
00:04:14.520 --> 00:04:17.110
And we reach out to the registered validators here

92
00:04:17.110 --> 00:04:22.110
and access a property which should be obj.constructor.name,

93
00:04:23.900 --> 00:04:27.060
same logic as before, we access the constructor property

94
00:04:27.060 --> 00:04:28.980
which exists on the prototype of the object

95
00:04:28.980 --> 00:04:31.720
and therefore we can access it directly on the object

96
00:04:31.720 --> 00:04:33.340
thanks to how JavaScript works

97
00:04:33.340 --> 00:04:35.050
and thanks to the prototype chain

98
00:04:35.050 --> 00:04:36.710
we will then reach out to the prototype

99
00:04:36.710 --> 00:04:38.920
if we can't find the constructor property

100
00:04:38.920 --> 00:04:41.580
on the object itself, and that will work.

101
00:04:41.580 --> 00:04:43.840
And therefore now we got the constructor name

102
00:04:43.840 --> 00:04:46.970
and we find out that, for example, this Course here

103
00:04:46.970 --> 00:04:49.050
is based on this Course class.

104
00:04:49.050 --> 00:04:51.290
So we look up any validator configuration

105
00:04:51.290 --> 00:04:52.800
we have for the Course class.

106
00:04:52.800 --> 00:04:55.910
So now we're looking at this object, basically.

107
00:04:55.910 --> 00:04:58.207
This is now in objValidatorConfig.

108
00:04:59.310 --> 00:05:01.540
Now of course we might not find this

109
00:05:01.540 --> 00:05:03.270
if we're trying to validate our object

110
00:05:03.270 --> 00:05:05.110
for which nothing was registered.

111
00:05:05.110 --> 00:05:08.270
So if we don't have any validator config,

112
00:05:08.270 --> 00:05:11.640
if we don't find anything there, I want to return true

113
00:05:11.640 --> 00:05:14.010
because then this certainly is valid, right?

114
00:05:14.010 --> 00:05:15.330
There is nothing to validate,

115
00:05:15.330 --> 00:05:18.350
so the object certainly is valid.

116
00:05:18.350 --> 00:05:20.900
Otherwise, if we do find it I want it to loop

117
00:05:20.900 --> 00:05:24.910
through this inner object here with a for in loop.

118
00:05:24.910 --> 00:05:27.580
So with that I loop through my properties

119
00:05:27.580 --> 00:05:29.560
for which I registered validators,

120
00:05:29.560 --> 00:05:33.007
with const prop in objValidatorConfig.

121
00:05:34.380 --> 00:05:36.950
This gives me access to all the property names

122
00:05:36.950 --> 00:05:39.630
for which we then might have validators.

123
00:05:39.630 --> 00:05:41.180
So now of course I need to go through

124
00:05:41.180 --> 00:05:43.970
all the validators we might have for a property.

125
00:05:43.970 --> 00:05:45.230
This always should be an array

126
00:05:45.230 --> 00:05:47.680
even if we only have one validator added.

127
00:05:47.680 --> 00:05:49.530
So we can use a for of loop here now

128
00:05:49.530 --> 00:05:53.040
and get the concrete validator, which we have,

129
00:05:53.040 --> 00:05:56.930
for the objValidatorConfig for this given property.

130
00:05:56.930 --> 00:06:00.560
So now we're getting things like positive or required,

131
00:06:00.560 --> 00:06:02.963
which are stored in the validator constant then.

132
00:06:04.080 --> 00:06:06.110
And then we could have a switch statement here,

133
00:06:06.110 --> 00:06:08.030
or of course call external functions

134
00:06:08.030 --> 00:06:09.810
based on which validator we find.

135
00:06:09.810 --> 00:06:12.130
But here I'll go with a built-in switch statement,

136
00:06:12.130 --> 00:06:16.620
switch on validator and then basically have different cases.

137
00:06:16.620 --> 00:06:19.683
For example, the required case here.

138
00:06:20.800 --> 00:06:22.163
Whoops, like this.

139
00:06:23.470 --> 00:06:27.900
Here, I want to return true if our property,

140
00:06:27.900 --> 00:06:28.950
which we're looking at...

141
00:06:28.950 --> 00:06:33.260
So this property on this object has a non-empty value.

142
00:06:33.260 --> 00:06:38.260
So I will return true if obj prop is truthy.

143
00:06:39.170 --> 00:06:42.010
And to convert this to a real true or false value

144
00:06:42.010 --> 00:06:44.420
we can use the double bang operator.

145
00:06:44.420 --> 00:06:46.840
Now I hear types of complaints that it doesn't know

146
00:06:46.840 --> 00:06:49.440
whether object has this property,

147
00:06:49.440 --> 00:06:51.220
so here we should actually change this to any

148
00:06:51.220 --> 00:06:53.560
to get this extra flexibility here.

149
00:06:53.560 --> 00:06:56.150
Of course you could also work on the types here.

150
00:06:56.150 --> 00:07:00.480
And for example, also turn your identifiers here

151
00:07:00.480 --> 00:07:03.430
into clearly defined types where Enums you work with

152
00:07:03.430 --> 00:07:05.490
and maybe also improve the typing here.

153
00:07:05.490 --> 00:07:07.420
Though, to be honest, since I want this to work

154
00:07:07.420 --> 00:07:09.960
with any object, it is hard to improve this in a way

155
00:07:09.960 --> 00:07:11.810
that TypeScript will like it.

156
00:07:11.810 --> 00:07:13.330
We could work with generic types

157
00:07:13.330 --> 00:07:16.800
but then again we would need kind of restrict ourselves

158
00:07:16.800 --> 00:07:19.740
to which objects the generic types

159
00:07:19.740 --> 00:07:22.110
should extend and accept therefore.

160
00:07:22.110 --> 00:07:25.850
So any might be our best option here to be really flexible

161
00:07:25.850 --> 00:07:27.880
and accept a lot of different objects

162
00:07:27.880 --> 00:07:30.640
in this validate function.

163
00:07:30.640 --> 00:07:32.270
Now back to the switch segment,

164
00:07:32.270 --> 00:07:34.750
the required case is one possibly case,

165
00:07:34.750 --> 00:07:37.650
we also got the positive case which we wanna handle.

166
00:07:37.650 --> 00:07:39.280
And there I want to return true

167
00:07:39.280 --> 00:07:43.770
if the property we're looking at is greater than zero.

168
00:07:43.770 --> 00:07:47.260
So if object prop is greater than zero,

169
00:07:47.260 --> 00:07:50.463
then this returns true, otherwise this will return false.

170
00:07:52.890 --> 00:07:55.730
Now if we don't make it into this for block

171
00:07:55.730 --> 00:07:57.970
or if we somehow have a loop

172
00:07:57.970 --> 00:07:59.310
that doesn't loop through anything

173
00:07:59.310 --> 00:08:01.500
because we haven't registered any validators,

174
00:08:01.500 --> 00:08:04.130
we passed an empty array here or something,

175
00:08:04.130 --> 00:08:06.350
so if you make it past this for loop,

176
00:08:06.350 --> 00:08:10.280
I will return true as a default as well.

177
00:08:10.280 --> 00:08:12.800
And now we return something in all circumstances

178
00:08:12.800 --> 00:08:14.503
and we can use validate.

179
00:08:15.450 --> 00:08:19.253
With that let's see whether it works, if we now save this,

180
00:08:23.610 --> 00:08:26.330
and we reload our app here and I try to submit this

181
00:08:26.330 --> 00:08:29.400
we get an error, invalid input please try again.

182
00:08:29.400 --> 00:08:30.780
If I enter some text here:

183
00:08:30.780 --> 00:08:34.793
JavaScript The Complete Guide,

184
00:08:35.940 --> 00:08:38.100
I still get this because my number is wrong.

185
00:08:38.100 --> 00:08:40.440
If I enter minus one here we also get this

186
00:08:40.440 --> 00:08:42.020
because that's not positive.

187
00:08:42.020 --> 00:08:45.020
If I enter a positive number however, it works.

188
00:08:45.020 --> 00:08:48.230
If I have a positive number but the first field is empty,

189
00:08:48.230 --> 00:08:49.860
then this also works,

190
00:08:49.860 --> 00:08:52.190
so that's something we'll have to work on.

191
00:08:52.190 --> 00:08:54.600
So let's find out what the problem is.

192
00:08:54.600 --> 00:08:57.380
And to find out I actually will add

193
00:08:57.380 --> 00:08:59.830
a little console log here and log the property

194
00:08:59.830 --> 00:09:00.720
we're looking at.

195
00:09:00.720 --> 00:09:02.340
We could of course also use break points

196
00:09:02.340 --> 00:09:03.513
and developer tools.

197
00:09:04.820 --> 00:09:07.410
Now if I click save here, you see the first thing

198
00:09:07.410 --> 00:09:09.250
which gets validated here is the price

199
00:09:09.250 --> 00:09:10.623
and thereafter we stop.

200
00:09:11.530 --> 00:09:15.100
So the price is the first property that gets validated.

201
00:09:15.100 --> 00:09:16.980
And that's the interesting thing here,

202
00:09:16.980 --> 00:09:20.090
the price is actually only property that matters here

203
00:09:20.090 --> 00:09:22.230
because we return in validate.

204
00:09:22.230 --> 00:09:25.840
That means the first time we find any validator

205
00:09:25.840 --> 00:09:29.050
that returns true or false, we immediately return

206
00:09:29.050 --> 00:09:31.480
and we don't care about the other validators.

207
00:09:31.480 --> 00:09:33.320
Now in the false case this is okay

208
00:09:33.320 --> 00:09:35.360
because if one element is false,

209
00:09:35.360 --> 00:09:37.450
if one property is false, is invalid,

210
00:09:37.450 --> 00:09:40.140
then we're fine not even looking at the others.

211
00:09:40.140 --> 00:09:42.590
But for the true case it's a problem.

212
00:09:42.590 --> 00:09:44.970
If we return true the first time

213
00:09:44.970 --> 00:09:49.410
one property meets our expectations, we have a problem.

214
00:09:49.410 --> 00:09:51.540
So we should enhance this by having

215
00:09:51.540 --> 00:09:55.130
a isValid property here, which initially is true.

216
00:09:55.130 --> 00:09:56.780
Is valid variable, I mean.

217
00:09:56.780 --> 00:10:01.780
And then here we set isValid equal to isValid and this here,

218
00:10:03.857 --> 00:10:08.857
and the same down here, set this equal to this.

219
00:10:09.570 --> 00:10:11.290
So that we don't return immediately,

220
00:10:11.290 --> 00:10:14.750
instead we just update isValid and we break thereafter

221
00:10:14.750 --> 00:10:16.700
to not fall through.

222
00:10:16.700 --> 00:10:19.200
The result of that is that in the end

223
00:10:19.200 --> 00:10:22.710
after all these loops isValid either still is true,

224
00:10:22.710 --> 00:10:25.710
but as soon as one of these checks here is false,

225
00:10:25.710 --> 00:10:27.530
thanks to how JavaScript works,

226
00:10:27.530 --> 00:10:29.670
the overall isValid value will be false

227
00:10:29.670 --> 00:10:33.000
because true combined with false will return false.

228
00:10:33.000 --> 00:10:36.020
And then down there we should return isValid.

229
00:10:36.020 --> 00:10:39.330
So now we ensure that all properties are checked

230
00:10:39.330 --> 00:10:42.433
and not just the first one JavaScript has a look at.

231
00:10:43.320 --> 00:10:45.460
This however will not be our only problem,

232
00:10:45.460 --> 00:10:47.750
we also have a problem here when we have a look at

233
00:10:47.750 --> 00:10:50.480
how we register our validator logic.

234
00:10:50.480 --> 00:10:53.720
I always overwrite the registered validators

235
00:10:53.720 --> 00:10:57.130
for a given class name with a new object.

236
00:10:57.130 --> 00:11:00.050
Instead we should add any existing validators here

237
00:11:00.050 --> 00:11:01.630
so that we don't do that.

238
00:11:01.630 --> 00:11:04.140
For example, we have the spread operator like that

239
00:11:04.140 --> 00:11:08.130
to take any existing key value pairs for that class name

240
00:11:08.130 --> 00:11:10.870
on the registered validators and add that first

241
00:11:10.870 --> 00:11:14.413
before we add our one, also down there of course.

242
00:11:16.890 --> 00:11:18.733
And now with that, if we save this,

243
00:11:19.650 --> 00:11:21.980
and we go back to our application here.

244
00:11:21.980 --> 00:11:24.150
If I have both empty, we fail.

245
00:11:24.150 --> 00:11:26.280
If we enter a valid price but we have

246
00:11:26.280 --> 00:11:28.490
a invalid title, we fail.

247
00:11:28.490 --> 00:11:31.510
If both is valid, we succeed.

248
00:11:31.510 --> 00:11:35.570
If we have a valid title but not price, we fail.

249
00:11:35.570 --> 00:11:37.230
Also with a negative price.

250
00:11:37.230 --> 00:11:39.170
And therefore this now looks good to me

251
00:11:39.170 --> 00:11:42.280
and this is now our first naive implementation

252
00:11:42.280 --> 00:11:44.500
of how such a validator could work

253
00:11:44.500 --> 00:11:46.670
with the help of TypeScript decorators.

254
00:11:46.670 --> 00:11:49.150
And keep in mind that all of that here,

255
00:11:49.150 --> 00:11:52.310
all the decorators, the validate function and the registry,

256
00:11:52.310 --> 00:11:53.590
would be hidden away from you.

257
00:11:53.590 --> 00:11:55.820
That could be part of a third party library

258
00:11:55.820 --> 00:11:56.780
which you're working on,

259
00:11:56.780 --> 00:11:59.250
of course in a more elaborate way than probably

260
00:11:59.250 --> 00:12:01.300
which you share with your end users.

261
00:12:01.300 --> 00:12:04.160
And you, as a end user, would just import these things,

262
00:12:04.160 --> 00:12:06.800
add these decorators, and call validate,

263
00:12:06.800 --> 00:12:08.840
and you would have a very convenient way

264
00:12:08.840 --> 00:12:11.763
of adding validation to your classes then.

