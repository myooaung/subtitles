WEBVTT

00:02.250 --> 00:04.380
-: Nu een belangrijke opmerking trouwens,

00:04.380 --> 00:07.280
je vraagt je misschien af waarom autobind hier in ProjectList

00:07.280 --> 00:09.960
werkt, ook al heb ik geen import toegevoegd aan de autobind

00:09.960 --> 00:11.840
decorator.

00:11.840 --> 00:15.860
Nou, omdat in app. ts, ik heb al deze importen.

00:15.860 --> 00:18.610
Nu, als ik die importen daar verwijder, wat correct

00:18.610 --> 00:21.430
zou zijn, want hier gebruik ik technisch gezien

00:21.430 --> 00:25.010
alleen ProjectInput ProjectList staat aan, dan hebben we een

00:25.010 --> 00:26.253
probleem.

00:27.260 --> 00:30.680
Zie je, als dit herlaadt, hebben we hier een fout, hoewel

00:30.680 --> 00:33.280
we helaas geen compilatiefout krijgen, maar

00:33.280 --> 00:35.010
wel een runtime error.

00:35.010 --> 00:37.470
We moeten er dus voor zorgen dat we alles wat we in een bestand

00:37.470 --> 00:40.150
gebruiken in dat bestand importeren om veilig te zijn.

00:40.150 --> 00:42.890
Technisch gezien kunnen we alles importeren in app. ts, en aangezien ProjectInput

00:42.890 --> 00:45.260
en ProjectList, die bijvoorbeeld de autobind

00:45.260 --> 00:48.320
decorator gebruiken, later komen, zal de autobind decorator

00:48.320 --> 00:51.750
beschikbaar zijn wanneer zij hem nodig hebben.

00:51.750 --> 00:54.320
Maar dit is niet de schoonste manier.

00:54.320 --> 00:56.740
Als je in plaats daarvan alles importeert wat een bestand

00:56.740 --> 00:58.450
nodig heeft vanuit dat bestand, moet

00:58.450 --> 01:00.540
je garanderen dat dit bestand het beschikbaar

01:00.540 --> 01:02.360
heeft wanneer het het nodig heeft, en vertrouw

01:02.360 --> 01:05.790
je niet op een globaal bestand dat alles importeert, waar je dan een import

01:05.790 --> 01:07.500
zou kunnen verwijderen en plotseling

01:07.500 --> 01:09.570
alles kapot gaat.

01:09.570 --> 01:11.390
Dus, wat is de oplossing hier?

01:11.390 --> 01:13.350
Nou, laten we teruggaan naar de bestanden en importeren

01:13.350 --> 01:14.530
wat ze nodig hebben.

01:14.530 --> 01:16.630
ProjectInput heeft bijvoorbeeld niet

01:16.630 --> 01:18.790
alleen de basiscomponent nodig, maar ook

01:18.790 --> 01:21.270
de validatielogica en de autobinding.

01:21.270 --> 01:23.630
Dus hier importeer ik door een niveau

01:24.970 --> 01:27.110
omhoog te gaan met twee puntjes,

01:27.110 --> 01:32.110
van decorators, de autobind decorator, whoops, zoals dit, en van util,

01:32.670 --> 01:35.366
de validatie. ts bestand.

01:35.366 --> 01:39.770
Dat is zeker nodig in dit dossier hier.

01:39.770 --> 01:42.210
Ik heb hier ook de status van het project nodig.

01:42.210 --> 01:46.810
Dus ik zal /state/project-state importeren. ts.

01:46.810 --> 01:50.690
En ik pak deze importen en ga naar ProjectItem, en daar heb ik de projectstaat

01:50.690 --> 01:54.320
en validatie niet nodig, dus die kunnen we verwijderen.

01:54.320 --> 01:56.560
Maar we hebben de autobind decorator nodig.

01:56.560 --> 02:00.580
We hebben ook de sleepbare interface en het projectmodel nodig.

02:00.580 --> 02:04.040
Dus we gaan ook naar de models map hier, en importeren

02:04.040 --> 02:08.257
project. ts en drag-drop. ts.

02:10.820 --> 02:14.720
In ProjectList hebben we geen validatie nodig, maar

02:14.720 --> 02:17.520
wel ProjectState en autobind.

02:17.520 --> 02:21.100
En in aanvulling op de models map, heb ik het

02:21.100 --> 02:25.710
project nodig. ts bestand en de drag-drop. ts bestand.

02:25.710 --> 02:27.840
Daarmee slaat u op en compileert u, en

02:27.840 --> 02:30.170
nu werkt alles weer, zoals u ziet, nu hebben

02:30.170 --> 02:32.820
we geen runtime errors meer, want nu hebben we

02:32.820 --> 02:35.520
al die imports terug in de bestanden.

02:35.520 --> 02:37.380
Dus, dit is de juiste manier om het te doen,

02:37.380 --> 02:40.060
elk bestand specificeert wat het nodig heeft, en we kunnen

02:40.060 --> 02:41.500
onze code splitsen en toch eindigen

02:41.500 --> 02:43.310
met Ã©Ã©n bestand, zodat we het beste van twee

02:43.310 --> 02:45.940
werelden krijgen, zouden we kunnen zeggen.

02:45.940 --> 02:48.000
Toch is dit niet noodzakelijkerwijs

02:48.000 --> 02:49.963
de beste manier om het te doen.
