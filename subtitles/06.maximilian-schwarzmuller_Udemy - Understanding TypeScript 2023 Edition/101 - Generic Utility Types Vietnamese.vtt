WEBVTT

00:02.330 --> 00:04.870
Người kể chuyện: Nói về các loại chung chung

00:04.870 --> 00:06.970
hơn, như một phần thưởng nhỏ, bạn

00:06.970 --> 00:11.410
có thể nói, tôi muốn hướng bạn đến một vài loại tích hợp sẵn.

00:11.410 --> 00:15.740
Typescript vận chuyển với, sử dụng các loại chung hoặc là các loại

00:15.740 --> 00:17.240
chung, cung cấp cho chúng

00:17.240 --> 00:20.350
tôi các chức năng tiện ích nhất định.

00:20.350 --> 00:22.050
Vì vậy, chỉ cần một phần thưởng

00:22.050 --> 00:22.920
nhỏ ở đây, và đôi

00:22.920 --> 00:25.550
khi những loại đặc biệt này có thể hữu ích.

00:25.550 --> 00:26.840
Bây giờ, đính kèm, bạn sẽ tìm

00:26.840 --> 00:30.680
thấy một liên kết đến tài liệu đầy đủ về tất cả các loại tiện ích cài sẵn.

00:30.680 --> 00:33.810
Ở đây, tôi chỉ muốn cho bạn một vài ví dụ.

00:33.810 --> 00:36.010
Bây giờ cũng giống như tất cả những thứ loại

00:36.010 --> 00:38.610
này, những loại này chỉ tồn tại trong các loại trên

00:38.610 --> 00:41.300
thế giới và do đó, chỉ trước khi biên dịch.

00:41.300 --> 00:43.460
Nhưng trong bước biên dịch này,

00:43.460 --> 00:48.130
chúng có thể cung cấp cho bạn loại an toàn hơn hoặc tính linh hoạt hơn.

00:48.130 --> 00:51.670
Ví dụ, có loại tích hợp một phần.

00:51.670 --> 00:55.580
Giả sử chúng tôi có một loại mới và giao diện của bạn mà chúng tôi sẽ tìm

00:55.580 --> 00:58.480
thấy hoặc một loại tùy chỉnh thực sự không quan trọng,

00:58.480 --> 00:59.493
CourseGoal.

01:00.660 --> 01:03.780
CourseGoal có một tiêu đề, phải là

01:03.780 --> 01:06.930
một chuỗi và giả sử một mô tả, tất cả

01:06.930 --> 01:09.040
phải là một chuỗi.

01:09.040 --> 01:14.040
Có thể chúng ta cũng có thuộc tính CompleteUntil, là một Ngày.

01:15.290 --> 01:17.961
Bây giờ chúng ta muốn có một hàm, giả sử, createCourseGoal,

01:17.961 --> 01:21.500
hàm này sẽ tạo cho chúng ta một đối tượng như vậy.

01:21.500 --> 01:23.380
Tất nhiên, chúng ta cũng có thể tạo lớp đó.

01:23.380 --> 01:26.290
Nhưng chúng tôi có một chức năng như vậy bởi vì trong chức năng

01:26.290 --> 01:28.740
đó, chúng tôi có thể đang vẽ một số dữ liệu từ cơ sở

01:28.740 --> 01:30.590
dữ liệu hoặc bất kỳ dữ liệu nào.

01:30.590 --> 01:32.110
Vì vậy, chúng tôi có chức năng này.

01:32.110 --> 01:33.330
Và cuối cùng

01:33.330 --> 01:37.890
ở đây, tôi muốn lấy tiêu đề của mình, là một chuỗi,

01:37.890 --> 01:42.320
tôi có thể lấy mô tả của mình, là một chuỗi và tôi

01:42.320 --> 01:47.150
hy vọng lấy được ngày của mình, đó là Ngày.

01:47.150 --> 01:49.680
Bây giờ trong chức năng đó, tất nhiên, chúng ta có thể trả về một đối tượng

01:49.680 --> 01:51.740
nhưng chúng ta chỉ thiết lập tất cả những thứ này.

01:51.740 --> 01:55.340
Vì vậy, nơi chúng tôi đặt tiêu đề thành tiêu đề, mô tả thành

01:55.340 --> 01:57.840
mô tả và hoàn thànhCho đến nay.

01:57.840 --> 02:00.760
Chúng ta có thể làm tất cả những điều đó và nếu sau đó

02:00.760 --> 02:03.890
chúng ta xác định rằng hàm này sẽ luôn trả về một CourseGoal,

02:03.890 --> 02:07.120
thì chúng ta sẽ có một hàm thiết lập chính xác.

02:07.120 --> 02:08.420
Bây giờ vì lý do nào đó, giả sử chúng

02:08.420 --> 02:09.530
ta không làm như thế này,

02:09.530 --> 02:11.623
chúng ta không làm tất cả trong một bước.

02:12.680 --> 02:13.870
Thay vào đó, điều tôi muốn

02:13.870 --> 02:17.340
làm là, tôi muốn bắt đầu bằng cách tạo một biến ở đây, biến này chứa

02:17.340 --> 02:18.700
một đối tượng trống.

02:18.700 --> 02:22.620
Và rồi từng bước một, tôi muốn thêm tiêu đề của mình vào đây.

02:22.620 --> 02:26.420
Tôi muốn thêm mô tả của tôi ở đây.

02:26.420 --> 02:31.303
Và tôi muốn thêm ngày của tôi ở đây.

02:33.640 --> 02:36.420
Tất nhiên, ở đây tôi đang gặp lỗi vì tôi không thể đặt tiêu

02:36.420 --> 02:39.170
đề, đây không phải là thuộc tính của đối tượng này.

02:39.170 --> 02:41.930
Và trong khi điều này hoạt động trong vanilla JavaScript,

02:41.930 --> 02:45.410
thì TypeScript không thực sự thích điều đó khi thêm vào đây.

02:45.410 --> 02:47.810
Vì vậy, chúng tôi có thể muốn nói rằng đây phải

02:47.810 --> 02:49.300
là loại CourseGoal ở đây.

02:49.300 --> 02:51.040
Bây giờ, TypeScript không phàn nàn về

02:51.040 --> 02:53.640
điều này, mà là về thực tế rằng đây là một đối tượng trống,

02:53.640 --> 02:56.223
rõ ràng là không phù hợp với kiểu của chúng ta ở đây.

02:57.070 --> 02:58.360
Vì vậy, cuối cùng, tôi

02:58.360 --> 03:01.000
muốn trả lại nó và tôi muốn thêm tất cả những thứ

03:01.000 --> 03:04.570
này từng bước một, có thể bởi vì chúng tôi có xác thực bổ sung trước

03:04.570 --> 03:07.590
mỗi bước và do đó, một để thêm nó như thế này.

03:07.590 --> 03:12.390
Bây giờ đây là nơi loại một phần có thể có ích.

03:12.390 --> 03:17.390
Chúng ta có thể nói Mục tiêu khóa học ở đây phải là một loại một phần, mà cuối

03:17.580 --> 03:18.413
cùng, nhờ các

03:18.413 --> 03:21.600
loại chung sẽ chứa một Mục tiêu khóa học.

03:21.600 --> 03:24.200
Bây giờ điều này làm là nó nói với TypeScript

03:24.200 --> 03:28.260
rằng, đây là một đối tượng cuối cùng sẽ là một mục tiêu của khóa học.

03:28.260 --> 03:32.090
Nhưng ban đầu, loại một phần bao bọc loại của chính chúng ta và

03:32.090 --> 03:35.740
thay đổi nó thành loại trong đó tất cả các thuộc tính này là

03:35.740 --> 03:36.620
tùy chọn.

03:36.620 --> 03:39.440
Đó là những gì một phần thực hiện một trong những loại tích hợp sẵn này, Typescript

03:39.440 --> 03:40.670
vận chuyển cùng với.

03:40.670 --> 03:44.270
Vì vậy, nó biến cái này thành một loại, cũng là một loại đối tượng, trong đó tất

03:44.270 --> 03:45.713
cả các thuộc tính là tùy chọn.

03:45.713 --> 03:49.290
Do đó, ban đầu chúng ta có thể đặt đối tượng này thành một đối

03:49.290 --> 03:53.030
tượng trống và vẫn thêm tất cả những thứ này từng bước một.

03:53.030 --> 03:54.880
Vấn đề duy nhất là cuối cùng, chúng

03:54.880 --> 03:58.130
tôi không thể trả lại cái này vì bây giờ nó vẫn thuộc loại

03:58.130 --> 04:02.130
CourseGoal một phần và không thuộc loại CourseGoal.

04:02.130 --> 04:04.630
Chúng tôi có thể khắc phục điều này bằng cách chuyển đổi mục tiêu này thành

04:04.630 --> 04:07.480
mục tiêu khóa học bằng tính năng đánh máy, bởi vì chúng tôi biết tại thời điểm này,

04:07.480 --> 04:08.990
chúng tôi sẽ thêm tất cả dữ liệu.

04:08.990 --> 04:11.667
Vì vậy, nó sẽ là một mục tiêu khóa học thực sự và không phải là một phần.

04:11.667 --> 04:13.510
Và tất nhiên, đây là một chút bịa đặt.

04:13.510 --> 04:15.500
Nhưng bạn có thể gặp các tình huống

04:15.500 --> 04:18.220
như thế này, khi bạn muốn tạm thời chuyển đổi một

04:18.220 --> 04:19.650
trong các loại đối tượng

04:19.650 --> 04:23.530
của mình, một trong các giao diện của bạn thành tùy chọn.

04:23.530 --> 04:25.540
Để đảm bảo rằng tất cả các thuộc tính

04:25.540 --> 04:28.170
trong đó chỉ có thể là tùy chọn tạm thời.

04:28.170 --> 04:31.223
Và sau đó loại một phần sẽ cho phép bạn làm điều đó.

04:32.370 --> 04:35.920
Và không bao giờ loại tiện ích tích hợp

04:35.920 --> 04:40.170
sẵn mà bạn có là loại chỉ đọc có thể rất hữu ích.

04:40.170 --> 04:42.623
Giả sử chúng ta có một mảng tên.

04:43.460 --> 04:46.330
Và trong đó tôi có Max và Sports.

04:46.330 --> 04:47.420
Bây giờ, TypeScript

04:47.420 --> 04:49.860
suy luận chính xác rằng đây là một mảng chuỗi.

04:49.860 --> 04:50.960
Bây giờ chúng ta có thể làm gì?

04:50.960 --> 04:52.690
Tất nhiên chúng ta có thể

04:53.700 --> 04:55.400
đẩy Manu vào đó, và có lẽ tôi

04:55.400 --> 04:58.340
nên đổi cái này thành Anna not sports để có

04:58.340 --> 04:59.720
tên trong đó.

04:59.720 --> 05:00.553
Vì vậy, điều này hoạt động.

05:00.553 --> 05:01.386
Tuy nhiên, bây giờ

05:01.386 --> 05:04.230
giả sử, tôi muốn chắc chắn rằng đây là một mảng bị khóa.

05:04.230 --> 05:06.260
Chúng tôi không thể thêm nhiều hơn ở đây.

05:06.260 --> 05:07.870
Và chúng ta luôn có thể bổ sung thêm

05:07.870 --> 05:11.690
ở đây, nhưng ít nhất tôi muốn Typescript hét vào mặt tôi nếu tôi thử nó.

05:11.690 --> 05:13.730
Chà, đó là nơi chúng ta có thể sử

05:13.730 --> 05:18.730
dụng kiểu chỉ đọc, chúng ta có thể đặt kiểu này thành mảng chuỗi chỉ đọc.

05:18.930 --> 05:20.510
Cùng với đó, chúng tôi nói với TypeScript,

05:20.510 --> 05:23.030
những gì chúng tôi lưu trữ ở đây là, đó là một mảng các chuỗi.

05:23.030 --> 05:25.830
Nhưng nó cũng là một mảng các chuỗi chỉ được đọc.

05:25.830 --> 05:28.210
Vì vậy, khi chúng tôi cố gắng thêm thứ gì đó bằng

05:28.210 --> 05:31.600
tính năng đẩy hoặc nếu chúng tôi cố xóa thứ gì đó bằng tính năng bật,

05:31.600 --> 05:32.760
chúng tôi sẽ gặp lỗi vì

05:32.760 --> 05:34.810
chúng tôi không được phép thực hiện những

05:34.810 --> 05:36.320
việc này với mảng này.

05:36.320 --> 05:38.760
Và điều này không giới hạn ở các mảng, bạn

05:38.760 --> 05:41.610
cũng có thể sử dụng chỉ đọc trên một đối tượng.

05:41.610 --> 05:43.990
Ví dụ: để tiếp thị dưới dạng chỉ đọc,

05:43.990 --> 05:46.860
do đó bạn không được phép thay đổi thuộc tính

05:46.860 --> 05:49.920
hoặc thêm thuộc tính mới cho đối tượng này.

05:49.920 --> 05:52.240
Vì vậy, điều này cũng có thể rất, rất tiện

05:52.240 --> 05:56.510
dụng và mang lại cho bạn sự linh hoạt hơn hoặc chính xác hơn về những gì bạn

05:56.510 --> 05:59.490
đang nhắm đến để thực hiện trong mã của mình.

05:59.490 --> 06:01.380
Bây giờ, tất cả những thứ này chỉ là các loại

06:01.380 --> 06:03.610
tiện ích chỉ tồn tại trong thế giới TypeScript.

06:03.610 --> 06:05.881
Vì vậy, chúng không được biên dịch thành bất cứ thứ gì.

06:05.881 --> 06:09.400
Nhưng trong quá trình biên dịch, họ cung cấp cho bạn mức độ nghiêm ngặt

06:09.400 --> 06:12.410
cao hơn, hoặc kiểm tra bổ sung hoặc bỏ qua một số kiểm tra nhất

06:12.410 --> 06:14.800
định như chúng tôi đã làm với một phần.

06:14.800 --> 06:17.170
Bây giờ bạn đã có nhiều hơn chỉ đọc và một phần.

06:17.170 --> 06:19.730
Và như tôi đã đề cập đính kèm, bạn sẽ tìm thấy tài

06:19.730 --> 06:22.420
liệu về danh sách đầy đủ các loại tiện ích này.

06:22.420 --> 06:25.580
Trong một số tình huống nhất định, chúng có thể thực sự hữu ích

06:25.580 --> 06:27.460
và do đó, tôi chắc chắn không muốn giấu

06:27.460 --> 06:28.350
chúng với bạn.

06:28.350 --> 06:30.500
Nhưng thay vào đó, bạn nên biết về chúng

06:30.500 --> 06:34.060
để có thể sử dụng chúng khi cần khóa thứ gì đó, hoặc trong trường

06:34.060 --> 06:36.980
hợp mở một phần bất kỳ thứ gì hoặc với tất cả những thứ

06:36.980 --> 06:39.690
khác mà tôi không thảo luận ở đây, nếu bạn' đã có một

06:39.690 --> 06:42.570
số hoạt động khác có thể được tăng cường bằng một trong

06:42.570 --> 06:45.140
các loại tiện ích tích hợp sẵn này.

06:45.140 --> 06:47.670
Và những loại tiện ích này đều chung chung,

06:47.670 --> 06:49.170
bởi vì những gì chúng làm

06:49.170 --> 06:52.580
là lấy một số giá trị khác thuộc bất kỳ loại nào và làm

06:52.580 --> 06:54.190
điều gì đó với nó.

06:54.190 --> 06:57.970
Họ đặt mọi thứ thành tùy chọn, họ khóa nó lại,

06:57.970 --> 07:01.330
không quan tâm đây là mảng hay đối tượng

07:01.330 --> 07:04.430
hay mảng chuỗi, mảng số, v.v.

07:04.430 --> 07:06.000
Đó là lý do tại sao đây là chung chung.

07:06.000 --> 07:09.520
Và cùng với các thuốc generic tích hợp phía trên mà chúng ta đã thấy trước đó và các thuốc

07:09.520 --> 07:10.790
generic của riêng bạn.

07:10.790 --> 07:13.780
Điều này bây giờ hy vọng tất cả một lần nữa sẽ giúp bạn hiểu tại sao

07:13.780 --> 07:16.793
thuốc generic có thể hữu ích trong việc tại sao chúng tồn tại.
