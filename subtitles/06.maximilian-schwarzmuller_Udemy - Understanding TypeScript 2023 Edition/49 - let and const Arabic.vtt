WEBVTT

00:02.090 --> 00:04.730
المعلم: الآن قبل أن نتعمق في أي ميزات ، تجد رابطًا

00:04.730 --> 00:07.002
لهذه الصفحة مرفقة بهذه المحاضرة.

00:07.002 --> 00:11.350
تسرد هذه الصفحة بشكل أساسي جميع ميزات JavaScript الحديثة

00:11.350 --> 00:13.610
أكثر أو أقل ، والتي تدعم المتصفحات

00:13.610 --> 00:16.770
هذه الميزات وأيضًا المجمعين الذين يدعمون

00:16.770 --> 00:19.700
هذه الميزات.

00:19.700 --> 00:23.150
وهناك تجد أيضًا TypeScript ، TypeScript

00:23.150 --> 00:25.310
مدمجًا مع core-js ، وهو موفر

00:25.310 --> 00:27.210
متعدد التعبئة.

00:27.210 --> 00:28.820
لكن بشكل عام يصف هذا

00:28.820 --> 00:32.070
ما تستطيع TypeScript تجميعه.

00:32.070 --> 00:34.110
الآن يمكنك دائمًا استخدام هذا المورد

00:34.110 --> 00:35.990
إذا كنت تبحث عن ميزة معينة مثل ، دعنا

00:35.990 --> 00:37.960
نقول ، الكلمة الأساسية const ، حيث تريد

00:37.960 --> 00:40.860
معرفة ما إذا كان TypeScript يعمل مع ذلك أم لا.

00:40.860 --> 00:43.340
ثم يمكنك أن ترى كيف يعمل مع ذلك ، وما

00:43.340 --> 00:46.580
هي القيود ، والمتصفحات التي تدعم ذلك.

00:46.580 --> 00:48.250
يمنحك هذا أيضًا ، بالمناسبة

00:48.250 --> 00:51.090
، تلميحًا بخصوص المتصفحات التي قد ترغب في استهدافها

00:51.090 --> 00:53.967
، فيما يتعلق بهدف TypeScript ، وما إلى ذلك.

00:53.967 --> 00:55.260
لذلك ، هذا مورد رائع

00:55.260 --> 00:58.600
يسمح لك بالتبديل بين التكرارات المختلفة لجافا

00:58.600 --> 01:01.940
سكريبت ، والميزات التي يقدمها كل تكرار ، وكيف

01:01.940 --> 01:04.220
يتم دعم هذه الميزات.

01:04.220 --> 01:06.140
لذا بالتأكيد استخدم هذا كمورد لمعرفة

01:06.140 --> 01:08.800
ما يمكنك استخدامه وما يمكنك تجميعه والأهداف

01:08.800 --> 01:11.060
التي قد تحتاج إلى تعيينها.

01:11.060 --> 01:14.060
ومع ذلك ، لنبدأ بواحدة من أهم المقدمات وأكثرها

01:14.060 --> 01:17.030
وضوحًا ، والتي يتم استخدامها غالبًا ، أضاف الجيل

01:17.030 --> 01:19.260
التالي من JavaScript.

01:19.260 --> 01:21.780
بالمناسبة ، مع الجيل التالي من

01:21.780 --> 01:24.700
JavaScript ، أعني ES6 أو أحدث.

01:24.700 --> 01:27.860
وهذا ما أتحدث عنه.

01:27.860 --> 01:32.750
يسمح لك بتحديد الثوابت أو المتغيرات.

01:32.750 --> 01:35.350
الفرق هو أن الثوابت ، لذلك لا يمكن تغيير

01:35.350 --> 01:38.730
المتغيرات التي تحدد باستخدام الكلمة الأساسية

01:38.730 --> 01:39.910
const.

01:39.910 --> 01:42.410
إذا حاولت تعيين قيمة جديدة هنا

01:42.410 --> 01:44.270
حتى لو كانت من النوع الصحيح

01:44.270 --> 01:47.220
، فستتلقى خطأً لأنه ثابت.

01:47.220 --> 01:48.280
الآن ، هذا بالمناسبة

01:48.280 --> 01:50.200
، خطأ تم تشكيله بواسطة TypeScript.

01:50.200 --> 01:53.340
في Vanilla JavaScript ، ستحصل على خطأ من المتصفح عند

01:53.340 --> 01:55.100
تشغيل الكود الخاص بك هنا ، وهذه

01:55.100 --> 01:57.280
هي الفكرة وراء TypeScript ، كما تعلمت

01:57.280 --> 02:00.410
، حصلنا على خطأ بالفعل أثناء كتابة الكود ، لأن ذلك ،

02:00.410 --> 02:02.990
بالطبع ، أفضل بالنسبة لنا كمطور.

02:02.990 --> 02:04.930
يسمح لنا بإصلاح هذا الرمز

02:04.930 --> 02:07.820
مسبقًا قبل اختباره في وحدة التحكم.

02:07.820 --> 02:11.330
لذلك هنا ، إذا أزلنا ذلك أو قمنا بالتعليق على هذا السطر

02:11.330 --> 02:12.830
، فإنه الآن يعيد التحويل

02:12.830 --> 02:14.400
البرمجي ، وبالتالي ، لا

02:14.400 --> 02:17.130
نحصل على أي خطأ في المتصفح أيضًا.

02:17.130 --> 02:20.860
إذن ، هذا ثابت. اسمحوا هو متغير يمكن تغييره

02:20.860 --> 02:23.620
، وبالتالي ، بالطبع ، يشبه var.

02:23.620 --> 02:27.260
لا يزال Var أيضًا موجودًا لأن JavaScript يعمل

02:27.260 --> 02:29.550
بحيث لا يتم استبعاد الميزات فجأة

02:29.550 --> 02:33.460
، لأن المتصفحات القديمة ونصوصها قد تتعطل.

02:33.460 --> 02:35.160
لكن لا يجب عليك استخدام var بعد الآن.

02:35.160 --> 02:37.860
ولماذا لا تستخدم var بعد الآن؟

02:37.860 --> 02:39.670
أعني ، من المنطقي أن يكون لدينا

02:39.670 --> 02:42.520
ثوابت ، لأن ذلك يضيف ميزة جديدة ، الثوابت.

02:42.520 --> 02:43.380
لكن لماذا ندع؟

02:43.380 --> 02:45.380
لماذا قدموا كلمة رئيسية جديدة هنا؟

02:45.380 --> 02:47.223
لماذا لم يلتزموا بالفار؟

02:48.280 --> 02:51.460
دعونا و const لديهما اختلاف واحد مهم في var.

02:51.460 --> 02:53.300
حسنًا ، الاختلاف الواضح في const هو

02:53.300 --> 02:55.240
أنه لا يمكن تغيير القيمة ، ولكن بالنسبة

02:55.240 --> 02:57.040
لـ let ، نحصل أيضًا على فرق.

02:57.040 --> 03:00.930
وهذا هو النطاق الذي يتوفر فيه هذا المتغير.

03:00.930 --> 03:04.363
الآن يجب أن تعرف مفهوم النطاقات هذا في JavaScript.

03:05.609 --> 03:09.260
وباستخدام var ، يكون لديك نطاق عام ووظيفي.

03:09.260 --> 03:10.700
هذا يعني أن المتغيرات

03:10.700 --> 03:12.550
التي تحددها خارج الوظائف متاحة

03:12.550 --> 03:15.340
في كل مكان في البرامج النصية الخاصة بك.

03:15.340 --> 03:17.410
المتغيرات المعرفة داخل الوظائف

03:17.410 --> 03:19.370
متاحة فقط في تلك الوظيفة.

03:19.370 --> 03:22.610
على سبيل المثال هنا. إذا كان لدي

03:22.610 --> 03:27.610
وظيفة ، فقد يكون هناك رقمان ، أ وب.

03:27.670 --> 03:29.750
ثم يمكننا إضافة متغير هناك بنتيجة

03:29.750 --> 03:32.280
var ، دعنا نقول ، وقمنا بتعيين النتيجة

03:32.280 --> 03:34.730
= a + b ثم ، ثم نعيد النتيجة ، وبالطبع

03:34.730 --> 03:36.230
، كان بإمكاننا كتابة

03:36.230 --> 03:38.430
هذا بطريقة أقصر ولكن أريد أن أوضح

03:38.430 --> 03:40.570
ماذا فار يفعل.

03:40.570 --> 03:41.860
وسيكون هذا على ما يرام.

03:41.860 --> 03:43.012
وستكون النتيجة متاحة

03:43.012 --> 03:44.188
فقط داخل هذه الدالة.

03:44.188 --> 03:47.723
إذا حاولت التحكم في نتيجة السجل هنا ،

03:47.723 --> 03:49.470
فستفشل لأنها متاحة

03:49.470 --> 03:52.190
فقط في نطاق هذه الوظيفة.

03:52.190 --> 03:53.970
إذا قمت بتعريفه خارج var harbor ،

03:53.970 --> 03:56.610
فكل شيء يعمل لأنه متاح الآن على مستوى العالم ، لذلك

03:56.610 --> 03:58.180
يمكنني الوصول إليه هنا.

03:58.180 --> 04:00.220
وأيضًا ، بالطريقة التي يعمل بها JavaScript

04:00.220 --> 04:03.580
، يمكنك الوصول إلى المتغيرات على مستوى أعلى.

04:03.580 --> 04:05.210
لذلك ، داخل دالة يمكنك

04:05.210 --> 04:08.260
العمل مع نطاق متغيرات لهذه الوظيفة ، ولكن

04:08.260 --> 04:11.100
جميع المتغيرات لها نطاق أعلى ، مثل النطاق

04:11.100 --> 04:12.563
العام هنا.

04:13.580 --> 04:14.980
إذن ، هذا فار.

04:14.980 --> 04:19.180
الآن دعونا ، السلوك هو نفسه بشكل عام.

04:19.180 --> 04:21.580
هذا يعمل وهذا يعمل.

04:21.580 --> 04:23.800
لذلك فهو نفس الشيء بالنسبة لـ let.

04:23.800 --> 04:27.180
لكن الاختلاف المهم هو أنه بالنسبة لـ

04:27.180 --> 04:30.860
var ، لديك حقًا نطاق عالمي ووظائف فقط.

04:30.860 --> 04:32.460
ماذا عن عبارات لو؟

04:32.460 --> 04:36.720
إذا تحققنا من العمر> 20 هنا ، ثم أنشأنا متغيرًا ، isOld

04:36.720 --> 04:38.889
، وقمنا بتعيين هذا على صحيح

04:38.889 --> 04:41.190
، ثم إذا كان سجل وحدة التحكم

04:41.190 --> 04:44.500
قديمًا هنا ، فسنحصل على خطأ في TypeScript

04:44.500 --> 04:46.270
، لكننا في الواقع لن نحصل

04:46.270 --> 04:50.090
على واحد في JavaScript.

04:50.090 --> 04:53.620
هذا الرمز هنا ، إذا حصلت عليه فقط لترى أنه يعمل ، وانتقل إلى

04:53.620 --> 04:56.280
أدوات مطور JavaScript هناك في وحدة التحكم

04:56.280 --> 04:57.190
، وقمنا بلصقه هناك

04:57.190 --> 04:59.120
واضغط على Enter ، سترى أنه تتم طباعة

04:59.120 --> 05:00.970
"true" هنا.

05:01.830 --> 05:02.960
وبالفعل ، إذا حاولت الوصول

05:02.960 --> 05:05.040
إلى isOld ، فإنك تصبح صحيحًا.

05:05.040 --> 05:08.380
إذن ، هذا متغير قديم ، مسجل عالميًا ، وليس

05:08.380 --> 05:10.530
داخل تعليمة if فقط.

05:10.530 --> 05:11.700
لأنه مع var ، لا تعرف

05:11.700 --> 05:13.080
JavaScript أي نطاقات

05:13.080 --> 05:15.860
أخرى غير الدوال والعامة.

05:15.860 --> 05:17.400
وهذا يتغير مع Let.

05:17.400 --> 05:19.690
الآن ، كما قلت ، تشتكي TypeScript ، لأن هذا

05:19.690 --> 05:21.600
ليس رمزًا جيدًا للكتابة ، ولكن من الناحية

05:21.600 --> 05:23.170
الفنية ، فإنه سيعمل.

05:23.170 --> 05:25.100
مع اسمحوا ، أن يتغير.

05:25.100 --> 05:26.350
الآن مع let ، هذا

05:26.350 --> 05:29.880
متاح حقًا فقط داخل هذه الأقواس المتعرجة.

05:29.880 --> 05:32.300
لأن let و const قدم مفهومًا جديدًا

05:32.300 --> 05:33.540
يسمى نطاق الكتلة

05:33.540 --> 05:36.550
، مما يعني أن المتغير أو الثابت متاح دائمًا

05:36.550 --> 05:40.420
في الكتلة التي تحددها أو في أي كتل سفلية.

05:40.420 --> 05:43.060
والكتلة هي في الأساس عبارة عن قصاصة

05:43.060 --> 05:44.900
محاطة بأقواس معقوفة ، كما

05:44.900 --> 05:46.710
هو الحال في عبارة if ، أو

05:46.710 --> 05:48.760
في حلقة for ، أو في دالة ، أو حتى

05:48.760 --> 05:50.590
، هذا ممكن ، إذا أضفت أقواسًا

05:50.590 --> 05:52.670
متعرجة كهذه.

05:52.670 --> 05:54.230
أي متغير معرف هنا سيكون

05:54.230 --> 05:56.760
متاحًا فقط في تلك الكتلة.

05:56.760 --> 05:57.700
وهذا شيء جيد

05:57.700 --> 06:00.000
لأنه يجبرك على كتابة كود أنظف

06:00.000 --> 06:02.470
وتجنب مثل هذه المواقف.

06:02.470 --> 06:03.640
لذلك فقط لتقديم دليل

06:03.640 --> 06:05.530
على وجود اختلاف في المتصفح ، إذا قمت

06:05.530 --> 06:09.750
بنسخ هذا الرمز باستخدام let ، وقمت بإعادة تحميل صفحتي هنا ، والآن أدخلت هذا

06:09.750 --> 06:14.706
هنا ، ستلاحظ أن الخطأ isOld غير معرّف.

06:14.706 --> 06:14.706
لم نحصل على خطأ من قبل.

06:14.706 --> 06:19.706
في الواقع ، إذا حاولت إخراج isOld ، فسأحصل على هذا الخطأ مرة أخرى.

06:20.070 --> 06:21.060
إذن هذا هو الاختلاف.

06:21.060 --> 06:23.370
وبالتالي ، فإن Let and const أفضل ، ليس

06:23.370 --> 06:25.740
فقط لأننا نحصل على هذه الميزة الثابتة

06:25.740 --> 06:29.150
، ولكن أيضًا لأننا مجبرون على كتابة كود أكثر وضوحًا.

06:29.150 --> 06:30.130
لذا اسمحوا لي أن أعلق على

06:30.130 --> 06:31.230
هذا لجعله يعمل مرة أخرى.
