WEBVTT

00:02.120 --> 00:02.953
Instrutor: Então esse

00:02.953 --> 00:04.960
foi um importante primeiro conjunto de opções.

00:04.960 --> 00:07.520
Agora vamos mergulhar nestas opções rígidas porque

00:07.520 --> 00:09.860
elas são bastante interessantes.

00:09.860 --> 00:12.150
Há esta opção rigorosa e verdadeira, e na verdade

00:12.150 --> 00:13.590
o que isto faz é permitir todas

00:13.590 --> 00:16.750
as opções rigorosas de verificação de tipo, definindo isto

00:16.750 --> 00:18.830
de forma tão eficaz como se você tivesse

00:18.830 --> 00:22.110
definido todas estas opções separadamente.

00:22.110 --> 00:24.830
Assim, você pode definir todas estas opções uma

00:24.830 --> 00:27.110
a uma, ou apenas definir esta opção.

00:27.110 --> 00:29.510
Naturalmente, você quer definir as opções individuais

00:29.510 --> 00:33.020
se você quiser ter algumas opções definidas como falsas.

00:33.020 --> 00:34.790
Porque, de outra forma, todos eles estão prontos para a verdade.

00:34.790 --> 00:36.520
Se você quiser que todas elas se tornem verdadeiras,

00:36.520 --> 00:39.290
é claro que usar apenas esta opção é muito mais curto.

00:39.290 --> 00:41.360
Mas o que fazem estas opções?

00:41.360 --> 00:43.213
Vamos começar com noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny é uma opção bastante interessante que nos ajuda

00:47.410 --> 00:49.180
a escrever melhor o código.

00:49.180 --> 00:51.370
Vamos ao nosso arquivo analítico aqui,

00:51.370 --> 00:53.963
e lá vamos adicionar uma função, sendAnalytics,

00:55.270 --> 00:58.070
que recebe uma opção de dados, digamos, e lá podemos

00:58.070 --> 01:01.010
enviar isto para um servidor, mas aqui estou apenas

01:01.010 --> 01:03.430
registrando o console.

01:03.430 --> 01:07.500
Então eu chamo de sendAnalytics com os dados, então

01:07.500 --> 01:08.920
com a string.

01:08.920 --> 01:11.080
Agora, como você vê minha IDE já reclama aqui

01:11.080 --> 01:13.160
e o TypeScript do compilador também, porque

01:13.160 --> 01:14.960
os dois, é claro, estão conectados

01:14.960 --> 01:17.040
se eu tentar compilar isto.

01:17.040 --> 01:20.070
Os dados dos parâmetros têm implicitamente um qualquer tipo.

01:20.070 --> 01:21.350
Portanto, isto parece estar

01:21.350 --> 01:23.940
relacionado a esta opção noImplicitAny.

01:23.940 --> 01:27.150
De fato, se eu definir isto como falso, então se eu definir todas

01:27.150 --> 01:29.300
as opções rígidas como verdadeiras, mas

01:29.300 --> 01:31.521
eu definir esta opção como falsa, o que eu posso

01:31.521 --> 01:33.810
fazer, então este erro desaparece.

01:33.810 --> 01:37.140
Tanto na IDE como quando compilamos o código.

01:37.140 --> 01:38.730
Então, o que esta opção faz?

01:38.730 --> 01:41.440
Ele garante, e vou comentar novamente para

01:41.440 --> 01:44.210
ativá-lo novamente por causa da estrita verdade,

01:44.210 --> 01:47.050
ele garante que temos que ser claros sobre nossos

01:47.050 --> 01:49.410
parâmetros, sobre os valores com os quais

01:49.410 --> 01:53.020
estamos trabalhando em nosso código.

01:53.020 --> 01:56.600
Aqui não damos nenhuma informação sobre o tipo

01:56.600 --> 01:59.930
de dados que vamos obter como parâmetro.

01:59.930 --> 02:01.320
E nós deveríamos.

02:01.320 --> 02:03.800
Se o TypeScript é capaz de inferir isto, então é claro,

02:03.800 --> 02:05.360
tudo bem, mas aqui como o TypeScript

02:05.360 --> 02:08.770
seria capaz de inferir a partir desta linha, bem tenha em mente que esta

02:08.770 --> 02:11.470
função é declarada primeiro antes deste arquivo ser

02:11.470 --> 02:12.950
executado.

02:12.950 --> 02:15.080
Portanto, no momento em que a função é criada,

02:15.080 --> 02:18.380
não há nenhuma chance de saber o que vai acabar lá dentro.

02:18.380 --> 02:20.100
Portanto, aqui podemos corrigir este

02:20.100 --> 02:22.570
erro simplesmente declarando o tipo e sendo claros

02:22.570 --> 02:24.253
sobre qual tipo usamos lá.

02:25.100 --> 02:29.530
Agora, observe que se você tiver uma variável registrada, como você

02:29.530 --> 02:32.650
definiu aqui, você não receberá um erro sobre esta

02:32.650 --> 02:34.720
declaração, mesmo que ela também

02:34.720 --> 02:37.670
receba um tipo padrão de qualquer uma.

02:37.670 --> 02:39.250
Para as variáveis, tudo bem.

02:39.250 --> 02:40.910
Para os parâmetros não está tudo bem.

02:40.910 --> 02:42.480
Por que as variáveis são aceitáveis?

02:42.480 --> 02:44.370
Porque o que o TypeScript faz para as variáveis,

02:44.370 --> 02:45.940
o que é possível para as variáveis,

02:45.940 --> 02:47.040
o que não é possível aqui porque

02:47.040 --> 02:48.880
a função é criada primeiro.

02:48.880 --> 02:52.490
Aqui o TypeScript é capaz de rastrear os valores que você atribui.

02:52.490 --> 02:54.650
Veja, ok, eu me loguei

02:54.650 --> 02:56.720
aqui assim, agora

02:56.720 --> 02:58.573
eu o ponho em prática,

02:59.430 --> 03:08.030
portanto, depois disso, se eu console logado aqui, é um booleano.

03:08.030 --> 03:10.300
Portanto, o TypeScript é aqui capaz de entender

03:10.300 --> 03:11.893
o fluxo de seu código e, portanto,

03:11.893 --> 03:14.320
você não precisa ser preciso em relação a um tipo

03:14.320 --> 03:15.430
aqui.

03:15.430 --> 03:18.020
Naturalmente, você quer ser preciso se quiser evitar

03:18.020 --> 03:20.310
que você possa atribuir livremente o novo valor,

03:20.310 --> 03:22.940
o que você pode fazer aqui porque é de qualquer tipo.

03:22.940 --> 03:25.700
Portanto, você ainda quer atribuir um tipo para evitar isso, mas

03:25.700 --> 03:27.680
o TypeScript é pelo menos capaz de descobrir

03:27.680 --> 03:29.490
se o código que você está chamando funciona

03:29.490 --> 03:31.410
com o tipo que ele contém atualmente.

03:31.410 --> 03:32.410
Não é o caso aqui porque

03:32.410 --> 03:35.360
ali a função é definida antes de chamá-la, e portanto,

03:35.360 --> 03:37.800
o TypeScript não teria mudado ao saber se o

03:37.800 --> 03:39.570
que você passa ali pode ser usado

03:39.570 --> 03:41.393
dentro da função.

03:43.280 --> 03:46.020
strictNullChecks nunca é uma opção importante.

03:46.020 --> 03:48.520
Na verdade, está relacionado com nossa seleção de botões

03:48.520 --> 03:49.410
que temos aqui.

03:49.410 --> 03:51.820
Lembre-se que tive que acrescentar aqui este ponto de exclamação

03:51.820 --> 03:52.670
para que funcionasse.

03:52.670 --> 03:54.380
Caso contrário, eu receberia um erro.

03:54.380 --> 03:56.220
Agora também podemos nos livrar desse

03:56.220 --> 03:58.430
erro sem acrescentar o ponto de exclamação,

03:58.430 --> 04:02.090
colocando os controles rígidos da NullChecks em falso.

04:02.090 --> 04:04.200
Portanto, vamos fazer isso aqui e vamos salvar isso.

04:04.200 --> 04:07.860
E, como você vê, este erro agora desapareceu aqui.

04:07.860 --> 04:10.120
E eu posso compilar todos os arquivos.

04:10.120 --> 04:12.340
Agora, o que fazem os controles rigorososNullChecks?

04:12.340 --> 04:16.160
Eles dizem que o TypeScript é muito, muito rigoroso em relação

04:16.160 --> 04:19.410
à forma como você acessa e trabalha com valores que

04:19.410 --> 04:22.530
podem potencialmente conter um valor nulo.

04:22.530 --> 04:24.850
E o botão aqui pode ser nulo.

04:24.850 --> 04:29.210
Não está sempre apontando para um elemento de botão.

04:29.210 --> 04:31.390
Nem sempre aponta para tal elemento porque

04:31.390 --> 04:34.220
mesmo que você tenha tal seletor aqui, um botão pode

04:34.220 --> 04:36.900
simplesmente não existir na página em que este

04:36.900 --> 04:38.490
script é executado.

04:38.490 --> 04:40.840
E, portanto, o TypeScript não pode dizer

04:40.840 --> 04:43.790
porque não está mergulhando em seu arquivo html e olhando

04:43.790 --> 04:44.900
para isso.

04:44.900 --> 04:48.240
Não se sabe se isto terá sucesso ou não.

04:48.240 --> 04:53.130
E se isto não retornar um ponteiro e um nó nulo, então ele retornará

04:53.130 --> 04:56.650
nulo, bem indefinido para ser preciso, mas isso

04:56.650 --> 04:59.090
é tratado aqui igualmente.

04:59.090 --> 05:01.610
Portanto, esse botão pode conter valor nulo e, portanto,

05:01.610 --> 05:03.530
este código pode falhar.

05:03.530 --> 05:06.610
De fato, se eu comentar este botão aqui, se eu agora compilar

05:06.610 --> 05:08.480
tudo o que ele funciona porque eu desabilitei

05:08.480 --> 05:10.733
as verificações nulas.

05:12.000 --> 05:14.100
Mas eu, portanto, agora tenho um erro de tempo

05:14.100 --> 05:16.210
de execução porque não posso chamar o ouvinte

05:16.210 --> 05:18.230
do evento, addEventListener, em null.

05:18.230 --> 05:20.970
E eu fiquei nulo aqui porque não tenho botão.

05:20.970 --> 05:23.110
Agora, este é um erro que poderíamos evitar

05:23.110 --> 05:26.760
ao estabelecer rigorosos controlesNullChecks como verdadeiros.

05:26.760 --> 05:30.340
E isso é automaticamente definido se tivermos definido rigorosamente para a verdade.

05:30.340 --> 05:34.450
Onde o TypeScript antecipa que isso possa acontecer

05:34.450 --> 05:38.600
e, portanto, nos força a trabalhar em torno disso.

05:38.600 --> 05:40.640
Agora, uma alternativa barata

05:40.640 --> 05:42.820
é este ponto de exclamação aqui.

05:42.820 --> 05:46.020
Isto diz ao TypeScript que você, o desenvolvedor,

05:46.020 --> 05:48.360
sabe que este botão existe, ou

05:48.360 --> 05:53.360
que esta operação renderá um valor não-nulo.

05:53.710 --> 05:55.830
Agora talvez você saiba, você certamente

05:55.830 --> 05:58.990
sabe que está trabalhando no código HTML e que há

05:58.990 --> 06:00.430
um botão aqui, que este

06:00.430 --> 06:03.310
seletor aqui vai funcionar.

06:03.310 --> 06:05.610
Portanto, seria bom usar o ponto de exclamação

06:05.610 --> 06:06.623
neste cenário.

06:07.600 --> 06:09.040
Se você tem outro cenário

06:09.040 --> 06:11.120
em que não sabe ao certo se funciona e

06:11.120 --> 06:13.050
apenas espera que funcione, então

06:13.050 --> 06:14.170
talvez seja melhor

06:14.170 --> 06:18.210
simplesmente embrulhar o código que pode falhar em uma verificação,

06:18.210 --> 06:21.570
que também estará lá no momento da execução, é claro.

06:21.570 --> 06:24.960
Você poderia simplesmente verificar se o botão é verdadeiro aqui,

06:24.960 --> 06:27.510
o que não será se ele for nulo ou indefinido.

06:27.510 --> 06:30.060
E transfira esse código para este se verificar aqui.

06:30.060 --> 06:32.470
Agora, mesmo sem o ponto de exclamação,

06:32.470 --> 06:35.810
no modo strictNullChecks não recebemos nenhum erro

06:35.810 --> 06:37.600
porque o TypeScript entende

06:37.600 --> 06:39.750
que este código está dentro desta

06:39.750 --> 06:41.991
declaração se e que esta declaração

06:41.991 --> 06:46.310
se certifica que o botão não é nulo e que isto não irá falhar.

06:46.310 --> 06:49.310
Portanto, esta pode ser realmente a alternativa mais limpa.

06:49.310 --> 06:51.060
Entretanto, é claro, para salvar

06:51.060 --> 06:54.350
código, se você souber com certeza que algo existe, usar o

06:54.350 --> 06:56.550
ponto de exclamação é mais curto e uma opção

06:56.550 --> 06:58.320
absolutamente fina.

06:58.320 --> 07:00.450
Aqui eu disse as duas coisas para que vejamos ambas,

07:00.450 --> 07:02.450
é claro que você só precisa de uma das duas coisas,

07:02.450 --> 07:04.520
ou a verificação, ou o ponto de exclamação.

07:04.520 --> 07:07.680
strictFunctionFunctionTypes aqui é um pouco

07:07.680 --> 07:12.010
mais adiantado para pegar alguma caixa de nicho que você pode

07:12.010 --> 07:14.830
não ter em muitas aplicações.

07:14.830 --> 07:17.340
Está relacionado a, bem, tipos de funções que você possa

07:17.340 --> 07:18.380
estar configurando.

07:18.380 --> 07:20.650
Portanto, não tipos dentro de funções,

07:20.650 --> 07:23.690
mas se você definir como uma função deve ser em relação

07:23.690 --> 07:26.220
a seus parâmetros e valor de retorno, e criar

07:26.220 --> 07:27.840
tal tipo de função que você aprendeu

07:27.840 --> 07:29.990
no módulo básico, então lá você pode introduzir

07:29.990 --> 07:32.650
caixa se você trabalha com classes e herança,

07:32.650 --> 07:39.683
que ainda não aprendemos, que ainda não usamos, e portanto, por enquanto, vamos ignorar isto.

07:40.578 --> 07:43.630
strictBindCallApply, que pode ser útil se você

07:43.630 --> 07:46.840
trabalhar com bind, call, ou se candidatar.

07:46.840 --> 07:49.680
Para isso, vamos ver rapidamente um exemplo.

07:49.680 --> 07:52.040
Aqui temos nosso botão e nossa função ali.

07:52.040 --> 07:57.040
Agora vamos dizer que esta seria uma função, que definimos aqui com a palavra-chave

07:57.780 --> 08:01.100
função, ou como uma função de erro.

08:01.100 --> 08:03.650
Não importa, vou usar a palavra-chave função aqui.

08:04.731 --> 08:09.731
clickHandler, e ali eu consolo. log clicado.

08:11.960 --> 08:13.810
E agora aqui apontamos para clickHandler,

08:13.810 --> 08:15.560
e por alguma razão, queremos ter certeza

08:15.560 --> 08:17.670
de que quando isto for executado, passamos

08:17.670 --> 08:19.330
em certos argumentos ou definimos

08:19.330 --> 08:22.780
esta palavra-chave ali para um certo valor.

08:22.780 --> 08:26.480
Agora digamos aqui que esperamos um argumento de mensagem,

08:26.480 --> 08:28.110
que deveria ser um fio.

08:28.110 --> 08:32.110
E queremos produzir isto também aqui.

08:32.110 --> 08:34.400
Agora como o clickHandler é passado para adicionarEventListener

08:34.400 --> 08:36.010
dessa forma para que o navegador

08:36.010 --> 08:39.080
basicamente execute isto para nós, se quisermos pré-configurar

08:39.080 --> 08:41.070
os argumentos que serão passados, podemos

08:41.070 --> 08:43.570
usar bind.

08:43.570 --> 08:47.000
E vincular, como primeiro argumento, leva o que queremos

08:47.000 --> 08:49.320
vincular a esta palavra-chave.

08:49.320 --> 08:51.650
E aqui poderíamos dizer que isso não importa

08:51.650 --> 08:53.580
para nós porque não estamos usando isso

08:53.580 --> 08:55.930
na função, por isso o amarramos a nulo.

08:55.930 --> 08:57.700
Agora você vê aqui eu recebo um erro.

08:57.700 --> 09:00.610
Eu recebo um erro que pode ser evitado

09:00.610 --> 09:04.613
se eu definir strictBindCallApply como falso.

09:07.040 --> 09:08.680
Agora você vê que o erro desapareceu.

09:08.680 --> 09:10.501
O que esta opção faz, portanto?

09:10.501 --> 09:14.180
Basicamente, ele verifica a função que você está chamando

09:14.180 --> 09:16.020
de bind, call, ou aplicando.

09:16.020 --> 09:20.080
E ele verifica se o que você está instalando aqui faz sentido.

09:20.080 --> 09:23.440
E aqui TypeScript vê que queremos um argumento, queremos

09:23.440 --> 09:25.450
o parâmetro em clickHandler.

09:25.450 --> 09:28.260
Com bind, porém, não estamos configurando isso.

09:28.260 --> 09:30.600
E, portanto, aqui recebemos um erro.

09:30.600 --> 09:32.180
Se eu voltar a colocar isto de volta

09:32.180 --> 09:34.000
à verdade, ou apenas comentei porque, é

09:34.000 --> 09:36.230
claro, é colocado de volta à verdade por padrão ao

09:36.230 --> 09:37.870
colocar o erro de volta à verdade, nós,

09:37.870 --> 09:39.790
portanto, obtemos o erro novamente.

09:39.790 --> 09:42.350
Agora, se não esperarmos um argumento aqui, você vê

09:42.350 --> 09:44.750
que o erro desapareceria ali se apenas removêssemos

09:44.750 --> 09:46.200
a mensagem, porque o TypeScript

09:46.200 --> 09:48.140
entende nosso código e vê que você não está

09:48.140 --> 09:50.660
passando nenhum argumento para esse método ou para

09:50.660 --> 09:52.580
essa função, porque ele não aceita nenhum,

09:52.580 --> 09:54.760
então tudo bem.

09:54.760 --> 09:57.420
Mas, é claro, aqui queremos um para que tenhamos um erro.

09:57.420 --> 10:00.880
A solução é fornecer este segundo argumento aqui, que

10:00.880 --> 10:04.350
é o primeiro argumento que você quer passar adiante.

10:04.350 --> 10:06.290
Agora o TypeScript é realmente inteligente aqui.

10:06.290 --> 10:08.120
E, por exemplo, se eu passar em um número,

10:08.120 --> 10:10.310
ele ainda reclamaria porque entende que eu preciso

10:10.310 --> 10:11.610
de um fio aqui.

10:12.500 --> 10:15.960
No entanto, se eu passar em uma seqüência correta, como se

10:15.960 --> 10:17.350
você fosse bem-vindo,

10:17.350 --> 10:19.070
então ele não reclama mais porque

10:19.070 --> 10:21.210
não entende isto e vê que isto está correspondendo

10:21.210 --> 10:24.840
à minha definição de função aqui.

10:24.840 --> 10:27.370
Portanto, este é um comportamento muito útil que garante

10:27.370 --> 10:30.260
que você não use acidentalmente a ligação, chamada ou aplicação

10:30.260 --> 10:32.743
de uma forma que não funcione com seu código.

10:33.930 --> 10:36.600
Agora, a iniciativa de propriedade estrita torna-se importante uma

10:36.600 --> 10:37.810
vez que trabalhamos com aulas.

10:37.810 --> 10:39.213
Por enquanto, podemos ignorá-lo.

10:39.213 --> 10:41.890
noImplicidade Isso também não importa agora.

10:41.890 --> 10:43.650
Ele tem que fazer esta palavra-chave

10:43.650 --> 10:45.980
e TypeScript basicamente tenta avisá-lo

10:45.980 --> 10:48.240
se você usar esta palavra-chave em um lugar

10:48.240 --> 10:51.020
onde não é claro a que ela se refere.

10:51.020 --> 10:53.210
E sempreStrict simplesmente controla que

10:53.210 --> 10:55.560
os arquivos JavaScript que são gerados estão

10:55.560 --> 10:58.663
usando o modo estrito para que isto seja adicionado.

10:59.710 --> 11:02.383
Com isso, cobrimos todas essas opções rigorosas.
