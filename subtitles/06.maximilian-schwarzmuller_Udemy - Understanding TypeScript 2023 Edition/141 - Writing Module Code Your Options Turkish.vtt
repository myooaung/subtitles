WEBVTT

00:02.160 --> 00:03.740
Eğitmen: Peki kodu birden fazla dosyaya

00:03.740 --> 00:06.440
bölmek istediğimizde seçeneklerimiz nelerdir?

00:06.440 --> 00:10.720
Şimdi aslında bunun için üç seçeneğimiz var.

00:10.720 --> 00:12.680
İlk seçenek basitçe birden fazla kod

00:12.680 --> 00:16.110
dosyası, birden fazla TypeScript dosyası yazmak olabilir.

00:16.110 --> 00:17.460
TypeScript daha sonra kaynak

00:17.460 --> 00:20.710
dizindeki tüm kod dosyalarını otomatik olarak derleyecek ve

00:20.710 --> 00:23.020
derlenen Java script dosyalarını manuel olarak

00:23.020 --> 00:25.000
HTML'ye aktaracaktır.

00:25.000 --> 00:26.220
Bu bir seçenektir ve bazı

00:26.220 --> 00:28.970
projeler için bu doğru olabilir, ancak tüm bu içe

00:28.970 --> 00:31.780
aktarmaları manuel olarak yönetmeniz gerekir,

00:31.780 --> 00:34.600
bu da zahmetli ve hataya açık olabilir ve belirli TypeScript

00:34.600 --> 00:36.980
özelliklerini kullanırken, A dosyasında

00:36.980 --> 00:39.560
bir tür tanımlanmışsa ve bunu B dosyasında kullanıyorsanız

00:39.560 --> 00:46.030
ve TypeScript bu bağlantıyı bilmiyorsa, tür desteğinden de vazgeçersiniz.

00:46.030 --> 00:47.480
Bu yüzden daha büyük projeler

00:47.480 --> 00:49.290
için pek de iyi bir seçenek değil.

00:49.290 --> 00:52.500
Bunun yerine daha büyük projeler için iki ana seçeneğimiz var.

00:52.500 --> 00:55.470
Örneğin isim alanlarımız ve dosya paketlememiz var.

00:55.470 --> 00:59.410
Şimdi isim alanları bir TypeScript özelliğidir, bir sözdizimi

00:59.410 --> 01:03.430
özelliğidir, bu özelliği kullanmak için kodunuza özel kod ekleyebilirsiniz

01:03.430 --> 01:04.840
ve temel olarak kodu bir

01:04.840 --> 01:08.650
isim alanının altında gruplandırmanıza ve ardından isim alanlarını

01:08.650 --> 01:12.730
diğer dosyalara aktarmanıza olanak tanır.

01:12.730 --> 01:16.020
Böylece örneğin her dosya için bir isim alanınız olabilir.

01:16.020 --> 01:18.790
Başka bir dosyayı başka bir dosyaya içe aktarın

01:18.790 --> 01:21.930
ve içe aktarılan dosyadan başka bir dosyada bulunan

01:21.930 --> 01:24.650
bu ad alanına dokunun ve bunun tam olarak anlaşılmaması

01:24.650 --> 01:25.970
durumunda bunu uygulamada

01:25.970 --> 01:28.030
göreceğiz.

01:28.030 --> 01:30.020
TypeScript yalnızca bunu desteklemekle

01:30.020 --> 01:34.130
kalmaz, aynı zamanda dosyaları tek bir dosyada bir araya getirir, böylece

01:34.130 --> 01:37.230
sonuçta derlenen birden fazla dosyaya kod yazarsınız,

01:37.230 --> 01:39.560
ancak bunlar daha sonra birbirlerine

01:39.560 --> 01:42.750
içe aktarılır, böylece yönetecek daha az içe aktarımınız

01:42.750 --> 01:46.950
olur ve bir HTML dosyasındaki farklı içe aktarımları manuel olarak yönetmeniz

01:46.950 --> 01:50.030
gerekmez.

01:50.030 --> 01:52.180
Şimdi isim alanlarına bir alternatif

01:52.180 --> 01:55.750
ve tartışmasız daha önemli ve modern bir alternatif, ES6 modülleri

01:55.750 --> 02:00.750
olarak da bilinen ES6 Imports/Exports kullanmaktır, çünkü TypeScript'ten tamamen

02:01.870 --> 02:06.480
bağımsız olarak, modern Java script'in bu sorun için de bir çözümü olduğu ortaya

02:06.480 --> 02:13.140
çıkmıştır, çünkü bu sorunu sadece TypeScript projelerinde değil, herhangi bir büyük Java script projesinde

02:13.140 --> 02:15.850
yaşarsınız.

02:15.850 --> 02:18.200
Modern Java betiği, hangi dosyanın hangi

02:18.200 --> 02:21.150
dosyaya bağlı olduğunu belirtmenize olanak tanıyan

02:21.150 --> 02:23.110
içe ve dışa aktarma deyimlerini destekler

02:23.110 --> 02:24.910
ve ardından tüm bu ayrı dosyalara

02:24.910 --> 02:27.920
sahip olursunuz, ancak içe aktarmaları manuel olarak

02:27.920 --> 02:30.560
yönetmeniz gerekmez, bunun yerine tarayıcılar,

02:30.560 --> 02:33.770
modern tarayıcılar bunu yapar.

02:33.770 --> 02:36.020
Bunu anlarlar ve başka bir dosyanın bağlı olduğu

02:36.020 --> 02:38.800
dosyaları otomatik olarak indirip çalıştırırlar.

02:38.800 --> 02:41.370
Bunun için içe/dışa aktarma sözdizimini kullanırsınız

02:41.370 --> 02:43.470
ve TypeScript de bunu destekler.

02:43.470 --> 02:46.870
Bu nedenle TypeScript'i herhangi bir sorun olmadan kullanabilirsiniz.

02:46.870 --> 02:48.700
Her dosya için derleme yaparsınız ancak

02:48.700 --> 02:50.810
yalnızca bir komut dosyası içe aktarma işlemine

02:50.810 --> 02:53.680
ihtiyacınız vardır çünkü az önce de belirttiğim gibi modern

02:53.680 --> 02:56.350
tarayıcılar diğer tüm bağımlılıkları nasıl getireceklerini

02:56.350 --> 02:58.570
bilirler ve bunu buradaki çekirdek bölümünde

02:58.570 --> 03:00.710
de göreceksiniz.

03:00.710 --> 03:02.320
Şimdi burada önemli bir not, teknik

03:02.320 --> 03:03.830
olarak hala birden fazla dosyaya

03:03.830 --> 03:06.110
sahip olacağız ve içe aktarmaları manuel olarak

03:06.110 --> 03:09.140
yönetmek zorunda kalmayacak olsak da, komut dosyası içe aktarmaları,

03:09.140 --> 03:11.550
bundan dolayı hala bazı dezavantajlarımız var

03:11.550 --> 03:15.130
çünkü bağlı olduğunuz her dosyanın ayrı ayrı indirilmesi gerekiyor,

03:15.130 --> 03:16.900
bu da daha fazla HTTP isteği vb. anlamına

03:16.900 --> 03:19.460
geliyor ve bu nedenle geliştirme sırasında birden

03:19.460 --> 03:22.210
fazla dosya üzerinde çalışmak için dosyaları bir araya

03:22.210 --> 03:24.860
getirebilir, ancak üretim için tek bir dosya gönderebilirsiniz,

03:24.860 --> 03:33.700
ancak bunun için üçüncü taraf araçlara ihtiyacınız var, örneğin Webpack ve bunun nasıl çalıştığını size göstereceğim, ancak Webpack ve TypeScript'e ve neden kullandığımıza

03:33.700 --> 03:39.500
ve nasıl kullandığımıza bakacağımız ayrı bir bölümde.

03:39.500 --> 03:41.100
Şimdilik bu iki yaklaşımı

03:41.100 --> 03:43.900
temel haliyle kullanalım ve kodumuzu birden

03:43.900 --> 03:45.870
fazla dosyaya bölerek nasıl

03:45.870 --> 03:48.853
geliştirebileceğimizi görelim.
