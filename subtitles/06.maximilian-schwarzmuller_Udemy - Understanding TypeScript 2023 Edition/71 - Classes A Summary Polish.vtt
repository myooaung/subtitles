WEBVTT

00:02.140 --> 00:04.200
-: Teraz to już wszystko dla klas.

00:04.200 --> 00:06.180
Dowiedzieliśmy się o samych klasach.

00:06.180 --> 00:08.260
Poznaliśmy ich właściwości,

00:08.260 --> 00:09.850
modyfikatory osi, private

00:09.850 --> 00:12.110
dla osi wewnętrznych, protected

00:12.110 --> 00:15.990
dla osi wewnętrznych również w klasach dziedziczonych

00:15.990 --> 00:19.560
oraz public dla osi zewsząd.

00:19.560 --> 00:21.610
Poznaliśmy również metody, które możemy dodać.

00:21.610 --> 00:23.520
O metodach i właściwościach statycznych.

00:23.520 --> 00:25.520
O metodach abstrakcyjnych i klasach

00:25.520 --> 00:28.280
abstrakcyjnych, co jest ważne, gdy mówimy

00:28.280 --> 00:31.350
o innym ważnym pojęciu - dziedziczeniu, z którego

00:31.350 --> 00:33.490
możemy korzystać.

00:33.490 --> 00:36.360
Tutaj dziedziczymy z 'Department' za pomocą słowa kluczowego

00:36.360 --> 00:37.660
'extends'.

00:37.660 --> 00:40.440
Dzięki temu możemy współdzielić funkcjonalności,

00:40.440 --> 00:41.830
właściwości i metody,

00:41.830 --> 00:45.100
z klasy 'Department' z tą dziedziczącą klasą i dodawać

00:45.100 --> 00:47.162
własne funkcjonalności lub nadpisywać

00:47.162 --> 00:50.300
istniejące.

00:50.300 --> 00:52.560
Albo dlatego, że musimy nadpisać jak w przypadku

00:52.560 --> 00:55.620
'describe', który jest metodą abstrakcyjną.

00:55.620 --> 00:58.710
Albo dlatego, że chcemy nadpisać, jak w przypadku

00:58.710 --> 01:01.640
'addEmployee' tutaj w dziale księgowości.

01:01.640 --> 01:04.290
To nie jest abstrakcyjna metoda w klasie bazowej,

01:04.290 --> 01:07.540
ale oczywiście nadal możemy ją nadpisać, jeśli chcemy.

01:07.540 --> 01:10.370
Dowiedzieliśmy się również o wzorcu singleton i "prywatnych

01:10.370 --> 01:14.180
konstruktorach", które również mogą być czasem przydatne.

01:14.180 --> 01:17.290
A potem dla ogólnego, masz teraz nadzieję, że masz dobre pojęcie

01:17.290 --> 01:20.290
o klasach i co możesz z nimi zrobić w TypeScript.

01:20.290 --> 01:22.760
Ogólnie rzecz biorąc, oczywiście, musiałbyś

01:22.760 --> 01:26.030
wiedzieć, co to są klasy i obiekty, a także trochę, czym są prototypy

01:26.030 --> 01:29.690
w Vanilla JavaScript, ponieważ to generalnie nie jest coś wprowadzonego

01:29.690 --> 01:31.870
przez TypeScript, ale oczywiście coś,

01:31.870 --> 01:34.600
z czym TypeScript jest związany, ponieważ TypeScript

01:34.600 --> 01:37.800
opiera się na tych domyślnych funkcjach JavaScript i dodaje

01:37.800 --> 01:41.663
własną magię na wierzchu tych funkcji.
