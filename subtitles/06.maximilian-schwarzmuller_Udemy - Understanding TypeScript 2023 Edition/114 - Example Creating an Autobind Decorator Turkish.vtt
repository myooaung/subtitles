WEBVTT

00:02.270 --> 00:03.613
Eğitmen: Metot Dekoratörlerinde

00:03.613 --> 00:05.080
bir şey döndürebiliriz ve bu şey,

00:05.080 --> 00:06.820
metodu değiştirmemize veya metodun

00:06.820 --> 00:08.920
yapılandırmasını değiştirmemize olanak tanıyan

00:08.920 --> 00:11.000
bir tanımlayıcı olmalıdır.

00:11.000 --> 00:12.582
Bu da burada yapmak istediğim bir şey.

00:12.582 --> 00:15.985
Bundan önce, öncelikle index HTML dosyasına gideceğim

00:15.985 --> 00:18.540
ve oraya bir düğme ekleyelim.

00:18.540 --> 00:21.272
Uygulamamdaki çok basit bir düğme

00:21.272 --> 00:24.720
olan Bana Tıkla. ts dosyasında, şimdi bu düğmeye

00:24.720 --> 00:26.104
tıkladığımızda bir nesne

00:26.104 --> 00:29.800
üzerinde bir yöntem çalıştırdığımızdan emin olmak istiyorum.

00:29.800 --> 00:32.120
Bunun için buraya yeni bir sınıf ekleyeceğim,

00:32.120 --> 00:34.600
her şeyden önce yazıcı.

00:34.600 --> 00:38.140
Ve orada sadece bu işi yapan bir mesaj özelliğine sahip

00:38.140 --> 00:41.690
olmak istiyorum, yani orada depolanan basit bir dize

00:41.690 --> 00:45.980
ve sonra orada sadece bu mesajı konsolda günlüğe kaydettiğim bir

00:45.980 --> 00:49.630
mesajı göster yöntemine sahip olmak istiyorum.

00:49.630 --> 00:51.770
Elbette bu basit bir kukla sınıf ama yine

00:51.770 --> 00:53.430
de size göstermek istediğim şeyi

00:53.430 --> 00:54.860
göstermemi sağlıyor.

00:54.860 --> 00:56.550
Şimdi document query selector

00:56.550 --> 01:00.860
butonu ile kapı butonunu seçelim ve buna bir olay dinleyicisi

01:00.860 --> 01:02.970
ekleyelim.

01:02.970 --> 01:05.080
Şimdi, her şeyden önce, TypeScript'e bunun var

01:05.080 --> 01:07.800
olduğunu ve null olmayacağını açıkça göstermek için buraya

01:07.800 --> 01:08.806
ünlem işaretimi ekleyeceğim

01:08.806 --> 01:10.990
ve ardından bir olay dinleyicisi, bir tıklama

01:10.990 --> 01:14.210
olayı dinleyicisi ekleyeceğim ve ardından bu show message yöntemini

01:14.210 --> 01:16.450
burada tetiklemek istiyorum.

01:16.450 --> 01:20.350
Bunun için, burada bunun gibi yeni bir yazıcı oluşturacağım ve ardından burada

01:20.350 --> 01:23.120
p'yi göstereceğim. showMessage, işte benim

01:23.120 --> 01:24.323
fikrim bu.

01:25.300 --> 01:27.103
Şimdi, bunu kaydedersek

01:28.153 --> 01:31.440
ve sayfamıza geri dönüp bu düğmeye tıklarsak,

01:31.440 --> 01:33.320
burada tanımsız oluruz,

01:33.320 --> 01:36.050
ancak mesajımız gösterilmez.

01:36.050 --> 01:38.860
Bunun nedeni, bir olay dinleyicisi ile, çalıştırılması

01:38.860 --> 01:41.820
gereken bir işlevi işaret edersek, bu işlevin içindeki

01:41.820 --> 01:44.240
this anahtar sözcüğünün, yalnızca p'yi çağırdığımızda

01:44.240 --> 01:52.193
sahip olduğu bağlama veya referansa sahip olmayacağıdır.

01:52.193 --> 01:52.193
ShowMessage,

01:53.144 --> 01:56.450
bu durumda, bu yazıcıya atıfta bulunacaktır.

01:56.450 --> 02:00.200
Hayır, burada bir olay dinleyicisi kullandığımız senaryoda,

02:00.200 --> 02:02.860
bu olayın hedefine atıfta bulunacaktır,

02:02.860 --> 02:05.777
çünkü sonunda addEventListener bunu olayın

02:05.777 --> 02:07.693
hedefine yürütülecek olan fonksiyona

02:07.693 --> 02:09.560
bağlar.

02:09.560 --> 02:11.360
Ve tabii ki bunu istemiyorum.

02:11.360 --> 02:12.570
Şimdi, burada yaygın

02:12.570 --> 02:14.170
bir geçici çözüm, bind yöntemini

02:14.170 --> 02:19.170
kullanmak ve showMessage'ı p'ye bağlamak veya showMessage'da bunu p'ye bağlamak

02:19.480 --> 02:22.860
olabilir, böylece bu çalıştırıldığında, bu addEventListener'ın

02:22.860 --> 02:25.420
başvurmasını istediği şeye başvurmaz, bunun

02:25.420 --> 02:28.040
yerine showMessage'ın içindeki bu p'ye, buradaki

02:28.040 --> 02:31.770
bu nesneye tekrar başvurur.

02:31.770 --> 02:33.300
Ve eğer şimdi burayı yeniden yüklersek

02:33.300 --> 02:36.270
ve bunu tekrar temizlersek, şimdi bunun çalıştığını görürüz!

02:36.270 --> 02:39.240
Şimdi, bunların hepsi varsayılan JavaScript'tir.

02:39.240 --> 02:40.790
Şimdi, bu yönteme ekleyebileceğimiz

02:40.790 --> 02:42.191
bir dekoratör oluşturacağız;

02:42.191 --> 02:47.191
bu dekoratör, nerede çağırırsak çağıralım, her çağrıldığında bunu otomatik olarak

02:47.460 --> 02:50.130
çevreleyen sınıfa, yani bu yöntemin ait olduğu

02:50.130 --> 02:53.440
nesneye bağlayacaktır.

02:53.440 --> 02:55.974
Bunun için yazıcının üzerine yeni bir fonksiyon ekleyeceğim

02:55.974 --> 02:58.800
ve buna autobind adını vereceğim çünkü sonuçta yaptığımız

02:58.800 --> 03:01.580
şey bu ve bu benim dekoratör autobind'im olacak.

03:01.580 --> 03:03.890
Elbette diğer adlandırmalarımızla uyumlu olması için

03:03.890 --> 03:05.960
büyük harfle başlayan bir karakter de kullanılabilir,

03:05.960 --> 03:07.930
ancak yine de bir dekoratör işlevi tanımlarken

03:07.930 --> 03:10.122
ikisinden birini kullanabilirsiniz.

03:10.122 --> 03:13.300
Şimdi buradaki zaten benim dekoratörüm olacak ve

03:13.300 --> 03:15.269
orada birkaç argümanımız var.

03:15.269 --> 03:17.940
Öğreneceğiniz gibi hedefi yakaladık ve bu herhangi bir şey.

03:17.940 --> 03:20.085
Ya üzerinde çalıştığımız nesnenin

03:20.085 --> 03:22.533
prototipidir ya da bunu statik bir yönteme

03:22.533 --> 03:25.730
ekliyor olsaydık yapıcı işlevidir, ancak burada

03:25.730 --> 03:27.340
prototip olacaktır çünkü

03:27.340 --> 03:30.200
bunu bir örnek yönteme ekleyeceğiz.

03:30.200 --> 03:32.520
O zaman yöntem adı veya özellik adı var ama bunu bir

03:32.520 --> 03:33.690
yönteme eklediğimiz için

03:33.690 --> 03:36.330
bu yöntem adını çağırabiliriz, daha mantıklı.

03:36.330 --> 03:38.600
Bu bir dize ya da sembol ise ya da elbette bir

03:38.600 --> 03:40.229
sayı da olabilir, ancak burada

03:40.229 --> 03:43.250
genellikle dizelerle çalışacağımızı biliyoruz, bu nedenle

03:43.250 --> 03:45.061
bu dekoratörü nereye eklemeyi planladığınıza

03:45.061 --> 03:48.470
ve ne kadar genel olması gerektiğine bağlı olarak burada sadece

03:48.470 --> 03:50.170
dize ile de gidebiliriz ve son olarak,

03:50.170 --> 03:52.484
burada uyarı olarak PropertyDescriptor türünde

03:52.484 --> 03:56.340
olacak tanımlayıcıyı alıyoruz.

03:56.340 --> 03:57.650
Şimdi, daha önce metot

03:57.650 --> 03:59.655
dekoratörümüz olan Log3 üzerinde

03:59.655 --> 04:03.540
kullandığımız bu üç argümana sahibiz.

04:03.540 --> 04:05.970
Şimdi, autobind'de, this anahtar sözcüğünü

04:05.970 --> 04:08.994
her zaman bu yöntemin ait olduğu nesneye ayarladığımızdan

04:08.994 --> 04:11.973
emin olmak istiyorum.

04:11.973 --> 04:14.240
Şimdi bunu nasıl başarabiliriz?

04:14.240 --> 04:15.797
Öncelikle, çağrılması gereken

04:15.797 --> 04:17.880
yönteme erişmem gerekiyor.

04:17.880 --> 04:20.661
Ve bu, tanımlayıcımızın yardımıyla mümkün olacaktır, çünkü

04:20.661 --> 04:22.013
uygulamayı yeniden yüklerseniz

04:22.013 --> 04:25.180
ve aşağıda böyle bir yöntem tanımlayıcısına bakarsanız, tanımlayıcıda

04:25.180 --> 04:27.330
value özelliğini aldığımızı ve bunun işlevi işaret

04:27.330 --> 04:29.460
ettiğini görürsünüz.

04:29.460 --> 04:32.240
Bu özelliğin değeri bir fonksiyon olduğu için, bu durumda,

04:32.240 --> 04:33.930
bir yöntem sadece değer olarak bir fonksiyona

04:33.930 --> 04:35.498
sahip bir özelliktir.

04:35.498 --> 04:38.630
Dolayısıyla, değer anahtarı orijinal işlevi tutar, bu

04:38.630 --> 04:42.980
nedenle, burada, tanımlayıcıya erişerek bu şekilde çağırmak istiyorsak

04:42.980 --> 04:47.320
orijinal yöntemi çıkarabiliriz.

04:47.320 --> 04:47.320
değer.

04:47.320 --> 04:50.563
Bu bize orijinal yönteme erişim sağlayacaktır.

04:51.790 --> 04:55.450
Daha sonra, yeni bir ayarlanmış tanımlayıcı kuracağım, bu, sonunda,

04:55.450 --> 04:58.320
daha sonra geri döneceğimiz şey olacak.

04:58.320 --> 05:00.030
Şimdi bu bir nesne olacak

05:00.030 --> 05:03.620
ve özellik tanımlayıcısı türünde olacaktır.

05:03.620 --> 05:06.350
Şimdi bu nesneye, bir özellik tanımlayıcısına

05:06.350 --> 05:09.350
ekleyebileceğimiz her şeyi ekleyebiliriz.

05:09.350 --> 05:12.110
Örneğin, bunu configurable, true olarak ayarlayabilir,

05:12.110 --> 05:14.962
enumerable'ı false olarak ayarlayabilir, böylece

05:14.962 --> 05:17.130
bu yabancı döngülerde görünmez ve şimdi

05:17.130 --> 05:20.310
buraya bir getter ekleyebilir ve bu yeni.

05:20.310 --> 05:23.400
Kullanıcılar bu özelliğe erişmeye çalıştığında

05:23.400 --> 05:26.150
bazı ekstra mantıklar yürütebilmemiz için

05:27.020 --> 05:29.628
buraya bir getter, yani bir yöntem ya da bir

05:29.628 --> 05:32.260
fonksiyon tutan bir özellik ekliyorum.

05:32.260 --> 05:35.170
Böylece sadece bu özelliğin değerini, yani fonksiyonu doğrudan

05:35.170 --> 05:36.633
çalıştırmayız, ancak fonksiyonu

05:36.633 --> 05:38.888
çalıştırmadan önce devreye girip bazı ekstra

05:38.888 --> 05:40.850
işler yapabiliriz.

05:40.850 --> 05:41.913
Buradaki fikir de bu.

05:43.230 --> 05:46.290
Dolayısıyla, bu tanımlayıcıya bir değer özelliği eklemiyorum,

05:46.290 --> 05:48.660
sadece bir getter'ım var ve yine getter temelde

05:48.660 --> 05:51.540
değer döndürülmeden önce çalışan ekstra mantığa sahip

05:51.540 --> 05:54.777
bir değer özelliğine sahip olmak gibidir.

05:54.777 --> 05:59.777
Şimdi burada, burada çıkardığımız orijinal yöntemi kullanabileceğim

05:59.900 --> 06:03.450
bağlı işlevime sahip olmak istiyorum ve bind'i

06:03.450 --> 06:07.100
çağırıp bunu bağlayacağız.

06:07.100 --> 06:08.590
Ve şimdi vasiyet, tabii

06:08.590 --> 06:11.730
ki, burada neye atıfta bulunuyor?

06:11.730 --> 06:13.720
Bu getter yönteminin içinde olduğunu

06:13.720 --> 06:17.700
unutmayın, bu nedenle bu getter yöntemini tetiklemekten sorumlu olan

06:17.700 --> 06:19.510
şeye atıfta bulunacaktır.

06:19.510 --> 06:21.110
İşin püf noktası da bu,

06:21.110 --> 06:23.700
getter metodu ait olduğu somut nesne

06:23.700 --> 06:27.200
tarafından tetiklenecektir, bu nedenle getter

06:27.200 --> 06:29.190
metodunun içi her zaman getter'ı

06:29.190 --> 06:33.610
tanımladığımız nesneye atıfta bulunacaktır.

06:33.610 --> 06:36.800
Bu, addEventListener tarafından üzerine yazılmayacaktır

06:36.800 --> 06:38.965
çünkü getter, çalıştırılan fonksiyonumuz

06:38.965 --> 06:41.221
ve ait olduğu nesne ile Olay Dinleyicisi

06:41.221 --> 06:44.976
arasında ekstra bir katman gibidir.

06:44.976 --> 06:47.683
Bu nedenle, buradaki bu, yöntemi ilk olarak

06:47.683 --> 06:51.610
tanımladığımız nesneye atıfta bulunacaktır.

06:51.610 --> 06:54.660
Böylece bunu orijinal metot için güvenli bir şekilde

06:54.660 --> 06:57.495
bağlayabilir ve şimdi orijinal metodun içindeki

06:57.495 --> 07:01.170
bunun da aynı nesneye atıfta bulunmasını sağlayabiliriz.

07:01.170 --> 07:04.300
Şimdi burada bağlı fonksiyonu döndüreceğim ve bundan sonra,

07:04.300 --> 07:06.760
bu ayarlanmış tanımlayıcının dışında, ayarlanmış

07:06.760 --> 07:08.910
tanımlayıcıyı döndüreceğim.

07:08.910 --> 07:10.560
Bu, yeni bir tanımlayıcı nesnesi

07:10.560 --> 07:12.420
döndüren dekoratör işlevimizdir ve

07:12.420 --> 07:14.103
bu nedenle bu tanımlayıcı nesnesi

07:14.103 --> 07:16.960
eski tanımlayıcıyı geçersiz kılacaktır, TypeScript'in

07:16.960 --> 07:18.710
onunla yapacağı şey budur.

07:18.710 --> 07:21.500
TypeScript daha sonra eski yöntem tanımlayıcısını,

07:21.500 --> 07:23.215
yani eski yöntem yapılandırmasını,

07:23.215 --> 07:26.390
bu ekstra getter katmanını ekleyen bu yeni yapılandırmayla

07:26.390 --> 07:28.513
değiştirecektir.

07:29.460 --> 07:33.330
Şimdi, elbette burada hedef ve yöntem adıyla ilgilenmiyorum, bu yüzden

07:33.330 --> 07:37.500
hatalardan kaçınmak için bu alt çizgiyi ve buradaki alt çizgiyi iki olarak

07:37.500 --> 07:39.083
adlandıracağım.

07:40.260 --> 07:43.070
Yine, TypeScript'e bu değerlerle ilgilenmediğimi ancak

07:43.070 --> 07:45.480
bunları kabul etmem gerektiğini söylemek için.

07:45.480 --> 07:49.800
Ve şimdi burada showMessage'a otomatik bağlama ekleyelim.

07:49.800 --> 07:52.203
Burada, Autobind'e ekleyeceğim ve

07:54.050 --> 07:56.490
olay dinleyicisinde bind'i kaldırdığınızdan

07:56.490 --> 07:59.236
emin olun ve bunu kaydedin.

07:59.236 --> 08:01.450
Şimdi buna bir göz atalım, Bana Tıkla'ya

08:01.450 --> 08:04.730
tıklayalım ve Bu Çalışıyor'u görmelisiniz!

08:04.730 --> 08:06.678
Yeniden yüklersem, bu çalışıyor.

08:06.678 --> 08:09.680
Çünkü bu artık doğru şekilde bağlanmıştır.

08:09.680 --> 08:12.060
Burada fark yaratan şeyin gerçekten dekoratörümüz

08:12.060 --> 08:13.520
olduğunu doğrulamak için,

08:13.520 --> 08:15.868
getter ve dekoratörümdeki bağlamayı kaldırırsam

08:15.868 --> 08:17.850
ve bunu kaydedersem, şimdi yeniden

08:17.850 --> 08:20.920
yüklendiğinde ve bana tıkladığımızda yine tanımsız

08:20.920 --> 08:23.626
olduğunu görürsünüz.

08:23.626 --> 08:26.320
Dolayısıyla, showMessage'ı nasıl çağırırsanız

08:26.320 --> 08:27.389
çağırın bunun her zaman

08:27.389 --> 08:30.430
doğru şekilde bağlanmasını sağlayan, burada işini

08:30.430 --> 08:33.260
yapan bu ekstra getter katmanıdır.

08:33.260 --> 08:35.380
Bunu doğrudan nesne üzerinde bu şekilde

08:35.380 --> 08:38.350
çağırırsak çalışır, burada bir olay dinleyicisi ile

08:38.350 --> 08:40.760
bu şekilde çağırırsak da çalışır.

08:40.760 --> 08:42.260
Yani bunun burada çalıştığını

08:42.260 --> 08:45.070
görüyorsunuz, sonuçta bu showMessage çağrısından geliyor

08:45.070 --> 08:48.266
ve sonra düğmeye tıkladığımda da çalıştığını görüyorsunuz.

08:48.266 --> 08:49.918
Bu, oldukça şaşırtıcı bir işlevsellik

08:49.918 --> 08:52.060
oluşturmak ve sizi her yerde manuel olarak

08:52.060 --> 08:55.190
bind çağırma zahmetinden kurtarmak için dekoratörleri nasıl

08:55.190 --> 08:58.718
kullanabileceğinize dair güzel bir örnektir.

08:58.718 --> 09:01.883
Bunun yerine, sadece bu şekilde bağlarsınız.
