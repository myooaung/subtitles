WEBVTT

00:02.140 --> 00:08.100
-：ですから､ 関数のパラメータと関数の戻り値には型を使うことができます｡

00:08.100 --> 00:10.420
さて､ さらに次の段階として､

00:10.420 --> 00:14.820
関数型そのものもあるとしたらどうでしょう｡

00:14.820 --> 00:17.170
ここで､ 私が言いたいことをはっきりさせておきましょう｡ 

00:17.170 --> 00:19.333
例えば､ combinevaluesという変数があり､

00:21.360 --> 00:24.200
この変数はデフォルトでanyという型を持っているとしよう｡ さて､ お分かりのように､ 「any」はそれほど便利なものではありません｡ 

00:24.200 --> 00:29.617
最終的にやりたいことは､ 「combinevalues」を「add」と同じにすることです｡

00:29.617 --> 00:29.617
そこで､

00:29.617 --> 00:32.600
この'add'関数へのポインタを'combinevalues'に格納して､

00:32.600 --> 00:41.580
最終的には､ コンソールログ､ 値の結合､ 'combinevalues'を8と8を持つ関数として実行できるようにしたいのです｡

00:41.580 --> 00:44.520
これを保存して､ コンパイルした後に実行すると､

00:44.520 --> 00:47.480
このファイルをコンパイルして､ リロードすると､

00:47.480 --> 00:52.130
ここで16が表示されます｡

00:52.130 --> 00:55.840
これは通常のJavaScriptのコードなので､ 動作することが期待されます｡

00:55.840 --> 01:00.880
関数へのポインタを数値変数に格納し､

01:00.880 --> 01:07.300
この変数を関数として実行することができます｡

01:07.300 --> 01:08.580
つまり､ その変数を通して､ その関数を実行することができるのです｡ 

01:08.580 --> 01:09.910
このスニペットでTypeScriptの観点から問題なのは､

01:09.910 --> 01:15.900
'combinevalues'が何であるかということだ｡

01:15.900 --> 01:20.670
つまり､ ここで「combinevalues」に数値を設定すると､ それ以降はもちろんコンパイルできない｡

01:20.670 --> 01:27.910
なぜなら､ TypeScriptはこれが不要であることや､ 問題を引き起こす可能性があることを検知する見込みがないためだ｡

01:27.910 --> 01:30.543
しかし､ 実行時には､ 明らかに 'combinevalues'

01:30.543 --> 01:34.230
を関数として実行しようとしたため､ 実際には数値であるにもかかわらず､

01:34.230 --> 01:36.220
エラーが発生するのです｡

01:36.220 --> 01:39.090
さて､ これを回避したいのですが､ そのためには 'combinevalues'

01:39.090 --> 01:42.080
が関数を保持することを明確にする必要があります｡

01:42.080 --> 01:44.870
さて､ その第一歩として､

01:44.870 --> 01:48.650
ここで型を関数に設定します｡

01:48.650 --> 01:50.550
FunctionはTypeScriptが最終的に提供する型であり､

01:50.550 --> 01:57.940
ここに格納するものはすべて関数でなければならないことを明確にしているのである｡

01:57.940 --> 02:00.870
したがって､ ここでは､ 5が数字で関数ではないので､

02:00.870 --> 02:02.230
エラーになります｡

02:02.230 --> 02:05.350
そして､ これをコメントアウトすれば､ コンパイルできます｡ そうでなければ､

02:05.350 --> 02:06.660
コンパイル時にエラーが発生します｡

02:06.660 --> 02:09.670
そして､ 再び期待通りに実行されるようになりました｡

02:09.670 --> 02:12.860
これは良いことですが､ 完璧ではありません｡ なぜなら､ これは関数であるべきだと言っていますが､

02:12.860 --> 02:15.380
例えばここでは 'combinevalues'

02:15.380 --> 02:21.460
を 'printResult' と等しく設定することもできるからです｡

02:21.460 --> 02:27.150
そしてもちろん､ 'printResult'は関数なのでTypeScriptは文句を言わないだろうが､

02:27.150 --> 02:29.600
もちろん引数を2つ取る関数ではない｡

02:29.600 --> 02:32.620
だから､ もう一度これをコンパイルしても､ TypeScriptは文句を言わない｡ 

02:32.620 --> 02:34.800
しかし､ リロードすると､ こことResult 8で未定義と表示されます｡ 

02:34.800 --> 02:38.720
だから､ 間違った関数を格納したために､

02:38.720 --> 02:42.470
欲しい結果が得られないのです｡

02:42.470 --> 02:47.350
繰り返しになりますが､ TypeScriptがそのことを教えてくれると嬉しいですね｡

02:47.350 --> 02:49.980
TypeScriptは､ 私たちがTypeScriptに言ったことは､

02:49.980 --> 02:51.340
そこに関数を格納したいということであり､

02:51.340 --> 02:54.410
これは明らかに事実だからです｡

02:54.410 --> 03:00.550
そこで､ 'combinevalues'に格納したい関数がどのようなものであるかについて､

03:00.550 --> 03:03.810
より正確に説明できるとよいでしょう｡ そして､ そこで活躍するのがファンクションタイプです｡ 

03:03.810 --> 03:11.900
関数型は､ その関数のパラメータや戻り値に関する関数を記述する型である｡

03:11.900 --> 03:15.690
関数型は､ JavaScriptでおなじみのこの矢印関数記法か､

03:15.690 --> 03:19.870
少なくともそれに近い記法で作成されます｡

03:19.870 --> 03:25.530
ここで中括弧を付けないのは､ ここで矢印関数を作っているのではなく､

03:25.530 --> 03:28.890
関数型を作成しているからです｡

03:28.890 --> 03:35.450
この矢印の右側で､ 最終的にここに格納できるようにしたい関数の戻り値の型を指定します｡

03:35.450 --> 03:37.180
それは番号のはずです｡ 

03:37.180 --> 03:44.120
つまり､ 'combinevalues'はパラメータを取らずに数値を返す任意の関数を受け付けるということです｡

03:44.120 --> 03:47.200
もちろん､ それは完全に私たちの望むところではありません｡ 

03:47.200 --> 03:54.180
combinevalues'が関数を受け取るか､ 2つの数値を受け取って数値を返す関数を格納できるようにしたいのです｡

03:54.180 --> 04:01.400
そのために､ この関数型にパラメータを追加することができます｡

04:01.400 --> 04:02.400
上からパラメータ名を合わせる必要はなく､

04:02.400 --> 04:05.040
型だけ合わせればいいんです｡

04:05.040 --> 04:06.020
つまり､ aは数値型であるべきで､

04:06.020 --> 04:09.060
bは数値型であるべきなのです｡

04:09.060 --> 04:10.510
そして今､ 私たちがTypeScriptに言っていることは､

04:10.510 --> 04:18.322
'combinevalues'は2つのパラメータを取り､ それぞれのパラメータが数字で､

04:18.322 --> 04:22.930
関数全体が数字を返すような関数を受け入れるべきだということである｡

04:22.930 --> 04:24.350
そして､ 'add'はこの型定義を完全に満たす関数なので､

04:24.350 --> 04:29.690
TypeScriptは'add'をコンバイン値として格納しても文句を言わない｡

04:29.690 --> 04:36.890
しかし､ 'printResult'については文句を言います｡

04:36.890 --> 04:44.360
'printResult'は引数1つの関数で､

04:44.360 --> 04:52.310
引数は数字､ 何も返さない､ と書いてあります｡

04:52.310 --> 04:55.810
ですから､ ここでミスマッチがあり､ これをコンパイルしようとすると､

04:55.810 --> 05:00.480
もちろんコンパイラでエラーが発生します｡ この行を削除することで､

05:00.480 --> 05:06.270
この問題を解決することができます｡

05:06.270 --> 05:07.110
これで､ エラーなく再コンパイルできるようになりました｡ 

05:07.110 --> 05:10.930
そして今､ これは期待通りに動いています｡ 

05:10.930 --> 05:12.060
そこで､ 関数の種類を記述することで､

05:12.060 --> 05:17.413
具体的にどのような関数をどこかで使いたいかを記述することができます｡

05:18.290 --> 05:20.887
パラメータに期待される値､ コールバックのある関数を作成する場合､

05:20.887 --> 05:25.420
あるいは今回のように変数を指定する場合などです｡
