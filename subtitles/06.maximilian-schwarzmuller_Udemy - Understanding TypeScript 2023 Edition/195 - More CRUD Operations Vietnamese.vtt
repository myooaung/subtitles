WEBVTT

00:02.150 --> 00:03.930
Người hướng dẫn: Vì vậy, chúng tôi đã thêm yêu cầu

00:03.930 --> 00:06.120
POST đầu tiên của mình, chúng tôi có khả năng tạo TODO.

00:06.120 --> 00:07.250
Bây giờ chúng tôi có nhiều tuyến đường hơn.

00:07.250 --> 00:10.170
Chúng tôi cũng có một lộ trình để phục vụ tất cả TODOS mà chúng tôi đã tạo.

00:10.170 --> 00:11.750
Bây giờ xin lưu ý rằng, TODOS của bạn

00:11.750 --> 00:14.160
sẽ đặt lại mỗi khi bạn thay đổi và lưu mã của mình vì điều

00:14.160 --> 00:16.630
đó sẽ khởi động lại máy chủ của bạn và điều đó sẽ làm mất

00:16.630 --> 00:18.920
mọi thứ được lưu trữ trong bộ nhớ và chúng tôi chỉ

00:18.920 --> 00:21.330
quản lý TODOS của chúng tôi trong bộ nhớ.

00:21.330 --> 00:23.560
Đó chỉ đơn giản là thứ chúng tôi có ở đây trong ứng

00:23.560 --> 00:24.930
dụng giả, trong một ứng dụng

00:24.930 --> 00:28.200
thực, tất nhiên bạn sẽ lưu trữ thứ này trong cơ sở dữ liệu thực, tìm nạp

00:28.200 --> 00:30.280
nó từ đó, v.v. và do đó, nó sẽ tồn tại.

00:30.280 --> 00:35.060
Tuy nhiên, ở đây, chúng ta có thể tạo một hàm mới, getTodos và đây

00:35.060 --> 00:38.030
sẽ là một RequestHandler ở đây, vì vậy bạn

00:38.030 --> 00:39.740
không phải đặt các loại

00:39.740 --> 00:42.330
trên tất cả các tham số riêng lẻ.

00:42.330 --> 00:46.120
Và sau đó, tôi chỉ muốn trả về một phản hồi trong đó tôi trả

00:46.120 --> 00:49.560
lại một số dữ liệu JSON mà tôi có các công việc cần làm

00:49.560 --> 00:52.420
của mình và ở đó, tôi chỉ muốn tiếp cận với mảng

00:52.420 --> 00:54.330
TODOs của mình và gửi lại cho

00:54.330 --> 00:56.530
khách hàng, và thế là xong .

00:56.530 --> 00:57.810
Tất nhiên, bạn có thể điều

00:57.810 --> 00:59.640
chỉnh cái này, có thể bạn muốn có một

00:59.640 --> 01:03.120
logic khác, có thể bạn muốn sắp xếp TODOS trước hoặc bất cứ thứ gì tương

01:03.120 --> 01:06.690
tự nhưng đây ở dạng đơn giản nhất đã là tất cả những gì chúng ta cần ở đây,

01:06.690 --> 01:10.530
nó trả về TODOS của chúng ta, vì vậy một chức năng rất đơn giản .

01:10.530 --> 01:13.240
Trong các tuyến đường TODOS, bây giờ chúng ta chỉ cần kết nối điều này.

01:13.240 --> 01:17.680
Vì vậy, hãy nhập getTodos từ bộ điều khiển của chúng ta và

01:17.680 --> 01:20.640
kết nối nó ở đây với tuyến đường này.

01:20.640 --> 01:23.430
Và với điều đó, nếu bây giờ chúng ta lưu cái này, chúng

01:23.430 --> 01:25.250
ta có thể thấy nó hoạt động rồi.

01:25.250 --> 01:29.860
Nếu chúng ta quay lại và tạo một yêu cầu mới, một yêu cầu

01:29.860 --> 01:34.860
GET, tới http://localhost:3000/todos/ và gửi yêu cầu này,

01:39.400 --> 01:41.410
chúng ta sẽ nhận lại một mảng

01:41.410 --> 01:44.400
trống, tại sao lại như vậy?

01:44.400 --> 01:46.750
Chà, tôi đã nói rằng TODO sẽ bị xóa bất cứ khi nào chúng

01:46.750 --> 01:48.010
ta thay đổi mã và do đó máy chủ

01:48.010 --> 01:49.750
sẽ khởi động lại, vì vậy chúng ta nên tạo

01:49.750 --> 01:51.470
TODO mới ngay bây giờ mà không cần khởi

01:51.470 --> 01:54.110
động lại máy chủ trong khoảng thời gian này.

01:54.110 --> 01:57.360
Và nếu chúng tôi đã tạo TODO đó và bây giờ chúng

01:57.360 --> 02:01.770
tôi nhận được TODO của mình, chúng tôi sẽ thấy TODO đã tạo đó

02:01.770 --> 02:04.380
với ID, sê-ri 9811, v.v., ở đây.

02:04.380 --> 02:05.960
Vì vậy, điều đó đã làm việc.

02:05.960 --> 02:08.980
Bây giờ vì chúng ta đang ở trên đó, chúng ta cũng hãy làm việc

02:08.980 --> 02:10.590
trên bản vá và xóa và tất nhiên,

02:10.590 --> 02:12.680
hãy tự mình đưa ra một số logic ở đó.

02:12.680 --> 02:14.970
Cuối cùng, bây giờ bạn đã có tất cả các nền tảng

02:14.970 --> 02:16.130
cần thiết cho việc đó.

02:16.130 --> 02:18.480
Tất nhiên bây giờ chúng ta cũng sẽ làm điều đó cùng nhau.

02:19.390 --> 02:21.570
Vì vậy, bây giờ theo yêu cầu vá lỗi,

02:21.570 --> 02:24.350
hãy thêm một chức năng điều khiển mới.

02:24.350 --> 02:29.350
export const updateTodo, thuộc loại RequestHandler và phải

02:30.660 --> 02:34.680
giữ một hàm ở định dạng này mà chúng ta đã biết.

02:34.680 --> 02:37.310
Và trong đó, mục tiêu là trích

02:37.310 --> 02:40.630
xuất dữ liệu về TODO mới từ yêu cầu đến,

02:40.630 --> 02:44.140
sau đó cập nhật TODO với dữ liệu mới đó.

02:44.140 --> 02:47.240
Bây giờ, xin lưu ý rằng là một phần trong lộ trình của chúng tôi ở đây,

02:47.240 --> 02:48.900
chúng tôi có một phân đoạn động.

02:48.900 --> 02:51.140
Chúng tôi có phân khúc id này.

02:51.140 --> 02:54.610
Vì vậy, đó là thứ mà chúng tôi có thể trích xuất từ URL,

02:54.610 --> 02:58.750
một giá trị cụ thể cho phân đoạn động này có thể được trích xuất.

02:58.750 --> 03:02.147
Vì vậy, ở đây theo yêu cầu đến của chúng tôi, bạn có thể lấy todoId,

03:03.172 --> 03:07.987
từ thông số yêu cầu của chúng tôi. Tôi,. id, vì đó là tên tôi chọn ở đây.

03:07.987 --> 03:11.660
Nếu bạn chọn một tên khác ở đây, bạn phải sử dụng

03:11.660 --> 03:13.060
một tên khác ở đó.

03:13.060 --> 03:15.810
Bây giờ, chúng tôi không nhận được các loại hỗ trợ ở đây, phải không?

03:15.810 --> 03:18.410
Params thuộc loại bất kỳ.

03:18.410 --> 03:20.450
Bây giờ vì các loại có thể phân

03:20.450 --> 03:23.400
tích Chuỗi này và hiểu nội dung trong đó.

03:23.400 --> 03:25.460
Vì vậy, để có được các loại hỗ trợ tốt

03:25.460 --> 03:28.920
hơn, chúng tôi thực sự có thể sử dụng RequestHandler ở đây

03:28.920 --> 03:32.880
là một loại chung và chúng tôi có thể thêm các dấu ngoặc nhọn và về cơ

03:32.880 --> 03:35.880
bản cho TypeScript biết những tham số nào sẽ có.

03:35.880 --> 03:37.800
Chúng tôi chỉ cần đặt đối tượng này thành một

03:37.800 --> 03:39.300
đối tượng và giờ đây chúng tôi có bản

03:39.300 --> 03:42.180
đồ giá trị chính của tất cả các bậc cha mẹ mà chúng tôi có trong URL.

03:42.180 --> 03:43.830
Vì vậy, ví dụ, chúng ta có

03:43.830 --> 03:46.730
một tham số ID, cuối cùng chứa một Chuỗi.

03:46.730 --> 03:48.610
Đó là thứ chúng ta có thể thêm vào đây và bây

03:48.610 --> 03:50.230
giờ bạn sẽ thấy chúng ta hoàn thành tự

03:50.230 --> 03:52.560
động và TypeScript biết rằng đây sẽ là một Chuỗi.

03:52.560 --> 03:55.520
Vì vậy, tốt hơn là sử dụng loại chung này.

03:55.520 --> 03:58.640
Bây giờ, chúng tôi có ID, chúng tôi cũng cần một cái gì

03:58.640 --> 04:01.050
đó từ nội dung yêu cầu, chính xác là, chúng

04:01.050 --> 04:03.560
tôi cần văn bản mới từ nội dung yêu cầu.

04:03.560 --> 04:08.130
Vì vậy, văn bản cập nhật có thể được truy xuất từ nội dung yêu cầu và bây giờ một

04:08.130 --> 04:11.700
lần nữa, hãy sử dụng tính năng đánh máy ở đây, để làm rõ rằng

04:11.700 --> 04:14.100
sẽ có một thuộc tính văn bản trong nội dung

04:14.100 --> 04:16.910
và thuộc tính này sẽ thuộc loại Chuỗi.

04:16.910 --> 04:19.750
Và hãy truy xuất văn bản sau đó.

04:19.750 --> 04:22.373
Và bây giờ chúng ta có thể cập nhật TODO trong mảng TODOS của chúng ta ở đó.

04:23.830 --> 04:27.720
Để làm được điều đó, hãy tìm chỉ mục của TODO mà chúng ta muốn

04:27.720 --> 04:28.710
cập nhật.

04:28.710 --> 04:30.808
todoIndex, bằng cách liên hệ với TODOS

04:30.808 --> 04:33.760
và với findIndex, chúng tôi có thể chạy một số logic

04:33.760 --> 04:36.090
trên mọi mục trong mảng TODOS.

04:36.090 --> 04:38.060
Và ở đó chúng tôi đang xem xét mọi việc cần làm

04:38.060 --> 04:40.010
và nếu id việc cần làm bằng với việc cần làm

04:40.010 --> 04:44.300
mà chúng tôi có ở đây, thì chúng tôi biết đó là VIỆC CẦN LÀM mà chúng tôi muốn cập nhật.

04:44.300 --> 04:47.140
Bây giờ nếu vì một lý do nào đó mà số đó phải trừ đi một,

04:47.140 --> 04:50.550
điều đó có nghĩa là chúng tôi đã không tìm thấy CẦN LÀM đó, vì

04:50.550 --> 04:52.610
vậy nếu về cơ bản, số đó nhỏ hơn 0, chúng

04:52.610 --> 04:56.960
tôi biết đã xảy ra sự cố và trong trường hợp này, tôi sẽ đưa ra một lỗi mới mà tôi

04:56.960 --> 04:59.630
nói , Không thể tìm thấy việc cần làm!

04:59.630 --> 05:03.633
Và điều đó sau đó sẽ kích hoạt phần mềm trung gian xử lý lỗi mặc định

05:04.760 --> 05:06.130
của chúng tôi tại đây.

05:06.130 --> 05:08.633
Bây giờ nếu chúng ta vượt qua kiểm tra if này,

05:09.870 --> 05:12.450
chúng ta đã tìm thấy TODO và sau đó chúng ta có thể

05:12.450 --> 05:15.040
chỉ cần cập nhật việc cần làm tại chỉ mục này trong

05:15.040 --> 05:18.960
mảng TODOS của chúng ta thành TODO mới, nơi chúng ta giữ id cũ.

05:18.960 --> 05:23.270
Vì vậy, nơi chúng tôi truy cập TODOS, todoIndex. id thì ta truy cập vào ID cũ và cất giữ, chứ

05:23.270 --> 05:27.030
text ở đây do mình đặt,

05:27.030 --> 05:29.490
tất nhiên là ta không gán

05:29.490 --> 05:31.713
như thế này.

05:32.870 --> 05:34.570
Nhưng văn bản ở đây mà chúng tôi đặt, bây giờ là văn bản được cập nhật.

05:34.570 --> 05:38.750
Điều này thay thế TODO ở đây và sau đó chúng

05:38.750 --> 05:41.340
tôi có thể gửi lại phản hồi,

05:41.340 --> 05:45.280
chẳng hạn như thông báo Đã cập nhật.

05:45.280 --> 05:47.053
Và sau đó, chúng tôi cũng nối

05:47.990 --> 05:51.470
thêm updatedTodo vào phản hồi gửi đi và đặt giá trị này

05:51.470 --> 05:55.090
bằng với TODOS todoIndex, hiện giữ giá trị mới.

05:55.090 --> 05:59.090
Tất nhiên, đây là điều mà chúng tôi gọi là thực hiện ở đây trong logic cập

05:59.090 --> 06:02.430
nhật của mình, một số mã giả vì chúng tôi vẫn đang làm việc với

06:02.430 --> 06:03.960
điều này trong mảng TODOS của

06:03.960 --> 06:07.150
bộ nhớ nhưng nó cho thấy cách chúng tôi sử dụng TypeScript

06:07.150 --> 06:09.060
ở đây và đó là điều chính.

06:09.060 --> 06:11.100
Vì vậy, hãy thử chức năng cập nhật này ngay bây giờ.

06:11.100 --> 06:13.620
Để làm được điều đó, chúng ta có thể quay lại Postman và

06:13.620 --> 06:16.260
cuối cùng, bây giờ tôi muốn gửi một yêu cầu PATCH, bởi vì trong

06:16.260 --> 06:19.960
các tuyến đường, chúng tôi đang chờ yêu cầu vá lỗi này đến tuyến đường này.

06:19.960 --> 06:23.460
Và nói về điều đó, trước tiên chúng ta cũng nên kết nối

06:23.460 --> 06:24.293
tuyến đường này

06:24.293 --> 06:26.490
với chức năng điều khiển này.

06:26.490 --> 06:28.850
Vì vậy, hãy chuyển đến tệp định

06:28.850 --> 06:33.420
tuyến và nhập updateTodo và thiết lập kết nối này tại đây.

06:33.420 --> 06:35.590
Và sau đó, chúng tôi có thể tiếp tục và gửi yêu cầu này.

06:35.590 --> 06:38.570
Vì vậy, bây giờ quay lại Postman, PATCH là

06:38.570 --> 06:41.890
những gì chúng tôi muốn gửi và sau đó là http://localhost:3000/todos

06:41.890 --> 06:46.320
và bây giờ là ý tưởng về TODO mà chúng tôi muốn cập nhật như một

06:46.320 --> 06:49.430
phần của URL.

06:49.430 --> 06:50.573
Bây giờ vì chúng tôi đã lưu một số thứ,

06:51.500 --> 06:54.970
vì chúng tôi đã lưu một số thay đổi, máy chủ của chúng tôi đã khởi động lại, vì vậy tất cả TODOS sẽ bị mất.

06:54.970 --> 06:58.890
Vì vậy, trước hết, hãy gửi lại yêu cầu POST

06:58.890 --> 07:01.150
đó để tạo TODO mới.

07:01.150 --> 07:02.450
Và sau đó ở đây chúng tôi có ID của TODO đó.

07:02.450 --> 07:05.170
Bây giờ chúng ta có thể thêm id này vào đây vào URL này.

07:05.170 --> 07:08.800
Và tôi cũng sẽ thêm một phần thân thuộc loại JSON, nơi chúng tôi đặt

07:08.800 --> 07:11.780
dữ liệu mới này mà chúng tôi muốn gửi đến máy chủ.

07:11.780 --> 07:15.560
Bây giờ, hãy ghi nhớ trong bộ điều khiển cập nhật của chúng

07:15.560 --> 07:18.570
tôi, tôi đang tìm một trường có tên là văn bản,

07:18.570 --> 07:20.970
trong nội dung yêu cầu đến.

07:20.970 --> 07:22.900
Vì vậy, chúng tôi nên cung cấp lại dữ liệu này ở đây

07:22.900 --> 07:24.580
trong dữ liệu JSON mà chúng tôi đang gửi.

07:24.580 --> 07:26.690
Kết thúc khóa học trong một tháng,

07:26.690 --> 07:29.440
đây có thể là văn bản mới của chúng tôi.

07:29.440 --> 07:31.520
Nếu bây giờ chúng tôi gửi cái này, chúng tôi sẽ thấy nó đã được cập nhật.

07:31.520 --> 07:35.210
Và nếu bây giờ tôi nhận được tất cả TODOS, chúng tôi cũng

07:35.210 --> 07:37.180
thấy vẫn chỉ có một TODO, nhưng

07:37.180 --> 07:39.430
đơn giản là văn bản đã thay đổi.

07:39.430 --> 07:41.623
Vì vậy, bây giờ điều này đang hoạt động, chúng tôi cũng có thể cập nhật TODO.

07:42.950 --> 07:46.470
Chúng ta cũng hãy kiểm tra điều gì sẽ xảy ra nếu tôi có một id không tồn tại,

07:46.470 --> 07:48.780
ví dụ: bằng cách xóa chữ số cuối cùng ở đây, sau

07:48.780 --> 07:50.620
đó tôi nhận được, Không thể tìm thấy

07:50.620 --> 07:53.430
việc cần làm trong phản hồi lỗi loại 500 của tôi.

07:53.430 --> 07:57.670
Vì vậy, điều này cũng có vẻ tốt.

07:57.670 --> 07:59.660
Bước cuối cùng, hãy thêm chức năng xóa TODO.

07:59.660 --> 08:03.800
Vì vậy, trong thư mục bộ điều khiển, tôi sẽ xuất một hằng số có

08:03.800 --> 08:07.210
tên là deleteTodo, thuộc loại RequestHandler.

08:07.210 --> 08:11.460
Và một lần nữa, chúng tôi nhận được yêu cầu, phản hồi của chúng tôi

08:11.460 --> 08:14.040
và sau đó là chức năng tiếp theo tại đây.

08:14.040 --> 08:17.320
Và ở đây, bây giờ tôi muốn tìm

08:17.320 --> 08:20.270
TODO và chỉ cần xóa nó.

08:20.270 --> 08:21.543
Để làm được điều đó, chúng ta thực

08:22.380 --> 08:25.090
sự có thể sao chép mã này để lấy ID của TODO và sau đó là chỉ mục.

08:25.090 --> 08:29.360
Chỉ cần loại bỏ dòng đó nơi chúng tôi trích xuất văn bản đã cập nhật vì

08:29.360 --> 08:32.210
đối với yêu cầu XÓA, sẽ không có nội dung yêu cầu,

08:32.210 --> 08:35.660
nhưng chúng tôi cần id của TODO là một phần trong lộ trình

08:35.660 --> 08:37.400
URL của chúng tôi.

08:37.400 --> 08:40.340
Sau đó, chúng tôi tìm thấy chỉ mục và khi chúng tôi có

08:40.340 --> 08:43.530
chỉ mục, chúng tôi có thể truy cập TODO, gọi phương thức

08:43.530 --> 08:47.350
mối nối và xóa việc cần làm tại todoIndex và chỉ việc cần làm đó.

08:47.350 --> 08:51.620
Và sau đó, chúng tôi có thể gửi lại phản hồi trong đó

08:51.620 --> 08:54.040
chúng tôi nói, Todo đã xóa! chỉ cần như vậy.

08:54.040 --> 08:58.490
Đây có thể là logic xóa của chúng tôi.

08:58.490 --> 08:59.380
Bây giờ là lúc để kết

08:59.380 --> 09:01.760
nối cái này, vì vậy trong thư mục route, hãy nhập deleteTodo

09:01.760 --> 09:04.560
từ TODO của bộ điều khiển và kết nối nó ở dưới đó.

09:04.560 --> 09:07.440
Và với điều này được kết nối, nếu bây giờ chúng ta lưu cái này, một

09:08.340 --> 09:09.963
lần nữa, chúng ta cần thêm TODO vì tất

09:11.120 --> 09:14.370
cả TODO sẽ bị xóa sau mỗi lần khởi động lại máy chủ, vì vậy đây là.

09:14.370 --> 09:16.720
Sao chép id đó.

09:16.720 --> 09:20.550
Và bây giờ hãy gửi yêu cầu XÓA đó.

09:20.550 --> 09:22.680
Vì vậy, một yêu cầu XÓA mới tại đây, tới

09:22.680 --> 09:24.980
http:/localhost:3000/todos/id này.

09:24.980 --> 09:27.160
Không có cơ thể cần phải được thêm vào.

09:27.160 --> 09:32.160
Nhấp vào Gửi và nó hoạt động.

09:32.800 --> 09:34.880
Nếu tôi gửi lại, chúng tôi nhận được lỗi

09:34.880 --> 09:37.180
không thể tìm thấy vì chúng tôi vừa xóa nó.

09:37.180 --> 09:39.950
Và nếu chúng ta có tất cả TODOS, thì đó sẽ là một

09:39.950 --> 09:41.570
mảng trống và cái này.

09:41.570 --> 09:42.723
Vì vậy, tính năng này hiện

09:42.723 --> 09:45.550
đang hoạt động và về cơ bản đây là một chức năng CRUD, được

09:45.550 --> 09:46.750
thêm bằng TypeScript tại

09:46.750 --> 09:49.550
đây trong ứng dụng Node và Express đơn giản này.

09:49.550 --> 09:50.990
Tất nhiên, bây giờ đó là một ứng dụng khá tầm thường

09:50.990 --> 09:52.940
ở đây, nhưng nó đã cho chúng ta thấy một số cách sử dụng TypeScript.

09:52.940 --> 09:56.060
Nó cho chúng tôi thấy rằng chúng tôi viết mã trông quen thuộc với bạn nếu

09:56.060 --> 09:58.870
bạn làm việc theo cách của mình trong phần còn lại của khóa học này

09:58.870 --> 10:00.480
và rằng chúng tôi đang sử dụng tất cả

10:00.480 --> 10:02.000
các tính năng bạn đã học ở đó.

10:02.000 --> 10:04.750
Và cũng như trong phần React, đó là tất cả những gì quan trọng.

10:04.750 --> 10:07.610
Bạn cũng có thể sử dụng bất kỳ thứ gì bạn đã học về TypeScript

10:07.610 --> 10:10.110
tại đây, vì cuối cùng, nó sẽ được biên dịch thành

10:10.110 --> 10:11.520
mã JavaScript thông thường,

10:11.520 --> 10:13.340
sau đó chúng tôi sẽ phân phát mã

10:13.340 --> 10:14.990
này.
