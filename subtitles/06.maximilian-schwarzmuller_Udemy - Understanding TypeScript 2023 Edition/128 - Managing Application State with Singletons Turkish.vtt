WEBVTT

00:02.310 --> 00:04.580
Eğitmen: Projeleri A noktasından B noktasına

00:04.580 --> 00:06.000
götürmek artık hedefimiz.

00:06.000 --> 00:09.750
Kesin olmak gerekirse, kullanıcılar yeni bir proje oluşturduklarında,

00:09.750 --> 00:11.850
tüm verileri girdiklerinde, sonunda

00:11.850 --> 00:15.790
yeni bir proje nesnesi oluşturmak istiyoruz ve daha sonra proje listesi

00:15.790 --> 00:18.830
sınıfımızda orada oluşturulan sırasız listenin bir

00:18.830 --> 00:21.990
parçası olarak çıktı alıyoruz.

00:21.990 --> 00:23.299
Amaç da bu.

00:23.299 --> 00:26.350
Elbette bunu uygulamanın önemsiz bir yolu, kullanıcı

00:26.350 --> 00:28.890
girdisinin girildiği yere gitmek ve ardından

00:28.890 --> 00:34.513
burada belgeyi kullanmak olabilir.

00:34.513 --> 00:34.513
getElementbyId,

00:36.100 --> 00:39.410
burada bu kimliğe sahip olan proje listesi sınıfımızın

00:39.410 --> 00:42.270
bir parçası olarak oluşturduğumuz sırasız listeye

00:42.270 --> 00:44.470
ulaşmak için, yani aktif-projeler

00:44.470 --> 00:52.760
listesi veya bitmiş-projeler listesi ve ardından basitçe buna ulaşın ve ona yeni bir öğe ekleyin.

00:52.760 --> 00:54.770
Ancak bu uygulamayı nasıl oluşturmak

00:54.770 --> 00:57.250
istediğime dair fikir bu değil.

00:57.250 --> 00:59.800
Bunu, yeni bir sınıf oluşturduğumuz

00:59.800 --> 01:02.530
ve ardından dom'da bir şey olduğu reaktif

01:02.530 --> 01:06.500
bir şekilde birlikte çalışan farklı sınıflarımızın olduğu

01:06.500 --> 01:08.200
nesne yönelimli bir şekilde

01:08.200 --> 01:10.550
inşa etmek istiyorum.

01:10.550 --> 01:12.730
Bir sınıfın bir yöntemini çağırdığımız ve ardından

01:12.730 --> 01:14.650
bu sınıfın bir şey yaptığı yer.

01:14.650 --> 01:16.980
Bu işlerin böyle yürümesini istiyorum.

01:16.980 --> 01:19.560
Şimdi elbette proje listesi sınıfına

01:19.560 --> 01:21.550
bir yöntem ekleyebiliriz, diyelim

01:21.550 --> 01:24.120
ki proje yöntemi ekliyorum.

01:24.120 --> 01:25.890
Bu yöntem daha sonra bir proje eklenmesi

01:25.890 --> 01:28.200
ve işlenmesi gerektiğinde çağrılmalıdır

01:28.200 --> 01:30.700
ve bunu proje girdisinin içinden çağırmanın

01:30.700 --> 01:32.940
bir yolunu bulmamız gerekir.

01:32.940 --> 01:34.820
Bunu yapmak için, proje giriş sınıfının

01:34.820 --> 01:37.940
içinden bu somut örneklerle çalışabilmek ve bu örnekler

01:37.940 --> 01:40.330
üzerindeki yöntemleri çağırabilmek için,

01:40.330 --> 01:42.810
buradaki listemize referansları proje

01:42.810 --> 01:45.290
giriş yapıcısına aktardığımızdan emin

01:45.290 --> 01:47.570
olabiliriz.

01:47.570 --> 01:50.260
Çünkü yapmamız gereken şey bu.

01:50.260 --> 01:52.050
Bu uygulanabilir bir yol olabilir,

01:52.050 --> 01:54.400
kesinlikle benimseyebileceğiniz bir yaklaşım,

01:54.400 --> 01:58.680
ancak ben daha da soyut bir yaklaşım benimsemek istiyorum.

01:58.680 --> 02:01.393
Bence daha da ilginç bir yaklaşım.

02:02.330 --> 02:06.210
Uygulamamızın durumunu yöneten bir sınıf oluşturacağım,

02:06.210 --> 02:08.110
yani projelerimizi veya

02:08.110 --> 02:11.187
uygulamada hangi durumu yönetmemiz gerekiyorsa

02:11.187 --> 02:15.530
onu yöneten ve daha sonra uygulamanın ilgilenen farklı bölümlerinde

02:15.530 --> 02:21.670
dinleyiciler kurmamızı sağlayan bir sınıf.

02:21.670 --> 02:24.540
Bu, Angular gibi çerçevelerle veya React ve Redux

02:24.540 --> 02:27.050
gibi kütüphanelerle çalıştıysanız size

02:27.050 --> 02:29.820
tanıdık gelebilecek bir modeldir.

02:29.820 --> 02:33.423
Küresel bir durum yönetimi nesnesine sahip olmanız ve sadece

02:33.423 --> 02:35.443
değişiklikleri dinlemeniz.

02:35.443 --> 02:37.480
Burada uygulamak istediğim şey de bu.

02:37.480 --> 02:39.620
Elbette bu, bunu yapmanın sadece bir yolu,

02:39.620 --> 02:41.660
ama bence oldukça ilginç bir yol, bu

02:41.660 --> 02:43.680
yüzden göstermek istiyorum.

02:43.680 --> 02:45.908
Bu yüzden uygulama ts dosyasının

02:45.908 --> 02:50.350
en üstüne bir proje durum yönetimi sınıfı ekleyeceğim.

02:50.350 --> 02:53.347
Ve basitçe projectState olarak adlandıracağım;

02:54.820 --> 02:57.210
bana mantıklı bir isim gibi geliyor.

02:57.210 --> 02:59.900
Buradaki fikir, bu sınıfta bir

02:59.900 --> 03:03.760
dizi projeyi tutan bir özelliğimiz veya alanımız,

03:03.760 --> 03:06.570
özel bir alanımız, projelerimiz

03:06.570 --> 03:08.800
olmasıdır.

03:08.800 --> 03:12.000
Şimdi bir projenin nasıl görünmesi gerektiğini de tanımlamamız gerekiyor,

03:12.000 --> 03:13.360
bunu bir sonraki adımda yapacağız,

03:13.360 --> 03:15.830
şimdilik sadece herhangi bir şeyin dizisi olduğunu söyleyeceğim,

03:15.830 --> 03:18.710
bu elbette mükemmel değil, nihai değil, ancak şimdilik bu durum

03:18.710 --> 03:22.240
yönetimi çözümüne odaklanmak istiyorum.

03:22.240 --> 03:25.653
Burada bir proje listemiz var.

03:26.530 --> 03:30.163
Şimdi amacım, buradaki proje ekle düğmesine

03:30.163 --> 03:35.163
her tıkladığımızda bu listeye bir öğe eklemek istiyorum.

03:36.940 --> 03:39.970
Bunun çalışması için, proje durumu sınıfının içine,

03:39.970 --> 03:43.460
herkese açık bir proje ekleme yöntemi ekleyeceğim.

03:43.460 --> 03:45.560
Ve orada bir dize olması gereken

03:45.560 --> 03:47.060
başlığı, bir dize olması

03:47.060 --> 03:49.390
gereken açıklamayı ve ayrıca bir sayı

03:49.390 --> 03:53.250
olması gereken proje üzerinde çalışan kişi sayısını almayı

03:53.250 --> 03:55.220
bekliyorum.

03:55.220 --> 03:58.450
Daha sonra burada, şimdilik object literal notasyonu

03:58.450 --> 04:00.950
ile yeni bir proje oluşturabiliriz.

04:00.950 --> 04:03.950
Her projeyi benzersiz bir şekilde tanımlayabilmemiz için bir kimliğe

04:03.950 --> 04:06.050
sahip olmamız gereken yerde, burada matematik

04:06.050 --> 04:12.100
kullanarak bir kimlik oluşturacağım.

04:12.100 --> 04:12.100
random(). toString.

04:12.100 --> 04:14.960
Şimdi rastgele bir sayı gerçekten benzersiz bir kimlik

04:14.960 --> 04:17.880
değildir, aynı sayıyı birden fazla kez üretebilirsiniz,

04:17.880 --> 04:19.300
ancak bu çok düşük bir olasılıktır

04:19.300 --> 04:22.570
ve buradaki demo amaçlarımız için yeterli olacaktır.

04:22.570 --> 04:25.170
Şimdi bunun yanı sıra her projenin bir başlığı olmalı

04:25.170 --> 04:28.370
ve aldığımız bu başlık tartışmasını saklayacağız.

04:28.370 --> 04:30.913
Açıklama için de aynı şekilde, açıklamayı

04:31.960 --> 04:33.830
nerede saklayacağım.

04:33.830 --> 04:37.693
Ve halkımın sayısını saklayacağım yer.

04:39.700 --> 04:43.440
Bu, şimdilik, saklamak istediğim proje.

04:43.440 --> 04:45.000
Dolayısıyla, burada bir kez oluşturduktan

04:45.000 --> 04:48.853
sonra, özel olan projects durumundaki projects dizisine ulaşabiliriz,

04:48.853 --> 04:50.320
ancak bu yöntemin olduğu sınıfın

04:50.320 --> 04:53.340
içinden elbette ona erişebiliriz.

04:53.340 --> 04:55.900
Ve orada bu yeni projeyi eklemek istiyorum

04:55.900 --> 05:00.380
ve bunun için yeni projemizi basitçe ona itebiliriz.

05:00.380 --> 05:03.350
Şimdi bununla birlikte bir proje ekleyebiliyoruz.

05:03.350 --> 05:07.027
Ancak elbette hala net olmayan birkaç sorumuz var.

05:07.027 --> 05:12.027
Kullanıcı girdisini gönderme işleyicisinin içinden topladığımız yerdeki sınıfımızın

05:12.750 --> 05:15.990
içinden proje ekle'yi nasıl çağırırız?

05:15.990 --> 05:17.940
Proje ekle nasıl denir?

05:17.940 --> 05:21.730
Ve proje listesi sınıfında değişiklik olduğunda

05:21.730 --> 05:25.690
güncellenmiş proje listesini nasıl aktaracağız?

05:25.690 --> 05:29.230
Bunlar elbette şu anda karşı karşıya olduğumuz iki mesele.

05:29.230 --> 05:31.840
Burada yapacağım bir şey,

05:31.840 --> 05:36.499
burada bir proje durumu örneği oluşturmak.

05:36.499 --> 05:39.720
Tüm dosyadan kullanabileceğimiz global bir örnek ve bunu

05:39.720 --> 05:42.760
sınıfı oluşturduktan hemen sonra yapacağım.

05:42.760 --> 05:47.050
Burada, proje durumunu şu şekilde örneklendirdiğim

05:47.050 --> 05:50.370
proje durumu sabitim var.

05:50.370 --> 05:52.400
Bu şekilde bu, dosyanın herhangi bir

05:52.400 --> 05:54.620
yerinde kullanılabilecek global bir

05:54.620 --> 05:58.000
sabittir, bu nedenle bu sınıfla konuşmak artık çok basittir,

05:58.000 --> 06:01.660
sadece bu global sabiti burada kullanmanız gerekir.

06:01.660 --> 06:04.850
Bunun bir singleton sınıf olduğunu garanti etmek için hepimizin

06:04.850 --> 06:06.430
öğrendiği bir özelliği, private

06:06.430 --> 06:09.170
constructor'ı bile kullanabiliriz.

06:09.170 --> 06:11.950
Burada özel bir kurucu oluşturabiliriz ve ardından

06:11.950 --> 06:14.300
burada proje durumu türünde, yani bu sınıfla

06:14.300 --> 06:16.670
aynı türde olan instance adlı başka bir özel

06:16.670 --> 06:18.933
özelliğimiz vardır.

06:20.640 --> 06:24.360
Daha sonra buraya bir get instance yöntemi ekliyoruz,

06:24.360 --> 06:26.390
aslında statik bir yöntem,

06:26.390 --> 06:30.050
burada bunun . örneği bir şeydir ve bunun

06:30.050 --> 06:31.020
için bunun da

06:31.020 --> 06:33.970
aslında statik bir örnek, statik bir özellik

06:33.970 --> 06:35.800
olması gerekir.

06:35.800 --> 06:37.100
Eğer bu bir şeyse, eğer öyleyse,

06:37.100 --> 06:39.550
bunu döndürürüz. instance, bu yüzden

06:39.550 --> 06:42.230
aldığımız tek örneği döndürüyoruz, aksi takdirde

06:42.230 --> 06:44.590
yeni bir tane oluşturuyoruz.

06:44.590 --> 06:45.423
Yani aksi

06:45.423 --> 06:50.423
takdirde, bu . örneği yeni proje durumuna eşit olacaktır.

06:50.450 --> 06:52.963
Ve sonra bunu iade ediyoruz. örnek.

06:54.740 --> 07:00.903
Şimdi bununla, aşağıdaki gibi get instance'ı çağırabiliriz, ProjectState.

07:00.903 --> 07:00.903
getInstance

07:02.650 --> 07:04.390
ile her zaman tam olarak aynı nesneyle

07:04.390 --> 07:06.560
çalışacağımız ve tüm uygulamada her zaman

07:06.560 --> 07:11.700
bu türden yalnızca bir nesneye sahip olacağımız garanti edilir.

07:11.700 --> 07:12.840
Buradaki fikir de bu,

07:12.840 --> 07:16.480
çünkü projemiz için yalnızca bir durum yönetimi nesnesine sahip olmak

07:16.480 --> 07:17.503
istiyorum.

07:17.503 --> 07:19.570
İşte şimdi bu singleton yapıcı

07:19.570 --> 07:21.563
ile bu proje durumu.

07:22.730 --> 07:25.890
Artık proje durum sabitimiz var.

07:25.890 --> 07:28.040
Bu nedenle kullanıcı girdisini topladığımız

07:28.040 --> 07:30.270
proje girdi sınıfına gidelim.

07:30.270 --> 07:33.950
Burada artık projectState'i çağırabiliriz. addProject ve başlığı,

07:33.950 --> 07:37.830
açıklamayı ve kişileri iletir, sonunda kullanıcı

07:37.830 --> 07:40.960
girdisini toplayarak geri alırız.

07:40.960 --> 07:43.920
Şimdi bu proje oluşturulmalıdır.

07:43.920 --> 07:47.140
Şimdi yeni bir projemiz olduğu bilgisini

07:47.140 --> 07:51.530
proje listesi sınıfımıza göndermemiz gerekiyor, çünkü

07:51.530 --> 07:53.840
ekrana bir çıktı vermekten

07:53.840 --> 07:56.500
sorumlu olan sınıf bu.

07:56.500 --> 07:59.450
Ve bunun için sonunda bir abonelik modeli oluşturmak

07:59.450 --> 08:00.350
istiyorum.

08:00.350 --> 08:03.020
Proje durumumuzun içinde dinleyicilerin

08:03.020 --> 08:05.730
bir listesini yönetiriz, yani sonuçta

08:05.730 --> 08:08.690
bir şey değiştiğinde çağrılması gereken

08:08.690 --> 08:11.600
işlevlerin bir listesi.

08:11.600 --> 08:12.433
Bunun için buraya

08:12.433 --> 08:15.830
bir özel mülk daha ekleyeceğim, dinleyiciler.

08:15.830 --> 08:18.810
Ve dinleyiciler boş bir dizi olacak ve şimdilik,

08:18.810 --> 08:22.130
bunu daha sonra daha ayrıntılı olarak belirteceğimiz

08:22.130 --> 08:25.543
herhangi bir şeyin dizisi olacak.

08:26.760 --> 08:31.382
Şimdi de burada bir dinleyici işlevi alacağım addListener

08:31.382 --> 08:35.590
yöntemine sahip olmak istiyorum, bu yüzden buranın

08:35.590 --> 08:39.150
sonunda bir işlev olmalı.

08:39.150 --> 08:41.370
Ben de dinleyicilerime şunu ekleyeceğim.

08:41.370 --> 08:43.970
Böylece dinleyici işlevini dinleyiciler

08:43.970 --> 08:46.500
dizisine itiyoruz.

08:46.500 --> 08:49.580
Şimdi bu dinleyici dizisine sahip olma fikri nedir?

08:49.580 --> 08:51.110
Bu bir fonksiyon dizisi, fonksiyon

08:51.110 --> 08:53.070
referansları değil mi?

08:53.070 --> 08:55.250
Buradaki fikir, yeni bir proje eklediğimizde

08:55.250 --> 08:57.310
olduğu gibi, bir şey değiştiğinde tüm dinleyici

08:57.310 --> 08:59.790
işlevlerini çağırmamızdır.

08:59.790 --> 09:03.050
Böylece bu dinleyicinin tüm dinleyicileri arasında,

09:03.050 --> 09:04.720
yani tüm dinleyici işlevleri

09:04.720 --> 09:07.330
arasında döngü yaparız ve bunlar işlev referansları

09:07.330 --> 09:11.593
olduğundan, bunu bir işlev olarak çalıştırabiliriz.

09:13.010 --> 09:14.630
Ve bu işleve, yönettiğimiz

09:14.630 --> 09:18.620
duruma göre ilgili olan şeyi aktarırız; bu durumda,

09:18.620 --> 09:20.130
bu sınıfta elbette

09:20.130 --> 09:23.280
projeler listemizdir.

09:23.280 --> 09:27.983
Bu, bu sınıfın sorumlu olduğu durumdur.

09:29.100 --> 09:29.933
Burada, bu projeyi

09:30.980 --> 09:33.050
iletiyorum ve orijinal diziyi değil,

09:33.050 --> 09:35.170
yalnızca bu dizinin bir kopyasını

09:35.170 --> 09:37.550
döndürmek için üzerinde slice çağrısı

09:37.550 --> 09:39.100
yapacağım.

09:39.100 --> 09:41.880
Böylece dinleyici işlevinin geldiği

09:41.880 --> 09:44.210
yerden düzenlenemez.

09:44.210 --> 09:45.760
Çünkü diziler ve nesneler

09:45.760 --> 09:48.110
Javascript'te referans değerlerdir,

09:48.110 --> 09:50.490
bu nedenle orijinal diziyi geçirirseniz,

09:50.490 --> 09:52.600
onu dışarıdan düzenleyebiliriz

09:52.600 --> 09:54.380
ve aynı zamanda, bu sınıfın içinden

09:54.380 --> 09:57.020
ona bir şey itersek, uygulamanın her yerinde

09:57.020 --> 09:59.830
zaten değişecektir, ancak bu yerler gerçekten

09:59.830 --> 10:03.540
değiştiğini fark etmeyecektir, bu nedenle orijinal referansı

10:03.540 --> 10:05.630
dolaştırırsak garip hatalara neden

10:05.630 --> 10:08.270
olabilir, bu yüzden burada yepyeni bir kopya,

10:08.270 --> 10:12.770
yepyeni bir dizi geçiriyorum.

10:12.770 --> 10:15.390
Şimdi her dinleyici işlevi yürütülüyor

10:15.390 --> 10:19.400
ve bizim kopyamızı, projelerin yepyeni kopyasını alıyor.

10:19.400 --> 10:21.380
Şimdi değişikliklerden haberdar olmak

10:21.380 --> 10:23.800
istediğimiz yerlere, bizim durumumuzda buradaki

10:23.800 --> 10:26.560
proje listesi sınıfına gitmemiz ve böyle bir dinleyici

10:26.560 --> 10:29.030
kurmamız gerekiyor.

10:29.030 --> 10:32.880
Burada, proje listesi sınıfının kurucusunda, içeriği

10:32.880 --> 10:35.546
eklemeden ve oluşturmadan önce, projectState'e

10:35.546 --> 10:38.010
ulaşacağım ve burada temel olarak bir

10:38.010 --> 10:40.110
dinleyici işlevi kaydetmek için

10:40.110 --> 10:43.720
addListener'ı çağıracağım.

10:43.720 --> 10:46.150
Şimdi bir dinleyici, dediğim gibi, bir fonksiyondur,

10:46.150 --> 10:49.100
bu yüzden addListener'a bir fonksiyon aktarmamız gerekir.

10:49.100 --> 10:51.210
Çünkü burada proje durumunda yönettiğimiz

10:51.210 --> 10:52.610
dinleyiciler, bir şey değiştiğinde

10:52.610 --> 10:54.680
eninde sonunda çağıracağımız işlevlerin

10:54.680 --> 10:57.773
bir listesidir, değil mi?

10:58.840 --> 11:01.110
Bu yüzden burada addListener

11:01.110 --> 11:04.990
fonksiyonuma bir fonksiyon aktarmam gerekecek.

11:04.990 --> 11:07.520
Burada anonim bir ok fonksiyonu geçiriyorum.

11:07.520 --> 11:10.770
Ve bu fonksiyon projectState içinden çağrıldığında

11:10.770 --> 11:14.400
projelerin bir listesini alacaktır.

11:14.400 --> 11:17.430
Böylece bir proje listesi elde ederiz ve bu fonksiyon

11:17.430 --> 11:19.160
gövdesinin içinde bu proje listesini

11:19.160 --> 11:21.560
kullanabileceğimizi biliriz.

11:21.560 --> 11:26.046
Ve burada proje listesine yepyeni bir alan ekleyeceğim, assignedProjects

11:26.046 --> 11:28.410
belki, herhangi bir dizi türünde, yani

11:28.410 --> 11:30.310
bir dizideki herhangi bir şey

11:30.310 --> 11:32.357
ve herhangi bir değer dizisi, tabii

11:32.357 --> 11:37.630
ki bunu daha sonra daha ayrıntılı olarak belirteceğim.

11:37.630 --> 11:39.890
O zaman burada bu atanmış projenin projelere

11:39.890 --> 11:41.780
eşit olduğunu söyleyebiliriz.

11:41.780 --> 11:44.240
Aldığımız projelere gelelim.

11:44.240 --> 11:45.870
Şimdi burada, örtük herhangi bir

11:45.870 --> 11:47.280
tür hatasından kurtulmak için,

11:47.280 --> 11:49.900
bunun aslında burada herhangi bir şeyin dizisi olacağı

11:49.900 --> 11:51.563
konusunda net olmalıyım.

11:52.610 --> 11:55.020
Şimdi de eyaletimde bir şeyler değiştiği

11:55.020 --> 11:57.660
için aldığım projeleri ekliyorum.

11:57.660 --> 11:59.490
Burada atanan projelerime eklemiyorum,

11:59.490 --> 12:00.530
atanan projeleri

12:00.530 --> 12:04.170
yeni projelerle geçersiz kılıyorum.

12:04.170 --> 12:08.223
Ve sonra benim fikrim tüm bu projeleri işlemek.

12:09.080 --> 12:10.883
Bunun için yeni bir yöntem

12:11.951 --> 12:15.080
ekleyebiliriz; örneğin renderPrjects.

12:15.080 --> 12:16.920
Buradan çağırmak istediğim

12:16.920 --> 12:20.063
bu renderProjects, tıpkı bunun gibi.

12:22.230 --> 12:24.120
RenderProjects'ten çıkar.

12:24.120 --> 12:27.480
Buradaki listeye ulaşacağım, doğru, içeriği oluşturduğumuzda

12:27.480 --> 12:31.290
bu kimliği atayacağız, ki bunu burada yapıyoruz.

12:31.290 --> 12:34.440
Görünüşe göre bunu renderProjects çağrıldıktan sonra yapıyoruz,

12:34.440 --> 12:36.640
ancak bunun bir fonksiyondan çıktığını ve

12:36.640 --> 12:38.470
ancak yeni projeler eklendiğinde çağrılacağını

12:38.470 --> 12:40.230
unutmayın.

12:40.230 --> 12:43.510
Yani aslında önce renderContent çalışacaktır.

12:43.510 --> 12:47.090
Bu nedenle, renderProjects'te bu ID'nin sırasız bir listeye

12:47.090 --> 12:49.370
atanmış olmasına güvenebiliriz, bu

12:49.370 --> 12:53.030
nedenle burada bunu yakalayabilir ve document kullanarak

12:53.030 --> 12:58.030
liste öğemizi alabiliriz. getElementbyId ve ardından bu somut proje

12:58.469 --> 13:00.790
listesi sınıfının türünü kullanarak

13:00.790 --> 13:03.690
bu kimlik tanımlayıcısını aktarıyorum.

13:03.690 --> 13:08.563
Ve sonra da oluşturduğumuz bu kimliğin geri kalanını kullanarak.

13:09.580 --> 13:11.130
Ve bu listeye ya da bu listede

13:11.130 --> 13:14.170
sahip olduğumuz tüm projeleri işlemek istiyorum.

13:14.170 --> 13:17.670
Bu yüzden, burada bu atanmış projelerin tüm

13:17.670 --> 13:21.060
proje kalemlerini gözden geçireceğim.

13:21.060 --> 13:23.150
Ve sonra her madde için listeye bir şey eklemek

13:23.150 --> 13:23.983
istiyorum ve bunu daha

13:23.983 --> 13:25.380
sonra geliştireceğiz.

13:25.380 --> 13:29.787
Şimdilik, liste öğemde appendChild öğesini

13:30.890 --> 13:32.480
çağıracağım.

13:32.480 --> 13:34.490
Bu arada, burada bunun boş olmayacağını açıkça

13:34.490 --> 13:36.970
belirtmek için bir ünlem işareti eklemeliyiz.

13:36.970 --> 13:41.970
Bunu bir HTML UL liste öğesine, yani sırasız bir liste öğesine de

13:42.000 --> 13:43.560
dönüştürebiliriz,

13:43.560 --> 13:45.420
çünkü öyle olacaktır.

13:45.420 --> 13:47.530
Ve sonra çocuğu buraya ekleyebiliriz

13:47.530 --> 13:49.740
ve bu yepyeni bir liste öğesi olmalıdır;

13:49.740 --> 13:51.980
böylece burada liste öğemizi document

13:51.980 --> 13:56.160
ile oluşturabiliriz. createElement LI.

13:56.160 --> 13:58.350
Ve buradaki liste öğesinde, metin içeriğini

13:58.350 --> 14:03.950
proje öğesine eşit olarak ayarlayacağım.

14:03.950 --> 14:03.950
Başlık.

14:03.950 --> 14:06.240
Her proje öğesi, proje durumunda oluşturduğumuz

14:06.240 --> 14:09.940
gibi bir proje olacaktır, bu nedenle böyle bir nesne olacaktır

14:09.940 --> 14:11.350
ve bu nedenle bir başlığı

14:11.350 --> 14:13.100
olacaktır.

14:14.210 --> 14:15.940
Şimdi bununla birlikte aşağıya

14:15.940 --> 14:18.880
inersek, şimdi buraya eklenen liste öğemiz var.

14:18.880 --> 14:20.730
Ve bununla birlikte, burada kalan

14:20.730 --> 14:22.340
düzeltmelerle neredeyse oradayız,

14:22.340 --> 14:23.740
bu alanı ayarlıyorum, ancak

14:23.740 --> 14:27.080
kurucuda ona asla referans vermiyorum.

14:27.080 --> 14:29.090
Yalnızca burada dinleyici işlevimde,

14:29.090 --> 14:31.230
ancak belirtildiği gibi, bu yapıcıda

14:31.230 --> 14:32.640
hemen çalışmaz.

14:32.640 --> 14:37.640
Burada yapacağım şey, bu atanmış projeleri başlangıçta burada boş bir diziye

14:38.970 --> 14:41.200
eşit olarak ayarlayacağım, böylece

14:41.200 --> 14:44.450
hepimiz mutlu olacağız ve bu başlatıldı.

14:44.450 --> 14:45.510
Şimdi bunu kaydedersek,

14:45.510 --> 14:47.780
hatasız derlenmesi gerekir.

14:47.780 --> 14:50.400
Ve şimdi buraya bir şey eklersek,

14:50.400 --> 14:51.993
bu işe yarar mı?

14:53.480 --> 14:56.270
Gerçekten de listelerimizde göründüğünü görüyoruz.

14:56.270 --> 14:58.270
Şu anda her iki listede de çünkü

14:58.270 --> 15:00.847
filtreleme mantığımız vb. yok.

15:00.847 --> 15:03.210
Bu daha sonra düzeltebileceğimiz

15:03.210 --> 15:04.710
bir şey ama işe yarıyor

15:04.710 --> 15:06.220
ve önemli olan da bu.

15:06.220 --> 15:08.390
Ancak burada da bir hata olduğunu görüyorsunuz.

15:08.390 --> 15:10.260
İkinci bir öğe eklersem, son öğeyi

15:10.260 --> 15:12.370
çoğaltıyor ve yeni öğeleri ekliyoruz,

15:12.370 --> 15:13.880
bu yüzden bunu düzeltmemiz

15:13.880 --> 15:15.490
gerekecek.

15:15.490 --> 15:17.653
Ve bunların hepsi üstesinden geleceğimiz

15:17.653 --> 15:21.270
şeyler, ancak şimdi en azından bununla bir çıktı alabiliyoruz,

15:21.270 --> 15:24.450
kullandığımız türler hakkında daha net olmak, yinelenen

15:24.450 --> 15:27.160
çıktıdan kaçınmak ve diğer birçok şey gibi

15:27.160 --> 15:30.733
tüm iyileştirmelere dalalım.
