WEBVTT

00:02.170 --> 00:03.003
Eğitmen: Artık düzgün bir

00:03.003 --> 00:04.760
şekilde yapılandırılmış bir projemiz olduğuna göre,

00:04.760 --> 00:08.130
projenizde nasıl hata ayıklayabileceğinizi veya nasıl harika bir geliştirme akışına sahip olabileceğinizi

00:08.130 --> 00:10.500
biraz daha derinlemesine inceleyelim.

00:10.500 --> 00:14.575
Bu kursun başında size temel IDE kurulumumu gösteriyorum.

00:14.575 --> 00:17.750
Gerçekten doğru uzantıları yüklediğinizden emin olun.

00:17.750 --> 00:22.750
TypeScript için, TypeScript kodunuzu lintlemenize yardımcı

00:22.980 --> 00:26.410
olabilecek ESLint'e gelir.

00:26.410 --> 00:29.310
Bu nedenle, kod kalitesini artırırken ESLint'in

00:29.310 --> 00:31.620
etkili olması için ek yapılandırmaya

00:31.620 --> 00:33.900
ihtiyacınız olabilir.

00:33.900 --> 00:36.310
Daha gelişmiş projelerde size yardımcı olabilir,

00:37.220 --> 00:38.570
ancak bundan daha ilginç

00:38.570 --> 00:40.818
olanı, kodunuzu otomatik olarak biçimlendirmek

00:40.818 --> 00:43.370
ve güzel biçimlendirilmiş bir koda sahip olmak

00:43.370 --> 00:45.770
için Prettier'ı gerçekten kullanmak istersiniz

00:45.770 --> 00:49.870
ve Chrome için Debugger'ı denemek isteyebilirsiniz çünkü bu, TypeScript

00:49.870 --> 00:55.810
dosyalarınızda Chrome Dev Tools'u kullanmadan Chrome aracılığıyla VS Code içinden bile hata ayıklamanıza

00:55.810 --> 00:59.440
olanak tanır.

00:59.440 --> 01:02.653
Elbette bunları da öğrendiğiniz gibi kullanabilirsiniz.

01:02.653 --> 01:05.154
Burada sourceMaps'i etkinleştirirseniz, ki elbette

01:05.154 --> 01:07.160
bunu her zaman yapabilirsiniz, bu çevrilmiş

01:07.160 --> 01:09.240
dosyaları orada da elde edersiniz ki bu gerçekten

01:09.240 --> 01:10.429
güzeldir.

01:10.429 --> 01:14.170
Ancak VS Code'u da kullanabilirsiniz.

01:14.170 --> 01:15.960
Buraya, diyelim ki clickHandler'a

01:15.960 --> 01:17.340
kesme noktaları yerleştirebilirsiniz

01:17.340 --> 01:19.842
ve şimdi dosyalarınızı burada VS Code aracılığıyla

01:19.842 --> 01:24.842
başlatmak için sourceMaps'i de etkinleştirmeniz gerekir, ancak yine de tarayıcı

01:26.100 --> 01:30.950
Dev Tools yerine VS Code'u kullanabileceğiz.

01:30.950 --> 01:34.570
Bu yüzden sourceMaps'i etkinleştirin, kesme noktanızı

01:34.570 --> 01:38.930
yerleştirin ve ardından Debug, Start Debugging'e gidin.

01:38.930 --> 01:40.320
Şimdi, bunu ilk kez çalıştırdığınızda,

01:40.320 --> 01:42.170
size ortamı sormalı ve orada Chrome

01:42.170 --> 01:47.850
için Hata Ayıklayıcı uzantısı yüklüyken Chrome'u seçebilmelisiniz.

01:47.850 --> 01:49.960
Şimdi bir laucnh'a gidecek. json dosyasını nasıl

01:49.960 --> 01:53.200
başlatması gerektiğini yapılandırdığınız yer ve

01:53.200 --> 01:56.740
orada localhost:3000'e işaret etmelisiniz çünkü geliştirme

01:56.740 --> 01:59.330
sunucumuzun çalıştığı yer burası ve tabii

01:59.330 --> 02:04.220
ki bu süreç, yani npm başlatma süreci çalışıyor olmalı.

02:04.220 --> 02:06.910
Orada localhost:3000'i işaret etmek ve webRoot

02:06.910 --> 02:09.740
olarak bu yer tutucuyu burada bırakabilirsiniz, yani

02:09.740 --> 02:11.890
bu proje klasörünün dosyalarınızın ana

02:11.890 --> 02:13.780
bilgisayarı olduğu varsayılır ki

02:13.780 --> 02:17.120
durum budur ve şimdi kodunuzu derleyin, böylece sourceMaps

02:17.120 --> 02:19.780
yapılandırmasını true olarak ayarladıktan sonra

02:19.780 --> 02:22.470
sourceMaps de oluşturulur, böylece artık JavaScript

02:22.470 --> 02:25.290
kodunda bunlara sahip oluruz.

02:25.290 --> 02:26.870
Ardından kesme noktanız buraya eklenir

02:26.870 --> 02:28.400
ve başlatılır. json yapılandırıldı,

02:28.400 --> 02:30.400
burada hata ayıklamayı çalıştıralım.

02:30.400 --> 02:32.140
Şimdi gerçekten hata ayıklamaya başlayın

02:32.140 --> 02:34.830
ve şimdi otomatik olarak yeni bir sekme açacaktır.

02:34.830 --> 02:36.020
Hata ayıklama işleminden

02:36.020 --> 02:38.730
her çıktığınızda bu sekme kapanır veya sekmeyi

02:38.730 --> 02:41.940
kapatırsanız hata ayıklama işleminden çıkılır.

02:41.940 --> 02:44.590
Şimdi bununla birlikte, VS Code'da değişkenleri

02:44.590 --> 02:46.790
izleyebileceğiniz, belirli ifadeleri

02:46.790 --> 02:48.230
izleyebileceğiniz ve geçerli

02:48.230 --> 02:50.120
çağrı yığınını görebileceğiniz bu

02:50.120 --> 02:51.910
hata ayıklama görünümüne girersiniz

02:51.910 --> 02:54.120
ve şimdi Bana Tıkla'ya tıklarsanız, düzenleyiciye

02:54.120 --> 02:56.590
geri dönersiniz ve kod yürütme, TypeScript dosyasındaki

02:56.590 --> 03:01.410
kesme noktanızda duraklar ve şimdi dosyada gezinebilir, bu anahtar kelime veya mesaj değişkeni

03:01.410 --> 03:13.320
için yerel değerleri inceleyebilirsiniz, örneğin, kod genelinde sahip olabileceğiniz değişkenler ve küresel nesnelere erişiminiz olan küresel değişkenler.

03:13.320 --> 03:15.560
Mesaj + birden fazla ünlem işareti

03:15.560 --> 03:19.290
gibi belirli ifadeleri izleyebilir ve daha sonra isterseniz

03:19.290 --> 03:22.690
burada bu pencerede bulunan değeri her zaman izleyebilirsiniz,

03:22.690 --> 03:27.483
böylece bu işe yarayacaktır.

03:27.483 --> 03:30.480
Ve örneğin clickHandler'da gerçekleşecek olan mevcut

03:30.480 --> 03:33.010
işlev çağrısı yığınını görebilirsiniz ve şimdi

03:33.010 --> 03:34.710
bir sonraki adıma geçmek, bir

03:34.710 --> 03:37.590
sonraki işlev çağrısını atlamak, işlev çağrısına

03:37.590 --> 03:39.800
girmek veya mevcut işlev çağrısından çıkmak

03:39.800 --> 03:41.500
için bu kontrollerle kodunuzda

03:41.500 --> 03:43.827
adım atabilirsiniz ve elbette burada çağrı

03:43.827 --> 03:46.710
yığını buna göre ayarlanacaktır ve bununla, buradaki

03:46.710 --> 03:49.280
bu tarayıcı şeyini görmezden gelebilirsiniz,

03:49.280 --> 03:51.920
bununla, oynat düğmesine tıklayarak her zaman

03:51.920 --> 04:00.290
kod yürütmeye devam edebilir ve bir dahaki sefere kesme noktanıza ulaştığınızda yalnızca duraklatabilirsiniz.

04:00.290 --> 04:02.080
İşte bu şekilde kodda hata ayıklayabilirsiniz.

04:02.080 --> 04:04.050
Bir kesme noktasını üzerine tıklayarak kaldırabilirsiniz.

04:04.050 --> 04:05.910
Yerleşik hata ayıklama araçları,

04:05.910 --> 04:07.310
Chrome Hata Ayıklayıcı

04:07.310 --> 04:09.728
uzantısı, türetilmiş yapılandırma ve TypeScript

04:09.728 --> 04:12.450
yapılandırmanızda ayarlanan soureMaps yardımıyla

04:12.450 --> 04:17.743
VS Code içinden kodda bu şekilde hata ayıklayabilirsiniz.
