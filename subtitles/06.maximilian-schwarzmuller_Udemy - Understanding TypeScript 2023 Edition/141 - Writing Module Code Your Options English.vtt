WEBVTT

1
00:00:02.160 --> 00:00:03.740
<v Instructor>So what are our options</v>

2
00:00:03.740 --> 00:00:06.440
when we wanna split code into multiple files?

3
00:00:06.440 --> 00:00:10.720
Now actually we have three options for that.

4
00:00:10.720 --> 00:00:12.680
The first option would be to simply

5
00:00:12.680 --> 00:00:16.110
write multiple code files, multiple TypeScript files.

6
00:00:16.110 --> 00:00:17.460
TypeScript will then automatically

7
00:00:17.460 --> 00:00:20.710
compile all code files in the source directory

8
00:00:20.710 --> 00:00:23.020
and manually import the compiled

9
00:00:23.020 --> 00:00:25.000
Java script files into HTML.

10
00:00:25.000 --> 00:00:26.220
That is an option

11
00:00:26.220 --> 00:00:28.970
and for some projects this might be just right

12
00:00:28.970 --> 00:00:31.780
but you would have to manage all these imports manually

13
00:00:31.780 --> 00:00:34.600
which can be cumbersome and error prone

14
00:00:34.600 --> 00:00:36.980
and when using certain TypeScript features,

15
00:00:36.980 --> 00:00:39.560
you also give up types support if

16
00:00:39.560 --> 00:00:42.100
some type is defined in file A

17
00:00:42.100 --> 00:00:43.670
and you use it in file B

18
00:00:43.670 --> 00:00:46.030
and TypeScript doesn't know about this connection.

19
00:00:46.030 --> 00:00:47.480
That's why this is not really a

20
00:00:47.480 --> 00:00:49.290
great option for bigger projects.

21
00:00:49.290 --> 00:00:52.500
Instead for bigger projects we have two main options.

22
00:00:52.500 --> 00:00:55.470
We have namespaces and file bundling for example.

23
00:00:55.470 --> 00:00:59.410
Now namespaces is a TypeScript feature, a syntax feature,

24
00:00:59.410 --> 00:01:03.430
you can add special code to your code to use this feature

25
00:01:03.430 --> 00:01:04.840
and it allows you to basically

26
00:01:04.840 --> 00:01:08.650
group code together below a namespace

27
00:01:08.650 --> 00:01:12.730
and then import namespaces into other files.

28
00:01:12.730 --> 00:01:16.020
So you can have a namespace per file for example.

29
00:01:16.020 --> 00:01:18.790
Import another file into yet another file

30
00:01:18.790 --> 00:01:21.930
and tap into that namespace which lives

31
00:01:21.930 --> 00:01:24.650
in another file from that importing file

32
00:01:24.650 --> 00:01:25.970
and we'll see that in practice

33
00:01:25.970 --> 00:01:28.030
in case that's not entirely clear.

34
00:01:28.030 --> 00:01:30.020
TypeScript does not only support that,

35
00:01:30.020 --> 00:01:34.130
it also bundles the files together into one file,

36
00:01:34.130 --> 00:01:37.230
so that you in the end write code

37
00:01:37.230 --> 00:01:39.560
in multiple files which are compiled

38
00:01:39.560 --> 00:01:42.750
but they are then imported into each other

39
00:01:42.750 --> 00:01:45.190
so that you have less imports to manage

40
00:01:45.190 --> 00:01:46.950
and you don't need to manually manage

41
00:01:46.950 --> 00:01:50.030
different imports in an HTML file.

42
00:01:50.030 --> 00:01:52.180
Now an alternative to namespaces

43
00:01:52.180 --> 00:01:55.750
and arguably the more important and modern alternative,

44
00:01:55.750 --> 00:02:00.750
is to use ES6 Imports/Exports also known as ES6 modules,

45
00:02:01.870 --> 00:02:06.480
because it turns out that totally detached from TypeScript,

46
00:02:06.480 --> 00:02:09.940
modern Java script has a solution for this problem as well

47
00:02:09.940 --> 00:02:11.440
because you have this problem

48
00:02:11.440 --> 00:02:13.140
not just in TypeScript projects,

49
00:02:13.140 --> 00:02:15.850
but in any bigger Java script project.

50
00:02:15.850 --> 00:02:18.200
Modern Java script out of the box

51
00:02:18.200 --> 00:02:21.150
supports import and export statements,

52
00:02:21.150 --> 00:02:23.110
which allows you to state which file

53
00:02:23.110 --> 00:02:24.910
depends of which other file

54
00:02:24.910 --> 00:02:27.920
and then you have all these individual files

55
00:02:27.920 --> 00:02:30.560
but you don't need to manage imports manually,

56
00:02:30.560 --> 00:02:33.770
instead browsers, modern browsers do that.

57
00:02:33.770 --> 00:02:36.020
They understand it and automatically download

58
00:02:36.020 --> 00:02:38.800
and run files another file depends on.

59
00:02:38.800 --> 00:02:41.370
You use the import/export syntax for that

60
00:02:41.370 --> 00:02:43.470
and TypeScript also supports this.

61
00:02:43.470 --> 00:02:46.870
So therefore you can use it TypeScript without any issues.

62
00:02:46.870 --> 00:02:48.700
You compile per file

63
00:02:48.700 --> 00:02:50.810
but you only need one script import

64
00:02:50.810 --> 00:02:53.680
because as I just mentioned modern browsers

65
00:02:53.680 --> 00:02:56.350
know how to then fetch all other dependencies

66
00:02:56.350 --> 00:02:58.570
and you'll also see that in action

67
00:02:58.570 --> 00:03:00.710
in this core section here.

68
00:03:00.710 --> 00:03:02.320
Now one important note here,

69
00:03:02.320 --> 00:03:03.830
with that we technically will

70
00:03:03.830 --> 00:03:06.110
end up with multiple files still

71
00:03:06.110 --> 00:03:09.140
and whilst we won't have to manage the imports manually,

72
00:03:09.140 --> 00:03:11.550
the script imports, we still have

73
00:03:11.550 --> 00:03:13.730
some disadvantages because of that

74
00:03:13.730 --> 00:03:15.130
because every file you're depending

75
00:03:15.130 --> 00:03:16.900
on needs to be downloaded separately

76
00:03:16.900 --> 00:03:19.460
which means more HTTP requests and so on

77
00:03:19.460 --> 00:03:22.210
and therefore you can bundle files together

78
00:03:22.210 --> 00:03:24.860
to work on multiple files during development

79
00:03:24.860 --> 00:03:27.660
but ship a single file for production

80
00:03:27.660 --> 00:03:29.140
but you need third-party tools

81
00:03:29.140 --> 00:03:30.840
for that, For example Webpack,

82
00:03:30.840 --> 00:03:33.700
and I will show you how that works as well

83
00:03:33.700 --> 00:03:35.700
but in a separate section where we will

84
00:03:35.700 --> 00:03:37.500
have a look at Webpack and TypeScript

85
00:03:37.500 --> 00:03:39.500
and why we use it and how we use it.

86
00:03:39.500 --> 00:03:41.100
So for now let's use these two

87
00:03:41.100 --> 00:03:43.900
approaches in their basic form

88
00:03:43.900 --> 00:03:45.870
and let's see how we can improve

89
00:03:45.870 --> 00:03:48.853
our code by splitting it across multiple files.

