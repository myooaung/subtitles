WEBVTT

00:02.300 --> 00:04.180
Instruktur: Jadi kita mulai dengan basis

00:04.180 --> 00:05.960
nama, mari kita lanjutkan rute itu, dan

00:05.960 --> 00:08.460
mari kita membaginya menjadi lebih banyak file.

00:08.460 --> 00:11.090
Untuk itu di sini, manajemen keadaan proyek.

00:11.090 --> 00:13.610
Kita bisa memasukkannya ke dalam file terpisah juga.

00:13.610 --> 00:16.050
Jadi saya akan mengambil semuanya

00:16.050 --> 00:20.600
termasuk pembuatan instance status proyek di sini, memotongnya

00:20.600 --> 00:24.250
dari aplikasi. ts dan membuat file baru,

00:24.250 --> 00:27.060
project-state. ts.

00:27.060 --> 00:29.685
Pindahkan itu ke sana dan seperti sebelumnya,

00:29.685 --> 00:32.070
masukkan ke dalam namespace.

00:32.070 --> 00:35.400
Namespace app, nama itu penting, harus App karena

00:35.400 --> 00:38.090
di situlah sisa kode kita berada.

00:38.090 --> 00:40.440
Taruh semuanya di sana dan sekarang yang

00:40.440 --> 00:43.560
penting, ekspor apa yang Anda butuhkan di luar file

00:43.560 --> 00:46.120
ini juga, yang dalam hal ini adalah kelas projectstate,

00:46.120 --> 00:48.830
kita membutuhkannya di seluruh aplikasi kita,

00:48.830 --> 00:51.500
dan juga konstanta ini di sana, kita perlu mengekspor

00:51.500 --> 00:53.880
ini juga.

00:53.880 --> 00:57.060
Anda tidak perlu mengekspor Listener di sini, dan juga bukan state

00:57.060 --> 00:59.430
itu, karena kedua hal tersebut hanya digunakan

00:59.430 --> 01:01.480
dalam file ini dan oleh karena itu, tidak

01:01.480 --> 01:02.823
perlu diekspor.

01:03.700 --> 01:06.860
Sekarang, kita harus mengimpor projectstate kita. ts, jadi di

01:06.860 --> 01:09.540
App. ts, waktunya untuk impor lain di sana.

01:09.540 --> 01:13.290
Keadaan dasbor proyek, begitu saja.

01:13.290 --> 01:16.620
Jika kita menyimpannya, seharusnya kompilasi tanpa kesalahan.

01:16.620 --> 01:19.480
Sekarang, saya akan melanjutkan dan bagian validasi

01:19.480 --> 01:21.460
di sini bisa masuk ke file terpisah juga,

01:21.460 --> 01:23.960
jadi saya akan mengambil semua ini, membuat file

01:23.960 --> 01:26.890
baru, validasi. ts, tambahkan namespace

01:26.890 --> 01:30.760
App di sini, letakkan logika validasi saya di sana dan ekspor

01:30.760 --> 01:33.560
antarmuka yang dapat divalidasi dan semua

01:33.560 --> 01:36.706
fungsi devalidate di sini, tentu saja.

01:36.706 --> 01:39.566
Dan kemudian, kembali ke App. ts, Anda tahu bagaimana itu, kita

01:39.566 --> 01:41.700
kembali ke sini ke atas dan menambahkan impor

01:41.700 --> 01:43.513
ke validasi. ts.

01:45.160 --> 01:49.823
Sekarang, dekorator juga bisa dipindahkan ke file terpisah.

01:49.823 --> 01:54.410
Dekorator dasbor Autobind. ts, misalnya.

01:54.410 --> 01:58.863
Sekali lagi, tambahkan namespace dengan nama App ke dalamnya, letakkan

01:58.863 --> 02:01.950
fungsi di sana dan ekspor, tentu saja, untuk membuatnya

02:01.950 --> 02:04.820
tersedia di luar file ini dan kemudian di sini

02:04.820 --> 02:08.430
di app. ts, waktunya untuk impor lain di mana saya

02:08.430 --> 02:12.633
mengimpor dekorator dasbor autobind. ts.

02:14.840 --> 02:16.484
Sekarang kita punya lebih banyak hal untuk

02:16.484 --> 02:19.240
diekspor, kita punya komponen kita dan kemudian semua kelas ini.

02:19.240 --> 02:21.205
Saya ingin setiap kelas dalam file

02:21.205 --> 02:25.440
terpisah sehingga setiap file relatif kecil dan mudah dikelola.

02:25.440 --> 02:28.280
Sekarang, kita akan menghadapi masalah baru di sini.

02:28.280 --> 02:30.385
Kami menambahkan lebih banyak file pada level

02:30.385 --> 02:33.934
yang sama dan untuk saat ini, saya menggunakan tanda hubung di sini untuk

02:33.934 --> 02:37.800
memberikan petunjuk atau bantuan tentang apa yang ada di file, dekorator dasbor

02:37.800 --> 02:42.330
autobind menunjukkan kepada kita bahwa mungkin ada dekorator di sana.

02:42.330 --> 02:44.300
Di sini, kita mungkin memiliki antarmuka.

02:44.300 --> 02:46.246
Di sini, seorang model dan sebagainya.

02:46.246 --> 02:49.070
Sekarang, jika Anda hanya memiliki tiga atau empat

02:49.070 --> 02:52.010
file, itu tidak masalah, tetapi jika Anda memiliki lebih

02:52.010 --> 02:55.276
banyak file, Anda akan berakhir dengan struktur folder yang

02:55.276 --> 02:57.430
sangat sulit dipahami di sini.

02:57.430 --> 03:00.056
Jadi, yang ingin saya lakukan adalah saya ingin membuat subfolder.

03:00.056 --> 03:02.697
Saya akan menambahkan subfolder dekorator, memindahkan

03:02.697 --> 03:05.830
dekorator autobind saya di sana, dan menamainya kembali menjadi

03:05.830 --> 03:09.260
autobind saja, karena sudah ada di folder dekorator.

03:09.260 --> 03:11.720
Tentu saja ada dekorator di sana.

03:11.720 --> 03:14.440
Kemudian, saya akan menambahkan folder model saya, dan

03:14.440 --> 03:17.523
sebenarnya, di sini, saya akan memindahkan antarmuka seret dan

03:17.523 --> 03:19.355
jatuhkan dan model proyek di sana, hanya

03:19.355 --> 03:21.763
karena saya pikir antarmuka seret dan jatuhkan pada

03:21.763 --> 03:24.187
akhirnya hanyalah definisi bagaimana kelas yang

03:24.187 --> 03:27.263
dapat diseret dan dijatuhkan harus terlihat seperti.

03:27.263 --> 03:29.910
Sama seperti model proyek adalah definisi bagaimana seharusnya

03:29.910 --> 03:31.630
kelas proyek terlihat atau bagaimana seharusnya

03:31.630 --> 03:33.655
objek proyek kita terlihat.

03:33.655 --> 03:38.530
Jadi saya akan menamai drag and drop ini dan ini di sini hanya proyek dan kemudian

03:38.530 --> 03:42.610
di sini saya akan menambahkan folder util untuk utilitas dan menambahkan

03:42.610 --> 03:44.860
validasi saya di sana dan kemudian

03:44.860 --> 03:49.690
folder state dan menambahkan status proyek ke sana.

03:49.690 --> 03:52.400
Di sini saya akan tetap menggunakan nama project-state hanya untuk menghindari

03:52.400 --> 03:55.300
kebingungan dengan proyek ini. ts file di sini.

03:55.300 --> 03:56.716
Secara teknis, hal itu tidak akan menjadi

03:56.716 --> 03:59.216
masalah, tetapi saya ingin memperjelasnya di sini dalam kursus

03:59.216 --> 04:00.990
ini sehingga Anda lebih mudah melihat file mana

04:00.990 --> 04:02.640
yang sedang saya kerjakan.

04:02.640 --> 04:05.640
Anda pasti bisa mengubah nama ini menjadi proyek saja. ts di sini jika Anda

04:05.640 --> 04:07.320
menginginkannya.

04:07.320 --> 04:09.662
Sekarang, dengan pemfaktoran ulang dan sub-folder

04:09.662 --> 04:12.069
ini, tentu saja impor kita di sini rusak, jadi kita

04:12.069 --> 04:14.010
harus memperbaikinya.

04:14.010 --> 04:17.366
Antarmuka seret dan jatuhkan ditemukan di folder model dan sekarang

04:17.366 --> 04:21.216
namanya hanya seret-drop. ts.

04:21.216 --> 04:25.630
Dan model proyek juga ditemukan di folder models dan sekarang hanya

04:25.630 --> 04:28.560
bernama project. ts.

04:28.560 --> 04:31.100
Project state terdapat di folder state,

04:31.100 --> 04:34.040
validasi terdapat di folder util, dan autobind

04:34.040 --> 04:36.896
decorator terdapat di decorators dan hanya

04:36.896 --> 04:39.860
bernama autobind.

04:39.860 --> 04:42.547
Dengan itu, jika kita menyimpannya, itu mengkompilasi tanpa kesalahan

04:42.547 --> 04:44.128
dan sekarang kita memiliki struktur folder

04:44.128 --> 04:47.290
yang lebih mudah dikelola dan dapat dibaca, menurut saya.

04:47.290 --> 04:50.500
Dengan itu, mari kita lanjutkan, kita belum selesai.

04:50.500 --> 04:52.130
Kita memiliki komponen

04:52.130 --> 04:54.813
kita di sini, sekarang untuk itu, saya

04:54.813 --> 04:59.813
akan menambahkan sub-folder komponen dan di sana saya ingin memiliki

05:00.210 --> 05:05.210
file ts komponen dasbor dasar dan kemudian file ts item proyek saya, file

05:07.600 --> 05:12.110
ts daftar proyek saya, dan juga file ts input proyek.

05:12.110 --> 05:14.430
Tentu saja, Anda selalu bisa mengaturnya secara berbeda,

05:14.430 --> 05:17.631
tetapi menurut saya, hal ini membuat file-file terkait tetap bersama.

05:17.631 --> 05:22.253
Jadi kita bisa mengambil kelas dasar komponen abstrak ini di sini, memotongnya dari

05:23.830 --> 05:27.023
app ts dan memindahkannya ke dalam komponen dasar.

05:29.610 --> 05:33.180
Seperti ini, dan tentu saja, juga seperti sebelumnya,

05:33.180 --> 05:37.810
tambahkan ke dalam namespace dengan nama App.

05:37.810 --> 05:41.120
Dan kemudian memindahkannya ke dalam namespace ini.

05:41.120 --> 05:43.890
Tentu saja, saya akan menyesuaikan ini sebelum kita perlu mengekspornya

05:43.890 --> 05:46.171
sehingga kita bisa menggunakannya di file lain.

05:46.171 --> 05:49.800
Namun demikian, file lain itu tidak akan menjadi aplikasi. ts karena file-file atau kelas-kelas

05:49.800 --> 05:53.044
tempat saya menggunakan komponen tersebut juga akan

05:53.044 --> 05:54.910
dipindahkan.

05:54.910 --> 05:56.856
Kelas item proyek di sini, misalnya, saya akan mengambilnya

05:56.856 --> 06:00.164
dan memindahkannya ke item proyek. ts, tepatnya, di sana saya

06:00.164 --> 06:04.550
juga akan menambahkan namespace app dan memindahkannya ke namespace

06:04.550 --> 06:06.680
app di sana dan kemudian mengekspor

06:06.680 --> 06:09.060
kelas ini juga.

06:09.060 --> 06:11.413
Sekarang, yang penting, ini bergantung pada komponen, dan yang lainnya,

06:12.310 --> 06:14.740
jika saya sekarang menyimpan ini, kita akan mendapatkan kesalahan

06:14.740 --> 06:16.497
bahwa komponen tidak ditemukan pada akhirnya, jadi

06:16.497 --> 06:19.353
di sini kita lagi, perlu menambahkan impor ini di mana kita memiliki jalur referensi

06:19.353 --> 06:24.772
yang sama dan kemudian di sini adalah base-component.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
Ini selalu merupakan impor relatif di sini, jadi

06:27.330 --> 06:29.130
karena ini berada di folder yang sama,

06:29.130 --> 06:32.320
kita tidak perlu mengatakan garis miring komponen di sini,

06:32.320 --> 06:34.608
karena kita tidak perlu masuk ke folder komponen

06:34.608 --> 06:37.300
terlebih dahulu file ini, file item proyek, sudah

06:37.300 --> 06:38.729
ada di folder komponen jadi

06:38.729 --> 06:40.617
relatif dari komponen dasar file ini

06:40.617 --> 06:44.913
diimpor hanya dengan menggunakan namanya di sini.

06:46.060 --> 06:48.030
Jadi, sekarang item proyek ada di sini.

06:48.030 --> 06:51.963
Sekarang, tentu saja, dalam aplikasi. ts, kami juga mendapatkan daftar proyek.

06:55.940 --> 07:00.662
Mari kita ambil itu, pindahkan ke daftar proyek ts file di sini dan di sana

07:00.662 --> 07:04.940
ke dalam namespace App, dan kemudian juga di sini ke input proyek

07:04.940 --> 07:07.050
mari kita ambil ini, potong dari

07:08.010 --> 07:14.480
sini, dari namespace app di aplikasi.

07:14.480 --> 07:14.480
ts,

07:14.480 --> 07:17.097
dan pindahkan ke dalam file project input ts

07:17.097 --> 07:19.857
dan di sana ke dalam namespace aplikasi.

07:20.750 --> 07:24.350
Nah, yang penting sama seperti sebelumnya, export class ini

07:24.350 --> 07:27.550
disini, project item dan juga project list, tentu saja

07:27.550 --> 07:30.200
semua perlu di export, dengan itu kita mendapatkan

07:30.200 --> 07:31.580
banyak error karena tentu

07:31.580 --> 07:34.343
saja, masih ada import yang hilang.

07:35.200 --> 07:39.930
Dalam aplikasi. ts, kita harus mengimpor semua komponen ini sekarang, jadi di sini

07:39.930 --> 07:42.934
kita harus mengimpor project-input. ts, daftar

07:42.934 --> 07:47.380
proyek. ts, dan kemudian simpan ini.

07:47.380 --> 07:50.240
Sekarang, tentu saja, masih crash karena kita punya

07:50.240 --> 07:51.087
lebih banyak hal

07:51.087 --> 07:53.192
yang hilang, dalam project-input kita

07:53.192 --> 07:55.541
menggunakan komponen seperti yang kita gunakan

07:55.541 --> 07:57.780
dalam project list, jadi seperti yang kita

07:57.780 --> 08:00.091
lakukan dalam project item, kita perlu menambahkan

08:00.091 --> 08:02.920
impor komponen dasar dalam file project input ts dan

08:02.920 --> 08:05.790
juga dalam file project list ts.

08:05.790 --> 08:08.665
Dan dengan itu, itu mengkompilasi tanpa kesalahan

08:08.665 --> 08:10.880
dan mari kita lihat apakah itu juga berfungsi,

08:10.880 --> 08:15.118
jika kita memuat ulang di sini dan saya menambahkan ini, dapat diseret dan dijatuhkan,

08:15.118 --> 08:16.540
dan itu semua tampaknya berfungsi

08:16.540 --> 08:19.480
sebagaimana mestinya, dan sekarang kita membagi ini

08:19.480 --> 08:22.340
di beberapa file.

08:22.340 --> 08:23.978
Kita masih mendapatkan satu file pada

08:23.978 --> 08:26.010
akhirnya, tetapi ketika kita mengerjakan kode

08:26.010 --> 08:28.110
kita, sekarang jauh lebih mudah dikelola.

08:28.110 --> 08:30.978
Karena kita memiliki file terfokus yang lebih kecil di mana kita

08:30.978 --> 08:33.829
dapat dengan cepat menemukan apa yang kita cari dan di mana kita

08:33.829 --> 08:36.358
tidak perlu menggulir file yang sangat besar untuk menemukan

08:36.358 --> 08:39.363
tempat yang ingin kita kerjakan selanjutnya.
