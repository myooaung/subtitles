WEBVTT

00:02.290 --> 00:03.280
教师：现在, 让我们开始使用Node

00:03.280 --> 00:06.110
typescript应用程序｡

00:06.110 --> 00:08.750
现在, 你可能认为我们需要一个复杂的设置与webpack等现在,

00:08.750 --> 00:12.410
但我们实际上没有｡

00:12.410 --> 00:16.270
我们只使用tsc命令来编译文件｡ 

00:16.270 --> 00:19.890
然后, 我们可以使用node命令来执行编译后的文件｡

00:19.890 --> 00:21.700
这就是我们需要的｡ 

00:21.700 --> 00:25.960
尽管如此, 我将在这里设置一个项目与npm init简单,

00:25.960 --> 00:28.810
使我们得到一个包｡ json文件, 因为我们将在这里创建一个普通的Node应用程序,

00:28.810 --> 00:36.240
我们将安装一些第三方软件包, 如Express｡

00:36.240 --> 00:36.240
js的｡ 

00:36.240 --> 00:40.950
我还想安装一个额外的工具来简化我们的开发过程｡

00:40.950 --> 00:44.630
因此, 在您选择的任何空文件夹中运行npm init｡ 

00:44.630 --> 00:50.540
如果需要, 您可以在这里确认所有默认设置, 然后, 您将拥有一个软件包｡

00:50.540 --> 00:50.540
json文件,

00:50.540 --> 00:52.750
看起来应该像这样｡

00:52.750 --> 00:56.210
现在, 也在这里运行tsc --init, 也将这个项目初始化为一个typescript项目,

00:56.210 --> 01:01.860
以便获得这个tsconfig｡

01:01.860 --> 01:01.860
json文件,

01:01.860 --> 01:04.313
您现在可以在您的需求中找到它｡

01:05.770 --> 01:09.020
我已经做了第一个调整｡ 

01:09.020 --> 01:13.300
这里的目标可以很容易地设置为es2018, 例如, 这取决于您使用的节点版本,

01:13.300 --> 01:21.380
但如果您使用的是最新版本, 这种现代JavaScript语法肯定应该得到支持｡

01:21.380 --> 01:27.460
模块可以保留在commonjs中, 但是我还想在这里添加moduleResolution,

01:27.460 --> 01:29.010
并将其设置为node｡

01:29.010 --> 01:35.483
这只是告诉typescript不同的文件和导入将如何协同工作｡

01:36.410 --> 01:40.020
我们需要将其设置为node以确保一切正常工作｡

01:40.020 --> 01:42.470
我还将在这里设置我的outDir, 在其中添加注释并将其设置为dist,

01:42.470 --> 01:49.600
将我的rootDir设置为src, 因为我想将我的typescript源代码分开｡

01:49.600 --> 01:53.170
然后输出实际的JavaScript文件,

01:53.170 --> 01:55.733
我们可以在节点的帮助下执行｡

01:56.820 --> 01:58.850
除此之外, 我对严格模式很满意,

01:58.850 --> 02:03.030
但当然, 你可以根据你的个人需要和喜好来调整这一切｡

02:03.030 --> 02:06.320
你在这门课上学到了很多｡ 

02:06.320 --> 02:08.830
这样, 我们就可以保存此配置｡ 

02:08.830 --> 02:12.460
你也会发现这个非常基本的启动设置附加的方式｡

02:12.460 --> 02:14.120
您可以保存此配置｡ 

02:14.120 --> 02:16.170
我还将创建一个src文件夹,

02:16.170 --> 02:20.230
我们将在其中编写源代码, 即typescript源代码｡

02:20.230 --> 02:23.020
这就是我现在想深入研究的部分｡ 

02:23.020 --> 02:27.960
现在, 我们将使用src文件夹中的typescript构建应用程序｡

02:27.960 --> 02:32.920
由于我们将构建一个简单的Web服务器, 我们还希望使用Express｡

02:32.920 --> 02:32.920
js那里,

02:32.920 --> 02:36.120
我将首先在这里安装一些依赖项｡

02:36.120 --> 02:38.440
使用npm install --save, 我想在这里安装Express,

02:38.440 --> 02:44.100
它是节点的Express框架｡

02:44.100 --> 02:44.100
当然,

02:44.100 --> 02:45.680
您并不总是需要它, 但在这里, 我想构建一个Node

02:45.680 --> 02:48.440
Express应用程序｡

02:48.440 --> 02:51.500
它将安装body-parser包,

02:51.500 --> 02:54.403
帮助我们解析传入的请求主体｡

02:55.290 --> 02:58.180
就目前而言, 我的生产依赖关系到此为止｡ 

02:58.180 --> 03:00.110
我们以后可能会增加更多｡ 

03:00.110 --> 03:01.523
我们在这里按回车键｡ 

03:02.960 --> 03:04.120
在安装了这些组件之后,

03:04.120 --> 03:07.540
让我们来看看开发依赖项｡

03:07.540 --> 03:11.450
我将使用npm install --save-dev安装这些文件,

03:11.450 --> 03:13.330
在那里, 我想安装modemon,

03:13.330 --> 03:16.340
这是一个允许我们使用Node执行文件的工具,

03:16.340 --> 03:22.690
但它随后会监视文件和文件所在的文件夹, 以及所有子文件夹的更改｡

03:22.690 --> 03:24.050
每当文件发生更改时,

03:24.050 --> 03:26.030
它都会重新启动节点服务器｡

03:26.030 --> 03:27.620
这将简单地加快开发速度,

03:27.620 --> 03:29.510
因为每次我们更改源代码时,

03:29.510 --> 03:33.500
它都会自动重新启动我们的Node应用服务器｡

03:33.500 --> 03:36.180
我们需要在代码更改时重新启动服务器,

03:36.180 --> 03:39.430
因为否则, 我们的服务器仍然运行在旧代码上, 但是手动重新启动很烦人,

03:39.430 --> 03:44.190
所以我们不能用nodemon来加快速度｡

03:44.190 --> 03:47.323
目前来说, 就是这样｡ 

03:49.290 --> 03:50.340
因此, 让我们在此处按Enter键,

03:50.340 --> 03:52.360
并安装此开发依赖项｡

03:52.360 --> 03:54.760
这不会是我们在这门课上需要的最后一个,

03:54.760 --> 03:56.660
但就目前而言, 我们很好｡

03:56.660 --> 03:58.830
所以我们等这一切结束吧｡ 

03:58.830 --> 04:01.450
安装完成了, 现在让我们开始编写和创建一个非常基本的Node

04:01.450 --> 04:04.773
Express应用程序｡
