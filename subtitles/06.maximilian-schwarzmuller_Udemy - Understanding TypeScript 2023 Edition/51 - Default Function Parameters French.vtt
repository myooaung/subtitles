WEBVTT

00:02.170 --> 00:03.830
Restons-en aux fonctions.

00:03.830 --> 00:07.120
Une autre fonctionnalité intéressante disponible dans le JavaScript moderne

00:07.120 --> 00:09.450
est la possibilité d'attribuer des arguments par défaut

00:09.450 --> 00:11.033
aux paramètres des fonctions.

00:11.880 --> 00:13.830
Disons que dans notre fonction d'ajout,

00:13.830 --> 00:17.720
pour une raison quelconque, nous voulions une valeur par défaut pour b.

00:17.720 --> 00:20.180
Donc on sait qu'on veut être capable d'ajouter deux nombres ensemble.

00:20.180 --> 00:23.850
Mais dans le cas où vous appelez cette fonction avec un seul nombre,

00:23.850 --> 00:28.130
nous supposerons une valeur par défaut pour le deuxième argument, ou pour

00:28.130 --> 00:29.990
le deuxième paramètre.

00:29.990 --> 00:32.120
Nous pouvons le faire en ajoutant un signe égal ici dans

00:32.120 --> 00:34.980
la liste des paramètres, puis en définissant notre valeur par défaut.

00:34.980 --> 00:36.920
Qui doit bien sûr correspondre à notre type.

00:36.920 --> 00:40.020
Par exemple, un ou ce que devrait être la valeur par défaut.

00:40.020 --> 00:42.770
Et maintenant, cela nous permet d'appeler cette fonction

00:42.770 --> 00:44.080
avec un seul argument.

00:44.080 --> 00:46.700
Je pourrais donc l'appeler comme ceci et TypeScript ne

00:46.700 --> 00:48.830
se plaindrait pas parce qu'il détecte que nous

00:48.830 --> 00:50.200
avons un argument par défaut

00:50.200 --> 00:51.860
ici qui est alors pris pour b.

00:51.860 --> 00:53.910
Et donc ici j'obtiens un résultat

00:53.910 --> 00:58.910
de six parce que mon b par défaut est un et j'ajoute cinq, ce qui fait six Maintenant,

00:59.130 --> 01:03.113
une note importante sur les arguments par défaut ici.

01:04.010 --> 01:07.090
Ils doivent être les derniers de la liste.

01:07.090 --> 01:10.710
Si vous attribuez un argument par défaut à un, par exemple, nous

01:10.710 --> 01:12.640
aurons un problème, pourquoi ?

01:12.640 --> 01:15.290
Parce que les arguments par défaut ne sont pas ignorés lorsque

01:15.290 --> 01:16.840
vous appelez une fonction.

01:16.840 --> 01:19.490
Donc si j'appelle une fonction ici avec un

01:19.490 --> 01:21.990
argument, les arguments que je passe ici

01:21.990 --> 01:25.060
sont passés aux paramètres dans le même ordre.

01:25.060 --> 01:27.240
Ainsi, l'appel de la fonction avec un argument,

01:27.240 --> 01:29.900
cinq dans ce cas, passe cet argument au premier argument

01:29.900 --> 01:32.400
ici dans la liste des paramètres.

01:32.400 --> 01:34.150
Et comme le deuxième argument n'est

01:34.150 --> 01:37.660
pas fourni avec une valeur par défaut, il n'est pas facultatif.

01:37.660 --> 01:40.920
Et donc nous ne fournissons pas de second argument du tout.

01:40.920 --> 01:43.730
Ainsi, TypeScript, ou JavaScript en fait, ne regarde

01:43.730 --> 01:46.800
pas votre définition de fonction et ne devine pas que

01:46.800 --> 01:50.650
vous voulez probablement ignorer l'argument par défaut et fournir

01:50.650 --> 01:53.290
votre valeur à celui qui ne l'est pas.

01:53.290 --> 01:55.740
Au lieu de cela, il adhère simplement à l'ordre.

01:55.740 --> 01:59.720
Et par conséquent, vous devez définir les valeurs par défaut à partir de la droite.

01:59.720 --> 02:01.830
Assurez-vous donc que les paramètres pour

02:01.830 --> 02:04.010
lesquels vous n'acceptez pas d'arguments

02:04.010 --> 02:07.523
par défaut viennent en premier avant vos paramètres par défaut.
