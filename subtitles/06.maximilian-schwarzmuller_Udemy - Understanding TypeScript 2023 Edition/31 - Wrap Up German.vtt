WEBVTT

00:02.150 --> 00:04.220
-: Damit haben wir einen gründlichen Blick

00:04.220 --> 00:07.410
auf alle Kerntypen und die TypeScript-Grundlagen geworfen.

00:07.410 --> 00:11.640
Sie wissen jetzt hoffentlich, wie wir Typen erstellen und zuweisen,

00:11.640 --> 00:14.427
wie wir Variablen und Parametern Typen

00:14.427 --> 00:17.510
zuweisen und warum wir das tun.

00:17.510 --> 00:20.740
Wie sich Typzuweisungen und Typen von JavaScript-Typenprüfungen

00:20.740 --> 00:24.770
unterscheiden könnten, da JavaScript Laufzeittypen verwendet und TypeScript

00:24.770 --> 00:27.310
statische Typen verwendet, die während der Entwicklung

00:27.310 --> 00:29.400
von Bedeutung sind.

00:29.400 --> 00:31.710
Der erstellte JavaScript-Code enthält

00:31.710 --> 00:34.410
daher keine Typzuweisungen.

00:34.410 --> 00:36.550
Das schließt natürlich alle Typüberprüfungen

00:36.550 --> 00:39.060
ein, denn das ist regulärer JavaScript-Code,

00:39.060 --> 00:41.730
aber so etwas wie das hier...

00:43.050 --> 00:44.910
Dies ist in JavaScript einfach nicht erlaubt.

00:44.910 --> 00:46.280
Dies ist eine nicht unterstützte Syntax.

00:46.280 --> 00:47.960
Das ist nur für TypeScript.

00:47.960 --> 00:49.550
Das ist also hoffentlich klar.

00:49.550 --> 00:52.740
Dann haben wir uns Zahlen, Zeichenketten und Boolesche Werte

00:52.740 --> 00:55.750
angeschaut und Funktionstypen, Rückgabetypen und Argumenttypen

00:55.750 --> 00:58.510
festgelegt und auch den Typ einer Gesamtfunktion beschrieben,

00:58.510 --> 01:00.160
was hilfreich sein kann, wenn Sie

01:00.160 --> 01:02.490
eine Variable haben wollen, die eine Funktion

01:02.490 --> 01:04.780
enthält.

01:04.780 --> 01:07.890
Wir haben uns mit Objekten, Arrays und Enums beschäftigt und damit,

01:07.890 --> 01:10.140
wie interessant und hilfreich das sein kann.

01:10.140 --> 01:12.030
Dasselbe gilt für Tupel.

01:12.030 --> 01:16.160
Und jetzt haben wir uns auch Aliase angeschaut, Typen-Aliase, wo man

01:16.160 --> 01:18.605
komplexe Typen in Aliase zusammenfassen

01:18.605 --> 01:21.220
kann, die man wiederverwenden kann.

01:21.220 --> 01:23.840
Wir haben uns Literal-Typen und Union-Typen angesehen,

01:23.840 --> 01:25.840
die für Szenarien nützlich sein können,

01:25.840 --> 01:29.550
in denen Sie mehr als einen möglichen Typ erwarten.

01:29.550 --> 01:33.455
Und zum Schluss haben wir uns auch noch Unbekannt und Nie angeschaut,

01:33.455 --> 01:35.956
die zwar Nischentypen sind, aber in ihrer

01:35.956 --> 01:39.430
Nische dennoch sehr nützlich sein können.

01:39.430 --> 01:40.970
Mit diesen Grundlagen werden

01:40.970 --> 01:43.180
wir nun tiefer in einzelne Aspekte eintauchen

01:43.180 --> 01:45.630
und natürlich auch andere Typen und JavaScript-Konstrukte

01:45.630 --> 01:49.163
erkunden, bei denen Typen hilfreich sein können.
