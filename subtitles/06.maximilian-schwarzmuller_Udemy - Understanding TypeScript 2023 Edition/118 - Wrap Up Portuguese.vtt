WEBVTT

00:02.273 --> 00:05.100
Instrutor: Demos uma olhada em muitos decoradores, como

00:05.100 --> 00:06.190
você trabalha com eles,

00:06.190 --> 00:07.340
como você pode configurá-los,

00:07.340 --> 00:09.940
como você pode fazer coisas com eles, o que você pode

00:09.940 --> 00:11.367
fazer com eles.

00:11.367 --> 00:15.260
Isto, esperamos, mostra-lhe a complexidade mas também o poder dos decoradores

00:15.260 --> 00:17.340
e como você pode pensar neles, como você

00:17.340 --> 00:18.898
pode usá-los.

00:18.898 --> 00:22.370
Você não só é capaz de criar seus próprios decoradores, como

00:22.370 --> 00:24.208
também existe um rico ecossistema

00:24.208 --> 00:28.590
lá fora de embalagens e estruturas que dependem de decoradores.

00:28.590 --> 00:30.670
Por exemplo, validador de classe.

00:30.670 --> 00:32.789
Se você procura por um "validador de classe

00:32.789 --> 00:35.480
ts", você encontra um pacote que basicamente tem uma

00:35.480 --> 00:37.960
implementação mais elaborada de nossa própria

00:37.960 --> 00:41.680
lógica de validação personalizada na qual trabalhamos.

00:41.680 --> 00:44.140
Este pacote pode ser adicionado a qualquer projeto em que

00:44.140 --> 00:45.960
você esteja trabalhando, e então você pode

00:45.960 --> 00:48.030
simplesmente importar um monte de decoradores

00:48.030 --> 00:49.930
ou fábricas de decoradores, como você pode

00:49.930 --> 00:51.660
ver, já que nós os executamos aqui.

00:51.660 --> 00:53.350
Adicione-os a suas propriedades,

00:53.350 --> 00:55.650
com ou sem alguma configuração extra, dependendo

00:55.650 --> 00:57.530
do validador que for, e nos bastidores

00:57.530 --> 00:59.163
isto administrará tal registro,

00:59.163 --> 01:01.530
você poderia dizer, como objeto de configuração

01:01.530 --> 01:03.509
no final, armazenar sua configuração

01:03.509 --> 01:07.070
do validador para as diferentes propriedades em suas diferentes

01:07.070 --> 01:08.950
classes.

01:08.950 --> 01:11.810
E então, dar-lhe um método de validação, que você

01:11.810 --> 01:14.150
também importa do pacote, que você pode

01:14.150 --> 01:16.656
executar e passar seu objeto para, para aplicar

01:16.656 --> 01:19.020
toda a lógica de validação que você configurou

01:19.020 --> 01:20.540
na classe.

01:20.540 --> 01:22.840
Portanto, é basicamente fazer o que acabamos

01:22.840 --> 01:26.000
de fazer, apenas com mais validadores, e com todo o trabalho

01:26.000 --> 01:27.830
pesado feito para você.

01:27.830 --> 01:29.170
Mas é claro que ajuda a entender

01:29.170 --> 01:30.630
como isto geralmente funciona,

01:30.630 --> 01:32.370
já que aqui o construímos por conta própria,

01:32.370 --> 01:34.143
em uma versão mais ingênua.

01:35.010 --> 01:36.490
Agora, além deste pacote, é claro,

01:36.490 --> 01:38.370
temos também o Angular, por exemplo.

01:38.370 --> 01:39.541
Angular é uma estrutura,

01:39.541 --> 01:41.502
que já mencionei anteriormente,

01:41.502 --> 01:43.942
que depende muito de decoradores, como

01:43.942 --> 01:46.480
este decorador de componentes, o que permite

01:46.480 --> 01:49.214
atribuir algum código HTML dinâmico, que se

01:49.214 --> 01:51.301
encaixa também nas propriedades

01:51.301 --> 01:54.720
de suas classes, com uma sintaxe especial adicionada pela

01:54.720 --> 01:56.780
Angular, para depois renderizar

01:56.780 --> 02:00.170
algum conteúdo dinâmico na tela.

02:00.170 --> 02:01.780
Portanto, aqui a Angular faz mais do

02:01.780 --> 02:03.360
que apenas oferecer estes decoradores,

02:03.360 --> 02:06.250
mas os decoradores são uma parte central da Angular.

02:06.250 --> 02:07.280
E por último, mas não

02:07.280 --> 02:10.130
menos importante, também quero lhe mostrar o NestJS.

02:10.130 --> 02:13.190
NestJS é uma estrutura JavaScript do lado do servidor

02:13.190 --> 02:15.487
para Nodo. js, que também utiliza

02:15.487 --> 02:20.010
muito datilografia, e isto também abrange os decoradores.

02:20.010 --> 02:23.270
Lá você usa decoradores para definir controladores e

02:23.270 --> 02:26.730
rotas, os métodos que os usuários têm que usar em suas solicitações

02:26.730 --> 02:30.400
HTTP, para acionar certas funções, e também muitos outros decoradores

02:30.400 --> 02:32.687
que você pode usar para extrair dados de

02:32.687 --> 02:36.890
solicitações recebidas, e assim por diante.

02:36.890 --> 02:39.150
Portanto, aqui novamente esta estrutura também

02:39.150 --> 02:41.370
oferece todos estes decoradores para você, para

02:41.370 --> 02:44.640
que você possa simplesmente adicioná-los às suas propriedades,

02:44.640 --> 02:46.257
aos seus métodos, às suas classes

02:46.257 --> 02:48.590
e adicionar funcionalidades extras, que a estrutura

02:48.590 --> 02:50.060
então, por sua vez, também leva

02:50.060 --> 02:52.828
em conta quando executa seu código.

02:52.828 --> 02:55.417
Portanto, aqui novamente, os decoradores

02:55.417 --> 02:59.070
são usados para metaprogramação para adicionar configuração

02:59.070 --> 03:02.977
extra, lógica extra, que então é levada em consideração, neste

03:02.977 --> 03:05.700
caso, pelo código fora da estrutura, que executa

03:05.700 --> 03:07.580
seu código ou que funciona junto

03:07.580 --> 03:09.886
com seu código.

03:09.886 --> 03:12.000
E é tudo para os decoradores.

03:12.000 --> 03:14.110
Isto lhe dá uma boa visão geral do que você

03:14.110 --> 03:16.090
pode fazer com os decoradores, por que

03:16.090 --> 03:17.830
eles podem ser muito úteis e como

03:17.830 --> 03:19.563
eles geralmente funcionam.
