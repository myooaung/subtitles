WEBVTT

00:02.400 --> 00:04.350
Istruttore: Gli spazi per i nomi sono

00:04.350 --> 00:07.240
molto belli, ma non sono necessariamente perfetti.

00:07.240 --> 00:09.680
Abbiamo visto un problema nell'ultima lezione

00:09.680 --> 00:13.290
in cui ho aggiunto manualmente tutte le pendenze a ogni file.

00:13.290 --> 00:15.620
Quando rimuovo, trascino e rilascio dall'elenco

00:15.620 --> 00:17.340
dei progetti, sì ad esempio, continua

00:17.340 --> 00:18.900
a compilare senza errori.

00:18.900 --> 00:20.350
Non è l'ideale.

00:20.350 --> 00:22.360
Ora, potrebbe funzionare o meno, a seconda

00:22.360 --> 00:25.047
che qualche altro file importi il modello di trascinamento

00:25.047 --> 00:27.550
di cui, alla fine, ho bisogno.

00:27.550 --> 00:29.100
Che in questo caso sarebbe il caso.

00:29.100 --> 00:31.533
Quindi, tecnicamente, anche dopo aver rimosso

00:31.533 --> 00:33.200
questo elemento, qui funziona.

00:33.200 --> 00:35.580
Ma questo non è un bene, è piuttosto pericoloso.

00:35.580 --> 00:38.560
Se ci affidiamo al fatto che un file lo gestirà per noi,

00:38.560 --> 00:41.990
beh, se poi cancelliamo o modifichiamo quel file che ci ha salvato

00:41.990 --> 00:44.830
il culo, improvvisamente cambiamo qualcosa di totalmente

00:44.830 --> 00:49.240
estraneo e la nostra applicazione smette di funzionare.

00:49.240 --> 00:51.420
Non lo vogliamo assolutamente.

00:51.420 --> 00:53.900
Sarebbe quindi opportuno avere importazioni

00:53.900 --> 00:58.050
ed esportazioni che indichino chiaramente cosa importare da quale file.

00:58.050 --> 00:59.660
E se abbiamo bisogno di qualcosa,

00:59.660 --> 01:01.120
ad esempio Drag Target, e

01:01.120 --> 01:03.400
non lo importiamo esplicitamente, otteniamo

01:03.400 --> 01:04.840
un errore.

01:04.840 --> 01:06.450
Questo è fondamentalmente ciò che vogliamo.

01:06.450 --> 01:10.235
E questo comportamento si ottiene con i moduli ES6.

01:10.235 --> 01:12.930
Ora, i moduli ES6 esistono anche al di fuori

01:12.930 --> 01:14.800
del tipo di mondo, i browser moderni

01:14.800 --> 01:17.340
li supportano in modo nativo, dove il browser

01:17.340 --> 01:19.630
scaricherà fondamentalmente tutte

01:19.630 --> 01:22.960
le pendenze di un file quando lo esegue.

01:22.960 --> 01:25.150
Ma i tipi potrebbero anche essere importati e

01:25.150 --> 01:28.350
quindi ottenere il supporto iniziale dei tipi quando li usiamo.

01:28.350 --> 01:31.007
Come funzionano i moduli ES6?

01:31.007 --> 01:33.600
Cominciamo ancora una volta con il drag and drop.

01:33.600 --> 01:35.240
Rimuoviamo lo spazio dei nomi, che è

01:35.240 --> 01:37.360
una caratteristica puramente tipologica.

01:37.360 --> 01:40.030
Manteniamo però la parola chiave esportazione.

01:40.030 --> 01:42.150
La parola chiave export non è solo quella

01:42.150 --> 01:44.290
che permette di lavorare con gli spazi dei

01:44.290 --> 01:46.980
nomi, ma è una sintassi predefinita dello script Java

01:46.980 --> 01:49.800
che è altrettanto importante per lo script typ.

01:49.800 --> 01:52.360
Significa che si esporta questa

01:52.360 --> 01:53.600
interfase e questa

01:53.600 --> 01:56.870
qui da questo file e si può importare in un

01:56.870 --> 01:58.460
altro file.

01:58.460 --> 02:01.290
Nel nostro caso, abbiamo bisogno di questo file nei file degli elementi

02:01.290 --> 02:02.980
del progetto e dell'elenco del progetto.

02:02.980 --> 02:05.230
Ora iniziamo con l'elemento del progetto.

02:05.230 --> 02:09.030
Per importare qualcosa da un modulo ES e quindi con quella

02:09.030 --> 02:11.450
sintassi di modulo ES, si deve specificare

02:11.450 --> 02:14.440
import all'inizio del file o quasi, prima

02:14.440 --> 02:16.110
di iniziare a scrivere il

02:16.110 --> 02:18.970
codice vero e proprio.

02:18.970 --> 02:23.240
Importa da e poi si indica il file con un percorso relativo

02:23.240 --> 02:27.320
al file su cui si sta effettuando l'importazione.

02:27.320 --> 02:29.340
Quindi in questo caso dobbiamo salire di I

02:29.340 --> 02:31.030
livello con due punti e una barra.

02:31.030 --> 02:32.509
In questo modo ci troviamo nella

02:32.509 --> 02:35.550
cartella dei sorgenti e poi dobbiamo andare nella cartella dei

02:35.550 --> 02:37.450
moduli e importare il drag and drop.

02:37.450 --> 02:40.480
Ora è importante aggiungere il punto JS qui, perché

02:40.480 --> 02:43.480
è necessario importare come se questo fosse già compilato,

02:43.480 --> 02:46.470
perché questo verrà preso in considerazione nello

02:46.470 --> 02:49.130
script Java vanilla e quindi dovrebbe cercare

02:49.130 --> 02:50.860
lo script Java lì, quindi i file

02:50.860 --> 02:55.010
di script Java, quindi il punto JS deve essere aggiunto.

02:55.010 --> 02:57.560
Ora si importa qualcosa da lì e si aggiungono

02:57.560 --> 02:59.320
parentesi graffe tra le quali

02:59.320 --> 03:01.500
si specifica ciò che si vuole importare

03:01.500 --> 03:03.150
da quel file.

03:03.150 --> 03:06.430
Lì ottengo già il completamento automatico che voglio

03:06.430 --> 03:08.480
importare trascinabile.

03:08.480 --> 03:10.910
Ora draggable è disponibile qui e

03:10.910 --> 03:14.430
types vede che non è disponibile ed è contento.

03:14.430 --> 03:16.860
Ora dobbiamo convertire tutto in modo che possa essere visualizzato

03:16.860 --> 03:17.930
in fase di esecuzione.

03:17.930 --> 03:20.370
Eliminiamo quindi anche qui lo spazio dei nomi.

03:20.370 --> 03:22.340
Ora bisogna chiudere anche la parentesi graffa.

03:22.340 --> 03:24.870
E ora, per esempio, qui otteniamo ciò che vogliamo,

03:24.870 --> 03:27.540
otteniamo errori, errori di componenti, progetti,

03:27.540 --> 03:29.650
tutto questo manca.

03:29.650 --> 03:31.890
Quindi esportiamo e importiamo tutte queste cose.

03:31.890 --> 03:33.220
Ad esempio, nel componente Base

03:33.220 --> 03:34.540
eliminare lo spazio dei nomi, mantenendo

03:34.540 --> 03:36.810
la parola chiave export come si è appreso.

03:36.810 --> 03:38.270
Eliminare la parentesi graffa

03:38.270 --> 03:40.810
di chiusura, riformattare e importare il progetto.

03:40.810 --> 03:43.380
Possiamo sempre eliminare lo spazio dei nomi.

03:43.380 --> 03:45.760
E tutti i riferimenti qui, in realtà, possono essere cancellati

03:45.760 --> 03:48.803
da tutte le importazioni di riferimenti che avete ovunque.

03:51.300 --> 03:53.593
Eliminare tutte le parentesi graffe dello spazio del nome.

03:55.010 --> 03:56.950
Elenco di progetti, eliminare tutti gli spazi

03:56.950 --> 03:58.466
dei nomi e i riferimenti, eliminare

03:58.466 --> 04:00.690
la parentesi graffa di chiusura laggiù.

04:00.690 --> 04:03.320
E i decoratori, sbarazzandosi dello spazio dei nomi

04:03.320 --> 04:05.330
e della parentesi graffa di chiusura e del

04:05.330 --> 04:07.940
drag and drop, di cui ci siamo già sbarazzati.

04:07.940 --> 04:10.230
Progetto, eliminare lo spazio del nome e la

04:10.230 --> 04:11.920
parentesi graffa di chiusura.

04:11.920 --> 04:14.460
Il progetto è rimasto, senza sorprese, sbarazzandosi dello

04:14.460 --> 04:16.223
spazio dei nomi e della chiusura.

04:18.390 --> 04:22.620
Le parentesi graffe qui si basano sul fatto che il progetto è stato importato

04:22.620 --> 04:24.740
da qualche altro file, ma non c'è alcun

04:24.740 --> 04:26.620
riferimento qui.

04:26.620 --> 04:28.770
Questo è il comportamento pericoloso

04:28.770 --> 04:29.880
di cui parlavo.

04:29.880 --> 04:31.871
Questo avrebbe potuto fallire se non avessimo importato

04:31.871 --> 04:35.120
o se non avessimo fatto riferimento alla nostra parte di progetto nello spazio dei

04:35.120 --> 04:36.710
nomi in qualche altro file.

04:36.710 --> 04:39.090
Quindi non è stato assolutamente l'ideale.

04:39.090 --> 04:41.560
Ma ora continuiamo a rifattorizzare.

04:41.560 --> 04:44.430
Nella convalida qui, eliminate lo spazio del nome

04:44.430 --> 04:46.050
e tutte le parentesi graffe di

04:46.050 --> 04:47.550
chiusura qui in fondo.

04:47.550 --> 04:49.150
Infine, ma non per questo meno importante, un'applicazione

04:49.150 --> 04:51.503
TS, si sbarazza di queste importazioni e dello spazio dei nomi.

04:52.700 --> 04:55.350
Ora abbiamo errori ovunque, ma possiamo

04:55.350 --> 04:56.988
ricominciare da capo.

04:56.988 --> 04:59.560
Ora ricominciamo con il componente di base.

04:59.560 --> 05:01.610
Questo sembra buono, non si lamenta sembra

05:01.610 --> 05:03.700
avere tutto quello che vuole.

05:03.700 --> 05:06.250
L'importazione del progetto, beh, si sta lamentando.

05:06.250 --> 05:08.450
Ad esempio, è necessario un componente.

05:08.450 --> 05:12.070
Aggiungiamo quindi un import in alto e importiamo

05:12.070 --> 05:15.830
il componente dal componente base dot slash.

05:15.830 --> 05:18.410
In questo modo si importa relativamente se qualcosa si

05:18.410 --> 05:19.990
trova nella stessa cartella.

05:19.990 --> 05:22.370
Punto slash all'inizio, poi il nome

05:22.370 --> 05:24.490
del file e infine il punto JS.

05:24.490 --> 05:26.753
Non dimenticate il punto JS alla fine.

05:28.100 --> 05:30.250
Ora abbiamo bisogno anche dell'interfase

05:31.170 --> 05:34.650
validabile e del metodo validate, di auto mind e dello

05:34.650 --> 05:36.810
stato del progetto.

05:36.810 --> 05:39.140
Quindi importiamo tutte queste

05:39.140 --> 05:44.080
cose: importiamo da dot slash, o no, saliamo di un livello,

05:44.080 --> 05:46.149
poi util, poi validation

05:46.149 --> 05:49.460
dot JS, importiamo da That File, validatable

05:49.460 --> 05:52.100
e la funzione validate e importiamo

05:53.010 --> 05:56.250
autobind da, salendo di un livello, decorators

05:56.250 --> 06:00.350
autobind JS.

06:00.350 --> 06:02.600
E per ultimo, ma non meno importante, lo

06:02.600 --> 06:05.220
stato del progetto, da importare salendo di

06:05.220 --> 06:07.580
un livello, lo stato del progetto JS.

06:07.580 --> 06:11.000
Da qui possiamo importare la costante di stato del progetto

06:11.000 --> 06:13.250
che abbiamo esportato.

06:13.250 --> 06:15.390
Queste sono tutte le importazioni di cui abbiamo bisogno

06:15.390 --> 06:16.773
per far funzionare questo file.

06:18.190 --> 06:20.480
Passiamo ora al punto del progetto.

06:20.480 --> 06:23.270
Lì abbiamo bisogno di autobind, abbiamo bisogno di componenti, abbiamo

06:23.270 --> 06:24.853
bisogno del modello di progetto.

06:24.853 --> 06:26.700
Quindi aggiungiamo tutti questi elementi.

06:26.700 --> 06:30.520
Ad esempio, importiamo il modello di progetto

06:30.520 --> 06:34.523
da dot slash models project JS.

06:35.580 --> 06:38.080
Aggiungiamo anche il componente che si trova

06:39.340 --> 06:41.110
nella stessa cartella .

06:41.110 --> 06:45.530
Quindi importiamo il componente base JS di dot

06:45.530 --> 06:49.020
slash e l'auto bind, importiamo l'auto

06:50.790 --> 06:55.790
bind da dot slash decorators auto bind JS.

06:56.020 --> 06:59.383
E ora anche questo file ha tutto ciò di cui ha bisogno.

07:01.260 --> 07:03.410
Passiamo ora all'elenco dei progetti.

07:03.410 --> 07:06.610
Qui, nell'elenco progetti, abbiamo bisogno anche

07:06.610 --> 07:10.250
del componente come on e così via, quindi lo copieremo qui

07:10.250 --> 07:14.260
da project item e lo aggiungeremo all'elenco progetti TS, ma non

07:14.260 --> 07:16.120
abbiamo bisogno di draggoble

07:16.120 --> 07:19.420
qui, bensì di drag target, quindi importiamolo.

07:19.420 --> 07:22.307
Inoltre, abbiamo bisogno dello stato del progetto e dello

07:22.307 --> 07:24.550
stato di avanzamento del progetto.

07:24.550 --> 07:26.540
Sì, queste sono le cose di cui abbiamo bisogno.

07:26.540 --> 07:28.780
E anche la classe dell'elemento del progetto.

07:28.780 --> 07:31.030
Quindi dal file del modello di progetto possiamo importare

07:31.030 --> 07:32.720
anche lo stato del progetto.

07:32.720 --> 07:35.340
È possibile importare più cose esportate da uno

07:35.340 --> 07:36.840
stesso file, semplicemente

07:36.840 --> 07:38.730
separandole con una virgola tra queste

07:38.730 --> 07:41.740
parentesi graffe, proprio come si vede qui.

07:41.740 --> 07:45.910
Importiamo anche la costante di stato del progetto dalla

07:46.790 --> 07:48.790
cartella state, project

07:48.790 --> 07:52.470
state JS e importiamo anche l'ultima, ma non meno

07:52.470 --> 07:54.790
importante, qui in fondo, la classe

07:54.790 --> 07:57.130
project item.

07:57.130 --> 08:01.770
Quindi importate l'elemento del progetto da dot slash

08:01.770 --> 08:03.623
project item dot JS.

08:06.810 --> 08:08.280
Quindi andiamo avanti.

08:08.280 --> 08:11.280
L'autobind va bene, lo stato del progetto si lamenta lì,

08:11.280 --> 08:13.600
abbiamo bisogno del modello di progetto.

08:13.600 --> 08:15.740
Quindi importiamo il

08:16.820 --> 08:20.300
progetto da un livello superiore, i

08:20.300 --> 08:22.823
modelli project dot JS.

08:24.450 --> 08:27.630
Stiamo usando anche lo stato del progetto qui, quindi importiamolo

08:27.630 --> 08:29.573
dallo stesso file". E con questo, ultimo

08:32.320 --> 08:33.960
ma non meno importante, otteniamo

08:33.960 --> 08:35.660
il file TS dell'applicazione, da

08:35.660 --> 08:38.810
cui dobbiamo importare l'input del progetto.

08:38.810 --> 08:43.610
dai componenti del progetto con barra a punti in ingresso.

08:43.610 --> 08:48.030
JS e l'elenco dei progetti da project list JS". Se ora salviamo

08:49.290 --> 08:52.280
questo file, dovrebbe essere compilato

08:52.280 --> 08:54.330
senza errori e ora stiamo usando

08:54.330 --> 08:58.500
i moduli ES6 per organizzare le nostre importazioni ed

08:58.500 --> 09:00.823
esportazioni.

09:02.640 --> 09:05.460
Se però diamo un'occhiata al browser, otteniamo

09:05.460 --> 09:07.040
un errore.

09:07.040 --> 09:09.390
Ora, il motivo è che se controlliamo la cartella

09:09.390 --> 09:12.013
dist abbiamo il file JS del bundle corretto.

09:13.040 --> 09:15.900
Ora dobbiamo cambiare nuovamente la configurazione di TS.

09:15.900 --> 09:19.070
Per uno di questi, non dovremmo usare AMD

09:19.070 --> 09:22.420
ora, ma piuttosto ES ventiquattro.

09:22.420 --> 09:25.710
Than è fondamentalmente la parola in codice per ES6, la

09:25.710 --> 09:27.240
versione dello script agma

09:27.240 --> 09:29.300
che ha introdotto i moduli ES.

09:29.300 --> 09:31.260
In pratica, stiamo dicendo al tipo di

09:31.260 --> 09:34.480
script di non trasformare le nostre importazioni in nulla, ma

09:34.480 --> 09:36.240
di mantenerle così come sono.

09:36.240 --> 09:39.250
I browser moderni lo capiranno.

09:39.250 --> 09:41.290
È importante, quindi, assicurarsi

09:41.290 --> 09:43.433
di avere un target di ES6 o superiore".

09:44.950 --> 09:47.530
Ora si dovrebbe anche commentare di nuovo il

09:47.530 --> 09:50.670
file out, perché non è supportato dai moduli ES.

09:50.670 --> 09:53.590
Con questo, ciò che si ottiene nella cartella dist

09:53.590 --> 09:56.610
è fondamentalmente una replica della cartella sorgente,

09:56.610 --> 09:58.690
ma con i file di script Java.

09:58.690 --> 10:00.480
Ora dobbiamo tornare al file HDML

10:00.480 --> 10:03.120
dell'indice e importare di nuovo l'app JS, perché

10:03.120 --> 10:04.840
ora abbiamo un file app JS nella

10:04.840 --> 10:06.350
cartella dist.

10:06.350 --> 10:08.910
E ancora, questo file JS dell'applicazione conterrà le

10:08.910 --> 10:11.180
dichiarazioni di importazione, perché, come ho

10:11.180 --> 10:13.830
detto, questo è supportato da Java script, dai moderni motori

10:13.830 --> 10:15.900
di Java script e dai moderni browser.

10:15.900 --> 10:17.440
Il browser risolverà quindi

10:17.440 --> 10:19.440
queste importazioni per voi.

10:19.440 --> 10:22.430
Quindi se ora ricarichiamo questo, otteniamo

10:22.430 --> 10:24.240
ancora un errore.

10:24.240 --> 10:27.310
Non si può usare l'istruzione import al di fuori di un modulo.

10:27.310 --> 10:30.630
I browser moderni supportano questo sintex, ma è necessario

10:30.630 --> 10:33.150
dirgli che lo si vuole utilizzare.

10:33.150 --> 10:37.470
E lo si dice rimuovendo il (borbottio) qui e invece nel tag script,

10:37.470 --> 10:39.670
dove si importa un file che ha queste

10:39.670 --> 10:42.777
dichiarazioni di importazione.

10:42.777 --> 10:46.313
Si usa il tipo uguale al modulo.

10:47.300 --> 10:50.450
Se ora si salva questo, si vede che funziona e

10:50.450 --> 10:53.440
se si aggiunge qualcosa qui si ottiene di nuovo

10:53.440 --> 10:56.120
un'applicazione funzionante.

10:56.120 --> 10:58.910
Ora, se ispezionate la scheda Rete, vedrete

10:58.910 --> 11:01.680
che se ricaricate, ci sono un sacco di richieste

11:01.680 --> 11:05.290
di rete in corso; se ingrandisco un po', possiamo vederle

11:05.290 --> 11:07.410
meglio.

11:07.410 --> 11:10.340
Tutti i nostri file di script Java sono richiesti qui.

11:10.340 --> 11:12.810
Vengono richiesti automaticamente dal browser quando

11:12.810 --> 11:14.780
incontra la nostra importazione.

11:14.780 --> 11:16.967
Quindi inizia con il JS dell'applicazione, poi

11:16.967 --> 11:19.410
vede l'importazione del JS di input del progetto.

11:19.410 --> 11:21.990
Qui e quindi, naturalmente, la richiesta successiva va

11:21.990 --> 11:23.160
all'input del progetto.

11:23.160 --> 11:25.410
Fa lo stesso anche per l'elenco dei progetti.

11:25.410 --> 11:27.360
Ora, nell'input del progetto, ad esempio,

11:27.360 --> 11:29.422
vedrebbe un input dal componente JS di

11:29.422 --> 11:31.450
base, motivo per cui importa anche il

11:31.450 --> 11:33.400
componente JS di base.

11:33.400 --> 11:35.530
Questo viene fatto dal browser e noi ne

11:35.530 --> 11:38.170
approfittiamo e ora abbiamo un altro modo di dividere

11:38.170 --> 11:40.850
i nostri file, ma con l'ulteriore vantaggio di

11:40.850 --> 11:43.750
dichiarare chiaramente ciò che ci serve da ogni file

11:43.750 --> 11:45.850
e se omettiamo un'importazione, type-script

11:45.850 --> 11:49.100
ci sgrida, cosa che non faceva con l'approccio precedente,

11:49.100 --> 11:51.127
per cui questo approccio è in realtà

11:51.127 --> 11:53.400
la mia raccomandazione e il motivo per cui

11:53.400 --> 11:58.870
è il modo standard definitivo di importare ed esportare.

11:58.870 --> 12:00.710
Ora, se avete già lavorato

12:00.710 --> 12:03.850
con il tipo di script in altri progetti, per esempio

12:03.850 --> 12:06.380
in un progetto Angular, potreste essere

12:06.380 --> 12:09.270
abituati a non dover specificare l'estensione

12:09.270 --> 12:12.210
del file in questo caso.

12:12.210 --> 12:14.580
Finché non abbiamo questa opzione e ci affidiamo

12:14.580 --> 12:16.870
al browser per importare i nostri file, è necessario

12:16.870 --> 12:18.833
aggiungere un'estensione extra.
