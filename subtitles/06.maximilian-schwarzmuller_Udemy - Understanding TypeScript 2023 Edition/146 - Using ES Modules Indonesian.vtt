WEBVTT

00:02.400 --> 00:04.350
Instruktur: Ruang nama cukup

00:04.350 --> 00:07.240
bagus, tetapi belum tentu sempurna.

00:07.240 --> 00:09.680
Kita melihat satu masalah dalam kuliah terakhir,

00:09.680 --> 00:13.290
di mana saya secara manual menambahkan semua pendensi ke setiap file.

00:13.290 --> 00:15.620
Ketika saya hapus, seret dan lepas dari daftar

00:15.620 --> 00:17.340
proyek, ya misalnya, itu masih mengkompilasi

00:17.340 --> 00:18.900
tanpa kesalahan.

00:18.900 --> 00:20.350
Ini tidak ideal.

00:20.350 --> 00:22.360
Sekarang, ini mungkin atau mungkin tidak bekerja,

00:22.360 --> 00:25.047
tergantung pada apakah beberapa file lain mengimpor model drag-drop

00:25.047 --> 00:26.590
yang pada akhirnya saya perlukan di

00:26.590 --> 00:27.550
sini.

00:27.550 --> 00:29.100
Yang di sini akan menjadi kasusnya.

00:29.100 --> 00:31.533
Jadi secara teknis, bahkan setelah menghapus

00:31.533 --> 00:33.200
ini, ini berfungsi di sini.

00:33.200 --> 00:35.580
Tetapi ini tidak bagus, ini cukup berbahaya.

00:35.580 --> 00:38.560
Jika kita mengandalkan fakta bahwa beberapa file akan menanganinya

00:38.560 --> 00:41.990
untuk kita, jika kita kemudian menghapus atau mengubah file yang

00:41.990 --> 00:44.830
menyelamatkan kita, kita tiba-tiba mengubah sesuatu

00:44.830 --> 00:47.740
yang sama sekali tidak terkait dan aplikasi kita berhenti

00:47.740 --> 00:49.240
bekerja.

00:49.240 --> 00:51.420
Kita pasti tidak menginginkan hal itu.

00:51.420 --> 00:53.900
Jadi, alangkah baiknya jika kita memiliki impor

00:53.900 --> 00:58.050
dan ekspor yang secara jelas menyatakan apa yang kita impor dari file mana.

00:58.050 --> 00:59.660
Dan jika kita membutuhkan sesuatu

00:59.660 --> 01:01.120
di sini, Drag Target misalnya,

01:01.120 --> 01:03.400
dan kita tidak mengimpornya secara eksplisit, kita

01:03.400 --> 01:04.840
mendapatkan kesalahan.

01:04.840 --> 01:06.450
Itulah pada dasarnya yang kita inginkan.

01:06.450 --> 01:10.235
Dan kita mendapatkan perilaku ini dengan modul ES6.

01:10.235 --> 01:12.930
Sekarang, modul ES6 juga ada di luar jenis

01:12.930 --> 01:14.800
dunia, browser modern mendukungnya

01:14.800 --> 01:17.340
secara native, di mana browser kemudian

01:17.340 --> 01:19.630
pada dasarnya akan mengunduh semua

01:19.630 --> 01:22.960
pendensi file saat dijalankan.

01:22.960 --> 01:25.150
Tetapi tipe juga bisa mengimpornya dan kemudian

01:25.150 --> 01:28.350
mendapat dukungan tipe awal ketika kita menggunakannya.

01:28.350 --> 01:31.007
Sekarang, bagaimana cara kerja modul ES6?

01:31.007 --> 01:33.600
Mari kita mulai lagi dengan seret dan lepas.

01:33.600 --> 01:35.240
Mari kita hapus hal ruang nama

01:35.240 --> 01:37.360
yang merupakan fitur tipe murni.

01:37.360 --> 01:40.030
Namun, mari kita tetap menggunakan kata kunci ekspor.

01:40.030 --> 01:42.150
Kata kunci ekspor bukan hanya ada untuk

01:42.150 --> 01:44.290
bekerja dengan ruang nama, itu sebenarnya

01:44.290 --> 01:46.980
sintaks skrip Java default yang semuanya sama

01:46.980 --> 01:49.800
pentingnya dengan skrip ketik.

01:49.800 --> 01:52.360
Ini berarti bahwa Anda mengekspor interfase

01:52.360 --> 01:53.600
ini dan yang ini di sini

01:53.600 --> 01:56.870
juga dari file ini dan Anda kemudian dapat mengimpornya

01:56.870 --> 01:58.460
ke file lain.

01:58.460 --> 02:01.290
Dalam kasus kita di sini, kita memerlukannya dalam file

02:01.290 --> 02:02.980
item proyek dan daftar proyek.

02:02.980 --> 02:05.230
Sekarang mari kita mulai dengan item proyek.

02:05.230 --> 02:09.030
Untuk mengimpor sesuatu dari modul ES sehingga dengan

02:09.030 --> 02:11.450
sintaks modul ES itu, Anda menentukan

02:11.450 --> 02:14.440
impor di bagian atas file atau di dekat bagian

02:14.440 --> 02:16.110
atas file sebelum Anda mulai

02:16.110 --> 02:18.970
menulis kode yang sebenarnya.

02:18.970 --> 02:23.240
Import from dan kemudian Anda arahkan ke file itu dengan

02:23.240 --> 02:27.320
jalur relatif dari file yang Anda impor.

02:27.320 --> 02:29.340
Jadi dalam hal ini kita perlu naik tingkat I

02:29.340 --> 02:31.030
dengan dua titik dan garis miring.

02:31.030 --> 02:32.509
Sehingga kita berada di folder

02:32.509 --> 02:35.550
sumber, dan kemudian kita perlu pergi ke sini ke folder modul

02:35.550 --> 02:37.450
dan mengimpor drag and drop.

02:37.450 --> 02:40.480
Sekarang penting, tambahkan dot JS disini, karena

02:40.480 --> 02:43.480
Anda perlu mengimpor seolah-olah ini sudah dikompilasi,

02:43.480 --> 02:46.470
karena ini akan dibawa ke dalam vanilla Java script

02:46.470 --> 02:50.860
dan kemudian harus mencari Java script disana jadi untuk file Java

02:50.860 --> 02:55.010
script jadi dot JS perlu ditambahkan.

02:55.010 --> 02:57.560
Sekarang Anda mengimpor sesuatu dari sana dan untuk kemudian

02:57.560 --> 02:59.320
Anda menambahkan tanda kurung kurawal

02:59.320 --> 03:01.500
di antaranya Anda menentukan apa yang ingin Anda

03:01.500 --> 03:03.150
impor dari file itu.

03:03.150 --> 03:06.430
Di sana saya sudah mendapatkan penyelesaian otomatis

03:06.430 --> 03:08.480
saya ingin mengimpor draggable.

03:08.480 --> 03:10.910
Sekarang draggable tersedia di sini dan

03:10.910 --> 03:14.430
types melihat bahwa itu tidak tersedia dan senang.

03:14.430 --> 03:16.860
Sekarang kita perlu mengonversi semuanya sehingga dapat ditampilkan

03:16.860 --> 03:17.930
pada waktu berjalan.

03:17.930 --> 03:20.370
Jadi, mari kita singkirkan juga ruang nama di sini.

03:20.370 --> 03:22.340
Sekarang harus menutup brace keriting juga.

03:22.340 --> 03:24.870
Dan sekarang misalnya di sini sekarang kita mendapatkan apa yang

03:24.870 --> 03:27.540
kita inginkan, kita mendapatkan kesalahan, kita mendapatkan kesalahan

03:27.540 --> 03:29.650
komponen, proyek, ini semua hilang.

03:29.650 --> 03:31.890
Jadi, mari kita ekspor dan impor semua hal ini.

03:31.890 --> 03:33.220
Misalnya dalam komponen dasar

03:33.220 --> 03:34.540
singkirkan ruang nama, simpan

03:34.540 --> 03:36.810
kata kunci ekspor seperti yang Anda pelajari.

03:36.810 --> 03:38.270
Singkirkan kurung kurawal

03:38.270 --> 03:40.810
penutup dan format ulang serta impor proyek.

03:40.810 --> 03:43.380
Kita selalu bisa menyingkirkan ruang nama.

03:43.380 --> 03:45.760
Dan semua referensi di sini, Anda sebenarnya dapat

03:45.760 --> 03:48.803
menghapus semua impor referensi yang Anda miliki di mana saja.

03:51.300 --> 03:53.593
Singkirkan semua nama ruang kurung kurawal.

03:55.010 --> 03:56.950
Daftar proyek, singkirkan semua ruang

03:56.950 --> 03:58.466
nama dan referensi, singkirkan

03:58.466 --> 04:00.690
kurung kurawal penutup di bawah sana.

04:00.690 --> 04:03.320
Dan dekorator, singkirkan ruang nama dan kurung

04:03.320 --> 04:05.330
kurawal penutup dan seret dan lepas,

04:05.330 --> 04:07.940
kita sudah menyingkirkannya.

04:07.940 --> 04:10.230
Proyek, singkirkan spasi nama dan

04:10.230 --> 04:11.920
kurung kurawal penutup.

04:11.920 --> 04:14.460
Proyek tetap tidak mengejutkan menyingkirkan

04:14.460 --> 04:16.223
ruang nama dan penutup.

04:18.390 --> 04:22.620
Penjepit keriting di sini kami sebenarnya mengandalkan proyek yang diimpor oleh

04:22.620 --> 04:24.740
beberapa file lain, saya tidak memiliki

04:24.740 --> 04:26.620
referensi untuk itu di sini.

04:26.620 --> 04:28.770
Jadi, itulah perilaku berbahaya yang

04:28.770 --> 04:29.880
saya bicarakan.

04:29.880 --> 04:31.871
Hal ini bisa saja gagal jika kita tidak mengimpor

04:31.871 --> 04:35.120
atau jika kita tidak mereferensikan bagian proyek kita dalam ruang nama

04:35.120 --> 04:36.710
di beberapa file lain.

04:36.710 --> 04:39.090
Jadi, itu jelas tidak ideal.

04:39.090 --> 04:41.560
Tetapi dengan itu mari kita lanjutkan refactoring kita.

04:41.560 --> 04:44.430
Dalam validasi di sini singkirkan ruang nama di sini dan

04:44.430 --> 04:46.050
semua kurung kurawal penutup

04:46.050 --> 04:47.550
di sini di bagian bawah.

04:47.550 --> 04:49.150
Dan yang terakhir namun tidak kalah pentingnya

04:49.150 --> 04:51.503
adalah aplikasi TS, singkirkan impor ini dan dari ruang nama.

04:52.700 --> 04:55.350
Jadi sekarang kita mendapat kesalahan di mana-mana, tetapi sekarang

04:55.350 --> 04:56.988
kita bisa memulai dari awal.

04:56.988 --> 04:59.560
Sekarang mari kita mulai lagi dari komponen dasar.

04:59.560 --> 05:01.610
Ini terlihat bagus, tidak mengeluh tampaknya

05:01.610 --> 05:03.700
memiliki semua yang diinginkannya.

05:03.700 --> 05:06.250
Proyek impor, yah, itu mengeluh.

05:06.250 --> 05:08.450
Misalnya di sana kita perlu komponen.

05:08.450 --> 05:12.070
Jadi mari kita tambahkan impor di bagian atas dan mari

05:12.070 --> 05:15.830
kita impor komponen dari komponen dasar dot slash.

05:15.830 --> 05:18.410
Beginilah cara Anda mengimpor secara relatif jika ada

05:18.410 --> 05:19.990
sesuatu di folder yang sama.

05:19.990 --> 05:22.370
Tanda garis miring di awal, kemudian nama file dan

05:22.370 --> 05:24.490
kemudian yang penting adalah titik JS.

05:24.490 --> 05:26.753
Jangan lupa titik JS di bagian akhir.

05:28.100 --> 05:30.250
Sekarang kita juga membutuhkan

05:31.170 --> 05:34.650
validatable interphase di sini dan metode validate,

05:34.650 --> 05:36.810
auto mind dan project state.

05:36.810 --> 05:39.140
Jadi mari kita impor semua hal

05:39.140 --> 05:44.080
ini mari kita impor dari dot slash, atau tidak naik satu tingkat

05:44.080 --> 05:46.149
kemudian memanfaatkan kemudian

05:46.149 --> 05:49.460
validasi dot JS, mari kita impor dari File

05:49.460 --> 05:52.100
Itu, validatable dan fungsi validasi

05:53.010 --> 05:56.250
dan impor auto bind dari, naik satu tingkat

05:56.250 --> 06:00.350
dekorator autobind JS.

06:00.350 --> 06:02.600
Dan yang terakhir tetapi tidak kalah pentingnya,

06:02.600 --> 06:05.220
status proyek mari kita impor dari naik satu tingkat

06:05.220 --> 06:07.580
status proyek negara bagian JS.

06:07.580 --> 06:11.000
Dari sana kita bisa mengimpor konstanta status proyek

06:11.000 --> 06:13.250
yang kita ekspor di sana.

06:13.250 --> 06:15.390
Sekarang ini semua impor yang kita perlukan di sini untuk

06:15.390 --> 06:16.773
membuat file ini berfungsi.

06:18.190 --> 06:20.480
Jadi, mari kita beralih ke item proyek sekarang.

06:20.480 --> 06:23.270
Di sana kita membutuhkan autobind, kita membutuhkan komponen,

06:23.270 --> 06:24.853
kita membutuhkan model proyek.

06:24.853 --> 06:26.700
Jadi, mari kita tambahkan semua hal ini.

06:26.700 --> 06:30.520
Mari kita misalnya mengimpor model proyek

06:30.520 --> 06:34.523
dari proyek model dot dot slash JS.

06:35.580 --> 06:38.080
Mari kita juga menambahkan komponen yang

06:39.340 --> 06:41.110
berada di folder yang sama .

06:41.110 --> 06:45.530
Jadi impor dot slash base component JS dan

06:45.530 --> 06:49.020
auto bind, mari kita impor auto bind

06:50.790 --> 06:55.790
dari dot dot slash decorators auto bind JS.

06:56.020 --> 06:59.383
Dan sekarang file ini di sini juga memiliki segala yang dibutuhkannya.

07:01.260 --> 07:03.410
Sekarang mari kita beralih ke daftar proyek.

07:03.410 --> 07:06.610
Di sini, di daftar proyek kita juga membutuhkan komponen

07:06.610 --> 07:10.250
seperti pada seterusnya, jadi kita akan menyalinnya di sini dari

07:10.250 --> 07:14.260
item proyek, tambahkan ke daftar proyek TS, tetapi kita tidak perlu draggoble

07:14.260 --> 07:16.120
di sini tetapi untuk menyeret target

07:16.120 --> 07:19.420
sebagai gantinya, jadi mari kita impor itu.

07:19.420 --> 07:22.307
Dan selain itu kita membutuhkan status

07:22.307 --> 07:24.550
proyek status proyek.

07:24.550 --> 07:26.540
Ya, inilah hal-hal yang kita butuhkan.

07:26.540 --> 07:28.780
Dan juga kelas item proyek.

07:28.780 --> 07:31.030
Jadi dari file model proyek kita juga bisa

07:31.030 --> 07:32.720
mengimpor status proyek.

07:32.720 --> 07:35.340
Anda dapat mengimpor beberapa hal yang diekspor dari

07:35.340 --> 07:36.840
satu file yang sama hanya dengan

07:36.840 --> 07:38.730
memisahkannya dengan koma di antara tanda

07:38.730 --> 07:41.740
kurung kurawal ini seperti yang Anda lihat di sini.

07:41.740 --> 07:45.910
Kita juga mengimpor konstanta status proyek dari folder

07:46.790 --> 07:48.790
status, status proyek JS dan

07:48.790 --> 07:52.470
juga mengimpor yang terakhir, di sini di bagian

07:52.470 --> 07:54.790
paling bawah yang kita butuhkan,

07:54.790 --> 07:57.130
kelas item proyek.

07:57.130 --> 08:01.770
Jadi impor item proyek dari dot slash item

08:01.770 --> 08:03.623
proyek dot JS.

08:06.810 --> 08:08.280
Jadi mari kita lanjutkan.

08:08.280 --> 08:11.280
Autobind baik-baik saja, status proyek mengeluh di

08:11.280 --> 08:13.600
sana kita membutuhkan model proyek.

08:13.600 --> 08:15.740
Jadi di atas mari kita

08:16.820 --> 08:20.300
impor proyek dari naik satu tingkat

08:20.300 --> 08:22.823
model proyek dot JS.

08:24.450 --> 08:27.630
Kita juga menggunakan status proyek di sini jadi mari kita impor

08:27.630 --> 08:29.573
dari file yang sama' Dan dengan itu, yang

08:32.320 --> 08:33.960
terakhir tetapi tidak kalah pentingnya

08:33.960 --> 08:35.660
kita mendapatkan file TS aplikasi

08:35.660 --> 08:38.810
di sana kita perlu mengimpor input proyek.

08:38.810 --> 08:43.610
dari masukan proyek komponen garis miring titik.

08:43.610 --> 08:48.030
JS dan daftar proyek dari daftar proyek JS' Jika kita sekarang

08:49.290 --> 08:52.280
menyimpan ini, itu harus dikompilasi

08:52.280 --> 08:54.330
tanpa kesalahan dan sekarang

08:54.330 --> 08:58.500
kita menggunakan modul ES6 untuk mengatur impor dan

08:58.500 --> 09:00.823
ekspor kita.

09:02.640 --> 09:05.460
Jika kita melihat pada browser, kita mendapat

09:05.460 --> 09:07.040
kesalahan.

09:07.040 --> 09:09.390
Sekarang alasannya adalah jika kita memeriksa folder

09:09.390 --> 09:12.013
dist, kita mendapatkan file JS bundel kita dengan benar.

09:13.040 --> 09:15.900
Sekarang kita perlu mengganti konfigurasi TS lagi.

09:15.900 --> 09:19.070
Untuk satu di sini, kita seharusnya tidak menggunakan

09:19.070 --> 09:22.420
AMD sekarang, melainkan ES dua puluh lima belas.

09:22.420 --> 09:25.710
Than pada dasarnya adalah kata kode untuk ES6 yang merupakan

09:25.710 --> 09:27.240
versi skrip agma yang memperkenalkan

09:27.240 --> 09:29.300
modul ES.

09:29.300 --> 09:31.260
Jadi, pada dasarnya kita mengatakan

09:31.260 --> 09:34.480
kepada type script jangan mengubah impor kita menjadi apa pun,

09:34.480 --> 09:36.240
tetaplah seperti apa adanya.

09:36.240 --> 09:39.250
Browser modern akan memahaminya.

09:39.250 --> 09:41.290
Jadi itu penting, pastikan juga Anda memiliki

09:41.290 --> 09:43.433
target ES6 atau lebih tinggi di sini 'Anda

09:44.950 --> 09:47.530
sekarang juga harus mengomentari file out lagi,

09:47.530 --> 09:50.670
karena itu tidak didukung dengan modul ES.

09:50.670 --> 09:53.590
Dan dengan itu apa yang Anda dapatkan di folder dist

09:53.590 --> 09:56.610
pada dasarnya adalah replikasi dari folder sumber Anda

09:56.610 --> 09:58.690
tetapi dengan file skrip Java.

09:58.690 --> 10:00.480
Jadi sekarang kita juga perlu kembali

10:00.480 --> 10:03.120
ke file HDML indeks dan mengimpor app JS lagi, karena

10:03.120 --> 10:04.840
kita punya file app JS di folder

10:04.840 --> 10:06.350
dist sekarang.

10:06.350 --> 10:08.910
Dan lagi-lagi file JS aplikasi ini akan memiliki pernyataan

10:08.910 --> 10:11.180
impor di dalamnya, karena, seperti yang saya sebutkan,

10:11.180 --> 10:13.830
ini didukung oleh skrip Java, oleh mesin skrip Java modern

10:13.830 --> 10:15.900
dan oleh browser modern.

10:15.900 --> 10:17.440
Dan karena itu, browser akan

10:17.440 --> 10:19.440
menyelesaikan impor ini untuk Anda.

10:19.440 --> 10:22.430
Jadi kalau sekarang kita reload ini, ya kita

10:22.430 --> 10:24.240
masih mendapatkan error.

10:24.240 --> 10:27.310
Tidak bisa menggunakan pernyataan impor di luar modul.

10:27.310 --> 10:30.630
Peramban modern mendukung sintex ini tetapi Anda harus memberi

10:30.630 --> 10:33.150
tahu mereka bahwa Anda ingin menggunakannya.

10:33.150 --> 10:37.470
Dan Anda memberi tahu mereka dengan menghapus (bergumam) di sini dan sebagai

10:37.470 --> 10:39.670
gantinya pada tag skrip, di mana Anda mengimpor

10:39.670 --> 10:42.777
file yang memiliki pernyataan impor ini.

10:42.777 --> 10:46.313
Anda menggunakan modul type equals.

10:47.300 --> 10:50.450
Jika Anda sekarang mengamankan ini, Anda melihat ini berfungsi

10:50.450 --> 10:53.440
dan sekarang jika kita menambahkan sesuatu di sini kita

10:53.440 --> 10:56.120
mendapatkan aplikasi yang berfungsi lagi.

10:56.120 --> 10:58.910
Sekarang jika Anda memeriksa tab jaringan, Anda akan

10:58.910 --> 11:01.680
melihat bahwa jika Anda memuat ulang, ada banyak permintaan

11:01.680 --> 11:05.290
jaringan yang terjadi, jika saya memperkecil sedikit, kita dapat melihatnya

11:05.290 --> 11:07.410
dengan lebih baik.

11:07.410 --> 11:10.340
Semua file skrip Java kami diminta di sini.

11:10.340 --> 11:12.810
Mereka diminta secara otomatis oleh browser

11:12.810 --> 11:14.780
ketika menemukan impor kami.

11:14.780 --> 11:16.967
Jadi dimulai dengan JS aplikasi, kemudian

11:16.967 --> 11:19.410
melihat impor ke JS input proyek.

11:19.410 --> 11:21.990
Di sini dan karenanya tentu saja permintaan berikutnya

11:21.990 --> 11:23.160
masuk ke input proyek.

11:23.160 --> 11:25.410
Ini juga melakukan hal yang sama untuk daftar proyek.

11:25.410 --> 11:27.360
Sekarang di project input misalnya,

11:27.360 --> 11:29.422
ia akan melihat input dari komponen dasar

11:29.422 --> 11:31.450
JS, oleh karena itu ia juga mengimpor

11:31.450 --> 11:33.400
prob komponen dasar JS.

11:33.400 --> 11:35.530
Jadi itu dilakukan oleh browser di sini kita

11:35.530 --> 11:38.170
memanfaatkannya dan sekarang kita memiliki cara lain

11:38.170 --> 11:40.850
untuk memisahkan file kita tetapi dengan keuntungan tambahan

11:40.850 --> 11:43.750
bahwa kita dengan jelas menyatakan apa yang kita butuhkan

11:43.750 --> 11:45.850
dari setiap file dan jika kita menghilangkan

11:45.850 --> 11:49.100
impor, type-script berteriak pada kita, yang tidak dilakukan dengan

11:49.100 --> 11:51.127
pendekatan sebelumnya, yang merupakan cara

11:51.127 --> 11:53.400
pendekatan ini sebenarnya adalah rekomendasi

11:53.400 --> 11:56.670
saya dan mengapa ini adalah cara standar defacto untuk mengimpor dan

11:56.670 --> 11:58.870
mengekspor.

11:58.870 --> 12:00.710
Sekarang, jika Anda telah bekerja dengan

12:00.710 --> 12:03.850
type script sebelumnya di proyek lain, katakanlah dalam proyek angular,

12:03.850 --> 12:06.380
Anda mungkin juga terbiasa tidak harus menentukan ekstensi

12:06.380 --> 12:07.980
file di sini Nah, kita juga akan dapat

12:07.980 --> 12:09.270
menghilangkannya setelah kita

12:09.270 --> 12:12.210
menambahkan paket web dan alat tagihan.

12:12.210 --> 12:14.580
Selama kita tidak memilikinya dan kita mengandalkan

12:14.580 --> 12:16.870
browser untuk mengimpor file kita, Anda perlu menambahkan

12:16.870 --> 12:18.833
ekstensi tambahan itu.
