WEBVTT

00:02.180 --> 00:04.432
-: Ora, una fonte comune di confusione,

00:04.432 --> 00:06.300
che voglio chiarire qui, è la differenza

00:06.300 --> 00:09.030
tra i tipi Generics e Union.

00:09.030 --> 00:11.950
Perché confondere queste due cose?

00:11.950 --> 00:14.440
Ad esempio, il nostro archivio dati.

00:14.440 --> 00:16.260
Se accettiamo tipi generici

00:16.260 --> 00:19.240
basati su questi tipi, potremmo anche

00:19.240 --> 00:21.157
riscriverli per dire: "Vogliamo

00:21.157 --> 00:23.750
memorizzare stringhe, numeri o

00:23.750 --> 00:27.610
booleani qui dentro, giusto? Quindi, potremmo memorizzarlo o, per essere precisi, avvolgerlo

00:27.610 --> 00:30.470
tra parentesi in modo da dire che uno di questi

00:30.470 --> 00:32.660
tipi è un array.

00:32.660 --> 00:35.040
Poi, naturalmente, potremmo anche dire: "Quando

00:35.040 --> 00:37.017
aggiungiamo un elemento, questo è una

00:37.017 --> 00:38.420
stringa, un numero o un booleano;

00:38.420 --> 00:39.740
quando lo rimuoviamo, è lo

00:39.740 --> 00:41.120
stesso". Qual è il problema di questo approccio?

00:41.120 --> 00:43.007
A prima vista, potrebbe sembrare che ottenga lo stesso risultato,

00:44.424 --> 00:45.880
ma in realtà fa qualcosa di completamente diverso.

00:45.880 --> 00:49.630
Ciò che stiamo dicendo è che stiamo memorizzando qualsiasi

00:49.630 --> 00:52.310
tipo di dato, purché sia un array di stringhe,

00:52.310 --> 00:53.710
numeri o booleani, e stiamo

00:53.710 --> 00:55.690
anche aggiungendo qualsiasi

00:55.690 --> 00:57.220
tipo di dato, sia esso una

00:57.220 --> 00:59.730
stringa, un numero o un booleano, e lo stesso

00:59.730 --> 01:02.930
vale per la rimozione.

01:02.930 --> 01:04.670
Ora, abbiamo già degli errori qui sotto, ovviamente,

01:04.670 --> 01:06.650
perché non posso più inizializzare questo in modo generico.

01:06.650 --> 01:09.830
Ma, a parte questo, funziona.

01:09.830 --> 01:12.520
Ora, il problema, tuttavia, è che per uno dei due qui

01:12.520 --> 01:14.420
sopra, non stiamo dicendo che questo

01:14.420 --> 01:15.890
è un array di stringhe, o un array

01:15.890 --> 01:18.260
di numeri, o un array di booleani.

01:18.260 --> 01:20.630
Questo dice che abbiamo un array

01:20.630 --> 01:24.190
che può contenere stringhe, numeri e booleani.

01:24.190 --> 01:26.290
Quindi, se si vuole dire un array

01:26.290 --> 01:30.190
di stringhe o un array di numeri, si deve dire array

01:30.190 --> 01:32.100
di stringhe, array di numeri

01:32.100 --> 01:34.403
o array booleano.

01:34.403 --> 01:36.020
Possiamo farlo, ma ora abbiamo un problema.

01:36.020 --> 01:39.100
Ora, stiamo aggiungendo una stringa, un numero

01:39.100 --> 01:41.660
o un booleano, ma a seconda di come abbiamo

01:41.660 --> 01:44.710
impostato questo array di dati, un array di numeri,

01:44.710 --> 01:46.750
un array di booleani o un array di

01:46.750 --> 01:50.270
stringhe, non possiamo aggiungere un numero, un booleano

01:50.270 --> 01:52.320
o una stringa.

01:52.320 --> 01:54.140
Se impostiamo questo array come stringa,

01:54.140 --> 01:55.870
non possiamo aggiungere un numero.

01:55.870 --> 01:57.833
Tuttavia, qui mi va bene qualsiasi parametro, purché

01:57.833 --> 01:59.800
sia un numero, un booleano o una stringa.

01:59.800 --> 02:02.850
Il problema è quindi rappresentato dai tipi di Unione.

02:02.850 --> 02:05.670
Accettiamo uno qualsiasi di questi valori ogni volta

02:05.670 --> 02:08.380
che viene chiamato questo metodo o questo metodo.

02:08.380 --> 02:11.053
Quindi, non stiamo dicendo: "Ehi, ogni volta che

02:11.053 --> 02:14.250
lavoriamo con questa classe, dovete scegliere un tipo e attenervi

02:14.250 --> 02:15.397
a quello, ma stiamo dicendo

02:15.397 --> 02:18.150
che ogni volta che chiamate questo metodo siete liberi

02:18.150 --> 02:21.830
di usare uno qualsiasi di questi tipi".

02:21.830 --> 02:23.440
Non è esattamente quello che vogliamo qui.

02:23.440 --> 02:26.150
Se si torna alla configurazione precedente,

02:26.150 --> 02:29.640
in cui si usavano tipi generici, si ottiene

02:29.640 --> 02:33.050
una configurazione diversa.

02:33.050 --> 02:34.810
In questo caso, si deve scegliere

02:37.580 --> 02:39.450
una volta il tipo di dati che si desidera

02:39.450 --> 02:42.060
memorizzare e poi si può aggiungere solo quel

02:42.060 --> 02:43.950
tipo esatto di dati.

02:43.950 --> 02:45.750
Quindi, se aggiungo un numero,

02:45.750 --> 02:48.523
per esempio, ricevo un errore perché non è una stringa

02:49.710 --> 02:52.623
e si vede che voglio gestire solo le stringhe quando

02:53.830 --> 02:54.730
imposto il tipo

02:54.730 --> 02:56.170
generico.

02:56.170 --> 02:57.810
Questa è la differenza tra tipi di unione e tipi generici.

02:57.810 --> 03:01.250
I tipi Union possono essere ottimi se si vuole avere

03:01.250 --> 03:05.040
una funzione che si può chiamare con uno di questi tipi ogni

03:05.040 --> 03:06.920
volta che la si chiama.

03:06.920 --> 03:08.690
I tipi generici sono ottimi

03:08.690 --> 03:11.570
se si vuole bloccare un certo tipo.

03:11.570 --> 03:13.460
Utilizzare lo stesso tipo per tutta

03:13.460 --> 03:15.510
l'istanza di classe creata.

03:15.510 --> 03:18.380
Utilizzare lo stesso tipo per l'intera funzione.

03:18.380 --> 03:20.070
È qui che si vuole il tipo generico.

03:20.070 --> 03:23.300
Si vogliono tipi union quando si è flessibili per avere

03:23.300 --> 03:25.850
un tipo diverso a ogni chiamata di metodo,

03:25.850 --> 03:28.120
a ogni chiamata di funzione.

03:28.120 --> 03:30.810
Quindi, è possibile utilizzare i tipi di unione.

03:30.810 --> 03:33.470
I tipi generici bloccano un tipo.
