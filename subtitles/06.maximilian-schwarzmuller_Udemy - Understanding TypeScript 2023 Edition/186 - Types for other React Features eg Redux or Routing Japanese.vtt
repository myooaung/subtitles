WEBVTT

00:02.100 --> 00:04.390
講師：もちろん､ 大きなReactアプリケーションでは､

00:04.390 --> 00:08.640
useRefやuseState以外にも様々なものを扱います｡

00:08.640 --> 00:10.950
そこでTypeScriptをどのように使っているかを理解するために､

00:10.950 --> 00:17.090
呼んでいる関数､ つまり他のフックにカーソルを合わせるだけで､ 本当にいつも便利です｡

00:17.090 --> 00:22.660
例えば､ NewTodoコンポーネントのuseEffectツールを何らかの理由で必要とした場合､

00:22.660 --> 00:29.010
このツールを呼び出し､ その上にマウスを置くだけで､ どのタイプで動作するのかを理解することができます｡

00:29.010 --> 00:30.960
例えば､ 最初の引数はEffectCallbackで､

00:30.960 --> 00:38.610
これは特殊な関数で､ 間違って設定するとTypeScriptが警告してくれます｡ 2番目の引数は何もないか､ 何かの配列で､ これは常に役に立ちます｡ 例えば､

00:38.610 --> 00:45.930
useEffectは何も返さないこともわかります｡ useStateでは､ 常に正確に二つの要素を持つ配列が返ってくると言いましたが､ ここでもわかります｡

00:45.930 --> 01:08.600
useStateは配列を返し､ これは開閉ブラケットです｡ 最初の要素は汎用型､ つまりTodoリスト､ これはあなたの状態のスナップショットになるので｡ 次の要素はReactになります｡

01:08.600 --> 01:08.600
最終的にここでディスパッチ関数が発生している､

01:08.600 --> 01:11.370
ということです｡

01:11.370 --> 01:12.690
だから､ それが役に立つこともある｡ 

01:12.690 --> 01:15.490
もしかしたら､ Reduxにも取り組んでいるかもしれませんね｡ 

01:15.490 --> 01:24.530
ありがたいことに､ 彼らのドキュメントに飛び込むと､ TypeScriptでReduxを使うための説明も見つかります｡

01:24.530 --> 01:27.430
Recipesには､ Usage with TypeScriptがあり､

01:27.430 --> 01:35.540
アクションやリデューサに型を追加したり､ Reduxの状態管理に型を追加する方法が紹介されています｡

01:35.540 --> 01:41.520
本当に簡単で､ 全く複雑ではなく､ そこに多くの型安全性を追加しています｡

01:41.520 --> 01:47.110
React Routerのパッケージも使っているかもしれませんね｡

01:47.110 --> 01:52.040
もちろん､ このパッケージをReactプロジェクトにインストールする際にも､

01:52.040 --> 01:55.340
npm install dash dash save

01:55.340 --> 02:03.720
react dash router dash domというコマンドを使います｡

02:03.720 --> 02:07.000
ということで､ これでreact-router-domのパッケージが追加されます｡ 

02:07.000 --> 02:10.250
しかし､ このパッケージのページには､ 特別な型の指示はありません｡

02:10.250 --> 02:12.430
少なくとも私がこれを記録している時点では､

02:12.430 --> 02:17.570
ここにTypeScriptに特化したものは見当たりません｡

02:17.570 --> 02:21.250
とはいえ､ もちろんTypeScriptのプロジェクトでも使えるし､

02:21.250 --> 02:23.920
そこで優れた型サポートを得ることもできる｡

02:23.920 --> 02:25.800
さて､ インストールした状態で､ react-router-domからインポートすると､

02:25.800 --> 02:31.880
そこには素晴らしい型のサポートがないことに気がつくでしょう｡

02:31.880 --> 02:33.870
例えば､ ここで何かをインポートしようとすると､

02:33.870 --> 02:42.730
モジュールreact-router-domの宣言が見つからないという警告が既に出ていて､ ここでは型情報が見つからなかったということになるのです｡

02:42.730 --> 02:45.420
この問題を解決するには､ もちろん､ 以前行ったように､

02:45.420 --> 02:48.450
npm install dash dash save

02:48.450 --> 02:52.530
dash dev, at types, slash react dash

02:52.530 --> 02:54.620
router dash domで､

02:54.620 --> 02:59.097
at search typesをキャンセルすれば､ また大丈夫です｡ これは､

02:59.097 --> 03:06.790
コースの初期に､ すでに学んだトリックですが､ もちろん､ 忘れる必要はありません｡

03:06.790 --> 03:10.810
このように､ TypeScriptで動作しないものを追加すると､

03:10.810 --> 03:17.270
Routeを認識し､ このパッケージの他のすべての機能も認識するようになるのです｡

03:17.270 --> 03:21.070
つまり､ このように簡単にサポートを追加することもできるのです｡ 

03:21.070 --> 03:29.030
公式のドキュメントを見て､ TypeScriptの使い方についての説明があるかどうかを確認し､

03:29.030 --> 03:42.080
なければインストールして､ 少なくとも自動補完とコンパイルのサポートが得られるように､ ビルトインの型サポートがあるかどうかを確認します｡

03:42.080 --> 03:46.410
このモジュールでは､ TypeScriptとその素晴らしい機能をReactアプリで利用する方法を説明します｡

03:46.410 --> 03:54.370
もちろん､ このコースで学んだことはすべてReactアプリにも適用されます｡

03:54.370 --> 03:56.380
本講座で学んだTypeScriptの機能を､

03:56.380 --> 03:59.130
Reactのプロジェクトで使用することができます｡
