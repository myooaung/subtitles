WEBVTT

00:02.310 --> 00:03.940
Hombre: Así que tenemos dos problemas,

00:03.940 --> 00:06.500
si queremos llamarlos así, para arreglar.

00:06.500 --> 00:07.820
Ahora quiero empezar con

00:07.820 --> 00:10.960
el tema de que los proyectos aparecen en ambas cajas.

00:10.960 --> 00:13.050
Quiero introducir algunos filtros

00:13.050 --> 00:15.980
y el mejor lugar para filtrar es, por supuesto,

00:15.980 --> 00:18.930
nuestra función de escucha.

00:18.930 --> 00:22.743
Si vamos al lugar donde registramos nuestro oyente, aquí

00:26.000 --> 00:29.170
en la cláusula de la lista de proyectos.

00:29.170 --> 00:32.270
Entonces, aquí, tenemos una lista de proyectos, ¿verdad?

00:32.270 --> 00:36.170
Ahora, esa lista de proyectos comprende todos los proyectos.

00:36.170 --> 00:39.400
Sin embargo, dentro de la cláusula de la lista de proyectos,

00:39.400 --> 00:43.140
sólo nos interesan los proyectos activos o terminados.

00:43.140 --> 00:44.250
Ahora, aquí, por cierto,

00:44.250 --> 00:49.103
también podríamos usar teóricamente nuestro enum pero, en realidad, necesito

00:50.660 --> 00:53.160
los valores concretos almacenados en el enum

00:53.160 --> 00:56.440
de ahí abajo o en el tipo de ahí abajo y, por tanto, aquí no

00:56.440 --> 00:57.880
quiero usar un enum siempre

00:57.880 --> 00:58.990
porque quiero mostrar

00:58.990 --> 01:02.180
los tipos literales de cadena.

01:02.180 --> 01:06.190
Así que, lo que haremos aquí dentro de nuestra función de escucha es, antes

01:06.190 --> 01:08.690
de almacenar los proyectos y renderizarlos,

01:08.690 --> 01:10.470
queremos filtrarlos.

01:10.470 --> 01:13.020
Así que aquí tenemos nuestros proyectos relevantes,

01:13.020 --> 01:16.660
se podría decir, y eso es, por supuesto, proyectos filtrados.

01:16.660 --> 01:19.070
El método del filtro es un método por defecto que

01:19.070 --> 01:21.460
existe en cualquier matriz en JavaScript.

01:21.460 --> 01:23.690
Esto toma una función que luego se ejecuta

01:23.690 --> 01:26.820
en cada elemento de esa matriz de proyectos y cuando esta

01:26.820 --> 01:29.660
función aquí devuelve true, mantenemos el elemento

01:29.660 --> 01:30.940
en una matriz recién creada

01:30.940 --> 01:35.040
que luego se almacena en los proyectos pertinentes.

01:35.040 --> 01:38.130
Si esta función devuelve false, eliminamos el elemento,

01:38.130 --> 01:39.770
no de la lista original, sino en

01:39.770 --> 01:41.660
la nueva lista que se genera y que se

01:41.660 --> 01:44.230
almacena en los proyectos pertinentes.

01:44.230 --> 01:46.600
Así que, aquí, tenemos que devolver true o false dependiendo

01:46.600 --> 01:48.810
de si queremos mantener el proyecto o no.

01:48.810 --> 01:52.430
Y para ello, por supuesto, sólo tenemos que mirar el estado.

01:52.430 --> 01:55.310
El estado del proyecto es un enum y queremos

01:55.310 --> 01:59.070
comprobar si el estado del proyecto es igual al estado

01:59.070 --> 02:03.590
del proyecto activo si estamos en una lista de proyectos activos,

02:03.590 --> 02:05.790
por lo que si la propiedad de tipo

02:05.790 --> 02:07.940
es activa, o si el estado del proyecto

02:07.940 --> 02:12.270
es terminado si estamos en una lista terminada.

02:12.270 --> 02:15.430
Así que aquí voy a escribir un-un cuerpo de función

02:15.430 --> 02:17.250
real envolviendo esto con

02:17.250 --> 02:19.110
llaves, no usando el atajo de

02:19.110 --> 02:20.100
la función de flecha

02:20.100 --> 02:23.480
y luego podemos comprobar, si este tipo es igual activo,

02:23.480 --> 02:25.540
entonces quiero devolver el resultado

02:26.800 --> 02:31.480
de esta comprobación aquí si no y por lo tanto, simplemente después de

02:31.480 --> 02:34.130
esta declaración if, quiero devolver

02:34.130 --> 02:40.160
la comparación con el estado del proyecto terminado.

02:40.160 --> 02:42.220
Con eso, obtenemos nuestros proyectos relevantes

02:42.220 --> 02:43.520
que ahora podemos almacenar

02:43.520 --> 02:45.490
aquí, en proyectos asignados.

02:45.490 --> 02:47.070
Así que, ahora vamos a ver si funciona.

02:47.070 --> 02:48.053
Si vuelvo a cargar,

02:49.310 --> 02:52.743
y añadimos un proyecto aquí, ¿funciona?

02:54.950 --> 02:55.930
Esto funciona y, como

02:55.930 --> 02:58.050
ves, sólo se añade a los proyectos activos,

02:58.050 --> 03:00.020
no a los proyectos terminados.

03:00.020 --> 03:02.390
Sin embargo, si añado un segundo proyecto aquí,

03:02.390 --> 03:04.740
seguimos teniendo esa duplicación.

03:04.740 --> 03:08.720
Eso está relacionado con la forma en que renderizamos nuestros proyectos.

03:08.720 --> 03:10.520
Dentro de los proyectos de renderización,

03:10.520 --> 03:13.430
siempre revisamos todos los elementos de nuestro proyecto

03:13.430 --> 03:15.090
y los añadimos a la lista.

03:15.090 --> 03:16.640
Ahora, el problema con eso,

03:16.640 --> 03:19.900
por supuesto, es que ya podríamos tener un elemento del proyecto

03:19.900 --> 03:21.950
renderizado en la pantalla.

03:21.950 --> 03:25.020
Ahora, la mejor solución posible aquí sería ejecutar

03:25.020 --> 03:27.450
algún tipo de comparación en la que se compruebe

03:27.450 --> 03:30.170
lo que ya se ha renderizado y lo que se necesita renderizar,

03:30.170 --> 03:31.730
para evitar una nueva renderización

03:31.730 --> 03:34.110
innecesaria.

03:34.110 --> 03:35.760
Sin embargo, realizar esta comparación

03:35.760 --> 03:39.710
mirando el DOM real también cuesta bastante rendimiento.

03:39.710 --> 03:43.100
Por lo tanto, para esta aplicación, está perfectamente bien tomar

03:43.100 --> 03:45.250
nuestro elemento de lista y limpiar todo su

03:45.250 --> 03:48.720
contenido estableciendo el HTML interno a una cadena vacía, lo que significa

03:48.720 --> 03:49.640
que nos deshacemos

03:49.640 --> 03:53.710
de todos los elementos de la lista y luego volvemos a renderizar.

03:53.710 --> 03:56.350
Eso significa que cada vez que añadimos un nuevo proyecto,

03:56.350 --> 03:58.470
volvemos a renderizar todos los proyectos pero,

03:58.470 --> 04:00.210
para el propósito de este proyecto aquí,

04:00.210 --> 04:01.670
para esta aplicación aquí, eso

04:01.670 --> 04:03.490
está absolutamente bien.

04:03.490 --> 04:05.410
Así que, ahora con eso, si guardamos eso,

04:05.410 --> 04:06.987
vamos a darle otra oportunidad.

04:06.987 --> 04:10.540
"¿Funciona esto? " es el primer proyecto y

04:10.540 --> 04:12.960
ahora si añado otro proyecto aquí,

04:12.960 --> 04:14.530
ves, se añade pero el otro

04:14.530 --> 04:17.453
proyecto no se vuelve a añadir.

04:18.430 --> 04:21.870
Whoops y, ahora, aquí tengo (murmura) error porque la descripción no

04:21.870 --> 04:23.540
era lo suficientemente larga.

04:23.540 --> 04:26.230
Por lo tanto, todo esto ahora funciona, como puedes ver,

04:26.230 --> 04:28.150
y estamos renderizando estos proyectos

04:28.150 --> 04:30.090
de la forma en que deben ser renderizados,

04:30.090 --> 04:32.170
lo cual, por supuesto, es correcto.

04:32.170 --> 04:35.050
Y, con eso, la aplicación no parece tan mala.

04:35.050 --> 04:36.890
Lo único que se echa en falta es

04:36.890 --> 04:39.550
alguna función de arrastrar y soltar o alguna

04:39.550 --> 04:44.040
forma de llevar los proyectos de esta primera lista a la segunda.

04:44.040 --> 04:45.180
Tampoco estamos emitiendo

04:45.180 --> 04:46.930
la otra información que tenemos, la descripción

04:46.930 --> 04:48.900
y el número de personas.

04:48.900 --> 04:50.750
Así que, eso tampoco es genial.

04:50.750 --> 04:54.980
Y, también tenemos un poco de duplicación de código cuando realmente tenemos

04:54.980 --> 04:57.620
una mirada en la lista de proyectos en esta cláusula

04:57.620 --> 04:58.910
aquí y en la cláusula de

04:58.910 --> 05:01.000
entrada del proyecto.

05:01.000 --> 05:04.270
En ambos tenemos elemento de plantilla, elemento anfitrión y elemento

05:04.270 --> 05:06.970
y tenemos un método de adjuntar y así sucesivamente.

05:06.970 --> 05:09.180
Por lo tanto, quiero mejorar el código aquí

05:09.180 --> 05:11.800
y reutilizar algo de código mediante el uso de la herencia

05:11.800 --> 05:14.480
y el uso de una cláusula base y, a partir de ahí, también

05:14.480 --> 05:16.850
quiero crear una cláusula dedicada para cada

05:16.850 --> 05:18.580
elemento del proyecto en el que luego

05:18.580 --> 05:20.340
sólo instanciar esa cláusula elemento

05:20.340 --> 05:23.725
del proyecto dentro de la lista de proyectos en lugar de añadir un

05:23.725 --> 05:27.050
elemento de la lista de forma manual, como esto y luego dentro de

05:27.050 --> 05:30.700
esa cláusula de elemento del proyecto 'a crear', que la parte de anexión

05:30.700 --> 05:34.540
debe ocurrir y entonces también quiero salida más información sobre el elemento

05:34.540 --> 05:40.540
del proyecto, incluyendo su descripción y el número de personas asignadas.

05:40.540 --> 05:42.080
Por lo tanto, hay un poco de trabajo

05:42.080 --> 05:44.520
por hacer y, antes de trabajar en el elemento

05:44.520 --> 05:47.120
de proyecto en la forma en que quiero tenerlo, vamos

05:47.120 --> 05:48.660
a asegurarnos de que, en primer

05:48.660 --> 05:53.660
lugar, añadir un poco de herencia para hacer nuestra lista de proyectos y la entrada de proyectos,

05:53.800 --> 05:57.693
o ciertas partes de ella, más reutilizable.
