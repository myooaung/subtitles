WEBVTT

00:02.130 --> 00:04.110
Instructor: Aquí preparamos nuestro flujo

00:04.110 --> 00:06.137
de trabajo de desarrollo para Webpack, configurándolo

00:06.137 --> 00:08.490
para el servidor de desarrollo de Webpack, estableciendo

00:08.490 --> 00:10.840
el modo de desarrollo, y configurando los mapas de fuentes

00:10.840 --> 00:13.210
para mejorar nuestra experiencia de depuración, para

00:13.210 --> 00:16.570
darnos mejores mensajes de error y demás.

00:16.570 --> 00:20.150
Ahora bien, para la producción, es decir, cuando queremos preparar nuestro

00:20.150 --> 00:23.260
código para subirlo a un servidor donde luego será servido a nuestros

00:23.260 --> 00:27.070
usuarios finales, normalmente queremos un flujo de trabajo diferente.

00:27.070 --> 00:28.790
Por lo tanto, voy a añadir una nueva configuración

00:28.790 --> 00:31.820
llamada webpack. configurar. prod. js.

00:31.820 --> 00:33.210
Este nombre no depende de

00:33.210 --> 00:36.043
ti porque Webpack no lo buscará por defecto.

00:36.880 --> 00:39.710
Sin embargo, le diremos que lo busque en un segundo.

00:39.710 --> 00:41.920
Antes de contarlo, vamos a copiar

00:41.920 --> 00:44.708
toda la configuración de desarrollo aquí

00:44.708 --> 00:48.480
a esta configuración. prod, pero ahora vamos a afinarla.

00:48.480 --> 00:51.150
Podemos poner el modo en producción, por ejemplo.

00:51.150 --> 00:54.380
Esto le dirá a Webpack que haga estas optimizaciones, minificar

00:54.380 --> 00:56.550
nuestro código y demás, así que definitivamente

00:56.550 --> 00:59.220
querrás establecer esto aquí.

00:59.220 --> 01:00.440
Dejaremos la entrada.

01:00.440 --> 01:02.910
En la salida no podemos deshacernos de la ruta pública porque

01:02.910 --> 01:05.860
era necesaria para el servidor de desarrollo de Webpack.

01:05.860 --> 01:08.810
Ahora no lo usaremos aquí, porque para producción, queremos

01:08.810 --> 01:10.430
ejecutar el script de Webpack y

01:10.430 --> 01:12.940
generar nuestra salida escrita en el disco y no

01:12.940 --> 01:16.900
servida temporalmente en un servidor que se ejecute localmente.

01:16.900 --> 01:19.350
Podemos poner devtool en none para no generar

01:19.350 --> 01:22.090
ningún mapa de fuentes aquí porque en producción

01:22.090 --> 01:24.913
puede que no lo necesitemos.

01:26.140 --> 01:30.160
Ahora el resto puede quedarse como está, pero añadiremos más.

01:30.160 --> 01:34.620
En la parte inferior aquí, quiero añadir una entrada de plugins y establecer

01:34.620 --> 01:36.220
esto a una matriz.

01:36.220 --> 01:41.070
Los plugins son extensiones extra o, bueno, complementos que puedes añadir

01:41.070 --> 01:43.020
a tu flujo de trabajo de Webpack

01:43.020 --> 01:46.080
y que básicamente se aplicarán a toda la salida,

01:46.080 --> 01:47.820
a todo el proyecto.

01:47.820 --> 01:50.190
Las reglas y los módulos se aplican

01:50.190 --> 01:52.870
específicamente a nivel de archivo.

01:52.870 --> 01:57.260
Los plugins se aplican al flujo de trabajo general.

01:57.260 --> 01:58.730
Aquí quiero añadir un plugin

01:58.730 --> 02:00.620
que borre automáticamente todo lo

02:00.620 --> 02:04.370
que hay en la carpeta dist antes de que se escriba una nueva salida allí,

02:04.370 --> 02:06.540
de manera que siempre tengamos sólo la última

02:06.540 --> 02:09.410
y más reciente salida en la carpeta dist.

02:09.410 --> 02:11.900
Para ello, voy a instalar un nuevo

02:11.900 --> 02:16.900
paquete con --save-dev y que es el clean-webpack-plugin.

02:19.090 --> 02:21.900
Y esto nos ayudará a limpiar la carpeta dist,

02:21.900 --> 02:26.360
en nuestro caso, cada vez que reconstruyamos nuestro proyecto.

02:26.360 --> 02:29.820
Así que con eso instalado, vamos a importarlo aquí en la parte superior.

02:29.820 --> 02:32.090
Lo llamaré CleanPlugin y lo importaré

02:32.090 --> 02:36.400
mediante require clean-webpack-plugin y con él instalado en

02:36.400 --> 02:39.810
el array de plugins del fondo, simplemente llamamos

02:39.810 --> 02:44.073
a new CleanPlugin. CleanWebpackPlugin e instanciar

02:45.422 --> 02:46.500
esto.

02:46.500 --> 02:49.660
Esta es una función constructora y ahora la instanciamos.

02:49.660 --> 02:51.650
Esto es todo lo que necesitas hacer

02:51.650 --> 02:53.260
aquí y esto al final le dirá a Webpack

02:53.260 --> 02:56.490
que antes de que escriba algo en esta carpeta de salida, borrará

02:56.490 --> 02:58.593
todo lo que hay allí.

02:59.440 --> 03:02.020
Ahora tenemos el flujo de trabajo de producción terminado.

03:02.020 --> 03:04.620
Ahora, para usarlo, vamos al paquete. json y ahí ajustamos

03:04.620 --> 03:07.280
este script de construcción.

03:07.280 --> 03:10.510
Aquí quiero decirle a Wepback que use este archivo prod,

03:10.510 --> 03:13.110
este archivo de configuración de producción

03:13.110 --> 03:15.160
y lo hacemos añadiendo --config y luego

03:16.730 --> 03:21.140
webpack. configurar. prod. js aquí.

03:21.140 --> 03:23.610
Esto aquí debe ser cualquier nombre de archivo que usted eligió

03:23.610 --> 03:27.000
y esto instruye a Webpack para utilizar este archivo de configuración en lugar de la predeterminada

03:27.000 --> 03:29.730
Webpack. configurar. js que normalmente

03:29.730 --> 03:32.030
busca.

03:32.030 --> 03:34.600
Con esto, si ahora ejecutas npn run build, construirá

03:34.600 --> 03:36.700
tu aplicación para producción, lo que

03:36.700 --> 03:39.950
significa que te da esta salida optimizada.

03:39.950 --> 03:42.460
Así que si esperas, aquí tenemos el paquete. js y esto es ahora realmente

03:42.460 --> 03:45.110
el código optimizado construido para la producción

03:45.110 --> 03:50.980
y esto junto con su índice.

03:50.980 --> 03:50.980
archivo html y la aplicación. css

03:50.980 --> 03:53.800
es lo que pondrías en un servidor aquí si quieres

03:53.800 --> 03:56.393
desplegar tu aplicación.

03:57.260 --> 04:00.440
Este es también el final de este módulo.

04:00.440 --> 04:02.140
Ahora permítanme resumir lo que hemos aprendido.
