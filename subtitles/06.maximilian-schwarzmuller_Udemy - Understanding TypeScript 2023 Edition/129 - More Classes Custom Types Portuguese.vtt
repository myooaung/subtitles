WEBVTT

00:02.220 --> 00:05.760
-: Como próximo passo, quero trabalhar nestes tipos aqui,

00:05.760 --> 00:09.900
qualquer tipo que eu esteja usando aqui para meus projetos designados,

00:09.900 --> 00:11.320
para os ouvintes aqui,

00:11.320 --> 00:14.980
e também para os projetos no estado do projeto.

00:14.980 --> 00:19.030
Claro que, aqui, não quero trabalhar com nenhum,

00:19.030 --> 00:20.740
faria mais sentido ter

00:20.740 --> 00:25.660
uma classe ou tipo de projeto dedicado, que podemos usar.

00:25.660 --> 00:27.760
E de fato, criarei uma classe para

00:29.070 --> 00:29.903
esse tipo de projeto,

00:31.390 --> 00:32.450
simplesmente usando

00:32.450 --> 00:34.890
um projeto de classe para que tenhamos

00:34.890 --> 00:38.740
uma maneira de construir objetos de projeto, que sempre têm

00:38.740 --> 00:41.570
a mesma estrutura.

00:41.570 --> 00:44.760
Neste momento estou fazendo isso lá embaixo com a notação literal.

00:44.760 --> 00:47.920
O lado negativo disso, é claro, é que temos que lembrar

00:47.920 --> 00:50.490
que é uma descrição e não uma descrição.

00:50.490 --> 00:52.410
que precisamos de uma identificação, que é um

00:52.410 --> 00:53.470
fio, e assim por diante.

00:53.470 --> 00:56.440
Então é aí que um tipo personalizado pode nos ajudar

00:56.440 --> 00:59.750
e eu vou criar uma classe e não uma interface ou um tipo

00:59.750 --> 01:02.300
personalizado com a palavra-chave tipo

01:02.300 --> 01:05.470
porque eu quero ser capaz de instanciar isso.

01:05.470 --> 01:07.960
Então, como deve ser essa classe

01:07.960 --> 01:10.700
ou esse projeto ser preciso?

01:10.700 --> 01:12.320
Bem, vou adicionar um construtor

01:12.320 --> 01:17.280
e depois usar este atalho de atribuir argumentos ou parâmetros ao construtor,

01:17.280 --> 01:19.100
que depois também se tornam automaticamente

01:19.100 --> 01:25.650
propriedades, adicionando o acessor no início, Público, neste caso, e depois o nome do argumento e da

01:25.650 --> 01:29.450
propriedade, e depois o tipo.

01:29.450 --> 01:33.100
E aqui cada projeto deve ter uma identificação.

01:33.100 --> 01:34.990
Cada projeto deve ter um título, que

01:34.990 --> 01:37.330
também é um fio, assim como a identificação.

01:37.330 --> 01:38.690
Deve ter uma descrição,

01:38.690 --> 01:39.920
que é um fio, deve

01:39.920 --> 01:43.540
ter uma propriedade People, que é um número que é

01:43.540 --> 01:44.420
o número de pessoas

01:44.420 --> 01:47.440
designadas a um projeto.

01:47.440 --> 01:49.580
E uma coisa que também quero acrescentar,

01:49.580 --> 01:51.640
que até agora não tínhamos, é na verdade

01:51.640 --> 01:53.580
um status de projeto.

01:53.580 --> 01:56.920
Porque neste momento, quando adicionamos um projeto aqui,

01:56.920 --> 01:58.680
ele aparece em ambas as listas.

01:58.680 --> 02:01.530
Agora, quero acrescentar status a um projeto

02:01.530 --> 02:03.630
que, naturalmente, pode ser alterado

02:03.630 --> 02:07.470
para que possamos realmente filtrar os projetos ativos na primeira

02:07.470 --> 02:11.470
caixa e os projetos concluídos na segunda caixa.

02:11.470 --> 02:15.000
Assim, mostrar apenas os projetos certos em cada caixa.

02:15.000 --> 02:19.890
Por isso, vou acrescentar aqui outro bem público, status.

02:19.890 --> 02:21.280
E agora a questão é: que

02:21.280 --> 02:23.985
tipo de status deveria ter esse status?

02:23.985 --> 02:28.240
Agora poderíamos usar um tipo de união com dois tipos literais Ativo

02:28.240 --> 02:31.170
e Acabado o que já usávamos anteriormente.

02:31.170 --> 02:33.280
Mas aqui, eu sempre quero apresentar

02:33.280 --> 02:36.890
ou reintroduzir outro tipo que você aprendeu, e esse

02:36.890 --> 02:38.320
é o Enum.

02:38.320 --> 02:41.890
O Enum é perfeito aqui porque temos exatamente duas opções.

02:41.890 --> 02:44.950
E aqui, no contexto deste objeto de projeto, também não precisamos

02:44.950 --> 02:48.740
de um texto que faça sentido para os humanos, que armazenamos como um valor,

02:48.740 --> 02:50.270
mas realmente precisamos apenas

02:50.270 --> 02:52.341
de algum identificador.

02:52.341 --> 02:56.140
Portanto, aqui vou acrescentar um novo status de projeto Enum.

02:56.140 --> 02:59.810
E quero ter ali dois valores,

02:59.810 --> 03:02.890
Ativo e Acabado.

03:02.890 --> 03:05.440
E então, aqui, este status será do tipo

03:05.440 --> 03:08.610
status de projeto exatamente como este.

03:08.610 --> 03:11.003
Esta é agora a minha classe de projeto.

03:11.900 --> 03:14.220
Com isso aqui, podemos dizer que este é um

03:14.220 --> 03:17.820
conjunto de projetos que utilizam essa classe de projeto.

03:17.820 --> 03:20.351
E, é claro, quando criamos um projeto

03:20.351 --> 03:24.780
aqui, fazemos isso usando um novo projeto, não o estado

03:24.780 --> 03:26.620
do projeto.

03:26.620 --> 03:30.310
E aqui para projetar um ID neste caso, como mencionado

03:30.310 --> 03:32.200
anteriormente, um número

03:32.200 --> 03:35.370
aleatório que convertemos em uma cadeia,

03:35.370 --> 03:36.720
depois o título, depois

03:36.720 --> 03:38.210
a descrição, depois

03:38.210 --> 03:41.930
o NUM de Pessoas aqui, e depois, é claro, também esse

03:41.930 --> 03:45.080
é o status, certo.

03:45.080 --> 03:49.950
E uma coisa que quero ter aqui nesta aplicação neste projeto demonstrativo

03:49.950 --> 03:54.830
é que cada novo projeto por padrão está ativo.

03:54.830 --> 03:57.040
Assim, quando criamos um novo projeto aqui, atribuímos

03:57.040 --> 04:00.064
status de projeto. ativo aqui como um valor

04:00.064 --> 04:02.990
para o status com isso, temos que projetar

04:02.990 --> 04:05.230
o que adicionamos.

04:05.230 --> 04:06.720
E agora há um outro lugar onde precisamos

04:06.720 --> 04:08.450
da classe do projeto.

04:08.450 --> 04:11.220
E isso está aqui na classe de lista de projetos, temos

04:11.220 --> 04:13.474
ali a propriedade Assign projects.

04:13.474 --> 04:17.240
E, é claro, isso deve ser sempre uma série de projetos.

04:17.240 --> 04:19.530
Agora com isso estamos usando a digitação Beta.

04:19.530 --> 04:22.810
E uma vantagem é que aqui em projetos de renderização, agora

04:22.810 --> 04:26.360
também temos a conclusão automática aqui, por exemplo.

04:26.360 --> 04:29.020
E também receberíamos um erro, um erro de compilação

04:29.020 --> 04:31.300
se tentamos salvar isso, porque agora o

04:31.300 --> 04:33.100
TypeScript entende com que tipos

04:33.100 --> 04:35.360
estamos trabalhando aqui.

04:35.360 --> 04:39.040
Então é essa a classe do projeto e como podemos usar isso.

04:39.040 --> 04:41.760
A classe do projeto não é a única classe No entanto,

04:41.760 --> 04:44.230
também temos aqui o ouvinte.

04:44.230 --> 04:48.630
E para isso, vou adicionar um novo tipo de ouvinte personalizado.

04:48.630 --> 04:50.390
O nome, é claro, depende de você.

04:50.390 --> 04:54.280
E eu só uso um tipo aqui porque quero basicamente

04:54.280 --> 04:58.260
codificar um tipo de função com uma palavra.

04:58.260 --> 04:59.640
Então, o que queremos dizer com isso?

04:59.640 --> 05:03.270
Bem, é claro, um ouvinte aqui em nossa aplicação

05:03.270 --> 05:05.370
é apenas uma função, certo?

05:05.370 --> 05:07.160
O que armazenamos na matriz de ouvintes

05:07.160 --> 05:08.960
é apenas um monte de funções Adicionar

05:08.960 --> 05:11.060
ouvinte empurra uma nova função, e quando

05:11.060 --> 05:12.200
algo muda, nós executamos

05:12.200 --> 05:14.190
essa função.

05:14.190 --> 05:17.610
Portanto, aqui um ouvinte é realmente apenas uma função.

05:17.610 --> 05:22.610
Mas é uma função que recebe nossos itens, certos itens

05:22.870 --> 05:23.703
em nosso

05:23.703 --> 05:27.113
caso e uma série de projetos.

05:28.500 --> 05:30.410
E isso então faz algo com ele.

05:30.410 --> 05:32.480
Agora para ser preciso aqui, é claro, para

05:32.480 --> 05:33.550
definir um tipo de função,

05:33.550 --> 05:35.200
não temos aqui o tipo de aparelho de

05:35.200 --> 05:37.440
escuta, mas sim, como você aprendeu o tipo de

05:37.440 --> 05:38.780
retorno, e isso será amplo,

05:38.780 --> 05:41.880
o que significa que não nos importamos com nenhum valor que a função

05:41.880 --> 05:44.090
de escuta possa retornar.

05:44.090 --> 05:46.140
No local onde trabalhamos com os ouvintes.

05:46.140 --> 05:47.940
Não precisamos de nenhum tipo de retorno.

05:47.940 --> 05:49.810
Queremos apenas garantir

05:49.810 --> 05:51.880
que quem passa como ouvinte espera

05:51.880 --> 05:55.870
receber alguns itens quando o ouvinte dispara.

05:55.870 --> 05:58.530
Com isso aqui, podemos dizer que Ouvintes

05:58.530 --> 06:02.760
é um conjunto de funções bem sucedidas de ouvintes no final.

06:02.760 --> 06:05.670
E aqui, quando pressiono a função de ouvinte,

06:05.670 --> 06:08.480
preciso deixar claro que não é uma função qualquer,

06:08.480 --> 06:10.630
mas que é um tipo de ouvinte, então

06:10.630 --> 06:12.350
tudo funciona.

06:12.350 --> 06:14.530
Agora, no lugar onde usamos o Add Listener,

06:14.530 --> 06:16.180
que está lá embaixo, também

06:16.180 --> 06:17.650
podemos, é claro, melhorar

06:17.650 --> 06:19.869
nossa digitação e deixar claro que aqui,

06:19.869 --> 06:23.440
na verdade, teremos um monte de projetos.

06:23.440 --> 06:27.220
Então, agora com isso, montamos nosso ouvinte,

06:27.220 --> 06:32.210
adicionamos o tipo de projeto, e isso não muda nada aqui.

06:32.210 --> 06:35.120
Se agora adicionarmos algo que funcione, e se eu adicionar

06:35.120 --> 06:36.900
um segundo item, isso ainda será

06:36.900 --> 06:38.880
adicionado além do primeiro item sendo

06:38.880 --> 06:40.530
adicionado novamente, também,

06:40.530 --> 06:43.230
e não estaremos fazendo nenhuma filtragem em nenhuma

06:43.230 --> 06:45.260
das listas.

06:45.260 --> 06:48.600
Portanto, antes de continuarmos trabalhando em nossas peças,

06:48.600 --> 06:50.570
vamos nos certificar de que não estamos

06:50.570 --> 06:53.990
tendo esta duplicação aqui dentro de uma única lista, e também

06:53.990 --> 06:58.610
não a duplicação entre as duas caixas aqui, mas que, em vez disso, apenas projetos

06:58.610 --> 07:01.030
ativos estão aparecendo aqui e apenas projetos

07:01.030 --> 07:02.940
concluídos e, portanto, inicialmente

07:02.940 --> 07:08.010
nenhum projeto aparece aqui em projetos concluídos.

07:08.010 --> 07:09.623
Então, vamos consertar isso.
