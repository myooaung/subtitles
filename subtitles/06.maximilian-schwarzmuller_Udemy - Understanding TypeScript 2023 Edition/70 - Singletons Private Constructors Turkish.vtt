WEBVTT

00:02.260 --> 00:04.960
-: Şimdi tanıtmak istediğim son

00:04.960 --> 00:07.020
bir ilginç özellik daha

00:07.020 --> 00:10.330
var ve bu da özel kurucular olacak.

00:10.330 --> 00:13.823
Peki özel kurucu nedir ve hangi amaçla kullanılır?

00:14.870 --> 00:17.700
Nesne yönelimli programlamada singleton kalıbı

00:17.700 --> 00:20.460
olarak adlandırılan bir kalıp vardır.

00:20.460 --> 00:23.030
Singleton kalıbı, belirli bir sınıfın

00:23.030 --> 00:26.440
her zaman yalnızca bir örneğine sahip olmanızı sağlamakla

00:26.440 --> 00:28.030
ilgilidir.

00:28.030 --> 00:30.558
Bu, bir şekilde statik yöntemleri veya özellikleri

00:30.558 --> 00:33.000
kullanamadığınız veya kullanmak istemediğiniz

00:33.000 --> 00:34.450
senaryolarda yararlı olabilir,

00:34.450 --> 00:36.440
ancak aynı zamanda bir sınıfa dayalı birden

00:36.440 --> 00:40.730
fazla nesne oluşturamayacağınızdan, ancak her zaman bir sınıfa dayalı tam olarak

00:40.730 --> 00:44.630
bir nesneniz olduğundan emin olmak istersiniz.

00:44.630 --> 00:47.660
Diyelim ki AccountingDepartment için bu sınıfa

00:47.660 --> 00:51.460
dayalı olarak yalnızca bir nesne oluşturabileceğimizden

00:51.460 --> 00:53.320
emin olmak istiyoruz, çünkü

00:53.320 --> 00:56.010
tüm şirketimizde tam olarak bir muhasebe

00:56.010 --> 00:57.840
departmanımız var.

00:57.840 --> 01:00.260
Birden fazla BT departmanımız olabilir ama

01:00.260 --> 01:03.290
tam olarak tek bir muhasebe departmanımız var.

01:03.290 --> 01:05.310
Şimdi bunu uygulamak ve new AccountingDepartment'ı

01:05.310 --> 01:09.020
manuel olarak birden fazla kez çağırmaktan kaçınmak için,

01:09.020 --> 01:12.260
AccountingDepartment sınıfının kurucusunu önüne

01:12.260 --> 01:14.320
private anahtar sözcüğünü ekleyerek

01:14.320 --> 01:18.860
özel bir kurucuya dönüştürebiliriz.

01:18.860 --> 01:20.560
Şimdi bunun yaptığı şey, bunun

01:20.560 --> 01:23.480
üzerinde new diyemeyeceğimizi sağlamaktır.

01:23.480 --> 01:25.160
Burada gördüğünüz gibi hata

01:25.160 --> 01:27.620
alıyorum çünkü kurucu private yani sadece

01:27.620 --> 01:30.600
sınıfın içinden erişilebilir, bu da kulağa

01:30.600 --> 01:33.690
garip geliyor çünkü artık ona dayalı nesneler

01:33.690 --> 01:37.920
oluşturamıyorsak sınıfın içine nasıl gireceğiz.

01:37.920 --> 01:40.490
Cevap, statik yöntemler.

01:40.490 --> 01:43.610
Statik bir yöntem sınıfın kendisinde çağrılabilir, böylece

01:43.610 --> 01:46.250
bunun için onu örneklemeniz gerekmez.

01:46.250 --> 01:49.460
Burada getInstance olarak adlandırabileceğimiz statik

01:49.460 --> 01:51.340
bir yöntem ekleyebiliriz, ancak

01:51.340 --> 01:53.260
isim tamamen size kalmış.

01:53.260 --> 01:56.930
Şimdi getInstance bu sınıfın zaten bir örneği olup olmadığını kontrol

01:56.930 --> 02:00.090
edecek ve eğer yoksa yeni bir tane döndürecektir.

02:00.090 --> 02:04.300
Bunun için yeni bir statik özellik örneği, statik bir özel özellik

02:04.300 --> 02:06.350
ekleyebiliriz, böylece AccountingDepartment

02:06.350 --> 02:09.200
türünde olacak statik adlı örneğin önüne private

02:09.200 --> 02:12.040
koyabilirsiniz.

02:12.040 --> 02:16.570
Yani burada bir AccountingDepartment örneği saklayacağız.

02:16.570 --> 02:17.580
Yani burada söylediğim

02:17.580 --> 02:19.100
şey, sınıfın kendisinden

02:19.100 --> 02:21.410
erişilebilen statik bir özelliğim var,

02:21.410 --> 02:23.310
ancak yalnızca sınıfın içinden

02:23.310 --> 02:25.960
ve orada sakladığımız değer AccountingDepartment

02:25.960 --> 02:30.140
türünde olacak, yani sınıfın kendisinden.

02:30.140 --> 02:33.880
Şimdi bu instance özelliğini getInstance içinde kullanabilir ve

02:33.880 --> 02:38.880
bunun olup olmadığını kontrol edebiliriz. instance burada static içinde ayarlanır,

02:39.260 --> 02:43.570
bunu kullanırsak, sınıfın kendisine başvurur ve daha sonra bunun

02:43.570 --> 02:47.610
üzerindeki diğer tüm static özelliklere erişebiliriz.

02:47.610 --> 02:51.963
Bunun alternatifi sınıf adını kullanmak olacaktır.

02:53.720 --> 02:58.450
Ve şimdi eğer bu ayarlanmışsa, bunu döndürmek istiyorum. örneği veya yine

02:58.450 --> 03:01.600
sınıf adı. ancak bu statik bir yöntemin

03:01.600 --> 03:04.030
içinde çalışır, o zaman bize sınıfın kendisine

03:04.030 --> 03:05.680
erişim sağlar, bunun aksine

03:05.680 --> 03:09.370
statik olmayan bir yöntemde bize çalışmaya çalıştığımız örneğe

03:09.370 --> 03:11.590
erişim sağlar, burada yaptığımız şey

03:11.590 --> 03:13.550
değil.

03:13.550 --> 03:15.660
Ancak buraya giremezsek, henüz

03:15.660 --> 03:17.290
bir örneğimiz yok demektir,

03:17.290 --> 03:22.030
o zaman bunu ayarlarım. örneğidir, yani bu statik örnek özelliği

03:22.030 --> 03:25.660
new AccountingDepartment'a eşittir, bunu buradan kullanabiliriz

03:25.660 --> 03:28.630
çünkü şimdi bu sınıf yönteminin içindeyiz, bu

03:28.630 --> 03:32.030
nedenle burada özel kurucuya erişebilir ve kimliğimizi

03:32.030 --> 03:44.830
ve rapor dizimizi iletebilir ve ardından bunu döndürebiliriz.

03:44.830 --> 03:44.830
örnek burada.

03:44.830 --> 03:47.010
Şimdi ya zaten sahip olabileceğimiz bir örneği

03:47.010 --> 03:48.220
döndürüyoruz ya da henüz

03:48.220 --> 03:50.970
sahip değilsek yeni bir tane oluşturuyoruz.

03:50.970 --> 03:53.270
Ancak bu kod, buradaki işaretli kod, yalnızca

03:53.270 --> 03:56.377
bir kez çalışabilir çünkü bir örneğimiz olduğunda onu

03:56.377 --> 03:57.850
bu if bloğuna dönüştürürüz

03:57.850 --> 04:00.370
ve mevcut örneği döndürürüz.

04:00.370 --> 04:03.700
Şimdi AccountingDepartment ile çalışmak isterseniz, bu şekilde

04:03.700 --> 04:05.940
oluşturmak yerine const accounting AccountingDepartment

04:05.940 --> 04:10.153
diyebiliriz. getInstance, ve bu bize AccountingDepartment'ın

04:11.646 --> 04:14.850
yeni bir örneğini döndürür.

04:14.850 --> 04:18.190
Ancak bunu tekrar yaparsam, burada muhasebe ve muhasebe2'yi

04:18.190 --> 04:21.103
konsol günlüğüne kaydettiğimde göreceğiniz gibi

04:22.020 --> 04:23.570
aynı örneği alacağım.

04:23.570 --> 04:26.550
İkisinin tam olarak eşit olması gerektiğini göreceksiniz,

04:26.550 --> 04:28.253
bunu kaydedip yeniden yüklersek,

04:30.550 --> 04:34.110
aşağıda iki AccountingDepartment nesnemin olduğunu göreceksiniz,

04:34.110 --> 04:36.690
aynı ID'ye sahipler, tam olarak aynı kurulum,

04:36.690 --> 04:41.530
aynı nesne, aynı örnek çünkü yapıcının önündeki private anahtar sözcüğü yardımıyla

04:41.530 --> 04:44.340
oluşturulan bu singleton modeliyle yalnızca

04:44.340 --> 04:47.900
bir örneğimiz var.

04:47.900 --> 04:51.000
Şimdi bu, tartışmalı bir şekilde, her zaman kullanmayacağınız

04:51.000 --> 04:52.490
bir yaklaşımdır.

04:52.490 --> 04:55.010
Singleton kalıbı bazen yararlı olabilir,

04:55.010 --> 04:56.530
her zaman ihtiyacınız olmaz,

04:56.530 --> 04:58.700
ancak özel kurucular sayesinde TypeScript

04:58.700 --> 05:00.360
ile kolayca uygulayabileceğiniz

05:00.360 --> 05:04.923
ilginç bir şey olduğu için kesinlikle bilmeye değer.
