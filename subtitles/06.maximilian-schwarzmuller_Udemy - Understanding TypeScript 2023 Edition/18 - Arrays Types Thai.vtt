WEBVTT

00:02.170 --> 00:08.300
-: นอกจากวัตถุแล้ว เรายังมีอาร์เรย์ใน JavaScript ซึ่งเป็นประเภทข้อมูลที่สำคัญมาก

00:08.300 --> 00:10.810
อย่างที่คุณทราบ อาร์เรย์ถูกสร้างขึ้นในลักษณะนี้ใน

00:10.810 --> 00:12.560
JavaScript และคุณสามารถเก็บข้อมูลใดๆ

00:12.560 --> 00:15.970
ไว้ในนั้น: ตัวเลข สตริง บูลีน ออบเจกต์ อาร์เรย์อื่นๆ คุณสามารถมีอาร์เรย์ซ้อนกันได้

00:15.970 --> 00:19.380
และคุณยังสามารถผสมข้อมูลได้อีกด้วย

00:19.380 --> 00:23.200
คุณสามารถมีอาร์เรย์ที่มีสตริงและตัวเลขผสมกันได้

00:23.200 --> 00:25.570
และ TypeScript ยังรองรับอาร์เรย์อีกด้วย

00:25.570 --> 00:32.140
รองรับอาร์เรย์ JavaScript ใดก็ได้ และประเภทของอาร์เรย์นั้นสามารถยืดหยุ่นหรือเข้มงวดได้

00:32.140 --> 00:35.200
ทีนี้มาดูว่าใน TypeScript

00:35.200 --> 00:38.760
สำหรับที่นี่ในแอพ ts สมมติว่าคนของเรามีคีย์งานอดิเรกด้วย

00:38.760 --> 00:45.660
แต่แน่นอนว่าเราอาจมีตัวแปรหรืองานอดิเรกคงที่นอกเหนือจากวัตถุก็ได้

00:45.660 --> 00:50.853
ดังนั้น การใช้อาร์เรย์ให้เหมือนกันทุกประการทั้งภายในและภายนอกวัตถุ

00:51.950 --> 00:58.140
ที่นี่เรามีงานอดิเรก และงานอดิเรกอาจเป็นกีฬาและทำอาหารก็ได้

00:58.140 --> 01:01.150
ฉันมีองค์ประกอบสองอย่างในนั้น และองค์ประกอบเหล่านี้

01:01.150 --> 01:03.620
อย่างที่คุณบอกได้ ก็คือสตริง

01:03.620 --> 01:10.630
ตอนนี้ถ้าเราวางเมาส์เหนืองานอดิเรก TypeScript จะตรวจจับระยะห่างของประเภทสตริงอาร์เรย์ได้อย่างถูกต้อง

01:10.630 --> 01:12.500
ตอนนี้เป็นไวยากรณ์ที่คุณไม่เคยเห็นมาก่อน

01:12.500 --> 01:16.140
แต่นี่เป็นวิธีที่ TypeScript อธิบายอาร์เรย์ของข้อมูล

01:16.140 --> 01:21.340
คุณมีวงเล็บเหลี่ยม และข้างหน้าคือประเภทของข้อมูลที่จัดเก็บไว้ในนั้น

01:21.340 --> 01:23.530
นี่คือประเภท กลุ่มของประเภทที่อนุมาน

01:23.530 --> 01:25.810
มันเห็นว่าที่นี่เรามีอาร์เรย์และเรามีเพียงสตริงในนั้น

01:25.810 --> 01:31.940
ดังนั้นมันจึงสรุปได้ว่างานอดิเรกน่าจะเป็นอาร์เรย์ของสตริง

01:31.940 --> 01:34.903
และแน่นอนว่าสำหรับงานอดิเรก นั่นก็สมเหตุสมผลดี

01:36.210 --> 01:41.040
แน่นอน คุณยังสามารถกำหนดประเภทของตัวแปรได้อย่างชัดเจน

01:41.040 --> 01:44.720
หากเราจะเพิ่มตัวแปรใหม่ กิจกรรมโปรด และในตอนแรกควรว่างเปล่า

01:45.580 --> 01:53.140
เราอาจต้องการกำหนดประเภทของข้อมูลที่จัดเก็บไว้ในนั้นอย่างชัดเจน

01:53.140 --> 01:57.570
สมมติว่ามันควรเป็นอาร์เรย์ของสตริง จากนั้นเราก็ทำซ้ำสิ่งที่เราเพิ่งเห็น

01:57.570 --> 02:00.330
พิมพ์ string แล้ววงเล็บเหลี่ยมตามหลัง ซึ่งจะบอก

02:00.330 --> 02:03.330
TypeScript ว่าเราเก็บอะไรไว้ที่นี่ ไม่ใช่แค่สตริงเดียว

02:03.330 --> 02:05.990
แต่เป็นอาร์เรย์ของสตริง

02:05.990 --> 02:12.183
และถ้าฉันพยายามเก็บเฉพาะกีฬาไว้ที่นั่น ฉันได้รับข้อผิดพลาด

02:12.183 --> 02:12.183
ฉันได้รับข้อผิดพลาดเนื่องจากเป็นสตริงเดียว

02:12.183 --> 02:15.650
ไม่ใช่อาร์เรย์ของสตริง

02:15.650 --> 02:19.370
ฉันไม่ได้รับข้อผิดพลาดแน่นอน ถ้าฉันรวมสิ่งนี้ไว้ในวงเล็บเหลี่ยม

02:19.370 --> 02:22.610
และสร้างอาร์เรย์ได้อย่างมีประสิทธิภาพ

02:22.610 --> 02:29.220
ฉันได้รับข้อผิดพลาดอีกครั้ง แต่ถ้าฉันเพิ่มตัวเลข สมมติว่าเพราะเรากำหนดให้สิ่งนี้เป็นอาร์เรย์ของสตริง

02:29.220 --> 02:31.290
ตอนนี้เรามีอาร์เรย์ผสม

02:31.290 --> 02:37.180
เป็นอาร์เรย์ของสตริงและตัวเลข ดังนั้นจึงใช้ไม่ได้และไม่รองรับที่นี่

02:37.180 --> 02:40.100
หากเราต้องการสนับสนุนอาร์เรย์แบบผสม

02:40.100 --> 02:43.120
วิธีหนึ่งคือใช้ "ใดๆ" ที่นี่

02:43.120 --> 02:45.880
ประเภท "ใดๆ" เป็นประเภทพิเศษใน TypeScript ซึ่งเราจะมาดูกันในภายหลัง

02:45.880 --> 02:50.530
ซึ่งโดยทั่วไปหมายถึง ทำอะไรก็ได้ที่คุณต้องการ

02:50.530 --> 02:53.020
แน่นอนว่าเป็นประเภทที่คุณไม่ต้องการใช้บ่อยเกินไป

02:53.020 --> 02:55.630
เพราะคุณจะสูญเสียประโยชน์ที่ TypeScript มอบให้คุณ

02:55.630 --> 02:58.170
ซึ่งคุณกลับอยู่ในโลกของ JavaScript ซึ่งคุณสามารถใช้ค่าต่างๆ

02:58.170 --> 03:00.140
ได้ทุกที่

03:00.140 --> 03:06.270
ดังนั้น "ใดๆ" จึงมีความยืดหยุ่นมาก แต่ความยืดหยุ่นนั้นมาพร้อมกับราคาของการละทิ้งประโยชน์ทั้งหมดที่

03:06.270 --> 03:08.710
TypeScript เสนอให้

03:08.710 --> 03:10.840
ตรงนี้ฉันจะกลับไปใช้สตริง เพราะฉันไม่อยากมีเลขในนั้นจริงๆ

03:10.840 --> 03:14.933
และด้วยเหตุนี้เราจึงเอาเลขออกได้และก็เรียบร้อย

03:15.900 --> 03:21.890
อาร์เรย์ยังให้ตัวอย่างที่ดีแก่เรา เช่นเดียวกับออบเจกต์และคุณสมบัติของออบเจกต์

03:21.890 --> 03:25.730
การอนุมานประเภทไดนามิกของ TypeScript เป็นอย่างไร

03:25.730 --> 03:28.750
ถ้าเราเพิ่มลูป "for" ตรงนี้ที่ด้านล่าง และเราต้องการไปที่งานอดิเรกทั้งหมดของมนุษย์

03:28.750 --> 03:38.220
แน่นอนว่าเราสามารถใช้ลูป "for" แบบดั้งเดิมร่วมกับ for const งานอดิเรกของบุคคลได้

03:38.220 --> 03:38.220
งานอดิเรก

03:38.620 --> 03:41.130
ดังนั้นการเข้าถึงคุณสมบัติงานอดิเรกและดูงานอดิเรกทั้งหมดที่นั่น

03:41.130 --> 03:50.090
จัดเก็บงานอดิเรกแต่ละรายการสำหรับการวนซ้ำแต่ละครั้งในค่าคงที่นี้ จากนั้นเราจะสามารถปรึกษาบันทึกงานอดิเรกได้ที่นี่

03:50.090 --> 03:52.000
ตอนนี้ไม่ได้หรูหราเกินไป นั่นคือสิ่งที่เรารู้จาก

03:52.000 --> 03:53.710
JavaScript ใช่ไหม

03:53.710 --> 03:58.280
ถ้าตอนนี้ฉันรวบรวมแอพนี้ ts ลงที่นั่น เราได้รับชื่อจากบรรทัดนี้

03:58.280 --> 04:04.750
และหลังจากนั้นจะมีการพิมพ์งานอดิเรกทั้งสองรายการ

04:04.750 --> 04:07.800
แต่สิ่งที่น่าสนใจจริง ๆ คือ ในงานอดิเรก เราสามารถเข้าถึงอะไรก็ได้

04:07.800 --> 04:11.040
เราสามารถเข้าถึงได้จากสตริงใดก็ได้

04:11.040 --> 04:14.210
ตัวอย่างเช่นสำหรับ UpperCase ฉันได้รับการเติมข้อความอัตโนมัตินี้และ

04:14.210 --> 04:16.230
TypeScript ไม่บ่น

04:16.230 --> 04:18.070
ทำไมมันไม่บ่น?

04:18.070 --> 04:25.830
เพราะมันรู้ว่างานอดิเรกเป็นประเภท string array ดังนั้นเมื่อเข้าถึงบุคคล

04:25.830 --> 04:25.830
งานอดิเรก

04:25.830 --> 04:29.700
การอนุมานของ TypeScript ตรวจพบว่างานอดิเรกจะเป็นอาร์เรย์ของสตริง

04:29.700 --> 04:33.450
ดังนั้น ในทางกลับกัน งานอดิเรกถูกระบุอย่างถูกต้องว่าเป็นสตริง

04:33.450 --> 04:36.000
เพราะเนื่องจากเราผ่านอาร์เรย์ของสตริง

04:36.000 --> 04:40.510
ดังนั้นค่าแต่ละค่าจึงต้องเป็นเพียงสตริงเท่านั้น

04:40.510 --> 04:43.450
ดังนั้น Types จึงให้การสนับสนุนเราเป็นอย่างดี

04:43.450 --> 04:46.490
และช่วยให้เราสามารถทำทุกอย่างกับงานอดิเรกที่สามารถทำได้ด้วยสตริง

04:46.490 --> 04:53.810
เพราะมันรู้แน่นอนว่างานอดิเรกจะเป็นสตริงเนื่องจากประเภทที่เราตั้งขึ้นที่นั่น

04:53.810 --> 04:59.030
และนั่นมีความยืดหยุ่นจริงๆ และแน่นอนว่าเป็นคุณสมบัติที่ยอดเยี่ยมที่ทำให้การเขียนโค้ดง่ายขึ้นมาก

04:59.030 --> 05:01.360
มีความยืดหยุ่นและปลอดภัยมากขึ้น

05:01.360 --> 05:08.570
ตัวอย่างเช่น เราจะได้รับข้อผิดพลาดที่นี่หากพยายามเข้าถึงงานอดิเรก

05:08.570 --> 05:08.570
แผนที่ ถ้าฉันคิดว่านี่จะเป็นอาร์เรย์

05:08.570 --> 05:12.060
วิธีการแม็พมีอยู่ในอาร์เรย์ แต่ไม่มีในสตริง

05:12.060 --> 05:14.540
และที่นี่ ถูกต้องอีกครั้ง ข้อผิดพลาดที่

05:14.540 --> 05:17.810
map ไม่มีอยู่ในสตริงประเภทเนื่องจากไม่มี

05:17.810 --> 05:21.290
ตรงนี้เราได้รับข้อผิดพลาด และเป็นเรื่องดีที่เราเข้าใจ

05:21.290 --> 05:24.510
เพราะสิ่งนี้อาจผิดพลาดได้ และที่นี่ เราเห็นว่าการอนุมานของ

05:24.510 --> 05:27.343
TypeScript นั้นยอดเยี่ยมจริงๆ
