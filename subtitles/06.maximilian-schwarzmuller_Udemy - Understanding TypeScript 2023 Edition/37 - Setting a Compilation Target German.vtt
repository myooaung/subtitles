WEBVTT

00:02.450 --> 00:04.810
Kursleiter: Da wir nun wissen, wie wir unsere Dateien

00:04.810 --> 00:07.850
mit dem Compiler verwalten können, wollen wir uns nun den Compiler-Optionen

00:07.850 --> 00:11.300
zuwenden, denn die sind wirklich interessant.

00:11.300 --> 00:13.860
Dadurch können wir steuern, wie unser TypeScript-Code

00:13.860 --> 00:16.620
kompiliert wird, also nicht nur welche Dateien,

00:16.620 --> 00:18.360
sondern auch wie die Dateien,

00:18.360 --> 00:20.920
die kompiliert werden, von TypeScript behandelt

00:20.920 --> 00:23.230
werden.

00:23.230 --> 00:26.760
Und da sehen Sie, dass wir eine ganze Reihe von Möglichkeiten haben.

00:26.760 --> 00:29.560
Neben diesen Optionen finden Sie kurze Erklärungen.

00:29.560 --> 00:32.450
Einige Erklärungen sind wohl sehr kryptisch.

00:32.450 --> 00:34.210
Andere sind ganz klar.

00:34.210 --> 00:36.450
Und ich will sagen, dass viele dieser Optionen

00:36.450 --> 00:39.950
bei den meisten Projekten keine Rolle spielen werden.

00:39.950 --> 00:43.900
Sie werden also nicht alle diese Optionen einstellen, nicht einmal annähernd.

00:43.900 --> 00:46.070
Viele dieser Optionen können Sie normalerweise ignorieren.

00:46.070 --> 00:48.765
Ich werde im Laufe des Kurses auf die wichtigen Optionen

00:48.765 --> 00:50.230
eingehen, denn einige Optionen

00:50.230 --> 00:52.140
sind nur sinnvoll, wenn wir eine bestimmte

00:52.140 --> 00:53.911
Funktion kennenlernen.

00:53.911 --> 00:55.940
Und ich möchte mich schon jetzt mit einigen

00:55.940 --> 00:57.250
Optionen beschäftigen.

00:57.250 --> 01:00.840
Gehen wir also die Datei von oben nach unten durch und schauen,

01:00.840 --> 01:02.340
was wir da haben.

01:02.340 --> 01:04.410
Beginnen wir mit der Zieloption.

01:04.410 --> 01:07.230
Wie Sie sehen, ist dies bereits standardmäßig eingestellt.

01:07.230 --> 01:08.750
Sie ist nicht auskommentiert.

01:08.750 --> 01:10.780
Mit dieser Option teilen Sie TypeScript

01:10.780 --> 01:16.970
mit, für welche JavaScript-Zielversion Sie den Code kompilieren möchten.

01:16.970 --> 01:18.850
Denn TypeScript kompiliert

01:18.850 --> 01:21.600
nicht nur neue Features wie die Type Annotations,

01:21.600 --> 01:23.500
die es in JavaScript nicht

01:23.500 --> 01:26.960
gibt, in JavaScript-Code.

01:26.960 --> 01:29.667
Er sorgt also nicht nur dafür,

01:29.667 --> 01:33.270
dass das hier funktioniert.

01:33.270 --> 01:37.530
Außerdem wird der Code in JavaScript kompiliert, das

01:37.530 --> 01:41.370
in einer bestimmten Gruppe von Browsern läuft.

01:41.370 --> 01:43.798
Und Sie definieren grundsätzlich, welche Browser

01:43.798 --> 01:46.980
den Kompiliercode unterstützen, indem Sie das Ziel festlegen.

01:46.980 --> 01:49.520
Das Standardziel hier in diesem Projekt ist, wie Sie sehen,

01:49.520 --> 01:52.430
das anfängliche Ziel, das eingerichtet wird, ist es5, was bedeutet,

01:52.430 --> 01:55.517
dass alle Arten von Code herunterkompiliert werden.

01:55.517 --> 01:57.550
Das können wir tatsächlich sehen.

01:57.550 --> 02:00.770
Wenn ich TSC hier ausführe, um alle meine Dateien zu kompilieren,

02:00.770 --> 02:03.260
sehen wir in app. ts Ich verwende let und

02:03.260 --> 02:05.732
const, aber in app. js, wir sehen var.

02:05.732 --> 02:09.890
Und das passiert, weil wir ein Ziel von es5 haben und

02:09.890 --> 02:13.816
in der es5-Welt gibt es kein "let and const".

02:13.816 --> 02:16.810
Das Gute daran ist, dass wir TypeScript verwenden können,

02:16.810 --> 02:20.650
um Code zu erzeugen, der auch in älteren Browsern funktioniert.

02:20.650 --> 02:22.930
Aber es liegt ganz bei uns, ob wir das tun wollen.

02:22.930 --> 02:25.550
Vielleicht wollen wir das nicht mit TypeScript machen,

02:25.550 --> 02:27.670
weil wir vielleicht ein anderes Build-Tool haben,

02:27.670 --> 02:30.560
das sich dann um die JavaScript-Transpilierung kümmert, und

02:30.560 --> 02:33.290
deshalb wollen wir das nicht mit TypeScript machen, oder vielleicht

02:33.290 --> 02:35.340
wollen wir Code ausliefern, der nur in modernen

02:35.340 --> 02:37.030
Browsern funktioniert, weil wir wissen,

02:37.030 --> 02:41.170
dass unsere Anwendung nur in modernen Browsern laufen wird.

02:41.170 --> 02:44.160
Daher werden hier alternative Optionen angezeigt, wenn

02:44.160 --> 02:46.070
Sie den Wert löschen. Wenn Sie in vscode

02:46.070 --> 02:48.080
die Tastenkombination Strg + Leertaste

02:48.080 --> 02:51.300
drücken, um die Autovervollständigung zu aktivieren, werden

02:51.300 --> 02:54.180
Ihnen eine Reihe von Vorschlägen angezeigt, und Sie sehen

02:54.180 --> 02:56.450
hier alle verfügbaren Werte.

02:56.450 --> 02:58.700
Im Laufe der Zeit wird sich dies natürlich ändern,

02:58.700 --> 03:01.900
da neue JavaScript-Versionen veröffentlicht werden.

03:01.900 --> 03:03.785
Sie haben gesehen, dass wir dies zuvor auf es5 eingestellt haben.

03:03.785 --> 03:06.150
Wenn Sie überhaupt kein Ziel angeben, dann

03:06.150 --> 03:09.520
kompiliert TypeScript im Moment sogar nach es3, unterstützt

03:09.520 --> 03:12.200
also eine noch ältere Version.

03:12.200 --> 03:15.130
Aber Sie können auch mit es6, die moderner ist, die,

03:15.130 --> 03:17.510
zum Beispiel, unterstützt const und lassen

03:17.510 --> 03:19.310
oder nehmen Sie eine noch neuere

03:19.310 --> 03:24.310
Version, es6 ist gleichwertig mit es2015, nur für das Protokoll.

03:24.870 --> 03:27.480
Wenn wir dies also zum Beispiel auf es6 setzen und ich

03:27.480 --> 03:29.580
den tsc-Befehl nach der Änderung der tsconfig

03:29.580 --> 03:32.460
erneut ausführe. json-Datei, die Sie

03:32.460 --> 03:35.440
nun in der App sehen. js, wir haben let und const,

03:35.440 --> 03:38.130
weil das jetzt dort unterstützt wird.

03:38.130 --> 03:39.340
Das hängt also von Ihnen ab.

03:39.340 --> 03:41.720
Natürlich ist der generierte Code umso

03:41.720 --> 03:43.641
prägnanter, je moderner die JavaScript-Version

03:43.641 --> 03:47.450
ist, die Sie hier auswählen, da TypeScript immer weniger Code

03:47.450 --> 03:50.440
kompilieren muss oder in weniger Situationen

03:50.440 --> 03:54.010
nicht vorhandene Funktionen umgehen muss, so dass der

03:54.010 --> 03:59.560
kompilierte Code in der Regel prägnanter und kürzer ist.

03:59.560 --> 04:01.150
Das ist also das Ziel.

04:01.150 --> 04:02.623
Was ist mit den anderen Optionen?
