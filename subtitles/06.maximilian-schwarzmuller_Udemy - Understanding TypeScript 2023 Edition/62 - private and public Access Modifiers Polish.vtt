WEBVTT

00:02.040 --> 00:04.180
Nauczyciel: Czyli to była bardzo podstawowa klasa.

00:04.180 --> 00:05.930
Teraz, gdy budujemy klasy, często

00:05.930 --> 00:08.400
stają się one bardziej złożone niż to.

00:08.400 --> 00:10.800
I być może będziesz chciał przechowywać tam więcej danych.

00:10.800 --> 00:15.160
Załóżmy, że jakiś dział wszystkie powinien mieć pracowników.

00:15.160 --> 00:18.160
To może być tablica, a początkowo może

00:18.160 --> 00:20.290
to być pusta tablica.

00:20.290 --> 00:23.520
A także, aby być nieco bardziej precyzyjnym, co chcesz tam

00:23.520 --> 00:24.980
przechowywać, może to być

00:24.980 --> 00:28.800
tablica łańcuchów, aby utrzymać ją w stosunkowo prostym stanie.

00:28.800 --> 00:31.733
Teraz moglibyśmy mieć tutaj metodę addEmployee.

00:33.030 --> 00:36.880
Tam chcemy pracownika jako argument, który w naszym przykładzie

00:36.880 --> 00:39.430
powinien być po prostu ciągiem.

00:39.430 --> 00:42.650
Wtedy możemy ustawić to. pracowników. pchać.

00:42.650 --> 00:47.320
Więc wepchnij nowego pracownika do naszej tablicy pracowników za pomocą

00:47.320 --> 00:48.373
tego kodu.

00:50.750 --> 00:52.683
Teraz możemy również dodać kolejną

00:53.666 --> 00:55.749
metodę, printEmployeeInformation.

01:00.508 --> 01:05.508
I tam chcę się pocieszyć. log(this. pracowników. length) i chcę

01:07.766 --> 01:12.766
też konsolować. log(this. pracowników) sam.

01:15.510 --> 01:18.480
Teraz, jeśli zejdziemy na dół, teraz możemy wykomentować

01:18.480 --> 01:20.560
ten kod tutaj, który ponownie złamałby

01:20.560 --> 01:24.070
się, ponieważ ponownie nie pasujemy do opisu działu z naszym

01:24.070 --> 01:25.870
obiektem na dole.

01:25.870 --> 01:29.200
A zamiast tego tutaj, na tym dziale księgowości,

01:29.200 --> 01:32.234
możemy dodać pracownika, powiedzmy Maxa.

01:32.234 --> 01:35.400
I jeszcze jeden pracownik, powiedzmy Manu.

01:35.400 --> 01:37.690
I wtedy oprócz opisania go, chcę

01:37.690 --> 01:41.520
też ściągnąć tam informacje o pracownikach.

01:41.520 --> 01:44.600
Jeśli zapiszemy to, powinniśmy otrzymać to wyjście,

01:44.600 --> 01:47.830
dwóch pracowników i oto kilka informacji.

01:47.830 --> 01:50.240
Teraz to wszystko miło mieć.

01:50.240 --> 01:52.700
Jednym problemem, jaki mamy z tą klasą, jest

01:52.700 --> 01:55.960
to, że moglibyśmy zmieniać pracowników z zewnątrz, nie tylko

01:55.960 --> 01:58.160
za pomocą add employee, ale poprzez bezpośredni

01:58.160 --> 02:01.710
dostęp do właściwości pracownika, tak jak możemy to zrobić również

02:01.710 --> 02:04.430
dla nazwy, przy okazji.

02:04.430 --> 02:07.630
Czyli chodzi mi o to, że moglibyśmy też pójść do księgowości,

02:07.630 --> 02:10.560
a potem sięgnąć do pracowników i może dołożyć jeszcze

02:10.560 --> 02:13.870
jednego pracownika przy indeksie drugim, a tam przejść

02:13.870 --> 02:16.400
Annę, tak jak to.

02:16.400 --> 02:18.210
Jeśli to zrobimy i zapiszemy, to dostaniemy

02:18.210 --> 02:20.290
trzech pracowników i dostaniemy Annę.

02:20.290 --> 02:22.710
Teraz możesz pomyśleć, no świetnie, mamy inny sposób.

02:22.710 --> 02:25.230
Cóż, kiedy budujesz bardziej złożone aplikacje,

02:25.230 --> 02:27.980
zwykle chcesz uniknąć czegoś takiego chociaż.

02:27.980 --> 02:30.930
Chcesz się upewnić, że istnieje jedna jasna ścieżka,

02:30.930 --> 02:34.870
jeden sposób korzystania z twojej klasy, i że rzeczy takie jak to, alternatywne

02:34.870 --> 02:37.280
sposoby korzystania z niego, nie są naprawdę

02:37.280 --> 02:38.530
wspierane.

02:38.530 --> 02:41.230
Bo jeśli pracujesz w większym zespole, to cóż wtedy

02:41.230 --> 02:42.920
jeden kolega będzie używał tego

02:42.920 --> 02:45.700
podejścia do dodawania pracownika, a inny kolega

02:45.700 --> 02:48.050
może używać tego podejścia.

02:48.050 --> 02:49.280
A ty tego nie chcesz.

02:49.280 --> 02:52.640
Chcesz mieć jeden jednolity sposób na zrobienie tego.

02:52.640 --> 02:55.960
Również dlatego, że być może w metodzie add employee robisz

02:55.960 --> 02:58.420
coś więcej niż tylko dodanie go do tablicy.

02:58.420 --> 02:59.770
Może przede wszystkim

02:59.770 --> 03:02.400
chcesz mieć tutaj jakąś walidację itp.

03:02.400 --> 03:04.940
Więc możesz mieć tam dodatkowy kod, który po

03:04.940 --> 03:06.610
prostu nie wykona się, jeśli

03:06.610 --> 03:09.470
bezpośrednio przypiszesz nową wartość lub dodasz

03:09.470 --> 03:12.970
nową wartość do tablicy za pomocą tej linii tutaj.

03:12.970 --> 03:16.000
Więc nie chcesz pozwolić, aby pracownicy

03:16.000 --> 03:19.884
byli dostępni w ten sposób spoza klasy.

03:19.884 --> 03:22.340
A TypeScript ma cię pod opieką.

03:22.340 --> 03:26.760
Możesz przekształcić pracowników tutaj w prywatną własność,

03:26.760 --> 03:30.580
prywatne pole, dodając prywatne słowo kluczowe

03:30.580 --> 03:32.220
przed nim.

03:32.220 --> 03:34.303
Teraz to, co prywatne oznacza,

03:34.303 --> 03:38.030
że pracownicy są teraz właściwością, która jest

03:38.030 --> 03:41.210
dostępna tylko z wnętrza klasy, więc z wnętrza

03:41.210 --> 03:43.480
obiektu twórczego.

03:43.480 --> 03:46.700
Więc każda metoda wewnątrz klasy działu jest

03:46.700 --> 03:49.770
w stanie nadal pracować z pracownikami.

03:49.770 --> 03:52.570
Ale nie można już mieć dostępu w ten sposób.

03:52.570 --> 03:54.710
Tutaj widzisz, że teraz dostaję błąd.

03:54.710 --> 03:57.280
Jeśli spróbuję to zapisać, otrzymam błąd

03:57.280 --> 03:59.870
kompilacji, że właściwość "pracownicy"

03:59.870 --> 04:03.550
jest prywatna i dostępna tylko w ramach klasy "dział".

04:03.550 --> 04:07.100
Więc teraz wymuszamy, że kiedy pracownicy powinni

04:07.100 --> 04:09.370
być dodani do tego działu, ludzie

04:09.370 --> 04:12.690
muszą użyć metody addEmployee.

04:12.690 --> 04:16.760
Ponieważ otrzymują błąd, jeśli napiszą kod w ten sposób.

04:16.760 --> 04:20.460
To jest tak zwany modyfikator tutaj, czyli prywatne słowo kluczowe.

04:20.460 --> 04:23.470
A oprócz prywatnego mamy też publiczny, który

04:23.470 --> 04:25.000
jest jednak domyślny.

04:25.000 --> 04:26.590
Nie musisz dodawać publicznych.

04:26.590 --> 04:29.590
Więc nazwa taka jak ta jest dokładnie taka sama

04:29.590 --> 04:31.650
jak nazwa z public przed nią.

04:31.650 --> 04:34.300
Różnica polega na tym, że nieruchomości publiczne

04:34.300 --> 04:36.350
są dostępne z zewnątrz.

04:36.350 --> 04:40.350
Więc np. tutaj też mógłbym sięgnąć do nazwy i przypisać

04:40.350 --> 04:43.600
nową nazwę, gdybym chciał.

04:43.600 --> 04:45.260
To jest możliwe.

04:45.260 --> 04:49.270
W przypadku prywatnych nieruchomości nie jest to możliwe.

04:49.270 --> 04:51.580
Możemy je wykorzystać tylko od wewnątrz.

04:51.580 --> 04:52.800
Technicznie, przy

04:52.800 --> 04:55.700
okazji, JavaScript nie zna public i private.

04:55.700 --> 04:59.630
Tylko w bardzo nowoczesnych wersjach dodanych niedawno

04:59.630 --> 05:01.320
takie coś istnieje.

05:01.320 --> 05:03.650
W przeszłości JavaScript nie znał właściwości

05:03.650 --> 05:05.690
prywatnych i publicznych.

05:05.690 --> 05:08.520
Wszystkie nieruchomości zawsze były tam publiczne.

05:08.520 --> 05:10.630
TypeScript wprowadza tę funkcję,

05:10.630 --> 05:13.561
która oczywiście nie działa jednak podczas runtime,

05:13.561 --> 05:16.620
ponieważ JavaScript do niedawna znał tylko właściwości

05:16.620 --> 05:18.780
publiczne.

05:18.780 --> 05:21.290
Więc ta linia tutaj, zamrożony błąd podczas

05:21.290 --> 05:23.130
kompilacji TypeScript.

05:23.130 --> 05:27.000
Jeśli skompilujesz go do JavaScript niemniej jednak, ten kod nadal

05:27.000 --> 05:30.140
będzie wykonywany w runtime bez błędów, ponieważ ponownie,

05:30.140 --> 05:32.800
JavaScript na własną rękę, do niedawna nie znał

05:32.800 --> 05:34.900
tej koncepcji.

05:34.900 --> 05:37.350
Więc w zależności od wersji, dla której kompilujesz, nadal

05:37.350 --> 05:38.720
nie będzie tego wiedzieć.

05:38.720 --> 05:40.770
I dlatego TypeScript obsługuje to tylko

05:40.770 --> 05:42.980
dlatego, że sprawdza to podczas kompilacji,

05:42.980 --> 05:44.650
a nie w czasie biegu.

05:44.650 --> 05:47.370
Dzięki niemu możemy jednak uniknąć kodu takiego jak ten

05:47.370 --> 05:49.863
i zmusić wszystkich do pisania czystszego kodu.
