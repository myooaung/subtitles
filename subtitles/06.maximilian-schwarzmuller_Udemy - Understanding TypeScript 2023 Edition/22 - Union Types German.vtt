WEBVTT

00:02.130 --> 00:02.963
Kursleiter: Wir haben also

00:02.963 --> 00:05.180
ein paar der Kerntypen behandelt, die TypeScript kennt.

00:05.180 --> 00:06.590
Lassen Sie uns jetzt weitermachen.

00:06.590 --> 00:09.140
Dafür werde ich die App umbenennen. ts hier zu objs-arrays-enums,

00:09.140 --> 00:11.670
oder wie auch immer Sie es nennen wollen, so dass wir immer

00:11.670 --> 00:12.750
noch diese Datei haben,

00:12.750 --> 00:17.130
aber ich werde eine ganz neue App erstellen.

00:17.130 --> 00:17.130
ts-Datei,

00:17.130 --> 00:18.860
damit wir wieder eine leere Datei haben,

00:18.860 --> 00:20.500
in der wir arbeiten können.

00:20.500 --> 00:22.550
In dieser Datei möchte ich auf einen weiteren

00:22.550 --> 00:25.790
interessanten Typ eingehen, den Sie in TypeScript finden.

00:25.790 --> 00:28.640
Und das ist der Gewerkschaftstyp.

00:28.640 --> 00:30.190
Und was ist das?

00:30.190 --> 00:33.000
Kommen wir zurück zu unserer Add-Funktion, die wir vorhin geschrieben

00:33.000 --> 00:34.490
haben. Ich kopiere sie und verschiebe

00:34.490 --> 00:37.270
sie nach app. ts.

00:37.270 --> 00:39.190
Lassen Sie diesen Kommentar hier weg, und hier auf

00:39.190 --> 00:42.940
add, lassen Sie uns die Grundlagen schließen. ts, damit wir diesen Fehler

00:42.940 --> 00:44.170
loswerden.

00:44.170 --> 00:47.970
Hier in add möchte ich nun flexibler sein, was das angeht,

00:47.970 --> 00:49.920
was wir hier akzeptieren.

00:49.920 --> 00:52.570
Ich werde auch showResult und phrase loswerden,

00:52.570 --> 00:54.370
ich brauche das nicht.

00:54.370 --> 00:55.690
Und das Einzige, was ich tun möchte,

00:55.690 --> 00:58.590
ist, ein Ergebnis zu berechnen und es zurückzugeben.

00:58.590 --> 01:01.960
Aber ich möchte bei den Eingaben flexibler sein.

01:01.960 --> 01:06.045
Zuvor haben wir dafür gesorgt, dass wir nur mit Zahlen arbeiten.

01:06.045 --> 01:09.357
Nehmen wir nun an, dass wir diese Kombination tatsächlich benennen

01:09.357 --> 01:13.190
und sie sowohl mit Zahlen als auch mit Zeichenketten funktionieren soll.

01:13.190 --> 01:15.710
Denn es stellt sich heraus, dass wir mit diesem Plus-Operator

01:15.710 --> 01:18.595
sowohl Zahlen als auch Zeichenketten kombinieren können. Der

01:18.595 --> 01:21.650
einzige Unterschied besteht darin, dass wir in einem Szenario eine

01:21.650 --> 01:24.030
Zahl als Ergebnis zurückbekommen, im anderen Szenario

01:24.030 --> 01:27.120
erhalten wir eine verkettete Zeichenkette, wie wir eigentlich schon

01:27.120 --> 01:30.150
zu Beginn dieses Moduls gesehen haben.

01:30.150 --> 01:32.040
Aber jetzt möchte ich dieses Verhalten zulassen,

01:32.040 --> 01:33.950
weil man eine Anwendung haben könnte, in der

01:33.950 --> 01:36.740
man eine flexible Kombinationsfunktion haben möchte, die mit

01:36.740 --> 01:38.963
Zahlen und Strings funktioniert.

01:39.830 --> 01:42.360
Deshalb werde ich auch diesen Eingang1

01:42.360 --> 01:47.340
hier und diesen Eingang2 benennen und diese beiden jetzt kombinieren.

01:47.340 --> 01:49.740
Aber es gibt natürlich ein Problem, denn

01:49.740 --> 01:53.180
im Moment sind beide Parameter auf Zahlen eingestellt.

01:53.180 --> 01:56.050
Das bedeutet, dass wir diese Funktion aufrufen können,

01:56.050 --> 01:58.190
solange wir mit Zahlen arbeiten wollen.

01:58.190 --> 01:59.130
Nehmen wir an, wir erstellen

01:59.130 --> 02:01.640
dort unten eine neue Konstante, combinedAges.

02:02.931 --> 02:04.690
Und dort rufe ich "combine"

02:04.690 --> 02:09.602
auf und gebe hier 30 und 26 als Altersangaben in die Anwendung ein,

02:09.602 --> 02:12.000
die wir gerade erstellen.

02:12.000 --> 02:15.014
Ein weiteres After-Console-Log kombiniertAges, nun, es

02:15.014 --> 02:17.240
sollte nicht allzu überraschend sein, dass,

02:17.240 --> 02:19.830
wenn wir jetzt kompilieren diese Datei hier, und wir

02:19.830 --> 02:22.360
dann neu laden diese Seite, erhalten wir 56.

02:22.360 --> 02:24.690
Wenn das funktioniert, erhalten wir diese Zahl.

02:24.690 --> 02:26.710
Aber natürlich haben wir ein Problem, wenn wir versuchen,

02:26.710 --> 02:28.838
hier eine Zeichenfolge zu erstellen.

02:28.838 --> 02:31.610
CombinedNames, zum Beispiel.

02:31.610 --> 02:36.033
Wenn ich hier versuche, Max und Anna zu kombinieren, dann bekommen wir hier

02:37.230 --> 02:39.630
sofort eine Fehlermeldung, dass Max nicht

02:39.630 --> 02:42.320
dem Typ number zugewiesen werden kann, weil das

02:42.320 --> 02:44.350
natürlich ein String ist.

02:44.350 --> 02:45.790
Natürlich könnten wir dies ändern,

02:45.790 --> 02:47.750
um Strings anstelle von Zahlen zu akzeptieren, aber

02:47.750 --> 02:50.130
dann würde der erste Funktionsaufruf fehlschlagen.

02:50.130 --> 02:52.750
Und genau dabei können uns die Gewerkschaften helfen.

02:52.750 --> 02:55.692
Wenn wir irgendwo in unserer Anwendung einen

02:55.692 --> 02:58.810
Parameter einer Funktion, eine Konstante oder

02:58.810 --> 03:01.700
eine Variable verwenden, wo wir zwei verschiedene

03:01.700 --> 03:05.030
Arten von Werten akzeptieren.

03:05.030 --> 03:07.410
Nun, dann kann uns ein Gewerkschaftstyp helfen.

03:07.410 --> 03:09.800
Um TypeScript mitzuteilen, dass wir

03:09.800 --> 03:12.690
entweder eine Zahl oder eine Zeichenkette akzeptieren,

03:12.690 --> 03:14.220
verwenden wir number und

03:14.220 --> 03:17.710
dann das Pipe-Symbol hier, und dann den anderen Typ,

03:17.710 --> 03:20.660
den wir auch akzeptieren.

03:20.660 --> 03:22.340
Und Sie können mehr als zwei Typen haben,

03:22.340 --> 03:25.220
Sie können hier so viele Typen akzeptieren, wie Sie brauchen.

03:25.220 --> 03:27.050
Hier brauche ich also nur zwei, und

03:27.050 --> 03:28.880
das ist die erschwingliche Typenzuweisung,

03:28.880 --> 03:31.720
die ich verwenden werde: Zahl oder String.

03:31.720 --> 03:33.690
Nun erhalte ich hier die Fehlermeldung,

03:33.690 --> 03:35.930
dass der Plus-Operator nicht auf die Typen string

03:35.930 --> 03:39.120
oder number und string oder number angewendet werden kann.

03:39.120 --> 03:41.500
Das ist eigentlich nicht ganz richtig, das sollte

03:41.500 --> 03:44.350
funktionieren, denn wir können den Plus-Operator sowohl mit

03:44.350 --> 03:46.670
Zahlen als auch mit Zeichenketten verwenden.

03:46.670 --> 03:49.600
Aber TypeScript sieht nur, dass wir hier einen Union-Typ

03:49.600 --> 03:52.540
haben, und es analysiert nicht, was in dem Union-Typ

03:52.540 --> 03:56.010
ist, es sieht nur: "Okay, du erwartest mehrere Typen.

03:56.010 --> 03:57.530
Vielleicht gehören dazu auch Typen,

03:57.530 --> 03:59.460
bei denen ich den Plus-Operator nicht verwenden

03:59.460 --> 04:01.640
kann, deshalb werde ich mich hier beschweren. Zum Glück können wir dieses Problem jetzt aber umgehen.

04:01.640 --> 04:05.410
Wir können unsere Laufzeit-Typprüfung hier hinzufügen

04:05.410 --> 04:07.910
und sehen, ob input1 typeof, das gleich

04:07.910 --> 04:11.240
Zahl ist, und ob typeof input2 gleich Zahl ist, und

04:12.750 --> 04:15.170
dann diese Berechnung dorthin verschieben,

04:16.530 --> 04:21.283
jetzt nur eine Verbesserung, lassen Sie uns das Ergebnis als eine Variable

04:24.100 --> 04:26.410
am Anfang dieser if-Prüfung erstellen,

04:26.410 --> 04:28.510
wegen des Lock Scoping, so dass dies

04:28.510 --> 04:33.880
eine Variable ist, die in der gesamten Funktion verfügbar ist, und dann einfach einen

04:33.880 --> 04:37.873
neuen Wert dort zuweisen.

04:37.873 --> 04:40.310
Hier prüfen wir also, ob wir zwei Zahlen haben.

04:40.310 --> 04:42.818
Und deshalb weiß TypeScript, dass

04:42.818 --> 04:45.890
hier input1 und input2 beide Zahlen sind.

04:45.890 --> 04:49.790
Fügen wir hier eine weitere Prüfung hinzu.

04:49.790 --> 04:53.900
Und dort können wir das Ergebnis mit input1 gleichsetzen. tostring, das explizit in eine Zeichenkette

04:53.900 --> 04:56.913
umgewandelt wird,

04:58.550 --> 05:00.570
und input2. tostring.

05:00.570 --> 05:02.880
Und das geht dann auch für TypeScript

05:02.880 --> 05:04.160
und JavaScript, weil wir zwei Strings

05:04.160 --> 05:05.700
verketten können.

05:05.700 --> 05:08.220
Jetzt haben wir also fast die gleiche Berechnung,

05:08.220 --> 05:10.800
aber wir haben klargestellt, dass wir hier immer

05:10.800 --> 05:12.110
mit Zahlen und hier immer

05:12.110 --> 05:13.590
mit Strings arbeiten, und dann

05:13.590 --> 05:15.730
geben wir das Ergebnis zurück.

05:15.730 --> 05:17.490
Wenn wir nun die kombinierten

05:17.490 --> 05:20.870
Namen auf der Konsole protokollieren und diese Datei kompilieren,

05:20.870 --> 05:25.350
werden wir sehen, dass wir beim erneuten Aufrufen unserer Seite die kombinierten

05:25.350 --> 05:27.210
Zahlen erhalten haben, die einfach

05:27.210 --> 05:35.090
addiert wurden, so dass wir als Ergebnis eine Zahl und hier zwei kombinierte Namen erhalten.

05:35.090 --> 05:36.850
Auf diese Weise können wir Union-Typen

05:36.850 --> 05:40.830
verwenden, um flexibler zu sein, wenn es darum geht, was wir z. B. in einer Funktion

05:40.830 --> 05:43.770
oder an einem anderen Ort in unserem Code tun.

05:43.770 --> 05:45.920
Diese zusätzliche Typprüfung zur Laufzeit

05:45.920 --> 05:49.520
ist nicht immer erforderlich, wenn Sie mit Vereinigungstypen arbeiten,

05:49.520 --> 05:51.230
aber oft, weil Sie mit Vereinigungstypen

05:51.230 --> 05:54.090
flexibler sein können, z. B. bei den Parametern, die Sie akzeptieren,

05:54.090 --> 05:56.350
aber dann haben Sie möglicherweise eine andere

05:56.350 --> 05:58.170
Logik in Ihrer Funktion, je nachdem, welchen

05:58.170 --> 06:00.940
genauen Typ Sie erhalten.

06:00.940 --> 06:03.730
Damit Ihre Funktion mit mehreren

06:03.730 --> 06:05.640
Arten von Werten arbeiten

06:05.640 --> 06:07.810
kann, aber je nach Art des Wertes

06:07.810 --> 06:10.320
etwas anderes tut.

06:10.320 --> 06:12.410
Bei der Arbeit mit Union-Typen ist eine

06:12.410 --> 06:15.270
solche Laufzeitprüfung zwar oft, aber nicht immer

06:15.270 --> 06:16.700
erforderlich.

06:16.700 --> 06:18.490
In TypeScript-Programmen wird es sicherlich

06:18.490 --> 06:20.900
auch Situationen geben, in denen man einen Union-Typ

06:20.900 --> 06:24.060
ohne Laufzeittypprüfung verwenden kann.

06:24.060 --> 06:25.870
Es hängt wirklich von der Logik ab, die Sie schreiben.
