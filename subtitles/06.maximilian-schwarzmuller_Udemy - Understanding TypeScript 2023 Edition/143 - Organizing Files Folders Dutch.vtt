WEBVTT

00:02.300 --> 00:04.180
Instructeur: Dus we beginnen met namen

00:04.180 --> 00:05.960
bases, laten we verder gaan op die route,

00:05.960 --> 00:08.460
en laten we het opsplitsen in meer bestanden.

00:08.460 --> 00:11.090
Voor dat hier, het project state management.

00:11.090 --> 00:13.610
We kunnen dat ook in een apart bestand zetten.

00:13.610 --> 00:16.050
Dus ik pak alles inclusief deze

00:16.050 --> 00:20.600
creatie van de projectstaat instantie hier, knip

00:20.600 --> 00:24.250
het uit de app. ts bestand en maak een nieuw bestand,

00:24.250 --> 00:27.060
project-state. ts.

00:27.060 --> 00:29.685
Verplaats dat daarheen en zet het net

00:29.685 --> 00:32.070
als eerder in een naamruimte.

00:32.070 --> 00:35.400
Naamruimte app, naam is belangrijk, het moet App zijn

00:35.400 --> 00:38.090
omdat daar de rest van onze code staat.

00:38.090 --> 00:40.440
Zet het er allemaal in en nu belangrijk,

00:40.440 --> 00:43.560
exporteer ook wat je buiten dit bestand nodig hebt,

00:43.560 --> 00:46.120
wat in dit geval de projectstate klasse is,

00:46.120 --> 00:48.830
die hebben we nodig in de rest van onze applicatie,

00:48.830 --> 00:51.500
en ook deze constante daar beneden, die moeten

00:51.500 --> 00:53.880
we ook exporteren.

00:53.880 --> 00:57.060
Je hoeft de Listener hier niet te exporteren, en ook niet die toestand,

00:57.060 --> 00:59.430
want beide dingen worden alleen in dit bestand

00:59.430 --> 01:01.480
gebruikt en hoeven dus niet geëxporteerd

01:01.480 --> 01:02.823
te worden.

01:03.700 --> 01:06.860
Nu moeten we onze projectstate importeren. ts bestand, dus

01:06.860 --> 01:09.540
in App. ts, tijd voor een andere import daarboven.

01:09.540 --> 01:13.290
Project dash state, zomaar.

01:13.290 --> 01:16.620
Als we dat opslaan, zou het zonder fouten moeten compileren.

01:16.620 --> 01:19.480
Nu ga ik verder en het validatiegedeelte kan

01:19.480 --> 01:21.460
ook in een apart bestand, dus ik

01:21.460 --> 01:23.960
pak dit allemaal, maak een nieuw bestand,

01:23.960 --> 01:26.890
validatie. ts, voeg hier de namespace

01:26.890 --> 01:30.760
App toe, zet daar mijn validatie logica in en exporteer

01:30.760 --> 01:33.560
hier natuurlijk de valideerbare interface

01:33.560 --> 01:36.706
en alle devalidate functie.

01:36.706 --> 01:39.566
En dan, terug in App. ts, je weet hoe het gaat, we gaan

01:39.566 --> 01:41.700
terug naar boven en voegen een import toe om

01:41.700 --> 01:43.513
te valideren. ts.

01:45.160 --> 01:49.823
Nu kan de decorator ook in een apart bestand worden ondergebracht.

01:49.823 --> 01:54.410
Autobind dash decorator. ts, bijvoorbeeld.

01:54.410 --> 01:58.863
Nogmaals, voeg de namespace met de naam App eraan toe, zet de functie

01:58.863 --> 02:01.950
erin en exporteer hem, natuurlijk, om hem ook

02:01.950 --> 02:04.820
buiten dit bestand beschikbaar te maken

02:04.820 --> 02:08.430
en dan hier in app. ts, tijd voor nog een import waarbij

02:08.430 --> 02:12.633
ik autobind dash decorator importeer. ts.

02:14.840 --> 02:16.484
Nu hebben we meer dingen om te exporteren,

02:16.484 --> 02:19.240
we hebben onze component en dan al deze klassen.

02:19.240 --> 02:21.205
Ik wil elke klasse in een apart bestand

02:21.205 --> 02:25.440
hebben, zodat elk bestand relatief klein en gemakkelijk te beheren is.

02:25.440 --> 02:28.280
Nu krijgen we echter een nieuw probleem.

02:28.280 --> 02:30.385
We voegen steeds meer bestanden toe

02:30.385 --> 02:33.934
op hetzelfde niveau en voor nu gebruik ik het streepje hier om

02:33.934 --> 02:37.800
een hint of hulp te geven over wat er in het bestand staat, autobind

02:37.800 --> 02:41.260
dash decorator laat ons zien dat er waarschijnlijk een decorator

02:41.260 --> 02:42.330
in zit.

02:42.330 --> 02:44.300
Hier hebben we waarschijnlijk interfaces.

02:44.300 --> 02:46.246
Hier, een model en zo.

02:46.246 --> 02:49.070
Als je maar drie of vier bestanden hebt,

02:49.070 --> 02:52.010
is dat prima, maar als je meer bestanden

02:52.010 --> 02:55.276
hebt, krijg je een heel moeilijk te begrijpen

02:55.276 --> 02:57.430
mappenstructuur.

02:57.430 --> 03:00.056
Dus wat ik graag doe, is submappen maken.

03:00.056 --> 03:02.697
Ik voeg een submap decorators toe, zet mijn

03:02.697 --> 03:05.830
autobind decorator daar in, en hernoem hem gewoon

03:05.830 --> 03:08.290
autobind, omdat hij al in de map decorators

03:08.290 --> 03:09.260
staat.

03:09.260 --> 03:11.720
Natuurlijk zit er een decorateur in.

03:11.720 --> 03:14.440
Dan voeg ik mijn models map toe, en eigenlijk zet

03:14.440 --> 03:17.523
ik hier zowel de drag and drop interfaces als het project

03:17.523 --> 03:19.355
model in, simpelweg omdat ik denk

03:19.355 --> 03:21.763
dat de drag and drop interfaces uiteindelijk

03:21.763 --> 03:24.187
gewoon definities zijn van hoe draggable

03:24.187 --> 03:27.263
en dropable classes eruit moeten zien.

03:27.263 --> 03:29.910
Net zoals het projectmodel de definitie is van hoe een

03:29.910 --> 03:31.630
projectklasse eruit moet zien of hoe

03:31.630 --> 03:33.655
ons projectobject eruit moet zien.

03:33.655 --> 03:38.530
Dus ik noem dit drag and drop en dit hier gewoon project en

03:38.530 --> 03:42.610
dan voeg ik hier een util map toe voor utility en voeg

03:42.610 --> 03:44.860
daar mijn validatie in en dan

03:44.860 --> 03:49.690
een state map en voeg daar project state aan toe.

03:49.690 --> 03:52.400
Hier zal ik de naam project-state aanhouden om verwarring

03:52.400 --> 03:55.300
met dit project te voorkomen. ts bestand hier.

03:55.300 --> 03:56.716
Technisch gezien zou dat geen probleem

03:56.716 --> 03:59.216
zijn, maar ik wil het hier in deze cursus ook duidelijk

03:59.216 --> 04:00.990
maken, zodat u gemakkelijker kunt zien

04:00.990 --> 04:02.640
in welk bestand ik werk.

04:02.640 --> 04:05.640
Je zou dit zeker kunnen hernoemen naar gewoon project. ts hier als

04:05.640 --> 04:07.320
je wilde.

04:07.320 --> 04:09.662
Nu, met die re-factoring en deze submappen,

04:09.662 --> 04:12.069
zijn onze importen hier natuurlijk gebroken,

04:12.069 --> 04:14.010
dus moeten we ze repareren.

04:14.010 --> 04:17.366
Drag and drop interfaces is te vinden in de models map

04:17.366 --> 04:21.216
en heet nu gewoon drag-drop. ts.

04:21.216 --> 04:25.630
En het projectmodel staat ook in de models map en heet nu

04:25.630 --> 04:28.560
gewoon project. ts.

04:28.560 --> 04:31.100
Project state staat in de state folder,

04:31.100 --> 04:34.040
validation staat in de util folder, en

04:34.040 --> 04:36.896
autobind decorator staat in decorators

04:36.896 --> 04:39.860
en heet gewoon autobind.

04:39.860 --> 04:42.547
Als we dat opslaan, compileert het zonder fouten

04:42.547 --> 04:44.128
en hebben we nu een beter beheersbare

04:44.128 --> 04:47.290
en leesbare mappenstructuur, zou ik zeggen.

04:47.290 --> 04:50.500
Daarmee gaan we verder, we zijn nog niet klaar.

04:50.500 --> 04:52.130
We hebben onze component

04:52.130 --> 04:54.813
hier, nu voeg ik daarvoor een componenten

04:54.813 --> 04:59.813
sub-map toe en daarin wil ik mijn basis dash component ts bestand

05:00.210 --> 05:05.210
hebben en dan mijn project item ts bestand, mijn project lijst ts

05:07.600 --> 05:12.110
bestand en ook het project input ts bestand.

05:12.110 --> 05:14.430
U kunt dit natuurlijk altijd anders organiseren,

05:14.430 --> 05:17.631
maar ik denk dat dit verwante bestanden bij elkaar houdt.

05:17.631 --> 05:22.253
Dus we kunnen deze abstracte component basisklasse hier pakken, het uit app

05:23.830 --> 05:27.023
ts knippen en het verplaatsen naar basiscomponent.

05:29.610 --> 05:33.180
Zoals dit, en natuurlijk ook net als voorheen,

05:33.180 --> 05:37.810
voeg het toe aan een namespace met de naam App.

05:37.810 --> 05:41.120
En zet het dan in deze naamruimte.

05:41.120 --> 05:43.890
Natuurlijk pas ik dit aan voordat we het moeten exporteren, zodat

05:43.890 --> 05:46.171
we het in een ander bestand kunnen gebruiken.

05:46.171 --> 05:49.800
Dat andere bestand zal echter niet appen. ts omdat de bestanden of de

05:49.800 --> 05:53.044
klassen waarin ik de component gebruikte ook

05:53.044 --> 05:54.910
worden verplaatst.

05:54.910 --> 05:56.856
De project item klasse hier, bijvoorbeeld, ik pak

05:56.856 --> 06:00.164
dat en verplaats het naar project item. ts, om precies te zijn,

06:00.164 --> 06:04.550
daarin voeg ik ook een namespace app toe en verplaats deze naar

06:04.550 --> 06:06.680
de namespace app daarin en exporteer

06:06.680 --> 06:09.060
dan ook deze klasse.

06:09.060 --> 06:11.413
Nu, belangrijk, dit vertrouwt op component, en de andere,

06:12.310 --> 06:14.740
als ik dit nu zou opslaan, zouden we een fout krijgen dat component

06:14.740 --> 06:16.497
niet gevonden wordt op het einde, dus hier

06:16.497 --> 06:19.353
moeten we weer, deze import toevoegen waar we referentie pad gelijk

06:19.353 --> 06:24.772
hebben en dan hier is het basis-component.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
Dit is altijd een relatieve import hier, dus omdat

06:27.330 --> 06:29.130
dit in dezelfde map staat, hoeven

06:29.130 --> 06:32.320
we niet te zeggen components slash hier, omdat we niet eerst

06:32.320 --> 06:34.608
in de components map hoeven te gaan dit bestand,

06:34.608 --> 06:37.300
het project item bestand, staat al in de components

06:37.300 --> 06:38.729
map dus relatief vanaf dit

06:38.729 --> 06:40.617
bestand wordt base component geïmporteerd

06:40.617 --> 06:44.913
gewoon door zijn naam hier te gebruiken.

06:46.060 --> 06:48.030
Dus nu is het project item hier.

06:48.030 --> 06:51.963
Nu, natuurlijk, in app. ts, we kregen ook de projectlijst.

06:55.940 --> 07:00.662
Laten we dat pakken, verplaatsen naar de projectlijst ts bestand hier

07:00.662 --> 07:04.940
en daar in een namespace App, en dan ook hier naar project input

07:04.940 --> 07:07.050
laten we dit pakken, knip het van

07:08.010 --> 07:14.480
hier, van de namespace app in de app.

07:14.480 --> 07:14.480
ts

07:14.480 --> 07:17.097
bestand, en verplaats het naar het project input

07:17.097 --> 07:19.857
ts bestand en daar naar een app namespace.

07:20.750 --> 07:24.350
Nu, belangrijk net als voorheen, exporteer deze klasse hier,

07:24.350 --> 07:27.550
project item en ook projectlijst, natuurlijk, alles moet

07:27.550 --> 07:30.200
worden geëxporteerd, daarmee krijgen we een

07:30.200 --> 07:31.580
hoop fouten omdat er natuurlijk

07:31.580 --> 07:34.343
nog steeds importen ontbreken.

07:35.200 --> 07:39.930
In app. ts, we moeten nu al deze componenten importeren, dus hier moeten

07:39.930 --> 07:47.380
we project-input importeren. ts, project-lijst.

07:47.380 --> 07:47.380
en sla dit dan op.

07:47.380 --> 07:50.240
Nu crasht het natuurlijk nog steeds omdat we meer

07:50.240 --> 07:51.087
dingen hebben die

07:51.087 --> 07:53.192
ontbreken, in project-input gebruiken

07:53.192 --> 07:55.541
we component net als in project list, dus

07:55.541 --> 07:57.780
net zoals we het in project item hebben

07:57.780 --> 08:00.091
gedaan, moeten we die import van base component

08:00.091 --> 08:02.920
toevoegen in het project input ts bestand en ook in

08:02.920 --> 08:05.790
het project list ts bestand.

08:05.790 --> 08:08.665
En daarmee compileert het zonder fouten en laten

08:08.665 --> 08:10.880
we eens kijken of het ook werkt, als

08:10.880 --> 08:15.118
we hier herladen en ik voeg dit toe, is het versleepbaar en neerzetbaar,

08:15.118 --> 08:16.540
en dat lijkt allemaal

08:16.540 --> 08:19.480
te werken zoals het hoort, en nu splitsen we dit

08:19.480 --> 08:22.340
over meerdere bestanden.

08:22.340 --> 08:23.978
Uiteindelijk krijgen we nog steeds

08:23.978 --> 08:26.010
één bestand, maar als we aan onze code werken,

08:26.010 --> 08:28.110
is het nu veel overzichtelijker.

08:28.110 --> 08:30.978
Omdat we kleinere, gerichte bestanden hebben waarin

08:30.978 --> 08:33.829
we snel kunnen vinden wat we zoeken en waarin we niet

08:33.829 --> 08:36.358
door een enorm bestand hoeven te bladeren om

08:36.358 --> 08:39.363
te vinden waar we nu aan willen werken.
