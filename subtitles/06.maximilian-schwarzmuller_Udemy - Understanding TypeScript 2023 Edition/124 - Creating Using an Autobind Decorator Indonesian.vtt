WEBVTT

00:02.220 --> 00:04.550
-: Saya berbicara tentang dekorator, yang dapat kita

00:04.550 --> 00:07.350
tambahkan yang secara otomatis mengikat kata kunci "this"

00:07.350 --> 00:09.930
sehingga kita tidak perlu memanggil bind di sini.

00:09.930 --> 00:12.500
Sekarang jelas memanggil bind di sini bukanlah hal yang

00:12.500 --> 00:14.160
besar jika tidak ada yang salah dengan

00:14.160 --> 00:16.460
itu, tetapi kita juga ingin mempraktekkan apa yang

00:16.460 --> 00:20.220
kita pelajari dan jika kita harus melakukan ini di banyak tempat di seluruh aplikasi

00:20.220 --> 00:22.730
kita, memiliki dekorator, yang baru saja kita tambahkan

00:22.730 --> 00:24.970
mungkin sebenarnya lebih mudah.

00:24.970 --> 00:27.100
Jadi, mari kita singkirkan ikatan ini di sini.

00:27.100 --> 00:30.010
Dan sebagai gantinya, di atas kelas di sini, saya akan

00:30.010 --> 00:33.010
menambahkan dekorator pengikat otomatis dan saya hanya

00:33.010 --> 00:34.920
menambahkan beberapa komentar di

00:34.920 --> 00:38.750
sini untuk menjaga file ini tetap teratur, setidaknya sedikit.

00:38.750 --> 00:40.490
Kelas ProjectInput

00:42.260 --> 00:44.790
Jadi, apa itu dekorator?

00:44.790 --> 00:46.770
Dekorator adalah sebuah fungsi, bukan?

00:46.770 --> 00:48.130
Dan Anda bisa menemukannya

00:48.130 --> 00:51.383
dengan dekorasi fungsi di sini atau sebagai ekspresi fungsi.

00:52.490 --> 00:54.780
Jadi, di sini saya akan menggunakan dekorasi fungsi,

00:54.780 --> 00:57.780
dan saya akan menamainya autobind, nama terserah Anda.

00:57.780 --> 01:01.670
Dan dekorator ini akan menerima argumen gratis target,

01:01.670 --> 01:03.173
nama metode yang diikatnya,

01:04.430 --> 01:06.430
karena saya akan membuat dekorator

01:06.430 --> 01:09.083
metode di sini.

01:09.980 --> 01:12.960
Dan juga deskriptor dari

01:12.960 --> 01:13.793
metode

01:14.700 --> 01:15.720
itu.

01:15.720 --> 01:18.370
Eh, property descriptor karena metode pada

01:18.370 --> 01:22.760
akhirnya hanyalah properti, properti yang menyimpan fungsi.

01:22.760 --> 01:24.400
Sekarang, mengapa ini adalah dekorator metode?

01:24.400 --> 01:29.210
Karena idenya adalah kita bisa menambahkannya ke submitHandler

01:29.210 --> 01:32.210
seperti ini, dan selesai dengan itu.

01:32.210 --> 01:33.680
Itulah idenya.

01:33.680 --> 01:35.500
Sekarang, kita belum sepenuhnya sampai

01:35.500 --> 01:38.143
di sana, tetapi beginilah cara kerjanya pada akhirnya.

01:39.090 --> 01:42.950
Sekarang, untuk membuatnya bekerja, mari kita kembali ke fungsi

01:42.950 --> 01:46.880
kita di atas sana dan apa yang harus masuk ke dalam badan fungsi?

01:46.880 --> 01:49.490
Nah, di sana, pertama-tama saya ingin mendapatkan

01:49.490 --> 01:51.950
akses ke metode aslinya.

01:51.950 --> 01:56.593
Dengan deskriptor. sehingga kita menyimpan metode

01:56.593 --> 01:59.380
yang semula kita definisikan.

01:59.380 --> 02:03.540
Kemudian saya ingin membuat deskriptor saya yang disesuaikan di sini yang merupakan

02:03.540 --> 02:04.873
sebuah objek.

02:06.650 --> 02:11.090
Saya akan mengetik PropertyDescriptor, sebenarnya.

02:11.090 --> 02:13.880
Di mana configurable harus disetel ke true, sehingga

02:13.880 --> 02:15.910
kita selalu dapat mengubahnya.

02:15.910 --> 02:17.573
Dan di mana kita kemudian membutuhkan pengambil.

02:18.510 --> 02:21.770
Dan di dalam getter itu, di sini, yang harus dieksekusi ketika

02:21.770 --> 02:24.270
Anda mencoba mengakses fungsi tersebut.

02:24.270 --> 02:27.710
Kita akan menyiapkan fungsi terikat di sini, dengan menggunakan

02:27.710 --> 02:29.220
metode asli yang kita ekstrak

02:29.220 --> 02:31.030
di atas sana.

02:31.030 --> 02:34.063
Dan memanggil mengikat ini di atasnya.

02:35.370 --> 02:36.203
Kemudian, saya

02:37.860 --> 02:40.170
ingin mengembalikan fungsi terikat

02:40.170 --> 02:41.603
itu, dan itu saja.

02:42.510 --> 02:44.190
Dan secara keseluruhan tentu saja, oleh

02:44.190 --> 02:46.620
karena itu saya akan mengembalikan deskriptor yang disesuaikan

02:46.620 --> 02:48.653
dalam dekorator metode itu.

02:49.510 --> 02:52.880
Sekarang kita mendapatkan error dengan itu, pada submitHandler.

02:52.880 --> 02:56.020
Itu, dukungan eksperimental untuk dekorator adalah fitur yang

02:56.020 --> 02:57.960
pada dasarnya perlu diaktifkan.

02:57.960 --> 03:00.400
Jadi kita harus pergi ke file tsconfig,

03:00.400 --> 03:02.320
dan di sana gulir ke bawah.

03:02.320 --> 03:05.770
Anda harus menemukan opsi "experimentalDecorators"

03:05.770 --> 03:07.450
yang cukup dikomentari.

03:07.450 --> 03:09.980
Dan tambahkan koma di depannya.

03:09.980 --> 03:14.183
Simpan itu, lalu mulai ulang proses kompilasi tipe.

03:15.180 --> 03:17.700
Sekarang, masih menunjukkan beberapa kesalahan di sini,

03:17.700 --> 03:18.913
jika saya memperluas ini, methodName

03:20.212 --> 03:23.170
dideklarasikan, tetapi nilainya tidak pernah dibaca.

03:23.170 --> 03:25.410
Dalam aplikasi. garis empat.

03:25.410 --> 03:26.760
Ini mengacu pada ini di sini, saya

03:26.760 --> 03:29.020
mendapat argumen ini, yang saya terima di sini yang

03:29.020 --> 03:30.940
sebenarnya tidak pernah saya gunakan.

03:30.940 --> 03:34.370
Sama halnya dengan target, saya tidak pernah menggunakannya.

03:34.370 --> 03:36.343
Sekarang, ada dua cara untuk mengatasi hal ini.

03:37.200 --> 03:39.610
Salah satu caranya, adalah dengan masuk ke

03:39.610 --> 03:42.813
tsconfig, dan melonggarkan aturan ketat kita, di sini.

03:44.160 --> 03:46.740
noUnusedParameters, jika kita menyetel ini ke false, kita sebenarnya

03:46.740 --> 03:49.090
mengizinkan parameter yang tidak digunakan.

03:49.090 --> 03:50.670
Jadi, ini akan menjadi satu

03:50.670 --> 03:52.910
hal, atau Anda menggunakan nama khusus

03:52.910 --> 03:54.053
garis bawah, dan garis

03:55.180 --> 03:56.653
bawah dua.

03:57.770 --> 04:01.860
Ini sebenarnya adalah, petunjuk untuk typescript dan javascript bahwa Anda sadar

04:01.860 --> 04:03.130
bahwa Anda tidak akan menggunakan

04:03.130 --> 04:04.800
nilai-nilai ini, tetapi Anda perlu

04:04.800 --> 04:05.930
menerimanya karena Anda

04:05.930 --> 04:08.740
membutuhkan argumen yang mereka kejar.

04:08.740 --> 04:11.810
Jika Anda sekarang menyimpan ini, ini mengkompilasi tanpa

04:11.810 --> 04:14.700
kesalahan dan jika kita kembali dan memasukkan halo di

04:14.700 --> 04:17.040
sini dan mengirimkan ini, ini masih berfungsi

04:17.040 --> 04:20.060
sekarang berkat dekorator pengikat otomatis kita.

04:20.060 --> 04:23.120
Yang mudah-mudahan juga menunjukkan bahwa dekorator ini bisa

04:23.120 --> 04:24.950
memiliki kegunaan yang nyata.

04:24.950 --> 04:27.530
Sekarang tentu saja di sini sebenarnya sedikit lebih banyak

04:27.530 --> 04:29.510
pekerjaan, daripada hanya memanggil bind.

04:29.510 --> 04:32.120
Tetapi bayangkan ini digunakan pada lebih banyak metode

04:32.120 --> 04:33.820
yang semuanya harus terikat.

04:33.820 --> 04:36.140
Tidak harus memanggil bind ini secara manual, kemudian

04:36.140 --> 04:38.140
dapat menghemat waktu Anda, dan juga mencegah

04:38.140 --> 04:40.430
beberapa potensi kesalahan dalam kasus di mana

04:40.430 --> 04:42.343
Anda hanya melupakannya.
