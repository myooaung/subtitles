WEBVTT

00:02.320 --> 00:04.290
Dus dat was het voor deze module.

00:04.290 --> 00:05.660
Je hebt geleerd hoe je typescript

00:05.660 --> 00:08.480
kunt gebruiken in de node express applicatie, dat je extra

00:08.480 --> 00:11.940
types kunt installeren voor express en voor node bijvoorbeeld, om

00:11.940 --> 00:13.230
geweldige ondersteuning

00:13.230 --> 00:16.320
voor typescript in je bestanden te krijgen.

00:16.320 --> 00:18.570
Dat je de applicatie schrijft zoals je hem

00:18.570 --> 00:19.990
altijd zou schrijven.

00:19.990 --> 00:21.790
Maar dat bijvoorbeeld je import

00:21.790 --> 00:23.720
en export syntax verschilt en dat

00:23.720 --> 00:26.120
je natuurlijk types kunt gebruiken, en ook

00:26.120 --> 00:29.300
elke andere typescript functie die je leert kennen.

00:29.300 --> 00:31.080
Je zou interfaces kunnen gebruiken,

00:31.080 --> 00:33.080
je zou decorators kunnen gebruiken,

00:33.080 --> 00:35.480
je zou eNoms en QPUlls kunnen gebruiken en alles

00:35.480 --> 00:37.840
wat typescript exclusief is.

00:37.840 --> 00:39.310
Dat werkt hier allemaal,

00:39.310 --> 00:42.650
want we schrijven hier een gewone typescript applicatie

00:42.650 --> 00:46.070
en die wordt met de normale typescript compiler gecompileerd

00:46.070 --> 00:48.050
tot gewone Javascript code.

00:48.050 --> 00:52.750
Javascript code die vervolgens wordt uitgevoerd met node JS.

00:52.750 --> 00:54.450
Als je meer voorbeelden wilt hebben

00:54.450 --> 00:57.720
over hoe te werken met typescript en node express, kun je natuurlijk

00:57.720 --> 00:58.910
gewoon googelen op node

00:58.910 --> 01:01.210
express typescript om meer voorbeelden te

01:01.210 --> 01:02.840
vinden.

01:02.840 --> 01:04.600
Maar ik kan je ook sterk aanraden

01:04.600 --> 01:06.980
om NestJS te bekijken.

01:06.980 --> 01:10.390
Het is een knooppunt. js framework dat typescript omarmt,

01:10.390 --> 01:13.270
terwijl je node express kunt laten werken met typescript,

01:13.270 --> 01:15.310
zoals je in deze module hebt gezien, is

01:15.310 --> 01:18.010
dit een framework dat je projecten geeft, node projecten,

01:18.010 --> 01:21.740
met typescript ondersteuning out of the box.

01:21.740 --> 01:24.490
En het omarmt al deze typescript eigenschappen

01:24.490 --> 01:26.960
zoals decorators enzovoort.

01:26.960 --> 01:30.910
Met NestJS kun je node webapplicaties bouwen, rest

01:30.910 --> 01:34.390
API's maar ook applicaties waarbij je views of

01:34.390 --> 01:36.440
graphQL API's rendert.

01:36.440 --> 01:38.930
Je kunt dat allemaal bouwen met node. js maar ook met typescript

01:38.930 --> 01:41.110
en dit project maakt veel gebruik

01:41.110 --> 01:43.380
van functies als decorators,

01:43.380 --> 01:46.950
interfaces enzovoort.

01:46.950 --> 01:50.200
Kijk dus zeker eens naar NestJS als je service side webapplicaties

01:50.200 --> 01:53.580
wilt bouwen met node en typescript.

01:53.580 --> 01:56.660
Het is een geweldig framework, erg leuk om te gebruiken

01:56.660 --> 02:00.350
en gebruikt alle coole functies die typescript te bieden heeft.

02:00.350 --> 02:03.630
Er is dus geen aangepaste type-installatie, work arounds

02:03.630 --> 02:05.310
of iets dergelijks nodig.

02:05.310 --> 02:08.913
Hier krijg je geweldige ondersteuning voor typoscript uit de doos.
