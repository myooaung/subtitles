WEBVTT

00:02.450 --> 00:04.900
Instruktor: Teraz co robisz, jeśli masz bibliotekę,

00:04.900 --> 00:07.090
w której nie możesz zainstalować typów,

00:07.090 --> 00:10.470
tak jak zrobiliśmy to na przykład dla Lodash?

00:10.470 --> 00:14.440
Dla Lodash, na szczęście mamy taki pakiet typów, i jak wspomniałem,

00:14.440 --> 00:15.880
dla większości bibliotek

00:15.880 --> 00:18.870
stron trzecich, masz to, ale niekoniecznie

00:18.870 --> 00:21.210
dla wszystkich.

00:21.210 --> 00:25.320
Lub, co jeśli masz jakiś inny kod JavaScript, powiedzmy w swoim

00:25.320 --> 00:27.320
indeksie. plik html, masz

00:27.320 --> 00:29.800
jakiś inny kod skryptu, który wykonuje

00:29.800 --> 00:34.800
gapę, gdzie ustawiasz jakąś zmienną globalną.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Coś takiego, gdzie

00:38.450 --> 00:40.770
w końcu wiesz, że będzie to

00:40.770 --> 00:43.180
dostępne globalnie.

00:43.180 --> 00:46.240
Jak wiesz, tak dodane zmienne zostaną dodane

00:46.240 --> 00:48.600
do globalnego obiektu okna, a Ty chcesz

00:48.600 --> 00:50.210
je wykorzystać z wnętrza

00:50.210 --> 00:52.670
swojego kodu TypeScript.

00:52.670 --> 00:53.503
Na przykład

00:53.503 --> 00:57.770
tutaj, jeśli chcę konsoli. log(GLOBAL) w ten sposób, otrzymuję

00:57.770 --> 00:59.990
błąd tutaj w moim IDE.

00:59.990 --> 01:04.299
A jeśli uruchomię tsc -w, aby rozpocząć kompilację, otrzymam

01:04.299 --> 01:06.340
również błąd tutaj.

01:06.340 --> 01:09.470
Więc nie lubi tej globalnej rzeczy, mimo

01:09.470 --> 01:11.530
że wiemy, że będzie działać,

01:11.530 --> 01:15.630
ponieważ nasz indeks. html definiuje tę zmienną globalną.

01:15.630 --> 01:18.010
A ponieważ mamy defer na tym skrypcie,

01:18.010 --> 01:19.493
ten skrypt zostanie wykonany

01:19.493 --> 01:22.170
po tym skrypcie na dole.

01:22.170 --> 01:23.780
W takich przypadkach masz

01:23.780 --> 01:26.460
inną składnię dostępną w TypeScript, a to jest

01:26.460 --> 01:29.460
polecenie declare, którego możesz użyć.

01:29.460 --> 01:32.110
Możesz zadeklarować pewne zmienne,

01:32.110 --> 01:34.150
na przykład do TypeScript.

01:34.150 --> 01:36.730
Możesz powiedzieć declare var GLOBAL i powiedzieć

01:36.730 --> 01:38.640
TypeScriptowi, że na przykład będzie

01:38.640 --> 01:42.050
to ciąg znaków lub że jest to cokolwiek.

01:42.050 --> 01:43.687
To w zasadzie mówi TypeScriptowi:

01:43.687 --> 01:45.910
"Nie martw się, to będzie istnieć" i kiedykolwiek,

01:45.910 --> 01:47.823
jeśli to zapiszemy, a ja zrezygnuję

01:49.090 --> 01:52.580
z tego kompilatora i użyję webpacka zamiast tego, zobaczymy

01:52.580 --> 01:59.060
to wyjście na naszej stronie, ponieważ technicznie działa, a z declare var, mówimy również TypeScriptowi,

01:59.060 --> 02:02.270
że to istnieje.

02:02.270 --> 02:04.420
Teraz zamierzam usunąć ten dmidecode tutaj,

02:04.420 --> 02:06.770
ale bycie świadomym deklaracji, tego słowa kluczowego,

02:06.770 --> 02:08.830
tego polecenia jest ważne.

02:08.830 --> 02:12.160
Pozwala zadeklarować funkcje TypeScript lub zmienne, w których

02:12.160 --> 02:14.590
wiesz, że istnieją, lub pozwolić TypeScriptowi

02:14.590 --> 02:17.210
wiedzieć o pakietach, globalnych zmiennych w

02:17.210 --> 02:18.670
ogóle, których Typescript

02:18.670 --> 02:20.150
nie może znać, ale podczas

02:20.150 --> 02:22.080
gdy ty jako deweloper wiesz, że będą

02:22.080 --> 02:23.373
tam.
