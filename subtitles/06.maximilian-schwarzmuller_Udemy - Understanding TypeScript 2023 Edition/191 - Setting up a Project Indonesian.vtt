WEBVTT

00:02.290 --> 00:03.280
Instruktur: Jadi mari

00:03.280 --> 00:06.110
kita mulai dengan aplikasi Node typescript kita.

00:06.110 --> 00:08.750
Sekarang, Anda mungkin berpikir bahwa kita memerlukan pengaturan

00:08.750 --> 00:11.170
yang rumit dengan webpack dan sebagainya sekarang, tetapi

00:11.170 --> 00:12.410
sebenarnya tidak.

00:12.410 --> 00:16.270
Kita hanya akan menggunakan perintah tsc untuk mengkompilasi file-file kita.

00:16.270 --> 00:18.160
Dan kemudian, kita bisa menggunakan perintah node untuk

00:18.160 --> 00:19.890
mengeksekusi file-file yang telah dikompilasi.

00:19.890 --> 00:21.700
Hanya itu yang kita butuhkan di sini.

00:21.700 --> 00:25.960
Namun, saya akan menyiapkan sebuah proyek di sini dengan npm init secara sederhana sehingga kita

00:25.960 --> 00:28.810
mendapatkan sebuah paket. json karena karena kita akan

00:28.810 --> 00:32.250
membuat aplikasi Node normal di sini, kita akan menginstal beberapa

00:32.250 --> 00:36.240
paket pihak ketiga seperti Express. js.

00:36.240 --> 00:38.470
Dan saya juga ingin menginstal satu alat bantu tambahan

00:38.470 --> 00:40.950
yang menyederhanakan proses pengembangan kami.

00:40.950 --> 00:44.630
Jadi jalankan npm init di sini di folder kosong pilihan Anda.

00:44.630 --> 00:48.190
Anda bisa mengonfirmasi semua pengaturan default di sini jika Anda mau, dan setelah itu,

00:48.190 --> 00:50.540
Anda akan memiliki paket. json yang akan

00:50.540 --> 00:52.750
terlihat seperti ini.

00:52.750 --> 00:56.210
Sekarang, jalankan juga tsc --init di sini untuk juga menginisialisasi

00:56.210 --> 00:59.390
proyek ini sebagai proyek typescript sehingga Anda mendapatkan

00:59.390 --> 01:01.860
tsconfig ini. json yang sekarang dapat

01:01.860 --> 01:04.313
Anda temukan ke dalam kebutuhan Anda.

01:05.770 --> 01:09.020
Dan di sana, saya sudah mendapatkan penyesuaian pertama yang ingin saya lakukan.

01:09.020 --> 01:13.300
Target di sini dapat dengan mudah diatur ke es2018 misalnya tergantung

01:13.300 --> 01:16.090
pada versi node yang Anda gunakan, tetapi jika Anda

01:16.090 --> 01:17.750
menggunakan yang terbaru, sintaksis

01:17.750 --> 01:19.630
JavaScript modern ini pasti harus

01:19.630 --> 01:21.380
didukung.

01:21.380 --> 01:24.220
Modul dapat tetap berada di commonjs, tetapi kemudian,

01:24.220 --> 01:27.460
saya juga ingin menambahkan moduleResolution di sini dan

01:27.460 --> 01:29.010
mengatur ini ke node.

01:29.010 --> 01:33.350
Ini hanya memberitahu typescript bagaimana file dan impor Anda yang

01:33.350 --> 01:35.483
berbeda akan bekerja sama.

01:36.410 --> 01:37.640
Dan kita perlu mengatur ini ke node

01:37.640 --> 01:40.020
untuk memastikan bahwa semuanya berfungsi dengan benar.

01:40.020 --> 01:42.470
Saya juga akan mengatur outDir saya di sini,

01:42.470 --> 01:44.790
komentar ini dan mengaturnya ke dist, dan

01:44.790 --> 01:46.990
rootDir saya ke src karena saya ingin memisahkan

01:46.990 --> 01:49.600
kode sumber typescript saya.

01:49.600 --> 01:50.700
Dan kemudian output yang

01:50.700 --> 01:53.170
akan menjadi file JavaScript yang sebenarnya

01:53.170 --> 01:55.733
dapat kita jalankan dengan bantuan node.

01:56.820 --> 01:58.850
Selain itu, saya baik-baik saja dengan mode ketat,

01:58.850 --> 02:00.710
tetapi tentu saja, Anda bisa menyempurnakan semua

02:00.710 --> 02:03.030
ini sesuai kebutuhan dan kesukaan pribadi Anda.

02:03.030 --> 02:06.320
Lagipula, Anda telah mempelajari semua tentang hal itu selama kursus ini.

02:06.320 --> 02:08.830
Dan dengan itu, kita bisa menyimpan konfigurasi ini.

02:08.830 --> 02:11.070
Anda juga akan menemukan penyiapan awal yang sangat

02:11.070 --> 02:12.460
mendasar ini terlampir.

02:12.460 --> 02:14.120
Anda dapat menyimpan konfigurasi ini.

02:14.120 --> 02:16.170
Dan saya juga akan membuat folder src

02:16.170 --> 02:18.130
di mana kita akan menulis kode sumber

02:18.130 --> 02:20.230
kita, kode sumber typescript kita.

02:20.230 --> 02:23.020
Dan itulah bagian di mana saya sekarang ingin menyelaminya.

02:23.020 --> 02:26.370
Kita akan membangun aplikasi kita dengan typescript

02:26.370 --> 02:27.960
di folder src sekarang.

02:27.960 --> 02:30.200
Dan karena kita akan membangun web server sederhana dan kita

02:30.200 --> 02:32.920
juga ingin menggunakan Express. js di sana, pertama-tama

02:32.920 --> 02:36.120
saya akan menginstal beberapa dependensi di sini.

02:36.120 --> 02:38.440
Dengan npm install --save, saya ingin menginstal

02:38.440 --> 02:41.040
express di sini yang merupakan framework Express

02:41.040 --> 02:44.100
untuk Node. js yang tentu saja tidak selalu

02:44.100 --> 02:45.680
Anda perlukan tetapi di sini,

02:45.680 --> 02:48.440
saya ingin membangun aplikasi Node Express.

02:48.440 --> 02:51.500
Dan itu akan menginstal paket body-parser yang membantu

02:51.500 --> 02:54.403
kita mengurai badan permintaan yang masuk.

02:55.290 --> 02:58.180
Untuk saat ini, itu saja mengenai dependensi produksi saya.

02:58.180 --> 03:00.110
Kami mungkin akan menambahkan lebih banyak lagi nanti.

03:00.110 --> 03:01.523
Jadi, mari kita tekan enter di sini.

03:02.960 --> 03:04.120
Dan dengan terinstalnya

03:04.120 --> 03:07.540
itu, mari kita lihat dependensi pengembangan.

03:07.540 --> 03:11.450
Saya akan menginstalnya dengan npm install --save-dev, dan di sana, saya ingin

03:11.450 --> 03:13.330
menginstal modemon, sebuah alat yang

03:13.330 --> 03:16.340
memungkinkan kita untuk mengeksekusi file dengan Node, tetapi

03:16.340 --> 03:18.210
kemudian mengawasi file dan folder

03:18.210 --> 03:19.820
tempat file tersebut berada, serta

03:19.820 --> 03:22.690
semua subfolder untuk perubahan.

03:22.690 --> 03:24.050
Setiap kali file berubah,

03:24.050 --> 03:26.030
itu akan me-restart server Node.

03:26.030 --> 03:27.620
Ini hanya akan mempercepat pengembangan

03:27.620 --> 03:29.510
karena secara otomatis akan me-restart

03:29.510 --> 03:31.490
server aplikasi Node kita setiap kali kita

03:31.490 --> 03:33.500
mengubah kode sumber.

03:33.500 --> 03:36.180
Kita perlu me-restart server ketika kodenya berubah karena

03:36.180 --> 03:39.430
jika tidak, server kita masih berjalan pada kode lama, tetapi restart

03:39.430 --> 03:41.340
secara manual itu menjengkelkan sehingga

03:41.340 --> 03:44.190
kita tidak bisa mempercepatnya dengan nodemon.

03:44.190 --> 03:47.323
Dan untuk saat ini, sebenarnya hanya itu saja.

03:49.290 --> 03:50.340
Jadi mari kita tekan enter

03:50.340 --> 03:52.360
di sini dan instal dependensi pengembangan ini.

03:52.360 --> 03:54.760
Ini tidak akan menjadi yang terakhir yang kita butuhkan dalam kursus

03:54.760 --> 03:56.660
ini, tetapi untuk saat ini, kita baik-baik saja.

03:56.660 --> 03:58.830
Jadi, mari kita tunggu sampai ini selesai.

03:58.830 --> 04:00.130
Jadi instalasi sudah selesai,

04:00.130 --> 04:01.450
dan sekarang mari kita mulai

04:01.450 --> 04:04.773
menulis dan membuat aplikasi Node Express yang sangat dasar.
