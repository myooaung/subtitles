WEBVTT

1
00:00:02.120 --> 00:00:02.953
<v Instructor>So that was</v>

2
00:00:02.953 --> 00:00:04.960
an important first set of options.

3
00:00:04.960 --> 00:00:07.520
Now let's dive into these strict options

4
00:00:07.520 --> 00:00:09.860
because these are pretty interesting.

5
00:00:09.860 --> 00:00:12.150
There is this strict true option,

6
00:00:12.150 --> 00:00:13.590
and actually what this does

7
00:00:13.590 --> 00:00:16.750
is it enables all strict type checking options,

8
00:00:16.750 --> 00:00:18.830
so effectively setting this as the same

9
00:00:18.830 --> 00:00:22.110
as if you had set all these options separately.

10
00:00:22.110 --> 00:00:24.830
So you can either set all these options one by one,

11
00:00:24.830 --> 00:00:27.110
or just set this option.

12
00:00:27.110 --> 00:00:29.510
Of course, you wanna set the individual options

13
00:00:29.510 --> 00:00:33.020
if you want to have some options set to false.

14
00:00:33.020 --> 00:00:34.790
'Cause otherwise they're all set to true.

15
00:00:34.790 --> 00:00:36.520
If you want them all set to true

16
00:00:36.520 --> 00:00:39.290
then using just this option is of course way shorter.

17
00:00:39.290 --> 00:00:41.360
Now what do these options do though?

18
00:00:41.360 --> 00:00:43.213
Let's start with noImplicitAny.

19
00:00:44.282 --> 00:00:47.410
noImplicitAny is a quite interesting option

20
00:00:47.410 --> 00:00:49.180
that helps us write better code.

21
00:00:49.180 --> 00:00:51.370
Let's go to our analytics file here,

22
00:00:51.370 --> 00:00:53.963
and there let's add a function, sendAnalytics,

23
00:00:55.270 --> 00:00:58.070
that gets a data option let's say,

24
00:00:58.070 --> 00:01:01.010
and there we could send this to a server

25
00:01:01.010 --> 00:01:03.430
but here I'm just console logging it.

26
00:01:03.430 --> 00:01:07.500
Then I call sendAnalytics with the data,

27
00:01:07.500 --> 00:01:08.920
so with the string.

28
00:01:08.920 --> 00:01:11.080
Now as you see my IDE already complains here

29
00:01:11.080 --> 00:01:13.160
and so does TypeScript the compiler,

30
00:01:13.160 --> 00:01:14.960
because the two of course are connected

31
00:01:14.960 --> 00:01:17.040
if I tried to compile this.

32
00:01:17.040 --> 00:01:20.070
Parameter data implicitly has an any type.

33
00:01:20.070 --> 00:01:21.350
So this seems to be related

34
00:01:21.350 --> 00:01:23.940
to this noImplicitAny option.

35
00:01:23.940 --> 00:01:27.150
Indeed, if I set this to false,

36
00:01:27.150 --> 00:01:29.300
so if I set all strict options to true

37
00:01:29.300 --> 00:01:31.521
but I set this option to false, which I can do,

38
00:01:31.521 --> 00:01:33.810
then this error goes away.

39
00:01:33.810 --> 00:01:37.140
Both in the IDE and when we compile the code.

40
00:01:37.140 --> 00:01:38.730
So what does this option do?

41
00:01:38.730 --> 00:01:41.440
It ensures, and I'll comment it out again

42
00:01:41.440 --> 00:01:44.210
to turn it on again because of strict true,

43
00:01:44.210 --> 00:01:47.050
it ensures that we have to be clear

44
00:01:47.050 --> 00:01:49.410
about our parameters,

45
00:01:49.410 --> 00:01:53.020
about the values we're working with in our code.

46
00:01:53.020 --> 00:01:56.600
Here we don't give TypeScript any information

47
00:01:56.600 --> 00:01:59.930
about the type of data we'll get as a parameter here.

48
00:01:59.930 --> 00:02:01.320
And we should.

49
00:02:01.320 --> 00:02:03.800
If TypeScript is able to infer this,

50
00:02:03.800 --> 00:02:05.360
then of course, it's fine, but here

51
00:02:05.360 --> 00:02:08.770
how would TypeScript be able to infer it from this line,

52
00:02:08.770 --> 00:02:11.470
well keep in mind that this function gets declared first

53
00:02:11.470 --> 00:02:12.950
before this file executes.

54
00:02:12.950 --> 00:02:15.080
So at the point of time when the function is created

55
00:02:15.080 --> 00:02:18.380
there is no chance of knowing what will end up in there.

56
00:02:18.380 --> 00:02:20.100
So here we can fix this error

57
00:02:20.100 --> 00:02:22.570
by simply declaring the type and being clear

58
00:02:22.570 --> 00:02:24.253
about which type we use there.

59
00:02:25.100 --> 00:02:29.530
Now please note that if you had a variable logged,

60
00:02:29.530 --> 00:02:32.650
as you set this to true here,

61
00:02:32.650 --> 00:02:34.720
you don't get an error about this declaration

62
00:02:34.720 --> 00:02:37.670
even though it also get a default type of any.

63
00:02:37.670 --> 00:02:39.250
For variables this is okay.

64
00:02:39.250 --> 00:02:40.910
For parameters it's not okay.

65
00:02:40.910 --> 00:02:42.480
Why is okay for variables?

66
00:02:42.480 --> 00:02:44.370
Because what TypeScript does for variables,

67
00:02:44.370 --> 00:02:45.940
what is possible for variables,

68
00:02:45.940 --> 00:02:47.040
what's not possible here

69
00:02:47.040 --> 00:02:48.880
because the function is created first.

70
00:02:48.880 --> 00:02:52.490
Here TypeScript is able to track the values you assign.

71
00:02:52.490 --> 00:02:54.650
You see, okay, I got logged here like this,

72
00:02:54.650 --> 00:02:56.720
now I set it to true,

73
00:02:56.720 --> 00:02:58.573
so therefore, thereafter,

74
00:02:59.430 --> 00:03:04.430
if I console log logged here,

75
00:03:06.700 --> 00:03:08.030
it's a boolean.

76
00:03:08.030 --> 00:03:10.300
So TypeScript is here able to understand

77
00:03:10.300 --> 00:03:11.893
the flow of your code,

78
00:03:11.893 --> 00:03:14.320
and therefore, you don't need to be precise

79
00:03:14.320 --> 00:03:15.430
regarding a type here.

80
00:03:15.430 --> 00:03:18.020
Of course, you wanna be precise if you want to avoid

81
00:03:18.020 --> 00:03:20.310
that you can freely assign the new value,

82
00:03:20.310 --> 00:03:22.940
which you can do here because it is of type any.

83
00:03:22.940 --> 00:03:25.700
So you wanna still assign a type to avoid this,

84
00:03:25.700 --> 00:03:27.680
but TypeScript is at least able to find out

85
00:03:27.680 --> 00:03:29.490
if the code you're calling works

86
00:03:29.490 --> 00:03:31.410
with the type it currently holds.

87
00:03:31.410 --> 00:03:32.410
That's not the case here

88
00:03:32.410 --> 00:03:35.360
because there the function is defined before you call it,

89
00:03:35.360 --> 00:03:37.800
and therefore, TypeScript would have not change of knowing

90
00:03:37.800 --> 00:03:39.570
if what you pass in there

91
00:03:39.570 --> 00:03:41.393
can be used inside of the function.

92
00:03:43.280 --> 00:03:46.020
strictNullChecks is never important option.

93
00:03:46.020 --> 00:03:48.520
It's actually related to our button selection

94
00:03:48.520 --> 00:03:49.410
which we have here.

95
00:03:49.410 --> 00:03:51.820
Remember I had to add this exclamation mark here

96
00:03:51.820 --> 00:03:52.670
to make it work.

97
00:03:52.670 --> 00:03:54.380
Otherwise, I'd get an error.

98
00:03:54.380 --> 00:03:56.220
Now we can also get rid of that error

99
00:03:56.220 --> 00:03:58.430
without adding the exclamation mark

100
00:03:58.430 --> 00:04:02.090
by setting strictNullChecks to false.

101
00:04:02.090 --> 00:04:04.200
So let's do that here and let's save this.

102
00:04:04.200 --> 00:04:07.860
And as you see this error is now gone here.

103
00:04:07.860 --> 00:04:10.120
And I can compile all files.

104
00:04:10.120 --> 00:04:12.340
Now what do strictNullChecks do?

105
00:04:12.340 --> 00:04:16.160
They tell TypeScript to be pretty, well strict

106
00:04:16.160 --> 00:04:19.410
regarding how you access and work with values

107
00:04:19.410 --> 00:04:22.530
that might potentially hold a null value.

108
00:04:22.530 --> 00:04:24.850
And button here might be null.

109
00:04:24.850 --> 00:04:29.210
It's not always pointing at a button element.

110
00:04:29.210 --> 00:04:31.390
It's not always pointing at such an element

111
00:04:31.390 --> 00:04:34.220
because even though you have such a selector here,

112
00:04:34.220 --> 00:04:36.900
a button might simply not exist on the page

113
00:04:36.900 --> 00:04:38.490
on which this script runs.

114
00:04:38.490 --> 00:04:40.840
And therefore, TypeScript can't tell

115
00:04:40.840 --> 00:04:43.790
because it's not diving into your html file

116
00:04:43.790 --> 00:04:44.900
and looking at that.

117
00:04:44.900 --> 00:04:48.240
It can't tell whether this will be successful or not.

118
00:04:48.240 --> 00:04:53.130
And if this fails to return a pointer and a null node,

119
00:04:53.130 --> 00:04:56.650
then it will return null, well undefined to be precise,

120
00:04:56.650 --> 00:04:59.090
but that's treated equally here.

121
00:04:59.090 --> 00:05:01.610
So therefore, that button might hold null value,

122
00:05:01.610 --> 00:05:03.530
and therefore this code could fail.

123
00:05:03.530 --> 00:05:06.610
Indeed, if I comment out this button here,

124
00:05:06.610 --> 00:05:08.480
if I now compile everything it works

125
00:05:08.480 --> 00:05:10.733
because I disabled the null checks.

126
00:05:12.000 --> 00:05:14.100
But I, therefore, now have a runtime error

127
00:05:14.100 --> 00:05:16.210
because I can't call event listener,

128
00:05:16.210 --> 00:05:18.230
addEventListener, on null.

129
00:05:18.230 --> 00:05:20.970
And I got null here because I got no button.

130
00:05:20.970 --> 00:05:23.110
Now this is a mistake we could avoid

131
00:05:23.110 --> 00:05:26.760
by setting strictNullChecks to true.

132
00:05:26.760 --> 00:05:30.340
And that's automatically set if we have strict set to true.

133
00:05:30.340 --> 00:05:34.450
Where TypeScript anticipates that this might happen,

134
00:05:34.450 --> 00:05:38.600
and therefore, forces us to work around that.

135
00:05:38.600 --> 00:05:40.640
Now one cheap workaround

136
00:05:40.640 --> 00:05:42.820
is this exclamation mark operator here.

137
00:05:42.820 --> 00:05:46.020
This tells TypeScript that you, the developer,

138
00:05:46.020 --> 00:05:48.360
know that this button exists,

139
00:05:48.360 --> 00:05:53.360
or that this operation will yield a non-null value.

140
00:05:53.710 --> 00:05:55.830
Now maybe you do, you certainly do

141
00:05:55.830 --> 00:05:58.990
if you know that you are working on the HTML code

142
00:05:58.990 --> 00:06:00.430
and that there is a button here,

143
00:06:00.430 --> 00:06:03.310
that this selector here will work.

144
00:06:03.310 --> 00:06:05.610
So it would be fine to use the exclamation mark

145
00:06:05.610 --> 00:06:06.623
in this scenario.

146
00:06:07.600 --> 00:06:09.040
If you have another scenario

147
00:06:09.040 --> 00:06:11.120
where you don't know for sure if it works

148
00:06:11.120 --> 00:06:13.050
and you just hope that it works,

149
00:06:13.050 --> 00:06:14.170
then it might be better

150
00:06:14.170 --> 00:06:18.210
to simply wrap the code that might fail in an if check,

151
00:06:18.210 --> 00:06:21.570
which will be there at runtime as well, of course.

152
00:06:21.570 --> 00:06:24.960
You could simply check if button is true here,

153
00:06:24.960 --> 00:06:27.510
which it won't be if it's null or undefined.

154
00:06:27.510 --> 00:06:30.060
And move that code into this if check here.

155
00:06:30.060 --> 00:06:32.470
Now even without the exclamation mark,

156
00:06:32.470 --> 00:06:35.810
in strictNullChecks mode we get no error

157
00:06:35.810 --> 00:06:37.600
because TypeScript understands

158
00:06:37.600 --> 00:06:39.750
that this code is inside of this if statement

159
00:06:39.750 --> 00:06:41.991
and that this if statement makes sure

160
00:06:41.991 --> 00:06:46.310
that button is not null and that this will not fail.

161
00:06:46.310 --> 00:06:49.310
So this might actually be the cleaner workaround.

162
00:06:49.310 --> 00:06:51.060
However, of course, to save code,

163
00:06:51.060 --> 00:06:54.350
if you know with certainty that something does exist,

164
00:06:54.350 --> 00:06:56.550
using the exclamation mark is shorter

165
00:06:56.550 --> 00:06:58.320
and an absolutely fine option.

166
00:06:58.320 --> 00:07:00.450
Here I said both so that we see both,

167
00:07:00.450 --> 00:07:02.450
of course you just need one of the two things,

168
00:07:02.450 --> 00:07:04.520
either the if check, or the exclamation mark.

169
00:07:04.520 --> 00:07:07.680
strictFunctionTypes here is a little bit

170
00:07:07.680 --> 00:07:12.010
of a more advance setting catching some niche box

171
00:07:12.010 --> 00:07:14.830
which you might not have in many applications.

172
00:07:14.830 --> 00:07:17.340
It is related to, well, function types

173
00:07:17.340 --> 00:07:18.380
you might be setting up.

174
00:07:18.380 --> 00:07:20.650
So not types inside of functions,

175
00:07:20.650 --> 00:07:23.690
but if you define how a function should look like

176
00:07:23.690 --> 00:07:26.220
regarding its parameters and return value,

177
00:07:26.220 --> 00:07:27.840
and you create such a function type

178
00:07:27.840 --> 00:07:29.990
which you learned about in the basics module,

179
00:07:29.990 --> 00:07:32.650
then there you can introduce box

180
00:07:32.650 --> 00:07:35.560
if you work with classes and inheritance,

181
00:07:35.560 --> 00:07:36.950
which we haven't learned about yet,

182
00:07:36.950 --> 00:07:38.210
which we haven't used yet, and therefore,

183
00:07:38.210 --> 00:07:39.683
for now let's ignore this.

184
00:07:40.578 --> 00:07:43.630
strictBindCallApply, that can be helpful

185
00:07:43.630 --> 00:07:46.840
if you do work with bind, call, or apply.

186
00:07:46.840 --> 00:07:49.680
For that, let's quickly see an example.

187
00:07:49.680 --> 00:07:52.040
Here we have our button and our function there.

188
00:07:52.040 --> 00:07:57.040
Now let's say this would be a function, which we define here

189
00:07:57.780 --> 00:08:01.100
with the function keyword, or as an error function.

190
00:08:01.100 --> 00:08:03.650
Doesn't matter, I'll use the function keyword here.

191
00:08:04.731 --> 00:08:09.731
clickHandler, and in there I console.log clicked.

192
00:08:11.960 --> 00:08:13.810
And now here we point to at clickHandler,

193
00:08:13.810 --> 00:08:15.560
and for some reason,

194
00:08:15.560 --> 00:08:17.670
we want to make sure that when this executes,

195
00:08:17.670 --> 00:08:19.330
we pass in certain arguments

196
00:08:19.330 --> 00:08:22.780
or we set the this keyword in there to a certain value.

197
00:08:22.780 --> 00:08:26.480
Now let's say here we do expect a message argument,

198
00:08:26.480 --> 00:08:28.110
which should be a string.

199
00:08:28.110 --> 00:08:32.110
And we wanna output this here as well.

200
00:08:32.110 --> 00:08:34.400
Now since clickHandler is passed

201
00:08:34.400 --> 00:08:36.010
to addEventListener like that

202
00:08:36.010 --> 00:08:39.080
so that the browser basically executes this for us,

203
00:08:39.080 --> 00:08:41.070
if we wanna pre-configure the arguments

204
00:08:41.070 --> 00:08:43.570
which will be passed in, we can use bind.

205
00:08:43.570 --> 00:08:47.000
And bind, as a first argument, takes what we want to bind

206
00:08:47.000 --> 00:08:49.320
the this keyword to.

207
00:08:49.320 --> 00:08:51.650
And here we could say that does not matter to us

208
00:08:51.650 --> 00:08:53.580
because we're not using this in the function,

209
00:08:53.580 --> 00:08:55.930
so we bind it to null.

210
00:08:55.930 --> 00:08:57.700
Now you see here I get an error.

211
00:08:57.700 --> 00:09:00.610
I get an error that can be avoided

212
00:09:00.610 --> 00:09:04.613
if I set strictBindCallApply to false.

213
00:09:07.040 --> 00:09:08.680
Now you see the error is gone.

214
00:09:08.680 --> 00:09:10.501
Now what does this option do, therefore?

215
00:09:10.501 --> 00:09:14.180
It basically checks on which function you're calling

216
00:09:14.180 --> 00:09:16.020
bind, call, or apply.

217
00:09:16.020 --> 00:09:20.080
And it checks if what you're setting up here makes sense.

218
00:09:20.080 --> 00:09:23.440
And here TypeScript sees we want a argument,

219
00:09:23.440 --> 00:09:25.450
we want the parameter in clickHandler.

220
00:09:25.450 --> 00:09:28.260
With bind, we're not configuring that though.

221
00:09:28.260 --> 00:09:30.600
And therefore, here we get an error.

222
00:09:30.600 --> 00:09:32.180
If I set this back to true,

223
00:09:32.180 --> 00:09:34.000
or I just commented it out

224
00:09:34.000 --> 00:09:36.230
because, of course, it is set to true by default

225
00:09:36.230 --> 00:09:37.870
by setting strict to true,

226
00:09:37.870 --> 00:09:39.790
we, therefore, get the error again.

227
00:09:39.790 --> 00:09:42.350
Now if we wouldn't expect an argument here,

228
00:09:42.350 --> 00:09:44.750
you see the error would be gone down there

229
00:09:44.750 --> 00:09:46.200
if we only removed the message,

230
00:09:46.200 --> 00:09:48.140
because TypeScript understands our code

231
00:09:48.140 --> 00:09:50.660
and sees you're not passing in any arguments

232
00:09:50.660 --> 00:09:52.580
to that method or to this function

233
00:09:52.580 --> 00:09:54.760
because it doesn't take any, so that's fine.

234
00:09:54.760 --> 00:09:57.420
But of course, here we want one so we get an error.

235
00:09:57.420 --> 00:10:00.880
The solution is to provide this second argument here,

236
00:10:00.880 --> 00:10:04.350
which is the first argument you wanna pass in.

237
00:10:04.350 --> 00:10:06.290
Now TypeScript is really smart here.

238
00:10:06.290 --> 00:10:08.120
And for example, if I pass in a number,

239
00:10:08.120 --> 00:10:10.310
it would still complain because it understands

240
00:10:10.310 --> 00:10:11.610
that I need a string here.

241
00:10:12.500 --> 00:10:15.960
If I pass in a correct string though,

242
00:10:15.960 --> 00:10:17.350
like you're welcome,

243
00:10:17.350 --> 00:10:19.070
then it does not complain anymore

244
00:10:19.070 --> 00:10:21.210
because not it understands this and it sees

245
00:10:21.210 --> 00:10:24.840
that this is matching my function definition here.

246
00:10:24.840 --> 00:10:27.370
So this is a very useful behavior that makes sure

247
00:10:27.370 --> 00:10:30.260
that you don't accidentally use bind, call, or apply

248
00:10:30.260 --> 00:10:32.743
in a way that does not work with your code.

249
00:10:33.930 --> 00:10:36.600
Now strictPropertyInitialization becomes important

250
00:10:36.600 --> 00:10:37.810
once we work with classes.

251
00:10:37.810 --> 00:10:39.213
We can ignore it for now.

252
00:10:39.213 --> 00:10:41.890
noImplicitThis also does not matter right now.

253
00:10:41.890 --> 00:10:43.650
It has to do the this keyword

254
00:10:43.650 --> 00:10:45.980
and TypeScript basically tries to warn you

255
00:10:45.980 --> 00:10:48.240
if you use the this keyword in a place

256
00:10:48.240 --> 00:10:51.020
where it's not clear what it refers to.

257
00:10:51.020 --> 00:10:53.210
And alwaysStrict simply controls

258
00:10:53.210 --> 00:10:55.560
that the JavaScript files which are generated

259
00:10:55.560 --> 00:10:58.663
are using strict mode so that this is added.

260
00:10:59.710 --> 00:11:02.383
With that, we covered all these strict options.

