WEBVTT

00:02.220 --> 00:03.053
講師：次に進むと､ noUnusedLocals､

00:03.053 --> 00:04.883
noUnusedParameters､ noImplicitReturnsと､

00:04.883 --> 00:07.920
さらにオプションがありますね｡

00:07.920 --> 00:10.470
これは基本的にコードクオリティに役立ちます｡ 

00:10.470 --> 00:15.930
TypeScriptは､ 特定の未使用の変数があると文句を言われたりします｡

00:15.930 --> 00:26.270
そこで､ この3つのオプションをオンにすると､ 例えば､ breakキーワードを忘れてしまうようなSwitch文の場合に役立つ｡

00:26.270 --> 00:28.880
しかし､ この3つのオプションをオンにすると､

00:28.880 --> 00:33.600
TypeScriptが文句を言うのは､ たとえば､ この関数でローカルにusername変数を持っていたのに､

00:33.600 --> 00:36.730
それを使わなかった場合だ｡

00:36.730 --> 00:39.490
ほら､ これ､ エラーじゃないから黄色の四角い線が入ってるでしょ､

00:39.490 --> 00:41.500
本当に｡

00:41.500 --> 00:43.179
警告というか､ ヒントというか｡ 

00:43.179 --> 00:45.643
ここでコンパイルすると､ TypeScriptはエラーしか知らないので､

00:47.750 --> 00:51.900
エラーが表示されることがわかると思います｡

00:51.900 --> 00:54.140
usernameは宣言されていますが､

00:54.140 --> 01:00.550
その値は読み込まれません｡ なぜなら､ 未使用のローカル変数は必要ないからです｡

01:00.550 --> 01:02.483
未使用のグローバル変数､ 例えばここにappIdのようなものがあったとしても､

01:03.440 --> 01:13.870
TypeScriptはそのグローバルに定義された値が他のスクリプトファイルで必要になるかどうかを知ることができないので､ 許可されている｡

01:13.870 --> 01:14.980
そのため､ これは許されるのですが､

01:14.980 --> 01:17.280
他に必要となりうる場所がないような関数では､

01:17.280 --> 01:22.020
未使用のコードがあると､ TypeScriptは今すぐ文句を言うでしょう｡

01:22.020 --> 01:23.540
そして､ それは一般的に良いアイデアだと思います｡ 

01:23.540 --> 01:26.021
このような未使用のコードを削除できるようにします｡ 

01:26.021 --> 01:28.510
未使用のパラメータも同様です｡ 

01:28.510 --> 01:31.350
Hを例にとると､ もちろんbindは今は壊れていますが､

01:31.350 --> 01:33.050
これを渡してもこれは動作しますが､

01:33.050 --> 01:35.970
やはりTypeScriptとそのIDが､

01:35.970 --> 01:44.293
これは使われていない､ だから削除するか使い始めた方がいい､ と教えてくれます｡

01:45.238 --> 01:48.173
つまり､ noUnusedParametersということですね｡ 

01:48.173 --> 01:51.365
また､ noImplicitReturnsは､ 何かを返すときと返さないときがある関数がある場合､

01:51.365 --> 01:57.130
エラーが発生することを意味しています｡

01:57.130 --> 02:02.940
もう一つ､ 2つの数値を得るaddという関数があるとしよう｡

02:02.940 --> 02:05.906
数､ n2 は数です｡ 

02:05.906 --> 02:10.906
もちろん､ n1＋n2も返せる｡ 

02:14.030 --> 02:18.518
しかし､ 何らかの理由で､ n1＋n2が0より大きいかどうかをチェックしているとしよう｡

02:18.518 --> 02:23.700
なぜなら､ 0より大きい結果が得られたときだけ返したいからである｡

02:23.700 --> 02:25.040
そして､ 返り値を求めます｡ 

02:25.040 --> 02:26.940
そうでなければ､ 何も返さないようにしたい｡ 

02:26.940 --> 02:28.170
リターンは求めない｡ 

02:28.170 --> 02:30.550
そうすると､ noImplicitReturnsで余計な設定をしているので､

02:30.550 --> 02:32.598
警告が出るんです｡

02:32.598 --> 02:36.401
TypeScriptは､ この関数内のすべての分岐がreturn文につながるわけではないことを検知し､

02:36.401 --> 02:40.650
我々の設定のために､ それは許されないとします｡

02:40.650 --> 02:45.790
少なくとも､ ここではreturnキーワードを追加することで､ 意図的に何も返さないようにしなければならない｡

02:45.790 --> 02:48.260
ただ省略することは､ ここでは許されない｡ 

02:48.260 --> 02:49.730
何も返さない関数があれば､

02:49.730 --> 02:54.520
どのブランチでも許されますが､ 関数が何かを返すケースが少なくとも1つはある場合､

02:54.520 --> 02:59.933
すべてのケースで何かを返すようにしなければなりません｡

03:01.830 --> 03:04.240
これで､ このコンフィグウォークスルーも終わりに近づいてきました｡

03:04.240 --> 03:06.526
ここではmoduleResolutionを無視すればよい｡ 

03:06.526 --> 03:08.933
これらのオプションは､ 実はかなり高度なもので､

03:08.933 --> 03:13.510
私たちにとってはどうでもよく､ 多くのプロジェクトで重要視されることはありません｡

03:13.510 --> 03:18.180
ソースマップオプションは､ 先ほど見てもらったこのソースマップを微調整するためのものです｡

03:18.180 --> 03:21.440
つまり､ これらのJavaScriptからTypeScriptへの翻訳ファイルです｡ 

03:21.440 --> 03:23.720
通常､ ここではデフォルトの設定で問題ないはずです｡

03:23.720 --> 03:27.010
何を変更するのか､ なぜそうするのかがわからない場合は､ 通常､

03:27.010 --> 03:29.470
ここで何も変更する必要はありません｡

03:29.470 --> 03:31.512
そして､ これらの実験的なオプションについては､

03:31.512 --> 03:38.910
後ほどdecoratorsモジュールの中で､ 特にexperimentalDecoratorsについて見てみることにします｡

03:38.910 --> 03:52.940
これは基本的に､ TypeScriptで特定の機能を使用できるようにするものです｡

03:52.940 --> 03:57.070
そして､ これらの機能を使いたいことを明示的にTypeScriptに伝える必要があり､

03:57.070 --> 03:59.390
その設定によって実現できるのです｡

03:59.390 --> 04:01.880
しかし､ また､ その話に戻ります｡ 

04:01.880 --> 04:05.870
そのため､ このファイルでは､ 多くのオプションを設定することができます｡

04:05.870 --> 04:10.612
TypeScriptが成長するにつれて､ ここに追加されるオプションも増えていくのが普通である｡

04:10.612 --> 04:20.343
したがって､ 公式ドキュメントは､ より深く掘り下げ､ あなたのプロジェクトに役立つかもしれない興味深いオプションを見逃さないようにするための素晴らしい場所なのである｡
