WEBVTT

00:02.100 --> 00:04.890
Istruttore: Per comprendere le classi, cerchiamo di capire

00:04.890 --> 00:07.040
la programmazione orientata agli oggetti.

00:07.040 --> 00:10.050
Ora, a seconda del vostro livello di conoscenza e

00:10.050 --> 00:12.560
se avete lavorato con il moderno JavaScript

00:12.560 --> 00:15.340
e forse anche con altri linguaggi di programmazione,

00:15.340 --> 00:18.320
potreste sapere a cosa servono le classi e che cos'è

00:18.320 --> 00:22.270
la programmazione orientata agli oggetti OOP.

00:22.270 --> 00:24.570
Pertanto, potete anche saltare questa lezione

00:24.570 --> 00:27.720
per passare direttamente alle parti in cui scriviamo il codice.

00:27.720 --> 00:29.330
In caso contrario, seguitemi

00:29.330 --> 00:32.200
perché è importante capire questo aspetto.

00:32.200 --> 00:35.240
L'idea alla base della programmazione orientata

00:35.240 --> 00:38.550
agli oggetti, e le classi saranno importanti per questo,

00:38.550 --> 00:41.630
come vedrete, è che si lavora con entità reali nel

00:41.630 --> 00:43.110
codice.

00:43.110 --> 00:47.370
In modo che nel codice si lavori con oggetti che assomiglino

00:47.370 --> 00:52.110
il più possibile a oggetti reali, almeno per rendere più facile

00:52.110 --> 00:54.410
per lo sviluppatore ragionare

00:54.410 --> 00:56.250
sul codice.

00:56.250 --> 00:59.150
Ad esempio, potremmo costruire un negozio online

00:59.150 --> 01:01.270
e avere un elenco di prodotti.

01:01.270 --> 01:05.190
Si potrebbe quindi lavorare con un oggetto elenco di prodotti, che ha tutto

01:05.190 --> 01:08.140
ciò che serve per gestire un elenco di prodotti.

01:08.140 --> 01:11.570
Un metodo per aggiungere prodotti all'elenco dei prodotti

01:11.570 --> 01:13.370
principali, l'elenco stesso.

01:13.370 --> 01:15.670
Quindi, ad esempio, potrebbe essere un oggetto

01:15.670 --> 01:18.360
responsabile del rendering di un elenco di prodotti

01:18.360 --> 01:19.540
e della sua gestione,

01:19.540 --> 01:22.840
recuperati da un servizio o da un database.

01:22.840 --> 01:25.530
Quindi questo prodotto contiene tutta la logica di rendering,

01:25.530 --> 01:27.260
fetching e gestione.

01:27.260 --> 01:29.420
Questo sì che è un elenco di prodotti.

01:29.420 --> 01:32.510
Nel nostro programma per il sito web che stiamo costruendo, potrebbe

01:32.510 --> 01:33.870
essere necessario lavorare

01:33.870 --> 01:36.000
anche con i singoli prodotti.

01:36.000 --> 01:39.540
Quindi potremmo anche volere un oggetto o più oggetti, uno per

01:39.540 --> 01:40.960
ogni prodotto, che sia responsabile

01:40.960 --> 01:43.930
della gestione del singolo prodotto.

01:43.930 --> 01:47.180
Potrebbe contenere e visualizzare i dettagli di quel prodotto,

01:47.180 --> 01:49.830
magari consentirci di aggiungerlo a un carrello,

01:49.830 --> 01:51.260
cose del genere.

01:51.260 --> 01:54.900
Quindi, quando vogliamo disegnare l'interfaccia utente sullo schermo, vogliamo

01:54.900 --> 01:57.010
gestirla attraverso JavaScript e quindi attraverso

01:57.010 --> 01:58.740
TypeScript, quindi potremmo implementare

01:58.740 --> 02:00.550
questo con un elenco di prodotti e un oggetto

02:00.550 --> 02:02.970
prodotto che contiene la logica per la gestione dei dati

02:02.970 --> 02:05.370
sottostanti, ma anche per il rendering del contenuto

02:05.370 --> 02:07.760
sullo schermo.

02:07.760 --> 02:10.010
E naturalmente questi due oggetti sarebbero

02:10.010 --> 02:11.940
in qualche modo collegati.

02:11.940 --> 02:14.790
Sullo schermo potrebbe essere presente anche un oggetto carrello della

02:14.790 --> 02:16.410
spesa, responsabile del rendering e della

02:16.410 --> 02:18.040
gestione della carta della spesa.

02:18.040 --> 02:20.380
Naturalmente è anche legato al prodotto.

02:20.380 --> 02:22.930
E quindi contiene tutta la logica di cui abbiamo bisogno

02:22.930 --> 02:24.880
per rendere la nostra carta acquisti,

02:24.880 --> 02:27.240
effettuare ordini, comunicare con il server e

02:27.240 --> 02:28.073
così via.

02:28.073 --> 02:31.190
Quindi, questo sarebbe un modo per pensare all'applicazione

02:31.190 --> 02:33.010
che stiamo costruendo.

02:33.010 --> 02:35.590
Come potremmo dividerlo in pezzi logici che abbiano

02:35.590 --> 02:37.670
senso per noi esseri umani.

02:37.670 --> 02:40.320
E nel codice di TypeScript e JavaScript, nella maggior

02:40.320 --> 02:42.920
parte dei linguaggi di programmazione moderni,

02:42.920 --> 02:46.750
questo è attivamente supportato perché abbiamo oggetti che sono strutture

02:46.750 --> 02:48.900
di dati più complesse che contengono proprietà

02:48.900 --> 02:50.640
e metodi.

02:50.640 --> 02:53.340
E naturalmente abbiamo anche questo in JavaScript.

02:53.340 --> 02:57.310
Ma potremmo anche avere dei corsi che ci aiutano in questo senso.

02:57.310 --> 02:59.100
Qual è l'idea alla base dei corsi?

02:59.100 --> 03:00.740
E cosa sono le istanze?

03:00.740 --> 03:02.030
Quando si ottengono questi

03:02.030 --> 03:04.690
oggetti e si segue l'approccio orientato agli

03:04.690 --> 03:07.500
oggetti, si può pensare di suddividere la nostra applicazione

03:07.500 --> 03:11.130
o la nostra logica applicativa in tali oggetti che gestiscono parti

03:11.130 --> 03:13.750
della nostra logica.

03:13.750 --> 03:17.000
Ora, collegata all'idea di usare questi oggetti,

03:17.000 --> 03:19.340
che ovviamente esistono in JavaScript,

03:19.340 --> 03:23.910
possiamo usare gli oggetti come l'idea di avere delle classi.

03:23.910 --> 03:27.470
Gli oggetti sono le cose concrete con cui lavoriamo nel nostro codice.

03:27.470 --> 03:30.380
Le strutture di dati che utilizziamo per memorizzare

03:30.380 --> 03:33.450
i dati per memorizzare i metodi su cui eseguire i metodi.

03:33.450 --> 03:36.570
Le classi sono progetti di oggetti.

03:36.570 --> 03:40.880
Le classi ci permettono di definire l'aspetto degli oggetti, i dati che

03:40.880 --> 03:42.230
devono contenere, i metodi

03:42.230 --> 03:44.070
che devono avere, in modo da poter

03:44.070 --> 03:48.240
costruire facilmente oggetti basati su queste classi.

03:48.240 --> 03:51.830
E poi chiamiamo queste istanze delle classi.

03:51.830 --> 03:54.830
Quindi un oggetto è un'istanza di una classe se è

03:54.830 --> 03:56.850
basato su tale classe, in modo da

03:56.850 --> 03:59.900
poter replicare rapidamente più oggetti con la stessa

03:59.900 --> 04:02.230
struttura e gli stessi metodi, basati

04:02.230 --> 04:04.090
sulle stesse classi.

04:04.090 --> 04:07.280
Le classi ci aiutano a definire l'aspetto degli oggetti,

04:07.280 --> 04:10.170
le proprietà e i metodi di cui dispongono e così via.

04:10.170 --> 04:14.920
Quindi, le classi esistono per velocizzare la creazione di oggetti.

04:14.920 --> 04:16.160
È semplicemente un'alternativa

04:16.160 --> 04:20.070
all'uso della notazione letterale degli oggetti che già conoscete.

04:20.070 --> 04:21.330
Semplicemente, lo rendono più facile.

04:21.330 --> 04:24.620
Le classi facilitano semplicemente la creazione di più

04:24.620 --> 04:26.900
oggetti che in genere hanno la stessa struttura

04:26.900 --> 04:28.030
e gli stessi metodi

04:28.030 --> 04:32.780
e che possono differire solo per i dati esatti che vi sono memorizzati.

04:32.780 --> 04:34.540
Supponiamo di avere più persone che vogliamo

04:34.540 --> 04:36.670
rappresentare con degli oggetti.

04:36.670 --> 04:39.330
Ogni persona può avere un nome e un'età, i

04:39.330 --> 04:40.830
valori sono diversi, ma

04:40.830 --> 04:43.310
la struttura generale è la stessa.

04:43.310 --> 04:44.500
Questa è la teoria.

04:44.500 --> 04:46.113
Vediamolo in pratica.
