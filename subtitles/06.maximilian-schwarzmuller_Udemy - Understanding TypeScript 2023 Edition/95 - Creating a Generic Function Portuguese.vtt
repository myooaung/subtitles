WEBVTT

00:02.190 --> 00:04.480
Portanto, para começar com nossos próprios genéricos.

00:04.480 --> 00:06.820
Aqui abaixo o código comentado.

00:06.820 --> 00:09.210
Vou começar com uma função genérica.

00:09.210 --> 00:11.430
Você pode construir classes e funções

00:11.430 --> 00:15.350
genéricas que eu mostrarei a ambos e aqui começarei com uma função.

00:15.350 --> 00:17.490
Agora vamos dizer que queremos ter

00:17.490 --> 00:22.490
uma função que basicamente funde dois objetos e devolve um novo objeto.

00:23.660 --> 00:25.380
Por isso, aqui poderíamos chamá-lo de "fundir".

00:25.380 --> 00:28.803
E queremos obter o objeto A e o objeto B como entrada.

00:30.010 --> 00:33.990
Agora, é claro que poderíamos escrever esta função de uma certa maneira.

00:33.990 --> 00:36.660
Poderíamos dizer que isto é do tipo

00:36.660 --> 00:39.033
objeto e isto é do tipo objeto.

00:39.960 --> 00:41.760
E então o que esta função faz

00:41.760 --> 00:45.200
é devolver o resultado da atribuição do objeto.

00:45.200 --> 00:48.130
Onde eu obtenho o objeto A e o objeto B.

00:48.130 --> 00:50.230
Portanto, é claro, desde que temos este método de

00:50.230 --> 00:53.000
atribuição de objetos já incorporado ao javascript normal.

00:53.000 --> 00:55.820
Poderíamos discutir se realmente precisamos de uma função de fusão, mas é claro

00:55.820 --> 00:58.140
que você poderia estar fazendo um trabalho adicional aqui.

00:58.140 --> 01:00.480
Você poderia enriquecer isto com informações extras,

01:00.480 --> 01:01.833
com opções extras e, no final,

01:01.833 --> 01:04.730
isto é apenas uma demonstração, justa e exemplo.

01:04.730 --> 01:07.510
Portanto, isto seria válido, poderíamos chamar

01:07.510 --> 01:11.830
de fusão aqui, e o console registrar seu resultado, assim.

01:11.830 --> 01:15.130
E depois passar em um objeto que tem uma chave de nome

01:15.130 --> 01:17.570
e um segundo objeto que tem uma idade e se

01:17.570 --> 01:20.010
executarmos isso e salvarmos isso.

01:20.010 --> 01:22.780
Aqui no navegador, de fato, obtemos esta saída.

01:22.780 --> 01:24.280
Assim, obtemos este objeto de fusão.

01:24.280 --> 01:27.050
Agora isto funciona, o problema

01:27.050 --> 01:29.660
que temos com isso é se tentarmos

01:31.660 --> 01:33.300
armazenar este nome

01:33.300 --> 01:38.097
de fusão no máximo, e tivermos 30 anos.

01:39.620 --> 01:44.620
Se tentarmos armazenar isto aqui, não posso acessar o nome no resultado, não

01:45.770 --> 01:48.730
posso acessar a idade nos resultados deste objeto

01:48.730 --> 01:50.020
fundido.

01:50.020 --> 01:52.360
Apesar de sabermos que ambos existirão.

01:52.360 --> 01:54.830
Porque o datilografia não sabe disso.

01:54.830 --> 01:57.100
O Typescript não pode saber disto.

01:57.100 --> 01:59.310
Porque estamos apenas dizendo, você está recebendo

01:59.310 --> 02:02.370
um objeto e, no final, digitando primeiro que devolvemos um objeto.

02:02.370 --> 02:04.790
O que é correto, mas que não traz todas

02:04.790 --> 02:07.810
as informações que poderíamos usar aqui.

02:07.810 --> 02:09.970
Agora, é claro que podemos sempre fazer o molde

02:09.970 --> 02:12.080
datilografado, podemos dizer que o que recebemos

02:12.080 --> 02:14.220
de volta é um objeto onde temos uma chave de nome

02:14.220 --> 02:15.960
e onde temos uma chave de idade.

02:15.960 --> 02:19.020
Mas isso é realmente incômodo se tivermos que fazer isso.

02:19.020 --> 02:21.420
Portanto, aqui, os genéricos podem nos ajudar.

02:21.420 --> 02:23.750
Transformamos isto em uma função genérica, acrescentando

02:23.750 --> 02:26.470
estes parênteses angulares após o nome da função.

02:26.470 --> 02:29.740
E então definimos os identificadores Q.

02:29.740 --> 02:33.190
Normalmente você começa com T, por tipo.

02:33.190 --> 02:35.600
Mas você poderia usar qualquer identificador

02:35.600 --> 02:37.730
aqui, não precisa ser um único caractere,

02:37.730 --> 02:39.860
mas a convenção é usar um único caractere e

02:39.860 --> 02:42.250
normalmente, se você tiver apenas um tipo genérico

02:42.250 --> 02:43.690
você nomeia este T.

02:43.690 --> 02:46.640
E então você diz, bem este tipo genérico aqui, isto agora está

02:46.640 --> 02:48.510
disponível dentro desta função.

02:48.510 --> 02:51.453
Portanto, poderíamos dizer que o que recebemos aqui é do tipo T.

02:53.090 --> 02:55.740
Parece estranho, não vamos chegar lá sem preocupações.

02:55.740 --> 02:57.280
Agora aqui temos dois argumentos

02:57.280 --> 02:59.570
onde não sabemos exatamente como eles serão.

02:59.570 --> 03:02.450
Portanto, aceitarei aqui um segundo tipo genérico.

03:02.450 --> 03:04.340
Simplesmente adicionando uma vírgula nos parênteses

03:04.340 --> 03:07.400
angulares, E então continuamos simplesmente no alfabeto.

03:07.400 --> 03:10.490
E, portanto, o segundo parâmetro genérico ou

03:10.490 --> 03:15.490
tipo que você pode estar usando em uma função normalmente é chamado de U.

03:15.630 --> 03:18.560
Portanto, poderíamos dizer que isto é do tipo U.

03:18.560 --> 03:22.100
O que isso nos rende agora?

03:22.100 --> 03:25.450
Bem, na verdade, muito, como você vê com isto sozinho

03:25.450 --> 03:28.620
se você pairar sobre a fusão, o datilografia

03:28.620 --> 03:33.230
infere que esta função retorna a interseção de T e U.

03:33.230 --> 03:36.800
E é claro que também poderíamos definir isto explicitamente assim, mas não

03:36.800 --> 03:38.040
precisamos nem mesmo fazer

03:38.040 --> 03:42.010
isso porque a atribuição de objeto retorna uma interseção e, portanto, como retornamos

03:42.010 --> 03:44.150
um resultado da atribuição de objeto, o datilógrafo

03:44.150 --> 03:45.740
entende automaticamente que esta

03:45.740 --> 03:48.390
função retorna a interseção.

03:48.390 --> 03:50.320
Então, como isso é útil?

03:50.320 --> 03:52.510
Bem, se agora pairarmos sobre o objeto fundido,

03:52.510 --> 03:54.260
vemos que agora só com este datilografia

03:54.260 --> 03:56.450
entendemos que o que armazenamos no objeto

03:56.450 --> 03:59.230
fundido é a interseção destes dois tipos de objetos,

03:59.230 --> 04:01.690
porque ele vê que estamos passando nestes objetos,

04:01.690 --> 04:06.100
que são destes tipos de objetos que ele infere.

04:06.100 --> 04:08.840
Cadeia de nomes e número de idade.

04:08.840 --> 04:11.590
E que nossa função retorne a interseção.

04:11.590 --> 04:13.630
Por que ele é capaz de inferir isso

04:13.630 --> 04:16.313
agora e não com o objeto que tínhamos antes?

04:17.220 --> 04:19.560
Porque o objeto é de tipo altamente inespecífico.

04:19.560 --> 04:22.490
Dizemos que qualquer objeto e sim, portanto, o datilografia

04:22.490 --> 04:24.530
é capaz de inferir que retornamos a interseção

04:24.530 --> 04:26.600
de objeto e objeto.

04:26.600 --> 04:29.570
Mas a intersecção de dois objetos desconhecidos é apenas

04:29.570 --> 04:32.270
um novo objeto desconhecido que não oferece nenhuma

04:32.270 --> 04:35.420
informação de tipo adicional para digitar.

04:35.420 --> 04:38.170
Com os tipos genéricos, o que estamos dizendo

04:38.170 --> 04:43.170
em datilografia é que, estes dois parâmetros podem e freqüentemente serão de tipos

04:43.282 --> 04:47.100
diferentes e, portanto, a datilografia é capaz de entender que

04:47.100 --> 04:49.690
não estamos trabalhando apenas com algum

04:49.690 --> 04:53.150
tipo de objeto aleatório, mas que obteremos dados de tipos

04:53.150 --> 04:55.250
diferentes aqui.

04:55.250 --> 04:56.940
E que esta função em geral

04:56.940 --> 04:59.770
retornará a interseção desses dados.

04:59.770 --> 05:01.773
E, portanto, o datilografia é capaz

05:01.773 --> 05:04.390
de entender que o que armazenamos aqui no objeto

05:04.390 --> 05:07.910
fundido é tal que intersecta os dados dessas duas entradas.

05:07.910 --> 05:09.530
Porque agora não estamos lidando

05:09.530 --> 05:14.423
apenas com alguns objetos desconhecidos aqui, mas com tipos muito específicos.

05:15.330 --> 05:20.150
E por isso agora, se eu consolar a idade do objeto fundido aqui, isto funciona

05:20.150 --> 05:22.980
sem erros, como você pode dizer.

05:22.980 --> 05:26.770
Aqui estou imprimindo 30 por causa de tipos genéricos.

05:26.770 --> 05:29.040
Estamos dando ao digitado as informações

05:29.040 --> 05:31.950
extras que não sabemos exatamente os tipos, haverá

05:31.950 --> 05:34.780
objetos aqui que podemos dizer isso.

05:34.780 --> 05:36.550
Mas não sabemos se é um objeto com uma chave de nome,

05:36.550 --> 05:38.640
com uma chave de idade, com uma chave de hobbies.

05:38.640 --> 05:41.130
Não sabemos e não nos importamos, não nos importamos

05:41.130 --> 05:43.360
com o objeto exato aqui, não queremos especificar

05:43.360 --> 05:46.050
que isto tem que ser deste tipo.

05:46.050 --> 05:47.490
Porque, de repente, se eu acrescentasse

05:47.490 --> 05:50.520
hobbies lá dentro, teríamos um problema.

05:50.520 --> 05:52.540
Portanto, não quero ser tão restritivo.

05:52.540 --> 05:54.480
Só quero dizer que isto é de qualquer tipo

05:54.480 --> 05:56.940
que eu não me importo, mas é muito provavelmente um

05:56.940 --> 05:58.590
tipo diferente deste aqui.

05:58.590 --> 06:00.860
E se fosse o mesmo, também estaria bem.

06:00.860 --> 06:03.030
Mas o datilografia entende que temos

06:03.030 --> 06:06.530
aqui tipos específicos para estes dois parâmetros e que

06:06.530 --> 06:08.800
retornamos a interseção deles.

06:08.800 --> 06:12.660
Em vez de apenas ter aqui qualquer objeto não específico.

06:12.660 --> 06:14.770
Agora, especificamente, a mágica aqui não

06:14.770 --> 06:16.210
é apenas o fato de dizermos que

06:16.210 --> 06:18.410
temos aqui dois tipos diferentes.

06:18.410 --> 06:20.740
Mas que estes tipos não são definidos em pedra

06:20.740 --> 06:22.870
quando definimos esta função, mas eles são

06:22.870 --> 06:25.810
definidos dinamicamente quando chamamos a função.

06:25.810 --> 06:27.430
Portanto, aqui estamos chamando a

06:27.430 --> 06:30.560
função e o datilografia infere os tipos para os dois argumentos.

06:30.560 --> 06:33.890
Para T, ele basicamente preenche um tipo de objeto com um objeto com

06:33.890 --> 06:36.677
um nome de propriedade que contém um cordel e uma propriedade

06:36.677 --> 06:39.600
de hobbies que contém um conjunto de cordas.

06:39.600 --> 06:43.290
E para U preenche um tipo de objeto de tipo com

06:43.290 --> 06:47.990
propriedade de idade onde a idade é do tipo número.

06:47.990 --> 06:51.030
Agora quando chamamos esta função novamente em

06:51.030 --> 06:53.890
outra linha e passamos em objetos diferentes

06:53.890 --> 06:57.090
e eu guardo isto em uma nova constante com um novo nome,

06:57.090 --> 06:59.920
então, é claro, tipos diferentes são preenchidos

06:59.920 --> 07:03.130
para T e U para esta chamada de função.

07:03.130 --> 07:05.350
Você também pode dizer especificamente

07:05.350 --> 07:07.780
quais tipos devem ser preenchidos adicionando

07:07.780 --> 07:09.110
colchetes angulares após

07:09.110 --> 07:11.320
o nome da função quando você a chama e então

07:11.320 --> 07:13.010
você preencheria seus próprios

07:13.010 --> 07:15.200
tipos para T e U.

07:15.200 --> 07:18.030
Poderíamos dizer datilografar que T deve ser do tipo string

07:18.030 --> 07:20.180
para esta chamada de função e U deve ser do tipo

07:20.180 --> 07:22.710
número, mas então, é claro, datilografar reclamaria

07:22.710 --> 07:23.950
sobre os valores concretos

07:23.950 --> 07:25.940
que estamos passando aqui.

07:25.940 --> 07:28.270
Porque isto claramente não é uma corda

07:28.270 --> 07:30.190
e, se consertássemos isto, claramente

07:30.190 --> 07:32.280
não seria do tipo número.

07:32.280 --> 07:34.650
Portanto, aqui poderíamos ser muito específicos

07:34.650 --> 07:38.620
e dizer bem, o primeiro argumento ou o tipo T para ser preciso para esta

07:38.620 --> 07:41.700
chamada de função aqui será um tipo de objeto onde temos

07:41.700 --> 07:45.310
uma propriedade de nome que é de tipo string e uma propriedade

07:45.310 --> 07:48.850
de hobbies que é de tipo string array.

07:48.850 --> 07:52.970
E o tipo concreto para U, para esta chamada de função será um objeto

07:52.970 --> 07:55.800
onde temos uma propriedade de idade que deve

07:55.800 --> 07:57.320
ser do tipo número.

07:57.320 --> 08:00.220
E agora estaríamos bem e não haveria mais

08:00.220 --> 08:02.730
erros e isto funcionaria.

08:02.730 --> 08:05.060
Mas isto é redundante, você pode absolutamente

08:05.060 --> 08:07.310
fazer isso e é importante entender que isto

08:07.310 --> 08:10.070
é, no final das contas, o que são os genéricos que você

08:10.070 --> 08:12.990
pode preencher em diferentes tipos concretos para diferentes

08:12.990 --> 08:15.170
chamadas de funções.

08:15.170 --> 08:16.930
Mas não precisamos fazer isso aqui porque

08:16.930 --> 08:20.110
o datilografia simplesmente infere os tipos dos valores que estamos

08:20.110 --> 08:22.170
passando como argumentos aqui.

08:22.170 --> 08:25.120
E, em seguida, os lugares nos tipos inferidos

08:25.120 --> 08:28.240
para T e U para esta chamada de função.

08:28.240 --> 08:31.283
É assim que os genéricos funcionam nos bastidores no final.
