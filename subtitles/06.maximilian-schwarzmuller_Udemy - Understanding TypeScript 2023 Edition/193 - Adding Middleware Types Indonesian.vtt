WEBVTT

00:02.210 --> 00:04.200
Instruktur: Jadi kita punya server dummy dasar

00:04.200 --> 00:05.490
ini dan berjalan, tetapi server

00:05.490 --> 00:08.380
ini tidak melakukan sesuatu yang berguna tentunya.

00:08.380 --> 00:11.430
Sekarang, saya katakan bahwa saya ingin membangun rest API yang sangat

00:11.430 --> 00:13.110
sederhana, dan untuk itu, saya akan membuat

00:13.110 --> 00:15.570
sub-folder baru di folder sumber, yang akan saya beri

00:15.570 --> 00:16.830
nama routes.

00:16.830 --> 00:19.870
Di sana, saya akan menambahkan file yang harus menangani

00:19.870 --> 00:22.540
sekumpulan rute tertentu dari rest API ini, dan sekarang

00:22.540 --> 00:25.710
terserah Anda jenis API mana yang ingin Anda bangun.

00:25.710 --> 00:28.520
Saya akan membangun sebuah todo API di sini, jika Anda mengambil

00:28.520 --> 00:30.770
bagian React in TypeScript, kedengarannya terdengar

00:30.770 --> 00:32.140
akrab bagi Anda karena di sana

00:32.140 --> 00:34.530
kami membangun aplikasi todo juga, ini benar-benar

00:34.530 --> 00:36.820
terpisah dari bagian itu, tidak akan bekerja sama

00:36.820 --> 00:38.710
dengan React, tentu saja Anda dapat menghubungkannya

00:38.710 --> 00:41.250
sendiri, tetapi di sini saya akan membangun API todo

00:41.250 --> 00:48.350
sederhana sehingga kita melihat bagaimana TypeScript bekerja dengan Node dan Express.

00:48.350 --> 00:51.400
Aplikasi yang kami bangun tidak terlalu kompleks,

00:51.400 --> 00:54.760
tetapi akan mengandung banyak konsep yang menarik.

00:54.760 --> 00:57.080
Jadi di sini, kita akan menambahkan rute

00:57.080 --> 01:01.800
todo saya dengan menambahkan todos. ts di folder routes, dan di sana, saya sekarang ingin

01:01.800 --> 01:04.570
menggunakan Express. js untuk mendaftarkan

01:04.570 --> 01:06.630
beberapa rute.

01:06.630 --> 01:09.730
Untuk itu, saya akan mengimpor sesuatu dari Express,

01:09.730 --> 01:13.700
dan sesuatu itu sekarang sebenarnya adalah router.

01:13.700 --> 01:16.160
Sekarang sintaks JS yang umum untuk itu biasanya

01:16.160 --> 01:20.950
adalah Anda mengimpor Express dengan menggunakan require express, dan kemudian

01:20.950 --> 01:23.550
di baris baru, Anda sering melihat kode di mana

01:23.550 --> 01:25.673
kita melakukan ini di sini.

01:27.090 --> 01:28.180
Sekarang itu sesuatu yang bisa Anda lakukan,

01:28.180 --> 01:30.130
tetapi di sini saya hanya akan mengimpornya seperti itu.

01:31.130 --> 01:34.120
Sekarang ini memberi kita router, dan kita cukup memanggil Router

01:34.120 --> 01:36.750
di sini sebagai fungsi, dan ini memungkinkan kita untuk

01:36.750 --> 01:39.300
mendaftarkan middleware, jadi pada akhirnya, rute

01:39.300 --> 01:41.980
endpoint untuk permintaan yang masuk di mana kita kemudian

01:41.980 --> 01:45.540
mengeksekusi beberapa logika pada permintaan ini.

01:45.540 --> 01:48.980
Sekarang untuk aplikasi todo, saya ingin mendaftarkan beberapa rute dasar,

01:48.980 --> 01:53.700
rute posting di slash nothing di mana kita dapat menambahkan todo baru, jadi di sini kita akan memerlukan

01:53.700 --> 01:55.760
beberapa kode, beberapa fungsi yang kemudian

01:55.760 --> 01:58.860
menambahkan todo di suatu tempat, untuk saat ini saya hanya akan menentukan

01:58.860 --> 02:01.250
tidak ada kode sama sekali, hanya mengatur rute secara

02:01.250 --> 02:03.380
umum di sini.

02:03.380 --> 02:05.110
Jadi kita punya post request,

02:05.110 --> 02:08.770
kemudian get request, get all todo katakanlah, kemudian

02:08.770 --> 02:12.900
juga katakanlah patch request untuk mengupdate todo, dan di sana

02:12.900 --> 02:15.520
saya berharap mendapatkan id, segmen dinamis

02:15.520 --> 02:19.280
di URL, dan kemudian di sini juga ada delete request untuk

02:19.280 --> 02:22.700
menghapus todo berdasarkan id.

02:22.700 --> 02:25.720
Ini adalah rute-rute saya, dan sekarang kita dapat mengekspor

02:25.720 --> 02:28.620
router yang dikonfigurasi sebagai default dalam file ini.

02:28.620 --> 02:30.930
Sekarang tidak akan terjadi apa-apa pada rute-rute ini, bukan?

02:30.930 --> 02:32.510
Saya belum menyiapkan fungsi apa

02:32.510 --> 02:35.830
pun yang akan dieksekusi ketika permintaan mencapai titik akhir ini,

02:35.830 --> 02:38.620
tetapi setidaknya kita sekarang tahu rute mana yang kita inginkan,

02:38.620 --> 02:41.740
kita akan menambahkan fungsi pada langkah kedua nanti.

02:41.740 --> 02:44.100
Untuk saat ini, mari kita hubungkan router di sini, rute yang dikonfigurasi

02:44.100 --> 02:48.320
ke server kita yang sedang berjalan di sini di aplikasi. ts, dan untuk melakukan

02:48.320 --> 02:53.211
itu, kita hanya mengimpor, katakanlah todoRoutes dari

02:53.211 --> 02:54.290
. /routes/todos.

02:56.040 --> 02:58.910
Jadi kita mengimpor router yang diekspor di todos

02:58.910 --> 03:01.610
ke dalam aplikasi. ts, dan sekarang di sini, kita

03:01.610 --> 03:03.390
perlu menghubungkannya ke aplikasi Express

03:03.390 --> 03:08.340
yang sedang berjalan dengan menggunakan app. dan kemudian katakanlah kita ingin meneruskan

03:08.340 --> 03:10.800
semua permintaan yang dimulai dengan /todos

03:10.800 --> 03:14.600
ke todoRoutes kita, sehingga permintaan yang menargetkan

03:14.600 --> 03:17.210
URL yang berbeda tidak akan ditangani di

03:17.210 --> 03:18.703
sana.

03:19.920 --> 03:23.730
Berbicara tentang penanganan, dalam pengaturan middleware Express di sini yang kita

03:23.730 --> 03:25.983
gunakan, kita juga dapat mengatur middleware yang

03:25.983 --> 03:29.030
akan menangani kesalahan, jadi kesalahan apa pun yang mungkin dilemparkan

03:29.030 --> 03:31.660
di mana saja dalam kode kita, dan kita melakukan ini dengan

03:31.660 --> 03:33.610
app. dan kemudian kami menyiapkan

03:33.610 --> 03:37.470
fungsi middleware yang khas di sini di mana kami mendapatkan permintaan, respons,

03:37.470 --> 03:40.640
dan fungsi berikutnya, dan sekali lagi, ini semua mengharuskan Anda

03:40.640 --> 03:45.430
untuk mengetahui beberapa Express. js dan untuk mengetahui

03:45.430 --> 03:48.330
Node. js, saya tidak akan membahas

03:48.330 --> 03:51.160
secara persis bagaimana middleware bekerja di Express

03:51.160 --> 03:52.970
dan apa itu middleware.

03:52.970 --> 03:54.960
Jadi itu adalah fungsi middleware biasa di sini seperti yang seharusnya

03:54.960 --> 03:57.150
Anda ketahui dari Express. js, dan Anda mungkin

03:57.150 --> 03:59.050
juga tahu bahwa ada alternatif

03:59.050 --> 04:02.310
untuk fungsi itu, fungsi yang mengambil empat parameter

04:02.310 --> 04:04.680
di mana parameter pertama adalah potensi

04:04.680 --> 04:07.350
kesalahan, dan sekarang ini adalah fungsi

04:07.350 --> 04:10.720
middleware penanganan kesalahan, yang akan ditembakkan

04:10.720 --> 04:15.290
secara otomatis oleh Express jika di middleware lain sebelum yang satu

04:15.290 --> 04:18.750
ini Anda memiliki kesalahan.

04:18.750 --> 04:21.200
Jadi ini adalah fungsi middleware penanganan kesalahan saya,

04:21.200 --> 04:23.380
dan Anda lihat, kami mendapat banyak kesalahan di sini.

04:23.380 --> 04:26.260
Sekumpulan error karena ini semua bertipe any dan

04:26.260 --> 04:29.030
kita juga tidak menggunakan semua nilai ini, tetapi

04:29.030 --> 04:33.080
biarkan saya memperjelas jenis tipe apa yang kita miliki di sini.

04:33.080 --> 04:35.510
Ini akan bertipe Error, ini

04:35.510 --> 04:39.890
akan bertipe express. Request, atau Anda cukup mengimpor Request

04:39.890 --> 04:43.020
di sini sebagai tambahan bernama import from express,

04:43.020 --> 04:45.540
ini juga berfungsi jika Anda menginstal tipe

04:45.540 --> 04:46.670
Express yang kami lakukan,

04:46.670 --> 04:49.310
lalu di sini kami juga mendapat Response, dan NextFunction

04:49.310 --> 04:56.310
di sini, dan kemudian kami dapat menyesuaikan tipe kami di sini, ini sekarang bertipe Request, ini bertipe Response, dan

04:56.310 --> 04:59.230
ini adalah NextFunction yang dapat kami jalankan untuk

04:59.230 --> 05:03.650
membiarkan permintaan melanjutkan perjalanannya ke middleware berikutnya

05:03.650 --> 05:06.680
dalam antrean.

05:06.680 --> 05:08.590
Nah, itulah middleware penanganan error

05:08.590 --> 05:10.820
kita, yang akan menyala setiap kali kita memiliki

05:10.820 --> 05:13.030
error di salah satu middleware kita yang lain,

05:13.030 --> 05:15.000
dan di sini, kita bisa mengirim kembali

05:15.000 --> 05:17.690
respons dengan katakanlah data JSON di mana kita memiliki

05:17.690 --> 05:22.690
pesan yang merupakan error. pesan, dan di mana kita mungkin juga mengatur,

05:22.855 --> 05:24.630
err. pesan yang saya maksud,

05:24.630 --> 05:28.510
dan di mana kita mungkin juga menetapkan kode status 500, dan tentu saja, Anda dapat

05:28.510 --> 05:29.610
memiliki fungsi penanganan

05:29.610 --> 05:32.460
kesalahan yang lebih rumit daripada yang saya miliki di sini,

05:32.460 --> 05:35.020
tetapi dengan itu, kami menambahkan rute kami, kami

05:35.020 --> 05:38.830
menambahkan middleware penanganan kesalahan kami, mengapa kita tidak menambahkan

05:38.830 --> 05:40.670
beberapa logika ke API ini sekarang di

05:40.670 --> 05:43.103
kuliah berikutnya.
