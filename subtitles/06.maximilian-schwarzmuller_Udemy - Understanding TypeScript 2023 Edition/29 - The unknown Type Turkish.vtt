WEBVTT

00:02.340 --> 00:04.020
Eğitmen: TypeScript ve çekirdek türler

00:04.020 --> 00:06.240
hakkındaki temel bilgileri neredeyse tamamladık.

00:06.240 --> 00:10.130
Farkında olunması gereken iki tür daha vardır çünkü

00:10.130 --> 00:13.170
bunlar zaman zaman önemli olacaktır.

00:13.170 --> 00:16.603
İlk tip bilinmeyen tiptir.

00:17.860 --> 00:20.350
Bunun için bu dosyaya işlevleriniz adını vereceğim. 'yi seçin ve yeni bir

00:20.350 --> 00:23.343
uygulama ekleyin. ts dosyasını açın ve

00:24.290 --> 00:28.620
orada, userInput adında yeni bir değişkenimiz olduğunu ve

00:28.620 --> 00:32.143
bunun bilinmeyen türde olduğunu varsayalım.

00:32.143 --> 00:34.850
Varsayılan olan any türünde değil, TypeScript

00:34.850 --> 00:36.690
tarafından sunulan farklı bir tür

00:36.690 --> 00:38.500
olan unknown türündedir.

00:38.500 --> 00:40.950
Bilinmiyor olabilir çünkü kullanıcının sonunda

00:40.950 --> 00:42.950
ne gireceğini henüz bilmiyoruz.

00:42.950 --> 00:45.593
Sayı mı, dize mi, bilmiyoruz.

00:46.770 --> 00:48.960
Bilinmeyen türle ilgili ilginç olan

00:48.960 --> 00:51.020
şey, hata almadan herhangi bir değeri

00:51.020 --> 00:54.630
orada saklayabilmemizdir, bu yüzden buna izin verilir.

00:54.630 --> 00:57.660
Şimdi dosyamı burada derlersem, derleme

00:57.660 --> 01:00.290
hatası almadığımı göreceksiniz.

01:00.290 --> 01:01.910
Yani, şu ana kadar, buraya bir tür

01:01.910 --> 01:03.820
atamamış olsaydık ve dolayısıyla any

01:03.820 --> 01:05.260
türüne sahip olsaydık veya tür

01:05.260 --> 01:08.610
olarak açıkça any'yi ayarlamış olsaydık durum aynı olurdu.

01:08.610 --> 01:11.810
Ama yine de, bilinmeyen herhangi birinden farklıdır.

01:11.810 --> 01:15.430
Burada bu çalışıyor, ancak başka bir değişkenim varsa,

01:15.430 --> 01:20.890
diyelim ki userName, bu bir dize olmalıdır, sorunlarla karşılaşacağız.

01:20.890 --> 01:22.860
Ve bu burada başlatılmamış, ancak

01:22.860 --> 01:27.200
burada userName'i userInput'a eşit olarak ayarlamak istiyorum.

01:27.200 --> 01:29.150
Şimdi bir hata aldığımızı görüyorsunuz.

01:29.150 --> 01:33.010
Bilinmeyen türü string türüne atanamaz.

01:33.010 --> 01:34.590
Dolayısıyla, userName bir dize

01:34.590 --> 01:37.990
ister ve elbette unknown'ın bir dize olması garanti edilmez.

01:37.990 --> 01:41.620
Burada bir tane atadım, ancak bu sadece bu hat için geçerli.

01:41.620 --> 01:44.460
userInput teknik olarak herhangi bir değer tutabilir

01:44.460 --> 01:46.490
çünkü bilinmemektedir.

01:46.490 --> 01:47.640
İşin ilginç yanı, unknown

01:47.640 --> 01:51.060
türünü any türüne çevirirsem bu hata ortadan kalkar çünkü

01:51.060 --> 01:53.900
any türü TypeScript'teki en esnek türdür ve temelde

01:53.900 --> 01:56.810
tüm tür denetimini devre dışı bırakır ve TypeScript

01:56.810 --> 02:00.950
sadece "Pes ediyorum, ne istersen yap" der. Bilinmeyen, herhangi birinden biraz daha kısıtlayıcıdır.

02:00.950 --> 02:05.510
unknown ile, örneğin string isteyen bir değişkene

02:05.510 --> 02:08.820
atamadan önce userInput'ta o anda

02:08.820 --> 02:12.200
depolanan türü kontrol etmemiz

02:12.200 --> 02:14.400
gerekir.

02:14.400 --> 02:16.180
Dolayısıyla, burada bir dize istendiğinden,

02:16.180 --> 02:18.110
userInput türünün dizeye eşit olup

02:18.110 --> 02:23.110
olmadığını kontrol edebiliriz ve TypeScript bu kontrolü algılar ve burada userName'de

02:23.650 --> 02:26.020
neyin saklandığını anlar, çünkü userInput'un

02:26.020 --> 02:29.790
dize türünde olup olmadığını kontrol ettiğim bu if deyiminden çıkar,

02:29.790 --> 02:31.830
userInput'un bir dize olduğu garanti

02:31.830 --> 02:36.920
edilir ve bu nedenle onu userName'e güvenle atayabilirim.

02:36.920 --> 02:39.990
Dolayısıyla, bilinmeyen bir değeri sabit bir

02:39.990 --> 02:42.670
türe sahip bir değere atayabilmek için burada

02:42.670 --> 02:47.560
unknown ile böyle ekstra bir tür kontrolüne ihtiyacım var ve bu nedenle unknown,

02:47.560 --> 02:50.530
orada tam olarak ne tür bir depo olduğunu söyleyemeyeceğimi

02:50.530 --> 02:56.930
biliyorsanız, herhangi birine göre daha iyi bir seçimdir, bir sayı olabilir, bir dize olabilir,

02:56.930 --> 02:59.450
ancak sonunda onunla ne yapmak istediğimi

02:59.450 --> 03:02.910
biliyorum.

03:02.910 --> 03:05.470
Yapmak istediğiniz şeyin yapılabildiğinden emin

03:05.470 --> 03:07.440
olmak için fazladan bir kontrol ekleyin,

03:07.440 --> 03:10.240
böylece bir dizeyle çalışmak istiyorsanız, bir dizeniz

03:10.240 --> 03:12.160
olur ve sorun olmaz.

03:12.160 --> 03:14.690
Bilinmeyen ise hepsinden daha iyidir çünkü

03:14.690 --> 03:18.720
her şeyi yapmanıza izin verilmediğinden emin olmanızı sağlar ancak en

03:18.720 --> 03:20.930
azından bir tür kontrolünüz vardır.

03:20.930 --> 03:23.260
Elbette, userInput'un her zaman bir string

03:23.260 --> 03:25.990
veya her zaman bir string veya bir sayı olduğunu önceden

03:25.990 --> 03:28.150
bilme şansınız varsa, o zaman bilinmeyen

03:28.150 --> 03:30.000
yerine string veya böyle bir birlik

03:30.000 --> 03:31.680
türü kullanmalısınız.

03:31.680 --> 03:34.460
Dolayısıyla, bilinmeyen hala her zaman kullanmamanız gereken bir türdür,

03:34.460 --> 03:36.010
ancak açıklanan nedenlerden dolayı diğerlerinden

03:36.010 --> 03:37.460
daha iyidir.
