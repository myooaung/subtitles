WEBVTT

00:02.480 --> 00:06.780
Man: Nu, met de kennis over factory functions, of factory decorators,

00:06.780 --> 00:10.523
kunnen we heel interessante dingen doen.

00:11.570 --> 00:16.240
We zouden bijvoorbeeld een nieuwe decoratiefabriek met sjabloon kunnen

00:16.240 --> 00:17.693
verhandelen.

00:19.400 --> 00:21.590
En hier verwacht ik een sjabloon te krijgen,

00:21.590 --> 00:23.780
dat een of andere string zou moeten zijn.

00:23.780 --> 00:28.780
En een hookId, die ook een string moet zijn.

00:28.870 --> 00:32.050
Dan geef ik hier mijn anonieme functie terug, die de eigenlijke

00:32.050 --> 00:34.800
decorator is, zoals je geleerd hebt.

00:34.800 --> 00:37.440
Want nogmaals, ik heb een decoratiefabriek.

00:37.440 --> 00:40.570
En daarin wil ik een sjabloon, wat HTML-code

00:40.570 --> 00:42.530
zou moeten zijn, renderen

00:42.530 --> 00:46.590
naar een plaats in de dom, waar ik deze hookId vind.

00:46.590 --> 00:49.160
Dus nu kunnen we naar de index. html en voeg zo'n plek toe,

00:49.160 --> 00:51.250
zodat we kunnen zien dat dit werkt.

00:51.250 --> 00:54.483
We kunnen hier een div toevoegen, met een id van app, misschien.

00:55.430 --> 00:59.560
En dan in app. ts, in plaats van logger, voeg

00:59.560 --> 01:01.357
ik WithTemplate toe.

01:02.570 --> 01:05.130
Laten we nu een lege tekenreeks doorgeven als eerste argument,

01:05.130 --> 01:06.810
en app als tweede argument.

01:06.810 --> 01:09.313
Dus, deze ID heb ik toegewezen aan de div hier.

01:10.170 --> 01:12.400
En in die binnenste functie zit nu onze

01:12.400 --> 01:13.830
eigenlijke decorator.

01:13.830 --> 01:16.540
Binnen deze decorator functie,

01:16.540 --> 01:19.500
wil ik het element bereiken.

01:19.500 --> 01:24.500
Naar het hook element met document. getElementById.

01:25.662 --> 01:29.390
Voor de hookId die we hier als argument krijgen.

01:29.390 --> 01:33.480
En als HookEl een ding is dat bestaat, dan wil ik toegang

01:34.330 --> 01:37.960
tot zijn innerHTML, en dit gelijk stellen aan template,

01:37.960 --> 01:39.920
laten we zeggen.

01:39.920 --> 01:41.440
Een zeer eenvoudige opstelling,

01:41.440 --> 01:43.640
natuurlijk, maar dit zou het moeten doen.

01:43.640 --> 01:45.460
Ik ben niet geïnteresseerd in de constructeur.

01:45.460 --> 01:48.110
En om typescript te vertellen dat ik hier niet geïnteresseerd ben,

01:48.110 --> 01:50.370
kan ik een underscore als naam toevoegen, die in feite

01:50.370 --> 01:52.007
aan het typescript aangeeft, "Ja, ik weet

01:52.007 --> 01:54.580
dat ik dit argument krijg, maar ik heb het niet nodig.

01:54.580 --> 01:56.170
Ik moet het wel specificeren.

01:56.170 --> 01:58.920
Dus met deze onderstreping zeg ik dat ik het weet, maar

01:58.920 --> 02:00.850
dat ik het niet zal gebruiken. Omdat, alles wat ik nu wil doen,

02:00.850 --> 02:02.300
is dit jaar renderen.

02:02.300 --> 02:04.033
Dus als we nu WithTemplate toevoegen,

02:05.580 --> 02:07.750
kunnen we hier een h1 tag toevoegen,

02:07.750 --> 02:10.400
Mijn Persoon Object zoals dit.

02:10.400 --> 02:14.570
Sluit het ook af.

02:14.570 --> 02:15.653
En als we dat nu opslaan, compileert het zonder fouten.

02:19.130 --> 02:22.380
En inderdaad, hier zie je dat dit werd weergegeven op het scherm.

02:22.380 --> 02:26.350
En dit laat hopelijk zien welke macht

02:26.350 --> 02:29.720
je hebt met decorateurs.

02:29.720 --> 02:31.720
Je kunt echt geavanceerde decorators bouwen

02:31.720 --> 02:34.780
zoals deze, die ineens wat magie achter de schermen doet.

02:34.780 --> 02:38.500
En dat is wat ik bedoel met metaprogrammeren.

02:38.500 --> 02:41.260
We voegen hier wat logica toe, die we zouden kunnen blootleggen

02:41.260 --> 02:43.930
als dit een bibliotheek van derden zou zijn die we delen

02:43.930 --> 02:46.190
met andere gebruikers.

02:46.190 --> 02:47.890
We kunnen dit als onderdeel van de bibliotheek

02:47.890 --> 02:50.350
beschikbaar stellen, en iedereen die onze bibliotheek

02:50.350 --> 02:52.630
gebruikt kan deze decoratorfunctie importeren

02:52.630 --> 02:54.910
en aan een klasse toevoegen om dan plotseling op magische

02:54.910 --> 02:57.408
wijze inhoud te renderen.

02:57.408 --> 03:00.500
En natuurlijk, je bent, je bent niet eens beperkt om dat te doen.

03:00.500 --> 03:02.980
Als u de naam die deel uitmaakt van de klasse

03:02.980 --> 03:05.340
wilt uitvoeren wanneer deze wordt geïnstantieerd,

03:05.340 --> 03:07.850
kunt u dat ook doen.

03:07.850 --> 03:09.570
We krijgen hier toch onze constructeur: Functie.

03:09.570 --> 03:12.427
Wat we daarmee kunnen doen is hier een nieuwe persoon

03:14.190 --> 03:16.010
aanmaken, door onze constructor

03:16.010 --> 03:18.660
aan te roepen, want dat is tenslotte onze constructor:

03:18.660 --> 03:20.380
Functie hier.

03:20.380 --> 03:23.820
Laat me dit omzetten naar any, zodat het typescript dit toestaat

03:23.820 --> 03:26.570
en niet denkt dat het een normale functie is.

03:26.570 --> 03:29.240
En dan kunnen we naar ons hook element gaan,

03:29.240 --> 03:31.880
en zoeken naar een h1 tag, die je in de praktijk

03:31.880 --> 03:35.160
natuurlijk niet altijd zult hebben.

03:35.160 --> 03:36.070
Maar voor demo doeleinden, neem ik

03:36.070 --> 03:37.330
aan dat we er hier altijd een zullen hebben.

03:37.330 --> 03:39.820
Whoops, en ik zou altijd de h1 tag daar

03:39.820 --> 03:42.330
beneden moeten sluiten nu ik het zie.

03:42.330 --> 03:43.850
En dan hier, met een uitroepteken,

03:43.850 --> 03:46.750
wederom in de veronderstelling dat we altijd een h1 element

03:46.750 --> 03:49.900
vinden, kunnen we een textContent gelijk stellen aan p. naam.

03:49.900 --> 03:53.660
En als ik dat doe en dit opsla,

03:53.660 --> 03:56.010
voer ik nu de naam uit, die deel uitmaakt

03:56.010 --> 03:59.400
van het object hier in het sjabloon.

03:59.400 --> 04:01.540
Dit is dus iets wat je kunt doen, en natuurlijk

04:01.540 --> 04:03.420
kun je veel uitgebreidere decorateurs

04:03.420 --> 04:06.010
schrijven dan ik hier doe.

04:06.010 --> 04:07.840
Denk aan Angular, een zeer populair framework

04:07.840 --> 04:09.550
dat typescript gebruikt.

04:09.550 --> 04:12.270
Ze gebruiken decorators, zoals deze component

04:12.270 --> 04:15.740
decorator, om je in staat te stellen een object door te geven

04:15.740 --> 04:18.420
waarin je dingen specificeert zoals het sjabloon

04:18.420 --> 04:21.020
voor discomponent.

04:21.020 --> 04:21.930
En de selector in de dom

04:21.930 --> 04:23.950
waar dit sjabloon moet worden weergegeven.

04:23.950 --> 04:25.760
Dit komt vrij dicht in de buurt van wat wij hier gedefinieerd hebben.

04:25.760 --> 04:28.170
Een sjabloon, en dan een plaats waar het moet worden weergegeven.

04:28.170 --> 04:31.230
Onnodig te zeggen dat de Angular-decoratoren natuurlijk

04:31.230 --> 04:33.760
veel geavanceerder en uitgebreider zijn

04:33.760 --> 04:36.550
dan onze basisdecorator hier.

04:36.550 --> 04:38.740
Toch is de kerngedachte hetzelfde.

04:38.740 --> 04:41.660
Angular geeft u hier de decorators, zodat u wat

04:41.660 --> 04:43.900
HTML-code kunt opgeven, die kan worden

04:43.900 --> 04:46.700
gekoppeld aan uw component klasse die zal worden

04:46.700 --> 04:49.470
weergegeven aan de dom wanneer deze component

04:49.470 --> 04:51.760
wordt weergegeven.

04:51.760 --> 04:53.830
Als je niet weet hoe Angular werkt,

04:53.830 --> 04:55.850
is dat geen probleem.

04:55.850 --> 04:57.060
Je moet hier gewoon begrijpen,

04:57.060 --> 04:58.700
dat het werkt met klassen en decoratoren,

04:58.700 --> 05:01.300
en dan doet het in principe wat we hier deden.

05:01.300 --> 05:03.600
Dus dat is nog iets wat je kunt doen met decorateurs,

05:03.600 --> 05:06.400
of zoals specifiek hier, met decoratiefabrieken.

05:06.400 --> 05:09.220
Want dan kunnen we dat extra conflict

05:09.220 --> 05:12.210
dat we hier nodig hebben, doorgeven.

05:12.210 --> 05:13.610
En dat is ook wat ik bedoelde met metaprogrammeren.

05:13.610 --> 05:16.590
We creëren dingen, we creëren decoratieve functies,

05:16.590 --> 05:21.130
waarvan je zou kunnen zeggen dat ze enige invloed hebben op de eindgebruiker.

05:21.130 --> 05:24.840
In de NP dual render of iets op het scherm hier.

05:24.840 --> 05:27.510
Maar dat doen we met een tool die we beschikbaar stellen

05:27.510 --> 05:29.090
aan andere ontwikkelaars.

05:29.090 --> 05:31.370
Omdat deze decorator zo'n hulpmiddel is, dat andere

05:31.370 --> 05:33.970
ontwikkelaars moeten gebruiken door het toe te voegen

05:33.970 --> 05:36.000
aan een klasse in dit voorbeeld.

05:36.000 --> 05:38.580
Anders zou dit niets uithalen.

05:38.580 --> 05:40.300
Dus leveren we extra utilities

05:40.300 --> 05:43.490
aan ontwikkelaars, die de andere ontwikkelaars kunnen

05:43.490 --> 05:46.590
gebruiken om bijvoorbeeld handig iets op het scherm

05:46.590 --> 05:49.050
te renderen voor een gevende klasse.

05:49.050 --> 05:50.590
Dat is hetzelfde wat Angular

05:50.590 --> 05:52.940
hier doet, op een meer geavanceerde

05:52.940 --> 05:54.220
manier.
