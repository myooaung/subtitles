WEBVTT

00:02.190 --> 00:04.860
-: İsim alanı özelliği ile başlamak istiyorum.

00:04.860 --> 00:06.810
Şimdi size nasıl çalıştığını

00:06.810 --> 00:09.980
göstermek için bu iki arayüzü buraya alacağım.

00:09.980 --> 00:11.480
Sürükle ve bırak arayüzleri,

00:11.480 --> 00:14.140
uygulamadan çıkarın. ts öğesini seçin ve yeni

00:14.140 --> 00:19.140
bir dosya ekleyin, dragdropinterfaces. örneğin.

00:21.270 --> 00:25.180
Şimdi bunu buraya yapıştırabiliriz ve şimdi isim alanlarını kullanmak

00:25.180 --> 00:29.140
için tek yapmamız gereken namespace anahtar kelimesini ve ardından küme

00:31.645 --> 00:33.620
parantezlerini eklemektir.

00:33.620 --> 00:35.880
Şimdi de bu ad alanına bir isim vermemiz gerekiyor

00:35.880 --> 00:39.590
ve ben burada sürükle ve bırak için DD Interfaces adını vereceğim,

00:39.590 --> 00:41.660
ancak isim size kalmış.

00:41.660 --> 00:43.640
Şimdi, bu yıl bir JavaScript özelliği değil,

00:43.640 --> 00:45.250
bir TypeScript özelliğidir.

00:45.250 --> 00:47.750
Vanilla JavaScript'e derlenmez çünkü

00:47.750 --> 00:50.340
bunun doğrudan bir karşılığı yoktur.

00:50.340 --> 00:55.693
Bunun yerine TypeScript temel olarak onu bir nesneye derleyecektir.

00:55.693 --> 00:57.490
Daha sonra ad alanına koyacağınız

00:57.490 --> 01:00.440
şeylerin özelliklerde depolandığı bir nesneye,

01:00.440 --> 01:02.140
ancak bu konuda endişelenmenize

01:02.140 --> 01:06.960
gerek kalmayacak çünkü bu özelliklere erişimin tüm çözümlenmesi ve her şeyin çalışması

01:06.960 --> 01:10.640
TypeScript tarafından halledilecektir.

01:10.640 --> 01:13.940
Şimdi bu arayüzleri isim alanına taşıyabiliriz ve

01:13.940 --> 01:16.130
bununla işimiz neredeyse bitti.

01:16.130 --> 01:18.040
Ancak şimdi bir sorunumuz

01:18.040 --> 01:22.280
var, bu arayüzler artık sadece bu isim alanında mevcut.

01:22.280 --> 01:23.113
Bu arada, bir

01:23.113 --> 01:25.530
isim alanına sadece arayüzleri koyamazsınız,

01:25.530 --> 01:28.057
oraya her şeyi koyabilirsiniz, sınıflar,

01:28.057 --> 01:30.780
sabitler, ne isterseniz.

01:30.780 --> 01:33.900
İstediğiniz her şeyi bir ad alanına koyabilirsiniz.

01:33.900 --> 01:35.630
Yani temel olarak bir isim alanını sahip olduğunuz herhangi

01:35.630 --> 01:37.150
bir kodun etrafına sarabilirsiniz.

01:37.150 --> 01:39.830
Ancak karşılaştığımız sorun, bu özelliklerin,

01:39.830 --> 01:41.140
buradaki arayüzlerin artık

01:41.140 --> 01:44.800
yalnızca bu ad alanı içinde kullanılabilir olmasıdır.

01:44.800 --> 01:47.280
Gördüğünüz gibi, orada başka hiçbir şeyimiz yok.

01:47.280 --> 01:49.010
Şimdi elbette bunlara bağlı olan

01:49.010 --> 01:51.600
kodu bu isim alanına geri getirebiliriz, ancak

01:51.600 --> 01:53.370
o zaman yine buna darbe vururuz

01:53.370 --> 01:56.960
çünkü bu arayüzlere bağlı olan oldukça uzun bir sınıfımız olduğu

01:56.960 --> 01:58.940
ortaya çıkıyor.

01:58.940 --> 02:02.900
Proje listesi sınıfımız ve proje öğesi sınıfımız var.

02:02.900 --> 02:05.260
Bu arayüzlere bağlıdırlar, bu nedenle

02:05.260 --> 02:08.922
bu isim alanına eklememiz gereken çok şey olacaktır.

02:08.922 --> 02:10.205
Bu nedenle yapabileceğiniz

02:10.205 --> 02:14.210
şey, bir özelliği bir ad alanından dışa aktarmak için bir arayüzün önüne dışa

02:14.210 --> 02:16.850
aktarma anahtar sözcüğünü eklemektir.

02:16.850 --> 02:19.680
Bunun anlamı, artık bu arayüzlerin bu isim alanının

02:19.680 --> 02:22.110
içinde ve aynı zamanda bu dosyanın dışında

02:22.110 --> 02:24.487
da kullanılabilir olmasıdır.

02:24.487 --> 02:26.100
Bunun nasıl çalıştığını birazdan

02:26.100 --> 02:28.510
göreceğiz, ancak bununla bu arayüzü ya da her ne

02:28.510 --> 02:30.710
ihraç ediyorsak onu oluşturuyoruz.

02:30.710 --> 02:32.815
Bu, elbette bu dosyanın dışında

02:32.815 --> 02:36.610
da mevcut olan arayüzlerle sınırlı değildir, eğer temel

02:36.610 --> 02:41.140
olarak bu isim alanını içe aktarır veya kullanırsak.

02:41.140 --> 02:41.973
Ve tabii ki yine sadece

02:41.973 --> 02:44.580
bir isim alanındaki arayüzleri değil, herhangi bir şeyi dışa

02:44.580 --> 02:45.636
aktaramazsınız.

02:45.636 --> 02:48.010
Şimdi bununla birlikte soru şu: Bu ad

02:48.010 --> 02:50.310
alanını şimdi uygulamaya nasıl geri

02:50.310 --> 02:52.410
aktaracağız? ve bunun için TypeScript'in

02:52.410 --> 02:56.210
kullanabileceğiniz özel sözdizimi vardır.

02:56.210 --> 02:57.867
Uygulamanın başına dönelim. ts ve şimdi burada

02:57.867 --> 03:01.440
üç ileri eğik çizgi ekliyorsunuz, önemli olan üç, sadece iki

03:01.440 --> 03:03.690
değil çünkü bu aslında normal bir yorum

03:03.690 --> 03:06.150
değil, şimdi oluşturduğumuz şey aslında

03:06.150 --> 03:07.330
TypeScript tarafından

03:07.330 --> 03:10.280
alınan sözdizimi olacak özel bir yorum, TypeScript'in

03:10.280 --> 03:15.500
üç eğik çizgi ile başladığını anladığını söyleyebilirsiniz.

03:15.500 --> 03:19.301
Burada kendi kendine kapanan bir XML etiketi yazarsınız,

03:19.301 --> 03:21.600
yani açılı ayraç, ardından ileri

03:21.600 --> 03:25.790
eğik çizgi kapanan açılı ayraç ve bunların referans yolu

03:25.790 --> 03:29.220
eşittir ve ardından buraya içe aktarmak istediğiniz

03:29.220 --> 03:32.370
dosyanın adı.

03:32.370 --> 03:35.217
Benim durumumda burada dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Şimdi, bu TypeScript tarafından anlaşılır ve alınır çünkü

03:42.550 --> 03:45.220
üç başlangıç eğik çizgisi ile belirttiğim gibi,

03:45.220 --> 03:47.560
TypeScript'in bu referans olayını anladığı

03:47.560 --> 03:50.110
gibi anladığı özel bir sözdizimidir.

03:50.110 --> 03:51.960
Bu Vanilla JavaScript değildir

03:51.960 --> 03:53.970
Vanilla JavaScript fark etmez

03:53.970 --> 03:58.480
ve derlendiğinde böyle görünmeyecektir.

03:58.480 --> 04:00.430
Peki, bu ne işe yarıyor?

04:00.430 --> 04:05.070
Bu, artık DD Interfaces ad alanının app içinde kullanılabilir olmasını

04:05.070 --> 04:07.104
sağlar. ts.

04:07.104 --> 04:08.920
Ancak, aşağı kaydırırsanız, editörlerimin

04:08.920 --> 04:11.040
hala şikayet ettiğini ve hepimizin yaptığı gibi kaydetmeye

04:11.040 --> 04:12.250
çalıştığımızda iyi derleme

04:12.250 --> 04:14.300
hataları olduğunu görürsünüz.

04:14.300 --> 04:16.410
Yani, mevcut görünmüyor.

04:16.410 --> 04:19.730
Sürüklenebilir arayüz burada mevcut görünmüyor.

04:19.730 --> 04:22.386
İsim alanlarıyla ilgili özel bir şey var.

04:22.386 --> 04:25.840
Bunları kodunuzu bölmek için kullanabilirsiniz ve daha önce bir

04:25.840 --> 04:27.930
isim alanında sahip olduklarınızın o isim

04:27.930 --> 04:29.610
alanındaki herhangi bir yerden

04:29.610 --> 04:32.557
kullanılabileceğini söylediğimi hatırlayın.

04:32.557 --> 04:34.157
Bir şeyleri bir ad alanında

04:34.157 --> 04:37.580
dışa aktararak ve ardından bu özel içe aktarma sözdizimini

04:37.580 --> 04:39.110
kullanarak ad alanlarını

04:39.110 --> 04:42.330
birden çok dosyaya bölebilirsiniz, ancak daha sonra

04:42.330 --> 04:45.230
bu içe aktarma ad alanından veya içe aktarılan

04:45.230 --> 04:48.250
dosyadan bir şey kullanmak isteyen şeyleri aynı

04:48.250 --> 04:51.797
ad alanına koymanız gerekir.

04:51.797 --> 04:55.050
Bu nedenle DD Interfaces belki de en iyi isim değildir.

04:55.050 --> 04:58.010
Belki de sadece App olarak isimlendirdik.

04:58.010 --> 04:59.740
Şimdi, burada uygulama olarak adlandırırsak,

04:59.740 --> 05:01.670
uygulamaya gidebiliriz. 'yi seçin ve burada

05:01.670 --> 05:04.180
aynı isimde bir isim alanı oluşturun,

05:04.180 --> 05:05.630
isim alanı App.

05:05.630 --> 05:06.890
Ve şimdi, buradaki

05:06.890 --> 05:10.750
her şeyi bu ad alanına koyalım ve şimdi hatanın gittiğini

05:10.750 --> 05:12.610
görüyorsunuz Sağ tarafta kırmızı

05:12.610 --> 05:14.300
noktalar yok.

05:14.300 --> 05:15.513
Ancak, bunu kaydedersem,

05:15.513 --> 05:17.850
burada hala hata alacağım.

05:17.850 --> 05:22.850
Örneğin, o bitmiş proje listesi kullanılmaz.

05:25.010 --> 05:26.300
Bu doğru, ben bunu

05:26.300 --> 05:28.210
kullanmıyorum.

05:28.210 --> 05:29.600
Benim de buna ihtiyacım yok,

05:29.600 --> 05:32.610
dolayısıyla bu kavramları buradan kaldırabiliriz.

05:32.610 --> 05:35.190
Bununla birlikte, eğer bunu kaydettiysek,

05:35.190 --> 05:38.040
şimdi hatasız derlendi.

05:38.040 --> 05:39.880
Asıl soru, bu derlemenin

05:39.880 --> 05:41.920
sonucunun ne olduğu?

05:41.920 --> 05:44.260
Şu anda bir ya da iki dosyamız var mı?

05:44.260 --> 05:46.170
Disk klasörüne bir göz atalım ve

05:46.170 --> 05:49.380
orada bir App JS dosyası ve ardından burada bazı kodlar

05:49.380 --> 05:50.780
ve bir sürükle ve bırak

05:50.780 --> 05:53.980
arayüz JS dosyası olduğunu görüyorsunuz.

05:53.980 --> 05:56.690
Sonuç olarak elimizde iki dosya var.

05:56.690 --> 05:59.500
Şimdi dragon drop arayüz dosyası aslında oldukça

05:59.500 --> 06:00.830
boştur çünkü arayüzlerin

06:00.830 --> 06:04.360
temelde hiçbir şeye derlenmediğini öğrendiniz.

06:04.360 --> 06:07.300
Bir arayüz için JavaScript eşdeğeri yoktur.

06:07.300 --> 06:09.270
Bu saf bir TypeScript özelliğidir.

06:09.270 --> 06:12.370
Bu yüzden onu kullanmak ve öğrendiğimiz tüm tip iyileştirmelerini

06:12.370 --> 06:15.509
elde etmek için TypeScript sözdizimiyle içe aktarabiliriz,

06:15.509 --> 06:17.300
ancak üretimde ayrı bir dosyada olup

06:17.300 --> 06:20.060
olmaması önemli değildir.

06:20.060 --> 06:21.840
Bu durumda soru, üretimde

06:21.840 --> 06:26.380
var olan ve JavaScript'te de var olan bir şeyi şimdi ayrı

06:26.380 --> 06:30.000
bir dosyaya koyarsak ne olacağıdır.

06:30.000 --> 06:33.373
Örneğin, burada enum ve proje sınıfı var mı,

06:35.520 --> 06:36.470
her ikisini de

06:36.470 --> 06:37.610
alacağım, yeni

06:37.610 --> 06:41.410
bir dosya oluşturacağım, project dash model TS ve

06:41.410 --> 06:46.040
proje durumu enum ve proje sınıfımı buraya koyacağım.

06:46.040 --> 06:47.420
Şimdi daha önce olduğu gibi

06:47.420 --> 06:49.070
buraya bir ad alanı ekleyebiliriz,

06:49.070 --> 06:50.590
ad App olmalıdır, bu nedenle

06:50.590 --> 06:51.790
daha sonra kullanmak

06:51.790 --> 06:54.020
istediğimiz ad alanı yapılmalıdır ve bu

06:54.020 --> 06:57.340
özellikleri oraya aktarmalıyız, böylece bunları aynı ad

06:57.340 --> 07:00.440
alanındaki diğer dosyalarda da kullanabiliriz, ancak

07:00.440 --> 07:02.640
başka bir dosyada da.

07:02.640 --> 07:03.980
Şimdi uygulamaya geri döndüm. ts, bu ikinci

07:03.980 --> 07:05.900
dosyayı içe aktarmamız gerekiyor.

07:05.900 --> 07:07.890
Bu yüzden bu içe aktarma işlemini ve

07:07.890 --> 07:11.515
tüm içe aktarma projesi dash model ts'lerini çoğaltacağım.

07:11.515 --> 07:13.800
Eğer bunu kaydettiysem ve şimdi derlendiyse

07:13.800 --> 07:16.610
ve bir proje modeli JavaScript dosyası görüyoruz.

07:16.610 --> 07:18.184
Ve orada, bazı kodlar

07:18.184 --> 07:19.490
görüyoruz.

07:19.490 --> 07:22.770
Asıl soru şu: Uygulamamız şimdi çalışıyor mu?

07:22.770 --> 07:24.620
Bunun için, yeniden yükleyelim

07:25.480 --> 07:27.587
ve buraya bir proje eklemeyi deneyelim

07:27.587 --> 07:29.070
ve görüyorsunuz, bir hata

07:29.070 --> 07:29.903
alıyoruz.

07:29.903 --> 07:33.183
Undefined'ın active özelliği okunamıyor.

07:34.120 --> 07:36.090
Bunun nedeni basitçe dosyalarımızın

07:36.090 --> 07:38.854
bağımsız olarak derlenmesidir.

07:38.854 --> 07:41.410
İsim alanları dediğim gibi TypeScript dünyasında

07:41.410 --> 07:44.640
mevcuttur, bunun için JavaScript eşdeğeri yoktur.

07:44.640 --> 07:47.430
Burada karşılaştığımız sorun şu: TypeScript dünyasında

07:47.430 --> 07:48.263
her şey harika çünkü

07:48.263 --> 07:51.610
TypeScript ihtiyacımız olan her şeyi bulabiliyor.

07:51.610 --> 07:52.800
Örneğin, burada

07:52.800 --> 07:54.420
proje dediğimde, proje

07:54.420 --> 07:56.310
durumu sınıfında proje türüne

07:56.310 --> 07:58.130
atıfta bulunduğumda, bu

07:58.130 --> 07:59.310
proje türü, bu proje

07:59.310 --> 08:00.610
sınıfı proje modelinde

08:00.610 --> 08:02.840
tanımlanır.

08:02.840 --> 08:06.020
Şimdi TypeScript, bu modeli içe aktardığımız için tamamlanmadığından

08:06.020 --> 08:07.570
şikayet etmez, ancak burada

08:07.570 --> 08:10.250
içe aktarma gerçekten sadece TypeScript'e JavaScript'e

08:10.250 --> 08:15.810
derlendiğinde bu türü nerede bulacağını söylediğimiz anlamına gelir, bağlantı kesilmesi temelde

08:15.810 --> 08:18.150
yok edilir.

08:18.150 --> 08:20.840
Dolayısıyla, JavaScript kodu çalıştırıldığında

08:20.840 --> 08:23.230
ve daha sonra projeyi örnekleyerek yeni

08:23.230 --> 08:25.130
bir proje oluşturmaya çalıştığımızda,

08:25.130 --> 08:27.430
JavaScript bu proje sınıfını veya yapıcı

08:27.430 --> 08:29.610
işlevini bulamaz.

08:29.610 --> 08:32.980
Bu nedenle, kopukluğu devam ettirdiğimizden emin olmalıyız.

08:32.980 --> 08:35.420
Bunun için TS'ye gidebiliriz (mırıldanır)

08:35.420 --> 08:39.640
ve orada bu dosya seçeneğini ayarlayabiliriz.

08:39.640 --> 08:40.740
Bunu yorumlayabiliriz

08:40.740 --> 08:43.010
ve out dosyasının arkasındaki fikir,

08:43.010 --> 08:45.540
TypeScript'e ad alanlarını birleştirmesi

08:45.540 --> 08:48.620
gerektiğini söylemenizdir.

08:48.620 --> 08:49.670
Dolayısıyla, derleme

08:49.670 --> 08:51.740
sırasında sahip olduğu bu referanslar,

08:51.740 --> 08:53.950
birden fazla JavaScript dosyasını derlemek

08:53.950 --> 08:56.970
yerine tek bir JavaScript dosyasına dönüştürülür.

08:56.970 --> 08:59.210
Yani burada out dosyası için disk klasöründe

08:59.210 --> 09:02.350
belki bundle adını verdiğimiz bir dosya olmasını istediğimizi

09:02.350 --> 09:04.770
söyleyebiliriz. js Ve bunu yapıp kaydedersek,

09:05.630 --> 09:07.050
aslında burada bir hata

09:07.050 --> 09:08.700
alırız.

09:09.650 --> 09:10.710
Out dosyasının yanında

09:12.300 --> 09:14.410
yalnızca AMD ve sistem modüllerinin

09:14.410 --> 09:17.250
desteklendiğine dair bir hata alacağız.

09:17.250 --> 09:19.540
Şimdi, burada her şeyi anlamamıza gerek yok

09:19.540 --> 09:23.160
Temel olarak, farklı JavaScript dosyalarını tarihsel nedenlerle ve

09:23.160 --> 09:26.120
nasıl geliştirildiği için tek bir dosyaya yüklemenin veya

09:26.120 --> 09:28.770
paketlemenin farklı yolları vardır ve isterseniz

09:28.770 --> 09:31.250
ekli bir kaynakta bu farklı paketlenmiş türler

09:31.250 --> 09:33.700
hakkında daha fazla bilgi edinebilirsiniz, ancak

09:33.700 --> 09:35.340
buna gerek yoktur.

09:35.340 --> 09:36.800
Yani temel olarak burada yapmamız

09:36.800 --> 09:38.120
gereken şey, burada zaten

09:38.120 --> 09:40.470
bir hata olarak vurgulanan modülü ortak JS'ye

09:40.470 --> 09:41.598
değil, örneğin AMD'ye

09:41.598 --> 09:43.943
ayarlamamız gerekiyor.

09:45.400 --> 09:47.700
Bunu yaparsak, burada hala şikayet etmesine

09:47.700 --> 09:50.010
rağmen sorunsuz bir şekilde derlenir, ancak

09:50.010 --> 09:52.140
bunu değiştirdiğimi algılamadı ve şimdi

09:52.140 --> 09:53.860
olan şey aslında dist'te yeni bir

09:53.860 --> 09:56.570
bundle JS dosyası olmasıdır.

09:56.570 --> 10:00.310
Disk klasöründeki tüm JavaScript dosyalarını kaldırırsam

10:00.310 --> 10:04.680
ve TSC dash işlemimi yeniden başlatırsam, derleyicinin yalnızca

10:04.680 --> 10:05.580
bu paket JS dosyasının

10:05.580 --> 10:08.600
oluşturulduğunu görürsünüz.

10:08.600 --> 10:11.530
Bu dosya derlenmiş ve çevrilmiş sürümdeki

10:11.530 --> 10:13.250
tüm kodumuzu tutacak ve

10:13.250 --> 10:15.400
bu nedenle şimdi dizin HTML'sinde,

10:15.400 --> 10:20.300
App JS yerine bundle JS'yi buraya aktarmamız gerekiyor.

10:20.300 --> 10:23.610
Bunu yapar ve burayı yeniden yüklersek, her şeyi sürükle ve

10:23.610 --> 10:25.830
bırak yöntemiyle kullanabileceğimiz

10:25.830 --> 10:28.260
çalışan bir uygulamaya sahip oluruz çünkü

10:28.260 --> 10:30.410
artık hepsi tek bir dosyada, ancak yalnızca

10:30.410 --> 10:32.661
nihai sonuçta yer almaktadır.

10:32.661 --> 10:34.230
Geliştirme sırasında,

10:34.230 --> 10:36.260
burada bu isim alanlarına sahibiz,

10:36.260 --> 10:39.030
bu da doğru yönde atılmış bir adım çünkü zaten

10:39.030 --> 10:41.970
biraz daha yönetilebilir.

10:41.970 --> 10:44.350
Şimdi TS modüllerinin ortalama bölme

10:44.350 --> 10:47.250
seçeneğine bakmadan önce bunu daha da fazla dosyaya

10:47.250 --> 10:48.283
bölelim.
