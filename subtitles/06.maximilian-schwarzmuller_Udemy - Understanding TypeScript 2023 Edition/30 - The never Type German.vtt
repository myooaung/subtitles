WEBVTT

00:02.220 --> 00:03.760
Kursleiter: Der letzte interessante

00:03.760 --> 00:07.490
Typ, den ich in diesem Modul zeigen möchte, ist der Typ "Nie".

00:07.490 --> 00:10.660
Jetzt haben wir eine Funktion gesehen, die void zurückgibt.

00:10.660 --> 00:13.058
Das bringt also nie etwas.

00:13.058 --> 00:17.380
Never ist ein weiterer Typ, den Funktionen zurückgeben können.

00:17.380 --> 00:19.240
Und das mag seltsam klingen.

00:19.240 --> 00:21.110
Schauen wir uns einmal an, wie das funktioniert.

00:21.110 --> 00:24.662
Nehmen wir an, wir haben eine Funktion generateError.

00:24.662 --> 00:28.280
Hier erwarte ich eine Meldung, die eine Zeichenkette ist, und

00:28.280 --> 00:31.610
vielleicht einen Fehlercode, der eine Zahl sein kann.

00:31.610 --> 00:33.700
Innerhalb dieser Funktion, sagen wir,

00:33.700 --> 00:35.130
wir werfen einen Fehler.

00:35.130 --> 00:37.760
Es sollte sich also im Wesentlichen um eine Hilfsfunktion

00:37.760 --> 00:41.500
handeln, die Fehlerobjekte erzeugt und diese auswirft.

00:41.500 --> 00:42.990
Hier könnten wir also ein Objekt werfen,

00:42.990 --> 00:44.380
was wir in JavaScript tun können.

00:44.380 --> 00:47.366
Wir können ein beliebiges Objekt oder einen beliebigen Wert

00:47.366 --> 00:49.930
als Fehler auslösen, und das sollte eine Message-Eigenschaft

00:49.930 --> 00:53.990
haben, in der ich den Wert meines Message-Arguments hier speichere.

00:53.990 --> 00:56.390
Und ich möchte eine Fehlercode-Eigenschaft haben,

00:56.390 --> 00:59.417
sagen wir mal, das Wort löschen, das Code-Argument in .

01:00.330 --> 01:02.390
So ist es auch mit der ungültigen

01:02.390 --> 01:06.600
Funktion, und wir können diese zum Beispiel mit einem aufgetretenen

01:06.600 --> 01:09.640
Fehler und dem Code 500 aufrufen.

01:09.640 --> 01:12.213
Wenn wir das tun und diese Datei hier kompilieren,

01:14.120 --> 01:17.080
sehen wir, dass wir nach dem Neuladen unseren Fehler bekommen,

01:17.080 --> 01:19.150
also einen Fehler hier.

01:19.150 --> 01:21.670
Und das mag ziemlich abstrakt klingen, ist es aber

01:21.670 --> 01:22.850
eigentlich nicht.

01:22.850 --> 01:24.640
Utility-Funktionen wie diese sind

01:24.640 --> 01:27.850
ein ziemlicher Standard in größeren Anwendungen, bei denen man

01:27.850 --> 01:30.270
nicht manuell einen Fehler an 10 verschiedenen Stellen

01:30.270 --> 01:32.540
in der Anwendung auslösen möchte, und bei denen

01:32.540 --> 01:35.380
man auf eine bequeme Funktion zugreifen möchte, die das Fehlerobjekt

01:35.380 --> 01:37.450
für einen erstellt und es vielleicht auch

01:37.450 --> 01:39.350
sofort auslöst, so dass man diese Funktion

01:39.350 --> 01:42.300
mit verschiedenen Eingaben aufrufen kann, aber immer einen

01:42.300 --> 01:44.690
Fehler auslöst.

01:44.690 --> 01:47.010
Das Interessante an dieser Funktion ist nun, dass

01:47.010 --> 01:49.048
sie nicht einfach leer zurückgibt.

01:49.048 --> 01:52.385
Ich kann tatsächlich angeben, dass sie void zurückgibt,

01:52.385 --> 01:54.545
weil sie natürlich nichts zurückgibt,

01:54.545 --> 01:58.030
aber eigentlich gibt sie nicht nur nichts zurück, wenn

01:58.030 --> 02:02.630
wir ganz ehrlich sind, gibt diese Funktion nie etwas zurück.

02:02.630 --> 02:05.518
Diese Funktion liefert nie einen Rückgabewert.

02:05.518 --> 02:08.860
Wenn ich versuche, den Rückgabewert hier in einem Konsolenprotokoll

02:08.860 --> 02:11.193
wiederherzustellen, und ich dann meinen

02:12.040 --> 02:16.240
Code in diesem Execute kompiliere, sehen wir, dass hier kein undefinierter

02:16.240 --> 02:19.630
Wert protokolliert wird, denn da ein Fehler ausgelöst wird,

02:19.630 --> 02:22.220
stürzt unser Skript im Wesentlichen ab, könnte

02:22.220 --> 02:25.330
man sagen.

02:25.330 --> 02:27.080
Es annulliert unser Drehbuch.

02:27.080 --> 02:30.290
Und das wird bei dieser Funktion immer der Fall sein.

02:30.290 --> 02:32.210
Natürlich können wir sie in try catch verpacken,

02:32.210 --> 02:34.260
so dass wir in diesem Skript trotzdem weitermachen

02:34.260 --> 02:37.620
können, aber diese Funktion erzeugt im Grunde genommen nie einen Wert.

02:37.620 --> 02:41.060
Diese Funktion bringt das Skript oder diesen Teil

02:41.060 --> 02:42.910
des Skripts immer zum Absturz,

02:42.910 --> 02:44.720
wenn Sie try catch verwenden,

02:44.720 --> 02:47.910
und gibt daher nie etwas zurück.

02:47.910 --> 02:50.400
Daher ist der Rückgabetyp dieser

02:50.400 --> 02:54.483
Funktion nicht nur void, sondern auch never.

02:55.710 --> 02:56.700
Interessant ist, dass

02:56.700 --> 02:59.060
der abgeleitete Typ void ist, wenn man mit dem Mauszeiger

02:59.060 --> 03:01.680
darüber fährt, ohne never zuzuweisen.

03:01.680 --> 03:05.410
Alls weil never ein neuerer Typ ist, gibt es ihn schon seit einiger

03:05.410 --> 03:07.060
Zeit, aber er wurde nicht in die

03:07.060 --> 03:10.000
ersten Versionen von TypeScript eingebaut, und daher

03:10.000 --> 03:12.620
wird void typischerweise angenommen, und es

03:12.620 --> 03:15.417
ist nicht schlimm, es dabei zu belassen.

03:15.417 --> 03:17.740
Sie können aber auch sehr deutlich sein

03:17.740 --> 03:21.470
und explizit never als Rückgabetyp festlegen, um klarzustellen,

03:21.470 --> 03:24.490
dass dies nie etwas zurückgibt.

03:24.490 --> 03:26.770
Aus Sicht der Codequalität könnte dies

03:26.770 --> 03:29.560
Ihre Absichten deutlicher machen und unseren Entwicklern,

03:29.560 --> 03:30.680
die Ihren Code lesen,

03:30.680 --> 03:32.330
klar machen, dass diese Funktion

03:32.330 --> 03:35.850
nie etwas zurückgeben soll und Ihr Skript oder diesen Teil des

03:35.850 --> 03:40.954
Skripts im Wesentlichen zum Absturz bringen oder zerstören soll.

03:40.954 --> 03:43.890
Eine andere Funktion, die niemals zurückkehren würde,

03:43.890 --> 03:47.190
wäre übrigens eine Funktion mit einer Endlosschleife.

03:47.190 --> 03:49.370
Wenn wir also while (true) dort drin haben,

03:49.370 --> 03:51.060
entsteht eine Endlosschleife,

03:51.060 --> 03:52.790
und das wäre dann auch eine Funktion,

03:52.790 --> 03:54.410
die nie zurückkehrt.

03:54.410 --> 03:56.070
Die Fehlerfunktion hier, oder die Funktion,

03:56.070 --> 03:58.852
die einen eingefrorenen Fehler erzeugt, ist wahrscheinlich

03:58.852 --> 04:01.305
der häufigere Anwendungsfall, obwohl.

04:01.305 --> 04:04.500
Also nie, auch ein interessanter Typ, den man

04:04.500 --> 04:06.230
bei Funktionen für Fälle

04:06.230 --> 04:08.553
wie diesen hier verwenden kann.
