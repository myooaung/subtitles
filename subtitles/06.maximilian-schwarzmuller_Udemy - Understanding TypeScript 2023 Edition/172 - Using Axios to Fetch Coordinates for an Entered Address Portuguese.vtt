WEBVTT

00:02.390 --> 00:04.530
Instrutor: Agora é possível enviar

00:04.530 --> 00:06.890
um pedido sem um pacote de terceiros.

00:06.890 --> 00:10.140
Em JavaScript moderno em navegadores modernos,

00:10.140 --> 00:11.910
você tem que ir buscar API.

00:11.910 --> 00:13.620
Isto é incorporado em navegadores,

00:13.620 --> 00:16.710
é uma função disponível globalmente e você pode usá-la

00:16.710 --> 00:19.600
para enviar solicitações para URLs.

00:19.600 --> 00:22.450
Agora não há nada que fale contra esta API, além

00:22.450 --> 00:24.870
do fato de que a manipulação de erros pode

00:24.870 --> 00:27.210
ser um pouco desajeitada com ela.

00:27.210 --> 00:29.250
Mas eu também quero praticar o uso

00:29.250 --> 00:31.123
de bibliotecas de terceiros.

00:31.960 --> 00:36.070
Portanto, utilizaremos o muito popular pacote de axiomas.

00:36.070 --> 00:38.510
Este é um pacote que você pode usar em JavaScript

00:38.510 --> 00:43.510
e, portanto, também em TypeScript para enviar solicitações HTTP.

00:43.880 --> 00:47.263
Portanto, só precisamos instalar axiomas para começar a usá-lo.

00:48.100 --> 00:51.080
Para isto em nosso projeto onde podemos usar NPM

00:51.080 --> 00:54.150
para gerenciar dependências, podemos executar

00:54.150 --> 00:57.620
npm install, dash, dash save axios exatamente como este

00:57.620 --> 01:00.520
e isto agora instalará o pacote de axios.

01:00.520 --> 01:04.750
Com isto instalado, agora podemos importar axios aqui,

01:04.750 --> 01:07.390
importar axios de axios, e você verá

01:07.390 --> 01:09.170
algo interessante.

01:09.170 --> 01:12.090
Se eu agora começo a usar isto e digito um ponto aqui,

01:12.090 --> 01:13.990
recebo o auto-completamento.

01:13.990 --> 01:16.290
E, por exemplo, você tem aqui um método get

01:16.290 --> 01:18.523
que enviará um pedido get para uma URL.

01:19.850 --> 01:23.150
Portanto, aqui nós realmente temos suporte TypeScript incorporado.

01:23.150 --> 01:25.640
E se formos aos módulos de nós e dermos

01:25.640 --> 01:29.670
uma olhada no pacote de axiomas, aqui está ele.

01:29.670 --> 01:33.970
Você verá que lá dentro, há um índice. arquivo dts.

01:33.970 --> 01:38.970
Assim, os autores da biblioteca de axiomas já agruparam sua biblioteca

01:39.430 --> 01:43.750
juntamente com tal pacote de tradução TypeScript.

01:43.750 --> 01:47.440
Aí, tudo é explicado em TypeScript.

01:47.440 --> 01:50.120
Este pacote ou este arquivo aqui basicamente explica

01:50.120 --> 01:53.660
para TypeScript o que esta biblioteca JavaScript é capaz de fazer

01:53.660 --> 01:55.600
e quais tipos ela usa.

01:55.600 --> 01:59.100
Agora algumas bibliotecas fazem isso e os axiomas são um deles.

01:59.100 --> 02:02.070
Você pode dizer rapidamente se uma biblioteca faz isto ou não,

02:02.070 --> 02:03.420
se você começar a usá-la.

02:03.420 --> 02:05.520
Se você não tiver suporte de autocompletar

02:05.520 --> 02:07.930
e tiver muitos erros de compilação, você provavelmente

02:07.930 --> 02:10.750
precisará instalar tipos extras.

02:10.750 --> 02:12.970
Se você receber um bom suporte como o que fazemos

02:12.970 --> 02:16.120
aqui e depois disso não receberá erros de compilação, bem,

02:16.120 --> 02:18.140
então você já tem uma biblioteca com traduções

02:18.140 --> 02:20.170
do tipo embutidas.

02:20.170 --> 02:23.120
E, portanto, você não precisa instalar nenhum tipo extra.

02:23.120 --> 02:26.240
É bom saber e aqui temos um grande exemplo.

02:26.240 --> 02:27.800
Portanto, como construímos um suporte,

02:27.800 --> 02:30.410
podemos começar a usar o acesso imediatamente.

02:30.410 --> 02:34.350
E eu quero enviar um pedido HTTP para esta URL agora.

02:34.350 --> 02:37.980
Portanto, vamos copiar esta URL e vamos inseri-la aqui.

02:37.980 --> 02:40.220
E eu o introduzirei entre as barras

02:40.220 --> 02:42.440
invertidas para criar um modelo literal,

02:42.440 --> 02:45.880
para que eles possam facilmente trocar partes desta corda

02:45.880 --> 02:49.050
por dinâmicas por outros valores.

02:49.050 --> 02:51.730
Portanto, vamos colar nessa seqüência, é bastante

02:51.730 --> 02:55.460
longa e vamos começar substituindo sua chave API no final por nossa

02:55.460 --> 02:59.210
chave API do Google, que armazenamos nesta constante.

02:59.210 --> 03:01.690
Para isso, já que se trata de um modelo literal,

03:01.690 --> 03:04.110
podemos adicionar um sinal de dólar, um aparelho

03:04.110 --> 03:09.110
de atadura, e depois apontar para a chave API do Google para usar esta constante.

03:10.820 --> 03:13.240
Além disso, vamos trocar este endereço.

03:13.240 --> 03:15.500
Aqui temos um endereço falso inserido

03:15.500 --> 03:17.130
e, claro, lá quero usar o endereço

03:17.130 --> 03:19.300
que o usuário inseriu.

03:19.300 --> 03:22.540
Agora apenas uma nota importante, este endereço, naturalmente,

03:22.540 --> 03:24.910
é exatamente o texto que o usuário digitou e que

03:24.910 --> 03:27.560
eles ofereceram pode conter caracteres especiais,

03:27.560 --> 03:30.650
espaço em branco, vírgulas, e muito mais.

03:30.650 --> 03:32.250
E nem todos esses caracteres

03:32.250 --> 03:35.580
e símbolos são suportados em URLs.

03:35.580 --> 03:37.750
Portanto, precisamos converter esta string

03:37.750 --> 03:40.550
inserida em uma string compatível com a URL.

03:40.550 --> 03:43.810
E, felizmente, o TypeScript e o JavaScript

03:43.810 --> 03:46.940
têm uma função específica que nos ajuda

03:46.940 --> 03:50.460
com isso, a função de codificação URI.

03:50.460 --> 03:53.020
Podemos chamar isso e passar uma string para

03:53.020 --> 03:54.770
ele e isso irá converter essa string

03:54.770 --> 03:57.460
para uma string compatível com o URL.

03:57.460 --> 03:59.845
Com isso, obtivemos a URL finalizada

03:59.845 --> 04:01.600
para a qual podemos enviar

04:01.600 --> 04:04.900
o pedido para recuperar nossas coordenadas.

04:04.900 --> 04:07.390
Agora, obter nos dá uma promessa porque, é

04:07.390 --> 04:10.620
claro, enviar tal pedido como uma tarefa assíncrona.

04:10.620 --> 04:13.430
E aí temos um log se isto for bem sucedido

04:13.430 --> 04:15.690
ou pegue se tivermos um erro técnico

04:15.690 --> 04:18.620
ou um código de resposta a erro.

04:18.620 --> 04:21.560
Por isso, aqui nós vamos registrar os erros que possamos estar recebendo

04:21.560 --> 04:24.710
neste momento, porque normalmente devemos ser bem sucedidos.

04:24.710 --> 04:27.820
E, portanto, aqui, eu espero minha resposta

04:27.820 --> 04:32.400
no bloco de então e também quero registrar esta resposta então.

04:32.400 --> 04:35.820
Então, agora com isso, eu diria, vamos ver o que isto nos dá.

04:35.820 --> 04:39.720
Vamos reexecutar o NPM para retomar esse processo de webpack e começar

04:39.720 --> 04:40.953
a construir isso.

04:42.120 --> 04:43.790
E vamos voltar à nossa aplicação

04:43.790 --> 04:47.220
e entrar em um lugar aqui como a Sexta Avenida.

04:47.220 --> 04:50.090
Se eu clicar em Search Address, você verá que depois de um tempo

04:50.090 --> 04:51.480
você terá uma saída aqui.

04:51.480 --> 04:53.660
E aí você deve ter um código de status de 200,

04:53.660 --> 04:56.120
o que significa que o pedido foi bem sucedido.

04:56.120 --> 04:59.090
E você tem um campo de dados que contém os dados com

04:59.090 --> 05:01.240
os quais o servidor responde.

05:01.240 --> 05:03.890
Esse campo de dados tem um campo de resultados

05:03.890 --> 05:06.570
e ali temos uma matriz, como você pode dizer.

05:06.570 --> 05:10.690
Nessa matriz, temos um par de itens, o número varia.

05:10.690 --> 05:13.770
E estes são basicamente os resultados que o Google encontrou.

05:13.770 --> 05:16.740
E o primeiro resultado é normalmente o melhor.

05:16.740 --> 05:18.790
Portanto, se você tiver uma olhada nisso, vemos,

05:18.790 --> 05:20.460
por exemplo, o endereço formatado.

05:20.460 --> 05:22.520
Portanto, o endereço que o Google encontrou

05:22.520 --> 05:23.790
para este endereço que inserimos

05:23.790 --> 05:26.570
é um pouco mais completo do que o que inserimos.

05:26.570 --> 05:29.300
E temos aqui a chave da geometria.

05:29.300 --> 05:31.880
E se expandirmos isto, vemos que, por sua vez,

05:31.880 --> 05:35.240
temos uma chave de localização e este finalmente é um objeto

05:35.240 --> 05:37.540
com as coordenadas que nos interessam,

05:37.540 --> 05:39.700
uma latitude e uma longitude.

05:39.700 --> 05:43.000
Portanto, no final, temos que perfurar os dados, os resultados

05:43.000 --> 05:47.390
e, em seguida, o primeiro resultado, a geometria, a localização e teremos um

05:47.390 --> 05:50.030
objeto com uma latitude e longitude.

05:50.030 --> 05:52.840
E poderemos então renderizar esta latitude

05:52.840 --> 05:55.240
e longitude em um mapa mais tarde.

05:55.240 --> 05:57.430
Portanto, por enquanto, vamos apenas

05:57.430 --> 05:59.360
extrair isto e vamos obter nossas

05:59.360 --> 06:04.360
coordenadas acessando os resultados dos pontos de dados de resposta.

06:04.600 --> 06:09.600
E aí está a primeira localização do ponto geométrico do resultado, portanto,

06:11.200 --> 06:13.093
realmente perfurando isto.

06:15.130 --> 06:16.880
Agora o que você vai notar, é que

06:16.880 --> 06:19.850
embora o TypeScript não reclame aqui, nós também

06:19.850 --> 06:23.280
não temos um bom suporte de TypeScript aqui, certo?

06:23.280 --> 06:25.740
Se eu digitar um ponto aqui, não está sugerindo que

06:25.740 --> 06:27.620
haja uma propriedade de resultados.

06:27.620 --> 06:30.350
E de fato, eu poderia tentar acessar qualquer

06:30.350 --> 06:33.840
coisa aqui, mesmo algo que não exista sobre a resposta e que

06:33.840 --> 06:34.820
faça sentido.

06:34.820 --> 06:38.010
Como o TypeScript saberia o que estará na resposta de qualquer

06:38.010 --> 06:40.920
URL para a qual estou enviando um pedido?

06:40.920 --> 06:42.810
O TypeScript não vai adiante e envia

06:42.810 --> 06:44.970
o pedido durante o desenvolvimento para

06:44.970 --> 06:46.510
descobrir o que há lá dentro,

06:46.510 --> 06:49.170
o que também não seria tão bom assim.

06:49.170 --> 06:51.400
Mas podemos dizer ao TypeScript

06:51.400 --> 06:53.950
o que esperamos na resposta, porque este

06:53.950 --> 06:58.950
método get é realmente um método genérico e há qualquer coisa aqui, que é na

06:59.040 --> 07:02.830
verdade o tipo de resposta que esperamos obter.

07:02.830 --> 07:06.880
Portanto, aqui, posso acrescentar meu tipo de resposta

07:06.880 --> 07:11.270
e posso dizer ao TypeScript que o que eu espero é um objeto

07:11.270 --> 07:15.260
que tenha uma chave de resultado, que por sua vez, é um

07:15.260 --> 07:18.330
conjunto cheio de objetos, onde cada objeto

07:18.330 --> 07:22.170
tem uma chave de geometria, que por sua vez é um objeto,

07:22.170 --> 07:24.330
que tem uma chave de localização,

07:24.330 --> 07:28.160
que por sua vez é um objeto, que tem uma latitude, que

07:28.160 --> 07:33.510
é um número, e uma longitude, que é um número.

07:33.510 --> 07:36.030
É definitivamente um tipo bastante complexo.

07:36.030 --> 07:39.400
Mas com isso, se digitarmos um ponto aqui, eu recebo auto-completamento

07:39.400 --> 07:42.220
e o TypeScript entende o que estou acessando aqui.

07:42.220 --> 07:44.860
E, claro, também podemos tirar este tipo daqui e criar

07:44.860 --> 07:46.620
nosso próprio tipo de pseudônimo.

07:46.620 --> 07:50.497
Talvez aqui, a resposta de geocodificação do Google.

07:53.220 --> 07:55.380
Esse seria meu tipo personalizado aqui,

07:55.380 --> 07:58.420
e então eu posso dizer ao TypeScript que aqui eu espero

07:58.420 --> 08:01.540
obter aquela resposta de geocodificação do Google.

08:01.540 --> 08:03.900
Agora, é claro, na verdade, a resposta contém

08:03.900 --> 08:07.020
mais do que apenas a matriz de resultados, ela também tem um

08:07.020 --> 08:09.460
código de status e também tem vários outros campos

08:09.460 --> 08:13.040
em cada item da matriz de resultados, então a geometria.

08:13.040 --> 08:17.030
Agora, é claro, você pode simplesmente adicionar todos estes campos ao

08:18.210 --> 08:21.330
seu tipo personalizado aqui, mas aqui eu realmente só quero

08:21.330 --> 08:25.640
me concentrar nos valores nos quais estou ativamente interessado.

08:25.640 --> 08:27.360
E, portanto, há realmente um outro

08:27.360 --> 08:30.900
campo que vou acrescentar, e esse é o status ao lado dos resultados.

08:30.900 --> 08:34.520
Portanto, aqui mesmo no nível superior, temos status e

08:34.520 --> 08:35.500
isso será um fio

08:35.500 --> 08:38.390
que nos dirá se o Google teve ou não sucesso.

08:38.390 --> 08:41.810
E o status estará realmente bem ou um

08:41.810 --> 08:44.010
par de outros valores.

08:44.010 --> 08:46.910
Esta é basicamente uma mensagem de status com a qual o

08:46.910 --> 08:50.020
Google responde para nos dizer se conseguiu ou não obter

08:50.020 --> 08:51.890
coordenadas para este endereço.

08:51.890 --> 08:54.000
E, é claro, nos documentos oficiais podemos

08:54.000 --> 08:57.280
saber que tipo de respostas podemos obter aqui.

08:57.280 --> 08:58.900
Se você rolar um pouco para baixo

08:58.900 --> 09:01.070
e clicar em entender a resposta, você aprende

09:01.070 --> 09:04.240
o que está dentro da resposta que você recebe de volta e, portanto,

09:04.240 --> 09:07.000
clica em respostas geocodificadas.

09:07.000 --> 09:08.580
E então, nos códigos de status, aprendemos

09:08.580 --> 09:11.090
sobre os códigos de status disponíveis.

09:11.090 --> 09:15.090
Por exemplo, todos nós obtivemos zero resultados se nada foi encontrado.

09:15.090 --> 09:16.850
Temos também alguns outros códigos, mas

09:16.850 --> 09:19.223
aqui eu realmente só me importo com estes dois.

09:20.200 --> 09:23.310
Então eu digo ao TypeScript que aqui, eu recebo um código de status

09:23.310 --> 09:24.890
que é um desses dois valores.

09:24.890 --> 09:27.480
Agora, mais uma vez, pode ter também um valor

09:27.480 --> 09:29.830
numérico, mas isto é bom para mim aqui.

09:29.830 --> 09:31.640
Como eu disse, é claro que você pode escrever

09:31.640 --> 09:33.700
isto de uma maneira mais completa.

09:33.700 --> 09:36.230
Agora com isso adicionado, lá em baixo no bloco de

09:36.230 --> 09:41.230
então, podemos verificar se o status do ponto de dados de resposta não está bem, o que significa que

09:41.580 --> 09:44.120
algo deu errado e, nesse caso, podemos lançar um erro

09:44.120 --> 09:46.710
aqui e, portanto, acabaremos no bloco de captura onde

09:46.710 --> 09:48.090
poderíamos configurar algum

09:48.090 --> 09:49.810
tratamento de erros.

09:49.810 --> 09:54.280
Por isso, aqui lançaremos um erro que não poderia ser detectado.

09:54.280 --> 09:57.080
E então aqui no manipulador de erros para fazer algo,

09:57.080 --> 09:59.150
podemos lançar um alerta onde emitimos

09:59.150 --> 10:01.230
a mensagem de erro, pelo menos.

10:01.230 --> 10:04.660
Isto é, é claro, apenas um tratamento de erros muito básico.

10:04.660 --> 10:06.950
Caso contrário, se tivermos uma resposta de sucesso,

10:06.950 --> 10:09.910
buscamos nossas coordenadas aqui e agora podemos usar essas coordenadas

10:09.910 --> 10:12.113
para emiti-las em um mapa.
