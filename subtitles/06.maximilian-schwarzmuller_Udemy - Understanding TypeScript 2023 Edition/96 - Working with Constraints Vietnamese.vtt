WEBVTT

00:02.340 --> 00:04.100
Người tường thuật: Vì vậy, chúng tôi

00:04.100 --> 00:06.670
đã bắt đầu với khái quát và hy vọng rõ ràng TypeScript

00:06.670 --> 00:10.240
làm gì ở đây, chúng tôi chuyển một số thông tin bổ sung vào chức năng hợp nhất

00:10.240 --> 00:12.130
để chúng tôi có thể làm việc theo cách tốt

00:12.130 --> 00:14.370
hơn với kết quả của chức năng hợp nhất.

00:14.370 --> 00:16.540
Đó thường là những gì thuốc generic dành cho.

00:16.540 --> 00:19.890
Chúng cho phép bạn tiếp tục làm việc với dữ liệu của mình

00:19.890 --> 00:21.960
theo cách tối ưu TypeScript.

00:21.960 --> 00:23.820
Bây giờ, trong trường hợp này,

00:23.820 --> 00:25.810
ở đây, tuy nhiên, chúng ta sẽ gặp vấn

00:25.810 --> 00:28.570
đề nếu tôi đi vào, giả sử chỉ một số 30 ở đây.

00:28.570 --> 00:30.470
Tất nhiên, TypeScript hiện đưa ra một lỗi

00:30.470 --> 00:32.010
vì nó đã cố truy cập vào tuổi, nhưng

00:32.010 --> 00:33.870
việc truy cập vào tên sẽ hoạt động.

00:33.870 --> 00:37.100
Tuy nhiên, nếu chúng tôi lưu nó, nó sẽ biên dịch mà không có

00:37.100 --> 00:39.710
lỗi và nếu tôi in toàn bộ đối tượng đã hợp nhất, chúng

00:39.710 --> 00:41.610
tôi sẽ thấy những gì tôi nhận được chỉ

00:41.610 --> 00:43.910
là sở thích và tên trong đối tượng của tôi,

00:43.910 --> 00:46.570
điều này có ý nghĩa vì 30 là một số và khi chúng tôi

00:46.570 --> 00:48.010
vượt qua điều đó như một đối

00:48.010 --> 00:50.080
số thứ hai để gán đối tượng, mà cuối cùng

00:50.080 --> 00:51.920
chúng ta đang làm ở đây, thì điều này

00:51.920 --> 00:54.590
chỉ thất bại một cách âm thầm.

00:54.590 --> 00:57.860
JavaScript không gây ra lỗi, nó không phàn nàn.

00:57.860 --> 01:00.460
Nhưng tất nhiên, nó cũng không ghép 30 vào

01:00.460 --> 01:02.270
đối tượng vừa tạo, bạn thấy

01:02.270 --> 01:04.690
không có 30 trong đối tượng này.

01:04.690 --> 01:06.540
Bây giờ, JavaScript sẽ làm như vậy như thế nào?

01:06.540 --> 01:08.470
Bởi vì 30 không phải là một đối tượng,

01:08.470 --> 01:12.150
chỉ một đối tượng được gán mới có khả năng hợp nhất các đối tượng

01:12.150 --> 01:14.090
khác nhau với nhau.

01:14.090 --> 01:15.410
Vì vậy, những gì chúng ta cuối cùng muốn tiết kiệm?

01:15.410 --> 01:17.600
Chà, chúng tôi không quan tâm đến loại chính

01:17.600 --> 01:20.040
xác, chúng tôi không quan tâm đến cấu trúc chính

01:20.040 --> 01:22.980
xác của đối tượng mà bạn đang cung cấp ở đây cho U và T.

01:22.980 --> 01:26.600
Nhưng điều chúng ta quan tâm là cả hai tham số,

01:26.600 --> 01:31.370
cả hai loại T và U phải là bất kỳ loại đối tượng nào nhưng chúng

01:31.370 --> 01:34.420
phải luôn là một đối tượng.

01:34.420 --> 01:36.830
Và hiện tại, chúng tôi không nói điều đó.

01:36.830 --> 01:37.820
Hiện tại, chúng tôi chỉ nói

01:37.820 --> 01:40.110
rằng, chúng nên thuộc loại nào, tôi không quan tâm.

01:40.110 --> 01:41.750
Bây giờ thường xuyên, điều đó không ổn.

01:41.750 --> 01:45.060
Bạn muốn hạn chế các loại T và U ở đây, hãy giải quyết

01:45.060 --> 01:46.683
các loại chung của bạn.

01:47.830 --> 01:51.540
Bạn có thể làm điều đó với các ràng buộc kiểu.

01:51.540 --> 01:55.170
Đối với các loại chung, bạn có thể đặt các ràng buộc nhất định

01:55.170 --> 01:58.280
liên quan đến các loại mà loại chung của bạn có thể

01:58.280 --> 02:01.120
dựa vào và bạn thực hiện việc này với từ khóa mở

02:01.120 --> 02:05.150
rộng ở đây trong dấu ngoặc nhọn sau loại mà bạn muốn hạn chế.

02:05.150 --> 02:07.410
Vì vậy, ở đây chúng ta có thể nói đối tượng

02:07.410 --> 02:09.020
mở rộng và với điều đó tôi đang

02:09.020 --> 02:12.740
nói, loại T có thể là bất kỳ đối tượng nào với bất kỳ cấu trúc nào,

02:12.740 --> 02:15.340
nhưng nó phải là một đối tượng.

02:15.340 --> 02:17.480
Chúng ta có thể làm điều tương tự với U.

02:17.480 --> 02:19.040
Và nếu tôi làm điều đó, bạn

02:19.040 --> 02:21.820
sẽ thấy bây giờ tôi đã gặp lỗi ở đây trong IDE.

02:21.820 --> 02:23.980
Và nếu tôi cố gắng lưu nó, tôi

02:23.980 --> 02:26.150
cũng gặp lỗi trong trình biên

02:26.150 --> 02:28.640
dịch, vì đối số loại 30 ở đây không

02:28.640 --> 02:31.133
thể gán cho đối tượng loại.

02:32.080 --> 02:34.480
Vì vậy, tất nhiên, đó là hành vi mà chúng tôi muốn ở đây.

02:34.480 --> 02:38.190
Bây giờ chúng ta buộc phải truyền lại một đối tượng,

02:38.190 --> 02:39.940
rất tiếc, như thế này.

02:39.940 --> 02:41.990
Bây giờ chúng tôi buộc phải chuyển lại chức năng

02:41.990 --> 02:43.680
này và do đó chúng tôi cải thiện chức năng

02:43.680 --> 02:45.290
này vì giờ đây nó thực sự hoạt động.

02:45.290 --> 02:48.980
Và chúng tôi biết gán đối tượng muốn hai đối tượng.

02:48.980 --> 02:51.000
Vì vậy, cuối cùng, chúng tôi muốn đảm bảo rằng

02:51.000 --> 02:52.820
chúng tôi có được hai đối tượng ở đây bằng

02:52.820 --> 02:56.370
cách đặt các ràng buộc nhất định đối với các loại chung của chúng tôi.

02:56.370 --> 02:58.630
Và những ràng buộc ở đây có thể là bất cứ thứ gì.

02:58.630 --> 03:01.290
Bạn có thể tham chiếu đến các đối tượng, đến chuỗi,

03:01.290 --> 03:03.730
bạn có thể sử dụng loại của riêng mình nếu có.

03:03.730 --> 03:06.700
Bạn cũng có thể sử dụng các loại liên kết ở đây nếu muốn,

03:06.700 --> 03:08.470
bạn thực sự linh hoạt ở đó, bạn có thể

03:08.470 --> 03:10.510
đặt bất kỳ ràng buộc nào bạn muốn.

03:10.510 --> 03:12.620
Và tất nhiên, bạn không phải hạn chế tất cả các

03:12.620 --> 03:13.720
loại chung chung.

03:13.720 --> 03:16.560
Nếu bạn chỉ muốn hạn chế U, bạn có thể làm điều đó.

03:16.560 --> 03:19.620
Trong ví dụ này, sẽ hợp lý khi hạn chế cả hai vì

03:19.620 --> 03:22.880
đối tượng gán muốn có hai đối tượng ở đây, nhưng bạn

03:22.880 --> 03:24.640
thực sự linh hoạt ở đó.

03:24.640 --> 03:26.620
Tuy nhiên, điều quan trọng là phải nhận

03:26.620 --> 03:28.440
thức được khái niệm về các ràng buộc,

03:28.440 --> 03:30.560
bởi vì điều đó cho phép bạn làm việc với các

03:30.560 --> 03:32.640
kiểu chung một cách tốt hơn theo cách tối

03:32.640 --> 03:34.810
ưu, giúp tránh các lỗi không cần thiết hoặc

03:34.810 --> 03:37.513
các hành vi lạ như chúng ta đã có trước đây.
