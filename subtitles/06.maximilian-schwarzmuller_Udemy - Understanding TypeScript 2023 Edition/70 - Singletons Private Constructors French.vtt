WEBVTT

00:02.260 --> 00:04.960
- : Maintenant, il y a une dernière fonctionnalité

00:04.960 --> 00:07.020
intéressante que je veux aussi introduire,

00:07.020 --> 00:10.330
et ce serait les constructeurs privés.

00:10.330 --> 00:13.823
Et qu'est-ce qu'un constructeur privé et quelle est son utilité ?

00:14.870 --> 00:17.700
Il existe un modèle dans la programmation orientée

00:17.700 --> 00:20.460
objet qui s'appelle le modèle singleton.

00:20.460 --> 00:23.030
Le modèle singleton consiste à s'assurer

00:23.030 --> 00:26.440
que vous n'avez toujours qu'une seule instance d'une

00:26.440 --> 00:28.030
certaine classe.

00:28.030 --> 00:30.558
Cela peut être utile dans les scénarios où vous ne

00:30.558 --> 00:33.000
pouvez pas utiliser les méthodes ou les propriétés

00:33.000 --> 00:34.450
statiques ou vous ne voulez pas

00:34.450 --> 00:36.440
le faire, mais en même temps vous voulez

00:36.440 --> 00:39.600
vous assurer que vous ne pouvez pas créer plusieurs objets basés

00:39.600 --> 00:40.730
sur une classe mais que

00:40.730 --> 00:44.630
vous avez toujours exactement un objet basé sur une classe.

00:44.630 --> 00:47.660
Disons que pour notre AccountingDepartment, nous voulons

00:47.660 --> 00:51.460
nous assurer que nous ne pouvons créer qu'un seul objet basé sur cette

00:51.460 --> 00:53.320
classe, car nous n'avons qu'un seul

00:53.320 --> 00:56.010
département de comptabilité dans toute notre

00:56.010 --> 00:57.840
entreprise.

00:57.840 --> 01:00.260
Nous pouvons avoir plus d'un département informatique,

01:00.260 --> 01:03.290
mais nous avons exactement un seul département comptable.

01:03.290 --> 01:05.310
Maintenant, pour appliquer cette règle

01:05.310 --> 01:09.020
et éviter que nous appelions manuellement new AccountingDepartment

01:09.020 --> 01:12.260
plusieurs fois, nous pouvons transformer le constructeur

01:12.260 --> 01:14.320
de la classe AccountingDepartment en

01:14.320 --> 01:17.360
un constructeur privé en ajoutant le mot clé private devant

01:17.360 --> 01:18.860
lui.

01:18.860 --> 01:20.560
Ce que ça fait, c'est qu'on

01:20.560 --> 01:23.480
ne peut pas appeler new sur ça.

01:23.480 --> 01:25.160
Ici, vous voyez que j'obtiens une

01:25.160 --> 01:27.620
erreur parce que le constructeur est privé, c'est-à-dire

01:27.620 --> 01:30.600
qu'il n'est accessible qu'à l'intérieur de la classe, ce

01:30.600 --> 01:33.690
qui semble étrange car comment pouvons-nous entrer dans la

01:33.690 --> 01:37.920
classe si nous ne pouvons plus créer d'objets basés sur elle.

01:37.920 --> 01:40.490
La réponse est, eh bien, les méthodes statiques.

01:40.490 --> 01:43.610
Une méthode statique peut être appelée sur la classe elle-même,

01:43.610 --> 01:46.250
ce qui évite d'avoir à l'instancier pour cela.

01:46.250 --> 01:49.460
Nous pouvons donc ajouter ici une méthode statique que nous

01:49.460 --> 01:51.340
pourrions appeler getInstance, le

01:51.340 --> 01:53.260
nom vous appartient totalement.

01:53.260 --> 01:56.930
Maintenant getInstance va vérifier si nous avons déjà une instance de

01:56.930 --> 02:00.090
cette classe et si non, retourner une nouvelle instance.

02:00.090 --> 02:04.300
Pour cela, nous pouvons ajouter une nouvelle instance de propriété statique,

02:04.300 --> 02:06.350
une propriété privée statique, donc

02:06.350 --> 02:09.200
vous pouvez mettre private devant static called instance

02:09.200 --> 02:12.040
qui sera de type AccountingDepartment.

02:12.040 --> 02:16.570
Nous allons donc y stocker une instance de AccountingDepartment.

02:16.570 --> 02:17.580
C'est donc ce que je

02:17.580 --> 02:19.100
dis ici, j'ai une propriété

02:19.100 --> 02:21.410
statique qui est accessible sur la classe

02:21.410 --> 02:23.310
elle-même, mais seulement de l'intérieur

02:23.310 --> 02:25.960
de la classe et la valeur que nous y stockons sera

02:25.960 --> 02:30.140
de type AccountingDepartment, donc de la classe elle-même.

02:30.140 --> 02:33.880
Maintenant nous pouvons utiliser cette propriété d'instance

02:33.880 --> 02:38.880
ici dans getInstance et vérifier si ceci. L'instance est définie ici à l'intérieur de static,

02:39.260 --> 02:43.570
si nous l'utilisons, elle fera référence à la classe elle-même et nous pourrons alors

02:43.570 --> 02:47.610
accéder à toutes les autres propriétés statiques de celle-ci.

02:47.610 --> 02:51.963
L'alternative à cela serait d'utiliser le nom de la classe.

02:53.720 --> 02:58.450
Et maintenant, si c'est réglé, je veux retourner ça. instance, ou encore nom

02:58.450 --> 03:01.600
de classe. mais ceci dans une méthode statique

03:01.600 --> 03:04.030
fonctionne, cela nous donne accès à la classe elle-même,

03:04.030 --> 03:05.680
contrairement à ceci dans une méthode

03:05.680 --> 03:09.370
non statique qui nous donne accès à l'instance avec laquelle nous essayons

03:09.370 --> 03:11.590
de travailler, ce qui n'est pas ce que nous faisons

03:11.590 --> 03:13.550
ici.

03:13.550 --> 03:15.660
Si toutefois nous n'arrivons pas jusqu'ici,

03:15.660 --> 03:17.290
alors nous n'avons pas encore

03:17.290 --> 03:22.030
d'instance, alors je mets ceci. donc cette propriété statique d'instance

03:22.030 --> 03:25.660
égale à new AccountingDepartment, nous pouvons l'utiliser

03:25.660 --> 03:28.630
à l'intérieur car nous sommes maintenant à l'intérieur

03:28.630 --> 03:32.030
de la méthode de cette classe, donc ici nous pouvons accéder

03:32.030 --> 03:35.250
au constructeur privé et passer notre ID, et notre tableau

03:35.250 --> 03:44.830
de rapports et ensuite retourner ceci.

03:44.830 --> 03:44.830
instance ici.

03:44.830 --> 03:47.010
Donc maintenant, soit nous retournons l'instance que

03:47.010 --> 03:48.220
nous avons peut-être déjà, soit

03:48.220 --> 03:50.970
si nous ne l'avons pas encore, nous en créons une nouvelle.

03:50.970 --> 03:53.270
Mais ce code, le code marqué ici, ne peut être exécuté

03:53.270 --> 03:56.377
qu'une seule fois car une fois que nous avons une instance, nous

03:56.377 --> 03:57.850
la transformons en ce bloc if et

03:57.850 --> 04:00.370
nous retournons l'instance existante.

04:00.370 --> 04:03.700
Donc maintenant, si vous voulez travailler avec AccountingDepartment, au

04:03.700 --> 04:05.940
lieu de le créer comme ceci, nous pourrions l'appeler

04:05.940 --> 04:10.153
const accounting AccountingDepartment. getInstance, et cela nous renvoie

04:11.646 --> 04:13.190
une nouvelle instance de

04:13.190 --> 04:14.850
AccountingDepartment.

04:14.850 --> 04:18.190
Mais si je refais ça, j'obtiendrai la même instance que

04:18.190 --> 04:21.103
vous verrez si j'enregistre en console accounting,

04:22.020 --> 04:23.570
et accounting2 ici.

04:23.570 --> 04:26.550
Vous verrez que les deux devraient être exactement

04:26.550 --> 04:28.253
égaux, si nous sauvegardons et

04:30.550 --> 04:34.110
rechargeons, vous verrez qu'il y a mes deux objets AccountingDepartment,

04:34.110 --> 04:36.690
ils ont le même ID, la même configuration, ils

04:36.690 --> 04:39.720
sont le même objet, la même instance parce que nous n'avons

04:39.720 --> 04:41.530
qu'une seule instance avec ce modèle

04:41.530 --> 04:44.340
singleton qui est créé à l'aide du mot clé private

04:44.340 --> 04:47.900
devant le constructeur.

04:47.900 --> 04:51.000
Il s'agit là, sans doute, d'une approche que vous n'utiliserez

04:51.000 --> 04:52.490
pas tout le temps.

04:52.490 --> 04:55.010
Le modèle singleton peut parfois être utile, vous n'en

04:55.010 --> 04:56.530
avez pas besoin tout le temps, mais

04:56.530 --> 04:58.700
il vaut vraiment la peine de le connaître car c'est

04:58.700 --> 05:00.360
quelque chose d'intéressant que vous

05:00.360 --> 05:03.290
pouvez facilement mettre en œuvre avec TypeScript grâce aux constructeurs

05:03.290 --> 05:04.923
privés.
