WEBVTT

00:02.330 --> 00:04.870
Anlatıcı: Daha genel tiplerden bahsetmişken,

00:04.870 --> 00:06.970
küçük bir bonus olarak, yönünüzü

00:06.970 --> 00:11.410
birkaç yerleşik tipe çevirmek istiyorum diyebilirsiniz.

00:11.410 --> 00:15.740
Typescript, jenerik tipleri kullanan veya jenerik tipler olan ve

00:15.740 --> 00:17.240
bize belirli yardımcı

00:17.240 --> 00:20.350
işlevler sağlayan tiplerle birlikte gelir.

00:20.350 --> 00:22.050
Yani burada sadece küçük bir

00:22.050 --> 00:22.920
bonus var ve zaman

00:22.920 --> 00:25.550
zaman bu özel tipler işe yarayabilir.

00:25.550 --> 00:26.840
Şimdi, ekte tüm yerleşik yardımcı

00:26.840 --> 00:30.680
program türlerinin tam belgelerine bir bağlantı bulacaksınız.

00:30.680 --> 00:33.810
Burada size sadece birkaç örnek vermek istiyorum.

00:33.810 --> 00:36.010
Şimdi tıpkı tüm bu tip şeyler gibi, bu tipler

00:36.010 --> 00:38.610
de yalnızca dünya tiplerinde ve dolayısıyla

00:38.610 --> 00:41.300
yalnızca derlemeden önce mevcuttur.

00:41.300 --> 00:43.460
Ancak bu derleme adımı sırasında

00:43.460 --> 00:48.130
size ekstra tip güvenliği veya ekstra esneklik sağlayabilirler.

00:48.130 --> 00:51.670
Örneğin, yerleşik kısmi tip vardır.

00:51.670 --> 00:55.580
Diyelim ki yeni bir türümüz var ve bulacağımız arayüz veya

00:55.580 --> 00:59.493
özel bir tür gerçekten önemli değil, CourseGoal.

01:00.660 --> 01:03.780
CourseGoal'ın bir dize olması gereken bir başlığı

01:03.780 --> 01:06.930
ve diyelim ki bir açıklaması vardır ve bunların

01:06.930 --> 01:09.040
hepsi bir dize olmalıdır.

01:09.040 --> 01:14.040
Belki de bir Date olan completeUntil özelliğimiz de vardır.

01:15.290 --> 01:17.961
Şimdi, bize böyle bir nesne yaratan createCourseGoal

01:17.961 --> 01:21.500
diyelim, bir fonksiyona sahip olmak istiyoruz.

01:21.500 --> 01:23.380
Elbette bu sınıfı biz de yaratabilirdik.

01:23.380 --> 01:26.290
Ancak böyle bir işlevimiz var çünkü bu işlevde, bir

01:26.290 --> 01:28.740
veritabanından veya her neyse ondan bazı

01:28.740 --> 01:30.590
veriler çekiyor olabiliriz.

01:30.590 --> 01:32.110
Yani bu fonksiyona sahibiz.

01:32.110 --> 01:33.330
Ve sonunda,

01:33.330 --> 01:37.890
bir dize olan başlığımı almak istiyorum,

01:37.890 --> 01:42.320
bir dize olan açıklamamı alabilirim ve

01:42.320 --> 01:47.150
umarım bir Tarih olan tarihimi alırım.

01:47.150 --> 01:49.680
Şimdi bu fonksiyonda elbette bir nesne döndürebiliriz

01:49.680 --> 01:51.740
ama tüm bu şeyleri ayarladık.

01:51.740 --> 01:55.340
Yani title'ı başlık, description'ı açıklama ve completeUntil'i

01:55.340 --> 01:57.840
tarih olarak ayarladığımız yer.

01:57.840 --> 02:00.760
Tüm bunları yapabiliriz ve daha sonra bu fonksiyonun

02:00.760 --> 02:03.890
her zaman bir CourseGoal döndüreceğini tanımlarsak,

02:03.890 --> 02:07.120
doğru kurulmuş bir fonksiyona sahip oluruz.

02:07.120 --> 02:08.420
Şimdi bir nedenden dolayı diyelim

02:08.420 --> 02:09.530
ki bunu bu şekilde yapmıyoruz,

02:09.530 --> 02:11.623
hepsini tek bir adımda yapmıyoruz.

02:12.680 --> 02:13.870
Bunun yerine, yapmak

02:13.870 --> 02:17.340
istediğim şey, burada boş bir nesne tutan bir değişken oluşturarak

02:17.340 --> 02:18.700
başlamak.

02:18.700 --> 02:22.620
Ve sonra adım adım başlığımı buraya eklemek istiyorum.

02:22.620 --> 02:26.420
Açıklamamı buraya eklemek istiyorum.

02:26.420 --> 02:31.303
Ve buraya tarihimi eklemek istiyorum.

02:33.640 --> 02:36.420
Şimdi burada hata alıyorum çünkü elbette bu nesnenin

02:36.420 --> 02:39.170
bir özelliği değil başlığını ayarlayamıyorum.

02:39.170 --> 02:41.930
Ve bu vanilya JavaScript'te işe yarasa da, TypeScript

02:41.930 --> 02:45.410
buraya anında ekleme yapmaktan pek hoşlanmaz.

02:45.410 --> 02:47.810
Dolayısıyla, bunun CourseGoal türünde olması gerektiğini

02:47.810 --> 02:49.300
söylemek isteyebiliriz.

02:49.300 --> 02:51.040
Şimdi, TypeScript bundan değil,

02:51.040 --> 02:53.640
bunun boş bir nesne olmasından şikayet ediyor

02:53.640 --> 02:56.223
ve bu da açıkça buradaki türümüze uymuyor.

02:57.070 --> 02:58.360
Sonunda, onu iade etmek

02:58.360 --> 03:01.000
istiyorum ve tüm bu şeyleri adım adım eklemek

03:01.000 --> 03:04.570
istiyorum, belki de her adımdan önce ekstra doğrulamamız olduğu

03:04.570 --> 03:07.590
için ve bu nedenle bu şekilde eklemek için.

03:07.590 --> 03:12.390
İşte burada kısmi tip işe yarayabilir.

03:12.390 --> 03:17.390
Buradaki CourseGoal'ın kısmi bir tür olması gerektiğini söyleyebiliriz, bu

03:17.580 --> 03:18.413
da genel türler

03:18.413 --> 03:21.600
sayesinde sonunda bir courseGoal tutacaktır.

03:21.600 --> 03:24.200
Şimdi bunun yaptığı şey, TypeScript'e bunun

03:24.200 --> 03:28.260
sonunda bir courseGoal olacak bir nesne olduğunu söylemektir.

03:28.260 --> 03:32.090
Ancak başlangıçta, kısmi tür kendi türümüzü sarar ve onu

03:32.090 --> 03:36.620
tüm bu özelliklerin isteğe bağlı olduğu bir türe dönüştürür.

03:36.620 --> 03:39.440
Typescript'in birlikte gönderdiği bu yerleşik türlerden birinin

03:39.440 --> 03:40.670
kısmi yaptığı şey budur.

03:40.670 --> 03:44.270
Böylece bunu, aynı zamanda bir nesne türü olan ve tüm özelliklerin isteğe bağlı

03:44.270 --> 03:45.713
olduğu bir türe dönüştürür.

03:45.713 --> 03:49.290
Bu nedenle, bunu başlangıçta boş bir nesneye ayarlayabilir

03:49.290 --> 03:53.030
ve yine de tüm bu şeyleri adım adım ekleyebiliriz.

03:53.030 --> 03:54.880
Tek sorun, sonuçta bunu geri

03:54.880 --> 03:58.130
döndüremememizdir çünkü artık CourseGoal

03:58.130 --> 04:02.130
türünde değil, kısmi CourseGoal türündedir.

04:02.130 --> 04:04.630
Bunu typecasting ile courseGoal'a dönüştürerek düzeltebiliriz,

04:04.630 --> 04:07.480
çünkü zamanın bu noktasında tüm verileri eklemiş olacağımızı

04:07.480 --> 04:08.990
biliyoruz.

04:08.990 --> 04:11.667
Böylece kısmi değil gerçek bir kurs Hedefi olacaktır.

04:11.667 --> 04:13.510
Ve tabii ki, bu biraz uydurma.

04:13.510 --> 04:15.500
Ancak, nesne türlerinizden birini,

04:15.500 --> 04:18.220
arayüzlerinizden birini geçici olarak yalnızca

04:18.220 --> 04:19.650
isteğe bağlı olacak şekilde

04:19.650 --> 04:23.530
değiştirmek istediğiniz bunun gibi senaryolarınız olabilir.

04:23.530 --> 04:25.540
Buradaki tüm özelliklerin yalnızca geçici

04:25.540 --> 04:28.170
olarak isteğe bağlı olabileceğinden emin olmak için.

04:28.170 --> 04:31.223
Ve kısmi tip bunu yapmanıza olanak tanır.

04:32.370 --> 04:35.920
Ve asla sahip olduğunuz yerleşik yardımcı tip,

04:35.920 --> 04:40.170
hepsi çok yararlı olabilecek salt okunur tip değildir.

04:40.170 --> 04:42.623
Diyelim ki elimizde bir isim dizisi var.

04:43.460 --> 04:46.330
Ve orada Max ve Sports var.

04:46.330 --> 04:47.420
Şimdi, TypeScript doğru

04:47.420 --> 04:49.860
bir şekilde bunun bir dize dizisi olduğunu çıkarır.

04:49.860 --> 04:50.960
Şimdi ne yapabiliriz?

04:50.960 --> 04:52.690
Elbette Manu'yu oraya koyabiliriz

04:53.700 --> 04:55.400
ve muhtemelen bunu Anna spor

04:55.400 --> 04:58.340
yapmıyor olarak değiştirmeliyim ki orada bir isim

04:58.340 --> 04:59.720
olsun.

04:59.720 --> 05:00.553
Yani bu işe yarıyor.

05:00.553 --> 05:01.386
Şimdi diyelim ki,

05:01.386 --> 05:04.230
bunun kilitli bir dizi olduğundan emin olmak istiyorum.

05:04.230 --> 05:06.260
Buraya daha fazlasını ekleyemeyiz.

05:06.260 --> 05:07.870
Ve buraya her zaman daha fazlasını ekleyebiliriz,

05:07.870 --> 05:11.690
ama en azından bunu denersem Typescript'in bana bağırmasını istiyorum.

05:11.690 --> 05:13.730
İşte burada salt okunur türünü

05:13.730 --> 05:18.730
kullanabiliriz, bunu salt okunur string dizisi olarak ayarlayabiliriz.

05:18.930 --> 05:20.510
Bununla TypeScript'e şunu söyleriz:

05:20.510 --> 05:23.030
Burada sakladığımız şey, dizelerden oluşan bir dizidir.

05:23.030 --> 05:25.830
Ancak aynı zamanda yalnızca okunabilen bir dizeler dizisidir.

05:25.830 --> 05:28.210
Dolayısıyla, push ile bir şey eklemeye

05:28.210 --> 05:31.600
çalıştığımızda veya pop ile bir şeyi kaldırmaya çalıştığımızda

05:31.600 --> 05:32.760
hata alırız, çünkü

05:32.760 --> 05:34.810
bu diziyle bunları yapmamıza izin

05:34.810 --> 05:36.320
verilmez.

05:36.320 --> 05:38.760
Ve bu arada bu dizilerle sınırlı değildir, bir

05:38.760 --> 05:41.610
nesne üzerinde de salt okunur kullanabilirsiniz.

05:41.610 --> 05:43.990
Örneğin, salt okunur olarak pazarlamak

05:43.990 --> 05:46.860
için, bu nesnenin özelliklerini değiştirmenize

05:46.860 --> 05:49.920
veya yeni özellikler eklemenize izin verilmez.

05:49.920 --> 05:52.240
Bu da çok ama çok kullanışlı olabilir ve size

05:52.240 --> 05:56.510
daha fazla esneklik sağlayabilir veya kodunuzda ne yapmayı hedeflediğiniz

05:56.510 --> 05:59.490
konusunda daha hassas olmanızı sağlayabilir.

05:59.490 --> 06:01.380
Şimdi, tüm bunlar sadece TypeScript

06:01.380 --> 06:03.610
dünyasında var olan yardımcı tiplerdir.

06:03.610 --> 06:05.881
Yani hiçbir şey için derlenmiş değiller.

06:05.881 --> 06:09.400
Ancak derleme sırasında, size ekstra katılık veya ekstra

06:09.400 --> 06:12.410
kontroller verirler veya kısmi olarak yaptığımız

06:12.410 --> 06:14.800
gibi belirli kontrolleri atlarlar.

06:14.800 --> 06:17.170
Artık salt okunur ve kısmi olmaktan daha fazlasına sahipsiniz.

06:17.170 --> 06:19.730
Ve ekte belirttiğim gibi, bu yardımcı program türlerinin

06:19.730 --> 06:22.420
tam bir listesinin belgelerini bulacaksınız.

06:22.420 --> 06:25.580
Bazı senaryolarda gerçekten işe yarayabilirler ve bu nedenle

06:25.580 --> 06:27.460
onları kesinlikle sizden saklamak

06:27.460 --> 06:28.350
istemedim.

06:28.350 --> 06:30.500
Ancak bunun yerine, bir şeyi kilitlemeniz

06:30.500 --> 06:34.060
gerektiğinde veya herhangi bir şeyi kısmi olarak açmanız gerektiğinde

06:34.060 --> 06:36.980
veya burada bahsetmediğim diğerleriyle birlikte, bu yerleşik

06:36.980 --> 06:39.690
yardımcı program türlerinden biriyle geliştirilebilecek

06:39.690 --> 06:42.570
başka bir işleminiz varsa bunları kullanabilmeniz için

06:42.570 --> 06:45.140
bunların farkında olmalısınız.

06:45.140 --> 06:47.670
Ve bu yardımcı tiplerin hepsi geneldir,

06:47.670 --> 06:49.170
çünkü yaptıkları şey herhangi

06:49.170 --> 06:52.580
bir tipte başka bir değeri almak ve onunla bir şeyler

06:52.580 --> 06:54.190
yapmaktır.

06:54.190 --> 06:57.970
Her şeyi isteğe bağlı olarak ayarlarlar, bunun bir dizi mi yoksa

06:57.970 --> 07:01.330
nesne mi ya da bir dizeler dizisi mi, sayılar dizisi mi

07:01.330 --> 07:04.430
vb. olduğunu umursamadan kilitlerler.

07:04.430 --> 07:06.000
Bu yüzden bunlar jenerik.

07:06.000 --> 07:09.520
Ve daha önce gördüğümüz üst yerleşik jeneriklerle ve kendi jeneriklerinizle

07:09.520 --> 07:10.790
birlikte.

07:10.790 --> 07:13.780
Bu, umarım jeneriklerin neden var oldukları konusunda neden

07:13.780 --> 07:16.793
yararlı olabileceklerini anlamanıza yardımcı olur.
