WEBVTT

00:02.273 --> 00:05.100
Kursleiter: Wir haben uns viele Dekoratoren angeschaut,

00:05.100 --> 00:06.190
wie man mit ihnen arbeitet,

00:06.190 --> 00:07.340
wie man sie konfiguriert,

00:07.340 --> 00:09.940
was man mit ihnen machen kann, was man mit ihnen machen

00:09.940 --> 00:11.367
kann.

00:11.367 --> 00:15.260
Dies zeigt Ihnen hoffentlich die Komplexität, aber auch die Macht der Dekoratoren

00:15.260 --> 00:17.340
und wie Sie über sie nachdenken können, wie

00:17.340 --> 00:18.898
Sie sie verwenden können.

00:18.898 --> 00:22.370
Sie können nicht nur Ihre eigenen Dekoratoren erstellen,

00:22.370 --> 00:24.208
es gibt auch ein reiches Ökosystem

00:24.208 --> 00:28.590
von Paketen und Frameworks, die auf Dekoratoren aufbauen.

00:28.590 --> 00:30.670
Zum Beispiel die Klasse validator.

00:30.670 --> 00:32.789
Wenn Sie nach "ts class validator" suchen,

00:32.789 --> 00:35.480
finden Sie ein Paket, das im Grunde eine ausgefeiltere

00:35.480 --> 00:37.960
Implementierung unserer eigenen benutzerdefinierten

00:37.960 --> 00:41.680
Validierungslogik enthält, an der wir gearbeitet haben.

00:41.680 --> 00:44.140
Dieses Paket kann zu jedem Projekt, an dem Sie arbeiten,

00:44.140 --> 00:45.960
hinzugefügt werden, und dann können Sie

00:45.960 --> 00:48.030
einfach eine Reihe von Dekoratoren oder Dekorator-Fabriken

00:48.030 --> 00:49.930
importieren, wie Sie sehen können, da wir sie

00:49.930 --> 00:51.660
hier ausführen.

00:51.660 --> 00:53.350
Fügen Sie sie zu Ihren Eigenschaften

00:53.350 --> 00:55.650
hinzu, mit oder ohne zusätzliche Konfiguration,

00:55.650 --> 00:57.530
je nachdem, um welchen Validator es sich

00:57.530 --> 00:59.163
handelt, und hinter den Kulissen wird

00:59.163 --> 01:01.530
dies ein Register verwalten, man könnte sagen, wie

01:01.530 --> 01:03.509
ein Konfigurationsobjekt am Ende, speichern

01:03.509 --> 01:07.070
Sie Ihr Validator-Setup für die verschiedenen Eigenschaften in Ihren verschiedenen

01:07.070 --> 01:08.950
Klassen.

01:08.950 --> 01:11.810
Dann erhalten Sie eine Validierungsmethode, die Sie ebenfalls

01:11.810 --> 01:14.150
aus dem Paket importieren und die Sie ausführen und

01:14.150 --> 01:16.656
an Ihr Objekt übergeben können, um die gesamte Validierungslogik

01:16.656 --> 01:20.540
anzuwenden, die Sie in der Klasse eingerichtet haben.

01:20.540 --> 01:22.840
Es ist also im Grunde das, was wir gerade

01:22.840 --> 01:26.000
getan haben, nur mit mehr Validatoren, und mit all der schweren

01:26.000 --> 01:27.830
Arbeit für Sie getan.

01:27.830 --> 01:29.170
Aber natürlich ist es hilfreich

01:29.170 --> 01:30.630
zu verstehen, wie das im Allgemeinen

01:30.630 --> 01:32.370
funktioniert, da wir es hier in einer naiveren

01:32.370 --> 01:34.143
Version selbst entwickelt haben.

01:35.010 --> 01:36.490
Neben diesem Paket haben wir natürlich

01:36.490 --> 01:38.370
auch Angular, zum Beispiel.

01:38.370 --> 01:39.541
Angular ist ein Framework,

01:39.541 --> 01:41.502
das ich bereits erwähnt habe und das

01:41.502 --> 01:43.942
sich stark auf Dekoratoren stützt, wie diesen

01:43.942 --> 01:46.480
Komponentendekorator, der es Ihnen ermöglicht,

01:46.480 --> 01:49.214
dynamischen HTML-Code zuzuweisen, der mit einer

01:49.214 --> 01:51.301
speziellen, von Angular hinzugefügten

01:51.301 --> 02:00.170
Syntax auf Eigenschaften Ihrer Klassen zugreift, um dann dynamische Inhalte auf dem Bildschirm darzustellen.

02:00.170 --> 02:01.780
Hier bietet Angular also mehr als

02:01.780 --> 02:03.360
nur diese Dekoratoren, sondern

02:03.360 --> 02:06.250
die Dekoratoren sind ein Kernbestandteil von Angular.

02:06.250 --> 02:07.280
Und zu guter Letzt

02:07.280 --> 02:10.130
möchte ich Ihnen auch NestJS zeigen.

02:10.130 --> 02:13.190
NestJS ist ein serverseitiges JavaScript-Framework

02:13.190 --> 02:15.487
für Node. js, das ebenfalls stark

02:15.487 --> 02:20.010
auf Typescript zurückgreift, und das auch Dekoratoren einbezieht.

02:20.010 --> 02:23.270
Dort verwendet man Dekoratoren, um Controller und Routen zu

02:23.270 --> 02:26.730
definieren, die Methoden, die Benutzer für ihre HTTP-Anfragen

02:26.730 --> 02:30.400
verwenden müssen, um bestimmte Funktionen auszulösen, und auch viele

02:30.400 --> 02:32.687
andere Dekoratoren, die man verwenden kann,

02:32.687 --> 02:35.660
um Daten aus eingehenden Anfragen zu extrahieren, und

02:35.660 --> 02:36.890
so weiter.

02:36.890 --> 02:39.150
Auch hier bietet das Framework also wieder

02:39.150 --> 02:41.370
all diese Dekoratoren für Sie an, so dass Sie

02:41.370 --> 02:44.640
sie einfach zu Ihren Eigenschaften, Methoden und Klassen hinzufügen

02:44.640 --> 02:46.257
können, um zusätzliche Funktionalität

02:46.257 --> 02:50.060
hinzuzufügen, die das Framework dann wiederum bei der Ausführung Ihres

02:50.060 --> 02:52.828
Codes berücksichtigt.

02:52.828 --> 02:55.417
Auch hier werden also Dekoratoren für die

02:55.417 --> 02:59.070
Metaprogrammierung verwendet, um zusätzliche Konfiguration,

02:59.070 --> 03:02.977
zusätzliche Logik hinzuzufügen, die dann von dem Code des Frameworks

03:02.977 --> 03:05.700
berücksichtigt wird, der Ihren Code ausführt

03:05.700 --> 03:09.886
oder mit Ihrem Code zusammenarbeitet.

03:09.886 --> 03:12.000
Und das war's für Dekorateure.

03:12.000 --> 03:14.110
Dies gibt Ihnen hoffentlich einen guten Überblick

03:14.110 --> 03:16.090
darüber, was Sie mit Dekorateuren tun können, warum

03:16.090 --> 03:17.830
sie sehr hilfreich sein können und wie sie

03:17.830 --> 03:19.563
im Allgemeinen funktionieren.
