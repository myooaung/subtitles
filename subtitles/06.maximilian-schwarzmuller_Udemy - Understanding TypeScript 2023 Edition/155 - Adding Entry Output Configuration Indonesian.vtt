WEBVTT

00:01.538 --> 00:03.725
Narator: Untuk memulai, pertama-tama

00:03.725 --> 00:07.086
mari kita pergi ke tsconfig. json karena di sana kita perlu memastikan

00:07.086 --> 00:09.965
hal-hal tertentu telah dikonfigurasi.

00:09.965 --> 00:12.780
Pastikan bahwa target di sini, sebenarnya

00:12.780 --> 00:16.286
diatur ke es5 atau es6, itu terserah Anda.

00:16.286 --> 00:19.423
Tergantung pada browser mana yang Anda rencanakan untuk didukung.

00:19.423 --> 00:22.190
Karena pada akhirnya webpack dan tipe-tipe loader

00:22.190 --> 00:24.050
akan menggunakan target ini untuk

00:24.050 --> 00:26.543
menentukan bagaimana kodemu harus diubah.

00:26.543 --> 00:28.960
Haruskah jenis kode Anda diubah menjadi

00:28.960 --> 00:32.480
kode skrip Java yang berjalan di browser lama juga?

00:32.480 --> 00:36.210
Atau seperti es6 untuk kode yang hanya berjalan di browser

00:36.210 --> 00:37.811
yang lebih baru?

00:37.811 --> 00:42.640
Modul kemudian harus diatur ke es2015 atau es6 sehingga pengaturannya

00:42.640 --> 00:44.110
baik-baik saja.

00:44.110 --> 00:49.110
Dan sebagai tambahan, Anda juga ingin memverifikasi outDir Anda.

00:50.560 --> 00:53.520
Saya akan menyimpannya ke dist tetapi Anda dapat mengubahnya jika Anda

00:53.520 --> 00:55.997
ingin mengkompilasi kode Anda ke direktori yang berbeda.

00:55.997 --> 00:59.378
Anda tidak perlu lagi direktori root, karena webpack

00:59.378 --> 01:02.260
akan mengambil alih di sana, dan webpack akan

01:02.260 --> 01:05.014
menentukan di mana file root Anda berada.

01:05.014 --> 01:07.660
Jadi, secara umum pengaturan ini seharusnya baik-baik saja.

01:07.660 --> 01:09.525
Kita selalu bisa mengubahnya nanti jika

01:09.525 --> 01:12.487
ada sesuatu yang tidak bekerja seperti yang kita inginkan.

01:12.487 --> 01:15.220
Dengan itu, mari kita tambahkan file konfigurasi baru

01:15.220 --> 01:19.848
di samping tsconfig. json dan itulah webpack. config. file js.

01:19.848 --> 01:22.368
Dan pastikan Anda benar-benar menamainya seperti

01:22.368 --> 01:24.150
ini karena ini adalah file yang secara

01:24.150 --> 01:27.579
otomatis akan dicari oleh webpack dan ini bahkan akan memberi tahu webpack

01:27.579 --> 01:30.220
bagaimana cara bekerja dengan proyek kita.

01:30.220 --> 01:32.840
Karena webpack adalah alat yang perlu dikonfigurasi untuk

01:32.840 --> 01:34.568
bekerja dengan benar di sini.

01:34.568 --> 01:37.568
Jadi apa yang kita lakukan di webpack ini. file konfigurasi?

01:37.568 --> 01:40.338
File konfigurasi ini menggunakan JavaScript dan sebenarnya

01:40.338 --> 01:43.288
menggunakan node. fitur js.

01:43.288 --> 01:46.747
Jadi, kita ingin menggunakan simpul. js mengekspor sintaks, yang terlihat

01:46.747 --> 01:50.379
seperti ini untuk kemudian mengekspor objek JavaScript.

01:50.379 --> 01:53.538
Yang akan menjadi objek konfigurasi yang diambil oleh webpack.

01:53.538 --> 01:55.585
Jadi, seandainya Anda belum pernah melihatnya sebelumnya,

01:55.585 --> 01:59.648
beginilah cara Anda mengekspor berbagai hal di dalam node. lingkungan js.

01:59.648 --> 02:02.877
Dan di sini kita mengekspor objek JavaScript.

02:02.877 --> 02:05.920
Sekarang webpack membutuhkan beberapa informasi.

02:05.920 --> 02:09.840
Yang paling penting, perlu mengetahui dari file mana

02:09.840 --> 02:14.585
seluruh proyek Anda dimulai; jadi, di mana titik masuk Anda.

02:14.585 --> 02:17.370
Dalam kasus kami, itulah aplikasinya. ts file.

02:17.370 --> 02:18.922
File ini harus dieksekusi terlebih

02:18.922 --> 02:20.981
dahulu, dan apa yang kemudian akan dilakukan

02:20.981 --> 02:24.013
webpack adalah akan melihat impor dalam file ini dan

02:24.013 --> 02:25.461
pergi ke file-file ini dan

02:25.461 --> 02:27.378
melihat impornya dan impor file yang

02:27.378 --> 02:30.219
diimpor dan seterusnya.

02:30.219 --> 02:33.461
Hingga akhirnya mengetahui semua file yang digunakan proyek Anda.

02:33.461 --> 02:36.201
Dan kemudian akan melalui konten file seperti

02:36.201 --> 02:38.740
konten ini di sini dan semua konten di

02:38.740 --> 02:41.690
semua file dan mengkompilasinya, dengan bantuan

02:41.690 --> 02:44.290
ts. paket loader yang saya sebutkan.

02:44.290 --> 02:46.960
Sekarang untuk membuat webpack bekerja dengan benar di sini, Anda sebenarnya

02:46.960 --> 02:50.421
sekarang harus menghapus semua file . js di semua

02:50.421 --> 02:51.598
impor.

02:51.598 --> 02:54.400
Kami membutuhkan itu sebelumnya, ketika kami menggunakan

02:54.400 --> 02:57.885
browser asli yang dibangun di ts. Fungsionalitas modul, tetapi

02:57.885 --> 03:01.130
dengan webpack Anda tidak memerlukan ekstensi ini.

03:01.130 --> 03:03.664
Karena webpack sebenarnya akan secara otomatis mencari. js, dan file ekstensi tertentu lainnya.

03:03.664 --> 03:06.501
Jadi Anda tidak dan Anda tidak boleh menambahkannya di sini,

03:06.501 --> 03:09.270
jika tidak webpack akan mencari file dengan ekstensi ganda,

03:09.270 --> 03:10.716
yang tidak Anda inginkan.

03:10.716 --> 03:13.655
Jadi hapus . js pada semua impor ini di sini, dan setelah Anda

03:13.655 --> 03:18.441
melakukannya, simpan semua file ini untuk

03:18.441 --> 03:21.370
memastikan perubahan Anda diterapkan.

03:21.370 --> 03:24.043
Sekarang kembali ke webpack. config. js, di sana Anda sekarang harus

03:24.043 --> 03:26.498
menambahkan

03:26.498 --> 03:31.320
properti entri dalam objek yang diekspor ini.

03:31.320 --> 03:32.740
Dan arahkan ke . /src/app. ts dalam contoh kita.

03:32.740 --> 03:37.740
Jadi, pada file entri root proyek Anda.

03:38.680 --> 03:42.444
Berikutnya tambahkan kunci output di sini.

03:42.444 --> 03:45.880
Keluaran sekarang adalah objek di sini.

03:45.880 --> 03:48.051
Di mana kita pertama-tama menentukan nama file.

03:48.051 --> 03:51.120
Ini akan menjadi file JavaScript tunggal yang akan

03:51.120 --> 03:52.998
dihasilkan pada akhirnya.

03:52.998 --> 03:55.440
Dan di sini kita akan menamakannya bundel. js, tetapi Anda bisa menamainya apa pun yang

03:55.440 --> 03:57.350
Anda inginkan.

03:57.350 --> 03:58.788
Aplikasi. js, atau apa pun yang Anda inginkan.

03:58.788 --> 04:01.709
Anda juga dapat menambahkan

04:01.709 --> 04:05.171
bagian dinamis di sini misalnya, hash konten, untuk memberi tahu

04:05.171 --> 04:08.971
webpack agar secara otomatis membuat has unik untuk setiap build yang

04:08.971 --> 04:11.829
dapat membantu Anda dengan caching di browser.

04:11.829 --> 04:13.578
Tetapi sekali lagi Anda dapat mempelajari lebih lanjut tentang itu di dokumen webpack.

04:13.578 --> 04:16.229
Di sini kita tidak memerlukannya, jadi kita hanya akan menamai file bundle. js.

04:16.229 --> 04:19.779
Selain nama file, Anda juga

04:19.779 --> 04:23.320
perlu menentukan path, di mana output harus ditulis.

04:23.320 --> 04:26.131
Dan tentu saja itu harus sesuai dengan

04:26.131 --> 04:28.900
jalur yang Anda miliki di ts Anda. config. js untuk menghindari kesalahan.

04:28.900 --> 04:32.970
Jadi untuk folder ini.

04:32.970 --> 04:34.189
Sekarang tidak seperti di ts. config,js, Anda tidak

04:34.189 --> 04:37.010
boleh menulis file . /dist di sini.

04:37.010 --> 04:39.819
Webpack menginginkan jalur absolut di sini.

04:39.819 --> 04:42.099
Dan untuk membangunnya kita bisa menggunakan node. modul js.

04:42.099 --> 04:45.669
Untuk itu kita bisa menggunakan node. js, yang menggunakan kata

04:45.669 --> 04:48.880
kunci yang diperlukan,

04:48.880 --> 04:51.280
dan mengimpor modul path.

04:51.280 --> 04:54.220
Anda tidak perlu menginstalnya sebagai pustaka,

04:54.220 --> 04:56.050
ini adalah node inti. js yang sudah Anda miliki

04:56.050 --> 04:59.651
jika Anda punya node. js terinstal, yang Anda lakukan karena kita telah melakukannya

04:59.651 --> 05:02.149
sebelumnya dalam kursus ini.

05:02.149 --> 05:04.966
Sekarang Anda dapat menggunakan path untuk memanggil

05:04.966 --> 05:08.552
metode resolve di sana yang memungkinkan Anda untuk membangun

05:08.552 --> 05:11.280
path absolut ke folder tertentu.

05:11.280 --> 05:12.910
Untuk itu kita menggunakan konstanta

05:12.910 --> 05:15.320
khusus, konstanta __dirname, yang tersedia secara

05:15.320 --> 05:17.236
global di dalam sebuah node. lingkungan js.

05:17.236 --> 05:21.150
Dan webpack seperti yang saya katakan menggunakan node. js untuk mengeksekusi file Anda.

05:21.150 --> 05:24.692
Dan kemudian sebagai argumen kedua

05:24.692 --> 05:27.433
dist, pada akhirnya dist hanya membangun jalur

05:27.433 --> 05:30.661
absolut ke folder dist yang kemudian digunakan webpack

05:30.661 --> 05:33.190
untuk menulis out-put Anda di sana.

05:33.190 --> 05:35.452
Dan dengan itu Anda mendapatkan titik masuk dan

05:35.452 --> 05:38.753
titik keluar, tetapi Anda tidak memberi tahu webpack apa yang harus dilakukan

05:38.753 --> 05:40.743
dengan file TypeScript Anda.

05:40.743 --> 05:42.553
Karena secara default webpack tidak

05:42.553 --> 05:45.140
tahu itu, secara default itu hanya bundler.

05:45.140 --> 05:46.884
Fungsionalitas tambahan apa pun,

05:46.884 --> 05:48.684
seperti mengkompilasi TypeScript

05:48.684 --> 05:51.261
ke JavaScript harus diajarkan ke webpack.

05:51.261 --> 05:53.452
Kita akan melakukannya dalam kuliah berikutnya.
