WEBVTT

1
00:00:02.370 --> 00:00:05.290
<v Narrator>So, now that we're able to fetch the user input</v>

2
00:00:05.290 --> 00:00:08.630
and all the validated with the help of our TypeScript,

3
00:00:08.630 --> 00:00:11.420
the driven validation logic here.

4
00:00:11.420 --> 00:00:13.810
Let's move on and let's make sure we do more

5
00:00:13.810 --> 00:00:17.400
with that gathered user input than just output it

6
00:00:17.400 --> 00:00:18.420
in the console.

7
00:00:18.420 --> 00:00:19.450
Because at the moment,

8
00:00:19.450 --> 00:00:21.330
there's of course is what we're doing, right.

9
00:00:21.330 --> 00:00:24.670
In the end, I'm just printing the things deed information

10
00:00:24.670 --> 00:00:26.030
we gathered to do console,

11
00:00:26.030 --> 00:00:30.300
and that's not our final goal in this application.

12
00:00:30.300 --> 00:00:34.290
Instead, the goal is, should be that we also rendered

13
00:00:34.290 --> 00:00:37.770
this list of projects here based on this template,

14
00:00:37.770 --> 00:00:41.550
where every project item is based on this template here.

15
00:00:41.550 --> 00:00:45.750
And we output the information that we gathered here.

16
00:00:45.750 --> 00:00:48.520
So, that will be the next thing, I wanna work on.

17
00:00:48.520 --> 00:00:52.970
Besides having our project input clause here,

18
00:00:52.970 --> 00:00:55.440
which is responsible for rendering the forum

19
00:00:55.440 --> 00:00:57.350
and gathering the user input,

20
00:00:57.350 --> 00:00:59.410
I wanna have the number of clause

21
00:00:59.410 --> 00:01:03.230
which is responsible for rendering a list of projects.

22
00:01:03.230 --> 00:01:06.100
And actually we'll split that into two clauses.

23
00:01:06.100 --> 00:01:07.650
One clause for the list

24
00:01:07.650 --> 00:01:11.000
and one class per project item in the list.

25
00:01:11.000 --> 00:01:14.970
And then we need to find some way of passing that

26
00:01:14.970 --> 00:01:18.500
gathered input here basically to our project list

27
00:01:18.500 --> 00:01:20.650
and add a new item to it.

28
00:01:20.650 --> 00:01:23.420
So let's tackle this step by step, I'd say,

29
00:01:23.420 --> 00:01:26.880
and let's start by adding a project list class.

30
00:01:26.880 --> 00:01:29.380
Now at the exact place where you added, it's up to you.

31
00:01:29.380 --> 00:01:32.900
The order does not matter because Java script in the end

32
00:01:32.900 --> 00:01:36.430
will parse this entire file entirely before it executes it.

33
00:01:36.430 --> 00:01:38.860
So, it will be aware of all classes.

34
00:01:38.860 --> 00:01:41.990
Still, I will add it here above the project input clause

35
00:01:41.990 --> 00:01:45.740
because I'd kind off rely on the project list clause,

36
00:01:45.740 --> 00:01:48.810
which I'm about to build inside of the project input class,

37
00:01:48.810 --> 00:01:50.500
but again it does really matter.

38
00:01:50.500 --> 00:01:55.500
So, here I'll have my project list clause, project list,

39
00:01:55.600 --> 00:01:59.230
and the idea of this clause here is a bit related

40
00:01:59.230 --> 00:02:01.170
to what we did in a project input.

41
00:02:01.170 --> 00:02:04.300
I wanna reach out to my template here and then render it

42
00:02:04.300 --> 00:02:06.930
in a certain place off the application.

43
00:02:06.930 --> 00:02:09.480
And therefore, what we can do here is we can again

44
00:02:09.480 --> 00:02:13.120
add a constructor, we can add the fields we need

45
00:02:13.120 --> 00:02:15.310
and there will need to template element

46
00:02:15.310 --> 00:02:17.030
and the host element in the end,

47
00:02:17.030 --> 00:02:22.030
so, we can add both here to our project list.

48
00:02:22.440 --> 00:02:25.190
We'll also need to element itself,

49
00:02:25.190 --> 00:02:29.640
I'd say so the concrete element, which is getting rendered.

50
00:02:29.640 --> 00:02:31.800
And the types will differ though.

51
00:02:31.800 --> 00:02:34.580
The host element will still be a div

52
00:02:34.580 --> 00:02:38.330
because I wanna render that list in that div here as well.

53
00:02:38.330 --> 00:02:40.970
But the concrete element, which we do render.

54
00:02:40.970 --> 00:02:43.960
Of course, it's not a form element, but if we have a look

55
00:02:43.960 --> 00:02:46.180
at our list template here,

56
00:02:46.180 --> 00:02:48.520
we see there's a section inside of it.

57
00:02:48.520 --> 00:02:51.010
So, we have a section element.

58
00:02:51.010 --> 00:02:54.420
Now turns out there is no element and those section element,

59
00:02:54.420 --> 00:02:57.040
so we'll just have a regular HTML element

60
00:02:57.040 --> 00:03:00.490
because every element has this type here for some tax.

61
00:03:00.490 --> 00:03:03.060
There are more specialized types if they are,

62
00:03:03.060 --> 00:03:05.710
and we can just use HTML type.

63
00:03:05.710 --> 00:03:10.710
So, now of course we need to get access to these elements.

64
00:03:10.970 --> 00:03:15.600
So, we can copy this code here

65
00:03:15.600 --> 00:03:20.250
actually from the constructor of the project input

66
00:03:20.250 --> 00:03:22.260
added to the constructor of project list

67
00:03:22.260 --> 00:03:24.730
and now adjust some things.

68
00:03:24.730 --> 00:03:27.630
For example, my template element of course now doesn't have

69
00:03:27.630 --> 00:03:29.420
an idea of project input.

70
00:03:29.420 --> 00:03:32.150
That's now project list instead.

71
00:03:32.150 --> 00:03:36.660
So, let's copy that and use this here to select the element.

72
00:03:36.660 --> 00:03:39.760
I will still cost it, and I still know with certainty

73
00:03:39.760 --> 00:03:42.710
that I get it so dis doesn't change.

74
00:03:42.710 --> 00:03:45.520
The host elements still is to death with the ID app.

75
00:03:45.520 --> 00:03:47.820
So this does not change.

76
00:03:47.820 --> 00:03:52.070
Then I import my content and then I, well, the store,

77
00:03:52.070 --> 00:03:53.530
the first element.

78
00:03:53.530 --> 00:03:55.380
Off the import, the template.

79
00:03:55.380 --> 00:03:57.780
So basically the first element in the template, which is the

80
00:03:57.780 --> 00:04:01.590
section, I stored that in the element property here.

81
00:04:01.590 --> 00:04:04.430
However, this is not an HTML form element.

82
00:04:04.430 --> 00:04:07.210
It's just an HTML element here.

83
00:04:07.210 --> 00:04:11.710
Now we also can assign an ID here and actually did, should

84
00:04:11.710 --> 00:04:15.380
be dynamic, not hard-coded because we'll have more than one

85
00:04:15.380 --> 00:04:16.970
list of projects.

86
00:04:16.970 --> 00:04:21.220
I want to have tool lists in the final app, one for the act

87
00:04:21.220 --> 00:04:25.060
of projects and one for the enact of projects, and they

88
00:04:25.060 --> 00:04:28.420
offer, I want to get some additional information to

89
00:04:28.420 --> 00:04:29.895
constructor.

90
00:04:29.895 --> 00:04:34.870
The type of the project, and I'll use stats, TypeScript

91
00:04:34.870 --> 00:04:35.703
shortcut.

92
00:04:35.703 --> 00:04:39.250
You learn about where you can add an accessor in front of

93
00:04:39.250 --> 00:04:44.170
the parameter, private or public to automatically create a

94
00:04:44.170 --> 00:04:48.060
property of the same name and store the value that's passed

95
00:04:48.060 --> 00:04:51.730
an on this argument in that equally named property.

96
00:04:51.730 --> 00:04:55.040
So now this class will have a property name to type as well.

97
00:04:55.040 --> 00:04:57.910
And now the question is, what's the type of this type

98
00:04:57.910 --> 00:04:58.790
parameter?

99
00:04:58.790 --> 00:05:03.640
And this should actually be a literal type and a union type.

100
00:05:03.640 --> 00:05:07.270
It's either active or finished.

101
00:05:07.270 --> 00:05:11.050
We even have active projects or finished projects.

102
00:05:11.050 --> 00:05:14.270
So that's an argument I expect to get when the project list

103
00:05:14.270 --> 00:05:16.080
is instantiated.

104
00:05:16.080 --> 00:05:20.440
And with dad, we have to type property D ID should be then

105
00:05:20.440 --> 00:05:21.870
be based on this.

106
00:05:21.870 --> 00:05:25.090
It should be, and for dad, I use a template literal here.

107
00:05:25.090 --> 00:05:30.090
It should be type dash projects, so either active dash

108
00:05:31.240 --> 00:05:33.640
projects or finished dash projects.

109
00:05:33.640 --> 00:05:35.070
That's my idea here.

110
00:05:35.070 --> 00:05:37.540
You can always use this dot type so that TypeScript

111
00:05:37.540 --> 00:05:40.380
understands that we're using this property and that it's not

112
00:05:40.380 --> 00:05:41.890
unused.

113
00:05:41.890 --> 00:05:46.200
So with that, we're getting access to all the core elements

114
00:05:46.200 --> 00:05:49.660
and we're adding an ID to the section, which we get out of

115
00:05:49.660 --> 00:05:50.790
our template.

116
00:05:50.790 --> 00:05:53.650
Now, of course, we want a, we want to render it right?

117
00:05:53.650 --> 00:05:58.600
That's the idea for this all, again, at a private method.

118
00:05:58.600 --> 00:06:00.540
Attach justice.

119
00:06:00.540 --> 00:06:05.310
We had it in the project input and in there it's now the

120
00:06:05.310 --> 00:06:06.310
goal queue.

121
00:06:06.310 --> 00:06:11.300
Well, attach this to the Dom to now render dad list to the

122
00:06:11.300 --> 00:06:12.750
Dom.

123
00:06:12.750 --> 00:06:16.610
So instead of attach, I will actually do the same as I did

124
00:06:16.610 --> 00:06:19.223
an attach for the project form.

125
00:06:20.070 --> 00:06:24.230
So we can copy that line here and attitude attach.

126
00:06:24.230 --> 00:06:27.040
I have my host element and I want to insert an adjacent

127
00:06:27.040 --> 00:06:28.420
element.

128
00:06:28.420 --> 00:06:30.240
After the beginning, and this should be the element.

129
00:06:30.240 --> 00:06:33.300
We extract that from the template here.

130
00:06:33.300 --> 00:06:36.990
However, I actually don't want to do that after the

131
00:06:36.990 --> 00:06:41.960
beginning, but instead before end, which means before the

132
00:06:41.960 --> 00:06:45.870
closing, tack off the host element and then we can call

133
00:06:45.870 --> 00:06:49.940
attach here in the constructor, of course, to attach our

134
00:06:49.940 --> 00:06:51.763
created element here to the Dom.

135
00:06:53.880 --> 00:06:56.370
Now there is one important difference compared

136
00:06:56.370 --> 00:06:59.630
to the project input though for this list.

137
00:06:59.630 --> 00:07:03.220
It's not done with just adding the list to the Dom.

138
00:07:03.220 --> 00:07:05.270
The input was finished, right?

139
00:07:05.270 --> 00:07:07.130
The form here was finished.

140
00:07:07.130 --> 00:07:08.720
We had all the inputs there.

141
00:07:08.720 --> 00:07:12.420
All we needed to do was set up an event listener.

142
00:07:12.420 --> 00:07:15.840
Now for the list here, we actually haven't had her with an

143
00:07:15.840 --> 00:07:16.673
empty.

144
00:07:16.673 --> 00:07:21.130
H to tech, for example, and I wanna add some texts there.

145
00:07:21.130 --> 00:07:22.990
So I will add a number.

146
00:07:22.990 --> 00:07:26.020
New method to your private method.

147
00:07:26.020 --> 00:07:29.120
Render or content could be a fitting name.

148
00:07:29.120 --> 00:07:34.120
And my idea here is to fill the blank spaces in that

149
00:07:34.230 --> 00:07:36.862
template with some life year.

150
00:07:36.862 --> 00:07:37.780
For that.

151
00:07:37.780 --> 00:07:40.040
Let's go to dead render content method, and there are a

152
00:07:40.040 --> 00:07:41.580
couple of things I want to do.

153
00:07:41.580 --> 00:07:45.390
One thing is stat for dead unordered list, which is part of

154
00:07:45.390 --> 00:07:47.200
my project list here.

155
00:07:47.200 --> 00:07:48.640
I wanna add an ID to it.

156
00:07:48.640 --> 00:07:50.860
Of course you don't have to do that, but I want to do that

157
00:07:50.860 --> 00:07:53.500
so that if we need to select it later, we can do that with

158
00:07:53.500 --> 00:07:54.390
these.

159
00:07:54.390 --> 00:07:58.220
So I'll create a list ID here is stored in a constant, and

160
00:07:58.220 --> 00:08:00.190
this will be a template literal, so it will be a string

161
00:08:00.190 --> 00:08:04.100
where we can inject dynamic content, and I want to base this

162
00:08:04.100 --> 00:08:09.100
on the type of the surrounding project list, so off the

163
00:08:09.370 --> 00:08:14.370
surrounding section, and then add projects list thereafter.

164
00:08:15.220 --> 00:08:19.700
Now we can reach out to the an order list, which we get in

165
00:08:19.700 --> 00:08:22.890
our element, which is stat section year, right element is

166
00:08:22.890 --> 00:08:23.820
dead section.

167
00:08:23.820 --> 00:08:27.360
So to get the unordered list inside of there, we can, for

168
00:08:27.360 --> 00:08:30.940
example, use a query selector and search for the first, and

169
00:08:30.940 --> 00:08:33.120
in this case only unordered list.

170
00:08:33.120 --> 00:08:35.720
We know we will get one because we know there will be one

171
00:08:35.720 --> 00:08:38.280
and then we can add an ID here, which should be the list ID.

172
00:08:38.280 --> 00:08:40.280
That's one thing which I want to do.

173
00:08:40.280 --> 00:08:44.970
I also want to set the text content off that age to tag here

174
00:08:44.970 --> 00:08:49.360
and for this we can reach out to this element, query

175
00:08:49.360 --> 00:08:50.200
selector.

176
00:08:50.200 --> 00:08:53.020
Find the first and only HQ tag.

177
00:08:53.020 --> 00:08:56.340
We know we will find one, hence the exclamation Mark to rule

178
00:08:56.340 --> 00:09:01.340
out dead null case and set the text content equal to this to

179
00:09:02.940 --> 00:09:05.610
type to upper case.

180
00:09:05.610 --> 00:09:08.130
Remember type is ever active.

181
00:09:08.130 --> 00:09:10.060
We're finished with two opera case.

182
00:09:10.060 --> 00:09:15.060
We convert this to all caps plus projects, so does a Sten.

183
00:09:16.200 --> 00:09:19.853
Simply the heading forward is section.

184
00:09:21.970 --> 00:09:25.220
And now with that, we're, we're generally done.

185
00:09:25.220 --> 00:09:27.580
We have no items in that list yet.

186
00:09:27.580 --> 00:09:30.230
We'll work on this later, but we're generally done.

187
00:09:30.230 --> 00:09:35.120
We can call this render a content or after we attached it to

188
00:09:35.120 --> 00:09:37.210
the Dom, for example.

189
00:09:37.210 --> 00:09:39.210
Now it would be nice to see those in action.

190
00:09:39.210 --> 00:09:42.600
Of course, again, list items ends on will be missing, but it

191
00:09:42.600 --> 00:09:45.523
would be nice to see something in action here.

192
00:09:46.690 --> 00:09:49.620
Well for that, let's go to the bottom of the file where we

193
00:09:49.620 --> 00:09:53.310
instantiate the project input and there we cannot always

194
00:09:53.310 --> 00:09:55.200
instantiate our lists.

195
00:09:55.200 --> 00:09:59.200
We have the active project list, which we instantiate, but

196
00:09:59.200 --> 00:10:01.230
calling new project list.

197
00:10:01.230 --> 00:10:04.220
And there we have to pass in that type argument, which is

198
00:10:04.220 --> 00:10:06.040
either active or finished here.

199
00:10:06.040 --> 00:10:08.610
Since I'm rendering the active list, I of course pass

200
00:10:08.610 --> 00:10:09.950
inactive.

201
00:10:09.950 --> 00:10:13.140
And then here we have the finished project list where I of

202
00:10:13.140 --> 00:10:15.290
course, passing finished.

203
00:10:15.290 --> 00:10:18.673
If we now safe that it should compile without errors.

204
00:10:19.520 --> 00:10:23.090
And hence what you should see if you go back are these two

205
00:10:23.090 --> 00:10:27.770
empty sections here with the headings here and well, the

206
00:10:27.770 --> 00:10:32.460
empty space where later items will be added, project items

207
00:10:32.460 --> 00:10:33.390
will be added.

208
00:10:33.390 --> 00:10:37.440
Now for the moment, we have no such project items, snow.

209
00:10:37.440 --> 00:10:39.710
So as a next step, we should

210
00:10:39.710 --> 00:10:43.660
work on some way of making sure

211
00:10:43.660 --> 00:10:48.410
that when we click add project, that we create a new project

212
00:10:48.410 --> 00:10:49.420
in code.

213
00:10:49.420 --> 00:10:53.730
So a new data structure which represents a project, and that

214
00:10:53.730 --> 00:10:58.047
we then pass this information about this new project to the

215
00:10:58.047 --> 00:10:59.870
act of projects.

216
00:10:59.870 --> 00:11:03.850
List here to this active project section, because every new

217
00:11:03.850 --> 00:11:06.500
project should be active by default.

218
00:11:06.500 --> 00:11:09.390
This will be our next goal, and again, there will be many

219
00:11:09.390 --> 00:11:12.080
different ways of implementing this.

220
00:11:12.080 --> 00:11:15.870
We'll do it together with one way I came up with in the next

221
00:11:15.870 --> 00:11:16.703
lecture.

