WEBVTT

00:02.170 --> 00:03.860
Instructeur : Maintenant que nous avons enregistré

00:03.860 --> 00:05.630
des routes, ajoutons une logique pour ces routes.

00:05.630 --> 00:07.730
Pour cela, je vais ajouter un dossier de contrôleurs.

00:07.730 --> 00:08.750
Ce n'est pas une obligation,

00:08.750 --> 00:11.550
mais je veux séparer ma logique ici dans les contrôleurs et

00:11.550 --> 00:13.650
les routes dans le dossier routes.

00:13.650 --> 00:16.740
Et dans les contrôleurs, je vais aussi ajouter un todos. ts, qui contiendra désormais

00:16.740 --> 00:19.230
les fonctions du contrôleur que nous voulons

00:19.230 --> 00:21.990
pointer à partir de nos routes.

00:21.990 --> 00:25.120
Donc, ici, j'ai besoin d'une fonction que je vais exporter, et

00:25.120 --> 00:27.220
je vais la créer comme une fonction flèche,

00:27.220 --> 00:29.170
ce qui n'est pas une obligation, cependant,

00:29.170 --> 00:31.290
et je vais la nommer createTodo, et c'est une

00:32.420 --> 00:34.510
fonction qui recevra ces paramètres typiques

00:34.510 --> 00:36.720
que vous obtenez dans chaque fonction middleware

00:36.720 --> 00:38.830
dans express, une requête, une réponse, et

00:38.830 --> 00:41.297
la fonction suivante.

00:41.297 --> 00:44.550
Et nous venons de voir où nous pouvons obtenir les types.

00:44.550 --> 00:47.190
Nous pouvons importer la demande, la

00:47.190 --> 00:50.460
réponse et la fonction suivante d'Express.

00:50.460 --> 00:52.800
Cela nous importe ces types.

00:52.800 --> 00:54.910
Nous pourrons alors les ajouter ici.

00:54.910 --> 00:57.230
Maintenant, toujours ajouter tous ces types ici comme nous

00:57.230 --> 00:59.980
l'avons fait dans le middleware de gestion des erreurs, aussi, peut

00:59.980 --> 01:01.300
être encombrant, cependant.

01:01.300 --> 01:03.750
Ça marche, mais ça peut être ennuyeux.

01:03.750 --> 01:05.190
Il existe donc un raccourci.

01:05.190 --> 01:08.220
Au lieu de définir les types de tous ces paramètres,

01:08.220 --> 01:11.160
nous pouvons également indiquer à TypeScript le

01:11.160 --> 01:14.610
type de fonction que nous voulons stocker dans cette constante

01:14.610 --> 01:16.260
createTodo, et nous pouvons

01:16.260 --> 01:19.530
alors simplement importer le type RequestHandler d'express,

01:19.530 --> 01:24.340
et ensuite définir ici, createTodo, le type RequestHandler.

01:24.340 --> 01:28.780
Et maintenant vous voyez que TypeScript sait qu'ici nous avons une requête, ici nous

01:28.780 --> 01:30.560
avons une réponse, et ici nous avons

01:30.560 --> 01:32.590
cette prochaine fonction, parce que notre

01:32.590 --> 01:35.730
RequestHandler est défini pour ressembler à ceci.

01:35.730 --> 01:38.080
Il s'agit d'une fonction avec trois paramètres

01:38.080 --> 01:40.160
où le premier paramètre est la demande, le

01:40.160 --> 01:42.030
deuxième paramètre est la réponse, et

01:42.030 --> 01:44.810
le troisième paramètre est la fonction suivante.

01:44.810 --> 01:47.313
Donc cela peut simplifier cette installation ici.

01:48.195 --> 01:49.380
RequestHandler, bien sûr,

01:49.380 --> 01:51.360
est toujours disponible parce que nous avons

01:51.360 --> 01:52.570
installé les types pour express

01:52.570 --> 01:55.270
et donc nous pouvons ajouter cette importation ici.

01:55.270 --> 01:57.940
Sachez que cette importation disparaîtra toujours

01:57.940 --> 01:59.960
après la compilation en JavaScript, car

01:59.960 --> 02:02.300
nous importons simplement un type ici.

02:02.300 --> 02:05.030
Il ne s'agit pas d'importer un code qui s'exécuterait.

02:05.030 --> 02:06.930
C'est juste l'importation d'un type.

02:06.930 --> 02:08.650
Par conséquent, lors de la compilation,

02:08.650 --> 02:11.290
il sera supprimé car il n'apporte rien de plus que

02:11.290 --> 02:15.860
ce qui serait nécessaire lors de l'exécution en JavaScript normal.

02:15.860 --> 02:16.693
Avec cela, cependant,

02:16.693 --> 02:18.900
j'ai obtenu la fonction createTodo, et maintenant

02:18.900 --> 02:22.240
pourquoi ne pas ajouter un tableau TODOS ici pour gérer certains

02:22.240 --> 02:25.530
to dos en mémoire seulement, bien sûr.

02:25.530 --> 02:28.310
Cela disparaîtra chaque fois que notre serveur redémarrera,

02:28.310 --> 02:31.460
car il s'agit simplement d'une constante en JavaScript.

02:31.460 --> 02:32.293
Vous pourriez, bien

02:32.293 --> 02:34.770
sûr, imaginer de parler à une base de données ici, aussi,

02:34.770 --> 02:36.360
mais je veux garder cela simple parce

02:36.360 --> 02:38.630
que c'est à propos de JavaScript et TypeScript et pas

02:38.630 --> 02:41.323
tellement sur les connexions de base de données.

02:42.390 --> 02:43.790
Donc ici j'ai to dos, et maintenant

02:43.790 --> 02:47.600
ici je veux créer un nouveau à faire ici quand nous avons une demande

02:47.600 --> 02:49.320
entrante, et cela devrait être

02:49.320 --> 02:51.020
un nouvel objet, et pourquoi

02:51.020 --> 02:52.980
ne pas créer un blueprint pour cet

02:52.980 --> 02:55.420
objet, un modèle.

02:55.420 --> 02:57.640
Je vais donc ajouter un dossier de modèles,

02:57.640 --> 02:59.030
et dans ce dossier de modèles,

02:59.030 --> 03:04.030
je vais ajouter une tâche. ts et exporter une classe ici, que j'appellerai

03:04.760 --> 03:06.250
Todo, où je définis à quoi

03:06.250 --> 03:08.210
doit ressembler to do.

03:08.210 --> 03:10.330
Là, nous pouvons ajouter un constructeur

03:10.330 --> 03:13.129
et également utiliser ce raccourci TypeScript

03:13.129 --> 03:16.440
où nous pouvons ajouter un modificateur d'accès comme public

03:16.440 --> 03:19.360
et ensuite un nom de propriété comme ID, qui est de type

03:19.360 --> 03:21.250
string, disons, et text, qui est

03:21.250 --> 03:24.050
également de type string, et ensuite TypeScript

03:24.050 --> 03:27.470
ajoutera automatiquement des champs, des propriétés avec

03:27.470 --> 03:30.130
des noms égaux, et des valeurs assignées que nous

03:30.130 --> 03:32.750
passons au constructeur à ces champs chaque

03:32.750 --> 03:37.230
fois que nous instancions cette classe à faire.

03:37.230 --> 03:38.670
Je vais donc utiliser cette syntaxe

03:38.670 --> 03:40.060
ici, et vous avez déjà appris cette

03:40.060 --> 03:41.810
syntaxe plus tôt dans le cours.

03:41.810 --> 03:44.660
Et maintenant dans todos. ts ici dans le contrôleur,

03:44.660 --> 03:47.893
nous pouvons bien sûr importer Todo de, en remontant

03:49.020 --> 03:53.403
d'un niveau, models/todo, et utiliser ce type et cette classe

03:54.530 --> 03:58.800
maintenant ici dans notre fichier.

03:58.800 --> 04:01.320
Et c'est à la fois un type et une classe parce que,

04:01.320 --> 04:02.800
évidemment, c'est une classe,

04:02.800 --> 04:05.750
et toute classe agit automatiquement comme un type.

04:05.750 --> 04:08.550
C'est aussi ce que vous avez vu tout au long de ce cours.

04:08.550 --> 04:09.750
Donc, ici, nous pouvons

04:09.750 --> 04:11.910
tout d'abord dire que TODOS sera un

04:11.910 --> 04:13.550
tableau de to dos.

04:13.550 --> 04:15.480
Cette annotation supplémentaire ne fait pas de mal

04:15.480 --> 04:18.590
et nous permet de bénéficier d'un soutien approprié lorsque nous commencerons

04:18.590 --> 04:21.410
à ajouter des to-dos ou à travailler avec les to-dos de ce tableau.

04:21.410 --> 04:23.610
Et ici, quand je crée un nouveau to do,

04:23.610 --> 04:26.220
je le crée maintenant en instanciant cette

04:26.220 --> 04:28.370
classe, et nous devons passer dans

04:28.370 --> 04:32.030
un ID, et ici je vais créer un ID pseudo-unique aléatoire avec

04:32.030 --> 04:34.230
Math random toString.

04:34.230 --> 04:35.270
Ce n'est pas vraiment unique,

04:35.270 --> 04:36.660
mais c'est suffisant ici.

04:36.660 --> 04:39.170
Et maintenant, pour la valeur ici, je veux

04:39.170 --> 04:41.670
bien sûr définir un texte, que je m'attends

04:41.670 --> 04:45.530
à recevoir dans le corps de ma requête entrante.

04:45.530 --> 04:48.823
Je m'attends donc à recevoir mon texte ici, essentiellement

04:49.750 --> 04:53.270
sur le corps de la demande. texte, afin que je puisse ensuite

04:53.270 --> 04:56.280
définir le texte comme une valeur ici.

04:56.280 --> 04:57.113
Maintenant, cela

04:57.113 --> 04:59.640
fonctionne, mais il faut savoir que cela ne fonctionne

04:59.640 --> 05:02.320
que parce que TypeScript voit que ce type est de type any.

05:02.320 --> 05:04.420
Il ne sait pas qu'il s'agit d'une chaîne de caractères.

05:04.420 --> 05:05.510
Et il ne peut pas le savoir,

05:05.510 --> 05:08.390
car comment TypeScript pourrait-il savoir quelles données

05:08.390 --> 05:11.140
feront partie de nos requêtes entrantes ?

05:11.140 --> 05:12.430
Ce n'est pas clair pour elle.

05:12.430 --> 05:14.260
Nous n'indiquons nulle part

05:14.260 --> 05:17.620
ce que contiendront les demandes que nous recevons.

05:17.620 --> 05:19.270
Maintenant, comment pouvons-nous améliorer cela ?

05:19.270 --> 05:21.780
Eh bien, nous pouvons utiliser le typage, par exemple.

05:21.780 --> 05:23.660
Le typecasting est toujours une excellente

05:23.660 --> 05:26.090
solution si vous connaissez un type spécifique, mais TypeScript

05:26.090 --> 05:27.360
ne le fait pas.

05:27.360 --> 05:30.440
Donc, ici, dans le corps de la demande, avant d'accéder au texte, nous

05:30.440 --> 05:32.650
pouvons le transformer en un objet où nous avons

05:32.650 --> 05:34.900
une propriété textuelle, qui est une chaîne.

05:34.900 --> 05:36.920
Parce que nous construisons cette application,

05:36.920 --> 05:40.320
nous savons ce que nous attendons de nos demandes entrantes.

05:40.320 --> 05:42.750
Donc, puisque nous savons qu'il y aura une propriété textuelle

05:42.750 --> 05:44.166
dans le corps de la requête entrante,

05:44.166 --> 05:46.630
nous pouvons la transformer en un tel objet.

05:46.630 --> 05:51.480
Et maintenant, nous avons ici un support TypeScript et IDE approprié.

05:51.480 --> 05:53.560
Donc avec ça, nous ajoutons une nouvelle chose à faire.

05:53.560 --> 05:55.470
Maintenant, nous pouvons nous adresser à

05:55.470 --> 05:58.280
TODOS et pousser les nouvelles choses à faire sur ce tableau.

05:58.280 --> 05:59.330
Et encore une fois, cela

05:59.330 --> 06:01.060
ne fera, bien sûr, que la stocker ici

06:01.060 --> 06:02.750
en tant que constante et donc uniquement

06:02.750 --> 06:05.650
en mémoire, parce que travailler avec une base de données

06:05.650 --> 06:08.880
n'est pas vraiment directement lié à node ou TypeScript, mais,

06:08.880 --> 06:11.170
bien, à la base de données.

06:11.170 --> 06:14.140
Donc avec ça, on a la fonction de création de Todo ici.

06:14.140 --> 06:16.400
Maintenant, allons dans les routes des choses

06:16.400 --> 06:19.070
à faire et importons cette fonction de contrôleur.

06:19.070 --> 06:22.030
Il faut donc importer depuis le dossier des contrôleurs,

06:22.030 --> 06:24.000
depuis le fichier des todos qui

06:24.000 --> 06:26.660
s'y trouve, et importer la fonction create

06:26.660 --> 06:30.100
Todo et pointer vers cette fonction ici sur la route des

06:30.100 --> 06:35.100
messages afin que toute requête qui vise slash todos slash rien atteigne la fonction

06:36.060 --> 06:38.390
createTodo.

06:38.390 --> 06:39.580
Ne l'exécutez pas ici.

06:39.580 --> 06:40.650
Il suffit de le montrer du doigt.

06:40.650 --> 06:43.890
Il sera exécuté pour vous par node et express dans votre serveur

06:43.890 --> 06:45.883
web en cours d'exécution plus tard.

06:46.880 --> 06:49.630
Donc maintenant on a cette fonction ici.

06:49.630 --> 06:50.900
Nous n'avons pas fini, cependant.

06:50.900 --> 06:52.290
Dans le contrôleur, nous devrions

06:52.290 --> 06:54.360
tous retourner une réponse.

06:54.360 --> 06:56.720
Donc ici, nous pouvons envoyer une réponse,

06:56.720 --> 06:59.420
par exemple, au format JSON avec la méthode JSON

06:59.420 --> 07:02.300
où nous disons que le message a créé le todo ou ce que

07:02.300 --> 07:04.040
vous voulez, et nous avons la clé

07:04.040 --> 07:07.770
createdTodo, peut-être, où nous transmettons le nouveau todo

07:07.770 --> 07:10.520
qui a été ajouté du côté du serveur afin que sur le

07:10.520 --> 07:14.490
client, nous puissions également l'utiliser.

07:14.490 --> 07:17.750
Et peut-être aussi définir un code d'état 201 ici pour

07:17.750 --> 07:19.700
indiquer que nous avons réussi et

07:19.700 --> 07:21.793
qu'une ressource a été créée.

07:22.680 --> 07:24.640
Maintenant nous devons juste nous assurer

07:24.640 --> 07:28.500
que le corps que nous essayons d'extraire ici existe réellement.

07:28.500 --> 07:29.770
Et pour les données et l'application. ts, nous devons

07:29.770 --> 07:33.130
analyser le corps des requêtes entrantes.

07:33.130 --> 07:37.620
Pour cela, nous pouvons importer à partir du package body-parser

07:37.620 --> 07:39.220
que nous avons également

07:39.220 --> 07:41.380
installé, et à partir de ce package,

07:41.380 --> 07:46.380
nous pouvons importer la méthode JSON comme ceci.

07:46.410 --> 07:49.170
Et puis ici, vous pouvez enregistrer cette exécution

07:49.170 --> 07:51.310
comme un intergiciel.

07:51.310 --> 07:54.480
Il s'agit donc d'un intergiciel fourni par un paquet

07:54.480 --> 07:58.130
tiers qui va analyser le corps de toutes les requêtes entrantes

07:58.130 --> 08:01.570
et extraire toutes les données JSON qu'il y trouve pour

08:01.570 --> 08:05.990
ensuite remplir la clé body de cet objet de requête avec ces données JSON

08:05.990 --> 08:07.970
analysées.

08:07.970 --> 08:10.290
C'est ce que fait ce middleware

08:10.290 --> 08:12.503
JSON du paquet body-parser.

08:13.890 --> 08:16.520
Et avec cela, nous devrions avoir un serveur qui est capable

08:16.520 --> 08:18.230
de créer de nouveaux dos.

08:18.230 --> 08:22.210
Sauvegardez tous les fichiers et assurez-vous qu'il se recompile sans erreur.

08:22.210 --> 08:26.150
Assurez-vous que nodemon sert toujours l'application. fichier js.

08:26.150 --> 08:28.560
Et maintenant nous devons envoyer une demande de poste.

08:28.560 --> 08:31.150
Et avec le navigateur, nous ne pouvons pas le faire,

08:31.150 --> 08:34.260
mais nous pouvons utiliser un outil pour cela, Postman.

08:34.260 --> 08:35.600
Il vous suffit de le rechercher

08:35.600 --> 08:38.160
et d'installer l'application Postman sur votre système.

08:38.160 --> 08:39.283
L'utilisation est gratuite.

08:40.440 --> 08:41.570
Une fois que vous l'avez installé,

08:41.570 --> 08:43.390
vous pouvez le démarrer et vous devriez voir un écran

08:43.390 --> 08:44.440
qui ressemble à ceci.

08:44.440 --> 08:46.460
Si vous voyez une modalité de recouvrement, vous

08:46.460 --> 08:48.010
pouvez simplement la fermer.

08:48.010 --> 08:50.240
Et là, vous pouvez maintenant créer une nouvelle

08:50.240 --> 08:51.740
demande en cliquant sur ce plus,

08:51.740 --> 08:53.040
en choisissant le type de demande,

08:53.040 --> 08:55.100
dans ce cas, une demande de poste, en entrant

08:55.100 --> 08:56.450
l'URL.

08:56.450 --> 08:58.820
Ici, c'est localhost 3000, 3000 parce

08:58.820 --> 09:01.660
que c'est le port que j'ai choisi ici.

09:01.660 --> 09:03.100
Et ensuite nous devons

09:03.100 --> 09:06.320
envoyer la requête à slash todos slash rien.

09:06.320 --> 09:10.000
Donc ici pour slash todos slash rien.

09:10.000 --> 09:12.120
Nous voulons joindre un corps à la requête,

09:12.120 --> 09:15.440
et cela devrait être un corps brut JSON ici pour envoyer

09:15.440 --> 09:17.010
des données JSON.

09:17.010 --> 09:19.480
Et maintenant, que devons-nous envoyer ici ?

09:19.480 --> 09:21.840
Eh bien, ce que nous extrayons dans la fonction de l'intergiciel,

09:21.840 --> 09:22.880
donc dans ce cas, nous devrions

09:22.880 --> 09:24.570
avoir une propriété de texte dans le cadre

09:24.570 --> 09:27.410
de nos données JSON que nous envoyons.

09:27.410 --> 09:29.610
Donc ici, ajoutons un texte comme un nom et ensuite

09:29.610 --> 09:31.070
n'importe quel texte de votre

09:31.070 --> 09:33.230
choix, comme terminer le cours.

09:33.230 --> 09:36.960
Et si vous cliquez maintenant sur envoyer, il envoie la demande, et voici

09:36.960 --> 09:38.990
la réponse, et cela semble bon.

09:38.990 --> 09:40.670
On a récupéré la création d'un objet à faire.

09:40.670 --> 09:43.600
Nous voyons l'ID qui a été généré et le texte.

09:43.600 --> 09:45.870
Donc notre backend fonctionne clairement ici.

09:45.870 --> 09:47.690
Et nous avons écrit tout ça avec TypeScript,

09:47.690 --> 09:49.880
mais nous le servons comme du JavaScript normal.

09:49.880 --> 09:51.183
C'est toute l'astuce.
