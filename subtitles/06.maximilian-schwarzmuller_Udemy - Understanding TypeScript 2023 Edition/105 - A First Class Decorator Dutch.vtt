WEBVTT

00:02.130 --> 00:05.620
-: Voor dat bijgevoegd vind je ons goede oude start project,

00:05.620 --> 00:08.470
ik heb de server al gestart met NPM start.

00:08.470 --> 00:12.320
En het TypeScript-bewakingsproces met TSC-W.

00:12.320 --> 00:14.870
En het allereerste wat we daar moeten configureren

00:14.870 --> 00:18.030
is in een tsconfig bestand, zorg ervoor dat je doel

00:18.030 --> 00:21.620
is ingesteld op es6 en dan, als je naar beneden scrolt, zorg

00:21.620 --> 00:24.230
ervoor dat je deze experimentele decorator

00:24.230 --> 00:26.720
regel hier toevoegt.

00:26.720 --> 00:28.380
En voeg hier een komma voor en dan

00:28.380 --> 00:31.700
kun je AutoFormat om dit alles correct te formatteren.

00:31.700 --> 00:34.020
Dit is belangrijk, anders kunt u geen decorateurs

00:34.020 --> 00:36.000
gebruiken in uw project.

00:36.000 --> 00:37.250
Dus zorg ervoor dat

00:37.250 --> 00:40.540
je je tsconfig aanpast. json bestand op de juiste manier.

00:40.540 --> 00:42.630
En daarmee kunnen we meteen in de app duiken

00:42.630 --> 00:46.980
en onze eerste decorator schrijven. ts bestand.

00:46.980 --> 00:50.950
En ik wil beginnen met een decorator die we aan een klasse kunnen toevoegen.

00:50.950 --> 00:54.530
Nu gaan decoratoren in het algemeen over klassen, maar dit is een

00:54.530 --> 00:55.363
decorator die

00:55.363 --> 00:58.220
we aan de klasse als geheel zullen toevoegen.

00:58.220 --> 01:00.730
Laten we daarvoor zeggen dat we een klasse hebben,

01:00.730 --> 01:04.360
Person, een zeer triviale klasse, waarin we een naam hebben.

01:04.360 --> 01:07.530
Misschien met een waarde van Max, hier voorgeïnitialiseerd.

01:07.530 --> 01:10.520
Waar we een constructor functie hebben waar ik gewoon

01:10.520 --> 01:12.600
het creëren van persoon object log, zodat

01:12.600 --> 01:14.763
we zien dat dit wordt uitgevoerd.

01:15.880 --> 01:19.363
En dan kunnen we hier natuurlijk een nieuwe persoon aanmaken,

01:20.760 --> 01:22.910
met een nieuw trefwoord, zoals dit.

01:22.910 --> 01:24.030
En als we dat willen, kunnen

01:24.030 --> 01:26.490
we natuurlijk deze gecreëerde persoon loggen.

01:26.490 --> 01:28.330
En dit zou geen verrassing moeten

01:28.330 --> 01:29.430
zijn, als we dat allemaal

01:29.430 --> 01:32.090
opslaan, compileert het zonder fouten.

01:32.090 --> 01:33.700
En als we dan onze pagina bezoeken,

01:33.700 --> 01:36.670
op Localhost: 3000, zien we in de JavaScript-console

01:36.670 --> 01:38.900
Creating person object dat uit de constructor

01:38.900 --> 01:41.140
komt.

01:41.140 --> 01:44.603
En we zien natuurlijk allemaal de Persoon zelf hier.

01:45.810 --> 01:49.550
In dit voorbeeld zijn er geen decorateurs bij betrokken.

01:49.550 --> 01:51.000
Laten we dit veranderen.

01:51.000 --> 01:53.370
Laten we bovenaan het bestand een decorator toevoegen.

01:53.370 --> 01:56.060
En een decorateur, en dat is echt belangrijk om te begrijpen,

01:56.060 --> 01:58.080
is uiteindelijk gewoon een functie.

01:58.080 --> 02:01.280
Een functie die je ergens op toepast, bijvoorbeeld op

02:01.280 --> 02:03.530
een klasse op een bepaalde manier.

02:03.530 --> 02:04.750
Dus laten we hier een

02:04.750 --> 02:09.523
functie maken, met het functie sleutelwoord, en ik noem het Logger.

02:10.390 --> 02:13.290
Nu is dit een functie, het enige bijzondere hier

02:13.290 --> 02:15.570
is dat ik begin met een hoofdletter.

02:15.570 --> 02:16.492
Dit is overigens

02:16.492 --> 02:20.200
geen must, je hoeft geen hoofdletter te gebruiken, je kunt

02:20.200 --> 02:22.470
ook een kleine letter gebruiken, je

02:22.470 --> 02:25.610
ziet alleen veel decorators in bibliotheken die

02:25.610 --> 02:27.680
je misschien gebruikt die hoofdletterbeginkarakters

02:27.680 --> 02:32.200
gebruiken en daarom doe ik dat hier ook.

02:32.200 --> 02:35.450
Dus, de Logger functie hier is een functie en we kunnen

02:35.450 --> 02:39.330
dit toepassen als een decorator zoals zal blijken.

02:39.330 --> 02:42.730
Laten we nu een console log toevoegen, Loggen, zodat we kunnen

02:42.730 --> 02:44.730
zien wanneer deze functie draait.

02:44.730 --> 02:47.300
Omdat ik het niet direct zal noemen.

02:47.300 --> 02:50.330
In plaats daarvan wil ik het toevoegen als een decorator aan deze klasse.

02:50.330 --> 02:53.710
En dat doen we door een @ symbool toe te voegen

02:53.710 --> 02:57.370
voor de klasse en dan onze functie hier.

02:57.370 --> 02:58.440
Zoals dit.

02:58.440 --> 03:00.320
Nu een paar speciale dingen hier.

03:00.320 --> 03:03.780
Het @ symbool hier is een speciale identificatie

03:03.780 --> 03:06.170
die TypeScript ziet of herkent.

03:06.170 --> 03:09.110
En dan moet het ding direct na het @ symbool

03:09.110 --> 03:11.010
naar een functie wijzen.

03:11.010 --> 03:13.460
Niet uitvoeren, maar aanwijzen. Dat

03:13.460 --> 03:15.800
zou je decorateur moeten zijn.

03:15.800 --> 03:17.400
Nu zie je hier dat Logger dan te weinig

03:17.400 --> 03:20.650
argumenten accepteert om hier als decorator te worden gebruikt.

03:20.650 --> 03:23.010
Het goede is dat TypeScript begrijpt dat ik het

03:23.010 --> 03:24.930
hier als decorator wil gebruiken.

03:24.930 --> 03:27.980
Het slechte is dat we niet genoeg argumenten doorgeven.

03:27.980 --> 03:31.000
En inderdaad, decorateurs krijgen argumenten.

03:31.000 --> 03:34.870
Hoeveel argumenten hangt af van waar u de decorator gebruikt.

03:34.870 --> 03:39.710
Hier krijgen we voor een decorator die we aan een klasse toevoegen één argument.

03:39.710 --> 03:42.910
Dat is het doel van deze decorator, die

03:42.910 --> 03:46.160
onze constructeursfunctie is.

03:46.160 --> 03:49.020
Dus we kunnen zeggen dat we hier uiteindelijk

03:49.020 --> 03:51.240
een functie als argument krijgen.

03:51.240 --> 03:54.110
We kunnen het ook constructor noemen, want uiteindelijk

03:54.110 --> 03:56.650
krijgen we onze constructorfunctie van deze

03:56.650 --> 03:59.550
klasse, of van welke klasse we ook deze decorator als

03:59.550 --> 04:01.470
argument toevoegen.

04:01.470 --> 04:06.310
Laten we ook troosten. log dat zodat we wat inzicht krijgen

04:06.310 --> 04:09.650
in dit constructor argument hier.

04:09.650 --> 04:10.550
En laten we dit bewaren.

04:10.550 --> 04:12.750
En zoals je ziet compileert het zonder fouten.

04:12.750 --> 04:14.750
En als we nu onze uitvoer bekijken, zien

04:14.750 --> 04:16.580
we de oude code van voorheen, maar

04:16.580 --> 04:18.590
we zien ook de Logging uitvoer, en deze

04:18.590 --> 04:20.810
constructor functie wordt gelogd.

04:20.810 --> 04:22.760
We zien hier eigenlijk de hele klasse,

04:22.760 --> 04:24.520
maar klassen zijn uiteindelijk

04:24.520 --> 04:27.670
gewoon tactisch suiker over constructorfuncties.

04:27.670 --> 04:31.450
Merk ook op dat onze decorator output, Logging, en deze

04:31.450 --> 04:35.030
klasse of deze constructorfunctie log hier eerst

04:35.030 --> 04:39.460
wordt afgedrukt, voordat we het Creëren van persoon object en

04:39.460 --> 04:41.540
ons Persoon object zien.

04:41.540 --> 04:44.360
Want inderdaad, decorators en dat is echt belangrijk,

04:44.360 --> 04:48.430
decorators voeren uit wanneer je klasse gedefinieerd is.

04:48.430 --> 04:50.530
Niet wanneer het wordt geïnstantieerd.

04:50.530 --> 04:53.020
Je hoeft je klasse helemaal niet te instantiëren.

04:53.020 --> 04:55.760
We zouden die code voor het instantiëren van de klasse kunnen

04:55.760 --> 04:58.780
verwijderen, en nog steeds die decoratoruitvoer krijgen.

04:58.780 --> 05:02.210
Dus de decorator draait wanneer JavaScript je klasse

05:02.210 --> 05:05.660
definitie, je constructorfunctie definitie vindt.

05:05.660 --> 05:08.580
Niet als je die constructorfunctie gebruikt om een

05:08.580 --> 05:10.070
object te instantiëren.

05:10.070 --> 05:13.280
Dat is echt belangrijk om te begrijpen.

05:13.280 --> 05:15.170
Dus dit is onze eerste versierder.

05:15.170 --> 05:16.670
Het is echter niet de enige manier

05:16.670 --> 05:19.063
waarop we een decorateur kunnen maken.
