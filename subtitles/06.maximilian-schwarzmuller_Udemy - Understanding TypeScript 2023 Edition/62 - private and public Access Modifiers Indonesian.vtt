WEBVTT

00:02.040 --> 00:04.180
Guru: Jadi itu adalah kelas yang sangat dasar.

00:04.180 --> 00:05.930
Sekarang, ketika membangun kelas, mereka

00:05.930 --> 00:08.400
sering kali menjadi lebih kompleks daripada itu.

00:08.400 --> 00:10.800
Dan Anda mungkin ingin menyimpan lebih banyak data di sana.

00:10.800 --> 00:15.160
Katakanlah semua departemen harus memiliki karyawan.

00:15.160 --> 00:18.160
Itu bisa berupa larik, dan awalnya

00:18.160 --> 00:20.290
mungkin larik kosong.

00:20.290 --> 00:23.520
Dan juga untuk sedikit lebih tepat tentang apa yang

00:23.520 --> 00:24.980
ingin Anda simpan di sana,

00:24.980 --> 00:28.800
itu bisa berupa larik string agar relatif sederhana.

00:28.800 --> 00:31.733
Sekarang kita bisa memiliki metode di sini addEmployee.

00:33.030 --> 00:36.880
Di sana kita menginginkan karyawan sebagai argumen, yang seharusnya

00:36.880 --> 00:39.430
hanya berupa string dalam contoh kita.

00:39.430 --> 00:42.650
Kemudian kita bisa mengatur ini. karyawan. mendorong.

00:42.650 --> 00:47.320
Jadi, dorong karyawan baru ke dalam larik karyawan kita dengan

00:47.320 --> 00:48.373
kode ini.

00:50.750 --> 00:52.683
Sekarang kita juga bisa menambahkan metode

00:53.666 --> 00:55.749
lain, printEmployeeInformation.

01:00.508 --> 01:05.508
Dan di sana saya ingin menghibur. log(ini. karyawan. panjang) dan saya

01:07.766 --> 01:12.766
juga ingin menghibur. log(ini. karyawan) itu sendiri.

01:15.510 --> 01:18.480
Sekarang jika kita turun ke bawah sini, sekarang kita dapat

01:18.480 --> 01:20.560
mengomentari kode ini di sini, yang akan rusak

01:20.560 --> 01:24.070
lagi karena kita tidak lagi sesuai dengan deskripsi departemen dengan

01:24.070 --> 01:25.870
objek kita di bawah sana.

01:25.870 --> 01:29.200
Dan sebagai gantinya di sini, pada departemen akuntansi ini, kita

01:29.200 --> 01:32.234
bisa menambahkan seorang karyawan, katakanlah Max.

01:32.234 --> 01:35.400
Dan karyawan lain, katakanlah Manu.

01:35.400 --> 01:37.690
Dan kemudian, selain menjelaskannya,

01:37.690 --> 01:41.520
saya juga ingin mendapatkan informasi karyawan saya di sana.

01:41.520 --> 01:44.600
Jika kita menyimpan ini, kita akan mendapatkan output

01:44.600 --> 01:47.830
ini, dua karyawan dan inilah beberapa informasi.

01:47.830 --> 01:50.240
Sekarang, semua itu bagus untuk dimiliki.

01:50.240 --> 01:52.700
Satu masalah yang kita miliki dengan kelas

01:52.700 --> 01:55.960
ini adalah bahwa kita bisa mengubah karyawan dari luar,

01:55.960 --> 01:58.160
tidak hanya dengan add employee, tetapi

01:58.160 --> 02:01.710
dengan langsung mengakses properti karyawan, seperti yang

02:01.710 --> 02:04.430
bisa kita lakukan untuk nama juga.

02:04.430 --> 02:07.630
Jadi yang saya maksud adalah kita juga bisa pergi ke akuntansi,

02:07.630 --> 02:10.560
dan kemudian menjangkau karyawan, dan mungkin

02:10.560 --> 02:13.870
menambahkan karyawan lain di indeks dua, dan di sana melewati

02:13.870 --> 02:16.400
Anna, seperti itu.

02:16.400 --> 02:18.210
Jika kita melakukan itu dan kita menyimpannya, kita

02:18.210 --> 02:20.290
mendapatkan tiga karyawan dan kita mendapatkan Anna.

02:20.290 --> 02:22.710
Sekarang Anda mungkin berpikir, bagus sekali, kita punya cara lain.

02:22.710 --> 02:25.230
Nah, ketika membangun aplikasi yang lebih kompleks,

02:25.230 --> 02:27.980
Anda biasanya ingin menghindari hal seperti ini.

02:27.980 --> 02:30.930
Anda ingin memastikan bahwa ada satu jalur yang jelas,

02:30.930 --> 02:34.870
satu cara menggunakan kelas Anda, dan hal-hal seperti itu, cara-cara alternatif

02:34.870 --> 02:38.530
untuk menggunakannya, tidak benar-benar didukung.

02:38.530 --> 02:41.230
Karena jika Anda bekerja dalam tim yang lebih besar,

02:41.230 --> 02:42.920
maka satu kolega akan menggunakan

02:42.920 --> 02:45.700
pendekatan ini untuk menambahkan karyawan dan kolega

02:45.700 --> 02:48.050
lain mungkin menggunakan pendekatan ini.

02:48.050 --> 02:49.280
Dan Anda tidak menginginkan ini.

02:49.280 --> 02:52.640
Anda ingin memiliki satu cara yang seragam untuk melakukan ini.

02:52.640 --> 02:55.960
Juga, karena mungkin dalam metode add employee, Anda melakukan

02:55.960 --> 02:58.420
lebih dari sekedar menambahkannya ke array.

02:58.420 --> 02:59.770
Mungkin Anda pertama-tama

02:59.770 --> 03:02.400
ingin memiliki beberapa validasi dll di sini.

03:02.400 --> 03:04.940
Jadi, Anda mungkin memiliki kode tambahan di

03:04.940 --> 03:06.610
sana, yang tidak akan dieksekusi

03:06.610 --> 03:09.470
jika Anda langsung menetapkan nilai baru atau menambahkan

03:09.470 --> 03:12.970
nilai baru ke larik dengan baris ini di sini.

03:12.970 --> 03:16.000
Jadi, Anda tidak ingin mengizinkan karyawan

03:16.000 --> 03:19.884
dapat diakses seperti ini dari luar kelas.

03:19.884 --> 03:22.340
Dan TypeScript membantu Anda.

03:22.340 --> 03:26.760
Anda dapat mengubah karyawan di sini menjadi properti pribadi,

03:26.760 --> 03:30.580
bidang pribadi dengan menambahkan kata kunci pribadi

03:30.580 --> 03:32.220
di depannya.

03:32.220 --> 03:34.303
Sekarang apa yang dimaksud dengan

03:34.303 --> 03:38.030
private adalah bahwa karyawan sekarang menjadi properti,

03:38.030 --> 03:41.210
yang hanya dapat diakses dari dalam kelas, jadi

03:41.210 --> 03:43.480
dari dalam objek kreatif.

03:43.480 --> 03:46.700
Jadi, metode apa pun di dalam kelas departemen

03:46.700 --> 03:49.770
masih bisa bekerja dengan karyawan.

03:49.770 --> 03:52.570
Tetapi Anda tidak bisa mengakses seperti ini lagi.

03:52.570 --> 03:54.710
Di sini Anda lihat, saya sekarang mendapatkan error.

03:54.710 --> 03:57.280
Jika saya mencoba menyimpan ini, saya mendapatkan

03:57.280 --> 03:59.870
kesalahan kompilasi bahwa properti 'employees' bersifat

03:59.870 --> 04:03.550
privat dan hanya dapat diakses di dalam kelas 'department'.

04:03.550 --> 04:07.100
Jadi sekarang kita memaksa bahwa ketika karyawan harus

04:07.100 --> 04:09.370
ditambahkan ke departemen ini, orang

04:09.370 --> 04:12.690
harus menggunakan metode addEmployee.

04:12.690 --> 04:16.760
Karena mereka mendapatkan error jika menulis kode seperti ini.

04:16.760 --> 04:20.460
Ini adalah apa yang disebut modifier di sini, kata kunci privat.

04:20.460 --> 04:23.470
Dan selain privat, kami juga punya publik, yang

04:23.470 --> 04:25.000
merupakan standarnya.

04:25.000 --> 04:26.590
Anda tidak perlu menambahkan publik.

04:26.590 --> 04:29.590
Jadi, nama seperti ini sama persis dengan nama

04:29.590 --> 04:31.650
dengan publik di depannya.

04:31.650 --> 04:34.300
Perbedaannya adalah, properti publik

04:34.300 --> 04:36.350
dapat diakses dari luar.

04:36.350 --> 04:40.350
Jadi misalnya di sini, saya juga bisa menjangkau nama dan

04:40.350 --> 04:43.600
menetapkan nama baru di sini jika saya mau.

04:43.600 --> 04:45.260
Itu mungkin saja.

04:45.260 --> 04:49.270
Untuk properti pribadi, hal ini di sini tidak memungkinkan.

04:49.270 --> 04:51.580
Kita hanya bisa menggunakannya dari dalam.

04:51.580 --> 04:52.800
Secara teknis, omong-omong,

04:52.800 --> 04:55.700
JavaScript tidak mengenal publik dan privat.

04:55.700 --> 04:59.630
Hanya dalam versi yang sangat modern yang ditambahkan baru-baru

04:59.630 --> 05:01.320
ini, hal semacam itu ada.

05:01.320 --> 05:03.650
Di masa lalu, JavaScript tidak mengenal

05:03.650 --> 05:05.690
properti privat atau publik.

05:05.690 --> 05:08.520
Semua properti selalu bersifat publik di sana.

05:08.520 --> 05:10.630
TypeScript memperkenalkan fitur

05:10.630 --> 05:13.561
ini, yang tentu saja tidak bekerja selama runtime,

05:13.561 --> 05:16.620
karena JavaScript sampai saat ini hanya mengenal

05:16.620 --> 05:18.780
properti publik.

05:18.780 --> 05:21.290
Jadi baris ini di sini, kesalahan beku selama

05:21.290 --> 05:23.130
kompilasi TypeScript.

05:23.130 --> 05:27.000
Jika Anda mengkompilasinya ke JavaScript, kode ini akan tetap

05:27.000 --> 05:30.140
berjalan saat runtime tanpa kesalahan karena sekali

05:30.140 --> 05:32.800
lagi, JavaScript sendiri, sampai saat ini

05:32.800 --> 05:34.900
tidak mengetahui konsep ini.

05:34.900 --> 05:37.350
Jadi, tergantung pada versi yang Anda kompilasi, tetap

05:37.350 --> 05:38.720
tidak akan mengetahuinya.

05:38.720 --> 05:40.770
Dan oleh karena itu, TypeScript hanya mendukung

05:40.770 --> 05:42.980
hal ini karena ia memeriksanya selama kompilasi,

05:42.980 --> 05:44.650
bukan pada saat runtime.

05:44.650 --> 05:47.370
Namun, dengan itu, kita dapat menghindari kode seperti ini dan memaksa

05:47.370 --> 05:49.863
semua orang untuk menulis kode yang lebih bersih.
