WEBVTT

00:02.120 --> 00:02.953
Dus dat was een belangrijke

00:02.953 --> 00:04.960
eerste reeks opties.

00:04.960 --> 00:07.520
Laten we nu in deze strikte opties duiken, want

00:07.520 --> 00:09.860
die zijn behoorlijk interessant.

00:09.860 --> 00:12.150
Er is deze strikte waar optie, en eigenlijk

00:12.150 --> 00:13.590
wat dit doet is het inschakelen

00:13.590 --> 00:16.750
van alle strikte typecontrole opties, dus in feite is het

00:16.750 --> 00:18.830
instellen hiervan hetzelfde als wanneer

00:18.830 --> 00:22.110
u al deze opties afzonderlijk had ingesteld.

00:22.110 --> 00:24.830
U kunt dus al deze opties een voor een instellen,

00:24.830 --> 00:27.110
of alleen deze optie.

00:27.110 --> 00:29.510
Natuurlijk moet je de individuele opties

00:29.510 --> 00:33.020
instellen als je sommige opties op false wilt hebben.

00:33.020 --> 00:34.790
Want anders staan ze allemaal op waar.

00:34.790 --> 00:36.520
Als u ze allemaal op waar wilt zetten, is

00:36.520 --> 00:39.290
het gebruik van alleen deze optie natuurlijk veel korter.

00:39.290 --> 00:41.360
Maar wat doen deze opties?

00:41.360 --> 00:43.213
Laten we beginnen met noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny is een heel interessante optie die ons helpt

00:47.410 --> 00:49.180
betere code te schrijven.

00:49.180 --> 00:51.370
Laten we naar ons analytics-bestand gaan,

00:51.370 --> 00:53.963
en daar een functie toevoegen, sendAnalytics,

00:55.270 --> 00:58.070
die een data-optie krijgt, laten we zeggen, en daar

00:58.070 --> 01:01.010
kunnen we dit naar een server sturen, maar hier log ik

01:01.010 --> 01:03.430
het gewoon via de console.

01:03.430 --> 01:07.500
Dan roep ik sendAnalytics aan met de gegevens, dus

01:07.500 --> 01:08.920
met de string.

01:08.920 --> 01:11.080
Zoals je ziet klaagt mijn IDE hier al en TypeScript

01:11.080 --> 01:13.160
de compiler ook, want die twee zijn natuurlijk

01:13.160 --> 01:14.960
met elkaar verbonden als ik dit probeerde

01:14.960 --> 01:17.040
te compileren.

01:17.040 --> 01:20.070
Parametergegevens hebben impliciet een any type.

01:20.070 --> 01:21.350
Dit lijkt dus verband

01:21.350 --> 01:23.940
te houden met deze noImplicitAny optie.

01:23.940 --> 01:27.150
Inderdaad, als ik dit op false zet, dus als ik alle

01:27.150 --> 01:29.300
strikte opties op true zet maar

01:29.300 --> 01:31.521
deze optie op false, wat ik kan doen,

01:31.521 --> 01:33.810
dan gaat deze fout weg.

01:33.810 --> 01:37.140
Zowel in de IDE als wanneer we de code compileren.

01:37.140 --> 01:38.730
Dus wat doet deze optie?

01:38.730 --> 01:41.440
Het zorgt ervoor, en ik zal het opnieuw becommentariëren

01:41.440 --> 01:44.210
om het weer aan te zetten vanwege strikte

01:44.210 --> 01:47.050
waarheid, dat we duidelijk moeten zijn over

01:47.050 --> 01:49.410
onze parameters, over de waarden waarmee

01:49.410 --> 01:53.020
we werken in onze code.

01:53.020 --> 01:56.600
Hier geven we TypeScript geen informatie over het

01:56.600 --> 01:59.930
type gegevens dat we als parameter krijgen.

01:59.930 --> 02:01.320
En dat moeten we ook.

02:01.320 --> 02:03.800
Als TypeScript dit kan afleiden, dan is het natuurlijk

02:03.800 --> 02:05.360
prima, maar hoe zou TypeScript

02:05.360 --> 02:08.770
dit kunnen afleiden uit deze regel, bedenk wel dat deze functie

02:08.770 --> 02:11.470
eerst wordt gedeclareerd voordat dit bestand wordt

02:11.470 --> 02:12.950
uitgevoerd.

02:12.950 --> 02:15.080
Dus op het moment dat de functie wordt gecreëerd,

02:15.080 --> 02:18.380
is er geen kans om te weten wat erin terecht zal komen.

02:18.380 --> 02:20.100
Dus hier kunnen we deze fout oplossen

02:20.100 --> 02:22.570
door gewoon het type te declareren en duidelijk te zijn

02:22.570 --> 02:24.253
over welk type we daar gebruiken.

02:25.100 --> 02:29.530
Merk nu op dat als je een variabele had gelogd, als je dit hier

02:29.530 --> 02:32.650
op true zet, je geen fout krijgt over deze

02:32.650 --> 02:34.720
declaratie, ook al krijgt het

02:34.720 --> 02:37.670
ook een standaard type van any.

02:37.670 --> 02:39.250
Voor variabelen is dit oké.

02:39.250 --> 02:40.910
Voor de parameters is het niet oké.

02:40.910 --> 02:42.480
Waarom is het goed voor variabelen?

02:42.480 --> 02:44.370
Want wat TypeScript doet voor variabelen,

02:44.370 --> 02:45.940
wat hier niet mogelijk is omdat

02:45.940 --> 02:47.040
de functie eerst wordt

02:47.040 --> 02:48.880
aangemaakt.

02:48.880 --> 02:52.490
Hier kan TypeScript de waarden volgen die u toekent.

02:52.490 --> 02:54.650
Zie je, oké, ik heb

02:54.650 --> 02:56.720
hier zo gelogd, nu

02:56.720 --> 02:58.573
zet ik het op waar,

02:59.430 --> 03:08.030
dus daarom, daarna, als ik console log hier, is het een boolean.

03:08.030 --> 03:10.300
TypeScript is hier dus in staat om de flow

03:10.300 --> 03:11.893
van je code te begrijpen, en

03:11.893 --> 03:14.320
daarom hoef je hier niet precies te zijn over

03:14.320 --> 03:15.430
een type.

03:15.430 --> 03:18.020
Natuurlijk wil je precies zijn als je wilt voorkomen

03:18.020 --> 03:20.310
dat je de nieuwe waarde vrij kunt toewijzen, wat

03:20.310 --> 03:22.940
je hier kunt doen omdat het van het type any is.

03:22.940 --> 03:25.700
Je moet dus nog steeds een type toekennen om dit te vermijden,

03:25.700 --> 03:27.680
maar TypeScript kan tenminste uitzoeken

03:27.680 --> 03:29.490
of de code die je aanroept werkt met het

03:29.490 --> 03:31.410
type dat het momenteel bezit.

03:31.410 --> 03:32.410
Dat is hier niet het geval,

03:32.410 --> 03:35.360
want daar wordt de functie gedefinieerd voordat je hem aanroept,

03:35.360 --> 03:37.800
en daarom zou TypeScript niet kunnen weten of wat

03:37.800 --> 03:39.570
je daar doorgeeft gebruikt kan worden

03:39.570 --> 03:41.393
in de functie.

03:43.280 --> 03:46.020
strictNullChecks is nooit een belangrijke optie.

03:46.020 --> 03:48.520
Het heeft eigenlijk te maken met onze knopenselectie

03:48.520 --> 03:49.410
die we hier hebben.

03:49.410 --> 03:51.820
Vergeet niet dat ik dit uitroepteken moest toevoegen om het

03:51.820 --> 03:52.670
te laten werken.

03:52.670 --> 03:54.380
Anders zou ik een foutmelding krijgen.

03:54.380 --> 03:56.220
Nu kunnen we ons ook van die fout

03:56.220 --> 03:58.430
ontdoen zonder het uitroepteken toe

03:58.430 --> 04:02.090
te voegen door strictNullChecks op false te zetten.

04:02.090 --> 04:04.200
Dus laten we dat hier doen en dit opslaan.

04:04.200 --> 04:07.860
En zoals je ziet is deze fout hier nu weg.

04:07.860 --> 04:10.120
En ik kan alle bestanden compileren.

04:10.120 --> 04:12.340
Wat doen strictNullChecks nu?

04:12.340 --> 04:16.160
Ze vertellen TypeScript om behoorlijk streng te zijn wat

04:16.160 --> 04:19.410
betreft de toegang tot en het werken met waarden die

04:19.410 --> 04:22.530
mogelijk een nulwaarde kunnen bevatten.

04:22.530 --> 04:24.850
En de knop hier kan nietig zijn.

04:24.850 --> 04:29.210
Het wijst niet altijd naar een knoopelement.

04:29.210 --> 04:31.390
Het wijst niet altijd naar zo'n element,

04:31.390 --> 04:34.220
want ook al heb je hier zo'n selector, een knop bestaat

04:34.220 --> 04:36.900
misschien gewoon niet op de pagina waarop dit

04:36.900 --> 04:38.490
script draait.

04:38.490 --> 04:40.840
En daarom kan TypeScript het niet weten,

04:40.840 --> 04:43.790
omdat het niet in je html bestand duikt en daar

04:43.790 --> 04:44.900
naar kijkt.

04:44.900 --> 04:48.240
Zij kan niet zeggen of dit succesvol zal zijn of niet.

04:48.240 --> 04:53.130
En als dit er niet in slaagt een pointer en een null node terug te geven, dan geeft

04:53.130 --> 04:56.650
het null terug, nou ja ongedefinieerd om precies te zijn,

04:56.650 --> 04:59.090
maar dat wordt hier gelijk behandeld.

04:59.090 --> 05:01.610
Dus daarom zou die knop een nulwaarde kunnen hebben, en

05:01.610 --> 05:03.530
daarom zou deze code kunnen mislukken.

05:03.530 --> 05:06.610
Inderdaad, als ik deze knop hier uitcommentarieer, als ik

05:06.610 --> 05:08.480
nu alles compileer werkt het omdat ik

05:08.480 --> 05:10.733
de null controles heb uitgeschakeld.

05:12.000 --> 05:14.100
Maar ik heb nu dus een runtime error omdat

05:14.100 --> 05:16.210
ik event listener, addEventListener,

05:16.210 --> 05:18.230
niet kan aanroepen op null.

05:18.230 --> 05:20.970
En ik ben hier nietig omdat ik geen knop heb.

05:20.970 --> 05:23.110
Nu is dit een fout die we kunnen vermijden

05:23.110 --> 05:26.760
door strictNullChecks op true te zetten.

05:26.760 --> 05:30.340
En dat wordt automatisch ingesteld als we strict op true zetten.

05:30.340 --> 05:34.450
Waar TypeScript anticipeert dat dit zou kunnen gebeuren,

05:34.450 --> 05:38.600
en ons dus dwingt daar omheen te werken.

05:38.600 --> 05:40.640
Een goedkope oplossing

05:40.640 --> 05:42.820
is dit uitroepteken.

05:42.820 --> 05:46.020
Dit vertelt TypeScript dat u, de ontwikkelaar,

05:46.020 --> 05:48.360
weet dat deze knop bestaat, of

05:48.360 --> 05:53.360
dat deze bewerking een niet-null waarde zal opleveren.

05:53.710 --> 05:55.830
Nu misschien wel, zeker als

05:55.830 --> 05:58.990
je weet dat je aan de HTML code werkt en dat

05:58.990 --> 06:00.430
hier een knop is, dat

06:00.430 --> 06:03.310
deze selector hier zal werken.

06:03.310 --> 06:05.610
Het uitroepteken mag in dit scenario dus best

06:05.610 --> 06:06.623
gebruikt worden.

06:07.600 --> 06:09.040
Als je een ander scenario

06:09.040 --> 06:11.120
hebt waarbij je niet zeker weet of het

06:11.120 --> 06:13.050
werkt en je gewoon hoopt dat het werkt,

06:13.050 --> 06:14.170
dan is het misschien

06:14.170 --> 06:18.210
beter om de code die zou kunnen falen gewoon in te pakken in een if check,

06:18.210 --> 06:21.570
die er natuurlijk ook tijdens runtime zal zijn.

06:21.570 --> 06:24.960
Je kunt gewoon controleren of de knop waar is, wat niet het geval

06:24.960 --> 06:27.510
zal zijn als hij nul of ongedefinieerd is.

06:27.510 --> 06:30.060
En zet die code in deze als controle hier.

06:30.060 --> 06:32.470
Zelfs zonder het uitroepteken krijgen

06:32.470 --> 06:35.810
we in strictNullChecks modus geen foutmelding omdat

06:35.810 --> 06:37.600
TypeScript begrijpt dat deze

06:37.600 --> 06:39.750
code in dit if statement staat en

06:39.750 --> 06:41.991
dat dit if statement ervoor zorgt

06:41.991 --> 06:46.310
dat de knop niet null is en dat dit niet zal mislukken.

06:46.310 --> 06:49.310
Dus dit zou wel eens een betere oplossing kunnen zijn.

06:49.310 --> 06:51.060
Maar natuurlijk, om code te besparen,

06:51.060 --> 06:54.350
als je met zekerheid weet dat iets bestaat, is het gebruik

06:54.350 --> 06:56.550
van het uitroepteken korter en een absoluut

06:56.550 --> 06:58.320
prima optie.

06:58.320 --> 07:00.450
Hier zei ik beide, zodat we beide zien, natuurlijk

07:00.450 --> 07:02.450
heb je maar één van de twee dingen nodig, ofwel

07:02.450 --> 07:04.520
de if check, ofwel het uitroepteken.

07:04.520 --> 07:07.680
strictFunctionTypes hier is een beetje een meer

07:07.680 --> 07:12.010
geavanceerde instelling die wat nicheboxen vangt die je misschien

07:12.010 --> 07:14.830
niet in veel toepassingen hebt.

07:14.830 --> 07:17.340
Het heeft te maken met, nou ja, functietypes die u misschien

07:17.340 --> 07:18.380
instelt.

07:18.380 --> 07:20.650
Dus niet types binnen functies, maar als je

07:20.650 --> 07:23.690
definieert hoe een functie eruit moet zien wat betreft zijn

07:23.690 --> 07:26.220
parameters en terugkeerwaarde, en je maakt zo'n

07:26.220 --> 07:27.840
functietype, waarover je hebt

07:27.840 --> 07:29.990
geleerd in de basismodule, dan kun je daar

07:29.990 --> 07:32.650
box invoeren als je werkt met klassen en overerving,

07:32.650 --> 07:35.560
waarover we nog niet hebben geleerd, die we nog niet hebben

07:35.560 --> 07:36.950
gebruikt, en daarom laten

07:36.950 --> 07:39.683
we dit voor nu buiten beschouwing.

07:40.578 --> 07:43.630
strictBindCallApply, dat kan nuttig zijn

07:43.630 --> 07:46.840
als je werkt met bind, call, of apply.

07:46.840 --> 07:49.680
Laten we daarvoor snel een voorbeeld bekijken.

07:49.680 --> 07:52.040
Hier hebben we onze knop en onze functie.

07:52.040 --> 07:57.040
Laten we zeggen dat dit een functie zou zijn, die we hier definiëren met het

07:57.780 --> 08:01.100
functie sleutelwoord, of als een foutfunctie.

08:01.100 --> 08:03.650
Maakt niet uit, ik gebruik het functie sleutelwoord hier.

08:04.731 --> 08:09.731
clickHandler, en daarin console ik. log geklikt.

08:11.960 --> 08:13.810
En nu wijzen we hier naar clickHandler,

08:13.810 --> 08:15.560
en om een of andere reden willen we ervoor

08:15.560 --> 08:17.670
zorgen dat wanneer dit wordt uitgevoerd,

08:17.670 --> 08:19.330
we bepaalde argumenten doorgeven

08:19.330 --> 08:22.780
of we stellen het this keyword in op een bepaalde waarde.

08:22.780 --> 08:26.480
Laten we zeggen dat we hier een berichtargument verwachten,

08:26.480 --> 08:28.110
dat een string moet zijn.

08:28.110 --> 08:32.110
En we willen dit hier ook uitvoeren.

08:32.110 --> 08:34.400
Aangezien clickHandler wordt doorgegeven

08:34.400 --> 08:36.010
aan addEventListener zodat de

08:36.010 --> 08:39.080
browser dit in principe voor ons uitvoert, kunnen we, als

08:39.080 --> 08:41.070
we de argumenten die worden doorgegeven

08:41.070 --> 08:43.570
vooraf willen configureren, binden.

08:43.570 --> 08:47.000
En bind, als eerste argument, neemt wat we willen

08:47.000 --> 08:49.320
binden aan dit sleutelwoord.

08:49.320 --> 08:51.650
En hier zouden we kunnen zeggen dat het ons niet

08:51.650 --> 08:53.580
uitmaakt omdat we dit niet gebruiken

08:53.580 --> 08:55.930
in de functie, dus binden we het aan null.

08:55.930 --> 08:57.700
Nu zie je hier dat ik een fout krijg.

08:57.700 --> 09:00.610
Ik krijg een fout die vermeden kan worden

09:00.610 --> 09:04.613
als ik strictBindCallApply op false zet.

09:07.040 --> 09:08.680
Nu zie je dat de fout weg is.

09:08.680 --> 09:10.501
Wat doet deze optie dan?

09:10.501 --> 09:14.180
Het controleert in principe welke functie je aanroept: binden,

09:14.180 --> 09:16.020
aanroepen of toepassen.

09:16.020 --> 09:20.080
En het controleert of wat je hier opzet zinvol is.

09:20.080 --> 09:23.440
En hier ziet TypeScript dat we een argument willen, we willen

09:23.440 --> 09:25.450
de parameter in clickHandler.

09:25.450 --> 09:28.260
Met binden, configureren we dat echter niet.

09:28.260 --> 09:30.600
En daarom krijgen we hier een fout.

09:30.600 --> 09:32.180
Als ik dit weer op true zet, of ik

09:32.180 --> 09:34.000
heb het gewoon uitgecommentarieerd

09:34.000 --> 09:36.230
omdat het natuurlijk standaard op true staat

09:36.230 --> 09:37.870
door strict op true te zetten, krijgen

09:37.870 --> 09:39.790
we dus weer de fout.

09:39.790 --> 09:42.350
Als we hier geen argument zouden verwachten, zou

09:42.350 --> 09:44.750
de foutmelding weg zijn als we alleen het bericht

09:44.750 --> 09:46.200
zouden verwijderen, omdat TypeScript

09:46.200 --> 09:48.140
onze code begrijpt en ziet dat je geen

09:48.140 --> 09:50.660
argumenten doorgeeft aan die methode of aan die functie

09:50.660 --> 09:52.580
omdat die geen argumenten aanneemt,

09:52.580 --> 09:54.760
dus dat is prima.

09:54.760 --> 09:57.420
Maar natuurlijk, hier willen we er een dus krijgen we een foutmelding.

09:57.420 --> 10:00.880
De oplossing is om dit tweede argument hier te geven,

10:00.880 --> 10:04.350
wat het eerste argument is dat je wilt invoeren.

10:04.350 --> 10:06.290
Nu is TypeScript hier echt slim.

10:06.290 --> 10:08.120
En als ik bijvoorbeeld een getal invoer,

10:08.120 --> 10:10.310
zou het nog steeds klagen omdat het begrijpt dat ik

10:10.310 --> 10:11.610
hier een string nodig heb.

10:12.500 --> 10:15.960
Als ik echter een correcte string doorgeef, zoals

10:15.960 --> 10:17.350
u bent welkom, dan klaagt

10:17.350 --> 10:19.070
hij niet meer omdat hij dit

10:19.070 --> 10:21.210
niet begrijpt en ziet dat dit overeenkomt

10:21.210 --> 10:24.840
met mijn functiedefinitie hier.

10:24.840 --> 10:27.370
Dit is dus een zeer nuttig gedrag dat ervoor zorgt

10:27.370 --> 10:30.260
dat u niet per ongeluk bind, call, of apply gebruikt

10:30.260 --> 10:32.743
op een manier die niet werkt met uw code.

10:33.930 --> 10:36.600
Nu wordt strictPropertyInitialization belangrijk zodra

10:36.600 --> 10:37.810
we met klassen werken.

10:37.810 --> 10:39.213
We kunnen het voorlopig negeren.

10:39.213 --> 10:41.890
noImplicitDit doet er nu ook niet toe.

10:41.890 --> 10:43.650
Het heeft te maken met het this keyword

10:43.650 --> 10:45.980
en TypeScript probeert je te waarschuwen als

10:45.980 --> 10:48.240
je het this keyword gebruikt op een plaats waar

10:48.240 --> 10:51.020
het niet duidelijk is waarnaar het verwijst.

10:51.020 --> 10:53.210
En alwaysStrict regelt gewoon dat de gegenereerde

10:53.210 --> 10:55.560
JavaScript-bestanden de strikte modus gebruiken,

10:55.560 --> 10:58.663
zodat dit wordt toegevoegd.

10:59.710 --> 11:02.383
Daarmee hebben we al deze strenge opties afgedekt.
