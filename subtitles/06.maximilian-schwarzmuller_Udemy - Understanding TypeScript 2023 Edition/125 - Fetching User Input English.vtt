WEBVTT

1
00:00:02.150 --> 00:00:06.180
<v Instructor>So we're able to gather our title input value</v>

2
00:00:06.180 --> 00:00:07.420
and print it to the console,

3
00:00:07.420 --> 00:00:10.160
but of course, that's not ultimately the idea.

4
00:00:10.160 --> 00:00:13.940
Instead, the idea is that we gather all our input values,

5
00:00:13.940 --> 00:00:15.420
quickly validate them,

6
00:00:15.420 --> 00:00:17.890
and then do something with them.

7
00:00:17.890 --> 00:00:20.598
For that, I'll add yet another new method,

8
00:00:20.598 --> 00:00:21.860
another private method,

9
00:00:21.860 --> 00:00:25.700
because I'm only going to call it from inside the class,

10
00:00:25.700 --> 00:00:28.530
and that's the gatherUserInput method.

11
00:00:28.530 --> 00:00:30.460
Name is totally up to you.

12
00:00:30.460 --> 00:00:33.240
My idea is that this method gets called here.

13
00:00:33.240 --> 00:00:35.230
After we prevented the default,

14
00:00:35.230 --> 00:00:38.980
this should basically reach out to all our inputs here,

15
00:00:38.980 --> 00:00:40.870
gather the user input there,

16
00:00:40.870 --> 00:00:43.060
validate it, and then return it.

17
00:00:43.060 --> 00:00:45.950
So that here, I got my userInput,

18
00:00:45.950 --> 00:00:50.090
which could be a tuple with the title, the description,

19
00:00:50.090 --> 00:00:53.810
and the people, as the free tuple values.

20
00:00:53.810 --> 00:00:55.510
Actually, I like that idea.

21
00:00:55.510 --> 00:00:57.800
So, let's already define a return type here.

22
00:00:57.800 --> 00:00:59.880
The return type is a tuple.

23
00:00:59.880 --> 00:01:02.620
Now do you remember how a tuple is defined?

24
00:01:02.620 --> 00:01:05.630
How the type of a tuple is defined?

25
00:01:05.630 --> 00:01:08.620
It's not string, square brackets.

26
00:01:08.620 --> 00:01:12.260
That means you're returning an array of strings.

27
00:01:12.260 --> 00:01:14.550
Instead, I want to say that I return

28
00:01:14.550 --> 00:01:18.160
an array of exactly X elements

29
00:01:18.160 --> 00:01:21.510
of exactly these three types.

30
00:01:21.510 --> 00:01:23.650
And for that, you set the return type here,

31
00:01:23.650 --> 00:01:27.160
two square brackets, and then inside of the square brackets,

32
00:01:27.160 --> 00:01:30.240
you add the different elements, and element types.

33
00:01:30.240 --> 00:01:32.900
For example, string, string, and number.

34
00:01:32.900 --> 00:01:37.130
With that, you are saying this method here returns a tuple,

35
00:01:37.130 --> 00:01:38.510
which has three elements,

36
00:01:38.510 --> 00:01:40.300
where the first element is a string,

37
00:01:40.300 --> 00:01:41.820
second element is a string,

38
00:01:41.820 --> 00:01:44.080
and third element is actually a number.

39
00:01:44.080 --> 00:01:46.360
And now we can add some logic to this method

40
00:01:46.360 --> 00:01:48.540
to make that become true.

41
00:01:48.540 --> 00:01:52.670
So for that, let's first of all get the entered title

42
00:01:52.670 --> 00:01:57.210
from this titleInputElement.value.

43
00:01:57.210 --> 00:01:58.340
And we can repeat that.

44
00:01:58.340 --> 00:02:01.920
We also want the entered description of course

45
00:02:01.920 --> 00:02:05.100
from this descriptionInputElement.value,

46
00:02:05.100 --> 00:02:09.510
and the enteredPeople amount, or just enteredPeople

47
00:02:09.510 --> 00:02:12.440
from this peopleInputElement.

48
00:02:12.440 --> 00:02:13.870
Now I stored this in constants

49
00:02:13.870 --> 00:02:15.490
so that I don't always have to repeat

50
00:02:15.490 --> 00:02:17.640
these longer expressions.

51
00:02:17.640 --> 00:02:19.370
Now, we can validate this.

52
00:02:19.370 --> 00:02:21.500
A trivial validation would be to check

53
00:02:21.500 --> 00:02:24.850
if enteredTitle.trim,

54
00:02:24.850 --> 00:02:27.610
So removing X's wide space at the beginning and end.

55
00:02:27.610 --> 00:02:30.560
Length is equal to zero,

56
00:02:30.560 --> 00:02:35.350
or if enteredDescription.trim

57
00:02:35.350 --> 00:02:37.570
length is equal to zero,

58
00:02:37.570 --> 00:02:41.520
or if enteredPeople.trim

59
00:02:41.520 --> 00:02:44.380
length is equal to zero.

60
00:02:44.380 --> 00:02:48.410
That would check that no input is empty.

61
00:02:48.410 --> 00:02:50.330
Now, it does not check everything

62
00:02:50.330 --> 00:02:51.860
we might wanna check though.

63
00:02:51.860 --> 00:02:54.770
We are not checking whether entered people is,

64
00:02:54.770 --> 00:02:57.160
let's say, a positive number.

65
00:02:57.160 --> 00:03:00.170
We're not able to set a minimum length.

66
00:03:00.170 --> 00:03:02.190
We would have to add more and more conditions here,

67
00:03:02.190 --> 00:03:04.050
and whilst we can do this,

68
00:03:04.050 --> 00:03:06.820
this would not really be a scalable solution.

69
00:03:06.820 --> 00:03:09.110
If we have our parts in the application

70
00:03:09.110 --> 00:03:11.550
where we also wanna validate user input,

71
00:03:11.550 --> 00:03:14.440
we always have to repeat long if statements.

72
00:03:14.440 --> 00:03:18.390
So I will come up with a smarter validation solution

73
00:03:18.390 --> 00:03:21.960
or a more scalable validation solution soon.

74
00:03:21.960 --> 00:03:23.780
For now, we can leave it like this.

75
00:03:23.780 --> 00:03:26.190
You can already think about this though,

76
00:03:26.190 --> 00:03:28.520
and of course after this lecture here,

77
00:03:28.520 --> 00:03:32.220
pause and think how you could outsource this

78
00:03:32.220 --> 00:03:34.670
into a separate validation function

79
00:03:34.670 --> 00:03:38.350
which is configurable, and how types could help you there.

80
00:03:38.350 --> 00:03:41.370
There are definitely many possible approaches,

81
00:03:41.370 --> 00:03:44.040
and I will share mine with you in the next lecture.

82
00:03:44.040 --> 00:03:45.620
But before we make it there,

83
00:03:45.620 --> 00:03:48.350
let's actually use this trivial approach here

84
00:03:48.350 --> 00:03:52.130
and do something if all these conditions are satisfied.

85
00:03:52.130 --> 00:03:53.620
Now if we make it into this if block,

86
00:03:53.620 --> 00:03:56.000
we know at least one validation failed,

87
00:03:56.000 --> 00:03:57.350
and then we can through in alert,

88
00:03:57.350 --> 00:04:01.833
where we say Invalid input, please try again.

89
00:04:03.450 --> 00:04:04.910
Else,

90
00:04:04.910 --> 00:04:06.200
if we don't make it in there,

91
00:04:06.200 --> 00:04:08.600
we know we do have a valid input,

92
00:04:08.600 --> 00:04:11.310
else, I want to return my tuple.

93
00:04:11.310 --> 00:04:14.170
So here, I want to return the entered title,

94
00:04:14.170 --> 00:04:17.090
the entered description,

95
00:04:17.090 --> 00:04:19.660
and also entered people.

96
00:04:19.660 --> 00:04:20.630
Now as you can tell though,

97
00:04:20.630 --> 00:04:21.850
types group is not happy,

98
00:04:21.850 --> 00:04:24.210
because entered people should be a number,

99
00:04:24.210 --> 00:04:25.370
not text.

100
00:04:25.370 --> 00:04:27.410
And actually, everything you extract

101
00:04:27.410 --> 00:04:28.720
from the value property

102
00:04:28.720 --> 00:04:32.350
of an input element will be text by default.

103
00:04:32.350 --> 00:04:34.520
So to turn this into a number,

104
00:04:34.520 --> 00:04:38.060
we can call parseFloat, for example,

105
00:04:38.060 --> 00:04:40.610
or simply add a plus in front of it,

106
00:04:40.610 --> 00:04:42.850
and this will convert it to a number,

107
00:04:42.850 --> 00:04:45.430
and still types group is not happy

108
00:04:45.430 --> 00:04:48.910
because, well, we not always return a tuple.

109
00:04:48.910 --> 00:04:50.830
What about this part here?

110
00:04:50.830 --> 00:04:52.310
If we make it into the if block

111
00:04:52.310 --> 00:04:53.510
we're showing an alert,

112
00:04:53.510 --> 00:04:55.820
but we're not returning a tuple.

113
00:04:55.820 --> 00:04:59.810
Well, there are various things we could do instead.

114
00:04:59.810 --> 00:05:03.460
We can just return nothing, like this.

115
00:05:03.460 --> 00:05:06.320
Alternatively, we could throw an error.

116
00:05:06.320 --> 00:05:08.360
Then, we would actually not return anything,

117
00:05:08.360 --> 00:05:11.100
but we'll throw an error in that case.

118
00:05:11.100 --> 00:05:12.820
Now, I don't wanna throw an error here

119
00:05:12.820 --> 00:05:15.570
because I don't really wanna implement error handling,

120
00:05:15.570 --> 00:05:18.090
so what I'll do is I'll just add a return statement,

121
00:05:18.090 --> 00:05:20.100
but of course this is not a tuple.

122
00:05:20.100 --> 00:05:23.110
So actually, the return type up here is a tuple,

123
00:05:23.110 --> 00:05:25.923
or it's actually undefined.

124
00:05:27.320 --> 00:05:29.040
Now however, as you learned,

125
00:05:29.040 --> 00:05:30.750
you shouldn't use undefined here

126
00:05:30.750 --> 00:05:32.550
as a return type on functions.

127
00:05:32.550 --> 00:05:34.040
Instead use void.

128
00:05:34.040 --> 00:05:35.410
It's almost the same,

129
00:05:35.410 --> 00:05:37.040
but exclusive to functions,

130
00:05:37.040 --> 00:05:39.350
and this tells TypeScript that this is a function

131
00:05:39.350 --> 00:05:44.350
which has at least a branch which does not return any value

132
00:05:45.230 --> 00:05:46.930
like this one does.

133
00:05:46.930 --> 00:05:49.160
Here we also of course use a union type

134
00:05:49.160 --> 00:05:51.240
because we have both possibilities.

135
00:05:51.240 --> 00:05:53.170
We might return nothing,

136
00:05:53.170 --> 00:05:55.660
or we actually return a tuple.

137
00:05:55.660 --> 00:05:57.510
So now, we have gatherUserInput

138
00:05:57.510 --> 00:05:59.370
and userInput there for all is

139
00:05:59.370 --> 00:06:01.670
either undefined in the end

140
00:06:01.670 --> 00:06:04.130
or it is that tuple.

141
00:06:04.130 --> 00:06:07.640
So now, before we move on and improve validation,

142
00:06:07.640 --> 00:06:09.620
let's build up on that userInput.

143
00:06:09.620 --> 00:06:12.480
When we gather the userInput down there,

144
00:06:12.480 --> 00:06:14.820
we now have that userInput thing,

145
00:06:14.820 --> 00:06:17.050
and now we can check if it is a tuple.

146
00:06:17.050 --> 00:06:19.820
Now the problem is at runtime,

147
00:06:19.820 --> 00:06:22.620
we have no way of checking whether it is a tuple.

148
00:06:22.620 --> 00:06:25.200
There is no instanceof we could use.

149
00:06:25.200 --> 00:06:28.560
There is no Tuple type we could check.

150
00:06:28.560 --> 00:06:31.020
We can also not check if typof

151
00:06:33.803 --> 00:06:36.053
userInput is equal to tuple

152
00:06:37.130 --> 00:06:40.050
because that does not exist in Vanilla JavaScript.

153
00:06:40.050 --> 00:06:41.850
String does exist for example,

154
00:06:41.850 --> 00:06:44.950
but tuple is not a JavaScript type.

155
00:06:44.950 --> 00:06:47.020
So to check whether it is a tuple,

156
00:06:47.020 --> 00:06:48.900
we have to remember that tuples

157
00:06:48.900 --> 00:06:50.990
in the end are just erased.

158
00:06:50.990 --> 00:06:52.750
They are special in TypeScript,

159
00:06:52.750 --> 00:06:54.860
but once we're in JavaScript land

160
00:06:54.860 --> 00:06:55.940
they're just erased

161
00:06:55.940 --> 00:06:58.320
because the idea of a tuple

162
00:06:58.320 --> 00:06:59.950
where the number of elements

163
00:06:59.950 --> 00:07:02.000
and the types of elements is fixed

164
00:07:02.000 --> 00:07:04.470
really only exists in TypeScript.

165
00:07:04.470 --> 00:07:05.930
So, during runtime,

166
00:07:05.930 --> 00:07:09.370
all we need to check here is whether it's an array,

167
00:07:09.370 --> 00:07:12.950
and for that, we can use the array object in JavaScript,

168
00:07:12.950 --> 00:07:15.180
and there the isArray method.

169
00:07:15.180 --> 00:07:17.500
That's a method built into Vanilla JavaScript

170
00:07:17.500 --> 00:07:20.290
which allows us to check whether this here is an array.

171
00:07:20.290 --> 00:07:23.200
We know it's either undefined or a tuple.

172
00:07:23.200 --> 00:07:24.630
A tuple is an array,

173
00:07:24.630 --> 00:07:26.000
so if this returns true,

174
00:07:26.000 --> 00:07:27.400
we got the tuple.

175
00:07:27.400 --> 00:07:31.010
And then here, we can use the structuring for example

176
00:07:31.010 --> 00:07:34.070
to get the title, the description, and the people

177
00:07:34.070 --> 00:07:35.560
out of user input,

178
00:07:35.560 --> 00:07:37.720
and then do something with that input.

179
00:07:37.720 --> 00:07:39.230
For example for now,

180
00:07:39.230 --> 00:07:42.623
console.log title, description, and people.

181
00:07:43.980 --> 00:07:46.060
If we do all of that and we save it all,

182
00:07:46.060 --> 00:07:47.950
it compiles with no errors,

183
00:07:47.950 --> 00:07:49.870
and if we go back here,

184
00:07:49.870 --> 00:07:51.310
and I click at project like this,

185
00:07:51.310 --> 00:07:53.050
I get invalid input.

186
00:07:53.050 --> 00:07:54.580
If I enter Hello,

187
00:07:54.580 --> 00:07:56.950
still get it because we got no description.

188
00:07:56.950 --> 00:07:58.890
This is a description.

189
00:07:58.890 --> 00:08:00.180
We still get it of course,

190
00:08:00.180 --> 00:08:02.940
but if I now also enter something into people,

191
00:08:02.940 --> 00:08:05.220
this works and we print this here.

192
00:08:05.220 --> 00:08:09.330
Now that's of course a nice step in the right direction.

193
00:08:09.330 --> 00:08:10.990
We're not entirely there yet.

194
00:08:10.990 --> 00:08:13.330
As I said we can improve validation.

195
00:08:13.330 --> 00:08:16.230
Just one thing I wanna do right away before we do that,

196
00:08:16.230 --> 00:08:20.070
I wanna clear all the inputs after we click ADD PROJECT.

197
00:08:20.070 --> 00:08:22.440
So I wanna empty all the inputs again.

198
00:08:22.440 --> 00:08:25.290
Now for that, we can add a new private method,

199
00:08:25.290 --> 00:08:27.043
clearInput or clearInputs,

200
00:08:28.210 --> 00:08:32.740
and there, we can set this titleInputElement.value

201
00:08:32.740 --> 00:08:34.130
equal to an empty string

202
00:08:36.200 --> 00:08:38.980
and repeat that for the other inputs as well.

203
00:08:38.980 --> 00:08:41.960
So here, we have the descriptionInputElement,

204
00:08:41.960 --> 00:08:44.250
and here, we have the peopleInputElement,

205
00:08:44.250 --> 00:08:48.190
and now, if we call this.clearInputs here,

206
00:08:48.190 --> 00:08:50.200
we should make sure that the form is cleared

207
00:08:50.200 --> 00:08:51.730
once it is submitted.

208
00:08:51.730 --> 00:08:52.870
So if we try this again,

209
00:08:52.870 --> 00:08:54.380
enter something here,

210
00:08:54.380 --> 00:08:56.230
you see it's printed here,

211
00:08:56.230 --> 00:08:57.740
and the form is cleared.

212
00:08:57.740 --> 00:09:00.720
With that, I'm generally happy with how we handled this,

213
00:09:00.720 --> 00:09:03.300
but now I wanna improve validation

214
00:09:03.300 --> 00:09:06.970
and write this in a more reusable, scalable way.

215
00:09:06.970 --> 00:09:07.840
As I mentioned,

216
00:09:07.840 --> 00:09:10.320
definitely feel free to do this on your own first.

217
00:09:10.320 --> 00:09:11.530
In the next lecture,

218
00:09:11.530 --> 00:09:12.580
we'll do it together.

