WEBVTT

00:02.280 --> 00:03.780
المدرب: دعنا نتعمق أكثر في

00:03.780 --> 00:06.450
الأنواع الأساسية التي يدعمها TypeScript.

00:06.450 --> 00:09.800
النوع التالي المثير للاهتمام هو نوع الكائن.

00:09.800 --> 00:13.100
الآن ، أنت تعرف الكائنات في JavaScript ، تبدو هكذا.

00:13.100 --> 00:14.690
لديك أقواس متعرجة ومن ثم

00:14.690 --> 00:16.350
لديك أزواج قيم مفتاح هناك

00:16.350 --> 00:20.460
وسيتم أيضًا التعامل مع هذه القيم كأنواع كائنات في TypeScript

00:20.460 --> 00:22.250
، لذا فإن أي كائن JavaScript

00:22.250 --> 00:23.620
يكون من نوع كائن.

00:23.620 --> 00:28.410
على الرغم من أنني سأقول بالفعل أن هناك إصدارات أكثر تحديدًا من الكائنات

00:28.410 --> 00:30.030
في TypeScript بحيث يمكنك

00:30.030 --> 00:32.514
القول أن هذا ليس مجرد كائن ، فهذا كائن

00:32.514 --> 00:35.108
يجب أن يحتوي على هذه الخصائص أو يجب

00:35.108 --> 00:37.260
أن يعتمد على وظيفة المُنشئ هذه

00:37.260 --> 00:39.490
أو تلك.

00:39.490 --> 00:41.322
لكننا سنصل إلى هناك خطوة بخطوة.

00:41.322 --> 00:45.110
للغوص في الكائنات ، سأقوم أولاً بإعادة تسمية التطبيق. هنا وسأعيد تسمية

00:45.110 --> 00:49.770
هذا إلى الأساسيات. هنا.

00:49.770 --> 00:52.058
وإضافة تطبيق جديد. ts ، والذي سيتجاوز

00:52.058 --> 00:55.400
التطبيق القديم بعد ذلك. js بمجرد تجميعه ، حيث

00:55.400 --> 00:58.600
يمكننا الآن الغوص في الكائنات.

00:58.600 --> 01:01.110
ودعنا نبدأ بإنشاء كائن أساسي هنا ،

01:01.110 --> 01:03.902
دعنا نقول شخصًا لديه أقواس مجعدة هنا.

01:03.902 --> 01:05.870
ونعطي هذا اسما.

01:05.870 --> 01:08.230
سأذهب هنا مع ماكسيميليان لأن

01:08.230 --> 01:10.700
هذا هو اسمي وعمري 30 عامًا.

01:10.700 --> 01:14.930
الآن ، بالطبع يمكننا أن نواسي. سجل شخصًا هنا وإذا قمنا

01:14.930 --> 01:18.375
بذلك ، وقمنا بتجميع هذا بشكل غير مفاجئ

01:18.375 --> 01:24.536
، يجب أن نرى هذا الكائن يتم طباعته هنا في وحدة التحكم.

01:24.536 --> 01:27.284
الآن ، ما يمكننا فعله أيضًا في JavaScript

01:27.284 --> 01:31.690
هو أنه يمكننا محاولة الوصول ، دعنا نقول ، لقب ، خاصية

01:31.690 --> 01:33.970
غير موجودة هنا.

01:33.970 --> 01:37.320
الآن ترى على الفور أن TypeScript ليس سعيدًا جدًا

01:37.320 --> 01:39.820
بذلك ، ومن ثم يخبرني IDE الخاص بي.

01:39.820 --> 01:42.302
يخبرني أن لقب الملكية غير موجود

01:42.302 --> 01:44.050
على هذا النوع.

01:44.050 --> 01:47.642
لذا إذا حفظنا ذلك وحاولت تجميع ذلك ، فسنحصل

01:47.642 --> 01:49.907
بالفعل على نفس الخطأ هناك.

01:49.907 --> 01:52.210
لا يحب مترجم TypeScript هذا ويخبرني

01:52.210 --> 01:54.401
أنه ليس لدينا خاصية اسم مستعار

01:54.401 --> 01:56.430
على هذا الكائن.

01:56.430 --> 01:59.813
اكتشف أنه ليس لدينا خاصية الاسم المستعار هذه لأننا

01:59.813 --> 02:02.936
إذا حركنا مؤشر الماوس فوق الشخص الذي استنتجناه

02:02.936 --> 02:05.710
، فيمكننا رؤية نقطتين بعد شخص ، لذلك بعد

02:05.710 --> 02:07.970
اسم المتغير أو الثابت.

02:07.970 --> 02:11.030
استنتجت أن هذا هو نوع البيانات المخزنة

02:11.030 --> 02:12.110
هناك.

02:12.110 --> 02:14.181
الآن هذا ليس مجرد كائن ، كما يمكنك أن تقول.

02:14.181 --> 02:16.349
هذا شيء ملموس.

02:16.349 --> 02:18.920
إنه كائن به مفتاح اسم ، حيث يجب

02:18.920 --> 02:21.430
أن يكون النوع بدوره سلسلة.

02:21.430 --> 02:24.700
والمفتاح العمري ، حيث يجب أن يكون النوع رقمًا.

02:24.700 --> 02:27.116
وفي الواقع ، قد يكون هذا محيرًا هنا.

02:27.116 --> 02:31.100
هذا ، هنا ، من الواضح أنه يشبه كائن JavaScript.

02:31.100 --> 02:33.980
الأقواس المتعرجة ، أزواج القيمة الرئيسية.

02:33.980 --> 02:36.020
حسنًا ، أول شيء مهم نراه هنا هو أن

02:36.020 --> 02:38.520
لدينا فاصلة منقوطة هنا بعد كل سطر.

02:38.520 --> 02:40.580
ليس لدينا ذلك في كائن JavaScript.

02:40.580 --> 02:41.750
لدينا فاصلة هنا.

02:41.750 --> 02:44.160
وبالفعل ، هذا ليس كائن JavaScript هنا

02:44.160 --> 02:45.940
يتم إنشاؤه في مكان ما.

02:45.940 --> 02:50.600
هذا هو نوع الكائن الذي تم استنتاجه بواسطة TypeScript وأنواع الكائنات

02:50.600 --> 02:53.914
تتم كتابتها تقريبًا مثل الكائنات ، ولكن بالطبع

02:53.914 --> 02:57.106
ليس لدينا أزواج قيم رئيسية هناك ، ولكن أزواج

02:57.106 --> 02:59.239
من نوع المفاتيح.

02:59.239 --> 03:02.840
أنواع الكائنات موجودة لوصف نوع الكائن

03:02.840 --> 03:06.064
الذي يتم استخدامه في مكان ما.

03:06.064 --> 03:07.653
يمكن أن نكون أكثر عمومية.

03:07.653 --> 03:10.420
يمكنني تحديد نوع هنا بشكل

03:10.420 --> 03:13.640
صريح لثابت الكائن.

03:13.640 --> 03:16.100
الكائن هو أحد الأنواع المضمنة ، تمامًا

03:16.100 --> 03:17.460
مثل الرقم والسلسلة

03:17.460 --> 03:21.030
، والآن إذا قمت بالمرور فوق هذا ، فإننا نرى أشخاصًا

03:21.030 --> 03:24.000
من نوع كائن ، والآن يهتم TypeScript فقط بحقيقة

03:24.000 --> 03:26.430
أن هذا نوع كائن.

03:26.430 --> 03:28.423
الآن ، ما زلنا نقوم بتجميع هذا

03:28.423 --> 03:32.808
الخطأ على الرغم من ذلك ، لأن TypeScript لا يزال يحلل الكود الخاص

03:32.808 --> 03:35.490
بنا ويرى أننا نحاول الوصول إلى شيء غير

03:35.490 --> 03:36.666
موجود هناك ، ولكن

03:36.666 --> 03:39.770
من المهم أن نفهم أن كل شيء يبدأ بنوع الكائن

03:39.770 --> 03:42.140
الأكثر عمومية. .

03:42.140 --> 03:44.660
لكن غالبًا ما تريد أن تكون أكثر تحديدًا من ذلك.

03:44.660 --> 03:47.623
أنت لا تريد فقط العمل مع نوع الكائن العام هذا.

03:47.623 --> 03:50.284
تريد حقًا الحصول على الدعم الكامل.

03:50.284 --> 03:53.550
على سبيل المثال ، في الوقت الحالي ، إذا أضفت نقطة هنا وألقيت نظرة

03:53.550 --> 03:55.570
على الإكمال التلقائي ، فلن أحصل على أي مساعدة

03:55.570 --> 03:58.080
هناك على الإطلاق من خلال IDE الخاص بي.

03:58.080 --> 04:00.303
السبب في ذلك هو أن كل ما نقوله

04:00.303 --> 04:04.230
لـ IDE هو أن لدينا قيمة هنا ، شخصيًا ، وهي من

04:04.230 --> 04:05.860
نوع الكائن.

04:05.860 --> 04:08.300
في الواقع ، لقد حصلنا الآن أيضًا على خطأ

04:08.300 --> 04:10.210
إذا حاولت الوصول إلى الاسم.

04:10.210 --> 04:12.270
الاسم موجود هنا ، صحيح؟

04:12.270 --> 04:14.120
لكن ما نقوله لـ TypeScript هنا

04:14.120 --> 04:16.601
هو أن لدينا فقط كائنًا حيث لا نعطي أيًا

04:16.601 --> 04:18.889
من معلوماتنا لـ TypeScript.

04:18.889 --> 04:21.739
لذلك في الواقع ، لا يدعم TypeScript

04:21.739 --> 04:24.750
أي نوع من الخصائص لأننا لا نخبره بأي

04:24.750 --> 04:26.210
شيء عن الكائن.

04:26.210 --> 04:28.050
لذلك يجب أن نكون أكثر تحديدًا.

04:28.050 --> 04:32.000
ونحن أكثر تحديدًا من خلال تحديد نوع كائن معين.

04:32.000 --> 04:34.795
الشيء الذي استنتجه TypeScript تلقائيًا أيضًا.

04:34.795 --> 04:38.548
نقوم بذلك عن طريق إضافة الأقواس المتعرجة

04:38.548 --> 04:43.370
هنا بعد النقطتين ، بعد اسم الثابت أو المتغير.

04:43.370 --> 04:46.213
لذلك لا يؤدي هذا هنا إلى إنشاء كائن JavaScript جديد.

04:46.213 --> 04:48.460
سيتم بالفعل تجريد هذا من كود

04:48.460 --> 04:50.310
JavaScript المترجم.

04:50.310 --> 04:52.643
بدلاً من ذلك ، هذا مجرد تدوين TypeScript

04:52.643 --> 04:55.855
لنوع كائن متخصص ، إذا جاز التعبير.

04:55.855 --> 04:59.422
لذلك من نوع الكائن حيث نقدم بعض المعلومات

04:59.422 --> 05:01.434
حول بنية الكائن.

05:01.434 --> 05:04.520
الآن ، من خلال تعيين زوج فارغ فقط من الأقواس المتعرجة

05:04.520 --> 05:07.440
كنوع ، فإننا نفعل نفس الشيء مع الكائن.

05:07.440 --> 05:09.765
نخبر TypeScript أن هذا كائن ما.

05:09.765 --> 05:12.740
الآن يمكننا أن نكون أكثر تحديدًا.

05:12.740 --> 05:16.550
يمكننا إضافة مدخلات القيمة الرئيسية هنا ، ولكن ليس قيمة

05:16.550 --> 05:19.694
المفتاح ، ولكن نوع المفتاح بدلاً من ذلك.

05:19.694 --> 05:22.800
لذلك يمكننا هنا أن نقول أن الكائن الذي

05:22.800 --> 05:25.091
يجب تخزينه شخصيًا يجب أن يكون

05:25.091 --> 05:28.197
له خاصية الاسم وأن قيمة خاصية الاسم يجب

05:28.197 --> 05:31.140
أن تكون من النوع string.

05:31.140 --> 05:33.795
لذلك نصف هنا نوع القيمة التي سيتم

05:33.795 --> 05:36.440
تخزينها في النهاية باسمها.

05:36.440 --> 05:39.320
الآن ، بالمناسبة ، ترى أني أتلقى خطأ هنا.

05:39.320 --> 05:41.090
لأن ما أخبرك به الآن لـ TypeScript

05:41.090 --> 05:43.489
هو أنه يجب أن يكون لدى شخصي كائن مع زوج

05:43.489 --> 05:45.900
واحد من قيم المفاتيح بالضبط ، حيث يكون

05:45.900 --> 05:48.626
المفتاح هو الاسم وقيمة هذا المفتاح هي سلسلة

05:48.626 --> 05:52.730
، لكننا لم نخصص كائنًا بزوجين من قيم المفاتيح .

05:52.730 --> 05:55.020
الاسم ، الذي يحتوي على سلسلة ، لا بأس

05:55.020 --> 05:58.500
به ، ولكن العمر ، الذي يحمل رقمًا ، ولن يكون ذلك جيدًا.

05:58.500 --> 06:01.140
لذا يتعين علينا هنا تعديل هذا عن طريق إضافة فاصلة

06:01.140 --> 06:03.520
منقوطة ثم إضافة زوج قيمة مفتاح آخر هنا حيث

06:03.520 --> 06:06.300
نقول أن العمر يجب أن يكون من النوع رقم.

06:06.300 --> 06:09.670
لذلك ليس 30 هنا ، هذا في الواقع سيكون مدعومًا في TypeScript

06:09.670 --> 06:12.673
، بحيث نقصره على رقم واحد محدد ، ولكن بعد ذلك سنواجه

06:12.673 --> 06:15.600
مشكلات بمجرد تغيير ذلك.

06:15.600 --> 06:19.060
بدلاً من ذلك ، أريد فقط أن أقول إن العمر يجب أن يكون عددًا ما.

06:19.060 --> 06:22.360
والآن نقوم بشكل صريح بتعيين نفس TypeScript

06:22.360 --> 06:24.870
الذي تم استنتاجه من قبل.

06:24.870 --> 06:26.900
كما تعلمت ، هذه ليست ممارسة جيدة ،

06:26.900 --> 06:28.570
لكن لفهم أنواع الكائنات أردت

06:28.570 --> 06:29.940
القيام بذلك هنا.

06:29.940 --> 06:32.315
لا يزال هذا شيء يمكنك القيام به.

06:32.315 --> 06:37.010
من الأفضل ترك TypeScript يستنتج هذا

06:37.010 --> 06:40.440
كما فعلنا من قبل ، مثل هذا.

06:40.440 --> 06:42.351
الآن ، فقط لإظهار شيء مثير للاهتمام

06:42.351 --> 06:45.450
، إذا عدت إلى هذه الشفرة دون المستوى الأمثل

06:45.450 --> 06:47.970
، حيث قمنا بتعيين نوع TypeScript بشكل

06:47.970 --> 06:49.920
صريح ، سيكون بمقدورنا الاستنتاج

06:49.920 --> 06:54.920
، إذا قمنا بتجميع هذه الشفرة ، فهي تعمل بالطبع.

06:55.180 --> 06:56.900
يمكننا الوصول إلى خاصية الاسم ، ولكن إذا ألقينا

06:56.900 --> 06:59.077
نظرة على التطبيق. js نرى أن هذا النوع

06:59.077 --> 07:01.220
من المهام قد تم إزالته هنا.

07:01.220 --> 07:03.417
وهذا بالطبع أمر متوقع.

07:03.417 --> 07:06.290
كما ذكرت ، لا تعد تعيينات الأنواع والأنواع

07:06.290 --> 07:08.120
جزءًا من JavaScript.

07:08.120 --> 07:09.460
إنهم من نوع TypeScript فقط.

07:09.460 --> 07:10.800
أردت فقط إظهار هذا مرة أخرى

07:10.800 --> 07:12.840
لأوضح حقًا أن بناء الجملة هذا هنا لا يُنشئ

07:12.840 --> 07:15.080
كائن JavaScript ، وهو موجود في مكان ما في

07:15.080 --> 07:16.485
الكود الخاص بنا.

07:16.485 --> 07:21.263
هذا مجرد تمثيل TypeScript لنوع الكائن الذي يساعد

07:21.263 --> 07:24.570
TypeScript على فهم الكائنات التي

07:24.570 --> 07:25.900
تعمل معها.

07:25.900 --> 07:29.950
بناء الجملة الأفضل ، بالطبع ، هو هذا النحو ، كما تعلمت.
