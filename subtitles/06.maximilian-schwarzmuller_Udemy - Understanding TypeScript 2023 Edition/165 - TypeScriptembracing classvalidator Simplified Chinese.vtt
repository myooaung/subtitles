WEBVTT

00:02.130 --> 00:03.630
解说员：我们看了一下Lodash,

00:03.630 --> 00:08.360
它是一个普通的JavaScript包, 我们需要在其中安装一些翻译｡

00:08.360 --> 00:13.530
我们看了一下类转换器, 它也可以在普通JavaScript中工作,

00:13.530 --> 00:17.328
但在TypeScript中也工作得特别好｡

00:17.328 --> 00:20.330
现在让我们来看看类验证器｡ 

00:20.330 --> 00:24.540
这是一个真正利用TypeScript的软件包｡ 

00:24.540 --> 00:28.300
它建立在TypeScript装饰器的概念上,

00:28.300 --> 00:34.330
并且它为我们提供了一种全新的使用它们的方式, 或者至少是几乎全新的方式｡

00:34.330 --> 00:38.230
如果你们在这门课中学习了我的装饰器模块,

00:38.230 --> 00:41.200
你们会在这节课中看到一些东西,

00:41.200 --> 00:44.150
我们也在那里建立了一些东西｡

00:44.150 --> 00:49.330
然而, 现在有了这个第三方库, 我们就不必从头开始重新发明轮子了,

00:49.330 --> 00:51.193
我们不必自己构建它｡

00:51.193 --> 00:57.830
这个库也可以说比我们在装饰器模块中的解决方案更精细｡

00:57.830 --> 01:00.026
我说的是验证｡ 

01:00.026 --> 01:02.870
这是一个包, 它允许我们在一些装饰器的帮助下,

01:02.870 --> 01:09.920
在类内部添加验证规则, 然后每当我们实例化这样一个类时, 我们就可以在装饰器的帮助下,

01:09.920 --> 01:15.610
根据我们在那里设置的规则来验证它｡

01:15.610 --> 01:18.960
现在开始, 我们只需要在这里导入此包｡ 

01:18.960 --> 01:23.130
所以npm安装了class-validator --save,

01:23.130 --> 01:26.130
然后我们就可以马上开始了｡

01:26.130 --> 01:29.220
所以让我重新启动webpack-dev-server,

01:29.220 --> 01:37.490
为了使用这个包, 我们必须向模型添加一些装饰器, 也就是向我们想要验证某些属性的类添加一些装饰器｡

01:37.490 --> 01:39.730
因此, 在我的产品模型中,

01:39.730 --> 01:43.240
我将从类验证器中导入一些内容｡

01:43.240 --> 01:47.360
现在, 如果你们在本课程中学习了装饰器模块,

01:47.360 --> 01:52.870
这是一个我在没有这个包的情况下从头开始构建的概念｡

01:52.870 --> 01:56.270
当然, 我们构建了一个非常简单和基本的版本,

01:56.270 --> 01:57.840
有了这个包, 我们就不必自己构建它了,

01:57.840 --> 02:01.200
而且它也更加复杂｡

02:01.200 --> 02:04.820
现在, 我们可以从类验证器导入某些装饰器｡

02:04.820 --> 02:11.410
例如, IsNotEmpty或IsNumber｡

02:11.410 --> 02:13.500
我们也可以导入IsPositive｡ 

02:15.940 --> 02:18.940
现在, 我们可以将它们添加到要验证的属性中｡ 

02:18.940 --> 02:24.220
比如在标题上, 我们可以添加IsNotEmpty作为装饰器,

02:24.220 --> 02:26.390
这些都是装饰器工厂,

02:26.390 --> 02:29.610
所以你必须执行它们｡

02:29.610 --> 02:37.380
这里还有IsNumber和IsPositive

02:37.380 --> 02:38.763
让我们执行它｡ 

02:40.250 --> 02:44.730
现在, 要在这里使用装饰器, 您还应该转到tsconfig｡

02:44.730 --> 02:44.730
js文件,

02:44.730 --> 02:49.550
并确保在那里打开实验性装饰器｡

02:49.550 --> 02:55.040
此后, 保存这个, 现在这里的这些区域也应该消失了｡

02:55.040 --> 03:00.840
我们还需要重新启动dev服务器, 以便它获得新的tsconfig｡

03:00.840 --> 03:00.840
js转换｡ 

03:00.840 --> 03:02.650
现在我们添加了这些规则,

03:02.650 --> 03:04.768
这些验证规则｡

03:04.768 --> 03:07.710
我们基本上是说, 标题不能是空字符串,

03:07.710 --> 03:11.830
数字应该是正数｡

03:11.830 --> 03:13.980
现在我们可以在这里创建一个新产品,

03:13.980 --> 03:15.119
比如说, 在那里, newProd,

03:15.119 --> 03:16.870
我们调用new product,

03:16.870 --> 03:25.210
我传递一个空字符串作为标题, 然后减去5｡

03:25.210 --> 03:25.210
99为号码｡ 

03:25.210 --> 03:26.700
如果我接着安慰自己｡  记录newProd､

03:27.576 --> 03:29.920
getInformation,

03:29.920 --> 03:34.830
然后执行它, 让我们看看它在哪里工作｡

03:34.830 --> 03:35.683
好了, 省省吧｡ 

03:37.840 --> 03:40.040
嗯, 它的工作｡ 

03:40.040 --> 03:42.330
我们还没有完全做到｡ 

03:42.330 --> 03:46.470
我们和装修师一起制定规则｡ 

03:46.470 --> 03:49.560
但这些装修工自己做的不多｡ 

03:49.560 --> 03:56.190
相反, 我们现在还必须从class-validator导入validator方法｡

03:56.190 --> 03:57.300
因此, 从这个包中,

03:57.300 --> 04:02.260
我们导入validate, 我们必须在一个具体的实例上执行它,

04:02.260 --> 04:05.750
离开我们添加装饰器的类｡

04:05.750 --> 04:12.020
在本例中, 我们可以运行validate并将newProd传递给它｡

04:12.020 --> 04:19.150
然后validate将返回一个实际上可能产生验证错误的promise｡

04:19.150 --> 04:21.440
所以我们可以在这里加上then,

04:21.440 --> 04:23.080
如果你在一个缓动函数中,

04:23.080 --> 04:25.680
你当然也可以使用一个权重｡

04:25.680 --> 04:30.093
在这里, 我们返回验证函数找到的错误｡

04:30.980 --> 04:31.813
重要的是,

04:31.813 --> 04:34.950
即使有错误, 我们也总是在then中结束,

04:34.950 --> 04:36.560
所以如果有验证错误,

04:36.560 --> 04:38.420
我们不会进入catch块,

04:38.420 --> 04:41.120
我们总是进入then块｡

04:41.120 --> 04:44.360
现在在这里我们现在可以检查错误,

04:44.360 --> 04:48.400
这是一个数组, 点长度是否大于零｡

04:48.400 --> 04:51.300
这意味着存在验证错误｡ 

04:51.300 --> 04:52.910
在这种情况下, 我们可以记录验证错误,

04:53.750 --> 04:59.200
也可以输出我们发现的错误｡

04:59.200 --> 05:03.700
所以安慰一下｡  日志错误, 否则在我这里的情况下,

05:03.700 --> 05:05.290
我将记录信息｡

05:05.290 --> 05:06.580
当然, 这取决于您要构建的应用程序,

05:06.580 --> 05:09.100
也取决于您要在此处执行的操作｡

05:09.100 --> 05:10.860
在本例中, 如果出现错误,

05:10.860 --> 05:13.790
您可能希望向用户显示警告｡

05:13.790 --> 05:16.520
你可能想重置输入, 不管你想做什么｡

05:16.520 --> 05:19.690
在这里, 我将向控制台记录一些内容｡ 

05:19.690 --> 05:22.080
如果我们现在保存它,

05:22.080 --> 05:27.830
您会看到验证错误, 这里是发现的错误数组｡

05:27.830 --> 05:31.890
例如, 第一个错误是在title属性上,

05:31.890 --> 05:34.770
即它不应为空｡

05:34.770 --> 05:38.290
第二个错误是关于价格的性质,

05:38.290 --> 05:41.150
它必须是正数｡

05:41.150 --> 05:44.950
这就是使用这种基于装饰器的方法,

05:44.950 --> 05:50.170
您可以轻松地为项目添加非常强大的验证｡

05:50.170 --> 05:53.190
与我们之前在课程中所做的相关,

05:53.190 --> 05:54.530
还有装饰器模块,

05:54.530 --> 05:56.062
但正如我多次提到的,

05:56.062 --> 06:06.350
更详细的是一堆内置的规则, 你可以在这个包的文档中了解到所有这些, 而不用重新发明轮子｡

06:06.350 --> 06:09.300
因此, 如果您正在使用TypeScript构建更大的项目,

06:09.300 --> 06:10.930
那么类验证器包确实是一个功能强大的包,

06:10.930 --> 06:14.693
您应该注意它｡
