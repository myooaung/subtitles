WEBVTT

00:02.230 --> 00:03.280
Instructor: Así que tenemos

00:03.280 --> 00:04.930
los fundamentos sobre los genéricos hacia

00:04.930 --> 00:07.150
abajo con suerte, ahora vamos a profundizar un poco en las

00:07.150 --> 00:09.250
restricciones, o en un tipo específico de restricción,

00:09.250 --> 00:10.400
que puede agregar.

00:10.400 --> 00:12.680
Para ello voy a operar con otra función,

00:12.680 --> 00:16.293
una función genérica, que llamaré extractAndConvert.

00:18.700 --> 00:21.550
La idea de esta función aquí es que obtenemos

00:21.550 --> 00:24.120
un objeto como primer argumento,

00:24.120 --> 00:26.340
y el segundo parámetro es, al

00:26.340 --> 00:28.413
final, una clave.

00:30.050 --> 00:32.570
Ahora quiero devolver el valor de esa clave en el objeto, lo

00:32.570 --> 00:35.310
que podemos hacer con esta notación JavaScript por defecto.

00:35.310 --> 00:36.310
Usando los corchetes

00:36.310 --> 00:38.200
para exe como una propiedad en un objeto,

00:38.200 --> 00:39.840
pero eso no es nada específico de TypeScript,

00:39.840 --> 00:42.010
eso es Vanilla JavaScript de nuevo.

00:42.010 --> 00:43.000
Ahora por lo tanto aquí

00:43.000 --> 00:44.580
podríamos decir que aquí queremos

00:44.580 --> 00:48.460
tener un objeto, y para la clave queremos tener una cadena, digamos.

00:48.460 --> 00:50.160
Ahora bien, aquí me da un error,

00:50.160 --> 00:52.000
porque lo que no sabemos aquí

00:52.000 --> 00:54.500
al final, es si el objeto que estamos obteniendo

00:54.500 --> 00:57.510
aquí realmente tendrá esa clave.

00:57.510 --> 00:59.410
Esto es lo que nos dice TypeScript

00:59.410 --> 01:01.430
con este extraño error.

01:01.430 --> 01:02.530
Por ejemplo aquí,

01:02.530 --> 01:05.700
podría registrar en la consola el resultado de llamar

01:05.700 --> 01:09.770
a esto con, digamos, un objeto vacío y luego el nombre.

01:09.770 --> 01:12.600
Y aquí por cierto estoy llamando a este extractAndConvert,

01:12.600 --> 01:16.025
porque quiero llamar a esto sin registro de la consola y simplemente

01:16.025 --> 01:18.600
decir Valor, dos puntos, más.

01:18.600 --> 01:19.660
Pero eso es sólo una nota

01:19.660 --> 01:22.450
lateral que nos devuelve al final con los datos recuperados.

01:22.450 --> 01:23.840
Pero el principal problema aquí

01:23.840 --> 01:25.160
es que podría llamarlo así y

01:26.091 --> 01:28.020
pasaría un objeto como primer parámetro,

01:28.020 --> 01:29.890
y luego una cadena como segundo.

01:29.890 --> 01:31.430
Pero correctamente, TypeScript

01:31.430 --> 01:33.200
me dice que al final no se garantiza

01:33.200 --> 01:35.193
que esa clave exista en ese objeto.

01:36.420 --> 01:39.920
Ahora, para garantizar esto, podemos volver a utilizar tipos genéricos aquí.

01:39.920 --> 01:41.620
Podríamos decir que tenemos un tipo T,

01:41.620 --> 01:43.130
y ese será nuestro objeto aquí.

01:43.130 --> 01:46.550
Podemos decir, extiende el objeto.

01:46.550 --> 01:48.363
Pero también hay que escribir U.

01:49.440 --> 01:52.850
Nuestra clave aquí digamos, que al final, tiene

01:52.850 --> 01:56.320
que ser una clave de nuestro tipo T sin embargo.

01:56.320 --> 01:58.210
Así que de este objeto, queremos

01:58.210 --> 02:01.560
garantizar que lo que obtenemos aquí como segundo parámetro

02:01.560 --> 02:04.890
como clave es una propiedad de ese primer tipo.

02:04.890 --> 02:09.130
Y para ello podemos decir extiende la clave de T.

02:11.550 --> 02:13.540
Y ahora ves que el error ha desaparecido

02:13.540 --> 02:15.370
aquí, y en cambio tengo el error ahí

02:15.370 --> 02:17.930
abajo, porque ahora estoy informando a TypeScript

02:17.930 --> 02:21.800
aquí, que el primer parámetro debe ser cualquier tipo de objeto, y el segundo

02:21.800 --> 02:23.610
parámetro debe ser cualquier tipo

02:23.610 --> 02:25.870
de clave en ese objeto.

02:25.870 --> 02:28.480
Y aquí, sí estamos pasando cualquier tipo de objeto, pero

02:28.480 --> 02:30.430
no tenemos una clave de nombre allí.

02:30.430 --> 02:34.990
Este error sólo desaparece cuando añado una clave de nombre.

02:34.990 --> 02:37.990
Así que esto es todas las veces para que podamos utilizar los

02:37.990 --> 02:41.800
tipos genéricos para con esta palabra clave keyoff aquí también, para decirle

02:41.800 --> 02:45.730
a TypeScript que queremos asegurarnos de que tenemos esta estructura correcta,

02:45.730 --> 02:47.460
y eso es, por supuesto, realmente útil,

02:47.460 --> 02:49.120
porque nos permite asegurar que

02:49.120 --> 02:51.160
no hacemos errores tontos, donde tratamos

02:51.160 --> 02:53.390
de llamar a esta función, que al final, tratamos

02:53.390 --> 02:56.740
de exe como una propiedad que no existe.

02:56.740 --> 02:58.140
Así que esto funciona.

02:58.140 --> 02:59.870
Pero si intento exe como "edad" aquí, vuelvo

02:59.870 --> 03:01.570
a obtener un error, por ejemplo.

03:02.890 --> 03:05.560
Así que vamos a cambiar esto de nuevo a "nombre" por lo tanto.
