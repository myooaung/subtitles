WEBVTT

00:02.130 --> 00:02.963
Instruktur: Jadi kita telah

00:02.963 --> 00:05.180
membahas beberapa tipe inti yang TypeScript ketahui.

00:05.180 --> 00:06.590
Sekarang mari kita lanjutkan.

00:06.590 --> 00:09.140
Untuk itu, saya akan mengganti nama aplikasi. ts di sini ke objs-arrays-enums,

00:09.140 --> 00:11.670
atau apa pun yang Anda ingin menamainya, pada dasarnya sehingga

00:11.670 --> 00:12.750
kita masih memiliki file itu,

00:12.750 --> 00:17.130
tetapi saya akan membuat aplikasi baru.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
sehingga kita memiliki file kosong

00:18.860 --> 00:20.500
lagi di mana kita bisa bekerja.

00:20.500 --> 00:22.550
Sekarang di file ini, saya ingin menyelami

00:22.550 --> 00:25.790
tipe menarik lainnya yang akan Anda temukan di TypeScript.

00:25.790 --> 00:28.640
Dan itu adalah tipe serikat pekerja.

00:28.640 --> 00:30.190
Sekarang apa itu?

00:30.190 --> 00:33.000
Mari kita kembali ke fungsi add kita, yang kita tulis sebelumnya,

00:33.000 --> 00:34.490
saya akan menyalinnya dan memindahkannya

00:34.490 --> 00:37.270
ke aplikasi. ts.

00:37.270 --> 00:39.190
Singkirkan komentar itu di sini, dan di sini di

00:39.190 --> 00:42.940
tambahkan, mari kita tutup dasar-dasarnya. ts sehingga kita menyingkirkan

00:42.940 --> 00:44.170
kesalahan itu.

00:44.170 --> 00:47.970
Di sini, di add, saya sekarang ingin lebih fleksibel mengenai

00:47.970 --> 00:49.920
apa yang kami terima di sini.

00:49.920 --> 00:52.570
Saya juga akan menyingkirkan showResult dan frase,

00:52.570 --> 00:54.370
saya tidak membutuhkannya.

00:54.370 --> 00:55.690
Dan satu-satunya hal yang ingin saya

00:55.690 --> 00:58.590
lakukan adalah saya ingin menghitung hasil dan mengembalikannya.

00:58.590 --> 01:01.960
Tetapi, saya ingin lebih fleksibel mengenai inputnya.

01:01.960 --> 01:06.045
Sebelumnya, kami memastikan bahwa kami hanya bekerja dengan angka.

01:06.045 --> 01:09.357
Sekarang katakanlah kita benar-benar menamai kombinasi

01:09.357 --> 01:13.190
ini dan harus bekerja dengan angka dan string.

01:13.190 --> 01:15.710
Karena ternyata kita bisa menggabungkan angka

01:15.710 --> 01:18.595
dan string dengan operator plus ini, satu-satunya perbedaan

01:18.595 --> 01:21.650
adalah bahwa dalam satu skenario, kita mendapatkan kembali

01:21.650 --> 01:24.030
angka sebagai hasilnya, dalam skenario lain

01:24.030 --> 01:27.120
kita mendapatkan string gabungan, seperti yang sebenarnya

01:27.120 --> 01:30.150
sudah kita lihat di awal modul ini.

01:30.150 --> 01:32.040
Tetapi sekarang saya ingin mengizinkan perilaku

01:32.040 --> 01:33.950
ini, karena Anda bisa saja memiliki aplikasi

01:33.950 --> 01:36.740
di mana Anda ingin memiliki fungsi kombinasi fleksibel yang

01:36.740 --> 01:38.963
bekerja dengan angka dan string.

01:39.830 --> 01:42.360
Oleh karena itu, saya juga akan menamai

01:42.360 --> 01:47.340
input1 ini di sini, dan input2 ini, dan menggabungkan keduanya sekarang.

01:47.340 --> 01:49.740
Tetapi kita akan memiliki satu masalah tentunya,

01:49.740 --> 01:53.180
saat ini kita menetapkan kedua parameter menjadi angka.

01:53.180 --> 01:56.050
Ini berarti bahwa kita bisa memanggil fungsi ini, selama

01:56.050 --> 01:58.190
kita memang ingin bekerja dengan angka.

01:58.190 --> 01:59.130
Katakanlah di bawah

01:59.130 --> 02:01.640
sana, kita membuat konstanta baru, combinedAges.

02:02.931 --> 02:04.690
Dan di sana saya menyebutnya

02:04.690 --> 02:09.602
menggabungkan dan meneruskan 30 dan 26 di sini sebagai usia dalam aplikasi

02:09.602 --> 02:12.000
apa pun yang kami bangun.

02:12.000 --> 02:15.014
Lain setelah log konsol digabungkan, seharusnya tidak terlalu

02:15.014 --> 02:17.240
mengejutkan bahwa jika kita sekarang mengkompilasi

02:17.240 --> 02:19.830
file ini di sini, dan kita kemudian memuat ulang halaman

02:19.830 --> 02:22.360
ini, kita mendapatkan 56.

02:22.360 --> 02:24.690
Jadi ini berhasil, kita mendapatkan angka ini.

02:24.690 --> 02:26.710
Tetapi tentu saja, kita memiliki masalah

02:26.710 --> 02:28.838
jika kita mencoba membuat string di sini.

02:28.838 --> 02:31.610
CombinedNames, misalnya.

02:31.610 --> 02:36.033
Jika saya mencoba menggabungkan Max dan Anna di sini, maka kita langsung

02:37.230 --> 02:39.630
mendapatkan error di sini bahwa Max tidak

02:39.630 --> 02:42.320
dapat di assignable ke tipe number karena ini

02:42.320 --> 02:44.350
tentu saja adalah string.

02:44.350 --> 02:45.790
Sekarang tentu saja, kita bisa mengubah

02:45.790 --> 02:47.750
ini untuk menerima string, bukan angka, tetapi

02:47.750 --> 02:50.130
sekarang pemanggilan fungsi pertama akan gagal.

02:50.130 --> 02:52.750
Dan di situlah jenis serikat pekerja bisa membantu kita.

02:52.750 --> 02:55.692
Jika kita memiliki beberapa tempat dalam aplikasi

02:55.692 --> 02:58.810
kita, baik itu parameter fungsi atau konstanta atau

02:58.810 --> 03:01.700
variabel yang kita gunakan di suatu tempat, di mana

03:01.700 --> 03:05.030
kita menerima dua jenis nilai yang berbeda.

03:05.030 --> 03:07.410
Kalau begitu, tipe serikat pekerja bisa membantu kita.

03:07.410 --> 03:09.800
Untuk memberi tahu TypeScript bahwa

03:09.800 --> 03:12.690
kita boleh menggunakan angka atau string,

03:12.690 --> 03:14.220
kita menggunakan angka

03:14.220 --> 03:17.710
dan kemudian simbol pipa di sini, dan kemudian tipe

03:17.710 --> 03:20.660
lain yang juga kita terima.

03:20.660 --> 03:22.340
Dan Anda bisa memiliki lebih dari dua jenis,

03:22.340 --> 03:25.220
Anda bisa menerima sebanyak mungkin jenis di sini sesuai kebutuhan Anda.

03:25.220 --> 03:27.050
Jadi di sini, saya hanya membutuhkan

03:27.050 --> 03:28.880
dua, dan itu adalah tipe yang diberikan

03:28.880 --> 03:31.720
yang akan saya gunakan, angka atau string.

03:31.720 --> 03:33.690
Sekarang saya mendapatkan error di sini,

03:33.690 --> 03:35.930
bahwa operator plus tidak bisa diterapkan

03:35.930 --> 03:39.120
pada tipe string atau angka dan string atau angka.

03:39.120 --> 03:41.500
Itu sebenarnya tidak sepenuhnya benar, ini

03:41.500 --> 03:44.350
seharusnya bekerja, karena kita dapat menggunakan

03:44.350 --> 03:46.670
operator plus dengan angka dan string.

03:46.670 --> 03:49.600
Tetapi TypeScript hanya melihat bahwa kita memiliki tipe

03:49.600 --> 03:52.540
union di sini, dan tidak menganalisa apa yang ada di dalam tipe

03:52.540 --> 03:56.010
union, hanya melihat, "Oke, Anda mengharapkan beberapa tipe.

03:56.010 --> 03:57.530
Mungkin itu termasuk tipe di mana

03:57.530 --> 03:59.460
saya tidak bisa menggunakan operator

03:59.460 --> 04:01.640
plus, maka saya akan mengeluh di sini. Sekarang, syukurlah, kita bisa mengatasi masalah itu.

04:01.640 --> 04:05.410
Kita dapat menambahkan pemeriksaan tipe runtime kita

04:05.410 --> 04:07.910
di sini dan melihat apakah typeof input1

04:07.910 --> 04:11.240
sama dengan angka dan jika typeof input2 sama dengan

04:12.750 --> 04:15.170
angka, dan kemudian memindahkan kalkulasi

04:16.530 --> 04:21.283
ini ke sana, sekarang hanya satu perbaikan, mari kita buat hasil sebagai

04:24.100 --> 04:28.510
variabel awal dari pemeriksaan jika itu, karena cakupan kunci,

04:28.510 --> 04:33.880
sehingga ini adalah variabel yang tersedia di seluruh fungsi, dan kemudian

04:33.880 --> 04:37.873
tetapkan nilai baru di sana.

04:37.873 --> 04:40.310
Jadi sekarang di sini kita periksa apakah kita memiliki dua angka.

04:40.310 --> 04:42.818
Dan oleh karena itu TypeScript tahu bahwa di

04:42.818 --> 04:45.890
sini, input1 dan input2 keduanya akan berupa angka.

04:45.890 --> 04:49.790
Sekarang mari kita tambahkan pemeriksaan lain di sini.

04:49.790 --> 04:53.900
Dan di sana kita bisa menetapkan hasil sama dengan input1. tostring, secara eksplisit mengubah

04:53.900 --> 04:56.913
ini menjadi string,

04:58.550 --> 05:00.570
dan input2. tostring.

05:00.570 --> 05:02.880
Dan ini juga akan baik-baik saja untuk

05:02.880 --> 05:04.160
TypeScript dan JavaScript, karena kita

05:04.160 --> 05:05.700
dapat menggabungkan dua string.

05:05.700 --> 05:08.220
Jadi sekarang kita memiliki kalkulasi yang hampir sama,

05:08.220 --> 05:10.800
tetapi kita memperjelas bahwa di sini, kita akan selalu bekerja

05:10.800 --> 05:12.110
dengan angka, di sini kita akan

05:12.110 --> 05:13.590
selalu bekerja dengan string, dan

05:13.590 --> 05:15.730
kemudian kita mengembalikan hasilnya.

05:15.730 --> 05:17.490
Dan sekarang dengan itu, jika kita

05:17.490 --> 05:20.870
konsol log nama-nama gabungan di sana, dan kita mengkompilasi

05:20.870 --> 05:25.350
file ini, kita akan melihat bahwa setelah kita mengunjungi kembali halaman kita,

05:25.350 --> 05:27.210
kita mendapatkan angka gabungan

05:27.210 --> 05:29.278
di sana, yang hanya ditambahkan bersama-sama

05:29.278 --> 05:31.460
dan karenanya kita mendapatkan angka sebagai

05:31.460 --> 05:33.150
hasilnya, dan dua nama gabungan

05:33.150 --> 05:35.090
di sini.

05:35.090 --> 05:36.850
Jadi, beginilah cara kita menggunakan

05:36.850 --> 05:40.830
tipe union agar lebih fleksibel mengenai apa yang kita lakukan dalam fungsi,

05:40.830 --> 05:43.770
misalnya, atau di mana pun dalam kode kita.

05:43.770 --> 05:45.920
Pemeriksaan tipe runtime ekstra ini tidak selalu

05:45.920 --> 05:49.520
diperlukan saat Anda bekerja dengan tipe union, tetapi sering kali akan diperlukan

05:49.520 --> 05:51.230
karena dengan tipe union, Anda bisa

05:51.230 --> 05:54.090
lebih fleksibel, misalnya, parameter yang Anda terima, tetapi

05:54.090 --> 05:56.350
kemudian Anda mungkin memiliki logika yang berbeda

05:56.350 --> 05:58.170
dalam fungsi Anda berdasarkan tipe yang

05:58.170 --> 06:00.940
tepat yang Anda dapatkan.

06:00.940 --> 06:03.730
Sehingga fungsi Anda dapat bekerja dengan beberapa

06:03.730 --> 06:05.640
jenis nilai tetapi kemudian melakukan

06:05.640 --> 06:07.810
hal-hal yang sedikit berbeda tergantung

06:07.810 --> 06:10.320
pada jenis yang Anda dapatkan.

06:10.320 --> 06:12.410
Jadi seringkali, Anda mungkin memerlukan pemeriksaan

06:12.410 --> 06:15.270
runtime seperti itu saat bekerja dengan tipe union, tetapi Anda tidak

06:15.270 --> 06:16.700
akan selalu membutuhkannya.

06:16.700 --> 06:18.490
Anda pasti juga akan menemukan situasi

06:18.490 --> 06:20.900
dalam program TypeScript di mana Anda dapat menggunakan

06:20.900 --> 06:24.060
tipe union tanpa pemeriksaan tipe runtime.

06:24.060 --> 06:25.870
Ini sangat tergantung pada logika yang Anda tulis.
