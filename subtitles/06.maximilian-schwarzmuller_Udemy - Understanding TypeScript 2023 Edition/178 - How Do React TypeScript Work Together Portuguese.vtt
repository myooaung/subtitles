WEBVTT

00:02.130 --> 00:03.970
Instrutor: Antes de mais nada, podemos iniciar

00:03.970 --> 00:06.480
nosso servidor de desenvolvimento aqui com npm start, e este

00:06.480 --> 00:08.440
é um processo que devemos continuar a executar,

00:08.440 --> 00:10.940
pois isto irá vigiar nossos arquivos para mudanças.

00:10.940 --> 00:13.270
E se algo mudar, então se você salvar uma

00:13.270 --> 00:15.620
mudança especificamente, recompilará

00:15.620 --> 00:17.776
os tipos de códigos para JavaScript,

00:17.776 --> 00:20.090
recompilará JSX para JavaScript, e no

00:20.090 --> 00:22.500
final, então construa sua aplicação de

00:22.500 --> 00:25.750
reação e a sirva no host local 3000, onde, no momento,

00:25.750 --> 00:27.630
você não vê muito.

00:27.630 --> 00:29.430
Você só pode ver aqui no console Dev que

00:29.430 --> 00:31.800
parece funcionar por causa dessa saída aqui.

00:31.800 --> 00:32.900
Você não vê muito, é claro,

00:32.900 --> 00:34.340
porque não estamos renderizando

00:34.340 --> 00:36.700
nada aqui na App. tsx no momento.

00:36.700 --> 00:38.170
É claro que isso vai mudar.

00:38.170 --> 00:39.420
E com isso em funcionamento,

00:39.420 --> 00:41.130
vamos agora escrever algum código

00:41.130 --> 00:43.580
ou vamos analisar o que temos.

00:43.580 --> 00:46.750
Em índice. tsx não temos nada de especial, certo?

00:46.750 --> 00:49.060
Este é um código JavaScript comum.

00:49.060 --> 00:52.950
Em App. tsx, mas vemos este tipo de atribuição

00:52.950 --> 00:55.250
e ali, o que podemos ver é que atribuímos

00:55.250 --> 00:57.980
este tipo estranho à App.

00:57.980 --> 01:00.270
Agora, se ignorarmos esse tipo por um segundo,

01:00.270 --> 01:02.480
o que está realmente armazenado no App?

01:02.480 --> 01:04.840
Bem, uma função, uma função de seta, mas isso

01:04.840 --> 01:07.290
ainda é uma função regular, portanto.

01:07.290 --> 01:09.960
Por que este tipo aqui não funciona ou por que este não

01:09.960 --> 01:12.570
é um dos nossos tipos de função que aprendemos?

01:12.570 --> 01:14.030
Bem, está debaixo do capô,

01:14.030 --> 01:16.450
mas este é um tipo fornecido pela reação,

01:16.450 --> 01:18.100
e agora, importante, é claro,

01:18.100 --> 01:21.070
fornecido pelo pacote de tipos de reação.

01:21.070 --> 01:26.070
Se você entrar nos módulos de nós, vemos a pasta @types aqui e ali, vemos

01:26.390 --> 01:28.470
muitos tipos, e também vemos

01:28.470 --> 01:30.670
os tipos de reações aqui, todos

01:30.670 --> 01:32.600
os tipos de reações.

01:32.600 --> 01:35.840
E, no final, este tipo é implicitamente importado automaticamente

01:35.840 --> 01:39.340
da pasta de tipos de reação, pode-se dizer.

01:39.340 --> 01:40.870
Agora, o que é este tipo?

01:40.870 --> 01:44.490
FC representa simplesmente um componente funcional.

01:44.490 --> 01:46.310
Há também uma forma mais longa disto, que você

01:46.310 --> 01:47.570
poderia usar em seu lugar.

01:47.570 --> 01:49.240
Esse é exatamente o mesmo tipo.

01:49.240 --> 01:51.090
O outro é apenas um atalho e isto

01:51.090 --> 01:54.300
simplesmente define que o que armazenamos aqui no

01:54.300 --> 01:57.750
App tem que ser função, mas uma função que se qualifica

01:57.750 --> 02:00.550
como componente de função na reação.

02:00.550 --> 02:02.840
É claro que você também escreve componentes baseados

02:02.840 --> 02:05.760
em classe e, portanto, você tem um componente clássico aqui

02:05.760 --> 02:07.420
também e, então, você teria que armazenar

02:07.420 --> 02:09.480
uma classe ali em vez de uma função, mas nós iremos

02:09.480 --> 02:12.720
com componentes de função aqui neste curso.

02:12.720 --> 02:14.670
Agora, este é um componente de função

02:14.670 --> 02:17.620
porque é uma função que retorna JSX e é assim que

02:17.620 --> 02:20.850
um componente de função é criado na reação.

02:20.850 --> 02:24.180
Se eu retirasse esta declaração de retorno temporariamente, poderíamos,

02:24.180 --> 02:26.730
portanto, obter um erro aqui, tudo se eu tentasse salvar

02:26.730 --> 02:28.800
isto e ele quisesse compilá-lo.

02:28.800 --> 02:32.440
Nós receberíamos um erro porque agora, dizemos ao TypeScript que aqui,

02:32.440 --> 02:34.960
queremos armazenar um componente de função, e

02:34.960 --> 02:38.520
tudo que armazenamos é uma função normal, não uma função que retorna

02:38.520 --> 02:40.770
JSX ou qualquer outra coisa que se qualifica

02:40.770 --> 02:42.800
como um elemento de reação.

02:42.800 --> 02:44.440
E, portanto, isto seria inválido e

02:44.440 --> 02:45.810
teríamos que consertá-lo.

02:45.810 --> 02:48.530
Portanto, aqui já podemos ver como o TypeScript melhora

02:48.530 --> 02:50.360
um pouco nosso projeto.

02:50.360 --> 02:52.500
Isso nos dá segurança extra e garante

02:52.500 --> 02:55.420
que não podemos correr em uma situação em que, por

02:55.420 --> 02:58.353
exemplo, construímos um componente inválido.

02:59.200 --> 03:03.230
Nota lateral, se pode parecer irrealista que você esqueceria esta declaração

03:03.230 --> 03:05.370
de retorno, considere que você está construindo

03:05.370 --> 03:07.970
um componente maior com múltiplas declarações de

03:07.970 --> 03:11.070
retorno e diferentes declarações de retorno.

03:11.070 --> 03:14.370
Você pode esquecer um em um ramo de sua declaração de se e então TypeScript

03:14.370 --> 03:17.010
pode definitivamente salvar seu traseiro e dar-lhe

03:17.010 --> 03:19.130
esse aviso um pouco mais cedo, do que durante

03:19.130 --> 03:21.500
o tempo de execução, onde de outra forma ele poderia

03:21.500 --> 03:23.710
cair em algumas situações.

03:23.710 --> 03:25.620
Portanto, isto é TypeScript fazendo

03:25.620 --> 03:27.740
algo, mas com isso, chega de conversa.

03:27.740 --> 03:28.690
Vamos construir algo

03:28.690 --> 03:31.670
e eu quero construir aqui um aplicativo relativamente simples,

03:31.670 --> 03:34.590
um aplicativo para fazer, bastante clássico, mas um aplicativo

03:34.590 --> 03:36.370
para fazer que nos permita, portanto, praticar

03:36.370 --> 03:39.480
alguns conceitos centrais de reação com o TypeScript.

03:39.480 --> 03:41.270
E, portanto, nas próximas palestras, vamos

03:41.270 --> 03:44.363
realmente começar nossos primeiros componentes personalizados.
