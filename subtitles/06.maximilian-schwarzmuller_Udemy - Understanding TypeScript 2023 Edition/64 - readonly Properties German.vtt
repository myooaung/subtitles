WEBVTT

00:02.280 --> 00:04.510
Kursleiter: Ein weiterer Modifikator hängt mit dem zusammen, was

00:04.510 --> 00:06.483
Sie gerade über Zugangsmodifikatoren gelernt haben.

00:07.572 --> 00:09.590
Und das ist der Readonly-Modifikator.

00:09.590 --> 00:11.310
Nehmen wir an, wir haben bestimmte

00:11.310 --> 00:14.220
Felder, die nicht nur privat oder öffentlich sein sollen,

00:14.220 --> 00:18.130
sondern die sich auch nach ihrer Initialisierung nicht mehr ändern sollen.

00:18.130 --> 00:21.410
Zum Beispiel sollte sich die ID danach nicht mehr ändern.

00:21.410 --> 00:23.520
Um klarzustellen, dass es sich nicht ändern soll,

00:23.520 --> 00:25.670
können Sie auch hier readonly hinzufügen.

00:25.670 --> 00:27.890
Und das hätten Sie hier auch noch hinzufügen können.

00:27.890 --> 00:30.920
Hier hätten Sie also auch private readonly schreiben müssen.

00:30.920 --> 00:33.990
Das readonly-Schlüsselwort wurde, genau wie private und

00:33.990 --> 00:35.710
public, von TypeScript eingeführt,

00:35.710 --> 00:37.920
in JavaScript existiert es nicht.

00:37.920 --> 00:39.910
Sie sorgt dafür, dass der Versuch,

00:39.910 --> 00:43.180
danach in die Eigenschaft zu schreiben, fehlschlägt.

00:43.180 --> 00:45.690
Sie können es also nur einmal während der Initialisierung

00:45.690 --> 00:48.620
verwenden, aber danach, sagen wir für addEmployee, aus

00:48.620 --> 00:52.430
welchem Grund auch immer, versuche ich, id in d2 zu ändern, und wir erhalten

00:52.430 --> 00:54.200
eine Fehlermeldung, dass ich id

00:54.200 --> 00:57.790
nicht zuweisen kann, weil es readonly ist.

00:57.790 --> 01:00.800
Dadurch wird eine zusätzliche Sicherheit geschaffen, um zu verdeutlichen,

01:00.800 --> 01:04.160
dass eine bestimmte Eigenschaft nur einmal initialisiert werden und sich

01:04.160 --> 01:05.920
danach nicht mehr ändern sollte, eine Anforderung,

01:05.920 --> 01:10.240
die Sie häufig für bestimmte Eigenschaften in Ihren Objekten haben.

01:10.240 --> 01:12.630
So können Sie noch einmal zusätzliche Sicherheit

01:12.630 --> 01:14.910
schaffen und Ihre Absichten deutlich machen.

01:14.910 --> 01:16.320
Natürlich kann man immer sagen:

01:16.320 --> 01:18.350
Ich bin derjenige, der den Code schreibt, ich

01:18.350 --> 01:20.470
werde nichts tun, was ich nicht will.

01:20.470 --> 01:23.060
Nun, es ist immer noch gut, sich bei der Definition des

01:23.060 --> 01:24.630
Codes sehr klar auszudrücken.

01:24.630 --> 01:28.320
Denn a) könnten Sie vergessen, was Sie eigentlich tun wollten, wenn

01:28.320 --> 01:31.280
Sie ein paar Wochen lang nicht an Ihrem Code arbeiten,

01:31.280 --> 01:32.270
und b) arbeiten Sie

01:32.270 --> 01:34.340
vielleicht in einem Team oder teilen

01:34.340 --> 01:36.550
Ihren Code mit anderen Leuten.

01:36.550 --> 01:39.390
Und es ist im Allgemeinen eine gute Idee, klaren und eindeutigen

01:39.390 --> 01:42.460
Code zu schreiben, der Ihre Absicht deutlich macht.

01:42.460 --> 01:44.280
Und readonly kann Ihnen dabei helfen,

01:44.280 --> 01:47.230
weil es sehr deutlich macht, was Ihr Ziel ist.

01:47.230 --> 01:49.570
Wenn wir einen Blick auf app. js sehen wir, wie bereits

01:49.570 --> 01:53.050
erwähnt, weder private noch public noch read only, denn

01:53.050 --> 01:55.780
das alles gibt es nur in TypeScript, nicht

01:55.780 --> 01:57.610
in JavaScript.

01:57.610 --> 02:01.420
Wir sehen auch etwas anderes, was ebenfalls interessant ist:

02:01.420 --> 02:04.580
Die Methoden werden dem Prototyp unserer Konstruktorfunktion

02:04.580 --> 02:06.490
hinzugefügt.

02:06.490 --> 02:08.830
Dazu müssen Sie wissen, was Prototypen sind,

02:08.830 --> 02:10.730
und diese in diesem Kurs vorzustellen,

02:10.730 --> 02:12.520
wäre ein bisschen zu viel.

02:12.520 --> 02:14.140
Anbei finden Sie einige Ressourcen, mit denen

02:14.140 --> 02:16.070
Sie sich mit Prototypen beschäftigen können.

02:16.070 --> 02:18.490
Es ist ein wichtiger Teil von JavaScript, insbesondere

02:18.490 --> 02:22.210
von JavaScript, bevor wir Klassen hatten, und es schadet nicht, Prototypen

02:22.210 --> 02:24.670
zu verstehen, wenn Sie ein JavaScript-Entwickler

02:24.670 --> 02:26.490
sind.

02:26.490 --> 02:29.030
Dennoch werde ich hier nicht näher darauf eingehen, da es

02:29.030 --> 02:31.160
sich um ein reines JavaScript-Thema handelt, das

02:31.160 --> 02:33.020
nicht spezifisch für TypeScript ist.

02:33.020 --> 02:34.150
In der Tat arbeiten wir

02:34.150 --> 02:36.510
in TypeScript in der Regel weniger mit Prototypen,

02:36.510 --> 02:38.780
weil wir mehr mit Klassen machen können.

02:38.780 --> 02:42.560
Und damit verbunden haben wir ein weiteres wichtiges Klassenkonzept,

02:42.560 --> 02:43.503
die Vererbung.
