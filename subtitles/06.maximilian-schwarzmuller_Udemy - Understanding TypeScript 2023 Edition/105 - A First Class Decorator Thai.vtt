WEBVTT

00:02.130 --> 00:05.620
-: สำหรับสิ่งที่แนบมานี้ คุณจะพบโครงการเริ่มต้นที่ดีของเรา

00:05.620 --> 00:08.470
ฉันเริ่มต้นเซิร์ฟเวอร์ด้วยการเริ่มต้น NPM แล้ว

00:08.470 --> 00:12.320
และขั้นตอนการดู TypeScript ด้วย TSC-W

00:12.320 --> 00:14.870
และสิ่งแรกที่เราต้องกำหนดค่าในไฟล์

00:14.870 --> 00:18.030
tsconfig ตรวจสอบให้แน่ใจว่าเป้าหมายของคุณถูกตั้งค่าเป็น

00:18.030 --> 00:26.720
es6 จากนั้น หากคุณเลื่อนลง ตรวจสอบให้แน่ใจว่าคุณได้เพิ่มบรรทัดของนักตกแต่งการทดลองที่นี่

00:26.720 --> 00:28.380
และเพิ่มเครื่องหมายจุลภาคข้างหน้า

00:28.380 --> 00:31.700
จากนั้นคุณสามารถจัดรูปแบบอัตโนมัติเพื่อจัดรูปแบบทั้งหมดให้ถูกต้อง

00:31.700 --> 00:36.000
นี่เป็นสิ่งสำคัญ มิฉะนั้น คุณจะไม่สามารถใช้มัณฑนากรในโครงการของคุณได้

00:36.000 --> 00:37.250
ตรวจสอบให้แน่ใจว่าคุณปรับแต่ง

00:37.250 --> 00:40.540
tsconfig ของคุณ json อย่างเหมาะสม

00:40.540 --> 00:46.980
และด้วยเหตุนี้เราจึงสามารถดำดิ่งลงไปและเขียนมัณฑนากรคนแรกของเราที่นี่ในแอป

00:46.980 --> 00:46.980
ไฟล์ ts.

00:46.980 --> 00:50.950
และฉันต้องการเริ่มต้นด้วยมัณฑนากรที่เราสามารถเพิ่มในชั้นเรียนได้

00:50.950 --> 00:58.220
ตอนนี้มัณฑนากรโดยทั่วไปเกี่ยวกับชั้นเรียน แต่นี่คือมัณฑนากรที่เราจะเพิ่มในชั้นเรียนโดยรวม

00:58.220 --> 01:00.730
สำหรับเรื่องนั้น สมมติว่าเรามีคลาส

01:00.730 --> 01:04.360
Person ซึ่งเป็นคลาสที่ไม่สำคัญ ซึ่งเรามีชื่อ

01:04.360 --> 01:07.530
อาจด้วยค่าสูงสุด เริ่มต้นไว้ล่วงหน้าที่นี่

01:07.530 --> 01:10.520
โดยที่เรามีฟังก์ชั่นคอนสตรัคเตอร์ที่ฉันเพิ่งบันทึกการสร้างวัตถุบุคคล

01:10.520 --> 01:14.763
เพื่อให้เราเห็นว่าสิ่งนี้ถูกดำเนินการ

01:15.880 --> 01:19.363
และแน่นอน เราสามารถสร้างคนใหม่ที่นี่ ด้วยคีย์เวิร์ดใหม่

01:20.760 --> 01:22.910
แบบนี้

01:22.910 --> 01:26.490
และถ้าเราต้องการ เราสามารถบันทึกบุคคลที่สร้างขึ้นนี้ได้

01:26.490 --> 01:28.330
และสิ่งนี้ไม่น่าประหลาดใจเลย

01:28.330 --> 01:29.430
ถ้าเราบันทึกทั้งหมดนั้น

01:29.430 --> 01:32.090
มันจะคอมไพล์โดยไม่มีข้อผิดพลาด

01:32.090 --> 01:33.700
และถ้าเราไปที่หน้าของเราบน

01:33.700 --> 01:41.140
Localhost: 3000 ในคอนโซล JavaScript เราจะเห็นการสร้างวัตถุบุคคลซึ่งมาจากตัวสร้าง

01:41.140 --> 01:44.603
และแน่นอนว่าเราทุกคนเห็นบุคคลนั้นที่นี่

01:45.810 --> 01:49.550
ในตัวอย่างนี้ เราไม่มีช่างตกแต่งเข้ามาเกี่ยวข้อง

01:49.550 --> 01:51.000
มาเปลี่ยนสิ่งนี้กันเถอะ

01:51.000 --> 01:53.370
ที่ด้านบนของไฟล์ ให้เพิ่มมัณฑนากร

01:53.370 --> 01:58.080
และมัณฑนากร ซึ่งสำคัญมากที่ต้องเข้าใจ ท้ายที่สุดแล้วเป็นเพียงฟังก์ชัน

01:58.080 --> 02:03.530
ฟังก์ชันที่คุณนำไปใช้กับบางสิ่ง เช่น กับคลาสด้วยวิธีใดวิธีหนึ่ง

02:03.530 --> 02:04.750
มาสร้างฟังก์ชันกันที่นี่

02:04.750 --> 02:09.523
ด้วยคีย์เวิร์ดของฟังก์ชัน และฉันจะตั้งชื่อมันว่า Logger

02:10.390 --> 02:15.570
ตอนนี้เป็นฟังก์ชัน สิ่งที่พิเศษเพียงอย่างเดียวคือฉันเริ่มต้นด้วยตัวพิมพ์ใหญ่

02:15.570 --> 02:16.492
นี่ไม่ใช่สิ่งที่ต้องทำ

02:16.492 --> 02:20.200
คุณไม่จำเป็นต้องใช้อักขระขึ้นต้นด้วยอักษรตัวใหญ่

02:20.200 --> 02:22.470
คุณสามารถใช้ตัวพิมพ์เล็กได้เช่นกัน

02:22.470 --> 02:27.680
คุณเพียงแค่เห็นนักตกแต่งมากมายในห้องสมุดซึ่งคุณอาจใช้ตัวพิมพ์ใหญ่ขึ้นต้น

02:27.680 --> 02:32.200
อักขระ ดังนั้นฉันจะทำเช่นเดียวกันที่นี่

02:32.200 --> 02:35.450
ดังนั้น ฟังก์ชัน Logger ในที่นี้จึงเป็นฟังก์ชันหนึ่ง

02:35.450 --> 02:39.330
และเราสามารถใช้สิ่งนี้เป็นมัณฑนากรได้เมื่อมันจะออกมา

02:39.330 --> 02:44.730
ตอนนี้ให้เพิ่มการเข้าสู่ระบบของคอนโซลที่นี่ การบันทึก เพื่อให้เราสามารถดูว่าฟังก์ชันนี้ทำงานเมื่อใด

02:44.730 --> 02:47.300
เพราะผมจะไม่เรียกตรงๆ

02:47.300 --> 02:50.330
แต่ฉันต้องการเพิ่มเป็นมัณฑนากรในชั้นเรียนนี้

02:50.330 --> 02:57.370
และเราทำโดยใส่สัญลักษณ์ @ ข้างหน้าชั้นเรียนแล้วตามด้วยฟังก์ชันของเราที่นี่

02:57.370 --> 02:58.440
เพียงเท่านี้

02:58.440 --> 03:00.320
ตอนนี้มีบางสิ่งที่พิเศษที่นี่

03:00.320 --> 03:03.780
สัญลักษณ์ @ ในที่นี้คือตัวระบุพิเศษที่

03:03.780 --> 03:06.170
TypeScript เห็นหรือรู้จัก

03:06.170 --> 03:09.110
จากนั้นสิ่งที่อยู่หลังสัญลักษณ์

03:09.110 --> 03:11.010
@ ควรชี้ไปที่ฟังก์ชัน

03:11.010 --> 03:15.800
ไม่ดำเนินการ แต่ชี้ไปที่มันซึ่งควรเป็นมัณฑนากรของคุณ

03:15.800 --> 03:20.650
ตอนนี้คุณเห็นแล้วว่า Logger ยอมรับอาร์กิวเมนต์น้อยเกินไปที่จะใช้เป็นมัณฑนากรที่นี่

03:20.650 --> 03:24.930
สิ่งที่ดีคือ TypeScript เข้าใจว่าฉันต้องการใช้เป็นมัณฑนากรที่นี่

03:24.930 --> 03:27.980
สิ่งที่แย่คือเราไม่ผ่านข้อโต้แย้งมากพอ

03:27.980 --> 03:31.000
และแน่นอนว่ามัณฑนากรได้รับข้อโต้แย้ง

03:31.000 --> 03:34.870
จำนวนข้อโต้แย้งขึ้นอยู่กับตำแหน่งที่คุณใช้มัณฑนากร

03:34.870 --> 03:39.710
ที่นี่ สำหรับมัณฑนากรที่เราเพิ่มในชั้นเรียน เราได้รับหนึ่งข้อโต้แย้ง

03:39.710 --> 03:46.160
นั่นคือเป้าหมายของมัณฑนากรที่ว่านี้ ซึ่งก็คือฟังก์ชันคอนสตรัคเตอร์ของเรา

03:46.160 --> 03:51.240
เราสามารถพูดได้ว่าเราได้ฟังก์ชันตรงนี้เป็นอาร์กิวเมนต์ในตอนท้าย

03:51.240 --> 03:54.110
เรายังสามารถตั้งชื่อมันว่า Constructor เพราะสุดท้ายแล้ว

03:54.110 --> 03:56.650
เราจะได้ Constructor Function ของคลาสนี้

03:56.650 --> 04:01.470
หรือคลาสใดก็ตามที่เราเพิ่มมัณฑนากรนี้เป็นอาร์กิวเมนต์

04:01.470 --> 04:09.650
ขอปลอบใจด้วย เข้าสู่ระบบเพื่อให้เราได้รับข้อมูลเชิงลึกเกี่ยวกับอาร์กิวเมนต์ตัวสร้างนี้ที่นี่

04:09.650 --> 04:10.550
และมาบันทึกสิ่งนี้กันเถอะ

04:10.550 --> 04:12.750
และอย่างที่คุณเห็นมันรวบรวมโดยไม่มีข้อผิดพลาด

04:12.750 --> 04:14.750
และถ้าตอนนี้เราดูที่ผลลัพธ์ของเรา

04:14.750 --> 04:16.580
เราเห็นโค้ดเก่าจากก่อนหน้านี้ แต่เรายังเห็นเอาต์พุตการบันทึก

04:16.580 --> 04:20.810
และฟังก์ชันคอนสตรัคเตอร์นี้ถูกบันทึก

04:20.810 --> 04:22.760
ที่จริงเราเห็นทั้งคลาสที่นี่

04:22.760 --> 04:27.670
แต่คลาสในตอนท้ายเป็นเพียงน้ำตาลเชิงกลยุทธ์เหนือฟังก์ชันคอนสตรัคเตอร์

04:27.670 --> 04:35.030
โปรดทราบว่าเอาต์พุตมัณฑนากร การบันทึก และคลาสนี้หรือบันทึกฟังก์ชันคอนสตรัคเตอร์ที่นี่จะถูกพิมพ์ก่อน

04:35.030 --> 04:41.540
ก่อนที่เราจะเห็นการสร้างวัตถุบุคคลและวัตถุบุคคลของเรา

04:41.540 --> 04:44.360
เพราะแท้จริงแล้ว มัณฑนากร และนั่นสำคัญมาก

04:44.360 --> 04:48.430
มัณฑนากรดำเนินการเมื่อคลาสของคุณถูกกำหนด

04:48.430 --> 04:50.530
ไม่ใช่เมื่อมีการยกตัวอย่าง

04:50.530 --> 04:53.020
คุณไม่จำเป็นต้องยกตัวอย่างชั้นเรียนของคุณเลย

04:53.020 --> 04:55.760
เราสามารถเอาโค้ดนั้นออกเพื่อสร้างอินสแตนซ์ของคลาสได้

04:55.760 --> 04:58.780
และเรายังคงได้รับผลลัพธ์ของมัณฑนากรนั้น

04:58.780 --> 05:02.210
ดังนั้นมัณฑนากรจะทำงานเมื่อ JavaScript ค้นหาคำจำกัดความคลาสของคุณ

05:02.210 --> 05:05.660
นิยามฟังก์ชันคอนสตรัคเตอร์ของคุณ

05:05.660 --> 05:10.070
ไม่ใช่เมื่อคุณใช้ฟังก์ชันตัวสร้างเพื่อสร้างอินสแตนซ์ของวัตถุ

05:10.070 --> 05:13.280
นั่นเป็นสิ่งสำคัญมากที่จะต้องเข้าใจ

05:13.280 --> 05:15.170
นี่คือมัณฑนากรคนแรกของเรา

05:15.170 --> 05:19.063
ไม่ใช่วิธีเดียวที่เราจะสร้างมัณฑนากรได้
