WEBVTT

00:02.290 --> 00:03.910
Instructeur : Donc, pour dire à Webpack

00:03.910 --> 00:06.710
quoi faire avec les fichiers TypeScript, nous devons ajouter une nouvelle

00:06.710 --> 00:08.830
entrée à l'objet de configuration ici.

00:08.830 --> 00:11.510
Et c'est la propriété du module.

00:11.510 --> 00:14.020
Le module prend également un objet JavaScript

00:14.020 --> 00:15.470
pour le configurer.

00:15.470 --> 00:17.440
Un module n'est finalement qu'un fichier, donc ici

00:17.440 --> 00:20.520
nous indiquons à Webpack comment travailler avec les fichiers qu'il trouve,

00:20.520 --> 00:22.940
comme avec l'application. ts, puis, une fois qu'il

00:22.940 --> 00:25.520
a compris ce fichier, comment traiter toutes les

00:25.520 --> 00:27.290
importations du fichier.

00:27.290 --> 00:29.800
Alors comment Webpack doit-il traiter ces fichiers ?

00:29.800 --> 00:33.640
Eh bien, nous le disons à Webpack en ajoutant un tableau de règles ici, parce que vous pouvez

00:33.640 --> 00:35.430
configurer plusieurs règles qui doivent

00:35.430 --> 00:37.300
être appliquées à tous les fichiers.

00:37.300 --> 00:40.690
Ici, nous n'en avons besoin que d'une seule, mais dans des projets plus complexes,

00:40.690 --> 00:44.030
où vous souhaitez également utiliser Webpack pour gérer les fichiers CSS, ou les

00:44.030 --> 00:46.140
images, ou tout autre élément similaire, vous pouvez

00:46.140 --> 00:49.220
ajouter plusieurs règles pour différents types de fichiers.

00:49.220 --> 00:51.500
Et comme nous l'avons déjà mentionné, la documentation officielle

00:51.500 --> 00:53.840
est un excellent endroit pour en savoir plus sur les chargeurs,

00:53.840 --> 00:55.730
que vous utilisez finalement pour apprendre à Webpack

00:55.730 --> 00:57.980
à mieux connaître les différents fichiers, et pour en savoir

00:57.980 --> 00:59.720
plus sur Webpack en général.

00:59.720 --> 01:02.560
Donc ici, nous allons ajouter un tel chargeur.

01:02.560 --> 01:06.110
Un loader est simplement un paquet qui indique à Webpack comment traiter

01:06.110 --> 01:07.780
certains fichiers, et bien sûr ici,

01:07.780 --> 01:09.960
nous avons le loader ts, qui nous aide à indiquer

01:09.960 --> 01:11.520
à Webpack comment traiter les

01:11.520 --> 01:13.690
fichiers TypeScript.

01:13.690 --> 01:16.850
Nous ajoutons donc une règle qui est juste un objet JavaScript,

01:16.850 --> 01:19.720
où nous ajoutons tout d'abord une propriété de test.

01:19.720 --> 01:22.950
Ceci décrit un test que Webpack effectuera sur tout

01:22.950 --> 01:26.510
fichier qu'il trouvera pour savoir si cette règle s'applique

01:26.510 --> 01:28.550
ou non à ce fichier.

01:28.550 --> 01:31.080
Et le test ici est une expression régulière.

01:31.080 --> 01:33.610
Et là, je veux dire à Webpack que tout fichier

01:33.610 --> 01:36.950
qui se termine par . ts doivent être utilisés ou doivent

01:36.950 --> 01:38.913
être traités par cette règle.

01:39.860 --> 01:42.940
Une expression régulière qui vérifie l'extension du fichier peut utiliser

01:42.940 --> 01:46.260
une barre oblique inverse ici, puis . ts, et ensuite un signe

01:46.260 --> 01:47.550
de dollar.

01:47.550 --> 01:50.840
C'est notre expression régulière qui indique à Webpack que nous voulons vérifier

01:50.840 --> 01:54.593
les fichiers qui se terminent par . ts.

01:55.560 --> 01:58.810
Ensuite, vous devez également spécifier ce que Webpack doit

01:58.810 --> 02:02.590
faire avec ces fichiers, et vous le faites avec le mot-clé use ici.

02:02.590 --> 02:05.290
Et là, vous spécifiez le chargeur que Webpack doit

02:05.290 --> 02:07.590
utiliser, dans mon cas, ts-loader.

02:07.590 --> 02:10.600
Nous indiquons donc à Webpack que tout fichier TypeScript qu'il

02:10.600 --> 02:12.720
trouve doit être traité par le chargeur TypeScript

02:12.720 --> 02:16.010
qui, à son tour, sait quoi faire avec un tel fichier.

02:16.010 --> 02:17.680
Le ts-loader prendra automatiquement

02:17.680 --> 02:20.330
le tsconfig. json en compte, nous n'avons donc

02:20.330 --> 02:23.430
pas besoin de spécifier une configuration supplémentaire ici.

02:23.430 --> 02:26.050
Une configuration qui ne fait jamais de mal, exclure

02:26.050 --> 02:29.910
les modules de nœuds en tant qu'expression régulière afin que Webpack

02:29.910 --> 02:33.773
n'essaie pas non plus de chercher dans les modules de nœuds.

02:35.130 --> 02:38.400
Avec cela, nous devons ajouter une configuration supplémentaire

02:38.400 --> 02:42.800
ici après la configuration du module, et c'est la clé de résolution.

02:42.800 --> 02:47.800
Là, nous indiquons à Webpack les extensions de fichiers qu'il ajoute aux importations

02:47.820 --> 02:49.750
qu'il trouve.

02:49.750 --> 02:52.440
J'ai dit que Webpack ajouterait les extensions par lui-même,

02:52.440 --> 02:56.160
et par défaut, il recherchera les . fichiers js.

02:56.160 --> 02:59.220
Maintenant, nous voulons que Webpack recherche . ts, et pour ici dans resolve,

02:59.220 --> 03:01.280
nous pouvons ajouter une propriété extensions,

03:01.280 --> 03:05.390
définie comme égale à un tableau, et indiquer à Webpack qu'il doit rechercher

03:05.390 --> 03:08.390
les fichiers . ts ainsi que les

03:08.390 --> 03:10.640
fichiers . fichiers js.

03:10.640 --> 03:13.360
Webpack va donc rechercher ces fichiers et

03:13.360 --> 03:16.900
regrouper tous les fichiers qui ont ces extensions, que

03:16.900 --> 03:18.723
vous importez ensemble.

03:19.760 --> 03:22.770
Et voilà notre installation presque terminée pour le moment, notre

03:22.770 --> 03:24.690
fichier de configuration presque terminé

03:24.690 --> 03:26.150
pour le moment du moins.

03:26.150 --> 03:28.730
Avec cela nous devrions juste aller dans

03:28.730 --> 03:33.070
tsconfig aussi, et là s'assurer que vous mettez sourceMap à true.

03:33.070 --> 03:35.210
Cela nous aidera à déboguer notre code, et Webpack

03:35.210 --> 03:37.130
le prend également en charge.

03:37.130 --> 03:39.850
Là, il nous suffit maintenant d'ajouter une entrée,

03:39.850 --> 03:41.340
peut-être ici en dessous de

03:41.340 --> 03:43.710
la sortie, et c'est une clé devtool.

03:43.710 --> 03:47.210
Et là, la valeur devrait être inline-source-map comme une chaîne

03:47.210 --> 03:48.510
de caractères.

03:48.510 --> 03:51.620
Cela indique ensuite à Webpack qu'il y aura déjà des cartes

03:51.620 --> 03:53.700
de sources générées, qu'il devra extraire

03:53.700 --> 03:57.210
et câbler correctement au paquet qu'il génère, de sorte que,

03:57.210 --> 04:00.170
même si nous obtenons un tel paquet, nous avons toujours

04:00.170 --> 04:03.603
une bonne expérience de développement.

04:05.830 --> 04:08.360
Maintenant, avec cela, nous pouvons utiliser Webpack, et la question

04:08.360 --> 04:09.823
est de savoir comment l'utiliser ?

04:11.000 --> 04:14.720
Une façon simple de l'utiliser est de se rendre sur le paquet. json, et là ajoutons

04:14.720 --> 04:16.650
un script.

04:16.650 --> 04:18.440
Par exemple, construire.

04:18.440 --> 04:19.810
Vous pouvez lui donner le nom que vous

04:19.810 --> 04:21.620
voulez ici dans la section des scripts.

04:21.620 --> 04:23.930
Et là, lancez simplement Webpack,

04:23.930 --> 04:26.453
donc tapez juste webpack comme ça.

04:27.560 --> 04:29.880
Allons maintenant dans le dossier dist,

04:29.880 --> 04:32.993
et supprimons tout ce qui s'y trouve, et avec cette sauvegarde,

04:34.000 --> 04:36.870
exécutons maintenant npm run build et voyons si cela

04:36.870 --> 04:38.663
fonctionne.

04:39.970 --> 04:43.000
Et ça échoue...

04:45.440 --> 04:47.800
Oui, j'ai simplement fait une faute de

04:47.800 --> 04:51.440
frappe, ça ne devrait pas être devtools, mais devtool ici.

04:51.440 --> 04:53.830
Donc changez ça en devtool dans le fichier de configuration

04:53.830 --> 04:56.143
et maintenant répétons npm run build.

04:59.500 --> 05:02.620
Et, avec ça, vous pouvez ignorer l'avertissement que vous recevez ici.

05:02.620 --> 05:04.230
Vous verrez que dans le fichier

05:04.230 --> 05:06.410
dist, vous avez un fichier js groupé.

05:06.410 --> 05:08.150
Et ce que vous voyez là-dedans

05:08.150 --> 05:09.960
est déjà un code assez illisible,

05:09.960 --> 05:14.060
parce que nous avons cette minification en action ici en fait.

05:14.060 --> 05:18.680
Donc, en fait, ce code est déjà optimisé.

05:18.680 --> 05:21.410
Avant de voir comment nous pouvons également travailler

05:21.410 --> 05:23.490
avec différentes configurations ici,

05:23.490 --> 05:26.120
allons à l'index. html, et ajuster nos

05:26.120 --> 05:27.510
importations ici et le

05:27.510 --> 05:30.350
faisceau de points. js, et pour le moment, puisque

05:30.350 --> 05:32.220
nous n'utilisons pas encore Webpack

05:32.220 --> 05:35.140
Dev Server, exécutons npm start pour faire apparaître

05:35.140 --> 05:38.480
cet index. fichier html à nouveau.

05:38.480 --> 05:40.510
Et si vous rechargez maintenant

05:40.510 --> 05:44.890
cette page, vous verrez que cela fonctionne !

05:44.890 --> 05:46.610
Si nous entrons quelque chose

05:46.610 --> 05:49.230
ici, notre projet fonctionne comme il le devrait,

05:49.230 --> 05:52.030
et il importe le fichier js groupé ici, donc un

05:52.030 --> 05:56.200
seul fichier au lieu de tous ces fichiers individuels.

05:56.200 --> 05:59.020
Et cela constitue déjà une amélioration.

05:59.020 --> 06:01.640
Ici, nous avons déjà le code groupé

06:01.640 --> 06:05.410
qui évite toutes ces requêtes htp inutiles.

06:05.410 --> 06:07.690
Et si vous allez dans l'onglet des sources, et que

06:07.690 --> 06:09.420
vous voulez déboguer votre code, vous

06:09.420 --> 06:11.250
trouverez ce dossier Webpack, et dans celui-ci

06:11.250 --> 06:12.770
un dossier source, et là vous pouvez

06:12.770 --> 06:15.300
aller vers vos fichiers TypeScript.

06:15.300 --> 06:19.090
Et par exemple, ici, sur project-input, vous pouvez également définir

06:19.090 --> 06:22.110
un point d'arrêt ici sur gatherUserInput, et si vous appuyez

06:22.110 --> 06:24.970
maintenant sur le bouton, il se met en pause ici, et

06:24.970 --> 06:26.190
vous pouvez déboguer

06:26.190 --> 06:27.680
votre code.

06:27.680 --> 06:29.650
Et ce sont les cartes sources qui arrivent,

06:29.650 --> 06:31.200
qui nous aident vraiment à développer

06:31.200 --> 06:34.050
et qui nous facilitent la vie en tant que développeur.

06:34.050 --> 06:37.520
Nous avons obtenu ce code optimisé, mais grâce aux cartes de source,

06:37.520 --> 06:40.750
nous pouvons déboguer notre code TypeScript original ici.

06:40.750 --> 06:43.260
Nous avons donc déjà une configuration assez

06:43.260 --> 06:46.280
étonnante, qui nous donne déjà beaucoup d'optimisations,

06:46.280 --> 06:48.440
maintenant terminons cela et assurons-nous

06:48.440 --> 06:52.050
que nous avons bien le serveur Webpack Dev inclus, et nous avons

06:52.050 --> 06:54.440
alors deux flux de travail, un pour la production,

06:54.440 --> 06:58.443
et un pour le développement.
