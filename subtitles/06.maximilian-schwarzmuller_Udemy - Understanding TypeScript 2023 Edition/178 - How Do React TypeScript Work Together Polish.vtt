WEBVTT

00:02.130 --> 00:03.970
Instruktor: Po pierwsze, możemy uruchomić

00:03.970 --> 00:06.480
nasz serwer deweloperski tutaj za pomocą npm start, i to jest

00:06.480 --> 00:08.440
proces, który powinniśmy zachować w toku, ponieważ

00:08.440 --> 00:10.940
to będzie obserwować nasze pliki dla zmian.

00:10.940 --> 00:13.270
I jeśli coś się zmieni, więc jeśli zapiszesz

00:13.270 --> 00:15.620
zmianę konkretnie, to przekompiluje typy

00:15.620 --> 00:17.776
kodów do JavaScript, przekompiluje

00:17.776 --> 00:20.090
JSX do JavaScript, a na końcu, następnie

00:20.090 --> 00:22.500
zbuduje ci twoją aplikację react i zaserwuje

00:22.500 --> 00:25.750
ją na lokalnym hoście 3000, gdzie w tej chwili nie widzisz

00:25.750 --> 00:27.630
zbyt wiele.

00:27.630 --> 00:29.430
Po prostu możesz zobaczyć to tutaj w konsoli

00:29.430 --> 00:31.800
Dev, że wydaje się, że działa z powodu tego wyjścia tutaj.

00:31.800 --> 00:32.900
Nie widać oczywiście

00:32.900 --> 00:34.340
zbyt wiele, bo nie renderujemy

00:34.340 --> 00:36.700
tu nic w App. tsx w chwili obecnej.

00:36.700 --> 00:38.170
To oczywiście się zmieni.

00:38.170 --> 00:39.420
I mając to już za sobą,

00:39.420 --> 00:41.130
napiszmy teraz jakiś kod

00:41.130 --> 00:43.580
lub przeanalizujmy to, co mamy.

00:43.580 --> 00:46.750
W indeksie. tsx nie mamy nic specjalnego, prawda?

00:46.750 --> 00:49.060
To jest zwykły kod JavaScript.

00:49.060 --> 00:52.950
In App. tsx, widzimy to przypisanie

00:52.950 --> 00:55.250
typu chociaż i tam, co widać, że przypisaliśmy

00:55.250 --> 00:57.980
ten dziwny typ do App.

00:57.980 --> 01:00.270
Teraz, jeśli zignorujemy ten typ na sekundę,

01:00.270 --> 01:02.480
co właściwie jest przechowywane w App?

01:02.480 --> 01:04.840
No cóż, funkcja, funkcja strzałkowa,

01:04.840 --> 01:07.290
ale to nadal zwykła funkcja, dlatego.

01:07.290 --> 01:09.960
Dlaczego ten typ tutaj nie działa lub dlaczego nie jest to jeden

01:09.960 --> 01:12.570
z naszych typów funkcji, o których uczyliśmy się?

01:12.570 --> 01:14.030
Cóż, jest to pod maską,

01:14.030 --> 01:16.450
ale jest to typ dostarczany przez react,

01:16.450 --> 01:18.100
a teraz, ważne oczywiście

01:18.100 --> 01:21.070
dostarczane przez pakiet react types.

01:21.070 --> 01:26.070
Jeśli wejdziemy w moduły node to widzimy tutaj folder @types, a w nim

01:26.390 --> 01:28.470
mnóstwo typów, widzimy tutaj

01:28.470 --> 01:30.670
również typy react, wszystkie

01:30.670 --> 01:32.600
typy react-dom.

01:32.600 --> 01:35.840
I w końcu ten typ jest niejawnie automatycznie importowany

01:35.840 --> 01:39.340
z folderu react types, można powiedzieć.

01:39.340 --> 01:40.870
A teraz, co to za typ?

01:40.870 --> 01:44.490
FC oznacza po prostu składnik funkcji.

01:44.490 --> 01:46.310
Istnieje również dłuższa forma tego, którą

01:46.310 --> 01:47.570
mógłbyś użyć zamiast tego.

01:47.570 --> 01:49.240
To jest dokładnie ten sam typ.

01:49.240 --> 01:51.090
Drugi to po prostu skrót i to po

01:51.090 --> 01:54.300
prostu definiuje, że to co przechowujemy tutaj w

01:54.300 --> 01:57.750
App musi być funkcją, ale funkcją, która kwalifikuje

01:57.750 --> 02:00.550
się jako komponent funkcji w react.

02:00.550 --> 02:02.840
Oczywiście piszesz również komponenty oparte

02:02.840 --> 02:05.760
na klasach, a więc masz tutaj również klasyczny komponent

02:05.760 --> 02:07.420
i wtedy musiałbyś przechowywać

02:07.420 --> 02:09.480
tam klasę zamiast funkcji, ale w tym kursie

02:09.480 --> 02:12.720
pójdziemy z komponentami funkcyjnymi.

02:12.720 --> 02:14.670
Teraz jest to komponent funkcyjny,

02:14.670 --> 02:17.620
ponieważ jest to funkcja, która zwraca JSX i tak właśnie

02:17.620 --> 02:20.850
tworzy się komponent funkcyjny w react.

02:20.850 --> 02:24.180
Jeśli miałbym usunąć tymczasowo tę deklarację return, stąd moglibyśmy

02:24.180 --> 02:26.730
uzyskać błąd tutaj, wszystko, jeśli próbowałem zapisać

02:26.730 --> 02:28.800
to i chce skompilować.

02:28.800 --> 02:32.440
Dostalibyśmy błąd, ponieważ teraz mówimy TypeScriptowi, że tutaj

02:32.440 --> 02:34.960
chcemy przechowywać element funkcji, a wszystko,

02:34.960 --> 02:38.520
co przechowujemy, to normalna funkcja, a nie funkcja, która zwraca

02:38.520 --> 02:40.770
JSX lub cokolwiek innego, co kwalifikuje

02:40.770 --> 02:42.800
się jako element react.

02:42.800 --> 02:44.440
I dlatego byłoby to nieważne i musielibyśmy

02:44.440 --> 02:45.810
to naprawić.

02:45.810 --> 02:48.530
Tak więc tutaj możemy już zobaczyć jak TypeScript

02:48.530 --> 02:50.360
poprawia nieco nasz projekt.

02:50.360 --> 02:52.500
Daje nam dodatkowe bezpieczeństwo typu

02:52.500 --> 02:55.420
i upewnia się, że nie możemy uruchomić w sytuacji, w której

02:55.420 --> 02:58.353
na przykład budujemy nieważny komponent.

02:59.200 --> 03:03.230
Uwaga boczna, jeśli może wydawać się nierealne, że kiedykolwiek zapomnisz

03:03.230 --> 03:05.370
o tym oświadczeniu zwrotnym, rozważ, że

03:05.370 --> 03:07.970
budujesz większy komponent z wieloma oświadczeniami

03:07.970 --> 03:11.070
if i różnymi oświadczeniami zwrotnymi.

03:11.070 --> 03:14.370
Możesz zapomnieć o jednym w jednej gałęzi instrukcji if, a następnie

03:14.370 --> 03:17.010
TypeScript może zdecydowanie uratować twój tyłek i

03:17.010 --> 03:19.130
dać ci to ostrzeżenie nieco wcześniej, niż

03:19.130 --> 03:21.500
podczas runtime, gdzie w przeciwnym razie może

03:21.500 --> 03:23.710
się rozbić w niektórych sytuacjach.

03:23.710 --> 03:25.620
Więc to jest TypeScript robiący

03:25.620 --> 03:27.740
coś, ale z tym, dość o gadaniu.

03:27.740 --> 03:28.690
Zbudujmy coś i chcę

03:28.690 --> 03:31.670
zbudować tutaj stosunkowo prostą aplikację, aplikację

03:31.670 --> 03:34.590
typu to-do, dość klasyczną, ale aplikację typu to-do, która

03:34.590 --> 03:36.370
pozwala nam w związku z tym przećwiczyć

03:36.370 --> 03:39.480
pewne podstawowe koncepcje react z TypeScript.

03:39.480 --> 03:41.270
I dlatego w kolejnych wykładach faktycznie

03:41.270 --> 03:44.363
uruchommy nasze pierwsze customowe komponenty.
