WEBVTT

00:02.200 --> 00:04.920
Sprecher: Das sind also Klassen, Eigenschaften

00:04.920 --> 00:07.510
und Vererbung mit Typescript.

00:07.510 --> 00:08.343
Und wie ich bereits

00:08.343 --> 00:10.260
erwähnt habe, werden diese Features

00:10.260 --> 00:12.490
zwar generell in Javascript unterstützt,

00:12.490 --> 00:14.230
in modernem JavaScript natürlich

00:14.230 --> 00:16.940
mit Ausnahme von Typzuweisungen und auch mit

00:16.940 --> 00:21.060
Ausnahme von protected private public.

00:21.060 --> 00:24.770
Diese Schlüsselwörter sind eigentlich nur in Typescript verfügbar.

00:24.770 --> 00:28.560
Das ist aber noch nicht alles, was man mit Klassen machen kann.

00:28.560 --> 00:29.940
Wann immer Sie eine Funktion

00:29.940 --> 00:32.840
benötigen, die Sie auch in Vanilla JavaScript

00:32.840 --> 00:35.670
haben, und die auch in Typescript unterstützt

00:35.670 --> 00:38.610
wird, sind Getter und Setter.

00:38.610 --> 00:43.390
Nehmen wir zum Beispiel an, dass wir in der Buchhaltungsabteilung

00:43.390 --> 00:47.450
einen letzten Bericht haben, nämlich Immobilien.

00:47.450 --> 00:51.630
Das ist eine private Eigenschaft, und es ist ein Typ String,

00:51.630 --> 00:53.310
also haben wir das.

00:53.310 --> 00:56.480
Und dann hier initialisieren wir dies, um

00:56.480 --> 01:01.480
unsere Berichte Eigenschaft Bestellungen Argument bekommen wir

01:02.270 --> 01:04.880
hier und sie sind der erste Wert.

01:04.880 --> 01:07.877
Was natürlich im Grunde undefiniert ist, wenn wir ein

01:07.877 --> 01:09.890
leeres Report-Array übergeben.

01:09.890 --> 01:14.680
Wenn wir nun einen Bericht hinzufügen, möchte ich diesen letzten

01:14.680 --> 01:17.010
Bericht auf Text setzen.

01:17.010 --> 01:20.440
Das ist es, was wir zu unserem Berichts-Array hinzufügen.

01:20.440 --> 01:23.890
Da der letzte Bericht privat ist, können wir von innerhalb

01:23.890 --> 01:26.250
dieser Methode darauf zugreifen, aber

01:26.250 --> 01:30.240
nicht von außerhalb mit der Punktschreibweise.

01:30.240 --> 01:33.440
Jetzt können wir einen Getter hinzufügen, um ihn trotzdem zugänglich zu machen.

01:33.440 --> 01:36.020
Ein Getter ist im Grunde eine Eigenschaft, bei der

01:36.020 --> 01:38.670
Sie eine Funktion oder Methode ausführen, wenn Sie

01:38.670 --> 01:40.910
einen Wert abrufen, und die es Ihnen als Entwickler

01:40.910 --> 01:42.380
ermöglicht, eine komplexere

01:42.380 --> 01:44.460
Logik hinzuzufügen.

01:44.460 --> 01:47.560
Hier erstellen Sie einen Getter, indem Sie das Schlüsselwort get verwenden

01:47.560 --> 01:49.250
und dann einen beliebigen Namen.

01:49.250 --> 01:51.810
Sie stehen in der Regel in engem Zusammenhang mit der Immobilie,

01:51.810 --> 01:54.180
zu der Sie den Zugang kontrollieren wollen.

01:54.180 --> 01:58.180
Hier könnten wir zum Beispiel den letzten Bericht nennen.

01:58.180 --> 01:59.340
Irgendetwas in der Art.

01:59.340 --> 02:01.630
Wichtig ist nun, dass dies wie eine Methode definiert ist.

02:01.630 --> 02:04.260
Sie fügen also Klammern und geschweifte Klammern hinzu.

02:04.260 --> 02:07.250
Und jetzt hier, Sie müssen etwas zurückgeben,

02:07.250 --> 02:11.990
das ist wichtig, eine Getter-Methode, muss etwas zurückgeben.

02:11.990 --> 02:14.610
Sie könnten also diesen letzten Bericht zurückschicken,

02:14.610 --> 02:16.660
und dann kapseln wir ihn sozusagen ein,

02:16.660 --> 02:19.570
denn er ist jetzt öffentlich zugänglich.

02:19.570 --> 02:22.720
Aber oft möchte man hier eine komplexere Logik haben.

02:22.720 --> 02:26.240
Hier könnten wir also prüfen, ob wir hier einen Wert haben, also

02:26.240 --> 02:27.600
ob das die Wahrheit ist.

02:27.600 --> 02:28.960
Wenn es nicht undefiniert

02:28.960 --> 02:31.520
ist, dann wollen wir den letzten Bericht zurückgeben,

02:31.520 --> 02:34.440
andernfalls wollen wir vielleicht eine andere Logik

02:34.440 --> 02:37.850
zurückgeben, zum Beispiel sagen wir, dass wir andernfalls

02:37.850 --> 02:42.650
eine Fehlermeldung mit throw new error, no reports found ausgeben.

02:42.650 --> 02:46.650
Jetzt haben wir also mehr Logik, eine komplexere Logik, zu dieser Eigenschaft

02:46.650 --> 02:49.200
hinzugefügt, und wenn wir sie abrufen wollen, können

02:49.200 --> 02:51.500
wir diese Eigenschaft nicht direkt über die Punktnotation

02:51.500 --> 02:55.290
abrufen, aber wir können sie als Eigenschaft verwenden, um diese Logik zu

02:55.290 --> 02:57.240
Ende zu führen.

02:57.240 --> 02:58.810
Wie würde das also funktionieren?

02:58.810 --> 03:02.170
Nun, dort unten, wo ich meine Buchhaltungsabteilung einrichte.

03:02.170 --> 03:08.693
Bevor ich meinen Bericht hinzufüge, wenn ich versuche, Console log, Buchhaltung.

03:08.693 --> 03:08.693
jüngsten

03:09.630 --> 03:11.010
Bericht, und jetzt wichtig.

03:11.010 --> 03:13.902
Ups, Buchhaltung. neuester Bericht.

03:13.902 --> 03:16.890
Und jetzt ist es wichtig, dass Sie auf diese Eigenschaft zugreifen.

03:16.890 --> 03:18.690
Also keine Klammern hier.

03:18.690 --> 03:20.570
Sie führen dies nicht als Methode aus.

03:20.570 --> 03:23.030
Sie greifen einfach wie eine normale Eigenschaft

03:23.030 --> 03:24.460
darauf zu, und im Hintergrund

03:24.460 --> 03:27.890
wird diese Methode dort oben ausgeführt.

03:27.890 --> 03:31.670
Also, wenn ich dies jetzt versucht, bevor wir unseren Bericht hinzugefügt,

03:31.670 --> 03:33.940
Wir werden sehen, dass dies ohne Fehler neu aufgebaut,

03:33.940 --> 03:35.440
neu kompiliert ohne Fehler,

03:35.440 --> 03:38.550
aber natürlich hier ein Fehler ausgelöst wird, ist es unsere

03:38.550 --> 03:40.820
benutzerdefinierte keinen Bericht gefunden

03:40.820 --> 03:42.820
Fehler, weil kein Bericht hinzugefügt

03:42.820 --> 03:45.370
wurde noch, und da mit diesem als Getter, greift auf

03:45.370 --> 03:48.310
diese Methode und führt sie.

03:48.310 --> 03:51.560
Wenn wir keinen Bericht haben, kommen wir nicht zu dieser WENN-Prüfung

03:51.560 --> 03:52.830
oder in diese WENN-Anweisung,

03:52.830 --> 03:55.693
und deshalb tritt diese Zeile hier in Kraft.

03:56.590 --> 04:00.250
Wenn wir das alternativ nach unten verschieben, nachdem wir einen Bericht

04:00.250 --> 04:02.210
hinzugefügt haben, können wir diesen natürlich

04:02.210 --> 04:04.100
speichern, und wir erhalten keine Fehlermeldung

04:04.100 --> 04:05.730
mehr, sondern geben stattdessen

04:05.730 --> 04:08.400
diesen letzten Bericht aus.

04:08.400 --> 04:09.750
Das ist also ein Volltreffer.

04:09.750 --> 04:12.190
Und Sie können auch einen Setzer hinzufügen.

04:12.190 --> 04:14.550
Ein Setzer wird fast auf die gleiche Weise hinzugefügt.

04:14.550 --> 04:16.290
Sie verwenden das Schlüsselwort "set"

04:16.290 --> 04:18.630
und dann wieder einen beliebigen Namen.

04:18.630 --> 04:21.940
typischerweise ein Name, der sich auf die Eigenschaft bezieht, die gesetzt

04:21.940 --> 04:22.870
werden soll.

04:22.870 --> 04:25.570
Daher werde ich hier den jüngsten Bericht wiederverwenden.

04:25.570 --> 04:27.840
So können wir damit sowohl einen Wert lesen als

04:27.840 --> 04:29.150
auch einen Wert setzen.

04:29.150 --> 04:30.090
Und dann wiederum haben

04:30.090 --> 04:31.850
Sie dies wie eine Methode definiert.

04:31.850 --> 04:34.850
Aber jetzt muss ein Argument her.

04:34.850 --> 04:38.630
Der Wert, den der Benutzer eingegeben hätte.

04:38.630 --> 04:40.940
Hier sollte ein String-Wert stehen,

04:40.940 --> 04:44.110
und hier können Sie nun jede beliebige Logik ausführen,

04:44.110 --> 04:46.160
um diesen zu speichern.

04:46.160 --> 04:48.530
Da hier ein Wert für den letzten Bericht

04:48.530 --> 04:51.890
übergeben wurde, möchte ich am Ende den Bericht hinzufügen

04:51.890 --> 04:53.080
ausführen.

04:53.080 --> 04:55.370
Hier könnte ein Setter also einfach eine Alternative

04:55.370 --> 04:57.140
zur Methode add report sein.

04:57.140 --> 05:01.280
Hier können wir also auf diesen Bericht zugreifen.

05:01.280 --> 05:03.760
Dies ist erforderlich, da wir uns innerhalb der Klasse befinden.

05:03.760 --> 05:07.280
Wir beziehen uns hier auf die Klasse und dann auf diese Klassenmethode.

05:07.280 --> 05:10.380
Und jetzt können wir hier einfach den Wert weiterleiten.

05:10.380 --> 05:12.310
Jetzt könnten wir eine komplexere Logik

05:12.310 --> 05:16.130
hinzufügen und auch prüfen, ob der Wert vielleicht nicht definiert ist,

05:16.130 --> 05:19.810
wenn er falsch ist, und dann einfach zurückgeben oder einen neuen Sie-Fehler

05:19.810 --> 05:24.020
auslösen, in dem wir sagen, bitte geben Sie einen gültigen Wert ein.

05:24.020 --> 05:26.140
Das ist etwas, was wir auch tun könnten.

05:26.140 --> 05:29.010
Und jetzt verwenden wir auch hier einen Setter.

05:29.010 --> 05:31.330
Damit können wir es testen.

05:31.330 --> 05:33.193
Dort unten könnte ich den letzten Bericht

05:35.400 --> 05:36.570
hinzufügen.

05:36.570 --> 05:38.780
Ich könnte in der Buchhaltung darauf zugreifen, und

05:38.780 --> 05:40.770
genau so würden wir daraus lesen, aber jetzt,

05:40.770 --> 05:42.300
indem wir ein Gleichheitszeichen

05:42.300 --> 05:44.520
hinzufügen, versuchen wir, einen Wert darauf zu setzen,

05:44.520 --> 05:47.150
und das wird diese Setter-Methode auslösen.

05:47.150 --> 05:50.090
Wie schon zuvor führen wir sie nicht als Methode aus, sondern greifen

05:50.090 --> 05:52.383
einfach wie eine Eigenschaft darauf zu.

05:53.220 --> 05:56.030
Wenn ich hier eine leere Zeichenkette eingebe, dann

05:56.030 --> 05:58.770
geben wir technisch gesehen eine Zeichenkette ein,

05:58.770 --> 06:02.760
aber eine leere Zeichenkette wird als falsch behandelt, siehe hier.

06:02.760 --> 06:04.950
Deshalb sollten wir jetzt einen Fehler erhalten.

06:04.950 --> 06:07.450
Wenn ich also diese Codezeile speichere, wenn ich den

06:07.450 --> 06:09.850
Code mit dieser hinzugefügten Codezeile speichere,

06:11.120 --> 06:14.530
erhalten wir die Fehlermeldung please pass in a valid value.

06:14.530 --> 06:17.010
Wenn ich jedoch einen gültigen

06:17.010 --> 06:22.010
Wert eingebe, z. B. einen Jahresendbericht, und diesen nun

06:22.250 --> 06:23.900
speichere.

06:23.900 --> 06:27.210
Jetzt sehen Sie, dass alles funktioniert und der Jahresendbericht

06:27.210 --> 06:29.620
Teil unserer Berichtsliste ist.

06:29.620 --> 06:31.150
Es handelt sich also um Getter und Setter,

06:31.150 --> 06:33.620
die sich hervorragend für die Kapselung von Logik und für das

06:33.620 --> 06:35.390
Hinzufügen zusätzlicher Logik eignen, die

06:35.390 --> 06:38.050
ausgeführt werden soll, wenn Sie versuchen, eine Eigenschaft

06:38.050 --> 06:40.243
zu lesen oder eine Eigenschaft zu setzen.
