WEBVTT

1
00:00:02.050 --> 00:00:04.370
<v Instructor>We can't ignore isolated modules</v>

2
00:00:04.370 --> 00:00:05.880
but there is one other option,

3
00:00:05.880 --> 00:00:08.000
which is actually not even mentioned here,

4
00:00:08.000 --> 00:00:10.810
which I still want to mention myself though.

5
00:00:10.810 --> 00:00:14.680
And that's the no emit on error option.

6
00:00:14.680 --> 00:00:16.200
You can set this to true or false

7
00:00:16.200 --> 00:00:18.820
and the default is false.

8
00:00:18.820 --> 00:00:19.653
Now what does this do?

9
00:00:19.653 --> 00:00:21.330
If we set it to false, let me show you

10
00:00:21.330 --> 00:00:23.050
where this might be a problem.

11
00:00:23.050 --> 00:00:26.530
It is a problem if we introduce an error

12
00:00:26.530 --> 00:00:27.590
or it can be a problem.

13
00:00:27.590 --> 00:00:30.690
Let's say here, I do have my button

14
00:00:30.690 --> 00:00:32.410
and I remove this exclamation mark.

15
00:00:32.410 --> 00:00:34.750
Now even though we don't fully understand what's going on

16
00:00:34.750 --> 00:00:38.030
the problem here is simply is that TypeScript does not know

17
00:00:38.030 --> 00:00:40.610
that we certainly have a button here.

18
00:00:40.610 --> 00:00:42.790
After all, when querying for a button

19
00:00:42.790 --> 00:00:45.990
we might not get one if there is no element in the DOMs

20
00:00:45.990 --> 00:00:47.540
that's satisfying this selector

21
00:00:47.540 --> 00:00:48.800
then this will return now.

22
00:00:48.800 --> 00:00:50.910
And that's basically what TypeScript complains about.

23
00:00:50.910 --> 00:00:54.849
Here we access something on a potential null object

24
00:00:54.849 --> 00:00:57.200
and that's not good.

25
00:00:57.200 --> 00:00:59.300
Now that's an error we have here.

26
00:00:59.300 --> 00:01:02.120
If we compile our code, we also get this error

27
00:01:02.120 --> 00:01:04.770
here in the console.

28
00:01:04.770 --> 00:01:08.210
Nonetheless, the file is created.

29
00:01:08.210 --> 00:01:11.660
So even if I delete the app.jsfile it will be recreated.

30
00:01:11.660 --> 00:01:13.910
So even if we have an error,

31
00:01:13.910 --> 00:01:16.300
TypeScript creates a JavaScript file.

32
00:01:16.300 --> 00:01:18.740
This might or might not be wanted.

33
00:01:18.740 --> 00:01:21.360
Maybe you have an error in your TypeScript file

34
00:01:21.360 --> 00:01:22.980
and you don't really know how to work around it

35
00:01:22.980 --> 00:01:26.000
but you know it will not be a problem in the final app.

36
00:01:26.000 --> 00:01:29.410
Like here, even if we don't know about the exclamation mark.

37
00:01:29.410 --> 00:01:31.577
Well if we don't know about the exclamation mark

38
00:01:31.577 --> 00:01:35.900
we might not know how to disable this error, basically.

39
00:01:35.900 --> 00:01:39.630
But still we know that this will work in our page here.

40
00:01:39.630 --> 00:01:41.890
So we might be fine with compiling this

41
00:01:41.890 --> 00:01:43.630
despite having an error.

42
00:01:43.630 --> 00:01:45.570
But, of course, in reality you should aim

43
00:01:45.570 --> 00:01:48.850
for error free projects and rather learn

44
00:01:48.850 --> 00:01:51.720
how you can work around this issue than ignore it.

45
00:01:51.720 --> 00:01:54.590
Nonetheless, you could set this to false

46
00:01:54.590 --> 00:01:57.590
or not set it at all, because false is the default,

47
00:01:57.590 --> 00:02:00.687
if you are fine with generating JavaScript files

48
00:02:00.687 --> 00:02:02.590
if you have an error.

49
00:02:02.590 --> 00:02:04.240
If you set this to true, however,

50
00:02:04.240 --> 00:02:07.700
what will happen is that problematic files

51
00:02:07.700 --> 00:02:09.100
will not be generated.

52
00:02:09.100 --> 00:02:10.910
If I now rerun this...

53
00:02:12.440 --> 00:02:15.110
You see, nothing is generated actually.

54
00:02:15.110 --> 00:02:18.180
Even the analytics.ts file is not output there

55
00:02:18.180 --> 00:02:21.440
if we have some content in there

56
00:02:21.440 --> 00:02:26.440
besides console.log, you see it's not getting generated.

57
00:02:26.550 --> 00:02:27.560
And the reason for that is

58
00:02:27.560 --> 00:02:29.600
that we have an error in the file.

59
00:02:29.600 --> 00:02:32.940
And if any file fails to compile no files

60
00:02:32.940 --> 00:02:34.300
will be omitted.

61
00:02:34.300 --> 00:02:35.810
So here, therefore, we have to make sure

62
00:02:35.810 --> 00:02:38.850
we fix this error before we then can get TypeScript

63
00:02:38.850 --> 00:02:40.890
to again compile files for us.

64
00:02:40.890 --> 00:02:43.530
And, therefore, it is an option I typically like to set

65
00:02:43.530 --> 00:02:46.830
because I'm not interested in getting JavaScript files

66
00:02:46.830 --> 00:02:49.703
if I still have errors in my TypeScript files.

