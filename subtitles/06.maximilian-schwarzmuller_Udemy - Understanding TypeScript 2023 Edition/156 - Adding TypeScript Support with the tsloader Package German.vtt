WEBVTT

00:02.290 --> 00:03.910
Instructor: Um Webpack mitzuteilen, was

00:03.910 --> 00:06.710
es mit TypeScript-Dateien machen soll, müssen wir hier einen neuen

00:06.710 --> 00:08.830
Eintrag zum Konfigurationsobjekt hinzufügen.

00:08.830 --> 00:11.510
Und das ist die Eigenschaft des Moduls.

00:11.510 --> 00:14.020
Modul nimmt auch ein JavaScript-Objekt, um es

00:14.020 --> 00:15.470
dann zu konfigurieren.

00:15.470 --> 00:17.440
Ein Modul ist letztendlich nur eine Datei,

00:17.440 --> 00:20.520
also sagen wir hier Webpack, wie es mit den gefundenen Dateien arbeiten

00:20.520 --> 00:22.940
soll, wie mit der App. ts-Datei, und dann auch,

00:22.940 --> 00:25.520
sobald es diese Datei versteht, wie es mit allen Importen

00:25.520 --> 00:27.290
in der Datei umgehen soll.

00:27.290 --> 00:29.800
Wie sollte Webpack also mit diesen Dateien umgehen?

00:29.800 --> 00:33.640
Nun, wir sagen es Webpack, indem wir hier ein Regel-Array hinzufügen, denn man kann

00:33.640 --> 00:35.430
mehrere Regeln aufstellen, die auf alle

00:35.430 --> 00:37.300
Dateien angewendet werden sollen.

00:37.300 --> 00:40.690
Hier brauchen wir nur eine, aber in komplexeren Projekten, in

00:40.690 --> 00:44.030
denen Sie Webpack auch für CSS-Dateien, Bilder oder ähnliches

00:44.030 --> 00:46.140
verwenden möchten, können Sie weitere

00:46.140 --> 00:49.220
Regeln für verschiedene Dateitypen hinzufügen.

00:49.220 --> 00:51.500
Und wie bereits erwähnt, sind die offiziellen Dokumente

00:51.500 --> 00:53.840
ein großartiger Ort, um mehr über Loader zu lernen, die man

00:53.840 --> 00:55.730
letztendlich dazu benutzt, um Webpack mehr über

00:55.730 --> 00:57.980
verschiedene Dateien zu lehren und um mehr über Webpack

00:57.980 --> 00:59.720
im Allgemeinen zu lernen.

00:59.720 --> 01:02.560
Hier werden wir also einen solchen Lader tatsächlich hinzufügen.

01:02.560 --> 01:06.110
Ein Loader ist einfach ein Paket, das Webpack sagt, wie es mit bestimmten

01:06.110 --> 01:07.780
Dateien umgehen soll, und hier haben

01:07.780 --> 01:09.960
wir natürlich den ts Loader, der uns hilft,

01:09.960 --> 01:11.520
Webpack zu sagen, wie es mit TypeScript-Dateien

01:11.520 --> 01:13.690
umgehen soll.

01:13.690 --> 01:16.850
Wir fügen also eine Regel hinzu, die nur ein JavaScript-Objekt

01:16.850 --> 01:19.720
ist, dem wir zunächst eine Testeigenschaft hinzufügen.

01:19.720 --> 01:22.950
Dies beschreibt einen Test, den Webpack bei jeder gefundenen

01:22.950 --> 01:26.510
Datei durchführt, um herauszufinden, ob diese Regel auf diese

01:26.510 --> 01:28.550
Datei zutrifft oder nicht.

01:28.550 --> 01:31.080
Und der Test hier ist ein regulärer Ausdruck.

01:31.080 --> 01:33.610
Und dort möchte ich Webpack mitteilen,

01:33.610 --> 01:36.950
dass jede Datei, die mit . ts verwendet oder durch diese

01:36.950 --> 01:38.913
Regel behandelt werden sollten.

01:39.860 --> 01:42.940
Ein regulärer Ausdruck, der nach der Dateierweiterung sucht, kann

01:42.940 --> 01:47.550
hier einen Backslash und dann . ts, und dann ein Dollarzeichen.

01:47.550 --> 01:50.840
Dies ist unser regulärer Ausdruck, der Webpack mitteilt, dass Sie

01:50.840 --> 01:54.593
nach Dateien suchen wollen, die mit . ts.

01:55.560 --> 01:58.810
Dann müssen Sie auch angeben, was Webpack mit diesen Dateien

01:58.810 --> 02:02.590
tun soll, und das tun Sie hier mit dem Schlüsselwort use.

02:02.590 --> 02:05.290
Und dort geben Sie den Loader an, den Webpack verwenden

02:05.290 --> 02:07.590
soll, in meinem Fall ts-loader.

02:07.590 --> 02:10.600
Wir sagen Webpack also, dass jede TypeScript-Datei, die es findet,

02:10.600 --> 02:12.720
vom TypeScript-Loader behandelt werden soll,

02:12.720 --> 02:16.010
der dann wiederum weiß, was mit einer solchen Datei zu tun ist.

02:16.010 --> 02:17.680
Der ts-loader übernimmt automatisch

02:17.680 --> 02:20.330
die tsconfig. json-Datei zu berücksichtigen,

02:20.330 --> 02:23.430
so dass wir hier keine zusätzliche Konfiguration angeben müssen.

02:23.430 --> 02:26.050
Nur eine Konfiguration, die nie schadet:

02:26.050 --> 02:29.910
Schließen Sie Node-Module als regulären Ausdruck aus, damit

02:29.910 --> 02:33.773
Webpack auch nicht versucht, in Node-Module zu schauen.

02:35.130 --> 02:38.400
Damit müssen wir hier eine zusätzliche Konfiguration nach

02:38.400 --> 02:42.800
der Modulkonfiguration hinzufügen, und das ist der Auflösungsschlüssel.

02:42.800 --> 02:47.800
Dort teilen wir Webpack mit, welche Dateierweiterungen es zu den gefundenen

02:47.820 --> 02:49.750
Importen hinzufügt.

02:49.750 --> 02:52.440
Ich habe gesagt, dass Webpack selbständig Erweiterungen hinzufügt,

02:52.440 --> 02:56.160
und standardmäßig sucht es nach . js-Dateien.

02:56.160 --> 02:59.220
Hier wollen wir nun, dass Webpack nach . ts-Dateien, und dann können

02:59.220 --> 03:01.280
wir hier in resolve eine extensions-Eigenschaft

03:01.280 --> 03:05.390
hinzufügen, die gleich einem Array gesetzt wird, und Webpack mitteilen, dass

03:05.390 --> 03:08.390
es nach . ts-Dateien als

03:08.390 --> 03:10.640
auch . js-Dateien.

03:10.640 --> 03:13.360
Webpack sucht also grundsätzlich nach solchen Dateien

03:13.360 --> 03:16.900
und bündelt dann alle Dateien, die diese Erweiterungen haben, die

03:16.900 --> 03:18.723
Sie importieren, zusammen.

03:19.760 --> 03:22.770
Und damit ist unser Setup für den Moment fast fertig, unsere

03:22.770 --> 03:24.690
Konfigurationsdatei zumindest für

03:24.690 --> 03:26.150
den Moment fast fertig.

03:26.150 --> 03:28.730
Damit sollten wir auch zu tsconfig gehen,

03:28.730 --> 03:33.070
und dort sicherstellen, dass Sie sourceMap auf true setzen.

03:33.070 --> 03:35.210
Dies wird uns helfen, unseren Code zu debuggen,

03:35.210 --> 03:37.130
und Webpack unterstützt dies ebenfalls.

03:37.130 --> 03:39.850
Dort müssen wir jetzt nur noch einen Eintrag hinzufügen,

03:39.850 --> 03:41.340
vielleicht hier unter output,

03:41.340 --> 03:43.710
und das ist ein devtool key.

03:43.710 --> 03:47.210
Und dort sollte der Wert inline-source-map als String

03:47.210 --> 03:48.510
angegeben werden.

03:48.510 --> 03:51.620
Dies teilt Webpack dann mit, dass es bereits generierte Source-Maps

03:51.620 --> 03:53.700
gibt, die es extrahieren und grundsätzlich

03:53.700 --> 03:57.210
korrekt mit dem generierten Bundle verdrahten sollte, so dass wir

03:57.210 --> 04:00.170
zwar ein solches Bundle erhalten, aber trotzdem eine großartige

04:00.170 --> 04:03.603
Entwicklungserfahrung haben.

04:05.830 --> 04:08.360
Damit können wir nun Webpack verwenden, und die Frage

04:08.360 --> 04:09.823
ist, wie wir es verwenden?

04:11.000 --> 04:14.720
Eine einfache Möglichkeit, sie zu nutzen, besteht darin, das Paket aufzurufen. json-Datei, und fügen Sie

04:14.720 --> 04:16.650
dort ein Skript hinzu.

04:16.650 --> 04:18.440
Zum Beispiel, bauen.

04:18.440 --> 04:19.810
Sie können ihm hier im Bereich

04:19.810 --> 04:21.620
Skripte einen beliebigen Namen geben.

04:21.620 --> 04:23.930
Und dort einfach Webpack ausführen,

04:23.930 --> 04:26.453
also einfach webpack so eingeben.

04:27.560 --> 04:29.880
Gehen wir nun auch in den dist-Ordner und entfernen

04:29.880 --> 04:32.993
am Ende alles, was sich dort befindet, und mit dieser Speicherung

04:34.000 --> 04:38.663
führen wir nun npm run build aus und schauen, ob das funktioniert.

04:39.970 --> 04:43.000
Und es scheitert...

04:45.440 --> 04:47.800
Ja, ich habe mich einfach vertippt,

04:47.800 --> 04:51.440
das sollte nicht devtools, sondern devtool heißen.

04:51.440 --> 04:53.830
Ändern Sie dies also in der Konfigurationsdatei in

04:53.830 --> 04:56.143
devtool und wiederholen Sie nun npm run build.

04:59.500 --> 05:02.620
Und damit können Sie die Warnung, die Sie hier erhalten, ignorieren.

05:02.620 --> 05:04.230
Sie werden sehen, dass Sie in der dist-Datei

05:04.230 --> 05:06.410
eine gebündelte js-Datei haben.

05:06.410 --> 05:08.150
Und was Sie dort sehen, ist auch

05:08.150 --> 05:09.960
schon ziemlich unlesbarer Code,

05:09.960 --> 05:14.060
denn wir haben hier tatsächlich diese Minification in Aktion.

05:14.060 --> 05:18.680
Das ist also eigentlich schon der optimierte Code.

05:18.680 --> 05:21.410
Bevor wir nun sehen, wie wir auch hier mit verschiedenen

05:21.410 --> 05:23.490
Konfigurationen arbeiten können, lassen

05:23.490 --> 05:26.120
Sie uns zum Index gehen. html-Datei, und passen

05:26.120 --> 05:27.510
Sie unsere Importe hier

05:27.510 --> 05:30.350
und Punktbündel an. js, und für den Moment,

05:30.350 --> 05:32.220
da wir Webpack Dev Server noch

05:32.220 --> 05:35.140
nicht verwenden, lassen wir npm start laufen,

05:35.140 --> 05:38.480
um den Index aufzurufen. html-Datei erneut.

05:38.480 --> 05:40.510
Und wenn Sie jetzt diese

05:40.510 --> 05:44.890
Seite neu laden, sehen Sie, dass es funktioniert!

05:44.890 --> 05:46.610
Wenn wir hier etwas eingeben,

05:46.610 --> 05:49.230
funktioniert unser Projekt so, wie es sollte,

05:49.230 --> 05:52.030
und es importiert die gebündelte js-Datei hier,

05:52.030 --> 05:56.200
also nur eine Datei anstelle all dieser einzelnen Dateien.

05:56.200 --> 05:59.020
Und das ist bereits eine Verbesserung.

05:59.020 --> 06:01.640
Hier haben wir bereits den gebündelten

06:01.640 --> 06:05.410
Code, der all diese unnötigen htp-Anfragen vermeidet.

06:05.410 --> 06:07.690
Wenn Sie übrigens auf die Registerkarte "Quellen"

06:07.690 --> 06:09.420
gehen und Ihren Code debuggen wollen,

06:09.420 --> 06:11.250
finden Sie diesen Webpack-Ordner und darin

06:11.250 --> 06:12.770
einen Quellordner, und dort können

06:12.770 --> 06:15.300
Sie Ihre TypeScript-Dateien aufrufen.

06:15.300 --> 06:19.090
Und zum Beispiel hier, auf project-input, können Sie auch einen Haltepunkt

06:19.090 --> 06:22.110
hier auf gatherUserInput setzen, und wenn Sie jetzt die

06:22.110 --> 06:24.970
Schaltfläche drücken, wird es dort angehalten, und

06:24.970 --> 06:26.190
Sie können Ihren Code

06:26.190 --> 06:27.680
debuggen.

06:27.680 --> 06:29.650
Und das sind die Source Maps, die uns bei

06:29.650 --> 06:31.200
der Entwicklung wirklich helfen

06:31.200 --> 06:34.050
und die uns das Leben als Entwickler leichter machen.

06:34.050 --> 06:37.520
Wir haben diesen optimierten Code, aber dank der Source-Maps können

06:37.520 --> 06:40.750
wir unseren ursprünglichen TypeScript-Code hier debuggen.

06:40.750 --> 06:43.260
Wir haben also bereits ein ziemlich erstaunliches

06:43.260 --> 06:46.280
Setup, das uns bereits eine Menge Optimierungen bietet.

06:46.280 --> 06:48.440
Jetzt wollen wir das Ganze abschließen und

06:48.440 --> 06:52.050
sicherstellen, dass wir den Webpack Dev Server eingebunden haben,

06:52.050 --> 06:54.440
und dann haben wir tatsächlich zwei Workflows,

06:54.440 --> 06:58.443
einen für die Produktion und einen für die Entwicklung.
