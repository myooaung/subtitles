WEBVTT

00:02.350 --> 00:04.720
-: Und das war's mit den Modulen.

00:04.720 --> 00:08.850
Die Verwendung von Modulen ist eine sehr nützliche und wichtige Funktion, da sie

00:08.850 --> 00:11.130
es Ihnen ermöglicht, wartbaren und überschaubaren

00:11.130 --> 00:14.550
Code zu schreiben. Alles in einer Datei zu haben,

00:14.550 --> 00:16.360
ist unübersichtlich und kommt

00:16.360 --> 00:19.360
nur für wirklich kleine Projekte in Frage.

00:19.360 --> 00:22.350
Die Verwendung von Namespaces oder ES-Modulen

00:22.350 --> 00:24.710
ist eine viel bessere Alternative.

00:24.710 --> 00:27.620
Denn es sorgt dafür, dass jede Datei für sich genommen

00:27.620 --> 00:30.780
relativ klein ist und damit überschaubar bleibt.

00:30.780 --> 00:33.470
Und trotzdem hat man am Ende die ganze,

00:33.470 --> 00:36.690
große Anwendung, die man haben möchte.

00:36.690 --> 00:38.580
Bei diesen beiden Ansätzen,

00:38.580 --> 00:42.883
Namespaces und ES-Module, ist die klare Empfehlung ES-Module,

00:42.883 --> 00:46.520
weil Sie die zusätzliche Typsicherheit erhalten und

00:46.520 --> 00:48.910
sicherstellen, dass jede Datei eindeutig

00:48.910 --> 00:52.210
angeben muss, was sie will.

00:52.210 --> 00:54.270
Mit Namespaces genügte es, wenn eine

00:54.270 --> 00:56.280
Datei etwas importierte, was eine

00:56.280 --> 00:58.350
andere Datei auch benötigt.

00:58.350 --> 00:59.970
Das Schlimme daran ist, dass, wenn die

00:59.970 --> 01:02.230
eine Datei, die die Sache importiert hat, entfernt

01:02.230 --> 01:05.640
wird, die andere Datei ebenfalls kaputt geht, ohne dass Sie es merken.

01:05.640 --> 01:08.774
Zumindest, ohne dass Sie es merken, bevor Sie den Code ausführen.

01:08.774 --> 01:11.340
Verwenden Sie daher ES-Module.

01:11.340 --> 01:14.250
Verwenden Sie Namespaces in kleineren Projekten, oder wenn

01:14.250 --> 01:18.100
Sie aus irgendeinem Grund keine ES-Module verwenden können, und Sie können

01:18.100 --> 01:19.970
keinen anderen Bundler verwenden, der

01:19.970 --> 01:24.290
solche Module übersetzen würde. Um nicht Modul-Code, der alle

01:24.290 --> 01:26.360
Werke und alle Browser.

01:26.360 --> 01:30.070
Aber ansonsten verwenden Sie wirklich Module, ES-Module.

01:30.070 --> 01:31.748
Und was ich gerade gesagt habe, ist wichtig.

01:31.748 --> 01:34.828
Diese Module hier, so wie wir sie jetzt verwenden,

01:34.828 --> 01:37.620
funktionieren nur in modernen Browsern.

01:37.620 --> 01:39.670
Denn wir verlassen uns darauf, dass der Browser

01:39.670 --> 01:42.640
all diese Dateien importiert. Richtig?

01:42.640 --> 01:44.675
Nun wollen wir natürlich Anwendungen

01:44.675 --> 01:48.940
mit Typescript erstellen, die auch in allen Browsern laufen.

01:48.940 --> 01:52.090
Internet Explorer 9, zum Beispiel.

01:52.090 --> 01:54.130
Dort würde dies nicht unterstützt werden.

01:54.130 --> 01:55.730
Diese Syntax, wird dort nicht unterstützt.

01:55.730 --> 01:57.410
Die App würde dort also nicht laufen.

01:57.410 --> 01:59.160
Wir könnten auch einige andere Funktionen verwenden,

01:59.160 --> 02:01.280
die dort nicht unterstützt werden, aber hauptsächlich

02:01.280 --> 02:03.840
wird dies hier nicht in allen Browsern unterstützt.

02:03.840 --> 02:06.250
Damit das in allen Browsern funktioniert, können wir ein

02:06.250 --> 02:09.283
Bündelungswerkzeug verwenden. Wir können zum Beispiel Webpack verwenden.

02:09.283 --> 02:12.431
Um dies in einer JavaScript-Datei zu bündeln.

02:12.431 --> 02:15.810
So haben wir während der Entwicklung diese Erfahrung mit mehreren Dateien

02:15.810 --> 02:19.060
und starker Typisierung, aber wenn wir unseren Code ausliefern,

02:19.060 --> 02:21.310
haben wir eigentlich nur eine Datei.

02:21.310 --> 02:23.600
Der Vorteil des Versands einer einzigen Datei

02:23.600 --> 02:25.676
anstelle all dieser Dateien, die wir hier haben,

02:25.676 --> 02:28.177
besteht darin, dass wir auch dafür sorgen, dass der

02:28.177 --> 02:31.181
Browser nicht so viele Dateien herunterladen muss.

02:31.181 --> 02:33.630
Denn jede Datei, die heruntergeladen werden muss, bedeutet

02:33.630 --> 02:37.010
einen zusätzlichen Hin- und Rückweg. Auf der Registerkarte "Netzwerk" in den Entwicklungswerkzeugen

02:37.010 --> 02:38.510
können Sie das tatsächlich sehen.

02:38.510 --> 02:40.650
Der Bereich, in dem Sie dieses Wasserfalldiagramm

02:40.650 --> 02:42.230
sehen, und Sie sehen dieses kleine

02:42.230 --> 02:44.520
weiße Kästchen am Anfang jedes Blocks.

02:44.520 --> 02:46.380
Dies ist im Wesentlichen die Zeit, die für die

02:46.380 --> 02:48.506
Einrichtung der HDP-Anfrage benötigt wird.

02:48.506 --> 02:51.807
Obwohl die Dateien, die wir herunterladen, sehr klein sind, wie

02:51.807 --> 02:54.700
Sie sehen können, dauert das Herunterladen immer noch einige

02:54.700 --> 02:56.900
Zeit, da für jede HDP-Anfrage zusätzliche

02:56.900 --> 02:59.100
Einstellungen erforderlich sind.

02:59.100 --> 03:02.330
Weniger Anfragen zu stellen, ist also in jedem Fall eine gute Idee,

03:02.330 --> 03:04.640
unabhängig von der Browserunterstützung.

03:04.640 --> 03:08.370
Aus diesen beiden Gründen - Browserunterstützung und weniger Anfragen

03:08.370 --> 03:11.000
- werden wir uns im nächsten Kursabschnitt die Bündelung

03:11.000 --> 03:12.453
mit Webpack ansehen.
