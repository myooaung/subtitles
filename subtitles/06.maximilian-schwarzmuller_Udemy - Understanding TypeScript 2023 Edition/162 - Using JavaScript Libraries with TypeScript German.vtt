WEBVTT

00:02.120 --> 00:05.910
-: Jetzt beginnen wir mit einer sehr beliebten Utility-Bibliothek,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Was Sie hier lernen, dient im Grunde als Beispiel für jede

00:09.840 --> 00:13.250
JavaScript-Bibliothek, die Sie verwenden möchten.

00:13.250 --> 00:17.430
Ganz gleich, ob es sich um Lodash, jQuery oder etwas anderes handelt.

00:17.430 --> 00:19.510
Eine kleine Randnotiz an dieser Stelle:

00:19.510 --> 00:21.640
Wenn Sie daran interessiert sind, wie

00:21.640 --> 00:24.150
Sie mit React und TypeScript oder sagen wir

00:24.150 --> 00:26.718
Node. js. und Express und

00:26.718 --> 00:31.350
TypeScript, habe ich später im Kurs spezielle Module dazu, denn dort werden

00:31.350 --> 00:33.760
Sie etwas mehr lernen als nur das Hinzufügen

00:33.760 --> 00:35.730
mit TypeScript.

00:35.730 --> 00:40.470
Aber für eine einfachere Bibliotheken, wie Lodash, wie jQuery und hier ist

00:40.470 --> 00:43.010
ein Ansatz, der funktionieren wird.

00:43.010 --> 00:45.340
Wir wollen also Lodash in unserem Projekt verwenden.

00:45.340 --> 00:48.460
Lodash ist natürlich eine JavaScript-Bibliothek.

00:48.460 --> 00:50.800
Wir brauchen kein TypeScript, um es zu verwenden,

00:50.800 --> 00:53.480
wir können es in jedem JavaScript-Projekt verwenden

00:53.480 --> 00:56.770
und wir können es installieren, wie Sie hier in den offiziellen

00:56.770 --> 00:59.200
Lodash-Dokumenten erfahren.

00:59.200 --> 01:01.400
Wenn Sie npm verwenden, was wir tun, können

01:01.400 --> 01:06.477
Sie npm i oder npm install ausführen, das ist nur eine Kurzform, "--save/lodash".

01:07.750 --> 01:10.820
Hier in diesem Beispielprojekt, das Webpack ohne einen Produktions-Workflow

01:10.820 --> 01:14.180
verwendet, sondern nur einen Entwicklungs-Workflow.

01:14.180 --> 01:16.570
Dort können wir diese Bibliothek hinzufügen, indem wir einfach

01:16.570 --> 01:18.607
nmp install dash dash save Lodash ausführen.

01:18.607 --> 01:21.700
Und das wird nun in dieses Projekt installiert und dank unserer

01:21.700 --> 01:23.500
Webpack-Einrichtung können wir

01:23.500 --> 01:26.250
es einfach in unsere Code-Dateien importieren und

01:26.250 --> 01:27.517
dort verwenden.

01:27.517 --> 01:30.670
Und das wäre in jedem mit Webpack betriebenen JavaScript-Projekt

01:30.670 --> 01:32.250
das Gleiche.

01:32.250 --> 01:34.990
Wenn Sie kein Webpack verwenden, können Sie natürlich

01:34.990 --> 01:37.720
auch einfach das CDN verwenden usw.

01:37.720 --> 01:40.630
Was ich Ihnen jedoch in den nächsten Schritten etwas

01:40.630 --> 01:42.390
später in diesem Modul zeigen werde,

01:42.390 --> 01:45.130
funktioniert nur in einem Webpack-Setup.

01:45.130 --> 01:47.730
Hier haben wir also ein Webpack-Setup, wir haben jetzt Lodash

01:47.730 --> 01:49.320
installiert, und wenn wir es verwenden

01:49.320 --> 01:51.510
wollen, können wir es hier einfach importieren.

01:51.510 --> 01:55.600
Wir können, sagen wir, underscore aus 'Lodash' importieren.

01:55.600 --> 01:57.960
Dies ist eine Syntax, die bei installiertem

01:57.960 --> 01:59.960
Lodash verfügbar sein sollte.

01:59.960 --> 02:03.057
Dies führt jedoch bereits jetzt zu einem Fehler.

02:03.057 --> 02:06.850
"Es konnte keine Deklarationsdatei für das Modul Lodash gefunden werden".

02:06.850 --> 02:09.890
Und wir werden ein weiteres Problem haben, wenn Sie Lodash

02:09.890 --> 02:12.230
zum Beispiel verwenden möchten, um ein Array

02:12.230 --> 02:16.810
zu mischen, nun, wir könnten consol log underscore shuffle und dann, sagen wir, ein

02:16.810 --> 02:19.000
einfaches Array an diese shuffle Methode

02:19.000 --> 02:20.430
übergeben.

02:20.430 --> 02:23.110
Die Shuffle-Methode ist eine Methode, die Lodash unterstützt.

02:23.110 --> 02:25.790
Wir können dies in der offiziellen Dokumentation von

02:25.790 --> 02:26.820
Lodash erfahren.

02:26.820 --> 02:29.056
Wenn Sie dort nach "shuffle" suchen, erfahren

02:29.056 --> 02:32.370
Sie, dass Sie mit dieser Methode ein Array mischen können.

02:32.370 --> 02:37.010
Es sollte also irgendwie funktionieren, aber wie Sie sehen können,

02:37.010 --> 02:39.480
funktioniert es nicht wirklich so.

02:39.480 --> 02:43.058
Wenn ich nun meinen Webpack-Server hier starte, werden wir

02:43.058 --> 02:45.890
sehen, dass das CDN uns einen Fehler meldet.

02:45.890 --> 02:47.077
Und wieder sagt es uns,

02:47.077 --> 02:50.940
dass es "keine Deklarationsdatei für das Modul Lodash finden kann".

02:50.940 --> 02:54.720
Das funktioniert also nicht wirklich so, wie es sollte.

02:54.720 --> 02:57.610
Das Problem dabei ist, dass es sich bei Lodash um eine einfache

02:57.610 --> 02:59.930
JavaScript-Bibliothek handelt.

02:59.930 --> 03:02.250
Es wurde mit Vanilla JavaScript entwickelt

03:02.250 --> 03:05.150
und ist für Vanilla JavaScript konzipiert.

03:05.150 --> 03:08.530
Wir können dies überprüfen, wenn wir zu node modules gehen, wo wir viele

03:08.530 --> 03:10.280
Abhängigkeiten haben, weil wir viele

03:10.280 --> 03:12.450
Abhängigkeiten von webpack und seinen Abhängigkeiten

03:12.450 --> 03:14.220
dort haben.

03:14.220 --> 03:17.010
Aber hier, wenn wir nach Lodash suchen,

03:17.010 --> 03:17.930
ist es da.

03:17.930 --> 03:21.330
Und wir erweitern, wie wir sehen, gibt es einen Haufen von JavaScript-Dateien

03:21.330 --> 03:22.750
in dort, nicht wahr?

03:22.750 --> 03:26.380
Und das ist im gesamten Lodash-Quellcode zu finden.

03:26.380 --> 03:30.010
Ein Haufen JavaScript-Code, aber sicher kein TypeScript-Code.

03:30.010 --> 03:31.750
Wo liegt nun das Problem?

03:31.750 --> 03:35.550
Das Problem ist, dass TypeScript nicht versteht, was in diesem

03:35.550 --> 03:37.070
Paket enthalten ist.

03:37.070 --> 03:41.020
Es versteht nicht, welche Methoden Lodash exportiert.

03:41.020 --> 03:43.480
Jetzt werden Sie sehen, dass es tatsächlich funktioniert, wenn

03:43.480 --> 03:45.500
wir in die tsconfig gehen. json-Datei.

03:45.500 --> 03:48.740
Und wir sorgen dafür, dass wir bei einem Fehler eine Ausgabe machen.

03:48.740 --> 03:52.650
Wenn wir also "noEmitOnError" auf "false" setzen, so dass wir eine

03:52.650 --> 03:55.770
neue Ausgabe ausgeben, wenn ein Fehler auftritt.

03:55.770 --> 03:57.600
Starten Sie das Ganze jetzt noch einmal.

03:57.600 --> 04:00.230
Am Ende wird derselbe Fehler angezeigt, also werden

04:00.230 --> 04:02.160
wir ihn immer noch sehen.

04:02.160 --> 04:05.090
Aber wenn ich diese Seite hier neu lade, erhalten Sie

04:05.090 --> 04:07.120
hier tatsächlich eine Ausgabe.

04:07.120 --> 04:08.922
Sie können die Fehlermeldung am unteren

04:08.922 --> 04:12.580
Rand ignorieren, Sie werden eine Ausgabe sehen, die das gemischte Array ist.

04:12.580 --> 04:14.920
Jedes Mal, wenn ich nachlade, sieht es anders aus.

04:14.920 --> 04:16.530
Und das ist sehr interessant.

04:16.530 --> 04:19.770
Es beweist, dass Lodash funktioniert, es beweist, dass

04:19.770 --> 04:21.280
dieser Code korrekt ist.

04:21.280 --> 04:24.170
Aber leider versteht TypeScript das nicht, und das kann

04:24.170 --> 04:28.400
es auch nicht, weil Lodash JavaScript und nicht TypeScript verwendet.

04:28.400 --> 04:31.220
Das Problem ist nun, dass es keine TypeScript-Version

04:31.220 --> 04:34.080
von Lodash gibt, also müssen wir damit leben.

04:34.080 --> 04:37.220
Und das ist ein Szenario, das Ihnen häufig begegnen wird.

04:37.220 --> 04:39.365
Sie möchten eine bestimmte Bibliothek eines Drittanbieters

04:39.365 --> 04:42.270
verwenden, die nur für JavaScript entwickelt wurde, und daher erhalten

04:42.270 --> 04:44.210
Sie solche Fehler.

04:44.210 --> 04:46.060
Das ist ärgerlich, denn theoretisch können

04:46.060 --> 04:47.430
wir es natürlich nutzen.

04:47.430 --> 04:49.630
TypeScript baut auf JavaScript auf.

04:49.630 --> 04:53.160
Wir können jede JavaScript-Bibliothek in einem TypeScript-Projekt

04:53.160 --> 04:56.150
verwenden, wir müssen sie nur in TypeScript übersetzen.

04:56.150 --> 04:58.890
Und das ist zum Glück möglich.

04:58.890 --> 05:02.564
Lassen Sie mich also diese Einstellung hier einschalten,

05:02.564 --> 05:04.220
"noEmitOnError true".

05:04.220 --> 05:07.200
Ich möchte Ihnen zeigen, wie wir TypeScript über Lodash

05:07.200 --> 05:10.053
und seine Möglichkeiten informieren können.

05:11.140 --> 05:13.662
Sie können die so genannten Typen einer Bibliothek

05:13.662 --> 05:16.250
von Drittanbietern installieren.

05:16.250 --> 05:20.050
Wenn Sie nach Lodash-Typen suchen, werden Sie ein

05:20.050 --> 05:24.140
npm-Paket finden, das hier "@types/lodash" heißt.

05:24.140 --> 05:26.440
Dort sehen Sie auch den Befehl install, der in

05:26.440 --> 05:28.120
einer Sekunde ausgeführt wird.

05:28.120 --> 05:30.580
Aber wenn Sie zu den Details gehen, finden Sie auch einen

05:30.580 --> 05:32.220
Link zum Github-Repository.

05:32.220 --> 05:36.320
Sie verlinkt zu DefinitelyTyped, einem riesigen Repository mit Tonnen

05:36.320 --> 05:39.260
von Übersetzungen für alle Arten von Bibliotheken

05:39.260 --> 05:40.820
von Drittanbietern.

05:40.820 --> 05:43.120
Hier befinden wir uns im Lodash-Ordner.

05:43.120 --> 05:46.590
Und dort finden Sie sogenannte . dts-Dateien.

05:46.590 --> 05:50.180
Also nicht nur. ts aber. dts.

05:50.180 --> 05:53.460
Dies sind so genannte Deklarationsdateien, d.h. sie enthalten

05:53.460 --> 05:55.760
keine eigentliche Logik, aber wenn wir einen

05:55.760 --> 05:58.750
Blick auf die Shuffle . dts-Datei, sie enthalten

05:58.750 --> 06:01.848
Anweisungen für TypeScript.

06:01.848 --> 06:05.200
Sie sagen TypeScript grundsätzlich, wie etwas funktioniert

06:05.200 --> 06:08.720
und was in diesem Paket enthalten ist.

06:08.720 --> 06:10.700
Und Sie können hier verschiedene Dateien

06:10.700 --> 06:14.280
in verschiedenen Unterordnern untersuchen, um mehr darüber zu erfahren.

06:14.280 --> 06:17.717
Letztlich bieten diese Dateien also einfach eine

06:17.717 --> 06:21.750
Übersetzung von einfachem JavaScript nach TypeScript.

06:21.750 --> 06:23.860
Sie enthalten keine Logik, die ausgeführt wird,

06:23.860 --> 06:26.950
aber sie definieren die Typen, mit denen diese Bibliothek arbeitet.

06:26.950 --> 06:30.010
Sie definieren die Typen, die Sie verwenden, die Typen, die Sie zurückerhalten,

06:30.010 --> 06:32.490
wenn Sie eine Methode aufrufen, und so weiter.

06:32.490 --> 06:35.410
Sie können auch solche schreiben. dts-Dateien selbst zu erstellen,

06:35.410 --> 06:38.510
und die offiziellen Dokumente bieten eine Anleitung dazu, falls

06:38.510 --> 06:40.470
Sie daran interessiert sind.

06:40.470 --> 06:42.110
Aber für Ihre eigenen Projekttypen

06:42.110 --> 06:43.160
müssen Sie das nicht

06:43.160 --> 06:45.820
tun, denn wenn Sie TypeScript-Code schreiben, versteht

06:45.820 --> 06:48.110
das natürlich nur TypeScript.

06:48.110 --> 06:50.310
Wenn Sie jedoch mit einer Bibliothek eines Drittanbieters

06:50.310 --> 06:53.840
arbeiten, die in JavaScript ohne TypeScript-Code geschrieben wurde, oder

06:53.840 --> 06:56.860
ohne eingebaute . dts-Dateien, die übrigens

06:56.860 --> 06:59.950
einige Bibliotheken von Drittanbietern mitliefern,

06:59.950 --> 07:02.240
auch wenn sie in JavaScript geschrieben

07:02.240 --> 07:03.960
sind, Lodash jedoch nicht.

07:03.960 --> 07:06.890
Wenn Sie also mit einer Bibliothek arbeiten, die keine

07:06.890 --> 07:08.330
eingebauten Übersetzungsdateien

07:08.330 --> 07:11.180
enthält und die nicht nativ in TypeScript geschrieben

07:11.180 --> 07:15.760
ist, dann ist die Verwendung eines solchen Typenpakets die Lösung.

07:15.760 --> 07:20.760
Hier führen wir dann also "npm install --save@types/Lodash" aus.

07:21.860 --> 07:24.600
Sie können auch "save-dev" ausführen, denn dev ist

07:24.600 --> 07:27.920
eine Abhängigkeit, die eigentlich nur während der Entwicklung

07:27.920 --> 07:29.230
benötigt wird, da der Code

07:29.230 --> 07:30.980
dann ohnehin über JavaScript kompiliert

07:30.980 --> 07:32.360
wird.

07:32.360 --> 07:36.130
Und das installiert nun diese Übersetzung von TypeScript,

07:36.130 --> 07:38.060
um es zu verstehen.

07:38.060 --> 07:40.630
Und Sie werden sehen, sobald dies installiert ist,

07:40.630 --> 07:42.510
ist der Fehler verschwunden.

07:42.510 --> 07:46.220
Und wenn ich jetzt npm start neu starte, werden Sie sehen, dass der Fehler

07:46.220 --> 07:48.270
auch hier nicht mehr auftritt.

07:48.270 --> 07:51.640
Sie sehen also, dass dies jetzt ohne Fehler funktioniert,

07:51.640 --> 07:55.190
sowohl bei der Kompilierung als auch im Browser.

07:55.190 --> 07:57.270
Technisch gesehen hat es auch vorher funktioniert,

07:57.270 --> 07:59.160
aber jetzt mit der Übersetzung können

07:59.160 --> 08:01.580
wir auch TypeScript verwenden.

08:01.580 --> 08:04.660
Und zum Beispiel bekommen wir jetzt auch die ganze Fertigstellung

08:04.660 --> 08:05.493
hier, in der IDE.

08:05.493 --> 08:10.070
Wenn ich hier einen Punkt eingebe, sehe ich die Lodash-Methoden, die ich verwenden kann.

08:10.070 --> 08:13.930
Dies ist also ein sehr wichtiges Wissen, das man unbedingt

08:13.930 --> 08:16.400
kennen muss, damit man normale JavaScript-Bibliotheken

08:16.400 --> 08:21.177
in einem TypeScript-Projekt verwenden kann und trotzdem großartige

08:21.177 --> 08:24.220
Unterstützung und Autovervollständigung

08:24.220 --> 08:28.490
erhält und Fehler vermeidet.

08:28.490 --> 08:33.030
Mit Hilfe dieser Pakete kann man sagen, dass sie eine große

08:33.030 --> 08:33.990
Hilfe sind.

08:33.990 --> 08:38.990
Und diese Pakete, die immer den Namen "@types" tragen, und dann den Paketnamen,

08:39.290 --> 08:40.860
gibt es im Grunde für alle

08:40.860 --> 08:45.270
gängigen Bibliotheken von Drittanbietern, die Sie da draußen finden

08:45.270 --> 08:46.730
können.

08:46.730 --> 08:49.960
Sie können immer nach dem Namen der Bibliothek suchen und dann

08:49.960 --> 08:51.690
z. B. jQuery types eingeben, und

08:51.690 --> 08:54.400
Sie sollten einen solchen Eintrag finden.

08:54.400 --> 08:57.350
So können Sie also mit Typen in Vanilla JavaScript-Bibliotheken

08:57.350 --> 08:59.373
arbeiten.
