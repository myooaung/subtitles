WEBVTT

00:02.300 --> 00:03.133
Instruktor: Czyli oczywiście

00:03.133 --> 00:05.250
naszym celem nie jest tylko zalogowanie tego identyfikatora.

00:05.250 --> 00:09.340
Zamiast tego chcę wyodrębnić identyfikator projektu tutaj, w dzienniku,

00:09.340 --> 00:11.110
w handlerze kropli.

00:11.110 --> 00:15.410
I z tym celem jest naprawdę przenieść projekt teraz, lub zmienić

00:15.410 --> 00:18.910
status projektu, aby być precyzyjnym.

00:18.910 --> 00:21.400
Jak możemy to zrobić?

00:21.400 --> 00:26.063
Otóż w naszym stanie, powiedziałbym, w naszym stanie projektu, w

00:26.950 --> 00:30.000
którym obecnie mamy metodę addProject, potrzebujemy

00:30.000 --> 00:33.160
również metody moveProject.

00:33.160 --> 00:35.060
A celem tej metody będzie

00:35.060 --> 00:38.550
w zasadzie przełączenie statusu projektu.

00:38.550 --> 00:40.180
Oczywiście, mógłbyś również dlatego

00:40.180 --> 00:42.970
nazwać to, SwitchProjectStatus, lub cokolwiek chcesz,

00:42.970 --> 00:44.390
ale ponieważ robimy drag-and-drop

00:44.390 --> 00:46.440
nazywam to MoveProject.

00:46.440 --> 00:49.470
Tak więc w MoveProject celem jest przeniesienie

00:49.470 --> 00:53.860
projektu z listy, na której aktualnie się znajduje, na nową listę.

00:53.860 --> 00:55.460
Teraz nie zawsze oznacza to,

00:55.460 --> 00:58.030
że musimy po prostu przerzucić status projektu

00:58.030 --> 01:00.480
z aktywnego na zakończony i na odwrót.

01:00.480 --> 01:02.870
Przecież użytkownik mógłby to robić, przeciągać

01:02.870 --> 01:05.060
i upuszczać w tym samym pudełku.

01:05.060 --> 01:07.120
Tak więc, jeśli następnie zawsze uruchamiamy

01:07.120 --> 01:10.680
metodę, która przełącza stan, mielibyśmy nieoczekiwany efekt, w

01:10.680 --> 01:12.690
którym upuszczenie w tym samym pudełku

01:12.690 --> 01:15.754
nadal przełącza projekt do drugiego pudełka.

01:15.754 --> 01:18.972
Więc zamiast tego, w MoveProject, naprawdę musimy wiedzieć,

01:18.972 --> 01:23.402
który projekt przenieść, i które pudełko jest nowym pudełkiem.

01:23.402 --> 01:24.235
Więc, który status jest nowym statusem.

01:25.940 --> 01:28.190
Tak więc spodziewam się, że otrzymam tutaj identyfikator

01:28.190 --> 01:31.410
projektu, który powinien być ciągiem znaków, oraz nowy status.

01:31.410 --> 01:34.130
A nowy status tutaj oczywiście może

01:34.130 --> 01:36.410
być typu ProjectStatus.

01:38.580 --> 01:40.803
A następnie wewnątrz MoveProject,

01:41.692 --> 01:44.320
chcę znaleźć projekt z tym identyfikatorem

01:44.320 --> 01:46.830
w mojej tablicy projektów.

01:46.830 --> 01:49.090
Więc tutaj, w tej tablicy projektów,

01:49.090 --> 01:51.680
a następnie przerzucić jego status.

01:51.680 --> 01:54.580
Więc w tym celu możemy sięgnąć do tego project's,

01:54.580 --> 01:57.450
znaleźć tam projekt, a metoda find jest

01:57.450 --> 01:59.440
do tego idealna.

01:59.440 --> 02:01.210
Działa na każdym elemencie w tej tablicy, daje

02:01.210 --> 02:02.680
nam dostęp do każdego elementu, a następnie

02:02.680 --> 02:03.970
musimy zwrócić true, jeśli jest

02:03.970 --> 02:05.770
to element, którego szukamy.

02:05.770 --> 02:07.150
I chcę zwrócić true, jeśli

02:07.150 --> 02:09.860
ID elementu, na który aktualnie patrzymy,

02:09.860 --> 02:12.830
jest równe projectId, który dostaję tutaj jako

02:12.830 --> 02:15.420
argument, to mamy element, który powinien

02:15.420 --> 02:17.470
się zmienić, i tam na tym elemencie

02:17.470 --> 02:21.070
musimy tylko zmienić status na nowy status.

02:21.070 --> 02:22.653
Teraz to może być null, więc

02:23.490 --> 02:26.490
tutaj nazwę to, projekt, przechowywany jako teraz

02:26.490 --> 02:28.080
stała o nazwie projekt, i

02:28.080 --> 02:30.550
sprawdź, czy projekt istnieje.

02:30.550 --> 02:34.160
A jeśli istnieje, to chcę ustawić status równy

02:34.160 --> 02:39.160
nowemu statusowi tutaj. To proste.

02:39.250 --> 02:42.900
To już zmieni obiekt w tablicy i w zasadzie

02:42.900 --> 02:45.643
mamy to za sobą.

02:46.970 --> 02:50.010
Oczywiście, jednak nie jesteśmy do końca skończeni.

02:50.010 --> 02:52.250
Musimy teraz poinformować wszystkich, wszystkich

02:52.250 --> 02:56.040
naszych słuchaczy, że coś się zmieniło w naszym projekcie i że powinni ponownie

02:56.040 --> 02:57.870
wykonać renderowanie.

02:57.870 --> 02:59.980
Musimy więc ponownie przejść przez wszystkich

02:59.980 --> 03:01.910
słuchaczy, a ponieważ powtarzalibyśmy

03:01.910 --> 03:04.080
tutaj kod, zlecę to w nowej prywatnej metodzie,

03:04.080 --> 03:07.920
updateListeners może być opłacalną nazwą, a tam będę miał tę pętlę for,

03:07.920 --> 03:10.490
w której przejdziemy przez wszystkich słuchaczy,

03:10.490 --> 03:13.660
a następnie zrobimy coś.

03:13.660 --> 03:15.890
A następnie wywołam ten updateListeners

03:15.890 --> 03:17.430
zarówno z metody addProject,

03:17.430 --> 03:20.890
jak i z metody moveProject.

03:20.890 --> 03:23.033
Tutaj tylko wtedy, gdybyśmy coś zmienili.

03:24.350 --> 03:26.100
Więc teraz wszyscy słuchacze zostaną wywołani.

03:26.100 --> 03:28.980
I jeśli pamiętasz, listener w naszej aplikacji tutaj,

03:28.980 --> 03:33.010
zasadniczo prowadzi do listy, aby ponownie wyrenderować jej elementy.

03:33.010 --> 03:35.310
Więc to będzie działać dokładnie tak, jak powinno,

03:35.310 --> 03:37.940
lub powinno działać dokładnie tak, jak powinno.

03:37.940 --> 03:40.640
Więc teraz mamy tę metodę moveProject, tam na

03:40.640 --> 03:43.730
dole, w handlerze drop, możemy teraz użyć tego.

03:43.730 --> 03:46.390
Tam możemy teraz użyć projectState,

03:46.390 --> 03:49.670
wywołać moveProject i przekazać ID projektu,

03:49.670 --> 03:52.296
a teraz nowy status projektu.

03:52.296 --> 03:54.190
A nowy status projektu

03:54.190 --> 03:57.880
zależy od listy, na którą to wrzucimy.

03:57.880 --> 03:59.630
Więc chcę autobindować mój drop

04:00.760 --> 04:01.790
handler, tak aby

04:01.790 --> 04:04.050
słowo kluczowe this w drop handlerze

04:04.050 --> 04:06.020
odnosiło się do klasy otaczającej,

04:06.020 --> 04:08.500
a ta klasa otaczająca to lista projektów,

04:08.500 --> 04:10.320
która, jeśli pamiętasz, będzie

04:10.320 --> 04:13.020
miała tutaj właściwość type, przechowujemy

04:13.020 --> 04:15.820
ją tutaj, mamy typ, właściwość i to jest aktywne

04:15.820 --> 04:18.120
lub zakończone.

04:18.120 --> 04:21.000
Więc teraz musimy tylko przetłumaczyć aktywne lub zakończone

04:21.000 --> 04:22.640
na nasze wartości enum.

04:22.640 --> 04:24.850
Więc tutaj, przechodzę w tym. typ, i sprawdzam czy

04:24.850 --> 04:27.230
jest równy active, w takim przypadku przekazujemy

04:27.230 --> 04:31.580
ProjectStatus. Active, jako nowy status

04:31.580 --> 04:33.750
projektu, bo taki jest status

04:33.750 --> 04:36.190
listy, na którą przenieśliśmy

04:36.190 --> 04:38.160
projekt.

04:38.160 --> 04:41.733
W przeciwnym razie przekazujemy ProjectStatus. Skończone i pozwolę sobie to

04:42.660 --> 04:45.423
przeformatować, żeby łatwiej było czytać.

04:46.730 --> 04:48.110
Z tego powodu spróbujmy.

04:48.110 --> 04:52.440
Zapiszmy wszystko, i dodajmy tu nowy projekt, a teraz przeciągnijmy

04:52.440 --> 04:56.620
go na gotowe projekty i przełącza się, i to samo, a jeśli przesunę

04:56.620 --> 04:58.270
go z powrotem.

04:58.270 --> 05:02.320
Jeśli odpuszczę tutaj w aktywnych projektach, to nic się nie zmienia.

05:02.320 --> 05:04.400
Teraz zobaczysz, jeśli sprawdzisz

05:04.400 --> 05:08.100
DOM, że technicznie jest to rerender, co może nie być idealne,

05:08.100 --> 05:11.450
więc moglibyśmy pomyśleć o wymyśleniu jakiegoś rozwiązania,

05:11.450 --> 05:15.290
które sprawdza, czy status faktycznie się zmienił, a jeśli nie,

05:15.290 --> 05:17.400
nie aktualizujemy, to jest coś, co możemy

05:17.400 --> 05:18.890
zrobić.

05:18.890 --> 05:22.620
Ale z perspektywy UI aktualizuje się tak, jak powinien.

05:22.620 --> 05:24.570
Teraz dodajmy też drugi projekt

05:24.570 --> 05:27.120
i zobaczmy, czy to coś niszczy, czy wszystko

05:27.120 --> 05:29.260
nadal działa i powiedziałbym, że

05:29.260 --> 05:31.750
wygląda to przyzwoicie, że wygląda to dla

05:31.750 --> 05:33.720
mnie całkiem dobrze.

05:33.720 --> 05:37.120
Wszystko wydaje się działać dokładnie tak, jak powinno.

05:37.120 --> 05:40.230
Więc przeciąganie i upuszczanie działa tutaj dobrze,

05:40.230 --> 05:42.600
ale jest to jedno ulepszenie, o którym wspomniałem

05:42.600 --> 05:46.305
z powrotem w stanie projektu, w moveProject, kiedy nazwałem to

05:46.305 --> 05:49.470
updateListeners, możemy faktycznie sprawdzić, czy naprawdę

05:49.470 --> 05:51.920
zmieniliśmy stan.

05:51.920 --> 05:54.150
Więc tutaj możemy sprawdzić czy projekt,

05:54.150 --> 05:57.940
więc jeśli go znaleźliśmy, i jeśli wtedy status projektu, jest

05:57.940 --> 06:00.270
inny niż nowy status, i tylko wtedy zmieniamy

06:00.270 --> 06:03.830
status i aktualizujemy słuchaczy.

06:03.830 --> 06:06.060
Jeśli stan jest taki sam nie robimy

06:06.060 --> 06:09.310
tego i unikamy niepotrzebnego cyklu rerenderów.

06:09.310 --> 06:10.143
Więc teraz z tym,

06:10.143 --> 06:12.900
jeżeli zapisaliśmy to i szybko dodamy nowy projekt,

06:12.900 --> 06:14.790
to zobaczysz, jeżeli ja tutaj inspekcjonuję

06:14.790 --> 06:18.190
elementy i oglądasz L-I i sprawdzasz, czy to miga, czyli by

06:18.190 --> 06:21.800
się reerenderowało, to tutaj nie miga, miga tylko droppable,

06:21.800 --> 06:24.490
klasa, którą przed chwilą dodaliśmy, ale L-I nie

06:24.490 --> 06:27.970
miga, jeżeli upuszczę w tym samym boxie, tylko miga, jeżeli przeniosę

06:27.970 --> 06:30.990
go do innego boxu.

06:30.990 --> 06:34.460
I powinien wtedy błysnąć, bo wtedy naprawdę go ruszyliśmy.

06:34.460 --> 06:36.180
Więc teraz zoptymalizujemy to trochę,

06:36.180 --> 06:39.050
a teraz mamy działające przeciąganie i upuszczanie tutaj,

06:39.050 --> 06:42.223
wszystko zbudowane i zasilane z i przez TypeScript.
