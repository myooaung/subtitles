WEBVTT

00:02.540 --> 00:05.610
Instruktor: Następnie chcę zbadać przeciążenia

00:05.610 --> 00:08.050
funkcji, cechę, która pozwala nam zdefiniować

00:08.050 --> 00:11.450
wiele sygnatur funkcji, że tak powiem, dla jednej i

00:11.450 --> 00:13.840
tej samej funkcji.

00:13.840 --> 00:17.080
Co po prostu oznacza, że możemy mieć wiele możliwych

00:17.080 --> 00:20.340
sposobów wywołania funkcji z różnymi parametrami,

00:20.340 --> 00:24.300
na przykład, aby następnie zrobić coś wewnątrz tej funkcji.

00:24.300 --> 00:26.540
A dobry przykład, gdzie przeciążenia funkcji

00:26.540 --> 00:29.060
mogą nam pomóc, można zobaczyć nieco dalej.

00:29.060 --> 00:32.090
Funkcja add, którą napisaliśmy wcześniej, przyjmuje

00:32.090 --> 00:35.940
dwie wartości kombinowane, czyli ciągi znaków lub liczby,

00:35.940 --> 00:37.960
a następnie, jak widzisz, typ zwracany,

00:37.960 --> 00:39.830
który TypeScript wywnioskował,

00:39.830 --> 00:43.450
że wszystko jest kombinowane.

00:43.450 --> 00:45.370
Oznacza to po prostu, że TypeScript

00:45.370 --> 00:47.960
rozumie, że to, co zwraca, również jest albo łańcuchem,

00:47.960 --> 00:51.080
albo liczbą, ale w rzeczywistości, jeśli myślisz o tym,

00:51.080 --> 00:52.880
to nie jest to prawda.

00:52.880 --> 00:55.280
To znaczy, technicznie jest to prawda, ale wiemy,

00:55.280 --> 00:57.620
że jeśli przekażemy dwie liczby, typem zwracanym

00:57.620 --> 00:59.400
zawsze będzie liczba.

00:59.400 --> 01:01.940
Jeśli przekażemy co najmniej jeden ciąg znaków,

01:01.940 --> 01:03.950
typem zwrotnym będzie string.

01:03.950 --> 01:05.460
Dlaczego to może mieć znaczenie?

01:05.460 --> 01:08.225
Należy pamiętać, że funkcja add jest napisana w ten sposób.

01:08.225 --> 01:11.060
I właściwie możesz wykomentować wszystko

01:11.060 --> 01:15.390
poniżej i dodać trochę nowego kodu tam na górze, tuż pod funkcją.

01:15.390 --> 01:18.670
Jeśli teraz otrzymam mój wynik tutaj, wywołując

01:18.670 --> 01:21.870
add, przekazuję jeden i pięć, widzisz wynik jest

01:21.870 --> 01:23.390
typu combinable.

01:23.390 --> 01:27.010
Konsekwencją tego jest to, że TypeScript nie

01:27.010 --> 01:30.390
wie, czy wynik jest liczbą czy łańcuchem.

01:30.390 --> 01:34.510
Teraz to może mieć naprawdę znaczenie, jeśli przekazujemy w ciągach.

01:34.510 --> 01:39.510
Jeśli przekażę tutaj Max Schwarz, wtedy to działa, ale wciąż dostaję

01:39.700 --> 01:41.750
z powrotem combinable.

01:41.750 --> 01:43.990
Teraz w konsekwencji nie mogę wywołać

01:43.990 --> 01:46.120
funkcji łańcuchowych na wyniku, nie

01:46.120 --> 01:50.600
mogę wywołać split na przykład, aby podzielić na białą przestrzeń.

01:50.600 --> 01:52.870
Wiem, że to zadziała, ponieważ wiem,

01:52.870 --> 01:55.270
że kiedy wywołam funkcję w ten sposób,

01:55.270 --> 01:57.200
zrobię z niej tę gałąź if i otrzymam

01:57.200 --> 01:59.980
z powrotem ciąg, więc wiem, że wyniki będą

01:59.980 --> 02:03.030
trzymać ciąg, ale TypeScript po prostu wie, że

02:03.030 --> 02:05.620
trzyma ciąg lub liczbę.

02:05.620 --> 02:08.350
Teraz oczywiście możemy użyć rzutowania typu tutaj i powiedzieć

02:08.350 --> 02:11.340
TypeScriptowi, że to, co otrzymujemy z powrotem, to ciąg znaków.

02:11.340 --> 02:13.930
Możemy to zrobić za pomocą składni rzutowania

02:13.930 --> 02:16.040
typów, którą poznałeś wcześniej.

02:16.040 --> 02:18.840
Nadal nie jest optymalne, że musimy to zrobić, argumentowałbym,

02:18.840 --> 02:21.800
ponieważ musimy napisać więcej kodu tutaj, nawet jeśli oczekiwalibyśmy,

02:21.800 --> 02:24.560
że TypeScript zrozumie, że kiedy wywołujemy tę funkcję w ten

02:24.560 --> 02:26.070
sposób, zawsze otrzymujemy z powrotem

02:26.070 --> 02:27.740
ciąg.

02:27.740 --> 02:30.890
Ale TypeScript nie analizuje tutaj naszego kodu wystarczająco

02:30.890 --> 02:33.700
dobrze i właśnie w tym miejscu może nam pomóc przeciążenie

02:33.700 --> 02:35.000
funkcji.

02:35.000 --> 02:38.730
Przeciążenie funkcji pisze się po prostu pisząc funkcję tuż

02:38.730 --> 02:41.880
nad swoją główną funkcją, że tak powiem, o tej samej

02:41.880 --> 02:46.683
nazwie, więc powtarzasz tę linię tutaj w zasadzie, jednak bez nawiasów klamrowych,

02:47.880 --> 02:50.890
bez otwierających i zamykających nawiasów klamrowych

02:50.890 --> 02:54.080
następnie, a teraz tutaj chcesz użyć konkretnych

02:54.080 --> 02:57.980
typów liczba i liczba, a następnie typ zwrotny find dla kiedy

02:57.980 --> 03:03.410
jest to przypadek, gdy otrzymasz co najmniej jedną liczbę.

03:03.410 --> 03:06.643
I tam moglibyśmy powiedzieć, że wtedy typem zwrotnym jest liczba.

03:08.840 --> 03:10.980
Więc teraz z tym mówimy do TypeScript,

03:10.980 --> 03:14.980
jeśli wywołujemy tę funkcję i oba argumenty są liczbą, to ta

03:14.980 --> 03:17.180
funkcja zwraca liczbę.

03:17.180 --> 03:19.430
Teraz to oczywiście nie jest składnia, która

03:19.430 --> 03:22.480
działałaby w JavaScript, zostanie wyeliminowana przez TypeScript

03:22.480 --> 03:24.430
w procesie kompilacji.

03:24.430 --> 03:28.480
Ale TypeScript łączy te informacje o funkcji i tę deklarację

03:28.480 --> 03:31.380
funkcji tutaj razem i zasadniczo łączy

03:31.380 --> 03:33.640
wiedzę o tych dwóch liniach

03:33.640 --> 03:35.550
tutaj.

03:35.550 --> 03:38.590
I teraz wie, że ok, możemy wywołać tę funkcję

03:38.590 --> 03:41.490
tutaj albo z A i B typu combinable, albo

03:41.490 --> 03:43.790
z A i B typu number.

03:43.790 --> 03:47.060
Przy okazji, możesz również dodać więcej lub mniej parametrów tutaj

03:47.060 --> 03:50.100
w swoich przeciążeniach, jesteś tam naprawdę elastyczny.

03:50.100 --> 03:53.640
Dodajesz również funkcję dodaj tutaj i po prostu oczekuj

03:53.640 --> 03:57.620
jednej liczby i zwróć liczbę, a to również działałoby, gdybyśmy

03:57.620 --> 04:01.210
zrobili B opcjonalne w naszych innych przeciążeniach,

04:01.210 --> 04:03.270
jak również.

04:03.270 --> 04:05.254
Ponieważ ostatecznie oczywiście musisz

04:05.254 --> 04:08.630
zapewnić, że twój kod w tym miejscu zawsze działa i otrzymujesz wszystkie

04:08.630 --> 04:10.850
potrzebne argumenty na końcu.

04:10.850 --> 04:13.610
Więc to B byłoby opcjonalne tutaj wtedy widzisz to działa,

04:13.610 --> 04:15.170
teraz oczywiście po prostu musielibyśmy

04:15.170 --> 04:17.850
pracować wokół B będąc potencjalnie opcjonalnym

04:17.850 --> 04:19.550
tam na dole.

04:19.550 --> 04:21.390
Nie potrzebuję tego jednak, więc pozbędę

04:21.390 --> 04:24.460
się tego i po prostu zostawię to, ale nie chciałem również przeciążenia

04:24.460 --> 04:27.200
dla kiedy wywołaliśmy to z ciągami.

04:27.200 --> 04:30.060
Więc dodam kolejne przeciążenie funkcji add tutaj,

04:30.060 --> 04:33.450
gdzie A jest ciągiem i B jest ciągiem, a następnie jestem

04:33.450 --> 04:36.090
całkiem jasny w odniesieniu do faktu, że to,

04:36.090 --> 04:38.460
co zwrócimy, będzie ciągiem.

04:38.460 --> 04:40.280
Przy okazji, dobrą praktyką jest

04:40.280 --> 04:43.660
dodanie średnika po tych liniach przeciążeniowych tutaj.

04:43.660 --> 04:46.560
Więc teraz z tym mówię, jeśli wywołujemy tę funkcję z dwoma

04:46.560 --> 04:49.100
liczbami, zawsze otrzymujemy z powrotem liczbę.

04:49.100 --> 04:52.170
Jeśli wywołamy go z dwoma ciągami, zawsze otrzymamy z powrotem ciąg.

04:52.170 --> 04:54.510
Jeśli wywołamy go z jednym ciągiem i jedną liczbą,

04:54.510 --> 04:57.020
to technicznie również zawsze otrzymamy z powrotem

04:57.020 --> 04:57.853
ciąg, ale nie chcę

04:57.853 --> 04:59.410
tutaj dodawać wszystkich tych możliwych

04:59.410 --> 05:01.240
kombinacji, oczywiście mógłbym dodać

05:01.240 --> 05:03.173
więcej, a następnie dodać również liczbę

05:04.040 --> 05:06.470
tutaj, lub inną kombinację, którą możemy mieć, czyli

05:06.470 --> 05:07.500
tę.

05:07.500 --> 05:10.060
No to chyba teraz dodałem wszystkie kombinacje.

05:10.060 --> 05:12.540
A teraz wymieniam tutaj wszystkie potencjalne

05:12.540 --> 05:16.040
kombinacje wartości i co zwracamy w każdym przypadku.

05:16.040 --> 05:18.260
Teraz widzisz, że błąd na dole zniknął,

05:18.260 --> 05:20.520
ponieważ teraz TypeScript wie, że wyniki

05:20.520 --> 05:25.623
będą typu string, jeśli wywołamy add z tymi dwoma wartościami, które są łańcuchami.

05:25.623 --> 05:28.510
A jeśli najeżdżam na add to widzisz, że są dostępne

05:28.510 --> 05:31.100
trzy dodatkowe przeciążenia.

05:31.100 --> 05:32.980
Tutaj wywołuję add z dwoma ciągami,

05:32.980 --> 05:35.560
ale TypeScript wie, że istnieją trzy inne sposoby

05:35.560 --> 05:36.630
wywołania tego.

05:36.630 --> 05:39.450
Na przykład z ciągiem i liczbą, w którym

05:39.450 --> 05:41.340
to przypadku otrzymuję z

05:41.340 --> 05:46.340
powrotem ciąg, z liczbą i jakimś ciągiem lub z dwoma liczbami.

05:47.430 --> 05:48.630
To też by się sprawdziło.

05:48.630 --> 05:50.210
Następnie oczywiście nie mogę wywołać

05:50.210 --> 05:52.650
split, ponieważ TypeScript poprawnie identyfikuje,

05:52.650 --> 05:54.630
że kiedy wywołuję to z dwoma liczbami, otrzymuję

05:54.630 --> 05:58.253
z powrotem liczbę, a na liczbie nie można wywołać split.

05:59.260 --> 06:02.010
Są to przeciążenia funkcji i mogą pomóc w sytuacjach

06:02.010 --> 06:04.060
takich jak ta tutaj, gdzie TypeScript

06:04.060 --> 06:06.780
nie byłby w stanie poprawnie wywnioskować typu

06:06.780 --> 06:08.590
zwrotu na własną rękę, tutaj możesz

06:08.590 --> 06:11.660
być naprawdę jasny, co jest zwracane dla różnych kombinacji,

06:11.660 --> 06:16.033
które możesz wspierać w swojej funkcji.
