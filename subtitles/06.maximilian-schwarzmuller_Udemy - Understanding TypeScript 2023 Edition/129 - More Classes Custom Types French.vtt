WEBVTT

00:02.220 --> 00:05.760
- : Comme prochaine étape, je veux travailler sur ces types

00:05.760 --> 00:09.900
ici, le type quelconque que j'utilise ici pour mes projets assignés,

00:09.900 --> 00:11.320
pour les auditeurs ici,

00:11.320 --> 00:14.980
et aussi pour les projets dans l'état de projet.

00:14.980 --> 00:19.030
Bien sûr, ici, je ne veux pas travailler avec n'importe lequel, il

00:19.030 --> 00:20.740
serait plus logique d'avoir

00:20.740 --> 00:25.660
une classe de projet dédiée ou un type de projet, que nous pouvons utiliser.

00:25.660 --> 00:27.760
Et en effet, je vais créer une classe

00:29.070 --> 00:29.903
pour ce type de

00:31.390 --> 00:32.450
projet, simplement

00:32.450 --> 00:34.890
en utilisant la classe projet afin d'avoir

00:34.890 --> 00:38.740
un moyen de construire des objets de projet, qui ont toujours

00:38.740 --> 00:41.570
la même structure.

00:41.570 --> 00:44.760
En ce moment, je le fais en bas avec la notation littérale.

00:44.760 --> 00:47.920
L'inconvénient, bien sûr, c'est qu'il faut se rappeler

00:47.920 --> 00:50.490
qu'il s'agit de description et non de Desc.

00:50.490 --> 00:52.410
que nous avons besoin d'un ID, qui est une chaîne,

00:52.410 --> 00:53.470
et ainsi de suite.

00:53.470 --> 00:56.440
C'est là qu'un type personnalisé peut nous aider

00:56.440 --> 00:59.750
et je vais créer une classe et non une interface ou un

00:59.750 --> 01:02.300
type personnalisé avec le mot-clé type

01:02.300 --> 01:05.470
parce que je veux pouvoir l'instancier.

01:05.470 --> 01:07.960
Alors, à quoi devrait ressembler un tel

01:07.960 --> 01:10.700
cours ou un tel projet pour être précis ?

01:10.700 --> 01:12.320
J'ajouterai un constructeur,

01:12.320 --> 01:17.280
puis j'utiliserai ce raccourci pour affecter des arguments ou des paramètres

01:17.280 --> 01:19.100
au constructeur, qui deviendront

01:19.100 --> 01:22.310
automatiquement des propriétés, en ajoutant l'accesseur

01:22.310 --> 01:25.650
au début, Public, dans ce cas, puis le nom de l'argument

01:25.650 --> 01:29.450
et de la propriété, et enfin le type.

01:29.450 --> 01:33.100
Et ici, chaque projet devrait avoir un identifiant.

01:33.100 --> 01:34.990
Chaque projet doit avoir un titre, qui est également

01:34.990 --> 01:37.330
une chaîne de caractères, tout comme l'ID.

01:37.330 --> 01:38.690
Il doit avoir une description,

01:38.690 --> 01:39.920
qui est une chaîne de caractères,

01:39.920 --> 01:44.420
il doit avoir une propriété Personnes, qui est un nombre qui correspond au nombre

01:44.420 --> 01:47.440
de personnes affectées à un projet.

01:47.440 --> 01:49.580
Et une chose que je veux aussi ajouter,

01:49.580 --> 01:51.640
que nous n'avions pas jusqu'à présent,

01:51.640 --> 01:53.580
est en fait un statut de projet.

01:53.580 --> 01:56.920
Parce qu'actuellement, lorsque nous ajoutons un projet ici, il

01:56.920 --> 01:58.680
apparaît dans les deux listes.

01:58.680 --> 02:01.530
Maintenant, je veux ajouter le statut d'un projet

02:01.530 --> 02:03.630
qui, bien sûr, peut être modifié afin

02:03.630 --> 02:07.470
que nous puissions effectivement filtrer les projets actifs dans

02:07.470 --> 02:11.470
la première case et les projets terminés dans une deuxième case.

02:11.470 --> 02:15.000
Donc pour être seulement montrer les bons projets à chaque boîte.

02:15.000 --> 02:19.890
Donc pour cela, je vais ajouter une autre propriété publique ici, le statut.

02:19.890 --> 02:21.280
Et maintenant, la question qui

02:21.280 --> 02:23.985
se pose bien sûr est de savoir quel type doit avoir ce statut.

02:23.985 --> 02:28.240
Maintenant, nous pourrions utiliser un type union avec deux types littéraux Active

02:28.240 --> 02:31.170
et Fini ce que nous avons déjà utilisé précédemment.

02:31.170 --> 02:33.280
Mais ici, je veux toujours introduire

02:33.280 --> 02:36.890
ou réintroduire un autre type que vous avez appris, et

02:36.890 --> 02:38.320
c'est l'Enum.

02:38.320 --> 02:41.890
L'Enum est parfait ici car nous avons exactement deux options.

02:41.890 --> 02:44.950
Et ici, dans le contexte de cet objet de projet, nous n'avons pas

02:44.950 --> 02:48.740
non plus besoin d'un texte qui ait un sens pour les humains, que nous stockons comme

02:48.740 --> 02:50.270
une valeur, mais nous avons simplement

02:50.270 --> 02:52.341
besoin d'un identifiant.

02:52.341 --> 02:56.140
Donc ici je vais ajouter un nouveau statut de projet Enum.

02:56.140 --> 02:59.810
Et je veux avoir deux valeurs ici,

02:59.810 --> 03:02.890
Active et Finished.

03:02.890 --> 03:05.440
Et puis ici, ce statut sera de type

03:05.440 --> 03:08.610
statut de projet juste comme ça.

03:08.610 --> 03:11.003
C'est maintenant ma classe de projet.

03:11.900 --> 03:14.220
Avec cela ici, nous pouvons dire que c'est

03:14.220 --> 03:17.820
un tableau de projets utilisant cette classe de projet.

03:17.820 --> 03:20.351
Et bien sûr, lorsque nous créons

03:20.351 --> 03:24.780
un projet ici, nous le faisons en utilisant nouveau projet,

03:24.780 --> 03:25.613
pas état de

03:25.613 --> 03:26.620
projet.

03:26.620 --> 03:30.310
Et ici, pour le projet, nous transmettons un ID dans ce cas,

03:30.310 --> 03:32.200
comme mentionné précédemment,

03:32.200 --> 03:35.370
un numéro aléatoire que nous convertissons en une

03:35.370 --> 03:36.720
chaîne de caractères,

03:36.720 --> 03:38.210
puis le titre, puis la description,

03:38.210 --> 03:41.930
puis le NUM de personnes ici, et puis aussi, bien sûr, c'est

03:41.930 --> 03:45.080
le statut, d'accord.

03:45.080 --> 03:49.950
Et une chose que je veux avoir ici dans cette application, dans ce projet de

03:49.950 --> 03:53.180
démonstration, c'est que chaque nouveau projet

03:53.180 --> 03:54.830
est actif par défaut.

03:54.830 --> 03:57.040
Ainsi, lorsque nous créons un nouveau projet ici, nous

03:57.040 --> 04:00.064
lui attribuons un statut de projet. actif ici comme une valeur

04:00.064 --> 04:02.990
pour le statut avec cela, nous devons projeter

04:02.990 --> 04:05.230
ce que nous ajoutons.

04:05.230 --> 04:06.720
Et maintenant il y a un autre endroit

04:06.720 --> 04:08.450
où nous avons besoin de la classe projet.

04:08.450 --> 04:11.220
Et c'est ici, dans la classe Liste de projets, que nous

04:11.220 --> 04:13.474
avons la propriété Affecter des projets.

04:13.474 --> 04:17.240
Et bien sûr, cela devrait toujours être un ensemble de projets.

04:17.240 --> 04:19.530
Maintenant, avec ça, nous utilisons la typographie Beta.

04:19.530 --> 04:22.810
Et l'un des avantages est qu'ici, dans les projets d'équarrissage,

04:22.810 --> 04:26.360
nous avons maintenant aussi l'achèvement automatique, par exemple.

04:26.360 --> 04:29.020
Et nous obtiendrions également une erreur, une erreur de

04:29.020 --> 04:31.300
compilation si nous essayons d'enregistrer cela,

04:31.300 --> 04:33.100
parce que maintenant TypeScript comprend

04:33.100 --> 04:35.360
avec quels types nous travaillons ici.

04:35.360 --> 04:39.040
C'est donc la classe de projet et comment nous pouvons l'utiliser.

04:39.040 --> 04:41.760
La classe Projet n'est pas la seule classe Cependant,

04:41.760 --> 04:44.230
nous avons aussi le Listener ici.

04:44.230 --> 04:48.630
Et pour cela, je vais ajouter un nouveau type personnalisé Listener.

04:48.630 --> 04:50.390
Le nom est bien sûr à votre discrétion.

04:50.390 --> 04:54.280
Et j'utilise juste un type ici parce que je veux essentiellement

04:54.280 --> 04:58.260
coder un type de fonction avec un mot.

04:58.260 --> 04:59.640
Alors, qu'est-ce qu'on entend par là ?

04:59.640 --> 05:03.270
Bien sûr, un écouteur dans notre application est

05:03.270 --> 05:05.370
juste une fonction, non ?

05:05.370 --> 05:07.160
Ce que nous avons stocké dans le tableau des

05:07.160 --> 05:08.960
listeners n'est qu'un ensemble de fonctions.

05:08.960 --> 05:11.060
Add Listener pousse une nouvelle fonction, et lorsque

05:11.060 --> 05:12.200
quelque chose change, nous

05:12.200 --> 05:14.190
exécutons cette fonction.

05:14.190 --> 05:17.610
Donc, ici, un auditeur est vraiment juste une fonction.

05:17.610 --> 05:22.610
Mais c'est une fonction qui reçoit nos articles, certains articles

05:22.870 --> 05:23.703
dans notre

05:23.703 --> 05:27.113
cas et un ensemble de projets.

05:28.500 --> 05:30.410
Et qui ensuite en fait quelque chose.

05:30.410 --> 05:32.480
Maintenant, pour être précis, bien sûr, pour

05:32.480 --> 05:33.550
définir un type de fonction,

05:33.550 --> 05:35.200
nous n'avons pas d'accolades ici, mais

05:35.200 --> 05:37.440
à la place, comme vous l'avez appris, le type de retour,

05:37.440 --> 05:38.780
et ce sera large, ce qui signifie

05:38.780 --> 05:41.880
que nous ne nous soucions pas de toute valeur que la fonction Listener

05:41.880 --> 05:44.090
pourrait retourner.

05:44.090 --> 05:46.140
Dans le lieu où nous travaillons avec les auditeurs.

05:46.140 --> 05:47.940
Nous n'avons pas besoin de type de retour.

05:47.940 --> 05:49.810
Nous voulons simplement nous assurer

05:49.810 --> 05:51.880
que quiconque passe comme un tel auditeur

05:51.880 --> 05:55.870
s'attend à recevoir des éléments lorsque l'auditeur se déclenche.

05:55.870 --> 05:58.530
Avec cela ici, nous pouvons dire que Listeners

05:58.530 --> 06:02.760
est un tableau de fonctions d'écoute bien à la fin.

06:02.760 --> 06:05.670
Et là, quand je pousse la fonction listener, je dois

06:05.670 --> 06:08.480
préciser que ce n'est pas n'importe quelle fonction,

06:08.480 --> 06:10.630
mais que c'est un type de listener, alors

06:10.630 --> 06:12.350
tout fonctionne.

06:12.350 --> 06:14.530
Maintenant, à l'endroit où nous utilisons

06:14.530 --> 06:16.180
Add Listener, qui se trouve en bas,

06:16.180 --> 06:17.650
nous pouvons aussi, bien sûr,

06:17.650 --> 06:19.869
améliorer notre typographie et préciser qu'ici,

06:19.869 --> 06:23.440
nous obtiendrons effectivement un tas de projets.

06:23.440 --> 06:27.220
Maintenant, avec cela, nous avons configuré notre écouteur,

06:27.220 --> 06:32.210
nous avons ajouté le type de projet, et cela ne change rien ici.

06:32.210 --> 06:35.120
Si nous ajoutons maintenant quelque chose qui fonctionne,

06:35.120 --> 06:36.900
et si j'ajoute un deuxième élément,

06:36.900 --> 06:38.880
il est toujours ajouté en plus du premier

06:38.880 --> 06:40.530
élément qui est ajouté à nouveau,

06:40.530 --> 06:43.230
et nous ne faisons aucun filtrage dans aucune des

06:43.230 --> 06:45.260
listes du tout.

06:45.260 --> 06:48.600
Avant de continuer à travailler sur nos pièces, assurons-nous

06:48.600 --> 06:50.570
que nous n'avons pas cette duplication

06:50.570 --> 06:53.990
ici dans une seule liste, ni cette duplication dans les

06:53.990 --> 06:58.610
deux boîtes ici, mais qu'au lieu de cela, seuls les projets actifs sont affichés

06:58.610 --> 07:02.940
ici et seulement les projets terminés et donc initialement aucun projet

07:02.940 --> 07:08.010
n'apparaît ici dans les projets terminés.

07:08.010 --> 07:09.623
Alors réparons ça.
