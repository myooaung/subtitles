WEBVTT

00:02.280 --> 00:04.510
講師：先ほど学んだアクセス修飾子と関連しますが､

00:04.510 --> 00:06.483
もうひとつの修飾子があります｡

00:07.572 --> 00:09.590
そして､ それがreadonly修飾子です｡ 

00:09.590 --> 00:11.310
例えば､ あるフィールドがあり､

00:11.310 --> 00:14.220
それは単にプライベートかパブリックかだけでなく､

00:14.220 --> 00:18.130
初期化後に変更されるべきではないとします｡

00:18.130 --> 00:21.410
例えば､ idは以後変更しないようにする｡ 

00:21.410 --> 00:25.670
変更してはいけないことを明確にするために､ ここにもreadonlyを追加することができます｡

00:25.670 --> 00:27.890
それもここに追加してくれればよかったのに｡ 

00:27.890 --> 00:30.920
だから､ ここでもprivate readonlyと書いたのでしょう｡ 

00:30.920 --> 00:33.990
さて､ readonlyキーワードは､ privateやpublicと同様､

00:33.990 --> 00:35.710
TypeScriptが導入したもので､

00:35.710 --> 00:37.920
JavaScriptには存在しない｡

00:37.920 --> 00:43.180
それ以降､ そのプロパティに書き込もうとすると失敗するようにしている｡

00:43.180 --> 00:45.690
つまり､ 初期化時に一度だけ使えるのですが､

00:45.690 --> 00:48.620
その後､ 例えばaddEmployeeで､ 何らかの理由でidをd2に変更しようとすると､

00:48.620 --> 00:57.790
ほら､ ここでエラーが出ます､ idはreadonlyだから割り当てられない､ と｡

00:57.790 --> 01:00.800
これは､ あるプロパティが一度だけ初期化され､

01:00.800 --> 01:10.240
その後は変更されるべきではないということを明確にするための安全性を高めるものです｡

01:10.240 --> 01:12.630
だから､ これでまたタイプの安全性を高めることができ､

01:12.630 --> 01:14.910
自分の意思を明確にすることができるのです｡

01:14.910 --> 01:16.320
もちろん､ 「コードを書いているのは私だから､

01:16.320 --> 01:20.470
私が望まないことはしない」と言うこともできます｡

01:20.470 --> 01:24.630
まあ､ それでも､ コードを定義するときにはっきりさせるのはいいことです｡

01:24.630 --> 01:31.280
なぜなら､ 1つは､ 2週間ほどコードの作業を中断すると､ 自分がやりたかったことを忘れてしまうかもしれないこと､

01:31.280 --> 01:32.270
もう1つは､ チームで作業したり､

01:32.270 --> 01:36.550
他の人とコードを共有したりする可能性があることです｡

01:36.550 --> 01:39.390
そして､ 一般的には､ 自分の意図を明確にするために､

01:39.390 --> 01:42.460
明確で明示的なコードを書くことが良いとされています｡

01:42.460 --> 01:44.280
そして､ readonlyは､ 何が目的なのかを明確にすることができるので､

01:44.280 --> 01:47.230
そこで役に立ちます｡

01:47.230 --> 01:49.570
アプリを見てもらうとわかると思います｡  jsは､ 先ほど述べたように､

01:49.570 --> 01:53.050
privateもpublicもread onlyも､

01:53.050 --> 01:57.610
すべてTypeScriptにしか存在しないからです｡

01:57.610 --> 02:06.490
また､ コンストラクタ関数のプロトタイプにメソッドが追加されていることも興味深い点です｡

02:06.490 --> 02:08.830
そのためには､ プロトタイプとは何かを知る必要がありますが､

02:08.830 --> 02:12.520
この講座でそれを紹介するのはちょっと無理があります｡

02:12.520 --> 02:16.070
プロトタイプに飛び込むことができるリソースをいくつか紹介します｡

02:16.070 --> 02:18.490
特にクラスができる前のJavaScriptの重要な部分であり､

02:18.490 --> 02:26.490
JavaScriptの開発者であればプロトタイプを理解しておいて損はないでしょう｡

02:26.490 --> 02:29.030
それでもここでは､ TypeScriptに特化したものではなく､

02:29.030 --> 02:33.020
純粋なJavaScriptのトピックであるため､ それについて深く掘り下げることはしない｡

02:33.020 --> 02:34.150
実際､ TypeScriptでは､

02:34.150 --> 02:38.780
クラスでより多くのことができるため､ 一般的にプロトタイプを使うことはあまりありません｡

02:38.780 --> 02:43.503
そして､ それに関連して､ もう一つの重要なクラスの概念である「継承」を手に入れました｡
