WEBVTT

1
00:00:02.110 --> 00:00:03.890
<v Instructor>So now, after all these features</v>

2
00:00:03.890 --> 00:00:07.820
where we worked with the types themselves, so to say,

3
00:00:07.820 --> 00:00:10.340
where we worked on checking types, costing

4
00:00:10.340 --> 00:00:13.880
types, let's come back to features

5
00:00:13.880 --> 00:00:16.110
that help us ride flexible code.

6
00:00:16.110 --> 00:00:17.930
Of course, still write the two types.

7
00:00:17.930 --> 00:00:20.150
It is typescript after all, but not so much

8
00:00:20.150 --> 00:00:23.520
focused on just the types, now we can manage them.

9
00:00:23.520 --> 00:00:25.830
And for that, I wanna start with index types,

10
00:00:25.830 --> 00:00:29.040
a feature that allows us to create objects

11
00:00:29.040 --> 00:00:31.150
which are more flexible regarding

12
00:00:31.150 --> 00:00:33.010
the properties they might hold.

13
00:00:33.010 --> 00:00:34.485
Now what do I mean by that?

14
00:00:34.485 --> 00:00:36.813
Let's say your writing an application

15
00:00:36.813 --> 00:00:39.680
where you're validating some user input.

16
00:00:39.680 --> 00:00:41.810
So you have multiple input fields

17
00:00:41.810 --> 00:00:44.603
and depending on what the user enters there

18
00:00:44.603 --> 00:00:46.682
and which field it is, you might wanna

19
00:00:46.682 --> 00:00:50.490
store and eventually show different error messages.

20
00:00:50.490 --> 00:00:52.520
For example, if it's an email field

21
00:00:52.520 --> 00:00:54.360
you wanna check whoever it is in the email

22
00:00:54.360 --> 00:00:55.590
and if it is not then you wanna

23
00:00:55.590 --> 00:00:59.830
add a proper error message to the error container.

24
00:00:59.830 --> 00:01:01.133
So that's what I'll start with.

25
00:01:01.133 --> 00:01:06.133
I will have my interface error container here.

26
00:01:07.570 --> 00:01:09.530
And that should be an object,

27
00:01:09.530 --> 00:01:11.400
hence I use an interface here,

28
00:01:11.400 --> 00:01:14.090
but it should be flexible regarding what it holds.

29
00:01:14.090 --> 00:01:15.680
Ultimately, my goal is that with that

30
00:01:15.680 --> 00:01:17.692
we can treat objects where we have

31
00:01:17.692 --> 00:01:20.782
some error identifier, which could be the ideal

32
00:01:20.782 --> 00:01:23.700
if the input field to which the error belongs.

33
00:01:23.700 --> 00:01:26.581
For example, email. And then some error string,

34
00:01:26.581 --> 00:01:31.581
not a valid email. And then we have another property.

35
00:01:32.130 --> 00:01:35.610
Let's say username

36
00:01:35.610 --> 00:01:37.150
and then an error string

37
00:01:37.150 --> 00:01:39.280
might be storing that input field

38
00:01:39.280 --> 00:01:41.611
if the input field is incorrect.

39
00:01:41.611 --> 00:01:45.770
Must start with a character.

40
00:01:45.770 --> 00:01:49.170
Something like that should be stored in that object.

41
00:01:49.170 --> 00:01:51.992
The problem with that is, I don't know in advance

42
00:01:51.992 --> 00:01:55.320
which exact property names that we'll have in there.

43
00:01:55.320 --> 00:01:58.021
You could say, well we'll have email and username,

44
00:01:58.021 --> 00:02:01.650
but for one I want this to be a flexible container.

45
00:02:01.650 --> 00:02:03.150
I want to be able to use it

46
00:02:03.150 --> 00:02:05.350
on any form I have in my webpage.

47
00:02:05.350 --> 00:02:07.560
And I might have different forms

48
00:02:07.560 --> 00:02:10.157
with different inputs with different identifiers.

49
00:02:10.157 --> 00:02:12.741
So I don't want to restrict myself

50
00:02:12.741 --> 00:02:16.150
to just our email and username errors.

51
00:02:16.150 --> 00:02:18.461
And in addition, even if we always

52
00:02:18.461 --> 00:02:20.859
had just email and username inputs

53
00:02:20.859 --> 00:02:23.291
and we just wanna store errors for those.

54
00:02:23.291 --> 00:02:27.461
What do we do if just email is invalid and not the username?

55
00:02:27.461 --> 00:02:30.912
Then of course in this object we could store null

56
00:02:30.912 --> 00:02:34.421
as a value for a username, but I'd like to just omit it.

57
00:02:34.421 --> 00:02:37.232
So did we have an object which only holds properties

58
00:02:37.232 --> 00:02:40.419
for inputs where we have an error?

59
00:02:40.419 --> 00:02:42.960
So we can also loop through this object

60
00:02:42.960 --> 00:02:46.260
with a four in loop to read all the errors we got

61
00:02:46.260 --> 00:02:48.200
for example and don't have any properties in there

62
00:02:48.200 --> 00:02:51.112
which don't actually store an error.

63
00:02:51.112 --> 00:02:53.261
So long story short, I need an object

64
00:02:53.261 --> 00:02:56.861
where I'm pretty clear regarding the value type.

65
00:02:56.861 --> 00:03:00.260
It should be a string, but where I don't don't advance

66
00:03:00.260 --> 00:03:02.190
how many properties I'll have

67
00:03:02.190 --> 00:03:05.320
and which name the properties will have.

68
00:03:05.320 --> 00:03:08.171
And for such a scenario we can use index types.

69
00:03:08.171 --> 00:03:10.760
You define an index type by using square brackets here.

70
00:03:10.760 --> 00:03:14.730
Remember normally we would write a property name here,

71
00:03:14.730 --> 00:03:16.280
but now we use square brackets.

72
00:03:16.280 --> 00:03:21.280
Then, any name of your choice for example key or prop.

73
00:03:23.581 --> 00:03:28.581
Then, a colon. And then the value type of the property.

74
00:03:29.010 --> 00:03:30.010
And then an object.

75
00:03:30.010 --> 00:03:33.760
You can't have strings, numbers, or symbols as a property.

76
00:03:33.760 --> 00:03:37.660
You for example, can't use boolean here. That's not allowed.

77
00:03:37.660 --> 00:03:40.504
But you can use string here.

78
00:03:40.504 --> 00:03:43.190
With that I'm simply saying that whatever object

79
00:03:43.190 --> 00:03:46.330
I'm constructing based on this error container interface

80
00:03:46.330 --> 00:03:51.083
later must have properties, which are strings.

81
00:03:52.120 --> 00:03:53.928
Username for example would be a valid string

82
00:03:53.928 --> 00:03:55.899
even if I don't wrap it in quotes.

83
00:03:55.899 --> 00:03:59.980
Then, we add a colon. And then the value type,

84
00:03:59.980 --> 00:04:01.629
which is string. So with that I'm saying

85
00:04:01.629 --> 00:04:04.320
I don't know the exact property name.

86
00:04:04.320 --> 00:04:07.620
I also don't know the property count.

87
00:04:07.620 --> 00:04:10.608
I just know that every property which is added

88
00:04:10.608 --> 00:04:13.459
to this object, which is based on error container,

89
00:04:13.459 --> 00:04:16.959
must have a property name which can be interpreted

90
00:04:16.959 --> 00:04:20.640
as a string and the value of the property

91
00:04:20.640 --> 00:04:23.080
also must be a string. That's what I'm saying here.

92
00:04:23.080 --> 00:04:28.080
Now, with that we also still can add predefined properties,

93
00:04:29.560 --> 00:04:31.906
however, only if they're of the same type

94
00:04:31.906 --> 00:04:35.339
as this here. So we could add an ID which is a type string.

95
00:04:35.339 --> 00:04:39.760
And then any object we build that adheres to this interface

96
00:04:39.760 --> 00:04:43.360
must have an ID property and can add as many other propeties

97
00:04:43.360 --> 00:04:47.370
as it wants, but we can't set ID to a number here,

98
00:04:47.370 --> 00:04:49.277
for example, because we have an index type here.

99
00:04:49.277 --> 00:04:53.033
So that is a restriction we have if we build such as object.

100
00:04:55.240 --> 00:04:56.550
So now what's the consequence?

101
00:04:56.550 --> 00:05:00.080
Now we can create an error bag for example

102
00:05:00.080 --> 00:05:02.390
which is of type error container

103
00:05:02.390 --> 00:05:05.150
which therefore is an object and it would be valid like this

104
00:05:05.150 --> 00:05:07.440
because we don't have to add any properties.

105
00:05:07.440 --> 00:05:10.340
That is all the valid. But of course we can now add some.

106
00:05:10.340 --> 00:05:13.380
For example, email not a valid email.

107
00:05:13.380 --> 00:05:15.780
And this is okay. It would not be okay

108
00:05:15.780 --> 00:05:17.093
if I instead assigned a number here

109
00:05:17.093 --> 00:05:19.133
because we're saying every property

110
00:05:19.133 --> 00:05:23.001
needs a string value type. So we must use a string here.

111
00:05:23.001 --> 00:05:25.940
If I use a number here, that would work

112
00:05:25.940 --> 00:05:28.610
because that can be interpreted as a string as well.

113
00:05:28.610 --> 00:05:30.883
So I can also use a number as a key type here

114
00:05:30.883 --> 00:05:33.031
if I wanted to. I'm pretty free

115
00:05:33.031 --> 00:05:35.981
regarding what I use here. If it would change

116
00:05:35.981 --> 00:05:40.981
the prop type here to number, then you can do that

117
00:05:42.130 --> 00:05:44.810
and this would be okay. But this wouldn't

118
00:05:44.810 --> 00:05:46.470
because email is not a number.

119
00:05:46.470 --> 00:05:48.170
This can't be converted to a number.

120
00:05:48.170 --> 00:05:51.550
It can be treated as a string, but not as a number.

121
00:05:51.550 --> 00:05:54.870
So this is how you control which type of properties,

122
00:05:54.870 --> 00:05:56.990
or which property names, you allow.

123
00:05:56.990 --> 00:05:59.493
And here I did one to allow string property names.

124
00:05:59.493 --> 00:06:02.264
So anything which can be converted to a string

125
00:06:02.264 --> 00:06:04.740
is a valid property name. And then

126
00:06:04.740 --> 00:06:06.413
the value has to be a string as well.

127
00:06:06.413 --> 00:06:08.021
And as I said of course now

128
00:06:08.021 --> 00:06:10.632
we can add multiple values here,

129
00:06:10.632 --> 00:06:12.830
multiple values I should say.

130
00:06:12.830 --> 00:06:17.263
Must start with a capital character.

131
00:06:18.170 --> 00:06:21.220
So this is now such a error bag we could build

132
00:06:21.220 --> 00:06:22.722
with the help of error container,

133
00:06:22.722 --> 00:06:25.392
which gives us this extra flexibility

134
00:06:25.392 --> 00:06:27.522
that we don't need to know in advance

135
00:06:27.522 --> 00:06:30.740
which property names we want to use

136
00:06:30.740 --> 00:06:32.653
and how many properties we need.

