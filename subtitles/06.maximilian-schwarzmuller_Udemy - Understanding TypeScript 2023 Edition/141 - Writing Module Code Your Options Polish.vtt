WEBVTT

00:02.160 --> 00:03.740
Instruktor: Więc jakie są nasze

00:03.740 --> 00:06.440
opcje, gdy chcemy podzielić kod na wiele plików?

00:06.440 --> 00:10.720
Teraz właściwie mamy na to trzy opcje.

00:10.720 --> 00:12.680
Pierwszą opcją byłoby po prostu

00:12.680 --> 00:16.110
napisanie wielu plików kodu, wielu plików TypeScript.

00:16.110 --> 00:17.460
Następnie TypeScript automatycznie

00:17.460 --> 00:20.710
skompiluje wszystkie pliki kodu w katalogu źródłowym i ręcznie

00:20.710 --> 00:23.020
zaimportuje skompilowane pliki skryptów

00:23.020 --> 00:25.000
Java do HTML.

00:25.000 --> 00:26.220
Jest to opcja i dla niektórych

00:26.220 --> 00:28.970
projektów może to być w sam raz, ale musiałbyś zarządzać

00:28.970 --> 00:31.780
wszystkimi tymi importami ręcznie, co może być

00:31.780 --> 00:34.600
uciążliwe i podatne na błędy, a kiedy używasz pewnych

00:34.600 --> 00:36.980
funkcji TypeScript, rezygnujesz również

00:36.980 --> 00:39.560
z obsługi typów, jeśli jakiś typ jest zdefiniowany

00:39.560 --> 00:46.030
w pliku A i używasz go w pliku B, a TypeScript nie wie o tym połączeniu.

00:46.030 --> 00:47.480
Dlatego też nie jest to raczej świetna

00:47.480 --> 00:49.290
opcja dla większych projektów.

00:49.290 --> 00:52.500
Zamiast tego przy większych projektach mamy dwie główne opcje.

00:52.500 --> 00:55.470
Mamy na przykład przestrzenie nazw i wiązanie plików.

00:55.470 --> 00:59.410
Teraz przestrzenie nazw to cecha TypeScript, cecha składni,

00:59.410 --> 01:03.430
możesz dodać specjalny kod do swojego kodu, aby użyć tej funkcji

01:03.430 --> 01:04.840
i pozwala na zasadniczo

01:04.840 --> 01:08.650
grupowanie kodu razem pod przestrzenią nazw, a następnie

01:08.650 --> 01:12.730
importowanie przestrzeni nazw do innych plików.

01:12.730 --> 01:16.020
Więc możesz mieć przestrzeń nazw na przykład na plik.

01:16.020 --> 01:18.790
Importuj inny plik do jeszcze innego pliku i dotknij

01:18.790 --> 01:21.930
tej przestrzeni nazw, która żyje w innym pliku z tego

01:21.930 --> 01:24.650
pliku importującego i zobaczymy to w praktyce

01:24.650 --> 01:25.970
na wypadek, gdyby to nie

01:25.970 --> 01:28.030
było całkowicie jasne.

01:28.030 --> 01:30.020
TypeScript nie tylko to obsługuje,

01:30.020 --> 01:34.130
ale także łączy pliki w jeden plik, więc ostatecznie piszesz

01:34.130 --> 01:37.230
kod w wielu plikach, które są kompilowane,

01:37.230 --> 01:39.560
ale następnie są importowane do

01:39.560 --> 01:42.750
siebie, dzięki czemu masz mniej importów do

01:42.750 --> 01:45.190
zarządzania i nie musisz ręcznie

01:45.190 --> 01:46.950
zarządzać różnymi importami

01:46.950 --> 01:50.030
w pliku HTML.

01:50.030 --> 01:52.180
Teraz alternatywą dla przestrzeni

01:52.180 --> 01:55.750
nazw i prawdopodobnie ważniejszą i nowoczesną alternatywą,

01:55.750 --> 02:00.750
jest użycie ES6 Imports / Exports znany również jako moduły ES6, ponieważ okazuje

02:01.870 --> 02:06.480
się, że całkowicie oderwany od TypeScript, nowoczesny skrypt Java ma rozwiązanie

02:06.480 --> 02:11.440
tego problemu, ponieważ masz ten problem nie tylko w projektach TypeScript, ale

02:11.440 --> 02:13.140
w każdym większym projekcie

02:13.140 --> 02:15.850
skryptu Java.

02:15.850 --> 02:18.200
Nowoczesny skrypt Java po wyjęciu z pudełka

02:18.200 --> 02:21.150
obsługuje deklaracje importu i eksportu, co pozwala

02:21.150 --> 02:23.110
stwierdzić, który plik zależy od którego

02:23.110 --> 02:24.910
innego pliku, a następnie masz wszystkie

02:24.910 --> 02:27.920
te indywidualne pliki, ale nie musisz zarządzać importem

02:27.920 --> 02:30.560
ręcznie, zamiast tego przeglądarki, nowoczesne

02:30.560 --> 02:33.770
przeglądarki to robią.

02:33.770 --> 02:36.020
Rozumieją to i automatycznie pobierają

02:36.020 --> 02:38.800
i uruchamiają pliki, od których zależy inny plik.

02:38.800 --> 02:41.370
Używasz do tego składni importu / eksportu,

02:41.370 --> 02:43.470
a TypeScript również to obsługuje.

02:43.470 --> 02:46.870
Dlatego możesz go używać TypeScript bez żadnych problemów.

02:46.870 --> 02:48.700
Kompilujesz każdy plik, ale potrzebujesz

02:48.700 --> 02:50.810
tylko jednego importu skryptu, ponieważ

02:50.810 --> 02:53.680
jak już wspomniałem nowoczesne przeglądarki wiedzą

02:53.680 --> 02:56.350
jak pobrać wszystkie inne zależności i zobaczysz

02:56.350 --> 02:58.570
to również w akcji w tej sekcji dotyczącej

02:58.570 --> 03:00.710
rdzenia.

03:00.710 --> 03:02.320
Teraz jedna ważna uwaga, z

03:02.320 --> 03:03.830
tym technicznie skończymy

03:03.830 --> 03:06.110
z wieloma plikami i chociaż nie będziemy

03:06.110 --> 03:09.140
musieli zarządzać importem ręcznie, importem skryptów,

03:09.140 --> 03:11.550
nadal mamy pewne wady z tego powodu, ponieważ

03:11.550 --> 03:15.130
każdy plik, od którego zależysz, musi być pobrany osobno,

03:15.130 --> 03:16.900
co oznacza więcej żądań HTTP

03:16.900 --> 03:19.460
i tak dalej i dlatego możesz łączyć pliki razem,

03:19.460 --> 03:22.210
aby pracować na wielu plikach podczas rozwoju,

03:22.210 --> 03:24.860
ale wysyłać pojedynczy plik do produkcji,

03:24.860 --> 03:30.840
ale potrzebujesz do tego narzędzi innych firm, na przykład Webpack, i pokażę ci, jak to działa, ale

03:30.840 --> 03:35.700
w osobnej sekcji, w której przyjrzymy się Webpack i TypeScript i dlaczego go używamy

03:35.700 --> 03:39.500
i jak go używamy.

03:39.500 --> 03:41.100
Więc na razie użyjmy tych

03:41.100 --> 03:43.900
dwóch podejść w ich podstawowej formie i

03:43.900 --> 03:45.870
zobaczmy, jak możemy poprawić

03:45.870 --> 03:48.853
nasz kod, dzieląc go na wiele plików.
