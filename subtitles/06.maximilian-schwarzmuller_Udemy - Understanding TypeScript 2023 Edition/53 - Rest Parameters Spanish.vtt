WEBVTT

00:02.060 --> 00:04.880
Hombre: Algo relacionado con el operador de la dispersión

00:04.880 --> 00:07.060
son los parámetros de descanso.

00:07.060 --> 00:10.374
Y para ello, volveré a retocar mi función de adición.

00:10.374 --> 00:13.870
Así que voy a comentar todo ese código aquí arriba

00:13.870 --> 00:15.780
para que no se rompa nada.

00:15.780 --> 00:20.520
Y vuelve a añadir mi función add con la sintaxis que quieras con la palabra clave de

00:20.520 --> 00:22.760
la función como una función de flecha,

00:22.760 --> 00:23.830
lo que quieras.

00:23.830 --> 00:26.360
Pero ahora quiero tener una función especial.

00:26.360 --> 00:29.100
No quiero restringirlo a dos valores,

00:29.100 --> 00:31.340
quiero poder añadir tantos valores

00:31.340 --> 00:33.290
como el usuario pase.

00:33.290 --> 00:37.700
Así que básicamente podemos llamar a sumar así, cinco, diez,

00:37.700 --> 00:42.700
dos, tres punto siete, y así sucesivamente, con tantos valores

00:42.880 --> 00:44.530
como quieras.

00:44.530 --> 00:46.691
Si quieres llamarlo con 10 valores, también

00:46.691 --> 00:48.090
debería ser posible.

00:48.090 --> 00:51.160
Sin embargo, por supuesto, ahora mismo no es posible, como

00:51.160 --> 00:52.600
puedes ver claramente.

00:52.600 --> 00:54.290
Typescript me da un error, y correctamente,

00:54.290 --> 00:57.760
porque no estoy aceptando argumentos aquí.

00:57.760 --> 01:00.336
Ahora, por supuesto, podría aceptar para los argumentos

01:00.336 --> 01:02.210
aquí y asignar los tipos correctos, pero

01:02.210 --> 01:04.300
lo que si luego lo llamo con cinco.

01:04.300 --> 01:06.330
Como he dicho, quiero ser flexible.

01:06.330 --> 01:08.850
Ahí es donde entran en juego los parámetros de descanso.

01:08.850 --> 01:13.111
En el lugar donde se espera una lista de valores, es decir, no donde

01:13.111 --> 01:15.270
se quiere pasar, sino donde se quiere

01:15.270 --> 01:18.308
aceptar como valores entrantes, también se pueden

01:18.308 --> 01:20.360
utilizar los tres puntos y luego

01:20.360 --> 01:24.043
cualquier nombre de su elección, como números.

01:25.630 --> 01:27.430
Ahora lo que esto hará es,

01:27.430 --> 01:31.470
fusionará todos los parámetros entrantes, o generalmente

01:31.470 --> 01:34.920
la lista de valores entrantes, lista de valores

01:34.920 --> 01:39.350
separados por comas en un array.

01:39.350 --> 01:40.940
Así que los números aquí será una

01:40.940 --> 01:44.460
matriz, pero por supuesto por defecto un tipo de cualquier valor, por

01:44.460 --> 01:46.920
lo que una matriz llena de cualquier valor, y eso no

01:46.920 --> 01:48.300
es lo que debemos hacer, debemos

01:48.300 --> 01:49.680
ser más explícito.

01:49.680 --> 01:53.200
Y aquí podríamos decir: "Será una matriz de números. Así.

01:53.200 --> 01:54.430
Así que ahora estamos definiendo el tipo

01:54.430 --> 01:56.420
correcto y ahora trabajamos con ese array de números.

01:56.420 --> 01:58.710
Ahora podemos resumirlo de un par de maneras diferentes.

01:58.710 --> 02:01.880
Podemos trabajar con una variable de resultado y luego con un bucle

02:01.880 --> 02:04.110
de cuatro porque los números son un array.

02:04.110 --> 02:06.863
Así que aquí podríamos hacer un bucle con los

02:06.863 --> 02:09.260
números y añadirlo al resultado.

02:09.260 --> 02:11.519
O utilizamos el método de reducción que está disponible en los arrays.

02:11.519 --> 02:15.620
Reduce funciona de manera que realiza una operación en cada

02:15.620 --> 02:19.030
elemento de un array, devuelve un resultado y luego

02:19.030 --> 02:20.940
suma estos resultados.

02:20.940 --> 02:24.310
Para ello se proporciona una función para reducir

02:24.310 --> 02:27.160
y luego un valor inicial que aquí es cero.

02:27.160 --> 02:31.093
Y entonces esta función que se pasa a reducir toma

02:31.093 --> 02:33.430
dos argumentos y ese es el resultado

02:33.430 --> 02:35.920
actual se podría decir.

02:35.920 --> 02:38.968
Y es el valor actual el que estamos mirando,

02:38.968 --> 02:42.640
que será cada valor del array ones.

02:42.640 --> 02:45.350
Y entonces aquí puedes devolver cuResultado, que para

02:45.350 --> 02:48.290
la primera ejecución será ese valor inicial aquí.

02:48.290 --> 02:51.497
Más curValue.

02:51.497 --> 02:52.703
Y si lo haces reducir en general aquí devolverá un número.

02:53.859 --> 02:57.920
Así que aquí podemos devolver en general el resultado de los números

02:57.920 --> 03:01.160
reducidos y por lo tanto la variable add, o constante

03:01.160 --> 03:04.790
aquí, al final tendrá una función que toma un par de números,

03:04.790 --> 03:07.320
no una matriz de números.

03:07.320 --> 03:10.650
Pero por el resto de parámetros, una lista de números,

03:10.650 --> 03:13.690
que luego se fusiona en un array dentro de la función

03:13.690 --> 03:16.510
y que devuelve el número al final.

03:16.510 --> 03:18.550
Así que por ahora si guardamos todo, debería

03:18.550 --> 03:20.350
funcionar todo y vemos el resultado,

03:20.350 --> 03:23.350
la suma de nuestra pequeña adición aquí.

03:23.350 --> 03:26.250
Así que eso son los parámetros de descanso, una característica

03:26.250 --> 03:28.430
realmente útil para aceptar una cantidad

03:28.430 --> 03:31.400
ilimitada de argumentos.

03:31.400 --> 03:34.210
Y un par de métodos incorporados, como el método

03:34.210 --> 03:36.680
push, funcionan exactamente así.

03:36.680 --> 03:38.540
Verás, push aquí tiene esta extraña definición de parámetros.

03:38.540 --> 03:42.560
Pues eso es exactamente lo que acabamos de saber.

03:42.560 --> 03:44.250
Push aquí toma un par de elementos

03:44.250 --> 03:48.490
para este array, que es un array lleno de cadenas.

03:48.490 --> 03:50.400
Se necesitan un par de cuerdas.

03:50.400 --> 03:51.730
Y esto no significa que toma

03:51.730 --> 03:54.060
un array de cadenas, pero en su lugar aquí con los

03:54.060 --> 03:56.400
parámetros de descanso, una lista separada por

03:56.400 --> 03:58.580
comas de las cadenas, que ins fuera de porche

03:58.580 --> 04:01.260
se fusiona en una matriz y se maneja internamente.

04:01.260 --> 04:03.100
Esa es la sintaxis de los parámetros de descanso.

04:03.100 --> 04:06.276
Por cierto, también se puede combinar con tuplas.

04:06.276 --> 04:10.370
Si sabes que quieres soportar múltiples argumentos

04:10.370 --> 04:15.370
pero sabes cuántos serán, así que si no es una lista ilimitada, entonces

04:16.520 --> 04:18.420
también puedes usar un tipo

04:18.420 --> 04:20.392
de tupla allí.

04:20.392 --> 04:23.430
Y, por ejemplo, decir: "Aquí sí acepto mis números gratuitos. Y luego tengo que eliminar el cuarto

04:23.430 --> 04:28.430
argumento aquí, por supuesto, al llamar a la función.

04:28.460 --> 04:30.910
Porque ahora tengo bastante claro que quiero obtener tres argumentos,

04:30.910 --> 04:32.240
que son números cada uno.

04:32.240 --> 04:33.830
Así que, por supuesto, podríamos haber

04:33.830 --> 04:36.980
añadido simplemente tres parámetros independientes aquí, pero esta sintaxis

04:36.980 --> 04:39.030
podría ser un poco más corta o más fácil de configurar

04:39.030 --> 04:40.720
que añadir los parámetros libres.

04:40.720 --> 04:43.090
Realmente depende de su aplicación y de sus necesidades.

04:43.090 --> 04:46.919
Aquí me alejaré de esa configuración y seré más genérico

04:46.919 --> 04:51.320
y aceptaré todos los argumentos que me den porque para esta

04:51.320 --> 04:55.210
función sí que puedo manejar una cantidad infinita

04:55.210 --> 04:57.864
de argumentos.
