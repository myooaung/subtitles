WEBVTT

00:02.270 --> 00:04.390
Instruktur: Oke, cukup tentang fungsi-fungsi generik.

00:04.390 --> 00:06.490
Kita akan selalu menggunakannya sepanjang

00:06.490 --> 00:08.150
kursus ini, semua proyek kursus.

00:08.150 --> 00:10.390
Jadi, hal itu seharusnya semakin jelas dan semakin jelas, semakin

00:10.390 --> 00:11.890
banyak kita bekerja dengannya.

00:11.890 --> 00:14.823
Gagasan umumnya, mudah-mudahan sudah jelas sekarang.

00:15.660 --> 00:18.490
Fungsi generik bukanlah segala sesuatu yang dapat kita gunakan,

00:18.490 --> 00:20.550
kita juga memiliki kelas generik dan oleh karena

00:20.550 --> 00:21.560
itu, mari kita lihat bagaimana

00:21.560 --> 00:23.740
kita akan membuat kelas generik dan mengapa kita

00:23.740 --> 00:25.170
bisa melakukan itu, mengapa itu

00:25.170 --> 00:27.760
bisa berguna bagi kita.

00:27.760 --> 00:31.950
Kita bisa menciptakan kelas penyimpanan di sini.

00:31.950 --> 00:36.060
Sebuah kelas, katakanlah, yang memiliki data properti privat.

00:36.060 --> 00:38.850
Yang pada akhirnya akan menampung array data.

00:38.850 --> 00:40.940
Kemudian ia memiliki metode addItem,

00:40.940 --> 00:44.200
yang mengambil item kita dan itu harus ditambahkan ke data

00:44.200 --> 00:45.763
dengan push, katakanlah.

00:48.570 --> 00:50.830
Dan kita memiliki metode removeItem, yang

00:50.830 --> 00:52.173
mengambil item kita, di mana

00:53.010 --> 00:57.740
kita bisa mengatakan ini. data. splice dan kemudian kita

00:57.740 --> 01:01.730
hanya perlu mendapatkan indexOff(item) di sini dan menyambung

01:01.730 --> 01:02.910
satu elemen.

01:02.910 --> 01:06.030
Ini adalah bagaimana kita bisa menghapus elemen dari sebuah larik.

01:06.030 --> 01:07.873
Dan tentu saja getItems, di mana kembali,

01:09.750 --> 01:13.120
katakanlah salinan dari ini. data, seperti itu dengan

01:13.120 --> 01:15.770
operator spread yang Anda pelajari.

01:16.610 --> 01:17.443
Sekarang kita bisa melakukan

01:17.443 --> 01:19.450
itu dan kita mendapatkan banyak kesalahan di sini.

01:19.450 --> 01:20.500
Kita mendapatkan banyak kesalahan,

01:20.500 --> 01:23.900
sekarang untuk satu karena nama Storage adalah nama yang dicadangkan, jadi mari kita beri

01:23.900 --> 01:25.230
nama Datastorage.

01:25.230 --> 01:26.620
Itu mudah untuk disingkirkan.

01:26.620 --> 01:27.920
Sekarang kita juga mendapatkan

01:27.920 --> 01:29.400
error di sini karena kita tidak mengatakan

01:29.400 --> 01:30.880
apapun tentang jenis data yang kita

01:30.880 --> 01:32.960
simpan, dan item tipe apa yang ada di sini.

01:32.960 --> 01:35.870
Dan di situlah kita bisa mengubahnya menjadi kelas generik

01:35.870 --> 01:38.860
karena Anda mungkin tidak peduli dengan jenis datanya.

01:38.860 --> 01:40.880
Kita ingin memastikan bahwa datanya

01:40.880 --> 01:42.410
seragam, jadi hanya string,

01:42.410 --> 01:44.830
atau hanya angka, atau hanya objek.

01:44.830 --> 01:47.550
Tetapi selain itu, saya tidak peduli tentang hal itu.

01:47.550 --> 01:50.820
Jadi di sini kita bisa mengubahnya menjadi kelas generik, dengan

01:50.820 --> 01:53.300
menambahkan tanda kurung sudut setelah nama kelas

01:53.300 --> 01:56.330
dan kemudian T, U, apa pun yang ingin Anda gunakan sebagai

01:56.330 --> 02:00.110
pengenal, dan tambahkan ini di sini sebagai tipe generik.

02:00.110 --> 02:01.083
Sekarang di sini kita

02:01.083 --> 02:04.490
bisa mengatakan, ini di sini adalah array tipe T, jadi ia menyimpan

02:04.490 --> 02:07.413
data dari tipe generik itu di dalamnya.

02:07.413 --> 02:09.670
Oleh karena itu, di sini kami menambahkan data tersebut,

02:09.670 --> 02:12.400
dan kami mencoba menghapus data tersebut di sini.

02:12.400 --> 02:15.140
Dan oleh karena itu, di sini kita mendapatkan item dengan

02:15.140 --> 02:18.490
benar disimpulkan untuk mengembalikan array tipe generik.

02:18.490 --> 02:20.860
Dan sekarang kita dapat membuat penyimpanan

02:20.860 --> 02:24.690
yang berbeda, kita dapat memiliki sting atau textStorage kita

02:24.690 --> 02:29.500
di sini, dengan memanggil DataStorage baru, mengatur tipe generik itu ke tipe

02:29.500 --> 02:31.250
string di sini.

02:31.250 --> 02:33.070
Dan kemudian di sini di textStorage, saya dapat

02:33.070 --> 02:34.340
memanggil addItem, dan jika saya

02:34.340 --> 02:36.410
mencoba menambahkan angka, saya mendapatkan kesalahan

02:36.410 --> 02:37.513
karena saya mengatakan bahwa

02:37.513 --> 02:40.800
ini akan menjadi DataStorage yang hanya menyimpan sting.

02:40.800 --> 02:45.800
Jadi, saya memang bisa menyimpan Max di sini, dan mungkin juga menyimpan Manu, dan

02:46.830 --> 02:51.450
kemudian memanggil textStorage. removeItem('Max') dan kemudian

02:51.450 --> 02:55.073
console. log. textStorage. getItems.

02:56.520 --> 02:58.870
Dan ini semua seharusnya bekerja jika kita menyimpannya

02:58.870 --> 03:00.300
karena ini adalah tipe generik,

03:00.300 --> 03:03.103
dan memang pada akhirnya kita hanya memiliki Manu di sana.

03:04.400 --> 03:08.240
Jadi ini akan menjadi satu kelas generik sederhana yang bisa kita buat.

03:08.240 --> 03:10.500
Sekarang, mengapa kita membangun kelas generik seperti itu?

03:10.500 --> 03:11.770
Nah seperti yang saya katakan,

03:11.770 --> 03:14.220
karena mungkin kita tidak hanya ingin menyimpan teks,

03:14.220 --> 03:17.110
saya mungkin juga ingin menyimpan beberapa angka dalam penyimpanan

03:17.110 --> 03:18.950
data yang berbeda.

03:18.950 --> 03:21.510
Jadi, saya bisa membuat DataStorage seperti itu, dan pengaturan

03:21.510 --> 03:23.810
ini ke number memastikan bahwa sekarang kita hanya

03:23.810 --> 03:26.250
bisa menambahkan angka ke penyimpanan itu.

03:26.250 --> 03:28.330
Tentu saja, kita juga bisa mengatur penyimpanan di mana kita

03:28.330 --> 03:30.520
mengizinkan keduanya dengan menggunakan tipe union.

03:30.520 --> 03:32.550
Jadi, kita punya fleksibilitas penuh

03:32.550 --> 03:36.470
di sana, tetapi kita memberikan tipe beberapa informasi tambahan,

03:36.470 --> 03:38.490
yang membuat ini menjadi kelas yang

03:38.490 --> 03:41.450
fleksibel dan masih diketik dengan kuat.

03:41.450 --> 03:43.470
Sama seperti yang kita miliki dengan fungsi.

03:43.470 --> 03:46.910
Dukungan tipe yang benar-benar fleksibel dan masih sempurna.

03:46.910 --> 03:49.900
Itulah seluruh gagasan di balik tipe generik.

03:49.900 --> 03:52.680
Jadi, di sini kita bisa melakukan itu dengan kelas DataStorage dengan

03:52.680 --> 03:53.750
menyimpan string, atau dengan

03:53.750 --> 03:55.130
menyimpan angka, atau apapun yang

03:55.130 --> 03:56.513
kita inginkan.

03:57.790 --> 04:01.300
Kita akan memiliki satu masalah tentang kelas dataStorage kita.

04:01.300 --> 04:04.880
Katakanlah di sini saya memiliki object storage, sekarang

04:04.880 --> 04:07.090
saya bisa membuat DataStorage baru

04:07.090 --> 04:10.490
dan mengatakan di sana saya ingin menyimpan objek, benar,

04:10.490 --> 04:12.270
saya ingin menyimpan objek dan

04:12.270 --> 04:17.270
tentu saja kita bisa pergi ke object storage dan menambahkan item.

04:17.300 --> 04:20.460
Katakanlah sebuah objek yang saya beri nama Max di sana.

04:20.460 --> 04:22.920
Mari kita juga menyimpan objek lain, di

04:22.920 --> 04:24.760
mana saya menyimpan Manu.

04:24.760 --> 04:26.770
Kemudian, katakanlah kita melakukan beberapa

04:26.770 --> 04:28.310
hal dalam kode kita dan kemudian pada

04:28.310 --> 04:29.740
titik waktu berikutnya di sini,

04:29.740 --> 04:34.100
saya ingin menghapus item, saya ingin menghapus item dengan nama: 'Manu' di sini.

04:34.100 --> 04:37.863
Dan kemudian, saya ingin menghibur. log. objStorage. getItems.

04:39.450 --> 04:40.550
Seperti itu.

04:40.550 --> 04:41.883
Jika kita menyimpannya,

04:42.920 --> 04:45.840
kita melihat ada objek di sana yaitu Max.

04:45.840 --> 04:47.470
Jadi itu terlihat bagus kan.

04:47.470 --> 04:49.140
Sekarang, ini tidak terlalu bagus.

04:49.140 --> 04:52.490
Katakanlah di sini, saya ingin menghapus Max sekarang, jadi sekarang

04:52.490 --> 04:55.740
kita harus memiliki Manu yang tersisa di penyimpanan data.

04:55.740 --> 04:59.653
Oleh karena itu, jika saya memuat ulang, sumur, itu masih Max.

05:00.550 --> 05:03.660
Sekarang masalahnya adalah kita bekerja dengan objek di sini,

05:03.660 --> 05:07.350
seperti yang Anda ketahui objek dalam JavaScript adalah tipe referensi.

05:07.350 --> 05:09.440
Sekarang, lampirkan untuk menemukan sumber daya tambahan,

05:09.440 --> 05:11.460
yang memungkinkan Anda menyelami referensi.

05:11.460 --> 05:12.730
Sedangkan nilai primitif,

05:12.730 --> 05:14.650
di sini saya asumsikan Anda tahu perbedaannya

05:14.650 --> 05:16.970
karena ini adalah hal inti JavaScript, sama sekali

05:16.970 --> 05:19.060
tidak terkait dengan typescript.

05:19.060 --> 05:20.600
Di sini masalahnya adalah, cara

05:20.600 --> 05:22.300
kelas kita dibangun dengan logika

05:22.300 --> 05:26.243
ini tentang bagaimana data dihapus dan diidentifikasi, kita tidak benar-benar

05:27.080 --> 05:29.580
melakukan pekerjaan yang baik ketika kita bekerja

05:29.580 --> 05:32.200
dengan nilai non-primitif.

05:32.200 --> 05:35.130
Jadi, ketika kita bekerja dengan objek atau array, karena indexOf,

05:35.130 --> 05:37.840
jika kita mengoperkan objek di sini, itu tidak akan berfungsi

05:37.840 --> 05:40.910
karena secara teknis ini adalah objek baru.

05:40.910 --> 05:43.800
Ini mungkin terlihat seperti ini tetapi tidak bekerja karena

05:43.800 --> 05:46.520
secara teknis ini adalah objek baru dalam memori dan memiliki

05:46.520 --> 05:48.290
alamat yang berbeda.

05:48.290 --> 05:52.110
Dan memang di sini, JavaScript akan mencari alamatnya dan pada dasarnya

05:52.110 --> 05:54.930
tidak menemukannya, jadi apa yang kemudian dilakukannya

05:54.930 --> 05:58.453
adalah menghapus elemen terakhir dalam larik di sini, karena ini pada

05:59.510 --> 06:01.473
akhirnya mengembalikan -1.

06:02.419 --> 06:06.070
IndexOf mengembalikan -1 bahkan jika tidak menemukan apapun.

06:06.070 --> 06:07.990
Yang berarti dimulai dari akhir larik, itu

06:07.990 --> 06:09.770
adalah perilaku Javascript normal dan

06:09.770 --> 06:11.921
menghapus elemen terakhir dari larik.

06:11.921 --> 06:14.190
Itulah mengapa itu berhasil untuk Manu, itu tidak benar-benar

06:14.190 --> 06:16.810
berhasil, itu tidak sengaja berhasil, tetapi mengapa itu

06:16.810 --> 06:19.880
tidak berhasil untuk Max, kami selalu menghapus elemen terakhir dari

06:19.880 --> 06:21.760
larik untuk saat ini, karena kami tidak dapat

06:21.760 --> 06:23.670
mengidentifikasinya.

06:23.670 --> 06:25.890
Sekarang, salah satu solusi untuk setidaknya

06:25.890 --> 06:29.140
memperbaikinya adalah dengan memeriksa apakah kita menemukan

06:29.140 --> 06:32.260
item kita, jadi kita dapat memeriksa apakah kode ini di sini,

06:32.260 --> 06:36.260
jika itu sama dengan -1, yang berarti kita tidak menemukannya.

06:36.260 --> 06:37.360
Kemudian kita bisa kembali

06:37.360 --> 06:40.780
dan memastikan kita tidak secara tidak sengaja menghapus item yang salah.

06:40.780 --> 06:42.900
Tapi tentu saja sekarang kita baru saja memperbaiki bar

06:42.900 --> 06:44.850
itu, tapi kita masih belum memiliki inner state ini

06:44.850 --> 06:46.580
di mana ia akan bekerja dengan objek.

06:46.580 --> 06:48.890
Satu-satunya cara agar bisa bekerja dengan objek,

06:48.890 --> 06:51.740
adalah jika kita mengoper objek yang sama persis lagi.

06:51.740 --> 06:55.700
Jadi di sini jika saya memiliki objek max saya yang disimpan dalam sebuah konstanta,

06:55.700 --> 06:58.840
seperti ini, dan di sini saya mengoper objek max.

06:58.840 --> 07:02.050
Dan saya melakukan hal yang sama di sini, maka saya benar-benar menggunakan objek yang

07:02.050 --> 07:05.330
sama, objek yang sama persis, objek yang sama persis dalam memori, dan oleh karena itu,

07:05.330 --> 07:06.540
sekarang akan berfungsi.

07:06.540 --> 07:08.930
Ini akan menjadi satu-satunya cara untuk membuat ini berhasil.

07:08.930 --> 07:12.340
Jadi, oleh karena itu, di sini, ide yang lebih baik mungkin adalah

07:12.340 --> 07:16.150
memastikan bahwa ini benar-benar hanya bekerja dengan nilai primitif.

07:16.150 --> 07:20.100
Jadi, kita bisa mengatakan bahwa T memperluas string,

07:20.100 --> 07:24.010
angka, mungkin semua tambahan boolean.

07:24.010 --> 07:25.990
Jadi sekarang kita pada dasarnya mengatakan bahwa DataStorage

07:25.990 --> 07:27.920
hanya boleh bekerja dengan tipe-tipe ini.

07:27.920 --> 07:30.470
Oleh karena itu objek tidak diperbolehkan lagi.

07:30.470 --> 07:32.500
Ini mungkin lebih baik di sini karena, kita

07:32.500 --> 07:35.220
akan membutuhkan DataStorage yang lebih khusus, yang kemudian

07:35.220 --> 07:38.290
mungkin hanya bekerja dengan objek secara bergantian, dan bukan

07:38.290 --> 07:40.080
dengan nilai primitif.

07:40.080 --> 07:42.430
Untuk menyempurnakan logika pengambilan kita di sini,

07:42.430 --> 07:44.800
untuk mungkin memeriksa beberapa iD dalam item yang

07:44.800 --> 07:45.880
harus dihapus.

07:45.880 --> 07:46.970
Cara kerjanya di sini, benar-benar

07:46.970 --> 07:48.910
hanya berfungsi untuk tipe primitif, jadi menetapkan

07:48.910 --> 07:52.320
batasan seperti itu jelas merupakan ide yang bagus.

07:52.320 --> 07:55.610
Dan dengan itu jika kita menyimpannya, setelah mengomentari ini, itu

07:55.610 --> 07:57.253
kembali berfungsi, tentu saja.

07:58.810 --> 08:00.540
Sekarang tidak perlu dikatakan lagi, mudah-mudahan,

08:00.540 --> 08:02.620
bahwa tentu saja Anda bisa memiliki lebih dari satu

08:02.620 --> 08:04.310
tipe generik di sini juga.

08:04.310 --> 08:05.910
Anda tidak terbatas pada satu jenis

08:05.910 --> 08:07.600
ketika Anda bekerja dengan kelas.

08:07.600 --> 08:09.610
Dan Anda juga bisa memiliki method,

08:09.610 --> 08:13.080
yang memiliki tipe generiknya sendiri, bukan kelas.

08:13.080 --> 08:16.630
Jadi, Anda bisa memperkenalkan tipe generik baru dalam metode kelas, jika Anda

08:16.630 --> 08:18.010
memiliki beberapa tipe generik,

08:18.010 --> 08:19.750
yang hanya diperlukan dalam metode tertentu,

08:19.750 --> 08:21.580
dan tidak di seluruh kelas.

08:21.580 --> 08:23.000
Jadi, Anda benar-benar fleksibel di sana.

08:23.000 --> 08:25.570
Anda bisa menggunakan constraint di mana

08:25.570 --> 08:28.100
saja dan secara umum, tipe generik ada

08:28.100 --> 08:30.240
di sana untuk membuat hidup Anda

08:30.240 --> 08:33.900
lebih mudah dan memberi Anda kombinasi sempurna dari

08:33.900 --> 08:36.010
fleksibilitas penuh.

08:36.010 --> 08:39.310
Kita bisa menggunakan nilai primitif yang Anda inginkan

08:39.310 --> 08:40.900
di sini dan keamanan tipe, karena

08:40.900 --> 08:42.820
kita tahu betul apa yang disimpan

08:42.820 --> 08:44.710
di DataStorage ini dan apa yang disimpan

08:44.710 --> 08:46.770
di DataStorage ini.

08:46.770 --> 08:50.660
Jadi, kombinasi ini adalah hal mengagumkan yang diberikan tipe

08:50.660 --> 08:52.283
generik kepada kita.
