WEBVTT

00:02.190 --> 00:04.310
Dozent: Wie sollten wir stattdessen den Status aktualisieren?

00:04.310 --> 00:06.970
Nun, wir können unseren Spread-Operator hier verwenden

00:06.970 --> 00:09.680
und alle unsere bestehenden TODOs in dieses Array verteilen

00:09.680 --> 00:13.520
und dann einfach das neue TODO als neues Element am Ende hinzufügen.

00:13.520 --> 00:16.300
Das funktioniert, ist aber nicht die sauberste Art der Aktualisierung.

00:16.300 --> 00:18.780
Es wird höchstwahrscheinlich in allen Szenarien funktionieren,

00:18.780 --> 00:20.090
die wir in dieser Anwendung

00:20.090 --> 00:23.170
haben, aber theoretisch plant React Statusaktualisierungen und

00:23.170 --> 00:26.050
daher ist das, was hier in unserem TODOs-Wert steht, nicht unbedingt

00:26.050 --> 00:28.490
der neueste Status, wenn diese Aktualisierung durchgeführt

00:28.490 --> 00:30.710
wird.

00:30.710 --> 00:33.360
Um dies zu gewährleisten, können wir hier jedoch eine Funktion

00:33.360 --> 00:35.340
an die Aktualisierungsfunktion übergeben.

00:35.340 --> 00:37.500
Eine Funktion, die unsere vorherigen TODOs abruft

00:37.500 --> 00:39.680
und dann den neuen Zustand zurückgibt.

00:39.680 --> 00:41.460
Dies alles wird von react unterstützt.

00:41.460 --> 00:44.370
Diese Funktion wird auch von React für uns aufgerufen

00:44.370 --> 00:48.340
und wir können uns darauf verlassen, dass prevTodos innerhalb dieser Funktion

00:48.340 --> 00:51.363
wirklich der letzte Status-Snapshot ist.

00:52.220 --> 00:55.480
Damit aktualisieren wir unsere TODOs mit den alten und

00:55.480 --> 00:57.080
den neuen TODOs, und jetzt

00:57.080 --> 00:59.100
haben wir hier eine Funktion, mit

00:59.100 --> 01:01.860
der wir neue TODOs hinzufügen können.

01:01.860 --> 01:03.800
Wenn wir das nun alles speichern,

01:03.800 --> 01:05.470
zurück zur Anwendung gehen

01:05.470 --> 01:10.260
und dann hier den Kurs beenden, funktioniert das.

01:10.260 --> 01:14.400
Und wenn ich hier in einem Monat fertig bin, kommt das

01:14.400 --> 01:15.650
auch noch dazu.

01:15.650 --> 01:17.330
Jetzt funktioniert also alles.

01:17.330 --> 01:18.960
Die fehlende Funktionalität ist

01:18.960 --> 01:21.180
nun, dass wir sie auch löschen können.

01:21.180 --> 01:22.790
Wir werden dies in der nächsten Vorlesung

01:22.790 --> 01:24.310
tun, aber noch wichtiger ist, dass

01:24.310 --> 01:26.470
Sie jetzt auch gelernt haben, wie man den Zustand

01:26.470 --> 01:28.260
mit React und Typescript verwaltet, was

01:28.260 --> 01:29.930
neben Requisiten natürlich ein weiteres

01:29.930 --> 01:31.693
Kernkonzept ist.
