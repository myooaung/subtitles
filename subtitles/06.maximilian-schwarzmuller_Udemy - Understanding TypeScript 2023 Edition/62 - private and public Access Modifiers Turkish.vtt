WEBVTT

00:02.040 --> 00:04.180
Öğretmen: Yani bu çok temel bir dersti.

00:04.180 --> 00:05.930
Şimdi sınıflar oluştururken, genellikle

00:05.930 --> 00:08.400
bundan daha karmaşık hale gelirler.

00:08.400 --> 00:10.800
Ve orada daha fazla veri depolamak isteyebilirsiniz.

00:10.800 --> 00:15.160
Diyelim ki bir departmanın tüm çalışanlarının olması gerekiyor.

00:15.160 --> 00:18.160
Bu bir dizi olabilir ve başlangıçta

00:18.160 --> 00:20.290
boş bir dizi olabilir.

00:20.290 --> 00:23.520
Ayrıca orada ne saklamak istediğiniz konusunda biraz

00:23.520 --> 00:24.980
daha kesin olmak için,

00:24.980 --> 00:28.800
nispeten basit tutmak için bir dize dizisi olabilir.

00:28.800 --> 00:31.733
Şimdi burada bir yöntemimiz olabilir addEmployee.

00:33.030 --> 00:36.880
Burada, örneğimizde sadece bir dize olması gereken bir

00:36.880 --> 00:39.430
çalışanı argüman olarak istiyoruz.

00:39.430 --> 00:42.650
O zaman bunu ayarlayabiliriz. çalışanlar. it.

00:42.650 --> 00:47.320
Bu kod ile çalışan dizimize yeni bir çalışan

00:47.320 --> 00:48.373
ekleyin.

00:50.750 --> 00:52.683
Şimdi printEmployeeInformation adında

00:53.666 --> 00:55.749
başka bir yöntem de ekleyebiliriz.

01:00.508 --> 01:05.508
Ve orada teselli etmek istiyorum. log(bu. çalışanlar. uzunluk) ve ben de

01:07.766 --> 01:12.766
konsol istiyorum. log(bu. çalışanlar) kendisi.

01:15.510 --> 01:18.480
Şimdi buraya inersek, buradaki kodu yorumlayabiliriz,

01:18.480 --> 01:20.560
bu da yine bozulacaktır çünkü

01:20.560 --> 01:25.870
departman tanımını buradaki nesnemize yine uymuyoruz.

01:25.870 --> 01:29.200
Ve bunun yerine, bu muhasebe departmanına bir

01:29.200 --> 01:32.234
çalışan ekleyebiliriz, diyelim ki Max.

01:32.234 --> 01:35.400
Ve başka bir çalışan, diyelim ki Manu.

01:35.400 --> 01:37.690
Tanımlamanın yanı sıra, çalışan

01:37.690 --> 01:41.520
bilgilerimi de buraya aktarmak istiyorum.

01:41.520 --> 01:44.600
Bunu kaydedersek, şu çıktıyı almamız gerekir:

01:44.600 --> 01:47.830
iki çalışan ve işte bazı bilgiler.

01:47.830 --> 01:50.240
Bunların hepsine sahip olmak güzel.

01:50.240 --> 01:52.700
Bu sınıfla ilgili bir sorunumuz, çalışanları

01:52.700 --> 01:55.960
dışarıdan değiştirebilmemizdir, sadece çalışan

01:55.960 --> 01:58.160
ekle ile değil, çalışanın özelliğine

01:58.160 --> 02:01.710
doğrudan erişerek, bu arada isim için de yapabileceğimiz

02:01.710 --> 02:04.430
gibi.

02:04.430 --> 02:07.630
Yani demek istediğim, muhasebeye de gidebiliriz

02:07.630 --> 02:10.560
ve sonra çalışanlara ulaşabiliriz ve belki

02:10.560 --> 02:13.870
ikinci endekste bir çalışan daha ekleyebiliriz

02:13.870 --> 02:16.400
ve bunun gibi bir Anna geçer.

02:16.400 --> 02:18.210
Bunu yaparsak ve tasarruf edersek,

02:18.210 --> 02:20.290
üç çalışanımız olur ve Anna'yı alırız.

02:20.290 --> 02:22.710
Şimdi, harika, başka bir yolumuz var diye düşünebilirsiniz.

02:22.710 --> 02:25.230
Daha karmaşık uygulamalar oluştururken, genellikle

02:25.230 --> 02:27.980
böyle bir şeyden kaçınmak istersiniz.

02:27.980 --> 02:30.930
Sınıfınızı kullanmanın tek bir yolu, tek bir yolu

02:30.930 --> 02:34.870
olduğundan ve bunun gibi şeylerin, alternatif kullanım yollarının

02:34.870 --> 02:37.280
gerçekten desteklenmediğinden emin olmak

02:37.280 --> 02:38.530
istersiniz.

02:38.530 --> 02:41.230
Çünkü daha büyük bir ekipte çalışıyorsanız, bir

02:41.230 --> 02:42.920
meslektaşınız bir çalışan eklemek

02:42.920 --> 02:45.700
için bu yaklaşımı kullanacak ve başka bir meslektaşınız

02:45.700 --> 02:48.050
bu yaklaşımı kullanabilir.

02:48.050 --> 02:49.280
Ve bunu istemezsin.

02:49.280 --> 02:52.640
Bunu yapmanın tek tip bir yolu olmasını istersiniz.

02:52.640 --> 02:55.960
Ayrıca, belki de çalışan ekleme yönteminde, onu diziye

02:55.960 --> 02:58.420
eklemekten daha fazlasını yaparsınız.

02:58.420 --> 02:59.770
Belki de her şeyden önce burada

02:59.770 --> 03:02.400
biraz doğrulama vs. yapmak istersiniz.

03:02.400 --> 03:04.940
Dolayısıyla, burada yeni bir değeri

03:04.940 --> 03:06.610
doğrudan atadığınızda veya

03:06.610 --> 03:09.470
bu satırla diziye yeni bir değer eklediğinizde

03:09.470 --> 03:12.970
çalışmayan fazladan kodunuz olabilir.

03:12.970 --> 03:16.000
Dolayısıyla, çalışanların sınıf dışından bu şekilde

03:16.000 --> 03:19.884
erişilebilir olmasına izin vermek istemezsiniz.

03:19.884 --> 03:22.340
Ve TypeScript sizi koruyor.

03:22.340 --> 03:26.760
Buradaki çalışanları, önüne private anahtar sözcüğü ekleyerek

03:26.760 --> 03:32.220
özel bir özelliğe, özel bir alana dönüştürebilirsiniz.

03:32.220 --> 03:34.303
Şimdi private'ın anlamı, çalışanların

03:34.303 --> 03:38.030
artık yalnızca sınıfın içinden, yani yaratıcı nesnenin

03:38.030 --> 03:43.480
içinden erişilebilen bir özellik olduğudur.

03:43.480 --> 03:46.700
Böylece departman sınıfının içindeki herhangi bir

03:46.700 --> 03:49.770
yöntem çalışanlarla çalışmaya devam edebilir.

03:49.770 --> 03:52.570
Ama artık bu şekilde erişemezsiniz.

03:52.570 --> 03:54.710
Burada şimdi bir hata aldığımı görüyorsunuz.

03:54.710 --> 03:57.280
Bunu kaydetmeye çalıştığımda, 'employees' özelliğinin

03:57.280 --> 03:59.870
özel olduğuna ve yalnızca 'department' sınıfı içinde

03:59.870 --> 04:03.550
erişilebilir olduğuna dair bir derleme hatası alıyorum.

04:03.550 --> 04:07.100
Şimdi bu departmana çalışan eklenmesi gerektiğinde,

04:07.100 --> 04:09.370
insanların addEmployee yöntemini

04:09.370 --> 04:12.690
kullanması gerektiğini zorluyoruz.

04:12.690 --> 04:16.760
Çünkü böyle bir kod yazarlarsa hata alırlar.

04:16.760 --> 04:20.460
Bu, özel anahtar sözcük olarak adlandırılan bir değiştiricidir.

04:20.460 --> 04:23.470
Ve özelin yanı sıra, varsayılan olan

04:23.470 --> 04:25.000
genel de var.

04:25.000 --> 04:26.590
Halka açık eklemenize gerek yok.

04:26.590 --> 04:29.590
Yani bu şekilde bir isim, önünde public olan

04:29.590 --> 04:31.650
isimle tamamen aynıdır.

04:31.650 --> 04:34.300
Aradaki fark, kamu mülklerine dışarıdan

04:34.300 --> 04:36.350
erişilebilmesidir.

04:36.350 --> 04:40.350
Örneğin burada, istersem isme de ulaşabilir ve

04:40.350 --> 04:43.600
buraya yeni bir isim atayabilirim.

04:43.600 --> 04:45.260
Bu mümkün.

04:45.260 --> 04:49.270
Özel mülkler için bu mümkün değildir.

04:49.270 --> 04:51.580
Onları sadece içeriden kullanabiliriz.

04:51.580 --> 04:52.800
Bu arada, teknik olarak

04:52.800 --> 04:55.700
JavaScript public ve private kavramlarını bilmez.

04:55.700 --> 04:59.630
Sadece son zamanlarda eklenen çok modern versiyonlarda

04:59.630 --> 05:01.320
böyle bir şey var.

05:01.320 --> 05:03.650
Geçmişte JavaScript özel veya genel

05:03.650 --> 05:05.690
özellikleri bilmiyordu.

05:05.690 --> 05:08.520
Orada tüm mülkler her zaman halka açıktı.

05:08.520 --> 05:10.630
TypeScript bu özelliği sunar, ancak

05:10.630 --> 05:13.561
elbette çalışma zamanı sırasında çalışmaz, çünkü

05:13.561 --> 05:16.620
JavaScript yakın zamana kadar yalnızca genel özellikleri

05:16.620 --> 05:18.780
biliyordu.

05:18.780 --> 05:21.290
Yani buradaki satır, TypeScript derlemesi

05:21.290 --> 05:23.130
sırasında donmuş hata.

05:23.130 --> 05:27.000
Yine de JavaScript'e derlerseniz, bu kod çalışma zamanında

05:27.000 --> 05:30.140
hatasız olarak çalışacaktır çünkü yine JavaScript

05:30.140 --> 05:32.800
kendi başına, yakın zamana kadar bu kavramı

05:32.800 --> 05:34.900
bilmiyordu.

05:34.900 --> 05:37.350
Yani derlediğiniz sürüme bağlı olarak, yine

05:37.350 --> 05:38.720
de bunu bilmeyecektir.

05:38.720 --> 05:40.770
Bu nedenle TypeScript bunu yalnızca derleme

05:40.770 --> 05:42.980
sırasında kontrol ettiği için destekler,

05:42.980 --> 05:44.650
çalışma zamanında değil.

05:44.650 --> 05:47.370
Bununla birlikte, bu gibi kodlardan kaçınabilir ve herkesi

05:47.370 --> 05:49.863
daha temiz kod yazmaya zorlayabiliriz.
