WEBVTT

00:02.400 --> 00:04.390
Instrutor: Assim, apresentamos nosso primeiro

00:04.390 --> 00:07.240
formulário, mas o que você vai notar é que o estilo está um pouco

00:07.240 --> 00:09.200
fora de moda, quero dizer, o formulário parece

00:09.200 --> 00:11.910
bem, mas alguma distância entre as bordas de nossa tela e o formulário

00:11.910 --> 00:13.870
seria agradável.

00:13.870 --> 00:15.830
Se você mergulhar no aplicativo. css você realmente

00:15.830 --> 00:18.360
detectará que lá temos um seletor

00:18.360 --> 00:21.050
de ID de entrada do usuário.

00:21.050 --> 00:23.330
Se acrescentássemos algumas almofadas de margem,

00:23.330 --> 00:25.630
isso não soaria muito mal, então na verdade o que podemos

00:25.630 --> 00:28.060
fazer é um aplicativo. ts quando criamos

00:28.060 --> 00:31.740
nosso elemento aqui ou quando temos acesso a ele.

00:31.740 --> 00:34.520
Podemos chegar até o elemento e adicionar aqui uma identificação

00:34.520 --> 00:36.840
que seria de entrada do usuário.

00:36.840 --> 00:39.740
Isto assegurará que o elemento renderizado tenha esta identificação,

00:39.740 --> 00:42.800
se isto recarregar, isto parecerá muito mais agradável.

00:42.800 --> 00:45.100
Se inspecionarmos isto na profundidade do

00:45.100 --> 00:49.320
navegador, vemos a identificação aqui e esta é a razão para este melhor estilo.

00:49.320 --> 00:51.940
Com isso já estamos dando o próximo passo, estamos

00:51.940 --> 00:54.010
interagindo com o elemento.

00:54.010 --> 00:56.980
Agora, esta não é a única interação que quero fazer.

00:56.980 --> 00:58.770
Como temos aqui um formulário, quero

00:58.770 --> 01:01.870
ter acesso às diferentes entradas de formulário que temos

01:01.870 --> 01:05.910
aqui para que possamos ler os valores quando o formulário for submetido, e para

01:05.910 --> 01:08.800
que possamos também configurar um ouvinte de eventos

01:08.800 --> 01:12.160
aqui para a submissão, e validar a entrada do usuário.

01:12.160 --> 01:15.720
Portanto, precisamos ter acesso ao botão ou ao formulário em geral

01:15.720 --> 01:19.180
para ouvir o envio e a todos os elementos de entrada para obter

01:19.180 --> 01:21.273
os últimos valores a partir daí.

01:22.360 --> 01:25.440
Para isso aqui, antes de anexar tudo, mas depois

01:25.440 --> 01:28.500
de atribuir meu ID ao elemento aqui, quero ter

01:28.500 --> 01:32.210
acesso aos diferentes inputs daquele elemento naquela

01:32.210 --> 01:35.980
forma, e quero armazená-los como propriedades desta classe,

01:35.980 --> 01:39.820
então acrescentarei mais campos lá em cima e o primeiro

01:39.820 --> 01:44.570
campo poderia ser um campo de títuloInputElement.

01:44.570 --> 01:47.167
O tipo será HTMLInputElement escreva isto, e não

01:48.060 --> 01:50.410
precisaremos dele apenas uma vez que precisamos

01:50.410 --> 01:52.770
de dois outros campos semelhantes.

01:52.770 --> 01:55.900
Nós temos um campo de descriçãoInputElement que

01:55.900 --> 01:57.550
é do tipo HTMLInputElement,

01:58.520 --> 02:02.730
e também precisamos de um campo peopleInputElement.

02:02.730 --> 02:06.240
Agora podemos povoar estes campos aqui no construtor, com este

02:06.240 --> 02:11.510
títuloInputElement que é igual a este.

02:11.510 --> 02:11.510
Portanto,

02:11.510 --> 02:13.120
para nosso elemento forma,

02:13.120 --> 02:16.390
tenha sempre em mente que esse é o elemento forma aqui,

02:16.390 --> 02:21.350
seletor de consulta e depois consulta para o elemento título.

02:21.350 --> 02:25.000
E se você novamente der uma olhada no índice. html vemos lá dentro que temos

02:25.000 --> 02:28.410
o título de identificação sobre este elemento para

02:28.410 --> 02:30.420
que possamos consultar para isso,

02:30.420 --> 02:33.323
então em app. ts aqui no seletor de consulta

02:33.323 --> 02:37.210
podemos usar o #title para selecionar o elemento de identificação do título

02:37.210 --> 02:39.750
e armazenar isso no titleInputElement.

02:39.750 --> 02:44.070
Agora, como você sabe, assim como com o documento obter elemento por ID, o datilografia

02:44.070 --> 02:46.230
não tem nenhuma chance de entender que

02:46.230 --> 02:49.090
o seletor de consulta vai retornar um elemento de entrada

02:49.090 --> 02:50.650
aqui.

02:50.650 --> 02:53.780
Assim, para dizer datilografia, usarei novamente o casting,

02:53.780 --> 02:56.020
e lançarei isto a um elemento de entrada,

02:56.020 --> 02:58.270
e então poderemos repetir este passo duas

02:58.270 --> 03:00.672
vezes, e também assinar a descriçãoInputElement,

03:00.672 --> 03:03.240
e o peopleInputElement.

03:03.240 --> 03:06.600
Procure as identificações apropriadas no índice. html, que são surpreendentemente,

03:06.600 --> 03:12.190
suponho, descrição e pessoas, e adicioná-los ao datilografar.

03:12.190 --> 03:16.120
Portanto, aqui estamos procurando o elemento de identificação da descrição,

03:16.120 --> 03:17.720
e aqui por pessoas.

03:17.720 --> 03:19.510
E com isso temos acesso a todos

03:19.510 --> 03:22.687
esses elementos dentro de nossa classe aqui, ou

03:22.687 --> 03:26.593
dentro de cada objeto que é criado com base na classe.

03:27.600 --> 03:29.870
Agora só precisamos acrescentar

03:29.870 --> 03:33.330
um ouvinte ao nosso elemento, à nossa forma.

03:33.330 --> 03:38.330
Para isso vou adicionar outro método privado configurado, que você não

03:38.440 --> 03:39.790
precisa adicionar,

03:39.790 --> 03:43.130
mas novamente quero manter essa separação onde

03:43.130 --> 03:47.900
basicamente fazemos a seleção e a montagem bruta no construtor.

03:47.900 --> 03:49.340
E depois a inserção ou

03:49.340 --> 03:52.210
o ajuste fino em métodos separados.

03:52.210 --> 03:53.900
E no método de configuração minha

03:53.900 --> 03:57.000
idéia é criar um ouvinte de eventos, para que aqui possamos

03:57.000 --> 03:58.970
alcançar este elemento que é a forma

03:58.970 --> 04:01.830
e adicionar um ouvinte de eventos.

04:01.830 --> 04:04.570
Agora, como o datilografia sabe que o elemento é um

04:04.570 --> 04:08.580
elemento de formulário HTML, ele realmente nos oferece auto-completamento

04:08.580 --> 04:10.770
quando queremos ouvir o evento de envio

04:10.770 --> 04:12.250
aqui, o que é ótimo.

04:12.250 --> 04:15.520
Agora só precisamos vincular isto a um método e para

04:15.520 --> 04:17.840
isso vou acrescentar outro método privado,

04:17.840 --> 04:20.650
privado porque nunca vou acessar isto de fora

04:20.650 --> 04:23.460
da classe, apenas de dentro.

04:23.460 --> 04:26.970
Que eu nomeareiHandler, o nome depende totalmente de você.

04:26.970 --> 04:29.740
Este deve ser um método que recebe um objeto de evento,

04:29.740 --> 04:32.750
'tho porque vamos ligá-lo a este ouvinte do evento'.

04:32.750 --> 04:34.880
Portanto, aqui podemos apontar para isto...

04:36.460 --> 04:38.713
submeter manipulador.

04:40.180 --> 04:42.080
Agora nós o ajustamos para garantir

04:42.992 --> 04:45.040
que antes de anexarmos toda a chamada

04:45.040 --> 04:46.730
configuremos e executemos este

04:46.730 --> 04:49.330
método privado, novamente seu privado para que

04:49.330 --> 04:50.500
de dentro da classe possamos,

04:50.500 --> 04:53.660
é claro, alcançá-lo, de fora você obteria um erro de digitação,

04:53.660 --> 04:56.000
então agora este método deve acionar sempre

04:56.000 --> 04:59.290
que o formulário for submetido.

04:59.290 --> 05:02.010
No manipulador de envio, quero ter acesso

05:02.010 --> 05:05.520
aos meus diferentes valores de entrada aqui, e

05:05.520 --> 05:07.710
validá-los, e então, é claro,

05:07.710 --> 05:10.310
fazer algo com as entradas.

05:10.310 --> 05:12.700
Agora vamos nos preocupar em fazer algo mais

05:12.700 --> 05:15.480
tarde, por enquanto vamos apenas ter acesso a eles.

05:15.480 --> 05:18.430
Para isso, antes de mais nada, vou convocar um evento. prevenirDefault para

05:18.430 --> 05:20.620
impedir o envio do formulário padrão,

05:20.620 --> 05:23.890
o que desencadearia um pedido HTTP a ser enviado,

05:23.890 --> 05:25.820
o que eu não quero aqui, e então

05:25.820 --> 05:28.270
para ver onde isto funciona, vamos imprimir

05:28.270 --> 05:32.730
o console. registrar este título Valor do elemento, para

05:32.730 --> 05:36.250
imprimir o que está atualmente no elemento de entrada do título.

05:36.250 --> 05:39.010
Se nós o salvamos, você vê que ele se compila sem erros,

05:39.010 --> 05:40.560
então isso parece bom.

05:40.560 --> 05:44.670
E se agora formos para o console aqui e entrarmos em "Olá! e clique em adicionar projeto, bom é que não foi submetido,

05:44.670 --> 05:49.440
ruim é que recebemos um erro, "Não é possível ler o 'valor' de propriedade

05:49.440 --> 05:51.657
indefinido". Agora, o que está errado aqui?

05:51.657 --> 05:54.620
O problema aqui é que, isto aqui, esta palavra-chave em submitHandler

05:54.620 --> 05:56.173
não aponta para a classe de fato.

05:57.730 --> 06:02.230
Por quê?

06:02.230 --> 06:06.420
Bem, devido à forma como o JavaScript e o typescript funcionam,

06:06.420 --> 06:07.760
nós ligamos o método

06:07.760 --> 06:11.770
aqui ao ouvinte do evento e quando ligamos algo a um evento

06:11.770 --> 06:14.680
ou com a ajuda de um ouvinte de evento, então

06:14.680 --> 06:17.480
isso é algo para que esse método, que vai

06:17.480 --> 06:19.740
ser executado, tenha isso ligado

06:19.740 --> 06:22.410
a algo mais, neste caso, ao alvo atual

06:22.410 --> 06:24.210
do evento.

06:24.210 --> 06:27.270
Portanto, este fim deste método não

06:27.270 --> 06:31.060
apontará para a classe, quando o método é acionado

06:31.060 --> 06:35.130
em um evento com um ouvinte de eventos.

06:35.130 --> 06:38.150
Agora o trabalho ao redor ou a solução é realmente

06:38.150 --> 06:40.360
chamar bind aqui no submitHandler

06:40.360 --> 06:43.980
para pré-configurar como esta função vai ser executada

06:43.980 --> 06:46.949
quando ela for executada no futuro, e o primeiro

06:46.949 --> 06:51.070
argumento que podemos passar para bind então é realmente o que

06:51.070 --> 06:52.880
esta palavra-chave se referirá

06:52.880 --> 06:56.450
dentro da função a ser executada.

06:56.450 --> 06:59.760
E aqui eu passo isto, o que significa que isto dentro

06:59.760 --> 07:02.920
do submitHandler se referirá à mesma coisa que

07:02.920 --> 07:05.750
isto se refere a este contexto.

07:05.750 --> 07:10.030
E como o chamamos no contexto de configure aqui, que chamamos

07:10.030 --> 07:13.660
com este configure, este final de configure se referirá

07:13.660 --> 07:17.500
à classe, e graças ao bind, ele estará lá para todos, referindo-se

07:17.500 --> 07:19.880
também aos finais de classe fora do

07:19.880 --> 07:22.870
submitHandler.

07:22.870 --> 07:24.830
Portanto, se você agora

07:24.830 --> 07:28.890
salvar isto aqui, e nós recarregarmos, e

07:28.890 --> 07:30.743
entrar "Olá! " aqui, você agora vê

07:32.840 --> 07:33.673
"Olá! " é impresso aqui quando

07:33.673 --> 07:35.600
enviamos o formulário.

07:35.600 --> 07:37.510
Então agora isto está resolvido e agora

07:37.510 --> 07:38.770
estamos lidando com isto adequadamente.

07:38.770 --> 07:40.210
Mas talvez haja uma maneira melhor,

07:40.210 --> 07:43.650
ou uma maneira alternativa sobre a qual todos nós já aprendemos.

07:43.650 --> 07:46.330
Talvez alguém que use decoradores,

07:46.330 --> 07:49.430
então aqui está sua chance de parar novamente

07:49.430 --> 07:51.970
e tentar resolver esta ligação com

07:51.970 --> 07:54.300
decoradores, porque isso é algo

07:54.300 --> 07:57.900
que aprendemos na seção de decoradores.
