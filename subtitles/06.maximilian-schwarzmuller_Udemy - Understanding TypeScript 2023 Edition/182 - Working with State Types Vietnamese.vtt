WEBVTT

00:02.260 --> 00:03.920
Người giải thích: Đã đến lúc quản lý trạng

00:03.920 --> 00:05.340
thái trong thành phần Ứng dụng, bởi

00:05.340 --> 00:07.240
vì khi chúng tôi cập nhật mảng như thế này, thành

00:07.240 --> 00:08.880
phần sẽ không được hiển thị lại.

00:08.880 --> 00:10.530
Đó là cách React hoạt động.

00:10.530 --> 00:12.590
Trong thành phần chức năng của chúng tôi, chúng

00:12.590 --> 00:15.000
tôi có thể quản lý Trạng thái bằng hook useState.

00:15.000 --> 00:16.820
Và một lần nữa, nếu bạn không biết điều

00:16.820 --> 00:18.750
này hoặc nếu các thành phần hoặc hook trạng

00:18.750 --> 00:21.120
thái hoặc chức năng không cho bạn biết bất cứ điều

00:21.120 --> 00:23.810
gì, hãy chắc chắn kiểm tra một số tài nguyên React chuyên

00:23.810 --> 00:26.480
dụng như React của tôi, khóa học hướng dẫn đầy đủ.

00:26.480 --> 00:29.870
Vì vậy, bây giờ tôi muốn quản lý việc cần làm của mình ở đây với trạng

00:29.870 --> 00:31.760
thái và để làm điều đó, tôi sẽ xóa việc

00:31.760 --> 00:33.060
cần làm giả mà tôi đã bắt

00:33.060 --> 00:36.430
đầu và thay vào đó khởi tạo trạng thái bằng cách gọi useState

00:36.430 --> 00:39.080
và với điều đó, tôi có thể chuyển mảng trống của mình

00:39.080 --> 00:41.210
dưới dạng bắt đầu giá trị trạng thái để

00:41.210 --> 00:44.510
ban đầu trạng thái của tôi là một mảng trống.

00:44.510 --> 00:47.100
Bây giờ useState luôn trả về một

00:47.100 --> 00:49.370
mảng có đúng hai phần tử.

00:49.370 --> 00:52.070
Phần tử đầu tiên là ảnh chụp nhanh trạng thái mới nhất

00:52.070 --> 00:53.630
cho chu trình kết xuất này.

00:53.630 --> 00:55.070
Và đối số thứ hai, phần

00:55.070 --> 00:56.720
tử thứ hai trong mảng là

00:56.720 --> 00:58.860
một hàm để cập nhật trạng thái đó

00:58.860 --> 01:01.110
và kết xuất lại thành phần.

01:01.110 --> 01:02.660
Chúng ta có thể sử dụng tái cấu

01:02.660 --> 01:05.060
trúc mảng mà chúng ta đã học trước đó trong khóa

01:05.060 --> 01:07.060
học để lấy ra hai phần tử này và lưu trữ

01:07.060 --> 01:09.230
chúng trong các hằng số riêng biệt.

01:09.230 --> 01:10.900
Và ở đây chúng ta có todos và

01:10.900 --> 01:13.103
giả sử một hàm có tên là setTodos.

01:14.920 --> 01:16.820
Cùng với đó, chúng tôi vẫn nhận

01:16.820 --> 01:19.530
được mảng todos của mình và bây giờ ở đây trong

01:19.530 --> 01:21.480
todoAddHandler, tôi muốn gọi

01:21.480 --> 01:24.430
setTodos và đặt mảng todos của tôi thành một mảng

01:24.430 --> 01:27.373
mới, có todoText mới được thêm vào.

01:28.240 --> 01:29.283
Bây giờ, tất nhiên,

01:30.400 --> 01:32.130
chúng ta có thể chuyển vào một

01:32.130 --> 01:34.100
mảng mới và thêm một đối tượng mới,

01:34.100 --> 01:36.530
giả sử bằng một ID, nơi chúng ta tạo một ID

01:36.530 --> 01:42.530
ngẫu nhiên bằng Math.

01:42.530 --> 01:42.530
ngẫu nhiên(). toString.

01:42.530 --> 01:44.830
Nó không thực sự độc đáo, nhưng đủ tốt ở đây, và khi

01:44.830 --> 01:46.620
đó chúng ta cũng có văn bản của mình, đó

01:46.620 --> 01:48.760
là giá trị văn bản mà tôi đang nhận được ở đây.

01:48.760 --> 01:51.910
Nhưng thật kỳ lạ, tôi đang gặp lỗi ở đây.

01:51.910 --> 01:54.790
Và lỗi mà chúng tôi gặp phải là đối số

01:54.790 --> 01:56.860
này không thể gán được.

01:56.860 --> 01:59.630
Về cơ bản, thành một thứ mà dự

01:59.630 --> 02:01.970
kiến sẽ không có gì.

02:01.970 --> 02:03.590
Và đó, tất nhiên không phải là những gì bạn muốn ở đây.

02:03.590 --> 02:06.010
Chúng tôi không muốn có một mảng không có gì như trạng thái của chúng tôi.

02:06.010 --> 02:07.110
Tại sao chuyện này đang xảy ra?

02:07.950 --> 02:11.800
Bởi vì ở đây khi tôi khởi tạo useState với một mảng trống, TypeScript

02:11.800 --> 02:15.040
sẽ suy ra trạng thái của chúng ta sẽ như thế nào, nếu tôi khởi

02:15.040 --> 02:17.060
tạo nó thành một chuỗi, thì TypeScript

02:17.060 --> 02:20.130
sẽ suy ra rằng trạng thái của tôi là một chuỗi.

02:20.130 --> 02:23.010
Vì vậy, nếu tôi tạm thời xóa phần này và chuyển vào một số văn bản,

02:23.010 --> 02:24.123
nó sẽ được chấp nhận.

02:25.160 --> 02:26.137
Nếu tôi chuyển nó vào một

02:26.137 --> 02:28.260
mảng, thì TypeScript mong đợi rằng đó là một mảng

02:28.260 --> 02:30.080
nhưng không phải là một mảng của bất kỳ thứ

02:30.080 --> 02:32.000
gì, mà về cơ bản luôn là một mảng trống.

02:32.000 --> 02:36.070
Vì vậy, một mảng không có gì mà tất nhiên tôi không muốn ở đây.

02:36.070 --> 02:38.050
Để khắc phục điều này, chúng tôi phải cho React biết,

02:38.050 --> 02:40.460
bất động sản của chúng tôi sẽ trông như thế nào theo thời gian.

02:40.460 --> 02:42.920
Và để làm được điều đó, chúng ta có thể sử dụng lại useState

02:42.920 --> 02:44.630
đó là một chức năng chung, bởi vì chúng

02:44.630 --> 02:48.080
ta có thể chuyển vào cấu trúc của bất động sản của mình.

02:48.080 --> 02:51.240
Vì vậy, trạng thái của chúng ta thuộc loại dữ liệu nào

02:51.240 --> 02:54.200
và ở đó chúng ta có thể chuyển vào đó trạng thái của

02:54.200 --> 02:56.253
chúng ta phải là một mảng các đối tượng,

02:57.210 --> 02:59.570
chính xác là và mảng các đối tượng mà chúng

02:59.570 --> 03:02.750
ta có thuộc tính ID là một chuỗi và thuộc tính văn bản,

03:02.750 --> 03:04.860
trong đó là một chuỗi.

03:04.860 --> 03:08.050
Và bây giờ cập nhật trạng thái này được cho phép.

03:08.050 --> 03:10.100
Tất nhiên, viết cái này ở đây cũng được nhưng vì chúng ta sẽ cần

03:10.100 --> 03:12.410
nó ở những vị trí khác nhau trong ứng dụng, nên tôi sẽ thực sự tạo một

03:12.410 --> 03:16.710
tệp mới và đặt tên cho việc cần làm này. người mẫu. ts.

03:16.710 --> 03:18.210
Tên tập tin là tùy thuộc vào bạn.

03:18.210 --> 03:19.940
Và ở đây, về cơ bản, tôi muốn xuất

03:19.940 --> 03:21.710
một tên giao diện Todo nơi tôi chỉ

03:21.710 --> 03:24.080
muốn mô tả cách ID Todo của chúng tôi sẽ trông

03:24.080 --> 03:25.440
như thế nào trong ứng dụng

03:25.440 --> 03:27.430
của tôi mà tôi muốn có một ID kiểu chuỗi

03:27.430 --> 03:30.190
và thuộc tính văn bản kiểu chuỗi.

03:30.190 --> 03:34.420
Và với cái này được xuất ở đây trong thành phần ứng dụng, chúng

03:34.420 --> 03:35.900
tôi có thể nhập cái này

03:35.900 --> 03:38.210
để ở đây chúng tôi có thể nhập Todo

03:39.080 --> 03:42.543
từ . /làm. người mẫu.

03:43.900 --> 03:46.720
Và ở đây, chúng ta chỉ đơn giản là có một mảng

03:46.720 --> 03:49.550
todos, tất nhiên là ngắn hơn và dễ đọc hơn.

03:49.550 --> 03:51.480
Và bây giờ bản cập nhật trạng thái của chúng tôi vẫn hoạt

03:51.480 --> 03:52.870
động, nhưng cái này sạch hơn một chút.

03:52.870 --> 03:55.100
Và điều này như bạn thấy thực sự quan trọng

03:55.100 --> 03:57.210
ở đây khi làm việc với thứ gì đó giống như

03:57.210 --> 03:59.170
một mảng trong đó các loại nội dung

03:59.170 --> 04:01.860
cho loại dữ liệu mà bạn muốn lưu trữ cuối cùng, nếu

04:01.860 --> 04:04.270
bạn khởi tạo nó với một mảng trống.

04:04.270 --> 04:06.250
Với điều này tuy nhiên nó hoạt động.

04:06.250 --> 04:07.450
Tất nhiên, nhược điểm

04:07.450 --> 04:09.910
là, logic cập nhật trạng thái của chúng tôi

04:09.910 --> 04:13.670
ở đây là không chính xác, bởi vì ngay bây giờ tôi luôn ghi đè lên mảng

04:13.670 --> 04:17.400
todo hiện có bằng một mảng mới chỉ có đúng một phần tử.

04:17.400 --> 04:20.110
Và thay vào đó, tôi muốn ghi đè lên nó bằng một

04:20.110 --> 04:23.730
mảng mới có tất cả các phần tử cũ cũng như phần tử mới.

04:23.730 --> 04:26.583
Vì vậy, hãy điều chỉnh logic này trong bài giảng tiếp theo.
