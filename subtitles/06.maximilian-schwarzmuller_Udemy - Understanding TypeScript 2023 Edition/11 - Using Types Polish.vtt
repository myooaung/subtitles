WEBVTT

00:02.060 --> 00:06.410
Instruktor: Typescript dostarcza wielu typów do JavaScript.

00:06.410 --> 00:10.100
Teraz, JavaScript sam w sobie, również zna pewne typy danych,

00:10.100 --> 00:12.230
i do tego również wrócę w tym module,

00:12.230 --> 00:14.950
ale Typescript dodaje wiele więcej typów, i

00:14.950 --> 00:17.380
jak również dowiesz się w tym kursie, Typescript

00:17.380 --> 00:21.110
umożliwia również pisanie własnych typów.

00:21.110 --> 00:24.320
Zacznijmy teraz od niektórych typów Core, które

00:24.320 --> 00:26.250
JavaScript już zna i które Typescript

00:26.250 --> 00:28.289
również obsługuje, a także przyjrzymy

00:28.289 --> 00:30.550
się, co oznacza różnica między JavaScriptem,

00:30.550 --> 00:33.380
znającym typ, a Typescriptem, używającym

00:33.380 --> 00:36.800
tego typu.

00:36.800 --> 00:38.287
Jednym z podstawowych typów,

00:38.287 --> 00:41.740
z którymi pracujemy w JavaScript i Typescript, jest typ liczbowy.

00:41.740 --> 00:45.220
Teraz w JavaScript, a to samo dotyczy Typescript, istnieje

00:45.220 --> 00:47.290
tylko jeden typ liczby.

00:47.290 --> 00:50.750
Nie ma specjalnego typu dla liczb całkowitych lub pływaków.

00:50.750 --> 00:55.520
Zamiast tego, te wartości tutaj, wszystkie byłyby liczbami.

00:55.520 --> 00:58.180
Jedynka byłaby liczbą bez miejsca po przecinku.

00:58.180 --> 01:01.640
5. 3 to oczywiście jedynka z miejscem

01:01.640 --> 01:04.532
po przecinku, a wszystkie te wartości są typu liczba.

01:04.532 --> 01:08.180
Inne języki programowania mają specjalne typy całkowite

01:08.180 --> 01:10.480
oraz typy float lub double.

01:10.480 --> 01:11.980
JavaScript tego nie ma

01:11.980 --> 01:14.120
i Typescript też tego nie ma.

01:14.120 --> 01:16.070
Mamy więc typ number, który

01:16.070 --> 01:19.810
znamy z JavaScript, również jako typ, w Typescript.

01:19.810 --> 01:23.950
Mamy również typ danych string, a to będzie tekst, który można zdefiniować

01:23.950 --> 01:26.370
na jeden z tych trzech sposobów, z pojedynczymi

01:26.370 --> 01:28.285
cudzysłowami, z podwójnymi cudzysłowami

01:28.285 --> 01:30.950
lub również z backticks.

01:30.950 --> 01:34.720
Ostatnia notacja z backticks to specjalna składnia, przewidziana

01:34.720 --> 01:38.640
we współczesnym JavaScripcie, a także w Typescripcie, która

01:38.640 --> 01:42.440
pozwala nam pisać tzw. template literals, czyli zwykłe ciągi

01:42.440 --> 01:44.550
znaków, do których można dynamicznie

01:44.550 --> 01:47.520
wstrzykiwać jakieś dane.

01:47.520 --> 01:49.240
Tak więc, ciągi są po prostu

01:49.240 --> 01:53.000
tekstem, a JavaScript wie o typach wartości ciągów.

01:53.000 --> 01:55.000
Typescript również to robi.

01:55.000 --> 01:57.240
Ostatnim, ale nie mniej ważnym, jednym z podstawowych

01:57.240 --> 01:59.790
typów danych, które zna JavaScript i obsługuje również

01:59.790 --> 02:02.250
Typescript, jest typ danych Boolean.

02:02.250 --> 02:03.810
To byłoby prawdziwe lub fałszywe,

02:03.810 --> 02:06.610
a to jest super ważne w programowaniu, oczywiście, szczególnie

02:06.610 --> 02:08.920
podczas pracy z oświadczeniami IF.

02:08.920 --> 02:10.970
Tutaj mamy te dwie wartości

02:10.970 --> 02:13.690
i to jest ważne, ponieważ w JavaScript,

02:13.690 --> 02:17.520
możesz również znać tę ideę wartości truthy i falsy,

02:17.520 --> 02:22.190
na przykład, że zero, liczba zero, jest wartością falsy.

02:22.190 --> 02:25.510
Jeśli użyjesz go w warunku IF, jest on traktowany jako fałszywy.

02:25.510 --> 02:28.560
Typ danych Boolean, naprawdę zna tylko te dwie wartości, chociaż,

02:28.560 --> 02:31.230
true lub false, i to nie jest tylko przypadek dla Typescript,

02:31.230 --> 02:33.160
ale także dla JavaScript.

02:33.160 --> 02:35.532
Ta prawdziwa, falsy koncepcja, którą powinieneś

02:35.532 --> 02:38.280
znać, która nie jest związana z typami danych.

02:38.280 --> 02:40.840
To jest praca za kulisami.

02:40.840 --> 02:43.030
JavaScript dodaje runtime,

02:43.030 --> 02:46.510
gdy widzi pewne wartości i warunki IF.

02:46.510 --> 02:48.530
Tak więc, z liczbami, ciągami i Booleans, otrzymujemy

02:48.530 --> 02:50.060
kilka podstawowych typów danych.

02:50.060 --> 02:51.450
Oczywiście nie wszystkie,

02:51.450 --> 02:53.410
mamy też obiekty i tak dalej,

02:53.410 --> 02:54.617
ale skupmy się na tych

02:54.617 --> 02:57.330
typach i zobaczmy co z nimi robi, lub co

02:57.330 --> 03:00.930
możemy zrobić, z pomocą Typescript.

03:00.930 --> 03:02.620
W tym celu wracam do projektu,

03:02.620 --> 03:05.190
który widzieliśmy w pierwszym module kursu

03:05.190 --> 03:07.600
i tam pokazałem, że wszystko, co musisz

03:07.600 --> 03:10.320
zrobić, teraz, to uruchomić npm start w terminalu,

03:10.320 --> 03:12.280
nawigować do tego folderu projektu,

03:12.280 --> 03:15.130
aby uruchomić ten żywy serwer deweloperski,

03:15.130 --> 03:18.110
który będzie ładował się, gdy tylko coś zmienimy,

03:18.110 --> 03:24.890
a tutaj otworzyłem ten adres localhost:3000 w nowej karcie przeglądarki.

03:24.890 --> 03:26.070
Right know, dostaję błąd,

03:26.070 --> 03:28.300
ponieważ nie mam app tray jako pliku, jeszcze.

03:28.300 --> 03:30.380
Oczywiście ten projekt startowy, cały

03:30.380 --> 03:32.280
dołączony do tego wykładu, dostanie

03:32.280 --> 03:34.400
taki app tray as file, który próbujemy

03:34.400 --> 03:37.590
zaimportować tutaj, w naszym pliku index html, zaraz po

03:37.590 --> 03:42.050
skompilowaniu aplikacji. ts z Typescript do JavaScript i możemy to zrobić

03:42.050 --> 03:45.070
w nowej karcie terminala, tak aby zachować ten proces i otworzyć

03:45.070 --> 03:46.860
nową kartę zamiast tego, po prostu

03:46.860 --> 03:51.117
uruchamiając tsc app. ts i co to robi, to kompiluje plik Typescript

03:53.920 --> 03:56.630
i wypluwa plik JavaScript, a kiedy to się stanie,

03:56.630 --> 03:58.680
możemy ponownie załadować tę stronę

03:58.680 --> 04:05.520
i dostaniemy Czas na rozpoczęcie...

04:05.520 --> 04:05.520
wyjście tutaj.

04:05.520 --> 04:08.000
Tak więc, teraz mamy to ustawienie tutaj, gdzie

04:08.000 --> 04:10.620
możemy napisać trochę kodu Typescript, a następnie

04:10.620 --> 04:14.650
skompilować go do kodu JavaScript, aby zobaczyć, co robi.

04:14.650 --> 04:17.000
Teraz, z tym w pliku Typescript, faktycznie

04:17.000 --> 04:18.870
pozbędę się zawartości tam, ponieważ

04:18.870 --> 04:21.820
teraz, chcę zanurkować w tych podstawowych typach danych,

04:21.820 --> 04:23.720
które właśnie pokazałem ci na slajdzie,

04:23.720 --> 04:27.230
abyś zrozumiał, jak pracować z nimi w Typescript.

04:27.230 --> 04:29.430
Teraz zacznijmy bardzo, bardzo prosto.

04:29.430 --> 04:32.240
Powiedzmy, że mamy nową funkcję, add, i

04:32.240 --> 04:34.990
tam oczekujemy dwóch liczb, n1 i dodajemy

04:34.990 --> 04:38.610
dwie, i to zwraca n1 plus n2, tak po prostu, bardzo prosta

04:38.610 --> 04:42.370
funkcja, nic w niej nie ma typu Typescript.

04:42.370 --> 04:46.080
Teraz mamy dwie liczby, z którymi chcemy pracować.

04:46.080 --> 04:49.800
To może być tutaj numer1, czyli powiedzmy pięć,

04:49.800 --> 04:54.680
a także numer2, czyli może 2. 8, cokolwiek chcesz,

04:54.680 --> 04:57.060
dwie liczby tutaj.

04:57.060 --> 04:59.820
Teraz, oczywiście i niezbyt zaskakująco,

04:59.820 --> 05:02.950
możemy dodać, czyli wywołać funkcję add i przekazać

05:02.950 --> 05:05.280
liczbę1 i liczbę2 jako argumenty do tej

05:05.280 --> 05:07.320
funkcji, zapisać wynik w nowej stałej

05:07.320 --> 05:10.360
być może, a następnie, aby zobaczyć coś na ekranie,

05:10.360 --> 05:15.080
możemy konsoli.

05:15.080 --> 05:15.080
zapisz wynik.

05:15.080 --> 05:20.080
Jeśli to zrobimy i przekompiluję ten plik za pomocą tsc app. ts, to ta strona powinna się automatycznie

05:20.270 --> 05:22.730
przeładować, już.

05:22.730 --> 05:24.350
Jeśli nie, to oczywiście możesz ręcznie przeładować

05:24.350 --> 05:27.010
i powinieneś zobaczyć 7. 8.

05:27.010 --> 05:30.250
Teraz możesz pomyśleć, że to nie jest zbyt wyjątkowe, prawda?

05:30.250 --> 05:33.650
Jest to dość prosty snippet JavaScript i, rzeczywiście,

05:33.650 --> 05:37.330
nie ma nic, co robi Typescript-ish.

05:37.330 --> 05:39.450
Cóż, zróbmy coś, co będzie hamować

05:39.450 --> 05:41.900
ten snippet w normalnym JavaScript.

05:41.900 --> 05:45.100
Powiedzmy, że to wejście tutaj nie jest w rzeczywistości

05:45.100 --> 05:48.530
liczbą, ale jakimś tekstem, piątką w tekście, a jeśli teraz

05:48.530 --> 05:49.880
zapiszemy to i ponownie

05:49.880 --> 05:53.380
uruchomimy nasze polecenie kompilacji tutaj, zobaczysz,

05:53.380 --> 05:56.110
że po ponownym załadowaniu tej strony tutaj,

05:56.110 --> 05:59.530
otrzymam 52. 8 jako wyjście i to oczywiście

05:59.530 --> 06:02.200
nie jest prawidłowy wynik tego uzupełnienia.

06:02.200 --> 06:04.500
Teraz, czy wiesz, dlaczego otrzymujemy

06:04.500 --> 06:06.450
to wyjście w normalnym JavaScript,

06:06.450 --> 06:08.670
który my, w końcu wykonujemy tutaj.

06:08.670 --> 06:10.150
Cóż, dostajemy to wyjście,

06:10.150 --> 06:14.710
ponieważ nie jest to wynik matematycznego dodawania, ale zamiast tego,

06:14.710 --> 06:17.760
to konkatenuje to jako ciąg, ponieważ to wejście,

06:17.760 --> 06:21.060
tutaj, pięć, jest ciągiem i wtedy JavaScript widzi,

06:21.060 --> 06:23.997
"Ok, mam ciąg, "dodaję coś do tego ciągu, podczas

06:23.997 --> 06:27.667
gdy z pewnością, "to coś powinno być również konwertowane

06:27.667 --> 06:32.097
na ciąg, "tak, że ogólnie, mam ciąg, "ponieważ pierwsza wartość była

06:32.097 --> 06:34.190
ciągiem," i stąd, co JavaScript robi,

06:34.190 --> 06:39.240
jest, konwertuje 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
z liczby na ciąg, konkatenuje dłuższy ciąg z pięciu i 2. 8, stąd otrzymujemy

06:42.720 --> 06:46.700
52. 8, jako ciąg znaków i zwraca to.

06:46.700 --> 06:49.490
Więc nie traktuje tego w sposób matematyczny, ale

06:49.490 --> 06:50.850
zamiast tego jako ciąg, a

06:50.850 --> 06:52.900
z JavaScriptem może się to zdarzyć.

06:52.900 --> 06:54.037
Teraz, oczywiście, możesz pomyśleć:

06:54.037 --> 06:55.427
"Dlaczego miałbym pisać taki kod?

06:55.427 --> 06:58.160
"Jestem deweloperem, dlaczego miałbym popełnić ten błąd? Cóż, może to nie ty, popełniasz ten błąd.

06:58.160 --> 07:01.230
Może to jest pobierane z jakiegoś wejścia użytkownika

07:01.230 --> 07:04.180
i wprowadziłeś mały błąd w swoim kodzie, gdzie

07:04.180 --> 07:06.690
zapomniałeś przekształcić to, lub pracujesz

07:06.690 --> 07:09.350
w zespole i masz kilka plików skryptów, pracujących

07:09.350 --> 07:14.740
razem, a jakiś inny deweloper wprowadził taki błąd.

07:14.740 --> 07:17.270
Popełnienie takich błędów nie jest niemożliwe,

07:17.270 --> 07:20.110
ale ich namierzenie może być trudne.

07:20.110 --> 07:22.340
Tutaj oczywiście jest dość oczywiste, że coś

07:22.340 --> 07:24.010
poszło nie tak, bo mamy podstawowy

07:24.010 --> 07:26.400
skrypt, ale w większym skrypcie, można nawet

07:26.400 --> 07:28.320
nie od razu rozpoznać, że coś tu poszło

07:28.320 --> 07:31.520
nie tak i to właśnie były Typescript może nam pomóc.

07:31.520 --> 07:33.720
Możemy w tej funkcji dodać przypisania

07:33.720 --> 07:36.390
typów, do naszych parametrów.

07:36.390 --> 07:38.820
Możemy powiedzieć Typescriptowi, że

07:38.820 --> 07:42.280
te dwa parametry powinny być typu liczba i nie być typu,

07:42.280 --> 07:45.340
nie obchodzi mnie, który jest domyślny.

07:45.340 --> 07:47.535
Tak więc, robimy to, dodając tutaj dwukropek,

07:47.535 --> 07:50.300
po wartości, do której chcemy przypisać typ, a

07:50.300 --> 07:52.890
więc, w tym przypadku, po nazwie parametru,

07:52.890 --> 07:55.220
a następnie nazwie typu.

07:55.220 --> 07:57.140
Na przykład liczba byłaby jedną z obsługiwanych nazw.

07:57.140 --> 08:00.560
Oprócz number, masz też string, czy Boolean,

08:00.560 --> 08:03.480
ale do tych jeszcze wrócimy.

08:03.480 --> 08:05.990
Na razie potrzebujemy liczby i to nie

08:05.990 --> 08:07.750
tylko na pierwszym parametrze

08:07.750 --> 08:10.530
tutaj, ale również na drugim.

08:10.530 --> 08:12.010
Tak więc, tutaj również możemy

08:12.010 --> 08:16.150
dodać dwukropek, a następnie liczbę, i teraz, to co mówimy do Typescript, to

08:16.150 --> 08:18.367
"Hej, oba parametry tutaj, powinny być typu

08:18.367 --> 08:22.147
liczba, "przekazywanie wartości innego typu nie jest dozwolone," i

08:22.147 --> 08:25.530
rzeczywiście, moje IDE już narzeka tutaj, ponieważ Visual Studio

08:25.530 --> 08:28.360
Code ma wbudowaną obsługę Typescript, ale nawet jeśli

08:28.360 --> 08:32.510
przeoczylibyśmy to, jak tylko przekompiluję to, poprzez ponowne uruchomienie

08:32.510 --> 08:34.260
tsc app. ts, zobaczysz,

08:34.260 --> 08:39.193
dostajemy błąd.

08:40.040 --> 08:41.670
Dostajemy błąd, że, "Argument

08:41.670 --> 08:42.697
typu ''5'' nie jest

08:42.697 --> 08:46.250
przypisany do parametru typu 'liczba'", i nawet pokazuje

08:46.250 --> 08:48.660
nam, gdzie to się stało i daje nam numer

08:48.660 --> 08:51.140
linii, linia ósma, i to w zasadzie pokazuje

08:51.140 --> 08:54.430
nam to samo, IDE pokazuje tutaj.

08:54.430 --> 08:56.740
Tak więc, w przypadku, gdy przeoczyliśmy

08:56.740 --> 08:58.707
go w IDE, kompilując go, teraz rzuca

08:58.707 --> 09:01.340
błąd i to jest ważna rzecz w Typescript.

09:01.340 --> 09:03.284
Pomaga nam to tylko podczas kompilacji.

09:03.284 --> 09:06.220
Nie zmienia JavaScript, aby działał inaczej w czasie biegu,

09:06.220 --> 09:10.110
ponieważ przeglądarki nie mają wbudowanej obsługi Typescript.

09:10.110 --> 09:13.510
To może nam pomóc tylko podczas rozwoju, zanim skompilujemy

09:13.510 --> 09:15.700
nasz kod Typescript do JavaScript,

09:15.700 --> 09:19.310
ale tam jest to niezwykle przydatne, ponieważ dodaje dodatkowy

09:19.310 --> 09:21.520
krok, dodatkowy sanity check, gdzie

09:21.520 --> 09:25.560
tutaj dowiadujemy się, "Och, popełniliśmy błąd.

09:25.560 --> 09:28.407
"Tutaj, to nie powinien być ciąg, to powinien być

09:28.407 --> 09:31.660
numer", a my możemy to naprawić i jesteśmy dobrzy.

09:31.660 --> 09:34.210
To właśnie robi Typescript.

09:34.210 --> 09:35.670
Pomaga w trakcie rozwoju.

09:35.670 --> 09:37.390
Nie zmienia to twojego kodu runtime.

09:37.390 --> 09:40.130
Rzeczywiście, tutaj, nawet przy domyślnych ustawieniach,

09:40.130 --> 09:42.800
skompilował nasz błąd tutaj, mimo że wykrył go podczas

09:42.800 --> 09:44.700
kompilacji, i utworzył plik, który

09:44.700 --> 09:47.220
powoduje nieprawidłowy wynik, ponieważ domyślnie

09:47.220 --> 09:50.690
Typescript nie wchodzi, tutaj.

09:50.690 --> 09:53.560
Później dowiesz się, jak możesz się upewnić, że tak jest,

09:53.560 --> 09:56.300
ale domyślnie nie blokuje nawet kompilacji.

09:56.300 --> 09:59.260
Mimo to krzyczy na Ciebie i wskazuje

09:59.260 --> 10:03.570
ten błąd, żebyś go naprawił i żebyś takich błędów tutaj

10:03.570 --> 10:04.850
unikał.

10:04.850 --> 10:07.450
Przy okazji upewnij się, że nie

10:07.450 --> 10:09.020
masz aplikacji. js i app. w tym samym czasie.

10:09.020 --> 10:11.950
Możesz uzyskać błędy tutaj w IDE, dotyczące

10:11.950 --> 10:13.470
zduplikowanych implementacji funkcji.

10:13.470 --> 10:15.830
Zamknięcie pliku JavaScript naprawia to.
