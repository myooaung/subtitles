WEBVTT

00:02.300 --> 00:04.800
Instrutor: Agora relacionado de forma solta ao encadeamento

00:04.800 --> 00:06.930
opcional, temos outro recurso agradável no TypeScript,

00:06.930 --> 00:09.550
que nos ajuda a lidar com dados nulos.

00:09.550 --> 00:12.820
E essa característica é chamada de coalescência nula.

00:12.820 --> 00:15.900
Agora imagine que você tem alguns dados, alguma

00:15.900 --> 00:17.530
entrada, onde você não sabe

00:17.530 --> 00:19.830
com certeza se são nulos ou indefinidos

00:19.830 --> 00:23.320
ou se são realmente um pedaço de dado válido.

00:23.320 --> 00:28.180
Por exemplo, o userInput poderia ser nulo, digamos assim.

00:28.180 --> 00:31.040
Agora, novamente, aqui, nós codificamos isto em TypeScript,

00:31.040 --> 00:33.580
portanto o TypeScript sabe que isto é nulo, mas

00:33.580 --> 00:36.500
se você está pegando isto através de alguma API DOM, onde

00:36.500 --> 00:38.650
você não sabe com certeza, ou se você está

00:38.650 --> 00:41.320
recebendo isto de um back-end, então você pode não

00:41.320 --> 00:42.970
saber antecipadamente e o TypeScript

00:42.970 --> 00:46.510
pode não saber se isto é nulo ou não.

00:46.510 --> 00:50.650
Se você quiser então armazenar isto em alguma outra constante ou variável

00:50.650 --> 00:52.803
como dados armazenados, você pode querer

00:54.090 --> 00:56.150
ter certeza de que se for nulo, você

00:56.150 --> 00:58.760
armazena um valor fallback.

00:58.760 --> 01:03.560
Agora você pode fazer isso com o operador lógico OR, onde você armazena

01:03.560 --> 01:05.330
um padrão, onde você obtém

01:05.330 --> 01:06.740
que o segundo valor do

01:06.740 --> 01:08.940
primeiro é indefinido ou nulo,

01:08.940 --> 01:11.550
se for falso para ser preciso.

01:11.550 --> 01:13.690
O problema com esta abordagem

01:13.690 --> 01:17.110
é que, se na verdade isto não for nulo ou indefinido,

01:17.110 --> 01:18.960
mas digamos uma cadeia vazia,

01:18.960 --> 01:21.740
é tratado como um valor falso e, portanto,

01:21.740 --> 01:25.600
esse valor padrão, fallback, fará efeito.

01:25.600 --> 01:28.850
Portanto, se eu consolar. log storedData aqui,

01:28.850 --> 01:31.700
você verá que isto imprime o DEFAULT.

01:31.700 --> 01:33.430
Talvez seja isso que você queira e,

01:33.430 --> 01:36.540
nesse caso, esta é uma solução perfeitamente adequada.

01:36.540 --> 01:38.800
Mas se você quiser manter essa entrada do usuário,

01:38.800 --> 01:40.730
ou quaisquer dados com os quais você esteja

01:40.730 --> 01:44.110
trabalhando, a menos que sejam realmente nulos ou indefinidos, então

01:44.110 --> 01:45.530
você precisa de outra abordagem

01:45.530 --> 01:48.070
porque aqui trataríamos isso como falso e usaríamos

01:48.070 --> 01:48.970
o recuo.

01:48.970 --> 01:51.720
Mas talvez você queira manter uma entrada vazia apenas nula

01:51.720 --> 01:54.370
ou indefinida deve ser tratada de forma diferente.

01:54.370 --> 01:56.390
Para isso, a TypeScript também tem um

01:56.390 --> 01:58.780
operador, o operador do duplo ponto de interrogação,

01:58.780 --> 02:02.210
que é chamado de operador de coalescência nulista.

02:02.210 --> 02:05.250
E isso significa que se isto for nulo ou indefinido,

02:05.250 --> 02:06.730
e realmente só isso, não

02:06.730 --> 02:09.180
um fio vazio, não zero, realmente só

02:09.180 --> 02:11.540
nulo ou indefinido, então usaremos

02:11.540 --> 02:13.370
o recurso.

02:13.370 --> 02:16.700
Se não for nulo ou indefinido, usaremos esse valor.

02:16.700 --> 02:19.220
Portanto, neste cenário aqui, este compila, e

02:19.220 --> 02:21.400
você vê, nós armazenamos o fio vazio, portanto,

02:21.400 --> 02:23.060
não estou imprimindo nada aqui,

02:23.060 --> 02:24.720
este é o fio vazio.

02:24.720 --> 02:26.060
Se isto, por outro lado,

02:26.060 --> 02:28.550
digamos, é indefinido aqui, e eu salvo isto,

02:28.550 --> 02:30.400
veja, agora diz DEFAULT, porque

02:30.400 --> 02:32.980
graças a este operador de duplo ponto de interrogação,

02:32.980 --> 02:35.500
nós voltamos a este, bem, fallback e, portanto,

02:35.500 --> 02:38.320
aqui temos outro recurso muito útil que pode ajudá-lo

02:38.320 --> 02:40.580
a lidar com valores nulos ou indefinidos

02:40.580 --> 02:42.773
com graça.
