WEBVTT

00:02.130 --> 00:03.970
Giảng viên: Trước hết, chúng ta có thể khởi động

00:03.970 --> 00:06.480
máy chủ phát triển của mình tại đây với npm start, và đây là quá

00:06.480 --> 00:08.440
trình chúng ta nên tiếp tục chạy vì quá trình này

00:08.440 --> 00:10.940
sẽ theo dõi các tệp của chúng ta để biết các thay đổi.

00:10.940 --> 00:13.270
Và nếu có gì đó thay đổi, vì vậy nếu bạn lưu một

00:13.270 --> 00:15.620
thay đổi cụ thể, nó sẽ biên dịch lại các loại

00:15.620 --> 00:17.776
mã thành JavaScript, biên dịch lại JSX

00:17.776 --> 00:20.090
thành JavaScript và cuối cùng, sau đó xây

00:20.090 --> 00:22.500
dựng cho bạn ứng dụng phản ứng của bạn và phân

00:22.500 --> 00:25.750
phối nó trên máy chủ cục bộ 3000, tại đó, tại thời điểm này, bạn

00:25.750 --> 00:27.630
không nhìn thấy nhiều.

00:27.630 --> 00:29.430
Bạn chỉ có thể thấy nó ở đây trong bảng điều khiển dành

00:29.430 --> 00:31.800
cho nhà phát triển rằng nó dường như hoạt động nhờ đầu ra đó ở đây.

00:31.800 --> 00:32.900
Tất nhiên, bạn không thấy nhiều

00:32.900 --> 00:34.340
vì chúng tôi không hiển thị bất kỳ thứ

00:34.340 --> 00:36.700
gì ở đây trong Ứng dụng. tsx vào lúc này.

00:36.700 --> 00:38.170
Điều đó tất nhiên sẽ thay đổi.

00:38.170 --> 00:39.420
Và với điều đó và đang chạy,

00:39.420 --> 00:41.130
bây giờ chúng ta hãy viết một số

00:41.130 --> 00:43.580
mã hoặc phân tích những gì chúng ta có.

00:43.580 --> 00:46.750
Trong chỉ mục. tsx chúng tôi không có gì đặc biệt, phải không?

00:46.750 --> 00:49.060
Đây là mã JavaScript thông thường.

00:49.060 --> 00:52.950
Trong ứng dụng. tsx, mặc dù vậy, chúng tôi thấy kiểu

00:52.950 --> 00:55.250
gán này và ở đó, những gì chúng tôi có thể thấy

00:55.250 --> 00:57.980
là chúng tôi đã gán kiểu lạ này cho Ứng dụng.

00:57.980 --> 01:00.270
Bây giờ, nếu chúng ta bỏ qua loại đó trong một giây,

01:00.270 --> 01:02.480
thì cái gì thực sự được lưu trữ trong Ứng dụng?

01:02.480 --> 01:04.840
Chà, một hàm, một hàm mũi tên, nhưng

01:04.840 --> 01:07.290
đó vẫn là một hàm thông thường, do đó.

01:07.290 --> 01:09.960
Tại sao loại này ở đây không hoạt động hoặc tại sao đây không

01:09.960 --> 01:12.570
phải là một trong những loại chức năng mà chúng ta đã học?

01:12.570 --> 01:14.030
Chà, nó ở dưới mui xe, nhưng

01:14.030 --> 01:16.450
đây là một loại được cung cấp bởi phản ứng, và

01:16.450 --> 01:18.100
bây giờ, điều quan trọng tất nhiên

01:18.100 --> 01:21.070
là được cung cấp bởi gói các loại phản ứng.

01:21.070 --> 01:26.070
Nếu bạn đi vào các mô-đun nút, chúng ta sẽ thấy thư mục @types ở đây và trong đó, chúng

01:26.390 --> 01:28.470
ta sẽ thấy rất nhiều loại và chúng ta

01:28.470 --> 01:30.670
cũng thấy các loại phản ứng ở đây, tất

01:30.670 --> 01:32.600
cả các loại phản ứng-dom.

01:32.600 --> 01:35.840
Và cuối cùng, loại này được nhập hoàn toàn tự

01:35.840 --> 01:39.340
động từ thư mục loại phản ứng, bạn có thể nói.

01:39.340 --> 01:40.870
Bây giờ, loại này là gì?

01:40.870 --> 01:44.490
FC chỉ đơn giản là viết tắt của thành phần chức năng.

01:44.490 --> 01:46.310
Ngoài ra còn có một hình thức dài hơn mà bạn

01:46.310 --> 01:47.570
có thể sử dụng để thay thế.

01:47.570 --> 01:49.240
Đó chính xác là cùng một loại.

01:49.240 --> 01:51.090
Cái còn lại chỉ là một lối tắt và điều

01:51.090 --> 01:54.300
này chỉ đơn giản xác định rằng những gì chúng ta lưu trữ ở đây

01:54.300 --> 01:57.750
trong Ứng dụng phải là chức năng, nhưng một chức năng đủ điều kiện

01:57.750 --> 02:00.550
là thành phần chức năng trong phản ứng.

02:00.550 --> 02:02.840
Tất nhiên, bạn cũng viết các thành phần dựa trên

02:02.840 --> 02:05.760
lớp, và do đó, bạn cũng có một thành phần cổ điển ở đây và sau

02:05.760 --> 02:07.420
đó, bạn sẽ phải lưu trữ một lớp trong

02:07.420 --> 02:09.480
đó thay vì một hàm, nhưng chúng ta sẽ chuyển

02:09.480 --> 02:12.720
sang các thành phần chức năng ở đây trong khóa học này .

02:12.720 --> 02:14.670
Bây giờ, đây là một thành phần chức

02:14.670 --> 02:17.620
năng vì nó là một hàm trả về JSX và đó là cách một thành

02:17.620 --> 02:20.850
phần chức năng được tạo trong phản ứng.

02:20.850 --> 02:24.180
Nếu tôi tạm thời xóa câu lệnh trả về này, do đó chúng tôi

02:24.180 --> 02:26.730
có thể gặp lỗi ở đây, tất cả nếu tôi cố lưu câu

02:26.730 --> 02:28.800
lệnh này và nó muốn biên dịch nó.

02:28.800 --> 02:32.440
Chúng tôi sẽ gặp lỗi vì bây giờ, chúng tôi nói với TypeScript rằng

02:32.440 --> 02:34.960
ở đây, chúng tôi muốn lưu trữ một thành phần hàm

02:34.960 --> 02:38.520
và tất cả những gì chúng tôi lưu trữ là một hàm bình thường, không

02:38.520 --> 02:40.770
phải hàm trả về JSX hoặc bất kỳ thứ gì khác

02:40.770 --> 02:42.800
đủ điều kiện làm phần tử phản ứng.

02:42.800 --> 02:44.440
Và do đó, điều này sẽ không hợp lệ và

02:44.440 --> 02:45.810
chúng tôi sẽ phải sửa nó.

02:45.810 --> 02:48.530
Vì vậy, ở đây, chúng ta có thể thấy TypeScript cải thiện dự

02:48.530 --> 02:50.360
án của chúng ta một chút như thế nào.

02:50.360 --> 02:52.500
Nó cung cấp cho chúng tôi loại an toàn bổ sung và

02:52.500 --> 02:55.420
đảm bảo rằng chúng tôi không thể chạy trong tình huống mà chúng

02:55.420 --> 02:58.353
tôi, ví dụ, chúng tôi xây dựng một thành phần không hợp lệ.

02:59.200 --> 03:03.230
Lưu ý bên lề, nếu việc bạn quên câu lệnh return này có vẻ không

03:03.230 --> 03:05.370
thực tế, hãy xem xét rằng bạn đang

03:05.370 --> 03:07.970
xây dựng một thành phần lớn hơn với nhiều

03:07.970 --> 03:11.070
câu lệnh if và câu lệnh return khác nhau.

03:11.070 --> 03:14.370
Bạn có thể quên một trong một nhánh của câu lệnh if của mình

03:14.370 --> 03:17.010
và sau đó TypeScript chắc chắn có thể cứu bạn và

03:17.010 --> 03:19.130
đưa ra cảnh báo đó sớm hơn một chút so với

03:19.130 --> 03:21.500
trong thời gian chạy, nếu không thì nó có thể

03:21.500 --> 03:23.710
gặp sự cố trong một số trường hợp.

03:23.710 --> 03:25.620
Vì vậy, đây là TypeScript đang làm điều

03:25.620 --> 03:27.740
gì đó, nhưng với điều đó, đủ để nói.

03:27.740 --> 03:28.690
Hãy xây dựng một cái

03:28.690 --> 03:31.670
gì đó và tôi muốn xây dựng một ứng dụng tương đối đơn giản ở đây,

03:31.670 --> 03:34.590
một ứng dụng công việc, khá cổ điển, nhưng là một ứng dụng công

03:34.590 --> 03:36.370
việc cho phép chúng tôi thực hành một

03:36.370 --> 03:39.480
số khái niệm cốt lõi về phản ứng với TypeScript.

03:39.480 --> 03:41.270
Và do đó, trong các bài giảng tiếp theo, chúng

03:41.270 --> 03:44.363
ta hãy thực sự bắt đầu các thành phần tùy chỉnh đầu tiên của mình.
