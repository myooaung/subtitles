WEBVTT

1
00:00:02.190 --> 00:00:03.570
<v ->We also got module here.</v>

2
00:00:03.570 --> 00:00:06.050
Now, module is an option I'll skip for now,

3
00:00:06.050 --> 00:00:07.540
because it really only makes sense

4
00:00:07.540 --> 00:00:10.830
once we learn about modules in TypeScript

5
00:00:10.830 --> 00:00:13.400
and how we can connect multiple files.

6
00:00:13.400 --> 00:00:15.350
So let's ignore that for now.

7
00:00:15.350 --> 00:00:17.250
Lib is an interesting one though.

8
00:00:17.250 --> 00:00:20.890
Lib is an option that allows you to specify

9
00:00:20.890 --> 00:00:25.650
which default objects and features TypeScript knows.

10
00:00:25.650 --> 00:00:28.580
With that I mean things like working with the dom.

11
00:00:28.580 --> 00:00:31.930
Let's say in index.html we have a button

12
00:00:31.930 --> 00:00:33.700
and on this button we say, "Click me."

13
00:00:33.700 --> 00:00:35.100
Now, when we click this button

14
00:00:35.100 --> 00:00:36.610
we just want to print the message.

15
00:00:36.610 --> 00:00:39.820
Now, in app.ts we can select this button.

16
00:00:39.820 --> 00:00:41.420
We can get access to this button

17
00:00:43.808 --> 00:00:44.641
with document.querySelector.

18
00:00:44.641 --> 00:00:48.130
For example, selecting the first button we find.

19
00:00:48.130 --> 00:00:51.580
Now if we do that then this works.

20
00:00:51.580 --> 00:00:53.000
We get no types of error here.

21
00:00:53.000 --> 00:00:58.000
So if I go to my button and I add an EventListener here,

22
00:00:58.390 --> 00:01:00.990
I get an error here actually because TypeScript

23
00:01:00.990 --> 00:01:04.010
doesn't know for sure whether we find a button here.

24
00:01:04.010 --> 00:01:07.310
For now we can work around that with an exclamation mark,

25
00:01:07.310 --> 00:01:08.860
after this line and I'll come back

26
00:01:08.860 --> 00:01:11.320
to what exactly this does in the future.

27
00:01:11.320 --> 00:01:13.667
It basically tells TypeScript, "Don't worry,

28
00:01:13.667 --> 00:01:15.097
"such a button will exist.

29
00:01:15.097 --> 00:01:17.360
"We will get a value here."

30
00:01:17.360 --> 00:01:19.470
So now we can add a click event here.

31
00:01:19.470 --> 00:01:21.670
And then find some anonymous function

32
00:01:21.670 --> 00:01:24.920
maybe where a console.log clicked.

33
00:01:24.920 --> 00:01:26.450
Now, the interesting thing here

34
00:01:26.450 --> 00:01:29.310
is not so much that I had to add the exclamation mark,

35
00:01:29.310 --> 00:01:31.150
as I said I will come back to that,

36
00:01:31.150 --> 00:01:34.840
but that if I run tsc this just compiles.

37
00:01:34.840 --> 00:01:38.370
Now, shouldn't TypeScript complain that document

38
00:01:38.370 --> 00:01:39.690
is unknown here?

39
00:01:39.690 --> 00:01:43.290
How does it know that we have such a document,

40
00:01:43.290 --> 00:01:45.610
constant or variable available?

41
00:01:45.610 --> 00:01:48.350
How does it know that even if we have that available

42
00:01:48.350 --> 00:01:50.010
that it holds an object which has our

43
00:01:50.010 --> 00:01:51.690
querySelector method?

44
00:01:51.690 --> 00:01:55.932
How does it know that button is something which has

45
00:01:55.932 --> 00:01:57.120
addEventListener method?

46
00:01:57.120 --> 00:01:59.290
How does TypeScript know all of that?

47
00:01:59.290 --> 00:02:01.430
Now you might say, "Of course it knows."

48
00:02:01.430 --> 00:02:03.290
Because in Vanilla JavaScript

49
00:02:03.290 --> 00:02:05.580
this would be valid code but keep in mind

50
00:02:05.580 --> 00:02:08.080
that when you write TypeScript code,

51
00:02:08.080 --> 00:02:11.310
you don't necessarily write it for the browser.

52
00:02:11.310 --> 00:02:13.200
You could be writing your Node.js

53
00:02:13.200 --> 00:02:14.630
application with TypeScript

54
00:02:14.630 --> 00:02:18.280
and there indeed this would all not work.

55
00:02:18.280 --> 00:02:21.940
So, the reason why this works is this lib option

56
00:02:21.940 --> 00:02:24.420
and as you see it's not even set here,

57
00:02:24.420 --> 00:02:28.180
but if it isn't set then some defaults are assumed.

58
00:02:28.180 --> 00:02:31.536
If it's not set the defaults depend

59
00:02:31.536 --> 00:02:33.270
on your JavaScript target here,

60
00:02:33.270 --> 00:02:35.940
and for es6 it, by default, includes

61
00:02:35.940 --> 00:02:40.120
all the features that are globally available in es6.

62
00:02:40.120 --> 00:02:45.120
For example, the Map object which is available in es6.

63
00:02:46.400 --> 00:02:48.700
Therefore it wouldn't complain if you use Map.

64
00:02:50.677 --> 00:02:51.780
So it assumes all the es6 features

65
00:02:51.780 --> 00:02:54.530
which are made available globally in JavaScript,

66
00:02:54.530 --> 00:02:57.070
that they are available in TypeScript as well.

67
00:02:57.070 --> 00:03:00.670
And in addition it assumes that all DOM API's

68
00:03:00.670 --> 00:03:01.740
are available.

69
00:03:01.740 --> 00:03:04.550
You'll find the detailed descriptions about all these

70
00:03:04.550 --> 00:03:07.300
options, by the way, in the official box which are linked

71
00:03:07.300 --> 00:03:09.490
in the lecture at the end of this module.

72
00:03:09.490 --> 00:03:11.520
So, long story short, if the lib option

73
00:03:11.520 --> 00:03:13.760
is not set some defaults are assumed

74
00:03:13.760 --> 00:03:16.030
and these are typically the defaults you need

75
00:03:16.030 --> 00:03:19.014
to have TypeScript run in the browser.

76
00:03:19.014 --> 00:03:20.670
So, all the DOM API's are gone.

77
00:03:20.670 --> 00:03:24.780
If we comment this in and I now compile everything

78
00:03:24.780 --> 00:03:26.010
I definitely get an error,

79
00:03:26.010 --> 00:03:28.050
because now they're commenting it in

80
00:03:28.050 --> 00:03:30.370
we don't have the defaults settings anymore.

81
00:03:30.370 --> 00:03:32.437
Instead, we now say, "Hey, please include

82
00:03:32.437 --> 00:03:36.330
"some default libraries," some default type definitions

83
00:03:36.330 --> 00:03:39.470
you could say, which I will give you in this array.

84
00:03:39.470 --> 00:03:43.213
And, as you see, I'm not passing any description,

85
00:03:44.162 --> 00:03:45.050
any paths, any values here.

86
00:03:45.050 --> 00:03:46.920
And therefore, what I'm saying to TypeScript now

87
00:03:46.920 --> 00:03:50.037
is, "Hey, regarding all the defaults, you know,

88
00:03:50.037 --> 00:03:51.770
"please take this into account."

89
00:03:51.770 --> 00:03:53.580
And, you know, nothing.

90
00:03:53.580 --> 00:03:55.300
So, only if that is commented out, it works,

91
00:03:55.300 --> 00:03:57.410
because then TypeScript will assume some defaults.

92
00:03:57.410 --> 00:03:59.740
If I set the default explicitly,

93
00:03:59.740 --> 00:04:01.600
well then TypeScript, of course, adheres

94
00:04:01.600 --> 00:04:02.680
to what I'm setting here.

95
00:04:02.680 --> 00:04:05.410
And here for example, it doesn't know document,

96
00:04:05.410 --> 00:04:07.343
It doesn't even know the console here.

97
00:04:08.900 --> 00:04:10.930
So therefore, we wanna set this two more

98
00:04:10.930 --> 00:04:12.360
reasonable values and, again,

99
00:04:12.360 --> 00:04:13.800
if you hit control space,

100
00:04:13.800 --> 00:04:15.800
and here you get auto completion.

101
00:04:15.800 --> 00:04:18.280
For example, there we could add dom.

102
00:04:18.280 --> 00:04:21.070
That's an identifier and there are some pre-defined

103
00:04:21.070 --> 00:04:22.840
identifiers, which TypeScript understands,

104
00:04:22.840 --> 00:04:26.070
again, you'll find a complete list in the official docs.

105
00:04:26.070 --> 00:04:27.750
The docs for this option

106
00:04:27.750 --> 00:04:30.100
are attached to this lecture as well.

107
00:04:30.100 --> 00:04:32.680
So, this is an identifier TypeScript understands

108
00:04:32.680 --> 00:04:35.150
and it's an identifier which basically unlocks

109
00:04:35.150 --> 00:04:37.040
all the DOM APIs in TypeScript,

110
00:04:37.040 --> 00:04:40.100
so that TypeScript understands what you're doing here.

111
00:04:40.100 --> 00:04:42.550
So now, already you see it knows console,

112
00:04:42.550 --> 00:04:45.400
it knows document, and so on.

113
00:04:45.400 --> 00:04:47.896
So now since we're working with Next-Gen JavaScript

114
00:04:47.896 --> 00:04:50.830
we should also add the es6 option,

115
00:04:50.830 --> 00:04:54.130
so that TypeScript also understands all globally

116
00:04:54.130 --> 00:04:56.540
available es6 options.

117
00:04:56.540 --> 00:05:00.620
And it's also a good idea to add dom.iterable

118
00:05:00.620 --> 00:05:02.530
and scripthost.

119
00:05:02.530 --> 00:05:05.250
With that here we would unlock all the core

120
00:05:05.250 --> 00:05:07.360
JavaScript features you would want to work

121
00:05:07.360 --> 00:05:09.980
and this, by the way, is the exact default

122
00:05:09.980 --> 00:05:13.550
set-up you get when you set target to es6, anyways.

123
00:05:13.550 --> 00:05:15.860
So, if you comment this in and set it up

124
00:05:15.860 --> 00:05:17.959
like this, you have exactly the same behavior

125
00:05:17.959 --> 00:05:20.920
as if you don't specify lib at all.

126
00:05:20.920 --> 00:05:23.250
Now, here I will comment that in though

127
00:05:23.250 --> 00:05:25.100
and with that this will compile.

128
00:05:25.100 --> 00:05:27.370
Again, setting this is a bit redundant though,

129
00:05:27.370 --> 00:05:29.263
just want to explain what it does.

