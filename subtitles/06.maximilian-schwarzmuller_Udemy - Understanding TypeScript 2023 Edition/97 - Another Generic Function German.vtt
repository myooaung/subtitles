WEBVTT

00:02.140 --> 00:03.620
-: Lassen Sie uns also weiter

00:03.620 --> 00:06.220
mit diesen generischen Typen üben, denn

00:06.220 --> 00:08.305
ich weiß, dass sie für den Kopf seltsam

00:08.305 --> 00:09.970
sein können.

00:09.970 --> 00:12.180
Erstellen wir eine durchschnittliche

00:12.180 --> 00:14.810
generische Funktion, zählen und drucken.

00:14.810 --> 00:19.810
Diese Funktion sollte nun ein Argument, einen Parameter erhalten.

00:20.330 --> 00:23.470
Nennen wir es Element, aber der Name ist wirklich bis zu

00:23.470 --> 00:26.530
Ihnen, die von einem generischen Typ sein sollte.

00:26.530 --> 00:28.340
Denn der Typ ist mir wirklich egal,

00:28.340 --> 00:30.380
zumindest in gewisser Hinsicht.

00:30.380 --> 00:33.400
Nehmen wir also an, wir haben einen generischen Typ in dieser Funktion

00:33.400 --> 00:35.800
und unser Parameter ist von diesem Typ.

00:35.800 --> 00:38.350
Das ist übrigens ganz typisch für generische Typen.

00:38.350 --> 00:40.030
Wenn Sie eine generische Funktion haben,

00:40.030 --> 00:42.180
wird Ihr Parameter oft von diesem Typ sein.

00:42.180 --> 00:43.890
Das muss nicht sein, aber oft arbeitet

00:43.890 --> 00:45.890
man so mit generischen Funktionen, wie Sie

00:45.890 --> 00:46.920
sehen werden, wenn Sie

00:46.920 --> 00:49.080
mehr und mehr Erfahrung mit ihnen sammeln.

00:49.080 --> 00:50.670
Hier haben wir also count und print

00:50.670 --> 00:52.350
mit unserem generischen Typ hier,

00:52.350 --> 00:54.430
und element ist von diesem Typ.

00:54.430 --> 00:56.500
Nun, was ich hier zurückgeben möchte,

00:56.500 --> 01:00.300
ist nienda Tupel mit zwei Elementen, wobei das erste Element

01:00.300 --> 01:03.190
mein Element selbst und das zweite Element eine

01:03.190 --> 01:07.070
Beschreibungszeichenfolge sein sollte.

01:07.070 --> 01:10.160
Vielleicht nennen wir es zählen und beschreiben, also.

01:10.160 --> 01:15.160
Hier habe ich also meinen Beschreibungstext, und hier werde ich sagen, dass

01:15.410 --> 01:19.890
ich keinen Wert habe, und ich möchte das verwenden, wenn wir ein Element

01:19.890 --> 01:22.620
übergeben, das keine Länge hat.

01:22.620 --> 01:25.570
Denn meine Idee mit count und describe ist, dass wir ein Array

01:25.570 --> 01:29.040
oder einen String übergeben können und die Anzahl der Zeichen oder Elemente

01:29.040 --> 01:32.040
in diesem String oder Array zurückbekommen.

01:32.040 --> 01:34.040
Wenn wir also eine leere Zeichenkette

01:34.040 --> 01:37.440
oder ein leeres Array haben, möchte ich got no value

01:37.440 --> 01:42.440
verwenden, aber wenn ich hier prüfe, dass die Elementpunktlänge größer als

01:43.210 --> 01:46.170
Null ist, dann möchte ich den Beschreibungstext

01:47.430 --> 01:52.430
auf got plus Elementpunktlänge plus Elemente setzen.

01:55.850 --> 01:58.100
Man könnte sogar noch spezifischer

01:58.100 --> 02:03.100
sein und prüfen, ob die Länge gleich eins ist, und dann sagen, dass wir ein

02:06.590 --> 02:11.590
Element haben, andernfalls, wenn die Elementlänge größer als eins ist,

02:11.720 --> 02:13.750
haben wir einen Beschreibungstext,

02:13.750 --> 02:18.750
der gleich "got" plus Elementlänge ist, damit wir die Pluralform richtig

02:18.990 --> 02:21.173
haben.

02:22.850 --> 02:25.220
Hier steht nun der Beschreibungstext für das zweite Element

02:25.220 --> 02:27.040
und hier der Rücklauf. Nun gibt es hier schon

02:27.040 --> 02:29.480
einige Beschwerden über die Länge.

02:29.480 --> 02:32.350
Denn es ist nicht klar, dass das Element eine Länge hat.

02:32.350 --> 02:34.770
Vielleicht sollten wir also klarstellen, dass dies der Fall ist.

02:34.770 --> 02:38.430
Wir könnten dies tun, indem wir eine neue Schnittstelle oder einen benutzerdefinierten

02:38.430 --> 02:41.060
Typ mit dem Schlüsselwort type erstellen, und hier werde ich

02:41.060 --> 02:44.750
mich für eine Schnittstelle entscheiden, die ich lengthy nennen werde, was letztendlich

02:44.750 --> 02:47.440
nur garantiert, dass wir ein Objekt mit einer Längeneigenschaft

02:47.440 --> 02:50.820
haben, die am Ende eine Zahl ergeben sollte.

02:50.820 --> 02:52.870
Und dann können wir hier eine Einschränkung

02:52.870 --> 02:54.740
festlegen und sagen, dass T lang ist.

02:54.740 --> 02:57.710
Wir wissen also, dass alles, was wir bekommen, eine Längeneigenschaft

02:57.710 --> 03:01.053
hat, und ein Array oder eine Zeichenkette würde eine Längeneigenschaft haben.

03:02.030 --> 03:07.030
Hier kann ich über die Konsole die Zählung protokollieren und beschreiben

03:07.500 --> 03:11.240
und, sagen wir mal, "Hallo" einfügen.

03:11.240 --> 03:14.280
Das funktioniert, weil eine Zeichenkette eine Längeneigenschaft hat.

03:14.280 --> 03:15.290
Es ist kein Gegenstand.

03:15.290 --> 03:17.310
Es ist eine Zeichenkette, aber hinter den Kulissen,

03:17.310 --> 03:19.980
Javascript Art von wandelt diese in ein Objekt auf der fliegenden könnte

03:19.980 --> 03:21.720
man sagen und fügt eine Länge Eigenschaft, wenn

03:21.720 --> 03:23.940
wir es brauchen. Wir können es also

03:23.940 --> 03:26.960
getrost so nennen. Geben Sie zunächst ein Skript

03:26.960 --> 03:31.370
ein, das ein Array zurückgibt, das entweder eine Zeichenkette oder ein Element vom

03:31.370 --> 03:33.580
Typ T enthält. Jetzt möchte ich ein Tupel

03:33.580 --> 03:36.060
haben, also werde ich hier spezifischer sein und den

03:36.060 --> 03:39.110
Rückgabetyp im Grunde auf ein Array mit genau zwei Elementen festlegen,

03:39.110 --> 03:41.330
wobei das erste Element vom Typ T und das zweite

03:41.330 --> 03:43.850
Element vom Typ String sein wird.

03:43.850 --> 03:46.270
Ich sage jetzt einfach, dass wir hier ein Tupel

03:46.270 --> 03:49.360
zurückgeben, bei dem das erste Element ein beliebiges Element

03:49.360 --> 03:52.010
unseres generischen Typs und das zweite Element

03:52.010 --> 03:54.110
eine Zeichenkette ist.

03:54.110 --> 03:56.820
Wenn wir das nun speichern, wird es ohne Fehler

03:56.820 --> 04:00.330
neu kompiliert und gibt "Hallo, ich habe neun Elemente, weil

04:00.330 --> 04:02.330
wir neun Zeichen haben" aus.

04:04.320 --> 04:06.890
Wir könnten dies auch mit einem Array aufrufen,

04:06.890 --> 04:09.530
in dem wir Sport und Kochen haben, und jetzt werden

04:09.530 --> 04:12.460
Sie sehen, dass wir zwei Elemente als Beschreibungstext

04:12.460 --> 04:15.990
haben, oder mit einem leeren Array natürlich, in diesem Fall, wenn

04:15.990 --> 04:18.660
ich das speichere, haben wir keinen Wert, aber wir

04:18.660 --> 04:22.500
werden nicht in der Lage sein, dies zum Beispiel mit einer Zahl aufzurufen,

04:22.500 --> 04:24.103
weil eine Zahl keine Längeneigenschaft

04:24.103 --> 04:28.090
hat und deshalb funktioniert dies nicht.

04:28.090 --> 04:32.900
Hier haben wir also wieder unsere generische Funktion.

04:32.900 --> 04:35.043
Die Idee ist ähnlich wie bei der vorherigen Funktion.

04:35.043 --> 04:38.680
Wir möchten die Art der Daten, die wir hier erhalten, etwas unspezifisch

04:38.680 --> 04:40.540
gestalten. Es ist uns egal, ob es sich

04:40.540 --> 04:43.180
um eine Zeichenkette, ein Array oder etwas anderes mit einer Längeneigenschaft

04:43.180 --> 04:45.610
handelt. Wir interessieren uns nur dafür,

04:45.610 --> 04:47.930
dass es eine Längeneigenschaft hat, und dann wollen wir etwas

04:47.930 --> 04:49.980
damit machen, weil wir uns auf die Längeneigenschaft

04:49.980 --> 04:51.970
in unserem Code verlassen, also müssen wir garantieren,

04:51.970 --> 04:53.540
dass wir das haben, aber ansonsten haben

04:53.540 --> 04:55.370
wir wirklich kein Interesse daran, welche Art

04:55.370 --> 04:59.490
von Daten wir hier bekommen.

04:59.490 --> 04:59.490
Ich

04:59.490 --> 05:01.820
möchte dies nicht auf eine Zeichenkette oder ein Array beschränken, und

05:01.820 --> 05:04.220
ich möchte nicht eine Reihe von Überladungen erstellen, um all die verschiedenen

05:04.220 --> 05:05.830
möglichen Typen zu behandeln.

05:05.830 --> 05:08.124
Ich möchte hier auch keinen sehr langen Union-Typ

05:08.124 --> 05:10.970
erstellen, weil ich Typen vergessen könnte, die eine Längeneigenschaft

05:10.970 --> 05:13.610
haben, oder wenn ich mein eigenes Objekt mit einer Längeneigenschaft

05:13.610 --> 05:16.220
erstelle, könnte ich es nicht zulassen, wenn ich dies

05:16.220 --> 05:18.640
hier auf den Typ String und Array oder etwas Ähnliches

05:18.640 --> 05:21.580
beschränke.

05:21.580 --> 05:23.500
Ich möchte also flexibler sein, und mit

05:23.500 --> 05:25.380
generischen Typen können wir das sein,

05:25.380 --> 05:27.550
wir kümmern uns nicht um den genauen Typ.

05:27.550 --> 05:30.080
Hier interessiert mich dank der Einschränkung

05:30.080 --> 05:33.363
nur die Tatsache, dass sie eine Längeneigenschaft hat.
