WEBVTT

00:02.270 --> 00:04.040
Instructor: Así que echamos un vistazo

00:04.040 --> 00:05.900
a Lodash, una biblioteca de terceros que

00:05.900 --> 00:08.270
se construye con JavaScript para JavaScript.

00:08.270 --> 00:11.730
También encuentras ciertas librerías de terceros que realmente

00:11.730 --> 00:13.287
adoptan las características

00:13.287 --> 00:16.480
de type script y te dan una nueva forma de escribir código

00:16.480 --> 00:18.360
que funciona porque estás trabajando

00:18.360 --> 00:21.230
con type script.

00:21.230 --> 00:24.950
Un ejemplo es el transformador de clases, un ejemplo aún mejor

00:24.950 --> 00:28.067
es el validador de clases; veremos ambos aquí.

00:28.067 --> 00:31.360
Pero empecemos con el transformador de clase.

00:31.360 --> 00:35.870
Digamos que en nuestro proyecto aquí, en realidad tengo un modelo, un modelo de

00:35.870 --> 00:38.150
datos, vamos a llamarlo 'producto'.

00:38.150 --> 00:41.170
Ahora lo nombraré producto. modelo. ts, pero puedes

00:41.170 --> 00:43.820
nombrar este archivo como quieras.

00:43.820 --> 00:48.820
Mi idea es que en este archivo defina una clase para un producto.

00:49.420 --> 00:52.180
Así que describo cómo debe ser un producto.

00:52.180 --> 00:55.550
Por ejemplo, que tenga un título que es una cadena y un

00:55.550 --> 00:59.070
precio que es un número y luego añado una función constructora

00:59.070 --> 01:02.120
donde se puedan inicializar ambos.

01:02.120 --> 01:07.120
Así que la cadena, añadir el precio y luego me dijo que este título igual

01:07.210 --> 01:09.360
a 't' y este precio igual a 'p'.

01:09.360 --> 01:10.810
Y, por supuesto, podríamos haber

01:10.810 --> 01:12.980
utilizado el atajo de inicialización en el que sólo

01:12.980 --> 01:14.423
utilizamos el constructor.

01:16.150 --> 01:20.400
Entonces digamos que siempre tenemos un método, obtener

01:20.400 --> 01:25.400
información donde devuelvo un array digamos donde el primer elemento

01:25.950 --> 01:30.850
es el título y el segundo elemento en realidad es una cadena donde

01:30.850 --> 01:35.770
tengo el signo de dólares y luego se inyecta en esta cadena, este

01:35.770 --> 01:37.833
precio.

01:39.030 --> 01:43.030
Así que un modelo muy simple aquí, una clase muy simple.

01:43.030 --> 01:45.940
Y ahora podemos, por supuesto, utilizar esta clase,

01:45.940 --> 01:49.590
si quieres, en la aplicación. ts así que ahí me desharé de Lodash y en su

01:49.590 --> 01:54.590
lugar importaré el producto de . /producto. Ahora, para que usted necesita para

01:56.200 --> 01:58.920
asegurarse de que este en el modelo de producto que realmente

01:58.920 --> 02:01.010
exportar esta clase de lo contrario no se

02:01.010 --> 02:03.860
puede importar y aquí tenemos que exportar el producto como

02:03.860 --> 02:05.800
este porque estoy usando una exportación

02:05.800 --> 02:07.890
con nombre aquí mediante la adición de la

02:07.890 --> 02:11.950
palabra clave de exportación justo en frente de la clase.

02:11.950 --> 02:16.497
Así que aquí, por supuesto, podemos crear un nuevo producto,

02:18.150 --> 02:23.150
un libro que cuesta 12. 99 y a partir de ahí registro de la consola p1

02:24.080 --> 02:28.190
obtener información y en realidad debemos registrar esta matriz.

02:28.190 --> 02:31.390
Así que si ahora ejecutamos npm start aquí, nuestro

02:31.390 --> 02:34.250
web pack dev se inicia y deberíamos ver este bonito

02:34.250 --> 02:37.340
array con información sobre este libro.

02:37.340 --> 02:39.463
Así que si recargo aquí, aquí está.

02:40.630 --> 02:43.170
Ahora no es demasiado elegante, por supuesto, que funciona,

02:43.170 --> 02:44.930
pero eso no es nada nuevo.

02:44.930 --> 02:47.270
Ahora un escenario común en las aplicaciones

02:47.270 --> 02:49.610
más grandes es que usted puede ser la descarga

02:49.610 --> 02:52.150
de algunos datos, digamos de un servidor, que

02:52.150 --> 02:54.490
está obteniendo datos de un servidor de back-end

02:54.490 --> 02:58.370
y que el servidor le devuelve algunos datos json que usted pasa que luego

02:58.370 --> 03:01.560
podría ser una lista de productos.

03:01.560 --> 03:05.520
Así que aquí podríamos tener productos que obtenemos del servidor donde tenemos

03:05.520 --> 03:10.520
un título, una alfombra y un precio, 29. 99 y luego también tenemos

03:13.047 --> 03:18.047
este libro, así que título, libro y allí un

03:18.120 --> 03:22.830
precio de 10. 99, digamos.

03:22.830 --> 03:25.310
Así que eso es una matriz de datos muy simple

03:25.310 --> 03:27.730
que luego obtenemos del back end.

03:27.730 --> 03:30.590
Ahora bien, estos son, por supuesto, objetos de JavaScript,

03:30.590 --> 03:33.730
pero no son instancias de nuestro modelo de producto.

03:33.730 --> 03:37.220
Y eso es un escenario típico donde se obtienen los datos como json

03:37.220 --> 03:40.990
no tiene datos adjuntos como a qué función del constructor que se enfrenta

03:40.990 --> 03:42.850
codificado pertenece.

03:42.850 --> 03:46.770
Tu servidor sí lo sabe y además json es un formato que sólo

03:46.770 --> 03:51.230
transmite datos básicos, no tienes meta datos ricos a los objetos

03:51.230 --> 03:53.540
que se adjuntan ahí.

03:53.540 --> 03:56.300
O al menos tendría que hacerlo manualmente.

03:56.300 --> 04:00.120
Así que, en otras palabras, los productos que obtenemos aquí son objetos

04:00.120 --> 04:03.310
que no tienen un método de obtención de información.

04:03.310 --> 04:08.230
Ahora bien, tradicionalmente, si ahora quisieras convertir esto en

04:08.230 --> 04:12.680
instancias de tu modelo, tendrías que hacerlo manualmente.

04:12.680 --> 04:17.680
Usted podría tener sus productos cargados que luego, digamos que utiliza productos,

04:19.260 --> 04:22.770
llama al método de mapa y en cada producto en esa matriz

04:22.770 --> 04:25.680
a continuación, devolver el nuevo producto

04:25.680 --> 04:30.680
para prod. título y prod. precio y a partir de ahí tendríamos

04:34.330 --> 04:36.660
un array lleno de instancias de la función

04:36.660 --> 04:40.230
constructora del producto real y entonces podríamos realmente

04:40.230 --> 04:43.163
hacer un bucle a través de eso, productos cargados y

04:44.330 --> 04:51.083
luego en allí por ejemplo la consola log prod.

04:51.083 --> 04:51.083
obtener información.

04:52.150 --> 04:56.010
Así es como podríamos transformar manualmente un array o también

04:56.010 --> 05:00.070
un único objeto Vanilla JavaScript sin nombre en una instancia de una

05:00.070 --> 05:02.880
función constructora específica y, por tanto,

05:02.880 --> 05:05.000
obtendríamos esta salida.

05:05.000 --> 05:07.220
Ahora bien, hacer esto manualmente es engorroso.

05:07.220 --> 05:09.590
Es un montón de pasos adicionales aquí, esto

05:09.590 --> 05:12.710
es sólo una simple transformación, por supuesto.

05:12.710 --> 05:16.690
Ahí es donde el paquete transformador de clases puede ayudarnos.

05:16.690 --> 05:19.330
Lo hace muy, muy sencillo.

05:19.330 --> 05:22.390
Allí, también definimos una clase en el tipo de script

05:22.390 --> 05:25.010
en nuestro caso aquí, entonces podríamos estar

05:25.010 --> 05:29.340
recibiendo algunos datos, digamos de un servidor y luego en realidad podemos

05:29.340 --> 05:32.430
llamar a un simple método de conveniencia y convertirá

05:32.430 --> 05:36.893
automáticamente nuestros datos en los modelos correctos.

05:38.100 --> 05:40.030
Ahora para eso, vamos a ejecutar

05:40.030 --> 05:44.840
primero un nmp install class transformer--save, así y una vez que esto terminó

05:45.730 --> 05:47.820
vamos a ejecutar npm install reflect-metadata--save

05:47.820 --> 05:50.350
Un paquete, este paquete al final depende

05:51.451 --> 05:54.470
de.

05:54.470 --> 05:57.460
Así que aquí vamos a importar esto también y, a continuación,

05:57.460 --> 06:02.460
como también nos instruye aquí en las instrucciones de configuración aquí, importar reflejar los

06:02.890 --> 06:11.410
metadatos en sus archivos de entrada de ruta, en mi caso aquí en la aplicación.

06:11.410 --> 06:11.410
Importo

06:11.410 --> 06:14.970
esta biblioteca de terceros que acabamos de instalar como una dependencia de nuestra biblioteca.

06:14.970 --> 06:17.210
Ahora que en realidad la palabra no js pasos y por

06:17.210 --> 06:18.610
lo tanto podemos saltar esta.

06:18.610 --> 06:20.180
En el navegador todavía tenemos

06:20.180 --> 06:24.780
que instalar los mismos paquetes sin embargo y la adición de esta importación aquí está

06:24.780 --> 06:26.880
bien porque estamos utilizando el paquete

06:26.880 --> 06:30.090
web y por lo tanto ahora realmente bueno para ir.

06:30.090 --> 06:35.090
Y ahora podemos importar algo de la clase transformer

06:36.290 --> 06:40.210
y ese algo es el método 'plain to class'.

06:40.210 --> 06:42.630
Este paquete también tiene un par de métodos más.

06:42.630 --> 06:45.200
Puede obtener más información sobre ellos aquí en los documentos oficiales.

06:45.200 --> 06:49.060
Pero 'plain to class' es el método principal.

06:49.060 --> 06:54.060
Puede utilizarlo aquí para establecer sus productos cargados, por ejemplo.

06:55.150 --> 06:58.230
En lugar de hacer esto manualmente aquí como lo hicimos antes,

06:58.230 --> 07:01.480
podemos establecer los productos cargados igual a la llanura a la

07:01.480 --> 07:03.760
clase y ahora pasar dos argumentos aquí.

07:03.760 --> 07:08.070
El primer argumento es la clase a la que queremos convertirlo.

07:08.070 --> 07:10.190
En mi caso, el producto.

07:10.190 --> 07:12.700
Y no lo instancié ni lo llamé,

07:12.700 --> 07:15.560
sólo apunté a esa clase.

07:15.560 --> 07:19.460
El segundo argumento son los datos que queremos transformar.

07:19.460 --> 07:23.520
Así que, en mi caso, se trata de productos.

07:23.520 --> 07:25.840
Y ahora lo que hará este paquete

07:25.840 --> 07:28.100
es ir sobre este array transformando

07:28.100 --> 07:31.034
cada objeto Vanilla JavaScript de aquí

07:31.034 --> 07:34.090
a una instancia de esta clase.

07:34.090 --> 07:37.830
Así que si ahora guardamos esto y ejecutamos npm start de nuevo, la página

07:37.830 --> 07:40.330
web que inicia el servidor arranca de nuevo y debería

07:40.330 --> 07:43.270
construir este proyecto sin errores.

07:43.270 --> 07:46.540
Si vuelvo a cargar la página, obtengo la misma salida que antes

07:46.540 --> 07:49.530
pero, por supuesto, con menos código por nuestra parte porque

07:49.530 --> 07:51.870
estamos utilizando este paquete.

07:51.870 --> 07:53.403
Y lo asombroso de este paquete

07:53.403 --> 07:57.070
es que funciona tan bien aquí porque se basa en el script de

07:57.070 --> 08:01.230
tipo y utiliza el script de tipo y utiliza el hecho de que tenemos una

08:01.230 --> 08:04.280
clase allí a la que podemos apuntar.

08:04.280 --> 08:08.730
Pero también para ser honesto, este paquete funciona particularmente bien con el script

08:08.730 --> 08:10.900
de tipo, pero no utiliza una característica

08:10.900 --> 08:12.600
específica de script de tipo.

08:12.600 --> 08:16.630
Las clases, por ejemplo, también existen en Vanilla JavaScript.

08:16.630 --> 08:20.170
Así que, aunque esto está desarrollado principalmente para el tipo

08:20.170 --> 08:23.610
de script, en realidad también funciona en Vanilla JavaScript.

08:23.610 --> 08:26.633
Sin embargo, esto no será así para el próximo paquete.
