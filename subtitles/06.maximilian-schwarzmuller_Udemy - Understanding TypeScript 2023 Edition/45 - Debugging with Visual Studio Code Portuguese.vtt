WEBVTT

00:02.170 --> 00:03.003
Instrutor: Então agora

00:03.003 --> 00:04.760
que temos um projeto devidamente configurado,

00:04.760 --> 00:08.130
vamos mergulhar um pouco mais fundo em como você pode depurar seu projeto ou como você

00:08.130 --> 00:10.500
pode ter um grande fluxo de desenvolvimento.

00:10.500 --> 00:13.560
Eu lhes mostro minha IDE básica montada no início

00:13.560 --> 00:14.575
deste curso.

00:14.575 --> 00:17.750
Certifique-se realmente de ter instalado as extensões corretas.

00:17.750 --> 00:22.750
Lá, para o TypeScript, se resume ao ESLint que pode ajudá-lo

00:22.980 --> 00:26.410
a imprimir seu código TypeScript.

00:26.410 --> 00:29.310
Assim, com a melhoria da qualidade do código, embora

00:29.310 --> 00:31.620
você possa precisar de configuração adicional

00:31.620 --> 00:33.900
para que a ESLint tenha um efeito.

00:33.900 --> 00:36.310
Ele pode ajudá-lo em projetos mais avançados

00:37.220 --> 00:38.570
ainda mais interessantes

00:38.570 --> 00:40.818
do que isso, você quer realmente usar

00:40.818 --> 00:43.370
Prettier para formatar automaticamente

00:43.370 --> 00:45.770
seu código e ter um código bem formatado

00:45.770 --> 00:49.870
e talvez você queira dar uma tentativa ao Debugger for Chrome porque

00:49.870 --> 00:53.140
isso permite que você depure seus arquivos TypeScript

00:53.140 --> 00:55.810
mesmo de dentro do código VS através do Chrome,

00:55.810 --> 00:59.440
mas sem usar as ferramentas Chrome Dev.

00:59.440 --> 01:01.820
É claro, você pode usá-las tão bem quanto

01:01.820 --> 01:02.653
aprendeu.

01:02.653 --> 01:05.154
Se você habilitar o SourceMaps aqui, o que você

01:05.154 --> 01:07.160
pode, é claro, fazer sempre, você obtém

01:07.160 --> 01:09.240
estes arquivos traduzidos também lá,

01:09.240 --> 01:10.429
o que é muito bom.

01:10.429 --> 01:14.170
Mas você também pode usar o Código VS.

01:14.170 --> 01:15.960
Você pode colocar pontos de

01:15.960 --> 01:17.340
parada aqui, digamos

01:17.340 --> 01:19.842
no clickHandler e agora para lançar seus

01:19.842 --> 01:24.842
arquivos aqui através do VS Code, você precisa habilitar o sourceMaps também,

01:26.100 --> 01:28.690
mas ainda poderemos usar o VS Code em vez

01:28.690 --> 01:30.950
do browser Dev Tools.

01:30.950 --> 01:34.570
Portanto, habilite o SourceMaps, coloque seu ponto

01:34.570 --> 01:38.930
de parada e depois vá para Debug, Start Debugging.

01:38.930 --> 01:40.320
Agora, a primeira vez que você

01:40.320 --> 01:42.170
executar isto, ele deve lhe pedir pelo

01:42.170 --> 01:45.350
ambiente e lá com aquele depurador para extensão Chrome instalado,

01:45.350 --> 01:47.850
você deve poder escolher o Chrome.

01:47.850 --> 01:49.960
Agora vai para uma laucnh. json file onde você

01:49.960 --> 01:53.200
configura como deve lançar isso e lá você deve apontar

01:53.200 --> 01:56.740
para o localhost:3000 porque é lá que nosso servidor de desenvolvimento

01:56.740 --> 01:59.330
está rodando e, é claro, esse processo, então

01:59.330 --> 02:04.220
o processo de início npm deve estar pronto e funcionando.

02:04.220 --> 02:06.910
Para apontar para localhost:3000 ali e como um

02:06.910 --> 02:09.740
webRoot, você pode deixar esse local aqui, o que significa

02:09.740 --> 02:11.890
que esta pasta de projeto é assumida como

02:11.890 --> 02:13.780
o anfitrião de seus arquivos, que

02:13.780 --> 02:17.120
é o caso e agora compilar seu código para que os sourceMaps

02:17.120 --> 02:19.780
também sejam gerados após configurar o sourceMaps

02:19.780 --> 02:22.470
para verdadeiro, de modo que agora temos estes

02:22.470 --> 02:25.290
no código JavaScript.

02:25.290 --> 02:26.870
Depois com seu ponto de parada adicionado aqui

02:26.870 --> 02:28.400
e seu lançamento. json configurado,

02:28.400 --> 02:30.400
vamos fazer a depuração aqui.

02:30.400 --> 02:32.140
Comece agora a depurar de verdade

02:32.140 --> 02:34.830
e abrirá uma nova aba agora automaticamente.

02:34.830 --> 02:36.020
Esta aba será fechada sempre

02:36.020 --> 02:38.730
que você sair do processo de depuração ou se você fechar

02:38.730 --> 02:41.940
a aba, o processo de depuração será abandonado.

02:41.940 --> 02:44.590
Então agora com isso, você entra nesta visão de depuração

02:44.590 --> 02:46.790
aqui em VS Code onde você pode rastrear variáveis,

02:46.790 --> 02:48.230
observar certas expressões

02:48.230 --> 02:50.120
e ver a pilha de chamadas atual e se você

02:50.120 --> 02:51.910
agora clicar em Click Me, você deve

02:51.910 --> 02:54.120
ser levado de volta ao editor e pausas de

02:54.120 --> 02:56.590
execução de código em seu ponto de parada no arquivo

02:56.590 --> 03:01.410
TypeScript e agora você pode caminhar pelo arquivo dela, inspecionar valores locais

03:01.410 --> 03:04.540
para esta palavra-chave ou para a variável de mensagem,

03:04.540 --> 03:07.120
por exemplo, variáveis em todo o script que você

03:07.120 --> 03:09.750
pode ter e variáveis globais que você tem acesso

03:09.750 --> 03:13.320
a objetos globais.

03:13.320 --> 03:15.560
Você pode observar certas expressões

03:15.560 --> 03:19.290
como mensagem + múltiplos pontos de exclamação e bem,

03:19.290 --> 03:22.690
então você pode sempre rastrear o valor que está

03:22.690 --> 03:27.483
aqui nesta janela se você quiser que isso funcione.

03:27.483 --> 03:30.480
E você pode ver a pilha de chamadas de função atual, por

03:30.480 --> 03:33.010
exemplo, que ocorreria no clickHandler e agora

03:33.010 --> 03:34.710
você pode passar através de seu

03:34.710 --> 03:37.590
código com estes controles para passar para o próximo

03:37.590 --> 03:39.800
passo, pulando sobre a próxima chamada

03:39.800 --> 03:41.500
de função, entrando na chamada

03:41.500 --> 03:43.827
de função ou saindo da chamada de função atual

03:43.827 --> 03:46.710
e a pilha de chamadas, claro, aqui irá se ajustar de

03:46.710 --> 03:49.280
acordo com isso e com isso, pode ignorar esta

03:49.280 --> 03:51.920
coisa do navegador aqui, com isso, você pode sempre

03:51.920 --> 03:56.210
retomar a execução do código clicando no botão play e só pausar quando chegar

03:56.210 --> 04:00.290
ao seu ponto de parada na próxima vez.

04:00.290 --> 04:02.080
Assim, é assim que você pode depurar o código.

04:02.080 --> 04:04.050
Você pode remover um ponto de parada clicando sobre ele.

04:04.050 --> 04:05.910
É assim que você pode depurar código

04:05.910 --> 04:07.310
de dentro do VS Code com a

04:07.310 --> 04:09.728
ajuda das ferramentas de depuração embutidas,

04:09.728 --> 04:12.450
a extensão Chrome Debugger, configuração derivada

04:12.450 --> 04:15.470
e soureMaps que são configurados em sua configuração

04:15.470 --> 04:17.743
TypeScript.
