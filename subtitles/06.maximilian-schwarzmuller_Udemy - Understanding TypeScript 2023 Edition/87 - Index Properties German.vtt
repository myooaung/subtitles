WEBVTT

00:02.110 --> 00:03.890
Kursleiter: Nach all diesen Funktionen,

00:03.890 --> 00:07.820
bei denen wir sozusagen mit den Typen selbst gearbeitet haben, bei denen

00:07.820 --> 00:10.340
wir Typen geprüft haben, Typen kalkuliert haben,

00:10.340 --> 00:13.880
wollen wir nun zu den Funktionen zurückkehren, die uns helfen, flexiblen

00:13.880 --> 00:16.110
Code zu fahren.

00:16.110 --> 00:17.930
Natürlich schreiben die beiden Typen noch.

00:17.930 --> 00:20.150
Es ist zwar typescript, aber wir konzentrieren

00:20.150 --> 00:23.520
uns nicht so sehr auf die Typen, sondern wir können sie verwalten.

00:23.520 --> 00:25.830
Dazu möchte ich mit Index-Typen beginnen, einer

00:25.830 --> 00:29.040
Funktion, die es uns ermöglicht, Objekte zu erstellen, die hinsichtlich

00:29.040 --> 00:31.150
der Eigenschaften, die sie enthalten können,

00:31.150 --> 00:33.010
flexibler sind.

00:33.010 --> 00:34.485
Und was meine ich damit?

00:34.485 --> 00:36.813
Nehmen wir an, Sie schreiben eine Anwendung,

00:36.813 --> 00:39.680
in der Sie eine Benutzereingabe validieren.

00:39.680 --> 00:41.810
Sie haben also mehrere Eingabefelder, und

00:41.810 --> 00:44.603
je nachdem, was der Benutzer dort eingibt und um welches

00:44.603 --> 00:46.682
Feld es sich handelt, möchten Sie vielleicht

00:46.682 --> 00:50.490
verschiedene Fehlermeldungen speichern und eventuell anzeigen.

00:50.490 --> 00:52.520
Wenn es sich zum Beispiel um ein E-Mail-Feld handelt,

00:52.520 --> 00:54.360
möchten Sie überprüfen, wer in der E-Mail steht,

00:54.360 --> 00:55.590
und wenn dies nicht der Fall ist,

00:55.590 --> 00:59.830
möchten Sie eine entsprechende Fehlermeldung in den Fehler-Container einfügen.

00:59.830 --> 01:01.133
Damit fange ich also an.

01:01.133 --> 01:06.133
Ich werde meinen Schnittstellenfehler-Container hier haben.

01:07.570 --> 01:09.530
Und das sollte ein Objekt sein, daher

01:09.530 --> 01:11.400
verwende ich hier eine Schnittstelle,

01:11.400 --> 01:14.090
aber es sollte flexibel sein, was es enthält.

01:14.090 --> 01:15.680
Letztlich ist mein Ziel, dass

01:15.680 --> 01:17.692
wir damit Objekte behandeln können, bei

01:17.692 --> 01:20.782
denen wir eine Fehlerkennung haben, die im Idealfall das Eingabefeld

01:20.782 --> 01:23.700
sein könnte, zu dem der Fehler gehört.

01:23.700 --> 01:26.581
Zum Beispiel eine E-Mail. Und dann eine Fehlermeldung,

01:26.581 --> 01:31.581
keine gültige E-Mail. Und dann haben wir noch eine weitere Eigenschaft.

01:32.130 --> 01:35.610
Sagen wir, der Benutzername und ein Fehlerstring

01:35.610 --> 01:37.150
könnten das Eingabefeld

01:37.150 --> 01:39.280
speichern, wenn das Eingabefeld

01:39.280 --> 01:41.611
falsch ist.

01:41.611 --> 01:45.770
Muss mit einem Zeichen beginnen.

01:45.770 --> 01:49.170
So etwas sollte in diesem Objekt gespeichert werden.

01:49.170 --> 01:51.992
Das Problem dabei ist, dass ich im Voraus nicht weiß,

01:51.992 --> 01:55.320
welche genauen Eigenschaftsnamen wir dort haben werden.

01:55.320 --> 01:58.021
Man könnte sagen, gut, wir haben E-Mail und Benutzernamen,

01:58.021 --> 02:01.650
aber ich möchte, dass dies ein flexibler Container ist.

02:01.650 --> 02:03.150
Ich möchte es in jedem Formular

02:03.150 --> 02:05.350
auf meiner Webseite verwenden können.

02:05.350 --> 02:07.560
Und ich könnte verschiedene Formulare mit verschiedenen

02:07.560 --> 02:10.157
Eingaben mit verschiedenen Bezeichnern haben.

02:10.157 --> 02:12.741
Ich möchte mich also nicht nur auf unsere

02:12.741 --> 02:16.150
E-Mail- und Benutzernamen-Fehler beschränken.

02:16.150 --> 02:18.461
Und außerdem, selbst wenn wir immer nur E-Mail-

02:18.461 --> 02:20.859
und Benutzernamen-Eingaben hatten und wir

02:20.859 --> 02:23.291
nur Fehler für diese speichern wollen.

02:23.291 --> 02:27.461
Was tun wir, wenn nur die E-Mail ungültig ist und nicht der Benutzername?

02:27.461 --> 02:30.912
Dann könnten wir natürlich in diesem Objekt null als Wert für einen

02:30.912 --> 02:34.421
Benutzernamen speichern, aber ich möchte es einfach weglassen.

02:34.421 --> 02:37.232
Haben wir also ein Objekt, das nur Eigenschaften

02:37.232 --> 02:40.419
für Eingaben enthält, bei denen ein Fehler auftritt?

02:40.419 --> 02:42.960
Wir können dieses Objekt also auch mit einer Viererschleife

02:42.960 --> 02:46.260
durchlaufen, um alle Fehler auszulesen, die wir zum Beispiel bekommen

02:46.260 --> 02:48.200
haben, und haben keine Eigenschaften darin,

02:48.200 --> 02:51.112
die nicht wirklich einen Fehler speichern.

02:51.112 --> 02:53.261
Lange Rede, kurzer Sinn, ich brauche ein

02:53.261 --> 02:56.861
Objekt, bei dem ich mir über den Wertetyp ziemlich im Klaren bin.

02:56.861 --> 03:00.260
Es sollte eine Zeichenfolge sein, aber ich weiß nicht, wie viele

03:00.260 --> 03:02.190
Eigenschaften ich haben werde und

03:02.190 --> 03:05.320
welchen Namen die Eigenschaften haben werden.

03:05.320 --> 03:08.171
Und für ein solches Szenario können wir Index-Typen verwenden.

03:08.171 --> 03:10.760
Sie definieren einen Indextyp, indem Sie hier eckige Klammern verwenden.

03:10.760 --> 03:14.730
Denken Sie daran, dass wir hier normalerweise einen Eigenschaftsnamen schreiben würden, aber jetzt

03:14.730 --> 03:16.280
verwenden wir eckige Klammern.

03:16.280 --> 03:21.280
Dann geben Sie einen Namen Ihrer Wahl ein, z. B. Schlüssel oder Stütze.

03:23.581 --> 03:28.581
Dann ein Doppelpunkt. Und dann die Wertart der Eigenschaft.

03:29.010 --> 03:30.010
Und dann ein Objekt.

03:30.010 --> 03:33.760
Sie können keine Zeichenketten, Zahlen oder Symbole als Eigenschaft haben.

03:33.760 --> 03:37.660
Sie können hier zum Beispiel nicht boolesch verwenden. Das ist nicht erlaubt.

03:37.660 --> 03:40.504
Aber Sie können hier String verwenden.

03:40.504 --> 03:43.190
Damit will ich einfach sagen, dass jedes Objekt,

03:43.190 --> 03:46.330
das ich später auf der Grundlage dieser Fehler-Container-Schnittstelle

03:46.330 --> 03:51.083
konstruiere, Eigenschaften haben muss, die Strings sind.

03:52.120 --> 03:53.928
Der Benutzername zum Beispiel wäre eine gültige Zeichenkette,

03:53.928 --> 03:55.899
auch wenn ich ihn nicht in Anführungszeichen setze.

03:55.899 --> 03:59.980
Dann fügen wir einen Doppelpunkt hinzu. Und dann der Wertetyp, der String

03:59.980 --> 04:01.629
ist. Damit will ich sagen,

04:01.629 --> 04:04.320
dass ich den genauen Namen der Eigenschaft nicht kenne.

04:04.320 --> 04:07.620
Ich kenne auch die Anzahl der Grundstücke nicht.

04:07.620 --> 04:10.608
Ich weiß nur, dass jede Eigenschaft, die zu diesem Objekt

04:10.608 --> 04:13.459
hinzugefügt wird, das auf einem Fehler-Container basiert,

04:13.459 --> 04:16.959
einen Eigenschaftsnamen haben muss, der als String interpretiert

04:16.959 --> 04:20.640
werden kann, und der Wert der Eigenschaft muss ebenfalls ein String

04:20.640 --> 04:23.080
sein. Das ist es, was ich hier sage.

04:23.080 --> 04:28.080
Damit können wir nun auch noch vordefinierte Eigenschaften hinzufügen, allerdings

04:29.560 --> 04:31.906
nur, wenn sie vom gleichen Typ wie diese

04:31.906 --> 04:35.339
hier sind. Wir könnten also eine ID hinzufügen, die ein String ist.

04:35.339 --> 04:39.760
Und dann muss jedes Objekt, das wir erstellen und das sich an diese Schnittstelle hält,

04:39.760 --> 04:43.360
eine ID-Eigenschaft haben und kann so viele andere Eigenschaften hinzufügen,

04:43.360 --> 04:47.370
wie es will, aber wir können ID zum Beispiel nicht auf eine Zahl setzen, weil wir hier

04:47.370 --> 04:49.277
einen Index-Typ haben.

04:49.277 --> 04:53.033
Das ist also eine Einschränkung, die wir haben, wenn wir ein solches Objekt bauen.

04:55.240 --> 04:56.550
Was ist nun die Konsequenz?

04:56.550 --> 05:00.080
Jetzt können wir zum Beispiel eine Fehlertasche erstellen,

05:00.080 --> 05:02.390
die vom Typ error container ist, also ein

05:02.390 --> 05:05.150
Objekt, und sie wäre so gültig, weil wir keine Eigenschaften

05:05.150 --> 05:07.440
hinzufügen müssen.

05:07.440 --> 05:10.340
Das ist alles, was gilt. Aber natürlich können wir jetzt etwas hinzufügen.

05:10.340 --> 05:13.380
Zum Beispiel: E-Mail ist keine gültige E-Mail.

05:13.380 --> 05:15.780
Und das ist in Ordnung. Es wäre nicht in Ordnung, wenn

05:15.780 --> 05:17.093
ich hier stattdessen eine Zahl

05:17.093 --> 05:19.133
zuweisen würde, weil wir sagen, dass jede Eigenschaft

05:19.133 --> 05:23.001
einen String-Werttyp benötigt. Wir müssen hier also eine Zeichenkette verwenden.

05:23.001 --> 05:25.940
Wenn ich hier eine Zahl verwende, würde das funktionieren, da diese

05:25.940 --> 05:28.610
auch als Zeichenkette interpretiert werden kann.

05:28.610 --> 05:30.883
Ich kann hier also auch eine Zahl als Schlüsseltyp verwenden,

05:30.883 --> 05:33.031
wenn ich das möchte. Ich bin ziemlich frei darin,

05:33.031 --> 05:35.981
was ich hier verwende. Wenn Sie den Typ der

05:35.981 --> 05:40.981
Stütze in eine Nummer ändern würden, könnten Sie das tun und es wäre

05:42.130 --> 05:44.810
in Ordnung. Das ist aber nicht der Fall,

05:44.810 --> 05:46.470
denn E-Mail ist keine Nummer.

05:46.470 --> 05:48.170
Dies kann nicht in eine Zahl umgewandelt werden.

05:48.170 --> 05:51.550
Sie kann wie eine Zeichenkette behandelt werden, aber nicht wie eine Zahl.

05:51.550 --> 05:54.870
Auf diese Weise steuern Sie also, welche Art von Eigenschaften oder

05:54.870 --> 05:56.990
welche Eigenschaftsnamen Sie zulassen.

05:56.990 --> 05:59.493
Und hier habe ich eine, um String-Eigenschaftsnamen zu ermöglichen.

05:59.493 --> 06:02.264
Alles, was in eine Zeichenkette umgewandelt werden kann, ist also ein

06:02.264 --> 06:04.740
gültiger Eigenschaftsname. Und dann muss der Wert auch

06:04.740 --> 06:06.413
eine Zeichenkette sein.

06:06.413 --> 06:08.021
Und wie ich schon sagte, können

06:08.021 --> 06:10.632
wir hier natürlich mehrere Werte hinzufügen,

06:10.632 --> 06:12.830
mehrere Werte sollte ich sagen.

06:12.830 --> 06:17.263
Muss mit einem Großbuchstaben beginnen.

06:18.170 --> 06:21.220
Dies ist nun also eine solche Fehlertasche, die wir mit Hilfe

06:21.220 --> 06:22.722
des Fehler-Containers erstellen

06:22.722 --> 06:25.392
können, was uns diese zusätzliche Flexibilität gibt,

06:25.392 --> 06:27.522
dass wir nicht im Voraus wissen müssen, welche

06:27.522 --> 06:30.740
Eigenschaftsnamen wir verwenden wollen und wie viele Eigenschaften

06:30.740 --> 06:32.653
wir benötigen.
