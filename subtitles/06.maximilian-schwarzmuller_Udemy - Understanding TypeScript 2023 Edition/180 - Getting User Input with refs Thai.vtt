WEBVTT

00:02.240 --> 00:04.870
ผู้นำเสนอ: ดังนั้นเราจึงเพิ่มองค์ประกอบแรกของเรา

00:04.870 --> 00:06.090
มาเพิ่มอันที่สองกันเถอะ

00:06.090 --> 00:09.970
ใหม่สิ่งที่ต้องทำ tsx เป็นชื่อไฟล์

00:09.970 --> 00:13.060
แน่นอนว่าเรานำเข้าปฏิกิริยาจากปฏิกิริยา

00:13.060 --> 00:16.170
และแน่นอนว่าคุณสามารถสร้างส่วนประกอบตามคลาสได้ด้วย

00:16.170 --> 00:18.270
นอกจากนี้ยังได้รับการสนับสนุนอย่างเต็มที่

00:18.270 --> 00:22.410
แต่ฉันจะใช้รูปแบบการทำงานที่ทันสมัยนี้เท่านั้น

00:22.410 --> 00:26.180
อีกครั้งเรามีฟังก์ชันที่จะประกอบเป็นส่วนประกอบในภายหลัง

00:26.180 --> 00:29.258
และฉันส่งออก NewTodo เป็นค่าเริ่มต้น และเพิ่มการกำหนดประเภท

00:29.258 --> 00:34.410
และกำหนดให้ชัดเจนว่านี่จะเป็นส่วนประกอบของฟังก์ชันประเภท

00:34.410 --> 00:35.800
และแน่นอนว่าที่นี่

00:35.800 --> 00:38.220
เราขาดโค้ด jsx ที่ส่งคืนบางส่วน

00:38.220 --> 00:43.780
ดังนั้นที่นี่ฉันจะส่งคืนฟอร์มที่ฉันต้องการเพิ่มการควบคุมทั้งหมดที่จำเป็นเพื่อให้ผู้ใช้เพิ่มสิ่งที่ต้องทำใหม่

00:45.060 --> 00:48.650
ตอนนี้มาเพิ่มส่วนประกอบสิ่งที่ต้องทำใหม่นี้ในส่วนประกอบของแอป

00:48.650 --> 00:58.095
ดังนั้นที่นี่เราสามารถนำเข้า NewTodo จาก. /components/NewTodo และเพิ่มที่นี่แทนความคิดเห็น

00:58.095 --> 01:00.520
สิ่งที่ต้องทำใหม่เป็นส่วนประกอบที่ปิดตัวเอง

01:00.520 --> 01:02.790
เนื่องจากตอนนี้เราไม่ได้ส่งผ่านสิ่งใดๆ

01:02.790 --> 01:04.750
ระหว่างแท็กเปิดและแท็กปิด และเรายังไม่มีอุปกรณ์ประกอบฉากใดๆ

01:04.750 --> 01:09.263
ที่นี่ อย่างน้อยก็ในขณะนี้

01:10.140 --> 01:11.540
ดังนั้น แทนที่จะใช้คอมโพเนนต์นี้

01:11.540 --> 01:16.190
เราสามารถเพิ่มอินพุตและปุ่มหลังจากนั้นได้

01:16.190 --> 01:18.117
ดังนั้นเพิ่ม div ที่นี่จริง

01:18.117 --> 01:20.020
ๆ ซึ่งฉันต้องการมีป้ายกำกับที่มีแอตทริบิวต์

01:20.020 --> 01:24.880
htmlFor ชี้ไปที่ "todo-text"

01:24.880 --> 01:26.560
ทั้งหมดนี้เป็นเพียงมาร์กอัปที่ฉันพูดว่า

01:26.560 --> 01:31.250
"Todo Text" จากนั้นป้อนองค์ประกอบข้อความประเภทที่มี id เป็น

01:31.250 --> 01:39.640
"todo text" เพื่อให้ป้ายกำกับและอินพุตเชื่อมต่อกันอย่างถูกต้องตามความหมาย

01:39.640 --> 01:41.440
และด้านล่างของ div ตรงนี้ แทนที่จะเป็นแบบฟอร์ม

01:41.440 --> 01:44.437
ฉันจะเพิ่มปุ่มที่ฉันพูดว่า "เพิ่มสิ่งที่ต้องทำ" และปุ่มนั้นควรเป็นประเภท

01:45.297 --> 01:49.670
submit เพื่อที่จะได้ส่งแบบฟอร์ม

01:49.670 --> 01:51.900
ตอนนี้เป็นรูปแบบพื้นฐานที่เราสามารถใช้เพื่อเพิ่ม

01:51.900 --> 01:53.143
Todo ใหม่ได้

01:54.580 --> 01:57.060
ตอนนี้ ตรวจสอบให้แน่ใจว่ามันใช้งานได้จริง

01:57.060 --> 01:59.660
และสำหรับสิ่งนี้ เรามีขั้นตอนที่แตกต่างกัน

01:59.660 --> 02:01.820
2-3 ขั้นตอนที่เราจำเป็นต้องนำไปใช้

02:01.820 --> 02:08.550
เราจำเป็นต้องได้รับสิ่งที่ผู้ใช้ป้อนที่นี่ จากนั้นเราต้องส่งต่อสิ่งที่ผู้ใช้ป้อนที่นี่ไปยังส่วนประกอบของแอป

02:08.550 --> 02:13.330
เพราะนั่นคือที่ที่เราจะจัดการสิ่งที่ต้องทำในภายหลัง

02:13.330 --> 02:16.150
ก่อนอื่นเรามาตอบสนองต่อการส่งแบบฟอร์มกัน

02:16.150 --> 02:18.050
เราสามารถเพิ่มฟังก์ชันใหม่

02:18.050 --> 02:20.300
ซึ่งเป็นฟังก์ชันในส่วนประกอบของฟังก์ชัน

02:20.300 --> 02:22.720
แต่ตอนนี้จะเป็นฟังก์ชันปกติ ซึ่งเราจะตั้งชื่อว่า

02:22.720 --> 02:27.720
"todoSubmitsHandler" ชื่อใดก็ได้ที่คุณต้องการ

02:28.210 --> 02:31.860
นี่คือฟังก์ชันที่ควรเริ่มทำงานเมื่อใดก็ตามที่ส่งแบบฟอร์มนี้

02:31.860 --> 02:35.571
ดังนั้นเราสามารถผูกมันเข้ากับ onSubmit prop ในตอนท้าย

02:35.571 --> 02:38.770
todoSubmitsHandler ไม่ต้องรันมัน แค่ชี้ไปที่มัน

02:38.770 --> 02:43.810
เพื่อให้มันทำงานให้เราทุกครั้งที่ส่งฟอร์มนี้

02:43.810 --> 02:49.507
ตอนนี้เราได้รับวัตถุเหตุการณ์และวัตถุเหตุการณ์เป็นประเภทตอบสนอง

02:49.507 --> 02:49.507
แบบฟอร์มกิจกรรม

02:51.290 --> 02:59.280
ตอนนี้ฉันต้องการเรียกเหตุการณ์ป้องกันค่าเริ่มต้นเพื่อป้องกันค่าเริ่มต้นซึ่งก็คือการส่งคำขอจริงไปยังเซิร์ฟเวอร์ที่ให้บริการแอปนี้

02:59.280 --> 03:01.520
แน่นอนว่าไม่ใช่ตอนที่ฉันอยากให้เกิดขึ้น

03:01.520 --> 03:04.680
ฉันต้องการจัดการคำขอนี้ใน JavaScript ที่นี่เท่านั้น

03:04.680 --> 03:08.350
ดังนั้นจึงต้องป้องกันค่าเริ่มต้นของเบราว์เซอร์นี้

03:08.350 --> 03:09.770
ด้วยการป้องกันนั้น เราสามารถรับข้อมูลทุกอย่างที่ผู้ใช้ป้อนเข้ามา

03:09.770 --> 03:15.250
และสำหรับสิ่งนี้ เราได้สองวิธีที่แตกต่างกัน

03:15.250 --> 03:18.310
เราสามารถจัดการสถานะของอินพุตได้ที่นี่

03:18.310 --> 03:20.970
ในลักษณะของการผูกสองทาง หรือเราใช้การอ้างอิง

03:20.970 --> 03:26.520
เพื่อแยกสิ่งที่ผู้ใช้ป้อนที่นี่เมื่อส่งแบบฟอร์ม

03:26.520 --> 03:33.470
ฉันจะใช้วิธีหลังเพราะเราจะเห็นการจัดการสถานะในการดำเนินการในส่วนประกอบแอปในอีกไม่กี่วินาที

03:33.470 --> 03:37.340
ในการตั้งค่าการอ้างอิงดังกล่าว เรานำเข้า useRef hook จาก

03:37.340 --> 03:45.290
react และ hooks เป็นฟังก์ชันพิเศษที่คุณสามารถเรียกใช้และส่วนประกอบของฟังก์ชันเพื่อเพิ่มฟังก์ชันการทำงานบางอย่างให้กับส่วนประกอบ

03:45.290 --> 03:53.730
และเมื่อเราดำเนินการ useRef ที่นี่ สิ่งที่เราได้รับกลับมาคือวัตถุอ้างอิง ซึ่งเราสามารถเก็บเป็นค่าคงที่ได้ และผมจะตั้งชื่อมันว่า

03:53.730 --> 03:57.310
"textInputRef" จริงๆ

03:57.310 --> 04:00.176
ตัวอย่างเช่น เราสามารถใช้การอ้างอิงดังกล่าวเพื่อกำหนดให้กับองค์ประกอบ

04:00.176 --> 04:06.500
dom แล้วโต้ตอบกับองค์ประกอบ dom จากภายในโค้ดของเราที่นี่

04:06.500 --> 04:08.800
ตัวอย่างเช่น เมื่อมีการส่งแบบฟอร์มนั้น

04:09.680 --> 04:11.510
เราตั้งค่าการเชื่อมต่อดังกล่าวโดยเพิ่ม

04:11.510 --> 04:14.020
Ref prop พิเศษให้กับองค์ประกอบ html ที่คุณเลือก

04:14.020 --> 04:19.150
และชี้ไปที่วัตถุนั้นที่เราสร้างขึ้นที่นี่

04:19.150 --> 04:21.530
ดังนั้นเพิ่ม textInputRef

04:21.530 --> 04:23.540
สิ่งนี้สร้างการเชื่อมต่อที่นี่

04:23.540 --> 04:27.380
อย่างไรก็ตาม คุณเห็นแล้วอีกครั้งว่า TypeScript ไม่ชอบสิ่งนี้

04:27.380 --> 04:33.250
เนื่องจาก useRef กลายเป็นฟังก์ชันทั่วไปเช่นกัน

04:33.250 --> 04:35.270
ตอนนี้ประเภทไหนที่เราจะผ่านไปได้

04:35.270 --> 04:37.340
มีอะไรน่าสนใจที่จะรู้ที่นี่?

04:37.340 --> 04:39.200
มันน่าสนใจที่จะทราบว่าข้อมูลประเภทใดจะถูกเก็บไว้ภายในกราฟ

04:39.200 --> 04:43.970
และเมื่อคุณชี้ไปที่องค์ประกอบอินพุต เราก็จะมีองค์ประกอบอินพุต html

04:43.970 --> 04:47.880
เก็บไว้ในนั้น

04:47.880 --> 04:50.420
ตอนนี้ เราทุกคนแค่ต้องระบุค่าเริ่มต้นให้กับ

04:50.420 --> 04:51.840
Ref เมื่อเริ่มตั้งค่า และเราจะระบุค่า

04:51.840 --> 04:54.710
Null เพราะเมื่อส่วนประกอบถูกเรนเดอร์เป็นครั้งแรก

04:54.710 --> 05:01.590
เมื่อโค้ดนี้รัน แน่นอนว่ามันไม่ได้ ถูกแสดงลงที่นั่น ดังนั้น นี่จะไม่ชี้ไปที่สิ่งใด

05:01.590 --> 05:03.350
อย่างไรก็ตาม เมื่อสิ่งนี้ได้รับการเรนเดอร์แล้ว

05:03.350 --> 05:04.950
การเชื่อมต่อจะถูกสร้างขึ้น จากนั้น

05:04.950 --> 05:07.040
Ref นี้จะใช้งานได้

05:07.040 --> 05:09.453
และตอนนี้ใน todoSubmitHandler เราสามารถรับข้อความที่ป้อนโดยใช้

05:10.342 --> 05:21.440
textInputRef ปัจจุบัน นั่นคือสิ่งที่คุณต้องป้อนเสมอเมื่อคุณทำงานกับผู้อ้างอิง

05:21.440 --> 05:21.440
แน่นอนที่นี่เพราะเราทำงานกับองค์ประกอบอินพุต

05:21.440 --> 05:24.530
html

05:24.530 --> 05:27.940
อย่างไรก็ตาม ปัญหาคือสิ่งนี้อาจเป็นโมฆะ

05:27.940 --> 05:31.790
เป็นปัญหาที่เรารู้อยู่แล้ว เรามีสิ่งนี้ในช่วงต้นของหลักสูตรเช่นกันเมื่อเราเลือกบางสิ่งใน

05:31.790 --> 05:38.800
Dom และเราก็พบที่นี่เช่นกัน เนื่องจาก TypeScript ไม่สามารถรู้ได้อย่างแน่นอนว่าการเชื่อมต่อนี้ถูกสร้างขึ้น

05:38.800 --> 05:40.580
เรารู้ เราเขียนโค้ด แต่น่าเสียดายที่

05:40.580 --> 05:45.300
TypeScript ไม่เข้าใจว่าเราสร้างการเชื่อมต่อที่นั่น

05:46.310 --> 05:48.920
ดังนั้น เพื่อแก้ไขปัญหานี้ เราสามารถเพิ่มเครื่องหมายอัศเจรีย์ที่นี่

05:48.920 --> 05:51.350
เพื่อบอก TypeScript อีกครั้งว่าสิ่งนี้จะปกติดี

05:51.350 --> 05:54.350
ว่ามันจะถูกตั้งค่า และเราก็โอเค

05:54.350 --> 05:56.130
ตามวิธีที่ TypeScript ถูกต้อง

05:56.130 --> 05:58.920
หากเราจะเรียก todoSubmitHandler ที่นี่ สิ่งนี้จะเรียกว่าการส่งต่อ

05:58.920 --> 06:05.000
สิ่งนี้ถูกเรนเดอร์เป็นครั้งแรก และแน่นอนว่าสิ่งนี้จะยังไม่เริ่มต้น

06:05.000 --> 06:10.830
เรารู้แต่เพียงว่าจะมีการเริ่มต้นอย่างแน่นอนเพราะเรารู้ว่าสิ่งนี้จะถูกเรียกใช้เมื่อมีการส่งแบบฟอร์มเท่านั้น

06:10.830 --> 06:13.830
และจะเกิดขึ้นได้หลังจากที่แสดงผลแล้วเท่านั้น

06:13.830 --> 06:16.120
ดังนั้นเราจึงรู้วิธีการทำงานของรหัสของเรา

06:16.120 --> 06:18.360
สิ่งนี้จะไม่เป็นโมฆะ

06:18.360 --> 06:20.810
หากมีความเป็นไปได้อื่น คุณจะต้องใช้

06:20.810 --> 06:22.780
if-check ที่นี่เพื่อตรวจสอบว่า

06:22.780 --> 06:27.620
textInputRef ปัจจุบันเป็นโมฆะและถ้าเป็นให้ทำอย่างอื่น

06:27.620 --> 06:29.550
แต่ที่นี่ไม่สามารถเกิดขึ้นได้

06:29.550 --> 06:34.640
ดังนั้นเราจึงแยกค่าออกมาและเราสามารถปลอบใจได้

06:34.640 --> 06:34.640
เข้าสู่ระบบที่นี่เพื่อดูว่าใช้งานได้หรือไม่

06:34.640 --> 06:37.040
แต่แน่นอนว่านี่ไม่ใช่การตั้งค่าสุดท้าย

06:37.040 --> 06:40.900
มาบันทึกสิ่งนี้ ป้อนที่นี่ ทำมันให้เสร็จในหนึ่งเดือน

06:40.900 --> 06:47.970
และเพิ่มสิ่งที่ต้องทำ และเราเห็นมันที่นี่ในบันทึกของคอนโซล

06:47.970 --> 06:50.310
นั่นคือการทำงานตามที่ควร

06:50.310 --> 06:51.910
และด้วยการทำงานอย่างที่ควรจะเป็น

06:51.910 --> 06:55.460
ตอนนี้เรามาตรวจสอบให้แน่ใจว่าเราได้รับค่านั้นไปยังส่วนประกอบของแอป

06:55.460 --> 06:58.820
หากคุณรู้ว่ามีปฏิกิริยาโต้ตอบบางอย่างให้ลองด้วยตัวคุณเองก่อน

06:58.820 --> 07:00.963
เราจะทำร่วมกันในการบรรยายครั้งต่อไป
