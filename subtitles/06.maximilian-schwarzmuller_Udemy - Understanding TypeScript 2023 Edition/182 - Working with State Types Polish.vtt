WEBVTT

00:02.260 --> 00:03.920
Explainer: Czas na trochę zarządzania stanem

00:03.920 --> 00:05.340
w komponencie App, ponieważ gdy zaktualizujemy

00:05.340 --> 00:07.240
tablicę w ten sposób, komponent nie zostanie ponownie

00:07.240 --> 00:08.880
wyświetlony.

00:08.880 --> 00:10.530
Tak właśnie działa React.

00:10.530 --> 00:12.590
W naszym komponencie funkcyjnym możemy

00:12.590 --> 00:15.000
zarządzać stanem za pomocą haka useState.

00:15.000 --> 00:16.820
I znowu, jeśli nie wiesz tego lub

00:16.820 --> 00:18.750
jeśli stan lub komponenty funkcji

00:18.750 --> 00:21.120
lub haki nie mówi ci nic, zdecydowanie sprawdź

00:21.120 --> 00:23.810
niektóre dedykowane zasoby React, takie jak mój

00:23.810 --> 00:26.480
React, kompletny kurs przewodnika.

00:26.480 --> 00:29.870
Tak więc, teraz chcę zarządzać moimi todosami tutaj za pomocą

00:29.870 --> 00:31.760
stanu, a w tym celu wyczyszczę to dummy

00:31.760 --> 00:33.060
todo, z którym zacząłem,

00:33.060 --> 00:36.430
a zamiast tego zainicjalizuję stan przez wywołanie useState

00:36.430 --> 00:39.080
i do tego jednak mogę przekazać moją pustą tablicę

00:39.080 --> 00:41.210
jako wartość stanu początkowego, tak

00:41.210 --> 00:44.510
że początkowo mój stan jest pustą tablicą.

00:44.510 --> 00:47.100
Teraz useState zawsze zwraca tablicę

00:47.100 --> 00:49.370
z dokładnie dwoma elementami.

00:49.370 --> 00:52.070
Pierwszym elementem jest najnowszy snapshot stanu

00:52.070 --> 00:53.630
dla tego cyklu renderowania.

00:53.630 --> 00:55.070
A drugi argument, drugi

00:55.070 --> 00:56.720
element w tablicy to funkcja

00:56.720 --> 00:58.860
aktualizująca ten stan i renderująca

00:58.860 --> 01:01.110
komponent.

01:01.110 --> 01:02.660
Możemy użyć restrukturyzacji

01:02.660 --> 01:05.060
tablicy, o której uczyliśmy się wcześniej w kursie,

01:05.060 --> 01:07.060
aby wyciągnąć te dwa elementy i przechowywać

01:07.060 --> 01:09.230
je w osobnych stałych.

01:09.230 --> 01:10.900
A potem tutaj mamy todos i powiedzmy

01:10.900 --> 01:13.103
funkcję o nazwie setTodos.

01:14.920 --> 01:16.820
Dzięki temu nadal otrzymujemy

01:16.820 --> 01:19.530
naszą tablicę todos i teraz w tym miejscu w todoAddHandler,

01:19.530 --> 01:21.480
chcę wywołać setTodos i ustawić

01:21.480 --> 01:24.430
moją tablicę todos na nową tablicę, która ma nowy

01:24.430 --> 01:27.373
todoText dodany do niej.

01:28.240 --> 01:29.283
Teraz w tym celu

01:30.400 --> 01:32.130
możemy oczywiście przekazać

01:32.130 --> 01:34.100
nową tablicę i dodać nowy obiekt,

01:34.100 --> 01:36.530
powiedzmy z ID, gdzie tworzymy losowe

01:36.530 --> 01:42.530
ID z Math.

01:42.530 --> 01:42.530
random(). toString.

01:42.530 --> 01:44.830
To nie jest naprawdę wyjątkowe, ale wystarczająco dobre tutaj,

01:44.830 --> 01:46.620
a gdzie następnie mamy nasz tekst, który jest

01:46.620 --> 01:48.760
tą wartością tekstową, którą otrzymuję tutaj.

01:48.760 --> 01:51.910
Ale co dziwne, dostaję tutaj błąd.

01:51.910 --> 01:54.790
I błąd, który otrzymujemy, to że ten argument

01:54.790 --> 01:56.860
nie jest przypisywalny.

01:56.860 --> 01:59.630
Cóż zasadniczo w coś, co spodziewa

01:59.630 --> 02:01.970
się mieć tablicę niczego.

02:01.970 --> 02:03.590
I to jest, oczywiście, nie to, co chcesz tutaj.

02:03.590 --> 02:06.010
Nie chcemy mieć za nasze państwo tablicy z niczym.

02:06.010 --> 02:07.110
Dlaczego tak się dzieje?

02:07.950 --> 02:11.800
Ponieważ tutaj, gdy inicjalizuję useState z pustą tablicą, TypeScript

02:11.800 --> 02:15.040
infekuje, jak będzie wyglądał nasz stan, jeśli zainicjalizowałbym

02:15.040 --> 02:17.060
to na string, TypeScript wywnioskowałby,

02:17.060 --> 02:20.130
że mój stan to string.

02:20.130 --> 02:23.010
Więc jeśli tymczasowo usunąłem to i przekazałem jakiś tekst, to zostałoby

02:23.010 --> 02:24.123
to zaakceptowane.

02:25.160 --> 02:26.137
Jeśli przekażę go w

02:26.137 --> 02:28.260
tablicy, TypeScript oczekuje, że jest to

02:28.260 --> 02:30.080
tablica, ale nie tablica niczego, ale

02:30.080 --> 02:32.000
zawsze w zasadzie pusta tablica.

02:32.000 --> 02:36.070
Czyli tablica nic nie wnosząca, której oczywiście nie chcę tutaj.

02:36.070 --> 02:38.050
Aby to naprawić musimy powiedzieć Reactowi,

02:38.050 --> 02:40.460
jak nasze osiedle będzie wyglądało z czasem.

02:40.460 --> 02:42.920
I do tego możemy znowu wykorzystać to, że

02:42.920 --> 02:44.630
useState jest funkcją generyczną,

02:44.630 --> 02:48.080
bo możemy przekazać strukturę naszego osiedla.

02:48.080 --> 02:51.240
Czyli jakiego typu danych jest nasz stan i tam możemy

02:51.240 --> 02:54.200
przekazać, że nasz stan powinien być tablicą obiektów,

02:54.200 --> 02:56.253
a dokładnie i tablicą obiektów,

02:57.210 --> 02:59.570
gdzie mamy właściwość ID, która jest

02:59.570 --> 03:02.750
ciągiem znaków, oraz właściwość text, która jest

03:02.750 --> 03:04.860
ciągiem znaków.

03:04.860 --> 03:08.050
I teraz ta aktualizacja stanu jest dozwolona.

03:08.050 --> 03:10.100
Teraz pisanie tego tutaj jest oczywiście w porządku, ale ponieważ

03:10.100 --> 03:12.410
będziemy tego potrzebować w różnych miejscach w aplikacji, faktycznie

03:12.410 --> 03:16.710
utworzę nowy plik i nazwę go todo. model. ts.

03:16.710 --> 03:18.210
Nazwa pliku zależy od Ciebie.

03:18.210 --> 03:19.940
I tutaj chcę wyeksportować w zasadzie

03:19.940 --> 03:21.710
interfejs o nazwie Todo, gdzie

03:21.710 --> 03:24.080
chcę po prostu opisać, jak nasze ID Todo powinno

03:24.080 --> 03:25.440
wyglądać w mojej aplikacji,

03:25.440 --> 03:27.430
że chcę mieć ID typu string, i właściwość

03:27.430 --> 03:30.190
tekstową typu string.

03:30.190 --> 03:34.420
Mając to wyeksportowane tutaj w komponencie aplikacji,

03:34.420 --> 03:35.900
możemy zaimportować

03:35.900 --> 03:38.210
to, więc tutaj możemy zaimportować

03:39.080 --> 03:42.543
Todo z . /todo. model.

03:43.900 --> 03:46.720
I tutaj po prostu mamy wtedy tablicę todos, która jest

03:46.720 --> 03:49.550
oczywiście krótsza i łatwiejsza do odczytania.

03:49.550 --> 03:51.480
A teraz nasza aktualizacja stanu nadal działa,

03:51.480 --> 03:52.870
ale jest to nieco czystsze.

03:52.870 --> 03:55.100
I to jak widzisz jest naprawdę ważne tutaj

03:55.100 --> 03:57.210
podczas pracy z czymś takim jak tablica,

03:57.210 --> 03:59.170
gdzie typy zawartości dla jakiego typu

03:59.170 --> 04:01.860
danych chcesz przechowywać, że ostatecznie, jeśli

04:01.860 --> 04:04.270
zainicjujesz go z pustą tablicą.

04:04.270 --> 04:06.250
Z tym jednak działa.

04:06.250 --> 04:07.450
Minusem jest oczywiście

04:07.450 --> 04:09.910
to, że, nasza logika aktualizacji stanu tutaj

04:09.910 --> 04:13.670
nie jest poprawna, ponieważ teraz zawsze nadpisuję istniejącą tablicę

04:13.670 --> 04:17.400
todos z nową tablicą, która ma tylko dokładnie jeden element.

04:17.400 --> 04:20.110
I zamiast tego chcę go nadpisać nową tablicą,

04:20.110 --> 04:23.730
która ma wszystkie stare elementy, a także nowy element.

04:23.730 --> 04:26.583
Dostosujmy więc tę logikę w następnym wykładzie.
