WEBVTT

00:02.220 --> 00:04.080
-: Sekarang, tipe persimpangan adalah satu hal.

00:04.080 --> 00:05.470
Namun, yang lebih sering digunakan

00:05.470 --> 00:07.800
adalah fitur lain, dan itu adalah type guard, fitur

00:07.800 --> 00:10.590
yang sebenarnya sudah sedikit kami gunakan.

00:10.590 --> 00:12.400
Mari kita gunakan Combinable di sini.

00:12.400 --> 00:15.560
Ini adalah tipe union di mana kita memiliki string atau angka,

00:15.560 --> 00:18.020
dan type guard membantu kita dengan tipe union

00:18.020 --> 00:21.050
karena meskipun bagus untuk memiliki fleksibilitas, sering

00:21.050 --> 00:23.610
kali Anda perlu tahu tipe persis mana yang Anda dapatkan

00:23.610 --> 00:26.200
sekarang pada saat runtime.

00:26.200 --> 00:28.630
Katakanlah di sini kita memiliki fungsi tambah

00:28.630 --> 00:33.070
di mana saya mendapatkan angka yang harus bertipe Combinable, jadi string atau

00:33.070 --> 00:35.100
angka, dan, oleh karena itu, saya akan

00:35.100 --> 00:37.990
menamainya a di sini, dan kemudian saya mendapat argumen

00:37.990 --> 00:39.520
lain yang juga harus Combinable,

00:39.520 --> 00:42.110
jadi angka atau string, dan kemudian saya ingin

00:42.110 --> 00:44.640
mengembalikan a plus b.

00:44.640 --> 00:47.020
Sekarang kita lihat di masa lalu bahwa hal ini tidak berhasil.

00:47.020 --> 00:51.320
Sebagai gantinya, kita sekarang perlu memeriksa apakah typeof

00:51.320 --> 00:53.740
a sama dengan string, misalnya, atau

00:55.660 --> 00:59.780
typeof b sama dengan string, dan jika itu yang terjadi, kita

00:59.780 --> 01:04.681
mengembalikan a.

01:04.681 --> 01:04.681
toString ditambah b. toString.

01:04.681 --> 01:06.750
Jadi kita gabungkan kedua string ini; jika

01:06.750 --> 01:09.570
tidak, jika tidak membuatnya menjadi pernyataan if ini,

01:09.570 --> 01:11.510
kita kembalikan a plus b seperti ini karena

01:11.510 --> 01:13.270
sekarang grup tipe tahu a dan b harus

01:13.270 --> 01:15.620
berupa angka di sini, karena jika setidaknya salah

01:15.620 --> 01:18.230
satu dari mereka tidak akan menjadi angka, kita akan

01:18.230 --> 01:19.710
berada di sini.

01:19.710 --> 01:22.890
Sekarang ini di sini disebut type guard karena memungkinkan

01:22.890 --> 01:25.280
kita untuk memanfaatkan fleksibilitas

01:25.280 --> 01:27.980
yang diberikan tipe union kepada kita dan masih

01:27.980 --> 01:32.550
memastikan bahwa kode kita berjalan dengan benar pada saat runtime, karena

01:32.550 --> 01:34.830
seringkali Anda memiliki fungsi yang

01:34.830 --> 01:38.160
bekerja dengan dua atau tiga tipe berbeda, dan, oleh karena

01:38.160 --> 01:40.570
itu, tipe union sangat cocok, tetapi apa

01:40.570 --> 01:43.890
yang sebenarnya Anda lakukan dengan nilai-nilai itu tergantung

01:43.890 --> 01:46.940
pada tipenya, seperti di sini, di mana kita menggabungkan

01:46.940 --> 01:51.670
atau menambahkan secara matematis.

01:51.670 --> 01:55.310
Sekarang ini adalah penjaga tipe menggunakan typeof.

01:55.310 --> 01:58.970
Anda juga bisa menulis jenis-jenis type guard lainnya.

01:58.970 --> 02:00.880
dan untuk itu, izinkan saya kembali ke tipe

02:00.880 --> 02:03.050
admin dan karyawan yang saya dapatkan di sana,

02:03.050 --> 02:04.950
di mana saya mendapatkan hak istimewa pada

02:04.950 --> 02:06.943
admin dan startDate pada karyawan.

02:08.590 --> 02:11.810
Sekarang kita memiliki ElevatedEmployee yang menggabungkan keduanya.

02:11.810 --> 02:14.980
Sekarang juga membuat tipe lain di sini.

02:14.980 --> 02:16.330
Itu adalah UnknownEmployee.

02:18.000 --> 02:21.940
Ini bisa jadi hanya seorang karyawan atau admin.

02:21.940 --> 02:25.540
Jadi kita memiliki tipe union menggunakan dua tipe objek kustom saya.

02:25.540 --> 02:28.173
Jadi, karyawan yang tidak diketahui adalah salah satu dari keduanya.

02:29.230 --> 02:32.003
Sekarang kita mungkin memiliki fungsi, printEmployeeInformation,

02:34.620 --> 02:36.420
di mana saya harus memasukkan karyawan,

02:36.420 --> 02:39.660
dan itu harus dari jenis karyawan yang tidak diketahui.

02:39.660 --> 02:41.610
Sekarang di sini, saya ingin menghibur. mencatat berbagai

02:41.610 --> 02:44.030
informasi tentang karyawan.

02:44.030 --> 02:47.210
Misalnya, nama dari emp. yang akan bekerja tanpa

02:47.210 --> 02:48.580
masalah karena kedua

02:48.580 --> 02:52.140
jenis karyawan memiliki properti nama.

02:52.140 --> 02:56.730
Tetapi kemudian saya juga ingin menghibur. mencatat hak istimewa dengan

02:58.160 --> 03:01.520
mengakses emp. privileges, dan di sini saya

03:01.520 --> 03:04.350
sudah mendapatkan masalah dalam pelengkapan

03:04.350 --> 03:07.100
otomatis karena TypeScript tidak dapat mengkonfirmasi

03:07.100 --> 03:09.890
bahwa ini selalu ada pada argumen, karena UnknownEmployee

03:09.890 --> 03:13.540
mungkin adalah karyawan biasa yang tidak memiliki properti

03:13.540 --> 03:16.260
privileges.

03:16.260 --> 03:18.330
Hanya admin yang memiliki itu.

03:18.330 --> 03:20.100
Jadi, sekarang kita memerlukan penjaga tipe di sini.

03:20.100 --> 03:24.530
Masalahnya hanya dengan typeof, kita tidak akan memenangkan apapun.

03:24.530 --> 03:26.830
Jika kita memeriksa tipe karyawan, itu

03:26.830 --> 03:29.470
hanya akan menjadi objek pada saat runtime.

03:29.470 --> 03:31.380
Namun, itu tidak memberi tahu kita, apakah ia

03:31.380 --> 03:32.940
memiliki properti ini atau tidak.

03:32.940 --> 03:34.960
Oleh karena itu, jika saya memindahkan kode dalam

03:34.960 --> 03:37.430
pemeriksaan if ini, TypeScript tidak lebih bahagia dari sebelumnya

03:37.430 --> 03:39.750
karena sebuah objek, yah, hanya sebuah objek.

03:39.750 --> 03:41.920
Tidak memberi tahu kita apa pun tentang properti.

03:41.920 --> 03:44.980
Kita tidak dapat memeriksa apakah itu tipe Karyawan

03:44.980 --> 03:48.130
karena itu bukan tipe yang diketahui JavaScript, dan

03:48.130 --> 03:49.840
perlu diingat bahwa pemeriksaan

03:49.840 --> 03:52.560
ini berjalan pada saat runtime dan menggunakan

03:52.560 --> 03:56.190
JavaScript, jadi kita hanya dapat membandingkan typeof yang

03:56.190 --> 03:58.010
kita dapatkan dengan tipe yang

03:58.010 --> 04:01.920
diketahui JavaScript, dan itu akan menjadi objek, string, angka,

04:01.920 --> 04:05.610
dan boolean, dan tipe kustom kita bukan bagian dari itu.

04:05.610 --> 04:07.950
Itu hanya ada di dunia TypeScript,

04:07.950 --> 04:11.020
bukan di dunia JavaScript yang dikompilasi.

04:11.020 --> 04:13.990
Jadi, oleh karena itu, ini juga tidak berfungsi.

04:13.990 --> 04:17.960
Sekarang di sini, solusi kita adalah menggunakan pemeriksaan if yang berbeda.

04:17.960 --> 04:20.240
Kita tahu bahwa kita ingin mengakses hak

04:20.240 --> 04:25.240
istimewa, jadi kita bisa memeriksa apakah hak istimewa karyawan adalah suatu hal.

04:26.400 --> 04:28.560
Masalahnya hanya TypeScript tidak mengizinkan

04:28.560 --> 04:30.690
kita untuk mengakses properti ini sama sekali,

04:30.690 --> 04:33.550
bahkan untuk memeriksanya seperti ini, tetapi ada cara

04:33.550 --> 04:36.200
lain bagi kita untuk memeriksanya.

04:36.200 --> 04:40.000
Kita dapat menggunakan kata kunci in yang ada di dalam JavaScript.

04:40.000 --> 04:43.120
Kita bisa memeriksa apakah privileges, yang

04:43.120 --> 04:46.690
sekarang ditulis sebagai string, ada di emp.

04:46.690 --> 04:49.130
Ini adalah kode JavaScript yang memungkinkan

04:49.130 --> 04:53.480
untuk memeriksa apakah ini ada sebagai properti pada karyawan, dan jika

04:53.480 --> 04:58.380
itu yang terjadi, TypeScript mendeteksi pemeriksaan ini di sini, dan, oleh karena

04:58.380 --> 05:01.200
itu, memungkinkan kita untuk mengakses properti

05:01.200 --> 05:04.543
ini di dalam pemeriksaan if di sini.

05:05.852 --> 05:08.380
Dan kita dapat mengulanginya untuk startDate,

05:08.380 --> 05:12.240
dan, oleh karena itu, periksa apakah startDate adalah properti di sini,

05:12.240 --> 05:15.710
dan oleh karena itu, kita juga dapat menampilkan ini dalam pemeriksaan

05:16.970 --> 05:18.730
jika ini.

05:18.730 --> 05:23.687
Jadi sekarang dengan itu, jika kita memanggil printEmployeeInformation, dan

05:24.650 --> 05:28.363
kita memasukkan satu karyawan yang kita buat, e1, Anda akan

05:31.410 --> 05:34.860
melihat bahwa ini dikompilasi tanpa kesalahan dan, memang,

05:34.860 --> 05:37.430
mengeluarkan hak istimewa dan, yah, juga

05:37.430 --> 05:40.730
di sini datanya juga harus mengatakan Tanggal Mulai di

05:40.730 --> 05:42.530
sini, tentu saja.

05:42.530 --> 05:45.820
Tetapi dengan itu, ini memberi kita output yang kita harapkan.

05:45.820 --> 05:48.590
Dan di sisi lain, jika kita mengoper karyawan yang tidak

05:48.590 --> 05:50.950
memiliki semua bidang ini, misalnya, jika kita

05:50.950 --> 05:53.090
membuat karyawan dengan cepat yang hanya

05:53.090 --> 05:56.383
memiliki startDate tetapi tidak memiliki hak istimewa, maka semua

05:57.850 --> 06:00.370
pekerjaan dan dikompilasi tanpa kesalahan, dan kita

06:00.370 --> 06:03.160
tidak mencetak apa pun tentang hak istimewa karena pemeriksaan

06:03.160 --> 06:05.723
if yang kita miliki di sana.

06:07.650 --> 06:09.800
Ketika bekerja dengan kelas-kelas,

06:09.800 --> 06:13.070
Anda juga bisa menggunakan tipe lain dari type guard,

06:13.070 --> 06:16.520
dan itu adalah type guard instanceof.

06:16.520 --> 06:21.460
Katakanlah di bawah sana kita memiliki kelas, Mobil, dan yang memiliki

06:21.460 --> 06:23.800
metode drive di mana ia hanya mengatakan

06:23.800 --> 06:26.523
konsol. log Driving, dan kita

06:28.480 --> 06:31.750
memiliki kelas lain, Truck, yang juga memiliki metode

06:31.750 --> 06:34.623
drive, atau mungkin Anda mengatakan Driving

06:35.840 --> 06:38.280
a truck, tetapi kita harus menyebutkan

06:38.280 --> 06:40.250
nama metodenya.

06:40.250 --> 06:43.980
Dan di mana kita juga memiliki metode loadCargo, di mana kita

06:43.980 --> 06:46.570
memiliki jumlah, yang merupakan angka, dan

06:46.570 --> 06:49.040
kemudian di sini saya hanya memiliki beberapa

06:49.040 --> 06:53.570
kode tiruan di mana saya berkata, "Memuat kargo plus jumlah. Sesuatu seperti itu, ups, jumlah, sesuatu seperti itu.

06:53.570 --> 06:57.323
Jadi sekarang kita memiliki dua kelas, yang tentu saja memiliki beberapa

06:58.170 --> 06:59.320
kesamaan, metode drive,

06:59.320 --> 07:02.090
tetapi juga memiliki perbedaan.

07:02.090 --> 07:03.890
Sekarang, sekali lagi, kita

07:03.890 --> 07:08.200
bisa membuat tipe union di sini, Vehicle, yang merupakan Mobil atau

07:08.200 --> 07:13.030
Truk, dan sekarang, katakanlah, kita membuat kendaraan baru, v1, yang

07:13.030 --> 07:18.030
merupakan Mobil baru, dan satu lagi, v2, yang merupakan Truk baru.

07:18.050 --> 07:21.873
Sekarang saya memiliki fungsi, useVehicle, yang hanya mengharapkan

07:23.890 --> 07:26.443
untuk mendapatkan kendaraan, yang seharusnya

07:27.700 --> 07:29.780
bertipe kendaraan, jadi yang seharusnya

07:29.780 --> 07:31.350
bertipe union ini.

07:31.350 --> 07:34.203
Jadi, di sini kita mendapatkan kendaraan, dan sekarang, katakanlah, tujuan

07:35.420 --> 07:37.490
kita di sini adalah melakukan segala sesuatu yang bisa

07:37.490 --> 07:40.040
kita lakukan dengan kendaraan: mengemudi dan memuatKargo.

07:40.040 --> 07:43.400
Jadi, tentu saja, kita bisa memanggil kendaraan. berkendara karena itu selalu ada, tetapi untuk

07:43.400 --> 07:45.420
kendaraan. loadCargo, kami memiliki

07:45.420 --> 07:50.010
masalah karena hanya truk yang memiliki itu.

07:50.010 --> 07:52.720
Mobil tidak memilikinya, jadi ini tidak akan berhasil.

07:52.720 --> 07:56.440
Sekarang kita bisa, tentu saja, sekali lagi, memeriksa apakah loadCargo ada di dalam

07:56.440 --> 07:59.513
kendaraan, dan jika itu yang terjadi, kita bisa menggunakannya.

08:00.760 --> 08:05.760
Setidaknya jika saya memperbaiki kesalahan ketik di sini.

08:06.430 --> 08:09.480
Jadi sekarang kita simpan itu dan kita panggil useVehicle

08:09.480 --> 08:13.230
dan masukkan v1, lalu kita panggil lagi dengan v2, dan saya menyimpan

08:13.230 --> 08:17.400
semua itu, itu mengkompilasi, dan berfungsi.

08:17.400 --> 08:21.680
Nah, itu adalah salah satu cara untuk melakukannya.

08:21.680 --> 08:23.340
Cara alternatif, yang mungkin

08:23.340 --> 08:26.580
sedikit lebih elegan karena juga menghilangkan risiko Anda

08:26.580 --> 08:28.600
salah mengetikkan string properti

08:28.600 --> 08:31.920
ini di sini, adalah Anda menggunakan instanceof.

08:31.920 --> 08:34.080
Kita bisa memeriksa apakah kendaraan adalah instance dari Truck.

08:34.080 --> 08:39.080
Jika itu kasusnya, kita tahu bahwa ia akan memiliki metode loadCargo.

08:39.360 --> 08:42.510
Sebuah instanceof adalah operator normal yang

08:42.510 --> 08:45.230
dibangun ke dalam JavaScript vanilla, jadi

08:45.230 --> 08:47.430
ini bukan kode TypeScript.

08:47.430 --> 08:49.280
Sama seperti typeof, ini adalah bagian

08:49.280 --> 08:52.250
dari JavaScript dan dieksekusi pada saat runtime.

08:52.250 --> 08:54.290
JavaScript tidak mengetahui tipe Truck,

08:54.290 --> 08:56.780
tetapi JavaScript mengetahui fungsi konstruktor,

08:56.780 --> 08:59.330
dan kelas pada akhirnya hanya diterjemahkan ke fungsi

08:59.330 --> 09:01.490
konstruktor, dan TypeScript kemudian dapat

09:01.490 --> 09:03.400
mengetahui apakah kendaraan dibuat

09:03.400 --> 09:06.580
berdasarkan fungsi konstruktor Truck.

09:06.580 --> 09:10.290
Jadi, karena kelas dikompilasi menjadi sesuatu yang dipahami

09:10.290 --> 09:11.970
JavaScript, fungsi konstruktor,

09:11.970 --> 09:15.450
maka JavaScript dapat menggunakannya.

09:15.450 --> 09:17.210
Jika kita akan menggunakan antarmuka di sini

09:17.210 --> 09:20.390
alih-alih kelas, dan, oleh karena itu, tentu saja, kita tidak dapat memiliki

09:20.390 --> 09:21.223
implementasinya di

09:21.223 --> 09:22.950
sini, tetapi kita akan melakukannya saat

09:22.950 --> 09:25.130
kita membuat objek dengan notasi literal objek, maka

09:25.130 --> 09:27.300
kita tidak dapat menggunakan instanceof karena antarmuka,

09:27.300 --> 09:30.940
seperti yang Anda pelajari, tidak dikompilasi ke kode JavaScript apa pun, dan, oleh karena

09:30.940 --> 09:34.370
itu, kita tidak dapat menggunakannya saat runtime.

09:34.370 --> 09:37.160
Untuk kelas, kita dapat melakukannya karena JavaScript

09:37.160 --> 09:40.010
mendukung kelas dan fungsi konstruktor, dan dengan instanceof,

09:40.010 --> 09:42.290
Anda kemudian dapat mengetahui apakah suatu objek

09:42.290 --> 09:44.500
didasarkan pada kelas itu.

09:44.500 --> 09:47.660
Jika kita tahu apakah itu, maka kita akan memiliki fungsi loadCargo.

09:47.660 --> 09:51.850
Jadi, ini adalah tipe penjaga.

09:51.850 --> 09:53.480
Pada akhirnya, type guard hanyalah

09:53.480 --> 09:55.890
sebuah istilah yang menggambarkan ide atau

09:55.890 --> 09:59.470
pendekatan untuk memeriksa apakah properti atau metode tertentu

09:59.470 --> 10:02.980
ada sebelum Anda mencoba menggunakannya, atau jika Anda dapat

10:02.980 --> 10:06.310
melakukan sesuatu dengan tipe tersebut sebelum Anda mencoba

10:06.310 --> 10:08.470
menggunakannya.

10:08.470 --> 10:10.220
Untuk objek, itu dapat dilakukan dengan

10:10.220 --> 10:15.113
instanceof atau dengan in, untuk tipe lain, Anda dapat menggunakan typeof, dan, oleh karena itu,

10:16.140 --> 10:19.780
Anda sekarang memiliki semua fleksibilitas untuk menggunakan fleksibilitas

10:19.780 --> 10:22.280
yang diberikan tipe union kepada Anda dan masih menulis

10:22.280 --> 10:25.090
kode yang kemudian melakukan satu hal atau yang lain berdasarkan

10:25.090 --> 10:29.050
tipe yang tepat yang Anda dapatkan saat runtime.
