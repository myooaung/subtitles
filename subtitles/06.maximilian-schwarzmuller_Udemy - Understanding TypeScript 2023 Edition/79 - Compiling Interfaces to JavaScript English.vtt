WEBVTT

1
00:00:02.170 --> 00:00:03.290
<v Instructor>There was a lot of talking</v>

2
00:00:03.290 --> 00:00:05.580
about interfaces and classes now.

3
00:00:05.580 --> 00:00:07.390
Now let's look under the hood

4
00:00:07.390 --> 00:00:11.650
and see what JavaScript actually produces

5
00:00:11.650 --> 00:00:15.290
or offers as an alternative to interface.

6
00:00:15.290 --> 00:00:17.450
We learned that for class code,

7
00:00:17.450 --> 00:00:20.560
in the end it depends on the version we're compiling for.

8
00:00:20.560 --> 00:00:24.280
If you compile for es6 here in the ts conflict,

9
00:00:24.280 --> 00:00:27.160
then our output would use the class keyword.

10
00:00:27.160 --> 00:00:29.330
Since we compiled for es5 here,

11
00:00:29.330 --> 00:00:31.880
we instead see this workaround using construct

12
00:00:31.880 --> 00:00:33.420
or functions in the end.

13
00:00:33.420 --> 00:00:36.670
What, however, happens for interfaces?

14
00:00:36.670 --> 00:00:38.720
Well, let's have a look at the app.js file.

15
00:00:38.720 --> 00:00:41.780
And there you see nothing.

16
00:00:41.780 --> 00:00:46.360
You'll not see any translations for our interfaces.

17
00:00:46.360 --> 00:00:49.410
AddFn, Named, Greetable.

18
00:00:49.410 --> 00:00:52.970
You don't find these things anywhere in app.js.

19
00:00:52.970 --> 00:00:55.440
You just find our function here,

20
00:00:55.440 --> 00:00:59.180
you find our constructor function for the person object,

21
00:00:59.180 --> 00:01:02.320
so basically that translation for the person class,

22
00:01:02.320 --> 00:01:03.500
and the other code.

23
00:01:03.500 --> 00:01:06.680
You find no reference at any interface.

24
00:01:06.680 --> 00:01:08.240
And there's a good reason for that.

25
00:01:08.240 --> 00:01:11.350
There is no translation for interfaces.

26
00:01:11.350 --> 00:01:13.650
JavaScript doesn't know about this feature.

27
00:01:13.650 --> 00:01:15.550
It's a pure TypeScript feature,

28
00:01:15.550 --> 00:01:18.830
only available during development and compilation.

29
00:01:18.830 --> 00:01:21.640
So you can use it to improve your code.

30
00:01:21.640 --> 00:01:23.970
No output for that will end up

31
00:01:23.970 --> 00:01:26.010
in your JavaScript files though,

32
00:01:26.010 --> 00:01:28.390
so therefore it's a pure development feature

33
00:01:28.390 --> 00:01:30.700
helping you to write better code,

34
00:01:30.700 --> 00:01:34.100
clearly structured code following clear rules.

35
00:01:34.100 --> 00:01:38.720
At runtime, no trace will be left of these interfaces.

36
00:01:38.720 --> 00:01:41.760
You'll not see anything related to the interfaces

37
00:01:41.760 --> 00:01:44.710
in your code, only functions, classes,

38
00:01:44.710 --> 00:01:47.130
and all the other code is compiled in output.

39
00:01:47.130 --> 00:01:50.020
Interfaces are simply dumped, you could say.

40
00:01:50.020 --> 00:01:53.170
They're used during compilation to check your code

41
00:01:53.170 --> 00:01:54.340
and then they're ignored.

42
00:01:54.340 --> 00:01:56.690
There is nothing that would be output for them.

