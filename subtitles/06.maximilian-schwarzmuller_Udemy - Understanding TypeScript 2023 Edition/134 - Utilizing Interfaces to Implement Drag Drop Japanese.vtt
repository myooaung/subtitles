WEBVTT

00:02.190 --> 00:05.380
インストラクター：それでは､ このプロジェクトの最後に､

00:05.380 --> 00:09.590
例えばアクティブなプロジェクトのボックスにあるプロジェクトを､

00:09.590 --> 00:16.410
もう一方のボックスにドラッグ＆ドロップできるようにしましょう｡

00:16.410 --> 00:19.310
つまり､ 基本的にアクティブなプロジェクトから､

00:19.310 --> 00:22.780
完成されたプロジェクトに切り替えることです｡

00:22.780 --> 00:25.430
ドラッグ＆ドロップして

00:25.430 --> 00:31.050
UI を更新するだけではありません｡

00:31.050 --> 00:45.420
裏側の状態管理クラスのデータを調整することも必要です｡

00:45.420 --> 00:53.410
つまり､ ドラッグ＆ドロップと､ 舞台裏での状態やデータの更新の2つを実装する必要があるのです｡

00:53.410 --> 00:59.870
ドラッグ＆ドロップについては､ 私のJavaスクリプト完全ガイドで学ぶことができるように､

00:59.870 --> 01:06.970
基本的にバニラJavaスクリプトで行うドラッグ＆ドロップを実装します｡

01:06.970 --> 01:09.690
基本的にはイベントリスナーをたくさん実装することで､

01:09.690 --> 01:11.960
もちろんこのモジュールでどのように動くかは次の講義で見ていただくとして､

01:11.960 --> 01:21.150
今回はtypescriptスタイルで実装するので､ typescriptの機能を使って強化していきましょう｡

01:21.150 --> 01:25.790
では､ さっそく､ typescriptの機能でどのように強化するか？

01:25.790 --> 01:28.423
ここでインターフェイスを再利用したいんです｡ 

01:29.280 --> 01:32.120
ドラッグ＆ドロップのインターフェースですが､

01:32.120 --> 01:39.060
以前使用したインターフェースのようにオブジェクトの構造を定義するだけではなく､

01:39.060 --> 01:42.010
特定のクラスが署名できる契約を設定し､

01:42.010 --> 01:51.980
基本的にドラッグ＆ドロップに役立つ特定のメソッドを実装するように強制することができます｡

01:51.980 --> 01:55.250
正確には､ 2つのインターフェースについて考えています｡

01:55.250 --> 02:00.920
もちろん､ これらのインターフェースの使用は任意ですが､ 基本的には､

02:00.920 --> 02:19.080
クラスがドラッグ可能になるため､ または有効なドロップターゲットになるために必要なすべてを実装するように強制するコードを提供することが可能になります｡

02:19.080 --> 02:21.710
では､ どのインターフェースのことを指しているのでしょうか？

02:21.710 --> 02:24.617
ドラッグ可能なインターフェースと､

02:26.200 --> 02:31.060
ドラッグターゲットと名付けたインターフェースを用意する｡

02:31.060 --> 02:32.950
ここで私が考えているのは､ ドラッグ可能な要素をレンダリングするクラスに､

02:32.950 --> 02:38.030
ドラッグ可能なインターフェイスを追加することです｡

02:38.030 --> 02:41.810
この例では､ プロジェクト・アイテム・クラスがそれにあたります｡ 

02:41.810 --> 02:44.170
プロジェクト・アイテム・クラスはレンダリングを担当し､

02:44.170 --> 02:49.230
これらのプロジェクト・アイテムはドラッグ可能な部分であるべきで､ ボックス､ アクティブ・プロジェクト､

02:49.230 --> 02:57.880
終了したプロジェクトは､ ここでプロジェクト・リスト・クラスがドラッグ・ターゲットになるはずです｡

02:57.880 --> 03:03.890
さて､ ではこれらのインターフェースは､ 何を実装したり､ クラスに追加したりすることを強制しているのでしょうか？

03:03.890 --> 03:05.760
まずはドラッガブルから｡ 

03:05.760 --> 03:09.550
ここでは､ 基本的に2つのイベントリスナーが必要であり､ したがって､

03:09.550 --> 03:12.540
これらのイベントに対して2つのハンドラが必要です｡

03:12.540 --> 03:17.070
ドラッグ＆ドロップを実装する場合､

03:17.070 --> 03:40.440
ドラッグイベントの開始をリスニングするリスナーと､ ドラッグイベントの終了をリスニングするリスナーが必要になることがあるからです｡

03:40.440 --> 03:42.580
ドラッグ開始イベントハンドラは､

03:42.580 --> 04:03.930
ドラッグイベントと呼ばれるイベントオブジェクトを取得します｡ これは､ TSコンフリクトの設定とそこに追加するライブラリのオプションで組み込まれた型であり､ 何も返しません｡

04:03.930 --> 04:06.970
今度はドラッグエンドハンドラが同様のイベントを取得し､

04:06.970 --> 04:10.730
ドラッグイベントも取得しますが､ すべて何も返しません｡

04:10.730 --> 04:13.130
さて､ これらをどのように応用するかは､ もちろんすぐにおわかりになると思いますので､

04:13.130 --> 04:15.810
ご容赦ください｡

04:15.810 --> 04:17.810
さて､ ドラッグターゲットはどうでしょう｡ 

04:17.810 --> 04:20.530
さて､ ターゲット､ つまり何かをドラッグできるボックスには､

04:20.530 --> 04:26.280
3つのイベントハンドラを実装したいと思います｡

04:26.280 --> 04:28.593
ドラッグオーバーハンドラ､

04:29.440 --> 04:34.280
ドロップハンドラ､ ドラッグリーブハンドラ｡

04:34.280 --> 04:36.470
さて､ これらは何をするものなのでしょうか？

04:36.470 --> 04:39.370
さて､ JavaScriptでドラッグ＆ドロップを実装する場合､

04:39.370 --> 04:50.160
ドラッグオーバーハンドラを実装して､ 基本的にJavaScriptでブラウザにドラッグしているものが有効なドラッグターゲットであることを通知する必要があります｡

04:50.160 --> 04:53.840
ドラッグオーバーハンドラで右のようにしないと､

04:53.840 --> 04:56.410
ドロップができなくなります｡

04:56.410 --> 04:57.980
ドラッグ オーバー

04:57.980 --> 05:00.760
ハンドラでドロップを許可し､

05:00.760 --> 05:06.500
ドロップ ハンドラでドロップを処理して､ データやUI

05:06.500 --> 05:11.960
を更新できます｡ ドラッグ リーブ ハンドラは､

05:11.960 --> 05:32.190
たとえば､ ユーザーがボックスの上に何かをドラッグしたときに視覚的なフィードバックを与える場合などに役立ちます｡

05:32.190 --> 05:36.250
さて､ 3つのハンドラともドラッグイベントを受け取り､

05:36.250 --> 05:41.473
何も返さないので､ このように適当に更新してみましょう｡

05:44.070 --> 05:47.250
そして､ この最後の担当者にも｡ 

05:47.250 --> 05:57.490
そして､ 単体ではあまり意味のないインターフェースをいくつか設定しました｡

05:57.490 --> 06:00.380
では､ このコンポーネントとプロジェクトアイテムのクラスを探してみましょう｡

06:00.380 --> 06:05.100
ここで､ インターフェースは単にカスタムオブジェクトの型を定義するために使われるのではなく､

06:05.100 --> 06:12.290
クラスのコントラクトとして使うことができることを思い出してください｡

06:12.290 --> 06:16.750
implementsを呼び出したり､ クラス名の後や､ 行っている拡張の候補の後にここにimplementsを追加して､

06:16.750 --> 06:20.900
インターフェースを実装することができます｡

06:20.900 --> 06:24.340
今回は､ ドラッガブルインタフェース｡ 

06:24.340 --> 06:27.250
さて､ そうすると､ 読みやすくするために､

06:27.250 --> 06:29.820
改行するように書式設定しました｡

06:29.820 --> 06:34.460
そうすると､ このクラスはインターフェースの実装が正しくないというエラーが発生します｡

06:34.460 --> 06:40.763
なぜなら､ ドラッガブルインターフェースは､ 2つのメソッドを追加することを強制するからです｡

06:42.840 --> 06:44.480
では､ ここに追加してみましょう｡ 

06:44.480 --> 06:46.290
コンストラクタを読み込むのかもしれません｡ 

06:46.290 --> 06:49.550
ドラッグイベントタイプのイベントを取得するドラッグ開始ハンドラを追加し､

06:49.550 --> 06:59.143
ドラッグイベントを受信するドラッグ終了ハンドラを追加しましょう｡

06:59.990 --> 07:02.010
そして､ この2つのメソッドが追加されました｡ 

07:02.010 --> 07:05.330
さて､ これだけではドラッグ＆ドロップはできません｡ 

07:05.330 --> 07:11.880
ドラッグ可能なコンポーネントやクラスを統一的に記述するのに役立ちます｡

07:11.880 --> 07:27.840
ドラッグ可能なクラスをどんどん追加していけば､ 常にこれらのメソッドが存在することになり､ コードの推論や作業が容易になります｡

07:27.840 --> 07:32.950
もちろん､ これはドラッグの開始イベントをリスニングするものではありません｡

07:32.950 --> 07:36.730
これは､ すでにあるconfigureメソッドでできることですが｡

07:36.730 --> 07:41.090
レンダリングされた要素に手を伸ばしてイベントリスナーを追加すれば､

07:41.090 --> 07:43.890
それがドラッグ開始イベントとなります｡

07:43.890 --> 07:45.780
ドラッグ開始イベントは､

07:45.780 --> 07:49.190
1つのイベントであり､ デフォルトのブラウザ

07:49.190 --> 07:57.793
dom イベントをリッスンすることができます｡

07:59.080 --> 08:04.870
イベントリスナーについて学んだように､

08:04.870 --> 08:14.750
デフォルトではこのようなことはありません｡

08:14.750 --> 08:16.900
オートバインド・デコレーターを追加したので､

08:16.900 --> 08:20.303
ドラッグスタート・ハンドラにこれを追加します｡

08:21.210 --> 08:28.530
ここで､ ドラッグの終了イベントをリッスンして､ ドラッグの終了ハンドラを指定することもできます｡

08:28.530 --> 08:32.690
visキーワードを使うつもりなら､

08:32.690 --> 08:37.730
ここにauto bindを追加することもできます｡

08:37.730 --> 08:40.520
ここではドラッグエンドを記録して､

08:40.520 --> 08:47.310
トリガーされたことを確認します｡

08:47.310 --> 08:49.850
ここではドラッグスタートでイベントを使い､ このイベントが発生したときに､

08:49.850 --> 08:53.720
とりあえずログを記録することにします｡

08:53.720 --> 08:55.610
今は､ それだけでは通用しませんが｡ 

08:55.610 --> 08:57.000
全部保存して､ ここに何かプロジェクトを追加すると､

08:57.000 --> 09:01.460
再ドラッグができないことがわかりますよね？

09:01.460 --> 09:07.390
もしドラッグしようとすると､ HTMLファイルの何かを変更する必要もあるため､

09:07.390 --> 09:09.720
それはうまくいきません｡

09:09.720 --> 09:11.810
このリスト項目は､ プロジェクトごとにレンダリングされるもので､

09:11.810 --> 09:14.550
ドラッグしたい場合は､ dragable属性を追加し､

09:14.550 --> 09:19.830
これをtrueに設定する必要があります｡

09:19.830 --> 09:21.040
それが大事なんです｡ 

09:21.040 --> 09:24.200
これは､ ブラウザにドラッグ可能であることを伝えるものです｡ 

09:24.200 --> 09:28.430
これで､ 保存した後､ ここにプロジェクトを再度追加すると､ 確かにドラッグできるようになり､

09:28.430 --> 09:35.720
マウスに張り付いて､ このあたりで本当にうまく動かすことができるようになりました｡

09:35.720 --> 09:38.530
また､ 右側では､ ドラッグを開始するとドラッグイベントが発生し､

09:38.530 --> 09:43.860
手を放すとドラッグ終了イベントも発生することがわかります｡

09:43.860 --> 09:46.510
リスナーが接続され､ ドラッグできるようになりました｡

09:46.510 --> 09:56.560
今度は､ ドラッグできるようにするボックスのドロップターゲットで作業して､ プロジェクトをそのボックスに追加します｡

09:56.560 --> 10:02.930
これは､ アプリの中にもあります｡

10:02.930 --> 10:02.930
cssファイルでは､

10:02.930 --> 10:06.550
リストの項目で､ プロジェクトLIでは､ これをもう少し見やすくするために､

10:06.550 --> 10:09.810
単純に背景色を白にします｡

10:09.810 --> 10:12.350
このプロジェクトLIに白を追加して､

10:12.350 --> 10:19.150
プロジェクトをドラッグして移動するときに､ 背景を白にすることで､ 少し見やすくしました｡

10:19.150 --> 10:20.840
でも､ 次のステップに進むことに変わりはありません｡ 

10:20.840 --> 10:22.700
彼のドロッパブルを作りたいのです｡ 
