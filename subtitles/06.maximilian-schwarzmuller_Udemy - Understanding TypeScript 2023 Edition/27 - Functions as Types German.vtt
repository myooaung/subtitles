WEBVTT

00:02.140 --> 00:04.980
-: Sie können also Typen für Funktionsparameter

00:04.980 --> 00:06.750
und für den Rückgabewert der Funktion

00:06.750 --> 00:08.100
verwenden.

00:08.100 --> 00:10.420
Was wäre, wenn es auch einen eigenen

00:10.420 --> 00:14.820
Funktionstyp gäbe, um die Sache auf die nächste Stufe zu heben?

00:14.820 --> 00:17.170
Lassen Sie mich nun klarstellen, was ich meine.

00:17.170 --> 00:19.333
Nehmen wir an, wir haben eine Variable "combinevalues"

00:21.360 --> 00:24.200
und diese Variable hat standardmäßig den Typ "any". Wie Sie nun gelernt haben, ist "any" nicht sehr nützlich.

00:24.200 --> 00:26.860
Was ich letztendlich tun möchte, ist, dass ich

00:26.860 --> 00:29.617
'combinevalues' gleich 'add' setzen möchte. Ich möchte also diese "add"-Funktion, einen Zeiger

00:29.617 --> 00:32.600
auf diese "add"-Funktion, in "combinevalues" speichern,

00:32.600 --> 00:35.330
so dass wir am Ende über die Konsole loggen, Werte

00:35.330 --> 00:37.430
kombinieren und "combinevalues"

00:37.430 --> 00:39.160
als Funktion ausführen können,

00:39.160 --> 00:41.580
die 8 und 8 hat.

00:41.580 --> 00:44.520
Wenn ich das nun speichere und ausführe, nachdem

00:44.520 --> 00:47.480
ich es kompiliert habe, also diese Datei kompiliert

00:47.480 --> 00:52.130
habe und sie dann neu laden lasse, erhalten wir hier 16.

00:52.130 --> 00:54.660
Das funktioniert also, und wir würden erwarten, dass es funktioniert, weil das

00:54.660 --> 00:55.840
normaler JavaScript-Code ist.

00:55.840 --> 00:58.820
Wir können einen Zeiger auf eine Funktion in einer

00:58.820 --> 01:00.880
Zahlenvariablen speichern, und

01:00.880 --> 01:03.350
dann führt das Angebot diese Variable als

01:03.350 --> 01:05.440
Funktion aus, weil sie ja auf die Funktion

01:05.440 --> 01:07.300
zeigt, richtig?

01:07.300 --> 01:08.580
Wir können diese Funktion also über diese Variable ausführen.

01:08.580 --> 01:09.910
Das Problem, das wir mit diesem

01:09.910 --> 01:13.250
Schnipsel hier aus der TypeScript-Perspektive haben, ist einfach,

01:13.250 --> 01:15.900
dass 'combinevalues' beliebig ist.

01:15.900 --> 01:19.640
Wenn ich also 'combinevalues' hier auf eine Zahl setze, können wir

01:19.640 --> 01:20.670
das leider nicht kompilieren,

01:20.670 --> 01:24.520
weil TypeScript keine Chance hat, zu erkennen, dass das unerwünscht

01:24.520 --> 01:27.910
ist oder ein Problem verursachen könnte.

01:27.910 --> 01:30.543
Aber zur Laufzeit würde es einen Fehler geben, weil wir

01:30.543 --> 01:34.230
offensichtlich versucht haben, 'combinevalues' als Funktion auszuführen,

01:34.230 --> 01:36.220
obwohl es eigentlich eine Zahl ist.

01:36.220 --> 01:39.090
Dies wollen wir nun vermeiden, und dazu müssen wir uns darüber

01:39.090 --> 01:42.080
im Klaren sein, dass "combinevalues" eine Funktion enthält.

01:42.080 --> 01:44.870
Der erste Schritt in diese Richtung

01:44.870 --> 01:48.650
ist, dass wir den Typ hier auf Funktion setzen.

01:48.650 --> 01:50.550
Function ist ein Typ, der von TypeScript

01:50.550 --> 01:54.770
bereitgestellt wird, und das macht deutlich, dass alles, was wir hier

01:54.770 --> 01:57.940
speichern, eine Funktion sein muss.

01:57.940 --> 02:00.870
Deshalb bekomme ich hier einen Fehler, weil 5 eine Zahl

02:00.870 --> 02:02.230
und keine Funktion ist.

02:02.230 --> 02:05.350
Und wenn ich das auskommentiere, können wir das kompilieren, sonst

02:05.350 --> 02:06.660
würden wir beim Kompilieren

02:06.660 --> 02:09.670
einen Fehler bekommen, und jetzt läuft es wieder wie erwartet.

02:09.670 --> 02:12.860
Das ist gut, aber nicht perfekt, weil wir jetzt sagen,

02:12.860 --> 02:15.380
dass dies eine Funktion sein sollte, aber

02:15.380 --> 02:17.940
es könnte auch "combinevalues" gleich

02:17.940 --> 02:21.460
"printResult" setzen, zum Beispiel hier.

02:21.460 --> 02:25.290
Und natürlich würde TypeScript sich nicht beschweren, weil 'printResult' eine

02:25.290 --> 02:27.150
Funktion ist, aber natürlich ist es keine

02:27.150 --> 02:29.600
Funktion, die zwei Argumente benötigt.

02:29.600 --> 02:32.620
Wenn ich dies also wieder kompiliere, wird sich TypeScript nicht beschweren.

02:32.620 --> 02:34.800
Aber wenn wir neu laden, sehen wir hier undefiniert und Ergebnis 8.

02:34.800 --> 02:38.720
Ich erhalte also nicht das gewünschte Ergebnis, weil

02:38.720 --> 02:42.470
ich dort die falsche Funktion gespeichert habe.

02:42.470 --> 02:45.980
Auch hier wäre es schön, wenn TypeScript uns dies

02:45.980 --> 02:47.350
mitteilen würde.

02:47.350 --> 02:49.980
TypeScript kann uns darüber nicht informieren, denn alles, was wir

02:49.980 --> 02:51.340
TypeScript gesagt haben, ist, dass

02:51.340 --> 02:54.410
wir dort eine Funktion speichern wollen, und das ist eindeutig der Fall.

02:54.410 --> 02:58.040
Es wäre also gut, wenn wir genauer sagen könnten, wie

02:58.040 --> 03:00.550
die Funktion aussehen soll, die wir

03:00.550 --> 03:03.810
in 'combinevalues' speichern wollen. Und genau hier kommen die Funktionstypen ins Spiel.

03:03.810 --> 03:07.200
Funktionstypen sind Typen, die eine Funktion in Bezug

03:07.200 --> 03:08.380
auf die Parameter und

03:08.380 --> 03:11.900
den Rückgabewert dieser Funktion beschreiben.

03:11.900 --> 03:15.690
Ein Funktionstyp wird mit dieser Pfeilfunktionsnotation erstellt, die

03:15.690 --> 03:18.360
Sie aus JavaScript kennen oder die dieser Notation zumindest

03:18.360 --> 03:19.870
sehr ähnlich ist.

03:19.870 --> 03:23.710
Sie fügen hier keine geschweiften Klammern hinzu, weil

03:23.710 --> 03:25.530
wir hier keine Pfeilfunktion,

03:25.530 --> 03:28.890
sondern einen Funktionstyp erstellen.

03:28.890 --> 03:31.610
Auf der rechten Seite dieses Pfeils geben Sie den Rückgabetyp

03:31.610 --> 03:33.690
der Funktion an, die Sie schließlich hier

03:33.690 --> 03:35.450
speichern möchten.

03:35.450 --> 03:37.180
Das sollte die Nummer sein.

03:37.180 --> 03:40.840
Damit sagen wir, dass 'combinevalues' jede Funktion akzeptiert, die

03:40.840 --> 03:42.640
keine Parameter benötigt und dann

03:42.640 --> 03:44.120
eine Zahl zurückgibt.

03:44.120 --> 03:47.200
Nun ist das natürlich nicht ganz das, was wir wollen.

03:47.200 --> 03:50.430
Wir wollen sicherstellen, dass "combinevalues" eine Funktion annimmt oder in

03:50.430 --> 03:51.840
der Lage ist, Funktionen zu speichern,

03:51.840 --> 03:54.180
die 2 Zahlen annehmen und eine Zahl zurückgeben.

03:54.180 --> 03:57.130
Und dafür können wir diesem Funktionstyp

03:57.130 --> 04:01.400
hier Parameter hinzufügen.

04:01.400 --> 04:02.400
Wir müssen nicht die Namen

04:02.400 --> 04:05.040
der Parameter von oben übernehmen, sondern nur die Typen.

04:05.040 --> 04:06.020
Wir könnten also a haben,

04:06.020 --> 04:09.060
das vom Typ Zahl sein sollte, und b, das vom Typ Zahl sein sollte.

04:09.060 --> 04:10.510
Und jetzt sagen wir TypeScript,

04:10.510 --> 04:14.070
dass 'combinevalues' jede Funktion akzeptieren sollte,

04:14.070 --> 04:15.660
die zwei Parameter annimmt,

04:15.660 --> 04:18.322
wobei jeder Parameter eine Zahl ist, und

04:18.322 --> 04:22.930
die Funktion insgesamt eine Zahl zurückgibt.

04:22.930 --> 04:24.350
Und deshalb beschwert sich TypeScript

04:24.350 --> 04:27.780
auch nicht darüber, dass wir "add" in combine values speichern, denn "add" ist eine Funktion,

04:27.780 --> 04:29.690
die diese Typdefinition perfekt erfüllt.

04:29.690 --> 04:33.380
Aber es beschwert sich über 'printResult', weil 'printResult',

04:33.380 --> 04:36.890
wie es uns hier sagt, eine Funktion des Typs ein Argument

04:36.890 --> 04:40.632
ist, das eine Zahl ist, und nichts zurückgegeben wird,

04:40.632 --> 04:44.360
wo wir doch eigentlich eine Funktion mit zwei Argumenten

04:44.360 --> 04:48.690
erwarten, bei der jedes Argument eine Zahl ist und wir auch eine

04:48.690 --> 04:52.310
Zahl zurückgeben.

04:52.310 --> 04:55.810
Wir haben hier also eine Fehlanpassung, und wenn ich versuchen

04:55.810 --> 04:58.700
würde, dies zu kompilieren, würden wir hier natürlich

04:58.700 --> 05:00.480
einen Fehler im Compiler erhalten,

05:00.480 --> 05:03.440
und wir können dies nur beheben, indem wir diese

05:03.440 --> 05:06.270
Codezeile entfernen.

05:06.270 --> 05:07.110
Jetzt können wir es ohne Fehler neu kompilieren.

05:07.110 --> 05:10.930
Und jetzt läuft es wie erwartet.

05:10.930 --> 05:12.060
Mit Funktionstypen

05:12.060 --> 05:15.140
können wir also beschreiben, welche Art von Funktion

05:15.140 --> 05:17.413
wir irgendwo verwenden wollen.

05:18.290 --> 05:20.887
Sei es ein erwarteter Wert in einem Parameter,

05:20.887 --> 05:23.890
um eine Funktion mit einem Rückruf zu erstellen, oder,

05:23.890 --> 05:25.420
wie hier, eine Variable.
