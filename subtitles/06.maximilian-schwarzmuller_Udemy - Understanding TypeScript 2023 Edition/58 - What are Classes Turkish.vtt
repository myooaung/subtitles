WEBVTT

00:02.100 --> 00:04.890
Eğitmen: Sınıfları anlamak için nesne yönelimli

00:04.890 --> 00:07.040
programlamayı anlayalım.

00:07.040 --> 00:10.050
Şimdi, bilgi seviyenize bağlı olarak ve modern

00:10.050 --> 00:12.560
JavaScript ve belki de diğer bazı programlama

00:12.560 --> 00:15.340
dilleri ile çalıştıysanız, sınıfların ne için

00:15.340 --> 00:18.320
var olduğunu ve OOP nesne yönelimli programlamanın

00:18.320 --> 00:22.270
ne anlama geldiğini biliyor olabilirsiniz.

00:22.270 --> 00:24.570
Bu nedenle, kod yazdığımız bölümlere

00:24.570 --> 00:27.720
doğrudan geçmek için bu dersi atlayabilirsiniz.

00:27.720 --> 00:29.330
Aksi takdirde kesinlikle

00:29.330 --> 00:32.200
benimle kalın çünkü bunu anlamak önemlidir.

00:32.200 --> 00:35.240
Nesne yönelimli programlamanın arkasındaki fikir ve

00:35.240 --> 00:38.550
göreceğiniz gibi sınıflar bunun için önemli olacaktır, kodunuzda

00:38.550 --> 00:43.110
gerçek hayattaki varlıklarla çalıştığınızı söyleyebilirsiniz.

00:43.110 --> 00:47.370
Böylece, en azından bir geliştirici olarak kodunuz hakkında mantık

00:47.370 --> 00:52.110
yürütmenizi kolaylaştırmak için kodunuzdaki nesnelerle mümkün olduğunca

00:52.110 --> 00:54.410
gerçek hayattaki nesnelere benzeyen

00:54.410 --> 00:56.250
nesnelerle çalışırsınız.

00:56.250 --> 00:59.150
Örneğin, bir çevrimiçi mağaza inşa ediyor olabiliriz

00:59.150 --> 01:01.270
ve orada bir ürün listemiz olabilir.

01:01.270 --> 01:05.190
Bu nedenle, bir ürün listesini yönetmek için ihtiyaç duyduğumuz her şeye sahip

01:05.190 --> 01:08.140
olan bir ürün listesi nesnesiyle çalışmak isteyebiliriz.

01:08.140 --> 01:11.570
Listenin kendisi olan öncü ürünlere ürün eklemek

01:11.570 --> 01:13.370
için bir yöntem.

01:13.370 --> 01:15.670
Örneğin bu, bir hizmetten veya bir veritabanından

01:15.670 --> 01:19.540
alınan bir ürün listesinin oluşturulmasından ve yönetilmesinden

01:19.540 --> 01:22.840
sorumlu bir nesne olabilir.

01:22.840 --> 01:25.530
Yani bu ürün tüm işleme, getirme ve yönetim

01:25.530 --> 01:27.260
mantığını barındırıyor.

01:27.260 --> 01:29.420
İşte bu bir ürün listesi.

01:29.420 --> 01:32.510
Oluşturmakta olduğumuz web sitesi programımızda,

01:32.510 --> 01:33.870
bireysel ürünlerle de

01:33.870 --> 01:36.000
çalışmamız gerekebilir.

01:36.000 --> 01:39.540
Bu nedenle, her ürün için bir tane olmak üzere, tek bir ürünü

01:39.540 --> 01:40.960
yönetmekten sorumlu bir

01:40.960 --> 01:43.930
nesne veya birden fazla nesne de isteyebiliriz.

01:43.930 --> 01:47.180
Bu ürünle ilgili ayrıntıları tutabilir ve işleyebilir,

01:47.180 --> 01:49.830
belki bir sepete eklememize izin verebilir,

01:49.830 --> 01:51.260
bunun gibi şeyler.

01:51.260 --> 01:54.900
Dolayısıyla, ekrana kullanıcı arayüzü çizmek istediğimizde, bunu

01:54.900 --> 01:57.010
JavaScript ve dolayısıyla TypeScript

01:57.010 --> 01:58.740
aracılığıyla yönetmek istiyoruz,

01:58.740 --> 02:00.550
o zaman bunu ürün listesi ve temel

02:00.550 --> 02:02.970
verileri yönetme mantığını tutan ve aynı zamanda

02:02.970 --> 02:05.370
içeriği ekranda görüntüleyen bir ürün nesnesi

02:05.370 --> 02:07.760
ile uygulayabiliriz.

02:07.760 --> 02:10.010
Ve tabii ki bu nedenle bu iki nesne bir

02:10.010 --> 02:11.940
şekilde ilişkili olacaktır.

02:11.940 --> 02:14.790
Ayrıca ekranımızda alışveriş kartını oluşturmaktan ve yönetmekten

02:14.790 --> 02:16.410
sorumlu olan bir alışveriş sepeti

02:16.410 --> 02:18.040
nesnemiz de olabilir.

02:18.040 --> 02:20.380
Elbette ürünle de bağlantılı.

02:20.380 --> 02:22.930
Ve bu nedenle alışveriş kartımızı oluşturmak,

02:22.930 --> 02:24.880
sipariş vermek ve sunucu ile iletişim

02:24.880 --> 02:27.240
kurmak için ihtiyaç duyduğumuz tüm mantığı

02:27.240 --> 02:28.073
tutar.

02:28.073 --> 02:31.190
Bu, oluşturduğumuz uygulama hakkında nasıl düşünebileceğimizin

02:31.190 --> 02:33.010
bir yolu olabilir.

02:33.010 --> 02:35.590
İnsan olarak bize anlamlı gelen mantıklı parçalara

02:35.590 --> 02:37.670
nasıl bölebileceğimizi.

02:37.670 --> 02:40.320
Ve TypeScript ve JavaScript'teki kodlarda,

02:40.320 --> 02:42.920
çoğu modern programlama dilinde, bu aktif

02:42.920 --> 02:46.750
olarak desteklenir çünkü özellikleri ve yöntemleri tutan daha

02:46.750 --> 02:48.900
karmaşık veri yapıları olan nesnelerimiz

02:48.900 --> 02:50.640
vardır.

02:50.640 --> 02:53.340
Ve tabii ki JavaScript'te de buna sahibiz.

02:53.340 --> 02:57.310
Ancak bu konuda bize yardımcı olacak derslerimiz de olabilir.

02:57.310 --> 02:59.100
Şimdi sınıfların arkasındaki fikir nedir?

02:59.100 --> 03:00.740
Peki örnekler nedir?

03:00.740 --> 03:02.030
Bu nesneleri elde ettiğimizde

03:02.030 --> 03:04.690
ve bu nesne yönelimli yaklaşımı izlediğimizde,

03:04.690 --> 03:07.500
uygulamamızı veya uygulama mantığımızı, mantığımızın

03:07.500 --> 03:13.750
bölümlerini yöneten bu tür nesnelere bölmeyi düşünebiliriz.

03:13.750 --> 03:17.000
Şimdi JavaScript'te var olan bu nesneleri kullanma

03:17.000 --> 03:19.340
fikriyle bağlantılı olarak, nesneleri

03:19.340 --> 03:23.910
orada sınıflara sahip olma fikri olarak kullanabiliriz.

03:23.910 --> 03:27.470
Nesneler, kodumuzda birlikte çalıştığımız somut şeylerdir.

03:27.470 --> 03:30.380
Üzerinde metot çalıştırmak için metotları saklamak üzere

03:30.380 --> 03:33.450
veri depolamak için kullandığımız veri yapıları.

03:33.450 --> 03:36.570
Sınıflar nesneler için planlardır.

03:36.570 --> 03:40.880
Sınıflar, nesnelerin nasıl görünmesi gerektiğini; hangi verileri tutmaları gerektiğini,

03:40.880 --> 03:42.230
hangi yöntemlere sahip olmaları

03:42.230 --> 03:44.070
gerektiğini tanımlamamızı sağlar,

03:44.070 --> 03:48.240
böylece bu sınıflara dayalı nesneleri kolayca oluşturabiliriz.

03:48.240 --> 03:51.830
Ve daha sonra bu sınıfların örneklerini çağırıyoruz.

03:51.830 --> 03:54.830
O halde bir nesne, böyle bir sınıfı temel alıyorsa

03:54.830 --> 03:56.850
bir sınıfın örneğidir, böylece aynı

03:56.850 --> 03:59.900
sınıfları temel alan aynı yöntemlerle aynı yapıya

03:59.900 --> 04:02.230
sahip birden fazla nesneyi hızlı bir şekilde

04:02.230 --> 04:04.090
çoğaltabiliriz.

04:04.090 --> 04:07.280
Dolayısıyla sınıflar, nesnelerin nasıl görünmesi gerektiğini, hangi özelliklere

04:07.280 --> 04:10.170
ve yöntemlere sahip olduklarını vb. tanımlamamıza yardımcı olur.

04:10.170 --> 04:14.920
Dolayısıyla, sınıflar nesnelerin oluşturulmasını hızlandırmak için vardır.

04:14.920 --> 04:16.160
Ve zaten bildiğiniz

04:16.160 --> 04:20.070
nesne gerçek gösterimini kullanmaya bir alternatiftir.

04:20.070 --> 04:21.330
Sadece işi kolaylaştırıyorlar.

04:21.330 --> 04:24.620
Sınıflar, genellikle aynı yapıya ve aynı yöntemlere sahip

04:24.620 --> 04:26.900
olan ve yalnızca içinde depolanan kesin

04:26.900 --> 04:28.030
veri ayrıntılarında

04:28.030 --> 04:32.780
farklılık gösterebilen birden fazla nesne oluşturmayı kolaylaştırır.

04:32.780 --> 04:34.540
Diyelim ki nesnelerle temsil etmek

04:34.540 --> 04:36.670
istediğimiz birden fazla kişi var.

04:36.670 --> 04:39.330
Her kişinin bir adı ve bir yaşı olabilir,

04:39.330 --> 04:40.830
değerler farklı olacaktır,

04:40.830 --> 04:43.310
genel yapı aynıdır.

04:43.310 --> 04:44.500
Yani teori bu.

04:44.500 --> 04:46.113
Bunu pratikte görelim.
