WEBVTT

00:02.160 --> 00:04.860
Prezenter: Więc teraz, gdy widzieliśmy kolejny ładny przykład

00:04.860 --> 00:06.440
tego, jak możemy pracować z dekoratorami,

00:06.440 --> 00:09.040
jest jeden ostatni przykład, który chcę zanurkować.

00:09.040 --> 00:11.997
I to są dekoratory do walidacji.

00:11.997 --> 00:14.560
W tym celu na dole pliku dodam

00:14.560 --> 00:17.733
jeszcze jedną nową klasę tutaj.

00:18.780 --> 00:20.530
To może być kurs.

00:20.530 --> 00:23.903
Teraz kurs powinien mieć tytuł, który jest ciągiem znaków.

00:25.430 --> 00:27.483
I może cena, która jest liczbą.

00:29.730 --> 00:32.640
Następnie tutaj mamy konstruktor, w którym otrzymujemy

00:32.640 --> 00:34.440
obie wartości tutaj i celowo

00:35.550 --> 00:37.780
nie używam tutaj skrótu, aby móc łatwo

00:37.780 --> 00:40.953
dodać dekoratory właściwości.

00:42.690 --> 00:44.560
Następnie ustawiam ten tytuł

00:44.560 --> 00:46.653
równy t, a tę cenę równą p.

00:47.990 --> 00:50.530
Oczywiście teraz, gdy chcemy zainicjować ten

00:50.530 --> 00:53.610
kurs, musimy przekazać poprawny tytuł i poprawną cenę.

00:53.610 --> 00:56.730
Ale jednym z powszechnych scenariuszy, które możesz napotkać

00:56.730 --> 00:59.630
w niektórych aplikacjach, jest pobieranie danych,

00:59.630 --> 01:03.340
powiedzmy z zasobów internetowych i otrzymujesz dane, w których

01:03.340 --> 01:05.854
domyślasz się, że masz kilka kursów, powiedzmy,

01:05.854 --> 01:08.110
ale nie wiesz na pewno.

01:08.110 --> 01:12.839
Lub, inny możliwy scenariusz, pozwalasz użytkownikom wprowadzić dane i po prostu chcesz

01:12.839 --> 01:15.490
przypisać te dane i handlować nowym kursem z danymi

01:15.490 --> 01:18.370
wprowadzonymi przez użytkownika i zakładasz, że jest

01:18.370 --> 01:21.280
to właściwe, ale nie masz gwarancji, że jest to właściwe

01:21.280 --> 01:22.500
i dlatego chcesz zatwierdzić

01:22.500 --> 01:24.210
dane wejściowe.

01:24.210 --> 01:26.380
Taki właśnie scenariusz chcę tu sfingować.

01:26.380 --> 01:29.940
Lets say in our index html file, we get a simple form here

01:30.894 --> 01:32.840
and I'll not style it, so it will

01:32.840 --> 01:36.074
now be that beautiful, but we have a simple form here

01:36.074 --> 01:41.074
with the input of type text and a placeholder of title, woops, course, title and

01:41.390 --> 01:44.620
an id of let's say title and below that we have a number

01:44.620 --> 01:46.870
input where the type is all the text,

01:46.870 --> 01:50.605
but it's the course price and the id is price.

01:50.605 --> 01:55.030
A potem mamy nasz przycisk, w którym to składamy.

01:55.030 --> 02:00.030
Tak więc przycisk jest typu submit.

02:00.040 --> 02:02.780
Czyli bardzo prosty formularz i tak jak mówiłem nie jest on taki piękny

02:02.780 --> 02:04.280
jeśli mamy tutaj na niego spojrzenie,

02:04.280 --> 02:06.070
ale ma wszystko co jest nam potrzebne.

02:06.070 --> 02:08.763
Teraz podepnijmy tutaj słuchacza do formularza.

02:09.830 --> 02:14.780
Więc tutaj mam mój courseForm, który mogę uzyskać za pomocą document, querySelector,

02:14.780 --> 02:18.840
form i dodaję wykrzyknik, ponieważ wiem, że otrzymam jeden, więc to

02:18.840 --> 02:21.910
nie będzie null, a następnie na formularzu możemy dodaćEventListener,

02:21.910 --> 02:25.050
listener zdarzeń submit i wtedy otrzymujemy obiekt

02:26.390 --> 02:29.300
zdarzenia przekazany do funkcji, którą przypisałem

02:29.300 --> 02:32.360
automatycznie.

02:32.360 --> 02:35.450
Tam chcę wywołać zdarzenie preventDefault, abyśmy nie przesłali

02:35.450 --> 02:38.030
formularza i nie wysłali żadnego żądania http.

02:38.030 --> 02:40.570
A następnie chcemy wyodrębnić

02:40.570 --> 02:42.910
dane dla tytułu i dla ceny.

02:42.910 --> 02:45.779
Tak więc tytuł można wyodrębnić sięgając

02:45.779 --> 02:49.700
do document, querySelector, a właściwie skoro przypisaliśmy

02:49.700 --> 02:54.700
id, getElementById, title i wiemy, że będzie to HTMLInputElement

02:55.560 --> 03:01.700
więc możemy użyć typecasting, aby typescript o tym wiedział, a cena to document,

03:01.700 --> 03:06.174
getElementById, price i również możemy to przekonwertować

03:06.174 --> 03:09.672
na InputElement.

03:09.672 --> 03:11.320
I ja tam właściwie dla tych elementów

03:11.320 --> 03:14.520
więc zmienimy nazwy stałych na titleEL i priceEl i aby uzyskać

03:14.520 --> 03:17.779
konkretny tytuł możemy teraz przejść do titleEl, dostęp do

03:17.779 --> 03:20.930
właściwości value, a aby uzyskać cenę możemy zrobić to samo

03:20.930 --> 03:23.400
dla priceElement i tam również uzyskać wartość,

03:23.400 --> 03:25.260
a ja chcę mieć dodawane jako liczba,

03:25.260 --> 03:26.840
więc dodaję plus przed nim, aby

03:26.840 --> 03:30.060
przekonwertować go na liczbę.

03:30.060 --> 03:34.017
Teraz to tyle, ale teraz chcę stworzyć nowy kurs

03:34.017 --> 03:36.090
z tymi informacjami.

03:36.090 --> 03:39.060
Mamy więc tutaj stworzony kurs, w którym

03:39.060 --> 03:43.850
mogę wywołać nowy kurs i przekazuję tytuł i cenę.

03:43.850 --> 03:46.770
Teraz typescript akceptuje to, ponieważ tytuł będzie ciągiem,

03:46.770 --> 03:48.640
a ponieważ konwertuję to wejście na liczbę,

03:48.640 --> 03:50.200
cena będzie liczbą.

03:50.200 --> 03:54.160
Więc, jeśli następnie log konsoli, utworzony kurs następnie, możemy sprawdzić,

03:54.160 --> 03:55.530
czy to działa.

03:55.530 --> 03:58.693
Zapiszmy to, przeładujmy, może wyczyśćmy konsolę, abyśmy mogli

03:58.693 --> 04:00.680
wyraźnie zobaczyć wyjście, a następnie

04:00.680 --> 04:02.400
dodajmy tutaj nowy kurs.

04:02.400 --> 04:05.785
Javascript kompletny przewodnik kosztował

04:05.785 --> 04:08.010
199$ i to chyba działa.

04:08.010 --> 04:11.010
Teraz niestety działa to jednak tylko

04:11.010 --> 04:13.290
wtedy, gdy nic nie wpisuję.

04:13.290 --> 04:16.600
Jeśli teraz kliknę Zapisz, widzimy, że ten kurs został utworzony.

04:16.600 --> 04:19.820
Teraz, to technicznie jest ważny kurs, ale oczywiście

04:19.820 --> 04:23.121
nie jest naprawdę ważny dla naszej aplikacji.

04:23.121 --> 04:26.220
Prawdopodobnie chcemy mieć tytuł, który nie jest pusty

04:26.220 --> 04:28.620
i cenę, która jest większa niż zero.

04:28.620 --> 04:30.660
Chcemy więc dodać walidację.

04:30.660 --> 04:32.670
Oczywiście możemy po prostu dodać

04:32.670 --> 04:37.130
tutaj if check i sprawdzić czy title, trim, length jest większe od zera,

04:37.130 --> 04:38.830
czyli nie jest puste i gdzie

04:38.830 --> 04:41.100
walidujemy również cenę.

04:41.100 --> 04:43.870
Ale to oznacza, że zawsze, gdy tworzymy nowy

04:43.870 --> 04:47.880
kurs, musimy dodać logikę walidacji tutaj, zanim go dodamy.

04:47.880 --> 04:49.990
Czy nie byłoby miło, gdyby logika walidacji

04:49.990 --> 04:51.910
była zawarta w klasie kursu, za pomocą

04:51.910 --> 04:53.940
dekoratorów, może?

04:53.940 --> 04:56.770
I to jest właśnie to, co chcę tutaj zrobić.

04:56.770 --> 04:59.910
Teraz przedstawię tylko podstawowy pomysł, jak moglibyśmy

04:59.910 --> 05:01.447
to zaimplementować, w następnym

05:01.447 --> 05:04.861
module pokażę przykładowy pakiet, który robi to w bardziej

05:04.861 --> 05:12.080
rozbudowany sposób i którego następnie wszyscy użyjemy, aby się nim trochę pobawić.

05:12.080 --> 05:14.530
Teraz jednak tutaj chcę to zaimplementować

05:14.530 --> 05:16.300
za pomocą własnych dekoratorów

05:16.300 --> 05:19.370
i dodam dekorator wymagany tutaj i dodamy kolejną

05:19.370 --> 05:24.433
funkcję dekoratora, którą nazwę PositiveNumber.

05:26.710 --> 05:28.510
Więc mam tu dwóch dekoratorów.

05:28.510 --> 05:31.240
I teraz mój pomysł jest taki, że możemy

05:31.240 --> 05:35.369
je dodać do naszych właściwości, na przykład Required przed

05:35.369 --> 05:40.369
tytułem i positiveNumber przed ceną i typescript rejestruje to gdzieś,

05:41.740 --> 05:44.020
a następnie mamy trzecią funkcję,

05:44.020 --> 05:49.020
validate, do której możemy przekazać obiekt, więc dowolny obiekt i typescript

05:49.490 --> 05:54.490
ma spojrzenie na projekt, znajduje wszelkie walidacje, które zarejestrowaliśmy

05:55.120 --> 06:03.410
na tej klasie dla tego obiektu wcześniej i stosuje naszą logikę walidacji.

06:03.410 --> 06:05.480
Taki pomysł mam tutaj.

06:05.480 --> 06:08.240
Tak więc, może to być część biblioteki strony trzeciej, którą

06:08.240 --> 06:11.170
wystawiamy na widok, a następnie po prostu importujesz wymaganą liczbę

06:11.170 --> 06:14.620
dodatnią i zatwierdzasz, aby najpierw skonfigurować walidatory, a następnie

06:14.620 --> 06:16.750
w pewnym momencie wywołać walidację.

06:16.750 --> 06:18.634
Więc na przykład tutaj, kiedy

06:18.634 --> 06:22.462
stworzyliśmy kurs, możemy wywołać validate i przekazać

06:22.462 --> 06:27.462
createdCourse i jeśli to nie jest prawda, więc powiedzmy, że to powinno

06:30.370 --> 06:31.660
zwrócić true lub false,

06:31.660 --> 06:35.040
jeśli to nie jest prawda, to rzucamy błąd lub pokazujemy

06:35.040 --> 06:42.960
alert, invalid input please try again i tylko w przeciwnym razie kontynuujemy.

06:42.960 --> 06:43.870
Więc to jest mój pomysł.

06:43.870 --> 06:46.540
To możemy nazwać validate, to zwraca true lub false.

06:46.540 --> 06:48.793
Prawda, jeśli jest ważna, fałsz, jeśli

06:48.793 --> 06:51.670
nie jest ważna i dlatego możemy użyć wyniku.

06:51.670 --> 06:53.730
Dlatego też otrzymujemy kilka rzeczy do zrobienia.

06:53.730 --> 06:56.290
Musimy się upewnić, że kiedy dodajemy tutaj dekorator,

06:56.290 --> 06:59.350
jest to w jakiś sposób przechowywane gdzieś.

06:59.350 --> 07:00.970
Ponownie, pamiętaj, że może

07:00.970 --> 07:02.950
to być część naszej własnej biblioteki

07:02.950 --> 07:05.710
stron trzecich, więc tam możemy mieć jakiś rodzaj

07:05.710 --> 07:10.050
magazynu, który przechowuje, że dla tej klasy i tej właściwości tytułu na przykład,

07:10.050 --> 07:12.480
chcemy, aby była wymagana.

07:12.480 --> 07:15.630
W validate możemy sprawdzić, czy w magazynie dla obiektu,

07:15.630 --> 07:19.026
który otrzymaliśmy, dla klasy, na której obiekt jest oparty,

07:19.026 --> 07:21.990
mamy zarejestrowany walidator dla tytułu, dla ceny

07:21.990 --> 07:23.330
i tak dalej.

07:23.330 --> 07:25.260
A następnie uruchamiamy naszą logikę walidacji.

07:25.260 --> 07:26.453
To jest mój pomysł tutaj.
