WEBVTT

00:02.120 --> 00:05.300
Adam: Peki şimdi koordinatları bir harita üzerinde nasıl çıkarabiliriz?

00:05.300 --> 00:08.180
Bunun için yine bir Google API kullanacağız.

00:08.180 --> 00:10.690
Google JavaScript Maps veya Google JS Maps

00:10.690 --> 00:13.810
için arama yaparsanız, google JavaScript Google Maps

00:13.810 --> 00:16.970
API için resmi dokümanları bulabilirsiniz.

00:16.970 --> 00:19.660
Ve burada bir harita oluşturmak için web uygulamanızda Google Haritalar'ı

00:19.660 --> 00:22.020
nasıl kullanabileceğinizi öğreneceksiniz.

00:22.020 --> 00:24.720
Ve gerçekten anlaşılır ve basittir.

00:24.720 --> 00:27.280
Öncelikle bu Google Maps SDK'yı uygulamamıza

00:27.280 --> 00:31.720
ekleyecek olan bu betiği buraya eklememiz gerekiyor.

00:31.720 --> 00:34.220
Bu yüzden bu betiği alın ve betiğinizin

00:34.220 --> 00:38.210
üzerindeki index html dosyanıza ekleyin.

00:38.210 --> 00:40.670
Şimdi önemli olan, bu NPM'yi yüklemiyoruz,

00:40.670 --> 00:42.920
çünkü NPM'de yayınlanmadı, bu nedenle

00:42.920 --> 00:45.900
betiği doğrudan Google sunucularından çeken bu CDN

00:45.900 --> 00:48.140
bağlantısını kullanıyoruz.

00:48.140 --> 00:51.560
Ve burada API_KEY'imizi ayarlamamız gerekiyor.

00:51.560 --> 00:54.390
Tabii ki bu API_KEY zaten burada typescript

00:54.390 --> 00:57.430
dosyasında var, bu yüzden bunu index html'e

00:57.430 --> 01:02.170
kopyalayabilir ve YOUR_API_KEY'i bununla değiştirebiliriz.

01:02.170 --> 01:06.120
Ayrıca sondaki şu "&amp;callback=initMap" şeyinden de kurtulun,

01:06.120 --> 01:07.150
bu harita yüklenir

01:07.150 --> 01:10.240
yüklenmez veya bu SDK yüklenir yüklenmez bir işlevi

01:10.240 --> 01:14.843
tetikleyecektir ve bu burada istediğim bir şey değil.

01:15.840 --> 01:19.760
Böylece, bu SDK'yı yüklüyoruz ve şimdi onu kullanabiliriz

01:19.760 --> 01:24.250
ve işte burada bir sorunumuz olacak.

01:24.250 --> 01:26.210
Bir haritayı işlemek için kullanmak istiyorum

01:26.210 --> 01:28.710
ve bir haritayı işlemek aslında çok kolay.

01:28.710 --> 01:31.070
Resmi dokümanlarda, sonunda bu google'ı örneklememiz gerektiğini

01:31.070 --> 01:33.870
görüyoruz. Haritalar. Harita kurucu

01:33.870 --> 01:36.870
işlevi, ona bir merkez iletir,

01:36.870 --> 01:38.960
bu da esasen...

01:38.960 --> 01:41.720
Bu koordinat çiftini arkadan alıyoruz ve bir yakınlaştırma

01:41.720 --> 01:43.250
düzeyi ekliyoruz.

01:43.250 --> 01:45.820
Böylece bunu kopyalayabilir ve koordinatları

01:45.820 --> 01:48.710
aldıktan sonra bu kodu çalıştırabilir ve

01:48.710 --> 01:50.010
haritayı burada "Map"

01:50.010 --> 01:53.750
adlı bir sabitte saklayabiliriz. Ama tabii ki burada bir hata alıyoruz.

01:53.750 --> 01:55.117
"Google adı bulunamıyor,"

01:55.117 --> 01:57.600
ve bu mantıklı, bu küresel olarak mevcut

01:57.600 --> 02:01.320
olmayacak, ancak typescript bunu bilmiyor.

02:01.320 --> 02:03.380
İçe aktardığımız bu JavaScript SDK sayesinde

02:03.380 --> 02:06.300
küresel olarak kullanılabilir olacak.

02:06.300 --> 02:08.343
Ama tabii ki dizgi bunu bilmiyor.

02:09.390 --> 02:12.270
Orada neler yapabileceğinizi öğreneceksiniz,

02:12.270 --> 02:14.200
elbette "declare var google"

02:14.200 --> 02:19.200
kullanabilir ve bunu herhangi birine ayarlayabilirsiniz.

02:19.990 --> 02:21.020
Bununla dizgiye, "Sorun

02:21.020 --> 02:22.887
değil, bu var olacak, endişelenme. Bunu yapabiliriz ve hata ortadan kalkar.

02:22.887 --> 02:26.480
Artık burada sabit kodlanmış olanlar yerine koordinatlarımızı

02:26.480 --> 02:29.060
da kullanabiliriz ve ayrıca bir işaretleyici

02:29.060 --> 02:33.480
oluşturmak istiyorsak, bu da mümkündür.

02:33.480 --> 02:36.430
Resmi dokümanlarda, "İşaretleyici ile harita ekleme"

02:36.430 --> 02:37.930
üzerine tıkladığınızda, işaretleyici

02:37.930 --> 02:39.517
eklemenin basit olduğunu öğreniyoruz,

02:39.517 --> 02:41.520
sadece oluşturulan haritayı kullanıyoruz

02:41.520 --> 02:44.600
ve bu komutla bir işaretleyici oluşturuyoruz ve bu haritayı

02:44.600 --> 02:47.223
işaret ediyoruz.

02:49.040 --> 02:50.950
Bu kod parçacığını buraya kopyalayacağız

02:50.950 --> 02:52.980
ve kodumuza geri döndüğümüzde, haritayı

02:52.980 --> 02:56.130
oluşturduktan sonra, işaretleyicimi bu şekilde oluşturuyorum

02:56.130 --> 02:59.160
ve buradaki konum yine benim koordinatlarım.

02:59.160 --> 03:01.160
Şimdi bu bir harita oluşturacak

03:01.160 --> 03:04.173
ve üzerine bir işaretçi yerleştirecektir.

03:05.040 --> 03:06.600
Geriye kalan tek şey, bu haritanın

03:06.600 --> 03:08.580
doğru yerde işlendiğinden emin olmamız

03:08.580 --> 03:10.350
gerektiğidir.

03:10.350 --> 03:12.350
Varsayılan olarak I ile başlayan bir öğe arar. D. "harita" ve burada sahip

03:12.350 --> 03:14.010
olduğumuz şey de bu.

03:14.010 --> 03:16.670
Ama eğer farklı bir I seçtiyseniz. D. burada, bunu typescript

03:16.670 --> 03:18.720
kodunuzda ayarladığınızdan emin olun.

03:18.720 --> 03:20.470
Bununla

03:20.470 --> 03:23.473
birlikte, bunu kaydedersek, hatasız

03:24.610 --> 03:26.890
derlenir ve şimdi buraya bir

03:26.890 --> 03:30.640
adres girersem, bunu oluşturması gerekir.

03:30.640 --> 03:33.450
Yani bu çalışıyor ve biraz daha yakınlaştırmak için buradaki

03:33.450 --> 03:35.320
yakınlaştırma seviyesini ayarlayabiliriz,

03:35.320 --> 03:38.650
örneğin 16 olarak değiştirdik ve şimdi bunu denersek biraz daha net

03:38.650 --> 03:40.370
görebiliriz.

03:40.370 --> 03:42.910
Ama işe yarıyor ve biz de bunu söyleyebiliyoruz.

03:42.910 --> 03:45.640
Etrafta gezinebilir ve bu haritayı kullanabiliriz.

03:45.640 --> 03:47.480
Bunların hepsi güzel, ancak optimum değil.

03:47.480 --> 03:50.420
Elbette çalışıyor, "declare var google"

03:50.420 --> 03:53.340
sayesinde herhangi bir hata almıyoruz.

03:53.340 --> 03:56.760
Ancak herhangi bir tür desteği de alamıyoruz.

03:56.760 --> 03:58.810
Eğer bir hata yaparsam,

03:58.810 --> 04:01.550
örneğin " map" yerine ". haritaları" sorunsuz bir şekilde derleniyor

04:01.550 --> 04:02.960
ve yalnızca üretim aşamasında

04:02.960 --> 04:06.730
çöküyor.

04:06.730 --> 04:08.860
Eğer bir harita oluşturmaya çalışırsam.

04:08.860 --> 04:11.280
Şimdi burada hata işleyicimiz tarafından yakalanan bir hata alıyorum.

04:11.280 --> 04:13.150
Bu elbette bizim istediğimiz şey değil.

04:13.150 --> 04:16.493
Tip desteği istiyoruz, bunun gibi döküm hatalarını çalışma zamanında değil,

04:17.470 --> 04:19.770
geliştirme sırasında ele almak istiyoruz.

04:19.770 --> 04:22.880
Peki dizginin Google Haritalar'ı bilmesini nasıl sağlayabiliriz?

04:22.880 --> 04:27.380
Kurtarmaya gelen tipler.

04:27.380 --> 04:31.080
"Google maps türleri" diye aratırsanız, Google Maps için

04:31.080 --> 04:32.470
türler ekleyen çeşitli

04:32.470 --> 04:34.160
paketler bulursunuz.

04:34.160 --> 04:37.350
Şimdi Google Maps paketini NPM aracılığıyla yüklemedik, ancak

04:37.350 --> 04:38.800
yine de bu paket için türleri

04:38.800 --> 04:41.050
NPM aracılığıyla yükleyebiliriz.

04:41.050 --> 04:44.130
Ve işte bu ilk paketi seçeceğim ve basitçe

04:44.130 --> 04:46.160
projemize yükleyeceğim.

04:46.160 --> 04:48.790
Şimdi hızlı geliştirme sunucusuna geri dönelim

04:48.790 --> 04:51.560
ve "npm install --save-dev "@types/googlemaps"

04:51.560 --> 04:54.030
komutunu çalıştıralım.

04:54.030 --> 04:56.400
Bu paketin adı buydu.

04:58.613 --> 05:01.560
Bu işlem şimdi bu paket için global türleri yükleyecektir.

05:01.560 --> 05:03.303
Şimdi bunu NPM start ile yeniden

05:04.200 --> 05:08.410
başlatırsam, bakalım daha iyi bir durumumuz olacak mı?

05:08.410 --> 05:11.500
Buradaki "declare var" ifadesini

05:11.500 --> 05:15.180
kaldırırsam ya da yorum yaparsam.

05:15.180 --> 05:18.090
Hala derleniyor, şimdi buradaki google maps

05:18.090 --> 05:19.940
şeyi algılanıyor ve ". map" burada, bir hata alıyorum,

05:19.940 --> 05:23.290
şimdi otomatik tamamlama da alıyorum ve "Evet, haritalar

05:23.290 --> 05:27.010
diye bir şey var. Ayrıca bana bu harita kurucusunun,

05:27.010 --> 05:29.880
ilk argüman olarak haritayı oluşturması gereken bir

05:29.880 --> 05:32.410
"Div" veya "Element" ve ardından harita için bazı

05:32.410 --> 05:35.100
seçeneklere ihtiyacı olduğunu söylüyor.

05:35.100 --> 05:38.660
Yani bu artık burada olması gerektiği gibi çalışıyor.

05:38.660 --> 05:40.270
Ve bu elbette ileriye doğru atılmış

05:40.270 --> 05:42.850
büyük bir adım, çünkü artık çalışan bir uygulamamız

05:42.850 --> 05:45.170
var ve daha önce de çalışıyordu.

05:45.170 --> 05:47.600
Ancak şimdi tiplerle ve uygun

05:47.600 --> 05:51.170
bir tip desteğiyle de çalışıyor.

05:51.170 --> 05:53.490
Ve bu personel, tip komut dosyası ile uygulamaları nasıl

05:53.490 --> 05:56.050
oluşturacağınız ve belirli özellik türlerini nasıl kullanacağınız

05:56.050 --> 05:58.500
konusunda başka bir harika uygulamadır, ancak özellikle

05:58.500 --> 06:00.690
üçüncü taraf kütüphanelerle nasıl çalışabileceğiniz

06:00.690 --> 06:03.700
konusunda harika bir uygulamadır.

06:03.700 --> 06:06.250
"Axios" gibi bazıları kendi türlerini getirir.

06:06.250 --> 06:08.470
Diğerleri, NPM ile bile yüklenmez,

06:08.470 --> 06:11.540
ancak yine de uygun bir types paketi

06:11.540 --> 06:15.421
ile türleri ekleyebilirsiniz.

06:15.421 --> 06:18.810
Umarım bu modül, bu konuyu anlamanıza ve üzerinde çalışabileceğiniz,

06:18.810 --> 06:21.320
büyük olasılıkla belirli üçüncü taraf kütüphanelerle

06:21.320 --> 06:23.230
de çalışacağınız gelecekteki tüm

06:23.230 --> 06:27.040
projelerinize yardımcı olmuştur.
