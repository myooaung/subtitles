WEBVTT

00:02.150 --> 00:04.320
Narrateur : Quand il s'agit de construire

00:04.320 --> 00:07.220
une application React avec Typescript, nous avons

00:07.220 --> 00:10.800
bien sûr besoin d'une configuration de projet, qui est capable

00:10.800 --> 00:13.730
à la fois de gérer notre code React, donc des choses

00:13.730 --> 00:17.480
comme JSX, par exemple, et qui compile reste et optimise notre

00:17.480 --> 00:21.500
code React, et qui en même temps, est capable de comprendre TypeScript

00:21.500 --> 00:25.320
et de compiler TypeScript en JavaScript.

00:25.320 --> 00:27.430
La mise en place d'un tel projet par nos propres

00:27.430 --> 00:28.750
moyens peut être assez difficile,

00:28.750 --> 00:31.940
et c'est pourquoi il est bon que Create React App, un outil géré

00:31.940 --> 00:34.080
par l'équipe React, que nous pouvons utiliser

00:34.080 --> 00:36.420
pour créer des projets React, prenne en charge

00:36.420 --> 00:39.110
TypeScript d'emblée.

00:39.110 --> 00:42.110
Vous pouvez simplement chercher Create React App TypeScript sur

00:42.110 --> 00:44.590
Google, et vous devriez trouver cette entrée dans la

00:44.590 --> 00:47.000
documentation officielle de Create React App.

00:47.000 --> 00:49.140
Vous y apprendrez comment ajouter

00:49.140 --> 00:51.540
TypeScript à un projet existant, ici,

00:51.540 --> 00:54.850
ces étapes, ou comment créer un nouveau projet avec Create

00:54.850 --> 00:57.290
React App et TypeScript, et ici vous voyez

00:57.290 --> 01:00.400
une commande que vous pouvez simplement copier, pour

01:00.400 --> 01:03.030
créer un nouveau projet React, qui supporte

01:03.030 --> 01:05.680
également TypeScript.

01:05.680 --> 01:07.020
Maintenant, je vais utiliser

01:07.020 --> 01:11.110
ceci ici, et ici je suis déjà dans un dossier, que je veux utiliser.

01:11.110 --> 01:13.210
Il s'agit simplement du dossier de projet que

01:13.210 --> 01:14.790
je veux utiliser pour ce projet.

01:14.790 --> 01:16.900
Et puis nous allons juste coller dans cette commande.

01:16.900 --> 01:17.740
Et dans ce cas, parce

01:17.740 --> 01:20.970
que je veux utiliser le dossier dans lequel je suis déjà, également

01:20.970 --> 01:22.710
ici dans mon terminal, je vais remplacer

01:22.710 --> 01:25.190
le nom du projet par un point, de sorte qu'il ne crée

01:25.190 --> 01:27.590
pas un nouveau sous-dossier et crée le projet

01:27.590 --> 01:29.550
dans celui-ci, mais qu'il utilise plutôt

01:29.550 --> 01:31.730
ce dossier.

01:31.730 --> 01:33.720
Ceci est bien sûr facultatif.

01:33.720 --> 01:35.850
Je tiens également à dire que j'ai remarqué que

01:35.850 --> 01:38.070
cette commande ne fonctionne pas toujours.

01:38.070 --> 01:41.390
Parfois, il crée un projet JavaScript ordinaire.

01:41.390 --> 01:42.590
Pour remédier à cela, vous

01:42.590 --> 01:46.343
pouvez installer Create React App de manière globale sur votre machine.

01:47.340 --> 01:49.140
Quelque chose que vous pouvez simplement

01:49.140 --> 01:54.140
faire en exécutant npm install -g create-react-app, sur Mac et Linux vous devrez peut-être

01:54.780 --> 01:56.560
ajouter un sudo devant.

01:56.560 --> 01:59.360
Et avec cela installé sur votre machine, vous

01:59.360 --> 02:03.010
pouvez exécuter cette commande ici, mais sans npx, juste

02:03.010 --> 02:05.920
comme ça, et cela devrait fonctionner.

02:05.920 --> 02:07.270
C'est donc ce que je vais faire

02:07.270 --> 02:09.320
ici, mais normalement, cela devrait aussi

02:09.320 --> 02:12.250
fonctionner sans l'installer en utilisant simplement

02:12.250 --> 02:15.520
l'outil npx, qui fait partie de l'outil npm que nous avons déjà

02:15.520 --> 02:18.840
installé avec Node. js plus tôt dans le cours.

02:18.840 --> 02:23.250
Donc, pour l'instant, il échafaude un nouveau projet dans ce dossier ici.

02:23.250 --> 02:27.460
Et dans ce projet, il va mettre en place une application React où nous

02:27.460 --> 02:31.070
pourrons écrire tout notre code avec TypeScript.

02:31.070 --> 02:32.460
Alors attendons que ça se termine.

02:32.460 --> 02:34.610
Et voyons ce que cela donne.

02:34.610 --> 02:36.010
Et ça s'est terminé.

02:36.010 --> 02:37.930
Alors regardons ce que nous avons.

02:37.930 --> 02:41.000
Nous avons un dossier, que vous pouvez reconnaître, c'est essentiellement

02:41.000 --> 02:43.970
la même structure que vous avez lorsque vous créez une application

02:43.970 --> 02:45.500
React sans TypeScript.

02:45.500 --> 02:48.790
Mais on peut déjà voir le tsconfig. json.

02:48.790 --> 02:51.020
À propos, vous pouvez également modifier ce

02:51.020 --> 02:52.940
fichier et l'adapter à vos besoins.

02:52.940 --> 02:55.250
Après tout, vous avez appris à modifier cette configuration

02:55.250 --> 02:57.120
plus tôt dans le cours.

02:57.120 --> 02:58.460
La configuration par défaut devrait

02:58.460 --> 03:01.160
cependant convenir à la plupart des cas d'utilisation.

03:01.160 --> 03:02.950
Maintenant, si nous explorons le dossier src, qui

03:02.950 --> 03:05.230
est l'endroit où nous allons écrire notre code source, nous

03:05.230 --> 03:08.550
trouvons également un tas de fichiers . des fichiers tsx là-dedans.

03:08.550 --> 03:11.900
Jusqu'à présent dans le cours, nous n'avons pas travaillé avec... tsx, mais seulement avec les

03:11.900 --> 03:13.787
fichiers . les fichiers ts. tsx a simplement

03:13.787 --> 03:17.800
été choisi ici, parce que ce sont des fichiers où vous ne pouvez pas simplement

03:17.800 --> 03:20.530
écrire du code TypeScript, mais tout le code JSX,

03:20.530 --> 03:22.000
qui est juste une syntaxe spéciale

03:22.000 --> 03:25.570
de React, JavaScript, où vous écrivez des balises HTML à l'intérieur

03:25.570 --> 03:29.930
de votre code JavaScript, ou dans ce cas, TypeScript.

03:29.930 --> 03:32.880
C'est ce que nous obtenons ici.

03:32.880 --> 03:34.920
Maintenant, dans ces fichiers, nous pouvons déjà

03:34.920 --> 03:36.500
voir certaines syntaxes TypeScript,

03:36.500 --> 03:38.800
par exemple, ici, nous avons une affectation de type,

03:38.800 --> 03:41.480
je vais regarder de plus près ce type plus tard, mais pour l'instant,

03:41.480 --> 03:43.880
nous pouvons voir immédiatement que nous utilisons évidemment

03:43.880 --> 03:45.780
TypeScript ici.

03:45.780 --> 03:49.290
Avec cela, laissez-moi juste nettoyer un peu cette structure de dossier de

03:49.290 --> 03:50.680
départ, et puis construisons

03:50.680 --> 03:52.730
ensemble une application React très simple,

03:52.730 --> 03:56.150
et pendant que nous faisons cela, explorons comment nous pouvons utiliser

03:56.150 --> 03:57.550
TypeScript avec React.

03:57.550 --> 04:01.000
Alors concentrons-nous d'abord sur le

04:01.000 --> 04:02.950
nettoyage, ici à App. tsx, je vais supprimer l'importation

04:02.950 --> 04:06.860
du logo et supprimer tout le contenu de

04:06.860 --> 04:09.380
ma div ici, et juste garder cette div donc.

04:09.380 --> 04:12.020
Je vais également supprimer l'App. css, supprimez l'importation

04:12.020 --> 04:15.530
de App. css et le fichier App. test. tsx ainsi que le

04:15.530 --> 04:19.560
logo. svg et le serviceWorker. ts, supprimez-les

04:19.560 --> 04:23.470
tous.

04:23.470 --> 04:25.500
Dans l'index. tsx, je vais supprimer cette importation de serviceWorker,

04:25.500 --> 04:29.060
car nous n'allons pas travailler avec des

04:29.060 --> 04:32.100
serviceWorkers ici, supprimer ce code en bas, et me retrouver avec cette

04:32.100 --> 04:34.530
configuration, et dans l'index. css Je vais effacer tout cela et mettre

04:34.530 --> 04:38.870
en place un style HTML où je veux définir

04:38.870 --> 04:40.610
une famille de caractères

04:40.610 --> 04:43.140
sans-serif, puis un style de corps où

04:43.140 --> 04:45.860
je veux me débarrasser de la marge, comme

04:45.860 --> 04:47.190
ceci, un style très

04:47.190 --> 04:48.820
simple.

04:48.820 --> 04:50.763
Et avec ça, nous avons une configuration de départ

04:52.790 --> 04:54.540
avec laquelle je veux travailler.

04:54.540 --> 04:55.840
Encore une fois, je l'ai mentionné,

04:55.840 --> 04:57.370
mais si tout cela ne vous dit rien, si c'est

04:57.370 --> 04:59.710
une syntaxe que vous n'avez jamais vue auparavant, alors

04:59.710 --> 05:02.200
plongez d'abord dans des ressources sur React.

05:02.200 --> 05:05.610
Ce n'est pas ce sur quoi nous allons nous concentrer dans ce module,

05:05.610 --> 05:08.130
vous n'allez pas apprendre React dans ce module.

05:08.130 --> 05:11.010
Mais avec cela, sauvegardons tous nos changements et continuons

05:11.010 --> 05:12.920
maintenant, et commençons à écrire un

05:12.920 --> 05:15.680
peu de code React et Typhon, et apprenons comment ces deux

05:15.680 --> 05:17.980
choses fonctionnent ensemble.
