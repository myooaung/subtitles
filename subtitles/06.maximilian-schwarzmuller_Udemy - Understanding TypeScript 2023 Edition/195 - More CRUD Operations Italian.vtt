WEBVTT

00:02.150 --> 00:03.930
Istruttore: Abbiamo aggiunto la nostra prima

00:03.930 --> 00:06.120
richiesta POST, siamo in grado di creare un TODO.

00:06.120 --> 00:07.250
Ora abbiamo più percorsi.

00:07.250 --> 00:10.170
Abbiamo anche un percorso per servire tutti i TODOS che abbiamo creato.

00:10.170 --> 00:11.750
Si tenga presente che i TODOS si

00:11.750 --> 00:14.160
azzerano ogni volta che si modifica e si salva

00:14.160 --> 00:16.630
il codice, perché riavviando il server si perde

00:16.630 --> 00:18.920
tutto ciò che è stato memorizzato e noi gestiamo

00:18.920 --> 00:21.330
i nostri TODOS solo in memoria.

00:21.330 --> 00:23.560
Si tratta semplicemente di qualcosa che abbiamo qui nell'applicazione

00:23.560 --> 00:24.930
fittizia; in un'applicazione reale,

00:24.930 --> 00:28.200
ovviamente, si memorizzerebbe il tutto in un vero database, lo si recupererebbe da lì

00:28.200 --> 00:30.280
e così via e quindi sopravviverebbe.

00:30.280 --> 00:35.060
Tuttavia, possiamo creare una nuova funzione, getTodos e questa

00:35.060 --> 00:38.030
sarà un RequestHandler, in modo da non dover

00:38.030 --> 00:39.740
impostare i tipi di tutti

00:39.740 --> 00:42.330
i parametri singolarmente.

00:42.330 --> 00:46.120
E poi lì, voglio semplicemente restituire una risposta in

00:46.120 --> 00:49.560
cui restituire alcuni dati JSON in cui ci sono i miei todos

00:49.560 --> 00:52.420
e lì, voglio solo raggiungere il mio array TODOs

00:52.420 --> 00:54.330
e rimandarlo al client, e questo

00:54.330 --> 00:56.530
può già essere tutto.

00:56.530 --> 00:57.810
Naturalmente, si può modificare,

00:57.810 --> 00:59.640
magari con una logica diversa, magari

00:59.640 --> 01:03.120
ordinando prima i TODOS o cose del genere, ma questa, nella sua forma

01:03.120 --> 01:06.690
più semplice, è già tutto ciò di cui abbiamo bisogno: restituisce i

01:06.690 --> 01:10.530
nostri TODOS, quindi una funzione molto semplice.

01:10.530 --> 01:13.240
Nei percorsi TODOS, ora dobbiamo solo collegare questo.

01:13.240 --> 01:17.680
Quindi importiamo anche getTodos dal nostro controllore

01:17.680 --> 01:20.640
e colleghiamolo qui con questa rotta.

01:20.640 --> 01:23.430
E con ciò, se ora salviamo questo, possiamo

01:23.430 --> 01:25.250
già vederlo in azione.

01:25.250 --> 01:29.860
Se torniamo indietro e creiamo una nuova richiesta,

01:29.860 --> 01:34.860
una richiesta GET, a http://localhost:3000/todos/ e

01:39.400 --> 01:41.410
inviamo questo, otteniamo

01:41.410 --> 01:44.400
un array vuoto, perché?

01:44.400 --> 01:46.750
Beh, ho detto che i TODO sarebbero stati cancellati

01:46.750 --> 01:48.010
ogni volta che avessimo modificato

01:48.010 --> 01:49.750
il codice e il server si fosse riavviato,

01:49.750 --> 01:51.470
quindi dovremmo creare un nuovo TODO ora

01:51.470 --> 01:54.110
senza riavviare il server nel frattempo.

01:54.110 --> 01:57.360
E se abbiamo creato quel TODO e ora otteniamo

01:57.360 --> 02:01.770
i nostri TODOS, vediamo anche qui il TODO creato con l'ID, il

02:01.770 --> 02:04.380
numero di serie 9811 e così via.

02:04.380 --> 02:05.960
Quindi sta già funzionando.

02:05.960 --> 02:08.980
Ora, visto che ci siamo, lavoriamo anche su patch e delete e,

02:08.980 --> 02:10.590
naturalmente, sentitevi liberi

02:10.590 --> 02:12.680
di trovare una logica per conto vostro.

02:12.680 --> 02:14.970
Alla fine, ora avete tutti gli elementi necessari

02:14.970 --> 02:16.130
per farlo.

02:16.130 --> 02:18.480
Naturalmente ora lo faremo anche insieme.

02:19.390 --> 02:21.570
Quindi, nella richiesta di patch, aggiungiamo

02:21.570 --> 02:24.350
una nuova funzione del controllore.

02:24.350 --> 02:29.350
esportare const updateTodo, che è di tipo RequestHandler e dovrebbe contenere

02:30.660 --> 02:34.680
una funzione in questo formato che già conosciamo.

02:34.680 --> 02:37.310
L'obiettivo è estrarre i dati del

02:37.310 --> 02:40.630
nuovo TODO dalla richiesta in arrivo e

02:40.630 --> 02:44.140
aggiornare il TODO con i nuovi dati.

02:44.140 --> 02:47.240
Si noti che, come parte del nostro percorso, abbiamo

02:47.240 --> 02:48.900
un segmento dinamico.

02:48.900 --> 02:51.140
Abbiamo questo segmento id.

02:51.140 --> 02:54.610
Quindi è qualcosa che potremo estrarre dall'URL,

02:54.610 --> 02:58.750
un valore concreto per questo segmento dinamico.

02:58.750 --> 03:02.147
Quindi, nella richiesta in arrivo, si può ottenere il todoId,

03:03.172 --> 03:07.987
dai parametri della richiesta. id,. id, perché è il nome che ho scelto qui.

03:07.987 --> 03:11.660
Se si è scelto un nome diverso qui, si deve usare un

03:11.660 --> 03:13.060
nome diverso là.

03:13.060 --> 03:15.810
Ora, non abbiamo tipi di supporto qui, giusto?

03:15.810 --> 03:18.410
Params è di tipo any.

03:18.410 --> 03:20.450
Ora, poiché i tipi possono analizzare

03:20.450 --> 03:23.400
questa stringa e capire cosa c'è dentro.

03:23.400 --> 03:25.460
Quindi, per ottenere un supporto

03:25.460 --> 03:28.920
migliore, possiamo utilizzare il RequestHandler come

03:28.920 --> 03:32.880
tipo generico e possiamo aggiungere le parentesi angolari e

03:32.880 --> 03:35.880
dire a TypeScript quali parametri avrà.

03:35.880 --> 03:37.800
Basta impostarlo su un oggetto per

03:37.800 --> 03:39.300
avere una mappa chiave-valore

03:39.300 --> 03:42.180
di tutti i genitori presenti nell'URL.

03:42.180 --> 03:43.830
Ad esempio, abbiamo un parametro

03:43.830 --> 03:46.730
ID, che alla fine contiene una stringa.

03:46.730 --> 03:48.610
Possiamo aggiungerlo qui e ora vedremo

03:48.610 --> 03:50.230
il completamento automatico e TypeScript

03:50.230 --> 03:52.560
saprà che si tratta di una stringa.

03:52.560 --> 03:55.520
Quindi è meglio usare questo tipo generico.

03:55.520 --> 03:58.640
Ora, abbiamo l'ID, ma abbiamo anche bisogno di qualcosa dal corpo

03:58.640 --> 04:01.050
della richiesta, per essere precisi, abbiamo bisogno

04:01.050 --> 04:03.560
del nuovo testo dal corpo della richiesta.

04:03.560 --> 04:08.130
Quindi l'updatedText può essere recuperato dal corpo della richiesta

04:08.130 --> 04:11.700
e ora, ancora una volta, usiamo il typecasting per chiarire

04:11.700 --> 04:14.100
che ci sarà una proprietà text nel corpo

04:14.100 --> 04:16.910
e che questa sarà di tipo String.

04:16.910 --> 04:19.750
E poi recuperiamo il testo.

04:19.750 --> 04:22.373
E ora possiamo aggiornare il TODO nel nostro array TODOS lassù.

04:23.830 --> 04:27.720
Per questo, troviamo l'indice del TODO che vogliamo

04:27.720 --> 04:28.710
aggiornare.

04:28.710 --> 04:30.808
todoIndex, raggiungendo TODOS e

04:30.808 --> 04:33.760
con findIndex, possiamo eseguire una logica su

04:33.760 --> 04:36.090
ogni elemento dell'array TODOS.

04:36.090 --> 04:38.060
E qui guardiamo ogni todo e se l'id

04:38.060 --> 04:40.010
del todo è uguale al todoId che

04:40.010 --> 04:44.300
abbiamo qui, sappiamo che è il todo che vogliamo aggiornare.

04:44.300 --> 04:47.140
Ora, se per qualche motivo il valore dovrebbe essere

04:47.140 --> 04:50.550
meno uno, significa che non abbiamo trovato quel TODO, quindi

04:50.550 --> 04:52.610
se è minore di zero, sappiamo che qualcosa

04:52.610 --> 04:56.960
è andato storto e, in questo caso, lancerò un nuovo errore in cui dirò: "Impossibile

04:56.960 --> 04:59.630
trovare un todo!

04:59.630 --> 05:03.633
E questo dovrebbe innescare il nostro middleware predefinito per la gestione

05:04.760 --> 05:06.130
degli errori.

05:06.130 --> 05:08.633
Ora, se superiamo questo controllo if, abbiamo

05:09.870 --> 05:12.450
trovato il TODO e possiamo semplicemente aggiornare

05:12.450 --> 05:15.040
il todo a questo indice nel nostro array TODOS,

05:15.040 --> 05:18.960
in modo che diventi un nuovo TODO, mantenendo il vecchio id.

05:18.960 --> 05:23.270
Quindi dove accediamo a TODOS, todoIndex. id, quindi accediamo al vecchio ID e lo memorizziamo,

05:23.270 --> 05:27.030
ma il testo qui che ho impostato,

05:27.030 --> 05:29.490
ovviamente non lo assegniamo

05:29.490 --> 05:31.713
in questo modo.

05:32.870 --> 05:34.570
Ma il testo che abbiamo impostato è ora il testo aggiornato.

05:34.570 --> 05:38.750
Questo sostituisce il TODO qui, e successivamente possiamo

05:38.750 --> 05:41.340
inviare una risposta, con un messaggio

05:41.340 --> 05:45.280
del tipo, ad esempio, Aggiornato.

05:45.280 --> 05:47.053
E dove poi aggiungiamo anche updatedTodo

05:47.990 --> 05:51.470
alla risposta in uscita e lo impostiamo uguale a, beh, TODOS

05:51.470 --> 05:55.090
todoIndex, che ora contiene il nuovo valore.

05:55.090 --> 05:59.090
Si tratta di qualcosa che chiamiamo qui nella nostra logica di aggiornamento,

05:59.090 --> 06:02.430
naturalmente un po' di codice fittizio perché stiamo ancora

06:02.430 --> 06:03.960
lavorando con questo array TODOS

06:03.960 --> 06:07.150
in memoria, ma mostra come usiamo TypeScript qui, e questa

06:07.150 --> 06:09.060
è la cosa principale.

06:09.060 --> 06:11.100
Proviamo ora questa funzione di aggiornamento.

06:11.100 --> 06:13.620
Per questo possiamo tornare a Postman e, alla fine,

06:13.620 --> 06:16.260
voglio inviare una richiesta di PATCH, perché nelle

06:16.260 --> 06:19.960
rotte stiamo aspettando questa richiesta di patch a questa rotta.

06:19.960 --> 06:23.460
A questo proposito, forse dovremmo prima collegare questa

06:23.460 --> 06:24.293
rotta a questa

06:24.293 --> 06:26.490
funzione del controllore.

06:26.490 --> 06:28.850
Quindi, andiamo nel file delle rotte,

06:28.850 --> 06:33.420
importiamo updateTodo e stabiliamo questa connessione.

06:33.420 --> 06:35.590
Dopodiché, possiamo procedere e inviare questa richiesta.

06:35.590 --> 06:38.570
Quindi, tornando a Postman, PATCH è

06:38.570 --> 06:41.890
ciò che vogliamo inviare e poi è http://localhost:3000/todos

06:41.890 --> 06:46.320
e ora l'idea di TODO che vogliamo aggiornare come parte

06:46.320 --> 06:49.430
dell'URL.

06:49.430 --> 06:50.573
Ora, dato che abbiamo salvato qualcosa,

06:51.500 --> 06:54.970
dato che abbiamo salvato alcune modifiche, il nostro server si è riavviato, quindi tutti i TODOS andranno comunque persi.

06:54.970 --> 06:58.890
Quindi, prima di tutto, inviamo nuovamente la richiesta

06:58.890 --> 07:01.150
POST per creare un nuovo TODO.

07:01.150 --> 07:02.450
E poi abbiamo l'ID di quel TODO.

07:02.450 --> 07:05.170
Ora possiamo aggiungere questo id a questo URL.

07:05.170 --> 07:08.800
Aggiungerò anche un corpo, che dovrebbe essere di tipo JSON, in cui impostare

07:08.800 --> 07:11.780
i nuovi dati che vogliamo inviare al server.

07:11.780 --> 07:15.560
Ora teniamo presente che nel nostro controllore di aggiornamento,

07:15.560 --> 07:18.570
sto cercando un campo chiamato text, nel corpo

07:18.570 --> 07:20.970
della richiesta in arrivo.

07:20.970 --> 07:22.900
Quindi dovremmo fornirlo ancora una volta

07:22.900 --> 07:24.580
nei dati JSON che stiamo inviando.

07:24.580 --> 07:26.690
Finito il corso in un mese, questo

07:26.690 --> 07:29.440
potrebbe essere il nostro nuovo testo.

07:29.440 --> 07:31.520
Se ora lo inviamo, vediamo che è stato aggiornato.

07:31.520 --> 07:35.210
E se ora ottengo tutti i TODO, vediamo che c'è ancora

07:35.210 --> 07:37.180
un solo TODO, ma il testo è semplicemente

07:37.180 --> 07:39.430
cambiato.

07:39.430 --> 07:41.623
Ora funziona, e siamo anche in grado di aggiornare il TODO.

07:42.950 --> 07:46.470
Verifichiamo anche cosa succede se ho un id che non esiste, per

07:46.470 --> 07:48.780
esempio, cancellando l'ultima cifra qui,

07:48.780 --> 07:50.620
e allora ottengo, Could not find

07:50.620 --> 07:53.430
todo nella risposta di errore di tipo 500.

07:53.430 --> 07:57.670
Quindi anche questo è un aspetto positivo.

07:57.670 --> 07:59.660
Come ultimo passo, aggiungiamo una funzione per cancellare un TODO.

07:59.660 --> 08:03.800
Quindi, nella cartella dei controllori, esporterò una costante

08:03.800 --> 08:07.210
chiamata deleteTodo, di tipo RequestHandler.

08:07.210 --> 08:11.460
E ancora, otteniamo la nostra richiesta, la nostra risposta

08:11.460 --> 08:14.040
e poi la funzione successiva.

08:14.040 --> 08:17.320
E qui, ora, voglio trovare il TODO

08:17.320 --> 08:20.270
e semplicemente rimuoverlo.

08:20.270 --> 08:21.543
Per questo, possiamo copiare

08:22.380 --> 08:25.090
questo codice in cui otteniamo l'ID del TODO e poi l'indice.

08:25.090 --> 08:29.360
Eliminiamo la riga in cui estraiamo il testo aggiornato, perché per una richiesta

08:29.360 --> 08:32.210
DELETE, non ci sarà il corpo della richiesta, ma abbiamo

08:32.210 --> 08:37.400
bisogno dell'id del TODO, che fa parte della nostra rotta dell'URL.

08:37.400 --> 08:40.340
Quindi troviamo l'indice e una volta ottenuto l'indice,

08:40.340 --> 08:43.530
possiamo andare ai TODO, chiamare il metodo splice

08:43.530 --> 08:47.350
e rimuovere il todo al todoIndex e solo quel todo.

08:47.350 --> 08:51.620
E successivamente possiamo inviare una risposta in

08:51.620 --> 08:54.040
cui diciamo: Todo deleted! proprio così.

08:54.040 --> 08:58.490
Questa potrebbe essere la nostra logica di cancellazione.

08:58.490 --> 08:59.380
Ora è il momento di collegarlo,

08:59.380 --> 09:01.760
quindi nella cartella delle rotte importiamo deleteTodo

09:01.760 --> 09:04.560
dai controllori TODOs e colleghiamolo qui sotto.

09:04.560 --> 09:07.440
E con questo collegamento, se ora salviamo questo, dobbiamo aggiungere

09:08.340 --> 09:09.963
un TODO, perché tutti i TODO vengono

09:11.120 --> 09:14.370
cancellati a ogni riavvio del server, quindi eccolo qui.

09:14.370 --> 09:16.720
Copiare l'id.

09:16.720 --> 09:20.550
E ora inviamo la richiesta DELETE.

09:20.550 --> 09:22.680
Quindi una nuova richiesta DELETE qui, a

09:22.680 --> 09:24.980
http:/localhost:3000/todos/questo id.

09:24.980 --> 09:27.160
Non è necessario aggiungere alcun corpo.

09:27.160 --> 09:32.160
Fare clic su Invia e funziona.

09:32.800 --> 09:34.880
Se lo invio di nuovo, viene visualizzato l'errore "Impossibile

09:34.880 --> 09:37.180
trovare" perché è stato appena cancellato.

09:37.180 --> 09:39.950
E se otteniamo tutti i TODOS, dovrebbe essere

09:39.950 --> 09:41.570
un array vuoto e questo.

09:41.570 --> 09:42.723
Ora funziona e questa

09:42.723 --> 09:45.550
è fondamentalmente una funzionalità CRUD, aggiunta

09:45.550 --> 09:46.750
con TypeScript in questa

09:46.750 --> 09:49.550
semplice applicazione Node ed Express.

09:49.550 --> 09:50.990
Naturalmente si tratta di un'applicazione piuttosto

09:50.990 --> 09:52.940
banale, ma ci mostra già un certo utilizzo di TypeScript.

09:52.940 --> 09:56.060
Ci mostra che scriviamo codice che dovrebbe sembrarvi familiare

09:56.060 --> 09:58.870
se avete seguito il resto del corso e che stiamo usando

09:58.870 --> 10:00.480
tutte le funzioni che avete imparato

10:00.480 --> 10:02.000
lì.

10:02.000 --> 10:04.750
E proprio come nella sezione React, questo è tutto ciò che è importante.

10:04.750 --> 10:07.610
Anche qui si può usare tutto ciò che si è imparato

10:07.610 --> 10:10.110
su TypeScript, perché alla fine viene

10:10.110 --> 10:11.520
compilato in normale

10:11.520 --> 10:13.340
codice JavaScript, che poi

10:13.340 --> 10:14.990
viene servito.
