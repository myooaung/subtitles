WEBVTT

00:02.270 --> 00:03.103
Instrutor: Para isto, tenho

00:03.103 --> 00:04.620
um pequeno projeto inicial para você.

00:04.620 --> 00:05.610
Você o encontra anexado.

00:05.610 --> 00:07.070
É o mesmo projeto inicial

00:07.070 --> 00:08.810
que usamos repetidas vezes.

00:08.810 --> 00:12.080
Você inicia o servidor de desenvolvimento com

00:12.080 --> 00:15.510
npm-start e depois eu inicio a compilação do TypeScript

00:15.510 --> 00:19.830
em modo relógio com tsc-w em um terminal separado.

00:19.830 --> 00:22.890
Portanto, aqui no meu terminal interno eu tenho duas abas.

00:22.890 --> 00:24.390
Um com o servidor de desenvolvimento

00:24.390 --> 00:26.070
que você deve manter em funcionamento

00:26.070 --> 00:27.670
para que ele observe as mudanças

00:27.670 --> 00:30.720
e recarregue a página e mantenha o servidor em funcionamento

00:30.720 --> 00:32.820
e outra aba onde eu tenho aquele observador

00:32.820 --> 00:35.530
de compilação TypeScript em execução.

00:35.530 --> 00:36.930
Agora com isso, podemos trabalhar

00:36.930 --> 00:39.400
no aplicativo. ts que está vazio agora mesmo

00:39.400 --> 00:41.520
e começar a escrever algum código lá e eu quero

00:41.520 --> 00:42.990
começar imediatamente definindo

00:42.990 --> 00:45.603
uma classe que possamos usar.

00:46.490 --> 00:49.420
Fazemos isso usando a palavra-chave classe, assim

00:49.420 --> 00:51.340
mesmo e depois o nome da classe e digamos

00:51.340 --> 00:54.030
que estamos construindo um aplicativo, uma aplicação

00:54.030 --> 00:56.880
web, uma interface de usuário para alguma ferramenta

00:56.880 --> 01:00.700
web que nos permite gerenciar nossos diferentes departamentos que

01:00.700 --> 01:04.100
possamos ter em nossa empresa.

01:04.100 --> 01:05.770
Talvez estejamos construindo algum

01:05.770 --> 01:08.440
tipo de ferramenta interna da empresa, seja ela qual

01:08.440 --> 01:11.290
for, e precisamos ter vários departamentos lá.

01:11.290 --> 01:13.790
Agora poderíamos usar objetos para gerenciar

01:13.790 --> 01:16.320
os dados dos diferentes departamentos e então

01:16.320 --> 01:19.960
poderíamos também adicionar métodos a cada objeto para que possamos

01:19.960 --> 01:21.980
renderizar as informações do departamento

01:21.980 --> 01:24.020
na tela e para simplificar a criação

01:24.020 --> 01:26.980
desses diferentes objetos de departamento que terão

01:26.980 --> 01:33.000
todos a mesma aparência, é criar uma classe de departamento.

01:33.000 --> 01:35.690
Assim, poderíamos nomear este departamento de classe.

01:35.690 --> 01:36.830
O nome depende totalmente de você.

01:36.830 --> 01:40.030
A convenção é que ela começa com um caráter maiúsculo para

01:40.030 --> 01:42.720
deixar claro que se trata de uma classe.

01:42.720 --> 01:45.670
Agora, se você está por um longo tempo no desenvolvimento

01:45.670 --> 01:48.270
do JavaScript, você pode saber que a idéia de funções

01:48.270 --> 01:50.090
de construtor pelo caminho e classes

01:50.090 --> 01:52.140
no final são açúcar sintático para isso

01:52.140 --> 01:53.920
você poderia dizer, mas veremos

01:53.920 --> 01:56.980
isso quando compilarmos nosso código.

01:56.980 --> 01:59.220
Portanto, aqui temos nosso departamento de classe

01:59.220 --> 02:02.080
e agora lá dentro podemos ter um nome de propriedade.

02:02.080 --> 02:04.010
Você pode adicioná-lo assim mesmo,

02:04.010 --> 02:07.290
sem nenhum let ou constância diante dele assim mesmo,

02:07.290 --> 02:09.840
diretamente na classe e, é claro, você também

02:09.840 --> 02:12.550
pode atribuir um tipo a isto.

02:12.550 --> 02:14.690
Você faz isso adicionando um cólon aqui

02:14.690 --> 02:17.920
e depois o tipo, por exemplo, o fio e isso é importante.

02:17.920 --> 02:21.150
Isto pode parecer um objeto, mas não é um objeto.

02:21.150 --> 02:23.240
Em um objeto você usa pares de valores chave

02:23.240 --> 02:25.520
com dois pontos para ter um nome chave e depois

02:25.520 --> 02:27.000
o valor para a chave.

02:27.000 --> 02:28.810
Aqui não é esse o caso.

02:28.810 --> 02:32.250
Este é um chamado campo de uma classe.

02:32.250 --> 02:34.680
Você também cria uma classe com chaves

02:34.680 --> 02:37.110
de paralelepípedos, mas aqui não se trata

02:37.110 --> 02:39.120
de um par de valor chave, isto apenas

02:39.120 --> 02:41.040
define o nome de uma chave que você

02:41.040 --> 02:43.530
terá no objeto que criará com base na classe

02:43.530 --> 02:48.530
e você define o tipo de valor que a chave terá no final.

02:48.550 --> 02:52.363
Você também pode definir aqui um valor inicial com o = 'DEFAULT',

02:53.840 --> 02:55.920
mas não é necessário fazer isso.

02:55.920 --> 02:59.050
Em vez disso, outra coisa que você normalmente

02:59.050 --> 03:03.410
tem nas aulas é uma função especial ali, o chamado método.

03:03.410 --> 03:06.780
As funções nos objetos são simplesmente chamadas

03:06.780 --> 03:09.410
de métodos, que é o método construtor.

03:09.410 --> 03:12.500
Podemos acrescentar assim e esta é uma palavra reservada.

03:12.500 --> 03:16.170
Construtor é uma palavra-chave reservada compreendida pelo

03:16.170 --> 03:18.390
TypeScript e também pelo JavaScript

03:18.390 --> 03:22.480
moderno e esta é essencialmente uma função ligada a esta classe e

03:22.480 --> 03:25.840
ligada a qualquer objeto que você cria baseado na classe

03:25.840 --> 03:29.640
que é executada quando o objeto está sendo criado.

03:29.640 --> 03:33.500
Portanto, isto permite basicamente fazer algum trabalho de inicialização

03:33.500 --> 03:35.700
para o objeto que você está construindo.

03:35.700 --> 03:38.280
Agora, lá dentro, você poderia aceitar uma discussão.

03:38.280 --> 03:41.910
Vamos nomeá-lo n talvez que também possa ser do tipo string

03:41.910 --> 03:45.620
e então você quer armazenar isso em seu campo de nome aqui ou

03:45.620 --> 03:47.000
você pode fazer isso alcançando

03:47.000 --> 03:49.050
o nome com esta palavra-chave e armazenando

03:49.050 --> 03:51.200
n nele.

03:51.200 --> 03:55.200
O que isto faz é definir o valor do campo do nome, também chamado

03:55.200 --> 03:58.630
de propriedade assim do nome de propriedade, para

03:58.630 --> 04:01.180
o valor que você está recebendo n quando

04:01.180 --> 04:04.550
um objeto de departamento é criado.

04:04.550 --> 04:07.030
Agora, como poderíamos criar um objeto de tal departamento?

04:07.030 --> 04:08.890
Nada mais fácil do que isso.

04:08.890 --> 04:13.110
Fora da classe que você criou usando a nova palavra-chave que também

04:13.110 --> 04:16.200
é incorporada ao TypeScript e JavaScript e depois

04:16.200 --> 04:18.410
você repete o nome da classe, depois

04:18.410 --> 04:20.160
você adiciona parênteses e

04:20.160 --> 04:22.440
isto criaria um novo objeto de departamento,

04:22.440 --> 04:26.240
mas o construtor é chamado neste momento quando você executa

04:26.240 --> 04:29.620
esta classe assim com a nova palavra-chave e o construtor

04:29.620 --> 04:33.440
aqui pega um argumento, uma string.

04:33.440 --> 04:35.600
Agora você passa os argumentos do construtor

04:35.600 --> 04:39.800
para este departamento, assim entre estes parênteses.

04:39.800 --> 04:41.640
Portanto, aqui poderíamos nomear esta contabilidade

04:41.640 --> 04:44.730
porque talvez estejamos construindo o departamento de contabilidade aqui.

04:44.730 --> 04:46.100
Agora, isto criará

04:46.100 --> 04:49.800
um novo objeto JavaScript baseado neste projeto.

04:49.800 --> 04:53.910
Assim, agora podemos armazenar isto em uma constante, por exemplo,

04:53.910 --> 04:58.010
e depois console. log. contabilidade aqui para ver o que conseguimos.

04:58.010 --> 04:59.620
Se agora salvarmos isso e depois

04:59.620 --> 05:02.020
voltarmos para nossa página aqui e dermos uma

05:02.020 --> 05:03.780
olhada no console de desenvolvimento

05:03.780 --> 05:05.660
aqui nas ferramentas def, devemos nos

05:05.660 --> 05:07.930
opor aqui ao nosso Departamento.

05:07.930 --> 05:10.000
É um objeto JavaScript normal,

05:10.000 --> 05:13.770
apenas tem este tipo de Departamento anexado a ele e no

05:13.770 --> 05:15.290
final é um objeto com um

05:15.290 --> 05:18.140
par de valores chave, onde a chave é o nome

05:18.140 --> 05:20.270
porque é o que definimos lá em cima

05:20.270 --> 05:23.110
e o valor é Contabilidade.

05:23.110 --> 05:25.530
Temos aqui este valor contábil porque

05:25.530 --> 05:27.460
estamos passando isto como um

05:27.460 --> 05:29.560
argumento para o construtor.

05:29.560 --> 05:31.770
Lá estamos aceitando tal string,

05:31.770 --> 05:34.830
restaurando o valor neste campo e os campos

05:34.830 --> 05:38.400
estão no final apenas traduzidos para propriedades,

05:38.400 --> 05:41.890
o objeto baseado na classe terá lá depois.

05:41.890 --> 05:44.480
Então é assim que podemos criar uma classe

05:44.480 --> 05:46.570
simples e o que é a idéia geral.

05:46.570 --> 05:50.143
Agora vamos ver o que realmente conseguimos em JavaScript.
