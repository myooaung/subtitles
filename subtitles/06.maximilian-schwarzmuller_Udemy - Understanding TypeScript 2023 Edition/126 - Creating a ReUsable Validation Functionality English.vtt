WEBVTT

1
00:00:02.160 --> 00:00:06.060
<v Instructor>So, what could we about validation?</v>

2
00:00:06.060 --> 00:00:10.450
Well, maybe, let's start at the desired end result.

3
00:00:10.450 --> 00:00:14.850
My idea is that we later have some validate function

4
00:00:14.850 --> 00:00:17.950
which doesn't exist yet, but that we later have it,

5
00:00:17.950 --> 00:00:21.230
to which I pass the enteredTitle,

6
00:00:21.230 --> 00:00:25.360
or actually a configuration object I'd say

7
00:00:25.360 --> 00:00:27.900
where the value is the enteredTitle,

8
00:00:27.900 --> 00:00:30.300
so the thing to be validated.

9
00:00:30.300 --> 00:00:33.260
But where I then also have additional

10
00:00:33.260 --> 00:00:37.350
properties that tell the validate function

11
00:00:37.350 --> 00:00:39.130
how to validate it.

12
00:00:39.130 --> 00:00:43.210
So for example, that we have required set to true here,

13
00:00:43.210 --> 00:00:47.009
minLength set to five to enforce five characters,

14
00:00:47.009 --> 00:00:48.360
and so on.

15
00:00:48.360 --> 00:00:50.040
And then we do this here

16
00:00:50.040 --> 00:00:51.540
for all three inputs,

17
00:00:51.540 --> 00:00:53.900
and validate is a function that returns true

18
00:00:53.900 --> 00:00:56.620
if it's valid, and false if it's not valid,

19
00:00:56.620 --> 00:00:59.580
and in the end, we could have something like this.

20
00:00:59.580 --> 00:01:04.580
Or enteredDescription and enteredPeople,

21
00:01:04.790 --> 00:01:06.790
that would roughly be the idea.

22
00:01:06.790 --> 00:01:09.210
Of course, it's just one way of implementing this,

23
00:01:09.210 --> 00:01:11.703
but it's a way which I like quite a lot.

24
00:01:12.600 --> 00:01:15.320
For that, at the top of the file,

25
00:01:15.320 --> 00:01:19.470
I will add some validation logic.

26
00:01:19.470 --> 00:01:22.380
And, again, there are many ways of doing this.

27
00:01:22.380 --> 00:01:24.390
I will first of all start by defining

28
00:01:24.390 --> 00:01:27.840
the structure of such a validatable object.

29
00:01:27.840 --> 00:01:31.280
So this object we pass to the validate function,

30
00:01:31.280 --> 00:01:33.430
because of course this always needs to have

31
00:01:33.430 --> 00:01:37.820
a similar structure with a certain amount

32
00:01:37.820 --> 00:01:40.100
of properties which can be there

33
00:01:40.100 --> 00:01:42.410
and certain types of properties,

34
00:01:42.410 --> 00:01:44.950
so that the validate function actually knows

35
00:01:44.950 --> 00:01:47.400
what it's working with and can correctly

36
00:01:47.400 --> 00:01:49.870
extract properties and so on.

37
00:01:49.870 --> 00:01:52.850
So, I will start by defining an interface.

38
00:01:52.850 --> 00:01:55.380
We could also go for a custom type,

39
00:01:55.380 --> 00:01:56.550
totally up to you.

40
00:01:56.550 --> 00:01:58.690
Since I'll define the structure of an object,

41
00:01:58.690 --> 00:02:02.793
I'm always a bigger fan of defining just an interface.

42
00:02:03.810 --> 00:02:06.700
I'll name it Validatable here,

43
00:02:06.700 --> 00:02:09.940
because it describes a validatable object,

44
00:02:09.940 --> 00:02:13.300
and it will have a value which should be

45
00:02:13.300 --> 00:02:17.140
a string or also a number.

46
00:02:17.140 --> 00:02:18.980
It will have a required prop,

47
00:02:18.980 --> 00:02:21.240
which will have a Boolean value,

48
00:02:21.240 --> 00:02:22.630
so true or false.

49
00:02:22.630 --> 00:02:26.470
And then let's say we support minLength validation,

50
00:02:26.470 --> 00:02:28.212
which should be a number,

51
00:02:28.212 --> 00:02:30.220
maxLength which should be a number,

52
00:02:30.220 --> 00:02:32.510
and also in case we're getting a number,

53
00:02:32.510 --> 00:02:35.240
a min and a max value.

54
00:02:35.240 --> 00:02:37.417
The difference to minLength and maxLength

55
00:02:37.417 --> 00:02:40.310
is that this checks the length of the string,

56
00:02:40.310 --> 00:02:42.320
this the value of the number

57
00:02:42.320 --> 00:02:43.960
if it's above a certain number

58
00:02:43.960 --> 00:02:46.010
or below a certain maximum.

59
00:02:46.010 --> 00:02:48.870
These are the properties I want to support.

60
00:02:48.870 --> 00:02:50.470
Now besides the value,

61
00:02:50.470 --> 00:02:52.140
they should all be optional though,

62
00:02:52.140 --> 00:02:54.410
which we can enforce by adding

63
00:02:54.410 --> 00:02:57.650
a question mark after the names.

64
00:02:57.650 --> 00:03:00.070
By the way, the alternative to using a question mark

65
00:03:00.070 --> 00:03:02.720
is to allow for undefined values.

66
00:03:02.720 --> 00:03:04.880
The question mark basically does the same.

67
00:03:04.880 --> 00:03:09.370
It says that required is either a Boolean or undefined.

68
00:03:09.370 --> 00:03:12.610
So now we have the validatable interface.

69
00:03:12.610 --> 00:03:13.893
What can we do with that?

70
00:03:14.930 --> 00:03:17.893
Well, now with that interface created,

71
00:03:18.830 --> 00:03:21.330
we can create that function,

72
00:03:21.330 --> 00:03:24.220
that validate function I'm looking for.

73
00:03:24.220 --> 00:03:27.410
That should get such a validatable object.

74
00:03:27.410 --> 00:03:32.410
So ValidatableInput is of type Validatable.

75
00:03:32.410 --> 00:03:33.450
That's my idea here.

76
00:03:33.450 --> 00:03:36.400
So it gets an object which has this structure.

77
00:03:36.400 --> 00:03:38.270
And now in there,

78
00:03:38.270 --> 00:03:41.670
we can check for all these properties to exist

79
00:03:41.670 --> 00:03:44.810
and then do the appropriate validation.

80
00:03:44.810 --> 00:03:46.150
Now what exactly do we do

81
00:03:46.150 --> 00:03:48.200
in the validate function therefore?

82
00:03:48.200 --> 00:03:49.033
Well, in the end here,

83
00:03:49.033 --> 00:03:50.930
I wanna create a variable, isValid,

84
00:03:50.930 --> 00:03:52.330
which initially is true.

85
00:03:52.330 --> 00:03:54.030
So the default assumption is

86
00:03:54.030 --> 00:03:55.510
what we get is true.

87
00:03:55.510 --> 00:03:57.430
But we'll set it to false

88
00:03:57.430 --> 00:04:01.330
as soon as at least one of our checks fails.

89
00:04:01.330 --> 00:04:03.480
And now let's start with the first check.

90
00:04:03.480 --> 00:04:06.410
Let's see if the validatableInput here,

91
00:04:06.410 --> 00:04:08.220
this argument we're getting,

92
00:04:08.220 --> 00:04:11.380
if that has a required prop?

93
00:04:11.380 --> 00:04:13.260
If that's not undefined.

94
00:04:13.260 --> 00:04:16.490
If this is set, and if it is true therefore,

95
00:04:16.490 --> 00:04:18.630
this means that the value is required

96
00:04:18.630 --> 00:04:20.630
and must not be empty.

97
00:04:20.630 --> 00:04:22.080
So now in here,

98
00:04:22.080 --> 00:04:26.160
we can set isValid equal to isValid and

99
00:04:26.160 --> 00:04:27.700
the way JavaScript works,

100
00:04:27.700 --> 00:04:30.550
this ensures that the new value of isValid

101
00:04:30.550 --> 00:04:34.330
will be false if the thing after and is false.

102
00:04:34.330 --> 00:04:36.870
Because if at least one of the two things is false,

103
00:04:36.870 --> 00:04:38.660
the overall value will be false.

104
00:04:38.660 --> 00:04:40.500
Now isValid initially is true,

105
00:04:40.500 --> 00:04:44.070
but if the thing after the logical and operator

106
00:04:44.070 --> 00:04:46.300
is false, isValid will be false.

107
00:04:46.300 --> 00:04:48.700
And in the end I will return isValid.

108
00:04:48.700 --> 00:04:50.040
So now what do we add

109
00:04:50.040 --> 00:04:53.550
after the two ampersand symbols therefore?

110
00:04:53.550 --> 00:04:57.290
Well I wanna check if validatableInput.value,

111
00:04:57.290 --> 00:04:58.170
if that is empty.

112
00:04:58.170 --> 00:05:00.530
And for that, we can trim it

113
00:05:00.530 --> 00:05:04.210
and check the length, or can we?

114
00:05:04.210 --> 00:05:05.630
Well, the problem is,

115
00:05:05.630 --> 00:05:07.510
we don't know if value is a string.

116
00:05:07.510 --> 00:05:09.090
It's a string or a number.

117
00:05:09.090 --> 00:05:10.910
So it's not guaranteed to be a string,

118
00:05:10.910 --> 00:05:12.140
and therefore the trim method

119
00:05:12.140 --> 00:05:14.100
is not always available.

120
00:05:14.100 --> 00:05:17.570
Now there are various ways of working around that.

121
00:05:17.570 --> 00:05:19.600
We could add a type guard,

122
00:05:19.600 --> 00:05:23.390
we could check if typeof validatableInput.value

123
00:05:25.250 --> 00:05:30.250
equals string, and only perform this check if it is.

124
00:05:30.920 --> 00:05:33.040
But actually that would be a bit redundant.

125
00:05:33.040 --> 00:05:36.120
What we can do here is very simple.

126
00:05:36.120 --> 00:05:37.257
We can simply say

127
00:05:37.257 --> 00:05:39.140
"well, convert it to a string."

128
00:05:39.140 --> 00:05:41.370
If it was a number, now it's a string again.

129
00:05:41.370 --> 00:05:44.170
If it was a string, nothing changed.

130
00:05:44.170 --> 00:05:45.900
And with that, we're doing this.

131
00:05:45.900 --> 00:05:47.950
Now I just need to add my check here

132
00:05:47.950 --> 00:05:50.360
to check if that is zero.

133
00:05:50.360 --> 00:05:53.463
Or to be precise, if it's not zero.

134
00:05:54.680 --> 00:05:56.810
So if it is not zero,

135
00:05:56.810 --> 00:05:58.740
then this will return true,

136
00:05:58.740 --> 00:06:00.500
and isValid stays true.

137
00:06:00.500 --> 00:06:02.760
If it is zero, so if it is of length zero,

138
00:06:02.760 --> 00:06:04.940
if it's empty, this will return false

139
00:06:04.940 --> 00:06:06.890
and therefore isValid will become false.

140
00:06:06.890 --> 00:06:08.280
And we're only checking this

141
00:06:08.280 --> 00:06:11.190
if the required check is flagged with

142
00:06:11.190 --> 00:06:13.530
setting required to true.

143
00:06:13.530 --> 00:06:15.560
That's the first check I wanna perform here.

144
00:06:15.560 --> 00:06:17.660
It's not the only one of course.

145
00:06:17.660 --> 00:06:18.950
We can continue and check

146
00:06:18.950 --> 00:06:23.880
if validatableInput.minLength is set,

147
00:06:23.880 --> 00:06:25.190
if minLength is set,

148
00:06:25.190 --> 00:06:27.050
then this string which we get

149
00:06:27.050 --> 00:06:28.780
should have a certain minimum length.

150
00:06:28.780 --> 00:06:30.440
Important, the string should have

151
00:06:30.440 --> 00:06:31.620
a certain minimum length.

152
00:06:31.620 --> 00:06:33.600
We don't care about numbers here,

153
00:06:33.600 --> 00:06:37.060
we're not checking for a minimum value of a number.

154
00:06:37.060 --> 00:06:40.390
So here we can actually add a type guard,

155
00:06:40.390 --> 00:06:42.320
we can incorporate it into this check,

156
00:06:42.320 --> 00:06:46.910
and check if typeof validatableInput.value

157
00:06:46.910 --> 00:06:48.460
is equal to string.

158
00:06:48.460 --> 00:06:50.357
If it is not, we don't need to go into this if check

159
00:06:50.357 --> 00:06:52.570
because then there is nothing to check.

160
00:06:52.570 --> 00:06:55.330
If our value is a number, we don't care about this.

161
00:06:55.330 --> 00:06:57.710
If we set a min length for a number,

162
00:06:57.710 --> 00:06:59.330
we basically skip this check

163
00:06:59.330 --> 00:07:01.890
because it doesn't make much sense.

164
00:07:01.890 --> 00:07:03.420
If we do have a string though,

165
00:07:03.420 --> 00:07:05.663
and minLength is set,

166
00:07:06.570 --> 00:07:10.053
then I want to set isValid equal to isValid and,

167
00:07:11.181 --> 00:07:12.600
and then again, our check.

168
00:07:12.600 --> 00:07:16.580
And the check here is whether

169
00:07:16.580 --> 00:07:20.810
validatableInput.value, which we know is a string

170
00:07:20.810 --> 00:07:24.070
at this point here, length,

171
00:07:24.070 --> 00:07:28.520
is greater than validatableInput.minLength.

172
00:07:28.520 --> 00:07:31.660
So greater than the value which was defined here.

173
00:07:31.660 --> 00:07:33.920
Now we have one potential problem here though,

174
00:07:33.920 --> 00:07:36.163
and do you see which one that could be?

175
00:07:37.030 --> 00:07:38.630
This should generally work,

176
00:07:38.630 --> 00:07:42.210
but it will fail if minLength is set to zero.

177
00:07:42.210 --> 00:07:45.760
The intention of the developer setting it to zero

178
00:07:45.760 --> 00:07:48.760
is probably not to skip this check,

179
00:07:48.760 --> 00:07:50.170
but to check whether we do have

180
00:07:50.170 --> 00:07:51.960
the minimum length of zero.

181
00:07:51.960 --> 00:07:53.800
Well, arguably it's a redundant check,

182
00:07:53.800 --> 00:07:55.850
because it's basically checking whether

183
00:07:55.850 --> 00:07:57.260
we do have anything at all,

184
00:07:57.260 --> 00:07:59.300
which we already do with the required check.

185
00:07:59.300 --> 00:08:01.330
So it's not a huge problem.

186
00:08:01.330 --> 00:08:04.150
Still, if you want to be super secure here,

187
00:08:04.150 --> 00:08:05.470
we should actually check

188
00:08:05.470 --> 00:08:10.470
if validatableInput.minLength is not equal to undefined.

189
00:08:10.640 --> 00:08:14.910
Or not equal to null, with one equal sign,

190
00:08:14.910 --> 00:08:17.130
this includes null and undefined,

191
00:08:17.130 --> 00:08:18.890
that's how JavaScript works.

192
00:08:18.890 --> 00:08:20.470
This is a bit safer,

193
00:08:20.470 --> 00:08:23.010
because now we make sure we always run this check

194
00:08:23.010 --> 00:08:25.140
even if minLength is set to zero,

195
00:08:25.140 --> 00:08:27.222
which is a falsy value.

196
00:08:27.222 --> 00:08:29.740
Again, you could argue if it makes sense,

197
00:08:29.740 --> 00:08:32.270
because it's basically the same check as up there,

198
00:08:32.270 --> 00:08:34.930
but still, here I want to perform it.

199
00:08:34.930 --> 00:08:36.790
So that's the minLength.

200
00:08:36.790 --> 00:08:38.130
Now I'll copy this,

201
00:08:38.130 --> 00:08:40.720
and basically do the same for maxLength.

202
00:08:40.720 --> 00:08:44.350
So maxLength here is also checked,

203
00:08:44.350 --> 00:08:46.870
also here and also only for strings.

204
00:08:46.870 --> 00:08:49.280
And of course here we just have to revert this.

205
00:08:49.280 --> 00:08:52.380
We wanna make sure that the length of the value

206
00:08:52.380 --> 00:08:55.173
which is provided is below our max length.

207
00:08:56.810 --> 00:08:58.760
Well, and now we get two more checks left

208
00:08:58.760 --> 00:09:00.160
for min and max value

209
00:09:00.160 --> 00:09:03.310
which only make sense for a number.

210
00:09:03.310 --> 00:09:05.150
So here I will add another check

211
00:09:05.150 --> 00:09:08.280
and check if validatableInput.min

212
00:09:09.720 --> 00:09:11.100
is not equal to null.

213
00:09:11.100 --> 00:09:13.820
Again, I'm not just checking for truthiness,

214
00:09:13.820 --> 00:09:17.050
because that would have problems with a value of zero.

215
00:09:17.050 --> 00:09:21.770
And then I'll check if the type of validatableInput.value

216
00:09:21.770 --> 00:09:23.250
is equal to number.

217
00:09:23.250 --> 00:09:25.640
Because I see not much sense in checking

218
00:09:25.640 --> 00:09:26.760
this for a string.

219
00:09:26.760 --> 00:09:28.020
If you wanna check it for a string,

220
00:09:28.020 --> 00:09:29.680
of course you can omit this.

221
00:09:29.680 --> 00:09:32.120
Then you just have to make sure you convert the value

222
00:09:32.120 --> 00:09:34.380
to a number when you use it in the check

223
00:09:34.380 --> 00:09:35.970
we're about to write.

224
00:09:35.970 --> 00:09:37.220
The check we're about to write,

225
00:09:37.220 --> 00:09:39.740
again, uses the old value of isValid

226
00:09:39.740 --> 00:09:41.500
and combines it with a new check

227
00:09:41.500 --> 00:09:44.000
to then store it back in isValid.

228
00:09:44.000 --> 00:09:47.210
And the new check should now well incorporate

229
00:09:47.210 --> 00:09:48.730
our number and check whether

230
00:09:48.730 --> 00:09:50.720
it's bigger than the min value.

231
00:09:50.720 --> 00:09:54.650
So here I check if validatableInput.value

232
00:09:54.650 --> 00:09:58.690
is greater than validatableInput.min.

233
00:09:58.690 --> 00:10:02.010
And now we can repeat this for max,

234
00:10:02.010 --> 00:10:06.190
so here we need max and here we also need max

235
00:10:06.190 --> 00:10:10.363
and we need to change this here to a smaller than symbol.

236
00:10:11.920 --> 00:10:13.230
With that, we're checking

237
00:10:13.230 --> 00:10:16.930
all the different scenarios you could have here.

238
00:10:16.930 --> 00:10:18.710
And we're returning isValid.

239
00:10:19.840 --> 00:10:21.600
Now we just need to create objects

240
00:10:21.600 --> 00:10:23.630
that adhere to this interface

241
00:10:23.630 --> 00:10:26.573
to then send them to the validate function.

242
00:10:28.160 --> 00:10:31.360
For that, let's go down to project input,

243
00:10:31.360 --> 00:10:34.000
and there in gatherUserInput

244
00:10:34.000 --> 00:10:36.360
I wanna construct my validatable object.

245
00:10:36.360 --> 00:10:38.420
Side note, besides an interface,

246
00:10:38.420 --> 00:10:40.870
of course we could've also created a class here,

247
00:10:40.870 --> 00:10:43.570
then we could instantiate it with the new keyword,

248
00:10:43.570 --> 00:10:46.070
but all that for practice and demo purposes here

249
00:10:46.070 --> 00:10:48.990
I wanna show how this works with an interface.

250
00:10:48.990 --> 00:10:51.900
So here we have our titleValidatable,

251
00:10:52.850 --> 00:10:54.970
which should be of type Validatable.

252
00:10:54.970 --> 00:10:56.830
And that of course is an object

253
00:10:56.830 --> 00:10:58.930
which needs to have a value property.

254
00:10:58.930 --> 00:11:01.020
And that's our enteredTitle.

255
00:11:01.020 --> 00:11:03.550
It doesn't need any other properties

256
00:11:03.550 --> 00:11:06.750
but I wanna check whether it's not empty,

257
00:11:06.750 --> 00:11:08.743
so we'll set required to true.

258
00:11:09.710 --> 00:11:12.430
And then we can copy that and repeat that

259
00:11:12.430 --> 00:11:16.270
for the description and for people.

260
00:11:16.270 --> 00:11:19.250
And here we have the description,

261
00:11:19.250 --> 00:11:21.880
whoops, the entered description I mean.

262
00:11:21.880 --> 00:11:24.260
Here we have the entered people.

263
00:11:24.260 --> 00:11:26.230
To be precise here I wanna have a number.

264
00:11:26.230 --> 00:11:29.020
So I convert this to a number with a plus symbol.

265
00:11:29.020 --> 00:11:30.810
All should be required,

266
00:11:30.810 --> 00:11:32.890
but then also here let's say the description

267
00:11:32.890 --> 00:11:35.420
should have a minLength of five characters

268
00:11:35.420 --> 00:11:38.823
and for the people, the minimum should be one,

269
00:11:39.820 --> 00:11:42.030
so that we have at least two people assigned.

270
00:11:42.030 --> 00:11:44.020
By the way, it's up to you how you implement this.

271
00:11:44.020 --> 00:11:47.200
Of course, in your validation logic,

272
00:11:47.200 --> 00:11:50.080
you could also check for greater equal

273
00:11:50.080 --> 00:11:52.030
smaller equal if you like to.

274
00:11:52.030 --> 00:11:54.200
Same for the length of course.

275
00:11:54.200 --> 00:11:56.940
Greater equal, smaller equal.

276
00:11:56.940 --> 00:11:58.660
That's also possible.

277
00:11:58.660 --> 00:12:00.520
Actually, I will keep these changes.

278
00:12:00.520 --> 00:12:01.920
So now we have the minimum of

279
00:12:01.920 --> 00:12:05.253
one person assigned and a max of five.

280
00:12:06.100 --> 00:12:08.500
Now we have these three validatable objects

281
00:12:08.500 --> 00:12:11.680
and now here, to the validate function,

282
00:12:11.680 --> 00:12:14.920
we pass our titleValidatable,

283
00:12:14.920 --> 00:12:16.440
to the second function call

284
00:12:16.440 --> 00:12:19.270
I pass the descriptionValidatable,

285
00:12:19.270 --> 00:12:21.310
and to the third function call

286
00:12:21.310 --> 00:12:24.460
I pass peopleValidatable.

287
00:12:24.460 --> 00:12:26.380
And now validate should return true

288
00:12:26.380 --> 00:12:29.480
if they're all valid, and false otherwise.

289
00:12:29.480 --> 00:12:32.420
So now I wanna check if at least one of them fails

290
00:12:32.420 --> 00:12:36.580
by checking if these are all false

291
00:12:36.580 --> 00:12:38.970
by adding an exclamation mark in front of it,

292
00:12:38.970 --> 00:12:41.560
to check if this is false or this is false

293
00:12:41.560 --> 00:12:42.740
or this is false.

294
00:12:42.740 --> 00:12:44.750
And if at least one of them is false,

295
00:12:44.750 --> 00:12:45.730
so if at least one of the

296
00:12:45.730 --> 00:12:47.760
validate function calls returns false,

297
00:12:47.760 --> 00:12:49.860
we'll make it in there and show the alert.

298
00:12:51.930 --> 00:12:53.610
And with that out of the way,

299
00:12:53.610 --> 00:12:54.860
to also test this,

300
00:12:54.860 --> 00:12:56.270
I'll go to index.html,

301
00:12:56.270 --> 00:12:58.210
because there on the input for people,

302
00:12:58.210 --> 00:13:00.410
I actually allow a maximum of 10

303
00:13:00.410 --> 00:13:01.460
and a minimum of zero.

304
00:13:01.460 --> 00:13:05.120
So in the input we technically can enter invalid values.

305
00:13:05.120 --> 00:13:06.240
On purpose of course,

306
00:13:06.240 --> 00:13:08.090
so that we can test our logic.

307
00:13:08.090 --> 00:13:10.200
And there for now let's save it all,

308
00:13:10.200 --> 00:13:11.750
compiles without errors.

309
00:13:11.750 --> 00:13:13.083
Let's now give it a try.

310
00:13:13.920 --> 00:13:16.000
If I click add project, I get an error

311
00:13:16.000 --> 00:13:17.430
which is good.

312
00:13:17.430 --> 00:13:21.370
Now let's enter test here, still get an error.

313
00:13:21.370 --> 00:13:24.180
Let's enter test here and five here,

314
00:13:24.180 --> 00:13:25.390
and I still get an error.

315
00:13:25.390 --> 00:13:26.870
Because my description is too short.

316
00:13:26.870 --> 00:13:28.160
If I enter one more character

317
00:13:28.160 --> 00:13:29.500
I do have the min length

318
00:13:29.500 --> 00:13:31.210
and I can create this.

319
00:13:31.210 --> 00:13:32.640
So now let's enter, let's say,

320
00:13:32.640 --> 00:13:34.580
minus one people,

321
00:13:34.580 --> 00:13:37.940
and well okay html doesn't support this.

322
00:13:37.940 --> 00:13:39.200
But let's enter zero

323
00:13:39.200 --> 00:13:42.040
or six and we get errors.

324
00:13:42.040 --> 00:13:43.840
And only if I enter something between

325
00:13:43.840 --> 00:13:46.100
one and five it works.

326
00:13:46.100 --> 00:13:49.260
So that seems to work as it should,

327
00:13:49.260 --> 00:13:50.240
and that's pretty good.

328
00:13:50.240 --> 00:13:51.850
And that's of course just one way

329
00:13:51.850 --> 00:13:53.570
of implementing validation.

330
00:13:53.570 --> 00:13:56.510
But a way which actually is now quite reusable,

331
00:13:56.510 --> 00:13:59.170
could be used like this in different parts of the app

332
00:13:59.170 --> 00:14:01.660
as well and of course it takes advantage

333
00:14:01.660 --> 00:14:04.480
of typescript and offers us great support

334
00:14:04.480 --> 00:14:07.853
and type checking to avoid unnecessary mistakes.

