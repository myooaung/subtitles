WEBVTT

00:02.220 --> 00:04.550
-: Estoy hablando de un decorador, que podemos

00:04.550 --> 00:07.350
añadir que vincula automáticamente la palabra clave "this"

00:07.350 --> 00:09.930
para que no tengamos que llamar a bind aquí.

00:09.930 --> 00:12.500
Ahora, obviamente, llamar a bind aquí no es una gran

00:12.500 --> 00:14.160
cosa si no hay nada malo en ello, pero

00:14.160 --> 00:16.460
también queremos practicar lo que hemos aprendido

00:16.460 --> 00:20.220
y si tenemos que hacer esto en muchos muchos lugares a través de nuestra aplicación

00:20.220 --> 00:22.730
tener un decorador, que sólo podemos añadir en realidad

00:22.730 --> 00:24.970
podría ser más fácil.

00:24.970 --> 00:27.100
Así que, vamos a deshacernos de la unión de esto aquí.

00:27.100 --> 00:30.010
Y en su lugar, por encima de la clase aquí, voy a

00:30.010 --> 00:33.010
añadir el auto bind decorador y sólo estoy añadiendo

00:33.010 --> 00:34.920
algunos comentarios aquí para

00:34.920 --> 00:38.750
mantener este archivo organizado, al menos un poco.

00:38.750 --> 00:40.490
Clase ProjectInput Entonces,

00:42.260 --> 00:44.790
¿qué es un decorador?

00:44.790 --> 00:46.770
Un decorador es una función, ¿verdad?

00:46.770 --> 00:48.130
Y puedes encontrarlo con la

00:48.130 --> 00:51.383
decoración de la función aquí o como una expresión de la función.

00:52.490 --> 00:54.780
Así que, aquí voy a utilizar una función de decoración,

00:54.780 --> 00:57.780
y voy a llamarla autobind, el nombre depende de ti.

00:57.780 --> 01:01.670
Y este decorador recibirá como argumentos libres el objetivo,

01:01.670 --> 01:03.173
el nombre del método al

01:04.430 --> 01:06.430
que está ligado, porque voy a crear

01:06.430 --> 01:09.083
un decorador de método aquí.

01:09.980 --> 01:12.960
Y también el descriptor

01:12.960 --> 01:15.720
de ese método.

01:15.720 --> 01:18.370
Uh, descriptor de propiedades porque los métodos

01:18.370 --> 01:22.760
al final son sólo propiedades, propiedades que contienen funciones.

01:22.760 --> 01:24.400
Ahora bien, ¿por qué es un decorador de métodos?

01:24.400 --> 01:29.210
Porque la idea es que podamos añadirlo a submitHandler

01:29.210 --> 01:32.210
así, y acabar con él.

01:32.210 --> 01:33.680
Esa es la idea.

01:33.680 --> 01:35.500
Todavía no hemos llegado a ese punto,

01:35.500 --> 01:38.143
pero así es como debería funcionar al final.

01:39.090 --> 01:42.950
Ahora, para que funcione, volvamos a nuestra función de arriba

01:42.950 --> 01:46.880
y ¿qué tiene que ir en el cuerpo de la función entonces?

01:46.880 --> 01:49.490
Bueno, ahí dentro, lo primero que quiero

01:49.490 --> 01:51.950
es acceder al método original.

01:51.950 --> 01:56.593
Con descriptor. para que almacenemos el método

01:56.593 --> 01:59.380
con el que definimos originalmente.

01:59.380 --> 02:03.540
Entonces quiero crear mi descriptor ajustado aquí que

02:03.540 --> 02:04.873
es un objeto.

02:06.650 --> 02:11.090
Escribiré PropertyDescriptor, en realidad.

02:11.090 --> 02:13.880
Donde configurable debe ser puesto a true, para

02:13.880 --> 02:15.910
que siempre podamos cambiarlo.

02:15.910 --> 02:17.573
Y donde entonces necesitamos un captador.

02:18.510 --> 02:21.770
Y en ese getter, aquí, que debe ejecutarse cuando

02:21.770 --> 02:24.270
se intenta acceder a la función.

02:24.270 --> 02:27.710
Vamos a establecer aquí la función límite, utilizando el

02:27.710 --> 02:29.220
método original que estamos

02:29.220 --> 02:31.030
extrayendo allí arriba.

02:31.030 --> 02:34.063
Y llamando a atar esto en él.

02:35.370 --> 02:36.203
Entonces, quiero

02:37.860 --> 02:40.170
devolver esa función ligada, y eso debería

02:40.170 --> 02:41.603
ser todo.

02:42.510 --> 02:44.190
Y en general, por supuesto,

02:44.190 --> 02:46.620
devolveré el descriptor ajustado

02:46.620 --> 02:48.653
en ese método decorador.

02:49.510 --> 02:52.880
Ahora obtenemos un error con eso, en el submitHandler.

02:52.880 --> 02:56.020
Eso, el soporte experimental para los decoradores es una característica

02:56.020 --> 02:57.960
que básicamente necesita ser habilitada.

02:57.960 --> 03:00.400
Así que debemos ir al archivo tsconfig, y allí sólo

03:00.400 --> 03:02.320
hay que desplazarse hacia abajo.

03:02.320 --> 03:05.770
Deberías encontrar la opción "experimentalDecorators"

03:05.770 --> 03:07.450
y comentarla.

03:07.450 --> 03:09.980
Y añade una coma delante.

03:09.980 --> 03:14.183
Guárdelo, y luego reinicie el proceso de compilación de tipos.

03:15.180 --> 03:17.700
Ahora, todavía me muestra algunos errores aquí,

03:17.700 --> 03:18.913
si expando esto, el methodName

03:20.212 --> 03:23.170
es declarado, pero su valor nunca es leído.

03:23.170 --> 03:25.410
En aplicación. de la línea cuatro.

03:25.410 --> 03:26.760
Se refiere a esto aquí,

03:26.760 --> 03:29.020
tengo este argumento, que recibí aquí

03:29.020 --> 03:30.940
que en realidad nunca usé.

03:30.940 --> 03:34.370
Lo mismo ocurre con el objetivo, nunca lo he utilizado.

03:34.370 --> 03:36.343
Ahora, hay dos maneras de resolver esto.

03:37.200 --> 03:39.610
Una manera, es ir al tsconfig, y

03:39.610 --> 03:42.813
aflojar nuestras reglas de rigor, aquí.

03:44.160 --> 03:46.740
noUnusedParameters, si lo ponemos en false estamos

03:46.740 --> 03:49.090
permitiendo parámetros no utilizados.

03:49.090 --> 03:50.670
Así que, esto sería una cosa,

03:50.670 --> 03:52.910
o usted utiliza nombres especiales

03:52.910 --> 03:54.053
guión bajo, y el guión

03:55.180 --> 03:56.653
bajo dos.

03:57.770 --> 04:01.860
Esto es en realidad, una pista para typescript y javascript que es consciente

04:01.860 --> 04:03.130
de que no va a utilizar

04:03.130 --> 04:04.800
estos valores, pero necesita

04:04.800 --> 04:05.930
aceptarlos porque

04:05.930 --> 04:08.740
necesita el argumento que buscan.

04:08.740 --> 04:11.810
Si ahora guardamos esto, esto compila sin errores

04:11.810 --> 04:14.700
y si volvemos a entrar en hola aquí y enviamos

04:14.700 --> 04:17.040
esto, todavía funciona ahora gracias

04:17.040 --> 04:20.060
a nuestro decorador auto bind.

04:20.060 --> 04:23.120
Lo que, con suerte, también demuestra que este decorador puede

04:23.120 --> 04:24.950
tener alguna utilidad real.

04:24.950 --> 04:27.530
Ahora, por supuesto, aquí es realmente un poco más

04:27.530 --> 04:29.510
de trabajo, que sólo llamar a bind.

04:29.510 --> 04:32.120
Pero imagínese que esto se utiliza en más y más métodos

04:32.120 --> 04:33.820
que tienen que ser atados.

04:33.820 --> 04:36.140
El hecho de no tener que llamar al bind manualmente,

04:36.140 --> 04:38.140
puede ahorrarte algo de tiempo, y también evitar

04:38.140 --> 04:40.430
algunos errores potenciales en los casos en los que

04:40.430 --> 04:42.343
simplemente lo hayas olvidado.
