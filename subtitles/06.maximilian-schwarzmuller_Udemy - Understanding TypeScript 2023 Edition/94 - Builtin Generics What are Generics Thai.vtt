WEBVTT

00:02.130 --> 00:02.963
ผู้บรรยาย: ฉันกลับมาที่

00:02.963 --> 00:06.690
Project Setup จำลองของเรา ซึ่งเราใช้ซ้ำแล้วซ้ำอีก

00:06.690 --> 00:10.190
ในนั้น เราสามารถเรียกใช้ NPM start เพื่อเรียกเซิร์ฟเวอร์การพัฒนานั้นขึ้นมาได้

00:10.190 --> 00:15.260
จากนั้นในหน้าต่างเทอร์มินัลใหม่โดยที่เซิร์ฟเวอร์ทำงานในหน้าต่างเทอร์มินัลอื่น

00:15.260 --> 00:17.419
ฉันเรียกใช้ TSC dash W เพื่อเริ่มกระบวนการคอมไพล์

00:17.419 --> 00:21.540
TypeScript ของฉันและทำให้สิ่งนั้นทำงานต่อไปได้

00:21.540 --> 00:24.560
แน่นอนว่าเราได้หน้าว่างเพราะไม่มีอะไรอยู่ในนั้น

00:24.560 --> 00:29.480
แต่ตอนนี้เราสามารถเล่นในไฟล์ TS ของแอปและเริ่มต้นใช้งานทั่วไปได้

00:29.480 --> 00:32.940
และฉันคิดว่ามันง่ายที่สุดที่จะเข้าใจ

00:32.940 --> 00:35.450
generics ถ้าเราดูที่ default

00:35.450 --> 00:37.450
type ซึ่งสร้างขึ้นใน TypeScript

00:37.450 --> 00:39.610
ซึ่งเราใช้งานจริงมากซึ่งกลายเป็น

00:39.610 --> 00:44.410
generic และนั่นจะเป็นอาร์เรย์

00:44.410 --> 00:46.900
สมมติว่าเรามีอาร์เรย์ของชื่อ

00:46.900 --> 00:50.370
สมมติว่าแม็กซ์และแมนนวล

00:50.370 --> 00:51.620
ดังนั้นเราจึงได้สองชื่อในนั้น

00:51.620 --> 00:57.210
แน่นอน ประเภทของค่าคงที่ของชื่อคืออาร์เรย์ของสตริง

00:57.210 --> 01:02.460
ที่จริง เราอาจคิดว่านี่เป็นการรวมสองประเภทเข้าด้วยกัน

01:02.460 --> 01:05.760
เช่นเดียวกับที่คุณสามารถมีวัตถุที่มีคุณสมบัติต่างกัน

01:05.760 --> 01:09.310
ซึ่งในทุกคุณสมบัติคุณอาจจัดเก็บเป็นประเภทที่แตกต่างกัน

01:09.310 --> 01:16.440
อาร์เรย์จะมีเพียงสิ่งที่มีข้อมูลต่างกันเสมอ ในกรณีนี้จะมีสตริงอยู่ในนั้น

01:16.440 --> 01:20.230
จริงๆ แล้วเรามีประเภทอาร์เรย์ ก็แค่อาร์เรย์ และถ้าผมจะลบชื่อตรงนี้และตัดออก

01:20.230 --> 01:29.140
คุณจะเห็นว่า TypeScript จะอนุมานว่านี่เป็นอาร์เรย์ประเภทอะไรก็ได้ที่มีข้อมูลอยู่ในนั้น

01:29.140 --> 01:32.690
TypeScript แท้จริงรู้ประเภทอาร์เรย์

01:32.690 --> 01:37.600
เราจึงพูดได้ว่า นี่ควรเป็นอาร์เรย์ แต่อย่างที่คุณเห็นถ้าฉันระบุแบบนี้

01:37.600 --> 01:39.900
เราได้รับข้อผิดพลาด แม้ว่าฉันจะบอกคุณได้ว่าประเภทอาร์เรย์แบบนี้มีอยู่ใน

01:39.900 --> 01:43.570
TypeScript

01:43.570 --> 01:48.710
แต่เราเห็นว่ามันเป็นประเภททั่วไปและต้องการอาร์กิวเมนต์ประเภทเดียว

01:48.710 --> 01:50.950
และตอนนี้ นั่นคือสิ่งที่เราไม่เคยเห็นมาก่อน

01:50.950 --> 01:53.870
เราไม่เคยได้ยินเกี่ยวกับประเภททั่วไปมาก่อน

01:53.870 --> 01:55.750
ทีนี้ สัญลักษณ์แปลกๆ ตรงนี้

01:55.750 --> 01:58.120
เมื่อใดก็ตามที่คุณเห็นสิ่งนี้ใน TypeScript

01:58.120 --> 02:01.060
คุณกำลังจัดการกับประเภททั่วไป

02:01.060 --> 02:12.920
ประเภททั่วไปคือประเภทที่เชื่อมโยงกับประเภทอื่นและมีความยืดหยุ่นมากว่าประเภทใดที่แน่นอนกว่าประเภทอื่น

02:12.920 --> 02:14.130
ฟังดูยากไหม?

02:14.130 --> 02:16.820
ลองกลับไปที่ตัวอย่างอาร์เรย์นั้น

02:16.820 --> 02:19.380
เรารู้ว่าเราต้องการจัดเก็บอาร์เรย์ที่นี่

02:19.380 --> 02:22.250
ดังนั้นอาร์เรย์เองก็สามารถเป็นประเภทได้

02:22.250 --> 02:26.730
มันคือรายการของข้อมูลที่ประกอบกันเป็นประเภทอยู่แล้ว

02:26.730 --> 02:32.200
เช่นเดียวกับอ็อบเจกต์ที่มีประเภทในตัวของมันเอง แม้ว่าเราจะยังไม่รู้ว่าข้อมูลใดที่จะเข้าไปอยู่ในนั้น

02:32.200 --> 02:34.490
อาร์เรย์จึงเป็นประเภทในตัวเอง

02:34.490 --> 02:39.860
แต่แน่นอนว่าอาร์เรย์เก็บข้อมูลบางประเภทไว้ในนั้น

02:39.860 --> 02:44.810
ตอนนี้ประเภทอาร์เรย์เองไม่สนใจว่าจะเก็บข้อมูลประเภทใดไว้ในนั้น

02:44.810 --> 02:48.150
ประเภทอาร์เรย์ไม่สนใจว่าคุณกำลังจัดเก็บรายการสตริง

02:48.150 --> 02:52.430
ตัวเลข วัตถุ หรือข้อมูลผสม

02:52.430 --> 02:54.500
ประเภทอาร์เรย์ไม่สนใจจริงๆ

02:54.500 --> 02:58.640
แต่สนใจเกี่ยวกับการรับข้อมูลอย่างน้อย แม้ว่าคุณจะบอกว่าฉันไม่รู้ก็ตาม

02:58.640 --> 03:02.960
โดยการตั้งค่าให้พิมพ์อาร์เรย์ใดๆ

03:02.960 --> 03:05.870
ดีกว่าไม่ระบุอะไรเลย

03:05.870 --> 03:08.330
นี่เป็นวิธีหนึ่งในการกำหนดประเภทอาร์เรย์

03:08.330 --> 03:11.430
ประเภทของข้อมูลที่จัดเก็บไว้ในนั้นและวงเล็บเหลี่ยม

03:11.430 --> 03:14.620
อีกวิธีหนึ่งที่จะสร้างประเภทเดียวกันทุกประการคือใช้สิ่ง

03:14.620 --> 03:17.630
Array นั้นแล้ววงเล็บมุมเหล่านี้

03:17.630 --> 03:20.030
และระหว่างวงเล็บมุมเหล่านี้

03:20.030 --> 03:24.140
คุณระบุชนิดของข้อมูลที่ควรใส่ในอาร์เรย์

03:24.140 --> 03:26.330
ตัวอย่างเช่น สตริง และนี่คือ

03:26.330 --> 03:31.330
100% เหมือนกับการกำหนดประเภทนี้ที่นี่

03:32.030 --> 03:34.950
แน่นอน ที่นี่คุณสามารถใช้ประเภทยูเนี่ยนเพื่อบอกว่า

03:34.950 --> 03:42.970
อาร์เรย์นี้เก็บสตริงหรือตัวเลข หรือใช้อะไรก็ได้ถ้าคุณไม่ต้องการพูดอะไรเกี่ยวกับประเภทหรือตามที่เราเพิ่งมีสตริง

03:42.970 --> 03:44.330
นี่คือประเภททั่วไป ประเภททั่วไปที่สร้างขึ้นใน

03:44.330 --> 03:46.900
TypeScript

03:46.900 --> 03:50.440
ประเภทที่เชื่อมต่อกับประเภทอื่นซึ่งเราต้องการทราบว่าประเภทใดของเราที่เป็นเช่นนั้นกับ

03:50.440 --> 03:56.810
TypeScript สามารถให้การสนับสนุนเราได้ดีกว่า

03:56.810 --> 03:57.910
เพราะตัวอย่างที่นี่

03:57.910 --> 04:01.510
ถ้าเรารู้ว่าสิ่งที่เราเก็บไว้ในนั้นจะเป็นสตริง

04:01.510 --> 04:04.380
เราก็จะรู้ว่าเมื่อใดก็ตามที่ฉันเข้าถึงองค์ประกอบในอาร์เรย์นั้น

04:04.380 --> 04:09.410
ฉันจะทำสิ่งที่เป็นสตริงกับมันได้

04:09.410 --> 04:12.260
ฉันสามารถเรียกใช้เมธอดสตริงเหล่านี้ได้และ

04:12.260 --> 04:18.220
TypeScript จะไม่บ่นเพราะมันรู้ดีว่าอาร์เรย์นี้มีสตริงอยู่

04:18.220 --> 04:20.410
นั่นคือแนวคิดของประเภททั่วไป

04:20.410 --> 04:23.230
ประเภทใดประเภทหนึ่งในกรณีนี้ ประเภทอาร์เรย์อาจทำงานได้ดีขึ้นหรือทำงานไม่ได้เลย

04:23.230 --> 04:29.040
หากคุณให้ข้อมูลเพิ่มเติมเกี่ยวกับประเภทข้อมูลที่ให้ไว้ในประเภทอาร์เรย์นี้ และแน่นอนว่า

04:29.040 --> 04:36.590
ประเภทอาร์เรย์เป็นเพียงตัวอย่างหนึ่งเท่านั้น

04:36.590 --> 04:39.840
อีกประเภททั่วไปที่มีอยู่ใน TypeScript

04:39.840 --> 04:42.130
คือประเภทสัญญา

04:42.130 --> 04:45.470
ตอนนี้สัญญาเป็นคุณสมบัติ JavaScript ใช่ไหม

04:45.470 --> 04:46.970
ไม่ใช่คุณสมบัติ TypeScript

04:46.970 --> 04:49.437
คุณสามารถสร้างสัญญาใน JavaScript

04:49.437 --> 04:52.000
และในกรณีที่คุณไม่แน่ใจว่าสัญญาคืออะไร

04:52.000 --> 04:53.870
ให้แนบลิงก์มาด้วย

04:53.870 --> 04:58.150
สามารถสร้างสัญญาได้โดยใช้สัญญาใหม่

04:58.150 --> 05:00.640
อีกครั้ง นี่คือฟังก์ชันคอนสตรัคเตอร์ คลาสที่สร้างขึ้นใน

05:00.640 --> 05:05.870
JavaScript และฟังก์ชันคอนสตรัคเตอร์สัญญารับหนึ่งอาร์กิวเมนต์ซึ่งตัวมันเองเป็นฟังก์ชัน

05:05.870 --> 05:12.580
ซึ่งในที่สุดจะได้รับอาร์กิวเมนต์สองอาร์กิวเมนต์ในที่สุด ฟังก์ชันแก้ไขและปฏิเสธ

05:12.580 --> 05:15.180
ตอนนี้สิ่งเหล่านี้จะถูกส่งต่อให้เราโดยอัตโนมัติโดย

05:15.180 --> 05:17.790
JavaScript ในเบราว์เซอร์

05:17.790 --> 05:22.400
จากนั้นในสัญญา เราสามารถตั้งค่าตัวจับเวลา จากนั้นในฟังก์ชันการโทรกลับของตัวจับเวลานั้น

05:22.400 --> 05:28.140
เราสามารถแก้ไขสัญญาภายนอกได้

05:28.140 --> 05:30.140
ดังนั้นในฟังก์ชันการเรียกกลับนี้

05:30.140 --> 05:34.823
เราสามารถเรียกการแก้ไขและบอกว่าเสร็จสิ้น

05:36.500 --> 05:43.860
เมื่อเราทำเช่นนั้น สัญญานี้จะสร้างวัตถุใหม่ วัตถุสัญญาซึ่งเก็บไว้ในค่าคงที่ของสัญญา

05:43.860 --> 05:47.700
ทีนี้ ค่าคงที่สัญญานี้มีประเภทเฉพาะ

05:47.700 --> 05:49.470
เป็นประเภทสัญญา และอีกครั้ง

05:49.470 --> 05:56.130
คุณเห็นวงเล็บมุมเหล่านี้เพราะในที่สุดสัญญานี้จะแก้ไขบางอย่าง

05:56.480 --> 05:58.930
ตอนนี้มันบอกว่าไม่ทราบเพราะ TypeScript

05:58.930 --> 06:03.880
ไม่สามารถเข้าใจได้อย่างสมบูรณ์ว่าเราจะแก้ไขเป็นสตริงที่นี่

06:03.880 --> 06:05.870
แต่ดังนั้นเราจึงสามารถพูดได้ว่านี่เป็นสัญญา

06:05.870 --> 06:11.450
ซึ่งในที่สุดจะให้ผลลัพธ์เป็นสตริง และเราทำเช่นนั้นอีกครั้งโดยใช้ประเภททั่วไปของเรา

06:11.450 --> 06:18.380
ประเภทหลักคือสัญญา แต่สัญญาก็เหมือนกับอาร์เรย์ซึ่งทำงานร่วมกับประเภทอื่น

06:18.380 --> 06:22.000
อาร์เรย์ใช้ประเภทอื่นเพราะข้อมูลที่เก็บไว้ในนั้น

06:22.000 --> 06:25.640
ข้อมูลบางประเภท และสัญญาทำงานร่วมกับประเภทอื่น

06:25.640 --> 06:32.940
เพราะในที่สุดมันจะส่งคืนข้อมูลบางประเภท และในกรณีนี้คือสัญญาที่ส่งคืนสตริงในที่สุด

06:32.940 --> 06:34.470
ทำไมถึงมีประโยชน์?

06:34.470 --> 06:37.550
เหตุใดข้อมูลพิเศษประเภทนี้จึงมีประโยชน์

06:37.550 --> 06:41.430
ถ้าเราเพิ่งมีประเภทสัญญาที่นี่และนั่นจะไม่ได้รับอนุญาต

06:41.430 --> 06:48.390
แต่ถ้าเราพูดว่าสัญญาประเภทใด ๆ ซึ่งโดยพื้นฐานแล้วจะเหมือนกับประเภทจะไม่รู้จักประเภททั่วไปถ้ามันไม่มีข้อมูลเกี่ยวกับสิ่งที่เรา

06:48.390 --> 06:51.280
กลับไป.

06:51.280 --> 06:53.340
แน่นอนว่าในคำสัญญานี้ เราสามารถใช้มันเหมือนกับที่เราทำตามสัญญาทั้งหมดได้

06:53.340 --> 06:59.770
และในที่สุด เราก็จะได้รับข้อมูลบางอย่าง แต่เราไม่รู้อะไรเลยเกี่ยวกับข้อมูลนั้น

06:59.770 --> 07:02.500
ฉันไม่สามารถเรียกใช้เมธอดสตริงได้

07:02.500 --> 07:04.850
ฉันทำได้เพราะในกรณีนี้ แต่ฉันไม่ได้รับการสนับสนุน

07:04.850 --> 07:07.590
TypeScript ใด ๆ

07:07.590 --> 07:11.313
ฉันยังสามารถลองทำอะไรกับมันได้ ซึ่งมันไม่ได้ผลอย่างแน่นอน

07:12.170 --> 07:15.220
ตัวอย่างเช่น หากเราเปลี่ยนค่านี้และส่งคืนตัวเลขที่นี่

07:15.220 --> 07:17.320
ฉันยังสามารถเรียกใช้เมธอดสตริงที่นี่ได้

07:17.320 --> 07:22.640
เนื่องจาก TypeScript ไม่มีข้อมูลเกี่ยวกับข้อมูลที่สัญญานี้จะให้ผลในที่สุด

07:22.640 --> 07:24.070
ขณะนี้มีประเภททั่วไป

07:24.070 --> 07:26.280
เราให้ข้อมูลนั้นกับ TypeScript

07:26.280 --> 07:30.240
เราสามารถบอก TypeScript ได้ว่าในที่สุดสัญญานี้จะให้ผลลัพธ์เป็นสตริง

07:30.240 --> 07:34.940
หรือในกรณีนี้ ตัวเลขแล้ว TypeScript สามารถเตือนเราได้ที่นี่

07:34.940 --> 07:37.390
ถ้าฉันพยายามบันทึกสิ่งนี้ มันจะทำให้เราเกิดข้อผิดพลาด

07:37.390 --> 07:44.092
เพราะมันรู้ว่า เฮ้ สัญญานี้ในที่สุดจะให้ตัวเลขออกมา และคุณสามารถแยกส่วนนั้นออกได้

07:44.092 --> 07:48.010
ดังนั้นเราจึงได้รับความปลอดภัยในประเภทที่ดีขึ้นด้วยประเภททั่วไป

07:48.010 --> 07:52.720
ดังนั้นคุณจึงมีความยืดหยุ่นมากเกี่ยวกับสิ่งที่คุณทำกับข้อมูลประเภททั่วไปนั้น

07:52.720 --> 07:54.830
อาร์เรย์รู้ว่าข้อมูลใดเก็บไว้

07:54.830 --> 07:57.140
สัญญารู้ว่าข้อมูลใดส่งคืน

07:57.140 --> 08:02.140
หากคุณสร้างคลาสหรือฟังก์ชันทั่วไปของคุณเอง คุณอาจทำสิ่งที่แตกต่างไปจากที่นั่นโดยสิ้นเชิง

08:02.140 --> 08:14.240
แต่ในตอนท้ายประเภททั่วไปช่วยให้คุณได้รับข้อมูลประเภทเพิ่มเติมหากคุณมีคลาสที่ซับซ้อนมากขึ้นหรือฟังก์ชันที่ซับซ้อนมากขึ้นซึ่งทำบางอย่างกับข้อมูลที่เข้ามาในลักษณะที่ไม่สนใจข้อมูลจริงๆ

08:14.240 --> 08:16.020
ของประเภทใดประเภทหนึ่งโดยเฉพาะ

08:16.020 --> 08:21.500
แต่ที่คุณต้องการเก็บข้อมูลประเภทออกจากข้อมูลขาเข้าเพื่อรับการสนับสนุน TypeScript

08:21.500 --> 08:27.590
ที่ดีขึ้นเมื่อใดก็ตามที่คุณทำงานกับประเภททั่วไปของคุณ

08:27.590 --> 08:30.450
ดังนั้นเมื่อใดก็ตามที่คุณทำงานกับคำสัญญานั้น หรืออาร์เรย์ข้อมูล

08:30.450 --> 08:33.270
นั่นเป็นแนวคิดของยาชื่อสามัญ

08:33.270 --> 08:36.300
ดังนั้นที่นี่ ทั้งหมดถูกสร้างขึ้นในยาสามัญ

08:36.300 --> 08:37.460
มาแสดงความคิดเห็นกัน

08:37.460 --> 08:40.450
ตอนนี้มาสร้างคำประเภททั่วไปของเราเอง

08:40.450 --> 08:42.653
ลองใช้ประเภททั่วไปของเราเอง
