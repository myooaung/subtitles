WEBVTT

00:02.230 --> 00:04.860
Eğitmen: Tuple fikriyle gevşek bir şekilde ilişkili

00:04.860 --> 00:09.760
olan, uygulamanızda birlikte çalışabileceğiniz, sayı olarak temsil etmek istediğiniz,

00:09.760 --> 00:12.710
ancak insan tarafından okunabilir bir etiket atamak

00:12.710 --> 00:15.020
istediğiniz birkaç özel tanımlayıcıya,

00:15.020 --> 00:18.530
küresel sabitlere sahip olma fikridir.

00:18.530 --> 00:20.500
Ve bunun için Enum türüne sahipsiniz.

00:20.500 --> 00:23.800
Yine, bu bazı üst programlama dillerinde mevcuttur.

00:23.800 --> 00:25.780
JavaScript bunu bilmiyor ama.

00:25.780 --> 00:26.613
Şuna benziyor.

00:26.613 --> 00:28.110
Bir enum bu şekilde oluşturulur.

00:28.110 --> 00:30.540
JavaScript'te değil, yalnızca TypeScript dünyasında

00:30.540 --> 00:33.060
var olan enum anahtar sözcüğünü kullanırsınız, ardından

00:33.060 --> 00:34.840
küme parantezleri ve ardından tanımlayıcılarınız

00:34.840 --> 00:36.810
gelir.

00:36.810 --> 00:39.141
Ve TypeScript tarafından eklenen bu

00:39.141 --> 00:42.030
tür size numaralandırılmış bir liste verir.

00:42.030 --> 00:45.070
Sonuçta bu etiketler sıfırdan başlayan sayılara çevrilir

00:45.070 --> 00:48.580
ve kodunuzda kullanabileceğiniz insan tarafından okunabilir etiketlere

00:48.580 --> 00:50.133
sahip olursunuz.

00:51.310 --> 00:53.500
Size bir örnek göstermek için, rolüyle

00:53.500 --> 00:55.620
birlikte kişimize geri dönelim.

00:55.620 --> 00:58.010
Bu kodu kopyalayacağım ve sonra yorumlayacağım

00:58.010 --> 00:59.710
çünkü biraz değiştireceğim.

00:59.710 --> 01:01.600
Ve sonra burada, açık tip atamasından

01:01.600 --> 01:05.380
kurtulacağım ve bunun yerine çıkarıma geri döneceğim, çünkü şimdi

01:05.380 --> 01:07.150
rolü değiştireceğim.

01:07.150 --> 01:10.330
Ve şimdi diyelim ki bir yönetici, bir yazar ve belki de bir salt okunur

01:10.330 --> 01:12.350
kullanıcıya sahip olmak istiyoruz.

01:12.350 --> 01:14.750
Yöneticinin kimliği sıfır, salt

01:14.750 --> 01:18.660
okunur kullanıcının bir, yazarın iki olmalıdır.

01:18.660 --> 01:21.160
Şimdi elbette bunu bu sayılarla tam olarak bu şekilde

01:21.160 --> 01:22.550
saklayabiliriz.

01:22.550 --> 01:24.830
Bir dezavantajı, her zaman için bir role

01:24.830 --> 01:26.670
sahip olmadığımız bir sayı ekleyebiliriz

01:26.670 --> 01:30.320
ve daha sonra kodumuzda rolü çıkarmaya çalışırsak ve if kontrolünü

01:30.320 --> 01:33.392
kullanırsak hatalara yol açabilir.

01:33.392 --> 01:37.160
Ayrıca, bir geliştirici olarak bu kullanıcının hangi role sahip

01:37.160 --> 01:39.690
olduğunu anlamakta zorlanıyoruz.

01:39.690 --> 01:41.310
Yazar için miydi?

01:41.310 --> 01:43.020
Yoksa kullanıcı mı okudu?

01:43.020 --> 01:46.140
Daha uzun duraklamalar yaptıktan sonra, daha büyük ekiplerle

01:46.140 --> 01:48.810
çalışırken vb. bunu unutabilirsiniz.

01:48.810 --> 01:50.540
Yani bir geliştirici olarak,

01:50.540 --> 01:54.310
ADMIN ve READ ONLY USER gibi insan tarafından okunabilir

01:54.310 --> 01:58.630
tanımlayıcılar isteyebilirsiniz.

01:58.630 --> 02:00.240
Şimdi, elbette bunu kullanabilir,

02:00.240 --> 02:02.880
bu tür dize değerleriyle çalışabiliriz.

02:02.880 --> 02:06.100
Sorun şu ki, daha sonra bir if kontrolüne ihtiyaç duyarsak,

02:06.100 --> 02:11.100
kişi rolünün READ_ONLY_USER'a eşit olup olmadığını kontrol ederiz.

02:12.260 --> 02:13.500
Yoksa tek kelime miydi?

02:13.500 --> 02:15.380
Altı çizili miydi?

02:15.380 --> 02:17.440
Görüyorsunuz, o zaman bu dizeleri nasıl yazdığımızı,

02:17.440 --> 02:19.020
orada tam olarak hangi metne sahip olduğumuzu

02:19.020 --> 02:20.970
hatırlamamız gerekiyor.

02:20.970 --> 02:24.330
Çünkü kelimeler arasında tire olan bu dize

02:24.330 --> 02:27.430
elbette bu dize ile aynı değildir.

02:27.430 --> 02:29.973
Yani burada, derlemeye ve yazdırmaya

02:31.150 --> 02:36.120
çalıştığınızda bunu asla orada yapmayız, yalnızca okunur, çünkü

02:36.120 --> 02:39.170
kontrol basitçe doğru sonuç vermez.

02:39.170 --> 02:42.150
Kişi üzerinde böyle bir rolümüz yok, dolayısıyla konsolda

02:42.150 --> 02:43.930
bu çıktıyı alamıyoruz.

02:43.930 --> 02:47.290
Yani dize tanımlayıcıların da dezavantajları vardır.

02:47.290 --> 02:50.340
Şimdi bu tür senaryolar için JavaScript'te global sabitler

02:50.340 --> 02:52.340
tanımlamak oldukça yaygındır.

02:52.340 --> 02:55.580
Örneğin, daha sonra sayılar veya dizeler gibi

02:55.580 --> 02:58.053
belirli değerleri mümkün olduğunca

02:58.980 --> 03:00.060
tutan admin.

03:00.060 --> 03:01.700
Sayılar elbette bize bellekte

03:01.700 --> 03:04.370
fazladan kod ve bit tasarrufu sağlayabilir.

03:04.370 --> 03:09.370
Ve orada ADMIN, READ_ONLY ve AUTHOR gibi rollerimiz olabilir

03:09.390 --> 03:10.870
ve aşağıda sadece

03:10.870 --> 03:13.750
bu rolü kullanmamız gerekir.

03:13.750 --> 03:17.343
Şimdi bunun avantajı, bunu kodumuzun her yerinde kullanabilmemizdir.

03:18.230 --> 03:22.600
Bu nedenle, örneğin burada, bu kodu çalıştırırsam, derlersem ve sonra bunun yeniden

03:22.600 --> 03:23.680
yüklenmesine izin verirsek,

03:25.260 --> 03:28.570
burada yönetici olarak görürüz, bu yüzden bu çalışır ve bu JavaScript'te

03:28.570 --> 03:31.520
yaygın bir modeldir.

03:31.520 --> 03:34.190
Dezavantajı ise şu anda rolün sadece bir sayı olduğu sonucuna

03:34.190 --> 03:37.290
varılıyor, bu nedenle desteklemediğimiz bir sayı bile olsa herhangi

03:37.290 --> 03:39.630
bir sayıyı orada saklayabiliriz.

03:39.630 --> 03:42.450
Ayrıca, tüm bu sabitleri tanımlamak ve yönetmek

03:42.450 --> 03:44.060
zorundayız.

03:44.060 --> 03:45.920
İşte bu noktada bir enum bize iş kazandırabilir.

03:45.920 --> 03:48.730
Bu tamamen iyidir, ancak bir enum bunu daha kolay hale getirir.

03:48.730 --> 03:50.970
Enum anahtar sözcüğüyle bir enum oluşturuyoruz,

03:50.970 --> 03:55.550
buna Role adını verebiliriz, enum da özel bir tür olduğu için geleneksel

03:55.550 --> 03:58.620
olarak büyük harfle başlar.

03:58.620 --> 04:01.760
Bu sizin ilk özel tipiniz, bu kursta çok daha fazlasını

04:01.760 --> 04:03.860
yazacağız, bu ilk.

04:03.860 --> 04:06.560
Ve sonra bu enuma atamak istediğiniz türün adından

04:06.560 --> 04:09.520
sonra küme parantezleri eklersiniz, aynen böyle, iki

04:09.520 --> 04:14.040
nokta üst üste yok, eşittir işareti yok, sadece addan sonra küme parantezleri.

04:14.040 --> 04:15.800
Sonra noktalı virgül.

04:15.800 --> 04:19.433
Ve şimdi burada, yönetici, salt okunur ve yazar

04:20.650 --> 04:24.300
gibi değerlerinizi atayabilirsiniz.

04:24.300 --> 04:28.180
Ve perde arkasında bu sıfır numarasını, bu bir

04:28.180 --> 04:31.780
numarasını, bu da iki numarasını alır.

04:31.780 --> 04:34.650
Ve buradan Role'a erişebilirsiniz. ADMIN, bir nesnede olduğu

04:34.650 --> 04:37.840
gibi, tanımlayıcınıza erişirsiniz.

04:37.840 --> 04:40.380
Bunu kodunuzda başka bir yerde de kullanabilirsiniz,

04:40.380 --> 04:43.890
burada rolün AUTHOR olup olmadığını kontrol edebilir ve ardından

04:43.890 --> 04:46.710
author yazdırabiliriz ve tabii ki bunu şimdi çalıştırırsam

04:46.710 --> 04:50.630
bunu görmemeliyiz çünkü burada bir ADMIN rolü atadık.

04:50.630 --> 04:53.333
Ancak en önemli çıkarım, tüm bunları sayılara

04:53.333 --> 04:57.490
etiket atayan enum'un yardımıyla yapmış olmamızdır.

04:57.490 --> 04:59.210
JavaScript'te buna bir göz atarsak.

04:59.210 --> 05:02.830
Derlenmiş kodda, bu şekilde yeniden oluşturulduğunu görüyoruz.

05:02.830 --> 05:05.080
Sonunda, burada bir if ile yeniden inşa edilir.

05:05.080 --> 05:07.940
Yani kendi kendini yürüten fonksiyon.

05:07.940 --> 05:11.770
Ve Role burada basitçe bir nesne olarak yönetilir, bu nesne admin

05:11.770 --> 05:14.550
özelliğine, salt okunur özelliğe ve AUTHOR

05:14.550 --> 05:17.330
özelliğine sahiptir, burada sayı değerlerimizi

05:17.330 --> 05:19.970
depolarız, diyebilirsiniz.

05:19.970 --> 05:21.960
Yani bundan biraz daha karmaşıktır,

05:21.960 --> 05:24.210
ancak TypeScript'in kodu derlediğinde

05:24.210 --> 05:26.700
JavaScript kodunda bu enum yapısını kopyalamak

05:26.700 --> 05:28.560
için yaptığı şey budur.

05:28.560 --> 05:30.700
Burada bir geliştirici olarak, elimizde sadece

05:30.700 --> 05:32.680
bu uygun şekilde oluşturulmuş sayılar var.

05:32.680 --> 05:34.290
Üzerlerine gelirseniz, orada saklayacağımız

05:34.290 --> 05:36.520
numarayı göreceksiniz ve bu numaraları burada insan

05:36.520 --> 05:39.883
tarafından okunabilir bir şekilde kullanabilirsiniz.

05:40.750 --> 05:42.840
Şimdi enumlar için, varsayılan davranışla

05:42.840 --> 05:44.790
da sınırlı değilsiniz.

05:44.790 --> 05:47.470
Diyelim ki herhangi bir nedenle başlangıç sayısı

05:47.470 --> 05:50.533
olarak sıfırla başlamak istemiyorsunuz, o zaman tanımlayıcınızdan

05:50.533 --> 05:54.080
sonra buraya bir eşittir işareti ekleyebilir ve başka bir sayı girebilirsiniz

05:54.080 --> 05:56.610
ve şimdi yönetici beş sayısına atanır ve değeri

05:56.610 --> 05:59.610
atadığınız tanımlayıcıdan sonraki diğer tanımlayıcılar

05:59.610 --> 06:04.580
bunu alır ve sadece bu başlangıç değerini artırır.

06:04.580 --> 06:08.140
Yani şimdi sıfır, bir, iki yerine iyi, altı, yedi var.

06:08.140 --> 06:10.642
Elbette, kendi numaralarınıza ihtiyacınız

06:10.642 --> 06:14.820
varsa, tüm bu tanımlayıcılara kendi değerlerinizi de atayabilirsiniz.

06:14.820 --> 06:17.070
Ayrıca sayılarla da sınırlı değilsiniz,

06:17.070 --> 06:19.390
burada metinle de gidebilirsiniz, hatta

06:19.390 --> 06:21.950
burada yaptığım gibi karıştırabilirsiniz, buraya

06:21.950 --> 06:24.900
her şey gider, ancak genellikle sıfırdan başlayan sayıları

06:24.900 --> 06:28.530
artırma varsayılanı istediğiniz şeydir, ancak farklı bir davranışa

06:28.530 --> 06:31.530
ihtiyacınız varsa, burada bir dize ve ardından burada

06:31.530 --> 06:34.850
bir sayı ve burada da bir sayı veya belki bir sayı dizesi kullanmak

06:34.850 --> 06:37.890
istiyorsanız, bunu kesinlikle yapabilirsiniz, avantajı,

06:37.890 --> 06:40.880
bunu orada tanımlamanızdır ve bundan sonra, Rol türünüze

06:40.880 --> 06:48.270
her zaman oluşturduğunuz bu özel türe, oluşturduğunuz bu özel enum'a atıfta bulunursunuz.

06:48.270 --> 06:50.320
Bunu if kontrollerinizde ve tip atamalarınızda

06:50.320 --> 06:52.970
kullanırsınız ve sorun kalmaz.

06:52.970 --> 06:56.090
Bu, enum'un gücüdür ve insan tarafından okunabilen

06:56.090 --> 06:59.420
ve perde arkasında eşlenmiş bir değeri olan tanımlayıcılara

06:59.420 --> 07:03.173
ihtiyaç duyduğunuzda harika bir yapıdır.
