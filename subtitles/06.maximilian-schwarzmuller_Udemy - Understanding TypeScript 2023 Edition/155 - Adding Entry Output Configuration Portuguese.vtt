WEBVTT

00:01.538 --> 00:03.725
Narrador: Para começar, vamos antes

00:03.725 --> 00:07.086
de mais nada à tsconfig. json porque lá precisamos ter

00:07.086 --> 00:09.965
certeza de que certas coisas estão configuradas.

00:09.965 --> 00:12.780
Certifique-se de que a meta aqui, seja realmente

00:12.780 --> 00:16.286
definida para es5 ou es6, isso depende de você.

00:16.286 --> 00:19.423
Depende de quais navegadores você planeja apoiar.

00:19.423 --> 00:22.190
Porque no final o webpack e os tipos que o carregador

00:22.190 --> 00:24.050
usará este alvo para determinar

00:24.050 --> 00:26.543
como seu código deve ser transformado.

00:26.543 --> 00:28.960
Seus tipos de código devem ser transformados em

00:28.960 --> 00:32.480
código de script Java que roda em navegadores mais antigos também?

00:32.480 --> 00:36.210
Ou como no es6 para código que só roda em navegadores

00:36.210 --> 00:37.811
mais recentes?

00:37.811 --> 00:42.640
O módulo então deve ser ajustado para es2015 ou es6 para que o

00:42.640 --> 00:44.110
ajuste seja bom.

00:44.110 --> 00:49.110
E além disso, você também deseja verificar seu outDir.

00:50.560 --> 00:53.520
Vou mantê-lo para distanciar, mas você pode mudar isso se quiser

00:53.520 --> 00:55.997
compilar seu código para um diretório diferente.

00:55.997 --> 00:59.378
Mas você não precisa mais do diretório raiz, porque o

00:59.378 --> 01:02.260
webpack assumirá o controle, e o webpack determinará

01:02.260 --> 01:05.014
onde estão seus arquivos raiz.

01:05.014 --> 01:07.660
Portanto, em geral, estas configurações devem ser boas.

01:07.660 --> 01:09.525
Podemos sempre ajustá-los mais tarde

01:09.525 --> 01:12.487
se algo não funcionar da maneira que queremos.

01:12.487 --> 01:15.220
Com isso, é possível adicionar um novo arquivo de configuração

01:15.220 --> 01:19.848
ao lado do tsconfig. json e esse é o webpack. config. arquivo js.

01:19.848 --> 01:22.368
E certifique-se de nomeá-lo realmente assim

01:22.368 --> 01:24.150
porque este é o arquivo que o webpack

01:24.150 --> 01:27.579
procurará automaticamente e isto dirá até mesmo ao webpack

01:27.579 --> 01:30.220
como trabalhar com nosso projeto.

01:30.220 --> 01:32.840
Porque o webpack é uma ferramenta que precisa ser configurada

01:32.840 --> 01:34.568
para funcionar corretamente aqui.

01:34.568 --> 01:37.568
Então, o que fazemos neste webpack. config file?

01:37.568 --> 01:40.338
Este arquivo de configuração utiliza JavaScript e,

01:40.338 --> 01:43.288
na verdade, utiliza o nó. características js.

01:43.288 --> 01:46.747
Portanto, queremos usar o nó. js exporta a sintaxe, que se parece

01:46.747 --> 01:50.379
com isto para depois exportar um objeto JavaScript.

01:50.379 --> 01:53.538
Que será o objeto de configuração capturado pelo webpack.

01:53.538 --> 01:55.585
Portanto, caso você nunca tenha visto isso antes,

01:55.585 --> 01:59.648
é assim que você exporta as coisas em um nó. ambiente js.

01:59.648 --> 02:02.877
E aqui estamos exportando um objeto JavaScript.

02:02.877 --> 02:05.920
Agora o webpack precisa de um par de informações.

02:05.920 --> 02:09.840
Mais importante ainda, precisa saber com qual arquivo seu

02:09.840 --> 02:14.585
projeto inteiro começa; portanto, onde está seu ponto de entrada.

02:14.585 --> 02:17.370
Em nosso caso, esse é o aplicativo. ts arquivar.

02:17.370 --> 02:18.922
Este arquivo deve ser executado

02:18.922 --> 02:20.981
primeiro, e o que o webpack então fará é

02:20.981 --> 02:24.013
dar uma olhada nas importações deste arquivo e ir até estes

02:24.013 --> 02:25.461
arquivos e dar uma olhada em

02:25.461 --> 02:27.378
suas importações e nas importações

02:27.378 --> 02:30.219
dos arquivos importados e assim por diante.

02:30.219 --> 02:33.461
Até conhecer todos os arquivos que seu projeto utiliza no final.

02:33.461 --> 02:36.201
E então, com a ajuda do ts, ele analisará o

02:36.201 --> 02:38.740
conteúdo dos arquivos como este conteúdo

02:38.740 --> 02:41.690
aqui e todo o conteúdo em todos os arquivos e os

02:41.690 --> 02:44.290
compilará. pacote do carregador que mencionei.

02:44.290 --> 02:46.960
Agora, para que o webpack funcione corretamente aqui, você

02:46.960 --> 02:50.421
deve realmente remover todos . extensões js em todas as

02:50.421 --> 02:51.598
importações.

02:51.598 --> 02:54.400
Precisávamos disso antes, quando usávamos o navegador

02:54.400 --> 02:57.885
nativo construído em ts. Funcionalidade do módulo, mas

02:57.885 --> 03:01.130
com o webpack você não precisa destas extensões.

03:01.130 --> 03:03.664
Porque o webpack na verdade procurará automaticamente. js, e alguns outros arquivos de extensão.

03:03.664 --> 03:06.501
Portanto, você não os adiciona e não deve adicioná-los aqui,

03:06.501 --> 03:09.270
caso contrário o webpack procurará arquivos com uma extensão

03:09.270 --> 03:10.716
dupla, o que você não quer.

03:10.716 --> 03:13.655
Portanto, remova . js em todas essas importações aqui, e uma vez que você

03:13.655 --> 03:18.441
fez isso, salve todos esses arquivos para

03:18.441 --> 03:21.370
garantir que suas mudanças sejam aplicadas.

03:21.370 --> 03:24.043
Agora de volta ao webpack. config. js, lá agora você deve acrescentar

03:24.043 --> 03:26.498
uma propriedade

03:26.498 --> 03:31.320
de entrada neste objeto exportado.

03:31.320 --> 03:32.740
E apontar para . /src/app. ts em nosso exemplo.

03:32.740 --> 03:37.740
Portanto, no arquivo de entrada raiz de seu projeto.

03:38.680 --> 03:42.444
Em seguida, acrescente uma chave de saída aqui.

03:42.444 --> 03:45.880
Uma saída agora é um objeto aqui.

03:45.880 --> 03:48.051
Onde antes de tudo especificamos o nome do arquivo.

03:48.051 --> 03:51.120
Este será o único arquivo JavaScript que será

03:51.120 --> 03:52.998
produzido no final.

03:52.998 --> 03:55.440
E aqui vamos nomear o pacote. js, mas você poderia nomeá-lo como

03:55.440 --> 03:57.350
quiser.

03:57.350 --> 03:58.788
App. js, ou o que você quiser.

03:58.788 --> 04:01.709
Você também pode adicionar

04:01.709 --> 04:05.171
partes dinâmicas aqui, por exemplo, hash de conteúdo, para dizer

04:05.171 --> 04:08.971
ao webpack para criar automaticamente um has único para cada construção

04:08.971 --> 04:11.829
que pode ajudá-lo com o caching no navegador.

04:11.829 --> 04:13.578
Mas novamente você pode saber mais sobre isso nos documentos do webpack.

04:13.578 --> 04:16.229
Aqui não precisamos dele, então vamos apenas nomear o pacote de arquivos. js.

04:16.229 --> 04:19.779
Além do nome do arquivo, você também

04:19.779 --> 04:23.320
precisa especificar o caminho, para onde a saída deve ser escrita.

04:23.320 --> 04:26.131
E, claro, isso deve corresponder ao

04:26.131 --> 04:28.900
caminho que você tem em suas ts. config. js para evitar erros.

04:28.900 --> 04:32.970
Portanto, a esta pasta.

04:32.970 --> 04:34.189
Agora, ao contrário do que acontece com os ts. config,js file, você

04:34.189 --> 04:37.010
não deve escrever . /distribuir aqui.

04:37.010 --> 04:39.819
A Webpack quer um caminho absoluto aqui.

04:39.819 --> 04:42.099
E para construir um nós podemos usar um nó. módulo js.

04:42.099 --> 04:45.669
Para isso, podemos utilizar o nó. js importar sintaxe, que usa

04:45.669 --> 04:48.880
a palavra-chave necessária,

04:48.880 --> 04:51.280
e importar o módulo de caminho.

04:51.280 --> 04:54.220
Você não precisa instalar isto como uma biblioteca,

04:54.220 --> 04:56.050
este é um nó central. módulo js que você já tem

04:56.050 --> 04:59.651
se você tiver um nó. js instalados, o que você faz porque o fizemos

04:59.651 --> 05:02.149
mais cedo no curso.

05:02.149 --> 05:04.966
Agora você pode usar o caminho para chamar o

05:04.966 --> 05:08.552
método resolve lá que lhe permite construir um caminho

05:08.552 --> 05:11.280
absoluto para uma determinada pasta.

05:11.280 --> 05:12.910
Para isso, usamos uma constante

05:12.910 --> 05:15.320
especial, a constante __nome, que está disponível

05:15.320 --> 05:17.236
globalmente em um nó. ambiente js.

05:17.236 --> 05:21.150
E o webpack como eu disse usa o nó. js para executar seus arquivos.

05:21.150 --> 05:24.692
E então como segundo argumento

05:24.692 --> 05:27.433
dist, no final dist apenas constrói um caminho

05:27.433 --> 05:30.661
absoluto para a pasta dist que a webpack então usa para

05:30.661 --> 05:33.190
escrever seu out-put lá.

05:33.190 --> 05:35.452
E com isso você tem um ponto de entrada

05:35.452 --> 05:38.753
e um ponto de saída, mas você não diz à webpack o que fazer

05:38.753 --> 05:40.743
com seus arquivos TypeScript.

05:40.743 --> 05:42.553
Porque por padrão o webpack não

05:42.553 --> 05:45.140
sabe disso, por padrão é apenas um bundler.

05:45.140 --> 05:46.884
Qualquer funcionalidade extra, como

05:46.884 --> 05:48.684
a compilação de TypeScript para JavaScript,

05:48.684 --> 05:51.261
tem que ser ensinada para o webpack.

05:51.261 --> 05:53.452
Faremos isso na próxima palestra.
