WEBVTT

00:02.320 --> 00:05.210
المدرب: لتنفيذ ذلك ، سأقوم أولاً بإنشاء

00:05.210 --> 00:08.217
واجهة ValidatorConfig ، حيث أرغب في تكوين

00:09.550 --> 00:12.680
وحدة التخزين التي أرغب في العمل معها.

00:12.680 --> 00:15.130
فكرتي هي أن يكون لديك خاصيتان ، وبالتالي

00:15.130 --> 00:17.653
أستخدم تدوين نوع الفهرس هذا هنا.

00:19.720 --> 00:21.450
وهي في الأساس سلاسل ، حيث

00:21.450 --> 00:23.440
تكون القيمة كائنًا آخر.

00:23.440 --> 00:26.380
لأن هذا سيكون أساسًا اسم الفئة التي نريد

00:26.380 --> 00:29.570
تسجيل بعض الخصائص التي تم التحقق من صحتها.

00:29.570 --> 00:31.700
ثم في الكائن الذي نخزنه هناك

00:31.700 --> 00:34.580
، لدينا الخصائص الملموسة للفئة التي

00:34.580 --> 00:37.010
تم إرفاق مدققات بها.

00:37.010 --> 00:40.610
إذن لدينا هنا الخاصية القابلة للتحقق ، إذا كنت تريد

00:40.610 --> 00:42.240
تسميتها على هذا النحو

00:42.240 --> 00:44.660
، فستكون أيضًا مفتاح سلسلة.

00:44.660 --> 00:47.350
ومن ثم يجب أن تكون قيمة ذلك عبارة عن مصفوفة

00:47.350 --> 00:50.010
من السلاسل حيث يكون لدينا أساسًا شيء

00:52.420 --> 00:55.490
مثل المطلوب والإيجابي وما إلى ذلك.

00:55.490 --> 00:57.460
لذلك يمكن إضافة شيء من هذا القبيل

00:57.460 --> 00:59.323
هنا كقائمة من المدققين.

01:00.300 --> 01:05.300
الآن يمكننا إنشاء تكوين Validators المسجل لدينا هنا ، والذي يجب أن يكون من النوع

01:05.790 --> 01:07.950
ValidatorConfig الذي يكون في البداية

01:07.950 --> 01:09.640
كائنًا فارغًا.

01:09.640 --> 01:11.500
لأنه في البداية عندما يبدأ التطبيق

01:11.500 --> 01:13.920
عند تحميل مكتبة الطرف الثالث لدينا ، لم

01:13.920 --> 01:16.293
يتم تسجيل أي مدققين حتى الآن.

01:17.640 --> 01:19.920
حسنًا ، ثم هنا في مديرينا

01:19.920 --> 01:23.490
نريد إضافة شيء ما إلى ذلك السجل.

01:23.490 --> 01:28.020
ضع في اعتبارك الآن أن وظيفة مصمم الخاصية تحصل على وسيطتين:

01:28.020 --> 01:31.010
الهدف ، وهو النموذج الأولي للكائن

01:31.010 --> 01:33.910
الذي تجلس عليه الخاصية ، أو وظيفة

01:33.910 --> 01:39.300
المُنشئ إذا كانت خاصية ثابتة ، واسم الخاصية.

01:39.300 --> 01:40.710
هاتان الحجتان اللتان

01:40.710 --> 01:44.370
وصلنا إليهما هنا ، لا نحصل على واصف الخصائص.

01:44.370 --> 01:46.760
الآن يمكننا الذهاب إلى المدققين المسجلين

01:46.760 --> 01:51.463
لدينا وهناك أريد إضافة إدخال جديد للهدف. البناء.

01:52.730 --> 01:56.070
سيكون للنموذج الأولي للمثال الذي نعمل معه

01:56.070 --> 01:58.430
مفتاح مُنشئ يشير إلى وظيفة المُنشئ

01:58.430 --> 02:02.610
التي تم استخدامها لإنشاء الكائن الخاص بنا.

02:02.610 --> 02:04.690
وهذا ، بالتالي ، سيكون في الأساس شيئًا

02:04.690 --> 02:06.120
مثل الدورة التدريبية هنا

02:06.120 --> 02:08.460
، لذلك يمكن استرجاع اسم وظيفة المُنشئ

02:08.460 --> 02:10.560
في النهاية من هذا المُنشئ.

02:10.560 --> 02:11.900
نظرًا لأن المُنشئ دالة ،

02:11.900 --> 02:13.400
فيمكننا استخدام خاصية name

02:13.400 --> 02:15.900
، الموجودة في أي وظيفة في JavaScript للحصول

02:15.900 --> 02:18.310
على اسم الوظيفة ، وسيكون هذا بعد ذلك اسم الدورة

02:18.310 --> 02:20.620
التدريبية هنا على سبيل المثال.

02:20.620 --> 02:23.390
لذلك نقوم الآن بتسجيل اسم الفئة كمفتاح في

02:23.390 --> 02:25.030
المدققين المسجلين.

02:25.030 --> 02:28.130
ويجب أن تكون قيمة ذلك كائنًا آخر.

02:28.130 --> 02:30.630
لذلك قمت بضبط هذا على مساوٍ لكائن آخر هنا.

02:30.630 --> 02:32.390
وفي هذا الكائن ، لدي أيضًا خاصية

02:32.390 --> 02:34.640
معينة ديناميكيًا حيث أستخدم propName

02:34.640 --> 02:37.400
الخاص بي ، وبالتالي فإن الخاصية التي أريد

02:37.400 --> 02:40.190
إضافة أداة تحقق لها كمفتاح.

02:40.190 --> 02:42.310
الآن القيمة هنا عبارة عن مصفوفة

02:42.310 --> 02:45.530
من السلاسل ، وهنا سأضيف ما هو مطلوب كسلسلة.

02:45.530 --> 02:47.920
الآن بالطبع هذا مدقق ساذج للغاية.

02:47.920 --> 02:50.000
إذا كان لدينا مدققون آخرون مسجلون

02:50.000 --> 02:52.830
بالفعل لهذه الخاصية ، فسأستبدلها الآن هنا.

02:52.830 --> 02:54.900
لذلك سيكون من الأفضل أولاً استرداد

02:54.900 --> 02:58.360
أي مدققين حاليين ثم نسخهم في هذه المصفوفة وإضافة المطلوب

02:58.360 --> 03:01.320
فقط إلى تلك المصفوفة الموجودة.

03:01.320 --> 03:02.870
مرة أخرى ، لتوفير بعض الوقت هنا

03:02.870 --> 03:04.740
، ولإظهار الفكرة العامة فقط ، سيكون

03:04.740 --> 03:06.873
لدي هذا النهج الأكثر سذاجة هنا.

03:07.980 --> 03:11.180
مع ذلك حصلنا على التعليق التوضيحي المطلوب ، فلنعمل

03:11.180 --> 03:14.690
الآن على التعليق التوضيحي للأرقام الموجبة.

03:14.690 --> 03:16.730
وبالطبع ، هذا في الأساس هو نفسه.

03:16.730 --> 03:21.410
أقوم بنسخ هذا الرمز ولكني قمت بتعيين هذا هنا على إيجابي

03:21.410 --> 03:23.600
أو أي معرّف تريد استخدامه وبالطبع

03:23.600 --> 03:25.010
علينا التأكد من قبولنا

03:25.010 --> 03:27.650
للحجج الصحيحة.

03:27.650 --> 03:30.990
إلى جانب هذا بالإضافة إلى ما أضفناه حتى الآن

03:30.990 --> 03:34.420
، نسجل هذه الخصائص وأدوات التحقق من صحتها في

03:34.420 --> 03:38.640
التكوين العام لدينا عندما يتم تحديد هذه الفئة.

03:38.640 --> 03:41.460
الآن نحتاج فقط إلى العمل على دالة التحقق.

03:41.460 --> 03:43.400
يجب أن تمر وظيفة التحقق من خلال

03:43.400 --> 03:46.240
جميع المدققين المسجلين ، ثم تقوم بشكل أساسي

03:46.240 --> 03:50.340
بتشغيل منطق مختلف بناءً على المدققين الذين تعثر عليهم.

03:50.340 --> 03:54.857
لذا أود هنا أولاً وقبل كل شيء استرداد التكوين الخاص بالكائن

03:54.857 --> 03:57.600
الملموس الذي نتعامل معه.

03:57.600 --> 04:00.390
لذلك نحتاج إلى معرفة وظيفة المُنشئ التي

04:00.390 --> 04:04.277
يعتمد عليها الكائن ثم الحصول على تكوين التحقق من الصحة

04:04.277 --> 04:07.040
أو تعيينات مدقق الخاصية التي قمنا بإعدادها

04:07.040 --> 04:09.070
لهذا الكائن.

04:09.070 --> 04:11.960
لذا سأقوم هنا بتسمية هذا الكائن ، أو

04:11.960 --> 04:14.520
ربما objValidatorConfig.

04:14.520 --> 04:17.110
ونحن نتواصل مع المدققين المسجلين هنا ونصل إلى

04:17.110 --> 04:22.110
خاصية يجب أن تكون هدفًا. البناء. name ، نفس المنطق السابق ،

04:23.900 --> 04:27.060
نصل إلى خاصية المُنشئ الموجودة في النموذج الأولي

04:27.060 --> 04:28.980
للكائن ، وبالتالي يمكننا الوصول

04:28.980 --> 04:31.720
إليها مباشرة على الكائن بفضل طريقة عمل JavaScript

04:31.720 --> 04:33.340
وبفضل سلسلة النموذج الأولي

04:33.340 --> 04:35.050
، سنصل بعد ذلك إلى النموذج

04:35.050 --> 04:36.710
الأولي إذا لا يمكننا العثور

04:36.710 --> 04:38.920
على خاصية الباني على الكائن نفسه

04:38.920 --> 04:41.580
، وسيعمل ذلك.

04:41.580 --> 04:43.840
وبالتالي ، حصلنا الآن على اسم المُنشئ واكتشفنا

04:43.840 --> 04:46.970
، على سبيل المثال ، أن هذه الدورة التدريبية هنا تستند إلى

04:46.970 --> 04:49.050
فئة الدورة التدريبية هذه.

04:49.050 --> 04:51.290
لذلك فإننا نبحث عن أي تكوين مدقق لدينا

04:51.290 --> 04:52.800
لفئة الدورة التدريبية.

04:52.800 --> 04:55.910
إذن نحن الآن ننظر إلى هذا الكائن بشكل أساسي.

04:55.910 --> 04:58.207
هذا الآن في objValidatorConfig.

04:59.310 --> 05:01.540
الآن بالطبع قد لا نجد هذا إذا كنا نحاول

05:01.540 --> 05:03.270
التحقق من صحة الكائن الذي لم

05:03.270 --> 05:05.110
يتم تسجيل أي شيء من أجله.

05:05.110 --> 05:08.270
لذلك إذا لم يكن لدينا أي تكوين مدقق ، إذا لم نعثر

05:08.270 --> 05:11.640
على أي شيء هناك ، فأنا أريد أن أعود صحيحًا لأن هذا

05:11.640 --> 05:14.010
بالتأكيد صحيح ، أليس كذلك؟

05:14.010 --> 05:15.330
لا يوجد شيء للتحقق من

05:15.330 --> 05:18.350
صحته ، وبالتالي فإن الكائن صالح بالتأكيد.

05:18.350 --> 05:20.900
خلاف ذلك ، إذا وجدناها ، فأنا أريدها

05:20.900 --> 05:24.910
أن تدور عبر هذا الكائن الداخلي هنا مع for in loop.

05:24.910 --> 05:27.580
لذلك أقوم بإجراء حلقة عبر خصائصي التي

05:27.580 --> 05:29.560
قمت بتسجيل المدققين من أجلها

05:29.560 --> 05:33.007
، مع الخاصية const في objValidatorConfig.

05:34.380 --> 05:36.950
يتيح لي هذا الوصول إلى جميع أسماء الخصائص

05:36.950 --> 05:39.630
التي قد يكون لدينا بعد ذلك مدققون.

05:39.630 --> 05:41.180
لذا الآن بالطبع أحتاج إلى المرور

05:41.180 --> 05:43.970
عبر جميع المدققات التي قد تكون لدينا لخاصية ما.

05:43.970 --> 05:45.230
يجب أن يكون هذا دائمًا

05:45.230 --> 05:47.680
مصفوفة حتى إذا تمت إضافة مدقق واحد فقط.

05:47.680 --> 05:49.530
لذا يمكننا استخدام حلقة for

05:49.530 --> 05:53.040
من هنا الآن والحصول على أداة التحقق الملموسة ، التي

05:53.040 --> 05:56.930
لدينا ، لـ objValidatorConfig لهذه الخاصية المحددة.

05:56.930 --> 06:00.560
إذن ، نحصل الآن على أشياء مثل الإيجابية أو المطلوبة ، والتي يتم

06:00.560 --> 06:02.963
تخزينها في ثابت المدقق في ذلك الوقت.

06:04.080 --> 06:06.110
ومن ثم يمكن أن يكون لدينا تعليمة switch

06:06.110 --> 06:08.030
هنا ، أو بالطبع استدعاء الدوال الخارجية

06:08.030 --> 06:09.810
بناءً على المدقق الذي نجده.

06:09.810 --> 06:12.130
ولكن هنا سأذهب مع بيان تبديل مدمج

06:12.130 --> 06:16.620
، وقم بتشغيل المدقق ثم لدينا حالات مختلفة بشكل أساسي.

06:16.620 --> 06:19.683
على سبيل المثال ، الحالة المطلوبة هنا.

06:20.800 --> 06:22.163
عذرًا ، مثل هذا.

06:23.470 --> 06:27.900
هنا ، أريد أن أعود صحيحًا إذا كانت ممتلكاتنا ، التي نبحث

06:27.900 --> 06:28.950
عنها ...

06:28.950 --> 06:33.260
لذلك هذه الخاصية على هذا الكائن لها قيمة غير فارغة.

06:33.260 --> 06:38.260
لذلك سأعود صحيحًا إذا كانت خاصية obj صحيحة.

06:39.170 --> 06:42.010
ولتحويل هذا إلى قيمة حقيقية أو خاطئة ، يمكننا

06:42.010 --> 06:44.420
استخدام عامل الانفجار المزدوج.

06:44.420 --> 06:46.840
الآن أسمع أنواعًا من الشكاوى التي تقول إنه لا

06:46.840 --> 06:49.440
يعرف ما إذا كان الكائن يمتلك هذه الخاصية ، لذلك

06:49.440 --> 06:51.220
يجب علينا هنا تغيير هذا إلى أي شيء

06:51.220 --> 06:53.560
للحصول على هذه المرونة الإضافية هنا.

06:53.560 --> 06:56.150
بالطبع يمكنك أيضًا العمل على الأنواع هنا.

06:56.150 --> 07:00.480
وعلى سبيل المثال ، قم أيضًا بتحويل المعرفات الخاصة بك هنا إلى أنواع

07:00.480 --> 07:03.430
محددة بوضوح حيث تعمل Enums مع Enums وربما تعمل

07:03.430 --> 07:05.490
أيضًا على تحسين الكتابة هنا.

07:05.490 --> 07:07.420
على الرغم من ذلك ، لأكون صادقًا ، بما

07:07.420 --> 07:09.960
أنني أريد أن يعمل هذا مع أي كائن ، فمن الصعب تحسين

07:09.960 --> 07:11.810
ذلك بطريقة ستحبها TypeScript.

07:11.810 --> 07:13.330
يمكننا العمل مع الأنواع

07:13.330 --> 07:16.800
العامة ولكن مرة أخرى سنحتاج إلى نوع من تقييد أنفسنا

07:16.800 --> 07:19.740
للكائنات التي يجب أن تمتد الأنواع العامة

07:19.740 --> 07:22.110
إليها وتقبلها بالتالي.

07:22.110 --> 07:25.850
لذلك قد يكون أي منها هو أفضل خيار لدينا هنا لتكون مرنًا

07:25.850 --> 07:27.880
حقًا وقبول الكثير من الكائنات

07:27.880 --> 07:30.640
المختلفة في وظيفة التحقق هذه.

07:30.640 --> 07:32.270
الآن بالعودة إلى مقطع التبديل

07:32.270 --> 07:34.750
، الحالة المطلوبة هي حالة واحدة محتملة ، حصلنا

07:34.750 --> 07:37.650
أيضًا على الحالة الموجبة التي نريد التعامل معها.

07:37.650 --> 07:39.280
وهناك أريد أن أعود صحيحًا

07:39.280 --> 07:43.770
إذا كانت الخاصية التي ننظر إليها أكبر من صفر.

07:43.770 --> 07:47.260
لذلك إذا كانت خاصية الكائن أكبر من الصفر ، فإن هذا سيعيد

07:47.260 --> 07:50.463
صحيحًا ، وإلا فإن هذا سيعيد القيمة false.

07:52.890 --> 07:55.730
الآن إذا لم نجعله في هذا للكتلة أو إذا

07:55.730 --> 07:57.970
كان لدينا بطريقة ما حلقة لا

07:57.970 --> 07:59.310
تمر عبر أي شيء لأننا

07:59.310 --> 08:01.500
لم نسجل أي مدققين ، فقد مررنا

08:01.500 --> 08:04.130
مصفوفة فارغة هنا أو شيء ما ، لذلك

08:04.130 --> 08:06.350
إذا تجاوزتها حلقة for هذه ،

08:06.350 --> 08:10.280
سأعود صحيحًا كإعداد افتراضي أيضًا.

08:10.280 --> 08:12.800
والآن نعيد شيئًا ما في جميع الظروف ويمكننا

08:12.800 --> 08:14.503
استخدام التحقق من الصحة.

08:15.450 --> 08:19.253
مع ذلك ، دعنا نرى ما إذا كان يعمل ، إذا حفظنا هذا الآن ، وقمنا بإعادة

08:23.610 --> 08:26.330
تحميل تطبيقنا هنا وأحاول إرسال هذا ، فسنحصل على

08:26.330 --> 08:29.400
خطأ ، إدخال غير صالح ، يرجى المحاولة مرة أخرى.

08:29.400 --> 08:30.780
إذا قمت بإدخال بعض

08:30.780 --> 08:34.793
النص هنا: JavaScript الدليل الكامل ، ما زلت أحصل

08:35.940 --> 08:38.100
على هذا لأن رقمي خاطئ.

08:38.100 --> 08:40.440
إذا أدخلت ناقص واحد هنا ، فسنحصل أيضًا على

08:40.440 --> 08:42.020
هذا لأن هذا غير إيجابي.

08:42.020 --> 08:45.020
ومع ذلك ، إذا قمت بإدخال رقم موجب ، فإنه يعمل.

08:45.020 --> 08:48.230
إذا كان لدي رقم موجب ولكن الحقل الأول فارغ

08:48.230 --> 08:49.860
، فهذا يعمل أيضًا ، لذا

08:49.860 --> 08:52.190
يتعين علينا العمل عليه.

08:52.190 --> 08:54.600
لذلك دعونا نكتشف ما هي المشكلة.

08:54.600 --> 08:57.380
وللاكتشاف ، سأضيف في الواقع القليل من سجل

08:57.380 --> 08:59.830
وحدة التحكم هنا وسجّل الخاصية التي

08:59.830 --> 09:00.720
نبحث عنها.

09:00.720 --> 09:02.340
يمكننا بالطبع أيضًا استخدام نقاط

09:02.340 --> 09:03.513
التوقف وأدوات المطور.

09:04.820 --> 09:07.410
الآن إذا قمت بالنقر فوق "حفظ" هنا ، سترى أن أول

09:07.410 --> 09:09.250
شيء يتم التحقق من صحته هنا هو السعر

09:09.250 --> 09:10.623
وبعد ذلك نتوقف.

09:11.530 --> 09:15.100
لذا فإن السعر هو الخاصية الأولى التي يتم التحقق من صحتها.

09:15.100 --> 09:16.980
وهذا هو الشيء المثير للاهتمام

09:16.980 --> 09:20.090
هنا ، فالسعر هو في الواقع الخاصية التي تهم هنا

09:20.090 --> 09:22.230
فقط لأننا نعود للتحقق.

09:22.230 --> 09:25.840
هذا يعني أنه في المرة الأولى التي نجد فيها أي أداة

09:25.840 --> 09:29.050
تحقق تُرجع صوابًا أو خطأً ، نعود فورًا ولا

09:29.050 --> 09:31.480
نهتم بأدوات التحقق الأخرى.

09:31.480 --> 09:33.320
الآن في الحالة الخاطئة ، لا بأس بذلك

09:33.320 --> 09:35.360
لأنه إذا كان أحد العناصر خاطئًا ، وإذا كانت

09:35.360 --> 09:37.450
إحدى الخصائص خاطئة ، فهي غير صالحة ، فنحن

09:37.450 --> 09:40.140
على ما يرام حتى لو لم ننظر إلى العناصر الأخرى.

09:40.140 --> 09:42.590
لكن بالنسبة للحالة الحقيقية فهي مشكلة.

09:42.590 --> 09:44.970
إذا عدنا صحيحًا في المرة الأولى

09:44.970 --> 09:49.410
التي يلبي فيها عقار ما توقعاتنا ، فإننا نواجه مشكلة.

09:49.410 --> 09:51.540
لذلك يجب علينا تحسين هذا من خلال وجود

09:51.540 --> 09:55.130
خاصية isValid هنا ، والتي تكون صحيحة في البداية.

09:55.130 --> 09:56.780
هو متغير صالح يعني.

09:56.780 --> 10:01.780
ثم هنا قمنا بتعيين "صالح" يساوي "صالح" وهذا

10:03.857 --> 10:08.857
هنا ، ونفس الشيء بالأسفل هنا ، نساوي هذا.

10:09.570 --> 10:11.290
حتى لا نعود على الفور

10:11.290 --> 10:14.750
، بدلاً من ذلك نقوم فقط بتحديث isValid ونكسر

10:14.750 --> 10:16.700
بعد ذلك حتى لا نفشل.

10:16.700 --> 10:19.200
والنتيجة هي أنه في النهاية ، بعد كل هذه

10:19.200 --> 10:22.710
الحلقات ، فإن إما أن يظل صحيحًا ، ولكن بمجرد أن يكون أحد

10:22.710 --> 10:25.710
هذه الفحوصات هنا خاطئًا ، بفضل طريقة عمل JavaScript

10:25.710 --> 10:27.530
، فإن القيمة الإجمالية isValid

10:27.530 --> 10:29.670
ستكون خاطئة لأن القيمة true مدمجة

10:29.670 --> 10:33.000
مع الإرادة الخاطئة عودة كاذبة.

10:33.000 --> 10:36.020
ومن ثم هناك يجب أن نعود هو صالح.

10:36.020 --> 10:39.330
لذلك نحن الآن نتأكد من أن جميع الخصائص قد تم فحصها

10:39.330 --> 10:42.433
وليس فقط أول JavaScript يلقي نظرة عليها.

10:43.320 --> 10:45.460
ومع ذلك ، لن تكون هذه هي مشكلتنا الوحيدة

10:45.460 --> 10:47.750
، فلدينا أيضًا مشكلة هنا عندما نلقي نظرة

10:47.750 --> 10:50.480
على كيفية تسجيلنا لمنطق المدقق.

10:50.480 --> 10:53.720
أقوم دائمًا بالكتابة فوق المدققين

10:53.720 --> 10:57.130
المسجلين لاسم فئة معين بكائن جديد.

10:57.130 --> 11:00.050
بدلاً من ذلك ، يجب أن نضيف أي مدققات موجودة

11:00.050 --> 11:01.630
هنا حتى لا نقوم بذلك.

11:01.630 --> 11:04.140
على سبيل المثال ، لدينا عامل تشغيل السبريد

11:04.140 --> 11:08.130
من هذا القبيل لأخذ أي أزواج قيمة مفتاح حالية لاسم الفئة هذا على

11:08.130 --> 11:10.870
المدققين المسجلين وإضافة ذلك أولاً قبل أن

11:10.870 --> 11:14.413
نضيف واحدًا لدينا ، أيضًا في الأسفل بالطبع.

11:16.890 --> 11:18.733
والآن بعد ذلك ، إذا حفظنا

11:19.650 --> 11:21.980
هذا ، وسنعود إلى تطبيقنا هنا.

11:21.980 --> 11:24.150
إذا كان لديهما فارغين ، فإننا نفشل.

11:24.150 --> 11:26.280
إذا أدخلنا سعرًا صالحًا ولكن لدينا

11:26.280 --> 11:28.490
عنوانًا غير صالح ، فإننا نفشل.

11:28.490 --> 11:31.510
إذا كان كلاهما صحيحًا ، فإننا ننجح.

11:31.510 --> 11:35.570
إذا كان لدينا عنوان صالح ولكن ليس السعر ، فإننا نفشل.

11:35.570 --> 11:37.230
أيضا بسعر سلبي.

11:37.230 --> 11:39.170
وبالتالي يبدو هذا الآن جيدًا

11:39.170 --> 11:42.280
بالنسبة لي وهذا الآن هو أول تطبيق ساذج لنا

11:42.280 --> 11:44.500
لكيفية عمل المدقق بمساعدة مصممي

11:44.500 --> 11:46.670
TypeScript.

11:46.670 --> 11:49.150
ضع في اعتبارك أن كل ذلك هنا ، كل مصممي الديكور

11:49.150 --> 11:52.310
، وظيفة التحقق من الصحة والتسجيل ، سيكونون مخفيين

11:52.310 --> 11:53.590
بعيدًا عنك.

11:53.590 --> 11:55.820
قد يكون ذلك جزءًا من مكتبة تابعة لجهة

11:55.820 --> 11:56.780
خارجية تعمل عليها

11:56.780 --> 11:59.250
، بالطبع بطريقة أكثر تفصيلاً مما قد تشاركه

11:59.250 --> 12:01.300
مع المستخدمين النهائيين.

12:01.300 --> 12:04.160
وأنت ، كمستخدم نهائي ، ستقوم فقط باستيراد هذه الأشياء

12:04.160 --> 12:06.800
، وإضافة هذه الزخارف ، والتحقق من صحة الاتصال ،

12:06.800 --> 12:08.840
وستكون لديك طريقة مريحة للغاية لإضافة

12:08.840 --> 12:11.763
التحقق من الصحة إلى فصولك الدراسية بعد ذلك.
