WEBVTT

00:02.220 --> 00:04.550
-: Sto parlando di un decoratore, che possiamo

00:04.550 --> 00:07.350
aggiungere per legare automaticamente la parola chiave

00:07.350 --> 00:09.930
"this", in modo da non dover chiamare bind qui.

00:09.930 --> 00:12.500
Ora, ovviamente chiamare bind qui non è una gran cosa,

00:12.500 --> 00:14.160
se non c'è nulla di sbagliato, ma vogliamo

00:14.160 --> 00:16.460
anche mettere in pratica ciò che abbiamo imparato

00:16.460 --> 00:20.220
e se dobbiamo farlo in molti punti della nostra applicazione, avere un decoratore,

00:20.220 --> 00:22.730
che possiamo semplicemente aggiungere, potrebbe

00:22.730 --> 00:24.970
essere più semplice.

00:24.970 --> 00:27.100
Quindi, eliminiamo questo vincolo.

00:27.100 --> 00:30.010
E invece, sopra la classe, aggiungerò

00:30.010 --> 00:33.010
il decoratore auto bind e aggiungerò solo

00:33.010 --> 00:34.920
alcuni commenti per mantenere

00:34.920 --> 00:38.750
questo file organizzato, almeno un po'.

00:38.750 --> 00:40.490
Classe ProjectInput

00:42.260 --> 00:44.790
Cos'è un decoratore?

00:44.790 --> 00:46.770
Un decoratore è una funzione, giusto?

00:46.770 --> 00:48.130
E si può trovare sia con la decorazione

00:48.130 --> 00:51.383
della funzione qui, sia come espressione di funzione.

00:52.490 --> 00:54.780
Quindi, utilizzerò una funzione di decorazione

00:54.780 --> 00:57.780
e la chiamerò autobind, il nome dipende da voi.

00:57.780 --> 01:01.670
E questo decoratore riceverà come argomenti liberi il

01:01.670 --> 01:03.173
target, il nome del metodo

01:04.430 --> 01:06.430
a cui è legato, perché qui creerò

01:06.430 --> 01:09.083
un decoratore di metodi.

01:09.980 --> 01:12.960
E anche il descrittore

01:12.960 --> 01:15.720
di quel metodo.

01:15.720 --> 01:18.370
Descrittore di proprietà, perché i metodi

01:18.370 --> 01:22.760
alla fine sono solo proprietà, proprietà che contengono funzioni.

01:22.760 --> 01:24.400
Perché questo è un decoratore di metodi?

01:24.400 --> 01:29.210
Perché l'idea è che possiamo aggiungerlo a submitHandler in

01:29.210 --> 01:32.210
questo modo e chiudere la questione.

01:32.210 --> 01:33.680
Questa è l'idea.

01:33.680 --> 01:35.500
Non siamo ancora arrivati a questo

01:35.500 --> 01:38.143
punto, ma alla fine dovrebbe funzionare così.

01:39.090 --> 01:42.950
Ora, per farlo funzionare, torniamo alla nostra funzione lassù

01:42.950 --> 01:46.880
e cosa deve essere inserito nel corpo della funzione?

01:46.880 --> 01:49.490
Per prima cosa voglio avere accesso

01:49.490 --> 01:51.950
al metodo originale.

01:51.950 --> 01:56.593
Con descrittore. in modo da memorizzare il

01:56.593 --> 01:59.380
metodo definito in origine.

01:59.380 --> 02:03.540
Poi voglio creare il mio descrittore adattato, che

02:03.540 --> 02:04.873
è un oggetto.

02:06.650 --> 02:11.090
Scriverò PropertyDescriptor, in realtà.

02:11.090 --> 02:13.880
Dove configurabile deve essere impostato a true, in

02:13.880 --> 02:15.910
modo da poterlo sempre modificare.

02:15.910 --> 02:17.573
E dove abbiamo bisogno di un getter.

02:18.510 --> 02:21.770
E in quel getter, qui, che dovrebbe essere eseguito quando

02:21.770 --> 02:24.270
si cerca di accedere alla funzione.

02:24.270 --> 02:27.710
Impostiamo qui la funzione vincolata, utilizzando il

02:27.710 --> 02:29.220
metodo originale che abbiamo

02:29.220 --> 02:31.030
estratto qui sopra.

02:31.030 --> 02:34.063
E chiamando in causa questo.

02:35.370 --> 02:36.203
Poi, voglio restituire

02:37.860 --> 02:40.170
la funzione vincolata e questo dovrebbe

02:40.170 --> 02:41.603
essere tutto.

02:42.510 --> 02:44.190
E, naturalmente, restituirò

02:44.190 --> 02:46.620
il descrittore modificato in quel

02:46.620 --> 02:48.653
decoratore di metodi.

02:49.510 --> 02:52.880
Ora riceviamo un errore con questo, sul submitHandler.

02:52.880 --> 02:56.020
Il supporto sperimentale per i decoratori è una caratteristica

02:56.020 --> 02:57.960
che deve essere abilitata.

02:57.960 --> 03:00.400
Quindi dobbiamo andare nel file tsconfig

03:00.400 --> 03:02.320
e scorrere verso il basso.

03:02.320 --> 03:05.770
Dovreste trovare l'opzione "experimentalDecorators"

03:05.770 --> 03:07.450
e commentarla.

03:07.450 --> 03:09.980
E aggiungere una virgola davanti.

03:09.980 --> 03:14.183
Salvare il file e riavviare il processo di compilazione dei tipi.

03:15.180 --> 03:17.700
Ora, mi mostra ancora alcuni errori: se espando

03:17.700 --> 03:18.913
questo, il metodoName viene

03:20.212 --> 03:23.170
dichiarato, ma il suo valore non viene mai letto.

03:23.170 --> 03:25.410
In app. ts linea 4.

03:25.410 --> 03:26.760
Mi riferisco a questo

03:26.760 --> 03:29.020
argomento, che ho ricevuto qui e che

03:29.020 --> 03:30.940
in realtà non ho mai usato.

03:30.940 --> 03:34.370
Lo stesso vale per l'obiettivo, non l'ho mai usato.

03:34.370 --> 03:36.343
Ora, ci sono due modi per risolvere questo problema.

03:37.200 --> 03:39.610
Un modo è quello di andare in tsconfig

03:39.610 --> 03:42.813
e allentare le regole di rigidità.

03:44.160 --> 03:46.740
noUnusedParameters, se lo impostiamo a false, consentiamo

03:46.740 --> 03:49.090
effettivamente i parametri non utilizzati.

03:49.090 --> 03:50.670
Quindi, questa sarebbe

03:50.670 --> 03:52.910
una cosa, oppure si usano i nomi speciali

03:52.910 --> 03:54.053
underscore e underscore

03:55.180 --> 03:56.653
due.

03:57.770 --> 04:01.860
In realtà si tratta di un suggerimento per typescript e javascript, che indica che si

04:01.860 --> 04:03.130
è consapevoli che non si useranno

04:03.130 --> 04:04.800
questi valori, ma che è necessario

04:04.800 --> 04:05.930
accettarli perché si ha

04:05.930 --> 04:08.740
bisogno dell'argomento che si sta cercando.

04:08.740 --> 04:11.810
Se ora salviamo il file, questo viene compilato senza

04:11.810 --> 04:14.700
errori e se torniamo indietro e inseriamo hello

04:14.700 --> 04:17.040
here e diamo l'invio, funziona ancora

04:17.040 --> 04:20.060
grazie al nostro decoratore auto bind.

04:20.060 --> 04:23.120
Il che, si spera, dimostra che questo decoratore

04:23.120 --> 04:24.950
può avere un'utilità reale.

04:24.950 --> 04:27.530
Naturalmente qui c'è un po' di lavoro in più rispetto

04:27.530 --> 04:29.510
alla semplice chiamata di bind.

04:29.510 --> 04:32.120
Ma immaginate che questo venga utilizzato su un numero sempre maggiore

04:32.120 --> 04:33.820
di metodi che devono essere tutti vincolati.

04:33.820 --> 04:36.140
Non dovendo richiamare manualmente il bind,

04:36.140 --> 04:38.140
si può risparmiare un po' di tempo ed evitare

04:38.140 --> 04:40.430
anche alcuni potenziali errori nei casi in

04:40.430 --> 04:42.343
cui lo si è dimenticato.
