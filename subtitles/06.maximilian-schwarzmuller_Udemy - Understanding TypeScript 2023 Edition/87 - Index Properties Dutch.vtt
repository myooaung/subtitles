WEBVTT

00:02.110 --> 00:03.890
Instructeur: Dus nu, na al deze functies

00:03.890 --> 00:07.820
waarbij we gewerkt hebben met de types zelf, zeg maar, waarbij we gewerkt

00:07.820 --> 00:10.340
hebben aan het controleren van types, het kosten

00:10.340 --> 00:13.880
van types, laten we terugkomen op functies die ons helpen flexibele

00:13.880 --> 00:16.110
code te rijden.

00:16.110 --> 00:17.930
Natuurlijk, schrijf nog steeds de twee types.

00:17.930 --> 00:20.150
Het is toch typescript, maar niet zozeer

00:20.150 --> 00:23.520
gericht op alleen de types, nu kunnen we ze beheren.

00:23.520 --> 00:25.830
En daarvoor wil ik beginnen met index types,

00:25.830 --> 00:29.040
een eigenschap waarmee we objecten kunnen maken die flexibeler

00:29.040 --> 00:31.150
zijn wat betreft de eigenschappen die

00:31.150 --> 00:33.010
ze kunnen bevatten.

00:33.010 --> 00:34.485
Wat bedoel ik daarmee?

00:34.485 --> 00:36.813
Laten we zeggen dat je een applicatie schrijft

00:36.813 --> 00:39.680
waarin je invoer van gebruikers valideert.

00:39.680 --> 00:41.810
Dus je hebt meerdere invoervelden en

00:41.810 --> 00:44.603
afhankelijk van wat de gebruiker daar invoert en

00:44.603 --> 00:46.682
welk veld het is, wil je misschien verschillende

00:46.682 --> 00:50.490
foutmeldingen opslaan en uiteindelijk tonen.

00:50.490 --> 00:52.520
Bijvoorbeeld, als het een e-mail veld

00:52.520 --> 00:54.360
is wil je controleren wie het is

00:54.360 --> 00:55.590
in de e-mail en zo niet

00:55.590 --> 00:59.830
dan wil je een goede foutmelding toevoegen aan de foutcontainer.

00:59.830 --> 01:01.133
Dus daar begin ik mee.

01:01.133 --> 01:06.133
Ik zal mijn interface error container hier hebben.

01:07.570 --> 01:09.530
En dat moet een object zijn, vandaar dat ik

01:09.530 --> 01:11.400
hier een interface gebruik, maar het moet

01:11.400 --> 01:14.090
flexibel zijn met betrekking tot wat het bevat.

01:14.090 --> 01:15.680
Uiteindelijk is mijn doel dat we

01:15.680 --> 01:17.692
daarmee objecten kunnen behandelen waar

01:17.692 --> 01:20.782
we een of andere foutidentificator hebben, die ideaal zou kunnen

01:20.782 --> 01:23.700
zijn als het invoerveld waartoe de fout behoort.

01:23.700 --> 01:26.581
Bijvoorbeeld, e-mail. En dan een of andere error

01:26.581 --> 01:31.581
string, geen geldige e-mail. En dan hebben we nog een pand.

01:32.130 --> 01:35.610
Laten we zeggen gebruikersnaam en dan kan

01:35.610 --> 01:37.150
een foutstring dat

01:37.150 --> 01:39.280
invoerveld opslaan als het

01:39.280 --> 01:41.611
invoerveld onjuist is.

01:41.611 --> 01:45.770
Moet beginnen met een karakter.

01:45.770 --> 01:49.170
Zoiets moet worden opgeslagen in dat object.

01:49.170 --> 01:51.992
Het probleem daarbij is, dat ik niet van tevoren weet welke

01:51.992 --> 01:55.320
exacte namen van eigenschappen we daarin zullen hebben.

01:55.320 --> 01:58.021
Je zou kunnen zeggen, nou we hebben e-mail en gebruikersnaam,

01:58.021 --> 02:01.650
maar ten eerste wil ik dat dit een flexibele container is.

02:01.650 --> 02:03.150
Ik wil het kunnen gebruiken op

02:03.150 --> 02:05.350
elk formulier dat ik in mijn webpagina heb.

02:05.350 --> 02:07.560
En ik kan verschillende formulieren hebben met verschillende

02:07.560 --> 02:10.157
ingangen met verschillende identifiers.

02:10.157 --> 02:12.741
Dus ik wil me niet beperken tot onze

02:12.741 --> 02:16.150
e-mail en gebruikersnaam fouten.

02:16.150 --> 02:18.461
En bovendien, zelfs als we altijd alleen

02:18.461 --> 02:20.859
e-mail en gebruikersnaam invoer hadden en

02:20.859 --> 02:23.291
we alleen fouten voor die willen opslaan.

02:23.291 --> 02:27.461
Wat doen we als alleen de e-mail ongeldig is en niet de gebruikersnaam?

02:27.461 --> 02:30.912
Dan kunnen we natuurlijk in dit object null opslaan als waarde

02:30.912 --> 02:34.421
voor een gebruikersnaam, maar ik wil het gewoon weglaten.

02:34.421 --> 02:37.232
Dus hebben we een object dat alleen eigenschappen

02:37.232 --> 02:40.419
bevat voor ingangen waar we een fout hebben?

02:40.419 --> 02:42.960
We kunnen dus ook door dit object lussen met

02:42.960 --> 02:46.260
een vier in lus om alle fouten te lezen die we bijvoorbeeld

02:46.260 --> 02:48.200
kregen en er geen eigenschappen

02:48.200 --> 02:51.112
in hebben die niet echt een fout opslaan.

02:51.112 --> 02:53.261
Dus lang verhaal kort, ik heb een object

02:53.261 --> 02:56.861
nodig waarbij ik vrij duidelijk ben over het waardetype.

02:56.861 --> 03:00.260
Het zou een string moeten zijn, maar waar ik niet vooraf weet

03:00.260 --> 03:02.190
hoeveel eigenschappen ik zal hebben

03:02.190 --> 03:05.320
en welke naam de eigenschappen zullen hebben.

03:05.320 --> 03:08.171
En voor zo'n scenario kunnen we index types gebruiken.

03:08.171 --> 03:10.760
U definieert een indextype door hier vierkante haken te gebruiken.

03:10.760 --> 03:14.730
Onthoud dat we hier normaal gesproken de naam van een eigenschap schrijven, maar nu

03:14.730 --> 03:16.280
gebruiken we vierkante haken.

03:16.280 --> 03:21.280
Dan een naam naar keuze, bijvoorbeeld sleutel of prop.

03:23.581 --> 03:28.581
Dan, een dubbele punt. En dan het waardetype van de eigenschap.

03:29.010 --> 03:30.010
En dan een object.

03:30.010 --> 03:33.760
Je kunt geen strings, getallen of symbolen als eigenschap hebben.

03:33.760 --> 03:37.660
Je kunt hier bijvoorbeeld geen boolean gebruiken. Dat mag niet.

03:37.660 --> 03:40.504
Maar je kunt hier string gebruiken.

03:40.504 --> 03:43.190
Daarmee zeg ik gewoon dat welk object ik

03:43.190 --> 03:46.330
later ook construeer op basis van deze error container

03:46.330 --> 03:51.083
interface eigenschappen moet hebben, die strings zijn.

03:52.120 --> 03:53.928
Gebruikersnaam bijvoorbeeld zou een geldige string

03:53.928 --> 03:55.899
zijn, zelfs als ik hem niet tussen aanhalingstekens zet.

03:55.899 --> 03:59.980
Dan voegen we een dubbele punt toe. En dan het waardetype, dat is

03:59.980 --> 04:01.629
string. Dus daarmee zeg

04:01.629 --> 04:04.320
ik dat ik de exacte naam van het eigendom niet weet.

04:04.320 --> 04:07.620
Ik weet ook het aantal eigendommen niet.

04:07.620 --> 04:10.608
Ik weet alleen dat elke eigenschap die wordt toegevoegd

04:10.608 --> 04:13.459
aan dit object, dat is gebaseerd op error container,

04:13.459 --> 04:16.959
een eigenschapsnaam moet hebben die kan worden geïnterpreteerd

04:16.959 --> 04:20.640
als een string en dat de waarde van de eigenschap ook een string moet

04:20.640 --> 04:23.080
zijn. Dat is wat ik hier zeg.

04:23.080 --> 04:28.080
Daarmee kunnen we ook nog steeds voorgedefinieerde eigenschappen toevoegen,

04:29.560 --> 04:31.906
maar alleen als ze van hetzelfde type

04:31.906 --> 04:35.339
zijn als dit hier. We kunnen dus een ID toevoegen die een type string is.

04:35.339 --> 04:39.760
En dan moet elk object dat we bouwen en dat zich aan deze interface houdt, een ID eigenschap

04:39.760 --> 04:43.360
hebben en kan het zoveel andere eigenschappen toevoegen als het wil,

04:43.360 --> 04:47.370
maar we kunnen ID hier bijvoorbeeld niet op een getal zetten, omdat we hier

04:47.370 --> 04:49.277
een index type hebben.

04:49.277 --> 04:53.033
Dus dat is een beperking die we hebben als we zo'n object bouwen.

04:55.240 --> 04:56.550
Wat is nu het gevolg?

04:56.550 --> 05:00.080
Nu kunnen we bijvoorbeeld een error bag maken die van het type

05:00.080 --> 05:02.390
error container is, wat dus een object

05:02.390 --> 05:05.150
is en het zou zo geldig zijn omdat we geen eigenschappen

05:05.150 --> 05:07.440
hoeven toe te voegen.

05:07.440 --> 05:10.340
Dat is allemaal geldig. Maar natuurlijk kunnen we nu wat toevoegen.

05:10.340 --> 05:13.380
Bijvoorbeeld, e-mail niet geldig.

05:13.380 --> 05:15.780
En dit is oké. Het zou niet goed zijn als ik hier

05:15.780 --> 05:17.093
in plaats daarvan een getal zou toekennen,

05:17.093 --> 05:19.133
omdat we zeggen dat elke eigenschap een tekenreeks

05:19.133 --> 05:23.001
als waardetype moet hebben. Dus moeten we hier een string gebruiken.

05:23.001 --> 05:25.940
Als ik hier een getal gebruik, zou dat werken omdat dat

05:25.940 --> 05:28.610
ook als een string kan worden geïnterpreteerd.

05:28.610 --> 05:30.883
Ik kan dus ook een getal als sleuteltype gebruiken

05:30.883 --> 05:33.031
als ik dat zou willen. Ik ben vrij wat betreft

05:33.031 --> 05:35.981
wat ik hier gebruik. Als je het prop type

05:35.981 --> 05:40.981
hier zou veranderen in nummer, dan kun je dat doen en dan is

05:42.130 --> 05:44.810
het goed. Maar dit zou niet gebeuren

05:44.810 --> 05:46.470
omdat e-mail geen nummer is.

05:46.470 --> 05:48.170
Dit kan niet worden omgezet in een getal.

05:48.170 --> 05:51.550
Het kan behandeld worden als een string, maar niet als een getal.

05:51.550 --> 05:54.870
Dus dit is hoe je bepaalt welk type eigenschappen, of welke namen

05:54.870 --> 05:56.990
van eigenschappen, je toestaat.

05:56.990 --> 05:59.493
En hier heb ik er een gemaakt om string-eigendomsnamen toe te staan.

05:59.493 --> 06:02.264
Dus alles wat in een string kan worden omgezet is een geldige

06:02.264 --> 06:04.740
eigenschapsnaam. En dan moet de waarde

06:04.740 --> 06:06.413
ook nog een string zijn.

06:06.413 --> 06:08.021
En zoals ik al zei kunnen we

06:08.021 --> 06:10.632
nu natuurlijk meerdere waarden toevoegen,

06:10.632 --> 06:12.830
meerdere waarden moet ik zeggen.

06:12.830 --> 06:17.263
Moet beginnen met een hoofdletter.

06:18.170 --> 06:21.220
Dus dit is nu zo'n error bag die we zouden kunnen bouwen

06:21.220 --> 06:22.722
met behulp van error container,

06:22.722 --> 06:25.392
die ons die extra flexibiliteit geeft dat we niet

06:25.392 --> 06:27.522
van tevoren hoeven te weten welke eigenschapsnamen

06:27.522 --> 06:32.653
we willen gebruiken en hoeveel eigenschappen we nodig hebben.
