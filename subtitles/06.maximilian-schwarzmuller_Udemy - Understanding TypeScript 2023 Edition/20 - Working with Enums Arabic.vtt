WEBVTT

00:02.230 --> 00:04.860
المدرب: يرتبط ارتباطًا وثيقًا بفكرة

00:04.860 --> 00:09.760
Tuple بفكرة وجود معرّفين محددين ، والثوابت العالمية التي قد تعمل

00:09.760 --> 00:12.710
بها في تطبيقك ، والتي تريد تمثيلها كأرقام

00:12.710 --> 00:15.020
، ولكن تريد تعيين عنصر يمكن قراءته

00:15.020 --> 00:18.530
من قِبل الإنسان ضع الكلمة المناسبة.

00:18.530 --> 00:20.500
ولهذا ، لديك نوع Enum.

00:20.500 --> 00:23.800
مرة أخرى ، هذا موجود في بعض لغات البرمجة العليا.

00:23.800 --> 00:25.780
جافا سكريبت لا يعرفها بالرغم من ذلك.

00:25.780 --> 00:26.613
تبدو هكذا.

00:26.613 --> 00:28.110
هذه هي الطريقة التي تنشئ بها التعداد.

00:28.110 --> 00:30.540
يمكنك استخدام الكلمة الأساسية للتعداد ،

00:30.540 --> 00:33.060
والتي توجد فقط في عالم TypeScript ، وليس في JavaScript

00:33.060 --> 00:34.840
، وهناك بعد أن يكون لديك أقواس متعرجة

00:34.840 --> 00:36.810
، ثم معرّفاتك.

00:36.810 --> 00:39.141
وهذا النوع ، الذي تمت إضافته بواسطة

00:39.141 --> 00:42.030
TypeScript ، يمنحك قائمة تعداد.

00:42.030 --> 00:45.070
إذاً هذه الملصقات في النهاية ، تمت ترجمتها فقط إلى أرقام

00:45.070 --> 00:48.580
تبدأ من الصفر ، حيث لديك تسميات يمكن قراءتها بواسطة الإنسان يمكنك

00:48.580 --> 00:50.133
العمل بها في شفرتك.

00:51.310 --> 00:53.500
لنوضح لك مثالاً ، دعنا نعود

00:53.500 --> 00:55.620
إلى شخصنا بدوره.

00:55.620 --> 00:58.010
سأقوم بنسخ هذا الرمز ثم التعليق عليه

00:58.010 --> 00:59.710
لأنني سأغيره قليلاً.

00:59.710 --> 01:01.600
ثم هنا ، سأتخلص من هذا النوع

01:01.600 --> 01:05.380
الصريح من التخصيص وبدلاً من ذلك أعود إلى الاستدلال ، لأنني

01:05.380 --> 01:07.150
الآن سأغير الدور.

01:07.150 --> 01:10.330
والآن لنفترض أننا نريد أن يكون لدينا مسؤول ومؤلف

01:10.330 --> 01:12.350
وربما مستخدم للقراءة فقط.

01:12.350 --> 01:14.750
يجب أن يكون لدى المشرف معرف صفري

01:14.750 --> 01:18.660
، مستخدم للقراءة فقط لديه واحد ، المؤلف لديه اثنين.

01:18.660 --> 01:21.160
الآن بالطبع ، يمكننا تخزين ذلك تمامًا

01:21.160 --> 01:22.550
بهذه الأرقام.

01:22.550 --> 01:24.830
أحد الجوانب السلبية هو أنه يمكننا دائمًا

01:24.830 --> 01:26.670
إضافة رقم قد لا يكون لنا دور فيه

01:26.670 --> 01:30.320
، وإذا قمنا لاحقًا في الكود الخاص بنا ، فحاول استخراج الدور

01:30.320 --> 01:33.392
واستخدام التحقق إذا قد يؤدي إلى أخطاء.

01:33.392 --> 01:37.160
بالإضافة إلى ذلك ، نحن بصفتنا مطورًا نواجه صعوبة في فهم

01:37.160 --> 01:39.690
الدور الذي يؤديه هذا المستخدم.

01:39.690 --> 01:41.310
هل كان للمؤلف؟

01:41.310 --> 01:43.020
أم كانت القراءة على المستخدم؟

01:43.020 --> 01:46.140
قد تنسى هذا بعد التوقف لفترة أطول ، عند

01:46.140 --> 01:48.810
العمل في فرق أكبر ، وما إلى ذلك.

01:48.810 --> 01:50.540
لذا بصفتك مطورًا ، قد ترغب

01:50.540 --> 01:54.310
في الحصول على معرّفات يمكن للبشر قراءتها ، شيء مثل

01:54.310 --> 01:58.630
المشرف ، وقراءة المستخدم فقط ، شيء من هذا القبيل.

01:58.630 --> 02:00.240
الآن ، بالطبع ، يمكننا استخدام

02:00.240 --> 02:02.880
ذلك ، يمكننا التعامل مع قيم السلسلة هذه.

02:02.880 --> 02:06.100
المشكلة هي أننا إذا احتجنا لاحقًا إلى فحص إذا

02:06.100 --> 02:11.100
، فإننا نتحقق مما إذا كان دور الشخص مساويًا ، هل كان READ_ONLY_USER؟

02:12.260 --> 02:13.500
أم أنها كلمة واحدة؟

02:13.500 --> 02:15.380
هل كانت مع شرطات سفلية؟

02:15.380 --> 02:17.440
كما ترى ، علينا أن نتذكر كيف كتبنا

02:17.440 --> 02:19.020
هذه السلاسل ، أي النص

02:19.020 --> 02:20.970
بالضبط لدينا هناك.

02:20.970 --> 02:24.330
لأن هذه السلسلة مع الشرطات بين الكلمات

02:24.330 --> 02:27.430
ليست بالطبع هي نفسها هذه السلسلة.

02:27.430 --> 02:29.973
لذا هنا ، لن نجعلها هناك ، تتم

02:31.150 --> 02:36.120
قراءتها فقط إذا حاولت تجميعها وطباعتها ، لأنه ، حسنًا

02:36.120 --> 02:39.170
، الشيك ببساطة لا يسفر عن حقيقة.

02:39.170 --> 02:42.150
ليس لدينا هذا دورًا شخصيًا ، وبالتالي ، لا نحصل على

02:42.150 --> 02:43.930
الإخراج هنا في وحدة التحكم.

02:43.930 --> 02:47.290
لذا فإن لمعرفات السلسلة جوانب سلبية أيضًا.

02:47.290 --> 02:50.340
الآن بالنسبة لمثل هذه السيناريوهات ، من الشائع جدًا في

02:50.340 --> 02:52.340
JavaScript تحديد الثوابت العامة.

02:52.340 --> 02:55.580
على سبيل المثال ، admin ، الذي يحتفظ بعد ذلك بقيم

02:55.580 --> 02:58.053
معينة مثل الأرقام أو السلاسل ، كلاهما

02:58.980 --> 03:00.060
ممكن.

03:00.060 --> 03:01.700
يمكن للأرقام بالطبع أن توفر

03:01.700 --> 03:04.370
لنا بعض الأكواد الإضافية والقطع في الذاكرة.

03:04.370 --> 03:09.370
وهناك قد يكون لدينا ADMIN و READ_ONLY و AUTHOR مثل هذا

03:09.390 --> 03:10.870
وفي الأسفل هناك

03:10.870 --> 03:13.750
، علينا فقط استخدام هذا الدور.

03:13.750 --> 03:16.460
الآن ميزة ذلك هي أنه يمكننا استخدام هذا في كل مكان في التعليمات البرمجية

03:16.460 --> 03:17.343
الخاصة بنا.

03:18.230 --> 03:22.600
وبالتالي هنا على سبيل المثال ، إذا قمت بتشغيل هذا الرمز ، إذا

03:22.600 --> 03:23.680
قمت بتجميعه ثم

03:25.260 --> 03:28.570
سمحنا بإعادة التحميل ، سنرى كمسؤول هنا ، لذلك

03:28.570 --> 03:31.520
هذا يعمل وهذا نمط شائع في JavaScript.

03:31.520 --> 03:34.190
الجانب السلبي هو أنه الآن مرة أخرى ، يتم الاستدلال

03:34.190 --> 03:37.290
على الدور على أنه مجرد رقم ، لذلك يمكننا تخزين أي

03:37.290 --> 03:39.630
رقم هناك حتى رقم لا ندعمه.

03:39.630 --> 03:42.450
بالإضافة إلى ذلك ، علينا تحديد كل هذه الثوابت

03:42.450 --> 03:44.060
، وعلينا إدارتها.

03:44.060 --> 03:45.920
هذا هو المكان الذي يمكن أن يوفر لنا التعداد العمل.

03:45.920 --> 03:48.730
هذا جيد تمامًا ، لكن التعداد يجعل الأمر أسهل.

03:48.730 --> 03:50.970
نقوم بإنشاء تعداد باستخدام الكلمة

03:50.970 --> 03:54.250
الأساسية enum ، ويمكننا تسميته الدور ، والتقرير

03:54.250 --> 03:55.550
هو أن نبدأ بالحرف الكبير

03:55.550 --> 03:58.620
لأن التعداد هو أيضًا نوع مخصص.

03:58.620 --> 04:01.760
إنه أول نوع مخصص لك ، سنكتب المزيد في هذه الدورة

04:01.760 --> 04:03.860
، وهذا هو النوع الأول.

04:03.860 --> 04:06.560
وبعد ذلك ، بعد اسم النوع الذي تريد تعيينه لهذا

04:06.560 --> 04:09.520
التعداد ، يمكنك إضافة أقواس معقوفة ، تمامًا مثل

04:09.520 --> 04:14.040
ذلك ، بدون نقطتين ، لا علامة مساوية ، فقط أقواس متعرجة بعد الاسم.

04:14.040 --> 04:15.800
ثم فاصلة منقوطة.

04:15.800 --> 04:19.433
والآن هنا ، يمكنك تعيين قيمك مثل admin

04:20.650 --> 04:21.973
، للقراءة فقط

04:22.950 --> 04:24.300
، والمؤلف.

04:24.300 --> 04:28.180
وخلف الكواليس هذا هنا يتلقى الرقم صفر

04:28.180 --> 04:31.780
، هذا رقم واحد ، هذا هنا رقم اثنين.

04:31.780 --> 04:34.650
وبعد ذلك هنا ، يمكنك الوصول إلى الدور. ADMIN ، مثل الكائن

04:34.650 --> 04:37.840
، يمكنك الوصول إلى المعرف الخاص بك.

04:37.840 --> 04:40.380
ويمكنك استخدام ذلك في أي مكان آخر في الكود

04:40.380 --> 04:43.890
الخاص بك أيضًا ، وهنا يمكننا التحقق مما إذا كان الدور هو المؤلف

04:43.890 --> 04:46.710
، ثم المؤلف المطبوع وبالطبع ، لا ينبغي أن نرى ذلك

04:46.710 --> 04:50.630
إذا قمت بتشغيل ذلك الآن لأننا خصصنا دور المسؤول هنا .

04:50.630 --> 04:53.333
لكن الفكرة الأساسية هي أننا فعلنا

04:53.333 --> 04:57.490
كل ذلك بمساعدة التعداد ، الذي يعين تسميات للأرقام.

04:57.490 --> 04:59.210
إذا ألقينا نظرة على ذلك في JavaScript.

04:59.210 --> 05:02.830
لذلك في الشفرة المترجمة ، نرى أن هذه هي الطريقة التي أعيد بناؤها.

05:02.830 --> 05:05.080
في النهاية ، أعيد بناؤه مع إذا كان هنا.

05:05.080 --> 05:07.940
لذا الوظيفة التي تنفذ نفسها.

05:07.940 --> 05:11.770
ويتم إدارة الدور هنا ببساطة ككائن في النهاية ، والذي يحتوي

05:11.770 --> 05:14.550
على خاصية admin وخاصية للقراءة فقط وخاصية

05:14.550 --> 05:17.330
AUTHOR ، حيث نقوم بعد ذلك بتخزين قيم الأرقام

05:17.330 --> 05:19.970
لدينا هنا ، يمكنك القول.

05:19.970 --> 05:21.960
لذلك فهو أكثر تعقيدًا من ذلك بقليل ،

05:21.960 --> 05:24.210
ولكن هذا ما يفعله TypeScript في النهاية

05:24.210 --> 05:26.700
هنا لتكرار بناء التعداد هذا في كود JavaScript

05:26.700 --> 05:28.560
، عندما يقوم بتجميع الشفرة.

05:28.560 --> 05:30.700
هنا كمطور ، لدينا ببساطة هذه الأرقام

05:30.700 --> 05:32.680
التي تم إنشاؤها بشكل ملائم.

05:32.680 --> 05:34.290
إذا قمت بالمرور فوقها ، فسترى

05:34.290 --> 05:36.520
الرقم الذي سنخزنه هناك ويمكنك استخدام

05:36.520 --> 05:39.883
هذه الأرقام هنا بطريقة يمكن للبشر قراءتها.

05:40.750 --> 05:42.840
الآن بالنسبة للتعدادات ، فأنت أيضًا

05:42.840 --> 05:44.790
لست مقيدًا بالسلوك الافتراضي.

05:44.790 --> 05:47.470
دعنا نقول لسبب ما ، أنك لا تريد أن تبدأ

05:47.470 --> 05:50.533
بصفر كرقم بداية ، ثم يمكنك إضافة علامة يساوي

05:50.533 --> 05:54.080
هنا بعد المعرف الخاص بك وإدخال أي رقم آخر والآن

05:54.080 --> 05:56.610
يتم تعيين المسؤول إلى الرقم خمسة

05:56.610 --> 05:59.610
والمعرفات الأخرى بعده المعرف حيث تقوم

05:59.610 --> 06:02.150
بتعيين القيمة ، والتقاط ذلك ، وزيادة

06:02.150 --> 06:04.580
قيمة البداية هذه.

06:04.580 --> 06:08.140
حسنًا ، لدينا الآن ستة ، سبعة ، بدلًا من صفر ، واحد ، اثنان.

06:08.140 --> 06:10.642
يمكنك بالطبع أيضًا تعيين قيمك الخاصة

06:10.642 --> 06:14.820
لكل هذه المعرّفات ، إذا كنت بحاجة إلى أرقامك الخاصة.

06:14.820 --> 06:17.070
أنت أيضًا لست مقيدًا بالأرقام ، يمكنك

06:17.070 --> 06:19.390
أيضًا استخدام النص هنا ، أو حتى مزجها

06:19.390 --> 06:21.950
كما أفعل هنا ، أي شيء يذهب هناك ، ولكن غالبًا

06:21.950 --> 06:24.900
ما تريده هو زيادة الأرقام الافتراضية التي

06:24.900 --> 06:28.530
تبدأ من الصفر ، ولكن إذا كنت بحاجة إلى سلوك مختلف ، إذا

06:28.530 --> 06:31.530
كنت تريد استخدام سلسلة هنا ، ثم رقم هنا ، وهنا

06:31.530 --> 06:34.850
رقم أيضًا أو ربما سلسلة رقمية ، فيمكنك فعل ذلك تمامًا

06:34.850 --> 06:37.890
، والميزة هي أنك تحددها هناك ، وبعد ذلك ، تقوم

06:37.890 --> 06:40.880
دائمًا بالإشارة فقط إلى نوع الدور الخاص بك

06:40.880 --> 06:48.270
إلى هذا النوع المخصص الذي قمت بإنشائه ، إلى هذا التعداد المخصص الذي قمت بإنشائه.

06:48.270 --> 06:50.320
وأنت تستخدم ذلك في الشيكات الخاصة

06:50.320 --> 06:52.970
بك وتعيينات النوع ، وأنت جيد.

06:52.970 --> 06:56.090
هذه هي قوة التعداد وهي بناء رائع كلما

06:56.090 --> 06:59.420
احتجت إلى معرفات يمكن للبشر قراءتها ولها

06:59.420 --> 07:03.173
بعض القيمة المعينة خلف الكواليس.
