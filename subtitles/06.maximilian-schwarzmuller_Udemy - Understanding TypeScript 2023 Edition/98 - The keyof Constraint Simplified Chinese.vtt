WEBVTT

00:02.230 --> 00:04.930
教师：希望我们已经掌握了泛型的基本知识,

00:04.930 --> 00:10.400
现在让我们更深入地了解约束, 或者说一种特定类型的约束, 你可以添加它｡

00:10.400 --> 00:12.680
我将用另一个函数来交换它, 一个泛型函数,

00:12.680 --> 00:16.293
我将它命名为extractAndConvert.

00:18.700 --> 00:24.120
这个函数的思想是我们得到一个对象作为第一个参数,

00:24.120 --> 00:26.340
第二个参数, 最后,

00:26.340 --> 00:28.413
是一个键.

00:30.050 --> 00:35.310
现在我想在对象中返回该键的值, 我们可以使用默认的JavaScript表示法来实现这一点｡

00:35.310 --> 00:36.310
使用方括号将exe作为对象中的属性,

00:36.310 --> 00:38.200
但这不是TypeScript特定的,

00:38.200 --> 00:42.010
这又是Vanilla JavaScript｡

00:42.010 --> 00:44.580
所以这里我们可以说这里我们想要一个对象,

00:44.580 --> 00:48.460
对于键我们想要一个字符串.

00:48.460 --> 00:50.160
现在我得到了一个错误,

00:50.160 --> 00:52.000
因为我们最终不知道的是,

00:52.000 --> 00:57.510
我们得到的对象是否真的有那个键｡

00:57.510 --> 01:01.430
这就是TypeScript通过这个奇怪的错误告诉我们的结果｡

01:01.430 --> 01:05.700
例如这里, 我可以控制台记录调用this的结果,

01:05.700 --> 01:09.770
比如说, 一个空对象, 然后是name｡

01:09.770 --> 01:12.600
顺便说一句, 我把这个叫做extractAndConvert,

01:12.600 --> 01:16.025
因为我想在没有控制台日志的情况下调用它, 只需要输入Value,

01:16.025 --> 01:18.600
冒号, 加号.

01:18.600 --> 01:19.660
但这只是一个侧记,

01:19.660 --> 01:22.450
我返回我们流浪在最后与检索数据｡

01:22.450 --> 01:25.160
但这里的主要问题是, 我可以这样调用它它会传入一个对象作为第一个参数,

01:26.091 --> 01:29.890
然后传入一个字符串作为第二个参数｡

01:29.890 --> 01:31.430
但是正确的是, TypeScript告诉我,

01:31.430 --> 01:35.193
最终它不能保证这个键存在于这个对象中｡

01:36.420 --> 01:39.920
为了保证这一点, 我们可以再次使用泛型类型｡ 

01:39.920 --> 01:41.620
我们可以说我们有一个类型T,

01:41.620 --> 01:43.130
这就是我们这里的对象｡

01:43.130 --> 01:46.550
我们可以说, 延伸了对象｡ 

01:46.550 --> 01:48.363
但我们也要打U型｡ 

01:49.440 --> 01:52.850
我们这里的键, 最后,

01:52.850 --> 01:56.320
必须是T型键｡

01:56.320 --> 02:04.890
对于这个对象, 我们要保证我们在这里得到的第二个参数是第一个类型的属性.

02:04.890 --> 02:09.130
因此我们可以说扩展了T的键｡ 

02:11.550 --> 02:13.540
现在你可以看到这里的错误消失了,

02:13.540 --> 02:15.370
而我在下面看到了错误,

02:15.370 --> 02:17.930
因为现在我在这里通知TypeScript,

02:17.930 --> 02:25.870
第一个参数应该是任何类型的对象, 第二个参数应该是该对象中的任何类型的键｡

02:25.870 --> 02:28.480
在这里, 我们可以传入任何类型的对象,

02:28.480 --> 02:30.430
但是这里没有名字键｡

02:30.430 --> 02:34.990
只有在添加名称键后, 此错误才会消失｡ 

02:34.990 --> 02:37.990
所以我们可以使用泛型类型, 还有这个keyoff关键字,

02:37.990 --> 02:41.800
告诉TypeScript我们要确保我们有正确的结构,

02:41.800 --> 02:56.740
这当然很有用, 因为它允许我们确保我们不会犯愚蠢的错误, 在我们试图调用这个函数的时候, 最后, 我们试图把exe作为一个不存在的属性｡

02:56.740 --> 02:58.140
所以这行得通｡ 

02:58.140 --> 02:59.870
但是, 如果我在这里尝试将exe作为“age”,

02:59.870 --> 03:01.570
我会再次得到一个错误, 例如｡

03:02.890 --> 03:05.560
因此, 让我们将其切换回“name”｡ 
