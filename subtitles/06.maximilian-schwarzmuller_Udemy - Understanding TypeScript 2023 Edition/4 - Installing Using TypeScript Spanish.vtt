WEBVTT

00:02.160 --> 00:04.930
Instructor: Aquí está este mismo ejemplo básicamente

00:04.930 --> 00:06.440
en un proyecto real.

00:06.440 --> 00:08.550
Encontrarás este sencillo proyecto, el

00:08.550 --> 00:11.270
archivo HTML del índice y este archivo JavaScript, adjuntos

00:11.270 --> 00:13.340
a este vídeo en un subarchivo.

00:13.340 --> 00:16.900
Puede simplemente abrir esto y luego abrir el archivo HTML del índice.

00:16.900 --> 00:18.610
También puede abrir el código en

00:18.610 --> 00:20.890
cualquier editor de texto de su elección.

00:20.890 --> 00:22.160
Aquí estoy usando VisualStudioCode,

00:22.160 --> 00:25.000
y volveré a mi configuración exacta más adelante en este

00:25.000 --> 00:26.250
módulo.

00:26.250 --> 00:29.250
Por ahora, puede abrir estos dos archivos de texto

00:29.250 --> 00:31.180
con cualquier editor de texto.

00:31.180 --> 00:34.110
Ahora lo que encontrarás ahí es este archivo JavaScript,

00:34.110 --> 00:37.000
que interactúa con este archivo HTML de índice.

00:37.000 --> 00:38.830
Y entonces ese archivo HTML índice,

00:38.830 --> 00:41.050
encontrará dos entradas y el botón y cualquier

00:41.050 --> 00:43.698
archivo JavaScript que se importa aquí.

00:43.698 --> 00:45.843
Básicamente llegamos a estos elementos.

00:45.843 --> 00:47.968
Luego tenemos una función aquí y un escuchador

00:47.968 --> 00:50.020
de eventos en el botón que activa la función

00:50.020 --> 00:53.830
y registra el resultado de la función aquí en la consola.

00:53.830 --> 00:56.750
Ahora, si simplemente abrimos ese archivo HTML

00:56.750 --> 01:00.701
índice, haciendo doble clic en él en el Explorador de Windows o en

01:00.701 --> 01:03.220
el Finder de Mac para que se abra en un navegador,

01:03.220 --> 01:05.150
lo que verás es esto.

01:05.150 --> 01:07.250
Las dos entradas y el botón de añadir

01:07.250 --> 01:11.170
y aquí abrí también las herramientas de desarrollo del navegador.

01:11.170 --> 01:13.760
Ahora bien, si introduces 10 y cinco aquí, por

01:13.760 --> 01:16.640
ejemplo, podrías esperar ver 15 como resultado

01:16.640 --> 01:19.420
aquí a la derecha, pero en su lugar ves 105.

01:19.420 --> 01:23.460
Y esto nos muestra una debilidad de JavaScript aquí.

01:23.460 --> 01:25.890
No se trata de un error técnico.

01:25.890 --> 01:28.050
No es un error que se lanza, pero

01:28.050 --> 01:31.640
es un error lógico en nuestra aplicación.

01:31.640 --> 01:33.986
Pero, ¿de dónde viene este error?

01:33.986 --> 01:37.490
Bueno aquí en JavaScript, llego a estas dos entradas y

01:37.490 --> 01:39.612
cuando se hace clic en el botón, al

01:39.612 --> 01:41.920
final obtengo los valores de los dos

01:41.920 --> 01:45.300
elementos de entrada y los paso aquí para agregar.

01:45.300 --> 01:46.970
Y aquí es importante saber

01:46.970 --> 01:50.100
que en JavaScript cuando se accede al valor de un

01:50.100 --> 01:53.130
elemento de entrada, siempre es una cadena.

01:53.130 --> 01:55.790
Siempre, sin importar el tipo de entrada que sea.

01:55.790 --> 01:59.633
Si es de tipo número o no, siempre es una cadena.

02:00.645 --> 02:03.995
Así que estoy pasando en dos cadenas a esta función el final,

02:03.995 --> 02:05.890
y si se agrega dos cadenas en JavaScript,

02:05.890 --> 02:09.570
que se concatenan en lugar de añadir matemáticamente.

02:09.570 --> 02:14.210
Por eso vemos 105, 10 y 5 concatenados.

02:14.210 --> 02:17.090
Este es el problema con JavaScript.

02:17.090 --> 02:19.980
Y esto es algo en lo que TypeScript puede ayudarnos.

02:19.980 --> 02:22.360
Ahora, sin TypeScript, podríamos por

02:22.360 --> 02:24.380
supuesto añadir una comprobación

02:24.380 --> 02:28.048
if aquí y comprobar si el tipo de num one es igual a number.

02:28.048 --> 02:33.048
Y si el tipo de num dos es igual a número, y si ese es el caso entonces

02:34.030 --> 02:37.390
devuelvo mi cálculo así, de lo contrario

02:37.390 --> 02:40.588
podría lanzar un error o al menos convierto

02:40.588 --> 02:43.304
ambos a números añadiendo un más

02:43.304 --> 02:47.428
delante de cada parámetro aquí.

02:47.428 --> 02:50.510
Este es un código que podríamos escribir.

02:50.510 --> 02:53.023
Tal vez un poco más refinado que esto en JavaScript.

02:53.023 --> 02:57.130
Y con eso nos aseguraríamos de convertir los números

02:57.130 --> 03:00.670
o las entradas en números si aún no lo son.

03:00.670 --> 03:02.430
Así que con eso, si vuelvo a cargar

03:02.430 --> 03:05.220
esto y repito esto, ahora obtenemos 15 debido

03:05.220 --> 03:07.590
a nuestro código cambiado.

03:07.590 --> 03:09.350
Así que, por supuesto, podemos hacer esto en JavaScript.

03:09.350 --> 03:10.970
Y esto es JavaScript de

03:10.970 --> 03:13.440
vainilla, nada de TypeScript.

03:13.440 --> 03:16.640
Pero escribimos un código extra para un error que en realidad

03:16.640 --> 03:19.048
me gustaría evitar en primer lugar.

03:19.048 --> 03:22.210
No quiero que esto ocurra.

03:22.210 --> 03:26.260
Quiero asegurarme de que ni siquiera podemos pasar cadenas aquí a add

03:26.260 --> 03:28.930
porque add debería ser una función que sólo opera

03:29.890 --> 03:31.020
con números.

03:31.020 --> 03:32.570
Para que allí no tengamos que

03:33.428 --> 03:35.650
comprobar si obtenemos un número o no.

03:35.650 --> 03:37.000
Así que quiero mantener esta función

03:37.000 --> 03:38.500
en el estado en que estaba antes.

03:38.500 --> 03:41.630
Quiero esta función aquí, así.

03:41.630 --> 03:44.003
Y ahí es donde TypeScript puede ayudarnos.

03:45.088 --> 03:45.921
Así que TypeScript

03:45.921 --> 03:48.900
puede ayudarnos en estas situaciones como acabo de mostrar.

03:48.900 --> 03:52.690
Ahora, para ver cómo nos ayuda, vamos a instalarlo.

03:52.690 --> 03:56.590
Así que en typescriptlang. org, puede hacer clic en descargar.

03:56.590 --> 03:58.540
Y allí aprenderás a instalarlo.

03:58.540 --> 04:00.250
Y en realidad lo instalaremos

04:01.136 --> 04:02.880
con este comando que utiliza la

04:02.880 --> 04:06.750
herramienta NPM y la herramienta NPM es parte del paquete Node JS.

04:06.750 --> 04:10.210
Así que aunque no vamos a escribir código Node JS aquí, todavía tenemos

04:10.210 --> 04:12.910
que instalar Node JS simplemente porque detrás de

04:12.910 --> 04:14.760
las escenas que también será utilizado

04:14.760 --> 04:17.770
por algunas herramientas que utilizamos.

04:17.770 --> 04:21.780
Y cuando instalamos Node JS, también instalamos NPM, el Node Package

04:21.780 --> 04:24.956
Manager, una herramienta que luego podemos usar para

04:24.956 --> 04:29.200
instalar TypeScript globalmente en nuestra máquina.

04:29.200 --> 04:31.452
Así que simplemente visita nodejs. org y allí, instalar

04:31.452 --> 04:34.220
la última versión que se encuentra aquí.

04:34.220 --> 04:35.723
Basta con hacer clic en este botón.

04:36.586 --> 04:38.276
A continuación, se descargará e instalará, o bien

04:38.276 --> 04:39.420
puede recorrer ese instalador.

04:39.420 --> 04:42.360
Es compatible con todos los sistemas operativos.

04:42.360 --> 04:45.300
Y una vez que tengas instalado Node JS,

04:45.300 --> 04:47.936
podrás ejecutar este comando.

04:47.936 --> 04:51.440
Simplemente abra su terminal normal o símbolo

04:51.440 --> 04:54.800
del sistema y luego copie ese comando.

04:54.800 --> 04:57.223
Importante, en Mac y Linux, es posible que tenga que añadir sudo

04:57.223 --> 04:59.412
delante de esto para obtener los permisos correctos.

04:59.412 --> 05:02.810
En Windows, esto no será necesario.

05:02.810 --> 05:05.100
Así que simplemente asegúrate de instalar

05:05.100 --> 05:06.810
TypeScript con este comando.

05:06.810 --> 05:09.372
Introduzca su contraseña en caso de que se le pida.

05:09.372 --> 05:12.176
Y con eso, tienes TypeScript instalado globalmente

05:12.176 --> 05:15.430
en tu máquina, ¿ahora qué significa esto?

05:15.430 --> 05:17.696
TypeScript instalado.

05:17.696 --> 05:20.810
Ahora recuerda que TypeScript es un lenguaje de programación,

05:20.810 --> 05:22.750
pero sólo es un lenguaje de programación

05:22.750 --> 05:25.212
que funciona porque también tenemos este compilador,

05:25.212 --> 05:28.137
esta herramienta que compila en JavaScript.

05:28.137 --> 05:31.310
Así que al final, lo que instalamos aquí, es el

05:31.310 --> 05:33.296
compilador y todo lo que necesita

05:33.296 --> 05:36.116
saber para entender el código TypeScript

05:36.116 --> 05:39.020
para convertirlo en JavaScript.

05:39.020 --> 05:41.036
Así que con esto, tenemos el compilador

05:41.036 --> 05:44.460
instalado y ahora podemos ejecutar el comando TSC que

05:44.460 --> 05:47.210
invoca este compilador de TypeScript para

05:47.210 --> 05:50.870
compilar un archivo TypeScript a JavaScript.

05:50.870 --> 05:54.140
Así que para ver esto en este proyecto en el que trabajamos, vamos a añadir simplemente

05:54.140 --> 05:56.563
un nuevo archivo usando ts. t por ejemplo.

05:56.563 --> 05:58.677
El nombre que quieras, pero la extensión debe ser . ts que

05:58.677 --> 06:03.677
significa TypeScript.

06:05.100 --> 06:07.651
Ahora, vamos a copiar ese código JavaScript

06:07.651 --> 06:09.850
en el archivo TypeScript.

06:09.850 --> 06:13.100
Aquí, en VisualStudioCode, me aparecen inmediatamente algunos errores que

06:13.100 --> 06:14.280
ahora vamos a solucionar.

06:14.280 --> 06:16.379
Y esta es una gran ventaja de TypeScript.

06:16.379 --> 06:18.915
Si estás usando el IDE adecuado, y mi

06:18.915 --> 06:22.710
recomendación más fuerte es VisualStudioCode, y volveré

06:22.710 --> 06:24.420
a ello más tarde.

06:24.420 --> 06:27.810
Entonces ya tienes un gran soporte en el IDE cuando trabajas

06:27.810 --> 06:30.230
dentro de archivos TypeScript.

06:30.230 --> 06:34.710
Aquí, ya, básicamente permite que TypeScript analice mi código e identifique

06:34.710 --> 06:36.910
algunos puntos débiles.

06:36.910 --> 06:39.720
Lo cual es genial, porque eso es exactamente lo que quiero.

06:39.720 --> 06:42.110
Así que aquí en este ejemplo, permítanme eliminar

06:42.110 --> 06:44.003
el archivo de JavaScript sólo JS.

06:45.952 --> 06:48.360
Y con eso, algunos de los errores han desaparecido

06:48.360 --> 06:50.539
porque se identificó que algunas constantes

06:50.539 --> 06:53.230
y demás se usaban en múltiples archivos.

06:53.230 --> 06:55.787
Pero sigue dándome un error ahí abajo.

06:55.787 --> 06:57.700
Y lo que se ve, por ejemplo, es que no está seguro

06:57.700 --> 07:00.108
de si realmente hay una propiedad de valor.

07:00.108 --> 07:03.200
Este es un error que ni siquiera había considerado

07:03.200 --> 07:05.720
antes en JavaScript, pero es cierto.

07:05.720 --> 07:08.350
Aquí estoy seleccionando un elemento por ID.

07:08.350 --> 07:11.680
Ahora TypeScript no puede saber si esto realmente funcionará.

07:11.680 --> 07:13.160
Tal vez tenga una errata aquí.

07:13.160 --> 07:15.940
En este caso, no podría seleccionar un elemento.

07:15.940 --> 07:17.704
Este elemento simplemente no existiría en la página.

07:17.704 --> 07:20.164
Así que podríamos tener un error tipográfico y TypeScript no

07:20.164 --> 07:22.472
analiza su código HTML para averiguar si esto funciona.

07:22.472 --> 07:24.468
Así que por un lado, esto podría fallar.

07:24.468 --> 07:28.740
Pero incluso si tiene éxito y seleccionamos un elemento allí, no tiene

07:28.740 --> 07:30.910
por qué ser un elemento de entrada.

07:30.910 --> 07:34.720
Podría ser cualquier otro elemento y la mayoría de los elementos HTML no tienen

07:34.720 --> 07:37.450
una propiedad de valor a la que se pueda acceder.

07:37.450 --> 07:38.630
Y esto ya es genial.

07:38.630 --> 07:41.372
TypeScript nos obliga a ser más explícitos, a ser

07:41.372 --> 07:44.060
más claros en nuestras intenciones y a comprobar

07:44.060 --> 07:46.130
dos veces nuestro código.

07:46.130 --> 07:48.100
Y por ejemplo aquí, y no necesitas

07:48.100 --> 07:49.820
entender toda esa sintaxis.

07:49.820 --> 07:52.172
Lo aprenderemos paso a paso a lo largo del curso.

07:52.172 --> 07:55.660
Pero por ejemplo aquí podríamos hacer saber a TypeScript que estamos

07:55.660 --> 07:58.204
seguros de que obtendremos un elemento añadiendo

07:58.204 --> 08:00.080
un signo de exclamación.

08:00.080 --> 08:04.170
Esto básicamente le dice a TypeScript que esto nunca producirá null.

08:04.170 --> 08:06.370
Esto siempre encontrará un elemento.

08:06.370 --> 08:08.420
Y como desarrollador, por supuesto

08:08.420 --> 08:10.350
sé que esto siempre encontrará un

08:10.350 --> 08:11.920
elemento porque he comprobado

08:11.920 --> 08:14.763
dos veces el ID y veo que sí, tengo ese ID aquí.

08:15.610 --> 08:17.270
Ahora además, también sé que

08:17.270 --> 08:19.500
siempre será un elemento de entrada.

08:19.500 --> 08:22.408
Así que podemos utilizar como elemento de entrada HTML,

08:22.408 --> 08:25.470
una sintaxis llamada typecasting que también explicaré

08:25.470 --> 08:27.746
con más detalle más adelante, para que TypeScript

08:27.746 --> 08:30.327
sepa qué tipo de elemento será.

08:30.327 --> 08:32.926
Podemos aplicar esto también al segundo elemento.

08:32.926 --> 08:35.650
Así que para ser realmente claro aquí, esta es

08:35.650 --> 08:37.510
la sintaxis de TypeScript.

08:37.510 --> 08:39.520
Puedo usar este signo de exclamación

08:39.520 --> 08:41.600
aquí y puedo usar este encasillamiento

08:41.600 --> 08:44.786
aquí porque estamos en un . ts, estamos en un archivo TypeScript.

08:44.786 --> 08:48.380
Compilaremos esto en JavaScript.

08:48.380 --> 08:51.050
Esto no funcionaría en el JavaScript de vainilla.

08:51.050 --> 08:53.427
Esto no está disponible allí.

08:53.427 --> 08:56.300
Con esto, nos vemos obligados a ser más claros en nuestras

08:56.300 --> 08:58.460
intenciones y a pensar realmente en nuestro

08:58.460 --> 09:01.060
código y comprobarlo dos veces, lo cual es genial.

09:01.060 --> 09:03.160
Pero esa no es ni siquiera la mayor ventaja.

09:04.270 --> 09:06.820
La mayor ventaja es la adición de tipos.

09:06.820 --> 09:09.630
Al fin y al cabo, eso es lo que da nombre a TypeScript.

09:09.630 --> 09:12.282
Y aquí no digo nada sobre los tipos de datos con

09:12.282 --> 09:14.204
los que opera esta función.

09:14.204 --> 09:17.886
Si pasamos el ratón por encima de uno de estos parámetros,

09:17.886 --> 09:20.126
vemos este algo aquí.

09:20.126 --> 09:22.828
Y al final, esto es TypeScript diciéndonos:

09:22.828 --> 09:24.880
"No sé lo que hay ahí. Puede ser cualquier tipo de valor.

09:24.880 --> 09:27.162
Ahora podemos añadir un tipo más explícito en los archivos TypeScript.

09:27.162 --> 09:31.960
Así que no en los archivos JavaScript, sino en los archivos TypeScript, añadiendo dos puntos

09:31.960 --> 09:33.806
aquí y luego especificando el tipo.

09:33.806 --> 09:38.580
Por ejemplo, el número.

09:38.580 --> 09:40.730
Haciendo esto aquí y haciendo esto aquí.

09:40.730 --> 09:43.300
Con esta sintaxis extra que TypeScript, que

09:43.300 --> 09:45.246
este compilador entiende, le estamos

09:45.246 --> 09:47.928
diciendo a TypeScript que esto aquí será de

09:47.928 --> 09:50.960
tipo número y esto será de tipo número.

09:50.960 --> 09:54.010
Y por lo tanto ahora tenemos un error aquí de nuevo.

09:54.010 --> 09:56.126
Y, por cierto, no sólo obtenemos

09:56.126 --> 09:58.060
este error en el IDE.

09:58.060 --> 09:59.370
También lo obtenemos si intentamos

09:59.370 --> 10:01.940
compilar este código porque, en definitiva, eso es lo

10:01.940 --> 10:03.820
que tenemos que hacer, ¿no?

10:03.820 --> 10:05.326
Ahora para compilar esto, abriré una terminal.

10:05.326 --> 10:08.670
Y aquí estoy abriendo mi terminal o símbolo del sistema

10:08.670 --> 10:10.760
que está integrado en este IDE.

10:10.760 --> 10:13.683
Es el símbolo del sistema normal.

10:14.947 --> 10:16.530
El terminal de comandos del sistema regular

10:16.530 --> 10:18.110
que estaba utilizando aquí también, sólo

10:18.110 --> 10:19.533
que ya navegó en esta carpeta.

10:20.510 --> 10:22.446
Así que si usted no está usando

10:22.446 --> 10:27.420
algún terminal IDE incorporado, puede usar su terminal regular pero

10:27.420 --> 10:30.265
CD navegar en esa carpeta de inicio extraída

10:30.265 --> 10:33.960
donde agregó su archivo TypeScript.

10:33.960 --> 10:36.300
Y una vez que estés en esa carpeta, puedes ejecutar el TSC.

10:36.300 --> 10:38.888
Eso invocará este compilador de

10:38.888 --> 10:42.980
TypeScript que instalamos antes usando dash ts. ts.

10:42.980 --> 10:47.980
Y si ejecuta esto, realmente obtendrá un error.

10:47.990 --> 10:50.728
Todavía obtendrá un archivo JavaScript,

10:50.728 --> 10:53.267
porque por defecto TypeScript todavía

10:53.267 --> 10:57.460
lo compilará a JavaScript, también aprenderá cómo suprimir

10:57.460 --> 11:00.050
esto más adelante en ese curso.

11:00.050 --> 11:02.900
Pero da un error de compilación al hacerlo.

11:02.900 --> 11:05.904
Le indica que el argumento de tipo cadena no

11:05.904 --> 11:09.070
es asignable a un parámetro de tipo número.

11:09.070 --> 11:13.128
Así que el problema aquí es que TypeScript entiende que lo que

11:13.128 --> 11:16.550
obtenemos en la propiedad value de nuestro elemento

11:16.550 --> 11:18.930
de entrada será una cadena.

11:18.930 --> 11:23.130
También lo vemos aquí en el IDE.

11:23.130 --> 11:24.786
Y no podemos pasar esto a add

11:24.786 --> 11:28.130
porque ahí no queremos una cadena, queremos un número.

11:28.130 --> 11:31.026
Así que tenemos que arreglar esto, por ejemplo, convirtiendo

11:31.026 --> 11:33.600
esto en un número aquí añadiendo un plus.

11:33.600 --> 11:36.790
Y tan pronto como hacemos esto, podemos compilar

11:36.790 --> 11:39.708
este código de nuevo repitiendo ese comando

11:39.708 --> 11:42.406
y ahora se compila sin errores.

11:42.406 --> 11:45.225
Nos da esto usando TypeScript. JavaScript y ahora vuelve a mostrar algunos

11:45.225 --> 11:49.030
errores porque no entiende que

11:49.030 --> 11:50.690
aquí nunca se usarán ambos

11:50.690 --> 11:53.090
archivos al mismo tiempo.

11:54.028 --> 11:55.373
De nuevo, todo esto es algo que mejorará

11:56.466 --> 11:58.530
más adelante en el curso, una vez que lo configuremos.

11:58.530 --> 12:00.428
Podemos ignorar esto por ahora.

12:00.428 --> 12:01.261
Así que me da este archivo.

12:02.588 --> 12:04.348
Y si abrimos esto, vemos algo interesante aquí.

12:04.348 --> 12:06.210
Vemos que allí, por supuesto, nuestros tipos han desaparecido.

12:06.210 --> 12:08.690
Este casting aquí se ha ido.

12:08.690 --> 12:11.280
Volvemos a tener JavaScript de vainilla.

12:11.280 --> 12:13.308
Así que si echamos un vistazo a nuestro archivo TypeScript

12:13.308 --> 12:16.250
aquí, vemos que allí tenemos todas estas buenas adiciones.

12:16.250 --> 12:18.786
Pero como ya he mencionado, estas son sólo características de TypeScript.

12:18.786 --> 12:22.130
Cuando se compila a JavaScript, se utilizan para evaluar

12:22.130 --> 12:24.600
el código y encontrar posibles errores,

12:24.600 --> 12:26.770
pero luego se eliminan y obtenemos un

12:26.770 --> 12:29.090
JavaScript normal como salida.

12:29.090 --> 12:33.960
Así que ahora podemos ir a nuestro archivo HTML índice

12:33.960 --> 12:37.010
y la importación utilizando ts. js y eso es importante.

12:37.010 --> 12:41.230
Siempre hay que importar archivos JavaScript porque

12:41.230 --> 12:43.550
el navegador no puede ejecutar TypeScript.

12:43.550 --> 12:45.990
Tenemos que importar el resultado de nuestra compilación.

12:45.990 --> 12:49.480
Y ahora con eso, si recargamos esto, tenemos nuestro código de

12:49.480 --> 12:52.108
trabajo porque ahora, tenemos el código JavaScript

12:52.108 --> 12:55.750
adecuado donde hemos arreglado este problema mediante la fundición

12:55.750 --> 12:57.970
de nuestras entradas antes de pasarlas

12:59.410 --> 13:01.110
a la función.

13:01.110 --> 13:03.010
Pero hemos podido solucionar estos problemas

13:03.986 --> 13:06.087
gracias a nuestras anotaciones de tipo.

13:06.087 --> 13:08.100
Y como has visto, también hemos tenido que escribir

13:08.100 --> 13:10.720
algunas otras partes del código de forma más limpia.

13:10.720 --> 13:13.220
Y por eso TypeScript es increíble.

13:13.220 --> 13:15.400
Nos obliga a escribir un código mejor,

13:15.400 --> 13:17.880
más limpio y menos propenso a errores.
