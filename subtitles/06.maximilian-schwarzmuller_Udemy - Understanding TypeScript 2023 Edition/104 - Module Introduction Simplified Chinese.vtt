WEBVTT

00:02.260 --> 00:03.810
解说员：泛型已经结束了,

00:03.810 --> 00:06.780
让我们深入了解下一个更高级的特性,

00:06.780 --> 00:08.860
那就是装饰器｡

00:08.860 --> 00:14.000
装饰器是一个对于元编程非常有用的特性｡

00:14.000 --> 00:16.230
元编程是什么意思？

00:16.230 --> 00:24.840
这意味着您通常不会经常使用装饰器来直接影响页面的最终用户｡

00:24.840 --> 00:30.150
因此, 装饰器是一种特别适合编写代码的工具,

00:30.150 --> 00:37.600
它可以让其他开发人员更容易地使用｡

00:37.600 --> 00:41.280
这听起来可能很奇怪, 但您将在本模块中了解我的意思｡

00:41.280 --> 00:43.213
最后, 这一切都归结为这样一个事实,

00:43.213 --> 00:47.320
即与其他代码片段不同, 假设当我们添加一个事件侦听器时,

00:47.320 --> 00:51.810
我们可以轻松地编写对页面用户有直接影响的代码｡

00:51.810 --> 00:53.970
如果我们在按钮上注册一个侦听器,

00:53.970 --> 01:00.320
并在单击按钮后显示一个警报, 那么访问我们页面的用户会立即看到一些内容｡

01:00.320 --> 01:02.810
对于装饰器, 我们通常不做这些,

01:02.810 --> 01:05.360
但是相反, 我们可以例如保证我们的一个类被正确使用,

01:05.360 --> 01:09.230
或者一个类中的一个方法, 或者我们做一些隐藏的转换,

01:09.230 --> 01:13.190
诸如此类的事情｡

01:13.190 --> 01:14.760
在本模块中, 我们将详细了解装饰器是什么,

01:14.760 --> 01:19.460
关于什么, 以及我们为什么要使用它们｡

01:19.460 --> 01:20.850
我们当然会用到它们,

01:20.850 --> 01:22.140
你们也会学到不同类型的装饰器,

01:22.140 --> 01:24.760
不同类型的支撑｡

01:24.760 --> 01:32.233
我们将看到几个示例, 这些示例将使我们更清楚地了解装饰器所扮演的角色以及它们为什么有用｡
