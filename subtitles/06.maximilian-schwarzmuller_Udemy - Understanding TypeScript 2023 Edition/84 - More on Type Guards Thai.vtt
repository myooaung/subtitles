WEBVTT

00:02.220 --> 00:04.080
-: ตอนนี้ประเภททางแยกเป็นสิ่งหนึ่ง

00:04.080 --> 00:05.470
อย่างไรก็ตาม ใช้บ่อยกว่านั้นเป็นอีกฟีเจอร์หนึ่ง

00:05.470 --> 00:10.590
และนั่นคือ Type Guards ซึ่งเป็นฟีเจอร์ที่เราใช้กันมาบ้างแล้ว

00:10.590 --> 00:12.400
ลองใช้ Combinable ที่นี่

00:12.400 --> 00:18.020
เป็นประเภทสหภาพที่เรามีสตริงหรือตัวเลข และตัวป้องกันประเภทช่วยเราด้วยประเภทสหภาพเพราะแม้ว่าจะมีความยืดหยุ่น

00:18.020 --> 00:26.200
แต่บ่อยครั้งคุณจำเป็นต้องรู้ว่าคุณกำลังได้รับประเภทใดกันแน่ในขณะรันไทม์

00:26.200 --> 00:28.630
สมมติว่าเรามีฟังก์ชันเพิ่มโดยที่ฉันได้ตัวเลขที่ต้องเป็นประเภท

00:28.630 --> 00:44.640
Combinable เช่น สตริงหรือตัวเลข ดังนั้น ฉันจะตั้งชื่อมันว่า a ตรงนี้ แล้วฉันก็ได้อาร์กิวเมนต์อีกอันที่ต้องการ รวมกันได้ ดังนั้นเป็นตัวเลขหรือสตริง แล้วฉันต้องการคืนค่า a บวก b

00:44.640 --> 00:47.020
บัดนี้เราเห็นมาแล้วว่าสิ่งนี้ใช้ไม่ได้

00:47.020 --> 00:51.320
แต่เราต้องตรวจสอบว่า typeof a เท่ากับ

00:51.320 --> 00:53.740
string หรือไม่ เช่น หรือ

00:55.660 --> 00:59.780
typeof b เท่ากับ string และถ้าเป็นกรณีนี้

00:59.780 --> 01:01.000
เราจะคืนค่า

01:01.000 --> 01:04.681
a toString บวก b ถึงสตริง

01:04.681 --> 01:06.750
ดังนั้นเราจึงเชื่อมสองสายนี้เข้าด้วยกัน

01:06.750 --> 01:09.570
มิฉะนั้น ถ้าไม่ใส่คำสั่ง if นี้ เราจะคืนค่า

01:09.570 --> 01:11.510
a บวก b แบบนี้ เพราะตอนนี้ type

01:11.510 --> 01:13.270
group รู้ว่า a และ b ต้องเป็นตัวเลขตรงนี้

01:13.270 --> 01:19.710
เพราะถ้าอย่างน้อยหนึ่งตัวจะไม่ใช่ตัวเลข เราจะเป็น ในนี้.

01:19.710 --> 01:32.550
ตอนนี้ที่นี่เรียกว่าตัวป้องกันประเภทเพราะมันช่วยให้เราใช้ความยืดหยุ่นประเภทยูเนี่ยนที่มอบให้เราและยังมั่นใจได้ว่าโค้ดของเราทำงานอย่างถูกต้องที่รันไทม์

01:32.550 --> 01:40.570
เพราะบ่อยครั้งที่คุณมีฟังก์ชันที่ทำงานกับสองหรือสามประเภทที่แตกต่างกัน ดังนั้น ประเภทการรวมนั้นสมบูรณ์แบบ

01:40.570 --> 01:51.670
แต่สิ่งที่คุณทำกับค่านั้นขึ้นอยู่กับประเภท เช่น ที่นี่ ที่เราเชื่อมหรือบวกทางคณิตศาสตร์

01:51.670 --> 01:55.310
ตอนนี้ตัวป้องกันประเภทใช้ typeof

01:55.310 --> 01:58.970
คุณยังสามารถเขียนตัวป้องกันประเภทอื่นได้

01:58.970 --> 02:03.050
และเพื่อสิ่งนั้น ให้ฉันกลับมาที่ประเภทผู้ดูแลระบบและพนักงานที่ฉันได้รับ

02:03.050 --> 02:06.943
ซึ่งฉันได้รับสิทธิ์สำหรับผู้ดูแลระบบและวันที่เริ่มต้นของพนักงาน

02:08.590 --> 02:11.810
ตอนนี้เรามี ElevatedEmployee ซึ่งรวมทั้งสองอย่างเข้าด้วยกัน

02:11.810 --> 02:14.980
ตอนนี้สร้างประเภทอื่นที่นี่ด้วย

02:14.980 --> 02:16.330
นั่นคือพนักงานที่ไม่รู้จัก

02:18.000 --> 02:21.940
นี่เป็นเพียงพนักงานหรือผู้ดูแลระบบ

02:21.940 --> 02:25.540
ดังนั้นเราจึงมีประเภทสหภาพโดยใช้ประเภทวัตถุที่กำหนดเองสองประเภทของฉัน

02:25.540 --> 02:28.173
พนักงานที่ไม่รู้จักจึงเป็นหนึ่งในสองคนนี้

02:29.230 --> 02:32.003
ตอนนี้เราอาจมีฟังก์ชัน printEmployeeInformation

02:34.620 --> 02:36.420
ซึ่งฉันต้องส่งพนักงานเข้าไป

02:36.420 --> 02:39.660
และนั่นควรเป็นพนักงานประเภทที่ไม่รู้จัก

02:39.660 --> 02:41.610
ตอนนี้อยู่ที่นี่ฉันต้องการปลอบใจ บันทึกข้อมูลต่าง

02:41.610 --> 02:44.030
ๆ เกี่ยวกับพนักงาน

02:44.030 --> 02:52.140
ตัวอย่างเช่น ชื่อจาก emp ชื่อ ซึ่งจะทำงานโดยไม่มีปัญหาเนื่องจากพนักงานทั้งสองประเภทมีคุณสมบัติชื่อ

02:52.140 --> 02:56.730
แต่ฉันก็อยากจะปลอบใจเหมือนกัน บันทึกสิทธิ์โดยการเข้าถึง

02:58.160 --> 03:04.350
emp สิทธิ์ และที่นี่ฉันพบปัญหาในการเติมข้อความอัตโนมัติแล้วเนื่องจาก

03:04.350 --> 03:09.890
TypeScript ไม่สามารถยืนยันได้ว่าสิ่งนี้มีอยู่ในอาร์กิวเมนต์เสมอ เนื่องจาก

03:09.890 --> 03:16.260
UnknownEmployee อาจเป็นพนักงานทั่วไปที่ไม่มีคุณสมบัติสิทธิ์

03:16.260 --> 03:18.330
แอดมินเท่านั้นที่มี

03:18.330 --> 03:20.100
ตอนนี้เราต้องการตัวป้องกันที่นี่

03:20.100 --> 03:24.530
ปัญหาอยู่ที่ typeof เราจะไม่ชนะอะไรเลย

03:24.530 --> 03:26.830
หากเราตรวจสอบประเภทของพนักงาน

03:26.830 --> 03:29.470
สิ่งนั้นจะถูกคัดค้านในขณะรันไทม์

03:29.470 --> 03:32.940
นั่นไม่ได้บอกเราว่ามีคุณสมบัตินี้หรือไม่

03:32.940 --> 03:34.960
ดังนั้น ถ้าฉันย้ายโค้ดใน if check

03:34.960 --> 03:37.430
นี้ TypeScript จะไม่มีความสุขมากกว่าเดิม

03:37.430 --> 03:39.750
เพราะอ็อบเจกต์ก็เป็นแค่อ็อบเจกต์

03:39.750 --> 03:41.920
ไม่บอกสรรพคุณอะไรเลย

03:41.920 --> 03:44.980
เราไม่สามารถตรวจสอบว่าเป็นประเภท Employee หรือไม่

03:44.980 --> 03:49.840
เพราะนั่นไม่ใช่ประเภทที่ JavaScript รู้ และโปรดทราบว่าการตรวจสอบนี้รันไทม์และใช้

03:49.840 --> 03:56.190
JavaScript เราจึงเปรียบเทียบได้เฉพาะประเภทที่ทำให้เราได้รับกับประเภทที่ JavaScript รู้ และ

03:56.190 --> 03:58.010
ซึ่งจะเป็นอ็อบเจกต์ สตริง

03:58.010 --> 04:05.610
ตัวเลข และบูลีนที่เปิดอยู่ และประเภทที่กำหนดเองของเราไม่ได้เป็นส่วนหนึ่งของมัน

04:05.610 --> 04:07.950
ที่มีอยู่เฉพาะในโลกของ TypeScript

04:07.950 --> 04:11.020
ไม่ใช่ในโลกของ JavaScript ที่คอมไพล์แล้ว

04:11.020 --> 04:13.990
ดังนั้นจึงใช้ไม่ได้เช่นกัน

04:13.990 --> 04:17.960
ทีนี้ วิธีแก้ปัญหาของเราคือใช้ if check อื่น

04:17.960 --> 04:20.240
เรารู้ว่าเราต้องการเข้าถึงสิทธิพิเศษ

04:20.240 --> 04:25.240
ดังนั้นเราจึงสามารถตรวจสอบได้ว่าสิทธิ์ของพนักงานนั้นสำคัญหรือไม่

04:26.400 --> 04:30.690
ปัญหาคือ TypeScript ไม่อนุญาตให้เราเข้าถึงคุณสมบัตินี้เลย

04:30.690 --> 04:36.200
ไม่แม้แต่จะตรวจสอบแบบนี้ แต่มีวิธีอื่นให้เราตรวจสอบ

04:36.200 --> 04:40.000
เราสามารถใช้คำหลักใน JavaScript ได้

04:40.000 --> 04:43.120
เราสามารถตรวจสอบได้ว่าสิทธิพิเศษซึ่งตอนนี้เขียนเป็นสตริงอยู่ใน

04:43.120 --> 04:46.690
emp หรือไม่

04:46.690 --> 04:53.480
นี่คือรหัส JavaScript ที่อนุญาตให้ตรวจสอบว่าสิ่งนี้มีอยู่เป็นคุณสมบัติสำหรับพนักงานหรือไม่

04:53.480 --> 05:01.200
และหากเป็นเช่นนั้น TypeScript จะตรวจหาการตรวจสอบนี้ที่นี่ และช่วยให้เราสามารถเข้าถึงคุณสมบัตินี้ภายในสิ่งนี้ได้

05:01.200 --> 05:04.543
หากตรวจสอบที่นี่

05:05.852 --> 05:08.380
และเราสามารถทำซ้ำได้สำหรับ

05:08.380 --> 05:12.240
startDate ดังนั้น ตรวจสอบว่า startDate เป็นคุณสมบัติที่นี่หรือไม่

05:12.240 --> 05:18.730
และเราจึงสามารถแสดงผลสิ่งนี้ใน this if check

05:18.730 --> 05:23.687
ทีนี้ ถ้าเราเรียก printEmployeeInformation และเราส่งต่อพนักงานคนหนึ่งที่เราสร้างขึ้น

05:24.650 --> 05:42.530
e1 คุณจะเห็นว่าสิ่งนี้คอมไพล์โดยไม่มีข้อผิดพลาด และแน่นอน ส่งออกสิทธิ์ และที่นี่ ข้อมูลควรพูดด้วย วันที่เริ่มต้นที่นี่แน่นอน

05:42.530 --> 05:45.820
แต่ด้วยสิ่งนั้น มันให้ผลลัพธ์ที่เราคาดหวัง

05:45.820 --> 05:48.590
และในอีกด้านหนึ่ง หากเราส่งพนักงานที่ไม่มีฟิลด์เหล่านี้ทั้งหมด

05:48.590 --> 05:53.090
ตัวอย่างเช่น ถ้าเราสร้างแบบทันทีที่มีเฉพาะวันที่เริ่มต้น แต่ไม่มีสิทธิ์

05:53.090 --> 06:05.723
ก็จะมีงานทั้งหมดและคอมไพล์โดยไม่มีข้อผิดพลาด และ เราไม่พิมพ์อะไรเกี่ยวกับสิทธิพิเศษเพราะสิ่งนี้หากเรามีเช็คอยู่ในนั้น

06:07.650 --> 06:09.800
เมื่อทำงานกับชั้นเรียน คุณสามารถใช้ตัวป้องกันประเภทอื่นได้

06:09.800 --> 06:16.520
ซึ่งจะเป็นตัวอย่างของตัวป้องกันประเภท

06:16.520 --> 06:26.523
สมมติว่าเรามีคลาส Car และนั่นมีวิธีขับเคลื่อนที่บอกว่าคอนโซล

06:26.523 --> 06:26.523
log

06:28.480 --> 06:34.623
Driving และเรามีอีกคลาสคือ Truck ซึ่งก็มีวิธีการขับด้วยหรือบางทีคุณอาจพูดว่า

06:35.840 --> 06:40.250
Driving a truck แต่เราต้องพูดชื่อวิธี

06:40.250 --> 06:43.980
และโดยที่เรามีวิธี loadCargo ด้วย โดยที่เรามีจำนวนเงิน

06:43.980 --> 06:49.040
ซึ่งเป็นตัวเลข แล้วตรงนี้ฉันแค่มีรหัสจำลองที่ฉันพูดว่า

06:49.040 --> 06:53.570
"กำลังโหลดสินค้าบวกจำนวนเงิน อะไรทำนองนั้น อ๊ะ จำนวนเงิน อะไรทำนองนั้น

06:53.570 --> 06:57.323
ตอนนี้เรามีสองคลาส ซึ่งแน่นอนว่ามีความคล้ายคลึงกันอยู่บ้าง

06:58.170 --> 06:59.320
นั่นคือวิธีการขับเคลื่อน

06:59.320 --> 07:02.090
แต่ก็มีความแตกต่างเช่นกัน

07:02.090 --> 07:03.890
ทีนี้ อีกครั้ง เราสามารถสร้างประเภทสหภาพได้ที่นี่

07:03.890 --> 07:08.200
ยานพาหนะ ซึ่งก็คือรถยนต์หรือรถบรรทุก และตอนนี้ สมมติว่า

07:08.200 --> 07:13.030
เราสร้างยานพาหนะใหม่ v1 ซึ่งเป็นรถยนต์ใหม่ และอีกประเภทหนึ่งคือ

07:13.030 --> 07:18.030
v2 ซึ่ง เป็นรถบรรทุกใหม่

07:18.050 --> 07:21.873
ตอนนี้ฉันมีฟังก์ชัน useVehicle ซึ่งคาดว่าจะได้ยานพาหนะ

07:23.890 --> 07:26.443
ซึ่งควรเป็นยานพาหนะประเภทใด

07:27.700 --> 07:31.350
ซึ่งควรเป็นประเภทสหภาพนี้

07:31.350 --> 07:37.490
ที่นี่เราได้รับยานพาหนะ และตอนนี้ สมมติว่า เป้าหมายของเราที่นี่คือทำทุกอย่างที่เราทำได้กับยานพาหนะ:

07:37.490 --> 07:40.040
ขับรถและบรรทุกสินค้า

07:40.040 --> 07:45.420
แน่นอนว่าเราสามารถเรียกรถได้ เพราะการขับรถนั้นมีอยู่เสมอแต่สำหรับยานพาหนะ

07:45.420 --> 07:45.420
loadCargo

07:45.420 --> 07:50.010
เรามีปัญหาเพราะรถบรรทุกเท่านั้นที่มี

07:50.010 --> 07:52.720
รถไม่มี ดังนั้นสิ่งนี้จะไม่ทำงาน

07:52.720 --> 07:56.440
แน่นอน ตอนนี้เราสามารถตรวจสอบได้อีกครั้งว่า loadCargo อยู่ในยานพาหนะหรือไม่

07:56.440 --> 07:59.513
และถ้าเป็นเช่นนั้น เราสามารถใช้มันได้

08:00.760 --> 08:05.760
อย่างน้อยถ้าฉันแก้ไขการพิมพ์ผิดที่นี่

08:06.430 --> 08:09.480
ตอนนี้เราบันทึกมันแล้วเรียก useVehicle

08:09.480 --> 08:13.230
และส่งต่อใน v1 จากนั้นเราเรียกมันอีกครั้งด้วย v2

08:13.230 --> 08:17.400
และผมบันทึกทั้งหมดนั้น มันคอมไพล์ และใช้งานได้

08:17.400 --> 08:21.680
ตอนนี้เป็นวิธีหนึ่งที่จะทำ

08:21.680 --> 08:23.340
อีกวิธีหนึ่ง ซึ่งอาจดูหรูหรากว่าเล็กน้อย

08:23.340 --> 08:31.920
เพราะช่วยลดความเสี่ยงที่คุณจะพิมพ์ผิดในสตริงคุณสมบัตินี้ด้วย นั่นคือคุณใช้อินสแตนซ์ของ

08:31.920 --> 08:34.080
เราสามารถตรวจสอบได้ว่ายานพาหนะเป็นตัวอย่างของรถบรรทุกหรือไม่

08:34.080 --> 08:39.080
หากเป็นกรณีนี้ เราทราบดีว่าจะมีวิธีการ loadCargo

08:39.360 --> 08:42.510
อินสแตนซ์ของเป็นตัวดำเนินการปกติที่สร้างขึ้นในวานิลลา

08:42.510 --> 08:45.230
JavaScript ดังนั้นนี่จึงไม่ใช่โค้ด

08:45.230 --> 08:47.430
TypeScript

08:47.430 --> 08:49.280
เช่นเดียวกับ typeof นี่เป็นส่วนหนึ่งของ

08:49.280 --> 08:52.250
JavaScript และรันไทม์

08:52.250 --> 08:54.290
JavaScript ไม่รู้จักประเภทรถบรรทุก

08:54.290 --> 08:59.330
แต่รู้จักฟังก์ชันคอนสตรัคเตอร์ และคลาสในตอนท้ายจะถูกแปลเป็นฟังก์ชันคอนสตรัคเตอร์

08:59.330 --> 09:06.580
จากนั้น TypeScript จะสามารถค้นหาได้ว่ายานพาหนะถูกสร้างขึ้นตามฟังก์ชันคอนสตรัคเตอร์ของรถบรรทุกหรือไม่

09:06.580 --> 09:10.290
ดังนั้นเนื่องจากคลาสถูกคอมไพล์เป็นฟังก์ชันคอนสตรัคเตอร์ที่

09:10.290 --> 09:15.450
JavaScript เข้าใจ จึงสามารถใช้สิ่งนั้นได้

09:15.450 --> 09:17.210
ถ้าเราจะใช้อินเทอร์เฟซที่นี่แทนคลาส

09:17.210 --> 09:22.950
และแน่นอน เราไม่สามารถใช้งานที่นี่ได้ แต่เราจะทำอย่างนั้นเมื่อเราสร้างวัตถุที่มีสัญกรณ์ตามตัวอักษรของวัตถุ

09:22.950 --> 09:27.300
เราก็สามารถทำได้ อย่าใช้อินสแตนซ์ของอินสแตนซ์เพราะตามที่คุณได้เรียนรู้

09:27.300 --> 09:34.370
อินเทอร์เฟซไม่ได้ถูกคอมไพล์เป็นโค้ด JavaScript ใดๆ ดังนั้นเราจึงไม่สามารถใช้งานในขณะรันไทม์ได้

09:34.370 --> 09:37.160
สำหรับคลาส เราสามารถทำได้เนื่องจาก JavaScript

09:37.160 --> 09:40.010
รองรับคลาสและฟังก์ชันคอนสตรัคเตอร์ และด้วยอินสแตนซ์ของ

09:40.010 --> 09:44.500
คุณจะทราบได้ว่าอ็อบเจกต์บางตัวอิงตามคลาสนั้นหรือไม่

09:44.500 --> 09:47.660
ถ้าเรารู้ว่าใช่ เราก็จะมีฟังก์ชัน loadCargo

09:47.660 --> 09:51.850
พวกนี้คือการ์ดประเภท

09:51.850 --> 10:02.980
ในท้ายที่สุด ตัวป้องกันประเภทเป็นเพียงคำที่อธิบายแนวคิดหรือวิธีการตรวจสอบว่ามีคุณสมบัติหรือวิธีการบางอย่างอยู่หรือไม่ก่อนที่คุณจะพยายามใช้

10:02.980 --> 10:08.470
หรือถ้าคุณสามารถทำบางอย่างกับประเภทได้ก่อนที่คุณจะพยายามใช้

10:08.470 --> 10:10.220
สำหรับอ็อบเจกต์ ที่สามารถทำได้ด้วยอินสแตนซ์หรือด้วย

10:10.220 --> 10:22.280
in สำหรับประเภทอื่นๆ คุณสามารถใช้ typeof ได้ ดังนั้น ตอนนี้คุณจึงมีความยืดหยุ่นทั้งหมดในการใช้ประเภทความยืดหยุ่นของยูเนี่ยนที่มอบให้คุณ และยังคงเขียนโค้ดที่จะทำสิ่งหนึ่งหรือ

10:22.280 --> 10:29.050
อีกอันขึ้นอยู่กับประเภทที่คุณได้รับในขณะรันไทม์
