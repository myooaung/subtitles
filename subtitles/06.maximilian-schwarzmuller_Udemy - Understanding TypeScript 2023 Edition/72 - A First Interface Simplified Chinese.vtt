WEBVTT

00:02.802 --> 00:04.030
教师：现在我们已经讲过了课程,

00:04.030 --> 00:05.910
让我们来看看接口｡

00:05.910 --> 00:09.510
我们将把app ts文件重命名为classes, 并添加一个新的app

00:09.510 --> 00:11.230
ts文件, 而此后将编译为app

00:11.230 --> 00:13.730
js｡

00:13.730 --> 00:15.130
在这个app ts文件中,

00:15.130 --> 00:17.026
我们将深入了解接口｡

00:17.026 --> 00:19.850
什么是接口？

00:19.850 --> 00:21.640
在最简单的版本中,

00:21.640 --> 00:25.470
接口描述了对象的结构｡

00:25.470 --> 00:28.502
我们可以用它来描述一个物体应该是什么样子｡ 

00:28.502 --> 00:29.856
让我给你们看一个例子｡ 

00:29.856 --> 00:32.990
我们用interface关键字创建一个接口, 它只存在于typescript中,

00:32.990 --> 00:37.510
而不存在于vanilla JavaScript中｡

00:37.510 --> 00:39.600
现在让我们把它命名为人｡ 

00:39.600 --> 00:41.140
同样, 就像在课堂上一样,

00:41.140 --> 00:43.150
我从一个大写的字符开始,

00:43.150 --> 00:46.820
不是必须做的, 而是推荐和约定｡

00:46.820 --> 00:51.160
在这里, 我们可以定义人物对象的外观｡

00:51.160 --> 00:52.480
与类不同的是,

00:52.480 --> 00:54.930
我们不会把它作为蓝图.

00:54.930 --> 00:57.543
我们可以说, 这只是一种自定义类型｡ 

00:58.490 --> 01:04.300
在这里, 你可以说一个人可以有一个字符串类型的名字和一个数字类型的年龄｡

01:04.300 --> 01:05.140
正如您在这里所看到的,

01:05.140 --> 01:13.440
我添加了属性或字段定义, 其中包含了属性的名称和将存储在其中的值的类型｡

01:13.440 --> 01:16.560
我们这里没有具体的价值观｡ 

01:16.560 --> 01:17.730
所以我们没有这个｡ 

01:17.730 --> 01:20.510
如果我们试图在这里赋一个默认值,

01:20.510 --> 01:21.810
我们会得到一个错误,

01:21.810 --> 01:25.290
接口不能有初始化器｡

01:25.290 --> 01:27.540
因此, 我们可以只定义结构,

01:27.540 --> 01:29.610
而不是具体的值｡

01:29.610 --> 01:32.930
我们还可以在这里添加一个方法, 例如greet｡ 

01:32.930 --> 01:34.470
现在就像处理属性一样,

01:34.470 --> 01:41.020
我们在这里没有添加实际的方法, 但是只添加了结构, 可以说是描述｡

01:41.020 --> 01:42.670
它应该是什么样子｡ 

01:42.670 --> 01:46.600
为了定义一个person对象应该具有的方法, 我们添加了方法的名称,

01:46.600 --> 01:50.920
然后是括号, 最后是返回类型｡

01:50.920 --> 01:55.310
例如, 白色, 在括号里你可以有任何你想要的参数｡

01:55.310 --> 01:57.740
就像一个短语应该是一个类型｡ 

01:57.740 --> 02:01.920
同样, 只有参数的名称, 然后是类型｡ 

02:01.920 --> 02:03.610
然后是方法的返回类型｡ 

02:03.610 --> 02:06.450
当然, 您不必添加参数｡ 

02:06.450 --> 02:09.080
我们现在可以用这个人界面做什么？

02:09.080 --> 02:11.360
这背后的想法是什么？

02:11.360 --> 02:14.810
例如, 我们现在可以用它来对一个对象进行类型检查｡

02:14.810 --> 02:18.020
我们可以有一个变量, 用户1,

02:18.020 --> 02:19.130
假设由于某种原因,

02:19.130 --> 02:22.620
我们没有立即初始化｡

02:22.620 --> 02:25.660
我们只想最终在那里存储一个对象,

02:25.660 --> 02:28.490
它有这样的结构.

02:28.490 --> 02:31.830
然后, 我们可以为用户1分配一个类型, 可以是person｡

02:31.830 --> 02:34.604
我们可以将接口用作类型｡ 

02:34.604 --> 02:39.730
现在, 当我给用户1赋值时, 它必须是一个对象,

02:39.730 --> 02:42.780
因为接口是用来定义对象的｡

02:42.780 --> 02:45.560
它必须是一个对象, 它有一个name属性,

02:45.560 --> 02:47.190
必须保存一个字符串,

02:47.190 --> 02:49.850
一个age属性, 必须保存一个数字,

02:49.850 --> 02:53.102
还有一个greet方法, 必须接受一个短语参数,

02:53.102 --> 02:56.920
然后也不返回任何东西｡

02:56.920 --> 02:57.830
在这个对象中,

02:57.830 --> 02:59.360
我们可以添加一个名称｡

02:59.360 --> 03:00.730
比如麦克斯｡ 

03:00.730 --> 03:03.010
现在我们在这里添加具体值,

03:03.010 --> 03:06.310
它必须是上面定义的类型｡

03:06.310 --> 03:08.160
现在用逗号分隔,

03:08.160 --> 03:11.110
这与我们的接口定义不同｡

03:11.110 --> 03:16.110
在这里, 我们用分号分隔键和属性｡ 

03:16.470 --> 03:18.430
但在下面, 当我们创建对象时, 就像在普通JavaScript中一样,

03:18.430 --> 03:21.390
我们使用逗号｡

03:21.390 --> 03:25.570
那么一个时代, 当然也该有迎接的方法了｡ 

03:25.570 --> 03:27.550
正如你们所学到的, greet方法必须是一个带参数的方法,

03:27.550 --> 03:41.134
短语, 必须是字符串, 然后我想控制台日志短语加上一些空格, 再加上这个.

03:41.134 --> 03:41.134
名称｡ 

03:41.210 --> 03:43.930
这可能是greet方法的一个实现｡ 

03:43.930 --> 03:45.670
现在里面是什么已经不重要了｡ 

03:45.670 --> 03:49.270
重要的是我们有一个参数, 它是一个字符串,

03:49.270 --> 03:51.290
我们不返回任何东西｡

03:51.290 --> 03:54.090
现在, 这将是一个有效的用户一对象,

03:54.090 --> 03:58.150
因为它满足我们接口的定义｡

03:58.150 --> 03:59.040
因此, 当然,

03:59.040 --> 04:00.940
我们现在可以打电话给great,

04:00.940 --> 04:06.220
说hi there, I am, 然后我们应该打印姓名｡

04:06.220 --> 04:08.300
如果现在保存, 然后重新加载,

04:08.300 --> 04:10.330
我们会看到嗨, 我是马克斯｡

04:10.330 --> 04:12.840
这是来自我们的问候方法｡ 

04:12.840 --> 04:14.090
这是一个接口｡ 

04:14.090 --> 04:18.280
它允许我们定义对象的结构｡ 

04:18.280 --> 04:24.453
我们可以使用它作为一个类型来对必须具有此结构的对象进行类型检查｡
