WEBVTT

00:02.300 --> 00:04.180
教师：我们从名称库开始,

00:04.180 --> 00:08.460
继续这条路线, 然后将其拆分为更多文件｡

00:08.460 --> 00:11.090
在这里, 对项目状态进行管理｡ 

00:11.090 --> 00:13.610
我们也可以把它放到一个单独的文件中｡ 

00:13.610 --> 00:16.050
因此, 我将获取所有内容, 包括此处创建的项目状态实例,

00:16.050 --> 00:24.250
并将其从应用程序中剪切出来｡

00:24.250 --> 00:24.250
ts文件并创建一个新文件project-state｡

00:24.250 --> 00:27.060
ts.

00:27.060 --> 00:32.070
把它移到那里, 像以前一样, 把它放到一个命名空间里｡

00:32.070 --> 00:35.400
命名空间app, 名字很重要, 它必须是App,

00:35.400 --> 00:38.090
因为这是我们其余代码所在的位置.

00:38.090 --> 00:40.440
把所有内容都放进去, 现在很重要的一点是,

00:40.440 --> 00:46.120
在这个文件之外也导出你需要的内容, 在这个例子中是projectstate类,

00:46.120 --> 00:48.830
我们在应用程序的其余部分需要它,

00:48.830 --> 00:53.880
还有下面的这个常量, 我们也需要导出它｡

00:53.880 --> 00:57.060
这里不需要导出Listener, 也不需要导出那个状态,

00:57.060 --> 00:59.430
因为这两样东西都只在这个文件中使用,

00:59.430 --> 01:02.823
因此, 不需要导出｡

01:03.700 --> 01:09.540
现在, 我们必须导入我们的项目状态｡  ts文件, 因此在应用程序

01:09.540 --> 01:09.540
ts, 是时候进行另一个导入了｡ 

01:09.540 --> 01:13.290
项目就这样破局了｡ 

01:13.290 --> 01:16.620
如果我们保存它, 编译时应该不会出错｡ 

01:16.620 --> 01:19.480
现在, 我将继续, 这里的验证部分也可以放到一个单独的文件中,

01:19.480 --> 01:21.460
所以我将获取所有这些内容, 创建一个新文件,

01:21.460 --> 01:26.890
即验证｡

01:26.890 --> 01:26.890
ts,

01:26.890 --> 01:30.760
在这里添加名称空间App, 在那里放置我的验证逻辑, 当然,

01:30.760 --> 01:36.706
在这里导出validatable接口和所有的devalidate函数｡

01:36.706 --> 01:39.566
然后, 回到应用程序｡  你知道是怎么回事, 我们回到顶部,

01:39.566 --> 01:43.513
添加一个导入来验证｡

01:43.513 --> 01:43.513
ts.

01:45.160 --> 01:49.823
现在, 装饰器也可以被移到一个单独的文件中｡ 

01:49.823 --> 01:54.410
自动绑定仪表板装饰器｡  TS｡ 

01:54.410 --> 01:58.863
同样, 添加名称为App的命名空间, 将函数放入其中并导出,

01:58.863 --> 02:08.430
当然, 使其在此文件之外可用, 然后在app中可用｡

02:08.430 --> 02:08.430
ts,

02:08.430 --> 02:12.633
另一个导入时间, 我在这里导入自动绑定破折号装饰器｡ ts.

02:14.840 --> 02:16.484
现在我们有更多的东西要导出,

02:16.484 --> 02:19.240
我们有我们的组件, 然后所有这些类｡

02:19.240 --> 02:21.205
我希望每个类都在一个单独的文件中,

02:21.205 --> 02:25.440
这样每个文件相对较小, 易于管理｡

02:25.440 --> 02:28.280
现在, 我们遇到了一个新问题｡ 

02:28.280 --> 02:30.385
我们在同一层上添加了越来越多的文件,

02:30.385 --> 02:33.934
现在, 我在这里使用破折号来提供一些关于文件中内容的提示或帮助,

02:33.934 --> 02:42.330
autobind破折号装饰器向我们显示, 那里可能有一个装饰器｡

02:42.330 --> 02:44.300
在这里, 我们可能有接口｡ 

02:44.300 --> 02:46.246
在这里, 模型等等｡ 

02:46.246 --> 02:49.070
现在, 如果你只有三个或四个文件,

02:49.070 --> 02:52.010
这是完全没有问题的, 但如果你有更多的文件,

02:52.010 --> 02:57.430
你最终会得到一个非常难以理解的文件夹结构在这里｡

02:57.430 --> 03:00.056
我想创建子文件夹｡ 

03:00.056 --> 03:02.697
我将添加一个decorators子文件夹, 将我的autobind

03:02.697 --> 03:05.830
decorator移到那里, 并将其重命名为just autobind,

03:05.830 --> 03:09.260
因为它已经在decorators文件夹中了｡

03:09.260 --> 03:11.720
当然有一个装饰师在那里｡ 

03:11.720 --> 03:14.440
然后, 我将添加我的models文件夹,

03:14.440 --> 03:27.263
实际上, 在这里, 我将把拖放接口和项目模型都移到那里, 因为我认为拖放接口最终只是定义了可拖放类的外观｡

03:27.263 --> 03:33.655
就像项目模型定义了项目类或项目对象的外观一样｡

03:33.655 --> 03:38.530
因此, 我将这个拖放操作命名为project,

03:38.530 --> 03:42.610
然后在这里添加util文件夹, 并在其中添加验证,

03:42.610 --> 03:44.860
然后是state文件夹,

03:44.860 --> 03:49.690
并在其中添加项目状态｡

03:49.690 --> 03:52.400
这里我将保留名称project-state,

03:52.400 --> 03:55.300
以避免与此项目混淆｡ ts文件｡ 

03:55.300 --> 03:56.716
从技术上讲, 这不是问题,

03:56.716 --> 03:59.216
但我也想在本课程中说明这一点,

03:59.216 --> 04:02.640
以便您更容易看到我正在处理的文件｡

04:02.640 --> 04:07.320
您完全可以将其重命名为just project｡  如果你想的话就在这里｡

04:07.320 --> 04:09.662
现在, 通过重构和这些子文件夹,

04:09.662 --> 04:14.010
当然我们这里的导入是坏的, 所以我们应该修复它们｡

04:14.010 --> 04:17.366
拖放界面位于models文件夹中,

04:17.366 --> 04:21.216
现在名称仅为拖放｡ ts.

04:21.216 --> 04:28.560
项目模型也可以在models文件夹中找到, 现在只命名为project｡

04:28.560 --> 04:28.560
ts.

04:28.560 --> 04:31.100
项目状态位于state文件夹中,

04:31.100 --> 04:39.860
验证位于util文件夹中, 自动绑定装饰器位于装饰器中, 名称为autobind｡

04:39.860 --> 04:42.547
这样, 如果我们保存它, 它编译没有错误,

04:42.547 --> 04:44.128
现在我们有一个更易管理和可读的文件夹结构,

04:44.128 --> 04:47.290
我会说｡

04:47.290 --> 04:50.500
说完了, 我们继续, 我们还没说完｡ 

04:50.500 --> 04:52.130
这里有我们的组件,

04:52.130 --> 04:54.813
现在我将添加一个components子文件夹,

04:54.813 --> 05:12.110
在其中我希望有我的基本破折号组件ts文件, 然后是我的项目条目ts文件, 我的项目列表ts文件以及项目输入ts文件｡

05:12.110 --> 05:14.430
当然, 您可以随时以不同的方式组织这个,

05:14.430 --> 05:17.631
但我认为这使相关的文件保持在一起｡

05:17.631 --> 05:22.253
因此, 我们可以在这里获取这个抽象组件基类, 将其从应用程序中剪切出来,

05:23.830 --> 05:27.023
然后将其移到基础组件中｡

05:29.610 --> 05:33.180
像这样, 当然, 也像以前一样,

05:33.180 --> 05:37.810
将其添加到名为App的名称空间中｡

05:37.810 --> 05:41.120
然后将其移入此命名空间｡ 

05:41.120 --> 05:43.890
当然, 在导出之前我会对此进行调整,

05:43.890 --> 05:46.171
以便在另一个文件中使用｡

05:46.171 --> 05:54.910
但是, 另一个文件将不是app｡  因为我使用组件的文件或类也将被移动｡

05:54.910 --> 06:00.164
比如这里的项目项类, 我将把它移到项目项中｡

06:00.164 --> 06:00.164
准确地说,

06:00.164 --> 06:06.680
我还将在这里添加一个namespace app, 并将其移到namespace app中,

06:06.680 --> 06:09.060
然后也导出这个类｡

06:09.060 --> 06:11.413
现在, 重要的是, 这依赖于组件, 另一个,

06:12.310 --> 06:14.740
如果我现在保存它, 我们会得到一个错误,

06:14.740 --> 06:16.497
即最终找不到组件, 所以在这里,

06:16.497 --> 06:19.353
我们再次需要添加此导入, 其中我们有引用路径等于,

06:19.353 --> 06:24.772
然后在这里它是基础组件｡

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
此处始终是相对导入, 因此由于这是在同一文件夹中,

06:27.330 --> 06:29.130
我们不必在此处使用components斜杠,

06:29.130 --> 06:44.913
因为我们不需要首先进入components文件夹, 此文件（项目项文件）已在components文件夹中, 因此, 只需使用其名称即可从该文件导入相对基本组件｡

06:46.060 --> 06:48.030
所以现在项目项在这里｡ 

06:48.030 --> 06:51.963
当然, 现在在应用程序中｡  ts, 我们也拿到了项目清单｡ 

06:55.940 --> 07:00.662
让我们抓住它, 把它移到项目列表ts文件的这里和那里到一个命名空间App,

07:00.662 --> 07:14.480
然后也在这里到项目输入让我们抓住它, 从这里剪切它, 从应用程序中的命名空间App｡

07:14.480 --> 07:14.480
ts文件,

07:14.480 --> 07:19.857
并将其移动到项目输入ts文件中, 然后再移动到应用程序名称空间中｡

07:20.750 --> 07:24.350
现在, 和以前一样重要, 在这里导出这个类,

07:24.350 --> 07:27.550
项目项和项目列表, 当然, 都需要导出,

07:27.550 --> 07:34.343
我们得到了一堆错误, 因为当然, 仍然有缺少的导入｡

07:35.200 --> 07:42.934
在应用程序 ts, 我们现在应该导入所有这些组件, 所以这里我们应该导入project-input｡

07:42.934 --> 07:42.934
ts,

07:42.934 --> 07:47.380
项目列表｡ ts, 然后保存此内容｡ 

07:47.380 --> 07:51.087
当然, 现在它仍然崩溃, 因为我们缺少了更多的东西,

07:51.087 --> 07:55.541
在项目输入中, 我们使用的组件就像在项目列表中一样,

07:55.541 --> 07:57.780
所以就像在项目项中一样,

07:57.780 --> 08:05.790
我们需要在项目输入ts文件和项目列表ts文件中添加基本组件的导入｡

08:05.790 --> 08:10.880
这样, 它编译时就没有错误了, 让我们看看它是否还能工作,

08:10.880 --> 08:15.118
如果我们在这里重新加载, 我添加了这个, 它是可拖放的,

08:15.118 --> 08:16.540
所有这些看起来都像它应该的那样工作,

08:16.540 --> 08:22.340
现在我们将它拆分到多个文件中｡

08:22.340 --> 08:23.978
最后我们仍然得到一个文件,

08:23.978 --> 08:28.110
但是当我们处理代码时, 它现在更容易管理了｡

08:28.110 --> 08:30.978
因为我们有更小的重点文件, 在那里我们可以快速找到我们要找的东西,

08:30.978 --> 08:39.363
在那里我们不必滚动通过一个巨大的文件, 以找到我们要在下一步工作的地方｡
