WEBVTT

00:02.200 --> 00:03.210
Instructor: Así que vamos a

00:03.210 --> 00:05.520
empezar con TypeScript y Node. js y para eso, estoy esencialmente

00:05.520 --> 00:08.660
en una nueva carpeta vacía aquí, sólo algunos archivos de configuración

00:08.660 --> 00:12.140
allí, y vamos a empezar muy simple.

00:12.140 --> 00:15.020
Añadamos una aplicación. ts aquí.

00:15.020 --> 00:17.370
Puedes ponerle el nombre que quieras, por supuesto.

00:17.370 --> 00:19.180
Y ahí, vamos a escribir algo de código que

00:19.180 --> 00:22.220
queremos ejecutar con Node. js, pero donde queremos

00:22.220 --> 00:24.980
usar TypeScript.

00:24.980 --> 00:26.350
Un simple script podría ser que

00:26.350 --> 00:28.910
simplemente registráramos algo en la consola.

00:28.910 --> 00:30.450
Esto funciona en el navegador, pero

00:30.450 --> 00:33.350
también funciona con Node. js.

00:33.350 --> 00:35.840
Ahora asegúrate de que tienes Node. js instalado, que definitivamente

00:35.840 --> 00:37.220
deberías tener si has

00:37.220 --> 00:38.740
seguido ese curso porque

00:38.740 --> 00:43.910
lo usamos en NPM con Webpack y con muchas otras herramientas y librerías que ya

00:43.910 --> 00:46.710
instalamos con NPM.

00:46.710 --> 00:48.480
Así que deberías tener Node. js instalado.

00:48.480 --> 00:50.300
Y si lo tienes instalado, podrías

00:50.300 --> 00:52.130
ejecutar este archivo si lo compilas

00:52.130 --> 00:54.110
en JavaScript.

00:54.110 --> 00:57.000
Así que si ejecuto la aplicación tsc. ts, y produzco

00:57.000 --> 01:00.360
mi aplicación. js por lo tanto, puedo

01:00.360 --> 01:02.890
ejecutar esto con node e imprimir

01:02.890 --> 01:04.503
algo aquí.

01:06.550 --> 01:08.990
Ahora cuando borro la aplicación. js y trato de ejecutar

01:08.990 --> 01:11.890
la aplicación. ts con el nodo, verás

01:11.890 --> 01:13.810
algo extraño.

01:13.810 --> 01:15.070
Esto también funciona.

01:15.070 --> 01:18.010
Entonces, ¿si el nodo es capaz de ejecutar TypeScript?

01:18.010 --> 01:20.380
No lo es y eso es muy importante.

01:20.380 --> 01:23.210
Simplemente no le importa la extensión del archivo,

01:23.210 --> 01:25.260
pero lo que encuentra en el archivo lo trata

01:25.260 --> 01:27.420
como un JavaScript normal y esto aquí no utiliza

01:27.420 --> 01:31.370
ninguna característica de TypeScript, así que funciona.

01:31.370 --> 01:34.340
Eso cambia si añadimos un contenido diferente aquí.

01:34.340 --> 01:36.400
Digamos que en lugar de eso tenemos una

01:36.400 --> 01:37.370
variable de edad,

01:37.370 --> 01:40.080
que es un número y entonces aquí pongo esto a 30, y entonces

01:40.080 --> 01:42.250
consuelo. registre la edad aquí.

01:42.250 --> 01:44.840
Esto, por supuesto, es un código TypeScript válido.

01:44.840 --> 01:46.790
Pero si intentamos ejecutar esto con el nodo,

01:46.790 --> 01:48.370
verás que obtenemos un error.

01:48.370 --> 01:52.450
Por lo tanto, node no es capaz de analizar y compilar TypeScript,

01:52.450 --> 01:54.210
simplemente trata cada archivo

01:54.210 --> 01:56.960
que se ejecuta con él como JavaScript.

01:56.960 --> 01:59.030
Y si no estás usando ninguna función de TypeScript

01:59.030 --> 02:01.100
en el archivo, sí que funciona.

02:01.100 --> 02:02.950
Pero si lo haces, no funcionará.

02:02.950 --> 02:04.920
Siempre hay que compilar primero el

02:04.920 --> 02:06.550
archivo a JavaScript para luego

02:06.550 --> 02:08.960
ejecutar el archivo JavaScript, que sólo

02:08.960 --> 02:11.350
tiene código JavaScript válido.

02:11.350 --> 02:13.030
Es muy importante entenderlo.

02:13.030 --> 02:15.890
Node no ejecuta TypeScript.

02:15.890 --> 02:20.710
Ahora puedes instalar un paquete, ts-node, que al final te da ese compilador

02:20.710 --> 02:24.230
de TypeScript, combinado con el ejecutable de node,

02:24.230 --> 02:27.880
se podría decir, para que puedas instalar una herramienta

02:27.880 --> 02:30.320
globalmente, que puedes usar para

02:30.320 --> 02:34.170
ejecutar archivos TypeScript así.

02:34.170 --> 02:35.210
Pero detrás de las escenas

02:35.210 --> 02:37.620
sólo hará la compilación por ti y ejecutará el

02:37.620 --> 02:39.440
código de compilación.

02:39.440 --> 02:42.610
Así que básicamente combina el paso del tsc y del nodo

02:42.610 --> 02:43.890
en un solo paso.

02:43.890 --> 02:46.060
Por lo tanto, es un paquete que se puede utilizar,

02:46.060 --> 02:49.150
pero mientras que esto podría ser bueno para el desarrollo,

02:49.150 --> 02:52.330
para la producción, para realmente servir a sus archivos en algún

02:52.330 --> 02:54.850
servidor web, en algún host web, esto probablemente

02:54.850 --> 02:56.950
no es ideal, porque tener este paso de compilación

02:56.950 --> 02:59.910
adicional cada vez que su código se ejecuta, simplemente

02:59.910 --> 03:02.160
añade un poco de sobrecarga adicional, que

03:02.160 --> 03:06.110
está bien durante el desarrollo, pero que probablemente no quiere cuando su

03:06.110 --> 03:07.970
código está listo para la producción

03:07.970 --> 03:09.890
y que realmente quiere servir a alguna

03:09.890 --> 03:12.090
parte.

03:12.090 --> 03:13.260
Por lo tanto, en este módulo,

03:13.260 --> 03:15.950
no usaremos ts-node y no intentaremos ejecutar ningún

03:15.950 --> 03:18.180
archivo TypeScript con node.

03:18.180 --> 03:21.570
En su lugar, te mostraré una configuración que podemos

03:21.570 --> 03:24.520
utilizar para construir una aplicación web node

03:24.520 --> 03:26.150
express o rest API aquí, con

03:26.150 --> 03:29.130
sólo TypeScript y el compilador de TypeScript y vanilla

03:29.130 --> 03:31.343
node. js.
