WEBVTT

00:02.220 --> 00:03.660
ナレーター：さて､ 始めるにあたって､

00:03.660 --> 00:07.210
このコマンドを再実行する必要がないことを確認したいのですが､

00:07.210 --> 00:12.220
このTFCコマンドは､ 変更を加えるたびにファイルを指定するものです｡

00:12.220 --> 00:22.640
というのも､ 現在､ TypeScriptファイルで何かを変更し､

00:22.670 --> 00:29.410
それを出力ファイルやウェブページに反映させたい場合は､

00:29.410 --> 00:46.200
ファイルを保存し､ コンパイルを再度実行し､ ファイルを再読み込みする必要がある｡

00:46.200 --> 00:48.910
しかし､ それでも､ 自動的にリロードされるとはいえ､

00:48.910 --> 00:52.760
手動でコンパイルコマンドを再実行する必要があるのです｡

00:52.760 --> 00:56.620
そこで､ それを解消するために､ ウォッチモードに入ることができるのです｡

00:56.620 --> 01:04.980
つまり､ TypeScriptにあるファイルを監視するように指示すれば､ そのファイルが変更されるたびにTypeScriptは再コンパイルするのだ｡

01:04.980 --> 01:07.260
そのため､ 同じコマンドを実行しても､

01:07.260 --> 01:10.560
最後に --watch､ または -w

01:10.560 --> 01:14.010
を追加しています｡

01:14.010 --> 01:17.950
そうすると､ そのファイルをウォッチ・モードにして､

01:17.950 --> 01:22.120
何か変更して保存すると､ ディスク上のファイルも技術的に変更され､

01:22.120 --> 01:37.790
自動的にリコンパイルされます｡ もちろん､ これは､ 例えば定数に再代入したり､ 間違った型に再代入するなど､ 許されないことをした場合にも有効です｡

01:37.790 --> 01:39.320
これを実行しようとすると､

01:39.320 --> 01:40.940
もちろんすべて再コンパイルされますが､

01:40.940 --> 01:46.290
手動でコマンドを実行したときと同じように､ コンパイルエラーが下に表示されます｡

01:46.290 --> 01:49.510
だから､ ウォッチモードはすでに大きな進化を遂げているのです｡ 

01:49.510 --> 01:55.180
欠点は､ やはりここでこのファイルを具体的にターゲットにしなければならないことです｡

01:55.180 --> 01:58.980
もちろん､ 現時点ではこのファイルだけで作業していますが､

01:58.980 --> 02:02.973
大きなプロジェクトでは必ずしもそうとは限りません｡
