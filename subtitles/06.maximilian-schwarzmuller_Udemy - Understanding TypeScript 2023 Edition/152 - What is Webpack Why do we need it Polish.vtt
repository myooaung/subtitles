WEBVTT

00:02.050 --> 00:04.090
Instruktor: To jaką mamy wadę?

00:04.090 --> 00:06.030
To jest projekt, nad którym

00:06.030 --> 00:08.020
pracowaliśmy, podzielony

00:08.020 --> 00:12.390
na wiele plików za pomocą tych importów modułów ES6 tutaj.

00:12.390 --> 00:15.620
Teraz, niech actutally zbudowany ten projekt i dla

00:15.620 --> 00:18.400
tego, jak zrobiliśmy to wcześniej, możemy

00:18.400 --> 00:21.930
uruchomić npm-start, aby przywołać lite-server.

00:21.930 --> 00:24.710
I oczywiście, co bardzo ważne w nowej zakładce,

00:24.710 --> 00:26.367
cały run tsc-dash, aby uruchomić

00:27.820 --> 00:31.430
kompilację TypeScript w trybie zegarka.

00:31.430 --> 00:35.590
To daje nam nasz projekt i jeśli teraz otworzymy zakładkę Network

00:35.590 --> 00:39.570
w narzędziach deweloperskich przeglądarki i przeładujemy ten

00:39.570 --> 00:42.360
plik, to zobaczymy wadę, jaką tu mamy, albo problem,

00:42.360 --> 00:44.840
jaki mamy z tym ustawieniem.

00:44.840 --> 00:47.490
Widzimy garść żądań HTTP.

00:47.490 --> 00:49.160
Możesz zignorować te ostatnie, które

00:49.160 --> 00:51.380
pochodzą z naszego serwera deweloperskiego.

00:51.380 --> 00:58.290
Ale to wszystko nasze prośby tutaj do aplikacji. js, project-input.

00:58.290 --> 00:58.290
js, project-list. js, base-component. js

00:58.290 --> 01:00.960
i na tym polega problem.

01:00.960 --> 01:04.610
Zauważysz, że wszystkie te pliki nie są tak duże,

01:04.610 --> 01:06.320
są stosunkowo małe.

01:06.320 --> 01:07.590
Więc to oczywiście

01:07.590 --> 01:11.010
jest w porządku, ale mamy tutaj wiele żądań HTTP.

01:11.010 --> 01:12.600
W czym tkwi problem?

01:12.600 --> 01:15.070
Problem z tym można zobaczyć, jeśli spojrzymy

01:15.070 --> 01:17.810
na ten wodospad tutaj po prawej stronie.

01:17.810 --> 01:20.330
Każde żądanie HTTP, które musi być wykonane,

01:20.330 --> 01:22.470
oczywiście zajmuje trochę czasu.

01:22.470 --> 01:24.480
Pobieranie plików zajmuje trochę czasu,

01:24.480 --> 01:27.760
ale ponieważ nie są one tak duże, to nie jest to problem.

01:27.760 --> 01:31.390
Ale każde żądanie HTTP ma jakby bazowy narzut, bazowy

01:31.390 --> 01:34.540
czas trwania, który zawsze zajmuje.

01:34.540 --> 01:38.570
To małe pudełko, które widzisz przed tymi wykresami.

01:38.570 --> 01:41.250
To prawie czas, jaki wymaga od przeglądarki skonfigurowania

01:41.250 --> 01:43.910
tego żądania i wysłania go.

01:43.910 --> 01:46.280
Tak więc, podczas gdy rzeczywiste pobieranie

01:46.280 --> 01:49.600
pliku może być stosunkowo szybkie, ustawienie żądania,

01:49.600 --> 01:52.860
wykonanie pracy na serwerze, który obsługuje plik i na tym

01:52.860 --> 01:55.310
wszystkim zajmuje trochę czasu.

01:55.310 --> 01:57.890
I teraz tutaj mamy bardzo szybki setup, ponieważ

01:57.890 --> 02:00.310
wszystko dzieje się na naszej maszynie.

02:00.310 --> 02:03.020
Mamy lokalny serwer deweloperski ofterall.

02:03.020 --> 02:06.160
Jeśli wdrożysz to do sieci, posiadanie tak wielu

02:06.160 --> 02:08.690
żądań może naprawdę wprowadzić wiele

02:08.690 --> 02:11.140
opóźnień i spowolnić twój projekt

02:11.140 --> 02:14.760
tylko z powodu samej ilości żądań HTTP.

02:14.760 --> 02:17.280
Więc jeśli możemy znaleźć rozwiązanie,

02:17.280 --> 02:21.370
aby zmniejszyć tę ilość żądań HTTP, byłoby to niesamowite.

02:21.370 --> 02:24.020
I tu właśnie do gry wchodzi webpack.

02:24.020 --> 02:28.190
Możesz przejść do webpacka. słoiki. org, aby dowiedzieć się więcej na ten temat.

02:28.190 --> 02:30.290
W końcu webpack to narzędzie,

02:30.290 --> 02:33.750
które pomoże nam spiąć nasze pliki razem.

02:33.750 --> 02:36.530
I naprawdę mogę polecić ich obszerną i wyczerpującą

02:36.530 --> 02:39.980
dokumentację, którą znajdziecie na ich stronie.

02:39.980 --> 02:42.300
Jeśli chcesz dowiedzieć się wszystkiego o webpacku.

02:42.300 --> 02:44.820
W tym kursie wykorzystamy wybrane funkcje, które

02:44.820 --> 02:46.563
pomagają nam w pracy z TypeScript.

02:47.560 --> 02:49.850
Czym więc dokładnie jest webpack?

02:49.850 --> 02:53.850
To narzędzie do bundlowania i można powiedzieć budowania orkiestracji.

02:53.850 --> 02:56.190
Jest to narzędzie, które pomaga nam zmniejszyć

02:56.190 --> 02:59.560
ilość żądań HTTP poprzez łączenie kodu.

02:59.560 --> 03:03.010
Tak, że piszemy kod podzielony na wiele plików, ale webpack

03:03.010 --> 03:05.390
następnie bierze wszystkie te pliki

03:05.390 --> 03:07.050
i łączy je razem.

03:07.050 --> 03:10.050
A dodatkowo webpack potrafi zrobić coś więcej.

03:10.050 --> 03:13.920
Zoptymalizuje to również nasz kod, a także pozwoli nam dodać więcej

03:13.920 --> 03:17.760
kroków budowania, więcej narzędzi budowania, na przykład, aby

03:17.760 --> 03:20.410
pomóc nam w plikach CSS i tak dalej.

03:20.410 --> 03:23.180
To jednak nie jest to, czemu będziemy się przyglądać w tym

03:23.180 --> 03:26.220
module, ponieważ chcę się skupić na webpacku i TypeScript.

03:26.220 --> 03:28.710
Spójrzmy więc najpierw na naszą normalną konfigurację,

03:28.710 --> 03:30.700
w której nie używamy webpacka.

03:30.700 --> 03:32.800
Tam mamy wiele plików TypeScript, ale

03:32.800 --> 03:34.870
jeśli następnie używamy tych importów,

03:34.870 --> 03:36.920
otrzymujemy wiele żądań HTTP, co nie

03:36.920 --> 03:40.220
jest tak wspaniałe z powodów, o których wspomniałem.

03:40.220 --> 03:43.450
Dodatkowo temat, na który wcześniej nie spojrzałem,

03:43.450 --> 03:47.670
to bardzo prawdopodobne, że mamy też niezoptymalizowany kod, co

03:47.670 --> 03:51.290
oznacza, że nie jest on tak mały, jak to możliwe.

03:51.290 --> 03:53.330
Z pewnością możemy bardziej zoptymalizować

03:53.330 --> 03:55.750
kod, skracając nazwy funkcji i tak dalej.

03:55.750 --> 03:58.690
I oczywiście chcemy mieć narzędzie, które robi to automatycznie,

03:58.690 --> 04:01.030
abyśmy nie musieli zbyt ręcznie pracować z

04:01.030 --> 04:03.000
nieczytelnym kodem.

04:03.000 --> 04:06.080
Chcemy pisać idealnie czytelny kod jako deweloperzy.

04:06.080 --> 04:07.850
Ale byłoby wspaniale, gdybyśmy

04:07.850 --> 04:10.740
mieli narzędzie, które następnie skraca ten kod i naprawdę

04:10.740 --> 04:14.960
czyni go tak małym, jak to możliwe, używa tak krótkich, jak to możliwe nazw

04:14.960 --> 04:17.170
zmiennych i funkcji, tak abyśmy wysyłali

04:17.170 --> 04:19.130
jak najmniej kodu.

04:19.130 --> 04:22.940
Ponieważ mniejsza ilość kodu oznacza, że użytkownicy mogą go szybciej pobrać,

04:22.940 --> 04:25.530
co oznacza, że nasza aplikacja może szybciej uruchomić

04:25.530 --> 04:27.600
się na naszych maszynach.

04:27.600 --> 04:29.440
I dodatkowo, nasza obecna konfiguracja,

04:29.440 --> 04:32.860
mamy ten dodatkowy serwer deweloperski, lite-server, który jest

04:32.860 --> 04:35.150
dodatkowym pakietem zainstalowanym, który

04:35.150 --> 04:36.860
musimy uruchomić.

04:36.860 --> 04:39.320
Nie byłby to mały bonus, miły bonus, gdybyśmy

04:39.320 --> 04:42.280
mieli jedną komendę i która robiłaby wszystko, budowała

04:42.280 --> 04:45.360
nasz projekt, ale też spinała taki serwer, który automatycznie

04:45.360 --> 04:48.170
przeładowuje naszą stronę, gdy tylko zmienimy jakiś

04:48.170 --> 04:50.713
plik w naszym projekcie.

04:51.550 --> 04:54.270
No właśnie, i tu może nam pomóc webpack.

04:54.270 --> 04:57.240
Wiąże nasz kod tak, że mamy mniej importów zamiast

04:57.240 --> 05:00.670
tego mamy kilka, cóż, pakietów kodu, które wysyłamy,

05:00.670 --> 05:05.100
pomaga nam zoptymalizować nasz kod, minify, jak to się nazywa, tak,

05:05.100 --> 05:06.717
że wysyłamy mniej kodu i nasi

05:06.717 --> 05:10.130
użytkownicy mają mniej kodu do pobrania.

05:10.130 --> 05:12.530
I możemy też łatwo dodać więcej kroków budowania, jeśli

05:12.530 --> 05:15.750
chcemy, możemy dodać taki serwer deweloperski, ale możemy też zrobić

05:15.750 --> 05:19.270
wiele innych rzeczy, jeśli naprawdę chcemy, a oficjalne dokumenty webpacka

05:19.270 --> 05:22.160
są miejscem, do którego należy się udać, jeśli chcesz dowiedzieć

05:22.160 --> 05:24.130
się wszystkiego na ten temat.

05:24.130 --> 05:27.880
Mając to na uwadze, zobaczmy przykładową konfigurację w naszym projekcie i dowiedzmy

05:27.880 --> 05:30.433
się, jak możemy wykorzystać tam webpacka.
