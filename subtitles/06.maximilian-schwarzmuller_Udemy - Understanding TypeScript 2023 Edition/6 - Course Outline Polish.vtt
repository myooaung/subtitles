WEBVTT

00:02.130 --> 00:04.900
Instruktor: Ten kurs jest wypełniony treścią.

00:04.900 --> 00:06.940
Jesteśmy już prawie na początku, a

00:06.940 --> 00:09.500
potem zanurzymy się w TypeScript i we wszystkich

00:09.500 --> 00:11.667
jego ekscytujących funkcjach i nauczymy

00:11.667 --> 00:13.850
się ich krok po kroku.

00:13.850 --> 00:16.210
Zaczniemy oczywiście od podstaw TypeScripts.

00:16.210 --> 00:18.800
Rdzeń typów, jak ogólnie działa, niektóre

00:18.800 --> 00:20.880
z nowych funkcji, które dodaje, i

00:20.880 --> 00:22.930
wszystko, co musisz wiedzieć, aby

00:22.930 --> 00:25.320
dobrze zrozumieć TypeScript.

00:25.320 --> 00:27.690
Następnie będziemy już nurkować głębiej

00:27.690 --> 00:29.590
w kompilator TypeScript i jego

00:29.590 --> 00:32.310
konfigurację, ponieważ jest to super ważne,

00:32.310 --> 00:35.480
abyś zrozumiał, co możesz tam skonfigurować i co robią

00:35.480 --> 00:37.450
te wszystkie różne ustawienia,

00:37.450 --> 00:39.120
więc przyjrzymy się temu bliżej

00:39.120 --> 00:40.840
w tym module.

00:40.840 --> 00:43.900
Następnie poznamy funkcje JavaScript nowej generacji

00:43.900 --> 00:45.850
obsługiwane w TypeScript.

00:45.850 --> 00:48.880
Jak działają i jak możesz ich używać w TypeScript.

00:48.880 --> 00:51.500
Będziemy kontynuować z klasami i interfejsami,

00:51.500 --> 00:55.000
super ważną koncepcją częściowo również w vanilla JavaScript

00:55.000 --> 00:57.350
w przypadku klas, ale z interfejsami

00:57.350 --> 00:59.510
mamy również zupełnie nową funkcję

00:59.510 --> 01:01.600
TypeScript i zrozumiesz, czym są,

01:01.600 --> 01:03.550
co robią i dlaczego możemy chcieć

01:03.550 --> 01:06.210
ich używać.

01:06.210 --> 01:08.190
Następnie czas na głębsze zanurzenie.

01:08.190 --> 01:10.490
Przyjrzymy się niektórym zaawansowanym

01:10.490 --> 01:13.280
typom i zaawansowanym funkcjom TypeScriptu,

01:13.280 --> 01:15.040
przenosząc je na wyższy poziom

01:15.040 --> 01:16.640
i opierając się na podstawach,

01:16.640 --> 01:20.110
które poznaliśmy do tej pory.

01:20.110 --> 01:22.630
Również zaawansowaną funkcją, która

01:22.630 --> 01:27.210
zdecydowanie zasługuje na własną sekcję, jest funkcja generics.

01:27.210 --> 01:28.910
Dowiesz się, co to jest i dlaczego

01:28.910 --> 01:31.160
jest naprawdę, naprawdę pomocne

01:31.160 --> 01:32.650
w tym module.

01:32.650 --> 01:34.570
Za nimi podążają dekoratorzy.

01:34.570 --> 01:37.360
Dekoratory są całkiem fajną funkcją dodaną

01:37.360 --> 01:40.550
przez TypeScript i przyjrzymy się bliżej dekoratorom,

01:40.550 --> 01:43.810
a także zbudujemy kilka naprawdę użytecznych

01:43.810 --> 01:46.200
dekoratorów w tym module, a następnie

01:46.200 --> 01:50.100
nauczymy się wiele o TypeScript.

01:50.100 --> 01:52.660
Teraz kurs jest tak zorganizowany,

01:52.660 --> 01:56.460
że wszystkie te poszczególne funkcje pokazuję w stosunkowo

01:56.460 --> 01:59.040
małych, prostych demach.

01:59.040 --> 02:01.730
Teraz, aby dać ci większy obraz i zobaczyć,

02:01.730 --> 02:04.640
jak można zastosować wszystkie te funkcje w

02:04.640 --> 02:08.140
prawdziwym projekcie, zbudujemy właśnie taki.

02:08.140 --> 02:10.400
Będziemy mieli cały moduł, w którym zbudujemy

02:10.400 --> 02:14.420
od podstaw cały projekt w całości z TypeScriptem, dzięki czemu zobaczysz

02:14.420 --> 02:17.720
wiele z tych funkcji, większość z tych funkcji, o których

02:17.720 --> 02:20.090
dowiedziałeś się do tego momentu, w akcji

02:20.090 --> 02:23.680
i zobaczysz, jak one ze sobą współpracują i dlaczego upraszczają

02:23.680 --> 02:28.160
proces budowania takiego projektu.

02:28.160 --> 02:29.940
Po zakończeniu budowy tego projektu

02:29.940 --> 02:31.770
zidentyfikujemy nowy problem i

02:31.770 --> 02:34.420
nauczymy się go rozwiązywać poprzez pracę z przestrzeniami

02:34.420 --> 02:36.450
nazw i modułami, które pomogą nam uczynić

02:36.450 --> 02:38.100
nasz kod bardziej zarządzalnym

02:38.100 --> 02:40.570
i czytelnym.

02:40.570 --> 02:42.600
Opierając się na tym, będziemy również

02:42.600 --> 02:44.350
odkrywać Webpack z TypeScript.

02:44.350 --> 02:47.690
Webpack jest narzędziem do budowania, którego używamy w nowoczesnym tworzeniu

02:47.690 --> 02:49.530
stron internetowych typu front-end i możesz

02:49.530 --> 02:52.970
go użyć w połączeniu z TypeScript, aby uzyskać lepszą konfigurację projektu,

02:52.970 --> 02:55.520
która po prostu ułatwia pewne rzeczy i pozwala uzyskać

02:55.520 --> 02:57.990
najlepsze ze światów przeszkód.

02:57.990 --> 02:59.850
Wspaniałe doświadczenie w rozwoju,

02:59.850 --> 03:02.170
a także kod, który działa naprawdę dobrze dla

03:02.170 --> 03:04.120
twoich użytkowników końcowych.

03:04.120 --> 03:06.320
Kiedy już to zrobimy mamy bardzo solidny

03:06.320 --> 03:08.710
obraz TypeScript i tego jak pracować z

03:08.710 --> 03:10.180
nim w projektach.

03:10.180 --> 03:13.250
W wielu rzeczywistych projektach będziesz potrzebował

03:13.250 --> 03:15.183
bibliotek innych firm, więc przyjrzymy

03:15.183 --> 03:16.820
się temu bliżej, ponieważ istnieją

03:16.820 --> 03:20.250
pewne biblioteki innych firm, które naprawdę przyjęły

03:20.250 --> 03:22.280
TypeScript i mają wbudowaną obsługę

03:22.280 --> 03:26.600
TypeScript, ale jest też wiele bibliotek, które tego nie robią i przyjrzymy

03:26.600 --> 03:29.030
się, jak możemy pracować z oboma typami bibliotek

03:29.030 --> 03:34.520
w świetny sposób w projektach TypeScript.

03:34.520 --> 03:36.630
Cóż, a potem są pewne specyficzne scenariusze,

03:36.630 --> 03:39.620
które zasługują na własne moduły.

03:39.620 --> 03:41.570
Będziemy mieli cały moduł o

03:41.570 --> 03:44.320
React z TypeScript, jak można zbudować

03:44.320 --> 03:47.540
całą aplikację React tylko z TypeScript, a także

03:47.540 --> 03:49.452
cały moduł o NodeJS i express

03:49.452 --> 03:53.260
end type script, abyś miał również świetne przykłady

03:53.260 --> 03:55.390
dla tych bardzo popularnych i

03:55.390 --> 03:58.910
specyficznych przypadków użycia TypeScript, gdzie

03:58.910 --> 04:01.270
możesz nagle stworzyć aplikacje

04:01.270 --> 04:03.630
React lub Node w zupełnie nowy sposób

04:03.630 --> 04:06.760
z zupełnie nowym językiem.

04:06.760 --> 04:09.260
Więc wiele ciekawych treści w kursie.

04:09.260 --> 04:10.970
Nie traćmy czasu.

04:10.970 --> 04:12.720
Zobaczmy, jak można uzyskać jak najwięcej

04:12.720 --> 04:15.263
z kursu, a następnie niech nurkować w.
