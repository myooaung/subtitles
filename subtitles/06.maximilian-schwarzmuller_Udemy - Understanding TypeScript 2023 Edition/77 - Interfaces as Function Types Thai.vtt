WEBVTT

00:02.220 --> 00:03.053
ผู้สอน: ตอนนี้

00:03.053 --> 00:07.114
ฉันพูดถึงว่าอินเตอร์เฟสใช้เพื่อกำหนดโครงสร้างของวัตถุ

00:07.114 --> 00:11.750
ตอนนี้ อินเทอร์เฟซยังสามารถใช้เพื่อกำหนดโครงสร้างของฟังก์ชันได้อีกด้วย

00:11.750 --> 00:15.578
โดยพื้นฐานแล้วเป็นการแทนที่ประเภทฟังก์ชันที่คุณได้เรียนรู้ไปแล้ว

00:15.578 --> 00:17.890
เช่นเดียวกับการทบทวนอย่างรวดเร็ว

00:17.890 --> 00:20.090
เราสามารถกำหนดประเภทของฟังก์ชันได้

00:20.090 --> 00:23.305
เช่น กำหนดประเภทเองด้วยคีย์เวิร์ดประเภท

00:23.305 --> 00:29.350
AddFn สำหรับเพิ่มฟังก์ชันซึ่งสามารถเก็บคำจำกัดความของฟังก์ชันเช่นนี้ได้

00:29.350 --> 00:35.970
ควรส่งคืนตัวเลขและควรรับสองอาร์กิวเมนต์โดยที่แต่ละอาร์กิวเมนต์เป็นประเภทตัวเลขด้วย

00:35.970 --> 00:39.310
ตอนนี้ เราสามารถสร้างฟังก์ชันใหม่ add here

00:39.310 --> 00:42.860
ซึ่งเป็นประเภท AddFn และเมื่อเราไม่ได้เริ่มต้น

00:42.860 --> 00:45.040
แต่กำหนดฟังก์ชันในภายหลัง

00:45.040 --> 00:49.470
แน่นอนว่าเราต้องแน่ใจว่าฟังก์ชันนี้รับอาร์กิวเมนต์

00:49.470 --> 00:51.300
2 ตัวซึ่งเป็นประเภทตัวเลขและ

00:51.300 --> 00:55.170
ในนั้นเราจะส่งกลับตัวเลขด้วย

00:55.170 --> 00:56.360
นี่คือสิ่งที่เราสามารถทำได้

00:56.360 --> 00:57.843
นี่คือสิ่งที่คุณได้เรียนรู้ไปแล้ว

00:57.843 --> 01:03.077
ตอนนี้ คุณยังสามารถใช้อินเทอร์เฟซเป็นทางเลือกสำหรับประเภทแบบกำหนดเองนี้

01:03.077 --> 01:06.860
อินเตอร์เฟสมีไว้เพื่อกำหนดโครงสร้างของออบเจกต์ตามที่ฉันสอน

01:06.860 --> 01:12.720
แต่ท้ายที่สุดแล้ว ฟังก์ชันก็เป็นเพียงอ็อบเจกต์ ดังนั้นนี่จึงเป็นข้อยกเว้นเล็กน้อย

01:12.720 --> 01:15.350
คุณสามารถสร้างประเภทฟังก์ชันด้วยอินเทอร์เฟซ

01:15.350 --> 01:20.930
เพื่อที่คุณจะสร้างอินเทอร์เฟซ ให้ตั้งชื่อว่า AddFn เพื่อให้ยังคงชื่อนั้นไว้ที่นี่

01:20.930 --> 01:23.720
และตอนนี้ คุณกำหนดบิตของฟังก์ชันโดยเพิ่มวงเล็บกับอาร์กิวเมนต์ของคุณ

01:23.720 --> 01:36.810
ตัวอย่างเช่น a: number, B:number แล้วตามด้วยโคลอน ไม่ใช่ลูกศร แต่เป็นโคลอนตรงนี้ที่มีประเภทการส่งคืน

01:36.810 --> 01:41.630
ในตอนท้าย เหมือนกับที่คุณจะกำหนดเมธอดเหมือนกับที่เราทำที่นี่ด้วยคำทักทาย

01:41.630 --> 01:45.710
ยกเว้นว่าตอนนี้เราไม่ได้เพิ่มชื่อเมธอด

01:45.710 --> 01:47.880
ดังนั้นเราจึงมีฟังก์ชันนิรนาม

01:47.880 --> 01:49.300
หากคุณต้องการเรียกมันแบบนี้ในอินเทอร์เฟซ

01:49.300 --> 01:55.250
AddFn และ TypeScript เข้าใจไวยากรณ์พิเศษของฟังก์ชันนิรนามนี้ในอินเทอร์เฟซของคุณ

01:55.250 --> 02:02.070
และเข้าใจว่าคุณต้องการใช้อินเทอร์เฟซนี้เป็นประเภทฟังก์ชัน และนี่คือลักษณะของฟังก์ชันของคุณควรมีลักษณะ

02:02.070 --> 02:05.360
ชอบ.

02:05.360 --> 02:07.650
ตอนนี้เราสามารถใช้ AddFn ที่นี่ได้

02:07.650 --> 02:13.786
และถ้าฉันพยายามยอมรับสตริงที่นี่ เราจะได้รับข้อผิดพลาดเพราะสิ่งนี้ไม่สามารถกำหนดได้

02:13.786 --> 02:17.060
เราจำเป็นต้องมีตัวเลขแทนสตริง

02:17.060 --> 02:19.670
ดังนั้นจึงเป็นเพียงทางเลือกสำหรับประเภทที่กำหนดเองนี้

02:19.670 --> 02:23.010
แน่นอน ในที่นี้ผมขอเถียงว่าการใช้ custom type นั้นอาจจะธรรมดากว่าเล็กน้อย

02:23.010 --> 02:26.470
แต่ก็สั้นกว่าเล็กน้อย แต่ก็เป็นไวยากรณ์ทางเลือกที่ดีที่ควรระวัง

02:26.470 --> 02:35.265
โดยเฉพาะอย่างยิ่งถ้าคุณพบสิ่งนี้ในบางโปรเจกต์ และคุณทำอย่างอื่นหาย นี่หมายถึงวิธีการนิรนามที่แปลกประหลาดนี้

02:35.265 --> 02:38.993
ในที่สุดมันก็เป็นแค่ประเภทฟังก์ชั่นที่กำหนดเอง
