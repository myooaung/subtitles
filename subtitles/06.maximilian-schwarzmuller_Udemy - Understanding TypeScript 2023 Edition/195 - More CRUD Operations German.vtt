WEBVTT

00:02.150 --> 00:03.930
Kursleiter: Wir haben also unsere erste POST-Anfrage

00:03.930 --> 00:06.120
hinzugefügt, wir sind in der Lage, ein TODO zu erstellen.

00:06.120 --> 00:07.250
Jetzt haben wir mehr Routen.

00:07.250 --> 00:10.170
Wir haben auch eine Route, die alle von uns erstellten TODOS bedient.

00:10.170 --> 00:11.750
Bitte beachten Sie, dass Ihre TODOS jedes

00:11.750 --> 00:14.160
Mal zurückgesetzt werden, wenn Sie Ihren Code ändern und

00:14.160 --> 00:16.630
speichern, weil dadurch Ihr Server neu gestartet wird und

00:16.630 --> 00:18.920
alles verloren geht, was im Speicher gespeichert war,

00:18.920 --> 00:21.330
und wir verwalten unsere TODOS nur im Speicher.

00:21.330 --> 00:23.560
Das ist einfach etwas, das wir hier in der Dummy-App haben.

00:23.560 --> 00:24.930
In einer echten App würden Sie das

00:24.930 --> 00:28.200
natürlich in einer echten Datenbank speichern, es von dort abrufen und so weiter,

00:28.200 --> 00:30.280
und deshalb würde es überleben.

00:30.280 --> 00:35.060
Nichtsdestotrotz können wir hier eine neue Funktion erstellen, getTodos,

00:35.060 --> 00:38.030
und dies wird hier ein RequestHandler sein, so dass

00:38.030 --> 00:39.740
Sie die Typen aller Parameter

00:39.740 --> 00:42.330
nicht einzeln festlegen müssen.

00:42.330 --> 00:46.120
Und dann in dort, ich möchte einfach eine Antwort zurückgeben, wo ich

00:46.120 --> 00:49.560
einige JSON-Daten zurückgeben, wo ich meine todos haben und dort,

00:49.560 --> 00:52.420
ich möchte nur meine TODOs Array zu erreichen und senden

00:52.420 --> 00:54.330
Sie diese zurück an den Client, und

00:54.330 --> 00:56.530
das kann bereits alles sein.

00:56.530 --> 00:57.810
Natürlich kann man das noch

00:57.810 --> 00:59.640
optimieren, vielleicht will man eine

00:59.640 --> 01:03.120
andere Logik haben, vielleicht will man die TODOS zuerst sortieren oder

01:03.120 --> 01:06.690
so etwas, aber das ist in seiner einfachsten Form schon alles, was wir hier

01:06.690 --> 01:10.530
brauchen, es gibt unsere TODOS zurück, also eine sehr einfache Funktion.

01:10.530 --> 01:13.240
In den TODOS-Routen müssen wir dies nun nur noch verbinden.

01:13.240 --> 01:17.680
Importieren wir also auch getTodos aus unserem Controller

01:17.680 --> 01:20.640
und verbinden es hier mit dieser Route.

01:20.640 --> 01:23.430
Und wenn wir das jetzt speichern, können wir

01:23.430 --> 01:25.250
es schon in Aktion sehen.

01:25.250 --> 01:29.860
Wenn wir zurückgehen und eine neue Anfrage, eine GET-Anfrage,

01:29.860 --> 01:34.860
an http://localhost:3000/todos/ erstellen und diese senden,

01:39.400 --> 01:41.410
erhalten wir ein leeres Array

01:41.410 --> 01:44.400
zurück, warum ist das so?

01:44.400 --> 01:46.750
Nun, ich habe gesagt, dass die TODOS immer dann gelöscht werden,

01:46.750 --> 01:48.010
wenn wir den Code geändert haben

01:48.010 --> 01:49.750
und der Server deshalb neu gestartet wird,

01:49.750 --> 01:51.470
also sollten wir jetzt ein neues TODO erstellen,

01:51.470 --> 01:54.110
ohne den Server zwischendurch neu zu starten.

01:54.110 --> 01:57.360
Wenn wir dieses TODO erstellt haben und nun unsere

01:57.360 --> 02:01.770
TODOS abrufen, sehen wir auch hier das erstellte TODO mit der ID, der

02:01.770 --> 02:04.380
Seriennummer 9811 und so weiter.

02:04.380 --> 02:05.960
Das funktioniert also bereits.

02:05.960 --> 02:08.980
Wenn wir schon dabei sind, sollten wir uns auch mit Patch und Delete beschäftigen,

02:08.980 --> 02:10.590
und natürlich können Sie sich auch selbst

02:10.590 --> 02:12.680
eine Logik einfallen lassen.

02:12.680 --> 02:14.970
Letztendlich haben Sie jetzt alle Bausteine, die

02:14.970 --> 02:16.130
Sie dafür brauchen.

02:16.130 --> 02:18.480
Natürlich werden wir das jetzt auch gemeinsam tun.

02:19.390 --> 02:21.570
Fügen wir also jetzt in der Patch-Anforderung

02:21.570 --> 02:24.350
eine neue Controller-Funktion hinzu.

02:24.350 --> 02:29.350
export const updateTodo, die vom Typ RequestHandler ist und eine Funktion

02:30.660 --> 02:34.680
in diesem Format enthalten sollte, die wir bereits kennen.

02:34.680 --> 02:37.310
Ziel ist es, Daten über den neuen TODO aus

02:37.310 --> 02:40.630
der eingehenden Anfrage zu extrahieren und den

02:40.630 --> 02:44.140
TODO mit diesen neuen Daten zu aktualisieren.

02:44.140 --> 02:47.240
Bitte beachten Sie, dass wir hier ein dynamisches Segment

02:47.240 --> 02:48.900
als Teil unserer Route haben.

02:48.900 --> 02:51.140
Wir haben dieses ID-Segment.

02:51.140 --> 02:54.610
Das ist also etwas, das wir aus der URL extrahieren können, ein

02:54.610 --> 02:58.750
konkreter Wert für dieses dynamische Segment kann extrahiert werden.

02:58.750 --> 03:02.147
Bei unserer eingehenden Anfrage können Sie also die todoId

03:03.172 --> 03:07.987
aus unseren Anfrageparametern abrufen. id,. id, denn das ist der Name, den ich hier gewählt habe.

03:07.987 --> 03:11.660
Wenn Sie hier einen anderen Namen gewählt haben, müssen Sie auch dort einen

03:11.660 --> 03:13.060
anderen Namen verwenden.

03:13.060 --> 03:15.810
Wir bekommen hier keine Arten von Unterstützung, richtig?

03:15.810 --> 03:18.410
Params ist vom Typ any.

03:18.410 --> 03:20.450
Da die Typen diese Zeichenkette analysieren

03:20.450 --> 03:23.400
und verstehen können, was darin enthalten ist.

03:23.400 --> 03:25.460
Um also eine bessere Unterstützung zu

03:25.460 --> 03:28.920
erhalten, können wir nutzen, dass der RequestHandler hier ein generischer

03:28.920 --> 03:32.880
Typ ist, und wir können spitze Klammern hinzufügen und TypeScript im Grunde

03:32.880 --> 03:35.880
sagen, welche Parameter es haben wird.

03:35.880 --> 03:37.800
Wir setzen dies einfach auf ein Objekt,

03:37.800 --> 03:39.300
und schon haben wir eine Key-Value-Map

03:39.300 --> 03:42.180
aller unserer Eltern, die wir in der URL haben.

03:42.180 --> 03:43.830
So haben wir zum Beispiel einen ID-Parameter,

03:43.830 --> 03:46.730
der am Ende eine Zeichenkette enthält.

03:46.730 --> 03:48.610
Das ist etwas, das wir hier hinzufügen können, und jetzt

03:48.610 --> 03:50.230
werden Sie sehen, dass wir Autovervollständigung

03:50.230 --> 03:52.560
bekommen und TypeScript weiß, dass dies ein String sein wird.

03:52.560 --> 03:55.520
Es ist also besser, diesen generischen Typ zu verwenden.

03:55.520 --> 03:58.640
Nun, da wir die ID haben, brauchen wir auch etwas aus dem

03:58.640 --> 04:01.050
Request Body, um genau zu sein, brauchen

04:01.050 --> 04:03.560
wir den neuen Text aus dem Request Body.

04:03.560 --> 04:08.130
Der aktualisierte Text kann also aus dem Anforderungsrumpf abgerufen werden,

04:08.130 --> 04:11.700
und auch hier verwenden wir das Typecasting, um klarzustellen,

04:11.700 --> 04:14.100
dass es eine Texteigenschaft im Rumpf geben

04:14.100 --> 04:16.910
wird und dass diese vom Typ String ist.

04:16.910 --> 04:19.750
Danach können wir den Text abrufen.

04:19.750 --> 04:22.373
Und jetzt können wir das TODO in unserem TODOS-Array dort oben aktualisieren.

04:23.830 --> 04:27.720
Dazu suchen wir den Index des TODOs, den wir aktualisieren

04:27.720 --> 04:28.710
wollen.

04:28.710 --> 04:30.808
todoIndex, indem wir auf TODOS zugreifen,

04:30.808 --> 04:33.760
und mit findIndex können wir eine Logik für jedes Element

04:33.760 --> 04:36.090
im TODOS-Array ausführen.

04:36.090 --> 04:38.060
Und dort schauen wir uns jedes todo an und

04:38.060 --> 04:40.010
wenn todo id gleich der todoId ist, die

04:40.010 --> 04:44.300
wir hier haben, wissen wir, dass das das TODO ist, das wir aktualisieren wollen.

04:44.300 --> 04:47.140
Wenn das aus irgendeinem Grund minus eins sein sollte,

04:47.140 --> 04:50.550
bedeutet das, dass wir das TODO nicht gefunden haben. Wenn das

04:50.550 --> 04:52.610
also kleiner als null ist, wissen wir,

04:52.610 --> 04:56.960
dass etwas schief gelaufen ist, und in diesem Fall werde ich einen neuen Fehler

04:56.960 --> 04:59.630
ausgeben, der besagt: Could not find todo!

04:59.630 --> 05:03.633
Und das sollte dann unsere Standard-Fehlerbehandlung Middleware

05:04.760 --> 05:06.130
hier auslösen.

05:06.130 --> 05:08.633
Wenn wir nun diese if-Prüfung überstehen, haben

05:09.870 --> 05:12.450
wir das TODO gefunden und können das TODO an diesem

05:12.450 --> 05:15.040
Index in unserem TODOS-Array einfach aktualisieren,

05:15.040 --> 05:18.960
um ein neues TODO zu werden, wobei wir die alte ID behalten.

05:18.960 --> 05:23.270
Wo wir also auf TODOS, todoIndex. id, wir greifen also auf die alte ID zu und speichern sie,

05:23.270 --> 05:27.030
aber den Text, den ich hier

05:27.030 --> 05:29.490
einstelle, den weisen wir natürlich

05:29.490 --> 05:31.713
nicht so zu.

05:32.870 --> 05:34.570
Aber der Text, den wir hier eingestellt haben, ist jetzt der updatedText.

05:34.570 --> 05:38.750
Dies ersetzt das TODO hier, und danach können wir

05:38.750 --> 05:41.340
eine Antwort zurücksenden, zum

05:41.340 --> 05:45.280
Beispiel mit der Meldung Aktualisiert.

05:45.280 --> 05:47.053
Und wo wir dann auch die updatedTodo

05:47.990 --> 05:51.470
an die ausgehende Antwort anhängen, und setzen Sie diese gleich,

05:51.470 --> 05:55.090
gut, TODOS todoIndex, die jetzt den neuen Wert enthält.

05:55.090 --> 05:59.090
Dies ist etwas, das wir hier in unserer Aktualisierungslogik aufrufen,

05:59.090 --> 06:02.430
natürlich etwas Dummy-Code, weil wir immer noch mit diesem

06:02.430 --> 06:03.960
TODOS-Array im Speicher arbeiten,

06:03.960 --> 06:07.150
aber es zeigt, wie wir TypeScript hier verwenden, und das

06:07.150 --> 06:09.060
ist die Hauptsache.

06:09.060 --> 06:11.100
Probieren wir also jetzt diese Aktualisierungsfunktion aus.

06:11.100 --> 06:13.620
Dafür können wir zurück zu Postman gehen, und am

06:13.620 --> 06:16.260
Ende möchte ich jetzt eine PATCH-Anfrage senden,

06:16.260 --> 06:19.960
denn in den Routen warten wir auf diese Patch-Anfrage an diese Route.

06:19.960 --> 06:23.460
Und wenn wir schon dabei sind, sollten wir vielleicht auch diese Route

06:23.460 --> 06:24.293
zuerst mit dieser

06:24.293 --> 06:26.490
Controller-Funktion verbinden.

06:26.490 --> 06:28.850
Gehen wir also zur Routendatei und

06:28.850 --> 06:33.420
importieren updateTodo und stellen diese Verbindung hier her.

06:33.420 --> 06:35.590
Danach können wir fortfahren und diesen Antrag abschicken.

06:35.590 --> 06:38.570
Also zurück zu Postman, PATCH ist das, was

06:38.570 --> 06:41.890
wir senden wollen, und dann ist es http://localhost:3000/todos

06:41.890 --> 06:46.320
und jetzt die Idee des TODO, das wir als Teil der URL aktualisieren

06:46.320 --> 06:49.430
wollen.

06:49.430 --> 06:50.573
Da wir nun etwas gespeichert haben, da wir

06:51.500 --> 06:54.970
einige Änderungen gespeichert haben, wurde unser Server neu gestartet, so dass alle TODOS sowieso verloren gehen.

06:54.970 --> 06:58.890
Senden wir also zunächst die POST-Anfrage erneut, um einen

06:58.890 --> 07:01.150
neuen TODO zu erstellen.

07:01.150 --> 07:02.450
Und dann haben wir hier die ID dieses TODOs.

07:02.450 --> 07:05.170
Jetzt können wir diese ID hier zu dieser URL hinzufügen.

07:05.170 --> 07:08.800
Außerdem füge ich einen Body hinzu, der vom Typ JSON sein sollte, in dem wir die

07:08.800 --> 07:11.780
neuen Daten festlegen, die wir an den Server senden wollen.

07:11.780 --> 07:15.560
Denken Sie daran, dass ich in unserem Update-Controller

07:15.560 --> 07:18.570
nach einem Feld mit dem Namen text im eingehenden

07:18.570 --> 07:20.970
Request-Body suche.

07:20.970 --> 07:22.900
Wir sollten dies also wieder in den JSON-Daten

07:22.900 --> 07:24.580
angeben, die wir senden.

07:24.580 --> 07:26.690
Wenn Sie den Kurs in einem Monat abschließen,

07:26.690 --> 07:29.440
könnte dies unser neuer Text sein.

07:29.440 --> 07:31.520
Wenn wir diese nun senden, sehen wir, dass sie aktualisiert wurde.

07:31.520 --> 07:35.210
Und wenn ich jetzt alle TODOS abrufe, sehen wir auch, dass es

07:35.210 --> 07:37.180
immer noch nur einen TODO gibt, aber

07:37.180 --> 07:39.430
der Text ist einfach geändert.

07:39.430 --> 07:41.623
Jetzt funktioniert das, und wir können auch den TODO aktualisieren.

07:42.950 --> 07:46.470
Prüfen wir auch, was passiert, wenn ich eine ID habe, die nicht existiert,

07:46.470 --> 07:48.780
indem ich zum Beispiel die letzte Ziffer hier

07:48.780 --> 07:50.620
lösche, dann bekomme ich "Could not

07:50.620 --> 07:53.430
find todo" in meiner Fehlerantwort vom Typ 500.

07:53.430 --> 07:57.670
Auch hier sieht es also gut aus.

07:57.670 --> 07:59.660
Als letzten Schritt fügen wir eine Funktion zum Löschen eines TODOs hinzu.

07:59.660 --> 08:03.800
Im Ordner controllers exportiere ich also eine Konstante namens

08:03.800 --> 08:07.210
deleteTodo, die vom Typ RequestHandler ist.

08:07.210 --> 08:11.460
Und wieder bekommen wir unsere Anfrage, unsere Antwort und

08:11.460 --> 08:14.040
dann die nächste Funktion hier.

08:14.040 --> 08:17.320
Und hier möchte ich nun das TODO finden

08:17.320 --> 08:20.270
und es einfach entfernen.

08:20.270 --> 08:21.543
Dazu können wir diesen Code kopieren,

08:22.380 --> 08:25.090
in dem wir die ID des TODO und dann den Index erhalten.

08:25.090 --> 08:29.360
Entfernen Sie einfach die Zeile, in der wir den aktualisierten Text extrahieren,

08:29.360 --> 08:32.210
denn bei einer DELETE-Anforderung gibt es keinen Anforderungskörper,

08:32.210 --> 08:35.660
aber wir brauchen die ID des TODO, die Teil unserer Route der URL

08:35.660 --> 08:37.400
ist.

08:37.400 --> 08:40.340
Und dann finden wir den Index, und sobald wir den Index haben,

08:40.340 --> 08:43.530
können wir zu den TODOs gehen, die Splice-Methode aufrufen

08:43.530 --> 08:47.350
und das Todo mit dem TodoIndex entfernen, und nur dieses Todo.

08:47.350 --> 08:51.620
Und danach können wir eine Antwort zurücksenden, in der

08:51.620 --> 08:54.040
wir sagen: "Todo gelöscht! einfach so.

08:54.040 --> 08:58.490
Dies könnte unsere Logik für die Löschung sein.

08:58.490 --> 08:59.380
Jetzt ist es an der Zeit,

08:59.380 --> 09:01.760
dies zu verbinden, also importieren wir im Ordner routes

09:01.760 --> 09:04.560
deleteTodo aus controllers TODOs und verbinden es dort unten.

09:04.560 --> 09:07.440
Wenn wir dies nun speichern, müssen wir wieder ein

09:08.340 --> 09:09.963
TODO hinzufügen, da alle TODOs

09:11.120 --> 09:14.370
bei jedem Server-Neustart gelöscht werden.

09:14.370 --> 09:16.720
Kopieren Sie diese ID.

09:16.720 --> 09:20.550
Und nun senden wir die DELETE-Anfrage.

09:20.550 --> 09:22.680
Hier also eine neue DELETE-Anfrage an

09:22.680 --> 09:24.980
http:/localhost:3000/todos/this id.

09:24.980 --> 09:27.160
Es muss kein Körper hinzugefügt werden.

09:27.160 --> 09:32.160
Klicken Sie auf Senden und es funktioniert.

09:32.800 --> 09:34.880
Wenn ich sie erneut sende, erhalten wir die Fehlermeldung, dass

09:34.880 --> 09:37.180
sie nicht gefunden wurde, weil wir sie gerade gelöscht haben.

09:37.180 --> 09:39.950
Und wenn wir alle TODOS bekommen, sollte das ein

09:39.950 --> 09:41.570
leeres Array sein und dies.

09:41.570 --> 09:42.723
Das funktioniert jetzt,

09:42.723 --> 09:45.550
und das ist im Grunde eine CRUD-Funktionalität, die mit TypeScript

09:45.550 --> 09:46.750
hier in dieser einfachen

09:46.750 --> 09:49.550
Node- und Express-App hinzugefügt wurde.

09:49.550 --> 09:50.990
Das ist natürlich eine ziemlich triviale Anwendung,

09:50.990 --> 09:52.940
aber sie zeigt uns bereits, wie TypeScript eingesetzt wird.

09:52.940 --> 09:56.060
Es zeigt uns, dass wir Code schreiben, der Ihnen bekannt vorkommen sollte,

09:56.060 --> 09:58.870
wenn Sie sich durch den Rest dieses Kurses arbeiten, und dass

09:58.870 --> 10:00.480
wir alle Funktionen verwenden, die

10:00.480 --> 10:02.000
Sie dort gelernt haben.

10:02.000 --> 10:04.750
Und genau wie im Abschnitt React ist das alles, was wichtig ist.

10:04.750 --> 10:07.610
Sie können alles, was Sie über TypeScript gelernt

10:07.610 --> 10:10.110
haben, auch hier verwenden, da es am Ende

10:10.110 --> 10:11.520
zu regulärem JavaScript-Code

10:11.520 --> 10:13.340
kompiliert wird, den wir dann

10:13.340 --> 10:14.990
ausliefern.
