WEBVTT

00:02.270 --> 00:04.390
Instructor: Bien, basta de hablar de funciones genéricas.

00:04.390 --> 00:06.490
Los utilizaremos siempre a lo largo de este curso,

00:06.490 --> 00:08.150
todo el proyecto del curso.

00:08.150 --> 00:10.390
Así que esto debería ser cada vez más claro, cuanto

00:10.390 --> 00:11.890
más trabajemos con él.

00:11.890 --> 00:14.823
Espero que la idea general ya esté clara.

00:15.660 --> 00:18.490
Sin embargo, las funciones genéricas no son todo lo que podemos

00:18.490 --> 00:20.550
utilizar, también tenemos clases genéricas

00:20.550 --> 00:21.560
y, por lo tanto, vamos

00:21.560 --> 00:23.740
a ver cómo crearíamos una clase genérica de este

00:23.740 --> 00:25.170
tipo y por qué podríamos hacerlo,

00:25.170 --> 00:27.760
por qué podría ser útil para nosotros.

00:27.760 --> 00:31.950
Podríamos crear una clase de almacenamiento aquí.

00:31.950 --> 00:36.060
Una clase digamos, que tiene una propiedad privada data.

00:36.060 --> 00:38.850
Que al final contendrá un array de datos.

00:38.850 --> 00:40.940
Luego tiene un método addItem, que

00:40.940 --> 00:44.200
toma nuestro ítem y que debe ser agregado a los datos

00:44.200 --> 00:45.763
con push, digamos.

00:48.570 --> 00:50.830
Y tenemos un método removeItem, que toma

00:50.830 --> 00:52.173
nuestro elemento, donde

00:53.010 --> 00:57.740
podríamos decir esto. datos. empalme y luego sólo tenemos

00:57.740 --> 01:02.910
que obtener el indexOff(item) aquí y empalmar un elemento.

01:02.910 --> 01:06.030
Así es como podemos eliminar un elemento de un array.

01:06.030 --> 01:07.873
Y por supuesto getItems, donde devuelve,

01:09.750 --> 01:13.120
digamos una copia de esto. datos, así como con el operador

01:13.120 --> 01:15.770
de propagación que aprendiste.

01:16.610 --> 01:17.443
Ahora podemos hacer eso

01:17.443 --> 01:19.450
y estamos recibiendo un montón de errores aquí.

01:19.450 --> 01:20.500
Estamos recibiendo un montón

01:20.500 --> 01:23.900
de errores, ahora para uno porque el nombre Storage es un nombre reservado, así que vamos

01:23.900 --> 01:25.230
a llamarlo Datastorage.

01:25.230 --> 01:26.620
Eso es fácil de eliminar.

01:26.620 --> 01:27.920
Ahora también obtenemos un error

01:27.920 --> 01:29.400
aquí porque no estamos diciendo nada

01:29.400 --> 01:30.880
sobre el tipo de datos que estamos almacenando,

01:30.880 --> 01:32.960
y qué tipo de elemento tiene aquí.

01:32.960 --> 01:35.870
Y ahí es exactamente donde podemos convertir esto en una clase

01:35.870 --> 01:38.860
genérica porque puede que no te importe el tipo de datos.

01:38.860 --> 01:40.880
Queremos asegurarnos de que son datos

01:40.880 --> 01:42.410
uniformes, por lo que son sólo

01:42.410 --> 01:44.830
cadenas, o sólo números, o sólo objetos.

01:44.830 --> 01:47.550
Pero aparte de eso, no me importa.

01:47.550 --> 01:50.820
Así que aquí podríamos convertir esto en una clase genérica,

01:50.820 --> 01:53.300
añadiendo paréntesis angulares después del

01:53.300 --> 01:56.330
nombre de la clase y luego otra vez T, U, lo que quieras usar

01:56.330 --> 02:00.110
como identificador, y añadir esto aquí como un tipo genérico.

02:00.110 --> 02:01.083
Ahora aquí podemos

02:01.083 --> 02:04.490
decir, esto aquí es un array de tipo T, por lo que almacena

02:04.490 --> 02:07.413
datos de ese tipo genérico en él.

02:07.413 --> 02:09.670
Por lo tanto, aquí añadimos esos

02:09.670 --> 02:12.400
datos y tratamos de eliminarlos.

02:12.400 --> 02:15.140
Y por lo tanto, aquí obtenemos elementos correctamente

02:15.140 --> 02:18.490
se infiere que devuelve una matriz de tipos genéricos.

02:18.490 --> 02:20.860
Y ahora podemos crear diferentes almacenamientos,

02:20.860 --> 02:24.690
podemos tener nuestro sting o nuestro textStorage aquí, llamando

02:24.690 --> 02:31.250
a new DataStorage, estableciendo ese tipo genérico a tipo string aquí.

02:31.250 --> 02:33.070
Y entonces aquí en textStorage, puedo

02:33.070 --> 02:34.340
llamar a addItem, y si intento

02:34.340 --> 02:36.410
añadir un número me da un error porque estoy

02:36.410 --> 02:37.513
diciendo que esto será

02:37.513 --> 02:40.800
un DataStorage que sólo almacena picaduras.

02:40.800 --> 02:45.800
Así que, efectivamente, puedo almacenar a Max aquí, y tal vez también almacenar a

02:46.830 --> 02:51.450
Manu, y luego llamar a textStorage. removeItem('Max') y luego

02:51.450 --> 02:55.073
console. registro. textStorage. getItems.

02:56.520 --> 02:58.870
Y todo esto debería funcionar si guardamos eso

02:58.870 --> 03:00.300
porque es un tipo genérico,

03:00.300 --> 03:03.103
y efectivamente al final sólo tenemos a Manu ahí.

03:04.400 --> 03:08.240
Así que esta sería una simple clase genérica que podemos crear.

03:08.240 --> 03:10.500
Ahora bien, ¿por qué construir una clase tan genérica?

03:10.500 --> 03:11.770
Bueno, como dije, porque

03:11.770 --> 03:14.220
tal vez no sólo queremos almacenar textos, también

03:14.220 --> 03:17.110
podría querer almacenar algunos números en un almacenamiento

03:17.110 --> 03:18.950
de datos diferente.

03:18.950 --> 03:21.510
Así que podría crear un DataStorage de este tipo, y establecer

03:21.510 --> 03:23.810
esto como número asegura que ahora sólo podemos

03:23.810 --> 03:26.250
añadir números a ese almacenamiento.

03:26.250 --> 03:28.330
Por supuesto, también podríamos configurar un almacenamiento

03:28.330 --> 03:30.520
en el que permitiéramos ambas cosas utilizando un tipo de unión.

03:30.520 --> 03:32.550
Por lo tanto, tenemos una flexibilidad

03:32.550 --> 03:36.470
total, pero le damos al tipo algo de información extra, que

03:36.470 --> 03:38.490
hace que esta sea una clase flexible

03:38.490 --> 03:41.450
y aún fuertemente tipada.

03:41.450 --> 03:43.470
Al igual que con las funciones.

03:43.470 --> 03:46.910
Realmente flexible y con un soporte de tipos perfecto.

03:46.910 --> 03:49.900
Esa es la idea de los tipos genéricos.

03:49.900 --> 03:52.680
Entonces, aquí podemos hacer eso con la clase DataStorage

03:52.680 --> 03:53.750
almacenando cadenas,

03:53.750 --> 03:55.130
o almacenando números, o lo

03:55.130 --> 03:56.513
que queramos.

03:57.790 --> 04:01.300
Sin embargo, tendremos un problema con nuestra clase dataStorage.

04:01.300 --> 04:04.880
Digamos que aquí tengo mi almacenamiento de objetos, ahora

04:04.880 --> 04:07.090
puedo crear un nuevo DataStorage y

04:07.090 --> 04:10.490
decir ahí quiero almacenar objetos, correcto, quiero

04:10.490 --> 04:12.270
almacenar objetos y por supuesto

04:12.270 --> 04:17.270
podemos ir al almacenamiento de objetos y añadir un elemento.

04:17.300 --> 04:20.460
Digamos que un objeto que tengo se llama Max.

04:20.460 --> 04:22.920
También vamos a guardar otro objeto,

04:22.920 --> 04:24.760
donde guardo a Manu.

04:24.760 --> 04:26.770
Entonces, digamos que estamos haciendo algunas

04:26.770 --> 04:28.310
cosas en nuestro código y luego en un

04:28.310 --> 04:29.740
punto posterior de tiempo aquí,

04:29.740 --> 04:34.100
voy a querer eliminar el elemento, quiero eliminar el elemento con nombre: 'Manu' aquí.

04:34.100 --> 04:37.863
Y luego, quiero consolar. tronco. objStorage. getItems.

04:39.450 --> 04:40.550
Así.

04:40.550 --> 04:41.883
Si guardamos eso, vemos

04:42.920 --> 04:45.840
que tenemos un objeto ahí que es Max.

04:45.840 --> 04:47.470
Así que eso se ve bien.

04:47.470 --> 04:49.140
Ahora, no es realmente bueno.

04:49.140 --> 04:52.490
Digamos que aquí, quiero eliminar a Max ahora, por lo que ahora

04:52.490 --> 04:55.740
deberíamos tener a Manu en el almacenamiento de datos.

04:55.740 --> 04:59.653
Por lo tanto, si recargo, un pozo, sigue siendo Max.

05:00.550 --> 05:03.660
Ahora el problema es que estamos trabajando con objetos aquí,

05:03.660 --> 05:07.350
como sabes los objetos en JavaScript son tipos de referencia.

05:07.350 --> 05:09.440
Ahora, adjunte para encontrar un recurso adicional,

05:09.440 --> 05:11.460
que le permita sumergirse en la referencia.

05:11.460 --> 05:12.730
Mientras que los valores

05:12.730 --> 05:14.650
primitivos, aquí asumo que conoces la

05:14.650 --> 05:16.970
diferencia porque es algo del núcleo de JavaScript,

05:16.970 --> 05:19.060
totalmente ajeno a typescript.

05:19.060 --> 05:20.600
Aquí el problema es que, la forma

05:20.600 --> 05:22.300
en que nuestra clase está construida

05:22.300 --> 05:26.243
con esta lógica sobre cómo se eliminan e identifican los datos, no estamos

05:27.080 --> 05:29.580
haciendo realmente un buen trabajo cuando trabajamos

05:29.580 --> 05:32.200
con valores no primitivos.

05:32.200 --> 05:35.130
Entonces, cuando trabajamos con objetos o arrays, porque

05:35.130 --> 05:37.840
indexOf, si pasamos un objeto aquí, no funcionará

05:37.840 --> 05:40.910
porque técnicamente este es un nuevo objeto.

05:40.910 --> 05:43.800
Puede parecerse a éste pero no funciona porque éste

05:43.800 --> 05:46.520
es técnicamente un objeto nuevo en memoria y tiene

05:46.520 --> 05:48.290
una dirección diferente.

05:48.290 --> 05:52.110
Y efectivamente aquí, JavaScript buscará la dirección y básicamente

05:52.110 --> 05:54.930
no la encontrará, así que lo que hace entonces es

05:54.930 --> 05:58.453
eliminar el último elemento del array aquí, porque esto al

05:59.510 --> 06:01.473
final devuelve -1.

06:02.419 --> 06:06.070
IndexOf devuelve -1 aunque no encuentre nada.

06:06.070 --> 06:07.990
Lo que significa que empieza por el final del array,

06:07.990 --> 06:09.770
que es el comportamiento normal de Javascript

06:09.770 --> 06:11.921
y elimina el último elemento del array.

06:11.921 --> 06:14.190
Por eso funcionó para Manu, no funcionó realmente

06:14.190 --> 06:16.810
funcionó accidentalmente, pero por qué no funciona

06:16.810 --> 06:19.880
para Max, siempre estamos eliminando el último elemento

06:19.880 --> 06:21.760
de la matriz por ahora, ya que no podemos

06:21.760 --> 06:23.670
identificarlo.

06:23.670 --> 06:25.890
Ahora, un trabajo alrededor de al menos

06:25.890 --> 06:29.140
arreglar eso es para comprobar si encontramos nuestro

06:29.140 --> 06:32.260
elemento, por lo que podemos comprobar si este código

06:32.260 --> 06:36.260
aquí, si es igual a -1, lo que significa que no lo encontramos.

06:36.260 --> 06:37.360
Así podremos volver y asegurarnos

06:37.360 --> 06:40.780
de que no retiramos accidentalmente el artículo equivocado.

06:40.780 --> 06:42.900
Pero, por supuesto, ahora acabamos de arreglar esa

06:42.900 --> 06:44.850
barra, pero todavía no tenemos este estado interno

06:44.850 --> 06:46.580
donde funcionaría con los objetos.

06:46.580 --> 06:48.890
Bueno, la única forma de que funcione con objetos,

06:48.890 --> 06:51.740
es si pasamos exactamente el mismo objeto de nuevo.

06:51.740 --> 06:55.700
Así que aquí si tuviera mi objeto max almacenado en una

06:55.700 --> 06:58.840
constante, así, y aquí paso el objeto max.

06:58.840 --> 07:02.050
Y hago lo mismo aquí, entonces realmente estoy usando el mismo, el mismo

07:02.050 --> 07:05.330
objeto exacto, el mismo objeto exacto en la memoria, y por lo tanto, ahora

07:05.330 --> 07:06.540
funcionaría.

07:06.540 --> 07:08.930
Esta sería la única manera de hacer que esto funcione.

07:08.930 --> 07:12.340
Por lo tanto, aquí, la mejor idea podría ser asegurarse

07:12.340 --> 07:16.150
de que esto realmente sólo funciona con valores primitivos.

07:16.150 --> 07:20.100
Por lo tanto, podríamos decir que T extiende la cadena,

07:20.100 --> 07:24.010
el número, tal vez todos los booleanos se suma.

07:24.010 --> 07:25.990
Así que ahora básicamente decimos que DataStorage

07:25.990 --> 07:27.920
sólo debe trabajar con estos tipos.

07:27.920 --> 07:30.470
Por lo tanto, los objetos ya no están permitidos.

07:30.470 --> 07:32.500
Esto podría ser mejor aquí porque, necesitaríamos

07:32.500 --> 07:35.220
un DataStorage más especializado, que entonces probablemente

07:35.220 --> 07:40.080
sólo funciona con objetos a su vez, y no con valores primitivos.

07:40.080 --> 07:42.430
Para afinar nuestra lógica de recuperación aquí, para

07:42.430 --> 07:44.800
tal vez comprobar si hay algún iD en el elemento que debe

07:44.800 --> 07:45.880
ser eliminado.

07:45.880 --> 07:46.970
La forma en que funciona aquí,

07:46.970 --> 07:48.910
realmente sólo funciona para los tipos primitivos,

07:48.910 --> 07:52.320
por lo que establecer tal restricción es definitivamente una buena idea.

07:52.320 --> 07:55.610
Y con eso si lo guardamos, después de comentar esto, vuelve

07:55.610 --> 07:57.253
a funcionar, por supuesto.

07:58.810 --> 08:00.540
Ahora no hace falta decir, con suerte,

08:00.540 --> 08:02.620
que por supuesto usted podría tener más de un

08:02.620 --> 08:04.310
tipo genérico aquí también.

08:04.310 --> 08:05.910
No está limitado a un tipo cuando

08:05.910 --> 08:07.600
trabaja con clases.

08:07.600 --> 08:09.610
Y también puedes tener métodos, que

08:09.610 --> 08:13.080
tienen sus propios tipos genéricos en lugar de clases.

08:13.080 --> 08:16.630
Así que podría introducir nuevos tipos genéricos en los métodos de la clase,

08:16.630 --> 08:18.010
si tiene algún tipo genérico,

08:18.010 --> 08:19.750
que sólo se necesita en un determinado

08:19.750 --> 08:21.580
método, y no en toda la clase.

08:21.580 --> 08:23.000
Así que es realmente flexible en este aspecto.

08:23.000 --> 08:25.570
Puedes usar restricciones en todas

08:25.570 --> 08:28.100
partes y, en general, los tipos genéricos

08:28.100 --> 08:30.240
están ahí para facilitarte la

08:30.240 --> 08:33.900
vida y darte esa combinación perfecta de flexibilidad

08:33.900 --> 08:36.010
total.

08:36.010 --> 08:39.310
Aquí podemos usar cualquier valor primitivo que queramos y

08:39.310 --> 08:40.900
con seguridad de tipo, porque

08:40.900 --> 08:42.820
sabemos perfectamente lo que se almacena

08:42.820 --> 08:44.710
en este DataStorage y lo que se almacena

08:44.710 --> 08:46.770
en este DataStorage.

08:46.770 --> 08:50.660
Así que esta combinación es lo impresionante que nos dan

08:50.660 --> 08:52.283
los tipos genéricos.
