WEBVTT

00:02.060 --> 00:06.410
Istruttore: Typescript fornisce molti tipi di JavaScript.

00:06.410 --> 00:10.100
Ora, anche JavaScript conosce alcuni tipi di dati, e ci

00:10.100 --> 00:12.230
tornerò in questo modulo, ma Typescript

00:12.230 --> 00:14.950
aggiunge molti altri tipi e, come imparerete

00:14.950 --> 00:17.380
in questo corso, Typescript consente

00:17.380 --> 00:21.110
anche di scrivere i propri tipi.

00:21.110 --> 00:24.320
Cominciamo con alcuni dei tipi fondamentali,

00:24.320 --> 00:26.250
che JavaScript già conosce

00:26.250 --> 00:28.289
e che anche Typescript supporta,

00:28.289 --> 00:30.550
e diamo anche un'occhiata alla differenza

00:30.550 --> 00:33.380
tra JavaScript, che conosce il tipo, e Typescript,

00:33.380 --> 00:36.800
che usa quel tipo.

00:36.800 --> 00:38.287
Uno dei tipi fondamentali con

00:38.287 --> 00:41.740
cui lavoriamo in JavaScript e Typescript è il tipo number.

00:41.740 --> 00:45.220
Ora, in JavaScript, e lo stesso vale per Typescript,

00:45.220 --> 00:47.290
esiste un solo tipo di numero.

00:47.290 --> 00:50.750
Non esiste un tipo speciale per gli interi o i float.

00:50.750 --> 00:55.520
Invece, questi valori qui, sarebbero tutti numeri.

00:55.520 --> 00:58.180
Uno sarebbe un numero senza la cifra decimale.

00:58.180 --> 01:01.640
5. 3 è ovviamente un valore decimale

01:01.640 --> 01:04.532
e tutti questi valori sono di tipo number.

01:04.532 --> 01:08.180
Altri linguaggi di programmazione hanno tipi speciali

01:08.180 --> 01:10.480
di interi e tipi di float o double.

01:10.480 --> 01:11.980
JavaScript non ce l'ha

01:11.980 --> 01:14.120
e nemmeno Typescript ce l'ha.

01:14.120 --> 01:16.070
Quindi, abbiamo il tipo number, che

01:16.070 --> 01:19.810
conosciamo da JavaScript, anche come tipo, in Typescript.

01:19.810 --> 01:23.950
Abbiamo anche il tipo di dati stringa, che è il testo, che si può

01:23.950 --> 01:26.370
definire in uno dei tre modi seguenti:

01:26.370 --> 01:28.285
con apici singoli, con apici

01:28.285 --> 01:30.950
doppi o anche con i backtick.

01:30.950 --> 01:34.720
L'ultima notazione con i backtick è una sintassi speciale,

01:34.720 --> 01:38.640
presente nel moderno JavaScript e anche in Typescript, che ci

01:38.640 --> 01:42.440
permette di scrivere i cosiddetti template literals, ovvero

01:42.440 --> 01:44.550
normali stringhe in cui è possibile

01:44.550 --> 01:47.520
iniettare dinamicamente alcuni dati.

01:47.520 --> 01:49.240
Quindi, le stringhe sono semplicemente

01:49.240 --> 01:53.000
testo e JavaScript conosce i tipi di valore delle stringhe.

01:53.000 --> 01:55.000
Lo fa anche il dattiloscritto.

01:55.000 --> 01:57.240
Infine, ma non meno importante, uno dei tipi di

01:57.240 --> 01:59.790
dati fondamentali che JavaScript conosce e che anche

01:59.790 --> 02:02.250
Typescript supporta, è il tipo di dati booleano.

02:02.250 --> 02:03.810
Sarebbe vero o falso, e questo

02:03.810 --> 02:06.610
è molto importante nella programmazione, soprattutto

02:06.610 --> 02:08.920
quando si lavora con le istruzioni IF.

02:08.920 --> 02:10.970
Qui abbiamo questi due valori

02:10.970 --> 02:13.690
e questo è importante, perché in JavaScript

02:13.690 --> 02:17.520
si conosce l'idea dei valori veri e falsi, ad esempio

02:17.520 --> 02:22.190
che zero, il numero zero, è un valore falso.

02:22.190 --> 02:25.510
Se viene utilizzato in una condizione IF, viene trattato come falso.

02:25.510 --> 02:28.560
Il tipo di dati booleano, però, conosce solo questi due valori,

02:28.560 --> 02:31.230
vero o falso, e questo non vale solo per Typescript,

02:31.230 --> 02:33.160
ma anche per JavaScript.

02:33.160 --> 02:35.532
Questo concetto falso e veritiero, che dovreste

02:35.532 --> 02:38.280
conoscere, non è legato ai tipi di dati.

02:38.280 --> 02:40.840
È un lavoro dietro le quinte.

02:40.840 --> 02:43.030
JavaScript aggiunge il runtime,

02:43.030 --> 02:46.510
quando vede determinati valori e condizioni IF.

02:46.510 --> 02:48.530
Quindi, con numeri, stringhe e booleani, abbiamo

02:48.530 --> 02:50.060
un paio di tipi di dati fondamentali.

02:50.060 --> 02:51.450
Naturalmente non tutti,

02:51.450 --> 02:53.410
abbiamo anche oggetti e così via, ma

02:53.410 --> 02:54.617
concentriamoci su questi

02:54.617 --> 02:57.330
tipi e vediamo cosa fa Typescript con loro, o cosa

02:57.330 --> 03:00.930
possiamo fare con loro, con l'aiuto di Typescript.

03:00.930 --> 03:02.620
Per questo, torno al progetto

03:02.620 --> 03:05.190
che abbiamo visto nel primo modulo del corso,

03:05.190 --> 03:07.600
dove vi ho mostrato che tutto ciò che dovete

03:07.600 --> 03:10.320
fare ora è eseguire npm start in un terminale,

03:10.320 --> 03:12.280
navigando nella cartella del progetto,

03:12.280 --> 03:15.130
per avviare questo server di sviluppo live, che

03:15.130 --> 03:18.110
si ricaricherà ogni volta che cambiamo qualcosa,

03:18.110 --> 03:22.300
e qui ho aperto l'indirizzo localhost:3000 nella nuova scheda del

03:22.300 --> 03:24.890
mio browser.

03:24.890 --> 03:26.070
Giusto, sto ricevendo un errore,

03:26.070 --> 03:28.300
perché non ho ancora un vassoio di applicazioni come file.

03:28.300 --> 03:30.380
Naturalmente, il progetto iniziale, allegato

03:30.380 --> 03:32.280
a questa lezione, otterrà un vassoio dell'applicazione

03:32.280 --> 03:34.400
come file, che stiamo cercando di importare qui,

03:34.400 --> 03:42.050
nel nostro file html di indice, non appena compiliamo l'applicazione.

03:42.050 --> 03:42.050
da

03:42.050 --> 03:45.070
Typescript a JavaScript e possiamo farlo in una nuova scheda del terminale, in modo da mantenere

03:45.070 --> 03:46.860
questo processo in esecuzione e aprire invece una nuova

03:46.860 --> 03:51.117
scheda, semplicemente eseguendo tsc app. e ciò che fa è compilare il file

03:53.920 --> 03:56.630
Typescript e sputare un file JavaScript;

03:56.630 --> 03:58.680
una volta fatto ciò, possiamo

03:58.680 --> 04:01.570
ricaricare la pagina e ottenere il tempo

04:01.570 --> 04:05.520
per iniziare... uscita qui.

04:05.520 --> 04:08.000
Quindi, ora abbiamo questa configurazione

04:08.000 --> 04:10.620
che ci consente di scrivere del codice Typescript

04:10.620 --> 04:14.650
e poi di compilarlo in codice JavaScript, per vedere cosa fa.

04:14.650 --> 04:17.000
Ora, con questo nel file Typescript, mi sbarazzerò

04:17.000 --> 04:18.870
del contenuto, perché ora voglio approfondire

04:18.870 --> 04:21.820
i tipi di dati fondamentali, che vi ho appena mostrato nella

04:21.820 --> 04:23.720
diapositiva, in modo che possiate capire

04:23.720 --> 04:27.230
come lavorare con loro in Typescript.

04:27.230 --> 04:29.430
Cominciamo in modo molto semplice.

04:29.430 --> 04:32.240
Diciamo che abbiamo una nuova funzione, add,

04:32.240 --> 04:34.990
in cui ci aspettiamo due numeri, n1 e add two,

04:34.990 --> 04:38.610
e che restituisca n1 più n2, proprio così, una funzione

04:38.610 --> 04:42.370
molto semplice, niente di simile a Typescript.

04:42.370 --> 04:46.080
Ora abbiamo due numeri con cui vogliamo lavorare.

04:46.080 --> 04:49.800
Potrebbe essere il numero 1, che è, ad esempio, cinque,

04:49.800 --> 04:54.680
e anche il numero 2, che forse è 2. 8, quello che volete,

04:54.680 --> 04:57.060
due numeri qui.

04:57.060 --> 04:59.820
Ora, ovviamente e non a caso, possiamo aggiungere,

04:59.820 --> 05:02.950
o chiamare la funzione add e passare numero1 e numero2 come

05:02.950 --> 05:05.280
argomenti a questa funzione, memorizzare

05:05.280 --> 05:07.320
il risultato in una nuova costante e poi,

05:07.320 --> 05:15.080
per vedere qualcosa sullo schermo, possiamo usare la console.

05:15.080 --> 05:15.080
registrare il risultato.

05:15.080 --> 05:20.080
Se lo facciamo e ricompilo questo file con tsc app. Questa pagina dovrebbe già essere

05:20.270 --> 05:22.730
ricaricata automaticamente.

05:22.730 --> 05:24.350
In caso contrario, è possibile ricaricare manualmente,

05:24.350 --> 05:27.010
naturalmente, e si dovrebbe vedere 7. 8.

05:27.010 --> 05:30.250
Ora, potreste pensare, non è una cosa troppo speciale, giusto?

05:30.250 --> 05:33.650
Si tratta di uno snippet JavaScript piuttosto semplice

05:33.650 --> 05:37.330
e, in effetti, non ha nulla di Typescript.

05:37.330 --> 05:39.450
Bene, facciamo qualcosa che freni

05:39.450 --> 05:41.900
questo snippet in normale JavaScript.

05:41.900 --> 05:45.100
Supponiamo che questo input non sia un numero,

05:45.100 --> 05:48.530
ma un testo, un cinque in testo, e se ora lo salviamo

05:48.530 --> 05:49.880
e rieseguiamo il nostro

05:49.880 --> 05:53.380
comando di compilazione qui, vedrete che, una

05:53.380 --> 05:56.110
volta ricaricata la pagina, otterrò

05:56.110 --> 05:59.530
52. 8 come uscita e questo non è ovviamente

05:59.530 --> 06:02.200
il risultato corretto di questa aggiunta.

06:02.200 --> 06:04.500
Ora, sapete perché stiamo ottenendo questo

06:04.500 --> 06:06.450
output nel normale JavaScript, che

06:06.450 --> 06:08.670
alla fine stiamo eseguendo qui.

06:08.670 --> 06:10.150
Bene, otteniamo questo output,

06:10.150 --> 06:14.710
perché questo non è il risultato dell'addizione matematica, ma invece concatena questo

06:14.710 --> 06:17.760
come una stringa, perché questo input, qui, cinque, è una

06:17.760 --> 06:21.060
stringa e quindi JavaScript vede, "Ok, ho una stringa, "sto aggiungendo

06:21.060 --> 06:23.997
qualcosa a questa stringa, mentre certamente, "questo

06:23.997 --> 06:27.667
qualcosa dovrebbe anche essere convertito in una stringa, "in modo

06:27.667 --> 06:32.097
che complessivamente, ho una stringa, "perché il primo valore era una stringa",

06:32.097 --> 06:34.190
e quindi, quello che JavaScript fa, è,

06:34.190 --> 06:39.240
converte 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
da un numero a una stringa, concatena una stringa più lunga a partire da cinque e 2. 8, ottenendo

06:42.720 --> 06:46.700
così 52. 8, come stringa e la restituisce.

06:46.700 --> 06:49.490
Quindi, non viene trattato in modo matematico,

06:49.490 --> 06:50.850
ma come una stringa e con

06:50.850 --> 06:52.900
JavaScript questo può accadere.

06:52.900 --> 06:54.037
Ora, naturalmente, si potrebbe pensare:

06:54.037 --> 06:55.427
"Perché dovrei scrivere questo codice?

06:55.427 --> 06:58.160
"Sono lo sviluppatore, perché dovrei fare questo errore? Forse non siete voi a commettere questo errore.

06:58.160 --> 07:01.230
Forse, questo viene recuperato da un input dell'utente

07:01.230 --> 07:04.180
e si è introdotto un piccolo bug nel codice, dimenticando

07:04.180 --> 07:06.690
di trasformarlo, oppure si lavora in un team

07:06.690 --> 07:09.350
e si hanno un paio di file di script, che lavorano

07:09.350 --> 07:12.460
insieme, e qualche altro sviluppatore ha introdotto

07:12.460 --> 07:14.740
un errore del genere.

07:14.740 --> 07:17.270
Non è impossibile commettere tali errori,

07:17.270 --> 07:20.110
ma può essere difficile rintracciarli.

07:20.110 --> 07:22.340
In questo caso, ovviamente, è abbastanza ovvio che

07:22.340 --> 07:24.010
qualcosa è andato storto, perché abbiamo

07:24.010 --> 07:26.400
uno script di base, ma in uno script più grande potrebbe

07:26.400 --> 07:28.320
non essere immediatamente riconoscibile che

07:28.320 --> 07:31.520
qualcosa è andato storto, ed è qui che Typescript può aiutarci.

07:31.520 --> 07:33.720
In questa funzione possiamo aggiungere

07:33.720 --> 07:36.390
assegnazioni di tipo ai nostri parametri.

07:36.390 --> 07:38.820
Possiamo dire a Typescript che questi due

07:38.820 --> 07:42.280
parametri devono essere di tipo number e non di tipo, non

07:42.280 --> 07:45.340
mi interessa quale sia il valore predefinito.

07:45.340 --> 07:47.535
Lo facciamo aggiungendo i due punti

07:47.535 --> 07:50.300
qui, dopo il valore a cui vogliamo assegnare un

07:50.300 --> 07:52.890
tipo, quindi, in questo caso, dopo il nome del

07:52.890 --> 07:55.220
parametro e poi il nome del tipo.

07:55.220 --> 07:57.140
Ad esempio, numero è uno dei nomi supportati.

07:57.140 --> 08:00.560
Oltre ai numeri, ci sono anche le stringhe o

08:00.560 --> 08:03.480
i booleani, ma su questi torneremo.

08:03.480 --> 08:05.990
Per il momento, abbiamo bisogno di un

08:05.990 --> 08:07.750
numero e non solo per il primo

08:07.750 --> 08:10.530
parametro, ma anche per il secondo.

08:10.530 --> 08:12.010
Quindi, anche qui, possiamo

08:12.010 --> 08:16.150
aggiungere i due punti e poi il numero, e ora, quello che stiamo dicendo a Typescript

08:16.150 --> 08:18.367
è: "Ehi, entrambi i parametri qui, dovrebbero

08:18.367 --> 08:22.147
essere di tipo numero, "il passaggio di valori di tipo diverso non è consentito",

08:22.147 --> 08:25.530
e in effetti, il mio IDE si lamenta già qui, perché Visual Studio

08:25.530 --> 08:28.360
Code ha il supporto Typescript incorporato, ma anche

08:28.360 --> 08:32.510
se trascuriamo questo, non appena ricompilo questo, eseguendo nuovamente tsc

08:32.510 --> 08:34.260
app. Come vedete, si

08:34.260 --> 08:39.193
verifica un errore.

08:40.040 --> 08:41.670
Otteniamo un errore: "Argument

08:41.670 --> 08:42.697
of type '"5" is not

08:42.697 --> 08:46.250
assignable to parameter of type 'number", e ci mostra anche

08:46.250 --> 08:48.660
il punto in cui è successo e ci dà un numero

08:48.660 --> 08:51.140
di riga, la riga otto, e in pratica ci mostra

08:51.140 --> 08:54.430
la stessa cosa che l'IDE mostra qui.

08:54.430 --> 08:56.740
Quindi, nel caso in cui ci sia sfuggito nell'IDE,

08:56.740 --> 08:58.707
la compilazione ora lancia un errore,

08:58.707 --> 09:01.340
e questa è la cosa importante di Typescript.

09:01.340 --> 09:03.284
Ci aiuta solo durante la compilazione.

09:03.284 --> 09:06.220
Non cambia il funzionamento di JavaScript in fase di esecuzione,

09:06.220 --> 09:10.110
perché i browser non hanno un supporto Typescript integrato.

09:10.110 --> 09:13.510
Può essere utile solo durante lo sviluppo, prima di compilare

09:13.510 --> 09:15.700
il codice Typescript in JavaScript, ma

09:15.700 --> 09:19.310
in questo caso è estremamente utile, perché aggiunge un passo

09:19.310 --> 09:21.520
in più, un ulteriore controllo di correttezza,

09:21.520 --> 09:25.560
laddove qui si scopre: "Oh, abbiamo fatto un errore".

09:25.560 --> 09:28.407
"Ecco, questa non dovrebbe essere una stringa, ma

09:28.407 --> 09:31.660
un numero", e possiamo sistemare la cosa e siamo a posto.

09:31.660 --> 09:34.210
Questo è ciò che fa Typescript.

09:34.210 --> 09:35.670
Vi aiuta durante lo sviluppo.

09:35.670 --> 09:37.390
Non modifica il codice di runtime.

09:37.390 --> 09:40.130
Infatti, qui, anche con le impostazioni predefinite,

09:40.130 --> 09:42.800
ha compilato il nostro errore, anche se lo ha rilevato

09:42.800 --> 09:44.700
durante la compilazione, e ha creato

09:44.700 --> 09:47.220
un file che causa il risultato errato, perché per

09:47.220 --> 09:50.690
impostazione predefinita, Typescript non interviene, qui.

09:50.690 --> 09:53.560
Più avanti imparerete come assicurarvi che lo faccia, ma per impostazione

09:53.560 --> 09:56.300
predefinita non blocca nemmeno la compilazione.

09:56.300 --> 09:59.260
Tuttavia, vi urla e vi indica questo errore,

09:59.260 --> 10:03.570
in modo che possiate correggerlo e che possiate evitare errori

10:03.570 --> 10:04.850
simili.

10:04.850 --> 10:07.450
A proposito, assicuratevi di

10:07.450 --> 10:09.020
non avere l'app. js e app. aperti allo stesso tempo.

10:09.020 --> 10:11.950
Si potrebbero verificare errori nell'IDE,

10:11.950 --> 10:13.470
relativi a implementazioni di funzioni duplicate.

10:13.470 --> 10:15.830
La chiusura del file JavaScript risolve il problema.
