WEBVTT

1
00:00:02.270 --> 00:00:04.040
<v Instructor>So we had a look at Lodash,</v>

2
00:00:04.040 --> 00:00:05.900
a third party library that's built

3
00:00:05.900 --> 00:00:08.270
with JavaScript for JavaScript.

4
00:00:08.270 --> 00:00:11.730
You also find certain third party libraries

5
00:00:11.730 --> 00:00:13.287
that really embrace type script

6
00:00:13.287 --> 00:00:16.480
and type script features and give you a brand new way

7
00:00:16.480 --> 00:00:18.360
of writing code that works

8
00:00:18.360 --> 00:00:21.230
because you are working with type script.

9
00:00:21.230 --> 00:00:24.950
One example is class transformer, an even better example

10
00:00:24.950 --> 00:00:28.067
is class validator; we'll have a look at both here.

11
00:00:28.067 --> 00:00:31.360
But let's start with class transformer.

12
00:00:31.360 --> 00:00:35.870
Let's say in our project here, I actually have a model,

13
00:00:35.870 --> 00:00:38.150
a data model, let's name it 'product'.

14
00:00:38.150 --> 00:00:41.170
Now I'll name it product.model.ts

15
00:00:41.170 --> 00:00:43.820
but you can name this file whatever you want.

16
00:00:43.820 --> 00:00:48.820
My idea is that in this file I define a class for a product.

17
00:00:49.420 --> 00:00:52.180
So I describe how a product should look like.

18
00:00:52.180 --> 00:00:55.550
For example, that it has a title which is a string

19
00:00:55.550 --> 00:00:59.070
and a price which is a number and then I add

20
00:00:59.070 --> 00:01:02.120
a constructor function where both can be initialized.

21
00:01:02.120 --> 00:01:07.120
So string, add price and then I said this title equaled 't'

22
00:01:07.210 --> 00:01:09.360
and this price price equal to 'p'.

23
00:01:09.360 --> 00:01:10.810
And of course we could have used

24
00:01:10.810 --> 00:01:12.980
the short cut initialization where we

25
00:01:12.980 --> 00:01:14.423
only use the constructor.

26
00:01:16.150 --> 00:01:20.400
Then let's say we always have a method, get information

27
00:01:20.400 --> 00:01:25.400
where I return an array let's say where the first element

28
00:01:25.950 --> 00:01:30.850
is the title and the second element actually is a string

29
00:01:30.850 --> 00:01:35.770
where I have dollars sign and then injected into

30
00:01:35.770 --> 00:01:37.833
this string, this price.

31
00:01:39.030 --> 00:01:43.030
So very simple model here, a very simple class.

32
00:01:43.030 --> 00:01:45.940
And now we can of course use this class, if you want to,

33
00:01:45.940 --> 00:01:49.590
in app.ts so there I will get rid of Lodash

34
00:01:49.590 --> 00:01:54.590
and instead import product from ./product.model

35
00:01:56.200 --> 00:01:58.920
Now for that you need to make sure this in product model

36
00:01:58.920 --> 00:02:01.010
you actually export this class

37
00:02:01.010 --> 00:02:03.860
otherwise you can't import it and here we have to

38
00:02:03.860 --> 00:02:05.800
export product like this

39
00:02:05.800 --> 00:02:07.890
because I'm using a named export here

40
00:02:07.890 --> 00:02:11.950
by adding the export keyword right in front of the class.

41
00:02:11.950 --> 00:02:16.497
So now here of course we can create a new product, a book

42
00:02:18.150 --> 00:02:23.150
which costs 12.99 and thereafter I console log p1

43
00:02:24.080 --> 00:02:28.190
get information and we should actually log this array.

44
00:02:28.190 --> 00:02:31.390
So if we now run npm start here,

45
00:02:31.390 --> 00:02:34.250
our web pack dev starts up and we should see

46
00:02:34.250 --> 00:02:37.340
this nice array with information about this book.

47
00:02:37.340 --> 00:02:39.463
So if I reload here, here it is.

48
00:02:40.630 --> 00:02:43.170
Now that's not too fancy of course, that works,

49
00:02:43.170 --> 00:02:44.930
but that's nothing new.

50
00:02:44.930 --> 00:02:47.270
Now a common scenario in bigger apps

51
00:02:47.270 --> 00:02:49.610
is that you might be downloading some data,

52
00:02:49.610 --> 00:02:52.150
lets say from a server, you're fetching data

53
00:02:52.150 --> 00:02:54.490
from a back end server and that's server

54
00:02:54.490 --> 00:02:58.370
then returns you some json data which you pass

55
00:02:58.370 --> 00:03:01.560
which then might be a list of products.

56
00:03:01.560 --> 00:03:05.520
So here we might have products which we get from the server

57
00:03:05.520 --> 00:03:10.520
where we then have a title, a carpet and a price, 29.99

58
00:03:13.047 --> 00:03:18.047
and we then also have this book, so title, book

59
00:03:18.120 --> 00:03:22.830
and there a price of 10.99, lets say.

60
00:03:22.830 --> 00:03:25.310
So that's a very simple array of data

61
00:03:25.310 --> 00:03:27.730
which we then get from the back end.

62
00:03:27.730 --> 00:03:30.590
Now these are of course JavaScript objects

63
00:03:30.590 --> 00:03:33.730
but they're not instances of our product model.

64
00:03:33.730 --> 00:03:37.220
And that is a typical scenario where you get data as json

65
00:03:37.220 --> 00:03:40.990
it has no attached data like to which constructor function

66
00:03:40.990 --> 00:03:42.850
you're fronted coded belongs.

67
00:03:42.850 --> 00:03:46.770
Your server does know that and json also is a format that

68
00:03:46.770 --> 00:03:51.230
just transmits basic data, you don't have rich meta data

69
00:03:51.230 --> 00:03:53.540
to you objects attached there.

70
00:03:53.540 --> 00:03:56.300
Or at least you would have to do this manually.

71
00:03:56.300 --> 00:04:00.120
So, in other words, the products we get here are objects

72
00:04:00.120 --> 00:04:03.310
which don't have a get information method.

73
00:04:03.310 --> 00:04:08.230
Now traditionally, if you now wanted to convert this into

74
00:04:08.230 --> 00:04:12.680
instances of your model, you would have to do that manually.

75
00:04:12.680 --> 00:04:17.680
You could have your loaded products which then, let's say

76
00:04:19.260 --> 00:04:22.770
uses products, calls the map method

77
00:04:22.770 --> 00:04:25.680
and on every product in that array

78
00:04:25.680 --> 00:04:30.680
we then return new product for prod.title and prod.price

79
00:04:34.330 --> 00:04:36.660
and thereafter we would have an array full

80
00:04:36.660 --> 00:04:40.230
of real product constructor function instances

81
00:04:40.230 --> 00:04:43.163
and then we could actually loop through that,

82
00:04:44.330 --> 00:04:47.900
loaded products and then in there for example

83
00:04:47.900 --> 00:04:51.083
console log prod.getinformation.

84
00:04:52.150 --> 00:04:56.010
This is how we could manually transform an array

85
00:04:56.010 --> 00:05:00.070
or also a single no name Vanilla JavaScript object

86
00:05:00.070 --> 00:05:02.880
into an instance of a specific constructor function

87
00:05:02.880 --> 00:05:05.000
and hence, we would get this output.

88
00:05:05.000 --> 00:05:07.220
Now doing this manually is cumbersome.

89
00:05:07.220 --> 00:05:09.590
It's a bunch of extra steps here,

90
00:05:09.590 --> 00:05:12.710
this is only a simple transformation of course.

91
00:05:12.710 --> 00:05:16.690
That's where the class transformer package can help us.

92
00:05:16.690 --> 00:05:19.330
It makes that very, very simple.

93
00:05:19.330 --> 00:05:22.390
There, we also define a class in type script

94
00:05:22.390 --> 00:05:25.010
in our case here, then we might be getting some data,

95
00:05:25.010 --> 00:05:29.340
let's say from a server and then we actually can call

96
00:05:29.340 --> 00:05:32.430
a simple convenience method and it will automatically

97
00:05:32.430 --> 00:05:36.893
convert our data into the right models.

98
00:05:38.100 --> 00:05:40.030
Now for that, let's first of all

99
00:05:40.030 --> 00:05:44.840
run a nmp install class transformer--save, like this

100
00:05:45.730 --> 00:05:47.820
and once this finished let's run

101
00:05:47.820 --> 00:05:50.350
npm install reflect-metadata--save

102
00:05:51.451 --> 00:05:54.470
A package, this package in the end depends on.

103
00:05:54.470 --> 00:05:57.460
So here let's import this too and then

104
00:05:57.460 --> 00:06:02.460
as it also instructs us here in the setup instructions here,

105
00:06:02.890 --> 00:06:07.680
import reflect metadata in your route entry files,

106
00:06:07.680 --> 00:06:11.410
in my case here in app.ts I import this third party library

107
00:06:11.410 --> 00:06:14.970
we just installed as a dependency of our library.

108
00:06:14.970 --> 00:06:17.210
Now that actually worded no js steps

109
00:06:17.210 --> 00:06:18.610
and therefore we can skip this one.

110
00:06:18.610 --> 00:06:20.180
In the browser we still have to install

111
00:06:20.180 --> 00:06:24.780
the same packages though and adding this import here is fine

112
00:06:24.780 --> 00:06:26.880
because we are using web pack

113
00:06:26.880 --> 00:06:30.090
and therefore now we actually good to go.

114
00:06:30.090 --> 00:06:35.090
And now we can import something from class transformer

115
00:06:36.290 --> 00:06:40.210
and then that something is the 'plain to class' method.

116
00:06:40.210 --> 00:06:42.630
This package also has a couple of other methods.

117
00:06:42.630 --> 00:06:45.200
You can learn more about them here in the official docs.

118
00:06:45.200 --> 00:06:49.060
But 'plain to class' is the main method.

119
00:06:49.060 --> 00:06:54.060
You can use it here to set your loaded products for example.

120
00:06:55.150 --> 00:06:58.230
Instead of doing this manually here as we did before,

121
00:06:58.230 --> 00:07:01.480
we can set loaded products equal to plain to class

122
00:07:01.480 --> 00:07:03.760
and now pass it two arguments here.

123
00:07:03.760 --> 00:07:08.070
The first argument is the class we want to convert it to.

124
00:07:08.070 --> 00:07:10.190
In my case here, product.

125
00:07:10.190 --> 00:07:12.700
And I don't instantiate it or call it,

126
00:07:12.700 --> 00:07:15.560
I just point at that class.

127
00:07:15.560 --> 00:07:19.460
The second argument is the data we wanna transform.

128
00:07:19.460 --> 00:07:23.520
So in my case here, that is products.

129
00:07:23.520 --> 00:07:25.840
And now what this package will do is

130
00:07:25.840 --> 00:07:28.100
it will go over this array transform

131
00:07:28.100 --> 00:07:31.034
every plain Vanilla JavaScript object here

132
00:07:31.034 --> 00:07:34.090
to an instance of this class.

133
00:07:34.090 --> 00:07:37.830
So if we now save this and run npm start again,

134
00:07:37.830 --> 00:07:40.330
the webpage that starts server boots up again

135
00:07:40.330 --> 00:07:43.270
and it should built this project without errors.

136
00:07:43.270 --> 00:07:46.540
If I reload the page, I get the same output as before

137
00:07:46.540 --> 00:07:49.530
but of course with less code from our side

138
00:07:49.530 --> 00:07:51.870
because we are using this package.

139
00:07:51.870 --> 00:07:53.403
And the amazing this about this package is

140
00:07:53.403 --> 00:07:57.070
that it works that well here because it builds up on

141
00:07:57.070 --> 00:08:01.230
type script and utilizes type script and utilizes the fact

142
00:08:01.230 --> 00:08:04.280
that we have a class there at which we can point.

143
00:08:04.280 --> 00:08:08.730
But to also be honest, this package works particularly well

144
00:08:08.730 --> 00:08:10.900
with type script but it doesn't use

145
00:08:10.900 --> 00:08:12.600
a type script specific feature.

146
00:08:12.600 --> 00:08:16.630
Classes for example also exist in Vanilla JavaScript.

147
00:08:16.630 --> 00:08:20.170
So whilst this is developed primarily for type script,

148
00:08:20.170 --> 00:08:23.610
it actually also works in Vanilla JavaScript.

149
00:08:23.610 --> 00:08:26.633
That will not be true for the next package though.

