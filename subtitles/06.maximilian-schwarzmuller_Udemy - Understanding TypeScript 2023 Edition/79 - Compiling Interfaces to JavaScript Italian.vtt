WEBVTT

00:02.170 --> 00:03.290
Istruttore: Si è parlato

00:03.290 --> 00:05.580
molto di interfacce e classi.

00:05.580 --> 00:07.390
Ora guardiamo sotto

00:07.390 --> 00:11.650
il cofano e vediamo cosa produce o offre JavaScript

00:11.650 --> 00:15.290
come alternativa all'interfaccia.

00:15.290 --> 00:17.450
Abbiamo imparato che per il codice di classe,

00:17.450 --> 00:20.560
alla fine dipende dalla versione per cui stiamo compilando.

00:20.560 --> 00:24.280
Se si compila per es6 qui nel conflitto ts, il nostro

00:24.280 --> 00:27.160
output userà la parola chiave class.

00:27.160 --> 00:29.330
Poiché qui abbiamo compilato per es5, vediamo

00:29.330 --> 00:31.880
invece questo workaround utilizzando costrutti

00:31.880 --> 00:33.420
o funzioni alla fine.

00:33.420 --> 00:36.670
Cosa succede, invece, per le interfacce?

00:36.670 --> 00:38.720
Diamo un'occhiata all'applicazione. file js.

00:38.720 --> 00:41.780
E lì non si vede nulla.

00:41.780 --> 00:46.360
Non vedrete alcuna traduzione per le nostre interfacce.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Queste cose non si trovano da nessuna parte nelle app. js.

00:52.970 --> 00:55.440
Qui si trova la nostra funzione, la funzione

00:55.440 --> 00:59.180
costruttore per l'oggetto persona, quindi in pratica

00:59.180 --> 01:03.500
la traduzione per la classe persona e l'altro codice.

01:03.500 --> 01:06.680
Non si trova alcun riferimento in nessuna interfaccia.

01:06.680 --> 01:08.240
E c'è una buona ragione per questo.

01:08.240 --> 01:11.350
Non esiste una traduzione per le interfacce.

01:11.350 --> 01:13.650
JavaScript non conosce questa funzione.

01:13.650 --> 01:15.550
È una funzione puramente TypeScript,

01:15.550 --> 01:18.830
disponibile solo durante lo sviluppo e la compilazione.

01:18.830 --> 01:21.640
Quindi potete usarlo per migliorare il vostro codice.

01:21.640 --> 01:23.970
Tuttavia, nessun output finirà nei file

01:23.970 --> 01:26.010
JavaScript, quindi si tratta di una

01:26.010 --> 01:28.390
funzione di sviluppo pura che aiuta a scrivere

01:28.390 --> 01:30.700
codice migliore, un codice chiaramente

01:30.700 --> 01:34.100
strutturato e che segue regole chiare.

01:34.100 --> 01:38.720
In fase di esecuzione, non rimarrà traccia di queste interfacce.

01:38.720 --> 01:41.760
Non si vedrà nulla relativo alle interfacce nel codice,

01:41.760 --> 01:44.710
ma solo funzioni, classi e tutto il resto del codice

01:44.710 --> 01:47.130
viene compilato in output.

01:47.130 --> 01:50.020
Le interfacce vengono semplicemente scaricate, si potrebbe dire.

01:50.020 --> 01:53.170
Vengono usati durante la compilazione per controllare il codice

01:53.170 --> 01:54.340
e poi vengono ignorati.

01:54.340 --> 01:56.690
Non c'è nulla che possa essere prodotto per loro.
