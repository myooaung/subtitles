WEBVTT

00:02.180 --> 00:04.432
-: Bây giờ, một nguồn gây nhầm lẫn phổ

00:04.432 --> 00:06.300
biến, tôi muốn làm rõ ở đây, là sự

00:06.300 --> 00:09.030
khác biệt giữa các loại Generics và Union.

00:09.030 --> 00:11.950
Tại sao bạn có thể nhầm lẫn giữa hai điều này?

00:11.950 --> 00:14.440
Vâng, ví dụ, lưu trữ dữ liệu của chúng tôi ở đây.

00:14.440 --> 00:16.260
Nếu chúng tôi chấp nhận các

00:16.260 --> 00:19.240
loại Chung dựa trên các loại này, chúng tôi

00:19.240 --> 00:21.157
cũng có thể viết lại điều đó để

00:21.157 --> 00:23.750
chỉ nói, "Chà, chúng tôi muốn lưu trữ

00:23.750 --> 00:27.610
các chuỗi hoặc số hoặc Booleans ở đây, phải không? Vì vậy, chúng ta có thể lưu trữ nó hoặc chính xác hơn, đặt nó trong

00:27.610 --> 00:30.470
dấu ngoặc đơn để chúng ta nói một trong hai loại

00:30.470 --> 00:32.660
này dưới dạng một mảng.

00:32.660 --> 00:35.040
Sau đó, ở đây, tất nhiên, chúng ta cũng có thể nói, "Chà,

00:35.040 --> 00:37.017
những gì chúng ta nhận được ở đây khi chúng ta

00:37.017 --> 00:38.420
thêm một mục là một chuỗi, một số

00:38.420 --> 00:39.740
hoặc một Boolean, khi chúng ta

00:39.740 --> 00:41.120
loại bỏ nó, nó giống nhau. Bây giờ, vấn đề với phương pháp này là gì?

00:41.120 --> 00:43.007
Ngay từ cái nhìn đầu tiên, có vẻ như nó đạt được điều tương tự, nhưng,

00:44.424 --> 00:45.880
nó thực sự làm được điều gì đó hoàn toàn khác.

00:45.880 --> 00:49.630
Điều chúng tôi đang nói ở đây là, chúng tôi đang lưu trữ

00:49.630 --> 00:52.310
bất kỳ loại dữ liệu nào trong đó miễn là đó

00:52.310 --> 00:53.710
là một mảng chuỗi, số

00:53.710 --> 00:55.690
hoặc Booleans, và sau đó chúng

00:55.690 --> 00:57.220
tôi cũng sẽ thêm bất kỳ

00:57.220 --> 00:59.730
loại dữ liệu nào vào đây, có thể là chuỗi,

00:59.730 --> 01:02.930
số hoặc Boolean và tương tự để xóa.

01:02.930 --> 01:04.670
Bây giờ, chúng tôi đã có một số lỗi ở dưới đó, tất nhiên, bởi

01:04.670 --> 01:06.650
vì tôi không thể khởi tạo điều này theo cách chung chung nữa.

01:06.650 --> 01:09.830
Nhưng, khác hơn là nó hoạt động.

01:09.830 --> 01:12.520
Tuy nhiên, bây giờ, vấn đề là đối với một vấn đề ở

01:12.520 --> 01:14.420
trên, chúng ta không nói đây là một

01:14.420 --> 01:15.890
mảng các chuỗi, hoặc một mảng

01:15.890 --> 01:18.260
các số, hoặc một mảng các Boolean.

01:18.260 --> 01:20.630
Điều này nói rằng, chúng ta có một mảng

01:20.630 --> 01:24.190
có thể chứa các chuỗi, số và Booleans hỗn hợp.

01:24.190 --> 01:26.290
Vì vậy, nếu bạn muốn nói một

01:26.290 --> 01:30.190
mảng chuỗi hoặc một mảng số, chúng ta sẽ phải

01:30.190 --> 01:32.100
nói mảng chuỗi, mảng số

01:32.100 --> 01:34.403
hoặc mảng Boolean.

01:34.403 --> 01:36.020
Vâng, chúng ta có thể làm điều đó, nhưng bây giờ chúng ta có một vấn đề ở đây.

01:36.020 --> 01:39.100
Bây giờ, chúng tôi đang thêm một chuỗi, một số hoặc

01:39.100 --> 01:41.660
một Boolean, nhưng tùy thuộc vào những gì

01:41.660 --> 01:44.710
chúng tôi thực sự đặt mảng dữ liệu này, một mảng số

01:44.710 --> 01:46.750
hoặc một mảng Boolean hoặc một mảng

01:46.750 --> 01:50.270
chuỗi, chúng tôi không được phép thêm một số, hoặc một Boolean

01:50.270 --> 01:52.320
hoặc một chuỗi.

01:52.320 --> 01:54.140
Nếu chúng ta đặt đây là một mảng chuỗi thì

01:54.140 --> 01:55.870
chúng ta không thể thêm một số ở đây.

01:55.870 --> 01:57.833
Tuy nhiên, ở đây tôi thấy ổn với bất kỳ tham số nào

01:57.833 --> 01:59.800
miễn là nó là một số, Boolean hoặc một chuỗi.

01:59.800 --> 02:02.850
Vì vậy, vấn đề là ở đây với các loại Liên minh.

02:02.850 --> 02:05.670
Chúng tôi chấp nhận bất kỳ giá trị nào trong số này mỗi

02:05.670 --> 02:08.380
khi phương thức này được gọi hoặc phương thức này.

02:08.380 --> 02:11.053
Vì vậy, chúng tôi không nói, "Này, bất cứ khi nào chúng

02:11.053 --> 02:14.250
tôi làm việc với lớp này, bạn phải quyết định một loại và gắn

02:14.250 --> 02:15.397
bó với nó, thay vào đó

02:15.397 --> 02:18.150
chúng tôi đang nói, bất cứ khi nào bạn gọi phương thức

02:18.150 --> 02:21.830
này, bạn có thể tự do sử dụng bất kỳ loại nào trong số này.

02:21.830 --> 02:23.440
Đó chính xác không phải là những gì chúng tôi muốn ở đây.

02:23.440 --> 02:26.150
Nếu tôi hoàn nguyên điều này về thiết

02:26.150 --> 02:29.640
lập trước đó nơi chúng tôi đã sử dụng các loại chung

02:29.640 --> 02:33.050
thì chúng tôi sẽ có một thiết lập khác.

02:33.050 --> 02:34.810
Ở đây, chúng tôi nói rằng bạn

02:37.580 --> 02:39.450
phải chọn một lần loại dữ liệu bạn

02:39.450 --> 02:42.060
muốn lưu trữ và sau đó bạn chỉ được phép thêm

02:42.060 --> 02:43.950
chính xác loại dữ liệu đó.

02:43.950 --> 02:45.750
Vì vậy, ở đây nếu tôi thêm một số

02:45.750 --> 02:48.523
chẳng hạn, tôi sẽ gặp lỗi vì đó không phải là một

02:49.710 --> 02:52.623
chuỗi và điều đó cho thấy rằng tôi chỉ muốn quản lý

02:53.830 --> 02:54.730
các chuỗi ở đây khi

02:54.730 --> 02:56.170
tôi đặt loại chung.

02:56.170 --> 02:57.810
Đó là sự khác biệt giữa các loại liên kết và các loại chung.

02:57.810 --> 03:01.250
Các kiểu kết hợp có thể rất tuyệt nếu bạn muốn có

03:01.250 --> 03:05.040
một chức năng mà bạn có thể gọi bằng một trong các kiểu

03:05.040 --> 03:06.920
này mỗi khi bạn gọi nó.

03:06.920 --> 03:08.690
Các loại chung là tuyệt vời

03:08.690 --> 03:11.570
nếu bạn muốn khóa một loại nhất định.

03:11.570 --> 03:13.460
Sử dụng cùng một loại trong toàn

03:13.460 --> 03:15.510
bộ phiên bản lớp mà bạn tạo.

03:15.510 --> 03:18.380
Sử dụng cùng một loại trong toàn bộ chức năng.

03:18.380 --> 03:20.070
Đó là nơi bạn muốn loại chung chung.

03:20.070 --> 03:23.300
Bạn muốn các loại liên kết khi bạn linh hoạt có

03:23.300 --> 03:25.850
một loại khác với mọi lệnh gọi phương

03:25.850 --> 03:28.120
thức, với mọi lệnh gọi hàm.

03:28.120 --> 03:30.810
Sau đó, bạn có thể sử dụng các loại công đoàn.

03:30.810 --> 03:33.470
Các loại chung khóa trong một loại.
