WEBVTT

00:02.450 --> 00:05.030
Eğitmen: Şimdi fonksiyon aşırı yüklemelerinden

00:05.030 --> 00:09.010
uzaklaşalım ve çok güzel bir özellik daha tanıtmama izin verin.

00:09.010 --> 00:13.350
Bu da isteğe bağlı zincirleme.

00:13.350 --> 00:16.720
Diyelim ki bir arka uçtan, bir veritabanından

00:16.720 --> 00:21.603
veya bir nesnede belirli bir özelliğin tanımlanıp tanımlanmadığını

00:21.603 --> 00:26.350
kesin olarak bilmediğiniz herhangi bir kaynaktan veri aldığınız

00:26.350 --> 00:29.500
bir uygulamanız var.

00:29.500 --> 00:33.920
Diyelim ki fetchedUserData'ya sahibiz ve fetchedUserData, getirdiğimiz bir

00:33.920 --> 00:36.380
kullanıcı hakkında bir nesne olabilir.

00:36.380 --> 00:39.705
Orada bir kimliğimiz olabilir, bir adımız

00:39.705 --> 00:44.705
olabilir Max ve ayrıca bir başlığı olan ve daha sonra bir açıklaması

00:45.730 --> 00:50.550
olan bir nesne olan başka bir özellik işi de bekleyebiliriz,

00:50.550 --> 00:53.950
kendi şirketim.

00:53.950 --> 00:56.900
Şimdi böyle bir veri elde edersek elbette bununla çalışabiliriz.

00:56.900 --> 01:00.150
Şimdi daha karmaşık şeyler yapabilirsiniz ama burada

01:00.150 --> 01:03.940
başlangıç olarak tek yaptığımın aslında iş unvanını buraya

01:03.940 --> 01:06.871
yüklemek olduğunu varsayalım.

01:06.871 --> 01:09.940
Şimdi bunu geliştirme sunucumuz açık ve çalışır durumdayken

01:09.940 --> 01:12.880
ve derleme izleme modunda çalışırken kaydedersek, burada

01:12.880 --> 01:14.420
CEO'ya ulaşırım.

01:14.420 --> 01:17.395
Şimdi bu çok süslü değil, ancak bunu bir

01:17.395 --> 01:22.395
arka uçtan getiriyorsak, herhangi bir nedenle belki de ihtiyacımız

01:23.080 --> 01:27.690
olan tüm verileri getirmiyoruz, belki de bazı veriler bu noktada

01:27.690 --> 01:30.490
ayarlanmamış olabilir.

01:30.490 --> 01:34.730
Daha büyük ve karmaşık uygulamalarda, bazen bir nesne üzerindeki

01:34.730 --> 01:39.240
bazı özelliklerin ayarlanıp ayarlanmadığını veya tanımlanmamış

01:39.240 --> 01:42.650
olup olmadığını kesin olarak bilmediğiniz iç içe geçmiş

01:42.650 --> 01:45.340
verilerle çalışırsınız.

01:45.340 --> 01:49.680
Diyelim ki job burada mevcut değil, her ne sebeple olursa olsun onu getirmiyoruz,

01:49.680 --> 01:53.180
burada elbette bir hata alıyorum, şimdi TypeScript bundan

01:53.180 --> 01:55.930
şikayet ediyor çünkü şu anda job özelliği olmadığını

01:55.930 --> 01:57.843
biliyor.

01:57.843 --> 02:01.347
Sorun şu ki, bu veri için TypeScript tarafından kontrol

02:01.347 --> 02:05.660
edilmeyen bir dosyadan getirdiğimiz veri olup olmadığını

02:05.660 --> 02:09.720
bilemez ya da az önce söylediğim gibi bunu arka uçtan getiriyorsak

02:09.720 --> 02:12.530
ve hangi verinin döndürüleceğini kesin

02:12.530 --> 02:15.550
olarak bilmiyorsak.

02:15.550 --> 02:18.150
Şimdi, bunun tanımlı olup olmadığını bilmiyorsanız,

02:18.150 --> 02:21.730
normal JavaScript'te yapabileceğimiz şey, işe erişmeyi deneyebiliriz

02:21.730 --> 02:25.098
ve bu işe yararsa devam ederiz ve başlığa erişiriz.

02:25.098 --> 02:29.450
Bu, daha sonra potansiyel nesnenin derinliklerine dalmadan önce bir şeyin

02:29.450 --> 02:33.520
var olup olmadığını kontrol etmenin JavaScript yoludur ve bu tanımlanmamışsa,

02:33.520 --> 02:37.110
bu kod asla çalışmaz ve dolayısıyla daha geniş bir çalışma zamanı

02:37.110 --> 02:39.400
hatasına sahip oluruz.

02:39.400 --> 02:42.410
Burada da TypeScript elbette işin var olmadığını

02:42.410 --> 02:45.180
bilir, ancak bu, TypeScript'in HTTP isteğinin

02:45.180 --> 02:48.470
sonucu gibi bakamayacağı bir kaynaktan getirilirse,

02:48.470 --> 02:52.910
JavaScript'te çalışma zamanı hatalarından kaçınmanın güvenli yolu

02:52.910 --> 02:54.920
bu olacaktır.

02:54.920 --> 02:58.110
Şimdi eğer bu mevcutsa, daha önce olduğu gibi aynı çıktıyı alırız.

02:58.110 --> 03:01.400
Eğer mevcut değilse, en azından bir çalışma zamanı hatası

03:01.400 --> 03:02.233
almayız.

03:02.233 --> 03:07.020
TypeScript ile aslında bunu yapmanın daha güzel bir yolu var.

03:07.020 --> 03:10.520
İsteğe bağlı zincirleme operatörünü aldınız.

03:10.520 --> 03:15.320
Tanımlı olup olmadığından emin olmadığınız şeyden sonra bir soru işareti

03:15.320 --> 03:16.880
ekleyebilirsiniz.

03:16.880 --> 03:21.600
En azından TypeScript sürüm 3 kullanıyorsanız. 7 veya daha yüksek.

03:21.600 --> 03:24.770
Burada IDE'm bundan hoşlanmıyor, ancak bu desteklenen

03:24.770 --> 03:26.300
bir sözdizimidir.

03:26.300 --> 03:30.370
Bu, TypeScript'e bunun var olup olmadığını, varsa job'a erişip erişmediğini söyler

03:30.370 --> 03:33.450
ve bu nedenle buraya soru işaretini ekleyebilir ve bu nedenle

03:33.450 --> 03:36.314
yalnızca job tanımlanmışsa başlığa erişebiliriz.

03:36.314 --> 03:39.300
Şimdi bunu yaparsak, derlemeye çalıştığımda hala

03:39.300 --> 03:42.490
bir hata alıyorum çünkü TypeScript hala job'un var olmadığını

03:42.490 --> 03:44.510
kesin olarak biliyor.

03:44.510 --> 03:47.370
Ancak bunu bilmezse ya da bunu yorumlarsam,

03:47.370 --> 03:51.840
bu gayet iyi derlenir ve tüm bunlar daha önce olduğu gibi yürütülür.

03:51.840 --> 03:56.400
Dolayısıyla, buradaki isteğe bağlı zincirleme operatörü, nesne verilerimizdeki

03:56.400 --> 04:00.730
iç içe geçmiş özelliklere ve iç içe geçmiş nesnelere güvenli bir şekilde

04:00.730 --> 04:03.610
erişmemize yardımcı olur ve soru işaretinin önündeki

04:03.610 --> 04:07.061
şey tanımlanmamışsa, bundan sonraki şeye erişmez ve bu nedenle

04:07.061 --> 04:12.420
bir çalışma zamanı hatası atmaz, bunun yerine sadece devam etmez.

04:12.420 --> 04:15.210
Yani perde arkasında bu, temel olarak buna erişmeye çalışmadan

04:15.210 --> 04:19.213
önce bunun var olup olmadığını kontrol eden bir if kontrolüne derlenir.
