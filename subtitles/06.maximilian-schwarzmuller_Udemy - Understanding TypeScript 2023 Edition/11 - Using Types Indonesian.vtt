WEBVTT

00:02.060 --> 00:06.410
Instruktur: Typescript menyediakan banyak tipe untuk JavaScript.

00:06.410 --> 00:10.100
Sekarang, JavaScript sendiri, juga mengetahui beberapa tipe data, dan saya

00:10.100 --> 00:12.230
akan kembali ke itu dalam modul ini juga, tetapi

00:12.230 --> 00:14.950
Typescript menambahkan lebih banyak tipe, dan seperti

00:14.950 --> 00:17.380
yang juga akan Anda pelajari dalam kursus ini, Typescript

00:17.380 --> 00:21.110
juga memungkinkan Anda untuk menulis tipe Anda sendiri.

00:21.110 --> 00:24.320
Sekarang, mari kita mulai dengan beberapa Tipe Inti,

00:24.320 --> 00:26.250
yang sudah diketahui JavaScript

00:26.250 --> 00:28.289
dan yang juga didukung oleh Typescript,

00:28.289 --> 00:30.550
dan kita juga akan melihat apa perbedaan

00:30.550 --> 00:33.380
antara JavaScript, yang mengetahui tipe, dan

00:33.380 --> 00:36.800
Typescript, yang menggunakan tipe itu.

00:36.800 --> 00:38.287
Salah satu tipe inti yang kita

00:38.287 --> 00:41.740
gunakan dalam JavaScript dan Typescript, adalah tipe angka.

00:41.740 --> 00:45.220
Sekarang, dalam JavaScript, dan hal yang sama berlaku untuk Typescript,

00:45.220 --> 00:47.290
hanya ada satu jenis angka.

00:47.290 --> 00:50.750
Tidak ada tipe khusus untuk bilangan bulat atau float.

00:50.750 --> 00:55.520
Malahan, nilai-nilai di sini, semuanya akan berupa angka.

00:55.520 --> 00:58.180
Satu akan menjadi angka tanpa tempat desimal.

00:58.180 --> 01:01.640
5. 3 jelas merupakan satu dengan tempat

01:01.640 --> 01:04.532
desimal dan semua nilai ini bertipe number.

01:04.532 --> 01:08.180
Bahasa-bahasa pemrograman lain memiliki tipe integer

01:08.180 --> 01:10.480
khusus dan tipe float atau double.

01:10.480 --> 01:11.980
JavaScript tidak memilikinya

01:11.980 --> 01:14.120
dan Typescript juga tidak memilikinya.

01:14.120 --> 01:16.070
Jadi, kita memiliki tipe angka, yang kita

01:16.070 --> 01:19.810
ketahui dari JavaScript, juga sebagai sebuah tipe, dalam Typescript.

01:19.810 --> 01:23.950
Kita juga memiliki tipe data string, dan itu adalah teks, yang dapat Anda definisikan

01:23.950 --> 01:26.370
dalam salah satu dari tiga cara ini, dengan tanda

01:26.370 --> 01:28.285
kutip tunggal, dengan tanda kutip ganda,

01:28.285 --> 01:30.950
atau juga dengan backtick.

01:30.950 --> 01:34.720
Notasi terakhir dengan backtick adalah sintaksis khusus, yang disediakan

01:34.720 --> 01:38.640
dalam JavaScript modern dan juga dalam Typescript, yang memungkinkan

01:38.640 --> 01:42.440
kita untuk menulis apa yang disebut template literal, yaitu string normal

01:42.440 --> 01:44.550
di mana Anda dapat secara dinamis menyuntikkan

01:44.550 --> 01:47.520
beberapa data ke dalamnya.

01:47.520 --> 01:49.240
Jadi, string hanyalah teks

01:49.240 --> 01:53.000
dan JavaScript tahu tentang tipe nilai string.

01:53.000 --> 01:55.000
Typescript juga melakukannya.

01:55.000 --> 01:57.240
Terakhir, namun tidak kalah pentingnya, salah

01:57.240 --> 01:59.790
satu tipe data inti, yang JavaScript ketahui dan Typescript

01:59.790 --> 02:02.250
juga mendukung, adalah tipe data Boolean.

02:02.250 --> 02:03.810
Itu akan menjadi benar atau salah,

02:03.810 --> 02:06.610
dan itu sangat penting dalam pemrograman, tentu saja, terutama

02:06.610 --> 02:08.920
ketika bekerja dengan pernyataan IF.

02:08.920 --> 02:10.970
Di sini, kita mendapatkan dua

02:10.970 --> 02:13.690
nilai ini, dan itu penting, karena dalam

02:13.690 --> 02:17.520
JavaScript, Anda mungkin juga tahu ide nilai truthy dan

02:17.520 --> 02:22.190
falsy ini, misalnya nol, angka nol, adalah nilai falsy.

02:22.190 --> 02:25.510
Jika Anda menggunakannya dalam kondisi IF, ini diperlakukan sebagai false.

02:25.510 --> 02:28.560
Tipe data Boolean, benar-benar hanya mengetahui dua nilai ini,

02:28.560 --> 02:31.230
benar atau salah, dan itu bukan hanya kasus untuk Typescript,

02:31.230 --> 02:33.160
tetapi juga untuk JavaScript.

02:33.160 --> 02:35.532
Konsep yang benar dan falsy ini, yang harus Anda

02:35.532 --> 02:38.280
ketahui, yang tidak terkait dengan tipe data.

02:38.280 --> 02:40.840
Itu adalah pekerjaan di balik layar.

02:40.840 --> 02:43.030
JavaScript menambahkan runtime,

02:43.030 --> 02:46.510
ketika melihat nilai tertentu, dan kondisi IF.

02:46.510 --> 02:48.530
Jadi, dengan angka, string dan Boolean, kita mendapatkan

02:48.530 --> 02:50.060
beberapa tipe data inti.

02:50.060 --> 02:51.450
Tentu saja, tidak semua, kita juga

02:51.450 --> 02:53.410
punya objek dan sebagainya, tapi mari kita

02:53.410 --> 02:54.617
fokus pada tipe-tipe ini dan

02:54.617 --> 02:57.330
melihat apa yang Typescript lakukan dengan mereka, atau apa

02:57.330 --> 03:00.930
yang bisa kita lakukan dengan mereka, dengan bantuan Typescript.

03:00.930 --> 03:02.620
Untuk ini, saya kembali ke proyek,

03:02.620 --> 03:05.190
yang kita lihat di modul kursus pertama, dan di

03:05.190 --> 03:07.600
sana saya menunjukkan kepada Anda bahwa semua

03:07.600 --> 03:10.320
yang perlu Anda lakukan, sekarang, jalankan npm

03:10.320 --> 03:12.280
start di terminal, navigasikan ke dalam

03:12.280 --> 03:15.130
folder proyek ini, untuk memutar server pengembangan

03:15.130 --> 03:18.110
langsung ini, yang akan dimuat ulang, setiap kali kita

03:18.110 --> 03:22.300
mengubah sesuatu, dan di sini, saya membuka alamat localhost: 3000 ini di tab

03:22.300 --> 03:24.890
baru browser saya.

03:24.890 --> 03:26.070
Benar tahu, saya mendapatkan error,

03:26.070 --> 03:28.300
karena saya belum memiliki app tray sebagai file.

03:28.300 --> 03:30.380
Tentu saja, Anda akan menemukan proyek awal

03:30.380 --> 03:32.280
ini, semua yang dilampirkan pada kuliah

03:32.280 --> 03:34.400
ini, akan mendapatkan baki aplikasi seperti

03:34.400 --> 03:37.590
file, yang kami coba impor di sini, dalam file html indeks kami, segera

03:37.590 --> 03:42.050
setelah kami mengkompilasi aplikasi. ts dari Typescript ke JavaScript dan kita dapat melakukannya

03:42.050 --> 03:45.070
di tab baru di terminal, sehingga kita tetap menjalankan proses ini dan

03:45.070 --> 03:46.860
membuka tab baru sebagai gantinya, hanya

03:46.860 --> 03:51.117
dengan menjalankan aplikasi tsc. ts dan apa yang dilakukannya adalah, ia

03:53.920 --> 03:56.630
mengkompilasi file Typescript dan mengeluarkan

03:56.630 --> 03:58.680
file JavaScript, dan setelah itu terjadi,

03:58.680 --> 04:01.570
kita dapat memuat ulang halaman ini dan kita mendapatkan

04:01.570 --> 04:05.520
Waktu untuk memulai ... keluaran di sini.

04:05.520 --> 04:08.000
Jadi, sekarang kita memiliki pengaturan ini di sini,

04:08.000 --> 04:10.620
di mana kita dapat menulis beberapa kode Typescript dan kemudian

04:10.620 --> 04:14.650
mengkompilasinya ke kode JavaScript, untuk melihat apa yang dilakukannya.

04:14.650 --> 04:17.000
Sekarang, dengan itu di file Typescript, saya benar-benar

04:17.000 --> 04:18.870
akan menyingkirkan konten di sana, karena

04:18.870 --> 04:21.820
sekarang, saya ingin menyelami tipe data inti ini, yang baru saja

04:21.820 --> 04:23.720
saya tunjukkan pada Anda di slide, sehingga

04:23.720 --> 04:27.230
Anda memahami cara bekerja dengan mereka di Typescript.

04:27.230 --> 04:29.430
Sekarang, mari kita mulai dengan sangat, sangat sederhana.

04:29.430 --> 04:32.240
Katakanlah, kita memiliki fungsi baru, tambahkan, dan

04:32.240 --> 04:34.990
di sana kita mengharapkan dua angka, n1 dan tambahkan

04:34.990 --> 04:38.610
dua, dan itu mengembalikan n1 ditambah n2, seperti itu, fungsi yang sangat

04:38.610 --> 04:42.370
sederhana, tidak ada yang seperti Typescript-ish tentang itu.

04:42.370 --> 04:46.080
Sekarang, kita memiliki dua angka yang ingin kita kerjakan.

04:46.080 --> 04:49.800
Itu bisa jadi nomor1 di sini, yaitu, katakanlah, lima

04:49.800 --> 04:54.680
dan juga nomor2, yang mungkin 2. 8, apa pun yang Anda inginkan,

04:54.680 --> 04:57.060
dua angka di sini.

04:57.060 --> 04:59.820
Sekarang, jelas dan tidak terlalu mengejutkan, kita

04:59.820 --> 05:02.950
dapat menambahkan, atau memanggil fungsi add dan memasukkan

05:02.950 --> 05:05.280
number1 dan number2 sebagai argumen ke fungsi

05:05.280 --> 05:07.320
ini, menyimpan hasilnya dalam konstanta

05:07.320 --> 05:10.360
baru mungkin, dan kemudian untuk melihat sesuatu di layar,

05:10.360 --> 05:15.080
kita dapat konsol.

05:15.080 --> 05:15.080
catat hasilnya.

05:15.080 --> 05:20.080
Jika kita melakukan itu, dan saya mengkompilasi ulang file ini dengan aplikasi tsc. ts, maka halaman ini seharusnya sudah

05:20.270 --> 05:22.730
dimuat ulang secara otomatis.

05:22.730 --> 05:24.350
Jika tidak, tentu saja Anda bisa memuat ulang secara

05:24.350 --> 05:27.010
manual, dan Anda akan melihat 7. 8.

05:27.010 --> 05:30.250
Sekarang, Anda mungkin berpikir, itu tidak terlalu istimewa, bukan?

05:30.250 --> 05:33.650
Ini adalah cuplikan JavaScript yang cukup lurus ke depan dan,

05:33.650 --> 05:37.330
memang, tidak ada yang dilakukan Typescript-ish tentang hal itu.

05:37.330 --> 05:39.450
Nah, mari kita lakukan sesuatu yang akan mengerem

05:39.450 --> 05:41.900
cuplikan itu dalam JavaScript normal.

05:41.900 --> 05:45.100
Katakanlah, input di sini sebenarnya bukan angka, tetapi beberapa

05:45.100 --> 05:48.530
teks, lima dalam teks, dan jika sekarang kita menyimpannya, dan

05:48.530 --> 05:49.880
jalankan kembali perintah

05:49.880 --> 05:53.380
kompilasi kita di sini, Anda akan melihat bahwa, setelah halaman

05:53.380 --> 05:59.530
ini dimuat ulang di sini, saya mendapatkan 52.

05:59.530 --> 05:59.530
8

05:59.530 --> 06:02.200
sebagai output dan itu jelas bukan hasil yang benar dari penambahan ini.

06:02.200 --> 06:04.500
Sekarang, tahukah Anda mengapa kita mendapatkan

06:04.500 --> 06:06.450
output ini dalam JavaScript normal, yang

06:06.450 --> 06:08.670
pada akhirnya kita eksekusi di sini.

06:08.670 --> 06:10.150
Nah, kita mendapatkan output

06:10.150 --> 06:14.710
ini, karena ini bukan hasil dari penjumlahan matematis, tetapi sebaliknya, ini menggabungkan

06:14.710 --> 06:17.760
ini sebagai string, karena input ini, di sini, lima, adalah string

06:17.760 --> 06:21.060
dan kemudian JavaScript melihat, "Oke, saya mendapat string, "Saya

06:21.060 --> 06:23.997
menambahkan sesuatu ke string ini, sementara tentu saja,

06:23.997 --> 06:27.667
"sesuatu ini juga harus dikonversi menjadi string, "sehingga secara keseluruhan,

06:27.667 --> 06:32.097
saya mendapat string, "karena nilai pertama adalah string," dan karenanya, apa yang dilakukan

06:32.097 --> 06:39.240
JavaScript adalah, ia mengubah 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
dari angka ke string, menggabungkan string yang lebih panjang dari lima dan 2. 8, sehingga menghasilkan

06:42.720 --> 06:46.700
52. 8, sebagai string dan mengembalikannya.

06:46.700 --> 06:49.490
Jadi, ini tidak memperlakukannya secara matematis, melainkan

06:49.490 --> 06:50.850
sebagai string, dan dengan JavaScript,

06:50.850 --> 06:52.900
hal ini bisa terjadi.

06:52.900 --> 06:54.037
Sekarang, tentu saja, Anda mungkin berpikir,

06:54.037 --> 06:55.427
"Mengapa saya menulis kode seperti itu?

06:55.427 --> 06:58.160
"Saya adalah pengembang, mengapa saya melakukan kesalahan ini? Nah, mungkin bukan Anda yang membuat kesalahan ini.

06:58.160 --> 07:01.230
Mungkin, ini diambil dari beberapa input pengguna dan Anda

07:01.230 --> 07:04.180
memperkenalkan sedikit bug dalam kode Anda, di mana Anda

07:04.180 --> 07:06.690
lupa untuk mengubah ini, atau Anda bekerja dalam

07:06.690 --> 07:09.350
tim dan Anda memiliki beberapa file skrip, bekerja

07:09.350 --> 07:12.460
bersama, dan beberapa pengembang lain memperkenalkan

07:12.460 --> 07:14.740
kesalahan seperti itu.

07:14.740 --> 07:17.270
Bukan tidak mungkin membuat kesalahan semacam

07:17.270 --> 07:20.110
itu, tetapi bisa jadi sulit untuk melacaknya.

07:20.110 --> 07:22.340
Di sini, tentu saja, cukup jelas bahwa ada sesuatu yang

07:22.340 --> 07:24.010
salah, karena kita memiliki skrip dasar,

07:24.010 --> 07:26.400
tetapi dalam skrip yang lebih besar, Anda mungkin tidak

07:26.400 --> 07:28.320
langsung mengenali bahwa ada sesuatu yang salah

07:28.320 --> 07:31.520
di sini, dan itulah Typescript yang dapat membantu kita.

07:31.520 --> 07:33.720
Kita bisa menambahkan type assignment

07:33.720 --> 07:36.390
dalam fungsi ini, ke parameter kita.

07:36.390 --> 07:38.820
Kita bisa memberitahu Typescript bahwa

07:38.820 --> 07:42.280
kedua parameter ini harus bertipe number dan bukan bertipe,

07:42.280 --> 07:45.340
saya tidak peduli mana yang default.

07:45.340 --> 07:47.535
Jadi, kita melakukannya, dengan menambahkan

07:47.535 --> 07:50.300
titik dua di sini, setelah nilai yang ingin kita tetapkan

07:50.300 --> 07:52.890
jenisnya, jadi, dalam hal ini, setelah nama parameter

07:52.890 --> 07:55.220
dan kemudian nama jenisnya.

07:55.220 --> 07:57.140
Misalnya, number (nomor) akan menjadi salah satu nama yang didukung.

07:57.140 --> 08:00.560
Selain angka, Anda juga punya string, atau Boolean,

08:00.560 --> 08:03.480
tetapi kita akan kembali ke sana.

08:03.480 --> 08:05.990
Untuk saat ini, kita memerlukan angka dan kita tidak

08:05.990 --> 08:07.750
hanya memerlukannya pada parameter

08:07.750 --> 08:10.530
pertama di sini, tetapi juga pada parameter kedua.

08:10.530 --> 08:12.010
Jadi, di sini juga, kita bisa menambahkan

08:12.010 --> 08:16.150
titik dua, dan kemudian angka, dan sekarang, apa yang kita katakan kepada Typescript, adalah,

08:16.150 --> 08:18.367
"Hei, kedua parameter di sini, harus bertipe angka,"

08:18.367 --> 08:22.147
melewatkan nilai dari tipe yang berbeda tidak diperbolehkan, "dan memang, IDE

08:22.147 --> 08:25.530
saya sudah mengeluh di sini, karena Visual Studio Code memiliki dukungan

08:25.530 --> 08:28.360
Typescript bawaan, tetapi bahkan jika kita akan mengabaikan

08:28.360 --> 08:32.510
ini, segera setelah saya mengkompilasi ulang ini, dengan menjalankan kembali aplikasi

08:32.510 --> 08:34.260
tsc. ts, Anda akan melihat,

08:34.260 --> 08:39.193
kita mendapatkan error.

08:40.040 --> 08:41.670
Kita mendapatkan error, bahwa, "Argument

08:41.670 --> 08:42.697
of type '"5" tidak dapat

08:42.697 --> 08:46.250
ditetapkan ke parameter tipe 'number', dan bahkan menunjukkan kepada kita

08:46.250 --> 08:48.660
di mana hal ini terjadi dan memberi kita nomor baris,

08:48.660 --> 08:51.140
baris delapan, dan pada dasarnya menunjukkan kepada

08:51.140 --> 08:54.430
kita hal yang sama, yang ditunjukkan IDE di sini.

08:54.430 --> 08:56.740
Jadi, seandainya kita mengabaikannya di IDE, mengkompilasinya,

08:56.740 --> 08:58.707
sekarang melempar kesalahan, dan itulah

08:58.707 --> 09:01.340
hal penting tentang Typescript.

09:01.340 --> 09:03.284
Ini hanya membantu kita selama kompilasi.

09:03.284 --> 09:06.220
Ini tidak mengubah JavaScript untuk bekerja secara berbeda

09:06.220 --> 09:10.110
pada saat runtime, karena browser tidak memiliki dukungan Typescript bawaan.

09:10.110 --> 09:13.510
Ini hanya dapat membantu kita selama pengembangan, sebelum kita

09:13.510 --> 09:15.700
mengkompilasi kode Typescript kita ke JavaScript,

09:15.700 --> 09:19.310
tetapi di sana, ini sangat berguna, karena menambahkan langkah ekstra,

09:19.310 --> 09:21.520
pemeriksaan kewarasan ekstra, di mana di

09:21.520 --> 09:25.560
sini, kita menemukan, "Oh, kita membuat kesalahan.

09:25.560 --> 09:28.407
"Di sini, ini seharusnya bukan string, ini seharusnya angka",

09:28.407 --> 09:31.660
dan kita bisa memperbaikinya dan kita baik-baik saja.

09:31.660 --> 09:34.210
Inilah yang dilakukan oleh Typescript.

09:34.210 --> 09:35.670
Ini membantu Anda selama pengembangan.

09:35.670 --> 09:37.390
Ini tidak mengubah kode runtime Anda.

09:37.390 --> 09:40.130
Memang, di sini, bahkan dengan pengaturan default,

09:40.130 --> 09:42.800
ia mengkompilasi kesalahan kita di sini, meskipun

09:42.800 --> 09:44.700
ia mendeteksinya selama kompilasi,

09:44.700 --> 09:47.220
dan membuat file yang menyebabkan hasil yang salah,

09:47.220 --> 09:50.690
karena secara default, Typescript tidak masuk, di sini.

09:50.690 --> 09:53.560
Nanti Anda akan belajar, bagaimana Anda dapat memastikan bahwa hal itu terjadi,

09:53.560 --> 09:56.300
tetapi secara default, bahkan tidak memblokir kompilasi.

09:56.300 --> 09:59.260
Namun, ia akan meneriaki Anda dan menunjuk pada kesalahan

09:59.260 --> 10:03.570
ini, supaya Anda bisa memperbaikinya, dan supaya Anda bisa menghindari kesalahan

10:03.570 --> 10:04.850
semacam itu di sini.

10:04.850 --> 10:07.450
Ngomong-ngomong, pastikan Anda tidak

10:07.450 --> 10:09.020
memiliki aplikasi. js dan aplikasi. ts terbuka pada waktu yang sama.

10:09.020 --> 10:11.950
Anda bisa mendapatkan error di sini

10:11.950 --> 10:13.470
dalam IDE, mengenai implementasi fungsi duplikat.

10:13.470 --> 10:15.830
Menutup file JavaScript akan memperbaiki hal ini.
