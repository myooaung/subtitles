WEBVTT

00:02.130 --> 00:03.970
Eğitmen: Öncelikle geliştirme sunucumuzu

00:03.970 --> 00:06.480
burada npm start ile başlatabiliriz ve bu, dosyalarımızı

00:06.480 --> 00:08.440
değişiklikler için izleyeceği için çalıştırmaya

00:08.440 --> 00:10.940
devam etmemiz gereken bir işlemdir.

00:10.940 --> 00:13.270
Ve bir şey değişirse, yani özellikle bir

00:13.270 --> 00:15.620
değişikliği kaydederseniz, kod türlerini

00:15.620 --> 00:17.776
JavaScript'e yeniden derleyecek, JSX'i

00:17.776 --> 00:20.090
JavaScript'e yeniden derleyecek ve sonunda

00:20.090 --> 00:22.500
size react uygulamanızı oluşturacak ve şu

00:22.500 --> 00:25.750
anda çok fazla görmediğiniz yerel ana bilgisayar 3000'de

00:25.750 --> 00:27.630
sunacaktır.

00:27.630 --> 00:29.430
Burada, Dev konsolunda, buradaki çıktı nedeniyle

00:29.430 --> 00:31.800
çalışıyor gibi göründüğünü görebilirsiniz.

00:31.800 --> 00:32.900
Elbette pek bir şey göremiyorsunuz

00:32.900 --> 00:36.700
çünkü burada App'te hiçbir şey oluşturmuyoruz.

00:36.700 --> 00:36.700
şu anda tsx.

00:36.700 --> 00:38.170
Bu elbette değişecektir.

00:38.170 --> 00:39.420
Ve bu hazır ve çalışır durumdayken,

00:39.420 --> 00:41.130
şimdi biraz kod yazalım veya elimizdekileri

00:41.130 --> 00:43.580
analiz edelim.

00:43.580 --> 00:46.750
Dizinde. tsx özel bir şeyimiz yok, değil mi?

00:46.750 --> 00:49.060
Bu normal JavaScript kodudur.

00:49.060 --> 00:52.950
Uygulamada. tsx, bu tür atamasını görüyoruz

00:52.950 --> 00:55.250
ve orada görebildiğimiz şey, bu garip

00:55.250 --> 00:57.980
türü App'e atadığımızdır.

00:57.980 --> 01:00.270
Şimdi, bu türü bir saniyeliğine göz ardı edersek,

01:00.270 --> 01:02.480
App'te gerçekte ne depolanır?

01:02.480 --> 01:04.840
Bir fonksiyon, bir ok fonksiyonu,

01:04.840 --> 01:07.290
ama bu yine de normal bir fonksiyon.

01:07.290 --> 01:09.960
Buradaki tür neden işlev görmüyor ya da bu neden

01:09.960 --> 01:12.570
öğrendiğimiz işlev türlerinden biri değil?

01:12.570 --> 01:14.030
Kaputun altındadır, ancak

01:14.030 --> 01:16.450
bu react tarafından sağlanan bir türdür

01:16.450 --> 01:18.100
ve şimdi, elbette react types

01:18.100 --> 01:21.070
paketi tarafından sağlanan önemlidir.

01:21.070 --> 01:26.070
Node modüllerine girerseniz, burada @types klasörünü görürüz ve orada çok

01:26.390 --> 01:28.470
sayıda tür görürüz ve ayrıca burada

01:28.470 --> 01:30.670
react türlerini, tüm react-dom türlerini

01:30.670 --> 01:32.600
görürüz.

01:32.600 --> 01:35.840
Ve sonuçta, bu türün dolaylı olarak otomatik olarak react

01:35.840 --> 01:39.340
types klasöründen içe aktarıldığını söyleyebilirsiniz.

01:39.340 --> 01:40.870
Şimdi, bu tür nedir?

01:40.870 --> 01:44.490
FC basitçe fonksiyon bileşeni anlamına gelir.

01:44.490 --> 01:46.310
Bunun yerine kullanabileceğiniz daha

01:46.310 --> 01:47.570
uzun bir formu da vardır.

01:47.570 --> 01:49.240
Bu tam olarak aynı tip.

01:49.240 --> 01:51.090
Diğeri sadece bir kısayoldur ve

01:51.090 --> 01:54.300
bu basitçe burada App'te depoladığımız şeyin fonksiyon

01:54.300 --> 01:57.750
olması gerektiğini tanımlar, ancak react'te fonksiyon bileşeni

01:57.750 --> 02:00.550
olarak nitelendirilen bir fonksiyon.

02:00.550 --> 02:02.840
Elbette sınıf tabanlı bileşenler de yazabilirsiniz

02:02.840 --> 02:05.760
ve dolayısıyla burada da klasik bir bileşeniniz var ve o zaman

02:05.760 --> 02:07.420
burada bir fonksiyon yerine bir

02:07.420 --> 02:09.480
sınıf saklamanız gerekecek, ancak bu derste

02:09.480 --> 02:12.720
fonksiyon bileşenlerini kullanacağız.

02:12.720 --> 02:14.670
Şimdi, bu bir fonksiyon bileşenidir

02:14.670 --> 02:17.620
çünkü JSX döndüren bir fonksiyondur ve react'te bir

02:17.620 --> 02:20.850
fonksiyon bileşeni bu şekilde oluşturulur.

02:20.850 --> 02:24.180
Bu return ifadesini geçici olarak kaldırırsam, bunu kaydetmeye

02:24.180 --> 02:26.730
çalıştığımda ve derlemek istediğinde burada

02:26.730 --> 02:28.800
bir hata alabiliriz.

02:28.800 --> 02:32.440
Hata alırız çünkü şimdi TypeScript'e burada bir fonksiyon bileşeni

02:32.440 --> 02:34.960
depolamak istediğimizi söylüyoruz ve depoladığımız

02:34.960 --> 02:38.520
tek şey normal bir fonksiyon, JSX veya react öğesi olarak nitelendirilebilecek

02:38.520 --> 02:42.800
başka bir şey döndüren bir fonksiyon değil.

02:42.800 --> 02:44.440
Dolayısıyla bu geçersiz olacak ve bunu

02:44.440 --> 02:45.810
düzeltmemiz gerekecek.

02:45.810 --> 02:48.530
Burada, TypeScript'in projemizi nasıl biraz geliştirdiğini

02:48.530 --> 02:50.360
zaten görebiliyoruz.

02:50.360 --> 02:52.500
Bize ekstra tip güvenliği sağlar ve örneğin

02:52.500 --> 02:55.420
geçersiz bir bileşen oluşturduğumuz bir durumda çalışamayacağımızdan

02:55.420 --> 02:58.353
emin olmamızı sağlar.

02:59.200 --> 03:03.230
Ek not: Bu return deyimini unutmanız gerçekçi görünmüyorsa,

03:03.230 --> 03:05.370
birden fazla if deyimi ve farklı

03:05.370 --> 03:07.970
return deyimleri içeren daha büyük bir

03:07.970 --> 03:11.070
bileşen oluşturduğunuzu düşünün.

03:11.070 --> 03:14.370
İf deyiminizin bir dalında bir tanesini unutabilirsiniz ve

03:14.370 --> 03:17.010
bu durumda TypeScript kesinlikle kıçınızı kurtarabilir

03:17.010 --> 03:19.130
ve size bu uyarıyı, aksi takdirde bazı durumlarda

03:19.130 --> 03:21.500
çökebileceği çalışma zamanından biraz daha

03:21.500 --> 03:23.710
önce verebilir.

03:23.710 --> 03:25.620
Yani TypeScript bir şeyler yapıyor,

03:25.620 --> 03:27.740
ama bu kadar konuşma yeter.

03:27.740 --> 03:28.690
Hadi bir şeyler inşa edelim

03:28.690 --> 03:31.670
ve burada nispeten basit bir uygulama inşa etmek istiyorum, bir yapılacaklar

03:31.670 --> 03:34.590
uygulaması, oldukça klasik, ancak bu nedenle TypeScript ile react'in

03:34.590 --> 03:36.370
bazı temel kavramlarını uygulamamıza

03:36.370 --> 03:39.480
izin veren bir yapılacaklar uygulaması.

03:39.480 --> 03:41.270
Bu nedenle, sonraki derslerde

03:41.270 --> 03:44.363
ilk özel bileşenlerimizi kullanmaya başlayalım.
