WEBVTT

00:02.260 --> 00:03.920
Eğitmen: Yani, ayrımcılığa uğrayan sendikalar.

00:03.920 --> 00:05.750
Gerçekten çok faydalı.

00:05.750 --> 00:09.060
Bir başka çok kullanışlı özellik de tip dökümdür.

00:09.060 --> 00:12.640
Type casting, TypeScript'in kendi başına algılayamadığı,

00:12.640 --> 00:15.350
ancak geliştirici olarak sizin böyle olacağını

00:15.350 --> 00:19.240
bildiğiniz bir değerin belirli bir türde olduğunu TypeScript'e

00:19.240 --> 00:22.660
söylemenize yardımcı olur.

00:22.660 --> 00:25.030
Bunun için iyi bir örnek, X'i dom'daki

00:25.030 --> 00:27.120
bir şeye götürmemizdir.

00:27.120 --> 00:29.560
Diyelim ki burada dom alanında sadece bir paragrafımız

00:29.560 --> 00:33.390
var, içinde başka hiçbir şey yok ve bu boş bir paragraf.

00:33.390 --> 00:35.190
Açıkçası bunu kaydedersek, burada,

00:35.190 --> 00:37.150
ekranda hiçbir şey görmeyiz.

00:37.150 --> 00:38.950
Şimdi buradaki kodumuzun içinden

00:38.950 --> 00:40.543
o paragrafa erişebiliriz.

00:43.160 --> 00:48.160
Örneğin, belge sorgu seçicisi P ile Const paragrafı.

00:49.180 --> 00:51.890
Şimdi sorgu seçicisini kullandığımızda ve P'yi seçici

00:51.890 --> 00:54.500
olarak ilettiğimizde, yani P etiketi tarafından

00:54.500 --> 00:57.070
seçildiğinde, TypeScript aslında, üzerine gelirsem

00:57.070 --> 00:59.510
görebileceğiniz gibi, bunun paragraf öğesi

00:59.510 --> 01:02.480
türünde olacağını veya boş olacağını bulabilir, çünkü

01:02.480 --> 01:07.050
belki de sayfada böyle bir öğe yoktur, ancak bu farklı bir şeydir.

01:07.050 --> 01:09.920
Şimdilik or null durumunu göz ardı edelim.

01:09.920 --> 01:12.400
Önemli olan, TypeScript'in bunun bir paragraf

01:12.400 --> 01:14.600
öğesi olduğunu gerçekten bulmasıdır.

01:14.600 --> 01:16.800
Şimdi, başka bir şeye göre, diyelim ki bir kimliğe

01:16.800 --> 01:18.460
göre seçersek bu durum değişir.

01:18.460 --> 01:22.020
Buraya mesaj-çıktı adını veriyoruz, dolayısıyla bu paragrafın mesaj-çıktı

01:22.020 --> 01:23.920
şeklinde bir kimliği var.

01:23.920 --> 01:25.890
Geliştirici olarak elbette bu kimliği

01:25.890 --> 01:28.360
bu paragrafa atadığımızı biliyoruz, ancak TypeScript

01:28.360 --> 01:29.780
bunu bilmiyor.

01:29.780 --> 01:33.020
TypeScript HTML dosyalarımızın içine dalıp

01:33.020 --> 01:34.590
onları analiz etmez.

01:34.590 --> 01:37.360
Şimdi burada, örneğin getElementById

01:37.360 --> 01:41.720
ile bu kimliğe göre seçim yaparsak, TypeScript'in bunun sadece

01:41.720 --> 01:45.130
bir HTML öğesi veya null olduğu sonucunu çıkardığını

01:45.130 --> 01:49.830
görürüz, bunun hangi belirli HTML öğesi olduğunu bilmez.

01:49.830 --> 01:52.720
Şimdi, bir paragraf için bu çok önemli olmayabilir,

01:52.720 --> 01:54.830
belki de sadece herhangi bir HTML öğesiyle

01:54.830 --> 01:57.290
yapabileceğimiz şeyleri yapmak istiyoruz,

01:57.290 --> 01:59.990
örneğin, metin içeriğine veya buna benzer bir şeye

01:59.990 --> 02:01.470
erişmek.

02:01.470 --> 02:03.220
Peki ya burada bir girdimiz olsaydı?

02:03.220 --> 02:07.750
Peki ya aslında metin türünde bir girişimiz varsa ve kullanıcının girdiği

02:07.750 --> 02:10.430
değeri almak istiyorsak, buna user-input

02:10.430 --> 02:12.760
şeklinde bir ID vereceğim ve şimdi bunu

02:12.760 --> 02:15.500
TypeScript kodumda seçeceğim.

02:15.500 --> 02:17.730
Burada user-input kimliğine göre seçiyorum

02:17.730 --> 02:21.530
ve artık bir paragraf değil, userInputElement.

02:21.530 --> 02:24.023
Şimdi bir geliştirici olarak, burada bu girdi öğesine

02:24.909 --> 02:26.700
ulaştığımızı biliyoruz, ancak dediğim

02:26.700 --> 02:28.530
gibi, TypeScript bunu bilmiyor.

02:28.530 --> 02:31.140
TypeScript HTML kodumuzu okumaz, bu nedenle TypeScript

02:31.140 --> 02:34.435
yalnızca bunun bir HTML öğesi olduğunu bilir.

02:34.435 --> 02:37.860
Şimdi, bu nedenle bunun value özelliğini

02:37.860 --> 02:45.000
ayarlamak istersem ve userInputElement.

02:45.000 --> 02:45.000
değeri

02:45.000 --> 02:47.050
eşittir merhaba, aslında bir hata aldığımı görüyorsunuz.

02:47.050 --> 02:48.960
Bir hata alıyorum çünkü birincisi,

02:48.960 --> 02:50.780
bu nesne muhtemelen null.

02:50.780 --> 02:54.220
Bunu, bundan sonra bir ünlem işareti ekleyerek

02:54.220 --> 02:56.210
düzeltebiliriz ve buna birazdan

02:56.210 --> 02:58.390
geri döneceğim, ancak o zaman

02:58.390 --> 03:01.640
bile HTML Element türünde değer bulunmadığına

03:01.640 --> 03:03.890
dair bir hata alıyorum çünkü temelde

03:03.890 --> 03:08.343
herhangi bir HTML öğesinin tür olarak sahip olduğu bu genel tür,

03:08.343 --> 03:14.510
belirli HTML öğelerine özgü özellikleri desteklemiyor.

03:14.510 --> 03:17.540
Dolayısıyla, TypeScript'e burada seçtiğimiz şeyin

03:17.540 --> 03:20.860
aslında sadece null olmadığını değil, aynı zamanda

03:20.860 --> 03:25.080
HTMLInputElement türünde olduğunu da söylememiz gerekir.

03:25.080 --> 03:28.240
Tip dökümü ile yapabileceğimiz şey de budur.

03:28.240 --> 03:31.153
Şimdi, tip dökümünün iki yolu, kullanabileceğimiz

03:31.153 --> 03:34.170
iki sözdizimi vardır ve bunlar eşdeğerdir.

03:34.170 --> 03:36.971
Birincisi, dönüştürmek istediğimiz şeyin önüne

03:36.971 --> 03:41.920
veya TypeScript'e yazmasını söylemek istediğimiz yere bir şey eklememizdir.

03:41.920 --> 03:44.170
Açılı parantezleri açıp kapatıyoruz ve

03:44.170 --> 03:45.810
sonra bu parantezlerin arasına,

03:45.810 --> 03:49.480
açılı parantezlerden sonra gelen şeyin türünü ekliyoruz.

03:49.480 --> 03:51.223
Bu durumda, HTMLInputElement.

03:53.110 --> 03:54.970
Ve bu tür global olarak kullanılabilir

03:54.970 --> 03:57.963
çünkü tsconfig dosyamda dom lib'i dahil ediyorum.

03:59.180 --> 04:00.810
Bununla birlikte, TypeScript

04:00.810 --> 04:03.830
burada köşeli parantezlerden sonra seçtiğimiz her

04:03.830 --> 04:06.530
şeyin HTMLInputElement türünde olacağını bilir

04:06.530 --> 04:08.950
ve bu nedenle artık şikayet etmez.

04:08.950 --> 04:10.330
Yani, bu birinci versiyon.

04:10.330 --> 04:12.830
Bunu kopyalayıp yorumlayayım ve size

04:12.830 --> 04:14.750
alternatifini göstereyim.

04:14.750 --> 04:18.000
Bu kesinlikle iyi çalışıyor ve bunu kullanabilirsiniz.

04:18.000 --> 04:21.210
Bununla birlikte, React'i biliyorsanız, React bileşenlerinize

04:21.210 --> 04:24.400
JSX kodu yazdığınız React dosyaları için bunu kullanıyorsanız,

04:24.400 --> 04:29.200
JavaScript veya TypeScript içinde de böyle bir köşeli ayraç sözdizimine

04:29.200 --> 04:33.550
sahip olduğunuzu bilirsiniz.

04:33.550 --> 04:36.060
Eğer React'i bilmiyorsanız, bu size pek bir şey ifade etmeyebilir.

04:36.060 --> 04:40.800
React projelerinde benzer bir sözdiziminin bulunduğunu ve orada köşeli parantezlerin

04:40.800 --> 04:43.320
kullandığınız türlerle ilgili herhangi bir

04:43.320 --> 04:47.480
bilgi iletmek için kullanılmadığını, bunun yerine bazı derleme araçları

04:47.480 --> 04:50.390
ve nihayetinde ekranda ne işlemek istediğinizi bilmek

04:50.390 --> 04:54.390
için React tarafından ayrıştırıldığını unutmayın.

04:54.390 --> 04:56.750
Yani, TypeScript'ten tamamen bağımsız.

04:56.750 --> 04:59.880
TypeScript ekibi, JSX sözdizimiyle çakışmamak

04:59.880 --> 05:01.900
için bu açılı ayraç tipi dökümüne

05:01.900 --> 05:04.350
bir alternatif sunar.

05:04.350 --> 05:06.450
Ayrıca, döküm yapmak istediğiniz şeyden

05:06.450 --> 05:07.920
sonra bir şey ekleyebilirsiniz,

05:07.920 --> 05:09.960
yani bu durumda bu seçimden sonra ve

05:09.960 --> 05:12.600
bu şey as anahtar sözcüğüdür.

05:12.600 --> 05:14.740
Ve sonra burada bunu dökmek istediğiniz

05:14.740 --> 05:16.750
türü tekrar eklersiniz.

05:16.750 --> 05:19.970
Şimdi bu, TypeScript'e önündeki ifadenin,

05:19.970 --> 05:23.730
bu durumda buradaki ifadenin, HTMLInputElement

05:23.730 --> 05:27.405
türünde bir değer vereceğini söyler.

05:27.405 --> 05:30.067
Bu nedenle, yine hata almayız.

05:30.067 --> 05:31.650
Dolayısıyla, bu bir alternatiftir

05:31.650 --> 05:33.940
ve iki sözdiziminden birini kullanabilirsiniz,

05:33.940 --> 05:36.350
hangisini tercih ederseniz edin, sadece projeniz

05:36.350 --> 05:38.990
boyunca tutarlı olmaya çalışmalısınız, böylece bu

05:38.990 --> 05:42.377
iki sözdizimi arasında geçiş yapmazsınız.

05:42.377 --> 05:45.220
Bu sayede, bu değerli ekstra bilgiyi TypeScript'e

05:45.220 --> 05:47.480
aktarabilir ve TypeScript kendi başına

05:47.480 --> 05:50.400
bunun bir HTMLInputElement verdiğini bulamayacak

05:50.400 --> 05:52.760
olsa bile bu gibi kodların çalışmasını

05:52.760 --> 05:56.000
sağlayabilirsiniz.

05:56.000 --> 05:57.940
Elbette, TypeScript'i bu türü kullanmaya

05:57.940 --> 06:00.420
zorladığınız için, bu ifadenin ortaya çıkardığı

06:00.420 --> 06:02.200
her şeyin bu türde olmasını sağlamak

06:02.200 --> 06:05.620
geliştirici olarak sizin sorumluluğunuzdadır.

06:05.620 --> 06:07.700
Aksi takdirde, bu öğeyle aslında desteklenmeyen

06:07.700 --> 06:09.920
bir şekilde etkileşime girmeye çalışırsanız

06:09.920 --> 06:12.780
çalışma zamanında bir hata veya beklenmedik bir davranışla

06:12.780 --> 06:14.423
karşılaşabilirsiniz.

06:15.610 --> 06:18.060
Dolayısıyla, tip dökümü güçlü bir özelliktir.

06:18.060 --> 06:20.490
Buradaki ünlem işareti de öyle.

06:20.490 --> 06:22.590
Aslında bu konuyu kursun başlarında

06:22.590 --> 06:24.820
biraz incelemiştim.

06:24.820 --> 06:27.470
Bu ünlem işareti, TypeScript'e önündeki

06:27.470 --> 06:31.090
ifadenin asla null vermeyeceğini söylememizi sağlar.

06:31.090 --> 06:33.170
Ve bu, dom'dan null döndürebilecek

06:33.170 --> 06:35.070
bir şey seçtiğinizde buradaki

06:35.070 --> 06:38.010
gibi bazı ifadeler için gereklidir.

06:38.010 --> 06:40.980
Geliştirici olarak bunun asla null döndürmeyeceğini biliyorsak,

06:40.980 --> 06:43.690
bu ünlem işaretini kullanabiliriz.

06:43.690 --> 06:45.470
Aksi takdirde, ki bunu zaten

06:45.470 --> 06:48.248
öğrendiniz, bunu tekrarlamak istiyorum.

06:48.248 --> 06:49.380
Aksi takdirde, bunun null döndürmeyeceğinden

06:49.380 --> 06:52.600
emin değilseniz, bir if kontrolü kullanabilirsiniz.

06:52.600 --> 06:56.070
Böylece userInputElement öğesinin true olup olmadığını ve dolayısıyla null olup

06:56.070 --> 06:57.510
olmadığını kontrol edebilir ve ardından

06:57.510 --> 06:59.440
bunu orada kullanabilirsiniz.

06:59.440 --> 07:02.720
Şimdi, bu durumda tür dökümünü kaldırmak zorunda kaldım çünkü

07:02.720 --> 07:04.670
burada tür dökümü yaparsak, TypeScript'e

07:04.670 --> 07:07.170
bunun null olmayacağını da söylemiş oluruz ve

07:07.170 --> 07:10.470
bundan emin olmadığım için burada döküm yapamam.

07:10.470 --> 07:13.120
Bunun yerine, değeri kullandığımda bunu burada yapmam

07:13.120 --> 07:14.290
gerekiyor ve bu nedenle bunu

07:14.290 --> 07:16.600
değer özelliğine erişmeden önce, aşağıdaki gibi

07:16.600 --> 07:19.820
HTMLInputElement olarak ekleyerek yapmak istiyorum.

07:19.820 --> 07:21.530
Ancak bu elbette başarısız olacaktır.

07:21.530 --> 07:24.060
Bu geçersiz bir sözdizimidir, bir HTMLInputElement

07:24.060 --> 07:28.030
şeyindeki bir değer özelliğine erişmeye çalışırsınız ve bu mantıklı

07:28.030 --> 07:30.280
bile değildir.

07:30.280 --> 07:33.010
Basitçe bu ifadeyi parantez içine almamız, ardından

07:33.010 --> 07:35.670
önce bunun değerlendirildiğinden emin olmamız ve ardından

07:35.670 --> 07:37.590
bu ifadenin sonucundaki değere erişmeye

07:37.590 --> 07:39.480
çalışmamız gerekir.

07:39.480 --> 07:41.650
Ve şimdi ünlem işareti kullanmak için bir

07:41.650 --> 07:42.893
alternatifimiz var.
