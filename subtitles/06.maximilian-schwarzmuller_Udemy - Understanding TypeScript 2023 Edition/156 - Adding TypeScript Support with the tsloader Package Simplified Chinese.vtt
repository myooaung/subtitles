WEBVTT

00:02.290 --> 00:03.910
教师：要告诉Webpack如何处理TypeScript文件,

00:03.910 --> 00:08.830
我们需要在此处向配置对象添加一个新条目｡

00:08.830 --> 00:11.510
这就是模块属性｡ 

00:11.510 --> 00:14.020
模块还接受JavaScript对象,

00:14.020 --> 00:15.470
然后对其进行配置｡

00:15.470 --> 00:17.440
一个模块最终只是一个文件, 所以在这里我们告诉Webpack如何处理它找到的文件,

00:17.440 --> 00:22.940
就像处理应用程序一样｡

00:22.940 --> 00:22.940
ts文件,

00:22.940 --> 00:27.290
然后也一旦它理解了该文件, 如何处理文件中的所有导入｡

00:27.290 --> 00:29.800
那么Webpack应该如何处理这些文件呢？

00:29.800 --> 00:33.640
我们通过在这里添加一个rules数组来告诉Webpack,

00:33.640 --> 00:37.300
因为您可以设置多个应用于所有文件的规则｡

00:37.300 --> 00:40.690
这里我们只需要一个规则, 但是在更复杂的项目中,

00:40.690 --> 00:44.030
您还希望使用Webpack来处理CSS文件､

00:44.030 --> 00:49.220
图像或类似的任何内容, 您可以为不同类型的文件添加更多规则｡

00:49.220 --> 00:51.500
正如前面提到的, 官方文档是学习更多关于加载器的好地方,

00:51.500 --> 00:59.720
最终你可以用它来教Webpack更多关于不同文件的知识, 以及学习更多关于Webpack的一般知识｡

00:59.720 --> 01:02.560
所以在这里, 我们实际上将添加这样一个加载程序｡ 

01:02.560 --> 01:06.110
加载器只是一个告诉Webpack如何处理某些文件的包,

01:06.110 --> 01:07.780
当然, 在这里, 我们得到了ts加载器,

01:07.780 --> 01:13.690
它帮助我们告诉Webpack如何处理TypeScript文件｡

01:13.690 --> 01:16.850
因此, 我们添加了一个规则, 它只是一个JavaScript对象,

01:16.850 --> 01:19.720
其中我们首先添加了一个测试属性｡

01:19.720 --> 01:22.950
这描述了Webpack将对找到的任何文件执行的测试,

01:22.950 --> 01:28.550
以确定此处的规则是否适用于该文件｡

01:28.550 --> 01:31.080
这里的测试是正则表达式｡ 

01:31.080 --> 01:36.950
我想告诉Webpack任何以结尾的文件｡

01:36.950 --> 01:36.950
TS应该被使用或者应该被这个规则处理｡

01:39.860 --> 01:42.940
检查文件扩展名的正则表达式可以在此处使用反斜杠,

01:42.940 --> 01:47.550
然后使用｡ ts, 然后是美元符号｡

01:47.550 --> 01:54.593
这是我们的正则表达式, 它告诉Webpack您要检查以结尾的文件｡

01:54.593 --> 01:54.593
ts.

01:55.560 --> 01:58.810
然后, 您还必须指定Webpack应该如何处理这些文件,

01:58.810 --> 02:02.590
您可以在此处使用use关键字来完成此操作｡

02:02.590 --> 02:07.590
在这里, 您指定加载器Webpack应该使用（在我的例子中）ts-loader｡

02:07.590 --> 02:12.720
因此, 我们告诉Webpack, 它找到的任何TypeScript文件都应该由TypeScript加载器处理,

02:12.720 --> 02:16.010
然后TypeScript加载器知道如何处理这样的文件｡

02:16.010 --> 02:20.330
ts-loader将自动获取tsconfig｡

02:20.330 --> 02:20.330
json文件,

02:20.330 --> 02:23.430
所以我们不需要在这里指定任何额外的配置｡

02:23.430 --> 02:26.050
只有一个永远不会有问题的配置,

02:26.050 --> 02:33.773
将节点模块作为正则表达式排除, 这样Webpack也不会试图查看节点模块｡

02:35.130 --> 02:38.400
因此, 我们需要在模块配置之后添加一个额外的配置,

02:38.400 --> 02:42.800
即resolve键｡

02:42.800 --> 02:49.750
在那里, 我们告诉Webpack它将哪些文件扩展名添加到它找到的导入中｡

02:49.750 --> 02:52.440
我说Webpack会自己添加扩展,

02:52.440 --> 02:56.160
默认情况下, 它会寻找｡ js档案｡ 

02:56.160 --> 02:59.220
这里是我们希望Webpack查找的内容｡  ts文件, 然后在解析中,

02:59.220 --> 03:01.280
我们可以添加一个扩展属性, 将其设置为等于一个数组,

03:01.280 --> 03:08.390
并告诉Webpack它应该查找｡

03:08.390 --> 03:08.390
ts文件以及.

03:08.390 --> 03:10.640
js档案｡ 

03:10.640 --> 03:13.360
所以现在Webpack基本上会寻找这样的文件,

03:13.360 --> 03:18.723
然后捆绑所有具有这些扩展名的文件, 将它们一起导入｡

03:19.760 --> 03:22.770
这就是我们目前几乎完成的设置,

03:22.770 --> 03:26.150
我们的配置文件至少目前几乎完成｡

03:26.150 --> 03:28.730
这样我们也应该转到tsconfig,

03:28.730 --> 03:33.070
并在那里确保将sourceMap设置为true｡

03:33.070 --> 03:37.130
这将帮助我们调试代码, Webpack也支持这一点｡

03:37.130 --> 03:41.340
我们现在还需要添加一个条目, 可能在output下面,

03:41.340 --> 03:43.710
这是一个devtool键｡

03:43.710 --> 03:48.510
在这里, 值应该是字符串形式的inline-source-map｡

03:48.510 --> 03:51.620
然后, 这会告诉Webpack已经生成了源地图,

03:51.620 --> 04:03.603
它应该提取这些地图, 并基本上正确地连接到它生成的包, 这样, 当我们得到这样一个包时, 我们仍然有一个很好的开发体验｡

04:05.830 --> 04:09.823
现在, 我们可以使用Webpack, 问题是我们如何使用它？

04:11.000 --> 04:16.650
使用它的一个简单方法是转到包｡  json文件, 然后添加一个脚本｡

04:16.650 --> 04:18.440
例如, 构建｡ 

04:18.440 --> 04:21.620
您可以在脚本部分为它指定任何名称｡

04:21.620 --> 04:23.930
在这里, 只需运行Webpack,

04:23.930 --> 04:26.453
就像这样输入Webpack｡

04:27.560 --> 04:29.880
我们现在转到dist文件夹,

04:29.880 --> 04:32.993
最后删除其中的所有内容, 保存后, 运行npm

04:34.000 --> 04:38.663
run build, 看看是否可以正常工作｡

04:39.970 --> 04:43.000
失败了...

04:45.440 --> 04:47.800
是的, 我只是打错了, 那不应该是devtools,

04:47.800 --> 04:51.440
而是devtool｡

04:51.440 --> 04:53.830
因此, 在配置文件中将其更改为devtool,

04:53.830 --> 04:56.143
现在让我们重复npm run build｡

04:59.500 --> 05:02.620
这样你就可以忽略这里的警告了｡ 

05:02.620 --> 05:06.410
您将看到在dist文件中有一个捆绑的js文件｡

05:06.410 --> 05:09.960
你在这里看到的代码已经很难读了,

05:09.960 --> 05:14.060
因为我们在这里实际上是在缩小｡

05:14.060 --> 05:18.680
所以这实际上也已经是这个优化的代码了｡ 

05:18.680 --> 05:21.410
现在, 在我们了解如何处理不同的配置之前,

05:21.410 --> 05:26.120
我们先来看看索引｡

05:26.120 --> 05:26.120
html文件,

05:26.120 --> 05:30.350
并在此处调整我们导入和点绑定｡

05:30.350 --> 05:30.350
js,

05:30.350 --> 05:32.220
现在, 由于我们还没有使用Webpack Dev

05:32.220 --> 05:38.480
Server, 让我们运行npm start来启动该索引｡

05:38.480 --> 05:38.480
html文件｡ 

05:38.480 --> 05:40.510
如果你现在重新加载这个页面,

05:40.510 --> 05:44.890
你会看到这个工作！

05:44.890 --> 05:46.610
如果我们在这里输入一些内容,

05:46.610 --> 05:52.030
我们的项目就会正常工作, 并且它会在这里导入捆绑的js文件, 所以只需要一个文件,

05:52.030 --> 05:56.200
而不是所有这些单独的文件｡

05:56.200 --> 05:59.020
这已经是一个增强｡ 

05:59.020 --> 06:05.410
这里我们已经有了避免所有这些不必要的htp请求的捆绑代码｡

06:05.410 --> 06:07.690
如果您转到“源代码”选项卡, 并且希望调试代码,

06:07.690 --> 06:09.420
您会找到这个Webpack文件夹,

06:09.420 --> 06:15.300
在其中有一个源代码文件夹, 您可以在其中找到TypeScript文件｡

06:15.300 --> 06:22.110
例如, 在这里, 在project-input上, 你也可以在gatherUserInput上设置一个断点,

06:22.110 --> 06:27.680
如果你现在按下按钮, 它会在那里暂停, 你可以调试你的代码｡

06:27.680 --> 06:29.650
这就是即将到来的源代码映射,

06:29.650 --> 06:31.200
它确实有助于我们的开发,

06:31.200 --> 06:34.050
使我们作为开发人员的生活更轻松｡

06:34.050 --> 06:40.750
我们得到了这个优化的代码, 但是由于源代码映射, 我们可以在这里调试原始的TypeScript代码｡

06:40.750 --> 06:43.260
我们已经有了一个非常棒的设置,

06:43.260 --> 06:46.280
它已经为我们提供了很多优化, 现在让我们完成这个,

06:46.280 --> 06:48.440
并确保我们实际上包含了Webpack

06:48.440 --> 06:58.443
Dev Server, 然后我们实际上有两个工作流, 一个用于生产, 一个用于开发｡
