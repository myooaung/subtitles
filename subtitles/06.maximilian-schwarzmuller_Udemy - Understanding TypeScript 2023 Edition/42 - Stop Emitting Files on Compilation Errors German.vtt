WEBVTT

00:02.050 --> 00:04.370
Ausbilder: Wir können isolierte Module nicht ignorieren,

00:04.370 --> 00:05.880
aber es gibt noch eine andere Möglichkeit,

00:05.880 --> 00:08.000
die hier eigentlich gar nicht erwähnt wird, die

00:08.000 --> 00:10.810
ich aber trotzdem erwähnen möchte.

00:10.810 --> 00:14.680
Und das ist die Option no emit on error.

00:14.680 --> 00:16.200
Sie können dies auf true oder false

00:16.200 --> 00:18.820
setzen, die Standardeinstellung ist false.

00:18.820 --> 00:19.653
Was bewirkt dies nun?

00:19.653 --> 00:21.330
Wenn wir ihn auf false setzen, möchte ich Ihnen

00:21.330 --> 00:23.050
zeigen, wo das ein Problem sein könnte.

00:23.050 --> 00:26.530
Es ist ein Problem, wenn wir einen Fehler einführen, oder es kann

00:26.530 --> 00:27.590
ein Problem sein.

00:27.590 --> 00:30.690
Nehmen wir an, ich habe meine Schaltfläche und entferne

00:30.690 --> 00:32.410
dieses Ausrufezeichen.

00:32.410 --> 00:34.750
Auch wenn wir nicht ganz verstehen, was hier vor

00:34.750 --> 00:38.030
sich geht, besteht das Problem einfach darin, dass TypeScript nicht

00:38.030 --> 00:40.610
weiß, dass wir hier eine Schaltfläche haben.

00:40.610 --> 00:42.790
Nach allem, wenn die Abfrage für eine Schaltfläche,

00:42.790 --> 00:45.990
die wir möglicherweise nicht erhalten, wenn es kein Element in der DOMs,

00:45.990 --> 00:47.540
die diesen Selektor erfüllt, dann wird

00:47.540 --> 00:48.800
dies jetzt zurück.

00:48.800 --> 00:50.910
Und das ist im Grunde das, worüber sich TypeScript beschwert.

00:50.910 --> 00:54.849
Hier greifen wir auf ein potenzielles Null-Objekt

00:54.849 --> 00:57.200
zu, und das ist nicht gut.

00:57.200 --> 00:59.300
Das ist ein Fehler, den wir hier haben.

00:59.300 --> 01:02.120
Wenn wir unseren Code kompilieren, erhalten wir

01:02.120 --> 01:04.770
auch diesen Fehler hier in der Konsole.

01:04.770 --> 01:08.210
Die Datei wird dennoch erstellt.

01:08.210 --> 01:11.660
Also selbst wenn ich die App lösche. jsfile wird sie neu erstellt.

01:11.660 --> 01:13.910
Selbst wenn ein Fehler auftritt, erstellt

01:13.910 --> 01:16.300
TypeScript eine JavaScript-Datei.

01:16.300 --> 01:18.740
Dies kann gewollt oder ungewollt sein.

01:18.740 --> 01:21.360
Vielleicht haben Sie einen Fehler in Ihrer TypeScript-Datei und wissen

01:21.360 --> 01:22.980
nicht so recht, wie Sie ihn umgehen können, aber

01:22.980 --> 01:26.000
Sie wissen, dass er in der endgültigen Anwendung kein Problem darstellen wird.

01:26.000 --> 01:29.410
Wie hier, auch wenn wir das Ausrufezeichen nicht kennen.

01:29.410 --> 01:31.577
Nun, wenn wir das Ausrufezeichen nicht kennen,

01:31.577 --> 01:35.900
wissen wir vielleicht nicht, wie wir diesen Fehler abstellen können.

01:35.900 --> 01:39.630
Aber wir wissen trotzdem, dass dies auf unserer Seite hier funktionieren wird.

01:39.630 --> 01:41.890
Wir könnten also trotz des Fehlers mit der

01:41.890 --> 01:43.630
Kompilierung zurechtkommen.

01:43.630 --> 01:45.570
Aber in Wirklichkeit sollten Sie natürlich

01:45.570 --> 01:48.850
fehlerfreie Projekte anstreben und lieber lernen, wie Sie dieses

01:48.850 --> 01:51.720
Problem umgehen können, als es zu ignorieren.

01:51.720 --> 01:54.590
Sie können diese Option jedoch auch auf false oder gar

01:54.590 --> 01:57.590
nicht setzen, da false die Standardeinstellung ist,

01:57.590 --> 02:00.687
wenn Sie mit der Erzeugung von JavaScript-Dateien im Fehlerfall

02:00.687 --> 02:02.590
einverstanden sind.

02:02.590 --> 02:04.240
Wenn Sie dies auf true setzen,

02:04.240 --> 02:07.700
werden jedoch keine problematischen Dateien

02:07.700 --> 02:09.100
erzeugt.

02:09.100 --> 02:10.910
Wenn ich das jetzt noch einmal mache...

02:12.440 --> 02:15.110
Sie sehen, es wird eigentlich nichts erzeugt.

02:15.110 --> 02:18.180
Auch die Analytik. ts-Datei wird nicht

02:18.180 --> 02:21.440
ausgegeben, wenn wir neben der Konsole

02:21.440 --> 02:26.440
noch andere Inhalte haben. Log, sehen Sie, dass es nicht erzeugt wird.

02:26.550 --> 02:27.560
Und der Grund dafür ist,

02:27.560 --> 02:29.600
dass wir einen Fehler in der Datei haben.

02:29.600 --> 02:32.940
Und wenn eine Datei nicht kompiliert werden kann, werden keine

02:32.940 --> 02:34.300
Dateien ausgelassen.

02:34.300 --> 02:35.810
Hier müssen wir also sicherstellen,

02:35.810 --> 02:38.850
dass wir diesen Fehler beheben, bevor wir TypeScript dazu bringen können,

02:38.850 --> 02:40.890
wieder Dateien für uns zu kompilieren.

02:40.890 --> 02:43.530
Daher ist dies eine Option, die ich in der Regel gerne einstelle,

02:43.530 --> 02:46.830
weil ich nicht daran interessiert bin, JavaScript-Dateien zu erhalten,

02:46.830 --> 02:49.703
wenn ich noch Fehler in meinen TypeScript-Dateien habe.
