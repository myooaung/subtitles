WEBVTT

00:02.273 --> 00:05.100
ผู้สอน: เราได้ดูมัณฑนากรจำนวนมาก คุณทำงานกับพวกเขาอย่างไร

00:05.100 --> 00:07.340
คุณจะกำหนดค่าได้อย่างไร คุณจะทำสิ่งต่างๆ

00:07.340 --> 00:11.367
กับพวกเขาได้อย่างไร คุณทำอะไรกับพวกเขาได้บ้าง

00:11.367 --> 00:17.340
หวังว่าสิ่งนี้จะแสดงให้คุณเห็นถึงความซับซ้อนแต่ยังรวมถึงพลังของนักตกแต่งและวิธีคิดเกี่ยวกับมัน

00:17.340 --> 00:18.898
วิธีใช้มัน

00:18.898 --> 00:22.370
คุณไม่เพียงแค่สามารถสร้างมัณฑนากรของคุณเองได้เท่านั้น

00:22.370 --> 00:28.590
แต่ยังมีระบบนิเวศที่หลากหลายจากแพ็คเกจและเฟรมเวิร์กที่ต้องพึ่งมัณฑนากรอีกด้วย

00:28.590 --> 00:30.670
ตัวอย่างเช่น ตัวตรวจสอบคลาส

00:30.670 --> 00:32.789
หากคุณค้นหา "ts class validator"

00:32.789 --> 00:41.680
คุณจะพบแพ็คเกจซึ่งโดยพื้นฐานแล้วมีการใช้ตรรกะการตรวจสอบความถูกต้องที่กำหนดเองอย่างละเอียดมากขึ้นซึ่งเราดำเนินการอยู่

00:41.680 --> 00:44.140
คุณสามารถเพิ่มแพ็คเกจนี้ในโครงการใดก็ได้ที่คุณกำลังทำอยู่

00:44.140 --> 00:48.030
จากนั้นคุณสามารถนำเข้ามัณฑนากรหรือโรงงานมัณฑนากรจำนวนมากอย่างที่คุณเห็น

00:48.030 --> 00:51.660
เนื่องจากเราดำเนินการที่นี่

00:51.660 --> 00:53.350
เพิ่มลงในคุณสมบัติของคุณ โดยมีหรือไม่มีการกำหนดค่าเพิ่มเติม

00:53.350 --> 01:08.950
ขึ้นอยู่กับตัวตรวจสอบความถูกต้องที่เป็นอยู่ และเบื้องหลังสิ่งนี้จะจัดการรีจิสทรีดังกล่าว คุณสามารถพูดได้ เช่น วัตถุการกำหนดค่าในตอนท้าย ให้จัดเก็บการตั้งค่าตัวตรวจสอบความถูกต้องของคุณสำหรับรายการต่างๆ คุณสมบัติในคลาสต่างๆ ของคุณ

01:08.950 --> 01:11.810
จากนั้นให้วิธีการตรวจสอบความถูกต้องแก่คุณ ซึ่งคุณนำเข้ามาจากแพ็คเกจด้วย

01:11.810 --> 01:14.150
ซึ่งคุณสามารถดำเนินการและส่งผ่านวัตถุของคุณไป

01:14.150 --> 01:20.540
เพื่อใช้ตรรกะการตรวจสอบความถูกต้องทั้งหมดที่คุณตั้งค่าในคลาส

01:20.540 --> 01:22.840
โดยพื้นฐานแล้ว มันคือการทำสิ่งที่เราเพิ่งทำไป

01:22.840 --> 01:27.830
แค่มีตัวตรวจสอบความถูกต้องเพิ่มขึ้น และด้วยการทำงานอย่างหนักเพื่อคุณ

01:27.830 --> 01:30.630
แต่แน่นอนว่าการทำความเข้าใจโดยทั่วไปว่าสิ่งนี้ทำงานอย่างไรนั้นช่วยได้

01:30.630 --> 01:34.143
เนื่องจากเราสร้างมันขึ้นเองที่นี่ในเวอร์ชันที่ไร้เดียงสามากขึ้น

01:35.010 --> 01:36.490
ตอนนี้นอกจากแพ็คเกจนี้แล้ว

01:36.490 --> 01:38.370
เรายังมี Angular อีกด้วย

01:38.370 --> 01:41.502
Angular เป็นเฟรมเวิร์กที่ฉันได้กล่าวถึงก่อนหน้านี้

01:41.502 --> 01:43.942
ซึ่งต้องอาศัยตัวตกแต่งเป็นอย่างมาก

01:43.942 --> 01:51.301
เช่น ตัวตกแต่งคอมโพเนนต์นี้ ซึ่งช่วยให้คุณกำหนดโค้ด HTML ไดนามิก ซึ่งเจาะเข้าไปในคุณสมบัติของคลาสของคุณด้วย

01:51.301 --> 02:00.170
ไวยากรณ์พิเศษที่เพิ่มโดย Angular เพื่อแสดงเนื้อหาแบบไดนามิกบนหน้าจอ

02:00.170 --> 02:03.360
ดังนั้นที่นี่ Angular จึงทำมากกว่าแค่เสนอตัวตกแต่งเหล่านี้

02:03.360 --> 02:06.250
แต่ตัวตกแต่งเป็นส่วนสำคัญของ Angular

02:06.250 --> 02:07.280
และสุดท้าย แต่ไม่ท้ายสุด

02:07.280 --> 02:10.130
ฉันต้องการแสดงให้คุณเห็น NestJS

02:10.130 --> 02:13.190
NestJS เป็นเฟรมเวิร์ก JavaScript ฝั่งเซิร์ฟเวอร์สำหรับ

02:13.190 --> 02:15.487
Node js ซึ่งใช้ตัวพิมพ์อย่างหนัก

02:15.487 --> 02:20.010
และยังรวมเอามัณฑนากรไว้ด้วย

02:20.010 --> 02:23.270
ที่นั่นคุณใช้ตัวตกแต่งเพื่อกำหนดตัวควบคุมและกำหนดเส้นทาง

02:23.270 --> 02:26.730
วิธีการที่ผู้ใช้ต้องใช้กับคำขอ HTTP เพื่อเรียกใช้ฟังก์ชันบางอย่าง

02:26.730 --> 02:36.890
และตัวตกแต่งอื่นๆ อีกมากมายที่คุณสามารถใช้เพื่อดึงข้อมูลจากคำขอที่เข้ามา และอื่นๆ

02:36.890 --> 02:41.370
ดังนั้น เฟรมเวิร์กนี้ก็เช่นกัน ขอเสนอตัวตกแต่งเหล่านี้ทั้งหมดให้คุณ

02:41.370 --> 02:44.640
เพื่อให้คุณสามารถเพิ่มมันในคุณสมบัติของคุณ ในเมธอดของคุณ

02:44.640 --> 02:50.060
ในคลาสของคุณ และเพิ่มฟังก์ชันการทำงานพิเศษ ซึ่งเฟรมเวิร์กก็จะคำนึงถึงเมื่อมัน

02:50.060 --> 02:52.828
รันโค้ดของคุณ

02:52.828 --> 02:59.070
ดังนั้น อีกครั้ง มัณฑนากรจะใช้สำหรับการเขียนโปรแกรมเมตาเพื่อเพิ่มการกำหนดค่าพิเศษ

02:59.070 --> 03:02.977
ตรรกะพิเศษ ซึ่งในกรณีนี้ โค้ดนอกเฟรมเวิร์ก

03:02.977 --> 03:09.886
ซึ่งรันโค้ดของคุณหรือที่ทำงานร่วมกับโค้ดของคุณ

03:09.886 --> 03:12.000
และนั่นสำหรับมัณฑนากร

03:12.000 --> 03:16.090
หวังว่าจะให้ภาพรวมที่ดีเกี่ยวกับสิ่งที่คุณทำได้กับนักตกแต่ง

03:16.090 --> 03:19.563
เหตุใดจึงมีประโยชน์มาก และวิธีการทำงานโดยทั่วไป
