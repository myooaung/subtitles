WEBVTT

00:02.260 --> 00:03.960
المدرب: بهذا نكون على وشك الانتهاء من

00:03.960 --> 00:04.920
الأنواع الأساسية.

00:04.920 --> 00:07.470
هناك نوع آخر رأيناه بالفعل

00:07.470 --> 00:09.390
، وهو أي نوع.

00:09.390 --> 00:11.480
أي نوع هو النوع الأكثر مرونة الذي يمكنك

00:11.480 --> 00:13.310
تعيينه في TypeScript.

00:13.310 --> 00:16.710
هذا النوع لا يخبر TypeScript بأي شيء.

00:16.710 --> 00:19.960
يعني هذا في الأساس أنه يمكنك تخزين أي نوع من القيمة هناك.

00:19.960 --> 00:22.031
ليس لدينا نوع معين من التخصيص.

00:22.031 --> 00:25.260
لن يصرخ TypeScript في الأساس عند

00:25.260 --> 00:27.040
استخدام أي منها.

00:27.040 --> 00:28.030
مرة أخرى في الكود

00:28.030 --> 00:31.360
الخاص بنا هنا ، إذا قمت بتعيين نوع الأنشطة المفضلة على أي

00:31.360 --> 00:32.870
منها ، فلن أحصل على خطأ.

00:32.870 --> 00:36.580
إذا تم تعيينه على أي مصفوفة ، فأنا على الأقل أخبر TypeScript

00:36.580 --> 00:39.220
أن الأنشطة المفضلة هي مجموعة من الأشياء.

00:39.220 --> 00:41.460
لذلك إذا قمت بتخزين قيمة واحدة فقط هناك

00:41.460 --> 00:42.830
، فسأحصل على خطأ.

00:42.830 --> 00:44.500
ولكن طالما أنها مصفوفة ،

00:44.500 --> 00:46.638
يمكنني تخزين كل ما أريده هناك.

00:46.638 --> 00:49.840
لذا فإن أي منها مرن حقًا.

00:49.840 --> 00:52.070
ويمكن أن يبدو هذا رائعًا في البداية

00:52.070 --> 00:54.060
، ولكنه في الواقع يمثل عيبًا

00:54.060 --> 00:58.290
كبيرًا وتريد تمامًا تجنب أي شيء كلما أمكن ذلك.

00:58.290 --> 01:00.170
لأن أي شيء يزيل بشكل أساسي جميع

01:00.170 --> 01:02.512
المزايا التي يوفرها لك TypeScript.

01:02.512 --> 01:04.380
يمنحك نفس التجربة التي

01:04.380 --> 01:06.430
لديك مع Vanilla JavaScript

01:06.430 --> 01:10.480
حيث يتعين عليك أيضًا استخدام أي نوع في كل شيء.

01:10.480 --> 01:13.820
أي يتأكد بشكل أساسي من أن برنامج التحويل البرمجي

01:13.820 --> 01:16.020
TypeScript لا يمكنه التحقق من

01:16.020 --> 01:19.180
أي شيء ، لأنه إذا كان بإمكان أي خاصية أو أي متغير

01:19.180 --> 01:20.818
تخزين أي قيمة ، فليس هناك

01:20.818 --> 01:23.687
الكثير للتحقق ، أليس كذلك؟

01:23.687 --> 01:27.130
لذا يمكنك استخدام أي منها كإجراء احتياطي إذا كان لديك

01:27.130 --> 01:30.270
بعض القيمة ، نوع من البيانات حيث لا يمكنك حقًا

01:30.270 --> 01:31.810
معرفة نوع البيانات التي

01:31.810 --> 01:33.820
سيتم تخزينها هناك وحيث ربما تستخدم

01:33.820 --> 01:37.050
بعد ذلك بعض عمليات التحقق من وقت التشغيل ، كما فعلنا

01:37.050 --> 01:40.440
هنا ، في وقت التشغيل لتضييق نطاق ما تريد القيام به

01:40.440 --> 01:42.660
لقيم معينة.

01:42.660 --> 01:44.600
ثم يمكنك الذهاب مع أي.

01:44.600 --> 01:48.210
لكن في حالات أخرى ، تريد حقًا تجنب أي شيء.

01:48.210 --> 01:51.120
إذا كانت لديك فرصة لمعرفة نوع البيانات

01:51.120 --> 01:54.090
التي تعمل بها ، فكن صريحًا بشأنها.

01:54.090 --> 01:56.780
دع الاستدلال من TypeScript يقوم بعمله أو قم بتعيين

01:56.780 --> 01:58.817
الأنواع الخاصة بك بشكل صريح.

01:58.817 --> 02:01.783
لا تعود إلى أي منها إذا لم تكن بحاجة لذلك.
