WEBVTT

00:02.190 --> 00:04.860
-Ik wil beginnen met de naamruimtefunctie.

00:04.860 --> 00:06.810
Om te laten zien hoe het werkt,

00:06.810 --> 00:09.980
pak ik deze twee interfaces erbij.

00:09.980 --> 00:11.480
De drag and drop interfaces,

00:11.480 --> 00:14.140
knip ze uit app. ts en voeg een nieuw

00:14.140 --> 00:19.140
bestand toe, dragdropinterfaces. ts bijvoorbeeld.

00:21.270 --> 00:25.180
Nu kunnen we het daarin plakken en om namespaces te gebruiken

00:25.180 --> 00:29.140
hoeven we alleen maar het sleutelwoord namespace toe te voegen

00:31.645 --> 00:33.620
en dan accolades.

00:33.620 --> 00:35.880
Nu moeten we ook deze naamruimte een

00:35.880 --> 00:39.590
naam geven en hier noem ik hem DD Interfaces voor een drag and

00:39.590 --> 00:41.660
drop, de naam is echter aan jou.

00:41.660 --> 00:43.640
Nu is dit jaar een TypeScript functie,

00:43.640 --> 00:45.250
geen JavaScript functie.

00:45.250 --> 00:47.750
Het is niet gecompileerd naar Vanilla JavaScript

00:47.750 --> 00:50.340
omdat er geen direct equivalent voor is.

00:50.340 --> 00:54.860
In plaats daarvan zal TypeScript het compileren tot een

00:54.860 --> 00:55.693
object.

00:55.693 --> 00:57.490
Naar een object waar de dingen

00:57.490 --> 01:00.440
die je dan in de namespace zet worden opgeslagen op

01:00.440 --> 01:02.140
properties, maar daar hoef je

01:02.140 --> 01:06.960
je geen zorgen over te maken omdat al het resolven van de toegang tot die properties

01:06.960 --> 01:10.640
en dat alles werkt wordt verzorgd door TypeScript.

01:10.640 --> 01:13.940
Dus nu kunnen we deze interfaces verplaatsen naar de naamruimte

01:13.940 --> 01:16.130
en daarmee zijn we bijna klaar.

01:16.130 --> 01:18.040
Nu hebben we echter één probleem:

01:18.040 --> 01:22.280
deze interfaces zijn nu alleen beschikbaar in deze naamruimte.

01:22.280 --> 01:23.113
Trouwens, je

01:23.113 --> 01:25.530
kunt niet alleen interfaces in een namespace

01:25.530 --> 01:27.070
zetten, je kunt er alles in

01:27.070 --> 01:28.057
zetten, klassen,

01:28.057 --> 01:30.780
constanten, wat je maar wilt.

01:30.780 --> 01:33.900
Wat je maar wilt, kun je in een naamruimte zetten.

01:33.900 --> 01:35.630
Dus eigenlijk kun je een naamruimte om

01:35.630 --> 01:37.150
elke code die je hebt wikkelen.

01:37.150 --> 01:39.830
Maar het probleem is dat deze functies,

01:39.830 --> 01:41.140
deze interfaces nu

01:41.140 --> 01:44.800
alleen beschikbaar zijn binnen die naamruimte.

01:44.800 --> 01:47.280
Zoals je ziet, hebben we niets anders daarbinnen.

01:47.280 --> 01:49.010
Nu zouden we natuurlijk de code die

01:49.010 --> 01:51.600
ervan afhangt weer in deze namespace kunnen brengen,

01:51.600 --> 01:53.370
maar dan zouden we daar weer tegenaan

01:53.370 --> 01:56.960
blazen omdat blijkt dat we een vrij lange klasse hebben die van deze

01:56.960 --> 01:58.940
interfaces afhangt.

01:58.940 --> 02:02.900
We hebben de projectlijst klasse en de project item klasse.

02:02.900 --> 02:05.260
Ze zijn afhankelijk van deze interfaces,

02:05.260 --> 02:08.922
dus zouden we veel moeten toevoegen aan die naamruimte.

02:08.922 --> 02:10.205
Daarom kun je het sleutelwoord

02:10.205 --> 02:14.210
export voor een interface zetten om een functie uit een naamruimte

02:14.210 --> 02:16.850
te exporteren.

02:16.850 --> 02:19.680
Nu betekent dit dat deze interfaces beschikbaar

02:19.680 --> 02:22.110
zijn binnen deze naamruimte, maar

02:22.110 --> 02:24.487
ook buiten dit bestand.

02:24.487 --> 02:26.100
En we zullen zo zien hoe dit

02:26.100 --> 02:28.510
werkt, maar daarmee maken we deze interface

02:28.510 --> 02:30.710
of wat we ook exporteren.

02:30.710 --> 02:32.815
Dit is natuurlijk niet beperkt

02:32.815 --> 02:36.610
tot interfaces die ook buiten dit bestand beschikbaar zijn

02:36.610 --> 02:41.140
als we die namespace dan in principe importeren of gebruiken.

02:41.140 --> 02:41.973
En natuurlijk kun

02:41.973 --> 02:44.580
je niet alleen interfaces in een namespace exporteren,

02:44.580 --> 02:45.636
maar alles.

02:45.636 --> 02:48.010
Daarmee is de vraag, hoe importeren

02:48.010 --> 02:50.310
we deze naamruimte nu terug in

02:50.310 --> 02:52.410
de app. ts en daarvoor heeft

02:52.410 --> 02:56.210
TypeScript een speciale syntaxis die u kunt gebruiken.

02:56.210 --> 02:57.867
Laten we teruggaan naar de top van de app. ts en hier voeg

02:57.867 --> 03:01.440
je drie forward slashes toe, belangrijk drie, niet slechts

03:01.440 --> 03:03.690
twee want dit is eigenlijk geen normaal

03:03.690 --> 03:06.150
commentaar wat we nu maken dit zal eigenlijk

03:06.150 --> 03:07.330
syntax opgepikt worden

03:07.330 --> 03:10.280
door TypeScript een speciaal commentaar, je zou

03:10.280 --> 03:13.110
kunnen zeggen TypeScript begrijpt het als het

03:13.110 --> 03:15.500
begint met drie slashes.

03:15.500 --> 03:19.301
Daar schrijf je een zelfsluitende XML-tag,

03:19.301 --> 03:21.600
dus haakje openen, dan haakje

03:21.600 --> 03:24.530
sluiten en in hun referentiepad

03:24.530 --> 03:25.790
gelijk aan en

03:25.790 --> 03:29.220
dan hier de naam van het bestand dat je

03:29.220 --> 03:32.370
wilt importeren.

03:32.370 --> 03:35.217
In mijn geval hier dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Dit wordt begrepen en opgepikt door TypeScript, want zoals ik

03:42.550 --> 03:45.220
al zei met de drie beginnende schuine strepen, het is

03:45.220 --> 03:47.560
een speciale syntaxis die TypeScript begrijpt,

03:47.560 --> 03:50.110
net zoals het deze referentie begrijpt.

03:50.110 --> 03:51.960
Dit is geen Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript merkt het niet

03:53.970 --> 03:58.480
en dit is niet hoe het eruit zal zien zodra het is gecompileerd.

03:58.480 --> 04:00.430
Nu, wat bereikt hij dan?

04:00.430 --> 04:05.070
Dit bereikt dat nu deze namespace DD Interfaces beschikbaar

04:05.070 --> 04:07.104
is in app. ts.

04:07.104 --> 04:08.920
Maar als je naar beneden scrolt, zie je dat

04:08.920 --> 04:11.040
mijn redactie nog steeds klaagt en als we het probeerden

04:11.040 --> 04:12.250
op te slaan zoals we allemaal

04:12.250 --> 04:14.300
doen goede compilatiefouten.

04:14.300 --> 04:16.410
Het lijkt dus niet beschikbaar te zijn.

04:16.410 --> 04:19.730
De sleepbare interface lijkt hier niet beschikbaar te zijn.

04:19.730 --> 04:22.386
Nou, er is iets speciaals met namespaces.

04:22.386 --> 04:25.840
Je kunt ze gebruiken om je code op te splitsen en vergeet

04:25.840 --> 04:27.930
niet toen ik eerder zei dat wat je in

04:27.930 --> 04:29.610
een naamruimte hebt, overal

04:29.610 --> 04:32.557
in die naamruimte kan worden gebruikt.

04:32.557 --> 04:34.157
Nou, het blijkt dat je namespaces

04:34.157 --> 04:37.580
kunt splitsen over meerdere bestanden door dingen te exporteren

04:37.580 --> 04:39.110
in een namespace en dan deze

04:39.110 --> 04:42.330
speciale import syntax te gebruiken, maar dan moet

04:42.330 --> 04:45.230
je de dingen die iets willen gebruiken uit die import

04:45.230 --> 04:51.797
namespace of uit dat geïmporteerde bestand in dezelfde namespace zetten.

04:51.797 --> 04:55.050
Daarom is DD Interfaces misschien niet de beste naam.

04:55.050 --> 04:58.010
Misschien heten we gewoon App.

04:58.010 --> 04:59.740
Nu, als we hier als app benoemen, kunnen

04:59.740 --> 05:01.670
we naar app gaan. ts en maak hier

05:01.670 --> 05:04.180
een gelijknamige namespace aan,

05:04.180 --> 05:05.630
namespace App.

05:05.630 --> 05:06.890
En nu even alles hier

05:06.890 --> 05:10.750
in die namespace en nu zie je dat de fout weg is Er zijn

05:10.750 --> 05:12.610
geen rode puntjes meer aan

05:12.610 --> 05:14.300
de rechterkant.

05:14.300 --> 05:15.513
Maar als ik dat heb opgeslagen,

05:15.513 --> 05:17.850
krijg ik hier nog steeds fouten.

05:17.850 --> 05:22.850
Bijvoorbeeld, die afgewerkte projectlijst wordt niet gebruikt.

05:25.010 --> 05:26.300
Nou, dat klopt

05:26.300 --> 05:28.210
ik gebruik dat niet.

05:28.210 --> 05:29.600
Ik heb het ook niet nodig, dus

05:29.600 --> 05:32.610
we kunnen deze concepten hier gewoon verwijderen.

05:32.610 --> 05:35.190
Daarmee, als we dit opslaan, compileert

05:35.190 --> 05:38.040
het nu zonder fouten.

05:38.040 --> 05:39.880
De vraag is alleen wat is het resultaat

05:39.880 --> 05:41.920
van deze compilatie?

05:41.920 --> 05:44.260
Hebben we nu één of twee dossiers?

05:44.260 --> 05:46.170
Nou, laten we eens kijken naar

05:46.170 --> 05:49.380
de schijfmap en daar zie je een App JS bestand en

05:49.380 --> 05:50.780
dan wat code hier en een

05:50.780 --> 05:53.980
drag and drop interface JS bestand.

05:53.980 --> 05:56.690
Dus we hebben twee bestanden als resultaat.

05:56.690 --> 05:59.500
Nu is het dragon drop interface bestand eigenlijk vrij

05:59.500 --> 06:00.830
leeg, omdat je geleerd hebt

06:00.830 --> 06:04.360
dat interfaces in principe nergens naar worden gecompileerd.

06:04.360 --> 06:07.300
Er is geen JavaScript-equivalent voor een interface.

06:07.300 --> 06:09.270
Het is een pure TypeScript-functie.

06:09.270 --> 06:12.370
Dus we kunnen het importeren met de TypeScript syntax hier om het

06:12.370 --> 06:15.509
te gebruiken en alle typeverbeteringen te krijgen die we geleerd

06:15.509 --> 06:17.300
hebben, maar in productie maakt het

06:17.300 --> 06:20.060
niet uit of het in een apart bestand staat of niet.

06:20.060 --> 06:21.840
Dus de vraag is natuurlijk

06:21.840 --> 06:26.380
wat als we nu iets dat in productie bestaat, dat ook in JavaScript

06:26.380 --> 06:28.630
bestaat, in een apart bestand

06:28.630 --> 06:30.000
zetten.

06:30.000 --> 06:33.373
Bijvoorbeeld, doet enum en de project klasse

06:35.520 --> 06:36.470
hier, ik pak

06:36.470 --> 06:37.610
beide, maak een

06:37.610 --> 06:41.410
nieuw bestand, project dash model TS en zet daar

06:41.410 --> 06:46.040
mijn project status enum en project klasse in.

06:46.040 --> 06:47.420
Nu kunnen we net als voorheen

06:47.420 --> 06:49.070
hier een namespace toevoegen,

06:49.070 --> 06:50.590
de naam moet App zijn, dus het

06:50.590 --> 06:51.790
moet een namespace zijn

06:51.790 --> 06:54.020
waar we het dan ook willen gebruiken en we

06:54.020 --> 06:57.340
moeten deze functies daarin exporteren, zodat we ze kunnen

06:57.340 --> 06:59.450
gebruiken in andere bestanden in dezelfde

06:59.450 --> 07:00.440
namespace, maar ook

07:00.440 --> 07:02.640
in andere bestanden.

07:02.640 --> 07:03.980
Nu terug in de app. ts, we moeten

07:03.980 --> 07:05.900
dat tweede bestand importeren.

07:05.900 --> 07:07.890
Dus ik dupliceer deze import

07:07.890 --> 07:11.515
en alle import project dash model ts.

07:11.515 --> 07:13.800
als ik dat heb opgeslagen en nu is het gecompileerd

07:13.800 --> 07:16.610
en zien we een projectmodel JavaScript bestand.

07:16.610 --> 07:18.184
En daarin zien we

07:18.184 --> 07:19.490
wat code.

07:19.490 --> 07:22.770
De vraag is, werkt onze toepassing nu?

07:22.770 --> 07:24.620
Laten we het daarvoor opnieuw laden

07:25.480 --> 07:27.587
en proberen een project toe te voegen en

07:27.587 --> 07:29.070
je ziet dat we een foutmelding

07:29.070 --> 07:29.903
krijgen.

07:29.903 --> 07:33.183
Kan property active van undefined niet lezen.

07:34.120 --> 07:36.090
De reden daarvoor is simpelweg dat onze

07:36.090 --> 07:38.854
bestanden standalone worden gecompileerd.

07:38.854 --> 07:41.410
Namespaces bestaan in TypeScript wereld zoals

07:41.410 --> 07:44.640
ik al zei, er is geen JavaScript equivalent voor.

07:44.640 --> 07:47.430
Dus het probleem dat we hier hebben is dat in de TypeScript-wereld

07:47.430 --> 07:48.263
alles geweldig is

07:48.263 --> 07:51.610
omdat TypeScript alles kan vinden wat we nodig hebben.

07:51.610 --> 07:52.800
Bijvoorbeeld, wanneer

07:52.800 --> 07:54.420
ik hier project zeg, wanneer

07:54.420 --> 07:56.310
ik hier naar het projecttype verwijs

07:56.310 --> 07:58.130
in de projectstaatklasse, is dit

07:58.130 --> 08:00.610
projecttype, deze projectklasse gedefinieerd

08:00.610 --> 08:02.840
in het projectmodel.

08:02.840 --> 08:06.020
Nu klaagt TypeScript niet over je onvolledigheid omdat we

08:06.020 --> 08:07.570
dat model importeren, maar import

08:07.570 --> 08:10.250
betekent hier eigenlijk alleen maar dat we TypeScript

08:10.250 --> 08:13.960
vertellen waar dat type te vinden is zodra het gecompileerd is naar

08:13.960 --> 08:15.810
JavaScript, ontkoppeling wordt

08:15.810 --> 08:18.150
in principe vernietigd.

08:18.150 --> 08:20.840
Dus wanneer JavaScript code wordt uitgevoerd

08:20.840 --> 08:23.230
en we vervolgens proberen een nieuw project

08:23.230 --> 08:25.130
te maken door project te instantiëren,

08:25.130 --> 08:27.430
vindt JavaScript deze projectklasse of

08:27.430 --> 08:29.610
constructorfunctie niet.

08:29.610 --> 08:32.980
We moeten er dus voor zorgen dat we de verbinding verbreken.

08:32.980 --> 08:35.420
En daarvoor kunnen we naar de TS gaan

08:35.420 --> 08:39.640
(mompelt) en daar deze out file optie instellen.

08:39.640 --> 08:40.740
We kunnen dit becommentariëren

08:40.740 --> 08:43.010
en het idee achter het out-bestand

08:43.010 --> 08:45.540
is dat je TypeScript vertelt dat het namespaces

08:45.540 --> 08:48.620
moet samenvoegen.

08:48.620 --> 08:49.670
Dus deze verwijzingen,

08:49.670 --> 08:51.740
die het heeft tijdens het compileren in een

08:51.740 --> 08:53.950
enkel JavaScript-bestand in plaats van het

08:53.950 --> 08:56.970
compileren van meerdere JavaScript-bestanden.

08:56.970 --> 08:59.210
Dus hier voor uit kunnen we zeggen dat we een

08:59.210 --> 09:02.350
bestand in de schijfmap willen hebben, die we misschien bundel

09:02.350 --> 09:04.770
hebben genoemd. js En als we dat doen

09:05.630 --> 09:07.050
en opslaan, krijgen we

09:07.050 --> 09:08.700
hier een foutmelding.

09:09.650 --> 09:10.710
We krijgen een foutmelding

09:12.300 --> 09:14.410
dat alleen AMD en systeemmodules worden

09:14.410 --> 09:17.250
ondersteund naast out file.

09:17.250 --> 09:19.540
Nu, we hoeven hier niet alles te begrijpen Er

09:19.540 --> 09:23.160
zijn in principe verschillende manieren om verschillende JavaScript-bestanden

09:23.160 --> 09:26.120
te laden of te bundelen in één om historische redenen en

09:26.120 --> 09:28.770
hoe het allemaal ontwikkeld is en u kunt meer leren

09:28.770 --> 09:31.250
over deze verschillende gebundelde types in een

09:31.250 --> 09:33.700
bijgevoegde bron als u dat wilt, maar dat hoeft

09:33.700 --> 09:35.340
niet.

09:35.340 --> 09:36.800
Dus wat we hier eigenlijk

09:36.800 --> 09:38.120
moeten doen, is de module

09:38.120 --> 09:40.470
die hier al als fout is gemarkeerd, niet

09:40.470 --> 09:41.598
op gewone JS zetten,

09:41.598 --> 09:43.943
maar op AMD bijvoorbeeld.

09:45.400 --> 09:47.700
Als we dat doen, compileert het zonder problemen,

09:47.700 --> 09:50.010
hoewel het hier nog steeds klaagt, maar het

09:50.010 --> 09:52.140
pikte niet op dat ik het veranderde en

09:52.140 --> 09:53.860
wat er nu gebeurt is dat er een nieuw

09:53.860 --> 09:56.570
bundel JS bestand in dist is.

09:56.570 --> 10:00.310
Als ik alle JavaScript-bestanden in de schijfmap

10:00.310 --> 10:04.680
verwijder en ik start mijn TSC dash opnieuw op, zodat de compiler

10:04.680 --> 10:05.580
alleen die bundel

10:05.580 --> 10:08.600
JS-bestanden genereert.

10:08.600 --> 10:11.530
Dit bestand bevat al onze code in de gecompileerde

10:11.530 --> 10:13.250
en vertaalde versie en dus

10:13.250 --> 10:15.400
nu in index HTML, we hoeven hier

10:15.400 --> 10:20.300
alleen maar bundel JS te importeren in plaats van App JS.

10:20.300 --> 10:23.610
En als we dat doen en we herladen hier, hebben we weer

10:23.610 --> 10:25.830
een werkende applicatie waar we alles

10:25.830 --> 10:28.260
kunnen verslepen omdat het nu allemaal

10:28.260 --> 10:30.410
in één bestand staat, maar alleen

10:30.410 --> 10:32.661
in het eindresultaat.

10:32.661 --> 10:34.230
Tijdens de ontwikkeling

10:34.230 --> 10:36.260
hebben we deze namespaces hier,

10:36.260 --> 10:39.030
wat een stap in de goede richting is omdat

10:39.030 --> 10:41.970
het al wat beter beheersbaar is.

10:41.970 --> 10:44.350
Laten we dit nu opsplitsen in nog meer bestanden

10:44.350 --> 10:47.250
voordat we de gemiddelde splitsingsoptie TS modules

10:47.250 --> 10:48.283
bekijken.
