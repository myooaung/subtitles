WEBVTT

00:02.310 --> 00:03.940
Homem: Então temos dois problemas,

00:03.940 --> 00:06.500
se quisermos chamá-los assim, para resolvê-los.

00:06.500 --> 00:07.820
Agora quero começar com

00:07.820 --> 00:10.960
a questão de que os projetos aparecem em ambas as caixas.

00:10.960 --> 00:13.050
Quero introduzir alguma filtragem

00:13.050 --> 00:15.980
e o melhor lugar para filtrar é, é claro,

00:15.980 --> 00:18.930
nossa função de ouvinte.

00:18.930 --> 00:22.743
Se formos ao local onde registramos nosso ouvinte,

00:26.000 --> 00:29.170
aqui na cláusula da lista de projetos.

00:29.170 --> 00:32.270
Então, aqui, obtemos uma lista de projetos, certo?

00:32.270 --> 00:36.170
Agora, essa lista de projetos compreende todos os projetos.

00:36.170 --> 00:39.400
Agora, dentro da cláusula da lista de projetos, porém, estamos

00:39.400 --> 00:43.140
interessados apenas em projetos ativos ou terminados.

00:43.140 --> 00:44.250
Agora, aqui, a propósito,

00:44.250 --> 00:49.103
também poderíamos teoricamente usar nosso enumeral, mas, na verdade, preciso

00:50.660 --> 00:53.160
dos valores concretos armazenados no enumeral

00:53.160 --> 00:56.440
lá embaixo ou no tipo lá embaixo e, portanto, aqui não quero

00:56.440 --> 00:58.990
usar um enumeral sempre porque quero mostrar

00:58.990 --> 01:02.180
os tipos literais de cordas.

01:02.180 --> 01:06.190
Portanto, o que faremos aqui dentro de nossa função de ouvinte é, antes

01:06.190 --> 01:08.690
de armazenarmos os projetos e os entregarmos,

01:08.690 --> 01:10.470
queremos filtrá-los.

01:10.470 --> 01:13.020
Portanto, aqui temos nossos projetos relevantes,

01:13.020 --> 01:16.660
pode-se dizer, e isso é, naturalmente, projetos filtrados.

01:16.660 --> 01:19.070
O método de filtragem é um método padrão que

01:19.070 --> 01:21.460
existe em qualquer array em JavaScript.

01:21.460 --> 01:23.690
Isto requer uma função que então executa

01:23.690 --> 01:26.820
em cada item daquela matriz de projetos e quando esta

01:26.820 --> 01:29.660
função aqui retorna verdadeiro, nós mantemos

01:29.660 --> 01:30.940
o item em uma matriz recém-criada

01:30.940 --> 01:35.040
que é então armazenada em projetos relevantes.

01:35.040 --> 01:38.130
Se esta função retornar falso, deixamos o item, não

01:38.130 --> 01:39.770
da lista original, mas na nova

01:39.770 --> 01:41.660
lista que é gerada e que é armazenada

01:41.660 --> 01:44.230
em projetos relevantes.

01:44.230 --> 01:46.600
Portanto, aqui, temos que retornar verdadeiro ou falso,

01:46.600 --> 01:48.810
dependendo se queremos ou não manter o projeto.

01:48.810 --> 01:52.430
E para isso, é claro, só precisamos olhar para o status.

01:52.430 --> 01:55.310
O status do projeto é um enumero e queremos

01:55.310 --> 01:59.070
verificar se o status do projeto é igual ao status do projeto

01:59.070 --> 02:03.590
ativo se estivermos em uma lista de projetos ativa, então se o tipo

02:03.590 --> 02:05.790
de propriedade estiver ativo,

02:05.790 --> 02:07.940
ou se o status do projeto estiver

02:07.940 --> 02:12.270
concluído se estivermos em uma lista concluída.

02:12.270 --> 02:15.430
Portanto, aqui eu vou realmente escrever a- um

02:15.430 --> 02:17.250
corpo funcional real, embrulhando

02:17.250 --> 02:20.100
isto com chaves encaracoladas, não usando

02:20.100 --> 02:23.480
o atalho da função de seta e então podemos verificar,

02:23.480 --> 02:25.540
se este tipo é igual ativo, então

02:26.800 --> 02:31.480
eu quero retornar o resultado desta verificação aqui e, portanto, simplesmente

02:31.480 --> 02:34.130
após esta se declaração, eu quero retornar

02:34.130 --> 02:40.160
a comparação para o status do projeto terminado.

02:40.160 --> 02:42.220
Com isso, obtemos nossos projetos relevantes

02:42.220 --> 02:43.520
que agora podemos armazenar

02:43.520 --> 02:45.490
aqui, em projetos designados.

02:45.490 --> 02:47.070
Então, vamos ver agora se funciona.

02:47.070 --> 02:48.053
Se eu recarregar,

02:49.310 --> 02:51.570
e acrescentarmos um projeto aqui, isto

02:51.570 --> 02:52.743
funciona?

02:54.950 --> 02:55.930
Isto funciona e,

02:55.930 --> 02:58.050
vejam, só é adicionado a projetos ativos,

02:58.050 --> 03:00.020
não a projetos concluídos.

03:00.020 --> 03:02.390
No entanto, se eu acrescentar um segundo projeto aqui,

03:02.390 --> 03:04.740
ainda temos essa duplicação em andamento.

03:04.740 --> 03:08.720
Agora, isso está relacionado com a forma como realizamos nossos projetos.

03:08.720 --> 03:10.520
Dentro dos projetos de renderização,

03:10.520 --> 03:13.430
nós sempre analisamos todos os itens de nossos projetos

03:13.430 --> 03:15.090
e os anexamos à lista.

03:15.090 --> 03:16.640
Agora, o problema com

03:16.640 --> 03:19.900
isso, é claro, é que já podemos ter um item de projeto

03:19.900 --> 03:21.950
renderizado na tela.

03:21.950 --> 03:25.020
Agora, a melhor solução possível aqui seria fazer

03:25.020 --> 03:27.450
uma espécie de comparação onde você verifica

03:27.450 --> 03:30.170
o que já foi renderizado e o que você precisa renderizar,

03:30.170 --> 03:31.730
para evitar uma renderização

03:31.730 --> 03:34.110
desnecessária.

03:34.110 --> 03:35.760
No entanto, executar esta comparação

03:35.760 --> 03:39.710
olhando para o DOM real também custa um pouco de desempenho.

03:39.710 --> 03:43.100
Para esta aplicação aqui, é, portanto, perfeitamente correto simplesmente

03:43.100 --> 03:45.250
pegar nosso elemento de lista e limpar todo

03:45.250 --> 03:49.640
o seu conteúdo, colocando o HTML interno em uma string vazia, o que significa que nos

03:49.640 --> 03:53.710
livramos de todos os itens da lista e depois re-renderizamos.

03:53.710 --> 03:56.350
Isso significa que sempre que acrescentamos um novo projeto,

03:56.350 --> 03:58.470
estamos apresentando todos os projetos, mas,

03:58.470 --> 04:00.210
para o propósito deste projeto aqui,

04:00.210 --> 04:01.670
para esta aplicação aqui, isso

04:01.670 --> 04:03.490
é absolutamente bom.

04:03.490 --> 04:05.410
Portanto, agora com isso, se salvarmos

04:05.410 --> 04:06.987
isso, vamos tentar de novo.

04:06.987 --> 04:10.540
"Será que isto funciona? " é o primeiro projeto e agora

04:10.540 --> 04:12.960
se eu adicionar outro projeto aqui, você

04:12.960 --> 04:14.530
vê, ele é adicionado, mas

04:14.530 --> 04:17.453
o outro projeto não é adicionado novamente.

04:18.430 --> 04:21.870
Whoops e, agora, aqui eu tenho (murmura) erro porque a descrição

04:21.870 --> 04:23.540
não era longa o suficiente.

04:23.540 --> 04:26.230
Portanto, tudo isso agora funciona, como você pode dizer,

04:26.230 --> 04:28.150
e estamos apresentando esses projetos

04:28.150 --> 04:30.090
da maneira que eles devem ser apresentados,

04:30.090 --> 04:32.170
o que, é claro, está certo.

04:32.170 --> 04:35.050
E, com isso, a aplicação não parece muito ruim.

04:35.050 --> 04:36.890
A única coisa que falta é alguma

04:36.890 --> 04:39.550
funcionalidade de arrastar e soltar ou alguma

04:39.550 --> 04:44.040
forma de obter projetos desta primeira lista para a segunda lista.

04:44.040 --> 04:45.180
Também não estamos realmente

04:45.180 --> 04:46.930
produzindo as outras informações que obtivemos,

04:46.930 --> 04:48.900
descrição e número de pessoas.

04:48.900 --> 04:50.750
Portanto, isso também não é ótimo.

04:50.750 --> 04:54.980
E, também temos um pouco de duplicação de código quando realmente

04:54.980 --> 04:57.620
damos uma olhada na lista de projetos nesta

04:57.620 --> 04:58.910
cláusula aqui e na cláusula

04:58.910 --> 05:01.000
de entrada do projeto.

05:01.000 --> 05:04.270
Em ambos temos o elemento modelo, o elemento hospedeiro e o elemento

05:04.270 --> 05:06.970
e temos um método de fixação e assim por diante.

05:06.970 --> 05:09.180
Portanto, eu quero melhorar o código aqui

05:09.180 --> 05:11.800
e reutilizar algum código usando herança e usando

05:11.800 --> 05:14.480
uma cláusula base e, depois disso, também quero

05:14.480 --> 05:16.850
criar uma cláusula dedicada para cada item

05:16.850 --> 05:18.580
de projeto, onde então apenas instanciamos

05:18.580 --> 05:20.340
aquela cláusula de item de projeto

05:20.340 --> 05:23.725
dentro da lista de projetos em vez de anexar um item de lista manualmente,

05:23.725 --> 05:27.050
como esta e depois dentro daquela cláusula de item de projeto

05:27.050 --> 05:34.540
"a ser criado", aquela parte anexada deve acontecer e então eu também quero produzir mais informações sobre o item de projeto, incluindo

05:34.540 --> 05:40.540
sua descrição e o número de pessoas designadas.

05:40.540 --> 05:42.080
Portanto, ainda há algum trabalho

05:42.080 --> 05:44.520
a ser feito e, antes de trabalharmos no item do

05:44.520 --> 05:47.120
projeto naquela forma em que eu quero tê-lo, vamos

05:47.120 --> 05:48.660
realmente garantir que nós,

05:48.660 --> 05:53.660
antes de tudo, adicionemos alguma herança para tornar nossa lista de projetos e entrada de

05:53.800 --> 05:57.693
projetos, ou certas partes dela, mais reutilizáveis.
