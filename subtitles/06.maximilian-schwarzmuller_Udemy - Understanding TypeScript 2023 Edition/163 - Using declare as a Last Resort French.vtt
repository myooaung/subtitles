WEBVTT

00:02.450 --> 00:04.900
Instructeur : Maintenant, que faites-vous si vous

00:04.900 --> 00:07.090
avez une bibliothèque où vous ne pouvez pas installer

00:07.090 --> 00:10.470
des types comme nous l'avons fait pour Lodash, par exemple ?

00:10.470 --> 00:14.440
Pour Lodash, nous avons heureusement un tel paquet de types, et comme

00:14.440 --> 00:15.880
je l'ai mentionné, pour la

00:15.880 --> 00:18.870
plupart des bibliothèques tierces, vous avez cela,

00:18.870 --> 00:21.210
mais pas nécessairement pour toutes.

00:21.210 --> 00:25.320
Ou, si vous avez un autre code JavaScript, disons dans votre

00:25.320 --> 00:27.320
index. html, vous avez

00:27.320 --> 00:29.800
un autre code de script, qui s'exécute

00:29.800 --> 00:34.800
stare, où vous définissez une certaine variable globale.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Quelque chose comme cela

00:38.450 --> 00:40.770
où vous savez finalement que ce sera

00:40.770 --> 00:43.180
disponible mondialement.

00:43.180 --> 00:46.240
Comme vous le savez, les variables ajoutées de cette manière

00:46.240 --> 00:48.600
seront ajoutées à l'objet global de la fenêtre,

00:48.600 --> 00:50.210
et vous souhaitez les utiliser

00:50.210 --> 00:52.670
à l'intérieur de votre code TypeScript.

00:52.670 --> 00:53.503
Par exemple,

00:53.503 --> 00:57.770
ici si je veux faire de la console. log(GLOBAL) comme ceci, j'obtiens

00:57.770 --> 00:59.990
une erreur ici dans mon IDE.

00:59.990 --> 01:04.299
Et si j'exécute tsc -w pour lancer la compilation, j'obtiens

01:04.299 --> 01:06.340
également une erreur ici.

01:06.340 --> 01:09.470
Donc, il n'aime pas cette chose globale, même si

01:09.470 --> 01:11.530
nous savons qu'elle fonctionnera

01:11.530 --> 01:15.630
parce que notre index. Le fichier html définit cette variable globale.

01:15.630 --> 01:18.010
Et, puisque nous avons différé

01:18.010 --> 01:19.493
ce script, ce script

01:19.493 --> 01:22.170
sera exécuté après ce script là.

01:22.170 --> 01:23.780
Dans ce cas, vous disposez d'une

01:23.780 --> 01:26.460
autre syntaxe dans TypeScript, à savoir la commande

01:26.460 --> 01:29.460
declare que vous pouvez utiliser.

01:29.460 --> 01:32.110
Vous pouvez déclarer certaines variables,

01:32.110 --> 01:34.150
par exemple, à TypeScript.

01:34.150 --> 01:36.730
Vous pouvez dire declare var GLOBAL et indiquer

01:36.730 --> 01:38.640
à TypeScript que, par exemple, ce sera

01:38.640 --> 01:42.050
une chaîne de caractères, ou que ce sera n'importe quoi.

01:42.050 --> 01:43.687
En gros, cela dit à TypeScript

01:43.687 --> 01:45.910
: "Ne vous inquiétez pas, il existera",

01:45.910 --> 01:47.823
et même si nous sauvegardons cela,

01:49.090 --> 01:52.580
et que je quitte ce compilateur et utilise webpack à la place,

01:52.580 --> 01:55.740
nous voyons cette sortie sur notre page, parce que cela

01:55.740 --> 01:57.650
fonctionne techniquement, et avec

01:57.650 --> 01:59.060
declare var, nous disons

01:59.060 --> 02:02.270
aussi à TypeScript que cela existe.

02:02.270 --> 02:04.420
Maintenant, je vais supprimer ce dmidecode

02:04.420 --> 02:06.770
ici, mais être conscient de déclarer, de ce mot

02:06.770 --> 02:08.830
clé, de cette commande est important.

02:08.830 --> 02:12.160
Il vous permet de déclarer des fonctionnalités ou des variables TypeScript

02:12.160 --> 02:14.590
là où vous savez qu'elles existent ou de laisser TypeScript

02:14.590 --> 02:17.210
connaître les paquets, les variables globales en général,

02:17.210 --> 02:18.670
que Typescript ne peut pas connaître,

02:18.670 --> 02:23.373
mais alors que vous, en tant que développeur, savez qu'elles seront là.
