WEBVTT

1
00:00:02.250 --> 00:00:04.530
<v Instructor>We also got useful features related</v>

2
00:00:04.530 --> 00:00:09.240
to arrays an objects and how we can retrieve

3
00:00:09.240 --> 00:00:13.600
the data that's stored in arrays and objects.

4
00:00:13.600 --> 00:00:17.180
Now, for that, let's add a new array here,

5
00:00:17.180 --> 00:00:19.880
let's say hobbies and that can be an array of strings.

6
00:00:22.520 --> 00:00:26.700
Like sports and cooking here and now obviously

7
00:00:26.700 --> 00:00:31.700
we can retrieve elements by index here,

8
00:00:31.810 --> 00:00:33.030
like this for example.

9
00:00:33.030 --> 00:00:36.150
But, you should know these basic JavaScript things.

10
00:00:36.150 --> 00:00:40.310
Next Gen JavaScript, introduce a nice feature if we want

11
00:00:41.172 --> 00:00:43.910
to extract all values of an array.

12
00:00:43.910 --> 00:00:44.990
When could you need that?

13
00:00:44.990 --> 00:00:48.670
Well let's say you have the active hobbies

14
00:00:48.670 --> 00:00:53.670
and that's an array where I do have hiking as a hobby,

15
00:00:54.200 --> 00:00:56.510
and now I want to add sports and cooking.

16
00:00:56.510 --> 00:00:58.960
Now we can add an item to active hobbies by calling

17
00:00:58.960 --> 00:01:01.290
push, by the way in case you're wondering how I can

18
00:01:01.290 --> 00:01:05.620
push to a constant, keep in mind that arrays are objects

19
00:01:05.620 --> 00:01:08.130
and objects are reference values.

20
00:01:08.130 --> 00:01:11.010
When we push we change a memory but not the address.

21
00:01:11.010 --> 00:01:14.150
If this doesn't tell you anything check the additional

22
00:01:14.150 --> 00:01:17.390
resources I attached to this lecture regarding that topic,

23
00:01:17.390 --> 00:01:20.170
so back to this example then, we can push here,

24
00:01:20.170 --> 00:01:24.120
but push, if we push in the hobbies, we'll add hobbies

25
00:01:24.120 --> 00:01:27.540
as a new array in the array, so as a new nested arrays.

26
00:01:27.540 --> 00:01:30.920
Which types would actually detects it, it tells me that

27
00:01:30.920 --> 00:01:33.690
if I want to add a string array

28
00:01:33.690 --> 00:01:36.143
to an array of strings, that's not okay.

29
00:01:37.110 --> 00:01:40.390
So instead push takes single values so we could

30
00:01:40.390 --> 00:01:44.450
pass hobbies zero, actually push even takes an

31
00:01:44.450 --> 00:01:47.450
unlimited amount of arguments so that we can push

32
00:01:47.450 --> 00:01:51.240
multiple items in order at once like that.

33
00:01:51.240 --> 00:01:54.013
But that's a bit cumbersome and that's where

34
00:01:54.013 --> 00:01:54.890
the Spread Operator comes in.

35
00:01:54.890 --> 00:01:57.700
It looks like this, it's three dots and yes this

36
00:01:57.700 --> 00:02:00.850
looks strange but this is a valid JavaScript Operator

37
00:02:00.850 --> 00:02:04.770
supported by [Hypescript?] and after that we specify

38
00:02:04.770 --> 00:02:09.547
or we point at the array or object as you will also learn,

39
00:02:09.547 --> 00:02:11.700
that we want to spread.

40
00:02:11.700 --> 00:02:15.160
So what this does is, it tells JavaScript in the end

41
00:02:15.160 --> 00:02:17.690
because that's a Vanilla JavaScript Operator

42
00:02:17.690 --> 00:02:21.070
available in Modern JavaScript, so it tells JavaScript

43
00:02:21.070 --> 00:02:25.500
to pull out all the elements after the array

44
00:02:25.500 --> 00:02:28.530
and basically add them as a list of values,

45
00:02:28.530 --> 00:02:31.900
so not as an array but a list of individual values

46
00:02:31.900 --> 00:02:33.950
in the place where you used an Operator,

47
00:02:33.950 --> 00:02:36.090
so here for example is a list of arguments

48
00:02:36.090 --> 00:02:39.180
passed to push and now a place where you could use

49
00:02:39.180 --> 00:02:41.740
that is directly when you create a new array.

50
00:02:41.740 --> 00:02:46.220
There you can also spread an existing array into that array.

51
00:02:46.220 --> 00:02:48.950
So basically whenever you need a comma separated list

52
00:02:48.950 --> 00:02:51.460
of values, you can use the Spread Operator with

53
00:02:51.460 --> 00:02:54.360
an array to get such a comma separated list.

54
00:02:54.360 --> 00:02:56.660
That's the idea of the Spread Operator

55
00:02:56.660 --> 00:02:59.230
and therefore it's really useful for pulling out

56
00:02:59.230 --> 00:03:00.663
elements of an array.

57
00:03:01.860 --> 00:03:04.380
The Spread Operator, all that it does not just exist

58
00:03:04.380 --> 00:03:07.880
on arrays, it also exists on objects.

59
00:03:07.880 --> 00:03:10.990
Let's say we have a person which has a name key,

60
00:03:10.990 --> 00:03:14.070
Max and an h key which is 30

61
00:03:14.070 --> 00:03:16.640
and now we want to create a copied person.

62
00:03:16.640 --> 00:03:19.060
Now if we just assign a person like this,

63
00:03:19.060 --> 00:03:22.680
what we're doing is actually we're copying the pointer

64
00:03:22.680 --> 00:03:25.000
at this person object in memory

65
00:03:25.000 --> 00:03:27.050
into this copy person constant.

66
00:03:27.050 --> 00:03:30.470
And again, check my reference value resources attached

67
00:03:30.470 --> 00:03:32.360
if that doesn't tell you much.

68
00:03:32.360 --> 00:03:36.190
So, we're not really creating a copy of that object.

69
00:03:36.190 --> 00:03:38.610
Now to create a real copy, we can use the

70
00:03:38.610 --> 00:03:40.880
spread operator with objects.

71
00:03:40.880 --> 00:03:43.400
We create a new object with curly braces

72
00:03:43.400 --> 00:03:46.510
and then we use the Spread Operator, three dots

73
00:03:46.510 --> 00:03:49.630
with our first object which you want to copy.

74
00:03:49.630 --> 00:03:52.970
Now what this does is it pulls out all the elements

75
00:03:52.970 --> 00:03:56.310
but of course here the elements are key value pairs

76
00:03:56.310 --> 00:03:58.630
not single values like an array.

77
00:03:58.630 --> 00:04:00.550
Here we got key value pairs.

78
00:04:00.550 --> 00:04:04.110
So these key value pairs are pulled out of there

79
00:04:04.110 --> 00:04:08.010
and then can be used anywhere where you need key

80
00:04:08.010 --> 00:04:11.310
value pairs, which typically is a never object you

81
00:04:11.310 --> 00:04:12.920
might be added them to.

82
00:04:12.920 --> 00:04:15.447
So therefore, to this otherwise empty object,

83
00:04:15.447 --> 00:04:19.100
the key value pairs of person are now added

84
00:04:19.100 --> 00:04:21.240
and since we created a new object here,

85
00:04:21.240 --> 00:04:23.700
and just add it to key value pairs,

86
00:04:23.700 --> 00:04:27.310
we got a perfect copy of the original object

87
00:04:27.310 --> 00:04:29.080
and not just of the pointer that

88
00:04:29.080 --> 00:04:30.803
points to the object in memory.

