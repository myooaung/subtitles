WEBVTT

00:02.260 --> 00:03.920
Instrutor: Então, sindicatos discriminados.

00:03.920 --> 00:05.750
Realmente, realmente útil.

00:05.750 --> 00:09.060
Outra característica muito útil é o tipo de fundição.

00:09.060 --> 00:12.640
O Type casting ajuda você a dizer ao TypeScript que

00:12.640 --> 00:15.350
algum valor é de um tipo específico onde

00:15.350 --> 00:19.240
o TypeScript não é capaz de detectá-lo por si só, mas você

00:19.240 --> 00:22.660
como desenvolvedor sabe que será o caso.

00:22.660 --> 00:25.030
Um bom exemplo disso é se conseguirmos

00:25.030 --> 00:27.120
X para algo na cúpula.

00:27.120 --> 00:29.560
Digamos aqui que temos um parágrafo na cúpula

00:29.560 --> 00:32.180
apenas um parágrafo, nada mais lá dentro, e é um

00:32.180 --> 00:33.390
parágrafo vazio.

00:33.390 --> 00:35.190
Portanto, obviamente, se salvarmos

00:35.190 --> 00:37.150
isso, não vemos nada aqui, na tela.

00:37.150 --> 00:38.950
Agora podemos ter acesso a esse parágrafo

00:38.950 --> 00:40.543
de dentro de nosso roteiro aqui.

00:43.160 --> 00:48.160
Parágrafo constante com o seletor de consulta de documento P, por exemplo.

00:49.180 --> 00:51.890
Agora quando usamos o seletor de consultas e passamos

00:51.890 --> 00:54.500
em P como um seletor, então ele está selecionando pela

00:54.500 --> 00:57.070
tag P, então o TypeScript é realmente capaz de descobrir,

00:57.070 --> 00:59.510
como você pode ver se eu pairar sobre ele, que este

00:59.510 --> 01:02.480
será do tipo elemento de parágrafo ou nulo porque talvez

01:02.480 --> 01:07.050
tal elemento não exista na página, mas isso é uma coisa diferente.

01:07.050 --> 01:09.920
Vamos ignorar o caso ou nulo por enquanto.

01:09.920 --> 01:12.400
O importante é que o TypeScript realmente descobre

01:12.400 --> 01:14.600
que este é um elemento de parágrafo.

01:14.600 --> 01:16.800
Agora, isto muda se selecionarmos por outra coisa,

01:16.800 --> 01:18.460
digamos uma identificação.

01:18.460 --> 01:22.020
Damos aqui um nome a esta mensagem, portanto este parágrafo tem uma identificação

01:22.020 --> 01:23.920
de mensagem-saída.

01:23.920 --> 01:25.890
Agora nós, como desenvolvedor, sabemos que

01:25.890 --> 01:28.360
atribuímos esta identificação a este parágrafo, mas

01:28.360 --> 01:29.780
o TypeScript não sabe disso.

01:29.780 --> 01:33.020
O TypeScript não mergulha em nossos arquivos

01:33.020 --> 01:34.590
HTML e os analisa.

01:34.590 --> 01:37.360
Então, se agora selecionamos por esse

01:37.360 --> 01:41.720
ID aqui, por exemplo, com getElementById, então vemos o que o

01:41.720 --> 01:45.130
TypeScript infere é que este é apenas um elemento

01:45.130 --> 01:49.830
HTML ou nulo, ele não sabe qual elemento HTML específico que é.

01:49.830 --> 01:52.720
Agora, para um parágrafo, isso pode não importar muito,

01:52.720 --> 01:54.830
talvez apenas queiramos fazer com ele coisas

01:54.830 --> 01:57.290
que poderíamos fazer com qualquer elemento HTML,

01:57.290 --> 01:59.990
por exemplo, acessar seu conteúdo de texto ou qualquer

01:59.990 --> 02:01.470
coisa do gênero.

02:01.470 --> 02:03.220
Mas e se tivéssemos uma contribuição aqui?

02:03.220 --> 02:07.750
E se realmente tivéssemos um texto do tipo input, e quiséssemos obter o valor

02:07.750 --> 02:10.430
que o usuário digitou, então eu lhe darei um

02:10.430 --> 02:12.760
ID de entrada de usuário e agora seleciono

02:12.760 --> 02:15.500
isto em meu código TypeScript.

02:15.500 --> 02:17.730
Portanto, aqui eu seleciono por identificação

02:17.730 --> 02:21.530
de usuário, e não é mais um parágrafo, mas um usuárioInputElement.

02:21.530 --> 02:24.023
Agora nós, como desenvolvedor, sabemos que aqui, chegamos

02:24.909 --> 02:26.700
a este elemento de entrada, mas como eu disse,

02:26.700 --> 02:28.530
o TypeScript não sabe disso.

02:28.530 --> 02:31.140
O TypeScript não lê nosso código HTML, então

02:31.140 --> 02:34.435
o TypeScript só sabe que é algum elemento HTML.

02:34.435 --> 02:37.860
Agora, se eu quisesse definir o valor de propriedade disto,

02:37.860 --> 02:45.000
portanto, e tentaria fazer userInputElement.

02:45.000 --> 02:45.000
valor

02:45.000 --> 02:47.050
igual oi lá, você vê que eu realmente recebo um erro.

02:47.050 --> 02:48.960
Eu recebo um erro porque, para um, este

02:48.960 --> 02:50.780
objeto é possivelmente nulo.

02:50.780 --> 02:54.220
Podemos corrigir isso adicionando um ponto de exclamação

02:54.220 --> 02:56.210
depois disso, e voltarei a isso

02:56.210 --> 02:58.390
num segundo, mas mesmo assim recebo

02:58.390 --> 03:01.640
um erro que não existe no tipo Elemento HTML porque

03:01.640 --> 03:03.890
este tipo genérico, que basicamente

03:03.890 --> 03:08.343
qualquer elemento HTML tem como tipo, não suporta propriedades

03:08.343 --> 03:14.510
que são específicas de, bem, elementos HTML específicos.

03:14.510 --> 03:17.540
Portanto, precisaríamos dizer ao TypeScript

03:17.540 --> 03:20.860
que o que selecionamos aqui não só não é nulo,

03:20.860 --> 03:25.080
mas que também é do tipo HTMLInputElement.

03:25.080 --> 03:28.240
E isso é o que podemos fazer com a fundição de tipo.

03:28.240 --> 03:31.153
Agora, há duas formas de fundição, duas sintaxes

03:31.153 --> 03:34.170
que podemos usar, e elas são equivalentes.

03:34.170 --> 03:36.971
Uma delas é que adicionamos algo na frente do

03:36.971 --> 03:41.920
que queremos converter, ou onde queremos dizer TypeScript para digitar.

03:41.920 --> 03:44.170
Acrescentamos colchetes angulares de abertura

03:44.170 --> 03:45.810
e fechamento e depois entre estes

03:45.810 --> 03:49.480
colchetes, o tipo de coisa depois dos colchetes angulares.

03:49.480 --> 03:51.223
Neste caso, HTMLInputElement.

03:53.110 --> 03:54.970
E este tipo está disponível globalmente

03:54.970 --> 03:57.963
porque em meu arquivo tsconfig, estou incluindo a dom lib.

03:59.180 --> 04:00.810
Com isso, o TypeScript sabe

04:00.810 --> 04:03.830
que o que quer que selecionamos aqui após os parênteses

04:03.830 --> 04:06.530
angulares será do tipo HTMLInputElement,

04:06.530 --> 04:08.950
e portanto não reclama mais.

04:08.950 --> 04:10.330
Portanto, esta é a versão um.

04:10.330 --> 04:12.830
Deixe-me copiar isso e comentar e mostrar-lhe

04:12.830 --> 04:14.750
a alternativa.

04:14.750 --> 04:18.000
Isto funciona absolutamente bem e você pode usar isto.

04:18.000 --> 04:21.210
Agora, se você sabe React, no entanto, você sabe que

04:21.210 --> 04:24.400
lá, você também tem uma sintaxe de suporte angular

04:24.400 --> 04:26.970
dentro do JavaScript ou TypeScript se você

04:26.970 --> 04:29.200
usar isso para arquivos React, onde

04:29.200 --> 04:33.550
você escreve o código JSX em seus componentes React.

04:33.550 --> 04:36.060
Agora, se você não souber Reagir, isso pode não lhe dizer muito.

04:36.060 --> 04:40.800
Basta estar ciente de que existe uma sintaxe semelhante nos projetos React e aí os parênteses

04:40.800 --> 04:43.320
angulares não são usados para passar qualquer

04:43.320 --> 04:47.480
informação sobre os tipos que você está usando, mas, em vez disso, são analisados

04:47.480 --> 04:50.390
por algumas ferramentas de construção e pelo React, em

04:50.390 --> 04:53.200
última análise, para saber o que você quer render na

04:53.200 --> 04:54.390
tela.

04:54.390 --> 04:56.750
Portanto, totalmente desvinculado do TypeScript.

04:56.750 --> 04:59.880
Para não entrar em conflito com essa sintaxe JSX, a equipe

04:59.880 --> 05:01.900
TypeScript oferece uma alternativa

05:01.900 --> 05:04.350
a este tipo de fundição com suporte angular.

05:04.350 --> 05:06.450
Você também pode acrescentar algo depois

05:06.450 --> 05:07.920
da coisa que você quer digitar,

05:07.920 --> 05:09.960
portanto, depois desta seleção neste

05:09.960 --> 05:12.600
caso, e essa coisa é a palavra-chave.

05:12.600 --> 05:14.740
E aqui você acrescenta novamente o tipo

05:14.740 --> 05:16.750
ao qual você quer lançar isto.

05:16.750 --> 05:19.970
Portanto, isto agora diz ao TypeScript que a expressão

05:19.970 --> 05:23.730
na frente dele, neste caso, esta expressão aqui, renderá

05:23.730 --> 05:27.405
um valor do tipo HTMLInputElement.

05:27.405 --> 05:30.067
Portanto, mais uma vez, não recebemos nenhum erro.

05:30.067 --> 05:31.650
Portanto, esta é uma alternativa,

05:31.650 --> 05:33.940
e você pode usar qualquer uma das duas sintaxes,

05:33.940 --> 05:36.350
seja qual for a sua preferência, você deve apenas

05:36.350 --> 05:38.990
tentar ser consistente durante todo o seu projeto,

05:38.990 --> 05:42.377
então, para não alternar entre estas duas sintaxes.

05:42.377 --> 05:45.220
E com isso, você pode passar esta valiosa informação

05:45.220 --> 05:47.480
extra para o TypeScript e fazer um código

05:47.480 --> 05:50.400
como este funcionar, mesmo que o TypeScript por

05:50.400 --> 05:52.760
si só não fosse capaz de descobrir que isto

05:52.760 --> 05:56.000
aqui produz um HTMLInputElement.

05:56.000 --> 05:57.940
É claro, já que você está forçando o TypeScript

05:57.940 --> 06:00.420
a usar este tipo, é de sua responsabilidade como desenvolvedor

06:00.420 --> 06:02.200
assegurar que qualquer que seja a expressão

06:02.200 --> 06:05.620
produzida, ela será desse tipo.

06:05.620 --> 06:07.700
Caso contrário, você pode ter um erro de tempo de

06:07.700 --> 06:09.920
execução ou um comportamento inesperado em tempo

06:09.920 --> 06:12.780
de execução se tentar interagir com esse elemento de uma forma que

06:12.780 --> 06:14.423
realmente não seja suportada.

06:15.610 --> 06:18.060
Portanto, a fundição do tipo é uma característica poderosa.

06:18.060 --> 06:20.490
Assim é este ponto de exclamação aqui.

06:20.490 --> 06:22.590
Na verdade, já explorei isto

06:22.590 --> 06:24.820
um pouco mais cedo no curso.

06:24.820 --> 06:27.470
Este ponto de exclamação nos permite dizer ao TypeScript

06:27.470 --> 06:31.090
que a expressão em frente a ele nunca renderá nula.

06:31.090 --> 06:33.170
E isto é necessário para algumas expressões,

06:33.170 --> 06:35.070
como esta aqui, quando você seleciona

06:35.070 --> 06:38.010
algo da cúpula que pode retornar nulo.

06:38.010 --> 06:40.980
Se soubermos como desenvolvedor que isto nunca retornará nulo,

06:40.980 --> 06:43.690
então poderemos usar este ponto de exclamação.

06:43.690 --> 06:45.470
Caso contrário, e você já aprendeu

06:45.470 --> 06:48.248
isso, eu só quero reiterar sobre isso.

06:48.248 --> 06:49.380
Caso contrário, se você não

06:49.380 --> 06:52.600
tiver certeza de que isto não retornará nulo, você pode usar um if cheque.

06:52.600 --> 06:56.070
Assim você poderia verificar se o userInputElement é verdadeiro,

06:56.070 --> 06:57.510
e portanto não é nulo, e

06:57.510 --> 06:59.440
então usá-lo ali.

06:59.440 --> 07:02.720
Agora, eu tive que remover o tipo de fundição neste caso porque se

07:02.720 --> 07:04.670
fizermos o tipo de fundição aqui, também

07:04.670 --> 07:07.170
dizemos ao TypeScript que isto não será nulo, e como

07:07.170 --> 07:10.470
não tenho certeza sobre isso, não posso fundir aqui.

07:10.470 --> 07:13.120
Em vez disso, tenho que fazer isso aqui quando uso

07:13.120 --> 07:14.290
o valor e, portanto, quero

07:14.290 --> 07:16.600
fazê-lo antes de acessar a propriedade de

07:16.600 --> 07:19.820
valor, adicionando como HTMLInputElement assim.

07:19.820 --> 07:21.530
É claro que, no entanto, isso falharia.

07:21.530 --> 07:24.060
Esta é uma sintaxe inválida, você tentaria

07:24.060 --> 07:28.030
acessar uma propriedade de valor em uma coisa de HTMLInputElement,

07:28.030 --> 07:30.280
e isto nem sequer faz sentido.

07:30.280 --> 07:33.010
Basta embrulhar esta expressão em parênteses, depois

07:33.010 --> 07:35.670
assegurar que isto seja avaliado primeiro, e depois

07:35.670 --> 07:37.590
tentar acessar o valor sobre o resultado

07:37.590 --> 07:39.480
desta expressão.

07:39.480 --> 07:41.650
E agora temos uma alternativa ao uso do

07:41.650 --> 07:42.893
ponto de exclamação.
