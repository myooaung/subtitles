WEBVTT

00:02.260 --> 00:04.960
-: Nu is er nog een laatste interessante

00:04.960 --> 00:07.020
eigenschap die ik ook wil introduceren,

00:07.020 --> 00:10.330
en dat zijn privé constructeurs.

00:10.330 --> 00:13.823
En wat is een private constructor en welk nut heeft die?

00:14.870 --> 00:17.700
Er is een patroon in object georiënteerd programmeren

00:17.700 --> 00:20.460
dat het singleton patroon wordt genoemd.

00:20.460 --> 00:23.030
Het singleton patroon zorgt ervoor dat

00:23.030 --> 00:26.440
je altijd maar precies één instantie van een bepaalde

00:26.440 --> 00:28.030
klasse hebt.

00:28.030 --> 00:30.558
Dit kan handig zijn in scenario's waar je op de een

00:30.558 --> 00:33.000
of andere manier geen statische methoden of eigenschappen

00:33.000 --> 00:34.450
kunt of wilt gebruiken, maar

00:34.450 --> 00:36.440
tegelijkertijd wil je ervoor zorgen

00:36.440 --> 00:39.600
dat je niet meerdere objecten gebaseerd op een klasse kunt

00:39.600 --> 00:40.730
maken, maar dat je altijd

00:40.730 --> 00:44.630
precies één object gebaseerd op een klasse hebt.

00:44.630 --> 00:47.660
Laten we zeggen dat we voor ons BoekhoudDepartement

00:47.660 --> 00:51.460
ervoor willen zorgen dat we maar precies één object kunnen maken

00:51.460 --> 00:53.320
op basis van deze klasse, omdat

00:53.320 --> 00:56.010
we precies één boekhoudafdeling hebben in

00:56.010 --> 00:57.840
ons hele bedrijf.

00:57.840 --> 01:00.260
We hebben misschien meer dan één IT-afdeling,

01:00.260 --> 01:03.290
maar we hebben precies één boekhoudafdeling.

01:03.290 --> 01:05.310
Om dit af te dwingen en te voorkomen

01:05.310 --> 01:09.020
dat we handmatig meerdere keren new AccountingDepartment

01:09.020 --> 01:12.260
aanroepen, kunnen we van de constructor van de klasse

01:12.260 --> 01:14.320
AccountingDepartment een private

01:14.320 --> 01:17.360
constructor maken door er het private keyword voor

01:17.360 --> 01:18.860
te zetten.

01:18.860 --> 01:20.560
Dit zorgt ervoor dat

01:20.560 --> 01:23.480
we dit niet nieuw kunnen noemen.

01:23.480 --> 01:25.160
Hier zie je dat ik een fout

01:25.160 --> 01:27.620
krijg omdat de constructor privé is,

01:27.620 --> 01:30.600
dus alleen toegankelijk vanuit de klasse,

01:30.600 --> 01:33.690
wat vreemd klinkt, want hoe komen we in de klasse

01:33.690 --> 01:37.920
als we er geen objecten meer op kunnen maken.

01:37.920 --> 01:40.490
Het antwoord is, nou ja, statische methoden.

01:40.490 --> 01:43.610
Een statische methode kan worden aangeroepen op de klasse zelf,

01:43.610 --> 01:46.250
zodat je hem daarvoor niet hoeft te instantiëren.

01:46.250 --> 01:49.460
Dus hier kunnen we een statische methode toevoegen die we

01:49.460 --> 01:51.340
getInstance kunnen noemen, de naam

01:51.340 --> 01:53.260
is echter helemaal aan jou.

01:53.260 --> 01:56.930
Nu zal getInstance controleren of we al een instantie van deze

01:56.930 --> 02:00.090
klasse hebben en zo niet, een nieuwe teruggeven.

02:00.090 --> 02:04.300
Daarvoor kunnen we een nieuwe static property instance toevoegen, een static

02:04.300 --> 02:06.350
private property, zodat u private kunt

02:06.350 --> 02:09.200
zetten voor static genaamd instance die van het type

02:09.200 --> 02:12.040
AccountingDepartment zal zijn.

02:12.040 --> 02:16.570
Dus daarin slaan we een BoekhoudingDepartement instantie op.

02:16.570 --> 02:17.580
Dus dat is wat ik hier

02:17.580 --> 02:19.100
zeg, ik heb een statische eigenschap

02:19.100 --> 02:21.410
die toegankelijk is op de klasse zelf, maar

02:21.410 --> 02:23.310
alleen vanuit de klasse en de waarde

02:23.310 --> 02:25.960
die we daarin opslaan zal van het type AccountingDepartment

02:25.960 --> 02:30.140
zijn, dus van de klasse zelf.

02:30.140 --> 02:33.880
Nu kunnen we deze instantie-eigenschap gebruiken in

02:33.880 --> 02:38.880
getInstance en controleren of dit. instantie is hier ingesteld binnen statisch,

02:39.260 --> 02:43.570
als we dit gebruiken, zal het verwijzen naar de klasse zelf en dan hebben

02:43.570 --> 02:47.610
we toegang tot alle andere statische eigenschappen daarop.

02:47.610 --> 02:51.963
Het alternatief zou zijn om de klassenaam te gebruiken.

02:53.720 --> 02:58.450
En als dit is ingesteld wil ik dit terugsturen. instantie, of opnieuw de

02:58.450 --> 03:01.600
klassenaam. maar dit in een statische methode

03:01.600 --> 03:04.030
werkt, het geeft ons dan toegang tot de klasse

03:04.030 --> 03:05.680
zelf, in tegenstelling tot dit

03:05.680 --> 03:09.370
in een niet-statische methode die ons toegang geeft tot de instantie

03:09.370 --> 03:11.590
waarmee we proberen te werken, niet wat

03:11.590 --> 03:13.550
we hier doen.

03:13.550 --> 03:15.660
Maar als we het hier niet halen

03:15.660 --> 03:17.290
dan hebben we nog geen instantie,

03:17.290 --> 03:22.030
dan stel ik dit in. instantie, dus deze statische instantie-eigenschap

03:22.030 --> 03:25.660
is gelijk aan new AccountingDepartment, we kunnen dit van

03:25.660 --> 03:28.630
hieruit gebruiken omdat we nu in deze klassemethode

03:28.630 --> 03:32.030
zitten, dus hier kunnen we de private constructor openen

03:32.030 --> 03:44.830
en onze ID en onze rapporten-array doorgeven en dan dit teruggeven.

03:44.830 --> 03:44.830
bijvoorbeeld hier.

03:44.830 --> 03:47.010
Dus nu sturen we ofwel de ene instantie terug

03:47.010 --> 03:48.220
die we misschien al hebben,

03:48.220 --> 03:50.970
of als we die nog niet hebben maken we een nieuwe aan.

03:50.970 --> 03:53.270
Maar deze code, de gemarkeerde code hier, kan

03:53.270 --> 03:56.377
maar één keer worden uitgevoerd, want zodra we een instantie

03:56.377 --> 03:57.850
hebben, maken we er een if-blok

03:57.850 --> 04:00.370
van en geven we de bestaande instantie terug.

04:00.370 --> 04:03.700
Dus als je nu wilt werken met het boekhoudkantoor, in plaats van het

04:03.700 --> 04:05.940
zo te maken, zouden we het kunnen noemen, const

04:05.940 --> 04:10.153
accounting AccountingDepartment. getInstance, en dit geeft ons een

04:11.646 --> 04:13.190
nieuwe instantie van het

04:13.190 --> 04:14.850
AccountingDepartment.

04:14.850 --> 04:18.190
Maar als ik dit opnieuw doe, krijg ik dezelfde instantie

04:18.190 --> 04:21.103
als u zult zien als ik console log accounting, en

04:22.020 --> 04:23.570
accounting2 hier.

04:23.570 --> 04:26.550
Je zult zien dat de twee precies gelijk moeten zijn, als

04:26.550 --> 04:28.253
we dat opslaan en opnieuw laden,

04:30.550 --> 04:34.110
zie je daar beneden mijn twee AccountingDepartment objecten,

04:34.110 --> 04:36.690
ze hebben dezelfde ID, precies dezelfde opzet,

04:36.690 --> 04:39.720
ze zijn hetzelfde object, dezelfde instantie omdat we

04:39.720 --> 04:41.530
maar één instantie hebben met dit

04:41.530 --> 04:44.340
singleton patroon dat wordt gecreëerd met behulp

04:44.340 --> 04:47.900
van het private keyword voor de constructor.

04:47.900 --> 04:51.000
Dit is waarschijnlijk een aanpak die u niet altijd

04:51.000 --> 04:52.490
zult gebruiken.

04:52.490 --> 04:55.010
Het singletonpatroon kan soms nuttig zijn, je hebt

04:55.010 --> 04:56.530
het niet altijd nodig, maar het

04:56.530 --> 04:58.700
is zeker de moeite waard om het te kennen, want

04:58.700 --> 05:00.360
het is iets interessants dat je gemakkelijk

05:00.360 --> 05:04.923
kunt implementeren met TypeScript dankzij private constructors.
