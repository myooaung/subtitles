WEBVTT

00:02.190 --> 00:03.570
-: Wir haben hier auch ein Modul.

00:03.570 --> 00:06.050
Modul ist eine Option, die ich vorerst auslassen

00:06.050 --> 00:07.540
werde, weil sie erst dann Sinn

00:07.540 --> 00:10.830
macht, wenn wir etwas über Module in TypeScript gelernt haben und

00:10.830 --> 00:13.400
wie wir mehrere Dateien verbinden können.

00:13.400 --> 00:15.350
Lassen wir das also erst einmal beiseite.

00:15.350 --> 00:17.250
Lib ist allerdings ein interessanter Fall.

00:17.250 --> 00:20.890
Lib ist eine Option, mit der Sie angeben können,

00:20.890 --> 00:25.650
welche Standardobjekte und -funktionen TypeScript kennt.

00:25.650 --> 00:28.580
Damit meine ich Dinge wie die Arbeit mit dem Dom.

00:28.580 --> 00:31.930
Sagen wir im Index. html haben wir eine Schaltfläche, und auf

00:31.930 --> 00:33.700
dieser Schaltfläche steht: "Klick mich. Wenn wir nun auf diese Schaltfläche klicken, wollen

00:33.700 --> 00:35.100
wir nur die Nachricht drucken.

00:35.100 --> 00:36.610
Jetzt, in app. ts können wir diese Schaltfläche auswählen.

00:36.610 --> 00:39.820
Der Zugang zu dieser Schaltfläche

00:39.820 --> 00:41.420
ist über ein Dokument möglich. AbfrageSelektor.

00:43.808 --> 00:44.641
Wenn wir zum Beispiel die erste Schaltfläche auswählen, finden wir.

00:44.641 --> 00:48.130
Wenn wir das tun, dann funktioniert das.

00:48.130 --> 00:51.580
Hier gibt es keine Fehlerarten.

00:51.580 --> 00:53.000
Wenn ich also zu meiner Schaltfläche

00:53.000 --> 00:58.000
gehe und hier einen EventListener hinzufüge, erhalte ich einen Fehler, weil TypeScript nicht sicher

00:58.390 --> 01:00.990
weiß, ob wir hier eine Schaltfläche finden.

01:00.990 --> 01:04.010
Für den Moment können wir das mit einem Ausrufezeichen nach

01:04.010 --> 01:07.310
dieser Zeile umgehen, und ich werde in Zukunft darauf zurückkommen,

01:07.310 --> 01:08.860
was das genau bewirkt.

01:08.860 --> 01:11.320
Im Grunde sagt es TypeScript: "Keine Sorge,

01:11.320 --> 01:13.667
"eine solche Schaltfläche wird es geben.

01:13.667 --> 01:15.097
"Wir werden hier einen Wert erhalten. Jetzt können wir hier ein Klick-Ereignis hinzufügen.

01:15.097 --> 01:17.360
Und dann finden einige anonyme Funktion

01:17.360 --> 01:19.470
vielleicht, wo eine Konsole. Log angeklickt.

01:19.470 --> 01:21.670
Das Interessante hier ist nicht so sehr, dass ich das Ausrufezeichen

01:21.670 --> 01:24.920
hinzufügen musste, wie gesagt, ich werde

01:24.920 --> 01:26.450
darauf zurückkommen, sondern dass,

01:26.450 --> 01:29.310
wenn ich tsc ausführe, dies einfach kompiliert.

01:29.310 --> 01:31.150
Sollte sich TypeScript nun nicht

01:31.150 --> 01:34.840
beschweren, dass das Dokument hier unbekannt ist?

01:34.840 --> 01:38.370
Woher weiß es, dass ein solches Dokument, eine Konstante oder eine Variable

01:38.370 --> 01:39.690
vorhanden ist?

01:39.690 --> 01:43.290
Wie weiß es, dass selbst wenn wir, dass verfügbar,

01:43.290 --> 01:45.610
dass es ein Objekt enthält, die unsere

01:45.610 --> 01:48.350
querySelector-Methode hat?

01:48.350 --> 01:50.010
Woher weiß er, dass die Schaltfläche etwas ist, das

01:50.010 --> 01:51.690
über die Methode addEventListener verfügt?

01:51.690 --> 01:55.932
Woher weiß TypeScript das alles?

01:55.932 --> 01:57.120
Nun könnten Sie sagen: "Natürlich weiß es das. Denn in Vanilla JavaScript

01:57.120 --> 01:59.290
wäre dies gültiger Code, aber bedenken Sie,

01:59.290 --> 02:01.430
dass Sie TypeScript-Code nicht unbedingt

02:01.430 --> 02:03.290
für den Browser schreiben.

02:03.290 --> 02:05.580
Sie könnten Ihre Node. js-Anwendung mit TypeScript

02:05.580 --> 02:08.080
und da würde das ja alles

02:08.080 --> 02:11.310
nicht funktionieren.

02:11.310 --> 02:13.200
Der Grund, warum das funktioniert,

02:13.200 --> 02:14.630
ist diese lib-Option und wie Sie sehen, ist sie

02:14.630 --> 02:18.280
hier nicht einmal gesetzt, aber wenn sie nicht gesetzt ist, werden einige Standardwerte angenommen.

02:18.280 --> 02:21.940
Wenn sie nicht gesetzt ist, hängen die Standardeinstellungen

02:21.940 --> 02:24.420
von Ihrem JavaScript-Ziel ab, und

02:24.420 --> 02:28.180
für es6 umfasst sie standardmäßig alle Funktionen,

02:28.180 --> 02:31.536
die in es6 global verfügbar sind.

02:31.536 --> 02:33.270
Zum Beispiel das Map-Objekt, das in es6 verfügbar ist.

02:33.270 --> 02:35.940
Daher würde es sich nicht beschweren, wenn Sie Map verwenden.

02:35.940 --> 02:40.120
Es wird also davon ausgegangen, dass alle es6-Funktionen,

02:40.120 --> 02:45.120
die global in JavaScript verfügbar gemacht werden, auch in TypeScript

02:46.400 --> 02:48.700
verfügbar sind.

02:50.677 --> 02:51.780
Außerdem wird davon

02:51.780 --> 02:54.530
ausgegangen, dass alle DOM-APIs verfügbar sind.

02:54.530 --> 02:57.070
Die detaillierten Beschreibungen zu all diesen Optionen

02:57.070 --> 03:00.670
finden Sie übrigens in der offiziellen Box, die im Vortrag am Ende dieses Moduls

03:00.670 --> 03:01.740
verlinkt ist.

03:01.740 --> 03:04.550
Lange Rede, kurzer Sinn: Wenn die Option lib nicht gesetzt ist,

03:04.550 --> 03:07.300
werden einige Standardwerte angenommen, und das sind typischerweise

03:07.300 --> 03:09.490
die Standardwerte, die man braucht, um TypeScript

03:09.490 --> 03:11.520
im Browser laufen zu lassen.

03:11.520 --> 03:13.760
Alle DOM-APIs sind also verschwunden.

03:13.760 --> 03:16.030
Wenn wir das auskommentieren und ich jetzt

03:16.030 --> 03:19.014
alles kompiliere, bekomme ich auf jeden Fall einen Fehler,

03:19.014 --> 03:20.670
denn jetzt, wo sie es auskommentieren,

03:20.670 --> 03:24.780
haben wir die Standardeinstellungen nicht mehr.

03:24.780 --> 03:26.010
Stattdessen sagen wir jetzt: "Hey, bitte

03:26.010 --> 03:28.050
füge "einige Standardbibliotheken" ein, einige Standardtypdefinitionen

03:28.050 --> 03:30.370
sozusagen, die ich dir in diesem Array geben werde.

03:30.370 --> 03:32.437
Und wie Sie sehen, übergebe ich

03:32.437 --> 03:36.330
hier keine Beschreibung, keine Pfade, keine Werte.

03:36.330 --> 03:39.470
Und deshalb sage ich jetzt zu TypeScript: "Hey, was

03:39.470 --> 03:43.213
die Voreinstellungen angeht, weißt du, "bitte berücksichtige

03:44.162 --> 03:45.050
das. Und, Sie wissen schon, nichts.

03:45.050 --> 03:46.920
Nur wenn das auskommentiert wird, funktioniert

03:46.920 --> 03:50.037
es, weil TypeScript dann einige Standardwerte annimmt.

03:50.037 --> 03:51.770
Wenn ich den Standard explizit einstelle,

03:51.770 --> 03:53.580
dann hält sich TypeScript natürlich an

03:53.580 --> 03:55.300
das, was ich hier einstelle.

03:55.300 --> 03:57.410
Und hier zum Beispiel kennt er kein Dokument,

03:57.410 --> 03:59.740
er kennt nicht einmal die Konsole hier.

03:59.740 --> 04:01.600
Wir wollen also zwei vernünftige Werte

04:01.600 --> 04:02.680
einstellen, und wenn

04:02.680 --> 04:05.410
Sie die Leertaste drücken, wird die automatische Vervollständigung

04:05.410 --> 04:07.343
aktiviert.

04:08.900 --> 04:10.930
Dort könnten wir zum Beispiel dom hinzufügen.

04:10.930 --> 04:12.360
Das ist ein Bezeichner und es gibt einige vordefinierte

04:12.360 --> 04:13.800
Bezeichner, die TypeScript versteht, auch hier finden

04:13.800 --> 04:15.800
Sie eine vollständige Liste in den offiziellen Dokumenten.

04:15.800 --> 04:18.280
Die Unterlagen für diese Option sind

04:18.280 --> 04:21.070
ebenfalls an diesen Vortrag angehängt.

04:21.070 --> 04:22.840
Dies ist also ein Bezeichner, den TypeScript

04:22.840 --> 04:26.070
versteht, und es ist ein Bezeichner, der im Grunde alle DOM-APIs in

04:26.070 --> 04:27.750
TypeScript freischaltet, so dass TypeScript

04:27.750 --> 04:30.100
versteht, was Sie hier tun.

04:30.100 --> 04:32.680
Sie sehen also, dass es die Konsole kennt,

04:32.680 --> 04:35.150
das Dokument und so weiter.

04:35.150 --> 04:37.040
Da wir nun also mit Next-Gen JavaScript

04:37.040 --> 04:40.100
arbeiten, sollten wir auch die Option es6 hinzufügen,

04:40.100 --> 04:42.550
damit TypeScript auch alle global verfügbaren

04:42.550 --> 04:45.400
es6-Optionen versteht.

04:45.400 --> 04:47.896
Und es ist auch eine gute Idee, Dom hinzuzufügen. iterable und

04:47.896 --> 04:50.830
scripthost.

04:50.830 --> 04:54.130
Damit würden wir alle grundlegenden JavaScript-Funktionen freischalten,

04:54.130 --> 04:56.540
die Sie verwenden möchten, und dies ist übrigens genau

04:56.540 --> 05:00.620
die Standardeinstellung, die Sie erhalten,

05:00.620 --> 05:02.530
wenn Sie target auf es6 setzen.

05:02.530 --> 05:05.250
Wenn Sie dies also auskommentieren und so einrichten,

05:05.250 --> 05:07.360
haben Sie genau das gleiche Verhalten,

05:07.360 --> 05:09.980
als wenn Sie lib überhaupt nicht angeben.

05:09.980 --> 05:13.550
Nun, hier werde ich das einkommentieren und

05:13.550 --> 05:15.860
damit wird das kompiliert.

05:15.860 --> 05:17.959
Auch hier ist die Einstellung ein wenig überflüssig,

05:17.959 --> 05:20.920
ich möchte nur erklären, was sie bewirkt.
