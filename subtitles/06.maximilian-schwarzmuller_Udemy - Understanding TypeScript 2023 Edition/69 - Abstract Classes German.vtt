WEBVTT

00:02.060 --> 00:04.710
Nachdem wir nun die statischen Eigenschaften aus dem Weg geräumt

00:04.710 --> 00:07.000
haben, kommen wir zurück zur Vererbung und zu einem

00:07.000 --> 00:08.743
damit verbundenen Konzept.

00:08.743 --> 00:11.740
Eine weitere Möglichkeit, Methoden zu Klassen hinzuzufügen,

00:11.740 --> 00:14.280
von denen Sie erben wollen.

00:14.280 --> 00:16.660
Das ist unsere Abteilungsklasse, und wie Sie

00:16.660 --> 00:19.200
wissen, erben wir von ihr auf die IT-Abteilung

00:19.200 --> 00:21.360
und die Buchhaltungsabteilung.

00:21.360 --> 00:23.470
Wir haben diese Beschreibungsmethode

00:23.470 --> 00:26.160
hier in unserer Abteilungsklasse, und deshalb können

00:26.160 --> 00:28.850
wir sie auf jeder Instanz aufrufen, die auf der IT-Abteilung

00:28.850 --> 00:31.850
und der Buchhaltungsabteilung basiert, da diese Klassen

00:31.850 --> 00:36.560
auf der Abteilung basieren und Zugriff auf alle Eigenschaften und Methoden der Basisklasse

00:36.560 --> 00:39.523
Abteilung haben.

00:40.380 --> 00:43.850
Wie Sie bereits gelernt haben, können Sie Methoden außer Kraft setzen.

00:43.850 --> 00:46.550
So könnten wir zum Beispiel hier in der Buchhaltungsabteilung

00:46.550 --> 00:51.900
unsere eigene Version der Beschreibungsmethode hinzufügen, wo ich etwas anderes

00:51.900 --> 00:56.880
machen möchte, wenn ich vielleicht Buchhaltungsabteilungs-ID und dann Zugriffsverzerrungs-ID

00:56.880 --> 01:00.443
sage.

01:02.040 --> 01:03.140
Dies würde hier nicht

01:03.140 --> 01:06.960
funktionieren, da ID eine private Eigenschaft von Department ist und

01:06.960 --> 01:10.400
wir sie daher in eine geschützte Eigenschaft umwandeln müssen,

01:10.400 --> 01:12.590
damit sie auch in Klassen, die auf dieser

01:12.590 --> 01:14.750
Klasse basieren, verfügbar ist.

01:14.750 --> 01:16.210
Aber damit sollte es funktionieren.

01:16.210 --> 01:19.080
Und wenn ich jetzt describe on accounting aufrufe, was wir

01:19.080 --> 01:20.540
natürlich tun können, sollten

01:20.540 --> 01:23.650
wir vielleicht diese beiden Zeilen auskommentieren und stattdessen

01:23.650 --> 01:27.460
accounting aufrufen. beschreiben, sollten wir die

01:27.460 --> 01:29.300
neue Ausgabe sehen, und tatsächlich

01:29.300 --> 01:33.340
sehen wir die ID der Buchhaltungsabteilung, d2.

01:33.340 --> 01:36.570
Natürlich könnten wir die Beschreibungsmethode auch in

01:36.570 --> 01:38.900
der IT-Abteilung außer Kraft setzen.

01:38.900 --> 01:43.240
Aber manchmal möchte man nicht nur die Möglichkeit anbieten, eine Methode

01:43.240 --> 01:46.440
zu überschreiben, weil diese immer existiert.

01:46.440 --> 01:50.430
Stattdessen wollen Sie die Entwickler, die mit einer bestimmten Klasse arbeiten oder

01:50.430 --> 01:53.390
eine bestimmte Klasse erweitern, zwingen, eine bestimmte Methode

01:53.390 --> 01:54.820
zu implementieren oder eine bestimmte

01:54.820 --> 01:56.840
Methode zu überschreiben.

01:56.840 --> 01:58.360
Wann würden Sie das tun?

01:58.360 --> 02:01.690
Nun, wann immer Sie sicherstellen wollen, dass eine bestimmte

02:01.690 --> 02:05.670
Methode in allen Klassen verfügbar ist, die auf einer Basisklasse basieren,

02:05.670 --> 02:07.320
in diesem Fall Department.

02:07.320 --> 02:10.550
Aber wenn man gleichzeitig weiß, dass die genaue Implementierung

02:10.550 --> 02:14.220
von der spezifischen Version abhängt, wenn man also eine allgemeine

02:14.220 --> 02:17.340
Methode bereitstellen kann, aber erzwingen will, dass

02:17.340 --> 02:20.240
diese Methode existiert, müssen die vererbenden Klassen

02:20.240 --> 02:22.410
ihre eigene Implementierung bereitstellen,

02:22.410 --> 02:24.270
weil man in der Basisklasse keine

02:24.270 --> 02:28.520
Standardimplementierung bereitstellen kann.

02:28.520 --> 02:30.150
In einer solchen Situation möchten

02:30.150 --> 02:34.600
Sie vielleicht eine leere Methode in Ihrer Basisklasse haben und nun alle Klassen,

02:34.600 --> 02:38.460
die auf dieser Klasse basieren, dazu zwingen, diese Methode hinzuzufügen

02:38.460 --> 02:40.810
und zu überschreiben, und Sie können dies tun,

02:40.810 --> 02:44.880
indem Sie hier das Schlüsselwort abstract hinzufügen.

02:44.880 --> 02:46.630
Wenn Sie hier abstrakt hinzufügen, sehen

02:46.630 --> 02:49.840
Sie, dass wir eine Fehlermeldung erhalten, dass dies nur in einer abstrakten

02:49.840 --> 02:51.440
Klasse verfügbar ist.

02:51.440 --> 02:54.220
Wenn Sie also eine oder mehrere Methoden mit abstract

02:54.220 --> 02:57.390
vor der Methode haben, müssen Sie abstract auch vor class

02:57.390 --> 03:00.400
hinzufügen, und jetzt ist alles in Ordnung, aber Sie

03:00.400 --> 03:01.690
sehen, dass ich hier einen

03:01.690 --> 03:03.740
Fehler habe.

03:03.740 --> 03:05.650
Describe kann keine Implementierung haben,

03:05.650 --> 03:07.850
da es als abstrakt gekennzeichnet ist.

03:07.850 --> 03:10.340
Sie müssen die geschweiften Klammern entfernen,

03:10.340 --> 03:14.030
ein Semikolon hinzufügen und stattdessen den Rückgabetyp hinzufügen,

03:14.030 --> 03:16.820
der in diesem Fall weiß sein soll.

03:16.820 --> 03:18.400
Sie legen also nur fest,

03:18.400 --> 03:21.970
wie diese Methode aussehen soll, wie ihre Struktur

03:21.970 --> 03:25.230
ist, aber Sie sagen nichts anderes als das.

03:25.230 --> 03:27.990
Jetzt erhalten wir jedoch einen Fehler in der IT-Abteilung,

03:27.990 --> 03:31.120
weil sie das geerbte abstrakte Mitglied describe nicht implementiert,

03:31.120 --> 03:33.640
was bedeutet, dass wir die Methode describe hier

03:33.640 --> 03:36.330
nicht anbieten.

03:36.330 --> 03:38.410
Und das müssen wir tun, weil wir uns auf die

03:38.410 --> 03:41.000
Klasse Department stützen, die abstrakt ist und eine

03:41.000 --> 03:42.860
solche abstrakte Methode hat.

03:42.860 --> 03:45.220
Das bedeutet, dass diese Methode von jeder Klasse,

03:45.220 --> 03:48.623
die auf dieser Abteilungsklasse basiert, implementiert werden muss.

03:49.620 --> 03:51.420
Deshalb müssen wir hier in der IT-Abteilung

03:51.420 --> 03:53.820
eine Beschreibungsmethode hinzufügen.

03:53.820 --> 03:58.820
Und dort können wir nun über die Konsole die IT-Abteilung anmelden und

03:59.040 --> 04:01.120
dann tun, was wir wollen.

04:01.120 --> 04:03.070
Dies kann die gleiche Implementierung

04:03.070 --> 04:04.900
sein, wie wir sie in der Buchhaltung

04:04.900 --> 04:07.440
haben, aber auch eine andere.

04:07.440 --> 04:10.040
Damit können wir nun speichern und neu kompilieren,

04:10.040 --> 04:12.850
und wir erhalten fast die gleiche Ausgabe wie zuvor.

04:12.850 --> 04:15.240
Aber jetzt haben wir zwei verschiedene Implementierungen

04:15.240 --> 04:18.090
der describe-Methode in unseren verschiedenen Klassen auf

04:18.090 --> 04:20.020
der Grundlage von Department.

04:20.020 --> 04:23.600
Abstrakt kann daher sehr nützlich sein, wenn Sie

04:23.600 --> 04:27.120
erzwingen wollen, dass alle Klassen, die auf einer

04:27.120 --> 04:30.260
anderen Klasse basieren, eine gemeinsame

04:30.260 --> 04:33.150
Methode oder Eigenschaft haben.

04:33.150 --> 04:34.260
Aber gleichzeitig wollen

04:34.260 --> 04:36.510
Sie sicherstellen, dass Sie den konkreten Wert,

04:36.510 --> 04:39.170
die konkrete Implementierung nicht in der Basisklasse

04:39.170 --> 04:41.000
bereitstellen müssen, sondern dass

04:41.000 --> 04:43.440
die ererbende Klasse dies tun muss.

04:43.440 --> 04:45.970
Ebenfalls wichtig: abstrakte Klassen.

04:45.970 --> 04:49.200
Klassen, die mit diesem Schlüsselwort als abstrakt gekennzeichnet sind,

04:49.200 --> 04:51.420
können also selbst instanziiert werden.

04:51.420 --> 04:54.240
Sie können also jetzt keine Abteilung instanziieren.

04:54.240 --> 04:57.440
Es ist im Grunde nur eine Klasse, die darauf wartet, geerbt

04:57.440 --> 05:01.800
zu werden, damit die erbenden Klassen instanziiert werden können, und die erbenden

05:01.800 --> 05:05.230
Klassen sind gezwungen, konkrete Implementierungen für die

05:05.230 --> 05:09.040
in diesem Fall zu beschreiben Methode nach der Struktur, die Sie hier

05:09.040 --> 05:11.770
dargelegt haben, bereitzustellen.

05:11.770 --> 05:15.750
Mit diesem Schlüsselwort, das sich auf eine Instanz von Department oder eine Instanz,

05:15.750 --> 05:19.930
die irgendwie auf Department basiert, einschließlich geerbter Klassen, die dazwischen

05:19.930 --> 05:21.530
liegen könnten, bezieht, wird also

05:21.530 --> 05:23.610
nichts zurückgegeben
