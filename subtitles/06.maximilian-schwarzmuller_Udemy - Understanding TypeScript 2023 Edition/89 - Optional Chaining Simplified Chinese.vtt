WEBVTT

00:02.450 --> 00:05.030
教师：现在让我们离开函数重载,

00:05.030 --> 00:09.010
让我介绍另一个非常简洁的特性｡

00:09.010 --> 00:13.350
这是可选的链接｡ 

00:13.350 --> 00:16.720
假设您有一个应用程序,

00:16.720 --> 00:21.603
您要从数据库的后端或任何来源获取数据,

00:21.603 --> 00:29.500
而您不确定对象中是否定义了某个属性｡

00:29.500 --> 00:36.380
假设我们有fetchedUserData, fetchedUserData可能是关于我们获取的用户的对象｡

00:36.380 --> 00:39.705
在那里我们可能有一个ID, 我们可能有一个名字,

00:39.705 --> 00:44.705
Max, 我们还可能期望另一个属性作业, 它是一个有标题的对象,

00:45.730 --> 00:53.950
然后还有一个描述, 我自己的公司｡

00:53.950 --> 00:56.900
如果我们得到这样的数据, 我们当然可以使用它｡ 

00:56.900 --> 01:00.150
现在你可能会做更复杂的事情, 但在这里,

01:00.150 --> 01:06.871
让我们假设我所做的是, 我实际上是上传这里的职位名称｡

01:06.871 --> 01:12.880
现在, 如果我们在开发服务器启动并运行且编译在监视模式下运行的情况下保存该文件,

01:12.880 --> 01:14.420
我将看到CEO｡

01:14.420 --> 01:17.395
这还不算太花哨, 但是, 如果我们从后端获取这些数据,

01:17.395 --> 01:22.395
不管出于什么原因, 我们可能没有获取我们需要的所有数据,

01:23.080 --> 01:30.490
可能有些数据在这一点上没有设置｡

01:30.490 --> 01:39.240
在更大､ 更复杂的应用程序中, 有时候您肯定会处理具有嵌套数据的结构化数据,

01:39.240 --> 01:45.340
其中您不确定对象上的某个属性是否已设置或未定义｡

01:45.340 --> 01:49.680
假设这里不存在作业, 不管是什么原因, 我们没有获取它,

01:49.680 --> 01:53.180
这里当然会出现一个错误, TypeScript会对此进行抱怨,

01:53.180 --> 01:57.843
因为它知道现在没有作业属性.

01:57.843 --> 02:05.660
问题是, 它知道这些数据, 但不知道这些数据是否是我们从某个不受TypeScript控制的文件中获取的,

02:05.660 --> 02:15.550
或者就像我刚才说的, 我们可能是从后端获取的, 我们不确定将返回哪些数据｡

02:15.550 --> 02:21.730
如果你不知道它是否定义好了, 我们可以在普通JavaScript中尝试访问job,

02:21.730 --> 02:25.098
如果成功了, 我们就继续访问title｡

02:25.098 --> 02:29.450
这是JavaScript检查是否存在的方法,

02:29.450 --> 02:33.520
然后我们再深入研究潜在的对象, 如果它是未定义的,

02:33.520 --> 02:39.400
这个代码永远不会运行, 因此我们有更广泛的运行时错误｡

02:39.400 --> 02:42.410
同样, TypeScript当然知道作业不存在,

02:42.410 --> 02:48.470
但如果它是从TypeScript无法查看的某个源（如HTTP请求的结果）获取的,

02:48.470 --> 02:54.920
这将是避免JavaScript中运行时错误的安全方法｡

02:54.920 --> 02:58.110
现在, 如果这确实存在, 我们将得到与之前相同的输出｡ 

02:58.110 --> 03:02.233
如果它不存在, 我们至少不会得到运行时错误｡

03:02.233 --> 03:07.020
有了TypeScript, 你实际上得到了一个更好的方法｡ 

03:07.020 --> 03:10.520
您得到了可选的链接运算符｡ 

03:10.520 --> 03:16.880
你可以在你不确定是否定义的东西后面加一个问号｡

03:16.880 --> 03:21.600
至少在使用TypeScript版本3时是这样｡  7或更高｡ 

03:21.600 --> 03:26.300
这里我的IDE不喜欢这样, 但这是一个受支持的语法｡

03:26.300 --> 03:30.370
这告诉TypeScript它是否存在, 如果它确实访问作业,

03:30.370 --> 03:33.450
因此我们可以在这里添加问号, 因此如果定义了作业,

03:33.450 --> 03:36.314
则只访问标题｡

03:36.314 --> 03:39.300
如果我们这样做, 我仍然会在这里得到一个错误,

03:39.300 --> 03:42.490
如果我试图编译它, 因为TypeScript仍然可以肯定地知道,

03:42.490 --> 03:44.510
该作业不存在｡

03:44.510 --> 03:47.370
但是如果它不知道或者我在这个编译器中注释了这个,

03:47.370 --> 03:51.840
就可以了, 所有的都像以前一样执行｡

03:51.840 --> 04:00.730
这个可选的链接操作符可以帮助我们安全地访问对象数据中的嵌套属性和嵌套对象,

04:00.730 --> 04:03.610
如果问号前面的内容未定义,

04:03.610 --> 04:07.061
它将不会访问后面的内容, 因此不会抛出运行时错误,

04:07.061 --> 04:12.420
而是不会继续｡

04:12.420 --> 04:15.210
所以在幕后, 它基本上被编译成一个if检查,

04:15.210 --> 04:19.213
在尝试访问它之前, 它会检查它是否存在｡
