WEBVTT

00:02.270 --> 00:04.390
Oké, genoeg over algemene functies.

00:04.390 --> 00:06.490
We zullen ze altijd gebruiken tijdens deze

00:06.490 --> 00:08.150
cursus, het hele cursusproject.

00:08.150 --> 00:10.390
Dus dat zou steeds duidelijker moeten worden,

00:10.390 --> 00:11.890
hoe meer we ermee werken.

00:11.890 --> 00:14.823
Het algemene idee is hopelijk nu al duidelijk.

00:15.660 --> 00:18.490
Generieke functies zijn echter niet alles wat we kunnen gebruiken,

00:18.490 --> 00:20.550
we hebben ook generieke klassen en daarom,

00:20.550 --> 00:21.560
laten we eens kijken hoe

00:21.560 --> 00:23.740
we zo'n generieke klasse zouden maken en waarom

00:23.740 --> 00:25.170
we dat zouden kunnen doen, waarom

00:25.170 --> 00:27.760
dat nuttig zou kunnen zijn voor ons.

00:27.760 --> 00:31.950
We zouden hier een opslagklasse kunnen creëren.

00:31.950 --> 00:36.060
Een klasse laat ons zeggen, die een private eigenschap data heeft.

00:36.060 --> 00:38.850
Die uiteindelijk een array van gegevens zal bevatten.

00:38.850 --> 00:40.940
Dan heeft het een addItem methode, die

00:40.940 --> 00:44.200
ons item neemt en dat moet worden toegevoegd aan gegevens met

00:44.200 --> 00:45.763
push, laten we zeggen.

00:48.570 --> 00:50.830
En we hebben een removeItem methode,

00:50.830 --> 00:52.173
die ons item neemt, waar

00:53.010 --> 00:57.740
we dit kunnen zeggen. gegevens. splitsen en dan moeten

00:57.740 --> 01:01.730
we gewoon de indexOff(item) hier krijgen en een element

01:01.730 --> 01:02.910
splitsen.

01:02.910 --> 01:06.030
Zo kunnen we een element uit een array verwijderen.

01:06.030 --> 01:07.873
En natuurlijk getItems, waar we, laten we zeggen,

01:09.750 --> 01:13.120
een kopie van dit teruggeven. gegevens, zoals die met de spread

01:13.120 --> 01:15.770
operator waar je over geleerd hebt.

01:16.610 --> 01:17.443
Nu kunnen we dat

01:17.443 --> 01:19.450
doen en krijgen we een hoop fouten.

01:19.450 --> 01:20.500
We krijgen een hoop fouten,

01:20.500 --> 01:23.900
nu ten eerste omdat de naam Storage een gereserveerde naam is, dus laten we het

01:23.900 --> 01:25.230
Datastorage noemen.

01:25.230 --> 01:26.620
Daar kom je makkelijk vanaf.

01:26.620 --> 01:27.920
Nu krijgen we ook hier een

01:27.920 --> 01:29.400
fout omdat we niets zeggen over

01:29.400 --> 01:30.880
het soort gegevens dat we opslaan,

01:30.880 --> 01:32.960
en welk type item hier heeft.

01:32.960 --> 01:35.870
En dat is precies waar we dit in een generieke klasse kunnen veranderen,

01:35.870 --> 01:38.860
omdat je misschien niet geeft om het type gegevens.

01:38.860 --> 01:40.880
We willen ervoor zorgen dat het uniforme

01:40.880 --> 01:42.410
gegevens zijn, dus alleen strings,

01:42.410 --> 01:44.830
of alleen getallen, of alleen objecten.

01:44.830 --> 01:47.550
Maar verder kan het me niet schelen.

01:47.550 --> 01:50.820
Dus hier kunnen we er een generieke klasse van maken,

01:50.820 --> 01:53.300
door haakjes toe te voegen na de klassenaam

01:53.300 --> 01:56.330
en dan weer T, U, wat u ook wilt gebruiken als identificatie,

01:56.330 --> 02:00.110
en dit hier toevoegen als generiek type.

02:00.110 --> 02:01.083
Nu kunnen we hier

02:01.083 --> 02:04.490
zeggen, dit hier is een array van het type T, dus het slaat

02:04.490 --> 02:07.413
gegevens op van dat generieke type.

02:07.413 --> 02:09.670
Daarom voegen we hier zulke gegevens

02:09.670 --> 02:12.400
toe, en proberen we die hier te verwijderen.

02:12.400 --> 02:15.140
En daarom krijgen we hier items die correct worden

02:15.140 --> 02:18.490
afgeleid om een array van generieke types terug te geven.

02:18.490 --> 02:20.860
En nu kunnen we verschillende opslagplaatsen

02:20.860 --> 02:24.690
maken, we kunnen onze angel of onze tekstopslag hier hebben, door

02:24.690 --> 02:29.500
nieuwe Gegevensopslag aan te roepen, en dat generieke type hier in te stellen

02:29.500 --> 02:31.250
op type string.

02:31.250 --> 02:33.070
En dan hier in textStorage, kan ik addItem

02:33.070 --> 02:34.340
aanroepen, en als ik probeer

02:34.340 --> 02:36.410
een nummer toe te voegen krijg ik een foutmelding

02:36.410 --> 02:37.513
omdat ik zeg dat dit een

02:37.513 --> 02:40.800
DataStorage wordt die alleen steken opslaat.

02:40.800 --> 02:45.800
Dus, ik kan inderdaad Max hier opslaan, en misschien ook Manu, en

02:46.830 --> 02:51.450
dan textStorage aanroepen. removeItem('Max') en dan

02:51.450 --> 02:55.073
console. logboek. tekstopslag. getItems.

02:56.520 --> 02:58.870
En dit zou allemaal moeten werken als we dat opslaan

02:58.870 --> 03:00.300
omdat het een generiek type is,

03:00.300 --> 03:03.103
en inderdaad aan het eind hebben we gewoon Manu erin.

03:04.400 --> 03:08.240
Dus dit is een eenvoudige generieke klasse die we kunnen maken.

03:08.240 --> 03:10.500
Waarom zouden we zo'n generieke klasse bouwen?

03:10.500 --> 03:11.770
Nou, zoals ik al zei,

03:11.770 --> 03:14.220
omdat we misschien niet alleen teksten

03:14.220 --> 03:17.110
willen opslaan, maar ook getallen in een andere

03:17.110 --> 03:18.950
gegevensopslag.

03:18.950 --> 03:21.510
Dus dan zou ik zo'n DataStorage kunnen maken, en dit

03:21.510 --> 03:23.810
op nummer zetten zorgt ervoor dat we nu alleen

03:23.810 --> 03:26.250
nummers aan die opslag kunnen toevoegen.

03:26.250 --> 03:28.330
Natuurlijk kunnen we ook een opslag opzetten waarbij

03:28.330 --> 03:30.520
we beide toestaan door een union-type te gebruiken.

03:30.520 --> 03:32.550
We hebben dus volledige flexibiliteit,

03:32.550 --> 03:36.470
maar we geven het type wat extra informatie, waardoor dit

03:36.470 --> 03:38.490
zowel een flexibele als een sterk

03:38.490 --> 03:41.450
getypeerde klasse wordt.

03:41.450 --> 03:43.470
Net als bij functies.

03:43.470 --> 03:46.910
Echt flexibel en nog steeds perfecte type ondersteuning.

03:46.910 --> 03:49.900
Dat is het hele idee achter generieke types.

03:49.900 --> 03:52.680
Dus, hier kunnen we dat doen met de DataStorage klasse door

03:52.680 --> 03:53.750
strings op te slaan, of

03:53.750 --> 03:55.130
door getallen op te slaan, of

03:55.130 --> 03:56.513
wat we maar willen.

03:57.790 --> 04:01.300
We hebben echter één probleem met onze dataopslag klasse.

04:01.300 --> 04:04.880
Laten we zeggen dat ik hier mijn objectopslag heb, nu kan

04:04.880 --> 04:07.090
ik een nieuwe DataStorage maken en

04:07.090 --> 04:10.490
daarin zeggen dat ik objecten wil opslaan, juist,

04:10.490 --> 04:12.270
ik wil objecten opslaan en

04:12.270 --> 04:17.270
natuurlijk kunnen we naar objectopslag gaan en een item toevoegen.

04:17.300 --> 04:20.460
Laten we zeggen een object dat ik Max noem.

04:20.460 --> 04:22.920
Laten we ook een ander object opslaan,

04:22.920 --> 04:24.760
waar ik Manu opsla.

04:24.760 --> 04:26.770
Dan, laten we zeggen dat we wat dingen

04:26.770 --> 04:28.310
doen in onze code en dan op een

04:28.310 --> 04:29.740
later tijdstip hier, wil ik

04:29.740 --> 04:34.100
het item verwijderen, ik wil het item met naam: 'Manu' hier verwijderen.

04:34.100 --> 04:37.863
En dan wil ik troosten. logboek. objStorage. getItems.

04:39.450 --> 04:40.550
Zoals dat.

04:40.550 --> 04:41.883
Als we dat opslaan,

04:42.920 --> 04:45.840
zien we dat we een object hebben dat Max is.

04:45.840 --> 04:47.470
Dus dat ziet er goed uit.

04:47.470 --> 04:49.140
Nu, het is niet echt goed.

04:49.140 --> 04:52.490
Laten we zeggen dat ik Max nu wil verwijderen, zodat

04:52.490 --> 04:55.740
we Manu overhouden in de gegevensopslag.

04:55.740 --> 04:59.653
Dus, als ik herlaad, is het nog steeds Max.

05:00.550 --> 05:03.660
Nu is het probleem dat we hier werken met objecten, zoals

05:03.660 --> 05:07.350
u weet zijn objecten in JavaScript referentietypes.

05:07.350 --> 05:09.440
Nu, bevestig om een extra bron te vinden, die

05:09.440 --> 05:11.460
u toelaat om in referentie te duiken.

05:11.460 --> 05:12.730
Terwijl primitieve waarden,

05:12.730 --> 05:14.650
hier neem ik aan dat je het verschil kent

05:14.650 --> 05:16.970
omdat het een kernding van JavaScript is, totaal

05:16.970 --> 05:19.060
niet gerelateerd aan typescript.

05:19.060 --> 05:20.600
Hier is het probleem dat de manier

05:20.600 --> 05:22.300
waarop onze klasse is opgebouwd

05:22.300 --> 05:26.243
met deze logica over hoe gegevens worden verwijderd en geïdentificeerd,

05:27.080 --> 05:29.580
we niet echt goed werk leveren wanneer we werken

05:29.580 --> 05:32.200
met niet-primitieve waarden.

05:32.200 --> 05:35.130
Dus, als we werken met objecten of arrays, omdat indexOf,

05:35.130 --> 05:37.840
als we hier een object invoeren, zal het niet werken

05:37.840 --> 05:40.910
omdat dit technisch gezien een nieuw object is.

05:40.910 --> 05:43.800
Het ziet er misschien zo uit, maar het werkt niet omdat dit

05:43.800 --> 05:46.520
technisch gezien een gloednieuw object in het geheugen

05:46.520 --> 05:48.290
is en een ander adres heeft.

05:48.290 --> 05:52.110
En inderdaad zal JavaScript hier zoeken naar het adres en het in

05:52.110 --> 05:54.930
principe niet vinden, dus wat het dan doet is het

05:54.930 --> 05:58.453
laatste element in de array hier verwijderen, omdat dit uiteindelijk

05:59.510 --> 06:01.473
-1 teruggeeft.

06:02.419 --> 06:06.070
IndexOf geeft -1 terug, zelfs als het niets vindt.

06:06.070 --> 06:07.990
Wat betekent dat het begint aan het einde van de

06:07.990 --> 06:09.770
array, dat is normaal Javascript gedrag en

06:09.770 --> 06:11.921
verwijdert het laatste element van de array.

06:11.921 --> 06:14.190
Daarom werkte het voor Manu, het werkte niet

06:14.190 --> 06:16.810
echt het werkte per ongeluk, maar waarom het voor

06:16.810 --> 06:19.020
Max niet werkt, we verwijderen voorlopig

06:19.020 --> 06:19.880
altijd het laatste

06:19.880 --> 06:21.760
element van de array, omdat we het niet

06:21.760 --> 06:23.670
kunnen identificeren.

06:23.670 --> 06:25.890
Een manier om dat op te lossen is te

06:25.890 --> 06:29.140
controleren of we ons item hebben gevonden, dus

06:29.140 --> 06:32.260
we kunnen controleren of deze code hier gelijk

06:32.260 --> 06:36.260
is aan -1, wat betekent dat we het niet hebben gevonden.

06:36.260 --> 06:37.360
Dan kunnen we terugkeren

06:37.360 --> 06:40.780
en ervoor zorgen dat we niet per ongeluk het verkeerde item verwijderen.

06:40.780 --> 06:42.900
Maar natuurlijk hebben we nu die balk gerepareerd,

06:42.900 --> 06:44.850
maar we hebben nog steeds niet die innerlijke staat

06:44.850 --> 06:46.580
waarin het zou werken met objecten.

06:46.580 --> 06:48.890
De enige manier waarop het zou kunnen werken met objecten,

06:48.890 --> 06:51.740
is als we exact hetzelfde object opnieuw doorgeven.

06:51.740 --> 06:55.700
Dus als ik mijn max object had opgeslagen in een constante,

06:55.700 --> 06:58.840
zoals dit, en hier het max object doorgeef.

06:58.840 --> 07:02.050
En ik doe hetzelfde hier, dan gebruik ik echt hetzelfde, exact hetzelfde

07:02.050 --> 07:05.330
object, exact hetzelfde object in het geheugen, en daarom, nu zou

07:05.330 --> 07:06.540
het werken.

07:06.540 --> 07:08.930
Dit zou de enige manier zijn om dit te laten werken.

07:08.930 --> 07:12.340
Dus daarom is het hier misschien beter om ervoor te zorgen

07:12.340 --> 07:16.150
dat dit echt alleen werkt met primitieve waarden.

07:16.150 --> 07:20.100
Dus, we zouden kunnen zeggen dat T string, nummer,

07:20.100 --> 07:24.010
misschien alle boolean's toevoegt.

07:24.010 --> 07:25.990
Dus nu zeggen we eigenlijk dat DataStorage

07:25.990 --> 07:27.920
alleen met deze types mag werken.

07:27.920 --> 07:30.470
Daarom zijn objecten niet meer toegestaan.

07:30.470 --> 07:32.500
Dat is hier misschien beter, omdat we dan een

07:32.500 --> 07:35.220
meer gespecialiseerde DataStorage nodig zouden hebben,

07:35.220 --> 07:38.290
die dan waarschijnlijk alleen met objecten op zijn beurt werkt,

07:38.290 --> 07:40.080
en niet met primitieve waarden.

07:40.080 --> 07:42.430
Om onze ophaallogica te verfijnen, om misschien

07:42.430 --> 07:44.800
te controleren of er iD in het item zit dat verwijderd

07:44.800 --> 07:45.880
moet worden.

07:45.880 --> 07:46.970
Zoals het hier werkt, werkt

07:46.970 --> 07:48.910
het eigenlijk alleen voor primitieve types,

07:48.910 --> 07:52.320
dus het instellen van zo'n beperking is zeker een goed idee.

07:52.320 --> 07:55.610
En daarmee als we het opslaan, nadat we dit hebben uitgecommentarieerd,

07:55.610 --> 07:57.253
werkt het natuurlijk weer.

07:58.810 --> 08:00.540
Nu hoeft het geen betoog dat je

08:00.540 --> 08:02.620
hier natuurlijk ook meer dan één generiek

08:02.620 --> 08:04.310
type kunt hebben.

08:04.310 --> 08:05.910
U bent niet beperkt tot één type

08:05.910 --> 08:07.600
wanneer u met klassen werkt.

08:07.600 --> 08:09.610
En je kunt ook methoden hebben, die

08:09.610 --> 08:13.080
hun eigen generieke types hebben in plaats van klassen.

08:13.080 --> 08:16.630
Je zou dus nieuwe generieke types kunnen introduceren in methoden van een klasse,

08:16.630 --> 08:18.010
als je een generiek type hebt dat

08:18.010 --> 08:19.750
alleen nodig is in een bepaalde methode,

08:19.750 --> 08:21.580
en niet in de hele klasse.

08:21.580 --> 08:23.000
Dus je bent echt flexibel daar.

08:23.000 --> 08:25.570
U kunt overal constraints gebruiken

08:25.570 --> 08:28.100
en in het algemeen zijn generieke types

08:28.100 --> 08:30.240
er om u het leven gemakkelijker

08:30.240 --> 08:33.900
te maken en u die perfecte combinatie van volledige flexibiliteit

08:33.900 --> 08:36.010
te geven.

08:36.010 --> 08:39.310
We kunnen hier elke primitieve waarde gebruiken die je wilt

08:39.310 --> 08:40.900
en typeveiligheid, omdat we

08:40.900 --> 08:42.820
heel goed weten wat er in deze DataStorage

08:42.820 --> 08:44.710
is opgeslagen en wat er in deze DataStorage

08:44.710 --> 08:46.770
is opgeslagen.

08:46.770 --> 08:50.660
Dus deze combinatie is het geweldige wat generieke

08:50.660 --> 08:52.283
types ons geven.
