WEBVTT

00:02.160 --> 00:03.330
Presentador: Ahora las

00:03.330 --> 00:06.080
clases y todas las funciones constructoras que existen

00:06.080 --> 00:09.280
desde hace más tiempo no sólo tienen propiedades que se pueden

00:09.280 --> 00:12.780
utilizar para definir la estructura general del objeto.

00:12.780 --> 00:14.770
También puedes añadir métodos.

00:14.770 --> 00:17.460
En realidad sí tenemos el método constructor ahí.

00:17.460 --> 00:19.620
Pero eso es sólo una función de utilidad,

00:19.620 --> 00:22.940
que se llama, cuando se instancian la clase.

00:22.940 --> 00:25.584
Recuerde, en el pasado, sólo teníamos funciones constructoras,

00:25.584 --> 00:28.100
ahora tenemos ese azúcar sintáctico, pero todavía tenemos

00:28.100 --> 00:30.460
el constructor una función que podemos añadir para

00:30.460 --> 00:33.300
ejecutar cualquier código de inicialización.

00:33.300 --> 00:36.350
También es posible que desee añadir un par de funciones

00:36.350 --> 00:38.600
o métodos que luego son llamados que puede

00:38.600 --> 00:40.980
llamar en el objeto creado.

00:40.980 --> 00:44.000
Por ejemplo, un método de descripción aquí en nuestra

00:44.000 --> 00:46.000
clase de departamento.

00:46.000 --> 00:47.994
Ahora un método se añade así,

00:47.994 --> 00:49.382
el nombre del método,

00:49.382 --> 00:53.270
luego sin dos puntos, sin signo de igualdad en su lugar,

00:53.270 --> 00:56.090
paréntesis y luego llaves.

00:56.090 --> 00:59.070
Los paréntesis toman cualquier argumento que pueda necesitar.

00:59.070 --> 01:00.780
Ahora digamos que aquí no necesitamos

01:00.780 --> 01:03.330
ninguno, de lo contrario podrías añadir parámetros tal

01:03.330 --> 01:05.150
y como lo haces en una función normal.

01:05.150 --> 01:07.280
Sin embargo, lo que siempre se necesita

01:07.280 --> 01:10.000
es un cuerpo de función o un cuerpo de método

01:10.000 --> 01:12.020
entre las llaves.

01:12.020 --> 01:14.693
Aquí se define la lógica de su método.

01:15.580 --> 01:19.570
Y ahí podríamos querer emitir el nombre del departamento

01:19.570 --> 01:22.410
con un poco de información extra tal vez.

01:22.410 --> 01:26.230
Podemos hacerlo, por supuesto, con la consola. registro, por ejemplo, el

01:26.230 --> 01:30.620
departamento, los dos puntos y luego tal vez el nombre.

01:30.620 --> 01:32.100
Sin embargo, esto no funcionaría.

01:32.100 --> 01:34.570
Esto buscaría un nombre de variable, que

01:34.570 --> 01:37.710
tiene que existir dentro de este método descrito,

01:37.710 --> 01:40.860
o fuera de la clase como una variable global.

01:40.860 --> 01:42.470
Y como ves si eligió edad, me da

01:42.470 --> 01:44.433
un error por nombre no lo hago, no me

01:44.433 --> 01:46.540
da esto porque en realidad hay una variable

01:46.540 --> 01:50.100
de nombre global en el navegador en el objeto ventana.

01:50.100 --> 01:53.030
Sin embargo, esto no se referiría a esta propiedad de

01:53.030 --> 01:57.130
nombre aquí, sino a alguna variable de nombre global fuera de esta clase.

01:57.130 --> 01:59.599
Para referirse a una propiedad o método de la clase

01:59.599 --> 02:01.930
desde dentro de la misma, tenemos que utilizar

02:01.930 --> 02:03.590
la palabra clave this como lo hacemos

02:03.590 --> 02:05.630
aquí en el constructor.

02:05.630 --> 02:08.980
Esto, por lo general, remite a la instancia

02:08.980 --> 02:12.400
concreta de esta clase que se creó.

02:12.400 --> 02:14.240
Y ahí con la notación de puntos, podemos

02:14.240 --> 02:16.600
acceder a todas las propiedades y métodos de esta

02:16.600 --> 02:17.650
instancia.

02:17.650 --> 02:19.555
En este caso, esto. nombre.

02:19.555 --> 02:24.555
Así que si ahora, ahí abajo, llamo a contabilidad. describen así.

02:24.583 --> 02:28.110
La palabra clave this, cuando se ejecute this, se referirá

02:28.110 --> 02:30.920
a este objeto contable concreto que fue construido

02:30.920 --> 02:33.730
en base a esta clase.

02:33.730 --> 02:35.530
Así que si ahora guardo eso, y recargamos,

02:35.530 --> 02:38.570
deberíamos ver esta salida aquí, de la que por supuesto tiene

02:38.570 --> 02:40.420
un error tipográfico, pero en general

02:40.420 --> 02:42.110
funciona.

02:42.110 --> 02:43.944
Ahora vamos a arreglar la errata aquí.

02:43.944 --> 02:46.190
Así es como podemos añadir un método.

02:46.190 --> 02:48.166
Ahora qué palabra importante sobre esta palabra clave.

02:48.166 --> 02:50.600
Como probablemente sabes, si has trabajado

02:50.600 --> 02:54.890
un poco con JavaScript, la palabra clave this puede ser complicada.

02:54.890 --> 02:56.090
Por ejemplo, si yo

02:56.090 --> 03:00.090
añadiría otro objeto aquí copia de contabilidad y este

03:01.480 --> 03:03.350
es nuestro objeto que sólo

03:03.350 --> 03:06.430
tiene el método de describir y me atrevo a señalar

03:06.430 --> 03:11.270
la contabilidad. describir.

03:11.270 --> 03:15.470
Entonces si llamo a accountingcopy. describir como método, ¿qué

03:15.470 --> 03:17.150
crees que pasará?

03:17.150 --> 03:19.200
¿Cree que se producirá un error?

03:19.200 --> 03:21.200
Ciertamente no obtenemos ningún error de compilación

03:21.200 --> 03:22.927
que se compila sin problemas.

03:22.927 --> 03:26.360
Pero en tiempo de ejecución, vemos el departamento indefinido.

03:26.360 --> 03:28.780
Y la razón de esto es que lo que estoy haciendo

03:28.780 --> 03:32.010
es añadir una propiedad de descripción a este objeto

03:32.010 --> 03:34.040
que se crea con el objeto literal,

03:34.040 --> 03:37.888
no basado en esta clase, pero sólo como un objeto ficticio no basado

03:37.888 --> 03:41.420
en ninguna clase específica que haya definido.

03:41.420 --> 03:44.360
Y entonces el valor de esta propiedad describe

03:44.360 --> 03:49.000
es un puntero al método describe de mi objeto contable.

03:49.000 --> 03:52.168
Así que estoy apuntando a este método aquí para encontrar

03:52.168 --> 03:54.690
para este objeto concreto.

03:54.690 --> 03:56.240
No lo estoy ejecutando.

03:56.240 --> 03:57.723
Así que no voy a pasar el valor

03:57.723 --> 04:00.410
de la ejecución de esta función para describir.

04:00.410 --> 04:04.090
Realmente estoy pasando la función en sí para describir aquí.

04:04.090 --> 04:06.430
Así que cuando luego llamo a describir aquí en la

04:06.430 --> 04:08.950
copia, efectivamente se ejecuta el método todo esto

04:08.950 --> 04:10.440
funciona correctamente.

04:10.440 --> 04:13.690
El problema es que, cuando este método se ejecute,

04:13.690 --> 04:17.040
no se referirá al objeto del que este método formaba

04:17.040 --> 04:19.170
parte originalmente, por lo que

04:19.170 --> 04:21.140
no al objeto contable.

04:21.140 --> 04:22.350
En cambio, esto, y es

04:22.350 --> 04:25.050
una buena regla general que puedes memorizar,

04:25.050 --> 04:27.900
se refiere típicamente a la cosa que es responsable

04:27.900 --> 04:29.650
de llamar a un método.

04:29.650 --> 04:32.190
Y el responsable de llamar al método describir

04:32.190 --> 04:34.880
aquí en este caso, es la copia contable.

04:34.880 --> 04:39.160
Porque llamamos a describir en la copia contable.

04:39.160 --> 04:42.320
Así que esto se referirá a la cosa delante del punto aquí, que

04:42.320 --> 04:43.980
es la copia de la contabilidad.

04:43.980 --> 04:47.530
Sin embargo, se trata de un objeto que no tiene la propiedad nombre.

04:47.530 --> 04:49.678
Así que cuando acceda a esto. name, me da

04:49.678 --> 04:53.968
un error porque no se refiere a un objeto

04:53.968 --> 04:56.610
con la propiedad name.

04:56.610 --> 04:59.220
Así que el nombre nos produce una indefinición.

04:59.220 --> 05:02.260
Y es por eso que estoy recibiendo esta extraña salida.

05:02.260 --> 05:04.310
Eso es una cosa que tienes que tener en cuenta,

05:04.310 --> 05:07.470
no sólo en TypeScript, es una cosa de JavaScript.

05:07.470 --> 05:09.540
Y por supuesto, por lo tanto, también

05:09.540 --> 05:11.500
puede sucederle en TypeScript.

05:11.500 --> 05:13.940
Ahora, para solucionar este problema,

05:13.940 --> 05:16.660
"este", puedes añadir un parámetro al

05:16.660 --> 05:18.150
método describir, que

05:18.150 --> 05:19.730
se llama este.

05:19.730 --> 05:21.380
Es un parámetro especial,

05:21.380 --> 05:25.334
una instrucción especial entendida por TypeScript.

05:25.334 --> 05:28.430
Si añades un parámetro llamado esto aquí,

05:28.430 --> 05:31.420
no es realmente un parámetro esperado,

05:31.420 --> 05:36.010
todavía puedes llamar a describir sin pasar ningún valor.

05:36.010 --> 05:38.476
En su lugar, esto es interpretado por TypeScript,

05:38.476 --> 05:42.980
para ser una pista con respecto a lo que esto debe ser referido.

05:42.980 --> 05:45.960
Y ahora es importante asignar un tipo a esto.

05:45.960 --> 05:48.810
Y el tipo aquí, en este caso debe ser nuestro

05:48.810 --> 05:51.780
tipo de clase aquí, así que el departamento.

05:51.780 --> 05:53.840
Lo que estoy diciendo con esto

05:53.840 --> 05:56.250
es, cuando se ejecuta este dentro

05:56.250 --> 05:59.375
de describir, por lo que en este caso aquí, siempre

05:59.375 --> 06:02.550
debe referirse a una instancia que se basa en

06:02.550 --> 06:05.040
la clase de departamento.

06:05.040 --> 06:09.160
Así que un objeto que al final sería de tipo departamento.

06:09.160 --> 06:12.370
Y por lo tanto, ahora realmente obtenemos un error allí,

06:12.370 --> 06:14.140
obtenemos un error aquí, porque

06:14.140 --> 06:16.012
lo que tenemos aquí es que cuando

06:16.012 --> 06:19.800
llamamos a describir aquí en la copia de la contabilidad, no lo

06:19.800 --> 06:24.100
estamos llamando en una instancia del departamento.

06:24.100 --> 06:26.350
Por lo tanto, esto será violado.

06:26.350 --> 06:29.540
Esto en este caso, no se referirá a un

06:29.540 --> 06:32.250
objeto de tipo departamento.

06:32.250 --> 06:34.690
Así que aquí añadimos un poco de seguridad de tipo

06:34.690 --> 06:36.920
adicional mediante la adición de este parámetro

06:36.920 --> 06:39.450
ficticio, porque ahora si trato de guardar esto,

06:39.450 --> 06:42.480
me da un error relacionado con esta línea aquí.

06:42.480 --> 06:44.950
Porque ahora sí, ejecutaríamos algún código

06:44.950 --> 06:47.030
que no funcionaría como se esperaba.

06:47.030 --> 06:49.260
Así que tenemos que arreglar esto, por ejemplo,

06:49.260 --> 06:51.140
mediante la adición de una propiedad

06:52.040 --> 06:55.290
nombre aquí para que eso funcione porque ahora TypeScript ve

06:55.290 --> 06:57.702
Vale, el objeto sobre el que está llamando a describir,

06:57.702 --> 07:02.702
ahora tiene una propiedad nombre al igual que esto espera que tenga porque esto se basa en el objeto

07:03.840 --> 07:05.803
departamento, que también tiene una

07:05.803 --> 07:08.070
propiedad nombre.

07:08.070 --> 07:10.790
Así que ahora aquí, TypeScript sería feliz porque

07:10.790 --> 07:12.270
hemos añadido el nombre.

07:12.270 --> 07:14.934
Si lo quito, volvemos a tener el error con el nombre

07:14.934 --> 07:17.277
sin embargo esto funciona, y evitamos

07:17.277 --> 07:19.750
esta salida indefinida de antes.

07:19.750 --> 07:22.770
Así que es importante entender esto.

07:22.770 --> 07:26.140
Y es importante ser consciente de esta mejora que podrías

07:26.140 --> 07:28.410
añadir a tu código para asegurarte de

07:28.410 --> 07:31.190
que capturas comportamientos no deseados como

07:31.190 --> 07:32.993
el que teníamos antes.
