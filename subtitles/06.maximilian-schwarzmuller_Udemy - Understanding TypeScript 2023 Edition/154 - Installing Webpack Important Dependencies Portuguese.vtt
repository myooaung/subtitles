WEBVTT

00:02.160 --> 00:05.373
-: Portanto, de volta ao nosso projeto, se você quiser usar o webpack lá, primeiro

00:07.223 --> 00:09.948
vou deixar minha compilação e aquele servidor de desenvolvimento

00:09.948 --> 00:10.870
atual, e depois, stat,

00:10.870 --> 00:13.440
garantir que possamos usar o webpack lá.

00:13.440 --> 00:16.420
Agora, como este já é um arquivo do pacote de arquivos

00:16.420 --> 00:19.462
.json, podemos usar o NPM para instalar mais dependências

00:19.462 --> 00:21.050
neste projeto.

00:21.050 --> 00:23.410
Portanto, simplesmente, precisamos de mais bibliotecas

00:23.410 --> 00:24.940
de terceiros neste projeto.

00:24.940 --> 00:28.610
E aqui não me refiro a bibliotecas de terceiros que fornecem certas

00:28.610 --> 00:31.480
funcionalidades usando nosso código, mas bibliotecas

00:31.480 --> 00:33.930
de terceiros que nos ajudam a estabelecer um

00:33.930 --> 00:37.157
fluxo de trabalho e uma configuração de projeto que torna

00:37.157 --> 00:40.430
o desenvolvimento muito eficiente para nós.

00:40.430 --> 00:45.110
Fazemos isso com NPM instalado, dash dash dev dev seguro para

00:45.110 --> 00:48.600
indicar que é apenas uma dependência de desenvolvimento,

00:48.600 --> 00:53.600
e depois webpack webpack dash CLI, webpack dash dev dev dev dev

00:53.713 --> 00:58.713
dev servidor typescript e ts loader.

01:01.030 --> 01:03.040
Então isso é um monte de pacotes e direi

01:03.040 --> 01:04.800
o que eles fazem em um segundo.

01:04.800 --> 01:06.680
Portanto, vamos primeiro entrar e nos

01:06.680 --> 01:08.485
certificar de que todos eles estão agora

01:08.485 --> 01:10.801
sendo instalados em nosso projeto aqui, e depois

01:10.801 --> 01:14.100
daremos uma olhada em cada pacote e veremos porque o instalamos, então

01:14.100 --> 01:16.290
vamos esperar que isto termine.

01:16.290 --> 01:18.530
Por isso, terminou a instalação para mim aqui,

01:18.530 --> 01:21.710
e agora com isso, vamos analisar o que nós instalamos.

01:21.710 --> 01:25.380
No package dot json, a seção de novas dependências, ou já existia,

01:25.380 --> 01:27.063
mas agora temos muitos pacotes

01:27.063 --> 01:29.474
novos lá, devo dizer, estes pacotes foram

01:29.474 --> 01:31.290
adicionados.

01:31.290 --> 01:33.690
O que todos esses pacotes fazem agora?

01:33.690 --> 01:35.460
Vamos começar com o webpack.

01:35.460 --> 01:37.580
Webpack é a ferramenta de que acabei

01:37.580 --> 01:40.080
de falar, é o coração de toda esta configuração

01:40.080 --> 01:41.780
que agora vamos criar.

01:41.780 --> 01:43.980
É uma ferramenta que nos permite conectar

01:43.980 --> 01:47.150
certas funcionalidades para agrupar nosso código e também

01:47.150 --> 01:49.210
para transformar nosso código.

01:49.210 --> 01:52.470
E isso transforma nossa parte de código é importante, estamos

01:52.470 --> 01:54.740
tendo aqui um projeto de digitação, certo?

01:54.740 --> 01:56.620
Agora, é claro que poderíamos certamente

01:56.620 --> 02:00.220
usar o webpack para então agrupar toda a saída JavaScript, mas seria ainda

02:00.220 --> 02:03.310
mais agradável se o webpack fizesse as duas coisas.

02:03.310 --> 02:06.250
Transforme nosso código de digitação em JavaScript,

02:06.250 --> 02:10.180
e então realmente emita um arquivo Javascript empacotado, e o

02:10.180 --> 02:13.420
webpack é capaz de fazer isso, felizmente.

02:13.420 --> 02:16.610
Precisamos do webpack CLI para executar comandos webpack

02:16.610 --> 02:18.922
em nosso projeto, e do servidor webpack

02:18.922 --> 02:21.603
dev para ter aquele servidor de desenvolvimento

02:21.603 --> 02:24.286
embutido, que inicia o webpack sob o capô, que

02:24.286 --> 02:27.056
observa nossos arquivos para alterações, aciona

02:27.056 --> 02:30.180
automaticamente o webpack para recompilar quando

02:30.180 --> 02:34.760
algo muda, e que serve automaticamente nossa página.

02:34.760 --> 02:37.300
E depois temos aqui o datilógrafo e o datilógrafo,

02:37.300 --> 02:39.460
o carregador de ts.

02:39.460 --> 02:42.850
Agora já instalamos typescript globalmente em nossa máquina,

02:42.850 --> 02:46.208
e é por isso que somos capazes de executar o tsc dash w.

02:46.208 --> 02:49.760
Agora é uma boa prática instalar automaticamente uma cópia do

02:49.760 --> 02:53.450
datilografia por projeto, de modo que para este projeto, você tenha

02:53.450 --> 02:56.000
uma versão específica datilografia.

02:56.000 --> 02:58.320
As vantagens de que se você mudar sua versão

02:58.320 --> 03:01.624
datilográfica global, você não quebra sua versão de projeto,

03:01.624 --> 03:05.170
sua configuração de projeto se houver mudanças na própria digitação,

03:05.170 --> 03:07.280
para que possamos trancar em uma versão

03:07.280 --> 03:10.340
específica de digitação para um projeto, é por isso que

03:10.340 --> 03:13.880
a instalamos separadamente aqui.

03:13.880 --> 03:16.440
E o carregador de ts agora é um pacote que funcionará

03:16.440 --> 03:18.380
em conjunto com o webpack.

03:18.380 --> 03:21.068
O carregador ts é um pacote que diz ao webpack

03:21.068 --> 03:24.396
como converter o código digitado para Javascript, para

03:24.396 --> 03:29.180
que o webpack seja capaz de fazer ambos, compilar nosso código, com a ajuda do

03:29.180 --> 03:30.920
carregador typescript, que

03:30.920 --> 03:33.370
por sua vez usa o compilador typescript

03:33.370 --> 03:36.665
sob o capô, e então o webpack também é capaz de empacotar

03:36.665 --> 03:41.580
nossos arquivos javascript emitidos em um arquivo js empacotado em um arquivo

03:41.580 --> 03:44.260
de código empacotado.

03:44.260 --> 03:47.440
Bem, e com isso, vamos simplesmente começar e montar

03:47.440 --> 03:50.852
um projeto de webpack para que possamos usar webpack

03:50.852 --> 03:53.223
para todas essas coisas legais.
