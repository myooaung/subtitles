WEBVTT

00:02.390 --> 00:04.530
Ausbilder: Jetzt ist das Versenden von Anfragen

00:04.530 --> 00:06.890
ohne ein Drittanbieterpaket möglich.

00:06.890 --> 00:10.140
In modernem JavaScript in modernen Browsern müssen

00:10.140 --> 00:11.910
Sie die API abrufen.

00:11.910 --> 00:13.620
Diese Funktion ist in den Browsern

00:13.620 --> 00:16.710
eingebaut, sie ist global verfügbar und Sie können sie

00:16.710 --> 00:19.600
verwenden, um Anfragen an URLs zu senden.

00:19.600 --> 00:22.450
Es gibt nichts, was gegen diese API spricht, außer

00:22.450 --> 00:24.870
der Tatsache, dass die Fehlerbehandlung

00:24.870 --> 00:27.210
mit ihr etwas klobig sein kann.

00:27.210 --> 00:29.250
Ich möchte aber auch die Verwendung von Bibliotheken

00:29.250 --> 00:31.123
von Drittanbietern üben.

00:31.960 --> 00:36.070
Deshalb werden wir das sehr beliebte axios-Paket verwenden.

00:36.070 --> 00:38.510
Dies ist ein Paket, das Sie in JavaScript

00:38.510 --> 00:43.510
und damit auch in TypeScript verwenden können, um HTTP-Anfragen zu senden.

00:43.880 --> 00:47.263
Wir müssen also nur axios installieren, um es zu benutzen.

00:48.100 --> 00:51.080
In unserem Projekt, in dem wir NPM zur Verwaltung

00:51.080 --> 00:54.150
von Abhängigkeiten verwenden können, können wir

00:54.150 --> 00:57.620
npm install, dash, dash save axios so ausführen, dass

00:57.620 --> 01:00.520
das axios-Paket installiert wird.

01:00.520 --> 01:04.750
Mit dieser Installation können wir nun Axios importieren, importieren

01:04.750 --> 01:07.390
Sie Axios von Axios, und Sie werden etwas Interessantes

01:07.390 --> 01:09.170
sehen.

01:09.170 --> 01:12.090
Wenn ich jetzt damit anfange und hier einen Punkt eintippe, bekomme

01:12.090 --> 01:13.990
ich die automatische Vervollständigung.

01:13.990 --> 01:16.290
Und zum Beispiel haben Sie hier eine get-Methode,

01:16.290 --> 01:18.523
die eine get-Anfrage an eine URL sendet.

01:19.850 --> 01:23.150
Hier haben wir also tatsächlich integrierte TypeScript-Unterstützung.

01:23.150 --> 01:25.640
Und wenn wir zu den Knotenmodulen gehen und

01:25.640 --> 01:29.670
einen Blick auf das axios-Paket werfen, dann sehen wir es hier.

01:29.670 --> 01:33.970
Sie werden sehen, dass es dort einen Index gibt. dts-Datei.

01:33.970 --> 01:38.970
Daher haben die Autoren der axios-Bibliothek ihre Bibliothek bereits mit

01:39.430 --> 01:43.750
einem solchen TypeScript-Übersetzungspaket gebündelt.

01:43.750 --> 01:47.440
Darin wird alles zu TypeScript erklärt.

01:47.440 --> 01:50.120
Dieses Paket oder diese Datei hier erklärt TypeScript

01:50.120 --> 01:53.660
im Wesentlichen, was diese JavaScript-Bibliothek kann und welche

01:53.660 --> 01:55.600
Typen sie verwendet.

01:55.600 --> 01:59.100
Einige Bibliotheken tun das, und axios ist eine davon.

01:59.100 --> 02:02.070
Sie können ziemlich schnell feststellen, ob eine Bibliothek dies tut oder nicht,

02:02.070 --> 02:03.420
wenn Sie anfangen, sie zu benutzen.

02:03.420 --> 02:05.520
Wenn Sie keine Unterstützung für die Autovervollständigung

02:05.520 --> 02:07.930
erhalten und viele Kompilierungsfehler auftreten, müssen

02:07.930 --> 02:10.750
Sie wahrscheinlich zusätzliche Typen installieren.

02:10.750 --> 02:12.970
Wenn Sie gute Unterstützung bekommen, wie wir

02:12.970 --> 02:16.120
hier, und Sie danach keine Kompilierungsfehler bekommen, dann

02:16.120 --> 02:18.140
haben Sie bereits eine Bibliothek mit eingebauten

02:18.140 --> 02:20.170
Typübersetzungen.

02:20.170 --> 02:23.120
Sie brauchen also keine zusätzlichen Typen zu installieren.

02:23.120 --> 02:26.240
Gut zu wissen, und hier haben wir ein tolles Beispiel.

02:26.240 --> 02:27.800
Da wir also über eine eingebaute Unterstützung

02:27.800 --> 02:30.410
verfügen, können wir sofort mit dem Zugriff beginnen.

02:30.410 --> 02:34.350
Und ich möchte jetzt eine HTTP-Anfrage an diese URL senden.

02:34.350 --> 02:37.980
Kopieren wir also diese URL und geben wir sie hier ein.

02:37.980 --> 02:40.220
Und ich werde es zwischen Backticks eingeben,

02:40.220 --> 02:42.440
um ein Vorlagenliteral zu erstellen,

02:42.440 --> 02:45.880
so dass sie leicht Teile dieser Zeichenkette für dynamische

02:45.880 --> 02:49.050
für andere Werte austauschen können.

02:49.050 --> 02:51.730
Fügen wir also die recht lange Zeichenkette ein und beginnen

02:51.730 --> 02:55.460
wir damit, den API-Schlüssel am Ende durch unseren Google-API-Schlüssel

02:55.460 --> 02:59.210
zu ersetzen, den wir in dieser Konstante gespeichert haben.

02:59.210 --> 03:01.690
Da es sich um ein Vorlagenliteral handelt, können

03:01.690 --> 03:04.110
wir Dollarzeichen und geschweifte Klammern hinzufügen

03:04.110 --> 03:09.110
und dann auf den Google-API-Schlüssel zeigen, um diese Konstante zu verwenden.

03:10.820 --> 03:13.240
Außerdem sollten wir diese Adresse austauschen.

03:13.240 --> 03:15.500
Hier haben wir eine Dummy-Adresse eingegeben und

03:15.500 --> 03:17.130
ich möchte natürlich die Adresse verwenden,

03:17.130 --> 03:19.300
die der Benutzer eingegeben hat.

03:19.300 --> 03:22.540
Nun noch ein wichtiger Hinweis: Diese Adresse ist natürlich

03:22.540 --> 03:24.910
genau der Text, den der Benutzer eingegeben

03:24.910 --> 03:27.560
hat, und sie kann Sonderzeichen, Leerzeichen,

03:27.560 --> 03:30.650
Kommas und vieles mehr enthalten.

03:30.650 --> 03:32.250
Und nicht alle diese Zeichen

03:32.250 --> 03:35.580
und Symbole werden in URLs unterstützt.

03:35.580 --> 03:37.750
Wir müssen also diese eingegebene Zeichenfolge

03:37.750 --> 03:40.550
in eine URL-kompatible Zeichenfolge umwandeln.

03:40.550 --> 03:43.810
Und glücklicherweise haben TypeScript und

03:43.810 --> 03:46.940
JavaScript eine eingebaute Funktion, die

03:46.940 --> 03:50.460
uns dabei hilft, die Funktion encode URI.

03:50.460 --> 03:53.020
Wir können das aufrufen und eine Zeichenkette

03:53.020 --> 03:54.770
übergeben, die dann in eine URL-kompatible

03:54.770 --> 03:57.460
Zeichenkette umgewandelt wird.

03:57.460 --> 03:59.845
Damit haben wir die fertige URL, an die

03:59.845 --> 04:01.600
wir die Anfrage senden können,

04:01.600 --> 04:04.900
um unsere Koordinaten zurückzubekommen.

04:04.900 --> 04:07.390
Nun gibt uns get ein Versprechen, denn natürlich

04:07.390 --> 04:10.620
ist das Senden einer solchen Anfrage eine asynchrone Aufgabe.

04:10.620 --> 04:13.430
Dort wird dann protokolliert, ob dies erfolgreich

04:13.430 --> 04:15.690
war oder ob ein technischer Fehler oder

04:15.690 --> 04:18.620
ein Fehlerantwortcode aufgetreten ist.

04:18.620 --> 04:21.560
An dieser Stelle protokollieren wir auf der Konsole alle Fehler, die an dieser

04:21.560 --> 04:24.710
Stelle auftreten könnten, denn normalerweise sollten wir erfolgreich sein.

04:24.710 --> 04:27.820
Und deshalb erwarte ich hier meine Antwort im

04:27.820 --> 04:32.400
Dann-Block und möchte diese Antwort dann auch protokollieren.

04:32.400 --> 04:35.820
Ich würde also sagen: Mal sehen, was uns das bringt.

04:35.820 --> 04:39.720
Führen wir NPM start erneut aus, um den Webpack-Prozess erneut zu starten und mit der

04:39.720 --> 04:40.953
Erstellung zu beginnen.

04:42.120 --> 04:43.790
Gehen wir zurück zu unserer Anwendung

04:43.790 --> 04:47.220
und geben wir hier einen Ort wie die Sixth Avenue ein.

04:47.220 --> 04:50.090
Wenn ich auf Adresse suchen drücke, sehen Sie nach einer Weile, dass

04:50.090 --> 04:51.480
Sie hier eine Ausgabe erhalten.

04:51.480 --> 04:53.660
Dort sollten Sie einen Statuscode von 200 erhalten,

04:53.660 --> 04:56.120
was bedeutet, dass die Anfrage erfolgreich war.

04:56.120 --> 04:59.090
Und Sie haben ein Datenfeld, das die Daten enthält,

04:59.090 --> 05:01.240
mit denen der Server antwortet.

05:01.240 --> 05:03.890
Dieses Datenfeld hat ein Ergebnisfeld, und darin

05:03.890 --> 05:06.570
befindet sich, wie Sie sehen können, ein Array.

05:06.570 --> 05:10.690
In diesem Array gibt es eine Reihe von Elementen, die Anzahl variiert.

05:10.690 --> 05:13.770
Und das sind im Wesentlichen die Ergebnisse, die Google gefunden hat.

05:13.770 --> 05:16.740
Und das erste Ergebnis ist in der Regel das beste.

05:16.740 --> 05:18.790
Wenn man sich das anschaut, sieht man zum Beispiel

05:18.790 --> 05:20.460
die formatierte Adresse.

05:20.460 --> 05:22.520
Die Adresse, die Google für die von uns eingegebene

05:22.520 --> 05:23.790
Adresse gefunden hat, ist also

05:23.790 --> 05:26.570
etwas vollständiger als das, was wir eingegeben haben.

05:26.570 --> 05:29.300
Und wir haben hier den Geometrieschlüssel.

05:29.300 --> 05:31.880
Und wenn wir dies erweitern, sehen wir, dass es wiederum

05:31.880 --> 05:35.240
einen Ortsschlüssel gibt, und dieser ist schließlich ein Objekt mit

05:35.240 --> 05:37.540
den Koordinaten, die uns interessieren, einem

05:37.540 --> 05:39.700
Breitengrad und einem Längengrad.

05:39.700 --> 05:43.000
Am Ende müssen wir also in Daten und Ergebnisse eindringen

05:43.000 --> 05:47.390
und dort das erste Ergebnis, die Geometrie, den Standort und ein Objekt mit einem

05:47.390 --> 05:50.030
Breitengrad und einem Längengrad finden.

05:50.030 --> 05:52.840
Diese Längen- und Breitengrade können wir dann

05:52.840 --> 05:55.240
später auf einer Karte darstellen.

05:55.240 --> 05:57.430
Also lassen Sie uns das erst einmal extrahieren

05:57.430 --> 05:59.360
und unsere Koordinaten abrufen,

05:59.360 --> 06:04.360
indem wir auf Antwortpunktdatenpunkt-Ergebnisse zugreifen.

06:04.600 --> 06:09.600
Und dann gibt es das erste Ergebnis Punkt Geometrie Punkt Lage, so wirklich

06:11.200 --> 06:13.093
Bohren in diesem.

06:15.130 --> 06:16.880
Sie werden feststellen, dass sich

06:16.880 --> 06:19.850
TypeScript hier zwar nicht beschwert, aber wir haben

06:19.850 --> 06:23.280
auch keine gute TypeScript-Unterstützung, oder?

06:23.280 --> 06:25.740
Wenn ich hier einen Punkt eingebe, bedeutet das nicht,

06:25.740 --> 06:27.620
dass es eine Ergebniseigenschaft gibt.

06:27.620 --> 06:30.350
Und in der Tat könnte ich hier versuchen, auf alles zuzugreifen,

06:30.350 --> 06:33.840
auch auf etwas, das in der Antwort nicht vorhanden ist, und das macht

06:33.840 --> 06:34.820
Sinn.

06:34.820 --> 06:38.010
Woher soll TypeScript wissen, was in der Antwort einer

06:38.010 --> 06:40.920
URL steht, an die ich eine Anfrage sende?

06:40.920 --> 06:42.810
TypeScript geht nicht voran und

06:42.810 --> 06:44.970
sendet die Anfrage während der Entwicklung,

06:44.970 --> 06:46.510
um herauszufinden, was da

06:46.510 --> 06:49.170
drin ist, das wäre auch nicht so gut.

06:49.170 --> 06:51.400
Aber wir können TypeScript mitteilen,

06:51.400 --> 06:53.950
was wir in der Antwort erwarten, weil diese

06:53.950 --> 06:58.950
get-Methode eigentlich eine generische Methode ist und es hier irgendetwas gibt,

06:59.040 --> 07:02.830
das eigentlich der Typ der Antwort ist, die wir erwarten.

07:02.830 --> 07:06.880
Hier kann ich also meinen Antworttyp hinzufügen und TypeScript

07:06.880 --> 07:11.270
mitteilen, dass ich ein Objekt erwarte, das einen Ergebnisschlüssel

07:11.270 --> 07:15.260
hat, der wiederum ein Array voller Objekte ist, wobei

07:15.260 --> 07:18.330
jedes Objekt einen Geometrieschlüssel hat,

07:18.330 --> 07:24.330
der wiederum ein Objekt ist, das einen Ortsschlüssel hat, der wiederum ein Objekt

07:24.330 --> 07:28.160
ist, das einen Breitengrad hat, der eine Zahl ist, und

07:28.160 --> 07:33.510
einen Längengrad, der eine Zahl ist.

07:33.510 --> 07:36.030
Also definitiv ein ziemlich komplexer Typ.

07:36.030 --> 07:39.400
Aber wenn wir hier einen Punkt eingeben, bekomme ich eine Autovervollständigung

07:39.400 --> 07:42.220
und TypeScript versteht, worauf ich hier zugreife.

07:42.220 --> 07:44.860
Und natürlich können wir diesen Typ auch hier herausziehen und

07:44.860 --> 07:46.620
unseren eigenen Typ-Alias erstellen.

07:46.620 --> 07:50.497
Vielleicht hier, Google Geokodierung Antwort.

07:53.220 --> 07:55.380
Das wäre hier mein benutzerdefinierter

07:55.380 --> 07:58.420
Typ, und dann kann ich TypeScript mitteilen, dass ich

07:58.420 --> 08:01.540
hier die Google-Geokodierungsantwort erwarte.

08:01.540 --> 08:03.900
Natürlich enthält die Antwort mehr als

08:03.900 --> 08:07.020
nur das Ergebnisfeld, sie hat auch einen Statuscode

08:07.020 --> 08:09.460
und mehrere andere Felder in jedem Element

08:09.460 --> 08:13.040
des Ergebnisfeldes, dann die Geometrie.

08:13.040 --> 08:17.030
Natürlich können Sie Ihrem benutzerdefinierten Typ auch einfach alle

08:18.210 --> 08:21.330
diese Felder hinzufügen, aber hier möchte ich mich nur

08:21.330 --> 08:25.640
auf die Werte konzentrieren, an denen ich aktiv interessiert bin.

08:25.640 --> 08:27.360
Und deshalb gibt es noch ein weiteres Feld,

08:27.360 --> 08:30.900
das ich hinzufügen werde, und das ist der Status neben den Ergebnissen.

08:30.900 --> 08:34.520
Hier auf der obersten Ebene haben wir also den Status und das ist eine

08:34.520 --> 08:35.500
Zeichenkette, die

08:35.500 --> 08:38.390
uns sagt, ob Google erfolgreich war oder nicht.

08:38.390 --> 08:41.810
Und der Status wird entweder in Ordnung sein oder eine

08:41.810 --> 08:44.010
Reihe anderer Werte aufweisen.

08:44.010 --> 08:46.910
Dies ist im Grunde eine Statusmeldung, mit der Google

08:46.910 --> 08:50.020
uns mitteilt, ob es gelungen ist, die Koordinaten für diese

08:50.020 --> 08:51.890
Adresse abzurufen oder nicht.

08:51.890 --> 08:54.000
Und natürlich können wir in den offiziellen Dokumenten

08:54.000 --> 08:57.280
erfahren, welche Art von Antworten wir hier zurückbekommen könnten.

08:57.280 --> 08:58.900
Wenn Sie ein wenig nach unten blättern

08:58.900 --> 09:01.070
und auf Antwort verstehen klicken, erfahren

09:01.070 --> 09:04.240
Sie, was in der Antwort steht, die Sie zurückbekommen, und klicken

09:04.240 --> 09:07.000
deshalb auf Antworten geokodieren.

09:07.000 --> 09:08.580
Unter Statuscodes erfahren

09:08.580 --> 09:11.090
wir mehr über die verfügbaren Statuscodes.

09:11.090 --> 09:15.090
Wir haben zum Beispiel alle null Ergebnisse erhalten, wenn nichts gefunden wurde.

09:15.090 --> 09:16.850
Wir haben auch noch ein paar andere Codes, aber

09:16.850 --> 09:19.223
hier interessiere ich mich wirklich nur für diese beiden.

09:20.200 --> 09:23.310
Ich sage TypeScript also, dass ich hier einen Statuscode erhalte, der

09:23.310 --> 09:24.890
einer dieser beiden Werte ist.

09:24.890 --> 09:27.480
Auch hier könnte es einen Zahlenwert haben,

09:27.480 --> 09:29.830
aber für mich ist das hier gut.

09:29.830 --> 09:31.640
Wie gesagt, Sie können das natürlich

09:31.640 --> 09:33.700
auch ausführlicher schreiben.

09:33.700 --> 09:36.230
Jetzt, wo wir das hinzugefügt haben, können wir unten

09:36.230 --> 09:41.230
im then-Block prüfen, ob response dot data dot status nicht in Ordnung ist, was bedeutet, dass etwas

09:41.580 --> 09:44.120
schief gelaufen ist, und in diesem Fall können wir hier

09:44.120 --> 09:46.710
einen Fehler auslösen und landen daher im catch-Block,

09:46.710 --> 09:48.090
wo wir eine Fehlerbehandlung

09:48.090 --> 09:49.810
einrichten können.

09:49.810 --> 09:54.280
In diesem Fall wird ein Fehler ausgegeben, dass der Ort nicht abgerufen werden konnte.

09:54.280 --> 09:57.080
Und dann hier in der Fehlerbehandlung, um etwas zu tun,

09:57.080 --> 09:59.150
können wir eine Warnung auslösen, wo wir

09:59.150 --> 10:01.230
die Fehlermeldung zumindest ausgeben.

10:01.230 --> 10:04.660
Dies ist natürlich nur eine sehr einfache Fehlerbehandlung.

10:04.660 --> 10:06.950
Andernfalls, wenn wir eine erfolgreiche Antwort erhalten,

10:06.950 --> 10:09.910
holen wir unsere Koordinaten hier ab und können diese Koordinaten nun

10:09.910 --> 10:12.113
verwenden, um sie in einer Karte auszugeben.
