WEBVTT

00:02.400 --> 00:04.390
Instructeur : Nous avons donc rendu notre premier

00:04.390 --> 00:07.240
formulaire, mais vous remarquerez que le style est un peu décalé,

00:07.240 --> 00:09.200
je veux dire que le formulaire a l'air bien,

00:09.200 --> 00:11.910
mais une certaine distance entre les bords de notre écran et

00:11.910 --> 00:13.870
le formulaire serait bien.

00:13.870 --> 00:15.830
Si vous plongez dans l'application. css, vous verrez

00:15.830 --> 00:18.360
qu'il y a un sélecteur d'identification

00:18.360 --> 00:21.050
de l'utilisateur.

00:21.050 --> 00:23.330
Si nous ajoutons des marges, cela ne semble pas

00:23.330 --> 00:25.630
trop grave, donc ce que nous pouvons faire, c'est

00:25.630 --> 00:28.060
une application. ts lorsque nous créons

00:28.060 --> 00:31.740
notre élément ici ou lorsque nous y avons accès.

00:31.740 --> 00:34.520
Nous pouvons atteindre l'élément et ajouter un ID ici,

00:34.520 --> 00:36.840
ce qui serait une entrée pour l'utilisateur.

00:36.840 --> 00:39.740
Cela permettra de s'assurer que l'élément rendu a cet ID et donc,

00:39.740 --> 00:42.800
en cas de rechargement, que l'aspect est plus agréable.

00:42.800 --> 00:45.100
Si nous l'inspectons dans la profondeur du

00:45.100 --> 00:49.320
navigateur, nous voyons l'ID ici et c'est la raison de ce meilleur style.

00:49.320 --> 00:51.940
Avec cela, nous faisons déjà l'étape suivante,

00:51.940 --> 00:54.010
nous interagissons avec l'élément.

00:54.010 --> 00:56.980
Maintenant, ce n'est pas la seule interaction que je veux faire.

00:56.980 --> 00:58.770
Puisque nous avons un formulaire ici, je

00:58.770 --> 01:01.870
veux avoir accès aux différentes entrées du formulaire que nous avons

01:01.870 --> 01:05.910
ici afin que nous puissions lire les valeurs lorsque le formulaire est soumis, et que nous

01:05.910 --> 01:08.800
puissions également mettre en place un écouteur d'événements

01:08.800 --> 01:12.160
ici pour la soumission, et valider l'entrée de l'utilisateur.

01:12.160 --> 01:15.720
Nous devons donc avoir accès au bouton ou au formulaire dans son ensemble

01:15.720 --> 01:19.180
pour écouter la soumission et à tous les éléments d'entrée pour en récupérer

01:19.180 --> 01:21.273
les dernières valeurs.

01:22.360 --> 01:25.440
Pour cela ici, avant de tout attacher, mais après

01:25.440 --> 01:28.500
avoir assigné mon ID à l'élément ici, je veux avoir

01:28.500 --> 01:32.210
accès aux différentes entrées dans cet élément dans ce

01:32.210 --> 01:35.980
formulaire, et je veux les stocker comme propriétés de cette

01:35.980 --> 01:39.820
classe, donc je vais ajouter plus de champs ici et le premier

01:39.820 --> 01:44.570
champ pourrait être un champ titleInputElement.

01:44.570 --> 01:47.167
Le type sera HTMLInputElement write this, et nous n'en

01:48.060 --> 01:50.410
aurons pas seulement besoin une fois que nous aurons

01:50.410 --> 01:52.770
besoin de deux autres champs similaires.

01:52.770 --> 01:55.900
Nous avons un champ descriptionInputElement qui est

01:55.900 --> 01:57.550
un type HTMLInputElement,

01:58.520 --> 02:02.730
et nous avons également besoin d'un champ peopleInputElement.

02:02.730 --> 02:06.240
Maintenant, nous pouvons remplir ces champs ici dans le constructeur,

02:06.240 --> 02:09.500
avec ce titleInputElement qui est défini comme étant égal

02:09.500 --> 02:11.510
à ceci. donc à notre élément

02:11.510 --> 02:13.120
de formulaire, gardez toujours

02:13.120 --> 02:16.390
à l'esprit que c'est l'élément de formulaire ici, le

02:16.390 --> 02:21.350
sélecteur de requête et ensuite la requête pour l'élément de titre.

02:21.350 --> 02:25.000
Et si vous regardez à nouveau l'index. html, nous voyons que nous

02:25.000 --> 02:28.410
avons obtenu le titre de l'ID de cet élément, nous

02:28.410 --> 02:30.420
pouvons donc l'interroger,

02:30.420 --> 02:33.323
donc dans app. ts ici, dans le sélecteur de

02:33.323 --> 02:37.210
requête, nous pouvons utiliser #title pour sélectionner l'élément ID du

02:37.210 --> 02:39.750
titre et le stocker dans titleInputElement.

02:39.750 --> 02:44.070
Maintenant, comme vous le savez, tout comme avec le document get element by

02:44.070 --> 02:46.230
ID, Typescript n'a aucune chance de comprendre

02:46.230 --> 02:49.090
que le sélecteur de requête va retourner un élément

02:49.090 --> 02:50.650
d'entrée ici.

02:50.650 --> 02:53.780
Donc, pour dire à Typescript, je vais à nouveau utiliser le casting,

02:53.780 --> 02:56.020
et le convertir en un élément d'entrée, et ensuite

02:56.020 --> 02:58.270
nous pouvons répéter cette étape deux fois,

02:58.270 --> 03:00.672
et également signer le descriptionInputElement,

03:00.672 --> 03:03.240
et le peopleInputElement.

03:03.240 --> 03:06.600
Recherchez les identifiants appropriés dans l'index. html, qui sont étonnamment,

03:06.600 --> 03:10.390
je suppose, la description et les personnes, et les ajouter

03:10.390 --> 03:12.190
à typescript.

03:12.190 --> 03:16.120
Donc, ici nous cherchons l'élément ID de la description,

03:16.120 --> 03:17.720
et ici les personnes.

03:17.720 --> 03:19.510
Et avec cela, nous avons accès à

03:19.510 --> 03:22.687
tous ces éléments à l'intérieur de notre classe ici, ou

03:22.687 --> 03:26.593
à l'intérieur de chaque objet qui est créé sur la base de la classe.

03:27.600 --> 03:29.870
Maintenant nous devons juste ajouter

03:29.870 --> 03:33.330
un écouteur à notre élément, à notre formulaire.

03:33.330 --> 03:38.330
Pour cela, je vais ajouter une autre méthode privée configure, que vous n'avez pas besoin

03:38.440 --> 03:39.790
d'ajouter, mais encore

03:39.790 --> 03:43.130
une fois, je veux garder cette séparation où nous faisons essentiellement

03:43.130 --> 03:47.900
la sélection et la mise en place grossière dans le constructeur.

03:47.900 --> 03:49.340
Et ensuite l'insertion ou

03:49.340 --> 03:52.210
le réglage fin dans des méthodes distinctes.

03:52.210 --> 03:53.900
Et dans la méthode de configuration,

03:53.900 --> 03:57.000
mon idée est de mettre en place un écouteur d'événements, donc ici

03:57.000 --> 03:58.970
nous pouvons atteindre cet élément qui est

03:58.970 --> 04:01.830
le formulaire et ajouter un écouteur d'événements.

04:01.830 --> 04:04.570
Maintenant, puisque Typescript sait que cet élément

04:04.570 --> 04:08.580
est un élément de formulaire HTML, il nous offre l'auto-complétion lorsque

04:08.580 --> 04:10.770
nous voulons écouter l'événement submit

04:10.770 --> 04:12.250
ici, ce qui est génial.

04:12.250 --> 04:15.520
Maintenant, nous devons juste lier cette méthode à une méthode et

04:15.520 --> 04:17.840
pour cela, je vais ajouter une autre méthode privée,

04:17.840 --> 04:20.650
privée parce que je ne vais jamais y accéder de l'extérieur

04:20.650 --> 04:23.460
de la classe, seulement de l'intérieur.

04:23.460 --> 04:26.970
Que je nommerai submitHandler, le nom est totalement libre.

04:26.970 --> 04:29.740
Il doit s'agir d'une méthode qui reçoit un objet d'événement,

04:29.740 --> 04:32.750
car nous allons la lier à cet écouteur d'événements.

04:32.750 --> 04:34.880
Donc ici, nous pouvons pointer du doigt ce...

04:36.460 --> 04:38.713
le gestionnaire de soumission.

04:40.180 --> 04:42.080
Maintenant, nous l'ajustons pour nous assurer

04:42.992 --> 04:45.040
qu'avant d'attacher tous les appels, nous configurons

04:45.040 --> 04:46.730
et exécutons cette méthode privée. Encore

04:46.730 --> 04:50.500
une fois, elle est privée, donc de l'intérieur de la classe, nous pouvons bien sûr l'atteindre,

04:50.500 --> 04:53.660
de l'extérieur, vous obtiendriez une erreur de type script, donc maintenant

04:53.660 --> 04:56.000
cette méthode devrait se déclencher chaque fois que

04:56.000 --> 04:59.290
le formulaire est soumis.

04:59.290 --> 05:02.010
Dans le gestionnaire de soumission, je

05:02.010 --> 05:05.520
veux avoir accès à mes différentes valeurs d'entrée,

05:05.520 --> 05:07.710
les valider et, bien sûr, faire quelque

05:07.710 --> 05:10.310
chose avec ces entrées.

05:10.310 --> 05:12.700
Nous nous soucierons plus tard de la partie "faire quelque

05:12.700 --> 05:15.480
chose", pour l'instant nous allons simplement y accéder.

05:15.480 --> 05:18.430
Pour cela, je vais tout d'abord appeler l'événement. preventDefault pour empêcher

05:18.430 --> 05:20.620
la soumission du formulaire par défaut,

05:20.620 --> 05:23.890
qui déclencherait l'envoi d'une requête HTTP, ce que

05:23.890 --> 05:25.820
je ne veux pas ici, et ensuite, juste

05:25.820 --> 05:28.270
pour voir où cela fonctionne, imprimons

05:28.270 --> 05:32.730
la console. enregistre cette valeur title Element, pour imprimer

05:32.730 --> 05:36.250
ce qui se trouve actuellement dans l'élément d'entrée title.

05:36.250 --> 05:39.010
Si nous l'avons sauvegardé, vous voyez qu'il compile

05:39.010 --> 05:40.560
sans erreur, donc c'est bon.

05:40.560 --> 05:44.670
Et si nous allons maintenant dans la console ici et entrons "Hello ! et cliquez sur ajouter un projet, le bon côté est qu'il n'a pas été soumis,

05:44.670 --> 05:49.440
le mauvais est que nous obtenons une erreur, "Impossible de lire la propriété

05:49.440 --> 05:51.657
'valeur' de undefined. Qu'est-ce qui ne va pas ici ?

05:51.657 --> 05:54.620
Le problème ici est que, ce mot-clé dans submitHandler ne pointe

05:54.620 --> 05:56.173
pas vers la classe en fait.

05:57.730 --> 06:02.230
Pourquoi ?

06:02.230 --> 06:06.420
En raison du fonctionnement de JavaScript et de TypeScript, nous

06:06.420 --> 06:07.760
lions la méthode ici à

06:07.760 --> 06:11.770
l'écouteur d'événements et lorsque nous lions quelque chose

06:11.770 --> 06:14.680
à un événement ou à l'aide d'un écouteur d'événements,

06:14.680 --> 06:17.480
cela signifie que la méthode, qui sera exécutée,

06:17.480 --> 06:19.740
sera liée à quelque chose d'autre,

06:19.740 --> 06:24.210
dans ce cas à la cible actuelle de l'événement.

06:24.210 --> 06:27.270
Ainsi, l'extrémité de cette méthode ne pointera

06:27.270 --> 06:31.060
pas vers la classe, lorsque la méthode est déclenchée

06:31.060 --> 06:35.130
sur un événement avec un écouteur d'événement.

06:35.130 --> 06:38.150
Maintenant, la solution consiste à appeler

06:38.150 --> 06:40.360
bind ici sur submitHandler pour

06:40.360 --> 06:43.980
préconfigurer la façon dont cette fonction sera exécutée

06:43.980 --> 06:46.949
à l'avenir, et le premier argument que nous

06:46.949 --> 06:51.070
pouvons passer à bind est en fait ce à quoi le mot clé this fera

06:51.070 --> 06:52.880
référence à l'intérieur

06:52.880 --> 06:56.450
de la fonction à exécuter.

06:56.450 --> 06:59.760
Et ici, je passe ceci, ce qui signifie que ceci, à l'intérieur

06:59.760 --> 07:02.920
de submitHandler, fera référence à la même chose

07:02.920 --> 07:05.750
que ceci dans ce contexte.

07:05.750 --> 07:10.030
Et puisque nous l'appelons dans le contexte de configure ici,

07:10.030 --> 07:13.660
que nous appelons avec ce configure, cette fin de configure

07:13.660 --> 07:17.500
se référera à la classe, et grâce à bind, elle s'y référera

07:17.500 --> 07:19.880
pour tous, également à la classe fin

07:19.880 --> 07:22.870
de submitHandler.

07:22.870 --> 07:24.830
Donc, si vous sauvegardez

07:24.830 --> 07:28.890
maintenant ici, et nous rechargeons, et entrez

07:28.890 --> 07:30.743
"Hello ! "ici, vous voyez maintenant

07:32.840 --> 07:33.673
"Hello ! "sera imprimé ici lorsque nous

07:33.673 --> 07:35.600
soumettrons le formulaire.

07:35.600 --> 07:37.510
Donc maintenant, c'est résolu et

07:37.510 --> 07:38.770
nous nous occupons de ça correctement.

07:38.770 --> 07:40.210
Mais il existe peut-être une meilleure

07:40.210 --> 07:43.650
solution, ou une solution alternative dont nous avons tous entendu parler.

07:43.650 --> 07:46.330
Il y en a peut-être un qui utilise des décorateurs,

07:46.330 --> 07:49.430
alors voici l'occasion de faire une nouvelle pause et

07:49.430 --> 07:51.970
d'essayer de résoudre cette liaison avec des

07:51.970 --> 07:54.300
décorateurs, car c'est quelque chose que

07:54.300 --> 07:57.900
nous avons appris dans la section sur les décorateurs.
