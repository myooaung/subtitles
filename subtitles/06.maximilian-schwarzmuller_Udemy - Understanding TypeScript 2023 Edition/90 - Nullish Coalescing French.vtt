WEBVTT

00:02.300 --> 00:04.800
Instructeur : Maintenant, vaguement lié au chaînage optionnel,

00:04.800 --> 00:06.930
nous avons une autre fonctionnalité intéressante dans

00:06.930 --> 00:09.550
TypeScript, qui nous aide à traiter les données nulles.

00:09.550 --> 00:12.820
Et cette caractéristique s'appelle la coalescence nulle.

00:12.820 --> 00:15.900
Imaginez maintenant que vous avez des données, des entrées,

00:15.900 --> 00:17.530
dont vous ne savez pas avec certitude

00:17.530 --> 00:19.830
si elles sont nulles ou indéfinies ou s'il

00:19.830 --> 00:23.320
s'agit en fait d'une donnée valide.

00:23.320 --> 00:28.180
Par exemple, userInput pourrait être nul, disons.

00:28.180 --> 00:31.040
Maintenant, encore une fois, ici, nous codons ceci en dur

00:31.040 --> 00:33.580
dans TypeScript, donc TypeScript sait que ceci est

00:33.580 --> 00:36.500
nul, mais si vous récupérez ceci à travers une API DOM, où

00:36.500 --> 00:38.650
vous ne le savez pas avec certitude, ou si vous

00:38.650 --> 00:41.320
obtenez ceci à partir d'un back-end, alors vous pourriez

00:41.320 --> 00:42.970
ne pas savoir à l'avance et TypeScript

00:42.970 --> 00:46.510
pourrait ne pas savoir si ceci est nul ou non.

00:46.510 --> 00:50.650
Si vous souhaitez ensuite enregistrer cette valeur dans une autre constante

00:50.650 --> 00:52.803
ou variable, comme storedData, vous devez

00:54.090 --> 00:56.150
vous assurer que si elle est nulle, vous

00:56.150 --> 00:58.760
enregistrez une valeur de repli.

00:58.760 --> 01:03.560
Maintenant, vous pouvez le faire avec l'opérateur logique OR, où vous stockez

01:03.560 --> 01:05.330
un défaut, où vous obtenez cette

01:05.330 --> 01:06.740
deuxième valeur si la première

01:06.740 --> 01:08.940
est indéfinie ou nulle, si elle est fausse

01:08.940 --> 01:11.550
pour être précis.

01:11.550 --> 01:13.690
Le problème avec cette approche est

01:13.690 --> 01:17.110
que, si cette valeur n'est pas nulle ou indéfinie, mais,

01:17.110 --> 01:18.960
disons, une chaîne vide, elle

01:18.960 --> 01:21.740
est traitée comme une valeur fausse et, par conséquent,

01:21.740 --> 01:25.600
la valeur de repli par défaut s'applique.

01:25.600 --> 01:28.850
Donc si je console. log storedData ici, vous

01:28.850 --> 01:31.700
verrez que cela imprime DEFAULT.

01:31.700 --> 01:33.430
Peut-être que c'est ce que vous voulez,

01:33.430 --> 01:36.540
et dans ce cas, c'est une solution parfaitement adaptée.

01:36.540 --> 01:38.800
Mais si vous voulez conserver les données saisies par l'utilisateur,

01:38.800 --> 01:40.730
ou toute autre donnée avec laquelle vous travaillez,

01:40.730 --> 01:44.110
à moins qu'elles ne soient vraiment nulles ou indéfinies, alors vous avez besoin d'une

01:44.110 --> 01:45.530
autre approche, car ici nous les traiterions

01:45.530 --> 01:48.970
comme fausses et utiliserions la solution de repli.

01:48.970 --> 01:51.720
Mais peut-être que vous voulez garder une entrée vide, juste

01:51.720 --> 01:54.370
null ou undefined devrait être traité différemment.

01:54.370 --> 01:56.390
Pour cela, TypeScript dispose également

01:56.390 --> 01:58.780
d'un opérateur, le double point d'interrogation,

01:58.780 --> 02:02.210
appelé l'opérateur de coalescence nullish.

02:02.210 --> 02:05.250
Et cela signifie que si c'est null ou undefined,

02:05.250 --> 02:06.730
et vraiment juste cela,

02:06.730 --> 02:09.180
pas une chaîne vide, pas zéro, vraiment

02:09.180 --> 02:11.540
juste null ou undefined, alors nous utiliserons

02:11.540 --> 02:13.370
le fallback.

02:13.370 --> 02:16.700
Si elle n'est pas nulle ou indéfinie, nous utiliserons cette valeur.

02:16.700 --> 02:19.220
Donc dans ce scénario ici, cela compile, et vous

02:19.220 --> 02:21.400
voyez, nous avons stocké la chaîne vide,

02:21.400 --> 02:23.060
donc, je n'imprime rien ici, c'est

02:23.060 --> 02:24.720
la chaîne vide.

02:24.720 --> 02:26.060
Si par contre, disons que c'est

02:26.060 --> 02:28.550
indéfini ici, et que je l'enregistre, vous voyez,

02:28.550 --> 02:30.400
maintenant ça dit DEFAULT, parce que

02:30.400 --> 02:32.980
grâce à ce double point d'interrogation, nous nous

02:32.980 --> 02:35.500
rabattons sur cette solution de repli et donc nous

02:35.500 --> 02:38.320
avons ici une autre fonctionnalité très utile qui peut

02:38.320 --> 02:40.580
vous aider à gérer les valeurs nulles ou indéfinies

02:40.580 --> 02:42.773
avec grâce.
