WEBVTT

00:02.260 --> 00:05.180
講師：さて､ ここでこのインターフェースに話を戻すと､

00:05.180 --> 00:08.230
なぜこれが必要なのかという疑問が湧いてきます｡

00:08.230 --> 00:10.160
あちこちにカスタムタイプを追加するのであれば､

00:10.160 --> 00:13.420
全く同じものができるのでは？

00:13.420 --> 00:19.940
違いは､ 等号を加えるだけで､ Person型は次のようなオブジェクトであると言っているのです｡

00:19.940 --> 00:21.490
そして実際､ それを保存すると､

00:21.490 --> 00:23.220
エラーなくコンパイルされる｡

00:23.220 --> 00:28.490
そこで､ 今までのインターフェイスをこのような型に置き換えることで､ 以前と同じように動作させることができます｡

00:28.490 --> 00:31.290
では､ なぜインターフェイスがあるのでしょうか？

00:31.290 --> 00:35.310
インターフェイスとカスタムタイプは全く同じものではありませんが､

00:35.310 --> 00:43.520
互換性があり､ カスタムタイプの代わりにインターフェイスを使うこともできますし､ その逆も可能です｡

00:43.520 --> 00:45.720
また､ いくつかの違いもあります｡ 

00:45.720 --> 00:49.070
しかし､ カスタムタイプの代わりに､

00:49.070 --> 00:51.470
コース初期に行ったように､

00:51.470 --> 01:00.350
ユニオンタイプなどの他のものを保存することもできます｡

01:00.350 --> 01:03.740
そのため､ タイプの方が柔軟性があるように聞こえますが､

01:03.740 --> 01:08.510
裏を返せば､ インターフェイスが明確であるということです｡

01:08.510 --> 01:10.870
インターフェイスとして何かを定義する場合､

01:10.870 --> 01:15.580
それでオブジェクトの構造を定義したいことは超明確です｡

01:15.580 --> 01:18.360
また､ オブジェクトの種類を定義する場合にも､

01:18.360 --> 01:21.630
インターフェイスを利用することが多いようです｡

01:21.630 --> 01:23.800
次に､ カスタムタイプが表示されます｡ 

01:23.800 --> 01:26.410
さて､ インターフェースでもう一つできること､

01:26.410 --> 01:27.530
それはカスタムタイプでしかできないことですが､

01:27.530 --> 01:33.360
インターフェースはクラスで実装することができるのです｡

01:33.360 --> 01:34.820
それはどういうことなのか｡ 

01:34.820 --> 01:40.550
インターフェイスをよく使う理由は､ インターフェイスはクラスが実装できる契約として使うことができ､

01:40.550 --> 01:46.400
クラスはそれに従わなければならないからです｡

01:46.400 --> 01:48.150
それはどういうことなのか｡ 

01:48.150 --> 01:53.970
ここでは､ 名前と年齢を持つPersonインターフェイスではなく､

01:53.970 --> 01:57.690
Greetableと名付けたとしよう｡

01:57.690 --> 01:59.270
さて､ これは奇妙な名前に見えるかもしれないが､

01:59.270 --> 02:09.251
結局のところ､ Greetableとして扱われるべきオブジェクトは､ 名前とgreetメソッドを持つオブジェクトでなければならないというだけのことである｡

02:09.251 --> 02:14.630
ここで､ このuser1変数にはGreetableオブジェクトが格納されているはずですが､

02:14.630 --> 02:16.730
もちろん､ nameとgreet以上のものが格納されているので､

02:16.730 --> 02:19.930
エラーが発生します｡

02:19.930 --> 02:22.000
しかし､ このインターフェイスを利用して､

02:22.000 --> 02:27.410
複数のクラスで共有することもできます｡ このインターフェイスに準拠するすべてのクラスは､

02:27.410 --> 02:33.410
nameプロパティとgreetメソッドを持たなければなりません｡

02:33.410 --> 02:36.970
ここで､ Personクラスを追加することができました｡ インターフェイスの名前を変更したため､

02:36.970 --> 02:38.540
名前が再び利用可能になりました｡

02:38.540 --> 02:40.790
そして今､ typescriptとこのクラスには､

02:40.790 --> 02:45.480
基本的にこのインターフェイスを遵守するように伝えてください｡

02:45.480 --> 02:48.350
このインタフェースを実装する必要がある｡ 

02:48.350 --> 02:53.000
このインタフェースで設定された契約に従うべきである｡ 

02:53.000 --> 02:56.930
そのためには､ クラス名の後にimprinesキーワードを追加します｡

02:56.930 --> 02:59.280
そして､ インターフェイスの名前､ Greetableです｡ 

03:00.420 --> 03:02.780
また､ 複数のインターフェイスを実装することができます｡ 

03:02.780 --> 03:04.710
それは､ 相続と比べた場合の違いです｡ 

03:04.710 --> 03:09.370
継承できるのは1つのクラスだけで､ カンマで区切るだけで複数のインターフェースを実装できるので､

03:09.370 --> 03:16.000
そこで､ 別のインターフェースがあれば､ それを利用することができます｡

03:16.000 --> 03:17.710
ここでは､ 1つだけですが｡ 

03:17.710 --> 03:21.740
そして今､ このクラスは間違ってインターフェイスを実装しているため､

03:21.740 --> 03:25.200
エラーが発生しました｡

03:25.200 --> 03:29.690
nameプロパティもgreetメソッドも持っていない｡

03:29.690 --> 03:33.960
コンストラクタで名前の値を取得し､

03:33.960 --> 03:35.610
このように設定します｡

03:35.610 --> 03:48.080
また､ greet メソッドを追加して､ このロジックを外部で使用できるようにします｡

03:48.080 --> 03:50.780
今､ 私たちのクラスでは､ それ以上のものを用意することができます｡ 

03:50.780 --> 03:52.340
さらに多くのフィールドやメソッドを持つことができ､

03:52.340 --> 03:59.170
このクラスを拡張することもできますし､ いつも通りこのクラスで作業することもできます｡

03:59.170 --> 04:02.640
しかし､ このインターフェイスを実装している以上､ このnameプロパティを持たせるためには､

04:02.640 --> 04:07.040
このメソッドを正しく実装することを余儀なくされています｡

04:07.040 --> 04:09.740
そのため､ インターフェースは､ 具体的な実装にこだわらず､

04:09.740 --> 04:16.550
異なるクラス間で機能を共有するために使われることが多い｡

04:16.550 --> 04:19.240
インターフェイスの内部には､ 実装や値を持つことはできませんが､

04:19.240 --> 04:24.980
構造に関しては､ クラスが持つべき機能に関しては､ 持つことができます｡

04:24.980 --> 04:29.640
インターフェイスは実装の詳細が全くないのに対して､

04:29.640 --> 04:33.520
抽象クラスはこの部分を上書きしなければならないし､

04:33.520 --> 04:42.470
私は具体的な実装部分を持っているというのが混在しているのが違いです｡

04:42.470 --> 04:46.860
これが､ インターフェースと抽象クラスの重要な違いです｡

04:46.860 --> 04:47.850
さて､ そうは言っても､

04:47.850 --> 04:49.790
ここには人物クラスがあります｡

04:49.790 --> 04:53.910
そして､ ここで､ user1 は､ new Person を使って､

04:53.910 --> 04:58.090
例えば､ 名前を入力することによって作成することができます｡

04:58.090 --> 05:02.300
PersonはGreetableを実装しており､

05:02.300 --> 05:07.540
クラス内にGreetable以上のものを追加することができますが､

05:07.540 --> 05:15.120
インターフェイスによって設定された条件を満たす必要があります｡

05:15.120 --> 05:17.130
そして今､ すべてを保存すると､ 有効なコードができ､

05:17.130 --> 05:23.040
user1 を console でログに記録します｡

05:23.040 --> 05:23.040
のログを見ると､

05:23.040 --> 05:25.430
この場合は年齢と名前を持った普通のオブジェクトですが､

05:25.430 --> 05:32.770
重要なポイントは､ このインターフェースを実装したクラスをベースにしていることです｡

05:32.770 --> 05:35.550
そして､ 皆さんはそのインターフェイスを型として利用することができます｡ 

05:35.550 --> 05:37.780
もちろん､ これをPerson型にすることもできますが､

05:37.780 --> 05:42.200
最終的にuser1クラスに格納されるPersonオブジェクトはGreetableインターフェースに基づいているので､

05:42.200 --> 05:46.300
ここではGreetable型を使っていることがわかります｡

05:46.300 --> 05:47.750
これを実装しています｡ 

05:47.750 --> 05:49.820
これも強力な機能なんですね｡ 

05:49.820 --> 05:53.690
インターフェイスは定数や変数の型として使うことができ､

05:53.690 --> 06:03.950
その型はインターフェイスを実装しているため､ インターフェイスの型に基づいた別の型のクラスを実際に格納することができます｡

06:03.950 --> 06:06.530
つまり､ それがインターフェイスというわけです｡ 

06:06.530 --> 06:08.643
強力な機能を多数搭載｡ 
