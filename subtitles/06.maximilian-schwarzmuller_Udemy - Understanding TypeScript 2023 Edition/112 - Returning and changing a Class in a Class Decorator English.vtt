WEBVTT

1
00:00:02.090 --> 00:00:02.923
<v Narrator>In order to do</v>

2
00:00:02.923 --> 00:00:04.750
more advanced things with decorators

3
00:00:04.750 --> 00:00:07.340
you will have to note that some decorators

4
00:00:07.340 --> 00:00:09.200
for example, class decorators

5
00:00:09.200 --> 00:00:11.700
but also method decorators, for example,

6
00:00:11.700 --> 00:00:14.650
actually are also capable of returning something.

7
00:00:14.650 --> 00:00:16.570
Now, I'm not returning anything

8
00:00:16.570 --> 00:00:17.510
at any decorator.

9
00:00:17.510 --> 00:00:18.430
I'm not talking about

10
00:00:18.430 --> 00:00:20.010
the decorator function,

11
00:00:20.010 --> 00:00:22.460
which gets returned in the decorator factory.

12
00:00:22.460 --> 00:00:23.701
I really mean a return value

13
00:00:23.701 --> 00:00:26.040
inside of the decorator function,

14
00:00:26.040 --> 00:00:28.890
and we don't have any such value anywhere.

15
00:00:28.890 --> 00:00:31.559
Now in the WithTemplate function,

16
00:00:31.559 --> 00:00:34.670
in this WithTemplate decorator function, I should say,

17
00:00:34.670 --> 00:00:36.930
we could add such a return value.

18
00:00:36.930 --> 00:00:38.520
And what you can return

19
00:00:38.520 --> 00:00:40.430
and what TypeScript is able to use,

20
00:00:40.430 --> 00:00:43.660
depends on which kind of decorator you're working with.

21
00:00:43.660 --> 00:00:44.990
Here, we're working with

22
00:00:44.990 --> 00:00:47.270
a decorator that gets added to a class,

23
00:00:47.270 --> 00:00:48.750
and in such a decorator function,

24
00:00:48.750 --> 00:00:51.677
you can return a new constructor function,

25
00:00:51.677 --> 00:00:53.800
which will replace the old one.

26
00:00:53.800 --> 00:00:55.590
So which will replace the class

27
00:00:55.590 --> 00:00:58.330
to which you added to decorator you could say.

28
00:00:58.330 --> 00:01:01.073
So here we can return a new function,

29
00:01:01.073 --> 00:01:02.490
a new constructor function,

30
00:01:02.490 --> 00:01:06.370
or simply return a new class, in the end,

31
00:01:06.370 --> 00:01:08.280
because a class, the class keyword,

32
00:01:08.280 --> 00:01:11.150
allows us to use this syntactic sugar

33
00:01:11.150 --> 00:01:13.360
to create such a constructor function,

34
00:01:13.360 --> 00:01:15.951
and the class I create here doesn't need to have a name,

35
00:01:15.951 --> 00:01:17.463
but we can and we should

36
00:01:17.463 --> 00:01:22.250
extend the constructor we're getting here.

37
00:01:22.250 --> 00:01:23.730
So what I'm doing here now

38
00:01:23.730 --> 00:01:25.848
is in my decorator function here,

39
00:01:25.848 --> 00:01:28.060
I'm returning a new class,

40
00:01:28.060 --> 00:01:29.270
and again keep in mind

41
00:01:29.270 --> 00:01:30.910
that's just syntactic sugar

42
00:01:30.910 --> 00:01:32.770
for a constructor function,

43
00:01:32.770 --> 00:01:35.400
so I'm returning a constructor function, in the end,

44
00:01:35.400 --> 00:01:38.830
which is based on the original constructor function,

45
00:01:38.830 --> 00:01:42.610
so that I keep all the properties of my original class,

46
00:01:42.610 --> 00:01:44.810
of my original constructor function,

47
00:01:44.810 --> 00:01:47.010
we don't necessarily have to do that,

48
00:01:47.010 --> 00:01:49.220
but I don't want to lose my properties here,

49
00:01:49.220 --> 00:01:50.520
so I will do it.

50
00:01:50.520 --> 00:01:53.670
And then in here we can add new functionality.

51
00:01:53.670 --> 00:01:56.716
For example, and I will have to change some names here,

52
00:01:56.716 --> 00:02:00.340
I can add a new constructor function in there,

53
00:02:00.340 --> 00:02:01.500
and to avoid confusion,

54
00:02:01.500 --> 00:02:04.040
I'll rename the constructor I'm getting here.

55
00:02:04.040 --> 00:02:06.640
So the class in which I added this decorator,

56
00:02:06.640 --> 00:02:09.620
I'll name this here, originalConstructor

57
00:02:12.889 --> 00:02:15.690
and copy that all over here.

58
00:02:15.690 --> 00:02:18.950
And now, instead of this constructor function here,

59
00:02:18.950 --> 00:02:20.853
I have to call super

60
00:02:20.853 --> 00:02:24.530
to call this original constructor function

61
00:02:24.530 --> 00:02:25.430
from inside of it,

62
00:02:25.430 --> 00:02:27.410
because if you add a constructor function

63
00:02:27.410 --> 00:02:29.920
in a class that extends another class,

64
00:02:29.920 --> 00:02:32.020
which is, in the end, what we're doing here,

65
00:02:32.020 --> 00:02:33.630
then you have to call super.

66
00:02:33.630 --> 00:02:36.108
And now in here you can write any logic you want.

67
00:02:36.108 --> 00:02:40.040
And, for example, here, we could move this

68
00:02:40.040 --> 00:02:42.782
template rendering logic here,

69
00:02:42.782 --> 00:02:45.620
out of our decorator function

70
00:02:45.620 --> 00:02:47.730
into this new constructor function

71
00:02:47.730 --> 00:02:49.020
we're returning here.

72
00:02:49.020 --> 00:02:50.960
So again, really keep in mind

73
00:02:50.960 --> 00:02:52.550
that we're creating a class here

74
00:02:52.550 --> 00:02:53.383
which in the end just

75
00:02:53.383 --> 00:02:54.540
creates a constructor function

76
00:02:54.540 --> 00:02:55.833
with this logic in it.

77
00:02:56.670 --> 00:02:58.850
So now what I'm trying to do is,

78
00:02:58.850 --> 00:03:01.367
I try to replace the class.

79
00:03:01.367 --> 00:03:04.298
The constructor function to which we added our decorator

80
00:03:04.298 --> 00:03:07.550
with a new class, with a new constructor function,

81
00:03:07.550 --> 00:03:10.290
where I still execute the old logic,

82
00:03:10.290 --> 00:03:12.920
but where I also add my own new logic,

83
00:03:12.920 --> 00:03:14.670
and therefore, now the template

84
00:03:14.670 --> 00:03:17.450
should actually only be rendered to the DOM

85
00:03:17.450 --> 00:03:21.340
if I really instantiate my object here.

86
00:03:21.340 --> 00:03:22.890
And not all the time,

87
00:03:22.890 --> 00:03:25.180
when this decorator function is executed,

88
00:03:25.180 --> 00:03:26.340
which as you learned,

89
00:03:26.340 --> 00:03:29.620
happens as soon as we define the class.

90
00:03:29.620 --> 00:03:31.010
Now a little tweak here,

91
00:03:31.010 --> 00:03:34.290
I don't call my original constructor in here anymore,

92
00:03:34.290 --> 00:03:37.380
instead we can just access this.name

93
00:03:37.380 --> 00:03:40.180
to get the name property value

94
00:03:40.180 --> 00:03:42.750
of the instance we are creating.

95
00:03:42.750 --> 00:03:45.120
Now we get a little complaint down there

96
00:03:45.120 --> 00:03:47.750
regarding the types not being correct.

97
00:03:47.750 --> 00:03:51.330
To fix that though, we can turn our decorator function

98
00:03:51.330 --> 00:03:53.990
into a generic function where we get a type,

99
00:03:53.990 --> 00:03:57.113
and set this as the type of original constructor,

100
00:03:58.090 --> 00:03:59.820
and now make clear

101
00:03:59.820 --> 00:04:01.668
that this will actually be

102
00:04:01.668 --> 00:04:04.410
basically a constructor function,

103
00:04:04.410 --> 00:04:05.780
and we can make that clear

104
00:04:05.780 --> 00:04:09.260
by assigning a special type, an object type,

105
00:04:09.260 --> 00:04:11.610
where we set a new property,

106
00:04:11.610 --> 00:04:13.290
this is a reserve name of course,

107
00:04:13.290 --> 00:04:14.750
but it tells TypeScript

108
00:04:14.750 --> 00:04:15.953
that in the end this will be an object

109
00:04:15.953 --> 00:04:17.760
that can be newed.

110
00:04:17.760 --> 00:04:19.690
So that will be a constructor function,

111
00:04:19.690 --> 00:04:22.170
a function we can call with the new keyword

112
00:04:22.170 --> 00:04:24.380
to generate a new object.

113
00:04:24.380 --> 00:04:27.410
And this new function, this new method,

114
00:04:27.410 --> 00:04:30.660
which the object T is based on will have,

115
00:04:30.660 --> 00:04:33.520
will get any amount of arguments,

116
00:04:33.520 --> 00:04:35.380
so I'm using rest parameters here

117
00:04:35.380 --> 00:04:37.290
to accept as many arguments as you want,

118
00:04:37.290 --> 00:04:39.840
so that they're really flexible regarding the arguments

119
00:04:39.840 --> 00:04:42.200
that can be passed to the constructor

120
00:04:42.200 --> 00:04:44.000
of the class we're trying to change.

121
00:04:45.420 --> 00:04:46.430
Add the new function

122
00:04:46.430 --> 00:04:49.063
will then in the end return an object here.

123
00:04:50.140 --> 00:04:53.500
Now I should also just copy that defination

124
00:04:53.500 --> 00:04:55.680
of the rest parameter to my constructor here,

125
00:04:55.680 --> 00:04:57.640
so that this constructor is also capable

126
00:04:57.640 --> 00:05:00.260
of accepting all the arguments we might be getting,

127
00:05:00.260 --> 00:05:02.380
so that we can, basically instantiate Person

128
00:05:02.380 --> 00:05:04.380
with any arguments you want to pass in here.

129
00:05:04.380 --> 00:05:06.610
With any arguments we might also need here,

130
00:05:06.610 --> 00:05:09.279
in the original constructor function.

131
00:05:09.279 --> 00:05:11.600
And with that the only problem we'll face

132
00:05:11.600 --> 00:05:14.021
is that we don't know that such a name property exists,

133
00:05:14.021 --> 00:05:16.250
and correctly so, we don't know

134
00:05:16.250 --> 00:05:19.639
to which class we'll add this WithTemplate decorator,

135
00:05:19.639 --> 00:05:22.530
so we don't know if there will be a name property

136
00:05:22.530 --> 00:05:23.951
on the class we add it to.

137
00:05:23.951 --> 00:05:25.560
But, we can fix this

138
00:05:25.560 --> 00:05:27.140
by simply telling TypeScript

139
00:05:27.140 --> 00:05:30.200
that the object T is based on,

140
00:05:30.200 --> 00:05:32.773
so our original constructor function,

141
00:05:32.773 --> 00:05:35.530
will not just produce any object,

142
00:05:35.530 --> 00:05:37.460
but actually will produce an object

143
00:05:37.460 --> 00:05:39.670
with a name property which will be of type string

144
00:05:39.670 --> 00:05:41.140
and that is correct.

145
00:05:41.140 --> 00:05:44.922
Our WithTemplate decorator is added to a class,

146
00:05:44.922 --> 00:05:46.250
which will have a name property.

147
00:05:46.250 --> 00:05:47.300
If I would comment this out,

148
00:05:47.300 --> 00:05:48.133
we would get an error,

149
00:05:48.133 --> 00:05:50.740
because now we would try to add this decorator

150
00:05:50.740 --> 00:05:53.460
to a class which does not fulfill this criterium

151
00:05:53.460 --> 00:05:55.543
but here, this does fulfill it.

152
00:05:55.543 --> 00:05:58.790
Now, I get an error here when I try to compile this,

153
00:05:58.790 --> 00:06:00.630
because I'm not using args here,

154
00:06:00.630 --> 00:06:02.660
we can change this to an _

155
00:06:02.660 --> 00:06:04.930
to tell typescript that we know we don't use it

156
00:06:04.930 --> 00:06:06.230
and that we wanna ignore this.

157
00:06:06.230 --> 00:06:08.050
This is a valid parameter name,

158
00:06:08.050 --> 00:06:10.678
it's just a special name which typescript takes as a

159
00:06:10.678 --> 00:06:13.220
I get it, I need to accept it,

160
00:06:13.220 --> 00:06:15.260
but I won't use it parameter.

161
00:06:15.260 --> 00:06:18.273
And with that, it all compiles and if we reload,

162
00:06:19.440 --> 00:06:22.420
you see, we still see Max on the page here.

163
00:06:22.420 --> 00:06:23.910
The interesting thing just is,

164
00:06:23.910 --> 00:06:25.480
if we now remove that code

165
00:06:25.480 --> 00:06:27.060
where we instantiate Person

166
00:06:27.060 --> 00:06:28.440
if I comment this out

167
00:06:28.440 --> 00:06:30.740
so that I just find a Person class,

168
00:06:30.740 --> 00:06:33.550
but I never instantiate it anywhere,

169
00:06:33.550 --> 00:06:36.890
you see as it reloads we don't see Max on the screen.

170
00:06:36.890 --> 00:06:39.467
All the decorators still execute,

171
00:06:39.467 --> 00:06:42.410
but we don't render anything to the screen anymore.

172
00:06:42.410 --> 00:06:43.243
And the reason for that,

173
00:06:43.243 --> 00:06:46.340
is that we now enhanced our decorator here even more,

174
00:06:46.340 --> 00:06:49.520
by taking advantage of it's feature

175
00:06:49.520 --> 00:06:52.360
where we can return a new value

176
00:06:52.360 --> 00:06:55.350
or in this case a new constructor function.

177
00:06:55.350 --> 00:06:57.205
In the case of the class decorator.

178
00:06:57.205 --> 00:07:00.780
This is a new constructor function, or a new class,

179
00:07:00.780 --> 00:07:03.040
which, as I explained, is just syntactic sugar

180
00:07:03.040 --> 00:07:04.300
for the constructor function,

181
00:07:04.300 --> 00:07:06.750
and this constructor function, therefore,

182
00:07:06.750 --> 00:07:09.070
replaces our original class,

183
00:07:09.070 --> 00:07:12.160
our original constructor function.

184
00:07:12.160 --> 00:07:15.220
Now, since I called super in here,

185
00:07:15.220 --> 00:07:17.610
we save the original function.

186
00:07:17.610 --> 00:07:19.690
We save the original class,

187
00:07:19.690 --> 00:07:22.540
everything we initialize here basically still happens,

188
00:07:22.540 --> 00:07:25.530
because I do that in my replacing constructor as well,

189
00:07:25.530 --> 00:07:27.480
and I extend the original class.

190
00:07:27.480 --> 00:07:30.420
So we save everything that was in the original class.

191
00:07:30.420 --> 00:07:31.550
You don't have to do that,

192
00:07:31.550 --> 00:07:32.670
but I am doing it here,

193
00:07:32.670 --> 00:07:35.560
because I don't want to lose that original data.

194
00:07:35.560 --> 00:07:36.850
But, behind the scenes,

195
00:07:36.850 --> 00:07:39.770
I replace the class with my new custom class here,

196
00:07:39.770 --> 00:07:42.370
and that allows us to add extra logic,

197
00:07:42.370 --> 00:07:45.600
that should run when the class is instantiated.

198
00:07:45.600 --> 00:07:49.090
And now all of a sudden we are able to add logic

199
00:07:49.090 --> 00:07:52.410
that does not run when the class is defined,

200
00:07:52.410 --> 00:07:54.660
but when the class is instantiated.

201
00:07:54.660 --> 00:07:57.150
And this therefore should be a great first example

202
00:07:57.150 --> 00:08:01.860
of the full power you can unleash with decorators

203
00:08:01.860 --> 00:08:04.480
if you really understand what you can do with them.

204
00:08:04.480 --> 00:08:06.800
And you can not just define them as functions,

205
00:08:06.800 --> 00:08:09.970
and you can not just define them with factor functions.

206
00:08:09.970 --> 00:08:12.600
In some decorators, like the class decorator,

207
00:08:12.600 --> 00:08:14.400
you can also return something

208
00:08:14.400 --> 00:08:17.650
to replace the thing you added the decorator to

209
00:08:17.650 --> 00:08:19.470
in our case the class,

210
00:08:19.470 --> 00:08:23.000
with a new class that can implement the old class

211
00:08:23.000 --> 00:08:25.711
but also add its new custom logic.

212
00:08:25.711 --> 00:08:28.004
And with that, if we comment this back in,

213
00:08:28.004 --> 00:08:30.240
we again render Max to the screen

214
00:08:30.240 --> 00:08:31.570
with our own class

215
00:08:31.570 --> 00:08:35.793
that replaces, or that extends and replaces the old class.

