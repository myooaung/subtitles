WEBVTT

00:02.450 --> 00:04.810
ผู้สอน: ตอนนี้เราเข้าใจวิธีจัดการไฟล์ของเราด้วยคอมไพเลอร์แล้ว

00:04.810 --> 00:11.300
เรามาดำดิ่งสู่ตัวเลือกคอมไพเลอร์กันดีกว่า เพราะมันน่าสนใจจริงๆ

00:11.300 --> 00:13.860
สิ่งนี้ช่วยให้เราสามารถควบคุมวิธีการคอมไพล์โค้ด

00:13.860 --> 00:20.920
TypeScript ของเรา ดังนั้นไม่เพียงแต่ไฟล์ใด แต่ยังรวมถึงวิธีการจัดการไฟล์ที่คอมไพล์ด้วย

00:20.920 --> 00:23.230
TypeScript

00:23.230 --> 00:26.760
และคุณจะเห็นว่าเรามีตัวเลือกมากมาย

00:26.760 --> 00:29.560
คุณได้รับคำอธิบายสั้นๆ ข้างตัวเลือกเหล่านี้

00:29.560 --> 00:32.450
คำอธิบายบางอย่างอาจเป็นเรื่องคลุมเครือขนาดใหญ่

00:32.450 --> 00:34.210
อื่นๆค่อนข้างชัดเจน

00:34.210 --> 00:36.450
และฉันจะบอกว่ามีตัวเลือกเหล่านี้มากมาย

00:36.450 --> 00:39.950
ตัวเลือกเหล่านี้ส่วนใหญ่จะไม่สำคัญในโครงการส่วนใหญ่

00:39.950 --> 00:43.900
ดังนั้น คุณจะไม่ตั้งค่าตัวเลือกเหล่านี้ทั้งหมด ไม่แม้กระทั่งปิด

00:43.900 --> 00:46.070
โดยทั่วไป คุณสามารถเพิกเฉยต่อตัวเลือกเหล่านี้ได้มากมาย

00:46.070 --> 00:48.765
ตอนนี้ฉันจะเลือกตัวเลือกที่สำคัญที่นี่ตลอดหลักสูตรนี้

00:48.765 --> 00:53.911
เพราะตัวเลือกบางอย่างจะสมเหตุสมผลเมื่อเราเรียนรู้เกี่ยวกับคุณลักษณะบางอย่างเท่านั้น

00:53.911 --> 00:57.250
และฉันต้องการดำดิ่งลงไปในตัวเลือกบางอย่างในตอนนี้

00:57.250 --> 01:02.340
มาดูไฟล์จากบนลงล่างและดูว่าเราได้อะไรมาบ้าง

01:02.340 --> 01:04.410
เริ่มต้นด้วยตัวเลือกเป้าหมาย

01:04.410 --> 01:07.230
อย่างที่คุณเห็น สิ่งนี้ถูกตั้งค่าเป็นค่าเริ่มต้น

01:07.230 --> 01:08.750
มันไม่ได้แสดงความคิดเห็นออก

01:08.750 --> 01:10.780
และสิ่งที่คุณทำกับตัวเลือกนี้คือคุณบอก

01:10.780 --> 01:16.970
TypeScript ว่าคุณต้องการคอมไพล์โค้ดของ JavaScript เวอร์ชันเป้าหมายใด

01:16.970 --> 01:18.850
เนื่องจากสิ่งที่ TypeScript

01:18.850 --> 01:21.600
ทำนั้นไม่เพียงแค่รวบรวมคุณสมบัติใหม่ เช่น

01:21.600 --> 01:23.500
คำอธิบายประกอบประเภทที่ไม่มีอยู่ใน

01:23.500 --> 01:26.960
JavaScript ให้เป็นโค้ด JavaScript

01:26.960 --> 01:33.270
ดังนั้นจึงไม่เพียงแค่ดูแลว่านี่ใช้งานได้

01:33.270 --> 01:37.530
นอกจากนี้ยังคอมไพล์โค้ดเป็น JavaScript

01:37.530 --> 01:41.370
ที่ทำงานในเบราว์เซอร์บางชุด

01:41.370 --> 01:46.980
และคุณกำหนดว่าเบราว์เซอร์ใดบ้างที่รองรับโค้ดคอมไพล์โดยกำหนดเป้าหมาย

01:46.980 --> 01:49.520
เป้าหมายเริ่มต้นในโปรเจ็กต์นี้อย่างที่คุณเห็น

01:49.520 --> 01:55.517
เป้าหมายเริ่มต้นที่กำลังตั้งค่าคือ es5 ซึ่งหมายความว่าโค้ดทุกประเภทจะถูกคอมไพล์

01:55.517 --> 01:57.550
เราสามารถเห็นสิ่งนั้นได้จริง

01:57.550 --> 02:00.770
ถ้าฉันเรียกใช้ TSC ที่นี่เพื่อรวบรวมไฟล์ทั้งหมด

02:00.770 --> 02:03.260
เราเห็นในแอป ฉันกำลังใช้ let และ

02:03.260 --> 02:05.732
const แต่ในแอป js เราใช้ var

02:05.732 --> 02:09.890
และนั่นเกิดขึ้นเพราะเรามีเป้าหมายเป็น es5 และในโลกของ

02:09.890 --> 02:13.816
es5 เราไม่มีการปล่อยให้และเสีย

02:13.816 --> 02:20.650
ดังนั้นสิ่งที่ดีคือเราสามารถใช้ TypeScript เพื่อสร้างโค้ดที่ใช้งานได้ในเบราว์เซอร์รุ่นเก่าเช่นกัน

02:20.650 --> 02:22.930
แต่มันขึ้นอยู่กับการใช้งานทั้งหมดหากเราต้องการทำเช่นนั้น

02:22.930 --> 02:25.550
บางทีเราไม่ต้องการทำเช่นนั้นกับ TypeScript

02:25.550 --> 02:27.670
เพราะบางทีเราอาจมีเครื่องมือสร้างอื่นที่จะดูแลเกี่ยวกับการทรานสไพล์

02:27.670 --> 02:30.560
JavaScript ดังนั้นเราจึงไม่ต้องการให้ TypeScript

02:30.560 --> 02:41.170
ทำเช่นนั้น หรือบางทีเราต้องการส่งโค้ดที่มีแต่ ทำงานในเบราว์เซอร์สมัยใหม่เพราะเรารู้ว่าแอปของเราจะทำงานในเบราว์เซอร์สมัยใหม่เท่านั้น

02:41.170 --> 02:44.160
ดังนั้น ตัวเลือกอื่นๆ สามารถดูได้ที่นี่ หากคุณลบค่า

02:44.160 --> 02:46.070
จากนั้นที่นี่ใน vscode อย่างน้อยที่สุด

02:46.070 --> 02:51.300
หากคุณกด Control + Space เพื่อรับการเติมข้อความอัตโนมัติ คุณจะเห็นคำแนะนำมากมาย

02:51.300 --> 02:56.450
และคุณจะเห็นค่าที่มีทั้งหมดที่นี่

02:56.450 --> 02:58.700
เมื่อเวลาผ่านไป แน่นอนว่าสิ่งนี้จะเปลี่ยนไปเพราะเราได้เปิดตัว

02:58.700 --> 03:01.900
JavaScript เวอร์ชันใหม่แล้ว

03:01.900 --> 03:03.785
คุณเห็นว่าเราตั้งค่านี้เป็น es5 มาก่อน

03:03.785 --> 03:06.150
หากคุณไม่ระบุเป้าหมายเลย ตอนนี้

03:06.150 --> 03:12.200
TypeScript จะคอมไพล์เป็น es3 ด้วยซ้ำ ดังนั้นจึงรองรับเวอร์ชันที่เก่ากว่า

03:12.200 --> 03:15.130
แต่คุณยังสามารถเลือกใช้ es6 ซึ่งทันสมัยกว่า

03:15.130 --> 03:17.510
ซึ่งรองรับ const และ let หรือ

03:17.510 --> 03:19.310
take เวอร์ชันที่ใหม่กว่า

03:19.310 --> 03:24.310
es6 เทียบเท่ากับ es2015 เพียงเพื่อบันทึก

03:24.870 --> 03:27.480
ตัวอย่างเช่น ถ้าเราตั้งค่านี้เป็น es6 และฉันรันคำสั่ง

03:27.480 --> 03:32.460
tsc อีกครั้งหลังจากเปลี่ยน tsconfig

03:32.460 --> 03:32.460
json

03:32.460 --> 03:35.440
คุณจะเห็นว่าตอนนี้ในแอป js เราได้รับ let และ

03:35.440 --> 03:38.130
const เพราะตอนนี้รองรับแล้ว

03:38.130 --> 03:39.340
ขึ้นอยู่กับคุณ

03:39.340 --> 03:41.720
แน่นอน ยิ่งคุณเลือกเวอร์ชัน JavaScript

03:41.720 --> 03:43.641
ที่ทันสมัยกว่านี้ โค้ดที่คุณสร้างขึ้นจะมีความกระชับมากขึ้น

03:43.641 --> 03:59.560
เนื่องจาก TypeScript ต้องคอมไพล์โค้ดน้อยลงเรื่อยๆ หรือต้องแก้ไขฟีเจอร์ที่ไม่มีอยู่ในสถานการณ์ที่น้อยลง ดังนั้นการคอมไพล์ โดยทั่วไปแล้วโค้ดจะทำได้กระชับและสั้นกว่า

03:59.560 --> 04:01.150
นั่นคือเป้าหมาย

04:01.150 --> 04:02.623
แล้วตัวเลือกอื่น ๆ ล่ะ?
