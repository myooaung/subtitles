WEBVTT

1
00:00:02.540 --> 00:00:05.610
<v Instructor>Next I wanna explore function overloads,</v>

2
00:00:05.610 --> 00:00:08.050
a feature that allows us to define

3
00:00:08.050 --> 00:00:11.450
multiple function signatures, so to say,

4
00:00:11.450 --> 00:00:13.840
for one and the same function.

5
00:00:13.840 --> 00:00:17.080
Which simply means we can have multiple possible ways

6
00:00:17.080 --> 00:00:20.340
of calling a function with different parameters,

7
00:00:20.340 --> 00:00:24.300
for example, to then do something inside of that function.

8
00:00:24.300 --> 00:00:26.540
And a good example where function overloads

9
00:00:26.540 --> 00:00:29.060
can help us can be seen a little bit further above.

10
00:00:29.060 --> 00:00:32.090
This add function we wrote earlier,

11
00:00:32.090 --> 00:00:35.940
what it does is it takes two combinable values,

12
00:00:35.940 --> 00:00:37.960
which means strings or numbers,

13
00:00:37.960 --> 00:00:39.830
and then as you can see the return type

14
00:00:39.830 --> 00:00:43.450
TypeScript infers here all is combinable.

15
00:00:43.450 --> 00:00:45.370
This simply means TypeScript understands

16
00:00:45.370 --> 00:00:47.960
that what it returns also either is a string

17
00:00:47.960 --> 00:00:51.080
or a number, but actually if you think about it,

18
00:00:51.080 --> 00:00:52.880
that's not really true.

19
00:00:52.880 --> 00:00:55.280
I mean, technically it's true, but we know

20
00:00:55.280 --> 00:00:57.620
that if we pass in two numbers the return type

21
00:00:57.620 --> 00:00:59.400
will always be number.

22
00:00:59.400 --> 00:01:01.940
If we pass in at least one string

23
00:01:01.940 --> 00:01:03.950
the return type will be string.

24
00:01:03.950 --> 00:01:05.460
Now why might this matter?

25
00:01:05.460 --> 00:01:08.225
Keep in mind that the add function is written like this.

26
00:01:08.225 --> 00:01:11.060
And actually you can comment out everything below

27
00:01:11.060 --> 00:01:15.390
and add some new code up there right below the function.

28
00:01:15.390 --> 00:01:18.670
If I now get my result here by calling add,

29
00:01:18.670 --> 00:01:21.870
I pass in one and five, you see result

30
00:01:21.870 --> 00:01:23.390
is of type combinable.

31
00:01:23.390 --> 00:01:27.010
A consequence of this is that TypeScript does not know

32
00:01:27.010 --> 00:01:30.390
whether result is a number or string.

33
00:01:30.390 --> 00:01:34.510
Now this might really matter if we are passing in strings.

34
00:01:34.510 --> 00:01:39.510
If I pass in Max Schwarz here, then this works

35
00:01:39.700 --> 00:01:41.750
but I still get back combinable.

36
00:01:41.750 --> 00:01:43.990
Now as a consequence I can't call

37
00:01:43.990 --> 00:01:46.120
string functions on result,

38
00:01:46.120 --> 00:01:50.600
I can't call split for example to split on the white space.

39
00:01:50.600 --> 00:01:52.870
I know that this will work, because I know

40
00:01:52.870 --> 00:01:55.270
that when I call the function like this,

41
00:01:55.270 --> 00:01:57.200
I will make it into this if branch

42
00:01:57.200 --> 00:01:59.980
and I will get back a string, so I know that results

43
00:01:59.980 --> 00:02:03.030
will hold the string, but TypeScript just knows

44
00:02:03.030 --> 00:02:05.620
that it holds a string or a number.

45
00:02:05.620 --> 00:02:08.350
Now of course, we can use type casting here

46
00:02:08.350 --> 00:02:11.340
and tell TypeScript that what we get back is a string.

47
00:02:11.340 --> 00:02:13.930
We can do that with the type casting syntax

48
00:02:13.930 --> 00:02:16.040
you learned about earlier.

49
00:02:16.040 --> 00:02:18.840
Still, it's not optimal that we have to do that,

50
00:02:18.840 --> 00:02:21.800
I would argue, because we have to write more code here

51
00:02:21.800 --> 00:02:24.560
even though we would expect TypeScript to understand

52
00:02:24.560 --> 00:02:26.070
that when we call this function like this

53
00:02:26.070 --> 00:02:27.740
we always get back a string.

54
00:02:27.740 --> 00:02:30.890
But TypeScript isn't really analyzing our code

55
00:02:30.890 --> 00:02:33.700
good enough here, and that's where a function overload

56
00:02:33.700 --> 00:02:35.000
can help us.

57
00:02:35.000 --> 00:02:38.730
A function overload is written by simply writing function

58
00:02:38.730 --> 00:02:41.880
right above your main function, so to say,

59
00:02:41.880 --> 00:02:46.683
with the same name, so you repeat this line here basically,

60
00:02:47.880 --> 00:02:50.890
however without the curly braces, no opening and closing

61
00:02:50.890 --> 00:02:54.080
curly braces thereafter, and now here you want to use

62
00:02:54.080 --> 00:02:57.980
specific types number and number

63
00:02:57.980 --> 00:03:01.980
and then the find return type for when this is the case

64
00:03:01.980 --> 00:03:03.410
when you get at least one number.

65
00:03:03.410 --> 00:03:06.643
And there we could say, then the return type is number.

66
00:03:08.840 --> 00:03:10.980
So now with that we're saying to TypeScript,

67
00:03:10.980 --> 00:03:14.980
if we call this function and both arguments are a number,

68
00:03:14.980 --> 00:03:17.180
then this function returns a number.

69
00:03:17.180 --> 00:03:19.430
Now this of course is not syntax that would work

70
00:03:19.430 --> 00:03:22.480
in JavaScript, it will be eliminated by TypeScript

71
00:03:22.480 --> 00:03:24.430
in the compilation process.

72
00:03:24.430 --> 00:03:28.480
But TypeScript merges this function information

73
00:03:28.480 --> 00:03:31.380
and this function declaration here together

74
00:03:31.380 --> 00:03:33.640
and basically combines the knowledge

75
00:03:33.640 --> 00:03:35.550
of these two lines here.

76
00:03:35.550 --> 00:03:38.590
And now it knows okay, we can call this function here

77
00:03:38.590 --> 00:03:41.490
either with A and B of type combinable

78
00:03:41.490 --> 00:03:43.790
or with A and B of type number.

79
00:03:43.790 --> 00:03:47.060
By the way, you also can add more or less parameters here

80
00:03:47.060 --> 00:03:50.100
in your overloads, you're really flexible there.

81
00:03:50.100 --> 00:03:53.640
You also add function add here and just expect

82
00:03:53.640 --> 00:03:57.620
one number and return a number,

83
00:03:57.620 --> 00:04:01.210
and this would also work if we make B optional

84
00:04:01.210 --> 00:04:03.270
in our other overloads as well.

85
00:04:03.270 --> 00:04:05.254
Because ultimately of course you need to ensure

86
00:04:05.254 --> 00:04:08.630
that your code in here always works and you receive

87
00:04:08.630 --> 00:04:10.850
all the arguments you need in the end.

88
00:04:10.850 --> 00:04:13.610
So it's B would be optional here

89
00:04:13.610 --> 00:04:15.170
then you see this works, now of course

90
00:04:15.170 --> 00:04:17.850
we just would have to work around B being potentially

91
00:04:17.850 --> 00:04:19.550
optional down there.

92
00:04:19.550 --> 00:04:21.390
I don't need that however, so I'll get rid of that

93
00:04:21.390 --> 00:04:24.460
and just leave this, but I also did not want an overload

94
00:04:24.460 --> 00:04:27.200
for when we called this with strings.

95
00:04:27.200 --> 00:04:30.060
So I will add another add function overload here

96
00:04:30.060 --> 00:04:33.450
where A is a string and B is a string

97
00:04:33.450 --> 00:04:36.090
and then I'm pretty clear regarding the fact

98
00:04:36.090 --> 00:04:38.460
that what we return will be a string.

99
00:04:38.460 --> 00:04:40.280
By the way, it is a good practice to add a semicolon

100
00:04:40.280 --> 00:04:43.660
after these overload lines here.

101
00:04:43.660 --> 00:04:46.560
So now with that I'm saying if we're calling this function

102
00:04:46.560 --> 00:04:49.100
with two numbers, we always get back a number.

103
00:04:49.100 --> 00:04:52.170
If we call it with two strings, we always get back a string.

104
00:04:52.170 --> 00:04:54.510
If we call it with one string and one number,

105
00:04:54.510 --> 00:04:57.020
we technically also always get back a string,

106
00:04:57.020 --> 00:04:57.853
but I don't want to add

107
00:04:57.853 --> 00:04:59.410
all these possible combinations here,

108
00:04:59.410 --> 00:05:01.240
of course I could add more

109
00:05:01.240 --> 00:05:03.173
and then also add number here,

110
00:05:04.040 --> 00:05:06.470
or the other combination we might have,

111
00:05:06.470 --> 00:05:07.500
which is this one.

112
00:05:07.500 --> 00:05:10.060
Well I guess now I did add all combinations.

113
00:05:10.060 --> 00:05:12.540
And now I'm listing all potential combinations

114
00:05:12.540 --> 00:05:16.040
of values here and what we return in each case.

115
00:05:16.040 --> 00:05:18.260
Now with that, you see the error down there is gone

116
00:05:18.260 --> 00:05:20.520
because now TypeScript knows that results will be

117
00:05:20.520 --> 00:05:24.790
of type string if we call add with these two values

118
00:05:24.790 --> 00:05:25.623
which are both strings.

119
00:05:25.623 --> 00:05:28.510
And if I hover over add you see there are

120
00:05:28.510 --> 00:05:31.100
three additional overloads available.

121
00:05:31.100 --> 00:05:32.980
Here I'm calling add with two strings,

122
00:05:32.980 --> 00:05:35.560
but TypeScript knows there are three other ways

123
00:05:35.560 --> 00:05:36.630
of calling this.

124
00:05:36.630 --> 00:05:39.450
For example, with a string and a number,

125
00:05:39.450 --> 00:05:41.340
in which case I get back a string,

126
00:05:41.340 --> 00:05:46.340
with a number and some string, or with two numbers.

127
00:05:47.430 --> 00:05:48.630
This would also work.

128
00:05:48.630 --> 00:05:50.210
Then of course I can't call split

129
00:05:50.210 --> 00:05:52.650
because TypeScript correctly identifies

130
00:05:52.650 --> 00:05:54.630
that when I call this with two numbers,

131
00:05:54.630 --> 00:05:58.253
I get back a number, and on a number you can't call split.

132
00:05:59.260 --> 00:06:02.010
So these are function overloads and they can help you

133
00:06:02.010 --> 00:06:04.060
in situations like this here,

134
00:06:04.060 --> 00:06:06.780
where TypeScript would not be able to correctly infer

135
00:06:06.780 --> 00:06:08.590
the return type on its own,

136
00:06:08.590 --> 00:06:11.660
here you can be really clear about what's getting returned

137
00:06:11.660 --> 00:06:14.667
for the different combinations you might support

138
00:06:14.667 --> 00:06:16.033
in your function.

