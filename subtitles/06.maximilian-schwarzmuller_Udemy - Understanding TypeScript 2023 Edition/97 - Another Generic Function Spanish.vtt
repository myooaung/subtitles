WEBVTT

00:02.140 --> 00:03.620
-: Así que vamos a seguir practicando

00:03.620 --> 00:06.220
con estos tipos genéricos porque sé que pueden ser extraños

00:06.220 --> 00:08.305
para envolver tu cabeza; Sin embargo, al final

00:08.305 --> 00:09.970
son realmente sencillos.

00:09.970 --> 00:12.180
Vamos a crear una función genérica

00:12.180 --> 00:14.810
promedio, contar e imprimir.

00:14.810 --> 00:19.810
Ahora esta función debe tomar algún argumento, algún parámetro.

00:20.330 --> 00:23.470
Llamémoslo elemento, pero el nombre depende realmente

00:23.470 --> 00:26.530
de ti que debe ser de tipo genérico.

00:26.530 --> 00:28.340
Porque realmente no me importa el

00:28.340 --> 00:30.380
tipo, al menos en ciertos aspectos.

00:30.380 --> 00:33.400
Digamos que tenemos un tipo genérico en esta función

00:33.400 --> 00:35.800
y nuestro parámetro es de ese tipo.

00:35.800 --> 00:38.350
Por cierto, eso es lo típico de los tipos genéricos.

00:38.350 --> 00:40.030
Si tiene una función genérica, entonces

00:40.030 --> 00:42.180
a menudo su parámetro será de ese tipo.

00:42.180 --> 00:43.890
No tiene por qué serlo, pero a menudo es

00:43.890 --> 00:45.890
así como se trabaja con las funciones genéricas,

00:45.890 --> 00:46.920
como verás, a medida que

00:46.920 --> 00:49.080
adquieras más y más experiencia con ellas.

00:49.080 --> 00:50.670
Así que aquí tenemos el recuento

00:50.670 --> 00:52.350
y la impresión con nuestro tipo genérico

00:52.350 --> 00:54.430
aquí, y el elemento es de ese tipo.

00:54.430 --> 00:56.500
Ahora lo que quiero devolver aquí

00:56.500 --> 01:00.300
es una tupla nienda con dos elementos donde el primer elemento

01:00.300 --> 01:03.190
debe ser mi elemento mismo y el segundo elemento

01:03.190 --> 01:07.070
debe ser una cadena de descripción.

01:07.070 --> 01:10.160
Tal vez lo nombramos contar y describir, por lo tanto.

01:10.160 --> 01:15.160
Así que aquí tengo mi texto de descripción, y aquí voy a decir

01:15.410 --> 01:19.890
que no tiene valor, y quiero usar eso si pasamos un elemento

01:19.890 --> 01:22.620
que no tiene longitud.

01:22.620 --> 01:25.570
Porque mi idea con count y describe es que podemos pasar

01:25.570 --> 01:29.040
un array o una cadena, y obtenemos de vuelta la cantidad de caracteres

01:29.040 --> 01:32.040
o elementos en esa cadena o array.

01:32.040 --> 01:34.040
Así que si tenemos una cadena vacía

01:34.040 --> 01:37.440
o un array vacío, quiero usar got sin valor, pero aquí

01:37.440 --> 01:42.440
si compruebo que la longitud del punto del elemento es mayor que cero, entonces

01:43.210 --> 01:46.170
quiero establecer el texto de la descripción

01:47.430 --> 01:52.430
a got más la longitud del punto del elemento más los elementos.

01:55.850 --> 01:58.100
Se podría ser aún más específico

01:58.100 --> 02:03.100
y comprobar si la longitud es igual a uno aquí, y luego decir tiene un

02:06.590 --> 02:11.590
elemento, si no, si la longitud del elemento es mayor que uno, tenemos

02:11.720 --> 02:13.750
texto de descripción igual

02:13.750 --> 02:18.750
tiene más elementos de longitud del elemento para que tengamos la forma

02:18.990 --> 02:21.173
plural correcta.

02:22.850 --> 02:25.220
Ahora aquí, el texto de descripción está allí para el segundo elemento

02:25.220 --> 02:27.040
y volver aquí. Ahora ya se ven tipos

02:27.040 --> 02:29.480
de quejas sobre la longitud aquí.

02:29.480 --> 02:32.350
Porque no está claro que ese elemento tenga una longitud.

02:32.350 --> 02:34.770
Así que tal vez deberíamos dejar claro que sí.

02:34.770 --> 02:38.430
Podríamos hacerlo creando una nueva interfaz o un tipo personalizado

02:38.430 --> 02:41.060
con la palabra clave type aquí y aquí me decantaré

02:41.060 --> 02:44.750
por una interfaz a la que llamaré lengthy que al final sólo garantiza

02:44.750 --> 02:47.440
que tenemos un objeto con una propiedad length

02:47.440 --> 02:50.820
que debería dar un número al final.

02:50.820 --> 02:52.870
Y entonces aquí podemos establecer una restricción

02:52.870 --> 02:54.740
y decir que dice que T se extiende a lo largo.

02:54.740 --> 02:57.710
Así que sabemos que lo que obtenemos, tendremos una propiedad

02:57.710 --> 03:01.053
de longitud y un array o una cadena tendría una propiedad de longitud.

03:02.030 --> 03:07.030
Ahora aquí, puedo registrar en la consola el recuento y

03:07.500 --> 03:11.240
la descripción y pasar, digamos, hola.

03:11.240 --> 03:14.280
Ahora esto funciona porque una cadena tiene una propiedad de longitud.

03:14.280 --> 03:15.290
No es un objeto.

03:15.290 --> 03:17.310
Es una cadena, pero detrás de las escenas, Javascript

03:17.310 --> 03:19.980
como que convierte esto a un objeto sobre la marcha se podría decir

03:19.980 --> 03:21.720
y añade una propiedad de longitud cuando lo

03:21.720 --> 03:23.940
necesitamos. Por lo tanto, podemos

03:23.940 --> 03:26.960
llamarlo con seguridad así. Escriba el script en primer

03:26.960 --> 03:31.370
lugar que aquí devolvemos un array con un elemento de cadena o de tipo

03:31.370 --> 03:33.580
T en él. Ahora quiero tener una tupla

03:33.580 --> 03:36.060
así que seré más específico aquí y estableceré el tipo

03:36.060 --> 03:39.110
de retorno para que sea básicamente un array con exactamente dos

03:39.110 --> 03:41.330
elementos donde el primer elemento será de tipo

03:41.330 --> 03:43.850
T y el segundo elemento será de tipo string.

03:43.850 --> 03:46.270
Así que ahora sólo digo que devolvemos una

03:46.270 --> 03:49.360
tupla aquí donde el primer elemento será, bueno, cualquier

03:49.360 --> 03:52.010
elemento de nuestro tipo genérico, y el segundo

03:52.010 --> 03:54.110
elemento será una cadena.

03:54.110 --> 03:56.820
Ahora, con eso si guardamos esto, se recompila

03:56.820 --> 04:00.330
sin errores y se imprime hola ahí, tiene nueve elementos porque

04:00.330 --> 04:02.330
tenemos nueve caracteres ahí.

04:04.320 --> 04:06.890
También podríamos llamar a esto con un array

04:06.890 --> 04:09.530
en el que tengamos deportes y cocina, y ahora

04:09.530 --> 04:12.460
verás que tenemos dos elementos como texto de descripción,

04:12.460 --> 04:15.990
o con un array vacío, por supuesto, en cuyo caso, si guardo

04:15.990 --> 04:18.660
eso no tenemos ningún valor, pero no podremos

04:18.660 --> 04:24.103
llamar a esto, por ejemplo, con un número porque un número no tiene la propiedad de longitud

04:24.103 --> 04:28.090
y por tanto esto no funciona.

04:28.090 --> 04:32.900
Así que, de nuevo, tenemos nuestra función genérica.

04:32.900 --> 04:35.043
La idea es similar a la función anterior.

04:35.043 --> 04:38.680
Queremos ser un poco inespecíficos sobre el tipo de datos que obtenemos

04:38.680 --> 04:40.540
aquí. Realmente no nos importa

04:40.540 --> 04:43.180
si es una cadena, si es un array, o cualquier otra cosa que una propiedad

04:43.180 --> 04:45.610
de longitud. Sólo nos importa que tenga una

04:45.610 --> 04:47.930
propiedad de longitud y luego queremos hacer algo con

04:47.930 --> 04:49.980
ella porque dependemos de la propiedad de longitud

04:49.980 --> 04:51.970
en nuestro código, así que necesitamos garantizar

04:51.970 --> 04:53.540
que tenemos eso, pero aparte de eso,

04:53.540 --> 04:55.370
realmente no tenemos interés en qué tipo de

04:55.370 --> 04:59.490
datos estamos obteniendo aquí.

04:59.490 --> 04:59.490
No

04:59.490 --> 05:01.820
quiero limitar esto a una cadena o a un array, y no quiero

05:01.820 --> 05:04.220
crear un montón de sobrecargas para manejar todos los

05:04.220 --> 05:05.830
diferentes tipos posibles.

05:05.830 --> 05:08.124
Tampoco quiero crear un tipo de unión muy

05:08.124 --> 05:10.970
largo aquí porque podría olvidar los tipos que tienen

05:10.970 --> 05:13.610
una propiedad de longitud, o si creo mi propio

05:13.610 --> 05:16.220
objeto con una propiedad de longitud, podría

05:16.220 --> 05:18.640
no permitirlo si restrinjo esto aquí para

05:18.640 --> 05:21.580
ser del tipo, cadena y matriz o algo así.

05:21.580 --> 05:23.500
Por lo tanto, quiero ser más flexible

05:23.500 --> 05:25.380
y con los tipos genéricos podemos serlo,

05:25.380 --> 05:27.550
no nos importa el tipo exacto.

05:27.550 --> 05:30.080
Aquí, gracias a la restricción, sólo me importa

05:30.080 --> 05:33.363
el hecho de que tenga una propiedad de longitud.
