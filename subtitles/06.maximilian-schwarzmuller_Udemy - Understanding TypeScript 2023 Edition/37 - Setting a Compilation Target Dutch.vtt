WEBVTT

00:02.450 --> 00:04.810
Instructeur: Dus nu we weten hoe we onze bestanden

00:04.810 --> 00:07.850
kunnen beheren met de compiler, laten we eens duiken in

00:07.850 --> 00:09.870
de compiler opties, want dat is echt

00:09.870 --> 00:11.300
interessant.

00:11.300 --> 00:13.860
Hierdoor kunnen we bepalen hoe onze TypeScript-code

00:13.860 --> 00:16.620
wordt gecompileerd, dus niet alleen welke bestanden,

00:16.620 --> 00:18.360
maar ook hoe de bestanden die

00:18.360 --> 00:20.920
worden gecompileerd door TypeScript worden

00:20.920 --> 00:23.230
behandeld.

00:23.230 --> 00:26.760
En daar zie je dat we een hoop opties hebben.

00:26.760 --> 00:29.560
Je hebt korte uitleg naast deze opties.

00:29.560 --> 00:32.450
Sommige verklaringen zijn misschien wat cryptisch.

00:32.450 --> 00:34.210
Andere zijn heel duidelijk.

00:34.210 --> 00:36.450
En ik zal zeggen dat veel van deze opties, de

00:36.450 --> 00:39.950
meeste van deze opties er bij de meeste projecten niet toe doen.

00:39.950 --> 00:43.900
Je zult dus niet al deze opties instellen, zelfs niet bijna.

00:43.900 --> 00:46.070
Veel van deze opties kun je meestal negeren.

00:46.070 --> 00:48.765
Nu zal ik de belangrijke opties hier gedurende deze

00:48.765 --> 00:50.230
cursus oppakken, omdat sommige

00:50.230 --> 00:52.140
opties alleen zinvol zijn als we over

00:52.140 --> 00:53.911
een bepaalde functie leren.

00:53.911 --> 00:55.940
En ik wil nu al in enkele opties

00:55.940 --> 00:57.250
duiken.

00:57.250 --> 01:00.840
En daarvoor, laten we het bestand van boven naar beneden doorlopen en

01:00.840 --> 01:02.340
kijken wat we daar hebben.

01:02.340 --> 01:04.410
Laten we beginnen met de doeloptie.

01:04.410 --> 01:07.230
Zoals u ziet, is dit standaard ingesteld.

01:07.230 --> 01:08.750
Het is niet uitgecommentarieerd.

01:08.750 --> 01:10.780
En met deze optie vertelt

01:10.780 --> 01:15.530
u TypeScript voor welke JavaScript-versie u de code wilt

01:15.530 --> 01:16.970
compileren.

01:16.970 --> 01:18.850
Want TypeScript compileert

01:18.850 --> 01:21.600
niet alleen nieuwe functies zoals de type-annotaties

01:21.600 --> 01:23.500
die niet bestaan in JavaScript

01:23.500 --> 01:26.960
naar JavaScript-code.

01:26.960 --> 01:29.667
Dus het zorgt er niet alleen

01:29.667 --> 01:33.270
voor dat dit hier werkt.

01:33.270 --> 01:37.530
Het compileert ook de code naar JavaScript dat

01:37.530 --> 01:41.370
in een bepaalde reeks browsers werkt.

01:41.370 --> 01:43.798
En u bepaalt in principe welke browsers de compileercode

01:43.798 --> 01:46.980
ondersteunen door het doel in te stellen.

01:46.980 --> 01:49.520
Het standaard doel hier in dit project zoals je

01:49.520 --> 01:52.430
ziet, het initiÃ«le doel dat wordt ingesteld is es5, wat

01:52.430 --> 01:55.517
betekent dat alle soorten code worden gecompileerd.

01:55.517 --> 01:57.550
Dat kunnen we wel zien.

01:57.550 --> 02:00.770
Als ik TSC hier uitvoer om al mijn bestanden te compileren,

02:00.770 --> 02:03.260
zien we in app. ts Ik gebruik let en const,

02:03.260 --> 02:05.732
maar in app. js, zien we var.

02:05.732 --> 02:09.890
En dat gebeurt omdat we een doel hebben van es5 en

02:09.890 --> 02:13.816
in es5 wereld, hebben we geen laat en const.

02:13.816 --> 02:16.810
Het goede hier is dus dat we TypeScript kunnen gebruiken

02:16.810 --> 02:20.650
om code te genereren die ook in oudere browsers werkt.

02:20.650 --> 02:22.930
Maar het is helemaal aan ons of we dat willen doen.

02:22.930 --> 02:25.550
Misschien willen we dat niet doen met TypeScript,

02:25.550 --> 02:27.670
omdat we misschien een ander bouwprogramma

02:27.670 --> 02:30.560
hebben dat dan zorgt voor de JavaScript-transparatie

02:30.560 --> 02:33.290
en daarom willen we TypeScript dat niet laten doen,

02:33.290 --> 02:35.340
of misschien willen we code verzenden die

02:35.340 --> 02:37.030
alleen werkt in moderne browsers

02:37.030 --> 02:41.170
omdat we weten dat onze app alleen in moderne browsers zal draaien.

02:41.170 --> 02:44.160
En daarom zijn hier alternatieve opties te zien als

02:44.160 --> 02:46.070
je de waarde verwijdert en dan hier

02:46.070 --> 02:48.080
in vscode tenminste, als je op Control

02:48.080 --> 02:51.300
+ Space drukt om de auto-aanvulling te krijgen, zie je

02:51.300 --> 02:54.180
een heleboel suggesties en je ziet hier alle beschikbare

02:54.180 --> 02:56.450
waarden.

02:56.450 --> 02:58.700
Na verloop van tijd zal dit natuurlijk veranderen

02:58.700 --> 03:01.900
omdat er nieuwe JavaScript-versies zijn uitgebracht.

03:01.900 --> 03:03.785
Je zag dat we dit eerder op es5 zetten.

03:03.785 --> 03:06.150
Als u helemaal geen target opgeeft, dan

03:06.150 --> 03:09.520
compileert TypeScript op dit moment zelfs naar es3, dus

03:09.520 --> 03:12.200
het ondersteunt een nog oudere versie.

03:12.200 --> 03:15.130
Maar u kunt ook gaan met es6, die moderner is,

03:15.130 --> 03:17.510
die bijvoorbeeld const ondersteunt

03:17.510 --> 03:19.310
en laat of neem een nog recentere

03:19.310 --> 03:24.310
versie, es6 is gelijkwaardig aan es2015, voor de goede orde.

03:24.870 --> 03:27.480
Dus als we dit bijvoorbeeld instellen op es6, en ik voer

03:27.480 --> 03:29.580
het tsc commando opnieuw uit na het veranderen

03:29.580 --> 03:32.460
van de tsconfig. json bestand, dat

03:32.460 --> 03:35.440
zie je nu in app. js, we hebben let en const,

03:35.440 --> 03:38.130
want dat wordt nu ondersteund.

03:38.130 --> 03:39.340
Dus dat is aan jou.

03:39.340 --> 03:41.720
Natuurlijk, hoe moderner de JavaScript-versie

03:41.720 --> 03:43.641
die u hier kiest, hoe beknopter

03:43.641 --> 03:47.450
uw gegenereerde code is, omdat TypeScript steeds minder code

03:47.450 --> 03:50.440
moet compileren, of in minder situaties om niet-bestaande

03:50.440 --> 03:59.560
functies heen moet werken, en daarom wordt de gecompileerde code meestal beknopter en korter gemaakt.

03:59.560 --> 04:01.150
Dus dat is het doel.

04:01.150 --> 04:02.623
Hoe zit het met de andere opties?
