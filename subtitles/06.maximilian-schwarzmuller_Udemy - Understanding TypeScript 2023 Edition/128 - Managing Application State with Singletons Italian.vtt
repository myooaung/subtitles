WEBVTT

00:02.310 --> 00:04.580
Istruttore: Quindi, portare i progetti da A a

00:04.580 --> 00:06.000
B è ora il nostro obiettivo.

00:06.000 --> 00:09.750
Per essere precisi, quando gli utenti creano un nuovo progetto,

00:09.750 --> 00:11.850
quando inseriscono tutti i dati, vogliamo

00:11.850 --> 00:15.790
creare un nuovo oggetto progetto alla fine, che poi viene mostrato

00:15.790 --> 00:18.830
nella nostra classe Elenco progetti come parte dell'elenco

00:18.830 --> 00:20.460
non ordinato, che viene reso

00:20.460 --> 00:21.990
lì.

00:21.990 --> 00:23.299
Questa è l'idea.

00:23.299 --> 00:26.350
Naturalmente, un modo banale di implementare questo potrebbe

00:26.350 --> 00:28.890
essere quello di andare semplicemente nel luogo in cui

00:28.890 --> 00:30.830
viene inserito l'input dell'utente e poi

00:30.830 --> 00:34.513
qui utilizzare il documento. getElementbyId, per raggiungere

00:36.100 --> 00:39.410
l'elenco non ordinato che abbiamo reso come parte

00:39.410 --> 00:42.270
della nostra classe elenco di progetti, che

00:42.270 --> 00:44.470
ha questo ID qui, quindi elenco di

00:44.470 --> 00:49.110
progetti attivi o elenco di progetti finiti, e poi semplicemente raggiungerlo

00:49.110 --> 00:52.760
e aggiungervi un nuovo elemento.

00:52.760 --> 00:54.770
Ma non è questa l'idea di come voglio

00:54.770 --> 00:57.250
costruire questa applicazione.

00:57.250 --> 00:59.800
Voglio costruirlo in modo orientato

00:59.800 --> 01:02.530
agli oggetti, dove abbiamo le nostre diverse

01:02.530 --> 01:06.500
classi che lavorano insieme in modo reattivo, dove creiamo

01:06.500 --> 01:08.200
una nuova classe e poi succede

01:08.200 --> 01:10.550
qualcosa nella dom.

01:10.550 --> 01:12.730
In cui si chiama un metodo di una classe

01:12.730 --> 01:14.650
e questa classe fa qualcosa.

01:14.650 --> 01:16.980
È così che voglio che funzionino queste cose.

01:16.980 --> 01:19.560
Naturalmente possiamo aggiungere un metodo

01:19.560 --> 01:21.550
alla classe dell'elenco dei progetti,

01:21.550 --> 01:24.120
diciamo che aggiungo il metodo project.

01:24.120 --> 01:25.890
Questo metodo dovrebbe essere richiamato

01:25.890 --> 01:28.200
quando un progetto deve essere aggiunto e reso,

01:28.200 --> 01:30.700
e dovremmo trovare un modo per richiamarlo dall'interno

01:30.700 --> 01:32.940
dell'input del progetto.

01:32.940 --> 01:34.820
Per farlo, potremmo assicurarci di

01:34.820 --> 01:37.940
passare i riferimenti al nostro elenco qui, al costruttore

01:37.940 --> 01:40.330
del progetto di input, in modo che dall'interno

01:40.330 --> 01:42.810
della classe di input del progetto, possiamo

01:42.810 --> 01:45.290
lavorare con queste istanze concrete e chiamare

01:45.290 --> 01:47.570
i metodi su queste istanze.

01:47.570 --> 01:50.260
Perché è questo che dovremmo fare.

01:50.260 --> 01:52.050
Questa sarebbe una strada percorribile,

01:52.050 --> 01:54.400
sicuramente un approccio che si potrebbe

01:54.400 --> 01:58.680
seguire, ma io voglio adottare un approccio ancora più astratto.

01:58.680 --> 02:01.393
Un approccio ancora più interessante, a mio avviso.

02:02.330 --> 02:06.210
Costruirò una classe che gestisca lo stato della nostra applicazione,

02:06.210 --> 02:08.110
cioè una classe che gestisca i

02:08.110 --> 02:11.187
nostri progetti o qualsiasi stato sia necessario

02:11.187 --> 02:13.840
gestire nell'applicazione, che ci permetta

02:13.840 --> 02:15.530
anche di impostare ascoltatori

02:15.530 --> 02:18.660
nelle diverse parti dell'applicazione che sono

02:18.660 --> 02:21.670
interessate.

02:21.670 --> 02:24.540
Si tratta di uno schema che potrebbe sembrarvi familiare

02:24.540 --> 02:27.050
se avete lavorato con framework come Angular

02:27.050 --> 02:29.820
o librerie come React e Redux.

02:29.820 --> 02:33.423
Si ha un oggetto di gestione dello stato globale e si ascoltano

02:33.423 --> 02:35.443
solo le modifiche.

02:35.443 --> 02:37.480
Questo è ciò che voglio implementare qui.

02:37.480 --> 02:39.620
Naturalmente si tratta solo di un modo per farlo,

02:39.620 --> 02:41.660
ma credo che sia piuttosto interessante, ed

02:41.660 --> 02:43.680
è per questo che voglio mostrarlo.

02:43.680 --> 02:45.908
Quindi, all'inizio del file ts dell'applicazione,

02:45.908 --> 02:50.350
aggiungerò una classe di gestione dello stato del progetto.

02:50.350 --> 02:53.347
E lo chiamerò semplicemente projectState;

02:54.820 --> 02:57.210
mi sembra un nome sensato.

02:57.210 --> 02:59.900
L'idea è che in questa classe abbiamo

02:59.900 --> 03:03.760
una proprietà o un campo, un campo privato,

03:03.760 --> 03:06.570
projects, che contiene un array

03:06.570 --> 03:08.800
di progetti.

03:08.800 --> 03:12.000
Ora dobbiamo anche definire l'aspetto di un progetto, lo faremo

03:12.000 --> 03:13.360
nel prossimo passo, per ora

03:13.360 --> 03:15.830
diciamo che è un array di qualsiasi cosa, che naturalmente

03:15.830 --> 03:18.710
non è perfetto, non è definitivo, ma per ora voglio concentrarmi

03:18.710 --> 03:22.240
sulla soluzione di gestione degli stati.

03:22.240 --> 03:25.653
Abbiamo quindi questo elenco di progetti.

03:26.530 --> 03:30.163
Ora, il mio obiettivo è aggiungere un elemento all'elenco

03:30.163 --> 03:35.163
ogni volta che facciamo clic sul pulsante Aggiungi progetto.

03:36.940 --> 03:39.970
Per farlo funzionare, all'interno della classe project

03:39.970 --> 03:43.460
state, aggiungerò un metodo add project, pubblico.

03:43.460 --> 03:45.560
E lì mi aspetto di ottenere il titolo,

03:45.560 --> 03:47.060
che dovrebbe essere una stringa,

03:47.060 --> 03:49.390
la descrizione, che dovrebbe essere una stringa,

03:49.390 --> 03:53.250
e anche il numero di persone che lavorano al progetto, che dovrebbe essere

03:53.250 --> 03:55.220
un numero.

03:55.220 --> 03:58.450
Qui possiamo creare un nuovo progetto con la notazione

03:58.450 --> 04:00.950
letterale dell'oggetto.

04:00.950 --> 04:03.950
Dovremmo avere un ID per ogni progetto, in modo da poterlo

04:03.950 --> 04:06.050
identificare in modo univoco; genererò

04:06.050 --> 04:12.100
un ID usando la matematica.

04:12.100 --> 04:12.100
random(). toString.

04:12.100 --> 04:14.960
Ora, un numero casuale non è un ID univoco; è possibile

04:14.960 --> 04:17.880
generare lo stesso numero più di una volta, ma è molto

04:17.880 --> 04:19.300
improbabile, e per i nostri

04:19.300 --> 04:22.570
scopi dimostrativi qui andrà bene.

04:22.570 --> 04:25.170
Oltre a questo, ogni progetto dovrebbe avere un titolo e

04:25.170 --> 04:28.370
lì verrà memorizzato l'argomento del titolo che stiamo ottenendo.

04:28.370 --> 04:30.913
Lo stesso vale per la descrizione, dove memorizzerò

04:31.960 --> 04:33.830
la descrizione.

04:33.830 --> 04:37.693
E il mio popolo dove memorizzerò il numero di persone.

04:39.700 --> 04:43.440
Questo, per ora, è il progetto che voglio conservare.

04:43.440 --> 04:45.000
Quindi, una volta creato qui, possiamo

04:45.000 --> 04:48.020
raggiungere l'array dei progetti nello stato dei progetti, che

04:48.020 --> 04:48.853
è privato, ma dall'interno

04:48.853 --> 04:51.530
della classe, che è questo metodo, possiamo accedervi

04:51.530 --> 04:53.340
naturalmente.

04:53.340 --> 04:55.900
E qui voglio aggiungere questo nuovo progetto e

04:55.900 --> 05:00.380
per questo possiamo semplicemente spingere il nostro nuovo progetto su di esso.

05:00.380 --> 05:03.350
Ora siamo in grado di aggiungere un progetto.

05:03.350 --> 05:07.027
Ma abbiamo ancora, ovviamente, un paio di domande poco chiare.

05:07.027 --> 05:12.027
Come possiamo chiamare add project dall'interno della nostra classe, dove raccogliamo

05:12.750 --> 05:14.650
l'input dell'utente all'interno

05:14.650 --> 05:15.990
del gestore di invio?

05:15.990 --> 05:17.940
Come si chiama il progetto add?

05:17.940 --> 05:21.730
E come si fa a passare l'elenco aggiornato dei progetti ogni volta

05:21.730 --> 05:25.690
che viene modificato alla classe dell'elenco dei progetti?

05:25.690 --> 05:29.230
Questi sono i due problemi che, ovviamente, dobbiamo affrontare al momento.

05:29.230 --> 05:31.840
Una cosa da fare è creare

05:31.840 --> 05:36.499
un'istanza di project state.

05:36.499 --> 05:39.720
Un'istanza globale, che possiamo usare dall'intero file,

05:39.720 --> 05:42.760
e lo faremo subito dopo aver creato la classe.

05:42.760 --> 05:47.050
Qui ho la mia costante di stato del progetto, in cui istanziare

05:47.050 --> 05:50.370
lo stato del progetto in questo modo.

05:50.370 --> 05:52.400
In questo modo si tratta di una costante

05:52.400 --> 05:54.620
globale che può essere usata in qualsiasi

05:54.620 --> 05:58.000
punto del file, quindi parlare con quella classe è ora semplicissimo,

05:58.000 --> 06:01.660
basta usare questa costante globale qui.

06:01.660 --> 06:04.850
Possiamo anche usare una caratteristica che abbiamo imparato a conoscere,

06:04.850 --> 06:06.430
il costruttore privato, per garantire

06:06.430 --> 06:09.170
che questa sia una classe singleton.

06:09.170 --> 06:11.950
Possiamo creare un costruttore privato qui e poi abbiamo

06:11.950 --> 06:14.300
un'altra proprietà privata qui, instance,

06:14.300 --> 06:16.670
che è di tipo project state, quindi dello stesso

06:16.670 --> 06:18.933
tipo di questa classe.

06:20.640 --> 06:24.360
E poi aggiungiamo un metodo di istanza get qui, un metodo

06:24.360 --> 06:26.390
statico in realtà, dove controlliamo

06:26.390 --> 06:30.050
se questo . L'istanza è una cosa e per

06:30.050 --> 06:31.020
questo deve essere

06:31.020 --> 06:33.970
un'istanza statica, una proprietà statica,

06:33.970 --> 06:35.800
intendo.

06:35.800 --> 06:37.100
Se questo è un oggetto, se lo

06:37.100 --> 06:39.550
è, restituiamo questo . quindi restituiamo

06:39.550 --> 06:42.230
la singola istanza ottenuta, altrimenti

06:42.230 --> 06:44.590
ne creiamo una nuova.

06:44.590 --> 06:45.423
Quindi,

06:45.423 --> 06:50.423
per il resto, questo . sarà uguale al nuovo stato del progetto.

06:50.450 --> 06:52.963
E poi restituiamo questo . istanza.

06:54.740 --> 07:00.903
Ora possiamo chiamare l'istanza qui sotto, come questa, ProjectState.

07:00.903 --> 07:00.903
getInstance

07:02.650 --> 07:04.390
e avremo la garanzia di lavorare

07:04.390 --> 07:06.560
sempre con lo stesso identico oggetto

07:06.560 --> 07:11.700
e di avere sempre un solo oggetto di quel tipo nell'intera applicazione.

07:11.700 --> 07:12.840
L'idea è questa, perché

07:12.840 --> 07:16.480
voglio avere un solo oggetto di gestione dello stato per il nostro

07:16.480 --> 07:17.503
progetto.

07:17.503 --> 07:19.570
Questo è lo stato del progetto con questo

07:19.570 --> 07:21.563
costruttore singleton.

07:22.730 --> 07:25.890
Ora abbiamo la costante di stato del progetto.

07:25.890 --> 07:28.040
Passiamo quindi alla classe input del progetto,

07:28.040 --> 07:30.270
dove raccogliamo gli input dell'utente.

07:30.270 --> 07:33.950
Ora possiamo chiamare projectState. addProject e inoltrare

07:33.950 --> 07:37.830
il titolo, la descrizione e le persone, ottenendo

07:37.830 --> 07:40.960
alla fine l'input dell'utente.

07:40.960 --> 07:43.920
Ora questo progetto dovrebbe essere creato.

07:43.920 --> 07:47.140
Ora dobbiamo solo inviare l'informazione che

07:47.140 --> 07:51.530
abbiamo un nuovo progetto alla nostra classe Elenco progetti,

07:51.530 --> 07:53.840
perché è la classe responsabile

07:53.840 --> 07:56.500
dell'output sullo schermo.

07:56.500 --> 07:59.450
E per questo voglio creare un modello di abbonamento

07:59.450 --> 08:00.350
alla fine.

08:00.350 --> 08:03.020
All'interno dello stato del progetto gestiamo

08:03.020 --> 08:05.730
un elenco di ascoltatori, quindi un elenco

08:05.730 --> 08:08.690
di funzioni che devono essere richiamate ogni

08:08.690 --> 08:11.600
volta che qualcosa cambia.

08:11.600 --> 08:12.433
Per questo aggiungerò

08:12.433 --> 08:15.830
qui un'altra proprietà privata, gli ascoltatori.

08:15.830 --> 08:18.810
E gli ascoltatori saranno un array vuoto e per

08:18.810 --> 08:22.130
ora, di nuovo, solo un array di qualsiasi cosa, che

08:22.130 --> 08:25.543
specificheremo in dettaglio più avanti.

08:26.760 --> 08:31.382
Ora voglio anche avere un metodo qui addListener in cui

08:31.382 --> 08:35.590
ottenere una funzione ascoltatore, quindi questa

08:35.590 --> 08:39.150
dovrebbe essere una funzione alla fine.

08:39.150 --> 08:41.370
E poi aggiungerò questo ai miei ascoltatori.

08:41.370 --> 08:43.970
Quindi spingiamo la funzione ascoltatore

08:43.970 --> 08:46.500
qui, nell'array degli ascoltatori.

08:46.500 --> 08:49.580
Qual è l'idea di avere un array di ascoltatori?

08:49.580 --> 08:51.110
È un array di funzioni, di riferimenti

08:51.110 --> 08:53.070
a funzioni, giusto?

08:53.070 --> 08:55.250
L'idea è che ogni volta che qualcosa cambia, ad

08:55.250 --> 08:57.310
esempio quando aggiungiamo un nuovo progetto,

08:57.310 --> 08:59.790
chiamiamo tutte le funzioni degli ascoltatori.

08:59.790 --> 09:03.050
Quindi facciamo un ciclo su tutti gli ascoltatori di questo

09:03.050 --> 09:04.720
ascoltatore, quindi su tutte le

09:04.720 --> 09:07.330
funzioni dell'ascoltatore e poi, dato che si tratta

09:07.330 --> 09:09.520
di riferimenti a funzioni, possiamo eseguirlo

09:09.520 --> 09:11.593
come una funzione.

09:13.010 --> 09:14.630
E a questa funzione passiamo

09:14.630 --> 09:18.620
ciò che è rilevante per essa, in base allo stato che stiamo gestendo, che

09:18.620 --> 09:20.130
in questo caso, in questa classe

09:20.130 --> 09:22.020
ovviamente, è il nostro elenco di

09:22.020 --> 09:23.280
progetti.

09:23.280 --> 09:27.983
È lo stato di cui questa classe è responsabile.

09:29.100 --> 09:29.933
Quindi, inoltro

09:30.980 --> 09:33.050
questo progetto e chiamo slice

09:33.050 --> 09:35.170
su di esso per restituire solo

09:35.170 --> 09:37.550
una copia dell'array e non l'array

09:37.550 --> 09:39.100
originale.

09:39.100 --> 09:41.880
In modo che non possa essere modificato dal punto in

09:41.880 --> 09:44.210
cui proviene la funzione ascoltatore.

09:44.210 --> 09:45.760
Perché gli array e gli oggetti

09:45.760 --> 09:48.110
sono valori di riferimento in Javascript,

09:48.110 --> 09:50.490
quindi se si passasse l'array originale, potremmo

09:50.490 --> 09:52.600
modificarlo dall'esterno e anche, allo

09:52.600 --> 09:54.380
stesso tempo, se si inserisse qualcosa

09:54.380 --> 09:57.020
dall'interno di questa classe, cambierebbe già

09:57.020 --> 09:59.830
in ogni altro punto dell'applicazione, ma questi punti

09:59.830 --> 10:05.630
non noterebbero realmente che è cambiato, quindi si potrebbero introdurre strani bug se si passasse il

10:05.630 --> 10:08.270
riferimento originale, ed è per questo che passo

10:08.270 --> 10:12.770
una copia nuova di zecca, un array nuovo di zecca.

10:12.770 --> 10:15.390
Quindi ora ogni funzione ascoltatore viene eseguita

10:15.390 --> 10:19.400
e riceve la nostra copia, la nostra copia nuova di zecca dei progetti.

10:19.400 --> 10:21.380
Ora dobbiamo solo andare nei luoghi

10:21.380 --> 10:23.800
in cui vogliamo essere informati delle modifiche,

10:23.800 --> 10:26.560
nel nostro caso la classe Elenco progetti, e impostare

10:26.560 --> 10:29.030
un ascoltatore.

10:29.030 --> 10:32.880
Quindi qui, nel costruttore della classe dell'elenco

10:32.880 --> 10:35.546
dei progetti, prima di allegare e rendere

10:35.546 --> 10:38.010
il contenuto, raggiungerò projectState

10:38.010 --> 10:40.110
e chiamerò addListener per registrare

10:40.110 --> 10:43.720
una funzione di ascolto.

10:43.720 --> 10:46.150
Ora un ascoltatore, come ho detto, è una funzione,

10:46.150 --> 10:49.100
quindi dobbiamo passare una funzione ad addListener.

10:49.100 --> 10:51.210
Perché gli ascoltatori che gestiamo qui,

10:51.210 --> 10:52.610
nello stato del progetto,

10:52.610 --> 10:54.680
sono solo un elenco di funzioni, che verranno

10:54.680 --> 10:56.300
chiamate quando qualcosa cambia,

10:56.300 --> 10:57.773
giusto?

10:58.840 --> 11:01.110
Quindi dovrò passare una

11:01.110 --> 11:04.990
funzione alla mia funzione addListener.

11:04.990 --> 11:07.520
Qui passo una funzione freccia anonima.

11:07.520 --> 11:10.770
Questa funzione otterrà un elenco di progetti quando

11:10.770 --> 11:14.400
viene richiamata dall'interno di projectState.

11:14.400 --> 11:17.430
Quindi otteniamo un elenco di progetti e sappiamo che, all'interno

11:17.430 --> 11:19.160
del corpo della funzione, possiamo

11:19.160 --> 11:21.560
utilizzare questo elenco di progetti.

11:21.560 --> 11:26.046
E qui aggiungerò un campo nuovo di zecca all'elenco dei progetti, forse

11:26.046 --> 11:28.410
assignedProjects, che è di tipo any array,

11:28.410 --> 11:30.310
quindi qualsiasi cosa in un array,

11:30.310 --> 11:34.010
e array di valori qualsiasi, naturalmente lo specificherò

11:34.010 --> 11:37.630
in modo più dettagliato in seguito.

11:37.630 --> 11:39.890
Allora possiamo dire che questo progetto

11:39.890 --> 11:41.780
assegnato è uguale ai progetti.

11:41.780 --> 11:44.240
Quindi ai progetti che stiamo ottenendo.

11:44.240 --> 11:45.870
Ora, per eliminare l'errore

11:45.870 --> 11:47.280
di tipo implicito, devo

11:47.280 --> 11:49.900
essere sicuro che si tratti di un array di

11:49.900 --> 11:51.563
qualsiasi cosa.

11:52.610 --> 11:55.020
Quindi ora sto aggiungendo i progetti che ottengo

11:55.020 --> 11:57.660
perché qualcosa è cambiato nel mio stato.

11:57.660 --> 11:59.490
Qui ai miei progetti assegnati,

11:59.490 --> 12:00.530
dove non li aggiungo,

12:00.530 --> 12:02.350
sovrascrivo i progetti assegnati

12:02.350 --> 12:04.170
con i nuovi progetti.

12:04.170 --> 12:08.223
E poi la mia idea è quella di rendere tutti questi progetti.

12:09.080 --> 12:10.883
Per questo possiamo aggiungere

12:11.951 --> 12:15.080
un nuovo metodo, ad esempio renderPrjects.

12:15.080 --> 12:16.920
Che voglio chiamare da qui,

12:16.920 --> 12:20.063
questo renderProjects, proprio come questo.

12:22.230 --> 12:24.120
Termina con renderProjects.

12:24.120 --> 12:27.480
Raggiungerò questo elenco qui, giusto, e assegneremo quell'ID

12:27.480 --> 12:30.150
quando renderizzeremo il contenuto, cosa che

12:30.150 --> 12:31.290
faremo qui.

12:31.290 --> 12:34.440
Sembra che questo avvenga dopo che è stato chiamato renderProjects, ma

12:34.440 --> 12:36.640
si tenga presente che questo termina con una funzione,

12:36.640 --> 12:38.470
che sarà chiamata solo alla fine, quando saranno

12:38.470 --> 12:40.230
aggiunti nuovi progetti.

12:40.230 --> 12:43.510
Quindi in realtà renderContent verrà eseguito per primo.

12:43.510 --> 12:47.090
Pertanto, in renderProjects possiamo fare affidamento sul fatto

12:47.090 --> 12:49.370
che questo ID sia assegnato a un elenco non

12:49.370 --> 12:53.030
ordinato, quindi possiamo prenderlo e ottenere il nostro elemento

12:53.030 --> 12:58.030
di elenco utilizzando document. getElementbyId e poi passo questo identificatore

12:58.469 --> 13:00.790
ID usando il tipo di questa classe concreta

13:00.790 --> 13:03.690
dell'elenco di progetti.

13:03.690 --> 13:08.563
E poi anche utilizzando il resto dell'ID che abbiamo generato.

13:09.580 --> 13:11.130
E in quell'elenco o in quell'elenco

13:11.130 --> 13:14.170
voglio inserire tutti i progetti che abbiamo.

13:14.170 --> 13:17.670
Quindi, passerò in rassegna tutte

13:17.670 --> 13:21.060
le voci dei progetti assegnati.

13:21.060 --> 13:23.150
E poi per ogni elemento voglio aggiungere qualcosa

13:23.150 --> 13:23.983
all'elenco e lo perfezioneremo

13:23.983 --> 13:25.380
in seguito.

13:25.380 --> 13:29.787
Per il momento, mi limiterò a chiamare appendChild qui sul mio

13:30.890 --> 13:32.480
elemento elenco.

13:32.480 --> 13:34.490
A proposito, dovremmo aggiungere un punto

13:34.490 --> 13:36.970
esclamativo per chiarire che non sarà nullo.

13:36.970 --> 13:41.970
Possiamo anche lanciare questo elemento in un elemento di elenco HTML UL, quindi in un

13:42.000 --> 13:43.560
elemento di elenco non ordinato,

13:43.560 --> 13:45.420
perché è quello che sarà.

13:45.420 --> 13:47.530
E poi possiamo aggiungere il figlio qui e questo

13:47.530 --> 13:49.740
dovrebbe essere un nuovo elemento dell'elenco;

13:49.740 --> 13:51.980
quindi possiamo creare il nostro elemento dell'elenco

13:51.980 --> 13:56.160
con il documento. createElement LI.

13:56.160 --> 13:58.350
E su questo elemento dell'elenco, imposterò

13:58.350 --> 14:03.950
il contenuto del testo come Voce del progetto.

14:03.950 --> 14:03.950
titolo.

14:03.950 --> 14:06.240
Ogni elemento del progetto sarà un progetto

14:06.240 --> 14:09.940
nel momento in cui lo creiamo nello stato del progetto, quindi

14:09.940 --> 14:11.350
sarà un oggetto e avrà

14:11.350 --> 14:13.100
un titolo.

14:14.210 --> 14:15.940
Ora, se scendiamo in basso, abbiamo

14:15.940 --> 14:18.880
il nostro elemento dell'elenco che ora viene aggiunto qui.

14:18.880 --> 14:20.730
E con questo siamo quasi a posto,

14:20.730 --> 14:22.340
rimanendo qui a correggere,

14:22.340 --> 14:23.740
ho impostato quel campo,

14:23.740 --> 14:27.080
ma nel costruttore non lo riferimento mai.

14:27.080 --> 14:29.090
Solo qui nella mia funzione ascoltatore, ma

14:29.090 --> 14:31.230
come detto, questa non viene eseguita immediatamente

14:31.230 --> 14:32.640
nel costruttore.

14:32.640 --> 14:37.640
Quindi, per essere soddisfatti, imposterò inizialmente questo progetto

14:38.970 --> 14:41.200
assegnato uguale a un array vuoto,

14:41.200 --> 14:44.450
in modo da inizializzare il tutto.

14:44.450 --> 14:45.510
Ora, se salviamo questo

14:45.510 --> 14:47.780
file, dovrebbe essere compilato senza errori.

14:47.780 --> 14:50.400
E se aggiungiamo qualcosa

14:50.400 --> 14:51.993
qui, funziona?

14:53.480 --> 14:56.270
In effetti lo vediamo comparire nei nostri elenchi.

14:56.270 --> 14:58.270
In entrambi gli elenchi al momento, perché

14:58.270 --> 15:00.847
non abbiamo una logica di filtraggio e così via.

15:00.847 --> 15:03.210
È un problema che possiamo risolvere in

15:03.210 --> 15:04.710
seguito, ma funziona, e questo

15:04.710 --> 15:06.220
è l'importante.

15:06.220 --> 15:08.390
Ora, però, anche qui abbiamo un bug.

15:08.390 --> 15:10.260
Se aggiungo un secondo elemento,

15:10.260 --> 15:12.370
duplichiamo l'ultimo elemento

15:12.370 --> 15:13.880
e aggiungiamo i nuovi

15:13.880 --> 15:15.490
elementi.

15:15.490 --> 15:17.653
Queste sono tutte cose che affronteremo,

15:17.653 --> 15:21.270
ma ora almeno siamo in grado di produrre qualcosa con questo,

15:21.270 --> 15:24.450
e vediamo tutti i miglioramenti, come essere più

15:24.450 --> 15:27.160
chiari sui tipi che stiamo usando, evitare

15:27.160 --> 15:30.733
i duplicati e molte altre cose.
