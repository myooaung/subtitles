WEBVTT

00:02.260 --> 00:05.180
Instruktur: Sekarang, jika kita kembali ke antarmuka ini,

00:05.180 --> 00:08.230
pertanyaannya adalah, mengapa kita memerlukan ini?

00:08.230 --> 00:10.160
Bukankah kita akan mengalami hal yang

00:10.160 --> 00:13.420
sama persis jika kita menambahkan tipe kustom di sana-sini?

00:13.420 --> 00:15.580
Perbedaannya adalah kita harus menambahkan tanda

00:15.580 --> 00:18.470
sama dengan dan kemudian kita mengatakan tipe Person adalah objek

00:18.470 --> 00:19.940
yang terlihat seperti ini?

00:19.940 --> 00:21.490
Dan memang, jika kita menyimpannya,

00:21.490 --> 00:23.220
itu dikompilasi tanpa kesalahan.

00:23.220 --> 00:26.740
Jadi kita bisa mengganti antarmuka kita dengan tipe tersebut dan

00:26.740 --> 00:28.490
berfungsi seperti sebelumnya.

00:28.490 --> 00:31.290
Jadi, mengapa kita memiliki antarmuka?

00:31.290 --> 00:32.277
Nah, antarmuka dan

00:32.277 --> 00:35.310
tipe kustom tidak persis sama sementara sering kali,

00:35.310 --> 00:39.260
Anda dapat menggunakannya secara bergantian dan Anda dapat menggunakan

00:39.260 --> 00:43.520
antarmuka alih-alih tipe kustom atau sebaliknya.

00:43.520 --> 00:45.720
Ada juga beberapa perbedaan.

00:45.720 --> 00:47.400
Nah, salah satu perbedaan alamiahnya

00:47.400 --> 00:49.070
adalah bahwa interface hanya dapat digunakan

00:49.070 --> 00:51.470
untuk mendeskripsikan struktur objek, Anda dapat menggunakan

00:51.470 --> 00:53.780
tipe untuk itu juga, tetapi alih-alih tipe khusus,

00:53.780 --> 00:55.250
Anda juga dapat menyimpan hal-hal

00:55.250 --> 00:56.800
lain seperti tipe union dan sebagainya

00:56.800 --> 01:00.350
seperti yang kita lakukan di awal kursus.

01:00.350 --> 01:03.740
Kedengarannya seperti tipe yang lebih fleksibel,

01:03.740 --> 01:08.510
tetapi sisi lain dari koin adalah bahwa antarmuka lebih jelas.

01:08.510 --> 01:10.870
Ketika Anda mendefinisikan sesuatu sebagai

01:10.870 --> 01:12.900
antarmuka, sangat jelas bahwa Anda ingin

01:12.900 --> 01:15.580
mendefinisikan struktur objek dengan itu.

01:15.580 --> 01:18.360
Dan memang dalam hal mendefinisikan tipe objek, Anda

01:18.360 --> 01:21.630
lebih sering melihat antarmuka di luar sana di alam liar.

01:21.630 --> 01:23.800
Kemudian, Anda melihat tipe kustom.

01:23.800 --> 01:26.410
Sekarang, hal lain yang dapat Anda lakukan dengan interface

01:26.410 --> 01:27.530
tetapi Anda hanya dapat

01:27.530 --> 01:30.090
melakukannya dengan tipe kustom adalah Anda dapat

01:30.090 --> 01:33.360
mengimplementasikan interface dalam sebuah kelas.

01:33.360 --> 01:34.820
Apa yang kita maksud dengan itu?

01:34.820 --> 01:38.360
Alasan mengapa Anda sering bekerja dengan antarmuka adalah

01:38.360 --> 01:40.550
karena antarmuka dapat digunakan sebagai

01:40.550 --> 01:43.750
kontrak yang dapat diimplementasikan oleh kelas dan

01:43.750 --> 01:46.400
kelas harus mematuhinya.

01:46.400 --> 01:48.150
Apa yang kami maksudkan dengan itu?

01:48.150 --> 01:52.390
Katakanlah interface kita bukan interface Person

01:52.390 --> 01:53.970
dengan nama dan umur,

01:53.970 --> 01:57.690
tetapi kita menamakannya Greetable.

01:57.690 --> 01:59.270
Sekarang ini mungkin terlihat

01:59.270 --> 02:01.090
seperti nama yang aneh tetapi pada

02:01.090 --> 02:03.560
akhirnya ini hanya mengatakan bahwa setiap objek

02:03.560 --> 02:06.310
yang harus diperlakukan sebagai Greetable haruslah

02:06.310 --> 02:09.251
objek dengan nama dan dengan metode greet.

02:09.251 --> 02:10.783
Jadi sekarang, kita bisa mengatakan

02:10.783 --> 02:14.630
ini di sini, variabel user1 ini harus memegang objek Greetable dan tentu saja

02:14.630 --> 02:16.730
sekarang kita mendapatkan error karena

02:16.730 --> 02:19.930
kita memiliki lebih dari sekedar nama dan sapaan.

02:19.930 --> 02:22.000
Tetapi kita bisa menggunakan interface

02:22.000 --> 02:25.860
ini untuk membaginya di antara beberapa kelas, kita harus memastikan

02:25.860 --> 02:27.410
bahwa setiap kelas yang mengikuti

02:27.410 --> 02:30.860
interface ini harus memiliki properti nama dan harus memiliki

02:30.860 --> 02:33.410
metode greet.

02:33.410 --> 02:35.730
Jadi di sini, kita sekarang bisa menambahkan kelas Person, namanya

02:35.730 --> 02:36.970
sudah tersedia lagi karena kita

02:36.970 --> 02:38.540
mengganti nama interface-nya.

02:38.540 --> 02:40.790
Dan sekarang, beritahu typescript

02:40.790 --> 02:45.480
dan kelas ini pada dasarnya harus mematuhi antarmuka ini.

02:45.480 --> 02:48.350
Ini harus mengimplementasikan antarmuka ini.

02:48.350 --> 02:53.000
Ini harus mengikuti pengaturan kontrak oleh antarmuka ini.

02:53.000 --> 02:55.260
Kita melakukan ini dengan menambahkan kata kunci

02:55.260 --> 02:56.930
implements setelah nama kelas.

02:56.930 --> 02:59.280
Dan kemudian, nama antarmuka kita, Greetable.

03:00.420 --> 03:02.780
Dan Anda bisa mengimplementasikan lebih dari satu antarmuka.

03:02.780 --> 03:04.710
Itu adalah perbedaan dibandingkan dengan warisan.

03:04.710 --> 03:07.270
Anda dapat mewarisi hanya dari satu kelas, Anda

03:07.270 --> 03:09.370
dapat mengimplementasikan beberapa interface

03:09.370 --> 03:12.730
hanya dengan memisahkannya dengan koma, jadi di sana, kita bisa

03:12.730 --> 03:16.000
memiliki interface lain jika kita memilikinya.

03:16.000 --> 03:17.710
Di sini, saya hanya punya satu.

03:17.710 --> 03:20.350
Dan sekarang, implikasi dari hal ini adalah kita

03:20.350 --> 03:21.740
mendapatkan error di sini

03:21.740 --> 03:25.200
karena kelas kita salah mengimplementasikan interface.

03:25.200 --> 03:27.240
Tidak memiliki properti nama,

03:27.240 --> 03:29.690
tidak memiliki metode greet.

03:29.690 --> 03:33.960
Jadi sekarang, kita harus mengatur ini di sini di kelas kita, mungkin saya

03:33.960 --> 03:35.610
akan mengatur konstruktor

03:35.610 --> 03:38.173
di mana kita mendapatkan nilai untuk nama,

03:39.010 --> 03:41.260
dan kemudian mengaturnya seperti ini,

03:41.260 --> 03:44.380
dan di mana kita juga menambahkan metode salam kita di

03:44.380 --> 03:48.080
mana kita mungkin memiliki logika ini dari luar sana.

03:48.080 --> 03:50.780
Sekarang, di kelas kami, kami bisa memiliki lebih dari itu.

03:50.780 --> 03:52.340
Kita bisa memiliki lebih banyak

03:52.340 --> 03:53.920
field, kita bisa memiliki lebih

03:53.920 --> 03:56.030
banyak method, kita juga bisa meng-extend

03:56.030 --> 03:59.170
class ini, kita bisa bekerja dengan class ini seperti biasa.

03:59.170 --> 04:02.640
Tetapi kita dipaksa untuk mengimplementasikan metode ini dengan benar

04:02.640 --> 04:04.400
untuk memiliki properti nama ini karena

04:04.400 --> 04:07.040
kita mengimplementasikan antarmuka ini.

04:07.040 --> 04:09.740
Dan oleh karena itu, antarmuka sering digunakan

04:09.740 --> 04:13.870
untuk berbagi fungsionalitas di antara kelas-kelas yang berbeda, bukan

04:13.870 --> 04:16.550
mengenai implementasi konkretnya.

04:16.550 --> 04:19.240
Anda tidak dapat memiliki implementasi atau

04:19.240 --> 04:22.450
nilai di dalam antarmuka tetapi mengenai struktur, mengenai

04:22.450 --> 04:24.980
fitur yang harus dimiliki kelas.

04:24.980 --> 04:28.120
Ini sedikit seperti bekerja dengan kelas abstrak, oleh

04:28.120 --> 04:29.640
karena itu, perbedaannya

04:29.640 --> 04:33.520
adalah bahwa antarmuka tidak memiliki detail implementasi sama sekali,

04:33.520 --> 04:37.160
sedangkan kelas abstrak dapat berupa campuran Anda harus menimpa

04:37.160 --> 04:39.330
bagian-bagian ini dan saya memiliki

04:39.330 --> 04:42.470
bagian implementasi yang konkret.

04:42.470 --> 04:43.730
Itulah perbedaan penting

04:43.730 --> 04:46.860
antara interface dan kelas abstrak.

04:46.860 --> 04:47.850
Namun, sekarang dengan

04:47.850 --> 04:49.790
itu, kita memiliki kelas orang kita di sini.

04:49.790 --> 04:53.910
Dan sekarang di sini, user1 dapat dibuat dengan menggunakan

04:53.910 --> 04:55.930
new Person dan memasukkan

04:55.930 --> 04:58.090
nama misalnya.

04:58.090 --> 04:59.730
Dan sekarang, gunakan lihat tidak

04:59.730 --> 05:02.300
apa-apa bahwa kita memiliki usia ini di sini di

05:02.300 --> 05:05.870
user1 karena kita boat user1 berdasarkan Person, Person mengimplementasikan

05:05.870 --> 05:07.540
Greetable, dan Anda dapat menambahkan

05:07.540 --> 05:10.440
lebih dari Greetable dalam kelas tetapi Anda harus

05:10.440 --> 05:15.120
memenuhi kondisi yang diatur oleh antarmuka.

05:15.120 --> 05:17.130
Dan oleh karena itu sekarang, jika kita menyimpan

05:17.130 --> 05:18.730
semuanya, kita memiliki kode yang valid,

05:18.730 --> 05:23.040
dan jika kita log user1 kita di sana dengan console. log, kita melihat bahwa itu adalah

05:23.040 --> 05:25.430
objek normal dengan usia dan nama dalam

05:25.430 --> 05:27.590
kasus ini, tetapi kunci utamanya adalah

05:27.590 --> 05:30.950
bahwa itu didasarkan pada kelas yang mengimplementasikan

05:30.950 --> 05:32.770
antarmuka.

05:32.770 --> 05:35.550
Dan Anda semua bisa menggunakan antarmuka sebagai sebuah tipe.

05:35.550 --> 05:37.780
Tentu saja, kita bisa saja mengatur ini ke tipe Person,

05:37.780 --> 05:40.580
tetapi seperti yang Anda lihat, menggunakan tipe Greetable di

05:40.580 --> 05:42.200
sini berfungsi karena objek Person yang

05:42.200 --> 05:45.090
kita simpan di kelas user1 pada akhirnya didasarkan pada antarmuka

05:45.090 --> 05:46.300
Greetable.

05:46.300 --> 05:47.750
Ini mengimplementasikan hal ini.

05:47.750 --> 05:49.820
Jadi, itu adalah fitur dahsyat lainnya.

05:49.820 --> 05:53.690
Anda dapat menggunakan antarmuka sebagai tipe pada beberapa konstanta

05:53.690 --> 05:58.010
atau variabel yang kemudian akan benar-benar menyimpan kelas lain dari tipe

05:58.010 --> 06:03.950
lain yang pada gilirannya didasarkan pada tipe antarmuka karena mengimplementasikannya.

06:03.950 --> 06:06.530
Jadi, itulah antarmuka secara singkat.

06:06.530 --> 06:08.643
Banyak fitur canggih yang disertakan.
