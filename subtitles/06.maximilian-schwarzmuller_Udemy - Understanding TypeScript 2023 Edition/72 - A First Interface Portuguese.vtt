WEBVTT

00:02.802 --> 00:04.030
Instrutor: Agora que cobrimos

00:04.030 --> 00:05.910
as aulas, vamos dar uma olhada nas interfaces.

00:05.910 --> 00:09.510
Vamos renomear o arquivo app ts para classes e adicionar um novo

00:09.510 --> 00:11.230
arquivo app ts, enquanto que daqui

00:11.230 --> 00:13.730
em diante será compilado para app js.

00:13.730 --> 00:15.130
E neste arquivo de aplicação,

00:15.130 --> 00:17.026
vamos agora mergulhar em interfaces.

00:17.026 --> 00:19.850
O que é uma interface?

00:19.850 --> 00:21.640
Bem, em sua versão mais simples,

00:21.640 --> 00:25.470
uma interface descreve a estrutura de um objeto.

00:25.470 --> 00:28.502
Podemos utilizá-lo para descrever como um objeto deve ser.

00:28.502 --> 00:29.856
Deixe-me mostrar-lhe um exemplo.

00:29.856 --> 00:32.990
Criamos uma interface com a palavra-chave interface,

00:32.990 --> 00:37.510
que só existe em datilografia, e não em baunilha JavaScript.

00:37.510 --> 00:39.600
Agora vamos nomeá-la pessoa.

00:39.600 --> 00:41.140
Mais uma vez, como em uma aula,

00:41.140 --> 00:43.150
começo com um caráter capital, não

00:43.150 --> 00:46.820
um must do, mas uma recomendação e uma convenção.

00:46.820 --> 00:47.910
Agora lá dentro, podemos

00:47.910 --> 00:51.160
definir como uma pessoa deve se parecer com um objeto.

00:51.160 --> 00:52.480
Agora, ao contrário de uma classe,

00:52.480 --> 00:54.930
no entanto, não usaremos isto como uma planta.

00:54.930 --> 00:57.543
Como um tipo personalizado, poderíamos dizer.

00:58.490 --> 01:00.690
Aqui, você poderia dizer que uma pessoa poderia

01:00.690 --> 01:01.860
ter um nome, que é do tipo

01:01.860 --> 01:04.300
string, e uma idade que é do tipo número.

01:04.300 --> 01:05.140
Como você pode ver

01:05.140 --> 01:08.020
aqui, eu adiciono propriedades ou definições de campo,

01:08.020 --> 01:09.970
onde tenho os nomes das propriedades

01:09.970 --> 01:13.440
e os tipos dos valores que serão armazenados ali.

01:13.440 --> 01:16.560
O que não temos aqui são os valores concretos.

01:16.560 --> 01:17.730
Portanto, não temos isto.

01:17.730 --> 01:20.510
E se tentássemos atribuir um valor padrão aqui,

01:20.510 --> 01:21.810
receberíamos um erro

01:21.810 --> 01:25.290
que uma interface não pode ter um inicializador.

01:25.290 --> 01:27.540
Portanto, podemos apenas definir a estrutura,

01:27.540 --> 01:29.610
não os valores concretos.

01:29.610 --> 01:32.930
Também podemos acrescentar aqui um método, saudar, por exemplo.

01:32.930 --> 01:34.470
Agora, assim como com as propriedades,

01:34.470 --> 01:37.440
não acrescentamos aqui o método real, mas apenas

01:37.440 --> 01:39.610
a estrutura, a descrição, por assim

01:39.610 --> 01:41.020
dizer.

01:41.020 --> 01:42.670
Como deve ser.

01:42.670 --> 01:46.600
E para definir um método que uma pessoa objeto deve ter, adicionamos

01:46.600 --> 01:49.470
o nome do método, depois parênteses, depois tipo

01:49.470 --> 01:50.920
de retorno.

01:50.920 --> 01:52.210
Por exemplo, branco, e entre

01:52.210 --> 01:53.260
parênteses, você poderia

01:53.260 --> 01:55.310
ter qualquer argumento que quisesse ter.

01:55.310 --> 01:57.740
Como uma frase que deveria ser um tipo.

01:57.740 --> 02:01.920
Mais uma vez, apenas o nome do argumento e depois o tipo.

02:01.920 --> 02:03.610
Em seguida, o tipo de retorno do método.

02:03.610 --> 02:06.450
Naturalmente, não é necessário acrescentar parâmetros.

02:06.450 --> 02:09.080
O que podemos fazer agora com esta interface de pessoa?

02:09.080 --> 02:11.360
Qual é a idéia por trás disso?

02:11.360 --> 02:12.610
Bem, agora podemos usar isto

02:12.610 --> 02:14.810
para digitar, por exemplo, verificar um objeto.

02:14.810 --> 02:18.020
Poderíamos ter uma variável, uma de usuário, e

02:18.020 --> 02:19.130
digamos que por alguma

02:19.130 --> 02:22.620
razão não inicializamos imediatamente.

02:22.620 --> 02:25.660
Só queremos eventualmente armazenar um

02:25.660 --> 02:28.490
objeto ali, que tem esta estrutura.

02:28.490 --> 02:30.710
Então podemos atribuir um tipo ao usuário, que

02:30.710 --> 02:31.830
pode ser uma pessoa.

02:31.830 --> 02:34.604
Podemos usar nossa interface como um tipo.

02:34.604 --> 02:38.410
E agora quando atribuo um valor ao usuário, ele tem que ser

02:38.410 --> 02:39.730
um objeto porque as interfaces

02:39.730 --> 02:42.780
são usadas para definir objetos.

02:42.780 --> 02:45.560
E tem que ser um objeto com uma propriedade de

02:45.560 --> 02:47.190
nome, que deve conter um cordel,

02:47.190 --> 02:49.850
uma propriedade de idade, que deve conter um

02:49.850 --> 02:53.102
número, e um método de saudação, que deve pegar um argumento

02:53.102 --> 02:56.920
de frase e depois também não devolver nada.

02:56.920 --> 02:57.830
Aqui, neste objeto,

02:57.830 --> 02:59.360
podemos acrescentar um nome.

02:59.360 --> 03:00.730
Max, por exemplo.

03:00.730 --> 03:03.010
Agora aqui adicionamos o valor concreto

03:03.010 --> 03:06.310
e ele tem que ser daquele tipo definido lá em cima.

03:06.310 --> 03:08.160
Agora separado com uma vírgula, e isso

03:08.160 --> 03:11.110
é uma diferença de nossa definição de interface.

03:11.110 --> 03:16.110
Ali separamos nossas chaves e propriedades com ponto-e-vírgula.

03:16.470 --> 03:18.430
Mas lá embaixo, quando criamos nosso objeto,

03:18.430 --> 03:21.390
assim como no JavaScript de baunilha, usamos uma vírgula.

03:21.390 --> 03:25.570
Depois uma idade e, é claro, também o método de saudação.

03:25.570 --> 03:27.550
Agora o método de saudação, como

03:27.550 --> 03:32.020
você aprendeu, tem que ser um método que toma um parâmetro, frase, que tem

03:32.020 --> 03:33.790
que ser uma corda, e onde eu então

03:33.790 --> 03:36.134
quero consolar a frase de registro mais

03:36.134 --> 03:41.134
algum espaço branco mais isto. nome.

03:41.210 --> 03:43.930
Esta poderia ser uma implementação do método de saudação.

03:43.930 --> 03:45.670
Agora o que está lá dentro não importa.

03:45.670 --> 03:48.210
Só é importante que tenhamos este único parâmetro,

03:48.210 --> 03:49.270
que é um fio, e que não

03:49.270 --> 03:51.290
devolvamos nada.

03:51.290 --> 03:54.090
Agora este seria um objeto válido para um usuário

03:54.090 --> 03:58.150
porque satisfaz esta definição de nossa interface.

03:58.150 --> 03:59.040
Portanto, é claro

03:59.040 --> 04:00.940
que agora podemos, por exemplo,

04:00.940 --> 04:04.020
chamar a saudação e dizer oi lá, eu sou, e depois

04:04.020 --> 04:06.220
devemos imprimir o nome.

04:06.220 --> 04:08.300
Se agora salvar isso e depois recarregar,

04:08.300 --> 04:10.330
vemos oi lá estou Max.

04:10.330 --> 04:12.840
E isso vem de nosso método de saudação.

04:12.840 --> 04:14.090
Esta é uma interface.

04:14.090 --> 04:18.280
Ele nos permite definir a estrutura de um objeto.

04:18.280 --> 04:21.140
Podemos utilizá-lo como um tipo para digitar a

04:21.140 --> 04:24.453
verificação de objetos que devem ter esta estrutura.
