WEBVTT

00:02.260 --> 00:05.180
Instruktor: Teraz, jeśli wrócimy do tego interfejsu

00:05.180 --> 00:08.230
tutaj, pytanie brzmi, dlaczego potrzebujemy tego?

00:08.230 --> 00:10.160
Czy nie mielibyśmy dokładnie tego

00:10.160 --> 00:13.420
samego, gdybyśmy dodali niestandardowy typ tu i tam?

00:13.420 --> 00:15.580
Różnica jest tylko taka, że musimy dodać

00:15.580 --> 00:18.470
znak równości i wtedy mówimy, że typ Person to obiekt,

00:18.470 --> 00:19.940
który wygląda tak?

00:19.940 --> 00:21.490
I rzeczywiście, jeśli to zapiszemy,

00:21.490 --> 00:23.220
to kompiluje się bez błędów.

00:23.220 --> 00:26.740
Moglibyśmy więc zastąpić nasz interfejs takim typem i działa

00:26.740 --> 00:28.490
on tak jak wcześniej.

00:28.490 --> 00:31.290
Dlaczego więc mamy interfejs?

00:31.290 --> 00:32.277
Cóż, interfejs

00:32.277 --> 00:35.310
i typ niestandardowy nie są dokładnie takie same

00:35.310 --> 00:39.260
podczas gdy często, możesz używać ich zamiennie i możesz użyć

00:39.260 --> 00:42.130
interfejsu zamiast typu niestandardowego

00:42.130 --> 00:43.520
lub na odwrót.

00:43.520 --> 00:45.720
Są też pewne różnice.

00:45.720 --> 00:47.400
Cóż, jedna różnica w naturze polega

00:47.400 --> 00:49.070
na tym, że interfejsy mogą być używane

00:49.070 --> 00:51.470
tylko do opisywania struktury obiektu, możesz użyć

00:51.470 --> 00:53.780
typu również do tego, ale zamiast niestandardowego

00:53.780 --> 00:55.250
typu, możesz również przechowywać

00:55.250 --> 00:56.800
inne rzeczy, takie jak typy unii

00:56.800 --> 01:00.350
i tak dalej, co zrobiliśmy na początku kursu.

01:00.350 --> 01:03.740
Brzmi to jak typ, dlatego jest bardziej elastyczny, ale

01:03.740 --> 01:08.510
druga strona medalu jest taka, że interfejs jest bardziej przejrzysty.

01:08.510 --> 01:10.870
Kiedy definiujesz coś jako interfejs,

01:10.870 --> 01:12.900
jest super jasne, że chcesz zdefiniować

01:12.900 --> 01:15.580
strukturę obiektu za pomocą tego.

01:15.580 --> 01:18.360
I rzeczywiście, jeśli chodzi o definiowanie typów

01:18.360 --> 01:21.630
obiektów, częściej widzisz interfejsy tam na wolności.

01:21.630 --> 01:23.800
Następnie widzisz niestandardowe typy.

01:23.800 --> 01:26.410
Teraz, inną rzeczą, którą możesz zrobić z interfejsami,

01:26.410 --> 01:27.530
ale byłbyś w stanie zrobić

01:27.530 --> 01:30.090
tylko z niestandardowymi typami, jest to, że możesz

01:30.090 --> 01:33.360
zaimplementować interfejs w klasie.

01:33.360 --> 01:34.820
Co przez to rozumiemy?

01:34.820 --> 01:38.360
Powodem, dla którego często pracujesz z interfejsami,

01:38.360 --> 01:40.550
jest to, że interfejs może być użyty

01:40.550 --> 01:43.750
jako umowa, którą klasa może zaimplementować, a klasa

01:43.750 --> 01:46.400
następnie musi przestrzegać.

01:46.400 --> 01:48.150
Co mamy na myśli mówiąc o tym?

01:48.150 --> 01:52.390
Powiedzmy, że nasz interfejs nie jest interfejsem Person

01:52.390 --> 01:53.970
z nazwą i wiekiem, ale

01:53.970 --> 01:57.690
zamiast tego nazywamy go Greetable.

01:57.690 --> 01:59.270
Teraz może to wyglądać jak

01:59.270 --> 02:01.090
dziwna nazwa, ale w końcu to

02:01.090 --> 02:03.560
po prostu mówi, że każdy obiekt, który

02:03.560 --> 02:06.310
powinien być traktowany jako Greetable musi

02:06.310 --> 02:09.251
być obiektem z nazwą i z metodą greet.

02:09.251 --> 02:10.783
Więc teraz moglibyśmy powiedzieć

02:10.783 --> 02:14.630
to tutaj, ta zmienna user1 powinna trzymać obiekt Greetable i oczywiście

02:14.630 --> 02:16.730
teraz dostajemy błąd, ponieważ mamy

02:16.730 --> 02:19.930
więcej niż tylko name i greet.

02:19.930 --> 02:22.000
Ale moglibyśmy użyć tego interfejsu

02:22.000 --> 02:25.860
do współdzielenia go pomiędzy ewentualnie wieloma klasami musimy

02:25.860 --> 02:27.410
zapewnić, że każda klasa,

02:27.410 --> 02:30.860
która przestrzega tego interfejsu musi mieć właściwość

02:30.860 --> 02:33.410
name i musi mieć metodę greet.

02:33.410 --> 02:35.730
Więc tutaj, moglibyśmy teraz dodać klasę Person, nazwa

02:35.730 --> 02:36.970
jest dostępna ponownie, ponieważ

02:36.970 --> 02:38.540
zmieniliśmy nazwę interfejsu.

02:38.540 --> 02:40.790
A teraz powiedz typescript i

02:40.790 --> 02:45.480
ta klasa powinna w zasadzie przylegać do tego interfejsu.

02:45.480 --> 02:48.350
Powinien on zaimplementować ten interfejs.

02:48.350 --> 02:53.000
Powinien on przestrzegać kontraktu ustawionego przez ten interfejs.

02:53.000 --> 02:55.260
Robimy to poprzez dodanie słowa kluczowego

02:55.260 --> 02:56.930
implements po nazwie klasy.

02:56.930 --> 02:59.280
A potem nazwa naszego interfejsu - Greetable.

03:00.420 --> 03:02.780
I możesz zaimplementować więcej niż jeden interfejs.

03:02.780 --> 03:04.710
To jest różnica w porównaniu z dziedziczeniem.

03:04.710 --> 03:07.270
Możesz dziedziczyć tylko z jednej klasy, możesz

03:07.270 --> 03:09.370
zaimplementować wiele interfejsów,

03:09.370 --> 03:12.730
po prostu oddzielając je przecinkiem, więc tam, moglibyśmy

03:12.730 --> 03:14.750
mieć kolejny interfejs, gdybyśmy

03:14.750 --> 03:16.000
go mieli.

03:16.000 --> 03:17.710
Tutaj mam tylko jeden.

03:17.710 --> 03:20.350
I teraz implikacja tego jest taka, że dostajemy

03:20.350 --> 03:21.740
tutaj błąd, ponieważ nasza

03:21.740 --> 03:25.200
klasa niepoprawnie implementuje interfejs.

03:25.200 --> 03:27.240
Nie posiada właściwości name,

03:27.240 --> 03:29.690
nie posiada metody greet.

03:29.690 --> 03:33.960
Więc teraz musimy ustawić to tutaj w naszej klasie, może ustawię

03:33.960 --> 03:35.610
konstruktor, w którym otrzymamy

03:35.610 --> 03:38.173
wartość dla nazwy, a następnie ustawimy

03:39.010 --> 03:41.260
ją w ten sposób, a także gdzie dodamy

03:41.260 --> 03:44.380
naszą metodę greet, gdzie następnie możemy

03:44.380 --> 03:48.080
mieć tę logikę stamtąd.

03:48.080 --> 03:50.780
Teraz, w naszej klasie, możemy mieć tego więcej.

03:50.780 --> 03:52.340
Możemy mieć więcej pól, możemy

03:52.340 --> 03:53.920
mieć więcej metod, możemy

03:53.920 --> 03:56.030
również rozszerzyć tę klasę, możemy

03:56.030 --> 03:59.170
pracować z tą klasą tak, jak zawsze.

03:59.170 --> 04:02.640
Ale jesteśmy zmuszeni do prawidłowego wdrożenia tej metody,

04:02.640 --> 04:04.400
aby mieć tę właściwość nazwy, ponieważ

04:04.400 --> 04:07.040
implementujemy ten interfejs.

04:07.040 --> 04:09.740
I dlatego interfejsy są często używane

04:09.740 --> 04:13.870
do dzielenia funkcjonalności wśród różnych klas nie dotyczących

04:13.870 --> 04:16.550
ich konkretnej implementacji.

04:16.550 --> 04:19.240
Nie możesz mieć implementacji lub wartości wewnątrz

04:19.240 --> 04:22.450
interfejsów, ale w odniesieniu do struktury, w odniesieniu

04:22.450 --> 04:24.980
do cech, które klasa powinna mieć.

04:24.980 --> 04:28.120
Jest to trochę jak praca z klasami abstrakcyjnymi,

04:28.120 --> 04:29.640
dlatego różnica polega

04:29.640 --> 04:33.520
na tym, że interfejs nie ma w ogóle szczegółów implementacji,

04:33.520 --> 04:37.160
podczas gdy klasy abstrakcyjne mogą być mieszanką musisz

04:37.160 --> 04:39.330
nadpisać te części i mam konkretne

04:39.330 --> 04:42.470
części implementacji.

04:42.470 --> 04:43.730
To ważna różnica między

04:43.730 --> 04:46.860
interfejsami a klasami abstrakcyjnymi.

04:46.860 --> 04:47.850
Teraz z tym jednak

04:47.850 --> 04:49.790
mamy tutaj naszą klasę osób.

04:49.790 --> 04:53.910
I teraz tutaj można stworzyć użytkownika1

04:53.910 --> 04:55.930
używając new Person i

04:55.930 --> 04:58.090
podając w nazwie np.

04:58.090 --> 04:59.730
I teraz użyj zobacz, że to

04:59.730 --> 05:02.300
jest w porządku, że mamy ten wiek tutaj

05:02.300 --> 05:05.870
w user1, ponieważ łódka user1 oparta na Person, Person

05:05.870 --> 05:07.540
implementuje Greetable,

05:07.540 --> 05:10.440
i możesz dodać więcej niż Greetable w klasie,

05:10.440 --> 05:15.120
ale musisz spełnić warunki ustawione przez interfejs.

05:15.120 --> 05:17.130
I dlatego teraz, jeśli zapiszemy wszystko, mamy

05:17.130 --> 05:18.730
poprawny kod, a jeśli zalogujemy naszego

05:18.730 --> 05:23.040
użytkownika1 tam na dole za pomocą konsoli. rejestr, widzimy, że jest to normalny

05:23.040 --> 05:25.430
obiekt z wiekiem i nazwą w tym przypadku,

05:25.430 --> 05:27.590
ale kluczowym odbiorem jest to,

05:27.590 --> 05:32.770
że jest on oparty na klasie, która implementuje interfejs.

05:32.770 --> 05:35.550
A następnie możesz wszystkie użyć interfejsu jako typu.

05:35.550 --> 05:37.780
Oczywiście mogliśmy ustawić to na typ Person,

05:37.780 --> 05:40.580
ale jak widzisz, użycie typu Greetable tutaj działa, ponieważ

05:40.580 --> 05:42.200
obiekt Person, który przechowujemy

05:42.200 --> 05:46.300
w klasie user1 na końcu jest oparty na interfejsie Greetable.

05:46.300 --> 05:47.750
Realizuje to.

05:47.750 --> 05:49.820
Jest to więc kolejna potężna funkcja.

05:49.820 --> 05:53.690
Możesz użyć interfejsu jako typu na jakiejś stałej lub zmiennej,

05:53.690 --> 05:58.010
która następnie faktycznie przechowa inną klasę innego typu,

05:58.010 --> 06:02.330
która z kolei jest oparta na typie interfejsu, ponieważ implementuje

06:02.330 --> 06:03.950
go.

06:03.950 --> 06:06.530
Tak więc to są interfejsy w pigułce.

06:06.530 --> 06:08.643
Wiele potężnych funkcji w zestawie.
