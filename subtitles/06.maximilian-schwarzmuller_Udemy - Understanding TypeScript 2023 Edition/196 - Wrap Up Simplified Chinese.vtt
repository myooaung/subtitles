WEBVTT

00:02.320 --> 00:04.290
讲师：这就是这个模块的内容｡ 

00:04.290 --> 00:05.660
您学习了如何在node

00:05.660 --> 00:08.480
express应用程序中使用typescript,

00:08.480 --> 00:11.940
例如, 您可以为express和node安装额外的类型,

00:11.940 --> 00:16.320
以便在文件中获得更好的typescript支持｡

00:16.320 --> 00:19.990
你写应用程序就像你一直写它一样｡

00:19.990 --> 00:21.790
但是, 例如, 您的导入和导出语法不同,

00:21.790 --> 00:23.720
您当然可以使用类型,

00:23.720 --> 00:29.300
以及您了解的任何其他类型脚本特性｡

00:29.300 --> 00:31.080
你可以使用接口, 你可以使用装饰器,

00:31.080 --> 00:33.080
你可以使用eNoms和QPUll,

00:33.080 --> 00:37.840
以及所有打字脚本专有的东西｡

00:37.840 --> 00:42.650
这一切都在这里工作, 因为我们在这里编写一个常规的typescript应用程序,

00:42.650 --> 00:48.050
它通过常规的typescript编译器编译为常规的Javascript代码｡

00:48.050 --> 00:52.750
然后与节点JS一起执行的Javascript代码｡ 

00:52.750 --> 00:54.450
现在如果你想有更多关于如何使用typescript和node

00:54.450 --> 00:58.910
express的例子, 你当然可以, 作为一个例子, 简单地谷歌一下node express

00:58.910 --> 01:02.840
typescript就可以找到更多的例子｡

01:02.840 --> 01:06.980
但是我也强烈建议你检查NestJS｡

01:06.980 --> 01:10.390
是个节点｡  js框架, 它包含了typescript,

01:10.390 --> 01:13.270
同时你可以让node express使用typescript,

01:13.270 --> 01:15.310
正如你在本模块中看到的, 这是一个框架,

01:15.310 --> 01:21.740
它为你提供了项目, 节点项目, 开箱即用的typescript支持｡

01:21.740 --> 01:24.490
它包含了所有这些打印脚本特性,

01:24.490 --> 01:26.960
比如装饰器等等｡

01:26.960 --> 01:30.910
使用NestJS, 您可以构建节点Web应用程序､

01:30.910 --> 01:34.390
其他API, 以及渲染视图或graphQL

01:34.390 --> 01:36.440
API的应用程序｡

01:36.440 --> 01:43.380
您可以使用节点构建所有这些内容｡  js, 但也与typescript和这个项目大量使用的功能,

01:43.380 --> 01:46.950
如装饰器, 接口等｡

01:46.950 --> 01:50.200
因此, 如果您想使用节点和typescript构建服务端Web应用程序,

01:50.200 --> 01:53.580
请务必查看NestJS｡

01:53.580 --> 01:56.660
这 是 一 个 很 棒 的 框架 , 使用 起来 很 有趣 , 并且 使用

01:56.660 --> 02:00.350
了 typescript 提供 的 所有 很 酷 的 功能 ｡

02:00.350 --> 02:05.310
因此, 不需要自定义类型的安装､ 解决方案或类似的东西｡

02:05.310 --> 02:08.913
在这里, 您可以获得开箱即用的强大打字脚本支持｡ 
