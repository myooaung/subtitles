WEBVTT

00:02.060 --> 00:04.960
Istruttore: Quindi è già tutto per i tipi generici.

00:04.960 --> 00:07.370
Possono essere davvero difficili da capire,

00:07.370 --> 00:10.670
ma alla fine il riassunto che vi ho fornito nell'ultima lezione

00:10.670 --> 00:14.400
è la spiegazione perfetta. Ci offrono flessibilità

00:14.400 --> 00:16.710
e sicurezza di tipo.

00:16.710 --> 00:19.700
Siamo flessibili per quanto riguarda i valori

00:19.700 --> 00:21.660
che passiamo o i valori che usiamo

00:21.660 --> 00:24.960
in una classe, almeno finché ci atteniamo ai possibili

00:24.960 --> 00:26.800
vincoli, che potreste aver

00:26.800 --> 00:30.190
aggiunto, ma abbiamo un supporto completo per il tipo

00:30.190 --> 00:34.500
che poi facciamo con la classe o con il risultato di una funzione generica,

00:34.500 --> 00:38.720
perché TypeScript sa quale tipo concreto passiamo quando chiamiamo

00:38.720 --> 00:41.640
la funzione qui o quando istanziamo la classe

00:41.640 --> 00:44.360
qui.

00:44.360 --> 00:46.680
Qui impostiamo un tipo concreto, ma

00:46.680 --> 00:49.970
non blocchiamo questa classe o questa funzione a quel

00:49.970 --> 00:52.600
tipo concreto quando la creiamo.

00:52.600 --> 00:55.540
Invece, siamo flessibili e potremmo fornire solo

00:55.540 --> 00:58.090
alcuni vincoli e, naturalmente, questi

00:58.090 --> 01:02.350
vincoli sono tutti opzionali e si potrebbero avere alcune classi generiche

01:02.350 --> 01:04.800
o funzioni generiche che non hanno vincoli

01:04.800 --> 01:07.510
e altre che ne hanno molti.

01:07.510 --> 01:09.960
I tipi generici sono quindi una caratteristica molto utile.

01:09.960 --> 01:12.700
Con promise e array, vi ho mostrato due dei molti tipi

01:12.700 --> 01:15.600
generici incorporati e, naturalmente, ne vedremo altri,

01:15.600 --> 01:16.990
compresi i tipi generici

01:16.990 --> 01:20.053
personalizzati, nel corso di questo corso.
