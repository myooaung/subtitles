WEBVTT

00:02.250 --> 00:05.050
Instructor: Ahora, antes de explorar casos de uso más

00:05.050 --> 00:07.811
útiles o un escenario para algunos decoradores.

00:07.811 --> 00:10.700
Quiero mostrarte brevemente todos los otros lugares donde

00:10.700 --> 00:12.550
puedes añadir decoradores.

00:12.550 --> 00:15.670
Bueno, obviamente podemos añadir decoradores a las clases, pero

00:15.670 --> 00:17.731
hay más lugares donde podemos añadirlos.

00:17.731 --> 00:20.750
Para ello crearé una nueva clase, porque necesitamos una clase para

00:20.750 --> 00:22.460
cualquier decorador que queramos utilizar,

00:22.460 --> 00:24.580
pero no tenemos que añadir todos los decoradores

00:24.580 --> 00:26.420
directamente a la clase.

00:26.420 --> 00:28.480
Digamos que tenemos una clase

00:28.480 --> 00:31.523
de producto aquí y en la clase de producto, tenemos

00:31.523 --> 00:34.540
un título tal vez, que es una cadena.

00:34.540 --> 00:37.070
Y podemos asignar un valor aquí con el constructor.

00:37.070 --> 00:39.600
Por supuesto, siempre podemos usar el atajo y hacerlo

00:39.600 --> 00:41.570
todo en un solo paso en un constructor como

00:41.570 --> 00:42.680
aprendiste antes.

00:42.680 --> 00:44.451
Aquí tomaré el camino más largo.

00:44.451 --> 00:49.451
Podemos tener un método aquí, obtener el precio con el impuesto.

00:50.150 --> 00:53.442
Para ello espero obtener un tipo impositivo que es un número y

00:53.442 --> 00:57.150
para que eso funcione también deberíamos almacenar un precio aquí.

00:57.150 --> 01:01.200
Propiedad del precio que también obtenemos como parte del constructor.

01:01.200 --> 01:04.060
De nuevo podríamos usar el atajo aquí,

01:04.060 --> 01:05.340
pero lo haré así.

01:05.340 --> 01:08.120
Y luego en este método

01:08.120 --> 01:13.120
devolveré, Esto. precio multiplicado por uno más impuestos.

01:13.200 --> 01:15.300
Así que tenemos este método de utilidad

01:15.300 --> 01:17.610
y también podemos añadir un getter y un

01:17.610 --> 01:19.090
setter si quieres.

01:19.090 --> 01:22.700
Por ejemplo, podemos añadir un setter para el precio aquí, donde obtenemos

01:22.700 --> 01:25.850
el valor que debe ser un número y donde controlamos que sólo podemos

01:25.850 --> 01:28.231
establecer ciertos valores.

01:28.231 --> 01:32.090
Ahora para hacer que esto funcione, voy a renombrar el precio aquí arriba,

01:32.090 --> 01:35.350
para subrayar el precio y hacerlo privado en realidad, para que

01:35.350 --> 01:37.540
no podamos alcanzarlo directamente.

01:37.540 --> 01:39.970
Y aquí voy a poner este precio subrayado

01:39.970 --> 01:42.580
y aquí voy a usar este precio subrayado.

01:42.580 --> 01:44.800
Y con estos cambios en el setter, podemos establecer

01:44.800 --> 01:48.350
este precio de subrayado igual al valor que obtenemos.

01:48.350 --> 01:51.290
Pero antes de hacerlo, podemos comprobar si

01:51.290 --> 01:52.770
el valor es mayor que cero,

01:52.770 --> 01:55.630
para no aceptar precios negativos.

01:55.630 --> 01:57.220
Así que con eso, sólo fijamos el precio

01:57.220 --> 02:00.159
si es mayor que cero, de lo contrario no hacemos nada.

02:00.159 --> 02:04.330
De hecho, podríamos lanzar un error en el otro caso.

02:04.330 --> 02:08.389
El precio inválido debe ser positivo.

02:08.389 --> 02:11.350
Así que eso es algo que podemos hacer, ahora tenemos

02:11.350 --> 02:14.020
una clase con dos propiedades, con un accesorio

02:14.020 --> 02:16.700
y también con un método aquí y este método tiene

02:16.700 --> 02:18.570
un parámetro.

02:18.570 --> 02:21.180
Ahora, a todas estas cosas podemos añadir decoradores

02:21.180 --> 02:25.910
y vamos a empezar con un buen viejo amigo, un decorador de troncos.

02:25.910 --> 02:28.960
Aquí lo llamaré log para no desentonar con logger allá arriba, porque

02:28.960 --> 02:30.650
este decorador de log, no será añadido

02:30.650 --> 02:31.960
a una clase y por lo tanto obtendrá

02:31.960 --> 02:33.770
argumentos diferentes.

02:33.770 --> 02:35.671
Sin embargo, obtendrá argumentos,

02:35.671 --> 02:38.580
y qué argumentos obtiene el decorador, depende

02:38.580 --> 02:40.030
de dónde lo añadas.

02:40.030 --> 02:41.960
Por eso no puedo reutilizar el logger,

02:41.960 --> 02:45.700
ya que fue ajustado para que sólo funcionara con clases.

02:45.700 --> 02:48.100
Ahora bien, aquí no tengo una fábrica de decoradores

02:48.100 --> 02:49.980
en realidad, sólo tengo que decorar una función

02:49.980 --> 02:53.510
como ésta, pero aun así, los argumentos que recibe esta función decoradora,

02:53.510 --> 02:55.230
dependen de dónde la usemos.

02:55.230 --> 02:58.750
Por ejemplo, podemos añadir un decorador a una propiedad.

02:58.750 --> 03:01.120
Aquí puedo añadir un registro como este y

03:01.120 --> 03:03.840
si añades un decorador a una propiedad, el decorador

03:03.840 --> 03:05.759
recibe dos argumentos.

03:05.759 --> 03:09.830
El primer argumento, es el objetivo de la propiedad y para una propiedad

03:09.830 --> 03:12.010
de instancia como esta, que llamamos

03:12.010 --> 03:15.290
en una instancia si se trabaja con ella.

03:15.290 --> 03:19.490
Este será el prototipo del objeto creado.

03:19.490 --> 03:22.140
Si tuviéramos una propiedad estática aquí, el objetivo

03:22.140 --> 03:24.850
se referiría al estado de la función constructora.

03:24.850 --> 03:27.770
Aquí diré cualquiera porque no sé exactamente

03:27.770 --> 03:30.140
qué estructura tendrá el objeto.

03:30.140 --> 03:35.140
El segundo argumento que obtenemos, es el nombre de la propiedad simplemente.

03:35.290 --> 03:37.682
Aquí podría ser una cadena, por supuesto

03:37.682 --> 03:40.400
también podría ser un símbolo.

03:40.400 --> 03:43.470
No sabemos qué utilizamos como identificador de la propiedad.

03:43.470 --> 03:48.037
Y luego aquí voy a registrar la propiedad decorador, para que

03:49.130 --> 03:51.120
podamos ver cuando esto se

03:51.120 --> 03:55.980
ejecuta y quiero una consola. objetivo del registro y también el nombre de la propiedad.

03:55.980 --> 03:57.780
Para que veamos lo que hay en estos dos valores.

03:57.780 --> 04:01.280
Con eso si guardamos para que compile sin errores,

04:01.280 --> 04:03.080
y si vamos a nuestro servidor,

04:03.080 --> 04:06.871
vemos, la propiedad decorador se imprime allí.

04:06.871 --> 04:08.630
Y este es el resultado que obtenemos.

04:08.630 --> 04:13.220
Vemos aquí que es el prototipo de nuestro objeto porque no estamos

04:13.220 --> 04:15.850
viendo el título y el precio aquí.

04:15.850 --> 04:18.160
Pero sí vemos que el precio con el impuesto

04:18.160 --> 04:19.770
y, de hecho, los métodos se registran

04:19.770 --> 04:21.900
en el prototipo de un objeto.

04:21.900 --> 04:24.240
Así que ese es el prototipo de nuestro objeto y vemos

04:24.240 --> 04:26.640
el título aquí a la derecha, ese es el nombre de la propiedad

04:26.640 --> 04:28.943
con la que estamos trabajando.

04:29.800 --> 04:33.770
Ahora bien, ¿cuándo se ejecuta exactamente este registrador?

04:33.770 --> 04:37.880
Bueno, como se puede ver, ya que nunca instanciar cualquier producto,

04:37.880 --> 04:41.670
se ejecuta básicamente cuando su definición de la clase se

04:41.670 --> 04:43.980
registra por JavaScript.

04:43.980 --> 04:47.660
Así que se ejecuta cuando se define esta propiedad básicamente

04:47.660 --> 04:49.140
a JavaScript, como parte

04:49.140 --> 04:50.960
de su clase aquí, como parte de

04:50.960 --> 04:52.970
esta función constructora.

04:52.970 --> 04:54.610
Que se crea aquí al final.

04:54.610 --> 04:58.053
Esto es cuando este decorador de propiedades se ejecuta.
