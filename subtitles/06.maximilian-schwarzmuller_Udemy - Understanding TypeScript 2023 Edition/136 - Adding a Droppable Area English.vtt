WEBVTT

1
00:00:02.180 --> 00:00:04.910
<v Instructor>Visually, we are able to drag and drop</v>

2
00:00:04.910 --> 00:00:07.240
but technically in JavaScript of course,

3
00:00:07.240 --> 00:00:10.410
our script has no idea of what's happening.

4
00:00:10.410 --> 00:00:12.030
But to us humans of course, it's clear

5
00:00:12.030 --> 00:00:14.810
that we're dragging this exact item here.

6
00:00:14.810 --> 00:00:16.300
But if we have a look at our code,

7
00:00:16.300 --> 00:00:20.320
how would JavaScript know what's getting dragged where?

8
00:00:20.320 --> 00:00:21.980
How would we update our state

9
00:00:21.980 --> 00:00:24.440
based on the information we have right now?

10
00:00:24.440 --> 00:00:26.690
It wouldn't really be possible.

11
00:00:26.690 --> 00:00:28.810
So to make that work in JavaScript

12
00:00:28.810 --> 00:00:30.840
we have to go back to the class

13
00:00:30.840 --> 00:00:33.960
of our draggable item, the project item.

14
00:00:33.960 --> 00:00:36.710
There, in the dragStartHandler,

15
00:00:36.710 --> 00:00:38.250
logging the event of the console

16
00:00:38.250 --> 00:00:39.950
isn't everything we should do.

17
00:00:39.950 --> 00:00:42.200
Actually we don't need to do that at all.

18
00:00:42.200 --> 00:00:45.070
Instead, let's now use our event object here

19
00:00:45.070 --> 00:00:48.210
because that has a data transfer property.

20
00:00:48.210 --> 00:00:50.440
This is special for drag events,

21
00:00:50.440 --> 00:00:53.280
that you have such a data transfer property.

22
00:00:53.280 --> 00:00:55.330
And on that property,

23
00:00:55.330 --> 00:00:57.530
you can attach data to the drag event

24
00:00:57.530 --> 00:00:59.520
and you'll later be able to extract

25
00:00:59.520 --> 00:01:01.390
that data upon a drop

26
00:01:01.390 --> 00:01:03.730
and the browser in JavaScript behind the scenes,

27
00:01:03.730 --> 00:01:06.430
will store that data during the drag operation

28
00:01:06.430 --> 00:01:09.470
and ensure that the data you get when the drop happens

29
00:01:09.470 --> 00:01:12.020
is the same data you attach here.

30
00:01:12.020 --> 00:01:15.520
For that you can call, setData, on data transfer,

31
00:01:15.520 --> 00:01:18.910
but data transfer could actually be null.

32
00:01:18.910 --> 00:01:21.080
So we have to add an exclamation mark here,

33
00:01:21.080 --> 00:01:23.460
we of course know that it won't be null here.

34
00:01:23.460 --> 00:01:25.700
You might wonder why could it be null?

35
00:01:25.700 --> 00:01:29.060
Well the drag event is always the same kind of event

36
00:01:29.060 --> 00:01:31.340
but based on which listener triggers it

37
00:01:31.340 --> 00:01:34.190
or which exact event you're listening to,

38
00:01:34.190 --> 00:01:37.520
data transfer is not necessarily available.

39
00:01:37.520 --> 00:01:39.896
So not all drag-related events

40
00:01:39.896 --> 00:01:42.640
give you an event object that has

41
00:01:42.640 --> 00:01:44.073
the data transfer object.

42
00:01:45.320 --> 00:01:46.620
The dragStartHandler

43
00:01:46.620 --> 00:01:49.080
which fires up on the drag start event however,

44
00:01:49.080 --> 00:01:52.840
does have it so here we can safely call setData.

45
00:01:52.840 --> 00:01:56.330
And now setData takes two arguments here.

46
00:01:56.330 --> 00:01:59.900
The first argument is an identifier

47
00:01:59.900 --> 00:02:01.320
of the format of the data,

48
00:02:01.320 --> 00:02:04.970
and there you've got certain possible formats available.

49
00:02:04.970 --> 00:02:08.210
Attached you'll find a deep dive into drag and drop

50
00:02:08.210 --> 00:02:10.890
with JavaScript where you can learn way more about them.

51
00:02:10.890 --> 00:02:12.270
You'll also learn more about it

52
00:02:12.270 --> 00:02:15.140
in my JavaScript Complete Guide course by the way.

53
00:02:15.140 --> 00:02:18.390
Here we need the text/plain format

54
00:02:18.390 --> 00:02:20.010
which means we're just going to attach

55
00:02:20.010 --> 00:02:24.190
some plain text asked data that is transferred,

56
00:02:24.190 --> 00:02:25.430
and that's important.

57
00:02:25.430 --> 00:02:28.250
We're not going to attach our objects here,

58
00:02:28.250 --> 00:02:29.740
our project itself,

59
00:02:29.740 --> 00:02:31.390
we'll just keep getting trapped.

60
00:02:31.390 --> 00:02:34.340
So not the complete project which can be rendered here.

61
00:02:34.340 --> 00:02:37.955
Instead, it actually suffices to attach

62
00:02:37.955 --> 00:02:41.645
the ID of the project because this will later allow us

63
00:02:41.645 --> 00:02:44.870
to fetch that project from our state.

64
00:02:44.870 --> 00:02:47.320
So attaching the ID is all we need to do.

65
00:02:47.320 --> 00:02:50.240
We wanna transfer only a small amount of data,

66
00:02:50.240 --> 00:02:52.053
this will also saves us some memory.

67
00:02:53.100 --> 00:02:56.300
So now with that, we're attaching data to the drag event.

68
00:02:56.300 --> 00:02:58.330
One other thing I wanna do is,

69
00:02:58.330 --> 00:03:00.610
on data transfer where we again,

70
00:03:00.610 --> 00:03:02.340
have to add the exclamation mark,

71
00:03:02.340 --> 00:03:05.430
I'll set the effectAllowed property to move.

72
00:03:05.430 --> 00:03:08.610
This basically controls how the cursor will look,

73
00:03:08.610 --> 00:03:12.440
and tells the browser a little bit about our intention,

74
00:03:12.440 --> 00:03:15.200
that we plan to move an element from A to B.

75
00:03:15.200 --> 00:03:16.760
An alternative could be copy,

76
00:03:16.760 --> 00:03:19.230
where you then get different cursor

77
00:03:19.230 --> 00:03:20.820
which indicates to the user

78
00:03:20.820 --> 00:03:23.120
that you're copying and not moving,

79
00:03:23.120 --> 00:03:25.140
but here we wanna move the element

80
00:03:25.140 --> 00:03:26.580
which means upon a drop,

81
00:03:26.580 --> 00:03:28.810
we remove it on its original place

82
00:03:28.810 --> 00:03:31.360
and add it to the new place.

83
00:03:31.360 --> 00:03:34.940
So now data is attached here and that is step number one.

84
00:03:34.940 --> 00:03:36.870
Let's now go back to the place

85
00:03:36.870 --> 00:03:38.470
where we want the drop to happen,

86
00:03:38.470 --> 00:03:40.360
which is the project list.

87
00:03:40.360 --> 00:03:43.400
There, it starts in the dragLeaveHandler.

88
00:03:43.400 --> 00:03:46.370
Now in this application, in this project here,

89
00:03:46.370 --> 00:03:49.200
we only have one drag and drop operation

90
00:03:49.200 --> 00:03:51.500
and that is our projects here.

91
00:03:51.500 --> 00:03:54.970
In bigger applications you might have different pieces

92
00:03:54.970 --> 00:03:57.220
on the page that can be dragged and dropped

93
00:03:57.220 --> 00:04:01.080
and you don't wanna make everything droppable everywhere.

94
00:04:01.080 --> 00:04:06.080
So therefore, here in the dragOverHandler,

95
00:04:06.230 --> 00:04:09.580
which fires when you enter a draggable area

96
00:04:09.580 --> 00:04:11.860
with an item attached to the mouse,

97
00:04:11.860 --> 00:04:14.970
I wanna check if a drag really is allowed here.

98
00:04:14.970 --> 00:04:19.546
For that, I will check if event.dataTransfer,

99
00:04:19.546 --> 00:04:21.060
here it is available as well,

100
00:04:21.060 --> 00:04:22.950
so if that is available,

101
00:04:22.950 --> 00:04:25.500
and then, if it is available,

102
00:04:25.500 --> 00:04:29.140
the data transfer types property

103
00:04:29.140 --> 00:04:34.140
has a first value which is equal to text/plain.

104
00:04:34.300 --> 00:04:39.280
That simply means, is the data attached to our drag event,

105
00:04:39.280 --> 00:04:42.390
is that of that format?

106
00:04:42.390 --> 00:04:43.360
Which it of course is

107
00:04:43.360 --> 00:04:45.030
because that is the format we set up

108
00:04:45.030 --> 00:04:47.320
in the dragStartHandler here.

109
00:04:47.320 --> 00:04:50.490
So for example, here it would not allow dropping images

110
00:04:50.490 --> 00:04:51.380
or something like that

111
00:04:51.380 --> 00:04:53.180
which would have a different data format.

112
00:04:53.180 --> 00:04:56.173
I've just allowed dropping of plain text.

113
00:04:57.170 --> 00:04:59.450
Of course I now also need to replace

114
00:04:59.450 --> 00:05:01.020
underscore with an event again

115
00:05:01.020 --> 00:05:03.280
because I'm referring to it here.

116
00:05:03.280 --> 00:05:07.150
Now if that is the case then I know I wanna allow a drop

117
00:05:07.150 --> 00:05:09.070
so then I will update the background.

118
00:05:09.070 --> 00:05:11.620
And just one other important thing we gotta do,

119
00:05:11.620 --> 00:05:13.960
you have to call event.preventDefault.

120
00:05:13.960 --> 00:05:15.950
But why do we have to call that?

121
00:05:15.950 --> 00:05:18.860
Because in JavaScript a drag and drop

122
00:05:18.860 --> 00:05:22.480
works such that a drop is actually only allowed,

123
00:05:22.480 --> 00:05:26.119
so the drop event will only trigger on an element,

124
00:05:26.119 --> 00:05:29.649
if in the drag overHandler on that same element

125
00:05:29.649 --> 00:05:32.750
you called preventDefault.

126
00:05:32.750 --> 00:05:35.360
You can think of this as the following.

127
00:05:35.360 --> 00:05:38.870
The default for JavaScript drag and drop events

128
00:05:38.870 --> 00:05:41.350
is to not allow dropping

129
00:05:41.350 --> 00:05:44.889
so you have to prevent default in the drag overHandler

130
00:05:44.889 --> 00:05:48.120
to tell JavaScript and the browser

131
00:05:48.120 --> 00:05:49.670
that for this element,

132
00:05:49.670 --> 00:05:52.980
in this case for this section for this projectless class

133
00:05:52.980 --> 00:05:54.870
you wanna allow a drop.

134
00:05:54.870 --> 00:05:57.920
So only if you do this is a dragOverHandler

135
00:05:57.920 --> 00:06:00.020
the drop event will actually trigger

136
00:06:00.020 --> 00:06:01.220
when the user lets go.

137
00:06:01.220 --> 00:06:02.910
Otherwise if the user lets go,

138
00:06:02.910 --> 00:06:05.060
the drop event will not fire.

139
00:06:05.060 --> 00:06:07.090
So with that, the drop handler will

140
00:06:07.090 --> 00:06:08.960
then eventually execute of course,

141
00:06:08.960 --> 00:06:12.620
because now we are allowing this to happen.

142
00:06:12.620 --> 00:06:16.440
So here in the drop handler we can now accept the event,

143
00:06:16.440 --> 00:06:20.610
and for the moment let's just console.log the event

144
00:06:20.610 --> 00:06:23.003
here like this to see whether this works.

145
00:06:23.940 --> 00:06:28.100
We now save everything, we add a new item here,

146
00:06:28.100 --> 00:06:30.220
and I drag this.

147
00:06:30.220 --> 00:06:33.430
If I drop it here in finished projects

148
00:06:33.430 --> 00:06:36.490
you see this drag event is firing here.

149
00:06:36.490 --> 00:06:39.360
And that's coming from line 236

150
00:06:39.360 --> 00:06:43.050
which indeed is this line in the drop handler.

151
00:06:43.050 --> 00:06:45.950
Now if we inspect the drag event here in the browser,

152
00:06:45.950 --> 00:06:47.447
you see we have a bunch of data in here

153
00:06:47.447 --> 00:06:50.830
and we also have that data transfer property.

154
00:06:50.830 --> 00:06:52.920
And in there you see the effect we allowed,

155
00:06:52.920 --> 00:06:54.320
which is Move,

156
00:06:54.320 --> 00:06:57.930
and you'll also see nothing in there.

157
00:06:57.930 --> 00:07:01.600
Well, only because the data was already cleared

158
00:07:01.600 --> 00:07:04.510
after this was being put into the console.

159
00:07:04.510 --> 00:07:06.100
And since we put in the object here

160
00:07:06.100 --> 00:07:08.160
and objects are reference types,

161
00:07:08.160 --> 00:07:10.830
well, we see the latest snapshot where the data's lost.

162
00:07:10.830 --> 00:07:13.360
Actually at the point of time we are dropping this,

163
00:07:13.360 --> 00:07:16.910
we will be able to extract data from data transfer.

164
00:07:16.910 --> 00:07:18.360
And I can prove this to you.

165
00:07:18.360 --> 00:07:20.960
Of course we can simply access data transfer

166
00:07:20.960 --> 00:07:23.210
and there you have a getData method,

167
00:07:23.210 --> 00:07:26.580
and now we wanna get the data with this text/plain format

168
00:07:26.580 --> 00:07:29.560
and that should be the project ID we attached

169
00:07:29.560 --> 00:07:34.560
to our data transfer package on the project item.

170
00:07:35.060 --> 00:07:37.179
So if we now save this

171
00:07:37.179 --> 00:07:39.690
and we re-add the project here,

172
00:07:39.690 --> 00:07:41.050
and drag this here,

173
00:07:41.050 --> 00:07:46.050
you see this here indeed, is the ID of this project item.

174
00:07:46.600 --> 00:07:47.920
We can see that if we inspect it

175
00:07:47.920 --> 00:07:50.880
because we also add it here as an ID,

176
00:07:50.880 --> 00:07:55.124
0.2167, looks like this ID to me.

177
00:07:55.124 --> 00:07:59.170
So we are successfully transferring the ID.

178
00:07:59.170 --> 00:08:00.490
Now we're almost there.

179
00:08:00.490 --> 00:08:04.100
Now we just have to update our state behind the scenes

180
00:08:04.100 --> 00:08:06.163
and then rerender DUI.

