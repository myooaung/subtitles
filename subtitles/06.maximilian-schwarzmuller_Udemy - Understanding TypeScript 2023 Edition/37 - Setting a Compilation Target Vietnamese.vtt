WEBVTT

00:02.450 --> 00:04.810
Người hướng dẫn: Vì vậy, bây giờ chúng ta đã hiểu về cách

00:04.810 --> 00:07.850
chúng ta có thể quản lý các tệp của mình bằng trình biên dịch, hãy đi

00:07.850 --> 00:09.870
sâu vào các tùy chọn của trình biên dịch, bởi

00:09.870 --> 00:11.300
vì điều đó thực sự thú vị.

00:11.300 --> 00:13.860
Điều này cho phép chúng tôi kiểm soát cách

00:13.860 --> 00:16.620
mã TypeScript của chúng tôi được biên dịch,

00:16.620 --> 00:18.360
do đó, không chỉ các tệp nào

00:18.360 --> 00:20.920
mà còn cả cách các tệp đang được biên dịch

00:20.920 --> 00:23.230
được xử lý bởi TypeScript.

00:23.230 --> 00:26.760
Và ở đó bạn thấy chúng tôi có rất nhiều lựa chọn.

00:26.760 --> 00:29.560
Bạn có giải thích ngắn bên cạnh các tùy chọn này.

00:29.560 --> 00:32.450
Một số lời giải thích được cho là một mật mã lớn.

00:32.450 --> 00:34.210
Những người khác là khá rõ ràng.

00:34.210 --> 00:36.450
Và tôi sẽ nói rằng rất nhiều trong số các tùy chọn

00:36.450 --> 00:39.950
này, hầu hết các tùy chọn này sẽ không quan trọng trong hầu hết các dự án.

00:39.950 --> 00:43.900
Vì vậy, bạn sẽ không đặt tất cả các tùy chọn này, thậm chí không đóng.

00:43.900 --> 00:46.070
Bạn thường có thể bỏ qua rất nhiều tùy chọn này.

00:46.070 --> 00:48.765
Bây giờ tôi sẽ chọn các tùy chọn quan trọng ở đây trong

00:48.765 --> 00:50.230
suốt khóa học này, bởi vì một số

00:50.230 --> 00:52.140
tùy chọn chỉ có ý nghĩa khi chúng ta tìm

00:52.140 --> 00:53.911
hiểu về một tính năng nhất định.

00:53.911 --> 00:55.940
Và tôi muốn đi sâu vào một số tùy

00:55.940 --> 00:57.250
chọn ngay bây giờ.

00:57.250 --> 01:00.840
Và để làm được điều đó, hãy xem qua tệp từ trên xuống dưới và

01:00.840 --> 01:02.340
xem chúng ta có gì ở đó.

01:02.340 --> 01:04.410
Hãy bắt đầu với tùy chọn mục tiêu.

01:04.410 --> 01:07.230
Như bạn thấy, điều này thực sự được đặt theo mặc định.

01:07.230 --> 01:08.750
Nó không được bình luận ra.

01:08.750 --> 01:10.780
Và những gì bạn làm với tùy chọn

01:10.780 --> 01:15.530
này là cho TypeScript biết phiên bản JavaScript mục tiêu mà bạn muốn

01:15.530 --> 01:16.970
biên dịch mã.

01:16.970 --> 01:18.850
Bởi vì những gì TypeScript làm

01:18.850 --> 01:21.600
là nó không chỉ biên dịch các tính năng mới

01:21.600 --> 01:23.500
như chú thích loại không tồn

01:23.500 --> 01:26.960
tại trong JavaScript thành mã JavaScript.

01:26.960 --> 01:29.667
Vì vậy, nó không chỉ quan tâm

01:29.667 --> 01:33.270
rằng điều này ở đây hoạt động.

01:33.270 --> 01:37.530
Nó cũng biên dịch mã thành JavaScript chạy

01:37.530 --> 01:41.370
trong một bộ trình duyệt nhất định.

01:41.370 --> 01:43.798
Và về cơ bản, bạn xác định trình duyệt

01:43.798 --> 01:46.980
nào hỗ trợ mã biên dịch bằng cách đặt mục tiêu.

01:46.980 --> 01:49.520
Mục tiêu mặc định ở đây trong dự án này như bạn

01:49.520 --> 01:52.430
thấy, mục tiêu ban đầu được thiết lập là es5, có nghĩa

01:52.430 --> 01:55.517
là tất cả các loại mã được biên dịch xuống.

01:55.517 --> 01:57.550
Chúng ta thực sự có thể thấy điều đó.

01:57.550 --> 02:00.770
Nếu tôi chạy TSC ở đây để biên dịch tất cả các tệp của mình, chúng tôi

02:00.770 --> 02:03.260
sẽ thấy trong ứng dụng. ts Tôi đang sử dụng let và const,

02:03.260 --> 02:05.732
nhưng trong app. js, chúng tôi thấy var.

02:05.732 --> 02:09.890
Và điều đó xảy ra bởi vì chúng tôi có mục tiêu là es5 và trong

02:09.890 --> 02:13.816
thế giới es5, chúng tôi không có let và const.

02:13.816 --> 02:16.810
Vì vậy, điều tốt ở đây là chúng ta có thể sử dụng TypeScript

02:16.810 --> 02:20.650
để tạo mã hoạt động trong các trình duyệt cũ hơn.

02:20.650 --> 02:22.930
Nhưng nó hoàn toàn tùy thuộc vào việc sử dụng nếu chúng ta muốn làm điều đó.

02:22.930 --> 02:25.550
Có thể chúng tôi không muốn làm điều đó với TypeScript,

02:25.550 --> 02:27.670
bởi vì có thể chúng tôi có một số công cụ xây dựng

02:27.670 --> 02:30.560
khác sau đó sẽ quan tâm đến việc dịch mã JavaScript và do đó

02:30.560 --> 02:33.290
chúng tôi không muốn TypeScript làm điều đó hoặc có thể

02:33.290 --> 02:35.340
chúng tôi chỉ muốn gửi mã đó hoạt động trong

02:35.340 --> 02:37.030
các trình duyệt hiện đại vì chúng tôi

02:37.030 --> 02:41.170
biết ứng dụng của mình sẽ chỉ chạy trong các trình duyệt hiện đại.

02:41.170 --> 02:44.160
Và do đó, các tùy chọn thay thế có thể được nhìn

02:44.160 --> 02:46.070
thấy ở đây nếu bạn xóa giá trị và

02:46.070 --> 02:48.080
ít nhất là ở đây trong vscode, nếu

02:48.080 --> 02:51.300
bạn nhấn Control + Space để tự động hoàn thành, bạn

02:51.300 --> 02:54.180
sẽ thấy một loạt các đề xuất và bạn sẽ thấy tất

02:54.180 --> 02:56.450
cả các giá trị có sẵn ở đây.

02:56.450 --> 02:58.700
Theo thời gian, điều này tất nhiên sẽ thay

02:58.700 --> 03:01.900
đổi vì chúng tôi đã phát hành các phiên bản JavaScript mới.

03:01.900 --> 03:03.785
Bạn đã thấy chúng tôi đặt cái này thành es5 trước đây.

03:03.785 --> 03:06.150
Nếu bạn hoàn toàn không chỉ định mục tiêu, thì

03:06.150 --> 03:09.520
ngay bây giờ, TypeScript thậm chí còn biên dịch thành es3, do

03:09.520 --> 03:12.200
đó, nó hỗ trợ phiên bản thậm chí còn cũ hơn.

03:12.200 --> 03:15.130
Nhưng bạn cũng có thể sử dụng es6, phiên

03:15.130 --> 03:17.510
bản hiện đại hơn, chẳng hạn như hỗ

03:17.510 --> 03:19.310
trợ const và let hoặc take

03:19.310 --> 03:24.310
phiên bản mới hơn, es6 tương đương với es2015, chỉ để ghi lại.

03:24.870 --> 03:27.480
Vì vậy, nếu chúng tôi đặt cái này thành es6 chẳng

03:27.480 --> 03:29.580
hạn, và tôi chạy lại lệnh tsc sau khi thay

03:29.580 --> 03:32.460
đổi tệp tsconfig. json, bạn sẽ thấy tệp đó

03:32.460 --> 03:35.440
ngay bây giờ trong app. js, chúng tôi có let và const,

03:35.440 --> 03:38.130
bởi vì hiện tại điều đó đã được hỗ trợ ở đó.

03:38.130 --> 03:39.340
Vì vậy, đó là tùy thuộc vào bạn.

03:39.340 --> 03:41.720
Tất nhiên, phiên bản JavaScript bạn

03:41.720 --> 03:43.641
chọn ở đây càng hiện đại thì mã

03:43.641 --> 03:47.450
được tạo của bạn càng ngắn gọn vì TypeScript ngày càng phải

03:47.450 --> 03:50.440
biên dịch ít mã hơn hoặc nó phải xử lý các tính

03:50.440 --> 03:54.010
năng không tồn tại trong ít tình huống hơn, và do đó, phiên

03:54.010 --> 03:56.190
bản được biên dịch mã thường được

03:56.190 --> 03:57.820
thực hiện ngắn gọn hơn và

03:57.820 --> 03:59.560
ngắn hơn.

03:59.560 --> 04:01.150
Vì vậy, đó là mục tiêu.

04:01.150 --> 04:02.623
Còn những lựa chọn khác thì sao?
