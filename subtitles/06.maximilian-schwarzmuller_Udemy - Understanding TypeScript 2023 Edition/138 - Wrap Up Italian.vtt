WEBVTT

00:02.340 --> 00:05.740
Presentatore: E questo è tutto per questo piccolo progetto dimostrativo.

00:05.740 --> 00:08.590
Naturalmente si può sempre fare di più, ma in questo

00:08.590 --> 00:12.070
caso stiamo già utilizzando una serie di funzioni che abbiamo

00:12.070 --> 00:14.950
imparato a conoscere in questo corso.

00:14.950 --> 00:18.220
Con questo progetto, si spera che abbiate un'idea più precisa

00:18.220 --> 00:22.610
di quando utilizzare una determinata funzione, del perché esistano determinate

00:22.610 --> 00:25.968
funzioni come i decoratori e le interfacce, di come possano

00:25.968 --> 00:30.770
aiutarci e di come possiamo scrivere codice scalabile e sicuro.

00:30.770 --> 00:33.735
Ora, sentitevi liberi di sviluppare questo progetto, di aggiungere

00:33.735 --> 00:35.826
altre funzioni per conto vostro, di esplorare

00:35.826 --> 00:38.110
ciò che potreste cambiare e di esercitarvi semplicemente

00:38.110 --> 00:40.870
a lavorare con il dattiloscritto.

00:40.870 --> 00:44.344
Sono soddisfatto dello stato attuale e nel prossimo modulo

00:44.344 --> 00:47.456
voglio affrontare un problema abbastanza ovvio.

00:47.456 --> 00:51.150
Abbiamo un file enorme qui.

00:51.150 --> 00:55.030
Quindi, dividere questo in più file ci aiuterebbe molto a gestire

00:55.030 --> 00:56.953
la nostra base di codice.

00:56.953 --> 01:00.090
Perché ora, se vogliamo modificare qualcosa, dobbiamo

01:00.090 --> 01:02.710
sempre scorrere l'intero file e trovare il punto

01:02.710 --> 01:05.340
in cui vogliamo effettuare la modifica.

01:05.340 --> 01:07.000
Non è l'ideale.

01:07.000 --> 01:09.030
C'è già un bel po' di codice, in progetti

01:09.030 --> 01:12.770
ancora più grandi sarebbe del tutto ingestibile.

01:12.770 --> 01:14.780
Quindi, nel prossimo modulo daremo

01:14.780 --> 01:17.750
un'occhiata alle caratteristiche che ci offre e che

01:17.750 --> 01:20.423
ci aiutano a suddividere il codice in più file.
