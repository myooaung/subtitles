WEBVTT

00:02.260 --> 00:04.220
Agora que temos uma boa compreensão das

00:04.220 --> 00:08.410
características básicas do datilografia e do que o datilografia acrescenta.

00:08.410 --> 00:10.070
E também entendemos como funciona

00:10.070 --> 00:12.320
o compilador de datilografia.

00:12.320 --> 00:13.760
Vamos dar uma olhada no que mais

00:13.760 --> 00:15.020
o datilografia tem a oferecer,

00:15.020 --> 00:18.700
especificamente quando se trata da sintaxe moderna do Javascript.

00:18.700 --> 00:22.130
Agora, este é um termo difícil, bastante vago, mas no final o que

00:22.130 --> 00:23.360
quero dizer com isso são

00:23.360 --> 00:26.380
características do Javascript que já existem há alguns

00:26.380 --> 00:28.410
anos e que são bem suportadas nos navegadores

00:28.410 --> 00:30.790
modernos, mas que não necessariamente rodam

00:30.790 --> 00:33.290
em todos, especialmente nos navegadores mais

00:33.290 --> 00:34.970
antigos e ali, especialmente

00:34.970 --> 00:37.570
no Internet Explorer.

00:37.570 --> 00:40.210
Estou falando de coisas como Let, Cons, funções

00:40.210 --> 00:43.240
de seta, desestruturação da sintaxe, operador de propagação,

00:43.240 --> 00:45.350
terminar assim por diante.

00:45.350 --> 00:48.220
Portanto, se isso é algo que você sabe absolutamente,

00:48.220 --> 00:51.950
você pode pular este módulo porque ele também refrescará o conhecimento

00:51.950 --> 00:54.230
sobre estes tópicos, mas também explicará

00:54.230 --> 00:56.240
o que o datilografia faz com estas coisas,

00:56.240 --> 00:59.000
com esta sintaxe.

00:59.000 --> 01:01.450
Embora, o conto é, o datilografia o compila

01:01.450 --> 01:02.980
de tal forma que funciona.

01:02.980 --> 01:04.510
No entanto, vamos dar uma olhada

01:04.510 --> 01:05.940
nisso, mas você pode pular este

01:05.940 --> 01:08.290
módulo se isso for tudo o que você já sabe.

01:08.290 --> 01:10.130
Você pode apenas dar uma olhada no currículo

01:10.130 --> 01:12.400
e ver se há alguma palestra neste módulo que ainda possa

01:12.400 --> 01:14.260
ser interessante para você, caso contrário,

01:14.260 --> 01:16.450
nos veremos depois deste módulo.

01:16.450 --> 01:18.140
Se você não tem certeza sobre estas

01:18.140 --> 01:20.500
características, se você conhece Javascript,

01:20.500 --> 01:22.610
a respeito de Var e Zon, mas não sabe o que a palavra-chave

01:22.610 --> 01:24.810
Let ou Cons realmente significa, então você

01:24.810 --> 01:27.820
deve ficar comigo e mergulhar neste módulo.

01:27.820 --> 01:29.860
Para isso eu tenho um projeto totalmente novo,

01:29.860 --> 01:31.450
você o encontrará em anexo.

01:31.450 --> 01:34.780
E você sempre precisa executar a instalação do NPM em primeiro lugar nestes

01:34.780 --> 01:35.613
projetos.

01:35.613 --> 01:37.610
Não se esqueça disto para instalar todas as

01:37.610 --> 01:39.530
dependências e depois sempre NPM começa a

01:39.530 --> 01:41.390
ligar o servidor de desenvolvimento.

01:41.390 --> 01:44.480
Agora, este é um projeto basicamente como o tínhamos antes,

01:44.480 --> 01:46.280
no final do último módulo.

01:46.280 --> 01:49.550
arquivo tsconfig com uma configuração bastante rígida

01:50.470 --> 01:53.210
Um aplicativo. ts arquivar aqui e esta pasta

01:53.210 --> 01:54.740
será gerada automaticamente.

01:54.740 --> 01:57.100
A propósito, mantenha este servidor de desenvolvimento

01:57.100 --> 01:58.360
funcionando, naturalmente,

01:58.360 --> 02:00.610
como antes, e agora podemos sempre compilar

02:00.610 --> 02:03.300
nosso código com o comando TSC aqui.

02:03.300 --> 02:06.670
Ou, e é isso que farei aqui, o TSC traça W para entrar no modo de relógio

02:06.670 --> 02:09.160
e certificar-se de que recompilamos sempre que

02:09.160 --> 02:10.980
mudamos alguma coisa.

02:10.980 --> 02:12.900
Portanto, agora é a configuração de nosso projeto

02:12.900 --> 02:15.030
e agora vamos mergulhar em algumas características

02:15.030 --> 02:17.790
do Javascript de próxima geração, que ele suporta e do que você

02:17.790 --> 02:19.390
deve estar ciente.
