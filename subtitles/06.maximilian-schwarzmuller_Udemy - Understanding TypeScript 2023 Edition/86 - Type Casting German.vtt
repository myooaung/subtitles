WEBVTT

00:02.260 --> 00:03.920
Ausbilder: Also, diskriminierte Gewerkschaften.

00:03.920 --> 00:05.750
Sehr, sehr nützlich.

00:05.750 --> 00:09.060
Eine weitere sehr nützliche Funktion ist das Type Casting.

00:09.060 --> 00:12.640
Type Casting hilft Ihnen, TypeScript mitzuteilen, dass

00:12.640 --> 00:15.350
ein Wert von einem bestimmten Typ ist, den

00:15.350 --> 00:19.240
TypeScript nicht selbst erkennen kann, von dem Sie als Entwickler

00:19.240 --> 00:22.660
aber wissen, dass er der Fall sein wird.

00:22.660 --> 00:25.030
Ein gutes Beispiel dafür ist, wenn

00:25.030 --> 00:27.120
wir X zu etwas im Dom bekommen.

00:27.120 --> 00:29.560
Nehmen wir an, wir haben hier einen Absatz im

00:29.560 --> 00:32.180
Dom, nur einen Absatz, sonst nichts, und es ist

00:32.180 --> 00:33.390
ein leerer Absatz.

00:33.390 --> 00:35.190
Wenn wir das speichern, sehen wir hier auf

00:35.190 --> 00:37.150
dem Bildschirm natürlich nichts mehr.

00:37.150 --> 00:38.950
Jetzt können wir von unserem Skript aus

00:38.950 --> 00:40.543
auf diesen Absatz zugreifen.

00:43.160 --> 00:48.160
Const-Absatz mit Dokumentabfrage-Selektor P, zum Beispiel.

00:49.180 --> 00:51.890
Wenn wir nun einen Abfrageselektor verwenden und P als Selektor

00:51.890 --> 00:54.500
übergeben, also nach dem P-Tag selektieren, dann kann

00:54.500 --> 00:57.070
TypeScript tatsächlich herausfinden, wie Sie sehen

00:57.070 --> 00:59.510
können, wenn ich mit dem Mauszeiger darüber fahre,

00:59.510 --> 01:02.480
dass dies vom Typ Absatzelement oder Null ist, weil ein solches

01:02.480 --> 01:05.900
Element vielleicht nicht auf der Seite existiert, aber das ist eine andere

01:05.900 --> 01:07.050
Sache.

01:07.050 --> 01:09.920
Lassen wir den oder-Null-Fall erst einmal außer Acht.

01:09.920 --> 01:12.400
Wichtig ist, dass TypeScript tatsächlich herausfindet,

01:12.400 --> 01:14.600
dass es sich um ein Absatzelement handelt.

01:14.600 --> 01:16.800
Das ändert sich, wenn wir nach etwas anderem

01:16.800 --> 01:18.460
auswählen, z. B. einer ID.

01:18.460 --> 01:22.020
Wir nennen dies hier message-output, also hat dieser Absatz

01:22.020 --> 01:23.920
die ID message-output.

01:23.920 --> 01:25.890
Nun wissen wir als Entwickler natürlich,

01:25.890 --> 01:28.360
dass wir diese ID diesem Absatz zugewiesen haben, aber

01:28.360 --> 01:29.780
TypeScript weiß das nicht.

01:29.780 --> 01:33.020
TypeScript taucht nicht in unsere HTML-Dateien ein

01:33.020 --> 01:34.590
und analysiert sie.

01:34.590 --> 01:37.360
Wenn wir jetzt zum Beispiel mit getElementById

01:37.360 --> 01:41.720
nach dieser ID auswählen, sehen wir, dass TypeScript daraus schließt,

01:41.720 --> 01:45.130
dass es sich um ein HTML-Element oder null handelt,

01:45.130 --> 01:49.830
es weiß nicht, um welches HTML-Element es sich handelt.

01:49.830 --> 01:52.720
Bei einem Absatz ist das vielleicht nicht so wichtig,

01:52.720 --> 01:54.830
vielleicht wollen wir damit nur Dinge

01:54.830 --> 01:57.290
tun, die wir auch mit jedem anderen HTML-Element

01:57.290 --> 01:59.990
tun könnten, z. B. auf seinen Textinhalt zugreifen

01:59.990 --> 02:01.470
oder ähnliches.

02:01.470 --> 02:03.220
Aber was wäre, wenn wir hier einen Beitrag leisten könnten?

02:03.220 --> 02:07.750
Was wäre, wenn wir einen Eingabetyp Text hätten und wir den Wert, den der Benutzer

02:07.750 --> 02:10.430
eingegeben hat, abrufen wollen? Also gebe ich

02:10.430 --> 02:12.760
ihm eine ID von user-input und wähle dies

02:12.760 --> 02:15.500
in meinem TypeScript-Code aus.

02:15.500 --> 02:17.730
Hier wähle ich also nach der ID user-input,

02:17.730 --> 02:21.530
und es ist nicht mehr ein Absatz, sondern ein userInputElement.

02:21.530 --> 02:24.023
Nun wissen wir als Entwickler, dass wir hier auf dieses

02:24.909 --> 02:26.700
Eingabeelement zugreifen, aber wie gesagt,

02:26.700 --> 02:28.530
TypeScript weiß das nicht.

02:28.530 --> 02:31.140
TypeScript liest unseren HTML-Code nicht, daher

02:31.140 --> 02:34.435
weiß TypeScript nur, dass es sich um ein HTML-Element handelt.

02:34.435 --> 02:37.860
Wenn ich nun die Value-Eigenschaft dieses Elements

02:37.860 --> 02:40.902
festlegen möchte, und es würde versuchen,

02:40.902 --> 02:45.000
userInputElement. Wert gleich Hallo, Sie sehen, dass ich

02:45.000 --> 02:47.050
tatsächlich einen Fehler erhalten.

02:47.050 --> 02:48.960
Ich erhalte eine Fehlermeldung, weil zum einen

02:48.960 --> 02:50.780
dieses Objekt möglicherweise null ist.

02:50.780 --> 02:54.220
Wir können das beheben, indem wir ein Ausrufezeichen dahinter

02:54.220 --> 02:56.210
setzen, und ich werde gleich darauf

02:56.210 --> 02:58.390
zurückkommen, aber selbst dann erhalte

02:58.390 --> 03:01.640
ich immer noch die Fehlermeldung, dass der Wert für den Typ

03:01.640 --> 03:03.890
HTML-Element nicht existiert, weil dieser

03:03.890 --> 03:08.343
generische Typ, den im Grunde jedes HTML-Element als Typ hat, keine Eigenschaften

03:08.343 --> 03:11.630
unterstützt, die spezifisch sind für, nun ja, spezifische

03:11.630 --> 03:14.510
HTML-Elemente.

03:14.510 --> 03:17.540
Wir müssen TypeScript also mitteilen, dass

03:17.540 --> 03:20.860
das, was wir hier auswählen, nicht nur nicht null

03:20.860 --> 03:25.080
ist, sondern auch vom Typ HTMLInputElement ist.

03:25.080 --> 03:28.240
Und genau das können wir mit Type Casting erreichen.

03:28.240 --> 03:31.153
Nun gibt es zwei Möglichkeiten der Typisierung, zwei Syntaxen,

03:31.153 --> 03:34.170
die wir verwenden können, und sie sind gleichwertig.

03:34.170 --> 03:36.971
Die eine ist, dass wir etwas vor dem Ding hinzufügen,

03:36.971 --> 03:41.920
das wir konvertieren wollen, oder wo wir TypeScript sagen wollen, dass es tippen soll.

03:41.920 --> 03:44.170
Wir fügen spitze Klammern ein, die sich öffnen

03:44.170 --> 03:45.810
und schließen, und dann zwischen

03:45.810 --> 03:49.480
diesen Klammern den Typ der Sache nach den spitzen Klammern.

03:49.480 --> 03:51.223
In diesem Fall ist es HTMLInputElement.

03:53.110 --> 03:54.970
Und dieser Typ ist global verfügbar, weil

03:54.970 --> 03:57.963
ich in meiner tsconfig-Datei die dom-Lib einbeziehe.

03:59.180 --> 04:00.810
Damit weiß TypeScript, dass

04:00.810 --> 04:03.830
alles, was wir hier nach den eckigen Klammern auswählen,

04:03.830 --> 04:06.530
vom Typ HTMLInputElement ist, und beschwert

04:06.530 --> 04:08.950
sich daher nicht mehr.

04:08.950 --> 04:10.330
Das ist also die erste Version.

04:10.330 --> 04:12.830
Lassen Sie mich das kopieren und auskommentieren

04:12.830 --> 04:14.750
und Ihnen die Alternative zeigen.

04:14.750 --> 04:18.000
Das funktioniert einwandfrei und Sie können es verwenden.

04:18.000 --> 04:21.210
Wenn Sie React kennen, wissen Sie, dass es auch innerhalb

04:21.210 --> 04:24.400
von JavaScript oder TypeScript eine solche Syntax

04:24.400 --> 04:26.970
für spitze Klammern gibt, wenn Sie diese

04:26.970 --> 04:29.200
für React-Dateien verwenden, in denen

04:29.200 --> 04:33.550
Sie JSX-Code in Ihre React-Komponenten schreiben.

04:33.550 --> 04:36.060
Wenn Sie React nicht kennen, sagt Ihnen das vielleicht nicht viel.

04:36.060 --> 04:40.800
Beachten Sie, dass es in React-Projekten eine ähnliche Syntax gibt. Dort werden

04:40.800 --> 04:43.320
die spitzen Klammern nicht verwendet, um Informationen

04:43.320 --> 04:47.480
über die verwendeten Typen zu übermitteln, sondern sie werden von einigen

04:47.480 --> 04:50.390
Build-Tools und von React geparst, um zu wissen, was

04:50.390 --> 04:54.390
Sie auf dem Bildschirm darstellen wollen.

04:54.390 --> 04:56.750
Also, völlig losgelöst von TypeScript.

04:56.750 --> 04:59.880
Um nicht mit der JSX-Syntax zu kollidieren, bietet das TypeScript-Team

04:59.880 --> 05:01.900
eine Alternative zu diesem Typ-Casting

05:01.900 --> 05:04.350
in spitzen Klammern.

05:04.350 --> 05:06.450
Sie können auch etwas nach dem Gussteil

05:06.450 --> 05:07.920
hinzufügen, in diesem

05:07.920 --> 05:09.960
Fall also nach dieser Auswahl, und

05:09.960 --> 05:12.600
das ist das Schlüsselwort as.

05:12.600 --> 05:14.740
Und dann fügen Sie hier wieder den Typ hinzu,

05:14.740 --> 05:16.750
auf den Sie dies übertragen wollen.

05:16.750 --> 05:19.970
Damit wird TypeScript mitgeteilt, dass der vorangestellte

05:19.970 --> 05:23.730
Ausdruck, in diesem Fall dieser Ausdruck hier, einen Wert

05:23.730 --> 05:27.405
vom Typ HTMLInputElement ergibt.

05:27.405 --> 05:30.067
Daher erhalten wir auch hier keinen Fehler.

05:30.067 --> 05:31.650
Dies ist also eine Alternative, und

05:31.650 --> 05:33.940
Sie können eine der beiden Syntaxen verwenden, was

05:33.940 --> 05:36.350
auch immer Sie bevorzugen, Sie sollten nur versuchen,

05:36.350 --> 05:38.990
in Ihrem gesamten Projekt konsistent zu sein, so dass Sie

05:38.990 --> 05:42.377
nicht zwischen diesen beiden Syntaxen hin- und herwechseln.

05:42.377 --> 05:45.220
Und damit können Sie diese wertvollen Zusatzinformationen

05:45.220 --> 05:47.480
an TypeScript weitergeben und Code wie diesen

05:47.480 --> 05:50.400
zum Laufen bringen, obwohl TypeScript allein nicht

05:50.400 --> 05:52.760
in der Lage wäre, herauszufinden, dass dies

05:52.760 --> 05:56.000
hier ein HTMLInputElement ergibt.

05:56.000 --> 05:57.940
Da Sie TypeScript zwingen, diesen Typ zu

05:57.940 --> 06:00.420
verwenden, liegt es natürlich in Ihrer Verantwortung

06:00.420 --> 06:02.200
als Entwickler, sicherzustellen,

06:02.200 --> 06:05.620
dass die Ergebnisse dieses Ausdrucks von diesem Typ sind.

06:05.620 --> 06:07.700
Andernfalls könnte ein Laufzeitfehler oder ein unerwartetes

06:07.700 --> 06:09.920
Verhalten zur Laufzeit auftreten, wenn Sie versuchen,

06:09.920 --> 06:12.780
mit diesem Element auf eine Weise zu interagieren, die eigentlich nicht

06:12.780 --> 06:14.423
unterstützt wird.

06:15.610 --> 06:18.060
Typ-Casting ist also eine leistungsstarke Funktion.

06:18.060 --> 06:20.490
Genauso wie dieses Ausrufezeichen hier.

06:20.490 --> 06:22.590
Ich habe dies bereits zu Beginn des

06:22.590 --> 06:24.820
Kurses ein wenig untersucht.

06:24.820 --> 06:27.470
Mit diesem Ausrufezeichen können wir TypeScript mitteilen,

06:27.470 --> 06:31.090
dass der Ausdruck vor dem Ausrufezeichen niemals null ergeben wird.

06:31.090 --> 06:33.170
Dies ist für einige Ausdrücke erforderlich,

06:33.170 --> 06:35.070
z. B. für diesen, wenn Sie etwas aus dem

06:35.070 --> 06:38.010
Dom auswählen, das möglicherweise null zurückgibt.

06:38.010 --> 06:40.980
Wenn wir als Entwickler wissen, dass dies niemals null zurückgeben

06:40.980 --> 06:43.690
wird, können wir dieses Ausrufezeichen verwenden.

06:43.690 --> 06:45.470
Ansonsten, und das haben Sie ja schon

06:45.470 --> 06:48.248
gelernt, möchte ich das nur noch einmal betonen.

06:48.248 --> 06:49.380
Andernfalls, wenn Sie nicht sicher

06:49.380 --> 06:52.600
sind, dass dies nicht null zurückgeben wird, können Sie eine if-Prüfung verwenden.

06:52.600 --> 06:56.070
Sie könnten also überprüfen, ob userInputElement wahr ist,

06:56.070 --> 06:57.510
und daher nicht null ist,

06:57.510 --> 06:59.440
und es dann dort verwenden.

06:59.440 --> 07:02.720
Ich musste das Type-Casting in diesem Fall entfernen, denn wenn wir hier

07:02.720 --> 07:04.670
ein Type-Casting durchführen, sagen wir TypeScript

07:04.670 --> 07:07.170
auch, dass dies nicht null sein wird, und da ich mir dessen

07:07.170 --> 07:10.470
nicht sicher bin, kann ich hier kein Casting durchführen.

07:10.470 --> 07:13.120
Stattdessen muss ich das hier tun, wenn ich den Wert verwende,

07:13.120 --> 07:14.290
und deshalb möchte ich es

07:14.290 --> 07:16.600
tun, bevor ich auf die Eigenschaft value zugreife,

07:16.600 --> 07:19.820
indem ich ein HTMLInputElement wie dieses hinzufüge.

07:19.820 --> 07:21.530
Aber das würde natürlich scheitern.

07:21.530 --> 07:24.060
Dies ist eine ungültige Syntax, Sie würden versuchen,

07:24.060 --> 07:28.030
auf eine Werteigenschaft eines HTMLInputElementes zuzugreifen, und

07:28.030 --> 07:30.280
das macht nicht einmal Sinn.

07:30.280 --> 07:33.010
Wir müssen diesen Ausdruck einfach in Klammern einschließen,

07:33.010 --> 07:35.670
dann sicherstellen, dass er zuerst ausgewertet wird,

07:35.670 --> 07:37.590
und dann versuchen, auf das Ergebnis dieses

07:37.590 --> 07:39.480
Ausdrucks zuzugreifen.

07:39.480 --> 07:41.650
Und jetzt haben wir eine Alternative zum

07:41.650 --> 07:42.893
Ausrufezeichen.
