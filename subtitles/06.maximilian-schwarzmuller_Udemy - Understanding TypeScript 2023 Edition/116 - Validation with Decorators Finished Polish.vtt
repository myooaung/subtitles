WEBVTT

00:02.320 --> 00:05.210
Instruktor: Aby to zaimplementować, najpierw stworzę

00:05.210 --> 00:08.217
interfejs ValidatorConfig, w którym chcę skonfigurować

00:09.550 --> 00:12.680
ten magazyn, z którym chcę pracować.

00:12.680 --> 00:15.130
Mój pomysł tam jest, aby mieć kilka właściwości i

00:15.130 --> 00:17.653
stąd używam tutaj tej notacji typu indeksowego.

00:19.720 --> 00:21.450
Które są w zasadzie ciągami, gdzie

00:21.450 --> 00:23.440
wartość jest jeszcze innym obiektem.

00:23.440 --> 00:26.380
Ponieważ to tutaj byłoby w zasadzie nazwą klasy, dla której

00:26.380 --> 00:29.570
chcemy zarejestrować pewne walidowane właściwości.

00:29.570 --> 00:31.700
A następnie w obiekcie, który tam przechowujemy,

00:31.700 --> 00:34.580
mamy konkretne właściwości klasy, które mają dołączone

00:34.580 --> 00:37.010
do nich walidatory.

00:37.010 --> 00:40.610
Więc tutaj mamy właściwość validatable, jeśli chcesz ją

00:40.610 --> 00:42.240
nazwać w ten sposób, która

00:42.240 --> 00:44.660
również będzie kluczem łańcuchowym.

00:44.660 --> 00:47.350
A następnie wartość dla tego powinna być tablicą

00:47.350 --> 00:50.010
ciągów, gdzie zasadniczo mamy coś takiego

00:52.420 --> 00:55.490
jak wymagane, pozytywne i tak dalej.

00:55.490 --> 00:57.460
Więc coś takiego mogłoby zostać dodane

00:57.460 --> 00:59.323
tutaj jako lista walidatorów.

01:00.300 --> 01:05.300
Teraz możemy tutaj stworzyć nasz config registeredValidators, który powinien być

01:05.790 --> 01:07.950
typu ValidatorConfig, który początkowo

01:07.950 --> 01:09.640
jest pustym obiektem.

01:09.640 --> 01:11.500
Ponieważ początkowo, gdy aplikacja się uruchamia,

01:11.500 --> 01:13.920
gdy nasza biblioteka trzeciej strony zostaje załadowana, żadne

01:13.920 --> 01:16.293
walidatory nie zostały jeszcze zarejestrowane.

01:17.640 --> 01:19.920
No, a potem tutaj w naszych dyrektorach

01:19.920 --> 01:23.490
chcemy coś dodać do tego rejestru.

01:23.490 --> 01:28.020
Teraz pamiętaj, że funkcja dekoratora właściwości dostaje dwa argumenty:

01:28.020 --> 01:31.010
cel, który jest prototypem obiektu, na którym

01:31.010 --> 01:33.910
siedzi właściwość, lub funkcją konstruktora,

01:33.910 --> 01:39.300
jeśli byłaby to właściwość statyczna, oraz nazwę właściwości.

01:39.300 --> 01:40.710
To są dwa argumenty, które

01:40.710 --> 01:44.370
otrzymujemy tutaj, nie otrzymujemy deskryptora dla właściwości.

01:44.370 --> 01:46.760
Teraz możemy przejść do naszych zarejestrowanych

01:46.760 --> 01:51.463
walidatorów i tam chcę dodać nowy wpis dla celu. konstruktor.

01:52.730 --> 01:56.070
Prototyp instancji, z którą pracujemy, będzie miał klucz

01:56.070 --> 01:58.430
konstruktora, który wskazuje na funkcję

01:58.430 --> 02:02.610
konstruktora, która została użyta do stworzenia naszego obiektu.

02:02.610 --> 02:04.690
I to, w związku z tym, będzie w zasadzie coś

02:04.690 --> 02:06.120
takiego jak kurs tutaj, więc

02:06.120 --> 02:08.460
nazwa tej funkcji konstruktora w końcu może być

02:08.460 --> 02:10.560
pobierana z tego konstruktora.

02:10.560 --> 02:11.900
Ponieważ konstruktor jest

02:11.900 --> 02:13.400
funkcją możemy użyć właściwości

02:13.400 --> 02:15.900
name, która istnieje na każdej funkcji w JavaScript,

02:15.900 --> 02:18.310
aby uzyskać nazwę funkcji, a to następnie będzie

02:18.310 --> 02:20.620
nazwa kursu tutaj na przykład.

02:20.620 --> 02:23.390
Więc teraz rejestrujemy nazwę klasy jako klucz w zarejestrowanych

02:23.390 --> 02:25.030
walidatorach.

02:25.030 --> 02:28.130
A wartością dla tego wtedy powinien być inny obiekt.

02:28.130 --> 02:30.630
Więc ustawiam to równe innemu obiektowi tutaj.

02:30.630 --> 02:32.390
I w tym obiekcie mam również dynamicznie

02:32.390 --> 02:34.640
przypisaną właściwość, w której używam

02:34.640 --> 02:37.400
mojego propName, więc właściwość, dla której

02:37.400 --> 02:40.190
chcę dodać walidator jako klucz.

02:40.190 --> 02:42.310
Teraz wartość tutaj jest tablicą

02:42.310 --> 02:45.530
ciągów, a tutaj dodam wymagane jako ciąg.

02:45.530 --> 02:47.920
Teraz oczywiście jest to bardzo naiwny walidator.

02:47.920 --> 02:50.000
Jeśli mieliśmy już inne walidatory zarejestrowane

02:50.000 --> 02:52.830
dla tej właściwości, teraz nadpisałbym je tutaj.

02:52.830 --> 02:54.900
Więc lepiej byłoby najpierw pobrać wszelkie

02:54.900 --> 02:58.360
istniejące walidatory, a następnie skopiować je do tej tablicy i tylko

02:58.360 --> 03:01.320
dodać wymagane do tej istniejącej tablicy.

03:01.320 --> 03:02.870
Ponownie, aby zaoszczędzić trochę czasu

03:02.870 --> 03:04.740
tutaj i po prostu pokazać ogólny pomysł, będę

03:04.740 --> 03:06.873
miał to bardziej naiwne podejście tutaj.

03:07.980 --> 03:11.180
Z tym, że dostaliśmy jednak wymaganą adnotację, popracujmy

03:11.180 --> 03:14.690
teraz nad adnotacją o liczbie dodatniej.

03:14.690 --> 03:16.730
I oczywiście to jest w zasadzie to samo.

03:16.730 --> 03:21.410
Kopiuję ten kod, ale ustawiam to tutaj na pozytywny lub jakikolwiek identyfikator,

03:21.410 --> 03:23.600
którego chcesz użyć i oczywiście musimy

03:23.600 --> 03:25.010
upewnić się, że akceptujemy

03:25.010 --> 03:27.650
właściwe argumenty.

03:27.650 --> 03:30.990
Więc razem z tym co dodaliśmy do tej pory, rejestrujemy

03:30.990 --> 03:34.420
te właściwości i ich walidatory w naszym globalnym

03:34.420 --> 03:38.640
configu kiedy ta klasa jest zdefiniowana.

03:38.640 --> 03:41.460
Teraz musimy tylko popracować nad funkcją validate.

03:41.460 --> 03:43.400
Funkcja validate powinna przejść przez

03:43.400 --> 03:46.240
wszystkie zarejestrowane walidatory, a następnie zasadniczo

03:46.240 --> 03:50.340
uruchomić inną logikę w oparciu o to, które walidatory znajdzie.

03:50.340 --> 03:54.857
Więc tutaj przede wszystkim chcę pobrać konfigurację dla konkretnego

03:54.857 --> 03:57.600
obiektu, z którym mamy do czynienia.

03:57.600 --> 04:00.390
W tym celu musimy dowiedzieć się, na której funkcji konstruktora

04:00.390 --> 04:04.277
opiera się obiekt, a następnie uzyskać konfigurację walidacji lub mapowania

04:04.277 --> 04:07.040
walidatora właściwości tutaj, które ustawiliśmy dla

04:07.040 --> 04:09.070
tego obiektu.

04:09.070 --> 04:11.960
Więc tutaj nazwę ten obiekt validators,

04:11.960 --> 04:14.520
lub objValidatorConfig może.

04:14.520 --> 04:17.110
I sięgamy tutaj do zarejestrowanych walidatorów i uzyskujemy dostęp

04:17.110 --> 04:22.110
do właściwości, którą powinien być obj. konstruktor. nazwa, ta sama logika co poprzednio,

04:23.900 --> 04:27.060
uzyskujemy dostęp do właściwości konstruktora, która istnieje

04:27.060 --> 04:28.980
na prototypie obiektu i dlatego możemy

04:28.980 --> 04:31.720
uzyskać do niej dostęp bezpośrednio na obiekcie dzięki

04:31.720 --> 04:33.340
temu, jak działa JavaScript, a dzięki

04:33.340 --> 04:35.050
łańcuchowi prototypów będziemy wtedy

04:35.050 --> 04:36.710
sięgać do prototypu, jeśli nie możemy

04:36.710 --> 04:38.920
znaleźć właściwości konstruktora na samym obiekcie,

04:38.920 --> 04:41.580
i to będzie działać.

04:41.580 --> 04:43.840
I dlatego teraz mamy nazwę konstruktora

04:43.840 --> 04:46.970
i dowiadujemy się, że na przykład ten Kurs tutaj jest

04:46.970 --> 04:49.050
oparty na tej klasie Kurs.

04:49.050 --> 04:51.290
Więc sprawdzamy każdą konfigurację walidatora,

04:51.290 --> 04:52.800
którą mamy dla klasy Kurs.

04:52.800 --> 04:55.910
Więc teraz patrzymy na ten obiekt, w zasadzie.

04:55.910 --> 04:58.207
To jest teraz w objValidatorConfig.

04:59.310 --> 05:01.540
Teraz oczywiście możemy tego nie znaleźć, jeśli próbujemy

05:01.540 --> 05:03.270
zatwierdzić nasz obiekt, dla którego nic

05:03.270 --> 05:05.110
nie zostało zarejestrowane.

05:05.110 --> 05:08.270
Więc jeśli nie mamy żadnego configu walidatora, jeśli

05:08.270 --> 05:11.640
nie znajdziemy tam nic, chcę zwrócić true, ponieważ wtedy

05:11.640 --> 05:14.010
to na pewno jest ważne, prawda?

05:14.010 --> 05:15.330
Nie ma nic do walidacji,

05:15.330 --> 05:18.350
więc obiekt z pewnością jest ważny.

05:18.350 --> 05:20.900
W przeciwnym razie, jeśli go znajdziemy, chcę,

05:20.900 --> 05:24.910
aby zapętlił się przez ten wewnętrzny obiekt tutaj z pętlą for in.

05:24.910 --> 05:27.580
Więc z tym zapętlam moje właściwości, dla

05:27.580 --> 05:29.560
których zarejestrowałem walidatory,

05:29.560 --> 05:33.007
z const prop w objValidatorConfig.

05:34.380 --> 05:36.950
To daje mi dostęp do wszystkich nazw właściwości,

05:36.950 --> 05:39.630
dla których następnie możemy mieć walidatory.

05:39.630 --> 05:41.180
Więc teraz oczywiście muszę przejść

05:41.180 --> 05:43.970
przez wszystkie walidatory, które możemy mieć dla właściwości.

05:43.970 --> 05:45.230
To zawsze powinna być tablica,

05:45.230 --> 05:47.680
nawet jeśli mamy dodany tylko jeden walidator.

05:47.680 --> 05:49.530
Więc możemy użyć for pętli tutaj

05:49.530 --> 05:53.040
teraz i uzyskać konkretny walidator, który mamy, dla

05:53.040 --> 05:56.930
objValidatorConfig dla tej danej właściwości.

05:56.930 --> 06:00.560
Więc teraz dostajemy rzeczy takie jak pozytywne lub wymagane, które są przechowywane

06:00.560 --> 06:02.963
w stałej walidatora następnie.

06:04.080 --> 06:06.110
I wtedy moglibyśmy mieć tutaj deklarację switch,

06:06.110 --> 06:08.030
lub oczywiście wywołać zewnętrzne funkcje w oparciu

06:08.030 --> 06:09.810
o to, który walidator znajdziemy.

06:09.810 --> 06:12.130
Ale tutaj pójdę z wbudowaną deklaracją przełączania,

06:12.130 --> 06:16.620
włączaniem walidatora, a następnie zasadniczo mam różne przypadki.

06:16.620 --> 06:19.683
Na przykład wymagany przypadek tutaj.

06:20.800 --> 06:22.163
Whoops, jak to.

06:23.470 --> 06:27.900
Tutaj chcę zwrócić true, jeśli nasza właściwość, na którą

06:27.900 --> 06:28.950
patrzymy...

06:28.950 --> 06:33.260
Więc ta właściwość na tym obiekcie ma niepustą wartość.

06:33.260 --> 06:38.260
Więc zwrócę true, jeśli obj prop jest prawdomówny.

06:39.170 --> 06:42.010
A żeby przekonwertować to na prawdziwą wartość true lub

06:42.010 --> 06:44.420
false możemy użyć operatora double bang.

06:44.420 --> 06:46.840
Teraz słyszę typy skarg, że nie wie, czy obiekt

06:46.840 --> 06:49.440
ma tę właściwość, więc tutaj powinniśmy faktycznie

06:49.440 --> 06:51.220
zmienić to na any, aby uzyskać tę

06:51.220 --> 06:53.560
dodatkową elastyczność tutaj.

06:53.560 --> 06:56.150
Oczywiście można też popracować nad typami tutaj.

06:56.150 --> 07:00.480
I na przykład, również zamień swoje identyfikatory tutaj w jasno zdefiniowane

07:00.480 --> 07:03.430
typy, gdzie Enums, z którymi pracujesz, a może również

07:03.430 --> 07:05.490
poprawić typowanie tutaj.

07:05.490 --> 07:07.420
Chociaż, szczerze mówiąc, ponieważ chcę, aby

07:07.420 --> 07:09.960
to działało z dowolnym obiektem, trudno jest poprawić to w sposób,

07:09.960 --> 07:11.810
który spodoba się TypeScriptowi.

07:11.810 --> 07:13.330
Moglibyśmy pracować z typami

07:13.330 --> 07:16.800
generycznymi, ale wtedy znowu musielibyśmy się ograniczyć

07:16.800 --> 07:19.740
do tego, które obiekty typy generyczne powinny

07:19.740 --> 07:22.110
rozszerzyć i zaakceptować.

07:22.110 --> 07:25.850
Więc każdy może być naszą najlepszą opcją tutaj, aby być naprawdę elastycznym

07:25.850 --> 07:27.880
i zaakceptować wiele różnych obiektów

07:27.880 --> 07:30.640
w tej funkcji sprawdzania poprawności.

07:30.640 --> 07:32.270
Teraz z powrotem do segmentu przełącznika,

07:32.270 --> 07:34.750
wymagany przypadek jest jednym ewentualnie, mamy również

07:34.750 --> 07:37.650
pozytywny przypadek, który chcemy obsłużyć.

07:37.650 --> 07:39.280
I tam chcę zwrócić true,

07:39.280 --> 07:43.770
jeśli właściwość, na którą patrzymy, jest większa niż zero.

07:43.770 --> 07:47.260
Więc jeśli rekwizyt obiektu jest większy niż zero, wtedy

07:47.260 --> 07:50.463
to zwraca true, w przeciwnym razie to zwróci false.

07:52.890 --> 07:55.730
Teraz, jeśli nie uda nam się dostać do tego bloku

07:55.730 --> 07:57.970
for lub jeśli w jakiś sposób mamy pętlę,

07:57.970 --> 07:59.310
która nie zapętla się przez

07:59.310 --> 08:01.500
nic, ponieważ nie zarejestrowaliśmy

08:01.500 --> 08:04.130
żadnych walidatorów, przekazaliśmy pustą

08:04.130 --> 08:06.350
tablicę tutaj lub coś, więc jeśli uda

08:06.350 --> 08:10.280
nam się ominąć tę pętlę for, zwrócę true jako domyślną.

08:10.280 --> 08:12.800
A teraz zwracamy coś w każdych okolicznościach

08:12.800 --> 08:14.503
i możemy używać validate.

08:15.450 --> 08:19.253
Z tym zobaczmy czy to działa, jeśli teraz zapiszemy to i ponownie załadujemy

08:23.610 --> 08:26.330
naszą aplikację tutaj i spróbuję przesłać to otrzymamy

08:26.330 --> 08:29.400
błąd, invalid input please try again.

08:29.400 --> 08:30.780
Jeśli wpiszę jakiś tekst

08:30.780 --> 08:34.793
tutaj: JavaScript The Complete Guide, wciąż dostaję to, ponieważ

08:35.940 --> 08:38.100
mój numer jest nieprawidłowy.

08:38.100 --> 08:40.440
Jeśli wpiszę tutaj minus jeden to też otrzymamy

08:40.440 --> 08:42.020
to, bo to nie jest dodatnie.

08:42.020 --> 08:45.020
Jeśli jednak wpiszę liczbę dodatnią, to działa.

08:45.020 --> 08:48.230
Jeśli mam liczbę dodatnią, ale pierwsze pole jest puste, to

08:48.230 --> 08:49.860
również działa, więc to jest coś,

08:49.860 --> 08:52.190
nad czym będziemy musieli pracować.

08:52.190 --> 08:54.600
Dowiedzmy się więc, w czym tkwi problem.

08:54.600 --> 08:57.380
I aby się dowiedzieć, faktycznie dodam tutaj mały

08:57.380 --> 08:59.830
log konsoli i zaloguję właściwość, na którą

08:59.830 --> 09:00.720
patrzymy.

09:00.720 --> 09:02.340
Oczywiście moglibyśmy również użyć punktów przerwania

09:02.340 --> 09:03.513
i narzędzi deweloperskich.

09:04.820 --> 09:07.410
Teraz, jeśli kliknę Zapisz tutaj, widzisz pierwszą rzecz, która

09:07.410 --> 09:09.250
zostaje zatwierdzona tutaj jest cena, a następnie

09:09.250 --> 09:10.623
zatrzymujemy się.

09:11.530 --> 09:15.100
Tak więc cena jest pierwszą właściwością, która zostaje zatwierdzona.

09:15.100 --> 09:16.980
I to jest właśnie ciekawa rzecz tutaj,

09:16.980 --> 09:20.090
cena jest właściwie tylko właściwością, która ma tu znaczenie,

09:20.090 --> 09:22.230
bo zwracamy w waloryzacji.

09:22.230 --> 09:25.840
Oznacza to, że za pierwszym razem, gdy znajdziemy jakikolwiek walidator,

09:25.840 --> 09:29.050
który zwraca true lub false, natychmiast wracamy i nie przejmujemy

09:29.050 --> 09:31.480
się innymi walidatorami.

09:31.480 --> 09:33.320
Teraz w fałszywym przypadku jest to w porządku,

09:33.320 --> 09:35.360
ponieważ jeśli jeden element jest fałszywy, jeśli

09:35.360 --> 09:37.450
jedna właściwość jest fałszywa, jest nieważna,

09:37.450 --> 09:40.140
to jesteśmy w porządku, nawet nie patrząc na inne.

09:40.140 --> 09:42.590
Ale dla prawdziwego przypadku jest to problem.

09:42.590 --> 09:44.970
Jeśli zwracamy prawdę za pierwszym razem,

09:44.970 --> 09:49.410
gdy jedna nieruchomość spełnia nasze oczekiwania, to mamy problem.

09:49.410 --> 09:51.540
Powinniśmy więc wzmocnić to poprzez posiadanie

09:51.540 --> 09:55.130
tutaj właściwości isValid, która początkowo ma wartość true.

09:55.130 --> 09:56.780
Czy ważna zmienna, mam na myśli.

09:56.780 --> 10:01.780
A następnie tutaj ustawiamy isValid równe isValid i

10:03.857 --> 10:08.857
to tutaj, i to samo na dole, ustawiamy to równe temu.

10:09.570 --> 10:11.290
Tak, że nie wracamy od razu,

10:11.290 --> 10:14.750
zamiast tego po prostu aktualizujemy isValid i łamiemy

10:14.750 --> 10:16.700
się później, aby nie wpaść.

10:16.700 --> 10:19.200
Rezultatem tego jest to, że w końcu po wszystkich

10:19.200 --> 10:22.710
tych pętlach isValid albo nadal jest prawdziwe, ale jak tylko

10:22.710 --> 10:25.710
jedna z tych kontroli tutaj jest fałszywa, dzięki temu,

10:25.710 --> 10:27.530
jak działa JavaScript, ogólna wartość

10:27.530 --> 10:29.670
isValid będzie fałszywa, ponieważ true

10:29.670 --> 10:33.000
w połączeniu z false zwróci false.

10:33.000 --> 10:36.020
A następnie na dole powinniśmy zwrócić isValid.

10:36.020 --> 10:39.330
Tak więc teraz zapewniamy, że wszystkie właściwości są sprawdzane,

10:39.330 --> 10:42.433
a nie tylko pierwsza, na którą spojrzał JavaScript.

10:43.320 --> 10:45.460
To jednak nie będzie nasz jedyny problem,

10:45.460 --> 10:47.750
mamy tu również problem, gdy przyjrzymy się,

10:47.750 --> 10:50.480
jak rejestrujemy naszą logikę walidatora.

10:50.480 --> 10:53.720
Zawsze nadpisuję zarejestrowane walidatory

10:53.720 --> 10:57.130
dla danej nazwy klasy nowym obiektem.

10:57.130 --> 11:00.050
Zamiast tego powinniśmy dodać wszelkie istniejące walidatory

11:00.050 --> 11:01.630
tutaj, abyśmy nie robili tego.

11:01.630 --> 11:04.140
Na przykład, mamy operator rozprzestrzeniania,

11:04.140 --> 11:08.130
aby wziąć wszelkie istniejące pary wartości klucza dla tej nazwy klasy w

11:08.130 --> 11:10.870
zarejestrowanych walidatorach i dodać je najpierw,

11:10.870 --> 11:14.413
zanim dodamy nasz jeden, również na dole oczywiście.

11:16.890 --> 11:18.733
A teraz z tym, jeśli zapiszemy to

11:19.650 --> 11:21.980
i wrócimy do naszej aplikacji tutaj.

11:21.980 --> 11:24.150
Jeśli mam oba puste, to się nie udaje.

11:24.150 --> 11:26.280
Jeśli wpiszemy poprawną cenę, ale mamy niepoprawny

11:26.280 --> 11:28.490
tytuł, to poniesiemy porażkę.

11:28.490 --> 11:31.510
Jeśli oba są ważne, to się udaje.

11:31.510 --> 11:35.570
Jeśli mamy ważny tytuł, ale nie cenę, ponosimy porażkę.

11:35.570 --> 11:37.230
Również z ceną ujemną.

11:37.230 --> 11:39.170
I dlatego to teraz wygląda dla mnie dobrze

11:39.170 --> 11:42.280
i to jest teraz nasza pierwsza naiwna implementacja tego,

11:42.280 --> 11:44.500
jak taki walidator mógłby działać z pomocą

11:44.500 --> 11:46.670
dekoratorów TypeScript.

11:46.670 --> 11:49.150
I pamiętaj, że to wszystko tutaj, wszystkie

11:49.150 --> 11:52.310
dekoratory, funkcja validate i rejestr, byłyby ukryte

11:52.310 --> 11:53.590
przed tobą.

11:53.590 --> 11:55.820
To może być część biblioteki strony trzeciej, nad którą

11:55.820 --> 11:56.780
pracujesz, oczywiście

11:56.780 --> 11:59.250
w bardziej wyrafinowany sposób niż prawdopodobnie, który

11:59.250 --> 12:01.300
udostępniasz swoim użytkownikom końcowym.

12:01.300 --> 12:04.160
A ty, jako użytkownik końcowy, po prostu zaimportowałbyś

12:04.160 --> 12:06.800
te rzeczy, dodałbyś te dekoratory i wywołałbyś validate,

12:06.800 --> 12:08.840
a wtedy miałbyś bardzo wygodny sposób

12:08.840 --> 12:11.763
dodawania walidacji do swoich klas.
