WEBVTT

00:02.130 --> 00:03.970
المدرب: بادئ ذي بدء ، يمكننا بدء

00:03.970 --> 00:06.480
خادم التطوير الخاص بنا هنا مع بدء npm ، وهذه

00:06.480 --> 00:08.440
عملية يجب أن نستمر في العمل بها لأن

00:08.440 --> 00:10.940
هذا سيراقب ملفاتنا بحثًا عن التغييرات.

00:10.940 --> 00:13.270
وإذا تغير شيء ما ، فإذا قمت بحفظ تغيير

00:13.270 --> 00:15.620
على وجه التحديد ، فسيتم إعادة ترجمة

00:15.620 --> 00:17.776
أنواع الرموز إلى JavaScript ، وإعادة

00:17.776 --> 00:20.090
ترجمة JSX إلى JavaScript ، وفي النهاية

00:20.090 --> 00:22.500
، قم ببناء تطبيق رد الفعل الخاص بك وعرضه

00:22.500 --> 00:25.750
على المضيف المحلي 3000 ، حيث ، على في اللحظة ، لا ترى

00:25.750 --> 00:27.630
الكثير.

00:27.630 --> 00:29.430
يمكنك فقط رؤيته هنا في وحدة تحكم Dev

00:29.430 --> 00:31.800
أنه يبدو أنه يعمل بسبب هذا الإخراج هنا.

00:31.800 --> 00:32.900
أنت لا ترى الكثير بالطبع

00:32.900 --> 00:34.340
لأننا لا نعرض أي شيء هنا

00:34.340 --> 00:36.700
في التطبيق. tsx في الوقت الحالي.

00:36.700 --> 00:38.170
هذا بالطبع سوف يتغير.

00:38.170 --> 00:39.420
ومع تشغيل ذلك ، دعنا

00:39.420 --> 00:41.130
الآن نكتب بعض الأكواد

00:41.130 --> 00:43.580
أو لنحلل ما حصلنا عليه.

00:43.580 --> 00:46.750
في الفهرس. tsx ليس لدينا أي شيء خاص ، أليس كذلك؟

00:46.750 --> 00:49.060
هذا هو كود JavaScript عادي.

00:49.060 --> 00:52.950
في التطبيق. tsx ، نرى هذا النوع من المهام

00:52.950 --> 00:55.250
رغم ذلك وهناك ، ما يمكننا رؤيته هو

00:55.250 --> 00:57.980
أننا خصصنا هذا النوع الغريب للتطبيق.

00:57.980 --> 01:00.270
الآن ، إذا تجاهلنا هذا النوع لمدة ثانية ، فما

01:00.270 --> 01:02.480
الذي يتم تخزينه بالفعل في التطبيق؟

01:02.480 --> 01:04.840
حسنًا ، دالة ، دالة سهم ، لكنها

01:04.840 --> 01:07.290
لا تزال دالة منتظمة ، إذن.

01:07.290 --> 01:09.960
لماذا لا يعمل هذا النوع هنا أو لماذا لا يكون

01:09.960 --> 01:12.570
هذا أحد أنواع وظائفنا التي تعلمناها؟

01:12.570 --> 01:14.030
حسنًا ، إنه موجود تحت الغطاء

01:14.030 --> 01:16.450
، ولكن هذا نوع يتم توفيره من خلال رد الفعل

01:16.450 --> 01:18.100
، والآن ، من المهم بالطبع توفيره

01:18.100 --> 01:21.070
من خلال حزمة أنواع التفاعل.

01:21.070 --> 01:26.070
إذا انتقلت إلى وحدات العقدة ، فسنرى مجلدtypes هنا وهناك ، ونرى

01:26.390 --> 01:28.470
الكثير من الأنواع ، ونرى أيضًا

01:28.470 --> 01:30.670
أنواع التفاعلات هنا ، جميع

01:30.670 --> 01:32.600
أنواع رد فعل دوم.

01:32.600 --> 01:35.840
وفي النهاية ، يتم استيراد هذا النوع ضمنيًا تلقائيًا

01:35.840 --> 01:39.340
من مجلد أنواع التفاعلات ، يمكنك القول.

01:39.340 --> 01:40.870
الآن ، ما هذا النوع؟

01:40.870 --> 01:44.490
FC ببساطة تعني مكون الوظيفة.

01:44.490 --> 01:46.310
هناك أيضًا شكل أطول من هذا ، والذي يمكنك

01:46.310 --> 01:47.570
استخدامه بدلاً من ذلك.

01:47.570 --> 01:49.240
هذا بالضبط نفس النوع.

01:49.240 --> 01:51.090
الآخر هو مجرد اختصار

01:51.090 --> 01:54.300
وهذا يحدد ببساطة أن ما نخزنه هنا في التطبيق

01:54.300 --> 01:57.750
يجب أن يكون وظيفيًا ، ولكن وظيفة مؤهلة كمكون

01:57.750 --> 02:00.550
وظيفي في رد الفعل.

02:00.550 --> 02:02.840
أنت أيضًا تكتب نوعًا ما بالطبع مكونات قائمة

02:02.840 --> 02:05.760
على الفصل ، وبالتالي ، لديك مكون كلاسيكي هنا أيضًا

02:05.760 --> 02:07.420
، وبعد ذلك ، سيتعين عليك تخزين

02:07.420 --> 02:09.480
فصل دراسي هناك بدلاً من وظيفة ، لكننا

02:09.480 --> 02:12.720
سنذهب مع مكونات الوظيفة هنا في هذه الدورة .

02:12.720 --> 02:14.670
الآن ، هذا مكون دالة لأنه

02:14.670 --> 02:17.620
دالة تقوم بإرجاع JSX وهذه هي الطريقة

02:17.620 --> 02:20.850
التي يتم بها إنشاء مكون دالة في رد فعل.

02:20.850 --> 02:24.180
إذا قمت بإزالة بيان الإرجاع هذا مؤقتًا ، فيمكننا

02:24.180 --> 02:26.730
الحصول على خطأ هنا ، كل هذا إذا حاولت

02:26.730 --> 02:28.800
حفظه وأراد تجميعه.

02:28.800 --> 02:32.440
قد نحصل على خطأ لأننا الآن ، نخبر TypeScript

02:32.440 --> 02:34.960
أننا هنا ، نريد تخزين مكون دالة

02:34.960 --> 02:38.520
، وكل ما نخزنه هو وظيفة عادية ، وليس دالة تُرجع

02:38.520 --> 02:40.770
JSX أو أي شيء آخر مؤهل كعنصر

02:40.770 --> 02:42.800
رد فعل.

02:42.800 --> 02:44.440
وبالتالي ، سيكون هذا غير صالح

02:44.440 --> 02:45.810
وسيتعين علينا إصلاحه.

02:45.810 --> 02:48.530
هنا ، يمكننا بالفعل أن نرى كيف يعمل TypeScript

02:48.530 --> 02:50.360
على تحسين مشروعنا قليلاً.

02:50.360 --> 02:52.500
إنه يمنحنا أمانًا إضافيًا من النوع

02:52.500 --> 02:55.420
ويتأكد من أننا لا نستطيع العمل في موقف حيث نقوم

02:55.420 --> 02:58.353
، على سبيل المثال ، ببناء مكون غير صالح.

02:59.200 --> 03:03.230
ملاحظة جانبية ، إذا كان من غير الواقعي أن تنسى بيان

03:03.230 --> 03:05.370
الإرجاع هذا ، فضع في اعتبارك

03:05.370 --> 03:07.970
أنك تبني مكونًا أكبر بعبارات if

03:07.970 --> 03:11.070
متعددة وبيانات إرجاع مختلفة.

03:11.070 --> 03:14.370
قد تنسى واحدًا في فرع واحد من عبارة if الخاصة بك ،

03:14.370 --> 03:17.010
ومن ثم يمكن لـ TypeScript بالتأكيد حفظ

03:17.010 --> 03:19.130
مؤخرتك وإعطائك هذا التحذير قبل

03:19.130 --> 03:21.500
ذلك بقليل ، مقارنة بوقت التشغيل ، حيث

03:21.500 --> 03:23.710
قد يتعطل في بعض المواقف.

03:23.710 --> 03:25.620
هذا ما تفعله TypeScript

03:25.620 --> 03:27.740
، لكن مع ذلك ، يكفي الحديث.

03:27.740 --> 03:28.690
دعنا نبني شيئًا

03:28.690 --> 03:31.670
وأريد أن نبني هنا تطبيقًا بسيطًا نسبيًا ، تطبيق

03:31.670 --> 03:34.590
مهام ، كلاسيكي جدًا ، ولكن تطبيق مهام يسمح لنا

03:34.590 --> 03:36.370
بالتالي بممارسة بعض المفاهيم

03:36.370 --> 03:39.480
الأساسية للتفاعل مع TypeScript.

03:39.480 --> 03:41.270
وبالتالي ، في المحاضرات التالية

03:41.270 --> 03:44.363
، دعنا نبدأ في الواقع مكوناتنا المخصصة الأولى.
