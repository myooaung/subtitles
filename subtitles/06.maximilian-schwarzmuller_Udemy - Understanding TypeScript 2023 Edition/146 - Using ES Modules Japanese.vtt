WEBVTT

00:02.400 --> 00:04.350
講師：ネームスペースはかなりいいのですが､

00:04.350 --> 00:07.240
必ずしも完璧ではありません｡

00:07.240 --> 00:13.290
前回の講義で､ 各ファイルにすべてのペンデンシーを手動で追加するという問題を見ました｡

00:13.290 --> 00:15.620
プロジェクトリストから削除､ ドラッグ＆ドロップしても､

00:15.620 --> 00:18.900
例えばyesは､ エラーなくコンパイルされます｡

00:18.900 --> 00:20.350
これは理想的ではありません｡ 

00:20.350 --> 00:22.360
他のファイルがドラッグ・ドロップ・モデルをインポートしているかどうかによって､

00:22.360 --> 00:27.550
うまくいくかどうかが決まりますが､ 最終的にはここで必要になります｡

00:27.550 --> 00:29.100
ここではどちらでしょう｡ 

00:29.100 --> 00:31.533
ですから､ 技術的には､ これを削除しても､

00:31.533 --> 00:33.200
ここでは動作します｡

00:33.200 --> 00:35.580
でも､ これはすごいことではなく､ かなり危険なことなんです｡ 

00:35.580 --> 00:38.560
もし､ あるファイルがそれを処理してくれるという事実に頼った場合､

00:38.560 --> 00:41.990
私たちを救ってくれたそのファイルを削除したり変更したりすると､

00:41.990 --> 00:49.240
突然全く関係のないものを変更してしまい､ アプリが動かなくなるのです｡

00:49.240 --> 00:51.420
それは絶対に避けたい｡ 

00:51.420 --> 00:58.050
ですから､ どのファイルから何をインポートするのかを明示したインポートとエクスポートがあるといいですね｡

00:58.050 --> 01:01.120
また､ 例えばDrag Targetのようなものが必要な場合､

01:01.120 --> 01:04.840
明示的にインポートしていないとエラーになります｡

01:04.840 --> 01:06.450
それは基本的に私たちが望むところです｡ 

01:06.450 --> 01:10.235
そして､ ES6モジュールでこのような挙動になるのです｡ 

01:10.235 --> 01:12.930
さて､ ES6モジュールは､ 世界のタイプの外にも存在し､

01:12.930 --> 01:14.800
現代のブラウザは､ ネイティブにそれらをサポートし､

01:14.800 --> 01:22.960
ブラウザは､ その後､ 基本的に実行時にファイルのすべてのpendenciesをダウンロードする場所です｡

01:22.960 --> 01:25.150
しかし､ 型はインポートすることもでき､ それを使用するときに､

01:25.150 --> 01:28.350
初期の型サポートを得ることができます｡

01:28.350 --> 01:31.007
さて､ ES6モジュールはどのように動作するのでしょうか｡ 

01:31.007 --> 01:33.600
再びドラッグ＆ドロップから始めましょう｡ 

01:33.600 --> 01:35.240
名前空間というのは､ 純粋なタイプの特徴なので､

01:35.240 --> 01:37.360
削除しましょう｡

01:37.360 --> 01:40.030
でも､ 輸出というキーワードは残しておこう｡ 

01:40.030 --> 01:42.150
エクスポートのキーワードは､ 名前空間を操作するためにそこにあるだけでなく､

01:42.150 --> 01:49.800
実際にはtypスクリプトによってすべてのように重要であるデフォルトのJavaスクリプトの構文です｡

01:49.800 --> 01:53.600
このファイルからこのインターフェーズとここもエクスポートして､

01:53.600 --> 01:58.460
それを別のファイルにインポートするということです｡

01:58.460 --> 02:02.980
今回のケースでは､ プロジェクトアイテムとプロジェクトリストのファイルに必要です｡

02:02.980 --> 02:05.230
では､ プロジェクトの項目から見ていきましょう｡ 

02:05.230 --> 02:11.450
ESモジュールから何かをインポートするので､ そのESモジュールのシンタックスで､

02:11.450 --> 02:18.970
実際のコードを書き始める前に､ ファイルの先頭かその近くにimportを指定します｡

02:18.970 --> 02:27.320
インポート元を指定し､ そのファイルをインポート先のファイルからの相対パスで指定します｡

02:27.320 --> 02:31.030
この場合､ 2つのドットとスラッシュでIレベルを上げる必要があるわけです｡

02:31.030 --> 02:32.509
ソースフォルダにいるわけですが､

02:32.509 --> 02:37.450
ここでモジュールフォルダに移動して､ ドラッグ＆ドロップでインポートする必要があります｡

02:37.450 --> 02:43.480
重要なのは､ ここにドットJSを追加することです｡

02:43.480 --> 02:55.010
これは､ すでにコンパイルされているかのようにインポートする必要があるためです｡

02:55.010 --> 02:59.320
そして､ そのファイルからインポートするものを指定するために､

02:59.320 --> 03:03.150
中括弧を追加するのです｡

03:03.150 --> 03:08.480
そこで､ すでに自動補完されるのですが､ ドラッガブルをインポートしたいのです｡

03:08.480 --> 03:10.910
これでdraggableがここで使えるようになり､

03:10.910 --> 03:14.430
typeは使えないと見て､ 喜んでいます｡

03:14.430 --> 03:17.930
あとは､ 実行時に表示できるように､ すべてを変換する必要があります｡

03:17.930 --> 03:20.370
そこで､ ここでも名前空間をなくしましょう｡ 

03:20.370 --> 03:22.340
これで､ 中括弧も閉じなければなりません｡ 

03:22.340 --> 03:24.870
そして今､ 例えばここでは､ 欲しいものが手に入る一方で､

03:24.870 --> 03:27.540
エラーが発生し､ コンポーネントエラー､ プロジェクト､

03:27.540 --> 03:29.650
これがすべて欠落しているのです｡

03:29.650 --> 03:31.890
では､ これらをすべてエクスポート､ インポートしてみましょう｡ 

03:31.890 --> 03:33.220
例えば､ ベース・コンポーネントでは､

03:33.220 --> 03:36.810
名前空間を取り除き､ エクスポート・キーワードは学習したとおりにしてください｡

03:36.810 --> 03:40.810
閉じ中括弧を取り除き､ 再フォーマットしてプロジェクトインポートする｡

03:40.810 --> 03:43.380
名前空間はいつでも捨てられる｡ 

03:43.380 --> 03:48.803
そして､ ここにあるすべてのリファレンスは､ 実はどこにでもあるリファレンス・インポートをすべて削除することができるのです｡

03:51.300 --> 03:53.593
名前空間中括弧をすべて取り除く｡ 

03:55.010 --> 03:58.466
プロジェクトリスト､ 名前空間と参照をすべて取り除き､

03:58.466 --> 04:00.690
下の閉じ中括弧も取り除きます｡

04:00.690 --> 04:03.320
デコレーターは､ 名前空間と閉じ中括弧を取り除き､

04:03.320 --> 04:07.940
ドラッグ＆ドロップは､ すでに取り除きました｡

04:07.940 --> 04:11.920
プロジェクトでは､ 名前空間と閉じ中括弧を取り除く｡

04:11.920 --> 04:16.223
プロジェクトは､ 当然のことながら､ 名前空間とクロージングを取り除くために残りました｡

04:18.390 --> 04:22.620
ここでは､ 他のファイルからインポートされたプロジェクトに依存していますが､

04:22.620 --> 04:26.620
そのファイルへの参照はしていません｡

04:26.620 --> 04:29.880
それが､ 私が言っていた危険な行動だったわけです｡

04:29.880 --> 04:31.871
もし､ インポートしなかったり､ 他のファイルの名前空間でプロジェクトの部分を参照しなかったりすれば､

04:31.871 --> 04:36.710
これは失敗だったかもしれません｡

04:36.710 --> 04:39.090
だから､ 決定的に理想的ではなかったんです｡ 

04:39.090 --> 04:41.560
しかし､ これでリファクタリングを続けられるようになりました｡ 

04:41.560 --> 04:47.550
検証では､ ここにある名前スペースと､ 一番下にある閉じ中括弧をすべて取り除きます｡

04:47.550 --> 04:51.503
そして最後に､ アプリTSですが､ これらのインポートや名前空間を取り除くことができます｡

04:52.700 --> 04:56.988
そのため､ いたるところでエラーが発生しましたが､ これでやり直すことができます｡

04:56.988 --> 04:59.560
では､ ベースとなるコンポーネントを最初から作り直すとしましょうか｡ 

04:59.560 --> 05:01.610
これはいい感じだ｡ 不満はなさそうだが､

05:01.610 --> 05:03.700
欲しいものはすべて持っているようだ｡

05:03.700 --> 05:06.250
プロジェクトインポートは､ まあ､ 文句はありますよ｡ 

05:06.250 --> 05:08.450
例えば､ そこにはコンポーネントが必要です｡ 

05:08.450 --> 05:15.830
そこで､ 一番上にimportを追加して､ ドットスラッシュのベースコンポーネントからコンポーネントをインポートすることにしましょう｡

05:15.830 --> 05:19.990
このように､ 同じフォルダーにあるものを相対的にインポートすることができます｡

05:19.990 --> 05:22.370
最初にドットスラッシュ､ 次にファイル名､

05:22.370 --> 05:24.490
そしてすべてが重要なドットJS｡

05:24.490 --> 05:26.753
最後にドットJSを忘れないでください｡ 

05:28.100 --> 05:30.250
ここで､ validatable interphaseも必要で､

05:31.170 --> 05:36.810
validateメソッド､ auto mind､ project stateも必要です｡

05:36.810 --> 05:39.140
では､ これらのものをすべてインポートしてみましょう｡

05:39.140 --> 05:46.149
ドットスラッシュからインポートするか､ あるいは､ 1レベル上がって､ utilationドットJS､ That

05:46.149 --> 05:52.100
File､ validatable､ validate関数からインポートし､ 1レベル上がって､

05:53.010 --> 06:00.350
auto bindデコレータautobind JSからインポートしましょう｡

06:00.350 --> 06:02.600
そして最後に､ プロジェクトの状態ですが､

06:02.600 --> 06:07.580
1レベル上の状態からインポートしてみましょう｡

06:07.580 --> 06:13.250
そこからエクスポートしたプロジェクトの状態定数をインポートすることができます｡

06:13.250 --> 06:16.773
これで､ このファイルを動作させるために必要なインポートがすべて揃いました｡

06:18.190 --> 06:20.480
では､ 次にプロジェクト項目に移りましょう｡ 

06:20.480 --> 06:23.270
この中には､ オートバインドが必要で､ コンポーネントが必要で､

06:23.270 --> 06:24.853
プロジェクトモデルが必要です｡

06:24.853 --> 06:26.700
では､ これらを全部足してみましょう｡ 

06:26.700 --> 06:30.520
例えば､ dot dot slash models project

06:30.520 --> 06:34.523
JSからプロジェクトモデルをインポートしてみましょう｡

06:35.580 --> 06:41.110
同じフォルダにあるコンポーネントも追加してみましょう｡

06:41.110 --> 06:45.530
そこで､ ドットスラッシュのベースコンポーネントJSとオートバインドのインポート､

06:45.530 --> 06:55.790
ドットスラッシュのデコレータオートバインドのJSからオートバインドのインポートをしましょう｡

06:56.020 --> 06:59.383
そして今､ このファイルにも必要なものがすべて揃っています｡ 

07:01.260 --> 07:03.410
では､ プロジェクトリストに移りましょう｡ 

07:03.410 --> 07:10.250
プロジェクトリストでは､ onなどのコンポーネントも必要なので､

07:10.250 --> 07:14.260
プロジェクトアイテムからコピーして､

07:14.260 --> 07:19.420
プロジェクトリストTSに追加します｡

07:19.420 --> 07:24.550
さらに､ プロジェクトの状態も必要です｡

07:24.550 --> 07:26.540
そう､ これらは私たちに必要なものなのです｡ 

07:26.540 --> 07:28.780
また､ プロジェクトのアイテムクラスも｡ 

07:28.780 --> 07:32.720
そのため､ プロジェクトモデル・ファイルから､ プロジェクトのステータスをインポートすることも可能です｡

07:32.720 --> 07:35.340
このように､ 中括弧で区切るだけで､

07:35.340 --> 07:41.740
1つのファイルから複数のエクスポートしたものをインポートすることができます｡

07:41.740 --> 07:45.910
また､ stateフォルダからproject state

07:46.790 --> 07:48.790
JSという定数をインポートし､

07:48.790 --> 07:57.130
最後に､ ここ一番で必要なproject itemクラスもインポートしています｡

07:57.130 --> 08:03.623
そこで､ ドットスラッシュプロジェクトアイテムドットJSからプロジェクトアイテムをインポートします｡

08:06.810 --> 08:08.280
では､ 次に進みましょう｡ 

08:08.280 --> 08:11.280
Autobindは問題ないのですが､ プロジェクトのステータスに不満があり､

08:11.280 --> 08:13.600
プロジェクトモデルが必要です｡

08:13.600 --> 08:15.740
それでは､ 1つ上の階層にあるモデル

08:16.820 --> 08:22.823
project dot JS からプロジェクトをインポートしてみましょう｡

08:24.450 --> 08:27.630
また､ ここではプロジェクトのステータスを使用しているので､

08:27.630 --> 08:29.573
同じファイルからインポートしましょう」

08:32.320 --> 08:38.810
そして､ 最後になりましたが､ アプリのTSファイルを取得し､ プロジェクトの入力をインポートする必要があります｡

08:38.810 --> 08:43.610
ドットスラッシュコンポーネントのプロジェクト入力から

08:43.610 --> 08:48.030
この状態で保存すると､ エラーなくコンパイルされ､

08:49.290 --> 09:00.823
ES6モジュールを使用してインポートとエクスポートを整理することができます｡

09:02.640 --> 09:07.040
しかし､ ブラウザで見てみると､ エラーが出ている｡

09:07.040 --> 09:12.013
その理由は､ distフォルダを確認すると､ バンドルJSファイルを正しく取得できているからです｡

09:13.040 --> 09:15.900
ここで､ もう一度TSコンフィグを切り替える必要があります｡ 

09:15.900 --> 09:19.070
ここで一つ､ 今はAMDではなく､

09:19.070 --> 09:22.420
ES2015を使うべきでしょう｡

09:22.420 --> 09:29.300
Thanは基本的に､ ESモジュールを導入したagmaスクリプトのバージョンであるES6のコードワードです｡

09:29.300 --> 09:31.260
つまり､ タイプスクリプトには､ インポートを何かに変換するのではなく､

09:31.260 --> 09:36.240
そのままの状態を維持するように指示しているのです｡

09:36.240 --> 09:39.250
モダンブラウザなら理解できる｡ 

09:39.250 --> 09:43.433
また､ ESモジュールではサポートされていないため､

09:44.950 --> 09:50.670
outファイルをコメントアウトする必要があります｡

09:50.670 --> 09:53.590
そして､ distフォルダに格納されるのは､ 基本的にソースフォルダの複製ですが､

09:53.590 --> 09:58.690
Javaスクリプトファイルが格納されています｡

09:58.690 --> 10:00.480
distフォルダにアプリJSファイルができたので､

10:00.480 --> 10:06.350
index HDMLファイルに戻り､ アプリJSを再度インポートする必要があります｡

10:06.350 --> 10:08.910
また､ このアプリのJSファイルには､ import文が含まれています｡

10:08.910 --> 10:11.180
先ほど述べたように､ これはJavaスクリプト､ 最新のJavaスクリプトエンジン､

10:11.180 --> 10:15.900
および最新のブラウザーでサポートされているからです｡

10:15.900 --> 10:19.440
そのため､ ブラウザがこれらのインポートを解決してくれるのです｡

10:19.440 --> 10:24.240
では､ これをリロードすると､ やはりエラーが発生するのですね｡

10:24.240 --> 10:27.310
モジュール外部でimport文は使用できません｡ 

10:27.310 --> 10:33.150
最近のブラウザはこのシンテックスをサポートしていますが､ 使用したいことをブラウザに伝える必要があります｡

10:33.150 --> 10:37.470
そして､ このようなimportsステートメントがあるファイルをインポートする際には､

10:37.470 --> 10:42.777
ここの（つぶやき）を削除して､ 代わりにscriptタグで伝えるのです｡

10:42.777 --> 10:46.313
type equals moduleを使用しています｡ 

10:47.300 --> 10:50.450
これを安全にすると､ これが動作することがわかります｡

10:50.450 --> 10:56.120
そして､ ここに何かを追加すると､ 再び動作するアプリケーションが得られます｡

10:56.120 --> 10:58.910
ところで､ ネットワークタブを調べてみると､

10:58.910 --> 11:01.680
リロードすると､ たくさんのネットワーク要求が発生していることがわかりますが､

11:01.680 --> 11:07.410
少しズームアウトすると､ もっとよくわかります｡

11:07.410 --> 11:10.340
私たちのJavaスクリプトファイルは､ すべてここで要求されています｡ 

11:10.340 --> 11:14.780
これらは､ 当社のインポートに遭遇した際に､ ブラウザが自動的に要求するものです｡

11:14.780 --> 11:19.410
つまり､ アプリのJSから始まり､ プロジェクトの入力JSへのインポートを見ているわけです｡

11:19.410 --> 11:23.160
ここで､ それ故に当然ながら次のリクエストはプロジェクトインプットに行く｡

11:23.160 --> 11:25.410
また､ プロジェクトリストについても同様です｡ 

11:25.410 --> 11:27.360
例えば､ プロジェクトの入力では､

11:27.360 --> 11:33.400
ベース・コンポーネントJSからの入力を見ることになります｡

11:33.400 --> 11:35.530
これはブラウザによって行われるのですが､

11:35.530 --> 11:40.850
私たちはこれを利用して､ ファイルを分割する別の方法を手に入れました｡

11:40.850 --> 11:53.400
さらに､ 各ファイルから必要なものを明確に述べることができるという利点もあります｡ インポートを省略すると､ type-scriptが怒鳴ってきますが､

11:53.400 --> 11:58.870
以前のアプローチではそうなりませんでした｡

11:58.870 --> 12:00.710
他のプロジェクト､ 例えばangularプロジェクトでtype

12:00.710 --> 12:12.210
scriptを使ったことがある場合､ ここでファイル拡張子を指定する必要がないことにも慣れているかもしれません｡

12:12.210 --> 12:14.580
それがなく､ ファイルのインポートをブラウザに依存している限りは､

12:14.580 --> 12:18.833
追加の拡張子を追加する必要があります｡
