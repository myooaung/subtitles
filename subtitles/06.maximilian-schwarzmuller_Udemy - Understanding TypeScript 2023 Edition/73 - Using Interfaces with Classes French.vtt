WEBVTT

00:02.260 --> 00:05.180
Instructeur : Si nous revenons à cette interface, la

00:05.180 --> 00:08.230
question est de savoir pourquoi nous en avons besoin.

00:08.230 --> 00:10.160
N'aurions-nous pas exactement la même

00:10.160 --> 00:13.420
chose si nous ajoutions un type personnalisé ici et là ?

00:13.420 --> 00:15.580
La différence est simplement que nous devons ajouter

00:15.580 --> 00:18.470
un signe égal et que nous disons que le type Personne est un objet

00:18.470 --> 00:19.940
qui ressemble à ceci ?

00:19.940 --> 00:21.490
Et en effet, si nous sauvegardons

00:21.490 --> 00:23.220
cela, cela compile sans erreurs.

00:23.220 --> 00:26.740
Nous pouvons donc remplacer notre interface par un tel type et

00:26.740 --> 00:28.490
cela fonctionne comme avant.

00:28.490 --> 00:31.290
Alors pourquoi avons-nous une interface ?

00:31.290 --> 00:32.277
Eh bien, une interface

00:32.277 --> 00:35.310
et un type personnalisé ne sont pas exactement les mêmes, mais

00:35.310 --> 00:39.260
souvent, vous pouvez les utiliser de manière interchangeable et vous pouvez

00:39.260 --> 00:42.130
utiliser une interface au lieu d'un type personnalisé

00:42.130 --> 00:43.520
ou l'inverse.

00:43.520 --> 00:45.720
Il y a aussi quelques différences.

00:45.720 --> 00:47.400
Eh bien, une différence naturelle est que

00:47.400 --> 00:49.070
les interfaces ne peuvent être utilisées

00:49.070 --> 00:51.470
que pour décrire la structure d'un objet, vous pouvez utiliser

00:51.470 --> 00:53.780
le type pour cela aussi, mais au lieu d'un type personnalisé,

00:53.780 --> 00:55.250
vous pouvez également stocker d'autres

00:55.250 --> 00:56.800
choses comme les types d'union et ainsi

00:56.800 --> 01:00.350
de suite ce que nous avons fait au début du cours.

01:00.350 --> 01:03.740
On dirait que le type est donc plus souple, mais

01:03.740 --> 01:08.510
le revers de la médaille est que l'interface est plus claire.

01:08.510 --> 01:10.870
Lorsque vous définissez quelque chose comme une

01:10.870 --> 01:12.900
interface, il est très clair que vous voulez

01:12.900 --> 01:15.580
définir la structure d'un objet avec cela.

01:15.580 --> 01:18.360
Et en effet, lorsqu'il s'agit de définir des types d'objets,

01:18.360 --> 01:21.630
on voit plus souvent des interfaces dans la nature.

01:21.630 --> 01:23.800
Ensuite, vous voyez les types personnalisés.

01:23.800 --> 01:26.410
Une autre chose que vous pouvez faire avec les interfaces,

01:26.410 --> 01:27.530
mais que vous ne pouvez

01:27.530 --> 01:30.090
faire qu'avec les types personnalisés, c'est que vous

01:30.090 --> 01:33.360
pouvez implémenter une interface dans une classe.

01:33.360 --> 01:34.820
Qu'est-ce que nous entendons par là ?

01:34.820 --> 01:38.360
La raison pour laquelle vous travaillez souvent avec des interfaces

01:38.360 --> 01:40.550
est qu'une interface peut être utilisée

01:40.550 --> 01:43.750
comme un contrat qu'une classe peut mettre en œuvre et

01:43.750 --> 01:46.400
auquel elle doit adhérer.

01:46.400 --> 01:48.150
Que voulons-nous dire par là ?

01:48.150 --> 01:52.390
Disons que notre interface n'est pas une interface Personne

01:52.390 --> 01:53.970
avec le nom et l'âge, mais

01:53.970 --> 01:57.690
que nous la nommons plutôt Greetable.

01:57.690 --> 01:59.270
Ce nom peut sembler étrange,

01:59.270 --> 02:01.090
mais en fin de compte, cela signifie

02:01.090 --> 02:03.560
simplement que tout objet devant être

02:03.560 --> 02:06.310
traité comme Greetable doit être un objet avec

02:06.310 --> 02:09.251
un nom et une méthode greet.

02:09.251 --> 02:10.783
Donc maintenant, nous pourrions

02:10.783 --> 02:14.630
dire que cette variable user1 devrait contenir un objet Greetable et

02:14.630 --> 02:16.730
bien sûr, nous obtenons une erreur parce

02:16.730 --> 02:19.930
que nous avons plus que juste name et greet.

02:19.930 --> 02:22.000
Mais nous pouvons utiliser cette

02:22.000 --> 02:25.860
interface pour la partager entre plusieurs classes, nous devons

02:25.860 --> 02:27.410
nous assurer que chaque classe

02:27.410 --> 02:30.860
qui adhère à cette interface doit avoir une propriété name

02:30.860 --> 02:33.410
et une méthode greet.

02:33.410 --> 02:35.730
Donc ici, nous pouvons maintenant ajouter une classe Personne,

02:35.730 --> 02:36.970
le nom est à nouveau disponible car

02:36.970 --> 02:38.540
nous avons renommé l'interface.

02:38.540 --> 02:40.790
Et maintenant, dites à Typescript

02:40.790 --> 02:45.480
et à cette classe d'adhérer à cette interface.

02:45.480 --> 02:48.350
Il doit mettre en œuvre cette interface.

02:48.350 --> 02:53.000
Il doit suivre le contrat établi par cette interface.

02:53.000 --> 02:55.260
Pour ce faire, nous ajoutons le mot clé implements

02:55.260 --> 02:56.930
après le nom de la classe.

02:56.930 --> 02:59.280
Et puis, le nom de notre interface, Greetable.

03:00.420 --> 03:02.780
Et vous pouvez implémenter plus d'une interface.

03:02.780 --> 03:04.710
C'est une différence par rapport à l'héritage.

03:04.710 --> 03:07.270
Vous ne pouvez hériter que d'une seule classe,

03:07.270 --> 03:09.370
vous pouvez implémenter plusieurs interfaces

03:09.370 --> 03:12.730
en les séparant simplement par une virgule, donc là, on pourrait

03:12.730 --> 03:14.750
avoir une autre interface si on en avait

03:14.750 --> 03:16.000
une.

03:16.000 --> 03:17.710
Ici, je n'en ai qu'un seul.

03:17.710 --> 03:20.350
Et maintenant, l'implication de ceci est que nous

03:20.350 --> 03:21.740
obtenons une erreur ici parce

03:21.740 --> 03:25.200
que notre classe implémente incorrectement l'interface.

03:25.200 --> 03:27.240
Il n'a pas la propriété name,

03:27.240 --> 03:29.690
n'a pas la méthode greet.

03:29.690 --> 03:33.960
Donc maintenant, nous devons définir ceci ici dans notre classe, peut-être

03:33.960 --> 03:35.610
que je vais définir un constructeur

03:35.610 --> 03:38.173
où nous obtenons une valeur pour le nom, et ensuite

03:39.010 --> 03:41.260
le configurer comme ceci, et où nous ajoutons

03:41.260 --> 03:44.380
également notre méthode d'accueil où nous pourrions

03:44.380 --> 03:48.080
alors avoir cette logique à partir de là.

03:48.080 --> 03:50.780
Maintenant, dans notre classe, nous pouvons avoir plus que ça.

03:50.780 --> 03:52.340
Nous pouvons avoir plus de champs, nous

03:52.340 --> 03:53.920
pouvons avoir plus de méthodes, nous

03:53.920 --> 03:56.030
pouvons aussi étendre cette classe, nous pouvons

03:56.030 --> 03:59.170
travailler avec cette classe comme nous l'avons toujours fait.

03:59.170 --> 04:02.640
Mais nous sommes obligés d'implémenter cette méthode correctement

04:02.640 --> 04:04.400
pour avoir cette propriété de nom

04:04.400 --> 04:07.040
parce que nous implémentons cette interface.

04:07.040 --> 04:09.740
C'est pourquoi les interfaces sont souvent utilisées

04:09.740 --> 04:13.870
pour partager des fonctionnalités entre différentes classes sans tenir

04:13.870 --> 04:16.550
compte de leur mise en œuvre concrète.

04:16.550 --> 04:19.240
Vous ne pouvez pas avoir de mise en œuvre ou de valeurs à l'intérieur

04:19.240 --> 04:22.450
des interfaces, mais en ce qui concerne la structure, les caractéristiques

04:22.450 --> 04:24.980
qu'une classe doit avoir.

04:24.980 --> 04:28.120
C'est un peu comme travailler avec des classes abstraites,

04:28.120 --> 04:29.640
donc, la différence étant

04:29.640 --> 04:33.520
qu'une interface n'a aucun détail d'implémentation du tout, alors

04:33.520 --> 04:37.160
que les classes abstraites peuvent être un mélange de vous devez

04:37.160 --> 04:39.330
écraser ces parties et j'ai une implémentation

04:39.330 --> 04:42.470
concrète parties.

04:42.470 --> 04:43.730
C'est une différence importante

04:43.730 --> 04:46.860
entre les interfaces et les classes abstraites.

04:46.860 --> 04:47.850
Maintenant avec cela cependant,

04:47.850 --> 04:49.790
nous avons notre classe de personne ici.

04:49.790 --> 04:53.910
Et maintenant ici, user1 peut être créé en utilisant

04:53.910 --> 04:55.930
new Person et en entrant

04:55.930 --> 04:58.090
le nom par exemple.

04:58.090 --> 04:59.730
Et maintenant, nous voyons qu'il

04:59.730 --> 05:02.300
n'y a pas de problème à ce que nous ayons cet âge ici

05:02.300 --> 05:05.870
dans user1 parce que nous avons construit user1 sur la base de Person,

05:05.870 --> 05:07.540
Person implémente Greetable,

05:07.540 --> 05:10.440
et vous pouvez ajouter plus de Greetable dans une classe

05:10.440 --> 05:15.120
mais vous devez satisfaire les conditions définies par l'interface.

05:15.120 --> 05:17.130
Et donc maintenant, si nous sauvegardons tout,

05:17.130 --> 05:18.730
nous avons un code valide, et si nous enregistrons

05:18.730 --> 05:23.040
notre user1 là bas avec console. nous voyons qu'il s'agit d'un

05:23.040 --> 05:25.430
objet normal avec l'âge et le nom

05:25.430 --> 05:27.590
dans ce cas, mais l'élément clé

05:27.590 --> 05:30.950
est qu'il est basé sur une classe qui implémente

05:30.950 --> 05:32.770
l'interface.

05:32.770 --> 05:35.550
Et vous pouvez alors tous utiliser l'interface comme un type.

05:35.550 --> 05:37.780
Bien sûr, nous aurions pu définir le type Person,

05:37.780 --> 05:40.580
mais comme vous le voyez, l'utilisation du type Greetable

05:40.580 --> 05:42.200
ici fonctionne car l'objet Person

05:42.200 --> 05:45.090
que nous stockons dans la classe user1 à la fin est basé sur l'interface

05:45.090 --> 05:46.300
Greetable.

05:46.300 --> 05:47.750
Il met cela en œuvre.

05:47.750 --> 05:49.820
C'est donc une autre fonctionnalité puissante.

05:49.820 --> 05:53.690
Vous pouvez utiliser une interface comme type d'une constante

05:53.690 --> 05:58.010
ou d'une variable qui stockera ensuite une autre classe d'un autre

05:58.010 --> 06:03.950
type qui, à son tour, est basée sur le type d'interface car elle l'implémente.

06:03.950 --> 06:06.530
Voilà donc les interfaces en quelques mots.

06:06.530 --> 06:08.643
De nombreuses fonctionnalités puissantes sont incluses.
