WEBVTT

00:02.240 --> 00:04.870
Moderator: So, wir haben unsere erste Komponente hinzugefügt.

00:04.870 --> 00:06.090
Fügen wir eine zweite hinzu.

00:06.090 --> 00:09.970
NewTodo. tsx ist ein Dateiname.

00:09.970 --> 00:13.060
Darin importieren wir natürlich react von react.

00:13.060 --> 00:16.170
Und man könnte natürlich auch klassenbasierte Komponenten bauen.

00:16.170 --> 00:18.270
Dies wird auch vollständig unterstützt,

00:18.270 --> 00:22.410
aber ich werde nur diese modernen funktionalen Komponenten verwenden.

00:22.410 --> 00:24.070
Auch hier haben wir also eine Funktion,

00:24.070 --> 00:26.180
die später unsere Komponente bilden wird.

00:26.180 --> 00:29.258
Ich exportiere NewTodo als Standard und füge eine Typzuweisung

00:29.258 --> 00:31.260
hinzu, um klarzustellen, dass es sich

00:31.260 --> 00:33.021
um eine Typfunktionskomponente

00:33.021 --> 00:34.410
handeln wird.

00:34.410 --> 00:35.800
Und deshalb fehlen hier natürlich

00:35.800 --> 00:38.220
einige zurückgegebene jsx-Codes.

00:38.220 --> 00:39.730
Hier werde ich also ein Formular zurückgeben,

00:39.730 --> 00:42.030
in das ich alle Steuerelemente einfügen möchte, die ich benötige,

00:42.030 --> 00:43.780
damit der Benutzer neue ToDos hinzufügen kann.

00:45.060 --> 00:48.650
Fügen wir nun diese neue ToDo-Komponente in die App-Komponente ein.

00:48.650 --> 00:53.650
Hier können wir also NewTodo aus . /components/NewTodo und fügen Sie es

00:55.130 --> 00:58.095
einfach hier anstelle des Kommentars ein.

00:58.095 --> 01:00.520
NewTodo als selbstschließende Komponente,

01:00.520 --> 01:02.790
denn im Moment übergeben wir nichts zwischen

01:02.790 --> 01:04.750
dem öffnenden und dem schließenden

01:04.750 --> 01:07.784
Tag, und wir haben hier auch keine Requisiten, zumindest

01:07.784 --> 01:09.263
im Moment nicht.

01:10.140 --> 01:11.540
Anstelle dieser Komponente

01:11.540 --> 01:13.330
können wir nun eine Eingabe und

01:13.330 --> 01:16.190
danach eine Schaltfläche hinzufügen.

01:16.190 --> 01:18.117
Fügen Sie hier also ein div ein,

01:18.117 --> 01:20.020
in dem ich ein Label mit htmlFor-Attributen

01:20.020 --> 01:24.880
haben möchte, das auf, sagen wir, "todo-text" zeigt.

01:24.880 --> 01:26.560
Das ist alles nur Markup

01:26.560 --> 01:31.250
hier, wo ich sage "Todo Text" und dann Input-Element vom Typ Text

01:31.250 --> 01:35.170
mit einer id von "todo text", so dass die Beschriftung

01:35.170 --> 01:36.900
und die Eingabe korrekt

01:36.900 --> 01:39.640
semantisch verbunden sind.

01:39.640 --> 01:41.440
Und unter diesem div hier füge ich anstelle

01:41.440 --> 01:43.120
des Formulars eine Schaltfläche hinzu,

01:43.120 --> 01:44.437
auf der steht: "ADD TODO", und

01:45.297 --> 01:47.970
diese Schaltfläche sollte vom Typ "Submit" sein, damit sie,

01:47.970 --> 01:49.670
nun ja, das Formular absendet.

01:49.670 --> 01:51.900
Dies ist nun ein sehr einfaches Formular, das wir verwenden können,

01:51.900 --> 01:53.143
um eine neue Aufgabe hinzuzufügen.

01:54.580 --> 01:57.060
Stellen wir nun sicher, dass dies funktioniert,

01:57.060 --> 01:59.660
und dafür müssen wir mehrere Schritte

01:59.660 --> 02:01.820
durchführen.

02:01.820 --> 02:05.020
Wir müssen das, was der Benutzer hier eingegeben

02:05.020 --> 02:08.550
hat, abrufen und dann an die App-Komponente weiterleiten,

02:08.550 --> 02:09.810
denn dort werden wir

02:09.810 --> 02:13.330
später unsere ToDos verwalten.

02:13.330 --> 02:16.150
Reagieren wir also zunächst einmal auf die Formularübermittlung.

02:16.150 --> 02:18.050
Wir können eine neue Funktion hinzufügen,

02:18.050 --> 02:20.300
also eine Funktion in der funktionalen Komponente,

02:20.300 --> 02:22.720
aber das wird jetzt eine reguläre Funktion sein,

02:22.720 --> 02:27.720
die wir "todoSubmitsHandler" nennen, einen beliebigen Namen, den Sie wollen.

02:28.210 --> 02:29.990
Dies ist eine Funktion, die immer dann ausgelöst werden

02:29.990 --> 02:31.860
sollte, wenn das Formular abgeschickt wird.

02:31.860 --> 02:35.571
Wir können es also an die onSubmit-Propaganda hier am Ende binden,

02:35.571 --> 02:38.770
todoSubmitsHandler, nicht ausführen, nur darauf zeigen,

02:38.770 --> 02:40.900
so dass es für uns ausgeführt wird, wenn

02:40.900 --> 02:43.810
dieses Formular gesendet wird.

02:43.810 --> 02:46.270
Hier erhalten wir ein Ereignisobjekt und das Ereignisobjekt

02:46.270 --> 02:49.507
ist vom Typ react. FormEvent.

02:51.290 --> 02:54.010
Nun möchte ich das Ereignis prevent default aufrufen, um diese

02:54.010 --> 02:55.780
Voreinstellung zu verhindern, d. h. eine

02:55.780 --> 02:58.300
echte Anfrage an den Server zu senden, der diese Anwendung

02:58.300 --> 02:59.280
bedient.

02:59.280 --> 03:01.520
Das ist natürlich nicht der Zeitpunkt, an dem ich das möchte.

03:01.520 --> 03:04.680
Ich möchte diese Anfrage nur hier in JavaScript bearbeiten

03:04.680 --> 03:08.350
und daher muss diese Browser-Voreinstellung verhindert werden.

03:08.350 --> 03:09.770
Jetzt, wo das verhindert wurde, können

03:09.770 --> 03:12.610
wir alles abrufen, was der Benutzer in die Eingabe eingegeben hat,

03:12.610 --> 03:15.250
und dafür haben wir zwei verschiedene Möglichkeiten.

03:15.250 --> 03:18.310
Wir können entweder den Status der Eingabe hier verwalten, sozusagen

03:18.310 --> 03:20.970
mit Two-Way-Binding, oder wir verwenden eine Referenz,

03:20.970 --> 03:23.170
um zu extrahieren, was der Benutzer hier eingegeben

03:23.170 --> 03:26.520
hat, wenn das Formular abgeschickt wird.

03:26.520 --> 03:28.410
Ich werde mich für den letzteren Ansatz entscheiden,

03:28.410 --> 03:30.420
weil wir die Zustandsverwaltung in der App-Komponente

03:30.420 --> 03:33.470
ohnehin gleich in Aktion sehen werden.

03:33.470 --> 03:37.340
Um eine solche Ref einzurichten, importieren wir den useRef-Hook

03:37.340 --> 03:40.580
von React. Hooks sind spezielle Funktionen, die

03:40.580 --> 03:45.290
man ausführen kann, um der Komponente bestimmte Funktionalitäten hinzuzufügen,

03:45.290 --> 03:48.101
und wenn wir hier useRef ausführen, erhalten

03:48.101 --> 03:53.730
wir ein Ref-Objekt zurück, das wir in einer Konstante speichern können, die ich "textInputRef"

03:53.730 --> 03:57.310
nenne.

03:57.310 --> 04:00.176
Und wir können zum Beispiel einen solchen Verweis verwenden,

04:00.176 --> 04:04.980
um ihn einem Dom-Element zuzuweisen und dann mit diesem Dom-Element aus unserem Code hier oben

04:04.980 --> 04:06.500
zu interagieren.

04:06.500 --> 04:08.800
Zum Beispiel, wenn das Formular abgeschickt wird.

04:09.680 --> 04:11.510
Wir stellen eine solche Verbindung her,

04:11.510 --> 04:14.020
indem wir die spezielle Requisite Ref zu einem beliebigen

04:14.020 --> 04:16.580
HTML-Element Ihrer Wahl hinzufügen und auf das Objekt

04:16.580 --> 04:19.150
zeigen, das wir hier oben erstellt haben.

04:19.150 --> 04:21.530
Fügen Sie also textInputRef.

04:21.530 --> 04:23.540
Dadurch wird hier eine Verbindung geschaffen.

04:23.540 --> 04:27.380
Sie sehen aber schon wieder, dass TypeScript das nicht mag.

04:27.380 --> 04:30.110
Denn useRef erweist sich ebenfalls

04:30.110 --> 04:33.250
als generische Funktion.

04:33.250 --> 04:35.270
Welchen Typ können wir ihm nun übergeben.

04:35.270 --> 04:37.340
Was wäre hier interessant zu wissen?

04:37.340 --> 04:39.200
Nun, es wäre interessant zu wissen, welche

04:39.200 --> 04:42.030
Art von Daten innerhalb des Graphen gespeichert werden,

04:42.030 --> 04:43.970
und da Sie auf das Eingabeelement zeigen,

04:43.970 --> 04:47.880
werden wir ein HTML-Eingabeelement darin gespeichert haben.

04:47.880 --> 04:50.420
Jetzt müssten wir nur noch einen Standardwert für die Ref bereitstellen,

04:50.420 --> 04:51.840
wenn sie eingerichtet wird, und dort

04:51.840 --> 04:53.190
werden wir null bereitstellen,

04:53.190 --> 04:54.710
denn wenn die Komponente zum ersten

04:54.710 --> 04:57.380
Mal gerendert wird, wenn dieser Code ausgeführt wird, ist dies

04:57.380 --> 04:59.460
natürlich noch nicht gerendert worden, also wird

04:59.460 --> 05:01.590
dies auf nichts zeigen.

05:01.590 --> 05:03.350
Sobald dies jedoch geschehen ist,

05:03.350 --> 05:04.950
wird die Verbindung hergestellt,

05:04.950 --> 05:07.040
und dann funktioniert dieser Ref.

05:07.040 --> 05:09.453
Und jetzt hier in der todoSubmitHandler, können wir den eingegebenen

05:10.342 --> 05:15.342
Text durch die Verwendung von textInputRef erhalten. Strom, das ist immer etwas,

05:15.500 --> 05:17.973
das man eingeben muss, wenn

05:17.973 --> 05:21.440
man mit einem Ref. Wert natürlich hier, weil

05:21.440 --> 05:24.530
wir mit dem html-Eingabeelement arbeiten.

05:24.530 --> 05:27.940
Hier besteht jedoch das Problem, dass dies null sein könnte.

05:27.940 --> 05:29.630
Das ist ein Problem, das wir schon kennen.

05:29.630 --> 05:31.790
Wir hatten das auch schon zu Beginn des Kurses, als

05:31.790 --> 05:33.370
wir etwas in einem Dom ausgewählt haben,

05:33.370 --> 05:34.630
und wir haben es auch hier, weil

05:34.630 --> 05:37.020
TypeScript nicht mit Sicherheit wissen kann, dass diese

05:37.020 --> 05:38.800
Verbindung hergestellt ist.

05:38.800 --> 05:40.580
Wir wissen es, wir haben den Code geschrieben,

05:40.580 --> 05:43.050
aber TypeScript versteht leider nicht, dass wir dort

05:43.050 --> 05:45.300
unten eine Verbindung herstellen.

05:46.310 --> 05:48.920
Um dies zu beheben, können wir hier ein Ausrufezeichen

05:48.920 --> 05:51.350
einfügen, um TypeScript mitzuteilen, dass dies in

05:51.350 --> 05:54.350
Ordnung ist, dass dies gesetzt wird, und wir sind fertig.

05:54.350 --> 05:56.130
Übrigens ist TypeScript korrekt, wenn

05:56.130 --> 05:58.920
wir hier todoSubmitHandler aufrufen würden, würde das vorwärts

05:58.920 --> 06:00.590
aufgerufen werden, das wurde zum ersten

06:00.590 --> 06:02.410
Mal gerendert und dann würde das tatsächlich

06:02.410 --> 06:05.000
noch nicht initialisiert werden.

06:05.000 --> 06:07.910
Wir wissen nur, dass es mit Sicherheit initialisiert wird, weil wir

06:07.910 --> 06:09.730
wissen, dass dies nur aufgerufen wird, wenn

06:09.730 --> 06:10.830
das Formular abgeschickt

06:10.830 --> 06:13.830
wird, und das kann nur geschehen, nachdem es gerendert wurde.

06:13.830 --> 06:16.120
Wir wissen also, wie unser Code funktioniert.

06:16.120 --> 06:18.360
Dies wird niemals null sein.

06:18.360 --> 06:20.810
Wenn es eine andere Möglichkeit gäbe, müssten

06:20.810 --> 06:22.780
Sie hier ein if-check verwenden, um zu

06:22.780 --> 06:26.030
prüfen, ob textInputRef. current null ist, und wenn das der

06:26.030 --> 06:27.620
Fall ist, etwas anderes tun.

06:27.620 --> 06:29.550
Aber hier kann das nicht passieren.

06:29.550 --> 06:31.230
Damit extrahieren wir einen Wert

06:31.230 --> 06:34.640
und können die Konsole nutzen. protokollieren Sie dies hier, um zu sehen, ob es funktioniert.

06:34.640 --> 06:37.040
Aber das ist natürlich noch nicht die endgültige Lösung.

06:37.040 --> 06:40.900
Speichern wir also, geben wir hier ein, beenden wir es

06:40.900 --> 06:44.590
in einem Monat und fügen wir ein ToDo hinzu, und wir

06:44.590 --> 06:47.970
sehen es hier in den Konsolenprotokollen.

06:47.970 --> 06:50.310
Das funktioniert so, wie es sollte.

06:50.310 --> 06:51.910
Und da es so funktioniert, wie es sollte,

06:51.910 --> 06:55.460
stellen wir jetzt sicher, dass wir diesen Wert an die App-Komponente weitergeben.

06:55.460 --> 06:58.820
Wenn Sie wissen, wie man reagiert, sollten Sie es auf jeden Fall zuerst selbst versuchen.

06:58.820 --> 07:00.963
Wir werden das in der nächsten Vorlesung gemeinsam tun.
