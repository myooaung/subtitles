WEBVTT

00:02.040 --> 00:04.180
Professor: Então, essa foi uma aula muito básica.

00:04.180 --> 00:05.930
Agora, quando se constroem aulas, muitas

00:05.930 --> 00:08.400
vezes elas se tornam mais complexas do que isso.

00:08.400 --> 00:10.800
E talvez você queira armazenar mais dados ali.

00:10.800 --> 00:15.160
Digamos que um departamento todos deveriam ter funcionários.

00:15.160 --> 00:18.160
Isso poderia ser uma matriz, e inicialmente

00:18.160 --> 00:20.290
poderia ser uma matriz vazia.

00:20.290 --> 00:23.520
E para ser também um pouco mais preciso sobre o que você quer

00:23.520 --> 00:24.980
armazenar ali, poderia ser

00:24.980 --> 00:28.800
um conjunto de cordas para mantê-lo relativamente simples.

00:28.800 --> 00:31.733
Agora poderíamos ter um método aqui adicionarEmployee.

00:33.030 --> 00:36.880
Lá queremos um funcionário como argumento, o que deveria

00:36.880 --> 00:39.430
ser apenas um fio em nosso exemplo.

00:39.430 --> 00:42.650
Então, podemos definir isto. funcionários. empurrar.

00:42.650 --> 00:47.320
Portanto, empurre um novo funcionário para a matriz de nossos funcionários

00:47.320 --> 00:48.373
com este código.

00:50.750 --> 00:52.683
Agora também podemos acrescentar outro

00:53.666 --> 00:55.749
método, imprimirEmployeeInformation.

01:00.508 --> 01:05.508
E lá eu quero consolar. log(isto. funcionários. comprimento) e também

01:07.766 --> 01:12.766
quero consolar. log(isto. funcionários) em si.

01:15.510 --> 01:18.480
Agora, se descermos aqui, agora podemos comentar este

01:18.480 --> 01:20.560
código aqui, o que quebraria novamente

01:20.560 --> 01:24.070
porque, mais uma vez, não encaixamos a descrição do departamento

01:24.070 --> 01:25.870
com nosso objeto lá embaixo.

01:25.870 --> 01:29.200
E em vez disso, neste departamento de contabilidade, podemos

01:29.200 --> 01:32.234
acrescentar um funcionário, digamos Max.

01:32.234 --> 01:35.400
E outro funcionário, digamos Manu.

01:35.400 --> 01:37.690
E, além de descrevê-lo, também quero

01:37.690 --> 01:41.520
obter informações sobre meus funcionários lá embaixo.

01:41.520 --> 01:44.600
Se salvarmos isto, devemos obter esta produção, dois

01:44.600 --> 01:47.830
funcionários e aqui estão algumas informações.

01:47.830 --> 01:50.240
Isso tudo é bom de se ter.

01:50.240 --> 01:52.700
Um problema que temos com esta classe é que poderíamos

01:52.700 --> 01:55.960
mudar de funcionário de fora, não apenas com a adição de funcionário,

01:55.960 --> 01:58.160
mas acessando diretamente a propriedade

01:58.160 --> 02:01.710
do funcionário, assim como podemos fazê-lo para o nome também,

02:01.710 --> 02:04.430
a propósito.

02:04.430 --> 02:07.630
Portanto, o que quero dizer é que também poderíamos

02:07.630 --> 02:10.560
ir à contabilidade, e depois chegar aos funcionários,

02:10.560 --> 02:13.870
e talvez adicionar outro funcionário no índice dois,

02:13.870 --> 02:16.400
e lá passar uma Anna, como essa.

02:16.400 --> 02:18.210
Se fizermos isso e o salvarmos, teremos

02:18.210 --> 02:20.290
três funcionários e teremos Anna.

02:20.290 --> 02:22.710
Agora você pode pensar, muito bem, temos outra maneira.

02:22.710 --> 02:25.230
Bem, ao construir aplicações mais complexas,

02:25.230 --> 02:27.980
você normalmente quer evitar algo como isto.

02:27.980 --> 02:30.930
Você quer ter certeza de que existe um caminho claro,

02:30.930 --> 02:34.870
uma maneira de usar sua classe, e que coisas assim, formas alternativas

02:34.870 --> 02:38.530
de usá-la, não são realmente apoiadas.

02:38.530 --> 02:41.230
Porque se você estiver trabalhando em uma equipe

02:41.230 --> 02:42.920
maior, bem, então um colega vai

02:42.920 --> 02:45.700
usar esta abordagem para adicionar um funcionário

02:45.700 --> 02:48.050
e outro colega pode usar esta abordagem.

02:48.050 --> 02:49.280
E você não quer isto.

02:49.280 --> 02:52.640
Você quer ter uma maneira uniforme de fazer isso.

02:52.640 --> 02:55.960
Além disso, porque talvez no método de adição de funcionários, você faça

02:55.960 --> 02:58.420
mais do que simplesmente adicioná-lo à matriz.

02:58.420 --> 02:59.770
Talvez você queira primeiro

02:59.770 --> 03:02.400
ter alguma validação etc. aqui.

03:02.400 --> 03:04.940
Portanto, você pode ter um código extra, que

03:04.940 --> 03:06.610
simplesmente não é executado

03:06.610 --> 03:09.470
se você atribuir diretamente um novo valor ou adicionar

03:09.470 --> 03:12.970
um novo valor à matriz com esta linha aqui.

03:12.970 --> 03:16.000
Portanto, você não quer permitir que os funcionários

03:16.000 --> 03:19.884
sejam acessíveis desta forma de fora da classe.

03:19.884 --> 03:22.340
E o TypeScript tem você coberto.

03:22.340 --> 03:26.760
Você pode transformar os funcionários aqui em uma propriedade privada,

03:26.760 --> 03:30.580
um campo privado, adicionando uma palavra-chave privada

03:30.580 --> 03:32.220
à sua frente.

03:32.220 --> 03:34.303
Agora, o que significa privado

03:34.303 --> 03:38.030
é que os funcionários são agora uma propriedade, que só

03:38.030 --> 03:41.210
é acessível de dentro da classe, portanto, de

03:41.210 --> 03:43.480
dentro do objeto criativo.

03:43.480 --> 03:46.700
Portanto, qualquer método dentro da classe do departamento

03:46.700 --> 03:49.770
ainda é capaz de trabalhar com os funcionários.

03:49.770 --> 03:52.570
Mas você não pode mais acessar assim.

03:52.570 --> 03:54.710
Aqui você vê que agora estou recebendo um erro.

03:54.710 --> 03:57.280
Se eu tentar salvar isto, recebo um erro de compilação

03:57.280 --> 03:59.870
de que a propriedade 'funcionários' é privada

03:59.870 --> 04:03.550
e acessível somente dentro da classe 'departamento'.

04:03.550 --> 04:07.100
Assim, agora forçamos que quando os funcionários devem ser

04:07.100 --> 04:09.370
adicionados a este departamento, as pessoas

04:09.370 --> 04:12.690
têm que usar o método do funcionário adicional.

04:12.690 --> 04:16.760
Porque eles recebem um erro se escreverem um código como este.

04:16.760 --> 04:20.460
Este é o chamado modificador aqui, a palavra-chave privada.

04:20.460 --> 04:23.470
E além do privado, temos também o público, que

04:23.470 --> 04:25.000
é o padrão, no entanto.

04:25.000 --> 04:26.590
Você não precisa acrescentar público.

04:26.590 --> 04:29.590
Portanto, um nome como este é exatamente o mesmo que

04:29.590 --> 04:31.650
o nome com o público à sua frente.

04:31.650 --> 04:34.300
A diferença é que os bens públicos são

04:34.300 --> 04:36.350
acessíveis do exterior.

04:36.350 --> 04:40.350
Assim, por exemplo, aqui eu também poderia dar um nome

04:40.350 --> 04:43.600
e atribuir um novo nome aqui se eu quisesse.

04:43.600 --> 04:45.260
Isso é possível.

04:45.260 --> 04:49.270
Para propriedades privadas, isto aqui não é possível.

04:49.270 --> 04:51.580
Só podemos usá-los de dentro para fora.

04:51.580 --> 04:52.800
Tecnicamente, a propósito,

04:52.800 --> 04:55.700
o JavaScript não conhece público e privado.

04:55.700 --> 04:59.630
Somente em versões muito modernas acrescentadas recentemente

04:59.630 --> 05:01.320
tal coisa existe.

05:01.320 --> 05:03.650
No passado, o JavaScript não conhecia as propriedades

05:03.650 --> 05:05.690
privadas ou públicas.

05:05.690 --> 05:08.520
Todas as propriedades sempre foram públicas lá.

05:08.520 --> 05:10.630
O TypeScript introduz este recurso,

05:10.630 --> 05:13.561
que obviamente não funciona durante a execução, no

05:13.561 --> 05:16.620
entanto, porque o JavaScript até recentemente só conhecia

05:16.620 --> 05:18.780
propriedades públicas.

05:18.780 --> 05:21.290
Portanto, esta linha aqui, erro congelado durante

05:21.290 --> 05:23.130
a compilação do TypeScript.

05:23.130 --> 05:27.000
Se você compilá-lo para JavaScript, no entanto, este código ainda

05:27.000 --> 05:30.140
será executado em tempo de execução sem erros porque,

05:30.140 --> 05:32.800
novamente, JavaScript por si só, até recentemente

05:32.800 --> 05:34.900
não conhecia este conceito.

05:34.900 --> 05:37.350
Portanto, dependendo da versão para a qual você está compilando,

05:37.350 --> 05:38.720
ele ainda não o saberá.

05:38.720 --> 05:40.770
E, portanto, o TypeScript só suporta isto

05:40.770 --> 05:42.980
porque ele o verifica durante a compilação,

05:42.980 --> 05:44.650
não em tempo de execução.

05:44.650 --> 05:47.370
Com ele, porém, podemos evitar códigos como este e

05:47.370 --> 05:49.863
forçar todos a escrever códigos mais limpos.
