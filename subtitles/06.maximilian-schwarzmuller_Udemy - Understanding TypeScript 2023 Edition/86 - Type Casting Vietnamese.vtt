WEBVTT

00:02.260 --> 00:03.920
Người hướng dẫn: Vì vậy, các công đoàn phân biệt đối xử.

00:03.920 --> 00:05.750
Thực sự, thực sự hữu ích.

00:05.750 --> 00:09.060
Một tính năng rất hữu ích khác là ép kiểu.

00:09.060 --> 00:12.640
Truyền kiểu giúp bạn nói với TypeScript rằng một số giá

00:12.640 --> 00:15.350
trị thuộc một loại cụ thể mà TypeScript không

00:15.350 --> 00:19.240
thể tự phát hiện ra giá trị đó, nhưng bạn với tư cách là nhà phát

00:19.240 --> 00:22.660
triển biết rằng đó sẽ là trường hợp.

00:22.660 --> 00:25.030
Một ví dụ điển hình cho điều này là nếu chúng

00:25.030 --> 00:27.120
ta đưa X đến một thứ gì đó trong dom.

00:27.120 --> 00:29.560
Giả sử ở đây chúng ta có một đoạn trong dom chỉ

00:29.560 --> 00:32.180
có một đoạn, không có gì khác trong đó và đó là

00:32.180 --> 00:33.390
một đoạn trống.

00:33.390 --> 00:35.190
Vì vậy, rõ ràng nếu chúng ta lưu nó, chúng

00:35.190 --> 00:37.150
ta sẽ không thấy gì ở đây, trên màn hình.

00:37.150 --> 00:38.950
Bây giờ chúng ta có thể truy cập vào đoạn đó từ bên

00:38.950 --> 00:40.543
trong tập lệnh của chúng ta tại đây.

00:43.160 --> 00:48.160
Const đoạn với bộ chọn truy vấn tài liệu P chẳng hạn.

00:49.180 --> 00:51.890
Bây giờ, khi chúng tôi sử dụng bộ chọn truy vấn và

00:51.890 --> 00:54.500
chúng tôi chuyển P làm bộ chọn để nó chọn bằng

00:54.500 --> 00:57.070
thẻ P, thì TypeScript thực sự có thể tìm ra, như

00:57.070 --> 00:59.510
bạn có thể thấy nếu tôi di chuột qua nó, rằng

00:59.510 --> 01:02.480
đây sẽ là loại phần tử đoạn văn hay null vì có thể một

01:02.480 --> 01:05.900
phần tử như vậy không tồn tại trong trang, nhưng đó là một điều

01:05.900 --> 01:07.050
khác.

01:07.050 --> 01:09.920
Bây giờ chúng ta hãy bỏ qua trường hợp or null.

01:09.920 --> 01:12.400
Điều quan trọng là TypeScript thực sự phát hiện

01:12.400 --> 01:14.600
ra rằng đây là một phần tử đoạn văn.

01:14.600 --> 01:16.800
Bây giờ, điều này sẽ thay đổi nếu chúng ta chọn

01:16.800 --> 01:18.460
theo thứ khác, chẳng hạn như ID.

01:18.460 --> 01:22.020
Chúng tôi đặt tên ở đây là đầu ra thông báo, vì vậy đoạn này

01:22.020 --> 01:23.920
có ID là đầu ra thông báo.

01:23.920 --> 01:25.890
Bây giờ, với tư cách là nhà phát triển, tất nhiên

01:25.890 --> 01:28.360
chúng tôi biết rằng chúng tôi đã gán ID này cho đoạn này, nhưng

01:28.360 --> 01:29.780
TypeScript không biết điều đó.

01:29.780 --> 01:33.020
TypeScript không đi sâu vào các tệp HTML của chúng

01:33.020 --> 01:34.590
tôi và phân tích chúng.

01:34.590 --> 01:37.360
Vì vậy, nếu bây giờ chúng ta chọn theo ID

01:37.360 --> 01:41.720
đó ở đây, chẳng hạn như với getElementById, thì chúng ta sẽ thấy

01:41.720 --> 01:45.130
TypeScript suy luận rằng đây chỉ là một phần tử

01:45.130 --> 01:49.830
HTML hoặc null, nó không biết đó là phần tử HTML cụ thể nào.

01:49.830 --> 01:52.720
Bây giờ, đối với một đoạn văn, điều đó có thể không quá quan

01:52.720 --> 01:54.830
trọng, có thể chúng ta chỉ muốn làm những việc

01:54.830 --> 01:57.290
với nó mà chúng ta có thể làm với bất kỳ thành phần

01:57.290 --> 01:59.990
HTML nào, ví dụ: truy cập nội dung văn bản của nó hoặc bất

01:59.990 --> 02:01.470
kỳ thứ gì tương tự.

02:01.470 --> 02:03.220
Nhưng nếu chúng ta có đầu vào ở đây thì sao?

02:03.220 --> 02:07.750
Điều gì sẽ xảy ra nếu chúng tôi thực sự có một văn bản loại đầu vào và chúng tôi muốn nhận giá

02:07.750 --> 02:10.430
trị mà người dùng đã nhập, vì vậy tôi sẽ cung cấp cho nó

02:10.430 --> 02:12.760
một ID của đầu vào của người dùng và bây giờ tôi

02:12.760 --> 02:15.500
chọn giá trị này trong mã TypeScript của mình.

02:15.500 --> 02:17.730
Vì vậy, ở đây tôi chọn theo ID người dùng

02:17.730 --> 02:21.530
nhập và nó không còn là một đoạn văn nữa, mà là userInputElement.

02:21.530 --> 02:24.023
Bây giờ chúng tôi với tư cách là nhà phát triển, chúng tôi biết rằng

02:24.909 --> 02:26.700
ở đây, chúng tôi tiếp cận yếu tố đầu vào này, nhưng

02:26.700 --> 02:28.530
như tôi đã nói, TypeScript không biết điều đó.

02:28.530 --> 02:31.140
TypeScript không đọc mã HTML của chúng tôi, vì

02:31.140 --> 02:34.435
vậy TypeScript chỉ biết rằng đó là một phần tử HTML nào đó.

02:34.435 --> 02:37.860
Bây giờ, nếu tôi muốn đặt thuộc tính giá trị của

02:37.860 --> 02:40.902
thuộc tính này và do đó, nó sẽ cố gắng thực

02:40.902 --> 02:45.000
hiện userInputElement. giá trị bằng chào bạn, bạn thấy

02:45.000 --> 02:47.050
rằng tôi thực sự gặp lỗi.

02:47.050 --> 02:48.960
Tôi gặp lỗi vì đối tượng

02:48.960 --> 02:50.780
này có thể là null.

02:50.780 --> 02:54.220
Chúng ta có thể khắc phục điều này bằng cách thêm

02:54.220 --> 02:56.210
dấu chấm than sau đó và tôi sẽ

02:56.210 --> 02:58.390
quay lại vấn đề này sau giây nữa,

02:58.390 --> 03:01.640
nhưng ngay cả khi đó tôi vẫn gặp lỗi rằng giá trị

03:01.640 --> 03:03.890
không tồn tại trên Phần tử HTML loại

03:03.890 --> 03:08.343
vì loại chung này, về cơ bản là bất kỳ HTML nào phần tử có dưới dạng

03:08.343 --> 03:11.630
một loại, không hỗ trợ các thuộc tính dành riêng

03:11.630 --> 03:14.510
cho các phần tử HTML cụ thể.

03:14.510 --> 03:17.540
Vì vậy, chúng tôi sẽ cần nói với TypeScript

03:17.540 --> 03:20.860
rằng thực sự những gì chúng tôi chọn ở đây không

03:20.860 --> 03:25.080
chỉ không rỗng mà còn thuộc loại HTMLInputElement.

03:25.080 --> 03:28.240
Và đó là những gì chúng ta có thể làm với ép kiểu.

03:28.240 --> 03:31.153
Bây giờ, có hai cách truyền kiểu, hai cú pháp chúng

03:31.153 --> 03:34.170
ta có thể sử dụng và chúng tương đương nhau.

03:34.170 --> 03:36.971
Một là chúng ta thêm thứ gì đó vào trước thứ

03:36.971 --> 03:41.920
chúng ta muốn chuyển đổi hoặc nơi chúng ta muốn yêu cầu TypeScript nhập.

03:41.920 --> 03:44.170
Chúng tôi thêm các dấu ngoặc nhọn

03:44.170 --> 03:45.810
mở và đóng, sau đó giữa các

03:45.810 --> 03:49.480
dấu ngoặc này, loại đối tượng sau dấu ngoặc nhọn.

03:49.480 --> 03:51.223
Trong trường hợp này, HTMLInputElement.

03:53.110 --> 03:54.970
Và loại này có sẵn trên toàn cầu vì

03:54.970 --> 03:57.963
trong tệp tsconfig của tôi, tôi có bao gồm cả dom lib.

03:59.180 --> 04:00.810
Cùng với đó, TypeScript

04:00.810 --> 04:03.830
biết rằng bất cứ thứ gì chúng ta chọn ở đây sau dấu

04:03.830 --> 04:06.530
ngoặc nhọn sẽ thuộc loại HTMLInputElement

04:06.530 --> 04:08.950
và do đó nó không phàn nàn nữa.

04:08.950 --> 04:10.330
Vì vậy, đây là phiên bản một.

04:10.330 --> 04:12.830
Hãy để tôi sao chép nó và nhận xét nó và chỉ

04:12.830 --> 04:14.750
cho bạn giải pháp thay thế.

04:14.750 --> 04:18.000
Điều này hoạt động hoàn toàn tốt và bạn có thể sử dụng điều này.

04:18.000 --> 04:21.210
Tuy nhiên, bây giờ, nếu bạn biết React, bạn sẽ biết

04:21.210 --> 04:24.400
rằng ở đó, bạn cũng có một cú pháp dấu ngoặc nhọn như

04:24.400 --> 04:26.970
vậy bên trong JavaScript hoặc TypeScript

04:26.970 --> 04:29.200
nếu bạn sử dụng cú pháp đó cho các tệp

04:29.200 --> 04:33.550
React, nơi bạn viết mã JSX trong các thành phần React của mình.

04:33.550 --> 04:36.060
Bây giờ, nếu bạn không biết React, điều đó có thể không cho bạn biết nhiều.

04:36.060 --> 04:40.800
Chỉ cần lưu ý rằng một cú pháp tương tự tồn tại trong các dự án React và ở đó, các dấu ngoặc

04:40.800 --> 04:43.320
nhọn không được sử dụng để chuyển bất kỳ thông

04:43.320 --> 04:47.480
tin nào liên quan đến các loại bạn đang sử dụng, nhưng thay vào đó, chúng được

04:47.480 --> 04:50.390
phân tích cú pháp bởi một số công cụ xây dựng và cuối

04:50.390 --> 04:53.200
cùng là React để biết bạn là gì muốn hiển thị trên màn

04:53.200 --> 04:54.390
hình.

04:54.390 --> 04:56.750
Vì vậy, hoàn toàn tách rời khỏi TypeScript.

04:56.750 --> 04:59.880
Để không xung đột với cú pháp JSX đó, nhóm TypeScript

04:59.880 --> 05:01.900
cung cấp một giải pháp thay thế cho

05:01.900 --> 05:04.350
việc truyền kiểu dấu ngoặc nhọn này.

05:04.350 --> 05:06.450
Bạn cũng có thể thêm thứ gì đó sau

05:06.450 --> 05:07.920
thứ bạn muốn nhập cast,

05:07.920 --> 05:09.960
vì vậy sau lựa chọn này trong trường

05:09.960 --> 05:12.600
hợp này, và thứ đó là từ khóa as.

05:12.600 --> 05:14.740
Và sau đó, tại đây, bạn lại thêm

05:14.740 --> 05:16.750
loại mà bạn muốn truyền.

05:16.750 --> 05:19.970
Vì vậy, điều này bây giờ cho TypeScript biết rằng biểu

05:19.970 --> 05:23.730
thức phía trước nó, trong trường hợp này, biểu thức này ở đây,

05:23.730 --> 05:27.405
sẽ mang lại một giá trị kiểu HTMLInputElement.

05:27.405 --> 05:30.067
Do đó, một lần nữa, chúng tôi không nhận được lỗi.

05:30.067 --> 05:31.650
Vì vậy, đây là một giải pháp

05:31.650 --> 05:33.940
thay thế và bạn có thể sử dụng một trong

05:33.940 --> 05:36.350
hai cú pháp, bất cứ điều gì bạn thích, bạn

05:36.350 --> 05:38.990
chỉ cần cố gắng nhất quán trong suốt dự án của

05:38.990 --> 05:42.377
mình sau đó để không thay đổi giữa hai cú pháp này.

05:42.377 --> 05:45.220
Và với điều đó, bạn có thể chuyển thông tin bổ

05:45.220 --> 05:47.480
sung có giá trị này cho TypeScript

05:47.480 --> 05:50.400
và làm cho mã như thế này hoạt động, mặc dù TypeScript

05:50.400 --> 05:52.760
tự nó sẽ không thể phát hiện ra rằng điều

05:52.760 --> 05:56.000
này ở đây tạo ra HTMLInputElement.

05:56.000 --> 05:57.940
Tất nhiên, vì bạn đang buộc TypeScript

05:57.940 --> 06:00.420
sử dụng loại này, nên với tư cách là nhà phát triển,

06:00.420 --> 06:02.200
bạn có trách nhiệm đảm bảo rằng bất

06:02.200 --> 06:05.620
kỳ biểu thức nào mà biểu thức này tạo ra sẽ thuộc loại đó.

06:05.620 --> 06:07.700
Nếu không, bạn có thể gặp lỗi thời gian chạy

06:07.700 --> 06:09.920
hoặc hành vi không mong muốn trong thời gian

06:09.920 --> 06:12.780
chạy nếu bạn cố gắng tương tác với phần tử đó theo cách thực

06:12.780 --> 06:14.423
sự không được hỗ trợ.

06:15.610 --> 06:18.060
Vì vậy, truyền kiểu là một tính năng mạnh mẽ.

06:18.060 --> 06:20.490
Dấu chấm than ở đây cũng vậy.

06:20.490 --> 06:22.590
Tôi thực sự đã khám phá điều này sớm

06:22.590 --> 06:24.820
hơn một chút trong khóa học rồi.

06:24.820 --> 06:27.470
Dấu chấm than này cho phép chúng ta nói với TypeScript

06:27.470 --> 06:31.090
rằng biểu thức phía trước nó sẽ không bao giờ trả về giá trị rỗng.

06:31.090 --> 06:33.170
Và điều này là bắt buộc đối với một số biểu

06:33.170 --> 06:35.070
thức, như biểu thức này ở đây, khi bạn

06:35.070 --> 06:38.010
chọn thứ gì đó từ dom có thể trả về giá trị rỗng.

06:38.010 --> 06:40.980
Nếu chúng tôi biết với tư cách là nhà phát triển rằng điều này sẽ không bao

06:40.980 --> 06:43.690
giờ trả về null, thì chúng tôi có thể sử dụng dấu chấm than này.

06:43.690 --> 06:45.470
Mặt khác, và bạn đã học được

06:45.470 --> 06:48.248
điều đó rồi, tôi chỉ muốn nhắc lại điều đó.

06:48.248 --> 06:49.380
Mặt khác, nếu bạn không chắc

06:49.380 --> 06:52.600
chắn rằng điều này sẽ không trả về giá trị rỗng, bạn có thể sử dụng kiểm tra if.

06:52.600 --> 06:56.070
Vì vậy, bạn có thể kiểm tra xem userInputElement có đúng không

06:56.070 --> 06:57.510
và do đó, nó không phải là

06:57.510 --> 06:59.440
null, sau đó sử dụng nó ở đó.

06:59.440 --> 07:02.720
Bây giờ, tôi phải loại bỏ kiểu truyền trong trường hợp này bởi vì nếu

07:02.720 --> 07:04.670
chúng ta nhập kiểu ở đây, chúng ta cũng nói

07:04.670 --> 07:07.170
với TypeScript rằng điều này sẽ không có giá trị và vì

07:07.170 --> 07:10.470
tôi không chắc chắn về điều đó nên tôi không thể truyền ở đây.

07:10.470 --> 07:13.120
Thay vào đó, tôi phải làm điều đó ở đây khi tôi sử dụng

07:13.120 --> 07:14.290
giá trị và do đó tôi muốn

07:14.290 --> 07:16.600
làm điều đó trước khi truy cập thuộc tính giá trị,

07:16.600 --> 07:19.820
bằng cách thêm dưới dạng HTMLInputElement như thế này.

07:19.820 --> 07:21.530
Tất nhiên điều đó, tuy nhiên, sẽ thất bại.

07:21.530 --> 07:24.060
Đây là cú pháp không hợp lệ, bạn sẽ cố gắng

07:24.060 --> 07:28.030
truy cập một thuộc tính giá trị trên một thứ HTMLInputElement

07:28.030 --> 07:30.280
và điều này thậm chí còn vô nghĩa.

07:30.280 --> 07:33.010
Chúng ta chỉ cần đặt biểu thức này vào trong dấu ngoặc

07:33.010 --> 07:35.670
đơn, sau đó đảm bảo rằng biểu thức này được đánh giá trước,

07:35.670 --> 07:37.590
sau đó chúng ta thử truy cập giá trị trên

07:37.590 --> 07:39.480
kết quả của biểu thức này.

07:39.480 --> 07:41.650
Và bây giờ chúng ta có một giải pháp thay thế cho việc

07:41.650 --> 07:42.893
sử dụng dấu chấm than.
