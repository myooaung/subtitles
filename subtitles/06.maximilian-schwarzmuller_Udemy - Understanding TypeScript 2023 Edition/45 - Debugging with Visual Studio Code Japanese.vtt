WEBVTT

00:02.170 --> 00:04.760
講師：では､ プロジェクトの設定がきちんとできたところで､

00:04.760 --> 00:08.130
プロジェクトのデバッグ方法､ あるいは優れた開発フローについて､

00:08.130 --> 00:10.500
もう少し掘り下げて説明しましょう｡

00:10.500 --> 00:14.575
このコースの冒頭で､ 私の基本的なIDEのセットアップをお見せしています｡

00:14.575 --> 00:17.750
本当に正しいエクステンションがインストールされているか確認してください｡ 

00:17.750 --> 00:26.410
TypeScriptの場合は､ ESLintがTypeScriptのコードのリンティングを助けてくれます｡

00:26.410 --> 00:29.310
そのため､ ESLintの効果を発揮させるためには､

00:29.310 --> 00:33.900
コード品質を向上させるための設定が必要になるかもしれません｡

00:33.900 --> 00:36.310
また､ Debugger

00:37.220 --> 00:40.818
for Chromeを使うと､ VS

00:40.818 --> 00:53.140
Codeの内部からChromeを通してTypeScriptファイルをデバッグすることができます（Chrome

00:53.140 --> 00:59.440
Dev Toolsを使わずに）｡

00:59.440 --> 01:02.653
もちろん､ それらを学習した通りに使うことも可能です｡

01:02.653 --> 01:05.154
sourceMapsを有効にすると､

01:05.154 --> 01:07.160
翻訳されたファイルも表示されるようになり､

01:07.160 --> 01:10.429
とても便利です｡

01:10.429 --> 01:14.170
しかし､ VS Codeを使用することも可能です｡ 

01:14.170 --> 01:15.960
ここでブレークポイントを置くことができます｡

01:15.960 --> 01:17.340
例えば､ clickHandlerの中で､

01:17.340 --> 01:19.842
VS Codeを通してファイルを起動するには､

01:19.842 --> 01:24.842
sourceMapsも有効にする必要がありますが､ ブラウザのDev Toolsの代わりに､

01:26.100 --> 01:30.950
VS Codeを使用することができるようになります｡

01:30.950 --> 01:34.570
そこで､ sourceMapsを有効にして､ ブレークポイントを設定し､

01:34.570 --> 01:38.930
「Debug」→「Start Debugging」を実行します｡

01:38.930 --> 01:40.320
Debugger for

01:40.320 --> 01:42.170
Chromeをインストールすると､

01:42.170 --> 01:47.850
最初に実行するときに､ 環境を尋ねられるので､ Chromeを選択することができます｡

01:47.850 --> 01:49.960
これでlaucnhに移行します｡  json

01:49.960 --> 01:56.740
ファイルに､ どのように起動するかを設定し､

01:56.740 --> 01:59.330
localhost:3000

01:59.330 --> 02:04.220
を指定します｡

02:04.220 --> 02:09.740
webRoot として localhost:3000

02:09.740 --> 02:13.780
を指定し､ プレースホルダをここに置いておくと､

02:13.780 --> 02:25.290
このプロジェクトフォルダがファイルのホストであると見なされます（この場合）｡

02:25.290 --> 02:26.870
そして､ ここにブレークポイントを追加して､

02:26.870 --> 02:28.400
起動します｡ jsonが設定されたので､

02:28.400 --> 02:30.400
ここでデバッグを実行してみましょう｡

02:30.400 --> 02:32.140
今すぐ本格的にデバッグを開始すると､

02:32.140 --> 02:34.830
今すぐ自動的に新しいタブが開きます｡

02:34.830 --> 02:38.730
このタブは､ デバッグ処理を終了するたびに閉じられるか､

02:38.730 --> 02:41.940
タブを閉じるとデバッグ処理も終了します｡

02:41.940 --> 02:46.790
これで VS Code のデバッグビューに入り､

02:46.790 --> 02:50.120
変数の追跡や特定の式の監視､

02:50.120 --> 02:56.590
現在のコールスタックの確認ができるようになります｡ 「Click

02:56.590 --> 03:01.410
Me」をクリックするとエディタに戻り､ コードの実行は

03:01.410 --> 03:13.320
TypeScript ファイル内のブレークポイントで一時停止します｡

03:13.320 --> 03:19.290
メッセージ＋複数の感嘆符のような特定の表現を見ることができますし､

03:19.290 --> 03:27.483
必要であれば､ このウィンドウにある値を常に追跡することもできます｡

03:27.483 --> 03:30.480
そして､ 現在の関数呼び出しスタックを見ることができます｡

03:30.480 --> 03:34.710
例えば､ clickHandler で発生する関数呼び出しです｡ このコントロールを使って､

03:34.710 --> 03:37.590
次のステップに進む､ 次の関数呼び出しをスキップする､

03:37.590 --> 03:43.827
関数呼び出しに入る､ 現在の関数呼び出しから抜け出す､ などのコードをステップ実行できます｡ もちろん､

03:43.827 --> 04:00.290
呼び出しスタックはそれに応じて調整します｡ これによって､ このブラウザを無視できます｡ これによって､ 再生ボタンをクリックしてコードの実行を常に再開でき､ 次にブレイクポイントに達すると一時停止できるだけです｡

04:00.290 --> 04:02.080
これでコードのデバッグができるわけです｡ 

04:02.080 --> 04:04.050
ブレークポイントをクリックすることで､ ブレークポイントを削除することができます｡ 

04:04.050 --> 04:05.910
このように､ 内蔵のデバッグツール､

04:05.910 --> 04:07.310
Chrome Debugger

04:07.310 --> 04:09.728
拡張､ 派生設定､ TypeScript

04:09.728 --> 04:12.450
設定に設定されている soureMap を利用して､

04:12.450 --> 04:17.743
VS Code 内からコードをデバッグすることができます｡
