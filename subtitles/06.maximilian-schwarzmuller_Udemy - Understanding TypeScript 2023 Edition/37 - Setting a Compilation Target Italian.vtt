WEBVTT

00:02.450 --> 00:04.810
Istruttore: Ora che abbiamo capito come possiamo

00:04.810 --> 00:07.850
gestire i nostri file con il compilatore, passiamo alle

00:07.850 --> 00:09.870
opzioni del compilatore, che sono molto

00:09.870 --> 00:11.300
interessanti.

00:11.300 --> 00:13.860
Questo ci permette di controllare come il

00:13.860 --> 00:16.620
nostro codice TypeScript viene compilato,

00:16.620 --> 00:18.360
quindi non solo quali file, ma

00:18.360 --> 00:20.920
anche come i file che vengono compilati vengono

00:20.920 --> 00:23.230
trattati da TypeScript.

00:23.230 --> 00:26.760
E qui vedete che abbiamo una serie di opzioni.

00:26.760 --> 00:29.560
Accanto a queste opzioni sono presenti brevi spiegazioni.

00:29.560 --> 00:32.450
Alcune spiegazioni sono probabilmente molto criptiche.

00:32.450 --> 00:34.210
Altri sono abbastanza chiari.

00:34.210 --> 00:36.450
E dirò che molte di queste opzioni non

00:36.450 --> 00:39.950
avranno importanza nella maggior parte dei progetti.

00:39.950 --> 00:43.900
Quindi, non potrete impostare tutte queste opzioni, nemmeno lontanamente.

00:43.900 --> 00:46.070
In genere è possibile ignorare molte di queste opzioni.

00:46.070 --> 00:48.765
Nel corso di questo corso, riprenderò le opzioni più

00:48.765 --> 00:50.230
importanti, perché alcune

00:50.230 --> 00:52.140
hanno senso solo quando si impara a conoscere

00:52.140 --> 00:53.911
una certa funzione.

00:53.911 --> 00:55.940
E voglio già adesso tuffarmi in

00:55.940 --> 00:57.250
alcune opzioni.

00:57.250 --> 01:00.840
Per questo, esaminiamo il file da cima a fondo e vediamo

01:00.840 --> 01:02.340
cosa abbiamo.

01:02.340 --> 01:04.410
Cominciamo con l'opzione di destinazione.

01:04.410 --> 01:07.230
Come si può notare, questa impostazione è predefinita.

01:07.230 --> 01:08.750
Non è commentato.

01:08.750 --> 01:10.780
Con questa opzione si dice

01:10.780 --> 01:15.530
a TypeScript per quale versione di JavaScript si vuole compilare

01:15.530 --> 01:16.970
il codice.

01:16.970 --> 01:18.850
Perché TypeScript non si limita

01:18.850 --> 01:21.600
a compilare nuove funzionalità, come le annotazioni

01:21.600 --> 01:23.500
di tipo che non esistono in JavaScript,

01:23.500 --> 01:26.960
in codice JavaScript.

01:26.960 --> 01:29.667
Quindi non si occupa solo

01:29.667 --> 01:33.270
di far funzionare questo qui.

01:33.270 --> 01:37.530
Inoltre, compila il codice in JavaScript che viene

01:37.530 --> 01:41.370
eseguito in un determinato set di browser.

01:41.370 --> 01:43.798
In pratica, si definiscono i browser che supportano

01:43.798 --> 01:46.980
il codice di compilazione impostando il target.

01:46.980 --> 01:49.520
Il target predefinito in questo progetto, come vedete,

01:49.520 --> 01:52.430
il target iniziale che viene impostato è es5, il che significa

01:52.430 --> 01:55.517
che tutti i tipi di codice vengono compilati.

01:55.517 --> 01:57.550
Lo vediamo davvero.

01:57.550 --> 02:00.770
Se eseguo TSC qui per compilare tutti i miei file,

02:00.770 --> 02:03.260
vediamo in app. ts Sto usando let e

02:03.260 --> 02:05.732
const, ma in app. js, se var.

02:05.732 --> 02:09.890
E questo accade perché abbiamo un obiettivo di

02:09.890 --> 02:13.816
es5 e nel mondo es5 non abbiamo let e const.

02:13.816 --> 02:16.810
L'aspetto positivo è che possiamo usare TypeScript

02:16.810 --> 02:20.650
per generare codice che funzioni anche con i browser più vecchi.

02:20.650 --> 02:22.930
Ma dipende totalmente dall'uso che ne facciamo.

02:22.930 --> 02:25.550
Forse non vogliamo farlo con TypeScript, perché forse

02:25.550 --> 02:27.670
abbiamo qualche altro strumento di compilazione

02:27.670 --> 02:30.560
che si occuperà della trasposizione di JavaScript e quindi

02:30.560 --> 02:33.290
non vogliamo che sia TypeScript a farlo, o forse vogliamo

02:33.290 --> 02:35.340
distribuire codice che funzioni solo nei

02:35.340 --> 02:37.030
browser moderni, perché sappiamo

02:37.030 --> 02:41.170
che la nostra applicazione funzionerà solo nei browser moderni.

02:41.170 --> 02:44.160
Pertanto, le opzioni alternative possono essere

02:44.160 --> 02:46.070
visualizzate qui se si elimina il

02:46.070 --> 02:48.080
valore e poi, almeno qui in vscode,

02:48.080 --> 02:51.300
se si preme Control + Space per ottenere il completamento

02:51.300 --> 02:54.180
automatico, si vedono una serie di suggerimenti

02:54.180 --> 02:56.450
e tutti i valori disponibili.

02:56.450 --> 02:58.700
Nel corso del tempo, questa situazione cambierà

02:58.700 --> 03:01.900
perché sono state rilasciate nuove versioni di JavaScript.

03:01.900 --> 03:03.785
Si è visto che prima abbiamo impostato questo valore su es5.

03:03.785 --> 03:06.150
Se non si specifica alcun target, al momento

03:06.150 --> 03:09.520
TypeScript compila anche in es3, quindi supporta una

03:09.520 --> 03:12.200
versione ancora più vecchia.

03:12.200 --> 03:15.130
Ma si può anche scegliere es6, che è più

03:15.130 --> 03:17.510
moderno e che, per esempio, supporta

03:17.510 --> 03:19.310
const e una versione ancora

03:19.310 --> 03:24.310
più recente, es6 equivale a es2015, per la cronaca.

03:24.870 --> 03:27.480
Quindi, se impostiamo questo valore su es6, ad esempio,

03:27.480 --> 03:29.580
e rieseguo il comando tsc dopo aver modificato

03:29.580 --> 03:35.440
tsconfig. json, lo si vedrà ora nell'applicazione.

03:35.440 --> 03:35.440
js,

03:35.440 --> 03:38.130
abbiamo let e const, perché ora sono supportati.

03:38.130 --> 03:39.340
Quindi dipende da voi.

03:39.340 --> 03:41.720
Naturalmente, più moderna è la versione

03:41.720 --> 03:43.641
di JavaScript scelta, più

03:43.641 --> 03:47.450
conciso è il codice generato, perché TypeScript deve

03:47.450 --> 03:50.440
compilare sempre meno codice, o deve aggirare

03:50.440 --> 03:54.010
funzioni inesistenti in meno situazioni, e quindi

03:54.010 --> 03:59.560
il codice compilato è in genere più conciso e breve.

03:59.560 --> 04:01.150
Questo è l'obiettivo.

04:01.150 --> 04:02.623
E le altre opzioni?
