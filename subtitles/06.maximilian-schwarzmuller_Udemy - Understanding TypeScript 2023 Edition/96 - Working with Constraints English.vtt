WEBVTT

1
00:00:02.340 --> 00:00:04.100
<v Narrator>So we got started with generics</v>

2
00:00:04.100 --> 00:00:06.670
and hopefully it's clear what TypeScript does here,

3
00:00:06.670 --> 00:00:10.240
we pass some extra information into the merge function,

4
00:00:10.240 --> 00:00:12.130
so that we can work in a better way

5
00:00:12.130 --> 00:00:14.370
with the result of the merge function.

6
00:00:14.370 --> 00:00:16.540
That's typically what generics are there for.

7
00:00:16.540 --> 00:00:19.890
They allow you to continue working with your data in

8
00:00:19.890 --> 00:00:21.960
TypeScript optimal way.

9
00:00:21.960 --> 00:00:23.820
Now, in this case, here, however,

10
00:00:23.820 --> 00:00:25.810
we would have a problem if I pass in,

11
00:00:25.810 --> 00:00:28.570
let's say just a number 30 here.

12
00:00:28.570 --> 00:00:30.470
Of course, TypeScript now throws an error,

13
00:00:30.470 --> 00:00:32.010
because it tried to access the age,

14
00:00:32.010 --> 00:00:33.870
but accessing the name would work.

15
00:00:33.870 --> 00:00:37.100
Nonetheless, if we save that, it compiles without errors,

16
00:00:37.100 --> 00:00:39.710
and if I print the overall merged object,

17
00:00:39.710 --> 00:00:41.610
we see what I get back is just

18
00:00:41.610 --> 00:00:43.910
hobbies and name in my object,

19
00:00:43.910 --> 00:00:46.570
which makes sense because 30 is a number,

20
00:00:46.570 --> 00:00:48.010
and when we passed that

21
00:00:48.010 --> 00:00:50.080
as a second argument to object assign,

22
00:00:50.080 --> 00:00:51.920
which we in the end are doing here,

23
00:00:51.920 --> 00:00:54.590
well, then this just fails silently.

24
00:00:54.590 --> 00:00:57.860
JavaScript doesn't throw an error, it doesn't complain.

25
00:00:57.860 --> 00:01:00.460
But of course, it also doesn't merge 30

26
00:01:00.460 --> 00:01:02.270
into the newly created object,

27
00:01:02.270 --> 00:01:04.690
you see there is no 30 in this object.

28
00:01:04.690 --> 00:01:06.540
Now, how would JavaScript do so?

29
00:01:06.540 --> 00:01:08.470
Because 30 is not an object,

30
00:01:08.470 --> 00:01:12.150
an object assign only is capable of merging different

31
00:01:12.150 --> 00:01:14.090
objects with each other.

32
00:01:14.090 --> 00:01:15.410
So what we in the end wanna save?

33
00:01:15.410 --> 00:01:17.600
Well, we don't care about the exact type,

34
00:01:17.600 --> 00:01:20.040
we don't care about the exact structure of the object

35
00:01:20.040 --> 00:01:22.980
you're providing here for U and T.

36
00:01:22.980 --> 00:01:26.600
But what we do care about is that both parameters,

37
00:01:26.600 --> 00:01:31.370
both types T and U should be any kind of object

38
00:01:31.370 --> 00:01:34.420
but they should be an object at all times.

39
00:01:34.420 --> 00:01:36.830
And currently, we're not saying that.

40
00:01:36.830 --> 00:01:37.820
Currently, we're just saying,

41
00:01:37.820 --> 00:01:40.110
they should be of any type, I don't care.

42
00:01:40.110 --> 00:01:41.750
Now often, that's not okay.

43
00:01:41.750 --> 00:01:45.060
You want to restrict the types of T and U here,

44
00:01:45.060 --> 00:01:46.683
solve your generic types.

45
00:01:47.830 --> 00:01:51.540
You can do that with type constraints.

46
00:01:51.540 --> 00:01:55.170
For generic types, you can set certain constraints regarding

47
00:01:55.170 --> 00:01:58.280
the types your generic types can be based on

48
00:01:58.280 --> 00:02:01.120
and you do this with the extended key word here in the

49
00:02:01.120 --> 00:02:05.150
angled brackets after the type which you wanna constrain.

50
00:02:05.150 --> 00:02:07.410
So here we could say extends object,

51
00:02:07.410 --> 00:02:09.020
and with that I'm saying,

52
00:02:09.020 --> 00:02:12.740
the T type can be any object with any structure,

53
00:02:12.740 --> 00:02:15.340
but it has to be an object.

54
00:02:15.340 --> 00:02:17.480
We can do the same for U.

55
00:02:17.480 --> 00:02:19.040
And if I do that,

56
00:02:19.040 --> 00:02:21.820
you see now I already get an error here in the IDE.

57
00:02:21.820 --> 00:02:23.980
And if I try to save that,

58
00:02:23.980 --> 00:02:26.150
I also get an error in the compiler,

59
00:02:26.150 --> 00:02:28.640
because the type 30 argument here

60
00:02:28.640 --> 00:02:31.133
is not assignable to type object.

61
00:02:32.080 --> 00:02:34.480
So that's, of course, the behavior we want here.

62
00:02:34.480 --> 00:02:38.190
Now we're forced to pass in an object again,

63
00:02:38.190 --> 00:02:39.940
whoops, like this.

64
00:02:39.940 --> 00:02:41.990
Now we're forced to pass this in again,

65
00:02:41.990 --> 00:02:43.680
and therefore we improve this function

66
00:02:43.680 --> 00:02:45.290
because now it really works.

67
00:02:45.290 --> 00:02:48.980
And we know object assign wants two objects.

68
00:02:48.980 --> 00:02:51.000
So in the end, we wanna guarantee

69
00:02:51.000 --> 00:02:52.820
that we get two objects here

70
00:02:52.820 --> 00:02:56.370
by setting certain constraints on our generic types.

71
00:02:56.370 --> 00:02:58.630
And these constraints here can be anything.

72
00:02:58.630 --> 00:03:01.290
You can refer to objects, to string,

73
00:03:01.290 --> 00:03:03.730
you could use your own type if you had it.

74
00:03:03.730 --> 00:03:06.700
You can also use union types here if you want to,

75
00:03:06.700 --> 00:03:08.470
you're really flexible there,

76
00:03:08.470 --> 00:03:10.510
you can set any constraints you want.

77
00:03:10.510 --> 00:03:12.620
And of course, you don't have to constraint all

78
00:03:12.620 --> 00:03:13.720
generic types.

79
00:03:13.720 --> 00:03:16.560
If you just want to constrain U, you can do that.

80
00:03:16.560 --> 00:03:19.620
In this example, it just makes sense to constraint both

81
00:03:19.620 --> 00:03:22.880
because object assign wants two objects here,

82
00:03:22.880 --> 00:03:24.640
but you're really flexible there.

83
00:03:24.640 --> 00:03:26.620
It is important to be aware of that

84
00:03:26.620 --> 00:03:28.440
concept of constraints though,

85
00:03:28.440 --> 00:03:30.560
because that allows you to work with generic types

86
00:03:30.560 --> 00:03:32.640
in a better in an optimal way,

87
00:03:32.640 --> 00:03:34.810
which avoids unnecessary errors

88
00:03:34.810 --> 00:03:37.513
or strange behaviors as we had it before.

