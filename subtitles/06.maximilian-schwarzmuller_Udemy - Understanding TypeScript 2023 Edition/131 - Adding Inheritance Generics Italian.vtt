WEBVTT

00:02.410 --> 00:04.290
Istruttore: È il momento dell'ereditarietà

00:04.290 --> 00:06.370
e di una classe base.

00:06.370 --> 00:09.189
Voglio aggiungere una classe base, che ha fondamentalmente

00:09.189 --> 00:12.090
templateElement, hostElement, un elemento, che fa questo

00:12.090 --> 00:15.430
lavoro di selezione degli elementi nella dom, che ha il metodo attach,

00:15.430 --> 00:16.810
di cui abbiamo sempre bisogno,

00:16.810 --> 00:18.520
e così via.

00:18.520 --> 00:22.540
Quindi, che fondamentalmente gestisce tutte queste funzionalità

00:22.540 --> 00:26.630
condivise, che le nostre classi che rendono effettivamente qualcosa

00:26.630 --> 00:28.220
al dom hanno in comune.

00:28.220 --> 00:30.880
Quindi, sopra il mio ProjectInput

00:30.880 --> 00:35.650
e anche la classe ProjectList, in pratica qui, aggiungerò la

00:35.650 --> 00:38.250
classe base del componente.

00:38.250 --> 00:41.540
Ora, il nome dipende da voi, ma io lo chiamerò Component, perché

00:41.540 --> 00:44.090
potreste conoscere questo termine da React o Angular,

00:44.090 --> 00:45.870
se ci lavorate, e anche se non ci lavorate,

00:45.870 --> 00:47.590
potete pensare a queste classi come

00:47.590 --> 00:49.873
componenti dell'interfaccia utente, che

00:50.770 --> 00:53.950
renderizzate sullo schermo.

00:53.950 --> 00:57.950
E ogni componente è alla fine un oggetto renderizzabile, che ha alcune

00:57.950 --> 00:59.970
funzionalità che ci permettono di

00:59.970 --> 01:01.370
renderizzarlo.

01:01.370 --> 01:05.260
E poi le istanze concrete, o le classi ereditate, aggiungono

01:05.260 --> 01:10.260
funzionalità extra di cui questo componente specifico ha bisogno.

01:10.300 --> 01:14.370
Che cosa va a finire nella classe dei componenti generali?

01:14.370 --> 01:17.590
Direi sicuramente questi tre elementi.

01:17.590 --> 01:21.390
templateElement, hostElement ed element.

01:21.390 --> 01:23.590
Tuttavia, abbiamo un problema per quanto

01:23.590 --> 01:25.470
riguarda le tipologie.

01:25.470 --> 01:28.320
Il templateElement sarà sempre un HTMLTemplateElement,

01:29.160 --> 01:31.980
ma l'hostElement non deve essere sempre un div; per

01:31.980 --> 01:35.410
esempio, quando aggiungiamo una classe di elementi di un progetto,

01:35.410 --> 01:37.160
lo rendiamo in una ProjectList

01:37.160 --> 01:40.550
e non direttamente nel nostro div principale, quindi non è sempre

01:40.550 --> 01:42.360
un div.

01:42.360 --> 01:45.220
E questo qui, beh, è sempre un HTMLElement,

01:45.220 --> 01:47.040
possiamo certamente stabilirlo,

01:47.040 --> 01:50.540
ma, come nel caso della classe ProjectInput, sappiamo

01:50.540 --> 01:52.560
che si tratta di una forma specifica,

01:52.560 --> 01:55.230
un HTMLFormElement.

01:55.230 --> 01:57.540
Quindi perderemmo queste informazioni

01:57.540 --> 02:00.320
aggiuntive, se ci limitassimo ad avere sempre

02:00.320 --> 02:02.130
e solo un elemento HTMLE, senza

02:02.130 --> 02:05.220
memorizzare informazioni più specifiche.

02:05.220 --> 02:07.690
Quindi come possiamo aggirare questo problema?

02:07.690 --> 02:10.050
Beh, non solo usando l'ereditarietà,

02:10.050 --> 02:12.920
ma creando una classe generica

02:12.920 --> 02:17.680
da cui ereditare i tipi concreti.

02:17.680 --> 02:20.940
Per questo, aggiungiamo delle parentesi angolari dopo

02:20.940 --> 02:23.550
il nome della classe e poi due identificatori

02:23.550 --> 02:26.690
a nostra scelta, come T e U, che sono scelte comuni.

02:26.690 --> 02:30.110
Ora possiamo anche aggiungere alcuni vincoli

02:30.110 --> 02:34.820
e dire che T sarà sicuramente un qualche tipo di HTMLElement.

02:34.820 --> 02:36.770
Può essere solo un HTMLElement o

02:36.770 --> 02:38.970
una versione più specifica di esso.

02:38.970 --> 02:41.870
E lo stesso vale per U.

02:41.870 --> 02:44.780
E qui sappiamo che l'hostElement sarà di tipo

02:44.780 --> 02:46.690
T e l'elemento sarà di tipo U.

02:46.690 --> 02:48.660
E ora, ogni volta che ereditiamo da questa

02:48.660 --> 02:50.970
classe, possiamo specificare i tipi concreti, in

02:50.970 --> 02:52.930
modo da poter lavorare con tipi diversi nei

02:52.930 --> 02:54.780
diversi luoghi in cui ereditiamo.

02:56.050 --> 02:58.053
Ora, aggiungiamo anche un costruttore.

02:58.910 --> 03:01.080
In questo costruttore, avremo bisogno

03:01.080 --> 03:03.060
di alcune informazioni.

03:03.060 --> 03:05.950
Dobbiamo conoscere l'ID del nostro modello, in modo

03:05.950 --> 03:08.030
da sapere come selezionarlo, che deve

03:08.030 --> 03:09.750
essere una stringa.

03:09.750 --> 03:11.590
Abbiamo bisogno di conoscere l'hostElementId,

03:11.590 --> 03:13.050
che deve essere una stringa, in

03:13.050 --> 03:15.833
modo da sapere dove rendere questo componente.

03:17.440 --> 03:20.505
E voglio anche ottenere un newElementId, in modo

03:20.505 --> 03:22.590
da ottenere un ID da assegnare all'elemento

03:22.590 --> 03:24.350
appena reso.

03:24.350 --> 03:26.020
Questo, tuttavia, è facoltativo,

03:26.020 --> 03:28.210
e lo segnalo aggiungendo un punto interrogativo

03:28.210 --> 03:29.690
dopo il parametro.

03:29.690 --> 03:31.940
L'alternativa sarebbe accettare anche

03:31.940 --> 03:34.050
undefined come tipo, ma utilizzerò

03:34.050 --> 03:36.470
solo il punto interrogativo.

03:36.470 --> 03:38.510
E ora, con questo nel costruttore, possiamo,

03:38.510 --> 03:39.793
in pratica, prendere questo

03:40.640 --> 03:42.083
codice qui e inserirlo nel

03:43.810 --> 03:46.950
nostro costruttore della classe Component, in modo da memorizzare

03:46.950 --> 03:48.940
il templateElement, ma, naturalmente,

03:48.940 --> 03:52.060
ora l'ID, che stiamo ottenendo qui, è il templateId, che è

03:52.060 --> 03:57.450
il motivo per cui lo sto ottenendo come parametro nel costruttore.

03:57.450 --> 04:00.060
E per l'hostElement, l'ID qui, ovviamente,

04:00.060 --> 04:02.733
è il nostro hostElementId, come questo.

04:04.790 --> 04:07.930
È importante anche, naturalmente, per quanto riguarda il casting:

04:07.930 --> 04:10.230
sappiamo che questo sarà di tipo T, perché T è

04:10.230 --> 04:12.580
questo tipo generico, che memorizziamo o utilizziamo

04:12.580 --> 04:15.420
per il nostro hostElement, quindi possiamo già eseguire

04:15.420 --> 04:17.163
il casting.

04:18.160 --> 04:20.253
E con ciò, stiamo selezionando gli elementi.

04:21.130 --> 04:22.940
Possiamo anche prendere altro codice.

04:22.940 --> 04:26.650
Il codice qui, dove importiamo un nodo e così via, e

04:26.650 --> 04:30.130
dove impostiamo l'ID, può essere preso tutto.

04:30.130 --> 04:32.520
Copiamolo qui e aggiungiamolo al

04:32.520 --> 04:35.317
costruttore della classe Component.

04:35.317 --> 04:37.640
importedNode, quindi impostiamo element

04:37.640 --> 04:41.080
ed element qui ha questo tipo generico U, quindi quando

04:41.080 --> 04:43.000
lo lanciamo qui, sappiamo che

04:43.000 --> 04:46.870
sarà di tipo U qui, quindi dovremmo lancarlo a U.

04:46.870 --> 04:49.090
Si tratta di un buon uso dei generici, che rende

04:49.090 --> 04:51.993
questa classe Component davvero riutilizzabile.

04:53.060 --> 04:55.200
Ora, per quanto riguarda l'ID.

04:55.200 --> 04:58.200
Questo è ciò che otteniamo, il nuovoElementId.

04:58.200 --> 05:00.590
Naturalmente non sempre è presente, perché

05:00.590 --> 05:02.150
è facoltativo, quindi è bene

05:02.150 --> 05:03.870
verificare se è presente.

05:03.870 --> 05:06.070
Quindi, se newElementId è una cosa, e solo

05:06.070 --> 05:07.650
se è una cosa, solo allora cercherò

05:07.650 --> 05:10.543
di assegnarla, altrimenti non ci proveremo, perché

05:10.543 --> 05:13.023
non abbiamo alcun ID da assegnare.

05:14.420 --> 05:16.300
Bene, con questo abbiamo il costruttore.

05:16.300 --> 05:19.160
Utilizziamo ora la funzione attach.

05:19.160 --> 05:21.970
Copiamo quindi il metodo attach da una

05:21.970 --> 05:25.470
delle altre classi e aggiungiamolo qui, come metodo

05:25.470 --> 05:28.473
privato, nella classe Component.

05:32.690 --> 05:35.640
Possiamo quindi chiamare anche questo. alla fine del costruttore

05:35.640 --> 05:38.540
della classe Component.

05:38.540 --> 05:39.960
Ora, qui vogliamo aggiungere

05:39.960 --> 05:42.570
un elemento, ma non sappiamo dove deve essere aggiunto,

05:42.570 --> 05:44.193
quindi è necessario recuperare

05:44.193 --> 05:46.450
alcune informazioni extra, come quarto

05:46.450 --> 05:49.450
argomento nel costruttore, inserendo Atstart, che potrebbe

05:52.430 --> 05:54.200
essere un nome, e questo è un booleano,

05:54.200 --> 05:56.680
diciamo.

05:56.680 --> 06:00.190
E dovremmo spostarlo davanti al nostro parametro opzionale.

06:00.190 --> 06:02.230
I parametri opzionali dovrebbero essere sempre per

06:02.230 --> 06:03.980
ultimi, perché potrebbero essere omessi.

06:03.980 --> 06:06.680
I parametri obbligatori, quindi, non possono

06:06.680 --> 06:09.220
venire dopo quelli opzionali.

06:09.220 --> 06:13.533
E insertAtStart viene poi inoltrato ad attach, dove insertAtBeginning,

06:14.615 --> 06:18.740
si potrebbe anche riutilizzare insertAtStart, sto solo usando un

06:18.740 --> 06:21.350
nome diverso per evitare confusione, viene

06:21.350 --> 06:23.470
ricevuto come booleano.

06:23.470 --> 06:28.040
E poi qui, controlliamo se insertAtBeginning è vero;

06:28.040 --> 06:32.920
se lo è, allora abbiamo afterbegin, altrimenti abbiamo

06:32.920 --> 06:34.887
beforeend.

06:36.770 --> 06:39.653
Ora siamo flessibili per quanto riguarda il modo in cui questo viene inserito.

06:42.980 --> 06:46.570
Voglio anche contrassegnare questa classe come classe astratta, perché

06:46.570 --> 06:49.600
non dovrebbe mai essere istanziata direttamente, ma dovrebbe

06:49.600 --> 06:52.560
essere sempre usata per l'ereditarietà.

06:52.560 --> 06:56.090
Quindi, davanti alla classe, aggiungo la parola chiave astratto.

06:56.090 --> 06:58.750
Questo fa sì che ora non si possa istanziare.

06:58.750 --> 07:01.963
Se provassimo a farlo, TypeScript ci sgriderebbe.

07:04.070 --> 07:06.490
Aggiungerò anche altri due metodi,

07:06.490 --> 07:08.410
il metodo configure e il

07:08.410 --> 07:10.840
metodo renderContent.

07:10.840 --> 07:13.430
Lo aggiungerò come metodo astratto, il che significa

07:13.430 --> 07:16.463
che manca l'implementazione concreta, ma ora, in pratica,

07:18.000 --> 07:21.080
obblighiamo qualsiasi classe che eredita da component

07:21.080 --> 07:22.670
ad aggiungere questi due metodi

07:22.670 --> 07:25.980
e ad averli a disposizione.

07:25.980 --> 07:27.220
Lo aggiungo qui, in modo

07:27.220 --> 07:29.390
che se qualcun altro guarda il nostro

07:29.390 --> 07:31.460
codice, possa capire bene qual è l'idea

07:31.460 --> 07:34.150
alla base della classe Component.

07:34.150 --> 07:36.340
Che fa tutto il rendering generale o il

07:36.340 --> 07:38.530
collegamento del componente, ma che

07:38.530 --> 07:40.790
il contenuto concreto e la configurazione

07:40.790 --> 07:43.840
devono avvenire nel luogo in cui si eredita.

07:43.840 --> 07:47.670
Nota a margine: non si possono avere metodi privati e astratti.

07:47.670 --> 07:49.660
Quindi private deve essere omesso,

07:49.660 --> 07:52.000
non è consentito da TypeScript.

07:52.000 --> 07:54.590
Con questo, possiamo estendere Component

07:54.590 --> 07:56.480
qui su ProjectList e sbarazzarci

07:56.480 --> 07:59.130
di queste tre proprietà.

07:59.130 --> 08:00.640
Manteniamo i progetti assegnati,

08:00.640 --> 08:03.520
perché sono specifici dell'elenco di progetti.

08:03.520 --> 08:06.620
Ora vogliamo anche specificare i valori concreti

08:06.620 --> 08:09.560
da inserire per i nostri tipi generici.

08:09.560 --> 08:12.410
E sappiamo che, se lo ripristiniamo,

08:12.410 --> 08:16.540
avremo un HTMLDivElement e un HTMLElement, quindi

08:16.540 --> 08:19.313
passerò HTMLDivElement e HTMLElement,

08:20.410 --> 08:22.800
in questo modo, e poi mi libererò

08:22.800 --> 08:25.830
di queste tre proprietà.

08:25.830 --> 08:29.510
Nel costruttore, ora non ne abbiamo bisogno, ma dobbiamo chiamare

08:29.510 --> 08:32.550
super all'inizio, per chiamare il costruttore della

08:32.550 --> 08:35.130
classe base e per questo dobbiamo passare alcune

08:35.130 --> 08:38.080
informazioni al costruttore super, dobbiamo passare

08:38.080 --> 08:40.840
alcune informazioni.

08:40.840 --> 08:42.753
L'ID del templateElement, l'hostElementId,

08:44.050 --> 08:45.850
se vogliamo inserirlo all'inizio

08:45.850 --> 08:47.870
dell'hostElement e, potenzialmente,

08:47.870 --> 08:51.920
l'ID da assegnare al nuovo elemento.

08:51.920 --> 08:54.038
Ecco il nostro ID modello e

08:54.038 --> 08:57.811
con questo possiamo sbarazzarci di questo.

08:57.811 --> 09:01.292
Poi qui, l'hostElement, l'ID era app, quindi possiamo sbarazzarci

09:01.292 --> 09:02.670
di questo.

09:02.670 --> 09:04.260
Manteniamo i progetti assegnati,

09:04.260 --> 09:06.400
perché ne abbiamo ancora bisogno.

09:06.400 --> 09:08.193
Ce ne liberiamo qui, ma per

09:10.150 --> 09:13.050
quanto riguarda l'ID del nuovo elemento,

09:13.050 --> 09:16.850
voglio passarlo come quarto parametro.

09:16.850 --> 09:19.040
Il terzo è il punto in cui dovrebbe essere

09:19.040 --> 09:22.400
inserito, e qui usiamo inserirlo prima della fine, quindi

09:22.400 --> 09:25.890
in realtà quello che voglio inserire qui come parametro per

09:25.890 --> 09:29.170
il valore insertAtStart è false, perché non dovrebbe essere

09:29.170 --> 09:32.283
inserito all'inizio, ma alla fine.

09:36.000 --> 09:38.940
Ora, certamente voglio ancora impostare il mio ascoltatore qui.

09:38.940 --> 09:40.730
Non ho bisogno di chiamare attach,

09:40.730 --> 09:44.410
questo avverrà nella classe di base, nel componente di base.

09:44.410 --> 09:46.253
Tuttavia, chiamerò renderContent.

09:47.870 --> 09:50.010
E qui non dovremmo usare questo tipo, ma solo

09:50.010 --> 09:52.100
type, perché non possiamo usarlo prima

09:52.100 --> 09:54.410
che super abbia finito di funzionare.

09:54.410 --> 09:55.490
Ma non è un problema, perché

09:55.490 --> 09:57.690
abbiamo ricevuto il tipo come argomento.

09:57.690 --> 09:59.680
Ora, come vedete, si verifica ancora

09:59.680 --> 10:03.487
un errore, perché abbiamo un metodo attach qui in ProjectList e questo

10:03.487 --> 10:05.410
si scontra con il metodo attach che

10:05.410 --> 10:07.330
abbiamo nella classe base.

10:07.330 --> 10:10.600
Eliminiamo quindi questo metodo attach.

10:10.600 --> 10:14.024
Ora otteniamo ancora un errore, perché, come vedete, renderContent

10:14.024 --> 10:16.060
è privato, ma lo specifichiamo come

10:16.060 --> 10:18.270
metodo pubblico; mi piacerebbe che fosse

10:18.270 --> 10:20.240
privato, ma i metodi privati astratti

10:20.240 --> 10:22.860
non sono supportati.

10:22.860 --> 10:25.680
Quindi rimuoverò la parola chiave private

10:25.680 --> 10:28.170
e ora ci rimane un problema: non abbiamo

10:28.170 --> 10:30.510
il metodo configure, che avevo promesso

10:30.510 --> 10:31.990
di avere qui.

10:31.990 --> 10:33.650
Beh, aggiungiamolo.

10:33.650 --> 10:38.500
Quindi qui, oltre a renderConfig, potremmo aggiungere configure, anche

10:38.500 --> 10:40.510
se non sto facendo nulla qui.

10:40.510 --> 10:42.950
In alternativa, si potrebbe convertire questo metodo in un

10:42.950 --> 10:46.000
metodo opzionale, aggiungendo un punto interrogativo, in modo da non essere

10:46.000 --> 10:47.520
obbligati ad aggiungerlo.

10:47.520 --> 10:50.380
Lo aggiungo qui, perché potremmo anche

10:50.380 --> 10:53.210
sostenere che, per ProjectList, il codice

10:53.210 --> 10:56.490
in cui impostiamo il nostro ascoltatore è in

10:56.490 --> 10:58.530
realtà in configure.

10:58.530 --> 11:00.810
Così possiamo raggiungere la configurazione

11:00.810 --> 11:03.320
e poi fare le nostre cose qui, con l'impostazione

11:03.320 --> 11:05.220
dell'ascoltatore.

11:05.220 --> 11:06.610
Ora dobbiamo solo assicurarci

11:06.610 --> 11:10.653
di chiamare renderContent, ma anche di configurare in questo modo.

11:12.730 --> 11:14.440
Se vi state chiedendo perché non

11:14.440 --> 11:16.450
sto chiamando configure e renderContent

11:16.450 --> 11:18.560
qui nella classe astratta nel costruttore,

11:18.560 --> 11:19.993
beh, potremmo farlo, ma potremmo

11:21.780 --> 11:23.720
avere un problema.

11:23.720 --> 11:26.760
Se lo chiamiamo nella classe Component, potremmo

11:26.760 --> 11:30.770
chiamare un metodo nella classe ereditata, quindi in una classe

11:30.770 --> 11:33.240
che estende Component, in cui renderContent

11:33.240 --> 11:36.810
o configure si basano su qualcosa in cui il costruttore della

11:36.810 --> 11:39.410
classe ereditata può effettivamente impostare

11:39.410 --> 11:41.540
qualcosa, solo dopo che il costruttore

11:41.540 --> 11:44.710
della classe base ha terminato, su cui renderContent

11:44.710 --> 11:48.100
e o configure si basano.

11:48.100 --> 11:50.690
Per questo motivo è più sicuro assicurarsi che

11:50.690 --> 11:52.410
sia la classe ereditaria a dover

11:52.410 --> 11:55.410
chiamare questi metodi, anziché la classe base a chiamarli

11:55.410 --> 11:56.860
per noi.

11:57.980 --> 12:01.280
Quindi, abbiamo ristrutturato la classe ProjectList

12:01.280 --> 12:05.040
per sfruttare l'ereditarietà e la logica condivisa.

12:05.040 --> 12:07.730
Facciamo ora la stessa cosa per ProjectInput.

12:07.730 --> 12:11.790
In questo caso, vogliamo anche estendere

12:11.790 --> 12:13.170
Component.

12:13.170 --> 12:14.900
Utilizzando la natura generica

12:14.900 --> 12:19.430
di questo elemento, abbiamo l'HTMLDivElement per l'hostElement

12:19.430 --> 12:23.980
e l'HTMLFormElement per l'elemento che viene reso.

12:23.980 --> 12:27.210
In questo modo, possiamo sbarazzarci di queste tre proprietà,

12:27.210 --> 12:28.310
quindi facciamolo.

12:28.310 --> 12:30.090
Manteniamo queste tre proprietà, ovviamente,

12:30.090 --> 12:32.140
perché sono specifiche di ProjectInput.

12:33.040 --> 12:35.310
Dobbiamo quindi chiamare super

12:35.310 --> 12:38.320
e a super passiamo l'ID del template, che è ProjectInput,

12:38.320 --> 12:39.900
l'ID dell'elemento host,

12:39.900 --> 12:41.970
che è app, insertBefore qui è true,

12:41.970 --> 12:45.270
perché voglio inserire l'elemento appena creato

12:45.270 --> 12:50.510
all'inizio per questa classe ProjectInput.

12:50.510 --> 12:53.110
E poi, newElementId, beh, questo è un input

12:53.110 --> 12:55.170
dell'utente, quindi dovremmo inoltrare

12:55.170 --> 12:56.913
anche questo.

12:57.844 --> 12:59.400
In questo modo, possiamo sbarazzarci

12:59.400 --> 13:03.480
di questo codice, di questo codice e di tutto questo codice.

13:03.480 --> 13:05.240
Naturalmente, conservate questo codice qui.

13:05.240 --> 13:07.820
Tuttavia, potremmo anche affermare che forse lo

13:07.820 --> 13:09.860
abbiamo messo in configurazione.

13:09.860 --> 13:12.100
Andiamo quindi al metodo configure, che abbiamo

13:12.100 --> 13:13.660
già qui, e aggiungiamo i nostri

13:13.660 --> 13:17.683
ascoltatori o le nostre impostazioni di proprietà da configurare.

13:18.880 --> 13:20.780
Naturalmente, eliminiamo attach,

13:20.780 --> 13:24.450
perché ora è qualcosa che la classe base fa per noi, e controlliamo

13:24.450 --> 13:26.980
cosa non piace a TypeScript, ovviamente dovremmo

13:26.980 --> 13:29.690
eliminare attach qui.

13:29.690 --> 13:32.520
E sì, in effetti una cosa che non piace a TypeScript

13:32.520 --> 13:35.090
è che ora si lamenta del fatto che questi campi

13:35.090 --> 13:37.190
non vengono inizializzati nel costruttore,

13:37.190 --> 13:40.380
perché non capisce o non controlla che configure sia chiamato

13:40.380 --> 13:42.260
nel costruttore e faccia questa

13:42.260 --> 13:44.770
inizializzazione.

13:44.770 --> 13:47.500
Quindi, per soddisfare TypeScript, sposterò

13:47.500 --> 13:52.170
queste inizializzazioni da configure al costruttore.

13:52.170 --> 13:54.190
Tecnicamente, il risultato è esattamente lo stesso,

13:54.190 --> 13:55.953
ma ora TypeScript non si lamenterà.

13:56.800 --> 13:59.240
Tuttavia, si lamenterà che abbiamo un

14:00.440 --> 14:02.310
metodo configure privato, quindi,

14:02.310 --> 14:05.910
come in precedenza, dovremmo modificarlo e trasformare

14:05.910 --> 14:08.940
configure in un metodo pubblico.

14:08.940 --> 14:11.460
Ora, non è un obbligo, ma è una specie di convenzione

14:11.460 --> 14:13.000
avere i metodi pubblici per primi,

14:13.000 --> 14:14.570
ed è per questo che li sposterò

14:14.570 --> 14:17.240
qui sopra gli altri metodi privati.

14:17.240 --> 14:19.370
E, naturalmente, ora si lamenta anche

14:19.370 --> 14:21.990
che non abbiamo un metodo renderContent.

14:21.990 --> 14:25.020
Ora ne aggiungerò uno, solo perché è necessario.

14:25.020 --> 14:26.780
Qui non facciamo nulla, quindi

14:26.780 --> 14:28.890
tecnicamente non è necessario, ma ora

14:28.890 --> 14:31.053
soddisfiamo la nostra classe base.

14:32.260 --> 14:34.603
Nota a margine: anche renderContent e configure,

14:35.550 --> 14:39.590
nella classe ProjectList, possono essere spostati al di sopra di questo

14:39.590 --> 14:43.230
metodo privato per le stesse identiche ragioni, per la convenzione

14:43.230 --> 14:45.123
appena citata.

14:46.440 --> 14:49.870
Con ciò, abbiamo anche ristrutturato ProjectInput, per

14:49.870 --> 14:51.780
sfruttare l'ereditarietà e lasciare

14:51.780 --> 14:55.330
che la classe base faccia gran parte del lavoro.

14:55.330 --> 14:57.670
Vediamo se ora tutto questo funziona.

14:57.670 --> 15:00.710
Se lo salviamo, compila senza errori

15:00.710 --> 15:02.740
e sembra funzionare bene,

15:02.740 --> 15:05.870
quindi la domanda è se funziona.

15:05.870 --> 15:07.810
E sembra piuttosto buono.

15:07.810 --> 15:09.720
Funziona come prima, ma ora abbiamo

15:09.720 --> 15:11.600
un codice più pulito, che sfrutta

15:11.600 --> 15:15.850
il riutilizzo del codice grazie all'ereditarietà.

15:15.850 --> 15:18.540
Ora, non è l'unico posto in cui possiamo ereditare.

15:18.540 --> 15:20.610
Voglio concludere questa lezione

15:20.610 --> 15:24.230
rifattorizzando anche lo stato del nostro progetto.

15:24.230 --> 15:26.240
Tecnicamente, non abbiamo bisogno dell'ereditarietà,

15:26.240 --> 15:29.450
perché abbiamo un solo stato che gestiamo nell'intera applicazione,

15:29.450 --> 15:31.230
ma immaginiamo un'applicazione

15:31.230 --> 15:35.310
più grande, in cui ci sono più stati diversi.

15:35.310 --> 15:37.240
Uno per lo stato dell'utente,

15:37.240 --> 15:39.290
se ha effettuato il login e così

15:39.290 --> 15:43.030
via, uno per i progetti e uno per il carrello.

15:43.030 --> 15:45.600
Ora, si noterà che alcune caratteristiche della

15:45.600 --> 15:48.080
classe di stato sono sempre le stesse.

15:48.080 --> 15:50.520
In particolare, l'array di ascoltatori

15:50.520 --> 15:52.780
e il metodo addListener.

15:52.780 --> 15:54.730
Quindi potremmo anche usare una classe base.

15:55.650 --> 15:58.170
Potremmo usare una classe State,

15:58.170 --> 16:01.230
che ha un array di ascoltatori e un metodo

16:01.230 --> 16:04.640
addListeners, quindi li taglieremo da

16:04.640 --> 16:07.120
ProjectState e li aggiungeremo

16:07.120 --> 16:09.160
a State.

16:09.160 --> 16:12.610
Ora, questo significa anche che, ovviamente, non sappiamo se

16:12.610 --> 16:14.700
il nostro ascoltatore restituirà effettivamente

16:14.700 --> 16:16.720
un array di progetti.

16:16.720 --> 16:18.253
In realtà qui, per

16:19.110 --> 16:20.760
questo tipo di funzione,

16:20.760 --> 16:24.740
voglio avere anche un tipo generico.

16:24.740 --> 16:27.440
In modo da poterlo impostare dall'esterno.

16:27.440 --> 16:28.483
Possiamo farlo, possiamo

16:29.790 --> 16:31.623
scrivere un tipo generico, come questo

16:32.680 --> 16:35.730
qui, un tipo personalizzato, che è generico, possiamo aggiungere

16:35.730 --> 16:38.410
le parentesi angolari dopo il nome del nostro tipo, usare

16:38.410 --> 16:40.150
un identificatore di nostra scelta

16:40.150 --> 16:42.460
e poi riutilizzare quel tipo qui.

16:42.460 --> 16:44.960
Ora, possiamo rendere generico State, possiamo usare

16:44.960 --> 16:46.320
lo stesso identificatore, perché

16:46.320 --> 16:49.530
è un costrutto diverso dal nostro tipo personalizzato.

16:49.530 --> 16:53.520
E poi qui, quando diciamo che vogliamo avere un elenco di ascoltatori,

16:53.520 --> 16:56.780
dobbiamo dire a TypeScript quale tipo generico usano

16:56.780 --> 16:58.850
gli ascoltatori per questo oggetto

16:58.850 --> 17:01.510
State che stiamo creando.

17:01.510 --> 17:03.850
Ciò significa semplicemente che possiamo

17:03.850 --> 17:06.490
inoltrare il nostro tipo generico qui e qui.

17:06.490 --> 17:09.410
Quindi, quando estendiamo lo stato, dobbiamo specificare

17:09.410 --> 17:12.630
il tipo di dati con cui lo stato lavorerà e, invece dello stato,

17:12.630 --> 17:14.930
questo viene inoltrato al nostro tipo personalizzato

17:14.930 --> 17:17.680
di ascoltatore, questa è l'idea.

17:17.680 --> 17:19.580
E come utilizziamo tutto questo?

17:19.580 --> 17:21.950
Bene, laggiù, nella classe ProjectState,

17:21.950 --> 17:24.930
estendiamo semplicemente la classe State e ora

17:24.930 --> 17:27.900
forniamo un valore, un valore concreto per quel

17:27.900 --> 17:30.040
segnaposto generico e qui, questo

17:30.040 --> 17:32.480
valore concreto è Project, perché questo

17:32.480 --> 17:36.510
ProjectState serve a gestire indovinate cosa?

17:36.510 --> 17:37.393
Progetti.

17:38.970 --> 17:41.650
Ora, il costruttore privato qui ha un problema,

17:41.650 --> 17:43.390
come si può notare, perché non

17:43.390 --> 17:45.160
stiamo chiamando super.

17:45.160 --> 17:46.930
Dovremmo proprio farlo, chiamiamo

17:46.930 --> 17:48.350
la super qui, è l'unica cosa

17:48.350 --> 17:49.800
che dobbiamo fare.

17:50.640 --> 17:53.490
E qui, se scorriamo verso il basso, dove passiamo

17:53.490 --> 17:55.880
in rassegna gli ascoltatori, vediamo

17:55.880 --> 17:57.890
che listeners è privato, ed è privato

17:57.890 --> 18:00.240
nella nostra classe base.

18:00.240 --> 18:01.860
Ciò significa che possiamo accedervi

18:01.860 --> 18:03.580
solo dall'interno della classe base.

18:03.580 --> 18:06.760
Ma avete imparato a conoscere un altro modificatore

18:06.760 --> 18:09.380
di accesso, simile a private, ma che

18:09.380 --> 18:12.900
consente l'accesso anche alle classi ereditarie:

18:12.900 --> 18:14.990
protected.

18:14.990 --> 18:17.200
Protetto significa che non è ancora accessibile

18:17.200 --> 18:18.930
dall'esterno della classe, ma

18:18.930 --> 18:23.030
può essere accessibile da qualsiasi classe che lo erediti.

18:23.030 --> 18:24.740
Quindi salviamo il tutto, che dovrebbe

18:24.740 --> 18:26.650
essere compilato senza problemi.

18:26.650 --> 18:28.940
Testiamolo rapidamente e il risultato

18:28.940 --> 18:31.790
è buono, quindi funziona come prima, ma ora, di nuovo,

18:31.790 --> 18:34.160
con un codice un po' più bello, usando l'ereditarietà

18:34.160 --> 18:36.420
e i generici anche per la gestione degli

18:36.420 --> 18:38.363
stati.
