WEBVTT

00:02.120 --> 00:04.590
教师：正如我在上节课中提到的, 监视模式是一个很好的开始,

00:04.590 --> 00:08.910
但是如果我们有多个TypeScript文件呢？

00:08.910 --> 00:18.370
如果我们也有一个分析｡  ts文件, 我们假设在那里发送分析数据到我们的服务器？

00:18.530 --> 00:24.240
现在, 这里只是有什么在那里, 我只是把在一个控制台｡

00:24.240 --> 00:24.240
日志

00:24.240 --> 00:26.710
语句 , 但 当然 , 您 也 可以 向 此处 的

00:26.710 --> 00:29.180
分析 服务 发送 HTTP 请求 ｡

00:29.180 --> 00:36.420
假设我们也在索引中导入了这个文件｡

00:36.420 --> 00:36.420
html档案｡ 

00:36.420 --> 00:41.730
如果我们指向分析｡  js, 它还不存在, 但编译后会存在,

00:41.730 --> 00:44.760
那么我们就可以加载这两个文件, 当然,

00:44.760 --> 00:46.660
只要其中一个文件发生变化,

00:46.660 --> 00:50.900
我们就需要编译这两个文件.

00:50.900 --> 00:52.490
现在, 如果我们可以进入一些通用的监视模式,

00:52.490 --> 01:05.823
这样我们就可以运行tsc, 而不指向一个文件, 它只监视我们的整个项目文件夹, 并重新编译任何可能更改的TypeScript文件｡

01:06.720 --> 01:08.960
好吧, 事实证明这是可能的｡ 

01:08.960 --> 01:11.340
为此, 我们只需要告诉TypeScript,

01:11.340 --> 01:16.750
这是一个应该用TypeScript管理的项目, 我们首先这样做,

01:16.750 --> 01:23.710
我们只需要这样做一次, 运行tsc --init｡

01:23.710 --> 01:26.170
我并没有指向一个特定的文件,

01:26.170 --> 01:29.540
我只是运行tsc, 然后--init,

01:29.540 --> 01:31.230
这只需要一次｡

01:31.230 --> 01:36.390
它将初始化您在其中将此命令作为TypeScript项目运行的项目｡

01:36.390 --> 01:41.850
这意味着它现在基本上会告诉TypeScript您运行此命令的文件夹中的所有内容,

01:41.850 --> 01:50.550
因此, 在使用VS代码中的内置终端运行此命令之前, 导航到正确的文件夹非常重要｡

01:50.550 --> 01:52.910
我自动位于我的文件所在的项目文件夹中,

01:52.910 --> 01:57.370
因此此项目现在由TypeScript管理｡

01:57.370 --> 02:02.634
我们按回车键, 它会创建这个tsconfig.

02:02.634 --> 02:02.634
json文件｡ 

02:02.634 --> 02:06.580
这基本上是TypeScript的指示符,

02:06.580 --> 02:14.710
指示该文件所在的项目以及该文件夹的所有子文件夹应由TypeScript管理｡

02:14.710 --> 02:16.080
现在, 如果我们查看此文件,

02:16.080 --> 02:19.330
我们会看到一系列选项, 其中大多数已注释掉, 它们只是在那里,

02:19.330 --> 02:26.380
以便您可以设置它们, 这里也有一个简短的说明, 但我们现在不必担心这些｡

02:26.380 --> 02:29.040
我们马上就深入探讨｡ 

02:29.040 --> 02:31.610
现在, 我们先关闭这个文件,

02:32.800 --> 02:35.100
看看它给我们带来了什么,

02:35.100 --> 02:36.550
因为它给我们带来的是,

02:36.550 --> 02:42.610
我们现在可以像这样运行tsc, 而不用指向特定的文件｡

02:42.610 --> 02:53.090
它会告诉TypeScript继续编译所有的TypeScript文件｡

02:53.090 --> 02:53.090
ts文件,

02:53.090 --> 02:54.770
所以如果我在这里按回车键, 你看,

02:54.770 --> 03:00.530
这需要一段时间, 现在我们得到的是这个分析｡

03:00.530 --> 03:00.530
js文件和这个应用程序｡

03:00.530 --> 03:02.620
js文件中｡ 

03:02.620 --> 03:05.160
现在, 分析｡  js文件是由TypeScript创建的,

03:05.160 --> 03:10.060
因为它发现我们有分析｡

03:10.060 --> 03:10.060
ts文件,

03:10.060 --> 03:14.730
并且正如我所说的, 它现在将编译项目中的所有TypeScript文件｡

03:14.730 --> 03:17.660
当然, 这也可以与手表模式相结合｡ 

03:17.660 --> 03:20.630
您可以运行tsc -w或--watch,

03:20.630 --> 03:26.970
就像我之前演示的那样, 现在将进入所有TypeScript文件的监视模式｡

03:26.970 --> 03:29.590
所以现在只要我改变其中一个并保存它,

03:29.590 --> 03:31.920
它就会重新编译｡

03:31.920 --> 03:37.800
它将重新编译已更改文件, 从而重新编译JavaScript文件中反映的所有更改｡

03:37.800 --> 03:38.633
现在就在这里｡ 

03:38.633 --> 03:41.430
如果我回到我的页面, 我们会看到发送数据,

03:41.430 --> 03:44.463
因为现在的分析｡ ts文件｡ 
