WEBVTT

00:02.060 --> 00:06.410
Giảng viên: Typescript cung cấp nhiều loại cho JavaScript.

00:06.410 --> 00:10.100
Bây giờ, bản thân JavaScript cũng biết một số kiểu dữ liệu và tôi

00:10.100 --> 00:12.230
cũng sẽ quay lại vấn đề đó trong mô-đun

00:12.230 --> 00:14.950
này, nhưng Typescript bổ sung thêm nhiều kiểu

00:14.950 --> 00:17.380
dữ liệu khác và như bạn cũng sẽ học trong khóa

00:17.380 --> 00:21.110
học này, Typescript cũng cho phép bạn viết các loại riêng.

00:21.110 --> 00:24.320
Bây giờ, hãy bắt đầu với một số Loại cốt lõi mà JavaScript

00:24.320 --> 00:26.250
đã biết và Typescript nào cũng

00:26.250 --> 00:28.289
hỗ trợ, đồng thời chúng ta cũng

00:28.289 --> 00:30.550
sẽ xem xét sự khác biệt giữa JavaScript

00:30.550 --> 00:33.380
khi biết loại và Typescript khi sử dụng loại

00:33.380 --> 00:36.800
đó có nghĩa là gì.

00:36.800 --> 00:38.287
Một trong những loại cốt lõi

00:38.287 --> 00:41.740
mà chúng tôi làm việc với JavaScript và Bản mô tả, là loại số.

00:41.740 --> 00:45.220
Bây giờ, trong JavaScript và Typescript cũng

00:45.220 --> 00:47.290
vậy, chỉ có một loại số.

00:47.290 --> 00:50.750
Không có loại đặc biệt nào cho số nguyên hoặc số thực.

00:50.750 --> 00:55.520
Thay vào đó, những giá trị này ở đây, tất cả sẽ là số.

00:55.520 --> 00:58.180
Một sẽ là một số không có vị trí thập phân.

00:58.180 --> 01:01.640
5. 3 rõ ràng là một với vị trí thập

01:01.640 --> 01:04.532
phân và tất cả các giá trị này thuộc loại số.

01:04.532 --> 01:08.180
Các ngôn ngữ lập trình khác có các kiểu số nguyên đặc

01:08.180 --> 01:10.480
biệt và kiểu float hoặc double.

01:10.480 --> 01:11.980
JavaScript không có cái

01:11.980 --> 01:14.120
đó và Typescript cũng không có.

01:14.120 --> 01:16.070
Vì vậy, chúng tôi có loại số mà chúng

01:16.070 --> 01:19.810
tôi biết từ JavaScript, cũng như một loại, trong Bản mô tả.

01:19.810 --> 01:23.950
Chúng tôi cũng có kiểu dữ liệu chuỗi và đó sẽ là văn bản mà bạn có thể

01:23.950 --> 01:26.370
xác định theo một trong ba cách sau, với

01:26.370 --> 01:28.285
dấu nháy đơn, dấu nháy kép hoặc

01:28.285 --> 01:30.950
cũng có thể với dấu gạch ngược.

01:30.950 --> 01:34.720
Ký hiệu cuối cùng với backticks là một cú pháp đặc biệt,

01:34.720 --> 01:38.640
được cung cấp trong JavaScript hiện đại và cả trong Bản

01:38.640 --> 01:42.440
mô tả, cho phép chúng tôi viết cái gọi là chữ mẫu, là các

01:42.440 --> 01:44.550
chuỗi bình thường mà bạn có thể

01:44.550 --> 01:47.520
tự động đưa một số dữ liệu vào chúng.

01:47.520 --> 01:49.240
Vì vậy, chuỗi chỉ đơn giản

01:49.240 --> 01:53.000
là văn bản và JavaScript biết về các loại giá trị chuỗi.

01:53.000 --> 01:55.000
Typescript cũng làm như vậy.

01:55.000 --> 01:57.240
Cuối cùng, nhưng không kém phần quan trọng, một

01:57.240 --> 01:59.790
trong những kiểu dữ liệu cốt lõi mà JavaScript biết và

01:59.790 --> 02:02.250
Typescript cũng hỗ trợ, là kiểu dữ liệu Boolean.

02:02.250 --> 02:03.810
Điều đó có thể đúng hoặc sai, và

02:03.810 --> 02:06.610
điều đó rõ ràng là cực kỳ quan trọng trong lập trình, đặc

02:06.610 --> 02:08.920
biệt là khi làm việc với các câu lệnh IF.

02:08.920 --> 02:10.970
Ở đây, chúng ta có hai giá trị này,

02:10.970 --> 02:13.690
và điều đó rất quan trọng, bởi vì trong

02:13.690 --> 02:17.520
JavaScript, bạn cũng có thể biết ý tưởng về giá trị trung

02:17.520 --> 02:22.190
thực và giá trị giả, ví dụ như số 0, số 0, là một giá trị giả.

02:22.190 --> 02:25.510
Nếu bạn sử dụng nó trong điều kiện IF, nó được coi là sai.

02:25.510 --> 02:28.560
Tuy nhiên, kiểu dữ liệu Boolean thực sự chỉ biết hai giá trị

02:28.560 --> 02:31.230
này, đúng hay sai và đó không chỉ là trường hợp của Bản

02:31.230 --> 02:33.160
mô tả mà còn đối với JavaScript.

02:33.160 --> 02:35.532
Khái niệm thật, giả này, mà bạn nên

02:35.532 --> 02:38.280
biết, không liên quan đến kiểu dữ liệu.

02:38.280 --> 02:40.840
Đó là công việc hậu trường.

02:40.840 --> 02:43.030
JavaScript có thêm thời gian chạy

02:43.030 --> 02:46.510
khi nó nhìn thấy các giá trị nhất định và điều kiện NẾU.

02:46.510 --> 02:48.530
Vì vậy, với các số, chuỗi và Booleans, chúng

02:48.530 --> 02:50.060
ta có một vài kiểu dữ liệu cốt lõi.

02:50.060 --> 02:51.450
Tất nhiên, không phải tất cả,

02:51.450 --> 02:53.410
chúng ta cũng có các đối tượng, v.v., nhưng

02:53.410 --> 02:54.617
hãy tập trung vào các loại

02:54.617 --> 02:57.330
này và xem Typescript làm gì với chúng hoặc chúng ta

02:57.330 --> 03:00.930
có thể làm gì với chúng, với sự trợ giúp của Typescript.

03:00.930 --> 03:02.620
Đối với điều này, tôi quay lại

03:02.620 --> 03:05.190
dự án, chúng ta đã thấy trong mô-đun khóa học đầu

03:05.190 --> 03:07.600
tiên, và ở đó tôi đã chỉ cho bạn rằng tất cả những

03:07.600 --> 03:10.320
gì bạn cần làm bây giờ là chạy npm start trong một

03:10.320 --> 03:12.280
thiết bị đầu cuối, điều hướng nó vào

03:12.280 --> 03:15.130
thư mục dự án này, để quay lên máy chủ phát triển trực

03:15.130 --> 03:18.110
tiếp này, máy chủ này sẽ tải lại bất cứ khi nào chúng tôi

03:18.110 --> 03:22.300
thay đổi điều gì đó và ở đây, tôi đã mở địa chỉ localhost:3000 này trong tab

03:22.300 --> 03:24.890
mới của trình duyệt của mình.

03:24.890 --> 03:26.070
Phải biết rằng, tôi đang gặp

03:26.070 --> 03:28.300
lỗi vì tôi chưa có khay ứng dụng dưới dạng tệp.

03:28.300 --> 03:30.380
Tất nhiên, bạn sẽ thấy dự án bắt đầu này, tất

03:30.380 --> 03:32.280
cả được đính kèm với bài giảng này, sẽ nhận

03:32.280 --> 03:34.400
được khay ứng dụng dưới dạng tệp mà chúng tôi

03:34.400 --> 03:37.590
đang cố gắng nhập vào đây, trong tệp html chỉ mục của chúng tôi, ngay

03:37.590 --> 03:42.050
sau khi chúng tôi biên dịch ứng dụng. ts từ Bản mô tả sang JavaScript và chúng tôi có thể thực

03:42.050 --> 03:45.070
hiện điều đó trong một tab mới của thiết bị đầu cuối, để chúng tôi tiếp

03:45.070 --> 03:46.860
tục chạy quy trình này và thay vào đó mở một

03:46.860 --> 03:51.117
tab mới, chỉ bằng cách chạy ứng dụng tsc. ts và chức năng của nó là, nó biên

03:53.920 --> 03:56.630
dịch tệp Bản mô tả và tạo ra một tệp JavaScript,

03:56.630 --> 03:58.680
và khi điều đó xảy ra, chúng tôi

03:58.680 --> 04:01.570
có thể tải lại trang này và chúng tôi có Thời

04:01.570 --> 04:05.520
gian để bắt đầu... đầu ra ở đây.

04:05.520 --> 04:08.000
Vì vậy, bây giờ chúng tôi có thiết lập này ở

04:08.000 --> 04:10.620
đây, chúng tôi có thể viết một số mã Bản mô tả và

04:10.620 --> 04:14.650
sau đó biên dịch nó thành mã JavaScript, để xem những gì nó làm.

04:14.650 --> 04:17.000
Bây giờ, với nội dung đó trong tệp Bản mô tả, tôi

04:17.000 --> 04:18.870
thực sự sẽ loại bỏ nội dung ở đó, bởi vì

04:18.870 --> 04:21.820
bây giờ, tôi muốn đi sâu vào các loại dữ liệu cốt lõi này, mà

04:21.820 --> 04:23.720
tôi vừa trình bày cho bạn trên trang trình

04:23.720 --> 04:27.230
bày, để bạn hiểu cách làm việc với chúng trong Bản đánh máy.

04:27.230 --> 04:29.430
Bây giờ, hãy bắt đầu rất, rất đơn giản.

04:29.430 --> 04:32.240
Giả sử, chúng ta có một hàm mới, cộng, và

04:32.240 --> 04:34.990
ở đó chúng ta mong đợi hai số, n1 và cộng hai,

04:34.990 --> 04:38.610
và hàm đó trả về n1 cộng n2, giống như vậy, một hàm rất

04:38.610 --> 04:42.370
đơn giản, không có gì giống Typescript về nó.

04:42.370 --> 04:46.080
Bây giờ, chúng tôi có hai số mà chúng tôi muốn làm việc.

04:46.080 --> 04:49.800
Đó có thể là số 1 ở đây, tức là số 5 và cũng có

04:49.800 --> 04:54.680
thể là số 2, có thể là số 2. 8, bất cứ thứ gì bạn muốn,

04:54.680 --> 04:57.060
hai con số ở đây.

04:57.060 --> 04:59.820
Bây giờ, rõ ràng và không quá ngạc nhiên,

04:59.820 --> 05:02.950
chúng ta có thể thêm hoặc gọi hàm add và chuyển

05:02.950 --> 05:05.280
số 1 và số 2 làm đối số cho hàm này,

05:05.280 --> 05:07.320
có thể lưu trữ kết quả trong một

05:07.320 --> 05:10.360
hằng số mới, và sau đó để xem thứ gì đó trên màn

05:10.360 --> 05:12.470
hình, chúng ta có thể điều khiển

05:12.470 --> 05:15.080
. ghi kết quả.

05:15.080 --> 05:20.080
Nếu chúng tôi làm điều đó và tôi biên dịch lại tệp này bằng ứng dụng tsc. ts, thì trang này sẽ

05:20.270 --> 05:22.730
tự động tải lại.

05:22.730 --> 05:24.350
Tất nhiên, nếu không, bạn có thể tải

05:24.350 --> 05:27.010
lại thủ công và bạn sẽ thấy 7. số 8.

05:27.010 --> 05:30.250
Bây giờ, bạn có thể nghĩ, điều đó không quá đặc biệt, phải không?

05:30.250 --> 05:33.650
Đây là một đoạn mã JavaScript khá đơn giản và

05:33.650 --> 05:37.330
thực sự, Typescript-ish không làm gì về nó.

05:37.330 --> 05:39.450
Chà, hãy làm điều gì đó sẽ chặn đoạn

05:39.450 --> 05:41.900
mã đó trong JavaScript bình thường.

05:41.900 --> 05:45.100
Giả sử, đầu vào ở đây thực sự không phải là một

05:45.100 --> 05:48.530
con số, mà là một số văn bản, số 5 ở dạng văn bản và nếu

05:48.530 --> 05:49.880
bây giờ chúng ta lưu

05:49.880 --> 05:53.380
nó và chạy lại lệnh biên dịch của mình ở đây, bạn sẽ

05:53.380 --> 05:56.110
thấy rằng, khi trang này tải lại ở đây,

05:56.110 --> 05:59.530
tôi nhận được 52 . 8 làm đầu ra và đó rõ ràng không

05:59.530 --> 06:02.200
phải là kết quả chính xác của phần bổ sung này.

06:02.200 --> 06:04.500
Bây giờ, bạn có biết tại sao chúng tôi nhận được kết

06:04.500 --> 06:06.450
quả này trong JavaScript bình thường, mà

06:06.450 --> 06:08.670
cuối cùng chúng tôi đang thực thi ở đây.

06:08.670 --> 06:10.150
Chà, chúng ta nhận được kết

06:10.150 --> 06:14.710
quả này, bởi vì đây không phải là kết quả của phép cộng toán học, mà thay vào đó,

06:14.710 --> 06:17.760
điều này nối chuỗi này dưới dạng một chuỗi, bởi vì đầu

06:17.760 --> 06:21.060
vào này, ở đây, năm, là một chuỗi và sau đó JavaScript sẽ

06:21.060 --> 06:23.997
thấy, "Được rồi, tôi có một chuỗi, "Tôi đang thêm

06:23.997 --> 06:27.667
một thứ gì đó vào chuỗi này, trong khi chắc chắn," thứ này cũng

06:27.667 --> 06:30.467
nên được chuyển đổi thành một chuỗi, "vì vậy về

06:30.467 --> 06:32.097
tổng thể, tôi có một chuỗi,"

06:32.097 --> 06:34.190
bởi vì giá trị đầu tiên là một chuỗi,"

06:34.190 --> 06:36.210
và do đó , những gì JavaScript làm là

06:36.210 --> 06:39.240
chuyển đổi 2. 8 từ một số thành một chuỗi, nối

06:39.240 --> 06:42.720
một chuỗi dài hơn từ năm và 2. 8, do đó mang

06:42.720 --> 06:46.700
lại 52. 8, dưới dạng một chuỗi và trả về chuỗi đó.

06:46.700 --> 06:49.490
Vì vậy, nó không xử lý điều này theo cách toán học, mà thay

06:49.490 --> 06:50.850
vào đó, dưới dạng một chuỗi và

06:50.850 --> 06:52.900
với JavaScript, điều này có thể xảy ra.

06:52.900 --> 06:54.037
Bây giờ, tất nhiên, bạn có thể nghĩ,

06:54.037 --> 06:55.427
"Tại sao tôi lại viết mã như vậy?

06:55.427 --> 06:58.160
"Tôi là nhà phát triển, tại sao tôi lại phạm sai lầm này? Chà, có lẽ bạn không phải là người mắc phải sai lầm này.

06:58.160 --> 07:01.230
Có thể, điều này đang được tìm nạp từ một số đầu vào của

07:01.230 --> 07:04.180
người dùng và bạn đã tạo ra một lỗi nhỏ trong mã của mình,

07:04.180 --> 07:06.690
nơi bạn quên chuyển đổi điều này hoặc bạn đang

07:06.690 --> 07:09.350
làm việc trong một nhóm và bạn đang có một vài tệp

07:09.350 --> 07:12.460
tập lệnh, làm việc cùng nhau và một số nhà phát triển khác

07:12.460 --> 07:14.740
đã đưa ra lỗi như vậy.

07:14.740 --> 07:17.270
Không phải là không thể mắc những lỗi

07:17.270 --> 07:20.110
như vậy, nhưng có thể khó theo dõi chúng.

07:20.110 --> 07:22.340
Tất nhiên, ở đây, rõ ràng là đã xảy ra sự cố, bởi

07:22.340 --> 07:24.010
vì chúng tôi có một tập lệnh cơ bản,

07:24.010 --> 07:26.400
nhưng trong một tập lệnh lớn hơn, bạn thậm chí có

07:26.400 --> 07:28.320
thể không nhận ra ngay rằng có điều gì đó

07:28.320 --> 07:31.520
không ổn ở đây và đó là Typescript có thể giúp chúng tôi.

07:31.520 --> 07:33.720
Chúng ta có thể thêm các phép gán kiểu

07:33.720 --> 07:36.390
trong hàm này vào các tham số của mình.

07:36.390 --> 07:38.820
Chúng ta có thể nói với Typescript rằng

07:38.820 --> 07:42.280
hai tham số này phải là số loại và không phải là loại,

07:42.280 --> 07:45.340
tôi không quan tâm cái nào là mặc định.

07:45.340 --> 07:47.535
Vì vậy, chúng tôi làm điều đó, bằng cách

07:47.535 --> 07:50.300
thêm dấu hai chấm ở đây, sau giá trị mà chúng tôi muốn

07:50.300 --> 07:52.890
gán một loại, vì vậy, trong trường hợp này, sau

07:52.890 --> 07:55.220
tên tham số và sau đó là tên của loại.

07:55.220 --> 07:57.140
Ví dụ: số sẽ là một trong những tên được hỗ trợ.

07:57.140 --> 08:00.560
Bên cạnh số, bạn cũng có chuỗi hoặc Boolean, nhưng

08:00.560 --> 08:03.480
chúng tôi sẽ quay lại những điều đó.

08:03.480 --> 08:05.990
Hiện tại, chúng ta cần số và chúng ta

08:05.990 --> 08:07.750
không chỉ cần nó ở tham số

08:07.750 --> 08:10.530
đầu tiên ở đây mà còn ở tham số thứ hai.

08:10.530 --> 08:12.010
Vì vậy, ở đây cũng vậy, chúng

08:12.010 --> 08:16.150
ta có thể thêm dấu hai chấm, sau đó là số, và bây giờ, những gì chúng ta đang nói với

08:16.150 --> 08:18.367
Bản mô tả, là, "Này, cả hai tham số ở đây, phải

08:18.367 --> 08:22.147
thuộc loại số," chuyển vào các giá trị của một loại khác là không được phép,"

08:22.147 --> 08:25.530
và thực tế, IDE của tôi đã phàn nàn ở đây, bởi vì Visual Studio Code

08:25.530 --> 08:28.360
có hỗ trợ Bản in được tích hợp sẵn, nhưng ngay cả khi chúng

08:28.360 --> 08:32.510
tôi sẽ bỏ qua điều này, ngay sau khi tôi biên dịch lại ứng dụng này, bằng cách chạy

08:32.510 --> 08:34.260
lại ứng dụng tsc. ts, bạn sẽ thấy,

08:34.260 --> 08:39.193
chúng tôi gặp lỗi.

08:40.040 --> 08:41.670
Chúng tôi gặp lỗi, rằng "Đối

08:41.670 --> 08:42.697
số loại '"5" không

08:42.697 --> 08:46.250
thể gán cho tham số loại 'số' và nó thậm chí còn cho chúng tôi biết

08:46.250 --> 08:48.660
điều này đã xảy ra ở đâu và cung cấp cho chúng

08:48.660 --> 08:51.140
tôi số dòng, dòng thứ tám và về cơ bản, nó hiển

08:51.140 --> 08:54.430
thị cho chúng tôi tương tự, IDE hiển thị ở đây.

08:54.430 --> 08:56.740
Vì vậy, trong trường hợp chúng tôi bỏ qua nó

08:56.740 --> 08:58.707
trong IDE, biên dịch nó, bây giờ sẽ báo

08:58.707 --> 09:01.340
lỗi và đó là điều quan trọng về Typescript.

09:01.340 --> 09:03.284
Nó chỉ giúp ích cho chúng ta trong quá trình biên dịch.

09:03.284 --> 09:06.220
Nó không thay đổi JavaScript để hoạt động khác đi trong thời

09:06.220 --> 09:10.110
gian chạy, bởi vì các trình duyệt không có hỗ trợ Bản in được tích hợp sẵn.

09:10.110 --> 09:13.510
Nó chỉ có thể giúp chúng tôi trong quá trình phát triển, trước

09:13.510 --> 09:15.700
khi chúng tôi biên dịch mã TypeScript của

09:15.700 --> 09:19.310
mình thành JavaScript, nhưng ở đó, nó cực kỳ hữu ích, bởi vì nó bổ

09:19.310 --> 09:21.520
sung thêm một bước, kiểm tra độ chính xác

09:21.520 --> 09:25.560
bổ sung, ở đây, chúng tôi phát hiện ra, "Ồ, chúng tôi đã mắc lỗi .

09:25.560 --> 09:28.407
"Đây, đây không phải là một chuỗi, đây phải là một

09:28.407 --> 09:31.660
số", và chúng tôi có thể sửa lỗi này và chúng tôi ổn.

09:31.660 --> 09:34.210
Đây là những gì Bản mô tả làm.

09:34.210 --> 09:35.670
Nó giúp bạn trong quá trình phát triển.

09:35.670 --> 09:37.390
Nó không thay đổi mã thời gian chạy của bạn.

09:37.390 --> 09:40.130
Thật vậy, ở đây, ngay cả với các cài đặt mặc định,

09:40.130 --> 09:42.800
nó đã biên dịch lỗi của chúng tôi ở đây, mặc dù nó

09:42.800 --> 09:44.700
đã phát hiện ra nó trong quá trình

09:44.700 --> 09:47.220
biên dịch và tạo một tệp gây ra kết quả không chính

09:47.220 --> 09:50.690
xác, vì theo mặc định, Bản mô tả không bước vào đây.

09:50.690 --> 09:53.560
Sau này, bạn sẽ tìm hiểu cách bạn có thể đảm bảo rằng nó hoạt động, nhưng

09:53.560 --> 09:56.300
theo mặc định, nó thậm chí không chặn quá trình biên dịch.

09:56.300 --> 09:59.260
Tuy nhiên, nó vẫn mắng bạn và chỉ ra lỗi lầm

09:59.260 --> 10:03.570
này, để bạn sửa chữa nó, và để bạn có thể tránh những sai lầm

10:03.570 --> 10:04.850
như vậy ở đây.

10:04.850 --> 10:07.450
Nhân tiện, hãy đảm bảo rằng bạn

10:07.450 --> 10:09.020
không có app. js và ứng dụng. ts mở cùng một lúc.

10:09.020 --> 10:11.950
Bạn có thể gặp lỗi ở đây trong IDE,

10:11.950 --> 10:13.470
liên quan đến việc triển khai chức năng trùng lặp.

10:13.470 --> 10:15.830
Việc đóng tệp JavaScript sẽ sửa lỗi này.
