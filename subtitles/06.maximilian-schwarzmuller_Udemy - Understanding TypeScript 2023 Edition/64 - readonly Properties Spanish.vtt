WEBVTT

00:02.280 --> 00:04.510
Instructor: Algo relacionado con lo que acabas de aprender sobre

00:04.510 --> 00:06.483
los modificadores de acceso, es otro modificador.

00:07.572 --> 00:09.590
Y ese es el modificador de sólo lectura.

00:09.590 --> 00:11.310
Digamos que tenemos ciertos

00:11.310 --> 00:14.220
campos, que no sólo deben ser privados o públicos,

00:14.220 --> 00:18.130
sino que tampoco deben cambiar después de su inicialización.

00:18.130 --> 00:21.410
Por ejemplo, la identificación no debe cambiar a partir de entonces.

00:21.410 --> 00:23.520
Para dejar claro que no debe cambiar, puedes

00:23.520 --> 00:25.670
añadir aquí también readonly.

00:25.670 --> 00:27.890
Y también podrías haber añadido eso aquí.

00:27.890 --> 00:30.920
Así que aquí también habría escrito private readonly.

00:30.920 --> 00:33.990
Ahora la palabra clave readonly, al igual que private

00:33.990 --> 00:35.710
y public, es introducida por TypeScript,

00:35.710 --> 00:37.920
no existe en JavaScript.

00:37.920 --> 00:39.910
Se asegura de que si intentas escribir

00:39.910 --> 00:43.180
en su propiedad a partir de entonces, falles.

00:43.180 --> 00:45.690
Así que sólo se puede utilizar una vez durante

00:45.690 --> 00:48.620
la inicialización, pero después, digamos que

00:48.620 --> 00:52.430
para addEmployee, por la razón que sea, trato de cambiar id a d2,

00:52.430 --> 00:54.200
ves, obtenemos un error aquí,

00:54.200 --> 00:57.790
que no puedo asignar a id porque es readonly.

00:57.790 --> 01:00.800
Así que esto añade algo de seguridad extra para dejar muy

01:00.800 --> 01:04.160
claro que una determinada propiedad sólo debe ser inicializada

01:04.160 --> 01:05.920
una vez y no debe cambiar después,

01:05.920 --> 01:08.860
un requisito que tienes muy a menudo para ciertas propiedades

01:08.860 --> 01:10.240
en tus objetos.

01:10.240 --> 01:12.630
Así que esto puede añadir seguridad de tipo extra de nuevo,

01:12.630 --> 01:14.910
y hacer que sus intenciones sean muy claras.

01:14.910 --> 01:16.320
Por supuesto, siempre puedes

01:16.320 --> 01:18.350
decir: "Bueno, yo soy el que escribe el código,

01:18.350 --> 01:20.470
no voy a hacer nada que no quiera".

01:20.470 --> 01:23.060
De todos modos, es bueno ser muy claro cuando

01:23.060 --> 01:24.630
se define el código.

01:24.630 --> 01:28.320
Porque a, podrías olvidar lo que querías hacer si dejas de trabajar

01:28.320 --> 01:31.280
en tu código durante un par de semanas, o lo que sea, y

01:31.280 --> 01:32.270
b, podrías estar trabajando

01:32.270 --> 01:34.340
en un equipo o compartiendo tu código

01:34.340 --> 01:36.550
con otras personas.

01:36.550 --> 01:39.390
Y, por lo general, es una buena idea escribir un código

01:39.390 --> 01:42.460
claro y explícito que deje bien clara su intención.

01:42.460 --> 01:44.280
Y readonly puede ayudarte ahí,

01:44.280 --> 01:47.230
porque deja muy claro cuál es tu objetivo.

01:47.230 --> 01:49.570
Si echamos un vistazo a la app. js, como he mencionado,

01:49.570 --> 01:53.050
no vemos ni private ni public, ni read only, porque

01:53.050 --> 01:55.780
todo eso sólo existe en TypeScript, no

01:55.780 --> 01:57.610
en JavaScript.

01:57.610 --> 02:01.420
También vemos algo diferente que también es interesante,

02:01.420 --> 02:04.580
los métodos se añaden al prototipo de nuestra función

02:04.580 --> 02:06.490
constructora.

02:06.490 --> 02:08.830
Ahora bien, para esto es necesario saber qué

02:08.830 --> 02:10.730
son los prototipos, e introducirlos

02:10.730 --> 02:12.520
en este curso sería demasiado.

02:12.520 --> 02:14.140
Te adjuntamos algunos recursos donde

02:14.140 --> 02:16.070
puedes sumergirte en los prototipos.

02:16.070 --> 02:18.490
Es una parte importante de JavaScript, especialmente

02:18.490 --> 02:22.210
de JavaScript antes de que tuviéramos clases, y no está de más entender

02:22.210 --> 02:24.670
los prototipos si eres un desarrollador de

02:24.670 --> 02:26.490
JavaScript.

02:26.490 --> 02:29.030
Todavía aquí, no voy a profundizar en ellos porque

02:29.030 --> 02:31.160
es un tema puramente JavaScript, no específico

02:31.160 --> 02:33.020
de TypeScript.

02:33.020 --> 02:34.150
De hecho, en TypeScript,

02:34.150 --> 02:36.510
normalmente trabajamos menos con prototipos,

02:36.510 --> 02:38.780
porque podemos hacer más con las clases.

02:38.780 --> 02:42.560
Y relacionado con esto, tenemos otro importante concepto de clase,

02:42.560 --> 02:43.503
la Herencia.
