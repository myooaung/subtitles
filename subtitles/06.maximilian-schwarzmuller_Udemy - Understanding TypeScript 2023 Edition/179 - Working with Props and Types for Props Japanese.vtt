WEBVTT

00:02.170 --> 00:06.330
-つまり､ ToDoリストのコンポーネントを作るのが目的なので､ ソースフォルダに新しいサブフォルダcomponentsを追加し､

00:06.330 --> 00:11.280
その中に「ToDoList.CoDo」を追加します｡

00:11.280 --> 00:11.280
tsx

00:11.280 --> 00:13.690
"ファイルには､ 私のToDoリストのコンポーネントが格納されています｡

00:13.690 --> 00:15.370
さて､ reactコンポーネントを作るには､

00:15.370 --> 00:17.030
reactをreactからインポートしないと､

00:17.030 --> 00:20.250
このファイルではJXSが動作しません｡

00:20.250 --> 00:24.530
もちろん､ これはアロー関数である必要はなく､

00:24.530 --> 00:30.320
functionキーワードで関数を使うこともできます｡

00:30.320 --> 00:33.160
では､ これをエクスポートします｡ 

00:33.160 --> 00:39.370
さて､ ここでtypescriptの追加機能を使い､ このタイプをreactに設定しましょう｡

00:39.370 --> 00:39.370
fc

00:39.370 --> 00:43.950
で､ これは通常の関数ではなく､ 機能部品であるべきであることを示す｡

00:43.950 --> 00:46.920
したがって､ react要素として適格なものを返していないため､

00:46.920 --> 00:49.790
エラーが発生します｡

00:49.790 --> 00:53.250
そこで､ ここでは､ 例えば､ 順序なしリストを返すようにします｡ 

00:53.250 --> 00:54.850
ここではリストをレンダリングしたいので､

00:54.850 --> 00:58.000
とりあえず順不同のリストを返すのが筋です｡

00:58.000 --> 01:02.740
さて､ その順不同のリストに､ リストアイテムを出力したい｡ 

01:02.740 --> 01:07.230
ここでは､ ToDoを取得することができます｡ これは配列で､

01:07.230 --> 01:09.240
配列にはオブジェクトがあり､

01:09.240 --> 01:11.690
各項目にはIDがあります｡

01:11.690 --> 01:18.100
例えば､ ToDo1をt1とし､ 「コースを終了する」のような文章を書くとします｡

01:18.100 --> 01:18.100
これは1つだけですが､

01:18.100 --> 01:18.933
もちろんこのようなオブジェクトを複数個､

01:18.933 --> 01:20.800
この配列に入れることも可能です｡

01:20.800 --> 01:22.010
このリストの中で､ ToDoを動的に出力し､

01:22.010 --> 01:24.620
リストの項目にマッピングすることができます｡

01:24.620 --> 01:32.930
ここで､ すべてのToDoを調べ､ これはもちろんJavaScriptの組み込み関数であるmap関数で､

01:32.930 --> 01:41.530
この配列のすべての要素に対してリストアイテムを返し､ そのリストアイテムに「ToDo」を設定します｡

01:41.530 --> 01:41.530
テキスト"

01:41.530 --> 01:45.570
をリスト項目のコンテンツとして追加し､ この特別なキー プロップを追加します｡

01:45.570 --> 01:49.620
これは､ React が互いに隣接する繰り返し要素に対して実際に望むことです｡

01:49.620 --> 01:54.130
ここで､ 何かユニークなものを選び､ そのIDがユニークな識別子として適格であることが必要です｡

01:54.130 --> 01:57.710
それを使って､ ToDoリストをレンダリングしています｡ 

01:57.710 --> 02:00.470
では､ ToDoリストコンポーネントをアプリコンポーネントに統合してみましょう｡

02:00.470 --> 02:02.860
もちろん､ アプリコンポーネントに移動して､ ".ToDo

02:02.860 --> 02:06.930
"から "TodoList "をインポートします｡

02:06.930 --> 02:06.930
/components/TodoList"

02:06.930 --> 02:14.350
このように､ ". tsx "拡張子は､ 私たちがここで使っているビルドワークフローによって自動的に追加されます｡

02:14.350 --> 02:18.850
そして､ この div の中で､ 「TodoList」をこのようにレンダリングします｡

02:18.850 --> 02:21.440
これを保存して､ 実行中のページに戻ると､

02:21.440 --> 02:24.190
ここに1つのToDoが表示されます｡

02:24.190 --> 02:25.870
スタイリングは最悪で､ 後でもっと良いスタイリングを追加できますが､

02:25.870 --> 02:29.350
今のところこれで問題ないでしょう｡

02:29.350 --> 02:31.680
しかし､ これはあまり現実的ではありません｡ 

02:31.680 --> 02:37.950
このToDoリストアプリを作るとき､ 後で新しいToDoを別のコンポーネントで追加できるようにしたいのですが､

02:37.950 --> 02:40.063
まだそのようなものはありません｡

02:40.063 --> 02:45.570
なぜなら､ この場所にはToDoを追加するコンポーネントがあり､

02:45.570 --> 02:55.280
そのコンポーネントはこのアプリコンポーネントにトークバックすることができるからです｡

02:55.280 --> 02:56.690
ここで､ ToDoの配列を管理し､

02:56.690 --> 03:01.510
その配列にToDoを追加したり､ その配列からToDoを削除したりします｡

03:01.510 --> 03:04.220
to-doリストには､ その配列を渡します｡ 

03:04.220 --> 03:06.930
だから､ まだ管理していないとはいえ､ その「todos」の配列は､

03:06.930 --> 03:11.660
ToDoリストではなく､ アプリコンポーネントに持たせることになるのでしょう｡

03:11.660 --> 03:16.740
その方が､ この配列は後でここに行き着くので､ もうここに移動させればいいという現実的な話なんです｡

03:16.740 --> 03:20.093
さて､ これを "TodoList "に渡す必要があります｡  これにはもちろん､ 小道具を使います｡ 

03:20.930 --> 03:23.600
もちろん､ このコンポーネントを定義しているのですから､

03:23.600 --> 03:30.350
そのプロップの名前をどうするかは私たちが定義できます｡

03:30.350 --> 03:32.100
todos "配列を送り込むことができます｡ 

03:32.100 --> 03:35.010
さて､ IDEがこれを好まないことはすでに分かっており､ これを保存しようとすると､

03:35.010 --> 03:37.820
コンパイルエラーが発生します｡

03:37.820 --> 03:40.650
プロパティ "items "がタイプwhateverに存在しないため､

03:40.650 --> 03:45.400
コンパイルエラーが発生しました｡

03:45.400 --> 03:50.440
そのため､ 最終的に「TodoList」が受け取るプロップの構造を定義するこの交差型には､

03:50.440 --> 03:52.070
基本的に存在しないのです｡ なぜなら､ Reactでtypescriptを使う場合､

03:52.070 --> 03:55.300
扱う型を明確にしなければならないからです｡

03:55.300 --> 03:59.470
これは単にtypescriptに「これは特別な種類の関数だ」と言うだけでなく､ あるコンポーネントでプロップに依存している場合､

03:59.470 --> 04:11.020
これらのプロップがどのように見えるべきか､ どのように構成されているかをtypescriptに伝えるという意味もあります｡

04:11.020 --> 04:14.860
ToDoリストのコンポーネントでは､ ここでpropsを受け取っていますね､

04:14.860 --> 04:17.420
これが通常のReactです｡

04:17.420 --> 04:19.400
そして､ 小道具には､ おそらく私たちのアイテムのプロパティがあります｡ 

04:19.400 --> 04:23.530
つまり､ 「items」という名前のプロップがあるのですが､

04:23.530 --> 04:26.200
これはまさに､ 「このitemsというプロップがある」と､

04:26.200 --> 04:33.430
ここまで言ったとおりなのです｡ 問題は､ 技術的にはうまくいくのですが､ typescriptがまだ中止しないことです｡

04:33.430 --> 04:35.067
ここでは､ typescriptにpropが "items

04:35.067 --> 04:37.140
"プロパティを持つべきであると伝えていません｡

04:37.140 --> 04:45.063
それを伝えるには､ ここにあるこの関数構成型が実は汎用型であることを利用すればいいのです｡

04:45.063 --> 04:50.510
すべてのコンポーネントが持っているchildrenのデフォルトプロップ以外のすべての追加プロップを定義できる汎用タイプで､

04:50.510 --> 04:52.170
ここで期待されるものです｡

04:52.170 --> 04:54.250
ここで角括弧を追加して､ "props "オブジェクトの構造を記述するオブジェクトを追加することもできますし､

04:54.250 --> 05:06.170
コードを簡潔にするために､ ここで追加のインターフェースを作成することもできます｡

05:06.170 --> 05:12.350
ここでは､ ToDoリストの小道具を用意し､ 小道具がどのように見えるかを説明します｡

05:12.350 --> 05:15.120
ここで､ "items "キーが得られると思いますが､

05:15.120 --> 05:20.510
これはオブジェクトの配列で､ 各オブジェクトはID（文字列）を持ち､

05:20.510 --> 05:23.380
テキスト（文字列）を持っています｡

05:23.380 --> 05:26.120
それが､ ここで管理しているデータです｡ 

05:26.120 --> 05:32.850
ID文字列とテキスト文字列を持つオブジェクトの配列を持っています｡

05:32.850 --> 05:36.070
つまり､ ここで期待するのは「props」というこのようなオブジェクトの配列で､

05:36.070 --> 05:40.700
ここにいれば､ あとはこのTo-Doリストのpropsインターフェースを指せば､ すべてがうまくいくのです｡

05:40.700 --> 05:40.700
ここでtypescriptは､

05:40.700 --> 05:42.670
プロップを取得し､ itemsプロップを持ち､

05:42.670 --> 05:55.000
このitemsプロップは配列で､ 各配列要素にIDキーとテキストキーを持つことを理解します｡

05:55.000 --> 05:56.920
これを保存すると､ コンパイルされて､

05:56.920 --> 05:58.870
再び作業用の出力が得られます｡

05:58.870 --> 05:59.850
つまり､ ここでもtypescriptがReactと一緒に使われているのです｡ 

05:59.850 --> 06:04.188
Reactやtypescriptに「これは機能的なコンポーネントだ」と伝えるだけでなく､

06:04.188 --> 06:06.830
このコンポーネントが最終的に取得するプロップについても使用し､

06:06.830 --> 06:10.000
タイプセーフに大いに役立っています｡

06:10.000 --> 06:15.130
それは､ 私がここで誤って「todos」という名前だと思うことを避けるためです｡

06:15.130 --> 06:15.130
いいえ､ これはサポートされていません､ エラーが発生します｡ 

06:15.130 --> 06:19.060
アイテムです｡ 

06:19.060 --> 06:21.165
皆さんは､ ここで自動補完されるのを見ることができます｡ 

06:21.165 --> 06:24.910
ですから､ ここでタイプスクリプトを扱うと､ コーディングがとても楽になります｡

06:24.910 --> 06:24.910
もちろん､

06:24.910 --> 06:27.160
これこそがtypescriptの利点です｡ コーディングを簡略化し､ 不要なミスを避けることができますし､ ご覧の通り､

06:27.160 --> 06:28.400
reactアプリでもそうなっています｡

06:28.400 --> 06:30.670
もちろん､ まだ終わりではありませんよ｡ 

06:30.670 --> 06:34.420
今のところ､ ここのToDoは変更されないので､

06:34.420 --> 06:36.640
それを変えたい｡

06:36.640 --> 06:44.120
新しいToDoを追加できるようなコンポーネントが欲しいのです｡

06:44.120 --> 06:46.080
では､ 次にそれをやってみましょう｡ 
