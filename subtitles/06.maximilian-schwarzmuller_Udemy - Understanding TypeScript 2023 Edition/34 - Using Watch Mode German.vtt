WEBVTT

00:02.220 --> 00:03.660
Erzähler: Jetzt möchte ich

00:03.660 --> 00:04.630
erst einmal sicherstellen,

00:04.630 --> 00:07.210
dass ich diesen Befehl hier, diesen TFC-Befehl,

00:07.210 --> 00:10.104
bei dem ich nach jeder Änderung auf eine Datei zeige, nicht

00:10.104 --> 00:12.220
erneut ausführen muss.

00:12.220 --> 00:16.100
Wenn ich jetzt etwas in meiner TypeScript-Datei ändere

00:16.100 --> 00:17.640
und dies in meiner Ausgabedatei

00:17.640 --> 00:22.640
und auf dieser Webseite widerspiegeln möchte, müssen wir die Datei

00:22.670 --> 00:25.270
speichern, die Kompilierung erneut

00:25.270 --> 00:29.410
ausführen und dann die Datei neu laden. Wenn wir unseren

00:29.410 --> 00:33.270
NPM-Startprozess laufen lassen, was wir tun sollten,

00:33.270 --> 00:37.650
wird zumindest unser Browser automatisch neu geladen,

00:37.650 --> 00:46.200
wenn wir die Datei nicht direkt öffnen, sondern auf localhost: 3000 sind.

00:46.200 --> 00:47.760
Aber trotzdem müssen wir den

00:47.760 --> 00:48.910
Kompilierungsbefehl

00:48.910 --> 00:52.760
manuell erneut ausführen, auch wenn er automatisch geladen wird.

00:52.760 --> 00:54.730
Um das loszuwerden, können wir den Überwachungsmodus

00:54.730 --> 00:56.620
aktivieren.

00:56.620 --> 01:01.160
Das heißt, wir können TypeScript anweisen, eine Datei zu überwachen, und wenn

01:01.160 --> 01:04.980
sich diese Datei ändert, wird TypeScript neu kompiliert.

01:04.980 --> 01:07.260
Dafür können wir immer noch denselben

01:07.260 --> 01:10.560
Befehl ausführen, aber jetzt fügen wir --watch

01:10.560 --> 01:14.010
am Ende hinzu, oder einfach -w.

01:14.010 --> 01:17.950
Wenn wir das tun, befinden wir uns im Überwachungsmodus für diese

01:17.950 --> 01:20.940
Datei, und jedes Mal, wenn wir dort etwas ändern

01:20.940 --> 01:22.120
und das speichern,

01:22.120 --> 01:25.610
so dass sich die Datei auf der Festplatte technisch gesehen

01:25.610 --> 01:27.940
ebenfalls ändert, wird sie automatisch

01:27.940 --> 01:28.773
neu kompiliert,

01:28.773 --> 01:30.260
und das bedeutet natürlich

01:30.260 --> 01:32.860
auch, dass wir etwas Unerlaubtes tun, wie

01:32.860 --> 01:35.630
zum Beispiel einer Konstante einen falschen

01:35.630 --> 01:37.790
Typ zuweisen.

01:37.790 --> 01:39.320
Wenn wir das versuchen, wird natürlich

01:39.320 --> 01:40.940
alles neu kompiliert, aber dann,

01:40.940 --> 01:43.850
genau wie bei der manuellen Ausführung des Befehls, sehen wir

01:43.850 --> 01:46.290
den Kompilierungsfehler dort unten.

01:46.290 --> 01:49.510
Der Überwachungsmodus ist also bereits eine große Verbesserung.

01:49.510 --> 01:52.540
Der Nachteil ist, dass wir diese Datei hier immer

01:52.540 --> 01:55.180
noch speziell anvisieren müssen.

01:55.180 --> 01:56.700
Und im Moment ist das natürlich

01:56.700 --> 01:58.980
die einzige Datei, mit der wir arbeiten,

01:58.980 --> 02:00.940
aber bei größeren Projekten ist das

02:00.940 --> 02:02.973
nicht unbedingt der Fall.
