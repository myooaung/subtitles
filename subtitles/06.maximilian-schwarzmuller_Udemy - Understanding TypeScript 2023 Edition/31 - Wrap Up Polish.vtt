WEBVTT

00:02.150 --> 00:04.220
-: Teraz z tym mieliśmy dokładne spojrzenie

00:04.220 --> 00:07.410
na wszystkie typy rdzeniowe i podstawy TypeScript.

00:07.410 --> 00:11.640
Miejmy nadzieję, że teraz rozumiesz, jak tworzymy i przypisujemy

00:11.640 --> 00:14.427
typy, jak przypisujemy typy do zmiennych

00:14.427 --> 00:17.510
i do parametrów, i dlaczego to robimy.

00:17.510 --> 00:20.740
Jak przypisania typów i typy mogą się różnić od kontroli

00:20.740 --> 00:24.770
typów w JavaScript, że JavaScript używa typów runtime, a TypeScript

00:24.770 --> 00:27.310
używa statycznych typów, które mają znaczenie

00:27.310 --> 00:29.400
podczas rozwoju.

00:29.400 --> 00:31.710
Że zatem zbudowany kod JavaScript,

00:31.710 --> 00:34.410
nie zawiera żadnych przypisań typów.

00:34.410 --> 00:36.550
Oczywiście zawiera wszelkie kontrole

00:36.550 --> 00:39.060
typów, ponieważ jest to zwykły kod JavaScript,

00:39.060 --> 00:41.730
ale coś takiego jak tutaj...

00:43.050 --> 00:44.910
to po prostu nie jest dozwolone w JavaScript.

00:44.910 --> 00:46.280
To nie jest obsługiwana składnia.

00:46.280 --> 00:47.960
To jest tylko TypeScript.

00:47.960 --> 00:49.550
Więc to, miejmy nadzieję, jest jasne.

00:49.550 --> 00:52.740
Następnie przyjrzeliśmy się liczbom, ciągom znaków,

00:52.740 --> 00:55.750
Booleanom, typom funkcji i ustawianiu typów zwracanych,

00:55.750 --> 00:58.510
typów argumentów, a także opisywaniu typu całej

00:58.510 --> 01:00.160
funkcji, co może być pomocne,

01:00.160 --> 01:02.490
jeśli chcesz mieć zmienną, która ostatecznie

01:02.490 --> 01:04.780
przechowuje funkcję.

01:04.780 --> 01:07.890
Mieliśmy spojrzenie na obiekty i tablice oraz enum i jak

01:07.890 --> 01:10.140
to może być interesujące i pomocne.

01:10.140 --> 01:12.030
Podobnie jest w przypadku klepek.

01:12.030 --> 01:16.160
A teraz mieliśmy również spojrzenie na aliasy, typy aliasów, gdzie

01:16.160 --> 01:18.605
możesz połączyć złożone typy w aliasy,

01:18.605 --> 01:21.220
które możesz ponownie wykorzystać.

01:21.220 --> 01:23.840
Mieliśmy spojrzenie na typy literalne i typy unii,

01:23.840 --> 01:25.840
które mogą być przydatne w scenariuszach,

01:25.840 --> 01:29.550
w których oczekujesz więcej niż jednego możliwego typu.

01:29.550 --> 01:33.455
A teraz na koniec jeszcze spojrzenie na nieznane i nigdy,

01:33.455 --> 01:35.956
które są typami niszowymi, ale jednak

01:35.956 --> 01:39.430
w swojej niszy mogą być bardzo przydatne.

01:39.430 --> 01:40.970
Teraz, mając te podstawy, zanurkujemy

01:40.970 --> 01:43.180
głębiej w poszczególne aspekty i oczywiście

01:43.180 --> 01:45.630
zbadamy również inne typy i konstrukcje JavaScript,

01:45.630 --> 01:49.163
gdzie typy mogą być pomocne.
