WEBVTT

00:02.220 --> 00:03.053
-Ruszajmy dalej.

00:03.053 --> 00:04.950
Mamy tutaj opcję outFile, teraz ta

00:04.950 --> 00:07.730
opcja nie ma dla nas znaczenia w tej chwili, nie będzie

00:07.730 --> 00:09.440
działać w tej chwili.

00:09.440 --> 00:12.340
Bardziej interesujące dla nas są outDIR i rootDir.

00:12.340 --> 00:14.720
Im większy staje się Twój projekt, tym bardziej

00:14.720 --> 00:17.640
możesz chcieć uporządkować swoje pliki.

00:17.640 --> 00:19.690
Zazwyczaj nie chcesz, aby twoje

00:19.690 --> 00:21.770
pliki leżały tutaj w folderze projektu

00:21.770 --> 00:24.120
na poziomie głównym.

00:24.120 --> 00:26.580
Zamiast tego, co często zobaczysz w projektach,

00:26.580 --> 00:28.080
jest to, że masz folder źródłowy

00:28.080 --> 00:29.790
i masz folder dist, następny,

00:29.790 --> 00:31.240
następny.

00:31.240 --> 00:35.690
Tak więc, folder dist ma za zadanie trzymać wszystkie dane wyjściowe, więc wszystkie

00:35.690 --> 00:37.800
pliki JavaScript, powiedzmy.

00:37.800 --> 00:41.380
A folder źródłowy może zawierać wszystkie nasze pliki TypeScript.

00:41.380 --> 00:44.643
Więc możemy przenieść pliki TypeScript do folderu źródłowego,

00:44.643 --> 00:47.430
a jeśli teraz usunę folder JavaScript, mamy problem,

00:47.430 --> 00:49.891
że jeśli skompilujemy wszystko, te pliki

00:49.891 --> 00:53.167
TypeScript są kompilowane, ponieważ TypeScript, kompilator

00:53.167 --> 00:55.768
patrzy w podfoldery, ale wyjście siedzi obok

00:55.768 --> 01:00.050
naszych plików wejściowych.

01:00.050 --> 01:02.760
I to jest coś, co możemy kontrolować na przykład za

01:02.760 --> 01:03.660
pomocą outDir.

01:03.660 --> 01:07.117
Jeśli ustawimy outDir, to możemy powiedzieć typom z kompilatorem,

01:07.117 --> 01:10.900
gdzie ma być przechowywany utworzony plik.

01:10.900 --> 01:13.580
Możemy ustawić to na dist.

01:13.580 --> 01:17.037
Jeśli to zrobimy, to jeśli uruchomimy chia seed zobaczymy,

01:17.037 --> 01:19.560
że pliki JavaScript, rzeczywiście, nie są

01:19.560 --> 01:21.500
umieszczone w folderze source,

01:21.500 --> 01:23.170
ale w folderze dist.

01:23.170 --> 01:26.340
Teraz musimy tylko dostosować nasz indeks. html i tam wskazać na

01:26.340 --> 01:31.630
dist/app. js i dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
lub alternatywnie przenieść indeks. html do folderu dist,

01:33.880 --> 01:36.172
ale wtedy nasz serwer def nie działałby już

01:36.172 --> 01:37.550
poprawnie w tej chwili.

01:37.550 --> 01:39.875
Więc po prostu dostosujmy te

01:39.875 --> 01:44.140
importy i z tym, mamy działającą aplikację nadal, jak

01:44.140 --> 01:45.270
widzisz, ale teraz

01:45.270 --> 01:48.480
z czystą strukturą projektu.

01:48.480 --> 01:49.650
Teraz dobrą rzeczą jest

01:49.650 --> 01:51.530
to, że jeśli mieliśmy tutaj podfolder,

01:51.530 --> 01:52.980
folder analytics, powiedzmy,

01:52.980 --> 01:54.893
i mieliśmy tam nasz plik TypeScript, to

01:54.893 --> 01:57.350
jeśli przekompilujemy, i nie ma znaczenia, czy

01:57.350 --> 01:59.540
zrobisz to za pomocą tego polecenia, czy trybu

01:59.540 --> 02:00.373
obserwacyjnego,

02:00.373 --> 02:03.300
ta struktura folderów, którą masz w folderze źródłowym,

02:03.300 --> 02:05.640
będzie replikowana w folderze dist, co jest oczywiście

02:05.640 --> 02:07.370
bardzo wygodne, ponieważ upewnia

02:07.370 --> 02:08.813
się, że możesz importować pliki

02:08.813 --> 02:14.110
w zasadzie tak, jak importowałbyś je w folderze źródłowym, a także, że struktura, którą ustawiłeś tam,

02:14.110 --> 02:16.640
jest zachowana.

02:16.640 --> 02:18.800
Teraz możesz również ustawić katalog

02:18.800 --> 02:21.230
główny i ustawić to konkretnie w folderze,

02:21.230 --> 02:23.800
w którym przechowywane są twoje pliki, jak

02:23.800 --> 02:25.202
w tym przykładzie, źródło,

02:25.202 --> 02:28.560
aby upewnić się, że typy kompilatora nie szukają w naszych

02:28.560 --> 02:30.030
folderach.

02:30.030 --> 02:31.530
To także coś, co możesz zrobić

02:31.530 --> 02:34.003
z opcją include na dole, prawda?

02:34.870 --> 02:36.007
Ale z katalogiem głównym,

02:36.007 --> 02:38.781
typy kompilatorów nie tylko patrzą na ten

02:38.781 --> 02:41.450
folder źródłowy, ale także upewniają się,

02:41.450 --> 02:45.680
że struktura projektu, którą tam ustawiłeś, jest przechowywana

02:45.680 --> 02:47.880
w folderze dist.

02:47.880 --> 02:50.020
Teraz zrobił to domyślnie przedtem, jak widziałeś,

02:50.020 --> 02:51.820
ale pamiętaj, że przedtem uwzględniłby

02:51.820 --> 02:54.280
wszelkie pliki TypeScript tutaj, wszystkie początki

02:54.280 --> 02:55.699
źródła, więc na przykład, jeśli

02:55.699 --> 02:58.830
skomentujesz to tymczasowo, jeśli mieliśmy folder użytkownika tutaj

02:58.830 --> 03:03.280
na najwyższym poziomie z użytkownikiem.

03:03.280 --> 03:03.280
ts,

03:03.280 --> 03:06.170
gdzie mamy nazwę użytkownika powiedzmy Max, to jeśli

03:06.170 --> 03:07.750
skompilujemy to, wszyscy zobaczycie

03:07.750 --> 03:09.752
ten folder użytkownika w folderze

03:09.752 --> 03:11.420
dist.

03:11.420 --> 03:13.810
A teraz folder źródłowy jest również dołączony,

03:13.810 --> 03:17.200
ponieważ teraz mamy plik typescript na wyższym poziomie, a zatem

03:17.200 --> 03:19.950
kompilator typescript myśli, że cały nasz projekt

03:19.950 --> 03:21.780
ponownie jest wejściem i replikuje

03:21.780 --> 03:25.970
strukturę folderów, którą znajduje tam w folderze dist.

03:25.970 --> 03:28.960
Teraz to oczywiście nie jest to, czego byśmy chcieli

03:28.960 --> 03:30.120
i tu właśnie pomaga

03:30.976 --> 03:32.660
nam opcja rootDir.

03:32.660 --> 03:34.020
Jeśli ustawimy to na źródło,

03:34.020 --> 03:35.950
to nawet jeśli mielibyśmy tam inne foldery

03:35.950 --> 03:38.630
z plikami TypeScript na poziomie głównym, nie zostałyby

03:38.630 --> 03:40.400
one uwzględnione w wyjściu, a sam

03:40.400 --> 03:41.830
folder źródłowy nie trafiłby

03:41.830 --> 03:43.780
tam nagle.

03:43.780 --> 03:46.480
Często ustawiasz zarówno rootDir jak i outDir, aby

03:46.480 --> 03:49.650
mieć jasność co do tego, gdzie znajdują się pliki wejściowe

03:49.650 --> 03:52.040
i gdzie będą generowane pliki wyjściowe.

03:52.040 --> 03:54.870
Jeśli idziemy dalej, możemy zignorować kompozyt.

03:54.870 --> 03:57.010
Możemy zajrzeć do removeComments.

03:57.010 --> 03:58.780
Powinno być całkiem jasne, jeśli

03:58.780 --> 04:00.850
ustawisz to, to wszelkie komentarze,

04:00.850 --> 04:04.450
które możesz mieć w swoich plikach TypeScript, zostaną usunięte

04:04.450 --> 04:08.000
w skompilowanych plikach JavaScript.

04:08.000 --> 04:11.200
Więc jeśli skomentuję to w i skompiluję mój kod, zobaczysz

04:11.200 --> 04:12.970
aplikację. ts, mam uwagę.

04:12.970 --> 04:14.990
Aplikacja. js, nie ma go tam.

04:14.990 --> 04:18.330
Więc możesz to zrobić, aby zmniejszyć pliki,

04:18.330 --> 04:20.950
a wysiłek może być miłą opcją.

04:20.950 --> 04:23.820
Możesz również ustawić noEmit, jeśli nie chcesz generować

04:23.820 --> 04:25.600
żadnych plików JavaScript.

04:25.600 --> 04:27.130
Teraz może to zabrzmieć dziwnie,

04:27.130 --> 04:29.190
ponieważ taka jest idea TypeScript, ale jeśli

04:29.190 --> 04:30.700
chcesz tylko sprawdzić, czy twoje

04:30.700 --> 04:32.420
pliki są poprawne, ale nie chcesz pisać

04:32.420 --> 04:35.030
wszystkich tych plików wyjściowych, aby zaoszczędzić

04:35.030 --> 04:37.680
trochę czasu, na przykład w większym projekcie, wtedy

04:37.680 --> 04:39.120
możesz ustawić to na "true",

04:39.120 --> 04:41.792
aby po prostu mieć typy kompilatora sprawdzają twoje

04:41.792 --> 04:45.460
pliki i zgłaszają wszelkie potencjalne błędy bez faktycznego tworzenia

04:45.460 --> 04:47.903
pliku wyjściowego.

04:47.903 --> 04:50.490
importHelpers nie ma dla nas większego znaczenia,

04:50.490 --> 04:52.065
tutaj możemy to zignorować.

04:52.065 --> 04:54.570
downlevelIteration jest opcją zaawansowaną.

04:54.570 --> 04:57.150
Jest to interesujące, gdy kompilujesz

04:57.150 --> 05:00.295
swój kod do starszych wersji JavaScript i pracujesz

05:00.295 --> 05:02.690
z czterema pętlami.

05:02.690 --> 05:05.798
Następnie w niektórych rzadkich scenariuszach możesz napotkać problemy,

05:05.798 --> 05:08.378
w których kompilacja nie działa poprawnie.

05:08.378 --> 05:10.440
Ta opcja, jeśli ją włączysz, daje ci bardziej

05:10.440 --> 05:12.770
dokładną kompilację, która będzie działać w tych

05:12.770 --> 05:15.280
niszowych przypadkach, więc dlatego możesz myśleć,

05:15.280 --> 05:17.210
że powinieneś zawsze włączać, ale będzie

05:17.210 --> 05:20.097
to również wyjście bardziej, gdzie te kody.

05:20.097 --> 05:21.880
Więc powinieneś włączyć to tylko

05:21.880 --> 05:25.110
wtedy, gdy masz pętle i widzisz, że twój wygenerowany kod nagle

05:25.110 --> 05:27.700
zachowuje się inaczej niż powinien w odniesieniu

05:27.700 --> 05:29.023
do tych pętli.
