WEBVTT

00:01.538 --> 00:03.725
Narrator: Aby zacząć przejdźmy

00:03.725 --> 00:07.086
najpierw do tsconfig. plik json, ponieważ tam musimy

00:07.086 --> 00:09.965
upewnić się, że pewne rzeczy są skonfigurowane.

00:09.965 --> 00:12.780
Upewnij się, że cel tutaj, jest rzeczywiście

00:12.780 --> 00:16.286
ustawiony na es5 lub es6, to zależy od ciebie.

00:16.286 --> 00:19.423
To zależy od tego, jakie przeglądarki planujesz wspierać.

00:19.423 --> 00:22.190
Ponieważ w końcu webpack i typy, które ładują, użyją

00:22.190 --> 00:24.050
tego celu, aby określić, jak twój

00:24.050 --> 00:26.543
kod powinien zostać przekształcony.

00:26.543 --> 00:28.960
Czy twoje typy kodu powinny zostać przekształcone

00:28.960 --> 00:32.480
w kod Java script, który działa również w starszych przeglądarkach?

00:32.480 --> 00:36.210
Albo jak w przypadku es6 do kodu, który działa tylko w nowszych

00:36.210 --> 00:37.811
przeglądarkach?

00:37.811 --> 00:42.640
Moduł wtedy powinien być ustawiony na es2015 lub es6 więc to ustawienie

00:42.640 --> 00:44.110
jest w porządku.

00:44.110 --> 00:49.110
A dodatkowo chcesz też zweryfikować swój outDir.

00:50.560 --> 00:53.520
Zachowam to do dist, ale możesz to zmienić, jeśli chcesz

00:53.520 --> 00:55.997
skompilować swój kod do innego katalogu.

00:55.997 --> 00:59.378
Nie potrzebujesz już jednak katalogu głównego, ponieważ

00:59.378 --> 01:02.260
webpack przejmie go, a webpack określi, gdzie

01:02.260 --> 01:05.014
znajdują się twoje pliki główne.

01:05.014 --> 01:07.660
Więc ogólnie te ustawienia powinny być w porządku.

01:07.660 --> 01:09.525
Zawsze możemy je później podrasować,

01:09.525 --> 01:12.487
jeśli coś nie działa tak, jak chcemy.

01:12.487 --> 01:15.220
Dzięki temu dodajemy nowy plik konfiguracyjny

01:15.220 --> 01:19.848
obok tsconfig. json i to jest właśnie webpack. konfig. plik js.

01:19.848 --> 01:22.368
I upewnij się, że naprawdę nazywasz go tak,

01:22.368 --> 01:24.150
ponieważ jest to plik, którego

01:24.150 --> 01:27.579
webpack będzie automatycznie szukał i to nawet powie webpackowi,

01:27.579 --> 01:30.220
jak pracować z naszym projektem.

01:30.220 --> 01:32.840
Ponieważ webpack jest narzędziem, które musi być skonfigurowane,

01:32.840 --> 01:34.568
aby działało poprawnie tutaj.

01:34.568 --> 01:37.568
Co więc robimy w tym webpacku. plik konfiguracyjny?

01:37.568 --> 01:40.338
Ten plik konfiguracyjny wykorzystuje JavaScript, a właściwie

01:40.338 --> 01:43.288
wykorzystuje node. cechy js.

01:43.288 --> 01:46.747
Chcemy więc wykorzystać węzeł. js eksportuje składnię, która

01:46.747 --> 01:50.379
wygląda tak, aby następnie wyeksportować obiekt JavaScript.

01:50.379 --> 01:53.538
Który będzie obiektem konfiguracyjnym odebranym przez webpack.

01:53.538 --> 01:55.585
Więc na wypadek, gdybyś nigdy wcześniej tego nie widział,

01:55.585 --> 01:59.648
tak właśnie eksportuje się rzeczy w węźle. środowisko js.

01:59.648 --> 02:02.877
I tutaj eksportujemy obiekt JavaScript.

02:02.877 --> 02:05.920
Teraz webpack potrzebuje kilku informacji.

02:05.920 --> 02:09.840
Przede wszystkim musi wiedzieć, od którego pliku zaczyna

02:09.840 --> 02:14.585
się cały twój projekt; więc gdzie jest twój punkt wejścia.

02:14.585 --> 02:17.370
W naszym przypadku jest to aplikacja. plik ts.

02:17.370 --> 02:18.922
Ten plik powinien być wykonany

02:18.922 --> 02:20.981
jako pierwszy, a to, co zrobi webpack,

02:20.981 --> 02:24.013
to spojrzy na importy w tym pliku i przejdzie do

02:24.013 --> 02:25.461
tych plików i spojrzy na

02:25.461 --> 02:27.378
ich importy i importy importowanych

02:27.378 --> 02:30.219
plików i tak dalej.

02:30.219 --> 02:33.461
Aż w końcu zna wszystkie pliki, których używa twój projekt.

02:33.461 --> 02:36.201
A następnie przejdzie przez zawartość plików,

02:36.201 --> 02:38.740
jak ta zawartość tutaj i wszystkie treści

02:38.740 --> 02:41.690
we wszystkich plikach i skompiluje je, za pomocą

02:41.690 --> 02:44.290
ts. pakiet loadera, o którym wspomniałem.

02:44.290 --> 02:46.960
Aby webpack działał poprawnie, powinieneś

02:46.960 --> 02:50.421
teraz usunąć wszystkie . rozszerzenia js we wszystkich

02:50.421 --> 02:51.598
importach.

02:51.598 --> 02:54.400
Potrzebowaliśmy tego wcześniej, gdy korzystaliśmy z natywnej

02:54.400 --> 02:57.885
przeglądarki wbudowanej w ts. Funkcjonalność modułu, ale dzięki

02:57.885 --> 03:01.130
webpackowi nie potrzebujesz tych rozszerzeń.

03:01.130 --> 03:03.664
Ponieważ webpack faktycznie będzie automatycznie szukał. js, oraz niektóre inne pliki z rozszerzeniami.

03:03.664 --> 03:06.501
Więc nie i nie powinieneś dodawać ich tutaj, w przeciwnym

03:06.501 --> 03:09.270
razie webpack będzie szukał plików z podwójnym rozszerzeniem,

03:09.270 --> 03:10.716
czego nie chcesz.

03:10.716 --> 03:13.655
Więc usuń . js na wszystkich tych importach tutaj, a kiedy już

03:13.655 --> 03:18.441
to zrobisz zapisz wszystkie te pliki, aby

03:18.441 --> 03:21.370
upewnić się, że twoje zmiany są stosowane.

03:21.370 --> 03:24.043
A teraz wracając do webpacka. konfig. js, tam teraz powinieneś dodać

03:24.043 --> 03:26.498
właściwość

03:26.498 --> 03:31.320
wejściową w tym wyeksportowanym obiekcie.

03:31.320 --> 03:32.740
I wskaż na . /src/app. ts w naszym przykładzie.

03:32.740 --> 03:37.740
Więc w pliku wejściowym root twojego projektu.

03:38.680 --> 03:42.444
Następnie dodajemy tutaj klucz wyjściowy.

03:42.444 --> 03:45.880
Wyjście teraz jest obiektem tutaj.

03:45.880 --> 03:48.051
Gdzie przede wszystkim podajemy nazwę pliku.

03:48.051 --> 03:51.120
Będzie to pojedynczy plik JavaScript, który zostanie

03:51.120 --> 03:52.998
wyprodukowany na końcu.

03:52.998 --> 03:55.440
I tu nazwiemy ją wiązką. js, ale możesz go nazwać jakkolwiek

03:55.440 --> 03:57.350
chcesz.

03:57.350 --> 03:58.788
App. js, lub cokolwiek chcesz.

03:58.788 --> 04:01.709
Możesz także dodać dynamiczne

04:01.709 --> 04:05.171
części tutaj, na przykład, content hash, aby powiedzieć webpackowi,

04:05.171 --> 04:08.971
aby automatycznie utworzył unikalny has dla każdego budynku, który może

04:08.971 --> 04:11.829
pomóc w buforowaniu w przeglądarce.

04:11.829 --> 04:13.578
Ale znowu możesz dowiedzieć się więcej na ten temat w dokumentach webpack.

04:13.578 --> 04:16.229
Tutaj nie jest nam to potrzebne, więc po prostu nazwiemy plik bundle. słoiki.

04:16.229 --> 04:19.779
Oprócz nazwy pliku należy również

04:19.779 --> 04:23.320
podać ścieżkę, do której ma zostać zapisane wyjście.

04:23.320 --> 04:26.131
I oczywiście powinno to odpowiadać

04:26.131 --> 04:28.900
ścieżce, którą masz w swoim ts. konfig. js, aby uniknąć błędów.

04:28.900 --> 04:32.970
Więc do tego folderu.

04:32.970 --> 04:34.189
Teraz w przeciwieństwie do ts. config,js, nie powinieneś

04:34.189 --> 04:37.010
pisać . /dist tutaj.

04:37.010 --> 04:39.819
Webpack chce tutaj bezwzględnej ścieżki.

04:39.819 --> 04:42.099
A do budowy takiego możemy użyć węzła. moduł js.

04:42.099 --> 04:45.669
Do tego celu możemy wykorzystać węzeł. js składnia importu, która używa

04:45.669 --> 04:48.880
wymaganego słowa kluczowego,

04:48.880 --> 04:51.280
i zaimportuj moduł ścieżki.

04:51.280 --> 04:54.220
Nie musisz instalować tego jako biblioteki

04:54.220 --> 04:56.050
jest to węzeł rdzeniowy. moduł js, który już masz,

04:56.050 --> 04:59.651
jeśli masz node. js zainstalowany, co robisz, ponieważ zrobiliśmy

04:59.651 --> 05:02.149
to wcześniej w kursie.

05:02.149 --> 05:04.966
Teraz możesz użyć ścieżki do wywołania metody

05:04.966 --> 05:08.552
resolve tam, która pozwala na zbudowanie absolutnej

05:08.552 --> 05:11.280
ścieżki do określonego folderu.

05:11.280 --> 05:12.910
Do tego używamy specjalnej

05:12.910 --> 05:15.320
stałej, stałej __dirname, która jest

05:15.320 --> 05:17.236
dostępna globalnie w węźle. środowisko js.

05:17.236 --> 05:21.150
A webpack jak już mówiłem używa node. js, aby wykonać swoje pliki.

05:21.150 --> 05:24.692
A następnie jako drugi argument

05:24.692 --> 05:27.433
dist, w końcu dist po prostu konstruuje bezwzględną

05:27.433 --> 05:30.661
ścieżkę do folderu dist, którego webpack następnie używa,

05:30.661 --> 05:33.190
aby zapisać tam swoje wyjście.

05:33.190 --> 05:35.452
I w ten sposób masz punkt wejścia i punkt

05:35.452 --> 05:38.753
wyjścia, ale nie mówisz webpackowi, co ma zrobić z twoimi

05:38.753 --> 05:40.743
plikami TypeScript.

05:40.743 --> 05:42.553
Ponieważ domyślnie webpack tego

05:42.553 --> 05:45.140
nie wie, domyślnie jest tylko bundlerem.

05:45.140 --> 05:46.884
Każda dodatkowa funkcjonalność,

05:46.884 --> 05:48.684
jak kompilacja TypeScript do JavaScript

05:48.684 --> 05:51.261
musi być nauczona do webpacka.

05:51.261 --> 05:53.452
Zrobimy to w następnym wykładzie.
