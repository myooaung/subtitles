WEBVTT

00:02.190 --> 00:05.380
Instructeur: Dus laten we nu naar het einde van dit

00:05.380 --> 00:09.590
project gaan, en dat houdt de mogelijkheid in om een project dat we

00:09.590 --> 00:12.390
in een van de vakken hebben, bijvoorbeeld in

00:12.390 --> 00:15.170
het vak actieve projecten, naar het andere

00:15.170 --> 00:16.410
vak te slepen.

00:16.410 --> 00:19.310
Dus, om het project van een actief project

00:19.310 --> 00:22.780
naar een afgerond project te brengen.

00:22.780 --> 00:25.430
Het gaat dus niet alleen om de visuele update,

00:25.430 --> 00:27.800
het gaat niet alleen om slepen en neerzetten

00:27.800 --> 00:31.050
en het bijwerken van de UI, het gaat ook om het aanpassen

00:31.050 --> 00:35.470
van de gegevens achter de schermen in onze toestandbeheer klasse de projecttoestand

00:35.470 --> 00:37.790
waar we een lijst van projecten beheren

00:37.790 --> 00:39.960
op het einde, houd in gedachten dat elk

00:39.960 --> 00:42.990
project een status eigenschap heeft en we moeten die

00:42.990 --> 00:45.420
ook bijwerken.

00:45.420 --> 00:48.610
Dus, twee dingen moeten we implementeren: slepen

00:48.610 --> 00:51.800
en neerzetten en dan al die achter de schermen bijgewerkte

00:51.800 --> 00:53.410
gegevens.

00:53.410 --> 00:56.220
Laten we nu beginnen met slepen en neerzetten, en daarvoor

00:56.220 --> 00:59.870
zullen we in principe slepen en neerzetten implementeren zoals

00:59.870 --> 01:02.960
we dat zouden doen in vanilla java script, waarover je bijvoorbeeld

01:02.960 --> 01:04.790
kunt leren in mijn complete java

01:04.790 --> 01:06.970
script gids.

01:06.970 --> 01:09.690
In principe gaat het om het implementeren van een stel

01:09.690 --> 01:11.960
event listeners en natuurlijk zul je in de volgende

01:11.960 --> 01:14.800
colleges zien hoe dat in deze module werkt, maar we zullen

01:14.800 --> 01:17.350
het in typescript stijl implementeren, dus we zullen

01:17.350 --> 01:21.150
het verbeteren door enkele typescript functies te gebruiken.

01:21.150 --> 01:24.240
Dus, laten we beginnen en hoe wil ik het verbeteren met

01:24.240 --> 01:25.790
typescript functies?

01:25.790 --> 01:28.423
Ik wil hier interfaces hergebruiken.

01:29.280 --> 01:32.120
Drag and drop interfaces, maar niet alleen om

01:32.120 --> 01:35.470
de structuur van sommige objecten te definiëren zoals

01:35.470 --> 01:39.060
we eerder interfaces gebruikten, maar in plaats daarvan

01:39.060 --> 01:42.010
om echt een contract op te stellen dat bepaalde

01:42.010 --> 01:44.590
klassen kunnen ondertekenen om deze klassen

01:44.590 --> 01:46.970
te dwingen, om in principe bepaalde methoden

01:46.970 --> 01:49.690
te implementeren die ons helpen met drag and

01:49.690 --> 01:51.980
drop.

01:51.980 --> 01:55.250
Om precies te zijn denk ik aan twee interfaces, en natuurlijk

01:55.250 --> 01:58.590
zal het gebruik van deze interfaces optioneel zijn,

01:58.590 --> 02:00.920
maar dit zal ons in staat stellen om, nou

02:00.920 --> 02:04.465
ja, in principe wat code te bieden die een klasse dwingt om

02:04.465 --> 02:06.340
alles te implementeren wat het

02:06.340 --> 02:09.810
nodig heeft om draggable te zijn of een geldig drop target,

02:09.810 --> 02:12.960
wat ons zou kunnen helpen om schonere code en meer

02:12.960 --> 02:15.160
begrijpelijke code te schrijven,

02:15.160 --> 02:19.080
vooral wanneer we in een team werken.

02:19.080 --> 02:21.710
Dus, over welke interfaces heb ik het?

02:21.710 --> 02:23.160
Ik wil één interface

02:23.160 --> 02:24.617
hebben, die ik draggable

02:26.200 --> 02:28.660
noem, en een tweede interface die

02:28.660 --> 02:31.060
ik drag target noem.

02:31.060 --> 02:32.950
Mijn idee hier is dat we de draggable

02:32.950 --> 02:35.710
interface kunnen toevoegen aan elke klasse die een

02:35.710 --> 02:38.030
element rendert dat draggable kan zijn.

02:38.030 --> 02:41.810
In ons voorbeeld is dat de project item klasse.

02:41.810 --> 02:44.170
De project item klasse is verantwoordelijk

02:44.170 --> 02:46.600
voor het renderen van, nou ja, deze project

02:46.600 --> 02:49.230
items en dit moeten de versleepbare stukken

02:49.230 --> 02:53.320
zijn, en de dozen, actieve projecten en voltooide projecten, dus hier

02:53.320 --> 02:57.880
moet onze projectlijst klasse versleepbare doelen zijn.

02:57.880 --> 03:02.100
Wat moeten die interfaces dan implementeren of aan de

03:02.100 --> 03:03.890
klassen toevoegen?

03:03.890 --> 03:05.760
Laten we beginnen met draggable.

03:05.760 --> 03:09.550
Hier hebben we in principe twee event listeners en dus

03:09.550 --> 03:12.540
twee handlers voor deze events nodig.

03:12.540 --> 03:17.070
Een drag start handler, die een methode zal zijn en een drag end handler,

03:17.070 --> 03:19.733
omdat bij het implementeren van drag and

03:22.020 --> 03:24.180
drop het ding dat je wilt slepen

03:24.180 --> 03:26.070
een luisteraar nodig heeft

03:26.070 --> 03:29.840
die luistert naar het begin van die sleepgebeurtenis en

03:29.840 --> 03:32.330
ook, mogelijk, een luisteraar die luistert

03:32.330 --> 03:34.540
naar het einde van de sleepgebeurtenis,

03:34.540 --> 03:36.560
zodat je alle soorten updates

03:36.560 --> 03:40.440
kunt doen die je wilt doen.

03:40.440 --> 03:42.580
Nu, de sleepstart event handler zal

03:42.580 --> 03:44.225
een event object krijgen dat

03:44.225 --> 03:47.370
we drag event zullen noemen, dat is een ingebouwd type,

03:47.370 --> 03:51.010
types met opties libs, vanwege onze TS conflict setup en de

03:51.010 --> 03:53.210
libs die we daar toevoegen en het zal

03:53.210 --> 03:55.330
niets teruggeven, het zal een methode

03:55.330 --> 03:57.600
zijn die wordt uitgevoerd maar die dan

03:57.600 --> 03:59.882
gewoon iets doet, de sleep event configureert

03:59.882 --> 04:03.930
bijvoorbeeld, maar niet teruggeeft.

04:03.930 --> 04:06.970
Nu krijgt de drag end handler een soortgelijk event,

04:06.970 --> 04:10.730
het krijgt ook een drag event en het geeft allemaal niets terug.

04:10.730 --> 04:13.130
Nu zul je natuurlijk zien hoe we die in een paar

04:13.130 --> 04:15.810
seconden toepassen, dus heb geduld met me.

04:15.810 --> 04:17.810
Nu, hoe zit het met het sleepdoel?

04:17.810 --> 04:20.530
Nou, voor het doel, dus de doos waarop

04:20.530 --> 04:22.620
we iets kunnen slepen, zijn er

04:22.620 --> 04:26.280
drie event handlers die ik wil implementeren.

04:26.280 --> 04:28.593
Een drag over handler,

04:29.440 --> 04:31.800
een drop handler, en een

04:31.800 --> 04:34.280
drag leave handler.

04:34.280 --> 04:36.470
Wat doen deze dingen?

04:36.470 --> 04:39.370
Nu moet je een drag over handler implementeren

04:39.370 --> 04:41.960
wanneer je drag and drop in java script implementeert

04:41.960 --> 04:45.140
om de browser in java script een signaal te geven dat

04:45.140 --> 04:48.060
het ding waar je overheen sleept een geldig sleepdoel

04:48.060 --> 04:50.160
is.

04:50.160 --> 04:53.840
Als je niet het juiste doet in de drag over handler,

04:53.840 --> 04:56.410
zal dropping niet mogelijk zijn.

04:56.410 --> 04:57.980
Je hebt de drop handler dan nodig

04:57.980 --> 05:00.760
om te reageren op de werkelijke drop die gebeurt,

05:00.760 --> 05:03.960
dus als de drag over handler de drop met de drop handler

05:03.960 --> 05:06.500
zal toestaan en dan hier kunnen we onze gegevens

05:06.500 --> 05:08.650
en UI bijwerken bijvoorbeeld en de drag

05:08.650 --> 05:11.960
leave handler kan nuttig zijn als we, bijvoorbeeld, wat

05:11.960 --> 05:14.500
visuele feedback geven aan de gebruiker wanneer

05:14.500 --> 05:16.940
hij of zij iets over de box sleept bijvoorbeeld,

05:16.940 --> 05:19.880
we veranderen de achtergrondkleur goed als er geen

05:19.880 --> 05:22.210
drop gebeurt en in plaats daarvan wordt

05:22.210 --> 05:25.790
geannuleerd of de gebruiker beweegt het element weg kunnen we

05:25.790 --> 05:28.410
de drag leave handler gebruiken om onze visuele

05:28.410 --> 05:32.190
update terug te draaien.

05:32.190 --> 05:36.250
Alle drie de handlers ontvangen een sleepgebeurtenis

05:36.250 --> 05:37.990
en geven niets terug, dus

05:37.990 --> 05:41.473
laten we ze op de juiste manier bijwerken.

05:44.070 --> 05:47.250
En ook voor deze laatste behandelaar hier.

05:47.250 --> 05:49.810
En nu hebben we enkele interfaces geconfigureerd

05:49.810 --> 05:52.840
die op zichzelf niet veel doen, maar nu kunnen

05:52.840 --> 05:55.710
we ze gebruiken en ik wil beginnen met het project

05:55.710 --> 05:57.490
item.

05:57.490 --> 06:00.380
Dus laten we onze project item klasse vinden voor dit hier

06:00.380 --> 06:02.710
is het component, hier is het project item, en

06:02.710 --> 06:05.100
nu herinner je je misschien dat een interface niet

06:05.100 --> 06:08.540
alleen kan worden gebruikt om een aangepast objecttype te definiëren,

06:08.540 --> 06:12.290
maar dat je het kunt gebruiken als een contract op een klasse.

06:12.290 --> 06:15.760
U kunt implements aanroepen, of hier implements toevoegen na

06:15.760 --> 06:16.750
uw klassenaam en na

06:16.750 --> 06:19.290
eventuele uitbreidingen die u doet en dan de interface

06:19.290 --> 06:20.900
implementeren.

06:20.900 --> 06:24.340
In dit geval de sleepbare interface.

06:24.340 --> 06:27.250
Nu, als je dat doet, en ik heb dit net geformatteerd om het in een nieuwe

06:27.250 --> 06:29.820
lijn te brengen om het gemakkelijker leesbaar te maken.

06:29.820 --> 06:31.393
Als je dat doet, krijg je nu een

06:31.393 --> 06:34.460
foutmelding dat de klasse hier de interface verkeerd implementeert,

06:34.460 --> 06:38.600
omdat die draggable interface ons dwingt om twee methodes toe te voegen, als

06:38.600 --> 06:40.763
je het je herinnert.

06:42.840 --> 06:44.480
Dus, laten we ze hier toevoegen.

06:44.480 --> 06:46.290
Misschien laden we een constructeur.

06:46.290 --> 06:49.550
Laten we een drag start handler toevoegen die

06:49.550 --> 06:53.610
een gebeurtenis krijgt van het type drag event en laten

06:53.610 --> 06:56.500
we ook onze drag end handler toevoegen

06:56.500 --> 06:59.143
die onze drag event ontvangt.

06:59.990 --> 07:02.010
En nu hebben we deze twee methoden toegevoegd.

07:02.010 --> 07:05.330
Dat alleen maakt slepen en neerzetten niet mogelijk.

07:05.330 --> 07:08.900
Het helpt ons gewoon om draggable componenten of draggable klassen

07:08.900 --> 07:11.880
op een uniforme manier te schrijven, dus als we meer en meer

07:11.880 --> 07:14.560
klassen toevoegen die draggable moeten zijn, zullen

07:14.560 --> 07:18.210
we altijd deze methodes hebben, wat het gewoon gemakkelijker maakt

07:18.210 --> 07:20.700
om te redeneren over onze code en om onze code te

07:20.700 --> 07:22.870
bewerken, vooral als we in een team werken,

07:22.870 --> 07:25.520
omdat iedereen weet waar hij het werk moet doen voor

07:25.520 --> 07:27.840
de drag start event.

07:27.840 --> 07:32.950
Wat dit natuurlijk niet doet, is luisteren naar een sleepstartgebeurtenis.

07:32.950 --> 07:35.010
Dat is iets wat we kunnen doen in de configure

07:35.010 --> 07:36.730
methode die je al hebt.

07:36.730 --> 07:38.980
We kunnen ons gerenderde element bereiken

07:38.980 --> 07:41.090
en er een event listener aan toevoegen,

07:41.090 --> 07:43.890
en dat zou de drag start event zijn.

07:43.890 --> 07:45.780
De sleepstart gebeurtenis is één gebeurtenis,

07:45.780 --> 07:49.190
één standaard browser dom gebeurtenis waarnaar je kunt luisteren

07:49.190 --> 07:51.750
en de zelfs handler die we willen triggeren is natuurlijk

07:51.750 --> 07:53.740
de sleepstart handler, waarnaar we hier

07:55.320 --> 07:57.793
kunnen wijzen.

07:59.080 --> 08:00.750
Nu willen we er ook zeker van zijn

08:00.750 --> 08:02.460
dat in de sleepstart handler dit

08:02.460 --> 08:04.870
sleutelwoord verwijst naar onze klasse en zoals

08:04.870 --> 08:06.560
je leert met event listeners zou

08:06.560 --> 08:08.530
dat standaard niet het geval zijn, dus

08:08.530 --> 08:11.810
we kunnen hier binden en dit binden dat zou geldig zijn, maar

08:11.810 --> 08:14.750
we hebben een betere manier eigenlijk.

08:14.750 --> 08:16.900
We hebben onze auto bind decorator toegevoegd,

08:16.900 --> 08:18.550
dus ik ga dit hier toevoegen aan

08:18.550 --> 08:20.303
de sleep start handler.

08:21.210 --> 08:26.070
Nu kunnen we ook luisteren naar de sleep einde gebeurtenis hier en wijzen

08:26.070 --> 08:28.530
op de sleep einde handler.

08:28.530 --> 08:30.400
U kunt daar ook auto bind toevoegen

08:30.400 --> 08:32.690
als u van plan bent het vis keyword hier te

08:32.690 --> 08:35.830
gebruiken. Voorlopig zal ik hier gewoon het einde loggen

08:35.830 --> 08:37.730
zodat we zien dat het getriggerd wordt

08:37.730 --> 08:40.520
omdat ik hier eigenlijk niets specifieks mee wil

08:40.520 --> 08:44.410
doen en daarom zal ik ook deze parameter leegmaken en in feite typescript

08:44.410 --> 08:47.310
vertellen dat ik het niet gebruik.

08:47.310 --> 08:49.850
Hier in sleepstart, zullen we gebeurtenis gebruiken en voor

08:49.850 --> 08:51.730
het moment, zal ik enkel de gebeurtenis loggen,

08:51.730 --> 08:53.720
wanneer deze gebeurtenis zich voordoet.

08:53.720 --> 08:55.610
Maar dat alleen is niet genoeg.

08:55.610 --> 08:57.000
Als je alles opslaat en je voegt

08:57.000 --> 08:59.230
hier een project toe, zul je zien dat je het

08:59.230 --> 09:01.460
niet opnieuw kunt verslepen, toch?

09:01.460 --> 09:04.750
Als je het probeert te verslepen, zal dat niet

09:04.750 --> 09:07.390
werken, omdat je dan ook iets moet veranderen

09:07.390 --> 09:09.720
in je HTML-bestand.

09:09.720 --> 09:11.810
Op dit lijstitem, dat voor elk project

09:11.810 --> 09:14.550
wordt weergegeven, en dat is wat je wilt verslepen,

09:14.550 --> 09:19.830
moet je het draggable attribuut toevoegen en op true zetten.

09:19.830 --> 09:21.040
Dat is belangrijk.

09:21.040 --> 09:24.200
Dit vertelt de browser dat dit versleepbaar zal zijn.

09:24.200 --> 09:28.430
Als je het daarmee hebt opgeslagen, en je voegt hier opnieuw een project toe,

09:28.430 --> 09:30.400
zie je nu dat dit inderdaad versleepbaar

09:30.400 --> 09:32.070
is, het zit nu vast aan mijn muis

09:32.070 --> 09:35.720
en nu kunnen we het hier echt prima verplaatsen.

09:35.720 --> 09:38.530
Rechts zie je ook dat er een sleepgebeurtenis plaatsvond

09:38.530 --> 09:41.390
toen ik begon te slepen, en als ik loslaat, zie je dat

09:41.390 --> 09:43.860
de eindgebeurtenis ook afgaat.

09:43.860 --> 09:46.510
Dus onze luisteraars zijn verbonden en

09:46.510 --> 09:50.540
we kunnen slepen, nu kunnen we werken aan het drop target dus

09:50.540 --> 09:53.200
aan het vakje waar dit naartoe moet slepen,

09:53.200 --> 09:56.560
om dan het project aan dat vakje toe te voegen.

09:56.560 --> 09:58.660
Dit zal ik ook snel

09:58.660 --> 10:02.930
doen in de apps. css bestand, op de lijstitems, dus

10:02.930 --> 10:06.550
op projecten LI, zal ik een achtergrondkleur van wit toevoegen,

10:06.550 --> 10:09.810
gewoon zodat we dit wat beter kunnen zien.

10:09.810 --> 10:12.350
Dus hier, project LI, heb ik het wit toegevoegd

10:12.350 --> 10:15.800
zodat wanneer we het project hierheen slepen, we de witte achtergrond

10:15.800 --> 10:17.370
hier hebben zodat het wat makkelijker

10:17.370 --> 10:19.150
te zien is.

10:19.150 --> 10:20.840
Maar dat verandert niets aan onze volgende stap.

10:20.840 --> 10:22.700
We willen zijn dropabble maken.
