WEBVTT

00:02.100 --> 00:04.390
教师：当然, 在更大的React应用程序中,

00:04.390 --> 00:08.640
您使用的不仅仅是useRef和useState｡

00:08.640 --> 00:10.950
要了解如何在那里使用TypeScript,

00:10.950 --> 00:15.180
只需将鼠标悬停在您正在调用的函数上, 也就是您正在使用的其他钩子上,

00:15.180 --> 00:17.090
这确实总是很有帮助的｡

00:17.090 --> 00:22.660
例如, 如果您出于任何原因需要在NewTodo组件中使用useEffect工具,

00:22.660 --> 00:29.010
则可以调用它, 然后只需将鼠标悬停在它上面, 以了解它适用于哪些类型｡

00:29.010 --> 00:30.960
例如, 第一个参数是一个EffectCallback,

00:30.960 --> 00:38.610
它是一个特殊函数, 如果设置不正确, TypeScript会警告你, 第二个参数要么是空的, 要么是一个数组, 诸如此类, 这总是会对你有帮助,

00:38.610 --> 00:45.930
你还会学到useEffect不返回任何东西, 例如, 在useState上, 在这里我提到了你总是得到一个只有两个元素的数组,

00:45.930 --> 00:52.410
你也看到了这里, useState返回一个数组, 这就是我们在这里看到的, 左右括号, 其中第一个元素是泛型类型,

00:52.410 --> 01:08.600
所以一个Todos的列表, 因为这是状态快照, 所以第二个元素是React｡

01:08.600 --> 01:08.600
最后这里的调度函数,

01:08.600 --> 01:11.370
这就是这里发生的事情｡

01:11.370 --> 01:12.690
这样才能派上用场｡ 

01:12.690 --> 01:15.490
也许你也在和Redux合作

01:15.490 --> 01:24.530
好吧, 谢天谢地, 如果你深入研究他们的文档, 你也会发现关于使用Redux和TypeScript的说明｡

01:24.530 --> 01:27.430
在这里, 在Recipes下, 您可以找到Usage

01:27.430 --> 01:33.270
with TypeScript, 在那里, 您可以了解如何使用Redux将类型添加到您的操作､

01:33.270 --> 01:35.540
reducer和状态管理中｡

01:35.540 --> 01:41.520
它非常简单, 一点也不复杂, 并且增加了很多类型安全｡

01:41.520 --> 01:43.230
也许你也在使用React

01:43.230 --> 01:47.110
Router软件包, 这个软件包｡

01:47.110 --> 01:52.040
在那里, 你找不到特定的TypeScript符号, 当然, 你也可以把它安装到你的项目中,

01:52.040 --> 01:55.340
用npm install dash save react

01:55.340 --> 02:03.720
dash router dash dom, 这是你通常用来把这个包安装到你的React项目中的命令｡

02:03.720 --> 02:07.000
因此, 这将添加react-router-dom包｡ 

02:07.000 --> 02:10.250
但是这个包在它的页面上没有特殊的类型说明,

02:10.250 --> 02:17.570
你在这里找不到任何特定于TypeScript的东西, 至少在我记录这个的时候是这样｡

02:17.570 --> 02:21.250
尽管如此, 我们当然也可以在TypeScript项目中使用它,

02:21.250 --> 02:23.920
并且可以在那里获得良好的类型支持｡

02:23.920 --> 02:25.800
现在, 安装了它之后, 您会注意到,

02:25.800 --> 02:31.880
如果我从react-router-dom导入, 那里并没有很好的类型支持｡

02:31.880 --> 02:33.870
例如, 如果我试图在这里导入一些东西,

02:33.870 --> 02:39.210
我已经得到一个警告, 说找不到模块react-router-dom的声明,

02:39.210 --> 02:42.730
所以它在这里找不到任何类型信息｡

02:42.730 --> 02:45.420
要解决这个问题, 当然, 我们可以做一些我们以前做过的事情,

02:45.420 --> 02:48.450
npm install dash, dash save dash

02:48.450 --> 02:52.530
dev, at types, slash react, dash router,

02:52.530 --> 02:59.097
dash dom, 所以我们在这里取消了at搜索类型, 我们又做好了, 这是一个技巧, 你们在课程的早期已经学过了,

02:59.097 --> 03:06.790
当然, 没有必要忘记它, 因为我们有一个项目, 其中很多已经与TypeScript开箱即用｡

03:06.790 --> 03:08.140
如果我们添加一些不支持TypeScript的东西,

03:08.140 --> 03:17.270
比如这个, 我们可以这样添加, 现在它知道Route了, 它也知道这个包的所有其他特性了｡

03:17.270 --> 03:21.070
因此, 您也可以轻松地添加对此的支持｡ 

03:21.070 --> 03:23.560
这就是你通常应该采取的方法,

03:23.560 --> 03:29.030
看看官方文档, 看看你是否看到关于TypeScript的使用说明,

03:29.030 --> 03:31.590
如果没有, 安装它, 看看它是否有内置的类型支持,

03:31.590 --> 03:33.720
这样你至少可以得到很好的自动完成和编译支持,

03:33.720 --> 03:42.080
如果也不存在, 安装一个类型包, 就像我们在这里做的那样｡

03:42.080 --> 03:49.920
这就是本模块的全部内容, 这就是如何在React应用中利用TypeScript及其所有令人惊叹的功能,

03:49.920 --> 03:54.370
当然, 您从本课程中学到的所有内容也适用于React应用｡

03:54.370 --> 03:59.130
您可以在React项目中使用从本课程中学到的所有TypeScript功能｡
