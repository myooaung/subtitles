WEBVTT

00:02.320 --> 00:05.210
Instructeur : Pour mettre en œuvre ce système, je vais tout d'abord

00:05.210 --> 00:08.217
créer une interface ValidatorConfig, dans laquelle je veux configurer

00:09.550 --> 00:12.680
le stockage avec lequel je veux travailler.

00:12.680 --> 00:15.130
Mon idée est d'avoir quelques propriétés, et c'est pourquoi

00:15.130 --> 00:17.653
j'utilise cette notation de type indice ici.

00:19.720 --> 00:21.450
qui sont essentiellement des chaînes de caractères,

00:21.450 --> 00:23.440
où la valeur est encore un autre objet.

00:23.440 --> 00:26.380
Car il s'agit ici du nom de la classe pour laquelle

00:26.380 --> 00:29.570
nous voulons enregistrer des propriétés validées.

00:29.570 --> 00:31.700
Puis, dans l'objet que nous stockons ici,

00:31.700 --> 00:34.580
nous avons les propriétés concrètes de la classe auxquelles

00:34.580 --> 00:37.010
sont attachés des validateurs.

00:37.010 --> 00:40.610
Nous avons donc ici la propriété validable, si vous voulez

00:40.610 --> 00:42.240
l'appeler ainsi, qui sera

00:42.240 --> 00:44.660
également une clé de type chaîne.

00:44.660 --> 00:47.350
Et la valeur pour cela devrait être un tableau de chaînes

00:47.350 --> 00:50.010
de caractères où nous avons fondamentalement quelque

00:52.420 --> 00:55.490
chose comme requis, positif, et ainsi de suite.

00:55.490 --> 00:57.460
Quelque chose comme ça pourrait être ajouté

00:57.460 --> 00:59.323
ici comme une liste de validateurs.

01:00.300 --> 01:05.300
Nous pouvons maintenant créer notre configuration registeredValidators ici, qui doit

01:05.790 --> 01:07.950
être de type ValidatorConfig, qui est

01:07.950 --> 01:09.640
initialement un objet vide.

01:09.640 --> 01:11.500
Parce qu'au départ, lorsque l'application

01:11.500 --> 01:13.920
démarre et que notre bibliothèque tierce est chargée,

01:13.920 --> 01:16.293
aucun validateur n'a encore été enregistré.

01:17.640 --> 01:19.920
Eh bien, et puis ici dans nos directeurs,

01:19.920 --> 01:23.490
nous voulons ajouter quelque chose à ce registre.

01:23.490 --> 01:28.020
Gardez à l'esprit qu'une fonction de décorateur de propriété reçoit deux

01:28.020 --> 01:31.010
arguments : la cible, qui est le prototype de l'objet

01:31.010 --> 01:33.910
sur lequel se trouve la propriété, ou la fonction

01:33.910 --> 01:37.340
du constructeur s'il s'agit d'une propriété statique,

01:37.340 --> 01:39.300
et le nom de la propriété.

01:39.300 --> 01:40.710
Ce sont les deux arguments que

01:40.710 --> 01:44.370
nous obtenons ici, nous n'obtenons pas le descripteur des propriétés.

01:44.370 --> 01:46.760
Maintenant nous pouvons aller dans nos validateurs enregistrés

01:46.760 --> 01:51.463
et là je veux ajouter une nouvelle entrée pour la cible. constructeur.

01:52.730 --> 01:56.070
Le prototype de l'instance avec laquelle nous travaillons

01:56.070 --> 01:58.430
aura une clé de construction qui pointe vers

01:58.430 --> 02:02.610
la fonction de construction qui a été utilisée pour créer notre objet.

02:02.610 --> 02:04.690
Et cela, par conséquent, sera essentiellement quelque

02:04.690 --> 02:06.120
chose comme le cours ici, de sorte que

02:06.120 --> 02:08.460
le nom de cette fonction constructeur à la fin peut être

02:08.460 --> 02:10.560
récupéré à partir de ce constructeur.

02:10.560 --> 02:11.900
Parce que le constructeur est

02:11.900 --> 02:13.400
une fonction, nous pouvons utiliser

02:13.400 --> 02:15.900
la propriété name, qui existe pour toute fonction en JavaScript,

02:15.900 --> 02:18.310
pour obtenir le nom de la fonction, et ce sera donc le

02:18.310 --> 02:20.620
nom du cours ici par exemple.

02:20.620 --> 02:23.390
Nous enregistrons donc maintenant le nom de la classe comme une clé

02:23.390 --> 02:25.030
dans les validateurs enregistrés.

02:25.030 --> 02:28.130
Et la valeur pour cela devrait être un autre objet.

02:28.130 --> 02:30.630
Donc je l'ai mis à égalité avec un autre objet ici.

02:30.630 --> 02:32.390
Et dans cet objet, j'ai aussi une

02:32.390 --> 02:34.640
propriété attribuée dynamiquement où j'utilise

02:34.640 --> 02:37.400
mon propName, donc la propriété pour laquelle je

02:37.400 --> 02:40.190
veux ajouter un validateur comme clé.

02:40.190 --> 02:42.310
Maintenant, la valeur est un tableau de

02:42.310 --> 02:45.530
chaînes, et ici je vais ajouter required comme une chaîne.

02:45.530 --> 02:47.920
Il s'agit bien sûr d'un validateur très naïf.

02:47.920 --> 02:50.000
Si nous avions déjà enregistré d'autres validateurs

02:50.000 --> 02:52.830
pour cette propriété, je les écraserais maintenant ici.

02:52.830 --> 02:54.900
Il serait donc préférable de récupérer d'abord

02:54.900 --> 02:58.360
tous les validateurs existants, puis de les copier dans ce tableau et de n'ajouter

02:58.360 --> 03:01.320
que ce qui est nécessaire à ce tableau existant.

03:01.320 --> 03:02.870
Encore une fois, pour gagner du

03:02.870 --> 03:04.740
temps et montrer l'idée générale, je

03:04.740 --> 03:06.873
vais adopter une approche plus naïve.

03:07.980 --> 03:11.180
Avec cela, nous avons obtenu l'annotation requise, travaillons

03:11.180 --> 03:14.690
maintenant sur l'annotation des nombres positifs.

03:14.690 --> 03:16.730
Et bien sûr, c'est à peu près la même chose.

03:16.730 --> 03:21.410
Je copie ce code mais je le fixe ici à positif ou à tout autre identifiant que vous

03:21.410 --> 03:23.600
voulez utiliser et, bien sûr, nous devons

03:23.600 --> 03:25.010
nous assurer que nous acceptons

03:25.010 --> 03:27.650
les bons arguments.

03:27.650 --> 03:30.990
Ainsi, avec ce que nous avons ajouté jusqu'à présent, nous

03:30.990 --> 03:34.420
enregistrons ces propriétés et leurs validateurs dans

03:34.420 --> 03:38.640
notre configuration globale lorsque cette classe est définie.

03:38.640 --> 03:41.460
Il ne nous reste plus qu'à travailler sur la fonction de validation.

03:41.460 --> 03:43.400
La fonction de validation doit passer

03:43.400 --> 03:46.240
en revue tous les validateurs enregistrés, puis exécuter

03:46.240 --> 03:50.340
une logique différente en fonction des validateurs qu'elle trouve.

03:50.340 --> 03:54.857
Donc ici, je veux d'abord récupérer la configuration de l'objet concret

03:54.857 --> 03:57.600
avec lequel nous travaillons.

03:57.600 --> 04:00.390
Pour cela, nous devons trouver la fonction du constructeur

04:00.390 --> 04:04.277
sur laquelle l'objet est basé, puis récupérer la configuration de validation

04:04.277 --> 04:07.040
ou les mappages du validateur de propriété que nous avons

04:07.040 --> 04:09.070
configurés pour cet objet.

04:09.070 --> 04:11.960
Donc ici je vais nommer cet objet validateurs,

04:11.960 --> 04:14.520
ou objValidatorConfig peut-être.

04:14.520 --> 04:17.110
Et nous nous adressons aux validateurs enregistrés ici et accédons

04:17.110 --> 04:22.110
à une propriété qui devrait être obj. constructeur. nom, même logique que précédemment,

04:23.900 --> 04:27.060
nous accédons à la propriété constructeur qui existe sur le prototype

04:27.060 --> 04:28.980
de l'objet et donc nous pouvons y accéder

04:28.980 --> 04:31.720
directement sur l'objet grâce à la façon dont JavaScript

04:31.720 --> 04:33.340
fonctionne et grâce à la chaîne de

04:33.340 --> 04:35.050
prototype nous allons alors atteindre

04:35.050 --> 04:36.710
le prototype si nous ne pouvons pas

04:36.710 --> 04:38.920
trouver la propriété constructeur sur l'objet

04:38.920 --> 04:41.580
lui-même, et cela fonctionnera.

04:41.580 --> 04:43.840
Et donc maintenant nous avons le nom du constructeur

04:43.840 --> 04:46.970
et nous découvrons que, par exemple, ce Cours ici est basé

04:46.970 --> 04:49.050
sur cette classe Cours.

04:49.050 --> 04:51.290
Nous recherchons donc toute configuration de validateur

04:51.290 --> 04:52.800
que nous avons pour la classe Cours.

04:52.800 --> 04:55.910
Donc maintenant on regarde cet objet, en gros.

04:55.910 --> 04:58.207
C'est maintenant dans objValidatorConfig.

04:59.310 --> 05:01.540
Bien entendu, nous ne trouverons pas cette information

05:01.540 --> 05:03.270
si nous essayons de valider un objet pour

05:03.270 --> 05:05.110
lequel rien n'a été enregistré.

05:05.110 --> 05:08.270
Donc, si nous n'avons pas de configuration de validateur,

05:08.270 --> 05:11.640
si nous ne trouvons rien, je veux renvoyer true parce que cela

05:11.640 --> 05:14.010
est certainement valide, non ?

05:14.010 --> 05:15.330
Il n'y a rien à valider,

05:15.330 --> 05:18.350
donc l'objet est certainement valide.

05:18.350 --> 05:20.900
Sinon, si nous le trouvons, je veux qu'il tourne

05:20.900 --> 05:24.910
en boucle dans cet objet interne ici avec une boucle for in.

05:24.910 --> 05:27.580
Donc avec cela je boucle à travers mes propriétés

05:27.580 --> 05:29.560
pour lesquelles j'ai enregistré des

05:29.560 --> 05:33.007
validateurs, avec const prop dans objValidatorConfig.

05:34.380 --> 05:36.950
Cela me donne accès à tous les noms de propriétés pour lesquels

05:36.950 --> 05:39.630
nous pourrions ensuite avoir des validateurs.

05:39.630 --> 05:41.180
Alors maintenant, bien sûr, je dois passer

05:41.180 --> 05:43.970
en revue tous les validateurs que nous pouvons avoir pour une propriété.

05:43.970 --> 05:45.230
Il doit toujours s'agir d'un tableau,

05:45.230 --> 05:47.680
même si nous n'avons ajouté qu'un seul validateur.

05:47.680 --> 05:49.530
Nous pouvons donc utiliser une boucle

05:49.530 --> 05:53.040
for of ici maintenant et obtenir le validateur concret, que nous

05:53.040 --> 05:56.930
avons, pour l'objValidatorConfig pour cette propriété donnée.

05:56.930 --> 06:00.560
Donc, maintenant, nous obtenons des choses comme positif ou requis, qui sont

06:00.560 --> 06:02.963
stockés dans la constante validateur alors.

06:04.080 --> 06:06.110
Et ensuite, nous pourrions avoir une déclaration de commutation

06:06.110 --> 06:08.030
ici, ou bien sûr appeler des fonctions externes en fonction

06:08.030 --> 06:09.810
du validateur que nous trouvons.

06:09.810 --> 06:12.130
Mais ici, je vais utiliser une instruction

06:12.130 --> 06:16.620
de commutation intégrée, activer le validateur et avoir différents cas.

06:16.620 --> 06:19.683
Par exemple, le cas requis ici.

06:20.800 --> 06:22.163
Oups, comme ça.

06:23.470 --> 06:28.950
Ici, je veux retourner vrai si notre propriété, que nous regardons...

06:28.950 --> 06:33.260
Donc cette propriété sur cet objet a une valeur non vide.

06:33.260 --> 06:38.260
Donc je retournerai true si obj prop est truthy.

06:39.170 --> 06:42.010
Et pour convertir cela en une vraie valeur vraie ou fausse,

06:42.010 --> 06:44.420
nous pouvons utiliser l'opérateur double bang.

06:44.420 --> 06:46.840
Maintenant, j'entends des types de plaintes qui disent

06:46.840 --> 06:49.440
qu'il ne sait pas si l'objet a cette propriété, donc ici nous

06:49.440 --> 06:51.220
devrions en fait changer cela en any pour

06:51.220 --> 06:53.560
obtenir cette flexibilité supplémentaire ici.

06:53.560 --> 06:56.150
Bien sûr, vous pouvez aussi travailler sur les types ici.

06:56.150 --> 07:00.480
Par exemple, vous pouvez également transformer vos identificateurs en types clairement

07:00.480 --> 07:03.430
définis où vous travaillez avec des Enums et peut-être

07:03.430 --> 07:05.490
améliorer le typage ici.

07:05.490 --> 07:07.420
Cependant, pour être honnête, comme je veux que cela

07:07.420 --> 07:09.960
fonctionne avec n'importe quel objet, il est difficile de l'améliorer

07:09.960 --> 07:11.810
de manière à ce que TypeScript l'apprécie.

07:11.810 --> 07:13.330
Nous pourrions travailler

07:13.330 --> 07:16.800
avec des types génériques, mais là encore, nous devrions nous

07:16.800 --> 07:19.740
restreindre aux objets que les types génériques devraient

07:19.740 --> 07:22.110
étendre et donc accepter.

07:22.110 --> 07:25.850
Ainsi, n'importe quelle option pourrait être notre meilleure option ici pour être

07:25.850 --> 07:27.880
vraiment flexible et accepter un grand nombre

07:27.880 --> 07:30.640
d'objets différents dans cette fonction de validation.

07:30.640 --> 07:32.270
Revenons maintenant au segment

07:32.270 --> 07:34.750
de commutation, le cas requis est un cas possible,

07:34.750 --> 07:37.650
nous avons aussi le cas positif que nous voulons gérer.

07:37.650 --> 07:39.280
Et là, je veux renvoyer

07:39.280 --> 07:43.770
vrai si la propriété que l'on regarde est supérieure à zéro.

07:43.770 --> 07:47.260
Ainsi, si l'objet prop est supérieur à zéro, alors cette fonction renvoie

07:47.260 --> 07:50.463
un message vrai, sinon elle renvoie un message faux.

07:52.890 --> 07:55.730
Maintenant, si nous n'arrivons pas à ce bloc for ou

07:55.730 --> 07:57.970
si nous avons une boucle qui ne passe pas

07:57.970 --> 07:59.310
par quoi que ce soit parce

07:59.310 --> 08:01.500
que nous n'avons pas enregistré de validateurs,

08:01.500 --> 08:04.130
nous avons passé un tableau vide ou quelque chose

08:04.130 --> 08:06.350
comme ça, donc si vous arrivez à passer cette

08:06.350 --> 08:10.280
boucle for, je renverrai aussi true par défaut.

08:10.280 --> 08:12.800
Et maintenant, nous retournons quelque chose en toutes circonstances

08:12.800 --> 08:14.503
et nous pouvons utiliser la validation.

08:15.450 --> 08:19.253
Avec cela, voyons si cela fonctionne, si nous sauvegardons maintenant ceci, et nous rechargeons

08:23.610 --> 08:26.330
notre application ici et j'essaie de soumettre ceci nous obtenons

08:26.330 --> 08:29.400
une erreur, entrée invalide s'il vous plaît essayez à nouveau.

08:29.400 --> 08:30.780
Si j'entre du texte ici

08:30.780 --> 08:34.793
: JavaScript The Complete Guide, j'obtiens toujours ceci parce

08:35.940 --> 08:38.100
que mon numéro est faux.

08:38.100 --> 08:40.440
Si j'entre moins un ici, on obtient aussi ceci,

08:40.440 --> 08:42.020
car ce n'est pas positif.

08:42.020 --> 08:45.020
En revanche, si je saisis un nombre positif, cela fonctionne.

08:45.020 --> 08:48.230
Si j'ai un nombre positif mais que le premier champ est vide, cela fonctionne

08:48.230 --> 08:49.860
également, c'est donc un point sur

08:49.860 --> 08:52.190
lequel nous devrons travailler.

08:52.190 --> 08:54.600
Alors, trouvons quel est le problème.

08:54.600 --> 08:57.380
Et pour le savoir, je vais ajouter un petit journal de

08:57.380 --> 08:59.830
console ici et enregistrer la propriété que nous

08:59.830 --> 09:00.720
regardons.

09:00.720 --> 09:02.340
Nous pourrions bien sûr aussi utiliser des points d'arrêt

09:02.340 --> 09:03.513
et des outils de développement.

09:04.820 --> 09:07.410
Maintenant, si je clique sur enregistrer ici, vous voyez que la

09:07.410 --> 09:09.250
première chose qui est validée ici est le prix

09:09.250 --> 09:10.623
et ensuite nous nous arrêtons.

09:11.530 --> 09:15.100
Le prix est donc la première propriété qui est validée.

09:15.100 --> 09:16.980
Et c'est ce qui est intéressant ici,

09:16.980 --> 09:20.090
le prix est en fait la seule propriété qui compte ici parce que

09:20.090 --> 09:22.230
nous retournons dans la validation.

09:22.230 --> 09:25.840
Cela signifie que la première fois que nous trouvons un validateur qui

09:25.840 --> 09:29.050
renvoie vrai ou faux, nous le retournons immédiatement et nous

09:29.050 --> 09:31.480
ne nous soucions pas des autres validateurs.

09:31.480 --> 09:33.320
Maintenant, dans le cas faux, c'est

09:33.320 --> 09:35.360
bon parce que si un élément est faux, si

09:35.360 --> 09:37.450
une propriété est fausse, est invalide,

09:37.450 --> 09:40.140
alors on est bien sans regarder les autres.

09:40.140 --> 09:42.590
Mais pour le vrai cas, c'est un problème.

09:42.590 --> 09:44.970
Si nous retournons à la vérité la première

09:44.970 --> 09:49.410
fois qu'une propriété répond à nos attentes, nous avons un problème.

09:49.410 --> 09:51.540
Nous devrions donc l'améliorer en ayant

09:51.540 --> 09:55.130
une propriété isValid ici, qui est initialement vraie.

09:55.130 --> 09:56.780
Est une variable valide, je veux dire.

09:56.780 --> 10:01.780
Et puis ici nous mettons isValid égal à isValid et ceci ici,

10:03.857 --> 10:08.857
et la même chose en bas ici, mettre ceci égal à ceci.

10:09.570 --> 10:11.290
Ainsi, nous ne retournons pas immédiatement,

10:11.290 --> 10:14.750
mais nous mettons à jour isValid et nous nous cassons ensuite pour ne

10:14.750 --> 10:16.700
pas tomber à travers.

10:16.700 --> 10:19.200
Le résultat est qu'à la fin, après toutes

10:19.200 --> 10:22.710
ces boucles, isValid est toujours vrai, mais dès que l'une

10:22.710 --> 10:25.710
de ces vérifications est fausse, grâce au fonctionnement

10:25.710 --> 10:27.530
de JavaScript, la valeur globale

10:27.530 --> 10:29.670
de isValid sera fausse car true combiné

10:29.670 --> 10:33.000
à false renverra false.

10:33.000 --> 10:36.020
Et ensuite, en bas, on devrait renvoyer isValid.

10:36.020 --> 10:39.330
Nous nous assurons donc maintenant que toutes les propriétés sont vérifiées

10:39.330 --> 10:42.433
et pas seulement la première que JavaScript examine.

10:43.320 --> 10:45.460
Ce n'est cependant pas notre seul problème, nous avons

10:45.460 --> 10:47.750
également un problème ici lorsque nous examinons la façon

10:47.750 --> 10:50.480
dont nous enregistrons notre logique de validateur.

10:50.480 --> 10:53.720
Je remplace toujours les validateurs enregistrés

10:53.720 --> 10:57.130
pour un nom de classe donné par un nouvel objet.

10:57.130 --> 11:00.050
Au lieu de cela, nous devrions ajouter tous les validateurs existants

11:00.050 --> 11:01.630
ici afin de ne pas faire cela.

11:01.630 --> 11:04.140
Par exemple, nous avons l'opérateur d'étalement

11:04.140 --> 11:08.130
qui prend toutes les paires clé-valeur existantes pour ce nom de classe

11:08.130 --> 11:10.870
sur les validateurs enregistrés et les ajoute d'abord

11:10.870 --> 11:14.413
avant d'ajouter la nôtre, également en bas bien sûr.

11:16.890 --> 11:18.733
Et maintenant avec cela, si nous sauvegardons

11:19.650 --> 11:21.980
ceci, et nous retournons à notre application ici.

11:21.980 --> 11:24.150
Si j'ai les deux vides, on échoue.

11:24.150 --> 11:26.280
Si nous entrons un prix valide mais que

11:26.280 --> 11:28.490
le titre est invalide, nous échouons.

11:28.490 --> 11:31.510
Si les deux sont valides, nous réussissons.

11:31.510 --> 11:35.570
Si nous avons un titre valide mais pas de prix, nous échouons.

11:35.570 --> 11:37.230
Également avec un prix négatif.

11:37.230 --> 11:39.170
Il s'agit donc d'une première implémentation

11:39.170 --> 11:42.280
naïve de la manière dont un tel validateur pourrait

11:42.280 --> 11:44.500
fonctionner à l'aide des décorateurs

11:44.500 --> 11:46.670
TypeScript.

11:46.670 --> 11:49.150
Et gardez à l'esprit que tout cela, tous les

11:49.150 --> 11:52.310
décorateurs, la fonction de validation et le registre,

11:52.310 --> 11:53.590
vous serait caché.

11:53.590 --> 11:55.820
Il pourrait s'agir d'une partie de la bibliothèque d'un tiers

11:55.820 --> 11:56.780
sur laquelle vous travaillez,

11:56.780 --> 11:59.250
bien sûr d'une manière plus élaborée que celle que vous partagez probablement

11:59.250 --> 12:01.300
avec vos utilisateurs finaux.

12:01.300 --> 12:04.160
En tant qu'utilisateur final, il vous suffit d'importer

12:04.160 --> 12:06.800
ces éléments, d'ajouter ces décorateurs et d'appeler

12:06.800 --> 12:08.840
validate pour disposer d'un moyen très

12:08.840 --> 12:11.763
pratique d'ajouter la validation à vos classes.
