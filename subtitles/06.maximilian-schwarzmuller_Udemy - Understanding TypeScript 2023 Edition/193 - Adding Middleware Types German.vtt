WEBVTT

00:02.210 --> 00:04.200
Kursleiter: Wir haben also diesen einfachen Dummy-Server

00:04.200 --> 00:05.490
eingerichtet und in Betrieb genommen,

00:05.490 --> 00:08.380
aber dieser Server macht natürlich nichts Sinnvolles.

00:08.380 --> 00:11.430
Ich sagte, dass ich eine sehr einfache Rest-API erstellen möchte,

00:11.430 --> 00:13.110
und dafür werde ich einen neuen Unterordner

00:13.110 --> 00:15.570
im Quellordner erstellen, den ich routes nennen

00:15.570 --> 00:16.830
werde.

00:16.830 --> 00:19.870
Dort füge ich eine Datei hinzu, die einen bestimmten Satz von

00:19.870 --> 00:22.540
Routen dieser Rest-API handhaben soll, und nun liegt

00:22.540 --> 00:25.710
es an Ihnen, welche Art von API Sie erstellen möchten.

00:25.710 --> 00:28.520
Ich werde hier eine ToDo-API bauen, wenn du den Abschnitt

00:28.520 --> 00:30.770
React in TypeScript genommen hast, kommt dir

00:30.770 --> 00:32.140
das bekannt vor, denn dort haben

00:32.140 --> 00:34.530
wir auch eine ToDo-App gebaut, diese ist aber völlig

00:34.530 --> 00:36.820
losgelöst von diesem Abschnitt, sie wird nicht

00:36.820 --> 00:38.710
mit React zusammenarbeiten, natürlich

00:38.710 --> 00:41.250
könntest du sie auch selbst verbinden, aber hier werde

00:41.250 --> 00:43.870
ich so eine einfache ToDo-API bauen, einfach damit wir

00:43.870 --> 00:48.350
sehen, wie TypeScript mit Node und Express funktioniert.

00:48.350 --> 00:51.400
Die Anwendung, die wir entwickeln, ist nicht allzu komplex,

00:51.400 --> 00:54.760
aber sie wird eine Menge interessanter Konzepte enthalten.

00:54.760 --> 00:57.080
Hier fügen wir also meine ToDo-Routen

00:57.080 --> 01:01.800
hinzu, indem wir ein ToDo hinzufügen. ts-Datei im Routenordner, und dort möchte ich

01:01.800 --> 01:04.570
jetzt Express verwenden. js, um einige Routen

01:04.570 --> 01:06.630
zu registrieren.

01:06.630 --> 01:09.730
Dazu importiere ich etwas aus Express,

01:09.730 --> 01:13.700
und dieses Etwas ist nun tatsächlich der Router.

01:13.700 --> 01:16.160
Die übliche JS-Syntax dafür ist, dass

01:16.160 --> 01:20.950
Sie Express importieren, indem Sie require express verwenden, und dann

01:20.950 --> 01:23.550
in einer neuen Zeile, sehen Sie oft Code,

01:23.550 --> 01:25.673
wo wir dies hier tun.

01:27.090 --> 01:28.180
Das ist etwas, was Sie tun können,

01:28.180 --> 01:30.130
aber hier werde ich es einfach so importieren.

01:31.130 --> 01:34.120
Damit haben wir einen Router, und wir können Router hier

01:34.120 --> 01:36.750
einfach als Funktion aufrufen, und das erlaubt

01:36.750 --> 01:39.300
uns, Middleware zu registrieren, also letztendlich

01:39.300 --> 01:41.980
Endpunkte für eingehende Anfragen zu routen, wo

01:41.980 --> 01:45.540
wir dann eine Logik auf diese Anfragen ausführen.

01:45.540 --> 01:48.980
Für die ToDo-App möchte ich einige grundlegende Routen registrieren,

01:48.980 --> 01:53.700
eine Post-Route bei Slash Nothing, wo wir ein neues ToDo hinzufügen können, hier brauchen

01:53.700 --> 01:55.760
wir also etwas Code, eine Funktion, die

01:55.760 --> 01:58.860
dann irgendwo ein ToDo hinzufügt, für den Moment gebe ich einfach

01:58.860 --> 02:01.250
keinen Code an, sondern richte nur die Route im

02:01.250 --> 02:03.380
Allgemeinen hier ein.

02:03.380 --> 02:05.110
Wir haben also die Post-Anforderung,

02:05.110 --> 02:08.770
dann eine Get-Anforderung, um alle Todos zu erhalten, dann

02:08.770 --> 02:12.900
auch eine Patch-Anforderung, um ein Todo zu aktualisieren, und

02:12.900 --> 02:15.520
da erwarte ich die ID, ein dynamisches Segment

02:15.520 --> 02:19.280
in der URL, und dann hier auch eine Delete-Anforderung, um

02:19.280 --> 02:22.700
ein Todo nach ID zu löschen.

02:22.700 --> 02:25.720
Dies sind meine Routen, und nun können wir den konfigurierten

02:25.720 --> 02:28.620
Router als Standard in diese Datei exportieren.

02:28.620 --> 02:30.930
Auf diesen Strecken wird also nichts passieren, oder?

02:30.930 --> 02:32.510
Ich habe noch keine Funktion eingerichtet,

02:32.510 --> 02:35.830
die ausgeführt wird, wenn eine Anfrage diese Endpunkte erreicht, aber wir

02:35.830 --> 02:38.620
wissen jetzt zumindest, welche Routen wir wollen, wir werden die

02:38.620 --> 02:41.740
Funktionen in einem zweiten Schritt später hinzufügen.

02:41.740 --> 02:44.100
Für den Moment verbinden wir einfach den Router hier, die konfigurierten

02:44.100 --> 02:48.320
Routen mit unserem laufenden Server hier in app. ts, und um das zu tun, importieren

02:48.320 --> 02:54.290
wir einfach unsere, sagen wir todoRoutes aus .

02:54.290 --> 02:54.290
/routes/todos.

02:56.040 --> 02:58.910
Wir importieren also den exportierten Router

02:58.910 --> 03:01.610
in todos in app. ts, und jetzt müssen wir

03:01.610 --> 03:03.390
es mit unserer laufenden Express-Anwendung

03:03.390 --> 03:08.340
verbinden, indem wir app. verwenden, und dann wollen wir alle Anfragen,

03:08.340 --> 03:10.800
die mit /todos beginnen, an unsere todoRoutes

03:10.800 --> 03:14.600
weiterleiten, damit Anfragen, die auf eine andere URL abzielen,

03:14.600 --> 03:18.703
dort nicht behandelt werden.

03:19.920 --> 03:23.730
Apropos Handhabung, in der Express-Middleware-Einrichtung, die wir hier verwenden,

03:23.730 --> 03:25.983
können wir auch eine Middleware einrichten, die Fehler

03:25.983 --> 03:29.030
behandelt, also alle Fehler, die irgendwo in unserem Code ausgelöst

03:29.030 --> 03:33.610
werden könnten, und wir tun dies mit app.

03:33.610 --> 03:33.610
verwenden,

03:33.610 --> 03:37.470
und dann richten wir hier eine typische Middleware-Funktion ein, bei der wir die Anfrage,

03:37.470 --> 03:40.640
die Antwort und eine nächste Funktion erhalten, und auch hier müssen

03:40.640 --> 03:48.330
Sie sich mit Express auskennen. js und Node zu kennen.

03:48.330 --> 03:48.330
js,

03:48.330 --> 03:51.160
werde ich nicht genau darauf eingehen, wie Middleware in Express

03:51.160 --> 03:52.970
funktioniert und was Middleware ist.

03:52.970 --> 03:54.960
Es handelt sich hier also um eine reguläre Middleware-Funktion, wie

03:54.960 --> 03:57.150
Sie sie von Express kennen sollten. js, und Sie wissen

03:57.150 --> 03:59.050
wahrscheinlich auch, dass es eine

03:59.050 --> 04:02.310
Alternative zu dieser Funktion gibt, eine Funktion

04:02.310 --> 04:04.680
mit vier Parametern, bei der der erste

04:04.680 --> 04:07.350
Parameter ein potenzieller Fehler ist, und

04:07.350 --> 04:10.720
dies ist nun eine Middleware-Funktion zur Fehlerbehandlung,

04:10.720 --> 04:13.530
die automatisch von Express ausgelöst wird,

04:13.530 --> 04:15.290
wenn in einer anderen Middleware

04:15.290 --> 04:18.750
vor dieser ein Fehler auftritt.

04:18.750 --> 04:21.200
Dies ist also meine Fehlerbehandlungs-Middleware-Funktion,

04:21.200 --> 04:23.380
und Sie sehen, dass wir hier eine Reihe von Fehlern haben.

04:23.380 --> 04:26.260
Eine Reihe von Fehlern, weil dies alles vom Typ any ist

04:26.260 --> 04:29.030
und wir auch nicht alle diese Werte verwenden, aber

04:29.030 --> 04:33.080
lassen Sie mich klarstellen, welche Arten von Typen wir hier haben.

04:33.080 --> 04:35.510
Dies wird vom Typ Error sein,

04:35.510 --> 04:39.890
dies vom Typ express. Request, oder Sie importieren einfach

04:39.890 --> 04:43.020
Request hier als ein Extra namens import from express,

04:43.020 --> 04:45.540
das funktioniert auch, wenn Sie die Express-Typen

04:45.540 --> 04:46.670
installiert haben,

04:46.670 --> 04:49.310
was wir tun, dann haben wir hier auch die Response,

04:49.310 --> 04:54.310
und eine NextFunction hier, und dann können wir unsere Typen hier anpassen, das ist jetzt

04:54.490 --> 04:56.310
vom Typ Request, das ist vom Typ

04:56.310 --> 04:59.230
Response, und das ist diese NextFunction, die wir

04:59.230 --> 05:01.420
ausführen können, damit die Anfrage

05:01.420 --> 05:03.650
ihre Reise zur nächsten Middleware in

05:03.650 --> 05:06.680
der Reihe fortsetzt.

05:06.680 --> 05:08.590
Das ist unsere Fehlerbehandlungs-Middleware.

05:08.590 --> 05:10.820
Sie wird immer dann ausgelöst, wenn in einer

05:10.820 --> 05:13.030
unserer anderen Middlewares ein Fehler auftritt,

05:13.030 --> 05:15.000
und hier können wir eine Antwort mit, sagen

05:15.000 --> 05:17.690
wir, JSON-Daten zurücksenden, die eine Fehlermeldung

05:17.690 --> 05:22.690
enthalten. Nachricht, und wo wir vielleicht auch einstellen,

05:22.855 --> 05:24.630
ähm. Nachricht, die ich

05:24.630 --> 05:28.510
meine, und wo wir vielleicht auch einen Statuscode von 500 setzen, und natürlich

05:28.510 --> 05:29.610
können Sie eine ausgefeiltere

05:29.610 --> 05:32.460
Fehlerbehandlungsfunktionalität haben, als ich sie hier

05:32.460 --> 05:35.020
habe, aber damit haben wir unsere Routen hinzugefügt,

05:35.020 --> 05:38.830
wir haben unsere Fehlerbehandlungs-Middleware hinzugefügt, warum fügen wir

05:38.830 --> 05:40.670
jetzt nicht etwas Logik zu dieser API in

05:40.670 --> 05:43.103
der nächsten Vorlesung hinzu.
