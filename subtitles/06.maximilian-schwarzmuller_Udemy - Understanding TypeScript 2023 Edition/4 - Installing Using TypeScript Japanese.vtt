WEBVTT

00:02.160 --> 00:06.440
講師：これは､ 基本的に実際のプロジェクトで同じ例です｡

00:06.440 --> 00:08.550
この簡単なプロジェクト､ インデックスのHTMLファイルとこのJavaScriptファイルは､

00:08.550 --> 00:13.340
このビデオのサブファイルに添付されています｡

00:13.340 --> 00:16.900
これを開いてから､ インデックスのHTMLファイルを開けばいいだけです｡ 

00:16.900 --> 00:20.890
また､ コードはお好きなテキストエディタで開くことができます｡

00:20.890 --> 00:22.160
ここでは､ VisualStudioCodeを使用していますが､

00:22.160 --> 00:26.250
このモジュールの後半で､ 私の正確なセットアップに戻ります｡

00:26.250 --> 00:31.180
とりあえず､ この2つのテキストファイルを任意のテキストエディタで開けばよい｡

00:31.180 --> 00:37.000
この中にあるのはJavaScriptファイルで､ このインデックスHTMLファイルと連動しています｡

00:37.000 --> 00:38.830
そして､ そのインデックスHTMLファイルには､

00:38.830 --> 00:43.698
2つの入力とボタン､ そしてここにインポートされる任意のJavaScriptファイルがあります｡

00:43.698 --> 00:45.843
私たちは基本的に､ これらの要素に手を伸ばします｡ 

00:45.843 --> 00:47.968
そして､ ここに関数があり､ ボタンにイベントリスナーがあり､

00:47.968 --> 00:53.830
関数をトリガーし､ 関数の結果をコンソールに記録しています｡

00:53.830 --> 00:56.750
WindowsのエクスプローラやMacのファインダで､

00:56.750 --> 01:05.150
インデックスのHTMLファイルをダブルクリックしてブラウザで開くと､ このように表示されます｡

01:05.150 --> 01:11.170
2つの入力と追加ボタン､ ここでブラウザのデベロッパーツールも開いてみました｡

01:11.170 --> 01:13.760
例えば､ ここに10と5を入力すると､

01:13.760 --> 01:16.640
右側に15と表示されるかと思いきや､

01:16.640 --> 01:19.420
105と表示されるのです｡

01:19.420 --> 01:23.460
そして､ ここでJavaScriptの弱点が見えてきます｡ 

01:23.460 --> 01:25.890
これは技術的なエラーではありません｡ 

01:25.890 --> 01:28.050
投げられたエラーではなく､

01:28.050 --> 01:31.640
アプリケーションの論理的なエラーなのです｡

01:31.640 --> 01:33.986
さて､ このエラーはどこから出ているのでしょうか？

01:33.986 --> 01:37.490
JavaScriptでは､ この2つの入力に手を伸ばして､

01:37.490 --> 01:41.920
ボタンがクリックされたら､ 最終的に2つの入力要素の値を取得して､

01:41.920 --> 01:45.300
ここで追加に渡します｡

01:45.300 --> 01:50.100
ここで重要なのは､ JavaScriptでinput要素の値にアクセスするときは､

01:50.100 --> 01:53.130
常に文字列であることです｡

01:53.130 --> 01:55.790
常に､ これがどのタイプの入力であっても｡ 

01:55.790 --> 01:59.633
これが数値型であるかどうかは､ 常に文字列である｡ 

02:00.645 --> 02:03.995
そこで､ この関数の最後に2つの文字列を渡しているのですが､

02:03.995 --> 02:05.890
JavaScriptで2つの文字列を足すと､

02:05.890 --> 02:09.570
数学的に足すのではなく､ 連結されてしまうのです｡

02:09.570 --> 02:14.210
105と10と5が連結されているのはそのためです｡ 

02:14.210 --> 02:17.090
ここがJavaScriptの問題点です｡ 

02:17.090 --> 02:19.980
そしてこれは､ TypeScriptが私たちを助けてくれるものなのです｡ 

02:19.980 --> 02:22.360
さて､ TypeScriptがなければ､ もちろんここにifチェックを追加して､

02:22.360 --> 02:28.048
num oneの型がnumberと等しいかどうかをチェックすることができる｡

02:28.048 --> 02:33.048
もし､ num twoの型がnumberと同じであれば､ このように計算を返します｡

02:34.030 --> 02:47.428
そうでなければ､ エラーを投げるか､ 少なくとも､ ここでそれぞれのパラメータの前にプラスを加えて､ 両方を数字に変換します｡

02:47.428 --> 02:50.510
さて､ これは私たちが書くことのできるコードです｡ 

02:50.510 --> 02:53.023
JavaScriptではこれよりもう少し洗練されているかもしれません｡ 

02:53.023 --> 02:57.130
そして､ 数字や入力がまだ数字でない場合は､

02:57.130 --> 03:00.670
数字への変換を確実に行います｡

03:00.670 --> 03:02.430
この状態で､ リロードしてこれを繰り返すと､

03:02.430 --> 03:07.590
コードを変更したため15になります｡

03:07.590 --> 03:09.350
だからもちろん､ JavaScriptでもできる｡ 

03:09.350 --> 03:10.970
そして､ これはバニラJavaScriptであり､

03:10.970 --> 03:13.440
TypeScript的なものは何もない｡

03:13.440 --> 03:16.640
しかし､ 本当は最初に防ぎたいエラーのために､

03:16.640 --> 03:19.048
余分なコードを書きました｡

03:19.048 --> 03:22.210
こんなことでは困ります｡ 

03:22.210 --> 03:26.260
addは数字だけを操作する関数であるべきなので､

03:26.260 --> 03:31.020
ここでaddに文字列を渡すこともできないようにしたい｡

03:31.020 --> 03:35.650
そこで､ 数字が出るか出ないかをチェックする必要がないように｡

03:35.650 --> 03:38.500
だから､ この機能は以前の状態のままにしておきたいのです｡

03:38.500 --> 03:41.630
この機能をここに､ こうして欲しい｡ 

03:41.630 --> 03:44.003
そこで､ TypeScriptが役に立ちます｡ 

03:45.088 --> 03:45.921
そこで､ 先ほど紹介したような場面で､

03:45.921 --> 03:48.900
TypeScriptが役に立ちます｡

03:48.900 --> 03:52.690
では､ どのように役立つのかを確認するために､ インストールしてみましょう｡ 

03:52.690 --> 03:56.590
だからtypescriptlangで｡  orgをクリックすると､ ダウンロードできます｡ 

03:56.590 --> 03:58.540
そして､ そこでインストール方法を学びます｡ 

03:58.540 --> 04:00.250
NPMツールは､

04:01.136 --> 04:06.750
Node JSパッケージの一部です｡

04:06.750 --> 04:10.210
ここでNode JSのコードを書くわけではありませんが､

04:10.210 --> 04:17.770
Node JSをインストールする必要があります｡

04:17.770 --> 04:21.780
Node JSをインストールすると､ NPM（Node Package Manager）というツールもインストールされ､

04:21.780 --> 04:29.200
このツールを使ってTypeScriptをマシン上にグローバルにインストールできる｡

04:29.200 --> 04:34.220
そのため､ 単純にnodejsにアクセスしてください｡  orgを開き､ そこにある最新版をインストールしてください｡

04:34.220 --> 04:35.723
このボタンをクリックするだけです｡ 

04:36.586 --> 04:39.420
その後､ ダウンロードとインストールが行われますが､ そのインストーラーをたどっていくこともできます｡

04:39.420 --> 04:42.360
すべてのOSに対応しています｡ 

04:42.360 --> 04:47.936
そして､ Node JSをインストールしたら､ このコマンドを実行することになります｡

04:47.936 --> 04:51.440
通常のターミナルやコマンドプロンプトを開き､

04:51.440 --> 04:54.800
そのコマンドをコピーするだけです｡

04:54.800 --> 04:57.223
重要､ MacやLinuxでは､ 正しいパーミッションを取得するために､

04:57.223 --> 04:59.412
この前にsudoを追加する必要があるかもしれません｡

04:59.412 --> 05:02.810
Windowsでは､ この作業は必要ありません｡ 

05:02.810 --> 05:06.810
そのため､ このコマンドでTypeScriptをインストールするようにすればよい｡

05:06.810 --> 05:09.372
パスワードの入力が必要な場合に備えて､ パスワードを入力してください｡ 

05:09.372 --> 05:12.176
これで､ あなたのマシンにTypeScriptがグローバルにインストールされたことになるのだが､

05:12.176 --> 05:15.430
さて､ これはどういうことだろう？

05:15.430 --> 05:17.696
TypeScriptをインストールしました｡ 

05:17.696 --> 05:22.750
TypeScriptはプログラミング言語ですが､ JavaScriptにコンパイルするためのコンパイラやツールがあるからこそ､

05:22.750 --> 05:28.137
プログラミング言語として機能することを忘れないでください｡

05:28.137 --> 05:31.310
つまり､ 私たちがここにインストールしたのは､ コンパイラと､

05:31.310 --> 05:39.020
TypeScriptのコードを理解してJavaScriptに変換するために必要なすべての知識なのです｡

05:39.020 --> 05:41.036
これでコンパイラがインストールされたので､

05:41.036 --> 05:44.460
TSCコマンドを実行して､ このTypeScriptコンパイラを呼び出して､

05:44.460 --> 05:50.870
TypeScriptファイルをJavaScriptにコンパイルすることができる｡

05:50.870 --> 05:56.563
そこで､ 今回取り組んだプロジェクトでこれを見るために､ 単純にtsを使って新しいファイルを追加してみましょう｡

05:56.563 --> 05:56.563
のようなts｡ 

05:56.563 --> 05:58.677
名前は任意ですが､ 拡張子は. tsは､

05:58.677 --> 06:03.677
TypeScriptの略です｡

06:05.100 --> 06:09.850
では､ そのJavaScriptのコードをTypeScriptファイルにコピーしてみましょう｡

06:09.850 --> 06:13.100
ここで､ VisualStudioCodeでは､ すぐにいくつかのエラーが出ますが､

06:13.100 --> 06:14.280
これから修正します｡

06:14.280 --> 06:16.379
そして､ これがTypeScriptの大きなメリットのひとつです｡ 

06:16.379 --> 06:18.915
正しいIDEを使っていれば､ 私が強くお勧めするのはVisualStudioCodeですが､

06:18.915 --> 06:24.420
これについてはまた後で説明します｡

06:24.420 --> 06:30.230
そして､ TypeScriptファイルの内部で作業する際に､ IDEで素晴らしいサポートを受けることができます｡

06:30.230 --> 06:34.710
ここではすでに､ 基本的にTypeScriptに私のコードを解析させ､

06:34.710 --> 06:36.910
いくつかの弱点を特定します｡

06:36.910 --> 06:39.720
それは素晴らしいことです｡ なぜなら､ それこそが私が望んでいることだからです｡ 

06:39.720 --> 06:44.003
そこで､ この例では､ JavaScriptのみのJSファイルを削除してみます｡

06:45.952 --> 06:50.539
それに伴い､ 一部の定数などが複数のファイルで使用されていることを特定したため､

06:50.539 --> 06:53.230
いくつかのエラーはなくなりました｡

06:53.230 --> 06:55.787
でも､ まだ下のほうでエラーが出ます｡ 

06:55.787 --> 07:00.108
そして､ 例えば､ 本当にvalueプロパティが存在するのかどうかがわからないということがわかります｡

07:00.108 --> 07:03.200
今となってはJavaScriptで今まで考えもしなかったミスですが､

07:03.200 --> 07:05.720
本当です｡

07:05.720 --> 07:08.350
ここでは､ IDで要素を選択しています｡ 

07:08.350 --> 07:11.680
これで本当にうまくいくかどうかは､ TypeScriptにはわからない｡ 

07:11.680 --> 07:13.160
もしかしたら､ ここに誤字があるかもしれません｡ 

07:13.160 --> 07:15.940
この場合､ 要素を選択することはできませんね｡ 

07:15.940 --> 07:17.704
この要素は､ 単にページ上に存在しないだけです｡ 

07:17.704 --> 07:20.164
そのため､ タイプミスがあるかもしれませんし､ TypeScriptはHTMLコードを解析して､

07:20.164 --> 07:22.472
これが動作するかどうかを調べることはしません｡

07:22.472 --> 07:24.468
だから､ ひとつには､ これは失敗するかもしれない｡ 

07:24.468 --> 07:30.910
しかし､ それが成功して､ そこで要素を選択したとしても､ それが入力要素である必要はないのです｡

07:30.910 --> 07:37.450
他の要素である可能性もありますし､ ほとんどのHTML要素にはアクセスできるvalueプロパティがありません｡

07:37.450 --> 07:38.630
そして､ これがすでに素晴らしい｡ 

07:38.630 --> 07:41.372
TypeScriptは､ 私たちに､ より明確に､

07:41.372 --> 07:46.130
私たちの意図を明確にし､ コードをダブルチェックすることを強いています｡

07:46.130 --> 07:49.820
そして､ 例えばここですが､ このような構文をすべて理解する必要はありません｡

07:49.820 --> 07:52.172
講座を通して､ 順を追って学んでいきます｡ 

07:52.172 --> 08:00.080
しかし､ 例えばここでは､ 感嘆符をつけることで､ TypeScriptに確実に要素を取得することを知らせることができる｡

08:00.080 --> 08:04.170
これは基本的に､ TypeScriptが決してNULLを返さないことを意味する｡ 

08:04.170 --> 08:06.370
これは､ 常に要素を見つけることができます｡ 

08:06.370 --> 08:08.420
開発者としては､ IDをダブルチェックして､

08:08.420 --> 08:10.350
ここにそのIDがあることを確認したので､

08:10.350 --> 08:14.763
これが常に要素を見つけることができることをもちろん知っています｡

08:15.610 --> 08:19.500
今はそれに加えて､ 必ず入力要素になることも分かっています｡

08:19.500 --> 08:22.408
そこで､ HTMLの入力要素として､ 後で詳しく説明するタイプキャスティングという構文を使って､

08:22.408 --> 08:30.327
TypeScriptにどのタイプの要素になるかを知らせることができるのです｡

08:30.327 --> 08:32.926
これを2番目の要素にも適用することができます｡ 

08:32.926 --> 08:37.510
ここではっきりさせておきたいのは､ これがTypeScriptの構文だということだ｡

08:37.510 --> 08:39.520
この感嘆符はここで使えるし､ このタイプキャスティングはここで使える､

08:39.520 --> 08:44.786
なぜなら私たちは.NETにいるからです｡

08:44.786 --> 08:44.786
tsファイルでは､ TypeScriptファイルの中にいます｡ 

08:44.786 --> 08:48.380
これをJavaScriptにコンパイルしていきます｡ 

08:48.380 --> 08:51.050
これは､ バニラJavaScriptでは動作しないでしょう｡ 

08:51.050 --> 08:53.427
そこでは利用できません｡ 

08:53.427 --> 08:56.300
これによって､ 私たちは自分の意図を明確にし､ 自分のコードについて本気で考え､

08:56.300 --> 08:58.460
ダブルチェックすることを余儀なくされるわけですが､

08:58.460 --> 09:01.060
これは素晴らしいことだと思います｡

09:01.060 --> 09:03.160
しかし､ それは最大のメリットでもありません｡ 

09:04.270 --> 09:06.820
最大のメリットは､ タイプが追加されたことです｡ 

09:06.820 --> 09:09.630
それがTypeScriptの名前の由来です｡ 

09:09.630 --> 09:14.204
そしてここでは､ この関数が操作するデータの種類については何も言っていない｡

09:14.204 --> 09:17.886
これらのパラメータの1つにカーソルを合わせると､

09:17.886 --> 09:20.126
ここに何か表示されます｡

09:20.126 --> 09:24.880
そして結局､ これはTypeScriptが私たちに「何が入っているかわからないよ」と言っているのです｡

09:24.880 --> 09:24.880
どのようなタイプの値でもよい｡ 

09:24.880 --> 09:27.162
これで､ TypeScriptファイルでより明示的な型を追加することができるようになりました｡ 

09:27.162 --> 09:31.960
ですから､ JavaScriptのファイルではなく､ TypeScriptのファイルで､ ここにコロンをつけて､

09:31.960 --> 09:33.806
型を指定するのです｡

09:33.806 --> 09:38.580
例えば､ 番号｡ 

09:38.580 --> 09:40.730
ここをこうして､ ここをこうして｡ 

09:40.730 --> 09:45.246
このコンパイラが理解できるTypeScriptの追加構文で､

09:45.246 --> 09:50.960
TypeScriptに「ここは数字型､ ここは数字型」と伝えているのだ｡

09:50.960 --> 09:54.010
そのため､ ここで再びエラーが発生しました｡ 

09:54.010 --> 09:58.060
ちなみに､ このエラーはIDEで出るだけではありません｡

09:58.060 --> 09:59.370
また､ このコードをコンパイルしようとすると､

09:59.370 --> 10:03.820
最終的にはコンパイルする必要があるため､ この問題が発生します｡

10:03.820 --> 10:05.326
さて､ これをコンパイルするために､ ターミナルを開いてみます｡ 

10:05.326 --> 10:10.760
ここでは､ このIDEに統合されているターミナルまたはコマンドプロンプトを開いています｡

10:10.760 --> 10:13.683
通常のシステムコマンドプロンプトです｡ 

10:14.947 --> 10:16.530
ここでも普通に使っていたシステムコマンドのターミナルは､

10:16.530 --> 10:19.533
すでにこのフォルダに移動していただけです｡

10:20.510 --> 10:22.446
IDEに内蔵されたターミナルを使用していない場合は､

10:22.446 --> 10:33.960
通常のターミナルを使用できますが､ TypeScriptファイルを追加した､ 抽出した開始フォルダにCDナビゲートします｡

10:33.960 --> 10:36.300
そして､ そのフォルダーに入ったら､ TSCを実行することができます｡ 

10:36.300 --> 10:38.888
これは､ 先ほどインストールしたこのTypeScriptコンパイラをdash

10:38.888 --> 10:42.980
tsで呼び出すものです｡ ツ｡ 

10:42.980 --> 10:47.980
そして､ これを実行すると､ 実際にエラーが発生します｡ 

10:47.990 --> 10:53.267
デフォルトではTypeScriptがJavaScriptにコンパイルするため､

10:53.267 --> 11:00.050
JavaScriptファイルが生成されることになります｡

11:00.050 --> 11:02.900
しかし､ その際にコンパイラーエラーが発生します｡ 

11:02.900 --> 11:09.070
文字列型の引数は､ 数値型のパラメータに代入できないことが分かります｡

11:09.070 --> 11:18.930
ここで問題となるのは､ TypeScriptはinput要素のvalueプロパティで得られるものが文字列であることを理解していることだ｡

11:18.930 --> 11:23.130
また､ IDEではここでも見られます｡ 

11:23.130 --> 11:24.786
そして､ これをaddに渡すことはできません｡

11:24.786 --> 11:28.130
なぜなら､ addでは､ 文字列ではなく､ 数値が必要だからです｡

11:28.130 --> 11:33.600
そこで､ 例えば､ ここにプラスを付けて数値に変換するなどして修正する必要があります｡

11:33.600 --> 11:36.790
そして､ このコマンドを繰り返すとすぐに､ このコードを再びコンパイルすることができ､

11:36.790 --> 11:42.406
今度はエラーなしでコンパイルすることができます｡

11:42.406 --> 11:50.690
これはTypeScriptを使って与えてくれます｡  JavaScriptのファイルでは､ 両方のファイルを同時に使用することがないことを理解していないため､

11:50.690 --> 11:53.090
再びいくつかのエラーが表示されます｡

11:54.028 --> 11:55.373
繰り返しになりますが､ これはすべて､

11:56.466 --> 11:58.530
このコースの後半で設定することで改善されるものです｡

11:58.530 --> 12:00.428
今は無視してもいい｡ 

12:00.428 --> 12:01.261
そこで､ このようなファイルが表示されます｡ 

12:02.588 --> 12:04.348
そして､ これを開くと､ 面白いものが入っているのです｡ 

12:04.348 --> 12:06.210
そこでは､ もちろん､ 私たちのタイプは消えていることがわかります｡ 

12:06.210 --> 12:08.690
こちらのキャスティングはなくなりました｡ 

12:08.690 --> 12:11.280
またバニラJavaScriptを搭載しています｡ 

12:11.280 --> 12:13.308
ここでTypeScriptファイルを見てみると､

12:13.308 --> 12:16.250
これらの素晴らしい追加要素があることがわかる｡

12:16.250 --> 12:18.786
しかし､ 先ほども言ったように､ これらはあくまでTypeScriptの機能です｡ 

12:18.786 --> 12:22.130
JavaScriptにコンパイルする際､ コードを評価し､ 潜在的なエラーを見つけるために使用されますが､

12:22.130 --> 12:29.090
その後､ それらは取り除かれ､ 出力として通常のJavaScriptを得ることができます｡

12:29.090 --> 12:37.010
これで､ indexのHTMLファイルに移動して､ tsを使ってインポートできるようになりました｡

12:37.010 --> 12:37.010
jsと､ それが重要です｡ 

12:37.010 --> 12:41.230
ブラウザではTypeScriptを実行できないため､

12:41.230 --> 12:43.550
必ずJavaScriptファイルをインポートすること｡

12:43.550 --> 12:45.990
コンパイルの結果をインポートする必要があります｡ 

12:45.990 --> 12:49.480
これで､ リロードすれば動作するコードができあがります｡

12:49.480 --> 13:01.110
なぜなら､ 関数に渡す前に入力をキャストしてこの問題を修正した､ 適切なJavaScriptのコードがあるからです｡

13:01.110 --> 13:06.087
しかし､ これらの問題を解決できたのは､ ここにあるタイプアノテーションのおかげです｡

13:06.087 --> 13:10.720
また､ ご覧いただいたように､ 他の部分もよりきれいに書く必要がありました｡

13:10.720 --> 13:13.220
だからこそ､ TypeScriptはすごいんです｡ 

13:13.220 --> 13:17.880
より良い､ よりきれいな､ より間違いの少ないコードを書かざるを得なくなるのです｡
