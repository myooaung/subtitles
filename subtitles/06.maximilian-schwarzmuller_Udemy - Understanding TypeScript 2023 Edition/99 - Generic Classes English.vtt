WEBVTT

1
00:00:02.270 --> 00:00:04.390
<v Instructor>Okay, enough about generic functions.</v>

2
00:00:04.390 --> 00:00:06.490
We will always use them throughout this course,

3
00:00:06.490 --> 00:00:08.150
all the course project.

4
00:00:08.150 --> 00:00:10.390
So that should be getting clearer and clearer,

5
00:00:10.390 --> 00:00:11.890
the more we work with it.

6
00:00:11.890 --> 00:00:14.823
The general idea hopefully is clear by now already.

7
00:00:15.660 --> 00:00:18.490
Generic functions aren't everything we can use though,

8
00:00:18.490 --> 00:00:20.550
we've also got generic classes

9
00:00:20.550 --> 00:00:21.560
and therefore, lets see

10
00:00:21.560 --> 00:00:23.740
how we would create such a generic class

11
00:00:23.740 --> 00:00:25.170
and why we could do that,

12
00:00:25.170 --> 00:00:27.760
why that could be useful for us.

13
00:00:27.760 --> 00:00:31.950
We could be creating a storage class here.

14
00:00:31.950 --> 00:00:36.060
A class lets say, which has a private property data.

15
00:00:36.060 --> 00:00:38.850
Which in the end will hold an array of data.

16
00:00:38.850 --> 00:00:40.940
Then it has an addItem method,

17
00:00:40.940 --> 00:00:44.200
which takes our item and that should be added to data

18
00:00:44.200 --> 00:00:45.763
with push, let's say.

19
00:00:48.570 --> 00:00:50.830
And we have a removeItem method,

20
00:00:50.830 --> 00:00:52.173
which takes our item,

21
00:00:53.010 --> 00:00:57.740
where we could say this.data.splice

22
00:00:57.740 --> 00:01:01.730
and then we just need to get the indexOff(item) here

23
00:01:01.730 --> 00:01:02.910
and splice one element.

24
00:01:02.910 --> 00:01:06.030
This is how we can remove an element from an array.

25
00:01:06.030 --> 00:01:07.873
And of course getItems,

26
00:01:09.750 --> 00:01:13.120
where return, let's say a copy of this.data,

27
00:01:13.120 --> 00:01:15.770
like that with the spread operator you learned about.

28
00:01:16.610 --> 00:01:17.443
Now we can do that

29
00:01:17.443 --> 00:01:19.450
and we are getting a bunch of errors here.

30
00:01:19.450 --> 00:01:20.500
We are getting a bunch of errors,

31
00:01:20.500 --> 00:01:23.900
now for one because the name Storage is a reserved name,

32
00:01:23.900 --> 00:01:25.230
so let's name it Datastorage.

33
00:01:25.230 --> 00:01:26.620
That's easy to get rid of.

34
00:01:26.620 --> 00:01:27.920
Now we also get an error here

35
00:01:27.920 --> 00:01:29.400
because we are not saying anything about

36
00:01:29.400 --> 00:01:30.880
the kind of data we are storing,

37
00:01:30.880 --> 00:01:32.960
and which type item has here.

38
00:01:32.960 --> 00:01:35.870
And that's exactly where we can turn this into generic class

39
00:01:35.870 --> 00:01:38.860
because you might not care about the type of data.

40
00:01:38.860 --> 00:01:40.880
We want to make sure it's uniform data,

41
00:01:40.880 --> 00:01:42.410
so it's either just strings,

42
00:01:42.410 --> 00:01:44.830
or just numbers, or just objects.

43
00:01:44.830 --> 00:01:47.550
But other than that, I don't care about it.

44
00:01:47.550 --> 00:01:50.820
So here we could turn this into generic class,

45
00:01:50.820 --> 00:01:53.300
by adding angle brackets after the class name

46
00:01:53.300 --> 00:01:56.330
and then again T, U, whatever you want to use

47
00:01:56.330 --> 00:02:00.110
as an identifier, and add this here as a generic type.

48
00:02:00.110 --> 00:02:01.083
Now here we can say,

49
00:02:01.083 --> 00:02:04.490
this here is an array of type T,

50
00:02:04.490 --> 00:02:07.413
so it stores data of that generic type in it.

51
00:02:07.413 --> 00:02:09.670
Therefore, here we add such data,

52
00:02:09.670 --> 00:02:12.400
and we try to remove such data here.

53
00:02:12.400 --> 00:02:15.140
And therefore, here we get items correctly is inferred

54
00:02:15.140 --> 00:02:18.490
to return an array of generic types.

55
00:02:18.490 --> 00:02:20.860
And now we can create different storage's,

56
00:02:20.860 --> 00:02:24.690
we can have our sting or our textStorage here,

57
00:02:24.690 --> 00:02:29.500
by calling new DataStorage, setting that generic type

58
00:02:29.500 --> 00:02:31.250
to type string here.

59
00:02:31.250 --> 00:02:33.070
And then here in textStorage,

60
00:02:33.070 --> 00:02:34.340
I can call addItem,

61
00:02:34.340 --> 00:02:36.410
and if I try to add a number I get an error

62
00:02:36.410 --> 00:02:37.513
because I am saying that this will be

63
00:02:37.513 --> 00:02:40.800
a DataStorage which only stores stings.

64
00:02:40.800 --> 00:02:45.800
So, I can indeed store Max here, and maybe also store Manu,

65
00:02:46.830 --> 00:02:51.450
and then call textStorage.removeItem('Max')

66
00:02:51.450 --> 00:02:55.073
and then console.log.textStorage.getItems.

67
00:02:56.520 --> 00:02:58.870
And this should all work if we save that

68
00:02:58.870 --> 00:03:00.300
because it's a generic type,

69
00:03:00.300 --> 00:03:03.103
and indeed at the end we just have Manu in there.

70
00:03:04.400 --> 00:03:08.240
So this would be one simple generic class we can create.

71
00:03:08.240 --> 00:03:10.500
Now, why would we build such a generic class?

72
00:03:10.500 --> 00:03:11.770
Well just as I said,

73
00:03:11.770 --> 00:03:14.220
because maybe we don't just want to store texts,

74
00:03:14.220 --> 00:03:17.110
I might also want to store some numbers

75
00:03:17.110 --> 00:03:18.950
in a different data storage.

76
00:03:18.950 --> 00:03:21.510
So then I could create such a DataStorage,

77
00:03:21.510 --> 00:03:23.810
and setting this to number ensures that now

78
00:03:23.810 --> 00:03:26.250
we can only add numbers to that storage.

79
00:03:26.250 --> 00:03:28.330
Of course, we could also set up a storage

80
00:03:28.330 --> 00:03:30.520
where we allow both by using a union type.

81
00:03:30.520 --> 00:03:32.550
So, we've got full flexibility there,

82
00:03:32.550 --> 00:03:36.470
but we give type some extra information,

83
00:03:36.470 --> 00:03:38.490
that makes this both a flexible

84
00:03:38.490 --> 00:03:41.450
and still strongly typed class.

85
00:03:41.450 --> 00:03:43.470
Just as we had with functions.

86
00:03:43.470 --> 00:03:46.910
Really flexible and still perfect types support.

87
00:03:46.910 --> 00:03:49.900
That's the whole idea behind generic types.

88
00:03:49.900 --> 00:03:52.680
So, here we can do that with the DataStorage class

89
00:03:52.680 --> 00:03:53.750
by storing strings,

90
00:03:53.750 --> 00:03:55.130
or by storing numbers,

91
00:03:55.130 --> 00:03:56.513
or whatever we want.

92
00:03:57.790 --> 00:04:01.300
We'll have one problem about our dataStorage class though.

93
00:04:01.300 --> 00:04:04.880
Let's say here I have my object storage,

94
00:04:04.880 --> 00:04:07.090
now I can create new DataStorage

95
00:04:07.090 --> 00:04:10.490
and say in there I want to store objects, right,

96
00:04:10.490 --> 00:04:12.270
I want to store objects

97
00:04:12.270 --> 00:04:17.270
and of course we can go to object storage and add an item.

98
00:04:17.300 --> 00:04:20.460
Let's say an object I have names Max in there.

99
00:04:20.460 --> 00:04:22.920
Let's also store another object,

100
00:04:22.920 --> 00:04:24.760
where I store Manu.

101
00:04:24.760 --> 00:04:26.770
Then, let's say we are doing some stuff in our code

102
00:04:26.770 --> 00:04:28.310
and then at a later point of time here,

103
00:04:28.310 --> 00:04:29.740
I will want to remove the item,

104
00:04:29.740 --> 00:04:34.100
I want to remove the item with name: 'Manu' here.

105
00:04:34.100 --> 00:04:37.863
And then, I want to console.log.objStorage.getItems.

106
00:04:39.450 --> 00:04:40.550
Like that.

107
00:04:40.550 --> 00:04:41.883
If we save that,

108
00:04:42.920 --> 00:04:45.840
we see we've got an object in there that's Max.

109
00:04:45.840 --> 00:04:47.470
So that looks good right.

110
00:04:47.470 --> 00:04:49.140
Now, it's not really good.

111
00:04:49.140 --> 00:04:52.490
Let's say here, I want to remove Max now,

112
00:04:52.490 --> 00:04:55.740
so now we should have Manu left in the data storage.

113
00:04:55.740 --> 00:04:59.653
Hence, if I reload, a well, it's still Max.

114
00:05:00.550 --> 00:05:03.660
Now the problem is that we are working with objects here,

115
00:05:03.660 --> 00:05:07.350
as you know objects in JavaScript are reference types.

116
00:05:07.350 --> 00:05:09.440
Now, attach to find an additional resource,

117
00:05:09.440 --> 00:05:11.460
which allows you to dive into reference.

118
00:05:11.460 --> 00:05:12.730
Whereas primitive values,

119
00:05:12.730 --> 00:05:14.650
here I assume you know the difference

120
00:05:14.650 --> 00:05:16.970
because it is a core JavaScript thing,

121
00:05:16.970 --> 00:05:19.060
totally unrelated to typescript.

122
00:05:19.060 --> 00:05:20.600
Here the problem is,

123
00:05:20.600 --> 00:05:22.300
the way our class is built

124
00:05:22.300 --> 00:05:26.243
with this logic on how data is removed and identified,

125
00:05:27.080 --> 00:05:29.580
we are not really doing a good job

126
00:05:29.580 --> 00:05:32.200
when we work with non-primitive values.

127
00:05:32.200 --> 00:05:35.130
So, when we work with objects or arrays,

128
00:05:35.130 --> 00:05:37.840
because indexOf, if we pass in an object here,

129
00:05:37.840 --> 00:05:40.910
it will not work because technically this is a new object.

130
00:05:40.910 --> 00:05:43.800
It might look like this one but it doesn't work

131
00:05:43.800 --> 00:05:46.520
because this technically is a brand new object in memory

132
00:05:46.520 --> 00:05:48.290
and has a different address.

133
00:05:48.290 --> 00:05:52.110
And indeed here, JavaScript will look for the address

134
00:05:52.110 --> 00:05:54.930
and basically not find it, so what it then does is

135
00:05:54.930 --> 00:05:58.453
it removes the last element in the array here,

136
00:05:59.510 --> 00:06:01.473
because this in the end returns -1.

137
00:06:02.419 --> 00:06:06.070
IndexOf returns -1 even if it doesn't find anything.

138
00:06:06.070 --> 00:06:07.990
Which means it starts at the end of the array,

139
00:06:07.990 --> 00:06:09.770
that's normal Javascript behavior

140
00:06:09.770 --> 00:06:11.921
and removes the last element of the array.

141
00:06:11.921 --> 00:06:14.190
That's why it worked for Manu,

142
00:06:14.190 --> 00:06:16.810
it didn't really work it accidentally worked,

143
00:06:16.810 --> 00:06:19.020
but why it does not work for Max,

144
00:06:19.020 --> 00:06:19.880
we are always removing

145
00:06:19.880 --> 00:06:21.760
the last element of the array for now,

146
00:06:21.760 --> 00:06:23.670
since we can't identify it.

147
00:06:23.670 --> 00:06:25.890
Now, one work around to at least fix that is

148
00:06:25.890 --> 00:06:29.140
to check if we find our item,

149
00:06:29.140 --> 00:06:32.260
so we can check if this code here,

150
00:06:32.260 --> 00:06:36.260
if that is equal to -1, which means we did not find it.

151
00:06:36.260 --> 00:06:37.360
Then we can return

152
00:06:37.360 --> 00:06:40.780
and make sure we don't accidentally remove the wrong item.

153
00:06:40.780 --> 00:06:42.900
But of course now we just fixed that bar,

154
00:06:42.900 --> 00:06:44.850
but we still don't have this inner state

155
00:06:44.850 --> 00:06:46.580
where it would work with objects.

156
00:06:46.580 --> 00:06:48.890
Well the only way it could work with objects,

157
00:06:48.890 --> 00:06:51.740
is if we pass the exact same object again.

158
00:06:51.740 --> 00:06:55.700
So here if I had my max object stored in a constant,

159
00:06:55.700 --> 00:06:58.840
like this, and in here I pass the max object.

160
00:06:58.840 --> 00:07:02.050
And I do the same here, then I am really using the same,

161
00:07:02.050 --> 00:07:05.330
the exact same object, the exact same object in memory,

162
00:07:05.330 --> 00:07:06.540
and therefore, now it would work.

163
00:07:06.540 --> 00:07:08.930
This would be the only way to make this work.

164
00:07:08.930 --> 00:07:12.340
So therefore, here, the better idea might be to make sure

165
00:07:12.340 --> 00:07:16.150
that this really only works with primitive values.

166
00:07:16.150 --> 00:07:20.100
So, we could say that T extends string,

167
00:07:20.100 --> 00:07:24.010
number, maybe all the boolean's adds on.

168
00:07:24.010 --> 00:07:25.990
So now we basically say that DataStorage

169
00:07:25.990 --> 00:07:27.920
should only work with these types.

170
00:07:27.920 --> 00:07:30.470
Therefore objects are not allowed anymore.

171
00:07:30.470 --> 00:07:32.500
This might be better here because,

172
00:07:32.500 --> 00:07:35.220
we would need a more specialized DataStorage,

173
00:07:35.220 --> 00:07:38.290
which then probably only works with objects in turn,

174
00:07:38.290 --> 00:07:40.080
and not with primitive values.

175
00:07:40.080 --> 00:07:42.430
To fine tune our retrieval logic here,

176
00:07:42.430 --> 00:07:44.800
to maybe check for some iD in the item

177
00:07:44.800 --> 00:07:45.880
that should be removed.

178
00:07:45.880 --> 00:07:46.970
The way it works here,

179
00:07:46.970 --> 00:07:48.910
it really only works for primitive types,

180
00:07:48.910 --> 00:07:52.320
so setting such a constraint is definitely a good idea.

181
00:07:52.320 --> 00:07:55.610
And with that if we saved it, after commenting this out,

182
00:07:55.610 --> 00:07:57.253
it again works, of course.

183
00:07:58.810 --> 00:08:00.540
Now needless to say, hopefully,

184
00:08:00.540 --> 00:08:02.620
that of course you could have more than one

185
00:08:02.620 --> 00:08:04.310
generic type here as well.

186
00:08:04.310 --> 00:08:05.910
You are not limited to one type

187
00:08:05.910 --> 00:08:07.600
when you work with classes.

188
00:08:07.600 --> 00:08:09.610
And you can also have methods,

189
00:08:09.610 --> 00:08:13.080
which have their own generic types instead of classes.

190
00:08:13.080 --> 00:08:16.630
So you could introduce new generic types in class methods,

191
00:08:16.630 --> 00:08:18.010
if you have some generic type,

192
00:08:18.010 --> 00:08:19.750
which only is needed in a certain method,

193
00:08:19.750 --> 00:08:21.580
and not in the entire class.

194
00:08:21.580 --> 00:08:23.000
So you are really flexible there.

195
00:08:23.000 --> 00:08:25.570
You can use constraints everywhere

196
00:08:25.570 --> 00:08:28.100
and in general, generic types are there

197
00:08:28.100 --> 00:08:30.240
to make your life easier

198
00:08:30.240 --> 00:08:33.900
and to give you that perfect combination

199
00:08:33.900 --> 00:08:36.010
of full flexibility.

200
00:08:36.010 --> 00:08:39.310
We can use any primitive value you want here

201
00:08:39.310 --> 00:08:40.900
and type safety,

202
00:08:40.900 --> 00:08:42.820
because we know perfectly well

203
00:08:42.820 --> 00:08:44.710
what is stored in this DataStorage

204
00:08:44.710 --> 00:08:46.770
and what is stored in this DataStorage.

205
00:08:46.770 --> 00:08:50.660
So this combination is the awesome thing

206
00:08:50.660 --> 00:08:52.283
generic types give us.

