WEBVTT

00:02.200 --> 00:03.210
Istruttore: Iniziamo

00:03.210 --> 00:05.520
con TypeScript e Node. js e per questo mi trovo

00:05.520 --> 00:08.660
essenzialmente in una nuova cartella vuota, con alcuni

00:08.660 --> 00:10.610
file di configurazione e iniziamo

00:10.610 --> 00:12.140
in modo molto semplice.

00:12.140 --> 00:15.020
Aggiungiamo un'applicazione. ts qui.

00:15.020 --> 00:17.370
Naturalmente, potete chiamarlo come volete.

00:17.370 --> 00:19.180
E lì scriviamo del codice che vogliamo

00:19.180 --> 00:22.220
eseguire con Node. js, ma dove vogliamo

00:22.220 --> 00:24.980
usare TypeScript.

00:24.980 --> 00:26.350
Un semplice script potrebbe essere

00:26.350 --> 00:28.910
quello di registrare qualcosa nella console.

00:28.910 --> 00:30.450
Questo funziona nel browser,

00:30.450 --> 00:33.350
ma anche con Node. js.

00:33.350 --> 00:35.840
Ora assicuratevi di avere Node. js, che sicuramente

00:35.840 --> 00:37.220
dovreste avere se avete

00:37.220 --> 00:38.740
seguito il corso, perché

00:38.740 --> 00:42.077
lo abbiamo usato in NPM con Webpack e con molti altri

00:42.077 --> 00:43.910
strumenti e librerie che abbiamo

00:43.910 --> 00:46.710
già installato con NPM.

00:46.710 --> 00:48.480
Quindi si dovrebbe avere Node. js installato.

00:48.480 --> 00:50.300
E se è stato installato, si può

00:50.300 --> 00:52.130
eseguire questo file se lo si

00:52.130 --> 00:54.110
compila in JavaScript.

00:54.110 --> 00:57.000
Quindi se eseguo l'applicazione tsc. e produco la mia

00:57.000 --> 01:00.360
applicazione. js, quindi posso eseguirlo

01:00.360 --> 01:02.890
con node e stampare qualcosa

01:02.890 --> 01:04.503
qui.

01:06.550 --> 01:08.990
Ora quando cancello l'app. js e provo a eseguire

01:08.990 --> 01:11.890
l'applicazione. ts con il nodo, vedrete

01:11.890 --> 01:13.810
qualcosa di strano.

01:13.810 --> 01:15.070
Anche questo funziona.

01:15.070 --> 01:18.010
Quindi se il nodo è in grado di eseguire TypeScript?

01:18.010 --> 01:20.380
No, non lo è e questo è molto importante.

01:20.380 --> 01:23.210
Non si preoccupa dell'estensione del file, ma tutto

01:23.210 --> 01:25.260
ciò che trova nel file lo tratta come

01:25.260 --> 01:27.420
un normale JavaScript e questo qui non

01:27.420 --> 01:30.180
usa alcuna caratteristica di TypeScript, quindi

01:30.180 --> 01:31.370
funziona.

01:31.370 --> 01:34.340
Le cose cambiano se aggiungiamo contenuti diversi.

01:34.340 --> 01:36.400
Supponiamo invece di avere una

01:36.400 --> 01:37.370
variabile età,

01:37.370 --> 01:40.080
che è un numero e che qui ho impostato a 30,

01:40.080 --> 01:42.250
e poi console. età del log qui.

01:42.250 --> 01:44.840
Questo è ovviamente un codice TypeScript valido.

01:44.840 --> 01:46.790
Ma se proviamo a eseguirlo con il nodo, vedremo

01:46.790 --> 01:48.370
che otterremo un errore.

01:48.370 --> 01:52.450
Quindi node non è in grado di analizzare e compilare TypeScript,

01:52.450 --> 01:54.210
ma tratta ogni file eseguito

01:54.210 --> 01:56.960
come JavaScript.

01:56.960 --> 01:59.030
E se non si utilizza alcuna funzione di

01:59.030 --> 02:01.100
TypeScript nel file, sì, funziona.

02:01.100 --> 02:02.950
Ma se lo fate, non funzionerà.

02:02.950 --> 02:04.920
È sempre necessario compilare prima

02:04.920 --> 02:06.550
il file in JavaScript, per poi

02:06.550 --> 02:08.960
eseguire il file JavaScript, che contiene

02:08.960 --> 02:11.350
solo codice JavaScript valido.

02:11.350 --> 02:13.030
Questo è davvero importante da capire.

02:13.030 --> 02:15.890
Node non esegue TypeScript.

02:15.890 --> 02:20.710
Ora è possibile installare un pacchetto, ts-node, che alla fine fornisce

02:20.710 --> 02:24.230
il compilatore TypeScript, combinato con l'eseguibile

02:24.230 --> 02:27.880
node, in modo da poter installare uno strumento a livello

02:27.880 --> 02:30.320
globale, da usare per eseguire file

02:30.320 --> 02:34.170
TypeScript proprio come questo.

02:34.170 --> 02:35.210
Ma dietro le quinte

02:35.210 --> 02:37.620
si occuperà della compilazione ed eseguirà

02:37.620 --> 02:39.440
il codice di compilazione.

02:39.440 --> 02:42.610
In pratica, combina il passaggio tsc e il passaggio nodo in

02:42.610 --> 02:43.890
un unico passaggio.

02:43.890 --> 02:46.060
Quindi, è un pacchetto che si può usare,

02:46.060 --> 02:49.150
ma anche se può essere utile per lo sviluppo, per la produzione,

02:49.150 --> 02:52.330
per servire davvero i file su qualche server web, su qualche

02:52.330 --> 02:54.850
host web, probabilmente non è l'ideale, perché

02:54.850 --> 02:56.950
avere questo passo di compilazione in

02:56.950 --> 02:59.910
più ogni volta che il codice viene eseguito, aggiunge

02:59.910 --> 03:02.160
semplicemente un po' di overhead in più,

03:02.160 --> 03:06.110
che va bene durante lo sviluppo, ma che probabilmente non si vuole quando

03:06.110 --> 03:07.970
il codice è pronto per la produzione

03:07.970 --> 03:09.890
e si vuole davvero servirlo da qualche

03:09.890 --> 03:12.090
parte.

03:12.090 --> 03:13.260
Pertanto, in questo modulo,

03:13.260 --> 03:15.950
non useremo ts-node e non cercheremo di eseguire

03:15.950 --> 03:18.180
alcun file TypeScript con node.

03:18.180 --> 03:21.570
Vi mostrerò invece una configurazione che possiamo usare per

03:21.570 --> 03:24.520
costruire un'applicazione web o un'API rest di node express,

03:24.520 --> 03:26.150
con solo TypeScript e il compilatore

03:26.150 --> 03:31.343
TypeScript e node vanilla.

03:31.343 --> 03:31.343
js.
