WEBVTT

00:02.210 --> 00:03.450
男教官：现在除了属性,

00:03.450 --> 00:11.660
你还可以添加装饰器到访问器, 我将创建一个新的装饰器函数, 因为它现在将接收自由参数｡

00:11.660 --> 00:16.430
它也会得到一个目标, 如果我们处理的是一个实例访问器,

00:16.430 --> 00:21.290
它也是原型, 如果我们处理的是一个静态访问器, 它会是构造函数,

00:21.290 --> 00:27.290
所以我们不知道我们会是any类型.

00:27.290 --> 00:32.290
然后我们就能知道我们要对付的成员的名字了｡ 

00:32.410 --> 00:35.030
那么最后的存取器的名字｡ 

00:35.030 --> 00:42.030
这里还有属性描述符, 它的类型是属性描述符｡

00:42.030 --> 00:44.600
这是内置在TypeScript中的类型｡ 

00:44.600 --> 00:49.600
在这里, 让我们记录访问器装饰器, 然后我还将在控制台记录目标,

00:50.030 --> 01:01.470
然后可能是新的行, 使它们在输出中更可读, 名称和描述符｡

01:01.720 --> 01:07.350
现在我们把log2加到setter中, 看看得到什么｡

01:07.350 --> 01:10.733
如果我们保存它, 你会看到下面有一个访问器装饰器,

01:10.733 --> 01:14.090
它在这里执行｡

01:14.090 --> 01:19.090
我们又得到了我们的原型, 同样是一个buff的财产｡ 

01:19.320 --> 01:23.570
然后我们得到了访问者的名称, 在本例中是price｡ 

01:23.570 --> 01:24.900
不强调价格,

01:24.900 --> 01:27.890
所以不是它内部处理的属性｡

01:27.890 --> 01:30.570
而实际上是访问器本身的名称｡ 

01:30.570 --> 01:33.630
这里有一个属性描述符, 其中定义了一个setter函数,

01:33.630 --> 01:37.600
例如, 没有getter函数, 因为对于price, 我只有setter函数,

01:37.600 --> 01:41.990
没有getter函数｡

01:41.990 --> 01:45.680
我们看到它不是可枚举的, 但是它是可配置的｡

01:45.680 --> 01:47.810
因此, 我们可以在这里更改此定义,

01:47.810 --> 01:51.000
例如, 我们可以删除它, 等等｡

01:51.000 --> 01:54.520
这些都是存在的, 这就是我们如何将装饰器添加到访问器,

01:54.520 --> 01:58.920
以及我们可以在这个装饰器内部访问什么｡

01:58.920 --> 02:00.910
现在, 除了属性和访问器, 我们还得到了方法,

02:00.910 --> 02:04.350
并且可以向方法添加装饰器｡

02:04.350 --> 02:09.350
这里我将添加Log3, 并将其添加到下面的方法中,

02:09.430 --> 02:11.970
以获得带有文本的价格｡

02:11.970 --> 02:17.323
现在的问题当然是这样一个方法装饰器接收哪些参数？

02:18.180 --> 02:25.520
方法装饰器也接收自由参数, 如果目标是一个实例方法,

02:25.520 --> 02:28.420
它就是对象的原型｡

02:28.420 --> 02:31.150
如果是一个静态方法, 构造函数就和以前一样,

02:31.150 --> 02:39.380
那么这里的方法名, 实际上就是一个字符串或者一个符号｡

02:39.380 --> 02:44.380
还有最后的描述符, 属性描述符｡ 

02:44.490 --> 02:46.140
这些是我们在这里得到的自由参数,

02:46.140 --> 02:49.410
你可以看到这些参数和我们的访问器中的参数是一样的｡

02:49.410 --> 02:51.630
所以我们确实也可以重用它,

02:51.630 --> 02:57.483
但是我将创建一个新的, 这样我就可以在这里打印方法装饰器｡

02:59.020 --> 03:00.840
现在如果我保存了这个, 它就会执行,

03:01.980 --> 03:04.410
你可以看到这里我们的方法装饰器执行了,

03:04.410 --> 03:09.380
然后这里我们得到了原型, 和前面一样的对象｡

03:09.380 --> 03:11.310
我们在这里得到了方法的名称,

03:11.310 --> 03:14.700
我们在这里得到了这个方法的描述符｡

03:14.700 --> 03:17.440
所以基本上和之前的行为是一样的, 只是描述符有点不同,

03:17.440 --> 03:22.550
因为它是方法描述符, 而不是访问器描述符｡

03:22.550 --> 03:25.720
这里有一个值和一个可写属性｡ 

03:25.720 --> 03:28.860
访问器描述符前情提要我们有get和set｡

03:28.860 --> 03:30.910
但这只是java脚本的不同之处,

03:30.910 --> 03:33.088
与TypeScript无关｡

03:33.088 --> 03:40.070
因此, 这里我们有了第三个装饰器函数, 现在我们将它添加到了方法中｡

03:40.070 --> 03:43.390
我们可以添加的最后一个装饰器是一个参数｡ 

03:43.390 --> 03:45.260
现在就开始吧｡ 

03:45.260 --> 03:47.550
为此, 我将在这里再创建一个函数,

03:47.550 --> 03:51.269
Log4, 我想把Log4加到我在这里得到的这个参数上,

03:51.269 --> 03:57.130
tax, 当然你可以把它加到每个参数上｡

03:57.130 --> 04:02.990
您不必这样做, 但可以将它们独立地添加到要添加装饰器的任何参数中｡

04:02.990 --> 04:06.419
现在, 参数装饰器得到什么作为参数？

04:06.419 --> 04:10.790
好吧, 它得到的目标和以前一样｡ 

04:10.790 --> 04:12.520
我们得到的下一个参数是名称,

04:12.520 --> 04:14.100
而不是参数的名称,

04:14.100 --> 04:17.310
而是使用该参数的方法的名称｡

04:17.310 --> 04:20.530
所以基本上, 和方法装饰器中的一样｡ 

04:20.530 --> 04:22.170
但最后一个论点是不同的｡ 

04:22.170 --> 04:24.250
现在这不是属性描述符,

04:24.250 --> 04:30.100
而是这个参数的位置, 也就是参数的编号｡

04:30.100 --> 04:32.763
例如, 这将是第一个参数｡ 

04:35.310 --> 04:38.670
现在, 让我们再次将其复制到这里,

04:38.670 --> 04:43.550
并将其全部放入Log4参数装饰器中｡

04:43.550 --> 04:47.170
让我们在这里输出位置, 这样我们就可以看到里面有什么｡

04:47.170 --> 04:50.960
如果我们现在保存它, 我们会在上面看到我们的参数装饰器, 而不是最后一个输出,

04:50.960 --> 04:57.180
因为执行顺序不同, 但是我们在这里看到我们的参数装饰器, 然后在这里看到｡

04:57.180 --> 04:59.530
我们和以前一样得到了原型｡ 

04:59.530 --> 05:02.190
我们得到了使用这个参数的方法的名字,

05:02.190 --> 05:09.070
然后是这个参数的索引, 从零开始, 所以第一个参数的数字是零, 索引是零,

05:09.070 --> 05:12.740
这就是我们的参数装饰器｡

05:12.740 --> 05:16.370
这些都是我们可以添加装饰器和TypeScript的地方,

05:16.370 --> 05:18.570
我们可以用它们做各种事情｡

05:18.570 --> 05:21.660
现在, 我将在本模块中向您展示几个示例,

05:21.660 --> 05:28.380
我还将向您展示大量使用装饰器的库或框架｡

05:28.380 --> 05:30.550
我将向你们展示他们是如何使用装饰器的,

05:30.550 --> 05:34.583
让你们了解装饰器的力量｡
