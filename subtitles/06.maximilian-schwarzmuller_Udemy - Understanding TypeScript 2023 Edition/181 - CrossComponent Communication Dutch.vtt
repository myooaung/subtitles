WEBVTT

00:02.230 --> 00:05.130
Docent: Dus nu willen we onze ingevoerde tekst van de

00:05.130 --> 00:07.960
NewTodo component naar de app component brengen.

00:07.960 --> 00:09.690
Waarom naar de app-component?

00:09.690 --> 00:11.160
Want dat is onze component

00:11.160 --> 00:13.610
die een directe link heeft met zowel de

00:13.610 --> 00:16.340
NewTodo als de TodoList component.

00:16.340 --> 00:19.320
Dus, hier wil ik een nieuwe functie toevoegen en

00:20.800 --> 00:24.560
ik noem het todoAddHandler, de naam is aan jou, ik gebruik gewoon

00:24.560 --> 00:25.393
graag die conventie

00:25.393 --> 00:27.990
van een handler aan het einde als het een functie

00:27.990 --> 00:31.390
is die reageert op een gebeurtenis.

00:31.390 --> 00:34.330
En hier verwacht ik de tekst te krijgen, als een

00:34.330 --> 00:37.970
string, het is onze functie dus we kunnen dit verwachten.

00:37.970 --> 00:40.720
En dan willen we dit toevoegen als een todo hier.

00:40.720 --> 00:42.270
Nu, natuurlijk, omdat je React kent weet

00:42.270 --> 00:45.230
je dat het bijwerken van deze array alleen niet zal werken, dit zal deze

00:45.230 --> 00:47.440
component niet opnieuw weergeven, dus we zullen wat

00:47.440 --> 00:49.360
state management moeten gebruiken om dit te laten

00:49.360 --> 00:51.900
werken, voordat we dat doen echter, laten we ervoor zorgen dat

00:51.900 --> 00:53.040
we in ieder geval de waarde naar

00:53.040 --> 00:54.750
deze functie krijgen.

00:54.750 --> 00:57.460
Dus laten we de tekst hier loggen en dan kunnen we ons als

00:57.460 --> 01:00.133
tweede stap richten op het toestandsbeheer ervan.

01:01.000 --> 01:03.020
Om dat hier te krijgen moeten we ervoor

01:03.020 --> 01:05.850
zorgen dat deze todoAddHandler-functie kan worden

01:05.850 --> 01:09.050
aangeroepen vanuit de NewTodo component, want dat is

01:09.050 --> 01:12.113
waar we de todo uiteindelijk toevoegen.

01:13.090 --> 01:15.370
Hoe maken we deze functie hier oproepbaar

01:15.370 --> 01:17.860
vanuit deze component?

01:17.860 --> 01:22.300
We geven een pointer naar deze functie door aan die component.

01:22.300 --> 01:25.640
Dus, hier kunnen we een eigenschap toevoegen, onAddTodo, en je

01:25.640 --> 01:27.280
kunt het noemen hoe je wilt, ik noem

01:27.280 --> 01:28.560
het gewoon zo omdat dit in

01:28.560 --> 01:32.030
principe zal gebeuren bij een gebeurtenis, een gebeurtenis die

01:32.030 --> 01:34.600
wij natuurlijk controleren, maar toch.

01:34.600 --> 01:38.030
En hier wil ik todoAddHandler doorsturen dus ik geef een pointer

01:38.030 --> 01:40.600
door naar deze functie, ik voer hem hier niet

01:40.600 --> 01:42.120
uit, ik geef gewoon een pointer

01:42.120 --> 01:44.620
door naar deze functie, in onAddTodo zodat

01:44.620 --> 01:49.240
we in plaats van NewTodo op props, die we hier kunnen krijgen, dit kunnen aanroepen,

01:49.240 --> 01:56.220
zodat we props kunnen aanroepen.

01:56.220 --> 01:56.220
onAddTodo

01:56.220 --> 01:59.640
hier en de ingevoerde tekst doorsturen, dat is het idee, Maar

01:59.640 --> 02:01.730
TypeScript vindt dit natuurlijk niet

02:01.730 --> 02:03.440
leuk omdat het niet weet dat er een

02:03.440 --> 02:06.180
onAddTodo prop komt op onze props hier en hoe zo'n

02:06.180 --> 02:08.240
prop eruit zou zien.

02:08.240 --> 02:11.670
Dus, net als in TodoList, moeten we een interface of gewoon

02:11.670 --> 02:14.540
een type-definitie van onze props opzetten.

02:14.540 --> 02:18.200
Dus, laten we naar NewTodo gaan en misschien, nogmaals, een interface toevoegen,

02:18.200 --> 02:20.820
je zou ook een type cursus kunnen toevoegen en ik zal

02:20.820 --> 02:23.060
dat hier doen om dingen te mixen.

02:23.060 --> 02:25.380
Ik zou normaliter altijd voor een interface gaan,

02:25.380 --> 02:27.660
maar het gebruik van een type is ook prima.

02:27.660 --> 02:30.493
Dus, om hier een type te gebruiken kunnen we het NewTodoProps

02:31.357 --> 02:33.820
noemen en het type is een objecttype waar ik een

02:33.820 --> 02:36.830
onAddTodo prop wil hebben en dit, op zijn beurt, zal een

02:36.830 --> 02:39.120
functietype zijn, het zal verwijzen naar

02:39.120 --> 02:40.753
een functie.

02:41.720 --> 02:44.290
U zult functietypes als deze definiëren, zoals u hebt

02:44.290 --> 02:46.760
geleerd, het zal een functie zijn die niets teruggeeft,

02:46.760 --> 02:48.850
maar die één omtrek verwacht en dat zal de tekst

02:48.850 --> 02:51.410
zijn die de gebruiker heeft ingevoerd.

02:51.410 --> 02:54.023
Dus, de Todo tekst die van het type string is,

02:55.120 --> 02:57.123
dat is wat deze functie verwacht.

02:58.920 --> 03:01.770
Laten we dit nu instellen op dit generieke type hier en

03:01.770 --> 03:03.103
wijzen op NewTodoProps.

03:04.510 --> 03:08.620
En daarmee kunnen we onAddTodo aanroepen en een string doorgeven.

03:08.620 --> 03:11.470
En als het hier bijvoorbeeld een getal probeert in te voeren,

03:11.470 --> 03:14.730
krijgen we natuurlijk een foutmelding, omdat we duidelijk hebben

03:14.730 --> 03:17.590
bepaald dat het argument een string moet zijn.

03:17.590 --> 03:18.733
Dus, laten we dit terugdraaien.

03:20.550 --> 03:24.630
Als we daarmee weer een nieuw doel invoeren, afmaken in een maand,

03:24.630 --> 03:27.150
zien we hier weer een log, maar nu komt

03:27.150 --> 03:28.690
het uit de app-component,

03:28.690 --> 03:30.750
zoals je duidelijk kunt zien, omdat

03:30.750 --> 03:34.170
we dit log hier hebben toegevoegd.

03:34.170 --> 03:37.380
Dus deze communicatie tussen de NewTodo component

03:37.380 --> 03:39.480
en de app component hier werkt.

03:39.480 --> 03:42.750
En daarmee implementeren we hier wat state management en,

03:42.750 --> 03:44.160
nogmaals, dit is ook iets

03:44.160 --> 03:46.850
wat je eerst zelf kunt proberen als je dat wilt,

03:46.850 --> 03:49.670
om ervoor te zorgen dat we todo's renderen in state,

03:49.670 --> 03:52.170
zodat we bij elke update van onze todo's ook deze

03:52.170 --> 03:54.460
component opnieuw renderen.

03:54.460 --> 03:56.263
Laten we dat in de volgende lezing doen.
