WEBVTT

00:02.200 --> 00:04.920
Speaker: Ecco quindi classi, proprietà

00:04.920 --> 00:07.510
ed ereditarietà con Typescript.

00:07.510 --> 00:08.343
E come ho detto,

00:08.343 --> 00:10.260
queste caratteristiche sono generalmente

00:10.260 --> 00:12.490
supportate in Javascript, nel JavaScript

00:12.490 --> 00:14.230
moderno, naturalmente con l'eccezione

00:14.230 --> 00:16.940
degli assegnamenti di tipo e anche con l'eccezione

00:16.940 --> 00:21.060
di protected private public.

00:21.060 --> 00:24.770
Queste parole chiave sono disponibili solo in Typescript.

00:24.770 --> 00:28.560
Ma non è tutto ciò che si può fare con le classi.

00:28.560 --> 00:29.940
Ogni volta che si ha bisogno

00:29.940 --> 00:32.840
di una caratteristica, che si ha anche in JavaScript

00:32.840 --> 00:35.670
vanilla e che è supportata anche in Typescript,

00:35.670 --> 00:38.610
sono i getter e i setter.

00:38.610 --> 00:42.050
Vediamo ora che, ad esempio, nel reparto

00:42.050 --> 00:43.390
contabilità abbiamo

00:43.390 --> 00:47.450
un ultimo rapporto, proprietà.

00:47.450 --> 00:51.630
Che è una proprietà privata ed è di tipo stringa, quindi abbiamo

00:51.630 --> 00:53.310
questa proprietà.

00:53.310 --> 00:56.480
E poi inizializziamo questo, per essere

00:56.480 --> 01:01.480
l'argomento degli ordini delle proprietà dei report che riceviamo

01:02.270 --> 01:04.880
qui e sono il primo valore.

01:04.880 --> 01:07.877
Il che, ovviamente, è praticamente indefinito se

01:07.877 --> 01:09.890
si passa un array di report vuoto.

01:09.890 --> 01:14.680
Ora, quando aggiungiamo un rapporto, voglio impostare quest'ultimo

01:14.680 --> 01:17.010
rapporto come testo.

01:17.010 --> 01:20.440
Che è quello che aggiungiamo al nostro array di report.

01:20.440 --> 01:23.890
L'ultima relazione è privata, quindi possiamo accedervi

01:23.890 --> 01:26.250
dall'interno di questo metodo, ma non saremo

01:26.250 --> 01:28.590
in grado di accedervi dall'esterno con

01:28.590 --> 01:30.240
la notazione a punti.

01:30.240 --> 01:33.440
Ora possiamo aggiungere un getter, per renderlo ancora accessibile.

01:33.440 --> 01:36.020
Un getter è fondamentalmente una proprietà

01:36.020 --> 01:38.670
in cui si esegue una funzione o un metodo quando

01:38.670 --> 01:40.910
si recupera un valore e che consente allo

01:40.910 --> 01:42.380
sviluppatore di aggiungere

01:42.380 --> 01:44.460
una logica più complessa.

01:44.460 --> 01:47.560
Qui si crea un getter usando la parola chiave get

01:47.560 --> 01:49.250
e poi un nome a scelta.

01:49.250 --> 01:51.810
In genere è strettamente correlato alla proprietà

01:51.810 --> 01:54.180
di cui si vuole controllare l'accesso.

01:54.180 --> 01:58.180
Ad esempio, potremmo nominare il rapporto più recente.

01:58.180 --> 01:59.340
Qualsiasi cosa del genere.

01:59.340 --> 02:01.630
Ora è importante che questo sia definito come un metodo.

02:01.630 --> 02:04.260
Quindi si aggiungono le parentesi e le parentesi graffe.

02:04.260 --> 02:07.250
E ora qui, bisogna restituire qualcosa,

02:07.250 --> 02:11.990
è importante che un metodo getter restituisca qualcosa.

02:11.990 --> 02:14.610
Si può quindi restituire l'ultimo rapporto

02:14.610 --> 02:16.660
e poi incapsularlo, perché ora

02:16.660 --> 02:19.570
è accessibile pubblicamente.

02:19.570 --> 02:22.720
Ma spesso si vuole avere una logica più complessa.

02:22.720 --> 02:26.240
Quindi potremmo verificare se abbiamo un valore qui, quindi

02:26.240 --> 02:27.600
se questo è vero.

02:27.600 --> 02:28.960
Se non è undefined, allora

02:28.960 --> 02:31.520
vogliamo restituire l'ultimo report, altrimenti

02:31.520 --> 02:34.440
potremmo voler restituire qualche logica diversa,

02:34.440 --> 02:37.850
per esempio diciamo che altrimenti lanciamo un messaggio

02:37.850 --> 02:42.650
di errore con throw new error, no reports found.

02:42.650 --> 02:46.650
Quindi ora abbiamo aggiunto altra logica, più complessa, a questa proprietà

02:46.650 --> 02:49.200
e quando vogliamo recuperarla, non possiamo recuperare

02:49.200 --> 02:51.500
direttamente questa proprietà attraverso

02:51.500 --> 02:55.290
la notazione dei punti, ma possiamo usarla come proprietà per eseguire

02:55.290 --> 02:57.240
questa logica.

02:57.240 --> 02:58.810
Come funzionerebbe?

02:58.810 --> 03:02.170
Laggiù, dove creo il mio reparto di contabilità.

03:02.170 --> 03:08.693
Prima di aggiungere il mio rapporto, se provo a fare il log della console, la contabilità.

03:08.693 --> 03:08.693
rapporto

03:09.630 --> 03:11.010
più recente e ora importante.

03:11.010 --> 03:13.902
Ops, contabilità. rapporto più recente.

03:13.902 --> 03:16.890
E ora è importante accedere a questa proprietà.

03:16.890 --> 03:18.690
Quindi nessuna parentesi.

03:18.690 --> 03:20.570
Non si esegue come metodo.

03:20.570 --> 03:23.030
Vi si accede come a una normale proprietà

03:23.030 --> 03:24.460
e, dietro le quinte,

03:24.460 --> 03:27.890
viene eseguito questo metodo.

03:27.890 --> 03:31.670
Quindi, se lo provassimo ora, prima di aggiungere il nostro report, vedremmo

03:31.670 --> 03:33.940
che questo viene ricostruito senza errori,

03:33.940 --> 03:35.440
ricompilato senza errori,

03:35.440 --> 03:38.550
ma ovviamente qui viene lanciato un errore, il nostro errore

03:38.550 --> 03:40.820
personalizzato "no report found", perché

03:40.820 --> 03:42.820
non è stato ancora aggiunto alcun report,

03:42.820 --> 03:45.370
e poiché si usa questo come getter, si accede a questo

03:45.370 --> 03:48.310
metodo e lo si esegue.

03:48.310 --> 03:51.560
Se non abbiamo alcun rapporto, non arriviamo a questo controllo

03:51.560 --> 03:52.830
IF o a questa istruzione

03:52.830 --> 03:55.693
IF e quindi entra in gioco questa riga.

03:56.590 --> 04:00.250
In alternativa, se spostassimo questo punto in basso,

04:00.250 --> 04:02.210
dopo aver aggiunto un report,

04:02.210 --> 04:04.100
potremmo salvarlo e non riceveremmo

04:04.100 --> 04:05.730
più un errore, bensì l'output

04:05.730 --> 04:08.400
di quest'ultimo report.

04:08.400 --> 04:09.750
Quindi questo è un punto di arrivo.

04:09.750 --> 04:12.190
Si può anche aggiungere un setter.

04:12.190 --> 04:14.550
L'aggiunta di un setter avviene quasi allo stesso modo.

04:14.550 --> 04:16.290
Si usa la parola chiave set

04:16.290 --> 04:18.630
e poi di nuovo un nome a scelta.

04:18.630 --> 04:21.940
tipicamente un nome relativo alla proprietà che deve essere

04:21.940 --> 04:22.870
impostata.

04:22.870 --> 04:25.570
Quindi riutilizzerò il rapporto più recente.

04:25.570 --> 04:27.840
In modo da poterlo utilizzare sia per leggere un

04:27.840 --> 04:29.150
valore che per impostarlo.

04:29.150 --> 04:30.090
E poi ancora, lo avete

04:30.090 --> 04:31.850
definito come un metodo.

04:31.850 --> 04:34.850
Ma ora è necessario discutere di questo.

04:34.850 --> 04:38.630
Il valore che l'utente avrebbe inserito.

04:38.630 --> 04:40.940
Qui dovrebbe esserci un valore stringa

04:40.940 --> 04:44.110
e ora qui si può eseguire qualsiasi logica si voglia

04:44.110 --> 04:46.160
memorizzare.

04:46.160 --> 04:48.530
Ora, dato che stiamo passando un valore

04:48.530 --> 04:51.890
per il report più recente, alla fine voglio eseguire

04:51.890 --> 04:53.080
il report add.

04:53.080 --> 04:55.370
Quindi, un setter potrebbe essere semplicemente

04:55.370 --> 04:57.140
un'alternativa al metodo add report.

04:57.140 --> 05:01.280
Qui possiamo accedere a questo rapporto di aggiunta.

05:01.280 --> 05:03.760
Questo è necessario perché siamo all'interno della classe.

05:03.760 --> 05:07.280
Ci riferiamo alla classe e poi al metodo di questa classe.

05:07.280 --> 05:10.380
E ora possiamo inoltrare il valore qui.

05:10.380 --> 05:12.310
Ora potremmo aggiungere una

05:12.310 --> 05:16.130
logica più complessa e verificare se il valore non è definito,

05:16.130 --> 05:19.810
se è falso, e quindi restituire o lanciare un nuovo errore,

05:19.810 --> 05:24.020
dicendo di inserire un valore valido.

05:24.020 --> 05:26.140
È una cosa che potremmo fare anche noi.

05:26.140 --> 05:29.010
E ora stiamo usando un setter anche qui.

05:29.010 --> 05:31.330
Con l'aggiunta di questo elemento, possiamo testarlo.

05:31.330 --> 05:33.193
Lì sotto, potrei aggiungere il rapporto

05:35.400 --> 05:36.570
più recente.

05:36.570 --> 05:38.780
Potrei accedere a questo metodo di contabilità

05:38.780 --> 05:40.770
e, come in questo caso, leggerlo, ma ora,

05:40.770 --> 05:42.300
aggiungendo un segno di uguale,

05:42.300 --> 05:44.520
stiamo cercando di impostare un valore e questo

05:44.520 --> 05:47.150
attiverà il metodo setter.

05:47.150 --> 05:50.090
Anche in questo caso, non lo eseguiamo come un metodo, ma vi accediamo

05:50.090 --> 05:52.383
semplicemente come a una proprietà.

05:53.220 --> 05:56.030
Ora, se inserisco una stringa vuota, tecnicamente

05:56.030 --> 05:58.770
inseriamo una stringa, ma una stringa vuota

05:58.770 --> 06:02.760
viene trattata come falsa, vedere qui.

06:02.760 --> 06:04.950
Pertanto, si dovrebbe ottenere un errore.

06:04.950 --> 06:07.450
Quindi, se salvo questa riga di codice, se salvo

06:07.450 --> 06:09.850
il codice con questa riga di codice aggiunta,

06:11.120 --> 06:14.530
otteniamo questo errore Please pass in a valid value.

06:14.530 --> 06:17.010
Se però inserisco un valore

06:17.010 --> 06:22.010
valido, ad esempio il rapporto di fine anno, e

06:22.250 --> 06:23.900
lo salvo.

06:23.900 --> 06:27.210
Ora vedrete che tutto funziona e che il rapporto di fine anno

06:27.210 --> 06:29.620
fa parte dell'elenco dei rapporti.

06:29.620 --> 06:31.150
Si tratta quindi di getter e setter,

06:31.150 --> 06:33.620
che possono essere ottimi per incapsulare la logica e

06:33.620 --> 06:35.390
per aggiungere logica aggiuntiva, che

06:35.390 --> 06:38.050
dovrebbe essere eseguita quando si cerca di leggere una proprietà

06:38.050 --> 06:40.243
o quando si cerca di impostarla.
