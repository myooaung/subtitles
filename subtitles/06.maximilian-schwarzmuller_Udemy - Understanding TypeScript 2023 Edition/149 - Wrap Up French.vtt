WEBVTT

00:02.350 --> 00:04.720
- : Et c'est tout pour les modules.

00:04.720 --> 00:08.850
L'utilisation de modules est une fonctionnalité très utile et importante,

00:08.850 --> 00:11.130
car elle vous permet d'écrire un code plus

00:11.130 --> 00:14.550
facile à maintenir et à gérer. Le fait de tout regrouper dans un seul

00:14.550 --> 00:16.360
fichier est un véritable gâchis et n'est

00:16.360 --> 00:19.360
vraiment pas une option pour tout sauf les petits projets.

00:19.360 --> 00:22.350
L'utilisation d'espaces de noms ou de modules ES constitue

00:22.350 --> 00:24.710
une bien meilleure alternative.

00:24.710 --> 00:27.620
En effet, il s'assure que chaque fichier est

00:27.620 --> 00:30.780
relativement petit et reste donc gérable.

00:30.780 --> 00:33.470
Et pourtant, vous vous retrouvez avec cette

00:33.470 --> 00:36.690
grande application que vous voulez avoir à la fin.

00:36.690 --> 00:38.580
Maintenant, lorsqu'il s'agit de

00:38.580 --> 00:42.883
ces deux approches, Namespaces et ES modules, la recommandation claire

00:42.883 --> 00:46.520
est ES modules, parce que vous obtenez cette sécurité de type supplémentaire,

00:46.520 --> 00:48.910
et vous assurez que chaque fichier, doit

00:48.910 --> 00:52.210
clairement spécifier ce qu'il veut.

00:52.210 --> 00:54.270
Avec les espaces de noms, il suffisait qu'un

00:54.270 --> 00:56.280
fichier importe quelque chose, dont un

00:56.280 --> 00:58.350
autre fichier a également besoin.

00:58.350 --> 00:59.970
Le revers de la médaille est que si le

00:59.970 --> 01:02.230
fichier qui a importé la chose est supprimé, l'autre

01:02.230 --> 01:05.640
fichier se brise également, sans que vous vous en rendiez compte.

01:05.640 --> 01:08.774
Du moins, sans que vous vous en rendiez compte avant d'exécuter le code.

01:08.774 --> 01:11.340
Par conséquent, utilisez les modules ES.

01:11.340 --> 01:14.250
Utilisez les espaces de noms dans les petits projets, ou

01:14.250 --> 01:18.100
si pour une raison quelconque vous ne pouvez pas utiliser les modules ES, et

01:18.100 --> 01:19.970
si vous ne pouvez pas utiliser un autre

01:19.970 --> 01:24.290
bundler, qui traduirait ces modules. Au code non modulaire, qui fonctionne dans tous

01:24.290 --> 01:26.360
les cas et dans tous les navigateurs.

01:26.360 --> 01:30.070
Mais à part ça, j'utilise vraiment des modules, des modules ES.

01:30.070 --> 01:31.748
Et ce que je viens de dire est important.

01:31.748 --> 01:34.828
Ces modules, tels que nous les utilisons actuellement, ne

01:34.828 --> 01:37.620
fonctionnent que dans les navigateurs modernes.

01:37.620 --> 01:39.670
Parce que nous comptons sur le navigateur, pour

01:39.670 --> 01:42.640
importer tous ces fichiers. N'est-ce pas ?

01:42.640 --> 01:44.675
Maintenant, bien sûr, nous voulons construire

01:44.675 --> 01:48.940
des applications avec Typescript, qui fonctionnent également dans tous les navigateurs.

01:48.940 --> 01:52.090
Internet Explorer 9, par exemple.

01:52.090 --> 01:54.130
Là, cela ne serait pas soutenu.

01:54.130 --> 01:55.730
Cette syntaxe n'est pas prise en charge.

01:55.730 --> 01:57.410
Donc, l'application ne fonctionnerait pas là.

01:57.410 --> 01:59.160
Il se peut que nous utilisions également d'autres fonctionnalités

01:59.160 --> 02:01.280
qui ne sont pas prises en charge par ces navigateurs, mais principalement

02:01.280 --> 02:03.840
celle-ci n'est pas prise en charge par tous les navigateurs.

02:03.840 --> 02:06.250
Donc, pour que cela fonctionne dans tous les navigateurs, nous pouvons

02:06.250 --> 02:09.283
utiliser un outil de regroupement. Nous pouvons utiliser Webpack par exemple.

02:09.283 --> 02:12.431
Pour regrouper tout ça dans un seul fichier JavaScript.

02:12.431 --> 02:15.810
Ainsi, pendant le développement, nous avons cette expérience de typage

02:15.810 --> 02:19.060
fort et de fichiers multiples, mais lorsque nous expédions notre code,

02:19.060 --> 02:21.310
nous n'avons en fait qu'un seul fichier.

02:21.310 --> 02:23.600
Et maintenant, l'avantage d'envoyer un seul fichier

02:23.600 --> 02:25.676
au lieu de tous ces fichiers que nous avons ici,

02:25.676 --> 02:28.177
c'est que nous nous assurons également que le navigateur

02:28.177 --> 02:31.181
n'a pas à télécharger autant de fichiers.

02:31.181 --> 02:33.630
Parce que chaque fichier qui doit être téléchargé, est

02:33.630 --> 02:37.010
un aller-retour supplémentaire. Dans l'onglet réseau des outils de développement,

02:37.010 --> 02:38.510
vous pouvez le voir.

02:38.510 --> 02:40.650
La zone où vous voyez ce graphique en cascade,

02:40.650 --> 02:42.230
et vous voyez cette petite boîte

02:42.230 --> 02:44.520
blanche au début de chaque bloc.

02:44.520 --> 02:46.380
Il s'agit essentiellement du temps nécessaire

02:46.380 --> 02:48.506
à la mise en place de la requête HDP.

02:48.506 --> 02:51.807
Ainsi, même si les fichiers que nous téléchargeons sont très petits comme

02:51.807 --> 02:54.700
vous pouvez le constater, cela prend quand même un certain temps

02:54.700 --> 02:56.900
à cause de toute la configuration supplémentaire

02:56.900 --> 02:59.100
redondante, pour chaque requête HDP.

02:59.100 --> 03:02.330
Il est donc préférable de faire moins de demandes, quel

03:02.330 --> 03:04.640
que soit le support du navigateur.

03:04.640 --> 03:08.370
Pour ces deux raisons, la prise en charge par les navigateurs et la réduction des demandes,

03:08.370 --> 03:11.000
nous allons nous pencher sur le regroupement, avec Webpack, dans

03:11.000 --> 03:12.453
la prochaine section du cours.
