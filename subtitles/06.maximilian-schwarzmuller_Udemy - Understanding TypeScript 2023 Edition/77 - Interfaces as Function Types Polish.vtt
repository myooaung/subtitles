WEBVTT

00:02.220 --> 00:03.053
Instruktor: Teraz

00:03.053 --> 00:04.920
wspomniałem, że interfejsy służą

00:04.920 --> 00:07.114
do definiowania struktury obiektu.

00:07.114 --> 00:09.690
Teraz interfejsy mogą być również używane do

00:09.690 --> 00:11.750
definiowania struktury funkcji.

00:11.750 --> 00:14.330
Więc w zasadzie jako zamiennik dla typów funkcji, o których

00:14.330 --> 00:15.578
już się dowiedziałeś.

00:15.578 --> 00:17.890
Tak dla szybkiego odświeżenia, możemy określić

00:17.890 --> 00:20.090
typ funkcji, na przykład za pomocą typu niestandardowego

00:20.090 --> 00:23.305
za pomocą słowa kluczowego type.

00:23.305 --> 00:26.380
AddFn dla funkcji add, która następnie mogłaby

00:26.380 --> 00:29.350
trzymać definicję funkcji, jak to.

00:29.350 --> 00:30.830
Powinien on zwracać liczbę

00:30.830 --> 00:32.370
i powinien przyjmować dwa argumenty,

00:32.370 --> 00:35.970
gdzie każdy argument również jest typu liczba.

00:35.970 --> 00:39.310
Teraz możemy stworzyć nową funkcję add tutaj, która

00:39.310 --> 00:42.860
jest typu AddFn i kiedy nie inicjalizujemy jej, ale

00:42.860 --> 00:45.040
przypisujemy naszą funkcję później,

00:45.040 --> 00:46.580
to oczywiście musimy się

00:46.580 --> 00:51.300
upewnić, że ta funkcja przyjmuje dwa argumenty, które są typu number

00:51.300 --> 00:55.170
i że tam również zwracamy liczbę.

00:55.170 --> 00:56.360
To jest coś, co możemy zrobić.

00:56.360 --> 00:57.843
To jest to, czego już się nauczyłeś.

00:57.843 --> 01:01.760
Teraz możesz również użyć interfejsu jako alternatywy dla tego niestandardowego

01:01.760 --> 01:03.077
typu.

01:03.077 --> 01:06.860
Interfejsy są po to, aby definiować strukturę obiektu, tak

01:06.860 --> 01:08.240
jak cię uczyłem, ale w

01:08.240 --> 01:10.220
końcu funkcje są tylko obiektami

01:10.220 --> 01:12.720
i dlatego jest to mały wyjątek.

01:12.720 --> 01:15.350
Możesz tworzyć typy funkcji za pomocą interfejsów.

01:15.350 --> 01:18.930
W tym celu tworzysz interfejs, nazwij go AddFn, aby nadal

01:18.930 --> 01:20.930
zachować tę nazwę tutaj.

01:20.930 --> 01:23.720
I teraz tam, definiujesz bit funkcji,

01:23.720 --> 01:28.300
po prostu dodając nawiasy z argumentami, a: liczba, B:liczba,

01:28.300 --> 01:31.150
na przykład, a następnie dwukropek,

01:31.150 --> 01:33.980
nie strzałka, ale dwukropek tutaj

01:33.980 --> 01:36.810
z typem zwrotu.

01:36.810 --> 01:39.780
Więc w końcu, tak jak byś zdefiniował metodę,

01:39.780 --> 01:41.630
tak jak robimy to tutaj z greet,

01:41.630 --> 01:45.710
z wyjątkiem tego, że teraz nie dodajemy nazwy metody.

01:45.710 --> 01:47.880
Mamy więc anonimową funkcję,

01:47.880 --> 01:49.300
jeśli chcesz ją tak

01:49.300 --> 01:52.000
nazwać w interfejsie AddFn, a TypeScript

01:52.000 --> 01:55.250
rozumie tę specjalną składnię tej anonimowej

01:55.250 --> 01:57.800
funkcji w twoim interfejsie i rozumie,

01:57.800 --> 02:00.410
że chcesz użyć tego interfejsu jako

02:00.410 --> 02:02.070
typu funkcji i tak powinna

02:02.070 --> 02:05.360
wyglądać twoja funkcja.

02:05.360 --> 02:07.650
Więc teraz możemy użyć AddFn tutaj i rzeczywiście,

02:07.650 --> 02:11.640
jeśli próbowałbym przyjąć ciąg tutaj, otrzymalibyśmy błąd, ponieważ

02:11.640 --> 02:13.786
to nie jest przypisywalne, musimy

02:13.786 --> 02:17.060
mieć liczbę zamiast ciągu.

02:17.060 --> 02:19.670
Jest to więc po prostu alternatywa dla tego niestandardowego typu.

02:19.670 --> 02:23.010
Oczywiście tutaj bym się kłócił, że używanie typu niestandardowego

02:23.010 --> 02:25.020
jest chyba trochę bardziej powszechne, jest

02:25.020 --> 02:26.470
też trochę krótsze, ale jest to

02:26.470 --> 02:28.340
fajna alternatywna składnia, o której

02:28.340 --> 02:30.870
warto wiedzieć, zwłaszcza jeśli napotkasz to w jakimś

02:30.870 --> 02:34.030
projekcie i skądinąd zgubiłeś się, co to znaczy, ta dziwna anonimowa

02:34.030 --> 02:35.265
metoda.

02:35.265 --> 02:38.993
Cóż, to w końcu tylko niestandardowy typ funkcji.
