WEBVTT

1
00:00:02.160 --> 00:00:04.860
<v Presenter>So now that we saw another nice example</v>

2
00:00:04.860 --> 00:00:06.440
for how we can work with decorators,

3
00:00:06.440 --> 00:00:09.040
there's one last example which I wanna dive into.

4
00:00:09.040 --> 00:00:11.997
And that is decorators for validation.

5
00:00:11.997 --> 00:00:14.560
For that, at the bottom of the file,

6
00:00:14.560 --> 00:00:17.733
I will add yet another new class here.

7
00:00:18.780 --> 00:00:20.530
That could be a course.

8
00:00:20.530 --> 00:00:23.903
Now a course should have a title, which is a string.

9
00:00:25.430 --> 00:00:27.483
And maybe a price, which is a number.

10
00:00:29.730 --> 00:00:32.640
Then here we have a constructor where

11
00:00:32.640 --> 00:00:34.440
we get both values here

12
00:00:35.550 --> 00:00:37.780
and I'm deliberately not using the shortcut here,

13
00:00:37.780 --> 00:00:40.953
so that I can easily add property decorators.

14
00:00:42.690 --> 00:00:44.560
Then, I set this title equal to t,

15
00:00:44.560 --> 00:00:46.653
and this price equal to p.

16
00:00:47.990 --> 00:00:50.530
Now, of course now when we want to instantiate this course,

17
00:00:50.530 --> 00:00:53.610
we have to pass in a valid title and a valid price.

18
00:00:53.610 --> 00:00:56.730
But one common scenario you might encounter

19
00:00:56.730 --> 00:00:59.630
in some applications is that you fetch data,

20
00:00:59.630 --> 00:01:03.340
let's say from a web resource and you get data where

21
00:01:03.340 --> 00:01:05.854
you guess you have a couple of courses let's say,

22
00:01:05.854 --> 00:01:08.110
but you don't know for sure.

23
00:01:08.110 --> 00:01:12.839
Or, another possible scenario, you let users enter the data

24
00:01:12.839 --> 00:01:15.490
and you simply want to assign that data

25
00:01:15.490 --> 00:01:18.370
and trade a new course with the user-entered data

26
00:01:18.370 --> 00:01:21.280
and you assume it's right, but you are not guaranteed

27
00:01:21.280 --> 00:01:22.500
that it's right and therefore you want

28
00:01:22.500 --> 00:01:24.210
to validate the input.

29
00:01:24.210 --> 00:01:26.380
That's the scenario I wanna fake here.

30
00:01:26.380 --> 00:01:29.940
Lets say in our index html file, we get a simple form here

31
00:01:30.894 --> 00:01:32.840
and I'll not style it, so it will now be that beautiful,

32
00:01:32.840 --> 00:01:36.074
but we have a simple form here with the input of type text

33
00:01:36.074 --> 00:01:41.074
and a placeholder of title, woops, course, title

34
00:01:41.390 --> 00:01:44.620
and an id of let's say title and below that

35
00:01:44.620 --> 00:01:46.870
we have a number input where the type is all the text,

36
00:01:46.870 --> 00:01:50.605
but it's the course price and the id is price.

37
00:01:50.605 --> 00:01:55.030
And then we have our button where we submit this.

38
00:01:55.030 --> 00:02:00.030
So the button is of type submit.

39
00:02:00.040 --> 00:02:02.780
So a very simple form and as I said it's not that beautiful

40
00:02:02.780 --> 00:02:04.280
if we have a look at it here,

41
00:02:04.280 --> 00:02:06.070
but it has everything we need.

42
00:02:06.070 --> 00:02:08.763
Now, let's hook up a listener to the form here.

43
00:02:09.830 --> 00:02:14.780
So here I got my courseForm which I can get with document,

44
00:02:14.780 --> 00:02:18.840
querySelector, form and I add the exclamation mark because

45
00:02:18.840 --> 00:02:21.910
I know I will get one so this will not be null,

46
00:02:21.910 --> 00:02:25.050
and then on the form we can addEventListener,

47
00:02:26.390 --> 00:02:29.300
the submit event listener and then we get the event object

48
00:02:29.300 --> 00:02:32.360
passed into the function which I assigned automatically.

49
00:02:32.360 --> 00:02:35.450
There I wanna call event preventDefault, so that we don't

50
00:02:35.450 --> 00:02:38.030
submit the form and sent no http request.

51
00:02:38.030 --> 00:02:40.570
And then we want to extract the data for title

52
00:02:40.570 --> 00:02:42.910
and for the price.

53
00:02:42.910 --> 00:02:45.779
So, the title can be extracted by reaching out to document,

54
00:02:45.779 --> 00:02:49.700
querySelector, or actually since we assigned an id,

55
00:02:49.700 --> 00:02:54.700
getElementById, title and we know that

56
00:02:55.560 --> 00:02:59.760
this will be an HTMLInputElement so we can use typecasting

57
00:02:59.760 --> 00:03:01.700
to let typescript know about this,

58
00:03:01.700 --> 00:03:06.174
and the price is document, getElementById, price

59
00:03:06.174 --> 00:03:09.672
and we can also convert this to an InputElement.

60
00:03:09.672 --> 00:03:11.320
And I actually there for these are the elements

61
00:03:11.320 --> 00:03:14.520
so we'll rename the constants to titleEL and priceEl

62
00:03:14.520 --> 00:03:17.779
and to get the concrete title we can now go to titleEl,

63
00:03:17.779 --> 00:03:20.930
access to value property and to get the price,

64
00:03:20.930 --> 00:03:23.400
we can do the same for the priceElement

65
00:03:23.400 --> 00:03:25.260
and get the value there too,

66
00:03:25.260 --> 00:03:26.840
and I want to have to add as a number,

67
00:03:26.840 --> 00:03:30.060
so I add the plus in front of it to convert it to a number.

68
00:03:30.060 --> 00:03:34.017
Now, that's that, but now I want to create new course

69
00:03:34.017 --> 00:03:36.090
with that information.

70
00:03:36.090 --> 00:03:39.060
So, here we have the created course where

71
00:03:39.060 --> 00:03:43.850
I can call new course and I pass in title and price.

72
00:03:43.850 --> 00:03:46.770
Now typescript accepts this, because title will be a string

73
00:03:46.770 --> 00:03:48.640
and since I convert this input to a number,

74
00:03:48.640 --> 00:03:50.200
price will be a number.

75
00:03:50.200 --> 00:03:54.160
So, if I then console log, the created course thereafter,

76
00:03:54.160 --> 00:03:55.530
we can check if this works.

77
00:03:55.530 --> 00:03:58.693
Let's save that, reload, maybe clear the console so

78
00:03:58.693 --> 00:04:00.680
that we can clearly see the output,

79
00:04:00.680 --> 00:04:02.400
and then add a new course here.

80
00:04:02.400 --> 00:04:05.785
Javascript the complete guide cost $199

81
00:04:05.785 --> 00:04:08.010
and this seems to work.

82
00:04:08.010 --> 00:04:11.010
Now, unfortunately this only works though if

83
00:04:11.010 --> 00:04:13.290
I don't enter anything.

84
00:04:13.290 --> 00:04:16.600
If I now click save, we see this course is created.

85
00:04:16.600 --> 00:04:19.820
Now, this technically is a valid course

86
00:04:19.820 --> 00:04:23.121
but of course, it's not really valid for our application.

87
00:04:23.121 --> 00:04:26.220
We probably wanna have a title which is not empty

88
00:04:26.220 --> 00:04:28.620
and a price which is greater than zero.

89
00:04:28.620 --> 00:04:30.660
So we wanna add validation.

90
00:04:30.660 --> 00:04:32.670
Of course we can simply add a if check here

91
00:04:32.670 --> 00:04:37.130
and check if title, trim, length is greater than zero,

92
00:04:37.130 --> 00:04:38.830
which means it is not empty

93
00:04:38.830 --> 00:04:41.100
and where we also validate the price.

94
00:04:41.100 --> 00:04:43.870
But that means that whenever we create a new course,

95
00:04:43.870 --> 00:04:47.880
we have to add the validation logic here before we add it.

96
00:04:47.880 --> 00:04:49.990
Wouldn't it be nice if the validation logic

97
00:04:49.990 --> 00:04:51.910
would be included in the course class,

98
00:04:51.910 --> 00:04:53.940
with the help of decorators, maybe?

99
00:04:53.940 --> 00:04:56.770
And that's exactly what I wanna do here.

100
00:04:56.770 --> 00:04:59.910
Now I will only provide a basic idea

101
00:04:59.910 --> 00:05:01.447
of how we could implement this,

102
00:05:01.447 --> 00:05:04.861
in the next module I will show you an example package

103
00:05:04.861 --> 00:05:08.270
which does this in a way more elaborate way

104
00:05:08.270 --> 00:05:10.010
and which we then will all use there

105
00:05:10.010 --> 00:05:12.080
to play around with it a bit.

106
00:05:12.080 --> 00:05:14.530
Now however here I want to implement

107
00:05:14.530 --> 00:05:16.300
this with my own decorators

108
00:05:16.300 --> 00:05:19.370
and I will add a decorator required here

109
00:05:19.370 --> 00:05:21.890
and we'll add another decorator function

110
00:05:21.890 --> 00:05:24.433
which I'll name PositiveNumber.

111
00:05:26.710 --> 00:05:28.510
So I got two decorators here.

112
00:05:28.510 --> 00:05:31.240
And now my idea is that we can add them here

113
00:05:31.240 --> 00:05:35.369
to our properties, for example Required in front of title,

114
00:05:35.369 --> 00:05:40.369
and positiveNumber in front of the price and typescript kind

115
00:05:41.740 --> 00:05:44.020
of registers this somewhere and then

116
00:05:44.020 --> 00:05:49.020
we got a third function, validate to which we can pass

117
00:05:49.490 --> 00:05:54.490
a object so any object and typescript then has a look

118
00:05:55.120 --> 00:05:58.780
at the project, finds any validation we registered

119
00:05:58.780 --> 00:06:01.440
on this class for this object earlier

120
00:06:01.440 --> 00:06:03.410
and applies our validation logic.

121
00:06:03.410 --> 00:06:05.480
That's the idea I have here.

122
00:06:05.480 --> 00:06:08.240
So, this could be part of a third-party library

123
00:06:08.240 --> 00:06:11.170
we're exposing to you and then you just import required

124
00:06:11.170 --> 00:06:14.620
positive number and validate to first set up the validators

125
00:06:14.620 --> 00:06:16.750
and then at some point call validate.

126
00:06:16.750 --> 00:06:18.634
So for example here when we created the course,

127
00:06:18.634 --> 00:06:22.462
we can call validate and pass in the createdCourse

128
00:06:22.462 --> 00:06:27.462
and if this is not true, so let's say

129
00:06:30.370 --> 00:06:31.660
this should return true or false,

130
00:06:31.660 --> 00:06:35.040
if this is not true, then we throw an error

131
00:06:35.040 --> 00:06:40.040
or show an alert, invalid input please try again

132
00:06:41.100 --> 00:06:42.960
and only otherwise we continue.

133
00:06:42.960 --> 00:06:43.870
So that's my idea.

134
00:06:43.870 --> 00:06:46.540
That we can call validate, this returns true or false.

135
00:06:46.540 --> 00:06:48.793
True if it's valid, false if it's not valid

136
00:06:48.793 --> 00:06:51.670
and we can therefore use the result.

137
00:06:51.670 --> 00:06:53.730
So therefore we get a couple of things to do.

138
00:06:53.730 --> 00:06:56.290
We need to make sure that when we add a decorator here,

139
00:06:56.290 --> 00:06:59.350
this is somehow stored somewhere.

140
00:06:59.350 --> 00:07:00.970
Again, keep in mind this could be part

141
00:07:00.970 --> 00:07:02.950
of our own third-party library,

142
00:07:02.950 --> 00:07:05.710
so in there we could have some kind of storage

143
00:07:05.710 --> 00:07:10.050
that's stores that for this class and this title property

144
00:07:10.050 --> 00:07:12.480
for example, we want it to be required.

145
00:07:12.480 --> 00:07:15.630
And in validate, we can then check if in the storage

146
00:07:15.630 --> 00:07:19.026
for the object we got, for the class the object is based on

147
00:07:19.026 --> 00:07:21.990
we do have a validator registered for the title,

148
00:07:21.990 --> 00:07:23.330
for the price and so on.

149
00:07:23.330 --> 00:07:25.260
And we then run our validation logic.

150
00:07:25.260 --> 00:07:26.453
That's my idea here.

