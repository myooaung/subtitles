WEBVTT

00:02.270 --> 00:03.850
Instruktur: Jadi kita menggunakan

00:03.850 --> 00:07.450
tipe inti dari angka, boolean, dan string.

00:07.450 --> 00:10.840
Dan di sini dalam daftar parameter fungsi ini, kita

00:10.840 --> 00:13.970
selalu secara eksplisit menetapkan jenis dengan

00:13.970 --> 00:16.540
titik dua setelah nama parameter, dan kemudian

00:16.540 --> 00:18.410
nama jenisnya.

00:18.410 --> 00:21.350
Jadi di sini, nama-nama itu adalah angka, boolean, string.

00:21.350 --> 00:23.100
Dan seandainya Anda bertanya-tanya, ini

00:23.100 --> 00:25.420
sekarang merupakan pengidentifikasi khusus.

00:25.420 --> 00:28.530
Keseluruhan ini, di sini, adalah sintaks khusus yang ditambahkan

00:28.530 --> 00:30.170
oleh TypeScript.

00:30.170 --> 00:32.900
Ini bukan bagian dari kode JavaScript yang dikompilasi.

00:32.900 --> 00:35.040
Jika kita memeriksa kode tersebut di

00:35.040 --> 00:37.280
sini, penugasan tipe ini hilang, karena

00:37.280 --> 00:39.530
JavaScript tidak mendukungnya.

00:39.530 --> 00:42.390
Tanda titik dua ini setelah variabel, atau

00:42.390 --> 00:43.920
setelah parameter.

00:43.920 --> 00:46.320
Dan kemudian angka dan boolean dan string.

00:46.320 --> 00:48.290
Kata-kata kunci khusus ini.

00:48.290 --> 00:50.840
Ini diperkenalkan oleh TypeScript.

00:50.840 --> 00:53.500
Kompiler TypeScript memahaminya.

00:53.500 --> 00:55.480
IDE di sini mendukung TypeScript, dan oleh

00:55.480 --> 00:58.580
karena itu tidak mengeluh tentang kata kunci khusus ini.

00:58.580 --> 01:01.760
JavaScript tidak memahami sintaksis ini.

01:01.760 --> 01:04.590
Ia tidak memahami tanda titik dua setelah parameter, atau

01:04.590 --> 01:06.560
tanda titik dua setelah variabel, dan

01:06.560 --> 01:09.190
kemudian angka khusus atau kata kunci string.

01:09.190 --> 01:11.540
JavaScript tidak memahami hal ini dan oleh karena itu

01:11.540 --> 01:13.560
ini bukan bagian dari output JavaScript.

01:13.560 --> 01:15.920
Ini benar-benar hanya digunakan oleh kompiler TypeScript.

01:15.920 --> 01:18.130
Dan kemudian, yah, ini adalah kompiler

01:18.130 --> 01:21.820
karena mengubah kode ini menjadi kode JavaScript.

01:21.820 --> 01:24.880
Catatan tambahan, Anda juga melihatnya beralih konst untuk var,

01:24.880 --> 01:27.700
tetapi itu adalah sesuatu yang akan saya bahas nanti.

01:27.700 --> 01:30.590
Jadi, kita memiliki penugasan tipe eksplisit di sini

01:30.590 --> 01:33.060
dan itu hanya dipahami oleh TypeScript.

01:33.060 --> 01:35.763
Bagus, mengapa kita tidak memilikinya di sana?

01:36.880 --> 01:39.890
Saya tidak memiliki tugas tipe eksplisit di sini.

01:39.890 --> 01:41.180
Dan, ngomong-ngomong, juga

01:41.180 --> 01:43.450
tidak di sini ketika kita menghitung hasilnya,

01:43.450 --> 01:45.530
misalnya, karena TypeScript memiliki

01:45.530 --> 01:48.400
fitur bawaan yang disebut type inference.

01:48.400 --> 01:51.000
Ini berarti bahwa TypeScript melakukan yang terbaik,

01:51.000 --> 01:53.010
dan melakukan pekerjaan yang cukup

01:53.010 --> 01:56.400
baik di sana, untuk memahami jenis yang Anda miliki dalam variabel

01:56.400 --> 01:58.860
atau konstanta tertentu.

01:58.860 --> 02:02.300
Dan di sini, misalnya, ia memahami bahwa number1 akan

02:02.300 --> 02:05.780
selalu bertipe number pada akhirnya, karena Anda menginisialisasinya

02:05.780 --> 02:08.020
dengan angka.

02:08.020 --> 02:09.950
Sekarang, ini sebenarnya adalah konstanta,

02:09.950 --> 02:11.740
jadi bahkan lebih spesifik dari itu.

02:11.740 --> 02:15.350
Dan jenis yang diidentifikasikan di sini bukan sembarang

02:15.350 --> 02:17.490
angka, melainkan angka lima.

02:17.490 --> 02:20.110
Karena Anda tidak akan dapat menetapkan

02:20.110 --> 02:23.870
angka baru, atau nilai baru ke nilai konst.

02:23.870 --> 02:25.840
Jika Anda mengubahnya menjadi variabel, jadi

02:25.840 --> 02:28.460
jika Anda menggunakan let sebagai gantinya, maka tentu saja

02:28.460 --> 02:30.180
hal ini tidak akan merusak apapun.

02:30.180 --> 02:32.940
Kita bisa menggunakan variabel di sana, ini mungkin bukan praktik

02:32.940 --> 02:34.540
terbaik karena nilai ini tidak pernah berubah

02:34.540 --> 02:36.210
tetapi juga tidak mengerikan.

02:36.210 --> 02:38.260
Tetapi sekarang jika mengarahkan kursor ke atas

02:38.260 --> 02:41.210
ini, kita melihat TypeScript tidak mengatakan, oke, ini harus lima.

02:41.210 --> 02:45.510
Tetapi tetap saja ia mendeteksi bahwa jenis di sini adalah angka.

02:45.510 --> 02:49.260
Sekarang, kita benar-benar bisa menulis kode ini di sini sendiri.

02:49.260 --> 02:51.970
Kita bisa menambahkan titik dua setelah nama variabel

02:51.970 --> 02:53.870
di sisi kiri tanda sama dengan, dan

02:53.870 --> 02:55.590
kemudian nama jenisnya.

02:55.590 --> 02:56.880
Jadi, pada dasarnya sama dengan

02:56.880 --> 02:59.470
yang kita lakukan pada parameter fungsi ini.

02:59.470 --> 03:01.860
Tetapi, ini berlebihan dan sebenarnya juga

03:01.860 --> 03:04.620
tidak dianggap sebagai praktik yang baik.

03:04.620 --> 03:06.790
Karena TypeScript mampu menyimpulkan

03:06.790 --> 03:09.990
tipe ini dengan sempurna dari sana.

03:09.990 --> 03:13.690
Jadi, menugaskan ini bukanlah ide yang bagus.

03:13.690 --> 03:16.420
Ini hanya berubah jika Anda akan membuat variabel ini dengan

03:16.420 --> 03:18.053
cara yang tidak ditetapkan.

03:19.000 --> 03:22.130
Seperti ini, jika Anda tidak segera menginisialisasikannya.

03:22.130 --> 03:25.700
Kemudian, ini adalah praktik yang baik untuk memberi tahu TypeScript

03:25.700 --> 03:29.070
nilai mana yang pada akhirnya akan disimpan di sana.

03:29.070 --> 03:32.590
Sehingga ketika nanti Anda menetapkan nilai untuk itu, dan tentu saja agak

03:32.590 --> 03:34.080
berlebihan di sini untuk membagi

03:34.080 --> 03:35.320
ini dalam dua baris.

03:35.320 --> 03:37.800
Saya hanya melakukan ini untuk tujuan demo.

03:37.800 --> 03:39.480
Tetapi sekarang jika saya menetapkan

03:39.480 --> 03:42.460
ini di sini, ini rusak karena saya memberi tahu TypeScript sebelumnya

03:42.460 --> 03:44.630
bahwa ini akan bertipe number.

03:44.630 --> 03:45.610
Anda tidak perlu melakukan itu.

03:45.610 --> 03:47.420
Ini juga berfungsi jika Anda tidak melakukan itu.

03:47.420 --> 03:50.330
Tetapi sekarang Anda juga dapat menambahkan lima ini dan Anda

03:50.330 --> 03:51.630
tidak akan mendapatkan error

03:51.630 --> 03:53.470
karena Anda tidak memberi tahu TypeScript

03:53.470 --> 03:55.350
apa pun tentang tipe yang akan disimpan

03:55.350 --> 03:56.975
dalam variabel ini dan oleh karena

03:56.975 --> 03:59.630
itu TypeScript mengizinkan tipe apa pun.

03:59.630 --> 04:02.600
Jika Anda malah menambahkan angka titik dua di sini, Anda

04:02.600 --> 04:05.417
memberi tahu TypeScript, "Hei, pada akhirnya," sebuah

04:05.417 --> 04:07.370
angka akan disimpan di sana. Dan karenanya jika Anda kemudian menyimpan sesuatu

04:07.370 --> 04:10.060
yang lain di sana, seperti dalam kasus ini di mana kita menyimpan

04:10.060 --> 04:12.470
string, Anda akan mendapatkan kesalahan di sini di IDE,

04:12.470 --> 04:15.170
dan tentu saja juga jika Anda mengompilasi kode Anda.

04:15.170 --> 04:17.570
Kita akan mendapatkan error yang sudah kita lihat sebelumnya.

04:17.570 --> 04:20.253
Jadi, beginilah cara Anda bisa menetapkan jenis.

04:22.300 --> 04:24.920
Sekarang, bahkan jika TypeScript baru saja menyimpulkan sebuah tipe,

04:24.920 --> 04:27.830
dan biarkan saya memperbaikinya, TypeScript akan meneriaki Anda jika Anda

04:27.830 --> 04:29.310
merusak tipe yang disimpulkan itu.

04:29.310 --> 04:32.720
Sebenarnya, salah untuk mengatakan bahkan karena tentu

04:32.720 --> 04:35.670
saja iya, mengapa tidak melakukan itu?

04:35.670 --> 04:37.000
Type inference ada di sana untuk menghemat

04:37.000 --> 04:39.750
kode Anda, untuk menghindari Anda harus menetapkan tipe secara manual.

04:39.750 --> 04:42.730
Tentu saja TypeScript berteriak pada Anda jika Anda

04:42.730 --> 04:44.520
menggunakan tipe yang salah, tipe

04:44.520 --> 04:46.510
yang tidak disimpulkannya.

04:46.510 --> 04:48.640
Sebagai contoh, di sini jika resultPhrase

04:48.640 --> 04:52.460
dibuat dengan let sehingga menjadi variabel, maka TypeScript di sini menyimpulkan

04:52.460 --> 04:54.000
bahwa ini akan bertipe string

04:54.000 --> 04:57.670
karena kita menginisialisasikannya dengan string.

04:57.670 --> 04:59.850
Jadi, ini pada dasarnya sama dengan tidak

04:59.850 --> 05:03.060
menginisialisasinya, dan menetapkan jenisnya sendiri, lalu

05:03.060 --> 05:04.970
menetapkan nilainya nanti.

05:04.970 --> 05:07.410
Sekarang, jika kita mengubah resultPhrase menjadi,

05:07.410 --> 05:12.310
katakanlah, nol di sini, untuk alasan apa pun yang mungkin ingin kita lakukan itu, maka kita mendapatkan

05:12.310 --> 05:15.660
kesalahan di sini bahwa tipe nol tidak dapat ditetapkan dari tipe

05:15.660 --> 05:17.330
string.

05:17.330 --> 05:21.210
Dan itu masuk akal, bukan?

05:21.210 --> 05:22.690
TypeScript menyimpulkan bahwa

05:22.690 --> 05:25.430
kita ingin menyimpan string, sekarang kita mencoba menyimpan

05:25.430 --> 05:27.290
angka, kita mendapatkan error.

05:27.290 --> 05:28.530
Itulah tugasnya, tugas inti dari TypeScript.

05:28.530 --> 05:33.000
Memeriksa jenis dan meneriaki kami jika kami salah

05:33.000 --> 05:35.280
menggunakannya.
