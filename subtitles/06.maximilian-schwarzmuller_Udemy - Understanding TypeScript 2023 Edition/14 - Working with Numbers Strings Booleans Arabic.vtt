WEBVTT

00:01.850 --> 00:03.270
المعلم: الآن بعد أن

00:03.270 --> 00:06.760
عرفنا أساسيات TypeScript وكيفية اختلافها وكل

00:06.760 --> 00:09.661
ما يتعلق بجافا سكريبت ، دعنا نتعمق قليلاً

00:09.661 --> 00:11.410
في الأنواع الأساسية المختلفة

00:11.410 --> 00:14.148
التي يعرفها TypeScript.

00:14.148 --> 00:17.490
الرقم هو النوع الذي نراه هنا ، وكما أوضحت ، لا يوجد فرق بين الأعداد

00:17.490 --> 00:18.500
الصحيحة مثل الخمسة

00:18.500 --> 00:22.050
هنا والأعداد العائمة أو المضاعفة ، كما يطلق عليها في لغات البرمجة

00:22.050 --> 00:25.640
الأخرى ، مثل 2.

00:25.640 --> 00:25.640
8 هنا.

00:25.640 --> 00:28.440
في الواقع ، في JavaScript ، وينطبق الشيء نفسه في TypeScript

00:28.440 --> 00:30.810
، فإن جميع الأرقام عائمة افتراضيًا.

00:30.810 --> 00:33.270
لذلك ، بالنسبة إلى JavaScript ، وبالتالي ، بالنسبة

00:33.270 --> 00:35.171
إلى TypeScript أيضًا ، لا يوجد فرق بين

00:35.171 --> 00:36.770
خمسة مثل هذا وخمسة مثل هذا.

00:36.770 --> 00:38.640
إنه نفس الرقم بشكل أساسي.

00:38.640 --> 00:42.720
الآن ، إلى جانب الأرقام ، لدينا أيضًا أنواع أساسية أخرى.

00:42.720 --> 00:46.350
وستكون هذه عبارة عن سلاسل نصية ومنطقية.

00:46.350 --> 00:47.800
دعونا أيضًا نلقي نظرة على هؤلاء.

00:47.800 --> 00:50.650
لقد رأينا في الواقع كل هؤلاء في العمل هنا في هذا البيان

00:50.650 --> 00:53.291
إذا كان بالفعل ، والذي تعلمنا أنه زائد بعض الشيء.

00:53.291 --> 00:55.971
ومع ذلك ، سيكون هذا هنا عبارة عن سلسلة.

00:55.971 --> 00:57.720
أيضًا ، بالطبع ، خمسة مع

00:57.720 --> 01:00.389
اقتباسات ستكون سلسلة لأنها نص.

01:00.389 --> 01:03.851
والنتيجة ، على سبيل المثال ، لهذه المقارنة هنا

01:03.851 --> 01:05.170
، ستكون منطقية.

01:05.170 --> 01:08.090
هذا العامل ، علامة المساواة الثلاثية

01:08.090 --> 01:10.950
أو عامل المساواة المنفي هنا ،

01:10.950 --> 01:13.640
ينتج صواب أو خطأ.

01:13.640 --> 01:14.720
وبالطبع ، يمكننا

01:14.720 --> 01:17.340
إما إنتاج فحص داخلي للمراجعة ديناميكيًا

01:17.340 --> 01:18.850
، وهو ما سنفعله غالبًا.

01:18.850 --> 01:22.340
أو نقوم بتهيئة متغير بقيمة صواب أو خطأ ، لذلك دعونا نفعل

01:22.340 --> 01:23.379
الأمرين هنا.

01:23.379 --> 01:27.509
هنا ، يمكننا إضافة ثابت جديد ، "printResult".

01:27.509 --> 01:29.990
وضبط هذا على صواب ، على سبيل المثال.

01:29.990 --> 01:31.320
ولتوضيح الأمر حقًا ، يمكن

01:31.320 --> 01:33.130
أن يكون هذا متغيرًا أيضًا.

01:33.130 --> 01:34.460
لا يجب أن يكون ثابتًا.

01:34.460 --> 01:36.030
يمكن أن يكون متغيرًا ، يمكنك إنشاؤه

01:36.030 --> 01:37.730
باستخدام اسمح في JavaScript.

01:37.730 --> 01:39.870
لكن بما أنني لا أخطط لتغييره هنا ، فسوف

01:39.870 --> 01:40.703
أذهب بثابت.

01:40.703 --> 01:43.670
ويمكننا تمرير هذا كمعامل ثالث هنا.

01:43.670 --> 01:46.960
لنفترض أننا مررنا "printResult" ، وهو ما ينطبق هنا.

01:46.960 --> 01:49.720
الآن حصلنا على خطأ على الفور ، بالطبع

01:49.720 --> 01:53.160
، لأن وظيفة الجمع لدينا لا تدعم وسيطة ثالثة.

01:53.160 --> 01:55.560
نرى ، "توقعت حجتين لكن حصلت على ثلاث حجج".

01:55.560 --> 01:57.260
لذلك ، علينا التأكد من

01:57.260 --> 01:58.920
أننا ندعم حجة ثالثة.

01:58.920 --> 02:03.920
وهناك ، يمكننا إضافة معامل "showResult".

02:03.940 --> 02:05.920
يمكنك تسميته "printResult" هنا أيضًا.

02:05.920 --> 02:07.910
سأذهب مع "showResult" لتجنب الالتباس

02:07.910 --> 02:11.340
فيما يتعلق بالتسمية ، ولكن من الناحية الفنية ، لن يتعارض

02:11.340 --> 02:12.930
هذان الاسمان.

02:12.930 --> 02:14.320
لذا ، هنا ، سأسميها "showResult".

02:14.320 --> 02:17.580
وأريد التأكد من أن هذا من النوع المنطقي من

02:17.580 --> 02:19.500
خلال ضبط هذا على منطقي.

02:19.500 --> 02:22.109
مرة أخرى ، بإضافة نقطتين بعد

02:22.109 --> 02:25.120
المعلمة هنا ثم إضافة اسم النوع.

02:25.120 --> 02:28.100
تقبل هذه الوظيفة الآن هذا ، والآن ما يمكننا

02:28.100 --> 02:31.787
فعله هو إضافة علامة if هنا والتحقق من "if showResult"

02:31.787 --> 02:36.480
، إذا كان هذا صحيحًا ، يمكننا بالطبع مقارنته بالصواب.

02:36.480 --> 02:37.628
ولكن كما تعلم في

02:37.628 --> 02:41.990
JavaScript ، يمكنك أيضًا تمرير قيمة صواب أو خطأ هنا.

02:41.990 --> 02:43.970
وسيقوم JavaScript بتقييمه ، وإذا

02:43.970 --> 02:47.389
كان هذا يعطي قيمة صحيحة بطريقة ما أو قيمة حقيقية بشكل عام

02:47.389 --> 02:48.989
، فسنجعلها في كتلة if.

02:48.989 --> 02:50.011
وإلا فإننا لن نفعل.

02:50.011 --> 02:52.900
ودعونا نقول أننا نجحنا هنا ، وبعد ذلك

02:52.900 --> 02:55.429
أريد أن "أعزاء. تسجيل n1 زائد n2 ".

02:55.429 --> 02:58.581
خلاف ذلك ، في الحالة الأخرى ، إذا لم نجعلها هناك

02:58.581 --> 03:00.549
، فأنا أريد أن أعيد هذا.

03:00.549 --> 03:02.300
إذن فهذه وظيفة تُرجع

03:02.300 --> 03:04.760
أحيانًا قيمة وأحيانًا لا تُرجع

03:04.760 --> 03:08.309
قيمة ، ولكنها تُخرجها على الفور.

03:08.309 --> 03:11.550
الآن يمكنك أن تجادل ، إذا كنت تريد كتابة مثل هذه

03:11.550 --> 03:14.310
الوظيفة ، والتي لا يمكن التنبؤ بها نوعًا

03:14.310 --> 03:16.651
ما أو التي قد تتصرف بشكل غير متوقع

03:16.651 --> 03:18.349
إذا نجحت هنا.

03:18.349 --> 03:19.990
لكن هنا ، نحن نفعل ذلك.

03:19.990 --> 03:22.090
لذلك هذه الوظيفة ترجع في بعض الأحيان فقط.

03:22.090 --> 03:24.869
في بعض الأحيان لا يعود أيضًا ، ولكن بدلاً من

03:24.869 --> 03:27.830
ذلك ، يقوم فقط بتسجيل شيء ما في وحدة التحكم.

03:27.830 --> 03:31.120
الآن هنا ، يمكننا بالفعل استدعاء إضافة مثل هذه تمامًا

03:31.120 --> 03:33.640
ولا نحتاج إلى تخزينها نتيجة لذلك ولست

03:33.640 --> 03:37.570
بحاجة إلى وحدة التحكم. نتيجة السجل لأنه مع ضبط "printResult"

03:37.570 --> 03:39.550
على "true" ، أضف نفسه.

03:39.550 --> 03:41.869
لذا فإن الوظيفة نفسها ستطبع النتيجة.

03:41.869 --> 03:43.640
وبالتالي ، إذا حفظنا ذلك الآن

03:43.640 --> 03:47.880
وقمنا بإعادة تجميع تطبيقنا. ts هنا باستخدام الأمر tsc.

03:47.880 --> 03:50.830
بمجرد الانتهاء من ذلك ، سيتم إعادة تحميل الصفحة

03:50.830 --> 03:52.600
، وما زلنا نرى مخرجاتنا هنا.

03:52.600 --> 03:54.677
لكنها الآن تأتي من السطر السادس.

03:54.677 --> 03:57.690
وإذا ألقينا نظرة ، فسنجد أن الخط ستة موجود بالفعل

03:57.690 --> 03:58.980
داخل الدالة.

03:58.980 --> 03:59.891
إذن هذا منطقي.

03:59.891 --> 04:02.429
لنفترض الآن أننا نريد تخصيص الإخراج.

04:02.429 --> 04:06.190
في if هنا ، لدينا ثابت "resultPhrase" هنا حيث نقول

04:06.190 --> 04:10.181
، "النتيجة هي" نقطتان ثم بعض المسافة البيضاء.

04:10.181 --> 04:14.205
ونمرر ذلك أيضًا مع "resultPhrase" هنا.

04:14.205 --> 04:17.410
حسنًا ، يمكننا أن نتوقع هذا كحجة هنا أيضًا.

04:17.410 --> 04:20.750
العبارة ، التي ستنتج سلسلة أنبوبية ، عن طريق إضافة نقطتين.

04:20.750 --> 04:22.291
ثم السلسلة هي اسم النوع

04:22.291 --> 04:26.469
، ويمكننا الآن استخدام هذه العبارة لإخراجها كجزء

04:26.469 --> 04:31.193
من ناتجنا إذا كنا نطبع النتيجة مباشرة في الوظيفة.

04:31.193 --> 04:34.789
إذن ، هنا ، يمكن أن يكون لدينا "عبارة زائد n1 زائد n2".

04:34.789 --> 04:37.440
وإذا فعلنا ذلك وأعدنا التحويل البرمجي

04:37.440 --> 04:39.040
بتكرار هذا الأمر ، فسنرى

04:39.040 --> 04:41.720
أن هذه العبارة جزء من النتيجة.

04:41.720 --> 04:44.861
لكننا ، الآن ، أعدنا تقديم الخطأ القديم

04:44.861 --> 04:48.141
لأن لدي سلسلة ، أجمعها مع رقمين.

04:48.141 --> 04:52.000
يتم تحويل كل شيء إلى سلسلة هنا ، وهذا ليس

04:52.000 --> 04:53.240
ما أريده.

04:53.240 --> 04:55.930
لتجنب هذا ، في هذه الدالة ، يمكننا إضافة

04:55.930 --> 04:57.708
متغير نتيجة هنا.

04:57.708 --> 05:02.027
أو نتيجة ثابتة وتخزين نتيجتنا هنا.

05:02.027 --> 05:04.530
سيتم التعامل مع هذا الآن بطريقة رياضية

05:04.530 --> 05:07.990
لأن الأرقام فقط هي المتضمنة ، وبعد ذلك ، هنا ، يمكننا

05:07.990 --> 05:11.430
دمج ذلك مع العبارة أو مجرد إرجاعها.

05:11.430 --> 05:15.160
والآن ، نظرًا لأن هذا لا يتم حسابه بشكل مباشر مع سلسلة

05:15.160 --> 05:17.029
، فسيظل هذا دائمًا رقمًا.

05:17.029 --> 05:19.350
ونعم ، هنا ، سيتم تحويل هذا الرقم مع

05:19.350 --> 05:21.140
هذه السلسلة إلى سلسلة.

05:21.140 --> 05:24.360
لكن بما أن الحساب الرياضي انتهى قبل ذلك ، فسنحصل على

05:24.360 --> 05:25.548
النتيجة الصحيحة.

05:25.548 --> 05:28.520
والآن إذا كررنا ذلك ثم أعدنا التحويل البرمجي ، فسنحصل

05:28.520 --> 05:30.181
على الناتج الصحيح.

05:30.181 --> 05:33.050
والآن هذه هي أنواع البيانات الأساسية في العمل.

05:33.050 --> 05:35.541
دعنا الآن نتأكد من أننا نفهم تمامًا

05:35.541 --> 05:38.061
كيفية تعيين الأنواع ، وكذلك سبب عدم

05:38.061 --> 05:41.343
قيامنا بتعيين الأنواع بشكل صريح هناك.
