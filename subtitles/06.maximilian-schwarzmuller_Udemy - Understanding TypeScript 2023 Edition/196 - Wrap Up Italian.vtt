WEBVTT

00:02.320 --> 00:04.290
Docente: È tutto per questo modulo.

00:04.290 --> 00:05.660
Si è appreso come usare il

00:05.660 --> 00:08.480
typescript nell'applicazione node express, che

00:08.480 --> 00:11.940
si possono installare tipi extra per express e per node, ad esempio,

00:11.940 --> 00:13.230
per ottenere un ottimo

00:13.230 --> 00:16.320
supporto typescript nei propri file.

00:16.320 --> 00:18.570
Scrivete l'applicazione come la scrivereste

00:18.570 --> 00:19.990
sempre.

00:19.990 --> 00:21.790
Ma che, per esempio, la sintassi di

00:21.790 --> 00:23.720
importazione ed esportazione è diversa

00:23.720 --> 00:26.120
e che si possono usare i tipi e ogni altra caratteristica

00:26.120 --> 00:29.300
del dattiloscritto che si impara a conoscere.

00:29.300 --> 00:31.080
Si possono usare le interfacce,

00:31.080 --> 00:33.080
i decoratori, gli eNom e le QPUll

00:33.080 --> 00:37.840
e tutto ciò che è esclusivo del dattiloscritto.

00:37.840 --> 00:39.310
Qui tutto funziona, perché

00:39.310 --> 00:42.650
stiamo scrivendo una normale applicazione in typescript

00:42.650 --> 00:46.070
che viene compilata con il normale compilatore typescript

00:46.070 --> 00:48.050
in normale codice Javascript.

00:48.050 --> 00:52.750
Codice Javascript che viene eseguito con il nodo JS.

00:52.750 --> 00:54.450
Se volete avere altri esempi

00:54.450 --> 00:57.720
su come lavorare con typescript e node express, potete

00:57.720 --> 00:58.910
ovviamente cercare

00:58.910 --> 01:01.210
su Google node express typescript per

01:01.210 --> 01:02.840
trovare altri esempi.

01:02.840 --> 01:04.600
Ma posso anche raccomandare

01:04.600 --> 01:06.980
vivamente di controllare NestJS.

01:06.980 --> 01:10.390
È un nodo. Mentre è possibile far funzionare

01:10.390 --> 01:13.270
node express con typescript, come si è visto nel

01:13.270 --> 01:15.310
corso di questo modulo, si tratta

01:15.310 --> 01:18.010
di un framework che fornisce progetti, progetti

01:18.010 --> 01:21.740
node, con il supporto di typescript già pronto.

01:21.740 --> 01:24.490
E abbraccia tutte le caratteristiche di typescript,

01:24.490 --> 01:26.960
come i decoratori e così via.

01:26.960 --> 01:30.910
Con NestJS è possibile costruire applicazioni web a nodi, API

01:30.910 --> 01:34.390
a riposo, ma anche applicazioni in cui si eseguono visualizzazioni

01:34.390 --> 01:36.440
o API graphQL.

01:36.440 --> 01:38.930
È possibile costruire tutto questo con il nodo. js ma anche con typescript

01:38.930 --> 01:41.110
e questo progetto utilizza pesantemente

01:41.110 --> 01:43.380
caratteristiche come i decoratori,

01:43.380 --> 01:46.950
le interfacce e così via.

01:46.950 --> 01:50.200
Quindi, se volete creare un'applicazione web lato servizi con

01:50.200 --> 01:53.580
node e typescript, date assolutamente un'occhiata a NestJS.

01:53.580 --> 01:56.660
È un ottimo framework, molto divertente da usare e utilizza

01:56.660 --> 02:00.350
tutte le caratteristiche interessanti di typescript.

02:00.350 --> 02:03.630
Non è quindi necessaria l'installazione di un tipo personalizzato, né

02:03.630 --> 02:05.310
l'utilizzo di soluzioni o altro.

02:05.310 --> 02:08.913
Qui si ottiene un ottimo supporto dattiloscritto fin dall'inizio.
