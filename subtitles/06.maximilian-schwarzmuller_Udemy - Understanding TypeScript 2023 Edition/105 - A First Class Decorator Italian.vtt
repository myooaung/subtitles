WEBVTT

00:02.130 --> 00:05.620
-: In allegato trovate il nostro buon vecchio progetto di partenza,

00:05.620 --> 00:08.470
ho già avviato il server con NPM start.

00:08.470 --> 00:12.320
E il processo di osservazione di TypeScript con TSC-W.

00:12.320 --> 00:14.870
La prima cosa da configurare è in un

00:14.870 --> 00:18.030
file tsconfig, assicurarsi che il target sia

00:18.030 --> 00:21.620
impostato su es6 e poi, se si scorre in basso, assicurarsi

00:21.620 --> 00:24.230
di aggiungere questa riga del decoratore

00:24.230 --> 00:26.720
sperimentale.

00:26.720 --> 00:28.380
Aggiungete una virgola davanti a questo

00:28.380 --> 00:31.700
punto e poi potete usare AutoFormat per formattare tutto correttamente.

00:31.700 --> 00:34.020
È importante, altrimenti non si potranno

00:34.020 --> 00:36.000
usare i decoratori nel progetto.

00:36.000 --> 00:37.250
Assicuratevi quindi di modificare

00:37.250 --> 00:40.540
il vostro tsconfig. json in modo appropriato.

00:40.540 --> 00:42.630
A questo punto possiamo tuffarci e scrivere il

00:42.630 --> 00:46.980
nostro primo decoratore nell'applicazione. file ts.

00:46.980 --> 00:50.950
Voglio iniziare con un decoratore che possiamo aggiungere a una classe.

00:50.950 --> 00:54.530
I decoratori in generale riguardano le classi, ma questo è un

00:54.530 --> 00:55.363
decoratore che

00:55.363 --> 00:58.220
aggiungeremo alla classe nel suo complesso.

00:58.220 --> 01:00.730
Per questo, diciamo che abbiamo una classe,

01:00.730 --> 01:04.360
Persona, una classe molto banale, in cui abbiamo un nome.

01:04.360 --> 01:07.530
Forse con un valore di Max, preinizializzato qui.

01:07.530 --> 01:10.520
Abbiamo una funzione costruttore in cui registro

01:10.520 --> 01:12.600
l'oggetto Creating person, in modo

01:12.600 --> 01:14.763
da vedere che viene eseguito.

01:15.880 --> 01:19.363
E poi, naturalmente, possiamo creare una nuova persona qui, con

01:20.760 --> 01:22.910
una nuova parola chiave, come questa.

01:22.910 --> 01:24.030
E se vogliamo, possiamo

01:24.030 --> 01:26.490
ovviamente registrare questa persona creata.

01:26.490 --> 01:28.330
E questo non dovrebbe riservare

01:28.330 --> 01:29.430
sorprese: se salviamo

01:29.430 --> 01:32.090
tutto questo, si compila senza errori.

01:32.090 --> 01:33.700
E se visitiamo la nostra pagina,

01:33.700 --> 01:36.670
su Localhost: 3000, nella console JavaScript, vediamo

01:36.670 --> 01:38.900
l'oggetto Creating person che proviene

01:38.900 --> 01:41.140
dal costruttore.

01:41.140 --> 01:44.603
E tutti noi, naturalmente, vediamo qui la Persona stessa.

01:45.810 --> 01:49.550
Ora, in questo esempio non ci sono decoratori coinvolti.

01:49.550 --> 01:51.000
Cambiamo questa situazione.

01:51.000 --> 01:53.370
All'inizio del file aggiungiamo un decoratore.

01:53.370 --> 01:56.060
Un decoratore, e questo è davvero importante da capire,

01:56.060 --> 01:58.080
alla fine è solo una funzione.

01:58.080 --> 02:01.280
Una funzione che si applica a qualcosa, ad esempio

02:01.280 --> 02:03.530
a una classe in un certo modo.

02:03.530 --> 02:04.750
Creiamo quindi una

02:04.750 --> 02:09.523
funzione con la parola chiave function e chiamiamola Logger.

02:10.390 --> 02:13.290
Questa è una funzione, l'unica cosa speciale è che

02:13.290 --> 02:15.570
inizia con un carattere maiuscolo.

02:15.570 --> 02:16.492
A proposito, non

02:16.492 --> 02:20.200
è un obbligo, non è necessario usare un carattere iniziale

02:20.200 --> 02:22.470
maiuscolo, si può usare anche uno minuscolo,

02:22.470 --> 02:25.610
ma si vedono molti decoratori nelle librerie che

02:25.610 --> 02:27.680
si possono usare che usano caratteri

02:27.680 --> 02:30.030
iniziali maiuscoli e quindi farò lo stesso

02:30.030 --> 02:32.200
qui.

02:32.200 --> 02:35.450
Quindi, la funzione Logger è una funzione e possiamo

02:35.450 --> 02:39.330
applicarla come decoratore, come si vedrà.

02:39.330 --> 02:42.730
Aggiungiamo ora un log della console qui, Logging, in modo da poter vedere

02:42.730 --> 02:44.730
quando questa funzione viene eseguita.

02:44.730 --> 02:47.300
Perché non lo chiamerò direttamente.

02:47.300 --> 02:50.330
Voglio invece aggiungerlo come decoratore a questa classe.

02:50.330 --> 02:53.710
Per farlo, aggiungiamo il simbolo @ davanti

02:53.710 --> 02:57.370
alla classe e poi la nostra funzione.

02:57.370 --> 02:58.440
Proprio così.

02:58.440 --> 03:00.320
Ora un paio di cose particolari.

03:00.320 --> 03:03.780
Il simbolo @ qui è un identificatore speciale che

03:03.780 --> 03:06.170
TypeScript vede o riconosce.

03:06.170 --> 03:09.110
E poi la cosa direttamente dopo il simbolo @ dovrebbe

03:09.110 --> 03:11.010
puntare a una funzione.

03:11.010 --> 03:13.460
Non eseguirlo, ma indicarlo, che dovrebbe

03:13.460 --> 03:15.800
essere il vostro decoratore.

03:15.800 --> 03:17.400
Si può notare che Logger accetta

03:17.400 --> 03:20.650
troppi pochi argomenti per essere usato come decoratore.

03:20.650 --> 03:23.010
La cosa buona è che TypeScript capisce che

03:23.010 --> 03:24.930
voglio usarlo come decoratore.

03:24.930 --> 03:27.980
La cosa negativa è che non passiamo abbastanza argomenti.

03:27.980 --> 03:31.000
E in effetti i decoratori ricevono argomenti.

03:31.000 --> 03:34.870
Il numero di argomenti dipende dall'uso del decoratore.

03:34.870 --> 03:39.710
Qui, per un decoratore che aggiungiamo a una classe, otteniamo un argomento.

03:39.710 --> 03:42.910
Questo è l'obiettivo di questo decoratore, per così

03:42.910 --> 03:46.160
dire, che è la nostra funzione costruttore.

03:46.160 --> 03:49.020
Quindi possiamo dire che alla fine otteniamo

03:49.020 --> 03:51.240
una funzione come argomento.

03:51.240 --> 03:54.110
Possiamo anche chiamarlo costruttore, perché alla

03:54.110 --> 03:56.650
fine otterremo la funzione costruttore di questa

03:56.650 --> 03:59.550
classe o di qualsiasi classe a cui aggiungiamo questo

03:59.550 --> 04:01.470
decoratore come parametro.

04:01.470 --> 04:06.310
Consoliamoci anche. registrarlo, in modo da poter avere

04:06.310 --> 04:09.650
un'idea di questo argomento del costruttore.

04:09.650 --> 04:10.550
E salviamo questo.

04:10.550 --> 04:12.750
E come vedete compila senza errori.

04:12.750 --> 04:14.750
Se ora diamo un'occhiata al nostro output,

04:14.750 --> 04:16.580
vediamo il vecchio codice di prima, ma vediamo

04:16.580 --> 04:18.590
anche l'output di registrazione e la funzione

04:18.590 --> 04:20.810
costruttore che viene registrata.

04:20.810 --> 04:22.760
In realtà qui vediamo l'intera classe,

04:22.760 --> 04:24.520
ma le classi alla fine sono solo un

04:24.520 --> 04:27.670
po' di zucchero tattico sulle funzioni del costruttore.

04:27.670 --> 04:31.450
Si noti anche che l'output del nostro decoratore, Logging,

04:31.450 --> 04:35.030
e questa classe o questa funzione del costruttore log qui

04:35.030 --> 04:39.460
viene stampata per prima, prima di vedere l'oggetto Creating person

04:39.460 --> 04:41.540
e il nostro oggetto Person.

04:41.540 --> 04:44.360
Perché, in effetti, i decoratori, e questo è molto

04:44.360 --> 04:48.430
importante, vengono eseguiti quando la classe è definita.

04:48.430 --> 04:50.530
Non quando viene istanziato.

04:50.530 --> 04:53.020
Non è necessario istanziare la classe.

04:53.020 --> 04:55.760
Si potrebbe rimuovere il codice per l'istanziazione della

04:55.760 --> 04:58.780
classe e si otterrebbe comunque l'output del decoratore.

04:58.780 --> 05:02.210
Quindi il decoratore viene eseguito quando JavaScript trova la definizione

05:02.210 --> 05:05.660
della classe, la definizione della funzione costruttore.

05:05.660 --> 05:08.580
Non quando si usa la funzione costruttore per istanziare

05:08.580 --> 05:10.070
un oggetto.

05:10.070 --> 05:13.280
Questo è davvero importante da capire.

05:13.280 --> 05:15.170
Questo è il nostro primo decoratore.

05:15.170 --> 05:16.670
Tuttavia, non è l'unico

05:16.670 --> 05:19.063
modo per creare un decoratore.
