WEBVTT

00:02.270 --> 00:04.040
المدرب: لقد ألقينا نظرة على Lodash

00:04.040 --> 00:05.900
، وهي مكتبة تابعة لجهة خارجية تم إنشاؤها

00:05.900 --> 00:08.270
باستخدام JavaScript لجافا سكريبت.

00:08.270 --> 00:11.730
تجد أيضًا بعض مكتبات الجهات الخارجية التي تتبنى

00:11.730 --> 00:13.287
حقًا ميزات البرنامج النصي

00:13.287 --> 00:16.480
والكتابة وتمنحك طريقة جديدة تمامًا لكتابة التعليمات

00:16.480 --> 00:18.360
البرمجية التي تعمل لأنك تعمل

00:18.360 --> 00:21.230
باستخدام برنامج نصي.

00:21.230 --> 00:24.950
أحد الأمثلة على ذلك هو محول الصنف ، وأفضل مثال على ذلك

00:24.950 --> 00:28.067
هو مدقق الفئة ؛ سنلقي نظرة على كليهما هنا.

00:28.067 --> 00:31.360
لكن لنبدأ بمحول الفصل.

00:31.360 --> 00:35.870
دعنا نقول في مشروعنا هنا ، لدي بالفعل نموذج ، نموذج بيانات

00:35.870 --> 00:38.150
، دعنا نسميه "المنتج".

00:38.150 --> 00:41.170
الآن سأسميها المنتج. نموذج. ts ولكن يمكنك

00:41.170 --> 00:43.820
تسمية هذا الملف ما تريد.

00:43.820 --> 00:48.820
فكرتي هي أنه في هذا الملف أقوم بتعريف فئة لمنتج ما.

00:49.420 --> 00:52.180
لذلك أصف كيف يجب أن يبدو المنتج.

00:52.180 --> 00:55.550
على سبيل المثال ، أنه يحتوي على عنوان وهو

00:55.550 --> 00:59.070
عبارة عن سلسلة وسعر وهو رقم ثم أقوم بإضافة

00:59.070 --> 01:02.120
وظيفة مُنشئ حيث يمكن تهيئة كليهما.

01:02.120 --> 01:07.120
إذن السلسلة ، أضف السعر ثم قلت أن هذا العنوان يساوي "t"

01:07.210 --> 01:09.360
وهذا السعر يساوي "p".

01:09.360 --> 01:10.810
وبالطبع كان بإمكاننا

01:10.810 --> 01:12.980
استخدام تهيئة الاختصار حيث نستخدم

01:12.980 --> 01:14.423
المُنشئ فقط.

01:16.150 --> 01:20.400
ثم لنفترض أن لدينا دائمًا طريقة ، نحصل على معلومات

01:20.400 --> 01:25.400
حيث أعيد مصفوفة ، دعنا نقول أين العنصر الأول هو العنوان

01:25.950 --> 01:30.850
والعنصر الثاني في الواقع عبارة عن سلسلة حيث لدي علامة

01:30.850 --> 01:37.833
الدولارات ثم يتم حقنها في هذه السلسلة ، هذا السعر.

01:39.030 --> 01:43.030
نموذج بسيط للغاية هنا ، فصل بسيط للغاية.

01:43.030 --> 01:45.940
والآن يمكننا بالطبع استخدام هذا الفصل ، إذا كنت

01:45.940 --> 01:49.590
ترغب في ذلك ، في التطبيق. هنا سوف أتخلص من Lodash وبدلاً

01:49.590 --> 01:54.590
من ذلك أستورد المنتج من. /منتج. نموذج الآن لذلك تحتاج إلى

01:56.200 --> 01:58.920
التأكد من هذا في نموذج المنتج ، فأنت تقوم

01:58.920 --> 02:01.010
بالفعل بتصدير هذه الفئة وإلا فلن

02:01.010 --> 02:03.860
تتمكن من استيرادها وهنا يتعين علينا تصدير

02:03.860 --> 02:05.800
منتج مثل هذا لأنني أستخدم تصديرًا

02:05.800 --> 02:07.890
مسمى هنا عن طريق إضافة الكلمة الأساسية

02:07.890 --> 02:11.950
للتصدير مباشرة في أمام الزجاجة.

02:11.950 --> 02:16.497
الآن هنا بالطبع يمكننا إنشاء منتج جديد

02:18.150 --> 02:23.150
، كتاب تكلفته 12. 99 وبعد ذلك أتحكم في السجل p1 للحصول

02:24.080 --> 02:28.190
على المعلومات ويجب علينا تسجيل هذه المجموعة بالفعل.

02:28.190 --> 02:31.390
لذلك إذا قمنا الآن بتشغيل npm نبدأ هنا ، فسيبدأ

02:31.390 --> 02:34.250
مطور حزمة الويب لدينا ويجب أن نرى هذه المجموعة

02:34.250 --> 02:37.340
اللطيفة بمعلومات حول هذا الكتاب.

02:37.340 --> 02:39.463
لذلك إذا قمت بإعادة التحميل هنا ، ها هو.

02:40.630 --> 02:43.170
الآن هذا ليس خياليًا جدًا بالطبع ، هذا يعمل

02:43.170 --> 02:44.930
، لكن هذا ليس شيئًا جديدًا.

02:44.930 --> 02:47.270
الآن سيناريو شائع في التطبيقات

02:47.270 --> 02:49.610
الأكبر هو أنك قد تقوم بتنزيل بعض

02:49.610 --> 02:52.150
البيانات ، دعنا نقول من خادم ، أنك

02:52.150 --> 02:54.490
تجلب البيانات من خادم خلفي وهذا

02:54.490 --> 02:58.370
الخادم ثم يعيد لك بعض بيانات json التي تمررها والتي

02:58.370 --> 03:01.560
قد تكون قائمة فيما بعد المنتجات.

03:01.560 --> 03:05.520
لذلك قد يكون لدينا هنا منتجات نحصل عليها من الخادم حيث لدينا

03:05.520 --> 03:10.520
بعد ذلك عنوان وسجادة وسعر ، 29. 99 ومن ثم لدينا هذا

03:13.047 --> 03:18.047
الكتاب أيضًا ، لذا فإن العنوان والكتاب

03:18.120 --> 03:22.830
وهناك سعر 10. 99 ، دعنا نقول.

03:22.830 --> 03:25.310
هذه مجموعة بسيطة جدًا من البيانات التي نحصل

03:25.310 --> 03:27.730
عليها بعد ذلك من النهاية الخلفية.

03:27.730 --> 03:30.590
هذه بالطبع كائنات JavaScript ولكنها

03:30.590 --> 03:33.730
ليست أمثلة على نموذج منتجاتنا.

03:33.730 --> 03:37.220
وهذا سيناريو نموذجي حيث تحصل على البيانات حيث أن json

03:37.220 --> 03:40.990
لا تحتوي على بيانات مرفقة مثل وظيفة المنشئ التي تنتمي إليها

03:40.990 --> 03:42.850
المشفرة الأمامية.

03:42.850 --> 03:46.770
يعرف الخادم الخاص بك ذلك و json أيضًا هو تنسيق يقوم

03:46.770 --> 03:51.230
فقط بنقل البيانات الأساسية ، وليس لديك بيانات وصفية غنية

03:51.230 --> 03:53.540
للكائنات المرفقة هناك.

03:53.540 --> 03:56.300
أو على الأقل سيكون عليك القيام بذلك يدويًا.

03:56.300 --> 04:00.120
بعبارة أخرى ، المنتجات التي نحصل عليها هنا هي أشياء

04:00.120 --> 04:03.310
ليس لها طريقة الحصول على المعلومات.

04:03.310 --> 04:08.230
الآن تقليديًا ، إذا كنت تريد الآن تحويل هذا إلى مثيلات من النموذج

04:08.230 --> 04:12.680
الخاص بك ، فسيتعين عليك القيام بذلك يدويًا.

04:12.680 --> 04:17.680
يمكن أن يكون لديك منتجاتك المحملة والتي ، دعنا نقول تستخدم

04:19.260 --> 04:22.770
المنتجات ، تستدعي طريقة الخريطة وعلى كل

04:22.770 --> 04:25.680
منتج في هذه المصفوفة ، نعيد منتجًا

04:25.680 --> 04:30.680
جديدًا للإنتاج. العنوان و prod. السعر وبعد ذلك سيكون لدينا

04:34.330 --> 04:36.660
مصفوفة مليئة بمثيلات وظيفة مُنشئ

04:36.660 --> 04:40.230
المنتج الحقيقي ، ومن ثم يمكننا فعلاً المرور عبر

04:40.230 --> 04:43.163
ذلك ، المنتجات المحملة ثم هناك على سبيل

04:44.330 --> 04:51.083
المثال ، إنتاج سجل وحدة التحكم.

04:51.083 --> 04:51.083
احصل على المعلومات.

04:52.150 --> 04:56.010
هذه هي الطريقة التي يمكننا بها تحويل مصفوفة يدويًا

04:56.010 --> 05:00.070
أو أيضًا كائن Vanilla JavaScript واحد بدون اسم إلى مثيل

05:00.070 --> 05:02.880
لوظيفة مُنشئ محددة ، وبالتالي ، سنحصل

05:02.880 --> 05:05.000
على هذا الإخراج.

05:05.000 --> 05:07.220
الآن القيام بذلك يدويًا أمر مرهق.

05:07.220 --> 05:09.590
إنها مجموعة من الخطوات الإضافية

05:09.590 --> 05:12.710
هنا ، وهذا مجرد تحول بسيط بالطبع.

05:12.710 --> 05:16.690
هذا هو المكان الذي يمكن أن تساعدنا فيه حزمة محول الفئة.

05:16.690 --> 05:19.330
إنه يجعل ذلك بسيطًا جدًا جدًا.

05:19.330 --> 05:22.390
هناك ، نحدد أيضًا فئة في نوع البرنامج

05:22.390 --> 05:25.010
النصي في حالتنا هنا ، ثم قد نحصل

05:25.010 --> 05:29.340
على بعض البيانات ، دعنا نقول من خادم ، ثم يمكننا بالفعل

05:29.340 --> 05:32.430
استدعاء طريقة راحة بسيطة وستقوم تلقائيًا

05:32.430 --> 05:36.893
بتحويل بياناتنا إلى النماذج الصحيحة.

05:38.100 --> 05:40.030
الآن من أجل ذلك ، لنقم أولاً

05:40.030 --> 05:44.840
بتشغيل محول فئة تثبيت nmp - حفظ ، مثل هذا وبمجرد الانتهاء من ذلك

05:45.730 --> 05:47.820
، فلنقم بتشغيل npm install

05:47.820 --> 05:50.350
reflect-metadata - حفظ حزمة ، تعتمد

05:51.451 --> 05:54.470
هذه الحزمة في النهاية على.

05:54.470 --> 05:57.460
لذلك دعونا هنا نستورد هذا أيضًا ، وبعد

05:57.460 --> 06:02.460
ذلك لأنه يرشدنا أيضًا هنا في تعليمات الإعداد هنا ، قم باستيراد

06:02.890 --> 06:07.680
البيانات الوصفية العاكسة في ملفات إدخال المسار ، في حالتي

06:07.680 --> 06:11.410
هنا في التطبيق. لقد قمت باستيراد مكتبة الطرف

06:11.410 --> 06:14.970
الثالث التي قمنا بتثبيتها للتو كعنصر تابع لمكتبتنا.

06:14.970 --> 06:17.210
الآن بعد أن لم تكتب أي خطوات js ، وبالتالي

06:17.210 --> 06:18.610
يمكننا تخطي هذه.

06:18.610 --> 06:20.180
في المتصفح ، لا يزال يتعين

06:20.180 --> 06:24.780
علينا تثبيت نفس الحزم على الرغم من أن إضافة هذا الاستيراد هنا

06:24.780 --> 06:26.880
أمر جيد لأننا نستخدم حزمة الويب

06:26.880 --> 06:30.090
، وبالتالي نحن الآن على ما يرام.

06:30.090 --> 06:35.090
والآن يمكننا استيراد شيء ما من محول الصنف ثم

06:36.290 --> 06:40.210
هذا الشيء هو طريقة "عادي إلى صنف".

06:40.210 --> 06:42.630
تحتوي هذه الحزمة أيضًا على طريقتين أخريين.

06:42.630 --> 06:45.200
يمكنك معرفة المزيد عنها هنا في المستندات الرسمية.

06:45.200 --> 06:49.060
لكن الطريقة الرئيسية هي "عادي للطبقة".

06:49.060 --> 06:54.060
يمكنك استخدامه هنا لتعيين منتجاتك المحملة على سبيل المثال.

06:55.150 --> 06:58.230
بدلاً من القيام بذلك يدويًا هنا كما فعلنا من قبل

06:58.230 --> 07:01.480
، يمكننا تعيين منتجات محملة مساوية لـ عادي للفئة

07:01.480 --> 07:03.760
وتمريرها الآن وسيطتين هنا.

07:03.760 --> 07:08.070
الوسيطة الأولى هي الفئة التي نريد التحويل إليها.

07:08.070 --> 07:10.190
في حالتي هنا ، المنتج.

07:10.190 --> 07:12.700
وأنا لا أقوم بإنشاء مثيل له أو أسميه

07:12.700 --> 07:15.560
، فأنا أشير فقط إلى تلك الفئة.

07:15.560 --> 07:19.460
الحجة الثانية هي البيانات التي نريد تحويلها.

07:19.460 --> 07:23.520
لذلك في حالتي هنا ، هذه هي المنتجات.

07:23.520 --> 07:25.840
والآن ما ستفعله هذه الحزمة

07:25.840 --> 07:28.100
هو أنها ستتجاوز هذه المصفوفة

07:28.100 --> 07:31.034
وتحول كل كائن Vanilla JavaScript

07:31.034 --> 07:34.090
عادي هنا إلى مثيل من هذه الفئة.

07:34.090 --> 07:37.830
لذلك إذا حفظنا هذا الآن وقمنا بتشغيل npm ، ابدأ مرة أخرى ، فسيتم

07:37.830 --> 07:40.330
إعادة تشغيل صفحة الويب التي تبدأ تشغيل الخادم

07:40.330 --> 07:43.270
مرة أخرى ويجب أن تبني هذا المشروع دون أخطاء.

07:43.270 --> 07:46.540
إذا أعدت تحميل الصفحة ، فسأحصل على نفس الإخراج

07:46.540 --> 07:49.530
كما كان من قبل ولكن بالطبع برمز أقل من جانبنا

07:49.530 --> 07:51.870
لأننا نستخدم هذه الحزمة.

07:51.870 --> 07:53.403
والمذهل في هذه الحزمة

07:53.403 --> 07:57.070
هو أنها تعمل جيدًا هنا لأنها تبني على كتابة نصية

07:57.070 --> 08:01.230
وتستخدم كتابة نصية وتستفيد من حقيقة أن لدينا فصلًا

08:01.230 --> 08:04.280
هناك يمكننا أن نشير إليه.

08:04.280 --> 08:08.730
ولكن لكي نكون صادقين أيضًا ، تعمل هذه الحزمة بشكل جيد بشكل خاص مع نوع

08:08.730 --> 08:10.900
البرنامج النصي ولكنها لا تستخدم

08:10.900 --> 08:12.600
ميزة خاصة بالنوع النصي.

08:12.600 --> 08:16.630
توجد فئات على سبيل المثال أيضًا في Vanilla JavaScript.

08:16.630 --> 08:20.170
لذلك ، في حين تم تطوير هذا بشكل أساسي لنوع البرنامج

08:20.170 --> 08:23.610
النصي ، فإنه يعمل أيضًا في Vanilla JavaScript.

08:23.610 --> 08:26.633
لن يكون هذا صحيحًا بالنسبة للحزمة التالية.
