WEBVTT

00:02.460 --> 00:05.590
-: Sono quindi supportati gli array e i numeri, le stringhe,

00:05.590 --> 00:07.620
i booleon, gli oggetti e gli array.

00:07.620 --> 00:11.400
Abbiamo i valori di base o tipi di valore, JavaScript nos supportati

00:11.400 --> 00:15.100
in TypeScript, come imparerete con l'esempio degli oggetti

00:15.100 --> 00:17.884
nei loro array, TypeScript offre anche molte

00:17.884 --> 00:21.520
più funzioni, ma è un po' più avanzato, ed è per questo che lo

00:21.520 --> 00:22.720
vedremo più avanti,

00:22.720 --> 00:24.940
ma anche questi tipi di base con quello

00:24.940 --> 00:26.810
che imparerete nelle lezioni

00:26.810 --> 00:30.140
precedenti sono supportati.

00:30.140 --> 00:33.540
Ora TypeScript contiene un paio di nuovi concetti,

00:33.540 --> 00:37.840
nuovi tipi, che non conosciamo dallo script Java puro, per

00:37.840 --> 00:40.300
esempio il tipo tupla.

00:40.300 --> 00:44.360
Forse conoscete le tuple da altri linguaggi di programmazione,

00:44.360 --> 00:46.570
ma JavaScript non le ha.

00:46.570 --> 00:49.570
Questa è una tupla, ad esempio, e si potrebbe dire che

00:49.570 --> 00:52.290
questa è una matrice. È un array, ma di

00:52.290 --> 00:54.520
lunghezza fissa e non solo

00:54.520 --> 00:58.650
di lunghezza fissa, ma anche di tipo fisso.

00:58.650 --> 01:00.730
E dove può essere utile?

01:00.730 --> 01:03.350
Supponiamo che qui, sulla nostra

01:03.350 --> 01:07.830
persona, abbiamo una serie di proprietà, role, che è un array

01:07.830 --> 01:11.160
con esattamente due elementi, dove il primo

01:11.160 --> 01:14.184
è, diciamo, un identificatore numerico

01:14.184 --> 01:18.547
come due e il secondo è un identificatore stringa e una descrizione

01:18.547 --> 01:22.765
leggibile dall'uomo come author.

01:22.765 --> 01:26.496
Ora, questo dovrebbe sempre avere esattamente due elementi, perché

01:26.496 --> 01:30.100
un utente o una persona in questa applicazione che stiamo scrivendo,

01:30.100 --> 01:32.720
diciamo, può avere solo un ruolo e un ruolo è composto

01:32.720 --> 01:35.185
solo da due elementi.

01:35.185 --> 01:37.400
Naturalmente avremmo potuto usare un'ottica,

01:37.400 --> 01:39.090
ma per qualche motivo vogliamo avere

01:39.090 --> 01:41.744
una matrice con due elementi esatti, dove il primo

01:41.744 --> 01:43.118
elemento è sempre l'identificatore

01:43.118 --> 01:47.570
numerico e il secondo è sempre l'identificatore di stringa o la descrizione o come

01:47.570 --> 01:50.220
la si voglia chiamare.

01:50.220 --> 01:52.420
Ora, se passiamo il mouse su questo tipo, TypeScript

01:52.420 --> 01:55.730
infonde questo strano tipo che non abbiamo mai visto prima. In effetti,

01:55.730 --> 01:58.550
se non si intende TypeScript capisce che abbiamo un array

01:58.550 --> 02:01.250
che potrebbe contenere anche stringhe o numeri, un tipo

02:01.250 --> 02:06.710
di unione e lo approfondiremo più avanti.

02:06.710 --> 02:06.710
L'aspetto

02:06.710 --> 02:09.950
fondamentale è che TypeScript capisce che si tratta di un array con

02:09.950 --> 02:11.668
questi tipi di valori.

02:11.668 --> 02:14.580
Il downs che è morto Si potrebbe eseguire

02:14.580 --> 02:18.780
questo codice, tuttavia, ruolo persona, push, admin.

02:18.780 --> 02:20.250
Per la nostra applicazione, questo

02:20.250 --> 02:21.970
potrebbe non avere senso, perché sappiamo

02:21.970 --> 02:23.960
che abbiamo bisogno solo di due elementi.

02:23.960 --> 02:25.790
Tuttavia, TypeScript non sa che vogliamo

02:25.790 --> 02:28.963
solo due elementi. Potremmo anche cambiare

02:28.963 --> 02:33.283
il ruolo della persona, il secondo elemento con indice

02:33.283 --> 02:35.200
1, in un numero.

02:35.200 --> 02:38.010
Questo funzionerebbe perché TypeScript sa solo che

02:38.010 --> 02:42.360
i ruoli devono essere di tipo stringa o array di numeri e quindi assegnare un numero

02:42.360 --> 02:44.700
qui al secondo elemento e quindi sostituirlo

02:44.700 --> 02:46.870
con un numero sarebbe consentito, perché

02:46.870 --> 02:48.680
stiamo solo dicendo qualcosa sui

02:48.680 --> 02:50.886
tipi che generalmente possiamo usare qui

02:50.886 --> 02:52.580
dentro.

02:52.580 --> 02:55.040
Sappiamo che vogliamo avere esattamente questa struttura.

02:55.040 --> 02:58.094
Due elementi, primo elemento numero, secondo elemento

02:58.094 --> 03:01.770
stringa, ma TypeScript non lo fa. In questo caso, una tupla

03:01.770 --> 03:05.865
sarebbe perfetta. Possiamo dire a TypeScript quale

03:05.865 --> 03:10.865
deve essere il ruolo, impostando esplicitamente il tipo di ruolo.

03:11.010 --> 03:13.230
Quindi abbiamo un esempio in cui TypeScript

03:13.230 --> 03:16.600
non esegue la fototipizzazione, ma noi vogliamo sovrascriverla

03:16.600 --> 03:19.927
esplicitamente. Ora, possiamo aggiungere un

03:19.927 --> 03:23.041
tipo di oggetto esplicito, aggiungendo i due punti

03:23.041 --> 03:27.023
dopo persona, poi le parentesi graffe e quindi i nomi devono essere

03:27.023 --> 03:31.180
una stringa, l'età un numero e gli hobby un array di stringhe.

03:31.180 --> 03:33.740
Quindi tutto come dedotto da TypeScript.

03:33.740 --> 03:35.401
Per questo, non avremmo richiesto questo

03:35.401 --> 03:36.827
incarico esplicito e, come si apprende,

03:36.827 --> 03:38.789
sarebbe stato negativo.

03:38.789 --> 03:40.470
Ma ora abbiamo uno scenario

03:40.470 --> 03:43.565
in cui l'inferenza non funziona nel modo desiderato

03:43.565 --> 03:47.510
e vogliamo che il ruolo sia una tupla.

03:47.510 --> 03:49.730
Ora, invece di impostare un array di due stringhe

03:49.730 --> 03:51.660
o un array di numeri o di usare lo stesso

03:51.660 --> 03:55.180
tipo che prima non era il terzo, possiamo usare un tipo speciale.

03:55.180 --> 03:56.810
Utilizziamo di nuovo le parentesi

03:56.810 --> 04:01.710
quadre, ma ora all'interno delle parentesi quadre aggiungiamo un numero, poi una virgola

04:01.710 --> 04:03.637
e infine una stringa.

04:03.637 --> 04:07.340
Ora, questo segna un tipo di tupla.

04:07.340 --> 04:10.729
Una tupla è un costrutto speciale, che TypeScript capisce,

04:10.729 --> 04:13.310
in Java scripted sarà un normale array, ma durante

04:13.310 --> 04:15.750
lo sviluppo con TypeScript, otterremo errori

04:15.750 --> 04:18.190
con codice come questo.

04:18.190 --> 04:20.313
Cosa fanno le tuple?

04:21.620 --> 04:23.564
Questo qui, dice TypeScript, voglio

04:23.564 --> 04:27.195
avere un array speciale, con esattamente due elementi, perché

04:27.195 --> 04:30.160
ho esattamente due tipi lì dentro e il primo elemento

04:30.160 --> 04:32.020
dovrebbe essere un numero.

04:32.020 --> 04:35.436
Il secondo elemento dovrebbe essere una stringa,

04:35.436 --> 04:39.033
quindi, se compiliamo questo codice, otterrò

04:40.663 --> 04:45.000
un errore relativo al fatto che 10 non è assegnabile come

04:45.000 --> 04:48.346
tipo, perché vogliamo avere una stringa come

04:48.346 --> 04:50.822
secondo valore e se assegno 10 come

04:50.822 --> 04:52.660
secondo valore, ovviamente

04:52.660 --> 04:56.544
non seguo questa regola.

04:56.544 --> 05:01.544
Se si commenta questo e si compila, funziona.

05:02.240 --> 05:06.290
È un po' strano, perché il push funziona qui, perché stiamo tutti

05:06.290 --> 05:08.610
dicendo che il ruolo dovrebbe avere

05:08.610 --> 05:11.901
esattamente due elementi, quindi perché possiamo

05:11.901 --> 05:14.980
spingere admin nell'array dei ruoli.

05:14.980 --> 05:19.300
Push è in realtà un'eccezione consentita nelle tuple.

05:19.300 --> 05:22.410
Purtroppo TypeScript non è in grado di rilevare questo errore,

05:22.410 --> 05:24.840
ma almeno ci assicura che non stiamo assegnando

05:24.840 --> 05:28.570
un valore sbagliato e, al di fuori del push, otteniamo anche un supporto

05:28.570 --> 05:31.500
per quanto riguarda la lunghezza.

05:31.500 --> 05:33.671
Se impostiamo il ruolo di persona su un nuovo valore.

05:33.671 --> 05:36.420
Ad esempio, un array vuoto non è ammesso, mentre

05:36.420 --> 05:39.710
è ammesso un array con esattamente la struttura che abbiamo

05:39.710 --> 05:43.510
definito qui sopra, se aggiungo un elemento in più qui.

05:43.510 --> 05:45.880
Poi si ottiene di nuovo un errore.

05:45.880 --> 05:49.300
Quindi la lunghezza viene applicata se la assegniamo in questo modo, ma

05:49.300 --> 05:50.720
non per una spinta e così via.

05:50.720 --> 05:52.840
Si tratta di un aspetto di cui bisogna essere

05:52.840 --> 05:55.580
consapevoli, ma il fatto di poter disporre di questo

05:55.580 --> 05:57.899
supporto è piuttosto piacevole e se si ha uno scenario

05:57.899 --> 06:02.240
in cui si ha bisogno esattamente di una quantità X di valori in un array e si conosce in

06:02.240 --> 06:05.130
anticipo il tipo di ciascun valore, allora si potrebbe prendere

06:05.130 --> 06:07.900
in considerazione una tupla al posto di un array, per ottenere

06:07.900 --> 06:11.313
un maggior rigore nella propria applicazione e per essere ancora

06:11.313 --> 06:15.230
più chiari sul tipo di dati con cui si sta lavorando e sul tipo di dati che ci si

06:15.230 --> 06:17.543
aspetta.
