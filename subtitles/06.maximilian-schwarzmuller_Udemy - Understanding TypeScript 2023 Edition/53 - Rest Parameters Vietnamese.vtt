WEBVTT

00:02.060 --> 00:04.880
Người đàn ông: Loại liên quan đến toán tử trải

00:04.880 --> 00:07.060
rộng là các tham số còn lại.

00:07.060 --> 00:10.374
Và để làm được điều đó, tôi sẽ chỉnh sửa chức năng thêm của mình một lần nữa.

00:10.374 --> 00:13.870
Vì vậy, tôi sẽ nhận xét tất cả mã đó ở đây để

00:13.870 --> 00:15.780
không có gì bị hỏng.

00:15.780 --> 00:20.520
Và thêm lại chức năng thêm của tôi với bất kỳ cú pháp nào bạn muốn với từ khóa chức

00:20.520 --> 00:22.760
năng là chức năng mũi tên, bất cứ thứ

00:22.760 --> 00:23.830
gì bạn muốn.

00:23.830 --> 00:26.360
Nhưng bây giờ tôi muốn có một chức năng đặc biệt.

00:26.360 --> 00:29.100
Tôi không muốn giới hạn nó ở hai giá trị, tôi

00:29.100 --> 00:31.340
muốn có thể thêm bao nhiêu giá trị khi

00:31.340 --> 00:33.290
người dùng chuyển vào.

00:33.290 --> 00:37.700
Vì vậy, về cơ bản chúng ta có thể gọi add như thế này,

00:37.700 --> 00:42.700
five, ten, two, three dot seven, v.v., với bao nhiêu giá

00:42.880 --> 00:44.530
trị tùy thích.

00:44.530 --> 00:46.691
Nếu bạn muốn gọi nó với 10 giá trị, điều đó cũng

00:46.691 --> 00:48.090
có thể thực hiện được.

00:48.090 --> 00:51.160
Tuy nhiên, bây giờ tất nhiên, ngay bây giờ điều đó là không thể

00:51.160 --> 00:52.600
như bạn có thể thấy rõ ràng.

00:52.600 --> 00:54.290
Bản đánh máy đang báo lỗi cho tôi

00:54.290 --> 00:57.760
và đúng như vậy, bởi vì tôi không chấp nhận đối số nào ở đây.

00:57.760 --> 01:00.336
Tất nhiên bây giờ tôi có thể chấp nhận các đối số ở đây

01:00.336 --> 01:02.210
và chỉ định các loại chính xác, nhưng

01:02.210 --> 01:04.300
nếu sau đó tôi gọi nó bằng năm thì sao.

01:04.300 --> 01:06.330
Như tôi đã nói, tôi muốn linh hoạt.

01:06.330 --> 01:08.850
Đó là nơi các tham số còn lại xuất hiện.

01:08.850 --> 01:13.111
Ở nơi bạn mong đợi một danh sách các giá trị, vì vậy không phải nơi

01:13.111 --> 01:15.270
bạn muốn chuyển nó mà là nơi bạn muốn

01:15.270 --> 01:18.308
chấp nhận nó dưới dạng giá trị đến, bạn cũng có

01:18.308 --> 01:20.360
thể sử dụng dấu ba chấm và sau đó

01:20.360 --> 01:24.043
là bất kỳ tên nào bạn chọn, chẳng hạn như số.

01:25.630 --> 01:27.430
Bây giờ điều này sẽ làm

01:27.430 --> 01:31.470
là, nó sẽ hợp nhất tất cả các tham số đến hoặc nói chung

01:31.470 --> 01:34.920
là danh sách các giá trị đến, danh sách các giá

01:34.920 --> 01:39.350
trị được phân tách bằng dấu phẩy thành một mảng.

01:39.350 --> 01:40.940
Vì vậy, các số ở đây sẽ là một mảng,

01:40.940 --> 01:44.460
nhưng tất nhiên mặc định là một loại giá trị bất kỳ, vì vậy một mảng có

01:44.460 --> 01:46.920
đầy đủ các giá trị bất kỳ, và đó không phải là điều

01:46.920 --> 01:48.300
chúng ta nên làm, chúng ta nên

01:48.300 --> 01:49.680
nói rõ ràng hơn.

01:49.680 --> 01:53.200
Và ở đây chúng ta có thể nói, "Nó sẽ là một mảng số. Như vậy.

01:53.200 --> 01:54.430
Vì vậy, bây giờ chúng tôi đang xác

01:54.430 --> 01:56.420
định đúng loại và bây giờ làm việc với mảng số đó.

01:56.420 --> 01:58.710
Bây giờ chúng ta có thể tóm tắt điều đó theo một vài cách khác nhau.

01:58.710 --> 02:01.880
Chúng ta có thể làm việc với một biến kết quả và sau đó

02:01.880 --> 02:04.110
là bốn vòng lặp vì các số là một mảng.

02:04.110 --> 02:06.863
Vì vậy, ở đây chúng ta có thể lặp qua các

02:06.863 --> 02:09.260
số và thêm số đó vào kết quả.

02:09.260 --> 02:11.519
Hoặc chúng ta sử dụng phương thức rút gọn có sẵn trên mảng.

02:11.519 --> 02:15.620
Giảm hoạt động sao cho nó thực hiện một thao tác trên mọi phần

02:15.620 --> 02:19.030
tử trong một mảng, trả về kết quả và sau đó cộng các

02:19.030 --> 02:20.940
kết quả này lại với nhau.

02:20.940 --> 02:24.310
Để làm được điều đó, bạn cung cấp một hàm để giảm và

02:24.310 --> 02:27.160
sau đó là giá trị bắt đầu ở đây bằng không.

02:27.160 --> 02:31.093
Và sau đó, hàm này mà bạn truyền để tự giảm sẽ nhận

02:31.093 --> 02:33.430
hai đối số và đó là kết quả hiện

02:33.430 --> 02:35.920
tại mà bạn có thể nói.

02:35.920 --> 02:38.968
Và đó là giá trị hiện tại mà chúng ta

02:38.968 --> 02:42.640
đang xem xét, sẽ là từng giá trị của mảng.

02:42.640 --> 02:45.350
Và sau đó ở đây bạn có thể trả về cuResult, giá trị

02:45.350 --> 02:48.290
này cho lần chạy đầu tiên sẽ là giá trị ban đầu ở đây.

02:48.290 --> 02:51.497
Cộng với curValue.

02:51.497 --> 02:52.703
Và nếu bạn làm điều đó, giảm tổng thể ở đây sẽ trả về một số.

02:53.859 --> 02:57.920
Vì vậy, ở đây chúng ta có thể trả về tổng thể kết quả là

02:57.920 --> 03:01.160
các số đã giảm và do đó, biến thêm hoặc hằng

03:01.160 --> 03:04.790
số ở đây cuối cùng sẽ giữ một hàm nhận một vài số

03:04.790 --> 03:07.320
chứ không phải một mảng số.

03:07.320 --> 03:10.650
Nhưng do các tham số còn lại, một danh sách các

03:10.650 --> 03:13.690
số, sau đó được hợp nhất thành một mảng bên

03:13.690 --> 03:16.510
trong hàm và trả về số cuối cùng.

03:16.510 --> 03:18.550
Vì vậy, bây giờ nếu chúng ta lưu mọi thứ,

03:18.550 --> 03:20.350
tất cả sẽ hoạt động và chúng ta sẽ thấy

03:20.350 --> 03:23.350
kết quả, tổng của phần bổ sung nhỏ của chúng ta ở đây.

03:23.350 --> 03:26.250
Vì vậy, đó là các tham số còn lại, một tính

03:26.250 --> 03:28.430
năng thực sự hữu ích để chấp nhận

03:28.430 --> 03:31.400
số lượng đối số không giới hạn.

03:31.400 --> 03:34.210
Và một vài phương thức tích hợp sẵn như phương thức

03:34.210 --> 03:36.680
đẩy hoạt động chính xác theo cách đó.

03:36.680 --> 03:38.540
Bạn thấy đấy, đẩy ở đây có định nghĩa tham số kỳ lạ này.

03:38.540 --> 03:42.560
Vâng, đó chính xác là những gì chúng ta vừa học được.

03:42.560 --> 03:44.250
Đẩy vào đây lấy một vài

03:44.250 --> 03:48.490
mục cho mảng này, đây là một mảng chứa đầy các chuỗi.

03:48.490 --> 03:50.400
Phải mất một vài chuỗi.

03:50.400 --> 03:51.730
Và điều này không có nghĩa là nó

03:51.730 --> 03:54.060
nhận vào một mảng các chuỗi, mà thay vào đó, ở đây có

03:54.060 --> 03:56.400
các tham số còn lại, một danh sách các chuỗi được phân

03:56.400 --> 03:58.580
tách bằng dấu phẩy, sau đó các chuỗi nằm ngoài hiên

03:58.580 --> 04:01.260
được hợp nhất thành một mảng và được xử lý nội bộ.

04:01.260 --> 04:03.100
Đó là cú pháp tham số còn lại.

04:03.100 --> 04:06.276
Nhân tiện, bạn thậm chí có thể kết hợp điều này với các bộ dữ liệu.

04:06.276 --> 04:10.370
Nếu bạn muốn hỗ trợ nhiều đối số nhưng bạn biết nó sẽ có

04:10.370 --> 04:15.370
bao nhiêu đối số, vì vậy nếu đó không phải là danh sách không giới

04:16.520 --> 04:18.420
hạn, thì bạn cũng có thể sử

04:18.420 --> 04:20.392
dụng loại bộ ở đó.

04:20.392 --> 04:23.430
Và ví dụ, hãy nói, "Tôi chấp nhận số điện thoại miễn phí của mình ở đây. Và sau đó tôi phải loại bỏ

04:23.430 --> 04:28.430
đối số thứ tư ở đây tất nhiên khi gọi hàm.

04:28.460 --> 04:30.910
Bởi vì bây giờ tôi khá rõ ràng rằng tôi muốn nhận ba đối

04:30.910 --> 04:32.240
số, mỗi đối số là các số.

04:32.240 --> 04:33.830
Vì vậy, tất nhiên chúng ta có thể

04:33.830 --> 04:36.980
chỉ cần thêm ba tham số độc lập ở đây, nhưng cú pháp này vẫn có thể ngắn

04:36.980 --> 04:39.030
hơn một chút hoặc dễ thiết lập hơn so với việc

04:39.030 --> 04:40.720
thêm các tham số miễn phí.

04:40.720 --> 04:43.090
Nó thực sự phụ thuộc vào ứng dụng của bạn và yêu cầu của bạn.

04:43.090 --> 04:46.919
Ở đây, tôi sẽ rời khỏi thiết lập đó và trở nên

04:46.919 --> 04:51.320
chung chung hơn và chấp nhận càng nhiều đối số càng

04:51.320 --> 04:55.210
tốt vì đối với chức năng này, tôi thực sự có

04:55.210 --> 04:57.864
thể xử lý vô số đối số.
