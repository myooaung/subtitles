WEBVTT

00:02.140 --> 00:04.980
-: Así que puede utilizar tipos para los parámetros

00:04.980 --> 00:06.750
de la función y para el valor de retorno

00:06.750 --> 00:08.100
de la función.

00:08.100 --> 00:10.420
Ahora, para llevarlo al siguiente nivel,

00:10.420 --> 00:14.820
¿qué pasaría si su también fuera un tipo de función en sí mismo.

00:14.820 --> 00:17.170
Ahora permítanme aclarar lo que quiero decir.

00:17.170 --> 00:19.333
Digamos que tenemos una variable 'combinevalues'

00:21.360 --> 00:24.200
y esta variable por defecto tiene un tipo 'any. Ahora bien, como has aprendido, "cualquiera" no es tan útil.

00:24.200 --> 00:26.860
Lo que quiero hacer finalmente es, quiero

00:26.860 --> 00:29.617
establecer 'combinevalues' igual a 'add. Así que quiero almacenar esa función 'add',

00:29.617 --> 00:32.600
un puntero a esta función 'add', en 'combinevalues'

00:32.600 --> 00:35.330
para que al final, podamos registrar en la consola,

00:35.330 --> 00:39.160
combinar valores, y ejecutar 'combinevalues' como una función

00:39.160 --> 00:41.580
a la que tiene 8 y 8.

00:41.580 --> 00:44.520
Ahora bien, si guardo eso, y ejecuto esto, después

00:44.520 --> 00:47.480
de compilarlo, así que he compilado este archivo

00:47.480 --> 00:52.130
y luego dejamos que esto se recargue, obtenemos 16 aquí.

00:52.130 --> 00:54.660
Por lo tanto, eso funciona, y esperaríamos que funcionara porque es

00:54.660 --> 00:55.840
un código JavaScript normal.

00:55.840 --> 00:58.820
Podemos almacenar un puntero a una función,

00:58.820 --> 01:00.880
en una variable numérica, y luego

01:00.880 --> 01:03.350
la oferta ejecutar esta variable como

01:03.350 --> 01:05.440
una función, porque, bueno, apunta

01:05.440 --> 01:07.300
a la función, ¿no?

01:07.300 --> 01:08.580
Así que podemos ejecutar esa función, a través de esa variable.

01:08.580 --> 01:09.910
El problema que tenemos

01:09.910 --> 01:13.250
con este fragmento aquí desde una perspectiva de TypeScript,

01:13.250 --> 01:15.900
sólo es que 'combinevalues' es cualquiera.

01:15.900 --> 01:19.640
Así que si establezco 'combinevalues' a un número aquí, por supuesto, no

01:19.640 --> 01:20.670
podemos compilar esto

01:20.670 --> 01:24.520
desafortunadamente porque TypeScript no tiene ninguna posibilidad de detectar

01:24.520 --> 01:27.910
que esto no es deseado o que podría causar un problema.

01:27.910 --> 01:30.543
Pero en tiempo de ejecución, obtendría un error porque

01:30.543 --> 01:34.230
obviamente intentamos ejecutar 'combinevalues' como función, cuando

01:34.230 --> 01:36.220
en realidad es un número.

01:36.220 --> 01:39.090
Ahora queremos evitar esto, y para ello tenemos que tener

01:39.090 --> 01:42.080
claro que 'combinevalues' contendrá una función.

01:42.080 --> 01:44.870
Ahora, el primer paso en esa dirección,

01:44.870 --> 01:48.650
es que establecemos el tipo aquí, a la función.

01:48.650 --> 01:50.550
Function es un tipo proporcionado

01:50.550 --> 01:54.770
por TypeScript al final, y esto deja claro que cualquier cosa que almacenemos

01:54.770 --> 01:57.940
aquí tiene que ser una función.

01:57.940 --> 02:00.870
Por lo tanto, aquí estoy recibiendo un error, porque 5 es un

02:00.870 --> 02:02.230
número y no una función.

02:02.230 --> 02:05.350
Y si comento esto, podemos compilar esto, de lo contrario obtendríamos

02:05.350 --> 02:06.660
un error durante la compilación,

02:06.660 --> 02:09.670
y ahora es de nuevo se ejecuta como se esperaba.

02:09.670 --> 02:12.860
Así que esto es bueno, pero no es perfecto porque ahora

02:12.860 --> 02:15.380
decimos que esto debe ser una función, pero

02:15.380 --> 02:17.940
también podría establecer 'combinevalues'

02:17.940 --> 02:21.460
igual a 'printResult' por ejemplo aquí.

02:21.460 --> 02:25.290
Y por supuesto TypeScript no se quejaría porque 'printResult' es

02:25.290 --> 02:27.150
una función, pero por supuesto no

02:27.150 --> 02:29.600
es una función que tome dos argumentos.

02:29.600 --> 02:32.620
Así que de nuevo si compilo esto, TypeScript no se quejará.

02:32.620 --> 02:34.800
Pero si recargamos vemos undefined aquí y Resultado 8.

02:34.800 --> 02:38.720
Así que no obtengo el resultado que quiero porque

02:38.720 --> 02:42.470
almacené la función equivocada allí.

02:42.470 --> 02:45.980
De nuevo, estaría bien que TypeScript

02:45.980 --> 02:47.350
nos lo dijera.

02:47.350 --> 02:49.980
TypeScript no puede informarnos sobre esto porque todo lo que

02:49.980 --> 02:51.340
le dijimos a TypeScript es que queremos

02:51.340 --> 02:54.410
almacenar una función allí y este es claramente el caso.

02:54.410 --> 02:58.040
Así que sería bueno si pudiéramos ser más precisos en

02:58.040 --> 03:00.550
cuanto a cómo debe ser la función que

03:00.550 --> 03:03.810
queremos almacenar en 'combinevalues'. Y ahí es donde entran en juego los tipos de función.

03:03.810 --> 03:07.200
Los tipos de función son tipos que describen una función

03:07.200 --> 03:08.380
en relación con los

03:08.380 --> 03:11.900
parámetros y el valor de retorno de esa función.

03:11.900 --> 03:15.690
Un tipo de función se crea con esta notación de función de flecha

03:15.690 --> 03:18.360
que usted conoce de JavaScript o al menos cerca

03:18.360 --> 03:19.870
de esa notación.

03:19.870 --> 03:23.710
No añades llaves aquí porque no estamos creando una función

03:23.710 --> 03:25.530
de flecha aquí, estamos creando

03:25.530 --> 03:28.890
un tipo de función en su lugar.

03:28.890 --> 03:31.610
Ahora, en el lado derecho de esta flecha, se especifica el tipo

03:31.610 --> 03:33.690
de retorno de la función que eventualmente quiere

03:33.690 --> 03:35.450
ser capaz de almacenar aquí.

03:35.450 --> 03:37.180
Ese debería ser el número.

03:37.180 --> 03:40.840
Ahora con eso estamos diciendo, 'combinevalues' acepta cualquier

03:40.840 --> 03:42.640
función que no toma parámetros y

03:42.640 --> 03:44.120
devuelve un número.

03:44.120 --> 03:47.200
Por supuesto, eso no es del todo lo que queremos.

03:47.200 --> 03:50.430
Queremos asegurarnos de que 'combinevalues' toma una función o

03:50.430 --> 03:51.840
es capaz de almacenar funciones

03:51.840 --> 03:54.180
que toman 2 números y devuelven un número.

03:54.180 --> 03:57.130
Y para ello podemos añadir parámetros

03:57.130 --> 04:01.400
aquí a este tipo de función.

04:01.400 --> 04:02.400
No tenemos que coincidir con

04:02.400 --> 04:05.040
los nombres de los parámetros de ahí arriba, sólo con los tipos.

04:05.040 --> 04:06.020
Así que podríamos tener

04:06.020 --> 04:09.060
a que debería ser de tipo número y b que debería ser de tipo número.

04:09.060 --> 04:10.510
Y ahora lo que estamos diciendo

04:10.510 --> 04:14.070
a TypeScript es que 'combinevalues' debería aceptar cualquier

04:14.070 --> 04:15.660
función que tome dos parámetros

04:15.660 --> 04:18.322
donde cada parámetro sea un número, y donde

04:18.322 --> 04:22.930
la función en general devuelva un número.

04:22.930 --> 04:24.350
Y por eso TypeScript no se queja de que

04:24.350 --> 04:27.780
almacenemos 'add' en valores combinados, porque 'add' es una función que satisface

04:27.780 --> 04:29.690
perfectamente esta definición de tipo.

04:29.690 --> 04:33.380
Pero sí se queja de 'printResult' porque 'printResult'

04:33.380 --> 04:36.890
como nos dice aquí, es una función de tipo un argumento

04:36.890 --> 04:40.632
que es un número, no se devuelve nada, cuando en realidad

04:40.632 --> 04:44.360
esperamos obtener una función con dos argumentos

04:44.360 --> 04:48.690
donde cada argumento es un número y también devolvemos

04:48.690 --> 04:52.310
un número.

04:52.310 --> 04:55.810
Así que tenemos un desajuste aquí, y si tratara de compilar

04:55.810 --> 04:58.700
esto, por lo tanto obtendríamos un error aquí,

04:58.700 --> 05:00.480
por supuesto, en el compilador,

05:00.480 --> 05:03.440
y sólo podemos arreglar esto mediante la eliminación

05:03.440 --> 05:06.270
de esta línea de código.

05:06.270 --> 05:07.110
Ahora somos capaces de recompilar esto sin errores.

05:07.110 --> 05:10.930
Y ahora esto funciona como se esperaba.

05:10.930 --> 05:12.060
Así que los tipos de función,

05:12.060 --> 05:15.140
nos permiten describir qué tipo de función específicamente

05:15.140 --> 05:17.413
queremos utilizar en algún lugar.

05:18.290 --> 05:20.887
Ya sea un valor esperado en un parámetro,

05:20.887 --> 05:23.890
para crear una función con algún call back, o, como

05:23.890 --> 05:25.420
aquí, una variable.
