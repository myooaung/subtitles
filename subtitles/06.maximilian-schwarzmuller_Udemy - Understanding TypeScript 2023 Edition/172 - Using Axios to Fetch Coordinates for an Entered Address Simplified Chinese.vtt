WEBVTT

00:02.390 --> 00:06.890
教师：现在发送请求不需要第三方软件包｡

00:06.890 --> 00:10.140
在现代浏览器的JavaScript中,

00:10.140 --> 00:11.910
你必须获取API｡

00:11.910 --> 00:13.620
这是内置在浏览器中的,

00:13.620 --> 00:19.600
它是一个全球可用的功能, 你可以用它来发送请求到URL｡

00:19.600 --> 00:22.450
现在, 除了错误处理可能有点笨拙之外,

00:22.450 --> 00:27.210
没有什么可以反对这个API｡

00:27.210 --> 00:31.123
但我也想练习第三方库的使用｡

00:31.960 --> 00:36.070
因此, 我们将使用非常流行的axios包｡ 

00:36.070 --> 00:38.510
这是一个可以在JavaScript中使用的包,

00:38.510 --> 00:43.510
因此也可以在TypeScript中使用它来发送HTTP请求｡

00:43.880 --> 00:47.263
所以我们只需要安装axios就可以开始使用它了｡ 

00:48.100 --> 00:51.080
在我们的项目中, 我们可以使用NPM来管理依赖项,

00:51.080 --> 00:54.150
我们可以运行npm install, dash,

00:54.150 --> 01:00.520
dash save axios, 就像这样, 现在将安装axios包｡

01:00.520 --> 01:04.750
安装了这个之后, 我们现在可以在这里导入axios,

01:04.750 --> 01:09.170
从axios导入axios, 你会看到一些有趣的东西｡

01:09.170 --> 01:12.090
如果我现在开始使用这个, 我在这里输入一个点,

01:12.090 --> 01:13.990
我会得到自动完成｡

01:13.990 --> 01:18.523
例如, 这里有一个get方法, 它将向URL发送get请求｡

01:19.850 --> 01:23.150
因此, 我们实际上获得了内置的TypeScript支持｡ 

01:23.150 --> 01:25.640
如果我们转到节点模块,

01:25.640 --> 01:29.670
看看axios包, 它就在这里｡

01:29.670 --> 01:33.970
你会看到, 在那里, 有一个索引｡  dts档案｡ 

01:33.970 --> 01:43.750
因此, axios库的作者已经将他们的库与这样一个TypeScript翻译包捆绑在一起｡

01:43.750 --> 01:47.440
在那里, 一切都向TypeScript解释｡ 

01:47.440 --> 01:55.600
这个包或者这个文件基本上向TypeScript解释了这个JavaScript库能够做什么以及它使用哪些类型｡

01:55.600 --> 01:59.100
现在有些库会这样做, axios就是其中之一｡ 

01:59.100 --> 02:03.420
如果你开始使用一个库, 你可以很快地知道它是否这样做｡

02:03.420 --> 02:05.520
如果没有自动完成支持,

02:05.520 --> 02:07.930
并且出现了很多编译错误,

02:07.930 --> 02:10.750
则可能需要安装额外的类型｡

02:10.750 --> 02:12.970
如果您获得了像我们在这里所做的那样的良好支持,

02:12.970 --> 02:20.170
并且此后不会出现编译错误, 那么您已经获得了一个内置类型转换的库｡

02:20.170 --> 02:23.120
因此, 您不需要安装任何额外的类型｡ 

02:23.120 --> 02:26.240
很高兴知道, 这里我们有一个很好的例子｡ 

02:26.240 --> 02:27.800
因此, 由于我们有内置的支持,

02:27.800 --> 02:30.410
我们可以立即开始使用访问｡

02:30.410 --> 02:34.350
现在我想向这个URL发送一个HTTP请求｡ 

02:34.350 --> 02:37.980
复制此URL并在此处输入｡ 

02:37.980 --> 02:40.220
我将在反勾之间输入它来创建一个模板文字,

02:40.220 --> 02:49.050
这样他们就可以很容易地将这个字符串的一部分替换为其他值的dynamic｡

02:49.050 --> 02:51.730
我们粘贴该字符串, 它很长,

02:51.730 --> 02:55.460
我们先用存储在该常量中的Google

02:55.460 --> 02:59.210
API密钥替换末尾的API密钥｡

02:59.210 --> 03:01.690
为此, 由于这是一个模板文字,

03:01.690 --> 03:04.110
我们可以添加美元符号､ 花括号,

03:04.110 --> 03:09.110
然后指向Google API键以使用此常量｡

03:10.820 --> 03:13.240
另外, 让我们交换一下这个地址｡ 

03:13.240 --> 03:15.500
这里我们输入了一个虚拟地址,

03:15.500 --> 03:19.300
当然, 我想使用用户输入的地址｡

03:19.300 --> 03:22.540
现在有一个重要的注意事项, 这个地址,

03:22.540 --> 03:24.910
当然, 正是用户输入的文本,

03:24.910 --> 03:27.560
他们提供的可以包含特殊字符,

03:27.560 --> 03:30.650
空格, 逗号, 等等｡

03:30.650 --> 03:35.580
URL中并不支持所有这些字符和符号｡

03:35.580 --> 03:40.550
因此, 我们需要将输入的字符串转换为与URL兼容的字符串｡

03:40.550 --> 03:46.940
谢天谢地, TypeScript和JavaScript有一个内置的函数可以帮助我们,

03:46.940 --> 03:50.460
那就是编码URI函数｡

03:50.460 --> 03:53.020
我们可以调用它并向它传递一个字符串,

03:53.020 --> 03:57.460
它会将该字符串转换为与URL兼容的字符串｡

03:57.460 --> 03:59.845
这样, 我们就得到了完整的URL,

03:59.845 --> 04:04.900
我们可以向该URL发送请求以取回我们的坐标｡

04:04.900 --> 04:07.390
现在get给了我们一个承诺, 因为当然,

04:07.390 --> 04:10.620
将这样的请求作为异步任务发送｡

04:10.620 --> 04:13.430
如果成功, 我们会有一个then日志,

04:13.430 --> 04:15.690
如果出现技术错误或错误响应代码,

04:15.690 --> 04:18.620
我们会捕获｡

04:18.620 --> 04:21.560
在这里, 我们将控制台记录此时可能出现的任何错误,

04:21.560 --> 04:24.710
因为通常我们应该成功｡

04:24.710 --> 04:27.820
因此在这里, 我希望在then块中得到我的响应,

04:27.820 --> 04:32.400
我也希望记录这个响应｡

04:32.400 --> 04:35.820
所以现在, 我想说, 让我们看看这给我们带来了什么｡ 

04:35.820 --> 04:39.720
让我们重新运行NPM start, 再次启动Webpack进程,

04:39.720 --> 04:40.953
并开始构建它｡

04:42.120 --> 04:43.790
让我们回到我们的应用程序,

04:43.790 --> 04:47.220
输入一个像第六大道这样的地方｡

04:47.220 --> 04:51.480
如果我点击搜索地址, 你会看到一段时间后, 你会得到一个输出在这里｡

04:51.480 --> 04:53.660
在那里, 您应该有一个状态代码200,

04:53.660 --> 04:56.120
这意味着请求成功｡

04:56.120 --> 05:01.240
还有一个数据字段, 用于保存服务器回复的数据｡

05:01.240 --> 05:03.890
这个数据字段有一个结果字段,

05:03.890 --> 05:06.570
其中有一个数组｡

05:06.570 --> 05:10.690
在这个数组中, 我们有几个项, 数量是可变的｡ 

05:10.690 --> 05:13.770
这些基本上就是谷歌找到的结果｡ 

05:13.770 --> 05:16.740
第一个结果通常是最好的｡ 

05:16.740 --> 05:20.460
如果你看一下, 我们可以看到格式化的地址｡

05:20.460 --> 05:26.570
因此, Google找到的我们输入的地址比我们输入的要完整一些｡

05:26.570 --> 05:29.300
我们在这里找到了几何学的关键｡ 

05:29.300 --> 05:31.880
如果我们把它展开, 我们会看到它又有一个位置键,

05:31.880 --> 05:39.700
最后是一个有我们感兴趣的坐标的对象, 一个纬度和一个经度｡

05:39.700 --> 05:43.000
最后, 我们必须深入研究数据､ 结果,

05:43.000 --> 05:50.030
然后是第一个结果､ 几何形状､ 位置, 我们将得到一个带有纬度和经度的对象｡

05:50.030 --> 05:55.240
稍后我们就能在地图上显示出这个纬度和经度｡

05:55.240 --> 05:57.430
现在, 我们先把它提取出来,

05:57.430 --> 06:04.360
然后通过访问响应点数据点结果来得到坐标｡

06:04.600 --> 06:13.093
然后是第一个结果点的几何位置点, 所以真的钻到这个｡

06:15.130 --> 06:16.880
现在, 您当然会注意到, 虽然TypeScript在这里没有抱怨,

06:16.880 --> 06:19.850
但我们在这里也没有得到好的TypeScript支持,

06:19.850 --> 06:23.280
对吗？

06:23.280 --> 06:27.620
如果我在这里输入一个点, 这并不意味着有一个结果属性｡

06:27.620 --> 06:30.350
事实上, 我可以尝试访问这里的任何东西,

06:30.350 --> 06:34.820
甚至是响应中不存在的东西, 这是有意义的｡

06:34.820 --> 06:40.920
TypeScript如何知道我向其发送请求的任何URL的响应内容？

06:40.920 --> 06:46.510
TypeScript不会在开发过程中发送请求以找出其中的内容,

06:46.510 --> 06:49.170
这也不是很好｡

06:49.170 --> 06:53.950
但是我们可以告诉TypeScript我们希望在响应中包含什么,

06:53.950 --> 07:02.830
因为这个get方法实际上是一个泛型方法, 这里有任何东西, 实际上就是我们希望得到的响应的类型｡

07:02.830 --> 07:06.880
所以在这里, 我可以添加我的响应类型,

07:06.880 --> 07:11.270
我可以告诉TypeScript, 我期望的是一个对象,

07:11.270 --> 07:18.330
它有一个结果键, 然后是一个充满对象的数组, 其中每个对象都有一个几何键,

07:18.330 --> 07:24.330
然后是一个对象, 它有一个位置键, 然后是一个对象, 它有一个纬度,

07:24.330 --> 07:33.510
一个数字, 和一个经度, 一个数字｡

07:33.510 --> 07:36.030
所以绝对是相当复杂的类型｡ 

07:36.030 --> 07:42.220
但是, 如果我们在这里输入一个点, 我会自动完成, TypeScript会理解我在这里访问的内容｡

07:42.220 --> 07:46.620
当然, 我们也可以从这里提取这个类型, 并创建我们自己的类型别名｡

07:46.620 --> 07:50.497
也许在这里, 谷歌地理编码的反应｡ 

07:53.220 --> 07:55.380
这将是我的自定义类型, 然后我可以告诉TypeScript,

07:55.380 --> 08:01.540
我希望在这里得到Google地理编码响应｡

08:01.540 --> 08:03.900
当然, 现在响应实际上包含的不仅仅是结果数组,

08:03.900 --> 08:09.460
它还有一个状态代码, 在结果数组的每个项目中还有多个其他字段,

08:09.460 --> 08:13.040
然后是几何图形｡

08:13.040 --> 08:25.640
当然, 现在您可以简单地将所有这些字段添加到您的自定义类型中, 但在这里我只想关注我感兴趣的值｡

08:25.640 --> 08:27.360
因此, 我将添加另一个字段,

08:27.360 --> 08:30.900
即结果旁边的状态｡

08:30.900 --> 08:35.500
所以在最高层, 我们得到了状态, 这将是一个字符串,

08:35.500 --> 08:38.390
它告诉我们谷歌是否成功｡

08:38.390 --> 08:44.010
而状态实际上要么是好的, 要么是其他几个值｡

08:44.010 --> 08:46.910
这基本上是一个状态消息谷歌回应告诉我们,

08:46.910 --> 08:51.890
它是否成功地获取坐标, 为这个地址或没有｡

08:51.890 --> 08:57.280
当然, 在官方文档中, 我们可以了解到我们可能会得到什么样的回答｡

08:57.280 --> 08:58.900
如果向下滚动一点并单击了解响应,

08:58.900 --> 09:07.000
您将了解返回的响应中包含的内容, 因此单击地理编码响应｡

09:07.000 --> 09:08.580
然后在状态代码中,

09:08.580 --> 09:11.090
我们了解可用的状态代码｡

09:11.090 --> 09:15.090
例如, 如果什么都没有找到, 我们都得到零结果｡ 

09:15.090 --> 09:16.850
我们还有其他几个密码,

09:16.850 --> 09:19.223
但在这里我只关心这两个｡

09:20.200 --> 09:23.310
所以我告诉TypeScript, 在这里, 我得到了一个状态代码,

09:23.310 --> 09:24.890
它是这两个值之一｡

09:24.890 --> 09:27.480
同样, 它也可能有一个数值,

09:27.480 --> 09:29.830
但这对我来说很好｡

09:29.830 --> 09:33.700
正如我所说的, 你当然可以用更完整的方式来写｡

09:33.700 --> 09:36.230
现在添加了这个, 在then块下面, 我们可以检查response

09:36.230 --> 09:41.230
dot data dot status是否不正确, 这意味着出错了, 在这种情况下,

09:41.580 --> 09:49.810
我们可以在这里抛出一个错误, 因此我们将在catch块中结束, 在那里我们可以设置一些错误处理｡

09:49.810 --> 09:54.280
所以 这里 我们 将 抛出 一 个 错误 could not fetch location ｡ 

09:54.280 --> 09:57.080
然后在这里的错误处理程序中做一些事情,

09:57.080 --> 10:01.230
我们可以抛出一个警报, 至少在我们输出错误消息的地方｡

10:01.230 --> 10:04.660
当然, 这只是一些非常基本的错误处理｡ 

10:04.660 --> 10:06.950
否则, 如果我们有一个成功的响应,

10:06.950 --> 10:12.113
我们在这里获取我们的坐标, 现在我们可以使用这些坐标在地图上输出它们｡
