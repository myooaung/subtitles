WEBVTT

00:02.130 --> 00:02.963
الراوي: من أجل ذلك

00:02.963 --> 00:05.260
مرة أخرى ، عدت إلى إعداد المشروع الوهمي الذي استخدمناه

00:05.260 --> 00:06.690
مرارًا وتكرارًا.

00:06.690 --> 00:08.260
هناك ، يمكننا تشغيل بدء NPM

00:08.260 --> 00:10.190
لإحضار خادم التطوير هذا.

00:10.190 --> 00:13.690
ثم في نافذة طرفية جديدة مع تشغيل الخادم في نافذة

00:13.690 --> 00:15.260
طرفية مختلفة ، أقوم بتشغيل

00:15.260 --> 00:17.419
TSC dash W لبدء عملية تجميع TypeScript

00:17.419 --> 00:21.540
الخاصة بي والحفاظ عليها وتشغيلها.

00:21.540 --> 00:23.470
مع ذلك بالطبع ، حصلنا على صفحة فارغة

00:23.470 --> 00:24.560
لأنه لا يوجد شيء عليها

00:24.560 --> 00:27.060
ولكن الآن يمكننا اللعب في ملف TS الخاص بالتطبيق

00:27.060 --> 00:29.480
والبدء في استخدام الأدوية الجنيسة.

00:29.480 --> 00:32.940
وأعتقد أنه من الأسهل فهم الأدوية الجنسية

00:32.940 --> 00:35.450
إذا ألقينا نظرة على النوع الافتراضي

00:35.450 --> 00:37.450
، والذي تم تضمينه في TypeScript

00:37.450 --> 00:44.410
والذي عملنا معه كثيرًا والذي تبين أنه عام وسيكون مصفوفة.

00:44.410 --> 00:46.900
لنفترض أن لدينا مجموعة من الأسماء.

00:46.900 --> 00:50.370
لنفترض ماكس ودليل.

00:50.370 --> 00:51.620
لذلك حصلنا على

00:51.620 --> 00:54.610
اسمين هناك ، بالطبع ، نوع ثابت الاسم

00:54.610 --> 00:57.210
هو مصفوفة من السلاسل.

00:57.210 --> 00:59.610
في الواقع ، يمكننا التفكير

00:59.610 --> 01:02.460
في هذا على أنه نوعان يتم دمجهما.

01:02.460 --> 01:05.760
تمامًا كما يمكنك الحصول على كائن بخصائص مختلفة

01:05.760 --> 01:07.700
حيث قد تخزن نوعًا مختلفًا

01:07.700 --> 01:09.310
في كل خاصية.

01:09.310 --> 01:13.750
المصفوفة دائمًا مجرد شيء به بيانات مختلفة ، وفي

01:13.750 --> 01:16.440
هذه الحالة تحتوي على سلاسل.

01:16.440 --> 01:20.230
لذلك لدينا بالفعل نوع المصفوفة ، مصفوفة فقط وإذا

01:20.230 --> 01:22.770
قمت بإزالة الأسماء هنا وقصها ،

01:22.770 --> 01:25.010
فسترى أن TypeScript سيستنتج

01:25.010 --> 01:29.140
أن هذا مصفوفة من نوع أي شيء به أي بيانات هناك.

01:29.140 --> 01:32.690
إن TypeScript يعرف نوع المصفوفة.

01:32.690 --> 01:35.280
لذلك يمكننا القول ، يجب أن يكون هذا مصفوفة

01:35.280 --> 01:37.600
هنا ولكن كما ترى إذا حددت مثل هذا ، فقد

01:37.600 --> 01:39.900
حصلنا على خطأ على الرغم من أنني أستطيع

01:39.900 --> 01:43.570
إخبارك أن نوع المصفوفة هذا موجود في TypeScript.

01:43.570 --> 01:45.870
لكننا نرى أنه نوع عام وأنه

01:45.870 --> 01:48.710
يتطلب وسيطة من نوع واحد.

01:48.710 --> 01:50.950
والآن ، هذا شيء لم نره من قبل.

01:50.950 --> 01:53.870
لم نسمع عن الأنواع العامة من قبل.

01:53.870 --> 01:55.750
الآن ، هذا الترميز الغريب

01:55.750 --> 01:58.120
هنا ، كلما رأيت شيئًا مثل هذا في TypeScript

01:58.120 --> 02:01.060
، فأنت تتعامل مع نوع عام.

02:01.060 --> 02:05.610
النوع العام هو نوع مرتبط بنوع آخر وهو

02:05.610 --> 02:08.890
مرن حقًا فيما يتعلق بالنوع

02:08.890 --> 02:12.920
الدقيق لذلك النوع الآخر.

02:12.920 --> 02:14.130
يبدو صعبا؟

02:14.130 --> 02:16.820
حسنًا ، دعنا نعود إلى مثال المصفوفة هذا.

02:16.820 --> 02:19.380
نحن نعلم أننا نريد تخزين مجموعة هنا.

02:19.380 --> 02:22.250
لذلك يمكن أن تكون المصفوفة نفسها نوعًا ، إنها

02:22.250 --> 02:24.610
قائمة من البيانات التي تشكل نوعًا من

02:24.610 --> 02:26.730
تلقاء نفسها ، يمكنك القول.

02:26.730 --> 02:29.770
تمامًا مثل الكائن هو نوع من تلقاء نفسه ، حتى لو لم نكن

02:29.770 --> 02:32.200
نعرف حتى الآن البيانات التي ستدخل هناك.

02:32.200 --> 02:34.490
لذا فإن المصفوفة هي نوع منفردة.

02:34.490 --> 02:38.230
لكن مجموعة من الدورات تخزن بيانات من

02:38.230 --> 02:39.860
نوع معين هناك.

02:39.860 --> 02:42.690
الآن لا يهتم نوع المصفوفة نفسه بنوع

02:42.690 --> 02:44.810
البيانات المخزنة هناك.

02:44.810 --> 02:48.150
لا يهم نوع الصفيف ما إذا كنت تقوم بتخزين

02:48.150 --> 02:50.540
قائمة سلاسل أو أرقام أو كائنات

02:50.540 --> 02:52.430
أو بيانات مختلطة.

02:52.430 --> 02:54.500
نوع المصفوفة لا يهتم حقًا ولكنه

02:54.500 --> 02:58.640
يهتم بالحصول على بعض المعلومات على الأقل ، حتى لو كنت تخبرها

02:58.640 --> 03:01.200
أنني لا أعرف ، من خلال تعيين هذا على كتابة

03:01.200 --> 03:02.960
أي مصفوفة.

03:02.960 --> 03:05.870
إنه أفضل من عدم تحديد أي شيء.

03:05.870 --> 03:08.330
الآن ، هذه طريقة واحدة لتعريف نوع المصفوفة

03:08.330 --> 03:10.070
، نوع البيانات المخزنة هناك ثم

03:10.070 --> 03:11.430
الأقواس المربعة.

03:11.430 --> 03:14.620
الطريقة الأخرى ، والتي من شأنها إنشاء نفس النوع بالضبط ، ستكون

03:14.620 --> 03:15.830
استخدام شيء المصفوفة

03:15.830 --> 03:17.630
هذا ثم أقواس الزاوية هذه.

03:17.630 --> 03:20.030
والآن بين هذه الأقواس ، يمكنك

03:20.030 --> 03:22.340
تحديد نوع البيانات التي يجب

03:22.340 --> 03:24.140
أن تدخل في المصفوفة.

03:24.140 --> 03:26.330
على سبيل المثال سلسلة

03:26.330 --> 03:31.330
، وهذا هنا هو 100٪ نفس تعريف هذا النوع هنا.

03:32.030 --> 03:34.950
بالطبع ، يمكنك هنا أيضًا استخدام نوع union للقول

03:34.950 --> 03:37.730
، أن هذه المصفوفة تخزن سلاسل أو أرقامًا أو تستخدم

03:37.730 --> 03:40.850
أيًا منها إذا كنت لا تريد قول أي شيء عن النوع أو كما

03:40.850 --> 03:42.970
حصلنا عليه للتو.

03:42.970 --> 03:44.330
إذن هذا نوع عام ،

03:44.330 --> 03:46.900
نوع عام مضمن في TypeScript.

03:46.900 --> 03:50.440
نوع مرتبط بنوع آخر ، حيث نريد أن نعرف

03:50.440 --> 03:53.980
أي نوع مناسب لـ TypeScript يمكن أن

03:53.980 --> 03:56.810
يمنحنا دعمًا أفضل.

03:56.810 --> 03:57.910
لأنه هنا على سبيل

03:57.910 --> 04:01.510
المثال ، إذا علمنا أن ما نخزنه هناك سيكون عبارة عن

04:01.510 --> 04:04.380
سلسلة ، حسنًا ، فعندئذٍ نعرف متى وصلت إلى

04:04.380 --> 04:06.143
عنصر في تلك المصفوفة ، يمكنني

04:07.100 --> 04:09.410
عمل أشياء سلسلة بها.

04:09.410 --> 04:12.260
يمكنني استدعاء جميع طرق السلسلة هذه على

04:12.260 --> 04:15.280
سبيل المثال ولن يشتكي TypeScript لأنه يعرف

04:15.280 --> 04:18.220
جيدًا سلاسل تعليق المصفوفة هذه.

04:18.220 --> 04:20.410
هذه هي فكرة الأنواع العامة.

04:20.410 --> 04:23.230
نوع معين في هذه الحالة قد يعمل نوع المصفوفة

04:23.230 --> 04:26.780
بشكل أفضل أو يعمل على الإطلاق إذا قمت بتوفير

04:26.780 --> 04:29.040
معلومات إضافية حول نوع البيانات

04:29.040 --> 04:33.430
المتوفرة في هذا النوع من المصفوفة وبالطبع نوع المصفوفة

04:33.430 --> 04:36.590
هو مجرد مثال واحد.

04:36.590 --> 04:39.840
نوع عام آخر مضمن في TypeScript

04:39.840 --> 04:42.130
هو نوع الوعد.

04:42.130 --> 04:45.470
الآن الوعود هي ميزة JavaScript ، أليس كذلك؟

04:45.470 --> 04:46.970
إنها ليست ميزة TypeScript.

04:46.970 --> 04:49.437
يمكنك إنشاء وعود في JavaScript

04:49.437 --> 04:52.000
وفي حال لم تكن متأكدًا من الوعود ،

04:52.000 --> 04:53.870
ستجد الرابط مرفقًا.

04:53.870 --> 04:58.150
يمكن إنشاء الوعد باستخدام وعد جديد.

04:58.150 --> 05:00.640
مرة أخرى ، هذه وظيفة مُنشئ ، فئة

05:00.640 --> 05:03.270
مُضمنة في JavaScript وتأخذ وظيفة

05:03.270 --> 05:05.870
مُنشئ الوعد حجة واحدة وهي نفسها

05:05.870 --> 05:07.640
وظيفة والتي بدورها

05:07.640 --> 05:10.650
ستحصل على وسيطتين في النهاية دالة

05:10.650 --> 05:12.580
حل ورفض.

05:12.580 --> 05:15.180
الآن سيتم نقلها إلينا تلقائيًا

05:15.180 --> 05:17.790
بواسطة JavaScript في المتصفح.

05:17.790 --> 05:22.400
وبعد ذلك في الوعد يمكننا على سبيل المثال تعيين مؤقت ومن

05:22.400 --> 05:25.640
ثم في وظيفة رد الاتصال تلك الخاصة بالمؤقت

05:25.640 --> 05:28.140
، يمكننا حل الوعد الخارجي.

05:28.140 --> 05:30.140
لذلك هنا في وظيفة رد الاتصال

05:30.140 --> 05:34.823
هذه ، يمكننا استدعاء الحل والقول أن هذا قد تم.

05:36.500 --> 05:41.020
الآن عندما نفعل ذلك ، فإن هذا الوعد هنا يخلق كائنًا جديدًا

05:41.020 --> 05:43.860
، كائن وعد يتم تخزينه في ثابت الوعد.

05:43.860 --> 05:47.700
الآن ، ثابت الوعد هذا له نوع محدد.

05:47.700 --> 05:49.470
إنه نوع من الوعد ثم

05:49.470 --> 05:51.130
مرة أخرى ، ترى أقواس

05:51.130 --> 05:56.130
زاوية لأن هذا الوعد سيحل في النهاية على شيء ما.

05:56.480 --> 05:58.930
الآن هنا تقول غير معروف لأن TypeScript

05:58.930 --> 06:01.470
ليست قادرة تمامًا على فهم أننا سنحل

06:01.470 --> 06:03.880
بالفعل إلى سلسلة هنا.

06:03.880 --> 06:05.870
لكن يمكننا القول إن هذا وعد ،

06:05.870 --> 06:08.120
والذي سينتج عنه في النهاية سلسلة

06:08.120 --> 06:11.450
ونفعل ذلك مرة أخرى باستخدام النوع العام.

06:11.450 --> 06:14.030
النوع الرئيسي هو الوعد ، لكن الوعد

06:14.030 --> 06:16.120
تمامًا مثل المصفوفة ، نوع من

06:16.120 --> 06:18.380
العمل مع الأنواع الأخرى.

06:18.380 --> 06:22.000
استخدمت المصفوفة أنواعًا أخرى لأن بياناتها المخزنة

06:22.000 --> 06:23.350
فيها ، وبيانات من أنواع

06:23.350 --> 06:25.640
معينة ، والوعد يعمل مع أنواع أخرى لأنه

06:25.640 --> 06:29.750
في النهاية يُرجع نوعًا ما بعض البيانات من نوع ما وفي هذه الحالة

06:29.750 --> 06:31.140
يعد هذا وعدًا يُرجع في

06:31.140 --> 06:32.940
النهاية سلسلة.

06:32.940 --> 06:34.470
الآن مرة أخرى ، لماذا هذا مفيد؟

06:34.470 --> 06:37.550
لماذا هذا النوع الإضافي من المعلومات مفيد؟

06:37.550 --> 06:40.350
حسنًا ، إذا كان لدينا للتو نوع وعد هنا ولن

06:40.350 --> 06:41.430
يُسمح بذلك ولكن

06:41.430 --> 06:44.770
إذا قلنا وعدًا بنوع أي شيء ، فسيكون ذلك في الأساس

06:44.770 --> 06:46.870
مثل الأنواع التي لن تعرف الأنواع

06:46.870 --> 06:48.390
العامة إذا لم يكن لديها

06:48.390 --> 06:51.280
أي معلومات حول ما نحن رجعت.

06:51.280 --> 06:53.340
حسنًا ، بناءً على هذا الوعد بالطبع ، يمكننا

06:53.340 --> 06:55.750
استخدامها حيث يمكننا القيام بكل الوعود وفي النهاية

06:55.750 --> 06:57.770
سنحصل على بعض البيانات ولكننا لا نعرف

06:57.770 --> 06:59.770
شيئًا عن تلك البيانات.

06:59.770 --> 07:02.500
لا يمكنني استدعاء طريقة سلسلة عليها ، على سبيل المثال.

07:02.500 --> 07:04.850
حسنًا ، يمكنني ذلك لأنه موجود في هذه الحالة

07:04.850 --> 07:07.590
ولكني لا أحصل على أي دعم معين لـ TypeScript.

07:07.590 --> 07:11.313
يمكنني أيضًا تجربة أشياء عليها ، والتي لن تنجح بالتأكيد.

07:12.170 --> 07:13.800
على سبيل المثال ، إذا قلبنا هذا

07:13.800 --> 07:15.220
الأمر وأعدنا رقمًا هنا ، فلا

07:15.220 --> 07:17.320
يزال بإمكاني استدعاء طريقة السلسلة هنا

07:17.320 --> 07:19.390
لأن TypeScript ليس لديه معلومات حول

07:19.390 --> 07:22.640
البيانات التي سينتج عنها هذا الوعد في النهاية.

07:22.640 --> 07:24.070
الآن مع الأنواع العامة ،

07:24.070 --> 07:26.280
نقدم هذه المعلومات إلى TypeScript.

07:26.280 --> 07:28.160
يمكننا إخبار TypeScript أن

07:28.160 --> 07:30.240
هذا الوعد سينتج عنه في النهاية

07:30.240 --> 07:32.840
سلسلة أو في هذه الحالة ، يمكن لرقم ثم TypeScript

07:32.840 --> 07:34.940
أن يحذرنا هنا.

07:34.940 --> 07:37.390
إذا حاولت حفظ هذا ، فسوف يعطينا خطأ

07:37.390 --> 07:40.870
لأنه يعرف مهلا ، هذا الوعد سينتج عنه في النهاية

07:40.870 --> 07:44.092
رقم ويمكنك استدعاء الانقسام على ذلك.

07:44.092 --> 07:48.010
لذلك نحصل على أمان أفضل مع الأنواع العامة.

07:48.010 --> 07:50.510
لذا فأنت مرن حقًا فيما يتعلق بما تفعله

07:50.510 --> 07:52.720
بمعلومات النوع العام.

07:52.720 --> 07:54.830
تعرف المصفوفة البيانات التي تخزنها

07:54.830 --> 07:57.140
، والوعد يعرف البيانات التي تعيدها.

07:57.140 --> 07:59.840
إذا قمت ببناء فئات أو وظائف عامة خاصة بك ، فقد

07:59.840 --> 08:02.140
تفعل شيئًا مختلفًا تمامًا عن ذلك.

08:02.140 --> 08:04.570
ولكن في النهاية ، تساعدك الأنواع

08:04.570 --> 08:06.970
العامة في الحصول على معلومات إضافية

08:06.970 --> 08:10.640
عن النوع إذا كان لديك فئة أكثر تعقيدًا أو وظيفة أكثر

08:10.640 --> 08:14.240
تعقيدًا تقوم بشيء ما بالبيانات الواردة ، بطريقة

08:14.240 --> 08:16.020
لا تهتم فيها حقًا بالبيانات

08:16.020 --> 08:18.700
التي يتم إدخالها. من نوع معين ، ولكن حيث

08:18.700 --> 08:21.500
تريد تخزين معلومات الكتابة من البيانات

08:21.500 --> 08:24.850
الواردة للحصول على دعم TypeScript أفضل عندما

08:24.850 --> 08:27.590
تعمل مع النوع العام.

08:27.590 --> 08:30.450
لذلك عندما تعمل مع هذا الوعد ، أو مجموعة البيانات

08:30.450 --> 08:33.270
، فهذه هي في الأساس فكرة الأدوية الجنيسة.

08:33.270 --> 08:36.300
لذلك هذا هنا ، كل شيء مبني في الأدوية الجنيسة.

08:36.300 --> 08:37.460
دعونا نعلق ذلك.

08:37.460 --> 08:40.450
دعونا الآن نبني كلمة الكتابة العامة الخاصة بنا.

08:40.450 --> 08:42.653
دعونا نستخدم الأنواع العامة الخاصة بنا.
