WEBVTT

00:02.270 --> 00:03.613
Instructor: Así que podemos

00:03.613 --> 00:05.080
devolver algo en los decoradores

00:05.080 --> 00:06.820
de métodos, y ese algo debe ser un descriptor,

00:06.820 --> 00:08.920
que nos permita cambiar el método o cambiar la

00:08.920 --> 00:11.000
configuración del método.

00:11.000 --> 00:12.582
Y esto es algo que quiero hacer aquí.

00:12.582 --> 00:15.985
Antes de eso, en primer lugar voy a ir al archivo HTML del

00:15.985 --> 00:18.540
índice y allí, vamos a añadir un botón.

00:18.540 --> 00:21.272
Click Me, un botón muy simple,

00:21.272 --> 00:24.720
en mi aplicación. ts, ahora quiero asegurarme

00:24.720 --> 00:26.104
de que cuando hagamos

00:26.104 --> 00:29.800
clic en este botón se ejecute un método en un objeto.

00:29.800 --> 00:32.120
Y para ello, simplemente voy a añadir una nueva

00:32.120 --> 00:34.600
clase aquí, en primer lugar, la impresora.

00:34.600 --> 00:38.140
Y allí quiero tener un mensaje de propiedad que es sólo

00:38.140 --> 00:41.690
esto funciona, por lo que una simple cadena almacenada

00:41.690 --> 00:45.980
allí y luego quiero tener un método de mostrar el mensaje allí donde

00:45.980 --> 00:49.630
simplemente la consola de registro de este mensaje.

00:49.630 --> 00:51.770
Así que, por supuesto, esto es una especie de clase ficticia

00:51.770 --> 00:53.430
simple, pero sin embargo, esto me permite mostrar

00:53.430 --> 00:54.860
lo que quiero mostrar.

00:54.860 --> 00:56.550
Seleccionemos el botón a puerta

00:56.550 --> 01:00.860
ahora, con el botón selector de consulta de documentos y añadamos un

01:00.860 --> 01:02.970
listener de eventos a él.

01:02.970 --> 01:05.080
Ahora, en primer lugar, voy a añadir mi signo

01:05.080 --> 01:07.800
de exclamación aquí para dejar claro a TypeScript que esto

01:07.800 --> 01:08.806
existe, que esto no será

01:08.806 --> 01:10.990
nulo, y luego voy a añadir un oyente de eventos,

01:10.990 --> 01:14.210
un oyente de eventos de clic, y luego quiero desencadenar este método

01:14.210 --> 01:16.450
de mostrar mensaje aquí.

01:16.450 --> 01:20.350
Para ello, voy a crear una nueva impresora aquí, así, y luego

01:20.350 --> 01:23.120
aquí señalar p. showMessage, esa

01:23.120 --> 01:24.323
es mi idea aquí.

01:25.300 --> 01:27.103
Ahora, si guardamos eso, y volvemos

01:28.153 --> 01:31.440
a nuestra página y hago clic en este botón, obtenemos undefined

01:31.440 --> 01:33.320
aquí, sin embargo, no obtenemos

01:33.320 --> 01:36.050
nuestro mensaje que se muestra.

01:36.050 --> 01:38.860
Y la razón es que con un escuchador de eventos,

01:38.860 --> 01:41.820
si apuntamos a una función que debe ser ejecutada

01:41.820 --> 01:44.240
la palabra clave this dentro de esa función

01:44.240 --> 01:48.260
no tendrá el mismo contexto o referencia que tiene si llamamos

01:48.260 --> 01:52.193
sólo a p. ShowMessage, en este

01:53.144 --> 01:56.450
caso, se referiría a la impresora.

01:56.450 --> 02:00.200
No, en el escenario aquí donde usamos un escuchador de eventos,

02:00.200 --> 02:02.860
esto se referirá al objetivo del evento, porque

02:02.860 --> 02:05.777
addEventListener al final vincula esto en la función

02:05.777 --> 02:07.693
que se va a ejecutar al objetivo

02:07.693 --> 02:09.560
del evento.

02:09.560 --> 02:11.360
Y por supuesto, no quiero esto.

02:11.360 --> 02:12.570
Ahora, una solución

02:12.570 --> 02:14.170
común aquí sería usar el

02:14.170 --> 02:19.170
método bind y vincular showMessage a p, o vincular esto en showMessage a p para

02:19.480 --> 02:22.860
que cuando esto se ejecute, esto no se refiera a lo que

02:22.860 --> 02:25.420
addEventListener quiere que se refiera

02:25.420 --> 02:28.040
sino que esto dentro de showMessage se refiera

02:28.040 --> 02:31.770
a este p, a este objeto aquí de nuevo.

02:31.770 --> 02:33.300
Y si ahora, si recargamos aquí

02:33.300 --> 02:36.270
y borro esto de nuevo, ¡ahora vemos que esto funciona!

02:36.270 --> 02:39.240
Ahora bien, eso es todo JavaScript por defecto.

02:39.240 --> 02:40.790
Ahora, construiremos un decorador,

02:40.790 --> 02:42.191
que podemos añadir a este

02:42.191 --> 02:47.191
método, que automáticamente lo vinculará a la clase circundante, así que al objeto

02:47.460 --> 02:50.130
al que pertenece este método, cada vez que sea

02:50.130 --> 02:53.440
llamado, sin importar dónde lo llamemos.

02:53.440 --> 02:55.974
Así que para eso, encima de la impresora añadiré una

02:55.974 --> 02:58.800
nueva función y la llamaré autobind porque eso es, al final,

02:58.800 --> 03:01.580
lo que hacemos y ese será mi decorador autobind.

03:01.580 --> 03:03.890
Por supuesto, también puede utilizar un carácter inicial en

03:03.890 --> 03:05.960
mayúscula para estar en consonancia con nuestros otros

03:05.960 --> 03:07.930
nombres, pero, de nuevo, puede utilizar cualquiera

03:07.930 --> 03:10.122
de los dos cuando defina una función de decoración.

03:10.122 --> 03:13.300
Ahora bien, este aquí será mi decorador ya y en él tenemos

03:13.300 --> 03:15.269
un par de argumentos.

03:15.269 --> 03:17.940
Conseguimos el objetivo, como aprenderás, y es cualquiera.

03:17.940 --> 03:20.085
Es el prototipo del objeto con el que estamos

03:20.085 --> 03:22.533
trabajando o es la función constructora si

03:22.533 --> 03:25.730
estuviéramos añadiendo esto a un método estático pero aquí

03:25.730 --> 03:27.340
será el prototipo porque lo añadiremos

03:27.340 --> 03:30.200
a un método de instancia.

03:30.200 --> 03:32.520
Entonces tenemos el nombre del método o el nombre de la propiedad

03:32.520 --> 03:33.690
pero como lo añadimos a un método

03:33.690 --> 03:36.330
podemos llamar a este nombre de método, tiene más sentido.

03:36.330 --> 03:38.600
Si esto es una cadena o un símbolo o también podría

03:38.600 --> 03:40.229
ser un número, por supuesto, pero

03:40.229 --> 03:43.250
aquí sabemos que típicamente trabajaremos con cadenas así que

03:43.250 --> 03:45.061
también podemos simplemente ir con una

03:45.061 --> 03:48.470
cadena aquí, dependiendo de donde planees agregar este decorador y

03:48.470 --> 03:50.170
qué tan genérico debe ser y por último

03:50.170 --> 03:52.484
pero no menos importante, obtenemos el descriptor

03:52.484 --> 03:56.340
aquí que será de tipo PropertyDescriptor como alerta.

03:56.340 --> 03:57.650
Así que ahora tenemos

03:57.650 --> 03:59.655
estos tres argumentos que todos

03:59.655 --> 04:03.540
usamos en Log3 que era nuestro método decorador antes.

04:03.540 --> 04:05.970
Ahora, en autobind, y ahora quiero asegurarme

04:05.970 --> 04:08.994
de que siempre establecemos la palabra clave this a este

04:08.994 --> 04:11.973
objeto al que pertenece este método de nuevo.

04:11.973 --> 04:14.240
¿Cómo podemos conseguirlo?

04:14.240 --> 04:15.797
En primer lugar, tengo que acceder

04:15.797 --> 04:17.880
al método que debe ser llamado.

04:17.880 --> 04:20.661
Y esto será posible con la ayuda de nuestro descriptor,

04:20.661 --> 04:22.013
porque si recargas la aplicación

04:22.013 --> 04:25.180
y echas un vistazo a tal descriptor de método ahí abajo ves que

04:25.180 --> 04:27.330
tenemos la propiedad value en el descriptor

04:27.330 --> 04:29.460
y que apunta a la función.

04:29.460 --> 04:32.240
Dado que el valor de esta propiedad es una función, en este

04:32.240 --> 04:33.930
caso, un método es sólo una propiedad

04:33.930 --> 04:35.498
con una función como valor.

04:35.498 --> 04:38.630
Así que la clave del valor contiene la función original,

04:38.630 --> 04:42.980
por lo tanto, aquí, podemos extraer el método original, si queremos llamarlo

04:42.980 --> 04:47.320
así accediendo al descriptor.

04:47.320 --> 04:47.320
valor.

04:47.320 --> 04:50.563
Esto nos dará acceso al, bueno, método original.

04:51.790 --> 04:55.450
A continuación, voy a configurar un nuevo descriptor ajustado,

04:55.450 --> 04:58.320
esto será, al final, lo que devolvemos más tarde.

04:58.320 --> 05:00.030
Ahora este será un objeto

05:00.030 --> 05:03.620
y será de tipo descriptor de propiedades.

05:03.620 --> 05:06.350
Ahora en este objeto podemos añadir todas las cosas

05:06.350 --> 05:09.350
que podemos añadir a un descriptor de propiedad.

05:09.350 --> 05:12.110
Y por ejemplo, puede establecer esto como configurable,

05:12.110 --> 05:14.962
verdadero, establecer enumerable a falso, para que

05:14.962 --> 05:17.130
esto no aparezca en los bucles extranjeros,

05:17.130 --> 05:20.310
y ahora añadir un getter aquí, y eso es nuevo.

05:20.310 --> 05:23.400
Aquí añado un getter, que es un método, o una propiedad que

05:23.400 --> 05:26.150
contiene una función, que es lo mismo, para que podamos

05:27.020 --> 05:29.628
ejecutar alguna lógica extra cuando los usuarios

05:29.628 --> 05:32.260
intenten acceder a esta propiedad.

05:32.260 --> 05:35.170
De modo que no sólo ejecutamos directamente el valor de esta propiedad,

05:35.170 --> 05:36.633
por lo que la función, pero que podemos

05:36.633 --> 05:38.888
intervenir y hacer algo de trabajo extra antes de

05:38.888 --> 05:40.850
ejecutar la función.

05:40.850 --> 05:41.913
Esa es la idea.

05:43.230 --> 05:46.290
Así que no agrego una propiedad de valor a este descriptor aquí,

05:46.290 --> 05:48.660
sólo tengo un getter y de nuevo, el getter básicamente

05:48.660 --> 05:51.540
es como tener una propiedad de valor con la lógica adicional

05:51.540 --> 05:54.777
que se ejecuta antes de que el valor se devuelve.

05:54.777 --> 05:59.777
Ahora, aquí quiero tener mi función vinculada donde puedo

05:59.900 --> 06:03.450
usar el método original que extrajimos aquí

06:03.450 --> 06:07.100
arriba y llamamos bind y bind esto.

06:07.100 --> 06:08.590
Y ahora el legado,

06:08.590 --> 06:11.730
por supuesto, ¿a qué se refiere aquí?

06:11.730 --> 06:13.720
Ten en cuenta que está dentro de este

06:13.720 --> 06:17.700
método getter por lo que se referirá a lo que sea responsable de activar

06:17.700 --> 06:19.510
este método getter.

06:19.510 --> 06:21.110
Y ese es el truco ahora,

06:21.110 --> 06:23.700
el método getter será lanzado por el objeto

06:23.700 --> 06:27.200
concreto al que pertenece, por lo que este dentro

06:27.200 --> 06:29.190
del método getter siempre se

06:29.190 --> 06:32.160
referirá al objeto sobre el que definimos

06:32.160 --> 06:33.610
el getter.

06:33.610 --> 06:36.800
Esto no será sobrescrito por addEventListener porque

06:36.800 --> 06:38.965
el getter es como una capa extra entre

06:38.965 --> 06:41.221
nuestra función que está siendo ejecutada

06:41.221 --> 06:44.976
y el objeto al que pertenece y el Event Listener.

06:44.976 --> 06:47.683
Por lo tanto, esto aquí se referirá al objeto

06:47.683 --> 06:51.610
sobre el que originalmente definimos el método.

06:51.610 --> 06:54.660
Así que podemos enlazar con seguridad esto para el método

06:54.660 --> 06:57.495
original y asegurar que ahora esto dentro del método

06:57.495 --> 07:01.170
original también se referirá al mismo objeto exacto.

07:01.170 --> 07:04.300
Ahora voy a devolver la función vinculada aquí y después,

07:04.300 --> 07:06.760
fuera de este descriptor ajustado, devolver

07:06.760 --> 07:08.910
el descriptor ajustado.

07:08.910 --> 07:10.560
Así que esa es nuestra función decoradora,

07:10.560 --> 07:12.420
devolviendo un nuevo objeto descriptor,

07:12.420 --> 07:14.103
y por lo tanto este objeto descriptor

07:14.103 --> 07:16.960
anulará el antiguo descriptor, eso es lo que TypeScript

07:16.960 --> 07:18.710
hará con él.

07:18.710 --> 07:21.500
TypeScript entonces reemplazará el antiguo descriptor

07:21.500 --> 07:23.215
de métodos, por lo que la antigua configuración

07:23.215 --> 07:26.390
de métodos con esta nueva configuración aquí, que añadió esta

07:26.390 --> 07:28.513
capa getter extra.

07:29.460 --> 07:33.330
Ahora, no estoy interesado en el nombre del objetivo y del método aquí,

07:33.330 --> 07:37.500
por supuesto, así que para evitar errores voy a nombrar este guión bajo y este

07:37.500 --> 07:39.083
aquí guión bajo dos.

07:40.260 --> 07:43.070
De nuevo, sólo para decirle a TypeScript que no me interesan

07:43.070 --> 07:45.480
estos valores pero que necesito aceptarlos.

07:45.480 --> 07:49.800
Y ahora vamos a añadir autobind a showMessage aquí.

07:49.800 --> 07:52.203
Así que aquí, voy a añadir en Autobind,

07:54.050 --> 07:56.490
y asegúrese de que ha eliminado bind allí

07:56.490 --> 07:59.236
en el oyente de eventos, y guardar esto.

07:59.236 --> 08:01.450
Y ahora echemos un vistazo a eso, hagamos

08:01.450 --> 08:04.730
clic en Click Me, y deberías ver ¡Esto funciona!

08:04.730 --> 08:06.678
Si recargo, esto funciona.

08:06.678 --> 08:09.680
Porque ahora esto está ligado correctamente.

08:09.680 --> 08:12.060
Y sólo para verificar que es realmente nuestro

08:12.060 --> 08:13.520
decorador que hace una diferencia

08:13.520 --> 08:15.868
aquí, si me gustaría eliminar la vinculación

08:15.868 --> 08:17.850
aquí en mi getter y el decorador y guardo

08:17.850 --> 08:20.920
que, se ve que si es ahora vuelve a cargar y hacemos clic en Click

08:20.920 --> 08:23.626
me, vemos indefinido de nuevo.

08:23.626 --> 08:26.320
Así que es realmente esta capa getter extra que

08:26.320 --> 08:27.389
hace su trabajo aquí

08:27.389 --> 08:30.430
que asegura que esto siempre está vinculado correctamente

08:30.430 --> 08:33.260
no importa cómo se llama showMessage.

08:33.260 --> 08:35.380
Si lo llamamos así directamente sobre

08:35.380 --> 08:38.350
el objeto funcionará, si lo llamamos aquí así con un escuchador

08:38.350 --> 08:40.760
de eventos, también funciona.

08:40.760 --> 08:42.260
Así que ves que esto funciona

08:42.260 --> 08:45.070
aquí, que al final viene de esta llamada showMessage

08:45.070 --> 08:48.266
y luego también ves que funciona si hago clic en el botón.

08:48.266 --> 08:49.918
Así que este es un buen ejemplo de

08:49.918 --> 08:52.060
cómo puedes utilizar decoradores para construir

08:52.060 --> 08:55.190
una funcionalidad bastante sorprendente y ahorrarte la molestia

08:55.190 --> 08:58.718
de llamar manualmente a bind en todas partes.

08:58.718 --> 09:01.883
En lugar de eso, sólo tienes que atarlo así.
