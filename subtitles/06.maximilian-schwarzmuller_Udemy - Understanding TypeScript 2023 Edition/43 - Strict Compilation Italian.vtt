WEBVTT

00:02.120 --> 00:02.953
Istruttore: Si è trattato

00:02.953 --> 00:04.960
di una prima importante serie di opzioni.

00:04.960 --> 00:07.520
Ora analizziamo queste opzioni rigorose perché

00:07.520 --> 00:09.860
sono piuttosto interessanti.

00:09.860 --> 00:12.150
C'è l'opzione strict true, che in realtà abilita

00:12.150 --> 00:13.590
tutte le opzioni di controllo

00:13.590 --> 00:16.750
rigoroso dei tipi, quindi di fatto l'impostazione di questa

00:16.750 --> 00:18.830
opzione è la stessa che si avrebbe se si impostassero

00:18.830 --> 00:22.110
tutte le opzioni separatamente.

00:22.110 --> 00:24.830
È quindi possibile impostare tutte queste opzioni una per

00:24.830 --> 00:27.110
una, oppure impostare solo questa opzione.

00:27.110 --> 00:29.510
Naturalmente, è possibile impostare le singole

00:29.510 --> 00:33.020
opzioni se si desidera che alcune siano impostate su false.

00:33.020 --> 00:34.790
Perché altrimenti sono tutti impostati su true.

00:34.790 --> 00:36.520
Se si desidera che siano tutti impostati

00:36.520 --> 00:39.290
su true, l'utilizzo di questa opzione è ovviamente più breve.

00:39.290 --> 00:41.360
Ma cosa fanno queste opzioni?

00:41.360 --> 00:43.213
Cominciamo con noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny è un'opzione piuttosto interessante che ci aiuta

00:47.410 --> 00:49.180
a scrivere codice migliore.

00:49.180 --> 00:51.370
Andiamo al nostro file analytics

00:51.370 --> 00:53.963
e aggiungiamo una funzione, sendAnalytics,

00:55.270 --> 00:58.070
che riceve un'opzione di dati, diciamo, e potremmo

00:58.070 --> 01:01.010
inviarla a un server, ma qui mi limito a registrarla

01:01.010 --> 01:03.430
su console.

01:03.430 --> 01:07.500
Poi chiamo sendAnalytics con i dati, quindi con

01:07.500 --> 01:08.920
la stringa.

01:08.920 --> 01:11.080
Ora, come vedete, il mio IDE si lamenta

01:11.080 --> 01:13.160
già qui e anche il compilatore TypeScript,

01:13.160 --> 01:14.960
perché i due sono ovviamente collegati

01:14.960 --> 01:17.040
se provo a compilarlo.

01:17.040 --> 01:20.070
I dati dei parametri hanno implicitamente un tipo any.

01:20.070 --> 01:21.350
Il problema sembra quindi

01:21.350 --> 01:23.940
essere legato all'opzione noImplicitAny.

01:23.940 --> 01:27.150
Infatti, se imposto questa opzione su false, quindi se imposto

01:27.150 --> 01:29.300
tutte le opzioni rigorose su true ma imposto

01:29.300 --> 01:31.521
questa opzione su false, cosa che posso

01:31.521 --> 01:33.810
fare, l'errore scompare.

01:33.810 --> 01:37.140
Sia nell'IDE che quando compiliamo il codice.

01:37.140 --> 01:38.730
Cosa fa questa opzione?

01:38.730 --> 01:41.440
Assicura, e lo commenterò di nuovo per

01:41.440 --> 01:44.210
attivarlo di nuovo a causa di strict true,

01:44.210 --> 01:47.050
che dobbiamo essere chiari sui nostri

01:47.050 --> 01:49.410
parametri, sui valori con cui stiamo

01:49.410 --> 01:53.020
lavorando nel nostro codice.

01:53.020 --> 01:56.600
Qui non forniamo a TypeScript alcuna informazione

01:56.600 --> 01:59.930
sul tipo di dati che otterremo come parametro.

01:59.930 --> 02:01.320
E dovremmo farlo.

02:01.320 --> 02:03.800
Se TypeScript è in grado di dedurlo, allora va

02:03.800 --> 02:05.360
bene, ma in questo caso come farebbe

02:05.360 --> 02:08.770
TypeScript a dedurlo da questa riga, tenendo presente che questa

02:08.770 --> 02:11.470
funzione viene dichiarata prima dell'esecuzione

02:11.470 --> 02:12.950
del file.

02:12.950 --> 02:15.080
Quindi, nel momento in cui la funzione viene

02:15.080 --> 02:18.380
creata, non c'è alcuna possibilità di sapere cosa vi finirà dentro.

02:18.380 --> 02:20.100
Possiamo quindi risolvere l'errore

02:20.100 --> 02:22.570
dichiarando semplicemente il tipo e indicando chiaramente

02:22.570 --> 02:24.253
il tipo che utilizziamo.

02:25.100 --> 02:29.530
Si noti che se si è registrata una variabile, impostandola

02:29.530 --> 02:32.650
a true, non si ottiene un errore su questa

02:32.650 --> 02:34.720
dichiarazione, anche se

02:34.720 --> 02:37.670
il tipo predefinito è any.

02:37.670 --> 02:39.250
Per le variabili questo va bene.

02:39.250 --> 02:40.910
Per i parametri non va bene.

02:40.910 --> 02:42.480
Perché va bene per le variabili?

02:42.480 --> 02:44.370
Perché ciò che TypeScript fa per le variabili,

02:44.370 --> 02:45.940
ciò che è possibile per le variabili,

02:45.940 --> 02:47.040
qui non è possibile perché

02:47.040 --> 02:48.880
la funzione viene creata per prima.

02:48.880 --> 02:52.490
Qui TypeScript è in grado di tenere traccia dei valori assegnati.

02:52.490 --> 02:54.650
Vedete, ok, ho fatto il

02:54.650 --> 02:56.720
log qui in questo modo,

02:56.720 --> 02:58.573
ora l'ho impostato

02:59.430 --> 03:08.030
a true, quindi, in seguito, se faccio il log della console qui, è un booleano.

03:08.030 --> 03:10.300
Quindi TypeScript è in grado di capire

03:10.300 --> 03:11.893
il flusso del codice e quindi

03:11.893 --> 03:14.320
non è necessario essere precisi riguardo

03:14.320 --> 03:15.430
a un tipo.

03:15.430 --> 03:18.020
Naturalmente, si vuole essere precisi, se si vuole evitare

03:18.020 --> 03:20.310
che si possa assegnare liberamente il nuovo valore,

03:20.310 --> 03:22.940
cosa che si può fare qui perché è di tipo any.

03:22.940 --> 03:25.700
Per evitare questo, si deve comunque assegnare un tipo, ma TypeScript

03:25.700 --> 03:27.680
è almeno in grado di scoprire se il codice che

03:27.680 --> 03:29.490
si sta chiamando funziona con il tipo attualmente

03:29.490 --> 03:31.410
in suo possesso.

03:31.410 --> 03:32.410
Non è questo il caso,

03:32.410 --> 03:35.360
perché in questo caso la funzione è definita prima di essere

03:35.360 --> 03:37.800
chiamata e quindi TypeScript non può sapere se ciò

03:37.800 --> 03:39.570
che viene passato può essere usato

03:39.570 --> 03:41.393
all'interno della funzione.

03:43.280 --> 03:46.020
strictNullChecks non è mai un'opzione importante.

03:46.020 --> 03:48.520
In realtà è legato alla selezione dei pulsanti che

03:48.520 --> 03:49.410
abbiamo qui.

03:49.410 --> 03:51.820
Ricordate che ho dovuto aggiungere questo punto esclamativo per

03:51.820 --> 03:52.670
farlo funzionare.

03:52.670 --> 03:54.380
Altrimenti si otterrebbe un errore.

03:54.380 --> 03:56.220
Ora possiamo anche eliminare

03:56.220 --> 03:58.430
l'errore senza aggiungere il punto

03:58.430 --> 04:02.090
esclamativo, impostando strictNullChecks su false.

04:02.090 --> 04:04.200
Quindi, facciamolo qui e salviamo questo.

04:04.200 --> 04:07.860
E come vedete questo errore è ora scomparso.

04:07.860 --> 04:10.120
E posso compilare tutti i file.

04:10.120 --> 04:12.340
Cosa fanno i controlli strictNull?

04:12.340 --> 04:16.160
Dicono a TypeScript di essere piuttosto severo su

04:16.160 --> 04:19.410
come accedere e lavorare con valori che potrebbero

04:19.410 --> 04:22.530
contenere un valore nullo.

04:22.530 --> 04:24.850
E il pulsante qui potrebbe essere nullo.

04:24.850 --> 04:29.210
Non sempre punta a un elemento del pulsante.

04:29.210 --> 04:31.390
Non sempre punta a un elemento di questo tipo, perché

04:31.390 --> 04:34.220
anche se abbiamo un selettore di questo tipo qui, un pulsante

04:34.220 --> 04:36.900
potrebbe semplicemente non esistere nella pagina in cui

04:36.900 --> 04:38.490
viene eseguito lo script.

04:38.490 --> 04:40.840
Pertanto, TypeScript non è in grado di

04:40.840 --> 04:43.790
capirlo, perché non si immerge nel file html e non

04:43.790 --> 04:44.900
lo esamina.

04:44.900 --> 04:48.240
Non è in grado di dire se avrà successo o meno.

04:48.240 --> 04:53.130
E se non riesce a restituire un puntatore e un nodo nullo, restituirà

04:53.130 --> 04:56.650
null, per la precisione undefined, ma qui viene

04:56.650 --> 04:59.090
trattato allo stesso modo.

04:59.090 --> 05:01.610
Pertanto, il pulsante potrebbe contenere un valore nullo

05:01.610 --> 05:03.530
e quindi il codice potrebbe fallire.

05:03.530 --> 05:06.610
Infatti, se commento questo pulsante qui, se ora compilo

05:06.610 --> 05:08.480
tutto funziona perché ho disabilitato

05:08.480 --> 05:10.733
i controlli null.

05:12.000 --> 05:14.100
Ma ora ho un errore di runtime perché non

05:14.100 --> 05:16.210
posso chiamare l'ascoltatore di eventi,

05:16.210 --> 05:18.230
addEventListener, su null.

05:18.230 --> 05:20.970
E non ho nulla qui perché non ho un pulsante.

05:20.970 --> 05:23.110
Questo è un errore che potremmo

05:23.110 --> 05:26.760
evitare impostando strictNullChecks a true.

05:26.760 --> 05:30.340
E questo viene impostato automaticamente se abbiamo impostato strict su true.

05:30.340 --> 05:34.450
TypeScript prevede che ciò possa accadere e quindi

05:34.450 --> 05:38.600
ci costringe ad aggirare il problema.

05:38.600 --> 05:40.640
Una soluzione economica è rappresentata

05:40.640 --> 05:42.820
da questo operatore con punto esclamativo.

05:42.820 --> 05:46.020
Questo indica a TypeScript che lo sviluppatore

05:46.020 --> 05:48.360
sa che questo pulsante esiste

05:48.360 --> 05:53.360
o che questa operazione produrrà un valore non nullo.

05:53.710 --> 05:55.830
Forse lo fate, sicuramente lo fate

05:55.830 --> 05:58.990
se sapete che state lavorando sul codice HTML e che

05:58.990 --> 06:00.430
c'è un pulsante qui, che

06:00.430 --> 06:03.310
questo selettore qui funzionerà.

06:03.310 --> 06:05.610
Quindi, in questo caso, il punto esclamativo

06:05.610 --> 06:06.623
va bene.

06:07.600 --> 06:09.040
Se si ha un altro scenario in

06:09.040 --> 06:11.120
cui non si sa con certezza se funziona e si

06:11.120 --> 06:13.050
spera solo che funzioni, allora potrebbe

06:13.050 --> 06:14.170
essere meglio avvolgere

06:14.170 --> 06:18.210
semplicemente il codice che potrebbe fallire in un controllo if, che sarà presente

06:18.210 --> 06:21.570
anche in fase di esecuzione, ovviamente.

06:21.570 --> 06:24.960
Si potrebbe semplicemente verificare se il pulsante è vero,

06:24.960 --> 06:27.510
ma non lo sarà se è nullo o indefinito.

06:27.510 --> 06:30.060
E spostate il codice in questo controllo se qui.

06:30.060 --> 06:32.470
Ora, anche senza il punto esclamativo, in

06:32.470 --> 06:35.810
modalità strictNullChecks non si ottiene alcun errore,

06:35.810 --> 06:37.600
perché TypeScript capisce che

06:37.600 --> 06:39.750
questo codice si trova all'interno di

06:39.750 --> 06:41.991
questa istruzione if e che questa istruzione

06:41.991 --> 06:46.310
if si assicura che il pulsante non sia nullo e quindi non fallirà.

06:46.310 --> 06:49.310
Quindi questa potrebbe essere la soluzione più pulita.

06:49.310 --> 06:51.060
Tuttavia, naturalmente, per risparmiare

06:51.060 --> 06:54.350
codice, se si sa con certezza che qualcosa esiste, l'uso del punto esclamativo

06:54.350 --> 06:56.550
è più breve e rappresenta un'opzione assolutamente

06:56.550 --> 06:58.320
valida.

06:58.320 --> 07:00.450
Qui ho detto entrambe le cose, in modo da vederle

07:00.450 --> 07:02.450
entrambe, naturalmente basta una delle due cose,

07:02.450 --> 07:04.520
o il controllo if o il punto esclamativo.

07:04.520 --> 07:07.680
strictFunctionTypes è un'impostazione un po' più

07:07.680 --> 07:12.010
avanzata che cattura qualche casella di nicchia che potrebbe non essere

07:12.010 --> 07:14.830
presente in molte applicazioni.

07:14.830 --> 07:17.340
È legato ai tipi di funzione che si possono

07:17.340 --> 07:18.380
impostare.

07:18.380 --> 07:20.650
Quindi non i tipi all'interno delle funzioni, ma

07:20.650 --> 07:23.690
se si definisce l'aspetto di una funzione per quanto riguarda i

07:23.690 --> 07:26.220
suoi parametri e il suo valore di ritorno e si crea un tipo

07:26.220 --> 07:27.840
di funzione di questo tipo, che si

07:27.840 --> 07:29.990
è imparato a conoscere nel modulo di base, allora

07:29.990 --> 07:32.650
si può introdurre un box se si lavora con le classi e l'ereditarietà,

07:32.650 --> 07:35.560
che non abbiamo ancora imparato a conoscere, che non abbiamo

07:35.560 --> 07:39.683
ancora usato e quindi, per ora, ignoriamo questo aspetto.

07:40.578 --> 07:43.630
strictBindCallApply, che può essere utile

07:43.630 --> 07:46.840
se si lavora con bind, call o apply.

07:46.840 --> 07:49.680
Per questo, vediamo rapidamente un esempio.

07:49.680 --> 07:52.040
Qui abbiamo il nostro pulsante e la nostra funzione.

07:52.040 --> 07:57.040
Diciamo che si tratta di una funzione, che definiamo qui con la parola

07:57.780 --> 08:01.100
chiave function, o di una funzione di errore.

08:01.100 --> 08:03.650
Non importa, qui userò la parola chiave function.

08:04.731 --> 08:09.731
clickHandler, e lì console. log cliccato.

08:11.960 --> 08:13.810
Ora puntiamo a clickHandler e, per

08:13.810 --> 08:15.560
qualche motivo, vogliamo assicurarci

08:15.560 --> 08:17.670
che quando questo viene eseguito, passiamo

08:17.670 --> 08:19.330
determinati argomenti o impostiamo

08:19.330 --> 08:22.780
la parola chiave this a un determinato valore.

08:22.780 --> 08:26.480
Diciamo che ci aspettiamo un argomento di tipo messaggio, che dovrebbe

08:26.480 --> 08:28.110
essere una stringa.

08:28.110 --> 08:32.110
E vogliamo che anche questo venga emesso qui.

08:32.110 --> 08:34.400
Ora, poiché clickHandler viene passato ad

08:34.400 --> 08:36.010
addEventListener in questo modo,

08:36.010 --> 08:39.080
in modo che il browser lo esegua per noi, se vogliamo preconfigurare

08:39.080 --> 08:41.070
gli argomenti che verranno passati,

08:41.070 --> 08:43.570
possiamo usare bind.

08:43.570 --> 08:47.000
E bind, come primo parametro, prende ciò a cui vogliamo

08:47.000 --> 08:49.320
legare la parola chiave this.

08:49.320 --> 08:51.650
E qui potremmo dire che non ci interessa

08:51.650 --> 08:53.580
perché non lo usiamo nella funzione,

08:53.580 --> 08:55.930
quindi lo leghiamo a null.

08:55.930 --> 08:57.700
Ora si vede che si verifica un errore.

08:57.700 --> 09:00.610
Ottengo un errore che può essere evitato

09:00.610 --> 09:04.613
se imposto strictBindCallApply su false.

09:07.040 --> 09:08.680
Ora l'errore è scomparso.

09:08.680 --> 09:10.501
Cosa fa quindi questa opzione?

09:10.501 --> 09:14.180
In pratica controlla quale funzione si sta chiamando,

09:14.180 --> 09:16.020
bind, call o apply.

09:16.020 --> 09:20.080
E controlla se ciò che si sta impostando ha senso.

09:20.080 --> 09:23.440
E qui TypeScript vede che vogliamo un argomento, vogliamo

09:23.440 --> 09:25.450
un parametro in clickHandler.

09:25.450 --> 09:28.260
Con bind, però, non lo configuriamo.

09:28.260 --> 09:30.600
Pertanto, si verifica un errore.

09:30.600 --> 09:32.180
Se lo riporto a true, o lo commento

09:32.180 --> 09:34.000
perché, ovviamente, è impostato

09:34.000 --> 09:36.230
a true per impostazione predefinita, impostando

09:36.230 --> 09:37.870
strict a true, otteniamo di nuovo

09:37.870 --> 09:39.790
l'errore.

09:39.790 --> 09:42.350
Ora, se non ci aspettassimo un argomento qui, l'errore

09:42.350 --> 09:44.750
sarebbe eliminato se rimuovessimo solo il messaggio,

09:44.750 --> 09:46.200
perché TypeScript capisce

09:46.200 --> 09:48.140
il nostro codice e vede che non si sta passando

09:48.140 --> 09:50.660
alcun argomento a questo metodo o a questa funzione,

09:50.660 --> 09:52.580
perché non ne accetta, quindi va bene

09:52.580 --> 09:54.760
così.

09:54.760 --> 09:57.420
Ma naturalmente qui ne vogliamo uno, quindi otteniamo un errore.

09:57.420 --> 10:00.880
La soluzione è fornire questo secondo parametro,

10:00.880 --> 10:04.350
che è il primo parametro da inserire.

10:04.350 --> 10:06.290
Ora, TypeScript è davvero intelligente.

10:06.290 --> 10:08.120
Ad esempio, se inserissi un numero,

10:08.120 --> 10:10.310
si lamenterebbe comunque perché capisce che

10:10.310 --> 10:11.610
mi serve una stringa.

10:12.500 --> 10:15.960
Se però inserisco una stringa corretta, come

10:15.960 --> 10:17.350
"prego", non si lamenta

10:17.350 --> 10:19.070
più, perché non la capisce

10:19.070 --> 10:21.210
e vede che corrisponde alla

10:21.210 --> 10:24.840
mia definizione di funzione.

10:24.840 --> 10:27.370
Si tratta quindi di un comportamento molto utile,

10:27.370 --> 10:30.260
che assicura di non usare accidentalmente bind, call o apply

10:30.260 --> 10:32.743
in un modo che non funziona con il codice.

10:33.930 --> 10:36.600
Ora strictPropertyInitialization diventa importante quando

10:36.600 --> 10:37.810
si lavora con le classi.

10:37.810 --> 10:39.213
Per ora possiamo ignorarlo.

10:39.213 --> 10:41.890
noImplicitoAnche questo non ha importanza in questo momento.

10:41.890 --> 10:43.650
Ha a che fare con la parola chiave

10:43.650 --> 10:45.980
this e TypeScript cerca di avvertirvi

10:45.980 --> 10:48.240
se usate la parola chiave this in un punto

10:48.240 --> 10:51.020
in cui non è chiaro a cosa si riferisca.

10:51.020 --> 10:53.210
E alwaysStrict controlla semplicemente

10:53.210 --> 10:55.560
che i file JavaScript generati utilizzino la

10:55.560 --> 10:58.663
modalità strict, in modo da aggiungere questo elemento.

10:59.710 --> 11:02.383
Con ciò, abbiamo coperto tutte queste opzioni rigorose.
