WEBVTT

00:02.160 --> 00:03.330
Présentateur : Maintenant,

00:03.330 --> 00:06.080
les classes et toutes les fonctions de construction qui existent

00:06.080 --> 00:09.280
depuis plus longtemps n'ont pas seulement des propriétés que vous pouvez

00:09.280 --> 00:12.780
utiliser pour définir la structure générale de l'objet.

00:12.780 --> 00:14.770
Vous pouvez également ajouter des méthodes.

00:14.770 --> 00:17.460
Nous avons effectivement la méthode du constructeur ici.

00:17.460 --> 00:19.620
Mais c'est juste une fonction utilitaire,

00:19.620 --> 00:22.940
qui est appelée, lorsque vous instanciez la classe.

00:22.940 --> 00:25.584
Rappelez-vous, dans le passé, nous n'avions que des fonctions

00:25.584 --> 00:28.100
de constructeur, maintenant nous avons ce sucre syntaxique

00:28.100 --> 00:30.460
mais nous avons toujours la fonction construct a que nous

00:30.460 --> 00:33.300
pouvons ajouter pour exécuter tout code d'initialisation.

00:33.300 --> 00:36.350
Vous pouvez également ajouter quelques fonctions

00:36.350 --> 00:38.600
ou méthodes que vous pouvez appeler

00:38.600 --> 00:40.980
sur l'objet créé.

00:40.980 --> 00:44.000
Par exemple, une méthode de description ici sur

00:44.000 --> 00:46.000
notre classe de département.

00:46.000 --> 00:47.994
Maintenant, une méthode est ajoutée

00:47.994 --> 00:49.382
comme ceci, le nom de la

00:49.382 --> 00:53.270
méthode, puis pas de deux-points, pas de signe égal à la place, des

00:53.270 --> 00:56.090
parenthèses et ensuite des accolades.

00:56.090 --> 00:59.070
Les parenthèses prennent tous les arguments dont vous pourriez avoir besoin.

00:59.070 --> 01:00.780
Disons qu'ici, nous n'en avons pas besoin,

01:00.780 --> 01:03.330
sinon vous pourriez ajouter des paramètres comme vous le faites

01:03.330 --> 01:05.150
dans une fonction ordinaire.

01:05.150 --> 01:07.280
Mais ce dont vous avez généralement besoin,

01:07.280 --> 01:10.000
c'est d'un corps de fonction ou d'un corps de méthode

01:10.000 --> 01:12.020
entre les accolades.

01:12.020 --> 01:14.693
Ici, vous définissez maintenant la logique de votre méthode.

01:15.580 --> 01:19.570
Et là, nous pourrions sortir le nom du département avec un peu d'information

01:19.570 --> 01:22.410
supplémentaire peut-être.

01:22.410 --> 01:26.230
Nous pouvons bien sûr le faire ici avec la console. log, par exemple, département,

01:26.230 --> 01:30.620
deux points et ensuite peut-être le nom.

01:30.620 --> 01:32.100
Cependant, cela ne fonctionnerait pas.

01:32.100 --> 01:34.570
Elle recherche un nom de variable, qui doit

01:34.570 --> 01:37.710
exister à l'intérieur de la méthode décrite, ou à l'extérieur

01:37.710 --> 01:40.860
de la classe en tant que variable globale.

01:40.860 --> 01:42.470
Et comme vous le voyez, s'il choisit

01:42.470 --> 01:44.433
age, j'obtiens une erreur pour name ; je ne fais

01:44.433 --> 01:46.540
pas ça, je n'obtiens pas ça parce qu'il y a en fait

01:46.540 --> 01:50.100
une variable globale name dans le navigateur dans l'objet window.

01:50.100 --> 01:53.030
Néanmoins, cela ne ferait pas référence à cette propriété

01:53.030 --> 01:57.130
de nom ici mais à une variable de nom globale en dehors de cette classe.

01:57.130 --> 01:59.599
Pour faire référence à une propriété ou à une méthode de

01:59.599 --> 02:01.930
la classe depuis l'intérieur de celle-ci, nous devons

02:01.930 --> 02:03.590
utiliser le mot-clé this comme nous

02:03.590 --> 02:05.630
le faisons ici dans le constructeur.

02:05.630 --> 02:08.980
Cela renvoie alors généralement à l'instance

02:08.980 --> 02:12.400
concrète de cette classe qui a été créée.

02:12.400 --> 02:14.240
Et là, avec la notation point, nous pouvons

02:14.240 --> 02:16.600
accéder à toutes les propriétés et méthodes de cette

02:16.600 --> 02:17.650
instance.

02:17.650 --> 02:19.555
Dans ce cas, ceci. nom.

02:19.555 --> 02:24.555
Donc si maintenant, en bas, j'appelle la comptabilité. décrire comme ça.

02:24.583 --> 02:28.110
Le mot clé this, lorsque this s'exécute, fera référence

02:28.110 --> 02:30.920
à cet objet comptable concret qui a été construit

02:30.920 --> 02:33.730
sur la base de cette classe.

02:33.730 --> 02:35.530
Donc, si j'enregistre cela, et que

02:35.530 --> 02:38.570
nous rechargeons, nous devrions voir cette sortie ici,

02:38.570 --> 02:40.420
qui a bien sûr une coquille, mais qui

02:40.420 --> 02:42.110
fonctionne généralement.

02:42.110 --> 02:43.944
Réparons maintenant la faute de frappe ici.

02:43.944 --> 02:46.190
Voici donc comment nous pouvons ajouter une méthode.

02:46.190 --> 02:48.166
Maintenant, quel mot important à propos de ce mot-clé.

02:48.166 --> 02:50.600
Comme vous le savez probablement, si vous avez

02:50.600 --> 02:54.890
travaillé un peu avec JavaScript, le mot-clé this peut être délicat.

02:54.890 --> 02:56.090
Par exemple, si

02:56.090 --> 03:00.090
j'ajoute un autre objet ici accounting copy et

03:01.480 --> 03:03.350
c'est notre objet qui

03:03.350 --> 03:06.430
a juste la méthode describe et si je pointe

03:06.430 --> 03:11.270
sur accounting. décrire.

03:11.270 --> 03:15.470
Ensuite, si j'appelle accountingcopy. décrire comme une méthode, que pensez-vous

03:15.470 --> 03:17.150
qu'il se passera ?

03:17.150 --> 03:19.200
Pensez-vous que nous aurons une erreur ?

03:19.200 --> 03:21.200
Nous n'obtenons certainement pas d'erreur de

03:21.200 --> 03:22.927
compilation qui se compile très bien.

03:22.927 --> 03:26.360
Mais au moment de l'exécution, nous voyons un département non défini.

03:26.360 --> 03:28.780
Et la raison en est que ce que je fais, c'est

03:28.780 --> 03:32.010
que j'ajoute une propriété de description à cet objet

03:32.010 --> 03:34.040
qui est créé avec l'objet littéral,

03:34.040 --> 03:37.888
pas basé sur cette classe, mais juste comme un objet factice non basé

03:37.888 --> 03:41.420
sur une classe spécifique que vous avez définie.

03:41.420 --> 03:44.360
Et la valeur de cette propriété describe est

03:44.360 --> 03:49.000
un pointeur vers la méthode describe de mon objet comptable.

03:49.000 --> 03:52.168
Donc je pointe vers cette méthode ici pour

03:52.168 --> 03:54.690
trouver cet objet concret.

03:54.690 --> 03:56.240
Je ne l'exécute pas.

03:56.240 --> 03:57.723
Donc je ne passe pas la valeur

03:57.723 --> 04:00.410
de cette exécution de fonction à décrire.

04:00.410 --> 04:04.090
Je passe vraiment la fonction elle-même à décrire ici.

04:04.090 --> 04:06.430
Ainsi, lorsque j'appelle describe ici sur la copie,

04:06.430 --> 04:08.950
la méthode est effectivement exécutée et tout fonctionne

04:08.950 --> 04:10.440
correctement.

04:10.440 --> 04:13.690
Le problème est que, lorsque cette méthode s'exécute,

04:13.690 --> 04:17.040
elle ne fera pas référence à l'objet dont elle faisait

04:17.040 --> 04:19.170
partie à l'origine, donc pas à l'objet

04:19.170 --> 04:21.140
comptable.

04:21.140 --> 04:22.350
Au lieu de cela, ceci, et c'est

04:22.350 --> 04:25.050
une bonne règle empirique que vous pouvez mémoriser, fait

04:25.050 --> 04:27.900
généralement référence à la chose qui est responsable de

04:27.900 --> 04:29.650
l'appel d'une méthode.

04:29.650 --> 04:32.190
Et responsable de l'appel de la méthode describe

04:32.190 --> 04:34.880
ici dans ce cas, est la copie comptable.

04:34.880 --> 04:39.160
Parce que nous appelons décrire sur copie comptable.

04:39.160 --> 04:42.320
Cela fera donc référence à ce qui se trouve devant le point ici, c'est-à-dire

04:42.320 --> 04:43.980
la copie de comptabilité.

04:43.980 --> 04:47.530
Il s'agit cependant d'un objet qui n'a pas la propriété du nom.

04:47.530 --> 04:49.678
Donc quand j'accède à ça. name, j'obtiens

04:49.678 --> 04:53.968
une erreur car this does not refer to an object

04:53.968 --> 04:56.610
with a name property.

04:56.610 --> 04:59.220
Le nom nous rend donc indéfinis.

04:59.220 --> 05:02.260
Et c'est pourquoi j'obtiens ce résultat étrange.

05:02.260 --> 05:04.310
C'est une chose que vous devez garder à l'esprit,

05:04.310 --> 05:07.470
pas seulement dans TypeScript, c'est une chose JavaScript.

05:07.470 --> 05:09.540
Et bien sûr, cela peut donc aussi

05:09.540 --> 05:11.500
vous arriver en TypeScript.

05:11.500 --> 05:13.940
Pour contourner ce problème, vous

05:13.940 --> 05:16.660
pouvez ajouter un paramètre à la méthode

05:16.660 --> 05:18.150
de description, appelé

05:18.150 --> 05:19.730
"this".

05:19.730 --> 05:21.380
C'est un paramètre spécial,

05:21.380 --> 05:25.334
une instruction spéciale comprise par TypeScript.

05:25.334 --> 05:28.430
Si vous ajoutez un paramètre nommé this ici,

05:28.430 --> 05:31.420
ce n'est pas vraiment un paramètre attendu,

05:31.420 --> 05:36.010
vous pouvez toujours appeler describe sans passer de valeur.

05:36.010 --> 05:38.476
Au lieu de cela, TypeScript l'interprète

05:38.476 --> 05:42.980
comme une indication de ce à quoi il faut se référer.

05:42.980 --> 05:45.960
Et maintenant, il est important de lui attribuer un type.

05:45.960 --> 05:48.810
Et le type ici, dans ce cas devrait être notre

05:48.810 --> 05:51.780
type de classe ici, donc département.

05:51.780 --> 05:53.840
Ce que je veux dire, c'est que lorsque

05:53.840 --> 05:56.250
describe est exécuté à l'intérieur

05:56.250 --> 05:59.375
de describe, donc dans ce cas-ci, il doit toujours

05:59.375 --> 06:02.550
faire référence à une instance basée sur la classe

06:02.550 --> 06:05.040
de département.

06:05.040 --> 06:09.160
Donc un objet qui au final serait de type département.

06:09.160 --> 06:12.370
Et donc maintenant nous avons une erreur en bas, nous

06:12.370 --> 06:14.140
avons une erreur ici, parce que

06:14.140 --> 06:16.012
ce que nous avons ici est que lorsque

06:16.012 --> 06:19.800
nous appelons describe ici sur la copie de comptabilité, nous

06:19.800 --> 06:24.100
ne l'appelons pas sur une instance de département.

06:24.100 --> 06:26.350
Donc, par conséquent, cela sera violé.

06:26.350 --> 06:29.540
Dans ce cas, il ne s'agira pas d'un

06:29.540 --> 06:32.250
objet de type département.

06:32.250 --> 06:34.690
Nous ajoutons donc une sécurité de type supplémentaire

06:34.690 --> 06:36.920
en ajoutant ce paramètre fictif, car si

06:36.920 --> 06:39.450
j'essaie de sauvegarder ce fichier, j'obtiens

06:39.450 --> 06:42.480
une erreur liée à cette ligne.

06:42.480 --> 06:44.950
Car maintenant en effet, nous exécuterions un code

06:44.950 --> 06:47.030
qui ne fonctionnerait pas comme prévu.

06:47.030 --> 06:49.260
Nous devons donc corriger cela, par exemple,

06:49.260 --> 06:51.140
en ajoutant une propriété de nom

06:52.040 --> 06:55.290
ici pour que cela fonctionne, car maintenant TypeScript

06:55.290 --> 06:57.702
voit Ok, l'objet sur lequel vous appelez

06:57.702 --> 07:02.702
describe, a maintenant une propriété de nom, comme il s'y attend, car il est basé sur

07:03.840 --> 07:05.803
l'objet department, qui a également

07:05.803 --> 07:08.070
une propriété de nom.

07:08.070 --> 07:10.790
Donc maintenant ici, TypeScript serait heureux parce

07:10.790 --> 07:12.270
que nous avons ajouté le nom.

07:12.270 --> 07:14.934
Si je l'enlève, nous récupérons l'erreur avec

07:14.934 --> 07:17.277
le nom, mais cela fonctionne, et nous évitons

07:17.277 --> 07:19.750
cette sortie indéfinie d'avant.

07:19.750 --> 07:22.770
C'est donc important de le comprendre.

07:22.770 --> 07:26.140
Et il est important d'être conscient de cette amélioration que vous

07:26.140 --> 07:28.410
pourriez ajouter à votre code pour vous assurer

07:28.410 --> 07:31.190
que vous attrapez les comportements indésirables comme

07:31.190 --> 07:32.993
ceux que nous avions là avant.
