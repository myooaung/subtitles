WEBVTT

00:02.220 --> 00:03.760
Instructor: El último tipo

00:03.760 --> 00:07.490
interesante que quiero mostrar en este módulo es el tipo nunca.

00:07.490 --> 00:10.660
Ahora vimos una función que devolvía void.

00:10.660 --> 00:13.058
Así que eso nunca devuelve nada.

00:13.058 --> 00:17.380
Nunca es otro tipo las funciones pueden volver.

00:17.380 --> 00:19.240
Y eso puede sonar extraño.

00:19.240 --> 00:21.110
Veamos cómo funciona.

00:21.110 --> 00:24.662
Digamos que tenemos una función generarError.

00:24.662 --> 00:28.280
Aquí espero obtener un mensaje, que es una cadena, y quizás

00:28.280 --> 00:31.610
algún código de error, que puede ser un número.

00:31.610 --> 00:33.700
Ahora dentro de estas funciones, digamos,

00:33.700 --> 00:35.130
lanzamos un error.

00:35.130 --> 00:37.760
Así que esto debería ser esencialmente una

00:37.760 --> 00:41.500
función de utilidad que genera objetos de error y los lanza.

00:41.500 --> 00:42.990
Así que aquí podríamos lanzar un objeto,

00:42.990 --> 00:44.380
lo que podemos hacer en JavaScript.

00:44.380 --> 00:47.366
Podemos lanzar cualquier objeto o cualquier valor como

00:47.366 --> 00:49.930
un error, y que debe tener una propiedad de mensaje,

00:49.930 --> 00:53.990
en el que almacena el valor de mi argumento de mensaje aquí.

00:53.990 --> 00:56.390
Y quiero tener una propiedad de código de error,

00:56.390 --> 00:59.417
digamos borrar la palabra, el argumento de código en .

01:00.330 --> 01:02.390
Así es con la función inválida,

01:02.390 --> 01:06.600
y podemos llamar a esta con un error ocurrido, por

01:06.600 --> 01:09.640
ejemplo, y un código de 500.

01:09.640 --> 01:12.213
Si hacemos eso, y compilamos este archivo aquí,

01:14.120 --> 01:17.080
vemos que una vez que esto se recarga obtenemos nuestro

01:17.080 --> 01:19.150
error, así como un error aquí.

01:19.150 --> 01:21.670
Y esto puede sonar bastante abstracto, pero

01:21.670 --> 01:22.850
en realidad no lo es.

01:22.850 --> 01:24.640
Tener funciones de utilidad como esta

01:24.640 --> 01:27.850
sería bastante estándar en aplicaciones más grandes donde no

01:27.850 --> 01:30.270
quieres lanzar manualmente un error en 10 lugares

01:30.270 --> 01:32.540
diferentes de tu aplicación, y donde quieres

01:32.540 --> 01:35.380
llegar a una función conveniente que construye el objeto

01:35.380 --> 01:37.450
de error para ti y tal vez también lo lanza

01:37.450 --> 01:39.350
inmediatamente, de modo que puedes llamar

01:39.350 --> 01:42.300
a esta función con diferentes entradas pero siempre tienes

01:42.300 --> 01:44.690
un error siendo lanzado.

01:44.690 --> 01:47.010
Ahora lo interesante de esta función

01:47.010 --> 01:49.048
es que no sólo devuelve void.

01:49.048 --> 01:52.385
En realidad puedo especificar que devuelve void,

01:52.385 --> 01:54.545
porque por supuesto no devuelve

01:54.545 --> 01:58.030
nada, pero en realidad no sólo devuelve nada, si somos

01:58.030 --> 02:02.630
totalmente sinceros, esta función no devuelve nunca.

02:02.630 --> 02:05.518
Esta función nunca produce un valor de retorno.

02:05.518 --> 02:08.860
Si yo tratara de restablecer el valor de retorno aquí,

02:08.860 --> 02:11.193
en un resultado de registro de la consola,

02:12.040 --> 02:16.240
y luego compilo mi código en esta ejecución, vemos que no hay undefined

02:16.240 --> 02:19.630
que se registra aquí, porque desde que se lanza un error,

02:19.630 --> 02:22.220
esto esencialmente se bloquea nuestro

02:22.220 --> 02:25.330
script, se podría decir.

02:25.330 --> 02:27.080
Cancela nuestro guión.

02:27.080 --> 02:30.290
Y este será siempre el caso de esta función.

02:30.290 --> 02:32.210
Por supuesto que podemos envolverlo

02:32.210 --> 02:34.260
en try catch para poder seguir en este script,

02:34.260 --> 02:37.620
pero esta función esencialmente nunca produce un valor.

02:37.620 --> 02:41.060
Esta función siempre bloquea el script o esta

02:41.060 --> 02:42.910
parte del script, si está

02:42.910 --> 02:44.720
usando try catch, y por

02:44.720 --> 02:47.910
lo tanto nunca devuelve nada.

02:47.910 --> 02:50.400
Y por lo tanto el tipo de retorno de esta

02:50.400 --> 02:54.483
función en realidad no es sólo void, sino también never.

02:55.710 --> 02:56.700
Ahora lo interesante

02:56.700 --> 02:59.060
es que si pasas el ratón por encima sin asignar

02:59.060 --> 03:01.680
nunca, ves que el tipo inferido es void.

03:01.680 --> 03:05.410
Alls porque never es un tipo más nuevo, ha existido desde hace

03:05.410 --> 03:07.060
algún tiempo, pero no fue construido

03:07.060 --> 03:10.000
en las primeras versiones de TypeScript, y por

03:10.000 --> 03:12.620
lo tanto void es típicamente asumido, y no

03:12.620 --> 03:15.417
es horrible dejarlo así.

03:15.417 --> 03:17.740
Pero puedes ser muy claro y establecer

03:17.740 --> 03:21.470
explícitamente never como tipo de retorno para dejar bien

03:21.470 --> 03:24.490
claro que esto nunca devuelve nada.

03:24.490 --> 03:26.770
Así que, desde la perspectiva de la calidad

03:26.770 --> 03:29.560
del código, esto podría ser más claro en cuanto a sus intenciones

03:29.560 --> 03:30.680
y dejar realmente claro

03:30.680 --> 03:32.330
a nuestros desarrolladores que

03:32.330 --> 03:35.850
leen su código que esta función está destinada a no devolver nunca

03:35.850 --> 03:40.954
nada, y esencialmente a bloquear o romper su script, o esa parte del script.

03:40.954 --> 03:43.890
Otra función que nunca regresaría, por cierto,

03:43.890 --> 03:47.190
sería una función con un bucle infinito.

03:47.190 --> 03:49.370
Así que si tenemos while (true) ahí, eso

03:49.370 --> 03:51.060
crea un bucle infinito, y que por

03:51.060 --> 03:52.790
lo tanto también sería una función

03:52.790 --> 03:54.410
que nunca retorna.

03:54.410 --> 03:56.070
Sin embargo, la función de error

03:56.070 --> 03:58.852
aquí, o la función que genera un error congelado es

03:58.852 --> 04:01.305
probablemente el caso de uso más común.

04:01.305 --> 04:04.500
Así que nunca, también un tipo interesante, que se

04:04.500 --> 04:06.230
puede utilizar en las funciones

04:06.230 --> 04:08.553
para los casos como este aquí.
