WEBVTT

00:02.120 --> 00:05.300
Mann: Wie können wir jetzt die Koordinaten auf einer Karte ausgeben?

00:05.300 --> 00:08.180
Auch dafür werden wir eine Google-API verwenden.

00:08.180 --> 00:10.690
Wenn Sie nach Google JavaScript Maps oder

00:10.690 --> 00:13.810
Google JS Maps suchen, finden Sie die offiziellen Dokumente

00:13.810 --> 00:16.970
für die Google JavaScript Google Maps API.

00:16.970 --> 00:19.660
Und hier erfahren Sie, wie Sie Google Maps in Ihrer Webanwendung

00:19.660 --> 00:22.020
zum Rendern einer Karte verwenden können.

00:22.020 --> 00:24.720
Und es ist wirklich unkompliziert und einfach.

00:24.720 --> 00:27.280
Als erstes müssen wir dieses Skript hier

00:27.280 --> 00:31.720
hinzufügen, das das Google Maps SDK zu unserer Anwendung hinzufügt.

00:31.720 --> 00:34.220
Nehmen Sie also einfach dieses Skript und

00:34.220 --> 00:38.210
fügen Sie es in Ihre Index-HTML-Datei über Ihrem Skript ein.

00:38.210 --> 00:40.670
Wichtig ist, dass wir dieses NPM nicht installieren,

00:40.670 --> 00:42.920
da es nicht in NPM veröffentlicht ist. Daher

00:42.920 --> 00:45.900
verwenden wir diesen CDN-Link, der das Skript direkt von

00:45.900 --> 00:48.140
den Google-Servern abruft.

00:48.140 --> 00:51.560
Und hier müssen wir unseren API_KEY einrichten.

00:51.560 --> 00:54.390
Das ist natürlich der API_KEY, den wir schon hier

00:54.390 --> 00:57.430
in der Typescript-Datei haben, also können wir

00:57.430 --> 01:02.170
das einfach in index html kopieren und YOUR_API_KEY damit ersetzen.

01:02.170 --> 01:06.120
Und auch loswerden dieses "&amp;callback=initMap" Sache am Ende, würde

01:06.120 --> 01:07.150
dies eine Funktion

01:07.150 --> 01:10.240
auslösen, sobald diese Karte geladen wird, oder wie

01:10.240 --> 01:13.430
diese SDK geladen wird, und das ist nicht etwas, was ich

01:13.430 --> 01:14.843
hier wollen.

01:15.840 --> 01:19.760
Damit haben wir also dieses SDK geladen und können

01:19.760 --> 01:22.820
es nun verwenden, und hier haben wir ein

01:22.820 --> 01:24.250
Problem.

01:24.250 --> 01:26.210
Ich möchte damit eine Karte rendern, und das

01:26.210 --> 01:28.710
Rendern einer Karte ist eigentlich ganz einfach.

01:28.710 --> 01:31.070
In den offiziellen Dokumenten sehen wir, dass wir am Ende dieses Google

01:31.070 --> 01:33.870
instanziieren müssen. Karten. Map-Konstruktorfunktion

01:33.870 --> 01:36.870
ein Zentrum übergeben, das im Wesentlichen

01:36.870 --> 01:38.960
ein...

01:38.960 --> 01:41.720
Dieses Koordinatenpaar erhalten wir von der Rückseite, und

01:41.720 --> 01:43.250
fügen Sie eine Zoomstufe hinzu.

01:43.250 --> 01:45.820
Wir können das also einfach kopieren und dann

01:45.820 --> 01:48.710
hier, sobald wir die Koordinaten haben, diesen Code

01:48.710 --> 01:50.010
ausführen und vielleicht

01:50.010 --> 01:53.750
die Karte hier in einer Konstante namens "Map" speichern. Aber natürlich erhalten wir hier einen Fehler.

01:53.750 --> 01:55.117
"Cannot find name google,"

01:55.117 --> 01:57.600
und das macht Sinn, das wird nicht global

01:57.600 --> 02:01.320
verfügbar sein, aber typescript weiß das nicht.

02:01.320 --> 02:03.380
Es wird weltweit verfügbar sein,

02:03.380 --> 02:06.300
weil wir dieses JavaScript-SDK importieren.

02:06.300 --> 02:08.343
Aber das weiß typescript natürlich nicht.

02:09.390 --> 02:12.270
Dort erfahren Sie, was Sie tun können.

02:12.270 --> 02:14.200
Sie können natürlich auch

02:14.200 --> 02:19.200
"declare var google" verwenden und dies auf any setzen.

02:19.990 --> 02:21.020
Damit sagen Sie zu typescript:

02:21.020 --> 02:22.887
"Das ist in Ordnung, das wird es geben, keine Sorge. Wir können das tun, und der Fehler verschwindet.

02:22.887 --> 02:26.480
Jetzt können wir auch unsere Koordinaten hier verwenden,

02:26.480 --> 02:29.060
anstatt der hart kodierten, und wenn wir

02:29.060 --> 02:31.370
auch einen Marker rendern wollen,

02:31.370 --> 02:33.480
ist das auch möglich.

02:33.480 --> 02:36.430
In der offiziellen Dokumentation, klicken Sie einfach auf "Hinzufügen

02:36.430 --> 02:37.930
einer Karte mit einer Markierung",

02:37.930 --> 02:39.517
erfahren wir, dass das Hinzufügen einer

02:39.517 --> 02:41.520
Markierung ganz einfach ist, wir verwenden

02:41.520 --> 02:44.600
einfach die erstellte Karte, und erstellen eine Markierung mit diesem

02:44.600 --> 02:47.223
Befehl, und zeigen auf diese Karte.

02:49.040 --> 02:50.950
Wir kopieren also einfach diesen Codeschnipsel

02:50.950 --> 02:52.980
hier, und zurück in unserem Code, nachdem wir

02:52.980 --> 02:56.130
die Karte erstellt haben, erstelle ich meine Markierung wie diese,

02:56.130 --> 02:59.160
und die Position hier sind wieder meine Koordinaten.

02:59.160 --> 03:01.160
Damit wird nun eine Karte gerendert

03:01.160 --> 03:04.173
und ein Marker darauf gesetzt.

03:05.040 --> 03:06.600
Wir müssen nur noch sicherstellen,

03:06.600 --> 03:08.580
dass diese Karte an der richtigen Stelle

03:08.580 --> 03:10.350
gerendert wird.

03:10.350 --> 03:12.350
Standardmäßig wird nach einem Element mit einem I gesucht. D. "Karte", und das ist es,

03:12.350 --> 03:14.010
was wir hier haben.

03:14.010 --> 03:16.670
Aber wenn Sie sich für ein anderes I. D. hier, stellen Sie sicher,

03:16.670 --> 03:18.720
dass Sie dies in Ihrem TypeScript-Code anpassen.

03:18.720 --> 03:20.470
Wenn wir

03:20.470 --> 03:23.473
dies speichern, wird es ohne Fehler kompiliert,

03:24.610 --> 03:26.890
und wenn ich jetzt eine Adresse

03:26.890 --> 03:30.640
eingebe, sollte es dies darstellen.

03:30.640 --> 03:33.450
Das funktioniert also, und wir können die Zoomstufe hier

03:33.450 --> 03:35.320
anpassen, um ein bisschen mehr hineinzuzoomen,

03:35.320 --> 03:38.650
z. B. auf 16, und wenn wir das ausprobieren, können wir es jetzt etwas

03:38.650 --> 03:40.370
deutlicher sehen.

03:40.370 --> 03:42.910
Aber es funktioniert, und das können wir feststellen.

03:42.910 --> 03:45.640
Wir können herumblättern und diese Karte verwenden.

03:45.640 --> 03:47.480
Das ist alles schön, aber nicht optimal.

03:47.480 --> 03:50.420
Natürlich funktioniert es, dank "declare

03:50.420 --> 03:53.340
var google" erhalten wir keine Fehler.

03:53.340 --> 03:56.760
Aber wir bekommen auch keine Unterstützung vom Typ.

03:56.760 --> 03:58.810
WENN ich einen Fehler einführe,

03:58.810 --> 04:01.550
wenn ich zum Beispiel auf ". map" anstelle von ". maps" kompiliert er ohne Probleme und stürzt

04:01.550 --> 04:02.960
erst danach in der Produktion

04:02.960 --> 04:06.730
ab.

04:06.730 --> 04:08.860
Wenn ich versuche, eine Karte zu rendern.

04:08.860 --> 04:11.280
Jetzt bekomme ich hier einen Fehler, der von unserem Error-Handler abgefangen wird.

04:11.280 --> 04:13.150
Das ist natürlich nicht das, was wir wollen.

04:13.150 --> 04:16.493
Wir wollen Typunterstützung, wir wollen Dump-Fehler wie diesen während der

04:17.470 --> 04:19.770
Entwicklung und nicht zur Laufzeit behandeln.

04:19.770 --> 04:22.880
Wie können wir also sicherstellen, dass das Typecript Google Maps kennt?

04:22.880 --> 04:27.380
Typen zur Rettung.

04:27.380 --> 04:31.080
Wenn Sie nach "types google maps" suchen, finden Sie verschiedene

04:31.080 --> 04:32.470
Pakete, die Typen für, nun

04:32.470 --> 04:34.160
ja, Google Maps hinzufügen.

04:34.160 --> 04:37.350
Jetzt haben wir das Google Maps-Paket nicht über NPM installiert,

04:37.350 --> 04:38.800
aber wir können trotzdem Typen

04:38.800 --> 04:41.050
für dieses Paket über NPM installieren.

04:41.050 --> 04:44.130
Und hier nehme ich das erste Paket und installiere

04:44.130 --> 04:46.160
es einfach in unser Projekt.

04:46.160 --> 04:48.790
Gehen wir also zurück, schneller Entwicklungsserver,

04:48.790 --> 04:51.560
und führen "npm install --save-dev "@types/googlemaps"

04:51.560 --> 04:54.030
aus, ein Wort.

04:54.030 --> 04:56.400
Das war der Name dieses Pakets.

04:58.613 --> 05:01.560
Dadurch werden nun globale Typen für dieses Paket installiert.

05:01.560 --> 05:03.303
Wenn ich das Programm nun mit NPM

05:04.200 --> 05:08.410
start neu starte, werden wir sehen, ob sich die Situation verbessert hat.

05:08.410 --> 05:11.500
Wenn ich diese "declare var"-Sache

05:11.500 --> 05:15.180
hier entferne oder auskommentiere.

05:15.180 --> 05:18.090
Es kompiliert immer noch, jetzt wird dieses Google Maps-Ding hier

05:18.090 --> 05:19.940
erkannt, und wenn ich versuche, auf ". map" hier, erhalte ich eine Fehlermeldung,

05:19.940 --> 05:23.290
ich erhalte jetzt auch eine Autovervollständigung und es wird angezeigt:

05:23.290 --> 05:27.010
"Ja, es gibt eine Maps-Sache. Es sagt mir auch, dass diese Karte

05:27.010 --> 05:29.880
Konstruktor, braucht ein "Div" oder ein "Element",

05:29.880 --> 05:32.410
wo es sollte die Karte als erstes Argument, und

05:32.410 --> 05:35.100
dann einige Optionen für die Karte zu machen.

05:35.100 --> 05:38.660
Das funktioniert also jetzt hier, wie es sollte.

05:38.660 --> 05:40.270
Und das ist natürlich ein großer Schritt

05:40.270 --> 05:42.850
nach vorn, denn jetzt haben wir unsere funktionierende Anwendung,

05:42.850 --> 05:45.170
die auch vorher schon funktioniert hat.

05:45.170 --> 05:47.600
Aber jetzt funktioniert es auch mit Typen,

05:47.600 --> 05:51.170
und zwar mit einer richtigen Typunterstützung.

05:51.170 --> 05:53.490
Und dieser Staffer ist eine weitere großartige Übung

05:53.490 --> 05:56.050
dafür, wie man Anwendungen mit Type Script erstellt und

05:56.050 --> 05:58.500
bestimmte Arten von Funktionen verwendet, aber es ist

05:58.500 --> 06:00.690
vor allem eine großartige Übung dafür, wie man

06:00.690 --> 06:03.700
mit Bibliotheken von Drittanbietern arbeiten kann.

06:03.700 --> 06:06.250
Einige, wie "axios", bringen ihre eigenen Typen mit.

06:06.250 --> 06:08.470
Andere werden nicht einmal mit NPM

06:08.470 --> 06:11.540
installiert, und dennoch können Sie Typen mit

06:11.540 --> 06:15.421
einem entsprechenden Typenpaket hinzufügen.

06:15.421 --> 06:18.810
Ich hoffe, dieses Modul war hilfreich, um dies zu verstehen, und für alle

06:18.810 --> 06:21.320
zukünftigen Projekte, an denen Sie vielleicht arbeiten

06:21.320 --> 06:23.230
werden, wo Sie wahrscheinlich auch mit

06:23.230 --> 06:25.620
bestimmten Bibliotheken von Drittanbietern arbeiten

06:25.620 --> 06:27.040
werden.
