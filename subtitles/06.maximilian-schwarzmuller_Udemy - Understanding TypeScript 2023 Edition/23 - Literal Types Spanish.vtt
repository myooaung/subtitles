WEBVTT

00:02.350 --> 00:03.921
Instructor: Así que, ahora, tenemos tipos de sindicatos aquí.

00:03.921 --> 00:07.440
Vamos a desarrollar la idea de los tipos de unión y a introducir

00:07.440 --> 00:09.764
también los tipos literales.

00:09.764 --> 00:14.290
Los tipos literales son tipos en los que no sólo se dice que una determinada

00:14.290 --> 00:16.436
variable o un parámetro debe contener,

00:16.436 --> 00:19.700
por ejemplo, un número o una cadena, sino que se tiene

00:19.700 --> 00:21.230
muy claro el valor exacto

00:21.230 --> 00:23.800
que debe contener.

00:23.800 --> 00:26.064
Ya lo vimos pronto aquí en lo básico.

00:26.064 --> 00:28.408
Const número dos, por ejemplo.

00:28.408 --> 00:32.098
Ahí, si paso por encima de eso ves que el tipo que se dedujo

00:32.098 --> 00:35.680
no es el número es el 2. 8.

00:35.680 --> 00:37.290
Y el grupo de tipos sí infirió

00:37.290 --> 00:41.220
este número concreto como un tipo aquí porque es una constante.

00:41.220 --> 00:43.810
Nunca cambiará y por lo tanto el grupo de tipos sabe que el valor

00:43.810 --> 00:48.211
que asigné aquí es el tipo exacto que tengo. Así que, por supuesto, esto es

00:48.211 --> 00:52.796
un número, se podría decir 2. El 8 se deriva del tipo de número, pero

00:52.796 --> 00:56.320
es un número específico. Y esto no sólo existe

00:56.320 --> 00:59.160
para los números, sino también para

00:59.160 --> 01:02.860
las cadenas, etc. Y especialmente para las cuerdas, puede ser muy útil.

01:02.860 --> 01:07.420
Digamos que aquí, en nuestra función combinada, esperamos números o cadenas y los

01:07.420 --> 01:10.190
combinamos de forma diferente en función de lo que

01:10.190 --> 01:13.756
obtengamos, pero también queremos permitir que el que llama a

01:13.756 --> 01:18.756
la función defina cómo debe devolverse el resultado, de forma que básicamente podemos

01:18.880 --> 01:25.370
forzar una conversión de número a cadena o al revés.

01:25.370 --> 01:25.370
Podríamos

01:25.370 --> 01:29.740
hacer esto con el tercer parámetro y podríamos nombrar eso digamos tipo de resultado

01:29.740 --> 01:33.208
o conversión de resultado o como quieras nombrarlo y quiero describir

01:33.208 --> 01:37.240
esto con una cadena. Así que voy a poner esto

01:37.240 --> 01:41.122
en el tipo de cadena. Ahora mi idea es que puedo

01:41.122 --> 01:45.625
llamar a combinar aquí con dos números y por ejemplo pasar

01:45.625 --> 01:50.625
en una cadena de "como-número" y es totalmente a usted que identificador

01:50.630 --> 01:55.630
que utiliza aquí. Ahí abajo podríamos tener "as-text"

01:56.260 --> 01:59.357
pero luego podríamos tener otra combinación

02:02.910 --> 02:07.310
aquí CombinedStringAges en la que paso dos cadenas pero aún quiero

02:07.310 --> 02:10.030
que salga esto "as-number" y este sería

02:10.030 --> 02:13.540
un caso en el que el tercer parámetro puede ser útil para

02:13.540 --> 02:17.050
forzar una conversión porque si paso dos cadenas aquí

02:17.050 --> 02:19.950
normalmente lo haríamos en esta rama else y

02:19.950 --> 02:24.730
lo concatenaríamos y podría querer devolver esto como un número en su

02:24.730 --> 02:29.639
lugar para que también pueda registrar en la consola agentes de cadena combinados

02:29.639 --> 02:34.030
aquí. Así que ahora sólo tenemos que tener en cuenta

02:34.030 --> 02:37.512
estos identificadores en nuestra función incluyendo resultConversion

02:37.512 --> 02:41.730
en nuestras comprobaciones if. Ahora la pregunta es qué queremos

02:41.730 --> 02:45.700
hacer exactamente; queremos asegurarnos de que podemos forzar

02:45.700 --> 02:49.930
que estas dos cadenas se sumen como números o queremos forzar que el

02:49.930 --> 02:54.012
resultado, sin importar si fue un cálculo matemático o una concatenación

02:54.012 --> 03:03.039
de cadenas, se convierta en un texto o en un número.

03:03.039 --> 03:03.039
Si

03:03.039 --> 03:05.960
queremos forzar una conversión podríamos añadir

03:05.960 --> 03:10.382
la comprobación if aquí y comprobar si la conversión del resultado

03:10.382 --> 03:15.340
es igual a "as-number" y si ese es el caso quiero devolver el resultado con un

03:15.340 --> 03:18.826
plus delante que lo convierta en un número, la alternativa

03:18.826 --> 03:21.230
sería parseFloat por ejemplo pero aquí

03:22.800 --> 03:24.420
solo voy a ir a por el plus ya

03:24.420 --> 03:29.420
que esto es un poco más corto y si no quiero devolver el resultado aString para

03:30.156 --> 03:33.593
forzar una salida como cadena.

03:34.570 --> 03:38.883
Así que ahora hacemos el cálculo basado en el tipo real que obtenemos, pero

03:38.883 --> 03:42.300
luego convertimos al resultado que es una forma de hacerlo

03:42.300 --> 03:46.360
y si guardamos eso y luego compilamos este archivo, vemos que este es el

03:47.470 --> 03:51.020
resultado que obtengo y obtenemos esa salida, por ejemplo,

03:51.020 --> 03:54.759
para nuestra combinación de cadenas aquí, porque como he dicho,

03:54.759 --> 03:58.520
la combinación en sí el cálculo por así decirlo se realiza sobre

03:58.520 --> 04:02.530
la base del tipo que alimentamos en el que aquí es la cadena por lo que concatenar

04:02.530 --> 04:05.860
y luego sólo convertir al resultado.

04:05.860 --> 04:09.593
La lógica alternativa sería comprobar el tipo aquí

04:09.593 --> 04:14.320
y hacer una operación diferente basada en el tipo de retorno que

04:14.320 --> 04:19.180
estamos especificando aquí. Así que podríamos comentar esto y en

04:19.180 --> 04:22.600
su lugar aquí decir que si el tipo de la entrada uno

04:22.600 --> 04:26.230
es número y el tipo de la entrada dos es número, o si resultConversion

04:27.890 --> 04:30.865
es igual a "as-number" entonces quiero combinar

04:30.865 --> 04:35.865
los valores así y ahora para evitar este error, aquí fuerzo la conversión

04:35.930 --> 04:38.794
a números añadiendo un más delante de cada

04:38.794 --> 04:42.970
entrada para que cada entrada sea convertida a un número y se

04:42.970 --> 04:45.490
garantice que sea un número antes de

04:45.490 --> 04:48.490
combinarlos.

04:48.490 --> 04:51.130
Nota al margen: si pasas cadenas que no pueden

04:51.130 --> 04:54.610
ser convertidas a un número, así que algo como Max por ejemplo,

04:54.610 --> 04:58.800
entonces obtendrás un NaN, Not a Number como resultado.

04:58.800 --> 05:00.280
Bien, entonces en el otro

05:00.280 --> 05:03.170
caso, para que no tengamos "as-number", o que

05:03.170 --> 05:07.976
simplemente no tengamos entradas numéricas, entonces lo hacemos en este

05:07.976 --> 05:12.390
bloque de aquí y ahora con eso si devuelvo resultado de nuevo aquí, y luego

05:12.390 --> 05:16.230
guardamos esto y recompilamos, veremos una salida diferente

05:16.230 --> 05:20.230
en nuestra página. Ahora tenemos 56 en estas dos líneas aquí

05:20.230 --> 05:22.945
porque ahora no estamos convirtiendo el resultado, así

05:22.945 --> 05:26.300
que no estamos convirtiendo la cadena concatenada para esta línea,

05:26.300 --> 05:29.070
sino que estamos haciendo la conversión antes de combinar

05:29.070 --> 05:31.970
los dos valores. Así que depende de ti la lógica

05:31.970 --> 05:34.760
que quieras aplicar. En realidad, quiero examinar

05:34.760 --> 05:37.551
más de cerca el concepto de tipos literales que he descrito

05:37.551 --> 05:41.180
al principio de esta conferencia. Estoy pasando un "como-número" y "como-texto"

05:41.180 --> 05:44.157
y las bajadas de un negocio que ahora mismo nosotros como desarrollador

05:44.157 --> 05:47.600
tenemos que memorizar estos valores.

05:47.600 --> 05:50.450
Tenemos que asegurarnos de no perder el tipo aquí.

05:50.450 --> 05:54.010
Ahora podríamos usar un e-num para mejorar eso, pero si sólo tenemos

05:54.010 --> 05:57.754
dos valores aquí, "como-texto" o "como-número", entonces tal vez toda

05:57.754 --> 06:00.940
la búsqueda un tipo literal podría ser una opción.

06:00.940 --> 06:04.173
Podríamos decir "esto no debería ser ninguna

06:04.173 --> 06:09.173
cadena, debería ser "como-número" o "como-texto"" así que usamos

06:09.870 --> 06:12.090
un tipo de unión combinado con

06:12.090 --> 06:15.573
tipos literales. Los tipos literales son los tipos

06:15.573 --> 06:17.987
que se basan en los tipos básicos cadena,

06:17.987 --> 06:20.933
número, etc., pero entonces tienes una versión

06:20.933 --> 06:24.750
específica del tipo. Así que aquí, permitimos específicamente

06:24.750 --> 06:27.960
estas dos cadenas no cualquier cadena sólo estas dos cadenas.

06:27.960 --> 06:31.460
Así que queremos una cadena para la conversión del resultado, pero tiene que

06:31.460 --> 06:34.207
ser uno de estos dos valores. Cualquier otro valor de cadena

06:34.207 --> 06:37.560
no será permitido, así que esa es la idea detrás de un tipo literal

06:37.560 --> 06:40.747
y a menudo se utilizará esto en el contexto del tipo de unión porque

06:40.747 --> 06:43.700
no sólo se quiere permitir un valor exacto, se podría codificar

06:43.700 --> 06:46.500
duro en su código si ese fuera el caso, pero se quiere tener

06:46.500 --> 06:49.544
dos o más valores posibles.

06:49.544 --> 06:52.580
En este caso tenemos dos valores posibles.

06:52.580 --> 06:56.240
Así que ahora estamos garantizados para obtener la conversión

06:56.240 --> 07:00.288
de resultados que es "as-numbe" o "as-text" y por ejemplo aquí,

07:00.288 --> 07:03.800
si ahora trato de comparar esto con as-numbe porque tengo

07:03.800 --> 07:07.256
un error tipográfico aquí, el grupo de tipos es capaz

07:07.256 --> 07:10.360
de decirme aquí en el IDE y por supuesto todo lo que

07:10.360 --> 07:15.360
guardamos y compilar aquí en el terminal porque sabe que as-numbe sin una r al

07:15.830 --> 07:18.940
final nunca será un valor válido para resultConversion

07:18.940 --> 07:24.563
porque me puse este tipo de unión con estos tipos literales.

07:25.550 --> 07:27.593
Así que ahora volvemos a ganar algo de seguridad

07:27.593 --> 07:31.590
de tipo extra y nos aseguramos de que no podemos usar esto de forma incorrecta.

07:31.590 --> 07:34.720
Lo mismo, por supuesto, para pasar un valor. Si tenemos un error tipográfico

07:34.720 --> 07:38.747
aquí, obtenemos un error sólo si usamos "as-number" o "as-text"

07:38.747 --> 07:41.947
podemos compilar esto como lo ves y ahora compilar

07:41.947 --> 07:45.470
esto, esto funciona y obtenemos la misma salida que antes

07:45.470 --> 07:49.562
aquí. Por lo tanto, se trata de tipos literales especialmente

07:49.562 --> 07:52.193
útiles cuando se utilizan junto con los tipos de unión.
