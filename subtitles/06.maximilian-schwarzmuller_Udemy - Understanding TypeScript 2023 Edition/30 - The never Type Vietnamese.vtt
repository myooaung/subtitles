WEBVTT

00:02.220 --> 00:03.760
Giảng viên: Loại thú vị cuối

00:03.760 --> 00:07.490
cùng mà tôi muốn trình bày trong mô-đun này là loại không bao giờ.

00:07.490 --> 00:10.660
Bây giờ chúng ta đã thấy một hàm trả về khoảng trống.

00:10.660 --> 00:13.058
Vì vậy, điều đó không bao giờ trả lại bất cứ điều gì.

00:13.058 --> 00:17.380
Không bao giờ là một chức năng loại khác có thể trở lại.

00:17.380 --> 00:19.240
Và điều đó nghe có vẻ lạ.

00:19.240 --> 00:21.110
Chúng ta hãy xem nó hoạt động như thế nào.

00:21.110 --> 00:24.662
Giả sử chúng ta có một hàm generateError.

00:24.662 --> 00:28.280
Ở đây tôi mong đợi nhận được một thông báo, đó là một chuỗi

00:28.280 --> 00:31.610
và có thể là một số mã lỗi, có thể là một số.

00:31.610 --> 00:33.700
Bây giờ bên trong các chức năng này, giả sử,

00:33.700 --> 00:35.130
chúng tôi đưa ra một lỗi.

00:35.130 --> 00:37.760
Vì vậy, về cơ bản, đây phải là một chức

00:37.760 --> 00:41.500
năng tiện ích tạo ra các đối tượng lỗi và ném chúng.

00:41.500 --> 00:42.990
Vì vậy, ở đây chúng ta có thể ném một đối tượng, điều

00:42.990 --> 00:44.380
mà chúng ta có thể thực hiện trong JavaScript.

00:44.380 --> 00:47.366
Chúng tôi có thể loại bỏ bất kỳ đối tượng hoặc bất kỳ giá trị

00:47.366 --> 00:49.930
nào dưới dạng lỗi và điều đó phải có thuộc tính thông

00:49.930 --> 00:53.990
báo, trong đó tôi lưu trữ giá trị của đối số thông báo của mình tại đây.

00:53.990 --> 00:56.390
Và tôi muốn có thuộc tính mã lỗi,

00:56.390 --> 00:59.417
giả sử xóa từ, đối số mã trong tệp .

01:00.330 --> 01:02.390
Vì vậy, đó là với hàm không

01:02.390 --> 01:06.600
hợp lệ và chúng ta có thể gọi hàm này khi có lỗi xảy

01:06.600 --> 01:09.640
ra chẳng hạn và mã là 500.

01:09.640 --> 01:12.213
Nếu chúng tôi làm điều đó và chúng tôi biên dịch tệp

01:14.120 --> 01:17.080
này ở đây, chúng tôi sẽ thấy rằng khi tệp này tải lại, chúng

01:17.080 --> 01:19.150
tôi sẽ gặp lỗi, cũng như lỗi ở đây.

01:19.150 --> 01:21.670
Và điều này nghe có vẻ khá trừu tượng, nhưng thực

01:21.670 --> 01:22.850
ra không phải vậy.

01:22.850 --> 01:24.640
Việc có các chức năng tiện ích như

01:24.640 --> 01:27.850
thế này sẽ khá chuẩn trong các ứng dụng lớn hơn, nơi bạn

01:27.850 --> 01:30.270
không muốn đưa ra lỗi theo cách thủ công ở 10

01:30.270 --> 01:32.540
vị trí khác nhau trong ứng dụng của mình

01:32.540 --> 01:35.380
và nơi bạn muốn tiếp cận với một chức năng thuận tiện

01:35.380 --> 01:37.450
để tạo đối tượng lỗi cho bạn và cũng có

01:37.450 --> 01:39.350
thể ném nó ngay lập tức, để bạn có

01:39.350 --> 01:42.300
thể gọi chức năng này với các đầu vào khác nhau nhưng

01:42.300 --> 01:44.690
bạn luôn gặp lỗi khi ném.

01:44.690 --> 01:47.010
Bây giờ, điều thú vị về chức năng này là,

01:47.010 --> 01:49.048
nó không chỉ trả về khoảng trống.

01:49.048 --> 01:52.385
Tôi thực sự có thể chỉ định rằng nó trả về khoảng trống,

01:52.385 --> 01:54.545
bởi vì tất nhiên không trả về gì cả,

01:54.545 --> 01:58.030
nhưng thực tế nó không chỉ trả về không có gì, nếu chúng

01:58.030 --> 02:02.630
ta hoàn toàn trung thực, hàm này không bao giờ trả về.

02:02.630 --> 02:05.518
Hàm này không bao giờ tạo ra giá trị trả về.

02:05.518 --> 02:08.860
Nếu tôi cố gắng khôi phục giá trị trả về ở đây, trong kết

02:08.860 --> 02:11.193
quả nhật ký bảng điều khiển và sau đó tôi

02:12.040 --> 02:16.240
biên dịch mã của mình trong lần thực thi này, chúng tôi sẽ thấy không

02:16.240 --> 02:19.630
có giá trị không xác định nào được ghi ở đây, bởi vì một

02:19.630 --> 02:22.220
lỗi được đưa ra, điều này về cơ bản làm hỏng

02:22.220 --> 02:25.330
tập lệnh của chúng tôi , bạn có thể nói.

02:25.330 --> 02:27.080
Nó hủy bỏ kịch bản của chúng tôi.

02:27.080 --> 02:30.290
Và đây sẽ luôn là trường hợp của chức năng này.

02:30.290 --> 02:32.210
Tất nhiên chúng ta có thể gói nó trong try

02:32.210 --> 02:34.260
catch để chúng ta vẫn có thể tiếp tục trong tập

02:34.260 --> 02:37.620
lệnh này, nhưng chức năng này về cơ bản không bao giờ tạo ra giá trị.

02:37.620 --> 02:41.060
Hàm này luôn làm hỏng tập lệnh hoặc phần này

02:41.060 --> 02:42.910
của tập lệnh, nếu bạn đang

02:42.910 --> 02:44.720
sử dụng thử bắt và do đó

02:44.720 --> 02:47.910
không bao giờ trả về bất kỳ thứ gì.

02:47.910 --> 02:50.400
Và do đó, kiểu trả về của hàm này

02:50.400 --> 02:54.483
thực sự không chỉ là vô hiệu mà còn không bao giờ.

02:55.710 --> 02:56.700
Bây giờ, điều thú vị

02:56.700 --> 02:59.060
là, nếu bạn di chuột qua nó mà không chỉ định không

02:59.060 --> 03:01.680
bao giờ, bạn sẽ thấy kiểu được suy luận là vô hiệu.

03:01.680 --> 03:05.410
Tất cả bởi vì không bao giờ là một loại mới hơn, nó đã xuất hiện được

03:05.410 --> 03:07.060
một thời gian, nhưng nó không

03:07.060 --> 03:10.000
được tích hợp trong các phiên bản đầu tiên của TypeScript,

03:10.000 --> 03:12.620
và do đó, khoảng trống thường được giả định và

03:12.620 --> 03:15.417
không có gì ghê gớm nếu để nó ở đó.

03:15.417 --> 03:17.740
Nhưng bạn có thể rất rõ ràng và đặt không

03:17.740 --> 03:21.470
bao giờ là kiểu trả về một cách rõ ràng để làm cho nó thực sự rõ ràng

03:21.470 --> 03:24.490
rằng điều này không bao giờ trả về bất kỳ thứ gì.

03:24.490 --> 03:26.770
Vì vậy, từ góc độ chất lượng mã, điều này

03:26.770 --> 03:29.560
có thể rõ ràng hơn về ý định của bạn và làm cho các nhà

03:29.560 --> 03:30.680
phát triển của chúng

03:30.680 --> 03:32.330
tôi đọc mã của bạn thực sự rõ ràng

03:32.330 --> 03:35.850
rằng chức năng này nhằm mục đích không bao giờ trả lại bất kỳ thứ

03:35.850 --> 03:39.560
gì và về cơ bản làm hỏng hoặc phá vỡ tập lệnh của bạn hoặc một phần của

03:39.560 --> 03:40.954
script.

03:40.954 --> 03:43.890
Nhân tiện, một hàm khác sẽ không bao giờ

03:43.890 --> 03:47.190
trả về sẽ là một hàm có vòng lặp vô hạn.

03:47.190 --> 03:49.370
Vì vậy, nếu chúng ta có while (true) trong

03:49.370 --> 03:51.060
đó, điều đó sẽ tạo ra một vòng lặp

03:51.060 --> 03:52.790
vô hạn và do đó, đó cũng sẽ là một hàm

03:52.790 --> 03:54.410
không bao giờ trả về.

03:54.410 --> 03:56.070
Tuy nhiên, chức năng lỗi

03:56.070 --> 03:58.852
ở đây hoặc chức năng tạo ra lỗi cố định có thể

03:58.852 --> 04:01.305
là trường hợp sử dụng phổ biến hơn.

04:01.305 --> 04:04.500
Vì vậy, không bao giờ, cũng là một loại thú vị, mà bạn có

04:04.500 --> 04:06.230
thể sử dụng trên các chức năng

04:06.230 --> 04:08.553
cho các trường hợp như thế này ở đây.
