WEBVTT

00:02.180 --> 00:07.240
教师：在视觉上, 我们可以拖放, 但在JavaScript技术上,

00:07.240 --> 00:10.410
我们的脚本当然不知道发生了什么｡

00:10.410 --> 00:14.810
但对我们人类来说, 很明显我们把这个东西拖到了这里｡

00:14.810 --> 00:16.300
但是如果我们看一下代码,

00:16.300 --> 00:20.320
JavaScript怎么知道什么东西被拖到了哪里？

00:20.320 --> 00:24.440
我们如何根据现有的信息更新我们的状态？

00:24.440 --> 00:26.690
这是不可能的｡ 

00:26.690 --> 00:28.810
因此, 要在JavaScript中实现这一点,

00:28.810 --> 00:30.840
我们必须返回到可拖动项的类,

00:30.840 --> 00:33.960
即项目项｡

00:33.960 --> 00:36.710
在dragStartHandler中,

00:36.710 --> 00:39.950
记录控制台的事件并不是我们应该做的一切｡

00:39.950 --> 00:42.200
实际上我们根本不需要这样做｡ 

00:42.200 --> 00:45.070
相反, 我们现在使用事件对象,

00:45.070 --> 00:48.210
因为它具有数据传输属性｡

00:48.210 --> 00:50.440
这对于拖动事件是特别的,

00:50.440 --> 00:53.280
因为您具有这样的数据传输属性｡

00:53.280 --> 00:57.530
在该属性上, 您可以将数据附加到拖动事件,

00:57.530 --> 00:59.520
稍后您可以在拖放时提取该数据,

00:59.520 --> 01:12.020
JavaScript中的浏览器将在后台存储拖动操作期间的数据, 并确保拖放时获得的数据与此处附加的数据相同｡

01:12.020 --> 01:15.520
为此, 您可以在数据传输时调用setData,

01:15.520 --> 01:18.910
但数据传输实际上可能为空｡

01:18.910 --> 01:23.460
所以我们必须在这里加一个感叹号, 我们当然知道它在这里不会是null｡

01:23.460 --> 01:25.700
您可能会想, 为什么它会是null？

01:25.700 --> 01:34.190
拖动事件总是同一种事件, 但根据触发它的侦听器或您正在侦听的确切事件,

01:34.190 --> 01:37.520
数据传输不一定可用｡

01:37.520 --> 01:44.073
因此, 并非所有与拖动相关的事件都提供具有数据传输对象的事件对象｡

01:45.320 --> 01:49.080
然而, 在拖动开始事件上触发的dragStartHandler确实具有它,

01:49.080 --> 01:52.840
因此在这里我们可以安全地调用setData｡

01:52.840 --> 01:56.330
现在setData有两个参数｡ 

01:56.330 --> 01:59.900
第一个参数是数据格式的标识符,

01:59.900 --> 02:04.970
在这里你可以得到某些可能的格式｡

02:04.970 --> 02:08.210
在附件中, 你会发现一个深入的研究拖放与JavaScript,

02:08.210 --> 02:10.890
你可以了解更多的方式｡

02:10.890 --> 02:15.140
顺便说一下, 您还可以在我的JavaScript完整指南课程中了解更多信息｡

02:15.140 --> 02:18.390
这里我们需要text/plain格式,

02:18.390 --> 02:25.430
这意味着我们只需要附加一些需要传输的纯文本数据, 这很重要｡

02:25.430 --> 02:28.250
我们不会在这里附加我们的对象, 我们的项目本身,

02:28.250 --> 02:31.390
我们只会被困在这里｡

02:31.390 --> 02:34.340
所以不是完整的项目, 可以在这里呈现｡ 

02:34.340 --> 02:37.955
实际上, 附加项目的ID就足够了,

02:37.955 --> 02:44.870
因为这将允许我们稍后从我们的状态中获取该项目｡

02:44.870 --> 02:47.320
所以我们只需要附上身份证｡ 

02:47.320 --> 02:52.053
我们只想传输少量的数据, 这也将节省我们一些内存｡

02:53.100 --> 02:56.300
现在, 我们将数据附加到拖动事件｡ 

02:56.300 --> 02:58.330
我还想做的一件事是, 在数据传输中,

02:58.330 --> 03:05.430
我们必须再次添加感叹号, 我将设置effectAllowed属性为move｡

03:05.430 --> 03:08.610
这基本上控制了光标的外观, 并告诉浏览器一点我们的意图,

03:08.610 --> 03:15.200
即我们计划将元素从A移动到B｡

03:15.200 --> 03:16.760
另一种方法是复制,

03:16.760 --> 03:20.820
此时会出现不同的光标, 向用户指示您正在复制而不是移动,

03:20.820 --> 03:31.360
但这里我们要移动元素, 这意味着在拖放时, 我们会将其从原始位置删除, 并将其添加到新位置｡

03:31.360 --> 03:34.940
现在数据附在这里, 这是第一步｡ 

03:34.940 --> 03:38.470
现在让我们返回到希望放置的位置,

03:38.470 --> 03:40.360
即项目列表｡

03:40.360 --> 03:43.400
在这里, 它从dragLeaveHandler开始｡ 

03:43.400 --> 03:46.370
现在在这个应用程序中, 在这个项目中,

03:46.370 --> 03:51.500
我们只有一个拖放操作, 那就是我们的项目｡

03:51.500 --> 03:54.970
在更大的应用程序中, 您可能会在页面上有不同的部分可以拖放,

03:54.970 --> 04:01.080
而您不希望所有内容都可以拖放到任何地方｡

04:01.080 --> 04:09.580
因此, 在dragOverHandler中, 当您进入一个可拖动的区域并将一个项目附加到鼠标时,

04:09.580 --> 04:14.970
它将触发, 我想检查这里是否真的允许拖动｡

04:14.970 --> 04:19.546
对于这一点, 我会检查如果事件｡  dataTransfer,

04:19.546 --> 04:21.060
这里它也是可用的,

04:21.060 --> 04:22.950
因此如果它是可用的,

04:22.950 --> 04:25.500
然后, 如果它是可用的,

04:25.500 --> 04:34.140
数据传输类型属性具有等于text/plain的第一值｡

04:34.300 --> 04:42.390
这仅仅意味着, 附加到拖动事件的数据是那种格式吗？

04:42.390 --> 04:47.320
当然, 这是因为这是我们在dragStartHandler中设置的格式｡

04:47.320 --> 04:50.490
例如, 这里不允许删除图像或类似的内容,

04:50.490 --> 04:53.180
因为它们具有不同的数据格式｡

04:53.180 --> 04:56.173
我只允许放置纯文本｡ 

04:57.170 --> 05:01.020
当然, 我现在还需要再次用一个事件来替换下划线,

05:01.020 --> 05:03.280
因为我在这里指的是它｡

05:03.280 --> 05:07.150
现在如果是这样的话, 那么我知道我想允许下降,

05:07.150 --> 05:09.070
所以我会更新背景｡

05:09.070 --> 05:13.960
还有一件重要的事我们要做, 你必须打电话给事件｡

05:13.960 --> 05:13.960
阻止默认值｡ 

05:13.960 --> 05:15.950
但我们为什么要这么说呢？

05:15.950 --> 05:18.860
因为在JavaScript中, 拖放操作实际上只允许放置,

05:18.860 --> 05:26.119
所以如果在同一元素上的drag overHandler中调用了preventDefault,

05:26.119 --> 05:32.750
则drop事件将只在该元素上触发｡

05:32.750 --> 05:35.360
您可以将其视为如下所示｡ 

05:35.360 --> 05:38.870
JavaScript拖放事件的默认设置是不允许拖放,

05:38.870 --> 05:49.670
因此您必须在drag overHandler中阻止默认设置, 以告诉JavaScript和浏览器对于此元素（在本例中, 对于此无项目类的此部分）,

05:49.670 --> 05:54.870
您希望允许拖放｡

05:54.870 --> 05:57.920
因此, 只有当您使用dragOverHandler时,

05:57.920 --> 06:01.220
drop事件才会在使用者放开时触发｡

06:01.220 --> 06:02.910
否则, 如果使用者放开,

06:02.910 --> 06:05.060
将不会引发drop事件｡

06:05.060 --> 06:08.960
这样, drop处理程序最终会执行,

06:08.960 --> 06:12.620
因为现在我们允许这种情况发生｡

06:12.620 --> 06:16.440
所以在这里, 在drop处理程序中, 我们现在可以接受事件,

06:16.440 --> 06:20.610
现在让我们控制一下｡ 在此记录事件, 如下所示,

06:20.610 --> 06:23.003
以查看是否有效｡

06:23.940 --> 06:28.100
我们现在保存所有内容, 在此添加一个新项目,

06:28.100 --> 06:30.220
然后拖动它｡

06:30.220 --> 06:33.430
如果我把它放在这里, 在完成的项目中,

06:33.430 --> 06:36.490
你会看到这个拖动事件在这里触发｡

06:36.490 --> 06:43.050
它来自第236行, 也就是丢弃处理程序中的这一行｡

06:43.050 --> 06:45.950
现在, 如果我们在浏览器中检查拖动事件,

06:45.950 --> 06:47.447
您会看到这里有一堆数据,

06:47.447 --> 06:50.830
还有数据传输属性｡

06:50.830 --> 06:54.320
在这里你可以看到我们允许的效果,

06:54.320 --> 06:57.930
也就是移动, 你也看不到任何东西.

06:57.930 --> 07:01.600
嗯, 只是因为数据已经清除后,

07:01.600 --> 07:04.510
这是被放入控制台｡

07:04.510 --> 07:06.100
因为我们在这里放入了对象,

07:06.100 --> 07:10.830
而对象是引用类型, 所以, 我们看到了数据丢失的最新快照.

07:10.830 --> 07:13.360
实际上, 在我们放弃这个的时候,

07:13.360 --> 07:16.910
我们将能够从数据传输中提取数据｡

07:16.910 --> 07:18.360
我可以证明给你看｡ 

07:18.360 --> 07:20.960
当然, 我们可以简单地访问数据传输,

07:20.960 --> 07:23.210
这里有一个getData方法,

07:23.210 --> 07:26.580
现在我们想获取文本/纯文本格式的数据,

07:26.580 --> 07:34.560
这应该是我们附加到项目项上的数据传输包的项目ID｡

07:35.060 --> 07:39.690
如果我们现在保存它并在此处重新添加项目,

07:39.690 --> 07:41.050
然后将其拖动到此处,

07:41.050 --> 07:46.050
您会看到这确实是此项目项的ID｡

07:46.600 --> 07:47.920
我们可以看到, 如果我们检查它,

07:47.920 --> 07:50.880
因为我们也在这里添加它作为一个ID,

07:50.880 --> 07:55.124
0｡ 2167, 我看就是这个

07:55.124 --> 07:59.170
所以我们成功地转移了身份｡ 

07:59.170 --> 08:00.490
现在我们就快到了

08:00.490 --> 08:04.100
现在我们只需要在幕后更新我们的状态,

08:04.100 --> 08:06.163
然后重新渲染DUI｡
