WEBVTT

00:02.090 --> 00:02.923
Erzähler: Um fortgeschrittenere

00:02.923 --> 00:04.750
Dinge mit Dekoratoren zu tun, müssen

00:04.750 --> 00:07.340
Sie beachten, dass einige Dekoratoren, zum Beispiel

00:07.340 --> 00:09.200
Klassendekoratoren, aber auch Methodendekoratoren,

00:09.200 --> 00:14.650
tatsächlich auch in der Lage sind, etwas zurückzugeben.

00:14.650 --> 00:16.570
Also, ich gebe nichts an irgendeinen Dekorateur

00:16.570 --> 00:17.510
zurück.

00:17.510 --> 00:18.430
Ich spreche nicht von

00:18.430 --> 00:20.010
der Decorator-Funktion, die in

00:20.010 --> 00:22.460
der Decorator-Factory zurückgegeben wird.

00:22.460 --> 00:23.701
Ich meine wirklich einen

00:23.701 --> 00:26.040
Rückgabewert innerhalb der Decorator-Funktion,

00:26.040 --> 00:28.890
und wir haben nirgendwo einen solchen Wert.

00:28.890 --> 00:31.559
In der WithTemplate-Funktion, in dieser WithTemplate-Dekoratorfunktion,

00:31.559 --> 00:34.670
sollte ich sagen, könnten wir einen solchen Rückgabewert

00:34.670 --> 00:36.930
hinzufügen.

00:36.930 --> 00:38.520
Und was man zurückgeben kann und

00:38.520 --> 00:40.430
was TypeScript verwenden kann, hängt

00:40.430 --> 00:43.660
davon ab, mit welcher Art von Dekorator man arbeitet.

00:43.660 --> 00:44.990
Hier arbeiten wir mit einem

00:44.990 --> 00:47.270
Dekorator, der zu einer Klasse hinzugefügt wird,

00:47.270 --> 00:48.750
und in einer solchen Dekoratorfunktion

00:48.750 --> 00:51.677
können Sie eine neue Konstruktorfunktion zurückgeben,

00:51.677 --> 00:53.800
die die alte ersetzt.

00:53.800 --> 00:55.590
Die Klasse, der Sie den Dekorator hinzugefügt

00:55.590 --> 00:58.330
haben, wird also ersetzt, könnte man sagen.

00:58.330 --> 01:01.073
Hier können wir also eine neue Funktion zurückgeben,

01:01.073 --> 01:02.490
eine neue Konstruktorfunktion,

01:02.490 --> 01:06.370
oder einfach eine neue Klasse, denn eine Klasse, das Schlüsselwort

01:06.370 --> 01:08.280
class, erlaubt uns, diesen syntaktischen

01:08.280 --> 01:11.150
Zucker zu verwenden, um eine solche Konstruktorfunktion

01:11.150 --> 01:13.360
zu erstellen, und die Klasse, die ich hier

01:13.360 --> 01:17.463
erstelle, muss keinen Namen haben, aber wir können und sollten den Konstruktor,

01:17.463 --> 01:22.250
den wir hier bekommen, erweitern.

01:22.250 --> 01:23.730
Was ich jetzt hier mache, ist,

01:23.730 --> 01:25.848
dass ich in meiner Dekoratorfunktion hier

01:25.848 --> 01:28.060
eine neue Klasse zurückgebe, und noch einmal,

01:28.060 --> 01:29.270
das ist nur syntaktischer

01:29.270 --> 01:30.910
Zucker für eine Konstruktorfunktion,

01:30.910 --> 01:32.770
also gebe ich am Ende eine Konstruktorfunktion

01:32.770 --> 01:35.400
zurück, die auf der ursprünglichen Konstruktorfunktion

01:35.400 --> 01:38.830
basiert, so dass ich alle Eigenschaften meiner ursprünglichen Klasse,

01:38.830 --> 01:47.010
meiner ursprünglichen Konstruktorfunktion behalte, wir müssen das nicht unbedingt tun, aber ich will meine Eigenschaften hier nicht verlieren, also werde

01:47.010 --> 01:50.520
ich es tun.

01:50.520 --> 01:53.670
Und dann können wir hier neue Funktionen hinzufügen.

01:53.670 --> 01:56.716
Zum Beispiel, und ich werde hier einige Namen ändern müssen, kann

01:56.716 --> 02:00.340
ich dort eine neue Konstruktorfunktion hinzufügen, und um Verwirrung zu vermeiden,

02:00.340 --> 02:01.500
werde ich den Konstruktor,

02:01.500 --> 02:04.040
den ich hier bekomme, umbenennen.

02:04.040 --> 02:06.640
Die Klasse, in die ich diesen Dekorator

02:06.640 --> 02:09.620
eingefügt habe, nenne ich originalConstructor

02:12.889 --> 02:15.690
und kopiere das alles hierher.

02:15.690 --> 02:18.950
Und jetzt muss ich anstelle dieser Konstruktorfunktion

02:18.950 --> 02:20.853
hier super aufrufen, um diese ursprüngliche

02:20.853 --> 02:25.430
Konstruktorfunktion von innen heraus aufzurufen, denn wenn man eine Konstruktorfunktion

02:25.430 --> 02:27.410
in eine Klasse einfügt, die eine andere

02:27.410 --> 02:29.920
Klasse erweitert, was wir hier schließlich

02:29.920 --> 02:33.630
tun, muss man super aufrufen.

02:33.630 --> 02:36.108
Und jetzt können Sie hier jede Logik schreiben, die Sie wollen.

02:36.108 --> 02:40.040
Und hier könnten wir zum Beispiel die Logik für das Rendering

02:40.040 --> 02:42.782
der Vorlage aus unserer Decorator-Funktion

02:42.782 --> 02:45.620
in diese neue Konstruktorfunktion verschieben,

02:45.620 --> 02:49.020
die wir hier zurückgeben.

02:49.020 --> 02:50.960
Denken Sie also daran, dass wir hier eine

02:50.960 --> 02:52.550
Klasse erstellen, die am Ende

02:52.550 --> 02:53.383
nur eine Konstruktorfunktion

02:53.383 --> 02:55.833
mit dieser Logik erzeugt.

02:56.670 --> 02:58.850
Was ich jetzt versuche, ist,

02:58.850 --> 03:01.367
die Klasse zu ersetzen.

03:01.367 --> 03:04.298
Die Konstruktorfunktion, zu der wir unseren Dekorator

03:04.298 --> 03:07.550
hinzugefügt haben, mit einer neuen Klasse, mit einer neuen Konstruktorfunktion,

03:07.550 --> 03:10.290
wo ich immer noch die alte Logik ausführe, aber wo ich

03:10.290 --> 03:12.920
auch meine eigene neue Logik hinzufüge, und deshalb

03:12.920 --> 03:14.670
sollte das Template jetzt eigentlich

03:14.670 --> 03:17.450
nur dann in das DOM gerendert werden, wenn ich mein Objekt

03:17.450 --> 03:21.340
hier wirklich instanziiere.

03:21.340 --> 03:22.890
Und nicht immer, wenn diese

03:22.890 --> 03:25.180
Dekoratorfunktion ausgeführt wird, was,

03:25.180 --> 03:26.340
wie Sie gelernt haben,

03:26.340 --> 03:29.620
geschieht, sobald wir die Klasse definieren.

03:29.620 --> 03:31.010
Jetzt eine kleine Änderung hier, ich

03:31.010 --> 03:34.290
rufe meinen ursprünglichen Konstruktor hier nicht mehr auf, stattdessen können

03:34.290 --> 03:37.380
wir einfach auf diesen zugreifen. name, um den Wert der

03:37.380 --> 03:40.180
Eigenschaft name der zu erstellenden

03:40.180 --> 03:42.750
Instanz zu erhalten.

03:42.750 --> 03:45.120
Jetzt gibt es da unten eine kleine Beschwerde,

03:45.120 --> 03:47.750
dass die Typen nicht korrekt sind.

03:47.750 --> 03:51.330
Um das zu beheben, können wir unsere Decorator-Funktion in eine generische

03:51.330 --> 03:53.990
Funktion verwandeln, bei der wir einen Typ erhalten

03:53.990 --> 03:57.113
und diesen als den Typ des ursprünglichen Konstruktors festlegen,

03:58.090 --> 03:59.820
und nun klarstellen, dass dies im

03:59.820 --> 04:01.668
Grunde eine Konstruktorfunktion

04:01.668 --> 04:04.410
sein wird, und wir können das klarstellen, indem wir

04:04.410 --> 04:05.780
einen speziellen Typ zuweisen,

04:05.780 --> 04:09.260
einen Objekttyp, bei dem wir eine neue Eigenschaft festlegen, dies

04:09.260 --> 04:17.760
ist natürlich ein Reservename, aber er sagt TypeScript, dass dies am Ende ein Objekt sein wird, das neu erstellt werden kann.

04:17.760 --> 04:19.690
Das wird also eine Konstruktorfunktion sein,

04:19.690 --> 04:22.170
eine Funktion, die wir mit dem Schlüsselwort new aufrufen

04:22.170 --> 04:24.380
können, um ein neues Objekt zu erzeugen.

04:24.380 --> 04:27.410
Und diese neue Funktion, diese neue Methode, auf der das Objekt

04:27.410 --> 04:30.660
T basiert, wird eine beliebige Anzahl von Argumenten erhalten,

04:30.660 --> 04:33.520
daher verwende ich hier Restparameter, um so viele Argumente

04:33.520 --> 04:35.380
zu akzeptieren, wie Sie wollen, so dass

04:35.380 --> 04:37.290
sie wirklich flexibel sind, was die Argumente

04:37.290 --> 04:39.840
angeht, die an den Konstruktor der Klasse, die wir

04:39.840 --> 04:44.000
zu ändern versuchen, übergeben werden können.

04:45.420 --> 04:46.430
Fügen Sie die neue Funktion

04:46.430 --> 04:49.063
hinzu, die dann am Ende ein Objekt zurückgibt.

04:50.140 --> 04:53.500
Jetzt sollte ich die Definition des Rest-Parameters in meinen Konstruktor

04:53.500 --> 04:55.680
kopieren, so dass dieser Konstruktor auch alle

04:55.680 --> 04:57.640
Argumente akzeptieren kann, die wir bekommen

04:57.640 --> 05:00.260
könnten, so dass wir Person im Grunde mit allen Argumenten

05:00.260 --> 05:02.380
instanziieren können, die wir hier übergeben

05:02.380 --> 05:04.380
wollen.

05:04.380 --> 05:06.610
Mit allen Argumenten, die wir auch hier, in der ursprünglichen

05:06.610 --> 05:09.279
Konstruktorfunktion, benötigen könnten.

05:09.279 --> 05:11.600
Das einzige Problem dabei ist, dass wir nicht wissen,

05:11.600 --> 05:14.021
ob es eine solche Eigenschaft name gibt, und richtig,

05:14.021 --> 05:16.250
wir wissen nicht, zu welcher Klasse wir diesen

05:16.250 --> 05:19.639
WithTemplate-Dekorator hinzufügen, also wissen wir nicht, ob es

05:19.639 --> 05:23.951
eine Eigenschaft name in der Klasse gibt, zu der wir ihn hinzufügen.

05:23.951 --> 05:25.560
Wir können dies jedoch beheben,

05:25.560 --> 05:27.140
indem wir TypeScript einfach

05:27.140 --> 05:30.200
mitteilen, dass das Objekt T auf dem es basiert, so dass unsere

05:30.200 --> 05:32.773
ursprüngliche Konstruktorfunktion nicht einfach

05:32.773 --> 05:35.530
ein beliebiges Objekt erzeugt, sondern tatsächlich

05:35.530 --> 05:37.460
ein Objekt mit einer name-Eigenschaft,

05:37.460 --> 05:41.140
die vom Typ string ist, und das ist korrekt.

05:41.140 --> 05:44.922
Unser WithTemplate-Dekorator wird einer Klasse hinzugefügt, die eine Name-Eigenschaft

05:44.922 --> 05:46.250
haben wird.

05:46.250 --> 05:47.300
Wenn ich das auskommentieren

05:47.300 --> 05:48.133
würde, bekämen wir

05:48.133 --> 05:50.740
einen Fehler, weil wir jetzt versuchen würden, diesen Dekorator

05:50.740 --> 05:53.460
zu einer Klasse hinzuzufügen, die dieses Kriterium nicht erfüllt,

05:53.460 --> 05:55.543
aber hier erfüllt er es.

05:55.543 --> 05:58.790
Ich erhalte hier einen Fehler, wenn ich versuche, dies zu kompilieren, weil

05:58.790 --> 06:00.630
ich args hier nicht verwende. Wir können dies

06:00.630 --> 06:02.660
in ein _ ändern, um typescript mitzuteilen, dass

06:02.660 --> 06:04.930
wir wissen, dass wir es nicht verwenden und dass wir dies

06:04.930 --> 06:06.230
ignorieren wollen.

06:06.230 --> 06:08.050
Dies ist ein gültiger Parametername,

06:08.050 --> 06:10.678
es ist nur ein spezieller Name, den Typescript

06:10.678 --> 06:13.220
als "I get it, I need to accept it, but I won't use

06:13.220 --> 06:15.260
it parameter" versteht.

06:15.260 --> 06:18.273
Und damit ist alles kompiliert, und wenn wir neu laden,

06:19.440 --> 06:22.420
sehen wir immer noch Max auf der Seite hier.

06:22.420 --> 06:23.910
Das Interessante ist nur, wenn

06:23.910 --> 06:25.480
wir jetzt den Code entfernen, in

06:25.480 --> 06:27.060
dem wir Person instanziieren,

06:27.060 --> 06:28.440
wenn ich das auskommentiere,

06:28.440 --> 06:30.740
so dass ich nur eine Person-Klasse finde, aber

06:30.740 --> 06:33.550
ich instanziiere sie nirgendwo, sehen Sie, wenn es neu

06:33.550 --> 06:36.890
geladen wird, sehen wir Max nicht auf dem Bildschirm.

06:36.890 --> 06:39.467
Alle Dekoratoren werden weiterhin ausgeführt,

06:39.467 --> 06:42.410
aber wir geben nichts mehr auf dem Bildschirm aus.

06:42.410 --> 06:43.243
Und der Grund dafür

06:43.243 --> 06:46.340
ist, dass wir unseren Dekorator jetzt noch weiter verbessert

06:46.340 --> 06:49.520
haben, indem wir seine Funktion nutzen, bei der wir einen

06:49.520 --> 06:52.360
neuen Wert oder in diesem Fall eine neue Konstruktorfunktion

06:52.360 --> 06:55.350
zurückgeben können.

06:55.350 --> 06:57.205
Im Falle des Klassendekorators.

06:57.205 --> 07:00.780
Dies ist eine neue Konstruktorfunktion oder eine neue Klasse, die,

07:00.780 --> 07:03.040
wie ich erklärt habe, nur syntaktischer Zucker

07:03.040 --> 07:04.300
für die Konstruktorfunktion

07:04.300 --> 07:06.750
ist, und diese Konstruktorfunktion ersetzt

07:06.750 --> 07:09.070
daher unsere ursprüngliche Klasse, unsere

07:09.070 --> 07:12.160
ursprüngliche Konstruktorfunktion.

07:12.160 --> 07:15.220
Da ich hier super aufgerufen habe, speichern

07:15.220 --> 07:17.610
wir die ursprüngliche Funktion.

07:17.610 --> 07:19.690
Wir speichern die ursprüngliche Klasse, alles,

07:19.690 --> 07:22.540
was wir hier initialisieren, passiert im Grunde immer noch, weil

07:22.540 --> 07:25.530
ich das auch in meinem Ersetzungskonstruktor mache, und ich erweitere

07:25.530 --> 07:27.480
die ursprüngliche Klasse.

07:27.480 --> 07:30.420
Wir speichern also alles, was in der ursprünglichen Klasse war.

07:30.420 --> 07:31.550
Sie müssen das nicht tun,

07:31.550 --> 07:32.670
aber ich tue es hier, weil

07:32.670 --> 07:35.560
ich die ursprünglichen Daten nicht verlieren möchte.

07:35.560 --> 07:36.850
Aber hinter den Kulissen ersetze

07:36.850 --> 07:39.770
ich die Klasse durch meine neue benutzerdefinierte Klasse hier,

07:39.770 --> 07:42.370
und das erlaubt uns, zusätzliche Logik hinzuzufügen, die

07:42.370 --> 07:45.600
ausgeführt werden soll, wenn die Klasse instanziert wird.

07:45.600 --> 07:49.090
Und jetzt können wir plötzlich Logik hinzufügen, die nicht

07:49.090 --> 07:52.410
bei der Definition der Klasse, sondern bei ihrer Instanziierung

07:52.410 --> 07:54.660
ausgeführt wird.

07:54.660 --> 07:57.150
Dies ist also ein gutes erstes Beispiel

07:57.150 --> 08:01.860
dafür, welche Möglichkeiten man mit Dekorateuren hat, wenn man weiß,

08:01.860 --> 08:04.480
was man mit ihnen machen kann.

08:04.480 --> 08:06.800
Und man kann sie nicht nur als Funktionen definieren,

08:06.800 --> 08:09.970
und man kann sie nicht nur mit Faktor-Funktionen definieren.

08:09.970 --> 08:12.600
Bei einigen Dekoratoren, wie dem Klassendekorator,

08:12.600 --> 08:14.400
kann man auch etwas zurückgeben, um

08:14.400 --> 08:17.650
das Ding, dem man den Dekorator hinzugefügt hat, in unserem Fall

08:17.650 --> 08:19.470
die Klasse, durch eine neue Klasse zu

08:19.470 --> 08:23.000
ersetzen, die die alte Klasse implementieren kann, aber auch ihre neue

08:23.000 --> 08:25.711
benutzerdefinierte Logik hinzufügen kann.

08:25.711 --> 08:28.004
Und wenn wir das wieder auskommentieren,

08:28.004 --> 08:30.240
geben wir Max auf dem Bildschirm mit unserer

08:30.240 --> 08:31.570
eigenen Klasse wieder,

08:31.570 --> 08:35.793
die die alte Klasse ersetzt, oder die sie erweitert und ersetzt.
