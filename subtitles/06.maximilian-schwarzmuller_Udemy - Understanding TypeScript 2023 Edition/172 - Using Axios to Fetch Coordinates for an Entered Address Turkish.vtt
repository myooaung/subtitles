WEBVTT

00:02.390 --> 00:04.530
Eğitmen: Artık üçüncü taraf paketi

00:04.530 --> 00:06.890
olmadan talep göndermek mümkün.

00:06.890 --> 00:10.140
Modern tarayıcılardaki modern JavaScript'te API'yi

00:10.140 --> 00:11.910
getirmeniz gerekir.

00:11.910 --> 00:13.620
Bu, tarayıcılarda yerleşik olarak

00:13.620 --> 00:16.710
bulunur, genel olarak kullanılabilir bir işlevdir ve URL'lere

00:16.710 --> 00:19.600
istek göndermek için kullanabilirsiniz.

00:19.600 --> 00:22.450
Şimdi, hata işlemenin biraz hantal olabileceği

00:22.450 --> 00:24.870
gerçeği dışında, bu API'ye karşı

00:24.870 --> 00:27.210
konuşacak bir şey yok.

00:27.210 --> 00:29.250
Ancak üçüncü parti kütüphanelerin kullanımı

00:29.250 --> 00:31.123
konusunda da pratik yapmak istiyorum.

00:31.960 --> 00:36.070
Bu nedenle, çok popüler olan axios paketini kullanacağız.

00:36.070 --> 00:38.510
Bu, HTTP istekleri göndermek için JavaScript'te

00:38.510 --> 00:43.510
ve dolayısıyla TypeScript'te de kullanabileceğiniz bir pakettir.

00:43.880 --> 00:47.263
Bu yüzden kullanmaya başlamak için axios'u yüklememiz gerekiyor.

00:48.100 --> 00:51.080
Bağımlılıkları yönetmek için NPM kullanabileceğimiz

00:51.080 --> 00:54.150
projemizde bunun için npm install, dash, dash save

00:54.150 --> 00:57.620
axios'u aynen bu şekilde çalıştırabiliriz ve bu şimdi

00:57.620 --> 01:00.520
axios paketini yükleyecektir.

01:00.520 --> 01:04.750
Bu yüklendikten sonra, şimdi burada axios'u içe aktarabiliriz,

01:04.750 --> 01:07.390
axios'tan axios'u içe aktarın ve ilginç

01:07.390 --> 01:09.170
bir şey göreceksiniz.

01:09.170 --> 01:12.090
Şimdi bunu kullanmaya başlarsam ve buraya bir nokta yazarsam,

01:12.090 --> 01:13.990
otomatik tamamlama alırım.

01:13.990 --> 01:16.290
Örneğin, burada bir URL'ye get isteği

01:16.290 --> 01:18.523
gönderecek bir get yönteminiz var.

01:19.850 --> 01:23.150
Yani burada aslında yerleşik TypeScript desteğimiz var.

01:23.150 --> 01:25.640
Ve eğer node modüllerine gidersek

01:25.640 --> 01:29.670
ve axios paketine bir göz atarsak, işte burada.

01:29.670 --> 01:33.970
Orada bir dizin olduğunu göreceksiniz. dts dosyası.

01:33.970 --> 01:38.970
Dolayısıyla axios kütüphanesi yazarları, kütüphanelerini böyle bir TypeScript

01:39.430 --> 01:43.750
çeviri paketiyle birlikte zaten paketlemişlerdir.

01:43.750 --> 01:47.440
Orada her şey TypeScript'e açıklanıyor.

01:47.440 --> 01:50.120
Bu paket veya bu dosya temel olarak TypeScript'e

01:50.120 --> 01:53.660
bu JavaScript kütüphanesinin neler yapabildiğini ve hangi türleri

01:53.660 --> 01:55.600
kullandığını açıklar.

01:55.600 --> 01:59.100
Şimdi bazı kütüphaneler bunu yapıyor ve axios da bunlardan biri.

01:59.100 --> 02:02.070
Bir kütüphaneyi kullanmaya başladığınızda bunu yapıp yapmadığını çok hızlı

02:02.070 --> 02:03.420
bir şekilde anlayabilirsiniz.

02:03.420 --> 02:05.520
Otomatik tamamlama desteği alamıyorsanız

02:05.520 --> 02:07.930
ve çok fazla derleme hatası alıyorsanız, muhtemelen

02:07.930 --> 02:10.750
ekstra türler yüklemeniz gerekir.

02:10.750 --> 02:12.970
Burada yaptığımız gibi iyi bir destek alırsanız

02:12.970 --> 02:16.120
ve bundan sonra hiçbir derleme hatası almazsanız, zaten

02:16.120 --> 02:18.140
yerleşik tür çevirileri olan bir kütüphaneniz

02:18.140 --> 02:20.170
var demektir.

02:20.170 --> 02:23.120
Bu nedenle, herhangi bir ekstra tür yüklemenize gerek yoktur.

02:23.120 --> 02:26.240
Bildiğim iyi oldu ve burada harika bir örneğimiz var.

02:26.240 --> 02:27.800
Dolayısıyla, yerleşik desteğimiz

02:27.800 --> 02:30.410
olduğundan, erişimi hemen kullanmaya başlayabiliriz.

02:30.410 --> 02:34.350
Ve şimdi bu URL'ye bir HTTP isteği göndermek istiyorum.

02:34.350 --> 02:37.980
Şimdi bu URL'yi kopyalayalım ve buraya girelim.

02:37.980 --> 02:40.220
Ve bir şablon değişmezi oluşturmak için

02:40.220 --> 02:42.440
bunu ters işaretler arasına gireceğim,

02:42.440 --> 02:45.880
böylece bu dizenin parçalarını diğer değerler için dinamik

02:45.880 --> 02:49.050
olarak kolayca değiştirebilirler.

02:49.050 --> 02:51.730
Şimdi bu dizeyi yapıştıralım, oldukça uzun

02:51.730 --> 02:55.460
ve sondaki API anahtarınızı bu sabitte sakladığımız Google

02:55.460 --> 02:59.210
API anahtarımızla değiştirerek başlayalım.

02:59.210 --> 03:01.690
Bunun için, bu bir şablon değişmezi olduğundan,

03:01.690 --> 03:04.110
dolar işareti, küme parantezi ekleyebilir

03:04.110 --> 03:09.110
ve ardından bu sabiti kullanmak için Google API anahtarını gösterebiliriz.

03:10.820 --> 03:13.240
Ayrıca, bu adresi de değiştirelim.

03:13.240 --> 03:15.500
Burada girilmiş sahte bir adresimiz var ve

03:15.500 --> 03:17.130
tabii ki orada kullanıcının girdiği

03:17.130 --> 03:19.300
adresi kullanmak istiyorum.

03:19.300 --> 03:22.540
Şimdi önemli bir not, bu adres elbette tam olarak kullanıcının

03:22.540 --> 03:24.910
girdiği metindir ve sundukları özel

03:24.910 --> 03:27.560
karakterler, boşluklar, virgüller ve çok

03:27.560 --> 03:30.650
daha fazlasını içerebilir.

03:30.650 --> 03:32.250
Ve tüm bu karakterler

03:32.250 --> 03:35.580
ve semboller URL'lerde desteklenmez.

03:35.580 --> 03:37.750
Bu yüzden girilen bu dizeyi URL uyumlu

03:37.750 --> 03:40.550
bir dizeye dönüştürmemiz gerekir.

03:40.550 --> 03:43.810
Ve neyse ki, TypeScript ve JavaScript'in özellikle

03:43.810 --> 03:46.940
bu konuda bize yardımcı olan yerleşik bir

03:46.940 --> 03:50.460
işlevi vardır: encode URI işlevi.

03:50.460 --> 03:53.020
Bunu çağırabilir ve ona bir dize aktarabiliriz

03:53.020 --> 03:54.770
ve bu, bu dizeyi URL uyumlu

03:54.770 --> 03:57.460
bir dizeye dönüştürecektir.

03:57.460 --> 03:59.845
Bununla birlikte, koordinatlarımızı

03:59.845 --> 04:01.600
geri almak için istek gönderebileceğimiz

04:01.600 --> 04:04.900
bitmiş URL'yi elde ettik.

04:04.900 --> 04:07.390
Şimdi get bize bir söz veriyor çünkü elbette

04:07.390 --> 04:10.620
böyle bir isteği asenkron bir görev olarak göndermek.

04:10.620 --> 04:13.430
Başarılı olursa günlüğe kaydederiz

04:13.430 --> 04:15.690
ya da teknik bir hata veya hata

04:15.690 --> 04:18.620
yanıt kodu alırsak yakalarız.

04:18.620 --> 04:21.560
Bu noktada alabileceğimiz tüm hataları konsol günlüğüne

04:21.560 --> 04:24.710
kaydedeceğiz, çünkü normalde başarılı olmamız gerekir.

04:24.710 --> 04:27.820
Bu nedenle burada, yanıtımı then bloğunda

04:27.820 --> 04:32.400
bekleyeceğim ve bu yanıtı da then olarak kaydetmek istiyorum.

04:32.400 --> 04:35.820
Şimdi bununla birlikte, bunun bize ne vereceğini görelim derim.

04:35.820 --> 04:39.720
Webpack sürecini tekrar başlatmak için NPM start'ı yeniden çalıştıralım ve bunu oluşturmaya

04:39.720 --> 04:40.953
başlayalım.

04:42.120 --> 04:43.790
Uygulamamıza geri dönelim

04:43.790 --> 04:47.220
ve burada Altıncı Cadde gibi bir yere girelim.

04:47.220 --> 04:50.090
Arama Adresine basarsam, bir süre sonra burada bir çıktı

04:50.090 --> 04:51.480
aldığınızı göreceksiniz.

04:51.480 --> 04:53.660
Ve orada 200 durum koduna sahip olmalısınız,

04:53.660 --> 04:56.120
bu da isteğin başarılı olduğu anlamına gelir.

04:56.120 --> 04:59.090
Ve sunucunun yanıtladığı verileri tutan

04:59.090 --> 05:01.240
bir veri alanınız var.

05:01.240 --> 05:03.890
Bu veri alanının bir sonuç alanı vardır ve sizin de anlayabileceğiniz

05:03.890 --> 05:06.570
gibi orada bir dizimiz vardır.

05:06.570 --> 05:10.690
Bu dizide birkaç öğe var, sayıları değişiyor.

05:10.690 --> 05:13.770
Ve bunlar temel olarak Google'ın bulduğu sonuçlardır.

05:13.770 --> 05:16.740
Ve ilk sonuç genellikle en iyisidir.

05:16.740 --> 05:18.790
Yani buna bakarsanız, örneğin biçimlendirilmiş

05:18.790 --> 05:20.460
adresi görürüz.

05:20.460 --> 05:22.520
Yani Google'ın girdiğimiz bu adres

05:22.520 --> 05:23.790
için bulduğu adres, bizim

05:23.790 --> 05:26.570
girdiğimizden biraz daha eksiksiz.

05:26.570 --> 05:29.300
Ve burada geometri anahtarımız var.

05:29.300 --> 05:31.880
Bunu genişletirsek, bunun da bir konum anahtarı

05:31.880 --> 05:35.240
olduğunu ve bunun da nihayetinde ilgilendiğimiz koordinatlara,

05:35.240 --> 05:37.540
enlem ve boylama sahip bir nesne olduğunu

05:37.540 --> 05:39.700
görürüz.

05:39.700 --> 05:43.000
Sonunda, verilere, sonuçlara ve ardından ilk

05:43.000 --> 05:47.390
sonuca, geometriye, konuma girmeliyiz ve enlem ve boylamı

05:47.390 --> 05:50.030
olan bir nesneye sahip olacağız.

05:50.030 --> 05:52.840
Ve bu enlem ve boylamı daha sonra bir harita

05:52.840 --> 05:55.240
üzerinde görüntüleyebileceğiz.

05:55.240 --> 05:57.430
Şimdilik bunu çıkaralım

05:57.430 --> 05:59.360
ve response dot data dot

05:59.360 --> 06:04.360
sonuçlarına erişerek koordinatlarımızı alalım.

06:04.600 --> 06:09.600
Ve sonra ilk sonuç nokta geometrisi nokta konumu, yani gerçekten

06:11.200 --> 06:13.093
bunu delmek.

06:15.130 --> 06:16.880
Şimdi elbette fark edeceğiniz

06:16.880 --> 06:19.850
şey, TypeScript burada şikayet etmese de, burada

06:19.850 --> 06:23.280
da iyi bir TypeScript desteğimiz yok, değil mi?

06:23.280 --> 06:25.740
Buraya bir nokta yazarsam, bu bir sonuç özelliği

06:25.740 --> 06:27.620
olduğunu göstermez.

06:27.620 --> 06:30.350
Ve gerçekten de, burada herhangi bir şeye, hatta

06:30.350 --> 06:33.840
yanıtta mevcut olmayan bir şeye bile erişmeyi deneyebilirim

06:33.840 --> 06:34.820
ve bu mantıklı.

06:34.820 --> 06:38.010
TypeScript, istek gönderdiğim herhangi bir URL'nin

06:38.010 --> 06:40.920
yanıtında ne olacağını nasıl bilebilir?

06:40.920 --> 06:42.810
TypeScript, geliştirme sırasında

06:42.810 --> 06:44.970
orada ne olduğunu öğrenmek için

06:44.970 --> 06:46.510
devam edip istek göndermez,

06:46.510 --> 06:49.170
bu da o kadar iyi olmaz.

06:49.170 --> 06:51.400
Ancak TypeScript'e yanıtta ne olmasını

06:51.400 --> 06:53.950
beklediğimizi söyleyebiliriz çünkü bu

06:53.950 --> 06:58.950
get yöntemi aslında genel bir yöntemdir ve burada herhangi bir şey vardır, bu

06:59.040 --> 07:02.830
aslında almayı beklediğimiz yanıtın türüdür.

07:02.830 --> 07:06.880
Böylece, burada yanıt türümü ekleyebilir ve TypeScript'e

07:06.880 --> 07:11.270
beklediğim şeyin bir sonuç anahtarına sahip bir nesne

07:11.270 --> 07:15.260
olduğunu, bunun da nesnelerle dolu bir dizi olduğunu,

07:15.260 --> 07:18.330
her nesnenin bir geometri anahtarına

07:18.330 --> 07:22.170
sahip olduğunu, bunun da bir konum anahtarına sahip

07:22.170 --> 07:24.330
bir nesne olduğunu, bunun da

07:24.330 --> 07:28.160
bir sayı olan enleme ve bir sayı olan boylama sahip

07:28.160 --> 07:33.510
bir nesne olduğunu söyleyebilirim.

07:33.510 --> 07:36.030
Yani kesinlikle oldukça karmaşık bir tip.

07:36.030 --> 07:39.400
Ancak bununla birlikte, buraya bir nokta yazarsak, otomatik tamamlama

07:39.400 --> 07:42.220
alırım ve TypeScript burada neye eriştiğimi anlar.

07:42.220 --> 07:44.860
Ve elbette, bu türü buradan çekip kendi tür takma

07:44.860 --> 07:46.620
adımızı da oluşturabiliriz.

07:46.620 --> 07:50.497
Belki burada, Google coğrafi kodlama yanıtı.

07:53.220 --> 07:55.380
Bu benim özel türüm olur ve TypeScript'e

07:55.380 --> 07:58.420
burada Google coğrafi kodlama yanıtını almayı

07:58.420 --> 08:01.540
beklediğimi söyleyebilirim.

08:01.540 --> 08:03.900
Şimdi, elbette, aslında yanıt sadece sonuç

08:03.900 --> 08:07.020
dizisinden daha fazlasını içerir, ayrıca bir durum

08:07.020 --> 08:09.460
kodu ve sonuç dizisinin her bir öğesinde

08:09.460 --> 08:13.040
birden fazla başka alan ve ardından geometri vardır.

08:13.040 --> 08:17.030
Elbette tüm bu alanları burada özel türünüze ekleyebilirsiniz,

08:18.210 --> 08:21.330
ancak ben burada sadece aktif olarak ilgilendiğim

08:21.330 --> 08:25.640
değerlere odaklanmak istiyorum.

08:25.640 --> 08:27.360
Bu nedenle aslında ekleyeceğim

08:27.360 --> 08:30.900
bir alan daha var ve o da sonuçların yanındaki durum.

08:30.900 --> 08:34.520
Burada, en üst seviyede, durumumuz var ve bu bize Google'ın

08:34.520 --> 08:35.500
başarılı olup olmadığını

08:35.500 --> 08:38.390
söyleyen bir dize olacak.

08:38.390 --> 08:41.810
Ve durum aslında ya tamam ya da birkaç başka

08:41.810 --> 08:44.010
değer olacaktır.

08:44.010 --> 08:46.910
Bu, temel olarak Google'ın bu adres için koordinatları

08:46.910 --> 08:50.020
almayı başarıp başaramadığını bize bildirmek için yanıt

08:50.020 --> 08:51.890
verdiği bir durum mesajıdır.

08:51.890 --> 08:54.000
Ve tabii ki, resmi belgelerde burada

08:54.000 --> 08:57.280
ne tür yanıtlar alabileceğimizi öğrenebiliriz.

08:57.280 --> 08:58.900
Biraz aşağı kaydırır ve yanıtı

08:58.900 --> 09:01.070
anla seçeneğine tıklarsanız, geri aldığınız

09:01.070 --> 09:04.240
yanıtın içinde ne olduğunu öğrenir ve bu nedenle coğrafi

09:04.240 --> 09:07.000
kodlama yanıtlarına tıklarsınız.

09:07.000 --> 09:08.580
Ve sonra durum kodlarında,

09:08.580 --> 09:11.090
mevcut durum kodlarını öğreniyoruz.

09:11.090 --> 09:15.090
Örneğin, hiçbir şey bulunamazsa hepimiz sıfır sonuç aldık.

09:15.090 --> 09:16.850
Başka kodlarımız da var ama burada

09:16.850 --> 09:19.223
sadece bu ikisiyle ilgileniyorum.

09:20.200 --> 09:23.310
TypeScript'e burada, bu iki değerden biri olan bir durum

09:23.310 --> 09:24.890
kodu alacağımı söylüyorum.

09:24.890 --> 09:27.480
Şimdi tekrar, bunun bir sayı değeri de olabilir,

09:27.480 --> 09:29.830
ancak bu benim için burada iyi.

09:29.830 --> 09:31.640
Dediğim gibi, bunu elbette daha eksiksiz

09:31.640 --> 09:33.700
bir şekilde yazabilirsiniz.

09:33.700 --> 09:36.230
Şimdi bu eklendiğinde, then bloğunda, response

09:36.230 --> 09:41.230
dot data dot status'un iyi olup olmadığını kontrol edebiliriz, bu da bir şeylerin yanlış gittiği

09:41.580 --> 09:44.120
anlamına gelir ve bu durumda buraya bir hata atabiliriz

09:44.120 --> 09:48.090
ve bu nedenle bazı hata işlemlerini ayarlayabileceğimiz catch bloğuna

09:48.090 --> 09:49.810
ulaşırız.

09:49.810 --> 09:54.280
Bu yüzden burada konum getirilemedi hatası vereceğiz.

09:54.280 --> 09:57.080
Ve sonra burada hata işleyicide bir şey yapmak için,

09:57.080 --> 09:59.150
en azından hata mesajının çıktısını

09:59.150 --> 10:01.230
aldığımız bir uyarı atabiliriz.

10:01.230 --> 10:04.660
Bu elbette sadece çok temel bir hata işleme yöntemidir.

10:04.660 --> 10:06.950
Aksi takdirde, başarılı bir yanıt alırsak, koordinatlarımızı

10:06.950 --> 10:09.910
buradan alırız ve şimdi bu koordinatları bir harita üzerinde çıktı

10:09.910 --> 10:12.113
almak için kullanabiliriz.
