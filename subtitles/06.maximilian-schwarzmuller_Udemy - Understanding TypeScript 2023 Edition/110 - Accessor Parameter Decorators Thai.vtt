WEBVTT

00:02.210 --> 00:03.450
ผู้สอนชาย: นอกจากคุณสมบัติแล้ว

00:03.450 --> 00:06.170
คุณยังสามารถเพิ่มตัวตกแต่งไปยังตัวเข้าถึงได้

00:06.170 --> 00:11.660
และที่นั่น ฉันจะสร้างฟังก์ชันตัวตกแต่งใหม่ เพราะตอนนี้จะได้รับอาร์กิวเมนต์ฟรี

00:11.660 --> 00:18.330
Log2 มันยังได้รับเป้าหมายซึ่งเป็นต้นแบบอีกครั้ง หากเรากำลังจัดการกับตัวเข้าถึงอินสแตนซ์

00:18.330 --> 00:23.360
หรือหากเรากำลังจัดการกับตัวแบบคงที่ มันจะเป็นฟังก์ชันคอนสตรัคเตอร์

00:23.360 --> 00:24.960
ดังนั้นเราจึงไม่รู้ว่าเราจะ

00:24.960 --> 00:27.290
เป็นประเภทใดก็ได้

00:27.290 --> 00:32.290
จากนั้นเราจะมีชื่อสมาชิกที่เรากำลังติดต่อด้วย

00:32.410 --> 00:35.030
จึงชื่อว่าผู้เข้าถึงในที่สุด.

00:35.030 --> 00:42.030
และเรายังมีคำอธิบายคุณสมบัติที่นี่ ซึ่งจะเป็นตัวอธิบายคุณสมบัติประเภท

00:42.030 --> 00:44.600
นั่นคือประเภทที่สร้างขึ้นใน TypeScript

00:44.600 --> 00:49.600
ดังนั้นในนั้น ลองเข้าสู่ระบบ accessor decorator แล้วฉันจะคอนโซลบันทึกเป้าหมายที่นี่

00:50.030 --> 01:01.470
จากนั้นอาจขึ้นบรรทัดใหม่เพื่อให้อ่านได้ง่ายขึ้นในเอาต์พุต ชื่อและตัวอธิบายด้วย

01:01.720 --> 01:07.350
ทีนี้มาเพิ่ม log2 ให้กับ setter ตรงนี้ มาดูกันว่าเราจะได้อะไร

01:07.350 --> 01:10.733
หากเราบันทึกคุณจะเห็นว่าคุณได้รับ accessor

01:10.733 --> 01:14.090
decorator ซึ่งดำเนินการที่นี่

01:14.090 --> 01:19.090
เราได้ต้นแบบของเราอีกครั้ง เช่นเดียวกับบัฟสำหรับคุณสมบัติ

01:19.320 --> 01:23.570
จากนั้นเราได้ชื่อผู้เข้าถึงราคาในกรณีนี้

01:23.570 --> 01:27.890
ไม่ขีดเส้นราคา จึงไม่ใช่ทรัพย์สินที่ซื้อขายเป็นการภายใน

01:27.890 --> 01:30.570
แทนที่จะเป็นชื่อของตัวเข้าถึงเอง

01:30.570 --> 01:33.630
และเราได้ตัวอธิบายคุณสมบัติที่นี่ ซึ่งเราจะเห็นว่ามีการกำหนดฟังก์ชัน

01:33.630 --> 01:37.600
setter เช่น ฟังก์ชัน getter ไม่ใช่ เพราะสำหรับราคา ฉันมีเพียง

01:37.600 --> 01:41.990
setter เท่านั้น ไม่มี getter

01:41.990 --> 01:45.680
และเราเห็นว่าไม่สามารถนับได้ แต่สามารถกำหนดค่าได้

01:45.680 --> 01:47.810
เพื่อให้เราสามารถเปลี่ยนคำนิยามนี้ได้ที่นี่

01:47.810 --> 01:51.000
เช่น เราสามารถลบได้ เป็นต้น

01:51.000 --> 01:54.520
ทั้งหมดนี้มีอยู่และนี่คือวิธีที่เราสามารถเพิ่มมัณฑนากรให้กับ

01:54.520 --> 01:58.920
accessor และสิ่งที่เราสามารถเข้าถึงได้ภายในมัณฑนากรนี้

01:58.920 --> 02:04.350
นอกจากคุณสมบัติและตัวเข้าถึงแล้ว เรายังมีเมธอดและสามารถเพิ่มตัวตกแต่งให้กับเมธอดได้อีกด้วย

02:04.350 --> 02:11.970
ที่นี่ฉันจะเพิ่ม Log3 และเพิ่มวิธีการของฉันลงไปที่นั่นเพื่อรับราคาพร้อมข้อความ

02:11.970 --> 02:17.323
และตอนนี้คำถามที่แน่นอนคือผู้ตกแต่งวิธีการดังกล่าวได้รับข้อโต้แย้งใดบ้าง

02:18.180 --> 02:22.230
ตัวตกแต่งเมธอดยังได้รับอาร์กิวเมนต์ฟรี เป้าหมายอีกครั้ง

02:22.230 --> 02:28.420
ซึ่งถ้าเป็นเมธอดอินสแตนซ์ จะเป็นต้นแบบของอ็อบเจกต์

02:28.420 --> 02:31.150
หากเป็นเมธอดสแตติก คอนสตรัคเตอร์จะทำหน้าที่เหมือนเดิม

02:31.150 --> 02:39.380
จากนั้นจึงตั้งชื่อเมธอดที่นี่ ดังนั้น สตริงหรือสัญลักษณ์

02:39.380 --> 02:44.380
และตัวอธิบายในตอนท้าย ตัวอธิบายคุณสมบัติ

02:44.490 --> 02:46.140
นี่คืออาร์กิวเมนต์ฟรีที่เราได้รับจากที่นี่

02:46.140 --> 02:48.110
และคุณจะเห็นว่าอาร์กิวเมนต์เหล่านี้เป็นอาร์กิวเมนต์เดียวกับใน

02:48.110 --> 02:49.410
accessor ของเรา

02:49.410 --> 02:51.630
แน่นอน เราสามารถใช้มันซ้ำได้

02:51.630 --> 02:54.340
แต่ฉันจะสร้างอันใหม่เพื่อที่ฉันจะได้พิมพ์

02:54.340 --> 02:57.483
method decorator

02:59.020 --> 03:00.840
ทีนี้ถ้าฉันบันทึกสิ่งนี้ สิ่งนี้จะทำงาน

03:01.980 --> 03:04.410
และคุณเห็นที่นี่ว่าตัวตกแต่งเมธอดของเราดำเนินการ

03:04.410 --> 03:09.380
และจากนั้นเราก็ได้ต้นแบบของเรา วัตถุเดิมเหมือนเมื่อก่อน

03:09.380 --> 03:11.310
เราได้ชื่อเมธอดที่นี่

03:11.310 --> 03:14.700
และเราได้คำอธิบายเมธอดนี้ที่นี่

03:14.700 --> 03:17.440
ดังนั้น ลักษณะการทำงานเหมือนกับก่อนหน้านี้ โดยพื้นฐานแล้ว

03:17.440 --> 03:22.550
แค่ตัวอธิบายจะแตกต่างกันเล็กน้อยเนื่องจากเป็นตัวอธิบายเมธอด ไม่ใช่ตัวอธิบายการเข้าถึง

03:22.550 --> 03:25.720
เราได้ค่าและคุณสมบัติที่เขียนได้ตรงนี้

03:25.720 --> 03:28.860
ก่อนหน้านี้ใน access descriptor เราได้รับและตั้งค่าแล้ว

03:28.860 --> 03:30.910
แต่นั่นเป็นเพียงความแตกต่างของจาวาสคริปต์

03:30.910 --> 03:33.088
ไม่มี TypeScript เฉพาะเจาะจง

03:33.088 --> 03:40.070
ตรงนี้เรามีฟังก์ชันมัณฑนากรที่สาม ซึ่งตอนนี้เราได้เพิ่มเข้าไปในเมธอดแล้ว

03:40.070 --> 03:43.390
มัณฑนากรสุดท้ายที่เราสามารถเพิ่มได้คือพารามิเตอร์

03:43.390 --> 03:45.260
มาทำกันตอนนี้

03:45.260 --> 03:47.550
เพื่อสิ่งนั้น ฉันจะสร้างอีกหนึ่งฟังก์ชันที่นี่

03:47.550 --> 03:51.269
Log4 และฉันต้องการเพิ่ม Log4 ให้กับพารามิเตอร์ที่ฉันได้รับจากที่นี่

03:51.269 --> 03:57.130
ภาษี และคุณสามารถเพิ่มหนึ่งฟังก์ชันให้กับทุกพารามิเตอร์ที่คุณได้รับ

03:57.130 --> 04:02.990
คุณไม่จำเป็นต้องทำ แต่คุณสามารถเพิ่มพารามิเตอร์ได้อย่างอิสระที่คุณต้องการเพิ่มมัณฑนากร

04:02.990 --> 04:06.419
ตอนนี้มัณฑนากรพารามิเตอร์ได้รับอะไรเป็นอาร์กิวเมนต์?

04:06.419 --> 04:10.790
ยังไงก็เข้าเป้าเหมือนเดิมครับ

04:10.790 --> 04:12.520
อาร์กิวเมนต์ถัดไปที่เราได้รับคือชื่อ

04:12.520 --> 04:17.310
ไม่ใช่ชื่อของพารามิเตอร์ แต่เป็นชื่อของเมธอดที่เราใช้พารามิเตอร์นี้

04:17.310 --> 04:20.530
โดยพื้นฐานแล้ว เช่นเดียวกับในวิธีการตกแต่งป่านนี้

04:20.530 --> 04:22.170
แต่อาร์กิวเมนต์สุดท้ายแตกต่างกัน

04:22.170 --> 04:24.250
นี่ไม่ใช่ตัวอธิบายคุณสมบัติ

04:24.250 --> 04:30.100
แต่นี่คือตำแหน่งของอาร์กิวเมนต์แทน ดังนั้นจำนวนของอาร์กิวเมนต์

04:30.100 --> 04:32.763
ตัวอย่างเช่น นี่จะเป็นอาร์กิวเมนต์แรก

04:35.310 --> 04:38.670
อีกครั้ง ลองคัดลอกที่นี่และใส่ทั้งหมดนั้นลงในตัวตกแต่งพารามิเตอร์

04:38.670 --> 04:43.550
Log4

04:43.550 --> 04:47.170
และลองวางตำแหน่งผลลัพธ์ที่นี่ด้วย เพื่อเราจะได้เห็นว่ามีอะไรอยู่ในนั้น

04:47.170 --> 04:53.480
หากเราบันทึกตอนนี้ เราจะเห็นตัวตกแต่งพารามิเตอร์ของเราอยู่ตรงนั้น ไม่ใช่เอาต์พุตสุดท้ายเนื่องจากลำดับการดำเนินการแตกต่างกัน

04:53.480 --> 04:57.180
แต่เราจะมองเห็นตัวตกแต่งพารามิเตอร์ของเราที่นี่แล้วที่นี่

04:57.180 --> 04:59.530
เราได้ต้นแบบเหมือนเดิม

04:59.530 --> 05:02.190
เราได้ชื่อเมธอดที่เราใช้พารามิเตอร์นี้

05:02.190 --> 05:04.770
แล้วก็ดัชนีของอาร์กิวเมนต์นั้น ซึ่งเริ่มต้นที่ศูนย์

05:04.770 --> 05:12.740
ดังนั้นอาร์กิวเมนต์แรกจึงมีจำนวนศูนย์ตรงนี้ ดัชนีเป็นศูนย์ และนั่นคือตัวตกแต่งพารามิเตอร์ของเรา

05:12.740 --> 05:14.920
นี่คือที่ทั้งหมดที่เราสามารถเพิ่มมัณฑนากรและ

05:14.920 --> 05:16.370
TypeScript และเราสามารถทำสิ่งต่างๆ

05:16.370 --> 05:18.570
กับพวกเขาได้

05:18.570 --> 05:21.660
ตอนนี้ฉันจะแสดงให้คุณเห็นตัวอย่างสองสามตัวอย่างในโมดูลนี้

05:21.660 --> 05:28.380
และฉันจะแสดงให้คุณเห็นไลบรารี่หรือเฟรมเวิร์กที่ใช้งานโปรแกรมตกแต่งอย่างหนัก

05:28.380 --> 05:30.550
และฉันจะแสดงให้คุณเห็นว่าพวกเขาทำอะไรกับนักตกแต่ง

05:30.550 --> 05:34.583
เพื่อให้คุณเข้าใจถึงพลังที่นักตกแต่งสามารถมีได้
