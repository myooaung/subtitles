WEBVTT

00:02.090 --> 00:05.740
Narrateur : Et c'est tout pour les interfaces et les classes.

00:05.740 --> 00:08.190
Dans ce module, nous avons examiné en détail les classes

00:08.190 --> 00:09.630
et ce que nous pouvons y faire.

00:09.630 --> 00:11.390
Les classes et TypeScript, en

00:11.390 --> 00:14.130
fin de compte, ne font que s'appuyer sur les classes

00:14.130 --> 00:17.180
pour JavaScript, et je les ai déjà résumées un peu plus

00:17.180 --> 00:18.720
tôt dans ce module.

00:18.720 --> 00:20.710
Les interfaces sont une chose différente.

00:20.710 --> 00:22.600
Ils n'existent que dans TypeScript.

00:22.600 --> 00:24.670
Il s'agit d'une fonctionnalité purement

00:24.670 --> 00:27.390
TypeScript, qui vous aide à écrire un code clair, clairement

00:27.390 --> 00:29.450
structuré et très explicite.

00:29.450 --> 00:33.010
Ils peuvent vous aider à forcer les classes à avoir certaines caractéristiques

00:33.010 --> 00:36.810
ou les objets en général à avoir une certaine structure.

00:36.810 --> 00:39.860
Ils peuvent être utilisés comme un type de fonction, comme vous l'avez appris.

00:39.860 --> 00:42.490
Ils autorisent les propriétés facultatives et donc toutes

00:42.490 --> 00:45.200
les méthodes facultatives, d'ailleurs, si vous ajoutez

00:45.200 --> 00:48.290
un point d'interrogation après le nom de la méthode.

00:48.290 --> 00:50.190
C'est donc quelque chose que vous pouvez utiliser.

00:50.190 --> 00:53.210
Et, comme vous venez de le voir, lorsqu'elles sont compilées

00:53.210 --> 00:55.870
après avoir rempli leur rôle de permettre à TypeScript

00:55.870 --> 00:57.680
de vérifier votre code, rien n'est

00:57.680 --> 01:00.410
omis pour ces interfaces.

01:00.410 --> 01:02.300
Le code est simplement jeté.

01:02.300 --> 01:05.080
Les interfaces constituent néanmoins une fonctionnalité

01:05.080 --> 01:07.420
puissante qui permet de forcer vos classes

01:07.420 --> 01:09.140
ou vos objets à avoir une certaine

01:09.140 --> 01:12.400
structure et de décrire clairement votre idée de l'apparence

01:12.400 --> 01:14.810
d'un objet.

01:14.810 --> 01:18.650
Maintenant, comme vous l'avez appris, vous pouvez surtout les remplacer par

01:18.650 --> 01:21.120
des types personnalisés si vous le souhaitez.

01:21.120 --> 01:23.580
Vous pouvez également implémenter des types personnalisés,

01:23.580 --> 01:27.700
mais il est simplement plus courant d'utiliser une interface pour cela, d'utiliser

01:27.700 --> 01:30.360
une interface si vous voulez décrire un objet que si vous

01:30.360 --> 01:32.180
voulez l'implémenter.

01:32.180 --> 01:33.980
Tout cela pour des raisons historiques,

01:33.980 --> 01:36.490
car aux premiers jours de TypeScript, les types personnalisés

01:36.490 --> 01:38.980
ne pouvaient pas être mis en œuvre ou utilisés comme

01:38.980 --> 01:40.710
des interfaces.

01:40.710 --> 01:42.610
La flexibilité est désormais plus grande, mais

01:42.610 --> 01:45.150
il est toujours recommandé d'opter pour les interfaces si vous

01:45.150 --> 01:46.420
travaillez avec des objets et

01:46.420 --> 01:48.680
si vous souhaitez décrire leur structure.

01:48.680 --> 01:50.620
Nous les verrons également tout au long de ce

01:50.620 --> 01:51.883
cours, encore et encore.
