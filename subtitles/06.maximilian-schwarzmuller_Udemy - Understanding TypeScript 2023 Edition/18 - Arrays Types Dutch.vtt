WEBVTT

00:02.170 --> 00:06.250
-: Nu hebben we naast objecten ook arrays in JavaScript, zeer

00:06.250 --> 00:08.300
belangrijk type gegevens.

00:08.300 --> 00:10.810
Arrays worden zo gemaakt in JavaScript, zoals je weet,

00:10.810 --> 00:12.560
en je kunt er alle gegevens in opslaan:

00:12.560 --> 00:15.970
getallen, strings, booleans, objecten, andere arrays, je kunt immers

00:15.970 --> 00:17.970
geneste arrays hebben, en je kunt ook gegevens

00:17.970 --> 00:19.380
mengen.

00:19.380 --> 00:23.200
Je kunt een array hebben met strings en getallen door elkaar.

00:23.200 --> 00:25.570
En TypeScript ondersteunt ook arrays.

00:25.570 --> 00:29.260
Elke JavaScript-array wordt ondersteund en de types van

00:29.260 --> 00:32.140
die array kunnen flexibel of strikt zijn.

00:32.140 --> 00:35.200
Laten we daar nu eens naar kijken in TypeScript.

00:35.200 --> 00:38.760
Voor dat hier in app. ts, laten we zeggen dat onze persoon

00:38.760 --> 00:42.810
ook een hobby's sleutel heeft, maar we zouden natuurlijk ook een variabele of een

00:42.810 --> 00:45.660
constante hobby's buiten het object kunnen hebben.

00:45.660 --> 00:49.050
Het gebruik van arrays is dus precies hetzelfde binnen

00:49.050 --> 00:50.853
en buiten objecten.

00:51.950 --> 00:54.780
Dus hier hebben we hobby's, en hobby's kunnen

00:54.780 --> 00:58.140
sport zijn, en koken, laten we zeggen.

00:58.140 --> 01:01.150
Dus ik heb er twee elementen in, en deze elementen,

01:01.150 --> 01:03.620
zoals je kunt zien, zijn strings.

01:03.620 --> 01:07.570
Als we nu met de muis over hobby's gaan, heeft TypeScript de afstand

01:07.570 --> 01:10.630
van het type string array correct gedetecteerd.

01:10.630 --> 01:12.500
Nu is dat een syntaxis die je nog niet eerder

01:12.500 --> 01:16.140
hebt gezien, maar dit is hoe TypeScript een array van gegevens beschrijft.

01:16.140 --> 01:18.510
Je hebt de vierkante haakjes, en daarvoor

01:18.510 --> 01:21.340
het type gegevens dat daarin is opgeslagen.

01:21.340 --> 01:23.530
Dit is het type, de groep van het type is afgeleid.

01:23.530 --> 01:25.810
Het zag dat we hier een array hebben en dat

01:25.810 --> 01:29.110
er alleen strings in staan, dus het leidde af dat hobby's waarschijnlijk

01:29.110 --> 01:31.940
een array van strings moet zijn.

01:31.940 --> 01:34.903
En inderdaad, voor hobby's is dat heel logisch.

01:36.210 --> 01:41.040
U kunt natuurlijk ook expliciet het type variabele instellen.

01:41.040 --> 01:44.720
Als we een nieuwe variabele zouden toevoegen, favoriete activiteiten,

01:45.580 --> 01:48.670
en die zou aanvankelijk leeg moeten zijn, dan willen we misschien

01:48.670 --> 01:51.160
expliciet het type gegevens instellen dat daarin

01:51.160 --> 01:53.140
wordt opgeslagen.

01:53.140 --> 01:55.590
Laten we zeggen dat het een array van strings moet

01:55.590 --> 01:57.570
zijn, dan kunnen we gewoon herhalen wat

01:57.570 --> 02:00.330
we net zagen; type string, en dan vierkante haakjes daarachter,

02:00.330 --> 02:03.330
en dit vertelt TypeScript dat wat we hier opslaan niet een enkele

02:03.330 --> 02:05.990
string is, maar een array van strings.

02:05.990 --> 02:09.550
En inderdaad, als ik daar alleen sport probeer op te slaan, krijg

02:09.550 --> 02:12.183
ik een foutmelding. Ik krijg een foutmelding

02:12.183 --> 02:15.650
omdat dit een enkele string is, en geen array van strings.

02:15.650 --> 02:19.370
Ik krijg natuurlijk geen foutmelding als ik dit in vierkante

02:19.370 --> 02:22.610
haken wikkel en dus effectief een array maak.

02:22.610 --> 02:25.870
Ik krijg echter weer een foutmelding als ik een getal toevoeg, laten

02:25.870 --> 02:29.220
we zeggen, omdat we dit definiëren als een array van strings.

02:29.220 --> 02:31.290
Hier hebben we een gemengde reeks.

02:31.290 --> 02:34.920
Het is een array van strings en getallen, dus dat werkt niet

02:34.920 --> 02:37.180
en wordt hier niet ondersteund.

02:37.180 --> 02:40.100
Als we een dergelijke gemengde reeks zouden willen ondersteunen,

02:40.100 --> 02:43.120
zou een oplossing zijn om hier "any" te gebruiken.

02:43.120 --> 02:45.880
Het "any" type is een speciaal type in TypeScript,

02:45.880 --> 02:47.610
dat we later nader zullen bekijken,

02:47.610 --> 02:50.530
dat in feite betekent: doe wat je wilt.

02:50.530 --> 02:53.020
Het is natuurlijk een type dat je niet te vaak wilt gebruiken

02:53.020 --> 02:55.630
omdat je dan de voordelen verliest die TypeScript je geeft,

02:55.630 --> 02:58.170
je bent terug in de wereld van JavaScript, waar je ook elke

02:58.170 --> 03:00.140
waarde overal kunt gebruiken.

03:00.140 --> 03:02.940
Dus "any" is echt flexibel, maar de flexibiliteit

03:02.940 --> 03:06.270
gaat ten koste van het opgeven van alle voordelen

03:06.270 --> 03:08.710
die TypeScript biedt.

03:08.710 --> 03:10.840
Dus hier ga ik terug naar string, want ik wil er

03:10.840 --> 03:12.530
echt geen nummer in hebben, en dus kunnen

03:12.530 --> 03:14.933
we het nummer verwijderen en zijn we goed.

03:15.900 --> 03:18.830
Arrays geven ons ook een mooi voorbeeld, eigenlijk

03:18.830 --> 03:21.890
net als objecten en hun eigenschappen, hoe dynamisch

03:21.890 --> 03:25.730
TypeScript's type-inferentie is.

03:25.730 --> 03:28.750
Als we hier onderaan een "for"-lus toevoegen, en we willen

03:28.750 --> 03:31.570
alle hobby's van de persoon bekijken, kunnen we natuurlijk

03:31.570 --> 03:33.220
een traditionele "for"-lus gebruiken

03:33.220 --> 03:38.220
met voor elke hobby van de persoon. hobby's, dus het openen van de hobby's

03:38.620 --> 03:41.130
eigenschap en het doorlopen van alle hobby's

03:41.130 --> 03:42.793
daar, het opslaan van elke

03:43.690 --> 03:46.780
hobby voor elke iteratie in deze constante, en dan

03:46.780 --> 03:50.090
kunnen we log hobby hier raadplegen.

03:50.090 --> 03:52.000
Nu is dat niet al te fancy, dat is iets dat

03:52.000 --> 03:53.710
we kennen van JavaScript, toch.

03:53.710 --> 03:58.280
Als ik nu deze app compileer. ts bestand daar beneden, halen

03:58.280 --> 04:01.700
we de naam uit deze regel, en daarna de twee

04:01.700 --> 04:04.750
hobby's die worden afgedrukt.

04:04.750 --> 04:07.800
Maar wat hier eigenlijk interessant is, is dat we op hobby

04:07.800 --> 04:11.040
alles kunnen benaderen, we kunnen op elke string.

04:11.040 --> 04:14.210
Bijvoorbeeld naar UpperCase, ik krijg deze auto completion

04:14.210 --> 04:16.230
en TypeScript klaagt niet.

04:16.230 --> 04:18.070
Waarom klaagt hij niet?

04:18.070 --> 04:21.930
Omdat het weet dat hobby's van het type string array

04:21.930 --> 04:25.830
is, dus als ik persoon. hobby's, detecteert TypeScript

04:25.830 --> 04:29.700
dat hobby's een array van strings zal zijn.

04:29.700 --> 04:33.450
Dus hobby, aan de bovenkant, wordt correct geïdentificeerd als zijnde

04:33.450 --> 04:36.000
een string, want aangezien we een array van strings

04:36.000 --> 04:38.370
doorlopen, moeten de individuele waarden

04:38.370 --> 04:40.510
wel gewoon strings zijn.

04:40.510 --> 04:43.450
En daarom bieden types ons daar beneden geweldige ondersteuning,

04:43.450 --> 04:46.490
en kunnen we met hobby alles doen wat met een string kan worden

04:46.490 --> 04:50.050
gedaan, omdat het met zekerheid weet dat hobby een string zal zijn

04:50.050 --> 04:53.810
vanwege de types die we daar hebben opgezet.

04:53.810 --> 04:56.300
En dat is echt flexibel, en natuurlijk een geweldige

04:56.300 --> 04:59.030
functie die het schrijven van code een stuk eenvoudiger

04:59.030 --> 05:01.360
en veel flexibeler en veiliger maakt.

05:01.360 --> 05:04.440
Bijvoorbeeld, we zouden hier een fout krijgen als het zou proberen

05:04.440 --> 05:08.570
toegang te krijgen tot hobby. kaart, als ik dacht dat dit een array zou zijn.

05:08.570 --> 05:12.060
De map-methode is beschikbaar op arrays, maar niet op strings.

05:12.060 --> 05:14.540
En hier, juist, weer een foutmelding dat map

05:14.540 --> 05:17.810
niet bestaat op type string, want dat bestaat niet.

05:17.810 --> 05:21.290
Hier krijgen we dus een fout, en dat is goed dat we die krijgen,

05:21.290 --> 05:24.510
want dit zou fout zijn, en hier zien we TypeScript's

05:24.510 --> 05:27.343
inferentie echt, echt schitteren.
