WEBVTT

00:02.170 --> 00:06.250
-: Şimdi nesnelerin yanı sıra JavaScript'te dizilerimiz de

00:06.250 --> 00:08.300
var, çok önemli bir veri türü.

00:08.300 --> 00:10.810
Bildiğiniz gibi JavaScript'te diziler bu şekilde oluşturulur

00:10.810 --> 00:12.560
ve burada herhangi bir veriyi saklayabilirsiniz:

00:12.560 --> 00:15.970
sayılar, dizeler, booleanlar, nesneler, diğer diziler, sonuçta iç içe dizileriniz

00:15.970 --> 00:19.380
olabilir ve ayrıca verileri karıştırabilirsiniz.

00:19.380 --> 00:23.200
Dizeleri ve sayıları karışık olarak içeren bir diziye sahip olabilirsiniz.

00:23.200 --> 00:25.570
Ayrıca TypeScript dizileri de destekler.

00:25.570 --> 00:29.260
Herhangi bir JavaScript dizisi desteklenir ve bu dizinin

00:29.260 --> 00:32.140
türleri esnek veya katı olabilir.

00:32.140 --> 00:35.200
Şimdi buna TypeScript'te bir göz atalım.

00:35.200 --> 00:38.760
Bunun için burada uygulamada. ts, diyelim ki kişimizin bir de

00:38.760 --> 00:42.810
hobiler anahtarı var, ama elbette nesnenin dışında bir değişkenimiz

00:42.810 --> 00:45.660
veya sabit bir hobilerimiz de olabilir.

00:45.660 --> 00:49.050
Dolayısıyla, dizileri nesnelerin içinde ve dışında kullanmak

00:49.050 --> 00:50.853
tamamen aynıdır.

00:51.950 --> 00:54.780
Yani burada hobilerimiz var ve hobiler

00:54.780 --> 00:58.140
spor ve yemek pişirme olabilir diyelim.

00:58.140 --> 01:01.150
Yani burada iki öğe var ve bu öğeler, anlayabileceğiniz

01:01.150 --> 01:03.620
gibi, dizeler.

01:03.620 --> 01:07.570
Şimdi hobilerin üzerine gelirsek, TypeScript dize dizisi türünün

01:07.570 --> 01:10.630
mesafesini doğru bir şekilde algıladı.

01:10.630 --> 01:12.500
Bu daha önce görmediğiniz bir sözdizimidir,

01:12.500 --> 01:16.140
ancak TypeScript bir veri dizisini bu şekilde tanımlar.

01:16.140 --> 01:18.510
Köşeli parantezleriniz var ve bunun

01:18.510 --> 01:21.340
önünde, orada depolanan veri türü var.

01:21.340 --> 01:23.530
Şimdi bu tür, türün grup çıkarımıdır.

01:23.530 --> 01:25.810
Burada bir dizimiz olduğunu ve içinde sadece stringler

01:25.810 --> 01:29.110
olduğunu gördü, bu yüzden hobilerin muhtemelen stringlerden oluşan

01:29.110 --> 01:31.940
bir dizi olması gerektiği sonucunu çıkardı.

01:31.940 --> 01:34.903
Ve gerçekten de hobiler için bu çok mantıklı.

01:36.210 --> 01:41.040
Elbette, değişken türünü açıkça da ayarlayabilirsiniz.

01:41.040 --> 01:44.720
Yeni bir değişken eklersek, favori aktiviteler ve başlangıçta

01:45.580 --> 01:48.670
boş olması gerekir, daha sonra burada depolanan

01:48.670 --> 01:53.140
veri türünü açıkça ayarlamak isteyebiliriz.

01:53.140 --> 01:55.590
Şimdi diyelim ki bunun bir dizeler dizisi olması gerekiyor,

01:55.590 --> 01:57.570
o zaman az önce gördüğümüz şeyi tekrarlayabiliriz;

01:57.570 --> 02:00.330
string yazın ve ardından köşeli parantez ekleyin ve bu, TypeScript'e

02:00.330 --> 02:03.330
burada depoladığımız şeyin yalnızca tek bir dize değil, bir dizeler

02:03.330 --> 02:05.990
dizisi olduğunu söyler.

02:05.990 --> 02:09.550
Ve gerçekten de orada sadece sporu depolamaya çalıştığımda

02:09.550 --> 02:12.183
bir hata alıyorum. Hata alıyorum çünkü buradaki

02:12.183 --> 02:15.650
tek bir dize, dizelerden oluşan bir dizi değil.

02:15.650 --> 02:19.370
Elbette bunu köşeli parantez içine alırsam ve böylece etkin

02:19.370 --> 02:22.610
bir şekilde bir dizi oluşturursam hata almam.

02:22.610 --> 02:25.870
Yine de, diyelim ki bir sayı eklersem bir hata alıyorum,

02:25.870 --> 02:29.220
çünkü bunu bir string dizisi olarak tanımlıyoruz.

02:29.220 --> 02:31.290
Şimdi burada, karışık bir dizimiz var.

02:31.290 --> 02:34.920
Dizeler ve sayılardan oluşan bir dizidir, bu nedenle çalışmaz

02:34.920 --> 02:37.180
ve burada desteklenmez.

02:37.180 --> 02:40.100
Eğer böyle karışık bir diziyi desteklemek istersek,

02:40.100 --> 02:43.120
çözümlerden biri burada "any" kullanmak olacaktır.

02:43.120 --> 02:45.880
"any" türü, TypeScript'te daha sonra daha yakından

02:45.880 --> 02:47.610
bakacağımız özel bir türdür ve

02:47.610 --> 02:50.530
temelde ne isterseniz yapın anlamına gelir.

02:50.530 --> 02:53.020
Elbette çok sık kullanmak istemeyeceğiniz bir türdür çünkü

02:53.020 --> 02:55.630
TypeScript'in size sağladığı avantajları kaybedersiniz,

02:55.630 --> 02:58.170
herhangi bir değeri herhangi bir yerde kullanabileceğiniz

02:58.170 --> 03:00.140
JavaScript dünyasına geri dönersiniz.

03:00.140 --> 03:02.940
Yani "any" gerçekten esnektir, ancak bu

03:02.940 --> 03:06.270
esnekliğin bedeli TypeScript'in sunduğu tüm

03:06.270 --> 03:08.710
avantajlardan vazgeçmektir.

03:08.710 --> 03:10.840
Burada string'e geri döneceğim, çünkü orada gerçekten

03:10.840 --> 03:12.530
bir sayı olmasını istemiyorum ve bu nedenle

03:12.530 --> 03:14.933
sayıyı kaldırabiliriz ve sorun yok.

03:15.900 --> 03:18.830
Diziler aynı zamanda bize TypeScript'in tür

03:18.830 --> 03:21.890
çıkarımının ne kadar dinamik olduğuna dair tıpkı

03:21.890 --> 03:25.730
nesneler ve özellikleri gibi harika bir örnek sunar.

03:25.730 --> 03:28.750
Eğer en alta bir "for" döngüsü eklersek ve kişinin tüm

03:28.750 --> 03:31.570
hobilerine bakmak istersek, elbette kişinin const

03:31.570 --> 03:33.220
hobisi için geleneksel bir

03:33.220 --> 03:38.220
"for" döngüsü kullanabiliriz. hobiler, yani hobiler özelliğine erişmek

03:38.620 --> 03:41.130
ve oradaki tüm hobileri gözden geçirmek,

03:41.130 --> 03:42.793
her yineleme için her hobiyi

03:43.690 --> 03:46.780
bu sabitte depolamak ve sonra burada günlük

03:46.780 --> 03:50.090
hobisine başvurabiliriz.

03:50.090 --> 03:52.000
Şimdi bu çok süslü değil, JavaScript'ten

03:52.000 --> 03:53.710
bildiğimiz bir şey, doğru.

03:53.710 --> 03:58.280
Eğer şimdi bu uygulamayı derlersem. ts dosyası aşağıda, bu

03:58.280 --> 04:01.700
satırdan ismi alıyoruz ve ardından

04:01.700 --> 04:04.750
iki hobi yazdırılıyor.

04:04.750 --> 04:07.800
Ancak burada asıl ilginç olan, hobide her şeye erişebilmemiz,

04:07.800 --> 04:11.040
herhangi bir dizeye erişebilmemizdir.

04:11.040 --> 04:14.210
Örneğin, UpperCase için bu otomatik tamamlamayı alıyorum

04:14.210 --> 04:16.230
ve TypeScript şikayet etmiyor.

04:16.230 --> 04:18.070
Neden şikayet etmiyor?

04:18.070 --> 04:21.930
Çünkü hobilerin string array türünde olduğunu biliyor, bu yüzden

04:21.930 --> 04:25.830
person'a eriştiğimde. hobbies, TypeScript'in çıkarımı

04:25.830 --> 04:29.700
hobbies öğesinin bir dize dizisi olacağını algılar.

04:29.700 --> 04:33.450
Diğer taraftan hobi, doğru bir şekilde dize olarak tanımlanır,

04:33.450 --> 04:36.000
çünkü dizelerden oluşan bir diziden geçtiğimiz

04:36.000 --> 04:38.370
için, tek tek değerlerin sadece dize

04:38.370 --> 04:40.510
olması gerekir.

04:40.510 --> 04:43.450
Bu nedenle types bize orada büyük bir destek sunuyor

04:43.450 --> 04:46.490
ve hobby ile bir string ile yapılabilecek her şeyi yapmamıza

04:46.490 --> 04:50.050
izin veriyor, çünkü orada kurduğumuz types sayesinde hobby'nin

04:50.050 --> 04:53.810
bir string olacağını kesin olarak biliyor.

04:53.810 --> 04:56.300
Ve bu gerçekten esnektir ve elbette kod yazmayı

04:56.300 --> 04:59.030
çok daha kolay ve çok daha esnek ve güvenli hale

04:59.030 --> 05:01.360
getiren harika bir özelliktir.

05:01.360 --> 05:04.440
Örneğin, hobiye erişmeye çalışırsa

05:04.440 --> 05:08.570
burada bir hata alırız. harita, bunun bir dizi olacağını düşünseydim.

05:08.570 --> 05:12.060
map yöntemi diziler üzerinde kullanılabilir, ancak dizeler üzerinde kullanılamaz.

05:12.060 --> 05:14.540
Ve burada, doğru bir şekilde, yine, string türünde

05:14.540 --> 05:17.810
map'in mevcut olmadığına dair bir hata çünkü mevcut değil.

05:17.810 --> 05:21.290
Burada bir hata alıyoruz ve bunu almamız iyi oldu, çünkü

05:21.290 --> 05:24.510
bu yanlış olurdu ve burada TypeScript'in çıkarımının

05:24.510 --> 05:27.343
gerçekten parladığını görüyoruz.
