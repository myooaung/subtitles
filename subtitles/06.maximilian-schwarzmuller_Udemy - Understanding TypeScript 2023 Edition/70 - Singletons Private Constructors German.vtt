WEBVTT

00:02.260 --> 00:04.960
-: Nun gibt es noch ein letztes interessantes

00:04.960 --> 00:07.020
Feature, das ich ebenfalls einführen

00:07.020 --> 00:10.330
möchte, und das wären private Konstruktoren.

00:10.330 --> 00:13.823
Und was ist ein privater Konstruktor und welchen Nutzen hat er?

00:14.870 --> 00:17.700
In der objektorientierten Programmierung gibt es ein

00:17.700 --> 00:20.460
Muster, das als Singleton-Muster bezeichnet wird.

00:20.460 --> 00:23.030
Beim Singleton-Muster geht es darum, sicherzustellen,

00:23.030 --> 00:26.440
dass man immer nur genau eine Instanz einer bestimmten Klasse

00:26.440 --> 00:28.030
hat.

00:28.030 --> 00:30.558
Dies kann in Szenarien nützlich sein, in denen Sie keine

00:30.558 --> 00:33.000
statischen Methoden oder Eigenschaften verwenden

00:33.000 --> 00:34.450
können oder wollen, aber gleichzeitig

00:34.450 --> 00:36.440
sicherstellen wollen, dass Sie nicht mehrere

00:36.440 --> 00:40.730
Objekte auf der Grundlage einer Klasse erstellen können, sondern dass Sie immer genau

00:40.730 --> 00:44.630
ein Objekt auf der Grundlage einer Klasse haben.

00:44.630 --> 00:47.660
Nehmen wir an, dass wir für unsere Buchhaltungsabteilung

00:47.660 --> 00:51.460
sicherstellen wollen, dass wir nur genau ein Objekt auf der Grundlage dieser

00:51.460 --> 00:53.320
Klasse erstellen können, weil wir genau

00:53.320 --> 00:56.010
eine Buchhaltungsabteilung in unserem gesamten Unternehmen

00:56.010 --> 00:57.840
haben.

00:57.840 --> 01:00.260
Wir haben vielleicht mehr als eine IT-Abteilung,

01:00.260 --> 01:03.290
aber wir haben genau eine Buchhaltungsabteilung.

01:03.290 --> 01:05.310
Um dies zu erzwingen und zu vermeiden,

01:05.310 --> 01:09.020
dass wir new AccountingDepartment mehrmals manuell aufrufen,

01:09.020 --> 01:12.260
können wir den Konstruktor der Klasse AccountingDepartment

01:12.260 --> 01:14.320
in einen privaten Konstruktor verwandeln,

01:14.320 --> 01:18.860
indem wir ihm das Schlüsselwort private voranstellen.

01:18.860 --> 01:20.560
Damit ist sichergestellt,

01:20.560 --> 01:23.480
dass wir nicht neu anrufen können.

01:23.480 --> 01:25.160
Hier sehen Sie, dass ich einen Fehler

01:25.160 --> 01:27.620
erhalte, weil der Konstruktor privat ist, so

01:27.620 --> 01:30.600
dass er nur von innerhalb der Klasse zugänglich ist, was

01:30.600 --> 01:33.690
seltsam klingt, denn wie kommen wir in die Klasse hinein,

01:33.690 --> 01:37.920
wenn wir keine Objekte mehr erstellen können, die auf ihr basieren.

01:37.920 --> 01:40.490
Die Antwort ist, nun ja, statische Methoden.

01:40.490 --> 01:43.610
Eine statische Methode kann in der Klasse selbst aufgerufen werden,

01:43.610 --> 01:46.250
so dass sie dafür nicht instanziiert werden muss.

01:46.250 --> 01:49.460
Hier können wir also eine statische Methode hinzufügen, die wir

01:49.460 --> 01:51.340
getInstance nennen könnten, der Name

01:51.340 --> 01:53.260
ist jedoch völlig frei wählbar.

01:53.260 --> 01:56.930
Jetzt prüft getInstance, ob es bereits eine Instanz dieser Klasse

01:56.930 --> 02:00.090
gibt, und wenn nicht, gibt es eine neue zurück.

02:00.090 --> 02:04.300
Dazu können wir eine neue statische Eigenschaftsinstanz hinzufügen, eine statische

02:04.300 --> 02:06.350
private Eigenschaft, so dass Sie private

02:06.350 --> 02:09.200
vor die statische genannte Instanz setzen können, die

02:09.200 --> 02:12.040
vom Typ AccountingDepartment sein wird.

02:12.040 --> 02:16.570
Darin speichern wir also eine AccountingDepartment-Instanz.

02:16.570 --> 02:17.580
Ich habe also eine

02:17.580 --> 02:19.100
statische Eigenschaft, auf

02:19.100 --> 02:21.410
die in der Klasse selbst zugegriffen werden

02:21.410 --> 02:23.310
kann, aber nur innerhalb der Klasse,

02:23.310 --> 02:25.960
und der Wert, den wir dort speichern, ist vom Typ

02:25.960 --> 02:30.140
AccountingDepartment, also von der Klasse selbst.

02:30.140 --> 02:33.880
Jetzt können wir diese Instanz-Eigenschaft hier in getInstance

02:33.880 --> 02:38.880
verwenden und prüfen, ob dies. Instanz wird hier innerhalb von static gesetzt.

02:39.260 --> 02:43.570
Wenn wir dies verwenden, verweist es auf die Klasse selbst und wir können

02:43.570 --> 02:47.610
dann auf alle anderen statischen Eigenschaften zugreifen.

02:47.610 --> 02:51.963
Die Alternative dazu wäre die Verwendung des Klassennamens.

02:53.720 --> 03:01.600
Und jetzt, wenn das eingestellt ist, möchte ich das zurückgeben. Instanz, oder wieder Klassenname.

03:01.600 --> 03:01.600
Instanz,

03:01.600 --> 03:04.030
aber dies innerhalb einer statischen Methode funktioniert,

03:04.030 --> 03:05.680
es gibt uns Zugriff auf die Klasse selbst

03:05.680 --> 03:09.370
dann, im Gegensatz zu diesem in einer nicht statischen Methode, die uns Zugriff auf

03:09.370 --> 03:11.590
die Instanz, mit der wir versuchen zu arbeiten, nicht,

03:11.590 --> 03:13.550
was wir hier tun.

03:13.550 --> 03:15.660
Wenn wir es aber hier nicht schaffen,

03:15.660 --> 03:17.290
dann haben wir noch keine Instanz,

03:17.290 --> 03:22.030
dann stelle ich das ein. Instanz, also diese statische Instanzeigenschaft

03:22.030 --> 03:25.660
gleich new AccountingDepartment, können wir von hier aus verwenden,

03:25.660 --> 03:28.630
weil wir jetzt innerhalb dieser Klassenmethode sind,

03:28.630 --> 03:32.030
also können wir hier auf den privaten Konstruktor zugreifen

03:32.030 --> 03:44.830
und unsere ID und unser Berichtsarray übergeben und dann dies zurückgeben.

03:44.830 --> 03:44.830
Beispiel hier.

03:44.830 --> 03:47.010
Jetzt geben wir also entweder die eine Instanz zurück,

03:47.010 --> 03:48.220
die wir bereits haben, oder

03:48.220 --> 03:50.970
wir erstellen eine neue, wenn wir sie noch nicht haben.

03:50.970 --> 03:53.270
Aber dieser Code, der markierte Code hier, kann

03:53.270 --> 03:56.377
nur einmal ausgeführt werden, denn sobald wir eine Instanz haben,

03:56.377 --> 03:57.850
machen wir sie zu diesem if-Block

03:57.850 --> 04:00.370
und geben die vorhandene Instanz zurück.

04:00.370 --> 04:03.700
Wenn Sie nun mit AccountingDepartment arbeiten wollen, könnten

04:03.700 --> 04:05.940
wir es stattdessen const accounting AccountingDepartment

04:05.940 --> 04:10.153
nennen. getInstance, und dies gibt uns eine

04:11.646 --> 04:13.190
neue Instanz von AccountingDepartment

04:13.190 --> 04:14.850
zurück.

04:14.850 --> 04:18.190
Aber wenn ich dies noch einmal tue, erhalte ich die gleiche Instanz,

04:18.190 --> 04:21.103
die Sie sehen, wenn ich die Konsolenprotokolle accounting

04:22.020 --> 04:23.570
und accounting2 hier einfüge.

04:23.570 --> 04:26.550
Sie werden sehen, dass die beiden genau gleich sein sollten,

04:26.550 --> 04:28.253
wenn wir das speichern und neu laden,

04:30.550 --> 04:34.110
sehen Sie unten meine beiden AccountingDepartment-Objekte, sie

04:34.110 --> 04:36.690
haben die gleiche ID, den exakt gleichen Aufbau,

04:36.690 --> 04:39.720
sie sind das gleiche Objekt, die gleiche Instanz, weil wir

04:39.720 --> 04:41.530
nur eine Instanz mit diesem Singleton-Muster

04:41.530 --> 04:44.340
haben, die mit Hilfe des private-Schlüsselworts vor

04:44.340 --> 04:47.900
dem Konstruktor erstellt wird.

04:47.900 --> 04:51.000
Dies ist wohl ein Ansatz, den Sie nicht immer

04:51.000 --> 04:52.490
anwenden werden.

04:52.490 --> 04:55.010
Das Singleton-Pattern kann manchmal nützlich sein,

04:55.010 --> 04:56.530
man braucht es nicht immer, aber

04:56.530 --> 04:58.700
es lohnt sich auf jeden Fall, darüber Bescheid

04:58.700 --> 05:00.360
zu wissen, weil es etwas Interessantes

05:00.360 --> 05:03.290
ist, das man dank privater Konstruktoren leicht mit TypeScript

05:03.290 --> 05:04.923
implementieren kann.
