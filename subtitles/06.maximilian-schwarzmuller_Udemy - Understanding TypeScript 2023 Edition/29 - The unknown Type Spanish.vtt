WEBVTT

00:02.340 --> 00:04.020
Instructor: Ya casi hemos terminado con

00:04.020 --> 00:06.240
los fundamentos de TypeScript y los tipos básicos.

00:06.240 --> 00:10.130
Hay dos tipos más que es bueno tener en cuenta porque

00:10.130 --> 00:13.170
serán importantes de vez en cuando.

00:13.170 --> 00:16.603
El primer tipo es el desconocido.

00:17.860 --> 00:20.350
Para ello, llamaré a este archivo sus funciones. ts y añadir una nueva

00:20.350 --> 00:23.343
aplicación. ts y allí, digamos

00:24.290 --> 00:28.620
que tenemos una nueva variable, userInput,

00:28.620 --> 00:32.143
y esta es de tipo desconocido.

00:32.143 --> 00:34.850
No es de tipo any, que sería el predeterminado, sino

00:34.850 --> 00:36.690
unknown, que es un tipo diferente

00:36.690 --> 00:38.500
introducido por TypeScript.

00:38.500 --> 00:40.950
Puede ser desconocido porque no sabemos todavía lo que

00:40.950 --> 00:42.950
el usuario va a introducir finalmente.

00:42.950 --> 00:45.593
Si es un número, si es una cadena, no lo sabemos.

00:46.770 --> 00:48.960
Ahora lo interesante del tipo desconocido

00:48.960 --> 00:51.020
es que podemos almacenar cualquier valor

00:51.020 --> 00:54.630
allí sin obtener errores, así que todo esto está permitido.

00:54.630 --> 00:57.660
Si ahora compilo mi archivo aquí, ves que no obtengo

00:57.660 --> 01:00.290
ningún error de compilación.

01:00.290 --> 01:01.910
Así que, hasta ahora, es lo mismo que

01:01.910 --> 01:03.820
si no hubiéramos asignado un tipo aquí,

01:03.820 --> 01:05.260
y por lo tanto tenemos el tipo any

01:05.260 --> 01:08.610
o si hubiéramos establecido explícitamente any como el tipo.

01:08.610 --> 01:11.810
Pero aún así, lo desconocido es diferente a cualquier.

01:11.810 --> 01:15.430
Esto aquí funciona, pero nos encontraremos con problemas

01:15.430 --> 01:19.660
si tengo otra variable, digamos userName, que debería ser una

01:19.660 --> 01:20.890
cadena.

01:20.890 --> 01:22.860
Y eso está sin inicializar aquí,

01:22.860 --> 01:27.200
pero luego aquí quiero establecer userName igual a userInput.

01:27.200 --> 01:29.150
Ahora ves que nos da un error.

01:29.150 --> 01:33.010
El tipo desconocido no es asignable al tipo cadena.

01:33.010 --> 01:34.590
Así, userName quiere una cadena

01:34.590 --> 01:37.990
y, por supuesto, no se garantiza que sea una cadena.

01:37.990 --> 01:41.620
Aquí, asigné uno, pero eso es sólo el caso en esta línea.

01:41.620 --> 01:44.460
userInput técnicamente podría tener cualquier

01:44.460 --> 01:46.490
valor porque es desconocido.

01:46.490 --> 01:47.640
Ahora, lo interesante

01:47.640 --> 01:51.060
es que si cambio unknown por any, este error desaparece porque

01:51.060 --> 01:53.900
any es el tipo más flexible en TypeScript y básicamente

01:53.900 --> 01:56.810
desactiva toda la comprobación de tipos y TypeScript

01:56.810 --> 02:00.950
sólo dice: "Me rindo, haz lo que quieras". Desconocido es un poco más restrictivo que cualquiera.

02:00.950 --> 02:05.510
Con unknown, tenemos que comprobar en primer lugar el tipo que

02:05.510 --> 02:08.820
se almacena actualmente en userInput antes

02:08.820 --> 02:12.200
de poder asignarlo, por ejemplo, a una variable

02:12.200 --> 02:14.400
que quiera una cadena.

02:14.400 --> 02:16.180
Entonces, como aquí se quiere una

02:16.180 --> 02:18.110
cadena, podríamos comprobar si el

02:18.110 --> 02:23.110
tipo de userInput es igual a string y TypeScript detectará esta comprobación y entenderá

02:23.650 --> 02:26.020
que aquí, lo que se almacena en userName porque

02:26.020 --> 02:29.790
termina fuera de esta sentencia if, donde compruebo que userInput es

02:29.790 --> 02:31.830
de tipo string, userInput está garantizado

02:31.830 --> 02:34.680
que es una cadena y por lo tanto puedo asignarlo con seguridad

02:34.680 --> 02:36.920
a userName.

02:36.920 --> 02:39.990
Por lo tanto, necesito una comprobación de

02:39.990 --> 02:42.670
tipo extra aquí con unknown para poder

02:42.670 --> 02:47.560
asignar un valor desconocido a un valor con un tipo fijo y, por lo tanto,

02:47.560 --> 02:50.530
unknown es la mejor opción sobre any si sabes

02:50.530 --> 02:54.780
que no puedo decir exactamente qué tipo de almacén hay, podría

02:54.780 --> 02:56.930
ser un número, podría ser una

02:56.930 --> 02:59.450
cadena, pero sé lo que quiero hacer

02:59.450 --> 03:02.910
con él eventualmente.

03:02.910 --> 03:05.470
Bueno, sólo hay que añadir una comprobación extra para

03:05.470 --> 03:07.440
asegurarse de que lo que quieres hacer se

03:07.440 --> 03:10.240
puede hacer, de modo que si quieres trabajar con una cadena,

03:10.240 --> 03:12.160
tienes una cadena, y ya está.

03:12.160 --> 03:14.690
Y entonces lo desconocido es mejor que nada

03:14.690 --> 03:18.720
porque se asegura de que no se puede hacer todo, pero se tiene al

03:18.720 --> 03:20.930
menos algún tipo de control.

03:20.930 --> 03:23.260
Por supuesto, si tienes la posibilidad de saber

03:23.260 --> 03:25.990
de antemano que userInput es siempre una cadena, o siempre

03:25.990 --> 03:28.150
una cadena o un número, entonces deberías usar

03:28.150 --> 03:30.000
cadena o un tipo de unión de este tipo en

03:30.000 --> 03:31.680
lugar de desconocido.

03:31.680 --> 03:34.460
Por lo tanto, el desconocido sigue siendo un tipo que no se debe utilizar

03:34.460 --> 03:36.010
todo el tiempo, pero es mejor que cualquiera

03:36.010 --> 03:37.460
por las razones descritas.
