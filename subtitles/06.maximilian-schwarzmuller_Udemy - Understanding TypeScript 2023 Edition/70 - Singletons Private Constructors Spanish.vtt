WEBVTT

00:02.260 --> 00:04.960
-: Ahora hay una última característica interesante

00:04.960 --> 00:07.020
que también quiero introducir,

00:07.020 --> 00:10.330
y son los constructores privados.

00:10.330 --> 00:13.823
¿Y qué es un constructor privado y qué uso tiene?

00:14.870 --> 00:17.700
Existe un patrón en la programación orientada

00:17.700 --> 00:20.460
a objetos que se denomina patrón singleton.

00:20.460 --> 00:23.030
El patrón singleton consiste en asegurar

00:23.030 --> 00:26.440
que siempre se tiene exactamente una instancia de una

00:26.440 --> 00:28.030
determinada clase.

00:28.030 --> 00:30.558
Esto puede ser útil en escenarios donde de alguna

00:30.558 --> 00:33.000
manera no puedes usar métodos o propiedades

00:33.000 --> 00:34.450
estáticas o no quieres hacerlo,

00:34.450 --> 00:36.440
pero al mismo tiempo quieres asegurarte

00:36.440 --> 00:40.730
de que no puedes crear múltiples objetos basados en una clase sino que siempre

00:40.730 --> 00:44.630
tienes exactamente un objeto basado en una clase.

00:44.630 --> 00:47.660
Digamos que para nuestro AccountingDepartment queremos

00:47.660 --> 00:51.460
asegurarnos de que sólo podemos crear exactamente un objeto basado

00:51.460 --> 00:53.320
en esta clase, porque tenemos exactamente

00:53.320 --> 00:56.010
un departamento de contabilidad en toda nuestra

00:56.010 --> 00:57.840
empresa.

00:57.840 --> 01:00.260
Puede que tengamos más de un departamento de informática,

01:00.260 --> 01:03.290
pero tenemos exactamente un departamento de contabilidad.

01:03.290 --> 01:05.310
Ahora, para reforzar esto y evitar

01:05.310 --> 01:09.020
que llamemos manualmente a new AccountingDepartment varias

01:09.020 --> 01:12.260
veces, podemos convertir el constructor de la clase

01:12.260 --> 01:14.320
AccountingDepartment en un constructor

01:14.320 --> 01:17.360
privado añadiendo la palabra clave private delante

01:17.360 --> 01:18.860
de él.

01:18.860 --> 01:20.560
Ahora lo que esto hace es, asegura

01:20.560 --> 01:23.480
que no podemos llamar a nuevo en esto.

01:23.480 --> 01:25.160
Aquí ves que me da un error

01:25.160 --> 01:27.620
porque el constructor es privado por

01:27.620 --> 01:30.600
lo que sólo es accesible desde dentro de la clase,

01:30.600 --> 01:33.690
lo cual suena extraño porque cómo entramos en

01:33.690 --> 01:37.920
la clase si ya no podemos crear objetos basados en ella.

01:37.920 --> 01:40.490
La respuesta es, bueno, métodos estáticos.

01:40.490 --> 01:43.610
Un método estático puede ser llamado en la propia clase por

01:43.610 --> 01:46.250
lo que no tienes que instanciarla para ello.

01:46.250 --> 01:49.460
Así que aquí podemos añadir un método estático que podríamos

01:49.460 --> 01:51.340
llamar getInstance, el nombre es totalmente

01:51.340 --> 01:53.260
a usted sin embargo.

01:53.260 --> 01:56.930
Ahora getInstance comprobará si ya tenemos una instancia

01:56.930 --> 02:00.090
de esta clase y si no, devolverá una nueva.

02:00.090 --> 02:04.300
Para ello podemos añadir una nueva instancia de propiedad estática, una propiedad

02:04.300 --> 02:06.350
privada estática por lo que se puede poner

02:06.350 --> 02:09.200
private delante de static llamada instancia que será

02:09.200 --> 02:12.040
de tipo AccountingDepartment.

02:12.040 --> 02:16.570
Así que allí almacenaremos una instancia de AccountingDepartment.

02:16.570 --> 02:17.580
Así que eso es lo que

02:17.580 --> 02:19.100
estoy diciendo aquí, tengo

02:19.100 --> 02:21.410
una propiedad estática que es accesible en

02:21.410 --> 02:23.310
la propia clase, pero sólo desde dentro

02:23.310 --> 02:25.960
de la clase y el valor que almacenamos allí será de

02:25.960 --> 02:30.140
tipo ContabilidadDepartamento, así que de la propia clase.

02:30.140 --> 02:33.880
Ahora podemos usar esta propiedad de instancia aquí en

02:33.880 --> 02:38.880
getInstance y comprobar si esto. se establece aquí dentro de static,

02:39.260 --> 02:43.570
si usamos esto, se referirá a la propia clase y entonces podemos

02:43.570 --> 02:47.610
acceder a todas las demás propiedades estáticas en eso.

02:47.610 --> 02:51.963
La alternativa a esto sería utilizar el nombre de la clase.

02:53.720 --> 02:58.450
Y ahora si esto se establece quiero devolver esto. o de nuevo el nombre

02:58.450 --> 03:01.600
de la clase. pero esto dentro de un método

03:01.600 --> 03:04.030
estático funciona, nos da acceso a la propia

03:04.030 --> 03:05.680
clase entonces, a diferencia

03:05.680 --> 03:09.370
de esto en un método no estático que nos da acceso a la instancia con

03:09.370 --> 03:11.590
la que estamos tratando de trabajar, no

03:11.590 --> 03:13.550
es lo que estamos haciendo aquí.

03:13.550 --> 03:15.660
Sin embargo, si no logramos entrar aquí,

03:15.660 --> 03:17.290
entonces no tenemos aún ninguna

03:17.290 --> 03:22.030
instancia, entonces pongo esto. así que esta propiedad de instancia

03:22.030 --> 03:25.660
estática igual a new AccountingDepartment, podemos

03:25.660 --> 03:28.630
usarla desde aquí porque ahora estamos dentro

03:28.630 --> 03:32.030
de este método de la clase, así que aquí podemos acceder

03:32.030 --> 03:35.250
al constructor privado y pasar nuestro ID, y nuestro

03:35.250 --> 03:44.830
array de informes y luego devolver esto.

03:44.830 --> 03:44.830
ejemplo aquí.

03:44.830 --> 03:47.010
Así que ahora estamos devolviendo la instancia

03:47.010 --> 03:48.220
que ya podríamos tener,

03:48.220 --> 03:50.970
o si no la tenemos todavía creamos una nueva.

03:50.970 --> 03:53.270
Pero este código, el código marcado aquí, sólo

03:53.270 --> 03:56.377
puede ejecutarse una vez porque una vez que tenemos una instancia

03:56.377 --> 03:57.850
la convertimos en este bloque

03:57.850 --> 04:00.370
if y devolvemos la instancia existente.

04:00.370 --> 04:03.700
Así que ahora si quieres trabajar con el AccountingDepartment, en

04:03.700 --> 04:05.940
lugar de crearlo así podríamos llamar, const

04:05.940 --> 04:10.153
accounting AccountingDepartment. getInstance, y esto nos devuelve

04:11.646 --> 04:14.850
una nueva instancia de AccountingDepartment.

04:14.850 --> 04:18.190
Pero si vuelvo a hacer esto obtendré la misma instancia que

04:18.190 --> 04:21.103
verás si registro por consola la contabilidad, y la

04:22.020 --> 04:23.570
contabilidad2 aquí.

04:23.570 --> 04:26.550
Verás que los dos deben ser exactamente iguales,

04:26.550 --> 04:28.253
si guardamos eso y recargamos,

04:30.550 --> 04:34.110
ves abajo mis dos objetos AccountingDepartment, tienen el

04:34.110 --> 04:36.690
mismo ID, la misma configuración exacta, son

04:36.690 --> 04:39.720
el mismo objeto, la misma instancia porque sólo tenemos

04:39.720 --> 04:41.530
una instancia con este patrón

04:41.530 --> 04:44.340
singleton que se crea con la ayuda de la palabra

04:44.340 --> 04:47.900
clave private delante del constructor.

04:47.900 --> 04:51.000
Podría decirse que este es un enfoque que no se

04:51.000 --> 04:52.490
utilizará siempre.

04:52.490 --> 04:55.010
El patrón singleton puede ser útil a veces, no lo necesitas

04:55.010 --> 04:56.530
todo el tiempo, pero definitivamente

04:56.530 --> 04:58.700
vale la pena conocerlo porque es algo interesante

04:58.700 --> 05:00.360
que puedes implementar fácilmente

05:00.360 --> 05:04.923
con TypeScript gracias a los constructores privados.
