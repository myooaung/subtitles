WEBVTT

00:02.060 --> 00:04.710
さて､ 静的プロパティの話はここまでにして､

00:04.710 --> 00:08.743
次は継承とそれに関連する概念に話を戻します｡

00:08.743 --> 00:14.280
もう一つの方法は､ 継承する予定のクラスにメソッドを追加する方法です｡

00:14.280 --> 00:16.660
これがDepartmentクラスです｡ ご存知のように､

00:16.660 --> 00:21.360
IT DepartmentとAccounting Departmentはこのクラスを継承しています｡

00:21.360 --> 00:23.470
Department クラスに

00:23.470 --> 00:26.160
describe メソッドがあるので､

00:26.160 --> 00:31.850
IT Department と Accounting Department

00:31.850 --> 00:39.523
をベースにしたインスタンスで､ これを呼び出すことができます｡

00:40.380 --> 00:43.850
さて､ 学習したように､ メソッドをオーバーライドすることができます｡ 

00:43.850 --> 00:46.550
例えば､ 経理部では､

00:46.550 --> 00:51.900
経理部ID､ アクセスディストートIDというように､

00:51.900 --> 01:00.443
独自の記述方法を追加することができます｡

01:02.040 --> 01:03.140
IDはDepartmentのプライベートなプロパティなので､

01:03.140 --> 01:14.750
このクラスに基づいているクラスでも利用できるように､ これをprotectedにする必要があるからです｡

01:14.750 --> 01:16.210
でも､ それがあれば､ うまくいくはずです｡ 

01:16.210 --> 01:19.080
そして､ もし今私が会計に関する記述を呼び出したら､ もちろんそれは可能ですが､

01:19.080 --> 01:20.540
この2行をコメントアウトして､

01:20.540 --> 01:27.460
その代わりに会計を呼び出すようにしましょう｡

01:27.460 --> 01:27.460
を記述すると､

01:27.460 --> 01:29.300
新しい出力が表示されるはずです｡

01:29.300 --> 01:33.340
実際に､ 経理部ID､ d2が表示されています｡

01:33.340 --> 01:38.900
さて､ もちろん､ IT部門でdescribeメソッドをオーバーライドすることも可能です｡

01:38.900 --> 01:43.240
しかし､ メソッドをオーバーライドするオプションが常に存在するため､

01:43.240 --> 01:46.440
それを提供したくない場合もあります｡

01:46.440 --> 01:50.430
その代わりに､ あるクラスを扱う開発者や､ あるクラスを拡張する開発者に､

01:50.430 --> 01:56.840
あるメソッドを実装したり､ あるメソッドをオーバーライドすることを強制したいのです｡

01:56.840 --> 01:58.360
いつやるんですか？

01:58.360 --> 02:01.690
さて､ あるメソッドがすべてのクラスで利用可能であることを保証したいときはいつでも､

02:01.690 --> 02:07.320
この場合､ あるベースクラスに基づいて､ Department.

02:07.320 --> 02:10.550
しかし､ 正確な実装は特定のバージョンに依存することも同時に分かっているため､

02:10.550 --> 02:17.340
一般的なメソッドを提供することができても､ このメソッドが存在することを強制したい場合､

02:17.340 --> 02:28.520
ベースクラスでデフォルトの実装を提供できないため､ 継承するクラスは独自の実装を提供する必要があるのです｡

02:28.520 --> 02:30.150
そこで､ ベースクラスに空のメソッドを用意し､

02:30.150 --> 02:44.880
そのクラスをベースとするすべてのクラスにこのメソッドを追加してオーバーライドするように強制することができます｡

02:44.880 --> 02:46.630
ここでabstractを追加すると､

02:46.630 --> 02:51.440
これは抽象クラスでしか利用できないというエラーが発生することがわかりますね｡

02:51.440 --> 02:57.390
メソッドの前にabstractがあるメソッドが1つ以上ある場合､

02:57.390 --> 03:03.740
クラスの前にもabstractを追加する必要があります｡

03:03.740 --> 03:05.650
Describeは抽象と記されているため､

03:05.650 --> 03:07.850
実装を持つことができません｡

03:07.850 --> 03:10.340
中括弧を削除し､ セミコロンを追加し､

03:10.340 --> 03:16.820
代わりにこれが持つべき戻り値の型（この場合は白）を追加する必要があります｡

03:16.820 --> 03:18.400
つまり､ このメソッドがどのように見えるか､

03:18.400 --> 03:25.230
その構造はどうなっているかを定義しているだけで､ これ以外のことは何も言っていないのです｡

03:25.230 --> 03:27.990
しかし､ 現在では､ 継承された抽象メンバ describe

03:27.990 --> 03:31.120
を実装していないため､ IT 部門でエラーが発生します｡

03:31.120 --> 03:36.330
つまり､ ここでは describe メソッドを提供していないのです｡

03:36.330 --> 03:38.410
Departmentクラスは抽象的で､

03:38.410 --> 03:41.000
そのような抽象的なメソッドを持っているので､

03:41.000 --> 03:42.860
そうする必要があります｡

03:42.860 --> 03:48.623
つまり､ このメソッドは､ このDepartmentクラスをベースとするすべてのクラスで実装されなければならないのです｡

03:49.620 --> 03:53.820
そこで､ ここIT部門では､ describeメソッドを追加する必要があります｡

03:53.820 --> 04:01.120
そして､ そこでIT部門をコンソールログして､ 好きなことができるようになりました｡

04:01.120 --> 04:04.900
これは､ 経理部で行っているのと同じ実装でも､

04:04.900 --> 04:07.440
違うものでもよい｡

04:07.440 --> 04:10.040
これで保存すると､ 再コンパイルされ､

04:10.040 --> 04:12.850
以前とほとんど同じ出力が得られます｡

04:12.850 --> 04:15.240
しかし､ 今はDepartmentに基づいて､

04:15.240 --> 04:20.020
異なるクラスで2つの異なるdescribeメソッドの実装があります｡

04:20.020 --> 04:23.600
抽象クラスは､ 他のクラスをベースとするすべてのクラスが､

04:23.600 --> 04:33.150
ある共通のメソッドやプロパティを共有することを強制したい場合に､ 非常に便利です｡

04:33.150 --> 04:36.510
しかし同時に､ 具体的な値や具体的な実装をベースクラスで提供する必要がなく､

04:36.510 --> 04:43.440
代わりに継承するクラスがそれを行う必要があることを確認したいものです｡

04:43.440 --> 04:45.970
また､ 抽象クラスも重要です｡ 

04:45.970 --> 04:51.420
そのため､ このキーワードで抽象とマークされたクラスは､ それ自体をインスタンス化することができる｡

04:51.420 --> 04:54.240
だから､ 今はDepartmentをインスタンス化することはできないんだ｡ 

04:54.240 --> 05:01.800
基本的には､ 継承するクラスがインスタンス化できるように､

05:01.800 --> 05:11.770
継承するクラスが具体的な実装を提供することを余儀なくされるだけです｡

05:11.770 --> 05:15.750
このキーワードはDepartmentのインスタンスやインスタンスを参照し､

05:15.750 --> 05:23.610
Departmentをベースとした継承クラスも含めて､ 何も返さないということです｡
