WEBVTT

00:02.190 --> 00:04.860
-：まずは名前空間の機能から説明したいと思います｡ 

00:04.860 --> 00:06.810
では､ どのように動作するかをお見せするために､

00:06.810 --> 00:09.980
ここで2つのインターフェイスを取得してみましょう｡

00:09.980 --> 00:11.480
ドラッグ＆ドロップのインターフェイスは､

00:11.480 --> 00:14.140
アプリから切り離してください｡ tsを追加し､ 新しいファイル､

00:14.140 --> 00:19.140
dragdropinterfacesを追加します｡ のようなts｡ 

00:21.270 --> 00:33.620
名前空間を使うには､ キーワードnamespaceと中カッコを追加するだけです｡

00:33.620 --> 00:35.880
ここではドラッグ・アンド・ドロップができるようにDD

00:35.880 --> 00:41.660
Interfacesと名付けますが､ 名前はあなた次第です｡

00:41.660 --> 00:43.640
さて､ 今年はJavaScriptの機能ではなく､

00:43.640 --> 00:45.250
TypeScriptの機能です｡

00:45.250 --> 00:47.750
Vanilla JavaScriptに直接相当するものがないため､

00:47.750 --> 00:50.340
コンパイルされていません｡

00:50.340 --> 00:55.693
その代わり､ TypeScriptは基本的にそれをオブジェクトにコンパイルしてくれる､ と言えるでしょう｡

00:55.693 --> 00:57.490
名前空間に入れるものはプロパティに格納されるが､

00:57.490 --> 01:10.640
そのプロパティへのアクセスの解決やすべての動作はTypeScriptが行うので､ 心配する必要はないだろう｡

01:10.640 --> 01:13.940
これで､ これらのインターフェースをネームスペースに移動させることができ､

01:13.940 --> 01:16.130
ほぼ完了です｡

01:16.130 --> 01:18.040
しかし､ ここで一つ問題が発生します｡

01:18.040 --> 01:22.280
これらのインターフェイスは､ この名前空間でのみ利用できるようになりました｡

01:22.280 --> 01:23.113
ところで､

01:23.113 --> 01:25.530
名前空間には､ インターフェースだけでなく､

01:25.530 --> 01:30.780
クラスや定数など､ 何でも入れることができます｡

01:30.780 --> 01:33.900
欲しいものは何でも名前空間に入れることができる｡ 

01:33.900 --> 01:37.150
つまり､ 基本的にどんなコードにも名前空間を割り当てることができるのです｡

01:37.150 --> 01:41.140
しかし､ 問題なのは､ これらの機能､ インターフェイスが､

01:41.140 --> 01:44.800
その名前空間の中でしか利用できないことです｡

01:44.800 --> 01:47.280
さて､ ご覧の通り､ 他には何も入っていません｡ 

01:47.280 --> 01:51.600
もちろん､ これらのインターフェースに依存するコードをこの名前空間に戻すこともできますが､

01:51.600 --> 01:58.940
その場合､ これらのインターフェースに依存する非常に長いクラスがあることが判明したため､ これを吹き飛ばすことになります｡

01:58.940 --> 02:02.900
プロジェクト・リスト・クラスとプロジェクト・アイテム・クラスがあります｡ 

02:02.900 --> 02:05.260
これらのインターフェースに依存しているため､

02:05.260 --> 02:08.922
その名前空間に追加しなければならないものがたくさんあります｡

02:08.922 --> 02:10.205
したがって､ インターフェースの前にexportキーワードを追加して､

02:10.205 --> 02:16.850
名前空間から機能をエクスポートすることができます｡

02:16.850 --> 02:19.680
これが意味するところは､ これらのインタフェースはこの名前空間の内部だけでなく､

02:19.680 --> 02:24.487
このファイルの外部でも利用できるようになったということです｡

02:24.487 --> 02:26.100
これがどのように機能するかは後ほど説明しますが､

02:26.100 --> 02:30.710
これでこのインターフェイスやエクスポートするものを作ることができます｡

02:30.710 --> 02:32.815
もちろん､ このファイルの外でも､

02:32.815 --> 02:41.140
基本的にその名前空間をインポートするか使用すれば､ 利用できるインターフェースに限定されるものではありません｡

02:41.140 --> 02:41.973
そして､ もちろん､ また､

02:41.973 --> 02:44.580
あなたは､ 単に名前空間のインターフェイスをエクスポートすることはできませんが､

02:44.580 --> 02:45.636
何でも｡

02:45.636 --> 02:52.410
さて､ これで問題は､ この名前空間をどのようにappにインポートするかということです｡

02:52.410 --> 02:52.410
そのために､

02:52.410 --> 02:56.210
TypeScriptには特別な構文が用意されています｡

02:56.210 --> 02:57.867
アプリのトップに戻りましょう｡  なぜなら､

02:57.867 --> 03:15.500
これは通常のコメントではなく､ TypeScriptが認識する特別なコメントだからです｡

03:15.500 --> 03:19.301
そこで､ 自己完結型のXMLタグを書きます｡

03:19.301 --> 03:21.600
つまり､ 開き角括弧､ 次にフォワードスラッシュ､

03:21.600 --> 03:32.370
閉じ角括弧､ そしてそれらの参照パスに等しく､ ここにインポートしたいファイルの名前を書きます｡

03:32.370 --> 03:35.217
私の場合､ ここではdragdropinterfacesです｡  ツ｡ 

03:39.330 --> 03:42.550
なぜなら､ 3つのスラッシュで説明したように､ これはTypeScriptが理解する特別な構文であり､

03:42.550 --> 03:50.110
この参照というものを理解するのと同じように､ TypeScriptが理解し､ 取り上げるからだ｡

03:50.110 --> 03:53.970
これはVanilla JavaScriptが気づかないもので､

03:53.970 --> 03:58.480
コンパイルされるとこのようになるわけではありません｡

03:58.480 --> 04:00.430
さて､ その成果はどうでしょうか｡ 

04:00.430 --> 04:07.104
これにより､ この名前空間 DD Interfaces が app で利用できるようになりました｡

04:07.104 --> 04:07.104
ツ｡ 

04:07.104 --> 04:08.920
しかし､ あなたがスクロールダウンした場合､

04:08.920 --> 04:14.300
あなたは私のエディタはまだ文句を言うし､ 我々はすべての良いコンパイルエラーとしてそれを保存しようとした場合参照してください｡

04:14.300 --> 04:16.410
だから､ 使えないようです｡ 

04:16.410 --> 04:19.730
ドラッグ可能なインターフェースはこちらでは使えないようです｡ 

04:19.730 --> 04:22.386
まあ､ 名前空間という特殊なものがありますからね｡ 

04:22.386 --> 04:27.930
先ほど､ 名前空間にあるものは､ その名前空間のどこからでも使えると言いましたが､

04:27.930 --> 04:32.557
それを使ってコードを分割することができます｡

04:32.557 --> 04:37.580
ネームスペースでエクスポートしたものを特殊なインポート構文でインポートすれば､

04:37.580 --> 04:51.797
複数のファイル間でネームスペースを分割することができますが､ インポートしたネームスペースやインポートしたファイルから何かを使いたい場合は､ 同じネームスペースに入れなければなりません｡

04:51.797 --> 04:55.050
それゆえ､ DDインターフェイスは最適な名称ではないのかもしれません｡ 

04:55.050 --> 04:58.010
Appと名付けただけかもしれません｡ 

04:58.010 --> 05:01.670
さて､ ここでas appと名付けたら､ appに移動することができます｡

05:01.670 --> 05:01.670
tsを作成し､

05:01.670 --> 05:05.630
ここに同じ名前のnamespace Appを作成します｡

05:05.630 --> 05:06.890
そして､ とりあえず､ ここにあるものをすべてその名前空間の中に入れてみましょう｡

05:06.890 --> 05:14.300
これで､ エラーはなくなりました｡ 右側の赤い点はなくなりました｡

05:14.300 --> 05:15.513
しかし､ それを保存しても､

05:15.513 --> 05:17.850
ここでエラーが出てしまいます｡

05:17.850 --> 05:22.850
例えば､ その完成したプロジェクトリストは使われない｡ 

05:25.010 --> 05:28.210
そうですね......それは使っていないです｡

05:28.210 --> 05:32.610
私も必要ないので､ ここでこれらの概念を削除すればいいのです｡

05:32.610 --> 05:38.040
これで､ 保存すれば､ 今度はエラーなくコンパイルされるようになりました｡

05:38.040 --> 05:39.880
ただ問題は､ この集大成の結果がどうなのか､

05:39.880 --> 05:41.920
ということです｡

05:41.920 --> 05:44.260
今は1ファイルか2ファイルか？

05:44.260 --> 05:46.170
ディスク・フォルダを見てみましょう｡

05:46.170 --> 05:49.380
ここには､ アプリのJSファイルと､ いくつかのコード､

05:49.380 --> 05:53.980
ドラッグ＆ドロップ・インターフェースのJSファイルがあります｡

05:53.980 --> 05:56.690
その結果､ 2つのファイルができたわけです｡ 

05:56.690 --> 05:59.500
さて､ ドラゴンドロップのインターフェイスファイルは､

05:59.500 --> 06:04.360
実はかなり空っぽです｡ インターフェイスは基本的に何もコンパイルされないと習いましたね｡

06:04.360 --> 06:07.300
JavaScriptには､ インターフェースに相当するものはありません｡ 

06:07.300 --> 06:09.270
これは､ 純粋なTypeScriptの機能です｡ 

06:09.270 --> 06:12.370
ですから､ ここにあるTypeScriptの構文でインポートして使用し､

06:12.370 --> 06:15.509
学んだ型の改良をすべて手に入れることができます｡ しかし､

06:15.509 --> 06:20.060
実運用では､ それが別のファイルであろうとなかろうと関係ないのです｡

06:20.060 --> 06:21.840
では､ 本番環境にも存在し､

06:21.840 --> 06:30.000
JavaScriptにも存在するものを､ 別のファイルに入れてみたらどうだろうということです｡

06:30.000 --> 06:33.373
例えば､ enumとprojectクラスの両方を取得し､

06:35.520 --> 06:36.470
project

06:36.470 --> 06:37.610
dash model

06:37.610 --> 06:41.410
TSという新しいファイルを作成し､ そこにproject status

06:41.410 --> 06:46.040
enumとproject classを入れます｡

06:46.040 --> 06:47.420
名前空間を追加する前に､

06:47.420 --> 06:51.790
Appという名前にする必要があります｡ そして､

06:51.790 --> 07:02.640
同じ名前空間の他のファイルでも使えるように､ この名前空間に機能をエクスポートする必要があります｡

07:02.640 --> 07:05.900
現在､ アプリに戻る｡  ts､ その2つ目のファイルをインポートする必要があります｡

07:05.900 --> 07:11.515
そこで､ このインポートとインポートプロジェクトのダッシュモデルtsを全て複製してみます｡

07:11.515 --> 07:16.610
これを保存すると､ コンパイルされ､ プロジェクトモデルのJavaScriptファイルが表示されます｡

07:16.610 --> 07:19.490
そしてその中に､ いくつかのコードを見ることができます｡

07:19.490 --> 07:22.770
問題は､ 私たちのアプリケーションが今､ 動作しているかということです｡ 

07:22.770 --> 07:24.620
そのために､ リロードして､

07:25.480 --> 07:29.903
ここにプロジェクトを追加してみましょう｡

07:29.903 --> 07:33.183
未定義のプロパティアクティブを読み取ることができません｡ 

07:34.120 --> 07:38.854
その理由は単純に､ 私たちのファイルはスタンドアロンでコンパイルされているからです｡

07:38.854 --> 07:41.410
名前空間は､ 先ほど言ったようにTypeScriptの世界にも存在しますが､

07:41.410 --> 07:44.640
JavaScriptと等価なものはありません｡

07:44.640 --> 07:48.263
つまり､ TypeScriptの世界では､ TypeScriptが必要なものをすべて見つけることができるので､

07:48.263 --> 07:51.610
すべてが素晴らしいという問題があります｡

07:51.610 --> 07:52.800
例えば､ ここでプロジェクトと言ったとき､

07:52.800 --> 07:56.310
プロジェクトの状態クラスのここでプロジェクトタイプを参照すると､

07:56.310 --> 08:02.840
このプロジェクトタイプ､ このプロジェクトクラスはプロジェクトモデルで定義されています｡

08:02.840 --> 08:06.020
TypeScriptはこのモデルをインポートしているため､

08:06.020 --> 08:07.570
不完全であることを主張しない｡

08:07.570 --> 08:10.250
しかしここでいうインポートとは､ JavaScriptにコンパイルされた後､

08:10.250 --> 08:18.150
その型をどこで見つけるかをTypeScriptに伝えることを意味する｡

08:18.150 --> 08:23.230
そのため､ JavaScriptのコードが実行され､ projectをインスタンス化して新しいプロジェクトを作成しようとすると､

08:23.230 --> 08:29.610
JavaScriptはこのprojectクラスやコンストラクタ関数を見つけることができないのです｡

08:29.610 --> 08:32.980
だから､ 断線はしっかり持ち越さないといけないんです｡ 

08:32.980 --> 08:35.420
そのためには､ TS（ブツブツ）へ行き､

08:35.420 --> 08:39.640
そこでこのアウトファイルオプションを設定すればいいのです｡

08:39.640 --> 08:40.740
これをコメントアウトすることで､

08:40.740 --> 08:48.620
TypeScriptに名前空間を連結するように指示することができます｡

08:48.620 --> 08:49.670
そのため､ これらの参照は､

08:49.670 --> 08:51.740
複数のJavaScriptファイルをコンパイルするのではなく､

08:51.740 --> 08:56.970
1つのJavaScriptファイルにコンパイルされます｡

08:56.970 --> 09:04.770
ここでは､ ディスクフォルダにあるファイルをbundleと名付けました｡

09:04.770 --> 09:04.770
js

09:05.630 --> 09:07.050
そして､ それを実行して保存すると､

09:07.050 --> 09:08.700
実際にはここでエラーが発生します｡

09:09.650 --> 09:17.250
アウトファイルと一緒にAMDとシステムモジュールだけがサポートされているというエラーが出ます｡

09:17.250 --> 09:19.540
さて､ ここですべてを理解する必要はありません｡

09:19.540 --> 09:23.160
歴史的な理由から､ 異なるJavaScriptファイルを1つにロードまたはバンドルするさまざまな方法があり､

09:23.160 --> 09:35.340
それがどのように開発されているか､ あなたが望むなら､ 添付のリソースでこれらの異なるバンドルタイプについてもっと学ぶことができます､ あなたはする必要はありませんが｡

09:35.340 --> 09:36.800
つまり､ 基本的にここで必要なことは､

09:36.800 --> 09:43.943
すでにエラーとしてハイライトされているモジュールを､ 一般的なJSではなく､ 例えばAMDに設定することです｡

09:45.400 --> 09:47.700
そうすると､ 文句を言われながらも問題なくコンパイルされますが､

09:47.700 --> 09:56.570
私が変更したことは検出されず､ 実際にはdistに新しいバンドルJSファイルが存在することになるのです｡

09:56.570 --> 10:00.310
ディスクフォルダ内のすべてのJavaScriptファイルを削除し､

10:00.310 --> 10:08.600
TSC dashを再起動すると､ コンパイラが処理するので､ バンドルJSファイルだけが生成されることがわかります｡

10:08.600 --> 10:13.250
このファイルは､ コンパイルされ翻訳されたバージョンのすべてのコードを保持するため､

10:13.250 --> 10:20.300
現在インデックスHTMLで､ 我々はちょうどここにアプリJSの代わりにバンドルJSをインポートする必要があります｡

10:20.300 --> 10:25.830
そうして､ ここでリロードすれば､ 再び動作するアプリケーションができあがり､

10:25.830 --> 10:32.661
ドラッグ＆ドロップですべてを操作できるようになります｡

10:32.661 --> 10:34.230
開発時には､ このような名前空間があり､

10:34.230 --> 10:41.970
すでに少しは管理しやすくなっているので､ これは一つのステップと言えます｡

10:41.970 --> 10:44.350
では､ これをさらに多くのファイルに分割してから､

10:44.350 --> 10:48.283
平均的な分割オプションのTSモジュールを見てみましょう｡
