WEBVTT

1
00:00:02.300 --> 00:00:04.800
<v Instructor>Now loosely related to optional chaining,</v>

2
00:00:04.800 --> 00:00:06.930
we got another nice feature in TypeScript,

3
00:00:06.930 --> 00:00:09.550
which helps us deal with nullish data.

4
00:00:09.550 --> 00:00:12.820
And that feature is called nullish coalescing.

5
00:00:12.820 --> 00:00:15.900
Now imagine you have some data, some input,

6
00:00:15.900 --> 00:00:17.530
where you don't know with certainty

7
00:00:17.530 --> 00:00:19.830
whether it's null or undefined

8
00:00:19.830 --> 00:00:23.320
or whether it's actually a valid piece of data.

9
00:00:23.320 --> 00:00:28.180
For example, userInput could be null let's say.

10
00:00:28.180 --> 00:00:31.040
Now, again, here, we hard-code this into TypeScript,

11
00:00:31.040 --> 00:00:33.580
hence TypeScript knows that this is null,

12
00:00:33.580 --> 00:00:36.500
but if you are fetching this through some DOM API,

13
00:00:36.500 --> 00:00:38.650
where you don't know it with certainty,

14
00:00:38.650 --> 00:00:41.320
or if you're getting this from a back-end,

15
00:00:41.320 --> 00:00:42.970
then you might not know in advance

16
00:00:42.970 --> 00:00:46.510
and TypeScript might not know whether this is null or not.

17
00:00:46.510 --> 00:00:50.650
If you then want to store this in some other constant

18
00:00:50.650 --> 00:00:52.803
or variable like storedData,

19
00:00:54.090 --> 00:00:56.150
you might wanna make sure that if it is null,

20
00:00:56.150 --> 00:00:58.760
you store a fallback value.

21
00:00:58.760 --> 00:01:03.560
Now you can do so with the logical OR operator,

22
00:01:03.560 --> 00:01:05.330
where you store a default,

23
00:01:05.330 --> 00:01:06.740
where you get that second value

24
00:01:06.740 --> 00:01:08.940
of the first one is undefined or null,

25
00:01:08.940 --> 00:01:11.550
if it's false to be precise.

26
00:01:11.550 --> 00:01:13.690
The problem with this approach is,

27
00:01:13.690 --> 00:01:17.110
if this is actually not null or undefined,

28
00:01:17.110 --> 00:01:18.960
but let's say an empty string,

29
00:01:18.960 --> 00:01:21.740
it is treated as a false value,

30
00:01:21.740 --> 00:01:25.600
and therefore that default, fallback value will kick in.

31
00:01:25.600 --> 00:01:28.850
So if I console.log storedData here,

32
00:01:28.850 --> 00:01:31.700
you will see that this prints DEFAULT.

33
00:01:31.700 --> 00:01:33.430
Now maybe that is what you want,

34
00:01:33.430 --> 00:01:36.540
and in that case, this is a perfectly fine solution.

35
00:01:36.540 --> 00:01:38.800
But if you wanna keep that user input,

36
00:01:38.800 --> 00:01:40.730
or whatever data you're working with,

37
00:01:40.730 --> 00:01:44.110
unless it really is null or undefined,

38
00:01:44.110 --> 00:01:45.530
then you need another approach

39
00:01:45.530 --> 00:01:48.070
because here we would treat this as false

40
00:01:48.070 --> 00:01:48.970
and use the fallback.

41
00:01:48.970 --> 00:01:51.720
But maybe you want to keep an empty input just null

42
00:01:51.720 --> 00:01:54.370
or undefined should be handled differently.

43
00:01:54.370 --> 00:01:56.390
For that, TypeScript also has an operator,

44
00:01:56.390 --> 00:01:58.780
the double question mark operator,

45
00:01:58.780 --> 00:02:02.210
this is called the nullish coalescing operator.

46
00:02:02.210 --> 00:02:05.250
And it means if this is null or undefined,

47
00:02:05.250 --> 00:02:06.730
and really just that,

48
00:02:06.730 --> 00:02:09.180
not an empty string, not zero,

49
00:02:09.180 --> 00:02:11.540
really just null or undefined,

50
00:02:11.540 --> 00:02:13.370
then we'll use the fallback.

51
00:02:13.370 --> 00:02:16.700
If it's not null or undefined, we'll use that value.

52
00:02:16.700 --> 00:02:19.220
So in this scenario here, this compiles,

53
00:02:19.220 --> 00:02:21.400
and you see, we stored the empty string,

54
00:02:21.400 --> 00:02:23.060
hence, I'm not printing anything here,

55
00:02:23.060 --> 00:02:24.720
this is the empty string.

56
00:02:24.720 --> 00:02:26.060
If this on the other hand, let's say,

57
00:02:26.060 --> 00:02:28.550
is undefined here, and I save this,

58
00:02:28.550 --> 00:02:30.400
you see, now it says DEFAULT,

59
00:02:30.400 --> 00:02:32.980
because thanks to this double question mark operator,

60
00:02:32.980 --> 00:02:35.500
we fall back to this, well, fallback

61
00:02:35.500 --> 00:02:38.320
and therefore here we got another very useful feature

62
00:02:38.320 --> 00:02:40.580
which can help you deal with nullish

63
00:02:40.580 --> 00:02:42.773
or undefined values with grace.

