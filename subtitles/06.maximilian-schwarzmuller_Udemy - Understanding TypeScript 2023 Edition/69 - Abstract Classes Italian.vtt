WEBVTT

00:02.060 --> 00:04.710
Dopo aver eliminato le proprietà statiche,

00:04.710 --> 00:07.000
torniamo all'ereditarietà e a un concetto

00:07.000 --> 00:08.743
ad essa collegato.

00:08.743 --> 00:11.740
Un altro modo per aggiungere metodi alle classi

00:11.740 --> 00:14.280
da cui si intende ereditare.

00:14.280 --> 00:16.660
Ecco la nostra classe Dipartimento e, come

00:16.660 --> 00:19.200
sapete, ereditiamo da essa il Dipartimento

00:19.200 --> 00:21.360
IT e il Dipartimento Contabilità.

00:21.360 --> 00:23.470
Ora, abbiamo questo metodo describe

00:23.470 --> 00:26.160
nella nostra classe Department e quindi possiamo

00:26.160 --> 00:28.850
chiamarlo su qualsiasi istanza, basata su IT

00:28.850 --> 00:31.850
Department e Accounting Department, perché queste

00:31.850 --> 00:34.560
classi sono basate su Department e hanno accesso

00:34.560 --> 00:36.560
a tutte le proprietà e ai metodi della

00:36.560 --> 00:39.523
classe base Department.

00:40.380 --> 00:43.850
Ora, come si è appreso, è possibile sovrascrivere i metodi.

00:43.850 --> 00:46.550
Quindi, ad esempio, qui nel reparto contabilità,

00:46.550 --> 00:50.030
potremmo aggiungere la nostra versione del metodo

00:50.030 --> 00:51.900
di descrizione, dove voglio

00:51.900 --> 00:56.880
fare qualcosa di diverso, magari quando dico ID reparto contabilità

00:56.880 --> 01:00.443
e poi ID distorsione accesso.

01:02.040 --> 01:03.140
Ora, questo non funzionerebbe

01:03.140 --> 01:06.960
qui, perché ID è una proprietà privata del Dipartimento e quindi dobbiamo

01:06.960 --> 01:10.400
trasformarla in una proprietà protetta, in modo che sia disponibile

01:10.400 --> 01:14.750
anche nelle classi basate su questa classe.

01:14.750 --> 01:16.210
Ma con questo dovrebbe funzionare.

01:16.210 --> 01:19.080
E se ora chiamo descrivere la contabilità, cosa

01:19.080 --> 01:20.540
che possiamo fare, naturalmente,

01:20.540 --> 01:23.650
commentiamo queste due righe e chiamiamo invece la

01:23.650 --> 01:27.460
contabilità. descrivere laggiù, dovremmo

01:27.460 --> 01:29.300
vedere il nuovo output, e in

01:29.300 --> 01:33.340
effetti vediamo l'ID del reparto contabilità, d2.

01:33.340 --> 01:36.570
Ora, naturalmente, potremmo anche sovrascrivere

01:36.570 --> 01:38.900
il metodo describe nel reparto IT.

01:38.900 --> 01:43.240
Ma a volte non basta offrire la possibilità di sovrascrivere

01:43.240 --> 01:46.440
un metodo, perché questo esiste sempre.

01:46.440 --> 01:50.430
Si vuole invece obbligare gli sviluppatori che lavorano con una certa

01:50.430 --> 01:53.390
classe o che estendono una certa classe a implementare

01:53.390 --> 01:54.820
un certo metodo o a sovrascrivere

01:54.820 --> 01:56.840
un certo metodo.

01:56.840 --> 01:58.360
Quando lo faresti?

01:58.360 --> 02:01.690
Beh, ogni volta che si vuole garantire che un certo metodo

02:01.690 --> 02:05.670
sia disponibile in tutte le classi basate su una classe base, in questo

02:05.670 --> 02:07.320
caso il Dipartimento.

02:07.320 --> 02:10.550
Ma allo stesso tempo sappiamo anche che l'esatta implementazione

02:10.550 --> 02:14.220
dipenderà dalla versione specifica, quindi quando si può fornire

02:14.220 --> 02:17.340
un metodo generale, ma si vuole imporre che questo metodo

02:17.340 --> 02:20.240
esista, le classi ereditarie dovranno fornire la

02:20.240 --> 02:22.410
propria implementazione, perché non

02:22.410 --> 02:24.270
è possibile fornire un'implementazione

02:24.270 --> 02:28.520
predefinita nella classe base.

02:28.520 --> 02:30.150
Quindi, in una situazione

02:30.150 --> 02:34.600
del genere, si potrebbe voler avere un metodo vuoto nella classe base

02:34.600 --> 02:38.460
e costringere tutte le classi basate su di essa ad aggiungere

02:38.460 --> 02:40.810
e sovrascrivere questo metodo; lo si

02:40.810 --> 02:44.880
può fare aggiungendo la parola chiave abstract.

02:44.880 --> 02:46.630
Se si aggiunge abstract qui, si

02:46.630 --> 02:49.840
ottiene un errore che indica che questo è disponibile solo

02:49.840 --> 02:51.440
in una classe astratta.

02:51.440 --> 02:54.220
Quindi, se si ha un metodo o più metodi

02:54.220 --> 02:57.390
con abstract davanti al metodo, si deve aggiungere

02:57.390 --> 03:00.400
abstract anche davanti alla classe e ora

03:00.400 --> 03:01.690
siamo a posto, ma si

03:01.690 --> 03:03.740
nota un errore.

03:03.740 --> 03:05.650
Describe non può avere un'implementazione

03:05.650 --> 03:07.850
perché è contrassegnato come astratto.

03:07.850 --> 03:10.340
È necessario rimuovere le parentesi graffe,

03:10.340 --> 03:14.030
aggiungere un punto e virgola e aggiungere il tipo di ritorno che

03:14.030 --> 03:16.820
dovrebbe avere, in questo caso bianco.

03:16.820 --> 03:18.400
Quindi ora si sta definendo

03:18.400 --> 03:21.970
l'aspetto di questo metodo e la sua struttura, ma non

03:21.970 --> 03:25.230
si dice nient'altro oltre a questo.

03:25.230 --> 03:27.990
Ora, però, riceviamo un errore nel dipartimento

03:27.990 --> 03:31.120
IT perché non implementa il membro astratto ereditato

03:31.120 --> 03:33.640
describe, il che significa che non offriamo

03:33.640 --> 03:36.330
il metodo describe qui.

03:36.330 --> 03:38.410
E dobbiamo farlo perché ci basiamo

03:38.410 --> 03:41.000
sulla classe Department, che è astratta

03:41.000 --> 03:42.860
e ha un metodo astratto.

03:42.860 --> 03:45.220
Ciò significa che questo metodo deve essere implementato

03:45.220 --> 03:48.623
da qualsiasi classe basata su questa classe di dipartimento.

03:49.620 --> 03:51.420
Quindi ora, nel reparto IT, dobbiamo

03:51.420 --> 03:53.820
aggiungere un metodo di descrizione.

03:53.820 --> 03:58.820
Da lì, possiamo accedere al Dipartimento IT della console e fare

03:59.040 --> 04:01.120
quello che vogliamo.

04:01.120 --> 04:03.070
Può trattarsi della stessa implementazione

04:03.070 --> 04:04.900
che abbiamo nel reparto contabilità,

04:04.900 --> 04:07.440
ma anche di un'implementazione diversa.

04:07.440 --> 04:10.040
Ora possiamo salvare il file e la compilazione avviene

04:10.040 --> 04:12.850
di nuovo, ottenendo quasi lo stesso risultato di prima.

04:12.850 --> 04:15.240
Ma ora abbiamo due diverse implementazioni

04:15.240 --> 04:18.090
del metodo describe nelle nostre diverse classi,

04:18.090 --> 04:20.020
basate sul Dipartimento.

04:20.020 --> 04:23.600
L'astrattezza può quindi essere molto utile se si vuole

04:23.600 --> 04:27.120
imporre che tutte le classi basate su un'altra classe condividano

04:27.120 --> 04:30.260
un metodo o una proprietà comune; si possono anche

04:30.260 --> 04:33.150
avere proprietà astratte.

04:33.150 --> 04:34.260
Ma allo stesso tempo,

04:34.260 --> 04:36.510
si vuole essere sicuri di non dover fornire

04:36.510 --> 04:39.170
il valore concreto, l'implementazione concreta

04:39.170 --> 04:41.000
nella classe base, ma di doverlo

04:41.000 --> 04:43.440
fare nella classe ereditaria.

04:43.440 --> 04:45.970
Importanti anche le classi astratte.

04:45.970 --> 04:49.200
Quindi le classi contrassegnate come astratte con questa parola

04:49.200 --> 04:51.420
chiave possono essere istanziate da sole.

04:51.420 --> 04:54.240
Quindi non è possibile istanziare il Dipartimento ora.

04:54.240 --> 04:57.440
In pratica, si tratta di una classe che deve essere ereditata,

04:57.440 --> 05:01.800
in modo che le classi ereditate possano essere istanziate, e le classi

05:01.800 --> 05:05.230
ereditate sono costrette a fornire implementazioni concrete,

05:05.230 --> 05:09.040
in questo caso per descrivere i metodi, seguendo la struttura

05:09.040 --> 05:11.770
che avete esposto qui.

05:11.770 --> 05:15.750
Quindi, con questa parola chiave che si riferisce a un'istanza di Dipartimento

05:15.750 --> 05:19.930
o a un'istanza, in qualche modo basata su un Dipartimento, comprese le classi ereditate

05:19.930 --> 05:21.530
che potrebbero essere intermedie

05:21.530 --> 05:23.610
e che non restituisce nulla.
