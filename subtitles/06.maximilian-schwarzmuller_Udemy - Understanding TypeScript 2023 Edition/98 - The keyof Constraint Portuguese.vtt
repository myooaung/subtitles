WEBVTT

00:02.230 --> 00:03.280
Instrutor: Então temos o

00:03.280 --> 00:04.930
básico sobre genéricos, esperemos, agora

00:04.930 --> 00:07.150
vamos mergulhar um pouco mais fundo nas restrições,

00:07.150 --> 00:09.250
ou em um tipo específico de restrição, que você pode

00:09.250 --> 00:10.400
acrescentar.

00:10.400 --> 00:12.680
Para isso, vou trocar mais uma função,

00:12.680 --> 00:16.293
uma função genérica, que vou nomear extractoAndConvert.

00:18.700 --> 00:21.550
A idéia desta função aqui é que recebemos

00:21.550 --> 00:24.120
um objeto como primeiro argumento,

00:24.120 --> 00:26.340
e o segundo parâmetro é, no final,

00:26.340 --> 00:28.413
uma chave.

00:30.050 --> 00:32.570
Agora eu quero devolver o valor dessa chave no objeto,

00:32.570 --> 00:35.310
o que podemos fazer com esta notação padrão JavaScript.

00:35.310 --> 00:36.310
Usando os colchetes para

00:36.310 --> 00:38.200
exe como uma propriedade em um objeto, mas

00:38.200 --> 00:39.840
isso não é nada específico de TypeScript,

00:39.840 --> 00:42.010
isto é Vanilla JavaScript novamente.

00:42.010 --> 00:43.000
Agora, portanto, aqui

00:43.000 --> 00:44.580
poderíamos dizer que aqui queremos

00:44.580 --> 00:48.460
ter um objeto, e para a chave queremos ter um fio, digamos assim.

00:48.460 --> 00:50.160
Mas agora aqui estou recebendo

00:50.160 --> 00:52.000
um erro, porque o que não sabemos

00:52.000 --> 00:54.500
aqui no final, é se o objeto que estamos recebendo

00:54.500 --> 00:57.510
aqui realmente terá essa chave.

00:57.510 --> 00:59.410
É o fim que o TypeScript está nos

00:59.410 --> 01:01.430
dizendo com este estranho erro.

01:01.430 --> 01:02.530
Por exemplo, aqui,

01:02.530 --> 01:05.700
eu poderia registrar no console o resultado de chamar

01:05.700 --> 01:09.770
isto com, digamos, um objeto vazio e depois um nome.

01:09.770 --> 01:12.600
E aqui, a propósito, estou chamando este extratoAndConvert,

01:12.600 --> 01:16.025
porque quero chamar isto sem o registro do console e simplesmente

01:16.025 --> 01:18.600
dizer Valor, dois pontos, mais.

01:18.600 --> 01:19.660
Mas isso é apenas uma nota lateral

01:19.660 --> 01:22.450
que no final nos devolvo desgarrados com os dados recuperados.

01:22.450 --> 01:23.840
Mas o principal problema aqui é que

01:23.840 --> 01:25.160
eu poderia chamá-lo assim e ele

01:26.091 --> 01:28.020
passaria em um objeto como um primeiro parâmetro,

01:28.020 --> 01:29.890
e depois um fio como um segundo.

01:29.890 --> 01:31.430
Mas corretamente, o TypeScript

01:31.430 --> 01:33.200
me diz que no final não é garantido que

01:33.200 --> 01:35.193
esta chave exista neste objeto.

01:36.420 --> 01:39.920
Agora, para garantir isto, podemos usar novamente tipos genéricos aqui.

01:39.920 --> 01:41.620
Poderíamos dizer que temos um tipo T,

01:41.620 --> 01:43.130
e esse será nosso objetivo aqui.

01:43.130 --> 01:46.550
Podemos dizer, estende o objeto.

01:46.550 --> 01:48.363
Mas também temos que digitar U.

01:49.440 --> 01:52.850
Nossa chave aqui, digamos, que no final,

01:52.850 --> 01:56.320
tem que ser uma chave de nosso tipo T.

01:56.320 --> 01:58.210
Portanto, deste objeto, queremos

01:58.210 --> 02:01.560
garantir que o que recebemos aqui como segundo parâmetro

02:01.560 --> 02:04.890
como chave é uma propriedade desse primeiro tipo.

02:04.890 --> 02:09.130
E para isso podemos dizer que estende a chave do T.

02:11.550 --> 02:13.540
E agora você vê que o erro desapareceu

02:13.540 --> 02:15.370
aqui, e em vez disso eu recebi o erro

02:15.370 --> 02:17.930
lá embaixo, porque agora estou informando aqui

02:17.930 --> 02:21.800
o TypeScript, que o primeiro parâmetro deve ser qualquer tipo de objeto,

02:21.800 --> 02:23.610
e o segundo parâmetro deve ser qualquer

02:23.610 --> 02:25.870
tipo de chave naquele objeto.

02:25.870 --> 02:28.480
E aqui, sim, estamos passando em qualquer tipo de objeto,

02:28.480 --> 02:30.430
mas não temos uma chave de nome lá dentro.

02:30.430 --> 02:34.990
Este erro só desaparecerá assim que eu acrescentar uma chave de nome.

02:34.990 --> 02:37.990
Portanto, este é o tempo todo para que possamos usar tipos

02:37.990 --> 02:41.800
genéricos para com esta palavra-chaveoff também aqui, para dizer ao

02:41.800 --> 02:45.730
TypeScript que queremos garantir que tenhamos esta estrutura correta,

02:45.730 --> 02:47.460
e isso, claro, é realmente útil,

02:47.460 --> 02:49.120
pois nos permite garantir que não

02:49.120 --> 02:51.160
cometamos erros estúpidos, onde tentamos

02:51.160 --> 02:53.390
chamar esta função, que, no final, tentamos

02:53.390 --> 02:56.740
exe como uma propriedade que não existe.

02:56.740 --> 02:58.140
Portanto, isto funciona.

02:58.140 --> 02:59.870
Mas se eu tento exe como 'idade' aqui, eu recebo

02:59.870 --> 03:01.570
novamente um erro, por exemplo.

03:02.890 --> 03:05.560
Portanto, vamos mudar isto de volta para "nome".
