WEBVTT

00:02.540 --> 00:05.610
Kursleiter: Als Nächstes möchte ich mich mit Funktionsüberladungen

00:05.610 --> 00:08.050
beschäftigen, einer Funktion, die es uns ermöglicht,

00:08.050 --> 00:11.450
sozusagen mehrere Funktionssignaturen für ein und dieselbe Funktion

00:11.450 --> 00:13.840
zu definieren.

00:13.840 --> 00:17.080
Das bedeutet einfach, dass es mehrere Möglichkeiten gibt,

00:17.080 --> 00:20.340
eine Funktion mit verschiedenen Parametern aufzurufen,

00:20.340 --> 00:24.300
zum Beispiel, um dann etwas innerhalb dieser Funktion zu tun.

00:24.300 --> 00:26.540
Und ein gutes Beispiel dafür, wie Funktionsüberladungen

00:26.540 --> 00:29.060
uns helfen können, sehen Sie etwas weiter oben.

00:29.060 --> 00:32.090
Die Funktion add, die wir vorhin geschrieben

00:32.090 --> 00:35.940
haben, nimmt zwei kombinierbare Werte an, d. h. Strings oder

00:35.940 --> 00:37.960
Zahlen, und wie Sie sehen können,

00:37.960 --> 00:39.830
folgert TypeScript aus dem Rückgabetyp,

00:39.830 --> 00:43.450
dass alles kombinierbar ist.

00:43.450 --> 00:45.370
Das bedeutet einfach, dass TypeScript

00:45.370 --> 00:47.960
versteht, dass das, was es zurückgibt, entweder eine

00:47.960 --> 00:51.080
Zeichenkette oder eine Zahl ist, aber wenn man darüber nachdenkt,

00:51.080 --> 00:52.880
ist das nicht wirklich wahr.

00:52.880 --> 00:55.280
Ich meine, technisch gesehen ist es wahr, aber wir wissen,

00:55.280 --> 00:57.620
dass, wenn wir zwei Zahlen übergeben, der Rückgabetyp

00:57.620 --> 00:59.400
immer eine Zahl sein wird.

00:59.400 --> 01:01.940
Wenn wir mindestens einen String übergeben,

01:01.940 --> 01:03.950
ist der Rückgabetyp String.

01:03.950 --> 01:05.460
Warum ist das wichtig?

01:05.460 --> 01:08.225
Denken Sie daran, dass die Funktion add wie folgt geschrieben ist.

01:08.225 --> 01:11.060
Sie können alles darunter auskommentieren

01:11.060 --> 01:15.390
und einen neuen Code direkt unter der Funktion hinzufügen.

01:15.390 --> 01:18.670
Wenn ich nun mein Ergebnis hier erhalte, indem ich add aufrufe,

01:18.670 --> 01:21.870
übergebe ich eins und fünf, Sie sehen, das Ergebnis ist vom

01:21.870 --> 01:23.390
Typ kombinierbar.

01:23.390 --> 01:27.010
Dies hat zur Folge, dass TypeScript nicht weiß, ob

01:27.010 --> 01:30.390
das Ergebnis eine Zahl oder ein String ist.

01:30.390 --> 01:34.510
Dies könnte von Bedeutung sein, wenn wir Zeichenketten übergeben.

01:34.510 --> 01:39.510
Wenn ich hier Max Schwarz einsetze, dann funktioniert das zwar, aber ich bekomme trotzdem

01:39.700 --> 01:41.750
Kombinierbarkeit zurück.

01:41.750 --> 01:43.990
Dies hat zur Folge, dass ich keine String-Funktionen

01:43.990 --> 01:46.120
für das Ergebnis aufrufen kann, z. B. kann

01:46.120 --> 01:50.600
ich Split nicht aufrufen, um das Leerzeichen aufzuteilen.

01:50.600 --> 01:52.870
Ich weiß, dass dies funktionieren wird, weil

01:52.870 --> 01:55.270
ich weiß, dass, wenn ich die Funktion so aufrufe,

01:55.270 --> 01:57.200
ich sie in diesen if-Zweig verwandeln werde

01:57.200 --> 01:59.980
und einen String zurückbekomme, also weiß ich, dass die

01:59.980 --> 02:03.030
Ergebnisse den String enthalten, aber TypeScript weiß nur,

02:03.030 --> 02:05.620
dass es einen String oder eine Zahl enthält.

02:05.620 --> 02:08.350
Natürlich können wir hier Type Casting verwenden und TypeScript

02:08.350 --> 02:11.340
mitteilen, dass wir einen String zurückbekommen.

02:11.340 --> 02:13.930
Wir können dies mit der Syntax für die Typzuweisung tun,

02:13.930 --> 02:16.040
die Sie bereits kennen gelernt haben.

02:16.040 --> 02:18.840
Dennoch ist es nicht optimal, dass wir das tun müssen, würde ich argumentieren,

02:18.840 --> 02:21.800
denn wir müssen hier mehr Code schreiben, obwohl wir erwarten würden,

02:21.800 --> 02:24.560
dass TypeScript versteht, dass wir immer einen String zurückbekommen,

02:24.560 --> 02:27.740
wenn wir diese Funktion wie hier aufrufen.

02:27.740 --> 02:30.890
Aber TypeScript analysiert unseren Code hier nicht wirklich

02:30.890 --> 02:33.700
gut genug, und hier kann uns eine Funktionsüberladung

02:33.700 --> 02:35.000
helfen.

02:35.000 --> 02:38.730
Eine Funktionsüberladung schreibt man, indem man einfach eine Funktion

02:38.730 --> 02:41.880
direkt über die Hauptfunktion schreibt, sozusagen mit

02:41.880 --> 02:46.683
dem gleichen Namen, also diese Zeile hier im Grunde genommen wiederholt, allerdings

02:47.880 --> 02:50.890
ohne die geschweiften Klammern, keine öffnenden und

02:50.890 --> 02:54.080
schließenden geschweiften Klammern danach, und jetzt

02:54.080 --> 02:57.980
hier will man bestimmte Typen Zahl und Zahl verwenden und dann den Rückgabetyp

02:57.980 --> 03:03.410
finden, wenn das der Fall ist, wenn man mindestens eine Zahl bekommt.

03:03.410 --> 03:06.643
Und da könnten wir sagen, dann ist der Rückgabetyp eine Zahl.

03:08.840 --> 03:10.980
Damit sagen wir TypeScript, wenn wir

03:10.980 --> 03:14.980
diese Funktion aufrufen und beide Argumente eine Zahl sind, dann gibt

03:14.980 --> 03:17.180
diese Funktion eine Zahl zurück.

03:17.180 --> 03:19.430
Dies ist natürlich keine Syntax, die in JavaScript

03:19.430 --> 03:22.480
funktionieren würde, sie wird von TypeScript im Kompilierungsprozess

03:22.480 --> 03:24.430
eliminiert.

03:24.430 --> 03:28.480
Aber TypeScript führt diese Funktionsinformation und diese

03:28.480 --> 03:31.380
Funktionsdeklaration hier zusammen und kombiniert

03:31.380 --> 03:33.640
im Grunde das Wissen dieser beiden

03:33.640 --> 03:35.550
Zeilen hier.

03:35.550 --> 03:38.590
Und jetzt weiß es, okay, wir können diese Funktion

03:38.590 --> 03:41.490
hier entweder mit A und B vom Typ combinable oder

03:41.490 --> 03:43.790
mit A und B vom Typ number aufrufen.

03:43.790 --> 03:47.060
Übrigens können Sie auch hier in Ihren Überladungen mehr oder weniger

03:47.060 --> 03:50.100
Parameter hinzufügen, Sie sind da wirklich flexibel.

03:50.100 --> 03:53.640
Sie können auch die Funktion add hier hinzufügen und nur

03:53.640 --> 03:57.620
eine Zahl erwarten und eine Zahl zurückgeben, und das würde auch

03:57.620 --> 04:01.210
funktionieren, wenn wir B in unseren anderen Überladungen

04:01.210 --> 04:03.270
optional machen.

04:03.270 --> 04:05.254
Denn letztlich müssen Sie natürlich sicherstellen,

04:05.254 --> 04:08.630
dass Ihr Code hier immer funktioniert und Sie am Ende alle Argumente

04:08.630 --> 04:10.850
erhalten, die Sie brauchen.

04:10.850 --> 04:13.610
B wäre hier also optional, und Sie sehen, dass es funktioniert.

04:13.610 --> 04:15.170
Jetzt müssen wir natürlich nur

04:15.170 --> 04:17.850
noch damit umgehen, dass B dort unten möglicherweise

04:17.850 --> 04:19.550
optional ist.

04:19.550 --> 04:21.390
Ich brauche das aber nicht, also werde

04:21.390 --> 04:24.460
ich das loswerden und nur das hier lassen, aber ich wollte auch

04:24.460 --> 04:27.200
keine Überladung, wenn wir das mit Strings aufrufen.

04:27.200 --> 04:30.060
Ich füge also eine weitere Überladung der Funktion

04:30.060 --> 04:33.450
add hinzu, wobei A eine Zeichenkette und B eine Zeichenkette

04:33.450 --> 04:36.090
ist, und dann bin ich mir ziemlich sicher, dass die

04:36.090 --> 04:38.460
Rückgabe eine Zeichenkette sein wird.

04:38.460 --> 04:40.280
Übrigens ist es eine gute Praxis,

04:40.280 --> 04:43.660
nach diesen Überlastungszeilen ein Semikolon einzufügen.

04:43.660 --> 04:46.560
Damit will ich sagen, dass wir, wenn wir diese Funktion mit zwei

04:46.560 --> 04:49.100
Zahlen aufrufen, immer eine Zahl zurückbekommen.

04:49.100 --> 04:52.170
Wenn wir es mit zwei Strings aufrufen, erhalten wir immer einen String zurück.

04:52.170 --> 04:54.510
Wenn wir es mit einer Zeichenkette und einer Zahl aufrufen,

04:54.510 --> 04:57.020
bekommen wir technisch gesehen auch immer eine Zeichenkette zurück,

04:57.020 --> 04:57.853
aber ich will nicht alle

04:57.853 --> 04:59.410
diese möglichen Kombinationen hier addieren,

04:59.410 --> 05:01.240
ich könnte natürlich noch mehr hinzufügen und

05:01.240 --> 05:03.173
dann auch noch eine Zahl hier hinzufügen, oder die

05:04.040 --> 05:07.500
andere Kombination, die wir haben könnten, nämlich diese hier.

05:07.500 --> 05:10.060
Nun, ich glaube, ich habe jetzt alle Kombinationen hinzugefügt.

05:10.060 --> 05:12.540
Und jetzt liste ich hier alle möglichen Kombinationen

05:12.540 --> 05:16.040
von Werten auf und was wir jeweils zurückgeben.

05:16.040 --> 05:18.260
Damit ist der Fehler dort unten verschwunden,

05:18.260 --> 05:20.520
weil TypeScript jetzt weiß, dass die Ergebnisse

05:20.520 --> 05:24.790
vom Typ String sind, wenn wir add mit diesen beiden Werten aufrufen, die beide Strings

05:24.790 --> 05:25.623
sind.

05:25.623 --> 05:28.510
Und wenn ich mit dem Mauszeiger über add fahre, sehen Sie, dass

05:28.510 --> 05:31.100
drei zusätzliche Überladungen verfügbar sind.

05:31.100 --> 05:32.980
Hier rufe ich add mit zwei Strings auf, aber

05:32.980 --> 05:35.560
TypeScript weiß, dass es drei andere Möglichkeiten gibt,

05:35.560 --> 05:36.630
dies aufzurufen.

05:36.630 --> 05:39.450
Zum Beispiel mit einer Zeichenkette und einer Zahl,

05:39.450 --> 05:41.340
in diesem Fall erhalte ich eine Zeichenkette

05:41.340 --> 05:46.340
zurück, mit einer Zahl und einer Zeichenkette, oder mit zwei Zahlen.

05:47.430 --> 05:48.630
Das würde auch funktionieren.

05:48.630 --> 05:50.210
Dann kann ich natürlich nicht split

05:50.210 --> 05:52.650
aufrufen, weil TypeScript korrekt erkennt, dass ich,

05:52.650 --> 05:54.630
wenn ich dies mit zwei Zahlen aufrufe, eine

05:54.630 --> 05:58.253
Zahl zurückbekomme, und bei einer Zahl kann man nicht split aufrufen.

05:59.260 --> 06:02.010
Dies sind also Funktionsüberladungen und sie können

06:02.010 --> 06:04.060
Ihnen in Situationen wie dieser hier helfen,

06:04.060 --> 06:06.780
wo TypeScript nicht in der Lage wäre, den Rückgabetyp

06:06.780 --> 06:08.590
selbst korrekt abzuleiten. Hier können

06:08.590 --> 06:11.660
Sie genau wissen, was für die verschiedenen Kombinationen,

06:11.660 --> 06:16.033
die Sie in Ihrer Funktion unterstützen, zurückgegeben wird.
