WEBVTT

1
00:00:02.340 --> 00:00:05.860
<v ->Now when working with union types,</v>

2
00:00:05.860 --> 00:00:06.970
like this and this,

3
00:00:06.970 --> 00:00:11.070
it can be cumbersome to always repeat the union type.

4
00:00:11.070 --> 00:00:13.070
You might want to trade a new type

5
00:00:13.070 --> 00:00:15.330
which reinstalls this union type.

6
00:00:15.330 --> 00:00:18.540
And you can do that with another cool types feature,

7
00:00:18.540 --> 00:00:21.410
the feature of type aliases.

8
00:00:21.410 --> 00:00:22.723
You create such alias,

9
00:00:24.280 --> 00:00:25.670
typically before you use it,

10
00:00:25.670 --> 00:00:29.240
so here at the top of the file in this case here,

11
00:00:29.240 --> 00:00:31.240
with the type keyword.

12
00:00:31.240 --> 00:00:34.040
Now the type keyword is not built into JavaScript,

13
00:00:34.040 --> 00:00:35.880
it's supported in TypeScript though,

14
00:00:35.880 --> 00:00:40.450
and after type you add the name of your custom type,

15
00:00:40.450 --> 00:00:42.860
or of your type alias, I should say.

16
00:00:42.860 --> 00:00:44.980
For example combinable.

17
00:00:44.980 --> 00:00:46.720
But the name is really up to you.

18
00:00:46.720 --> 00:00:48.380
You can invent any name here

19
00:00:48.380 --> 00:00:50.520
which is not built into JavaScript

20
00:00:50.520 --> 00:00:52.530
or TypeScript as a key name.

21
00:00:52.530 --> 00:00:54.360
So something like date would not be allowed

22
00:00:54.360 --> 00:00:56.250
because that's built into JavaScript,

23
00:00:56.250 --> 00:00:58.900
but combinable is not built into JavaScript,

24
00:00:58.900 --> 00:01:01.170
not built into TypeScript so we can use it.

25
00:01:01.170 --> 00:01:04.550
And now with the equal sign you assign

26
00:01:04.550 --> 00:01:08.320
the type you want to encode in your alias, so to say.

27
00:01:08.320 --> 00:01:10.300
So we could store a number here,

28
00:01:10.300 --> 00:01:12.790
and now whenever we want to make sure

29
00:01:12.790 --> 00:01:14.390
that something should be a number,

30
00:01:14.390 --> 00:01:16.400
we could use combinable instead.

31
00:01:16.400 --> 00:01:18.570
Now, that doesn't make too much sense,

32
00:01:18.570 --> 00:01:21.630
it arguably would even make our code hardier to read.

33
00:01:21.630 --> 00:01:25.500
If I use combinable down there for example,

34
00:01:25.500 --> 00:01:27.420
this would work technically

35
00:01:27.420 --> 00:01:29.550
but if we just glance over our code,

36
00:01:29.550 --> 00:01:33.180
it's not obvious that here we want a number or a string.

37
00:01:33.180 --> 00:01:35.560
Well, typically therefore you use that

38
00:01:35.560 --> 00:01:37.500
in conjunction with union types.

39
00:01:37.500 --> 00:01:40.380
So we can store a union type in our custom type,

40
00:01:40.380 --> 00:01:42.250
so to say, in our type alias,

41
00:01:42.250 --> 00:01:45.240
and now just refer to combinable down there

42
00:01:45.240 --> 00:01:48.170
instead of our union type.

43
00:01:48.170 --> 00:01:51.060
So, we have exactly the same setup as before,

44
00:01:51.060 --> 00:01:54.230
we just have our reusable type alias here

45
00:01:54.230 --> 00:01:55.580
which we can use instead.

46
00:01:55.580 --> 00:01:57.660
And that allows us to save some extra code

47
00:01:57.660 --> 00:01:59.200
and make sure we always refer

48
00:01:59.200 --> 00:02:04.200
to same types or the same type setup when we use combinable.

49
00:02:04.234 --> 00:02:06.600
And of course we cannot just use that for number and string,

50
00:02:06.600 --> 00:02:08.970
we can use that for any type setup

51
00:02:08.970 --> 00:02:11.140
we might want to store in an alias,

52
00:02:11.140 --> 00:02:14.810
including these two literal types, for example.

53
00:02:14.810 --> 00:02:18.210
So, for these two types here, for this union type,

54
00:02:18.210 --> 00:02:20.660
we could also trade the type alias,

55
00:02:20.660 --> 00:02:24.030
ConversionDescriptor, or however you wanna name it,

56
00:02:24.030 --> 00:02:28.920
and store exactly this type in this type alias.

57
00:02:28.920 --> 00:02:32.270
And now we can use this type alias down there.

58
00:02:32.270 --> 00:02:34.970
So type aliases are really, really useful.

59
00:02:34.970 --> 00:02:37.490
You can encode more complex type definitions

60
00:02:37.490 --> 00:02:40.860
into your own types, into your own type names, so to say,

61
00:02:40.860 --> 00:02:43.120
and reuse that everywhere in your code

62
00:02:43.120 --> 00:02:45.920
where you need exactly this type setup.

63
00:02:45.920 --> 00:02:48.060
So that you avoid typos down there

64
00:02:48.060 --> 00:02:51.000
and you can simply save code, write code quicker,

65
00:02:51.000 --> 00:02:53.490
and always be clearer about your intentions,

66
00:02:53.490 --> 00:02:56.010
for example by choosing descriptive

67
00:02:56.010 --> 00:02:57.653
type alias names up there.

