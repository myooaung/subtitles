WEBVTT

00:02.120 --> 00:06.770
- ：现在我们将从一个非常流行的实用程序库Lodash开始｡

00:06.770 --> 00:13.250
现在, 您将在这里学习的内容基本上可以作为您要使用的任何JavaScript库的示例｡

00:13.250 --> 00:17.430
不管是Lodash､ jQuery还是其他任何东西｡ 

00:17.430 --> 00:21.640
现在, 如果您对如何使用React和TypeScript或Node感兴趣,

00:21.640 --> 00:26.718
请在此补充说明｡

00:26.718 --> 00:26.718
js的｡  Express和TypeScript,

00:26.718 --> 00:35.730
我在后面的课程中有专门的模块, 因为在那里您将学到更多的东西, 而不仅仅是使用TypeScript添加它们｡

00:35.730 --> 00:40.470
但是对于一个更简单的库, 比如Lodash, jQuery等等,

00:40.470 --> 00:43.010
这里有一个方法可以工作｡

00:43.010 --> 00:45.340
所以我们想在项目中使用Lodash｡ 

00:45.340 --> 00:48.460
Lodash当然是一个JavaScript库｡ 

00:48.460 --> 00:50.800
我们不需要TypeScript来使用它,

00:50.800 --> 00:53.480
我们可以在任何JavaScript项目中使用它,

00:53.480 --> 00:59.200
我们可以像你在Lodash官方文档中学习的那样安装它｡

00:59.200 --> 01:01.400
如果你使用的是npm, 你可以运行npm

01:01.400 --> 01:06.477
i或npm install, 这只是一个简短的形式, “--save/lodash”｡

01:07.750 --> 01:10.820
因此, 在这个示例项目中, 使用了Webpack,

01:10.820 --> 01:14.180
但没有生产工作流, 只有开发工作流｡

01:14.180 --> 01:16.570
在那里, 我们可以通过运行nmp install dash

01:16.570 --> 01:18.607
dash save Lodash来添加此库｡

01:18.607 --> 01:21.700
这将把它安装到这个项目中, 由于我们的webpack设置,

01:21.700 --> 01:23.500
我们可以将它导入到我们的代码文件中,

01:23.500 --> 01:27.517
并在那里使用它｡

01:27.517 --> 01:32.250
这在任何Webpack支持的JavaScript项目中都是一样的｡

01:32.250 --> 01:37.720
如果你不使用webpack, 那么当然你也可以简单地使用CDN等等｡

01:37.720 --> 01:45.130
但是, 我将在本模块稍后的后续步骤中向您展示的内容仅适用于Webpack设置｡

01:45.130 --> 01:47.730
这里我们有一个Webpack安装程序, 我们现在安装了Lodash,

01:47.730 --> 01:51.510
如果我们想使用它, 我们可以在这里导入它｡

01:51.510 --> 01:55.600
我们可以从'Lodash'导入下划线｡ 

01:55.600 --> 01:59.960
安装Lodash时应该可以使用此语法｡

01:59.960 --> 02:03.057
但是, 这现在已经给我们带来了一个错误｡ 

02:03.057 --> 02:06.850
找不到模块Lodash的声明文件｡ 

02:06.850 --> 02:09.890
我们还有另一个问题, 如果你想用Lodash,

02:09.890 --> 02:12.230
来洗牌一个数组, 我们可以合并log下划线洗牌,

02:12.230 --> 02:20.430
然后把一个简单的数组传递给这个洗牌方法｡

02:20.430 --> 02:23.110
Shuffle方法是Lodash支持的一种方法｡ 

02:23.110 --> 02:26.820
我们可以在洛达什的官方文件中了解到这一点｡

02:26.820 --> 02:29.056
在那里, 如果您搜索“shuffle”,

02:29.056 --> 02:32.370
您将了解到可以使用此方法对数组进行洗牌｡

02:32.370 --> 02:39.480
所以, 它应该是可行的, 但正如你所知, 它实际上不是这样工作的｡

02:39.480 --> 02:43.058
如果我现在在这里启动我的webpack服务器,

02:43.058 --> 02:45.890
我们将看到CDN给我们一个错误｡

02:45.890 --> 02:50.940
它再次告诉我们它“找不到模块Lodash的声明文件”｡

02:50.940 --> 02:54.720
所以, 这并不是真正的工作方式｡ 

02:54.720 --> 02:59.930
问题是, Lodash是一个简单的JavaScript库｡

02:59.930 --> 03:02.250
它是用vanilla JavaScript构建的,

03:02.250 --> 03:05.150
而且是为vanilla JavaScript构建的｡

03:05.150 --> 03:10.280
如果我们转到节点模块, 我们可以验证这一点, 因为我们在那里有很多依赖项,

03:10.280 --> 03:14.220
因为我们在那里有很多webpack的依赖项｡

03:14.220 --> 03:17.930
但在这里, 如果我们寻找洛达什, 它在这里｡

03:17.930 --> 03:21.330
我们展开后会看到其中有一堆JavaScript文件,

03:21.330 --> 03:22.750
对吧？

03:22.750 --> 03:26.380
Lodash的所有源代码中都有｡ 

03:26.380 --> 03:30.010
一堆JavaScript代码, 但肯定没有TypeScript代码｡ 

03:30.010 --> 03:31.750
这有什么问题吗？

03:31.750 --> 03:37.070
问题是TypeScript不理解这个包中的内容｡

03:37.070 --> 03:41.020
它不知道Lodash导出哪些方法｡ 

03:41.020 --> 03:45.500
现在, 如果我们转到tsconfig, 您将看到它实际上是工作的｡

03:45.500 --> 03:45.500
json文件｡ 

03:45.500 --> 03:48.740
我们确保在发生错误时发出输出｡ 

03:48.740 --> 03:52.650
因此, 如果我们将“noEmitOnError”切换为“false”,

03:52.650 --> 03:55.770
以便在出现错误时发出新的输出｡

03:55.770 --> 03:57.600
现在, 重新开始, 它最终会给我们同样的错误,

03:57.600 --> 04:02.160
所以我们仍然会看到｡

04:02.160 --> 04:07.120
但是如果我在这里重新加载这个页面, 你实际上会在这里得到一个输出｡

04:07.120 --> 04:08.922
你可以忽略底部的错误,

04:08.922 --> 04:12.580
你会看到一个输出, 它是一个混洗的数组｡

04:12.580 --> 04:14.920
你看, 每次我重新装弹的时候看起来都不一样｡ 

04:14.920 --> 04:16.530
这很有趣｡ 

04:16.530 --> 04:21.280
它证明了Lodash的工作, 它证明了这个代码是正确的｡

04:21.280 --> 04:24.170
但不幸的是, TypeScript不能理解它, 因为Lodash使用JavaScript,

04:24.170 --> 04:28.400
而不是TypeScript｡

04:28.400 --> 04:31.220
现在的问题是没有Lodash版本的TypeScript,

04:31.220 --> 04:34.080
所以我们必须接受这一点｡

04:34.080 --> 04:37.220
这种情况你会经常遇到｡ 

04:37.220 --> 04:39.365
你想使用某个第三方库, 它只为JavaScript构建,

04:39.365 --> 04:44.210
因此你会得到这样的错误｡

04:44.210 --> 04:46.060
这是恼人的, 因为它在理论上,

04:46.060 --> 04:47.430
我们当然可以使用它｡

04:47.430 --> 04:49.630
TypeScript建立在JavaScript之上｡ 

04:49.630 --> 04:53.160
我们可以在TypeScript项目中使用任何JavaScript库,

04:53.160 --> 04:56.150
只需将其转换为TypeScript即可｡

04:56.150 --> 04:58.890
谢天谢地, 这是可能的｡ 

04:58.890 --> 05:02.564
所以让我在这里打开这个设置, “noEmitOnError

05:02.564 --> 05:04.220
true”｡

05:04.220 --> 05:10.053
让我向您展示如何向TypeScript介绍Lodash及其提供的功能｡

05:11.140 --> 05:16.250
你可以安装所谓的第三方类型库｡

05:16.250 --> 05:20.050
如果你搜索Lodash类型, 你会发现一个npm包,

05:20.050 --> 05:24.140
这里叫做“@types/lodash”｡

05:24.140 --> 05:26.440
您还可以看到install命令,

05:26.440 --> 05:28.120
它将在一秒钟内运行｡

05:28.120 --> 05:32.220
但是如果你深入到细节, 你也会发现一个github仓库的链接｡

05:32.220 --> 05:36.320
它链接到DefinitelyTyped, 这是一个巨大的存储库,

05:36.320 --> 05:40.820
有大量的各种第三方库的翻译｡

05:40.820 --> 05:43.120
现在我们在Lodash文件夹中｡ 

05:43.120 --> 05:46.590
这就是所谓的｡  dts档案｡ 

05:46.590 --> 05:50.180
所以不只是｡  但是｡  分

05:50.180 --> 05:53.460
这些是所谓的声明文件, 这意味着它们不包含任何实际的逻辑,

05:53.460 --> 05:58.750
但是如果我们看一下shuffle｡

05:58.750 --> 05:58.750
dts文件中,

05:58.750 --> 06:01.848
它们包含TypeScript指令｡

06:01.848 --> 06:05.200
它们基本上告诉TypeScript一些东西是如何工作的,

06:05.200 --> 06:08.720
以及这个包中包含了什么｡

06:08.720 --> 06:10.700
您可以在这里浏览不同子文件夹中的不同文件,

06:10.700 --> 06:14.280
以了解更多信息｡

06:14.280 --> 06:21.750
因此, 最终这些文件只是提供了从普通JavaScript到TypeScript的转换｡

06:21.750 --> 06:23.860
它们不包含任何运行的逻辑,

06:23.860 --> 06:26.950
但定义了该库使用的类型｡

06:26.950 --> 06:32.490
它们定义了您使用的类型､ 调用方法时返回的类型等等｡

06:32.490 --> 06:35.410
你也可以这样写｡  dts文件, 如果你感兴趣的话,

06:35.410 --> 06:40.470
官方的文档类型会提供一个指南｡

06:40.470 --> 06:42.110
但是对于您自己的项目类型, 您不必这样做,

06:42.110 --> 06:43.160
因为如果您正在编写TypeScript代码,

06:43.160 --> 06:48.110
当然只有TypeScript才能理解这一点｡

06:48.110 --> 06:50.310
但是如果您使用的是用JavaScript编写的第三方库,

06:50.310 --> 06:56.860
而没有任何TypeScript代码, 或者没有内置｡

06:56.860 --> 06:56.860
dts文件,

06:56.860 --> 07:03.960
一些第三方库附带的, 即使他们是用JavaScript编写的, Lodash没有｡

07:03.960 --> 07:06.890
因此, 如果您使用的库不包含内置的转换文件,

07:06.890 --> 07:11.180
并且不是用TypeScript本机编写的, 那么,

07:11.180 --> 07:15.760
使用这样的类型包是一种解决方案｡

07:15.760 --> 07:20.760
因此, 在这里我们运行“npm install --save@types/Lodash”｡ 

07:21.860 --> 07:24.600
实际上, 您也可以运行“save-dev”,

07:24.600 --> 07:27.920
因为dev是一个依赖项, 实际上只有在开发过程中才需要它,

07:27.920 --> 07:32.360
因为无论如何, 代码都是通过JavaScript编译的｡

07:32.360 --> 07:38.060
现在安装了这个从TypeScript翻译来理解它｡

07:38.060 --> 07:42.510
你看, 一旦安装了这个, 这个错误就消失了｡

07:42.510 --> 07:48.270
如果我现在重新启动npm start, 你会看到错误也不会回到这里｡

07:48.270 --> 07:51.640
所以你现在可以看到, 无论是在编译还是在浏览器中,

07:51.640 --> 07:55.190
都没有任何错误｡

07:55.190 --> 07:57.270
从技术上讲, 它以前也工作过,

07:57.270 --> 08:01.580
但现在有了翻译, 我们也可以利用TypeScript｡

08:01.580 --> 08:05.493
例如, 现在我们还可以在IDE中获得所有的完成｡

08:05.493 --> 08:10.070
如果我在这里输入一个点, 我会看到我可以使用的Lodash方法｡ 

08:10.070 --> 08:13.930
因此, 这是一个非常重要的知识, 您必须了解,

08:13.930 --> 08:21.177
它允许您在TypeScript项目中使用常规的､ 普通的JavaScript库,

08:21.177 --> 08:28.490
并且仍然获得很好的支持､ 很好的自动完成功能, 并避免错误｡

08:28.490 --> 08:33.990
有了这些翻译类型包的帮助, 你可以说｡

08:33.990 --> 08:38.990
而这些包, 总是被命名为“@types”, 然后是包名,

08:39.290 --> 08:40.860
这些基本上存在于任何流行的第三方库中,

08:40.860 --> 08:46.730
你可以在那里找到｡

08:46.730 --> 08:51.690
您总是可以搜索库名称, 然后键入jQuery类型,

08:51.690 --> 08:54.400
您应该会找到这样的条目｡

08:54.400 --> 08:59.373
这就是在普通JavaScript库中处理类型的方法｡
