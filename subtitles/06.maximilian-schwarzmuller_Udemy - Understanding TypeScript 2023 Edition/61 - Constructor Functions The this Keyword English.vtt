WEBVTT

1
00:00:02.160 --> 00:00:03.330
<v Presenter>Now classes</v>

2
00:00:03.330 --> 00:00:06.080
and all the constructor functions which have been around

3
00:00:06.080 --> 00:00:09.280
for longer do not just have properties which you can use

4
00:00:09.280 --> 00:00:12.780
to define the general structure of the object.

5
00:00:12.780 --> 00:00:14.770
You can also add methods.

6
00:00:14.770 --> 00:00:17.460
We do actually do have the constructor method there.

7
00:00:17.460 --> 00:00:19.620
But that's just a utility function,

8
00:00:19.620 --> 00:00:22.940
which is called, when you do instantiate the class.

9
00:00:22.940 --> 00:00:25.584
Remember, in the past, we only had constructor functions,

10
00:00:25.584 --> 00:00:28.100
now we have that syntactic sugar

11
00:00:28.100 --> 00:00:30.460
but we still have the construct a function which we can add

12
00:00:30.460 --> 00:00:33.300
to run any initialization code.

13
00:00:33.300 --> 00:00:36.350
You might also wanna add a couple of functions

14
00:00:36.350 --> 00:00:38.600
or methods they're then called

15
00:00:38.600 --> 00:00:40.980
which you can call on the created object.

16
00:00:40.980 --> 00:00:44.000
For example, a describe method here

17
00:00:44.000 --> 00:00:46.000
on our department class.

18
00:00:46.000 --> 00:00:47.994
Now a method is added like this,

19
00:00:47.994 --> 00:00:49.382
the name of the method,

20
00:00:49.382 --> 00:00:53.270
then no colon, no equal sign instead,

21
00:00:53.270 --> 00:00:56.090
parentheses and then curly braces.

22
00:00:56.090 --> 00:00:59.070
The parentheses take any arguments you might need.

23
00:00:59.070 --> 00:01:00.780
Now let's say here, we don't need any,

24
00:01:00.780 --> 00:01:03.330
otherwise you could add parameters just as you do it

25
00:01:03.330 --> 00:01:05.150
in a regular function.

26
00:01:05.150 --> 00:01:07.280
And what you typically always need though,

27
00:01:07.280 --> 00:01:10.000
is a function body or a method body

28
00:01:10.000 --> 00:01:12.020
between the curly braces.

29
00:01:12.020 --> 00:01:14.693
Here you now define the logic of your method.

30
00:01:15.580 --> 00:01:19.570
And there we might wanna output the name of the department

31
00:01:19.570 --> 00:01:22.410
with a little bit of extra information maybe.

32
00:01:22.410 --> 00:01:26.230
We can do this of course here with console.log, for example,

33
00:01:26.230 --> 00:01:30.620
department, colon and then maybe name.

34
00:01:30.620 --> 00:01:32.100
However, this would not work.

35
00:01:32.100 --> 00:01:34.570
This would look for a variable name,

36
00:01:34.570 --> 00:01:37.710
which has to exist inside of this described method,

37
00:01:37.710 --> 00:01:40.860
or outside of the class as a global variable.

38
00:01:40.860 --> 00:01:42.470
And as you see if it chose age,

39
00:01:42.470 --> 00:01:44.433
I get an error for name I don't do this,

40
00:01:44.433 --> 00:01:46.540
I don't get this because there actually is

41
00:01:46.540 --> 00:01:50.100
a global name variable in the browser in the window object.

42
00:01:50.100 --> 00:01:53.030
Nonetheless, this would not refer to this name property here

43
00:01:53.030 --> 00:01:57.130
but to some global name variable outside of this class.

44
00:01:57.130 --> 00:01:59.599
To refer to a class property or

45
00:01:59.599 --> 00:02:01.930
method from inside of the class,

46
00:02:01.930 --> 00:02:03.590
we have to use the this keyword

47
00:02:03.590 --> 00:02:05.630
as we do it here in the constructor.

48
00:02:05.630 --> 00:02:08.980
This then typically refers back to the

49
00:02:08.980 --> 00:02:12.400
concrete instance of this class that was created.

50
00:02:12.400 --> 00:02:14.240
And there with the dot notation,

51
00:02:14.240 --> 00:02:16.600
we can access all the properties and methods

52
00:02:16.600 --> 00:02:17.650
off this instance.

53
00:02:17.650 --> 00:02:19.555
In this case, this.name.

54
00:02:19.555 --> 00:02:24.555
So if I now, down there, call accounting.describe like this.

55
00:02:24.583 --> 00:02:28.110
The this keyword, when this executes will refer

56
00:02:28.110 --> 00:02:30.920
to this concrete accounting object

57
00:02:30.920 --> 00:02:33.730
that was built based on this class.

58
00:02:33.730 --> 00:02:35.530
So if I now save that,

59
00:02:35.530 --> 00:02:38.570
and we reload, we should see this output here,

60
00:02:38.570 --> 00:02:40.420
of which of course has a typo,

61
00:02:40.420 --> 00:02:42.110
but generally it works.

62
00:02:42.110 --> 00:02:43.944
Let's now fix the typo here.

63
00:02:43.944 --> 00:02:46.190
So this is how we can add a method.

64
00:02:46.190 --> 00:02:48.166
Now what important word about this keyword.

65
00:02:48.166 --> 00:02:50.600
As you probably know, if you've worked

66
00:02:50.600 --> 00:02:54.890
with JavaScript a bit, the this keyword can be tricky.

67
00:02:54.890 --> 00:02:56.090
For example,

68
00:02:56.090 --> 00:03:00.090
if I would add another

69
00:03:01.480 --> 00:03:03.350
object here accounting copy

70
00:03:03.350 --> 00:03:06.430
and this is our object which just has

71
00:03:06.430 --> 00:03:11.270
the describe method and dare I point at accounting.describe.

72
00:03:11.270 --> 00:03:15.470
Then if I call accountingcopy.describe as a method,

73
00:03:15.470 --> 00:03:17.150
what do you think will happen?

74
00:03:17.150 --> 00:03:19.200
Do you think we'll get an error?

75
00:03:19.200 --> 00:03:21.200
We certainly get no compilation error

76
00:03:21.200 --> 00:03:22.927
that compiles just fine.

77
00:03:22.927 --> 00:03:26.360
But at runtime, we see department undefined.

78
00:03:26.360 --> 00:03:28.780
And the reason for that is that what I'm doing

79
00:03:28.780 --> 00:03:32.010
is I'm adding a describe property to this object

80
00:03:32.010 --> 00:03:34.040
which is created with the object literal,

81
00:03:34.040 --> 00:03:37.888
not based on this class, but just as a dummy object

82
00:03:37.888 --> 00:03:41.420
not based on any specific class you defined.

83
00:03:41.420 --> 00:03:44.360
And then the value for this describe property

84
00:03:44.360 --> 00:03:49.000
is a pointer at the describe method in my accounting object.

85
00:03:49.000 --> 00:03:52.168
So I'm pointing at this method here

86
00:03:52.168 --> 00:03:54.690
to find for this concrete object.

87
00:03:54.690 --> 00:03:56.240
I'm not executing it.

88
00:03:56.240 --> 00:03:57.723
So I'm not passing the value of

89
00:03:57.723 --> 00:04:00.410
this function execution to describe.

90
00:04:00.410 --> 00:04:04.090
I'm really passing the function itself to describe here.

91
00:04:04.090 --> 00:04:06.430
So when I then call describe here on the copy,

92
00:04:06.430 --> 00:04:08.950
it does indeed execute the method

93
00:04:08.950 --> 00:04:10.440
this all works correctly.

94
00:04:10.440 --> 00:04:13.690
The problem just is, when this method executes,

95
00:04:13.690 --> 00:04:17.040
this will not refer to this object

96
00:04:17.040 --> 00:04:19.170
this method was part of originally,

97
00:04:19.170 --> 00:04:21.140
so not to the accounting object.

98
00:04:21.140 --> 00:04:22.350
Instead, this,

99
00:04:22.350 --> 00:04:25.050
and that's a good rule of thumb you can memorize,

100
00:04:25.050 --> 00:04:27.900
typically refers to the thing which is responsible

101
00:04:27.900 --> 00:04:29.650
for calling a method.

102
00:04:29.650 --> 00:04:32.190
And responsible for calling the describe method

103
00:04:32.190 --> 00:04:34.880
here in this case, is accounting copy.

104
00:04:34.880 --> 00:04:39.160
Because we call describe on accounting copy.

105
00:04:39.160 --> 00:04:42.320
So this will refer to the thing in front of the dot here,

106
00:04:42.320 --> 00:04:43.980
which is accounting Copy.

107
00:04:43.980 --> 00:04:47.530
That however, is an object which has no name property.

108
00:04:47.530 --> 00:04:49.678
So when I access this.name,

109
00:04:49.678 --> 00:04:53.968
I get an error because of this does not refer

110
00:04:53.968 --> 00:04:56.610
to an object with a name property.

111
00:04:56.610 --> 00:04:59.220
So name yields us undefined indeed.

112
00:04:59.220 --> 00:05:02.260
And that's why I'm getting this strange output.

113
00:05:02.260 --> 00:05:04.310
That's one thing you have to keep in mind,

114
00:05:04.310 --> 00:05:07.470
not just in TypeScript, it's a JavaScript thing.

115
00:05:07.470 --> 00:05:09.540
And of course, therefore it can happen to you

116
00:05:09.540 --> 00:05:11.500
in TypeScript as well.

117
00:05:11.500 --> 00:05:13.940
Now, to work around this, "this" problem,

118
00:05:13.940 --> 00:05:16.660
you can add a parameter

119
00:05:16.660 --> 00:05:18.150
to the describe method,

120
00:05:18.150 --> 00:05:19.730
which is called this.

121
00:05:19.730 --> 00:05:21.380
That's a special parameter,

122
00:05:21.380 --> 00:05:25.334
a special instruction understood by TypeScript.

123
00:05:25.334 --> 00:05:28.430
If you add a parameter named this here,

124
00:05:28.430 --> 00:05:31.420
it's not really a parameter which is expected,

125
00:05:31.420 --> 00:05:36.010
you still can call describe without passing in any value.

126
00:05:36.010 --> 00:05:38.476
Instead, this is interpreted by TypeScript,

127
00:05:38.476 --> 00:05:42.980
to be a hint regarding what this should be referred to.

128
00:05:42.980 --> 00:05:45.960
And now it's important to assign a type to this.

129
00:05:45.960 --> 00:05:48.810
And the type here, in this case should be

130
00:05:48.810 --> 00:05:51.780
our class type here so department.

131
00:05:51.780 --> 00:05:53.840
What I'm saying with this is,

132
00:05:53.840 --> 00:05:56.250
when describe is executed

133
00:05:56.250 --> 00:05:59.375
this inside of describe, so in this case here,

134
00:05:59.375 --> 00:06:02.550
should always refer to an instance

135
00:06:02.550 --> 00:06:05.040
that's based on the department class.

136
00:06:05.040 --> 00:06:09.160
So an object which in the end would be of type department.

137
00:06:09.160 --> 00:06:12.370
And therefore now we actually get an error down there,

138
00:06:12.370 --> 00:06:14.140
we get an error here,

139
00:06:14.140 --> 00:06:16.012
because what we got here is that

140
00:06:16.012 --> 00:06:19.800
when we call describe here on accounting copy,

141
00:06:19.800 --> 00:06:24.100
we're not calling it on an instance of department.

142
00:06:24.100 --> 00:06:26.350
So therefore this will be violated.

143
00:06:26.350 --> 00:06:29.540
This in this case, will not refer

144
00:06:29.540 --> 00:06:32.250
to an object of type department.

145
00:06:32.250 --> 00:06:34.690
So here we add some extra type safety

146
00:06:34.690 --> 00:06:36.920
by adding this dummy parameter,

147
00:06:36.920 --> 00:06:39.450
because now if I try to save this,

148
00:06:39.450 --> 00:06:42.480
I do get an error related to this line here.

149
00:06:42.480 --> 00:06:44.950
Because now Indeed, we would execute some code

150
00:06:44.950 --> 00:06:47.030
that would not work as expected.

151
00:06:47.030 --> 00:06:49.260
So we have to fix this, for example,

152
00:06:49.260 --> 00:06:51.140
by adding a name property here

153
00:06:52.040 --> 00:06:55.290
for that to work because now TypeScript sees Okay,

154
00:06:55.290 --> 00:06:57.702
the object on which you're calling describe,

155
00:06:57.702 --> 00:07:02.702
now has a name property just like this expects it to have

156
00:07:03.840 --> 00:07:05.803
because this is based on the department object,

157
00:07:05.803 --> 00:07:08.070
which also has a name property.

158
00:07:08.070 --> 00:07:10.790
So now here, TypeScript would be happy

159
00:07:10.790 --> 00:07:12.270
because we added name.

160
00:07:12.270 --> 00:07:14.934
If I remove it, we get the error back with name

161
00:07:14.934 --> 00:07:17.277
however this works, and we avoid this

162
00:07:17.277 --> 00:07:19.750
undefined output from before.

163
00:07:19.750 --> 00:07:22.770
So that's important to understand about this.

164
00:07:22.770 --> 00:07:26.140
And it's important to be aware of this improvement

165
00:07:26.140 --> 00:07:28.410
you could add to your code to make sure

166
00:07:28.410 --> 00:07:31.190
that you catch unwanted behaviors

167
00:07:31.190 --> 00:07:32.993
like we had down there before.

