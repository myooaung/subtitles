WEBVTT

00:02.350 --> 00:03.921
Istruttore: Allora, qui abbiamo dei tipi di sindacato.

00:03.921 --> 00:07.440
Sviluppiamo l'idea dei tipi di unione e introduciamo

00:07.440 --> 00:09.764
anche i tipi letterali.

00:09.764 --> 00:14.290
I tipi letterali sono tipi in cui non ci si limita a dire che una certa

00:14.290 --> 00:16.436
variabile o un parametro deve contenere,

00:16.436 --> 00:19.700
per esempio, un numero o una stringa, ma in cui è molto

00:19.700 --> 00:21.230
chiaro il valore esatto

00:21.230 --> 00:23.800
che deve contenere.

00:23.800 --> 00:26.064
Lo abbiamo visto presto già qui nelle basi.

00:26.064 --> 00:28.408
Const numero due, ad esempio.

00:28.408 --> 00:32.098
Se ci passo sopra, si vede che il tipo che è stato dedotto

00:32.098 --> 00:35.680
non è un numero, ma 2. 8.

00:35.680 --> 00:37.290
E il gruppo dei tipi ha dedotto

00:37.290 --> 00:41.220
questo numero concreto come tipo, perché è una costante.

00:41.220 --> 00:43.810
Non cambierà mai e quindi il gruppo di tipi sa che il valore

00:43.810 --> 00:48.211
che ho assegnato qui è il tipo esatto che ho. Quindi, naturalmente, si tratta

00:48.211 --> 00:52.796
di un numero, si può dire 2. L'8 deriva dal tipo di numero, ma

00:52.796 --> 00:56.320
è un numero specifico. E questo non vale solo

00:56.320 --> 00:59.160
per i numeri, ma anche per le stringhe

00:59.160 --> 01:02.860
e così via. Soprattutto per le corde, può essere molto utile.

01:02.860 --> 01:07.420
Diciamo che nella nostra funzione combinata ci aspettiamo numeri o stringhe

01:07.420 --> 01:10.190
e li combiniamo in modo diverso in base a ciò che otteniamo,

01:10.190 --> 01:13.756
ma vogliamo anche consentire al chiamante della funzione di

01:13.756 --> 01:18.756
definire come deve essere restituito il risultato, in modo da poter forzare una conversione

01:18.880 --> 01:25.370
da numero a stringa o viceversa.

01:25.370 --> 01:25.370
Potremmo

01:25.370 --> 01:29.740
farlo con il terzo parametro e potremmo chiamarlo tipo di risultato o conversione

01:29.740 --> 01:33.208
di risultato o qualsiasi altro nome si voglia dare e voglio descriverlo

01:33.208 --> 01:37.240
con una stringa. Quindi lo imposterò

01:37.240 --> 01:41.122
come tipo stringa. Ora, la mia idea è che posso

01:41.122 --> 01:45.625
chiamare combine con due numeri e, ad esempio, passare

01:45.625 --> 01:50.625
una stringa di "as-number" e sta a voi decidere quale identificatore

01:50.630 --> 01:55.630
usare. Laggiù potremmo avere "as-text", ma

01:56.260 --> 01:59.357
poi potremmo avere un'altra combinazione qui

02:02.910 --> 02:07.310
CombinedStringAges, in cui passo due stringhe ma voglio comunque

02:07.310 --> 02:10.030
restituire questo "as-number" e questo

02:10.030 --> 02:13.540
sarebbe un caso in cui il terzo parametro può essere

02:13.540 --> 02:17.050
utile per forzare una conversione, perché se passo

02:17.050 --> 02:19.950
due stringhe qui normalmente lo faremmo in

02:19.950 --> 02:24.730
questo ramo else e lo concateneremmo, ma potrei voler restituire questo

02:24.730 --> 02:29.639
come un numero, in modo da poter anche registrare gli agenti delle stringhe

02:29.639 --> 02:34.030
combinate qui. Ora dobbiamo tenere conto di questi identificatori

02:34.030 --> 02:37.512
nella nostra funzione, includendo resultConversion nei nostri

02:37.512 --> 02:41.730
controlli if. Ora la domanda è cosa vogliamo fare

02:41.730 --> 02:45.700
esattamente: vogliamo assicurarci di poter forzare queste

02:45.700 --> 02:49.930
due stringhe a essere sommate come numeri o vogliamo forzare il risultato,

02:49.930 --> 02:54.012
indipendentemente dal fatto che si tratti di un calcolo matematico

02:54.012 --> 02:58.695
o di una concatenazione di stringhe, a essere convertito in un testo o in

02:58.695 --> 03:03.039
un numero. Se vogliamo forzare una conversione,

03:03.039 --> 03:05.960
potremmo aggiungere il controllo if qui

03:05.960 --> 03:10.382
e verificare se la conversione del risultato è uguale a "as-number"

03:10.382 --> 03:15.340
e, in tal caso, voglio restituire il risultato con un più davanti, che

03:15.340 --> 03:18.826
lo converte in un numero; l'alternativa sarebbe

03:18.826 --> 03:24.420
parseFloat, per esempio, ma in questo caso sceglierò solo il più, dato che è un po'

03:24.420 --> 03:29.420
più corto; inoltre, voglio restituire il risultato toString per forzare

03:30.156 --> 03:33.593
l'output come stringa.

03:34.570 --> 03:38.883
Quindi ora eseguiamo il calcolo in base al tipo reale che otteniamo, ma poi

03:38.883 --> 03:42.300
convertiamo in risultato: questo è un modo per farlo e se

03:42.300 --> 03:46.360
lo salviamo e poi compiliamo questo file, vediamo che questo è il risultato

03:47.470 --> 03:51.020
che ottengo e otteniamo questo output, ad esempio, per la nostra

03:51.020 --> 03:54.759
combinazione di stringhe qui, perché, come ho detto, la combinazione

03:54.759 --> 03:58.520
stessa, il calcolo per così dire, viene eseguito in base al tipo

03:58.520 --> 04:02.530
che inseriamo, che qui è stringa, quindi lo concateniamo e poi lo convertiamo

04:02.530 --> 04:05.860
in risultato.

04:05.860 --> 04:09.593
La logica alternativa sarebbe quella di controllare

04:09.593 --> 04:14.320
il tipo qui ed eseguire un'operazione diversa in base al tipo di ritorno

04:14.320 --> 04:19.180
che stiamo specificando qui. Potremmo quindi commentare questo

04:19.180 --> 04:22.600
punto e dire invece che se il tipo di input uno è number

04:22.600 --> 04:26.230
e il tipo di input due è number, o se resultConversion

04:27.890 --> 04:30.865
è uguale a "as-number", allora voglio combinare

04:30.865 --> 04:35.865
i valori in questo modo e ora, per evitare questo errore, forzo la conversione

04:35.930 --> 04:38.794
in numeri aggiungendo un più davanti a ogni

04:38.794 --> 04:42.970
input, in modo che ogni input sia convertito in un numero e sia

04:42.970 --> 04:45.490
garantito che sia un numero prima di

04:45.490 --> 04:48.490
combinarli.

04:48.490 --> 04:51.130
Nota a margine: se si passano stringhe che

04:51.130 --> 04:54.610
non possono essere convertite in numeri, ad esempio qualcosa

04:54.610 --> 04:58.800
come Max, si otterrà come risultato un NaN, Not a Number.

04:58.800 --> 05:00.280
Nel caso contrario,

05:00.280 --> 05:03.170
per non avere "as-number" o semplicemente

05:03.170 --> 05:07.976
per non avere input numerici, lo inseriamo in questo blocco qui

05:07.976 --> 05:12.390
e ora, se restituisco di nuovo il risultato qui e poi lo salviamo

05:12.390 --> 05:16.230
e ricompiliamo, vedremo un output diverso nella nostra

05:16.230 --> 05:20.230
pagina. Ora otteniamo 56 in queste due righe,

05:20.230 --> 05:22.945
perché non stiamo convertendo il risultato, quindi

05:22.945 --> 05:26.300
non stiamo convertendo la stringa concatenata per questa riga,

05:26.300 --> 05:29.070
ma stiamo effettuando la conversione prima di combinare

05:29.070 --> 05:31.970
i due valori. Sta a voi decidere quale

05:31.970 --> 05:34.760
logica implementare. In realtà voglio dare un'occhiata

05:34.760 --> 05:37.551
più da vicino al concetto di tipi letterali che ho descritto

05:37.551 --> 05:41.180
all'inizio di questa lezione. Sto passando un "as-number" e un

05:41.180 --> 05:44.157
"as-text" e i problemi di un'azienda che in questo momento,

05:44.157 --> 05:47.600
come sviluppatore, deve memorizzare questi valori.

05:47.600 --> 05:50.450
Dobbiamo assicurarci di non sbagliare tipo.

05:50.450 --> 05:54.010
Ora potremmo usare un numero elettronico per migliorare la situazione,

05:54.010 --> 05:57.754
ma se abbiamo solo due valori, "as-testo" o "as-numero", forse la ricerca

05:57.754 --> 06:00.940
di un tipo letterale potrebbe essere un'opzione.

06:00.940 --> 06:04.173
Potremmo dire "questa non dovrebbe essere una

06:04.173 --> 06:09.173
stringa qualsiasi, dovrebbe essere "as-number" o "as-text"", quindi

06:09.870 --> 06:12.090
usiamo un tipo union combinato

06:12.090 --> 06:15.573
con tipi letterali. I tipi letterali sono i tipi

06:15.573 --> 06:17.987
che si basano sui tipi fondamentali stringa,

06:17.987 --> 06:20.933
numero e così via, ma poi hanno una versione specifica

06:20.933 --> 06:24.750
del tipo. Quindi, qui, permettiamo specificamente

06:24.750 --> 06:27.960
queste due stringhe, non qualsiasi stringa, solo queste due stringhe.

06:27.960 --> 06:31.460
Quindi vogliamo una stringa per la conversione dei risultati, ma deve essere

06:31.460 --> 06:34.207
uno di questi due valori. Qualsiasi altro valore di

06:34.207 --> 06:37.560
stringa non sarà ammesso, quindi questa è l'idea che sta alla base

06:37.560 --> 06:40.747
di un tipo letterale e spesso lo si usa nel contesto del tipo

06:40.747 --> 06:43.700
union, perché non si vuole consentire solo un valore esatto,

06:43.700 --> 06:46.500
ma si può inserire un codice rigido nel codice, ma si

06:46.500 --> 06:49.544
vogliono avere due o più valori possibili.

06:49.544 --> 06:52.580
In questo caso abbiamo due possibili valori.

06:52.580 --> 06:56.240
Quindi ora abbiamo la garanzia di ottenere una conversione

06:56.240 --> 07:00.288
dei risultati che sia "as-numbe" o "as-text" e per esempio qui,

07:00.288 --> 07:03.800
se ora provo a confrontare questo con as-numbe perché ho

07:03.800 --> 07:07.256
un errore di battitura qui, il gruppo types è in grado di

07:07.256 --> 07:10.360
dirmelo qui nell'IDE e ovviamente tutto ciò che salviamo

07:10.360 --> 07:15.360
e compiliamo qui nel terminale, perché sa che as-numbe senza una r alla fine non

07:15.830 --> 07:18.940
sarà mai un valore valido per resultConversion perché

07:18.940 --> 07:24.563
ho impostato questo tipo di unione con questi tipi letterali.

07:25.550 --> 07:27.593
In questo modo abbiamo ottenuto un'ulteriore

07:27.593 --> 07:31.590
sicurezza di tipo e ci assicuriamo di non poterlo usare in modo errato.

07:31.590 --> 07:34.720
Lo stesso vale per il passaggio di un valore. Se abbiamo un errore di battitura

07:34.720 --> 07:38.747
qui, otteniamo un errore solo se usiamo "as-number" o "as-text",

07:38.747 --> 07:41.947
possiamo compilare questo come lo vedete e ora compilare

07:41.947 --> 07:45.470
questo, questo funziona e otteniamo lo stesso output di

07:45.470 --> 07:49.562
prima. Si tratta quindi di tipi letterali particolarmente

07:49.562 --> 07:52.193
utili se usati insieme ai tipi union.
