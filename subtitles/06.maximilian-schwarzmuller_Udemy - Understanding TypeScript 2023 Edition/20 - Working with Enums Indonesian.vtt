WEBVTT

00:02.230 --> 00:04.860
Instruktur: Secara longgar terkait dengan ide

00:04.860 --> 00:09.760
Tuple adalah ide untuk memiliki beberapa pengidentifikasi spesifik, konstanta global

00:09.760 --> 00:12.710
yang mungkin Anda kerjakan di aplikasi Anda, yang ingin

00:12.710 --> 00:15.020
Anda wakili sebagai angka, tetapi Anda ingin

00:15.020 --> 00:18.530
menetapkan label yang dapat dibaca manusia.

00:18.530 --> 00:20.500
Dan untuk itu, Anda memiliki tipe Enum.

00:20.500 --> 00:23.800
Sekali lagi, hal itu memang ada dalam beberapa bahasa pemrograman tingkat atas.

00:23.800 --> 00:25.780
JavaScript tidak mengetahuinya.

00:25.780 --> 00:26.613
Kelihatannya seperti ini.

00:26.613 --> 00:28.110
Ini adalah cara Anda membuat enum.

00:28.110 --> 00:30.540
Anda menggunakan kata kunci enum, yang hanya ada di

00:30.540 --> 00:33.060
dunia TypeScript, bukan di JavaScript, di sana setelah

00:33.060 --> 00:34.840
Anda memiliki kurung kurawal, dan kemudian

00:34.840 --> 00:36.810
pengidentifikasi Anda.

00:36.810 --> 00:39.141
Dan tipe ini, yang ditambahkan oleh

00:39.141 --> 00:42.030
TypeScript memberi Anda daftar enumerasi.

00:42.030 --> 00:45.070
Jadi label-label ini pada akhirnya, hanya diterjemahkan ke angka

00:45.070 --> 00:48.580
mulai dari nol, di mana Anda memiliki label yang dapat dibaca manusia yang dapat

00:48.580 --> 00:50.133
Anda gunakan dalam kode Anda.

00:51.310 --> 00:53.500
Untuk menunjukkan contohnya, mari kita kembali

00:53.500 --> 00:55.620
ke sini ke orang kita dengan perannya.

00:55.620 --> 00:58.010
Saya akan menyalin kode itu dan kemudian mengomentarinya

00:58.010 --> 00:59.710
karena saya akan mengubahnya sedikit.

00:59.710 --> 01:01.600
Dan kemudian di sini, saya akan menyingkirkan

01:01.600 --> 01:05.380
penugasan tipe eksplisit itu dan kembali ke inferensi, karena saya sekarang

01:05.380 --> 01:07.150
akan mengubah peran.

01:07.150 --> 01:10.330
Dan sekarang katakanlah kita ingin memiliki admin, penulis,

01:10.330 --> 01:12.350
dan mungkin pengguna hanya baca.

01:12.350 --> 01:14.750
Admin harus memiliki ID nol, pengguna

01:14.750 --> 01:18.660
hanya baca memiliki satu, penulis memiliki dua.

01:18.660 --> 01:21.160
Sekarang tentu saja, kita bisa menyimpannya persis seperti

01:21.160 --> 01:22.550
ini dengan angka-angka ini.

01:22.550 --> 01:24.830
Salah satu kelemahannya adalah bahwa kita selalu dapat

01:24.830 --> 01:26.670
menambahkan angka yang mungkin kita tidak

01:26.670 --> 01:30.320
memiliki peran dan jika kita kemudian dalam kode kita, cobalah untuk mengekstrak peran

01:30.320 --> 01:33.392
dan menggunakan if check yang mungkin menyebabkan kesalahan.

01:33.392 --> 01:37.160
Dan selain itu, kami, sebagai pengembang mengalami kesulitan untuk memahami

01:37.160 --> 01:39.690
peran apa yang dimiliki pengguna ini.

01:39.690 --> 01:41.310
Apakah kepada pengarangnya?

01:41.310 --> 01:43.020
Atau, apakah itu pembacaan pada pengguna?

01:43.020 --> 01:46.140
Anda mungkin melupakan hal ini setelah membuat jeda yang lebih lama, ketika

01:46.140 --> 01:48.810
bekerja dalam tim yang lebih besar, dan sebagainya.

01:48.810 --> 01:50.540
Jadi sebagai pengembang, Anda

01:50.540 --> 01:54.310
mungkin menginginkan pengidentifikasi yang dapat dibaca manusia,

01:54.310 --> 01:58.630
sesuatu seperti ADMIN, dan READ ONLY USER, sesuatu seperti itu.

01:58.630 --> 02:00.240
Sekarang, tentu saja, kita bisa menggunakan

02:00.240 --> 02:02.880
itu, kita bisa bekerja dengan nilai string tersebut.

02:02.880 --> 02:06.100
Masalahnya adalah jika kita kemudian membutuhkan pemeriksaan

02:06.100 --> 02:11.100
if, kita memeriksa apakah peran orang sama dengan, apakah READ_ONLY_USER?

02:12.260 --> 02:13.500
Atau apakah itu satu kata?

02:13.500 --> 02:15.380
Apakah dengan garis bawah?

02:15.380 --> 02:17.440
Anda lihat, maka kita harus mengingat bagaimana

02:17.440 --> 02:19.020
kita menulis string ini, teks persis

02:19.020 --> 02:20.970
mana yang kita miliki di sana.

02:20.970 --> 02:24.330
Karena string ini dengan tanda hubung di antara kata-katanya

02:24.330 --> 02:27.430
tentu saja, tidak sama dengan string ini.

02:27.430 --> 02:29.973
Jadi di sini, kita tidak akan pernah membuatnya

02:31.150 --> 02:36.120
di sana, hanya dibaca jika Anda mencoba untuk mengkompilasi dan mencetaknya, karena,

02:36.120 --> 02:39.170
yah, pemeriksaannya tidak menghasilkan true.

02:39.170 --> 02:42.150
Kita tidak memilikinya sebagai peran pada orang, oleh karena itu, kita tidak

02:42.150 --> 02:43.930
mendapatkan output di sini di konsol.

02:43.930 --> 02:47.290
Jadi, pengidentifikasi string, juga memiliki kelemahan.

02:47.290 --> 02:50.340
Sekarang untuk skenario seperti itu, cukup umum dalam JavaScript

02:50.340 --> 02:52.340
untuk mendefinisikan konstanta global.

02:52.340 --> 02:55.580
Misalnya, admin, yang kemudian memegang nilai

02:55.580 --> 03:00.060
tertentu seperti angka atau string, keduanya mungkin.

03:00.060 --> 03:01.700
Angka, tentu saja dapat menghemat

03:01.700 --> 03:04.370
beberapa kode dan bit ekstra dalam memori.

03:04.370 --> 03:09.370
Dan di sana kita mungkin memiliki ADMIN, READ_ONLY dan AUTHOR seperti ini

03:09.390 --> 03:10.870
dan di bawah sana, kita

03:10.870 --> 03:13.750
hanya perlu menggunakan peran itu.

03:13.750 --> 03:16.460
Sekarang keuntungannya adalah kita dapat menggunakan ini di mana-mana

03:16.460 --> 03:17.343
dalam kode kita.

03:18.230 --> 03:22.600
Dan oleh karena itu di sini misalnya, jika saya menjalankan kode ini, jika saya mengkompilasinya

03:22.600 --> 03:23.680
dan kemudian kita biarkan

03:25.260 --> 03:28.570
ini dimuat ulang, kita lihat sebagai admin di sini, jadi ini berfungsi

03:28.570 --> 03:31.520
dan ini adalah pola umum dalam JavaScript.

03:31.520 --> 03:34.190
Kelemahannya adalah bahwa sekarang lagi-lagi, peran disimpulkan

03:34.190 --> 03:37.290
hanya sebagai angka, jadi kita bisa menyimpan angka apa pun di sana

03:37.290 --> 03:39.630
bahkan angka yang tidak kita dukung.

03:39.630 --> 03:42.450
Dan sebagai tambahan, kita harus mendefinisikan semua konstanta

03:42.450 --> 03:44.060
ini, kita harus mengelolanya.

03:44.060 --> 03:45.920
Di sinilah enum bisa menghemat pekerjaan kita.

03:45.920 --> 03:48.730
Hal ini tidak masalah, tetapi enum membuatnya lebih mudah.

03:48.730 --> 03:50.970
Kita membuat enum dengan keyword enum, kita

03:50.970 --> 03:54.250
bisa menamainya Role, konvensi yang berlaku adalah dimulai

03:54.250 --> 03:55.550
dengan karakter huruf besar

03:55.550 --> 03:58.620
karena enum juga merupakan custom type.

03:58.620 --> 04:01.760
Ini adalah tipe kustom pertama Anda, kita akan menulis lebih banyak lagi

04:01.760 --> 04:03.860
dalam kursus ini, ini adalah yang pertama.

04:03.860 --> 04:06.560
Dan kemudian setelah nama tipe yang ingin Anda tetapkan

04:06.560 --> 04:09.520
ke enum ini, Anda menambahkan kurung kurawal, seperti itu,

04:09.520 --> 04:14.040
tidak ada titik dua, tidak ada tanda sama dengan, hanya kurung kurawal setelah namanya.

04:14.040 --> 04:15.800
Kemudian tanda titik koma.

04:15.800 --> 04:19.433
Dan sekarang di sini, Anda dapat menetapkan nilai Anda

04:20.650 --> 04:21.973
seperti admin, read

04:22.950 --> 04:24.300
only, dan author.

04:24.300 --> 04:28.180
Dan di balik layar, di sini menerima angka nol,

04:28.180 --> 04:31.780
di sini angka satu, di sini angka dua.

04:31.780 --> 04:34.650
Dan kemudian di sini, Anda bisa mengakses Role. ADMIN, seperti pada

04:34.650 --> 04:37.840
objek, Anda mengakses pengenal Anda.

04:37.840 --> 04:40.380
Dan Anda dapat menggunakannya di tempat lain dalam kode

04:40.380 --> 04:43.890
Anda juga, di sini kita dapat memeriksa apakah perannya adalah AUTHOR, dan kemudian

04:43.890 --> 04:46.710
mencetak author dan tentu saja, kita tidak akan melihatnya jika

04:46.710 --> 04:50.630
saya menjalankannya sekarang karena kita menetapkan peran ADMIN di sini.

04:50.630 --> 04:53.333
Tetapi, yang paling penting adalah bahwa kita melakukan

04:53.333 --> 04:57.490
semua itu dengan bantuan enum, yang memberikan label pada angka.

04:57.490 --> 04:59.210
Jika kita melihatnya dalam JavaScript.

04:59.210 --> 05:02.830
Jadi dalam kode yang dikompilasi, kita melihat ini adalah bagaimana itu dibangun kembali.

05:02.830 --> 05:05.080
Pada akhirnya, dibangun kembali dengan if di sini.

05:05.080 --> 05:07.940
Jadi fungsi yang mengeksekusi dirinya sendiri.

05:07.940 --> 05:11.770
Dan Role di sini hanya dikelola sebagai objek pada akhirnya, yang

05:11.770 --> 05:14.550
memiliki properti admin properti hanya baca dan

05:14.550 --> 05:17.330
properti AUTHOR, di mana kita kemudian menyimpan

05:17.330 --> 05:19.970
nilai angka kita di sini, bisa dibilang.

05:19.970 --> 05:21.960
Jadi ini sedikit lebih kompleks dari itu, tetapi

05:21.960 --> 05:24.210
itulah yang pada akhirnya TypeScript lakukan di sini

05:24.210 --> 05:26.700
untuk mereplikasi konstruksi enum ini dalam kode JavaScript,

05:26.700 --> 05:28.560
saat mengkompilasi kode.

05:28.560 --> 05:30.700
Di sini sebagai pengembang, kita hanya memiliki

05:30.700 --> 05:32.680
angka-angka yang dibuat dengan mudah ini.

05:32.680 --> 05:34.290
Jika Anda mengarahkan kursor ke atasnya,

05:34.290 --> 05:36.520
Anda akan melihat nomor yang akan kami simpan di sana dan Anda

05:36.520 --> 05:39.883
dapat menggunakan angka-angka ini di sini dengan cara yang dapat dibaca manusia.

05:40.750 --> 05:42.840
Sekarang untuk enum, Anda juga tidak

05:42.840 --> 05:44.790
dibatasi pada perilaku default.

05:44.790 --> 05:47.470
Katakanlah untuk beberapa alasan, Anda tidak ingin memulai

05:47.470 --> 05:50.533
dengan nol sebagai angka awal, maka Anda dapat menambahkan tanda

05:50.533 --> 05:54.080
sama dengan di sini setelah pengidentifikasi Anda dan memasukkan nomor

05:54.080 --> 05:56.610
lain dan sekarang admin ditugaskan ke nomor lima dan

05:56.610 --> 05:59.610
pengidentifikasi lain setelah pengidentifikasi di mana Anda

05:59.610 --> 06:02.150
menetapkan nilainya, mengambilnya, dan hanya meningkatkan

06:02.150 --> 06:04.580
nilai awal ini.

06:04.580 --> 06:08.140
Jadi, sekarang kita memiliki baik, enam, tujuh, bukannya nol, satu, dua.

06:08.140 --> 06:10.642
Tentu saja, Anda juga bisa menetapkan nilai Anda sendiri

06:10.642 --> 06:14.820
ke semua pengidentifikasi ini, jika Anda memerlukan angka Anda sendiri.

06:14.820 --> 06:17.070
Anda juga tidak terbatas pada angka, Anda juga

06:17.070 --> 06:19.390
dapat menggunakan teks di sini, atau bahkan mencampurnya

06:19.390 --> 06:21.950
seperti yang saya lakukan di sini, apa pun yang ada di

06:21.950 --> 06:24.900
sana, tetapi seringkali default angka kenaikan yang dimulai

06:24.900 --> 06:28.530
dari nol adalah apa yang Anda inginkan, tetapi jika Anda membutuhkan perilaku

06:28.530 --> 06:31.530
yang berbeda, jika Anda ingin menggunakan string di sini, dan

06:31.530 --> 06:34.850
kemudian angka di sini, dan di sini angka juga atau mungkin string angka,

06:34.850 --> 06:37.890
maka Anda benar-benar dapat melakukannya, keuntungannya adalah,

06:37.890 --> 06:40.880
Anda mendefinisikannya di sana, dan kemudian setelah itu,

06:40.880 --> 06:48.270
Anda selalu hanya merujuk ke tipe Role Anda ke tipe khusus yang Anda buat, ke enum khusus yang Anda buat ini.

06:48.270 --> 06:50.320
Dan Anda menggunakan itu dalam pemeriksaan

06:50.320 --> 06:52.970
if dan tugas jenis Anda, dan Anda baik-baik saja.

06:52.970 --> 06:56.090
Itulah kekuatan enum dan ini adalah konstruksi yang bagus kapanpun

06:56.090 --> 06:59.420
Anda membutuhkan pengidentifikasi yang dapat dibaca manusia dan

06:59.420 --> 07:03.173
memiliki beberapa nilai yang dipetakan di belakang layar.
