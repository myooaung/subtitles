WEBVTT

00:02.350 --> 00:04.720
-: Ve modüller için bu kadar.

00:04.720 --> 00:08.850
Şimdi modülleri kullanmak çok kullanışlı ve önemli bir özelliktir çünkü

00:08.850 --> 00:11.130
daha sürdürülebilir ve yönetilebilir kod

00:11.130 --> 00:14.550
yazmanıza olanak tanır. Hepsini tek bir dosyada toplamak

00:14.550 --> 00:16.360
tam bir karmaşa ve gerçekten küçük

00:16.360 --> 00:19.360
projeler dışında hiçbir şey için bir seçenek değil.

00:19.360 --> 00:22.350
İsim alanlarını veya ES modüllerini kullanmak

00:22.350 --> 00:24.710
çok daha iyi bir alternatiftir.

00:24.710 --> 00:27.620
Çünkü her dosyanın kendi başına nispeten küçük olmasını

00:27.620 --> 00:30.780
ve bu nedenle yönetilebilir kalmasını sağlar.

00:30.780 --> 00:33.470
Ve yine de, sonunda sahip olmak istediğiniz

00:33.470 --> 00:36.690
o büyük uygulamanın tamamına sahip olursunuz.

00:36.690 --> 00:38.580
Şimdi, bu iki yaklaşım söz

00:38.580 --> 00:42.883
konusu olduğunda, İsim alanları ve ES modülleri, açık öneri

00:42.883 --> 00:46.520
ES modülleridir, çünkü ekstra tip güvenliği elde

00:46.520 --> 00:48.910
edersiniz ve her dosyanın ne istediğini

00:48.910 --> 00:52.210
açıkça belirtmesini sağlarsınız.

00:52.210 --> 00:54.270
İsim alanlarıyla, bir dosyanın başka

00:54.270 --> 00:56.280
bir dosyanın da ihtiyaç duyduğu bir

00:56.280 --> 00:58.350
şeyi içe aktarması yeterliydi.

00:58.350 --> 00:59.970
Bunun dezavantajı, eğer

00:59.970 --> 01:02.230
bu şeyi içe aktaran bir dosya kaldırılırsa,

01:02.230 --> 01:05.640
diğer dosya da siz fark etmeden bozulur.

01:05.640 --> 01:08.774
En azından siz kodu çalıştırmadan önce fark etmezsiniz.

01:08.774 --> 01:11.340
Bu nedenle ES modüllerini kullanın.

01:11.340 --> 01:14.250
Daha küçük projelerde ad alanlarını kullanın veya

01:14.250 --> 01:18.100
herhangi bir nedenle ES modüllerini kullanamıyorsanız ve bu tür

01:18.100 --> 01:19.970
modülleri çevirecek başka bir paketleyici

01:19.970 --> 01:24.290
kullanamıyorsanız. Modül olmayan kod için, tüm

01:24.290 --> 01:26.360
işler ve tüm tarayıcılar.

01:26.360 --> 01:30.070
Ancak bunun dışında gerçekten modüller, ES modülleri kullanın.

01:30.070 --> 01:31.748
Ve az önce söylediğim şey önemlidir.

01:31.748 --> 01:34.828
Buradaki modüller, şu anda kullandığımız şekliyle, yalnızca

01:34.828 --> 01:37.620
modern tarayıcılarda çalışmaktadır.

01:37.620 --> 01:39.670
Çünkü temelde tüm bu dosyaları içe aktarmak

01:39.670 --> 01:42.640
için tarayıcıya güveniyoruz. Değil mi?

01:42.640 --> 01:44.675
Şimdi, elbette typescript ile tüm

01:44.675 --> 01:48.940
tarayıcılarda da çalışan uygulamalar oluşturmak istiyoruz.

01:48.940 --> 01:52.090
Örneğin Internet Explorer 9.

01:52.090 --> 01:54.130
Orada bu desteklenmeyecektir.

01:54.130 --> 01:55.730
Bu Sözdizimi, orada desteklenmemektedir.

01:55.730 --> 01:57.410
Bu yüzden uygulama orada çalışmaz.

01:57.410 --> 01:59.160
Orada desteklenmeyen başka özellikler

01:59.160 --> 02:01.280
de kullanıyor olabiliriz, ancak esas olarak

02:01.280 --> 02:03.840
buradaki tüm tarayıcılarda desteklenmiyor.

02:03.840 --> 02:06.250
Dolayısıyla, bunun tüm tarayıcılarda çalışmasını sağlamak için

02:06.250 --> 02:09.283
bir paketleme aracı kullanabiliriz. Örneğin Webpack kullanabiliriz.

02:09.283 --> 02:12.431
Bunları tek bir JavaScript dosyasında bir araya getirmek için.

02:12.431 --> 02:15.810
Böylece, geliştirme sırasında bu çoklu dosya, güçlü yazım

02:15.810 --> 02:19.060
deneyimine sahip oluruz, ancak kodumuzu gönderdiğimizde

02:19.060 --> 02:21.310
aslında yalnızca bir dosyamız olur.

02:21.310 --> 02:23.600
Ve şimdi burada sahip olduğumuz tüm bu dosyalar

02:23.600 --> 02:25.676
yerine tek bir dosya göndermenin avantajı,

02:25.676 --> 02:28.177
tarayıcının bu kadar çok dosyayı indirmek zorunda

02:28.177 --> 02:31.181
kalmamasını sağlamamızdır.

02:31.181 --> 02:33.630
Çünkü indirilmesi gereken her dosya fazladan

02:33.630 --> 02:37.010
bir gidiş-dönüş demektir. Geliştirme araçlarının ağ sekmesinde

02:37.010 --> 02:38.510
aslında bunu görebilirsiniz.

02:38.510 --> 02:40.650
Bu şelale grafiğini gördüğünüz alan

02:40.650 --> 02:42.230
ve her bloğun başında bu küçük

02:42.230 --> 02:44.520
beyaz kutuyu görüyorsunuz.

02:44.520 --> 02:46.380
Bu, temel olarak HDP talebini ayarlamak

02:46.380 --> 02:48.506
için gereken kurulum süresidir.

02:48.506 --> 02:51.807
Yani, indirdiğimiz dosyalar sizin de anlayabileceğiniz

02:51.807 --> 02:54.700
gibi çok küçük olsa da, bu yine de biraz zaman alıyor

02:54.700 --> 02:56.900
çünkü her HDP isteği için tüm gereksiz

02:56.900 --> 02:59.100
ekstra kurulumlar yapılıyor.

02:59.100 --> 03:02.330
Bu nedenle, tarayıcı desteğinden bağımsız olarak daha az istekte

03:02.330 --> 03:04.640
bulunmak her halükarda iyi bir fikirdir.

03:04.640 --> 03:08.370
Bu iki nedenden dolayı, tarayıcı desteği ve daha az istek, bir

03:08.370 --> 03:11.000
sonraki kurs bölümünde Webpack ile paketlemeye

03:11.000 --> 03:12.453
bir göz atacağız.
