WEBVTT

00:02.150 --> 00:03.290
Eğitmen: Kalıtımı

00:03.290 --> 00:05.890
arayüzlerde de uygulayabilirsiniz.

00:05.890 --> 00:10.890
Diyelim ki Named adında başka bir arayüzümüz var ve bu arayüz aslında

00:11.100 --> 00:13.600
bir name özelliğine sahip olduğumuzdan

00:13.600 --> 00:16.420
emin olmamızı sağlıyor.

00:16.420 --> 00:18.510
Şimdi Person'da Greetable ve Named'i

00:18.510 --> 00:20.950
uygulayarak hem bir greet metoduna hem

00:20.950 --> 00:24.110
de bir isme sahip olmaya zorlayabiliriz.

00:24.110 --> 00:25.820
Bu yapabileceğimiz bir şey.

00:25.820 --> 00:30.200
Ya da Greetable'ın selamlanabilir nesnelerin her zaman bir isme sahip olması

00:30.200 --> 00:31.810
gerektiğini düşündüğünü biliyorsak,

00:31.810 --> 00:34.500
bu Greetable arayüzünün aslında Named arayüzünü

00:34.500 --> 00:36.970
genişlettiğinden emin olabiliriz, böylece

00:36.970 --> 00:40.120
birlikte, Greetable'ı temel alan her nesneyi bir selamlama

00:40.120 --> 00:43.460
yöntemine ve aynı zamanda bir isme sahip olmaya zorlayan yeni

00:43.460 --> 00:46.150
bir arayüz oluştururlar.

00:46.150 --> 00:48.840
Bunu yapmak için de buraya, arayüze

00:48.840 --> 00:52.700
extends ekleyebiliriz ve Named'i genişletiriz.

00:52.700 --> 00:55.760
Şimdi, dediğim gibi, bu yeni bir arayüz oluşturuyor, sonuçta

00:55.760 --> 00:58.330
bizi bir greet metoduna sahip olmaya zorlayan bir

00:58.330 --> 01:00.760
arayüz, ama sadece bu değil, aynı zamanda bizi

01:00.760 --> 01:03.140
Named arayüzünün tanımladığı her şeye sahip

01:03.140 --> 01:04.910
olmaya zorluyor.

01:04.910 --> 01:07.150
Bu durumda, bir ad özelliği.

01:07.150 --> 01:09.450
Dolayısıyla, burada name özelliğini kaldırırsam

01:09.450 --> 01:12.120
zaten bir hata alırım, çünkü bu sınıf artık Greetable

01:12.120 --> 01:14.860
arayüzünü yanlış bir şekilde uygulamaktadır, çünkü

01:14.860 --> 01:17.600
name özelliği eksiktir.

01:17.600 --> 01:20.900
Böylece arayüzleri de bu şekilde birleştirebiliriz.

01:20.900 --> 01:23.410
Neden bir arayüzü bu şekilde bölelim ki?

01:23.410 --> 01:25.600
Belki de bazı nesnelerde, onları yalnızca bir

01:25.600 --> 01:27.810
isme sahip olmaya zorlamak ve bir selamlama yöntemine

01:27.810 --> 01:31.120
sahip olmamalarını istediğiniz bir uygulamanız vardır, oysa diğer

01:31.120 --> 01:34.630
nesnelerde hem selamlama hem de isme ihtiyacınız vardır.

01:34.630 --> 01:36.830
Bu bölünme ile bu mümkün.

01:36.830 --> 01:40.630
Bazı nesneler veya bazı sınıflar sadece Named'i uygulayabilir ve

01:40.630 --> 01:42.590
diğerleri Greetable'ı uygulayabilir

01:42.590 --> 01:45.990
ve hem greet hem de bir isme sahip olmaya zorlanır.

01:45.990 --> 01:48.490
Dolayısıyla arayüzleri genişletmek mümkündür.

01:48.490 --> 01:50.880
Ve orada birden fazla uzatabilirsiniz.

01:50.880 --> 01:53.380
Böylece birden fazla arayüzü tek bir arayüzde

01:53.380 --> 01:55.060
birleştirebilirsiniz.

01:55.060 --> 01:58.570
Elimizde olsaydı başka bir arayüzü birleştirebilirdik.

01:58.570 --> 02:00.860
Virgülle ayırmanız yeterlidir.

02:00.860 --> 02:03.570
Unutmayın ki bir sınıf için bu mümkün değildi.

02:03.570 --> 02:05.710
Kalıtımda sınıfları kullandığınızda, yalnızca

02:05.710 --> 02:07.920
bir sınıftan miras alabilirsiniz.

02:07.920 --> 02:10.600
Birden fazla sınıftan miras alamazsınız.

02:10.600 --> 02:12.490
Arayüzler için bu farklıdır.

02:12.490 --> 02:14.760
Arayüzler için, gerçekten de birden fazla

02:14.760 --> 02:16.920
arayüzden miras alabilirsiniz, çünkü

02:16.920 --> 02:18.920
sonuçta hepsi bir araya geliyor ve

02:18.920 --> 02:21.430
göreceğiniz gibi aslında JavaScript'e çevrilmemiş

02:21.430 --> 02:24.800
olan bu saf TypeScript özelliğinde, JavaScript sınıfları

02:24.800 --> 02:27.080
için belirlenen kuralları çiğneyebilir

02:27.080 --> 02:31.733
ve birden fazla arayüzü genişletebiliriz.
