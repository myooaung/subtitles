WEBVTT

00:02.273 --> 00:05.100
Instructeur: We hebben veel decoratoren bekeken,

00:05.100 --> 00:06.190
hoe je ermee werkt,

00:06.190 --> 00:07.340
hoe je ze kunt configureren,

00:07.340 --> 00:09.940
hoe je er dingen mee kunt doen, wat je ermee kunt

00:09.940 --> 00:11.367
doen.

00:11.367 --> 00:15.260
Dit toont hopelijk de complexiteit maar ook de kracht van decoratoren

00:15.260 --> 00:17.340
en hoe je erover kunt denken, hoe je

00:17.340 --> 00:18.898
ze kunt gebruiken.

00:18.898 --> 00:22.370
Je kunt niet alleen je eigen decorators maken, er

00:22.370 --> 00:24.208
is ook een rijk ecosysteem

00:24.208 --> 00:28.590
van pakketten en frameworks die op decorators vertrouwen.

00:28.590 --> 00:30.670
Bijvoorbeeld, klasse validator.

00:30.670 --> 00:32.789
Als je zoekt naar "ts class validator,"

00:32.789 --> 00:35.480
vind je een pakket dat in feite een uitgebreidere

00:35.480 --> 00:37.960
implementatie heeft van onze eigen aangepaste

00:37.960 --> 00:41.680
validatielogica waaraan we gewerkt hebben.

00:41.680 --> 00:44.140
Dit pakket kan worden toegevoegd aan elk project

00:44.140 --> 00:45.960
waaraan je werkt, en dan kun je gewoon

00:45.960 --> 00:48.030
een stel decoratoren of decoratorfabrieken

00:48.030 --> 00:49.930
importeren, zoals je kunt zien, omdat

00:49.930 --> 00:51.660
we ze hier uitvoeren.

00:51.660 --> 00:53.350
Voeg ze toe aan je eigenschappen,

00:53.350 --> 00:55.650
met of zonder wat extra configuratie, afhankelijk

00:55.650 --> 00:57.530
van de validator die het is, en achter

00:57.530 --> 00:59.163
de schermen zal dit zo'n register

00:59.163 --> 01:01.530
beheren, zou je kunnen zeggen, zo'n configuratie-object

01:01.530 --> 01:03.509
op het einde, dat je validator setup opslaat

01:03.509 --> 01:08.950
voor de verschillende eigenschappen in je verschillende klassen.

01:08.950 --> 01:11.810
En dan krijg je een validatiemethode, die je ook importeert

01:11.810 --> 01:14.150
uit het pakket, die je kunt uitvoeren en waaraan

01:14.150 --> 01:16.656
je je object kunt doorgeven, om alle validatielogica

01:16.656 --> 01:20.540
toe te passen die je in de klasse hebt ingesteld.

01:20.540 --> 01:22.840
Dus het doet eigenlijk wat we net deden,

01:22.840 --> 01:26.000
alleen met meer validators, en met al het zware

01:26.000 --> 01:27.830
werk voor je gedaan.

01:27.830 --> 01:29.170
Maar natuurlijk helpt het om te

01:29.170 --> 01:30.630
begrijpen hoe dit in het algemeen

01:30.630 --> 01:32.370
werkt, aangezien we het hier zelf hebben

01:32.370 --> 01:34.143
gebouwd, in een meer naïeve versie.

01:35.010 --> 01:36.490
Nu hebben we naast dit pakket natuurlijk

01:36.490 --> 01:38.370
ook Angular, bijvoorbeeld.

01:38.370 --> 01:39.541
Angular is een framework,

01:39.541 --> 01:41.502
dat ik al eerder noemde, dat sterk

01:41.502 --> 01:43.942
leunt op decorators, zoals deze component

01:43.942 --> 01:46.480
decorator, waarmee je wat dynamische HTML-code

01:46.480 --> 01:49.214
kunt toewijzen, die ook eigenschappen van

01:49.214 --> 01:51.301
je klassen aanboort, met een speciale

01:51.301 --> 02:00.170
syntaxis toegevoegd door Angular, om vervolgens wat dynamische inhoud op het scherm te renderen.

02:00.170 --> 02:01.780
Angular doet hier dus meer dan alleen

02:01.780 --> 02:03.360
deze decoratoren aanbieden, maar

02:03.360 --> 02:06.250
de decoratoren zijn een kernonderdeel van Angular.

02:06.250 --> 02:07.280
En als laatste, maar

02:07.280 --> 02:10.130
niet minst belangrijke, wil ik je ook NestJS laten zien.

02:10.130 --> 02:13.190
NestJS is een server side JavaScript framework

02:13.190 --> 02:15.487
voor Node. js, dat ook sterk

02:15.487 --> 02:20.010
gebruik maakt van typescript, en dit omarmt ook decorators.

02:20.010 --> 02:23.270
Daar gebruik je decoratoren om controllers te definiëren,

02:23.270 --> 02:26.730
en routes, de methoden die gebruikers moeten gebruiken op hun

02:26.730 --> 02:30.400
HTTP-verzoeken, om bepaalde functies te activeren, en ook een heleboel

02:30.400 --> 02:32.687
andere decoratoren die je kunt gebruiken

02:32.687 --> 02:36.890
om gegevens te halen uit binnenkomende verzoeken, enzovoort.

02:36.890 --> 02:39.150
Dus ook hier biedt dit framework al deze

02:39.150 --> 02:41.370
decorators voor u, zodat u ze gewoon kunt

02:41.370 --> 02:44.640
toevoegen aan uw properties, aan uw methods, aan uw classes,

02:44.640 --> 02:46.257
en extra functionaliteit kunt

02:46.257 --> 02:48.590
toevoegen, waar het framework dan op zijn

02:48.590 --> 02:50.060
beurt ook weer rekening mee

02:50.060 --> 02:52.828
houdt als het uw code uitvoert.

02:52.828 --> 02:55.417
Dus ook hier worden decorators gebruikt

02:55.417 --> 02:59.070
voor metaprogrammering om extra configuratie, extra

02:59.070 --> 03:02.977
logica toe te voegen, waarmee dan rekening wordt gehouden

03:02.977 --> 03:05.700
door, in dit geval, de code van het framework,

03:05.700 --> 03:07.580
die jouw code uitvoert of die

03:07.580 --> 03:09.886
samenwerkt met jouw code.

03:09.886 --> 03:12.000
En dat is het voor decorateurs.

03:12.000 --> 03:14.110
Dit geeft u hopelijk een goed overzicht van

03:14.110 --> 03:16.090
wat u met decorateurs kunt doen, waarom

03:16.090 --> 03:17.830
ze zeer nuttig kunnen zijn, en hoe

03:17.830 --> 03:19.563
ze in het algemeen werken.
