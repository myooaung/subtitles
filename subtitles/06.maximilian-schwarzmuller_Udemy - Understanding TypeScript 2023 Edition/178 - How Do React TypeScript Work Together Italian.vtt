WEBVTT

00:02.130 --> 00:03.970
Istruttore: Prima di tutto, possiamo avviare

00:03.970 --> 00:06.480
il nostro server di sviluppo con npm start, un processo

00:06.480 --> 00:08.440
che dovremmo continuare a eseguire perché

00:08.440 --> 00:10.940
controllerà i nostri file per le modifiche.

00:10.940 --> 00:13.270
E se qualcosa cambia, quindi se si salva

00:13.270 --> 00:15.620
una modifica specifica, ricompilerà

00:15.620 --> 00:17.776
i tipi di codice in JavaScript, ricompilerà

00:17.776 --> 00:20.090
JSX in JavaScript e, alla fine, costruirà

00:20.090 --> 00:22.500
la vostra applicazione react e la servirà

00:22.500 --> 00:25.750
sull'host locale 3000, dove, al momento, non si vede

00:25.750 --> 00:27.630
molto.

00:27.630 --> 00:29.430
Si può vedere qui nella console Dev che

00:29.430 --> 00:31.800
sembra funzionare grazie a questo output.

00:31.800 --> 00:32.900
Naturalmente non si vede

00:32.900 --> 00:34.340
molto perché non stiamo renderizzando

00:34.340 --> 00:36.700
nulla qui in App. tsx al momento.

00:36.700 --> 00:38.170
Questo ovviamente cambierà.

00:38.170 --> 00:39.420
E con questo, scriviamo

00:39.420 --> 00:41.130
un po' di codice o analizziamo

00:41.130 --> 00:43.580
quello che abbiamo.

00:43.580 --> 00:46.750
In indice. Non abbiamo niente di speciale, giusto?

00:46.750 --> 00:49.060
Si tratta di normale codice JavaScript.

00:49.060 --> 00:52.950
In App. tsx, vediamo l'assegnazione di questo

00:52.950 --> 00:55.250
tipo e lì, ciò che possiamo vedere è che abbiamo

00:55.250 --> 00:57.980
assegnato questo strano tipo ad App.

00:57.980 --> 01:00.270
Ora, se ignoriamo per un attimo questo tipo, cosa

01:00.270 --> 01:02.480
viene effettivamente memorizzato in App?

01:02.480 --> 01:04.840
Beh, una funzione, una funzione freccia, ma

01:04.840 --> 01:07.290
si tratta comunque di una funzione regolare.

01:07.290 --> 01:09.960
Perché questo tipo qui non funziona o perché non è uno dei

01:09.960 --> 01:12.570
tipi di funzione che abbiamo imparato a conoscere?

01:12.570 --> 01:14.030
Beh, è sotto il cofano,

01:14.030 --> 01:16.450
ma questo è un tipo fornito da react e ora,

01:16.450 --> 01:18.100
naturalmente, importante,

01:18.100 --> 01:21.070
fornito dal pacchetto react types.

01:21.070 --> 01:26.070
Se andiamo in node modules, vediamo la cartella @types e lì dentro

01:26.390 --> 01:28.470
vediamo molti tipi, e vediamo

01:28.470 --> 01:30.670
anche i tipi di react, tutti i

01:30.670 --> 01:32.600
tipi di react-dom.

01:32.600 --> 01:35.840
E alla fine, questo tipo viene implicitamente importato automaticamente

01:35.840 --> 01:39.340
dalla cartella dei tipi di react, si potrebbe dire.

01:39.340 --> 01:40.870
Che cos'è questo tipo?

01:40.870 --> 01:44.490
FC sta semplicemente per componente funzionale.

01:44.490 --> 01:46.310
Esiste anche una forma più lunga, che si può

01:46.310 --> 01:47.570
utilizzare al suo posto.

01:47.570 --> 01:49.240
È esattamente dello stesso tipo.

01:49.240 --> 01:51.090
L'altra è solo una scorciatoia e

01:51.090 --> 01:54.300
definisce semplicemente che ciò che memorizziamo qui

01:54.300 --> 01:57.750
in App deve essere una funzione, ma una funzione che si qualifica

01:57.750 --> 02:00.550
come componente di funzione in React.

02:00.550 --> 02:02.840
Naturalmente si possono anche scrivere componenti

02:02.840 --> 02:05.760
basati su classi e quindi anche qui c'è un componente classico

02:05.760 --> 02:07.420
e si deve memorizzare una classe

02:07.420 --> 02:09.480
invece di una funzione, ma in questo corso

02:09.480 --> 02:12.720
useremo componenti funzionali.

02:12.720 --> 02:14.670
Ora, questo è un componente di funzione

02:14.670 --> 02:17.620
perché è una funzione che restituisce JSX e questo è il modo

02:17.620 --> 02:20.850
in cui un componente di funzione viene creato in react.

02:20.850 --> 02:24.180
Se rimuovessi temporaneamente questa dichiarazione di ritorno,

02:24.180 --> 02:26.730
potremmo ottenere un errore, se provassi a salvare

02:26.730 --> 02:28.800
questo documento e volesse compilarlo.

02:28.800 --> 02:32.440
Otterremmo un errore, perché ora diciamo a TypeScript che vogliamo

02:32.440 --> 02:34.960
memorizzare un componente funzione e tutto ciò

02:34.960 --> 02:38.520
che memorizziamo è una normale funzione, non una funzione che restituisce

02:38.520 --> 02:40.770
JSX o qualsiasi altra cosa che si qualifichi

02:40.770 --> 02:42.800
come elemento react.

02:42.800 --> 02:44.440
Pertanto, questo non sarebbe valido

02:44.440 --> 02:45.810
e dovremmo correggerlo.

02:45.810 --> 02:48.530
Qui possiamo già vedere come TypeScript migliora

02:48.530 --> 02:50.360
un po' il nostro progetto.

02:50.360 --> 02:52.500
Ci dà un'ulteriore sicurezza di tipo e ci assicura

02:52.500 --> 02:55.420
che non ci si possa trovare in una situazione in cui, per esempio,

02:55.420 --> 02:58.353
si costruisce un componente non valido.

02:59.200 --> 03:03.230
Nota a margine: se può sembrare irrealistico che si dimentichi questa dichiarazione

03:03.230 --> 03:05.370
di ritorno, si consideri che si sta costruendo

03:05.370 --> 03:07.970
un componente più grande con più dichiarazioni if

03:07.970 --> 03:11.070
e diverse dichiarazioni di ritorno.

03:11.070 --> 03:14.370
Potreste dimenticarne uno in un ramo della vostra istruzione if e

03:14.370 --> 03:17.010
allora TypeScript può sicuramente salvarvi il culo

03:17.010 --> 03:19.130
e darvi quell'avviso un po' prima, piuttosto

03:19.130 --> 03:21.500
che durante il runtime, dove altrimenti potrebbe

03:21.500 --> 03:23.710
bloccarsi in alcune situazioni.

03:23.710 --> 03:25.620
Quindi questo è TypeScript che fa

03:25.620 --> 03:27.740
qualcosa, ma ora basta parlare.

03:27.740 --> 03:28.690
Costruiamo qualcosa

03:28.690 --> 03:31.670
e voglio costruire un'applicazione relativamente semplice,

03:31.670 --> 03:34.590
un'applicazione to-do, piuttosto classica, ma che ci permetta

03:34.590 --> 03:36.370
di mettere in pratica alcuni concetti

03:36.370 --> 03:39.480
fondamentali di React con TypeScript.

03:39.480 --> 03:41.270
E quindi, nelle prossime lezioni, iniziamo

03:41.270 --> 03:44.363
a creare i nostri primi componenti personalizzati.
