WEBVTT

00:02.060 --> 00:06.410
Instructor: Typescript proporciona muchos tipos a JavaScript.

00:06.410 --> 00:10.100
Ahora, JavaScript en sí mismo, también conoce algunos tipos de

00:10.100 --> 00:12.230
datos, y volveré a eso en este módulo,

00:12.230 --> 00:14.950
también, pero Typescript añade muchos más tipos,

00:14.950 --> 00:17.380
y como también aprenderás en este curso, Typescript

00:17.380 --> 00:21.110
también te permite escribir tus propios tipos.

00:21.110 --> 00:24.320
Ahora, vamos a empezar con algunos de los Core Types,

00:24.320 --> 00:26.250
que JavaScript ya conoce y que Typescript

00:26.250 --> 00:28.289
también soporta, y también echaremos

00:28.289 --> 00:30.550
un vistazo a lo que significa la diferencia

00:30.550 --> 00:33.380
entre JavaScript, conociendo el tipo, y Typescript,

00:33.380 --> 00:36.800
usando ese tipo.

00:36.800 --> 00:38.287
Uno de los tipos principales con

00:38.287 --> 00:41.740
los que trabajamos en JavaScript y Typescript, es el tipo número.

00:41.740 --> 00:45.220
Ahora, en JavaScript, y lo mismo ocurre con Typescript,

00:45.220 --> 00:47.290
sólo hay un tipo de número.

00:47.290 --> 00:50.750
No hay un tipo especial para los enteros o los flotantes.

00:50.750 --> 00:55.520
En cambio, estos valores aquí, serían todos números.

00:55.520 --> 00:58.180
Uno sería un número sin el decimal.

00:58.180 --> 01:01.640
5. 3 es obviamente uno con un decimal

01:01.640 --> 01:04.532
y todos estos valores son de tipo número.

01:04.532 --> 01:08.180
Otros lenguajes de programación tienen tipos enteros especiales

01:08.180 --> 01:10.480
y tipos flotantes o dobles.

01:10.480 --> 01:11.980
JavaScript no lo tiene

01:11.980 --> 01:14.120
y Typescript tampoco.

01:14.120 --> 01:16.070
Así, tenemos el tipo número, que

01:16.070 --> 01:19.810
conocemos de JavaScript, también como tipo, en Typescript.

01:19.810 --> 01:23.950
También tenemos el tipo de datos string, y eso sería texto, que puedes

01:23.950 --> 01:26.370
definir de una de estas tres maneras, con

01:26.370 --> 01:28.285
comillas simples, con comillas

01:28.285 --> 01:30.950
dobles, o también con backticks.

01:30.950 --> 01:34.720
La última notación con marcas es una sintaxis especial, proporcionada

01:34.720 --> 01:38.640
en el JavaScript moderno y también en Typescript, que nos permite

01:38.640 --> 01:42.440
escribir los llamados literales de plantilla, que son cadenas

01:42.440 --> 01:44.550
normales en las que se pueden inyectar

01:44.550 --> 01:47.520
dinámicamente algunos datos.

01:47.520 --> 01:49.240
Así pues, las cadenas son simplemente

01:49.240 --> 01:53.000
texto y JavaScript conoce los tipos de valores de las cadenas.

01:53.000 --> 01:55.000
La tipografía también lo hace.

01:55.000 --> 01:57.240
Por último, pero no por ello menos importante, uno de

01:57.240 --> 01:59.790
los tipos de datos principales, que JavaScript conoce y Typescript

01:59.790 --> 02:02.250
también soporta, es el tipo de datos booleano.

02:02.250 --> 02:03.810
Eso sería verdadero o falso, y eso es

02:03.810 --> 02:06.610
súper importante en la programación, obviamente, especialmente

02:06.610 --> 02:08.920
cuando se trabaja con declaraciones IF.

02:08.920 --> 02:10.970
Aquí, tenemos estos dos valores,

02:10.970 --> 02:13.690
y eso es importante, porque en JavaScript,

02:13.690 --> 02:17.520
usted también puede conocer esta idea de los valores de verdad

02:17.520 --> 02:22.190
y falsos, por ejemplo que el cero, el número cero, es un valor falso.

02:22.190 --> 02:25.510
Si se utiliza en una condición IF, se trata como falso.

02:25.510 --> 02:28.560
El tipo de datos booleano, realmente sólo conoce estos dos valores,

02:28.560 --> 02:31.230
verdadero o falso, y eso no es sólo el caso de Typescript,

02:31.230 --> 02:33.160
sino también de JavaScript.

02:33.160 --> 02:35.532
Este concepto veraz y falso, que deberías conocer,

02:35.532 --> 02:38.280
no está relacionado con los tipos de datos.

02:38.280 --> 02:40.840
Eso es un trabajo entre bastidores.

02:40.840 --> 02:43.030
JavaScript añade tiempo de ejecución,

02:43.030 --> 02:46.510
cuando ve ciertos valores, y condiciones IF.

02:46.510 --> 02:48.530
Así, con los números, las cadenas y los booleanos, tenemos

02:48.530 --> 02:50.060
un par de tipos de datos básicos.

02:50.060 --> 02:51.450
Por supuesto, no todos, también

02:51.450 --> 02:53.410
tenemos objetos y demás, pero vamos

02:53.410 --> 02:54.617
a centrarnos en estos

02:54.617 --> 02:57.330
tipos y a ver qué hace Typescript con ellos, o qué

02:57.330 --> 03:00.930
podemos hacer con ellos, con la ayuda de Typescript.

03:00.930 --> 03:02.620
Para esto, vuelvo al proyecto,

03:02.620 --> 03:05.190
que vimos en el primer módulo del curso, y allí

03:05.190 --> 03:07.600
te mostré que todo lo que necesitas hacer,

03:07.600 --> 03:10.320
ahora, es ejecutar npm start en una terminal,

03:10.320 --> 03:12.280
navegar en esta carpeta del proyecto,

03:12.280 --> 03:15.130
para hacer girar este servidor de desarrollo en

03:15.130 --> 03:18.110
vivo, que se recargará, cada vez que cambiamos algo,

03:18.110 --> 03:22.300
y aquí, abrí esta dirección localhost:3000 en la nueva pestaña de mi

03:22.300 --> 03:24.890
navegador.

03:24.890 --> 03:26.070
Correcto, estoy recibiendo un error,

03:26.070 --> 03:28.300
porque no tengo ninguna bandeja de aplicación como archivo, todavía.

03:28.300 --> 03:30.380
Por supuesto, usted encontrará este proyecto de

03:30.380 --> 03:32.280
partida, todos los adjuntos a esta conferencia,

03:32.280 --> 03:34.400
obtendrá una bandeja de aplicación como archivo,

03:34.400 --> 03:37.590
que estamos tratando de importar aquí, en nuestro archivo html índice, tan

03:37.590 --> 03:42.050
pronto como compilar la aplicación. ts de Typescript a JavaScript y podemos hacerlo en

03:42.050 --> 03:45.070
una nueva pestaña de la terminal, de modo que mantenemos este proceso

03:45.070 --> 03:46.860
en marcha y abrimos una nueva pestaña en

03:46.860 --> 03:51.117
su lugar, simplemente ejecutando tsc app. ts y lo que hace es que compila el archivo

03:53.920 --> 03:56.630
Typescript y escupe un archivo JavaScript,

03:56.630 --> 03:58.680
y una vez que esto sucede, podemos

03:58.680 --> 04:01.570
recargar esta página y obtenemos el Tiempo para

04:01.570 --> 04:05.520
empezar... salida aquí.

04:05.520 --> 04:08.000
Así que, ahora tenemos esta configuración aquí,

04:08.000 --> 04:10.620
donde podemos escribir algo de código Typescript

04:10.620 --> 04:14.650
y luego compilarlo a código JavaScript, para ver lo que hace.

04:14.650 --> 04:17.000
Ahora, con eso en el archivo Typescript, realmente

04:17.000 --> 04:18.870
me desharé del contenido allí, porque

04:18.870 --> 04:21.820
ahora, quiero sumergirme en estos tipos de datos centrales,

04:21.820 --> 04:23.720
que acabo de mostrarte en la diapositiva,

04:23.720 --> 04:27.230
para que entiendas cómo trabajar con ellos en Typescript.

04:27.230 --> 04:29.430
Ahora, empecemos muy, muy simple.

04:29.430 --> 04:32.240
Digamos que tenemos una nueva función,

04:32.240 --> 04:34.990
add, y ahí esperamos dos números, n1 y

04:34.990 --> 04:38.610
add two, y que devuelva n1 más n2, así de simple, una

04:38.610 --> 04:42.370
función muy sencilla, nada de Typescript.

04:42.370 --> 04:46.080
Ahora, tenemos dos números con los que queremos trabajar.

04:46.080 --> 04:49.800
Eso podría ser el número 1 aquí, que es, digamos, cinco y

04:49.800 --> 04:54.680
también el número 2, que es tal vez 2. 8, lo que quieras, dos

04:54.680 --> 04:57.060
números aquí.

04:57.060 --> 04:59.820
Ahora, obviamente y no muy sorprendentemente,

04:59.820 --> 05:02.950
podemos sumar, o llamar a la función sumar y pasar en número1

05:02.950 --> 05:05.280
y número2 como argumentos a esta función,

05:05.280 --> 05:07.320
almacenar el resultado en una nueva

05:07.320 --> 05:10.360
constante tal vez, y luego para ver algo en la pantalla,

05:10.360 --> 05:15.080
podemos consola.

05:15.080 --> 05:15.080
registra el resultado.

05:15.080 --> 05:20.080
Si hacemos eso, y recompilo este archivo con tsc app. ts, entonces esta página debería recargarse

05:20.270 --> 05:22.730
automáticamente, ya.

05:22.730 --> 05:24.350
Si no, puedes recargar manualmente, por

05:24.350 --> 05:27.010
supuesto, y deberías ver el 7. 8.

05:27.010 --> 05:30.250
Ahora bien, puedes pensar que eso no es demasiado especial, ¿verdad?

05:30.250 --> 05:33.650
Este es un fragmento de JavaScript bastante sencillo

05:33.650 --> 05:37.330
y, de hecho, no tiene nada de Typescript.

05:37.330 --> 05:39.450
Bien, hagamos algo que frene ese

05:39.450 --> 05:41.900
fragmento en JavaScript normal.

05:41.900 --> 05:45.100
Digamos que esta entrada aquí no es un número,

05:45.100 --> 05:48.530
sino un texto, un cinco en texto, y si ahora guardamos

05:48.530 --> 05:49.880
eso, y volvemos a ejecutar

05:49.880 --> 05:53.380
nuestro comando de compilación aquí, verás que, una

05:53.380 --> 05:56.110
vez que esta página se recarga aquí, obtengo

05:56.110 --> 05:59.530
52. 8 como salida y que obviamente

05:59.530 --> 06:02.200
no es el resultado correcto de esta adición.

06:02.200 --> 06:04.500
Ahora, ¿sabes por qué estamos recibiendo esta

06:04.500 --> 06:06.450
salida en JavaScript normal, que nosotros,

06:06.450 --> 06:08.670
al final estamos ejecutando aquí.

06:08.670 --> 06:10.150
Bueno, estamos obteniendo

06:10.150 --> 06:14.710
esta salida, porque esto no es el resultado de la adición matemática, pero en cambio,

06:14.710 --> 06:17.760
esto concatena esto como una cadena, porque esta entrada,

06:17.760 --> 06:21.060
aquí, cinco, es una cadena y, a continuación, JavaScript ve,

06:21.060 --> 06:23.997
"Bueno, tengo una cadena, "Estoy añadiendo algo a esta

06:23.997 --> 06:27.667
cadena, mientras que ciertamente, "este algo también debe ser convertido

06:27.667 --> 06:32.097
a una cadena, "de modo que en general, tengo una cadena, "porque el primer valor era

06:32.097 --> 06:34.190
una cadena", y por lo tanto, lo que hace JavaScript,

06:34.190 --> 06:39.240
es, convierte 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
de un número a una cadena, concatena una cadena más larga de cinco y 2. 8, lo que da como

06:42.720 --> 06:46.700
resultado 52. 8, como una cadena y la devuelve.

06:46.700 --> 06:49.490
Por lo tanto, no está tratando esto de una manera matemática,

06:49.490 --> 06:50.850
pero en cambio, como una cadena,

06:50.850 --> 06:52.900
y con JavaScript, esto puede suceder.

06:52.900 --> 06:54.037
Ahora, por supuesto, podrías pensar:

06:54.037 --> 06:55.427
"¿Por qué iba a escribir ese código?

06:55.427 --> 06:58.160
"Soy el promotor, ¿por qué iba a cometer este error? Bueno, tal vez no seas tú el que comete este error.

06:58.160 --> 07:01.230
Tal vez, esto se obtiene de alguna entrada del usuario y usted

07:01.230 --> 07:04.180
introdujo un pequeño error en su código, donde se olvidó

07:04.180 --> 07:06.690
de transformar esto, o usted está trabajando en

07:06.690 --> 07:09.350
un equipo y usted está teniendo un par de archivos de

07:09.350 --> 07:12.460
secuencia de comandos, trabajando juntos, y algún otro desarrollador

07:12.460 --> 07:14.740
introdujo tal error.

07:14.740 --> 07:17.270
No es imposible cometer este tipo de errores,

07:17.270 --> 07:20.110
pero puede ser difícil localizarlos.

07:20.110 --> 07:22.340
Aquí, por supuesto, es bastante obvio que algo salió

07:22.340 --> 07:24.010
mal, porque tenemos un script básico,

07:24.010 --> 07:26.400
pero en un script más grande, es posible que ni siquiera

07:26.400 --> 07:28.320
reconozcas inmediatamente que algo salió

07:28.320 --> 07:31.520
mal aquí, y ahí es donde Typescript puede ayudarnos.

07:31.520 --> 07:33.720
Podemos añadir asignaciones de tipo

07:33.720 --> 07:36.390
en esta función, a nuestros parámetros.

07:36.390 --> 07:38.820
Podemos decirle a Typescript que estos

07:38.820 --> 07:42.280
dos parámetros deben ser de tipo número y no ser de tipo,

07:42.280 --> 07:45.340
no me importa cuál es el predeterminado.

07:45.340 --> 07:47.535
Así que, lo hacemos, añadiendo dos puntos

07:47.535 --> 07:50.300
aquí, después del valor al que queremos asignar un

07:50.300 --> 07:52.890
tipo, así que, en este caso, después del nombre del

07:52.890 --> 07:55.220
parámetro y luego el nombre del tipo.

07:55.220 --> 07:57.140
Por ejemplo, number sería uno de los nombres admitidos.

07:57.140 --> 08:00.560
Además de un número, también tienes una cadena, o

08:00.560 --> 08:03.480
un booleano, pero ya volveremos a ellos.

08:03.480 --> 08:05.990
Por el momento, necesitamos el número y no sólo

08:05.990 --> 08:07.750
lo necesitamos en el primer parámetro

08:07.750 --> 08:10.530
aquí, sino también en el segundo.

08:10.530 --> 08:12.010
Así que, aquí también, podemos

08:12.010 --> 08:16.150
añadir dos puntos, y luego el número, y ahora, lo que estamos diciendo a Typescript,

08:16.150 --> 08:18.367
es, "Hey, ambos parámetros aquí, debe ser

08:18.367 --> 08:22.147
de tipo número, "pasar en los valores de un tipo diferente no está permitido",

08:22.147 --> 08:25.530
y de hecho, mi IDE ya se queja aquí, porque Visual Studio Code ha

08:25.530 --> 08:28.360
incorporado el apoyo Typescript, pero incluso si nos

08:28.360 --> 08:32.510
pasar por alto esto, tan pronto como recompilar esto, por volver a ejecutar tsc

08:32.510 --> 08:34.260
app. ts, como verás,

08:34.260 --> 08:39.193
obtenemos un error.

08:40.040 --> 08:41.670
Obtenemos un error, que, "Argumento

08:41.670 --> 08:42.697
de tipo '"5" no es asignable

08:42.697 --> 08:46.250
a parámetro de tipo 'número', e incluso nos muestra donde esto

08:46.250 --> 08:48.660
ocurrió y nos da un número de línea, línea

08:48.660 --> 08:51.140
ocho, y básicamente nos está mostrando lo

08:51.140 --> 08:54.430
mismo, el IDE muestra aquí.

08:54.430 --> 08:56.740
Así que, en caso de que lo hayamos pasado por alto

08:56.740 --> 08:58.707
en el IDE, al compilarlo, ahora arroja

08:58.707 --> 09:01.340
un error, y eso es lo importante de Typescript.

09:01.340 --> 09:03.284
Sólo nos ayuda durante la compilación.

09:03.284 --> 09:06.220
No cambia el JavaScript para que funcione de forma diferente en tiempo

09:06.220 --> 09:10.110
de ejecución, porque los navegadores no tienen soporte incorporado para Typescript.

09:10.110 --> 09:13.510
Sólo puede ayudarnos durante el desarrollo, antes de que compilemos

09:13.510 --> 09:15.700
nuestro código Typescript a JavaScript,

09:15.700 --> 09:19.310
pero ahí, es extremadamente útil, porque añade un paso extra,

09:19.310 --> 09:21.520
una comprobación de cordura extra, donde

09:21.520 --> 09:25.560
aquí, descubrimos, "Oh, hemos cometido un error.

09:25.560 --> 09:28.407
"Aquí, esto no debería ser una cadena, debería ser

09:28.407 --> 09:31.660
un número", y podemos arreglar esto y estamos bien.

09:31.660 --> 09:34.210
Esto es lo que hace Typescript.

09:34.210 --> 09:35.670
Le ayuda durante el desarrollo.

09:35.670 --> 09:37.390
No cambia su código de ejecución.

09:37.390 --> 09:40.130
De hecho, aquí, incluso con la configuración por

09:40.130 --> 09:42.800
defecto, compiló nuestro error aquí, aunque lo

09:42.800 --> 09:44.700
detectó durante la compilación, y

09:44.700 --> 09:47.220
creó un archivo que causa el resultado incorrecto,

09:47.220 --> 09:50.690
porque por defecto, Typescript no interviene, aquí.

09:50.690 --> 09:53.560
Más adelante aprenderás cómo puedes asegurarte de que lo haga,

09:53.560 --> 09:56.300
pero por defecto, ni siquiera bloquea la compilación.

09:56.300 --> 09:59.260
Aun así, te grita y señala este error,

09:59.260 --> 10:03.570
para que lo arregles, y para que evites esos errores

10:03.570 --> 10:04.850
aquí.

10:04.850 --> 10:07.450
Por cierto, asegúrate de que no tienes

10:07.450 --> 10:09.020
aplicación. js y app. t se abren al mismo tiempo.

10:09.020 --> 10:11.950
Podrías obtener errores aquí en el IDE, con

10:11.950 --> 10:13.470
respecto a las implementaciones de funciones duplicadas.

10:13.470 --> 10:15.830
Cerrando el archivo JavaScript se arregla esto.
