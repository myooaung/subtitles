WEBVTT

00:02.210 --> 00:04.200
Người hướng dẫn: Vì vậy, chúng tôi đã thiết

00:04.200 --> 00:05.490
lập và chạy máy chủ giả cơ bản

00:05.490 --> 00:08.380
này, nhưng máy chủ này tất nhiên không làm được gì hữu ích.

00:08.380 --> 00:11.430
Bây giờ, tôi đã nói rằng tôi muốn xây dựng một API nghỉ ngơi rất đơn

00:11.430 --> 00:13.110
giản, và để làm được điều đó, tôi sẽ thực

00:13.110 --> 00:15.570
sự tạo một thư mục con mới trong thư mục nguồn, mà tôi

00:15.570 --> 00:16.830
sẽ đặt tên là routes.

00:16.830 --> 00:19.870
Trong đó, tôi sẽ thêm một tệp sẽ xử lý một tập hợp các

00:19.870 --> 00:22.540
tuyến nhất định của API còn lại này và bây giờ,

00:22.540 --> 00:25.710
bạn muốn xây dựng loại API nào là tùy thuộc vào bạn.

00:25.710 --> 00:28.520
Tôi sẽ xây dựng một API việc cần làm ở đây, nếu bạn đã xem

00:28.520 --> 00:30.770
phần React trong TypeScript, điều đó nghe có

00:30.770 --> 00:32.140
vẻ quen thuộc với bạn vì ở đó

00:32.140 --> 00:34.530
chúng tôi cũng đã xây dựng một ứng dụng việc cần

00:34.530 --> 00:36.820
làm, tuy nhiên, phần này hoàn toàn tách rời khỏi

00:36.820 --> 00:38.710
phần đó, nó sẽ không hoạt động cùng với

00:38.710 --> 00:41.250
React, của tất nhiên bạn có thể tự mình kết nối nó,

00:41.250 --> 00:43.870
nhưng ở đây tôi sẽ xây dựng một API việc cần làm đơn giản

00:43.870 --> 00:46.620
như vậy để chúng ta thấy cách TypeScript hoạt động với

00:46.620 --> 00:48.350
Node và Express.

00:48.350 --> 00:51.400
Ứng dụng chúng tôi đang xây dựng không quá phức

00:51.400 --> 00:54.760
tạp, nhưng nó sẽ chứa rất nhiều khái niệm thú vị.

00:54.760 --> 00:57.080
Vì vậy, ở đây, chúng tôi sẽ thêm các tuyến đường

00:57.080 --> 01:01.800
việc cần làm của tôi bằng cách thêm một todos. ts trong thư mục route và trong đó, bây giờ tôi

01:01.800 --> 01:04.570
muốn sử dụng Express. js để đăng ký một

01:04.570 --> 01:06.630
số tuyến đường.

01:06.630 --> 01:09.730
Để làm được điều đó, tôi sẽ nhập thứ gì

01:09.730 --> 01:13.700
đó từ Express và thứ đó thực sự là bộ định tuyến.

01:13.700 --> 01:16.160
Bây giờ, cú pháp JS phổ biến cho điều đó

01:16.160 --> 01:20.950
thường là bạn nhập Express bằng cách sử dụng yêu cầu express, sau đó trong một

01:20.950 --> 01:23.550
dòng mới, bạn thường thấy mã nơi chúng tôi

01:23.550 --> 01:25.673
thực hiện việc này tại đây.

01:27.090 --> 01:28.180
Bây giờ đó là điều bạn có thể

01:28.180 --> 01:30.130
làm, nhưng ở đây tôi sẽ chỉ nhập nó như vậy.

01:31.130 --> 01:34.120
Bây giờ điều này mang lại cho chúng tôi một bộ định tuyến và chúng

01:34.120 --> 01:36.750
tôi có thể chỉ cần gọi Bộ định tuyến ở đây như một chức năng

01:36.750 --> 01:39.300
và điều này cho phép chúng tôi đăng ký phần mềm trung gian,

01:39.300 --> 01:41.980
do đó, cuối cùng, định tuyến các điểm cuối cho các yêu cầu

01:41.980 --> 01:45.540
đến, sau đó chúng tôi thực thi một số logic theo các yêu cầu này.

01:45.540 --> 01:48.980
Bây giờ đối với ứng dụng việc cần làm, tôi muốn đăng ký một số tuyến đường

01:48.980 --> 01:53.700
cơ bản, một tuyến đường đăng tại dấu gạch chéo không có gì để chúng tôi có thể thêm một việc cần làm

01:53.700 --> 01:55.760
mới, vì vậy ở đây chúng tôi sẽ cần một số mã,

01:55.760 --> 01:58.860
một số chức năng sau đó thêm một việc cần làm ở đâu đó, bây giờ tôi'

01:58.860 --> 02:01.250
Tôi sẽ không chỉ định mã nào cả, chỉ cần thiết lập

02:01.250 --> 02:03.380
tuyến đường nói chung ở đây.

02:03.380 --> 02:05.110
Vì vậy, chúng tôi có yêu

02:05.110 --> 02:08.770
cầu đăng, sau đó là yêu cầu nhận, giả sử nhận tất cả các

02:08.770 --> 02:12.900
việc cần làm, sau đó giả sử yêu cầu vá để cập nhật một việc cần

02:12.900 --> 02:15.520
làm và ở đó tôi mong đợi nhận được id,

02:15.520 --> 02:19.280
một phân đoạn động trong URL, và sau đó ở đây cũng có một

02:19.280 --> 02:22.700
xóa yêu cầu xóa việc cần làm theo id.

02:22.700 --> 02:25.720
Đây là các tuyến đường của tôi và bây giờ chúng tôi có thể xuất bộ

02:25.720 --> 02:28.620
định tuyến được định cấu hình làm mặc định trong tệp này.

02:28.620 --> 02:30.930
Bây giờ sẽ không có gì xảy ra trên các tuyến đường này, phải không?

02:30.930 --> 02:32.510
Tôi chưa thiết lập bất kỳ chức

02:32.510 --> 02:35.830
năng nào sẽ thực thi khi yêu cầu đến các điểm cuối này, nhưng ít

02:35.830 --> 02:38.620
nhất bây giờ chúng tôi biết mình muốn tuyến đường nào,

02:38.620 --> 02:41.740
chúng tôi sẽ thêm các chức năng trong bước thứ hai sau.

02:41.740 --> 02:44.100
Hiện tại, chúng ta hãy kết nối bộ định tuyến tại đây, các tuyến được định cấu

02:44.100 --> 02:48.320
hình tới máy chủ đang chạy của chúng tôi tại đây trong ứng dụng. ts và để làm điều đó, chúng

02:48.320 --> 02:53.211
tôi chỉ cần nhập của mình, chẳng hạn như todoRoutes từ

02:53.211 --> 02:54.290
. /route/todos.

02:56.040 --> 02:58.910
Vì vậy, chúng tôi đang nhập bộ định tuyến đã xuất

02:58.910 --> 03:01.610
trong todos vào app. ts, và bây giờ ở đây, chúng

03:01.610 --> 03:03.390
ta cần kết nối nó với ứng dụng Express

03:03.390 --> 03:08.340
đang chạy bằng cách sử dụng app. sử dụng, sau đó giả sử chúng tôi muốn

03:08.340 --> 03:10.800
chuyển tiếp tất cả các yêu cầu bắt đầu

03:10.800 --> 03:14.600
bằng /todos tới todoRoutes của chúng tôi, vì vậy các yêu

03:14.600 --> 03:17.210
cầu nhắm mục tiêu một URL khác sẽ không

03:17.210 --> 03:18.703
được xử lý ở đó.

03:19.920 --> 03:23.730
Nói về xử lý, trong thiết lập phần mềm trung gian Express mà chúng tôi đang sử dụng

03:23.730 --> 03:25.983
ở đây, chúng tôi cũng có thể thiết lập một phần mềm

03:25.983 --> 03:29.030
trung gian sẽ xử lý lỗi, do đó, bất kỳ lỗi nào có thể xuất hiện ở bất kỳ

03:29.030 --> 03:31.660
đâu trong mã của chúng tôi và chúng tôi thực hiện điều này

03:31.660 --> 03:33.610
với ứng dụng. sử dụng, sau đó chúng

03:33.610 --> 03:37.470
tôi thiết lập chức năng phần mềm trung gian điển hình như vậy tại đây, nơi chúng tôi

03:37.470 --> 03:40.640
nhận yêu cầu, phản hồi và chức năng tiếp theo, và một lần nữa, tất cả

03:40.640 --> 03:45.430
điều này yêu cầu bạn phải biết một số Express. js và để biết

03:45.430 --> 03:48.330
Node. js, tôi sẽ không đi sâu vào chính

03:48.330 --> 03:51.160
xác cách thức hoạt động của phần mềm trung gian trong Express

03:51.160 --> 03:52.970
và phần mềm trung gian là gì.

03:52.970 --> 03:54.960
Vì vậy, đó là chức năng phần mềm trung gian thông thường ở

03:54.960 --> 03:57.150
đây mà bạn nên biết từ Express. js và bạn có thể cũng

03:57.150 --> 03:59.050
biết rằng có một chức năng thay

03:59.050 --> 04:02.310
thế cho chức năng đó, một chức năng nhận bốn tham

04:02.310 --> 04:04.680
số trong đó tham số đầu tiên là một

04:04.680 --> 04:07.350
lỗi tiềm ẩn và bây giờ đây là một chức năng

04:07.350 --> 04:10.720
phần mềm trung gian xử lý lỗi, sẽ được Express tự

04:10.720 --> 04:13.530
động kích hoạt nếu trong bất kỳ phần mềm

04:13.530 --> 04:15.290
trung gian nào khác trước

04:15.290 --> 04:18.750
phần mềm này, bạn đều gặp lỗi.

04:18.750 --> 04:21.200
Vì vậy, đây là lỗi của tôi khi xử lý chức năng phần mềm trung gian,

04:21.200 --> 04:23.380
và bạn thấy đấy, chúng ta có rất nhiều lỗi ở đây.

04:23.380 --> 04:26.260
Một loạt lỗi vì đây là tất cả các loại bất kỳ và

04:26.260 --> 04:29.030
chúng tôi cũng không sử dụng tất cả các giá

04:29.030 --> 04:33.080
trị này, nhưng hãy để tôi nói rõ loại nào chúng tôi có ở đây.

04:33.080 --> 04:35.510
Đây sẽ là loại Error, đây

04:35.510 --> 04:39.890
sẽ là loại express. Yêu cầu hoặc bạn chỉ cần nhập Yêu cầu tại

04:39.890 --> 04:43.020
đây dưới dạng nhập bổ sung có tên từ express, điều này

04:43.020 --> 04:45.540
cũng hoạt động nếu bạn đã cài đặt các loại Express

04:45.540 --> 04:46.670
mà chúng tôi thực hiện,

04:46.670 --> 04:49.310
thì ở đây chúng tôi cũng có Phản hồi và Chức năng

04:49.310 --> 04:54.310
tiếp theo tại đây, sau đó chúng tôi có thể điều chỉnh các loại của mình ở đây, đây là loại

04:54.490 --> 04:56.310
Yêu cầu, đây là loại Phản hồi và

04:56.310 --> 04:59.230
đây là Chức năng tiếp theo mà chúng ta có thể thực

04:59.230 --> 05:01.420
thi để cho phép yêu cầu tiếp tục hành trình

05:01.420 --> 05:03.650
của nó đến phần mềm trung gian tiếp theo

05:03.650 --> 05:06.680
trong dòng.

05:06.680 --> 05:08.590
Bây giờ, đó là phần mềm trung gian xử lý

05:08.590 --> 05:10.820
lỗi của chúng tôi, nó sẽ kích hoạt bất cứ khi

05:10.820 --> 05:13.030
nào chúng tôi gặp lỗi ở một trong các phần mềm

05:13.030 --> 05:15.000
trung gian khác của chúng tôi và tại đây,

05:15.000 --> 05:17.690
chúng tôi có thể gửi lại phản hồi với giả sử dữ liệu JSON

05:17.690 --> 05:22.690
trong đó chúng tôi có thông báo lỗi. tin nhắn và nơi chúng tôi cũng có thể

05:22.855 --> 05:24.630
đặt, err. Ý tôi là, và ở đó chúng

05:24.630 --> 05:28.510
tôi cũng có thể đặt mã trạng thái là 500, và tất nhiên, bạn có thể có chức

05:28.510 --> 05:29.610
năng xử lý lỗi phức tạp

05:29.610 --> 05:32.460
hơn tôi có ở đây, nhưng cùng với đó, chúng tôi đã thêm

05:32.460 --> 05:35.020
các tuyến đường của mình, chúng tôi đã thêm chức

05:35.020 --> 05:38.830
năng xử lý lỗi của mình phần mềm trung gian, tại sao chúng ta không thêm

05:38.830 --> 05:40.670
một số logic vào API này ngay bây giờ

05:40.670 --> 05:43.103
trong bài giảng tiếp theo.
