WEBVTT

00:02.300 --> 00:03.420
Tutor : Pour commencer,

00:03.420 --> 00:07.060
je vais lancer npm start pour faire apparaître ce serveur de développement.

00:07.060 --> 00:09.384
Ce qui sert le fichier HTML et l'onglet de menu,

00:09.384 --> 00:13.434
tsc-w pour démarrer les types de compilation en mode veille afin que le fichier

00:13.434 --> 00:17.988
JavaScript de notre application soit continuellement reconstruit et que nous puissions

00:17.988 --> 00:21.740
le visualiser dans l'application en cours.

00:21.740 --> 00:24.480
Pour l'instant, bien sûr, notre application n'a pas l'air très sophistiquée.

00:24.480 --> 00:26.340
C'est une page vide.

00:26.340 --> 00:27.850
Pour commencer, il y a donc

00:27.850 --> 00:30.250
plusieurs façons de procéder.

00:30.250 --> 00:35.040
Maintenant, je veux commencer par rendre ce formulaire visible.

00:35.040 --> 00:36.660
Et maintenant, il y a plusieurs façons,

00:36.660 --> 00:38.790
je vais en fait écrire cette application dans une

00:38.790 --> 00:40.208
approche orientée objet.

00:40.208 --> 00:43.303
Ce qui est 100% optionnel, mais puisque nous avons

00:43.303 --> 00:46.080
appris les classes et ainsi de suite, je veux

00:46.080 --> 00:48.083
montrer comment cela fonctionne

00:48.083 --> 00:51.140
et je vais donc utiliser cette approche.

00:51.140 --> 00:51.973
Dans la clé de l'application,

00:51.973 --> 00:55.510
je vais donc ajouter une nouvelle classe et la nommer Project Input, mais le

00:55.510 --> 00:59.120
nom de la classe est bien sûr entièrement à votre discrétion.

00:59.120 --> 01:00.570
Maintenant, dans cette

01:00.570 --> 01:04.590
classe, notre objectif doit être d'accéder à ce modèle et au formulaire

01:04.590 --> 01:08.220
qu'il contient, d'accéder à cette div ici, puis de rendre

01:08.220 --> 01:11.710
notre modèle dans cette div à la fin.

01:11.710 --> 01:15.160
Donc le contenu du modèle, le formulaire dans ce div.

01:15.160 --> 01:17.130
Cela doit être notre objectif.

01:17.130 --> 01:18.850
Maintenant, pour réaliser

01:18.850 --> 01:20.588
ceci, ici dans Project Input,

01:20.588 --> 01:23.450
je vais ajouter un constructeur où je veux finalement

01:23.450 --> 01:25.920
avoir accès à mon modèle et à l'endroit où

01:25.920 --> 01:27.970
il doit être rendu.

01:28.830 --> 01:33.310
Et pour cela ici, je vais ajouter deux propriétés à la volée avec

01:33.310 --> 01:37.460
ceci, la propriété de l'élément de modèle et puis aussi la

01:37.460 --> 01:40.180
propriété de l'élément d'hôte.

01:40.180 --> 01:42.420
Les noms sont entièrement à votre discrétion.

01:42.420 --> 01:44.990
En fin de compte, mon idée est que l'élément

01:44.990 --> 01:46.970
hôte contient une référence à l'élément

01:46.970 --> 01:49.650
où je veux rendre le contenu de mon modèle et l'élément

01:49.650 --> 01:51.427
modèle me donne accès au modèle

01:51.427 --> 01:54.050
qui contient ce contenu.

01:54.050 --> 01:56.120
Maintenant, pour accéder à ce modèle,

01:56.120 --> 01:59.690
regardons l'index html et voyons comment nous pouvons identifier

01:59.690 --> 02:01.870
le modèle qui contient le formulaire.

02:01.870 --> 02:04.050
Eh bien, il a cet ID d'entrée de projet, donc

02:04.050 --> 02:06.120
ça semble être une bonne stratégie.

02:06.120 --> 02:08.510
Donc ici nous pouvons utiliser le document

02:08.510 --> 02:11.022
getElementById project-input.

02:11.022 --> 02:15.410
Cela nous donne accès à cet élément de modèle.

02:15.410 --> 02:17.820
Maintenant, deux choses importantes.

02:17.820 --> 02:21.320
Ici, nous obtenons une erreur que l'élément de modèle est une propriété

02:21.320 --> 02:23.900
qui n'existe pas sur l'entrée du projet.

02:23.900 --> 02:28.140
Pour nous en débarrasser, nous devons l'ajouter comme un

02:28.140 --> 02:31.610
nouveau champ directement dans la classe.

02:31.610 --> 02:34.050
Nous pouvons alors l'assigner en toute sécurité.

02:34.050 --> 02:36.040
Maintenant, ici, je veux aussi être clair sur

02:36.040 --> 02:37.450
le type qui serait stocké là.

02:37.450 --> 02:41.070
Et ce sera un élément de modèle HTML.

02:41.070 --> 02:43.270
Ce type est globalement disponible

02:43.270 --> 02:47.380
parce que dans le fichier js de tsconfig, j'ai ajouté le DOM en tant

02:47.380 --> 02:50.360
que librairie et cela ajoute tous ces types DOM,

02:50.360 --> 02:53.777
tous ces types d'éléments HTML en tant que types script

02:53.777 --> 02:55.493
à l'ensemble du projet.

02:57.280 --> 03:00.400
Maintenant, cela introduit une nouvelle erreur ici, cependant,

03:00.400 --> 03:03.110
vous voyez qu'à la fin cela pourrait être nul quand nous

03:03.110 --> 03:04.760
obtenons l'élément par ID, bien

03:04.760 --> 03:08.510
sûr nous savons que cela n'échouera pas mais typescript n'a aucune chance

03:08.510 --> 03:09.850
de le savoir parce qu'il ne

03:09.850 --> 03:12.757
va pas analyser notre fichier html.

03:12.757 --> 03:16.210
Il se peut donc qu'il n'existe pas d'élément avec cet

03:16.210 --> 03:18.210
ID et que le résultat soit nul.

03:18.210 --> 03:20.680
Maintenant, ici, nous disons que nous ne stockons pas

03:20.680 --> 03:23.920
null là-dedans, nous stockons juste l'élément de modèle HTML.

03:23.920 --> 03:25.800
Donc, pour éliminer ce danger,

03:25.800 --> 03:29.470
nous devons dire à typescript, que ceci ne sera jamais nul.

03:29.470 --> 03:31.290
Et vous savez comment vous pouvez faire ça ?

03:31.290 --> 03:33.580
Vous pouvez ajouter un point d'exclamation ici.

03:33.580 --> 03:35.020
Une alternative bien sûr,

03:35.020 --> 03:36.170
juste pour montrer

03:36.170 --> 03:37.820
cela, si vous n'êtes pas sûr,

03:37.820 --> 03:41.640
est de le stocker comme disons dans une constante et ensuite

03:41.640 --> 03:46.640
de vérifier si l'élément du modèle est vrai, donc s'il n'est pas nul et ensuite

03:46.900 --> 03:48.600
de le stocker à l'intérieur

03:48.600 --> 03:51.490
de cette vérification if ici.

03:51.490 --> 03:52.720
Maintenant, nous avons toujours une

03:52.720 --> 03:54.190
erreur, mais ce sera une erreur différente,

03:54.190 --> 03:55.840
sur laquelle je reviendrai plus tard.

03:55.840 --> 03:58.060
Pour l'instant, ceci ferait l'affaire

03:58.060 --> 03:59.650
si nous ne sommes pas sûrs.

03:59.650 --> 04:01.930
Maintenant, ici, cependant, je suis sûr.

04:01.930 --> 04:02.763
Et d'ailleurs, si vous n'êtes

04:02.763 --> 04:03.596
pas sûr, vous devez prévoir

04:03.596 --> 04:06.000
une solution de repli dans le cas contraire, bien sûr.

04:06.000 --> 04:08.530
Mais ici, je suis sûr que nous obtiendrons un tel élément et

04:08.530 --> 04:10.544
nous pouvons donc simplement ajouter un point

04:10.544 --> 04:11.803
d'exclamation par la suite pour

04:11.803 --> 04:13.710
dire au typographe : " Tout va bien ".

04:13.710 --> 04:17.300
Nous aurons accès à un élément avec cet ID. Maintenant, comme je l'ai mentionné, nous avons encore une autre erreur

04:17.300 --> 04:18.133
cependant.

04:18.133 --> 04:20.220
Le contenu de la propriété est manquant dans l'élément HTML de type.

04:20.220 --> 04:24.270
Le problème ici est que nous disons à Typescript que nous allons

04:24.270 --> 04:27.140
stocker un élément de modèle qui est de type

04:27.140 --> 04:29.550
html template element.

04:29.550 --> 04:32.160
Et ce sera effectivement le cas.

04:32.160 --> 04:34.800
Bien entendu, getElementById

04:34.800 --> 04:38.730
ne sait pas quel élément il va retourner.

04:38.730 --> 04:41.130
Il sait juste qu'il s'agit d'un élément

04:41.130 --> 04:43.920
html mais pas de sa version spécialisée.

04:43.920 --> 04:46.600
Si c'est un div, un paragraphe, un bouton ou comme

04:46.600 --> 04:48.720
dans ce cas un élément de modèle.

04:48.720 --> 04:51.387
getElementById n'a aucune chance de le savoir.

04:51.387 --> 04:54.590
Donc, afin de dire au typographe quel est le type, que nous

04:54.590 --> 04:57.460
connaissons bien sûr aussi avec certitude.

04:57.460 --> 05:00.660
Nous pouvons utiliser le moulage de type.

05:00.660 --> 05:02.260
Vous l'avez appris aussi.

05:02.260 --> 05:03.730
Il existe deux syntaxes que vous pouvez utiliser.

05:03.730 --> 05:05.950
Les crochets d'angle au début et

05:05.950 --> 05:07.690
ensuite le type avec lequel

05:07.690 --> 05:10.130
vous voulez le mettre, vous dites à

05:10.130 --> 05:11.847
TypeScript, "Hey !

05:11.847 --> 05:12.700
La chose, l'expression

05:12.700 --> 05:15.840
qui vient après cela ici, ce sera de ce type. ou bien vous ajoutez un élément de modèle HTML, ce qui est

05:15.840 --> 05:17.650
l'approche que j'utiliserais.

05:17.650 --> 05:21.200
Et avec cela, vous garantissez à Typescript que

05:21.200 --> 05:23.040
ce que vous récupérez ici

05:23.040 --> 05:25.700
ne sera pas nul et sera de ce type.

05:25.700 --> 05:27.950
On parle beaucoup de cette sélection, mais il s'agit d'une

05:30.027 --> 05:30.860
tâche courante et il est

05:30.860 --> 05:32.016
important de bien la faire.

05:32.016 --> 05:33.630
Poursuivons maintenant avec l'élément hôte.

05:33.630 --> 05:35.563
Ici, nous devrions également ajouter

05:36.890 --> 05:39.360
l'élément hôte comme un champ et nous savons

05:39.360 --> 05:43.350
que l'élément hôte, lorsque nous voulons effectivement rendre notre

05:43.350 --> 05:45.960
entrée de projet sera à la fin ce div ici.

05:45.960 --> 05:48.560
C'est là que je veux rendre mon formulaire.

05:48.560 --> 05:51.410
Donc, ici nous pouvons dire que l'élément HTML div.

05:51.410 --> 05:54.000
C'est le type d'élément auquel nous allons l'ajouter.

05:54.000 --> 05:57.730
Nous pourrions également être un peu moins spécifiques et dire simplement

05:57.730 --> 06:00.260
"élément HTML", car ici, je ne me soucie pas vraiment

06:00.260 --> 06:02.740
de savoir si c'est un div ou non.

06:02.740 --> 06:04.970
Mais puisque nous le savons avec

06:04.970 --> 06:08.400
certitude, pourquoi ne pas l'ajouter ?

06:08.400 --> 06:10.250
Maintenant, je veux avoir accès à cette division

06:10.250 --> 06:11.263
bien sûr où cela devrait

06:12.110 --> 06:14.850
être ajouté et si nous avons un regard sur l'index. html, nous voyons que nous pouvons identifier

06:14.850 --> 06:16.530
ce div par l'ID à nouveau.

06:16.530 --> 06:18.970
L'ID de l'application dans ce cas.

06:18.970 --> 06:19.945
Maintenant, de retour dans

06:19.945 --> 06:24.640
l'application ts, nous pouvons utiliser le document getElementById une fois de plus et atteindre l'élément avec l'id app.

06:24.640 --> 06:28.780
Maintenant, nous avons les mêmes problèmes que précédemment,

06:28.780 --> 06:32.920
ceci peut être nul, donc nous devons ajouter le point d'exclamation

06:32.920 --> 06:35.112
parce qu'encore une fois, nous savons

06:35.112 --> 06:39.620
avec certitude que ce ne sera pas le cas, et getElementById ne sait pas

06:39.620 --> 06:42.283
que ce sera un élément HTML div donc, nous devrions

06:43.430 --> 06:46.030
le couler ici aussi.

06:46.030 --> 06:48.150
Et avec cela, nous pouvons maintenant trouver

06:48.150 --> 06:51.210
comment accéder à tous les éléments dont nous avons besoin.

06:51.210 --> 06:53.990
Eh bien, on a beaucoup parlé de ça.

06:53.990 --> 06:56.070
Avec cela, nous n'avons malheureusement pas obtenu grand-chose.

06:56.070 --> 06:59.140
Nous avons accès à ces éléments

06:59.140 --> 07:01.970
mais nous n'y rendons rien.

07:01.970 --> 07:03.940
Continuons donc avec ça.

07:03.940 --> 07:05.790
Pour cela, nous devons importer le contenu

07:05.790 --> 07:08.020
de cet élément de modèle, c'est-à-dire importer

07:08.020 --> 07:10.620
ce qui se trouve à l'intérieur des balises du modèle et le

07:10.620 --> 07:11.760
rendre dans le DOM.

07:11.760 --> 07:15.520
Nous pouvons le faire ici, dans le constructeur, parce que mon

07:15.520 --> 07:17.603
idée, et bien sûr, c'est juste mon idée,

07:18.510 --> 07:20.270
vous pourriez configurer cela

07:20.270 --> 07:21.870
différemment.

07:21.870 --> 07:22.940
Mais mon idée est que lorsque

07:22.940 --> 07:24.550
nous créons une nouvelle instance de cette

07:24.550 --> 07:26.430
classe, je veux immédiatement rendre un formulaire

07:26.430 --> 07:28.250
qui appartient à cette instance.

07:28.250 --> 07:30.190
Donc on va le faire directement dans le constructeur.

07:30.190 --> 07:31.770
Là, nous pouvons obtenir notre

07:31.770 --> 07:34.420
noeud importé ou notre contenu HTML importé

07:34.420 --> 07:37.430
ou quel que soit le nom que vous voulez lui donner, que

07:37.430 --> 07:40.627
nous pouvons obtenir avec le document importNode et c'est

07:40.627 --> 07:44.917
une méthode fournie sur l'objet document global et à importNode vous passez

07:45.860 --> 07:49.260
un pointeur à votre élément de modèle.

07:49.260 --> 07:52.650
Donc cet élément de modèle à la fin, ou pour être précis pas l'élément

07:52.650 --> 07:54.410
mais le contenu du point là.

07:54.410 --> 07:57.010
Le contenu est une propriété qui

07:57.010 --> 08:00.891
existe sur les éléments de modèle HTML et qui donne

08:00.891 --> 08:05.320
simplement une référence au contenu d'un modèle.

08:05.320 --> 08:07.480
Donc au code HTML entre le texte du modèle.

08:07.480 --> 08:09.520
ImportNode prend également un

08:09.520 --> 08:13.306
second argument qui définit s'il doit importer ce dernier

08:13.306 --> 08:15.670
avec un clone profond ou non.

08:15.670 --> 08:17.940
Donc tous les niveaux d'imbrication à l'intérieur du modèle et je veux

08:17.940 --> 08:19.630
absolument le faire donc je vais fournir true ici.

08:19.630 --> 08:22.570
Maintenant, nous avons le importedNode et comme

08:22.570 --> 08:26.340
vous le verrez, il est de type fragment de document que typescript

08:26.340 --> 08:28.830
a supposé ou déduit automatiquement.

08:28.830 --> 08:30.770
Maintenant nous pouvons utiliser

08:30.770 --> 08:34.910
ce importedNode, et bien sûr je veux l'utiliser pour rendre du contenu.

08:34.910 --> 08:36.960
Pour cela, je vais ajouter une nouvelle

08:36.960 --> 08:40.970
méthode, une méthode privée que je vais nommer attach.

08:40.970 --> 08:42.810
Tu n'as pas besoin de faire ça, je veux juste

08:42.810 --> 08:45.150
séparer ma sélection et ma logique de rendu.

08:45.150 --> 08:46.390
À l'intérieur de l'attachement,

08:46.390 --> 08:51.270
je vais atteindre l'élément hôte, c'est-à-dire l'endroit où je veux rendre

08:51.270 --> 08:54.930
mon contenu et appeler insertAdjacentElement qui est une

08:54.930 --> 08:57.840
méthode par défaut fournie par le navigateur

08:57.840 --> 09:00.770
à la fin en JavaScript.

09:00.770 --> 09:02.980
Pour insérer l'élément HTML un élément

09:02.980 --> 09:04.340
adjacent d'insertion,

09:04.340 --> 09:08.778
prend tout d'abord une description de l'endroit où l'insérer, donc là vous pouvez

09:08.778 --> 09:13.180
l'insérer après le début de l'élément que vous ciblez, donc juste après la balise

09:13.180 --> 09:16.680
d'ouverture de l'élément hôte, avant le début ou avant la balise

09:16.680 --> 09:17.850
d'ouverture, avant la

09:17.850 --> 09:20.870
balise de fin ou après la balise de fin.

09:20.870 --> 09:23.570
Et là je vais aller pour après commencer à

09:23.570 --> 09:27.020
l'insérer juste au début de la balise d'ouverture.

09:27.020 --> 09:30.580
Et ensuite, la chose que je veux insérer est mon importedNode

09:30.580 --> 09:33.053
cependant, tout d'abord c'est une constante

09:34.900 --> 09:39.140
seulement disponible dans le constructeur et deuxièmement,

09:39.140 --> 09:42.970
c'est un fragment de document.

09:42.970 --> 09:44.630
Nous ne pouvions pas l'insérer comme ça.

09:44.630 --> 09:46.896
Au lieu de cela, nous devons accéder à l'élément HTML concret

09:46.896 --> 09:48.240
qui s'y trouve, que nous pouvons stocker

09:48.240 --> 09:49.800
dans un autre élément de propriété.

09:49.800 --> 09:52.770
Nous devons également ajouter un champ qui

09:52.770 --> 09:55.560
peut être de type élément HTML ou dans notre

09:55.560 --> 09:58.270
cas, nous savons qu'il sera à l'intérieur

09:58.270 --> 10:02.500
du modèle ici, donc ce sera un formulaire.

10:02.500 --> 10:05.790
C'est le premier élément du modèle.

10:05.790 --> 10:07.010
Donc ici, nous pouvons

10:07.010 --> 10:09.470
dire que ce sera un élément de formulaire HTML,

10:09.470 --> 10:10.960
et puis ici, cet élément est

10:10.960 --> 10:15.200
égal à importNode firstElementChild, maintenant nous avons juste à dire

10:15.200 --> 10:20.106
à nouveau à typescript, que ce sera un élément de formulaire HTML.

10:20.106 --> 10:22.199
Cet élément est maintenant la propriété

10:22.199 --> 10:25.510
concrète qui pointe vers le noeud que nous voulons insérer.

10:25.510 --> 10:28.360
Donc en bas, dans insertAdjacentElement,

10:28.360 --> 10:31.110
nous insérons cet élément ici.

10:31.110 --> 10:33.690
Maintenant, nous devons juste nous assurer qu'ici,

10:33.690 --> 10:36.350
dans le constructeur, à la fin de celui-ci, nous

10:36.350 --> 10:38.460
appelons attach, donc cette méthode

10:38.460 --> 10:39.950
privée attach, afin que ce

10:39.950 --> 10:42.260
code s'exécute également.

10:42.260 --> 10:44.290
Et maintenant, avec tout le formatage,

10:44.290 --> 10:46.620
voici à quoi ressemble mon code.

10:46.620 --> 10:48.200
C'est donc maintenant la classe

10:48.200 --> 10:51.460
d'entrée du projet, et théoriquement, lorsque nous l'instancions,

10:51.460 --> 10:53.950
elle devrait rendre le formulaire.

10:53.950 --> 10:56.920
Maintenant, faisons un essai.

10:56.920 --> 10:59.440
Sous la classe, créons simplement une nouvelle constante, prjInput

10:59.440 --> 11:01.120
par exemple, le nom est à votre convenance.

11:01.120 --> 11:05.415
Et appelez le nouveau projet Input comme ceci.

11:05.415 --> 11:08.930
Et si nous sauvegardons maintenant, il devrait recompiler

11:08.930 --> 11:11.783
et recharger et si vous retournez au navigateur,

11:11.783 --> 11:16.050
vous devriez voir ce formulaire ici.

11:16.050 --> 11:17.990
C'est super, parce qu'avec ça,

11:17.990 --> 11:20.660
on a fait un premier pas très important.

11:20.660 --> 11:22.450
Nous avons notre formulaire

11:22.450 --> 11:26.930
rendu et même s'il manque beaucoup de choses, c'est

11:26.930 --> 11:29.150
mieux que rien.

11:29.150 --> 11:31.630
Ce formulaire provient du fichier html

11:31.630 --> 11:33.010
de l'index et il est rendu

11:33.010 --> 11:36.430
avec l'aide de notre code orienté objet là-haut.
