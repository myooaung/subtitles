WEBVTT

00:02.100 --> 00:04.890
المعلم: لفهم الفئات دعنا نفهم البرمجة

00:04.890 --> 00:07.040
الموجهة للكائنات.

00:07.040 --> 00:10.050
الآن ، بناءً على مستوى معرفتك وإذا كنت

00:10.050 --> 00:12.560
تعمل باستخدام JavaScript حديث

00:12.560 --> 00:15.340
وربما بعض لغات البرمجة الأخرى ، فقد

00:15.340 --> 00:18.320
تكون على دراية بالفصول الموجودة وما

00:18.320 --> 00:22.270
هي البرمجة الموجهة للكائنات OOP.

00:22.270 --> 00:24.570
لذلك يمكنك أيضًا تخطي هذه المحاضرة للانتقال

00:24.570 --> 00:27.720
مباشرة إلى الأجزاء التي نكتب فيها الكود.

00:27.720 --> 00:29.330
وإلا ستظل معي بالتأكيد

00:29.330 --> 00:32.200
لأنه من المهم فهم ذلك.

00:32.200 --> 00:35.240
ستكون الفكرة وراء البرمجة الموجهة للكائنات

00:35.240 --> 00:38.550
والفئات مهمة لذلك كما سترى ، هي أنك تعمل مع كيانات

00:38.550 --> 00:41.630
واقعية في التعليمات البرمجية الخاصة بك التي

00:41.630 --> 00:43.110
يمكنك قولها.

00:43.110 --> 00:47.370
حتى تتمكن من العمل مع أشياء في التعليمات البرمجية الخاصة بك باستخدام

00:47.370 --> 00:52.110
كائنات تشبه الكائنات الواقعية إلى أقصى حد ممكن على الأقل لتسهيل الأمر

00:52.110 --> 00:54.410
عليك كمطور للتفكير في التعليمات البرمجية

00:54.410 --> 00:56.250
الخاصة بك.

00:56.250 --> 00:59.150
على سبيل المثال ، قد نبني متجرًا عبر الإنترنت وقد

00:59.150 --> 01:01.270
يكون لدينا قائمة منتجات هناك.

01:01.270 --> 01:05.190
لذلك قد نرغب في العمل مع كائن قائمة المنتجات ، والذي يحتوي

01:05.190 --> 01:08.140
على كل ما نحتاجه لإدارة قائمة المنتجات.

01:08.140 --> 01:11.570
طريقة لإضافة منتجات إلى المنتجات الرائدة

01:11.570 --> 01:13.370
، القائمة نفسها.

01:13.370 --> 01:15.670
لذلك ، على سبيل المثال ، قد يكون هذا

01:15.670 --> 01:18.360
كائنًا مسؤولاً عن تقديم قائمة بالمنتجات

01:18.360 --> 01:19.540
وإدارتها ، والتي

01:19.540 --> 01:22.840
تم جلبها من خدمة أو من قاعدة بيانات.

01:22.840 --> 01:25.530
لذا فإن هذا المنتج يحمل كل منطق العرض

01:25.530 --> 01:27.260
والجلب والإدارة.

01:27.260 --> 01:29.420
الآن هذه قائمة المنتجات.

01:29.420 --> 01:32.510
في برنامجنا إلى موقع الويب الذي نقوم ببنائه

01:32.510 --> 01:33.870
، قد نحتاج أيضًا إلى

01:33.870 --> 01:36.000
العمل مع المنتج الفردي.

01:36.000 --> 01:39.540
لذلك قد نريد أيضًا كائنًا أو كائنات متعددة

01:39.540 --> 01:40.960
؛ واحد لكل منتج يكون

01:40.960 --> 01:43.930
مسؤولاً عن إدارة المنتج الواحد.

01:43.930 --> 01:47.180
قد يحمل تفاصيل حول هذا المنتج ويعرضها ، وربما

01:47.180 --> 01:49.830
يسمح لنا بإضافته إلى عربة ، أشياء من

01:49.830 --> 01:51.260
هذا القبيل.

01:51.260 --> 01:54.900
لذلك عندما نريد رسم واجهة المستخدم على الشاشة ، نريد إدارة

01:54.900 --> 01:57.010
ذلك من خلال JavaScript وبالتالي

01:57.010 --> 01:58.740
من خلال TypeScript ، فيمكننا

01:58.740 --> 02:00.550
تنفيذ ذلك باستخدام قائمة المنتجات

02:00.550 --> 02:02.970
وكائن المنتج الذي يحمل المنطق لإدارة

02:02.970 --> 02:05.370
البيانات الأساسية ، ولكن أيضًا لتقديم

02:05.370 --> 02:07.760
المحتوى على الشاشة.

02:07.760 --> 02:10.010
وبالطبع فإن هذين العنصرين سيكونان

02:10.010 --> 02:11.940
مرتبطين نوعًا ما.

02:11.940 --> 02:14.790
قد يكون لدينا أيضًا عنصر عربة تسوق على شاشتنا

02:14.790 --> 02:16.410
، وهو مسؤول عن تقديم بطاقة

02:16.410 --> 02:18.040
التسوق وإدارتها.

02:18.040 --> 02:20.380
إنه بالطبع متصل أيضًا بالمنتج.

02:20.380 --> 02:22.930
وبالتالي فهي تحمل كل المنطق الذي نحتاجه

02:22.930 --> 02:24.880
لتقديم بطاقة التسوق الخاصة بنا

02:24.880 --> 02:27.240
، وتقديم الطلبات والتواصل مع الخادم وما

02:27.240 --> 02:28.073
إلى ذلك.

02:28.073 --> 02:31.190
لذلك ، ستكون هذه طريقة واحدة لكيفية التفكير في

02:31.190 --> 02:33.010
التطبيق الذي نقوم ببنائه.

02:33.010 --> 02:35.590
كيف يمكننا تقسيمها إلى أجزاء منطقية

02:35.590 --> 02:37.670
منطقية لنا كبشر.

02:37.670 --> 02:40.320
وفي الكود في TypeScript و JavaScript

02:40.320 --> 02:42.920
، في معظم لغات البرمجة الحديثة ،

02:42.920 --> 02:46.750
يتم دعم هذا بشكل نشط لأن لدينا كائنات هي هياكل بيانات

02:46.750 --> 02:48.900
أكثر تعقيدًا تحتوي على خصائص

02:48.900 --> 02:50.640
وطرق.

02:50.640 --> 02:53.340
وبالطبع لدينا ذلك في JavaScript أيضًا.

02:53.340 --> 02:57.310
ولكن قد يكون لدينا أيضًا فصول تساعدنا في ذلك.

02:57.310 --> 02:59.100
الآن ما هي الفكرة من وراء الحصص؟

02:59.100 --> 03:00.740
وما هي الحالات؟

03:00.740 --> 03:02.030
عندما نحصل على هذه

03:02.030 --> 03:04.690
الكائنات وعند اتباع هذا النهج الموجه

03:04.690 --> 03:07.500
للكائنات ، يمكننا التفكير في تقسيم

03:07.500 --> 03:11.130
تطبيقنا أو منطق تطبيقنا إلى مثل هذه الكائنات التي

03:11.130 --> 03:13.750
تدير أجزاء من منطقنا.

03:13.750 --> 03:17.000
الآن مرتبطًا بفكرة استخدام هذه الكائنات

03:17.000 --> 03:19.340
التي توجد بالطبع في JavaScript

03:19.340 --> 03:23.910
، يمكننا استخدام الكائنات هناك كفكرة وجود فئات.

03:23.910 --> 03:27.470
الكائنات هي الأشياء الملموسة التي نعمل معها في الكود الخاص بنا.

03:27.470 --> 03:30.380
هياكل البيانات التي نستخدمها لتخزين البيانات

03:30.380 --> 03:33.450
لتخزين الأساليب لتنفيذ الأساليب عليها.

03:33.450 --> 03:36.570
الفئات هي مخططات للكائنات.

03:36.570 --> 03:40.880
تسمح لنا الفئات بتحديد الشكل الذي يجب أن تبدو عليه الأشياء ؛ ما هي البيانات

03:40.880 --> 03:42.230
التي يجب أن يحتفظوا بها

03:42.230 --> 03:44.070
، والطرق التي يجب أن يمتلكوها

03:44.070 --> 03:48.240
، حتى نتمكن بسهولة من بناء كائنات بناءً على هذه الفئات.

03:48.240 --> 03:51.830
وبعد ذلك نسمي هذا حالات من الطبقات.

03:51.830 --> 03:54.830
إذن الكائن هو مثيل لفئة إذا كان يعتمد

03:54.830 --> 03:56.850
على مثل هذه الفئة ، حتى نتمكن

03:56.850 --> 03:59.900
من تكرار كائنات متعددة بنفس البنية

03:59.900 --> 04:02.230
وبنفس الطرق بناءً على نفس

04:02.230 --> 04:04.090
الفئات.

04:04.090 --> 04:07.280
لذا تساعدنا الفئات في تحديد الشكل الذي يجب أن تبدو عليه الكائنات

04:07.280 --> 04:10.170
، والخصائص والطرق التي تمتلكها وما إلى ذلك.

04:10.170 --> 04:14.920
لذلك ، توجد الفصول لتسريع إنشاء الكائنات.

04:14.920 --> 04:16.160
وهو ببساطة بديل لاستخدام

04:16.160 --> 04:20.070
التدوين الحرفي للشيء الذي تعرفه بالفعل.

04:20.070 --> 04:21.330
هم ببساطة يجعلون الأمر أسهل.

04:21.330 --> 04:24.620
تعمل الفئات ببساطة على تسهيل إنشاء كائنات

04:24.620 --> 04:26.900
متعددة لها نفس البنية بشكل عام

04:26.900 --> 04:28.030
ونفس الطرق ، والتي

04:28.030 --> 04:31.500
قد تختلف فقط في تفاصيل البيانات الدقيقة المخزنة

04:31.500 --> 04:32.780
هناك.

04:32.780 --> 04:34.540
لنفترض أن لدينا عدة أشخاص

04:34.540 --> 04:36.670
نريد تمثيلهم مع الأشياء.

04:36.670 --> 04:39.330
حسنًا ، قد يكون لكل شخص اسم وعمر

04:39.330 --> 04:40.830
، وستختلف القيم ،

04:40.830 --> 04:43.310
والبنية العامة هي نفسها.

04:43.310 --> 04:44.500
هذه هي النظرية.

04:44.500 --> 04:46.113
دعونا نراه في الممارسة العملية.
