WEBVTT

00:02.300 --> 00:03.830
Instructeur: Dus we werken hier

00:03.830 --> 00:07.350
nogal veel met onze afdeling en ik heb mijn boekhoudafdeling opgericht.

00:07.350 --> 00:09.610
Voor de toepassing die we bouwen, hebben

00:09.610 --> 00:12.120
we natuurlijk afdelingen nodig, maar misschien

00:12.120 --> 00:14.320
hebben we meer informatie nodig voor de

00:14.320 --> 00:16.660
specifieke soorten afdelingen.

00:16.660 --> 00:18.830
We kunnen een IT-afdeling hebben,

00:18.830 --> 00:22.680
die een ID heeft, die een naam heeft, die werknemers heeft, maar

00:22.680 --> 00:24.900
die ook beheerders heeft, iets wat

00:24.900 --> 00:28.180
bijvoorbeeld alleen de IT-afdeling heeft.

00:28.180 --> 00:30.340
We zouden de boekhoudafdeling kunnen

00:30.340 --> 00:34.280
hebben, die ook een ID, een naam en werknemers zou kunnen hebben,

00:34.280 --> 00:37.470
maar ook, laten we zeggen, rapporten.

00:37.470 --> 00:41.030
Een reeks rapporten die het genereert, enzovoort.

00:41.030 --> 00:44.541
U kunt dus enkele basiseigenschappen en methoden hebben die alle afdelingen

00:44.541 --> 00:46.970
zouden moeten hebben, maar dan kunnen we gespecialiseerde

00:46.970 --> 00:49.050
versies van deze afdelingen hebben met hun

00:49.050 --> 00:51.900
eigen specifieke eigenschappen en methoden die alleen

00:51.900 --> 00:54.660
die afdeling kan hebben.

00:54.660 --> 00:58.100
Een overerving kan ons helpen zoiets te implementeren.

00:58.100 --> 01:00.010
Dus hoe kunnen we hier gebruik maken van overerving?

01:00.010 --> 01:01.670
Nou we hebben onze klasse afdeling.

01:01.670 --> 01:05.130
Laten we nu deze gespecialiseerde afdelingen creëren.

01:05.130 --> 01:08.483
Dus hier zouden we een klasse IT afdeling kunnen hebben.

01:09.610 --> 01:14.010
En in deze klasse hier, wil ik de naam en de ID en de werknemers van

01:14.010 --> 01:17.270
de algemene afdeling gebruiken, maar ik wil mijn

01:17.270 --> 01:19.537
eigen kenmerken toevoegen.

01:19.537 --> 01:21.970
Nu kunnen we de afdelingsklasse erven door hier

01:21.970 --> 01:24.270
het extends sleutelwoord te gebruiken en dan

01:24.270 --> 01:25.970
de klasse die we willen erven.

01:25.970 --> 01:27.530
In dit geval is dat afdeling.

01:27.530 --> 01:30.600
Nu, belangrijk is dat je maar van één klasse kunt erven,

01:30.600 --> 01:33.010
dus je kunt niet van meerdere klassen erven,

01:33.010 --> 01:34.660
als je dat nodig zou hebben.

01:34.660 --> 01:38.070
Dus nu, hier, erf ik van department en een gevolg

01:38.070 --> 01:40.700
is dat als ik nu hier een IT-afdeling

01:40.700 --> 01:44.560
maak, ik het inderdaad zo kan aanroepen, met dit soort

01:44.560 --> 01:46.640
constructor, ook al is de IT-afdeling

01:46.640 --> 01:49.400
klasse leeg.

01:49.400 --> 01:52.830
Als we dat opslaan, zien we inderdaad dat het werkt

01:52.830 --> 01:55.152
zoals voorheen, want als we erven van

01:55.152 --> 01:59.610
een andere klasse, krijgt de klasse die erft automatisch alles wat

01:59.610 --> 02:02.870
de basisklasse, afdeling in dit geval, heeft, inclusief

02:02.870 --> 02:06.072
zijn constructor, dus zolang we geen speciale constructor

02:06.072 --> 02:11.072
toevoegen voor deze geërfde klasse, dus voor deze subklasse, de constructor

02:11.130 --> 02:14.760
van de basisklasse, dus deze constructor wordt automatisch

02:14.760 --> 02:20.800
gebruikt als we onze subklasse instantiëren.

02:20.800 --> 02:25.170
Dus uiteindelijk roepen we op magische wijze de constructor van de basisklasse aan

02:25.170 --> 02:27.562
met de argumenten die we hier doorgeven.

02:27.562 --> 02:30.350
Maar nu kunnen we onze eigen constructor toevoegen,

02:30.350 --> 02:33.570
door hier in IT afdeling constructor toe te voegen en

02:33.570 --> 02:35.800
nu zie je dat ik fouten krijg.

02:35.800 --> 02:38.580
Ten eerste moeten we nu natuurlijk de gegevens accepteren

02:38.580 --> 02:40.850
die we hier krijgen, hoewel we zouden kunnen aanvoeren

02:40.850 --> 02:44.120
dat de naam niet iets is wat we hier hoeven door te geven.

02:44.120 --> 02:46.430
En het moet niet ook de boekhouding zijn.

02:46.430 --> 02:49.110
Maar in plaats daarvan kan hier de naam van de afdeling,

02:49.110 --> 02:52.563
omdat het de klasse van de IT-afdeling is, altijd IT zijn.

02:53.700 --> 02:56.910
Ik wil echter nog steeds mijn ID accepteren,

02:56.910 --> 03:01.130
maar nu wil ik dat in wezen net als de vaste naam IT

03:01.130 --> 03:04.120
doorsturen naar de constructeur van

03:04.120 --> 03:06.420
departement.

03:06.420 --> 03:09.240
En daarvoor hebben we een speciaal sleutelwoord dat we kunnen,

03:09.240 --> 03:11.120
en in dit geval moeten, gebruiken.

03:11.120 --> 03:13.210
En dat is super.

03:13.210 --> 03:15.580
Wanneer je een eigen constructor toevoegt

03:15.580 --> 03:18.400
in een klasse die erft van een andere klasse, moet

03:18.400 --> 03:21.200
je super toevoegen in de ervende klasse en moet

03:21.200 --> 03:23.790
je het uitvoeren als een functie.

03:23.790 --> 03:28.070
Super roept hier de constructor van de basisklasse aan,

03:28.070 --> 03:31.300
dus afdeling constructor in dit geval.

03:31.300 --> 03:33.690
En nu neemt de andere super de argumenten

03:33.690 --> 03:37.630
van de constructor van de ouderklasse, de ID en de naam.

03:37.630 --> 03:41.060
Dus hier kan ik ID doorsturen, dus ID die ik hier krijg wordt

03:41.060 --> 03:44.360
gewoon doorgegeven aan super, en ik kan een waarde hard

03:44.360 --> 03:46.860
coderen voor de naam, zoals IT.

03:46.860 --> 03:48.840
Dus dit roept nu de constructor

03:48.840 --> 03:52.500
van de basisklasse aan vanuit de subklasse.

03:52.500 --> 03:55.310
Nu, belangrijk, je moet super eerst aanroepen

03:55.310 --> 03:58.220
in je constructor voordat je iets doet met het "this"

03:58.220 --> 03:59.700
sleutelwoord.

03:59.700 --> 04:03.860
Dus als u van plan bent hier andere speciale eigenschappen toe te wijzen,

04:03.860 --> 04:06.670
moet u dat doen na het aanroepen van super.

04:06.670 --> 04:10.346
En ik wil hier inderdaad mijn eigen speciale eigenschappen aan toevoegen.

04:10.346 --> 04:13.528
We kunnen onze admins hier toevoegen.

04:13.528 --> 04:17.800
Laten we zeggen als particulier, of als publiek, eigenlijk.

04:17.800 --> 04:20.878
Als een publieke eigenschap, admins,

04:20.878 --> 04:25.630
en dat moet een array van strings zijn, laten we zeggen.

04:25.630 --> 04:27.780
Dan wil ik dit niet doorsturen

04:27.780 --> 04:31.460
naar mijn basisklasse, want de afdelingsklasse

04:31.460 --> 04:34.670
wil geen beheerdersgegevens.

04:34.670 --> 04:38.800
In plaats daarvan wil ik dit opslaan in een eigenschap van IT-afdeling,

04:38.800 --> 04:42.150
zodat we hier admins kunnen toevoegen als een veld dat een

04:42.150 --> 04:44.922
paar beheerders neemt en admins daarin kunnen

04:44.922 --> 04:47.290
opslaan, of omdat ik hier public gebruik,

04:47.290 --> 04:49.070
gebruik ik al die snelkoppeling

04:49.070 --> 04:52.020
waarbij een eigenschap met dezelfde naam wordt aangemaakt

04:52.020 --> 04:55.160
en de gegevens die we in dit argument invoeren, worden

04:55.160 --> 04:57.530
opgeslagen in die automatisch aangemaakte

04:57.530 --> 05:00.148
eigenschap.

05:00.148 --> 05:03.710
Om toch duidelijk te maken dat super eerst gebeld

05:03.710 --> 05:07.610
moet worden, neem ik de langere weg, voeg hier admins

05:07.610 --> 05:12.610
toe, zo, en dan hier zeggen, dit. admins = admins.

05:13.260 --> 05:15.160
Nogmaals, de kortere weg zou korter zijn.

05:15.160 --> 05:17.830
Ik doe dit om duidelijk te maken dat als je

05:17.830 --> 05:21.020
iets gebruikt dat het sleutelwoord "this" gebruikt,

05:21.020 --> 05:24.480
je dat moet doen na het aanroepen van super.

05:24.480 --> 05:27.640
En als we dat opslaan, krijg ik een foutmelding, omdat

05:27.640 --> 05:29.530
ik geen admins doorgeef, dus laten

05:29.530 --> 05:30.920
we dat hier doen.

05:30.920 --> 05:33.920
Max is de enige admin die ik hier passeer.

05:33.920 --> 05:36.950
Nu kunnen we dat opslaan en zonder fouten compileren

05:36.950 --> 05:39.910
en nu zien we hier inderdaad onze afdeling.

05:39.910 --> 05:41.840
Het heeft nu de naam IT.

05:41.840 --> 05:44.670
En als we de hele afdeling loggen,

05:44.670 --> 05:49.670
en we kunnen dit misschien hernoemen van boekhouding naar

05:50.220 --> 05:54.250
IT en dan console. log IT hier in.

05:54.250 --> 05:57.570
Natuurlijk was die naamsverandering optioneel, het is gewoon logischer,

05:57.570 --> 06:00.160
aangezien we hier een IT-afdeling aan het opbouwen zijn.

06:00.160 --> 06:02.510
Nu ik de hele afdeling heb gelogd,

06:02.510 --> 06:06.110
zien we inderdaad dat we admins hebben, maar ook medewerkers

06:06.110 --> 06:11.110
en alles wat ik hier in mijn afdelingsklasse heb ingesteld.

06:12.000 --> 06:13.990
Dus dat is erfenis in actie, een

06:13.990 --> 06:16.520
zeer nuttige functie, want nu kunnen

06:16.520 --> 06:20.770
we natuurlijk ook onze boekhoudafdeling hier creëren door afdeling

06:20.770 --> 06:23.260
uit te breiden en daar kunnen we dan onze

06:23.260 --> 06:27.030
boekhoudspecifieke dingen toevoegen.

06:27.030 --> 06:29.540
Dus we kunnen hier nog steeds een constructor

06:29.540 --> 06:31.700
gebruiken, en nu misschien met de snelkoppeling,

06:31.700 --> 06:34.400
hier een paar rapporten accepteren die misschien

06:34.400 --> 06:36.170
een privé-eigendom zijn en dan hebben

06:36.170 --> 06:40.950
we addReport die tekst neemt, wat een string zou moeten zijn, en dan reiken we uit naar rapporten

06:40.950 --> 06:45.360
hier en duwen tekst als een item in het rapport en misschien hebben we ook getReports

06:45.360 --> 06:56.990
hier en daar hebben we gewoon console.

06:56.990 --> 06:56.990
log (dit. rapporten)

06:57.563 --> 07:00.860
of we noemen het printReports, daarom is het logischer.

07:00.860 --> 07:02.720
En nu zouden we een heel speciale versie

07:02.720 --> 07:04.890
van een afdeling hebben met twee methoden die

07:04.890 --> 07:06.740
de basisafdeling niet heeft en met een

07:06.740 --> 07:08.100
extra eigenschap die de basisafdeling

07:08.100 --> 07:09.840
niet heeft.

07:09.840 --> 07:13.000
En toch krijgen we alles van de basisafdeling.

07:13.000 --> 07:15.560
De naam, die ik hier op accounting zet, en

07:15.560 --> 07:17.950
de ID, die we ook doorsturen naar de constructor

07:17.950 --> 07:20.260
van de basisafdeling.

07:20.260 --> 07:22.120
En daarmee, daar beneden,

07:22.120 --> 07:24.770
als we onze boekhouding aanmaken

07:24.770 --> 07:27.510
met nieuwe AccountingDepartment,

07:27.510 --> 07:31.750
kunnen we onze ID invoeren en dan onze rapporten.

07:31.750 --> 07:34.340
Laten we zeggen dat het aanvankelijk een lege matrix is.

07:34.340 --> 07:39.340
Dan kunnen we addReport aanroepen, er ging iets mis, nooit zo goed natuurlijk,

07:40.550 --> 07:43.446
in de boekhouding denk ik, en dan kunnen

07:43.446 --> 07:48.446
we ook onze rapporten hier zo afdrukken en met dat alles compileert het

07:50.070 --> 07:52.630
prima en krijgen we het rapport hier

07:52.630 --> 07:55.710
en we zien, de IT afdeling bijvoorbeeld, zou

07:55.710 --> 07:58.890
geen rapporten hebben.

07:58.890 --> 08:01.820
De boekhoudafdeling doet dat door overerving, waarbij

08:01.820 --> 08:05.623
we bepaalde functies erven en onze eigen functies toevoegen.
