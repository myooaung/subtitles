WEBVTT

00:02.120 --> 00:04.590
Istruttore: Come ho detto nell'ultima lezione, la

00:04.590 --> 00:06.080
modalità watch è un ottimo inizio,

00:06.080 --> 00:08.910
ma cosa succede se abbiamo più di un file TypeScript?

00:08.910 --> 00:13.370
E se avessimo anche un'analisi. ts dove ipoteticamente

00:13.370 --> 00:18.370
inviamo i dati di analisi al nostro server?

00:18.530 --> 00:21.430
Ora, per avere qualsiasi cosa lì dentro, inserirò

00:21.430 --> 00:24.240
una console. ma naturalmente si potrebbero

00:24.240 --> 00:26.710
inviare richieste HTTP al servizio di

00:26.710 --> 00:29.180
analisi, come ho detto.

00:29.180 --> 00:32.685
Supponiamo di aver importato questo file

00:32.685 --> 00:36.420
nel nostro indice. file html.

00:36.420 --> 00:40.320
Se puntiamo all'analisi. js che non esiste ancora, ma che

00:40.320 --> 00:41.730
esisterà dopo la compilazione,

00:41.730 --> 00:44.760
allora potremmo caricare questi due file e, ovviamente,

00:44.760 --> 00:46.660
vogliamo compilare entrambi

00:46.660 --> 00:50.900
i file ogni volta che uno di essi cambia.

00:50.900 --> 00:52.490
A questo punto, sarebbe bello

00:52.490 --> 00:55.320
poter accedere a una modalità di controllo generale,

00:55.320 --> 00:57.630
in cui basta eseguire tsc in questo modo, senza

00:57.630 --> 00:59.790
indicare un file, per controllare l'intera

00:59.790 --> 01:02.480
cartella del progetto e ricompilare qualsiasi

01:02.480 --> 01:05.823
file TypeScript che potrebbe cambiare.

01:06.720 --> 01:08.960
Ebbene, è emerso che questo è possibile.

01:08.960 --> 01:11.340
Per questo dobbiamo solo dire a

01:11.340 --> 01:15.020
TypeScript che questo è un progetto che deve essere

01:15.020 --> 01:16.750
gestito con TypeScript

01:16.750 --> 01:18.980
e lo facciamo innanzitutto, e

01:18.980 --> 01:20.700
dobbiamo farlo solo una

01:20.700 --> 01:23.710
volta, eseguendo tsc --init.

01:23.710 --> 01:26.170
Quindi non sto puntando a un file specifico,

01:26.170 --> 01:29.540
ma eseguo semplicemente tsc e poi --init qui e di nuovo, questo

01:29.540 --> 01:31.230
è richiesto solo una volta.

01:31.230 --> 01:33.530
Inizializzerà il progetto in cui si esegue

01:33.530 --> 01:36.390
questo comando come progetto TypeScript.

01:36.390 --> 01:39.910
Ciò significa che ora dirà a TypeScript che tutto ciò che si trova

01:39.910 --> 01:41.850
nella cartella in cui si esegue questo

01:41.850 --> 01:44.160
comando, è importante che si sia navigato

01:44.160 --> 01:46.470
nella cartella giusta prima di eseguire

01:46.470 --> 01:48.070
questo comando con il terminale

01:48.070 --> 01:50.550
integrato qui in VS Code.

01:50.550 --> 01:52.910
Sono automaticamente in questa cartella di progetto,

01:52.910 --> 01:55.740
dove si trovano i miei file, in modo che questo progetto sia

01:55.740 --> 01:57.370
ora gestito da TypeScript.

01:57.370 --> 01:58.400
Quindi premiamo Invio

01:58.400 --> 02:02.634
e questo crea questo tsconfig. json.

02:02.634 --> 02:06.580
Questo è fondamentalmente l'indicatore per TypeScript che

02:06.580 --> 02:09.950
il progetto in cui si trova questo file e tutte le sottocartelle

02:09.950 --> 02:12.239
di questa cartella devono essere gestite

02:12.239 --> 02:14.710
da TypeScript.

02:14.710 --> 02:16.080
Ora, se diamo un'occhiata a questo

02:16.080 --> 02:17.860
file, vediamo che ci sono un mucchio di opzioni,

02:17.860 --> 02:19.330
la maggior parte delle quali commentate,

02:19.330 --> 02:22.090
sono lì solo per farvi vedere che potete impostarle e c'è anche una

02:22.090 --> 02:24.500
breve spiegazione, ma non dobbiamo preoccuparci di queste

02:24.500 --> 02:26.380
opzioni in questo momento.

02:26.380 --> 02:29.040
Li analizzeremo tra un attimo.

02:29.040 --> 02:31.610
Per il momento, chiudiamo questo file

02:32.800 --> 02:35.100
e vediamo cosa ci dà, perché ciò che

02:35.100 --> 02:36.550
ci dà è che ora possiamo

02:36.550 --> 02:39.870
eseguire semplicemente tsc in questo modo, senza

02:39.870 --> 02:42.610
puntare a un file specifico.

02:42.610 --> 02:45.550
In questo modo si dirà a TypeScript di procedere

02:45.550 --> 02:49.080
alla compilazione di tutti i file TypeScript, in modo

02:49.080 --> 02:53.090
che tutti i file . Se si preme Invio, ci

02:53.090 --> 02:54.770
vuole un po' di tempo

02:54.770 --> 02:56.830
e ora si ottiene questa

02:56.830 --> 03:02.620
analitica. js e questa applicazione.

03:02.620 --> 03:02.620
file js.

03:02.620 --> 03:05.160
Ora, l'analisi. js è stato creato da

03:05.160 --> 03:08.010
TypeScript perché ha rilevato la presenza

03:08.010 --> 03:10.060
di analytics. ts e, come ho detto,

03:10.060 --> 03:14.730
ora compilerà tutti i file TypeScript del progetto.

03:14.730 --> 03:17.660
Naturalmente, questo può essere combinato con la modalità orologio.

03:17.660 --> 03:20.630
Si può eseguire tsc -w o --watch come ho

03:20.630 --> 03:23.420
mostrato prima e questo entrerà in modalità

03:23.420 --> 03:26.970
watch per tutti i file TypeScript.

03:26.970 --> 03:29.590
Quindi ora, ogni volta che ne modifico uno

03:29.590 --> 03:31.920
e lo salvo, viene ricompilato.

03:31.920 --> 03:33.840
Ricompilerà il file che è stato modificato

03:33.840 --> 03:36.100
e quindi tutti i cambiamenti riflessi nel

03:36.100 --> 03:37.800
file JavaScript.

03:37.800 --> 03:38.633
E ora è qui.

03:38.633 --> 03:41.430
Se torno alla mia pagina, vediamo anche l'invio di dati

03:41.430 --> 03:44.463
perché ora l'analitica. È stato compilato anche il file ts.
