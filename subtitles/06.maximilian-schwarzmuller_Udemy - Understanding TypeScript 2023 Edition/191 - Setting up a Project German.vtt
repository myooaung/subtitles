WEBVTT

00:02.290 --> 00:03.280
Kursleiter: Beginnen

00:03.280 --> 00:06.110
wir also mit unserer Node-Typescript-Anwendung.

00:06.110 --> 00:08.750
Jetzt könnte man meinen, dass wir ein komplexes Setup mit

00:08.750 --> 00:11.170
Webpack und so weiter brauchen, aber das brauchen

00:11.170 --> 00:12.410
wir eigentlich nicht.

00:12.410 --> 00:16.270
Wir verwenden einfach den Befehl tsc, um unsere Dateien zu kompilieren.

00:16.270 --> 00:18.160
Und dann können wir den Befehl node verwenden, um

00:18.160 --> 00:19.890
unsere kompilierten Dateien auszuführen.

00:19.890 --> 00:21.700
Das ist alles, was wir hier brauchen.

00:21.700 --> 00:25.960
Trotzdem werde ich hier ein Projekt mit npm init einrichten, einfach damit

00:25.960 --> 00:28.810
wir ein Paket bekommen. json-Datei, denn da wir hier eine

00:28.810 --> 00:32.250
normale Node-Anwendung erstellen, werden wir einige Drittanbieter-Pakete

00:32.250 --> 00:36.240
wie Express installieren. js.

00:36.240 --> 00:38.470
Außerdem möchte ich ein zusätzliches Tool installieren,

00:38.470 --> 00:40.950
das unseren Entwicklungsprozess vereinfacht.

00:40.950 --> 00:44.630
Führen Sie also npm init hier in einem beliebigen leeren Ordner Ihrer Wahl aus.

00:44.630 --> 00:48.190
Wenn Sie möchten, können Sie hier alle Standardeinstellungen bestätigen, und

00:48.190 --> 00:50.540
schon haben Sie ein Paket. json-Datei, die in

00:50.540 --> 00:52.750
etwa wie folgt aussehen sollte.

00:52.750 --> 00:56.210
Führen Sie hier auch tsc --init aus, um dieses Projekt auch als

00:56.210 --> 00:59.390
Typescript-Projekt zu initialisieren, damit Sie diese

00:59.390 --> 01:01.860
tsconfig erhalten. json-Datei, die Sie nun

01:01.860 --> 01:04.313
in Ihren Anforderungen finden können.

01:05.770 --> 01:09.020
Und da habe ich schon die erste Anpassung, die ich vornehmen will.

01:09.020 --> 01:13.300
Das Ziel hier kann leicht auf es2018 zum Beispiel je nach der Node-Version,

01:13.300 --> 01:16.090
die Sie verwenden, aber wenn Sie die neueste sind,

01:16.090 --> 01:17.750
sollte diese moderne JavaScript-Syntax

01:17.750 --> 01:21.380
definitiv unterstützt werden.

01:21.380 --> 01:24.220
Modul kann bei commonjs bleiben, aber dann möchte

01:24.220 --> 01:27.460
ich auch moduleResolution hier hinzufügen und dies

01:27.460 --> 01:29.010
auf Knoten setzen.

01:29.010 --> 01:33.350
Damit teilen Sie typescript einfach mit, wie Ihre verschiedenen Dateien und

01:33.350 --> 01:35.483
Importe zusammenarbeiten sollen.

01:36.410 --> 01:37.640
Und wir müssen dies auf node setzen,

01:37.640 --> 01:40.020
um sicherzustellen, dass alles richtig funktioniert.

01:40.020 --> 01:42.470
Ich setze auch mein outDir hier, kommentiere

01:42.470 --> 01:44.790
es aus und setze es auf dist, und mein rootDir

01:44.790 --> 01:46.990
auf src, weil ich meinen Typescript-Quellcode

01:46.990 --> 01:49.600
trennen möchte.

01:49.600 --> 01:50.700
Und dann die Ausgabe, die

01:50.700 --> 01:53.170
die tatsächlichen JavaScript-Dateien sein wird,

01:53.170 --> 01:55.733
die wir mit Hilfe von Node ausführen können.

01:56.820 --> 01:58.850
Ansonsten bin ich mit dem strikten Modus zufrieden,

01:58.850 --> 02:00.710
aber natürlich kann man das alles auf seine persönlichen

02:00.710 --> 02:03.030
Bedürfnisse und Vorlieben abstimmen.

02:03.030 --> 02:06.320
Das haben Sie ja in diesem Kurs gelernt.

02:06.320 --> 02:08.830
Und damit können wir diese Konfiguration speichern.

02:08.830 --> 02:11.070
Im Anhang finden Sie übrigens auch eine sehr

02:11.070 --> 02:12.460
einfache Starthilfe.

02:12.460 --> 02:14.120
Sie können diese Konfiguration speichern.

02:14.120 --> 02:16.170
Außerdem werde ich einen Ordner src erstellen,

02:16.170 --> 02:18.130
in den wir unseren Quellcode, unseren Typescript-Quellcode,

02:18.130 --> 02:20.230
schreiben werden.

02:20.230 --> 02:23.020
Und das ist der Teil, in den ich jetzt eintauchen möchte.

02:23.020 --> 02:26.370
Wir werden unsere Anwendung jetzt mit Typescript im

02:26.370 --> 02:27.960
src-Ordner erstellen.

02:27.960 --> 02:30.200
Und da wir einen einfachen Webserver bauen werden und

02:30.200 --> 02:32.920
auch Express verwenden wollen. js gibt, werde ich hier

02:32.920 --> 02:36.120
zunächst einige Abhängigkeiten installieren.

02:36.120 --> 02:38.440
Mit npm install --save möchte ich hier

02:38.440 --> 02:41.040
Express installieren, das Express-Framework

02:41.040 --> 02:44.100
für Node. js, die man natürlich nicht immer

02:44.100 --> 02:45.680
braucht, aber hier möchte ich

02:45.680 --> 02:48.440
eine Node-Express-Anwendung erstellen.

02:48.440 --> 02:51.500
Außerdem wird das Paket body-parser installiert, das

02:51.500 --> 02:54.403
uns beim Parsen eingehender Anfragebodies hilft.

02:55.290 --> 02:58.180
Das war's vorerst mit meinen Produktionsabhängigkeiten.

02:58.180 --> 03:00.110
Später werden wir vielleicht noch mehr hinzufügen.

03:00.110 --> 03:01.523
Also drücken wir hier die Eingabetaste.

03:02.960 --> 03:04.120
Nachdem das installiert

03:04.120 --> 03:07.540
ist, sehen wir uns die Entwicklungsabhängigkeiten an.

03:07.540 --> 03:11.450
Ich werde diese mit npm install --save-dev installieren, und dort möchte

03:11.450 --> 03:13.330
ich modemon installieren, ein Tool,

03:13.330 --> 03:16.340
das uns erlaubt, eine Datei mit Node auszuführen, das dann

03:16.340 --> 03:18.210
aber die Datei und den Ordner, in dem

03:18.210 --> 03:19.820
sich die Datei befindet, sowie

03:19.820 --> 03:22.690
alle Unterordner auf Änderungen überwacht.

03:22.690 --> 03:24.050
Bei jeder Änderung einer Datei

03:24.050 --> 03:26.030
wird der Node-Server neu gestartet.

03:26.030 --> 03:27.620
Dadurch wird die Entwicklung einfach

03:27.620 --> 03:29.510
beschleunigt, da unser Node-Anwendungsserver

03:29.510 --> 03:31.490
bei jeder Änderung des Quellcodes automatisch

03:31.490 --> 03:33.500
neu gestartet wird.

03:33.500 --> 03:36.180
Wir müssen den Server neu starten, wenn sich der Code ändert,

03:36.180 --> 03:39.430
da unser Server sonst immer noch auf dem alten Code läuft, aber ein manueller

03:39.430 --> 03:41.340
Neustart ist lästig, so dass wir dies mit

03:41.340 --> 03:44.190
Nodemon nicht beschleunigen können.

03:44.190 --> 03:47.323
Und das war's dann auch schon.

03:49.290 --> 03:50.340
Also drücken wir hier die Eingabetaste

03:50.340 --> 03:52.360
und installieren diese Entwicklungsabhängigkeit.

03:52.360 --> 03:54.760
Es wird nicht die letzte sein, die wir in diesem Kurs brauchen,

03:54.760 --> 03:56.660
aber im Moment ist alles in Ordnung.

03:56.660 --> 03:58.830
Lassen Sie uns also warten, bis das hier zu Ende ist.

03:58.830 --> 04:00.130
Die Installation ist also abgeschlossen,

04:00.130 --> 04:01.450
und jetzt können wir mit dem Schreiben

04:01.450 --> 04:04.773
und Erstellen einer sehr einfachen Node Express-Anwendung beginnen.
