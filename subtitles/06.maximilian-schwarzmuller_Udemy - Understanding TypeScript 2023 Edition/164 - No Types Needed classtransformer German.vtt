WEBVTT

00:02.270 --> 00:04.040
Kursleiter: Wir haben uns also Lodash angeschaut,

00:04.040 --> 00:05.900
eine Bibliothek eines Drittanbieters, die mit

00:05.900 --> 00:08.270
JavaScript für JavaScript erstellt wurde.

00:08.270 --> 00:11.730
Es gibt auch einige Bibliotheken von Drittanbietern, die Type

00:11.730 --> 00:13.287
Skript und Type Skript-Funktionen

00:13.287 --> 00:16.480
wirklich nutzen und Ihnen eine völlig neue Möglichkeit bieten,

00:16.480 --> 00:18.360
Code zu schreiben, der funktioniert,

00:18.360 --> 00:21.230
weil Sie mit Type Skript arbeiten.

00:21.230 --> 00:24.950
Ein Beispiel ist der Klassentransformator, ein noch besseres Beispiel ist

00:24.950 --> 00:28.067
der Klassenvalidator; wir werden uns beide hier ansehen.

00:28.067 --> 00:31.360
Aber beginnen wir mit der Klasse Transformator.

00:31.360 --> 00:35.870
Sagen wir, in unserem Projekt hier habe ich ein Modell, ein Datenmodell,

00:35.870 --> 00:38.150
nennen wir es "Produkt".

00:38.150 --> 00:41.170
Jetzt werde ich es Produkt nennen. Modell. ts, aber Sie können

00:41.170 --> 00:43.820
diese Datei benennen, wie Sie wollen.

00:43.820 --> 00:48.820
Meine Idee ist, dass ich in dieser Datei eine Klasse für ein Produkt definiere.

00:49.420 --> 00:52.180
Ich beschreibe also, wie ein Produkt aussehen sollte.

00:52.180 --> 00:55.550
Zum Beispiel, dass es einen Titel hat, der ein String ist, und einen

00:55.550 --> 00:59.070
Preis, der eine Zahl ist, und dann füge ich eine Konstruktorfunktion

00:59.070 --> 01:02.120
hinzu, wo beide initialisiert werden können.

01:02.120 --> 01:07.120
Also String, Preis hinzufügen und dann habe ich gesagt, dass dieser Titel gleich 't'

01:07.210 --> 01:09.360
und dieser Preis gleich 'p' ist.

01:09.360 --> 01:10.810
Und natürlich hätten wir auch die verkürzte

01:10.810 --> 01:12.980
Initialisierung verwenden können, bei der wir nur den

01:12.980 --> 01:14.423
Konstruktor verwenden.

01:16.150 --> 01:20.400
Dann sagen wir, wir haben immer eine Methode, get information,

01:20.400 --> 01:25.400
wo ich ein Array zurückgeben, sagen wir, wo das erste Element ist der

01:25.950 --> 01:30.850
Titel und das zweite Element ist eigentlich eine Zeichenfolge,

01:30.850 --> 01:35.770
wo ich Dollar-Zeichen und dann in dieser Zeichenfolge, dieser Preis

01:35.770 --> 01:37.833
injiziert.

01:39.030 --> 01:43.030
Es handelt sich also um ein sehr einfaches Modell, eine sehr einfache Klasse.

01:43.030 --> 01:45.940
Und jetzt können wir diese Klasse natürlich auch in einer

01:45.940 --> 01:49.590
App verwenden, wenn Sie das wollen. ts, also werde ich Lodash loswerden und

01:49.590 --> 01:54.590
stattdessen ein Produkt aus . /Produkt. model Dafür müssen Sie sicherstellen,

01:56.200 --> 01:58.920
dass Sie diese Klasse im Produktmodell tatsächlich

01:58.920 --> 02:01.010
exportieren, sonst können Sie sie nicht

02:01.010 --> 02:03.860
importieren, und hier müssen wir das Produkt so exportieren,

02:03.860 --> 02:05.800
weil ich hier einen benannten Export

02:05.800 --> 02:07.890
verwende, indem ich das Schlüsselwort

02:07.890 --> 02:11.950
export direkt vor der Klasse hinzufüge.

02:11.950 --> 02:16.497
Jetzt können wir hier natürlich ein neues Produkt schaffen,

02:18.150 --> 02:23.150
ein Buch, das 12 kostet. 99 und danach logge ich auf der Konsole p1, um Informationen

02:24.080 --> 02:28.190
zu erhalten, und wir sollten dieses Array tatsächlich protokollieren.

02:28.190 --> 02:31.390
Wenn wir nun npm start hier ausführen, startet unser

02:31.390 --> 02:34.250
Web Pack Dev und wir sollten dieses schöne Array

02:34.250 --> 02:37.340
mit Informationen über dieses Buch sehen.

02:37.340 --> 02:39.463
Wenn ich also hier neu lade, ist es hier.

02:40.630 --> 02:43.170
Das ist jetzt natürlich nicht zu ausgefallen, das funktioniert,

02:43.170 --> 02:44.930
aber das ist ja nichts Neues.

02:44.930 --> 02:47.270
Nun ein gemeinsames Szenario in größeren Anwendungen

02:47.270 --> 02:49.610
ist, dass Sie möglicherweise einige Daten

02:49.610 --> 02:52.150
herunterladen, sagen wir von einem Server, Sie

02:52.150 --> 02:54.490
holen Daten von einem Back-End-Server und

02:54.490 --> 02:58.370
das ist Server dann gibt Ihnen einige json Daten, die Sie übergeben, die

02:58.370 --> 03:01.560
dann eine Liste von Produkten sein könnte.

03:01.560 --> 03:05.520
Hier könnten wir also Produkte haben, die wir vom Server erhalten, wo wir dann einen

03:05.520 --> 03:10.520
Titel, einen Teppich und einen Preis haben, 29. 99 und wir haben dann

03:13.047 --> 03:18.047
auch dieses Buch, also Titel, Buch und da

03:18.120 --> 03:22.830
einen Preis von 10. 99, sagen wir mal.

03:22.830 --> 03:25.310
Das ist also ein sehr einfaches Array von Daten,

03:25.310 --> 03:27.730
die wir dann vom Backend erhalten.

03:27.730 --> 03:30.590
Dies sind natürlich JavaScript-Objekte, aber

03:30.590 --> 03:33.730
sie sind keine Instanzen unseres Produktmodells.

03:33.730 --> 03:37.220
Und das ist ein typisches Szenario, wo Sie Daten als Json erhalten

03:37.220 --> 03:40.990
es hat keine angehängten Daten wie, welche Konstruktor-Funktion

03:40.990 --> 03:42.850
Sie fronted codiert gehört.

03:42.850 --> 03:46.770
Ihr Server weiß, dass und json ist auch ein Format, das nur grundlegende

03:46.770 --> 03:51.230
Daten überträgt, haben Sie nicht reichlich Metadaten, um Sie Objekte

03:51.230 --> 03:53.540
dort angehängt.

03:53.540 --> 03:56.300
Oder zumindest müssten Sie dies manuell tun.

03:56.300 --> 04:00.120
Mit anderen Worten, die Produkte, die wir hier bekommen, sind Objekte,

04:00.120 --> 04:03.310
die keine Methode haben, um Informationen zu erhalten.

04:03.310 --> 04:08.230
Wenn Sie diese nun in Instanzen Ihres Modells umwandeln wollten,

04:08.230 --> 04:12.680
müssten Sie dies traditionell manuell tun.

04:12.680 --> 04:17.680
Sie könnten Ihre geladenen Produkte haben, die dann, sagen wir, Produkte

04:19.260 --> 04:22.770
verwenden, die Map-Methode aufrufen und für jedes

04:22.770 --> 04:25.680
Produkt in diesem Array ein neues Produkt für

04:25.680 --> 04:30.680
prod zurückgeben. titel und prod. Preis und danach hätten wir

04:34.330 --> 04:36.660
ein Array voller echter Produktkonstruktorfunktionsinstanzen,

04:36.660 --> 04:40.230
und dann könnten wir tatsächlich eine Schleife durch diese

04:40.230 --> 04:43.163
geladenen Produkte machen und dann zum Beispiel

04:44.330 --> 04:51.083
in der Konsole log prod.

04:51.083 --> 04:51.083
Informationen erhalten.

04:52.150 --> 04:56.010
Auf diese Weise könnten wir ein Array oder auch ein einzelnes namenloses

04:56.010 --> 05:00.070
Vanilla-JavaScript-Objekt manuell in eine Instanz einer bestimmten

05:00.070 --> 05:02.880
Konstruktorfunktion umwandeln und würden dann

05:02.880 --> 05:05.000
diese Ausgabe erhalten.

05:05.000 --> 05:07.220
Dies manuell zu tun, ist mühsam.

05:07.220 --> 05:09.590
Das ist ein Haufen zusätzlicher Schritte

05:09.590 --> 05:12.710
hier, das ist natürlich nur eine einfache Umwandlung.

05:12.710 --> 05:16.690
Hier kann uns das Paket Class Transformer helfen.

05:16.690 --> 05:19.330
Das macht es sehr, sehr einfach.

05:19.330 --> 05:22.390
Dort definieren wir auch eine Klasse im Typ Skript,

05:22.390 --> 05:25.010
in unserem Fall hier, dann könnten wir einige

05:25.010 --> 05:29.340
Daten bekommen, sagen wir von einem Server und dann können wir tatsächlich

05:29.340 --> 05:32.430
eine einfache Komfortmethode aufrufen und es wird

05:32.430 --> 05:36.893
automatisch unsere Daten in die richtigen Modelle konvertieren.

05:38.100 --> 05:40.030
Dazu führen wir zunächst ein nmp

05:40.030 --> 05:44.840
install class transformer--save aus, etwa so, und sobald dies abgeschlossen

05:45.730 --> 05:47.820
ist, führen wir npm install reflect-metadata--save

05:47.820 --> 05:50.350
aus Ein Paket, von dem dieses Paket letztendlich

05:51.451 --> 05:54.470
abhängt.

05:54.470 --> 05:57.460
Importieren wir also auch dies und importieren

05:57.460 --> 06:02.460
Sie dann, wie in den Einrichtungsanweisungen beschrieben, die

06:02.890 --> 06:07.680
Metadaten in Ihre Routeneintragsdateien, in meinem Fall hier

06:07.680 --> 06:11.410
in app. ts importiere ich diese Bibliothek eines Drittanbieters,

06:11.410 --> 06:14.970
die wir gerade als Abhängigkeit von unserer Bibliothek installiert haben.

06:14.970 --> 06:17.210
Nun, das heißt eigentlich, dass es keine Schritte gibt und

06:17.210 --> 06:18.610
wir diese überspringen können.

06:18.610 --> 06:20.180
Im Browser müssen wir aber immer

06:20.180 --> 06:24.780
noch die gleichen Pakete installieren, und das Hinzufügen dieses Imports hier ist in

06:24.780 --> 06:26.880
Ordnung, weil wir das Web Pack verwenden

06:26.880 --> 06:30.090
und deshalb sind wir jetzt eigentlich startklar.

06:30.090 --> 06:35.090
Und jetzt können wir etwas aus der Klasse transformer importieren, und

06:36.290 --> 06:40.210
dieses Etwas ist dann die Methode 'plain to class'.

06:40.210 --> 06:42.630
Dieses Paket enthält auch eine Reihe anderer Methoden.

06:42.630 --> 06:45.200
Mehr darüber erfahren Sie hier in den offiziellen Dokumenten.

06:45.200 --> 06:49.060
Aber 'plain to class' ist die Hauptmethode.

06:49.060 --> 06:54.060
Hier können Sie zum Beispiel Ihre geladenen Produkte einstellen.

06:55.150 --> 06:58.230
Anstatt dies manuell zu tun, wie wir es vorher getan haben,

06:58.230 --> 07:01.480
können wir geladene Produkte gleich plain to class setzen und

07:01.480 --> 07:03.760
nun zwei Argumente hier übergeben.

07:03.760 --> 07:08.070
Das erste Argument ist die Klasse, in die wir sie konvertieren wollen.

07:08.070 --> 07:10.190
In meinem Fall hier: das Produkt.

07:10.190 --> 07:12.700
Ich instanziere sie nicht und rufe sie auch

07:12.700 --> 07:15.560
nicht auf, ich zeige nur auf diese Klasse.

07:15.560 --> 07:19.460
Das zweite Argument sind die Daten, die transformiert werden sollen.

07:19.460 --> 07:23.520
In meinem Fall sind das also Produkte.

07:23.520 --> 07:25.840
Und jetzt, was dieses Paket tun wird,

07:25.840 --> 07:28.100
ist es über dieses Array gehen transformieren

07:28.100 --> 07:31.034
jedes einfache Vanilla JavaScript-Objekt hier

07:31.034 --> 07:34.090
zu einer Instanz dieser Klasse.

07:34.090 --> 07:37.830
Wenn wir dies nun speichern und npm start erneut ausführen, wird die Webseite,

07:37.830 --> 07:40.330
die den Server startet, wieder hochgefahren und

07:40.330 --> 07:43.270
das Projekt sollte ohne Fehler erstellt werden.

07:43.270 --> 07:46.540
Wenn ich die Seite neu lade, erhalte ich die gleiche Ausgabe

07:46.540 --> 07:49.530
wie zuvor, aber natürlich mit weniger Code von unserer

07:49.530 --> 07:51.870
Seite, da wir dieses Paket verwenden.

07:51.870 --> 07:53.403
Und das Erstaunliche an diesem

07:53.403 --> 07:57.070
Paket ist, dass es hier so gut funktioniert, weil es auf Typenskript

07:57.070 --> 08:01.230
aufbaut und Typenskript verwendet und die Tatsache nutzt, dass wir eine

08:01.230 --> 08:04.280
Klasse haben, auf die wir zeigen können.

08:04.280 --> 08:08.730
Aber um ehrlich zu sein, funktioniert dieses Paket auch besonders gut mit Type

08:08.730 --> 08:10.900
Script, aber es verwendet keine Type Script

08:10.900 --> 08:12.600
spezifische Funktion.

08:12.600 --> 08:16.630
Klassen gibt es zum Beispiel auch in Vanilla JavaScript.

08:16.630 --> 08:20.170
Obwohl dies also in erster Linie für Type Script entwickelt

08:20.170 --> 08:23.610
wurde, funktioniert es auch in Vanilla JavaScript.

08:23.610 --> 08:26.633
Das gilt allerdings nicht für das nächste Paket.
