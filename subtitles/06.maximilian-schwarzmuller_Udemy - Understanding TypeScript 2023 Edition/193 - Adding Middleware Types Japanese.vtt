WEBVTT

00:02.210 --> 00:05.490
講師：この基本的なダミーサーバーを立ち上げたわけですが､

00:05.490 --> 00:08.380
このサーバーはもちろん何の役にも立ちません｡

00:08.380 --> 00:11.430
さて､ 非常にシンプルなレストAPIを作りたいと言いましたが､

00:11.430 --> 00:13.110
そのために実際にソースフォルダに新しいサブフォルダを作り､

00:13.110 --> 00:16.830
routesと名付けます｡

00:16.830 --> 00:19.870
その中に､ このレストAPIの特定のルート群を処理すべきファイルを追加する｡

00:19.870 --> 00:25.710
あとは､ どのようなAPIを構築するかはあなた次第である｡

00:25.710 --> 00:28.520
React in TypeScriptのセクションをご覧になった方は､

00:28.520 --> 00:32.140
そこでTodoアプリを作ったので聞き覚えがあると思いますが､

00:32.140 --> 00:34.530
これはそのセクションとは全く別のもので､

00:34.530 --> 00:38.710
Reactとは一緒に動きません｡ もちろん､ 自分で接続することもできますが､

00:38.710 --> 00:43.870
ここでは､ TypeScriptとNodeやExpressがどう動くかを見るために､ シンプルにTodo

00:43.870 --> 00:48.350
APIを構築します｡

00:48.350 --> 00:51.400
私たちが作るアプリケーションはそれほど複雑ではありませんが､

00:51.400 --> 00:54.760
興味深いコンセプトがたくさん含まれていることでしょう｡

00:54.760 --> 00:57.080
そこで､ ここでは､ todosを追加することで､

00:57.080 --> 01:04.570
私のtodoルートを追加することにします｡ tsファイルをルートフォルダに置き､ その中でExpressを使いたいと思います｡

01:04.570 --> 01:04.570
jsを使用して､

01:04.570 --> 01:06.630
いくつかのルートを登録します｡

01:06.630 --> 01:09.730
そのために､ Expressから何かをインポートするのですが､

01:09.730 --> 01:13.700
その何かが実は今､ ルーターになっているのです｡

01:13.700 --> 01:16.160
一般的なJSの構文は､ require

01:16.160 --> 01:25.673
expressでExpressをインポートし､ 改行で「ここにこう書いてある」というコードをよく見かけます｡

01:27.090 --> 01:28.180
それはそれでいいのですが､

01:28.180 --> 01:30.130
ここではこのままインポートしてみます｡

01:31.130 --> 01:34.120
これでルーターができ､ 関数としてRouterを呼び出すだけで､

01:34.120 --> 01:36.750
ミドルウェアを登録することができます｡ つまり､

01:36.750 --> 01:45.540
最終的には入ってくるリクエストのエンドポイントをルーティングし､ そのリクエストに応じてロジックを実行することができます｡

01:45.540 --> 01:53.700
新しいTodoを追加するためのpostルートは､

01:53.700 --> 02:03.380
スラッシュ・ナッシングで指定します｡

02:03.380 --> 02:05.110
postリクエスト､

02:05.110 --> 02:08.770
getリクエスト､ すべてのtodoの取得､

02:08.770 --> 02:12.900
patchリクエストによるtodoの更新､ そしてidの取得､

02:12.900 --> 02:22.700
URLの動的セグメント､ そしてdeleteリクエストによるidによるtodoの削除です｡

02:22.700 --> 02:28.620
これが私のルートです｡ さて､ 設定したルータをこのファイルにデフォルトとしてエクスポートします｡

02:28.620 --> 02:30.930
これで､ これらのルートでは何も起こらないでしょう？

02:30.930 --> 02:35.830
リクエストがこれらのエンドポイントに到達したときに実行される関数は設定していませんが､

02:35.830 --> 02:38.620
少なくともどのルートが必要かはわかりましたので､

02:38.620 --> 02:41.740
後で2番目のステップで関数を追加します｡

02:41.740 --> 02:48.320
とりあえず､ このルーターと設定したルートを､ このアプリで動いているサーバーに接続してみましょう｡

02:48.320 --> 02:48.320
そのためには､

02:48.320 --> 02:54.290
.NET Framework から todoRoutes をインポートします｡

02:54.290 --> 02:54.290
/routes/todos.

02:56.040 --> 03:01.610
そこで､ todosにエクスポートしたそのルーターをappにインポートしています｡

03:01.610 --> 03:01.610
を使用して､

03:01.610 --> 03:08.340
実行中の Express アプリケーションに接続する必要があります｡

03:08.340 --> 03:08.340
を使い､

03:08.340 --> 03:10.800
/todos で始まるすべてのリクエストを

03:10.800 --> 03:18.703
todoRoutes に転送し､ 別の URL をターゲットとするリクエストはそこで処理されないようにしたいとします｡

03:19.920 --> 03:23.730
エラー処理といえば､ 今回使用するExpressミドルウェアでは､

03:23.730 --> 03:33.610
エラー処理を行うミドルウェアもセットアップすることができます｡

03:33.610 --> 03:33.610
そして､

03:33.610 --> 03:45.430
リクエスト､ レスポンス､ 次の関数を取得する典型的なミドルウェア関数をセットアップします｡

03:45.430 --> 03:45.430
jsを知ること､

03:45.430 --> 03:48.330
そしてNode. jsでは､ Expressでのミドルウェアの仕組みや､

03:48.330 --> 03:52.970
ミドルウェアとは何かということについては､ 具体的に掘り下げないことにします｡

03:52.970 --> 03:57.150
これはExpressでおなじみの､ 通常のミドルウェアの機能です｡

03:57.150 --> 03:57.150
これはエラー処理ミドルウェア関数で､

04:02.310 --> 04:10.720
この関数の前にある他のミドルウェアでエラーが発生すると

04:10.720 --> 04:18.750
Express によって自動的に起動されます｡

04:18.750 --> 04:21.200
これが私のエラー処理ミドルウェア関数です｡ ほら､

04:21.200 --> 04:23.380
ここでたくさんのエラーが出ましたね｡

04:23.380 --> 04:26.260
これはすべてany型であり､ これらの値のすべてを使用しているわけではないので､

04:26.260 --> 04:33.080
多くのエラーが発生しますが､ ここでどのような種類の型を持っているかを明確にしましょう｡

04:33.080 --> 04:39.890
これはError型､ これはexpress型になります｡

04:39.890 --> 04:39.890
Requestをインポートするか､

04:43.020 --> 04:46.670
あるいはimport from

04:46.670 --> 05:06.680
expressという名前でRequestをインポートします｡ これはExpressタイプがインストールされている場合にも有効です｡

05:06.680 --> 05:13.030
このミドルウェアは､ 他のミドルウェアでエラーが発生したときに起動します｡ ここでは､ 例えばJSONデータで､

05:13.030 --> 05:22.690
エラーメッセージを含むレスポンスを返します｡

05:22.690 --> 05:22.690
メッセージ､

05:22.855 --> 05:24.630
そして私たちも設定できるかもしれません､ えーと｡ もちろん､

05:24.630 --> 05:29.610
ここで紹介するよりももっと複雑なエラー処理機能を持たせることもできますが､

05:29.610 --> 05:35.020
ルートを追加し､ エラー処理ミドルウェアを追加したので､

05:35.020 --> 05:43.103
次の講義でこのAPIにロジックを追加してみましょう｡
