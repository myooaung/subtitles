WEBVTT

00:02.090 --> 00:02.923
Narrateur : Pour faire

00:02.923 --> 00:04.750
des choses plus avancées avec les décorateurs,

00:04.750 --> 00:07.340
vous devrez noter que certains décorateurs, par exemple,

00:07.340 --> 00:09.200
les décorateurs de classe mais aussi les

00:09.200 --> 00:11.700
décorateurs de méthode, par exemple, sont également

00:11.700 --> 00:14.650
capables de retourner quelque chose.

00:14.650 --> 00:16.570
Maintenant, je ne renvoie rien à aucun

00:16.570 --> 00:17.510
décorateur.

00:17.510 --> 00:18.430
Je ne parle pas de la

00:18.430 --> 00:20.010
fonction du décorateur, qui est

00:20.010 --> 00:22.460
renvoyée dans la fabrique du décorateur.

00:22.460 --> 00:23.701
Je veux vraiment dire une valeur

00:23.701 --> 00:26.040
de retour à l'intérieur de la fonction décorateur,

00:26.040 --> 00:28.890
et nous n'avons pas une telle valeur nulle part.

00:28.890 --> 00:31.559
Maintenant, dans la fonction WithTemplate, dans cette

00:31.559 --> 00:34.670
fonction de décorateur WithTemplate, je devrais dire, nous pourrions

00:34.670 --> 00:36.930
ajouter une telle valeur de retour.

00:36.930 --> 00:38.520
Ce que vous pouvez renvoyer et ce

00:38.520 --> 00:40.430
que TypeScript est capable d'utiliser

00:40.430 --> 00:43.660
dépend du type de décorateur avec lequel vous travaillez.

00:43.660 --> 00:44.990
Ici, nous travaillons avec

00:44.990 --> 00:47.270
un décorateur qui est ajouté à une classe, et dans

00:47.270 --> 00:48.750
une telle fonction de décorateur,

00:48.750 --> 00:51.677
vous pouvez renvoyer une nouvelle fonction de construction,

00:51.677 --> 00:53.800
qui remplacera l'ancienne.

00:53.800 --> 00:55.590
Donc ce qui remplacera la classe à laquelle

00:55.590 --> 00:58.330
vous avez ajouté le décorateur vous pourriez dire.

00:58.330 --> 01:01.073
Donc, ici, nous pouvons retourner une nouvelle fonction,

01:01.073 --> 01:02.490
une nouvelle fonction de construction,

01:02.490 --> 01:06.370
ou simplement retourner une nouvelle classe, en fin de compte, parce qu'une

01:06.370 --> 01:08.280
classe, le mot-clé class, nous permet

01:08.280 --> 01:11.150
d'utiliser ce sucre syntaxique pour créer une telle

01:11.150 --> 01:13.360
fonction de construction, et la classe que

01:13.360 --> 01:17.463
je crée ici n'a pas besoin d'avoir un nom, mais nous pouvons et nous devons étendre

01:17.463 --> 01:22.250
le constructeur que nous obtenons ici.

01:22.250 --> 01:23.730
Donc, ce que je fais ici maintenant,

01:23.730 --> 01:25.848
c'est que dans ma fonction décorateur, je

01:25.848 --> 01:28.060
retourne une nouvelle classe, et encore une

01:28.060 --> 01:29.270
fois, gardez à l'esprit

01:29.270 --> 01:30.910
que c'est juste du sucre syntaxique

01:30.910 --> 01:32.770
pour une fonction constructeur, donc

01:32.770 --> 01:35.400
je retourne une fonction constructeur, à la fin, qui

01:35.400 --> 01:38.830
est basée sur la fonction constructeur originale, de sorte que je garde

01:38.830 --> 01:42.610
toutes les propriétés de ma classe originale, de ma fonction constructeur

01:42.610 --> 01:44.810
originale, nous n'avons pas nécessairement

01:44.810 --> 01:47.010
à le faire, mais je ne veux pas perdre mes propriétés

01:47.010 --> 01:50.520
ici, donc je vais le faire.

01:50.520 --> 01:53.670
Et puis ici, nous pouvons ajouter une nouvelle fonctionnalité.

01:53.670 --> 01:56.716
Par exemple, et je vais devoir changer quelques noms ici,

01:56.716 --> 02:00.340
je peux ajouter une nouvelle fonction constructrice ici, et pour éviter

02:00.340 --> 02:01.500
toute confusion, je vais

02:01.500 --> 02:04.040
renommer le constructeur que j'ai ici.

02:04.040 --> 02:06.640
Donc la classe dans laquelle j'ai ajouté

02:06.640 --> 02:09.620
ce décorateur, je vais la nommer ici, originalConstructor

02:12.889 --> 02:15.690
et la copier ici.

02:15.690 --> 02:18.950
Et maintenant, au lieu de cette fonction constructrice ici,

02:18.950 --> 02:20.853
je dois appeler super pour appeler cette

02:20.853 --> 02:24.530
fonction constructrice originale de l'intérieur, parce que si vous

02:24.530 --> 02:25.430
ajoutez une fonction

02:25.430 --> 02:27.410
constructrice dans une classe qui étend

02:27.410 --> 02:29.920
une autre classe, ce qui est, en fin de compte, ce

02:29.920 --> 02:32.020
que nous faisons ici, alors vous devez appeler

02:32.020 --> 02:33.630
super.

02:33.630 --> 02:36.108
Et maintenant ici, tu peux écrire n'importe quelle logique que tu veux.

02:36.108 --> 02:40.040
Et, par exemple, ici, nous pourrions déplacer cette logique

02:40.040 --> 02:42.782
de rendu de modèle ici, hors de notre fonction

02:42.782 --> 02:45.620
décorateur dans cette nouvelle fonction

02:45.620 --> 02:47.730
constructeur que nous retournons

02:47.730 --> 02:49.020
ici.

02:49.020 --> 02:50.960
Donc, encore une fois, gardez à l'esprit que

02:50.960 --> 02:52.550
nous créons une classe ici qui, au final,

02:52.550 --> 02:53.383
ne fait que créer une

02:53.383 --> 02:54.540
fonction constructeur avec

02:54.540 --> 02:55.833
cette logique.

02:56.670 --> 02:58.850
Donc maintenant ce que j'essaie de

02:58.850 --> 03:01.367
faire, c'est de remplacer la classe.

03:01.367 --> 03:04.298
La fonction de constructeur à laquelle nous avons ajouté

03:04.298 --> 03:07.550
notre décorateur avec une nouvelle classe, avec une nouvelle

03:07.550 --> 03:10.290
fonction de constructeur, où j'exécute toujours

03:10.290 --> 03:12.920
l'ancienne logique, mais où j'ajoute également

03:12.920 --> 03:14.670
ma propre nouvelle logique, et

03:14.670 --> 03:17.450
donc, maintenant, le modèle ne devrait être rendu

03:17.450 --> 03:21.340
au DOM que si j'instancie réellement mon objet ici.

03:21.340 --> 03:22.890
Et pas tout le temps, lorsque

03:22.890 --> 03:25.180
cette fonction de décorateur est exécutée,

03:25.180 --> 03:26.340
ce qui, comme vous l'avez

03:26.340 --> 03:29.620
appris, se produit dès que nous définissons la classe.

03:29.620 --> 03:31.010
Maintenant une petite modification

03:31.010 --> 03:34.290
ici, je n'appelle plus mon constructeur original ici, à la place nous pouvons

03:34.290 --> 03:37.380
juste accéder à ceci. name pour obtenir

03:37.380 --> 03:40.180
la valeur de la propriété name de

03:40.180 --> 03:42.750
l'instance que nous créons.

03:42.750 --> 03:45.120
Maintenant, nous recevons une petite plainte là-bas

03:45.120 --> 03:47.750
concernant les types qui ne sont pas corrects.

03:47.750 --> 03:51.330
Pour résoudre ce problème, nous pouvons transformer notre fonction

03:51.330 --> 03:53.990
de décorateur en une fonction générique où nous

03:53.990 --> 03:57.113
obtenons un type, et le définissons comme le type du constructeur

03:58.090 --> 03:59.820
original, et nous indiquons clairement

03:59.820 --> 04:01.668
qu'il s'agira en fait d'une fonction

04:01.668 --> 04:05.780
de constructeur, et nous pouvons rendre cela clair en assignant un type spécial,

04:05.780 --> 04:09.260
un type d'objet, où nous définissons une nouvelle propriété,

04:09.260 --> 04:11.610
c'est un nom de réserve bien sûr, mais il indique

04:11.610 --> 04:17.760
à TypeScript qu'à la fin ce sera un objet qui peut être modifié.

04:17.760 --> 04:19.690
Il s'agit donc d'une fonction constructrice,

04:19.690 --> 04:22.170
une fonction que nous pouvons appeler avec le mot-clé

04:22.170 --> 04:24.380
new pour générer un nouvel objet.

04:24.380 --> 04:27.410
Et cette nouvelle fonction, cette nouvelle méthode, sur laquelle

04:27.410 --> 04:30.660
l'objet T est basé, aura, recevra n'importe quelle quantité d'arguments,

04:30.660 --> 04:33.520
donc j'utilise les paramètres de repos ici pour accepter

04:33.520 --> 04:35.380
autant d'arguments que vous voulez, de

04:35.380 --> 04:37.290
sorte qu'ils sont vraiment flexibles

04:37.290 --> 04:39.840
en ce qui concerne les arguments qui peuvent être passés

04:39.840 --> 04:42.200
au constructeur de la classe que nous essayons de

04:42.200 --> 04:44.000
changer.

04:45.420 --> 04:46.430
Ajoutons que la nouvelle

04:46.430 --> 04:49.063
fonction renverra à la fin un objet ici.

04:50.140 --> 04:53.500
Maintenant, je devrais également copier cette définition du paramètre rest dans

04:53.500 --> 04:55.680
mon constructeur ici, de sorte que ce constructeur

04:55.680 --> 04:57.640
est également capable d'accepter tous les arguments

04:57.640 --> 05:00.260
que nous pourrions obtenir, de sorte que nous pouvons, fondamentalement

05:00.260 --> 05:02.380
instancier Person avec tous les arguments que vous

05:02.380 --> 05:04.380
voulez passer ici.

05:04.380 --> 05:06.610
Avec tous les arguments dont nous pourrions également

05:06.610 --> 05:09.279
avoir besoin ici, dans la fonction constructeur originale.

05:09.279 --> 05:11.600
Et avec cela, le seul problème que nous allons rencontrer

05:11.600 --> 05:14.021
est que nous ne savons pas si une telle propriété de nom

05:14.021 --> 05:16.250
existe, et correctement, nous ne savons pas à quelle

05:16.250 --> 05:19.639
classe nous allons ajouter ce décorateur WithTemplate, donc nous ne savons

05:19.639 --> 05:22.530
pas s'il y aura une propriété de nom sur la classe à laquelle nous

05:22.530 --> 05:23.951
l'ajoutons.

05:23.951 --> 05:25.560
Mais, nous pouvons résoudre

05:25.560 --> 05:27.140
ce problème en indiquant simplement

05:27.140 --> 05:30.200
à TypeScript que l'objet T est basé sur, donc notre fonction

05:30.200 --> 05:32.773
constructeur originale, ne produira pas n'importe

05:32.773 --> 05:37.460
quel objet, mais produira en fait un objet avec une propriété de nom qui sera de type

05:37.460 --> 05:41.140
string et c'est correct.

05:41.140 --> 05:44.922
Notre décorateur WithTemplate est ajouté à une classe, qui aura

05:44.922 --> 05:46.250
une propriété name.

05:46.250 --> 05:47.300
Si je le commentais,

05:47.300 --> 05:48.133
nous obtiendrions

05:48.133 --> 05:50.740
une erreur, car nous essaierions d'ajouter ce

05:50.740 --> 05:53.460
décorateur à une classe qui ne remplit pas ce critère,

05:53.460 --> 05:55.543
mais ici, il le remplit.

05:55.543 --> 05:58.790
Maintenant, j'obtiens une erreur ici quand j'essaie de compiler ceci, parce

05:58.790 --> 06:00.630
que je n'utilise pas d'args ici, nous pouvons

06:00.630 --> 06:02.660
changer ceci en un _ pour dire à typescript que

06:02.660 --> 06:04.930
nous savons que nous ne l'utilisons pas et que nous voulons

06:04.930 --> 06:06.230
l'ignorer.

06:06.230 --> 06:08.050
C'est un nom de paramètre valide, c'est

06:08.050 --> 06:10.678
juste un nom spécial que typescript prend comme un

06:10.678 --> 06:13.220
Je comprends, je dois l'accepter, mais je ne l'utiliserai

06:13.220 --> 06:15.260
pas comme paramètre.

06:15.260 --> 06:18.273
Et avec cela, tout se compile et si nous rechargeons, vous

06:19.440 --> 06:22.420
voyez, nous voyons toujours Max sur la page ici.

06:22.420 --> 06:23.910
Ce qui est intéressant, c'est

06:23.910 --> 06:25.480
que si nous supprimons maintenant

06:25.480 --> 06:27.060
ce code où nous instancions Person,

06:27.060 --> 06:28.440
si je le commente de sorte que

06:28.440 --> 06:30.740
je trouve juste une classe Person, mais que je

06:30.740 --> 06:33.550
ne l'instancie nulle part, vous voyez que lors du rechargement,

06:33.550 --> 06:36.890
nous ne voyons pas Max à l'écran.

06:36.890 --> 06:39.467
Tous les décorateurs s'exécutent toujours,

06:39.467 --> 06:42.410
mais nous ne rendons plus rien à l'écran.

06:42.410 --> 06:43.243
La raison en est

06:43.243 --> 06:46.340
que nous avons amélioré notre décorateur en tirant

06:46.340 --> 06:49.520
parti de sa fonctionnalité qui nous permet de renvoyer

06:49.520 --> 06:52.360
une nouvelle valeur ou, dans ce cas, une nouvelle

06:52.360 --> 06:55.350
fonction de construction.

06:55.350 --> 06:57.205
Dans le cas du décorateur de classe.

06:57.205 --> 07:00.780
Il s'agit d'une nouvelle fonction constructrice, ou d'une nouvelle

07:00.780 --> 07:03.040
classe, qui, comme je l'ai expliqué, n'est qu'un

07:03.040 --> 07:04.300
sucre syntaxique pour la

07:04.300 --> 07:06.750
fonction constructrice, et cette fonction constructrice

07:06.750 --> 07:09.070
remplace donc notre classe originale, notre

07:09.070 --> 07:12.160
fonction constructrice originale.

07:12.160 --> 07:15.220
Maintenant, puisque j'ai appelé super ici, nous

07:15.220 --> 07:17.610
sauvegardons la fonction originale.

07:17.610 --> 07:19.690
Nous sauvegardons la classe d'origine,

07:19.690 --> 07:22.540
tout ce que nous initialisons ici se produit toujours, car

07:22.540 --> 07:25.530
je le fais également dans mon constructeur de remplacement,

07:25.530 --> 07:27.480
et j'étend la classe d'origine.

07:27.480 --> 07:30.420
Nous sauvegardons donc tout ce qui était dans la classe d'origine.

07:30.420 --> 07:31.550
Vous n'êtes pas obligé

07:31.550 --> 07:32.670
de le faire, mais je le fais

07:32.670 --> 07:35.560
ici, car je ne veux pas perdre ces données originales.

07:35.560 --> 07:36.850
Mais, en coulisses, je remplace

07:36.850 --> 07:39.770
la classe par ma nouvelle classe personnalisée ici, et cela

07:39.770 --> 07:42.370
nous permet d'ajouter une logique supplémentaire,

07:42.370 --> 07:45.600
qui doit s'exécuter lorsque la classe est instanciée.

07:45.600 --> 07:49.090
Et maintenant, tout d'un coup, nous sommes en mesure d'ajouter une

07:49.090 --> 07:52.410
logique qui ne s'exécute pas lorsque la classe est définie, mais

07:52.410 --> 07:54.660
lorsque la classe est instanciée.

07:54.660 --> 07:57.150
Et ceci devrait donc être un excellent premier

07:57.150 --> 08:01.860
exemple de toute la puissance que vous pouvez libérer avec les décorateurs si vous comprenez

08:01.860 --> 08:04.480
vraiment ce que vous pouvez faire avec eux.

08:04.480 --> 08:06.800
Et vous ne pouvez pas simplement les définir comme des fonctions,

08:06.800 --> 08:09.970
et vous ne pouvez pas simplement les définir avec des fonctions de facteurs.

08:09.970 --> 08:12.600
Dans certains décorateurs, comme le décorateur de classe,

08:12.600 --> 08:14.400
vous pouvez également renvoyer quelque

08:14.400 --> 08:17.650
chose pour remplacer l'élément auquel vous avez ajouté le décorateur,

08:17.650 --> 08:19.470
dans notre cas la classe, par une nouvelle

08:19.470 --> 08:23.000
classe qui peut implémenter l'ancienne classe mais aussi ajouter sa nouvelle

08:23.000 --> 08:25.711
logique personnalisée.

08:25.711 --> 08:28.004
Et avec cela, si nous commentons à nouveau,

08:28.004 --> 08:30.240
nous rendons à nouveau Max à l'écran avec

08:30.240 --> 08:31.570
notre propre classe qui

08:31.570 --> 08:35.793
remplace, ou qui étend et remplace l'ancienne classe.
