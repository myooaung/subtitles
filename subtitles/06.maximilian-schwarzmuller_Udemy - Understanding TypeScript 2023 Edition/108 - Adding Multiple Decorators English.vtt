WEBVTT

1
00:00:02.270 --> 00:00:05.210
<v Instructor>So we now saw a more useful decorator.</v>

2
00:00:05.210 --> 00:00:08.750
I wanna conclude this very basic introduction to decorator

3
00:00:08.750 --> 00:00:11.030
with another important thing you should know,

4
00:00:11.030 --> 00:00:14.600
you can add more than one decorator to a class,

5
00:00:14.600 --> 00:00:17.760
or anywhere else where you can use a decorator.

6
00:00:17.760 --> 00:00:18.940
So let's also add

7
00:00:18.940 --> 00:00:23.040
the logger decorator here for example, like this.

8
00:00:23.040 --> 00:00:25.810
If we save that, you see it compiles without errors,

9
00:00:25.810 --> 00:00:29.030
and indeed we see the log message here as well.

10
00:00:29.030 --> 00:00:31.490
This just leaves one important question,

11
00:00:31.490 --> 00:00:34.840
in which order do these decorators execute?

12
00:00:34.840 --> 00:00:36.550
Well for that, to find out,

13
00:00:36.550 --> 00:00:38.880
let's throw log messages into both.

14
00:00:38.880 --> 00:00:41.340
We do have a log message in the Logger, obviously,

15
00:00:41.340 --> 00:00:43.400
now let's go to the decorator function.

16
00:00:43.400 --> 00:00:46.350
So to the inner function of WithTemplate,

17
00:00:46.350 --> 00:00:49.900
and say Rendering Template, for example.

18
00:00:49.900 --> 00:00:50.733
And now let's see

19
00:00:50.733 --> 00:00:53.830
in which order these functions are executing

20
00:00:53.830 --> 00:00:56.820
and in which order these log statements are printed.

21
00:00:56.820 --> 00:00:59.570
And we see Rendering Template runs first,

22
00:00:59.570 --> 00:01:02.540
and then we get the Logger output.

23
00:01:02.540 --> 00:01:04.070
Now what this tells us of course,

24
00:01:04.070 --> 00:01:06.260
is that they execute bottom up.

25
00:01:06.260 --> 00:01:08.033
The bottom-most decorator first,

26
00:01:08.033 --> 00:01:10.790
then thereafter, the decorators above it.

27
00:01:10.790 --> 00:01:14.230
WithTemplate runs first, then Logger executes.

28
00:01:14.230 --> 00:01:15.270
And important,

29
00:01:15.270 --> 00:01:18.920
I'm talking about the actual decorator functions.

30
00:01:18.920 --> 00:01:23.710
The decorator factories here run earlier.

31
00:01:23.710 --> 00:01:26.790
If we have Logger Factory here,

32
00:01:26.790 --> 00:01:31.080
and we have the same log in the Template Factory,

33
00:01:31.080 --> 00:01:33.950
so there I say Template Factory in my log,

34
00:01:33.950 --> 00:01:35.000
you will see that there,

35
00:01:35.000 --> 00:01:37.490
actually the Logger Factory runs first,

36
00:01:37.490 --> 00:01:39.930
and then we got the Template Factory.

37
00:01:39.930 --> 00:01:41.750
And that makes sense because in the end,

38
00:01:41.750 --> 00:01:43.740
even though we got this @ symbol here,

39
00:01:43.740 --> 00:01:45.600
here I'm executing a function,

40
00:01:45.600 --> 00:01:46.850
and we're doing the same here.

41
00:01:46.850 --> 00:01:49.930
And of course, regular JavaScript rules apply here

42
00:01:49.930 --> 00:01:51.380
and this function execution

43
00:01:51.380 --> 00:01:53.610
happens before this function execution.

44
00:01:53.610 --> 00:01:56.590
Which is why we see the Logger Factory

45
00:01:56.590 --> 00:01:59.470
before we see Template Factory.

46
00:01:59.470 --> 00:02:02.650
So the creation of our actual decorator functions

47
00:02:02.650 --> 00:02:03.970
happens in the order

48
00:02:03.970 --> 00:02:07.280
in which we specify these factory functions.

49
00:02:07.280 --> 00:02:10.780
But the execution of the actual decorator functions

50
00:02:10.780 --> 00:02:12.700
then happens bottom up.

51
00:02:12.700 --> 00:02:17.300
Which means the bottom-most decorator executes first,

52
00:02:17.300 --> 00:02:19.000
so this decorator function,

53
00:02:19.000 --> 00:02:23.250
and thereafter the decorator above that executes.

54
00:02:23.250 --> 00:02:25.163
It's just something you have to know.

55
00:02:26.040 --> 00:02:29.620
With that, we got a solid base knowledge about decorators,

56
00:02:29.620 --> 00:02:32.240
and you also see a more advanced decorator

57
00:02:32.240 --> 00:02:34.900
which hopefully, also gives you a first impression

58
00:02:34.900 --> 00:02:37.810
of why decorators can be useful,

59
00:02:37.810 --> 00:02:41.970
especially if you also think about frameworks like Angular.

60
00:02:41.970 --> 00:02:46.470
Now let's see to which other places, besides classes,

61
00:02:46.470 --> 00:02:48.140
we can add decorators

62
00:02:48.140 --> 00:02:50.363
and what we might be able to do there.

