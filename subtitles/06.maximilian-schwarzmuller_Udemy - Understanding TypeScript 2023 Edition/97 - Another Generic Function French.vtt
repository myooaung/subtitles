WEBVTT

00:02.140 --> 00:03.620
- : Continuons donc à nous entraîner

00:03.620 --> 00:06.220
avec ces types génériques parce que je sais qu'ils peuvent

00:06.220 --> 00:08.305
être étranges à comprendre ; au final, ils

00:08.305 --> 00:09.970
sont très simples.

00:09.970 --> 00:12.180
Créons une fonction générique

00:12.180 --> 00:14.810
moyenne, compter et imprimer.

00:14.810 --> 00:19.810
Maintenant, cette fonction doit prendre un argument, un paramètre.

00:20.330 --> 00:23.470
Nommons-le élément, mais le nom est vraiment à votre

00:23.470 --> 00:26.530
convenance et doit être de type générique.

00:26.530 --> 00:28.340
Parce que je ne me soucie pas vraiment

00:28.340 --> 00:30.380
du type, du moins à certains égards.

00:30.380 --> 00:33.400
Disons que nous avons un type générique dans cette fonction

00:33.400 --> 00:35.800
et que notre paramètre est de ce type.

00:35.800 --> 00:38.350
C'est d'ailleurs tout ce qui caractérise les types génériques.

00:38.350 --> 00:40.030
Si vous avez une fonction générique,

00:40.030 --> 00:42.180
votre paramètre sera souvent de ce type.

00:42.180 --> 00:43.890
Ce n'est pas forcément le cas, mais c'est souvent

00:43.890 --> 00:45.890
ainsi que l'on travaille avec les fonctions génériques,

00:45.890 --> 00:46.920
comme vous le verrez, à mesure

00:46.920 --> 00:49.080
que vous acquerrez de l'expérience avec elles.

00:49.080 --> 00:50.670
Donc ici nous avons count et

00:50.670 --> 00:52.350
print avec notre type générique

00:52.350 --> 00:54.430
ici, et l'élément est de ce type.

00:54.430 --> 00:56.500
Maintenant, ce que je veux retourner

00:56.500 --> 01:00.300
ici est un tuple nienda avec deux éléments où le premier élément

01:00.300 --> 01:03.190
devrait être mon élément lui-même et le second

01:03.190 --> 01:07.070
élément devrait être une chaîne de description.

01:07.070 --> 01:10.160
Peut-être que nous le nommons comte et le décrivons, par conséquent.

01:10.160 --> 01:15.160
Donc ici j'ai mon texte de description, et ici je dirai got no

01:15.410 --> 01:19.890
value, et je veux utiliser cela si nous passons dans un

01:19.890 --> 01:22.620
élément qui n'a pas de longueur.

01:22.620 --> 01:25.570
Parce que mon idée avec count et describe est que nous pouvons passer

01:25.570 --> 01:29.040
dans un tableau ou une chaîne, et nous obtenons en retour le nombre de caractères

01:29.040 --> 01:32.040
ou d'éléments dans cette chaîne ou ce tableau.

01:32.040 --> 01:34.040
Donc si nous avons une chaîne vide

01:34.040 --> 01:37.440
ou un tableau vide, je veux utiliser got sans valeur,

01:37.440 --> 01:42.440
mais ici si je vérifie que la longueur du point de l'élément est supérieure à

01:43.210 --> 01:46.170
zéro, alors je veux définir le texte de description

01:47.430 --> 01:52.430
à got plus la longueur du point de l'élément plus les éléments.

01:55.850 --> 01:58.100
Vous pourriez être encore plus spécifique

01:58.100 --> 02:03.100
et vérifier si la longueur est égale à un ici, et dire alors que vous avez un

02:06.590 --> 02:11.590
élément, sinon si la longueur de l'élément est supérieure à un, nous avons

02:11.720 --> 02:13.750
un texte de description égal à

02:13.750 --> 02:21.173
got plus les éléments de longueur de l'élément afin que nous ayons la forme plurielle correcte.

02:22.850 --> 02:25.220
Maintenant ici, le texte de description est là pour le deuxième élément

02:25.220 --> 02:27.040
et le retour ici. Maintenant, vous voyez

02:27.040 --> 02:29.480
déjà des types de plaintes sur la longueur ici.

02:29.480 --> 02:32.350
Parce qu'il n'est pas clair que l'élément a une longueur.

02:32.350 --> 02:34.770
Alors peut-être devrions-nous préciser que c'est le cas.

02:34.770 --> 02:38.430
Nous pourrions le faire en créant une nouvelle interface ou un type

02:38.430 --> 02:41.060
personnalisé avec le mot-clé type ici et ici je vais

02:41.060 --> 02:44.750
choisir une interface que je vais nommer lengthy qui, au final, garantit

02:44.750 --> 02:47.440
simplement que nous avons un objet avec une propriété

02:47.440 --> 02:50.820
length qui devrait donner un nombre à la fin.

02:50.820 --> 02:52.870
Et puis ici, nous pouvons définir une contrainte

02:52.870 --> 02:54.740
et dire que T s'étend en longueur.

02:54.740 --> 02:57.710
Nous savons donc que, quel que soit le résultat, nous aurons une propriété de longueur,

02:57.710 --> 03:01.053
et qu'un tableau ou une chaîne de caractères aura une propriété de longueur.

03:02.030 --> 03:07.030
Maintenant, ici, je peux consigner le nombre de consoles, décrire

03:07.500 --> 03:11.240
et transmettre, disons, "Bonjour".

03:11.240 --> 03:14.280
Cela fonctionne parce qu'une chaîne de caractères a une propriété de longueur.

03:14.280 --> 03:15.290
Ce n'est pas un objet.

03:15.290 --> 03:17.310
Il s'agit d'une chaîne de caractères, mais dans

03:17.310 --> 03:19.980
les coulisses, Javascript la convertit en objet à la volée et

03:19.980 --> 03:21.720
ajoute une propriété de longueur lorsque

03:21.720 --> 03:23.940
nous en avons besoin. Nous pouvons donc l'appeler

03:23.940 --> 03:26.960
ainsi sans risque. Le script de type en premier

03:26.960 --> 03:31.370
qu'ici nous retournons un tableau avec soit une chaîne ou un élément de type

03:31.370 --> 03:33.580
T dedans. Maintenant, je veux avoir

03:33.580 --> 03:36.060
un tuple, donc je vais être plus spécifique ici et définir

03:36.060 --> 03:39.110
le type de retour pour être fondamentalement un tableau avec exactement

03:39.110 --> 03:41.330
deux éléments où le premier élément sera de type T

03:41.330 --> 03:43.850
et le deuxième élément sera de type string.

03:43.850 --> 03:46.270
Donc maintenant, je dis juste que nous retournons

03:46.270 --> 03:49.360
un tuple ici où le premier élément sera, eh bien, n'importe

03:49.360 --> 03:52.010
quel élément de notre type générique, et le deuxième

03:52.010 --> 03:54.110
élément sera une chaîne.

03:54.110 --> 03:56.820
Maintenant, avec cela, si nous sauvegardons ceci, il est recompilé

03:56.820 --> 04:00.330
sans erreurs et imprime salut là, a obtenu neuf éléments parce que nous avons obtenu

04:00.330 --> 04:02.330
neuf caractères là-dedans.

04:04.320 --> 04:06.890
Nous pourrions également appeler cette fonction

04:06.890 --> 04:09.530
avec un tableau où nous avons les sports et la cuisine,

04:09.530 --> 04:12.460
et vous verrez que nous avons deux éléments comme texte

04:12.460 --> 04:15.990
de description, ou avec un tableau vide bien sûr, dans ce cas, si je

04:15.990 --> 04:18.660
sauvegarde cela, nous n'avons pas de valeur, mais

04:18.660 --> 04:22.500
nous ne serons pas en mesure d'appeler cette fonction, par exemple, avec

04:22.500 --> 04:24.103
un nombre parce qu'un nombre n'a

04:24.103 --> 04:26.333
pas de propriété de longueur et donc cela ne

04:26.333 --> 04:28.090
fonctionne pas.

04:28.090 --> 04:32.900
Donc, ici encore, nous avons notre fonction générique.

04:32.900 --> 04:35.043
L'idée est similaire à la fonction précédente.

04:35.043 --> 04:38.680
Nous voulons être un peu moins précis quant au type de données que nous

04:38.680 --> 04:40.540
obtenons ici. Nous ne nous soucions pas vraiment

04:40.540 --> 04:43.180
de savoir s'il s'agit d'une chaîne, d'un tableau ou de toute autre chose ayant

04:43.180 --> 04:45.610
une propriété de longueur. Ce qui nous intéresse, c'est qu'il

04:45.610 --> 04:47.930
ait une propriété de longueur et que nous voulions en faire quelque

04:47.930 --> 04:49.980
chose, parce que nous comptons sur la propriété de longueur

04:49.980 --> 04:51.970
dans notre code, donc nous devons garantir que nous

04:51.970 --> 04:53.540
l'avons obtenue, mais à part cela, nous n'avons

04:53.540 --> 04:55.370
pas vraiment d'intérêt pour le type de données

04:55.370 --> 04:59.490
que nous obtenons ici.

04:59.490 --> 04:59.490
Je

04:59.490 --> 05:01.820
ne veux pas me limiter à une chaîne de caractères ou à un tableau,

05:01.820 --> 05:04.220
et je ne veux pas créer un tas de surcharges pour gérer tous les

05:04.220 --> 05:05.830
différents types possibles.

05:05.830 --> 05:08.124
Je ne veux pas non plus créer un type d'union

05:08.124 --> 05:10.970
très long ici, car je risque d'oublier les types qui

05:10.970 --> 05:13.610
ont une propriété de longueur, ou si je crée mon

05:13.610 --> 05:16.220
propre objet avec une propriété de longueur,

05:16.220 --> 05:18.640
je risque de ne pas l'autoriser si je le limite

05:18.640 --> 05:21.580
ici à un type, chaîne et tableau ou autre.

05:21.580 --> 05:23.500
Par conséquent, je veux être plus flexible et

05:23.500 --> 05:25.380
avec les types génériques, nous pouvons être

05:25.380 --> 05:27.550
cela, nous ne nous soucions pas du type exact.

05:27.550 --> 05:30.080
Ici, grâce à la contrainte, je ne me soucie

05:30.080 --> 05:33.363
que du fait qu'il possède une propriété de longueur.
