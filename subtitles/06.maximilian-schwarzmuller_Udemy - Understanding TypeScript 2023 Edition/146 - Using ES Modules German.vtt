WEBVTT

00:02.400 --> 00:04.350
Kursleiter: Namensräume sind ganz

00:04.350 --> 00:07.240
nett, aber sie sind nicht unbedingt perfekt.

00:07.240 --> 00:09.680
In der letzten Vorlesung haben wir ein Problem gesehen,

00:09.680 --> 00:13.290
bei dem ich alle Abhängigkeiten manuell zu jeder Datei hinzugefügt habe.

00:13.290 --> 00:15.620
Wenn ich aus der Projektliste entferne,

00:15.620 --> 00:17.340
ja zum Beispiel, kompiliert es

00:17.340 --> 00:18.900
immer noch ohne Fehler.

00:18.900 --> 00:20.350
Dies ist nicht ideal.

00:20.350 --> 00:22.360
Nun kann es sein, dass es nicht funktioniert,

00:22.360 --> 00:25.047
je nachdem, ob eine andere Datei das Drag-Drop-Modell

00:25.047 --> 00:27.550
importiert, das ich hier brauche.

00:27.550 --> 00:29.100
Das wäre hier der Fall.

00:29.100 --> 00:31.533
Technisch gesehen funktioniert es hier also auch nach

00:31.533 --> 00:33.200
dem Entfernen dieses Elements.

00:33.200 --> 00:35.580
Aber das ist nicht gut, das ist ziemlich gefährlich.

00:35.580 --> 00:38.560
Wenn wir uns darauf verlassen, dass irgendeine Datei das

00:38.560 --> 00:41.990
für uns erledigt, nun, wenn wir dann diese Datei, die uns den Arsch

00:41.990 --> 00:44.830
gerettet hat, löschen oder ändern, ändern wir plötzlich

00:44.830 --> 00:47.740
etwas völlig Unbeteiligtes und unsere Anwendung funktioniert

00:47.740 --> 00:49.240
nicht mehr.

00:49.240 --> 00:51.420
Das wollen wir definitiv nicht.

00:51.420 --> 00:53.900
Es wäre also schön, wenn wir Importe und Exporte

00:53.900 --> 00:58.050
hätten, die klar angeben, was wir aus welcher Datei importieren.

00:58.050 --> 00:59.660
Und wenn wir hier etwas brauchen,

00:59.660 --> 01:01.120
z. B. Drag Target, und wir es

01:01.120 --> 01:03.400
nicht explizit importieren, erhalten wir

01:03.400 --> 01:04.840
einen Fehler.

01:04.840 --> 01:06.450
Das ist im Grunde das, was wir wollen.

01:06.450 --> 01:10.235
Und wir erhalten dieses Verhalten mit ES6-Modulen.

01:10.235 --> 01:12.930
Nun, ES6-Module gibt es auch außerhalb des

01:12.930 --> 01:14.800
Typs der Welt, moderne Browser

01:14.800 --> 01:17.340
unterstützen sie nativ, wobei der Browser

01:17.340 --> 01:19.630
dann im Grunde alle Abhängigkeiten einer

01:19.630 --> 01:22.960
Datei herunterlädt, wenn er sie ausführt.

01:22.960 --> 01:25.150
Aber Typen könnten auch importiert werden und erhalten

01:25.150 --> 01:28.350
dann die anfängliche Typunterstützung, wenn wir sie verwenden.

01:28.350 --> 01:31.007
Wie funktionieren nun die ES6-Module?

01:31.007 --> 01:33.600
Beginnen wir wieder mit dem Ziehen und Ablegen.

01:33.600 --> 01:35.240
Lassen Sie uns die Sache mit dem Namensraum,

01:35.240 --> 01:37.360
der ein reines Typenmerkmal ist, entfernen.

01:37.360 --> 01:40.030
Behalten wir jedoch das Schlüsselwort "Export" bei.

01:40.030 --> 01:42.150
Das Export-Schlüsselwort ist nicht nur das

01:42.150 --> 01:44.290
dortige Schlüsselwort für die Arbeit mit Namensräumen,

01:44.290 --> 01:46.980
sondern auch eine standardmäßige Java-Skript-Syntax,

01:46.980 --> 01:49.800
die für Typ-Skript genauso wichtig ist.

01:49.800 --> 01:52.360
Das bedeutet, dass Sie diese Zwischenphase

01:52.360 --> 01:53.600
und auch diese hier aus

01:53.600 --> 01:56.870
dieser Datei exportieren und dann in eine andere Datei

01:56.870 --> 01:58.460
importieren können.

01:58.460 --> 02:01.290
In unserem Fall brauchen wir sie in den Dateien für Projektelemente

02:01.290 --> 02:02.980
und Projektlisten.

02:02.980 --> 02:05.230
Beginnen wir nun mit dem Projektposten.

02:05.230 --> 02:09.030
Um etwas aus einem ES-Modul zu importieren, d. h. mit diesem ES-Modul-Synthax,

02:09.030 --> 02:11.450
geben Sie import am Anfang der Datei oder

02:11.450 --> 02:14.440
in der Nähe des Anfanges der Datei an, bevor Sie mit

02:14.440 --> 02:16.110
dem Schreiben des eigentlichen

02:16.110 --> 02:18.970
Codes beginnen.

02:18.970 --> 02:23.240
Importieren von und dann zeigen Sie auf diese Datei mit einem

02:23.240 --> 02:27.320
relativen Pfad zu der Datei, in die Sie importieren.

02:27.320 --> 02:29.340
In diesem Fall müssen wir also mit zwei Punkten und einem

02:29.340 --> 02:31.030
Schrägstrich eine Stufe höher gehen.

02:31.030 --> 02:32.509
Damit wir im Quellordner

02:32.509 --> 02:35.550
sind, müssen wir hier in den Modulordner gehen und

02:35.550 --> 02:37.450
per Drag &amp; Drop importieren.

02:37.450 --> 02:40.480
Jetzt wichtig, fügen Sie Punkt JS hier, weil Sie brauchen,

02:40.480 --> 02:43.480
um zu importieren, als ob dies bereits kompiliert

02:43.480 --> 02:46.470
wurden, weil dies in vanilla Java-Skript übernommen

02:46.470 --> 02:49.130
werden und dann sollte es für Java-Skript dort

02:49.130 --> 02:50.860
suchen, so für Java-Skript-Dateien

02:50.860 --> 02:55.010
so Punkt JS muss hinzugefügt werden.

02:55.010 --> 02:57.560
Nun importieren Sie etwas von dort und fügen dann

02:57.560 --> 02:59.320
geschweifte Klammern hinzu, zwischen

02:59.320 --> 03:01.500
denen Sie angeben, was Sie aus dieser Datei

03:01.500 --> 03:03.150
importieren möchten.

03:03.150 --> 03:06.430
Dort erhalte ich bereits eine automatische Vervollständigung, die ich

03:06.430 --> 03:08.480
mit Hilfe von Draggable importieren möchte.

03:08.480 --> 03:10.910
Jetzt ist draggable hier verfügbar und types

03:10.910 --> 03:14.430
sieht, dass es nicht verfügbar ist und ist glücklich.

03:14.430 --> 03:16.860
Jetzt müssen wir alles konvertieren, damit es zur Laufzeit

03:16.860 --> 03:17.930
angezeigt werden kann.

03:17.930 --> 03:20.370
Wir sollten also auch hier den Namensraum abschaffen.

03:20.370 --> 03:22.340
Nun müssen Sie auch die geschweifte Klammer schließen.

03:22.340 --> 03:24.870
Und jetzt, zum Beispiel hier, bekommen wir, was wir

03:24.870 --> 03:27.540
wollen, wir bekommen Fehler, wir bekommen Komponentenfehler,

03:27.540 --> 03:29.650
Projekt, das fehlt alles.

03:29.650 --> 03:31.890
Lassen Sie uns also all diese Dinge exportieren und importieren.

03:31.890 --> 03:33.220
In der Basiskomponente z. B. wird der

03:33.220 --> 03:34.540
Namensraum entfernt, das Export-Schlüsselwort

03:34.540 --> 03:36.810
wird beibehalten, wie Sie es gelernt haben.

03:36.810 --> 03:38.270
Entfernen Sie die schließende geschweifte

03:38.270 --> 03:40.810
Klammer und formatieren Sie den Projektimport neu.

03:40.810 --> 03:43.380
Wir können den Namensraum jederzeit loswerden.

03:43.380 --> 03:45.760
Und alle Verweise hier, Sie können tatsächlich

03:45.760 --> 03:48.803
alle Referenzimporte löschen, die Sie irgendwo haben.

03:51.300 --> 03:53.593
Entfernen Sie alle geschweiften Klammern im Namensraum.

03:55.010 --> 03:56.950
Projektliste, entfernen Sie den ganzen Namensraum

03:56.950 --> 03:58.466
und die Verweise, entfernen Sie die schließende

03:58.466 --> 04:00.690
geschweifte Klammer dort unten.

04:00.690 --> 04:03.320
Und Dekorateure, die den Namensraum und die schließende

04:03.320 --> 04:05.330
geschweifte Klammer loswerden und Drag

04:05.330 --> 04:07.940
and Drop, das haben wir bereits abgeschafft.

04:07.940 --> 04:10.230
Projekt, entfernen Sie das Leerzeichen für den Namen und

04:10.230 --> 04:11.920
die schließende geschweifte Klammer.

04:11.920 --> 04:14.460
Das Projekt blieb, was nicht weiter verwunderlich ist, ohne

04:14.460 --> 04:16.223
den Namensraum und den Abschluss.

04:18.390 --> 04:22.620
Die geschweifte Klammer hier bezieht sich darauf, dass das Projekt von einer

04:22.620 --> 04:24.740
anderen Datei importiert wurde, ich habe

04:24.740 --> 04:26.620
hier keine Verweise darauf.

04:26.620 --> 04:28.770
Das war also das gefährliche Verhalten, von dem

04:28.770 --> 04:29.880
ich gesprochen habe.

04:29.880 --> 04:31.871
Dies hätte fehlschlagen können, wenn wir nicht importiert

04:31.871 --> 04:35.120
hätten oder wenn wir unseren Projektteil nicht im Namensraum einer anderen Datei

04:35.120 --> 04:36.710
referenziert hätten.

04:36.710 --> 04:39.090
Das war also definitiv nicht ideal.

04:39.090 --> 04:41.560
Aber lassen Sie uns mit dem Refactoring fortfahren.

04:41.560 --> 04:44.430
Bei der Validierung werden Sie das Leerzeichen für den Namen

04:44.430 --> 04:46.050
und alle schließenden geschweiften

04:46.050 --> 04:47.550
Klammern hier unten los.

04:47.550 --> 04:49.150
Und last but not least eine App TS,

04:49.150 --> 04:51.503
die diese Importe und den Namensraum loswird.

04:52.700 --> 04:55.350
Jetzt haben wir also überall Fehler, aber wir

04:55.350 --> 04:56.988
können von vorne anfangen.

04:56.988 --> 04:59.560
Fangen wir vielleicht noch einmal bei der Basiskomponente an.

04:59.560 --> 05:01.610
Das sieht gut aus, es beschwert sich nicht

05:01.610 --> 05:03.700
und scheint alles zu haben, was es will.

05:03.700 --> 05:06.250
Der Projektimport, nun ja, er beschwert sich.

05:06.250 --> 05:08.450
Dort müssen wir zum Beispiel eine Komponente haben.

05:08.450 --> 05:12.070
Fügen wir also oben einen Import hinzu und importieren

05:12.070 --> 05:15.830
wir die Komponente aus der Basiskomponente dot slash.

05:15.830 --> 05:18.410
So importieren Sie relativ, wenn sich etwas im

05:18.410 --> 05:19.990
gleichen Ordner befindet.

05:19.990 --> 05:22.370
Punkt Schrägstrich am Anfang, dann der Dateiname

05:22.370 --> 05:24.490
und dann ist alles wichtig Punkt JS.

05:24.490 --> 05:26.753
Vergessen Sie nicht den Punkt JS am Ende.

05:28.100 --> 05:30.250
Nun brauchen wir auch hier die validierbare

05:31.170 --> 05:34.650
Zwischenphase und die validate-Methode, auto mind

05:34.650 --> 05:36.810
und project state.

05:36.810 --> 05:39.140
Also importieren wir all diese

05:39.140 --> 05:44.080
Dinge, importieren wir von dot slash, oder nein, gehen wir eine Ebene

05:44.080 --> 05:46.149
höher, dann util, dann validation

05:46.149 --> 05:49.460
dot JS, importieren wir von That File, validatable

05:49.460 --> 05:52.100
und die validate Funktion und importieren

05:53.010 --> 05:56.250
wir auto bind von, gehen wir eine Ebene höher,

05:56.250 --> 06:00.350
decorators autobind JS.

06:00.350 --> 06:02.600
Und zu guter Letzt der Projektstatus

06:02.600 --> 06:05.220
lassen Sie uns importieren von gehen eine Ebene

06:05.220 --> 06:07.580
höher Zustand Projektstatus JS .

06:07.580 --> 06:11.000
Von dort können wir die Projektstatuskonstante importieren,

06:11.000 --> 06:13.250
die wir dort exportieren.

06:13.250 --> 06:15.390
Das sind alle Importe, die wir brauchen, damit

06:15.390 --> 06:16.773
diese Datei funktioniert.

06:18.190 --> 06:20.480
Lassen Sie uns also jetzt mit dem Projekt fortfahren.

06:20.480 --> 06:23.270
Dort brauchen wir autobind, wir brauchen Komponente, wir

06:23.270 --> 06:24.853
brauchen das Projektmodell.

06:24.853 --> 06:26.700
Fügen wir also all diese Dinge zusammen.

06:26.700 --> 06:30.520
Importieren wir zum Beispiel das Projektmodell

06:30.520 --> 06:34.523
von dot dot slash models project JS.

06:35.580 --> 06:38.080
Fügen wir auch eine Komponente hinzu, die sich

06:39.340 --> 06:41.110
im selben Ordner befindet.

06:41.110 --> 06:45.530
Also importieren Sie dot slash base component JS

06:45.530 --> 06:49.020
und auto bind, lassen Sie uns auto bind von

06:50.790 --> 06:55.790
dot dot slash decorators auto bind JS importieren.

06:56.020 --> 06:59.383
Und jetzt hat auch diese Datei hier alles, was sie braucht.

07:01.260 --> 07:03.410
Gehen wir nun zur Projektliste über.

07:03.410 --> 07:06.610
Hier in der Projektliste brauchen wir auch die Komponente

07:06.610 --> 07:10.250
wie on so on, also kopieren wir das hier vom Projektelement

07:10.250 --> 07:14.260
rüber und fügen es der Projektliste TS hinzu, aber wir brauchen hier

07:14.260 --> 07:16.120
kein Draggoble, sondern ein Drag

07:16.120 --> 07:19.420
Target, also importieren wir das.

07:19.420 --> 07:22.307
Und außerdem brauchen wir den Projektstatus,

07:22.307 --> 07:24.550
den Projektstatus.

07:24.550 --> 07:26.540
Ja, das sind die Dinge, die wir brauchen.

07:26.540 --> 07:28.780
Und auch die Klasse der Projektelemente.

07:28.780 --> 07:31.030
Aus der Projektmodelldatei können wir also auch

07:31.030 --> 07:32.720
den Projektstatus importieren.

07:32.720 --> 07:35.340
Sie können mehrere exportierte Dinge aus ein und derselben

07:35.340 --> 07:36.840
Datei importieren, indem Sie sie

07:36.840 --> 07:38.730
einfach durch ein Komma zwischen diesen

07:38.730 --> 07:41.740
geschweiften Klammern trennen, so wie Sie es hier sehen.

07:41.740 --> 07:45.910
Wir importieren auch die Projektzustandskonstante aus

07:46.790 --> 07:48.790
dem Zustandsordner, Projektzustand

07:48.790 --> 07:52.470
JS, und importieren zu guter Letzt, hier ganz unten,

07:52.470 --> 07:57.130
wo wir sie brauchen, die Projektelementklasse.

07:57.130 --> 08:01.770
Also importieren Projekt Element aus Punkt Schrägstrich Projekt

08:01.770 --> 08:03.623
Element Punkt JS.

08:06.810 --> 08:08.280
Lassen Sie uns also weitermachen.

08:08.280 --> 08:11.280
Autobind ist in Ordnung, Projektstatus beschwert sich

08:11.280 --> 08:13.600
dort, wir brauchen das Projektmodell.

08:13.600 --> 08:15.740
So an der Spitze lassen Sie uns

08:16.820 --> 08:20.300
importieren Projekt aus gehen eine Ebene höher

08:20.300 --> 08:22.823
Modelle Projekt dot JS.

08:24.450 --> 08:27.630
Wir verwenden hier auch den Projektstatus, also importieren

08:27.630 --> 08:29.573
wir ihn aus derselben Datei." Und damit

08:32.320 --> 08:33.960
haben wir zu guter Letzt die TS-Datei

08:33.960 --> 08:35.660
der Anwendung, die wir für den Import

08:35.660 --> 08:38.810
von Projekteingaben benötigen.

08:38.810 --> 08:43.610
aus Punkt-Schrägstrich-Komponenten Projekteingabe.

08:43.610 --> 08:48.030
JS und die Projektliste aus der Projektliste JS'. Wenn wir

08:49.290 --> 08:52.280
dies nun gespeichert haben, sollte es ohne

08:52.280 --> 08:54.330
Fehler kompiliert werden und

08:54.330 --> 08:58.500
wir verwenden nun ES6-Module, um unsere Importe und Exporte

08:58.500 --> 09:00.823
zu organisieren.

09:02.640 --> 09:05.460
Wenn wir einen Blick auf den Browser werfen, erhalten

09:05.460 --> 09:07.040
wir jedoch einen Fehler.

09:07.040 --> 09:09.390
Der Grund dafür ist, dass wir im Dist-Ordner

09:09.390 --> 09:12.013
unsere Bundle-JS-Datei richtig haben.

09:13.040 --> 09:15.900
Jetzt müssen wir die TS-Konfiguration erneut ändern.

09:15.900 --> 09:19.070
Zum einen sollten wir jetzt nicht AMD,

09:19.070 --> 09:22.420
sondern ES twenty fifteen verwenden.

09:22.420 --> 09:25.710
Than ist im Grunde das Codewort für ES6, die Agma-Skriptversion,

09:25.710 --> 09:27.240
mit der ES-Module eingeführt

09:27.240 --> 09:29.300
wurden.

09:29.300 --> 09:31.260
Wir sagen also dem Typenskript, dass es

09:31.260 --> 09:34.480
unsere Importe nicht in irgendetwas umwandeln soll, sondern sie

09:34.480 --> 09:36.240
so belassen soll, wie sie sind.

09:36.240 --> 09:39.250
Moderne Browser werden es verstehen.

09:39.250 --> 09:41.290
Das ist also wichtig, stellen Sie auch sicher,

09:41.290 --> 09:43.433
dass Sie hier ein Ziel von ES6 oder höher haben'

09:44.950 --> 09:47.530
Sie sollten jetzt auch die out-Datei wieder auskommentieren,

09:47.530 --> 09:50.670
weil das bei ES-Modulen nicht unterstützt wird.

09:50.670 --> 09:53.590
Und damit ist das, was Sie im dist-Ordner erhalten,

09:53.590 --> 09:56.610
im Grunde eine Replikation Ihres Quellordners, aber

09:56.610 --> 09:58.690
mit Java-Script-Dateien.

09:58.690 --> 10:00.480
Jetzt müssen wir auch zur Index-HDML-Datei

10:00.480 --> 10:03.120
zurückkehren und App JS erneut importieren, da wir

10:03.120 --> 10:04.840
jetzt eine App JS-Datei im Dist-Ordner

10:04.840 --> 10:06.350
haben.

10:06.350 --> 10:08.910
Und auch diese App-JS-Datei wird Import-Anweisungen

10:08.910 --> 10:11.180
enthalten, da dies, wie bereits erwähnt, von Java-Skript,

10:11.180 --> 10:13.830
von modernen Java-Skript-Engines und von modernen Browsern

10:13.830 --> 10:15.900
unterstützt wird.

10:15.900 --> 10:17.440
Und der Browser wird diese

10:17.440 --> 10:19.440
Importe daher für Sie auflösen.

10:19.440 --> 10:22.430
Wenn wir dies nun neu laden, erhalten wir immer

10:22.430 --> 10:24.240
noch einen Fehler.

10:24.240 --> 10:27.310
Die import-Anweisung kann nicht außerhalb eines Moduls verwendet werden.

10:27.310 --> 10:30.630
Nun, moderne Browser unterstützen dieses Sintex, aber Sie müssen

10:30.630 --> 10:33.150
ihnen sagen, dass Sie es verwenden wollen.

10:33.150 --> 10:37.470
Und Sie sagen es ihnen, indem Sie das (murmelt) hier entfernen und stattdessen

10:37.470 --> 10:39.670
auf dem Skript-Tag, wo Sie eine Datei importieren,

10:39.670 --> 10:42.777
die diese Import-Anweisungen enthält.

10:42.777 --> 10:46.313
Sie verwenden type equals module.

10:47.300 --> 10:50.450
Wenn Sie das jetzt sichern, sehen Sie, dass es funktioniert,

10:50.450 --> 10:53.440
und wenn wir hier etwas hinzufügen, erhalten wir wieder

10:53.440 --> 10:56.120
eine funktionierende Anwendung.

10:56.120 --> 10:58.910
Wenn Sie nun die Registerkarte "Netzwerk" untersuchen,

10:58.910 --> 11:01.680
werden Sie feststellen, dass beim Neuladen eine Reihe

11:01.680 --> 11:05.290
von Netzwerkanfragen gestellt werden, und wenn ich ein wenig herauszoome,

11:05.290 --> 11:07.410
können wir das besser sehen.

11:07.410 --> 11:10.340
Alle unsere Java-Script-Dateien werden hier angefordert.

11:10.340 --> 11:12.810
Sie werden vom Browser automatisch angefordert,

11:12.810 --> 11:14.780
wenn er auf unseren Import stößt.

11:14.780 --> 11:16.967
So beginnt es mit app JS, dann sieht

11:16.967 --> 11:19.410
es den Import zu Projekt Input JS.

11:19.410 --> 11:21.990
Hier und damit natürlich auch bei der nächsten Anfrage geht

11:21.990 --> 11:23.160
es um Projekteingabe.

11:23.160 --> 11:25.410
Das Gleiche gilt für die Projektliste.

11:25.410 --> 11:27.360
Jetzt in Projekteingabe zum Beispiel

11:27.360 --> 11:29.422
würde es eine Eingabe von Basiskomponente

11:29.422 --> 11:31.450
JS sehen, weshalb es auch prob Basiskomponente

11:31.450 --> 11:33.400
JS importiert.

11:33.400 --> 11:35.530
Das macht sich der Browser zunutze, und

11:35.530 --> 11:38.170
jetzt haben wir eine weitere Möglichkeit, unsere

11:38.170 --> 11:40.850
Dateien aufzuteilen, aber mit dem zusätzlichen

11:40.850 --> 11:43.750
Vorteil, dass wir klar angeben, was wir von jeder Datei

11:43.750 --> 11:45.850
brauchen, und wenn wir einen Import auslassen,

11:45.850 --> 11:49.100
schreit type-script uns an, was beim vorherigen Ansatz

11:49.100 --> 11:51.127
nicht der Fall war, weshalb dieser Ansatz

11:51.127 --> 11:53.400
meine eigentliche Empfehlung ist und die

11:53.400 --> 11:58.870
Standardmethode für den Import und Export darstellt.

11:58.870 --> 12:00.710
Wenn Sie bereits in anderen Projekten mit

12:00.710 --> 12:03.850
Type Script gearbeitet haben, z. B. in einem Angular-Projekt, sind

12:03.850 --> 12:06.380
Sie vielleicht daran gewöhnt, dass Sie hier keine Dateierweiterung

12:06.380 --> 12:07.980
angeben müssen, aber das können wir

12:07.980 --> 12:09.270
auch weglassen, sobald wir

12:09.270 --> 12:12.210
Web Pack und ein Bill Tool hinzufügen.

12:12.210 --> 12:14.580
Solange wir das nicht haben und wir uns auf den Browser verlassen,

12:14.580 --> 12:16.870
um unsere Dateien zu importieren, müssen Sie diese zusätzliche

12:16.870 --> 12:18.833
Erweiterung hinzufügen.
