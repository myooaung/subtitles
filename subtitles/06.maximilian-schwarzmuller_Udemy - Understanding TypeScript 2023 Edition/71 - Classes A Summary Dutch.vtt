WEBVTT

00:02.140 --> 00:04.200
-Dat was het voor de klassen.

00:04.200 --> 00:06.180
We leerden over de klassen zelf.

00:06.180 --> 00:08.260
We leerden over hun eigenschappen,

00:08.260 --> 00:09.850
de asmodifiers, private

00:09.850 --> 00:12.110
voor interne assen, protected

00:12.110 --> 00:15.990
voor interne assen ook in overgeÃ«rfde klassen, en

00:15.990 --> 00:19.560
public voor assen van overal.

00:19.560 --> 00:21.610
We hebben ook geleerd over methoden die we kunnen toevoegen.

00:21.610 --> 00:23.520
Over statische methoden en eigenschappen.

00:23.520 --> 00:25.520
Over abstracte methoden en abstracte

00:25.520 --> 00:28.280
klassen, wat belangrijk is als we het hebben

00:28.280 --> 00:31.350
over een ander belangrijk concept, de overerving

00:31.350 --> 00:33.490
die we kunnen gebruiken.

00:33.490 --> 00:36.360
Hier erven we van "Department" met het sleutelwoord

00:36.360 --> 00:37.660
"extends".

00:37.660 --> 00:40.440
Hierdoor kunnen we functionaliteiten, eigenschappen

00:40.440 --> 00:41.830
en methoden van de klasse

00:41.830 --> 00:45.100
"Afdeling" delen met deze overervende klasse en onze eigen

00:45.100 --> 00:47.162
functionaliteiten toevoegen of bestaande

00:47.162 --> 00:50.300
functionaliteiten overschrijven.

00:50.300 --> 00:52.560
Ofwel omdat we moeten overschrijven zoals in

00:52.560 --> 00:55.620
het geval van "describe", wat een abstracte methode is.

00:55.620 --> 00:58.710
Of omdat we willen overschrijven, zoals in het geval

00:58.710 --> 01:01.640
van 'addEmployee' hier in de boekhouding.

01:01.640 --> 01:04.290
Dat is geen abstracte methode in de basisklasse, maar

01:04.290 --> 01:07.540
we kunnen hem natuurlijk wel overrulen als we dat willen.

01:07.540 --> 01:10.370
We hebben ook geleerd over het singleton patroon

01:10.370 --> 01:13.150
en "private constructors" die soms ook nuttig

01:13.150 --> 01:14.180
kunnen zijn.

01:14.180 --> 01:17.290
En dan heb je nu hopelijk een goed idee van classes

01:17.290 --> 01:20.290
en wat je ermee kunt doen in TypeScript.

01:20.290 --> 01:22.760
In het algemeen zou je natuurlijk moeten weten

01:22.760 --> 01:26.030
wat klassen en objecten zijn, en ook een beetje wat prototypes

01:26.030 --> 01:29.690
zijn in Vanilla JavaScript, want dat is over het algemeen niet iets

01:29.690 --> 01:31.870
wat TypeScript introduceert, maar natuurlijk

01:31.870 --> 01:34.600
wel iets waar TypeScript mee te maken heeft, omdat

01:34.600 --> 01:37.800
TypeScript voortbouwt op deze standaard JavaScript-functies,

01:37.800 --> 01:41.663
en er zijn eigen magie aan toevoegt.
