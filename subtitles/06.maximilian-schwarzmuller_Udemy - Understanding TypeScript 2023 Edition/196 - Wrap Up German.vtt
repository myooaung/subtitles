WEBVTT

00:02.320 --> 00:04.290
Dozent: Das war's dann für dieses Modul.

00:04.290 --> 00:05.660
Sie haben gelernt, wie Sie Typescript

00:05.660 --> 00:08.480
in der Node-Express-Anwendung verwenden können, dass Sie

00:08.480 --> 00:11.940
zusätzliche Typen für Express und für Node installieren können, um z. B.

00:11.940 --> 00:13.230
eine großartige Typescript-Unterstützung

00:13.230 --> 00:16.320
in Ihren Dateien zu erhalten.

00:16.320 --> 00:18.570
Dass Sie die Bewerbung so schreiben, wie Sie sie

00:18.570 --> 00:19.990
immer schreiben würden.

00:19.990 --> 00:21.790
Aber dass sich zum Beispiel Ihre Import-

00:21.790 --> 00:23.720
und Exportsyntax unterscheidet und dass

00:23.720 --> 00:26.120
Sie natürlich Typen verwenden können und auch jede

00:26.120 --> 00:29.300
andere TypeScript-Funktion, die Sie kennenlernen.

00:29.300 --> 00:31.080
Man könnte Schnittstellen verwenden,

00:31.080 --> 00:33.080
man könnte Dekoratoren verwenden, man

00:33.080 --> 00:35.480
könnte eNoms und QPUlls verwenden und alles,

00:35.480 --> 00:37.840
was nur in Typescript möglich ist.

00:37.840 --> 00:39.310
Das alles funktioniert hier,

00:39.310 --> 00:42.650
weil wir hier eine reguläre Typescript-Anwendung schreiben

00:42.650 --> 00:46.070
und sie mit dem normalen Typescript-Compiler zu regulärem Javascript-Code

00:46.070 --> 00:48.050
kompiliert wird.

00:48.050 --> 00:52.750
Javascript-Code, der dann mit Node JS ausgeführt wird.

00:52.750 --> 00:54.450
Wenn Sie weitere Beispiele für die

00:54.450 --> 00:57.720
Arbeit mit Typescript und Node Express haben möchten, können Sie

00:57.720 --> 00:58.910
natürlich zum einen einfach

00:58.910 --> 01:01.210
nach Node Express Typescript googeln, um weitere

01:01.210 --> 01:02.840
Beispiele zu finden.

01:02.840 --> 01:04.600
Ich kann Ihnen aber auch dringend

01:04.600 --> 01:06.980
empfehlen, NestJS zu prüfen.

01:06.980 --> 01:10.390
Es ist ein Knotenpunkt. js-Framework, das Typescript umfasst,

01:10.390 --> 01:13.270
während Sie Node Express mit Typescript arbeiten lassen

01:13.270 --> 01:15.310
können, wie Sie in diesem Modul gesehen haben,

01:15.310 --> 01:18.010
ist dies ein Framework, das Ihnen Projekte, Node-Projekte,

01:18.010 --> 01:21.740
mit Typescript-Unterstützung out of the box gibt.

01:21.740 --> 01:24.490
Und es umfasst all diese Typescript-Funktionen

01:24.490 --> 01:26.960
wie Dekoratoren und so weiter.

01:26.960 --> 01:30.910
Mit NestJS können Sie Node-Webanwendungen, Rest-APIs, aber

01:30.910 --> 01:34.390
auch Anwendungen, bei denen Sie Ansichten oder GraphQL-APIs

01:34.390 --> 01:36.440
rendern, erstellen.

01:36.440 --> 01:38.930
Das alles können Sie mit Node erstellen. js, sondern auch mit

01:38.930 --> 01:41.110
Typescript, und dieses Projekt

01:41.110 --> 01:43.380
nutzt stark Funktionen wie Dekoratoren,

01:43.380 --> 01:46.950
Schnittstellen und so weiter.

01:46.950 --> 01:50.200
Schauen Sie sich also auf jeden Fall NestJS an, wenn Sie diensteseitige

01:50.200 --> 01:53.580
Webanwendungen mit Node und Typescript erstellen wollen.

01:53.580 --> 01:56.660
Es ist ein großartiges Framework, das wirklich Spaß macht

01:56.660 --> 02:00.350
und alle coolen Funktionen nutzt, die Typescript zu bieten hat.

02:00.350 --> 02:03.630
Es ist also keine benutzerdefinierte Installation, keine Umgehungslösungen

02:03.630 --> 02:05.310
oder ähnliches erforderlich.

02:05.310 --> 02:08.913
Hier erhalten Sie von Anfang an eine großartige Unterstützung für Typografie.
