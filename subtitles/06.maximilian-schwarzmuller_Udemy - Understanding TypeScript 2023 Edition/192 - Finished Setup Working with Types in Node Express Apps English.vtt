WEBVTT

1
00:00:02.170 --> 00:00:03.420
<v Instructor>So let's get started.</v>

2
00:00:03.420 --> 00:00:06.330
As I mentioned, here I will create a very basic REST API

3
00:00:06.330 --> 00:00:09.130
but of course you could build any Node application

4
00:00:09.130 --> 00:00:10.810
with or without express

5
00:00:10.810 --> 00:00:13.780
and in any kind of way with TypeScript

6
00:00:13.780 --> 00:00:15.570
so this is just an example.

7
00:00:15.570 --> 00:00:18.990
You're not restricted to this specific application.

8
00:00:18.990 --> 00:00:21.560
In the src folder I'll add a app.ts file

9
00:00:21.560 --> 00:00:23.060
which will be the root entry point

10
00:00:23.060 --> 00:00:25.970
where we spin up that server.

11
00:00:25.970 --> 00:00:29.530
And there I want to import something from Express,

12
00:00:29.530 --> 00:00:31.203
from this Express framework.

13
00:00:32.970 --> 00:00:35.460
Now you probably know how we can add Express here

14
00:00:35.460 --> 00:00:37.890
and set up a web server with Express.

15
00:00:37.890 --> 00:00:41.330
We import Express with this syntax here

16
00:00:41.330 --> 00:00:46.330
and then here we can execute Express as a function.

17
00:00:46.380 --> 00:00:50.170
We get back such a app object, on which we can call listen

18
00:00:50.170 --> 00:00:53.750
to listen on a certain port for incoming requests.

19
00:00:53.750 --> 00:00:56.120
Now this would work in normal JavaScript,

20
00:00:56.120 --> 00:00:58.420
but you already see I'm getting an error here.

21
00:00:59.540 --> 00:01:01.600
Now I also get a suggestion

22
00:01:01.600 --> 00:01:03.500
why I might be getting this error here

23
00:01:03.500 --> 00:01:06.290
because require actually is a function

24
00:01:06.290 --> 00:01:10.100
that exists in note.js, but not in the browser side.

25
00:01:10.100 --> 00:01:12.540
Now in the tsconfig.json file

26
00:01:12.540 --> 00:01:16.640
I'm not using any special libs that would support node.js

27
00:01:16.640 --> 00:01:18.120
so in these TypeScript

28
00:01:18.120 --> 00:01:20.150
it's not aware of this general function

29
00:01:20.150 --> 00:01:22.900
which exists in a node.js environment.

30
00:01:22.900 --> 00:01:27.140 line:15% 
Now to make this work, we need to install a extra type

31
00:01:27.140 --> 00:01:30.220 line:15% 
with "npm install --save-dev"

32
00:01:30.220 --> 00:01:32.410 line:15% 
we can install "@types/node"

33
00:01:32.410 --> 00:01:36.291 line:15% 
to install all the types we need to work with node.js

34
00:01:36.291 --> 00:01:39.460 line:15% 
So let's run this command and see if that helps us.

35
00:01:39.460 --> 00:01:42.320
Yeah, it's done and this error is gone.

36
00:01:42.320 --> 00:01:44.390
But maybe you also saw that on app

37
00:01:44.390 --> 00:01:46.680
I didn't get any auto-completion.

38
00:01:46.680 --> 00:01:50.190
It also doesn't error out, but if we hover over app

39
00:01:50.190 --> 00:01:52.410
we see that TypeScript doesn't know what's in there.

40
00:01:52.410 --> 00:01:54.210
It's of type "any".

41
00:01:54.210 --> 00:01:56.530 line:15% 
So we probably should install more types

42
00:01:56.530 --> 00:01:59.930 line:15% 
and also install "@types/express"

43
00:01:59.930 --> 00:02:02.410 line:15% 
to install express-specific types.

44
00:02:02.410 --> 00:02:04.320
And that's a pattern you already know.

45
00:02:04.320 --> 00:02:06.850
We had a look at that in the third-party library

46
00:02:06.850 --> 00:02:08.350
section of the course.

47
00:02:08.350 --> 00:02:12.030 line:15% 
There, I also showed you how you can install types packages

48
00:02:12.030 --> 00:02:15.220 line:15% 
to get better support in your TypeScript scripts.

49
00:02:15.220 --> 00:02:19.320
So with this type added, without any extra configuration,

50
00:02:19.320 --> 00:02:22.030
Hah, it still doesn't work.

51
00:02:22.030 --> 00:02:23.140
Well the reason for that is

52
00:02:23.140 --> 00:02:25.330
the import syntax we're using here.

53
00:02:25.330 --> 00:02:28.270
This is the regular common.js import syntax

54
00:02:28.270 --> 00:02:30.450
which note.js uses by default,

55
00:02:30.450 --> 00:02:33.660
but here we're actually in an environment in TypeScript

56
00:02:33.660 --> 00:02:36.140
where we can use a different import syntax.

57
00:02:36.140 --> 00:02:38.230
We can use the same import syntax we know

58
00:02:38.230 --> 00:02:40.373
from ES modules in the browser.

59
00:02:41.240 --> 00:02:46.240
So we can use "import express from 'express'" for example.

60
00:02:46.710 --> 00:02:48.620
And if we do that and then hover over "app",

61
00:02:48.620 --> 00:02:49.910
you see now it's of type 'Express'.

62
00:02:49.910 --> 00:02:53.040
So now we've got TypeScript support.

63
00:02:53.040 --> 00:02:54.569
Now, one important note.

64
00:02:54.569 --> 00:02:58.790
In note.js there also exists a syntax

65
00:02:58.790 --> 00:03:00.810
which is similar to this one.

66
00:03:00.810 --> 00:03:03.420
Now it's under an experimental flag,

67
00:03:03.420 --> 00:03:06.190
and it's been under that flag for a very long time,

68
00:03:06.190 --> 00:03:10.010
so using common.js in note.js is by far the default

69
00:03:10.010 --> 00:03:13.482
and most common way of adding imports and exports.

70
00:03:13.482 --> 00:03:16.060
Syntax looking like this one is supported

71
00:03:16.060 --> 00:03:18.380
if you set this experimental flag,

72
00:03:18.380 --> 00:03:19.990
but here in this code

73
00:03:19.990 --> 00:03:24.012
we're actually not using this experimental node.js syntax.

74
00:03:24.012 --> 00:03:26.209
Instead we're using TypeScript.

75
00:03:26.209 --> 00:03:29.859
Once we compile this to JavaScript this will change.

76
00:03:29.859 --> 00:03:31.860
And I can actually show this to you

77
00:03:31.860 --> 00:03:34.060
so that we can also execute this.

78
00:03:34.060 --> 00:03:36.230 line:15% 
If you run "tsc" here,

79
00:03:36.230 --> 00:03:40.330 line:15% 
maybe "tsc-w" to already enter watch mode,

80
00:03:40.330 --> 00:03:42.680 line:15% 
you see this starts compilation.

81
00:03:42.680 --> 00:03:44.110
It creates a dist folder,

82
00:03:44.110 --> 00:03:46.770
and in there we now have an app.js file,

83
00:03:46.770 --> 00:03:50.040
and in here, this now looks different.

84
00:03:50.040 --> 00:03:54.500
You see, there it now doesn't set up that import

85
00:03:54.500 --> 00:03:55.710
the way we have it here.

86
00:03:55.710 --> 00:03:58.900
It uses a different syntax instead.

87
00:03:58.900 --> 00:04:02.350
So here, this is the code which actually will get executed.

88
00:04:02.350 --> 00:04:04.780
And we can execute this with nodemon

89
00:04:04.780 --> 00:04:07.640
with this tool that automatically restarts the server

90
00:04:07.640 --> 00:04:09.470
if our code changes

91
00:04:09.470 --> 00:04:12.230 line:15% 
by opening a new tab here in the terminal.

92
00:04:12.230 --> 00:04:13.620 line:15% 
Keep the other tab open

93
00:04:13.620 --> 00:04:15.960 line:15% 
because that's our TypeScript compilation process,

94
00:04:15.960 --> 00:04:18.760 line:15% 
and in that new tab we wanna start our server

95
00:04:18.760 --> 00:04:20.095
with the help of nodemon.

96
00:04:20.095 --> 00:04:22.990
For that, let's go to the package.json file

97
00:04:22.990 --> 00:04:26.260
and add a new script, a start script maybe,

98
00:04:26.260 --> 00:04:30.900
where we say "nodemon dist/app.js"

99
00:04:30.900 --> 00:04:34.200
so that nodemon executes this file in the dist folder

100
00:04:34.200 --> 00:04:36.360
and starts our server with that.

101
00:04:36.360 --> 00:04:39.430 line:15% 
And with that added and the package.json file saved

102
00:04:39.430 --> 00:04:43.240 line:15% 
we can run npmstart to spin up our development server.

103
00:04:43.240 --> 00:04:47.710
And now it is serving this dist app.js file

104
00:04:47.710 --> 00:04:49.230 line:15% 
Now that's the general setup we have,

105
00:04:49.230 --> 00:04:52.030
and that's TypeScript already doing some work here.

106
00:04:52.030 --> 00:04:53.940
We also have TypeSupport.

107
00:04:53.940 --> 00:04:55.360
And here you see in app.ts

108
00:04:55.360 --> 00:04:57.756
we can write code that looks very familiar to us

109
00:04:57.756 --> 00:05:01.420
with the import/export syntax we already know,

110
00:05:01.420 --> 00:05:03.640
but what we get as a output is in the end

111
00:05:03.640 --> 00:05:07.000
regular JavaScript node.js code

112
00:05:07.000 --> 00:05:09.640
and that is extremely useful.

113
00:05:09.640 --> 00:05:12.140
Now with that, let's do more useful things

114
00:05:12.140 --> 00:05:15.003
than just starting up a server that does nothing.

