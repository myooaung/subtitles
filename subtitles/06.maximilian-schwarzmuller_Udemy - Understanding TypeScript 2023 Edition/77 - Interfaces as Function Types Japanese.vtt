WEBVTT

00:02.220 --> 00:07.114
講師：さて､ オブジェクトの構造を定義するためにインターフェイスが使われるとお話しました｡

00:07.114 --> 00:11.750
さて､ インターフェースは､ 関数の構造を定義するためにも使うことができます｡

00:11.750 --> 00:15.578
つまり､ 基本的にはすでに学習した関数型の代わりとして｡

00:15.578 --> 00:17.890
簡単に復習しておくと､ 例えば関数の型は､

00:17.890 --> 00:23.305
typeキーワードを使ったカスタム型で定義することができます｡

00:23.305 --> 00:29.350
AddFnは追加関数で､ 次のような関数定義を保持することができます｡

00:29.350 --> 00:30.830
これは数値を返し､

00:30.830 --> 00:32.370
2つの引数を取りますが､

00:32.370 --> 00:35.970
各引数も数値型です｡

00:35.970 --> 00:39.310
ここで､ AddFn型の新しい関数addを作成し､

00:39.310 --> 00:55.170
初期化せずに後で関数を割り当てる場合､ もちろん､ この関数は数値型の引数を2つ取り､ その中で数値も返すことを確認する必要があります｡

00:55.170 --> 00:56.360
これは､ 私たちにできることです｡ 

00:56.360 --> 00:57.843
これは､ すでに学んだことですね｡ 

00:57.843 --> 01:03.077
さて､ このカスタムタイプの代わりに､ インターフェイスを使うこともできます｡

01:03.077 --> 01:08.240
インターフェイスは､ 教えたようにオブジェクトの構造を定義するためにあるのですが､

01:08.240 --> 01:10.220
結局､ 関数は単なるオブジェクトなので､

01:10.220 --> 01:12.720
これはちょっとした例外です｡

01:12.720 --> 01:15.350
インターフェースで関数型を作成することができます｡ 

01:15.350 --> 01:20.930
そのためにインターフェイスを作り､ AddFnと名付け､ その名前をここに残しておきます｡

01:20.930 --> 01:23.720
そして､ その中に引数を括弧で囲んで定義します｡

01:23.720 --> 01:36.810
例えば､ a: 数字､ B: 数字､ そしてコロン､ 矢印ではなくコロンで戻り値の型を定義します｡

01:36.810 --> 01:39.780
つまり､ 最終的には､ メソッドを定義するのと同じように､

01:39.780 --> 01:41.630
ここでgreetでやっているように､

01:41.630 --> 01:45.710
メソッド名を追加しないことを除いては､ メソッドを定義します｡

01:45.710 --> 01:55.250
そしてTypeScriptはこのインターフェースにある無名関数の特別な構文を理解し､

01:55.250 --> 01:57.800
このインターフェースを関数型として使い､

01:57.800 --> 02:05.360
関数がどのように見えるべきかを理解するのである｡

02:05.360 --> 02:07.650
ここでAddFnを使用することができます｡

02:07.650 --> 02:13.786
実際､ ここで文字列を受け入れようとすると､ これは割り当て可能ではないので､

02:13.786 --> 02:17.060
エラーが発生します｡

02:17.060 --> 02:19.670
つまり､ 単にこのカスタムタイプの代替品ということですね｡ 

02:19.670 --> 02:23.010
もちろん､ ここではカスタムタイプを使用する方が一般的であり､

02:23.010 --> 02:26.470
また少し短くもなりますが､ これは知っておくと便利な代替構文です｡

02:26.470 --> 02:28.340
特に､ あるプロジェクトでこのメソッドに遭遇し､

02:28.340 --> 02:30.870
この奇妙な匿名メソッドの意味がわからなくなった場合､

02:30.870 --> 02:35.265
この構文を使用することができます｡

02:35.265 --> 02:38.993
まあ､ 結局はカスタム関数型に過ぎないんですけどね｡ 
