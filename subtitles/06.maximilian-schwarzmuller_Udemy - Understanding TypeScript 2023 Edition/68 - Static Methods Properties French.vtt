WEBVTT

00:02.251 --> 00:03.380
Instructeur : une autre fonctionnalité

00:03.380 --> 00:05.350
intéressante liée aux propriétés et aux méthodes,

00:05.350 --> 00:08.000
qui existe également en JavaScript lorsque vous utilisez

00:08.000 --> 00:11.180
ES6 ou une version ultérieure, mais tous les typescripts sont des propriétés

00:11.180 --> 00:14.010
et des méthodes statiques.

00:14.010 --> 00:17.520
Les propriétés et méthodes statiques vous permettent d'ajouter des propriétés

00:17.520 --> 00:20.620
et des méthodes aux classes auxquelles on n'accède pas sur une instance

00:20.620 --> 00:22.530
de la classe, de sorte qu'il n'est pas nécessaire

00:22.530 --> 00:26.080
d'appeler d'abord le nouveau nom de la classe, mais auxquelles on accède

00:26.080 --> 00:28.950
directement sur la classe.

00:28.950 --> 00:31.350
Ceci est souvent utilisé pour les fonctions

00:31.350 --> 00:35.922
utilitaires que vous voulez regrouper ou mapper dans une classe de manière logique,

00:35.922 --> 00:40.860
ou pour les constantes globales que vous voulez également stocker dans une classe.

00:40.860 --> 00:43.270
Un exemple intégré à JavaScript, qui n'est

00:43.270 --> 00:46.050
pas défini par Typescript et qui n'est pas défini

00:46.050 --> 00:48.290
par vous, mais qui fait partie de JavaScript

00:48.290 --> 00:51.170
dans le navigateur, est la fonction de construction

00:51.170 --> 00:53.220
Math, ou la classe si vous voulez l'appeler

00:53.220 --> 00:55.500
ainsi, qui est globalement disponible

00:55.500 --> 00:59.210
en JavaScript, où vous pouvez accéder à pi en tant que valeur constante

00:59.210 --> 01:01.400
pour vous donner le nombre pi, ou des fonctions,

01:01.400 --> 01:05.050
ou des méthodes pour être précis, comme pow pour calculer la puissance

01:05.050 --> 01:08.610
de quelque chose.

01:08.610 --> 01:10.530
Ce sont des méthodes et des propriétés auxquelles

01:10.530 --> 01:13.370
vous n'avez pas accès sur l'instance de Math.

01:13.370 --> 01:16.310
Vous n'avez pas besoin d'appeler les nouvelles mathématiques d'abord.

01:16.310 --> 01:19.830
En effet, cela ne fonctionnera pas, mais vous accédez à ces propriétés dans

01:19.830 --> 01:22.360
des méthodes directement sur la classe elle-même.

01:22.360 --> 01:25.340
Ainsi, Math agit plus comme un espace de nom en tant que mécanisme

01:25.340 --> 01:27.370
de regroupement et c'est un cas d'utilisation

01:27.370 --> 01:28.640
courant pour les méthodes

01:28.640 --> 01:30.480
et les propriétés statiques, que vous

01:30.480 --> 01:33.650
pouvez également ajouter à vos propres classes.

01:33.650 --> 01:36.770
Disons que sur le département, nous voulons avoir une méthode

01:36.770 --> 01:40.050
qui nous aide à créer des employés et c'est quelque chose auquel

01:40.050 --> 01:43.450
nous voudrions pouvoir accéder sans instancier le département,

01:43.450 --> 01:45.390
parce que nous instancions généralement

01:45.390 --> 01:46.890
nos versions plus spécialisées,

01:46.890 --> 01:51.290
le département informatique et le département comptable et nous ne voulons pas

01:51.290 --> 01:54.710
vraiment instancier le département juste pour appeler une méthode

01:54.710 --> 01:58.490
utilitaire et donc nous pouvons ajouter une méthode ici, create Employee,

01:58.490 --> 02:07.621
disons, où nous voulons obtenir le nom, qui est une chaîne comme argument et là nous voulons retourner quelque chose.

02:07.621 --> 02:10.230
Maintenant, pour en faire une méthode statique,

02:10.230 --> 02:12.920
à laquelle nous pouvons accéder sans instancier

02:12.920 --> 02:16.250
cette classe, nous ajoutons le mot clé static devant cette

02:16.250 --> 02:18.549
méthode et ensuite, ici, nous retournons

02:18.549 --> 02:23.549
peut-être un objet dont la propriété name est associée à la valeur name.

02:25.170 --> 02:27.010
Bien sûr, c'est une méthode très simple,

02:27.010 --> 02:28.690
mais vous voyez l'idée.

02:28.690 --> 02:31.960
Maintenant, pour utiliser cela, nous pourrions descendre là où

02:31.960 --> 02:33.490
nous exécutons notre code et disons

02:33.490 --> 02:36.940
maintenant que nous voulons un nouvel employé, employee1.

02:39.300 --> 02:41.020
Bien, alors nous pouvons juste

02:41.020 --> 02:46.020
obtenir ça avec le département. createEmployee et passer dans Max par exemple

02:46.920 --> 02:50.680
et si je puis console. log(employee1) nous devrions

02:50.680 --> 02:53.170
voir un objet avec le nom de Max.

02:53.170 --> 02:55.630
Donc si je sauvegarde ça, en effet ici c'est

02:55.630 --> 02:58.240
l'employé que nous venons de créer.

02:58.240 --> 03:01.200
Il s'agit donc d'un exemple typique de méthode statique.

03:01.200 --> 03:04.870
Nous l'appelons directement sur la classe, sans le mot-clé new,

03:04.870 --> 03:06.360
et donc nous utilisons la classe

03:06.360 --> 03:09.030
comme un mécanisme de regroupement, et si vous

03:09.030 --> 03:11.630
voulez ajouter une propriété statique, vous

03:11.630 --> 03:13.470
pouvez le faire aussi.

03:13.470 --> 03:17.950
Si vous avez quelque chose comme l'année fiscale que vous voulez utiliser

03:19.730 --> 03:22.040
dans votre entreprise, vous pouvez

03:22.040 --> 03:24.980
la définir sur, disons, 2020 et, pour la rendre

03:24.980 --> 03:28.560
disponible sans l'instancier, vous pouvez ajouter

03:28.560 --> 03:30.810
static devant cette propriété ou

03:30.810 --> 03:33.950
devant ce champ et y accéder.

03:33.950 --> 03:36.560
Alors maintenant, en bas de la console. log. (mon employé créé).

03:38.050 --> 03:42.420
Ici, nous pouvons également accéder au département. fiscal. Year comme ça, sans l'instancier,

03:43.900 --> 03:47.150
et si nous l'enregistrons, nous verrons sans

03:47.150 --> 03:51.130
surprise que 2020 est enregistré ici.

03:51.130 --> 03:53.347
Il s'agit donc de méthodes et de propriétés statiques.

03:53.347 --> 03:55.250
Un mot important à leur sujet, ou une chose

03:55.250 --> 03:56.947
que vous devriez garder à l'esprit.

03:56.947 --> 03:59.067
Lorsque vous les ajoutez à une classe,

03:59.067 --> 04:03.370
vous ne pouvez pas y accéder depuis vos parties non statiques.

04:03.370 --> 04:04.870
Donc si vous avez envie d'accéder

04:04.870 --> 04:08.150
à l'année fiscale ici dans le constructeur, et vous voulez

04:08.150 --> 04:10.375
la console. le loger ici, ceci,

04:10.375 --> 04:13.490
comme vous pouvez le voir ne fonctionnera pas.

04:13.490 --> 04:15.600
J'obtiens une erreur ici que la propriété

04:15.600 --> 04:18.690
fiscalYear est un membre statique.

04:18.690 --> 04:20.976
Nous ne pouvons pas y accéder ici parce que le

04:20.976 --> 04:24.290
constructeur et tout ce qui s'y trouve, toutes les méthodes également,

04:24.290 --> 04:26.530
qui ne sont pas marquées comme statiques, et

04:26.530 --> 04:29.427
vous ne pouvez pas marquer le constructeur comme statique,

04:29.427 --> 04:32.430
d'ailleurs, ne pourront pas accéder aux propriétés statiques,

04:32.430 --> 04:34.770
parce que cela fait référence à l'instance créée

04:34.770 --> 04:37.660
sur la base de la classe alors que la propriété statique

04:37.660 --> 04:41.450
n'est pas disponible sur l'instance parce que l'idée derrière les propriétés

04:41.450 --> 04:44.150
statiques et les méthodes statiques est qu'elles sont

04:44.150 --> 04:47.780
détachées des instances.

04:47.780 --> 04:50.930
Donc, bien sûr, vous ne pouvez pas y accéder avec le mot-clé this.

04:50.930 --> 04:53.940
Si vous souhaitez utiliser la propriété ou la méthode

04:53.940 --> 04:56.080
statique à l'intérieur de la classe,

04:56.080 --> 04:59.380
vous devez utiliser le nom de la classe pour y accéder.

04:59.380 --> 05:01.337
Cela vous permet d'accéder aux propriétés

05:01.337 --> 05:04.290
et méthodes statiques depuis l'intérieur de la classe.

05:04.290 --> 05:06.593
C'est une chose importante à garder à l'esprit.
