WEBVTT

00:02.300 --> 00:03.420
นักการศึกษา: ในการเริ่มต้น

00:03.420 --> 00:07.060
ฉันจะเรียกใช้ npm start เพื่อเรียกเซิร์ฟเวอร์การพัฒนานั้นขึ้นมา

00:07.060 --> 00:09.384
ซึ่งให้บริการไฟล์ HTML และแท็บเมนู

00:09.384 --> 00:13.434
tsc-w เพื่อเริ่มประเภทการคอมไพล์ในโหมดเฝ้าดู เพื่อให้ไฟล์

00:13.434 --> 00:21.740
JavaScript ของแอปของเราได้รับการสร้างใหม่อย่างต่อเนื่อง และเราสามารถดูได้ในแอปพลิเคชันที่กำลังทำงานอยู่

00:21.740 --> 00:24.480
แน่นอนว่าตอนนี้ แอปพลิเคชันของเราดูไม่หรูหราเกินไป

00:24.480 --> 00:26.340
มันเป็นหน้าว่าง

00:26.340 --> 00:30.250
ในการเริ่มต้น มีหลายวิธีในการทำเช่นนั้น

00:30.250 --> 00:35.040
ตอนนี้ ฉันต้องการเริ่มต้นด้วยการทำให้แบบฟอร์มนี้มองเห็นได้

00:35.040 --> 00:36.660
และตอนนี้มีหลายวิธี

00:36.660 --> 00:40.208
ฉันจะเขียนแอปพลิเคชันนี้ในแนวทางเชิงวัตถุ

00:40.208 --> 00:46.080
ซึ่งเป็นทางเลือก 100% แต่เนื่องจากเราได้เรียนรู้เกี่ยวกับชั้นเรียนและอื่นๆ

00:46.080 --> 00:48.083
ฉันอยากจะแสดงให้เห็นว่ามันทำงานอย่างไร

00:48.083 --> 00:51.140
ดังนั้นฉันจึงใช้วิธีนี้

00:51.140 --> 00:51.973
ดังนั้นในรหัสแอป

00:51.973 --> 00:55.510
ฉันจะเพิ่มคลาสใหม่และฉันจะตั้งชื่อว่า Project Input

00:55.510 --> 00:59.120
แม้ว่าชื่อคลาสจะขึ้นอยู่กับคุณทั้งหมด

00:59.120 --> 01:00.570
ตอนนี้ในคลาสนี้ เป้าหมายของเราต้องเป็น

01:00.570 --> 01:04.590
เพื่อเข้าถึงเทมเพลตนี้และฟอร์มในนั้น และเข้าถึง

01:04.590 --> 01:08.220
div นี้ที่นี่ จากนั้นจึงแสดงเทมเพลตของเราใน

01:08.220 --> 01:11.710
div นั้นในตอนท้าย

01:11.710 --> 01:15.160
ดังนั้นเนื้อหาของเทมเพลต ฟอร์มใน div นั้น

01:15.160 --> 01:17.130
นั่นต้องเป็นเป้าหมายของเรา

01:17.130 --> 01:18.850
เพื่อให้บรรลุเป้าหมายนี้

01:18.850 --> 01:27.970
ใน Project Input ฉันจะเพิ่มคอนสตรัคเตอร์ที่สุดท้ายแล้วฉันต้องการเข้าถึงเทมเพลตของฉันและไปยังตำแหน่งที่ควรแสดงผล

01:28.830 --> 01:33.310
และสำหรับที่นี่ ฉันจะเพิ่มคุณสมบัติสองอย่างในทันทีด้วยสิ่งนี้

01:33.310 --> 01:40.180
คุณสมบัติองค์ประกอบแม่แบบ และคุณสมบัติองค์ประกอบโฮสต์

01:40.180 --> 01:42.420
ชื่อขึ้นอยู่กับคุณ 100%

01:42.420 --> 01:44.990
ในท้ายที่สุด ไอเดียของฉันคือองค์ประกอบโฮสต์นั้น

01:44.990 --> 01:54.050
มีการอ้างอิงถึงองค์ประกอบที่ฉันต้องการแสดงเนื้อหาเทมเพลตของฉันในตอนท้าย และองค์ประกอบเทมเพลตทำให้ฉันสามารถเข้าถึงเทมเพลตที่เก็บเนื้อหานี้ได้

01:54.050 --> 01:56.120
ตอนนี้เพื่อเข้าถึงเทมเพลตนั้น

01:56.120 --> 02:01.870
มาดูที่ดัชนี html และดูว่าเราจะระบุเทมเพลตที่เก็บแบบฟอร์มได้อย่างไร

02:01.870 --> 02:06.120
มันมีรหัสอินพุตโปรเจ็กต์นี้ ดังนั้นมันจึงดูเหมือนเป็นกลยุทธ์ที่ดี

02:06.120 --> 02:08.510
ดังนั้นที่นี่เราสามารถใช้เอกสารอินพุตโครงการ

02:08.510 --> 02:11.022
getElementById

02:11.022 --> 02:15.410
สิ่งนี้ทำให้เราสามารถเข้าถึงองค์ประกอบเทมเพลตนี้ได้

02:15.410 --> 02:17.820
ตอนนี้ สองสิ่งที่สำคัญ

02:17.820 --> 02:23.900
ที่นี่เราได้รับข้อผิดพลาดว่าองค์ประกอบเทมเพลตเป็นคุณสมบัติที่ไม่มีอยู่ในอินพุตโครงการ

02:23.900 --> 02:31.610
ตอนนี้เพื่อกำจัดสิ่งนี้ เราควรเพิ่มมันเป็นฟิลด์ใหม่ที่นี่โดยตรงในชั้นเรียน

02:31.610 --> 02:34.050
จากนั้นเราสามารถกำหนดได้อย่างปลอดภัย

02:34.050 --> 02:37.450
ตรงนี้ ฉันต้องการความชัดเจนเกี่ยวกับประเภทที่จะเก็บไว้ในนั้น

02:37.450 --> 02:41.070
และนั่นจะเป็นองค์ประกอบเทมเพลต HTML

02:41.070 --> 02:43.270
ประเภทนี้สามารถใช้ได้ทั่วโลกเพราะในไฟล์

02:43.270 --> 02:47.380
tsconfig js ฉันได้เพิ่ม DOM เป็น lib และเพิ่มประเภท DOM

02:47.380 --> 02:50.360
เหล่านี้ทั้งหมด องค์ประกอบ HTML เหล่านี้ทั้งหมดเป็นประเภท

02:50.360 --> 02:55.493
typescript ให้กับทั้งโครงการ

02:57.280 --> 03:00.400
ตอนนี้สิ่งนี้ทำให้เกิดข้อผิดพลาดใหม่ที่นี่ อย่างไรก็ตาม

03:00.400 --> 03:04.760
คุณจะเห็นว่าในตอนท้าย สิ่งนี้อาจเป็นโมฆะเมื่อเราได้รับองค์ประกอบด้วย

03:04.760 --> 03:09.850
ID แน่นอนว่าเรารู้ว่ามันจะไม่ล้มเหลว แต่ typescript ไม่มีโอกาสรู้เรื่องนี้เพราะมันจะไม่

03:09.850 --> 03:12.757
วิเคราะห์ไฟล์ html ของเรา

03:12.757 --> 03:18.210
ดังนั้นอาจไม่มีองค์ประกอบที่มี ID นี้อยู่ ดังนั้นสิ่งนี้จะให้ผลเป็นโมฆะ

03:18.210 --> 03:20.680
ตรงนี้ เราบอกว่าเราไม่เก็บ null ไว้ในนั้น

03:20.680 --> 03:23.920
เราแค่เก็บองค์ประกอบเทมเพลต HTML

03:23.920 --> 03:25.800
ดังนั้น เพื่อกำจัดอันตรายนี้

03:25.800 --> 03:29.470
เราต้องบอก typescript ว่าสิ่งนี้จะไม่เป็นโมฆะ

03:29.470 --> 03:31.290
และคุณรู้ไหมว่าคุณทำสิ่งนี้ได้อย่างไร?

03:31.290 --> 03:33.580
คุณสามารถเพิ่มเครื่องหมายอัศเจรีย์ได้ที่นี่

03:33.580 --> 03:35.020
อีกทางเลือกหนึ่ง

03:35.020 --> 03:36.170
เพื่อแสดงสิ่งนี้ด้วย

03:36.170 --> 03:37.820
หากคุณไม่แน่ใจ ให้จัดเก็บเป็นค่าคงตัว

03:37.820 --> 03:41.640
แล้วตรวจสอบว่าองค์ประกอบเทมเพลตเป็นความจริงหรือไม่

03:41.640 --> 03:51.490
ดังนั้นหากไม่เป็นโมฆะ แล้วเก็บไว้ภายในนั้น ถ้า ตรวจสอบที่นี่

03:51.490 --> 03:52.720
ตอนนี้ เรายังคงได้รับข้อผิดพลาด

03:52.720 --> 03:55.840
แต่นั่นจะเป็นข้อผิดพลาดอื่น ซึ่งเราจะกลับมาแก้ไขในภายหลัง

03:55.840 --> 03:59.650
สำหรับตอนนี้สิ่งนี้จะช่วยได้หากเราไม่แน่ใจ

03:59.650 --> 04:01.930
อย่างไรก็ตามตอนนี้ฉันแน่ใจ

04:01.930 --> 04:02.763
และถ้าคุณไม่แน่ใจ

04:02.763 --> 04:06.000
คุณควรเตรียมทางเลือกสำรองไว้ในกรณีอื่น

04:06.000 --> 04:08.530
แต่ที่นี่ฉันแน่ใจว่าเราจะได้รับองค์ประกอบดังกล่าว

04:08.530 --> 04:11.803
ดังนั้นเราจึงสามารถเพิ่มเครื่องหมายอัศเจรีย์หลังจากนั้นเพื่อบอก

04:11.803 --> 04:13.710
typescript ว่า "ดีทั้งหมด

04:13.710 --> 04:18.133
เราจะเข้าถึงองค์ประกอบด้วย ID นั้น ดังที่ฉันได้กล่าวไปแล้ว เรายังมีข้อผิดพลาดอื่นอยู่

04:18.133 --> 04:20.220
เนื้อหาคุณสมบัติขาดหายไปในองค์ประกอบประเภท HTML

04:20.220 --> 04:27.140
ปัญหาคือเรากำลังบอก typescript ว่าเราจะเก็บองค์ประกอบเทมเพลตซึ่งเป็นองค์ประกอบเทมเพลตประเภท

04:27.140 --> 04:29.550
html

04:29.550 --> 04:32.160
และจะเป็นอย่างนั้นจริงๆ

04:32.160 --> 04:38.730
แน่นอนว่า getElementById ไม่รู้ว่าองค์ประกอบใดจะกลับมาในที่สุด

04:38.730 --> 04:41.130
มันรู้แค่ว่ามันเป็นองค์ประกอบ

04:41.130 --> 04:43.920
html แต่ไม่ใช่เวอร์ชันพิเศษของมัน

04:43.920 --> 04:48.720
หากเป็น div, ย่อหน้า, ปุ่ม หรือในกรณีนี้คือองค์ประกอบเทมเพลต

04:48.720 --> 04:51.387
getElementById ไม่มีโอกาสที่จะรู้สิ่งนั้น

04:51.387 --> 04:57.460
เพื่อที่จะบอก typescript เกี่ยวกับประเภทที่เรารู้อย่างแน่นอน

04:57.460 --> 05:00.660
เราสามารถใช้การหล่อแบบ

05:00.660 --> 05:02.260
คุณได้เรียนรู้เกี่ยวกับเรื่องนี้เช่นกัน

05:02.260 --> 05:03.730
มีสองไวยากรณ์ที่คุณสามารถใช้ได้

05:03.730 --> 05:10.130
วงเล็บมุมที่จุดเริ่มต้นและประเภทที่คุณต้องการส่งไปยังที่คุณกำลังบอก

05:10.130 --> 05:11.847
typeScript "เฮ้!

05:11.847 --> 05:12.700
สิ่งของ การแสดงออกต่อจากนี้

05:12.700 --> 05:17.650
นี่จะเป็นประเภทนั้น หรือคุณเพิ่มเป็นองค์ประกอบเทมเพลต HTML ซึ่งเป็นแนวทางที่ฉันจะใช้

05:17.650 --> 05:25.700
และด้วยเหตุนี้ คุณรับประกันกับ typescript ว่าสิ่งที่คุณดึงมาที่นี่จะไม่เป็นโมฆะและจะเป็นประเภทนี้

05:25.700 --> 05:32.016
มีการพูดคุยกันมากมายเกี่ยวกับการเลือกสิ่งนี้ แต่เป็นงานทั่วไปและเป็นสิ่งสำคัญที่จะต้องทำให้ถูกต้อง

05:32.016 --> 05:33.630
ตอนนี้ให้ดำเนินการต่อกับองค์ประกอบโฮสต์

05:33.630 --> 05:35.563
ที่นี่ เราควรเพิ่มองค์ประกอบโฮสต์เป็นฟิลด์

05:36.890 --> 05:43.350
และเรารู้ว่าองค์ประกอบโฮสต์ เมื่อเราต้องการเรนเดอร์โปรเจกต์อินพุตในท้ายที่สุด

05:43.350 --> 05:45.960
จะเป็น div นี้ที่นี่

05:45.960 --> 05:48.560
นั่นคือสิ่งที่ฉันต้องการแสดงแบบฟอร์มของฉัน

05:48.560 --> 05:51.410
ดังนั้น ที่นี่เราสามารถพูดองค์ประกอบ HTML div

05:51.410 --> 05:54.000
นั่นคือประเภทขององค์ประกอบที่เราจะเพิ่มเข้าไป

05:54.000 --> 05:57.730
เราอาจเจาะจงน้อยกว่านี้และพูดว่าองค์ประกอบ

05:57.730 --> 06:00.260
HTML เพราะที่นี่ฉันไม่สนใจว่ามันจะเป็น

06:00.260 --> 06:02.740
div หรือไม่

06:02.740 --> 06:04.970
แต่เนื่องจากเรารู้แน่ชัดแล้ว

06:04.970 --> 06:08.400
ทำไมไม่เพิ่มเข้าไปล่ะ?

06:08.400 --> 06:14.850
ตอนนี้ฉันต้องการเข้าถึง div นั้นซึ่งแน่นอนว่าควรเพิ่มสิ่งนี้และถ้าเราดูที่ดัชนี

06:14.850 --> 06:14.850
html

06:14.850 --> 06:16.530
เราเห็นว่าเราสามารถระบุ div นี้ด้วย ID อีกครั้ง

06:16.530 --> 06:18.970
รหัสแอปในกรณีนี้

06:18.970 --> 06:19.945
ตอนนี้ กลับมาที่แอป

06:19.945 --> 06:24.640
ts เราสามารถใช้เอกสาร getElementById ได้อีกครั้งและเข้าถึงองค์ประกอบด้วยแอป id

06:24.640 --> 06:28.780
ตอนนี้ เรามีปัญหาเหมือนเมื่อก่อน นี่อาจเป็นโมฆะได้

06:28.780 --> 06:32.920
ดังนั้นเราต้องเพิ่มเครื่องหมายอัศเจรีย์ เพราะอีกครั้ง

06:32.920 --> 06:35.112
เรารู้อย่างแน่นอนว่ามันจะไม่เกิดขึ้น

06:35.112 --> 06:39.620
และ getElementById ไม่รู้ว่านี่จะเป็นองค์ประกอบ div

06:39.620 --> 06:46.030
ของ HTML ดังนั้น เราควรโยนสิ่งนี้ที่นี่เช่นกัน

06:46.030 --> 06:51.210
และด้วยเหตุนี้ เราจึงสามารถหาวิธีเข้าถึงองค์ประกอบทั้งหมดที่เราต้องการได้

06:51.210 --> 06:53.990
นั่นเป็นเรื่องที่พูดถึงกันมาก

06:53.990 --> 06:56.070
โชคไม่ดีที่เราไม่ประสบความสำเร็จมากนัก

06:56.070 --> 06:59.140
เราสามารถเข้าถึงองค์ประกอบเหล่านี้ได้

06:59.140 --> 07:01.970
แต่เราไม่ได้แสดงข้อมูลใดๆ ในนั้น

07:01.970 --> 07:03.940
มาว่ากันต่อครับ

07:03.940 --> 07:05.790
เพื่อสิ่งนั้น เราจำเป็นต้องนำเข้าเนื้อหาจากองค์ประกอบเทมเพลตนี้

07:05.790 --> 07:10.620
ดังนั้นโดยพื้นฐานแล้วให้นำเข้าสิ่งที่อยู่ภายในแท็กเทมเพลตและแสดงผลไปยัง

07:10.620 --> 07:11.760
DOM

07:11.760 --> 07:15.520
เราทำได้ตรงนี้ในตัวสร้างเพราะความคิดของฉัน และแน่นอน

07:15.520 --> 07:17.603
นั่นเป็นเพียงความคิดของฉัน

07:18.510 --> 07:21.870
คุณสามารถตั้งค่ามันต่างออกไปได้

07:21.870 --> 07:24.550
แต่ความคิดของฉันคือเมื่อเราสร้างอินสแตนซ์ใหม่ของคลาสนี้

07:24.550 --> 07:28.250
ฉันต้องการเรนเดอร์ฟอร์มที่เป็นของอินสแตนซ์นี้ทันที

07:28.250 --> 07:30.190
เราจะทำมันให้ถูกต้องในตัวสร้าง

07:30.190 --> 07:31.770
ที่นั่นเราสามารถรับโหนดที่นำเข้าหรือเนื้อหา

07:31.770 --> 07:34.420
HTML ที่นำเข้าหรืออย่างไรก็ตามคุณต้องการตั้งชื่อ

07:34.420 --> 07:40.627
ซึ่งเราสามารถรับได้จากเอกสาร importNode และนั่นคือวิธีการที่มีให้ในวัตถุเอกสารส่วนกลาง

07:40.627 --> 07:49.260
และเพื่อ importNode คุณจะต้องส่งตัวชี้ไปที่องค์ประกอบเทมเพลตของคุณ

07:49.260 --> 07:52.650
ดังนั้นองค์ประกอบเทมเพลตนี้ในตอนท้าย หรือพูดให้แม่นยำไม่ใช่องค์ประกอบ

07:52.650 --> 07:54.410
แต่มีจุดเนื้อหาอยู่ที่นั่น

07:54.410 --> 07:57.010
เนื้อหาเป็นคุณสมบัติที่มีอยู่ในองค์ประกอบเทมเพลต

07:57.010 --> 08:05.320
HTML และให้การอ้างอิงถึงเนื้อหาของเทมเพลต

08:05.320 --> 08:07.480
ดังนั้นรหัส HTML ระหว่างข้อความแม่แบบ

08:07.480 --> 08:15.670
ImportNode ยังรับอาร์กิวเมนต์ที่สองซึ่งกำหนดว่าควรนำเข้าสิ่งนี้ด้วยการโคลนลึกหรือไม่

08:15.670 --> 08:17.940
ดังนั้นการซ้อนทุกระดับภายในเทมเพลต และฉันต้องการทำอย่างนั้นอย่างแน่นอน

08:17.940 --> 08:19.630
ดังนั้นฉันจะให้ข้อมูลจริงที่นี่

08:19.630 --> 08:22.570
ตอนนี้ เรามีโหนดที่นำเข้าแล้ว และอย่างที่คุณเห็น นี่คือส่วนย่อยของเอกสารประเภทที่

08:22.570 --> 08:28.830
typescript สันนิษฐานหรืออนุมานโดยอัตโนมัติ

08:28.830 --> 08:30.770
ตอนนี้เราสามารถใช้ importNode

08:30.770 --> 08:34.910
นั้นได้ และแน่นอนว่าฉันต้องการใช้มันเพื่อแสดงเนื้อหาบางอย่าง

08:34.910 --> 08:36.960
เพื่อที่ฉันจะเพิ่มวิธีการใหม่

08:36.960 --> 08:40.970
วิธีการส่วนตัวซึ่งฉันจะแนบชื่อ

08:40.970 --> 08:45.150
คุณไม่จำเป็นต้องทำอย่างนั้น ฉันแค่ต้องการแยกการเลือกและตรรกะการแสดงผลของฉัน

08:45.150 --> 08:46.390
ภายในไฟล์แนบ ฉันจะติดต่อองค์ประกอบโฮสต์

08:46.390 --> 08:52.820
ดังนั้นสถานที่ที่ฉันต้องการแสดงเนื้อหาของฉันและเรียก

08:52.820 --> 08:57.840
insertAdjacentElement ซึ่งเป็นวิธีการเริ่มต้นที่เบราว์เซอร์จัดเตรียมไว้ให้ในตอนท้ายใน

08:57.840 --> 09:00.770
JavaScript

09:00.770 --> 09:04.340
หากต้องการแทรกองค์ประกอบ HTML ให้แทรกองค์ประกอบที่อยู่ติดกัน

09:04.340 --> 09:13.180
ก่อนอื่นต้องอธิบายตำแหน่งที่จะแทรก ดังนั้นคุณสามารถแทรกได้ที่นั่นหลังจากจุดเริ่มต้นขององค์ประกอบที่คุณกำลังกำหนดเป้าหมาย ดังนั้นให้หลังแท็กเปิดขององค์ประกอบโฮสต์ก่อน

09:13.180 --> 09:20.870
เริ่มต้นหรือก่อนแท็กเปิด ก่อนแท็กสิ้นสุดหรือหลังแท็กสิ้นสุด

09:20.870 --> 09:27.020
และที่นี่ฉันจะไปหลังจากเริ่มแทรกที่จุดเริ่มต้นของแท็กเปิด

09:27.020 --> 09:30.580
จากนั้นสิ่งที่ฉันต้องการแทรกคือ importNode ของฉัน

09:30.580 --> 09:39.140
อย่างไรก็ตาม อย่างแรกเลยคือค่าคงที่ที่มีอยู่ในตัวสร้างเท่านั้น

09:39.140 --> 09:42.970
และอย่างที่สอง นั่นคือส่วนย่อยของเอกสาร

09:42.970 --> 09:44.630
เราแทรกแบบนี้ไม่ได้

09:44.630 --> 09:49.800
แต่เราจำเป็นต้องเข้าถึงองค์ประกอบ HTML ที่เป็นรูปธรรมในนั้น ซึ่งเราสามารถเก็บไว้ในองค์ประกอบคุณสมบัติอื่นได้

09:49.800 --> 09:52.770
ซึ่งเราต้องเพิ่มเป็นฟิลด์ด้านบนซึ่งอาจเป็นองค์ประกอบประเภท

09:52.770 --> 09:58.270
HTML หรือในกรณีของเรา เรารู้ว่ามันจะอยู่ในเทมเพลตที่นี่

09:58.270 --> 10:02.500
ดังนั้นมันจึงเป็นแบบฟอร์ม

10:02.500 --> 10:05.790
นั่นคือองค์ประกอบแรกในเทมเพลต

10:05.790 --> 10:10.960
ที่นี่เราสามารถพูดได้ว่ามันจะเป็นองค์ประกอบรูปแบบ

10:10.960 --> 10:15.200
HTML และที่นี่ องค์ประกอบนี้เท่ากับ importNode firstElementChild ตอนนี้เราต้องบอก

10:15.200 --> 10:20.106
typescript อีกครั้งว่านี่จะเป็นองค์ประกอบรูปแบบ HTML

10:20.106 --> 10:25.510
ตอนนี้องค์ประกอบนี้เป็นคุณสมบัติคอนกรีตที่ชี้ไปที่โหนดที่เราต้องการแทรก

10:25.510 --> 10:28.360
ด้านล่างใน insertAdjacentElement

10:28.360 --> 10:31.110
เราแทรกองค์ประกอบนี้ที่นี่

10:31.110 --> 10:33.690
ตอนนี้เราต้องแน่ใจว่าที่นี่ในตัวสร้าง

10:33.690 --> 10:36.350
ที่ส่วนท้ายของมันที่เราเรียกว่าการแนบ

10:36.350 --> 10:42.260
ดังนั้นวิธีการแนบส่วนตัวนี้ เพื่อให้รหัสนี้ทำงานด้วย

10:42.260 --> 10:44.290
และตอนนี้ด้วยการจัดรูปแบบทั้งหมด

10:44.290 --> 10:46.620
โค้ดของฉันจึงออกมาเป็นแบบนี้

10:46.620 --> 10:48.200
ตอนนี้เป็นคลาสอินพุตของโปรเจ็กต์

10:48.200 --> 10:53.950
และในทางทฤษฎี เมื่อเราสร้างอินสแตนซ์ มันควรจะเรนเดอร์ฟอร์ม

10:53.950 --> 10:56.920
ตอนนี้ให้ลองดู

10:56.920 --> 10:59.440
ใต้คลาส เรามาสร้างค่าคงที่ใหม่ เช่น prjInput

10:59.440 --> 11:01.120
ชื่อขึ้นอยู่กับคุณ

11:01.120 --> 11:05.415
แล้วเรียกโปรเจ็กต์ใหม่ Input แบบนี้

11:05.415 --> 11:08.930
และถ้าเราบันทึกตอนนี้ มันควรจะคอมไพล์ใหม่และโหลดใหม่

11:08.930 --> 11:11.783
และถ้าคุณกลับไปที่เบราว์เซอร์

11:11.783 --> 11:16.050
คุณควรเห็นแบบฟอร์มนั้นที่นี่

11:16.050 --> 11:17.990
มันค่อนข้างเรียบร้อย เพราะด้วยขั้นตอนนั้น

11:17.990 --> 11:20.660
เราได้ทำขั้นตอนแรกที่สำคัญมาก

11:20.660 --> 11:22.450
เราแสดงฟอร์มของเราแล้ว และแม้ว่าจะขาดไปหลายอย่าง

11:22.450 --> 11:29.150
แต่ก็ยังดีกว่าไม่ทำเลย

11:29.150 --> 11:33.010
แบบฟอร์มนี้มาจากไฟล์ index html และแสดงผลด้วยความช่วยเหลือของรหัส

11:33.010 --> 11:36.430
typescript เชิงวัตถุของเราที่นั่น
