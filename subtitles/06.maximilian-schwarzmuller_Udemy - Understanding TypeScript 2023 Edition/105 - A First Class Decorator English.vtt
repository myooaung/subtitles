WEBVTT

1
00:00:02.130 --> 00:00:05.620 line:15% 
<v ->For that attached you find our good old starting project,</v>

2
00:00:05.620 --> 00:00:08.470 line:15% 
I already started the server with NPM start.

3
00:00:08.470 --> 00:00:12.320 line:15% 
And the TypeScript watch process with TSC-W.

4
00:00:12.320 --> 00:00:14.870
And the very first thing we need to configure there

5
00:00:14.870 --> 00:00:18.030
is in a tsconfig file, make sure your target is set

6
00:00:18.030 --> 00:00:21.620
to es6 and then, if you scroll down,

7
00:00:21.620 --> 00:00:24.230
make sure that you add this

8
00:00:24.230 --> 00:00:26.720
experimental decorator's line here.

9
00:00:26.720 --> 00:00:28.380
And add a comma in front of this

10
00:00:28.380 --> 00:00:31.700
and then you can AutoFormat to format this all correctly.

11
00:00:31.700 --> 00:00:34.020
This is important otherwise you won't be able

12
00:00:34.020 --> 00:00:36.000
to use decorators in your project.

13
00:00:36.000 --> 00:00:37.250
So make sure you tweak your

14
00:00:37.250 --> 00:00:40.540
tsconfig.json file appropriately.

15
00:00:40.540 --> 00:00:42.630
And with that we can dive right in

16
00:00:42.630 --> 00:00:46.980
and write our first decorator here in the app.ts file.

17
00:00:46.980 --> 00:00:50.950
And I wanna start with a decorator we can add to a class.

18
00:00:50.950 --> 00:00:54.530
Now decorators in general are all about classes,

19
00:00:54.530 --> 00:00:55.363
but this is a decorator which we will add

20
00:00:55.363 --> 00:00:58.220
to the class as a whole.

21
00:00:58.220 --> 00:01:00.730
For that, let's say we have a class, Person,

22
00:01:00.730 --> 00:01:04.360
a very trivial class, where we have a name.

23
00:01:04.360 --> 00:01:07.530
Maybe with a value of Max, pre-initialized here.

24
00:01:07.530 --> 00:01:10.520
Where we have a constructor function where I just log

25
00:01:10.520 --> 00:01:12.600
Creating person object,

26
00:01:12.600 --> 00:01:14.763
so that we see that this is executed.

27
00:01:15.880 --> 00:01:19.363
And then of course we can create a new person here,

28
00:01:20.760 --> 00:01:22.910
with a new keyword, like this.

29
00:01:22.910 --> 00:01:24.030
And if we want to, we can

30
00:01:24.030 --> 00:01:26.490
of course log this created person.

31
00:01:26.490 --> 00:01:28.330
And this should hold no surprises,

32
00:01:28.330 --> 00:01:29.430
if we save all of that,

33
00:01:29.430 --> 00:01:32.090
it compiles without errors.

34
00:01:32.090 --> 00:01:33.700
And if we visit our page then,

35
00:01:33.700 --> 00:01:36.670
on Localhost: 3000, in the JavaScript console,

36
00:01:36.670 --> 00:01:38.900
we see Creating person object which

37
00:01:38.900 --> 00:01:41.140
is coming from the constructor.

38
00:01:41.140 --> 00:01:44.603
And we, of course, all see the Person itself here.

39
00:01:45.810 --> 00:01:49.550
Now there, in this example we got no decorators involved.

40
00:01:49.550 --> 00:01:51.000
Let's change this.

41
00:01:51.000 --> 00:01:53.370
At the top of the file let's add a decorator.

42
00:01:53.370 --> 00:01:56.060
And a decorator, and that's really important to understand,

43
00:01:56.060 --> 00:01:58.080
is in the end just a function.

44
00:01:58.080 --> 00:02:01.280
A function you apply to something, for example,

45
00:02:01.280 --> 00:02:03.530
to a class in a certain way.

46
00:02:03.530 --> 00:02:04.750
So let's create a function here,

47
00:02:04.750 --> 00:02:09.523
with the function keyword, and I will name it Logger.

48
00:02:10.390 --> 00:02:13.290
Now this is a function, the only special thing here is

49
00:02:13.290 --> 00:02:15.570
that I start with a capital character.

50
00:02:15.570 --> 00:02:16.492
This is not a must do by the way, you don't have

51
00:02:16.492 --> 00:02:20.200
to use a capital starting character,

52
00:02:20.200 --> 00:02:22.470
you can use a lowercase one as well,

53
00:02:22.470 --> 00:02:25.610
you just see a lot of decorators out there

54
00:02:25.610 --> 00:02:27.680
in libraries which you might use

55
00:02:27.680 --> 00:02:30.030
that use uppercase starting characters

56
00:02:30.030 --> 00:02:32.200
and therefore, I'll do the same here.

57
00:02:32.200 --> 00:02:35.450
So, the Logger function here is a function

58
00:02:35.450 --> 00:02:39.330
and we can apply this as a decorator as it will turn out.

59
00:02:39.330 --> 00:02:42.730
Now let's add a console log in here, Logging,

60
00:02:42.730 --> 00:02:44.730
so that we can see when this function runs.

61
00:02:44.730 --> 00:02:47.300
Because I will not call it directly.

62
00:02:47.300 --> 00:02:50.330
Instead I wanna add it as a decorator to this class.

63
00:02:50.330 --> 00:02:53.710
And we do so by adding a @ symbol here

64
00:02:53.710 --> 00:02:57.370
in front of the class and then our function here.

65
00:02:57.370 --> 00:02:58.440
Just like this.

66
00:02:58.440 --> 00:03:00.320
Now a couple of special things here.

67
00:03:00.320 --> 00:03:03.780
The @ symbol here is a special identifier

68
00:03:03.780 --> 00:03:06.170
TypeScript sees or recognizes.

69
00:03:06.170 --> 00:03:09.110
And then the thing directly after the @ symbol

70
00:03:09.110 --> 00:03:11.010
should point at a function.

71
00:03:11.010 --> 00:03:13.460
Not execute it, but point at it,

72
00:03:13.460 --> 00:03:15.800
which should be your decorator.

73
00:03:15.800 --> 00:03:17.400
Now here you see that Logger then

74
00:03:17.400 --> 00:03:20.650
accepts too few arguments to be used as a decorator here.

75
00:03:20.650 --> 00:03:23.010
So the good thing is, TypeScript understands that

76
00:03:23.010 --> 00:03:24.930
I want to use it as a decorator here.

77
00:03:24.930 --> 00:03:27.980
The bad thing is we don't pass enough arguments.

78
00:03:27.980 --> 00:03:31.000
And indeed, decorators receive arguments.

79
00:03:31.000 --> 00:03:34.870
How many arguments depends on where you use the decorator.

80
00:03:34.870 --> 00:03:39.710
Here, for a decorator we add to a class we get one argument.

81
00:03:39.710 --> 00:03:42.910
That's the target of this decorator

82
00:03:42.910 --> 00:03:46.160
so to say, which is our constructor function.

83
00:03:46.160 --> 00:03:49.020
So we can say we get a function here

84
00:03:49.020 --> 00:03:51.240
as an argument in the end.

85
00:03:51.240 --> 00:03:54.110
We can also name it constructor,

86
00:03:54.110 --> 00:03:56.650
because in the end we will get our constructor function

87
00:03:56.650 --> 00:03:59.550
of this class, or whichever class we add this decorator

88
00:03:59.550 --> 00:04:01.470
to as a argument.

89
00:04:01.470 --> 00:04:06.310
Let's also console.log that so that we can get some insight

90
00:04:06.310 --> 00:04:09.650
into this constructor argument here.

91
00:04:09.650 --> 00:04:10.550
And let's save this.

92
00:04:10.550 --> 00:04:12.750
And as you see it compiles without errors.

93
00:04:12.750 --> 00:04:14.750
And if we now have a look at our output,

94
00:04:14.750 --> 00:04:16.580
we see the old code from before,

95
00:04:16.580 --> 00:04:18.590
but we also see the Logging output,

96
00:04:18.590 --> 00:04:20.810
and this constructor function being logged.

97
00:04:20.810 --> 00:04:22.760
Well we actually see the whole class here,

98
00:04:22.760 --> 00:04:24.520
but classes in the end are just some

99
00:04:24.520 --> 00:04:27.670
tactical sugar over constructor functions.

100
00:04:27.670 --> 00:04:31.450
Please also note that our decorator output, Logging,

101
00:04:31.450 --> 00:04:35.030
and this class or this constructor function log here

102
00:04:35.030 --> 00:04:39.460
is printed first, before we see Creating person object

103
00:04:39.460 --> 00:04:41.540
and our Person object.

104
00:04:41.540 --> 00:04:44.360
Because, indeed, decorators and that's really important,

105
00:04:44.360 --> 00:04:48.430
decorators execute when your class is defined.

106
00:04:48.430 --> 00:04:50.530
Not when it is instantiated.

107
00:04:50.530 --> 00:04:53.020
You don't need to instantiate your class at all.

108
00:04:53.020 --> 00:04:55.760
We could remove that code for instantiating the class,

109
00:04:55.760 --> 00:04:58.780
and we would still get that decorator output.

110
00:04:58.780 --> 00:05:02.210
So the decorator runs when JavaScript finds your

111
00:05:02.210 --> 00:05:05.660
class definition, your constructor function definition.

112
00:05:05.660 --> 00:05:08.580
Not when you use that constructor function

113
00:05:08.580 --> 00:05:10.070
to instantiate an object.

114
00:05:10.070 --> 00:05:13.280
That's really important to understand.

115
00:05:13.280 --> 00:05:15.170
So this is our first decorator.

116
00:05:15.170 --> 00:05:16.670
It's not the only way

117
00:05:16.670 --> 00:05:19.063
of how we can create a decorator though.

