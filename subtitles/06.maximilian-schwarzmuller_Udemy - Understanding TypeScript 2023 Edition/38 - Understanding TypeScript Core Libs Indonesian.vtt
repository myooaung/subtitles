WEBVTT

00:02.190 --> 00:03.570
-: Kami juga punya modul di sini.

00:03.570 --> 00:06.050
Sekarang, modul adalah opsi yang akan saya lewati untuk

00:06.050 --> 00:07.540
saat ini, karena itu benar-benar

00:07.540 --> 00:10.830
hanya masuk akal setelah kita belajar tentang modul di TypeScript dan bagaimana

00:10.830 --> 00:13.400
kita dapat menghubungkan beberapa file.

00:13.400 --> 00:15.350
Jadi, mari kita abaikan itu untuk saat ini.

00:15.350 --> 00:17.250
Lib adalah salah satu yang menarik.

00:17.250 --> 00:20.890
Lib adalah opsi yang memungkinkan Anda untuk menentukan

00:20.890 --> 00:25.650
objek dan fitur default mana yang TypeScript ketahui.

00:25.650 --> 00:28.580
Yang saya maksudkan di sini adalah hal-hal seperti bekerja dengan dom.

00:28.580 --> 00:31.930
Katakanlah dalam indeks. html kita memiliki sebuah tombol dan pada

00:31.930 --> 00:33.700
tombol ini kita mengatakan, "Klik saya. Sekarang, ketika kita mengklik tombol ini,

00:33.700 --> 00:35.100
kita hanya ingin mencetak pesan.

00:35.100 --> 00:36.610
Sekarang, dalam aplikasi. ts kita bisa memilih tombol ini.

00:36.610 --> 00:39.820
Kita bisa mendapatkan akses ke

00:39.820 --> 00:41.420
tombol ini dengan dokumen. querySelector.

00:43.808 --> 00:44.641
Misalnya, memilih tombol pertama yang kita temukan.

00:44.641 --> 00:48.130
Sekarang jika kita melakukan itu, maka ini akan berhasil.

00:48.130 --> 00:51.580
Kita tidak mendapatkan jenis kesalahan di sini.

00:51.580 --> 00:53.000
Jadi jika saya pergi ke tombol saya

00:53.000 --> 00:58.000
dan saya menambahkan EventListener di sini, saya mendapatkan kesalahan di sini sebenarnya karena TypeScript

00:58.390 --> 01:00.990
tidak tahu pasti apakah kita menemukan tombol di sini.

01:00.990 --> 01:04.010
Untuk saat ini kita bisa mengatasinya dengan tanda seru, setelah

01:04.010 --> 01:07.310
baris ini dan saya akan kembali ke apa yang sebenarnya dilakukan

01:07.310 --> 01:08.860
ini di masa mendatang.

01:08.860 --> 01:11.320
Ini pada dasarnya memberitahu TypeScript, "Jangan

01:11.320 --> 01:13.667
khawatir," tombol seperti itu akan ada.

01:13.667 --> 01:15.097
"Kita akan mendapatkan nilai di sini. Jadi, sekarang kita bisa menambahkan event klik di sini.

01:15.097 --> 01:17.360
Dan kemudian temukan beberapa fungsi

01:17.360 --> 01:19.470
anonim mungkin di mana konsol. log diklik.

01:19.470 --> 01:21.670
Sekarang, hal yang menarik di sini bukan karena saya harus

01:21.670 --> 01:24.920
menambahkan tanda seru, seperti yang saya

01:24.920 --> 01:26.450
katakan saya akan kembali ke sana, tetapi

01:26.450 --> 01:29.310
jika saya menjalankan tsc, ini hanya mengkompilasi.

01:29.310 --> 01:31.150
Sekarang, bukankah seharusnya

01:31.150 --> 01:34.840
TypeScript mengeluh bahwa dokumen tidak dikenal di sini?

01:34.840 --> 01:38.370
Bagaimana mengetahui bahwa kita memiliki dokumen, konstanta atau

01:38.370 --> 01:39.690
variabel yang tersedia?

01:39.690 --> 01:43.290
Bagaimana ia tahu bahwa meskipun kita memiliki itu tersedia

01:43.290 --> 01:45.610
bahwa ia memegang objek yang memiliki

01:45.610 --> 01:48.350
metode querySelector kita?

01:48.350 --> 01:50.010
Bagaimana ia mengetahui bahwa tombol adalah sesuatu

01:50.010 --> 01:51.690
yang memiliki metode addEventListener?

01:51.690 --> 01:55.932
Bagaimana TypeScript mengetahui semua itu?

01:55.932 --> 01:57.120
Sekarang Anda mungkin berkata, "Tentu saja ia tahu. Karena dalam Vanilla JavaScript,

01:57.120 --> 01:59.290
ini akan menjadi kode yang valid, tetapi perlu diingat

01:59.290 --> 02:01.430
bahwa ketika Anda menulis kode TypeScript, Anda tidak

02:01.430 --> 02:03.290
harus menulisnya untuk browser.

02:03.290 --> 02:05.580
Anda bisa saja menulis Node. js dengan TypeScript

02:05.580 --> 02:08.080
dan memang ini semua

02:08.080 --> 02:11.310
tidak akan bekerja.

02:11.310 --> 02:13.200
Jadi, alasan mengapa ini bekerja

02:13.200 --> 02:14.630
adalah opsi lib ini dan seperti yang Anda lihat,

02:14.630 --> 02:18.280
opsi ini bahkan tidak disetel di sini, tetapi jika tidak disetel maka beberapa default diasumsikan.

02:18.280 --> 02:21.940
Jika tidak diatur, defaultnya tergantung pada

02:21.940 --> 02:24.420
target JavaScript Anda di sini,

02:24.420 --> 02:28.180
dan untuk es6, secara default, mencakup semua fitur

02:28.180 --> 02:31.536
yang tersedia secara global di es6.

02:31.536 --> 02:33.270
Sebagai contoh, objek Map yang tersedia di es6.

02:33.270 --> 02:35.940
Oleh karena itu, ia tidak akan mengeluh jika Anda menggunakan Map.

02:35.940 --> 02:40.120
Jadi, ini mengasumsikan semua fitur es6 yang tersedia

02:40.120 --> 02:45.120
secara global di JavaScript, bahwa fitur-fitur tersebut juga

02:46.400 --> 02:48.700
tersedia di TypeScript.

02:50.677 --> 02:51.780
Dan sebagai tambahan,

02:51.780 --> 02:54.530
ini mengasumsikan bahwa semua API DOM tersedia.

02:54.530 --> 02:57.070
Anda akan menemukan penjelasan rinci mengenai

02:57.070 --> 03:00.670
semua opsi ini, dalam kotak resmi yang ditautkan dalam kuliah di

03:00.670 --> 03:01.740
akhir modul ini.

03:01.740 --> 03:04.550
Jadi, singkat cerita, jika opsi lib tidak diatur,

03:04.550 --> 03:07.300
beberapa default diasumsikan dan ini biasanya

03:07.300 --> 03:09.490
default yang Anda butuhkan agar TypeScript

03:09.490 --> 03:11.520
berjalan di browser.

03:11.520 --> 03:13.760
Jadi, semua API DOM sudah tidak ada.

03:13.760 --> 03:16.030
Jika kita mengomentari ini dan sekarang

03:16.030 --> 03:19.014
saya mengkompilasi semuanya, saya pasti mendapatkan

03:19.014 --> 03:20.670
kesalahan, karena sekarang mereka

03:20.670 --> 03:24.780
mengomentarinya, kita tidak memiliki pengaturan default lagi.

03:24.780 --> 03:26.010
Malahan, kita sekarang mengatakan, "Hei,

03:26.010 --> 03:28.050
tolong sertakan "beberapa pustaka default," beberapa definisi tipe

03:28.050 --> 03:30.370
default yang bisa Anda katakan, yang akan saya berikan dalam array ini.

03:30.370 --> 03:32.437
Dan, seperti yang Anda lihat, saya tidak

03:32.437 --> 03:36.330
melewatkan deskripsi apa pun, jalur apa pun, nilai apa pun di sini.

03:36.330 --> 03:39.470
Dan oleh karena itu, apa yang saya katakan kepada TypeScript

03:39.470 --> 03:43.213
sekarang adalah, "Hei, mengenai semua default, Anda tahu, "tolong pertimbangkan

03:44.162 --> 03:45.050
ini. Dan, Anda tahu, tidak ada apa-apa.

03:45.050 --> 03:46.920
Jadi, hanya jika itu dikomentari, itu berfungsi,

03:46.920 --> 03:50.037
karena kemudian TypeScript akan mengasumsikan beberapa default.

03:50.037 --> 03:51.770
Jika saya mengatur default secara eksplisit,

03:51.770 --> 03:53.580
maka TypeScript, tentu saja, mengikuti

03:53.580 --> 03:55.300
apa yang saya atur di sini.

03:55.300 --> 03:57.410
Dan di sini misalnya, ia tidak tahu dokumen,

03:57.410 --> 03:59.740
Ia bahkan tidak tahu konsol di sini.

03:59.740 --> 04:01.600
Jadi oleh karena itu, kami ingin menetapkan dua

04:01.600 --> 04:02.680
nilai yang lebih masuk akal

04:02.680 --> 04:05.410
ini dan, sekali lagi, jika Anda menekan ruang kontrol, dan di sini Anda

04:05.410 --> 04:07.343
mendapatkan penyelesaian otomatis.

04:08.900 --> 04:10.930
Misalnya, di sana kita bisa menambahkan dom.

04:10.930 --> 04:12.360
Itu adalah identifier dan ada beberapa identifier yang

04:12.360 --> 04:13.800
telah ditentukan sebelumnya, yang dipahami TypeScript,

04:13.800 --> 04:15.800
sekali lagi, Anda akan menemukan daftar lengkapnya di dokumen resmi.

04:15.800 --> 04:18.280
Dokumen untuk opsi ini juga

04:18.280 --> 04:21.070
dilampirkan pada kuliah ini.

04:21.070 --> 04:22.840
Jadi, ini adalah pengenal yang dipahami

04:22.840 --> 04:26.070
TypeScript dan ini adalah pengenal yang pada dasarnya membuka semua

04:26.070 --> 04:27.750
API DOM di TypeScript, sehingga TypeScript

04:27.750 --> 04:30.100
memahami apa yang Anda lakukan di sini.

04:30.100 --> 04:32.680
Jadi sekarang, Anda sudah melihatnya tahu

04:32.680 --> 04:35.150
konsol, tahu dokumen, dan seterusnya.

04:35.150 --> 04:37.040
Jadi sekarang karena kita bekerja

04:37.040 --> 04:40.100
dengan Next-Gen JavaScript kita juga harus menambahkan

04:40.100 --> 04:42.550
opsi es6, sehingga TypeScript juga memahami

04:42.550 --> 04:45.400
semua opsi es6 yang tersedia secara global.

04:45.400 --> 04:47.896
Dan juga merupakan ide yang bagus untuk menambahkan dom. iterable dan

04:47.896 --> 04:50.830
scripthost.

04:50.830 --> 04:54.130
Dengan itu di sini kita akan membuka semua fitur inti JavaScript yang ingin Anda

04:54.130 --> 04:56.540
gunakan dan ini, omong-omong, adalah pengaturan default

04:56.540 --> 05:00.620
yang tepat yang Anda dapatkan ketika Anda menetapkan

05:00.620 --> 05:02.530
target ke es6, bagaimanapun juga.

05:02.530 --> 05:05.250
Jadi, jika Anda mengomentari ini dan mengaturnya seperti

05:05.250 --> 05:07.360
ini, Anda memiliki perilaku yang persis sama

05:07.360 --> 05:09.980
seperti jika Anda tidak menentukan lib sama sekali.

05:09.980 --> 05:13.550
Sekarang, di sini saya akan mengomentari hal itu dan dengan

05:13.550 --> 05:15.860
itu ini akan terkompilasi.

05:15.860 --> 05:17.959
Sekali lagi, pengaturan ini agak berlebihan,

05:17.959 --> 05:20.920
hanya ingin menjelaskan apa yang dilakukannya.
