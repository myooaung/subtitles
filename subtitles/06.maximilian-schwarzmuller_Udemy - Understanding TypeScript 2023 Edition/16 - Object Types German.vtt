WEBVTT

00:02.280 --> 00:03.780
Kursleiter: Lassen Sie uns die Kerntypen,

00:03.780 --> 00:06.450
die TypeScript unterstützt, näher betrachten.

00:06.450 --> 00:09.800
Der nächste interessante Typ ist der Objekttyp.

00:09.800 --> 00:13.100
Sie kennen Objekte in JavaScript, die so aussehen.

00:13.100 --> 00:14.690
Sie haben geschweifte Klammern

00:14.690 --> 00:16.350
und dann haben Sie Schlüssel-Wert-Paare

00:16.350 --> 00:20.460
darin und solche Werte würden auch als Objekttypen in TypeScript behandelt werden,

00:20.460 --> 00:22.250
also ist jedes JavaScript-Objekt vom

00:22.250 --> 00:23.620
Typ Objekt.

00:23.620 --> 00:28.410
Obwohl ich bereits gesagt habe, dass es spezifischere Versionen von Objekten in TypeScript

00:28.410 --> 00:30.030
gibt, so dass man sagen kann, dass

00:30.030 --> 00:32.514
dies nicht irgendein Objekt ist, sondern ein

00:32.514 --> 00:35.108
Objekt, das diese Eigenschaften haben muss oder

00:35.108 --> 00:37.260
das auf dieser oder jener Konstruktorfunktion

00:37.260 --> 00:39.490
basieren muss.

00:39.490 --> 00:41.322
Aber wir werden Schritt für Schritt dorthin kommen.

00:41.322 --> 00:45.110
Um in die Objekte einzutauchen, werde ich zunächst app umbenennen. ts hier und ich werde es

00:45.110 --> 00:49.770
in Grundlagen umbenennen. ts hier.

00:49.770 --> 00:52.058
Und fügen Sie eine neue Anwendung hinzu. ts-Datei, die dann die

00:52.058 --> 00:55.400
alte Anwendung überschreibt. js-Datei, sobald wir sie kompiliert

00:55.400 --> 00:58.600
haben, wo wir nun in Objekte eintauchen können.

00:58.600 --> 01:01.110
Beginnen wir mit der Erstellung eines Basisobjekts,

01:01.110 --> 01:03.902
z. B. einer Person mit geschweiften Klammern.

01:03.902 --> 01:05.870
Und wir geben dem Ganzen einen Namen.

01:05.870 --> 01:08.230
Hier nehme ich Maximilian, denn das ist

01:08.230 --> 01:10.700
mein Name und ein Alter von 30 Jahren.

01:10.700 --> 01:14.930
Jetzt können wir natürlich trösten. log Person hier, und wenn wir

01:14.930 --> 01:18.375
das tun, und wir kompilieren dies wenig überraschend,

01:18.375 --> 01:23.010
sollten wir sehen, dass das Objekt hier in der Konsole ausgegeben

01:23.010 --> 01:24.536
wird.

01:24.536 --> 01:27.284
In JavaScript können wir auch versuchen,

01:27.284 --> 01:31.690
auf eine Eigenschaft zuzugreifen, die es hier nicht gibt,

01:31.690 --> 01:33.970
z. B. Nickname.

01:33.970 --> 01:37.320
Jetzt sehen Sie sofort, dass TypeScript darüber nicht sehr

01:37.320 --> 01:39.820
glücklich ist, und daher sagt mir meine IDE.

01:39.820 --> 01:42.302
Es sagt mir, dass die Eigenschaft "Spitzname"

01:42.302 --> 01:44.050
für diesen Typ nicht existiert.

01:44.050 --> 01:47.642
Wenn wir das also speichern und versuchen, es zu kompilieren, erhalten

01:47.642 --> 01:49.907
wir in der Tat denselben Fehler.

01:49.907 --> 01:52.210
Der TypeScript-Compiler mag dies nicht und

01:52.210 --> 01:54.401
sagt mir, dass wir keine Nickname-Eigenschaft

01:54.401 --> 01:56.430
für dieses Objekt haben.

01:56.430 --> 01:59.813
Es findet heraus, dass wir diese Nickname-Eigenschaft nicht haben,

01:59.813 --> 02:02.936
denn wenn wir den Mauszeiger über Person bewegen, können wir sehen,

02:02.936 --> 02:05.710
dass nach Person ein Doppelpunkt steht, also nach dem Namen

02:05.710 --> 02:07.970
der Variablen oder Konstanten.

02:07.970 --> 02:11.030
Daraus wird gefolgert, dass dies die Art der Daten ist, die dort

02:11.030 --> 02:12.110
gespeichert sind.

02:12.110 --> 02:14.181
Das ist nicht nur ein Objekt, wie Sie sehen können.

02:14.181 --> 02:16.349
Das ist ein konkretes Objekt.

02:16.349 --> 02:18.920
Es handelt sich um ein Objekt mit einem Namensschlüssel,

02:18.920 --> 02:21.430
wobei der Typ wiederum eine Zeichenkette sein muss.

02:21.430 --> 02:24.700
Und der Altersschlüssel, wobei der Typ eine Zahl sein muss.

02:24.700 --> 02:27.116
Und das kann hier tatsächlich verwirrend sein.

02:27.116 --> 02:31.100
Dies hier sieht offensichtlich wie ein JavaScript-Objekt aus.

02:31.100 --> 02:33.980
Geschweifte Klammern, Schlüssel-Wert-Paare.

02:33.980 --> 02:36.020
Das Wichtigste ist, dass wir nach

02:36.020 --> 02:38.520
jeder Zeile ein Semikolon haben.

02:38.520 --> 02:40.580
Das haben wir in einem JavaScript-Objekt nicht.

02:40.580 --> 02:41.750
Wir haben hier ein Komma.

02:41.750 --> 02:44.160
Und tatsächlich handelt es sich hier nicht um ein JavaScript-Objekt,

02:44.160 --> 02:45.940
das irgendwo erstellt wird.

02:45.940 --> 02:50.600
Dies ist der Objekttyp, der von TypeScript abgeleitet wird, und Objekttypen

02:50.600 --> 02:53.914
werden fast wie Objekte geschrieben, aber natürlich

02:53.914 --> 02:57.106
haben wir hier keine Schlüssel-Wert-Paare, sondern

02:57.106 --> 02:59.239
Schlüssel-Typ-Paare.

02:59.239 --> 03:02.840
Objekttypen sind dazu da, den Typ des Objekts zu beschreiben,

03:02.840 --> 03:06.064
der irgendwo verwendet wird.

03:06.064 --> 03:07.653
Wir könnten noch allgemeiner sein.

03:07.653 --> 03:10.420
Ich könnte hier der Konstante von

03:10.420 --> 03:13.640
object explizit einen Typ zuweisen.

03:13.640 --> 03:16.100
Object ist einer der eingebauten Typen, genau wie

03:16.100 --> 03:17.460
number und string, und wenn

03:17.460 --> 03:21.030
ich jetzt mit dem Mauszeiger darüber fahre, sehen wir Personen vom Typ

03:21.030 --> 03:24.000
object und TypeScript kümmert sich wirklich nur um die Tatsache,

03:24.000 --> 03:26.430
dass dies ein Objekttyp ist.

03:26.430 --> 03:28.423
Wenn wir das kompilieren, erhalten wir

03:28.423 --> 03:32.808
trotzdem diesen Fehler, weil TypeScript immer noch unseren Code analysiert und

03:32.808 --> 03:35.490
sieht, dass wir versuchen, auf etwas zuzugreifen,

03:35.490 --> 03:36.666
das dort nicht existiert,

03:36.666 --> 03:39.770
aber es ist wichtig zu verstehen, dass alles mit diesem generischen

03:39.770 --> 03:42.140
Objekttyp beginnt.

03:42.140 --> 03:44.660
Aber oft muss man noch spezifischer sein als das.

03:44.660 --> 03:47.623
Sie wollen nicht nur mit diesem generischen Objekttyp arbeiten.

03:47.623 --> 03:50.284
Sie möchten wirklich die volle Unterstützung erhalten.

03:50.284 --> 03:53.550
Wenn ich jetzt zum Beispiel hier einen Punkt einfüge und mir meine

03:53.550 --> 03:55.570
Autovervollständigung ansehe, bekomme

03:55.570 --> 03:58.080
ich von meiner IDE überhaupt keine Hilfe.

03:58.080 --> 04:00.303
Der Grund dafür ist, dass wir der IDE

04:00.303 --> 04:04.230
nur mitteilen, dass wir hier einen Wert in Person haben, der

04:04.230 --> 04:05.860
vom Typ Objekt ist.

04:05.860 --> 04:08.300
Tatsächlich erhalten wir jetzt auch einen Fehler, wenn

04:08.300 --> 04:10.210
ich versuche, auf den Namen zuzugreifen.

04:10.210 --> 04:12.270
Der Name existiert hier, richtig?

04:12.270 --> 04:14.120
Aber was wir TypeScript hier mitteilen, ist,

04:14.120 --> 04:16.601
dass wir einfach ein Objekt haben, bei dem wir keine unserer

04:16.601 --> 04:18.889
Informationen an TypeScript weitergeben.

04:18.889 --> 04:21.739
TypeScript unterstützt also eigentlich keine

04:21.739 --> 04:24.750
Art von Eigenschaft, weil wir ihm nichts über das

04:24.750 --> 04:26.210
Objekt mitteilen.

04:26.210 --> 04:28.050
Wir sollten also genauer sein.

04:28.050 --> 04:32.000
Und wir sind noch spezifischer, indem wir einen bestimmten Objekttyp festlegen.

04:32.000 --> 04:34.795
Die Sache, die TypeScript auch automatisch abgeleitet hat.

04:34.795 --> 04:38.548
Dazu fügen wir hier nach dem Doppelpunkt geschweifte

04:38.548 --> 04:43.370
Klammern nach dem Namen unserer Konstanten oder Variablen ein.

04:43.370 --> 04:46.213
Hier wird also kein neues JavaScript-Objekt erstellt.

04:46.213 --> 04:48.460
Dies wird aus dem kompilierten JavaScript-Code

04:48.460 --> 04:50.310
entfernt.

04:50.310 --> 04:52.643
Stattdessen ist dies nur TypeScripts Notation

04:52.643 --> 04:55.855
eines spezialisierten Objekttyps, sozusagen.

04:55.855 --> 04:59.422
Also eines Objekttyps, bei dem wir einige Informationen über die Struktur

04:59.422 --> 05:01.434
des Objekts bereitstellen.

05:01.434 --> 05:04.520
Indem wir nun einfach ein leeres Paar geschweifter Klammern als Typ

05:04.520 --> 05:07.440
zuweisen, tun wir im Wesentlichen dasselbe wie mit object.

05:07.440 --> 05:09.765
Wir sagen TypeScript, dass dies ein Objekt ist.

05:09.765 --> 05:12.740
Jetzt können wir aber konkreter werden.

05:12.740 --> 05:16.550
Wir können hier Schlüsselwerteinträge hinzufügen, jedoch nicht

05:16.550 --> 05:19.694
den Schlüsselwert, sondern den Schlüsseltyp.

05:19.694 --> 05:22.800
Hier könnten wir also sagen, dass das Objekt, das in Person

05:22.800 --> 05:25.091
gespeichert werden soll, eine Namenseigenschaft

05:25.091 --> 05:28.197
haben sollte und der Wert dieser Namenseigenschaft

05:28.197 --> 05:31.140
vom Typ String sein sollte.

05:31.140 --> 05:33.795
Hier beschreiben wir also die Art des Wertes,

05:33.795 --> 05:36.440
der schließlich in name gespeichert wird.

05:36.440 --> 05:39.320
Sie sehen übrigens, dass ich hier einen Fehler erhalte.

05:39.320 --> 05:41.090
Denn was ich TypeScript jetzt sage,

05:41.090 --> 05:43.489
ist, dass meine Person ein Objekt mit genau einem

05:43.489 --> 05:45.900
Schlüssel-Wert-Paar haben sollte, wobei der Schlüssel

05:45.900 --> 05:48.626
Name und der Wert dieses Schlüssels String ist, aber wir

05:48.626 --> 05:52.730
haben kein Objekt mit zwei Schlüssel-Wert-Paaren zugewiesen.

05:52.730 --> 05:55.020
Name, der eine Zeichenfolge enthält, ist in

05:55.020 --> 05:58.500
Ordnung, aber Alter, das eine Zahl enthält, wäre nicht in Ordnung.

05:58.500 --> 06:01.140
Wir müssen dies also anpassen, indem wir ein Semikolon

06:01.140 --> 06:03.520
und ein weiteres Schlüssel-Wert-Paar hinzufügen,

06:03.520 --> 06:06.300
wo wir sagen, dass das Alter vom Typ Zahl sein sollte.

06:06.300 --> 06:09.670
Also nicht 30 hier, das würde eigentlich in TypeScript unterstützt werden,

06:09.670 --> 06:12.673
dass wir es auf eine bestimmte Zahl beschränken, aber dann werden

06:12.673 --> 06:15.600
wir in Probleme laufen, sobald wir das ändern.

06:15.600 --> 06:19.060
Stattdessen möchte ich hier nur sagen, dass das Alter eine Zahl sein sollte.

06:19.060 --> 06:22.360
Und jetzt weisen wir im Grunde explizit das gleiche TypeScript

06:22.360 --> 06:24.870
zu, das wir zuvor abgeleitet haben.

06:24.870 --> 06:26.900
Wie Sie gelernt haben, ist das keine gute Praxis,

06:26.900 --> 06:28.570
aber um Objekttypen zu verstehen, wollte

06:28.570 --> 06:29.940
ich es hier tun.

06:29.940 --> 06:32.315
Dennoch ist dies etwas, was Sie tun können.

06:32.315 --> 06:37.010
Es ist besser, TypeScript dies wie zuvor

06:37.010 --> 06:40.440
ableiten zu lassen, etwa so.

06:40.440 --> 06:42.351
Um nun etwas Interessantes zu

06:42.351 --> 06:45.450
zeigen: Wenn ich zu diesem suboptimalen Code zurückkehre,

06:45.450 --> 06:47.970
bei dem wir explizit einen Typ zuweisen,

06:47.970 --> 06:49.920
kann TypeScript daraus schließen,

06:49.920 --> 06:54.920
dass es funktioniert, wenn wir diesen Code kompilieren.

06:55.180 --> 06:56.900
Wir können auf die Eigenschaft name zugreifen, aber wenn

06:56.900 --> 06:59.077
wir dann einen Blick auf app. js sehen wir, dass diese

06:59.077 --> 07:01.220
Typenzuweisung hier aufgehoben ist.

07:01.220 --> 07:03.417
Und das sollte man natürlich erwarten können.

07:03.417 --> 07:06.290
Wie ich bereits erwähnt habe, sind Typen und Typzuweisungen

07:06.290 --> 07:08.120
nicht Teil von JavaScript.

07:08.120 --> 07:09.460
Sie sind nur in TypeScript verfügbar.

07:09.460 --> 07:10.800
Ich wollte dies nur noch einmal

07:10.800 --> 07:12.840
zeigen, um zu verdeutlichen, dass diese Syntax

07:12.840 --> 07:15.080
hier kein JavaScript-Objekt erzeugt, das sich irgendwo

07:15.080 --> 07:16.485
in unserem Code befindet.

07:16.485 --> 07:21.263
Dies ist lediglich die TypeScript-Darstellung eines Objekttyps, die

07:21.263 --> 07:24.570
TypeScript hilft, die Objekte zu verstehen, mit denen

07:24.570 --> 07:25.900
Sie arbeiten.

07:25.900 --> 07:29.950
Die bessere Syntax ist natürlich diese Syntax, wie Sie gelernt haben.
