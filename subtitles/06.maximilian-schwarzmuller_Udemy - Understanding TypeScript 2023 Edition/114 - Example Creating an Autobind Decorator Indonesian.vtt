WEBVTT

00:02.270 --> 00:03.613
Instruktur: Jadi kita bisa mengembalikan

00:03.613 --> 00:05.080
sesuatu pada Method Decorators, dan

00:05.080 --> 00:06.820
sesuatu itu harus berupa deskriptor, yang

00:06.820 --> 00:08.920
memungkinkan kita untuk mengubah metode atau mengubah

00:08.920 --> 00:11.000
konfigurasi metode.

00:11.000 --> 00:12.582
Dan ini adalah sesuatu yang ingin saya lakukan di sini.

00:12.582 --> 00:15.985
Sebelum itu, pertama-tama saya akan pergi ke file HTML indeks

00:15.985 --> 00:18.540
dan di sana, mari kita tambahkan tombol.

00:18.540 --> 00:21.272
Click Me, tombol yang sangat sederhana,

00:21.272 --> 00:24.720
di aplikasi saya. ts, saya sekarang ingin memastikan

00:24.720 --> 00:26.104
bahwa ketika kita mengklik

00:26.104 --> 00:29.800
tombol ini, kita mengeksekusi sebuah method pada sebuah objek.

00:29.800 --> 00:32.120
Dan untuk itu, saya hanya akan menambahkan

00:32.120 --> 00:34.600
kelas baru di sini, pertama-tama, printer.

00:34.600 --> 00:38.140
Dan di sana saya ingin memiliki pesan properti yang hanya

00:38.140 --> 00:41.690
berfungsi ini, jadi string sederhana yang disimpan

00:41.690 --> 00:45.980
di sana dan kemudian saya ingin memiliki metode tampilkan pesan

00:45.980 --> 00:49.630
di sana di mana saya cukup konsol log pesan ini.

00:49.630 --> 00:51.770
Jadi, tentu saja, ini adalah jenis kelas tiruan sederhana, tetapi tidak kurang

00:51.770 --> 00:53.430
dari itu, ini memungkinkan saya untuk menunjukkan kepada Anda

00:53.430 --> 00:54.860
apa yang ingin saya tunjukkan kepada Anda.

00:54.860 --> 00:56.550
Mari kita pilih tombol ke pintu

00:56.550 --> 01:00.860
sekarang, dengan tombol pemilih kueri dokumen dan mari tambahkan

01:00.860 --> 01:02.970
pendengar acara ke sana.

01:02.970 --> 01:05.080
Sekarang, pertama-tama, saya akan menambahkan

01:05.080 --> 01:07.800
tanda seru di sini untuk memperjelas TypeScript bahwa ini ada,

01:07.800 --> 01:08.806
bahwa ini tidak akan menjadi

01:08.806 --> 01:10.990
null, dan kemudian saya akan menambahkan pendengar

01:10.990 --> 01:14.210
acara, pendengar acara klik, dan kemudian saya ingin memicu metode tampilkan

01:14.210 --> 01:16.450
pesan ini di sini.

01:16.450 --> 01:20.350
Untuk itu, saya akan membuat printer baru di sini, seperti ini, dan kemudian

01:20.350 --> 01:23.120
di sini arahkan ke p. showMessage, itulah

01:23.120 --> 01:24.323
ide saya di sini.

01:25.300 --> 01:27.103
Sekarang, jika kita menyimpannya,

01:28.153 --> 01:31.440
dan kita kembali ke halaman kita dan saya klik tombol ini, kita mendapatkan

01:31.440 --> 01:33.320
undefined di sini, meskipun, kita tidak

01:33.320 --> 01:36.050
mendapatkan pesan yang ditampilkan.

01:36.050 --> 01:38.860
Dan alasan untuk itu adalah bahwa dengan pendengar peristiwa,

01:38.860 --> 01:41.820
jika kita menunjuk pada fungsi yang harus dieksekusi,

01:41.820 --> 01:44.240
kata kunci ini di dalam fungsi itu tidak akan memiliki

01:44.240 --> 01:48.260
konteks atau referensi yang sama seperti yang dimilikinya jika kita memanggil

01:48.260 --> 01:52.193
hanya p. ShowMessage, dalam hal

01:53.144 --> 01:56.450
ini, ini akan merujuk ke printer.

01:56.450 --> 02:00.200
Tidak, dalam skenario di sini di mana kita menggunakan event

02:00.200 --> 02:02.860
listener, ini akan merujuk ke target event,

02:02.860 --> 02:05.777
karena addEventListener pada akhirnya mengikat

02:05.777 --> 02:07.693
ini dalam fungsi yang akan dieksekusi

02:07.693 --> 02:09.560
ke target event.

02:09.560 --> 02:11.360
Dan tentu saja, saya tidak menginginkan ini.

02:11.360 --> 02:12.570
Sekarang, solusi umum

02:12.570 --> 02:14.170
di sini adalah menggunakan

02:14.170 --> 02:19.170
metode bind dan mengikat showMessage ke p, atau mengikat ini di showMessage ke p

02:19.480 --> 02:22.860
sehingga ketika ini dijalankan, ini tidak mengacu pada

02:22.860 --> 02:25.420
apa yang ingin direferensikan oleh addEventListener,

02:25.420 --> 02:28.040
tetapi ini di dalam showMessage akan mengacu

02:28.040 --> 02:31.770
ke p ini, ke objek ini di sini lagi.

02:31.770 --> 02:33.300
Dan jika kita sekarang, jika kita reload

02:33.300 --> 02:36.270
di sini dan saya kosongkan ini lagi, sekarang kita lihat ini berfungsi!

02:36.270 --> 02:39.240
Sekarang, itu semua adalah JavaScript default.

02:39.240 --> 02:40.790
Sekarang, kita akan membangun

02:40.790 --> 02:42.191
sebuah decorator, yang dapat

02:42.191 --> 02:47.191
kita tambahkan ke metode ini, yang secara otomatis akan mengikatnya ke kelas di sekitarnya, jadi

02:47.460 --> 02:50.130
ke objek yang dimiliki metode ini, setiap kali metode

02:50.130 --> 02:53.440
ini dipanggil, tidak peduli di mana kita memanggilnya.

02:53.440 --> 02:55.974
Jadi untuk itu, di atas printer saya akan menambahkan fungsi baru

02:55.974 --> 02:58.800
dan saya akan menamainya autobind karena itulah, pada akhirnya, apa

02:58.800 --> 03:01.580
yang kita lakukan dan itu akan menjadi autobind dekorator saya.

03:01.580 --> 03:03.890
Tentu saja dapat juga menggunakan karakter awal kapital agar

03:03.890 --> 03:05.960
tetap sejalan dengan penamaan kami yang lain, tetapi sekali

03:05.960 --> 03:07.930
lagi, Anda dapat menggunakan salah satu dari keduanya

03:07.930 --> 03:10.122
saat Anda mendefinisikan fungsi dekorator.

03:10.122 --> 03:13.300
Sekarang ini di sini akan menjadi dekorator saya dan di sana kita

03:13.300 --> 03:15.269
mendapatkan beberapa argumen.

03:15.269 --> 03:17.940
Kami mendapatkan target, seperti yang akan Anda pelajari, dan itu adalah apa saja.

03:17.940 --> 03:20.085
Ini adalah prototipe dari objek yang sedang

03:20.085 --> 03:22.533
kita kerjakan atau fungsi konstruktor jika kita

03:22.533 --> 03:25.730
akan menambahkan ini ke metode statis tetapi di sini akan menjadi

03:25.730 --> 03:27.340
prototipe karena kita akan menambahkannya

03:27.340 --> 03:30.200
ke metode instance.

03:30.200 --> 03:32.520
Kemudian kita memiliki nama metode atau nama properti tetapi

03:32.520 --> 03:33.690
karena kita menambahkannya ke

03:33.690 --> 03:36.330
metode kita dapat memanggil nama metode ini, lebih masuk akal.

03:36.330 --> 03:38.600
Jika ini adalah string atau simbol atau bisa juga

03:38.600 --> 03:40.229
angka, tentu saja, tetapi di sini

03:40.229 --> 03:43.250
kita tahu kita biasanya akan bekerja dengan string jadi kita

03:43.250 --> 03:45.061
juga bisa menggunakan string di sini,

03:45.061 --> 03:48.470
tergantung di mana Anda berencana menambahkan dekorator ini dan seberapa

03:48.470 --> 03:50.170
generik seharusnya dan yang terakhir,

03:50.170 --> 03:52.484
kita mendapatkan deskriptor di sini yang akan

03:52.484 --> 03:56.340
bertipe PropertyDescriptor sebagai peringatan.

03:56.340 --> 03:57.650
Jadi sekarang kita punya

03:57.650 --> 03:59.655
tiga argumen yang kita gunakan pada

03:59.655 --> 04:03.540
Log3 yang merupakan method decorator kita sebelumnya.

04:03.540 --> 04:05.970
Sekarang, di autobind, dan saya sekarang

04:05.970 --> 04:08.994
ingin memastikan bahwa kita selalu mengatur kata kunci

04:08.994 --> 04:11.973
ini ke objek ini yang dimiliki metode ini lagi.

04:11.973 --> 04:14.240
Sekarang, bagaimana kita bisa mencapai hal ini?

04:14.240 --> 04:15.797
Pertama-tama, saya harus mendapatkan

04:15.797 --> 04:17.880
akses ke metode yang harus dipanggil.

04:17.880 --> 04:20.661
Dan ini akan dimungkinkan dengan bantuan deskriptor kami, karena

04:20.661 --> 04:22.013
jika Anda memuat ulang aplikasi

04:22.013 --> 04:25.180
dan Anda melihat deskriptor metode seperti itu di bawah sana, Anda melihat

04:25.180 --> 04:27.330
kami mendapatkan properti nilai dalam deskriptor

04:27.330 --> 04:29.460
dan itu menunjuk ke fungsi.

04:29.460 --> 04:32.240
Karena nilai properti ini adalah fungsi, dalam hal ini,

04:32.240 --> 04:33.930
metode hanyalah properti dengan

04:33.930 --> 04:35.498
fungsi sebagai nilainya.

04:35.498 --> 04:38.630
Jadi value key memegang fungsi aslinya, oleh karena itu, di

04:38.630 --> 04:42.980
sini, kita bisa mengekstrak method aslinya, jika kita ingin memanggilnya seperti

04:42.980 --> 04:47.320
ini dengan mengakses descriptor.

04:47.320 --> 04:47.320
nilai.

04:47.320 --> 04:50.563
Hal ini akan memberi kita akses ke metode asli.

04:51.790 --> 04:55.450
Selanjutnya, saya akan menyiapkan deskriptor baru yang disesuaikan, ini pada

04:55.450 --> 04:58.320
akhirnya akan menjadi apa yang kita kembalikan nanti.

04:58.320 --> 05:00.030
Sekarang ini akan menjadi

05:00.030 --> 05:03.620
objek dan akan menjadi tipe property descriptor.

05:03.620 --> 05:06.350
Sekarang dalam objek ini di sini kita dapat menambahkan

05:06.350 --> 05:09.350
semua hal yang dapat kita tambahkan ke deskriptor properti.

05:09.350 --> 05:12.110
Dan misalnya, dapat mengatur ini ke configurable,

05:12.110 --> 05:14.962
true, mengatur enumerable ke false, sehingga ini

05:14.962 --> 05:17.130
tidak muncul dalam loop asing, dan sekarang

05:17.130 --> 05:20.310
tambahkan getter di sini, dan itu baru.

05:20.310 --> 05:23.400
Saya menambahkan getter di sini, yang merupakan metode, atau

05:23.400 --> 05:26.150
properti yang menampung fungsi, yang sama, sehingga kita

05:27.020 --> 05:29.628
dapat mengeksekusi beberapa logika tambahan ketika

05:29.628 --> 05:32.260
pengguna mencoba mengakses properti ini.

05:32.260 --> 05:35.170
Sehingga kita tidak hanya langsung mengeksekusi nilai properti

05:35.170 --> 05:36.633
ini, jadi fungsinya, tetapi kita

05:36.633 --> 05:38.888
bisa masuk dan melakukan beberapa pekerjaan tambahan

05:38.888 --> 05:40.850
sebelum kita mengeksekusi fungsinya.

05:40.850 --> 05:41.913
Itulah gagasannya di sini.

05:43.230 --> 05:46.290
Jadi saya tidak menambahkan properti nilai ke deskriptor ini di

05:46.290 --> 05:48.660
sini, saya hanya memiliki getter dan sekali lagi,

05:48.660 --> 05:51.540
getter pada dasarnya seperti memiliki properti nilai dengan

05:51.540 --> 05:54.777
logika tambahan yang berjalan sebelum nilai dikembalikan.

05:54.777 --> 05:59.777
Sekarang, di sini saya ingin memiliki fungsi terikat saya di mana saya

05:59.900 --> 06:03.450
dapat menggunakan metode asli yang kami ekstrak di

06:03.450 --> 06:07.100
sini dan kami memanggil bind dan mengikat ini.

06:07.100 --> 06:08.590
Dan sekarang wasiat,

06:08.590 --> 06:11.730
tentu saja, apakah yang dimaksud di sini?

06:11.730 --> 06:13.720
Ingatlah bahwa ini berada di dalam metode

06:13.720 --> 06:17.700
getter ini sehingga ini akan merujuk pada apa pun yang bertanggung jawab untuk

06:17.700 --> 06:19.510
memicu metode getter ini.

06:19.510 --> 06:21.110
Dan itulah triknya sekarang,

06:21.110 --> 06:23.700
metode getter akan dipicu oleh objek

06:23.700 --> 06:27.200
konkret yang menjadi miliknya, jadi bagian dalam

06:27.200 --> 06:29.190
metode getter ini akan selalu

06:29.190 --> 06:32.160
merujuk ke objek tempat kita mendefinisikan

06:32.160 --> 06:33.610
getter.

06:33.610 --> 06:36.800
Ini tidak akan ditimpa oleh addEventListener karena

06:36.800 --> 06:38.965
getter seperti lapisan tambahan antara

06:38.965 --> 06:41.221
fungsi kita yang sedang dieksekusi dan

06:41.221 --> 06:44.976
objek yang menjadi miliknya dan Event Listener.

06:44.976 --> 06:47.683
Jadi, oleh karena itu, ini di sini akan merujuk

06:47.683 --> 06:51.610
ke objek yang pada awalnya kita definisikan metodenya.

06:51.610 --> 06:54.660
Jadi kita dapat dengan aman mengikat ini untuk metode

06:54.660 --> 06:57.495
asli dan memastikan bahwa sekarang ini di dalam

06:57.495 --> 07:01.170
metode asli juga akan merujuk ke objek yang sama persis.

07:01.170 --> 07:04.300
Sekarang saya akan mengembalikan fungsi terikat di sini dan setelah

07:04.300 --> 07:06.760
itu, di luar deskriptor yang disesuaikan ini, kembalikan

07:06.760 --> 07:08.910
deskriptor yang disesuaikan.

07:08.910 --> 07:10.560
Jadi itulah fungsi dekorator kita,

07:10.560 --> 07:12.420
mengembalikan objek deskriptor baru,

07:12.420 --> 07:14.103
dan oleh karena itu objek deskriptor

07:14.103 --> 07:16.960
ini akan menimpa deskriptor lama, itulah yang akan dilakukan

07:16.960 --> 07:18.710
TypeScript dengannya.

07:18.710 --> 07:21.500
TypeScript kemudian akan mengganti methods descriptor

07:21.500 --> 07:23.215
yang lama, sehingga konfigurasi

07:23.215 --> 07:26.390
methods yang lama dengan konfigurasi baru di sini, yang menambahkan

07:26.390 --> 07:28.513
lapisan getter ekstra ini.

07:29.460 --> 07:33.330
Sekarang, saya tidak tertarik dengan target dan nama metode di sini, tentu

07:33.330 --> 07:37.500
saja, jadi untuk menghindari kesalahan, saya akan menamai garis bawah ini dan

07:37.500 --> 07:39.083
garis bawah dua di sini.

07:40.260 --> 07:43.070
Sekali lagi, hanya untuk memberitahu TypeScript bahwa saya tidak tertarik

07:43.070 --> 07:45.480
dengan nilai-nilai ini tetapi saya harus menerimanya.

07:45.480 --> 07:49.800
Dan sekarang mari kita tambahkan autobind ke showMessage di sini.

07:49.800 --> 07:52.203
Jadi di sini, saya akan menambahkan di Autobind,

07:54.050 --> 07:56.490
dan pastikan bahwa Anda menghapus bind di sana

07:56.490 --> 07:59.236
di pendengar acara, dan simpan ini.

07:59.236 --> 08:01.450
Dan sekarang mari kita lihat itu, mari

08:01.450 --> 08:04.730
klik Click Me, dan Anda akan melihat This Works!

08:04.730 --> 08:06.678
Jika saya memuat ulang, ini berfungsi.

08:06.678 --> 08:09.680
Karena ini sekarang terikat dengan benar.

08:09.680 --> 08:12.060
Dan hanya untuk memverifikasi bahwa itu benar-benar

08:12.060 --> 08:13.520
dekorator kita yang membuat perbedaan

08:13.520 --> 08:15.868
di sini, jika saya akan menghapus pengikatan di sini

08:15.868 --> 08:17.850
di getter dan dekorator saya dan saya menyimpannya,

08:17.850 --> 08:20.920
Anda melihat bahwa jika sekarang dimuat ulang dan kita klik Klik saya,

08:20.920 --> 08:23.626
kita melihat tidak terdefinisi lagi.

08:23.626 --> 08:26.320
Jadi ini benar-benar lapisan getter ekstra yang melakukan

08:26.320 --> 08:27.389
pekerjaannya di sini

08:27.389 --> 08:30.430
yang memastikan bahwa ini selalu terikat dengan benar tidak

08:30.430 --> 08:33.260
peduli bagaimana Anda memanggil showMessage.

08:33.260 --> 08:35.380
Jika kita memanggilnya seperti ini secara langsung

08:35.380 --> 08:38.350
pada objek, maka akan bekerja, jika kita memanggilnya di sini seperti

08:38.350 --> 08:40.760
ini dengan event listener, itu juga bekerja.

08:40.760 --> 08:42.260
Jadi Anda lihat ini berfungsi di sini,

08:42.260 --> 08:45.070
yang pada akhirnya berasal dari panggilan showMessage ini dan kemudian

08:45.070 --> 08:48.266
Anda juga melihatnya berfungsi jika saya mengklik tombol.

08:48.266 --> 08:49.918
Jadi ini adalah salah satu contoh yang

08:49.918 --> 08:52.060
rapi tentang bagaimana Anda dapat memanfaatkan

08:52.060 --> 08:55.190
dekorator untuk membangun fungsionalitas yang cukup menakjubkan

08:55.190 --> 08:58.718
dan menghemat kerumitan memanggil bind secara manual di mana-mana.

08:58.718 --> 09:01.883
Alih-alih, Anda hanya mengikatnya seperti ini.
