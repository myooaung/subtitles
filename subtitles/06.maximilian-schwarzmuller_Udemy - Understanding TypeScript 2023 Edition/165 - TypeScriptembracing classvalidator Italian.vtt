WEBVTT

00:02.130 --> 00:03.630
Quindi abbiamo dato un'occhiata

00:03.630 --> 00:06.210
a Lodash, che è un pacchetto JavaScript vanilla in cui abbiamo

00:06.210 --> 00:08.360
bisogno di installare alcune traduzioni.

00:08.360 --> 00:10.310
Abbiamo dato un'occhiata a class-transformer,

00:10.310 --> 00:13.530
che funziona anche in JavaScript vanilla, ma funziona

00:13.530 --> 00:17.328
particolarmente bene anche in TypeScript.

00:17.328 --> 00:20.330
Diamo ora un'occhiata a class-validator.

00:20.330 --> 00:24.540
Questo è un pacchetto che utilizza davvero TypeScript.

00:24.540 --> 00:28.300
Si basa sul concetto di decoratori di TypeScript

00:28.300 --> 00:32.340
e ci offre un modo nuovo di lavorare con essi, o almeno

00:32.340 --> 00:34.330
quasi nuovo.

00:34.330 --> 00:38.230
Se avete seguito il mio modulo sui decoratori in questo corso,

00:38.230 --> 00:41.200
vedrete qualcosa in questa lezione, che abbiamo

00:41.200 --> 00:44.150
costruito per conto nostro.

00:44.150 --> 00:47.100
Ora, però, con questa libreria di terze parti, non dobbiamo

00:47.100 --> 00:49.330
reinventare la ruota da zero, non dobbiamo

00:49.330 --> 00:51.193
costruirla da soli.

00:51.193 --> 00:53.320
E questa libreria, probabilmente, è

00:53.320 --> 00:55.710
anche un po' più elaborata della nostra soluzione

00:55.710 --> 00:57.830
nel modulo del decoratore.

00:57.830 --> 01:00.026
Sto parlando di convalida.

01:00.026 --> 01:02.870
Si tratta di un pacchetto che ci consente di aggiungere

01:02.870 --> 01:06.390
regole di validazione, con l'aiuto di alcuni decoratori, all'interno

01:06.390 --> 01:08.590
di una classe e poi, ogni volta che istanziamo

01:08.590 --> 01:09.920
tale classe, possiamo effettivamente

01:09.920 --> 01:12.610
validarla per le regole che abbiamo impostato con

01:12.610 --> 01:15.610
l'aiuto dei decoratori.

01:15.610 --> 01:18.960
Per iniziare, dobbiamo importare questo pacchetto.

01:18.960 --> 01:23.130
Quindi npm install class-validator --save e

01:23.130 --> 01:26.130
poi possiamo iniziare subito.

01:26.130 --> 01:29.220
Quindi riavvio il server webpack-dev e per usare questo

01:29.220 --> 01:30.600
pacchetto, dobbiamo aggiungere

01:30.600 --> 01:33.580
un paio di decoratori ai modelli, quindi alle classi

01:33.580 --> 01:37.490
in cui vogliamo validare certe proprietà.

01:37.490 --> 01:39.730
Quindi, nel mio caso, nel modello del

01:39.730 --> 01:43.240
prodotto, importerò qualcosa da class-validator.

01:43.240 --> 01:45.110
E ancora, se avete seguito il

01:45.110 --> 01:47.360
modulo sui decoratori in questo corso,

01:47.360 --> 01:49.640
questo è un concetto che ho già costruito

01:49.640 --> 01:52.870
da zero senza questo pacchetto.

01:52.870 --> 01:56.270
Ma naturalmente abbiamo costruito una versione molto ingenua e di

01:56.270 --> 01:57.840
base, mentre con questo pacchetto

01:57.840 --> 02:01.200
non dobbiamo costruirlo da soli ed è anche più elaborato.

02:01.200 --> 02:02.770
Ora da class-validator possiamo

02:02.770 --> 02:04.820
importare alcuni decoratori.

02:04.820 --> 02:05.893
Ad esempio,

02:07.139 --> 02:08.630
IsNotEmpty

02:08.630 --> 02:11.410
o anche IsNumber.

02:11.410 --> 02:13.500
Possiamo anche importare IsPositive.

02:15.940 --> 02:18.940
Ora possiamo aggiungerli alle proprietà che vogliamo validare.

02:18.940 --> 02:20.900
Quindi, ad esempio nel titolo,

02:20.900 --> 02:24.220
possiamo aggiungere IsNotEmpty come decoratore,

02:24.220 --> 02:26.390
e questi sono tutti decoratori di

02:26.390 --> 02:29.610
fabbrica, quindi vanno sempre eseguiti.

02:29.610 --> 02:31.318
E anche qui,

02:31.318 --> 02:37.380
IsNumber e IsPositive.

02:37.380 --> 02:38.763
Eseguiamolo.

02:40.250 --> 02:41.730
Ora, per usare i decoratori qui, si

02:41.730 --> 02:44.730
deve anche andare in tsconfig. js e assicurarsi

02:44.730 --> 02:49.550
di attivare i decoratori sperimentali.

02:49.550 --> 02:51.593
Successivamente, salvate questo, e ora anche

02:52.750 --> 02:55.040
queste aree qui dovrebbero scomparire.

02:55.040 --> 02:57.300
Occorre però anche riavviare il server dev, in

02:57.300 --> 03:00.840
modo che rilevi il nuovo tsconfig. conversione js.

03:00.840 --> 03:02.650
Quindi abbiamo aggiunto queste regole,

03:02.650 --> 03:04.768
queste regole di validazione qui.

03:04.768 --> 03:07.710
In pratica, stiamo dicendo che il titolo non deve

03:07.710 --> 03:11.830
mai essere una stringa vuota e che i numeri devono essere positivi.

03:11.830 --> 03:13.980
Ora possiamo creare un nuovo

03:13.980 --> 03:15.119
prodotto qui, diciamo

03:15.119 --> 03:16.870
lì, newProd, dove chiamiamo

03:16.870 --> 03:19.078
nuovo prodotto e passiamo una

03:19.078 --> 03:21.720
stringa vuota per il titolo, e poi meno

03:21.720 --> 03:25.210
5. 99 per il numero.

03:25.210 --> 03:26.700
Se poi mi consolo. registriamo

03:27.576 --> 03:29.920
newProd, getInformation

03:29.920 --> 03:31.730
ed eseguiamo questo,

03:31.730 --> 03:33.120
per vedere come

03:33.120 --> 03:34.830
funziona.

03:34.830 --> 03:35.683
Va bene, risparmiatevelo.

03:37.840 --> 03:40.040
Funziona.

03:40.040 --> 03:42.330
Beh, non ci siamo ancora arrivati del tutto.

03:42.330 --> 03:46.470
Con i nostri decoratori stabiliamo le regole.

03:46.470 --> 03:49.560
Ma questi decoratori da soli non fanno molto.

03:49.560 --> 03:52.880
Invece ora dobbiamo importare anche il metodo

03:52.880 --> 03:56.190
validatore da class-validator.

03:56.190 --> 03:57.300
Quindi, da questo pacchetto,

03:57.300 --> 03:59.840
importiamo validate e dobbiamo eseguirlo

03:59.840 --> 04:02.260
su un'istanza concreta, dalla classe a

04:02.260 --> 04:05.750
cui abbiamo aggiunto i nostri decoratori.

04:05.750 --> 04:07.300
Quindi, in questo caso,

04:07.300 --> 04:12.020
possiamo eseguire validate e passargli il newProd.

04:12.020 --> 04:14.670
E validate restituirà una promessa

04:14.670 --> 04:19.150
che in realtà potrebbe dare errori di validazione.

04:19.150 --> 04:21.440
Quindi possiamo aggiungere qui, se

04:21.440 --> 04:23.080
si tratta di una funzione di

04:23.080 --> 04:25.680
attenuazione, anche un peso singolo.

04:25.680 --> 04:27.920
E qui otteniamo gli errori che la funzione

04:27.920 --> 04:30.093
di validazione trova.

04:30.980 --> 04:31.813
È importante che

04:31.813 --> 04:34.950
si finisca sempre in then anche se ci sono errori, quindi

04:34.950 --> 04:36.560
se ci sono errori di validazione,

04:36.560 --> 04:38.420
non si entra in un blocco catch,

04:38.420 --> 04:41.120
ma sempre nel blocco then.

04:41.120 --> 04:44.360
Ora possiamo verificare se gli errori, che sono

04:44.360 --> 04:45.980
una matrice, la lunghezza

04:45.980 --> 04:48.400
del punto è maggiore di zero.

04:48.400 --> 04:51.300
Ciò significa che ci sono errori di convalida.

04:51.300 --> 04:52.910
In questo caso, possiamo

04:53.750 --> 04:56.700
registrare gli errori di convalida e forse anche

04:56.700 --> 04:59.200
produrre gli errori riscontrati.

04:59.200 --> 05:01.820
Quindi console. registrare gli errori

05:01.820 --> 05:03.700
e altrimenti, nel mio caso, registrerò

05:03.700 --> 05:05.290
le informazioni.

05:05.290 --> 05:06.580
Ovviamente dipende dall'applicazione

05:06.580 --> 05:09.100
che si sta costruendo, cosa si vuole fare qui.

05:09.100 --> 05:10.860
In questo caso, si potrebbe mostrare

05:10.860 --> 05:13.790
un avviso all'utente in caso di errori.

05:13.790 --> 05:15.360
Si consiglia di reimpostare l'ingresso, qualunque

05:15.360 --> 05:16.520
cosa si voglia fare.

05:16.520 --> 05:19.690
Qui, registrerò qualcosa nella console.

05:19.690 --> 05:22.080
Se ora lo salviamo, vedremo gli

05:22.080 --> 05:24.870
errori di validazione e poi un array

05:24.870 --> 05:27.830
degli errori riscontrati.

05:27.830 --> 05:31.890
Ad esempio, il primo errore riguarda la proprietà

05:31.890 --> 05:34.770
title, che non deve essere vuota.

05:34.770 --> 05:38.290
Il secondo errore riguarda la proprietà del prezzo,

05:38.290 --> 05:41.150
che deve essere un numero positivo.

05:41.150 --> 05:44.950
Ecco come è facile aggiungere una validazione piuttosto

05:44.950 --> 05:47.960
potente ai vostri progetti con questo approccio

05:47.960 --> 05:50.170
basato sui decoratori.

05:50.170 --> 05:53.190
È simile a quello che abbiamo fatto in precedenza nel

05:53.190 --> 05:54.530
corso e al modulo dei decoratori,

05:54.530 --> 05:56.062
ma, come ho detto più volte,

05:56.062 --> 06:01.190
è più elaborato con un mucchio di regole incorporate, che si possono imparare nella documentazione

06:01.190 --> 06:03.610
di questo pacchetto, senza reinventare

06:03.610 --> 06:06.350
la ruota.

06:06.350 --> 06:09.300
Quindi il pacchetto class-validator è davvero un pacchetto

06:09.300 --> 06:10.930
potente, che dovreste conoscere

06:10.930 --> 06:14.693
se state costruendo progetti più grandi con TypeScript.
