WEBVTT

00:02.130 --> 00:08.470
-NPM startでサーバーを立ち上げています｡

00:08.470 --> 00:12.320
そして､ TSC-WによるTypeScriptのウォッチプロセス｡ 

00:12.320 --> 00:14.870
そして､ 最初に設定する必要があるのは､

00:14.870 --> 00:18.030
tsconfigファイルで､ ターゲットがes6に設定されていることを確認し､

00:18.030 --> 00:26.720
スクロールダウンしたら､ ここに実験的なデコレータの行を追加することを確認することです｡

00:26.720 --> 00:28.380
そして､ この前にカンマを追加すると､

00:28.380 --> 00:31.700
AutoFormatでこのすべてが正しくフォーマットされます｡

00:31.700 --> 00:36.000
これは重要なことで､ そうしないと､ プロジェクトでデコレータを使用することができません｡

00:36.000 --> 00:40.540
だから､ tsconfigをいじるようにしてください｡

00:40.540 --> 00:40.540
json ファイルを適切に設定します｡ 

00:40.540 --> 00:46.980
これで､ このアプリで最初のデコレータを作成することができます｡

00:46.980 --> 00:46.980
tsファイルです｡ 

00:46.980 --> 00:50.950
そして､ クラスに追加できるデコレーターから始めたいと思います｡ 

00:50.950 --> 00:54.530
さて､ 一般的なデコレーターはクラスに関するものばかりですが､

00:54.530 --> 00:58.220
これはクラス全体に追加するデコレーターです｡

00:58.220 --> 01:00.730
そのために､ Personという非常につまらないクラスがあり､

01:00.730 --> 01:04.360
そこに名前があるとします｡

01:04.360 --> 01:07.530
多分､ Maxの値で､ ここで予め初期化されている｡ 

01:07.530 --> 01:10.520
コンストラクタ関数で､ Creating personオブジェクトを記録し､

01:10.520 --> 01:14.763
これが実行されたことを確認します｡

01:15.880 --> 01:19.363
そしてもちろん､ ここで新しいキーワードで新しい人を作ることもできます､

01:20.760 --> 01:22.910
こんな風に｡

01:22.910 --> 01:26.490
そして､ 必要であれば､ この作成された人物を記録することももちろん可能です｡

01:26.490 --> 01:28.330
そして､ これをすべて保存すると､

01:28.330 --> 01:32.090
エラーなくコンパイルされるのです｡

01:32.090 --> 01:33.700
そして､ Localhost: 3000のページにアクセスすると､

01:33.700 --> 01:41.140
JavaScriptコンソールに､ コンストラクタから来るCreating personオブジェクトが表示されます｡

01:41.140 --> 01:44.603
そして､ 私たちはもちろん､ ここで「人」そのものを見ることができるのです｡ 

01:45.810 --> 01:49.550
さて､ この例ではデコレータを使用していません｡ 

01:49.550 --> 01:51.000
これを変えよう｡ 

01:51.000 --> 01:53.370
ファイルの先頭でデコレーターを追加してみましょう｡ 

01:53.370 --> 01:56.060
そしてデコレーターは､ これは本当に重要なことなのですが､

01:56.060 --> 01:58.080
結局はただの関数なんです｡

01:58.080 --> 02:03.530
何かに適用する関数で､ 例えばクラスに対してある方法で適用する｡

02:03.530 --> 02:04.750
では､ ここでファンクション・キーワードを使って関数を作り､

02:04.750 --> 02:09.523
Loggerと名付けましょう｡

02:10.390 --> 02:13.290
さて､ これは関数ですが､ ここで唯一特別なことは､

02:13.290 --> 02:15.570
大文字で始めていることです｡

02:15.570 --> 02:20.200
大文字の開始文字を使用する必要があるわけではありません｡

02:20.200 --> 02:22.470
小文字でも構いませんが､

02:22.470 --> 02:32.200
ライブラリにある多くのデコレータでは大文字の開始文字を使用しています｡

02:32.200 --> 02:39.330
つまり､ ここのLogger関数は関数であり､ これをデコレータとして適用することが判明しているわけです｡

02:39.330 --> 02:42.730
では､ この関数がいつ実行されたかを見るために､ ここにコンソールログを追加してみましょう､

02:42.730 --> 02:44.730
Logging｡

02:44.730 --> 02:47.300
直接かけないからです｡ 

02:47.300 --> 02:50.330
その代わりに､ このクラスにデコレーターとして追加したいのです｡ 

02:50.330 --> 02:53.710
そのためには､ クラスの前に@の記号を付け､

02:53.710 --> 02:57.370
さらにここに関数を追加します｡

02:57.370 --> 02:58.440
ただ､ このように｡ 

02:58.440 --> 03:00.320
さて､ ここで特別なことを2つほど｡ 

03:00.320 --> 03:06.170
ここでの@記号は､ TypeScriptが見たり認識したりする特別な識別子です｡

03:06.170 --> 03:11.010
そして､ @記号の直後は関数を指しているはずです｡

03:11.010 --> 03:15.800
実行するのではなく､ 指し示す､ それがあなたの装飾品であるべきです｡

03:15.800 --> 03:20.650
ここで､ Loggerはデコレータとして使用するには引数が少なすぎることがわかります｡

03:20.650 --> 03:24.930
そこで良いことに､ TypeScriptは､ 私がここでデコレーターとして使いたいことを理解してくれています｡

03:24.930 --> 03:27.980
悪いのは､ 十分な引数を通さないことです｡ 

03:27.980 --> 03:31.000
そして実際に､ デコレーターは引数を受け取ります｡ 

03:31.000 --> 03:34.870
引数の数は､ デコレータを使用する場所に依存します｡ 

03:34.870 --> 03:39.710
ここで､ クラスに追加するデコレータには､ 1つの引数が与えられます｡ 

03:39.710 --> 03:42.910
これがこのデコレーターのターゲットで､

03:42.910 --> 03:46.160
いわばコンストラクター関数です｡

03:46.160 --> 03:51.240
つまり､ 最終的にはここに引数として関数を得るということができる｡

03:51.240 --> 03:54.110
コンストラクタと命名することもできます｡ なぜなら､

03:54.110 --> 04:01.470
最終的にはこのクラス､ あるいはこのデコレータを追加したクラスのコンストラクタ関数を引数として取得できるからです｡

04:01.470 --> 04:09.650
コンソールもしよう｡  を記録して､ このコンストラクタの引数について何らかの洞察を得られるようにします｡

04:09.650 --> 04:10.550
そして､ これを保存しよう｡ 

04:10.550 --> 04:12.750
そして､ ご覧のようにエラーなくコンパイルされます｡ 

04:12.750 --> 04:14.750
出力を見てみると､ 以前の古いコードが表示されていますが､

04:14.750 --> 04:20.810
ログ出力も表示されており､ このコンストラクタ関数がログに記録されていることがわかります｡

04:20.810 --> 04:27.670
しかし､ 結局のところ､ クラスというのはコンストラクタ関数の上にあぐらをかいているに過ぎないのです｡

04:27.670 --> 04:31.450
また､ デコレータの出力であるLoggingと､ このクラスやこのコンストラクタ関数のログは､

04:31.450 --> 04:35.030
Creating personオブジェクトやPersonオブジェクトを見る前に､

04:35.030 --> 04:41.540
最初に出力されることに注意してください｡

04:41.540 --> 04:48.430
なぜなら､ デコレータは､ クラスが定義されたときに実行されるからです｡

04:48.430 --> 04:50.530
インスタンス化された時点ではありません｡ 

04:50.530 --> 04:53.020
クラスをインスタンス化する必要は全くありません｡ 

04:53.020 --> 04:55.760
クラスをインスタンス化するためのコードを削除しても､

04:55.760 --> 04:58.780
デコレータの出力は得られます｡

04:58.780 --> 05:02.210
つまり､ JavaScriptがクラス定義やコンストラクタ関数の定義を見つけると､

05:02.210 --> 05:05.660
デコレータが実行されるわけです｡

05:05.660 --> 05:10.070
そのコンストラクタ関数を使ってオブジェクトをインスタンス化する場合は別です｡

05:10.070 --> 05:13.280
それは､ 本当に大切なことです｡ 

05:13.280 --> 05:15.170
というわけで､ これが最初のデコレーターです｡ 

05:15.170 --> 05:19.063
しかし､ デコレータを作る方法はこれだけではありません｡
