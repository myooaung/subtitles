WEBVTT

00:02.310 --> 00:03.143
教师：为此,

00:03.143 --> 00:05.860
我回到了我们以前工作过的一般项目设置｡

00:05.860 --> 00:10.940
你可以在索引里找到它｡  html文件和应用程序｡

00:10.940 --> 00:10.940
ts文件中｡ 

00:10.940 --> 00:15.410
在这里, 我想深入了解交叉点类型｡ 

00:15.410 --> 00:19.570
相交类型允许我们组合其他类型｡ 

00:19.570 --> 00:23.280
假设我们有一个admin类型, 它是一个对象类型,

00:23.280 --> 00:25.430
因此, 这里不是创建对象,

00:25.430 --> 00:30.340
而是定义一个类型, 因此, 我只是在这里定义一个类型定义,

00:31.200 --> 00:35.560
admin应该有一个名称, 比如说, 是一个字符串,

00:35.560 --> 00:38.230
并且admin还应该有权限,

00:39.910 --> 00:44.370
例如, 应该是一个字符串数组｡

00:44.370 --> 00:47.010
我们本来可以用一个接口来创建它,

00:47.010 --> 00:48.950
但这里我用了一个类型,

00:49.810 --> 00:54.470
现在我有了另一个类型, 比如说, 普通雇员类型,

00:54.470 --> 00:59.130
还有一个名称, 字符串.

00:59.130 --> 01:02.890
我没有特权, 但我有一个开始日期｡ 

01:02.890 --> 01:04.380
可以是日期类型｡ 

01:04.380 --> 01:07.350
我们以前没有见过这种情况, 但是date是一种脚本支持的类型,

01:07.350 --> 01:12.163
它基于JavaScript中构建的数据对象｡

01:13.730 --> 01:17.580
现在我们要在这里创建一个新的类型,

01:17.580 --> 01:23.900
比如说, 一个提升的雇员, 它应该是这两种类型的组合｡

01:23.900 --> 01:26.470
当然, 我们可以通过简单地定义一个对象类型来手动创建它,

01:26.470 --> 01:28.770
该对象类型具有名称､ 开始日期和权限,

01:28.770 --> 01:42.000
但是如果我们已经有了这两种类型, 那么我们也可以通过使用admin和employee（此处使用“&amp;”符号）来将这两种类型结合起来｡

01:42.000 --> 01:46.390
现在, 结果是一个新的对象类型, 它必须同时具有这两个属性｡

01:46.390 --> 01:50.470
因此, 如果我有一个雇员E one, 它的类型应该是elevated

01:50.470 --> 02:00.113
employee, 那么我可以在其中存储一个对象, 它必须有一个name属性, 一个privilege属性, 一个create

02:02.510 --> 02:08.800
server, 并且它还必须有一个包含新数据的开始日期｡

02:08.800 --> 02:10.070
创建一个新的数据对象,

02:10.070 --> 02:12.700
它就是当前时间戳｡

02:12.700 --> 02:15.610
这是一种简单的方法来结合两种类型｡ 

02:15.610 --> 02:17.740
现在, 我要说的是,

02:17.740 --> 02:28.590
交集类型与接口继承密切相关, 因为我们当然可以通过使用接口admin和接口employee来实现相同的功能,

02:29.620 --> 02:34.700
然后我们还可以在这些接口上使用交集类型,

02:34.700 --> 02:38.853
或者创建第三个接口, 即elevated

02:40.100 --> 02:50.653
employee, 它扩展employee和admin｡

02:52.700 --> 02:54.520
因此, 如果我现在将其注释掉,

02:54.520 --> 02:56.830
我们将得到完全相同的效果｡

02:56.830 --> 02:58.550
现在, 可以说, 这需要更多的代码｡ 

02:58.550 --> 03:01.750
我们可能更喜欢在这里使用类型而不是接口的一个原因,

03:01.750 --> 03:09.770
但是关系肯定是非常密切的, 你绝对可以在这个例子中使用接口｡

03:09.770 --> 03:13.040
然而, 值得注意的是, 尽管交集类型在与对象类型结合使用时特别有用,

03:13.040 --> 03:20.910
正如我们在这里所做的那样, 但您可以将它们与任何类型一起使用｡

03:20.910 --> 03:22.683
所以如果你有其他类型,

03:23.655 --> 03:29.940
比如说, combinable, 是一个字符串或者数字, 所以这里有一个union类型,

03:29.940 --> 03:32.380
它是字符串或者数字的基本类型,

03:32.380 --> 03:34.770
然后这里有一个numeric类型,

03:34.770 --> 03:38.660
它是一个数字或者布尔值, 那么, 我们可以有一个, 比如说,

03:38.660 --> 03:43.660
universal类型, 通过combinable和numeric的交集,

03:43.730 --> 03:51.950
最后, 然后类型就可以看到universal, 当然是number类型因为这是我们这里唯一的交集, 但是如果有更多交集,

03:51.950 --> 04:04.940
那么这个类型就被赋予了universal, 所以它也可以是一个union类型, 也就是这两个union类型的交集.

04:04.940 --> 04:07.800
因此交集运算符可以用于任何类型,

04:07.800 --> 04:12.980
然后它简单地构建这些类型的交集｡

04:12.980 --> 04:14.330
在联合类型的情况下,

04:14.330 --> 04:17.300
这基本上是它们共有的类型｡

04:17.300 --> 04:18.890
在对象类型的情况下,

04:18.890 --> 04:23.510
可以说它只是这些对象属性的组合｡

04:23.510 --> 04:25.960
这些是交集类型｡ 

04:25.960 --> 04:27.360
有时候会有用｡ 

04:27.360 --> 04:29.050
您不会一直使用交集类型,

04:29.050 --> 04:31.570
但您肯定会遇到这样的情况：通过使用交集类型,

04:31.570 --> 04:37.230
您可以以更简单或更短的方式表达某些内容｡

04:37.230 --> 04:39.520
现在, 为了证明这一切都是可行的,

04:39.520 --> 04:42.050
让我在我的终端中打开一个新的选项卡,

04:42.050 --> 04:45.390
并运行TSC dash W来启动监视模式, 这样我就不必只进入实时服务器,

04:45.390 --> 04:49.850
而是实际上还构建了我的代码｡

04:49.850 --> 04:51.210
现在如果我在这里重新加载一次,

04:51.210 --> 04:53.200
我们会看到它运行时没有错误,

04:53.200 --> 04:55.443
编译时也没有错误｡
