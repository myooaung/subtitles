WEBVTT

00:02.260 --> 00:04.220
Bây giờ chúng ta đã hiểu rõ về

00:04.220 --> 00:08.410
các tính năng cơ bản của bản ghi và những gì bản ghi bổ sung.

00:08.410 --> 00:10.070
Và chúng tôi cũng hiểu cách thức

00:10.070 --> 00:12.320
hoạt động của trình biên dịch TypeScript.

00:12.320 --> 00:13.760
Chúng ta hãy xem những gì

00:13.760 --> 00:15.020
khác mà TypeScript cung

00:15.020 --> 00:18.700
cấp, cụ thể là khi nói đến cú pháp Javascript hiện đại.

00:18.700 --> 00:22.130
Bây giờ, đây là một thuật ngữ khó, khá mơ hồ, nhưng cuối cùng

00:22.130 --> 00:23.360
ý tôi muốn nói là các tính

00:23.360 --> 00:26.380
năng Javascript đã xuất hiện được vài năm và được

00:26.380 --> 00:28.410
hỗ trợ tốt trong các trình duyệt hiện

00:28.410 --> 00:30.790
đại, nhưng không nhất thiết phải chạy nói

00:30.790 --> 00:33.290
chung, đặc biệt là trong các trình duyệt

00:33.290 --> 00:34.970
cũ hơn và ở đó, đặc biệt là trong

00:34.970 --> 00:37.570
Internet Explorer.

00:37.570 --> 00:40.210
Tôi đang nói về những thứ như Let,

00:40.210 --> 00:43.240
Cons, hàm mũi tên, cú pháp giải cấu trúc,

00:43.240 --> 00:45.350
toán tử trải rộng, v.v.

00:45.350 --> 00:48.220
Vì vậy, nếu đó là điều bạn hoàn toàn biết, bạn

00:48.220 --> 00:51.950
có thể bỏ qua mô-đun này vì nó cũng sẽ làm mới kiến thức

00:51.950 --> 00:54.230
về những chủ đề này, nhưng nó cũng

00:54.230 --> 00:56.240
sẽ giải thích bản thảo làm gì với

00:56.240 --> 00:59.000
những thứ này, với cú pháp này.

00:59.000 --> 01:01.450
Mặc dù, câu chuyện ngắn là, Typescript biên dịch

01:01.450 --> 01:02.980
nó sao cho nó hoạt động.

01:02.980 --> 01:04.510
Tuy nhiên, chúng ta sẽ xem xét điều

01:04.510 --> 01:05.940
đó, nhưng bạn có thể bỏ qua mô-đun

01:05.940 --> 01:08.290
này nếu đó là tất cả những điều bạn đã biết.

01:08.290 --> 01:10.130
Bạn có thể xem qua chương trình giảng

01:10.130 --> 01:12.400
dạy và xem liệu có bài giảng nào trong mô-đun

01:12.400 --> 01:14.260
này mà bạn vẫn quan tâm hay không, nếu

01:14.260 --> 01:16.450
không, tôi sẽ gặp bạn sau mô-đun này.

01:16.450 --> 01:18.140
Nếu bạn không chắc về những tính

01:18.140 --> 01:20.500
năng này, nếu bạn biết Javascript, về Var

01:20.500 --> 01:22.610
và Zon, nhưng bạn không biết từ khóa

01:22.610 --> 01:24.810
Let hoặc Cons thực sự có nghĩa là gì, thì

01:24.810 --> 01:27.820
bạn nên theo tôi và đi sâu vào mô-đun này.

01:27.820 --> 01:29.860
Vì vậy, tôi có một thiết lập dự án hoàn toàn mới,

01:29.860 --> 01:31.450
bạn sẽ thấy nó được đính kèm.

01:31.450 --> 01:34.780
Và bạn luôn cần chạy cài đặt NPM trước trong các

01:34.780 --> 01:35.613
dự án này.

01:35.613 --> 01:37.610
Đừng quên điều này để cài đặt tất cả các

01:37.610 --> 01:39.530
phụ thuộc và sau đó NPM luôn bắt đầu khởi

01:39.530 --> 01:41.390
động máy chủ phát triển đó.

01:41.390 --> 01:44.480
Bây giờ, về cơ bản, đây là một dự án giống như chúng ta đã làm trước

01:44.480 --> 01:46.280
đó ở phần cuối của mô-đun trước.

01:46.280 --> 01:49.550
tsconfig với cấu hình khá nghiêm ngặt

01:50.470 --> 01:53.210
Một ứng dụng. ts tại đây và thư mục này

01:53.210 --> 01:54.740
sẽ được tạo tự động.

01:54.740 --> 01:57.100
Nhân tiện, hãy giữ cho máy chủ phát triển này

01:57.100 --> 01:58.360
chạy tất nhiên như bạn đã

01:58.360 --> 02:00.610
làm trước đây và bây giờ chúng ta luôn có thể

02:00.610 --> 02:03.300
biên dịch mã của mình bằng lệnh TSC tại đây.

02:03.300 --> 02:06.670
Hoặc, và đó là những gì tôi sẽ làm ở đây, TSC gạch ngang W để vào chế độ

02:06.670 --> 02:09.160
xem và đảm bảo chúng tôi biên dịch lại bất cứ khi nào

02:09.160 --> 02:10.980
chúng tôi thay đổi điều gì đó.

02:10.980 --> 02:12.900
Vì vậy, bây giờ đó là phần thiết lập dự án của

02:12.900 --> 02:15.030
chúng ta và bây giờ chúng ta sẽ đi sâu vào một số

02:15.030 --> 02:17.790
tính năng Javascript thế hệ tiếp theo, nó hỗ trợ bản đánh máy

02:17.790 --> 02:19.390
nào và những gì bạn nên biết.
