WEBVTT

00:02.240 --> 00:04.220
講師：SourceMapは､

00:04.220 --> 00:06.560
デバッグや開発に役立っています｡

00:06.560 --> 00:12.000
では､ その効果を示すために､ sourceMapの設定なしですべてをコンパイルしてみましょう｡

00:12.000 --> 00:14.530
ブラウザでコードが何を行っているかを理解するために､

00:14.530 --> 00:21.620
デベロッパーツールのソースタブを開き､ そこでJavaScriptファイルを見つけます｡

00:21.620 --> 00:25.090
これらのファイルは､ 最終的にJavaScriptのコードを含んでいるので､

00:25.090 --> 00:30.940
私たち人間にとってかなり読みやすいものであることは言うまでもありません｡

00:30.940 --> 00:35.200
それはいいのですが､ もっと複雑なTypeScriptのコードがあって､ コンパイルされたJavaScriptのコードではなく､

00:35.200 --> 00:41.640
TypeScriptのコードをデバッグしたいとしたらどうでしょう｡

00:41.640 --> 00:43.060
つまり､ JavaScriptのファイルではなく､

00:43.060 --> 00:47.180
TypeScriptのファイルがここに表示されればいいのです｡

00:47.180 --> 00:50.000
sourceMapオプションを使えば､ そこに到達することができます｡ 

00:50.000 --> 00:56.950
これをtrueにして､ もう一度tscコマンドを実行すると､ 次のようになります｡

00:56.950 --> 00:56.950
js､ . マップファイルも生成される

00:58.810 --> 01:01.540
このファイルを見てみると､ かなり奇妙なファイルですが､

01:01.540 --> 01:13.410
基本的にはブリッジとして機能し､ 最近のブラウザや開発ツールでは､ JavaScriptファイルと入力ファイルを接続するために理解できるようになっています｡

01:13.410 --> 01:17.440
生成されたファイルをリロードすると､ sources タブに

01:17.440 --> 01:20.320
JavaScript ファイルだけでなく､

01:20.320 --> 01:23.497
TypeScript ファイルも表示されます｡

01:23.497 --> 01:27.230
さらに､ TypeScriptファイルにブレークポイントを設定することも可能で､

01:27.230 --> 01:31.650
例えば今ボタンをクリックすると､ TypeScriptファイル内で一時停止するようになります｡

01:31.650 --> 01:34.720
もちろん､ 超超便利です｡ 

01:34.720 --> 01:37.670
なぜなら､ JavaScriptファイルではなく､ 入力ファイル､

01:37.670 --> 01:40.260
つまりTypeScriptファイルで直接作業することができるので､

01:40.260 --> 01:45.670
デバッグ作業を次のレベルに進めることができるからです｡

01:45.670 --> 01:48.010
というのも､ このプロジェクトは非常にシンプルなので､

01:48.010 --> 01:53.580
余計な.NET Frameworkを持ちたくないのです｡

01:53.580 --> 01:53.580
地図ファイルはこの辺に転がっています｡ 

01:53.580 --> 01:55.950
しかし､ これはデバッグを簡略化するため､

01:55.950 --> 01:57.803
プロジェクトでは超便利です｡
