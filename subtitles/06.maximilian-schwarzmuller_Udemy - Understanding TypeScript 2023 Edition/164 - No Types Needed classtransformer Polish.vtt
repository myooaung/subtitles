WEBVTT

00:02.270 --> 00:04.040
Instruktor: Więc mieliśmy spojrzenie

00:04.040 --> 00:05.900
na Lodash, bibliotekę trzeciej strony, która

00:05.900 --> 00:08.270
jest zbudowana z JavaScript dla JavaScript.

00:08.270 --> 00:11.730
Znajdziesz również pewne biblioteki stron trzecich, które

00:11.730 --> 00:13.287
naprawdę obejmują skrypt

00:13.287 --> 00:16.480
typu i funkcje skryptu typu i dają ci zupełnie nowy sposób

00:16.480 --> 00:18.360
pisania kodu, który działa, ponieważ

00:18.360 --> 00:21.230
pracujesz ze skryptem typu.

00:21.230 --> 00:24.950
Jednym z przykładów jest transformator klas, jeszcze lepszym przykładem

00:24.950 --> 00:28.067
jest walidator klas; przyjrzymy się tutaj obu.

00:28.067 --> 00:31.360
Zacznijmy jednak od klasy transformator.

00:31.360 --> 00:35.870
Powiedzmy w naszym projekcie tutaj, faktycznie mam model, model

00:35.870 --> 00:38.150
danych, nazwijmy go "produkt".

00:38.150 --> 00:41.170
Teraz nazwę go produktem. model. ts, ale możesz

00:41.170 --> 00:43.820
nazwać ten plik jakkolwiek chcesz.

00:43.820 --> 00:48.820
Mój pomysł polega na tym, że w tym pliku definiuję klasę dla produktu.

00:49.420 --> 00:52.180
Opisuję więc, jak powinien wyglądać produkt.

00:52.180 --> 00:55.550
Na przykład, że ma tytuł, który jest ciągiem i cenę, która

00:55.550 --> 00:59.070
jest liczbą, a następnie dodaję funkcję konstruktora,

00:59.070 --> 01:02.120
w której oba mogą być zainicjalizowane.

01:02.120 --> 01:07.120
Więc ciąg, dodaj cenę, a następnie powiedziałem, że ten tytuł równa się

01:07.210 --> 01:09.360
't' i ta cena równa się 'p'.

01:09.360 --> 01:10.810
I oczywiście mogliśmy użyć

01:10.810 --> 01:12.980
skróconej inicjalizacji, gdzie używamy

01:12.980 --> 01:14.423
tylko konstruktora.

01:16.150 --> 01:20.400
Następnie powiedzmy, że zawsze mamy metodę, uzyskać

01:20.400 --> 01:25.400
informacje, gdzie zwracam tablicę powiedzmy, gdzie pierwszy

01:25.950 --> 01:30.850
element jest tytuł i drugi element faktycznie jest ciąg,

01:30.850 --> 01:35.770
gdzie mam znak dolara, a następnie wstrzyknięty do tego ciągu,

01:35.770 --> 01:37.833
to cena.

01:39.030 --> 01:43.030
Tak więc bardzo prosty model tutaj, bardzo prosta klasa.

01:43.030 --> 01:45.940
I teraz możemy oczywiście użyć tej klasy, jeśli

01:45.940 --> 01:49.590
chcemy, w aplikacji. ts więc tam pozbędę się Lodash i zamiast

01:49.590 --> 01:54.590
tego zaimportuję produkt z . /produkt. Model Teraz musisz się upewnić,

01:56.200 --> 01:58.920
że w modelu produktu faktycznie eksportujesz

01:58.920 --> 02:01.010
tę klasę, w przeciwnym razie nie możesz

02:01.010 --> 02:03.860
jej zaimportować, a tutaj musimy wyeksportować

02:03.860 --> 02:05.800
produkt w ten sposób, ponieważ

02:05.800 --> 02:07.890
używam nazwanego eksportu, dodając

02:07.890 --> 02:11.950
słowo kluczowe export tuż przed klasą.

02:11.950 --> 02:16.497
Więc teraz tutaj oczywiście możemy stworzyć nowy produkt,

02:18.150 --> 02:23.150
książkę, która kosztuje 12. 99 i dalej I console log p1 get information

02:24.080 --> 02:28.190
i faktycznie powinniśmy logować tę tablicę.

02:28.190 --> 02:31.390
Więc jeśli teraz uruchomimy npm start tutaj, nasz web

02:31.390 --> 02:34.250
pack dev uruchomi się i powinniśmy zobaczyć tę

02:34.250 --> 02:37.340
ładną tablicę z informacjami o tej książce.

02:37.340 --> 02:39.463
Więc jeśli przeładuję tutaj, oto jest.

02:40.630 --> 02:43.170
Teraz to nie jest zbyt wymyślne oczywiście,

02:43.170 --> 02:44.930
że działa, ale to nic nowego.

02:44.930 --> 02:47.270
Częstym scenariuszem w większych

02:47.270 --> 02:49.610
aplikacjach jest pobieranie danych,

02:49.610 --> 02:52.150
powiedzmy z serwera, pobieranie

02:52.150 --> 02:54.490
danych z serwera back-end i serwer

02:54.490 --> 02:58.370
zwraca dane json, które przekazujesz, a które mogą

02:58.370 --> 03:01.560
być listą produktów.

03:01.560 --> 03:05.520
Więc tutaj możemy mieć produkty, które otrzymujemy z serwera, gdzie

03:05.520 --> 03:10.520
następnie mamy tytuł, dywan i cenę, 29. 99 i mamy wtedy również

03:13.047 --> 03:18.047
tą książkę, więc tytuł, książka i tam

03:18.120 --> 03:22.830
cena 10. 99, powiedzmy.

03:22.830 --> 03:25.310
Jest to więc bardzo prosta tablica danych,

03:25.310 --> 03:27.730
które następnie pobieramy z backendu.

03:27.730 --> 03:30.590
Teraz są to oczywiście obiekty JavaScript, ale

03:30.590 --> 03:33.730
nie są to instancje naszego modelu produktu.

03:33.730 --> 03:37.220
I to jest typowy scenariusz, w którym otrzymujesz dane jako json

03:37.220 --> 03:40.990
to nie ma dołączonych danych jak do której funkcji konstruktora jesteś

03:40.990 --> 03:42.850
fronted coded należy.

03:42.850 --> 03:46.770
Twój serwer wie o tym i json również jest formatem, który po

03:46.770 --> 03:51.230
prostu przekazuje podstawowe dane, nie masz bogatych meta danych

03:51.230 --> 03:53.540
do ciebie obiekty dołączone tam.

03:53.540 --> 03:56.300
A przynajmniej musiałbyś to zrobić ręcznie.

03:56.300 --> 04:00.120
Tak więc, innymi słowy, produkty, które tu otrzymujemy, to

04:00.120 --> 04:03.310
obiekty, które nie mają metody get information.

04:03.310 --> 04:08.230
Teraz tradycyjnie, gdybyś teraz chciał przekonwertować to na instancje

04:08.230 --> 04:12.680
swojego modelu, musiałbyś to zrobić ręcznie.

04:12.680 --> 04:17.680
Możesz mieć swoje załadowane produkty, które następnie, powiedzmy, używa

04:19.260 --> 04:22.770
produktów, wywołuje metodę map i na każdym produkcie

04:22.770 --> 04:25.680
w tej tablicy następnie zwracamy nowy produkt

04:25.680 --> 04:30.680
dla prod. tytuł i prod. cena i następnie mielibyśmy

04:34.330 --> 04:36.660
tablicę pełną prawdziwych instancji

04:36.660 --> 04:40.230
funkcji konstruktora produktu, a następnie moglibyśmy faktycznie

04:40.230 --> 04:43.163
zapętlić się przez to, załadowane produkty, a następnie

04:44.330 --> 04:51.083
tam na przykład konsola log prod.

04:51.083 --> 04:51.083
uzyskać informacje.

04:52.150 --> 04:56.010
W ten sposób moglibyśmy ręcznie przekształcić tablicę lub również

04:56.010 --> 05:00.070
pojedynczy obiekt no name Vanilla JavaScript w instancję określonej

05:00.070 --> 05:02.880
funkcji konstruktora i stąd otrzymalibyśmy

05:02.880 --> 05:05.000
takie wyjście.

05:05.000 --> 05:07.220
Teraz robienie tego ręcznie jest uciążliwe.

05:07.220 --> 05:09.590
Tu jest masa dodatkowych kroków, to

05:09.590 --> 05:12.710
tylko prosta transformacja oczywiście.

05:12.710 --> 05:16.690
Tu właśnie może nam pomóc pakiet class transformer.

05:16.690 --> 05:19.330
Dzięki temu jest to bardzo, bardzo proste.

05:19.330 --> 05:22.390
Tam też definiujemy klasę w skrypcie typu w naszym

05:22.390 --> 05:25.010
przypadku tutaj, wtedy możemy pobierać

05:25.010 --> 05:29.340
jakieś dane powiedzmy z serwera i wtedy tak naprawdę możemy wywołać

05:29.340 --> 05:32.430
prostą metodę convenience i ona automatycznie

05:32.430 --> 05:36.893
przekonwertuje nasze dane do odpowiednich modeli.

05:38.100 --> 05:40.030
Teraz w tym celu najpierw

05:40.030 --> 05:44.840
uruchommy nmp install class transformer--save, jak to i gdy to

05:45.730 --> 05:47.820
się skończy uruchommy npm install

05:47.820 --> 05:50.350
reflect-metadata--save Pakiet,

05:51.451 --> 05:54.470
ten pakiet w końcu zależy od.

05:54.470 --> 05:57.460
Więc tutaj zaimportujmy to również, a następnie

05:57.460 --> 06:02.460
jak to również instruuje nas tutaj w instrukcjach konfiguracji tutaj, zaimportuj

06:02.890 --> 06:07.680
metadane reflect w swoich plikach wejściowych trasy, w moim przypadku tutaj

06:07.680 --> 06:11.410
w aplikacji. ts Importuję tę bibliotekę strony trzeciej,

06:11.410 --> 06:14.970
którą właśnie zainstalowaliśmy jako zależność naszej biblioteki.

06:14.970 --> 06:17.210
Teraz to faktycznie sformułowane nie js kroki i dlatego

06:17.210 --> 06:18.610
możemy pominąć ten jeden.

06:18.610 --> 06:20.180
W przeglądarce wciąż musimy

06:20.180 --> 06:24.780
zainstalować te same pakiety, a dodanie tego importu tutaj jest w porządku,

06:24.780 --> 06:26.880
ponieważ używamy web pack i dlatego

06:26.880 --> 06:30.090
teraz właściwie możemy iść.

06:30.090 --> 06:35.090
I teraz możemy zaimportować coś z transformatora klasy i wtedy

06:36.290 --> 06:40.210
tym czymś jest metoda 'plain to class'.

06:40.210 --> 06:42.630
Pakiet ten posiada również kilka innych metod.

06:42.630 --> 06:45.200
Możesz dowiedzieć się więcej o nich tutaj w oficjalnych dokumentach.

06:45.200 --> 06:49.060
Ale 'plain to class' jest główną metodą.

06:49.060 --> 06:54.060
Możesz go użyć tutaj, aby ustawić swoje załadowane produkty na przykład.

06:55.150 --> 06:58.230
Zamiast robić to ręcznie tutaj, jak robiliśmy to wcześniej,

06:58.230 --> 07:01.480
możemy ustawić załadowane produkty równe plain to class i teraz

07:01.480 --> 07:03.760
przekazać mu dwa argumenty tutaj.

07:03.760 --> 07:08.070
Pierwszym argumentem jest klasa, na którą chcemy ją przekonwertować.

07:08.070 --> 07:10.190
W moim przypadku tutaj - produkt.

07:10.190 --> 07:12.700
I nie instancjonuję go ani nie nazywam,

07:12.700 --> 07:15.560
po prostu wskazuję na tę klasę.

07:15.560 --> 07:19.460
Drugi argument to dane, które chcemy przekształcić.

07:19.460 --> 07:23.520
Więc w moim przypadku tutaj, to są produkty.

07:23.520 --> 07:25.840
A teraz to, co zrobi ten pakiet,

07:25.840 --> 07:28.100
to przejdzie przez tę tablicę i

07:28.100 --> 07:31.034
przekształci każdy zwykły obiekt Vanilla

07:31.034 --> 07:34.090
JavaScript w instancję tej klasy.

07:34.090 --> 07:37.830
Więc jeśli teraz zapiszemy to i uruchomimy npm start ponownie, strona

07:37.830 --> 07:40.330
internetowa uruchamiająca serwer uruchomi się

07:40.330 --> 07:43.270
ponownie i powinna zbudować ten projekt bez błędów.

07:43.270 --> 07:46.540
Jeśli ponownie załaduję stronę, otrzymam to samo wyjście,

07:46.540 --> 07:49.530
co wcześniej, ale oczywiście z mniejszym kodem z naszej

07:49.530 --> 07:51.870
strony, ponieważ używamy tego pakietu.

07:51.870 --> 07:53.403
A niesamowite w tym pakiecie

07:53.403 --> 07:57.070
jest to, że działa tak dobrze tutaj, ponieważ buduje się na

07:57.070 --> 08:01.230
skrypcie typu i wykorzystuje skrypt typu i wykorzystuje fakt, że

08:01.230 --> 08:04.280
mamy tam klasę, na którą możemy wskazać.

08:04.280 --> 08:08.730
Ale, aby również być uczciwym, ten pakiet działa szczególnie dobrze ze skryptem

08:08.730 --> 08:10.900
typu, ale nie używa funkcji specyficznej

08:10.900 --> 08:12.600
dla skryptu typu.

08:12.600 --> 08:16.630
Klasy na przykład istnieją również w Vanilla JavaScript.

08:16.630 --> 08:20.170
Więc chociaż jest to opracowane głównie dla skryptu typu,

08:20.170 --> 08:23.610
w rzeczywistości działa również w Vanilla JavaScript.

08:23.610 --> 08:26.633
Tak jednak nie będzie w przypadku kolejnego pakietu.
