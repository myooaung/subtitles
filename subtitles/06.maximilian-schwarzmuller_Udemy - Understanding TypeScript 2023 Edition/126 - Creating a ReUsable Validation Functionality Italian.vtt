WEBVTT

00:02.160 --> 00:06.060
Istruttore: Allora, cosa potremmo fare con la convalida?

00:06.060 --> 00:10.450
Beh, forse, partiamo dal risultato finale desiderato.

00:10.450 --> 00:14.850
La mia idea è che in seguito avremo una funzione di validazione

00:14.850 --> 00:17.950
che non esiste ancora, ma che avremo in seguito,

00:17.950 --> 00:21.230
a cui passerò il titolo inserito, o in realtà

00:21.230 --> 00:25.360
un oggetto di configurazione, direi, in cui il valore

00:25.360 --> 00:27.900
è il titolo inserito, quindi la cosa

00:27.900 --> 00:30.300
da validare.

00:30.300 --> 00:33.260
Ma dove ho anche proprietà aggiuntive

00:33.260 --> 00:37.350
che indicano alla funzione di validazione come

00:37.350 --> 00:39.130
convalidarla.

00:39.130 --> 00:43.210
Quindi, ad esempio, abbiamo impostato required su

00:43.210 --> 00:47.009
true, minLength su five per imporre cinque caratteri

00:47.009 --> 00:48.360
e così via.

00:48.360 --> 00:50.040
Poi lo facciamo qui per tutti

00:50.040 --> 00:51.540
e tre gli input e validate

00:51.540 --> 00:53.900
è una funzione che restituisce true

00:53.900 --> 00:56.620
se è valida e false se non è valida e alla fine

00:56.620 --> 00:59.580
potremmo avere qualcosa di simile.

00:59.580 --> 01:04.580
Oppure enteredDescription e enteredPeople, più o meno

01:04.790 --> 01:06.790
l'idea è questa.

01:06.790 --> 01:09.210
Naturalmente si tratta solo di un modo per implementarlo,

01:09.210 --> 01:11.703
ma è un modo che mi piace molto.

01:12.600 --> 01:15.320
Per questo, all'inizio del file,

01:15.320 --> 01:19.470
aggiungerò una logica di validazione.

01:19.470 --> 01:22.380
E, ancora una volta, ci sono molti modi per farlo.

01:22.380 --> 01:24.390
Inizierò definendo la

01:24.390 --> 01:27.840
struttura di un oggetto validabile.

01:27.840 --> 01:31.280
Quindi questo oggetto viene passato alla funzione di validazione,

01:31.280 --> 01:33.430
perché ovviamente deve sempre avere

01:33.430 --> 01:37.820
una struttura simile, con un certo numero di proprietà che possono essere

01:37.820 --> 01:40.100
presenti e certi tipi di proprietà, in

01:40.100 --> 01:42.410
modo che la funzione di validazione sappia

01:42.410 --> 01:44.950
effettivamente con cosa sta lavorando e possa

01:44.950 --> 01:47.400
estrarre correttamente le proprietà e così

01:47.400 --> 01:49.870
via.

01:49.870 --> 01:52.850
Inizierò quindi definendo un'interfaccia.

01:52.850 --> 01:55.380
Potremmo anche optare per un tipo personalizzato, a vostra

01:55.380 --> 01:56.550
completa discrezione.

01:56.550 --> 01:58.690
Dal momento che definirò la struttura di un oggetto,

01:58.690 --> 02:02.793
sono sempre un grande sostenitore della definizione di una semplice interfaccia.

02:03.810 --> 02:06.700
Lo chiameremo Validatable,

02:06.700 --> 02:09.940
perché descrive un oggetto validabile

02:09.940 --> 02:13.300
e avrà un valore che dovrebbe essere

02:13.300 --> 02:17.140
una stringa o un numero.

02:17.140 --> 02:18.980
Avrà un oggetto richiesto,

02:18.980 --> 02:21.240
che avrà un valore booleano, quindi

02:21.240 --> 02:22.630
vero o falso.

02:22.630 --> 02:26.470
Supponiamo di supportare la convalida di minLength, che dovrebbe

02:26.470 --> 02:28.212
essere un numero, di maxLength,

02:28.212 --> 02:30.220
che dovrebbe essere un numero, e anche

02:30.220 --> 02:32.510
nel caso in cui si ottenga un numero, un

02:32.510 --> 02:35.240
valore minimo e uno massimo.

02:35.240 --> 02:37.417
La differenza rispetto a minLength e maxLength

02:37.417 --> 02:40.310
è che questo controlla la lunghezza della stringa,

02:40.310 --> 02:42.320
questo il valore del numero se è superiore

02:42.320 --> 02:43.960
a un certo numero o inferiore a

02:43.960 --> 02:46.010
un certo massimo.

02:46.010 --> 02:48.870
Queste sono le proprietà che voglio sostenere.

02:48.870 --> 02:50.470
Ora, a parte il valore, dovrebbero

02:50.470 --> 02:52.140
essere tutti opzionali, cosa

02:52.140 --> 02:54.410
che possiamo imporre aggiungendo un

02:54.410 --> 02:57.650
punto interrogativo dopo i nomi.

02:57.650 --> 03:00.070
A proposito, l'alternativa all'uso del punto interrogativo

03:00.070 --> 03:02.720
è quella di consentire valori non definiti.

03:02.720 --> 03:04.880
Il punto interrogativo fa sostanzialmente lo stesso.

03:04.880 --> 03:09.370
Dice che required è un booleano o non definito.

03:09.370 --> 03:12.610
Ora abbiamo l'interfaccia validabile.

03:12.610 --> 03:13.893
Cosa possiamo fare con questo?

03:14.930 --> 03:17.893
Ora, con l'interfaccia creata, possiamo

03:18.830 --> 03:21.330
creare la funzione di convalida

03:21.330 --> 03:24.220
che sto cercando.

03:24.220 --> 03:27.410
Questo dovrebbe ottenere un oggetto validabile.

03:27.410 --> 03:32.410
Quindi ValidatableInput è di tipo Validatable.

03:32.410 --> 03:33.450
Questa è la mia idea.

03:33.450 --> 03:36.400
Quindi ottiene un oggetto con questa struttura.

03:36.400 --> 03:38.270
E ora possiamo verificare

03:38.270 --> 03:41.670
che tutte queste proprietà esistano e quindi

03:41.670 --> 03:44.810
eseguire la convalida appropriata.

03:44.810 --> 03:46.150
Che cosa facciamo esattamente

03:46.150 --> 03:48.200
nella funzione validate?

03:48.200 --> 03:49.033
Alla fine, voglio

03:49.033 --> 03:50.930
creare una variabile, isValid, che

03:50.930 --> 03:52.330
inizialmente è true.

03:52.330 --> 03:54.030
Quindi l'ipotesi predefinita è che

03:54.030 --> 03:55.510
ciò che otteniamo sia vero.

03:55.510 --> 03:57.430
Ma lo imposteremo su false

03:57.430 --> 04:01.330
non appena almeno uno dei nostri controlli fallirà.

04:01.330 --> 04:03.480
E ora iniziamo con il primo controllo.

04:03.480 --> 04:06.410
Vediamo se il validatableInput qui,

04:06.410 --> 04:08.220
questo argomento che stiamo

04:08.220 --> 04:11.380
ricevendo, ha un prop richiesto?

04:11.380 --> 04:13.260
Se non è indefinito.

04:13.260 --> 04:16.490
Se è impostato, e se quindi è vero, significa

04:16.490 --> 04:18.630
che il valore è richiesto e non

04:18.630 --> 04:20.630
deve essere vuoto.

04:20.630 --> 04:22.080
Ora qui possiamo impostare

04:22.080 --> 04:26.160
isValid uguale a isValid e, per come funziona JavaScript,

04:26.160 --> 04:27.700
questo assicura che

04:27.700 --> 04:30.550
il nuovo valore di isValid sarà falso

04:30.550 --> 04:34.330
se la cosa dopo e è falsa.

04:34.330 --> 04:36.870
Perché se almeno una delle due cose è falsa, il valore

04:36.870 --> 04:38.660
complessivo sarà falso.

04:38.660 --> 04:40.500
Ora isValid inizialmente

04:40.500 --> 04:44.070
è vero, ma se l'elemento dopo l'operatore logico e

04:44.070 --> 04:46.300
è falso, isValid sarà falso.

04:46.300 --> 04:48.700
E alla fine restituirò isValid.

04:48.700 --> 04:50.040
Cosa aggiungere

04:50.040 --> 04:53.550
quindi dopo i due simboli ampersand?

04:53.550 --> 04:58.170
Voglio verificare se validatableInput. se è vuoto.

04:58.170 --> 05:00.530
E per questo, possiamo tagliarlo

05:00.530 --> 05:04.210
e controllare la lunghezza, o no?

05:04.210 --> 05:05.630
Il problema è che non sappiamo

05:05.630 --> 05:07.510
se il valore è una stringa.

05:07.510 --> 05:09.090
È una stringa o un numero.

05:09.090 --> 05:10.910
Quindi non è garantito che sia una

05:10.910 --> 05:12.140
stringa e quindi il metodo

05:12.140 --> 05:14.100
trim non è sempre disponibile.

05:14.100 --> 05:17.570
Ora ci sono vari modi per aggirare questo problema.

05:17.570 --> 05:19.600
Si potrebbe aggiungere una protezione per il tipo,

05:19.600 --> 05:23.390
controllando se typeof validatableInput. è uguale a stringa

05:25.250 --> 05:30.250
ed esegue questo controllo solo se lo è.

05:30.920 --> 05:33.040
Ma in realtà sarebbe un po' ridondante.

05:33.040 --> 05:36.120
Quello che possiamo fare è molto semplice.

05:36.120 --> 05:37.257
Possiamo semplicemente

05:37.257 --> 05:39.140
dire "beh, convertilo in una stringa". Se era un numero, ora è di nuovo una stringa.

05:39.140 --> 05:41.370
Se si trattava di una stringa, non cambiava nulla.

05:41.370 --> 05:44.170
E con ciò, stiamo facendo questo.

05:44.170 --> 05:45.900
Ora devo solo aggiungere il mio controllo

05:45.900 --> 05:47.950
qui per verificare se è zero.

05:47.950 --> 05:50.360
O, per essere precisi, se non è zero.

05:50.360 --> 05:53.463
Quindi, se non è zero, restituisce

05:54.680 --> 05:56.810
true e isValid rimane

05:56.810 --> 05:58.740
true.

05:58.740 --> 06:00.500
Se è zero, quindi se è di lunghezza

06:00.500 --> 06:02.760
zero, se è vuoto, restituirà false e quindi

06:02.760 --> 06:04.940
isValid diventerà false.

06:04.940 --> 06:06.890
Il controllo viene effettuato solo

06:06.890 --> 06:08.280
se il controllo richiesto

06:08.280 --> 06:11.190
è segnalato con l'impostazione required a true.

06:11.190 --> 06:13.530
Questo è il primo controllo che voglio fare qui.

06:13.530 --> 06:15.560
Naturalmente non è l'unico.

06:15.560 --> 06:17.660
Possiamo continuare e verificare se

06:17.660 --> 06:18.950
validatableInput. minLength è impostato,

06:18.950 --> 06:23.880
se minLength è impostato, la stringa ottenuta

06:23.880 --> 06:25.190
deve avere una certa lunghezza

06:25.190 --> 06:27.050
minima.

06:27.050 --> 06:28.780
È importante che la stringa abbia

06:28.780 --> 06:30.440
una certa lunghezza minima.

06:30.440 --> 06:31.620
Non ci interessano i numeri, non

06:31.620 --> 06:33.600
stiamo verificando il valore minimo di un numero.

06:33.600 --> 06:37.060
Quindi possiamo aggiungere una protezione di tipo,

06:37.060 --> 06:40.390
incorporarla in questo controllo e verificare se

06:40.390 --> 06:42.320
typeof validatableInput. è uguale a

06:42.320 --> 06:46.910
stringa.

06:46.910 --> 06:48.460
Se non lo è, non c'è bisogno di fare questa

06:48.460 --> 06:50.357
verifica, perché non c'è nulla da verificare.

06:50.357 --> 06:52.570
Se il nostro valore è un numero, questo non ci interessa.

06:52.570 --> 06:55.330
Se si imposta una lunghezza minima per un numero,

06:55.330 --> 06:57.710
in pratica si salta questo controllo perché

06:57.710 --> 06:59.330
non ha molto senso.

06:59.330 --> 07:01.890
Se però abbiamo una stringa e la lunghezza

07:01.890 --> 07:03.420
minima è impostata, allora

07:03.420 --> 07:05.663
voglio impostare isValid uguale

07:06.570 --> 07:10.053
a isValid e, di nuovo, il nostro controllo.

07:11.181 --> 07:12.600
Il controllo

07:12.600 --> 07:16.580
è se validatableInput. il valore, che sappiamo essere una stringa a questo

07:16.580 --> 07:20.810
punto, la lunghezza, è maggiore

07:20.810 --> 07:24.070
di validatableInput. minLength.

07:24.070 --> 07:28.520
Quindi maggiore del valore definito qui.

07:28.520 --> 07:31.660
Ora, però, abbiamo un potenziale problema, e

07:31.660 --> 07:33.920
vedete quale potrebbe essere?

07:33.920 --> 07:36.163
In genere dovrebbe funzionare, ma fallisce se

07:37.030 --> 07:38.630
minLength è impostato a zero.

07:38.630 --> 07:42.210
L'intenzione dello sviluppatore di impostarlo a

07:42.210 --> 07:45.760
zero non è probabilmente quella di saltare questo

07:45.760 --> 07:48.760
controllo, ma di verificare se la lunghezza

07:48.760 --> 07:50.170
minima è zero.

07:50.170 --> 07:51.960
Beh, probabilmente è un controllo ridondante,

07:51.960 --> 07:53.800
perché in pratica sta verificando se abbiamo

07:53.800 --> 07:55.850
qualcosa, cosa che già facciamo con il controllo

07:55.850 --> 07:57.260
richiesto.

07:57.260 --> 07:59.300
Quindi non è un problema enorme.

07:59.300 --> 08:01.330
Tuttavia, se si vuole essere super

08:01.330 --> 08:05.470
sicuri, si dovrebbe verificare se validatableInput.

08:05.470 --> 08:05.470
minLength non è uguale a undefined.

08:05.470 --> 08:10.470
O non uguale a null, con un segno

08:10.640 --> 08:14.910
di uguale, questo include null e undefined, è così che

08:14.910 --> 08:17.130
funziona JavaScript.

08:17.130 --> 08:18.890
Questo è un po' più sicuro, perché

08:18.890 --> 08:20.470
ora ci assicuriamo di eseguire

08:20.470 --> 08:23.010
sempre questo controllo anche se minLength è impostato

08:23.010 --> 08:25.140
a zero, che è un valore falsato.

08:25.140 --> 08:27.222
Anche in questo caso, si potrebbe discutere

08:27.222 --> 08:29.740
se ha senso, perché è fondamentalmente lo stesso controllo

08:29.740 --> 08:32.270
di prima, ma comunque, qui voglio eseguirlo.

08:32.270 --> 08:34.930
Questa è la lunghezza minima.

08:34.930 --> 08:36.790
Ora copierò questo e in pratica farò

08:36.790 --> 08:38.130
lo stesso per maxLength.

08:38.130 --> 08:40.720
Quindi la maxLength viene controllata

08:40.720 --> 08:44.350
anche qui e solo per le stringhe.

08:44.350 --> 08:46.870
E naturalmente qui dobbiamo solo ripristinare il tutto.

08:46.870 --> 08:49.280
Vogliamo assicurarci che la lunghezza del

08:49.280 --> 08:52.380
valore fornito sia inferiore alla lunghezza massima.

08:52.380 --> 08:55.173
Ora rimangono due controlli per il valore minimo

08:56.810 --> 08:58.760
e massimo, che hanno senso solo

08:58.760 --> 09:00.160
per un numero.

09:00.160 --> 09:03.310
Quindi aggiungerò un altro controllo e verificherò

09:03.310 --> 09:05.150
se validatableInput. min non è uguale

09:05.150 --> 09:08.280
a null.

09:09.720 --> 09:11.100
Ancora una volta, non sto solo verificando

09:11.100 --> 09:13.820
la veridicità, perché questo avrebbe problemi con un valore pari a zero.

09:13.820 --> 09:21.770
E poi verificherò se il tipo di validatableInput. è uguale a numero.

09:21.770 --> 09:23.250
Perché non vedo molto senso

09:23.250 --> 09:25.640
nel controllare questo per una stringa.

09:25.640 --> 09:26.760
Se si vuole verificare la presenza di una

09:26.760 --> 09:28.020
stringa, è possibile omettere questo punto.

09:28.020 --> 09:29.680
Poi bisogna solo assicurarsi di

09:29.680 --> 09:32.120
convertire il valore in un numero quando lo si usa

09:32.120 --> 09:34.380
nel controllo che stiamo per scrivere.

09:34.380 --> 09:35.970
Il controllo che stiamo per scrivere, ancora

09:35.970 --> 09:37.220
una volta, utilizza il vecchio

09:37.220 --> 09:39.740
valore di isValid e lo combina con un nuovo controllo per poi memorizzarlo

09:39.740 --> 09:41.500
nuovamente in isValid.

09:41.500 --> 09:44.000
Il nuovo controllo dovrebbe ora incorporare

09:44.000 --> 09:47.210
il nostro numero e verificare se è maggiore del valore

09:47.210 --> 09:48.730
minimo.

09:48.730 --> 09:54.650
Quindi verifico se validatableInput. è maggiore di validatableInput.

09:54.650 --> 09:54.650
min.

09:54.650 --> 09:58.690
Ora possiamo ripetere questa operazione

09:58.690 --> 10:02.010
per max, quindi qui abbiamo bisogno di max e qui abbiamo bisogno

10:02.010 --> 10:06.190
di max e dobbiamo cambiare questo simbolo in un simbolo più piccolo di.

10:06.190 --> 10:10.363
Per questo motivo, stiamo verificando tutti i diversi scenari

10:11.920 --> 10:13.230
possibili.

10:13.230 --> 10:16.930
E restituiamo isValid.

10:16.930 --> 10:18.710
Ora dobbiamo solo creare oggetti che aderiscano

10:19.840 --> 10:21.600
a questa interfaccia per poi inviarli

10:21.600 --> 10:23.630
alla funzione di validazione.

10:23.630 --> 10:26.573
Per questo, andiamo in project input

10:28.160 --> 10:31.360
e in gatherUserInput voglio costruire

10:31.360 --> 10:34.000
il mio oggetto validabile.

10:34.000 --> 10:36.360
Nota a margine: oltre a un'interfaccia,

10:36.360 --> 10:38.420
avremmo potuto creare una classe e

10:38.420 --> 10:40.870
istanziarla con la parola chiave new, ma

10:40.870 --> 10:43.570
a scopo pratico e dimostrativo voglio mostrare

10:43.570 --> 10:46.070
come funziona con un'interfaccia.

10:46.070 --> 10:48.990
Quindi abbiamo il nostro titleValidatable,

10:48.990 --> 10:51.900
che dovrebbe essere di tipo Validatable.

10:52.850 --> 10:54.970
E questo, ovviamente, è un oggetto che

10:54.970 --> 10:56.830
deve avere una proprietà value.

10:56.830 --> 10:58.930
E questo è il nostro titolo inserito.

10:58.930 --> 11:01.020
Non ha bisogno di altre proprietà,

11:01.020 --> 11:03.550
ma voglio verificare che non sia vuoto,

11:03.550 --> 11:06.750
quindi imposteremo required a true.

11:06.750 --> 11:08.743
E poi possiamo copiarlo e ripeterlo

11:09.710 --> 11:12.430
per la descrizione e per le persone.

11:12.430 --> 11:16.270
Ed ecco la descrizione, oops, la descrizione

11:16.270 --> 11:19.250
inserita, intendo.

11:19.250 --> 11:21.880
Qui abbiamo le persone iscritte.

11:21.880 --> 11:24.260
Per essere precisi, voglio avere un numero.

11:24.260 --> 11:26.230
Quindi lo converto in un numero con il simbolo più.

11:26.230 --> 11:29.020
Tutti dovrebbero essere obbligatori, ma anche qui

11:29.020 --> 11:30.810
diciamo che la descrizione dovrebbe

11:30.810 --> 11:32.890
avere una lunghezza minima di cinque caratteri

11:32.890 --> 11:35.420
e per le persone, il minimo dovrebbe essere uno,

11:35.420 --> 11:38.823
in modo da avere almeno due persone assegnate.

11:39.820 --> 11:42.030
A proposito, sta a voi decidere come implementare questo sistema.

11:42.030 --> 11:44.020
Naturalmente, nella logica di

11:44.020 --> 11:47.200
convalida, si può anche verificare che sia maggiore

11:47.200 --> 11:50.080
uguale minore uguale, se lo si desidera.

11:50.080 --> 11:52.030
Lo stesso vale per la lunghezza del corso.

11:52.030 --> 11:54.200
Maggiore uguale, minore uguale.

11:54.200 --> 11:56.940
Anche questo è possibile.

11:56.940 --> 11:58.660
In realtà, manterrò queste modifiche.

11:58.660 --> 12:00.520
Quindi ora abbiamo un minimo di una persona assegnata

12:00.520 --> 12:01.920
e un massimo di cinque.

12:01.920 --> 12:05.253
Ora abbiamo questi tre oggetti validabili e qui,

12:06.100 --> 12:08.500
alla funzione validate, passiamo

12:08.500 --> 12:11.680
il nostro titleValidatable, alla seconda

12:11.680 --> 12:16.440
chiamata di funzione passo il descriptionValidatable e alla terza

12:16.440 --> 12:21.310
chiamata di funzione passo il peopleValidatable.

12:21.310 --> 12:24.460
Ora validate dovrebbe restituire true se sono tutti

12:24.460 --> 12:26.380
validi e false altrimenti.

12:26.380 --> 12:29.480
Ora voglio verificare se almeno uno di essi fallisce,

12:29.480 --> 12:32.420
controllando se questi sono tutti falsi,

12:32.420 --> 12:36.580
aggiungendo un punto esclamativo davanti ad essi, per verificare

12:36.580 --> 12:38.970
se questo è falso o questo è falso o

12:38.970 --> 12:41.560
questo è falso.

12:41.560 --> 12:42.740
E se almeno una di esse è falsa, quindi

12:42.740 --> 12:44.750
se almeno una delle chiamate alla funzione di validazione

12:44.750 --> 12:45.730
restituisce false, la faremo

12:45.730 --> 12:47.760
entrare e mostreremo l'avviso.

12:47.760 --> 12:49.860
E dopo questo, per testare

12:51.930 --> 12:53.610
anche questo, andrò

12:53.610 --> 12:54.860
all'indice. html, perché nell'input

12:54.860 --> 12:56.270
per le persone,

12:56.270 --> 12:58.210
in realtà permetto un massimo di

12:58.210 --> 13:00.410
10 e un minimo di zero.

13:00.410 --> 13:01.460
Quindi nell'input possiamo tecnicamente inserire valori non validi.

13:01.460 --> 13:05.120
Naturalmente di proposito, in modo da poter testare la

13:05.120 --> 13:06.240
nostra logica.

13:06.240 --> 13:08.090
E per ora salviamo tutto,

13:08.090 --> 13:10.200
compila senza errori.

13:10.200 --> 13:11.750
Proviamo ora a fare una prova.

13:11.750 --> 13:13.083
Se faccio clic su aggiungi progetto,

13:13.920 --> 13:16.000
ottengo un errore, il che è positivo.

13:16.000 --> 13:17.430
Ora inseriamo il test qui, ottenendo ancora un errore.

13:17.430 --> 13:21.370
Inseriamo test qui e cinque qui e ottengo

13:21.370 --> 13:24.180
ancora un errore.

13:24.180 --> 13:25.390
Perché la mia descrizione è troppo breve.

13:25.390 --> 13:26.870
Se inserisco un altro carattere,

13:26.870 --> 13:28.160
ho la lunghezza minima e posso

13:28.160 --> 13:29.500
creare questo.

13:29.500 --> 13:31.210
Quindi ora inseriamo, diciamo,

13:31.210 --> 13:32.640
meno uno, e bene, l'html

13:32.640 --> 13:34.580
non lo supporta.

13:34.580 --> 13:37.940
Ma se inseriamo zero o sei, otteniamo degli

13:37.940 --> 13:39.200
errori.

13:39.200 --> 13:42.040
E solo se inserisco qualcosa tra uno

13:42.040 --> 13:43.840
e cinque funziona.

13:43.840 --> 13:46.100
Quindi sembra funzionare come

13:46.100 --> 13:49.260
dovrebbe, e questo è abbastanza buono.

13:49.260 --> 13:50.240
Naturalmente questo è solo

13:50.240 --> 13:51.850
un modo per implementare la convalida.

13:51.850 --> 13:53.570
Ma un modo che ora è abbastanza riutilizzabile,

13:53.570 --> 13:56.510
potrebbe essere usato anche in diverse parti dell'applicazione

13:56.510 --> 13:59.170
e, naturalmente, sfrutta il typescript e ci offre

13:59.170 --> 14:01.660
un grande supporto e un controllo dei tipi per evitare

14:01.660 --> 14:04.480
errori inutili.
