WEBVTT

00:02.200 --> 00:03.970
Istruttore: Per questo modulo è tutto.

00:03.970 --> 00:06.080
Ovviamente il moderno JavaScript ha anche un paio di

00:06.080 --> 00:07.790
altre caratteristiche interessanti.

00:07.790 --> 00:09.810
Per esempio, tratterò le classi nel modulo

00:09.810 --> 00:11.120
delle classi e in generale

00:11.120 --> 00:13.470
questo non è un corso JavaScript.

00:13.470 --> 00:16.540
Non voglio annoiarvi con tonnellate di nozioni su

00:16.540 --> 00:19.030
JavaScript che non riguardano realmente

00:19.030 --> 00:20.140
TypeScript.

00:20.140 --> 00:22.700
Ho voluto citare queste caratteristiche specifiche

00:22.700 --> 00:24.650
perché è bene sapere che TypeScript ci

00:24.650 --> 00:28.210
aiuta a usare queste caratteristiche in modo da funzionare anche con

00:28.210 --> 00:29.580
i browser più vecchi.

00:29.580 --> 00:32.920
Perché è una cosa che non si deve mai dimenticare.

00:32.920 --> 00:35.600
Il codice viene compilato.

00:35.600 --> 00:38.690
Attualmente ho impostato il target su ES6 e quindi se

00:38.690 --> 00:41.540
controlliamo la cartella dist vediamo che le costanti

00:41.540 --> 00:46.030
sono tutte disponibili anche nel file JS dell'applicazione.

00:46.030 --> 00:48.070
Strutturazione degli oggetti, c'è un

00:48.070 --> 00:50.600
modo per farlo, perché tutte queste caratteristiche

00:50.600 --> 00:52.480
sono supportate in ES6.

00:52.480 --> 00:55.230
Se si imposta il target su ES5 e si commentano le lib

00:55.230 --> 00:56.590
ora, in modo da importare

00:56.590 --> 00:58.680
le libre corrette per il target ES5, cosa

00:58.680 --> 01:00.930
che avverrà per impostazione predefinita,

01:00.930 --> 01:03.680
si noterà che il codice generato ha un aspetto molto

01:03.680 --> 01:05.290
diverso.

01:05.290 --> 01:08.140
È molto più lungo, perché ora usiamo var e TypeScript

01:08.140 --> 01:09.810
ha dovuto trovare delle soluzioni

01:09.810 --> 01:14.730
per alcune sintassi che non sono supportate in ES5 JavaScript.

01:14.730 --> 01:18.240
Ad esempio, è stata eliminata la sintassi di de-strutturazione.

01:18.240 --> 01:21.140
È una cosa importante da tenere sempre presente.

01:21.140 --> 01:23.490
TypeScript compila il codice,

01:23.490 --> 01:26.440
non solo da funzioni solo di TypeScript

01:26.440 --> 01:29.210
a JavaScript normale, ma tutto da JavaScript

01:29.210 --> 01:33.000
moderno a JavaScript vecchio, se si dice a TypeScript

01:33.000 --> 01:35.433
di farlo.
