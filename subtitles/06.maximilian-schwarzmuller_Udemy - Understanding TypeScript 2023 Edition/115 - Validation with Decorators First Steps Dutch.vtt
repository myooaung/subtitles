WEBVTT

00:02.160 --> 00:04.860
Presentator: Nu we weer een mooi voorbeeld hebben gezien van

00:04.860 --> 00:06.440
hoe we met decorators kunnen werken,

00:06.440 --> 00:09.040
is er nog een laatste voorbeeld waar ik in wil duiken.

00:09.040 --> 00:11.997
En dat zijn decorateurs voor validatie.

00:11.997 --> 00:14.560
Daarvoor voeg ik onderaan het

00:14.560 --> 00:17.733
bestand nog een nieuwe klasse toe.

00:18.780 --> 00:20.530
Dat zou een cursus kunnen zijn.

00:20.530 --> 00:23.903
Nu moet een cursus een titel hebben, die een string is.

00:25.430 --> 00:27.483
En misschien een prijs, wat een getal is.

00:29.730 --> 00:32.640
Dan hebben we hier een constructor waar we beide waarden

00:32.640 --> 00:34.440
krijgen en ik gebruik hier met opzet

00:35.550 --> 00:37.780
niet de snelkoppeling, zodat ik gemakkelijk

00:37.780 --> 00:40.953
property decorators kan toevoegen.

00:42.690 --> 00:44.560
Dan stel ik deze titel gelijk

00:44.560 --> 00:46.653
aan t, en deze prijs aan p.

00:47.990 --> 00:50.530
Als we nu deze cursus willen instantiëren, moeten we

00:50.530 --> 00:53.610
natuurlijk een geldige titel en een geldige prijs opgeven.

00:53.610 --> 00:56.730
Maar een veel voorkomend scenario in sommige toepassingen

00:56.730 --> 00:59.630
is dat je gegevens ophaalt, laten we zeggen van een

00:59.630 --> 01:03.340
webbron en je krijgt gegevens waarvan je vermoedt dat je een paar

01:03.340 --> 01:05.854
cursussen hebt, laten we zeggen, maar je weet

01:05.854 --> 01:08.110
het niet zeker.

01:08.110 --> 01:12.839
Of, een ander mogelijk scenario, u laat gebruikers de gegevens invoeren en u wilt die gegevens

01:12.839 --> 01:15.490
gewoon toewijzen en een nieuwe koers verhandelen

01:15.490 --> 01:18.370
met de door de gebruiker ingevoerde gegevens en u gaat

01:18.370 --> 01:21.280
ervan uit dat het klopt, maar u bent er niet zeker van dat

01:21.280 --> 01:22.500
het klopt en daarom wilt

01:22.500 --> 01:24.210
u de invoer valideren.

01:24.210 --> 01:26.380
Dat is het scenario dat ik hier wil nabootsen.

01:26.380 --> 01:29.940
Laten we zeggen dat we in ons index html bestand een eenvoudig formulier

01:30.894 --> 01:32.840
krijgen en ik zal het niet stijlen, zodat

01:32.840 --> 01:36.074
het nu zo mooi wordt, maar we hebben hier een eenvoudig formulier

01:36.074 --> 01:41.074
met de invoer van het type tekst en een plaatshouder van titel, woops, cursus, titel en een

01:41.390 --> 01:44.620
id van laten we zeggen titel en daaronder hebben we een nummer

01:44.620 --> 01:46.870
invoer waar het type al de tekst is, maar het

01:46.870 --> 01:50.605
is de prijs van de cursus en de id is prijs.

01:50.605 --> 01:55.030
En dan hebben we onze knop waar we dit indienen.

01:55.030 --> 02:00.030
Dus de knop is van het type submit.

02:00.040 --> 02:02.780
Dus een heel eenvoudig formulier en zoals ik al zei is het niet

02:02.780 --> 02:04.280
zo mooi als we het hier bekijken, maar

02:04.280 --> 02:06.070
het heeft alles wat we nodig hebben.

02:06.070 --> 02:08.763
Laten we nu een luisteraar aan het formulier koppelen.

02:09.830 --> 02:14.780
Dus hier heb ik mijn cursusForm die ik kan krijgen met document, querySelector, form

02:14.780 --> 02:18.840
en ik voeg het uitroepteken toe omdat ik weet dat ik er een zal krijgen zodat

02:18.840 --> 02:21.910
dit niet null is, en dan op het formulier kunnen weEventListener

02:21.910 --> 02:25.050
toevoegen, de submit event listener en dan krijgen we

02:26.390 --> 02:29.300
het event object doorgegeven in de functie die ik

02:29.300 --> 02:32.360
automatisch heb toegewezen.

02:32.360 --> 02:35.450
Daar wil ik event preventDefault aanroepen, zodat we het formulier

02:35.450 --> 02:38.030
niet verzenden en geen http request sturen.

02:38.030 --> 02:40.570
En dan willen we de gegevens voor de titel

02:40.570 --> 02:42.910
en voor de prijs eruit halen.

02:42.910 --> 02:45.779
Dus, de titel kan worden geëxtraheerd door

02:45.779 --> 02:49.700
te reiken naar document, querySelector, of eigenlijk omdat

02:49.700 --> 02:54.700
we een id, getElementById, title hebben toegekend en we weten dat dit een HTMLInputElement

02:55.560 --> 02:59.760
zal zijn, dus we kunnen typecasting gebruiken om typescript hierover

02:59.760 --> 03:01.700
te laten weten, en de prijs is document,

03:01.700 --> 03:09.672
getElementById, price en we kunnen dit ook converteren naar een InputElement.

03:09.672 --> 03:11.320
En ik ben er eigenlijk voor dit zijn

03:11.320 --> 03:14.520
de elementen dus we hernoemen de constanten naar titleEL en priceEl

03:14.520 --> 03:17.779
en om de concrete titel te krijgen kunnen we nu naar titleEl gaan,

03:17.779 --> 03:20.930
toegang tot value property en om de prijs te krijgen kunnen we hetzelfde

03:20.930 --> 03:23.400
doen voor het priceElement en daar ook de waarde krijgen,

03:23.400 --> 03:26.840
en ik wil het als een getal hebben, dus ik voeg de plus ervoor toe om het

03:26.840 --> 03:30.060
naar een getal te converteren.

03:30.060 --> 03:34.017
Dat is dat, maar nu wil ik een nieuwe cursus maken

03:34.017 --> 03:36.090
met die informatie.

03:36.090 --> 03:39.060
Dus, hier hebben we de gemaakte cursus waar

03:39.060 --> 03:43.850
ik nieuwe cursus kan oproepen en ik geef titel en prijs door.

03:43.850 --> 03:46.770
Nu accepteert typescript dit, omdat titel een string zal zijn

03:46.770 --> 03:48.640
en omdat ik deze invoer omzet in een getal,

03:48.640 --> 03:50.200
zal prijs een getal zijn.

03:50.200 --> 03:54.160
Dus, als ik dan console log, de aangemaakte cursus daarna, kunnen we controleren

03:54.160 --> 03:55.530
of dit werkt.

03:55.530 --> 03:58.693
Laten we dat opslaan, opnieuw laden, misschien de console wissen zodat

03:58.693 --> 04:00.680
we de uitvoer duidelijk kunnen zien, en dan hier

04:00.680 --> 04:02.400
een nieuwe cursus toevoegen.

04:02.400 --> 04:05.785
Javascript de complete gids kost $199

04:05.785 --> 04:08.010
en dit lijkt te werken.

04:08.010 --> 04:11.010
Helaas werkt dit alleen als

04:11.010 --> 04:13.290
ik niets invoer.

04:13.290 --> 04:16.600
Als ik nu op opslaan klik, zien we dat deze cursus is aangemaakt.

04:16.600 --> 04:19.820
Nu is dit technisch gezien een geldige cursus, maar

04:19.820 --> 04:23.121
natuurlijk niet echt geldig voor onze toepassing.

04:23.121 --> 04:26.220
We willen waarschijnlijk een titel die niet leeg

04:26.220 --> 04:28.620
is en een prijs die groter is dan nul.

04:28.620 --> 04:30.660
Dus we willen validatie toevoegen.

04:30.660 --> 04:32.670
Natuurlijk kunnen we hier gewoon een

04:32.670 --> 04:37.130
if check toevoegen en controleren of title, trim, length groter is dan nul, wat

04:37.130 --> 04:38.830
betekent dat het niet leeg is en

04:38.830 --> 04:41.100
waar we ook de prijs valideren.

04:41.100 --> 04:43.870
Maar dat betekent dat wanneer we een nieuwe cursus aanmaken,

04:43.870 --> 04:47.880
we de validatie logica hier moeten toevoegen voordat we hem toevoegen.

04:47.880 --> 04:49.990
Zou het niet mooi zijn als de validatielogica

04:49.990 --> 04:51.910
zou worden opgenomen in de cursusklasse,

04:51.910 --> 04:53.940
misschien met behulp van decoratoren?

04:53.940 --> 04:56.770
En dat is precies wat ik hier wil doen.

04:56.770 --> 04:59.910
Nu zal ik slechts een basisidee geven van hoe we dit zouden

04:59.910 --> 05:01.447
kunnen implementeren, in

05:01.447 --> 05:04.861
de volgende module zal ik een voorbeeldpakket tonen dat

05:04.861 --> 05:08.270
dit op een veel uitgebreidere manier doet en dat we dan allemaal

05:08.270 --> 05:10.010
daar zullen gebruiken om er wat

05:10.010 --> 05:12.080
mee te spelen.

05:12.080 --> 05:14.530
Nu wil ik dit echter implementeren met

05:14.530 --> 05:16.300
mijn eigen decoratoren en

05:16.300 --> 05:19.370
ik voeg hier een decorator vereist toe en we voegen

05:19.370 --> 05:21.890
nog een decoratorfunctie toe die ik PositiveNumber

05:21.890 --> 05:24.433
zal noemen.

05:26.710 --> 05:28.510
Dus ik heb twee decorateurs hier.

05:28.510 --> 05:31.240
En nu is mijn idee dat we ze hier kunnen toevoegen

05:31.240 --> 05:35.369
aan onze eigenschappen, bijvoorbeeld Required voor title,

05:35.369 --> 05:40.369
en positiveNumber voor price en typescript registreert dit ergens en

05:41.740 --> 05:44.020
dan hebben we een derde functie,

05:44.020 --> 05:49.020
validate waaraan we een object kunnen doorgeven, dus een willekeurig

05:49.490 --> 05:54.490
object en typescript kijkt dan naar het project, vindt elke validatie

05:55.120 --> 05:58.780
die we eerder hebben geregistreerd op deze klasse voor

05:58.780 --> 06:01.440
dit object en past onze validatie logica

06:01.440 --> 06:03.410
toe.

06:03.410 --> 06:05.480
Dat is het idee dat ik hier heb.

06:05.480 --> 06:08.240
Dus, dit kan deel uitmaken van een bibliotheek van derden die

06:08.240 --> 06:11.170
we aan u blootstellen en dan importeert u gewoon vereist positief

06:11.170 --> 06:14.620
getal en valideren om eerst de validatoren in te stellen en dan op een bepaald

06:14.620 --> 06:16.750
moment valideren aan te roepen.

06:16.750 --> 06:18.634
Dus bijvoorbeeld hier toen we

06:18.634 --> 06:22.462
de cursus aanmaakten, kunnen we valideren en de createdCourse

06:22.462 --> 06:27.462
doorgeven en als dit niet waar is, dus laten we zeggen dat dit waar of onwaar moet

06:30.370 --> 06:31.660
opleveren, als dit niet

06:31.660 --> 06:35.040
waar is, dan gooien we een foutmelding of tonen we een

06:35.040 --> 06:40.040
waarschuwing, ongeldige invoer probeer het opnieuw en alleen anders gaan

06:41.100 --> 06:42.960
we verder.

06:42.960 --> 06:43.870
Dus dat is mijn idee.

06:43.870 --> 06:46.540
Dat kunnen we valideren, dit geeft waar of onwaar terug.

06:46.540 --> 06:48.793
True als het geldig is, false als het niet

06:48.793 --> 06:51.670
geldig is en we dus het resultaat kunnen gebruiken.

06:51.670 --> 06:53.730
Dus daarom krijgen we een paar dingen te doen.

06:53.730 --> 06:56.290
We moeten ervoor zorgen dat wanneer we hier een

06:56.290 --> 06:59.350
decorator toevoegen, dit ergens wordt opgeslagen.

06:59.350 --> 07:00.970
Nogmaals, houd in gedachten dat

07:00.970 --> 07:02.950
dit deel kan uitmaken van onze eigen bibliotheek

07:02.950 --> 07:05.710
van derden, dus daarin zouden we een soort opslag kunnen

07:05.710 --> 07:10.050
hebben die bewaart dat voor deze klasse en deze titeleigenschap bijvoorbeeld, we

07:10.050 --> 07:12.480
willen dat het vereist is.

07:12.480 --> 07:15.630
En in valideren kunnen we dan controleren of in de opslag voor het

07:15.630 --> 07:19.026
object dat we hebben gekregen, voor de klasse waarop het object is gebaseerd

07:19.026 --> 07:21.990
een validator is geregistreerd voor de titel, voor de prijs

07:21.990 --> 07:23.330
enzovoort.

07:23.330 --> 07:25.260
En dan draaien we onze validatie logica.

07:25.260 --> 07:26.453
Dat is mijn idee.
