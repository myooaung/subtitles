WEBVTT

00:02.170 --> 00:03.830
让我们继续讨论函数｡ 

00:03.830 --> 00:11.033
现代JavaScript中的另一个很好的特性是可以为函数参数分配默认参数｡

00:11.880 --> 00:13.830
假设在add函数中,

00:13.830 --> 00:17.720
出于某种原因, 我们需要b的默认值.

00:17.720 --> 00:20.180
所以我们知道我们想要把两个数相加｡ 

00:20.180 --> 00:23.850
但是如果你只使用一个数字调用这个函数,

00:23.850 --> 00:29.990
我们将假设第二个参数为默认值, 或者第二个参数为默认值｡

00:29.990 --> 00:32.120
我们可以通过在参数列表中添加一个等号,

00:32.120 --> 00:34.980
然后设置默认值来实现这一点｡

00:34.980 --> 00:36.920
当然要符合我们的类型｡ 

00:36.920 --> 00:40.020
例如, 一个或任何默认值｡ 

00:40.020 --> 00:44.080
这使得我们可以只使用一个参数来调用这个函数｡

00:44.080 --> 00:46.700
所以我可以这样调用它, TypeScript不会抱怨,

00:46.700 --> 00:51.860
因为它检测到这里有一个默认参数, 然后它被用于b｡

00:51.860 --> 00:53.910
所以这里我得到的输出是6,

00:53.910 --> 01:03.113
因为我的默认值b是1, 加上5, 等于6现在, 关于默认参数有一个重要的注意事项.

01:04.010 --> 01:07.090
他们必须在名单的最后｡ 

01:07.090 --> 01:10.710
例如, 如果你给一个赋值默认参数, 我们就会有问题,

01:10.710 --> 01:12.640
为什么呢？

01:12.640 --> 01:16.840
因为调用函数时不会跳过默认参数｡

01:16.840 --> 01:19.490
如果我用一个参数调用一个函数,

01:19.490 --> 01:25.060
那么我传递的参数会以相同的顺序传递给其他参数.

01:25.060 --> 01:27.240
所以用一个参数调用这个函数,

01:27.240 --> 01:32.400
在这里是五个, 把这个参数传递给参数列表中的第一个参数｡

01:32.400 --> 01:34.150
由于第二个参数没有提供默认值,

01:34.150 --> 01:37.660
因此它不是可选的｡

01:37.660 --> 01:40.920
因此, 我们根本不提供第二个论证｡ 

01:40.920 --> 01:43.730
所以TypeScript, 或者说JavaScript,

01:43.730 --> 01:53.290
不会查看你的函数定义, 也不会猜测你可能想跳过默认参数, 把你的值提供给非默认参数｡

01:53.290 --> 01:55.740
相反, 它只是简单地遵守顺序｡ 

01:55.740 --> 01:59.720
因此, 您应该从右侧设置默认值｡ 

01:59.720 --> 02:07.523
因此, 请确保不接受默认参数的参数位于默认参数之前｡
