WEBVTT

00:02.100 --> 00:04.390
Istruttore: Naturalmente, nelle applicazioni

00:04.390 --> 00:08.640
React più grandi, non si lavora solo con useRef e useState.

00:08.640 --> 00:10.950
Per capire come si usa TypeScript in questo

00:10.950 --> 00:13.460
caso, è sempre utile passare sopra le funzioni

00:13.460 --> 00:15.180
che si chiamano, quindi gli altri

00:15.180 --> 00:17.090
hook con cui si lavora.

00:17.090 --> 00:20.010
Ad esempio, se si ha bisogno dello strumento useEffect

00:20.010 --> 00:22.660
qui, nel componente NewTodo, per qualsiasi motivo,

00:22.660 --> 00:26.330
è possibile chiamarlo e successivamente passarci sopra semplicemente

00:26.330 --> 00:29.010
per capire con quali tipi funziona.

00:29.010 --> 00:30.960
Per esempio, che il primo parametro è un

00:30.960 --> 00:33.720
EffectCallback, che è una funzione speciale, dove TypeScript

00:33.720 --> 00:37.100
vi avvertirà se l'avete impostata in modo errato, che il secondo parametro

00:37.100 --> 00:38.610
non è nulla o è un array di qualsiasi

00:38.610 --> 00:42.997
cosa, cose del genere, questo vi aiuterà sempre, imparerete anche che useEffect non

00:42.997 --> 00:45.930
restituisce nulla, per esempio, e su useState, dove ho menzionato

00:45.930 --> 00:49.200
che si ottiene sempre un array con esattamente due elementi, beh,

00:49.200 --> 00:52.410
vedete anche che qui, useState restituisce un array, questo è

00:52.410 --> 00:56.310
ciò che vediamo qui, parentesi di apertura e di chiusura, dove il primo elemento

00:56.310 --> 01:01.750
è del vostro tipo generico, quindi un elenco di Todos, perché è la vostra istantanea di stato, il secondo elemento

01:01.750 --> 01:08.600
è un React.

01:08.600 --> 01:08.600
La

01:08.600 --> 01:11.370
funzione di invio qui alla fine, ecco cosa sta succedendo.

01:11.370 --> 01:12.690
Quindi può essere utile.

01:12.690 --> 01:15.490
Forse state anche lavorando con Redux.

01:15.490 --> 01:19.660
Fortunatamente, se vi immergete nella loro documentazione,

01:19.660 --> 01:21.360
troverete anche istruzioni

01:21.360 --> 01:24.530
sull'uso di Redux con TypeScript.

01:24.530 --> 01:27.430
Qui, alla voce Ricette, si trova Uso con TypeScript

01:27.430 --> 01:30.710
e lì si può imparare come aggiungere tipi alle azioni,

01:30.710 --> 01:33.270
ai riduttori e alla gestione degli stati

01:33.270 --> 01:35.540
con Redux.

01:35.540 --> 01:38.650
È davvero semplice, non è affatto complesso

01:38.650 --> 01:41.520
e aggiunge un sacco di sicurezza di tipo.

01:41.520 --> 01:43.230
Forse si utilizza anche

01:43.230 --> 01:47.110
il pacchetto React Router, questo pacchetto qui.

01:47.110 --> 01:52.040
Non ci sono notazioni specifiche di TypeScript, ma naturalmente è possibile

01:52.040 --> 01:54.020
installarlo nel progetto con

01:54.020 --> 01:55.340
npm install dash dash

01:55.340 --> 01:58.770
save react dash router dash dom, che è il comando che si

01:58.770 --> 02:00.740
usa di solito per installare questo

02:00.740 --> 02:03.720
pacchetto nel progetto React.

02:03.720 --> 02:07.000
Quindi si aggiungerà il pacchetto react-router-dom.

02:07.000 --> 02:10.250
Ma questo pacchetto non ha istruzioni speciali sui

02:10.250 --> 02:12.430
tipi nella sua pagina, non c'è nulla

02:12.430 --> 02:14.720
di specifico per TypeScript qui, almeno

02:14.720 --> 02:17.570
nel momento in cui sto registrando.

02:17.570 --> 02:19.163
Tuttavia, è ovvio che si può usare

02:19.163 --> 02:21.250
anche in un progetto TypeScript, dove

02:21.250 --> 02:23.920
si può ottenere un buon supporto per i tipi.

02:23.920 --> 02:25.800
Ora, con l'installazione,

02:25.800 --> 02:29.360
si noterà che se importo da react-router-dom, non

02:29.360 --> 02:31.880
ho un grande supporto per i tipi.

02:31.880 --> 02:33.870
Per esempio, se provo a importare qualcosa

02:33.870 --> 02:36.870
qui, ricevo già un avviso, che non ha trovato una dichiarazione

02:36.870 --> 02:39.210
per il modulo react-router-dom, quindi non

02:39.210 --> 02:42.730
ha trovato alcuna informazione sul tipo qui.

02:42.730 --> 02:45.420
Per rimediare, naturalmente, possiamo fare quello

02:45.420 --> 02:48.450
che abbiamo fatto prima, npm install dash dash save dash

02:48.450 --> 02:52.530
dev, at types, slash react dash router dash dom, così cancelliamo l'at search

02:52.530 --> 02:54.620
types qui, e siamo di nuovo a posto, questo

02:54.620 --> 02:56.860
è un trucco che avete già imparato a conoscere,

02:56.860 --> 02:59.097
all'inizio del corso, ma naturalmente non

02:59.097 --> 03:02.010
c'è bisogno di dimenticarlo, solo perché abbiamo un progetto

03:02.010 --> 03:03.920
in cui molto funziona già con TypeScript

03:03.920 --> 03:06.790
fuori dalla scatola.

03:06.790 --> 03:08.140
Se poi aggiungiamo qualcosa

03:08.140 --> 03:10.810
che non funziona con TypeScript, come questo, possiamo

03:10.810 --> 03:13.700
aggiungerlo in questo modo e ora conosce Route e anche

03:13.700 --> 03:15.380
tutte le altre funzioni di questo

03:15.380 --> 03:17.270
pacchetto.

03:17.270 --> 03:21.070
Quindi è facile aggiungere il supporto anche per questo.

03:21.070 --> 03:23.560
Ecco come si dovrebbe affrontare la questione: dare

03:23.560 --> 03:26.010
un'occhiata ai documenti ufficiali, verificare

03:26.010 --> 03:29.030
se ci sono istruzioni sull'uso di TypeScript; in caso contrario,

03:29.030 --> 03:31.590
installarlo e verificare se ha un supporto integrato

03:31.590 --> 03:33.720
per i tipi, in modo da ottenere almeno un buon

03:33.720 --> 03:37.350
supporto per l'autocompletamento e la compilazione; se anche questo

03:37.350 --> 03:39.090
non esiste, installare un pacchetto

03:39.090 --> 03:42.080
di tipi, come abbiamo fatto qui.

03:42.080 --> 03:43.980
Questo è davvero tutto per questo modulo:

03:43.980 --> 03:46.410
ecco come potete utilizzare TypeScript e tutte le

03:46.410 --> 03:49.920
sue incredibili funzionalità in un'applicazione React e, naturalmente,

03:49.920 --> 03:52.450
tutto ciò che imparerete in questo corso si applica anche

03:52.450 --> 03:54.370
a un'applicazione React.

03:54.370 --> 03:56.380
È possibile utilizzare tutte le funzionalità

03:56.380 --> 03:59.130
di TypeScript apprese in questo corso in un progetto React.
