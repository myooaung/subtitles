WEBVTT

00:02.260 --> 00:05.180
Instrutor: Agora, se voltarmos a esta interface

00:05.180 --> 00:08.230
aqui, a pergunta é: por que precisamos disto?

00:08.230 --> 00:10.160
Não teríamos exatamente a mesma coisa

00:10.160 --> 00:13.420
se acrescentássemos um tipo personalizado aqui e ali?

00:13.420 --> 00:15.580
A diferença é que temos que adicionar um sinal

00:15.580 --> 00:18.470
de igualdade e então estamos dizendo que o tipo de Pessoa é um objeto

00:18.470 --> 00:19.940
que se parece com isto?

00:19.940 --> 00:21.490
E de fato, se salvarmos isso,

00:21.490 --> 00:23.220
ele se compila sem erros.

00:23.220 --> 00:26.740
Assim, poderíamos substituir nossa interface com tal tipo

00:26.740 --> 00:28.490
e ela funciona como antes.

00:28.490 --> 00:31.290
Então, por que temos uma interface?

00:31.290 --> 00:32.277
Bem, uma interface

00:32.277 --> 00:35.310
e um tipo personalizado não são exatamente os mesmos,

00:35.310 --> 00:39.260
enquanto que muitas vezes, você pode usá-los de forma intercambiável

00:39.260 --> 00:42.130
e pode usar uma interface em vez de um tipo personalizado

00:42.130 --> 00:43.520
ou o contrário.

00:43.520 --> 00:45.720
Há também algumas diferenças.

00:45.720 --> 00:47.400
Bem, uma diferença natural é que as

00:47.400 --> 00:49.070
interfaces só podem ser usadas para

00:49.070 --> 00:51.470
descrever a estrutura de um objeto, você pode usar

00:51.470 --> 00:53.780
tipo para isso também, mas ao invés de um tipo personalizado,

00:53.780 --> 00:55.250
você também pode armazenar outras

00:55.250 --> 00:56.800
coisas como tipos de união e assim

00:56.800 --> 01:00.350
por diante o que fizemos no início do curso.

01:00.350 --> 01:03.740
Parece, portanto, que o tipo é mais flexível,

01:03.740 --> 01:08.510
mas o outro lado da moeda é que a interface é mais clara.

01:08.510 --> 01:10.870
Quando você define algo como uma interface,

01:10.870 --> 01:12.900
é super claro que você quer definir

01:12.900 --> 01:15.580
a estrutura de um objeto com isso.

01:15.580 --> 01:18.360
E de fato, quando se trata de definir tipos de objetos,

01:18.360 --> 01:21.630
é mais comum ver interfaces lá fora na natureza.

01:21.630 --> 01:23.800
Em seguida, você vê tipos personalizados.

01:23.800 --> 01:26.410
Agora, outra coisa que você pode fazer com

01:26.410 --> 01:27.530
as interfaces, mas

01:27.530 --> 01:30.090
você só poderia fazer com tipos personalizados,

01:30.090 --> 01:33.360
é implementar uma interface em uma classe.

01:33.360 --> 01:34.820
O que queremos dizer com isso?

01:34.820 --> 01:38.360
A razão pela qual você freqüentemente trabalha com interfaces

01:38.360 --> 01:40.550
é que uma interface pode ser usada como

01:40.550 --> 01:43.750
um contrato que uma classe pode implementar e uma classe

01:43.750 --> 01:46.400
então tem que aderir a ela.

01:46.400 --> 01:48.150
O que queremos dizer com isso?

01:48.150 --> 01:52.390
Digamos que nossa interface não é uma interface Pessoa

01:52.390 --> 01:53.970
com o nome e a idade, mas,

01:53.970 --> 01:57.690
em vez disso, a chamamos de Greetable.

01:57.690 --> 01:59.270
Agora isto pode parecer um

01:59.270 --> 02:01.090
nome estranho, mas no final isto

02:01.090 --> 02:03.560
apenas diz que qualquer objeto que deve

02:03.560 --> 02:06.310
ser tratado como Greetable tem que ser objeto

02:06.310 --> 02:09.251
com um nome e com um método de saudação.

02:09.251 --> 02:10.783
Portanto, agora, poderíamos

02:10.783 --> 02:14.630
dizer isto aqui, esta variável do usuário1 deve conter um objeto Greetable

02:14.630 --> 02:16.730
e, claro, agora recebemos um erro porque

02:16.730 --> 02:19.930
temos mais do que apenas nome e saudação.

02:19.930 --> 02:22.000
Mas poderíamos usar esta interface

02:22.000 --> 02:25.860
para compartilhá-la entre possíveis múltiplas classes, temos

02:25.860 --> 02:27.410
que garantir que cada classe

02:27.410 --> 02:30.860
que adere a esta interface tem que ter uma propriedade de nome

02:30.860 --> 02:33.410
e tem que ter um método de saudação.

02:33.410 --> 02:35.730
Portanto, aqui, poderíamos agora acrescentar uma classe Person,

02:35.730 --> 02:36.970
o nome está disponível novamente

02:36.970 --> 02:38.540
porque renomeamos a interface.

02:38.540 --> 02:40.790
E agora, digite datilografia

02:40.790 --> 02:45.480
e esta classe deve basicamente aderir a esta interface.

02:45.480 --> 02:48.350
Ela deve implementar esta interface.

02:48.350 --> 02:53.000
Deve-se seguir essa configuração de contrato por esta interface.

02:53.000 --> 02:55.260
Fazemos isso acrescentando a palavra-chave dos

02:55.260 --> 02:56.930
implementos após o nome da classe.

02:56.930 --> 02:59.280
E então, o nome de nossa interface, Greetable.

03:00.420 --> 03:02.780
E você pode implementar mais de uma interface.

03:02.780 --> 03:04.710
Isso é uma diferença em comparação com a herança.

03:04.710 --> 03:07.270
Você pode herdar apenas de uma classe, pode implementar

03:07.270 --> 03:09.370
múltiplas interfaces simplesmente

03:09.370 --> 03:12.730
separando-as com uma vírgula, de modo que lá, poderíamos

03:12.730 --> 03:14.750
ter outra interface se tivéssemos

03:14.750 --> 03:16.000
uma.

03:16.000 --> 03:17.710
Aqui, porém, só tenho um.

03:17.710 --> 03:20.350
E agora, a implicação disto é que recebemos

03:20.350 --> 03:21.740
aqui um erro porque nossa

03:21.740 --> 03:25.200
classe implementa a interface de forma incorreta.

03:25.200 --> 03:27.240
Não tem a propriedade do nome,

03:27.240 --> 03:29.690
não tem o método de saudação.

03:29.690 --> 03:33.960
Portanto, agora, temos que definir isto aqui em nossa classe, talvez

03:33.960 --> 03:35.610
eu estabeleça um construtor

03:35.610 --> 03:38.173
onde obtenhamos um valor para o nome, e depois

03:39.010 --> 03:41.260
o estabeleçamos assim, e onde também

03:41.260 --> 03:44.380
acrescentemos nosso método de saudação, onde então

03:44.380 --> 03:48.080
poderemos ter esta lógica de lá de fora.

03:48.080 --> 03:50.780
Agora, em nossa classe, podemos ter mais do que isso.

03:50.780 --> 03:52.340
Podemos ter mais campos, podemos

03:52.340 --> 03:53.920
ter mais métodos, podemos também

03:53.920 --> 03:56.030
ampliar esta classe, podemos trabalhar

03:56.030 --> 03:59.170
com esta classe como sempre podemos.

03:59.170 --> 04:02.640
Mas somos forçados a implementar este método corretamente para

04:02.640 --> 04:04.400
ter esta propriedade de nome porque

04:04.400 --> 04:07.040
estamos implementando esta interface.

04:07.040 --> 04:09.740
E, portanto, as interfaces são freqüentemente utilizadas

04:09.740 --> 04:13.870
para compartilhar funcionalidades entre diferentes classes que não se referem

04:13.870 --> 04:16.550
à sua implementação concreta.

04:16.550 --> 04:19.240
Você não pode ter implementação ou valores dentro

04:19.240 --> 04:22.450
das interfaces, mas quanto à estrutura, quanto às características

04:22.450 --> 04:24.980
que uma classe deve ter.

04:24.980 --> 04:28.120
É um pouco como trabalhar com classes abstratas, portanto,

04:28.120 --> 04:29.640
a diferença é que uma interface

04:29.640 --> 04:33.520
não tem nenhum detalhe de implementação, enquanto as classes

04:33.520 --> 04:37.160
abstratas podem ser uma mistura de você tem que sobrescrever

04:37.160 --> 04:39.330
essas partes e eu tenho uma parte de

04:39.330 --> 04:42.470
implementação concreta.

04:42.470 --> 04:43.730
Essa é uma diferença importante

04:43.730 --> 04:46.860
entre as interfaces e as classes abstratas.

04:46.860 --> 04:47.850
Agora, com isso, porém,

04:47.850 --> 04:49.790
temos aqui nossa classe pessoal.

04:49.790 --> 04:53.910
E agora aqui, o usuário1 pode ser criado usando uma

04:53.910 --> 04:55.930
nova Pessoa e alimentando

04:55.930 --> 04:58.090
no nome, por exemplo.

04:58.090 --> 04:59.730
E agora, use veja que não há problema

04:59.730 --> 05:02.300
de termos esta idade aqui no usuário1, porque

05:02.300 --> 05:05.870
nós embarcamos usuário1 baseado no Person, Person implementa

05:05.870 --> 05:07.540
Greetable, e você pode adicionar

05:07.540 --> 05:10.440
mais do que Greetable em uma classe, mas você tem que

05:10.440 --> 05:15.120
satisfazer as condições configuradas pela interface.

05:15.120 --> 05:17.130
E portanto, agora, se salvarmos tudo, temos

05:17.130 --> 05:18.730
um código válido, e se logarmos nosso

05:18.730 --> 05:23.040
usuário1 lá embaixo com console. log, vemos que se trata de um objeto

05:23.040 --> 05:25.430
normal com a idade e o nome neste

05:25.430 --> 05:27.590
caso, mas a chave de retirada

05:27.590 --> 05:30.950
é que ele se baseia em uma classe que implementa

05:30.950 --> 05:32.770
a interface.

05:32.770 --> 05:35.550
E todos podem então usar a interface como um tipo.

05:35.550 --> 05:37.780
É claro que poderíamos ter configurado isto para

05:37.780 --> 05:40.580
digitar Person, mas como você vê, usando o tipo Greetable aqui

05:40.580 --> 05:42.200
ele funciona porque o objeto Person

05:42.200 --> 05:45.090
que armazenamos na classe User1 no final é baseado na interface

05:45.090 --> 05:46.300
Greetable.

05:46.300 --> 05:47.750
Ele o implementa.

05:47.750 --> 05:49.820
Portanto, essa é outra característica poderosa.

05:49.820 --> 05:53.690
Você pode usar uma interface como um tipo em alguma constante

05:53.690 --> 05:58.010
ou variável que então armazenará de fato outra classe de outro

05:58.010 --> 06:03.950
tipo que, por sua vez, é baseada no tipo de interface porque a implementa.

06:03.950 --> 06:06.530
Portanto, em poucas palavras, isso é uma interface.

06:06.530 --> 06:08.643
Muitas características poderosas incluídas.
