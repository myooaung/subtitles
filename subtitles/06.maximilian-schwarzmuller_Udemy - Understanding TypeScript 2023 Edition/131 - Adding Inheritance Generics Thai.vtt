WEBVTT

00:02.410 --> 00:06.370
ผู้สอน: ได้เวลาสำหรับการสืบทอดและคลาสพื้นฐานแล้ว

00:06.370 --> 00:09.189
ฉันต้องการเพิ่มคลาสพื้นฐาน ซึ่งโดยพื้นฐานแล้วจะมี

00:09.189 --> 00:12.090
templateElement, hostElement ซึ่งเป็นองค์ประกอบในนั้น

00:12.090 --> 00:16.810
ซึ่งทำหน้าที่ในการเลือกองค์ประกอบใน dom ซึ่งมีวิธีแนบซึ่งเราต้องการเสมอ

00:16.810 --> 00:18.520
และอื่นๆ

00:18.520 --> 00:22.540
ซึ่งโดยพื้นฐานแล้วจะจัดการฟังก์ชันที่ใช้ร่วมกันทั้งหมด

00:22.540 --> 00:28.220
ซึ่งคลาสของเราที่เรนเดอร์บางอย่างให้กับโดมมีเหมือนกัน

00:28.220 --> 00:30.880
สำหรับสิ่งนั้น เหนือ ProjectInput

00:30.880 --> 00:35.650
ของฉัน และคลาส ProjectList ดังนั้นโดยพื้นฐานแล้ว ฉันจะเพิ่ม

00:35.650 --> 00:38.250
Component Base Class

00:38.250 --> 00:41.540
ตอนนี้ ชื่อขึ้นอยู่กับคุณ แต่ฉันจะตั้งชื่อว่า Component

00:41.540 --> 00:47.590
เพราะคุณอาจรู้จักคำนี้จาก React หรือ Angular ถ้าคุณใช้สิ่งนั้น และแม้ว่าคุณจะไม่ได้ทำงานกับสิ่งนั้น

00:47.590 --> 00:53.950
คุณก็สามารถนึกถึงสิ่งเหล่านี้ได้ คลาสเป็น UI ส่วนประกอบส่วนต่อประสานผู้ใช้ที่คุณแสดงบนหน้าจอ

00:53.950 --> 01:01.370
และในตอนท้ายทุกๆ คอมโพเนนต์จะเป็นออบเจกต์ที่เรนเดอร์ได้ ซึ่งมีฟังก์ชันบางอย่างที่ช่วยให้เราสามารถเรนเดอร์ได้

01:01.370 --> 01:10.260
จากนั้นอินสแตนซ์ที่เป็นรูปธรรมหรือคลาสที่สืบทอดมาจะเพิ่มฟังก์ชันพิเศษที่ส่วนประกอบเฉพาะนี้ต้องการ

01:10.300 --> 01:14.370
แล้วจะเข้าสู่คลาส Component ทั่วไปได้อย่างไร

01:14.370 --> 01:17.590
ฉันจะบอกว่าองค์ประกอบทั้งสามนี้แน่นอน

01:17.590 --> 01:21.390
templateElement, hostElement และองค์ประกอบ

01:21.390 --> 01:25.470
ตอนนี้เรามีปัญหาเกี่ยวกับประเภท

01:25.470 --> 01:28.320
templateElement จะเป็น HTMLTemplateElement

01:29.160 --> 01:31.980
เสมอ แต่ hostElement ไม่จำเป็นต้องเป็น div

01:31.980 --> 01:37.160
เสมอไป เช่น เมื่อเราจะเพิ่มคลาสไอเท็มโปรเจ็กต์ เราจะเรนเดอร์สิ่งนั้นใน ProjectList

01:37.160 --> 01:40.550
ไม่ใช่โดยตรงแม้แต่ div รูทของเราที่นี่ นั่นจึงไม่ใช่

01:40.550 --> 01:42.360
div เสมอไป

01:42.360 --> 01:47.040
และนี่คือ HTMLElement เสมอ เราสามารถตกลงได้อย่างแน่นอน

01:47.040 --> 01:50.540
แต่ในกรณีของคลาส ProjectInput เรารู้จริง

01:50.540 --> 01:52.560
ๆ ว่ามันมีรูปแบบเฉพาะของมัน

01:52.560 --> 01:55.230
มันคือ HTMLFormElement

01:55.230 --> 01:57.540
ดังนั้น เราจะสูญเสียข้อมูลเพิ่มเติมนี้ไป

01:57.540 --> 02:00.320
หากเราจำกัดตัวเองให้มีเพียง HTMLElement

02:00.320 --> 02:05.220
ที่นั่นเสมอ โดยไม่เก็บข้อมูลที่เฉพาะเจาะจงมากกว่านี้

02:05.220 --> 02:07.690
แล้วเราจะแก้ไขสิ่งนั้นได้อย่างไร?

02:07.690 --> 02:10.050
ไม่ใช่แค่การใช้การสืบทอด แต่โดยการสร้างคลาสทั่วไปที่นี่

02:10.050 --> 02:17.680
ซึ่งเมื่อเราสืบทอดจากมัน เราสามารถตั้งค่าประเภทที่เป็นรูปธรรมได้

02:17.680 --> 02:20.940
เพื่อสิ่งนั้น เราจึงเพิ่มวงเล็บมุมตามหลังชื่อคลาส

02:20.940 --> 02:23.550
จากนั้นระบุตัวระบุสองตัวที่เราเลือก

02:23.550 --> 02:26.690
เช่น T และ U ซึ่งจะเป็นตัวเลือกทั่วไป

02:26.690 --> 02:30.110
และตอนนี้ เราสามารถเพิ่มข้อจำกัดบางอย่างที่นี่

02:30.110 --> 02:34.820
และบอกว่า T จะเป็น HTMLElement บางอย่างอย่างแน่นอน

02:34.820 --> 02:38.970
อาจเป็นเพียง HTMLElement หรือเวอร์ชันที่เจาะจงกว่านี้ก็ได้

02:38.970 --> 02:41.870
และเช่นเดียวกันกับ U

02:41.870 --> 02:44.780
แล้วที่นี่ เรารู้ว่า hostElement จะเป็นประเภท

02:44.780 --> 02:46.690
T และองค์ประกอบจะเป็นประเภท U

02:46.690 --> 02:48.660
และตอนนี้ เมื่อใดก็ตามที่เราสืบทอดจากคลาสนี้

02:48.660 --> 02:52.930
เราสามารถระบุประเภทที่เป็นรูปธรรม เพื่อให้เราสามารถทำงานกับประเภทต่างๆ ในที่ต่างๆ

02:52.930 --> 02:54.780
ที่เราสืบทอดมา

02:56.050 --> 02:58.053
ทีนี้ เรามาเพิ่มตัวสร้างที่นี่กัน

02:58.910 --> 03:03.060
ในตัวสร้างนั้นเราต้องการข้อมูลเล็กน้อย

03:03.060 --> 03:05.950
เราจำเป็นต้องทราบ ID ของเทมเพลตของเรา

03:05.950 --> 03:09.750
เพื่อให้เราทราบวิธีเลือก และนั่นควรเป็นสตริง

03:09.750 --> 03:13.050
เราจำเป็นต้องทราบ hostElementId ซึ่งจำเป็นต้องเป็นสตริงด้วย

03:13.050 --> 03:15.833
เพื่อให้เรารู้ว่าจะแสดงผลส่วนประกอบนี้ที่ใด

03:17.440 --> 03:20.505
และฉันต้องการรับ newElementId ด้วย เพื่อเราจะได้

03:20.505 --> 03:24.350
ID ที่ต้องกำหนดให้กับองค์ประกอบที่แสดงผลใหม่

03:24.350 --> 03:26.020
อย่างไรก็ตาม นี่เป็นทางเลือก

03:26.020 --> 03:29.690
ซึ่งฉันส่งสัญญาณโดยเพิ่มเครื่องหมายคำถามหลังพารามิเตอร์

03:29.690 --> 03:31.940
อีกทางเลือกหนึ่งคือยอมรับ undefined

03:31.940 --> 03:36.470
ที่นี่เป็นประเภท แต่ฉันจะใช้เครื่องหมายคำถาม

03:36.470 --> 03:38.510
และตอนนี้ ด้วยสิ่งนี้ใน Constructor

03:38.510 --> 03:39.793
เราสามารถเอาโค้ดนี้มาวางใน

03:40.640 --> 03:42.083
Constructor ของคลาส Component

03:43.810 --> 03:48.940
เพื่อให้เราเก็บ templateElement ได้ แต่ตอนนี้ ID ที่เราอยู่ การมาที่นี่คือ

03:48.940 --> 03:57.450
templateId ซึ่งเป็นเหตุผลว่าทำไมฉันถึงได้รับสิ่งนี้เป็นอาร์กิวเมนต์ในตัวสร้าง

03:57.450 --> 04:00.060
และสำหรับ hostElement แน่นอนว่า ID ที่นี่คือ

04:00.060 --> 04:02.733
hostElementId ของเราแบบนี้

04:04.790 --> 04:07.930
ที่สำคัญอีกอย่าง เกี่ยวกับการแคสต์ที่นี่ เรารู้ว่านี่จะเป็นประเภท

04:07.930 --> 04:12.580
T เพราะ T ในที่นี้คือประเภททั่วไปที่เราจัดเก็บหรือที่เราใช้สำหรับ hostElement

04:12.580 --> 04:17.163
ของเรา ดังนั้นที่นี่เราสามารถแคสต์ได้แล้ว

04:18.160 --> 04:20.253
และด้วยเหตุนี้ เรากำลังเลือกองค์ประกอบต่างๆ

04:21.130 --> 04:22.940
เรายังสามารถคว้ารหัสเพิ่มเติม

04:22.940 --> 04:26.650
โค้ดนั้นตรงนี้ ที่ที่เรานำเข้าโหนดและอื่นๆ และที่ที่เราตั้ง

04:26.650 --> 04:30.130
ID เราสามารถคว้าทั้งหมดนั้นได้

04:30.130 --> 04:32.520
ลองคัดลอกที่นี่และเพิ่มสิ่งนี้ให้กับตัวสร้างของคลาส

04:32.520 --> 04:35.317
Component ด้วย

04:35.317 --> 04:37.640
นำเข้าโหนด จากนั้นเราตั้งค่าองค์ประกอบ

04:37.640 --> 04:41.080
และองค์ประกอบที่นี่มีประเภททั่วไปนี้ U ดังนั้นเมื่อเราส่งสิ่งนี้ที่นี่

04:41.080 --> 04:43.000
เรารู้ว่ามันจะเป็นประเภท U นั้นที่นี่

04:43.000 --> 04:46.870
ดังนั้นเราควรส่งไปยัง U

04:46.870 --> 04:49.090
นั่นเป็นการใช้ชื่อสามัญที่ดีที่นี่

04:49.090 --> 04:51.993
ซึ่งทำให้คลาส Component นี้ใช้ซ้ำได้จริงๆ

04:53.060 --> 04:55.200
ตอนนี้เกี่ยวกับ ID

04:55.200 --> 04:58.200
นี่คือสิ่งที่เราได้รับจาก newElementId

04:58.200 --> 05:00.590
แน่นอนว่าเราอาจไม่มีสิ่งนี้เสมอไป เพราะมันเป็นทางเลือก

05:00.590 --> 05:03.870
ดังนั้นเราควรตรวจสอบว่าเรามีหรือไม่

05:03.870 --> 05:06.070
ดังนั้นหาก newElementId เป็นสิ่งของ

05:06.070 --> 05:07.650
และถ้าเป็นสิ่งของเท่านั้น

05:07.650 --> 05:10.543
ฉันจะพยายามกำหนดมัน มิฉะนั้นเราจะไม่ลอง เพราะเราไม่มี

05:10.543 --> 05:13.023
ID ที่จะกำหนด

05:14.420 --> 05:16.300
ด้วยสิ่งนั้น เรามีตัวสร้าง

05:16.300 --> 05:19.160
ตอนนี้ให้ใช้ฟังก์ชันแนบที่นี่

05:19.160 --> 05:21.970
ลองคัดลอกวิธีการแนบจากคลาสอื่น

05:21.970 --> 05:28.473
ๆ ของเราและเพิ่มที่นี่เป็นวิธีการส่วนตัวในคลาสคอมโพเนนต์

05:32.690 --> 05:35.640
เราสามารถเรียกสิ่งนี้ได้เช่นกัน แนบท้าย Constructor

05:35.640 --> 05:38.540
ของคลาส Component

05:38.540 --> 05:39.960
ตอนนี้ เราต้องการเพิ่มองค์ประกอบ

05:39.960 --> 05:42.570
แต่เราไม่รู้ว่าควรเพิ่มที่ใด ซึ่งจริง

05:42.570 --> 05:46.450
ๆ แล้วเป็นข้อมูลเพิ่มเติมบางอย่างที่เราควรดึงมาที่นี่

05:46.450 --> 05:49.450
ในฐานะอาร์กิวเมนต์ที่สี่ในตัวสร้าง การแทรก

05:52.430 --> 05:54.200
Atstart อาจเป็นชื่อ และนั่น

05:54.200 --> 05:56.680
สมมติว่าเป็นบูลีน

05:56.680 --> 06:00.190
และเราควรย้ายที่อยู่ข้างหน้าพารามิเตอร์ทางเลือกของเรา

06:00.190 --> 06:02.230
พารามิเตอร์ที่เป็นทางเลือกควรเป็นค่าสุดท้ายเสมอ

06:02.230 --> 06:03.980
เนื่องจากผู้ใช้อาจละเว้น

06:03.980 --> 06:09.220
ดังนั้น พารามิเตอร์ที่จำเป็นของคุณต้องไม่มาหลังพารามิเตอร์ทางเลือกเหล่านี้

06:09.220 --> 06:12.700
และจากนั้น insertAtStart จะถูกส่งต่อเพื่อแนบ ที่นั่น

06:12.700 --> 06:13.533
insertAtBeginning

06:14.615 --> 06:23.470
คุณสามารถใช้ insertAtStart ซ้ำได้ ฉันแค่ใช้ชื่ออื่นที่นี่เพื่อหลีกเลี่ยงความสับสน ได้รับเป็นบูลีน

06:23.470 --> 06:28.040
จากนั้นที่นี่ เราตรวจสอบว่า insertAtBeginning

06:28.040 --> 06:32.920
เป็นจริงหรือไม่ ถ้าใช่ ตรงนี้ เรามี afterbegin มิฉะนั้น

06:32.920 --> 06:34.887
เรามี beforeend

06:36.770 --> 06:39.653
ตอนนี้เรามีความยืดหยุ่นเกี่ยวกับวิธีการแทรกข้อมูลนี้

06:42.980 --> 06:46.570
ฉันยังต้องการทำเครื่องหมายคลาสนี้เป็นคลาสนามธรรม

06:46.570 --> 06:49.600
เพราะผู้คนไม่ควรสร้างอินสแตนซ์คลาสนี้โดยตรง

06:49.600 --> 06:52.560
แต่ควรใช้สำหรับการสืบทอดเสมอ

06:52.560 --> 06:56.090
หน้าชั้นเรียน ฉันจึงเพิ่มคำหลักที่เป็นนามธรรม

06:56.090 --> 06:58.750
สิ่งนี้ทำให้แน่ใจว่าตอนนี้เราไม่สามารถยกตัวอย่างได้

06:58.750 --> 07:01.963
ถ้าเราพยายามทำเช่นนั้น TypeScript จะตะโกนใส่เรา

07:04.070 --> 07:06.490
ฉันจะเพิ่มเมธอดอีกสองเมธอด

07:06.490 --> 07:08.410
นั่นคือเมธอด configuration

07:08.410 --> 07:10.840
และเมธอด renderContent

07:10.840 --> 07:16.463
และฉันจะเพิ่มเป็นวิธีการแบบนามธรรม ซึ่งหมายความว่าการนำไปใช้อย่างเป็นรูปธรรมขาดหายไปที่นี่

07:18.000 --> 07:25.980
แต่ตอนนี้ โดยพื้นฐานแล้ว เราบังคับให้คลาสใดๆ ที่สืบทอดมาจากคอมโพเนนต์ เพิ่มวิธีการทั้งสองนี้และเพื่อให้พร้อมใช้งาน

07:25.980 --> 07:27.220
ฉันแค่เพิ่มสิ่งนี้ที่นี่

07:27.220 --> 07:29.390
เพื่อที่ว่าหากมีคนอื่นดูโค้ดของเรา

07:29.390 --> 07:31.460
เขาหรือเธอจะสามารถเข้าใจได้ดีว่าแนวคิดเบื้องหลังคลาส

07:31.460 --> 07:34.150
Component คืออะไร

07:34.150 --> 07:36.340
ว่ามันทำหน้าที่เรนเดอร์ทั่วไปทั้งหมด

07:36.340 --> 07:43.840
หรือไฟล์แนบของคอมโพเนนต์ แต่เนื้อหาและคอนฟิกูเรชันที่เป็นรูปธรรมจะต้องเกิดขึ้นในที่ที่เราสืบทอด

07:43.840 --> 07:47.670
หมายเหตุด้านข้าง คุณไม่สามารถมีเมธอดที่เป็นนามธรรมและเป็นส่วนตัวได้

07:47.670 --> 07:49.660
ส่วนตัวจึงต้องละไว้ที่นี่

07:49.660 --> 07:52.000
TypeScript ไม่อนุญาต

07:52.000 --> 07:54.590
และด้วยสิ่งนี้ เราสามารถขยาย Component

07:54.590 --> 07:59.130
ที่นี่บน ProjectList และกำจัดคุณสมบัติทั้งสามนี้ออกไป

07:59.130 --> 08:00.640
เราเก็บโครงการที่ได้รับมอบหมายไว้

08:00.640 --> 08:03.520
เนื่องจากเป็นโครงการเฉพาะสำหรับรายการโครงการ

08:03.520 --> 08:09.560
ตอนนี้เราต้องการระบุค่าที่เป็นรูปธรรมที่ควรเสียบเข้ากับประเภททั่วไปของเรา

08:09.560 --> 08:12.410
และเรารู้ว่าถ้าเราเปลี่ยนกลับ

08:12.410 --> 08:16.540
เรารู้ว่าเราจะมี HTMLDivElement และ HTMLElement

08:16.540 --> 08:25.830
ดังนั้นที่นี่ฉันจะส่ง HTMLDivElement และ HTMLElement แบบนี้ แล้วกำจัดคุณสมบัติทั้งสามนี้

08:25.830 --> 08:29.510
ใน Constructor ตอนนี้เราไม่ต้องการสิ่งนั้นที่นี่ แต่เราต้องเรียก

08:29.510 --> 08:32.550
Super ในตอนเริ่มต้น เพื่อเรียก Constructor ของคลาสฐาน

08:32.550 --> 08:35.130
และเพื่อสิ่งนั้น เราต้องส่งข้อมูลบางอย่างไปยัง

08:35.130 --> 08:40.840
Super Constructor เราต้องการ เพื่อส่งข้อมูลบางอย่าง

08:40.840 --> 08:42.753
ID ของ templateElement นอก, hostElementId

08:44.050 --> 08:45.850
ไม่ว่าเราจะต้องการแทรกสิ่งนี้ที่จุดเริ่มต้นของ

08:45.850 --> 08:47.870
hostElement หรือไม่ และอาจเป็น ID

08:47.870 --> 08:51.920
ที่ควรกำหนดให้กับองค์ประกอบใหม่

08:51.920 --> 08:54.038
นี่คือ ID แม่แบบของเรา

08:54.038 --> 08:57.811
ซึ่งเราสามารถกำจัดมันได้ที่นี่

08:57.811 --> 09:02.670
จากนั้นที่นี่ hostElement ID นั้นคือแอพ ดังนั้นเราจะกำจัดสิ่งนี้ได้

09:02.670 --> 09:04.260
เราเก็บโครงการที่ได้รับมอบหมายไว้

09:04.260 --> 09:06.400
เพราะเรายังต้องการสิ่งนั้นที่นี่

09:06.400 --> 09:08.193
เรากำจัดสิ่งนี้ออกไป

09:10.150 --> 09:13.050
แต่เกี่ยวกับ ID สำหรับองค์ประกอบใหม่

09:13.050 --> 09:16.850
ฉันต้องการส่งเป็นพารามิเตอร์ที่สี่จริง ๆ

09:16.850 --> 09:19.040
อันที่สามคือตำแหน่งที่ควรแทรก

09:19.040 --> 09:22.400
และที่นี่ เราใช้แทรกสิ่งนี้ก่อนสิ้นสุด ดังนั้น

09:22.400 --> 09:25.890
สิ่งที่ฉันต้องการแทรกที่นี่ในฐานะพารามิเตอร์สำหรับค่า

09:25.890 --> 09:29.170
insertAtStart จึงเป็นเท็จ เพราะไม่ควรแทรกที่จุดเริ่มต้น

09:29.170 --> 09:32.283
แต่ ในตอนท้าย

09:36.000 --> 09:38.940
ตอนนี้ฉันยังต้องการตั้งค่าการฟังที่นี่อย่างแน่นอน

09:38.940 --> 09:40.730
ฉันไม่จำเป็นต้องโทรแนบ

09:40.730 --> 09:44.410
แต่จะเกิดขึ้นในคลาสพื้นฐานในองค์ประกอบพื้นฐาน

09:44.410 --> 09:46.253
ฉันจะเรียก renderContent ว่า

09:47.870 --> 09:50.010
และตรงนี้เราไม่ควรใช้แบบนี้

09:50.010 --> 09:54.410
แต่ให้พิมพ์ เพราะเราไม่สามารถใช้แบบนี้ได้ก่อนที่จะรันจบ

09:54.410 --> 09:55.490
นั่นไม่ใช่ปัญหาเพราะเราได้รับ

09:55.490 --> 09:57.690
type เป็นอาร์กิวเมนต์

09:57.690 --> 09:59.680
ตอนนี้ คุณคงเห็นว่าฉันยังคงได้รับข้อผิดพลาดที่นี่

09:59.680 --> 10:07.330
เพราะเรามีวิธีการแนบที่นี่ใน ProjectList และนั่นขัดแย้งกับวิธีการแนบที่เรามีในคลาสพื้นฐาน

10:07.330 --> 10:10.600
เรามากำจัดวิธีการแนบนี้กัน

10:10.600 --> 10:16.060
ตอนนี้เรายังคงได้รับข้อผิดพลาด เนื่องจากคุณเห็นว่าการเรนเดอร์เนื้อหาเป็นแบบส่วนตัวที่นี่

10:16.060 --> 10:18.270
แต่เราระบุว่าเป็นวิธีการสาธารณะที่นี่

10:18.270 --> 10:22.860
ฉันชอบที่จะให้เป็นแบบส่วนตัว แต่ไม่รองรับวิธีการนามธรรมส่วนตัว

10:22.860 --> 10:25.680
ดังนั้นฉันจะลบคำหลักส่วนตัวที่นี่ และตอนนี้เราเหลือปัญหาเดียวที่นี่

10:25.680 --> 10:31.990
เราไม่มีวิธีการกำหนดค่านั้น ซึ่งฉันสัญญาว่าเราจะมีที่นี่

10:31.990 --> 10:33.650
เรามาเพิ่มกันเถอะ

10:33.650 --> 10:40.510
ตรงนี้ นอกจากการเรนเดอร์คอนฟิกแล้ว เราสามารถเพิ่มการคอนฟิกได้ แม้ว่าฉันจะไม่ได้ทำอะไรเลยก็ตาม

10:40.510 --> 10:42.950
หรือคุณสามารถแปลงที่นี่เป็นวิธีการเสริมโดยเพิ่มเครื่องหมายคำถาม

10:42.950 --> 10:47.520
จากนั้นคุณจะไม่ถูกบังคับให้เพิ่ม

10:47.520 --> 10:50.380
ที่นี่ ฉันจะเพิ่มเพราะเราสามารถโต้แย้งได้ว่าเราสำหรับ

10:50.380 --> 10:58.530
ProjectList ใส่รหัสที่เราตั้งค่าการฟังของเราที่นี่ จริง ๆ แล้วในการกำหนดค่า

10:58.530 --> 11:00.810
เราจึงสามารถติดต่อเพื่อกำหนดค่า

11:00.810 --> 11:05.220
จากนั้นทำสิ่งที่เราทำที่นี่ การตั้งค่าผู้ฟังนั้น

11:05.220 --> 11:06.610
และตอนนี้ เราควรตรวจสอบให้แน่ใจว่าเราเรียก

11:06.610 --> 11:10.653
renderContent แต่กำหนดค่าแบบนี้ด้วย

11:12.730 --> 11:14.440
ในกรณีที่คุณสงสัยว่าทำไมฉันไม่เรียก

11:14.440 --> 11:16.450
configuration และ renderContent

11:16.450 --> 11:18.560
ที่นี่ในคลาสนามธรรมในตัวสร้าง

11:18.560 --> 11:23.720
เราสามารถทำได้ แต่เราอาจจะมีปัญหา

11:23.720 --> 11:26.760
ถ้าเราเรียกสิ่งนี้ในคลาส Component เราอาจเรียกเมธอดในคลาสที่สืบทอด

11:26.760 --> 11:48.100
ดังนั้นในคลาสที่ขยาย Component โดยที่ renderContent หรือ configuration อาศัยบางสิ่งที่ตัวสร้างของคลาสที่สืบทอดอาจตั้งค่าบางอย่างขึ้นมาเท่านั้น หลังจากตัวสร้างคลาสฐานเสร็จสิ้น ซึ่งการเรนเดอร์เนื้อหาและหรือการกำหนดค่าขึ้นอยู่กับ

11:48.100 --> 11:56.860
นั่นเป็นเหตุผลที่โดยพื้นฐานแล้ว มันปลอดภัยกว่าที่จะตรวจสอบให้แน่ใจว่าคลาสที่สืบทอดต้องเรียกเมธอดเหล่านี้แทนคลาสพื้นฐานที่เรียกเมธอดเหล่านี้ให้เรา

11:57.980 --> 12:05.040
ด้วยเหตุนี้ เราจึงจัดโครงสร้างคลาส ProjectList ใหม่เพื่อใช้ประโยชน์จากการสืบทอดและตรรกะที่ใช้ร่วมกันของเรา

12:05.040 --> 12:07.730
มาทำเช่นเดียวกันกับ ProjectInput กันตอนนี้

12:07.730 --> 12:13.170
ที่นั่น เราต้องการขยาย Component

12:13.170 --> 12:14.900
ใช้ลักษณะทั่วไปของสิ่งนั้น

12:14.900 --> 12:19.430
และที่นั่น เรามี HTMLDivElement สำหรับ hostElement และ HTMLFormElement

12:19.430 --> 12:23.980
สำหรับองค์ประกอบที่ได้รับการแสดงผล

12:23.980 --> 12:27.210
ด้วยวิธีนี้ เราสามารถกำจัดคุณสมบัติทั้งสามตรงนี้ได้

12:27.210 --> 12:28.310
มาทำกันเถอะ

12:28.310 --> 12:30.090
แน่นอนว่าเราคงคุณสมบัติทั้งสามนี้ไว้ เพราะคุณสมบัติเหล่านี้เฉพาะเจาะจงสำหรับ

12:30.090 --> 12:32.140
ProjectInput

12:33.040 --> 12:35.310
จากนั้นเราต้องเรียก super ตรงนี้

12:35.310 --> 12:38.320
และเพื่อ super เราส่ง ID ของเทมเพลต ซึ่งก็คือ

12:38.320 --> 12:39.900
ProjectInput ซึ่งเป็น ID

12:39.900 --> 12:41.970
ขององค์ประกอบโฮสต์ ซึ่งก็คือแอป

12:41.970 --> 12:47.620
insertBefore จริง เพราะฉันต้องการแทรกองค์ประกอบที่สร้างขึ้นใหม่นี้ในตอนเริ่มต้น

12:47.620 --> 12:50.510
ที่นี่สำหรับคลาส ProjectInput นี้

12:50.510 --> 12:53.110
และจากนั้น newElementId นั่นคือ

12:53.110 --> 12:56.913
user-input ดังนั้นเราควรส่งต่อสิ่งนั้นด้วย

12:57.844 --> 12:59.400
ด้วยสิ่งนี้ เราสามารถกำจัดโค้ดนี้

12:59.400 --> 13:03.480
โค้ดนี้ และโค้ดทั้งหมดที่นี่

13:03.480 --> 13:05.240
แน่นอน เก็บรหัสนี้ไว้ที่นี่

13:05.240 --> 13:09.860
อย่างไรก็ตาม เราอาจโต้แย้งว่าเราใส่สิ่งนี้ลงในการกำหนดค่า

13:09.860 --> 13:12.100
ลงไปที่วิธีการกำหนดค่าซึ่งเรามีอยู่แล้วที่นี่

13:12.100 --> 13:17.683
และเพิ่มผู้ฟังของเราที่นี่หรือการตั้งค่าคุณสมบัติของเราที่นี่เพื่อกำหนดค่า

13:18.880 --> 13:20.780
แน่นอน มากำจัดการแนบกัน เพราะตอนนี้เป็นสิ่งที่คลาสพื้นฐานทำเพื่อเรา

13:20.780 --> 13:29.690
และมาดูกันว่า TypeScript ไม่ชอบอะไร แน่นอนว่าเราควรกำจัดการแนบที่นี่

13:29.690 --> 13:32.520
และใช่ มีสิ่งหนึ่งที่ TypeScript ไม่ชอบ

13:32.520 --> 13:44.770
ตอนนี้มันบ่นว่าฟิลด์เหล่านี้ไม่ได้รับการเริ่มต้นในตัวสร้าง เนื่องจากไม่เข้าใจหรือไม่ตรวจสอบว่ามีการเรียกการกำหนดค่าในตัวสร้างและไม่ได้กำหนดค่าเริ่มต้นนี้

13:44.770 --> 13:52.170
เพื่อให้เป็นไปตาม TypeScript ฉันจะย้ายการกำหนดค่าเริ่มต้นเหล่านี้กลับจากการกำหนดค่าไปยังตัวสร้าง

13:52.170 --> 13:54.190
ในทางเทคนิค ผลลัพธ์จะเหมือนกันทุกประการ

13:54.190 --> 13:55.953
แต่ตอนนี้ TypeScript จะไม่บ่น

13:56.800 --> 14:02.310
อย่างไรก็ตาม มันจะบ่นว่าเรามีเมธอดการกำหนดค่าส่วนตัว ดังนั้น

14:02.310 --> 14:08.940
เช่นเคย เราควรเปลี่ยนสิ่งนี้ และเปลี่ยนการกำหนดค่าเป็นเมธอดสาธารณะ

14:08.940 --> 14:13.000
ตอนนี้ มันไม่ใช่สิ่งที่ต้องทำ แต่เป็นแบบแผนที่จะมีวิธีการสาธารณะของคุณก่อน

14:13.000 --> 14:14.570
ซึ่งเป็นเหตุผลที่ฉันจะย้ายมันขึ้นไปเหนือวิธีการส่วนตัวอื่น

14:14.570 --> 14:17.240
ๆ ที่นี่

14:17.240 --> 14:19.370
และแน่นอน ตอนนี้ก็บ่นว่าเราไม่มีเมธอด

14:19.370 --> 14:21.990
renderContent

14:21.990 --> 14:25.020
ตอนนี้ฉันจะเพิ่มหนึ่งเพราะเราต้องการ

14:25.020 --> 14:26.780
ที่นี่เราไม่ได้ทำอะไรในนั้น ดังนั้นในทางเทคนิคแล้วมันไม่จำเป็น

14:26.780 --> 14:31.053
แต่ตอนนี้เราทำให้คลาสพื้นฐานของเราพอใจแล้ว

14:32.260 --> 14:34.603
หมายเหตุด้านข้าง, renderContent และคอนฟิกูเรชันในคลาส

14:35.550 --> 14:39.590
ProjectList สามารถย้ายไปไว้เหนือเมธอดไพรเวตนั้นได้ที่นี่ด้วยเหตุผลเดียวกันทุกประการ

14:39.590 --> 14:45.123
สำหรับแบบแผนนี้ที่ฉันเพิ่งกล่าวถึง

14:46.440 --> 14:49.870
และด้วยเหตุนี้ เราจึงปรับโครงสร้าง ProjectInput

14:49.870 --> 14:55.330
ใหม่ เพื่อใช้ประโยชน์จากการสืบทอดและปล่อยให้คลาสพื้นฐานทำงานหลายอย่างได้

14:55.330 --> 14:57.670
มาดูกันว่าตอนนี้ใช้งานได้หรือไม่

14:57.670 --> 15:00.710
หากเราบันทึก มันจะคอมไพล์โดยไม่มีข้อผิดพลาด

15:00.710 --> 15:02.740
ดูเหมือนว่าจะทำงานได้ดี

15:02.740 --> 15:05.870
คำถามนี้ใช้ได้ผลหรือไม่

15:05.870 --> 15:07.810
และนั่นก็ดูดีทีเดียว

15:07.810 --> 15:09.720
มันทำงานเหมือนกับเมื่อก่อน

15:09.720 --> 15:11.600
แต่ตอนนี้เรามีโค้ดที่สะอาดขึ้น

15:11.600 --> 15:15.850
ซึ่งเราใช้ประโยชน์จากการใช้โค้ดซ้ำ ต้องขอบคุณการสืบทอด

15:15.850 --> 15:18.540
ตอนนี้ไม่ใช่ที่เดียวที่เราสามารถรับมรดกได้

15:18.540 --> 15:24.230
ฉันต้องการสรุปการบรรยายนี้ที่นี่โดยการปรับโครงสร้างสถานะของโครงการของเราด้วย

15:24.230 --> 15:26.240
ในทางเทคนิคแล้ว เราไม่ต้องการการสืบทอด

15:26.240 --> 15:29.450
เพราะเรามีเพียงสถานะเดียวนี้ที่เราจัดการในแอปพลิเคชันทั้งหมดนี้

15:29.450 --> 15:35.310
แต่ลองนึกภาพแอปพลิเคชันที่ใหญ่กว่า ซึ่งคุณมีหลายสถานะที่แตกต่างกัน

15:35.310 --> 15:37.240
หนึ่งรายการสำหรับสถานะผู้ใช้ ไม่ว่าผู้ใช้จะเข้าสู่ระบบหรือไม่

15:37.240 --> 15:43.030
และอื่นๆ หนึ่งรายการสำหรับโครงการ หนึ่งรายการสำหรับตะกร้าสินค้า

15:43.030 --> 15:45.600
ตอนนี้ คุณจะสังเกตเห็นว่าคุณสมบัติบางอย่างของ

15:45.600 --> 15:48.080
state class ของคุณจะเหมือนกันเสมอ

15:48.080 --> 15:50.520
โดยเฉพาะอาร์เรย์ของผู้ฟังและวิธีการ

15:50.520 --> 15:52.780
addListener

15:52.780 --> 15:54.730
ดังนั้นเราจึงสามารถใช้คลาสพื้นฐานได้ที่นี่

15:55.650 --> 15:58.170
เราสามารถใช้คลาส State ที่นี่ และคลาสนั้นมีอาร์เรย์ของ

15:58.170 --> 16:01.230
Listeners และคลาสนั้นมีเมธอด addListeners

16:01.230 --> 16:09.160
ด้วย ดังนั้นเราจะตัดทั้งสองอย่างออกจาก ProjectState และเพิ่มลงใน State

16:09.160 --> 16:14.700
นั่นก็หมายความว่า แน่นอนว่าเราไม่รู้ว่าผู้ฟังของเราจะส่งคืนโครงการต่างๆ

16:14.700 --> 16:16.720
มากมายหรือไม่

16:16.720 --> 16:20.760
ที่จริงตรงนี้ สำหรับฟังก์ชันประเภทนี้

16:20.760 --> 16:24.740
ฉันอยากได้ประเภททั่วไปด้วย

16:24.740 --> 16:27.440
เพื่อให้เราสามารถตั้งค่าได้จากภายนอก

16:27.440 --> 16:28.483
เราทำได้ เราเขียนประเภททั่วไปได้

16:29.790 --> 16:31.623
เช่นนี่ ประเภทกำหนดเอง ซึ่งเป็นประเภททั่วไป

16:32.680 --> 16:42.460
เราสามารถเพิ่มวงเล็บมุมหลังชื่อประเภท ใช้ตัวระบุที่เราเลือก แล้วใช้ประเภทนั้นซ้ำที่นี่

16:42.460 --> 16:44.960
ตอนนี้ เราสามารถสร้างสถานะทั่วไปได้ เราสามารถใช้ตัวระบุเดียวกันได้

16:44.960 --> 16:49.530
เนื่องจากเป็นโครงสร้างที่แตกต่างจากประเภทที่เรากำหนดเอง

16:49.530 --> 16:53.520
และที่นี่ เมื่อเราบอกว่าเราต้องการมีรายชื่อผู้ฟัง

16:53.520 --> 17:01.510
เราต้องบอก TypeScript ว่าผู้ฟังทั่วไปประเภทใดใช้สำหรับวัตถุสถานะนี้ที่เรากำลังสร้าง

17:01.510 --> 17:06.490
และนั่นหมายความว่าเราสามารถส่งต่อประเภทสามัญของเราได้ที่นี่และที่นี่

17:06.490 --> 17:09.410
ดังนั้นเมื่อเราขยายสถานะ เราต้องระบุประเภทของข้อมูลที่สถานะนี้จะใช้งานได้

17:09.410 --> 17:17.680
และแทนที่จะเป็นสถานะ ข้อมูลนี้จะถูกส่งต่อไปยังประเภทที่กำหนดเองของ Listener นั่นคือแนวคิด

17:17.680 --> 17:19.580
แล้วเราจะใช้ทั้งหมดนั้นได้อย่างไร?

17:19.580 --> 17:21.950
ที่ด้านล่าง ในคลาส ProjectState เราเพียงแค่ขยายคลาส

17:21.950 --> 17:27.900
State และตอนนี้ ให้ค่า ค่าที่เป็นรูปธรรมสำหรับตัวยึดตำแหน่งทั่วไปนั้น และที่นี่

17:27.900 --> 17:30.040
ค่าที่เป็นรูปธรรมนี้คือ Project

17:30.040 --> 17:32.480
เนื่องจาก ProjectState นี้เกี่ยวกับการจัดการการคาดเดา

17:32.480 --> 17:36.510
อะไร?

17:36.510 --> 17:37.393
โครงการ

17:38.970 --> 17:41.650
ทีนี้ ตัวสร้างส่วนตัวตรงนี้มีปัญหา

17:41.650 --> 17:43.390
อย่างที่คุณบอกได้ เพราะเราไม่ได้เรียก

17:43.390 --> 17:45.160
super

17:45.160 --> 17:46.930
เราควรจะทำอย่างนั้น เรียก super

17:46.930 --> 17:49.800
มาที่นี่ นั่นคือทั้งหมดที่เราต้องทำที่นั่น

17:50.640 --> 17:53.490
และที่นี่ หากเราเลื่อนลงมา ที่เราดูผู้ฟัง

17:53.490 --> 17:55.880
เราจะเห็นว่าผู้ฟังมีความเป็นส่วนตัว

17:55.880 --> 18:00.240
และเป็นส่วนตัวในคลาสพื้นฐานของเรา

18:00.240 --> 18:03.580
นั่นหมายความว่าเราสามารถเข้าถึงได้จากภายในคลาสพื้นฐานเท่านั้น

18:03.580 --> 18:06.760
แต่คุณได้เรียนรู้เกี่ยวกับตัวดัดแปลงการเข้าถึงอื่น

18:06.760 --> 18:09.380
ซึ่งคล้ายกับตัวแก้ไขส่วนตัว แต่ยังอนุญาตให้เข้าถึงจากคลาสที่สืบทอดมา

18:09.380 --> 18:14.990
และสิ่งนั้นจะได้รับการปกป้อง

18:14.990 --> 18:18.930
ป้องกันหมายความว่ายังไม่สามารถเข้าถึงได้จากภายนอกคลาส

18:18.930 --> 18:23.030
แต่สามารถเข้าถึงได้จากคลาสใดก็ได้ที่สืบทอดมา

18:23.030 --> 18:24.740
เรามาบันทึกทั้งหมดนี้กันเถอะ

18:24.740 --> 18:26.650
มันควรจะคอมไพล์ได้ดี

18:26.650 --> 18:28.940
และลองทดสอบสิ่งนี้อย่างรวดเร็ว และมันก็ดูดี

18:28.940 --> 18:31.790
มันใช้งานได้เหมือนเมื่อก่อน แต่ตอนนี้ อีกครั้ง

18:31.790 --> 18:38.363
ด้วยโค้ดที่ดีกว่าเล็กน้อย โดยใช้การสืบทอดและชื่อสามัญสำหรับการจัดการสถานะของเราด้วย
