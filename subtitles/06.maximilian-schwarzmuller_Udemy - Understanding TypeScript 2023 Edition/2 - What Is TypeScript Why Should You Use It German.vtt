WEBVTT

00:02.350 --> 00:04.170
Kursleiter: Was ist eigentlich TypeScript?

00:04.170 --> 00:06.860
Was hat es damit auf sich, warum sollten wir es nutzen?

00:06.860 --> 00:10.820
TypeScript ist ein JavaScript-Superset.

00:10.820 --> 00:12.190
Was bedeutet das nun?

00:12.190 --> 00:14.250
Das bedeutet, dass TypeScript letztlich

00:14.250 --> 00:16.370
eine Sprache ist, eine Programmiersprache,

00:16.370 --> 00:18.710
die auf JavaScript aufbaut.

00:18.710 --> 00:20.940
Es handelt sich nicht um eine völlig neue Sprache,

00:20.940 --> 00:23.980
sondern um eine Weiterentwicklung der JavaScript-Sprache,

00:23.980 --> 00:27.450
die um neue Funktionen und Vorteile erweitert wurde.

00:27.450 --> 00:31.720
Es macht das Schreiben von JavaScript-Code einfacher und leistungsfähiger,

00:31.720 --> 00:32.840
könnte man sagen.

00:32.840 --> 00:35.624
Aber wir haben einen großen Nachteil.

00:35.624 --> 00:39.786
TypeScript kann nicht von JavaScript-Umgebungen wie dem Browser

00:39.786 --> 00:41.760
ausgeführt werden.

00:41.760 --> 00:44.270
Browser können TypeScript nicht ausführen,

00:44.270 --> 00:48.486
und zum Beispiel Node. js kann auch kein TypeScript ausführen,

00:48.486 --> 00:52.250
so dass die Umgebungen, in denen wir JavaScript ausführen können, TypeScript

00:52.250 --> 00:54.080
nicht unterstützen.

00:54.080 --> 00:56.140
Was ist dann die Idee hinter TypeScript?

00:56.140 --> 01:00.760
Es ist eine bessere Version von JavaScript und wir können sie nicht verwenden?

01:00.760 --> 01:02.130
Nun, nicht ganz.

01:02.130 --> 01:06.050
TypeScript ist eine Programmiersprache, aber es ist auch ein Werkzeug.

01:06.050 --> 01:10.049
Es ist ein leistungsstarker Compiler, den Sie über Ihren Code laufen

01:10.049 --> 01:14.410
lassen, um Ihren Typescript-Code in JavaScript zu kompilieren.

01:14.410 --> 01:16.540
Wenn Sie also Code in TypeScript

01:16.540 --> 01:20.260
schreiben, erhalten Sie als Ergebnis JavaScript.

01:20.260 --> 01:22.870
Aber Sie haben nicht diesen JavaScript-Code

01:22.870 --> 01:24.900
geschrieben, sondern TypeScript-Code

01:24.900 --> 01:27.480
mit all den neuen Funktionen und Vorteilen,

01:27.480 --> 01:30.670
und Sie erhalten normalen JavaScript-Code.

01:30.670 --> 01:33.810
Das wirft natürlich eine wichtige Frage auf: Wie

01:33.810 --> 01:36.710
kann TypeScript neue Funktionen hinzufügen,

01:36.710 --> 01:40.630
wenn das, was man am Ende erhält, normales JavaScript ist?

01:40.630 --> 01:43.460
Und die Antwort ist, dass der TypeScript-Compiler

01:43.460 --> 01:47.710
diese neuen Features zu JavaScript-Workarounds kompiliert, so dass man

01:47.710 --> 01:50.670
am Ende vielleicht eine schönere Syntax hat, eine

01:50.670 --> 01:52.890
einfachere Möglichkeit, etwas zu tun,

01:52.890 --> 01:56.571
und diese schönere, einfachere Möglichkeit wird dann zu einem

01:56.571 --> 01:59.820
komplexeren JavaScript-Snippet kompiliert, das man

01:59.820 --> 02:02.060
sonst schreiben müsste.

02:02.060 --> 02:03.230
Es ist also keine Magie,

02:03.230 --> 02:06.790
natürlich kann es nichts hinzufügen, was in der JavaScript-Sprache

02:06.790 --> 02:08.610
überhaupt nicht möglich ist, aber

02:08.610 --> 02:11.150
es kann neue Funktionen hinzufügen, die einfach

02:11.150 --> 02:15.020
einfacher zu benutzen sind, eine schönere Syntax und solche Dinge.

02:15.020 --> 02:17.470
Darüber hinaus leistet TypeScript natürlich

02:17.470 --> 02:20.900
eine wichtige Sache, die der Name bereits andeutet.

02:20.900 --> 02:22.740
Es fügt Typen hinzu, es fügt

02:22.740 --> 02:26.230
der JavaScript-Sprache eine Funktion hinzu, auf

02:26.230 --> 02:28.750
die wir gleich näher eingehen werden,

02:28.750 --> 02:31.541
die Ihnen als Entwickler die Möglichkeit

02:31.541 --> 02:35.070
gibt, Fehler in Ihrem Code früher zu erkennen, bevor

02:35.070 --> 02:38.480
Ihr Skript läuft und der Fehler zur Laufzeit im

02:38.480 --> 02:41.350
Browser auftritt.

02:41.350 --> 02:44.320
Dadurch erhalten Sie nicht nur einige neue Funktionen

02:44.320 --> 02:46.690
und schönere Möglichkeiten, etwas zu tun,

02:46.690 --> 02:50.240
sondern auch eine zusätzliche Fehlerprüfung, bei der Fehler,

02:50.240 --> 02:54.153
die sonst als Laufzeitfehler auftreten würden, bereits während

02:54.153 --> 02:58.370
der Entwicklung erkannt und behoben werden können.

02:58.370 --> 03:00.600
Warum sollten wir also TypeScript verwenden?

03:00.600 --> 03:02.570
Betrachten Sie dieses Beispiel,

03:02.570 --> 03:06.710
eine recht einfache JavaScript-Funktion, die zwei Zahlen addiert.

03:06.710 --> 03:08.760
Wenn ich es jetzt aufrufe, beachten Sie

03:08.760 --> 03:11.810
bitte, dass ich zwei Zeichenketten anstelle von zwei Zahlen

03:11.810 --> 03:14.810
übergebe, und ich werde Ihnen gleich ein echtes Beispiel

03:14.810 --> 03:18.090
zeigen, wo so etwas realistisch passieren könnte.

03:18.090 --> 03:20.270
Wir rufen diese Funktion also mit zwei Zeichenketten

03:20.270 --> 03:22.519
auf, und als Ergebnis würden Sie hier wahrscheinlich

03:22.519 --> 03:25.260
ein unerwünschtes Verhalten erhalten, denn wenn Sie zwei

03:25.260 --> 03:27.240
Zeichenketten hinzufügen, wird JavaScript

03:27.240 --> 03:29.596
die Zeichenketten verketten, anstatt hier eine

03:29.596 --> 03:32.780
mathematische Berechnung durchzuführen.

03:32.780 --> 03:36.310
Das Ergebnis wäre also nicht fünf, sondern dreiundzwanzig,

03:36.310 --> 03:38.980
eine verkettete Folge der beiden Zahlen.

03:38.980 --> 03:41.690
Dies ist ein Fehler, den Sie in JavaScript haben könnten,

03:41.690 --> 03:43.530
es ist kein technischer Fehler, Sie

03:43.530 --> 03:46.720
werden wahrscheinlich keinen Laufzeitfehler bekommen, aber

03:46.720 --> 03:49.832
Sie haben einen logischen Fehler in Ihrem Code.

03:49.832 --> 03:52.820
Und das kann natürlich zu großen Problemen in den Webanwendungen

03:52.820 --> 03:55.870
führen, die Sie mit JavaScript schreiben.

03:55.870 --> 03:59.360
In JavaScript gibt es natürlich Strategien zur Schadensbegrenzung,

03:59.360 --> 04:02.541
wir könnten eine if-Prüfung in die Funktion einfügen, um die

04:02.541 --> 04:05.440
Eingabetypen zur Laufzeit zu prüfen, wir könnten auch die

04:05.440 --> 04:08.240
Benutzereingaben validieren und bereinigen, und obwohl

04:08.240 --> 04:10.670
wir das alles vielleicht tun wollen, wäre es auch

04:10.670 --> 04:14.040
schön, wenn wir Fehler wie diesen schon während der Entwicklung

04:14.040 --> 04:15.840
erkennen könnten.

04:15.840 --> 04:19.220
Und zum Glück ist das mit TypeScript möglich, denn Entwickler können

04:19.220 --> 04:21.810
hier ungültigen Code schreiben und solche Bots in

04:21.810 --> 04:23.970
JavaScript einführen, und mit TypeScript

04:23.970 --> 04:26.160
haben wir ein Werkzeug, das uns hilft, besseren

04:26.160 --> 04:30.060
Code zu schreiben und solche Probleme zu vermeiden.

04:30.060 --> 04:31.910
Schauen wir uns das also einmal genauer an.
