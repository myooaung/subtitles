WEBVTT

00:02.060 --> 00:04.880
Mann: Mit dem Spreizungsoperator verbunden

00:04.880 --> 00:07.060
sind die Ruheparameter.

00:07.060 --> 00:10.374
Und dafür werde ich wieder meine Add-Funktion optimieren.

00:10.374 --> 00:13.870
Ich werde also den ganzen Code hier oben auskommentieren,

00:13.870 --> 00:15.780
damit nichts kaputt geht.

00:15.780 --> 00:20.520
Und fügen Sie meine Funktion "Hinzufügen" mit einer beliebigen Syntax ein, mit dem Funktionsschlüsselwort

00:20.520 --> 00:23.830
als Pfeilfunktion, was immer Sie wollen.

00:23.830 --> 00:26.360
Aber jetzt möchte ich eine besondere Funktion haben.

00:26.360 --> 00:29.100
Ich möchte es nicht auf zwei Werte beschränken,

00:29.100 --> 00:31.340
sondern so viele Werte hinzufügen können,

00:31.340 --> 00:33.290
wie ein Benutzer eingibt.

00:33.290 --> 00:37.700
So können wir add im Grunde so aufrufen, fünf, zehn,

00:37.700 --> 00:42.700
zwei, drei Punkt sieben und so weiter, mit so vielen Werten

00:42.880 --> 00:44.530
wie Sie wollen.

00:44.530 --> 00:46.691
Wenn Sie es mit 10 Werten aufrufen möchten, sollte

00:46.691 --> 00:48.090
das auch möglich sein.

00:48.090 --> 00:51.160
Jetzt ist das natürlich noch nicht möglich, wie Sie

00:51.160 --> 00:52.600
deutlich sehen können.

00:52.600 --> 00:54.290
Typescript gibt mir einen Fehler,

00:54.290 --> 00:57.760
und zwar zu Recht, denn ich akzeptiere hier keine Argumente.

00:57.760 --> 01:00.336
Nun könnte ich hier natürlich Argumente akzeptieren

01:00.336 --> 01:02.210
und die richtigen Typen zuweisen, aber

01:02.210 --> 01:04.300
was ist, wenn ich es dann mit fünf aufrufe.

01:04.300 --> 01:06.330
Wie ich schon sagte, ich möchte flexibel sein.

01:06.330 --> 01:08.850
Das ist der Punkt, an dem die Ruheparameter ins Spiel kommen.

01:08.850 --> 01:13.111
An der Stelle, an der Sie eine Liste von Werten erwarten, also nicht dort,

01:13.111 --> 01:15.270
wo Sie sie übergeben, sondern wo Sie

01:15.270 --> 01:18.308
sie als eingehende Werte akzeptieren wollen, können

01:18.308 --> 01:20.360
Sie auch die drei Punkte und dann einen

01:20.360 --> 01:24.043
beliebigen Namen, z. B. Zahlen, verwenden.

01:25.630 --> 01:27.430
Damit werden alle eingehenden

01:27.430 --> 01:31.470
Parameter, oder allgemein die eingehende

01:31.470 --> 01:34.920
Liste von Werten, kommagetrennt in

01:34.920 --> 01:39.350
ein Array zusammengeführt.

01:39.350 --> 01:40.940
Zahlen werden hier also ein Array

01:40.940 --> 01:44.460
sein, aber natürlich standardmäßig ein Typ mit beliebigen Werten, also

01:44.460 --> 01:46.920
ein Array voller beliebiger Werte, und das sollten

01:46.920 --> 01:48.300
wir nicht tun, wir sollten expliziter

01:48.300 --> 01:49.680
sein.

01:49.680 --> 01:53.200
Und hier könnten wir sagen: "Es wird eine Zahlenreihe sein. Genau so.

01:53.200 --> 01:54.430
Wir haben also den richtigen Typ definiert

01:54.430 --> 01:56.420
und können nun mit dem Zahlenfeld arbeiten.

01:56.420 --> 01:58.710
Nun kann man das auf verschiedene Weise zusammenfassen.

01:58.710 --> 02:01.880
Wir können mit einer Ergebnisvariablen und dann mit einer Viererschleife

02:01.880 --> 02:04.110
arbeiten, weil numbers ein Array ist.

02:04.110 --> 02:06.863
Hier könnten wir also eine Schleife durch die Zahlen

02:06.863 --> 02:09.260
ziehen und diese zum Ergebnis addieren.

02:09.260 --> 02:11.519
Oder wir verwenden die Methode reduce, die für Arrays verfügbar ist.

02:11.519 --> 02:15.620
Reduce führt für jedes Element in einem Array eine Operation

02:15.620 --> 02:19.030
durch, gibt ein Ergebnis zurück und addiert dann

02:19.030 --> 02:20.940
die Ergebnisse.

02:20.940 --> 02:24.310
Dazu geben Sie eine Funktion zum Reduzieren und

02:24.310 --> 02:27.160
einen Startwert an, der hier Null ist.

02:27.160 --> 02:31.093
Und dann nimmt diese Funktion, die Sie an reduce selbst übergeben,

02:31.093 --> 02:33.430
zwei Argumente und das ist das aktuelle

02:33.430 --> 02:35.920
Ergebnis, könnte man sagen.

02:35.920 --> 02:38.968
Und es ist der aktuelle Wert, den wir betrachten,

02:38.968 --> 02:42.640
der jeder Wert des Arrays ones sein wird.

02:42.640 --> 02:45.350
Und dann können Sie hier cuResult zurückgeben, was

02:45.350 --> 02:48.290
für den ersten Durchlauf der Anfangswert sein wird.

02:48.290 --> 02:51.497
Plus curValue.

02:51.497 --> 02:52.703
Und wenn Sie das tun, wird reduce overall hier eine Zahl zurückgeben.

02:53.859 --> 02:57.920
Hier können wir also insgesamt das Ergebnis von reduzierten Zahlen zurückgeben,

02:57.920 --> 03:01.160
und daher wird die Variable add, oder hier die Konstante,

03:01.160 --> 03:04.790
am Ende eine Funktion enthalten, die ein Paar von Zahlen nimmt,

03:04.790 --> 03:07.320
nicht ein Array von Zahlen.

03:07.320 --> 03:10.650
Aber wegen der restlichen Parameter, einer Liste von Zahlen,

03:10.650 --> 03:13.690
die dann innerhalb der Funktion zu einem Array zusammengeführt

03:13.690 --> 03:16.510
wird und die Zahl am Ende zurückgibt.

03:16.510 --> 03:18.550
Wenn wir nun alles speichern, sollte alles

03:18.550 --> 03:20.350
funktionieren und wir sehen das Ergebnis,

03:20.350 --> 03:23.350
die Summe unserer kleinen Addition hier.

03:23.350 --> 03:26.250
Das sind also Restparameter, eine wirklich nützliche

03:26.250 --> 03:28.430
Funktion, um eine unbegrenzte Anzahl

03:28.430 --> 03:31.400
von Argumenten zu akzeptieren.

03:31.400 --> 03:34.210
Und eine Reihe von eingebauten Methoden wie die

03:34.210 --> 03:36.680
Push-Methode funktionieren genau so.

03:36.680 --> 03:38.540
Sie sehen, Push hat diese seltsame Parameterdefinition.

03:38.540 --> 03:42.560
Nun, das ist genau das, was wir gerade erfahren haben.

03:42.560 --> 03:44.250
Push hier nimmt ein paar Elemente

03:44.250 --> 03:48.490
für dieses Array, das ein Array voller Strings ist.

03:48.490 --> 03:50.400
Es braucht ein paar Saiten.

03:50.400 --> 03:51.730
Und das bedeutet nicht, dass

03:51.730 --> 03:54.060
es ein Array von Strings nimmt, sondern hier mit

03:54.060 --> 03:56.400
den restlichen Parametern, eine durch Komma getrennte

03:56.400 --> 03:58.580
Liste von Strings, die dann in ein Array zusammengeführt

03:58.580 --> 04:01.260
und intern behandelt wird.

04:01.260 --> 04:03.100
Das ist die Restparameter-Syntax.

04:03.100 --> 04:06.276
Sie können dies übrigens auch mit Tupeln kombinieren.

04:06.276 --> 04:10.370
Wenn Sie wissen, dass Sie mehrere Argumente unterstützen wollen,

04:10.370 --> 04:15.370
aber Sie wissen, wie viele es sein werden, wenn es also keine unbegrenzte Liste

04:16.520 --> 04:18.420
ist, dann können Sie dort auch einen

04:18.420 --> 04:20.392
Tupel-Typ verwenden.

04:20.392 --> 04:23.430
Und sagen Sie zum Beispiel: "Ich akzeptiere hier meine freien Nummern. Und dann muss ich natürlich das vierte

04:23.430 --> 04:28.430
Argument hier beim Aufruf der Funktion entfernen.

04:28.460 --> 04:30.910
Denn jetzt ist mir ziemlich klar, dass ich drei Argumente erhalten

04:30.910 --> 04:32.240
möchte, die jeweils Zahlen sind.

04:32.240 --> 04:33.830
Natürlich hätten wir hier auch einfach

04:33.830 --> 04:36.980
drei eigenständige Parameter hinzufügen können, aber diese Syntax ist vielleicht

04:36.980 --> 04:39.030
doch etwas kürzer und einfacher einzurichten als

04:39.030 --> 04:40.720
die freien Parameter.

04:40.720 --> 04:43.090
Das hängt wirklich von Ihrer Anwendung und Ihren Anforderungen ab.

04:43.090 --> 04:46.919
Hier werde ich mich von dieser Einstellung entfernen und allgemeiner

04:46.919 --> 04:51.320
sein und so viele Argumente akzeptieren, wie ich bekomme, denn für diese

04:51.320 --> 04:55.210
Funktion kann ich in der Tat eine unendliche Anzahl von Argumenten

04:55.210 --> 04:57.864
verarbeiten.
