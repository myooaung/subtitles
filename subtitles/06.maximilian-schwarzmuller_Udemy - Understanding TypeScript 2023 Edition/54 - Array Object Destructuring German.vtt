WEBVTT

00:02.100 --> 00:04.870
Kursleiter: Bleiben wir bei den Arrays und Objekten.

00:04.870 --> 00:06.750
Eine weitere wichtige Syntax, die Sie

00:06.750 --> 00:09.160
in modernen JavaScript- und auch Typescript-Projekten

00:09.160 --> 00:10.440
häufig sehen werden, ist die

00:10.440 --> 00:13.133
Array- und Objektdestrukturierung.

00:14.180 --> 00:15.013
Wie funktioniert das?

00:15.013 --> 00:17.220
Beginnen wir mit unserem Array, das wir bekommen

00:17.220 --> 00:20.220
haben, dem Array hobbies, das zwei Hobbys enthält.

00:20.220 --> 00:22.200
Nehmen wir an, Sie möchten diese beiden

00:22.200 --> 00:26.340
Hobbys extrahieren und sie in Variablen oder Konstanten speichern.

00:26.340 --> 00:28.891
Natürlich können wir das mit hobby

00:28.891 --> 00:32.340
eins gleich hobbies für den Index null, der

00:32.340 --> 00:33.470
das erste Element

00:33.470 --> 00:34.820
ist, tun.

00:34.820 --> 00:38.720
Und das Gleiche vielleicht mit Hobby zwei für Hobbys auf Index eins.

00:38.720 --> 00:40.500
Dadurch werden diese beiden Elemente

00:40.500 --> 00:43.330
herausgezogen und in Konstanten gespeichert.

00:43.330 --> 00:44.720
Dafür haben wir zwei Codezeilen gebraucht,

00:44.720 --> 00:46.710
und je mehr Elemente Sie abrufen wollen, desto mehr

00:46.710 --> 00:48.493
Codezeilen brauchen wir.

00:49.340 --> 00:51.690
Die Destrukturierung von Arrays ermöglicht es uns, sie zu verkürzen.

00:51.690 --> 00:53.090
Bei der Array-Destrukturierung,

00:53.090 --> 00:56.250
die übrigens auch mit let und nicht nur mit const funktioniert, fügen Sie

00:56.250 --> 00:59.760
eckige Klammern auf der linken Seite des Gleichheitszeichens hinzu, was eine

00:59.760 --> 01:01.400
ungewöhnliche Stelle ist.

01:01.400 --> 01:02.900
Das habe ich noch nie gesehen.

01:02.900 --> 01:04.780
Auf der rechten Seite befindet sich das Array,

01:04.780 --> 01:06.480
das Sie destrukturieren möchten.

01:06.480 --> 01:08.430
Destrukturieren bedeutet nun, dass Sie

01:08.430 --> 01:10.470
Elemente aus dem Array herausziehen.

01:10.470 --> 01:13.570
Und hier auf der linken Seite zwischen diesen eckigen Klammern speichern

01:13.570 --> 01:15.040
Sie sie in Konstanten, oder wenn

01:15.040 --> 01:17.250
Sie let verwenden, in Variablen.

01:17.250 --> 01:21.170
Hier könnten wir also Hobby eins und Hobby zwei haben.

01:21.170 --> 01:23.000
Diese Syntax durchläuft das Array

01:23.000 --> 01:25.640
hobbies, nimmt das erste Element und speichert

01:25.640 --> 01:26.920
es in einer Konstante mit

01:26.920 --> 01:29.050
diesem Namen, nimmt das zweite Element

01:29.050 --> 01:30.290
und speichert es in einer

01:30.290 --> 01:32.320
Konstante mit diesem Namen.

01:32.320 --> 01:35.490
Sie können hier sogar Restparameter hinzufügen

01:35.490 --> 01:38.720
und die verbleibenden Hobbys hier haben, falls das

01:38.720 --> 01:42.130
Hobbys-Array mehr als nur zwei Elemente hat.

01:42.130 --> 01:46.260
Dann werden alle verbleibenden Elemente, die Sie nicht in Hobby eins oder Hobby

01:46.260 --> 01:48.070
zwei herausgezogen haben, in einem

01:48.070 --> 01:51.290
neuen Array namens remaining hobbies gespeichert.

01:51.290 --> 01:54.090
Sie werden also in einem neuen Array zusammengeführt.

01:54.090 --> 01:57.940
Übrigens wird durch die Destrukturierung das ursprüngliche Array nicht verändert.

01:57.940 --> 02:02.940
Wenn wir also trösten. Hobbys, Hobby eins und Hobby zwei protokollieren, werden

02:04.260 --> 02:06.840
Sie sehen, dass Hobbys immer noch das alte Feld ist.

02:06.840 --> 02:08.840
Es ist nicht leer oder so etwas.

02:08.840 --> 02:11.780
Die Werte, die wir in Anführungszeichen herausgezogen haben,

02:11.780 --> 02:14.870
werden also wirklich nur in neue Konstanten oder Variablen kopiert

02:14.870 --> 02:17.720
und nicht wirklich aus dem Array entfernt.

02:17.720 --> 02:18.980
Das ist Array-Destrukturierung.

02:18.980 --> 02:20.600
Dasselbe gilt für Objekte.

02:20.600 --> 02:21.690
Wir haben unsere Person hier.

02:21.690 --> 02:23.440
Nehmen wir nun an, wir wollen Name und

02:23.440 --> 02:26.630
Alter in eigenständigen Konstanten oder Variablen speichern.

02:26.630 --> 02:28.480
Genau wie die Array-Destrukturierung funktioniert

02:28.480 --> 02:31.840
die Objekt-Destrukturierung sowohl mit const als auch mit let.

02:31.840 --> 02:33.010
Hier werde ich mich für const entscheiden.

02:33.010 --> 02:34.930
Und jetzt können wir geschweifte Klammern auf der

02:34.930 --> 02:37.090
linken Seite des Gleichheitszeichens verwenden.

02:37.090 --> 02:38.883
Auch wenn es eine neue Syntax ist, denke ich.

02:39.920 --> 02:43.750
Und unser Objekt oder die Variable zeigt auf das Objekt auf der

02:43.750 --> 02:44.890
rechten Seite.

02:44.890 --> 02:46.110
Beachten Sie bitte, dass

02:46.110 --> 02:48.770
dies kein Objekttyp ist, den ich hier zuweise.

02:48.770 --> 02:51.200
Ich habe hier keinen Doppelpunkt.

02:51.200 --> 02:54.080
Es handelt sich eigentlich nur um geschweifte Klammern

02:54.080 --> 02:58.210
wie diese auf der linken Seite, ohne einen Doppelpunkt nach einer Konstanten.

02:58.210 --> 03:01.000
Ich weise also dem Typ des Wertes, der gespeichert werden

03:01.000 --> 03:02.720
könnte, keine Konstante zu.

03:02.720 --> 03:05.470
Ich verwende eigentlich nur eine spezielle Syntax.

03:05.470 --> 03:08.450
Denn hier können wir nun auch auf Eigenschaftsnamen

03:08.450 --> 03:11.340
verweisen, die wir in einem Objekt haben,

03:11.340 --> 03:13.920
z. B. Name und Alter, um die Werte für

03:13.920 --> 03:18.030
diese Schlüssel aus Person zu ziehen und sie in gleichnamigen

03:18.030 --> 03:21.283
Konstanten zu speichern.

03:23.290 --> 03:24.390
Hier erhalte ich nun

03:24.390 --> 03:27.820
Fehler, weil ich ganz oben bereits eine Altersvariable habe.

03:27.820 --> 03:30.890
Und name erweist sich als eine global verfügbare Variable,

03:30.890 --> 03:32.173
die ohnehin existiert.

03:33.240 --> 03:34.940
Die Umgehung wäre also, hier

03:34.940 --> 03:38.313
einfach einen anderen Schlüsselnamen zu verwenden,

03:40.240 --> 03:41.920
z. B. Vorname.

03:41.920 --> 03:45.020
Und jetzt können wir den Wert nach diesem Schlüssel hier herausziehen.

03:45.020 --> 03:46.900
So funktioniert also die Destrukturierung von Objekten.

03:46.900 --> 03:50.110
Wichtig ist hier, dass bei der Destrukturierung von Arrays die Elemente

03:50.110 --> 03:52.260
in der richtigen Reihenfolge herausgezogen

03:52.260 --> 03:55.110
werden, da ein Array eine geordnete Liste ist.

03:55.110 --> 03:58.110
In Objekten ist die Reihenfolge nicht immer garantiert, und deshalb

03:58.110 --> 04:00.720
ziehen wir die Elemente nicht nach Position, sondern nach

04:00.720 --> 04:02.070
Schlüsselnamen heraus.

04:02.070 --> 04:04.790
Die Werte bzw. die Namen, die Sie hier zwischen den geschweiften

04:04.790 --> 04:05.930
Klammern angeben, sind

04:05.930 --> 04:07.630
also nicht willkürlich.

04:07.630 --> 04:09.700
Sie können sich hier keine Namen ausdenken.

04:09.700 --> 04:13.860
Dies müssen Eigenschaftsnamen sein, die Sie im Objekt finden, damit die Werte

04:13.860 --> 04:16.010
für diese Schlüssel aus dem Objekt herausgezogen

04:16.010 --> 04:18.160
werden können. Und dann werden sie in Konstanten

04:18.160 --> 04:21.880
oder Variablen mit demselben Namen gespeichert.

04:21.880 --> 04:24.120
Wenn Sie diesen Namen überschreiben möchten, können

04:24.120 --> 04:25.970
Sie dies hier mit einem Doppelpunkt tun.

04:25.970 --> 04:28.050
Auch hier handelt es sich nicht um eine Typenzuweisung.

04:28.050 --> 04:29.680
Es wird lediglich ein neuer Name festgelegt.

04:29.680 --> 04:31.970
Das ist also alles JavaScript-Syntax und

04:31.970 --> 04:33.820
hat nichts mit Typescript zu tun.

04:33.820 --> 04:35.370
Hier könnten wir dies zum

04:35.370 --> 04:38.750
Beispiel in einer Konstante userName speichern.

04:38.750 --> 04:39.840
Und deshalb können

04:39.840 --> 04:44.040
wir danach trösten. Benutzernamen und Alter protokollieren,

04:44.040 --> 04:45.290
aber nicht den Vornamen,

04:45.290 --> 04:47.870
weil er den Vornamen in der Konstante, die wir erstellen,

04:47.870 --> 04:52.790
wenn wir hier Werte herausziehen, als Benutzernamen überschreibt.

04:52.790 --> 04:55.880
Das Alter wird nicht überschrieben, also können wir es auch so verwenden.

04:55.880 --> 04:58.183
Auch hier handelt es sich nicht um eine Typenzuweisung.

04:58.183 --> 05:00.210
Dies ist JavaScript-Syntax,

05:00.210 --> 05:03.680
wo wir alias umbenennen eine Eigenschaft, die wir

05:03.680 --> 05:05.500
aus der Person ziehen.

05:05.500 --> 05:07.430
Außerdem hat sich das Personenobjekt selbst

05:07.430 --> 05:09.840
nicht verändert, genau wie zuvor das Array.

05:09.840 --> 05:13.380
Wir kopieren diese Werte einfach aus dem Objekt.

05:13.380 --> 05:15.643
Und deshalb erhalten wir diese Ausgabe hier.
