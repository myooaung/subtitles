WEBVTT

00:02.090 --> 00:04.730
Istruttore: Ora, prima di immergerci in qualsiasi funzione, in allegato

00:04.730 --> 00:07.002
a questa lezione troverete un link a questa pagina.

00:07.002 --> 00:11.350
Questa pagina elenca sostanzialmente tutte le caratteristiche

00:11.350 --> 00:13.610
più o meno moderne di JavaScript,

00:13.610 --> 00:16.770
quali browser le supportano e quali compilatori

00:16.770 --> 00:19.700
le supportano.

00:19.700 --> 00:23.150
E qui si trova anche TypeScript, TypeScript combinato

00:23.150 --> 00:25.310
con core-js, che è un fornitore

00:25.310 --> 00:27.210
di polyfill.

00:27.210 --> 00:28.820
Ma in generale questo descrive

00:28.820 --> 00:32.070
ciò che TypeScript è in grado di compilare.

00:32.070 --> 00:34.110
Si può sempre usare questa risorsa se si sta

00:34.110 --> 00:35.990
cercando una caratteristica specifica,

00:35.990 --> 00:37.960
come, ad esempio, la parola chiave const,

00:37.960 --> 00:40.860
dove si vuole sapere se TypeScript funziona o meno.

00:40.860 --> 00:43.340
Poi si può vedere come funziona e quali sono

00:43.340 --> 00:46.580
le restrizioni, quali sono i browser che lo supportano.

00:46.580 --> 00:48.250
Questo, tra l'altro, fornisce

00:48.250 --> 00:51.090
anche un suggerimento su quali browser si desidera

00:51.090 --> 00:53.967
puntare, sul target di TypeScript e così via.

00:53.967 --> 00:55.260
Si tratta quindi di un'ottima

00:55.260 --> 00:58.600
risorsa che consente di passare da un'iterazione all'altra di JavaScript e

00:58.600 --> 01:01.940
di conoscere le caratteristiche introdotte da ciascuna iterazione e il modo

01:01.940 --> 01:04.220
in cui queste caratteristiche sono supportate.

01:04.220 --> 01:06.140
Quindi, utilizzate sicuramente questa risorsa

01:06.140 --> 01:08.800
per scoprire cosa potete usare, cosa potete compilare e quali

01:08.800 --> 01:11.060
obiettivi potreste dover fissare.

01:11.060 --> 01:14.060
E con ciò, iniziamo con una delle introduzioni più

01:14.060 --> 01:17.030
importanti, ovvie e spesso utilizzate: l'aggiunta

01:17.030 --> 01:19.260
di Next-Gen JavaScript.

01:19.260 --> 01:21.780
A proposito, con Next-Gen JavaScript

01:21.780 --> 01:24.700
intendo ES6 o più recente.

01:24.700 --> 01:27.860
Ed è proprio di questo che sto parlando.

01:27.860 --> 01:32.750
Permette di definire costanti o variabili.

01:32.750 --> 01:35.350
La differenza è che le costanti, quindi le variabili

01:35.350 --> 01:39.910
definite con la parola chiave const, non possono essere modificate.

01:39.910 --> 01:42.410
Se si cerca di assegnare un nuovo valore qui,

01:42.410 --> 01:44.270
anche se ha il tipo corretto, si otterrà

01:44.270 --> 01:47.220
un errore perché si tratta di una costante.

01:47.220 --> 01:48.280
Si tratta di un errore

01:48.280 --> 01:50.200
formato da TypeScript.

01:50.200 --> 01:53.340
In Vanilla JavaScript, si otterrebbe un errore da parte del browser quando

01:53.340 --> 01:55.100
si esegue il codice, e questa è l'idea alla

01:55.100 --> 01:57.280
base di TypeScript, come avete appreso, di ottenere

01:57.280 --> 02:00.410
un errore già durante la scrittura del codice, perché questo, ovviamente,

02:00.410 --> 02:02.990
è meglio per noi come sviluppatori.

02:02.990 --> 02:04.930
Ci permette di correggere il

02:04.930 --> 02:07.820
codice prima di testarlo nella console.

02:07.820 --> 02:11.330
Quindi, se rimuoviamo o commentiamo questa riga, il

02:11.330 --> 02:12.830
programma si ricompila

02:12.830 --> 02:14.400
e, di conseguenza, non si

02:14.400 --> 02:17.130
ottiene alcun errore nel browser.

02:17.130 --> 02:20.860
Quindi, questo è il costo della vita. Let è una variabile che può essere

02:20.860 --> 02:23.620
modificata e quindi, ovviamente, è simile a var.

02:23.620 --> 02:27.260
Il Var esiste ancora anche perché JavaScript funziona in modo tale che le

02:27.260 --> 02:29.550
funzioni non vengano tolte all'improvviso,

02:29.550 --> 02:33.460
perché in tal caso i browser più vecchi e i loro script potrebbero rompersi.

02:33.460 --> 02:35.160
Ma non si dovrebbe più usare var.

02:35.160 --> 02:37.860
E perché non si dovrebbe più usare il var?

02:37.860 --> 02:39.670
Ha senso avere const, perché aggiunge

02:39.670 --> 02:42.520
una nuova funzionalità, le costanti.

02:42.520 --> 02:43.380
Ma perché permetterlo?

02:43.380 --> 02:45.380
Perché hanno introdotto una nuova parola chiave?

02:45.380 --> 02:47.223
Perché non si sono attenuti alla var?

02:48.280 --> 02:51.460
Let e const presentano un'importante differenza rispetto a var.

02:51.460 --> 02:53.300
La differenza ovvia per const è che il

02:53.300 --> 02:55.240
valore non può essere modificato, ma anche

02:55.240 --> 02:57.040
per let c'è una differenza.

02:57.040 --> 03:00.930
E questo è l'ambito in cui questa variabile è disponibile.

03:00.930 --> 03:04.363
Ora è necessario conoscere il concetto di scope in JavaScript.

03:05.609 --> 03:09.260
E con var, si ha un ambito globale e uno funzionale.

03:09.260 --> 03:10.700
Ciò significa che le variabili

03:10.700 --> 03:12.550
definite al di fuori delle funzioni

03:12.550 --> 03:15.340
sono disponibili ovunque nei vostri script.

03:15.340 --> 03:17.410
Le variabili definite all'interno delle funzioni

03:17.410 --> 03:19.370
sono disponibili solo in quella funzione.

03:19.370 --> 03:22.610
Ad esempio, qui. Se avessi una funzione

03:22.610 --> 03:27.610
add e potessi ottenere due numeri, a e b.

03:27.670 --> 03:29.750
Poi possiamo aggiungere una variabile

03:29.750 --> 03:32.280
con var result, diciamo, e impostiamo result

03:32.280 --> 03:34.730
= a + b e poi restituiamo result; naturalmente,

03:34.730 --> 03:36.230
avremmo potuto scriverlo

03:36.230 --> 03:38.430
in modo più breve, ma voglio mostrare

03:38.430 --> 03:40.570
cosa fa var.

03:40.570 --> 03:41.860
E questo andrebbe bene.

03:41.860 --> 03:43.012
E il risultato sarebbe disponibile solo

03:43.012 --> 03:44.188
all'interno di questa funzione.

03:44.188 --> 03:47.723
Se provassi a registrare i risultati della console qui, fallirebbe

03:47.723 --> 03:49.470
perché è disponibile solo nell'ambito

03:49.470 --> 03:52.190
di questa funzione.

03:52.190 --> 03:53.970
Se lo definisco al di fuori di var harbor,

03:53.970 --> 03:56.610
tutto funziona perché ora è disponibile a livello globale,

03:56.610 --> 03:58.180
quindi qui posso accedervi.

03:58.180 --> 04:00.220
Inoltre, per come funziona JavaScript,

04:00.220 --> 04:03.580
è possibile accedere alle variabili a un livello superiore.

04:03.580 --> 04:05.210
Quindi, all'interno di una funzione

04:05.210 --> 04:08.260
si può lavorare con le variabili che hanno un ambito di questa funzione,

04:08.260 --> 04:11.100
ma tutte le variabili hanno un ambito superiore, come l'ambito

04:11.100 --> 04:12.563
globale.

04:13.580 --> 04:14.980
Quindi, questo è var.

04:14.980 --> 04:19.180
Ora per let, il comportamento è generalmente lo stesso.

04:19.180 --> 04:21.580
Questo funziona e questo funziona.

04:21.580 --> 04:23.800
Quindi in generale è lo stesso per let.

04:23.800 --> 04:27.180
Ma una differenza importante è che per var si ha

04:27.180 --> 04:30.860
solo l'ambito globale e quello delle funzioni.

04:30.860 --> 04:32.460
E le dichiarazioni if?

04:32.460 --> 04:36.720
Se qui controlliamo l'età > 20 e poi qui creiamo una

04:36.720 --> 04:38.889
variabile, isOld, e la impostiamo

04:38.889 --> 04:41.190
a true, se una console registra

04:41.190 --> 04:44.500
isOld qui otteniamo un errore in TypeScript,

04:44.500 --> 04:46.270
ma in realtà non lo otterremmo

04:46.270 --> 04:50.090
in JavaScript.

04:50.090 --> 04:53.620
Se si prende questo codice, per vedere se funziona, e lo si sposta

04:53.620 --> 04:56.280
negli strumenti di sviluppo JavaScript nella

04:56.280 --> 04:57.190
console, lo si incolla

04:57.190 --> 04:59.120
e si preme invio, si vede che qui viene

04:59.120 --> 05:00.970
stampato true.

05:01.830 --> 05:02.960
Infatti, se si prova

05:02.960 --> 05:05.040
ad accedere a isOld, si ottiene true.

05:05.040 --> 05:08.380
Quindi, questa variabile isOld viene registrata globalmente e non

05:08.380 --> 05:10.530
solo all'interno dell'istruzione if.

05:10.530 --> 05:11.700
Perché con var, JavaScript

05:11.700 --> 05:13.080
non conosce altri ambiti

05:13.080 --> 05:15.860
oltre alle funzioni e al globale.

05:15.860 --> 05:17.400
E questo cambia con il let.

05:17.400 --> 05:19.690
Ora, come ho detto, TypeScript si lamenta comunque, perché

05:19.690 --> 05:21.600
questo non è un buon codice da scrivere, ma tecnicamente

05:21.600 --> 05:23.170
funzionerebbe.

05:23.170 --> 05:25.100
Con let, le cose cambiano.

05:25.100 --> 05:26.350
Ora, con let, questo è

05:26.350 --> 05:29.880
disponibile solo all'interno di queste parentesi graffe.

05:29.880 --> 05:32.300
Perché let e const hanno introdotto un nuovo concetto,

05:32.300 --> 05:33.540
chiamato block scope, che

05:33.540 --> 05:36.550
significa che una variabile o una costante è sempre disponibile

05:36.550 --> 05:40.420
nel blocco in cui viene definita o in qualsiasi altro blocco inferiore.

05:40.420 --> 05:43.060
Un blocco è sempre uno snippet circondato

05:43.060 --> 05:44.900
da parentesi graffe, come in

05:44.900 --> 05:46.710
un'istruzione if, in un ciclo

05:46.710 --> 05:48.760
for, in una funzione o anche, è possibile,

05:48.760 --> 05:50.590
se si aggiungono parentesi graffe

05:50.590 --> 05:52.670
come questa.

05:52.670 --> 05:54.230
Qualsiasi variabile definita

05:54.230 --> 05:56.760
qui sarà disponibile solo in quel blocco.

05:56.760 --> 05:57.700
E questo è un bene,

05:57.700 --> 06:00.000
perché costringe a scrivere codice più pulito

06:00.000 --> 06:02.470
e a evitare situazioni come questa.

06:02.470 --> 06:03.640
Per dimostrare che c'è

06:03.640 --> 06:05.530
una differenza nel browser, se copio

06:05.530 --> 06:09.750
questo codice usando let, ricarico la pagina e lo inserisco qui, si ottiene

06:09.750 --> 06:14.706
un errore: isOld non è definito.

06:14.706 --> 06:14.706
Non abbiamo mai avuto un errore prima.

06:14.706 --> 06:19.706
In effetti, se provo a emettere isOld, ottengo di nuovo questo errore.

06:20.070 --> 06:21.060
Questa è la differenza.

06:21.060 --> 06:23.370
Pertanto, let e const sono migliori, non solo

06:23.370 --> 06:25.740
perché si ottiene questa caratteristica costante,

06:25.740 --> 06:29.150
ma anche perché si è costretti a scrivere codice più pulito.

06:29.150 --> 06:30.130
Lasciate quindi che lo commenti

06:30.130 --> 06:31.230
per farlo funzionare di nuovo.
