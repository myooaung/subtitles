WEBVTT

00:02.440 --> 00:04.260
-: Antes de mergulharmos em mais

00:04.260 --> 00:05.433
exemplos, vamos entender

00:05.433 --> 00:07.940
a ordem na qual os decoradores correm.

00:07.940 --> 00:10.530
E aqui, é importante entender que, antes

00:10.530 --> 00:11.950
de tudo, todos eles estão

00:11.950 --> 00:13.710
correndo sem que nós instanciemos

00:13.710 --> 00:15.396
este produto.

00:15.396 --> 00:16.600
Ou, em outras palavras,

00:16.600 --> 00:18.300
se eu criar um produto

00:18.300 --> 00:19.670
aqui com, novo produto,

00:19.670 --> 00:21.233
livro, por $19, e eu

00:21.233 --> 00:24.563
criar outro produto aqui, livro dois por,

00:24.563 --> 00:26.660
$29.

00:26.660 --> 00:27.887
isto foi cumprido sem erros

00:27.887 --> 00:29.970
do meu código de decorador aqui não é executado

00:29.970 --> 00:31.730
com mais freqüência.

00:31.730 --> 00:35.350
Portanto, não é o instantismo desta classe que importa.

00:35.350 --> 00:36.680
Todos estes decoradores,

00:36.680 --> 00:38.452
não importa se foi um decorador de

00:38.452 --> 00:41.810
propriedade, um decorador de método, um decorador de acessórios

00:41.810 --> 00:43.620
ou um decorador de parâmetros, todos

00:43.620 --> 00:46.770
eles foram executados quando você definiu esta classe, e isso

00:46.770 --> 00:48.930
é importante de entender.

00:48.930 --> 00:50.960
Estes não são decoradores que funcionam em tempo

00:50.960 --> 00:53.190
de funcionamento quando você os chama de método ou

00:53.190 --> 00:55.100
quando você trabalha com um imóvel.

00:55.100 --> 00:57.190
Isto não é o que eles fazem.

00:57.190 --> 00:59.360
Em vez disso, estes decoradores permitem

00:59.360 --> 01:01.875
que você faça trabalhos adicionais nos bastidores

01:01.875 --> 01:04.397
quando uma classe é definida.

01:04.397 --> 01:06.590
Voltando àquele conceito de metaprogramação que expliquei

01:06.590 --> 01:08.070
anteriormente, certo.

01:08.070 --> 01:10.200
Essa é a idéia por trás dos decoradores

01:10.200 --> 01:12.410
ou esse é seu principal caso de uso.

01:12.410 --> 01:15.520
Eles não são ouvintes de eventos que você acrescenta a algo para que quando

01:15.520 --> 01:17.100
você trabalha com um imóvel você possa

01:17.100 --> 01:18.490
executar algum código.

01:18.490 --> 01:19.740
Você pode fazer algo

01:19.740 --> 01:21.069
assim funcionar com decoradores

01:21.069 --> 01:23.740
na verdade, mas ajustando e editando algo

01:23.740 --> 01:24.977
nos bastidores, mas

01:24.977 --> 01:26.756
o decorador em si é realmente

01:26.756 --> 01:29.710
apenas uma função que executa quando sua classe

01:29.710 --> 01:33.233
é definida, quando sua (murmura) e você pode então usar

01:33.233 --> 01:35.010
o decorador para fazer algum

01:35.010 --> 01:37.460
trabalho nos bastidores, para então configurar

01:37.460 --> 01:43.660
algum código que deve ser executado sempre que isto for chamado.

01:43.660 --> 01:47.310
Para adicionar meta dados extras ou armazenar alguns dados sobre um

01:47.310 --> 01:50.030
imóvel em outro lugar em seu projeto ou em sua biblioteca,

01:50.030 --> 01:51.696
que você está criando.

01:51.696 --> 01:54.075
É para isto que você pode usar os decoradores,

01:54.075 --> 01:55.756
e é todo o padrão que você verá

01:55.756 --> 01:58.420
quando eu agora lhe mostrar estes exemplos

01:58.420 --> 02:00.320
do que você poderia construir

02:00.320 --> 02:02.290
com decoradores.

02:02.290 --> 02:04.740
Eles estão acrescentando funcionalidades

02:04.740 --> 02:06.200
extras nos bastidores que,

02:06.200 --> 02:08.060
às vezes, podem ser executadas quando

02:08.060 --> 02:10.530
você faz algo com sua classe ou com seu método,

02:10.530 --> 02:11.600
mas que também podem

02:11.600 --> 02:12.740
fazer coisas totalmente

02:12.740 --> 02:14.313
diferentes.

02:15.240 --> 02:17.860
Tudo isso é importante para nosso exemplo

02:17.860 --> 02:21.320
pessoal de antes com o decorador de modelos.

02:21.320 --> 02:22.980
Isto não acrescenta este modelo

02:22.980 --> 02:25.160
sempre que instanciamos uma pessoa aqui.

02:25.160 --> 02:27.890
Ele o acrescenta sempre que definimos esta classe.

02:27.890 --> 02:29.820
Teríamos de acrescentar lógica extra dentro

02:29.820 --> 02:31.650
de nossa função de decorador para mudar

02:31.650 --> 02:33.140
este comportamento.

02:33.140 --> 02:35.980
E talvez apenas para armazenar este modelo

02:35.980 --> 02:38.441
em alguma outra estrutura de dados de

02:38.441 --> 02:41.380
nosso projeto, na qual nós tabulamos sempre

02:41.380 --> 02:43.650
que criamos uma nova pessoa aqui.

02:43.650 --> 02:45.278
Então, basicamente, nós apenas configuramos

02:45.278 --> 02:47.240
isto quando definimos a classe, mas depois

02:47.240 --> 02:48.400
armazenamo-la internamente

02:48.400 --> 02:49.890
nos bastidores e podemos então usá-la

02:49.890 --> 02:52.350
quando quisermos usá-la.

02:52.350 --> 02:54.160
Neste momento, sempre fazemos isto quando

02:54.160 --> 02:55.380
definimos esta classe, não

02:55.380 --> 02:57.610
quando você cria uma nova instância.

02:57.610 --> 02:59.570
É assim que os decoradores executam

02:59.570 --> 03:00.403
e, como eu disse,

03:00.403 --> 03:01.940
agora vou lhes mostrar alguns

03:01.940 --> 03:04.504
exemplos onde aproveitamos os decoradores em

03:04.504 --> 03:06.900
geral e seu tempo de execução para fazer algumas

03:06.900 --> 03:08.883
coisas boas com eles.
