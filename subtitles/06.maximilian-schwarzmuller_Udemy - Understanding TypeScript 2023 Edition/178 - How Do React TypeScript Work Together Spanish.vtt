WEBVTT

00:02.130 --> 00:03.970
Instructor: En primer lugar, podemos iniciar

00:03.970 --> 00:06.480
nuestro servidor de desarrollo aquí con npm start, y esto un

00:06.480 --> 00:08.440
proceso que debemos mantener en ejecución porque

00:08.440 --> 00:10.940
esto va a ver nuestros archivos para los cambios.

00:10.940 --> 00:13.270
Y si algo cambia, por lo que si guarda un

00:13.270 --> 00:15.620
cambio específicamente, recompilará

00:15.620 --> 00:17.776
los tipos de códigos a JavaScript, recompilará

00:17.776 --> 00:20.090
JSX a JavaScript, y al final, entonces

00:20.090 --> 00:22.500
te construirá tu aplicación react y la servirá

00:22.500 --> 00:27.630
en el host local 3000, donde, por el momento, no se ve mucho.

00:27.630 --> 00:29.430
Usted sólo puede ver aquí en la consola Dev

00:29.430 --> 00:31.800
que parece funcionar debido a que la salida aquí.

00:31.800 --> 00:32.900
No se ve mucho, por supuesto,

00:32.900 --> 00:34.340
porque no estamos renderizando

00:34.340 --> 00:36.700
nada aquí en App. tsx en este momento.

00:36.700 --> 00:38.170
Eso, por supuesto, cambiará.

00:38.170 --> 00:39.420
Y con eso en marcha,

00:39.420 --> 00:41.130
escribamos ahora algo de código

00:41.130 --> 00:43.580
o analicemos lo que tenemos.

00:43.580 --> 00:46.750
En el índice. tsx no tenemos nada especial, ¿verdad?

00:46.750 --> 00:49.060
Este es un código JavaScript normal.

00:49.060 --> 00:52.950
En App. tsx, vemos esta asignación de tipo

00:52.950 --> 00:55.250
sin embargo y allí, lo que podemos ver

00:55.250 --> 00:57.980
es que asignamos este tipo extraño a App.

00:57.980 --> 01:00.270
Ahora, si ignoramos ese tipo por un segundo,

01:00.270 --> 01:02.480
¿qué se almacena realmente en App?

01:02.480 --> 01:04.840
Bueno, una función, una función de flecha, pero que

01:04.840 --> 01:07.290
sigue siendo una función regular, por lo tanto.

01:07.290 --> 01:09.960
¿Por qué este tipo de aquí no funciona o por qué no es

01:09.960 --> 01:12.570
uno de los tipos de función que hemos aprendido?

01:12.570 --> 01:14.030
Bueno, está bajo el capó, pero

01:14.030 --> 01:16.450
este es un tipo proporcionado por react, y ahora,

01:16.450 --> 01:18.100
importante por supuesto proporcionado

01:18.100 --> 01:21.070
por el paquete react types.

01:21.070 --> 01:26.070
Si entras en los módulos de nodos vemos la carpeta @types aquí y allí, vemos

01:26.390 --> 01:28.470
un montón de tipos, y también vemos

01:28.470 --> 01:30.670
los tipos de react aquí, todos los

01:30.670 --> 01:32.600
tipos de react-dom.

01:32.600 --> 01:35.840
Y al final, este tipo se importa implícitamente de forma automática

01:35.840 --> 01:39.340
desde la carpeta de tipos de reactores, se podría decir.

01:39.340 --> 01:40.870
Ahora bien, ¿qué es este tipo?

01:40.870 --> 01:44.490
FC significa simplemente componente de la función.

01:44.490 --> 01:46.310
También hay una forma más larga de esto, que

01:46.310 --> 01:47.570
podría utilizar en su lugar.

01:47.570 --> 01:49.240
Es exactamente el mismo tipo.

01:49.240 --> 01:51.090
El otro es solo un atajo y este

01:51.090 --> 01:54.300
simplemente define que lo que almacenamos aquí en

01:54.300 --> 01:57.750
App tiene que ser función, pero una función que califique

01:57.750 --> 02:00.550
como componente de función en react.

02:00.550 --> 02:02.840
También puedes escribir componentes basados en

02:02.840 --> 02:05.760
clases, y por lo tanto, tienes un componente clásico aquí también

02:05.760 --> 02:07.420
y entonces, tendrías que almacenar

02:07.420 --> 02:09.480
una clase allí en lugar de una función, pero

02:09.480 --> 02:12.720
vamos a ir con componentes de función aquí en este curso.

02:12.720 --> 02:14.670
Ahora, este es un componente de función

02:14.670 --> 02:17.620
porque es una función que devuelve JSX y así es como

02:17.620 --> 02:20.850
se crea un componente de función en react.

02:20.850 --> 02:24.180
Si yo fuera a quitar esta declaración de retorno temporalmente, por

02:24.180 --> 02:26.730
lo tanto podría obtener un error aquí, todo si traté

02:26.730 --> 02:28.800
de guardar esto y quiere compilarlo.

02:28.800 --> 02:32.440
Obtendríamos un error porque ahora, le decimos a TypeScript que aquí,

02:32.440 --> 02:34.960
queremos almacenar un componente de función,

02:34.960 --> 02:38.520
y todo lo que almacenamos es una función normal, no una función que

02:38.520 --> 02:40.770
devuelva JSX o cualquier otra cosa que califique

02:40.770 --> 02:42.800
como un elemento react.

02:42.800 --> 02:44.440
Y por lo tanto, esto no sería válido y

02:44.440 --> 02:45.810
tendríamos que arreglarlo.

02:45.810 --> 02:48.530
Así que aquí ya podemos ver cómo TypeScript mejora

02:48.530 --> 02:50.360
un poco nuestro proyecto.

02:50.360 --> 02:52.500
Nos da una seguridad de tipo adicional y se

02:52.500 --> 02:55.420
asegura de que no podemos correr en una situación en la que,

02:55.420 --> 02:58.353
por ejemplo, construimos un componente no válido.

02:59.200 --> 03:03.230
Nota al margen, si le parece poco realista que se olvide de esta sentencia

03:03.230 --> 03:05.370
return, considere que está construyendo

03:05.370 --> 03:07.970
un componente más grande con múltiples sentencias

03:07.970 --> 03:11.070
if y diferentes sentencias return.

03:11.070 --> 03:14.370
Puede que te olvides de una rama de tu sentencia if y entonces TypeScript

03:14.370 --> 03:17.010
puede definitivamente salvar tu trasero y darte esa

03:17.010 --> 03:19.130
advertencia un poco antes, que durante el

03:19.130 --> 03:21.500
tiempo de ejecución, donde de otra manera podría

03:21.500 --> 03:23.710
fallar en algunas situaciones.

03:23.710 --> 03:25.620
Así que esto es TypeScript haciendo

03:25.620 --> 03:27.740
algo, pero con eso, basta de hablar.

03:27.740 --> 03:28.690
Vamos a construir algo

03:28.690 --> 03:31.670
y quiero construir una aplicación relativamente simple aquí, una

03:31.670 --> 03:34.590
aplicación de tareas, bastante clásica, pero una aplicación de

03:34.590 --> 03:36.370
tareas que nos permite por lo tanto practicar

03:36.370 --> 03:39.480
algunos conceptos básicos de react con TypeScript.

03:39.480 --> 03:41.270
Y por lo tanto, en las próximas conferencias,

03:41.270 --> 03:44.363
vamos a empezar nuestros primeros componentes personalizados.
