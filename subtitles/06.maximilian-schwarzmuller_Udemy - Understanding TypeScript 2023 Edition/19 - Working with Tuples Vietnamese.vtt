WEBVTT

00:02.460 --> 00:05.590
-: Vì vậy, mảng được hỗ trợ và có số, chuỗi, booleons,

00:05.590 --> 00:07.620
đối tượng và mảng.

00:07.620 --> 00:11.400
Chúng tôi có các giá trị cốt lõi hoặc các loại giá trị, JavaScript nos

00:11.400 --> 00:15.100
được hỗ trợ trong TypeScript, như bạn sẽ tìm hiểu ở ví dụ về các đối tượng

00:15.100 --> 00:17.884
trong mảng của chúng, TypeScript thậm chí còn cung

00:17.884 --> 00:21.520
cấp nhiều chức năng hơn nhưng nó nâng cao hơn một chút, đó là lý do tại

00:21.520 --> 00:22.720
sao chúng tôi sẽ có hãy

00:22.720 --> 00:24.940
xem xét điều đó sau, nhưng ngay cả những loại

00:24.940 --> 00:26.810
cốt lõi này với những gì bạn sẽ học trong

00:26.810 --> 00:30.140
các bài giảng trước cũng được hỗ trợ.

00:30.140 --> 00:33.540
Bây giờ TypeScript nắm giữ như một vài khái niệm

00:33.540 --> 00:37.840
mới, kiểu mới, mà chúng ta không biết từ tập lệnh Java gốc,

00:37.840 --> 00:40.300
chẳng hạn như kiểu tuple.

00:40.300 --> 00:44.360
Bây giờ bạn có thể biết các bộ dữ liệu từ các ngôn ngữ lập trình khác,

00:44.360 --> 00:46.570
JavaScript không có chúng.

00:46.570 --> 00:49.570
Đây là một bộ dữ liệu chẳng hạn, và bạn sẽ nói,

00:49.570 --> 00:52.290
đây là một mảng. Nó là một mảng, nhưng

00:52.290 --> 00:54.520
nó là một mảng có độ dài cố định và

00:54.520 --> 00:58.650
thực tế không chỉ có độ dài cố định mà còn có loại cố định.

00:58.650 --> 01:00.730
Và điều này có thể hữu ích ở đâu?

01:00.730 --> 01:03.350
Giả sử ở đây, cá nhân của chúng

01:03.350 --> 01:07.830
ta, chúng ta thực sự có một số thuộc tính, vai trò, là

01:07.830 --> 01:11.160
một mảng có chính xác hai phần tử, trong

01:11.160 --> 01:14.184
đó phần tử đầu tiên là một định danh

01:14.184 --> 01:18.547
số như two và phần tử thứ hai là một chuỗi định danh

01:18.547 --> 01:22.765
và một con người. đọc được mô tả như tác giả.

01:22.765 --> 01:26.496
Bây giờ, điều này phải luôn có chính xác hai phần tử vì người dùng

01:26.496 --> 01:30.100
hoặc một người trong ứng dụng mà chúng tôi đang viết này, giả

01:30.100 --> 01:32.720
sử chỉ có thể có một vai trò và một vai trò chỉ

01:32.720 --> 01:35.185
được tạo thành từ hai phần tử.

01:35.185 --> 01:37.400
Tất nhiên chúng ta có thể sử dụng một quang

01:37.400 --> 01:39.090
ở đây, nhưng vì lý do nào đó, chúng

01:39.090 --> 01:41.744
ta muốn có một mảng có chính xác hai phần tử trong

01:41.744 --> 01:43.118
đó phần tử đầu tiên luôn

01:43.118 --> 01:47.570
là mã định danh số và phần tử thứ hai luôn là mã định danh hoặc mô tả chuỗi hoặc

01:47.570 --> 01:50.220
bất kỳ cách nào bạn muốn gọi nó.

01:50.220 --> 01:52.420
Bây giờ, nếu chúng ta di chuột qua TypeScript

01:52.420 --> 01:55.730
này thực sự suy ra kiểu lạ này mà chúng ta chưa từng thấy trước đây. Trên

01:55.730 --> 01:58.550
thực tế, nếu chúng ta dis nghĩa là TypeScript hiểu rằng chúng

01:58.550 --> 02:01.250
ta có một mảng có thể chứa các chuỗi hoặc số chẵn, đây là

02:01.250 --> 02:03.440
một kiểu kết hợp và chúng ta' Tôi sẽ đi sâu vào

02:03.440 --> 02:06.710
những điều đó sau. Điểm mấu chốt là TypeScript

02:06.710 --> 02:09.950
hiểu rằng đây phải là một mảng với các loại

02:09.950 --> 02:11.668
giá trị này.

02:11.668 --> 02:14.580
Nhược điểm đã chết Chúng tôi có thể chạy

02:14.580 --> 02:18.780
mã này, vai trò người dùng, đẩy, quản trị viên.

02:18.780 --> 02:20.250
Bây giờ đối với ứng dụng của chúng

02:20.250 --> 02:21.970
tôi, điều này có thể không hợp lý vì chúng

02:21.970 --> 02:23.960
tôi biết rằng chúng tôi chỉ cần hai yếu tố.

02:23.960 --> 02:25.790
TypeScript vẫn không biết rằng chúng

02:25.790 --> 02:28.963
tôi chỉ muốn có hai phần tử. Chúng tôi cũng có thể

02:28.963 --> 02:33.283
chuyển đổi vai trò của người, phần tử thứ hai có chỉ số một

02:33.283 --> 02:35.200
cũng thành một số.

02:35.200 --> 02:38.010
Điều này sẽ hiệu quả vì TypeScript chỉ biết rằng

02:38.010 --> 02:42.360
vai trò đó phải thuộc kiểu chuỗi hoặc mảng số, và do đó, việc gán một số

02:42.360 --> 02:44.700
ở đây cho phần tử thứ hai và do đó thay thế

02:44.700 --> 02:46.870
nó bằng một số sẽ được cho phép vì chúng

02:46.870 --> 02:48.680
ta chỉ đang nói điều gì đó về các

02:48.680 --> 02:50.886
loại mà chúng ta thường có thể sử dụng

02:50.886 --> 02:52.580
trong đó.

02:52.580 --> 02:55.040
Chúng tôi biết chúng tôi muốn có chính xác cấu trúc đó.

02:55.040 --> 02:58.094
Hai phần tử, số phần tử đầu tiên, chuỗi phần tử thứ hai, nhưng

02:58.094 --> 03:01.770
TypeScript không làm điều đó. Đối với một kịch bản như vậy,

03:01.770 --> 03:05.865
một tuple sẽ là hoàn hảo. Chúng ta có thể cho TypeScript

03:05.865 --> 03:10.865
biết vai trò nào sẽ là gì, bằng cách đặt rõ ràng loại vai trò.

03:11.010 --> 03:13.230
Vì vậy, ở đây chúng tôi cũng có một ví dụ

03:13.230 --> 03:16.600
trong đó TypeScript không tạo kiểu ảnh, nhưng rõ ràng chúng

03:16.600 --> 03:19.927
tôi muốn ghi đè lên nó. Do đó, bây giờ ở đây chúng ta

03:19.927 --> 03:23.041
có thể thêm một loại đối tượng rõ ràng bằng cách thêm

03:23.041 --> 03:27.023
dấu hai chấm sau người, sau đó dấu ngoặc nhọn và sau đó tên phải là

03:27.023 --> 03:31.180
một chuỗi, tuổi phải là một số và sở thích phải là một mảng chuỗi.

03:31.180 --> 03:33.740
Vì vậy, tất cả như được suy ra bởi TypeScript.

03:33.740 --> 03:35.401
Vì vậy, chúng tôi sẽ không yêu

03:35.401 --> 03:36.827
cầu, nhiệm vụ rõ ràng này

03:36.827 --> 03:38.789
và như bạn biết, nó sẽ rất tệ.

03:38.789 --> 03:40.470
Nhưng bây giờ chúng tôi có một

03:40.470 --> 03:43.565
kịch bản, trong đó suy luận không hoạt động theo cách

03:43.565 --> 03:47.510
chúng tôi muốn và chúng tôi muốn đặt vai trò thành một bộ.

03:47.510 --> 03:49.730
Bây giờ thay vì thiết lập một mảng hai chuỗi hoặc

03:49.730 --> 03:51.660
mảng số hoặc sử dụng cùng loại không phải

03:51.660 --> 03:55.180
là thứ ba ở đây trước đó, giờ đây chúng ta có thể sử dụng một loại đặc biệt.

03:55.180 --> 03:56.810
Chúng tôi sử dụng lại dấu ngoặc

03:56.810 --> 04:01.710
vuông, nhưng bây giờ bên trong dấu ngoặc vuông, chúng tôi thêm số, sau đó là dấu

04:01.710 --> 04:03.637
phẩy và sau đó là chuỗi.

04:03.637 --> 04:07.340
Bây giờ điều này đánh dấu một loại tuple ở đây.

04:07.340 --> 04:10.729
Một tuple là một cấu trúc đặc biệt, TypeScript hiểu được, trong

04:10.729 --> 04:13.310
Java scripted sẽ là một mảng bình thường, nhưng

04:13.310 --> 04:15.750
trong quá trình phát triển với TypeScript, chúng

04:15.750 --> 04:18.190
ta sẽ gặp lỗi với mã như thế này ở đây.

04:18.190 --> 04:20.313
Bây giờ bộ dữ liệu làm gì?

04:21.620 --> 04:23.564
Điều này ở đây, cho TypeScript biết,

04:23.564 --> 04:27.195
tôi muốn có một mảng đặc biệt, với chính xác hai phần tử, bởi

04:27.195 --> 04:30.160
vì tôi có chính xác hai loại trong đó và phần tử đầu

04:30.160 --> 04:32.020
tiên phải là một số.

04:32.020 --> 04:35.436
Phần tử thứ hai phải là một chuỗi, do đó, nếu chúng

04:35.436 --> 04:39.033
ta biên dịch mã này ở đây, tôi sẽ gặp lỗi liên quan

04:40.663 --> 04:45.000
đến việc 10 không thể gán được dưới dạng một loại ở đây, vì chúng

04:45.000 --> 04:48.346
ta muốn có một chuỗi làm giá trị thứ hai và nếu sau

04:48.346 --> 04:50.822
đó tôi gán 10 làm giá trị thứ hai giá

04:50.822 --> 04:52.660
trị thứ hai ở đây, thì rõ ràng

04:52.660 --> 04:56.544
là tôi không tuân theo quy tắc này.

04:56.544 --> 05:01.544
Nếu bạn nhận xét điều này và chúng tôi biên dịch, điều này sẽ hoạt động.

05:02.240 --> 05:06.290
Điều đó hơi lạ vì tại sao việc đẩy lại hoạt động ở đây, bởi vì tất

05:06.290 --> 05:08.610
cả chúng ta đều nói rằng vai trò đó phải

05:08.610 --> 05:11.901
có chính xác hai yếu tố, vậy tại sao chúng ta có thể

05:11.901 --> 05:14.980
đẩy quản trị viên lên mảng vai trò ở đây.

05:14.980 --> 05:19.300
Đẩy thực sự là một ngoại lệ được cho phép trong bộ dữ liệu.

05:19.300 --> 05:22.410
Vì vậy, thật không may, TypeScript không thể phát

05:22.410 --> 05:24.840
hiện lỗi này, nhưng ít nhất nó đảm bảo rằng

05:24.840 --> 05:28.570
chúng tôi không gán giá trị sai ở đây và ngoài việc đẩy, chúng

05:28.570 --> 05:31.500
tôi cũng nhận được một số hỗ trợ về độ dài.

05:31.500 --> 05:33.671
Nếu chúng ta đặt vai trò đó của người đó lên một giá trị mới.

05:33.671 --> 05:36.420
Ví dụ: một mảng trống không được phép, một

05:36.420 --> 05:39.710
mảng có cấu trúc chính xác mà chúng tôi đã xác định

05:39.710 --> 05:43.510
ở đó, được phép, nếu tôi thêm một phần tử bổ sung vào đây.

05:43.510 --> 05:45.880
Sau đó, chúng tôi sẽ lại nhận được một lỗi.

05:45.880 --> 05:49.300
Vì vậy, độ dài được thực thi nếu chúng ta chỉ định nó như thế này, nhưng

05:49.300 --> 05:50.720
không phải để đẩy, v.v.

05:50.720 --> 05:52.840
Đây là điều bạn phải biết, nhưng

05:52.840 --> 05:55.580
vẫn nhận được sự hỗ trợ này và sự hỗ trợ này,

05:55.580 --> 05:57.899
khá hay và nếu bạn có một kịch bản trong

05:57.899 --> 06:02.240
đó bạn cần chính xác X giá trị trong một mảng và bạn biết trước loại

06:02.240 --> 06:05.130
của từng giá trị, thì bạn có thể muốn xem xét

06:05.130 --> 06:07.900
một bộ dữ liệu thay vì một mảng để ứng dụng

06:07.900 --> 06:11.313
của bạn thậm chí còn nghiêm ngặt hơn, thậm chí còn

06:11.313 --> 06:15.230
rõ ràng hơn về loại dữ liệu bạn đang làm việc và loại dữ liệu

06:15.230 --> 06:17.543
bạn đang mong đợi.
