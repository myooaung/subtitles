WEBVTT

00:01.850 --> 00:03.270
Istruttore: Ora che

00:03.270 --> 00:06.760
conosciamo i fondamenti di TypeScript e come si

00:06.760 --> 00:09.661
differenzia da JavaScript, approfondiamo

00:09.661 --> 00:11.410
un po' i diversi tipi di base

00:11.410 --> 00:14.148
che TypeScript conosce.

00:14.148 --> 00:17.490
Il numero è il tipo che vediamo qui e, come ho spiegato, non c'è differenza

00:17.490 --> 00:18.500
tra i numeri interi, come

00:18.500 --> 00:22.050
il cinque qui, e i float o i double, come verrebbero chiamati in altri linguaggi

00:22.050 --> 00:25.640
di programmazione, come 2.

00:25.640 --> 00:25.640
8 qui.

00:25.640 --> 00:28.440
Infatti, in JavaScript, e lo stesso vale per TypeScript, tutti

00:28.440 --> 00:30.810
i numeri sono float per impostazione predefinita.

00:30.810 --> 00:33.270
Quindi, per JavaScript, e quindi anche per TypeScript,

00:33.270 --> 00:35.171
non c'è differenza tra cinque come questo

00:35.171 --> 00:36.770
e cinque come questo.

00:36.770 --> 00:38.640
Si tratta essenzialmente dello stesso numero.

00:38.640 --> 00:42.720
Ora, oltre ai numeri, abbiamo anche altri tipi di nucleo.

00:42.720 --> 00:46.350
Si tratta di stringhe, quindi di testo, e di booleani.

00:46.350 --> 00:47.800
Diamo un'occhiata anche a questi.

00:47.800 --> 00:50.650
Le abbiamo già viste tutte in azione in questa dichiarazione

00:50.650 --> 00:53.291
if, che abbiamo imparato essere un po' ridondante.

00:53.291 --> 00:55.971
Tuttavia, questa sarebbe una stringa.

00:55.971 --> 00:57.720
Inoltre, ovviamente, cinque con le virgolette

00:57.720 --> 01:00.389
sarebbe una stringa perché si tratta di testo.

01:00.389 --> 01:03.851
E il risultato, ad esempio, di questo confronto qui, sarebbe

01:03.851 --> 01:05.170
un booleano.

01:05.170 --> 01:08.090
Questo operatore, il triplo segno di

01:08.090 --> 01:10.950
uguale o l'operatore di uguaglianza

01:10.950 --> 01:13.640
negata, produce vero o falso.

01:13.640 --> 01:14.720
E, naturalmente, possiamo

01:14.720 --> 01:17.340
produrre un controllo dinamico innerRef, cosa

01:17.340 --> 01:18.850
che faremo spesso.

01:18.850 --> 01:22.340
Oppure inizializziamo una variabile con un valore vero o falso, quindi facciamo

01:22.340 --> 01:23.379
entrambe le cose.

01:23.379 --> 01:27.509
Qui si potrebbe aggiungere una nuova costante, "printResult".

01:27.509 --> 01:29.990
E impostare questo valore su true, ad esempio.

01:29.990 --> 01:31.320
E per essere chiari, anche questa

01:31.320 --> 01:33.130
potrebbe essere una variabile.

01:33.130 --> 01:34.460
Non è necessario che sia costante.

01:34.460 --> 01:36.030
Può essere una variabile, creata

01:36.030 --> 01:37.730
con let in JavaScript.

01:37.730 --> 01:39.870
Ma dato che non ho intenzione di cambiarlo qui, mi atterrò

01:39.870 --> 01:40.703
a una costante.

01:40.703 --> 01:43.670
E potremmo passare questo come terzo parametro.

01:43.670 --> 01:46.960
Supponiamo di passare "printResult", che è vero in questo caso.

01:46.960 --> 01:49.720
Ora otteniamo immediatamente un errore, ovviamente,

01:49.720 --> 01:53.160
perché la nostra funzione add non supporta un terzo argomento.

01:53.160 --> 01:55.560
Vediamo: "Mi aspettavo due argomenti ma ne ho avuti tre".

01:55.560 --> 01:57.260
Dobbiamo quindi assicurarci di

01:57.260 --> 01:58.920
sostenere un terzo argomento.

01:58.920 --> 02:03.920
E lì si può aggiungere un parametro "showResult".

02:03.940 --> 02:05.920
Anche in questo caso si potrebbe chiamare "printResult".

02:05.920 --> 02:07.910
Ho scelto "showResult" per evitare

02:07.910 --> 02:11.340
confusione sui nomi, ma tecnicamente questi due nomi non

02:11.340 --> 02:12.930
sono in contrasto.

02:12.930 --> 02:14.320
Quindi, lo chiamerò "showResult".

02:14.320 --> 02:17.580
E voglio assicurarmi che sia di tipo booleano, impostando

02:17.580 --> 02:19.500
questo parametro a booleano.

02:19.500 --> 02:22.109
Anche in questo caso, aggiungendo i due

02:22.109 --> 02:25.120
punti dopo il parametro e poi il nome del tipo.

02:25.120 --> 02:28.100
La funzione accetta questo e ora possiamo aggiungere

02:28.100 --> 02:31.787
un controllo if qui e verificare "if showResult", se questo

02:31.787 --> 02:36.480
è vero, possiamo naturalmente confrontarlo con true.

02:36.480 --> 02:37.628
Ma, come sapete,

02:37.628 --> 02:41.990
in JavaScript si può anche passare il valore truthy o falsy.

02:41.990 --> 02:43.970
JavaScript lo valuterà e se in qualche

02:43.970 --> 02:47.389
modo risulterà vero o, in generale, un valore veritiero, allora verrà

02:47.389 --> 02:48.989
inserito nel blocco if.

02:48.989 --> 02:50.011
Altrimenti, non lo faremo.

02:50.011 --> 02:52.900
Supponiamo di riuscire a entrare qui e di voler

02:52.900 --> 02:55.429
fare una "console". log n1 più n2".

02:55.429 --> 02:58.581
Altrimenti, nel caso contrario, se non riusciamo a entrare,

02:58.581 --> 03:00.549
voglio restituire questo.

03:00.549 --> 03:02.300
Si tratta quindi di una funzione

03:02.300 --> 03:04.760
che a volte restituisce un valore e a volte

03:04.760 --> 03:08.309
non lo restituisce, ma lo restituisce immediatamente.

03:08.309 --> 03:11.550
Si potrebbe obiettare che se si vuole scrivere una funzione

03:11.550 --> 03:14.310
di questo tipo, che è imprevedibile o che potrebbe

03:14.310 --> 03:16.651
comportarsi in modo inaspettato se si passa

03:16.651 --> 03:18.349
un valore true qui.

03:18.349 --> 03:19.990
Ma qui lo stiamo facendo.

03:19.990 --> 03:22.090
Quindi questa funzione ritorna solo a volte.

03:22.090 --> 03:24.869
A volte non ritorna, ma si limita a registrare

03:24.869 --> 03:27.830
qualcosa nella console.

03:27.830 --> 03:31.120
Ora, possiamo chiamare add proprio in questo modo, senza

03:31.120 --> 03:33.640
doverlo memorizzare nei risultati e senza

03:33.640 --> 03:37.570
dover usare la console. log del risultato perché, con "printResult"

03:37.570 --> 03:39.550
impostato su true, si aggiunge da solo.

03:39.550 --> 03:41.869
Quindi la funzione stessa stamperà il risultato.

03:41.869 --> 03:43.640
Quindi, se ora lo salviamo e ricompiliamo

03:43.640 --> 03:47.880
la nostra applicazione. ts con il comando tsc.

03:47.880 --> 03:50.830
Una volta fatto questo, la pagina verrà ricaricata e vedremo

03:50.830 --> 03:52.600
ancora il nostro output qui.

03:52.600 --> 03:54.677
Ma ora proviene dalla linea sei.

03:54.677 --> 03:57.690
E se diamo un'occhiata, la riga sei è effettivamente all'interno

03:57.690 --> 03:58.980
della funzione.

03:58.980 --> 03:59.891
Si tratta quindi di un booleano.

03:59.891 --> 04:02.429
Ora diciamo che vogliamo personalizzare l'output.

04:02.429 --> 04:06.190
Nell'if qui, abbiamo una costante "resultPhrase" in cui diciamo

04:06.190 --> 04:10.181
"Il risultato è", i due punti e poi un po' di spazio bianco.

04:10.181 --> 04:14.205
E passiamo anche questo con "resultPhrase".

04:14.205 --> 04:17.410
Allora potremmo aspettarci che questo sia un argomento anche qui.

04:17.410 --> 04:20.750
Frase, che produrrebbe la stringa pipe, aggiungendo i due punti.

04:20.750 --> 04:22.291
E poi stringa è il nome del tipo,

04:22.291 --> 04:26.469
e ora possiamo usare questa frase per emetterla come parte dell'output del

04:26.469 --> 04:31.193
risultato, se stiamo stampando il risultato direttamente nella funzione.

04:31.193 --> 04:34.789
Quindi, in questo caso, potremmo avere "frase più n1 più n2".

04:34.789 --> 04:37.440
Se lo facciamo e ricompiliamo ripetendo

04:37.440 --> 04:39.040
il comando, vedremo che

04:39.040 --> 04:41.720
questa frase fa parte del risultato.

04:41.720 --> 04:44.861
Ma abbiamo anche reintrodotto il vecchio bug, perché

04:44.861 --> 04:48.141
ho una stringa che combino con due numeri.

04:48.141 --> 04:52.000
Tutto viene convertito in una stringa e non è quello

04:52.000 --> 04:53.240
che voglio.

04:53.240 --> 04:55.930
Per evitarlo, in questa funzione si potrebbe aggiungere

04:55.930 --> 04:57.708
una variabile di risultato.

04:57.708 --> 05:02.027
O una costante di risultato e memorizzare il risultato qui.

05:02.027 --> 05:04.530
Questo verrà trattato in modo matematico,

05:04.530 --> 05:07.990
perché sono coinvolti solo i numeri, e poi, qui, potremmo

05:07.990 --> 05:11.430
combinarlo con la frase o semplicemente restituirlo.

05:11.430 --> 05:15.160
Ora, poiché non viene mai calcolato direttamente insieme a una stringa,

05:15.160 --> 05:17.029
sarà sempre un numero.

05:17.029 --> 05:19.350
E, sì, qui, questo numero combinato con questa stringa

05:19.350 --> 05:21.140
sarà convertito in una stringa.

05:21.140 --> 05:24.360
Ma poiché il calcolo matematico è terminato prima di questo, avremo

05:24.360 --> 05:25.548
il risultato giusto.

05:25.548 --> 05:28.520
Quindi, se ripetiamo l'operazione e poi ricompiliamo,

05:28.520 --> 05:30.181
otteniamo l'output corretto.

05:30.181 --> 05:33.050
Ecco i tipi di dati principali in azione.

05:33.050 --> 05:35.541
Assicuriamoci ora di aver compreso appieno

05:35.541 --> 05:38.061
come vengono assegnati i tipi e, inoltre, perché

05:38.061 --> 05:41.343
non assegniamo esplicitamente i tipi qui sotto.
