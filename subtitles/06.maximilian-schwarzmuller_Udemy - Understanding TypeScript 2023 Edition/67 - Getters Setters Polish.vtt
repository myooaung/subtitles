WEBVTT

00:02.200 --> 00:04.920
Speaker: Czyli to są klasy, właściwości

00:04.920 --> 00:07.510
i dziedziczenie z Typescript.

00:07.510 --> 00:08.343
I tak jak wspomniałem,

00:08.343 --> 00:10.260
te cechy chociaż ogólnie są obsługiwane

00:10.260 --> 00:14.230
w JavaScripcie, w nowoczesnym JavaScripcie, oczywiście

00:14.230 --> 00:16.940
z wyjątkiem przypisania typu, a także z wyjątkiem

00:16.940 --> 00:21.060
protected private public.

00:21.060 --> 00:24.770
Te słowa kluczowe są naprawdę dostępne tylko w Typescript.

00:24.770 --> 00:28.560
Teraz to jednak nie wszystko, co można zrobić z klasami.

00:28.560 --> 00:29.940
Kiedykolwiek potrzebujesz

00:29.940 --> 00:32.840
funkcji, którą masz również w vanilla JavaScript,

00:32.840 --> 00:35.670
w którym jest również obsługiwany w Typescript,

00:35.670 --> 00:38.610
są gettery i setery.

00:38.610 --> 00:42.050
Teraz zobaczmy, że tutaj na przykład na dziale

00:42.050 --> 00:43.390
księgowości, powiedzmy,

00:43.390 --> 00:47.450
że mamy ostatni raport, nieruchomości.

00:47.450 --> 00:51.630
Który jest własnością prywatną i jest to typ string,

00:51.630 --> 00:53.310
więc mamy to.

00:53.310 --> 00:56.480
A następnie tutaj inicjalizujemy to, aby

00:56.480 --> 01:01.480
być naszymi raportami własność zamówienia argumenty dostajemy tutaj

01:02.270 --> 01:04.880
i są one pierwszą wartością.

01:04.880 --> 01:07.877
Co oczywiście jest w zasadzie niezdefiniowane, jeśli przekażemy

01:07.877 --> 01:09.890
i pustą tablicę raportów.

01:09.890 --> 01:14.680
Teraz, kiedy dodajemy raport, to chcę ustawić ten ostatni

01:14.680 --> 01:17.010
raport, równy tekstowi.

01:17.010 --> 01:20.440
Czyli to, co dodajemy do naszej tablicy raportów.

01:20.440 --> 01:23.890
Teraz ostatni raport jest prywatny, więc możemy uzyskać do niego

01:23.890 --> 01:26.250
dostęp z wnętrza tej metody, ale nie będziemy

01:26.250 --> 01:28.590
mogli uzyskać do niego dostępu z zewnątrz za

01:28.590 --> 01:30.240
pomocą notacji kropkowej.

01:30.240 --> 01:33.440
Teraz możemy dodać getter, aby nadal był dostępny.

01:33.440 --> 01:36.020
Getter jest w zasadzie właściwością, w

01:36.020 --> 01:38.670
której wykonujesz funkcję lub metodę, gdy

01:38.670 --> 01:40.910
pobierasz wartość i to pozwala ci jako

01:40.910 --> 01:42.380
deweloperowi dodać bardziej

01:42.380 --> 01:44.460
złożoną logikę.

01:44.460 --> 01:47.560
Tutaj tworzysz getter, używając słowa kluczowego get, a następnie

01:47.560 --> 01:49.250
dowolnej nazwy, którą wybierzesz.

01:49.250 --> 01:51.810
Zazwyczaj ściśle związane z nieruchomością,

01:51.810 --> 01:54.180
do której próbujesz kontrolować dostęp.

01:54.180 --> 01:58.180
Na przykład tutaj moglibyśmy nazwać go najnowszym raportem.

01:58.180 --> 01:59.340
Cokolwiek w tym stylu.

01:59.340 --> 02:01.630
Teraz ważne to jest zdefiniowane jak metoda.

02:01.630 --> 02:04.260
Więc dodajesz nawiasy, a następnie nawiasy klamrowe.

02:04.260 --> 02:07.250
I teraz w tym miejscu trzeba coś zwrócić,

02:07.250 --> 02:11.990
to jest ważne metoda getter, musi coś zwrócić.

02:11.990 --> 02:14.610
Tak więc mógłby pan zwrócić ten ostatni raport,

02:14.610 --> 02:16.660
a następnie my jakby obudowujemy to,

02:16.660 --> 02:19.570
ponieważ jest to teraz publicznie dostępne.

02:19.570 --> 02:22.720
Ale często chcesz mieć tutaj bardziej złożoną logikę.

02:22.720 --> 02:26.240
Czyli tutaj moglibyśmy sprawdzić, czy mamy tutaj wartość, czyli

02:26.240 --> 02:27.600
czy to jest prawda.

02:27.600 --> 02:28.960
Jeśli nie jest niezdefiniowany,

02:28.960 --> 02:31.520
to chcemy zwrócić ostatni raport, w przeciwnym

02:31.520 --> 02:34.440
razie możemy chcieć zwrócić jakąś inną logikę,

02:34.440 --> 02:37.850
na przykład powiedzmy, że w przeciwnym razie rzucamy komunikat

02:37.850 --> 02:42.650
o błędzie z throw new error, no reports found.

02:42.650 --> 02:46.650
Więc teraz dodaliśmy więcej logiki, bardziej złożonej logiki, do tej

02:46.650 --> 02:49.200
właściwości i kiedy chcemy ją pobrać, nie możemy

02:49.200 --> 02:51.500
bezpośrednio pobrać tej właściwości poprzez

02:51.500 --> 02:55.290
notację kropkową, ale możemy użyć tego jako właściwości do końca uruchomić

02:55.290 --> 02:57.240
tę logikę.

02:57.240 --> 02:58.810
Jak więc miałoby to działać?

02:58.810 --> 03:02.170
Cóż tam na dole, gdzie tworzę swój dział księgowości.

03:02.170 --> 03:08.693
Zanim dodam mój raport, jeśli próbowałem Console log, księgowość.

03:08.693 --> 03:08.693
najświeższy

03:09.630 --> 03:11.010
raport, a teraz ważny.

03:11.010 --> 03:13.902
Ups, księgowość. najnowszy raport.

03:13.902 --> 03:16.890
I teraz ważne, że masz dostęp do tego jako do nieruchomości.

03:16.890 --> 03:18.690
Więc nie ma tu nawiasu.

03:18.690 --> 03:20.570
Nie wykonujesz tego jako metody.

03:20.570 --> 03:23.030
Po prostu uzyskujesz dostęp do niego jak

03:23.030 --> 03:24.460
do normalnej właściwości,

03:24.460 --> 03:27.890
a za kulisami wykona się ta metoda tam na górze.

03:27.890 --> 03:31.670
Więc jeśli spróbuję tego teraz przed dodaniem naszego raportu, zobaczymy,

03:31.670 --> 03:33.940
że to przebudowane bez błędów, przekompilowane

03:33.940 --> 03:35.440
bez błędów, ale oczywiście

03:35.440 --> 03:38.550
tutaj błąd jest rzucony to nasz niestandardowy błąd nie

03:38.550 --> 03:40.820
znaleziono raportu, ponieważ żaden raport

03:40.820 --> 03:42.820
nie został dodany jeszcze, a ponieważ

03:42.820 --> 03:45.370
używając tego jako getter, uzyskuje dostęp do

03:45.370 --> 03:48.310
tej metody i wykonuje ją.

03:48.310 --> 03:51.560
Jeśli nie mamy raportu, nie trafiamy do tego sprawdzenia

03:51.560 --> 03:52.830
IF, lub do tego oświadczenia

03:52.830 --> 03:55.693
IF, a zatem ta linia tutaj, kopie.

03:56.590 --> 04:00.250
Alternatywnie, gdybyśmy przesunęli to w dół, po dodaniu

04:00.250 --> 04:02.210
raportu, wtedy oczywiście możemy

04:02.210 --> 04:04.100
go zapisać i nie otrzymamy już

04:04.100 --> 04:05.730
błędu, ale zamiast tego wyprowadzimy

04:05.730 --> 04:08.400
ten ostatni raport.

04:08.400 --> 04:09.750
Więc to jest getter.

04:09.750 --> 04:12.190
Możesz też dodać setera.

04:12.190 --> 04:14.550
Setter jest dodawany prawie w ten sam sposób.

04:14.550 --> 04:16.290
Używasz słowa kluczowego set, a następnie

04:16.290 --> 04:18.630
ponownie dowolnej nazwy, którą wybierzesz.

04:18.630 --> 04:21.940
zazwyczaj nazwa związana z właściwością, która ma być

04:21.940 --> 04:22.870
ustawiona.

04:22.870 --> 04:25.570
Więc tutaj ponownie wykorzystam najnowszy raport.

04:25.570 --> 04:27.840
Abyśmy mogli użyć tego zarówno do odczytania wartości,

04:27.840 --> 04:29.150
jak i do ustawienia wartości.

04:29.150 --> 04:30.090
I znowu, zdefiniowałeś

04:30.090 --> 04:31.850
to jak metodę.

04:31.850 --> 04:34.850
Ale teraz to trzeba wziąć argument.

04:34.850 --> 04:38.630
Wartość, którą przekazałby użytkownik.

04:38.630 --> 04:40.940
W tym miejscu powinna być wartość łańcuchowa,

04:40.940 --> 04:44.110
a teraz w tym miejscu możesz uruchomić dowolną logikę, którą

04:44.110 --> 04:46.160
chcesz przechowywać to.

04:46.160 --> 04:48.530
Teraz tutaj, ponieważ przekazywaliśmy

04:48.530 --> 04:51.890
wartość dla najnowszego raportu, ja w końcu chcę wykonać

04:51.890 --> 04:53.080
add report.

04:53.080 --> 04:55.370
Więc tutaj seter może być po prostu alternatywą

04:55.370 --> 04:57.140
dla metody add report.

04:57.140 --> 05:01.280
Więc w tym miejscu możemy uzyskać dostęp do tego raportu dodawania.

05:01.280 --> 05:03.760
Jest to wymagane, ponieważ jesteśmy wewnątrz klasy.

05:03.760 --> 05:07.280
Odwołujemy się do klasy, a następnie do tej metody klasy tutaj.

05:07.280 --> 05:10.380
A teraz możemy po prostu przekazać tutaj wartość.

05:10.380 --> 05:12.310
Teraz moglibyśmy dodać bardziej złożoną

05:12.310 --> 05:16.130
logikę, a także sprawdzić, czy wartość jest być może niezdefiniowana,

05:16.130 --> 05:19.810
jeśli jest fałszywa, a następnie po prostu zwrócić lub rzucić nowy

05:19.810 --> 05:24.020
błąd, w którym mówimy, że prosimy o podanie poprawnej wartości.

05:24.020 --> 05:26.140
To jest coś, co moglibyśmy również zrobić.

05:26.140 --> 05:29.010
A teraz używamy tutaj również setera.

05:29.010 --> 05:31.330
Mając to dodane możemy go przetestować.

05:31.330 --> 05:33.193
Tam na dole mógłbym dodać najnowszy

05:35.400 --> 05:36.570
raport.

05:36.570 --> 05:38.780
Mógłbym uzyskać dostęp do tego na księgowości,

05:38.780 --> 05:40.770
i tak jak w tym przypadku czytalibyśmy

05:40.770 --> 05:42.300
z niego, ale teraz dodając znak

05:42.300 --> 05:44.520
równości, próbujemy ustawić wartość do

05:44.520 --> 05:47.150
tego, a to wywoła tę metodę setera.

05:47.150 --> 05:50.090
Ponownie tuż przed tym nie wykonujemy go jako metody, ale po prostu

05:50.090 --> 05:52.383
uzyskujemy dostęp do niego jak do właściwości.

05:53.220 --> 05:56.030
Teraz tutaj, jeśli przekażę pusty ciąg, to

05:56.030 --> 05:58.770
technicznie przekazujemy ciąg, ale pusty

05:58.770 --> 06:02.760
ciąg będzie traktowany jako fałszywy, zobacz tutaj.

06:02.760 --> 06:04.950
I dlatego powinniśmy teraz otrzymać błąd.

06:04.950 --> 06:07.450
Więc jeśli zapiszę tę linię kodu, jeśli zapiszę

06:07.450 --> 06:09.850
kod z dodaną tą linią kodu, to rzeczywiście

06:11.120 --> 06:14.530
otrzymaliśmy ten błąd please pass in a valid value.

06:14.530 --> 06:17.010
Jeśli jednak przekażę poprawną wartość,

06:17.010 --> 06:22.010
jeśli na przykład powiem, że raport z końca roku jest tutaj, a teraz

06:22.250 --> 06:23.900
zapiszę to.

06:23.900 --> 06:27.210
Teraz widać, że to wszystko działa i raport roczny jest

06:27.210 --> 06:29.620
częścią naszej listy raportów.

06:29.620 --> 06:31.150
Tak więc są to gettery i setery, które

06:31.150 --> 06:33.620
mogą być świetne do enkapsulacji logiki, a także do dodawania

06:33.620 --> 06:35.390
dodatkowej logiki, która powinna być

06:35.390 --> 06:38.050
uruchamiana, gdy próbujesz odczytać właściwość lub gdy

06:38.050 --> 06:40.243
próbujesz ustawić właściwość.
