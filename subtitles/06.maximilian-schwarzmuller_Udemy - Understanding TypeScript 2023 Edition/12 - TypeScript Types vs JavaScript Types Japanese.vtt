WEBVTT

00:00.000 --> 00:06.200
(沈黙) -：すでに､ TypeScriptが開発時にどのように役立つかがわかっているわけですね｡

00:06.200 --> 00:10.560
さて､ JavaScriptには数値の型があることも分かっています｡ 

00:10.560 --> 00:14.010
そして､ オペレータのビルトインタイプで見ることができます｡ 

00:14.010 --> 00:15.781
これは現在ではTypeScript固有のものではなく､

00:15.781 --> 00:20.420
JavaScriptでサポートされている組み込みの演算子やキーワードである｡

00:20.420 --> 00:22.910
ある値の型を取得するのに使うことができる｡ 

00:22.910 --> 00:27.050
そこで､ ここでは､ 1番のロックタイプをコンソール化することができました｡ 

00:27.050 --> 00:27.992
そうすると､ これをコンパイルすると同時に､

00:27.992 --> 00:32.623
更新されたコードが実行されることになります｡

00:33.780 --> 00:37.040
ここでは､ コンソールに数値を表示しています｡ 

00:37.040 --> 00:39.330
この出力のおかげで､ そして演算子の型のおかげで､

00:39.330 --> 00:41.180
Vanilla JavaScriptでは､

00:41.180 --> 00:46.710
TypeScriptがなくても､ この関数を常に改善するために使うことができました｡

00:46.710 --> 00:51.500
数値の型が数値と等しいかどうかを確認することができました｡ 

00:51.500 --> 00:56.350
すみません､ n1 のタイプというのは､ それが数字と等しいかどうかということで､

00:56.350 --> 01:00.710
n2 のタイプが数字と等しいかどうかもチェックできます｡

01:00.710 --> 01:02.349
で､ それ以外の投げられたエラーである場合にのみ､

01:02.349 --> 01:05.220
ここで我々の操作を実行するか､ またはその逆を行って､

01:05.220 --> 01:10.820
それが等しくないかどうか､ またはn2が等しくないかどうかをチェックします｡

01:10.820 --> 01:19.690
そして､ どちらかが数字でない場合は､ 不正確な入力という新たなエラーを投げることができるのです｡

01:19.690 --> 01:19.690
これは実際には､

01:19.690 --> 01:22.300
この関数を文字列で呼び出すことができないようにするための､

01:22.300 --> 01:25.700
TypeScript以外の方法である｡

01:25.700 --> 01:26.760
今これをやって､ 再コンパイルすると､

01:26.760 --> 01:30.830
TypeScriptのエラーが出ますが､ 今は無視しましょう｡

01:30.830 --> 01:31.730
これを再実行すると､

01:31.730 --> 01:33.100
誤った入力が得られるので､

01:33.100 --> 01:34.940
自分で投げているのです｡

01:34.940 --> 01:38.080
JavaScriptの機能不全は､ 実行時に失敗しますが､

01:38.080 --> 01:44.950
失敗しても､ 以前のように間違った出力を表示するよりはましかもしれません｡

01:44.950 --> 01:48.715
つまり､ これはJavaScriptだけで入力をチェックする方法でしょう｡

01:48.715 --> 01:50.640
そのためにTypeScriptは必要ない｡ 

01:50.640 --> 01:53.200
これは通常のJavaScriptのコードです｡ 

01:53.200 --> 01:55.160
しかし､ この方法にはもちろんデメリットがあります｡

01:55.160 --> 01:57.160
時にはそれが正しいこともある｡ 

01:57.160 --> 02:01.440
実行時に特定の入力しか検証できない場合があります｡ 

02:01.440 --> 02:03.150
しかし､ TypeScriptを使った開発では､

02:03.150 --> 02:08.950
実は避けることができることをチェックしているのが難点です｡

02:08.950 --> 02:11.180
そう､ エラーを投げているのです｡ 

02:11.180 --> 02:14.210
そして､ アプリケーションには､ 実行中のアプリケーションを保存するために､

02:14.210 --> 02:19.080
他の動作にフォールバックする手段を組み込んでいる場合があります｡

02:19.080 --> 02:24.180
しかしそれでも､ そもそも本当は発生させる必要のないエラーを投げているのです｡

02:24.180 --> 02:27.350
TypeScriptで防げたかもしれない｡ 

02:27.350 --> 02:30.400
そしてここで､ JavaScriptとTypeScriptの違いを実感することになるのが､

02:30.400 --> 02:31.450
型に関してです｡

02:31.450 --> 02:33.750
JavaScriptは動的型付けなので､

02:33.750 --> 02:41.600
最初は数値を格納する変数があり､ 後で文字列を代入しても全く問題ない｡

02:41.600 --> 02:44.500
そのため､ ある型に依存するコードがある場合､

02:44.500 --> 02:52.267
実行時に現在の型をチェックできるようにタイプオフ演算子が必要なのです｡

02:52.267 --> 02:55.094
一方､ TypeScriptは静的型付けを採用しています｡

02:55.094 --> 02:58.480
つまり､ 変数やパラメータの型は開発中に定義し､

02:58.480 --> 03:04.980
実行時に突然変更されることはないのです｡

03:04.980 --> 03:09.090
もちろん､ TypeScriptはJavaScriptにコンパイルされているので､

03:09.090 --> 03:10.660
理論的には可能です｡

03:10.660 --> 03:12.510
しかし､ TypeScriptを使っていて､

03:12.510 --> 03:19.840
ある変数に突然新しいデータ型を代入するようなコードを書くと､ これまでは例えば数字であるべきだと言っていたのに､

03:19.840 --> 03:32.120
文字列を代入することになり､ 開発中にエラーが発生して､ 型に関して､ 何かが保持できるのかできないのかを明確にしなければならなくなるのです｡

03:32.120 --> 03:33.710
ここが違うところです｡ 

03:33.710 --> 03:36.620
ですから､ TypeScriptで回避できるのであれば､

03:36.620 --> 03:40.810
そのような実装や解決策はあまり使いたくないのです｡

03:40.810 --> 03:46.400
それでも､ JavaScriptはもちろん型の概念を知っていることが重要です｡

03:46.400 --> 03:50.640
数値､ 文字列､ ブール値などの型について知っています｡

03:50.640 --> 03:53.540
しかし､ それを使うと常に開発中ではなく､

03:53.540 --> 03:58.700
実行時にしか失敗できないことになり､ 開発者としてはその方がいいのです｡

03:58.700 --> 04:01.550
それによって､ より早くバグを修正することができるのです｡ 

04:01.550 --> 04:05.410
さらに､ JavaScriptは数種類の型しか知らない｡

04:05.410 --> 04:07.170
このコースを通して学ぶことができます｡ 

04:07.170 --> 04:10.540
TypeScriptは､ JavaScriptよりもはるかに多くの型について知っています｡ 

04:10.540 --> 04:18.030
そのため､ 実行時チェックは､ TypeScriptでできることほど柔軟でも強力でもありません｡

04:18.030 --> 04:19.490
そして､ これらの理由から､ このアプローチは､

04:19.490 --> 04:22.550
実はここで使いたいアプローチではないのです｡

04:22.550 --> 04:26.540
実行時に型を取得すると便利な場合があります｡ 

04:26.540 --> 04:31.740
しかし､ この例のように､ 開発中に入手した方が良い場合もあります｡

04:31.740 --> 04:38.670
もちろん､ TypeScriptでは､ 実行時ではなく開発時にしかサポートされないということだけは認識しておいてください｡

04:38.670 --> 04:41.610
なぜなら､ これらのTypeScriptの機能やチェックは､

04:41.610 --> 04:44.650
JavaScriptエンジンに組み込まれていないので､

04:44.650 --> 04:51.223
ブラウザ上でロジックを実行することはできず､ 開発時にコードをコンパイルして初めて実行されるからです｡
