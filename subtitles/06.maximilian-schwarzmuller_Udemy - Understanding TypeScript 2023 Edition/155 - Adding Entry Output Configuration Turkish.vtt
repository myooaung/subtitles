WEBVTT

00:01.538 --> 00:03.725
Anlatıcı: Başlamak için öncelikle

00:03.725 --> 00:07.086
tsconfig'e gidelim. json dosyası çünkü orada belirli şeylerin

00:07.086 --> 00:09.965
yapılandırıldığından emin olmamız gerekiyor.

00:09.965 --> 00:12.780
Buradaki hedefin aslında es5 veya es6 olarak

00:12.780 --> 00:16.286
ayarlandığından emin olun, bu size kalmış.

00:16.286 --> 00:19.423
Hangi tarayıcıları desteklemeyi planladığınıza bağlıdır.

00:19.423 --> 00:22.190
Çünkü sonuçta webpack ve yükleyicinin kullanacağı türler,

00:22.190 --> 00:24.050
kodunuzun nasıl dönüştürülmesi gerektiğini

00:24.050 --> 00:26.543
belirlemek için bu hedefi kullanacaktır.

00:26.543 --> 00:28.960
Kod türleriniz eski tarayıcılarda

00:28.960 --> 00:32.480
da çalışan Java script koduna dönüştürülmeli mi?

00:32.480 --> 00:36.210
Ya da es6'da olduğu gibi yalnızca daha yeni tarayıcılarda

00:36.210 --> 00:37.811
çalışan kodlara mı?

00:37.811 --> 00:42.640
Modül daha sonra es2015 veya es6 olarak ayarlanmalıdır, böylece

00:42.640 --> 00:44.110
bu ayar iyi olur.

00:44.110 --> 00:49.110
Ayrıca outDir'inizi de doğrulamak istersiniz.

00:50.560 --> 00:53.520
Ben bunu dist olarak tutacağım ancak kodunuzu farklı bir dizinde

00:53.520 --> 00:55.997
derlemek istiyorsanız bunu değiştirebilirsiniz.

00:55.997 --> 00:59.378
Artık kök dizine ihtiyacınız yok, çünkü webpack orayı

00:59.378 --> 01:02.260
devralacak ve webpack kök dosyalarınızın

01:02.260 --> 01:05.014
nerede olduğunu belirleyecektir.

01:05.014 --> 01:07.660
Yani genel olarak bu ayarlar iyi olmalıdır.

01:07.660 --> 01:09.525
Bir şey istediğimiz gibi çalışmazsa

01:09.525 --> 01:12.487
daha sonra üzerinde her zaman değişiklik yapabiliriz.

01:12.487 --> 01:15.220
Bununla birlikte tsconfig'in yanına yeni bir yapılandırma

01:15.220 --> 01:19.848
dosyası ekleyelim. json ve bu da webpack. Yapılandır. js dosyası.

01:19.848 --> 01:22.368
Ve gerçekten bu şekilde adlandırdığınızdan

01:22.368 --> 01:24.150
emin olun çünkü webpack'in otomatik

01:24.150 --> 01:27.579
olarak arayacağı dosya budur ve bu webpack'e projemizle nasıl

01:27.579 --> 01:30.220
çalışacağını bile söyleyecektir.

01:30.220 --> 01:32.840
Çünkü webpack burada doğru çalışması için yapılandırılması

01:32.840 --> 01:34.568
gereken bir araçtır.

01:34.568 --> 01:37.568
Peki bu webpack'te ne yapıyoruz. yapılandırma dosyası?

01:37.568 --> 01:40.338
Bu yapılandırma dosyası JavaScript kullanır ve

01:40.338 --> 01:43.288
aslında node kullanır. js özellikleri.

01:43.288 --> 01:46.747
Bu yüzden düğümü kullanmak istiyoruz. js exports sözdizimi, daha sonra bir

01:46.747 --> 01:50.379
JavaScript nesnesini dışa aktarmak için aşağıdaki gibi görünür.

01:50.379 --> 01:53.538
Bu, webpack tarafından alınan yapılandırma nesnesi olacaktır.

01:53.538 --> 01:55.585
Bunu daha önce hiç görmediyseniz, bir düğümdeki

01:55.585 --> 01:59.648
şeyleri bu şekilde dışa aktarırsınız. js ortamı.

01:59.648 --> 02:02.877
Ve burada bir JavaScript nesnesini dışa aktarıyoruz.

02:02.877 --> 02:05.920
Şimdi webpack'in birkaç bilgiye ihtiyacı var.

02:05.920 --> 02:09.840
En önemlisi, tüm projenizin hangi dosyayla başladığını

02:09.840 --> 02:14.585
bilmesi gerekir; yani giriş noktanızın nerede olduğunu.

02:14.585 --> 02:17.370
Bizim durumumuzda bu uygulama. ts dosyası.

02:17.370 --> 02:18.922
Bu dosya önce çalıştırılmalıdır

02:18.922 --> 02:20.981
ve webpack'in daha sonra yapacağı şey,

02:20.981 --> 02:24.013
bu dosyadaki içe aktarımlara bakmak ve bu dosyalara

02:24.013 --> 02:25.461
gidip içe aktarımlarına

02:25.461 --> 02:27.378
ve içe aktarılan dosyaların içe aktarımlarına

02:27.378 --> 02:30.219
vb. bakmak olacaktır.

02:30.219 --> 02:33.461
Sonunda projenizin kullandığı tüm dosyaları bilene kadar.

02:33.461 --> 02:36.201
Ve sonra buradaki içerik gibi dosyaların içeriğini

02:36.201 --> 02:38.740
ve tüm dosyalardaki tüm içeriği inceleyecek ve

02:38.740 --> 02:44.290
ts'nin yardımıyla bunları derleyecektir.

02:44.290 --> 02:44.290
bahsettiğim yükleyici paketi.

02:44.290 --> 02:46.960
Şimdi webpack'in burada düzgün çalışmasını sağlamak

02:46.960 --> 02:50.421
için aslında şimdi tüm . tüm içe aktarmalarda js

02:50.421 --> 02:51.598
uzantıları.

02:51.598 --> 02:54.400
Daha önce, ts'de yerleşik yerel tarayıcıyı kullandığımızda

02:54.400 --> 02:57.885
buna ihtiyacımız vardı. Modül işlevselliği, ancak

02:57.885 --> 03:01.130
webpack ile bu uzantılara ihtiyacınız yoktur.

03:01.130 --> 03:03.664
Çünkü webpack aslında otomatik olarak arayacaktır. js ve diğer bazı uzantı dosyaları.

03:03.664 --> 03:06.501
Bu yüzden onları buraya eklemezsiniz ve eklememelisiniz,

03:06.501 --> 03:09.270
aksi takdirde webpack çift uzantılı dosyaları arayacaktır,

03:09.270 --> 03:10.716
ki bunu istemezsiniz.

03:10.716 --> 03:13.655
Öyleyse kaldırın. js'ye basın ve bunu yaptıktan sonra değişikliklerinizin

03:13.655 --> 03:18.441
uygulandığından emin olmak için tüm

03:18.441 --> 03:21.370
bu dosyaları kaydedin.

03:21.370 --> 03:24.043
Şimdi webpack'e geri dönelim. Yapılandır. js, şimdi bu dışa aktarılan

03:24.043 --> 03:26.498
nesneye

03:26.498 --> 03:31.320
bir giriş özelliği eklemelisiniz.

03:31.320 --> 03:32.740
Ve işaret et. /src/app. örneğimizdeki t'ler.

03:32.740 --> 03:37.740
Yani projenizin kök giriş dosyasında.

03:38.680 --> 03:42.444
Ardından buraya bir çıkış anahtarı ekleyin.

03:42.444 --> 03:45.880
Artık bir çıktı burada bir nesnedir.

03:45.880 --> 03:48.051
Burada öncelikle dosya adını belirtiriz.

03:48.051 --> 03:51.120
Bu, sonuçta üretilecek olan tek JavaScript

03:51.120 --> 03:52.998
dosyası olacaktır.

03:52.998 --> 03:57.350
Ve burada ona bundle adını vereceğiz. js, ancak istediğiniz adı verebilirsiniz.

03:57.350 --> 03:58.788
Uygulama. js veya ne isterseniz.

03:58.788 --> 04:01.709
Ayrıca, webpack'e her derleme

04:01.709 --> 04:05.171
için otomatik olarak benzersiz bir hash oluşturmasını söylemek için buraya

04:05.171 --> 04:08.971
içerik hash'i gibi dinamik parçalar da ekleyebilirsiniz, bu da tarayıcıda önbelleğe

04:08.971 --> 04:11.829
alma konusunda size yardımcı olabilir.

04:11.829 --> 04:13.578
Ancak yine de webpack dokümanlarında bu konuda daha fazla bilgi edinebilirsiniz.

04:13.578 --> 04:16.229
Burada buna ihtiyacımız yok, bu yüzden dosyaya sadece bundle adını vereceğiz. js.

04:16.229 --> 04:19.779
Dosya adına ek olarak, çıktının

04:19.779 --> 04:23.320
yazılacağı yolu da belirtmeniz gerekir.

04:23.320 --> 04:26.131
Ve elbette bu, ts'nizde sahip olduğunuz

04:26.131 --> 04:28.900
yolla eşleşmelidir. Yapılandır. js dosyasında hataları önlemek için.

04:28.900 --> 04:32.970
Yani bu dosyaya.

04:32.970 --> 04:34.189
Şimdi ts'den farklı olarak. config,js dosyasını

04:34.189 --> 04:37.010
yazmamalısınız. /dist burada.

04:37.010 --> 04:39.819
Webpack burada mutlak bir yol istiyor.

04:39.819 --> 04:42.099
Ve bir tane oluşturmak için bir düğüm kullanabiliriz. js modülü.

04:42.099 --> 04:45.669
Bunun için düğümü kullanabiliriz. js import sözdiziminde required

04:45.669 --> 04:48.880
anahtar sözcüğünü kullanır

04:48.880 --> 04:51.280
ve path modülünü içe aktarır.

04:51.280 --> 04:54.220
Bunu bir kütüphane olarak yüklemenize gerek yoktur,

04:54.220 --> 04:56.050
bu bir çekirdek düğümdür. js modülüne zaten sahipsiniz,

04:56.050 --> 04:59.651
eğer node'unuz varsa. js yüklü, ki bunu kursun başlarında yaptığımız

04:59.651 --> 05:02.149
için biliyorsunuz.

05:02.149 --> 05:04.966
Şimdi, belirli bir klasöre mutlak bir yol

05:04.966 --> 05:08.552
oluşturmanıza olanak tanıyan resolve yöntemini çağırmak

05:08.552 --> 05:11.280
için path'i kullanabilirsiniz.

05:11.280 --> 05:12.910
Bunun için bir düğümde global

05:12.910 --> 05:15.320
olarak kullanılabilen özel bir sabit olan __dirname

05:15.320 --> 05:17.236
sabitini kullanırız. js ortamı.

05:17.236 --> 05:21.150
Ve webpack dediğim gibi node kullanıyor. js dosyalarınızı çalıştırmak için.

05:21.150 --> 05:24.692
Ve sonra ikinci argüman olarak

05:24.692 --> 05:27.433
dist, sonunda dist sadece dist klasörüne mutlak

05:27.433 --> 05:30.661
bir yol oluşturur ve webpack daha sonra çıktınızı

05:30.661 --> 05:33.190
oraya yazmak için kullanır.

05:33.190 --> 05:35.452
Bununla birlikte bir giriş ve çıkış noktası

05:35.452 --> 05:38.753
elde edersiniz, ancak webpack'e TypeScript dosyalarınızla

05:38.753 --> 05:40.743
ne yapacağını söylemezsiniz.

05:40.743 --> 05:42.553
Çünkü webpack varsayılan olarak bunu

05:42.553 --> 05:45.140
bilmez, varsayılan olarak sadece bir bundler'dır.

05:45.140 --> 05:46.884
TypeScript'i JavaScript'e

05:46.884 --> 05:48.684
derlemek gibi herhangi bir ekstra

05:48.684 --> 05:51.261
işlev webpack'e öğretilmelidir.

05:51.261 --> 05:53.452
Bunu bir sonraki derste yapacağız.
