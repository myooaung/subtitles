WEBVTT

00:02.160 --> 00:03.740
Instruktur: Jadi, apa saja pilihan

00:03.740 --> 00:06.440
kita ketika kita ingin membagi kode ke dalam beberapa file?

00:06.440 --> 00:10.720
Sekarang sebenarnya kita memiliki tiga opsi untuk itu.

00:10.720 --> 00:12.680
Opsi pertama adalah dengan hanya

00:12.680 --> 00:16.110
menulis beberapa file kode, beberapa file TypeScript.

00:16.110 --> 00:17.460
TypeScript kemudian akan

00:17.460 --> 00:20.710
secara otomatis mengkompilasi semua file kode di direktori sumber

00:20.710 --> 00:23.020
dan secara manual mengimpor file skrip Java yang

00:23.020 --> 00:25.000
dikompilasi ke dalam HTML.

00:25.000 --> 00:26.220
Itu adalah pilihan dan

00:26.220 --> 00:28.970
untuk beberapa proyek ini mungkin tepat tetapi Anda

00:28.970 --> 00:31.780
harus mengelola semua impor ini secara manual yang dapat

00:31.780 --> 00:34.600
menjadi rumit dan rawan kesalahan dan ketika menggunakan

00:34.600 --> 00:36.980
fitur TypeScript tertentu, Anda juga melepaskan

00:36.980 --> 00:39.560
dukungan tipe jika beberapa tipe didefinisikan

00:39.560 --> 00:42.100
dalam file A dan Anda menggunakannya dalam file

00:42.100 --> 00:43.670
B dan TypeScript tidak tahu tentang

00:43.670 --> 00:46.030
koneksi ini.

00:46.030 --> 00:47.480
Itulah mengapa ini bukan pilihan yang

00:47.480 --> 00:49.290
bagus untuk proyek yang lebih besar.

00:49.290 --> 00:52.500
Sebaliknya untuk proyek yang lebih besar, kami memiliki dua opsi utama.

00:52.500 --> 00:55.470
Kita memiliki namespaces dan bundling file misalnya.

00:55.470 --> 00:59.410
Sekarang namespaces adalah fitur TypeScript, fitur sintaksis,

00:59.410 --> 01:03.430
Anda dapat menambahkan kode khusus ke kode Anda untuk menggunakan

01:03.430 --> 01:04.840
fitur ini dan pada dasarnya

01:04.840 --> 01:08.650
memungkinkan Anda untuk mengelompokkan kode bersama di bawah

01:08.650 --> 01:12.730
namespace dan kemudian mengimpor namespaces ke file lain.

01:12.730 --> 01:16.020
Jadi, Anda bisa memiliki namespace per file misalnya.

01:16.020 --> 01:18.790
Mengimpor file lain ke file lain dan memanfaatkan

01:18.790 --> 01:21.930
namespace yang berada di file lain dari file yang mengimpor

01:21.930 --> 01:25.970
tersebut dan kita akan melihatnya dalam praktiknya jika itu tidak

01:25.970 --> 01:28.030
sepenuhnya jelas.

01:28.030 --> 01:30.020
TypeScript tidak hanya mendukung

01:30.020 --> 01:34.130
hal itu, tetapi juga menggabungkan file-file menjadi satu file, sehingga

01:34.130 --> 01:37.230
pada akhirnya Anda menulis kode dalam beberapa file

01:37.230 --> 01:39.560
yang dikompilasi tetapi kemudian diimpor

01:39.560 --> 01:42.750
satu sama lain sehingga Anda memiliki lebih sedikit

01:42.750 --> 01:45.190
impor untuk dikelola dan Anda tidak perlu

01:45.190 --> 01:46.950
mengelola impor yang berbeda

01:46.950 --> 01:50.030
secara manual dalam file HTML.

01:50.030 --> 01:52.180
Sekarang alternatif untuk namespaces

01:52.180 --> 01:55.750
dan bisa dibilang alternatif yang lebih penting dan modern, adalah

01:55.750 --> 02:00.750
dengan menggunakan ES6 Imports/Exports yang juga dikenal sebagai modul ES6, karena

02:01.870 --> 02:06.480
ternyata benar-benar terlepas dari TypeScript, skrip Java modern memiliki solusi

02:06.480 --> 02:09.940
untuk masalah ini juga karena Anda memiliki masalah ini tidak

02:09.940 --> 02:11.440
hanya dalam proyek TypeScript,

02:11.440 --> 02:13.140
tetapi dalam proyek skrip Java

02:13.140 --> 02:15.850
yang lebih besar.

02:15.850 --> 02:18.200
Java script modern mendukung pernyataan

02:18.200 --> 02:21.150
impor dan ekspor, yang memungkinkan Anda untuk menyatakan

02:21.150 --> 02:23.110
file mana yang bergantung pada file

02:23.110 --> 02:24.910
lain dan kemudian Anda memiliki

02:24.910 --> 02:27.920
semua file individual ini tetapi Anda tidak perlu mengelola

02:27.920 --> 02:30.560
impor secara manual, sebagai gantinya browser,

02:30.560 --> 02:33.770
browser modern melakukan itu.

02:33.770 --> 02:36.020
Mereka memahaminya dan secara otomatis mengunduh

02:36.020 --> 02:38.800
dan menjalankan file yang bergantung pada file lain.

02:38.800 --> 02:41.370
Anda menggunakan sintaks impor/ekspor untuk itu

02:41.370 --> 02:43.470
dan TypeScript juga mendukung ini.

02:43.470 --> 02:46.870
Jadi karena itu Anda dapat menggunakannya TypeScript tanpa masalah.

02:46.870 --> 02:48.700
Anda mengkompilasi per file tetapi

02:48.700 --> 02:50.810
Anda hanya perlu satu impor skrip karena

02:50.810 --> 02:53.680
seperti yang baru saja saya sebutkan, browser modern

02:53.680 --> 02:56.350
tahu bagaimana cara mengambil semua dependensi

02:56.350 --> 02:58.570
lainnya dan Anda juga akan melihatnya beraksi

02:58.570 --> 03:00.710
di bagian inti di sini.

03:00.710 --> 03:02.320
Sekarang satu catatan penting di

03:02.320 --> 03:03.830
sini, dengan itu kita secara teknis

03:03.830 --> 03:06.110
akan berakhir dengan beberapa file dan sementara

03:06.110 --> 03:09.140
kita tidak perlu mengelola impor secara manual, impor skrip, kita

03:09.140 --> 03:11.550
masih memiliki beberapa kelemahan karena itu karena

03:11.550 --> 03:13.730
setiap file yang Anda andalkan perlu diunduh

03:13.730 --> 03:15.130
secara terpisah yang berarti

03:15.130 --> 03:16.900
lebih banyak permintaan HTTP dan sebagainya

03:16.900 --> 03:19.460
dan oleh karena itu Anda dapat menggabungkan file bersama

03:19.460 --> 03:22.210
untuk mengerjakan beberapa file selama pengembangan tetapi

03:22.210 --> 03:24.860
mengirimkan satu file untuk produksi tetapi Anda memerlukan

03:24.860 --> 03:30.840
alat pihak ketiga untuk itu, Misalnya Webpack, dan saya akan menunjukkan kepada Anda bagaimana cara kerjanya juga tetapi di

03:30.840 --> 03:39.500
bagian terpisah di mana kita akan melihat Webpack dan TypeScript dan mengapa kita menggunakannya dan bagaimana kita menggunakannya.

03:39.500 --> 03:41.100
Jadi untuk saat ini mari kita gunakan

03:41.100 --> 03:43.900
kedua pendekatan ini dalam bentuk dasarnya dan mari kita

03:43.900 --> 03:45.870
lihat bagaimana kita dapat meningkatkan

03:45.870 --> 03:48.853
kode kita dengan memisahkannya di beberapa file.
