WEBVTT

00:02.120 --> 00:02.953
Eğitmen: Yani bu

00:02.953 --> 00:04.960
önemli bir ilk seçenekler dizisiydi.

00:04.960 --> 00:07.520
Şimdi bu katı seçenekleri inceleyelim

00:07.520 --> 00:09.860
çünkü bunlar oldukça ilginç.

00:09.860 --> 00:12.150
Bu strict true seçeneği vardır ve aslında bunun

00:12.150 --> 00:13.590
yaptığı şey tüm katı tip denetimi

00:13.590 --> 00:16.750
seçeneklerini etkinleştirmektir, bu nedenle bunu etkili

00:16.750 --> 00:18.830
bir şekilde ayarlamak, tüm bu seçenekleri

00:18.830 --> 00:22.110
ayrı ayrı ayarlamışsınız gibi aynıdır.

00:22.110 --> 00:24.830
Yani tüm bu seçenekleri tek tek ayarlayabilir ya da

00:24.830 --> 00:27.110
sadece bu seçeneği ayarlayabilirsiniz.

00:27.110 --> 00:29.510
Elbette, bazı seçeneklerin yanlış olarak ayarlanmasını

00:29.510 --> 00:33.020
istiyorsanız, seçenekleri tek tek ayarlamak istersiniz.

00:33.020 --> 00:34.790
Çünkü aksi takdirde hepsi doğru olarak ayarlanır.

00:34.790 --> 00:36.520
Hepsinin true olarak ayarlanmasını istiyorsanız,

00:36.520 --> 00:39.290
sadece bu seçeneği kullanmak elbette daha kısa yol olacaktır.

00:39.290 --> 00:41.360
Peki bu seçenekler ne işe yarıyor?

00:41.360 --> 00:43.213
noImplicitAny ile başlayalım.

00:44.282 --> 00:47.410
noImplicitAny daha iyi kod yazmamıza yardımcı olan oldukça

00:47.410 --> 00:49.180
ilginç bir seçenektir.

00:49.180 --> 00:51.370
Burada analitik dosyamıza gidelim

00:51.370 --> 00:53.963
ve orada diyelim ki bir veri seçeneği alan

00:55.270 --> 00:58.070
sendAnalytics adlı bir fonksiyon ekleyelim

00:58.070 --> 01:01.010
ve bunu bir sunucuya gönderebiliriz ama burada

01:01.010 --> 01:03.430
sadece konsol günlüğü tutuyorum.

01:03.430 --> 01:07.500
Ardından sendAnalytics'i verilerle, yani dizeyle birlikte

01:07.500 --> 01:08.920
çağırıyorum.

01:08.920 --> 01:11.080
Gördüğünüz gibi IDE'm zaten burada şikayet

01:11.080 --> 01:13.160
ediyor ve derleyici TypeScript de şikayet

01:13.160 --> 01:14.960
ediyor, çünkü bunu derlemeye çalıştığımda

01:14.960 --> 01:17.040
ikisi birbirine bağlı.

01:17.040 --> 01:20.070
Parametre verileri örtük olarak herhangi bir türe sahiptir.

01:20.070 --> 01:21.350
Yani bu noImplicitAny

01:21.350 --> 01:23.940
seçeneği ile ilgili gibi görünüyor.

01:23.940 --> 01:27.150
Aslında, bunu false olarak ayarlarsam, yani tüm katı seçenekleri

01:27.150 --> 01:29.300
true olarak ayarlarsam ancak bu seçeneği

01:29.300 --> 01:31.521
false olarak ayarlarsam, ki bunu yapabilirim,

01:31.521 --> 01:33.810
o zaman bu hata ortadan kalkar.

01:33.810 --> 01:37.140
Hem IDE'de hem de kodu derlediğimizde.

01:37.140 --> 01:38.730
Peki bu seçenek ne işe yarar?

01:38.730 --> 01:41.440
Bunu sağlar ve strict true nedeniyle

01:41.440 --> 01:44.210
tekrar açmak için tekrar yorum yapacağım,

01:44.210 --> 01:47.050
parametrelerimiz hakkında, kodumuzda

01:47.050 --> 01:49.410
çalıştığımız değerler hakkında

01:49.410 --> 01:53.020
net olmamızı sağlar.

01:53.020 --> 01:56.600
Burada TypeScript'e parametre olarak alacağımız verinin

01:56.600 --> 01:59.930
türü hakkında herhangi bir bilgi vermiyoruz.

01:59.930 --> 02:01.320
Ve yapmalıyız da.

02:01.320 --> 02:03.800
TypeScript bunu çıkarabiliyorsa, elbette

02:03.800 --> 02:05.360
sorun yok, ancak TypeScript

02:05.360 --> 02:08.770
bu satırdan bunu nasıl çıkarabilir, bu işlevin bu dosya

02:08.770 --> 02:11.470
yürütülmeden önce ilk olarak bildirildiğini

02:11.470 --> 02:12.950
unutmayın.

02:12.950 --> 02:15.080
Dolayısıyla, işlevin oluşturulduğu

02:15.080 --> 02:18.380
anda orada ne olacağını bilme şansı yoktur.

02:18.380 --> 02:20.100
Dolayısıyla, burada sadece türü bildirerek

02:20.100 --> 02:22.570
ve orada hangi türü kullandığımız konusunda net olarak

02:22.570 --> 02:24.253
bu hatayı düzeltebiliriz.

02:25.100 --> 02:29.530
Şimdi, burada bunu true olarak ayarladığınız için kaydedilmiş bir

02:29.530 --> 02:32.650
değişkeniniz varsa, varsayılan türü any olmasına

02:32.650 --> 02:34.720
rağmen bu bildirimle ilgili bir

02:34.720 --> 02:37.670
hata almayacağınızı lütfen unutmayın.

02:37.670 --> 02:39.250
Değişkenler için bu sorun değildir.

02:39.250 --> 02:40.910
Parametreler için uygun değil.

02:40.910 --> 02:42.480
Değişkenler için neden sorun yok?

02:42.480 --> 02:44.370
Çünkü TypeScript'in değişkenler için yaptığı

02:44.370 --> 02:45.940
şey, değişkenler için mümkün olan şey,

02:45.940 --> 02:47.040
burada mümkün değildir çünkü

02:47.040 --> 02:48.880
önce fonksiyon oluşturulur.

02:48.880 --> 02:52.490
Burada TypeScript, atadığınız değerleri takip edebilir.

02:52.490 --> 02:54.650
Gördüğünüz gibi, tamam, burada bu

02:54.650 --> 02:56.720
şekilde günlüğe kaydettim, şimdi

02:56.720 --> 02:58.573
onu true olarak ayarladım, bu

02:59.430 --> 03:04.430
nedenle, bundan sonra, konsol günlüğü burada günlüğe kaydedilirse, bu bir boolean

03:06.700 --> 03:08.030
olur.

03:08.030 --> 03:10.300
Yani TypeScript burada kodunuzun akışını

03:10.300 --> 03:11.893
anlayabilir ve bu nedenle burada

03:11.893 --> 03:15.430
bir tür konusunda kesin olmanıza gerek yoktur.

03:15.430 --> 03:18.020
Elbette, yeni değeri serbestçe atayabileceğinizden kaçınmak

03:18.020 --> 03:20.310
istiyorsanız kesin olmak istersiniz, ki bunu burada

03:20.310 --> 03:22.940
yapabilirsiniz çünkü değer any türündedir.

03:22.940 --> 03:25.700
Dolayısıyla, bundan kaçınmak için hala bir tür atamak istersiniz,

03:25.700 --> 03:27.680
ancak TypeScript en azından çağırdığınız

03:27.680 --> 03:29.490
kodun o anda sahip olduğu türle çalışıp

03:29.490 --> 03:31.410
çalışmadığını öğrenebilir.

03:31.410 --> 03:32.410
Burada durum böyle değildir

03:32.410 --> 03:35.360
çünkü orada fonksiyon siz onu çağırmadan önce tanımlanır ve bu nedenle

03:35.360 --> 03:37.800
TypeScript'in oraya aktardığınız şeyin fonksiyonun

03:37.800 --> 03:39.570
içinde kullanılıp kullanılamayacağını

03:39.570 --> 03:41.393
bilmesi mümkün değildir.

03:43.280 --> 03:46.020
strictNullChecks hiçbir zaman önemli bir seçenek değildir.

03:46.020 --> 03:48.520
Aslında burada sahip olduğumuz düğme seçimimizle

03:48.520 --> 03:49.410
ilgilidir.

03:49.410 --> 03:51.820
İşe yaraması için bu ünlem işaretini buraya eklemem gerektiğini

03:51.820 --> 03:52.670
unutmayın.

03:52.670 --> 03:54.380
Aksi takdirde, bir hata alırdım.

03:54.380 --> 03:56.220
Şimdi strictNullChecks değerini

03:56.220 --> 03:58.430
false olarak ayarlayarak ünlem işareti

03:58.430 --> 04:02.090
eklemeden de bu hatadan kurtulabiliriz.

04:02.090 --> 04:04.200
O halde bunu burada yapalım ve kaydedelim.

04:04.200 --> 04:07.860
Ve gördüğünüz gibi bu hata artık burada yok.

04:07.860 --> 04:10.120
Ve tüm dosyaları derleyebilirim.

04:10.120 --> 04:12.340
Şimdi strictNullChecks ne işe yarar?

04:12.340 --> 04:16.160
TypeScript'e, potansiyel olarak null değer barındırabilecek değerlere

04:16.160 --> 04:19.410
nasıl erişeceğiniz ve bu değerlerle nasıl çalışacağınız

04:19.410 --> 04:22.530
konusunda oldukça katı olmasını söylerler.

04:22.530 --> 04:24.850
Ve buradaki düğme boş olabilir.

04:24.850 --> 04:29.210
Her zaman bir düğme öğesini işaret etmez.

04:29.210 --> 04:31.390
Her zaman böyle bir öğeyi işaret etmez,

04:31.390 --> 04:34.220
çünkü burada böyle bir seçiciniz olsa bile,

04:34.220 --> 04:38.490
bu kodun çalıştığı sayfada bir düğme bulunmayabilir.

04:38.490 --> 04:40.840
Bu nedenle TypeScript bunu söyleyemez

04:40.840 --> 04:44.900
çünkü html dosyanızın içine dalıp ona bakmaz.

04:44.900 --> 04:48.240
Bunun başarılı olup olmayacağını söylemek mümkün değil.

04:48.240 --> 04:53.130
Ve eğer bu bir işaretçi ve null bir düğüm döndüremezse, o zaman null,

04:53.130 --> 04:56.650
daha doğrusu tanımlanmamış olarak döner, ancak

04:56.650 --> 04:59.090
bu burada eşit olarak ele alınır.

04:59.090 --> 05:01.610
Bu nedenle, bu düğme null değer tutabilir ve bu nedenle

05:01.610 --> 05:03.530
bu kod başarısız olabilir.

05:03.530 --> 05:06.610
Aslında, buradaki düğmeyi yorumlarsam, şimdi her şeyi

05:06.610 --> 05:08.480
derlersem çalışır çünkü null kontrollerini

05:08.480 --> 05:10.733
devre dışı bıraktım.

05:12.000 --> 05:14.100
Ancak şimdi bir çalışma zamanı hatası alıyorum

05:14.100 --> 05:16.210
çünkü olay dinleyicisi addEventListener'ı

05:16.210 --> 05:18.230
null üzerinde çağıramıyorum.

05:18.230 --> 05:20.970
Ve burada boşum çünkü düğmem yok.

05:20.970 --> 05:23.110
Şimdi bu, strictNullChecks öğesini

05:23.110 --> 05:26.760
true olarak ayarlayarak kaçınabileceğimiz bir hatadır.

05:26.760 --> 05:30.340
Ve eğer strict değerini true olarak ayarlarsak bu otomatik olarak ayarlanır.

05:30.340 --> 05:34.450
TypeScript bunun olabileceğini öngörür ve bu nedenle

05:34.450 --> 05:38.600
bizi bunun etrafında çalışmaya zorlar.

05:38.600 --> 05:40.640
Şimdi ucuz bir geçici çözüm, buradaki

05:40.640 --> 05:42.820
ünlem işareti operatörüdür.

05:42.820 --> 05:46.020
Bu, TypeScript'e, geliştirici olarak bu

05:46.020 --> 05:48.360
düğmenin var olduğunu veya bu işlemin

05:48.360 --> 05:53.360
null olmayan bir değer vereceğini bildiğinizi söyler.

05:53.710 --> 05:55.830
Şimdi belki yaparsınız, HTML kodu üzerinde

05:55.830 --> 05:58.990
çalıştığınızı ve burada bir düğme olduğunu, buradaki

05:58.990 --> 06:00.430
bu seçicinin çalışacağını

06:00.430 --> 06:03.310
biliyorsanız kesinlikle yaparsınız.

06:03.310 --> 06:05.610
Dolayısıyla, bu senaryoda ünlem işaretini kullanmakta

06:05.610 --> 06:06.623
bir sakınca yoktur.

06:07.600 --> 06:09.040
Çalışıp çalışmadığından

06:09.040 --> 06:11.120
emin olmadığınız ve sadece çalışmasını

06:11.120 --> 06:13.050
umduğunuz başka bir senaryonuz

06:13.050 --> 06:14.170
varsa, o zaman başarısız

06:14.170 --> 06:18.210
olabilecek kodu bir if kontrolüne sarmak daha iyi olabilir, tabii ki

06:18.210 --> 06:21.570
çalışma zamanında da orada olacaktır.

06:21.570 --> 06:24.960
Burada basitçe button'un true olup olmadığını kontrol edebilirsiniz,

06:24.960 --> 06:27.510
ancak null ya da undefined ise doğru olmayacaktır.

06:27.510 --> 06:30.060
Ve bu kodu buradaki if kontrolüne taşıyın.

06:30.060 --> 06:32.470
Şimdi ünlem işareti olmasa bile, strictNullChecks

06:32.470 --> 06:35.810
modunda hata almayız çünkü TypeScript bu kodun bu

06:35.810 --> 06:37.600
if deyiminin içinde olduğunu

06:37.600 --> 06:39.750
ve bu if deyiminin düğmenin null

06:39.750 --> 06:41.991
olmadığından emin olduğunu ve bunun

06:41.991 --> 06:46.310
başarısız olmayacağını anlar.

06:46.310 --> 06:49.310
Yani bu aslında daha temiz bir geçici çözüm olabilir.

06:49.310 --> 06:51.060
Ancak, elbette, koddan tasarruf

06:51.060 --> 06:54.350
etmek için, bir şeyin var olduğunu kesin olarak biliyorsanız,

06:54.350 --> 06:56.550
ünlem işaretini kullanmak daha kısa ve kesinlikle

06:56.550 --> 06:58.320
iyi bir seçenektir.

06:58.320 --> 07:00.450
Burada her ikisini de görmemiz için her ikisini de söyledim,

07:00.450 --> 07:02.450
elbette sadece iki şeyden birine ihtiyacınız var,

07:02.450 --> 07:04.520
ya if işaretine ya da ünlem işaretine.

07:04.520 --> 07:07.680
strictFunctionTypes burada, birçok uygulamada

07:07.680 --> 07:12.010
sahip olmayabileceğiniz bazı niş kutuları yakalayan biraz

07:12.010 --> 07:14.830
daha gelişmiş bir ayardır.

07:14.830 --> 07:17.340
Bu, kuruyor olabileceğiniz işlev türleriyle

07:17.340 --> 07:18.380
ilgilidir.

07:18.380 --> 07:20.650
Yani fonksiyonların içindeki tipler değil,

07:20.650 --> 07:23.690
ancak bir fonksiyonun parametreleri ve geri dönüş değeri

07:23.690 --> 07:26.220
açısından nasıl görünmesi gerektiğini tanımlarsanız

07:26.220 --> 07:27.840
ve temel modülde öğrendiğiniz

07:27.840 --> 07:29.990
böyle bir fonksiyon tipi oluşturursanız,

07:29.990 --> 07:32.650
o zaman henüz öğrenmediğimiz ve henüz kullanmadığımız

07:32.650 --> 07:39.683
sınıflar ve kalıtım ile çalışıyorsanız kutuyu tanıtabilirsiniz ve bu nedenle şimdilik bunu görmezden gelelim.

07:40.578 --> 07:43.630
strictBindCallApply, bind, call veya apply

07:43.630 --> 07:46.840
ile çalışıyorsanız yardımcı olabilir.

07:46.840 --> 07:49.680
Bunun için hızlıca bir örnek görelim.

07:49.680 --> 07:52.040
Burada butonumuz ve fonksiyonumuz var.

07:52.040 --> 07:57.040
Diyelim ki bu, burada function anahtar sözcüğüyle tanımladığımız bir

07:57.780 --> 08:01.100
fonksiyon ya da bir hata fonksiyonu olsun.

08:01.100 --> 08:03.650
Fark etmez, burada fonksiyon anahtar sözcüğünü kullanacağım.

08:04.731 --> 08:09.731
clickHandler, ve orada ben konsol. log tıklandı.

08:11.960 --> 08:13.810
Ve şimdi burada clickHandler'a işaret ediyoruz

08:13.810 --> 08:15.560
ve bazı nedenlerden dolayı, bu yürütüldüğünde

08:15.560 --> 08:17.670
belirli argümanları aktardığımızdan veya buradaki

08:17.670 --> 08:19.330
this anahtar kelimesini belirli bir

08:19.330 --> 08:22.780
değere ayarladığımızdan emin olmak istiyoruz.

08:22.780 --> 08:26.480
Şimdi burada bir dize olması gereken bir mesaj argümanı beklediğimizi

08:26.480 --> 08:28.110
varsayalım.

08:28.110 --> 08:32.110
Ve bunun çıktısını da burada almak istiyoruz.

08:32.110 --> 08:34.400
Şimdi, clickHandler addEventListener'a

08:34.400 --> 08:36.010
bu şekilde aktarıldığından,

08:36.010 --> 08:39.080
tarayıcı temelde bunu bizim için yürütür, eğer aktarılacak

08:39.080 --> 08:41.070
argümanları önceden yapılandırmak

08:41.070 --> 08:43.570
istiyorsak, bind kullanabiliriz.

08:43.570 --> 08:47.000
Ve bind, ilk argüman olarak, this anahtar sözcüğünü

08:47.000 --> 08:49.320
bağlamak istediğimiz şeyi alır.

08:49.320 --> 08:51.650
Ve burada bunun bizim için önemli olmadığını

08:51.650 --> 08:53.580
söyleyebiliriz çünkü bunu işlevde kullanmıyoruz,

08:53.580 --> 08:55.930
bu yüzden null'a bağlıyoruz.

08:55.930 --> 08:57.700
Şimdi burada bir hata aldığımı görüyorsunuz.

08:57.700 --> 09:00.610
strictBindCallApply değerini false olarak

09:00.610 --> 09:04.613
ayarlarsam önlenebilecek bir hata alıyorum.

09:07.040 --> 09:08.680
Şimdi hatanın gittiğini görüyorsunuz.

09:08.680 --> 09:10.501
Peki bu seçenek ne işe yarıyor?

09:10.501 --> 09:14.180
Temel olarak bind, call veya apply fonksiyonlarından hangisini

09:14.180 --> 09:16.020
çağırdığınızı kontrol eder.

09:16.020 --> 09:20.080
Ve burada kurduğunuz şeyin mantıklı olup olmadığını kontrol eder.

09:20.080 --> 09:23.440
Ve burada TypeScript bir argüman istediğimizi, clickHandler'da

09:23.440 --> 09:25.450
parametre istediğimizi görür.

09:25.450 --> 09:28.260
Ancak bind ile bunu yapılandırmıyoruz.

09:28.260 --> 09:30.600
Bu nedenle burada bir hata alıyoruz.

09:30.600 --> 09:32.180
Bunu tekrar true olarak ayarlarsam

09:32.180 --> 09:34.000
ya da yorumsuz bırakırsam, çünkü elbette

09:34.000 --> 09:36.230
strict değerini true olarak ayarlayarak varsayılan

09:36.230 --> 09:37.870
olarak true olarak ayarlanır, bu nedenle

09:37.870 --> 09:39.790
hatayı tekrar alırız.

09:39.790 --> 09:42.350
Şimdi burada bir argüman beklemeseydik, yalnızca

09:42.350 --> 09:44.750
mesajı kaldırdığımızda hatanın ortadan kalkacağını

09:44.750 --> 09:46.200
görüyorsunuz, çünkü TypeScript

09:46.200 --> 09:48.140
kodumuzu anlıyor ve bu yönteme veya bu

09:48.140 --> 09:50.660
işleve herhangi bir argüman iletmediğinizi görüyor

09:50.660 --> 09:52.580
çünkü herhangi bir argüman almıyor, bu

09:52.580 --> 09:54.760
yüzden sorun yok.

09:54.760 --> 09:57.420
Ama tabii ki burada bir tane istediğimiz için hata alıyoruz.

09:57.420 --> 10:00.880
Çözüm, iletmek istediğiniz ilk argüman olan

10:00.880 --> 10:04.350
bu ikinci argümanı burada sağlamaktır.

10:04.350 --> 10:06.290
Şimdi TypeScript burada gerçekten akıllı.

10:06.290 --> 10:08.120
Örneğin, bir sayı girersem yine de

10:08.120 --> 10:10.310
şikayet eder çünkü burada bir dizeye ihtiyacım

10:10.310 --> 10:11.610
olduğunu anlar.

10:12.500 --> 10:15.960
Rica ederim gibi doğru bir dize geçersem,

10:15.960 --> 10:17.350
artık şikayet etmiyor

10:17.350 --> 10:19.070
çünkü bunu anlamıyor

10:19.070 --> 10:21.210
ve bunun buradaki işlev tanımımla

10:21.210 --> 10:24.840
eşleştiğini görüyor.

10:24.840 --> 10:27.370
Dolayısıyla bu, bind, call veya apply öğelerini yanlışlıkla

10:27.370 --> 10:30.260
kodunuzla çalışmayan bir şekilde kullanmamanızı sağlayan

10:30.260 --> 10:32.743
çok kullanışlı bir davranıştır.

10:33.930 --> 10:36.600
Şimdi sınıflarla çalıştığımızda strictPropertyInitialization

10:36.600 --> 10:37.810
önemli hale geliyor.

10:37.810 --> 10:39.213
Şimdilik görmezden gelebiliriz.

10:39.213 --> 10:41.890
noImplicitBu da şu anda önemli değil.

10:41.890 --> 10:43.650
Bu, this anahtar sözcüğüyle ilgilidir

10:43.650 --> 10:45.980
ve TypeScript temel olarak, this anahtar sözcüğünü

10:45.980 --> 10:48.240
neyi ifade ettiği belli olmayan bir yerde kullanırsanız

10:48.240 --> 10:51.020
sizi uyarmaya çalışır.

10:51.020 --> 10:53.210
alwaysStrict ise basitçe oluşturulan

10:53.210 --> 10:55.560
JavaScript dosyalarının katı mod kullanıp

10:55.560 --> 10:58.663
kullanmadığını kontrol eder, böylece bu eklenir.

10:59.710 --> 11:02.383
Bununla birlikte, tüm bu katı seçenekleri ele aldık.
