WEBVTT

00:02.270 --> 00:03.850
Người hướng dẫn: Vì vậy, chúng

00:03.850 --> 00:07.450
tôi đang sử dụng các loại số, boolean và chuỗi cốt lõi.

00:07.450 --> 00:10.840
Và ở đây trong danh sách các tham số của hàm này,

00:10.840 --> 00:13.970
chúng tôi luôn chỉ định rõ ràng các loại bằng

00:13.970 --> 00:16.540
dấu hai chấm sau tên tham số, sau đó

00:16.540 --> 00:18.410
là tên của loại.

00:18.410 --> 00:21.350
Vì vậy, ở đây, các tên là số, boolean, chuỗi.

00:21.350 --> 00:23.100
Và trong trường hợp bạn đang thắc

00:23.100 --> 00:25.420
mắc, đây là những mã định danh đặc biệt.

00:25.420 --> 00:28.530
Điều này tổng thể, ở đây, là một cú pháp đặc biệt được

00:28.530 --> 00:30.170
TypeScript thêm vào.

00:30.170 --> 00:32.900
Nó không phải là một phần của mã JavaScript được biên dịch.

00:32.900 --> 00:35.040
Nếu chúng tôi kiểm tra mã đó ở đây,

00:35.040 --> 00:37.280
thì các kiểu gán này sẽ biến mất vì JavaScript

00:37.280 --> 00:39.530
không hỗ trợ chúng.

00:39.530 --> 00:42.390
Dấu hai chấm này sau một biến hoặc

00:42.390 --> 00:43.920
sau một tham số.

00:43.920 --> 00:46.320
Và sau đó là số và boolean và chuỗi.

00:46.320 --> 00:48.290
Những từ khóa đặc biệt này.

00:48.290 --> 00:50.840
Điều này được giới thiệu bởi TypeScript.

00:50.840 --> 00:53.500
Trình biên dịch TypeScript hiểu nó.

00:53.500 --> 00:55.480
IDE ở đây hỗ trợ TypeScript và do

00:55.480 --> 00:58.580
đó không phàn nàn về những từ khóa đặc biệt này.

00:58.580 --> 01:01.760
JavaScript không hiểu cú pháp này.

01:01.760 --> 01:04.590
Nó không hiểu dấu hai chấm sau một tham số hoặc

01:04.590 --> 01:06.560
dấu hai chấm sau một biến và sau

01:06.560 --> 01:09.190
đó là từ khóa số hoặc chuỗi đặc biệt.

01:09.190 --> 01:11.540
JavaScript không hiểu điều này và do đó, đây không

01:11.540 --> 01:13.560
phải là một phần của đầu ra JavaScript.

01:13.560 --> 01:15.920
Nó thực sự chỉ được sử dụng bởi trình biên dịch TypeScript.

01:15.920 --> 01:18.130
Và sau đó, nó là một trình biên

01:18.130 --> 01:21.820
dịch vì nó chuyển mã này thành mã JavaScript.

01:21.820 --> 01:24.880
Lưu ý bên lề, bạn cũng thấy nó chuyển đổi const cho

01:24.880 --> 01:27.700
var nhưng đó là điều tôi sẽ quay lại sau.

01:27.700 --> 01:30.590
Vì vậy, chúng tôi có các bài tập loại rõ ràng của mình

01:30.590 --> 01:33.060
ở đây và nó chỉ được hiểu bởi TypeScript.

01:33.060 --> 01:35.763
Tuyệt, tại sao chúng ta không có chúng ở dưới đó?

01:36.880 --> 01:39.890
Tôi không có bài tập loại rõ ràng ở đây.

01:39.890 --> 01:41.180
Và, nhân tiện, cũng không

01:41.180 --> 01:43.450
có ở đây khi chúng ta tính toán kết quả,

01:43.450 --> 01:45.530
chẳng hạn, vì TypeScript có một tính

01:45.530 --> 01:48.400
năng tích hợp được gọi là suy luận kiểu.

01:48.400 --> 01:51.000
Điều này có nghĩa là TypeScript hoạt

01:51.000 --> 01:53.010
động tốt nhất và nó hoạt động

01:53.010 --> 01:56.400
khá tốt ở đó, để hiểu bạn có loại nào trong một biến

01:56.400 --> 01:58.860
hoặc hằng số nhất định.

01:58.860 --> 02:02.300
Và ở đây, ví dụ, nó hiểu rằng số1 cuối

02:02.300 --> 02:05.780
cùng sẽ luôn có kiểu số, bởi vì bạn khởi

02:05.780 --> 02:08.020
tạo nó bằng một số.

02:08.020 --> 02:09.950
Bây giờ, đây thực sự là một hằng số, vì

02:09.950 --> 02:11.740
vậy nó thậm chí còn cụ thể hơn thế.

02:11.740 --> 02:15.350
Và loại nó xác định ở đây không chỉ là bất

02:15.350 --> 02:17.490
kỳ số nào, mà là số năm.

02:17.490 --> 02:20.110
Bởi vì bạn sẽ không thể gán một số

02:20.110 --> 02:23.870
mới hoặc một giá trị mới cho một giá trị const.

02:23.870 --> 02:25.840
Nếu bạn thay đổi điều này thành một biến,

02:25.840 --> 02:28.460
vì vậy nếu bạn sử dụng let thay thế, thì tất nhiên điều này

02:28.460 --> 02:30.180
sẽ không vi phạm bất cứ điều gì.

02:30.180 --> 02:32.940
Chúng ta có thể sử dụng một biến ở đó, nó có thể không phải là cách

02:32.940 --> 02:34.540
tốt nhất vì giá trị này không bao giờ

02:34.540 --> 02:36.210
thay đổi nhưng nó cũng không quá tệ.

02:36.210 --> 02:38.260
Nhưng bây giờ nếu di chuột qua cái này, chúng

02:38.260 --> 02:41.210
ta sẽ thấy TypeScript không nói, được rồi, cái này phải là năm.

02:41.210 --> 02:45.510
Nhưng nó vẫn phát hiện ra rằng loại ở đây là một số.

02:45.510 --> 02:49.260
Bây giờ, chúng ta hoàn toàn có thể tự viết mã này ở đây.

02:49.260 --> 02:51.970
Chúng ta có thể thêm dấu hai chấm sau tên biến

02:51.970 --> 02:53.870
ở phía bên trái của dấu bằng, sau

02:53.870 --> 02:55.590
đó là tên của loại.

02:55.590 --> 02:56.880
Vì vậy, về cơ bản giống như

02:56.880 --> 02:59.470
chúng ta đã làm trong các tham số của chức năng này.

02:59.470 --> 03:01.860
Tuy nhiên, điều này là dư thừa và nó thực

03:01.860 --> 03:04.620
sự cũng không được coi là một thông lệ tốt.

03:04.620 --> 03:06.790
Bởi vì TypeScript có thể suy

03:06.790 --> 03:09.990
ra loại này một cách hoàn hảo từ đó.

03:09.990 --> 03:13.690
Vì vậy, gán điều này không phải là một ý tưởng tốt.

03:13.690 --> 03:16.420
Điều này chỉ thay đổi nếu bạn tạo biến này theo

03:16.420 --> 03:18.053
cách chưa được chỉ định.

03:19.000 --> 03:22.130
Như thế này, nếu bạn không khởi tạo nó ngay lập tức.

03:22.130 --> 03:25.700
Sau đó, bạn nên cho TypeScript biết giá trị

03:25.700 --> 03:29.070
nào cuối cùng sẽ được lưu trữ trong đó.

03:29.070 --> 03:32.590
Vì vậy, sau này khi bạn gán một giá trị cho nó, và tất nhiên ở đây sẽ

03:32.590 --> 03:34.080
hơi dư thừa khi chia giá trị

03:34.080 --> 03:35.320
này thành hai dòng.

03:35.320 --> 03:37.800
Tôi chỉ làm điều này cho mục đích demo.

03:37.800 --> 03:39.480
Nhưng bây giờ nếu tôi chỉ định cái

03:39.480 --> 03:42.460
này ở đây, cái này sẽ bị hỏng vì tôi đã nói trước với TypeScript

03:42.460 --> 03:44.630
rằng cái này sẽ thuộc loại số.

03:44.630 --> 03:45.610
Bạn không cần phải làm điều đó.

03:45.610 --> 03:47.420
Nó cũng hoạt động nếu bạn không làm điều đó.

03:47.420 --> 03:50.330
Nhưng bây giờ bạn cũng có thể thêm năm biến này và

03:50.330 --> 03:51.630
bạn sẽ không gặp lỗi vì

03:51.630 --> 03:53.470
bạn không cho TypeScript biết

03:53.470 --> 03:55.350
bất kỳ điều gì về loại sẽ được lưu

03:55.350 --> 03:56.975
trữ trong biến này và do đó TypeScript

03:56.975 --> 03:59.630
cho phép bất kỳ loại nào.

03:59.630 --> 04:02.600
Thay vào đó, nếu bạn thêm số dấu hai chấm ở đây, bạn

04:02.600 --> 04:05.417
đang nói với TypeScript, "Này, cuối cùng thì",

04:05.417 --> 04:07.370
một số sẽ được lưu trữ trong đó. Và do đó, nếu sau này bạn lưu trữ thứ gì đó

04:07.370 --> 04:10.060
khác trong đó, chẳng hạn như trong trường hợp chúng tôi

04:10.060 --> 04:12.470
đã lưu trữ một chuỗi này, bạn sẽ gặp lỗi ở đây trong

04:12.470 --> 04:15.170
IDE và tất nhiên là nếu bạn đã biên dịch mã của mình.

04:15.170 --> 04:17.570
Chúng tôi sẽ nhận được lỗi mà chúng tôi đã thấy trước đây.

04:17.570 --> 04:20.253
Vì vậy, đây là cách bạn có thể chỉ định các loại.

04:22.300 --> 04:24.920
Bây giờ, ngay cả khi TypeScript chỉ suy ra một

04:24.920 --> 04:27.830
loại và để tôi sửa lỗi này, nó sẽ mắng bạn nếu bạn phá

04:27.830 --> 04:29.310
vỡ kiểu suy luận đó.

04:29.310 --> 04:32.720
Thực ra, nói ngay cả vì tất nhiên nó làm

04:32.720 --> 04:35.670
là sai, tại sao nó không làm vậy?

04:35.670 --> 04:37.000
Loại suy luận có sẵn để bạn lưu mã

04:37.000 --> 04:39.750
của mình, để tránh việc bạn phải chỉ định loại theo cách thủ công.

04:39.750 --> 04:42.730
Tất nhiên, TypeScript sẽ hét vào mặt bạn nếu

04:42.730 --> 04:44.520
sau đó bạn sử dụng sai loại,

04:44.520 --> 04:46.510
loại mà nó không suy ra.

04:46.510 --> 04:48.640
Ví dụ: ở đây nếu resultPhrase

04:48.640 --> 04:52.460
được tạo bằng let để nó biến, thì TypeScript ở đây suy

04:52.460 --> 04:54.000
ra rằng đây sẽ là kiểu

04:54.000 --> 04:57.670
chuỗi vì chúng ta khởi tạo nó bằng một chuỗi.

04:57.670 --> 04:59.850
Vì vậy, về cơ bản, điều này tương

04:59.850 --> 05:03.060
đương với việc không khởi tạo nó và tự đặt loại,

05:03.060 --> 05:04.970
sau đó gán giá trị sau.

05:04.970 --> 05:07.410
Bây giờ, nếu chúng ta thay đổi resultPhrase

05:07.410 --> 05:12.310
thành, giả sử, 0 ở đây, vì bất kỳ lý do gì mà chúng ta có thể muốn làm điều đó, thì

05:12.310 --> 05:15.660
chúng ta sẽ gặp lỗi ở đây rằng kiểu 0 không thể gán được

05:15.660 --> 05:17.330
cho kiểu chuỗi.

05:17.330 --> 05:21.210
Và điều đó có ý nghĩa, phải không?

05:21.210 --> 05:22.690
TypeScript đã suy luận rằng chúng

05:22.690 --> 05:25.430
tôi muốn lưu trữ một chuỗi, chúng tôi hiện đang cố lưu

05:25.430 --> 05:27.290
trữ một số, chúng tôi gặp lỗi.

05:27.290 --> 05:28.530
Đó là công việc, nhiệm vụ cốt lõi của TypeScript.

05:28.530 --> 05:33.000
Kiểm tra các loại và la mắng chúng tôi nếu chúng tôi sử dụng

05:33.000 --> 05:35.280
chúng không đúng cách.
