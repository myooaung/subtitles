WEBVTT

1
00:00:02.040 --> 00:00:04.180
<v Teacher>So that was a very basic class.</v>

2
00:00:04.180 --> 00:00:05.930
Now when building classes,

3
00:00:05.930 --> 00:00:08.400
they often get more complex than that.

4
00:00:08.400 --> 00:00:10.800
And you might want to store more data in there.

5
00:00:10.800 --> 00:00:15.160
Let's say a department all should have employees.

6
00:00:15.160 --> 00:00:18.160
That could be an array,

7
00:00:18.160 --> 00:00:20.290
and initially it might be an empty array.

8
00:00:20.290 --> 00:00:23.520
And to also be a bit more precise about

9
00:00:23.520 --> 00:00:24.980
what you want to store in there,

10
00:00:24.980 --> 00:00:28.800
it could be a string array to keep it relatively simple.

11
00:00:28.800 --> 00:00:31.733
Now we could have a method here addEmployee.

12
00:00:33.030 --> 00:00:36.880
There we want an employee as an argument,

13
00:00:36.880 --> 00:00:39.430
which should just be a string in our example.

14
00:00:39.430 --> 00:00:42.650
Then we can set this.employees.push.

15
00:00:42.650 --> 00:00:47.320
So push a new employee onto our employee's array

16
00:00:47.320 --> 00:00:48.373
with this code.

17
00:00:50.750 --> 00:00:52.683
Now we can also add another method,

18
00:00:53.666 --> 00:00:55.749
printEmployeeInformation.

19
00:01:00.508 --> 00:01:05.508
And there I want to console.log(this.employees.length)

20
00:01:07.766 --> 00:01:12.766
and I also want to console.log(this.employees) itself.

21
00:01:15.510 --> 00:01:18.480
Now if we go down here, now we can comment out

22
00:01:18.480 --> 00:01:20.560
this code here, which would break again

23
00:01:20.560 --> 00:01:24.070
because we again don't fit the department description

24
00:01:24.070 --> 00:01:25.870
with our object down there.

25
00:01:25.870 --> 00:01:29.200
And instead here, on this accounting department,

26
00:01:29.200 --> 00:01:32.234
we can add an employee, let's say Max.

27
00:01:32.234 --> 00:01:35.400
And another employee, let's say Manu.

28
00:01:35.400 --> 00:01:37.690
And then besides describing it,

29
00:01:37.690 --> 00:01:41.520
I also want to get my employee information down there.

30
00:01:41.520 --> 00:01:44.600
If we save this, we should get this output,

31
00:01:44.600 --> 00:01:47.830
two employees and here's some information.

32
00:01:47.830 --> 00:01:50.240
Now that's all nice to have.

33
00:01:50.240 --> 00:01:52.700
One problem we have with this class is

34
00:01:52.700 --> 00:01:55.960
that we could change employees from outside,

35
00:01:55.960 --> 00:01:58.160
not only with add employee,

36
00:01:58.160 --> 00:02:01.710
but by directly accessing the employee's property,

37
00:02:01.710 --> 00:02:04.430
just as we can do it for the name as well, by the way.

38
00:02:04.430 --> 00:02:07.630
So what I mean is we could also go to accounting,

39
00:02:07.630 --> 00:02:10.560
and then reach out to employees,

40
00:02:10.560 --> 00:02:13.870
and maybe add another employee at index two,

41
00:02:13.870 --> 00:02:16.400
and there pass an Anna, like that.

42
00:02:16.400 --> 00:02:18.210
If we do that and we save it,

43
00:02:18.210 --> 00:02:20.290
we get three employees and we get Anna.

44
00:02:20.290 --> 00:02:22.710
Now you might think, well great, we got another way.

45
00:02:22.710 --> 00:02:25.230
Well when building more complex applications,

46
00:02:25.230 --> 00:02:27.980
you typically want to avoid something like this though.

47
00:02:27.980 --> 00:02:30.930
You wanna make sure that there is one clear path,

48
00:02:30.930 --> 00:02:34.870
one way of using your class, and that things like that,

49
00:02:34.870 --> 00:02:37.280
alternative ways of using it,

50
00:02:37.280 --> 00:02:38.530
are not really supported.

51
00:02:38.530 --> 00:02:41.230
Because if you're working in a bigger team,

52
00:02:41.230 --> 00:02:42.920
well then one colleague is going

53
00:02:42.920 --> 00:02:45.700
to use this approach for adding an employee

54
00:02:45.700 --> 00:02:48.050
and another colleague might use this approach.

55
00:02:48.050 --> 00:02:49.280
And you don't want this.

56
00:02:49.280 --> 00:02:52.640
You want to have one uniform way of doing this.

57
00:02:52.640 --> 00:02:55.960
Also, because maybe in the add employee method,

58
00:02:55.960 --> 00:02:58.420
you do more than just add it to the array.

59
00:02:58.420 --> 00:02:59.770
Maybe you first of all want

60
00:02:59.770 --> 00:03:02.400
to have some validation etc in here.

61
00:03:02.400 --> 00:03:04.940
So you might have extra code in there,

62
00:03:04.940 --> 00:03:06.610
which simply does not execute

63
00:03:06.610 --> 00:03:09.470
if you directly assign a new value

64
00:03:09.470 --> 00:03:12.970
or add a new value to the array with this line here.

65
00:03:12.970 --> 00:03:16.000
So you don't want to permit that employees

66
00:03:16.000 --> 00:03:19.884
is accessible like this from outside of the class.

67
00:03:19.884 --> 00:03:22.340
And TypeScript's got you covered.

68
00:03:22.340 --> 00:03:26.760
You can turn employees here into a private property,

69
00:03:26.760 --> 00:03:30.580
a private field by adding a private keyword

70
00:03:30.580 --> 00:03:32.220
in front of it.

71
00:03:32.220 --> 00:03:34.303
Now what private means is

72
00:03:34.303 --> 00:03:38.030
that employees is now a property,

73
00:03:38.030 --> 00:03:41.210
which is only accessible from inside the class,

74
00:03:41.210 --> 00:03:43.480
so from inside the creative object.

75
00:03:43.480 --> 00:03:46.700
So any method inside of the department class

76
00:03:46.700 --> 00:03:49.770
is able to still work with employees.

77
00:03:49.770 --> 00:03:52.570
But you can't access like this anymore.

78
00:03:52.570 --> 00:03:54.710
Here you see I'm now getting an error.

79
00:03:54.710 --> 00:03:57.280 line:15% 
If I try to save this, I get a compilation error

80
00:03:57.280 --> 00:03:59.870 line:15% 
that the property 'employees' is private

81
00:03:59.870 --> 00:04:03.550 line:15% 
and only accessible within the class 'department'.

82
00:04:03.550 --> 00:04:07.100
So now we force that when employees

83
00:04:07.100 --> 00:04:09.370
should be added to this department,

84
00:04:09.370 --> 00:04:12.690
people have to use the addEmployee method.

85
00:04:12.690 --> 00:04:16.760
Because they get an error if they write code like this.

86
00:04:16.760 --> 00:04:20.460
This is a so-called modifier here, the private keyword.

87
00:04:20.460 --> 00:04:23.470
And besides private, we also got public,

88
00:04:23.470 --> 00:04:25.000
which is the default though.

89
00:04:25.000 --> 00:04:26.590
You don't need to add public.

90
00:04:26.590 --> 00:04:29.590
So name like this is exactly the same

91
00:04:29.590 --> 00:04:31.650
as name with public in front of it.

92
00:04:31.650 --> 00:04:34.300
The difference is that public properties

93
00:04:34.300 --> 00:04:36.350
are accessible from outside.

94
00:04:36.350 --> 00:04:40.350
So for example here, I could also reach out to name

95
00:04:40.350 --> 00:04:43.600
and assign a new name here if I wanted to.

96
00:04:43.600 --> 00:04:45.260
That is possible.

97
00:04:45.260 --> 00:04:49.270
For private properties, this here is not possible.

98
00:04:49.270 --> 00:04:51.580
We can only use them from inside.

99
00:04:51.580 --> 00:04:52.800
Technically, by the way,

100
00:04:52.800 --> 00:04:55.700
JavaScript doesn't know public and private.

101
00:04:55.700 --> 00:04:59.630
Only in very modern versions added recently

102
00:04:59.630 --> 00:05:01.320
such a thing exists.

103
00:05:01.320 --> 00:05:03.650
In the past, JavaScript didn't know

104
00:05:03.650 --> 00:05:05.690
private or public properties.

105
00:05:05.690 --> 00:05:08.520
All properties always were public there.

106
00:05:08.520 --> 00:05:10.630
TypeScript introduces this feature,

107
00:05:10.630 --> 00:05:13.561
which of course does not work during runtime however,

108
00:05:13.561 --> 00:05:16.620
because JavaScript until recently

109
00:05:16.620 --> 00:05:18.780
only knew public properties.

110
00:05:18.780 --> 00:05:21.290
So this line here, frozen error

111
00:05:21.290 --> 00:05:23.130
during TypeScript compilation.

112
00:05:23.130 --> 00:05:27.000
If you compile it to JavaScript nonetheless,

113
00:05:27.000 --> 00:05:30.140
this code will still execute at runtime without errors

114
00:05:30.140 --> 00:05:32.800
because again, JavaScript on its own,

115
00:05:32.800 --> 00:05:34.900
until recently didn't know this concept.

116
00:05:34.900 --> 00:05:37.350
So depending on the version you're compiling for,

117
00:05:37.350 --> 00:05:38.720
it still won't know it.

118
00:05:38.720 --> 00:05:40.770
And therefore, TypeScript only supports this

119
00:05:40.770 --> 00:05:42.980
because it checks it during compilation,

120
00:05:42.980 --> 00:05:44.650
not at runtime.

121
00:05:44.650 --> 00:05:47.370
With it however, we can avoid code like this

122
00:05:47.370 --> 00:05:49.863
and force everyone to write cleaner code.

