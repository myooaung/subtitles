WEBVTT

00:02.260 --> 00:03.960
Instruktur: Dengan itu, kita hampir selesai dengan

00:03.960 --> 00:04.920
jenis-jenis inti.

00:04.920 --> 00:07.470
Ada satu jenis lagi, yang sudah kita lihat,

00:07.470 --> 00:09.390
dan itu adalah jenis apa saja.

00:09.390 --> 00:11.480
Tipe any adalah tipe paling fleksibel yang

00:11.480 --> 00:13.310
dapat Anda tetapkan di TypeScript.

00:13.310 --> 00:16.710
Tipe ini tidak memberitahukan TypeScript apapun.

00:16.710 --> 00:19.960
Ini pada dasarnya berarti Anda bisa menyimpan segala jenis nilai di sana.

00:19.960 --> 00:22.031
Kami tidak mendapat penugasan jenis tertentu.

00:22.031 --> 00:25.260
TypeScript pada dasarnya tidak akan pernah berteriak pada Anda

00:25.260 --> 00:27.040
ketika Anda menggunakan apapun.

00:27.040 --> 00:28.030
Kembali ke kode kita

00:28.030 --> 00:31.360
di sini, jika saya akan mengatur jenis kegiatan favorit ke any, tidak

00:31.360 --> 00:32.870
akan mendapatkan kesalahan.

00:32.870 --> 00:36.580
Jika mengaturnya ke sembarang larik, setidaknya saya memberitahu TypeScript

00:36.580 --> 00:39.220
bahwa aktivitas favorit adalah larik dari sesuatu.

00:39.220 --> 00:41.460
Jadi, jika saya hanya menyimpan satu nilai saja di sana,

00:41.460 --> 00:42.830
saya akan mendapatkan error.

00:42.830 --> 00:44.500
Tetapi selama itu adalah array, saya bisa

00:44.500 --> 00:46.638
menyimpan apa pun yang saya inginkan di sana.

00:46.638 --> 00:49.840
Jadi, apa pun benar-benar fleksibel.

00:49.840 --> 00:52.070
Dan ini bisa terdengar hebat di kepalan tangan,

00:52.070 --> 00:54.060
tetapi sebenarnya ini adalah kerugian

00:54.060 --> 00:58.290
besar dan Anda benar-benar ingin menghindarinya sebisa mungkin.

00:58.290 --> 01:00.170
Karena pada dasarnya semua mengambil semua

01:00.170 --> 01:02.512
keuntungan yang diberikan TypeScript kepada Anda.

01:02.512 --> 01:04.380
Ini memberi Anda pengalaman yang sama

01:04.380 --> 01:06.430
seperti yang Anda miliki dengan JavaScript

01:06.430 --> 01:10.480
vanilla di mana Anda juga harus mengetik apa pun pada semuanya.

01:10.480 --> 01:13.820
Setiap pada dasarnya memastikan bahwa kompiler TypeScript

01:13.820 --> 01:16.020
tidak dapat memeriksa apa pun, karena

01:16.020 --> 01:19.180
jika ada properti atau variabel apa pun yang dapat menyimpan

01:19.180 --> 01:20.818
nilai apa pun, maka tidak banyak

01:20.818 --> 01:23.687
yang perlu diperiksa, bukan?

01:23.687 --> 01:27.130
Jadi, Anda dapat menggunakan apa pun sebagai fallback jika Anda memiliki

01:27.130 --> 01:30.270
beberapa nilai, beberapa jenis data di mana Anda benar-benar tidak

01:30.270 --> 01:31.810
dapat mengetahui jenis data mana

01:31.810 --> 01:33.820
yang akan disimpan di sana dan di mana Anda mungkin

01:33.820 --> 01:37.050
menggunakan beberapa pemeriksaan runtime, seperti yang kami lakukan

01:37.050 --> 01:40.440
di sini, pada saat runtime untuk mempersempit apa yang ingin Anda lakukan

01:40.440 --> 01:42.660
untuk nilai-nilai tertentu.

01:42.660 --> 01:44.600
Maka Anda bisa memilih yang mana saja.

01:44.600 --> 01:48.210
Tetapi dalam kasus lain, Anda benar-benar ingin menghindari apa pun.

01:48.210 --> 01:51.120
Jika Anda memiliki kesempatan untuk mengetahui jenis data yang sedang

01:51.120 --> 01:54.090
Anda kerjakan, jelaskan secara eksplisit tentang hal itu.

01:54.090 --> 01:56.780
Biarkan inferensi TypeScript melakukan tugasnya atau secara

01:56.780 --> 01:58.817
eksplisit mengatur tipe Anda sendiri.

01:58.817 --> 02:01.783
Jangan kembali ke salah satu jika Anda tidak membutuhkannya.
