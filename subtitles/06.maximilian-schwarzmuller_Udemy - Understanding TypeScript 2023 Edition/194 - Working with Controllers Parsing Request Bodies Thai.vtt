WEBVTT

00:02.170 --> 00:03.860
ผู้สอน: ตอนนี้เราได้ลงทะเบียนบางเส้นทางแล้ว

00:03.860 --> 00:05.630
เรามาเพิ่มตรรกะสำหรับเส้นทางเหล่านี้กัน

00:05.630 --> 00:07.730
เพื่อที่ฉันจะเพิ่มโฟลเดอร์ตัวควบคุม

00:07.730 --> 00:13.650
ไม่จำเป็นต้องทำ แต่ฉันต้องการแบ่งตรรกะของฉันที่นี่เป็นตัวควบคุมและเส้นทางในโฟลเดอร์เส้นทาง

00:13.650 --> 00:21.990
และในตัวควบคุม ฉันจะเพิ่มสิ่งที่ต้องทำด้วย ts และตอนนี้จะมีฟังก์ชั่นคอนโทรลเลอร์ที่เราต้องการชี้จากภายในเส้นทางของเรา

00:21.990 --> 00:25.120
ในที่นี้ ฉันต้องการฟังก์ชันที่จะส่งออก และฉันจะสร้างมันเป็นฟังก์ชันลูกศร

00:25.120 --> 00:29.170
ซึ่งไม่ใช่สิ่งที่ต้องทำ และฉันจะตั้งชื่อนี้ว่า createTodo

00:29.170 --> 00:41.297
และเป็นฟังก์ชันที่จะรับ พารามิเตอร์ทั่วไปเหล่านี้ที่คุณได้รับในทุกฟังก์ชันมิดเดิลแวร์แบบด่วน คำขอ การตอบกลับ และฟังก์ชันถัดไป

00:41.297 --> 00:44.550
และเราเพิ่งเห็นว่าเราสามารถหาประเภทได้จากที่ไหน

00:44.550 --> 00:47.190
นำเข้าการร้องขอ การตอบกลับ

00:47.190 --> 00:50.460
และฟังก์ชันถัดไปจากด่วนได้

00:50.460 --> 00:52.800
สิ่งนี้นำเข้าประเภทเหล่านั้นมาให้เรา

00:52.800 --> 00:54.910
จากนั้นเราสามารถเพิ่มได้ที่นี่

00:54.910 --> 00:57.230
ในตอนนี้ การเพิ่มประเภทเหล่านี้ทั้งหมดที่นี่เสมอเหมือนที่เราทำในการจัดการข้อผิดพลาดมิดเดิลแวร์

00:57.230 --> 01:01.300
อาจเป็นเรื่องยุ่งยากเช่นกัน

01:01.300 --> 01:03.750
ใช้งานได้ แต่อาจสร้างความรำคาญได้

01:03.750 --> 01:05.190
ดังนั้นจึงมีทางลัด

01:05.190 --> 01:08.220
แทนที่จะตั้งค่าประเภทให้กับพารามิเตอร์เหล่านี้

01:08.220 --> 01:11.160
เราสามารถบอก TypeScript ได้ว่าเราต้องการเก็บฟังก์ชันประเภทใดในค่าคงที่

01:11.160 --> 01:19.530
createTodo นี้ และจากนั้นเราก็สามารถนำเข้าประเภท RequestHandler จาก express แล้วตั้งค่าที่นี่ createTodo เป็น พิมพ์

01:19.530 --> 01:24.340
RequestHandler

01:24.340 --> 01:28.780
และตอนนี้คุณเห็นว่า TypeScript รู้ว่าที่นี่เราได้รับคำขอ ที่นี่เราได้รับการตอบกลับ

01:28.780 --> 01:30.560
และที่นี่เราได้ฟังก์ชันถัดไป

01:30.560 --> 01:35.730
เนื่องจาก RequestHandler ของเราถูกกำหนดให้มีลักษณะเช่นนี้

01:35.730 --> 01:38.080
เป็นฟังก์ชันที่มีพารามิเตอร์สามตัว

01:38.080 --> 01:42.030
โดยที่พารามิเตอร์แรกคือคำขอ พารามิเตอร์ที่สองคือการตอบสนอง

01:42.030 --> 01:44.810
และพารามิเตอร์ที่สามคือฟังก์ชันถัดไป

01:44.810 --> 01:47.313
นี่จะทำให้การตั้งค่านี้ง่ายขึ้นที่นี่

01:48.195 --> 01:51.360
RequestHandler พร้อมใช้งานเสมอเพราะเราติดตั้งประเภทสำหรับด่วน

01:51.360 --> 01:55.270
ดังนั้นเราจึงสามารถเพิ่มการนำเข้านี้ได้ที่นี่

01:55.270 --> 01:57.940
โปรดทราบว่าการนำเข้านี้จะหายไปเสมอเมื่อคอมไพล์เป็น

01:57.940 --> 02:02.300
JavaScript เนื่องจากเราเพิ่งนำเข้าประเภทที่นี่

02:02.300 --> 02:05.030
นี่ไม่ใช่การนำเข้ารหัสใด ๆ ที่จะดำเนินการ

02:05.030 --> 02:06.930
เป็นเพียงการนำเข้าประเภท

02:06.930 --> 02:08.650
ดังนั้น ระหว่างการคอมไพล์

02:08.650 --> 02:11.290
มันจะถูกลบออกเพราะไม่ได้เพิ่มอะไรที่จำเป็นเมื่อรันใน

02:11.290 --> 02:15.860
JavaScript ปกติ

02:15.860 --> 02:16.693
อย่างไรก็ตาม

02:16.693 --> 02:18.900
ด้วยสิ่งนั้น ฉันได้รับฟังก์ชัน createTodo

02:18.900 --> 02:25.530
และตอนนี้ทำไมเราไม่เพิ่มอาร์เรย์ TODOS ที่นี่เพื่อจัดการสิ่งที่ต้องทำในหน่วยความจำเท่านั้น

02:25.530 --> 02:28.310
สิ่งนี้จะหายไปเมื่อใดก็ตามที่เซิร์ฟเวอร์ของเรารีสตาร์ท

02:28.310 --> 02:31.460
เพราะสุดท้ายมันก็เป็นแค่ค่าคงที่ใน JavaScript

02:31.460 --> 02:34.770
แน่นอน คุณสามารถจินตนาการถึงการพูดคุยกับฐานข้อมูลที่นี่ได้เช่นกัน

02:34.770 --> 02:36.360
แต่ฉันอยากให้มันเรียบง่ายเพราะมันเกี่ยวกับ

02:36.360 --> 02:41.323
JavaScript และ TypeScript และไม่เกี่ยวกับการเชื่อมต่อฐานข้อมูลมากนัก

02:42.390 --> 02:43.790
ฉันต้องทำ และตอนนี้ฉันต้องการสร้างสิ่งใหม่ที่จะทำที่นี่

02:43.790 --> 02:55.420
เมื่อเราได้รับคำขอเข้ามา และนั่นควรเป็นออบเจกต์ใหม่ และทำไมเราไม่สร้างพิมพ์เขียวสำหรับออบเจ็กต์นี้ ซึ่งเป็นโมเดล

02:55.420 --> 02:59.030
ฉันจะเพิ่มโฟลเดอร์โมเดล และในโฟลเดอร์โมเดลนั้น

02:59.030 --> 03:04.030
ฉันจะเพิ่มสิ่งที่ต้องทำ ts และส่งออกคลาสที่นี่ซึ่งฉันจะตั้งชื่อว่า

03:04.760 --> 03:08.210
Todo ซึ่งฉันกำหนดว่าจะทำอย่างไร

03:08.210 --> 03:10.330
ที่นั่นเราสามารถเพิ่มตัวสร้างและใช้ทางลัด

03:10.330 --> 03:13.129
TypeScript นี้ซึ่งเราสามารถเพิ่มตัวแก้ไขการเข้าถึง

03:13.129 --> 03:37.230
เช่น สาธารณะ จากนั้นชื่อคุณสมบัติ เช่น ID ซึ่งเป็นประเภทสตริง สมมุติว่า และข้อความซึ่งเป็นสตริงประเภทด้วย จากนั้นตามด้วย TypeScript จะเพิ่มฟิลด์ คุณสมบัติที่มีชื่อเท่ากันโดยอัตโนมัติ และค่าที่กำหนดที่เราส่งไปยังคอนสตรัคเตอร์ไปยังฟิลด์เหล่านั้นเมื่อใดก็ตามที่เราสร้างอินสแตนซ์เพื่อทำคลาส

03:37.230 --> 03:41.810
ฉันจะใช้ไวยากรณ์นี้ที่นี่ และคุณได้เรียนรู้เกี่ยวกับไวยากรณ์นี้ก่อนหน้านี้ในหลักสูตรแล้ว

03:41.810 --> 03:44.660
และตอนนี้ในสิ่งที่ต้องทำ ที่นี่ในคอนโทรลเลอร์

03:44.660 --> 03:47.893
เราสามารถนำเข้า Todo จาก ขึ้นไปหนึ่งระดับ

03:49.020 --> 03:58.800
โมเดล/สิ่งที่ต้องทำ และใช้ประเภทและคลาสนี้ในไฟล์ของเรา

03:58.800 --> 04:01.320
และเป็นทั้งประเภทและคลาส เพราะแน่นอนว่ามันคือคลาส

04:01.320 --> 04:05.750
และทุกคลาสก็ทำหน้าที่เป็นประเภทโดยอัตโนมัติ

04:05.750 --> 04:08.550
นั่นคือสิ่งที่คุณเห็นตลอดหลักสูตรนี้

04:08.550 --> 04:09.750
ตอนนี้ที่นี่ ก่อนอื่นเราสามารถพูดได้ว่า

04:09.750 --> 04:13.550
TODOS ในที่นี้จะเป็นอาร์เรย์ของสิ่งที่ต้องทำ

04:13.550 --> 04:21.410
คำอธิบายประกอบเพิ่มเติมนี้ไม่เสียหาย ดังนั้นเราจะได้รับการสนับสนุนที่เหมาะสมเมื่อเราเริ่มเพิ่มสิ่งที่ต้องทำหรือเริ่มทำงานกับสิ่งที่ต้องทำในอาร์เรย์นี้

04:21.410 --> 04:23.610
และที่นี่เมื่อฉันสร้างสิ่งที่ต้องทำใหม่

04:23.610 --> 04:26.220
ตอนนี้ฉันสร้างมันโดยการยกตัวอย่างคลาสนี้

04:26.220 --> 04:28.370
และเราต้องส่ง ID และที่นี่ ฉันจะสร้าง

04:28.370 --> 04:34.230
ID เทียมที่ไม่ซ้ำแบบสุ่มด้วย Math Random toString

04:34.230 --> 04:35.270
นี่ไม่ซ้ำใครจริงๆ

04:35.270 --> 04:36.660
แต่ก็ดีพอที่นี่

04:36.660 --> 04:39.170
และตอนนี้สำหรับค่าที่นี่ แน่นอนฉันต้องการตั้งค่าข้อความ

04:39.170 --> 04:45.530
ซึ่งฉันคาดว่าจะได้รับในเนื้อหาคำขอที่เข้ามาของฉัน

04:45.530 --> 04:53.270
ดังนั้นฉันคาดว่าจะได้รับข้อความของฉันที่นี่ โดยพื้นฐานแล้วจะเป็นเนื้อหาคำขอ

04:53.270 --> 04:53.270
ข้อความ

04:53.270 --> 04:56.280
เพื่อให้ฉันสามารถตั้งค่าข้อความเป็นค่าที่นี่

04:56.280 --> 04:57.113
ตอนนี้ใช้งานได้

04:57.113 --> 04:59.640
แต่โปรดดูว่าใช้งานได้เพราะ TypeScript

04:59.640 --> 05:02.320
เห็นว่าเป็นประเภทใด

05:02.320 --> 05:04.420
มันไม่รู้ว่านี่คือสตริง

05:04.420 --> 05:05.510
และไม่สามารถรู้ได้

05:05.510 --> 05:11.140
เพราะ TypeScript จะรู้ได้อย่างไรว่าข้อมูลใดจะเป็นส่วนหนึ่งของคำขอที่เข้ามาของเรา

05:11.140 --> 05:12.430
มันไม่ชัดเจนสำหรับมัน

05:12.430 --> 05:17.620
เราไม่เคยระบุว่าจะมีอะไรบ้างในคำขอที่เราได้รับ

05:17.620 --> 05:19.270
ทีนี้ เราจะปรับปรุงเรื่องนี้ได้อย่างไร?

05:19.270 --> 05:21.780
เราสามารถใช้ typecasting ได้ เป็นต้น

05:21.780 --> 05:23.660
Typecasting เป็นทางออกที่ดีเสมอหากคุณรู้เกี่ยวกับประเภทเฉพาะ

05:23.660 --> 05:27.360
แต่ TypeScript ไม่รู้

05:27.360 --> 05:32.650
ดังนั้นในเนื้อหาคำขอ ก่อนที่เราจะเข้าถึงข้อความ เราสามารถพิมพ์สิ่งนี้ให้เป็นวัตถุที่เรามีคุณสมบัติข้อความ

05:32.650 --> 05:34.900
ซึ่งก็คือสตริง

05:34.900 --> 05:40.320
เนื่องจากเรากำลังสร้างแอปนี้ เราจึงรู้ว่าเราคาดหวังอะไรจากคำขอที่เข้ามาของเรา

05:40.320 --> 05:44.166
ดังนั้น เนื่องจากเราทราบว่าจะมีคุณสมบัติข้อความในเนื้อหาคำขอที่เข้ามา

05:44.166 --> 05:46.630
เราจึงสามารถกำหนดให้เป็นวัตถุดังกล่าวได้

05:46.630 --> 05:51.480
และตอนนี้เราได้รับการสนับสนุน TypeScript และ IDE ที่เหมาะสม

05:51.480 --> 05:53.560
ด้วยเหตุนี้ เราจึงเพิ่มสิ่งที่ต้องทำใหม่

05:53.560 --> 05:58.280
ตอนนี้เราสามารถเข้าถึง TODOS และผลักดันสิ่งที่ต้องทำใหม่ไปยังอาร์เรย์นี้

05:58.280 --> 06:02.750
และอีกครั้ง แน่นอนว่าสิ่งนี้จะเก็บมันไว้ที่นี่เป็นค่าคงที่เท่านั้น

06:02.750 --> 06:08.880
ดังนั้นในหน่วยความจำเท่านั้น เพราะการทำงานกับฐานข้อมูลไม่ได้เกี่ยวข้องโดยตรงกับโหนดหรือ

06:08.880 --> 06:11.170
TypeScript แต่กับฐานข้อมูลด้วย

06:11.170 --> 06:14.140
ด้วยเหตุนี้ เราจึงได้ฟังก์ชันสร้างสิ่งที่ต้องทำที่นี่

06:14.140 --> 06:19.070
ตอนนี้ไปที่เส้นทางสิ่งที่ต้องทำและนำเข้าฟังก์ชันตัวควบคุมนี้

06:19.070 --> 06:22.030
ดังนั้นนำเข้าจากโฟลเดอร์คอนโทรลเลอร์จากไฟล์

06:22.030 --> 06:24.000
todos ในนั้น และนำเข้าฟังก์ชัน

06:24.000 --> 06:30.100
create Todo และชี้ไปที่ฟังก์ชันนี้บนเส้นทางการโพสต์ เพื่อให้คำขอใด

06:30.100 --> 06:38.390
ๆ ที่กำหนดเป้าหมาย slash todos slash ไม่มีอะไรไปถึงฟังก์ชัน createTodo

06:38.390 --> 06:39.580
อย่าดำเนินการที่นี่

06:39.580 --> 06:40.650
เพียงแค่ชี้ไปที่มัน

06:40.650 --> 06:45.883
มันจะถูกดำเนินการให้คุณโดยโหนดและแสดงในเว็บเซิร์ฟเวอร์ที่กำลังทำงานอยู่ของคุณในภายหลัง

06:46.880 --> 06:49.630
ตอนนี้เราได้ฟังก์ชันนี้มา

06:49.630 --> 06:50.900
เรายังไม่ได้ทำ

06:50.900 --> 06:52.290
ในคอนโทรลเลอร์

06:52.290 --> 06:54.360
เราทุกคนควรตอบกลับ

06:54.360 --> 06:56.720
ดังนั้น ที่นี่ เราสามารถส่งการตอบกลับได้

06:56.720 --> 07:04.040
เช่น ในรูปแบบ JSON ด้วยเมธอด JSON ที่เราบอกว่าข้อความสร้างสิ่งที่ต้องทำหรืออะไรก็ตามที่คุณต้องการ และเรามีคีย์

07:04.040 --> 07:07.770
createTodo ซึ่งบางทีเราส่งต่อสิ่งที่ต้องทำใหม่ที่เพิ่มเข้ามาใน

07:07.770 --> 07:14.490
ฝั่งเซิร์ฟเวอร์ ดังนั้นบนไคลเอ็นต์ เราสามารถใช้สิ่งนั้นได้เช่นกัน

07:14.490 --> 07:21.793
และอาจตั้งรหัสสถานะเป็น 201 ที่นี่เพื่อระบุว่าเราดำเนินการสำเร็จและสร้างทรัพยากรแล้ว

07:22.680 --> 07:28.500
ตอนนี้เราต้องแน่ใจว่าร่างกายที่เรากำลังพยายามดึงออกมามีอยู่จริง

07:28.500 --> 07:33.130
และสำหรับข้อมูลและแอพ ขออภัย เราจำเป็นต้องแยกวิเคราะห์เนื้อหาของคำขอที่เข้ามา

07:33.130 --> 07:37.620
เพื่อสิ่งนั้น เราสามารถอิมพอร์ตจากแพ็คเกจ body-parser

07:37.620 --> 07:39.220
ที่เราติดตั้งไว้

07:39.220 --> 07:41.380
และจากแพ็คเกจนั้น เราสามารถอิมพอร์ตเมธอด

07:41.380 --> 07:46.380
JSON แบบนี้ได้

07:46.410 --> 07:51.310
จากนั้นคุณสามารถลงทะเบียนการดำเนินการนี้เป็นมิดเดิลแวร์ได้ที่นี่

07:51.310 --> 07:58.130
ดังนั้นนี่คือมิดเดิลแวร์ที่จัดทำโดยแพ็คเกจของบุคคลที่สามซึ่งจะแยกวิเคราะห์เนื้อหาของคำขอที่เข้ามาทั้งหมดและแยกข้อมูล

07:58.130 --> 08:07.970
JSON ใด ๆ ที่พบในนั้นเพื่อเติมคีย์เนื้อหาบนวัตถุคำขอนี้ด้วยข้อมูล JSON ที่แยกวิเคราะห์แล้ว

08:07.970 --> 08:10.290
นั่นคือสิ่งที่มิดเดิลแวร์ JSON

08:10.290 --> 08:12.503
จากแพ็คเกจ body-parser ทำ

08:13.890 --> 08:18.230
และด้วยเหตุนี้ เราควรจะมีเซิร์ฟเวอร์ที่สามารถสร้างสิ่งที่ต้องทำใหม่ได้

08:18.230 --> 08:22.210
บันทึกไฟล์ทั้งหมดและตรวจสอบให้แน่ใจว่าคอมไพล์ใหม่โดยไม่มีข้อผิดพลาด

08:22.210 --> 08:26.150
ตรวจสอบให้แน่ใจว่า nodemon ยังคงให้บริการแอปอยู่ ไฟล์.js

08:26.150 --> 08:28.560
และตอนนี้เราต้องส่งคำขอโพสต์

08:28.560 --> 08:31.150
และด้วยเบราว์เซอร์ เราไม่สามารถทำเช่นนั้นได้

08:31.150 --> 08:34.260
แต่เราใช้เครื่องมือสำหรับสิ่งนั้นได้ บุรุษไปรษณีย์

08:34.260 --> 08:38.160
คุณสามารถค้นหาแล้วติดตั้งแอพบุรุษไปรษณีย์ในระบบของคุณ

08:38.160 --> 08:39.283
ใช้งานได้ฟรี

08:40.440 --> 08:41.570
เมื่อคุณได้ติดตั้งแล้ว คุณสามารถเริ่มต้นได้

08:41.570 --> 08:44.440
และคุณควรจะเห็นหน้าจอที่มีลักษณะดังนี้

08:44.440 --> 08:46.460
หากคุณเห็นการซ้อนทับโมดอล

08:46.460 --> 08:48.010
คุณสามารถปิดได้

08:48.010 --> 08:51.740
และที่นี่ คุณสามารถสร้างคำขอใหม่ได้โดยคลิกที่เครื่องหมายบวกนั้น

08:51.740 --> 08:56.450
เลือกประเภทคำขอ ในกรณีนี้คือคำขอโพสต์ ป้อน URL

08:56.450 --> 08:58.820
นี่คือ localhost 3000, 3000

08:58.820 --> 09:01.660
เพราะพอร์ตที่ฉันเลือกที่นี่

09:01.660 --> 09:03.100
จากนั้นเราต้องส่งคำขอเพื่อ

09:03.100 --> 09:06.320
slash todos slash Nothing

09:06.320 --> 09:10.000
ดังนั้นที่นี่เพื่อเฉือน todos เฉือนอะไร

09:10.000 --> 09:12.120
เราต้องการแนบเนื้อหากับคำขอ

09:12.120 --> 09:15.440
และนั่นควรเป็น JSON เนื้อหาดิบที่นี่เพื่อส่งข้อมูล

09:15.440 --> 09:17.010
JSON บางส่วน

09:17.010 --> 09:19.480
และตอนนี้เราต้องส่งอะไรที่นี่?

09:19.480 --> 09:21.840
สิ่งที่เราแยกออกมาในฟังก์ชันมิดเดิลแวร์

09:21.840 --> 09:24.570
ในกรณีนี้ เราควรมีคุณสมบัติข้อความเป็นส่วนหนึ่งของข้อมูล

09:24.570 --> 09:27.410
JSON ที่เรากำลังส่ง

09:27.410 --> 09:29.610
ในที่นี้ เรามาเพิ่มข้อความเป็นชื่อ

09:29.610 --> 09:31.070
แล้วตามด้วยข้อความที่คุณเลือก

09:31.070 --> 09:33.230
เช่น จบหลักสูตร

09:33.230 --> 09:36.960
และถ้าคุณคลิกส่ง มันจะส่งคำขอ และนี่คือการตอบกลับ

09:36.960 --> 09:38.990
ซึ่งดูดี

09:38.990 --> 09:40.670
เราได้สิ่งที่ต้องทำกลับมา

09:40.670 --> 09:43.600
เราเห็น ID ที่สร้างขึ้นและข้อความ

09:43.600 --> 09:45.870
ดังนั้นแบ็กเอนด์ของเราจึงทำงานที่นี่ได้อย่างชัดเจน

09:45.870 --> 09:47.690
และเราเขียนทั้งหมดด้วย TypeScript

09:47.690 --> 09:49.880
แต่เราให้บริการเป็น JavaScript ปกติ

09:49.880 --> 09:51.183
นั่นคือเคล็ดลับทั้งหมด
