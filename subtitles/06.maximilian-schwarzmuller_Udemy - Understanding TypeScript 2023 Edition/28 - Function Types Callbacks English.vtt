WEBVTT

1
00:00:02.440 --> 00:00:05.170
<v Instructor>Now speaking of callbacks and function types,</v>

2
00:00:05.170 --> 00:00:08.400
there it works pretty much in the same way.

3
00:00:08.400 --> 00:00:10.550
Let's say we have a new function up there

4
00:00:11.800 --> 00:00:14.990
addAndHandle, let's say.

5
00:00:14.990 --> 00:00:18.420
There we expect to get two numbers

6
00:00:19.740 --> 00:00:22.320
and then I also want to get a callback function here.

7
00:00:22.320 --> 00:00:24.480
So a function which is passed and is a argument

8
00:00:24.480 --> 00:00:26.670
that should do something with the result,

9
00:00:26.670 --> 00:00:29.930
then here we could generate the result, of course.

10
00:00:29.930 --> 00:00:31.060
But not only returning it,

11
00:00:31.060 --> 00:00:33.290
but instead I want to call the callback function

12
00:00:33.290 --> 00:00:35.670
and pass in result.

13
00:00:35.670 --> 00:00:36.990
Now for that, I want to be really clear

14
00:00:36.990 --> 00:00:39.270
that callback should be a function.

15
00:00:39.270 --> 00:00:42.190
So again, I'm using that function type definition

16
00:00:42.190 --> 00:00:45.640
that maybe does not return anything

17
00:00:45.640 --> 00:00:49.650
but it does take a number as an argument

18
00:00:49.650 --> 00:00:51.280
because we're passing it a number here.

19
00:00:51.280 --> 00:00:52.740
So the callback function,

20
00:00:52.740 --> 00:00:55.870
the function we're passing into this function as a parameter

21
00:00:55.870 --> 00:00:58.460
should accept a number.

22
00:00:58.460 --> 00:01:01.890
Now down there, we would call addAndHandle,

23
00:01:01.890 --> 00:01:05.240
pass in 10 and 20 and then pass in a function.

24
00:01:05.240 --> 00:01:07.570
For example, an anonymous function here.

25
00:01:07.570 --> 00:01:09.710
So now here, when we call the function,

26
00:01:09.710 --> 00:01:11.470
this is of course, not a function type

27
00:01:11.470 --> 00:01:13.620
but a concrete value we're passing in

28
00:01:13.620 --> 00:01:15.150
for this third argument.

29
00:01:15.150 --> 00:01:18.870
So, this now here is an anonymous function creating here

30
00:01:18.870 --> 00:01:22.300
and there we know we'll get a number.

31
00:01:22.300 --> 00:01:23.810
Maybe name it result here

32
00:01:23.810 --> 00:01:26.110
and then we can do with it whatever we want.

33
00:01:26.110 --> 00:01:27.623
And now if you compile this,

34
00:01:28.570 --> 00:01:31.120
we see this log down there, 30,

35
00:01:31.120 --> 00:01:33.540
which is the result of our callback function

36
00:01:33.540 --> 00:01:35.600
which we passed to addAndHandle

37
00:01:35.600 --> 00:01:38.250
where addAndHandle combines to two numbers

38
00:01:38.250 --> 00:01:39.850
and then calls the callback

39
00:01:39.850 --> 00:01:43.200
where the callback has to meet this condition here.

40
00:01:43.200 --> 00:01:45.870
The advantage of us defining the callback function

41
00:01:45.870 --> 00:01:49.490
definition here is that inside of the function we pass

42
00:01:49.490 --> 00:01:52.240
it is a callback types that is able to infer

43
00:01:52.240 --> 00:01:54.000
that result will be a number

44
00:01:54.000 --> 00:01:56.620
and hence we could do anything with result here.

45
00:01:56.620 --> 00:01:58.090
What we could do with a number

46
00:01:58.090 --> 00:02:00.990
without explicitly stating the type here

47
00:02:00.990 --> 00:02:03.226
because TypeScript knows the result will be a number

48
00:02:03.226 --> 00:02:04.970
because we made it really clear

49
00:02:04.970 --> 00:02:07.480
that the callback will get one argument

50
00:02:07.480 --> 00:02:08.473
which is a number.

51
00:02:09.310 --> 00:02:12.170
Hence, if we would expect a second argument here

52
00:02:12.170 --> 00:02:13.060
in the callback,

53
00:02:13.060 --> 00:02:15.460
we'd get an error because we know

54
00:02:15.460 --> 00:02:18.630
well, the callback we expect in our addAndHandle function

55
00:02:18.630 --> 00:02:20.500
only should have one argument.

56
00:02:20.500 --> 00:02:22.420
So if we then pass in a callback function

57
00:02:22.420 --> 00:02:23.950
which takes a second argument,

58
00:02:23.950 --> 00:02:26.240
that clearly is a mistake.

59
00:02:26.240 --> 00:02:28.250
The only thing TypeScript does not pick up

60
00:02:28.250 --> 00:02:30.280
is if we return something here.

61
00:02:30.280 --> 00:02:33.690
If a return result and the callback does return something,

62
00:02:33.690 --> 00:02:34.767
even though we made it clear

63
00:02:34.767 --> 00:02:37.300
that it shouldn't return anything.

64
00:02:37.300 --> 00:02:41.180
This however, is not a mistake or a bug in TypeScript.

65
00:02:41.180 --> 00:02:43.150
It actually happens on purpose.

66
00:02:43.150 --> 00:02:46.000
By specifying void here on our callback type,

67
00:02:46.000 --> 00:02:49.520
we're essentially saying we'll ignore any results

68
00:02:49.520 --> 00:02:50.910
you might be returning here.

69
00:02:50.910 --> 00:02:54.030
So we're basically saying in addAndHandle,

70
00:02:54.030 --> 00:02:56.020
where we get that callback function,

71
00:02:56.020 --> 00:02:58.080
we'll not do anything with the return type.

72
00:02:58.080 --> 00:03:00.600
That's why you'll be able to return something here

73
00:03:00.600 --> 00:03:03.550
without punishment but you know,

74
00:03:03.550 --> 00:03:06.850
because it's clearly defined here on the callback type,

75
00:03:06.850 --> 00:03:09.230
that the callback will not do anything

76
00:03:09.230 --> 00:03:10.870
with the value you might return here.

77
00:03:10.870 --> 00:03:13.543
So that addAndHandle inside of the function

78
00:03:13.543 --> 00:03:15.680
will not do anything with that value

79
00:03:15.680 --> 00:03:17.120
you might be returning.

80
00:03:17.120 --> 00:03:19.620
And that's of course a useful piece of information.

81
00:03:19.620 --> 00:03:21.270
You might expect that in here,

82
00:03:21.270 --> 00:03:25.710
we're doing something with the value returned

83
00:03:25.710 --> 00:03:29.000
by the callback, and by specifying this type here,

84
00:03:29.000 --> 00:03:31.520
we make it really clear that inside of addAndHandle

85
00:03:31.520 --> 00:03:33.920
we're not interested in any return value.

86
00:03:33.920 --> 00:03:36.410
So this does not force you to pass in a callback

87
00:03:36.410 --> 00:03:38.260
that does not return anything.

88
00:03:38.260 --> 00:03:40.830
It just tells you that anything you might return

89
00:03:40.830 --> 00:03:42.200
will not be used.

90
00:03:42.200 --> 00:03:44.070
For the parameters, it's of course different.

91
00:03:44.070 --> 00:03:45.540
There this is enforced

92
00:03:45.540 --> 00:03:48.310
because here it really matters that you know

93
00:03:48.310 --> 00:03:51.720
if you're passing a callback that expects more parameters.

94
00:03:51.720 --> 00:03:53.490
Well, then you'll get an error

95
00:03:53.490 --> 00:03:55.350
or you'll not get the result you want

96
00:03:55.350 --> 00:03:57.740
because I only give you one result.

97
00:03:57.740 --> 00:04:01.290
So there we can't just ignore what you might want

98
00:04:01.290 --> 00:04:02.840
as it's the case for the return type.

99
00:04:02.840 --> 00:04:05.506
We ignore that here for passing something in

100
00:04:05.506 --> 00:04:08.750
where the addAndHandle function is responsible for that

101
00:04:08.750 --> 00:04:10.920
because that's where the callback gets called.

102
00:04:10.920 --> 00:04:13.210
This is why parameters are enforced

103
00:04:13.210 --> 00:04:15.060
and TypeScript is really strict

104
00:04:15.060 --> 00:04:17.150
regarding the number and type of parameters

105
00:04:17.150 --> 00:04:19.508
of callback functions and why it doesn't really care

106
00:04:19.508 --> 00:04:21.253
about the return type.

