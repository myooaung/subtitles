WEBVTT

00:02.270 --> 00:03.103
Instructor: Para esto tengo

00:03.103 --> 00:04.620
un pequeño proyecto inicial para ti.

00:04.620 --> 00:05.610
Lo encuentras adjunto.

00:05.610 --> 00:07.070
Es el mismo proyecto de partida

00:07.070 --> 00:08.810
que utilizamos una y otra vez.

00:08.810 --> 00:12.080
Se inicia el servidor de desarrollo con npm-start

00:12.080 --> 00:15.510
y luego inicié la compilación de TypeScript en modo

00:15.510 --> 00:19.830
de vigilancia con tsc-w en una terminal separada.

00:19.830 --> 00:22.890
Así que aquí en mi terminal incorporada tengo dos pestañas.

00:22.890 --> 00:24.390
Una con el servidor de desarrollo

00:24.390 --> 00:26.070
que debes mantener en funcionamiento

00:26.070 --> 00:27.670
para que vigile los cambios y recargue

00:27.670 --> 00:30.720
la página y mantenga el servidor en funcionamiento y otra pestaña

00:30.720 --> 00:32.820
donde tengo ese vigilante de compilación de

00:32.820 --> 00:35.530
TypeScript en funcionamiento.

00:35.530 --> 00:36.930
Ahora con eso podemos trabajar

00:36.930 --> 00:39.400
en la aplicación. ts que está vacío ahora mismo

00:39.400 --> 00:41.520
y empezar a escribir algo de código allí y quiero

00:41.520 --> 00:42.990
empezar de inmediato por la definición

00:42.990 --> 00:45.603
de una clase que podemos utilizar.

00:46.490 --> 00:49.420
Esto lo hacemos utilizando la palabra clave class,

00:49.420 --> 00:51.340
así de simple y luego el nombre de la

00:51.340 --> 00:54.030
clase y ahí digamos que estamos construyendo una

00:54.030 --> 00:56.880
app, una aplicación web, una interfaz de usuario para

00:56.880 --> 01:00.700
alguna herramienta web que nos permita gestionar los diferentes departamentos

01:00.700 --> 01:04.100
que podamos tener en nuestra empresa.

01:04.100 --> 01:05.770
Tal vez estemos construyendo algún

01:05.770 --> 01:08.440
tipo de herramienta interna de la empresa, sea lo que sea,

01:08.440 --> 01:11.290
y necesitemos tener varios departamentos allí.

01:11.290 --> 01:13.790
Ahora podríamos utilizar objetos para gestionar

01:13.790 --> 01:16.320
los datos de los diferentes departamentos

01:16.320 --> 01:19.960
y también podríamos añadir métodos a cada objeto para poder

01:19.960 --> 01:21.980
renderizar la información del departamento

01:21.980 --> 01:24.020
en la pantalla y para simplificar

01:24.020 --> 01:26.980
la creación de estos diferentes objetos de departamento

01:26.980 --> 01:33.000
que se verán todos iguales, es crear una clase de departamento.

01:33.000 --> 01:35.690
Así que podríamos llamar a esta clase Departamento.

01:35.690 --> 01:36.830
El nombre depende totalmente de ti.

01:36.830 --> 01:40.030
La convención es que comience con un carácter en mayúscula

01:40.030 --> 01:42.720
para dejar claro que se trata de una clase.

01:42.720 --> 01:45.670
Ahora bien, si has estado alrededor del desarrollo de JavaScript

01:45.670 --> 01:48.270
durante más tiempo puede que conozcas la idea de las

01:48.270 --> 01:50.090
funciones constructoras por cierto

01:50.090 --> 01:52.140
y las clases al final son azúcar sintáctico

01:52.140 --> 01:53.920
para eso se podría decir, pero lo veremos

01:53.920 --> 01:56.980
una vez que compilemos nuestro código.

01:56.980 --> 01:59.220
Así que aquí tenemos nuestra clase Departamento

01:59.220 --> 02:02.080
y ahora en ella podríamos tener una propiedad nombre.

02:02.080 --> 02:04.010
Puedes añadirlo así, sin ningún

02:04.010 --> 02:07.290
let o const delante de él así, directamente en

02:07.290 --> 02:09.840
la clase y luego por supuesto también

02:09.840 --> 02:12.550
puedes asignar un tipo a esto.

02:12.550 --> 02:14.690
Lo haces añadiendo dos puntos aquí y

02:14.690 --> 02:17.920
luego el tipo por ejemplo cadena y eso es importante.

02:17.920 --> 02:21.150
Esto puede parecer un objeto, pero no lo es.

02:21.150 --> 02:23.240
En un objeto se utilizan pares clave-valor

02:23.240 --> 02:25.520
con dos puntos para tener un nombre de clave y luego

02:25.520 --> 02:27.000
el valor de la clave.

02:27.000 --> 02:28.810
Aquí no es el caso.

02:28.810 --> 02:32.250
Se trata del llamado campo de una clase.

02:32.250 --> 02:34.680
Creas una clase con llaves también

02:34.680 --> 02:37.110
pero aquí no es un par clave-valor,

02:37.110 --> 02:39.120
esto solo define el nombre de

02:39.120 --> 02:41.040
una clave que tendrás en el

02:41.040 --> 02:43.530
objeto que crearás basado en la clase

02:43.530 --> 02:48.530
y defines el tipo de valor que tendrá esa clave al final.

02:48.550 --> 02:52.363
También puede establecer un valor inicial aquí con el = 'DEFAULT'

02:53.840 --> 02:55.920
pero no es necesario hacerlo.

02:55.920 --> 02:59.050
En cambio, otra cosa que se suele tener en las

02:59.050 --> 03:03.410
clases es una función especial dentro, un llamado método.

03:03.410 --> 03:06.780
Las funciones en los objetos se llaman simplemente

03:06.780 --> 03:09.410
métodos, que es el método constructor.

03:09.410 --> 03:12.500
Podemos añadirlo así y esta es una palabra reservada.

03:12.500 --> 03:16.170
Constructor es una palabra clave reservada entendida por

03:16.170 --> 03:18.390
TypeScript y por el JavaScript moderno

03:18.390 --> 03:22.480
también y esto es esencialmente una función atada a esta clase y atada

03:22.480 --> 03:25.840
a cualquier objeto que se crea basado en la clase que se

03:25.840 --> 03:29.640
ejecuta cuando el objeto está siendo creado.

03:29.640 --> 03:33.500
Así que esto te permite básicamente hacer un trabajo de inicialización

03:33.500 --> 03:35.700
para el objeto que estás construyendo.

03:35.700 --> 03:38.280
Ahora bien, ahí se podría aceptar un argumento.

03:38.280 --> 03:41.910
Llamémoslo n, que también podría ser de tipo cadena y entonces

03:41.910 --> 03:45.620
querrás almacenarlo en tu campo nombre aquí o puedes hacerlo

03:45.620 --> 03:47.000
llegando a nombre con

03:47.000 --> 03:49.050
la palabra clave this y almacenando

03:49.050 --> 03:51.200
n en él.

03:51.200 --> 03:55.200
Lo que esto hace es establecer el valor del campo nombre,

03:55.200 --> 03:58.630
también llamado propiedad so de la propiedad

03:58.630 --> 04:01.180
nombre, al valor que se obtiene en n

04:01.180 --> 04:04.550
cuando se crea un objeto departamento.

04:04.550 --> 04:07.030
Ahora bien, ¿cómo podríamos crear un objeto de este tipo para el departamento?

04:07.030 --> 04:08.890
Nada más fácil que eso.

04:08.890 --> 04:13.110
Fuera de la clase que creó mediante el uso de la nueva palabra clave que también

04:13.110 --> 04:16.200
se construye en TypeScript y JavaScript y luego se repite

04:16.200 --> 04:18.410
el nombre de la clase, a continuación,

04:18.410 --> 04:20.160
añadir paréntesis y esto crearía

04:20.160 --> 04:22.440
un nuevo objeto de departamento, pero

04:22.440 --> 04:26.240
el constructor se llama en este punto del tiempo cuando se ejecuta

04:26.240 --> 04:29.620
esta clase como esta con la nueva palabra clave y el constructor

04:29.620 --> 04:33.440
aquí toma un argumento, una cadena.

04:33.440 --> 04:35.600
Ahora pasas los argumentos del constructor

04:35.600 --> 04:39.800
a esta llamada del departamento aquí, así que entre estos paréntesis.

04:39.800 --> 04:41.640
Así que aquí podríamos llamar a esto Contabilidad,

04:41.640 --> 04:44.730
porque tal vez estamos construyendo el departamento de contabilidad aquí.

04:44.730 --> 04:46.100
Ahora esto creará un

04:46.100 --> 04:49.800
nuevo objeto JavaScript basado en este plano.

04:49.800 --> 04:53.910
Así que ahora podemos almacenar esto en una constante por ejemplo

04:53.910 --> 04:58.010
y luego la consola. tronco. contabilidad aquí para ver lo que conseguimos.

04:58.010 --> 04:59.620
Si ahora guardamos eso y luego

04:59.620 --> 05:02.020
volvemos a nuestra página aquí y echar un vistazo

05:02.020 --> 05:03.780
a la consola de desarrollo aquí en

05:03.780 --> 05:05.660
las herramientas def, debemos nuestro

05:05.660 --> 05:07.930
objeto Departamento aquí.

05:07.930 --> 05:10.000
Es un objeto normal de JavaScript,

05:10.000 --> 05:13.770
sólo tiene este tipo de departamento unido a él se podría decir

05:13.770 --> 05:15.290
y al final es un objeto con

05:15.290 --> 05:18.140
un par clave-valor, donde la clave es el nombre

05:18.140 --> 05:20.270
porque eso es lo que definimos allí

05:20.270 --> 05:23.110
arriba y el valor es Contabilidad.

05:23.110 --> 05:25.530
Tenemos este valor de Contabilidad aquí

05:25.530 --> 05:27.460
porque estamos pasando esto como

05:27.460 --> 05:29.560
un argumento al constructor.

05:29.560 --> 05:31.770
Allí estamos aceptando tal cadena,

05:31.770 --> 05:34.830
restaurando el valor en este campo y los campos

05:34.830 --> 05:38.400
son al final sólo traducidos a propiedades, el objeto

05:38.400 --> 05:41.890
basado en la clase tendrá allí después.

05:41.890 --> 05:44.480
Así es como podemos crear una clase simple

05:44.480 --> 05:46.570
y cuál es la idea general.

05:46.570 --> 05:50.143
Ahora veamos lo que realmente obtenemos en JavaScript.
