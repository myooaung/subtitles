WEBVTT

00:02.260 --> 00:04.960
-: Teraz jest jedna ostatnia interesująca

00:04.960 --> 00:07.020
cecha, którą również chcę wprowadzić,

00:07.020 --> 00:10.330
a to byłoby prywatne konstruktory.

00:10.330 --> 00:13.823
A co to jest konstruktor prywatny i jakie ma zastosowanie?

00:14.870 --> 00:17.700
W programowaniu obiektowym istnieje wzorzec,

00:17.700 --> 00:20.460
który nazywa się wzorcem singleton.

00:20.460 --> 00:23.030
Wzorzec singleton polega na zapewnieniu,

00:23.030 --> 00:26.440
że zawsze masz tylko dokładnie jedną instancję określonej

00:26.440 --> 00:28.030
klasy.

00:28.030 --> 00:30.558
Może to być przydatne w scenariuszach, w których

00:30.558 --> 00:33.000
w jakiś sposób nie możesz używać statycznych

00:33.000 --> 00:34.450
metod lub właściwości lub

00:34.450 --> 00:36.440
nie chcesz, ale jednocześnie chcesz

00:36.440 --> 00:39.600
się upewnić, że nie możesz tworzyć wielu obiektów opartych

00:39.600 --> 00:40.730
na klasie, ale że zawsze

00:40.730 --> 00:44.630
masz dokładnie jeden obiekt oparty na klasie.

00:44.630 --> 00:47.660
Powiedzmy, że dla naszego AccountingDepartment

00:47.660 --> 00:51.460
chcemy się upewnić, że możemy stworzyć tylko dokładnie jeden

00:51.460 --> 00:53.320
obiekt oparty na tej klasie, ponieważ

00:53.320 --> 00:56.010
mamy dokładnie jeden dział księgowości w całej

00:56.010 --> 00:57.840
naszej firmie.

00:57.840 --> 01:00.260
Możemy mieć więcej niż jeden dział IT,

01:00.260 --> 01:03.290
ale mamy dokładnie jeden dział księgowości.

01:03.290 --> 01:05.310
Teraz, aby to wymusić i uniknąć

01:05.310 --> 01:09.020
tego, że ręcznie wywołujemy new AccountingDepartment

01:09.020 --> 01:12.260
wiele razy, możemy przekształcić konstruktor klasy

01:12.260 --> 01:14.320
AccountingDepartment w prywatny

01:14.320 --> 01:17.360
konstruktor, dodając przed nim słowo kluczowe

01:17.360 --> 01:18.860
private.

01:18.860 --> 01:20.560
Teraz to, co to robi, zapewnia,

01:20.560 --> 01:23.480
że nie możemy wywołać nowego na tym.

01:23.480 --> 01:25.160
Tutaj widzisz, że dostaję błąd,

01:25.160 --> 01:27.620
ponieważ konstruktor jest prywatny, więc

01:27.620 --> 01:30.600
jest dostępny tylko z wnętrza klasy, co brzmi dziwnie,

01:30.600 --> 01:33.690
ponieważ jak możemy dostać się do wnętrza klasy, jeśli

01:33.690 --> 01:37.920
nie możemy już tworzyć obiektów opartych na niej.

01:37.920 --> 01:40.490
Odpowiedzią są, cóż, metody statyczne.

01:40.490 --> 01:43.610
Metoda statyczna może być wywołana na samej klasie, więc

01:43.610 --> 01:46.250
nie musisz jej instantyzować w tym celu.

01:46.250 --> 01:49.460
Więc tutaj możemy dodać statyczną metodę, którą moglibyśmy

01:49.460 --> 01:51.340
nazwać getInstance, nazwa jest całkowicie

01:51.340 --> 01:53.260
zależna od ciebie chociaż.

01:53.260 --> 01:56.930
Teraz getInstance sprawdzi, czy mamy już instancję

01:56.930 --> 02:00.090
tej klasy i jeśli nie, zwróci nową.

02:00.090 --> 02:04.300
W tym celu możemy dodać nową statyczną instancję właściwości, statyczną

02:04.300 --> 02:06.350
prywatną właściwość, więc możesz umieścić

02:06.350 --> 02:09.200
private przed statyczną instancją nazwaną, która

02:09.200 --> 02:12.040
będzie typu AccountingDepartment.

02:12.040 --> 02:16.570
Więc w nim będziemy przechowywać instancję AccountingDepartment.

02:16.570 --> 02:17.580
Więc o to mi tutaj

02:17.580 --> 02:19.100
chodzi, mam statyczną właściwość,

02:19.100 --> 02:21.410
która jest dostępna na samej klasie,

02:21.410 --> 02:23.310
ale tylko z jej wnętrza i wartość,

02:23.310 --> 02:25.960
którą tam przechowujemy będzie typu AccountingDepartment,

02:25.960 --> 02:30.140
a więc samej klasy.

02:30.140 --> 02:33.880
Teraz możemy użyć tej właściwości instancji tutaj w

02:33.880 --> 02:38.880
getInstance i sprawdzić, czy to. instancja jest ustawiona tutaj wewnątrz static,

02:39.260 --> 02:43.570
jeśli użyjemy tego, będzie odnosić się do samej klasy, a następnie możemy uzyskać

02:43.570 --> 02:47.610
dostęp do wszystkich innych właściwości statycznych na tym.

02:47.610 --> 02:51.963
Alternatywą dla tego byłoby użycie nazwy klasy.

02:53.720 --> 02:58.450
I teraz jeśli to jest ustawione chcę zwrócić to. instancja, czyli ponownie

02:58.450 --> 03:01.600
nazwa klasy. ale to wewnątrz statycznej

03:01.600 --> 03:04.030
metody działa, daje nam dostęp do samej klasy

03:04.030 --> 03:05.680
wtedy, w przeciwieństwie do

03:05.680 --> 03:09.370
tego w niestatycznej metodzie, która daje nam dostęp do instancji,

03:09.370 --> 03:11.590
z którą próbujemy pracować, nie to, co

03:11.590 --> 03:13.550
robimy tutaj.

03:13.550 --> 03:15.660
Jeśli jednak nie zdążymy tu wejść

03:15.660 --> 03:17.290
to nie mamy jeszcze instancji,

03:17.290 --> 03:22.030
wtedy ustawiam to. możemy tego użyć, ponieważ

03:22.030 --> 03:25.660
teraz jesteśmy wewnątrz metody tej klasy,

03:25.660 --> 03:28.630
więc możemy uzyskać dostęp do prywatnego

03:28.630 --> 03:35.250
konstruktora i przekazać nasz identyfikator oraz tablicę raportów,

03:35.250 --> 03:44.830
a następnie zwrócić to.

03:44.830 --> 03:44.830
przykład tutaj.

03:44.830 --> 03:47.010
Więc teraz albo zwracamy jedną instancję,

03:47.010 --> 03:48.220
którą możemy już mieć,

03:48.220 --> 03:50.970
albo jeśli jeszcze jej nie mamy, tworzymy nową.

03:50.970 --> 03:53.270
Ale ten kod, zaznaczony tutaj kod, może

03:53.270 --> 03:56.377
być uruchomiony tylko raz, ponieważ gdy mamy już instancję,

03:56.377 --> 03:57.850
robimy ją w tym bloku if i zwracamy

03:57.850 --> 04:00.370
istniejącą instancję.

04:00.370 --> 04:03.700
Więc teraz jeśli chcemy pracować z AccountingDepartment, zamiast

04:03.700 --> 04:05.940
tworzyć go w ten sposób moglibyśmy nazwać, const

04:05.940 --> 04:10.153
accounting AccountingDepartment. getInstance, a to zwraca nam

04:11.646 --> 04:14.850
nową instancję AccountingDepartment.

04:14.850 --> 04:18.190
Ale jeśli zrobię to ponownie, otrzymam tę samą instancję,

04:18.190 --> 04:21.103
którą zobaczysz, jeśli konsola loguje księgowość,

04:22.020 --> 04:23.570
a księgowość2 tutaj.

04:23.570 --> 04:26.550
Zobaczysz, że te dwa powinny być dokładnie równe, jeśli

04:26.550 --> 04:28.253
zapiszemy to i ponownie załadujemy,

04:30.550 --> 04:34.110
widzisz w dole są moje dwa obiekty AccountingDepartment, mają ten

04:34.110 --> 04:36.690
sam identyfikator, dokładnie taką samą konfigurację,

04:36.690 --> 04:39.720
są tym samym obiektem, tą samą instancją, ponieważ mamy

04:39.720 --> 04:41.530
tylko jedną instancję z tym wzorcem

04:41.530 --> 04:44.340
singleton, który jest tworzony za pomocą słowa kluczowego

04:44.340 --> 04:47.900
private przed konstruktorem.

04:47.900 --> 04:51.000
Teraz jest to, prawdopodobnie, podejście, którego nie będziesz

04:51.000 --> 04:52.490
używać przez cały czas.

04:52.490 --> 04:55.010
Wzorzec singleton może być czasem przydatny,

04:55.010 --> 04:56.530
nie potrzebujesz go cały czas,

04:56.530 --> 04:58.700
ale na pewno warto o nim wiedzieć, ponieważ

04:58.700 --> 05:00.360
jest to coś ciekawego, co możesz

05:00.360 --> 05:03.290
łatwo zaimplementować w TypeScript dzięki prywatnym

05:03.290 --> 05:04.923
konstruktorom.
