WEBVTT

00:02.170 --> 00:03.860
Giảng viên: Vì vậy, bây giờ chúng ta đã đăng ký một số tuyến

00:03.860 --> 00:05.630
đường, hãy thêm một số logic cho các tuyến đường này.

00:05.630 --> 00:07.730
Để làm được điều đó, tôi sẽ thêm một thư mục bộ điều khiển.

00:07.730 --> 00:08.750
Đó không phải là điều bắt

00:08.750 --> 00:11.550
buộc, nhưng tôi muốn chia logic của mình ở đây thành các bộ điều khiển

00:11.550 --> 00:13.650
và các tuyến đường vào thư mục tuyến đường.

00:13.650 --> 00:16.740
Và trong bộ điều khiển, tôi cũng sẽ thêm todos. ts và giờ đây tệp đó sẽ giữ các

00:16.740 --> 00:19.230
chức năng của bộ điều khiển mà chúng tôi muốn

00:19.230 --> 00:21.990
trỏ đến từ bên trong các tuyến đường của mình.

00:21.990 --> 00:25.120
Vì vậy, ở đây, tôi cần một hàm mà tôi sẽ xuất và tôi sẽ tạo nó

00:25.120 --> 00:27.220
dưới dạng một hàm mũi tên, tuy nhiên đây

00:27.220 --> 00:29.170
không phải là việc bắt buộc và tôi sẽ

00:29.170 --> 00:31.290
đặt tên cho hàm này là createTodo, và đó

00:32.420 --> 00:34.510
là một hàm sẽ nhận các tham số điển hình

00:34.510 --> 00:36.720
này bạn nhận được trong mọi chức năng của

00:36.720 --> 00:38.830
phần mềm trung gian trong express, yêu

00:38.830 --> 00:41.297
cầu, phản hồi và chức năng tiếp theo.

00:41.297 --> 00:44.550
Và chúng tôi vừa thấy chúng tôi có thể lấy các loại từ đâu.

00:44.550 --> 00:47.190
Chúng tôi có thể nhập yêu cầu, phản

00:47.190 --> 00:50.460
hồi và chức năng tiếp theo từ express.

00:50.460 --> 00:52.800
Điều này nhập khẩu cho chúng tôi những loại.

00:52.800 --> 00:54.910
Sau đó chúng ta có thể thêm chúng ở đây.

00:54.910 --> 00:57.230
Bây giờ, việc luôn thêm tất cả các loại này ở đây như

00:57.230 --> 00:59.980
chúng ta đã làm trong phần mềm trung gian xử lý lỗi, tuy nhiên,

00:59.980 --> 01:01.300
có thể hơi cồng kềnh.

01:01.300 --> 01:03.750
Nó hoạt động, nhưng nó có thể gây phiền nhiễu.

01:03.750 --> 01:05.190
Vì vậy, có một phím tắt.

01:05.190 --> 01:08.220
Thay vì đặt các loại trên tất cả các tham số này, chúng

01:08.220 --> 01:11.160
ta cũng có thể chỉ cần cho TypeScript biết loại chức

01:11.160 --> 01:14.610
năng nào chúng ta muốn lưu trữ trong hằng số createTodo

01:14.610 --> 01:16.260
này và sau đó chúng ta có thể

01:16.260 --> 01:19.530
chỉ cần nhập loại RequestHandler từ express, sau đó

01:19.530 --> 01:22.330
chúng ta đặt cái này ở đây, createTodo, thành

01:22.330 --> 01:24.340
gõ RequestHandler.

01:24.340 --> 01:28.780
Và bây giờ bạn thấy TypeScript biết rằng ở đây chúng ta có một yêu cầu, ở đây chúng ta

01:28.780 --> 01:30.560
đã nhận được phản hồi và ở đây chúng

01:30.560 --> 01:32.590
ta có chức năng tiếp theo, bởi vì RequestHandler

01:32.590 --> 01:35.730
của chúng ta được xác định trông như thế này.

01:35.730 --> 01:38.080
Đây là một hàm có ba tham số trong

01:38.080 --> 01:40.160
đó tham số đầu tiên là yêu cầu,

01:40.160 --> 01:42.030
tham số thứ hai là phản hồi

01:42.030 --> 01:44.810
và tham số thứ ba là hàm tiếp theo.

01:44.810 --> 01:47.313
Vì vậy, điều này có thể đơn giản hóa thiết lập này ở đây.

01:48.195 --> 01:49.380
Tất nhiên, RequestHandler

01:49.380 --> 01:51.360
luôn khả dụng vì chúng tôi đã cài đặt các

01:51.360 --> 01:52.570
loại cho express và do đó

01:52.570 --> 01:55.270
chúng tôi có thể thêm phần nhập này tại đây.

01:55.270 --> 01:57.940
Xin lưu ý rằng quá trình nhập này sẽ luôn biến mất sau khi

01:57.940 --> 01:59.960
quá trình này được biên dịch thành JavaScript

01:59.960 --> 02:02.300
vì chúng tôi chỉ nhập một loại ở đây.

02:02.300 --> 02:05.030
Đây không phải là nhập bất kỳ mã nào sẽ thực thi.

02:05.030 --> 02:06.930
Nó chỉ nhập một loại.

02:06.930 --> 02:08.650
Và do đó, trong quá trình biên

02:08.650 --> 02:11.290
dịch, nó sẽ bị xóa vì nó không thêm bất kỳ

02:11.290 --> 02:15.860
thứ gì cần thiết khi nó chạy trong JavaScript thông thường.

02:15.860 --> 02:16.693
Tuy nhiên, với

02:16.693 --> 02:18.900
điều đó, tôi đã có hàm createTodo, và bây

02:18.900 --> 02:22.240
giờ tại sao chúng ta không thêm một mảng TODOS ở đây để quản

02:22.240 --> 02:25.530
lý một số việc cần làm chỉ trong bộ nhớ, tất nhiên.

02:25.530 --> 02:28.310
Điều này sẽ biến mất bất cứ khi nào máy chủ của chúng tôi khởi

02:28.310 --> 02:31.460
động lại vì cuối cùng nó chỉ là một hằng số trong JavaScript.

02:31.460 --> 02:32.293
Tất nhiên, bạn cũng

02:32.293 --> 02:34.770
có thể tưởng tượng việc nói chuyện với một cơ sở dữ liệu

02:34.770 --> 02:36.360
ở đây, nhưng tôi muốn giữ điều này

02:36.360 --> 02:38.630
đơn giản vì nó nói về JavaScript và TypeScript

02:38.630 --> 02:41.323
chứ không nói nhiều về các kết nối cơ sở dữ liệu.

02:42.390 --> 02:43.790
Vì vậy, ở đây tôi phải làm,

02:43.790 --> 02:47.600
và bây giờ ở đây tôi muốn tạo một việc cần làm mới ở đây khi chúng tôi

02:47.600 --> 02:49.320
nhận được một yêu cầu đến, và đó

02:49.320 --> 02:51.020
phải là một đối tượng mới, và tại

02:51.020 --> 02:52.980
sao chúng ta không tạo một bản thiết

02:52.980 --> 02:55.420
kế cho đối tượng này, một mô hình.

02:55.420 --> 02:57.640
Vì vậy, tôi sẽ thêm một thư mục models

02:57.640 --> 02:59.030
và trong thư mục models

02:59.030 --> 03:04.030
đó, tôi sẽ thêm một todo. ts và xuất một lớp ở đây, tôi sẽ đặt tên là

03:04.760 --> 03:06.250
Todo, nơi tôi xác định cách

03:06.250 --> 03:08.210
thực hiện sẽ như thế nào.

03:08.210 --> 03:10.330
Ở đó, chúng ta có thể thêm một hàm

03:10.330 --> 03:13.129
tạo và cũng có thể sử dụng phím tắt TypeScript

03:13.129 --> 03:16.440
này, nơi chúng ta có thể thêm một công cụ sửa đổi truy

03:16.440 --> 03:19.360
cập như công khai và sau đó là tên thuộc tính như

03:19.360 --> 03:21.250
ID, thuộc loại chuỗi, giả sử

03:21.250 --> 03:24.050
và văn bản, cũng là loại chuỗi, sau đó là TypeScript

03:24.050 --> 03:27.470
sẽ tự động thêm các trường, thuộc tính có tên bằng nhau

03:27.470 --> 03:30.130
và các giá trị được gán mà chúng ta chuyển

03:30.130 --> 03:32.750
cho hàm tạo vào các trường đó bất cứ khi nào

03:32.750 --> 03:37.230
chúng ta khởi tạo lớp đó để thực hiện.

03:37.230 --> 03:38.670
Vì vậy, tôi sẽ sử dụng cú pháp này

03:38.670 --> 03:40.060
ở đây và bạn đã học về cú pháp này

03:40.060 --> 03:41.810
trước đó trong khóa học rồi.

03:41.810 --> 03:44.660
Và bây giờ trong todos. ts ở đây trong bộ điều

03:44.660 --> 03:47.893
khiển, tất nhiên chúng ta có thể nhập Todo

03:49.020 --> 03:53.403
từ đó, tăng một cấp, models/todo và sử dụng loại và lớp

03:54.530 --> 03:58.800
này ngay bây giờ ở đây trong tệp của chúng ta.

03:58.800 --> 04:01.320
Và nó vừa là một kiểu vừa là một lớp bởi vì

04:01.320 --> 04:02.800
rõ ràng nó là một lớp và mọi

04:02.800 --> 04:05.750
lớp cũng tự động hoạt động như một kiểu.

04:05.750 --> 04:08.550
Đó cũng là những gì bạn đã thấy trong suốt khóa học này.

04:08.550 --> 04:09.750
Vì vậy, bây giờ ở đây, trước

04:09.750 --> 04:11.910
hết chúng ta có thể nói rằng TODOS ở đây sẽ là

04:11.910 --> 04:13.550
một mảng các việc cần làm.

04:13.550 --> 04:15.480
Chú thích bổ sung này không ảnh hưởng gì

04:15.480 --> 04:18.590
nên chúng tôi nhận được hỗ trợ thích hợp khi chúng tôi bắt đầu thêm

04:18.590 --> 04:21.410
vào dos hoặc bắt đầu làm việc với to dos trong mảng này.

04:21.410 --> 04:23.610
Và ở đây khi tôi tạo một việc cần làm

04:23.610 --> 04:26.220
mới, bây giờ tôi tạo nó bằng cách khởi tạo

04:26.220 --> 04:28.370
lớp này, và chúng ta phải chuyển vào

04:28.370 --> 04:32.030
một ID, và ở đây tôi sẽ tạo một ID giả duy nhất ngẫu nhiên bằng

04:32.030 --> 04:34.230
Toán ngẫu nhiên toString.

04:34.230 --> 04:35.270
Điều này không thực sự

04:35.270 --> 04:36.660
độc đáo, nhưng đủ tốt ở đây.

04:36.660 --> 04:39.170
Và bây giờ đối với giá trị ở đây, tất nhiên

04:39.170 --> 04:41.670
tôi muốn đặt một số văn bản mà tôi mong

04:41.670 --> 04:45.530
muốn nhận được trong nội dung yêu cầu đến của mình.

04:45.530 --> 04:48.823
Vì vậy, tôi hy vọng nhận được văn bản của mình ở đây,

04:49.750 --> 04:53.270
về cơ bản là theo yêu cầu. văn bản, để sau đó tôi

04:53.270 --> 04:56.280
có thể đặt văn bản làm giá trị ở đây.

04:56.280 --> 04:57.113
Bây giờ, cái này

04:57.113 --> 04:59.640
hoạt động, nhưng vui lòng thấy rằng cái này chỉ hoạt

04:59.640 --> 05:02.320
động vì TypeScript thấy rằng đây là loại bất kỳ.

05:02.320 --> 05:04.420
Nó không biết rằng đây là một chuỗi.

05:04.420 --> 05:05.510
Và nó không thể biết,

05:05.510 --> 05:08.390
vì làm sao TypeScript biết dữ liệu nào sẽ là một phần

05:08.390 --> 05:11.140
của các yêu cầu sắp tới của chúng tôi?

05:11.140 --> 05:12.430
Nó không rõ ràng với nó.

05:12.430 --> 05:14.260
Chúng tôi không bao giờ nói rõ những

05:14.260 --> 05:17.620
gì sẽ có bên trong các yêu cầu mà chúng tôi nhận được.

05:17.620 --> 05:19.270
Bây giờ, làm thế nào chúng ta có thể cải thiện điều này?

05:19.270 --> 05:21.780
Chà, chúng ta có thể sử dụng typecasting chẳng hạn.

05:21.780 --> 05:23.660
Typecasting luôn là một giải pháp tuyệt

05:23.660 --> 05:26.090
vời nếu bạn biết về một loại cụ thể, nhưng TypeScript

05:26.090 --> 05:27.360
thì không.

05:27.360 --> 05:30.440
Vì vậy, ở đây trên phần thân yêu cầu, trước khi chúng tôi truy cập văn bản, chúng

05:30.440 --> 05:32.650
tôi có thể đánh máy đối tượng này thành một đối tượng mà

05:32.650 --> 05:34.900
chúng tôi có thuộc tính văn bản, là một chuỗi.

05:34.900 --> 05:36.920
Bởi vì chúng tôi đang xây dựng ứng dụng này, chúng

05:36.920 --> 05:40.320
tôi biết những gì chúng tôi mong đợi đối với các yêu cầu sắp tới của chúng tôi.

05:40.320 --> 05:42.750
Vì vậy, vì chúng tôi biết rằng sẽ có một thuộc tính văn

05:42.750 --> 05:44.166
bản trên nội dung yêu cầu đến, chúng

05:44.166 --> 05:46.630
tôi có thể chuyển nó thành một đối tượng như vậy.

05:46.630 --> 05:51.480
Và bây giờ ở đây, chúng tôi nhận được hỗ trợ TypeScript và IDE phù hợp.

05:51.480 --> 05:53.560
Vì vậy, với điều đó, chúng tôi thêm một cái mới để làm.

05:53.560 --> 05:55.470
Giờ đây, chúng tôi có thể liên hệ

05:55.470 --> 05:58.280
với TODOS và đẩy công việc mới vào mảng này.

05:58.280 --> 05:59.330
Và một lần nữa, điều

05:59.330 --> 06:01.060
này, tất nhiên, sẽ chỉ lưu trữ

06:01.060 --> 06:02.750
nó ở đây dưới dạng hằng số và do

06:02.750 --> 06:05.650
đó chỉ trong bộ nhớ, bởi vì làm việc với cơ sở dữ liệu

06:05.650 --> 06:08.880
không thực sự liên quan trực tiếp đến nút hoặc TypeScript,

06:08.880 --> 06:11.170
mà là cơ sở dữ liệu.

06:11.170 --> 06:14.140
Vì vậy, với điều đó, chúng ta có chức năng tạo Todo ở đây.

06:14.140 --> 06:16.400
Bây giờ, hãy chuyển đến các tuyến đường

06:16.400 --> 06:19.070
cần làm và nhập hàm điều khiển này.

06:19.070 --> 06:22.030
Vì vậy, hãy nhập từ thư mục bộ điều khiển

06:22.030 --> 06:24.000
từ tệp todos trong đó, đồng

06:24.000 --> 06:26.660
thời nhập chức năng tạo Todo và trỏ vào

06:26.660 --> 06:30.100
chức năng này ở đây trên tuyến đường đăng để bất

06:30.100 --> 06:35.100
kỳ yêu cầu nào nhắm mục tiêu gạch chéo todos không có gì đến được với

06:36.060 --> 06:38.390
chức năng createTodo.

06:38.390 --> 06:39.580
Đừng thực hiện nó ở đây.

06:39.580 --> 06:40.650
Chỉ cần chỉ vào nó.

06:40.650 --> 06:43.890
Nó sẽ được thực thi cho bạn theo nút và thể hiện trong máy

06:43.890 --> 06:45.883
chủ web đang chạy của bạn sau này.

06:46.880 --> 06:49.630
Vì vậy, bây giờ chúng tôi có chức năng này ở đây.

06:49.630 --> 06:50.900
Tuy nhiên, chúng tôi chưa hoàn thành.

06:50.900 --> 06:52.290
Trong bộ điều khiển, tất cả

06:52.290 --> 06:54.360
chúng ta chỉ nên trả về một phản hồi.

06:54.360 --> 06:56.720
vì vậy, ở đây chúng tôi có thể gửi phản hồi,

06:56.720 --> 06:59.420
chẳng hạn như ở định dạng JSON bằng phương thức JSON

06:59.420 --> 07:02.300
trong đó chúng tôi nói rằng thông báo đã tạo việc cần

07:02.300 --> 07:04.040
làm hoặc bất kỳ điều gì bạn muốn

07:04.040 --> 07:07.770
và chúng tôi có khóa createdTodo, có thể, nơi chúng tôi chuyển tiếp

07:07.770 --> 07:10.520
khóa mới để thực hiện việc đó đã được thêm vào phía

07:10.520 --> 07:12.660
máy chủ để trên máy khách, chúng tôi cũng

07:12.660 --> 07:14.490
có thể sử dụng nó.

07:14.490 --> 07:17.750
Và cũng có thể đặt mã trạng thái 201 tại đây để cho

07:17.750 --> 07:19.700
biết rằng chúng tôi đã thành công

07:19.700 --> 07:21.793
và tài nguyên đã được tạo.

07:22.680 --> 07:24.640
Bây giờ chúng ta chỉ cần đảm bảo rằng

07:24.640 --> 07:28.500
cơ thể mà chúng ta đang cố trích xuất ở đây thực sự tồn tại.

07:28.500 --> 07:29.770
Và đối với dữ liệu và ứng dụng. ts, chúng

07:29.770 --> 07:33.130
ta cần phân tích nội dung của các yêu cầu đến.

07:33.130 --> 07:37.620
Để làm được điều đó, chúng ta có thể nhập từ gói body-parser

07:37.620 --> 07:39.220
mà chúng ta cũng đã

07:39.220 --> 07:41.380
cài đặt và từ gói đó, chúng

07:41.380 --> 07:46.380
ta có thể nhập phương thức JSON như thế này.

07:46.410 --> 07:49.170
Và sau đó tại đây, bạn có thể đăng ký phần mềm này được

07:49.170 --> 07:51.310
thực thi như một phần mềm trung gian.

07:51.310 --> 07:54.480
Vì vậy, đây là phần mềm trung gian do gói bên thứ ba cung

07:54.480 --> 07:58.130
cấp. Phần mềm này sẽ phân tích cú pháp nội dung của tất cả các yêu

07:58.130 --> 08:01.570
cầu đến và trích xuất bất kỳ dữ liệu JSON nào mà nó tìm thấy trong

08:01.570 --> 08:05.990
đó để sau đó điền khóa nội dung vào đối tượng yêu cầu này bằng dữ liệu JSON đã

08:05.990 --> 08:07.970
phân tích cú pháp đó.

08:07.970 --> 08:10.290
Đó là những gì mà phần mềm trung gian JSON

08:10.290 --> 08:12.503
này từ gói body-parser thực hiện.

08:13.890 --> 08:16.520
Và cùng với đó, chúng ta nên có một máy chủ có khả

08:16.520 --> 08:18.230
năng tạo việc cần làm mới.

08:18.230 --> 08:22.210
Lưu tất cả các tệp và đảm bảo rằng nó biên dịch lại mà không có lỗi.

08:22.210 --> 08:26.150
Đảm bảo gật đầu vẫn đang phục vụ ứng dụng. tập tin js.

08:26.150 --> 08:28.560
Và bây giờ chúng ta cần gửi yêu cầu đăng bài.

08:28.560 --> 08:31.150
Và với trình duyệt, chúng ta không thể làm điều đó, nhưng

08:31.150 --> 08:34.260
chúng ta có thể sử dụng một công cụ cho việc đó, Postman.

08:34.260 --> 08:35.600
Bạn có thể chỉ cần tìm kiếm nó và

08:35.600 --> 08:38.160
sau đó cài đặt ứng dụng Postman trên hệ thống của mình.

08:38.160 --> 08:39.283
Nó miễn phí để sử dụng.

08:40.440 --> 08:41.570
Khi bạn đã cài đặt xong, bạn

08:41.570 --> 08:43.390
có thể khởi động nó và bạn sẽ thấy một màn hình

08:43.390 --> 08:44.440
giống như thế này.

08:44.440 --> 08:46.460
Nếu bạn thấy lớp phủ phương thức, bạn

08:46.460 --> 08:48.010
chỉ cần đóng lớp phủ đó.

08:48.010 --> 08:50.240
Và tại đây, bây giờ bạn có thể tạo một yêu

08:50.240 --> 08:51.740
cầu mới bằng cách nhấp vào

08:51.740 --> 08:53.040
dấu cộng đó, chọn loại

08:53.040 --> 08:55.100
yêu cầu, trong trường hợp này là yêu

08:55.100 --> 08:56.450
cầu đăng, nhập URL.

08:56.450 --> 08:58.820
Đây là localhost 3000, 3000

08:58.820 --> 09:01.660
vì đó là cổng tôi đã chọn ở đây.

09:01.660 --> 09:03.100
Và sau đó chúng ta cần

09:03.100 --> 09:06.320
gửi yêu cầu để giảm todos không có gì.

09:06.320 --> 09:10.000
Vì vậy, ở đây để chém todos chém không có gì.

09:10.000 --> 09:12.120
Chúng tôi muốn đính kèm một phần thân

09:12.120 --> 09:15.440
vào yêu cầu và đó phải là một JSON phần thân thô ở đây để gửi

09:15.440 --> 09:17.010
một số dữ liệu JSON.

09:17.010 --> 09:19.480
Và bây giờ chúng ta cần gửi gì đây?

09:19.480 --> 09:21.840
Chà, những gì chúng tôi trích xuất trong chức năng phần mềm

09:21.840 --> 09:22.880
trung gian, vì vậy trong trường

09:22.880 --> 09:24.570
hợp này, chúng tôi nên có một thuộc tính văn

09:24.570 --> 09:27.410
bản như một phần của dữ liệu JSON mà chúng tôi đang gửi.

09:27.410 --> 09:29.610
Vì vậy, ở đây, hãy thêm văn bản làm tên và sau

09:29.610 --> 09:31.070
đó là bất kỳ văn bản nào bạn chọn,

09:31.070 --> 09:33.230
chẳng hạn như kết thúc khóa học.

09:33.230 --> 09:36.960
Và nếu bây giờ bạn nhấp vào gửi, nó sẽ gửi yêu cầu và đây là phản

09:36.960 --> 09:38.990
hồi, và điều này có vẻ tốt.

09:38.990 --> 09:40.670
Chúng tôi đã tạo một để làm lại.

09:40.670 --> 09:43.600
Chúng tôi thấy ID đã được tạo và văn bản.

09:43.600 --> 09:45.870
Vì vậy, phụ trợ của chúng tôi rõ ràng hoạt động ở đây.

09:45.870 --> 09:47.690
Và chúng tôi đã viết tất cả bằng TypeScript, nhưng chúng

09:47.690 --> 09:49.880
tôi đang phục vụ nó dưới dạng JavaScript thông thường.

09:49.880 --> 09:51.183
Đó là toàn bộ thủ thuật.
