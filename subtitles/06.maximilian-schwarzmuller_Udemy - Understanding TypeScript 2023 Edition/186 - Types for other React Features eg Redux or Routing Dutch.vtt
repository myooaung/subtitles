WEBVTT

00:02.100 --> 00:04.390
Instructeur: In grotere React-toepassingen

00:04.390 --> 00:08.640
werk je natuurlijk met meer dan alleen useRef en useState.

00:08.640 --> 00:10.950
Om te begrijpen hoe je TypeScript daar gebruikt,

00:10.950 --> 00:13.460
is het eigenlijk altijd handig om gewoon te zweven over

00:13.460 --> 00:15.180
de functies die je aanroept, dus de

00:15.180 --> 00:17.090
andere hooks waar je mee werkt.

00:17.090 --> 00:20.010
Als je bijvoorbeeld het gereedschap useEffect hier nodig

00:20.010 --> 00:22.660
hebt, in de component NewTodo, om wat voor reden dan

00:22.660 --> 00:26.330
ook, dan kun je het aanroepen en er daarna gewoon overheen gaan, om te

00:26.330 --> 00:29.010
begrijpen met welke types het werkt.

00:29.010 --> 00:30.960
Bijvoorbeeld dat het eerste argument

00:30.960 --> 00:33.720
een EffectCallback is, wat een speciale functie is,

00:33.720 --> 00:37.100
waarbij TypeScript je zal waarschuwen als je het verkeerd instelt,

00:37.100 --> 00:38.610
dat het tweede argument ofwel

00:38.610 --> 00:41.480
niets is of een array van wat dan ook, dat soort dingen,

00:41.480 --> 00:42.997
dit zal je altijd helpen, je leert

00:42.997 --> 00:45.930
bijvoorbeeld ook dat useEffect niets teruggeeft, en op

00:45.930 --> 00:49.200
useState, waar ik zei dat je altijd een array terugkrijgt met

00:49.200 --> 00:52.410
precies twee elementen, nou, dat zie je hier ook, useState geeft

00:52.410 --> 00:56.310
een array terug, dat is wat we hier zien, openings- en sluitingsbeugel, waarbij

00:56.310 --> 01:01.750
het eerste element van je generieke type is, dus een lijst van Todo's, want dat is je state snapshot, het

01:01.750 --> 01:08.600
tweede element is een React.

01:08.600 --> 01:08.600
Dispatch

01:08.600 --> 01:11.370
functie hier uiteindelijk, dat is wat hier gebeurt.

01:11.370 --> 01:12.690
Dus dat kan nuttig zijn.

01:12.690 --> 01:15.490
Misschien werk je ook met Redux.

01:15.490 --> 01:19.660
Nou, gelukkig, als je in hun documentatie duikt, vind

01:19.660 --> 01:21.360
je ook instructies over

01:21.360 --> 01:24.530
het gebruik van Redux met TypeScript.

01:24.530 --> 01:27.430
Hier, onder Recepten vind je Gebruik met TypeScript,

01:27.430 --> 01:30.710
en daar kun je leren hoe je types kunt toevoegen aan je

01:30.710 --> 01:33.270
acties, en aan je reducers, en aan je state

01:33.270 --> 01:35.540
management met Redux.

01:35.540 --> 01:38.650
Het is heel eenvoudig, helemaal niet ingewikkeld,

01:38.650 --> 01:41.520
en voegt veel typeveiligheid toe.

01:41.520 --> 01:43.230
Misschien gebruik je

01:43.230 --> 01:47.110
ook het React Router pakket, dit pakket hier.

01:47.110 --> 01:52.040
Daar vindt u geen specifieke TypeScript notaties, wel, natuurlijk kunt u dit ook

01:52.040 --> 01:54.020
in uw project installeren, met npm

01:54.020 --> 01:55.340
install dash dash save

01:55.340 --> 01:58.770
react dash router dash dom, wat het commando is dat u typisch

01:58.770 --> 02:00.740
zou gebruiken om dit pakket in uw

02:00.740 --> 02:03.720
React project te installeren.

02:03.720 --> 02:07.000
Dus dit zal het react-router-dom pakket toevoegen.

02:07.000 --> 02:10.250
Maar dit pakket heeft geen speciale type-instructies

02:10.250 --> 02:12.430
op zijn pagina hier, u vindt hier niets

02:12.430 --> 02:14.720
TypeScript-specifieks, althans

02:14.720 --> 02:17.570
op het moment dat ik dit opneem.

02:17.570 --> 02:19.163
Toch kunnen we dit natuurlijk

02:19.163 --> 02:21.250
ook in een TypeScript-project gebruiken,

02:21.250 --> 02:23.920
en daar goede type-ondersteuning krijgen.

02:23.920 --> 02:25.800
Nu, met het geïnstalleerd, zul je

02:25.800 --> 02:29.360
merken dat als ik importeer van react-router-dom, ik daar niet

02:29.360 --> 02:31.880
echt geweldige type-ondersteuning heb.

02:31.880 --> 02:33.870
Bijvoorbeeld, als ik hier iets probeer te

02:33.870 --> 02:36.870
importeren, krijg ik al een waarschuwing, dat er geen declaratie

02:36.870 --> 02:39.210
voor module react-router-dom kon worden gevonden,

02:39.210 --> 02:42.730
dus dat het hier geen type-informatie heeft gevonden.

02:42.730 --> 02:45.420
Om dat op te lossen, kunnen we natuurlijk iets

02:45.420 --> 02:48.450
doen wat we al eerder deden, npm install dash dash save

02:48.450 --> 02:52.530
dash dev, at types, slash react dash router dash dom, dus we annuleren

02:52.530 --> 02:54.620
de at search types hier, en we zijn weer

02:54.620 --> 02:56.860
goed, dit is een truc waar je al over geleerd

02:56.860 --> 02:59.097
hebt, vroeg in de cursus, maar je hoeft

02:59.097 --> 03:02.010
het natuurlijk niet te vergeten, gewoon omdat we

03:02.010 --> 03:03.920
een project hebben waar veel al werkt

03:03.920 --> 03:06.790
met TypeScript out of the box.

03:06.790 --> 03:08.140
Als we dan iets toevoegen

03:08.140 --> 03:10.810
dat niet werkt met TypeScript, zoals deze, kunnen

03:10.810 --> 03:13.700
we het zo toevoegen, en nu is het zich bewust van Route,

03:13.700 --> 03:15.380
het is zich ook bewust van alle andere

03:15.380 --> 03:17.270
functies uit dit pakket.

03:17.270 --> 03:21.070
Dus dit is hoe gemakkelijk je ook hiervoor ondersteuning kunt toevoegen.

03:21.070 --> 03:23.560
En dat is hoe je dit in het algemeen moet aanpakken,

03:23.560 --> 03:26.010
kijk naar de officiële docs, kijk of je daar instructies

03:26.010 --> 03:29.030
ziet over gebruik met TypeScript, zo niet, installeer het

03:29.030 --> 03:31.590
en kijk of het ingebouwde type-ondersteuning heeft,

03:31.590 --> 03:33.720
zodat je tenminste goede auto-aanvulling

03:33.720 --> 03:39.090
en compilatie-ondersteuning krijgt, en als dat ook niet bestaat, installeer dan een types-pakket,

03:39.090 --> 03:42.080
zoals wij hier hebben gedaan.

03:42.080 --> 03:43.980
En dat is het echt voor deze module,

03:43.980 --> 03:46.410
en dit is hoe je TypeScript, en al zijn geweldige

03:46.410 --> 03:49.920
mogelijkheden kunt gebruiken in een React app, en natuurlijk,

03:49.920 --> 03:52.450
alles wat je leert in deze cursus, is ook van toepassing

03:52.450 --> 03:54.370
op een React app.

03:54.370 --> 03:56.380
U kunt alle TypeScript-functies waarover u in

03:56.380 --> 03:59.130
deze cursus hebt geleerd, gebruiken in een React-project.
