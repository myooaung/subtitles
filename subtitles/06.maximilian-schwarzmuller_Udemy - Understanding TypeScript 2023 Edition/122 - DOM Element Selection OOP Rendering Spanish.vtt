WEBVTT

00:02.300 --> 00:03.420
Tutor: Para empezar, aquí

00:03.420 --> 00:07.060
voy a ejecutar npm start para que aparezca ese servidor de desarrollo.

00:07.060 --> 00:09.384
Que sirve el archivo HTML y la pestaña de

00:09.384 --> 00:13.434
menú, tsc-w para iniciar los tipos de compilación en modo de vigilancia

00:13.434 --> 00:17.988
para que nuestro archivo JavaScript de la aplicación se reconstruya continuamente

00:17.988 --> 00:21.740
y podamos verlo en la aplicación en ejecución.

00:21.740 --> 00:24.480
En este momento, por supuesto, nuestra aplicación no tiene un aspecto demasiado elegante.

00:24.480 --> 00:26.340
Es una página vacía.

00:26.340 --> 00:27.850
Así que para empezar,

00:27.850 --> 00:30.250
hay muchas maneras de hacerlo.

00:30.250 --> 00:35.040
Ahora, quiero empezar por hacer visible este formulario.

00:35.040 --> 00:36.660
Y ahora, hay muchas maneras, en realidad

00:36.660 --> 00:38.790
voy a escribir esta aplicación en un enfoque

00:38.790 --> 00:40.208
orientado a objetos.

00:40.208 --> 00:43.303
Lo cual es 100% opcional, pero ya que aprendimos

00:43.303 --> 00:46.080
sobre las clases y demás, quiero mostrar realmente

00:46.080 --> 00:48.083
cómo funciona esto y por lo tanto

00:48.083 --> 00:51.140
voy a utilizar este enfoque.

00:51.140 --> 00:51.973
Así que en la clave

00:51.973 --> 00:55.510
de la aplicación, añadiré una nueva clase y la llamaré Proyecto de entrada,

00:55.510 --> 00:59.120
aunque el nombre de la clase, por supuesto, depende de ti.

00:59.120 --> 01:00.570
Ahora en esta clase, nuestro

01:00.570 --> 01:04.590
objetivo tiene que ser, para obtener acceso a esta plantilla y la

01:04.590 --> 01:08.220
forma en ella y para obtener acceso a este div aquí, y luego hacer

01:08.220 --> 01:11.710
que nuestra plantilla en ese div en el final.

01:11.710 --> 01:15.160
Así que el contenido de la plantilla, el formulario en ese div.

01:15.160 --> 01:17.130
Ese tiene que ser nuestro objetivo.

01:17.130 --> 01:18.850
Ahora para lograr esto, aquí

01:18.850 --> 01:20.588
en la entrada del proyecto, voy

01:20.588 --> 01:23.450
a añadir un constructor donde al final quiero obtener

01:23.450 --> 01:25.920
el acceso a mi plantilla y al lugar donde debe

01:25.920 --> 01:27.970
ser renderizado.

01:28.830 --> 01:33.310
Y para esto aquí, voy a añadir dos propiedades sobre la marcha con esto,

01:33.310 --> 01:37.460
la propiedad del elemento de plantilla y luego también la propiedad

01:37.460 --> 01:40.180
del elemento de acogida.

01:40.180 --> 01:42.420
Los nombres dependen al 100% de ti.

01:42.420 --> 01:44.990
Al final mi idea es que el elemento host, tiene una

01:44.990 --> 01:46.970
referencia al elemento donde quiero

01:46.970 --> 01:49.650
renderizar el contenido de mi plantilla al final y

01:49.650 --> 01:51.427
bueno, el elemento template me da

01:51.427 --> 01:54.050
acceso a la plantilla que tiene este contenido.

01:54.050 --> 01:56.120
Ahora para acceder a esa plantilla, vamos

01:56.120 --> 01:59.690
a echar un vistazo a index html y ver cómo podemos identificar la plantilla

01:59.690 --> 02:01.870
que contiene el formulario.

02:01.870 --> 02:04.050
Bueno, tiene este ID de proyecto de entrada,

02:04.050 --> 02:06.120
por lo que parece una buena estrategia.

02:06.120 --> 02:08.510
Así que aquí podemos utilizar el documento

02:08.510 --> 02:11.022
getElementById proyecto-entrada.

02:11.022 --> 02:15.410
Esto nos da acceso a este elemento de la plantilla.

02:15.410 --> 02:17.820
Ahora, un par de cosas importantes.

02:17.820 --> 02:21.320
Aquí obtenemos un error de que el elemento de la plantilla es una propiedad

02:21.320 --> 02:23.900
que no existe en el proyecto-entrada.

02:23.900 --> 02:28.140
Ahora para deshacernos de esto, en realidad deberíamos añadirlo

02:28.140 --> 02:31.610
como un nuevo campo aquí directamente en la clase.

02:31.610 --> 02:34.050
Entonces podemos asignarlo con seguridad.

02:34.050 --> 02:36.040
Ahora aquí, también quiero ser claro sobre el tipo

02:36.040 --> 02:37.450
que sería almacenado allí.

02:37.450 --> 02:41.070
Y eso será un elemento de plantilla HTML.

02:41.070 --> 02:43.270
Este tipo está disponible globalmente

02:43.270 --> 02:47.380
porque en el archivo tsconfig js, agregué el DOM como una lib y eso

02:47.380 --> 02:50.360
agrega todos estos tipos de DOM, todos estos

02:50.360 --> 02:53.777
tipos de elementos HTML como tipos typescript a todo

02:53.777 --> 02:55.493
el proyecto.

02:57.280 --> 03:00.400
Ahora esto infunde un nuevo error aquí sin embargo, ves

03:00.400 --> 03:03.110
que al final esto podría ser nulo cuando obtenemos

03:03.110 --> 03:04.760
el elemento por ID, por supuesto

03:04.760 --> 03:08.510
sabemos que no va a fallar pero typescript no tiene posibilidad

03:08.510 --> 03:09.850
de saber esto porque no

03:09.850 --> 03:12.757
va a analizar nuestro archivo html.

03:12.757 --> 03:16.210
Así que tal vez no exista ningún elemento con este ID y, por lo tanto,

03:16.210 --> 03:18.210
esto arrojaría un resultado nulo.

03:18.210 --> 03:20.680
Ahora aquí, decimos que no almacenamos null

03:20.680 --> 03:23.920
allí, sólo almacenamos el elemento de plantilla HTML.

03:23.920 --> 03:25.800
Así que, para eliminar este peligro,

03:25.800 --> 03:29.470
tenemos que decirle a typescript, que esto nunca será nulo.

03:29.470 --> 03:31.290
¿Y sabes cómo puedes hacerlo?

03:31.290 --> 03:33.580
Aquí puedes añadir un signo de exclamación.

03:33.580 --> 03:35.020
Una alternativa, por supuesto,

03:35.020 --> 03:36.170
sólo para mostrar

03:36.170 --> 03:37.820
esto, si usted no está seguro,

03:37.820 --> 03:41.640
es almacenar como digamos en una constante y luego comprobar

03:41.640 --> 03:46.640
si el elemento de la plantilla es truthy, por lo que si no es nulo y, a continuación,

03:46.900 --> 03:48.600
almacenar dentro de que si

03:48.600 --> 03:51.490
la verificación aquí.

03:51.490 --> 03:52.720
Ahora, seguimos recibiendo

03:52.720 --> 03:54.190
un error, pero será un error diferente,

03:54.190 --> 03:55.840
al que volveré más tarde.

03:55.840 --> 03:58.060
Por ahora, esto serviría si no

03:58.060 --> 03:59.650
estamos seguros.

03:59.650 --> 04:01.930
Sin embargo, aquí estoy seguro.

04:01.930 --> 04:02.763
Y, por cierto, si no está

04:02.763 --> 04:03.596
seguro, debe proporcionar

04:03.596 --> 04:06.000
un recurso en el caso de que no sea así, por supuesto.

04:06.000 --> 04:08.530
Pero aquí estoy seguro de que obtendremos dicho elemento y, por

04:08.530 --> 04:10.544
lo tanto, podemos simplemente añadir un signo de exclamación

04:10.544 --> 04:11.803
a partir de entonces para decirle

04:11.803 --> 04:13.710
a la tipografía: "Todo bien".

04:13.710 --> 04:17.300
Obtendremos acceso a un elemento con ese ID. Ahora, como ya he mencionado, todavía tenemos otro

04:17.300 --> 04:18.133
error.

04:18.133 --> 04:20.220
Falta el contenido de la propiedad en el elemento HTML de tipo.

04:20.220 --> 04:24.270
El problema aquí es que le estamos diciendo a typescript que vamos

04:24.270 --> 04:27.140
a almacenar un elemento de plantilla que es

04:27.140 --> 04:29.550
de tipo html template element.

04:29.550 --> 04:32.160
Y, efectivamente, así será.

04:32.160 --> 04:34.800
Ahora, por supuesto, getElementById

04:34.800 --> 04:38.730
no sabe qué elemento devolverá finalmente.

04:38.730 --> 04:41.130
Sólo sabe que sería algún elemento html

04:41.130 --> 04:43.920
pero no qué versión especializada del mismo.

04:43.920 --> 04:46.600
Si es un div, un párrafo, un botón o como en este

04:46.600 --> 04:48.720
caso un elemento de plantilla.

04:48.720 --> 04:51.387
getElementById no tiene ninguna posibilidad de saberlo.

04:51.387 --> 04:54.590
Por lo tanto, para decir el tipo de letra que, por

04:54.590 --> 04:57.460
supuesto, también sabemos con certeza.

04:57.460 --> 05:00.660
Podemos utilizar la fundición de tipos.

05:00.660 --> 05:02.260
Usted también se enteró de esto.

05:02.260 --> 05:03.730
Hay dos sintaxis que puedes utilizar.

05:03.730 --> 05:05.950
Los paréntesis angulares al principio

05:05.950 --> 05:07.690
y luego el tipo al que quieres

05:07.690 --> 05:10.130
lanzar esto con el que le estás diciendo

05:10.130 --> 05:11.847
a typeScript, "¡Hey!

05:11.847 --> 05:12.700
La cosa, la expresión

05:12.700 --> 05:15.840
que viene después de esto aquí, esto será de ese tipo. o, alternativamente, se añade como elemento de plantilla HTML,

05:15.840 --> 05:17.650
que es el enfoque que yo utilizaría.

05:17.650 --> 05:21.200
Y con eso, le garantizas a typescript que lo

05:21.200 --> 05:23.040
que recuperes aquí no

05:23.040 --> 05:25.700
será null y será de este tipo.

05:25.700 --> 05:27.950
Se habla mucho de seleccionar esto, pero es una tarea

05:30.027 --> 05:30.860
común y es importante

05:30.860 --> 05:32.016
hacerlo bien.

05:32.016 --> 05:33.630
Ahora continuemos con el elemento anfitrión.

05:33.630 --> 05:35.563
Aquí, también debemos añadir el elemento

05:36.890 --> 05:39.360
de acogida como un campo y sabemos que el elemento

05:39.360 --> 05:43.350
de acogida, cuando en realidad queremos hacer nuestro proyecto de entrada

05:43.350 --> 05:45.960
será al final este div aquí.

05:45.960 --> 05:48.560
Ahí es donde quiero hacer mi formulario.

05:48.560 --> 05:51.410
Por lo tanto, aquí podemos decir elemento HTML div.

05:51.410 --> 05:54.000
Ese es el tipo de elemento al que vamos a añadir esto.

05:54.000 --> 05:57.730
También podríamos ser un poco menos específicos y decir simplemente

05:57.730 --> 06:00.260
elemento HTML, porque aquí realmente no

06:00.260 --> 06:02.740
me importa si es un div o no.

06:02.740 --> 06:04.970
Pero ya que lo sabemos con

06:04.970 --> 06:08.400
certeza, ¿por qué no añadirlo?

06:08.400 --> 06:10.250
Ahora, quiero acceder a ese div, por supuesto,

06:10.250 --> 06:11.263
donde esto debe ser añadido

06:12.110 --> 06:14.850
y si tenemos una mirada en el índice. html, vemos que podemos identificar este

06:14.850 --> 06:16.530
div por el ID de nuevo.

06:16.530 --> 06:18.970
El ID de la aplicación en este caso.

06:18.970 --> 06:19.945
Así que ahora, de vuelta

06:19.945 --> 06:24.640
en app ts, podemos usar document getElementById una vez más y llegar al elemento con el id app.

06:24.640 --> 06:28.780
Ahora, tenemos los mismos problemas que antes, esto puede

06:28.780 --> 06:32.920
ser nulo, así que tenemos que añadir el signo de exclamación

06:32.920 --> 06:35.112
porque de nuevo, sabemos con certeza

06:35.112 --> 06:39.620
que no lo hará, y getElementById no sabe que esto será un elemento

06:39.620 --> 06:42.283
HTML div así que, debemos lanzar esto

06:43.430 --> 06:46.030
aquí también.

06:46.030 --> 06:48.150
Y con eso ya podemos encontrar cómo

06:48.150 --> 06:51.210
acceder a todos los elementos que necesitamos.

06:51.210 --> 06:53.990
Bueno, se habló mucho de eso.

06:53.990 --> 06:56.070
Con eso, lamentablemente, no hemos conseguido mucho.

06:56.070 --> 06:59.140
Tenemos acceso a estos elementos, pero

06:59.140 --> 07:01.970
no estamos renderizando nada allí.

07:01.970 --> 07:03.940
Así que continuemos con eso.

07:03.940 --> 07:05.790
Para ello, necesitamos importar el contenido

07:05.790 --> 07:08.020
de este elemento de la plantilla, así que básicamente

07:08.020 --> 07:10.620
importar lo que está dentro de las etiquetas de la plantilla y renderizar

07:10.620 --> 07:11.760
esto en el DOM.

07:11.760 --> 07:15.520
Podemos hacer esto aquí mismo en el constructor porque mi idea

07:15.520 --> 07:17.603
y por supuesto, esto es sólo mi idea,

07:18.510 --> 07:20.270
usted podría configurar esto

07:20.270 --> 07:21.870
de manera diferente.

07:21.870 --> 07:22.940
Pero mi idea es que cuando creamos

07:22.940 --> 07:24.550
una nueva instancia de esta clase, inmediatamente

07:24.550 --> 07:26.430
quiero renderizar un formulario que pertenece

07:26.430 --> 07:28.250
a esta instancia.

07:28.250 --> 07:30.190
Así que lo haremos en el constructor.

07:30.190 --> 07:31.770
Ahí podemos obtener nuestro

07:31.770 --> 07:34.420
nodo importado o contenido HTML importado

07:34.420 --> 07:37.430
o como quieras llamarlo, que podemos obtener

07:37.430 --> 07:40.627
con el documento importNode y que es un método proporcionado

07:40.627 --> 07:44.917
en el objeto documento global y a importNode le pasas un puntero a

07:45.860 --> 07:49.260
tu elemento de plantilla.

07:49.260 --> 07:52.650
Así que este elemento de la plantilla en el final, o para ser precisos no el elemento,

07:52.650 --> 07:54.410
pero el contenido de punto allí.

07:54.410 --> 07:57.010
El contenido es una propiedad que existe

07:57.010 --> 08:00.891
en los elementos de las plantillas HTML y simplemente

08:00.891 --> 08:05.320
da una referencia al contenido de una plantilla.

08:05.320 --> 08:07.480
Así que al código HTML entre el texto de la plantilla.

08:07.480 --> 08:09.520
ImportNode también toma un

08:09.520 --> 08:13.306
segundo argumento que define si debe importar esto

08:13.306 --> 08:15.670
con un clon profundo o no.

08:15.670 --> 08:17.940
Así que todos los niveles de anidación dentro de la plantilla y definitivamente quiero

08:17.940 --> 08:19.630
hacer eso así que voy a proporcionar verdadera aquí.

08:19.630 --> 08:22.570
Ahora, tenemos el importedNode y como verás,

08:22.570 --> 08:26.340
este es de tipo document fragment que typescript asumió

08:26.340 --> 08:28.830
o infirió automáticamente.

08:28.830 --> 08:30.770
Ahora podemos usar ese importedNode,

08:30.770 --> 08:34.910
y por supuesto quiero usarlo para renderizar algún contenido.

08:34.910 --> 08:36.960
Para ello añadiré un nuevo

08:36.960 --> 08:40.970
método, un método privado al que llamaré attach.

08:40.970 --> 08:42.810
No es necesario hacer eso, sólo quiero dividir

08:42.810 --> 08:45.150
mi lógica de selección y renderización.

08:45.150 --> 08:46.390
Dentro de attach, voy

08:46.390 --> 08:51.270
a llegar al elemento anfitrión, por lo que el lugar donde quiero renderizar

08:51.270 --> 08:52.820
mi contenido y llamar a

08:52.820 --> 08:54.930
insertAdjacentElement que es

08:54.930 --> 08:57.840
un método por defecto proporcionado por el

08:57.840 --> 09:00.770
navegador al final en JavaScript.

09:00.770 --> 09:02.980
Para insertar el elemento HTML un elemento adyacente

09:02.980 --> 09:04.340
de inserción, en primer lugar

09:04.340 --> 09:08.778
toma una descripción de dónde insertarlo, así que allí se puede insertar después del comienzo

09:08.778 --> 09:13.180
del elemento que está apuntando, por lo que justo después de la etiqueta de apertura del

09:13.180 --> 09:17.850
elemento de acogida, antes del comienzo o antes de la etiqueta de apertura, antes de la etiqueta

09:17.850 --> 09:20.870
final o después de la etiqueta final.

09:20.870 --> 09:23.570
Y aquí voy a ir para después de empezar a insertarlo

09:23.570 --> 09:27.020
justo al principio de la etiqueta de apertura.

09:27.020 --> 09:30.580
Y entonces la cosa que quiero insertar es mi importedNode

09:30.580 --> 09:33.053
sin embargo, en primer lugar que es

09:34.900 --> 09:39.140
una constante sólo disponible en el constructor y en segundo

09:39.140 --> 09:42.970
lugar, que es un fragmento de documento.

09:42.970 --> 09:44.630
No podíamos insertarlo así.

09:44.630 --> 09:46.896
En su lugar, necesitamos acceder al elemento HTML concreto

09:46.896 --> 09:48.240
que hay, que podemos almacenar en

09:48.240 --> 09:49.800
otro elemento de propiedad.

09:49.800 --> 09:52.770
Que también tenemos que añadir como un campo allí

09:52.770 --> 09:55.560
arriba que puede ser de tipo elemento HTML o en

09:55.560 --> 09:58.270
nuestro caso en realidad, sabemos que será

09:58.270 --> 10:02.500
dentro de la plantilla aquí, por lo que será un formulario.

10:02.500 --> 10:05.790
Es el primer elemento de la plantilla.

10:05.790 --> 10:07.010
Así que aquí podemos

10:07.010 --> 10:09.470
decir que será un elemento de formulario

10:09.470 --> 10:10.960
HTML, y luego aquí, este elemento

10:10.960 --> 10:15.200
es igual importNode firstElementChild, ahora sólo tenemos que decirle

10:15.200 --> 10:20.106
a typescript de nuevo, que esto será un elemento de formulario HTML.

10:20.106 --> 10:22.199
Ahora este elemento es la propiedad

10:22.199 --> 10:25.510
concreta que apunta al nodo que queremos insertar.

10:25.510 --> 10:28.360
Así que ahí abajo, en insertAdjacentElement,

10:28.360 --> 10:31.110
insertamos este elemento aquí.

10:31.110 --> 10:33.690
Ahora sólo tenemos que asegurarnos de que aquí

10:33.690 --> 10:36.350
en el constructor, al final de la misma que llamamos

10:36.350 --> 10:38.460
adjuntar, por lo que este método privado

10:38.460 --> 10:39.950
adjuntar, por lo que este código

10:39.950 --> 10:42.260
también se ejecuta.

10:42.260 --> 10:44.290
Y ahora con todo el formato,

10:44.290 --> 10:46.620
así es como se ve mi código.

10:46.620 --> 10:48.200
Así que ahora es la clase de entrada

10:48.200 --> 10:51.460
del proyecto, y teóricamente, cuando la instanciamos, debería

10:51.460 --> 10:53.950
renderizar el formulario.

10:53.950 --> 10:56.920
Ahora vamos a intentarlo.

10:56.920 --> 10:59.440
Debajo de la clase, vamos a crear simplemente una nueva constante, prjInput

10:59.440 --> 11:01.120
por ejemplo, el nombre es a su gusto.

11:01.120 --> 11:05.415
Y llama al nuevo proyecto Entrada así.

11:05.415 --> 11:08.930
Y si ahora guardamos eso, debería recompilar

11:08.930 --> 11:11.783
y recargar y si vuelves al navegador,

11:11.783 --> 11:14.160
efectivamente deberías ver ese

11:14.160 --> 11:16.050
formulario aquí.

11:16.050 --> 11:17.990
Así que eso es bastante bueno, porque con

11:17.990 --> 11:20.660
eso, hicimos nuestro primer paso muy importante.

11:20.660 --> 11:22.450
Tenemos nuestra forma

11:22.450 --> 11:26.930
rendida y aunque faltan muchas cosas, eso es

11:26.930 --> 11:29.150
mejor que nada.

11:29.150 --> 11:31.630
Este formulario, viene del archivo html del índice

11:31.630 --> 11:33.010
y se renderiza con la ayuda de

11:33.010 --> 11:36.430
nuestro código typescript orientado a objetos allí arriba.
