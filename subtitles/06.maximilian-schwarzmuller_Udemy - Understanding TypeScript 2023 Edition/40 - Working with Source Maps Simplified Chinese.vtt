WEBVTT

00:02.240 --> 00:06.560
教师：SourceMap帮助我们进行调试和开发｡

00:06.560 --> 00:12.000
为了说明它的作用, 我编译了所有没有sourceMap设置的代码｡

00:12.000 --> 00:14.530
如果我们现在转到浏览器并想了解代码的作用,

00:14.530 --> 00:17.420
我们可以转到开发人员工具中的“源代码”选项卡,

00:17.420 --> 00:21.620
在那里我们可以找到JavaScript文件｡

00:21.620 --> 00:23.060
现在我们可以深入研究这些文件,

00:23.060 --> 00:25.090
好的方面是这些文件对我们来说是可读的,

00:25.090 --> 00:30.940
当然是人类, 因为它们最终包含JavaScript代码｡

00:30.940 --> 00:41.640
这很好, 但是如果我们有更复杂的TypeScript代码, 并且我们希望调试我们的TypeScript代码而不是编译的JavaScript代码呢？

00:41.640 --> 00:43.060
换句话说, 如果我们在这里看到的是TypeScript文件而不是JavaScript文件,

00:43.060 --> 00:47.180
那就太好了｡

00:47.180 --> 00:50.000
使用sourceMap选项, 您可以达到此目的｡ 

00:50.000 --> 00:56.950
如果您将此设置为true并再次运行tsc命令, 您会看到我们得到了这些｡

00:56.950 --> 00:56.950
js, . 映射文件｡

00:58.810 --> 01:01.540
现在, 如果我们看一下它们, 它们是非常奇怪的文件,

01:01.540 --> 01:07.110
但它们的作用基本上是充当一个桥梁, 现代浏览器和开发人员工具可以理解这一点,

01:07.110 --> 01:13.410
将JavaScript文件连接到输入文件｡

01:13.410 --> 01:17.440
因此, 如果我在此处重新加载, 您会在“源代码”选项卡中看到生成的这些文件,

01:17.440 --> 01:23.497
现在我们不仅拥有JavaScript文件, 还可以在其中看到TypeScript文件｡

01:23.497 --> 01:27.230
我们甚至可以在TypeScript文件中放置断点, 例如,

01:27.230 --> 01:31.650
如果我现在单击按钮, 它现在会在TypeScript文件中暂停｡

01:31.650 --> 01:34.720
这当然是超级, 超级方便｡ 

01:34.720 --> 01:37.670
因为这真的将我们的调试过程提升到了一个新的水平,

01:37.670 --> 01:40.260
因为我们可以直接在输入文件中工作, 基本上是在TypeScript文件中,

01:40.260 --> 01:45.670
而不是JavaScript文件中｡

01:45.670 --> 01:48.010
尽管如此, 我还是要把它注释掉, 因为我们这里有一个相当简单的项目,

01:48.010 --> 01:53.580
我不想有这些额外的｡

01:53.580 --> 01:53.580
地图文件就在这附近

01:53.580 --> 01:57.803
但这在项目中非常有用, 因为它简化了调试｡
