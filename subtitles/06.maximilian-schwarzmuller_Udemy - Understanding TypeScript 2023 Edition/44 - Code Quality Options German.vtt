WEBVTT

00:02.220 --> 00:03.053
Kursleiter: Wenn Sie

00:03.053 --> 00:04.883
jetzt weitermachen, haben wir weitere Optionen,

00:04.883 --> 00:07.920
noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Das hilft Ihnen grundsätzlich bei der Codequalität.

00:10.470 --> 00:13.110
TypeScript wird sich beschweren, wenn Sie

00:13.110 --> 00:15.930
bestimmte unbenutzte Variablen usw. haben.

00:15.930 --> 00:20.930
Wenn wir also diese drei Optionen aktivieren, hilft Ihnen diese Option zum Beispiel bei Switch-Anweisungen,

00:21.711 --> 00:24.230
bei denen Sie das break-Schlüsselwort vergessen

00:24.230 --> 00:26.270
könnten.

00:26.270 --> 00:28.880
Aber wenn wir diese drei Optionen einschalten,

00:28.880 --> 00:31.760
wird TypeScript sich beschweren, wenn man zum Beispiel

00:31.760 --> 00:33.600
eine Variable username hier, lokal

00:33.600 --> 00:36.730
in dieser Funktion, hat und sie nicht benutzt.

00:36.730 --> 00:39.490
Sie sehen, dass dies gelbe, verschnörkelte Linien hat,

00:39.490 --> 00:41.500
weil es eigentlich kein Fehler ist.

00:41.500 --> 00:43.179
Es handelt sich eher um eine Warnung oder einen Hinweis.

00:43.179 --> 00:45.643
Wenn ich also hier kompiliere, werden Sie jetzt

00:47.750 --> 00:49.500
sehen, dass ich einen Fehler erhalte,

00:49.500 --> 00:51.900
weil TypeScript nur Fehler kennt.

00:51.900 --> 00:54.140
Und dort sehen wir, dass der Benutzername deklariert

00:54.140 --> 00:57.080
ist, aber sein Wert wird nie gelesen, weil wir sichergestellt

00:57.080 --> 01:00.550
haben, dass wir keine unbenutzten lokalen Variablen wollen.

01:00.550 --> 01:02.483
Unbenutzte globale Variablen,

01:03.440 --> 01:06.340
wie z.B. appId, sind erlaubt, da TypeScript

01:06.340 --> 01:09.130
nicht wissen kann, ob man diesen global

01:09.130 --> 01:12.370
definierten Wert in einer anderen Skriptdatei

01:12.370 --> 01:13.870
benötigt.

01:13.870 --> 01:14.980
Das ist also erlaubt, aber

01:14.980 --> 01:17.280
in einer Funktion, in der es keine andere Stelle gibt,

01:17.280 --> 01:20.010
an der man es brauchen könnte, beschwert sich TypeScript jetzt,

01:20.010 --> 01:22.020
wenn man unbenutzten Code hat.

01:22.020 --> 01:23.540
Und das ist im Allgemeinen eine gute Idee.

01:23.540 --> 01:26.021
Ermöglicht es Ihnen, solchen ungenutzten Code zu entfernen.

01:26.021 --> 01:28.510
Das Gleiche gilt für nicht verwendete Parameter.

01:28.510 --> 01:31.350
Wenn Sie ein H hier, wo man, natürlich, binden ist jetzt

01:31.350 --> 01:33.050
gebrochen, aber auch wenn wir diese

01:33.050 --> 01:35.970
in dieser funktioniert übergeben, aber jetzt, wieder,

01:35.970 --> 01:39.220
TypeScript und daher die ID sagt uns, dass dies unbenutzt ist und

01:39.220 --> 01:41.780
entweder dies, so vielleicht sollten Sie es entfernen

01:41.780 --> 01:44.293
oder starten Sie es verwenden.

01:45.238 --> 01:48.173
Das ist also noUnusedParameters.

01:48.173 --> 01:51.365
Und noImplicitReturns bedeutet, dass wir einen Fehler

01:51.365 --> 01:55.620
erhalten, wenn wir eine Funktion haben, die manchmal etwas zurückgibt

01:55.620 --> 01:57.130
und manchmal nicht.

01:57.130 --> 02:00.913
Nehmen wir an, wir haben eine andere Funktion, add, mit der wir zwei

02:01.912 --> 02:02.940
Zahlen erhalten.

02:02.940 --> 02:05.906
Zahl und n2 ist eine Zahl.

02:05.906 --> 02:10.906
Und natürlich können wir n1 plus n2 zurückgeben.

02:14.030 --> 02:15.710
Aber nehmen wir an, wir prüfen

02:15.710 --> 02:18.518
aus irgendeinem Grund, ob n1 plus n2 größer als Null

02:18.518 --> 02:21.800
ist, denn wir wollen nur zurückgeben, wenn wir ein Ergebnis

02:21.800 --> 02:23.700
größer als Null haben.

02:23.700 --> 02:25.040
Dann wollen wir einen Rückgabewert.

02:25.040 --> 02:26.940
Ansonsten wollen wir nichts zurückgeben.

02:26.940 --> 02:28.170
Wir wollen keine Rückkehr.

02:28.170 --> 02:30.550
Nun, dann erhalten wir eine Warnung wegen dieser zusätzlichen

02:30.550 --> 02:32.598
Einstellung mit noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript erkennt, dass nicht alle Verzweigungen in dieser Funktion zu einem

02:36.401 --> 02:38.760
Return-Statement führen und das ist aufgrund unserer

02:38.760 --> 02:40.650
Einstellung nicht erlaubt.

02:40.650 --> 02:44.150
Zumindest müssen wir hier absichtlich nichts zurückgeben, indem wir das Schlüsselwort

02:44.150 --> 02:45.790
return hinzufügen.

02:45.790 --> 02:48.260
Einfach weglassen ist hier nicht erlaubt.

02:48.260 --> 02:49.730
Wenn Sie eine Funktion haben, die

02:49.730 --> 02:52.446
in keiner Verzweigung etwas zurückgibt, ist das erlaubt,

02:52.446 --> 02:54.520
aber wenn Sie mindestens einen Fall haben, in

02:54.520 --> 02:56.423
dem Ihre Funktion etwas zurückgibt, dann

02:56.423 --> 02:58.770
müssen Sie sicherstellen, dass Sie in allen Fällen

02:58.770 --> 02:59.933
etwas zurückgeben.

03:01.830 --> 03:03.130
Und damit nähern wir uns dem Ende dieser

03:03.130 --> 03:04.240
Anleitung zur Konfiguration.

03:04.240 --> 03:06.526
Wir können die moduleResolution hier ignorieren.

03:06.526 --> 03:08.933
All diese Optionen sind eigentlich ziemlich fortschrittlich,

03:08.933 --> 03:10.830
die für uns hier keine Rolle spielen, die für

03:10.830 --> 03:13.510
Sie in vielen Projekten keine Rolle spielen.

03:13.510 --> 03:16.600
Mit den Source-Map-Optionen können Sie diese Source-Maps, die wir uns bereits

03:16.600 --> 03:18.180
angesehen haben, optimieren.

03:18.180 --> 03:21.440
Also diese Übersetzungsdateien von JavaScript nach TypeScript.

03:21.440 --> 03:23.720
Wenn Sie also nicht wissen, was Sie

03:23.720 --> 03:26.000
ändern und warum Sie es tun, brauchen

03:26.000 --> 03:27.010
Sie hier in der

03:27.010 --> 03:29.470
Regel nichts zu ändern.

03:29.470 --> 03:31.512
Und was diese experimentellen

03:31.512 --> 03:34.380
Optionen angeht, so werde ich sie mir später

03:34.380 --> 03:38.910
im Modul decorators ansehen, speziell experimentalDecorators.

03:38.910 --> 03:41.810
Dies ermöglicht es, bestimmte Funktionen in TypeScript

03:41.810 --> 03:45.060
zu verwenden, die noch experimentell sind, bei denen

03:45.060 --> 03:48.271
nicht sicher ist, ob sie irgendwann in JavaScript landen

03:48.271 --> 03:50.270
werden und mit denen man trotzdem

03:50.270 --> 03:52.940
arbeiten möchte.

03:52.940 --> 03:55.220
Dann müssen Sie TypeScript explizit mitteilen, dass

03:55.220 --> 03:57.070
Sie mit diesen Features arbeiten wollen,

03:57.070 --> 03:59.390
und das können Sie mit dieser Konfiguration tun.

03:59.390 --> 04:01.880
Aber darauf werde ich noch zurückkommen.

04:01.880 --> 04:04.170
Und deshalb gehen wir jetzt durch diese Datei, es gibt viele

04:04.170 --> 04:05.870
Optionen, die man dort einstellen kann.

04:05.870 --> 04:08.222
Und da TypeScript wächst, werden in der Regel auch

04:08.222 --> 04:10.612
mehr und mehr Optionen hinzugefügt. Daher sind

04:10.612 --> 04:13.837
die offiziellen Dokumente immer ein guter Ort, um tiefer einzutauchen

04:13.837 --> 04:16.160
und sicherzustellen, dass Sie keine interessante

04:16.160 --> 04:18.210
Option verpassen, die Ihnen bei Ihrem Projekt

04:18.210 --> 04:20.343
helfen könnte.
