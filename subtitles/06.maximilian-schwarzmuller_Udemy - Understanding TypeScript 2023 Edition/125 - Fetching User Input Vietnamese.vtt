WEBVTT

00:02.150 --> 00:06.180
Người hướng dẫn: Vì vậy, chúng tôi có thể thu thập giá trị đầu vào tiêu đề của mình

00:06.180 --> 00:07.420
và in nó ra bảng điều khiển,

00:07.420 --> 00:10.160
nhưng tất nhiên, đó không phải là ý tưởng cuối cùng.

00:10.160 --> 00:13.940
Thay vào đó, ý tưởng là chúng tôi thu thập tất cả các giá trị đầu vào của

00:13.940 --> 00:15.420
mình, nhanh chóng xác thực

00:15.420 --> 00:17.890
chúng và sau đó làm điều gì đó với chúng.

00:17.890 --> 00:20.598
Để làm được điều đó, tôi sẽ thêm một phương thức

00:20.598 --> 00:21.860
mới khác, một phương

00:21.860 --> 00:25.700
thức riêng tư khác, bởi vì tôi sẽ chỉ gọi nó từ bên trong lớp, và

00:25.700 --> 00:28.530
đó là phương thứccollectUserInput.

00:28.530 --> 00:30.460
Tên là hoàn toàn tùy thuộc vào bạn.

00:30.460 --> 00:33.240
Ý tưởng của tôi là phương pháp này được gọi ở đây.

00:33.240 --> 00:35.230
Sau khi chúng tôi ngăn chặn mặc định,

00:35.230 --> 00:38.980
về cơ bản, điều này sẽ tiếp cận với tất cả đầu vào của chúng tôi ở đây,

00:38.980 --> 00:40.870
thu thập đầu vào của người dùng ở

00:40.870 --> 00:43.060
đó, xác thực và sau đó trả lại.

00:43.060 --> 00:45.950
Vì vậy, ở đây, tôi có userInput của

00:45.950 --> 00:50.090
mình, có thể là một bộ có tiêu đề, mô tả và mọi người,

00:50.090 --> 00:53.810
dưới dạng các giá trị của bộ miễn phí.

00:53.810 --> 00:55.510
Trên thực tế, tôi thích ý tưởng đó.

00:55.510 --> 00:57.800
Vì vậy, hãy xác định một kiểu trả về ở đây.

00:57.800 --> 00:59.880
Kiểu trả về là một tuple.

00:59.880 --> 01:02.620
Bây giờ bạn đã nhớ cách định nghĩa một tuple chưa?

01:02.620 --> 01:05.630
Làm thế nào loại của một Tuple được xác định?

01:05.630 --> 01:08.620
Nó không phải là chuỗi, dấu ngoặc vuông.

01:08.620 --> 01:12.260
Điều đó có nghĩa là bạn đang trả về một chuỗi các chuỗi.

01:12.260 --> 01:14.550
Thay vào đó, tôi muốn nói rằng

01:14.550 --> 01:18.160
tôi trả về một mảng gồm chính xác các phần

01:18.160 --> 01:21.510
tử X của chính xác ba loại này.

01:21.510 --> 01:23.650
Và để làm được điều đó, bạn đặt kiểu trả

01:23.650 --> 01:27.160
về ở đây, hai dấu ngoặc vuông, rồi bên trong dấu ngoặc vuông,

01:27.160 --> 01:30.240
bạn thêm các phần tử và kiểu phần tử khác nhau.

01:30.240 --> 01:32.900
Ví dụ: chuỗi, chuỗi và số.

01:32.900 --> 01:37.130
Cùng với đó, bạn đang nói rằng phương thức này ở đây trả về một bộ có ba

01:37.130 --> 01:38.510
phần tử, trong đó phần

01:38.510 --> 01:40.300
tử đầu tiên là một chuỗi, phần

01:40.300 --> 01:41.820
tử thứ hai là một chuỗi và

01:41.820 --> 01:44.080
phần tử thứ ba thực sự là một số.

01:44.080 --> 01:46.360
Và bây giờ chúng ta có thể thêm một số logic vào phương

01:46.360 --> 01:48.540
thức này để biến điều đó thành sự thật.

01:48.540 --> 01:52.670
Vì vậy, trước hết hãy lấy tiêu đề đã nhập từ titleInputElement

01:52.670 --> 01:57.210
này. giá trị.

01:57.210 --> 01:58.340
Và chúng ta có thể lặp lại điều đó.

01:58.340 --> 02:01.920
Tất nhiên, chúng tôi cũng muốn mô tả đã nhập từ descriptionInputElement

02:01.920 --> 02:05.100
này. giá trị và số lượng

02:05.100 --> 02:09.510
Người đã nhập hoặc chỉ người đã nhập từ PeopleInputElement

02:09.510 --> 02:12.440
này.

02:12.440 --> 02:13.870
Bây giờ tôi đã lưu trữ giá trị

02:13.870 --> 02:15.490
này trong các hằng số để không phải

02:15.490 --> 02:17.640
luôn lặp lại các biểu thức dài hơn này.

02:17.640 --> 02:19.370
Bây giờ, chúng ta có thể xác nhận điều này.

02:19.370 --> 02:21.500
Một xác thực tầm thường sẽ là kiểm tra

02:21.500 --> 02:24.850
xem đã nhậpTitle chưa. cắt, Vì vậy, hãy xóa khoảng

02:24.850 --> 02:27.610
trống rộng của X ở đầu và cuối.

02:27.610 --> 02:30.560
Độ dài bằng 0 hoặc nếu

02:30.560 --> 02:35.350
đã nhậpMô tả. chiều dài cắt bằng 0 hoặc

02:35.350 --> 02:41.520
nếu được nhậpNgười.

02:41.520 --> 02:41.520
chiều

02:41.520 --> 02:44.380
dài cắt bằng không.

02:44.380 --> 02:48.410
Điều đó sẽ kiểm tra xem không có đầu vào nào trống.

02:48.410 --> 02:50.330
Bây giờ, nó không kiểm tra mọi thứ mà chúng

02:50.330 --> 02:51.860
tôi có thể muốn kiểm tra.

02:51.860 --> 02:54.770
Giả sử, chúng tôi không kiểm tra xem những người đã

02:54.770 --> 02:57.160
nhập có phải là một số dương hay không.

02:57.160 --> 03:00.170
Chúng tôi không thể đặt độ dài tối thiểu.

03:00.170 --> 03:02.190
Chúng tôi sẽ phải thêm ngày càng nhiều điều kiện

03:02.190 --> 03:04.050
ở đây và trong khi chúng tôi có thể làm điều

03:04.050 --> 03:06.820
này, đây thực sự không phải là một giải pháp có thể mở rộng.

03:06.820 --> 03:09.110
Nếu chúng tôi có các phần của mình trong ứng dụng

03:09.110 --> 03:11.550
mà chúng tôi cũng muốn xác thực đầu vào của người

03:11.550 --> 03:14.440
dùng, chúng tôi luôn phải lặp lại các câu lệnh if dài.

03:14.440 --> 03:18.390
Vì vậy, tôi sẽ sớm đưa ra một giải pháp xác thực thông minh hơn

03:18.390 --> 03:21.960
hoặc một giải pháp xác thực có khả năng mở rộng hơn.

03:21.960 --> 03:23.780
Hiện tại, chúng ta có thể để nó như thế này.

03:23.780 --> 03:26.190
Mặc dù vậy, bạn đã có thể nghĩ về điều này

03:26.190 --> 03:28.520
và tất nhiên sau bài giảng này tại đây,

03:28.520 --> 03:32.220
hãy tạm dừng và nghĩ cách bạn có thể thuê ngoài điều này thành

03:32.220 --> 03:34.670
một chức năng xác thực riêng biệt có thể

03:34.670 --> 03:38.350
định cấu hình và cách các loại có thể giúp bạn ở đó.

03:38.350 --> 03:41.370
Chắc chắn có nhiều cách tiếp cận khả thi, và tôi sẽ chia sẻ cách

03:41.370 --> 03:44.040
tiếp cận của tôi với bạn trong bài giảng tiếp theo.

03:44.040 --> 03:45.620
Nhưng trước khi chúng ta đến

03:45.620 --> 03:48.350
đó, hãy thực sự sử dụng cách tiếp cận đơn giản này

03:48.350 --> 03:52.130
ở đây và làm điều gì đó nếu tất cả các điều kiện này được thỏa mãn.

03:52.130 --> 03:53.620
Bây giờ nếu chúng tôi đưa nó vào khối

03:53.620 --> 03:56.000
if này, chúng tôi biết rằng ít nhất một lần xác thực

03:56.000 --> 03:57.350
không thành công và sau đó chúng

03:57.350 --> 04:01.833
tôi có thể chuyển qua cảnh báo, nơi chúng tôi nói Đầu vào không hợp lệ, vui lòng thử lại.

04:03.450 --> 04:04.910
Mặt khác, nếu chúng tôi không

04:04.910 --> 04:06.200
đưa nó vào đó, chúng tôi

04:06.200 --> 04:08.600
biết rằng chúng tôi có đầu vào hợp lệ, nếu không,

04:08.600 --> 04:11.310
tôi muốn trả lại bộ dữ liệu của mình.

04:11.310 --> 04:14.170
Vì vậy, ở đây, tôi muốn trả lại

04:14.170 --> 04:17.090
tiêu đề đã nhập, mô tả đã nhập và

04:17.090 --> 04:19.660
cả những người đã nhập.

04:19.660 --> 04:20.630
Bây giờ, như bạn có thể

04:20.630 --> 04:21.850
biết, nhóm loại không hài

04:21.850 --> 04:24.210
lòng, bởi vì những người đã nhập phải là một số, không

04:24.210 --> 04:25.370
phải văn bản.

04:25.370 --> 04:27.410
Và trên thực tế, mọi thứ bạn trích

04:27.410 --> 04:28.720
xuất từ thuộc tính giá

04:28.720 --> 04:32.350
trị của phần tử đầu vào sẽ là văn bản theo mặc định.

04:32.350 --> 04:34.520
Vì vậy, để biến số này thành một số,

04:34.520 --> 04:38.060
chẳng hạn, chúng ta có thể gọi parseFloat hoặc chỉ cần

04:38.060 --> 04:40.610
thêm một dấu cộng vào trước nó và điều này

04:40.610 --> 04:42.850
sẽ chuyển đổi nó thành một số và vẫn

04:42.850 --> 04:45.430
gõ nhóm không hài lòng bởi vì, chúng tôi

04:45.430 --> 04:48.910
không phải lúc nào cũng quay lại một tuple.

04:48.910 --> 04:50.830
Còn phần này ở đây thì sao?

04:50.830 --> 04:52.310
Nếu chúng tôi đưa nó vào khối if, chúng

04:52.310 --> 04:53.510
tôi sẽ hiển thị một cảnh báo,

04:53.510 --> 04:55.820
nhưng chúng tôi sẽ không trả về một bộ dữ liệu.

04:55.820 --> 04:59.810
Chà, có nhiều thứ chúng ta có thể làm thay thế.

04:59.810 --> 05:03.460
Chúng tôi chỉ có thể không trả lại gì, như thế này.

05:03.460 --> 05:06.320
Ngoài ra, chúng tôi có thể đưa ra một lỗi.

05:06.320 --> 05:08.360
Sau đó, chúng tôi thực sự sẽ không trả lại bất

05:08.360 --> 05:11.100
cứ thứ gì, nhưng chúng tôi sẽ báo lỗi trong trường hợp đó.

05:11.100 --> 05:12.820
Bây giờ, tôi không muốn đưa ra một lỗi

05:12.820 --> 05:15.570
ở đây bởi vì tôi không thực sự muốn triển khai xử lý lỗi, vì vậy

05:15.570 --> 05:18.090
điều tôi sẽ làm là tôi sẽ chỉ thêm một câu lệnh trả về, nhưng

05:18.090 --> 05:20.100
tất nhiên đây không phải là một bộ.

05:20.100 --> 05:23.110
Vì vậy, trên thực tế, kiểu trả về ở đây là một

05:23.110 --> 05:25.923
bộ hoặc nó thực sự không xác định.

05:27.320 --> 05:29.040
Tuy nhiên, bây giờ, như bạn đã biết,

05:29.040 --> 05:30.750
bạn không nên sử dụng undefined ở

05:30.750 --> 05:32.550
đây làm kiểu trả về cho các hàm.

05:32.550 --> 05:34.040
Thay vào đó hãy sử dụng khoảng trống.

05:34.040 --> 05:35.410
Nó gần như giống nhau,

05:35.410 --> 05:37.040
nhưng dành riêng cho các

05:37.040 --> 05:39.350
hàm và điều này cho TypeScript biết

05:39.350 --> 05:44.350
rằng đây là một hàm có ít nhất một nhánh không trả về bất kỳ giá trị nào như

05:45.230 --> 05:46.930
giá trị này.

05:46.930 --> 05:49.160
Ở đây, tất nhiên, chúng tôi cũng sử dụng loại

05:49.160 --> 05:51.240
kết hợp vì chúng tôi có cả hai khả năng.

05:51.240 --> 05:53.170
Chúng tôi có thể không trả lại gì, hoặc

05:53.170 --> 05:55.660
chúng tôi thực sự trả lại một bộ dữ liệu.

05:55.660 --> 05:57.510
Vì vậy, bây giờ, chúng tôi đã thu

05:57.510 --> 05:59.370
thậpUserInput và userInput ở

05:59.370 --> 06:01.670
đó cho tất cả hoặc là không được xác định

06:01.670 --> 06:04.130
cuối cùng hoặc đó là bộ dữ liệu đó.

06:04.130 --> 06:07.640
Vì vậy, bây giờ, trước khi chúng ta tiếp tục và cải thiện việc xác thực,

06:07.640 --> 06:09.620
hãy xây dựng trên userInput đó.

06:09.620 --> 06:12.480
Khi chúng tôi thu thập userInput ở dưới đó, bây giờ chúng tôi

06:12.480 --> 06:14.820
có thứ userInput đó và bây giờ chúng tôi có thể kiểm

06:14.820 --> 06:17.050
tra xem đó có phải là một bộ hay không.

06:17.050 --> 06:19.820
Bây giờ vấn đề là trong thời gian chạy, chúng tôi không

06:19.820 --> 06:22.620
có cách nào kiểm tra xem đó có phải là một bộ hay không.

06:22.620 --> 06:25.200
Không có ví dụ nào chúng tôi có thể sử dụng.

06:25.200 --> 06:28.560
Không có loại Tuple nào chúng tôi có thể kiểm tra.

06:28.560 --> 06:31.020
Chúng tôi cũng không thể kiểm tra xem typof

06:33.803 --> 06:36.053
userInput có bằng tuple hay không vì điều

06:37.130 --> 06:40.050
đó không tồn tại trong Vanilla JavaScript.

06:40.050 --> 06:41.850
Chẳng hạn, chuỗi tồn tại,

06:41.850 --> 06:44.950
nhưng tuple không phải là loại JavaScript.

06:44.950 --> 06:47.020
Vì vậy, để kiểm tra xem đó có phải là một

06:47.020 --> 06:48.900
bộ hay không, chúng ta phải nhớ rằng

06:48.900 --> 06:50.990
các bộ cuối cùng chỉ bị xóa.

06:50.990 --> 06:52.750
Chúng đặc biệt trong TypeScript,

06:52.750 --> 06:54.860
nhưng một khi chúng ta ở vùng đất

06:54.860 --> 06:55.940
JavaScript, chúng

06:55.940 --> 06:58.320
sẽ bị xóa vì ý tưởng về một bộ trong đó số

06:58.320 --> 06:59.950
lượng phần tử và loại phần

06:59.950 --> 07:02.000
tử được cố định thực sự chỉ tồn tại

07:02.000 --> 07:04.470
trong TypeScript.

07:04.470 --> 07:05.930
Vì vậy, trong thời gian chạy,

07:05.930 --> 07:09.370
tất cả những gì chúng ta cần kiểm tra ở đây là liệu đó có phải là một mảng

07:09.370 --> 07:12.950
hay không và để làm được điều đó, chúng ta có thể sử dụng đối tượng mảng trong

07:12.950 --> 07:15.180
JavaScript và có phương thức isArray.

07:15.180 --> 07:17.500
Đó là một phương thức được tích hợp trong Vanilla JavaScript

07:17.500 --> 07:20.290
cho phép chúng tôi kiểm tra xem đây có phải là một mảng hay không.

07:20.290 --> 07:23.200
Chúng tôi biết nó không xác định hoặc một tuple.

07:23.200 --> 07:24.630
Một tuple là một mảng, vì vậy

07:24.630 --> 07:26.000
nếu điều này trả về true,

07:26.000 --> 07:27.400
thì chúng ta có tuple.

07:27.400 --> 07:31.010
Và sau đó, ở đây, chúng ta có thể sử dụng cấu trúc chẳng hạn để

07:31.010 --> 07:34.070
lấy tiêu đề, mô tả và mọi người từ dữ liệu nhập của người

07:34.070 --> 07:35.560
dùng, sau đó thực hiện điều

07:35.560 --> 07:37.720
gì đó với dữ liệu nhập đó.

07:37.720 --> 07:39.230
Ví dụ bây giờ,

07:39.230 --> 07:42.623
console. tiêu đề nhật ký, mô tả và mọi người.

07:43.980 --> 07:46.060
Nếu chúng tôi làm tất cả những điều đó và chúng

07:46.060 --> 07:47.950
tôi lưu tất cả, nó sẽ biên dịch không có lỗi

07:47.950 --> 07:49.870
và nếu chúng tôi quay lại đây và tôi nhấp vào

07:49.870 --> 07:51.310
dự án như thế này, tôi sẽ nhận được

07:51.310 --> 07:53.050
thông tin nhập không hợp lệ.

07:53.050 --> 07:54.580
Nếu tôi nhập Xin chào, vẫn

07:54.580 --> 07:56.950
nhận được vì chúng tôi không có mô tả.

07:56.950 --> 07:58.890
Đây là một mô tả.

07:58.890 --> 08:00.180
Tất nhiên, chúng tôi vẫn nhận

08:00.180 --> 08:02.940
được nó, nhưng nếu bây giờ tôi cũng nhập một cái gì đó vào mọi người,

08:02.940 --> 08:05.220
điều này sẽ hiệu quả và chúng tôi sẽ in nó ở đây.

08:05.220 --> 08:09.330
Bây giờ tất nhiên đó là một bước tốt đẹp theo đúng hướng.

08:09.330 --> 08:10.990
Chúng tôi chưa hoàn toàn ở đó.

08:10.990 --> 08:13.330
Như tôi đã nói, chúng ta có thể cải thiện việc xác thực.

08:13.330 --> 08:16.230
Chỉ có một điều tôi muốn làm ngay trước khi chúng tôi làm điều

08:16.230 --> 08:20.070
đó, tôi muốn xóa tất cả thông tin đầu vào sau khi chúng tôi nhấp vào THÊM DỰ ÁN.

08:20.070 --> 08:22.440
Vì vậy, tôi muốn làm trống tất cả các đầu vào một lần nữa.

08:22.440 --> 08:25.290
Bây giờ, chúng ta có thể thêm một phương thức riêng tư mới, clearInput

08:25.290 --> 08:27.043
hoặc clearInputs, và ở đó, chúng ta có

08:28.210 --> 08:32.740
thể đặt titleInputElement này. giá trị bằng một chuỗi rỗng

08:32.740 --> 08:34.130
và lặp lại điều

08:36.200 --> 08:38.980
đó cho các đầu vào khác.

08:38.980 --> 08:41.960
Vì vậy, ở đây, chúng ta có descriptionInputElement,

08:41.960 --> 08:44.250
và ở đây, chúng ta có peopleInputElement,

08:44.250 --> 08:48.190
và bây giờ, nếu chúng ta gọi nó. clearInputs ở đây, chúng ta phải

08:48.190 --> 08:50.200
đảm bảo rằng biểu mẫu được xóa sau

08:50.200 --> 08:51.730
khi biểu mẫu được gửi.

08:51.730 --> 08:52.870
Vì vậy, nếu chúng tôi thử

08:52.870 --> 08:54.380
lại điều này, hãy nhập nội dung

08:54.380 --> 08:56.230
nào đó vào đây, bạn sẽ thấy nó được in ở

08:56.230 --> 08:57.740
đây và biểu mẫu sẽ bị xóa.

08:57.740 --> 09:00.720
Với điều đó, nhìn chung tôi hài lòng với cách chúng tôi xử lý vấn

09:00.720 --> 09:03.300
đề này, nhưng bây giờ tôi muốn cải thiện tính xác thực

09:03.300 --> 09:06.970
và viết nội dung này theo cách có thể mở rộng, có thể sử dụng lại nhiều hơn.

09:06.970 --> 09:07.840
Như tôi đã đề cập,

09:07.840 --> 09:10.320
chắc chắn bạn có thể tự làm việc này trước.

09:10.320 --> 09:11.530
Trong bài giảng tiếp theo, chúng

09:11.530 --> 09:12.580
ta sẽ cùng nhau thực hiện.
