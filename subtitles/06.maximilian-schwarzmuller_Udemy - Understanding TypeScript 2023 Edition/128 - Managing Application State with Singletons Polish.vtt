WEBVTT

00:02.310 --> 00:04.580
Instruktor: Czyli doprowadzenie projektów z punktu A do

00:04.580 --> 00:06.000
punktu B jest teraz naszym celem.

00:06.000 --> 00:09.750
Aby być precyzyjnym, kiedy użytkownicy tworzą nowy projekt, gdy

00:09.750 --> 00:11.850
wprowadzają wszystkie dane, chcemy

00:11.850 --> 00:15.790
utworzyć nowy obiekt projektu w końcu, który następnie wyprowadzamy

00:15.790 --> 00:18.830
w naszej klasie listy projektów jako część nieuporządkowanej

00:18.830 --> 00:21.990
listy, która jest tam renderowana.

00:21.990 --> 00:23.299
Taki jest zamysł.

00:23.299 --> 00:26.350
Oczywiście trywialnym sposobem wdrożenia tego może być

00:26.350 --> 00:28.890
po prostu przejście do miejsca, w którym wprowadzane

00:28.890 --> 00:30.830
są dane użytkownika, a następnie tutaj

00:30.830 --> 00:34.513
użycie dokumentu. getElementbyId, aby sięgnąć

00:36.100 --> 00:39.410
po tę nieuporządkowaną listę, którą wyrenderowaliśmy

00:39.410 --> 00:42.270
jako część naszej klasy listy projektów, która

00:42.270 --> 00:44.470
ma tutaj to ID, więc active-projects

00:44.470 --> 00:49.110
list lub finished-projects list, a następnie po prostu sięgnąć do niej

00:49.110 --> 00:52.760
i dodać do niej nowy element.

00:52.760 --> 00:54.770
Ale to nie jest tak naprawdę pomysł

00:54.770 --> 00:57.250
na to, jak chcę zbudować tę aplikację.

00:57.250 --> 00:59.800
Chcę zbudować go w sposób zorientowany

00:59.800 --> 01:02.530
obiektowo, gdzie mamy nasze różne klasy,

01:02.530 --> 01:06.500
które współpracują ze sobą w sposób reaktywny, gdzie tworzymy

01:06.500 --> 01:08.200
nową klasę, a następnie coś

01:08.200 --> 01:10.550
dzieje się w dom.

01:10.550 --> 01:12.730
Gdzie wywołujemy metodę jakiejś klasy,

01:12.730 --> 01:14.650
a następnie ta klasa coś robi.

01:14.650 --> 01:16.980
Tak chcę, żeby te rzeczy działały.

01:16.980 --> 01:19.560
Teraz oczywiście moglibyśmy dodać metodę

01:19.560 --> 01:21.550
do klasy listy projektów, powiedzmy,

01:21.550 --> 01:24.120
że dodaję metodę projektu.

01:24.120 --> 01:25.890
Ta metoda powinna następnie zostać wywołana,

01:25.890 --> 01:28.200
gdy projekt powinien zostać dodany i wyrenderowany,

01:28.200 --> 01:30.700
a my musielibyśmy znaleźć jakiś sposób na wywołanie

01:30.700 --> 01:32.940
go z wnętrza wejścia projektu.

01:32.940 --> 01:34.820
Aby to zrobić, moglibyśmy upewnić się,

01:34.820 --> 01:37.940
że faktycznie przekazujemy referencje do naszej listy tutaj,

01:37.940 --> 01:40.330
do konstruktora wejścia projektu, tak abyśmy

01:40.330 --> 01:42.810
z wnętrza klasy wejścia projektu mogli pracować

01:42.810 --> 01:45.290
z tymi konkretnymi instancjami i wywoływać metody

01:45.290 --> 01:47.570
na tych instancjach.

01:47.570 --> 01:50.260
Bo to jest to, co musielibyśmy zrobić.

01:50.260 --> 01:52.050
Byłby to wykonalny sposób, zdecydowanie

01:52.050 --> 01:54.400
podejście, które mógłbyś podjąć, ale chcę

01:54.400 --> 01:58.680
przyjąć jeszcze bardziej abstrakcyjne podejście.

01:58.680 --> 02:01.393
Jeszcze ciekawsze podejście moim zdaniem.

02:02.330 --> 02:06.210
Zbuduję klasę, która zarządza stanem naszej aplikacji, że tak

02:06.210 --> 02:08.110
powiem, klasę, która zarządza

02:08.110 --> 02:11.187
naszymi projektami, lub jakimkolwiek stanem, który

02:11.187 --> 02:13.840
możemy potrzebować do zarządzania w aplikacji,

02:13.840 --> 02:15.530
która również pozwala nam następnie

02:15.530 --> 02:18.660
ustawić słuchaczy w różnych częściach aplikacji,

02:18.660 --> 02:21.670
które są zainteresowane.

02:21.670 --> 02:24.540
Jest to wzór, który może brzmieć znajomo, jeśli pracowałeś

02:24.540 --> 02:27.050
z frameworkami takimi jak Angular lub bibliotekami

02:27.050 --> 02:29.820
takimi jak React i Redux.

02:29.820 --> 02:33.423
Że masz globalny obiekt zarządzania stanem i po

02:33.423 --> 02:35.443
prostu słuchasz zmian.

02:35.443 --> 02:37.480
To jest to, co chcę wdrożyć tutaj.

02:37.480 --> 02:39.620
Oczywiście to tylko jeden ze sposobów,

02:39.620 --> 02:41.660
ale uważam, że jest to dość ciekawy sposób,

02:41.660 --> 02:43.680
dlatego chcę go pokazać.

02:43.680 --> 02:45.908
Tak więc na górze pliku app

02:45.908 --> 02:50.350
ts dodam klasę zarządzającą stanem projektu.

02:50.350 --> 02:53.347
I po prostu nazwę to projectState; brzmi

02:54.820 --> 02:57.210
jak rozsądna nazwa dla mnie.

02:57.210 --> 02:59.900
Teraz pomysł jest taki, że w tej

02:59.900 --> 03:03.760
klasie mamy właściwość lub pole, prywatne pole,

03:03.760 --> 03:06.570
projekty, które przechowuje tablicę

03:06.570 --> 03:08.800
projektów.

03:08.800 --> 03:12.000
Teraz musimy też określić jak powinien wyglądać projekt, zrobimy

03:12.000 --> 03:13.360
to w następnym kroku, na razie

03:13.360 --> 03:15.830
powiem tylko, że jest to tablica czegokolwiek, co

03:15.830 --> 03:18.710
oczywiście nie jest idealne, nie jest ostateczne, ale chcę

03:18.710 --> 03:22.240
się na razie skupić na tym rozwiązaniu zarządzania stanem.

03:22.240 --> 03:25.653
Mamy więc tutaj tę listę projektów.

03:26.530 --> 03:30.163
Teraz moim celem jest to, że chcę dodać element do tej listy za

03:30.163 --> 03:35.163
każdym razem, kiedy my, no cóż, klikniemy ten przycisk dodawania projektu tutaj.

03:36.940 --> 03:39.970
Aby to zadziałało, wewnątrz klasy stanu projektu

03:39.970 --> 03:43.460
dodam metodę add project, publiczną.

03:43.460 --> 03:45.560
I tam oczekuję, że otrzymam tytuł,

03:45.560 --> 03:47.060
który powinien być ciągiem

03:47.060 --> 03:49.390
znaków, opis, który powinien być ciągiem

03:49.390 --> 03:53.250
znaków, a także liczbę osób pracujących nad projektem, która

03:53.250 --> 03:55.220
powinna być liczbą.

03:55.220 --> 03:58.450
Następnie w tym miejscu możemy stworzyć nowy projekt

03:58.450 --> 04:00.950
z notacją literalną obiektu na razie.

04:00.950 --> 04:03.950
Gdzie powinniśmy mieć jakieś ID dla każdego projektu, abyśmy mogli

04:03.950 --> 04:06.050
go jednoznacznie zidentyfikować, a ja tutaj

04:06.050 --> 04:12.100
wygeneruję ID za pomocą matematyki.

04:12.100 --> 04:12.100
random(). toString.

04:12.100 --> 04:14.960
Teraz liczba losowa nie jest tak naprawdę unikalnym identyfikatorem,

04:14.960 --> 04:17.880
możesz wygenerować ten sam numer więcej niż raz, ale jest to

04:17.880 --> 04:19.300
bardzo mało prawdopodobne, a

04:19.300 --> 04:22.570
dla naszych celów demonstracyjnych tutaj to zrobi.

04:22.570 --> 04:25.170
Teraz oprócz tego, że każdy projekt powinien mieć tytuł

04:25.170 --> 04:28.370
i będzie przechowywał ten argument tytułowy, który dostajemy.

04:28.370 --> 04:30.913
Tak samo w przypadku opisu, gdzie będę

04:31.960 --> 04:33.830
przechowywał opis.

04:33.830 --> 04:37.693
I moich ludzi, gdzie będę przechowywał liczbę ludzi.

04:39.700 --> 04:43.440
To, na razie, jest projekt, który chcę przechowywać.

04:43.440 --> 04:45.000
Więc jak już ją tutaj stworzyliśmy,

04:45.000 --> 04:48.020
to możemy sięgnąć do tablicy projects w stanie projects, która

04:48.020 --> 04:48.853
jest prywatna, ale

04:48.853 --> 04:50.320
z wnętrza klasy, którą jest ta

04:50.320 --> 04:51.530
metoda, możemy się do niej

04:51.530 --> 04:53.340
oczywiście dostać.

04:53.340 --> 04:55.900
I tam chcę dodać ten nowy projekt i w tym

04:55.900 --> 05:00.380
celu możemy po prostu wcisnąć do niego nasz nowy projekt.

05:00.380 --> 05:03.350
Teraz dzięki temu jesteśmy w stanie dodać projekt.

05:03.350 --> 05:07.027
Ale nadal, oczywiście, mamy kilka niejasnych pytań.

05:07.027 --> 05:12.027
Jak wywołać add project z wnętrza naszej klasy w dół, gdzie zbieramy dane wejściowe

05:12.750 --> 05:14.650
użytkownika z wnętrza submit

05:14.650 --> 05:15.990
handler?

05:15.990 --> 05:17.940
Jak nazwać dodanie projektu?

05:17.940 --> 05:21.730
I jak przekazać tę zaktualizowaną listę projektów,

05:21.730 --> 05:25.690
gdy tylko się zmieni, do klasy listy projektów?

05:25.690 --> 05:29.230
To są dwie kwestie, z którymi oczywiście mamy do czynienia w tej chwili.

05:29.230 --> 05:31.840
Cóż, jedną rzeczą, którą zrobię

05:31.840 --> 05:36.499
tutaj, jest stworzenie instancji stanu projektu tutaj.

05:36.499 --> 05:39.720
Globalna instancja, którą moglibyśmy wykorzystać z całego

05:39.720 --> 05:42.760
pliku, a zrobię to zaraz po utworzeniu tej klasy.

05:42.760 --> 05:47.050
Więc tutaj mam moją stałą stanu projektu, gdzie instaluję

05:47.050 --> 05:50.370
stan projektu w ten sposób.

05:50.370 --> 05:52.400
W ten sposób jest to stała globalna,

05:52.400 --> 05:54.620
która może być użyta w dowolnym miejscu

05:54.620 --> 05:58.000
w pliku, więc rozmowa z tą klasą jest teraz super prosta,

05:58.000 --> 06:01.660
musisz tylko użyć tej stałej globalnej tutaj.

06:01.660 --> 06:04.850
Możemy nawet użyć funkcji, o której wszyscy się uczyliśmy,

06:04.850 --> 06:06.430
prywatnego konstruktora, aby

06:06.430 --> 06:09.170
zagwarantować, że jest to klasa singleton.

06:09.170 --> 06:11.950
Możemy stworzyć prywatny konstruktor tutaj, a następnie

06:11.950 --> 06:14.300
mamy kolejną prywatną właściwość tutaj, instancja,

06:14.300 --> 06:16.670
która jest typu stan projektu, więc ten sam typ,

06:16.670 --> 06:18.933
którego jest ta klasa.

06:20.640 --> 06:24.360
I następnie dodajemy metodę get instance tutaj, statyczną

06:24.360 --> 06:26.390
metodę właściwie, gdzie sprawdzamy,

06:26.390 --> 06:30.050
czy to . instancja jest rzeczą, i dla tego,

06:30.050 --> 06:31.020
to faktycznie również

06:31.020 --> 06:33.970
musi być statyczna instancja, statyczna właściwość,

06:33.970 --> 06:35.800
mam na myśli.

06:35.800 --> 06:37.100
Jeśli to jest rzecz, jeśli

06:37.100 --> 06:39.550
to jest, zwracamy to . więc zwracamy pojedynczą

06:39.550 --> 06:42.230
instancję, którą otrzymaliśmy, w przeciwnym

06:42.230 --> 06:44.590
razie tworzymy nową.

06:44.590 --> 06:45.423
Więc

06:45.423 --> 06:50.423
inaczej, to . będzie równa nowemu stanowi projektu.

06:50.450 --> 06:52.963
A potem zwracamy to . instancja.

06:54.740 --> 06:57.913
Teraz, dzięki temu, możemy wywołać instancję tam na dole, jak to,

06:59.370 --> 07:00.903
ProjectState. getInstance,

07:02.650 --> 07:04.390
a mamy gwarancję, że zawsze będziemy

07:04.390 --> 07:06.560
pracować z dokładnie tym samym obiektem

07:06.560 --> 07:10.020
i zawsze będziemy mieć tylko jeden obiekt danego typu w całej

07:10.020 --> 07:11.700
aplikacji.

07:11.700 --> 07:12.840
Co jest pomysłem tutaj,

07:12.840 --> 07:16.480
ponieważ chcę mieć tylko jeden obiekt zarządzania stanem dla naszego

07:16.480 --> 07:17.503
projektu.

07:17.503 --> 07:19.570
Więc to jest ten stan projektu z tym konstruktorem

07:19.570 --> 07:21.563
singleton teraz.

07:22.730 --> 07:25.890
Więc teraz mamy naszą stałą stanu projektu.

07:25.890 --> 07:28.040
Zejdźmy do klasy wejściowej projektu dlatego,

07:28.040 --> 07:30.270
gdzie zbieramy dane wejściowe użytkownika.

07:30.270 --> 07:33.950
W tym miejscu możemy teraz wywołać projectState. addProject i przekazać tytuł,

07:33.950 --> 07:37.830
opis i ludzi, otrzymujemy z powrotem od zebrania danych

07:37.830 --> 07:40.960
wejściowych użytkownika w końcu.

07:40.960 --> 07:43.920
Więc teraz ten projekt powinien zostać utworzony.

07:43.920 --> 07:47.140
Teraz musimy tylko przepchnąć informację o

07:47.140 --> 07:51.530
tym, że mamy nowy projekt do naszej klasy project list, bo to właśnie

07:51.530 --> 07:53.840
ta klasa jest odpowiedzialna za

07:53.840 --> 07:56.500
wypisanie czegoś na ekran.

07:56.500 --> 08:00.350
I dla tego chcę ustawić w końcu wzór subskrypcji.

08:00.350 --> 08:03.020
Gdzie wewnątrz naszego stanu projektu

08:03.020 --> 08:05.730
zarządzamy listą listenerów, czyli w

08:05.730 --> 08:08.690
końcu listą funkcji, które powinny być wywoływane

08:08.690 --> 08:11.600
gdy tylko coś się zmieni.

08:11.600 --> 08:12.433
Więc za to dodam

08:12.433 --> 08:15.830
tu jeszcze jedną prywatną własność, słuchaczy.

08:15.830 --> 08:18.810
A listeners będzie pustą tablicą i na razie

08:18.810 --> 08:22.130
znowu tylko tablicą czegokolwiek, co określimy

08:22.130 --> 08:25.543
bardziej szczegółowo później.

08:26.760 --> 08:31.382
Teraz chcę też mieć metodę tutaj addListener,

08:31.382 --> 08:35.590
gdzie dostaję funkcję słuchacza, więc to powinna

08:35.590 --> 08:39.150
być funkcja na końcu tutaj.

08:39.150 --> 08:41.370
A potem dodam to do moich słuchaczy.

08:41.370 --> 08:43.970
Więc wypychamy funkcję słuchacza tutaj

08:43.970 --> 08:46.500
do, cóż, tablicy słuchaczy.

08:46.500 --> 08:49.580
A teraz co to za pomysł, żeby mieć taką tablicę słuchaczy?

08:49.580 --> 08:51.110
To tablica funkcji, odwołań

08:51.110 --> 08:53.070
do funkcji, prawda?

08:53.070 --> 08:55.250
Chodzi o to, że zawsze, gdy coś się zmienia,

08:55.250 --> 08:57.310
tak jak tutaj, gdy dodajemy nowy projekt,

08:57.310 --> 08:59.790
wywołujemy wszystkie funkcje listenera.

08:59.790 --> 09:03.050
Więc zapętlamy się przez wszystkich słuchaczy, tego

09:03.050 --> 09:04.720
słuchacza, więc przez wszystkie

09:04.720 --> 09:07.330
funkcje słuchaczy, a następnie, ponieważ

09:07.330 --> 09:09.520
są to referencje do funkcji, możemy

09:09.520 --> 09:11.593
wykonać to jako funkcję.

09:13.010 --> 09:14.630
I do tej funkcji przekazujemy

09:14.630 --> 09:18.620
to, co jest dla niej istotne, na podstawie stanu, którym zarządzamy,

09:18.620 --> 09:20.130
czyli w tym przypadku, w tej

09:20.130 --> 09:22.020
klasie oczywiście, jest to nasza

09:22.020 --> 09:23.280
lista projektów.

09:23.280 --> 09:27.983
To jest stan, za który ta klasa jest odpowiedzialna.

09:29.100 --> 09:29.933
Więc tutaj przekazuję

09:30.980 --> 09:33.050
ten projekt i wywołam na nim plasterek,

09:33.050 --> 09:35.170
aby zwrócić tylko kopię tej tablicy,

09:35.170 --> 09:39.100
a nie oryginalną tablicę.

09:39.100 --> 09:41.880
Tak, aby nie można było go edytować z miejsca, z

09:41.880 --> 09:44.210
którego pochodzi funkcja słuchacza.

09:44.210 --> 09:45.760
Ponieważ tablice i obiekty są

09:45.760 --> 09:48.110
wartościami referencyjnymi w Javascript,

09:48.110 --> 09:50.490
więc jeśli przekazałbyś oryginalną tablicę,

09:50.490 --> 09:52.600
moglibyśmy ją edytować z zewnątrz, a także

09:52.600 --> 09:54.380
z tej samej strony, jeśli popchniemy

09:54.380 --> 09:57.020
coś do niej z wnętrza tej klasy, to już zmieniłoby

09:57.020 --> 09:59.830
się to w każdym miejscu w aplikacji, ale te miejsca tak

09:59.830 --> 10:03.540
naprawdę nie zauważyłyby, że się zmieniło, więc mogłoby to wprowadzić

10:03.540 --> 10:05.630
dziwne błędy, jeśli przekazalibyśmy

10:05.630 --> 10:08.270
wokół oryginalnej referencji, dlatego przekazuję

10:08.270 --> 10:12.770
tutaj zupełnie nową kopię, zupełnie nową tablicę.

10:12.770 --> 10:15.390
Więc teraz każda funkcja listenera jest wykonywana

10:15.390 --> 10:19.400
i dostaje naszą kopię, naszą nową kopię projektów.

10:19.400 --> 10:21.380
Teraz wystarczy udać się do miejsc,

10:21.380 --> 10:23.800
w których chcemy być informowani o zmianach,

10:23.800 --> 10:26.560
w naszym przypadku do klasy listy projektów tutaj,

10:26.560 --> 10:29.030
i ustawić takiego listenera.

10:29.030 --> 10:32.880
Więc tutaj, w konstruktorze klasy listy projektów, zanim

10:32.880 --> 10:35.546
dołączymy i wyrenderujemy zawartość,

10:35.546 --> 10:38.010
dotrę do projectState i wywołam addListener

10:38.010 --> 10:40.110
tutaj, aby zasadniczo zarejestrować

10:40.110 --> 10:43.720
funkcję słuchacza tutaj.

10:43.720 --> 10:46.150
Teraz listener, jak powiedziałem, jest funkcją,

10:46.150 --> 10:49.100
więc musimy przekazać funkcję do addListener.

10:49.100 --> 10:51.210
Ponieważ listenery, którymi zarządzamy

10:51.210 --> 10:52.610
tutaj w stanie projektu,

10:52.610 --> 10:54.680
to jest po prostu lista funkcji, które

10:54.680 --> 10:56.300
ostatecznie wywołamy, gdy coś

10:56.300 --> 10:57.773
się zmieni prawda?

10:58.840 --> 11:01.110
Będę więc musiał przekazać

11:01.110 --> 11:04.990
funkcję do mojej funkcji addListener tutaj.

11:04.990 --> 11:07.520
Tutaj przekazuję anonimową funkcję strzałki.

11:07.520 --> 11:10.770
I ta funkcja otrzyma listę projektów, gdy

11:10.770 --> 11:14.400
zostanie wywołana z wnętrza projectState.

11:14.400 --> 11:17.430
Tak więc otrzymujemy listę projektów, wiemy, że wewnątrz

11:17.430 --> 11:19.160
tego ciała funkcji możemy następnie

11:19.160 --> 11:21.560
użyć tej listy projektów.

11:21.560 --> 11:26.046
I tutaj dodam zupełnie nowe pole do listy projektów, assignedProjects

11:26.046 --> 11:28.410
może, które jest typu any array, czyli

11:28.410 --> 11:30.310
cokolwiek w tablicy, oraz tablicę

11:30.310 --> 11:34.010
o dowolnych wartościach, no oczywiście to też określę

11:34.010 --> 11:37.630
bardziej szczegółowo później.

11:37.630 --> 11:39.890
Wtedy tutaj możemy powiedzieć, że ten przypisany

11:39.890 --> 11:41.780
projekt jest równy projektom.

11:41.780 --> 11:44.240
A więc do projektów, które otrzymujemy.

11:44.240 --> 11:45.870
Teraz tutaj, aby pozbyć się tego

11:45.870 --> 11:47.280
błędu typu implicit any,

11:47.280 --> 11:49.900
muszę być jasny, że to faktycznie będzie tablica

11:49.900 --> 11:51.563
czegokolwiek tutaj.

11:52.610 --> 11:55.020
Więc teraz dodaję projekty, które dostaję,

11:55.020 --> 11:57.660
ponieważ coś się zmieniło w moim stanie.

11:57.660 --> 11:59.490
Tutaj do moich przypisanych projektów,

11:59.490 --> 12:00.530
gdzie nie dodaję tego,

12:00.530 --> 12:02.350
nadpisuję przypisane projekty nowymi

12:02.350 --> 12:04.170
projektami.

12:04.170 --> 12:08.223
I wtedy moim pomysłem jest oddanie tych wszystkich projektów.

12:09.080 --> 12:10.883
W tym celu możemy dodać nową

12:11.951 --> 12:15.080
metodę; na przykład renderPrjects.

12:15.080 --> 12:16.920
Które chcę wywołać z tego miejsca,

12:16.920 --> 12:20.063
tego renderProjects, tak po prostu.

12:22.230 --> 12:24.120
Kończy się to poza renderProjects.

12:24.120 --> 12:27.480
Sięgnę do tej listy tutaj, prawda, przypisujemy

12:27.480 --> 12:30.150
to ID, kiedy renderujemy treść, co robimy

12:30.150 --> 12:31.290
tutaj.

12:31.290 --> 12:34.440
Wygląda na to, że robimy to po wywołaniu renderProjects, ale

12:34.440 --> 12:36.640
pamiętaj, że kończy się to z funkcji, która

12:36.640 --> 12:38.470
tylko ostatecznie zostanie wywołana

12:38.470 --> 12:40.230
po dodaniu nowych projektów.

12:40.230 --> 12:43.510
Więc właściwie renderContent będzie uruchomiony jako pierwszy.

12:43.510 --> 12:47.090
I dlatego w renderProjects możemy polegać na tym, że ten identyfikator

12:47.090 --> 12:49.370
jest przypisany do listy nieuporządkowanej,

12:49.370 --> 12:53.030
więc tutaj możemy to złapać i uzyskać nasz element listy za pomocą

12:53.030 --> 12:58.030
document. getElementbyId, a następnie po prostu przekazuję

12:58.469 --> 13:00.790
ten identyfikator ID za pomocą typu tej

13:00.790 --> 13:03.690
konkretnej klasy listy projektów.

13:03.690 --> 13:08.563
I wtedy również używając, cóż, reszty tego ID, które wygenerowaliśmy.

13:09.580 --> 13:11.130
I do tej listy lub na tej liście

13:11.130 --> 13:14.170
chcę oddać wszystkie projekty, które mamy.

13:14.170 --> 13:17.670
Więc przejdę tutaj przez wszystkie pozycje

13:17.670 --> 13:21.060
tego przypisanego projektom.

13:21.060 --> 13:23.150
A potem dla każdej pozycji chcę coś dodać

13:23.150 --> 13:23.983
do listy i później

13:23.983 --> 13:25.380
to dopracujemy.

13:25.380 --> 13:29.787
Na razie po prostu wywołam appendChild tutaj na moim

13:30.890 --> 13:32.480
elemencie listy.

13:32.480 --> 13:34.490
Swoją drogą tutaj powinniśmy dodać wykrzyknik,

13:34.490 --> 13:36.970
żeby było jasne, że to nie będzie null.

13:36.970 --> 13:41.970
Możemy również rzucić to na element listy HTML UL, a więc na element listy nieuporządkowanej,

13:42.000 --> 13:45.420
ponieważ tym właśnie będzie.

13:45.420 --> 13:47.530
A następnie możemy dołączyć dziecko

13:47.530 --> 13:49.740
tutaj i to powinno być zupełnie nowy element

13:49.740 --> 13:51.980
listy; więc tutaj możemy utworzyć nasz

13:51.980 --> 13:56.160
element listy z dokumentem. createElement LI.

13:56.160 --> 13:58.350
I na tym elemencie listy tutaj,

13:58.350 --> 14:02.500
po prostu ustawię zawartość tekstową równą projektowi

14:02.500 --> 14:03.950
Item. tytuł.

14:03.950 --> 14:06.240
Każdy element projektu będzie projektem,

14:06.240 --> 14:09.940
ponieważ tworzymy go tam na górze w stanie projektu, więc będzie

14:09.940 --> 14:11.350
takim obiektem i dlatego

14:11.350 --> 14:13.100
będzie miał tytuł.

14:14.210 --> 14:15.940
Teraz, jeśli zejdziemy na dół, mamy

14:15.940 --> 14:18.880
nasz element listy, który jest teraz dodany tutaj.

14:18.880 --> 14:20.730
I z tym jesteśmy prawie tam, pozostając

14:20.730 --> 14:22.340
poprawkami tutaj, ustawiam

14:22.340 --> 14:23.740
to pole, ale w konstruktorze

14:23.740 --> 14:27.080
następnie nigdy nie odwołuję się do niego.

14:27.080 --> 14:29.090
Tylko tutaj w mojej funkcji słuchacza,

14:29.090 --> 14:31.230
ale jak wspomniano, nie uruchamia się to

14:31.230 --> 14:32.640
od razu w konstruktorze.

14:32.640 --> 14:37.640
Więc to, co zrobię tutaj, to ustawię to przypisane projekty równe pustej tablicy

14:38.970 --> 14:41.200
tutaj początkowo, tak, że wszyscy jesteśmy

14:41.200 --> 14:44.450
szczęśliwi i to jest inicjalizowane.

14:44.450 --> 14:45.510
Teraz jeśli to zapiszemy,

14:45.510 --> 14:47.780
powinno się skompilować bez błędów.

14:47.780 --> 14:50.400
I teraz jeśli dodamy coś tutaj,

14:50.400 --> 14:51.993
to czy to działa?

14:53.480 --> 14:56.270
Rzeczywiście widzimy, że pojawia się na naszych listach.

14:56.270 --> 14:58.270
W obu listach w tej chwili, ponieważ

14:58.270 --> 15:00.847
nie mamy logiki filtrowania i tak dalej.

15:00.847 --> 15:03.210
I to jest coś, co możemy naprawić

15:03.210 --> 15:04.710
później, ale działa

15:04.710 --> 15:06.220
i to jest ważne.

15:06.220 --> 15:08.390
Teraz widzisz, że mamy tu jednak również błąd.

15:08.390 --> 15:10.260
Jeśli dodaję drugi element, duplikujemy

15:10.260 --> 15:12.370
ostatni element i dodajemy nowe elementy,

15:12.370 --> 15:13.880
więc to jest coś, co będziemy

15:13.880 --> 15:15.490
musieli naprawić.

15:15.490 --> 15:17.653
I to są wszystkie rzeczy, którymi się zajmiemy,

15:17.653 --> 15:21.270
ale teraz przynajmniej jesteśmy w stanie coś z tym wyprowadzić, zanurkujmy

15:21.270 --> 15:24.450
we wszystkich ulepszeniach, takich jak bycie jaśniejszym

15:24.450 --> 15:27.160
o typach, których używamy, unikanie zduplikowanego

15:27.160 --> 15:30.733
wyjścia i wiele innych rzeczy, jak również.
