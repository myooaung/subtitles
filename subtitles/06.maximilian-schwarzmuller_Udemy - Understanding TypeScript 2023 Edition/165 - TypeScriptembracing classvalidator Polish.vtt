WEBVTT

00:02.130 --> 00:03.630
Narrator: Więc mieliśmy spojrzenie

00:03.630 --> 00:06.210
na Lodash, który jest waniliowym pakietem JavaScript, w którym

00:06.210 --> 00:08.360
musieliśmy zainstalować kilka tłumaczeń.

00:08.360 --> 00:10.310
I mieliśmy spojrzenie na class-transformer,

00:10.310 --> 00:13.530
który działa również w vanilla JavaScript, ale także

00:13.530 --> 00:17.328
działa szczególnie dobrze w TypeScript.

00:17.328 --> 00:20.330
Teraz przyjrzyjmy się klasie-walidator.

00:20.330 --> 00:24.540
To teraz jest pakiet, który naprawdę wykorzystuje TypeScript.

00:24.540 --> 00:28.300
Opiera się na koncepcji dekoratorów TypeScript

00:28.300 --> 00:32.340
i daje nam zupełnie nowy sposób pracy z nimi, a przynajmniej

00:32.340 --> 00:34.330
prawie nowy.

00:34.330 --> 00:38.230
Jeśli śledziłeś mój moduł dekoratora w tym kursie, faktycznie

00:38.230 --> 00:41.200
zobaczysz coś tutaj w tym wykładzie, który jakbyśmy

00:41.200 --> 00:44.150
zbudowali na własną rękę tam również.

00:44.150 --> 00:47.100
Teraz jednak, dzięki tej bibliotece trzeciej strony,

00:47.100 --> 00:49.330
nie musimy wymyślać koła od nowa, nie musimy

00:49.330 --> 00:51.193
budować go na własną rękę.

00:51.193 --> 00:53.320
I ta biblioteka też pewnie, jest nieco

00:53.320 --> 00:55.710
bardziej rozbudowana niż nasze rozwiązanie

00:55.710 --> 00:57.830
w module dekoratora.

00:57.830 --> 01:00.026
Mówię o walidacji.

01:00.026 --> 01:02.870
Jest to pakiet, który pozwala nam na dodanie reguł

01:02.870 --> 01:06.390
walidacji z pomocą pewnych dekoratorów, wewnątrz klasy, a następnie

01:06.390 --> 01:08.590
za każdym razem, gdy instancjonujemy

01:08.590 --> 01:09.920
taką klasę, możemy faktycznie

01:09.920 --> 01:12.610
zwalidować ją pod kątem reguł, które ustawiliśmy

01:12.610 --> 01:15.610
tam z pomocą dekoratorów.

01:15.610 --> 01:18.960
Teraz, aby zacząć, musimy po prostu zaimportować ten pakiet tutaj.

01:18.960 --> 01:23.130
Więc npm install class-validator --save, a następnie

01:23.130 --> 01:26.130
możemy zacząć od razu.

01:26.130 --> 01:29.220
Pozwól mi więc ponownie uruchomić webpack-dev-server,

01:29.220 --> 01:30.600
a żeby skorzystać z tego

01:30.600 --> 01:33.580
pakietu, musimy dodać kilka dekoratorów do modeli,

01:33.580 --> 01:35.740
a więc do klas, w których chcemy walidować

01:35.740 --> 01:37.490
pewne właściwości.

01:37.490 --> 01:39.730
Więc w moim przypadku tutaj w modelu

01:39.730 --> 01:43.240
produktu, zaimportuję coś z class-validator.

01:43.240 --> 01:45.110
I teraz znowu, jeśli prześledziłeś

01:45.110 --> 01:47.360
moduł dekoratora w tym kursie, to jest

01:47.360 --> 01:49.640
to koncepcja, którą już również zbudowałem

01:49.640 --> 01:52.870
od podstaw tam bez tego pakietu.

01:52.870 --> 01:56.270
Ale oczywiście zbudowaliśmy w bardzo naiwnej i podstawowej wersji,

01:56.270 --> 01:57.840
z tym pakietem nie musimy go budować

01:57.840 --> 02:01.200
samodzielnie i jest też bardziej rozbudowany.

02:01.200 --> 02:02.770
Teraz z class-validator możemy

02:02.770 --> 02:04.820
zaimportować pewne dekoratory.

02:04.820 --> 02:05.893
Na przykład

02:07.139 --> 02:08.630
IsNotEmpty, lub

02:08.630 --> 02:11.410
również IsNumber.

02:11.410 --> 02:13.500
Możemy również zaimportować IsPositive.

02:15.940 --> 02:18.940
Teraz możemy dodać je do właściwości, które chcemy zwalidować.

02:18.940 --> 02:20.900
Więc tutaj na przykład na tytule,

02:20.900 --> 02:24.220
możemy dodać IsNotEmpty jako dekorator tak, a

02:24.220 --> 02:26.390
to wszystko są fabryki dekoratorów,

02:26.390 --> 02:29.610
więc zawsze musisz je wykonać.

02:29.610 --> 02:31.318
A także tutaj,

02:31.318 --> 02:37.380
IsNumber i IsPositive.

02:37.380 --> 02:38.763
Wykonajmy to.

02:40.250 --> 02:41.730
Teraz, aby użyć dekoratorów tutaj, powinieneś

02:41.730 --> 02:44.730
również przejść do tsconfig. plik js, i upewnij

02:44.730 --> 02:49.550
się, że włączyłeś tam eksperymentalne dekoratory.

02:49.550 --> 02:51.593
Następnie zapisz to, a teraz te obszary

02:52.750 --> 02:55.040
tutaj powinny również odejść.

02:55.040 --> 02:57.300
Musimy również zrestartować serwer dev, tak

02:57.300 --> 03:00.840
aby odebrał on nowy tsconfig. konwersja js.

03:00.840 --> 03:02.650
Więc teraz dodaliśmy te reguły,

03:02.650 --> 03:04.768
te reguły walidacji tutaj.

03:04.768 --> 03:07.710
Zasadniczo mówimy, że tytuł nigdy nie może

03:07.710 --> 03:11.830
być pustym ciągiem, a liczby powinny być liczbą dodatnią.

03:11.830 --> 03:13.980
Teraz możemy stworzyć nowy produkt

03:13.980 --> 03:15.119
tutaj, powiedzmy

03:15.119 --> 03:16.870
tam, newProd, gdzie wywołujemy

03:16.870 --> 03:19.078
new product i przekazuję pusty ciąg

03:19.078 --> 03:25.210
dla tytułu, a następnie minus 5.

03:25.210 --> 03:25.210
99 za numer.

03:25.210 --> 03:26.700
Jeśli wtedy pocieszę. zaloguj

03:27.576 --> 03:29.920
newProd, getInformation

03:29.920 --> 03:31.730
i wykonaj to, zobaczmy,

03:31.730 --> 03:34.830
gdzie to działa.

03:34.830 --> 03:35.683
Dobra, zapisz to.

03:37.840 --> 03:40.040
Huh, to działa.

03:40.040 --> 03:42.330
Cóż, jeszcze nie do końca.

03:42.330 --> 03:46.470
Z naszymi dekoratorami ustalamy zasady.

03:46.470 --> 03:49.560
Ale te dekoratory same w sobie niewiele dają.

03:49.560 --> 03:52.880
Zamiast tego musimy teraz również zaimportować

03:52.880 --> 03:56.190
metodę walidatora z klasy-validator.

03:56.190 --> 03:57.300
Więc z tego pakietu

03:57.300 --> 03:59.840
importujemy validate i musimy to wykonać

03:59.840 --> 04:02.260
na konkretnej instancji, poza klasą,

04:02.260 --> 04:05.750
do której dodaliśmy nasze dekoratory.

04:05.750 --> 04:07.300
Więc w tym przypadku

04:07.300 --> 04:12.020
możemy uruchomić validate i przekazać do niego newProd.

04:12.020 --> 04:14.670
I validate zwróci wtedy obietnicę,

04:14.670 --> 04:19.150
która faktycznie może dać błędy walidacji.

04:19.150 --> 04:21.440
Możemy więc dodać wtedy tutaj, gdybyśmy byli

04:21.440 --> 04:23.080
w funkcji easing, to moglibyśmy

04:23.080 --> 04:25.680
również użyć oczywiście pojedynczej wagi.

04:25.680 --> 04:27.920
I tutaj otrzymujemy z powrotem błędy, które

04:27.920 --> 04:30.093
znajduje ta funkcja walidacji.

04:30.980 --> 04:31.813
Teraz ważne,

04:31.813 --> 04:34.950
zawsze kończymy w then, nawet jeśli są błędy, więc

04:34.950 --> 04:36.560
jeśli są błędy walidacji,

04:36.560 --> 04:38.420
nie trafiamy do jakiegoś bloku

04:38.420 --> 04:41.120
catch, zawsze trafiamy do bloku then.

04:41.120 --> 04:44.360
Teraz w tym miejscu możemy sprawdzić, czy błędy,

04:44.360 --> 04:45.980
które są Array, długość

04:45.980 --> 04:48.400
kropki jest większa niż zero.

04:48.400 --> 04:51.300
Co oznacza, że występują błędy walidacji.

04:51.300 --> 04:52.910
W tym przypadku możemy rejestrować

04:53.750 --> 04:56.700
błędy walidacji, a może także wyprowadzać błędy,

04:56.700 --> 04:59.200
które znaleźliśmy.

04:59.200 --> 05:01.820
Czyli konsola. błędy dziennika, a inaczej

05:01.820 --> 05:03.700
w moim przypadku tutaj, będę logował

05:03.700 --> 05:05.290
informacje.

05:05.290 --> 05:06.580
Teraz oczywiście zależy to od

05:06.580 --> 05:09.100
aplikacji, którą budujesz, co chcesz zrobić tutaj.

05:09.100 --> 05:10.860
Możesz chcieć pokazać alert dla

05:10.860 --> 05:13.790
użytkownika w tym przypadku tutaj, jeśli są błędy.

05:13.790 --> 05:15.360
Możesz chcieć zresetować wejście,

05:15.360 --> 05:16.520
cokolwiek chcesz zrobić.

05:16.520 --> 05:19.690
Tutaj po prostu zaloguję coś do konsoli.

05:19.690 --> 05:22.080
I jeśli teraz zapiszemy to, dobrze widzisz

05:22.080 --> 05:24.870
błędy walidacji, a następnie tutaj tablicę

05:24.870 --> 05:27.830
błędów, które zostały znalezione.

05:27.830 --> 05:31.890
Na przykład pierwszy błąd jest na właściwości title,

05:31.890 --> 05:34.770
że nie powinien być pusty.

05:34.770 --> 05:38.290
A drugi błąd jest na własności ceny,

05:38.290 --> 05:41.150
że musi być liczbą dodatnią.

05:41.150 --> 05:44.950
A oto jak łatwo możesz dodać całkiem potężną walidację

05:44.950 --> 05:47.960
do swoich projektów dzięki temu podejściu

05:47.960 --> 05:50.170
opartemu na dekoratorach.

05:50.170 --> 05:53.190
Związane z tym, co robiliśmy wcześniej w kursie, oraz

05:53.190 --> 05:54.530
z modułem dekoratorów,

05:54.530 --> 05:56.062
ale jak już wspomniałem wielokrotnie,

05:56.062 --> 05:59.890
bardziej rozbudowane z mnóstwem wbudowanych reguł, i możesz się o tym

05:59.890 --> 06:01.190
wszystkim dowiedzieć oczywiście

06:01.190 --> 06:03.610
w dokumentach tego pakietu, i bez ponownego

06:03.610 --> 06:06.350
wymyślania koła.

06:06.350 --> 06:09.300
Więc pakiet class-validator naprawdę jest potężnym

06:09.300 --> 06:10.930
pakietem, o którym powinieneś

06:10.930 --> 06:14.693
wiedzieć, jeśli budujesz większe projekty z TypeScript.
