WEBVTT

00:02.260 --> 00:03.920
Explainer: È il momento di gestire lo stato

00:03.920 --> 00:05.340
nel componente App, perché quando aggiorniamo

00:05.340 --> 00:07.240
l'array in questo modo, il componente non viene

00:07.240 --> 00:08.880
renderizzato nuovamente.

00:08.880 --> 00:10.530
È così che funziona React.

00:10.530 --> 00:12.590
Nel nostro componente funzione, possiamo

00:12.590 --> 00:15.000
gestire lo stato con il gancio useState.

00:15.000 --> 00:16.820
E ancora, se non lo sapete o se lo

00:16.820 --> 00:18.750
stato o i componenti funzionali o

00:18.750 --> 00:21.120
gli hook non vi dicono nulla, consultate

00:21.120 --> 00:23.810
sicuramente alcune risorse dedicate a React

00:23.810 --> 00:26.480
come il mio corso React, la guida completa.

00:26.480 --> 00:29.870
Quindi, ora voglio gestire i miei todo con lo stato e per

00:29.870 --> 00:31.760
questo cancellerò il todo fittizio

00:31.760 --> 00:33.060
con cui ho iniziato e inizializzerò

00:33.060 --> 00:36.430
invece lo stato chiamando useState e a questo posso passare

00:36.430 --> 00:39.080
il mio array vuoto come valore di stato iniziale,

00:39.080 --> 00:41.210
in modo che inizialmente il mio stato

00:41.210 --> 00:44.510
sia un array vuoto.

00:44.510 --> 00:47.100
Ora useState restituisce sempre un array

00:47.100 --> 00:49.370
con esattamente due elementi.

00:49.370 --> 00:52.070
Il primo elemento è l'ultima istantanea di stato per

00:52.070 --> 00:53.630
questo ciclo di rendering.

00:53.630 --> 00:55.070
Il secondo parametro, il

00:55.070 --> 00:56.720
secondo elemento dell'array,

00:56.720 --> 00:58.860
è una funzione che aggiorna lo stato

00:58.860 --> 01:01.110
e restituisce il componente.

01:01.110 --> 01:02.660
Possiamo usare la ristrutturazione

01:02.660 --> 01:05.060
degli array, che abbiamo imparato in precedenza,

01:05.060 --> 01:07.060
per estrarre questi due elementi e memorizzarli

01:07.060 --> 01:09.230
in costanti separate.

01:09.230 --> 01:10.900
Poi abbiamo i todos e una

01:10.900 --> 01:13.103
funzione chiamata setTodos.

01:14.920 --> 01:16.820
Con questo, otteniamo ancora il

01:16.820 --> 01:19.530
nostro array di todos e ora qui, nel todoAddHandler,

01:19.530 --> 01:21.480
voglio chiamare setTodos e impostare

01:21.480 --> 01:24.430
il mio array di todos su un nuovo array, a cui è stato

01:24.430 --> 01:27.373
aggiunto il nuovo todoText.

01:28.240 --> 01:29.283
Ora, possiamo

01:30.400 --> 01:32.130
naturalmente passare

01:32.130 --> 01:34.100
un nuovo array e aggiungere

01:34.100 --> 01:36.530
un nuovo oggetto, diciamo con un

01:36.530 --> 01:38.540
ID, dove creiamo un ID casuale

01:38.540 --> 01:42.530
con Math. random(). toString.

01:42.530 --> 01:44.830
Non è proprio unico, ma va bene così, e poi abbiamo

01:44.830 --> 01:46.620
anche il nostro testo, che è il valore

01:46.620 --> 01:48.760
del testo che ricevo qui.

01:48.760 --> 01:51.910
Ma stranamente, ricevo un errore qui.

01:51.910 --> 01:54.790
L'errore che riceviamo è che questo argomento

01:54.790 --> 01:56.860
non è assegnabile.

01:56.860 --> 01:59.630
In pratica in qualcosa che si aspetta

01:59.630 --> 02:01.970
di avere un array di nulla.

02:01.970 --> 02:03.590
E questo, ovviamente, non è ciò che si vuole qui.

02:03.590 --> 02:06.010
Non vogliamo che il nostro Stato sia un insieme di nulla.

02:06.010 --> 02:07.110
Perché sta accadendo?

02:07.950 --> 02:11.800
Perché quando inizializzo useState con un array vuoto, TypeScript

02:11.800 --> 02:15.040
deduce come sarà il nostro stato; se inizializzassi questo

02:15.040 --> 02:17.060
array con una stringa, TypeScript

02:17.060 --> 02:20.130
dedurrebbe che il mio stato è una stringa.

02:20.130 --> 02:23.010
Quindi, se rimuovo temporaneamente questo elemento e inserisco del testo,

02:23.010 --> 02:24.123
questo verrà accettato.

02:25.160 --> 02:26.137
Se lo passo in un array,

02:26.137 --> 02:28.260
TypeScript si aspetta che sia un array,

02:28.260 --> 02:30.080
ma non un array di qualcosa, bensì

02:30.080 --> 02:32.000
sempre un array vuoto.

02:32.000 --> 02:36.070
Quindi un array di nulla, che ovviamente non voglio qui.

02:36.070 --> 02:38.050
Per risolvere questo problema dobbiamo dire

02:38.050 --> 02:40.460
a React come sarà la nostra proprietà nel tempo.

02:40.460 --> 02:42.920
E per questo possiamo usare ancora una volta che

02:42.920 --> 02:44.630
useState è una funzione generica,

02:44.630 --> 02:48.080
perché possiamo passare la struttura della nostra proprietà.

02:48.080 --> 02:51.240
Quindi, quale tipo di dati contiene il nostro stato

02:51.240 --> 02:54.200
e possiamo passare che il nostro stato deve essere

02:54.200 --> 02:56.253
un array di oggetti, per essere precisi

02:57.210 --> 02:59.570
un array di oggetti in cui abbiamo una proprietà

02:59.570 --> 03:02.750
ID, che è una stringa, e una proprietà text, che è una

03:02.750 --> 03:04.860
stringa.

03:04.860 --> 03:08.050
E ora l'aggiornamento dello stato è consentito.

03:08.050 --> 03:10.100
Ora, scriverlo qui va bene, ma dato che ci servirà

03:10.100 --> 03:12.410
in diversi punti dell'applicazione, creerò un nuovo

03:12.410 --> 03:16.710
file e lo chiamerò todo. modello. ts.

03:16.710 --> 03:18.210
Il nome del file dipende da voi.

03:18.210 --> 03:19.940
E qui voglio esportare fondamentalmente

03:19.940 --> 03:21.710
un'interfaccia di nome Todo, in cui

03:21.710 --> 03:24.080
voglio descrivere come dovrebbe apparire il

03:24.080 --> 03:25.440
nostro ID Todo nella mia applicazione,

03:25.440 --> 03:27.430
con un ID di tipo stringa e una proprietà

03:27.430 --> 03:30.190
text di tipo stringa.

03:30.190 --> 03:34.420
E con questo esportato qui nel componente dell'app,

03:34.420 --> 03:35.900
possiamo importarlo,

03:35.900 --> 03:38.210
quindi possiamo importare Todo

03:39.080 --> 03:42.543
da . /todo. modello.

03:43.900 --> 03:46.720
E qui abbiamo semplicemente un array di todos, che

03:46.720 --> 03:49.550
ovviamente è più breve e più facile da leggere.

03:49.550 --> 03:51.480
Ora l'aggiornamento dello stato funziona

03:51.480 --> 03:52.870
ancora, ma è un po' più pulito.

03:52.870 --> 03:55.100
E questo, come si vede, è molto importante

03:55.100 --> 03:57.210
quando si lavora con qualcosa come un array,

03:57.210 --> 03:59.170
dove i tipi di contenuto per quale tipo

03:59.170 --> 04:01.860
di dati si vogliono memorizzare alla fine, se si inizializza

04:01.860 --> 04:04.270
con un array vuoto.

04:04.270 --> 04:06.250
Con questo però funziona.

04:06.250 --> 04:07.450
L'aspetto negativo è che

04:07.450 --> 04:09.910
la nostra logica di aggiornamento dello stato non

04:09.910 --> 04:13.670
è corretta, perché in questo momento sovrascrivo sempre l'array esistente

04:13.670 --> 04:17.400
di todos con un nuovo array che ha esattamente un solo elemento.

04:17.400 --> 04:20.110
E invece voglio sovrascriverlo con un nuovo array

04:20.110 --> 04:23.730
che contenga tutti i vecchi elementi e il nuovo elemento.

04:23.730 --> 04:26.583
Quindi, nella prossima lezione, modificheremo questa logica.
