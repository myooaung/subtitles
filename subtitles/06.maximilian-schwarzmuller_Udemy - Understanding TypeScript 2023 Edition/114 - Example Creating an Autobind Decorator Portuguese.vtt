WEBVTT

00:02.270 --> 00:03.613
Instrutor: Para que possamos

00:03.613 --> 00:05.080
devolver algo sobre Decoradores

00:05.080 --> 00:06.820
de Métodos, e que algo seja um descritor,

00:06.820 --> 00:08.920
que nos permita mudar o método ou alterar a

00:08.920 --> 00:11.000
configuração do método.

00:11.000 --> 00:12.582
E isto é algo que eu quero fazer aqui.

00:12.582 --> 00:15.985
Antes disso, irei primeiro ao arquivo HTML índice

00:15.985 --> 00:18.540
e lá, vamos adicionar um botão.

00:18.540 --> 00:21.272
Clique em Mim, um botão muito simples,

00:21.272 --> 00:24.720
em meu aplicativo. ts, agora quero ter certeza

00:24.720 --> 00:26.104
de que quando clicamos

00:26.104 --> 00:29.800
neste botão, executamos um método sobre um objeto.

00:29.800 --> 00:32.120
E para isso, vou simplesmente acrescentar uma nova

00:32.120 --> 00:34.600
classe aqui, antes de mais nada, impressora.

00:34.600 --> 00:38.140
E lá eu quero ter uma mensagem de propriedade que é apenas

00:38.140 --> 00:41.690
isto funciona, então um simples fio armazenado lá dentro

00:41.690 --> 00:45.980
e depois quero ter um método de mensagem de exibição lá dentro onde eu

00:45.980 --> 00:49.630
simplesmente consolei o registro desta mensagem.

00:49.630 --> 00:51.770
Portanto, é claro, esta é uma espécie de aula de boneco simples,

00:51.770 --> 00:53.430
mas não obstante, isto me permite mostrar a vocês

00:53.430 --> 00:54.860
o que quero mostrar a vocês.

00:54.860 --> 00:56.550
Vamos selecionar agora o botão

00:56.550 --> 01:00.860
de porta a porta, com o botão seletor de consulta de documentos e vamos adicionar

01:00.860 --> 01:02.970
a ele um ouvinte de eventos.

01:02.970 --> 01:05.080
Agora, primeiro de tudo, vou adicionar meu ponto

01:05.080 --> 01:07.800
de exclamação aqui para deixar claro ao TypeScript que isto

01:07.800 --> 01:08.806
existe, que isto não será

01:08.806 --> 01:10.990
nulo, e depois vou adicionar um ouvinte de eventos,

01:10.990 --> 01:14.210
um ouvinte de eventos com um clique, e depois quero acionar este método

01:14.210 --> 01:16.450
de mensagem de exibição aqui.

01:16.450 --> 01:20.350
Para isso, criarei aqui uma nova impressora, como esta, e depois aqui

01:20.350 --> 01:23.120
apontarei para a p. showMessage, essa é a

01:23.120 --> 01:24.323
minha idéia aqui.

01:25.300 --> 01:27.103
Agora, se salvarmos isso, e voltarmos

01:28.153 --> 01:31.440
à nossa página e eu clicar neste botão, ficamos indefinidos

01:31.440 --> 01:33.320
aqui, no entanto, não recebemos

01:33.320 --> 01:36.050
nossa mensagem sendo mostrada.

01:36.050 --> 01:38.860
E a razão para isso é que com um ouvinte de eventos,

01:38.860 --> 01:41.820
se apontarmos para uma função que deve ser executada,

01:41.820 --> 01:44.240
esta palavra-chave dentro dessa função

01:44.240 --> 01:48.260
não terá o mesmo contexto ou referência que tem se chamarmos apenas

01:48.260 --> 01:52.193
p. ShowMessage, neste caso,

01:53.144 --> 01:56.450
isto se referiria à impressora.

01:56.450 --> 02:00.200
Não, no cenário aqui onde usamos um ouvinte de eventos,

02:00.200 --> 02:02.860
isto se referirá ao alvo do evento, porque

02:02.860 --> 02:05.777
o addEventListener no final vincula isto

02:05.777 --> 02:07.693
na função que será executada

02:07.693 --> 02:09.560
ao alvo do evento.

02:09.560 --> 02:11.360
E, claro, eu não quero isto.

02:11.360 --> 02:12.570
Agora, um trabalho comum

02:12.570 --> 02:14.170
aqui seria usar o método bind

02:14.170 --> 02:19.170
e bind showMessage para p, ou bind this in showMessage to p para que quando isto for

02:19.480 --> 02:22.860
executado, isto não esteja se referindo ao que addEventListener

02:22.860 --> 02:25.420
quer que ele se refira, mas ao invés disso,

02:25.420 --> 02:28.040
este dentro de showMessage se referirá a este

02:28.040 --> 02:31.770
p, a este objeto aqui novamente.

02:31.770 --> 02:33.300
E se estamos agora, se recarregamos

02:33.300 --> 02:36.270
aqui e eu limpar isto novamente, agora vemos que funciona!

02:36.270 --> 02:39.240
Agora, tudo isso é JavaScript padrão.

02:39.240 --> 02:40.790
Agora, vamos construir um decorador,

02:40.790 --> 02:42.191
que podemos acrescentar

02:42.191 --> 02:47.191
a este método, que automaticamente ligará isto à classe circundante, de modo que ao objeto

02:47.460 --> 02:50.130
ao qual este método pertence, toda vez que for chamado,

02:50.130 --> 02:53.440
não importa onde o chamemos.

02:53.440 --> 02:55.974
Por isso, acima da impressora acrescentarei uma nova

02:55.974 --> 02:58.800
função e lhe darei o nome de autobind porque é isso, no final,

02:58.800 --> 03:01.580
o que fazemos e que será minha autobind decoradora.

03:01.580 --> 03:03.890
É claro que também é possível usar um caráter inicial maiúsculo

03:03.890 --> 03:05.960
para se manter alinhado com nossos outros nomes, mas

03:05.960 --> 03:07.930
novamente, é possível usar qualquer um dos dois

03:07.930 --> 03:10.122
quando se define uma função de decorador.

03:10.122 --> 03:13.300
Agora este aqui já será o meu decorador e lá dentro

03:13.300 --> 03:15.269
temos um par de argumentos.

03:15.269 --> 03:17.940
Nós conseguimos o alvo, como você vai aprender, e isso é qualquer um.

03:17.940 --> 03:20.085
Ou é o protótipo do objeto com o qual estamos

03:20.085 --> 03:22.533
trabalhando ou é a função do construtor, se

03:22.533 --> 03:25.730
estivéssemos adicionando isto a um método estático, mas

03:25.730 --> 03:27.340
aqui será o protótipo porque

03:27.340 --> 03:30.200
o adicionaremos a um método de instância.

03:30.200 --> 03:32.520
Então temos o nome do método ou o nome da propriedade, mas

03:32.520 --> 03:33.690
como o acrescentamos a um método

03:33.690 --> 03:36.330
podemos chamar este nome de método, faz mais sentido.

03:36.330 --> 03:38.600
Se isto for uma corda ou um símbolo ou também

03:38.600 --> 03:40.229
pode ser um número, é claro, mas

03:40.229 --> 03:43.250
aqui sabemos que normalmente trabalharemos com cordas,

03:43.250 --> 03:45.061
de modo que também podemos ir com cordas

03:45.061 --> 03:48.470
aqui, dependendo de onde você planeja adicionar este decorador

03:48.470 --> 03:50.170
e como deve ser genérico e por último,

03:50.170 --> 03:52.484
mas não menos importante, obtemos aqui o descritor

03:52.484 --> 03:56.340
que será do tipo PropertyDescriptor como alerta.

03:56.340 --> 03:57.650
Então agora temos estes

03:57.650 --> 03:59.655
três argumentos que todos nós usamos

03:59.655 --> 04:03.540
no Log3 que era nosso método de decoração antes.

04:03.540 --> 04:05.970
Agora, em autobind, e agora quero ter certeza

04:05.970 --> 04:08.994
de que sempre definimos esta palavra-chave para este

04:08.994 --> 04:11.973
objeto ao qual este método pertence novamente.

04:11.973 --> 04:14.240
Agora, como podemos conseguir isso?

04:14.240 --> 04:15.797
Primeiro de tudo, tenho que ter

04:15.797 --> 04:17.880
acesso ao método que deve ser chamado.

04:17.880 --> 04:20.661
E isto será possível com a ajuda de nosso descritor, porque

04:20.661 --> 04:22.013
se você recarregar o aplicativo

04:22.013 --> 04:25.180
e tiver uma visão de tal descritor de método lá embaixo, você verá

04:25.180 --> 04:27.330
que obtemos a propriedade de valor no descritor

04:27.330 --> 04:29.460
e que aponta para a função.

04:29.460 --> 04:32.240
Como o valor desta propriedade é uma função, neste caso,

04:32.240 --> 04:33.930
um método é apenas uma propriedade

04:33.930 --> 04:35.498
com uma função como um valor.

04:35.498 --> 04:38.630
Portanto, a chave de valor mantém a função original,

04:38.630 --> 04:42.980
portanto, aqui, podemos extrair o método original, se quisermos chamá-lo

04:42.980 --> 04:47.320
assim, acessando o descritor.

04:47.320 --> 04:47.320
valor.

04:47.320 --> 04:50.563
Isto nos dará acesso ao método, bem, original.

04:51.790 --> 04:55.450
Em seguida, vou criar um novo descritor ajustado, isto será,

04:55.450 --> 04:58.320
no final, o que retornaremos mais tarde.

04:58.320 --> 05:00.030
Agora este será um objeto

05:00.030 --> 05:03.620
e será do tipo descritor de propriedade.

05:03.620 --> 05:06.350
Agora neste objeto aqui podemos acrescentar todas as coisas

05:06.350 --> 05:09.350
que podemos acrescentar a um descritor de propriedade.

05:09.350 --> 05:12.110
E, por exemplo, pode definir isto como configurável,

05:12.110 --> 05:14.962
verdadeiro, definir enumerável como falso, para que

05:14.962 --> 05:17.130
isto não apareça em loops estrangeiros,

05:17.130 --> 05:20.310
e agora adicionar um getter aqui, e isso é novidade.

05:20.310 --> 05:23.400
Acrescento aqui um getter, que é um método, ou uma propriedade

05:23.400 --> 05:26.150
que detém uma função, que é a mesma, para que possamos

05:27.020 --> 05:29.628
executar alguma lógica extra quando os usuários

05:29.628 --> 05:32.260
tentam acessar esta propriedade.

05:32.260 --> 05:35.170
Para que não apenas executemos diretamente o valor desta propriedade,

05:35.170 --> 05:36.633
para que a função, mas para que possamos

05:36.633 --> 05:38.888
intervir e fazer algum trabalho extra antes de

05:38.888 --> 05:40.850
executar a função.

05:40.850 --> 05:41.913
Essa é a idéia aqui.

05:43.230 --> 05:46.290
Portanto, eu não adiciono uma propriedade de valor a este descritor

05:46.290 --> 05:48.660
aqui, apenas tenho um getter e novamente, o getter

05:48.660 --> 05:51.540
é basicamente como ter uma propriedade de valor com lógica

05:51.540 --> 05:54.777
extra que corre antes que o valor seja devolvido.

05:54.777 --> 05:59.777
Agora, aqui quero ter minha função vinculada onde posso usar

05:59.900 --> 06:03.450
o método original que extraímos aqui em cima

06:03.450 --> 06:07.100
e chamamos de amarrar e amarrar isto.

06:07.100 --> 06:08.590
E agora o legado,

06:08.590 --> 06:11.730
é claro, a que isto se refere aqui?

06:11.730 --> 06:13.720
Tenha em mente que está dentro deste método

06:13.720 --> 06:17.700
getter, então isto se referirá ao que quer que seja responsável por desencadear

06:17.700 --> 06:19.510
este método getter.

06:19.510 --> 06:21.110
E esse é o truque agora,

06:21.110 --> 06:23.700
o método getter será acionado pelo objeto

06:23.700 --> 06:27.200
concreto ao qual ele pertence, então este dentro

06:27.200 --> 06:29.190
do método getter sempre se referirá

06:29.190 --> 06:33.610
ao objeto sobre o qual definimos o getter.

06:33.610 --> 06:36.800
Isto não será sobrescrito pelo addEventListener porque

06:36.800 --> 06:38.965
o getter é como uma camada extra entre

06:38.965 --> 06:41.221
nossa função que está sendo executada

06:41.221 --> 06:44.976
e o objeto ao qual ela pertence e o Event Listener.

06:44.976 --> 06:47.683
Portanto, isto aqui se referirá ao objeto

06:47.683 --> 06:51.610
sobre o qual definimos originalmente o método.

06:51.610 --> 06:54.660
Portanto, podemos ligar isto com segurança para o método

06:54.660 --> 06:57.495
original e garantir que agora isto dentro do método

06:57.495 --> 07:01.170
original também se referirá exatamente ao mesmo objeto.

07:01.170 --> 07:04.300
Agora vou retornar a função vinculada aqui e depois,

07:04.300 --> 07:06.760
fora deste descritor ajustado, retornarei

07:06.760 --> 07:08.910
o descritor ajustado.

07:08.910 --> 07:10.560
Portanto, essa é nossa função de

07:10.560 --> 07:12.420
decorador, devolvendo um novo objeto

07:12.420 --> 07:14.103
descritor e, portanto, esse objeto

07:14.103 --> 07:16.960
descritor substituirá o antigo descritor, que é o que o

07:16.960 --> 07:18.710
TypeScript fará com ele.

07:18.710 --> 07:21.500
O TypeScript substituirá então o antigo descritor de

07:21.500 --> 07:23.215
métodos, portanto a configuração

07:23.215 --> 07:26.390
dos métodos antigos por esta nova configuração aqui, que acrescentou

07:26.390 --> 07:28.513
esta camada extra de getter.

07:29.460 --> 07:33.330
Agora, eu não estou interessado no nome do alvo e do método aqui,

07:33.330 --> 07:37.500
é claro, então, para evitar erros, vou citar este sublinhado e este

07:37.500 --> 07:39.083
aqui sublinhado dois.

07:40.260 --> 07:43.070
Mais uma vez, só para dizer ao TypeScript que não estou interessado

07:43.070 --> 07:45.480
nestes valores, mas preciso aceitá-los.

07:45.480 --> 07:49.800
E agora vamos adicionar autobind para mostrar a mensagem aqui.

07:49.800 --> 07:52.203
Portanto, aqui, eu acrescentarei na Autobind,

07:54.050 --> 07:56.490
e me certificarei de que você remova a ligação

07:56.490 --> 07:59.236
lá em baixo no ouvinte do evento, e salve isto.

07:59.236 --> 08:01.450
E agora vamos dar uma olhada nisso, vamos

08:01.450 --> 08:04.730
clicar em Click Me, e você deve ver This Works!

08:04.730 --> 08:06.678
Se eu recarregar, isto funciona.

08:06.678 --> 08:09.680
Porque isto agora está vinculado corretamente.

08:09.680 --> 08:12.060
E só para verificar que é realmente nosso decorador

08:12.060 --> 08:13.520
que faz a diferença aqui, se

08:13.520 --> 08:15.868
eu removesse a encadernação aqui no meu getter

08:15.868 --> 08:17.850
e o decorador e eu guardasse isso, você

08:17.850 --> 08:20.920
vê que se agora é recarregado e clicamos em Clique em mim,

08:20.920 --> 08:23.626
vemos indefinido novamente.

08:23.626 --> 08:26.320
Portanto, é realmente esta camada extra que faz

08:26.320 --> 08:27.389
seu trabalho aqui que

08:27.389 --> 08:30.430
garante que isto seja sempre ligado corretamente,

08:30.430 --> 08:33.260
não importa como você chame showMessage.

08:33.260 --> 08:35.380
Se o chamamos assim diretamente sobre o

08:35.380 --> 08:38.350
objeto, ele funcionará, se o chamamos aqui assim com um

08:38.350 --> 08:40.760
ouvinte de eventos, ele também funciona.

08:40.760 --> 08:42.260
Então você vê que isto funciona

08:42.260 --> 08:45.070
aqui, que no final vem deste showMessage call e então

08:45.070 --> 08:48.266
você também vê que funciona se eu clicar no botão.

08:48.266 --> 08:49.918
Portanto, este é um bom exemplo

08:49.918 --> 08:52.060
de como você pode utilizar decoradores

08:52.060 --> 08:55.190
para construir uma funcionalidade surpreendente e economizar

08:55.190 --> 08:58.718
o incômodo de ligar manualmente para qualquer lugar.

08:58.718 --> 09:01.883
Em vez disso, basta amarrá-lo assim.
