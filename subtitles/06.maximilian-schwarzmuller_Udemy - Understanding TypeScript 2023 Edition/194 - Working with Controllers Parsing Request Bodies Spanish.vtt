WEBVTT

00:02.170 --> 00:03.860
Instructor: Ahora que hemos registrado algunas rutas,

00:03.860 --> 00:05.630
vamos a añadir algo de lógica para estas rutas.

00:05.630 --> 00:07.730
Para ello añadiré una carpeta de controladores.

00:07.730 --> 00:08.750
Esto no es imprescindible,

00:08.750 --> 00:11.550
pero quiero dividir mi lógica aquí en los controladores

00:11.550 --> 00:13.650
y las rutas en la carpeta de rutas.

00:13.650 --> 00:16.740
Y en los controladores, también añadiré un todos. ts, y que ahora contendrá

00:16.740 --> 00:19.230
las funciones del controlador que queremos

00:19.230 --> 00:21.990
apuntar desde dentro de nuestras rutas.

00:21.990 --> 00:25.120
Así que aquí, necesito una función que voy a exportar, y lo

00:25.120 --> 00:27.220
voy a crear como una función de flecha, que

00:27.220 --> 00:29.170
no es una necesidad, sin embargo, y voy

00:29.170 --> 00:31.290
a llamar a este createTodo, y es una función

00:32.420 --> 00:34.510
que recibirá estos parámetros típicos

00:34.510 --> 00:36.720
que se obtiene en cada función de middleware

00:36.720 --> 00:38.830
en express, una solicitud, una respuesta,

00:38.830 --> 00:41.297
y la siguiente función.

00:41.297 --> 00:44.550
Y acabamos de ver de dónde podemos sacar los tipos.

00:44.550 --> 00:47.190
Podemos importar la función request,

00:47.190 --> 00:50.460
response y next desde express.

00:50.460 --> 00:52.800
Esto nos importa esos tipos.

00:52.800 --> 00:54.910
Así podremos añadirlos aquí.

00:54.910 --> 00:57.230
Ahora, siempre añadiendo todos estos tipos aquí como

00:57.230 --> 00:59.980
lo hicimos en el middleware de manejo de errores, también, puede

00:59.980 --> 01:01.300
ser engorroso, sin embargo.

01:01.300 --> 01:03.750
Funciona, pero puede ser molesto.

01:03.750 --> 01:05.190
Así que hay un atajo.

01:05.190 --> 01:08.220
En lugar de establecer los tipos en todos estos parámetros,

01:08.220 --> 01:11.160
también podemos simplemente decirle a TypeScript

01:11.160 --> 01:14.610
qué tipo de función queremos almacenar en esta constante createTodo,

01:14.610 --> 01:16.260
y entonces podemos simplemente

01:16.260 --> 01:19.530
importar el tipo RequestHandler de express, y entonces establecemos

01:19.530 --> 01:24.340
esto aquí, createTodo, al tipo RequestHandler.

01:24.340 --> 01:28.780
Y ahora ves que TypeScript sabe que aquí tenemos una petición, aquí tenemos una

01:28.780 --> 01:30.560
respuesta, y aquí tenemos esta

01:30.560 --> 01:32.590
siguiente función, porque nuestro

01:32.590 --> 01:35.730
RequestHandler está definido para que se vea así.

01:35.730 --> 01:38.080
Es una función con tres parámetros donde

01:38.080 --> 01:40.160
el primer parámetro es la petición,

01:40.160 --> 01:42.030
el segundo es la respuesta y el

01:42.030 --> 01:44.810
tercero es la siguiente función.

01:44.810 --> 01:47.313
Así que esto puede simplificar esta configuración aquí.

01:48.195 --> 01:49.380
RequestHandler, por supuesto,

01:49.380 --> 01:51.360
siempre está disponible porque instalamos

01:51.360 --> 01:52.570
los tipos para express y por

01:52.570 --> 01:55.270
lo tanto podemos añadir esta importación aquí.

01:55.270 --> 01:57.940
Ten en cuenta que esta importación siempre desaparecerá

01:57.940 --> 01:59.960
una vez que se compile a JavaScript porque

01:59.960 --> 02:02.300
aquí sólo estamos importando un tipo.

02:02.300 --> 02:05.030
Esto no es importar ningún código que se ejecute.

02:05.030 --> 02:06.930
Es sólo importar un tipo.

02:06.930 --> 02:08.650
Y por lo tanto, durante la compilación,

02:08.650 --> 02:11.290
se eliminará porque no añade nada que sería

02:11.290 --> 02:15.860
necesario cuando esto se ejecuta en JavaScript regular.

02:15.860 --> 02:16.693
Con eso, sin embargo,

02:16.693 --> 02:18.900
conseguí la función createTodo, y ahora

02:18.900 --> 02:22.240
por qué no añadimos un array TODOS aquí para gestionar algunos

02:22.240 --> 02:25.530
to dos sólo en memoria, por supuesto.

02:25.530 --> 02:28.310
Esto desaparecerá cada vez que nuestro servidor se reinicie

02:28.310 --> 02:31.460
porque al final es sólo una constante en JavaScript.

02:31.460 --> 02:32.293
Podrías, por supuesto,

02:32.293 --> 02:34.770
imaginarte hablando con una base de datos aquí, también,

02:34.770 --> 02:36.360
pero quiero mantener esto simple

02:36.360 --> 02:38.630
porque se trata de JavaScript y TypeScript y no

02:38.630 --> 02:41.323
tanto de conexiones a bases de datos.

02:42.390 --> 02:43.790
Así que aquí tengo a dos,

02:43.790 --> 02:47.600
y ahora aquí quiero crear un nuevo hacer aquí cuando tenemos

02:47.600 --> 02:49.320
una solicitud entrante, y

02:49.320 --> 02:51.020
que debe ser un nuevo objeto,

02:51.020 --> 02:52.980
y por qué no crear un plano para

02:52.980 --> 02:55.420
este objeto, un modelo.

02:55.420 --> 02:57.640
Así que voy a añadir una carpeta de

02:57.640 --> 02:59.030
modelos, y en esa carpeta

02:59.030 --> 03:04.030
de modelos, voy a añadir un todo. ts y exportar una clase aquí, a la que

03:04.760 --> 03:06.250
llamaré Todo, donde defino

03:06.250 --> 03:08.210
cómo debe ser Todo.

03:08.210 --> 03:10.330
Ahí podemos añadir un constructor

03:10.330 --> 03:13.129
y también usar este atajo de TypeScript donde

03:13.129 --> 03:16.440
podemos añadir un modificador de acceso como public

03:16.440 --> 03:19.360
y luego un nombre de propiedad como ID, que es de

03:19.360 --> 03:21.250
tipo string, digamos, y text,

03:21.250 --> 03:24.050
que también es de tipo string, y entonces TypeScript

03:24.050 --> 03:27.470
añadirá automáticamente campos, propiedades con nombres

03:27.470 --> 03:30.130
iguales, y valores asignados que pasamos

03:30.130 --> 03:32.750
al constructor a esos campos cada vez que

03:32.750 --> 03:37.230
instanciamos esa clase para hacer.

03:37.230 --> 03:38.670
Así que voy a utilizar esta sintaxis

03:38.670 --> 03:40.060
aquí, y usted aprendió acerca de

03:40.060 --> 03:41.810
esta sintaxis antes en el curso ya.

03:41.810 --> 03:44.660
Y ahora en todos. Aquí en el controlador,

03:44.660 --> 03:47.893
podemos por supuesto importar Todo desde,

03:49.020 --> 03:53.403
subiendo un nivel, models/todo, y usar este tipo y clase

03:54.530 --> 03:58.800
ahora aquí en nuestro archivo.

03:58.800 --> 04:01.320
Y es tanto un tipo como una clase porque, bueno, obviamente,

04:01.320 --> 04:02.800
es una clase, y toda clase actúa

04:02.800 --> 04:05.750
automáticamente también como un tipo.

04:05.750 --> 04:08.550
Eso es también lo que has visto a lo largo de este curso.

04:08.550 --> 04:09.750
Así que ahora aquí, podemos

04:09.750 --> 04:11.910
decir en primer lugar que TODOS aquí será

04:11.910 --> 04:13.550
un array de to dos.

04:13.550 --> 04:15.480
Esta anotación extra no está de más para

04:15.480 --> 04:18.590
que tengamos un soporte adecuado una vez que empecemos a añadir

04:18.590 --> 04:21.410
to dos o a trabajar con los to dos de este array.

04:21.410 --> 04:23.610
Y aquí cuando creo un nuevo to do,

04:23.610 --> 04:26.220
ahora lo creo instanciando esta clase,

04:26.220 --> 04:28.370
y tenemos que pasar un ID, y aquí

04:28.370 --> 04:32.030
voy a crear un ID pseudo-único aleatorio con Math

04:32.030 --> 04:34.230
random toString.

04:34.230 --> 04:35.270
Esto no es realmente único, pero

04:35.270 --> 04:36.660
es lo suficientemente bueno aquí.

04:36.660 --> 04:39.170
Y ahora para el valor aquí, allí por supuesto

04:39.170 --> 04:41.670
quiero establecer algún texto, que espero

04:41.670 --> 04:45.530
obtener en mi cuerpo de solicitud entrante.

04:45.530 --> 04:48.823
Así que espero obtener mi texto aquí, básicamente en

04:49.750 --> 04:53.270
el cuerpo de la solicitud. texto, para que luego pueda

04:53.270 --> 04:56.280
establecer el texto como un valor aquí.

04:56.280 --> 04:57.113
Ahora, esto funciona,

04:57.113 --> 04:59.640
pero por favor, vea que esto sólo funciona porque

04:59.640 --> 05:02.320
TypeScript ve que esto es de tipo any.

05:02.320 --> 05:04.420
No sabe que se trata de una cadena.

05:04.420 --> 05:05.510
Y no puede saberlo, porque

05:05.510 --> 05:08.390
¿cómo podría TypeScript saber qué datos formarán parte

05:08.390 --> 05:11.140
de nuestras peticiones entrantes?

05:11.140 --> 05:12.430
No está claro.

05:12.430 --> 05:14.260
Nunca indicamos en ningún sitio

05:14.260 --> 05:17.620
lo que habrá dentro de las solicitudes que recibimos.

05:17.620 --> 05:19.270
Ahora, ¿cómo podemos mejorar esto?

05:19.270 --> 05:21.780
Bueno, podemos usar el encasillamiento, por ejemplo.

05:21.780 --> 05:23.660
El typecasting es siempre una gran

05:23.660 --> 05:26.090
solución si se conoce un tipo específico, pero

05:26.090 --> 05:27.360
TypeScript no.

05:27.360 --> 05:30.440
Así que aquí, en el cuerpo de la solicitud, antes de acceder al texto, podemos

05:30.440 --> 05:32.650
encasillar esto para ser un objeto donde tenemos una

05:32.650 --> 05:34.900
propiedad de texto, que es una cadena.

05:34.900 --> 05:36.920
Como estamos construyendo esta aplicación,

05:36.920 --> 05:40.320
sabemos lo que esperamos que haya en nuestras solicitudes entrantes.

05:40.320 --> 05:42.750
Así que como sabemos que habrá una propiedad de texto en el

05:42.750 --> 05:44.166
cuerpo de la solicitud entrante,

05:44.166 --> 05:46.630
podemos lanzarla para que sea un objeto de este tipo.

05:46.630 --> 05:51.480
Y ahora aquí tenemos un soporte adecuado para TypeScript y también para el IDE.

05:51.480 --> 05:53.560
Así que con eso, añadimos una nueva tarea.

05:53.560 --> 05:55.470
Ahora podemos llegar a TODOS

05:55.470 --> 05:58.280
y empujar el nuevo hacer en esta matriz.

05:58.280 --> 05:59.330
Y de nuevo, esto, por

05:59.330 --> 06:01.060
supuesto, sólo lo almacenará aquí

06:01.060 --> 06:02.750
como constante y por lo tanto sólo

06:02.750 --> 06:05.650
en la memoria, porque el trabajo con una base de datos no

06:05.650 --> 06:08.880
está realmente relacionado directamente con node o TypeScript,

06:08.880 --> 06:11.170
pero, bueno, con la base de datos.

06:11.170 --> 06:14.140
Así que con eso, tenemos la función de crear Todo aquí.

06:14.140 --> 06:16.400
Ahora vayamos a las rutas de los to do's

06:16.400 --> 06:19.070
e importemos esta función del controlador.

06:19.070 --> 06:22.030
Así que importar de la carpeta de controladores

06:22.030 --> 06:24.000
del archivo todos allí, e importar

06:24.000 --> 06:26.660
la función crear Todo y apuntar a esta

06:26.660 --> 06:30.100
función aquí en la ruta de correos para que cualquier

06:30.100 --> 06:38.390
solicitud que se dirige a slash todos slash nada llega a la función createTodo.

06:38.390 --> 06:39.580
No lo ejecutes aquí.

06:39.580 --> 06:40.650
Solo hay que señalarlo.

06:40.650 --> 06:43.890
Se ejecutará para usted por el nodo y expresar en su servidor

06:43.890 --> 06:45.883
web en ejecución más tarde.

06:46.880 --> 06:49.630
Así que ahora tenemos esta función aquí.

06:49.630 --> 06:50.900
Pero no hemos terminado.

06:50.900 --> 06:52.290
En el controlador, todos

06:52.290 --> 06:54.360
deberíamos devolver una respuesta.

06:54.360 --> 06:56.720
así que aquí podemos enviar una respuesta,

06:56.720 --> 06:59.420
por ejemplo, en formato JSON con el método

06:59.420 --> 07:02.300
JSON donde decimos mensaje creado el todo o lo

07:02.300 --> 07:04.040
que quieras, y tenemos la clave

07:04.040 --> 07:07.770
createdTodo, tal vez, donde reenviamos el nuevo hacer que

07:07.770 --> 07:10.520
se añadió en el lado del servidor para que en

07:10.520 --> 07:12.660
el cliente, también podríamos utilizar

07:12.660 --> 07:14.490
eso.

07:14.490 --> 07:17.750
Y tal vez también establecer un código de estado de 201

07:17.750 --> 07:19.700
aquí para indicar que tuvimos éxito

07:19.700 --> 07:21.793
y que un recurso fue creado.

07:22.680 --> 07:24.640
Ahora sólo tenemos que asegurarnos de

07:24.640 --> 07:28.500
que el cuerpo que estamos tratando de extraer aquí realmente existe.

07:28.500 --> 07:29.770
Y para los datos y la app. nes, tenemos

07:29.770 --> 07:33.130
que analizar los cuerpos de las solicitudes entrantes.

07:33.130 --> 07:37.620
Para ello, podemos importar desde el paquete body-parser

07:37.620 --> 07:39.220
que también instalamos,

07:39.220 --> 07:41.380
y desde ese paquete, podemos

07:41.380 --> 07:46.380
importar el método JSON así.

07:46.410 --> 07:49.170
Y entonces aquí se puede registrar este ejecutado

07:49.170 --> 07:51.310
como un middleware.

07:51.310 --> 07:54.480
Se trata de un middleware proporcionado por un paquete

07:54.480 --> 07:58.130
de terceros que analizará los cuerpos de todas las solicitudes

07:58.130 --> 08:01.570
entrantes y extraerá cualquier dato JSON que encuentre allí

08:01.570 --> 08:05.990
para luego rellenar la clave del cuerpo de este objeto de solicitud con esos

08:05.990 --> 08:07.970
datos JSON analizados.

08:07.970 --> 08:10.290
Eso es lo que hace este middleware

08:10.290 --> 08:12.503
JSON del paquete body-parser.

08:13.890 --> 08:16.520
Y con eso, deberíamos tener un servidor capaz

08:16.520 --> 08:18.230
de crear nuevos to dos.

08:18.230 --> 08:22.210
Guarde todos los archivos y asegúrese de que se recompile sin errores.

08:22.210 --> 08:26.150
Asegúrate de que nodemon sigue sirviendo la aplicación. archivo js.

08:26.150 --> 08:28.560
Y ahora tenemos que enviar una solicitud de correo.

08:28.560 --> 08:31.150
Y con el navegador no podemos hacerlo, pero podemos

08:31.150 --> 08:34.260
utilizar una herramienta para ello, Postman.

08:34.260 --> 08:35.600
Sólo tienes que buscarlo y luego

08:35.600 --> 08:38.160
instalar la aplicación Postman en tu sistema.

08:38.160 --> 08:39.283
Su uso es gratuito.

08:40.440 --> 08:41.570
Una vez que lo tengas instalado,

08:41.570 --> 08:43.390
puedes iniciarlo y deberías ver una pantalla

08:43.390 --> 08:44.440
parecida a esta.

08:44.440 --> 08:46.460
Si ves una superposición modal, puedes

08:46.460 --> 08:48.010
simplemente cerrarla.

08:48.010 --> 08:50.240
Y aquí puedes crear una nueva solicitud haciendo

08:50.240 --> 08:51.740
clic en ese plus, eligiendo el

08:51.740 --> 08:53.040
tipo de solicitud, en este

08:53.040 --> 08:55.100
caso, una solicitud de puesto, introduciendo

08:55.100 --> 08:56.450
la URL.

08:56.450 --> 08:58.820
Aquí es localhost 3000, 3000 porque

08:58.820 --> 09:01.660
ese es el puerto que elegí aquí.

09:01.660 --> 09:03.100
Y luego tenemos que enviar

09:03.100 --> 09:06.320
la solicitud a slash todos slash nada.

09:06.320 --> 09:10.000
Así que aquí a rajar todos a rajar nada.

09:10.000 --> 09:12.120
Queremos adjuntar un cuerpo a la solicitud,

09:12.120 --> 09:15.440
y eso debería ser un cuerpo JSON crudo aquí para enviar algunos

09:15.440 --> 09:17.010
datos JSON.

09:17.010 --> 09:19.480
¿Y ahora qué tenemos que enviar aquí?

09:19.480 --> 09:21.840
Bueno, lo que extraemos en la función de middleware,

09:21.840 --> 09:22.880
por lo que en este caso,

09:22.880 --> 09:24.570
debemos tener una propiedad de texto

09:24.570 --> 09:27.410
como parte de nuestros datos JSON que estamos enviando.

09:27.410 --> 09:29.610
Así que aquí, vamos a añadir el texto como un

09:29.610 --> 09:31.070
nombre y luego cualquier texto

09:31.070 --> 09:33.230
de su elección, como terminar el curso.

09:33.230 --> 09:36.960
Y si ahora haces clic en enviar, envía la solicitud, y aquí está

09:36.960 --> 09:38.990
la respuesta, y esto se ve bien.

09:38.990 --> 09:40.670
Tenemos la creación de un hacer de nuevo.

09:40.670 --> 09:43.600
Vemos el ID que se generó y el texto.

09:43.600 --> 09:45.870
Así que nuestro backend claramente funciona aquí.

09:45.870 --> 09:47.690
Y lo escribimos todo con TypeScript,

09:47.690 --> 09:49.880
pero lo servimos como JavaScript normal.

09:49.880 --> 09:51.183
Ese es todo el truco.
