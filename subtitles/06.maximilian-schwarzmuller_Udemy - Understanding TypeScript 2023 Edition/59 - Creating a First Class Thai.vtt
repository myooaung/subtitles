WEBVTT

00:02.270 --> 00:03.103
ผู้สอน: สำหรับสิ่งนี้ ฉันมีโครงการเริ่มต้นเล็กๆ

00:03.103 --> 00:04.620
น้อยๆ สำหรับคุณ

00:04.620 --> 00:05.610
คุณพบว่ามันแนบ

00:05.610 --> 00:08.810
เป็นโครงการเริ่มต้นเดียวกันกับที่เราใช้ซ้ำแล้วซ้ำอีก

00:08.810 --> 00:12.080
คุณเริ่มเซิร์ฟเวอร์การพัฒนาด้วย npm-start

00:12.080 --> 00:15.510
จากนั้นฉันเริ่มการคอมไพล์ TypeScript ในโหมดเฝ้าดูด้วย

00:15.510 --> 00:19.830
tsc-w ในเทอร์มินัลที่แยกต่างหาก

00:19.830 --> 00:22.890
ในเทอร์มินัลในตัวของฉัน ฉันมีแท็บสองแท็บ

00:22.890 --> 00:32.820
หนึ่งเดียวกับเซิร์ฟเวอร์การพัฒนาซึ่งคุณควรติดตามและทำงานเพื่อให้คอยดูการเปลี่ยนแปลงและโหลดหน้าซ้ำและทำให้เซิร์ฟเวอร์ทำงานและทำงานต่อไปและอีกแท็บหนึ่งที่ฉันใช้ตัวตรวจสอบการรวบรวม

00:32.820 --> 00:35.530
TypeScript

00:35.530 --> 00:39.400
ตอนนี้เราสามารถทำงานในแอพได้แล้ว

00:39.400 --> 00:39.400
ts

00:39.400 --> 00:41.520
ที่ว่างเปล่าตอนนี้และเริ่มเขียนโค้ดบางส่วนที่นั่น

00:41.520 --> 00:45.603
และฉันต้องการเริ่มทันทีโดยกำหนดคลาสที่เราสามารถใช้ได้

00:46.490 --> 00:49.420
เราทำสิ่งนี้โดยใช้คำหลัก class แบบนั้น

00:49.420 --> 00:51.340
ตามด้วยชื่อของคลาส และสมมติว่าเรากำลังสร้างแอป

00:51.340 --> 01:04.100
เว็บแอปพลิเคชัน ส่วนติดต่อผู้ใช้สำหรับเครื่องมือเว็บที่ช่วยให้เราสามารถจัดการแผนกต่างๆ ของเราได้ อาจมีในบริษัทของเรา

01:04.100 --> 01:08.440
บางทีเรากำลังสร้างเครื่องมือภายในบริษัทอะไรสักอย่าง

01:08.440 --> 01:11.290
และเราจำเป็นต้องมีหลายแผนกที่นั่น

01:11.290 --> 01:16.320
ตอนนี้เราสามารถใช้วัตถุเพื่อจัดการข้อมูลสำหรับแผนกต่างๆ

01:16.320 --> 01:19.960
และเราอาจเพิ่มวิธีการที่นั่นให้กับแต่ละวัตถุ

01:19.960 --> 01:24.020
เพื่อให้เราสามารถแสดงข้อมูลของแผนกนั้นบนหน้าจอ

01:24.020 --> 01:26.980
และทำให้การสร้างวัตถุแผนกต่างๆ เหล่านี้ง่ายขึ้น

01:26.980 --> 01:33.000
ซึ่งทั้งหมดจะดู เหมือนกันคือการสร้างแผนกชั้น

01:33.000 --> 01:35.690
เราจึงสามารถตั้งชื่อคลาสนี้ว่า Department

01:35.690 --> 01:36.830
ชื่อนี้ขึ้นอยู่กับคุณโดยสิ้นเชิง

01:36.830 --> 01:42.720
การประชุมคือการเริ่มต้นด้วยตัวพิมพ์ใหญ่เพื่อให้ชัดเจนว่านี่คือคลาส

01:42.720 --> 01:45.670
ตอนนี้ถ้าคุณเคยชินกับการพัฒนา JavaScript

01:45.670 --> 01:52.140
มานานแล้ว คุณอาจรู้แนวคิดของฟังก์ชันคอนสตรัคเตอร์และคลาสในตอนท้ายคือน้ำตาลวากยสัมพันธ์ที่คุณพูดได้

01:52.140 --> 01:53.920
แต่เราจะเห็นว่าเมื่อเราคอมไพล์โค้ดของเราแล้ว

01:53.920 --> 01:56.980
.

01:56.980 --> 01:59.220
ที่นี่เรามีแผนกชั้นเรียนของเรา

01:59.220 --> 02:02.080
และตอนนี้ในนั้นเราอาจมีคุณสมบัติชื่อ

02:02.080 --> 02:04.010
คุณสามารถเพิ่มแบบนี้ได้ โดยไม่ต้องมี

02:04.010 --> 02:07.290
let หรือ const ข้างหน้าแบบนี้ โดยตรงในชั้นเรียน

02:07.290 --> 02:12.550
และแน่นอนว่าคุณสามารถกำหนดประเภทให้กับสิ่งนี้ได้

02:12.550 --> 02:14.690
คุณทำได้โดยเพิ่มเครื่องหมายทวิภาคที่นี่

02:14.690 --> 02:17.920
แล้วตามด้วยประเภทสำหรับสตริงตัวอย่าง และที่สำคัญ

02:17.920 --> 02:21.150
สิ่งนี้อาจดูเหมือนวัตถุ แต่ไม่ใช่วัตถุ

02:21.150 --> 02:27.000
ในออบเจกต์ คุณใช้คู่คีย์-ค่ากับโคลอนเพื่อให้มีชื่อคีย์แล้วตามด้วยค่าของคีย์

02:27.000 --> 02:28.810
นี่ไม่ใช่กรณี

02:28.810 --> 02:32.250
นี่คือฟิลด์ที่เรียกว่าคลาส

02:32.250 --> 02:34.680
คุณสร้างคลาสด้วยวงเล็บปีกกาเช่นกัน

02:34.680 --> 02:43.530
แต่นี่ไม่ใช่คู่คีย์-ค่า นี่เป็นเพียงการกำหนดชื่อของคีย์ที่คุณจะมีในออบเจกต์ซึ่งคุณจะสร้างตามคลาสและคุณกำหนดประเภทค่าที่คีย์นั้น

02:43.530 --> 02:48.530
จะถือในที่สุด

02:48.550 --> 02:55.920
คุณยังสามารถตั้งค่าเริ่มต้นที่นี่ด้วย = 'DEFAULT' แต่คุณไม่จำเป็นต้องทำเช่นนั้น

02:55.920 --> 02:59.050
อีกสิ่งหนึ่งที่คุณมักมีในชั้นเรียนคือฟังก์ชันพิเศษในนั้น

02:59.050 --> 03:03.410
ซึ่งเรียกว่าเมธอด

03:03.410 --> 03:09.410
ฟังก์ชันในวัตถุเรียกง่ายๆ ว่าเมธอด ซึ่งเป็นเมธอดคอนสตรัคเตอร์

03:09.410 --> 03:12.500
เราสามารถเติมแบบนี้ได้ และนี่คือคำสงวน

03:12.500 --> 03:16.170
Constructor เป็นคีย์เวิร์ดสงวนที่เข้าใจโดย TypeScript

03:16.170 --> 03:22.480
และ JavaScript สมัยใหม่เช่นกัน และนี่คือฟังก์ชันที่เชื่อมโยงกับคลาสนี้โดยพื้นฐานแล้วเชื่อมโยงกับอ็อบเจ็กต์ใดๆ

03:22.480 --> 03:29.640
ที่คุณสร้างขึ้นโดยอิงจากคลาสที่เรียกใช้งานเมื่ออ็อบเจกต์นั้นถูกสร้างขึ้น

03:29.640 --> 03:35.700
ดังนั้นสิ่งนี้ทำให้คุณสามารถเริ่มต้นงานสำหรับวัตถุที่คุณกำลังสร้างได้

03:35.700 --> 03:38.280
ตอนนี้คุณสามารถยอมรับข้อโต้แย้งได้

03:38.280 --> 03:41.910
ตั้งชื่อมันว่า n ซึ่งอาจเป็นประเภทสตริงด้วย จากนั้นคุณต้องการเก็บไว้ในช่องชื่อของคุณที่นี่

03:41.910 --> 03:51.200
หรือคุณสามารถทำได้โดยเอื้อมมือไปตั้งชื่อด้วยคีย์เวิร์ดนี้และเก็บ n ไว้ในนั้น

03:51.200 --> 03:58.630
สิ่งที่ทำคือกำหนดค่าของฟิลด์ชื่อ หรือเรียกอีกอย่างว่าคุณสมบัติสำหรับคุณสมบัติของชื่อ

03:58.630 --> 04:04.550
เป็นค่าที่คุณได้รับใน n เมื่อสร้างวัตถุแผนก

04:04.550 --> 04:07.030
ตอนนี้เราจะสร้างวัตถุแผนกได้อย่างไร

04:07.030 --> 04:08.890
ไม่มีอะไรง่ายกว่านั้น

04:08.890 --> 04:13.110
ภายนอกคลาสที่คุณสร้างขึ้นโดยใช้คีย์เวิร์ดใหม่ซึ่งสร้างขึ้นใน

04:13.110 --> 04:22.440
TypeScript และ JavaScript แล้วคุณก็ทำซ้ำชื่อของคลาส จากนั้นคุณเพิ่มวงเล็บและสิ่งนี้จะสร้างวัตถุแผนกใหม่ แต่ตัวสร้างจะถูกเรียก

04:22.440 --> 04:33.440
ณ จุดนี้ เมื่อคุณเรียกใช้คลาสนี้ด้วยคีย์เวิร์ดใหม่และตัวสร้างที่นี่ใช้อาร์กิวเมนต์สตริง

04:33.440 --> 04:35.600
ตอนนี้คุณส่งข้อโต้แย้งคอนสตรัคเตอร์ไปยังแผนกนี้

04:35.600 --> 04:39.800
เรียกที่นี่ ระหว่างวงเล็บเหล่านี้

04:39.800 --> 04:41.640
ตรงนี้เราตั้งชื่อการบัญชีได้

04:41.640 --> 04:44.730
เพราะบางทีเรากำลังสร้างแผนกบัญชีที่นี่

04:44.730 --> 04:46.100
ตอนนี้จะสร้างวัตถุ

04:46.100 --> 04:49.800
JavaScript ใหม่ตามพิมพ์เขียวนี้

04:49.800 --> 04:53.910
ตอนนี้เราสามารถจัดเก็บค่านี้ในค่าคงที่ ตัวอย่างเช่น

04:53.910 --> 04:58.010
คอนโซล บันทึก. บัญชีที่นี่เพื่อดูว่าเราได้อะไร

04:58.010 --> 05:03.780
ถ้าตอนนี้เราบันทึกแล้วกลับไปที่หน้าของเราที่นี่และดูคอนโซลการพัฒนาที่นี่ในเครื่องมือ

05:03.780 --> 05:07.930
def เราควรคัดค้านแผนกของเราที่นี่

05:07.930 --> 05:10.000
มันเป็นวัตถุ JavaScript ทั่วไป

05:10.000 --> 05:13.770
แค่มีประเภทแผนกนี้ติดมาด้วย คุณก็พูดได้ และท้ายที่สุด

05:13.770 --> 05:15.290
มันเป็นวัตถุที่มีคู่คีย์-ค่าเดียว

05:15.290 --> 05:20.270
โดยที่คีย์คือชื่อเพราะนั่นคือสิ่งที่เรากำหนดไว้ที่นั่น และค่าคือ

05:20.270 --> 05:23.110
การบัญชี

05:23.110 --> 05:29.560
เรามีค่าการบัญชีที่นี่เพราะเราส่งค่านี้เป็นอาร์กิวเมนต์ไปยังตัวสร้าง

05:29.560 --> 05:31.770
ที่นั่นเรากำลังรับสตริงดังกล่าว

05:31.770 --> 05:41.890
คืนค่าในฟิลด์นี้ และฟิลด์ในตอนท้ายเพิ่งแปลเป็นคุณสมบัติ วัตถุตามคลาสจะมีหลังจากนั้น

05:41.890 --> 05:44.480
นี่คือวิธีที่เราสามารถสร้างคลาสง่ายๆ

05:44.480 --> 05:46.570
และแนวคิดทั่วไปคืออะไร

05:46.570 --> 05:50.143
ทีนี้มาดูกันว่าเราได้อะไรจาก JavaScript
