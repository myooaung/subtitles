WEBVTT

00:02.130 --> 00:03.630
ナレーター：そこで､ 私たちはLodashを見てみました｡

00:03.630 --> 00:08.360
LodashはバニラJavaScriptパッケージで､ いくつかの翻訳をインストールする必要がありました｡

00:08.360 --> 00:13.530
そして､ バニラJavaScriptでも動作しているclass-transformerを見てもらったが､

00:13.530 --> 00:17.328
TypeScriptでも特にうまく動作している｡

00:17.328 --> 00:20.330
では､ class-validatorについて見てみましょう｡ 

00:20.330 --> 00:24.540
これはもう､ 本当にTypeScriptを活用したパッケージですね｡ 

00:24.540 --> 00:28.300
これはTypeScriptのデコレータの概念をもとに構築されたもので､

00:28.300 --> 00:34.330
まったく新しい操作方法､ 少なくともほとんど新しい操作方法を提供してくれるものです｡

00:34.330 --> 00:38.230
このコースで私のデコレーター・モジュールをご覧いただいた方は､

00:38.230 --> 00:44.150
この講義で実際に何かをご覧になると思います｡

00:44.150 --> 00:47.100
しかし､ このサードパーティライブラリを使えば､

00:47.100 --> 00:51.193
ゼロから車輪を作り直す必要はありません｡

00:51.193 --> 00:53.320
また､ このライブラリは､ 間違いなく､

00:53.320 --> 00:57.830
デコレータのモジュールでの解決策よりも少し精巧です｡

00:57.830 --> 01:00.026
バリデーションの話です｡ 

01:00.026 --> 01:02.870
これは､ クラスの内部にデコレータの助けを借りて検証ルールを追加し､

01:02.870 --> 01:15.610
そのようなクラスをインスタンス化するたびに､ デコレータの助けを借りて そこに設定したルールに対して実際に検証を行うことができるようにするためのパッケージです｡

01:15.610 --> 01:18.960
それでは､ このパッケージをインポートして始めましょう｡ 

01:18.960 --> 01:23.130
そこで､ npm install class-validator --save

01:23.130 --> 01:26.130
とすれば､ 以後はすぐにでも始められる｡

01:26.130 --> 01:29.220
webpack-dev-server を再起動し､

01:29.220 --> 01:30.600
このパッケージを使用するために､

01:30.600 --> 01:37.490
モデルや特定のプロパティを検証するクラスにいくつかのデコレータを追加する必要があります｡

01:37.490 --> 01:43.240
そこで､ 私の場合､ 製品モデルにおいて､ class-validatorから何かをインポートすることにします｡

01:43.240 --> 01:45.110
また､ このコースでデコレーター・モジュールを学んだ方は､

01:45.110 --> 01:52.870
このパッケージを使わずに､ すでにゼロから作り上げたコンセプトでもあるのです｡

01:52.870 --> 01:56.270
しかし､ もちろん非常に素朴で基本的なバージョンで構築しました｡

01:56.270 --> 01:57.840
このパッケージでは､ 自分たちで構築する必要はなく､

01:57.840 --> 02:01.200
また､ より精巧にできています｡

02:01.200 --> 02:02.770
さて､ class-validatorから､

02:02.770 --> 02:04.820
あるデコレーターをインポートすることができます｡

02:04.820 --> 02:08.630
例えば､ IsNotEmpty､ また､

02:08.630 --> 02:11.410
IsNumberなど｡

02:11.410 --> 02:13.500
IsPositiveをインポートすることも可能です｡ 

02:15.940 --> 02:18.940
これで､ 検証したいプロパティに追加することができます｡ 

02:18.940 --> 02:24.220
たとえば､ ここではタイトルにこのようにIsNotEmptyをデコレーターとして追加します｡

02:24.220 --> 02:26.390
これらはすべてデコレーターファクトリーなので､

02:26.390 --> 02:29.610
常に実行する必要があります｡

02:29.610 --> 02:37.380
また､ ここでもIsNumberとIsPositive｡

02:37.380 --> 02:38.763
それを実行しよう｡ 

02:40.250 --> 02:44.730
さて､ ここでデコレーターを使うには､ tsconfigにもアクセスする必要があります｡

02:44.730 --> 02:44.730
js

02:44.730 --> 02:49.550
ファイルで､ 実験的なデコレータを有効にすることを確認してください｡

02:49.550 --> 02:55.040
その後､ これを保存して､ 今度はこの辺りも消えるはずです｡

02:55.040 --> 03:00.840
また､ 新しいtsconfigを取り込むために､ 開発サーバーを再起動する必要があります｡

03:00.840 --> 03:00.840
jsの変換を行います｡ 

03:00.840 --> 03:04.768
そこで､ これらのルール､ つまりバリデーションルールをここに追加しました｡

03:04.768 --> 03:07.710
基本的にタイトルは空文字列であってはならないし､

03:07.710 --> 03:11.830
数字は正の数であるべきだと言っているのです｡

03:11.830 --> 03:13.980
ここでnewProdと呼び､ タイトルに空の文字列､

03:13.980 --> 03:25.210
そしてマイナス5を渡すと､ 新しい商品を作ることができます｡

03:25.210 --> 03:25.210
99を数字で表すと

03:25.210 --> 03:26.700
もし私がその後コンソール｡  log newProd,

03:27.576 --> 03:29.920
getInformation, and execute

03:29.920 --> 03:34.830
this, let's see where it works.

03:34.830 --> 03:35.683
よし､ 保存しておけ｡ 

03:37.840 --> 03:40.040
ふふ､ うまくいったね｡ 

03:40.040 --> 03:42.330
まあ､ まだ完全にそうなっているわけではないんですけどね｡ 

03:42.330 --> 03:46.470
私たちデコレーターと一緒に､ ルールを決めていきました｡ 

03:46.470 --> 03:49.560
しかし､ これらの装飾品単体では､ 大したことはできません｡ 

03:49.560 --> 03:52.880
代わりに､ class-validator から validator

03:52.880 --> 03:56.190
メソッドもインポートする必要があります｡

03:56.190 --> 03:59.840
このパッケージからvalidateをインポートし､

03:59.840 --> 04:05.750
デコレータを追加したクラスの具象インスタンスでこれを実行する必要があります｡

04:05.750 --> 04:07.300
この場合､ validateを実行し､

04:07.300 --> 04:12.020
newProdを渡すことができます｡

04:12.020 --> 04:19.150
そしてvalidateは､ 実際にバリデーションエラーが発生する可能性のあるプロミスを返します｡

04:19.150 --> 04:23.080
ここで､ イージング機能であれば､ もちろんシングルウェイトを使うこともできますので､

04:23.080 --> 04:25.680
追加します｡

04:25.680 --> 04:30.093
そして､ このvalidate関数が見つけたエラーを返します｡

04:30.980 --> 04:31.813
重要なのは､

04:31.813 --> 04:34.950
たとえエラーがあっても必ず

04:34.950 --> 04:41.120
then ブロックに入るということです｡

04:41.120 --> 04:48.400
ここで､ 配列であるerrorsのドット長が0より大きいかどうかをチェックすることができるようになりました｡

04:48.400 --> 04:51.300
つまり､ バリデーションエラーが発生しているのです｡ 

04:51.300 --> 04:52.910
この場合､ 検証エラーのログを記録し､

04:53.750 --> 04:59.200
見つかったエラーを出力することができます｡

04:59.200 --> 05:01.820
だからコンソール｡  はエラーをログに残し､ それ以外はここでの私の場合､

05:01.820 --> 05:05.290
情報をログに残すことにしています｡

05:05.290 --> 05:06.580
もちろん､ ここで何をしたいかは､

05:06.580 --> 05:09.100
構築するアプリケーションに依存します｡

05:09.100 --> 05:13.790
この場合､ エラーが発生したらユーザーにアラートを表示するようにするとよいでしょう｡

05:13.790 --> 05:16.520
入力をリセットするのもいいかもしれませんね｡

05:16.520 --> 05:19.690
ここでは､ コンソールに何かログを出力してみます｡ 

05:19.690 --> 05:22.080
これを保存すると､ バリデーションエラーが表示され､

05:22.080 --> 05:27.830
見つかったエラーの配列が表示されます｡

05:27.830 --> 05:34.770
例えば､ 最初のエラーは､ titleプロパティが空であってはいけないというものです｡

05:34.770 --> 05:41.150
そして､ 2つ目の間違いは､ 価格の特性で､ 正の数でなければならないということです｡

05:41.150 --> 05:50.170
そして､ このデコレータベースのアプローチで､ あなたのプロジェクトにかなり強力な検証機能を簡単に追加することができるのです｡

05:50.170 --> 05:54.530
このコースで以前に行ったこと､ そしてデコレーターモジュールに関連していますが､

05:54.530 --> 05:56.062
何度も述べたように､ 多くの組み込みルールがあり､

05:56.062 --> 06:06.350
より精巧です｡ もちろん､ このパッケージのドキュメントですべてを学ぶことができ､ 車輪の再発明は必要ありません｡

06:06.350 --> 06:10.930
Class-validatorパッケージは､ TypeScriptで大きなプロジェクトを作るなら､

06:10.930 --> 06:14.693
ぜひ知っておいてほしい強力なパッケージです｡
