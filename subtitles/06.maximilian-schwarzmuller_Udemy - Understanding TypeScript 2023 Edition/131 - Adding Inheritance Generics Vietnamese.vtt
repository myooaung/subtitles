WEBVTT

00:02.410 --> 00:04.290
Người hướng dẫn: Đã đến lúc cho

00:04.290 --> 00:06.370
một số kế thừa và cho một lớp cơ sở.

00:06.370 --> 00:09.189
Tôi muốn thêm một lớp cơ sở, về cơ bản có templateElement,

00:09.189 --> 00:12.090
hostElement, một phần tử trong đó, lớp này thực hiện

00:12.090 --> 00:15.430
công việc chọn các phần tử trong dom, lớp này có phương thức

00:15.430 --> 00:16.810
đính kèm mà chúng ta luôn

00:16.810 --> 00:18.520
cần, v.v.

00:18.520 --> 00:22.540
Vì vậy, về cơ bản, cái nào quản lý tất cả các chức năng được chia

00:22.540 --> 00:26.630
sẻ này, mà các lớp của chúng tôi thực sự hiển thị thứ gì đó cho

00:26.630 --> 00:28.220
dom có điểm chung.

00:28.220 --> 00:30.880
Vì vậy, phía trên ProjectInput

00:30.880 --> 00:35.650
của tôi và cả lớp ProjectList, vì vậy về cơ bản ở đây, tôi

00:35.650 --> 00:38.250
sẽ thêm Lớp cơ sở thành phần.

00:38.250 --> 00:41.540
Bây giờ, tên gọi là tùy bạn, nhưng tôi sẽ đặt tên nó là Component, vì bạn

00:41.540 --> 00:44.090
có thể biết thuật ngữ này từ React hoặc Angular, nếu bạn

00:44.090 --> 00:45.870
làm việc với nó và ngay cả khi bạn không

00:45.870 --> 00:47.590
làm việc với nó, bạn có thể nghĩ về những

00:47.590 --> 00:49.873
các lớp như giao diện người dùng, các thành phần

00:50.770 --> 00:53.950
giao diện người dùng mà bạn hiển thị trên màn hình.

00:53.950 --> 00:57.950
Và mọi thành phần cuối cùng đều là một đối tượng có thể kết xuất,

00:57.950 --> 00:59.970
có một số chức năng cho phép chúng

00:59.970 --> 01:01.370
ta kết xuất nó.

01:01.370 --> 01:05.260
Và sau đó, các phiên bản cụ thể hoặc các lớp được kế

01:05.260 --> 01:10.260
thừa, bổ sung chức năng bổ sung mà thành phần cụ thể này cần.

01:10.300 --> 01:14.370
Vì vậy, những gì đi vào lớp Thành phần chung sau đó?

01:14.370 --> 01:17.590
Vâng, tôi sẽ nói chắc chắn ba yếu tố này.

01:17.590 --> 01:21.390
templateElement, hostElement và phần tử.

01:21.390 --> 01:23.590
Bây giờ, chúng ta có một vấn đề ở đây, tuy

01:23.590 --> 01:25.470
nhiên, liên quan đến các loại.

01:25.470 --> 01:28.320
templateElement sẽ luôn là một HTMLTemplateElement,

01:29.160 --> 01:31.980
nhưng hostElement không nhất thiết phải luôn là một div,

01:31.980 --> 01:35.410
chẳng hạn như khi chúng ta thêm một lớp hạng mục dự án, chúng ta sẽ kết

01:35.410 --> 01:37.160
xuất nó trong một ProjectList chứ

01:37.160 --> 01:40.550
không phải trực tiếp ngay cả div gốc của chúng ta tại đây , vì vậy đó không

01:40.550 --> 01:42.360
phải lúc nào cũng là div.

01:42.360 --> 01:45.220
Và cái này ở đây, nó luôn luôn là một HTMLElement, chúng

01:45.220 --> 01:47.040
ta chắc chắn có thể giải quyết vấn đề

01:47.040 --> 01:50.540
đó, nhưng, giống như trong trường hợp của lớp ProjectInput, chúng

01:50.540 --> 01:52.560
ta thực sự biết rằng nó ở một dạng cụ thể

01:52.560 --> 01:55.230
nào đó của nó, đó là một HTMLFormElement.

01:55.230 --> 01:57.540
Vì vậy, chúng tôi sẽ mất thông tin

01:57.540 --> 02:00.320
bổ sung này, nếu chúng tôi hạn chế chỉ

02:00.320 --> 02:02.130
có một HTMLElement ở đó mà

02:02.130 --> 02:05.220
không lưu trữ thông tin cụ thể hơn.

02:05.220 --> 02:07.690
Vì vậy, làm thế nào chúng ta có thể làm việc xung quanh đó?

02:07.690 --> 02:10.050
Chà, bằng cách không chỉ sử dụng tính

02:10.050 --> 02:12.920
kế thừa, mà bằng cách tạo một lớp chung ở đây,

02:12.920 --> 02:15.230
khi chúng ta kế thừa từ nó, chúng ta

02:15.230 --> 02:17.680
có thể đặt các kiểu cụ thể.

02:17.680 --> 02:20.940
Để làm được điều đó, chúng tôi thêm dấu ngoặc nhọn sau tên lớp

02:20.940 --> 02:23.550
và sau đó, hai mã định danh mà chúng tôi chọn, chẳng

02:23.550 --> 02:26.690
hạn như T và U, đây sẽ là những lựa chọn phổ biến.

02:26.690 --> 02:30.110
Và bây giờ, chúng ta cũng có thể thêm một số ràng buộc

02:30.110 --> 02:34.820
ở đây và nói rằng T chắc chắn sẽ là một loại HTMLElement nào đó.

02:34.820 --> 02:36.770
Nó có thể chỉ là một HTMLElement

02:36.770 --> 02:38.970
hoặc một phiên bản cụ thể hơn của nó.

02:38.970 --> 02:41.870
Và điều đó cũng đúng với U.

02:41.870 --> 02:44.780
Và ở đây, chúng ta biết hostElement sẽ thuộc loại

02:44.780 --> 02:46.690
T và phần tử sẽ thuộc loại U.

02:46.690 --> 02:48.660
Và bây giờ, bất cứ khi nào chúng ta kế thừa từ lớp

02:48.660 --> 02:50.970
này, chúng ta có thể chỉ định các kiểu cụ thể để chúng

02:50.970 --> 02:52.930
ta có thể làm việc với các kiểu khác nhau ở những

02:52.930 --> 02:54.780
nơi khác nhau mà chúng ta kế thừa.

02:56.050 --> 02:58.053
Bây giờ, hãy thêm một hàm tạo ở đây.

02:58.910 --> 03:01.080
Trong hàm tạo đó, chúng ta sẽ

03:01.080 --> 03:03.060
cần một chút thông tin.

03:03.060 --> 03:05.950
Chúng ta cần biết ID của mẫu để biết

03:05.950 --> 03:08.030
cách chọn nó và đó phải

03:08.030 --> 03:09.750
là một chuỗi.

03:09.750 --> 03:11.590
Chúng ta cần biết hostElementId,

03:11.590 --> 03:13.050
cũng cần phải là một chuỗi,

03:13.050 --> 03:15.833
để chúng ta biết nơi hiển thị thành phần này.

03:17.440 --> 03:20.505
Và tôi cũng muốn có một newElementId, để chúng tôi

03:20.505 --> 03:22.590
có được một ID phải được gán cho phần

03:22.590 --> 03:24.350
tử mới được hiển thị.

03:24.350 --> 03:26.020
Tuy nhiên, điều này là tùy chọn,

03:26.020 --> 03:28.210
mà tôi báo hiệu bằng cách thêm một dấu

03:28.210 --> 03:29.690
chấm hỏi sau tham số.

03:29.690 --> 03:31.940
Cách khác là cũng chấp nhận undefined

03:31.940 --> 03:34.050
ở đây như một loại, nhưng tôi sẽ

03:34.050 --> 03:36.470
chỉ sử dụng dấu chấm hỏi.

03:36.470 --> 03:38.510
Và bây giờ, với điều đó trong hàm

03:38.510 --> 03:39.793
tạo, về cơ bản, chúng

03:40.640 --> 03:42.083
ta có thể lấy mã này ở đây

03:43.810 --> 03:46.950
và đặt nó vào hàm tạo của lớp Thành phần, để chúng ta

03:46.950 --> 03:48.940
lưu trữ templateElement, nhưng,

03:48.940 --> 03:52.060
tất nhiên, bây giờ là ID, mà chúng ta đang đến đây,

03:52.060 --> 03:55.400
đó có phải là templateId, đó là lý do tại sao tôi lấy nó

03:55.400 --> 03:57.450
làm đối số trong hàm tạo.

03:57.450 --> 04:00.060
Và đối với hostElement, ID ở đây, tất nhiên,

04:00.060 --> 04:02.733
là hostElementId của chúng ta, như thế này.

04:04.790 --> 04:07.930
Tất nhiên, điều quan trọng nữa là liên quan đến việc truyền

04:07.930 --> 04:10.230
ở đây, chúng tôi biết đây sẽ là loại T, vì T ở đây

04:10.230 --> 04:12.580
là loại chung này mà chúng tôi lưu trữ hoặc chúng

04:12.580 --> 04:15.420
tôi sử dụng cho hostElement của mình, vì vậy ở đây chúng

04:15.420 --> 04:17.163
tôi có thể truyền nó rồi.

04:18.160 --> 04:20.253
Và với điều đó, chúng tôi đang chọn các yếu tố.

04:21.130 --> 04:22.940
Chúng tôi cũng có thể lấy thêm mã.

04:22.940 --> 04:26.650
Mã đó ở đây, nơi chúng tôi nhập một nút, v.v. và nơi chúng

04:26.650 --> 04:30.130
tôi đặt ID, chúng tôi có thể lấy tất cả mã đó.

04:30.130 --> 04:32.520
Vì vậy, hãy sao chép nó ở đây và thêm

04:32.520 --> 04:35.317
nó vào hàm tạo của lớp Thành phần.

04:35.317 --> 04:37.640
đã nhậpNode, sau đó chúng ta đặt phần tử

04:37.640 --> 04:41.080
và phần tử ở đây có loại U chung này, vì vậy khi chúng ta truyền

04:41.080 --> 04:43.000
cái này ở đây, chúng ta biết nó sẽ

04:43.000 --> 04:46.870
là loại U đó ở đây, vì vậy chúng ta nên truyền nó thành U.

04:46.870 --> 04:49.090
Đó là cách sử dụng hiệu quả của generic ở đây, điều

04:49.090 --> 04:51.993
này làm cho lớp Thành phần này thực sự có thể sử dụng lại được.

04:53.060 --> 04:55.200
Bây giờ, liên quan đến ID.

04:55.200 --> 04:58.200
Đây là những gì chúng tôi nhận được ở đây, newElementId.

04:58.200 --> 05:00.590
Bây giờ, tất nhiên, không phải lúc nào chúng ta cũng có cái

05:00.590 --> 05:02.150
này, vì nó là tùy chọn, vì vậy chúng ta

05:02.150 --> 05:03.870
nên kiểm tra xem mình có cái này không.

05:03.870 --> 05:06.070
Vì vậy, nếu newElementId là một thứ và

05:06.070 --> 05:07.650
chỉ khi nó là một thứ, thì tôi

05:07.650 --> 05:09.710
mới thử gán nó, nếu không thì chúng

05:09.710 --> 05:10.543
ta không thử, vì

05:10.543 --> 05:13.023
khi đó chúng ta không có ID để gán.

05:14.420 --> 05:16.300
Vâng, với điều đó, chúng ta có hàm tạo.

05:16.300 --> 05:19.160
Bây giờ hãy sử dụng chức năng đính kèm ở đây.

05:19.160 --> 05:21.970
Vì vậy, hãy sao chép phương thức đính kèm từ một

05:21.970 --> 05:25.470
trong các lớp khác của chúng ta và thêm nó vào đây, như một

05:25.470 --> 05:28.473
phương thức riêng tư, trong lớp Thành phần.

05:32.690 --> 05:35.640
Sau đó chúng ta cũng có thể gọi this. đính kèm vào cuối

05:35.640 --> 05:38.540
hàm tạo của lớp Thành phần.

05:38.540 --> 05:39.960
Bây giờ, ở đây chúng ta muốn

05:39.960 --> 05:42.570
thêm một phần tử, nhưng chúng ta không biết nó nên

05:42.570 --> 05:44.193
được thêm vào đâu, vì vậy đó thực

05:44.193 --> 05:46.450
sự là một số thông tin bổ sung mà chúng ta nên

05:46.450 --> 05:49.450
tìm nạp ở đây, như một đối số thứ tư trong bộ điều khiển,

05:52.430 --> 05:54.200
chèn Atstart có thể là một cái tên,

05:54.200 --> 05:56.680
và đó là một boolean, giả sử.

05:56.680 --> 06:00.190
Và chúng ta nên di chuyển nó trước tham số tùy chọn của mình.

06:00.190 --> 06:02.230
Các tham số tùy chọn phải luôn ở cuối cùng,

06:02.230 --> 06:03.980
vì mọi người có thể bỏ qua chúng.

06:03.980 --> 06:06.680
Do đó, các tham số bắt buộc của bạn không thể

06:06.680 --> 06:09.220
xuất hiện sau các tham số tùy chọn này.

06:09.220 --> 06:12.700
Và insertAtStart sau đó được chuyển tiếp để đính kèm,

06:12.700 --> 06:13.533
ở đó, insertAtBeginning,

06:14.615 --> 06:18.740
bạn cũng có thể sử dụng lại insertAtStart, tôi chỉ sử dụng một tên

06:18.740 --> 06:21.350
khác ở đây để tránh nhầm lẫn, được nhận dưới

06:21.350 --> 06:23.470
dạng boolean.

06:23.470 --> 06:28.040
Và sau đó ở đây, chúng ta kiểm tra xem insertAtBeginning có đúng

06:28.040 --> 06:32.920
không, nếu đúng thì ở đây, chúng ta có afterbegin, nếu không thì chúng

06:32.920 --> 06:34.887
ta có beforeend.

06:36.770 --> 06:39.653
Bây giờ chúng tôi linh hoạt về cách thức này được chèn vào.

06:42.980 --> 06:46.570
Tôi cũng muốn đánh dấu lớp này bây giờ là một lớp trừu tượng, bởi

06:46.570 --> 06:49.600
vì mọi người không bao giờ nên trực tiếp khởi tạo nó,

06:49.600 --> 06:52.560
thay vào đó, nó phải luôn được sử dụng để kế thừa.

06:52.560 --> 06:56.090
Vì vậy, trước lớp, tôi thêm từ khóa trừu tượng.

06:56.090 --> 06:58.750
Điều này đảm bảo rằng bây giờ chúng ta không thể khởi tạo nó.

06:58.750 --> 07:01.963
Nếu chúng tôi cố gắng làm như vậy, TypeScript sẽ mắng chúng tôi.

07:04.070 --> 07:06.490
Tôi cũng sẽ thêm hai phương thức nữa, đó

07:06.490 --> 07:08.410
là phương thức cấu hình và sau

07:08.410 --> 07:10.840
đó là phương thức renderContent.

07:10.840 --> 07:13.430
Và tôi sẽ thêm nó dưới dạng một phương thức

07:13.430 --> 07:16.463
trừu tượng, có nghĩa là việc triển khai cụ thể bị thiếu

07:18.000 --> 07:21.080
ở đây, nhưng về cơ bản, bây giờ chúng ta buộc bất kỳ lớp

07:21.080 --> 07:22.670
nào kế thừa từ thành phần,

07:22.670 --> 07:25.980
thêm hai phương thức này và để chúng có sẵn.

07:25.980 --> 07:27.220
Tôi chỉ thêm phần

07:27.220 --> 07:29.390
này ở đây để nếu ai đó xem mã của

07:29.390 --> 07:31.460
chúng tôi, họ có thể hiểu rõ ý

07:31.460 --> 07:34.150
tưởng đằng sau lớp Thành phần là gì.

07:34.150 --> 07:36.340
Rằng nó thực hiện tất cả quá trình kết

07:36.340 --> 07:38.530
xuất chung hoặc phần đính kèm của thành

07:38.530 --> 07:40.790
phần, nhưng nội dung và cấu hình cụ thể

07:40.790 --> 07:43.840
sau đó cần phải diễn ra ở nơi chúng tôi kế thừa.

07:43.840 --> 07:47.670
Lưu ý bên lề, bạn không thể có các phương thức trừu tượng, riêng tư.

07:47.670 --> 07:49.660
Vì vậy, riêng tư phải được bỏ qua ở đây,

07:49.660 --> 07:52.000
điều đó không được TypeScript cho phép.

07:52.000 --> 07:54.590
Chà, và với điều này, chúng ta có thể mở rộng

07:54.590 --> 07:56.480
Thành phần ở đây trên ProjectList

07:56.480 --> 07:59.130
và bây giờ loại bỏ ba thuộc tính này.

07:59.130 --> 08:00.640
Chúng tôi giữ các Dự án được

08:00.640 --> 08:03.520
chỉ định, vì đó là dành riêng cho ProjectList.

08:03.520 --> 08:06.620
Bây giờ chúng tôi cũng muốn chỉ định các giá trị cụ thể

08:06.620 --> 08:09.560
sẽ được bổ sung cho các loại chung của chúng tôi.

08:09.560 --> 08:12.410
Và chúng tôi biết, nếu chúng tôi hoàn nguyên

08:12.410 --> 08:16.540
điều này, chúng tôi biết rằng chúng tôi sẽ có HTMLDivElement và

08:16.540 --> 08:19.313
HTMLElement, vì vậy ở đây tôi sẽ chuyển HTMLDivElement

08:20.410 --> 08:22.800
và HTMLElement, như thế này, sau đó

08:22.800 --> 08:25.830
loại bỏ ba thuộc tính này.

08:25.830 --> 08:29.510
Trong hàm tạo, bây giờ chúng ta không cần điều đó ở đây, mà thay vào đó,

08:29.510 --> 08:32.550
chúng ta cần gọi super ngay từ đầu, để gọi hàm điều khiển

08:32.550 --> 08:35.130
của lớp cơ sở, và để làm được điều đó, chúng ta cần

08:35.130 --> 08:38.080
chuyển một số thông tin cho trình điều khiển siêu hạng,

08:38.080 --> 08:40.840
chúng ta cần để chuyển một số thông tin.

08:40.840 --> 08:42.753
ID của templateElement, hostElementId,

08:44.050 --> 08:45.850
liệu chúng ta có muốn chèn phần

08:45.850 --> 08:47.870
này vào đầu hostElement hay không

08:47.870 --> 08:50.140
và có khả năng là ID sẽ được gán cho phần

08:50.140 --> 08:51.920
tử mới.

08:51.920 --> 08:54.038
Vì vậy, đây là ID mẫu của chúng

08:54.038 --> 08:57.811
tôi và với ID đó, chúng tôi có thể loại bỏ nó tại đây.

08:57.811 --> 09:01.292
Sau đó, ở đây, hostElement, ID đó là ứng dụng, vì vậy chúng tôi

09:01.292 --> 09:02.670
có thể loại bỏ điều này.

09:02.670 --> 09:04.260
Chúng tôi giữ các Dự án được

09:04.260 --> 09:06.400
giao, vì chúng tôi vẫn cần nó ở đây.

09:06.400 --> 09:08.193
Chúng tôi loại bỏ điều này

09:10.150 --> 09:13.050
ở đây, nhưng, liên quan đến ID cho phần tử

09:13.050 --> 09:16.850
mới, tôi thực sự muốn chuyển nó thành tham số thứ tư.

09:16.850 --> 09:19.040
Cái thứ ba là nơi cái này sẽ được chèn

09:19.040 --> 09:22.400
vào, và ở đây, chúng tôi sử dụng để chèn cái này trước khi

09:22.400 --> 09:25.890
kết thúc, vì vậy thực ra cái mà tôi muốn chèn ở đây như một tham

09:25.890 --> 09:29.170
số cho giá trị insertAtStart là sai, bởi vì nó không nên

09:29.170 --> 09:31.380
được chèn vào lúc bắt đầu, nhưng cuối

09:31.380 --> 09:32.283
cùng.

09:36.000 --> 09:38.940
Bây giờ, tôi chắc chắn vẫn muốn thiết lập trình nghe của mình ở đây.

09:38.940 --> 09:40.730
Tôi không cần gọi tệp đính kèm,

09:40.730 --> 09:44.410
điều đó sẽ xảy ra trong lớp cơ sở, trong thành phần cơ sở.

09:44.410 --> 09:46.253
Tôi sẽ gọi renderContent.

09:47.870 --> 09:50.010
Và ở đây chúng ta không nên dùng loại này mà

09:50.010 --> 09:52.100
chỉ nên dùng loại thôi vì chúng ta không thể

09:52.100 --> 09:54.410
dùng loại này trước khi super chạy xong.

09:54.410 --> 09:55.490
Tuy nhiên, đó không phải là

09:55.490 --> 09:57.690
vấn đề, bởi vì chúng tôi đã nhận được loại làm đối số.

09:57.690 --> 09:59.680
Bây giờ, bạn thấy đấy, tôi vẫn gặp lỗi ở đây,

09:59.680 --> 10:03.487
bởi vì chúng ta có một phương thức đính kèm ở đây trong ProjectList và phương

10:03.487 --> 10:05.410
thức đó xung đột với phương thức đính kèm

10:05.410 --> 10:07.330
mà chúng ta có trong lớp cơ sở.

10:07.330 --> 10:10.600
Vì vậy, hãy loại bỏ phương pháp đính kèm này ở đây.

10:10.600 --> 10:14.024
Bây giờ chúng tôi vẫn gặp lỗi, bởi vì bạn thấy đấy, renderContent ở đây

10:14.024 --> 10:16.060
là riêng tư, nhưng chúng tôi chỉ định nó là

10:16.060 --> 10:18.270
một phương thức công khai ở đây, tôi muốn nó là

10:18.270 --> 10:20.240
một phương thức riêng tư, nhưng các phương

10:20.240 --> 10:22.860
thức trừu tượng riêng tư không được hỗ trợ.

10:22.860 --> 10:25.680
Vì vậy, tôi sẽ xóa từ khóa riêng tư ở đây và bây giờ với điều

10:25.680 --> 10:28.170
đó, chúng tôi còn lại một vấn đề ở đây, đó là chúng tôi

10:28.170 --> 10:30.510
không có phương pháp cấu hình đó, mà tôi đã hứa

10:30.510 --> 10:31.990
là chúng tôi sẽ có ở đây.

10:31.990 --> 10:33.650
Vâng, hãy thêm nó.

10:33.650 --> 10:38.500
Vì vậy, ở đây, ngoài renderConfig, chúng ta có thể thêm cấu hình, mặc

10:38.500 --> 10:40.510
dù tôi không làm gì ở đây.

10:40.510 --> 10:42.950
Ngoài ra, bạn có thể chuyển đổi phương thức này ở đây thành

10:42.950 --> 10:46.000
một phương pháp tùy chọn bằng cách thêm dấu chấm hỏi, sau đó, bạn không

10:46.000 --> 10:47.520
bắt buộc phải thêm nó.

10:47.520 --> 10:50.380
Ở đây, tôi sẽ thêm nó bởi vì chúng tôi cũng có thể

10:50.380 --> 10:53.210
lập luận rằng chúng tôi, đối với ProjectList,

10:53.210 --> 10:56.490
đã đặt mã đó vào nơi chúng tôi thiết lập trình nghe của mình

10:56.490 --> 10:58.530
ở đây, thực sự vào cấu hình.

10:58.530 --> 11:00.810
Vì vậy, chúng tôi có thể liên hệ để định cấu

11:00.810 --> 11:03.320
hình và sau đó thực hiện công việc của chúng tôi

11:03.320 --> 11:05.220
ở đây, đó là thiết lập trình nghe.

11:05.220 --> 11:06.610
Và bây giờ, chúng ta chỉ cần đảm

11:06.610 --> 11:10.653
bảo rằng chúng ta gọi renderContent, nhưng cũng phải cấu hình như thế này.

11:12.730 --> 11:14.440
Trong trường hợp bạn đang thắc mắc tại

11:14.440 --> 11:16.450
sao tôi không gọi configure và renderContent

11:16.450 --> 11:18.560
ở đây trong lớp trừu tượng trong contructor, thì

11:18.560 --> 11:19.993
chúng ta có thể làm điều này, nhưng

11:21.780 --> 11:23.720
khi đó chúng ta có thể gặp sự cố.

11:23.720 --> 11:26.760
Nếu chúng ta gọi phương thức này trong lớp Thành

11:26.760 --> 11:30.770
phần, thì chúng ta có thể gọi một phương thức trong lớp kế thừa,

11:30.770 --> 11:33.240
vì vậy, trong một lớp mở rộng Thành phần,

11:33.240 --> 11:36.810
nơi renderContent hoặc cấu hình dựa vào thứ gì đó mà trình

11:36.810 --> 11:39.410
điều khiển của lớp kế thừa thực sự có thể

11:39.410 --> 11:41.540
thiết lập thứ gì đó, chỉ sau khi trình

11:41.540 --> 11:44.710
xây dựng lớp cơ sở kết thúc, mà renderContent và

11:44.710 --> 11:48.100
hoặc cấu hình dựa vào.

11:48.100 --> 11:50.690
Đó là lý do tại sao về cơ bản, sẽ an toàn hơn khi

11:50.690 --> 11:52.410
đảm bảo rằng lớp kế thừa phải gọi

11:52.410 --> 11:55.410
các phương thức này thay vì lớp cơ sở gọi các phương thức

11:55.410 --> 11:56.860
này cho chúng ta.

11:57.980 --> 12:01.280
Vì vậy, cùng với đó, chúng tôi đã cấu trúc lại lớp ProjectList để

12:01.280 --> 12:05.040
tận dụng lợi thế của tính kế thừa và logic được chia sẻ của chúng tôi.

12:05.040 --> 12:07.730
Hãy làm tương tự với ProjectInput ngay bây giờ.

12:07.730 --> 12:11.790
Ở đó, chúng tôi cũng muốn mở rộng Thành

12:11.790 --> 12:13.170
phần.

12:13.170 --> 12:14.900
Sử dụng bản chất chung

12:14.900 --> 12:19.430
của điều đó và ở đó, chúng ta có HTMLDivElement cho hostElement

12:19.430 --> 12:23.980
và HTMLFormElement cho phần tử được hiển thị.

12:23.980 --> 12:27.210
Cùng với đó, chúng ta có thể loại bỏ ba thuộc tính này ở đây, vì

12:27.210 --> 12:28.310
vậy hãy làm điều đó.

12:28.310 --> 12:30.090
Tất nhiên, chúng tôi giữ ba thuộc tính

12:30.090 --> 12:32.140
này vì chúng dành riêng cho ProjectInput.

12:33.040 --> 12:35.310
Sau đó, chúng ta phải gọi super

12:35.310 --> 12:38.320
ở đây và để super, chúng ta chuyển ID của mẫu,

12:38.320 --> 12:39.900
là ProjectInput, ID của

12:39.900 --> 12:41.970
phần tử máy chủ, là ứng dụng,

12:41.970 --> 12:45.270
insertB Before ở đây là đúng, vì tôi muốn chèn

12:45.270 --> 12:47.620
phần tử mới được tạo đó vào đầu ở đây

12:47.620 --> 12:50.510
cho lớp ProjectInput này.

12:50.510 --> 12:53.110
Và sau đó, newElementId, đây là đầu vào của

12:53.110 --> 12:55.170
người dùng, vì vậy chúng ta cũng nên

12:55.170 --> 12:56.913
chuyển tiếp thông tin đó.

12:57.844 --> 12:59.400
Với điều này, chúng ta

12:59.400 --> 13:03.480
có thể loại bỏ mã này, mã này và tất cả mã này thực sự ở đây.

13:03.480 --> 13:05.240
Tất nhiên, giữ mã này ở đây.

13:05.240 --> 13:07.820
Tuy nhiên, chúng tôi cũng có thể lập luận rằng chúng

13:07.820 --> 13:09.860
tôi có thể đưa điều này vào cấu hình.

13:09.860 --> 13:12.100
Vì vậy, hãy đi xuống phương thức cấu hình mà chúng

13:12.100 --> 13:13.660
tôi đã có ở đây và thêm trình nghe của

13:13.660 --> 13:16.790
chúng tôi tại đây hoặc thiết lập thuộc tính của chúng tôi tại đây để định

13:16.790 --> 13:17.683
cấu hình.

13:18.880 --> 13:20.780
Tất nhiên, hãy loại bỏ tệp đính kèm,

13:20.780 --> 13:24.450
bởi vì đó hiện là thứ mà lớp cơ sở làm cho chúng ta và hãy kiểm tra xem

13:24.450 --> 13:26.980
TypeScript không thích điều gì, tất nhiên

13:26.980 --> 13:29.690
chúng ta nên loại bỏ tệp đính kèm ở đây.

13:29.690 --> 13:32.520
Và vâng, thực sự có một điều TypeScript không thích,

13:32.520 --> 13:35.090
giờ đây nó phàn nàn rằng các trường này không

13:35.090 --> 13:37.190
được khởi tạo trong bộ điều khiển, bởi

13:37.190 --> 13:40.380
vì nó không hiểu hoặc không kiểm tra xem cấu hình đó có được

13:40.380 --> 13:42.260
gọi trong bộ điều khiển hay không

13:42.260 --> 13:44.770
và thực hiện việc khởi tạo này.

13:44.770 --> 13:47.500
Vì vậy, để đáp ứng TypeScript, tôi thực sự

13:47.500 --> 13:50.550
sẽ di chuyển các phần khởi tạo này trở lại từ cấu

13:50.550 --> 13:52.170
hình ngay vào hàm tạo.

13:52.170 --> 13:54.190
Về mặt kỹ thuật, kết quả hoàn toàn giống nhau, nhưng

13:54.190 --> 13:55.953
bây giờ TypeScript sẽ không phàn nàn.

13:56.800 --> 13:59.240
Tuy nhiên, nó sẽ phàn nàn rằng chúng ta có một

14:00.440 --> 14:02.310
phương thức cấu hình riêng tư, vì

14:02.310 --> 14:05.910
vậy cũng giống như trước đây, chúng ta nên thay đổi điều này và chuyển

14:05.910 --> 14:08.940
cấu hình thành một phương thức công khai.

14:08.940 --> 14:11.460
Bây giờ, đây không phải là điều bắt buộc, nhưng theo quy

14:11.460 --> 14:13.000
ước, bạn phải có các phương thức công

14:13.000 --> 14:14.570
khai trước, đó là lý do tại sao tôi sẽ

14:14.570 --> 14:17.240
chuyển nó lên trên các phương thức riêng tư khác ở đây.

14:17.240 --> 14:19.370
Và, tất nhiên, bây giờ nó cũng phàn nàn rằng

14:19.370 --> 14:21.990
chúng ta không có phương thức renderContent.

14:21.990 --> 14:25.020
Bây giờ, tôi sẽ thêm một cái, chỉ vì chúng ta cần.

14:25.020 --> 14:26.780
Ở đây chúng tôi không làm bất cứ điều gì trong

14:26.780 --> 14:28.890
đó, vì vậy về mặt kỹ thuật, nó không bắt buộc, nhưng

14:28.890 --> 14:31.053
bây giờ chúng tôi đáp ứng lớp cơ sở của mình.

14:32.260 --> 14:34.603
Lưu ý bên lề, renderContent và cấu hình,

14:35.550 --> 14:39.590
trong lớp ProjectList, cũng có thể được di chuyển lên trên phương

14:39.590 --> 14:43.230
thức riêng đó ở đây vì những lý do chính xác giống như quy ước

14:43.230 --> 14:45.123
mà tôi vừa đề cập.

14:46.440 --> 14:49.870
Và cùng với đó, chúng tôi cũng đã cấu trúc lại ProjectInput,

14:49.870 --> 14:51.780
để tận dụng lợi thế của tính kế

14:51.780 --> 14:55.330
thừa và để lớp cơ sở thực hiện nhiều công việc.

14:55.330 --> 14:57.670
Hãy xem liệu bây giờ tất cả có hoạt động không.

14:57.670 --> 15:00.710
Nếu chúng tôi lưu nó, nó sẽ biên dịch mà không

15:00.710 --> 15:02.740
có lỗi, dường như chạy tốt,

15:02.740 --> 15:05.870
vậy câu hỏi này có hoạt động không.

15:05.870 --> 15:07.810
Và điều đó có vẻ khá tốt.

15:07.810 --> 15:09.720
Nó hoạt động giống như trước đây, nhưng

15:09.720 --> 15:11.600
bây giờ chúng tôi có mã sạch hơn, nơi

15:11.600 --> 15:14.240
chúng tôi tận dụng lợi thế của việc sử dụng lại mã

15:14.240 --> 15:15.850
nhờ tính kế thừa.

15:15.850 --> 15:18.540
Bây giờ, nó không phải là nơi duy nhất mà chúng ta có thể thừa kế.

15:18.540 --> 15:20.610
Tôi muốn kết thúc bài giảng này ở

15:20.610 --> 15:24.230
đây bằng cách cấu trúc lại trạng thái dự án của chúng ta.

15:24.230 --> 15:26.240
Về mặt kỹ thuật, chúng ta không cần kế thừa,

15:26.240 --> 15:29.450
vì chúng ta chỉ có một trạng thái duy nhất mà chúng ta quản lý trong

15:29.450 --> 15:31.230
toàn bộ ứng dụng này, nhưng hãy tưởng

15:31.230 --> 15:33.130
tượng một ứng dụng lớn hơn, nơi bạn có

15:33.130 --> 15:35.310
nhiều trạng thái khác nhau.

15:35.310 --> 15:37.240
Một cho trạng thái người dùng,

15:37.240 --> 15:39.290
cho dù người dùng đã đăng nhập

15:39.290 --> 15:43.030
hay chưa, v.v., một cho các dự án, một cho giỏ hàng.

15:43.030 --> 15:45.600
Bây giờ, bạn sẽ nhận thấy rằng một số tính năng

15:45.600 --> 15:48.080
của lớp trạng thái của bạn luôn giống nhau.

15:48.080 --> 15:50.520
Cụ thể, mảng người nghe đó và phương

15:50.520 --> 15:52.780
thức addListener.

15:52.780 --> 15:54.730
Vì vậy, chúng tôi cũng có thể sử dụng một lớp cơ sở ở đây.

15:55.650 --> 15:58.170
Chúng ta có thể sử dụng một lớp Trạng thái

15:58.170 --> 16:01.230
ở đây và lớp đó có một mảng người nghe và lớp đó

16:01.230 --> 16:04.640
cũng có một phương thức addListeners, vì vậy chúng

16:04.640 --> 16:07.120
ta sẽ cắt cả hai từ ProjectState và thêm

16:07.120 --> 16:09.160
nó vào Trạng thái.

16:09.160 --> 16:12.610
Tất nhiên, điều đó cũng có nghĩa là chúng ta không biết liệu

16:12.610 --> 16:14.700
người nghe của chúng ta có thực sự trả

16:14.700 --> 16:16.720
về một loạt các dự án hay không.

16:16.720 --> 16:18.253
Vì vậy, thực sự ở đây,

16:19.110 --> 16:20.760
đối với loại chức năng

16:20.760 --> 16:24.740
này, tôi cũng muốn có một loại chung.

16:24.740 --> 16:27.440
Để chúng ta có thể thiết lập điều này từ bên ngoài.

16:27.440 --> 16:28.483
Chúng ta có thể làm điều

16:29.790 --> 16:31.623
đó, chúng ta có thể viết một loại chung,

16:32.680 --> 16:35.730
như thế này ở đây, một loại tùy chỉnh, là loại chung, chúng

16:35.730 --> 16:38.410
ta có thể thêm dấu ngoặc nhọn sau tên loại của mình, sử

16:38.410 --> 16:40.150
dụng mã định danh mà chúng ta chọn,

16:40.150 --> 16:42.460
sau đó sử dụng lại loại đó ở đây.

16:42.460 --> 16:44.960
Bây giờ, chúng ta có thể đặt Trạng thái chung chung, chúng

16:44.960 --> 16:46.320
ta có thể sử dụng cùng một mã định

16:46.320 --> 16:49.530
danh, bởi vì đó là một cấu trúc khác với loại tùy chỉnh của chúng ta.

16:49.530 --> 16:53.520
Và sau đó, ở đây, khi chúng tôi nói rằng chúng tôi muốn có một danh sách

16:53.520 --> 16:56.780
người nghe, chúng tôi phải cho TypeScript biết loại chung

16:56.780 --> 16:58.850
mà người nghe sử dụng cho đối tượng

16:58.850 --> 17:01.510
Trạng thái này mà chúng tôi đang tạo.

17:01.510 --> 17:03.850
Và điều đó đơn giản có nghĩa là chúng ta có thể

17:03.850 --> 17:06.490
chuyển tiếp loại chung của chúng ta ở đây và ở đây.

17:06.490 --> 17:09.410
Vì vậy, bây giờ khi chúng tôi mở rộng trạng thái, chúng tôi phải

17:09.410 --> 17:12.630
chỉ định loại dữ liệu mà trạng thái này sẽ hoạt động và thay vì trạng

17:12.630 --> 17:14.930
thái, dữ liệu này sau đó sẽ được chuyển tiếp đến loại

17:14.930 --> 17:17.680
tùy chỉnh trình nghe của chúng tôi, đó là ý tưởng.

17:17.680 --> 17:19.580
Và làm thế nào để chúng ta sử dụng tất cả những điều đó?

17:19.580 --> 17:21.950
Chà, ở dưới đó, trong lớp ProjectState,

17:21.950 --> 17:24.930
chúng ta chỉ cần mở rộng lớp State, và bây giờ,

17:24.930 --> 17:27.900
cung cấp một giá trị, một giá trị cụ thể cho trình

17:27.900 --> 17:30.040
giữ chỗ chung đó, và ở đây, giá trị

17:30.040 --> 17:32.480
cụ thể này là Project, bởi vì ProjectState

17:32.480 --> 17:36.510
này hoàn toàn là về việc quản lý dự đoán gì?

17:36.510 --> 17:37.393
dự án.

17:38.970 --> 17:41.650
Bây giờ, hàm tạo riêng ở đây có vấn đề, như

17:41.650 --> 17:43.390
bạn có thể thấy, bởi vì chúng

17:43.390 --> 17:45.160
ta không gọi super.

17:45.160 --> 17:46.930
Chà, chúng ta chắc chắn nên làm điều đó, hãy

17:46.930 --> 17:48.350
gọi super vào đây, đó là tất cả những

17:48.350 --> 17:49.800
gì chúng ta phải làm ở đó.

17:50.640 --> 17:53.490
Và ở đây, nếu chúng ta cuộn xuống, nơi chúng ta

17:53.490 --> 17:55.880
duyệt qua các bộ nghe, chúng ta sẽ thấy

17:55.880 --> 17:57.890
các bộ nghe là riêng tư và nó là riêng

17:57.890 --> 18:00.240
tư trong lớp cơ sở của chúng ta.

18:00.240 --> 18:01.860
Bây giờ, điều đó có nghĩa là chúng ta chỉ

18:01.860 --> 18:03.580
có thể truy cập nó từ bên trong lớp cơ sở.

18:03.580 --> 18:06.760
Nhưng bạn đã biết về một công cụ sửa đổi truy cập khác,

18:06.760 --> 18:09.380
tương tự như công cụ sửa đổi quyền riêng

18:09.380 --> 18:12.900
tư, nhưng cũng cho phép truy cập từ các lớp kế thừa và công

18:12.900 --> 18:14.990
cụ đó sẽ được bảo vệ.

18:14.990 --> 18:17.200
Được bảo vệ có nghĩa là nó vẫn không

18:17.200 --> 18:18.930
thể được truy cập từ bên ngoài

18:18.930 --> 18:23.030
lớp, nhưng nó có thể được truy cập từ bất kỳ lớp nào kế thừa.

18:23.030 --> 18:24.740
Cùng với đó, hãy lưu tất cả những

18:24.740 --> 18:26.650
thứ đó, nó sẽ biên dịch tốt.

18:26.650 --> 18:28.940
Và hãy nhanh chóng kiểm tra điều này, và điều

18:28.940 --> 18:31.790
đó có vẻ tốt, vì vậy nó hoạt động như trước đây, nhưng bây

18:31.790 --> 18:34.160
giờ, một lần nữa, với mã đẹp hơn một chút, cũng

18:34.160 --> 18:36.420
sử dụng tính kế thừa và tổng quát cho quản lý

18:36.420 --> 18:38.363
trạng thái của chúng ta.
