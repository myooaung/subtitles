WEBVTT

00:02.200 --> 00:03.210
Instructeur : Alors commençons

00:03.210 --> 00:05.520
avec TypeScript et Node. js et pour cela, je suis essentiellement

00:05.520 --> 00:08.660
dans un nouveau dossier vide ici, juste quelques fichiers de configuration

00:08.660 --> 00:12.140
ici, et nous allons commencer très simple.

00:12.140 --> 00:15.020
Ajoutons une application. ts ici.

00:15.020 --> 00:17.370
Vous pouvez lui donner le nom que vous voulez, bien sûr.

00:17.370 --> 00:19.180
Et là-dedans, écrivons du code que nous

00:19.180 --> 00:22.220
voulons exécuter avec Node. js, mais où nous voulons

00:22.220 --> 00:24.980
utiliser TypeScript.

00:24.980 --> 00:26.350
Un script simple pourrait

00:26.350 --> 00:28.910
consister à consigner quelque chose en console.

00:28.910 --> 00:30.450
Cela fonctionne dans le navigateur, mais

00:30.450 --> 00:33.350
cela fonctionne aussi avec Node. js.

00:33.350 --> 00:35.840
Maintenant, assurez-vous que vous avez Node. js installé, ce qui devrait

00:35.840 --> 00:37.220
être le cas si vous avez

00:37.220 --> 00:38.740
suivi ce cours, car nous

00:38.740 --> 00:42.077
l'avons utilisé dans NPM avec Webpack et avec de nombreux

00:42.077 --> 00:43.910
autres outils et bibliothèques

00:43.910 --> 00:46.710
déjà installés avec NPM.

00:46.710 --> 00:48.480
Donc vous devriez avoir Node. js installé.

00:48.480 --> 00:50.300
Et si vous l'avez installé, vous

00:50.300 --> 00:52.130
pouvez exécuter ce fichier si vous

00:52.130 --> 00:54.110
le compilez en JavaScript.

00:54.110 --> 00:57.000
Donc si je lance l'application tsc. ts, et je produis

00:57.000 --> 01:00.360
mon application. js donc, je peux l'exécuter

01:00.360 --> 01:02.890
avec node et j'imprime quelque

01:02.890 --> 01:04.503
chose ici.

01:06.550 --> 01:08.990
Maintenant, quand je supprime l'application. js et j'essaie d'exécuter

01:08.990 --> 01:11.890
l'application. ts avec le nœud, vous verrez

01:11.890 --> 01:13.810
quelque chose d'étrange.

01:13.810 --> 01:15.070
Cela fonctionne aussi.

01:15.070 --> 01:18.010
Donc si le nœud est capable d'exécuter TypeScript ?

01:18.010 --> 01:20.380
Non, ce n'est pas le cas et c'est très important.

01:20.380 --> 01:23.210
Il ne se préoccupe pas de l'extension du fichier, mais

01:23.210 --> 01:25.260
il traite tout ce qu'il trouve dans le fichier

01:25.260 --> 01:27.420
comme un JavaScript normal et celui-ci n'utilise

01:27.420 --> 01:31.370
pas de fonctionnalités TypeScript, donc il fonctionne.

01:31.370 --> 01:34.340
Cela change si nous ajoutons un contenu différent ici.

01:34.340 --> 01:36.400
Disons qu'à la place, nous avons une

01:36.400 --> 01:37.370
variable d'âge,

01:37.370 --> 01:40.080
qui est un nombre, et ici, je la fixe à 30, et ensuite

01:40.080 --> 01:42.250
je console. l'âge du journal ici.

01:42.250 --> 01:44.840
Il s'agit bien entendu d'un code TypeScript valide.

01:44.840 --> 01:46.790
Mais si nous essayons d'exécuter ceci avec le noeud,

01:46.790 --> 01:48.370
vous verrez que nous obtenons une erreur.

01:48.370 --> 01:52.450
Ainsi, node n'est pas capable d'analyser et de compiler TypeScript, il traite

01:52.450 --> 01:54.210
simplement chaque fichier que vous

01:54.210 --> 01:56.960
exécutez avec lui comme du JavaScript.

01:56.960 --> 01:59.030
Et si vous n'utilisez pas de fonctionnalités TypeScript

01:59.030 --> 02:01.100
dans le fichier, alors oui, cela fonctionne.

02:01.100 --> 02:02.950
Mais si vous le faites, ça ne marchera pas.

02:02.950 --> 02:04.920
Vous devez toujours commencer par compiler

02:04.920 --> 02:06.550
le fichier en JavaScript, afin d'exécuter

02:06.550 --> 02:08.960
ensuite le fichier JavaScript, qui ne contient

02:08.960 --> 02:11.350
que du code JavaScript valide.

02:11.350 --> 02:13.030
C'est vraiment important de le comprendre.

02:13.030 --> 02:15.890
Node n'exécute pas TypeScript.

02:15.890 --> 02:20.710
Maintenant, vous pouvez installer un paquet, ts-node, qui vous donne finalement

02:20.710 --> 02:24.230
ce compilateur TypeScript, combiné avec l'exécutable node,

02:24.230 --> 02:27.880
vous pourriez dire, de sorte que vous pouvez installer un outil

02:27.880 --> 02:30.320
globalement, que vous pouvez utiliser pour

02:30.320 --> 02:34.170
exécuter des fichiers TypeScript juste comme ça.

02:34.170 --> 02:35.210
Mais en coulisse, il se

02:35.210 --> 02:37.620
contentera de faire la compilation pour vous et d'exécuter

02:37.620 --> 02:39.440
le code de compilation.

02:39.440 --> 02:42.610
Il combine donc le tsc et l'étape du nœud en

02:42.610 --> 02:43.890
une seule étape.

02:43.890 --> 02:46.060
Il s'agit donc d'un paquet que vous pouvez utiliser

02:46.060 --> 02:49.150
mais, bien que cela puisse être intéressant pour le développement,

02:49.150 --> 02:52.330
pour la production, pour vraiment servir vos fichiers sur un serveur

02:52.330 --> 02:54.850
web, sur un hôte web, ce n'est probablement pas l'idéal,

02:54.850 --> 02:56.950
car avoir cette étape de compilation supplémentaire

02:56.950 --> 02:59.910
à chaque fois que votre code est exécuté, ajoute simplement un

02:59.910 --> 03:02.160
peu de surcharge supplémentaire, ce qui est bien

03:02.160 --> 03:04.370
pendant le développement, mais ce que vous ne

03:04.370 --> 03:07.970
voulez probablement pas lorsque votre code est prêt pour la production et

03:07.970 --> 03:09.890
que vous voulez vraiment le servir quelque

03:09.890 --> 03:12.090
part.

03:12.090 --> 03:13.260
Par conséquent, dans ce module,

03:13.260 --> 03:15.950
nous n'utiliserons pas ts-node et nous n'essaierons pas d'exécuter

03:15.950 --> 03:18.180
des fichiers TypeScript avec node.

03:18.180 --> 03:21.570
Au lieu de cela, je vais vous montrer une configuration que nous

03:21.570 --> 03:24.520
pouvons utiliser pour construire une application web

03:24.520 --> 03:26.150
express node ou une API de repos

03:26.150 --> 03:29.130
ici, avec juste TypeScript et le compilateur TypeScript

03:29.130 --> 03:31.343
et vanilla node. js.
