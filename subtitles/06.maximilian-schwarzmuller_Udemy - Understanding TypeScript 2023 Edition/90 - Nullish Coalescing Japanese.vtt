WEBVTT

00:02.300 --> 00:04.800
講師：オプショナルチェーンに少し関連しますが､

00:04.800 --> 00:09.550
TypeScriptにはもう一つ､ ヌルデータを扱うのに便利な機能があります｡

00:09.550 --> 00:12.820
そして､ その機能をヌルヌル合体というのです｡ 

00:12.820 --> 00:17.530
ここで､ あるデータ（入力）があったとして､ それがNULLなのか未定義なのか､

00:17.530 --> 00:19.830
あるいは実際に有効なデータなのか､

00:19.830 --> 00:23.320
確信が持てない場合を考えてみましょう｡

00:23.320 --> 00:28.180
例えば､ userInputはnullであるとします｡ 

00:28.180 --> 00:31.040
しかし､ DOM APIで取得する場合､

00:31.040 --> 00:38.650
それが確実でない場合､ あるいはバックエンドから取得する場合､ 事前に知ることができないので､

00:38.650 --> 00:46.510
TypeScriptはこれがNULLかどうかを知らないかもしれないのである｡

00:46.510 --> 00:50.650
これをstoredDataのような他の定数や変数に格納する場合､

00:50.650 --> 00:58.760
もしnullであれば､ フォールバック値を格納するようにした方が良いでしょう｡

00:58.760 --> 01:05.330
今は､ 論理和演算子でそうすることができます｡ ここで､ 最初の値が未定義かヌルである場合､

01:05.330 --> 01:06.740
正確には偽であれば､

01:06.740 --> 01:11.550
その2番目の値を取得する､ デフォルトを保存します｡

01:11.550 --> 01:13.690
この方法の問題点は､ これが実際にはnullでもundefinedでもなく､

01:13.690 --> 01:25.600
例えば空の文字列であった場合､ 偽の値として扱われ､ したがってそのデフォルト､ フォールバック値が有効になることです｡

01:25.600 --> 01:28.850
だから､ コンソールすれば｡  ここでstoredDataをログアウトすると､

01:28.850 --> 01:31.700
DEFAULTと表示されることがわかります｡

01:31.700 --> 01:33.430
今､ あなたが望んでいるのはそれかもしれませんし､

01:33.430 --> 01:36.540
その場合は､ これは全く問題ない解決策です｡

01:36.540 --> 01:40.730
しかし､ ユーザー入力や扱うデータが本当にnullやundefinedでない限り､

01:40.730 --> 01:44.110
それを保持したいのであれば､ 別のアプローチが必要です｡ ここでは､

01:44.110 --> 01:45.530
これをfalseとして扱い､

01:45.530 --> 01:48.970
フォールバックを使用します｡

01:48.970 --> 01:51.720
しかし､ 空の入力を維持したい場合は､ null や undefined

01:51.720 --> 01:54.370
は別の方法で処理する必要があります｡

01:54.370 --> 01:58.780
そのために､ TypeScriptにはダブルクエスチョンマーク演算子という演算子もあり､

01:58.780 --> 02:02.210
これはヌリッシュ合体演算子と呼ばれています｡

02:02.210 --> 02:05.250
そして､ もしこれがnullまたはundefinedであれば､

02:05.250 --> 02:06.730
空文字列でもなく､ ゼロでもなく､

02:06.730 --> 02:09.180
本当にnullまたはundefinedであれば､

02:09.180 --> 02:13.370
フォールバックを使用するということです｡

02:13.370 --> 02:16.700
nullやundefinedでなければ､ その値を使うことになる｡ 

02:16.700 --> 02:19.220
このシナリオでは､ コンパイルして､

02:19.220 --> 02:21.400
空の文字列を保存しています｡ したがって､

02:21.400 --> 02:24.720
ここでは何も表示していません｡

02:24.720 --> 02:26.060
一方､ この値が未定義であるとします｡

02:26.060 --> 02:32.980
これを保存すると､ DEFAULTと表示されます｡ このダブルクエスチョンマーク演算子のおかげで､

02:32.980 --> 02:42.773
このフォールバックに戻るため､ ヌルや未定義の値を優雅に扱うための､ もう一つの非常に便利な機能があります｡
