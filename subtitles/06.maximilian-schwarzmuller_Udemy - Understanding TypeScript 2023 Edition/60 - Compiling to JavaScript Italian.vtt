WEBVTT

00:02.510 --> 00:04.490
Istruttore: Con la nostra classe di base, se ora andiamo nella

00:04.490 --> 00:07.570
cartella dist e ispezioniamo l'applicazione. js, vediamo cosa viene

00:07.570 --> 00:10.110
generato in JavaScript e vediamo che

00:10.110 --> 00:13.560
abbiamo essenzialmente lo stesso codice.

00:13.560 --> 00:17.870
Due differenze importanti sono che il campo del nome che

00:17.870 --> 00:20.870
abbiamo qui non esiste in questo modo nella

00:20.870 --> 00:22.230
classe.

00:22.230 --> 00:25.460
Questo sarebbe in realtà supportato nel moderno JavaScript,

00:25.460 --> 00:27.910
ma dipende dalla versione di JavaScript per cui

00:27.910 --> 00:29.130
si sta costruendo.

00:29.130 --> 00:33.450
Quindi solo in ES6 non è supportato.

00:33.450 --> 00:35.430
E naturalmente la cosa più bella è vedere

00:35.430 --> 00:37.360
l'assegnazione del tipo.

00:37.360 --> 00:39.760
Tuttavia, abbiamo la nostra logica costruttiva

00:39.760 --> 00:43.870
e in effetti questo è il modo in cui si aggiungono le proprietà agli

00:43.870 --> 00:48.150
oggetti da creare in Vanilla JavaScript, quando non si utilizza l'ultima

00:48.150 --> 00:51.570
versione di JavaScript, dove questa sintassi di campo

00:51.570 --> 00:54.470
è supportata.

00:54.470 --> 00:56.480
Ecco cosa ho in JavaScript.

00:56.480 --> 00:58.710
Ora però la situazione si fa interessante

00:58.710 --> 01:02.080
se andiamo in tsconfig. json e cambiamo il target

01:02.080 --> 01:05.970
da ES5 a ES6 e commentiamo la lib qui.

01:05.970 --> 01:08.190
In modo che le librerie corrette e consigliate

01:08.190 --> 01:10.870
siano aggiunte automaticamente da TypeScript.

01:10.870 --> 01:14.090
Se ora si salva questo file di configurazione e si torna all'app. js si vede qualcosa di

01:14.090 --> 01:16.350
completamente diverso.

01:16.350 --> 01:18.810
Ed è piuttosto interessante quello che vediamo qui.

01:18.810 --> 01:20.960
Cosa abbiamo qui?

01:20.960 --> 01:23.290
Alla fine abbiamo una cosiddetta

01:23.290 --> 01:26.453
funzione costruttore.

01:27.299 --> 01:31.600
La funzione costruttore è qualcosa di incorporato

01:31.600 --> 01:33.770
in JavaScript, che in pratica

01:33.770 --> 01:35.520
esiste da sempre, e

01:35.520 --> 01:40.230
questo è il modo di Vanilla JavaScript non moderno

01:40.230 --> 01:44.480
di creare progetti di oggetti.

01:44.480 --> 01:47.100
È una funzione che viene chiamata con l'aiuto della

01:47.100 --> 01:50.890
parola chiave new e all'improvviso, magicamente, questa funzione, anche

01:50.890 --> 01:53.640
se non ha una dichiarazione di ritorno al suo interno,

01:53.640 --> 01:55.850
restituisce qualcosa, come si vede quando

01:55.850 --> 01:57.540
la chiamiamo qui.

01:57.540 --> 01:59.730
Restituisce un oggetto.

01:59.730 --> 02:03.110
Un nuovo oggetto che avrà una proprietà name.

02:03.110 --> 02:04.940
Quindi questo concetto non è nuovo,

02:04.940 --> 02:08.680
non è stato introdotto da JavaScript moderno o da TypeScript.

02:08.680 --> 02:12.500
L'idea di avere dei progetti per gli oggetti è presente

02:12.500 --> 02:15.180
in JavaScript da molto tempo.

02:15.180 --> 02:19.070
In passato, tuttavia, si dovevano usare le funzioni dei costruttori e questo

02:19.070 --> 02:21.870
poteva essere poco intuitivo, soprattutto per gli

02:21.870 --> 02:24.520
sviluppatori che avevano lavorato con linguaggi

02:24.520 --> 02:26.600
di programmazione diversi.

02:26.600 --> 02:30.510
Il moderno JavaScript ha introdotto l'idea delle classi

02:30.510 --> 02:34.950
con questa sintassi più pulita e anche TypeScript la supporta.

02:34.950 --> 02:38.180
E grazie alla potente compilazione di TypeScript, si

02:38.180 --> 02:40.830
può scegliere in quale formato compilarla:

02:40.830 --> 02:44.130
in quello più vecchio, che ovviamente funziona con più

02:44.130 --> 02:48.280
browser, o in quello più moderno di ES6, che abbiamo visto prima.

02:48.280 --> 02:51.700
Che assomiglia molto a questo qui.

02:51.700 --> 02:54.500
L'aspetto fondamentale è che abbiamo questa funzione

02:54.500 --> 02:57.300
integrata in JavaScript e supportata da TypeScript, che

02:57.300 --> 03:00.163
ci consente di definire i blueprint degli oggetti.
