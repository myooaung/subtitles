WEBVTT

00:02.250 --> 00:04.530
Instructor: También tenemos funciones

00:04.530 --> 00:09.240
útiles relacionadas con arrays y objetos y cómo podemos recuperar

00:09.240 --> 00:13.600
los datos que se almacenan en arrays y objetos.

00:13.600 --> 00:17.180
Ahora, para eso, vamos a añadir un nuevo array aquí, digamos

00:17.180 --> 00:19.880
hobbies y que puede ser un array de cadenas.

00:22.520 --> 00:26.700
Como los deportes y la cocina aquí y ahora obviamente

00:26.700 --> 00:31.700
podemos recuperar elementos por índice aquí, como esto por

00:31.810 --> 00:33.030
ejemplo.

00:33.030 --> 00:36.150
Pero, deberías saber estas cosas básicas de JavaScript.

00:36.150 --> 00:40.310
Next Gen JavaScript, introduce una buena función si queremos

00:41.172 --> 00:43.910
extraer todos los valores de un array.

00:43.910 --> 00:44.990
¿Cuándo podrías necesitar eso?

00:44.990 --> 00:48.670
Bueno, digamos que tienes las aficiones activas y eso

00:48.670 --> 00:53.670
es un conjunto en el que tengo el senderismo como afición, y ahora quiero

00:54.200 --> 00:56.510
añadir el deporte y la cocina.

00:56.510 --> 00:58.960
Ahora podemos añadir un elemento a los pasatiempos

00:58.960 --> 01:01.290
activos llamando a push, por cierto en caso de que

01:01.290 --> 01:05.620
te preguntes cómo puedo empujar a una constante, ten en cuenta que los arrays son objetos

01:05.620 --> 01:08.130
y los objetos son valores de referencia.

01:08.130 --> 01:11.010
Cuando pulsamos cambiamos una memoria pero no la dirección.

01:11.010 --> 01:14.150
Si esto no te dice nada revisa los recursos adicionales que

01:14.150 --> 01:17.390
adjunté a esta conferencia con respecto a ese tema, así que volviendo

01:17.390 --> 01:20.170
a este ejemplo entonces, podemos empujar aquí, pero

01:20.170 --> 01:24.120
empujar, si empujamos en los hobbies, añadiremos hobbies como un nuevo array

01:24.120 --> 01:27.540
en el array, así que como un nuevo arrays anidado.

01:27.540 --> 01:30.920
Que tipos lo detecta, me dice que si quiero

01:30.920 --> 01:33.690
añadir un array de cadenas a un array

01:33.690 --> 01:36.143
de cadenas, no está bien.

01:37.110 --> 01:40.390
Así que en lugar de empujar toma valores individuales por

01:40.390 --> 01:44.450
lo que podríamos pasar aficiones cero, en realidad empujar incluso toma

01:44.450 --> 01:47.450
una cantidad ilimitada de argumentos para que podamos

01:47.450 --> 01:51.240
empujar múltiples elementos en orden a la vez como eso.

01:51.240 --> 01:54.013
Pero eso es un poco engorroso y ahí es donde entra el Spread

01:54.013 --> 01:54.890
Operator.

01:54.890 --> 01:57.700
Se parece a esto, son tres puntos y sí esto parece

01:57.700 --> 02:00.850
extraño pero esto es un Operador JavaScript válido

02:00.850 --> 02:04.770
soportado por [¿Hypescript? ] y después de eso especificamos

02:04.770 --> 02:09.547
o señalamos el array u objeto como también aprenderás, que queremos

02:09.547 --> 02:11.700
extender.

02:11.700 --> 02:15.160
Así que lo que esto hace es, le dice a JavaScript al final porque

02:15.160 --> 02:17.690
eso es un Operador de JavaScript de Vainilla

02:17.690 --> 02:21.070
disponible en JavaScript Moderno, así que le dice a JavaScript

02:21.070 --> 02:25.500
que saque todos los elementos después del array y básicamente los añada como

02:25.500 --> 02:28.530
una lista de valores, así que no como un array sino una

02:28.530 --> 02:31.900
lista de valores individuales en el lugar donde usaste un Operador,

02:31.900 --> 02:33.950
así que aquí por ejemplo es una lista

02:33.950 --> 02:36.090
de argumentos pasados a push y ahora un

02:36.090 --> 02:39.180
lugar donde podrías usar eso es directamente cuando creas

02:39.180 --> 02:41.740
un nuevo array.

02:41.740 --> 02:46.220
Allí también se puede extender una matriz existente en esa matriz.

02:46.220 --> 02:48.950
Así que, básicamente, siempre que necesites una lista de valores

02:48.950 --> 02:51.460
separada por comas, puedes utilizar el operador Spread

02:51.460 --> 02:54.360
con un array para obtener dicha lista separada por comas.

02:54.360 --> 02:56.660
Esa es la idea del Operador Spread y por

02:56.660 --> 02:59.230
lo tanto es realmente útil para sacar elementos

02:59.230 --> 03:00.663
de un array.

03:01.860 --> 03:04.380
El Operador Spread, todo lo que no sólo

03:04.380 --> 03:07.880
existe en los arrays, también existe en los objetos.

03:07.880 --> 03:10.990
Digamos que tenemos una persona que tiene una clave

03:10.990 --> 03:14.070
de nombre, Max y una clave h que es 30 y ahora queremos

03:14.070 --> 03:16.640
crear una persona copiada.

03:16.640 --> 03:19.060
Ahora bien, si asignamos una persona

03:19.060 --> 03:22.680
así, lo que estamos haciendo es copiar el puntero a este

03:22.680 --> 03:25.000
objeto persona en memoria en esta constante

03:25.000 --> 03:27.050
de copia de persona.

03:27.050 --> 03:30.470
Y de nuevo, comprueba mis recursos de valores de referencia

03:30.470 --> 03:32.360
adjuntos si eso no te dice mucho.

03:32.360 --> 03:36.190
Por lo tanto, no estamos creando realmente una copia de ese objeto.

03:36.190 --> 03:38.610
Ahora, para crear una copia real, podemos utilizar

03:38.610 --> 03:40.880
el operador de propagación con objetos.

03:40.880 --> 03:43.400
Creamos un nuevo objeto con llaves rizadas

03:43.400 --> 03:46.510
y luego usamos el Operador Spread, tres puntos con

03:46.510 --> 03:49.630
nuestro primer objeto que quiere copiar.

03:49.630 --> 03:52.970
Ahora lo que hace es sacar todos los elementos, pero por

03:52.970 --> 03:56.310
supuesto aquí los elementos son pares clave-valor no valores

03:56.310 --> 03:58.630
individuales como un array.

03:58.630 --> 04:00.550
Aquí tenemos pares clave-valor.

04:00.550 --> 04:04.110
Así que estos pares clave-valor se sacan de ahí y luego

04:04.110 --> 04:08.010
se pueden usar en cualquier lugar donde se necesiten pares clave-valor,

04:08.010 --> 04:11.310
que típicamente es un objeto nunca al que se podrían

04:11.310 --> 04:12.920
añadir.

04:12.920 --> 04:15.447
Por lo tanto, a este objeto, que de otro modo

04:15.447 --> 04:19.100
estaría vacío, se le añaden ahora los pares clave-valor de persona

04:19.100 --> 04:21.240
y, puesto que creamos un nuevo objeto

04:21.240 --> 04:23.700
aquí, y sólo lo añadimos a los pares clave-valor,

04:23.700 --> 04:27.310
obtenemos una copia perfecta del objeto original y no sólo del

04:27.310 --> 04:29.080
puntero que apunta al objeto en

04:29.080 --> 04:30.803
memoria.
