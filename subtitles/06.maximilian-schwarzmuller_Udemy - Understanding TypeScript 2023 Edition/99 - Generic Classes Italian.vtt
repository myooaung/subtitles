WEBVTT

00:02.270 --> 00:04.390
Istruttore: Ok, basta parlare di funzioni generiche.

00:04.390 --> 00:06.490
Li utilizzeremo sempre durante questo corso,

00:06.490 --> 00:08.150
per tutto il progetto del corso.

00:08.150 --> 00:10.390
Quindi questo dovrebbe essere sempre più

00:10.390 --> 00:11.890
chiaro, più ci lavoriamo.

00:11.890 --> 00:14.823
Si spera che l'idea generale sia già chiara.

00:15.660 --> 00:18.490
Le funzioni generiche, però, non sono tutto ciò che

00:18.490 --> 00:20.550
possiamo usare: ci sono anche le classi

00:20.550 --> 00:21.560
generiche e quindi

00:21.560 --> 00:23.740
vediamo come creare una classe generica

00:23.740 --> 00:25.170
e perché potremmo farlo, perché

00:25.170 --> 00:27.760
potrebbe essere utile per noi.

00:27.760 --> 00:31.950
Potremmo creare una classe di archiviazione.

00:31.950 --> 00:36.060
Una classe, per esempio, che ha una proprietà privata data.

00:36.060 --> 00:38.850
Che alla fine conterrà un array di dati.

00:38.850 --> 00:40.940
Poi ha un metodo addItem, che prende

00:40.940 --> 00:44.200
il nostro elemento e che deve essere aggiunto ai dati

00:44.200 --> 00:45.763
con push, diciamo.

00:48.570 --> 00:50.830
E abbiamo un metodo removeItem, che prende

00:50.830 --> 00:52.173
il nostro elemento, dove

00:53.010 --> 00:57.740
potremmo dire questo. dati. e poi dobbiamo solo

00:57.740 --> 01:02.910
ottenere l'indexOff(item) e unire un elemento.

01:02.910 --> 01:06.030
Ecco come rimuovere un elemento da un array.

01:06.030 --> 01:07.873
E naturalmente getItems, che restituisce,

01:09.750 --> 01:13.120
diciamo, una copia di questo. dati, come con l'operatore di

01:13.120 --> 01:15.770
diffusione che avete imparato a conoscere.

01:16.610 --> 01:17.443
Ora possiamo farlo

01:17.443 --> 01:19.450
e riceviamo una serie di errori.

01:19.450 --> 01:20.500
Si verificano diversi errori,

01:20.500 --> 01:23.900
uno dei quali è dovuto al fatto che il nome Storage è un nome riservato, quindi chiamiamolo

01:23.900 --> 01:25.230
Datastorage.

01:25.230 --> 01:26.620
È facile sbarazzarsene.

01:26.620 --> 01:27.920
Anche qui si verifica un errore,

01:27.920 --> 01:29.400
perché non si dice nulla sul tipo

01:29.400 --> 01:30.880
di dati che si stanno memorizzando

01:30.880 --> 01:32.960
e sul tipo di elemento che si trova qui.

01:32.960 --> 01:35.870
Ed è proprio qui che possiamo trasformarla in una classe generica,

01:35.870 --> 01:38.860
perché potrebbe non interessarvi il tipo di dati.

01:38.860 --> 01:40.880
Vogliamo assicurarci che siano dati

01:40.880 --> 01:42.410
uniformi, quindi solo stringhe,

01:42.410 --> 01:44.830
solo numeri o solo oggetti.

01:44.830 --> 01:47.550
Ma a parte questo, non mi interessa.

01:47.550 --> 01:50.820
Quindi, potremmo trasformarla in una classe generica, aggiungendo

01:50.820 --> 01:53.300
delle parentesi angolari dopo il nome della classe

01:53.300 --> 01:56.330
e poi ancora T, U, qualsiasi cosa si voglia usare come identificatore,

01:56.330 --> 02:00.110
e aggiungere questo qui come tipo generico.

02:00.110 --> 02:01.083
Ora possiamo

02:01.083 --> 02:04.490
dire che questo è un array di tipo T, quindi memorizza

02:04.490 --> 02:07.413
dati di quel tipo generico.

02:07.413 --> 02:09.670
Pertanto, qui aggiungiamo tali

02:09.670 --> 02:12.400
dati e cerchiamo di rimuoverli.

02:12.400 --> 02:15.140
Pertanto, qui si ottiene correttamente

02:15.140 --> 02:18.490
item che restituisce un array di tipi generici.

02:18.490 --> 02:20.860
Ora possiamo creare diversi archivi,

02:20.860 --> 02:24.690
come il nostro sting o il nostro textStorage, chiamando

02:24.690 --> 02:31.250
new DataStorage e impostando il tipo generico come stringa.

02:31.250 --> 02:33.070
E poi qui, in textStorage, posso chiamare

02:33.070 --> 02:34.340
addItem e se provo ad aggiungere

02:34.340 --> 02:36.410
un numero ottengo un errore, perché sto

02:36.410 --> 02:37.513
dicendo che questo sarà

02:37.513 --> 02:40.800
un DataStorage che memorizza solo numeri.

02:40.800 --> 02:45.800
Quindi, posso memorizzare Max qui, e forse anche Manu, e poi

02:46.830 --> 02:51.450
chiamare textStorage. removeItem('Max') e poi

02:51.450 --> 02:55.073
console. log. textStorage. getItems.

02:56.520 --> 02:58.870
Tutto questo dovrebbe funzionare se lo

02:58.870 --> 03:00.300
salviamo, perché è un tipo

03:00.300 --> 03:03.103
generico, e alla fine abbiamo solo Manu.

03:04.400 --> 03:08.240
Si tratta quindi di una semplice classe generica che possiamo creare.

03:08.240 --> 03:10.500
Ora, perché costruire una classe così generica?

03:10.500 --> 03:11.770
Come ho detto, perché

03:11.770 --> 03:14.220
forse non vogliamo memorizzare

03:14.220 --> 03:17.110
solo testi, ma anche numeri in un altro

03:17.110 --> 03:18.950
archivio dati.

03:18.950 --> 03:21.510
Quindi si può creare un DataStorage di questo tipo

03:21.510 --> 03:23.810
e impostarlo su number assicura che ora si possano

03:23.810 --> 03:26.250
aggiungere solo numeri a questo storage.

03:26.250 --> 03:28.330
Naturalmente, si può anche impostare un archivio che consenta

03:28.330 --> 03:30.520
entrambe le cose, utilizzando un tipo di unione.

03:30.520 --> 03:32.550
Quindi, abbiamo la massima flessibilità,

03:32.550 --> 03:36.470
ma diamo al tipo alcune informazioni aggiuntive, che rendono

03:36.470 --> 03:38.490
questa classe flessibile e ancora

03:38.490 --> 03:41.450
fortemente tipizzata.

03:41.450 --> 03:43.470
Proprio come abbiamo fatto con le funzioni.

03:43.470 --> 03:46.910
Davvero flessibile e con un supporto di tipo perfetto.

03:46.910 --> 03:49.900
Questa è l'idea alla base dei tipi generici.

03:49.900 --> 03:52.680
Quindi, possiamo farlo con la classe DataStorage,

03:52.680 --> 03:53.750
memorizzando stringhe,

03:53.750 --> 03:56.513
numeri o quello che vogliamo.

03:57.790 --> 04:01.300
Avremo però un problema con la nostra classe DataStorage.

04:01.300 --> 04:04.880
Diciamo che qui ho il mio archivio oggetti, ora posso creare

04:04.880 --> 04:07.090
un nuovo DataStorage e dire che voglio

04:07.090 --> 04:10.490
memorizzare oggetti, giusto, voglio memorizzare

04:10.490 --> 04:12.270
oggetti e naturalmente possiamo

04:12.270 --> 04:17.270
andare all'archivio oggetti e aggiungere un elemento.

04:17.300 --> 04:20.460
Diciamo che un oggetto che ho chiamato Max è lì dentro.

04:20.460 --> 04:22.920
Memorizziamo anche un altro oggetto,

04:22.920 --> 04:24.760
dove memorizzo Manu.

04:24.760 --> 04:26.770
Quindi, diciamo che stiamo facendo alcune

04:26.770 --> 04:28.310
cose nel nostro codice e poi, in

04:28.310 --> 04:29.740
un momento successivo, voglio

04:29.740 --> 04:34.100
rimuovere l'elemento, voglio rimuovere l'elemento con il nome: 'Manu' qui.

04:34.100 --> 04:37.863
E poi, voglio consolare. log. objStorage. getItems.

04:39.450 --> 04:40.550
Così.

04:40.550 --> 04:41.883
Se lo salviamo, vediamo

04:42.920 --> 04:45.840
che c'è un oggetto che è Max.

04:45.840 --> 04:47.470
Quindi sembra tutto a posto.

04:47.470 --> 04:49.140
Ora, non è molto buono.

04:49.140 --> 04:52.490
Diciamo che ora voglio rimuovere Max, quindi ora

04:52.490 --> 04:55.740
dovrebbe rimanere Manu nell'archivio dati.

04:55.740 --> 04:59.653
Quindi, se ricarico, un pozzo, è ancora Max.

05:00.550 --> 05:03.660
Il problema è che stiamo lavorando con degli oggetti e, come

05:03.660 --> 05:07.350
sapete, gli oggetti in JavaScript sono tipi di riferimento.

05:07.350 --> 05:09.440
Ora, attaccate per trovare una risorsa aggiuntiva,

05:09.440 --> 05:11.460
che vi permetta di immergervi nel riferimento.

05:11.460 --> 05:12.730
Mentre i valori primitivi,

05:12.730 --> 05:14.650
qui presumo che sappiate la differenza

05:14.650 --> 05:16.970
perché è una cosa fondamentale di JavaScript,

05:16.970 --> 05:19.060
totalmente estranea a typescript.

05:19.060 --> 05:20.600
Il problema è che il modo in

05:20.600 --> 05:22.300
cui la nostra classe è costruita

05:22.300 --> 05:26.243
con questa logica su come i dati vengono rimossi e identificati,

05:27.080 --> 05:29.580
non sta facendo un buon lavoro quando lavoriamo

05:29.580 --> 05:32.200
con valori non primitivi.

05:32.200 --> 05:35.130
Quindi, quando lavoriamo con oggetti o array, perché

05:35.130 --> 05:37.840
indexOf, se passiamo un oggetto qui, non funzionerà

05:37.840 --> 05:40.910
perché tecnicamente questo è un nuovo oggetto.

05:40.910 --> 05:43.800
Potrebbe assomigliare a questo, ma non funziona perché

05:43.800 --> 05:46.520
tecnicamente si tratta di un oggetto nuovo in memoria

05:46.520 --> 05:48.290
con un indirizzo diverso.

05:48.290 --> 05:52.110
In effetti, JavaScript cercherà l'indirizzo e fondamentalmente

05:52.110 --> 05:54.930
non lo troverà, quindi rimuoverà l'ultimo

05:54.930 --> 05:58.453
elemento dell'array, perché alla fine restituisce

05:59.510 --> 06:01.473
-1.

06:02.419 --> 06:06.070
IndexOf restituisce -1 anche se non trova nulla.

06:06.070 --> 06:07.990
Ciò significa che parte dalla fine dell'array,

06:07.990 --> 06:09.770
come è normale comportamento di Javascript,

06:09.770 --> 06:11.921
e rimuove l'ultimo elemento dell'array.

06:11.921 --> 06:14.190
Ecco perché ha funzionato per Manu, non ha funzionato

06:14.190 --> 06:16.810
davvero, ma ha funzionato accidentalmente, ma perché

06:16.810 --> 06:19.880
non funziona per Max: per ora rimuoviamo sempre l'ultimo elemento

06:19.880 --> 06:23.670
dell'array, poiché non possiamo identificarlo.

06:23.670 --> 06:25.890
Ora, una soluzione per risolvere il

06:25.890 --> 06:29.140
problema è controllare se il nostro elemento è stato

06:29.140 --> 06:32.260
trovato, quindi possiamo verificare se questo codice

06:32.260 --> 06:36.260
è uguale a -1, il che significa che non è stato trovato.

06:36.260 --> 06:37.360
Così possiamo tornare indietro

06:37.360 --> 06:40.780
e assicurarci di non rimuovere per sbaglio l'articolo sbagliato.

06:40.780 --> 06:42.900
Ma naturalmente ora abbiamo appena sistemato quella

06:42.900 --> 06:44.850
barra, ma non abbiamo ancora uno stato interno

06:44.850 --> 06:46.580
che funzioni con gli oggetti.

06:46.580 --> 06:48.890
L'unico modo in cui potrebbe funzionare con gli

06:48.890 --> 06:51.740
oggetti è se passiamo di nuovo lo stesso identico oggetto.

06:51.740 --> 06:55.700
Quindi, se avessi il mio oggetto max memorizzato in una costante,

06:55.700 --> 06:58.840
come questa, e qui passassi l'oggetto max.

06:58.840 --> 07:02.050
Se faccio la stessa cosa qui, sto usando lo stesso, identico

07:02.050 --> 07:05.330
oggetto, lo stesso identico oggetto in memoria e quindi ora

07:05.330 --> 07:06.540
funzionerebbe.

07:06.540 --> 07:08.930
Questo sarebbe l'unico modo per farlo funzionare.

07:08.930 --> 07:12.340
Quindi, in questo caso, l'idea migliore potrebbe essere quella di

07:12.340 --> 07:16.150
assicurarsi che questo funzioni davvero solo con i valori primitivi.

07:16.150 --> 07:20.100
Quindi, potremmo dire che T estende stringhe,

07:20.100 --> 07:24.010
numeri e forse anche tutti i booleani.

07:24.010 --> 07:25.990
In pratica, ora diciamo che DataStorage

07:25.990 --> 07:27.920
deve funzionare solo con questi tipi.

07:27.920 --> 07:30.470
Pertanto, gli oggetti non sono più ammessi.

07:30.470 --> 07:32.500
Questo potrebbe essere meglio in questo

07:32.500 --> 07:35.220
caso, perché avremmo bisogno di un DataStorage più specializzato,

07:35.220 --> 07:38.290
che probabilmente funziona solo con gli oggetti e non con i valori

07:38.290 --> 07:40.080
primitivi.

07:40.080 --> 07:42.430
Per mettere a punto la nostra logica di recupero, per verificare

07:42.430 --> 07:44.800
la presenza di qualche iD nell'elemento che dovrebbe essere

07:44.800 --> 07:45.880
rimosso.

07:45.880 --> 07:46.970
Il modo in cui funziona qui,

07:46.970 --> 07:48.910
in realtà funziona solo per i tipi primitivi,

07:48.910 --> 07:52.320
quindi l'impostazione di questo vincolo è sicuramente una buona idea.

07:52.320 --> 07:55.610
E se lo salviamo, dopo averlo commentato, funziona

07:55.610 --> 07:57.253
di nuovo, naturalmente.

07:58.810 --> 08:00.540
È inutile dire che, ovviamente,

08:00.540 --> 08:02.620
anche in questo caso si può avere più

08:02.620 --> 08:04.310
di un tipo generico.

08:04.310 --> 08:05.910
Quando si lavora con le classi

08:05.910 --> 08:07.600
non si è limitati a un solo tipo.

08:07.600 --> 08:09.610
E si possono anche avere metodi,

08:09.610 --> 08:13.080
che hanno i loro tipi generici al posto delle classi.

08:13.080 --> 08:16.630
Quindi si possono introdurre nuovi tipi generici nei metodi della classe,

08:16.630 --> 08:18.010
se si ha un tipo generico che

08:18.010 --> 08:19.750
è necessario solo in un certo metodo

08:19.750 --> 08:21.580
e non nell'intera classe.

08:21.580 --> 08:23.000
Quindi siete davvero flessibili.

08:23.000 --> 08:25.570
Si possono usare i vincoli ovunque

08:25.570 --> 08:28.100
e, in generale, i tipi generici servono

08:28.100 --> 08:30.240
a rendere la vita più facile

08:30.240 --> 08:36.010
e a dare una combinazione perfetta di piena flessibilità.

08:36.010 --> 08:39.310
Possiamo usare qualsiasi valore primitivo e la sicurezza

08:39.310 --> 08:40.900
del tipo, perché sappiamo perfettamente

08:40.900 --> 08:42.820
cosa è memorizzato in questo DataStorage

08:42.820 --> 08:46.770
e cosa è memorizzato in questo DataStorage.

08:46.770 --> 08:50.660
Questa combinazione è la cosa fantastica che ci offrono

08:50.660 --> 08:52.283
i tipi generici.
