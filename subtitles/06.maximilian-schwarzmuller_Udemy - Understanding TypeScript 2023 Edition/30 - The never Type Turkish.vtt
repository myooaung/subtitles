WEBVTT

00:02.220 --> 00:03.760
Eğitmen: Bu modülde göstermek

00:03.760 --> 00:07.490
istediğim son ilginç tür asla türüdür.

00:07.490 --> 00:10.660
Şimdi void döndüren bir fonksiyon gördük.

00:10.660 --> 00:13.058
Yani bu hiçbir zaman bir şey döndürmez.

00:13.058 --> 00:17.380
Asla, işlevlerin döndürebileceği başka bir tür değildir.

00:17.380 --> 00:19.240
Ve bu kulağa garip gelebilir.

00:19.240 --> 00:21.110
Nasıl çalıştığına bir göz atalım.

00:21.110 --> 00:24.662
Diyelim ki bir generateError fonksiyonumuz var.

00:24.662 --> 00:28.280
Burada bir dize olan bir mesaj ve belki de bir sayı olabilecek

00:28.280 --> 00:31.610
bir hata kodu almayı bekliyorum.

00:31.610 --> 00:33.700
Şimdi bu işlevlerin içinde, diyelim

00:33.700 --> 00:35.130
ki bir hata atıyoruz.

00:35.130 --> 00:37.760
Yani bu aslında hata nesneleri üreten ve

00:37.760 --> 00:41.500
bunları fırlatan bir yardımcı fonksiyon olmalıdır.

00:41.500 --> 00:42.990
Yani burada JavaScript'te yapabileceğimiz

00:42.990 --> 00:44.380
gibi bir nesne fırlatabiliriz.

00:44.380 --> 00:47.366
Herhangi bir nesneyi veya herhangi bir değeri hata

00:47.366 --> 00:49.930
olarak fırlatabiliriz ve bunun bir mesaj özelliği

00:49.930 --> 00:53.990
olmalıdır, burada mesaj argümanımın değerini saklıyorum.

00:53.990 --> 00:56.390
Ve bir hata kodu özelliğine sahip olmak istiyorum,

00:56.390 --> 00:59.417
diyelim ki kelimeyi sil, kod argümanı .

01:00.330 --> 01:02.390
Yani geçersiz fonksiyonla

01:02.390 --> 01:06.600
ve bunu örneğin bir hata oluştuğunda ve 500 koduyla

01:06.600 --> 01:09.640
çağırabiliriz.

01:09.640 --> 01:12.213
Bunu yaparsak ve bu dosyayı burada derlersek,

01:14.120 --> 01:17.080
bu yeniden yüklendiğinde hatamızı, yani burada

01:17.080 --> 01:19.150
bir hata aldığımızı görürüz.

01:19.150 --> 01:21.670
Bu kulağa oldukça soyut gelebilir ama aslında

01:21.670 --> 01:22.850
öyle değil.

01:22.850 --> 01:24.640
Bunun gibi yardımcı işlevlere

01:24.640 --> 01:27.850
sahip olmak, uygulamanızın 10 farklı yerinde manuel olarak

01:27.850 --> 01:30.270
hata vermek istemediğiniz ve sizin için hata

01:30.270 --> 01:32.540
nesnesini oluşturan ve belki de hemen atan

01:32.540 --> 01:35.380
tek bir kullanışlı işleve ulaşmak istediğiniz daha

01:35.380 --> 01:37.450
büyük uygulamalarda oldukça standart

01:37.450 --> 01:39.350
olacaktır, böylece bu işlevi farklı

01:39.350 --> 01:42.300
girdilerle çağırabilirsiniz, ancak her zaman bir

01:42.300 --> 01:44.690
hata atılır.

01:44.690 --> 01:47.010
Şimdi bu fonksiyonla ilgili ilginç olan

01:47.010 --> 01:49.048
şey, sadece void döndürmemesi.

01:49.048 --> 01:52.385
Aslında void döndürdüğünü belirtebilirim,

01:52.385 --> 01:54.545
çünkü elbette hiçbir şey döndürmez,

01:54.545 --> 01:58.030
ama aslında sadece hiçbir şey döndürmez, tamamen

01:58.030 --> 02:02.630
dürüst olursak, bu işlev hiçbir zaman döndürmez.

02:02.630 --> 02:05.518
Bu işlev asla bir dönüş değeri üretmez.

02:05.518 --> 02:08.860
Buradaki dönüş değerini bir konsol günlüğü sonucuna

02:08.860 --> 02:11.193
geri yüklemeye çalışırsam ve kodumu

02:12.040 --> 02:16.240
bu yürütmede derlersem, burada günlüğe kaydedilen bir tanımlanmamış

02:16.240 --> 02:19.630
olmadığını görürüz, çünkü bir hata atıldığından,

02:19.630 --> 02:25.330
bu aslında betiğimizi çökertir, diyebilirsiniz.

02:25.330 --> 02:27.080
Senaryomuzu iptal ediyor.

02:27.080 --> 02:30.290
Ve bu işlev için durum her zaman böyle olacaktır.

02:30.290 --> 02:32.210
Elbette bu kodda devam edebilmek

02:32.210 --> 02:34.260
için try catch'e sarabiliriz, ancak

02:34.260 --> 02:37.620
bu fonksiyon aslında hiçbir zaman bir değer üretmez.

02:37.620 --> 02:41.060
Bu fonksiyon, try catch kullanıyorsanız her

02:41.060 --> 02:42.910
zaman kodu veya kodun bu bölümünü

02:42.910 --> 02:44.720
çökertir ve bu nedenle hiçbir

02:44.720 --> 02:47.910
zaman bir şey döndürmez.

02:47.910 --> 02:50.400
Dolayısıyla bu fonksiyonun dönüş tipi

02:50.400 --> 02:54.483
aslında sadece void değil, aynı zamanda never'dır.

02:55.710 --> 02:56.700
Şimdi ilginç olan şey,

02:56.700 --> 02:59.060
never ataması yapmadan üzerine gelirseniz,

02:59.060 --> 03:01.680
çıkarılan türün void olduğunu görürsünüz.

03:01.680 --> 03:05.410
Alls çünkü never daha yeni bir türdür, bir süredir kullanılmaktadır,

03:05.410 --> 03:07.060
ancak TypeScript'in ilk sürümlerinde

03:07.060 --> 03:10.000
yerleşik değildir ve bu nedenle genellikle void

03:10.000 --> 03:12.620
varsayılır ve bu şekilde bırakmak korkunç

03:12.620 --> 03:15.417
değildir.

03:15.417 --> 03:17.740
Ancak çok açık olabilir ve bunun asla

03:17.740 --> 03:21.470
bir şey döndürmediğini açıkça belirtmek için dönüş türü olarak

03:21.470 --> 03:24.490
never'ı açıkça ayarlayabilirsiniz.

03:24.490 --> 03:26.770
Dolayısıyla, kod kalitesi açısından bakıldığında,

03:26.770 --> 03:29.560
bu, niyetiniz konusunda daha net olabilir ve kodunuzu

03:29.560 --> 03:30.680
okuyan geliştiricilerimiz

03:30.680 --> 03:32.330
için bu işlevin hiçbir zaman hiçbir

03:32.330 --> 03:35.850
şey döndürmemesinin ve esasen kodunuzu veya kodun o bölümünü çökertmesinin

03:35.850 --> 03:40.954
veya bozmasının amaçlandığını gerçekten açık hale getirebilir.

03:40.954 --> 03:43.890
Bu arada, asla geri dönmeyecek bir başka işlev

03:43.890 --> 03:47.190
de sonsuz döngüye sahip bir işlev olacaktır.

03:47.190 --> 03:49.370
Yani eğer while (true) varsa, bu sonsuz

03:49.370 --> 03:51.060
bir döngü yaratır ve bu nedenle

03:51.060 --> 03:52.790
de asla geri dönmeyen bir fonksiyon

03:52.790 --> 03:54.410
olur.

03:54.410 --> 03:56.070
Buradaki hata fonksiyonu veya

03:56.070 --> 03:58.852
donmuş bir hata üreten fonksiyon muhtemelen daha

03:58.852 --> 04:01.305
yaygın bir kullanım durumudur.

04:01.305 --> 04:04.500
Yani asla, buradaki gibi durumlar için fonksiyonlarda

04:04.500 --> 04:06.230
kullanabileceğiniz ilginç

04:06.230 --> 04:08.553
bir tür.
