WEBVTT

00:02.160 --> 00:04.860
Moderator: Nachdem wir nun ein weiteres schönes Beispiel gesehen haben,

00:04.860 --> 00:06.440
wie wir mit Dekoratoren arbeiten können,

00:06.440 --> 00:09.040
gibt es noch ein letztes Beispiel, auf das ich eingehen möchte.

00:09.040 --> 00:11.997
Und das sind die Dekoratoren für die Validierung.

00:11.997 --> 00:14.560
Zu diesem Zweck werde ich am Ende der

00:14.560 --> 00:17.733
Datei eine weitere neue Klasse hinzufügen.

00:18.780 --> 00:20.530
Das könnte ein Kurs sein.

00:20.530 --> 00:23.903
Ein Kurs sollte nun einen Titel haben, der eine Zeichenkette ist.

00:25.430 --> 00:27.483
Und vielleicht einen Preis, der eine Zahl ist.

00:29.730 --> 00:32.640
Dann haben wir hier einen Konstruktor, in dem wir beide Werte

00:32.640 --> 00:34.440
erhalten, und ich verwende hier absichtlich

00:35.550 --> 00:37.780
nicht die Abkürzung, damit ich einfach Eigenschaftsdekoratoren

00:37.780 --> 00:40.953
hinzufügen kann.

00:42.690 --> 00:44.560
Dann setze ich diesen Titel gleich

00:44.560 --> 00:46.653
t und diesen Preis gleich p.

00:47.990 --> 00:50.530
Wenn wir nun diesen Kurs instanziieren wollen, müssen wir

00:50.530 --> 00:53.610
natürlich einen gültigen Titel und einen gültigen Preis angeben.

00:53.610 --> 00:56.730
Ein häufiges Szenario, das in manchen Anwendungen

00:56.730 --> 00:59.630
vorkommt, ist, dass Sie Daten abrufen, z. B. von

00:59.630 --> 01:03.340
einer Webressource, und Daten erhalten, von denen Sie vermuten,

01:03.340 --> 01:05.854
dass Sie einige Kurse haben, aber Sie wissen

01:05.854 --> 01:08.110
es nicht genau.

01:08.110 --> 01:12.839
Oder, ein anderes mögliches Szenario, Sie lassen die Benutzer die Daten eingeben und wollen diese Daten

01:12.839 --> 01:15.490
einfach zuordnen und einen neuen Kurs mit den vom Benutzer

01:15.490 --> 01:18.370
eingegebenen Daten handeln, wobei Sie davon ausgehen, dass

01:18.370 --> 01:21.280
sie richtig sind, aber Sie sind nicht sicher, dass sie richtig

01:21.280 --> 01:22.500
sind, und deshalb wollen Sie

01:22.500 --> 01:24.210
die Eingabe validieren.

01:24.210 --> 01:26.380
Das ist das Szenario, das ich hier vortäuschen möchte.

01:26.380 --> 01:29.940
Sagen wir, in unserer Index-HTML-Datei haben wir hier ein einfaches

01:30.894 --> 01:32.840
Formular und ich werde es nicht stylen,

01:32.840 --> 01:36.074
also wird es jetzt so schön sein, aber wir haben hier ein einfaches

01:36.074 --> 01:41.074
Formular mit der Eingabe vom Typ Text und einem Platzhalter von Titel, upps, Kurs, Titel und

01:41.390 --> 01:44.620
einer id von sagen wir Titel und darunter haben wir eine Zahleneingabe,

01:44.620 --> 01:46.870
wo der Typ der ganze Text ist, aber es ist der

01:46.870 --> 01:50.605
Kurspreis und die id ist Preis.

01:50.605 --> 01:55.030
Und dann haben wir unsere Schaltfläche, mit der wir das abschicken.

01:55.030 --> 02:00.030
Die Schaltfläche ist also vom Typ submit.

02:00.040 --> 02:02.780
Es handelt sich also um ein sehr einfaches Formular, und wie gesagt, es ist

02:02.780 --> 02:04.280
nicht besonders schön, wenn wir es uns hier

02:04.280 --> 02:06.070
ansehen, aber es hat alles, was wir brauchen.

02:06.070 --> 02:08.763
Schließen wir nun einen Hörer an das Formular an.

02:09.830 --> 02:14.780
Hier habe ich also meine courseForm, die ich mit document, querySelector, form erhalten kann, und

02:14.780 --> 02:18.840
ich füge das Ausrufezeichen hinzu, weil ich weiß, dass ich eines erhalten werde,

02:18.840 --> 02:21.910
so dass dies nicht null sein wird, und dann können wir auf dem Formular

02:21.910 --> 02:25.050
addEventListener, den Submit-Ereignis-Listener, und dann erhalten

02:26.390 --> 02:29.300
wir das Ereignisobjekt, das in die Funktion übergeben wird,

02:29.300 --> 02:32.360
die ich automatisch zugewiesen habe.

02:32.360 --> 02:35.450
Dort möchte ich das Ereignis preventDefault aufrufen, damit wir das Formular

02:35.450 --> 02:38.030
nicht abschicken und keine http-Anfrage senden.

02:38.030 --> 02:40.570
Und dann wollen wir die Daten für den Titel

02:40.570 --> 02:42.910
und den Preis extrahieren.

02:42.910 --> 02:45.779
Der Titel kann also extrahiert werden, indem man

02:45.779 --> 02:49.700
auf document, querySelector, zugreift, oder tatsächlich, da

02:49.700 --> 02:54.700
wir eine id zugewiesen haben, getElementById, title, und wir wissen, dass dies

02:55.560 --> 02:59.760
ein HTMLInputElement sein wird, also können wir typecasting verwenden,

02:59.760 --> 03:01.700
um typescript davon wissen zu lassen,

03:01.700 --> 03:06.174
und der Preis ist document, getElementById, price und wir können dies auch

03:06.174 --> 03:09.672
in ein InputElement umwandeln.

03:09.672 --> 03:11.320
Und ich eigentlich dort für diese

03:11.320 --> 03:14.520
sind die Elemente, so dass wir die Konstanten zu titleEL und priceEl

03:14.520 --> 03:17.779
umbenennen und den konkreten Titel können wir jetzt gehen, um titleEl,

03:17.779 --> 03:20.930
Zugriff auf Wert-Eigenschaft und den Preis zu erhalten, können

03:20.930 --> 03:23.400
wir das gleiche für die priceElement tun und den Wert

03:23.400 --> 03:25.260
gibt es auch, und ich möchte als eine Zahl

03:25.260 --> 03:26.840
hinzufügen, so füge ich das Plus

03:26.840 --> 03:30.060
vor, um es in eine Zahl zu konvertieren.

03:30.060 --> 03:34.017
Das war's, aber jetzt möchte ich einen neuen Kurs mit diesen

03:34.017 --> 03:36.090
Informationen erstellen.

03:36.090 --> 03:39.060
So, hier haben wir den erstellten Kurs, wo

03:39.060 --> 03:43.850
ich einen neuen Kurs aufrufen kann und ich gebe Titel und Preis ein.

03:43.850 --> 03:46.770
Nun akzeptiert typescript dies, da title eine Zeichenkette ist,

03:46.770 --> 03:48.640
und da ich diese Eingabe in eine Zahl umwandle,

03:48.640 --> 03:50.200
wird der Preis eine Zahl sein.

03:50.200 --> 03:54.160
Wenn ich dann den erstellten Kurs über die Konsole protokolliere, können wir überprüfen,

03:54.160 --> 03:55.530
ob dies funktioniert.

03:55.530 --> 03:58.693
Speichern wir das, laden wir neu, löschen wir vielleicht die Konsole, damit

03:58.693 --> 04:00.680
wir die Ausgabe deutlich sehen können, und fügen

04:00.680 --> 04:02.400
wir dann hier einen neuen Kurs hinzu.

04:02.400 --> 04:05.785
Javascript der komplette Leitfaden kostet $199 und

04:05.785 --> 04:08.010
das scheint zu funktionieren.

04:08.010 --> 04:11.010
Leider funktioniert das aber nur,

04:11.010 --> 04:13.290
wenn ich nichts eingebe.

04:13.290 --> 04:16.600
Wenn ich nun auf "Speichern" klicke, wird dieser Kurs erstellt.

04:16.600 --> 04:19.820
Technisch gesehen ist dies ein gültiger Kurs, aber natürlich

04:19.820 --> 04:23.121
ist er für unsere Anwendung nicht wirklich gültig.

04:23.121 --> 04:26.220
Wir wollen wahrscheinlich einen Titel, der nicht leer ist,

04:26.220 --> 04:28.620
und einen Preis, der größer als Null ist.

04:28.620 --> 04:30.660
Wir wollen also eine Validierung hinzufügen.

04:30.660 --> 04:32.670
Natürlich können wir hier einfach eine

04:32.670 --> 04:37.130
"if"-Prüfung hinzufügen und prüfen, ob title, trim, length größer als Null ist, was

04:37.130 --> 04:38.830
bedeutet, dass es nicht leer ist,

04:38.830 --> 04:41.100
und wo wir auch den Preis validieren.

04:41.100 --> 04:43.870
Das bedeutet aber, dass wir bei jeder Erstellung eines neuen

04:43.870 --> 04:47.880
Kurses die Validierungslogik hier hinzufügen müssen, bevor wir ihn hinzufügen.

04:47.880 --> 04:49.990
Wäre es nicht schön, wenn die Validierungslogik

04:49.990 --> 04:51.910
in der Kursklasse enthalten wäre, vielleicht

04:51.910 --> 04:53.940
mit Hilfe von Dekoratoren?

04:53.940 --> 04:56.770
Und das ist genau das, was ich hier tun will.

04:56.770 --> 04:59.910
Im nächsten Modul werde ich Ihnen ein Beispielpaket

04:59.910 --> 05:01.447
zeigen, das dies in

05:01.447 --> 05:04.861
einer etwas aufwändigeren Weise tut und das

05:04.861 --> 05:12.080
wir dann alle verwenden werden, um ein wenig damit herumzuspielen.

05:12.080 --> 05:14.530
Hier möchte ich dies jedoch mit meinen eigenen Dekoratoren

05:14.530 --> 05:16.300
implementieren und ich werde hier

05:16.300 --> 05:19.370
einen erforderlichen Dekorator hinzufügen und wir werden

05:19.370 --> 05:21.890
eine weitere Dekoratorfunktion hinzufügen, die

05:21.890 --> 05:24.433
ich PositiveNumber nennen werde.

05:26.710 --> 05:28.510
Ich habe hier also zwei Dekorateure.

05:28.510 --> 05:31.240
Und jetzt ist meine Idee, dass wir sie hier

05:31.240 --> 05:35.369
zu unseren Eigenschaften hinzufügen können, z.B. Required vor

05:35.369 --> 05:40.369
title und positiveNumber vor price und typescript registriert das irgendwo

05:41.740 --> 05:44.020
und dann haben wir eine dritte Funktion,

05:44.020 --> 05:49.020
validate, an die wir ein Objekt übergeben können, also ein beliebiges Objekt,

05:49.490 --> 05:54.490
und typescript schaut sich dann das Projekt an, findet jede Validierung, die

05:55.120 --> 05:58.780
wir vorher für diese Klasse für dieses Objekt registriert

05:58.780 --> 06:01.440
haben und wendet unsere Validierungslogik

06:01.440 --> 06:03.410
an.

06:03.410 --> 06:05.480
Das ist die Idee, die ich hier habe.

06:05.480 --> 06:08.240
Dies könnte also Teil einer Bibliothek eines Drittanbieters sein, die

06:08.240 --> 06:11.170
wir Ihnen zur Verfügung stellen, und dann importieren Sie einfach "required

06:11.170 --> 06:14.620
positive number" und "validate", um zunächst die Validatoren einzurichten und dann zu einem

06:14.620 --> 06:16.750
bestimmten Zeitpunkt "validate" aufzurufen.

06:16.750 --> 06:18.634
Wenn wir zum Beispiel den Kurs

06:18.634 --> 06:22.462
erstellt haben, können wir validate aufrufen und den Wert

06:22.462 --> 06:31.660
createdCourse übergeben, und wenn dieser nicht wahr ist, also sagen wir, dies sollte wahr oder falsch zurückgeben, wenn dies nicht wahr ist,

06:31.660 --> 06:35.040
dann geben wir einen Fehler aus oder zeigen eine Warnung

06:35.040 --> 06:40.040
an, ungültige Eingabe, bitte versuchen Sie es noch einmal, und nur sonst machen

06:41.100 --> 06:42.960
wir weiter.

06:42.960 --> 06:43.870
Das ist also meine Idee.

06:43.870 --> 06:46.540
Das können wir validate nennen, das true oder false zurückgibt.

06:46.540 --> 06:48.793
True, wenn sie gültig ist, false, wenn sie nicht

06:48.793 --> 06:51.670
gültig ist und wir das Ergebnis verwenden können.

06:51.670 --> 06:53.730
Wir haben also einige Dinge zu tun.

06:53.730 --> 06:56.290
Wir müssen sicherstellen, dass, wenn wir hier einen Dekorator

06:56.290 --> 06:59.350
hinzufügen, dieser auch irgendwo gespeichert wird.

06:59.350 --> 07:00.970
Denken Sie daran, dass dies ein Teil

07:00.970 --> 07:02.950
unserer eigenen Bibliothek eines Drittanbieters

07:02.950 --> 07:05.710
sein könnte, so dass wir dort eine Art von Speicher haben

07:05.710 --> 07:10.050
könnten, der speichert, dass für diese Klasse und diese Eigenschaft title zum Beispiel

07:10.050 --> 07:12.480
erforderlich sein soll.

07:12.480 --> 07:15.630
Und in validate können wir dann überprüfen, ob im Speicher für

07:15.630 --> 07:19.026
das Objekt, das wir bekommen haben, für die Klasse, auf der das Objekt

07:19.026 --> 07:21.990
basiert, ein Validator für den Titel, für den Preis usw.

07:21.990 --> 07:23.330
registriert ist.

07:23.330 --> 07:25.260
Und dann führen wir unsere Validierungslogik aus.

07:25.260 --> 07:26.453
Das ist meine Idee hier.
