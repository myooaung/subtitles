WEBVTT

00:02.100 --> 00:04.890
Giảng viên: Để hiểu về lớp chúng ta hãy hiểu

00:04.890 --> 00:07.040
về lập trình hướng đối tượng.

00:07.040 --> 00:10.050
Bây giờ, tùy thuộc vào trình độ kiến thức của

00:10.050 --> 00:12.560
bạn và nếu bạn đã làm việc với JavaScript

00:12.560 --> 00:15.340
hiện đại và có thể cả một số ngôn ngữ lập trình

00:15.340 --> 00:18.320
khác, bạn có thể biết các lớp ở đó dùng để làm

00:18.320 --> 00:22.270
gì và lập trình hướng đối tượng OOP là gì.

00:22.270 --> 00:24.570
Vì vậy, do đó, bạn cũng có thể bỏ qua bài

00:24.570 --> 00:27.720
giảng này để chuyển ngay đến phần chúng tôi viết mã.

00:27.720 --> 00:29.330
Nếu không, hãy chắc chắn gắn

00:29.330 --> 00:32.200
bó với tôi vì điều quan trọng là phải hiểu điều này.

00:32.200 --> 00:35.240
Ý tưởng đằng sau lập trình hướng đối tượng và các lớp

00:35.240 --> 00:38.550
sẽ rất quan trọng đối với điều đó như bạn sẽ thấy, đó là bạn

00:38.550 --> 00:41.630
có thể nói rằng bạn làm việc với các thực thể ngoài đời

00:41.630 --> 00:43.110
thực trong mã của mình.

00:43.110 --> 00:47.370
Vì vậy, bạn làm việc với những thứ trong mã của mình với các đối tượng

00:47.370 --> 00:52.110
giống với các đối tượng ngoài đời thực nhất có thể, ít nhất là để giúp bạn với

00:52.110 --> 00:54.410
tư cách là nhà phát triển dễ dàng suy

00:54.410 --> 00:56.250
luận về mã của mình hơn.

00:56.250 --> 00:59.150
Ví dụ: chúng tôi có thể đang xây dựng một cửa hàng trực tuyến và ở

00:59.150 --> 01:01.270
đó chúng tôi có thể có một danh sách sản phẩm.

01:01.270 --> 01:05.190
Do đó, chúng tôi có thể muốn làm việc với một đối tượng danh sách sản phẩm, đối tượng

01:05.190 --> 01:08.140
này có mọi thứ chúng tôi cần để quản lý danh sách sản phẩm.

01:08.140 --> 01:11.570
Một phương pháp để thêm sản phẩm vào danh

01:11.570 --> 01:13.370
sách sản phẩm chính.

01:13.370 --> 01:15.670
Vì vậy, ví dụ, đây có thể là một đối tượng chịu

01:15.670 --> 01:18.360
trách nhiệm hiển thị danh sách các sản phẩm và quản

01:18.360 --> 01:19.540
lý danh sách đó, danh sách

01:19.540 --> 01:22.840
này được tìm nạp từ một dịch vụ hoặc từ cơ sở dữ liệu.

01:22.840 --> 01:25.530
Vì vậy, sản phẩm này nắm giữ tất cả logic kết

01:25.530 --> 01:27.260
xuất, tìm nạp và quản lý.

01:27.260 --> 01:29.420
Bây giờ đó là một danh sách sản phẩm.

01:29.420 --> 01:32.510
Trong chương trình của chúng tôi vào trang web mà chúng tôi đang

01:32.510 --> 01:33.870
xây dựng, chúng tôi cũng có

01:33.870 --> 01:36.000
thể cần phải làm việc với từng sản phẩm.

01:36.000 --> 01:39.540
Vì vậy, chúng tôi cũng có thể muốn một đối tượng hoặc nhiều

01:39.540 --> 01:40.960
đối tượng; một cho mỗi sản

01:40.960 --> 01:43.930
phẩm chịu trách nhiệm quản lý một sản phẩm.

01:43.930 --> 01:47.180
Nó có thể giữ và hiển thị thông tin chi tiết về sản phẩm đó, có thể

01:47.180 --> 01:49.830
cho phép chúng tôi thêm sản phẩm đó vào giỏ hàng, những

01:49.830 --> 01:51.260
thứ tương tự như vậy.

01:51.260 --> 01:54.900
Vì vậy, khi chúng tôi muốn vẽ giao diện người dùng lên màn hình, chúng tôi

01:54.900 --> 01:57.010
muốn quản lý giao diện đó thông qua JavaScript

01:57.010 --> 01:58.740
và do đó thông qua TypeScript, sau

01:58.740 --> 02:00.550
đó chúng tôi có thể triển khai điều này

02:00.550 --> 02:02.970
với danh sách sản phẩm và đối tượng sản phẩm chứa

02:02.970 --> 02:05.370
logic để quản lý dữ liệu cơ bản, nhưng cũng để hiển

02:05.370 --> 02:07.760
thị nội dung trên màn hình.

02:07.760 --> 02:10.010
Và tất nhiên do đó hai đối tượng này

02:10.010 --> 02:11.940
sẽ có liên quan với nhau.

02:11.940 --> 02:14.790
Chúng tôi cũng có thể có một đối tượng giỏ hàng trên màn hình của

02:14.790 --> 02:16.410
mình, đối tượng này chịu trách nhiệm

02:16.410 --> 02:18.040
hiển thị và quản lý thẻ mua hàng.

02:18.040 --> 02:20.380
Tất nhiên nó cũng được kết nối với sản phẩm.

02:20.380 --> 02:22.930
Và do đó, nó chứa tất cả logic mà chúng

02:22.930 --> 02:24.880
ta cần để hiển thị thẻ mua sắm,

02:24.880 --> 02:27.240
đặt hàng và giao tiếp với máy chủ,

02:27.240 --> 02:28.073
v.v.

02:28.073 --> 02:31.190
Vì vậy, đó sẽ là một cách chúng tôi có thể nghĩ về ứng dụng

02:31.190 --> 02:33.010
mà chúng tôi đang xây dựng.

02:33.010 --> 02:35.590
Làm thế nào chúng ta có thể chia nó thành các phần hợp lý có ý nghĩa

02:35.590 --> 02:37.670
đối với chúng ta với tư cách là con người.

02:37.670 --> 02:40.320
Và trong mã trong TypeScript và JavaScript,

02:40.320 --> 02:42.920
trong hầu hết các ngôn ngữ lập trình hiện đại,

02:42.920 --> 02:46.750
điều này được hỗ trợ tích cực vì chúng ta có các đối tượng là cấu trúc

02:46.750 --> 02:48.900
dữ liệu phức tạp hơn chứa các thuộc tính

02:48.900 --> 02:50.640
và phương thức.

02:50.640 --> 02:53.340
Và tất nhiên, chúng tôi cũng có điều đó trong JavaScript.

02:53.340 --> 02:57.310
Nhưng chúng tôi cũng có thể có các lớp giúp chúng tôi làm điều đó.

02:57.310 --> 02:59.100
Bây giờ ý tưởng đằng sau các lớp học là gì?

02:59.100 --> 03:00.740
Và các trường hợp là gì?

03:00.740 --> 03:02.030
Khi chúng tôi nhận được

03:02.030 --> 03:04.690
các đối tượng này và khi thực hiện theo cách tiếp

03:04.690 --> 03:07.500
cận hướng đối tượng này, chúng tôi có thể xem xét việc

03:07.500 --> 03:11.130
chia ứng dụng hoặc logic ứng dụng của mình thành các đối tượng như

03:11.130 --> 03:13.750
vậy để quản lý các phần logic của chúng tôi.

03:13.750 --> 03:17.000
Bây giờ được kết nối với ý tưởng sử dụng các đối tượng

03:17.000 --> 03:19.340
này, tất nhiên là có tồn tại trong JavaScript,

03:19.340 --> 03:23.910
chúng ta có thể sử dụng các đối tượng ở đó như ý tưởng có các lớp.

03:23.910 --> 03:27.470
Đối tượng là những thứ cụ thể mà chúng ta làm việc với mã của mình.

03:27.470 --> 03:30.380
Các cấu trúc dữ liệu chúng tôi sử dụng để lưu trữ dữ liệu để

03:30.380 --> 03:33.450
lưu trữ các phương thức để thực thi các phương thức trên.

03:33.450 --> 03:36.570
Các lớp là bản thiết kế cho các đối tượng.

03:36.570 --> 03:40.880
Các lớp cho phép chúng ta xác định các đối tượng sẽ trông như thế nào; dữ liệu

03:40.880 --> 03:42.230
nào chúng nên chứa, phương

03:42.230 --> 03:44.070
thức nào chúng nên có, để chúng

03:44.070 --> 03:48.240
ta có thể dễ dàng xây dựng các đối tượng dựa trên các lớp này.

03:48.240 --> 03:51.830
Và sau đó chúng tôi gọi đây là các thể hiện của các lớp.

03:51.830 --> 03:54.830
Vì vậy, một đối tượng sau đó là một thể hiện của một

03:54.830 --> 03:56.850
lớp nếu nó dựa trên một lớp như vậy,

03:56.850 --> 03:59.900
để chúng ta có thể nhanh chóng sao chép nhiều đối tượng

03:59.900 --> 04:02.230
có cùng cấu trúc, cùng các phương thức

04:02.230 --> 04:04.090
dựa trên cùng một lớp.

04:04.090 --> 04:07.280
Vì vậy, các lớp giúp chúng ta xác định các đối tượng sẽ trông như

04:07.280 --> 04:10.170
thế nào, chúng có các thuộc tính và phương thức nào, v.v.

04:10.170 --> 04:14.920
Vì vậy, các lớp tồn tại để tăng tốc độ tạo các đối tượng.

04:14.920 --> 04:16.160
Và nó đơn giản là một giải

04:16.160 --> 04:20.070
pháp thay thế cho việc sử dụng ký hiệu đối tượng mà bạn đã biết.

04:20.070 --> 04:21.330
Họ chỉ đơn giản là làm cho nó dễ dàng hơn.

04:21.330 --> 04:24.620
Các lớp đơn giản giúp dễ dàng tạo nhiều đối tượng

04:24.620 --> 04:26.900
thường có cùng cấu trúc và cùng phương

04:26.900 --> 04:28.030
thức và có thể chỉ

04:28.030 --> 04:31.500
khác nhau về chi tiết dữ liệu chính xác được lưu trữ

04:31.500 --> 04:32.780
trong đó.

04:32.780 --> 04:34.540
Giả sử chúng ta có nhiều người mà chúng

04:34.540 --> 04:36.670
ta muốn đại diện bằng các đối tượng.

04:36.670 --> 04:39.330
Vâng, mỗi người có thể có một tên và một tuổi,

04:39.330 --> 04:40.830
các giá trị sẽ khác nhau,

04:40.830 --> 04:43.310
cấu trúc chung là như nhau.

04:43.310 --> 04:44.500
Vì vậy, đó là lý thuyết.

04:44.500 --> 04:46.113
Hãy xem nó trong thực tế.
