WEBVTT

00:02.450 --> 00:04.810
Instruktor: Więc teraz, gdy mamy zrozumienie, jak

00:04.810 --> 00:07.850
możemy zarządzać naszymi plikami za pomocą kompilatora, zanurkujmy

00:07.850 --> 00:09.870
w opcje kompilatora, ponieważ jest to naprawdę

00:09.870 --> 00:11.300
interesujące.

00:11.300 --> 00:13.860
Dzięki temu możemy kontrolować jak nasz

00:13.860 --> 00:16.620
kod TypeScript jest kompilowany, a więc nie

00:16.620 --> 00:18.360
tylko jakie pliki, ale również

00:18.360 --> 00:20.920
jak pliki, które się kompilują są traktowane

00:20.920 --> 00:23.230
przez TypeScript.

00:23.230 --> 00:26.760
A tam jak widać mamy garść opcji.

00:26.760 --> 00:29.560
Obok tych opcji masz krótkie wyjaśnienia.

00:29.560 --> 00:32.450
Niektóre wyjaśnienia są zapewne wielką krynicą.

00:32.450 --> 00:34.210
Inne są całkiem jasne.

00:34.210 --> 00:36.450
I powiem, że wiele z tych opcji, w większości

00:36.450 --> 00:39.950
projektów nie będzie miało znaczenia.

00:39.950 --> 00:43.900
Więc nie ustawisz wszystkich tych opcji, nawet nie blisko.

00:43.900 --> 00:46.070
Zazwyczaj można zignorować wiele z tych opcji.

00:46.070 --> 00:48.765
Teraz przez cały kurs będę się czepiał tutaj ważnych

00:48.765 --> 00:50.230
opcji, bo niektóre opcje

00:50.230 --> 00:52.140
mają sens dopiero wtedy, gdy poznamy

00:52.140 --> 00:53.911
daną funkcję.

00:53.911 --> 00:55.940
A ja chcę zanurkować w kilka opcji

00:55.940 --> 00:57.250
już teraz chociaż.

00:57.250 --> 01:00.840
A w tym celu przejrzyjmy plik od góry do dołu i zobaczmy

01:00.840 --> 01:02.340
co tam mamy.

01:02.340 --> 01:04.410
Zacznijmy od opcji docelowej.

01:04.410 --> 01:07.230
Jak widać, faktycznie jest to ustawione domyślnie.

01:07.230 --> 01:08.750
To nie jest komentowane.

01:08.750 --> 01:10.780
A co robisz z tą opcją, to mówisz

01:10.780 --> 01:15.530
TypeScriptowi, dla której docelowej wersji JavaScript chcesz skompilować

01:15.530 --> 01:16.970
kod.

01:16.970 --> 01:18.850
Ponieważ to, co robi TypeScript,

01:18.850 --> 01:21.600
to nie tylko kompilacja nowych funkcji, takich

01:21.600 --> 01:23.500
jak adnotacje typu, które nie

01:23.500 --> 01:26.960
istnieją w JavaScript, do kodu JavaScript.

01:26.960 --> 01:29.667
Więc nie zajmuje się tylko

01:29.667 --> 01:33.270
tym, że to tutaj działa.

01:33.270 --> 01:37.530
Kompiluje również kod do JavaScript, który działa

01:37.530 --> 01:41.370
w określonym zestawie przeglądarek.

01:41.370 --> 01:43.798
I w zasadzie definiujesz, które przeglądarki

01:43.798 --> 01:46.980
obsługują kod kompilacji, ustawiając cel.

01:46.980 --> 01:49.520
Domyślnym celem w tym projekcie, jak widzisz, początkowym

01:49.520 --> 01:52.430
celem, który jest ustawiony jest es5, co oznacza, że wszystkie

01:52.430 --> 01:55.517
rodzaje kodu są kompilowane w dół.

01:55.517 --> 01:57.550
Rzeczywiście możemy to zobaczyć.

01:57.550 --> 02:00.770
Jeśli uruchomię TSC tutaj, aby skompilować wszystkie moje pliki,

02:00.770 --> 02:03.260
widzimy w aplikacji. ts Używam let i const,

02:03.260 --> 02:05.732
ale w aplikacji. js, we se var.

02:05.732 --> 02:09.890
A dzieje się tak dlatego, że mamy target es5,

02:09.890 --> 02:13.816
a w świecie es5 nie mamy let i const.

02:13.816 --> 02:16.810
Więc dobrą rzeczą tutaj jest to, że możemy użyć TypeScript

02:16.810 --> 02:20.650
do generowania kodu, który działa również w starszych przeglądarkach.

02:20.650 --> 02:22.930
Ale to już całkowicie zależy od użycia, czy chcemy to zrobić.

02:22.930 --> 02:25.550
Może nie chcemy tego robić za pomocą TypeScript, ponieważ

02:25.550 --> 02:27.670
może mamy jakieś inne narzędzie do budowania,

02:27.670 --> 02:30.560
które zajmie się transpilacją JavaScript i dlatego nie chcemy,

02:30.560 --> 02:33.290
aby TypeScript to robił, a może chcemy wysłać kod, który

02:33.290 --> 02:35.340
działa tylko w nowoczesnych przeglądarkach,

02:35.340 --> 02:37.030
ponieważ wiemy, że nasza aplikacja

02:37.030 --> 02:41.170
będzie działać tylko w nowoczesnych przeglądarkach.

02:41.170 --> 02:44.160
I dlatego alternatywne opcje można zobaczyć tutaj,

02:44.160 --> 02:46.070
jeśli usuniesz wartość, a następnie

02:46.070 --> 02:48.080
tutaj w vscode przynajmniej, jeśli

02:48.080 --> 02:51.300
uderzysz Control + Space, aby uzyskać autouzupełnianie,

02:51.300 --> 02:54.180
widzisz garść sugestii i widzisz wszystkie dostępne

02:54.180 --> 02:56.450
wartości tutaj.

02:56.450 --> 02:58.700
Teraz z czasem to oczywiście się zmieni,

02:58.700 --> 03:01.900
ponieważ mamy nowe wersje JavaScript wydane.

03:01.900 --> 03:03.785
Widziałeś, że wcześniej ustawiliśmy to na es5.

03:03.785 --> 03:06.150
Jeśli w ogóle nie określisz celu, to w

03:06.150 --> 03:09.520
tej chwili TypeScript kompiluje się do es3 nawet, więc

03:09.520 --> 03:12.200
obsługuje jeszcze starszą wersję.

03:12.200 --> 03:15.130
Ale możesz też iść z es6, który jest bardziej nowoczesny,

03:15.130 --> 03:17.510
który na przykład obsługuje const i niech

03:17.510 --> 03:19.310
lub weźmie jeszcze nowszą wersję,

03:19.310 --> 03:24.310
es6 jest równoważny z es2015, tylko dla rekordu.

03:24.870 --> 03:27.480
Więc jeśli ustawimy to na przykład na es6, a ja

03:27.480 --> 03:29.580
ponownie uruchomię polecenie tsc po

03:29.580 --> 03:32.460
zmianie tsconfig. plik json, zobaczysz,

03:32.460 --> 03:35.440
że teraz w app. js, dostaliśmy let i const,

03:35.440 --> 03:38.130
ponieważ teraz to jest tam wspierane.

03:38.130 --> 03:39.340
Więc to zależy od ciebie.

03:39.340 --> 03:41.720
Oczywiście, im bardziej nowoczesną wersję

03:41.720 --> 03:43.641
JavaScript wybierzesz tutaj, tym

03:43.641 --> 03:47.450
bardziej zwięzły jest twój wygenerowany kod, ponieważ TypeScript

03:47.450 --> 03:50.440
musi skompilować mniej i mniej kodu, lub musi obejść

03:50.440 --> 03:54.010
nieistniejące funkcje w mniejszej liczbie sytuacji, a zatem

03:54.010 --> 03:59.560
skompilowany kod zwykle jest wykonywany bardziej zwięźle i krócej.

03:59.560 --> 04:01.150
Więc to jest cel.

04:01.150 --> 04:02.623
A co z innymi opcjami?
