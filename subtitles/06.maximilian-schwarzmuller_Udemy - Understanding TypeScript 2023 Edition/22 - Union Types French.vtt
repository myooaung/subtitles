WEBVTT

00:02.130 --> 00:02.963
Instructeur : Donc, nous avons

00:02.963 --> 00:05.180
couvert quelques-uns des types de base que TypeScript connaît.

00:05.180 --> 00:06.590
Maintenant, passons à autre chose.

00:06.590 --> 00:09.140
Pour cela, je vais renommer l'application. ts ici à objs-arrays-enums, ou quel

00:09.140 --> 00:11.670
que soit le nom que vous voulez lui donner, essentiellement pour que

00:11.670 --> 00:12.750
nous ayons toujours ce fichier,

00:12.750 --> 00:17.130
mais je vais créer une toute nouvelle application.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
de sorte que nous ayons à nouveau un fichier vide

00:18.860 --> 00:20.500
dans lequel nous pouvons travailler.

00:20.500 --> 00:22.550
Maintenant, dans ce fichier, je veux me plonger

00:22.550 --> 00:25.790
dans un autre type intéressant que vous trouverez dans TypeScript.

00:25.790 --> 00:28.640
Et c'est le type de syndicat.

00:28.640 --> 00:30.190
Qu'est-ce que c'est ?

00:30.190 --> 00:33.000
Revenons à notre fonction d'ajout, que nous avons écrite plus

00:33.000 --> 00:34.490
tôt, je vais la copier et la déplacer

00:34.490 --> 00:37.270
dans l'application. ts.

00:37.270 --> 00:39.190
Débarrassez-vous de ce commentaire ici,

00:39.190 --> 00:42.940
et ici sur add, fermons les bases. ts pour que nous nous débarrassions

00:42.940 --> 00:44.170
de cette erreur.

00:44.170 --> 00:47.970
Ici, dans l'add, je veux maintenant être plus flexible quant

00:47.970 --> 00:49.920
à ce que nous acceptons ici.

00:49.920 --> 00:52.570
Je vais aussi me débarrasser de showResult et de

00:52.570 --> 00:54.370
phrase, je n'en ai pas besoin.

00:54.370 --> 00:55.690
Et la seule chose que je veux

00:55.690 --> 00:58.590
faire est de calculer un résultat et de le renvoyer.

00:58.590 --> 01:01.960
Mais je veux être plus flexible en ce qui concerne les entrées.

01:01.960 --> 01:06.045
Auparavant, nous nous sommes assurés que nous ne travaillions qu'avec des chiffres.

01:06.045 --> 01:09.357
Disons maintenant que nous nommons cette combinaison et qu'elle

01:09.357 --> 01:13.190
doit fonctionner à la fois avec des nombres et des chaînes de caractères.

01:13.190 --> 01:15.710
Car il s'avère que nous pouvons combiner à la fois

01:15.710 --> 01:18.595
des nombres et des chaînes avec cet opérateur plus,

01:18.595 --> 01:21.650
la seule différence étant que dans un scénario, nous obtenons

01:21.650 --> 01:24.030
un nombre comme résultat, dans l'autre scénario,

01:24.030 --> 01:27.120
nous obtenons une chaîne concaténée, comme nous l'avons

01:27.120 --> 01:30.150
déjà vu au début de ce module.

01:30.150 --> 01:32.040
Mais je veux maintenant autoriser ce comportement,

01:32.040 --> 01:33.950
parce que vous pourriez avoir une application où

01:33.950 --> 01:36.740
vous voulez avoir une fonction de combinaison flexible qui fonctionne

01:36.740 --> 01:38.963
avec des nombres et des chaînes de caractères.

01:39.830 --> 01:42.360
Par conséquent, je vais également nommer

01:42.360 --> 01:47.340
cette entrée 1 ici, et cette entrée 2, et combiner ces deux maintenant.

01:47.340 --> 01:49.740
Mais nous aurons un problème bien sûr, pour l'instant

01:49.740 --> 01:53.180
nous avons défini les deux paramètres comme étant des nombres.

01:53.180 --> 01:56.050
Cela signifie que nous pouvons appeler cette fonction, pour autant

01:56.050 --> 01:58.190
que nous voulions travailler avec des chiffres.

01:58.190 --> 01:59.130
Disons qu'en bas,

01:59.130 --> 02:01.640
on crée une nouvelle constante, combinedAges.

02:02.931 --> 02:04.690
Et là, j'appelle combiner

02:04.690 --> 02:09.602
et passer en 30 et 26 ici comme des âges dans n'importe quelle application

02:09.602 --> 02:12.000
que nous construisons.

02:12.000 --> 02:15.014
Un autre journal après la console combinedAges, bien il ne

02:15.014 --> 02:17.240
devrait pas être trop surprenant que si nous

02:17.240 --> 02:19.830
compilons maintenant ce fichier ici, et nous rechargeons

02:19.830 --> 02:22.360
ensuite cette page, nous obtenons 56.

02:22.360 --> 02:24.690
Donc ça marche, on obtient ce nombre.

02:24.690 --> 02:26.710
Mais bien sûr, nous avons un problème si

02:26.710 --> 02:28.838
nous essayons de créer une chaîne ici.

02:28.838 --> 02:31.610
Noms combinés, par exemple.

02:31.610 --> 02:36.033
Si j'essaie de combiner Max et Anna ici, eh bien, nous obtenons immédiatement

02:37.230 --> 02:39.630
une erreur ici que Max n'est pas assignable

02:39.630 --> 02:42.320
au type nombre parce que ceci, bien sûr, est

02:42.320 --> 02:44.350
une chaîne.

02:44.350 --> 02:45.790
Bien entendu, nous pourrions modifier ce

02:45.790 --> 02:47.750
paramètre pour qu'il accepte les chaînes de caractères au

02:47.750 --> 02:50.130
lieu des chiffres, mais le premier appel de fonction échouerait.

02:50.130 --> 02:52.750
Et c'est là que les types de syndicats peuvent nous aider.

02:52.750 --> 02:55.692
Si nous avons un endroit dans notre application, que

02:55.692 --> 02:58.810
ce soit un paramètre d'une fonction ou une constante ou

02:58.810 --> 03:01.700
une variable que nous utilisons quelque part, où

03:01.700 --> 03:05.030
nous acceptons deux types de valeurs différentes.

03:05.030 --> 03:07.410
Eh bien, un type de syndicat peut nous aider.

03:07.410 --> 03:09.800
Pour indiquer à TypeScript que nous

03:09.800 --> 03:12.690
sommes d'accord avec un nombre ou une chaîne

03:12.690 --> 03:14.220
de caractères, nous utilisons

03:14.220 --> 03:17.710
nombre puis le symbole pipe ici, et ensuite l'autre type

03:17.710 --> 03:20.660
que nous acceptons également.

03:20.660 --> 03:22.340
Et vous pouvez avoir plus de deux types,

03:22.340 --> 03:25.220
vous pouvez accepter ici autant de types que vous le souhaitez.

03:25.220 --> 03:27.050
Ici, je n'en ai besoin que de deux,

03:27.050 --> 03:28.880
et c'est le type d'affectation

03:28.880 --> 03:31.720
que je choisirai, nombre ou chaîne.

03:31.720 --> 03:33.690
Maintenant, j'obtiens une erreur ici,

03:33.690 --> 03:35.930
que l'opérateur plus ne peut pas être appliqué

03:35.930 --> 03:39.120
aux types chaîne ou nombre et chaîne ou nombre.

03:39.120 --> 03:41.500
Ce n'est pas tout à fait correct, cela devrait fonctionner,

03:41.500 --> 03:44.350
car nous pouvons utiliser l'opérateur plus avec des nombres

03:44.350 --> 03:46.670
et des chaînes de caractères.

03:46.670 --> 03:49.600
Mais TypeScript voit seulement que nous avons un type

03:49.600 --> 03:52.540
union ici, et il n'analyse pas ce qu'il y a dans le type

03:52.540 --> 03:56.010
union, il voit juste, "Ok, vous attendez plusieurs types.

03:56.010 --> 03:57.530
Peut-être que cela inclut les

03:57.530 --> 03:59.460
types où je ne peux pas utiliser l'opérateur

03:59.460 --> 04:01.640
plus, d'où ma plainte ici. Heureusement, nous pouvons maintenant contourner ce problème.

04:01.640 --> 04:05.410
Nous pouvons ajouter notre vérification de type

04:05.410 --> 04:07.910
d'exécution ici et voir si input1

04:07.910 --> 04:11.240
typeof that est égal à un nombre et si typeof input2

04:12.750 --> 04:15.170
est égal à un nombre, et ensuite déplacer

04:16.530 --> 04:26.410
ce calcul là, maintenant une seule amélioration, créons le résultat comme une variable au début de cette vérification if, à cause

04:26.410 --> 04:28.510
du lock scoping, pour que ce

04:28.510 --> 04:33.880
soit une variable disponible dans la fonction entière, et ensuite assigner

04:33.880 --> 04:37.873
une nouvelle valeur là.

04:37.873 --> 04:40.310
Donc maintenant, nous vérifions si nous avons bien deux numéros.

04:40.310 --> 04:42.818
Et donc TypeScript sait qu'ici, input1

04:42.818 --> 04:45.890
et input2 seront tous deux des nombres.

04:45.890 --> 04:49.790
Maintenant, ajoutons une autre vérification ici.

04:49.790 --> 04:53.900
Et là, nous pouvons mettre le résultat égal à l'entrée 1. tostring, convertissant explicitement cette dernière

04:53.900 --> 04:56.913
en une chaîne de caractères,

04:58.550 --> 05:00.570
et input2. tostring.

05:00.570 --> 05:02.880
Et cela conviendra également pour

05:02.880 --> 05:04.160
TypeScript et JavaScript, car nous

05:04.160 --> 05:05.700
pouvons concaténer deux chaînes.

05:05.700 --> 05:08.220
Nous avons donc maintenant presque le même calcul, mais nous

05:08.220 --> 05:10.800
avons précisé qu'ici, nous travaillerons toujours avec des nombres,

05:10.800 --> 05:12.110
ici nous travaillerons toujours

05:12.110 --> 05:13.590
avec des chaînes de caractères, et nous

05:13.590 --> 05:15.730
retournons ensuite le résultat.

05:15.730 --> 05:17.490
Et maintenant, si nous consignons

05:17.490 --> 05:20.870
en console les noms combinés ici, et que nous compilons ce

05:20.870 --> 05:25.350
fichier, nous verrons qu'une fois que nous revisitons notre page, nous avons

05:25.350 --> 05:27.210
obtenu les nombres combinés ici,

05:27.210 --> 05:29.278
qui ont été simplement ajoutés ensemble

05:29.278 --> 05:31.460
et donc nous obtenons un nombre comme

05:31.460 --> 05:33.150
résultat, et deux noms combinés

05:33.150 --> 05:35.090
ici.

05:35.090 --> 05:36.850
Voilà donc comment nous pouvons utiliser

05:36.850 --> 05:40.830
les types d'union pour être plus flexibles quant à ce que nous faisons dans une fonction,

05:40.830 --> 05:43.770
par exemple, ou n'importe où ailleurs dans notre code.

05:43.770 --> 05:45.920
Cette vérification supplémentaire du type au moment

05:45.920 --> 05:49.520
de l'exécution n'est pas toujours nécessaire lorsque vous travaillez avec des types

05:49.520 --> 05:51.230
d'union, mais elle l'est souvent parce qu'avec

05:51.230 --> 05:54.090
les types d'union, vous pouvez être plus flexible, par exemple, dans

05:54.090 --> 05:56.350
les paramètres que vous acceptez, mais vous pouvez alors

05:56.350 --> 05:58.170
avoir une logique différente dans votre fonction

05:58.170 --> 06:00.940
en fonction du type exact que vous obtenez.

06:00.940 --> 06:03.730
Ainsi, votre fonction est capable de travailler avec

06:03.730 --> 06:05.640
plusieurs types de valeurs, mais elle

06:05.640 --> 06:07.810
fait des choses légèrement différentes

06:07.810 --> 06:10.320
selon le type de valeur que vous obtenez.

06:10.320 --> 06:12.410
Il est donc fréquent que vous ayez besoin d'un tel contrôle

06:12.410 --> 06:15.270
à l'exécution lorsque vous travaillez avec des types d'union, mais vous n'en

06:15.270 --> 06:16.700
aurez pas toujours besoin.

06:16.700 --> 06:18.490
Vous rencontrerez certainement aussi des situations

06:18.490 --> 06:20.900
dans les programmes TypeScript où vous pouvez utiliser un type

06:20.900 --> 06:24.060
d'union sans vérification du type au moment de l'exécution.

06:24.060 --> 06:25.870
Cela dépend vraiment de la logique que vous écrivez.
