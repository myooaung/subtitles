WEBVTT

00:02.250 --> 00:07.811
ผู้สอน: ตอนนี้ก่อนที่เราจะสำรวจกรณีการใช้งานที่มีประโยชน์มากขึ้นหรือสถานการณ์จำลองสำหรับนักตกแต่งบางคน

00:07.811 --> 00:12.550
ฉันอยากจะแสดงให้คุณเห็นสถานที่อื่นๆ ที่คุณสามารถเพิ่มมัณฑนากรได้

00:12.550 --> 00:17.731
แน่นอนว่าเราสามารถเพิ่มมัณฑนากรในชั้นเรียนได้ แต่ยังมีอีกหลายที่ที่เราสามารถเพิ่มได้

00:17.731 --> 00:22.460
เพื่อสิ่งนั้น ฉันจะสร้างคลาสใหม่ เพราะเราต้องการคลาสสำหรับมัณฑนากรที่เราต้องการใช้

00:22.460 --> 00:26.420
แต่เราไม่จำเป็นต้องเพิ่มมัณฑนากรทั้งหมดลงในคลาสโดยตรง

00:26.420 --> 00:28.480
สมมติว่าเรามีคลาสผลิตภัณฑ์ที่นี่

00:28.480 --> 00:31.523
และในคลาสผลิตภัณฑ์ เรามีชื่อเรื่องอาจจะ

00:31.523 --> 00:34.540
ซึ่งเป็นสตริง

00:34.540 --> 00:37.070
และเราสามารถกำหนดค่าที่นี่ด้วยตัวสร้าง

00:37.070 --> 00:42.680
แน่นอนว่าเราสามารถใช้ทางลัดได้เสมอและทำทุกอย่างในขั้นตอนเดียวในตัวสร้างตามที่คุณได้เรียนรู้ก่อนหน้านี้

00:42.680 --> 00:44.451
ที่นี่ฉันจะใช้เส้นทางที่ยาวขึ้น

00:44.451 --> 00:49.451
เราสามารถมีวิธีการที่นี่ รับราคาพร้อมภาษี

00:50.150 --> 00:57.150
สำหรับสิ่งนั้นฉันคาดว่าจะได้รับอัตราภาษีซึ่งเป็นตัวเลขและเพื่อให้ใช้งานได้เราควรเก็บราคาไว้ที่นี่ด้วย

00:57.150 --> 01:01.200
คุณสมบัติราคาซึ่งเราได้รับเป็นส่วนหนึ่งของตัวสร้าง

01:01.200 --> 01:05.340
อีกครั้ง เราสามารถใช้ทางลัดตรงนี้ได้ แต่ฉันจะทำอย่างนี้

01:05.340 --> 01:08.120
แล้วฉันจะกลับมาด้วยวิธีนี้,

01:08.120 --> 01:13.120
นี้. ราคาคูณหนึ่งบวกภาษี

01:13.200 --> 01:15.300
ดังนั้นเราจึงมีวิธีอรรถประโยชน์นี้

01:15.300 --> 01:17.610
และเรายังสามารถเพิ่ม getter และ setter

01:17.610 --> 01:19.090
ได้หากต้องการ

01:19.090 --> 01:22.700
ตัวอย่างเช่น เราสามารถเพิ่ม setter สำหรับราคาที่นี่ ซึ่งเราได้รับค่าที่ควรเป็นตัวเลข

01:22.700 --> 01:28.231
และตำแหน่งที่เราควบคุมว่าเราสามารถตั้งค่าเฉพาะบางค่าเท่านั้น

01:28.231 --> 01:32.090
ตอนนี้เพื่อให้งานนี้ ฉันจะเปลี่ยนชื่อราคาที่นี่ เพื่อขีดราคาและทำให้เป็นส่วนตัวจริง

01:32.090 --> 01:37.540
ๆ เพื่อไม่ให้เราเข้าถึงได้โดยตรง

01:37.540 --> 01:42.580
และที่นี่ฉันจะตั้งราคาขีดล่างและที่นี่ฉันจะใช้ราคาขีดล่างนี้

01:42.580 --> 01:44.800
และด้วยการเปลี่ยนแปลงเหล่านี้ใน setter

01:44.800 --> 01:48.350
เราสามารถกำหนดราคาขีดล่างนี้ให้เท่ากับมูลค่าที่เราได้รับ

01:48.350 --> 01:52.770
แต่ก่อนที่เราจะทำเช่นนั้น เราสามารถตรวจสอบว่ามูลค่ามากกว่าศูนย์หรือไม่

01:52.770 --> 01:55.630
เพื่อที่เราจะไม่ยอมรับราคาที่เป็นลบ

01:55.630 --> 01:57.220
ด้วยเหตุนี้ เราจึงตั้งราคาเฉพาะเมื่อมีค่ามากกว่าศูนย์

01:57.220 --> 02:00.159
มิฉะนั้น เราจะไม่ทำอะไรเลย

02:00.159 --> 02:04.330
แน่นอน เราสามารถส่งข้อผิดพลาดในกรณีอื่นได้

02:04.330 --> 02:08.389
ราคาที่ไม่ถูกต้องควรเป็นค่าบวก

02:08.389 --> 02:11.350
นั่นคือสิ่งที่เราสามารถทำได้ ตอนนี้เรามีคลาสที่มีสองคุณสมบัติ

02:11.350 --> 02:14.020
พร้อมด้วยตัวเข้าถึงและเมธอดที่นี่

02:14.020 --> 02:18.570
และเมธอดนี้มีพารามิเตอร์

02:18.570 --> 02:25.910
ตอนนี้สำหรับสิ่งเหล่านี้เราสามารถเพิ่มผู้ตกแต่งและเริ่มด้วยเพื่อนเก่าที่ดีผู้ตกแต่งบันทึก

02:25.910 --> 02:28.960
ที่นี่ฉันจะตั้งชื่อมันว่า log ไม่ให้ปะทะกับ logger ที่นั่น เนื่องจากตัวตกแต่ง

02:28.960 --> 02:33.770
log นี้จะไม่ถูกเพิ่มในคลาส ดังนั้นมันจะได้รับอาร์กิวเมนต์ที่แตกต่างกัน

02:33.770 --> 02:40.030
มันจะได้รับข้อโต้แย้งและข้อโต้แย้งใดที่มัณฑนากรได้รับขึ้นอยู่กับว่าคุณเพิ่มเข้าไปที่ใด

02:40.030 --> 02:41.960
ซึ่งเป็นสาเหตุที่ฉันไม่สามารถใช้คนบันทึกซ้ำได้

02:41.960 --> 02:45.700
เนื่องจากได้รับการปรับแต่งให้ทำงานกับชั้นเรียนเท่านั้น

02:45.700 --> 02:48.100
ตอนนี้ที่นี่ฉันไม่มีโรงงานมัณฑนากร ฉันแค่ต้องตกแต่งฟังก์ชันแบบนี้

02:48.100 --> 02:55.230
แต่ถึงกระนั้น ข้อโต้แย้งซึ่งฟังก์ชันมัณฑนากรได้รับนั้นขึ้นอยู่กับตำแหน่งที่เราใช้

02:55.230 --> 02:58.750
ตัวอย่างเช่น เราสามารถเพิ่มมัณฑนากรให้กับพร็อพเพอร์ตี้ได้

02:58.750 --> 03:01.120
ที่นี่ฉันสามารถเพิ่มบันทึกแบบนี้ได้

03:01.120 --> 03:05.759
และถ้าคุณเพิ่มมัณฑนากรในคุณสมบัติ มัณฑนากรจะได้รับอาร์กิวเมนต์สองข้อ

03:05.759 --> 03:12.010
อาร์กิวเมนต์แรกคือเป้าหมายของพร็อพเพอร์ตี้และสำหรับพร็อพเพอร์ตี้อินสแตนซ์เช่นนี้

03:12.010 --> 03:15.290
ซึ่งเราเรียกว่าอินสแตนซ์หากคุณใช้งาน

03:15.290 --> 03:19.490
นี่จะเป็นต้นแบบของวัตถุที่สร้างขึ้น

03:19.490 --> 03:24.850
หากเรามีคุณสมบัติคงที่ที่นี่ เป้าหมายจะอ้างถึงสถานะของฟังก์ชันคอนสตรัคเตอร์

03:24.850 --> 03:30.140
ในที่นี้ฉันจะพูดอะไรก็ได้ เพราะฉันไม่รู้ว่าวัตถุจะมีโครงสร้างแบบใด

03:30.140 --> 03:35.140
อาร์กิวเมนต์ที่สองที่เราได้รับคือชื่อคุณสมบัติ

03:35.290 --> 03:40.400
นั่นอาจเป็นสตริงที่นี่ แน่นอนว่าอาจเป็นสัญลักษณ์ก็ได้

03:40.400 --> 03:43.470
เราไม่รู้ว่าเราใช้อะไรเป็นตัวระบุคุณสมบัติ

03:43.470 --> 03:51.120
แล้วที่นี่ฉันจะบันทึกคุณสมบัติมัณฑนากร เพื่อให้เราเห็นว่าสิ่งนี้ทำงานเมื่อใด

03:51.120 --> 03:55.980
และฉันต้องการคอนโซล เข้าสู่ระบบเป้าหมายและชื่อคุณสมบัติ

03:55.980 --> 03:57.780
เพื่อให้เราเห็นว่าค่าสองค่านี้คืออะไร

03:57.780 --> 04:01.280
โดยที่ถ้าเราบันทึกเพื่อให้คอมไพล์โดยไม่มีข้อผิดพลาด

04:01.280 --> 04:03.080
และถ้าเราไปที่เซิร์ฟเวอร์ของเรา

04:03.080 --> 04:06.871
เราจะเห็นว่า Property decorator ถูกพิมพ์ลงไปที่นั่น

04:06.871 --> 04:08.630
และนี่คือผลลัพธ์ที่เราได้รับ

04:08.630 --> 04:15.850
เราเห็นที่นี่ว่าเป็นต้นแบบของวัตถุของเรา เนื่องจากเราไม่เห็นชื่อและราคาที่นี่

04:15.850 --> 04:21.900
แต่เราเห็นราคาพร้อมภาษีและวิธีการลงทะเบียนในต้นแบบของวัตถุ

04:21.900 --> 04:24.240
นั่นคือต้นแบบของวัตถุของเรา และเราเห็นชื่อตรงนี้ทางด้านขวา

04:24.240 --> 04:28.943
นั่นคือชื่อคุณสมบัติที่เรากำลังทำงานด้วย

04:29.800 --> 04:33.770
ตอนนี้คนตัดไม้นี้ดำเนินการเมื่อใด

04:33.770 --> 04:37.880
อย่างที่คุณบอกได้ เนื่องจากฉันไม่เคยสร้างอินสแตนซ์ผลิตภัณฑ์ใด

04:37.880 --> 04:41.670
ๆ เลย มันจึงทำงานโดยทั่วไปเมื่อคำจำกัดความคลาสของคุณลงทะเบียนโดย

04:41.670 --> 04:43.980
JavaScript

04:43.980 --> 04:47.660
ดังนั้นมันจึงทำงานเมื่อคุณกำหนดคุณสมบัตินี้โดยพื้นฐานแล้วเป็น

04:47.660 --> 04:49.140
JavaScript โดยเป็นส่วนหนึ่งของคลาสของคุณที่นี่

04:49.140 --> 04:52.970
โดยเป็นส่วนหนึ่งของฟังก์ชันคอนสตรัคเตอร์นี้

04:52.970 --> 04:54.610
ซึ่งสร้างขึ้นที่นี่ในที่สุด

04:54.610 --> 04:58.053
นี่คือตอนที่มัณฑนากรคุณสมบัตินี้ดำเนินการ
