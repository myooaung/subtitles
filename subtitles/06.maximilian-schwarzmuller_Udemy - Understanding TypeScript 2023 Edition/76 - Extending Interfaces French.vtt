WEBVTT

00:02.150 --> 00:03.290
Instructeur : Vous pouvez

00:03.290 --> 00:05.890
également implémenter l'héritage dans les interfaces.

00:05.890 --> 00:10.890
Disons que nous avons une autre interface, Named, et c'est

00:11.100 --> 00:13.600
l'interface qui s'assure que

00:13.600 --> 00:16.420
nous avons une propriété de nom.

00:16.420 --> 00:18.510
Ainsi, ici, dans Person, nous pourrions

00:18.510 --> 00:20.950
implémenter Greetable et Named pour être obligés

00:20.950 --> 00:24.110
d'avoir à la fois une méthode de salutation et un nom.

00:24.110 --> 00:25.820
C'est quelque chose que nous pourrions faire.

00:25.820 --> 00:30.200
Ou, si nous savons que Greetable pense que les objets greetable doivent toujours

00:30.200 --> 00:31.810
avoir un nom, nous pourrions

00:31.810 --> 00:34.500
faire en sorte que cette interface Greetable

00:34.500 --> 00:36.970
étende l'interface Named, de sorte qu'ensemble,

00:36.970 --> 00:40.120
elles forment une nouvelle interface, qui oblige chaque

00:40.120 --> 00:43.460
objet basé sur Greetable à avoir une méthode greet, mais

00:43.460 --> 00:46.150
aussi à avoir un nom.

00:46.150 --> 00:48.840
Et pour ce faire, nous pouvons ajouter des extensions

00:48.840 --> 00:52.700
ici, sur l'interface également, et nous étendons Named.

00:52.700 --> 00:55.760
Par conséquent, comme je l'ai dit, cela forme une nouvelle interface,

00:55.760 --> 00:58.330
qui est, en fin de compte, une interface qui nous oblige

00:58.330 --> 01:00.760
à avoir une méthode d'accueil, mais pas seulement cela,

01:00.760 --> 01:03.140
elle nous oblige également à avoir tout ce que l'interface

01:03.140 --> 01:04.910
nommée définit.

01:04.910 --> 01:07.150
Dans ce cas, une propriété de nom.

01:07.150 --> 01:09.450
Donc, si je supprime name ici, j'obtiendrai

01:09.450 --> 01:12.120
déjà une erreur, car cette classe n'implémente

01:12.120 --> 01:14.860
pas correctement l'interface Greetable, car

01:14.860 --> 01:17.600
la propriété name est manquante.

01:17.600 --> 01:20.900
C'est ainsi que nous pouvons aussi combiner des interfaces.

01:20.900 --> 01:23.410
Pourquoi diviser une interface comme celle-ci ?

01:23.410 --> 01:25.600
Peut-être avez-vous une application où, pour

01:25.600 --> 01:27.810
certains objets, vous voulez seulement les

01:27.810 --> 01:31.120
obliger à avoir un nom, et non une méthode greet, alors que pour d'autres

01:31.120 --> 01:34.630
objets, vous avez besoin à la fois de greet et de name.

01:34.630 --> 01:36.830
Avec ce partage, c'est possible.

01:36.830 --> 01:40.630
Certains objets, ou certaines classes, peuvent se contenter d'implémenter

01:40.630 --> 01:42.590
Named, tandis que d'autres peuvent implémenter

01:42.590 --> 01:45.990
Greetable et sont obligés d'avoir à la fois greet et un nom.

01:45.990 --> 01:48.490
L'extension des interfaces est donc possible.

01:48.490 --> 01:50.880
Et là, vous pouvez également en prolonger plusieurs.

01:50.880 --> 01:53.380
Vous pouvez donc fusionner plusieurs

01:53.380 --> 01:55.060
interfaces en une seule.

01:55.060 --> 01:58.570
Nous pourrions fusionner une autre interface si nous l'avions.

01:58.570 --> 02:00.860
Il suffit de les séparer par une virgule.

02:00.860 --> 02:03.570
Rappelez-vous que pour une classe, cela n'était pas possible.

02:03.570 --> 02:05.710
Lorsque vous utilisez des classes dans l'héritage,

02:05.710 --> 02:07.920
vous ne pouvez hériter que d'une seule classe.

02:07.920 --> 02:10.600
Vous ne pouvez pas hériter de plusieurs classes.

02:10.600 --> 02:12.490
Pour les interfaces, c'est différent.

02:12.490 --> 02:14.760
Pour les interfaces, vous pouvez en effet hériter

02:14.760 --> 02:16.920
de plusieurs interfaces, parce qu'en fin

02:16.920 --> 02:18.920
de compte, elles sont toutes fusionnées,

02:18.920 --> 02:21.430
et dans cette fonctionnalité purement TypeScript,

02:21.430 --> 02:23.010
qui n'est en fait pas traduite en

02:23.010 --> 02:24.800
JavaScript comme vous le verrez, nous

02:24.800 --> 02:27.080
pouvons donc enfreindre les règles établies

02:27.080 --> 02:29.250
pour les classes JavaScript, et étendre plusieurs

02:29.250 --> 02:31.733
interfaces.
