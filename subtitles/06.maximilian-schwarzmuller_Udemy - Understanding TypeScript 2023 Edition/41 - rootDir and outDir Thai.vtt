WEBVTT

00:02.220 --> 00:03.053
-: ไปต่อกันเถอะ

00:03.053 --> 00:04.950
เราได้รับตัวเลือก outFile ที่นี่

00:04.950 --> 00:09.440
ตอนนี้ตัวเลือกนี้ไม่สำคัญสำหรับเราแล้ว แต่จะใช้งานไม่ได้ในตอนนี้

00:09.440 --> 00:12.340
สิ่งที่น่าสนใจกว่าสำหรับเราคือ outDIR และ rootDir

00:12.340 --> 00:17.640
ยิ่งโครงการของคุณใหญ่ขึ้น คุณก็ยิ่งต้องการจัดระเบียบไฟล์ของคุณมากขึ้นเท่านั้น

00:17.640 --> 00:24.120
โดยทั่วไป คุณไม่ต้องการเพียงแค่ให้ไฟล์ของคุณอยู่ในโฟลเดอร์โปรเจ็กต์ระดับรูท

00:24.120 --> 00:28.080
สิ่งที่คุณมักจะเห็นในโครงการคือคุณมีโฟลเดอร์ต้นทาง

00:28.080 --> 00:29.790
และคุณมีโฟลเดอร์ dist

00:29.790 --> 00:31.240
ถัดไป ถัดไป

00:31.240 --> 00:35.690
ดังนั้นโฟลเดอร์ dist มีหน้าที่เก็บเอาต์พุตทั้งหมด ดังนั้นสมมติว่าเป็นไฟล์

00:35.690 --> 00:37.800
JavaScript ทั้งหมด

00:37.800 --> 00:41.380
และโฟลเดอร์ต้นทางอาจเก็บไฟล์ TypeScript ทั้งหมดของเรา

00:41.380 --> 00:44.643
เราจึงสามารถย้ายไฟล์ TypeScript ไปไว้ในโฟลเดอร์ต้นทาง

00:44.643 --> 00:49.891
และถ้าตอนนี้ผมลบโฟลเดอร์ JavaScript เรามีปัญหาว่าถ้าเราคอมไพล์ทุกอย่าง ไฟล์

00:49.891 --> 00:53.167
TypeScript เหล่านี้จะถูกคอมไพล์ เพราะ TypeScript

00:53.167 --> 00:55.768
ตัวคอมไพเลอร์จะมองไปยังโฟลเดอร์ย่อย

00:55.768 --> 01:00.050
แต่ เอาต์พุตจะอยู่ถัดจากไฟล์อินพุตของเรา

01:00.050 --> 01:02.760
และนั่นคือสิ่งที่เราควบคุมได้ด้วย outDir

01:02.760 --> 01:03.660
เป็นต้น

01:03.660 --> 01:10.900
หากเราตั้งค่า outDir เราสามารถบอกประเภทกับคอมไพเลอร์ได้ว่าควรเก็บไฟล์ที่สร้างขึ้นไว้ที่ไหน

01:10.900 --> 01:13.580
เราสามารถตั้งค่านี้เป็น dist

01:13.580 --> 01:17.037
ตอนนี้ถ้าเราทำเช่นนั้น ถ้าคุณเรียกใช้ chia seed

01:17.037 --> 01:19.560
คุณจะเห็นว่าไฟล์ JavaScript ไม่ได้อยู่ในโฟลเดอร์ต้นทาง

01:19.560 --> 01:23.170
แต่อยู่ในโฟลเดอร์ dist

01:23.170 --> 01:26.340
ตอนนี้เราต้องปรับดัชนีของเรา html และชี้ไปที่

01:26.340 --> 01:31.630
dist/app js และ dist/analytics

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
หรือย้ายดัชนี html ลงในโฟลเดอร์ dist

01:33.880 --> 01:37.550
แต่เซิร์ฟเวอร์ def ของเราจะทำงานไม่ถูกต้องอีกต่อไปในขณะนี้

01:37.550 --> 01:39.875
ดังนั้น เรามาปรับการนำเข้าเหล่านี้

01:39.875 --> 01:44.140
และด้วยเหตุนี้ เราจึงมีแอปพลิเคชันที่ใช้งานได้อย่างที่คุณเห็น

01:44.140 --> 01:48.480
แต่ตอนนี้มีโครงสร้างโครงการที่สะอาดขึ้น

01:48.480 --> 01:49.650
ตอนนี้สิ่งที่ดีคือ

01:49.650 --> 01:52.980
ถ้าเรามีโฟลเดอร์ย่อยที่นี่ โฟลเดอร์การวิเคราะห์ และเรามีไฟล์

01:52.980 --> 01:54.893
TypeScript อยู่ในนั้น ถ้าเราคอมไพล์ใหม่

01:54.893 --> 01:57.350
และไม่สำคัญว่าคุณจะทำด้วยคำสั่งนี้หรือไม่

01:57.350 --> 02:03.300
หรือโหมดเฝ้าดู โครงสร้างโฟลเดอร์นี้ที่คุณมีโฟลเดอร์ต้นทางจะถูกจำลองแบบทั้งหมดในโฟลเดอร์

02:03.300 --> 02:16.640
dist ซึ่งแน่นอนว่าสะดวกมากเพราะทำให้แน่ใจว่าคุณสามารถนำเข้าไฟล์ได้เหมือนกับที่คุณนำเข้าในโฟลเดอร์ต้นทาง เช่นกันเพื่อให้โครงสร้างที่คุณสร้างขึ้นนั้นยังคงอยู่

02:16.640 --> 02:21.230
ตอนนี้ คุณยังสามารถตั้งค่าไดเร็กทอรีรากและตั้งค่านี้โดยเฉพาะที่โฟลเดอร์ที่เก็บไฟล์ของคุณ

02:21.230 --> 02:30.030
เช่น ในตัวอย่างนี้ ซอร์ส เพื่อให้แน่ใจว่าประเภทของคอมไพเลอร์ไม่ได้อยู่ในโฟลเดอร์ของเรา

02:30.030 --> 02:34.003
นั่นเป็นสิ่งที่คุณสามารถทำได้ด้วยตัวเลือกรวมด้านล่างใช่ไหม

02:34.870 --> 02:36.007
แต่ด้วยไดเร็กทอรีราก

02:36.007 --> 02:45.680
ประเภทของคอมไพเลอร์จะไม่เพียงแค่ดูเฉพาะโฟลเดอร์ต้นทางเท่านั้น แต่ยังทำให้แน่ใจว่าโครงสร้างโครงการที่คุณตั้งค่าไว้นั้นถูกเก็บไว้ในโฟลเดอร์

02:45.680 --> 02:47.880
dist

02:47.880 --> 02:50.020
อย่างที่คุณเห็น แต่โปรดจำไว้ว่าก่อนที่ไฟล์ TypeScript

02:50.020 --> 02:51.820
จะรวมไฟล์ TypeScript ใดๆ ไว้ที่นี่ จุดเริ่มต้นของแหล่งที่มาทั้งหมด

02:51.820 --> 02:54.280
ดังนั้น ตัวอย่างเช่น หากคุณแสดงความคิดเห็นชั่วคราวหากเรามีโฟลเดอร์ผู้ใช้

02:54.280 --> 03:03.280
ที่นี่ที่ระดับบนสุดกับผู้ใช้

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:09.752
ที่เรามีชื่อผู้ใช้เป็น Max สมมติว่าถ้าเรารวบรวมสิ่งนี้คุณจะเห็นโฟลเดอร์ผู้ใช้นั้นในโฟลเดอร์

03:09.752 --> 03:11.420
dist

03:11.420 --> 03:13.810
และตอนนี้โฟลเดอร์ต้นทางก็รวมอยู่ด้วยเพราะตอนนี้เรามีไฟล์

03:13.810 --> 03:17.200
typescript ในระดับที่สูงกว่า ดังนั้นคอมไพเลอร์ typescript

03:17.200 --> 03:25.970
จึงคิดว่าโปรเจ็กต์ทั้งหมดของเราเป็นอินพุตอีกครั้ง และมันจะจำลองโครงสร้างโฟลเดอร์ที่พบในโฟลเดอร์ dist

03:25.970 --> 03:30.120
แน่นอนว่าไม่ใช่สิ่งที่เราต้องการและนั่นคือสิ่งที่ตัวเลือก

03:30.976 --> 03:32.660
rootDir ช่วยเราได้

03:32.660 --> 03:34.020
ตอนนี้ถ้าเราตั้งค่านี้เป็นซอร์ส

03:34.020 --> 03:35.950
แม้ว่าเราจะมีโฟลเดอร์อื่นที่มีไฟล์

03:35.950 --> 03:43.780
TypeScript อยู่ในระดับรูท โฟลเดอร์เหล่านั้นจะไม่รวมอยู่ในเอาต์พุต และโฟลเดอร์ซอร์สเองก็จะไม่ไปอยู่ที่นั่นโดยฉับพลัน

03:43.780 --> 03:46.480
บ่อยครั้งที่คุณตั้งค่าทั้ง rootDir และ outDir ให้ชัดเจนจริงๆ

03:46.480 --> 03:52.040
เกี่ยวกับตำแหน่งที่คุณป้อนไฟล์อยู่และตำแหน่งที่ไฟล์เอาต์พุตของคุณจะถูกสร้างขึ้น

03:52.040 --> 03:54.870
ถ้าเราไปต่อ เราสามารถเพิกเฉยต่อองค์ประกอบ

03:54.870 --> 03:57.010
เราสามารถดูที่การลบความคิดเห็น

03:57.010 --> 03:58.780
ควรค่อนข้างชัดเจนหากคุณตั้งค่านี้

03:58.780 --> 04:00.850
ความคิดเห็นใดๆ ที่คุณอาจมีในไฟล์

04:00.850 --> 04:04.450
TypeScript ของคุณจะถูกลบออกจากไฟล์ JavaScript

04:04.450 --> 04:08.000
ที่คอมไพล์แล้ว

04:08.000 --> 04:11.200
ดังนั้นหากฉันแสดงความคิดเห็นและรวบรวมโค้ดของฉัน

04:11.200 --> 04:12.970
คุณจะเห็นแอป ts ฉันมีความคิดเห็น

04:12.970 --> 04:14.990
แอพ js มันไม่อยู่ที่นั่น

04:14.990 --> 04:20.950
ดังนั้นคุณสามารถทำได้เพื่อทำให้ไฟล์ของคุณเล็กลงและความพยายามอาจเป็นตัวเลือกที่ดี

04:20.950 --> 04:23.820
คุณยังสามารถตั้งค่า noEmit หากคุณไม่ต้องการสร้างไฟล์

04:23.820 --> 04:25.600
JavaScript ใดๆ

04:25.600 --> 04:27.130
ตอนนี้อาจฟังดูแปลกเพราะนั่นคือแนวคิดของ

04:27.130 --> 04:30.700
TypeScript แต่ถ้าคุณต้องการตรวจสอบว่าไฟล์ของคุณถูกต้องหรือไม่

04:30.700 --> 04:35.030
แต่คุณไม่ต้องการเขียนไฟล์เอาต์พุตเหล่านี้ทั้งหมด เพื่อประหยัดเวลา

04:35.030 --> 04:39.120
เช่น ในโครงการที่ใหญ่กว่า จากนั้นคุณสามารถตั้งค่านี้เป็น "จริง"

04:39.120 --> 04:47.903
เพื่อให้ประเภทของคอมไพเลอร์ตรวจสอบไฟล์ของคุณและรายงานข้อผิดพลาดที่อาจเกิดขึ้นโดยไม่ต้องสร้างไฟล์เอาต์พุต

04:47.903 --> 04:52.065
importHelpers ไม่สำคัญสำหรับเราจริงๆ ที่นี่เราสามารถเพิกเฉยได้

04:52.065 --> 04:54.570
downlevelIteration เป็นตัวเลือกขั้นสูง

04:54.570 --> 04:57.150
เป็นเรื่องที่น่าสนใจเมื่อคุณคอมไพล์โค้ดของคุณเป็น

04:57.150 --> 05:02.690
JavaScript เวอร์ชันเก่า และคุณทำงานกับสี่ลูป

05:02.690 --> 05:08.378
จากนั้น ในบางสถานการณ์ที่เกิดขึ้นได้ยาก คุณอาจพบปัญหาที่การคอมไพล์ทำงานไม่ถูกต้อง

05:08.378 --> 05:10.440
ตัวเลือกนี้ หากคุณเปิดใช้งาน จะให้การรวบรวมที่แม่นยำยิ่งขึ้น

05:10.440 --> 05:20.097
ซึ่งจะทำงานในกรณีเฉพาะเหล่านี้ ดังนั้นคุณอาจคิดว่าคุณควรเปิดใช้เสมอ แต่ก็จะแสดงผลมากขึ้นในที่ที่โค้ดเหล่านั้น

05:20.097 --> 05:21.880
ดังนั้น คุณควรเปิดใช้งานเฉพาะในกรณีที่คุณมีลูป

05:21.880 --> 05:29.023
และคุณเห็นว่าโค้ดที่คุณสร้างขึ้นทำงานแตกต่างไปจากที่ควรจะเป็นเกี่ยวกับลูปเหล่านั้น
