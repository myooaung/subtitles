WEBVTT

00:02.190 --> 00:04.480
A więc na początek nasze własne generyki.

00:04.480 --> 00:06.820
Poniżej przedstawiam skomentowany kod.

00:06.820 --> 00:09.210
Zacznę od funkcji generycznej.

00:09.210 --> 00:11.430
Możesz budować klasy generyczne

00:11.430 --> 00:15.350
i funkcje Pokażę oba i tutaj zacznę od funkcji.

00:15.350 --> 00:17.490
Teraz powiedzmy, że chcemy mieć

00:17.490 --> 00:22.490
funkcję, która zasadniczo łączy dwa obiekty i zwraca nowy obiekt.

00:23.660 --> 00:25.380
Więc tutaj moglibyśmy to nazwać "merge".

00:25.380 --> 00:28.803
I chcemy uzyskać obiekt A i obiekt B jako dane wejściowe.

00:30.010 --> 00:33.990
Teraz oczywiście moglibyśmy napisać tę funkcję w pewien sposób.

00:33.990 --> 00:36.660
Możemy powiedzieć, że to jest typu

00:36.660 --> 00:39.033
object i to jest typu object.

00:39.960 --> 00:41.760
A następnie co robi ta funkcja,

00:41.760 --> 00:45.200
to zwraca wynik przypisania obiektu.

00:45.200 --> 00:48.130
Gdzie dostaję obiekt A i obiekt B.

00:48.130 --> 00:50.230
Więc oczywiście, ponieważ dostaliśmy tę metodę

00:50.230 --> 00:53.000
przypisywania obiektów już wbudowaną w normalny javascript.

00:53.000 --> 00:55.820
Moglibyśmy się spierać, czy naprawdę potrzebujemy funkcji scalania,

00:55.820 --> 00:58.140
ale oczywiście możesz wykonać tutaj dodatkową pracę.

00:58.140 --> 01:00.480
Można by to wzbogacić o dodatkowe informacje,

01:00.480 --> 01:01.833
o dodatkowe opcje, a w końcu

01:01.833 --> 01:04.730
to tylko demo, tylko i przykład.

01:04.730 --> 01:07.510
Więc to byłoby ważne, moglibyśmy wywołać

01:07.510 --> 01:11.830
merge tutaj i konsola loguje jego wynik, jak to.

01:11.830 --> 01:15.130
A następnie przekaż obiekt, który ma klucz nazwy

01:15.130 --> 01:17.570
i drugi obiekt, który ma wiek i jeśli

01:17.570 --> 01:20.010
uruchomimy to i zapiszemy to.

01:20.010 --> 01:22.780
Tutaj w przeglądarce rzeczywiście otrzymujemy to wyjście.

01:22.780 --> 01:24.280
Otrzymujemy więc ten obiekt merge.

01:24.280 --> 01:27.050
Teraz to działa, problem, który

01:27.050 --> 01:29.660
mamy z tym jest, jeśli próbujemy

01:31.660 --> 01:33.300
przechowywać to

01:33.300 --> 01:38.097
połączenie nazwa max, a wiek 30.

01:39.620 --> 01:44.620
Jeśli spróbujemy przechowywać to tutaj, nie mogę uzyskać dostępu do nazwy na wyniku, nie

01:45.770 --> 01:48.730
mogę uzyskać dostępu do wieku na wynikach na tym połączonym

01:48.730 --> 01:50.020
obiekcie.

01:50.020 --> 01:52.360
Nawet jeśli wiemy, że obie będą istnieć.

01:52.360 --> 01:54.830
Bo typescript tego nie wie.

01:54.830 --> 01:57.100
Typescript nie może tego wiedzieć.

01:57.100 --> 01:59.310
Ponieważ właśnie mówimy mu, dostajesz obiekt

01:59.310 --> 02:02.370
i na końcu wpisujemy najpierw, że zwracamy obiekt.

02:02.370 --> 02:04.790
Co jest poprawne, ale co nie niesie ze sobą wszystkich

02:04.790 --> 02:07.810
informacji, które moglibyśmy tu wykorzystać.

02:07.810 --> 02:09.970
Oczywiście zawsze możemy wykonać rzutowanie

02:09.970 --> 02:12.080
typu, możemy powiedzieć typescriptowi, że

02:12.080 --> 02:14.220
to, co otrzymamy z powrotem, to obiekt, w którym

02:14.220 --> 02:15.960
mamy klucz nazwy i klucz wieku.

02:15.960 --> 02:19.020
Ale to jest naprawdę uciążliwe, jeśli musimy to zrobić.

02:19.020 --> 02:21.420
Tak więc tutaj generyki mogą nam pomóc.

02:21.420 --> 02:23.750
Zamieniamy to w funkcję generyczną, dodając

02:23.750 --> 02:26.470
te kątowe nawiasy po nazwie funkcji.

02:26.470 --> 02:29.740
A następnie definiujemy identyfikatory Q.

02:29.740 --> 02:33.190
Zazwyczaj zaczynasz od T, czyli od typu.

02:33.190 --> 02:35.600
Ale możesz użyć dowolnego identyfikatora,

02:35.600 --> 02:37.730
nie musi to być pojedynczy znak, ale konwencją

02:37.730 --> 02:39.860
jest użycie pojedynczego znaku i zazwyczaj,

02:39.860 --> 02:42.250
jeśli masz tylko jeden typ generyczny, nazywasz

02:42.250 --> 02:43.690
go T.

02:43.690 --> 02:46.640
A potem mówisz, dobrze ten typ generyczny tutaj, to jest teraz

02:46.640 --> 02:48.510
dostępne wewnątrz tej funkcji.

02:48.510 --> 02:51.453
Możemy więc powiedzieć, że to, co tu otrzymujemy, jest typu T.

02:53.090 --> 02:55.740
Wygląda dziwnie, dostaniemy się tam bez obaw.

02:55.740 --> 02:57.280
Teraz tutaj dostajemy dwa argumenty,

02:57.280 --> 02:59.570
gdzie nie wiemy dokładnie jak będą wyglądać.

02:59.570 --> 03:02.450
Przyjmę więc tutaj drugi typ rodzajowy.

03:02.450 --> 03:04.340
Po prostu dodając przecinek w nawiasie

03:04.340 --> 03:07.400
kątowym, A potem już tylko kontynuujemy w alfabecie.

03:07.400 --> 03:10.490
I dlatego drugi ogólny parametr lub

03:10.490 --> 03:15.490
typ, którego możesz użyć w funkcji, zwykle ma nazwę U.

03:15.630 --> 03:18.560
Można więc powiedzieć, że jest to typ U.

03:18.560 --> 03:22.100
Dobra, co nam to daje?

03:22.100 --> 03:25.450
Cóż dużo faktycznie, jak widzisz z tym

03:25.450 --> 03:28.620
sam, jeśli najedziesz na merge, typescript

03:28.620 --> 03:33.230
infers że ta funkcja zwraca przecięcie T i U.

03:33.230 --> 03:36.800
Moglibyśmy oczywiście również ustawić to explicite w ten sposób,

03:36.800 --> 03:38.040
ale nie musimy tego robić,

03:38.040 --> 03:42.010
ponieważ obiekt assign zwraca przecięcie i dlatego, ponieważ zwróciliśmy

03:42.010 --> 03:45.740
wynik object assign, typescript automatycznie rozumie, że ta funkcja

03:45.740 --> 03:48.390
zwraca przecięcie.

03:48.390 --> 03:50.320
Więc jak to ma pomóc?

03:50.320 --> 03:52.510
Cóż, jeśli teraz najedziemy na obiekt połączony,

03:52.510 --> 03:54.260
zobaczymy, że teraz z tym samym typescript

03:54.260 --> 03:56.450
rozumie, że to, co przechowujemy w obiekcie

03:56.450 --> 03:59.230
połączonym, jest przecięciem tych dwóch typów obiektów,

03:59.230 --> 04:01.690
ponieważ widzi, że przekazujemy te obiekty,

04:01.690 --> 04:06.100
które są z tych typów obiektów, które infirmuje.

04:06.100 --> 04:08.840
Ciąg imion i numer wieku.

04:08.840 --> 04:11.590
I że nasza funkcja zwraca przecięcie.

04:11.590 --> 04:13.630
Dlaczego jest w stanie wywnioskować to

04:13.630 --> 04:16.313
teraz a nie z obiektem który mieliśmy wcześniej?

04:17.220 --> 04:19.560
Ponieważ obiekt jest wysoce niespecyficznym typem.

04:19.560 --> 04:22.490
Mówimy dowolny obiekt i tak therefor typescript jest

04:22.490 --> 04:24.530
w stanie wywnioskować, że zwracamy

04:24.530 --> 04:26.600
przecięcie obiektu i obiektu.

04:26.600 --> 04:29.570
Ale przecięcie dwóch nieznanych obiektów jest po prostu

04:29.570 --> 04:32.270
nowym nieznanym obiektem, który nie oferuje żadnych

04:32.270 --> 04:35.420
dodatkowych informacji o typie do typescript.

04:35.420 --> 04:38.170
Z typami generycznymi, to co mówimy

04:38.170 --> 04:43.170
typescriptowi to to, że te dwa parametry mogą i często będą miały

04:43.282 --> 04:47.100
różne typy i dlatego typescript jest w stanie zrozumieć,

04:47.100 --> 04:49.690
że nie pracujemy z jakimś losowym

04:49.690 --> 04:53.150
typem obiektu, ale że otrzymamy tutaj dane różnych

04:53.150 --> 04:55.250
typów.

04:55.250 --> 04:56.940
I że ta funkcja ogólnie

04:56.940 --> 04:59.770
zwróci przecięcie tych danych.

04:59.770 --> 05:01.773
I dlatego typescript jest w stanie zrozumieć,

05:01.773 --> 05:04.390
że to co przechowujemy tutaj w połączonym obiekcie

05:04.390 --> 05:07.910
jest takim przecięciem danych z tych dwóch wejść.

05:07.910 --> 05:09.530
Bo teraz mamy tu do czynienia

05:09.530 --> 05:14.423
nie tylko z jakimiś nieznanymi obiektami, ale z bardzo konkretnymi typami.

05:15.330 --> 05:20.150
I therefor teraz jeśli ja konsola log scalony obiekt wiek tutaj to działa

05:20.150 --> 05:22.980
bez błędów jak można powiedzieć.

05:22.980 --> 05:26.770
Tutaj drukuję 30 ze względu na typy generyczne.

05:26.770 --> 05:29.040
Dajemy typescriptowi dodatkową informację,

05:29.040 --> 05:31.950
że nie wiemy dokładnie jakie będą typy na pewno, będą

05:31.950 --> 05:34.780
obiekty tutaj możemy to powiedzieć.

05:34.780 --> 05:36.550
Ale nie wiemy, czy jest to obiekt z kluczem

05:36.550 --> 05:38.640
nazwy, z kluczem wieku, z kluczem hobby.

05:38.640 --> 05:41.130
Nie wiemy i nie dbamy o to, nie zależy nam

05:41.130 --> 05:43.360
tutaj na dokładnym obiekcie, nie chcemy

05:43.360 --> 05:46.050
określać, że to musi być tego typu.

05:46.050 --> 05:47.490
Bo nagle, gdyby dodać

05:47.490 --> 05:50.520
tam hobby, to mielibyśmy problem.

05:50.520 --> 05:52.540
Nie chcę więc być aż tak restrykcyjny.

05:52.540 --> 05:54.480
Chcę tylko powiedzieć, że jest to dowolny

05:54.480 --> 05:56.940
typ, który mnie nie obchodzi, ale najprawdopodobniej

05:56.940 --> 05:58.590
jest to inny typ niż ten tutaj.

05:58.590 --> 06:00.860
A jeśli byłoby tak samo to też byłoby dobrze.

06:00.860 --> 06:03.030
Ale typescript rozumie, że mamy

06:03.030 --> 06:06.530
tutaj określone typy dla tych dwóch parametrów i

06:06.530 --> 06:08.800
że zwracamy ich przecięcie.

06:08.800 --> 06:12.660
Zamiast po prostu mieć tutaj jakikolwiek niespecyficzny obiekt.

06:12.660 --> 06:14.770
Teraz konkretnie magia tutaj nie jest

06:14.770 --> 06:16.210
tylko tym, że mówimy typescriptowi,

06:16.210 --> 06:18.410
że mamy dwa różne typy tutaj.

06:18.410 --> 06:20.740
Ale że te typy nie są ustawione w kamieniu,

06:20.740 --> 06:22.870
gdy definiujemy tę funkcję, ale są ustawione

06:22.870 --> 06:25.810
dynamicznie, gdy wywołujemy funkcję.

06:25.810 --> 06:27.430
Więc tutaj wywołujemy funkcję

06:27.430 --> 06:30.560
i typescript infekuje typy dla dwóch argumentów.

06:30.560 --> 06:33.890
Dla T, to w zasadzie wypełnia typ obiektu z obiektem z właściwością

06:33.890 --> 06:36.677
name, która przechowuje ciąg znaków i właściwość

06:36.677 --> 06:39.600
hobbies, która przechowuje tablicę ciągów.

06:39.600 --> 06:43.290
A dla U wypełnia obiekt typu z właściwością

06:43.290 --> 06:47.990
age, gdzie age jest typu number.

06:47.990 --> 06:51.030
Teraz, gdy wywołujemy tę funkcję ponownie

06:51.030 --> 06:53.890
w innej linii i przekazujemy różne obiekty

06:53.890 --> 06:57.090
i przechowuję to w nowej stałej z nową nazwą,

06:57.090 --> 06:59.920
wtedy oczywiście różne typy są wypełnione

06:59.920 --> 07:03.130
dla T i U dla tego wywołania funkcji.

07:03.130 --> 07:05.350
Możesz także specjalnie powiedzieć

07:05.350 --> 07:07.780
typescriptowi, które typy powinien wypełnić,

07:07.780 --> 07:09.110
dodając nawiasy kątowe

07:09.110 --> 07:11.320
po nazwie funkcji, gdy ją wywołujesz,

07:11.320 --> 07:13.010
a następnie wypełniłbyś własne

07:13.010 --> 07:15.200
typy dla T i U.

07:15.200 --> 07:18.030
Moglibyśmy powiedzieć typescriptowi, że T powinno być typu

07:18.030 --> 07:20.180
string dla tego wywołania funkcji, a U powinno

07:20.180 --> 07:22.710
być typu number, ale wtedy oczywiście typescript narzekałby

07:22.710 --> 07:23.950
na konkretne wartości, które

07:23.950 --> 07:25.940
tutaj przekazujemy.

07:25.940 --> 07:28.270
Ponieważ to wyraźnie nie jest ciągiem

07:28.270 --> 07:30.190
i jeśli naprawilibyśmy to, to wyraźnie

07:30.190 --> 07:32.280
nie byłoby to typu liczby.

07:32.280 --> 07:34.650
Więc tutaj możemy być bardzo konkretni

07:34.650 --> 07:38.620
i powiedzieć dobrze, pierwszy argument lub typ T, aby być precyzyjnym

07:38.620 --> 07:41.700
dla tego wywołania funkcji tutaj będzie typem obiektu,

07:41.700 --> 07:45.310
gdzie mamy właściwość name, która jest typu string i właściwość

07:45.310 --> 07:48.850
hobbies, która jest typu string array.

07:48.850 --> 07:52.970
A typem konkretnym dla U, dla tego wywołania funkcji będzie obiekt,

07:52.970 --> 07:55.800
gdzie mamy właściwość age, która powinna być

07:55.800 --> 07:57.320
typu number.

07:57.320 --> 08:00.220
A teraz bylibyśmy dobrzy i nie byłoby już

08:00.220 --> 08:02.730
żadnych błędów i to by działało.

08:02.730 --> 08:05.060
Ale to jest zbędne, możesz absolutnie

08:05.060 --> 08:07.310
to zrobić i ważne jest, aby zrozumieć,

08:07.310 --> 08:10.070
że to jest w końcu to, o co chodzi generics, że

08:10.070 --> 08:12.990
możesz wypełnić różne konkretne typy dla różnych

08:12.990 --> 08:15.170
wywołań funkcji.

08:15.170 --> 08:16.930
Ale nie musimy tego robić tutaj, ponieważ

08:16.930 --> 08:20.110
typescript po prostu infiltruje typy wartości, które przekazujemy

08:20.110 --> 08:22.170
jako argumenty tutaj.

08:22.170 --> 08:25.120
A następnie umieszcza inferowane typy

08:25.120 --> 08:28.240
dla T i U dla tego wywołania funkcji.

08:28.240 --> 08:31.283
Tak właśnie działają generics za kulisami w końcu.
