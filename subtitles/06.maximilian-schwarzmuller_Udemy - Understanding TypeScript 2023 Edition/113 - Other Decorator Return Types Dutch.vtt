WEBVTT

00:02.440 --> 00:05.240
Verteller: We zagen hoe we verbazingwekkende dingen

00:05.240 --> 00:08.120
kunnen bouwen met decoratoren, decoratorfabrieken en

00:08.120 --> 00:11.740
dan ook nog door gebruik te maken van de terugkeerwaarden van decoratoren,

00:11.740 --> 00:12.790
die in de voorbeelden,

00:12.790 --> 00:14.930
de klasse decorator ons in staat stelt om in

00:14.930 --> 00:18.740
feite de klasse waaraan we de decorator hebben toegevoegd te vervangen door

00:18.740 --> 00:21.400
een klasse die totaal anders is, die voortbouwt op de

00:21.400 --> 00:23.900
bestaande klasse, zoals in ons geval en die daarom

00:23.900 --> 00:27.230
enkele functionaliteiten kan toevoegen.

00:27.230 --> 00:30.490
Nu kun je ook in andere decoratoren waarden teruggeven,

00:30.490 --> 00:32.030
maar niet in alle.

00:32.030 --> 00:35.430
Of niet in alle gevallen wordt de terugkeerwaarde gerespecteerd.

00:35.430 --> 00:38.150
Nu, decoratoren waarbij je iets kunt teruggeven zijn

00:38.150 --> 00:41.330
de decoratoren die je kunt toevoegen aan methodes en de decoratoren

00:41.330 --> 00:43.540
die je toevoegt aan accessors.

00:43.540 --> 00:47.400
Dus hier op de setter log 2 en log 3 op de methode deze twee

00:47.400 --> 00:51.210
decoratoren, log 2 en log 3 deze kunnen ook iets teruggeven

00:51.210 --> 00:54.080
en TypeScript zou het gebruiken.

00:54.080 --> 00:58.040
De decorators op eigenschappen en op parameters kunnen natuurlijk

00:58.040 --> 01:00.670
ook iets teruggeven, maar TypeScript zal

01:00.670 --> 01:02.500
dat negeren.

01:02.500 --> 01:05.030
Retourwaarden worden daar dus niet ondersteund

01:05.030 --> 01:07.700
of niet gebruikt om precies te zijn.

01:07.700 --> 01:09.690
Wat kun je nu teruggeven op log 3?

01:09.690 --> 01:12.680
Dus op method decorators en op log 2, dus

01:12.680 --> 01:15.320
op accessor decorators wel.

01:15.320 --> 01:19.320
U kunt een gloednieuwe eigendomsbeschrijving teruggeven.

01:19.320 --> 01:22.050
Log 2 en log 3, dat zijn de twee decorateurs waar ik het

01:22.050 --> 01:23.110
over heb, toch?

01:23.110 --> 01:28.110
Log 2 en log 3, beide halen de descriptor van de eigenschap, van de methode, zou je kunnen

01:28.170 --> 01:30.510
zeggen, waar ze aan verbonden zijn.

01:30.510 --> 01:33.034
Omdat een accessor een soort methode is,

01:33.034 --> 01:36.220
heb je een functie die daar wordt uitgevoerd.

01:36.220 --> 01:39.072
Nu is de property descriptor een JavaScript

01:39.072 --> 01:41.980
ding, zoals je weet, als we deze pagina nog eens

01:41.980 --> 01:44.500
bekijken en opnieuw laden zien we dat, bijvoorbeeld

01:44.500 --> 01:47.260
voor onze accessor decorator, de property

01:47.260 --> 01:50.497
descriptor dit object hier is dat de configureerbare

01:50.497 --> 01:52.470
en enumerable en get en set eigenschappen

01:52.470 --> 01:54.910
heeft.

01:54.910 --> 01:57.660
En voor de methode decorator is onze descriptor

01:57.660 --> 01:59.330
dit object hier dat ook configureerbaar,

01:59.330 --> 02:02.290
enumerable, value en writable heeft.

02:02.290 --> 02:04.410
En dit is vanille JavaScript.

02:04.410 --> 02:07.830
Je hebt ook property descriptors in vanilla JavaScript.

02:07.830 --> 02:11.710
Hiermee kunt u een eigenschap gedetailleerder definiÃ«ren.

02:11.710 --> 02:14.430
Je kunt natuurlijk een waarde toekennen aan een eigenschap

02:14.430 --> 02:15.990
en aangezien we het hebben over een

02:15.990 --> 02:17.940
methode, is de waarde in dit geval een functie,

02:17.940 --> 02:20.010
maar je kunt ook bepalen of het beschrijfbaar

02:20.010 --> 02:22.910
is, dus of het kan worden veranderd nadat het is gemaakt, nadat

02:22.910 --> 02:24.700
het object is gemaakt.

02:24.700 --> 02:25.950
Of het configureerbaar is, dus

02:25.950 --> 02:27.140
of u de configuratie kunt wijzigen

02:27.140 --> 02:29.570
en of u deze eigenschap kunt verwijderen.

02:29.570 --> 02:30.770
En als het enumerabel

02:30.770 --> 02:33.166
is, wat betekent dat het verschijnt als je

02:33.166 --> 02:35.410
bijvoorbeeld door je object loopt.

02:35.410 --> 02:36.810
En daarom wordt een methode

02:36.810 --> 02:38.790
bijvoorbeeld standaard op false gezet,

02:38.790 --> 02:40.930
zodat als je een for in lus gebruikt op een object

02:40.930 --> 02:44.040
deze methode niet als eigenschap wordt afgedrukt.

02:44.040 --> 02:45.240
Voor een accessor hebben

02:45.240 --> 02:47.180
we ook configureerbaar en enumerable,

02:47.180 --> 02:49.750
maar we get en set en daar kun je natuurlijk ook,

02:49.750 --> 02:53.040
bijvoorbeeld, een nieuwe descriptor teruggeven die een

02:53.040 --> 02:56.180
geheel nieuwe set methode toekent of die ineens ook een

02:56.180 --> 02:58.750
get functionaliteit toevoegt.

02:58.750 --> 03:01.585
Dus hier in log 2 en log 3 kun je uiteindelijk een

03:01.585 --> 03:05.190
nieuw descriptor object retourneren en TypeScript duidelijk

03:05.190 --> 03:08.020
maken dat je dat doet door te retourneren of

03:08.020 --> 03:10.560
door het return type in te stellen op property

03:10.560 --> 03:14.860
descriptor en daar kun je dus ook het set keyword, het get keyword,

03:14.860 --> 03:17.010
de configureerbare of de enumerable

03:17.010 --> 03:22.010
property instellen en veranderen hoe deze accessor of methode geconfigureerd

03:22.500 --> 03:24.800
wordt.

03:24.800 --> 03:27.560
Nu wil ik dat hier niet doen voor de accessor, er

03:27.560 --> 03:29.800
is niets interessants dat ik ermee kan

03:29.800 --> 03:32.520
doen, daarom zal ik geen property descriptor

03:32.520 --> 03:36.400
teruggeven, maar ik zal je een voorbeeld laten zien met de method

03:36.400 --> 03:40.080
decorator waar we iets teruggeven en we kunnen interessant bouwen

03:40.080 --> 03:42.533
met behulp van decorators.
