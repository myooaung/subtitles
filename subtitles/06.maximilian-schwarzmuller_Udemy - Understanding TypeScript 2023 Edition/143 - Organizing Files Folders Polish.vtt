WEBVTT

00:02.300 --> 00:04.180
Instruktor: Zaczynamy więc

00:04.180 --> 00:05.960
od baz nazw, kontynuujmy tę

00:05.960 --> 00:08.460
drogę i dzielmy ją na kolejne pliki.

00:08.460 --> 00:11.090
Dla tego tutaj zarządzanie stanem projektu.

00:11.090 --> 00:13.610
Moglibyśmy to również umieścić w osobnym pliku.

00:13.610 --> 00:16.050
Więc złapię wszystko, w tym

00:16.050 --> 00:20.600
to tworzenie instancji stanu projektu tutaj, wyciąć

00:20.600 --> 00:24.250
go z aplikacji. ts i utworzyć nowy plik,

00:24.250 --> 00:27.060
project-state. ts.

00:27.060 --> 00:29.685
Przenieś to tam i tak jak wcześniej,

00:29.685 --> 00:32.070
umieść to w przestrzeni nazw.

00:32.070 --> 00:35.400
Namespace app, nazwa jest ważna, musi być App

00:35.400 --> 00:38.090
bo tam jest reszta naszego kodu.

00:38.090 --> 00:40.440
Umieść to wszystko tam i teraz ważne,

00:40.440 --> 00:43.560
eksportuj to, czego potrzebujesz poza tym plikiem,

00:43.560 --> 00:46.120
co w tym przypadku jest klasą projectstate,

00:46.120 --> 00:48.830
potrzebujemy jej w reszcie naszej aplikacji,

00:48.830 --> 00:51.500
a także tej stałej na dole, musimy ją również

00:51.500 --> 00:53.880
wyeksportować.

00:53.880 --> 00:57.060
Nie musisz eksportować Listenera tutaj, a także nie tego

00:57.060 --> 00:59.430
stanu, ponieważ obie rzeczy są używane tylko

00:59.430 --> 01:02.823
w tym pliku i dlatego nie muszą być eksportowane.

01:03.700 --> 01:06.860
Teraz musimy zaimportować nasz projectstate. ts, więc

01:06.860 --> 01:09.540
w App. ts, czas na kolejny import tam na górze.

01:09.540 --> 01:13.290
Projekt stan kreski, tak po prostu.

01:13.290 --> 01:16.620
Jeśli to zapiszemy, to powinno się skompilować bez błędów.

01:16.620 --> 01:19.480
Teraz będę kontynuował, a część walidacyjna tutaj

01:19.480 --> 01:21.460
może trafić również do osobnego pliku,

01:21.460 --> 01:23.960
więc złapię to wszystko, utworzę nowy plik,

01:23.960 --> 01:26.890
walidacja. ts, dodaj przestrzeń nazw

01:26.890 --> 01:30.760
App tutaj, umieść tam moją logikę sprawdzania poprawności

01:30.760 --> 01:33.560
i wyeksportuj interfejs validatable i całą

01:33.560 --> 01:36.706
funkcję devalidate tutaj, oczywiście.

01:36.706 --> 01:39.566
A potem, z powrotem w App. ts, wiesz jak to jest, wracamy tutaj

01:39.566 --> 01:43.513
do góry i dodajemy import do walidacji.

01:43.513 --> 01:43.513
ts.

01:45.160 --> 01:49.823
Teraz dekorator również może być przeniesiony do osobnego pliku.

01:49.823 --> 01:54.410
Autobind dash decorator. ts, na przykład.

01:54.410 --> 01:58.863
Ponownie dodajemy do niego przestrzeń nazw z nazwą App, umieszczamy

01:58.863 --> 02:01.950
tam funkcję i eksportujemy ją oczywiście, aby

02:01.950 --> 02:04.820
była dostępna również poza tym plikiem, a następnie

02:04.820 --> 02:08.430
tutaj w app. ts, czas na kolejny import, w którym

02:08.430 --> 02:12.633
importuję dekorator autobind dash. ts.

02:14.840 --> 02:16.484
Teraz mamy więcej rzeczy do eksportu,

02:16.484 --> 02:19.240
mamy nasz komponent, a następnie wszystkie te klasy.

02:19.240 --> 02:21.205
Chcę mieć każdą klasę w osobnym

02:21.205 --> 02:25.440
pliku, aby każdy plik był stosunkowo mały i łatwy do zarządzania.

02:25.440 --> 02:28.280
Teraz jednak wchodzimy tu w nowy problem.

02:28.280 --> 02:30.385
Dodajemy coraz więcej plików na tym samym

02:30.385 --> 02:33.934
poziomie i na razie używam tutaj czegoś w rodzaju kreski, aby zapewnić

02:33.934 --> 02:37.800
jakąś podpowiedź lub pomoc na temat tego, co jest w pliku, autobind dash

02:37.800 --> 02:42.330
decorator pokazuje nam, że prawdopodobnie jest tam dekorator.

02:42.330 --> 02:44.300
Tutaj prawdopodobnie mamy interfejsy.

02:44.300 --> 02:46.246
Tutaj modelka i tak dalej.

02:46.246 --> 02:49.070
Teraz, jeśli masz tylko trzy lub cztery pliki,

02:49.070 --> 02:52.010
to jest całkowicie w porządku, ale jeśli masz więcej

02:52.010 --> 02:55.276
plików, kończysz z bardzo trudną do zrozumienia strukturą

02:55.276 --> 02:57.430
folderów tutaj.

02:57.430 --> 03:00.056
Więc to, co lubię robić, to chcę tworzyć podfoldery.

03:00.056 --> 03:02.697
Dodam podfolder decorators, przeniosę tam

03:02.697 --> 03:05.830
mój dekorator autobind i zmienię jego nazwę na po prostu

03:05.830 --> 03:09.260
autobind, ponieważ jest już w folderze decorators.

03:09.260 --> 03:11.720
Oczywiście, że jest tam dekorator.

03:11.720 --> 03:14.440
Następnie dodam mój folder z modelami i właściwie tutaj

03:14.440 --> 03:17.523
przeniosę zarówno interfejsy przeciągania i upuszczania, jak

03:17.523 --> 03:19.355
i model projektu, po prostu dlatego, że

03:19.355 --> 03:21.763
uważam, że interfejsy przeciągania i upuszczania

03:21.763 --> 03:24.187
wszystkie w końcu są po prostu definicjami tego, jak

03:24.187 --> 03:27.263
powinny wyglądać przeciągalne i upuszczalne klasy.

03:27.263 --> 03:29.910
Tak samo jak model projektu jest definicją tego jak powinna

03:29.910 --> 03:31.630
wyglądać klasa projektu lub jak powinien

03:31.630 --> 03:33.655
wyglądać nasz obiekt projektu.

03:33.655 --> 03:38.530
Więc nazwę to drag and drop i to tutaj po prostu projekt, a następnie

03:38.530 --> 03:42.610
tutaj dodam folder util dla utility i dodam tam moją

03:42.610 --> 03:44.860
walidację, a następnie folder

03:44.860 --> 03:49.690
state i dodam do tego stan projektu.

03:49.690 --> 03:52.400
Tutaj zachowam nazwę project-state tylko po to, aby uniknąć

03:52.400 --> 03:55.300
zamieszania z tym projektem. plik ts tutaj.

03:55.300 --> 03:56.716
Technicznie, to nie byłoby problemem,

03:56.716 --> 03:59.216
ale chcę również wyjaśnić to tutaj w tym kursie, abyś

03:59.216 --> 04:00.990
miał łatwiejszy czas widząc, w którym

04:00.990 --> 04:02.640
pliku pracuję.

04:02.640 --> 04:05.640
Zdecydowanie mógłbyś zmienić nazwę tego na po prostu projekt. gdybyś chciał, to

04:05.640 --> 04:07.320
byś tu przyjechał.

04:07.320 --> 04:09.662
Teraz, z tym re-factoringiem i tymi podfolderami,

04:09.662 --> 04:12.069
oczywiście nasz import tutaj jest zepsuty, więc

04:12.069 --> 04:14.010
powinniśmy go naprawić.

04:14.010 --> 04:17.366
Interfejsy Drag and drop znajdują się w folderze models i teraz

04:17.366 --> 04:21.216
nazywają się po prostu drag-drop. ts.

04:21.216 --> 04:25.630
A model projektu również znajduje się w folderze models i ma teraz

04:25.630 --> 04:28.560
tylko nazwę project. ts.

04:28.560 --> 04:31.100
Stan projektu znajduje się w folderze state,

04:31.100 --> 04:34.040
walidacja znajduje się w folderze util, a dekorator

04:34.040 --> 04:36.896
autobind znajduje się w dekoratorach i jest

04:36.896 --> 04:39.860
po prostu nazwany autobind.

04:39.860 --> 04:42.547
Z tym, jeśli zapiszemy to, kompiluje się bez błędów

04:42.547 --> 04:44.128
i teraz mamy bardziej zarządzaną

04:44.128 --> 04:47.290
i czytelną strukturę folderów, argumentowałbym.

04:47.290 --> 04:50.500
Z tym, kontynuujmy, nie skończyliśmy.

04:50.500 --> 04:52.130
Mamy tutaj nasz komponent,

04:52.130 --> 04:54.813
teraz dla niego dodam podfolder

04:54.813 --> 04:59.813
components i tam chcę mieć mój bazowy komponent dash ts, a następnie

05:00.210 --> 05:05.210
mój plik ts elementu projektu, mój plik ts listy projektu i również

05:07.600 --> 05:12.110
plik ts wejścia projektu.

05:12.110 --> 05:14.430
Oczywiście, zawsze możesz zorganizować to

05:14.430 --> 05:17.631
inaczej, ale myślę, że to utrzymuje powiązane pliki razem.

05:17.631 --> 05:22.253
Więc możemy złapać tę abstrakcyjną klasę bazową komponentu tutaj, wyciąć

05:23.830 --> 05:27.023
ją z app ts i przenieść do komponentu bazowego.

05:29.610 --> 05:33.180
Jak wyżej i oczywiście również tak jak poprzednio,

05:33.180 --> 05:37.810
dodajemy go do przestrzeni nazw o nazwie App.

05:37.810 --> 05:41.120
A następnie przenieść go do tej przestrzeni nazw.

05:41.120 --> 05:43.890
Oczywiście dostosuję to, zanim będziemy musieli wyeksportować,

05:43.890 --> 05:46.171
abyśmy mogli użyć go w innym pliku.

05:46.171 --> 05:49.800
Ten inny plik nie będzie jednak app. ts ponieważ pliki lub klasy,

05:49.800 --> 05:53.044
w których użyłem komponentu, również zostaną

05:53.044 --> 05:54.910
przeniesione.

05:54.910 --> 05:56.856
Na przykład klasa elementu projektu tutaj, złapię

05:56.856 --> 06:00.164
to i przeniosę do elementu projektu. ts, żeby być precyzyjnym,

06:00.164 --> 06:04.550
tam dodam też namespace app i przeniosę go do namespace app w

06:04.550 --> 06:06.680
tym miejscu, a następnie wyeksportuję

06:06.680 --> 06:09.060
również tę klasę.

06:09.060 --> 06:11.413
Teraz ważne, to opiera się na komponencie, a drugi,

06:12.310 --> 06:14.740
gdybym teraz to zapisał, dostalibyśmy błąd, że komponent

06:14.740 --> 06:16.497
nie został znaleziony na końcu, więc tutaj

06:16.497 --> 06:19.353
znowu musimy dodać ten import, gdzie mamy ścieżkę referencyjną

06:19.353 --> 06:24.772
równą i wtedy tutaj jest to base-component.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
To jest zawsze import względny, więc ponieważ

06:27.330 --> 06:29.130
jest to w tym samym folderze, nie

06:29.130 --> 06:32.320
musimy mówić komponenty ukośnik tutaj, ponieważ nie musimy

06:32.320 --> 06:34.608
iść do folderu komponentów najpierw ten

06:34.608 --> 06:37.300
plik, plik elementu projektu, jest już w folderze

06:37.300 --> 06:38.729
komponentów, więc względny

06:38.729 --> 06:40.617
z tego pliku komponent bazowy jest

06:40.617 --> 06:44.913
importowany po prostu używając jego nazwy tutaj.

06:46.060 --> 06:48.030
Więc teraz pozycja projektu jest tutaj.

06:48.030 --> 06:51.963
Teraz, oczywiście, w aplikacji. ts, dostaliśmy też listę projektów.

06:55.940 --> 07:00.662
Złapmy to, przenieśmy do listy projektów plik ts tutaj i tam do przestrzeni

07:00.662 --> 07:04.940
nazw App, a następnie również tutaj do project input złapmy

07:04.940 --> 07:07.050
to, wytnijmy to stąd, z przestrzeni

07:08.010 --> 07:14.480
nazw App w aplikacji.

07:14.480 --> 07:14.480
ts,

07:14.480 --> 07:17.097
i przenieść go do pliku wejściowego ts projektu,

07:17.097 --> 07:19.857
a tam do przestrzeni nazw app.

07:20.750 --> 07:24.350
Teraz ważne tak samo jak poprzednio, wyeksportować tą klasę

07:24.350 --> 07:27.550
tutaj, project item i również project list, oczywiście

07:27.550 --> 07:30.200
wszystko musi być wyeksportowane, przy tym

07:30.200 --> 07:31.580
dostajemy masę błędów

07:31.580 --> 07:34.343
bo oczywiście nadal brakuje importu.

07:35.200 --> 07:39.930
W aplikacji. ts, powinniśmy teraz zaimportować wszystkie te komponenty, więc tutaj

07:39.930 --> 07:47.380
powinniśmy zaimportować project-input. ts, project-list.

07:47.380 --> 07:47.380
ts, a następnie zapisać to.

07:47.380 --> 07:50.240
Teraz oczywiście nadal się zawiesza, ponieważ mamy

07:50.240 --> 07:51.087
więcej rzeczy,

07:51.087 --> 07:53.192
których brakuje, w projekcie-wejściu

07:53.192 --> 07:55.541
używamy komponentu tak samo jak w projekcie-liście,

07:55.541 --> 07:57.780
więc tak jak zrobiliśmy to w projekcie-pozycji,

07:57.780 --> 08:00.091
musimy dodać ten import komponentu bazowego

08:00.091 --> 08:05.790
w pliku ts projektu-wejścia i również w pliku ts projektu-listy.

08:05.790 --> 08:08.665
I z tym, to kompiluje bez błędów i zobaczmy,

08:08.665 --> 08:10.880
czy to również działa, jeśli przeładujemy

08:10.880 --> 08:16.540
tutaj i dodam to, jest przeciągalny i droppable, i to wszystko wydaje się działać

08:16.540 --> 08:19.480
tak, jak powinno, a teraz podzielimy to na

08:19.480 --> 08:22.340
wiele plików.

08:22.340 --> 08:23.978
Nadal otrzymujemy jeden plik na końcu,

08:23.978 --> 08:26.010
ale kiedy pracujemy nad naszym kodem, jest on

08:26.010 --> 08:28.110
teraz znacznie bardziej zarządzany.

08:28.110 --> 08:30.978
Ponieważ mamy mniejsze skupione pliki, gdzie możemy

08:30.978 --> 08:33.829
szybko znaleźć to, czego szukamy i gdzie nie musimy

08:33.829 --> 08:36.358
przewijać ogromnego pliku, aby znaleźć miejsce,

08:36.358 --> 08:39.363
nad którym chcemy pracować dalej.
