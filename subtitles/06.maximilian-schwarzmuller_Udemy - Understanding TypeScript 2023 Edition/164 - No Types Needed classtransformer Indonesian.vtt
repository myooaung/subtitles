WEBVTT

00:02.270 --> 00:04.040
Instruktur: Jadi kita telah melihat

00:04.040 --> 00:05.900
Lodash, perpustakaan pihak ketiga yang

00:05.900 --> 00:08.270
dibangun dengan JavaScript untuk JavaScript.

00:08.270 --> 00:11.730
Anda juga menemukan pustaka pihak ketiga tertentu yang benar-benar

00:11.730 --> 00:13.287
merangkul skrip tipe dan fitur

00:13.287 --> 00:16.480
skrip tipe dan memberi Anda cara baru untuk menulis kode

00:16.480 --> 00:18.360
yang berfungsi karena Anda bekerja

00:18.360 --> 00:21.230
dengan skrip tipe.

00:21.230 --> 00:24.950
Salah satu contohnya adalah class transformer, contoh yang lebih baik lagi

00:24.950 --> 00:28.067
adalah class validator; kita akan melihat keduanya di sini.

00:28.067 --> 00:31.360
Tapi mari kita mulai dengan transformator kelas.

00:31.360 --> 00:35.870
Katakanlah dalam proyek kita di sini, saya sebenarnya memiliki model, model

00:35.870 --> 00:38.150
data, mari kita beri nama 'produk'.

00:38.150 --> 00:41.170
Sekarang saya akan menamakannya produk. model. tetapi Anda dapat

00:41.170 --> 00:43.820
menamai file ini apa pun yang Anda inginkan.

00:43.820 --> 00:48.820
Ide saya adalah bahwa dalam file ini saya mendefinisikan kelas untuk sebuah produk.

00:49.420 --> 00:52.180
Jadi, saya menggambarkan bagaimana produk seharusnya terlihat.

00:52.180 --> 00:55.550
Misalnya, bahwa ia memiliki judul yang merupakan string dan harga

00:55.550 --> 00:59.070
yang merupakan angka dan kemudian saya menambahkan fungsi konstruktor

00:59.070 --> 01:02.120
di mana keduanya dapat diinisialisasi.

01:02.120 --> 01:07.120
Jadi string, tambahkan harga dan kemudian saya katakan judul ini sama dengan 't' dan

01:07.210 --> 01:09.360
harga harga ini sama dengan 'p'.

01:09.360 --> 01:10.810
Dan tentu saja kita bisa saja menggunakan

01:10.810 --> 01:12.980
inisialisasi jalan pintas di mana kita hanya menggunakan

01:12.980 --> 01:14.423
konstruktornya saja.

01:16.150 --> 01:20.400
Kemudian katakanlah kita selalu memiliki metode, dapatkan

01:20.400 --> 01:25.400
informasi di mana saya mengembalikan array katakanlah di mana elemen

01:25.950 --> 01:30.850
pertama adalah judul dan elemen kedua sebenarnya adalah string di

01:30.850 --> 01:35.770
mana saya memiliki tanda dolar dan kemudian disuntikkan ke dalam string

01:35.770 --> 01:37.833
ini, harga ini.

01:39.030 --> 01:43.030
Jadi model yang sangat sederhana di sini, kelas yang sangat sederhana.

01:43.030 --> 01:45.940
Dan sekarang kita tentu saja dapat menggunakan kelas ini,

01:45.940 --> 01:49.590
jika Anda mau, dalam aplikasi. ts jadi di sana saya akan menyingkirkan Lodash dan

01:49.590 --> 01:54.590
sebagai gantinya mengimpor produk dari . /produk. model Sekarang untuk itu Anda perlu

01:56.200 --> 01:58.920
memastikan ini dalam model produk Anda benar-benar

01:58.920 --> 02:01.010
mengekspor kelas ini jika tidak, Anda

02:01.010 --> 02:03.860
tidak dapat mengimpornya dan di sini kita harus mengekspor

02:03.860 --> 02:05.800
produk seperti ini karena saya menggunakan

02:05.800 --> 02:07.890
ekspor bernama di sini dengan menambahkan

02:07.890 --> 02:11.950
kata kunci ekspor tepat di depan kelas.

02:11.950 --> 02:16.497
Jadi sekarang di sini tentu saja kita bisa membuat produk baru,

02:18.150 --> 02:23.150
sebuah buku yang harganya 12. 99 dan setelah itu saya konsol log p1 mendapatkan

02:24.080 --> 02:28.190
informasi dan kita harus benar-benar mencatat array ini.

02:28.190 --> 02:31.390
Jadi jika kita sekarang menjalankan npm start di sini, dev

02:31.390 --> 02:34.250
paket web kita akan mulai dan kita akan melihat array

02:34.250 --> 02:37.340
yang bagus ini dengan informasi tentang buku ini.

02:37.340 --> 02:39.463
Jadi, jika saya memuat ulang di sini, ini dia.

02:40.630 --> 02:43.170
Sekarang, tentu saja tidak terlalu mewah, itu berhasil,

02:43.170 --> 02:44.930
tetapi itu bukan hal baru.

02:44.930 --> 02:47.270
Sekarang skenario umum dalam aplikasi yang

02:47.270 --> 02:49.610
lebih besar adalah Anda mungkin mengunduh

02:49.610 --> 02:52.150
beberapa data, katakanlah dari server, Anda

02:52.150 --> 02:54.490
mengambil data dari server back end dan server

02:54.490 --> 02:58.370
itu kemudian mengembalikan beberapa data json yang Anda berikan yang

02:58.370 --> 03:01.560
kemudian mungkin berupa daftar produk.

03:01.560 --> 03:05.520
Jadi di sini kita mungkin memiliki produk yang kita dapatkan dari server di mana kita

03:05.520 --> 03:10.520
kemudian memiliki judul, karpet dan harga, 29. 99 dan kami kemudian

03:13.047 --> 03:18.047
juga memiliki buku ini, jadi judul, buku

03:18.120 --> 03:22.830
dan ada harga 10. 99, katakanlah.

03:22.830 --> 03:25.310
Jadi itu adalah array data yang sangat sederhana

03:25.310 --> 03:27.730
yang kemudian kita dapatkan dari back end.

03:27.730 --> 03:30.590
Sekarang ini tentu saja objek JavaScript tetapi

03:30.590 --> 03:33.730
mereka bukan instance dari model produk kita.

03:33.730 --> 03:37.220
Dan itu adalah skenario tipikal di mana Anda mendapatkan data sebagai

03:37.220 --> 03:40.990
json yang tidak memiliki data terlampir seperti fungsi konstruktor mana

03:40.990 --> 03:42.850
yang Anda kode depan milik.

03:42.850 --> 03:46.770
Server Anda tahu itu dan json juga merupakan format yang hanya mengirimkan

03:46.770 --> 03:51.230
data dasar, Anda tidak memiliki data meta yang kaya untuk objek Anda yang

03:51.230 --> 03:53.540
dilampirkan di sana.

03:53.540 --> 03:56.300
Atau setidaknya Anda harus melakukan ini secara manual.

03:56.300 --> 04:00.120
Jadi, dengan kata lain, produk yang kita dapatkan di sini adalah objek-objek

04:00.120 --> 04:03.310
yang tidak memiliki metode get information.

04:03.310 --> 04:08.230
Sekarang secara tradisional, jika Anda sekarang ingin mengubah ini menjadi

04:08.230 --> 04:12.680
instance model Anda, Anda harus melakukannya secara manual.

04:12.680 --> 04:17.680
Anda bisa memiliki produk yang dimuat yang kemudian, katakanlah menggunakan

04:19.260 --> 04:22.770
produk, memanggil metode peta dan pada setiap produk dalam

04:22.770 --> 04:25.680
larik itu kita kemudian mengembalikan produk

04:25.680 --> 04:30.680
baru untuk prod. judul dan prod. harga dan setelah itu kita

04:34.330 --> 04:36.660
akan memiliki array yang penuh dengan

04:36.660 --> 04:40.230
instance fungsi konstruktor produk nyata dan kemudian

04:40.230 --> 04:43.163
kita benar-benar dapat mengulanginya, produk

04:44.330 --> 04:47.900
yang dimuat dan kemudian di sana misalnya konsol log

04:47.900 --> 04:51.083
prod. mendapatkan informasi.

04:52.150 --> 04:56.010
Ini adalah bagaimana kita dapat secara manual mengubah larik atau

04:56.010 --> 05:00.070
juga satu objek Vanilla JavaScript tanpa nama menjadi instance dari

05:00.070 --> 05:02.880
fungsi konstruktor tertentu dan karenanya, kita

05:02.880 --> 05:05.000
akan mendapatkan output ini.

05:05.000 --> 05:07.220
Sekarang, melakukan ini secara manual memang tidak praktis.

05:07.220 --> 05:09.590
Ini adalah sekumpulan langkah tambahan di

05:09.590 --> 05:12.710
sini, ini hanya transformasi sederhana tentunya.

05:12.710 --> 05:16.690
Di situlah paket class transformer dapat membantu kita.

05:16.690 --> 05:19.330
Itu membuatnya sangat, sangat sederhana.

05:19.330 --> 05:22.390
Di sana, kita juga mendefinisikan kelas dalam tipe script

05:22.390 --> 05:25.010
dalam kasus kita di sini, kemudian kita mungkin

05:25.010 --> 05:29.340
mendapatkan beberapa data, katakanlah dari server dan kemudian kita benar-benar

05:29.340 --> 05:32.430
dapat memanggil metode kenyamanan sederhana dan secara

05:32.430 --> 05:36.893
otomatis akan mengkonversi data kita ke dalam model yang tepat.

05:38.100 --> 05:40.030
Sekarang untuk itu, pertama-tama

05:40.030 --> 05:44.840
mari kita jalankan nmp install class transformer--save, seperti ini dan setelah

05:45.730 --> 05:47.820
ini selesai mari kita jalankan npm install

05:47.820 --> 05:50.350
reflect-metadata--save Sebuah paket, paket

05:51.451 --> 05:54.470
ini pada akhirnya bergantung pada.

05:54.470 --> 05:57.460
Jadi di sini mari kita impor ini juga dan kemudian seperti

05:57.460 --> 06:02.460
yang juga menginstruksikan kita di sini dalam instruksi penyiapan di sini, impor metadata

06:02.890 --> 06:07.680
yang mencerminkan metadata dalam file entri rute Anda, dalam kasus saya di sini

06:07.680 --> 06:11.410
di aplikasi. ts Saya mengimpor pustaka pihak ketiga

06:11.410 --> 06:14.970
yang baru saja kita instal sebagai ketergantungan pada pustaka kita.

06:14.970 --> 06:17.210
Sekarang yang sebenarnya tidak ada langkah js dan oleh karena

06:17.210 --> 06:18.610
itu kita bisa melewati yang satu ini.

06:18.610 --> 06:20.180
Di browser kita masih harus menginstal

06:20.180 --> 06:24.780
paket yang sama dan menambahkan impor ini di sini tidak masalah karena kita menggunakan

06:24.780 --> 06:26.880
paket web dan oleh karena itu sekarang

06:26.880 --> 06:30.090
kita benar-benar baik untuk pergi.

06:30.090 --> 06:35.090
Dan sekarang kita dapat mengimpor sesuatu dari class transformer dan

06:36.290 --> 06:40.210
kemudian sesuatu itu adalah metode 'plain to class'.

06:40.210 --> 06:42.630
Paket ini juga memiliki beberapa metode lainnya.

06:42.630 --> 06:45.200
Anda bisa mempelajari lebih lanjut tentang mereka di sini dalam dokumen resmi.

06:45.200 --> 06:49.060
Tetapi 'plain to class' adalah metode utama.

06:49.060 --> 06:54.060
Anda bisa menggunakannya di sini untuk mengatur produk yang Anda muat, misalnya.

06:55.150 --> 06:58.230
Alih-alih melakukan ini secara manual di sini seperti yang kita lakukan

06:58.230 --> 07:01.480
sebelumnya, kita dapat mengatur produk yang dimuat sama dengan plain to class

07:01.480 --> 07:03.760
dan sekarang meneruskannya dua argumen di sini.

07:03.760 --> 07:08.070
Argumen pertama adalah kelas yang ingin kita ubah.

07:08.070 --> 07:10.190
Dalam kasus saya di sini, produk.

07:10.190 --> 07:12.700
Dan saya tidak menginstansiasi atau memanggilnya,

07:12.700 --> 07:15.560
saya hanya menunjuk pada kelas itu.

07:15.560 --> 07:19.460
Argumen kedua adalah data yang ingin kita ubah.

07:19.460 --> 07:23.520
Jadi dalam kasus saya di sini, itu adalah produk.

07:23.520 --> 07:25.840
Dan sekarang apa yang akan dilakukan oleh

07:25.840 --> 07:28.100
paket ini adalah ia akan membahas larik

07:28.100 --> 07:31.034
ini mengubah setiap objek JavaScript Vanilla biasa

07:31.034 --> 07:34.090
di sini menjadi instance dari kelas ini.

07:34.090 --> 07:37.830
Jadi jika sekarang kita menyimpan ini dan menjalankan npm start lagi,

07:37.830 --> 07:40.330
halaman web yang memulai server akan boot lagi dan

07:40.330 --> 07:43.270
seharusnya membangun proyek ini tanpa kesalahan.

07:43.270 --> 07:46.540
Jika saya memuat ulang halaman, saya mendapatkan output yang sama seperti

07:46.540 --> 07:49.530
sebelumnya tetapi tentu saja dengan kode yang lebih sedikit dari

07:49.530 --> 07:51.870
sisi kita karena kita menggunakan paket ini.

07:51.870 --> 07:53.403
Dan yang menakjubkan tentang paket

07:53.403 --> 07:57.070
ini adalah bahwa paket ini bekerja dengan baik di sini karena paket ini dibangun

07:57.070 --> 08:01.230
di atas type script dan memanfaatkan type script dan memanfaatkan fakta bahwa kita

08:01.230 --> 08:04.280
memiliki kelas di sana yang dapat kita arahkan.

08:04.280 --> 08:08.730
Tetapi sejujurnya, paket ini bekerja sangat baik dengan type script

08:08.730 --> 08:10.900
tetapi tidak menggunakan fitur

08:10.900 --> 08:12.600
khusus type script.

08:12.600 --> 08:16.630
Kelas misalnya juga ada di Vanilla JavaScript.

08:16.630 --> 08:20.170
Jadi, meskipun ini dikembangkan terutama untuk jenis skrip, namun

08:20.170 --> 08:23.610
sebenarnya juga berfungsi dalam Vanilla JavaScript.

08:23.610 --> 08:26.633
Namun, hal itu tidak akan berlaku untuk paket berikutnya.
