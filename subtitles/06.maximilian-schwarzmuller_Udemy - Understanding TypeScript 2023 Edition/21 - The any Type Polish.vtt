WEBVTT

00:02.260 --> 00:03.960
Instruktor: Z tym, że już prawie skończyliśmy

00:03.960 --> 00:04.920
z podstawowymi typami.

00:04.920 --> 00:07.470
Jest jeszcze jeden typ, który już widzieliśmy,

00:07.470 --> 00:09.390
a jest to typ any.

00:09.390 --> 00:11.480
Typ any jest najbardziej elastycznym typem,

00:11.480 --> 00:13.310
jaki można przypisać w TypeScript.

00:13.310 --> 00:16.710
Ten typ nic nie mówi TypeScriptowi.

00:16.710 --> 00:19.960
Zasadniczo oznacza to, że możesz przechowywać tam dowolną wartość.

00:19.960 --> 00:22.031
Nie dostaliśmy żadnego konkretnego przydziału typu.

00:22.031 --> 00:25.260
TypeScript w zasadzie nigdy nie będzie krzyczeć na ciebie,

00:25.260 --> 00:27.040
gdy użyjesz jakiegokolwiek.

00:27.040 --> 00:28.030
Wracając do naszego

00:28.030 --> 00:31.360
kodu tutaj, jeśli ustawiłbym typ ulubionych działań na dowolny,

00:31.360 --> 00:32.870
nie dostałbym błędu.

00:32.870 --> 00:36.580
Jeśli ustawi go na dowolną tablicę, przynajmniej mówię TypeScriptowi,

00:36.580 --> 00:39.220
że ulubione działania są tablicą czegoś.

00:39.220 --> 00:41.460
Więc jeśli przechowywałbym tylko pojedynczą wartość

00:41.460 --> 00:42.830
I tam, otrzymałbym błąd.

00:42.830 --> 00:44.500
Ale dopóki jest to tablica, mogę

00:44.500 --> 00:46.638
przechowywać w niej co tylko chcę.

00:46.638 --> 00:49.840
Więc każdy jest naprawdę elastyczny.

00:49.840 --> 00:52.070
I to może brzmieć świetnie na pięści, ale

00:52.070 --> 00:54.060
w rzeczywistości jest to duża wada

00:54.060 --> 00:58.290
i absolutnie chcesz uniknąć wszelkich, gdy tylko jest to możliwe.

00:58.290 --> 01:00.170
Ponieważ każdy zabiera w zasadzie

01:00.170 --> 01:02.512
wszystkie zalety, jakie daje TypeScript.

01:02.512 --> 01:04.380
To daje ci to samo doświadczenie,

01:04.380 --> 01:06.430
które masz z waniliowym JavaScriptem,

01:06.430 --> 01:10.480
gdzie również musisz mieć dowolny typ na wszystko, że tak powiem.

01:10.480 --> 01:13.820
Any w zasadzie upewnia się, że kompilator TypeScript nie

01:13.820 --> 01:16.020
może niczego sprawdzić, ponieważ jeśli

01:16.020 --> 01:19.180
dowolna właściwość lub dowolna zmienna może przechowywać

01:19.180 --> 01:20.818
dowolną wartość, cóż, wtedy

01:20.818 --> 01:23.687
nie ma wiele do sprawdzenia, prawda?

01:23.687 --> 01:27.130
Więc możesz użyć dowolnego jako awaryjnego, jeśli masz jakąś

01:27.130 --> 01:30.270
wartość, jakiś rodzaj danych, gdzie naprawdę nie możesz

01:30.270 --> 01:31.810
wiedzieć, jaki rodzaj danych

01:31.810 --> 01:33.820
będzie tam przechowywany i gdzie wtedy

01:33.820 --> 01:37.050
być może używasz niektórych kontroli runtime, tak jak zrobiliśmy

01:37.050 --> 01:40.440
to tutaj, w czasie runtime, aby zawęzić to, co chcesz zrobić dla

01:40.440 --> 01:42.660
niektórych wartości.

01:42.660 --> 01:44.600
Wtedy można było pójść z dowolnym.

01:44.600 --> 01:48.210
Ale w innych przypadkach naprawdę chcesz uniknąć jakichkolwiek.

01:48.210 --> 01:51.120
Jeśli masz szansę wiedzieć, z jakimi danymi

01:51.120 --> 01:54.090
pracujesz, bądź o tym jednoznaczny.

01:54.090 --> 01:56.780
Pozwól, aby inferencja TypeScript wykonała swoją pracę

01:56.780 --> 01:58.817
lub jawnie ustawiła własne typy.

01:58.817 --> 02:01.783
Nie popadaj w żadną, jeśli nie musisz.
