WEBVTT

00:02.450 --> 00:05.030
المعلم: دعنا نبتعد عن الأحمال الزائدة

00:05.030 --> 00:09.010
للوظائف الآن واسمحوا لي أن أقدم ميزة أخرى رائعة للغاية.

00:09.010 --> 00:13.350
وهذا تسلسل اختياري.

00:13.350 --> 00:16.720
لنفترض أن لديك تطبيقًا تحصل فيه على

00:16.720 --> 00:21.603
بيانات من واجهة خلفية من قاعدة بيانات أو من أي مصدر

00:21.603 --> 00:26.350
لا تعرف فيه على وجه اليقين ما إذا كان قد تم تحديد

00:26.350 --> 00:29.500
خاصية معينة في كائن ما.

00:29.500 --> 00:33.920
لنفترض أننا جلبنا بيانات المستخدم و fetchedUserData يمكن أن يكونا

00:33.920 --> 00:36.380
كائنًا يتعلق بمستخدم جلبناه.

00:36.380 --> 00:39.705
هناك قد يكون لدينا معرّف قد

00:39.705 --> 00:44.705
يكون لدينا اسم Max وقد نتوقع أيضًا وظيفة

00:45.730 --> 00:50.550
ملكية أخرى وهي كائن له عنوان وله أيضًا

00:50.550 --> 00:53.950
وصف ، شركتي الخاصة.

00:53.950 --> 00:56.900
الآن إذا حصلنا على مثل هذه البيانات بالطبع يمكننا العمل معها.

00:56.900 --> 01:00.150
الآن يمكنك القيام بأشياء أكثر تعقيدًا ولكن

01:00.150 --> 01:03.940
هنا لنفترض أن كل ما أفعله هو أنني أقوم بالفعل بتحميل

01:03.940 --> 01:06.871
المسمى الوظيفي هنا بشكل صحيح.

01:06.871 --> 01:09.940
الآن إذا حفظنا ذلك مع خادم التطوير الخاص بنا وتشغيله

01:09.940 --> 01:12.880
والتجميع قيد التشغيل في وضع المراقبة ، سأحصل على

01:12.880 --> 01:14.420
الرئيس التنفيذي هنا.

01:14.420 --> 01:17.395
الآن هذا ليس بعيد المنال ، ومع ذلك

01:17.395 --> 01:22.395
، إذا كنا نحضر هذا من الخلفية ، لأي سبب من الأسباب ربما لا

01:23.080 --> 01:27.690
نحضر جميع البيانات التي نحتاجها ، ربما لم يتم تعيين

01:27.690 --> 01:30.490
بعض البيانات في هذه المرحلة.

01:30.490 --> 01:34.730
في التطبيقات الأكبر والأكثر تعقيدًا ، من المؤكد أنك تعمل

01:34.730 --> 01:39.240
أحيانًا مع بيانات منظمة مع بيانات متداخلة حيث لا تعرف على وجه

01:39.240 --> 01:42.650
اليقين ما إذا كانت بعض الخصائص على كائن ما قد تم

01:42.650 --> 01:45.340
تعيينها أو ما إذا كانت غير محددة.

01:45.340 --> 01:49.680
لنفترض هنا أن الوظيفة غير موجودة هنا لأي سبب من الأسباب التي

01:49.680 --> 01:53.180
لا نقوم بإحضارها ، وهنا بالطبع أتلقى خطأ الآن يشكو

01:53.180 --> 01:55.930
TypeScript من هذا لأنه يعرف أنه لا توجد

01:55.930 --> 01:57.843
خاصية وظيفة الآن.

01:57.843 --> 02:01.347
تكمن المشكلة في أنه يعرف لهذه البيانات أنه لن يعرف

02:01.347 --> 02:05.660
ما إذا كانت تلك هي البيانات التي نحضرها من ملف ما لا يتم التحكم

02:05.660 --> 02:09.720
فيه من خلال TypeScript أو كما قلت للتو إذا كنا نحضر هذا من

02:09.720 --> 02:12.530
الواجهة الخلفية ولا نعرف مع التأكد من

02:12.530 --> 02:15.550
البيانات التي سيتم إرجاعها.

02:15.550 --> 02:18.150
الآن إذا كنت لا تعرف ما إذا كان هذا محددًا أم لا ، فما

02:18.150 --> 02:21.730
يمكننا القيام به في JavaScript العادي هو أنه يمكننا محاولة الوصول

02:21.730 --> 02:25.098
إلى الوظيفة وإذا نجح ذلك فإننا نستمر ونصل إلى العنوان.

02:25.098 --> 02:29.450
هذه هي طريقة JavaScript للتحقق مما إذا كان هناك شيء ما قبل

02:29.450 --> 02:33.520
أن نتعمق أكثر في هذا الكائن المحتمل ، وإذا كان هذا غير

02:33.520 --> 02:37.110
محدد ، فلن يعمل هذا الرمز أبدًا ، وبالتالي لدينا

02:37.110 --> 02:39.400
خطأ وقت تشغيل أوسع.

02:39.400 --> 02:42.410
مرة أخرى هنا يعرف TypeScript بالطبع أن الوظيفة

02:42.410 --> 02:45.180
غير موجودة ، ولكن إذا تم جلبها من بعض المصادر

02:45.180 --> 02:48.470
حيث لا يمكن لـ TypeScript أن تبدو وكأنها نتيجة

02:48.470 --> 02:52.910
طلب HTTP ، فستكون هذه هي الطريقة الآمنة لتجنب أخطاء وقت التشغيل

02:52.910 --> 02:54.920
في JavaScript.

02:54.920 --> 02:58.110
الآن إذا كان هذا موجودًا ، فسنحصل على نفس الناتج كما كان من قبل.

02:58.110 --> 03:01.400
إذا لم يكن موجودًا ، فلن نحصل على خطأ وقت التشغيل

03:01.400 --> 03:02.233
على الأقل.

03:02.233 --> 03:07.020
باستخدام TypeScript ، لديك طريقة أفضل للقيام بذلك.

03:07.020 --> 03:10.520
لقد حصلت على عامل التسلسل الاختياري.

03:10.520 --> 03:15.320
يمكنك إضافة علامة استفهام بعد الشيء الذي لست متأكدًا مما إذا

03:15.320 --> 03:16.880
كان معرّفًا أم لا.

03:16.880 --> 03:21.600
على الأقل إذا كنت تستخدم الإصدار 3 من TypeScript. 7 أو أعلى.

03:21.600 --> 03:24.770
هنا IDE الخاص بي لا يحب هذا ، ولكن هذا بناء جملة

03:24.770 --> 03:26.300
مدعوم بعد ذلك.

03:26.300 --> 03:30.370
هذا يخبر TypeScript أن هذا موجود ، إذا كان يصل إلى الوظيفة ، وبالتالي

03:30.370 --> 03:33.450
يمكننا هنا إضافة علامة الاستفهام وبالتالي الوصول

03:33.450 --> 03:36.314
إلى العنوان فقط إذا تم تحديد الوظيفة.

03:36.314 --> 03:39.300
الآن إذا فعلنا ذلك ، ما زلت أحصل على خطأ هنا إذا حاولت

03:39.300 --> 03:42.490
تجميعه لأن TypeScript لا يزال يعرف على وجه اليقين

03:42.490 --> 03:44.510
أن الوظيفة غير موجودة.

03:44.510 --> 03:47.370
ولكن إذا كان لا يعرف ذلك أو إذا قمت بالتعليق

03:47.370 --> 03:51.840
على هذا في هذا التجميع على ما يرام وكل ما يتم تنفيذه كما كان من قبل.

03:51.840 --> 03:56.400
لذا فإن عامل التسلسل الاختياري هذا يساعدنا في الوصول بأمان إلى الخصائص

03:56.400 --> 04:00.730
المتداخلة والكائنات المتداخلة في بيانات الكائن الخاصة بنا ، وإذا

04:00.730 --> 04:03.610
كان الشيء الموجود أمام علامة الاستفهام غير

04:03.610 --> 04:07.061
محدد ، فلن يتمكن من الوصول إلى الشيء بعد ذلك ، وبالتالي

04:07.061 --> 04:10.910
لن يتسبب في حدوث خطأ في وقت التشغيل ولكنه بدلاً من ذلك سوف يحدث

04:10.910 --> 04:12.420
فقط لا تستمر.

04:12.420 --> 04:15.210
لذلك وراء الكواليس يتم تجميع هذا بشكل أساسي إلى

04:15.210 --> 04:18.380
إذا كان يتحقق مما إذا كان ذلك موجودًا قبل أن يحاول الوصول

04:18.380 --> 04:19.213
إليه.
