WEBVTT

00:02.220 --> 00:03.053
Instrutor: Agora se

00:03.053 --> 00:04.883
você seguir em frente, temos mais opções,

00:04.883 --> 00:07.920
noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Isto o ajuda com a qualidade do código, basicamente.

00:10.470 --> 00:13.110
O TypeScript reclamará se você tiver certas

00:13.110 --> 00:15.930
variáveis não utilizadas e assim por diante.

00:15.930 --> 00:20.930
Portanto, se ativamos estas três opções, por exemplo, esta opção ajuda você com

00:21.711 --> 00:24.230
as declarações Switch, onde você pode esquecer

00:24.230 --> 00:26.270
a palavra-chave break.

00:26.270 --> 00:28.880
Mas se ativamos estas três opções, o que o TypeScript

00:28.880 --> 00:31.760
reclamará é, por exemplo, se você tinha uma variável

00:31.760 --> 00:33.600
de nome de usuário aqui, localmente

00:33.600 --> 00:36.730
nesta função, e você não a usa.

00:36.730 --> 00:39.490
Veja, isto tem linhas amarelas de rabisco porque

00:39.490 --> 00:41.500
não é um erro, na verdade.

00:41.500 --> 00:43.179
É mais como um aviso ou uma dica.

00:43.179 --> 00:45.643
Portanto, se eu compilar aqui, você verá agora,

00:47.750 --> 00:49.500
no entanto, eu recebo um erro porque

00:49.500 --> 00:51.900
o TypeScript só conhece erros.

00:51.900 --> 00:54.140
E aí vemos que o nome de usuário é declarado,

00:54.140 --> 00:57.080
mas seu valor nunca é lido porque nos certificamos

00:57.080 --> 01:00.550
de que não queremos variáveis locais não utilizadas.

01:00.550 --> 01:02.483
Variáveis globais não utilizadas,

01:03.440 --> 01:06.340
portanto, se eu tivesse algo como appId aqui, são permitidas,

01:06.340 --> 01:09.130
porque o TypeScript não pode saber se você talvez precise

01:09.130 --> 01:13.870
desse valor definido globalmente em outro arquivo de script.

01:13.870 --> 01:14.980
Portanto, isto é permitido,

01:14.980 --> 01:17.280
mas em uma função onde não há outro lugar onde você

01:17.280 --> 01:20.010
possa precisar dele, o TypeScript irá reclamar agora se

01:20.010 --> 01:22.020
você tiver código não utilizado.

01:22.020 --> 01:23.540
E isso geralmente é uma boa idéia.

01:23.540 --> 01:26.021
Permite que você tire esse código não utilizado.

01:26.021 --> 01:28.510
O mesmo vale para os parâmetros não utilizados.

01:28.510 --> 01:31.350
Se você pegasse um H aqui onde um, é claro, a ligação

01:31.350 --> 01:33.050
está quebrada agora, mas mesmo

01:33.050 --> 01:35.970
que passemos isso neste trabalho, mas agora, novamente,

01:35.970 --> 01:39.220
o TypeScript e, portanto, o ID nos diz que isto não é usado

01:39.220 --> 01:41.780
e ou isto, então talvez você devesse removê-lo

01:41.780 --> 01:44.293
ou começar a usá-lo.

01:45.238 --> 01:48.173
Portanto, isso não é Parâmetros não utilizados.

01:48.173 --> 01:51.365
E noImplicitReturns significa que teremos

01:51.365 --> 01:55.620
um erro se tivermos uma função que às vezes devolve algo e às

01:55.620 --> 01:57.130
vezes não devolve.

01:57.130 --> 02:00.913
Digamos que temos outra função, acrescentemos, onde obtemos

02:01.912 --> 02:02.940
dois números.

02:02.940 --> 02:05.906
Número e n2 é um número.

02:05.906 --> 02:10.906
E, é claro, podemos retornar n1 mais n2.

02:14.030 --> 02:15.710
Mas digamos que estamos, por

02:15.710 --> 02:18.518
alguma razão, verificando se n1 mais n2 é maior

02:18.518 --> 02:21.800
que zero, porque só queremos retornar se tivermos um

02:21.800 --> 02:23.700
resultado maior que zero.

02:23.700 --> 02:25.040
Então queremos um valor retornado.

02:25.040 --> 02:26.940
Caso contrário, não queremos devolver nada.

02:26.940 --> 02:28.170
Não queremos um retorno.

02:28.170 --> 02:30.550
Bem, então recebemos um aviso por causa dessa configuração

02:30.550 --> 02:32.598
extra com noImplicitReturns.

02:32.598 --> 02:36.401
O TypeScript detecta que nem todos os ramos nesta função levam a uma declaração

02:36.401 --> 02:38.760
de retorno e, por causa de nossa configuração,

02:38.760 --> 02:40.650
isso não é permitido.

02:40.650 --> 02:44.150
Pelo menos não temos que devolver nada aqui deliberadamente, acrescentando

02:44.150 --> 02:45.790
a palavra-chave return.

02:45.790 --> 02:48.260
Não é permitido omiti-lo aqui.

02:48.260 --> 02:49.730
É permitido se você tem uma

02:49.730 --> 02:52.446
função que não devolve nada, em nenhum ramo, mas se

02:52.446 --> 02:54.520
você tem pelo menos um caso em que sua função

02:54.520 --> 02:56.423
devolve algo, então você tem que ter

02:56.423 --> 02:58.770
certeza de que você devolve algo em todos os

02:58.770 --> 02:59.933
casos.

03:01.830 --> 03:03.130
E com isso, estamos nos aproximando do fim

03:03.130 --> 03:04.240
desta caminhada de configuração.

03:04.240 --> 03:06.526
Podemos ignorar o móduloResolução aqui.

03:06.526 --> 03:08.933
Todas estas opções são na verdade bastante

03:08.933 --> 03:10.830
avançadas, que não nos importam aqui,

03:10.830 --> 03:13.510
não importam para você em muitos projetos.

03:13.510 --> 03:16.600
As Opções do Mapa de Origem permitem que você aperfeiçoe estes mapas de origem

03:16.600 --> 03:18.180
que examinamos anteriormente.

03:18.180 --> 03:21.440
Portanto, estes arquivos de tradução de JavaScript para TypeScript.

03:21.440 --> 03:23.720
Normalmente as configurações padrão devem estar bem

03:23.720 --> 03:26.000
aqui, portanto, se você não sabe o que está mudando e

03:26.000 --> 03:27.010
por que está fazendo isso,

03:27.010 --> 03:29.470
você normalmente não precisa mudar nada aqui.

03:29.470 --> 03:31.512
E em relação a estas opções experimentais,

03:31.512 --> 03:34.380
darei uma olhada nelas, especificamente em Decoradores

03:34.380 --> 03:38.910
experimentais, mais tarde no módulo Decoradores.

03:38.910 --> 03:41.810
Isto basicamente permite que certas características

03:41.810 --> 03:45.060
sejam usadas em TypeScript que são realmente experimentais,

03:45.060 --> 03:48.271
onde não é certo se elas acabarão em JavaScript em algum

03:48.271 --> 03:50.270
momento no futuro e onde você ainda

03:50.270 --> 03:52.940
pode querer trabalhar com elas.

03:52.940 --> 03:55.220
Então você tem que dizer explicitamente ao TypeScript

03:55.220 --> 03:57.070
que você quer trabalhar com estas características

03:57.070 --> 03:59.390
e pode fazer isso com essa configuração.

03:59.390 --> 04:01.880
Mas novamente, voltarei a esse assunto.

04:01.880 --> 04:04.170
E, portanto, agora, caminhamos através deste arquivo,

04:04.170 --> 04:05.870
muitas opções que você pode definir ali.

04:05.870 --> 04:08.222
E à medida que o TypeScript cresce, você normalmente

04:08.222 --> 04:10.612
também recebe mais e mais opções adicionadas aqui,

04:10.612 --> 04:13.837
portanto os documentos oficiais são sempre um ótimo lugar para

04:13.837 --> 04:16.160
mergulhar mais fundo e garantir que você não perca

04:16.160 --> 04:18.210
uma opção interessante que possa ajudá-lo

04:18.210 --> 04:20.343
em seu projeto.
