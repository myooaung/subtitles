WEBVTT

00:02.300 --> 00:04.800
Instruktor: Teraz luźno związane z opcjonalnym łańcuchem,

00:04.800 --> 00:06.930
mamy kolejną miłą funkcję w TypeScript, która

00:06.930 --> 00:09.550
pomaga nam radzić sobie z danymi nullish.

00:09.550 --> 00:12.820
I ta cecha nazywa się koalescencja zerowa.

00:12.820 --> 00:15.900
Teraz wyobraź sobie, że masz jakieś dane, jakieś dane

00:15.900 --> 00:17.530
wejściowe, gdzie nie wiesz

00:17.530 --> 00:19.830
z pewnością, czy jest to null lub undefined,

00:19.830 --> 00:23.320
czy też jest to rzeczywiście ważny kawałek danych.

00:23.320 --> 00:28.180
Na przykład, userInput może być null powiedzmy.

00:28.180 --> 00:31.040
Teraz, znowu, tutaj, twardo kodujemy to w TypeScript,

00:31.040 --> 00:33.580
stąd TypeScript wie, że to jest null, ale

00:33.580 --> 00:36.500
jeśli pobierasz to przez jakiś DOM API, gdzie nie

00:36.500 --> 00:38.650
wiesz tego z pewnością, lub jeśli pobierasz

00:38.650 --> 00:41.320
to z back-endu, wtedy możesz nie wiedzieć z

00:41.320 --> 00:42.970
góry i TypeScript może nie wiedzieć,

00:42.970 --> 00:46.510
czy to jest null czy nie.

00:46.510 --> 00:50.650
Jeśli następnie chcesz przechowywać to w jakiejś innej stałej lub zmiennej,

00:50.650 --> 00:52.803
takiej jak storedData, możesz chcieć

00:54.090 --> 00:56.150
się upewnić, że jeśli jest to null, przechowujesz

00:56.150 --> 00:58.760
wartość awaryjną.

00:58.760 --> 01:03.560
Teraz możesz to zrobić za pomocą operatora logicznego OR, gdzie przechowujesz

01:03.560 --> 01:05.330
domyślną, gdzie otrzymujesz,

01:05.330 --> 01:06.740
że druga wartość pierwszego

01:06.740 --> 01:08.940
jest niezdefiniowana lub null, jeśli

01:08.940 --> 01:11.550
jest fałszywa, aby być dokładnym.

01:11.550 --> 01:13.690
Problem z tym podejściem jest taki,

01:13.690 --> 01:17.110
że jeśli to faktycznie nie jest null lub undefined,

01:17.110 --> 01:18.960
ale powiedzmy pusty ciąg, to

01:18.960 --> 01:21.740
jest traktowany jako wartość false, a zatem

01:21.740 --> 01:25.600
ta domyślna, awaryjna wartość będzie kopać w.

01:25.600 --> 01:28.850
Więc jeśli pocieszę. zaloguj storedData tutaj,

01:28.850 --> 01:31.700
zobaczysz, że to drukuje DEFAULT.

01:31.700 --> 01:33.430
Teraz może to jest to, czego chcesz,

01:33.430 --> 01:36.540
i w tym przypadku jest to doskonale rozwiązanie.

01:36.540 --> 01:38.800
Ale jeśli chcesz zachować to wejście użytkownika

01:38.800 --> 01:40.730
lub jakiekolwiek dane, z którymi pracujesz,

01:40.730 --> 01:44.110
chyba że naprawdę jest to null lub niezdefiniowane, to potrzebujesz innego

01:44.110 --> 01:45.530
podejścia, ponieważ tutaj potraktowalibyśmy

01:45.530 --> 01:48.970
to jako false i użylibyśmy fallback.

01:48.970 --> 01:51.720
Ale może chcesz zachować puste wejście po prostu null

01:51.720 --> 01:54.370
lub undefined powinny być obsługiwane inaczej.

01:54.370 --> 01:56.390
Do tego TypeScript ma również operator,

01:56.390 --> 01:58.780
operator podwójnego znaku zapytania,

01:58.780 --> 02:02.210
nazywa się to operatorem koalescencji nullish.

02:02.210 --> 02:05.250
I oznacza to, że jeśli jest to null lub undefined,

02:05.250 --> 02:06.730
i naprawdę tylko to, nie

02:06.730 --> 02:09.180
pusty ciąg, nie zero, naprawdę tylko

02:09.180 --> 02:11.540
null lub undefined, wtedy użyjemy

02:11.540 --> 02:13.370
fallback.

02:13.370 --> 02:16.700
Jeśli nie jest to null lub undefined, użyjemy tej wartości.

02:16.700 --> 02:19.220
Więc w tym scenariuszu tutaj, to kompiluje,

02:19.220 --> 02:21.400
i widzisz, przechowaliśmy pusty ciąg,

02:21.400 --> 02:23.060
stąd nie drukuję niczego tutaj,

02:23.060 --> 02:24.720
to jest pusty ciąg.

02:24.720 --> 02:26.060
Jeśli to z drugiej strony, powiedzmy,

02:26.060 --> 02:28.550
jest niezdefiniowane tutaj, i zapisuję to, widzisz,

02:28.550 --> 02:30.400
teraz mówi DEFAULT, ponieważ dzięki

02:30.400 --> 02:32.980
temu operatorowi z podwójnym znakiem zapytania, cofamy

02:32.980 --> 02:35.500
się do tego, cóż, fallback i dlatego tutaj mamy kolejną

02:35.500 --> 02:38.320
bardzo przydatną funkcję, która może pomóc ci radzić sobie

02:38.320 --> 02:40.580
z nullish lub niezdefiniowanymi wartościami

02:40.580 --> 02:42.773
z wdziękiem.
