WEBVTT

00:02.150 --> 00:04.220
-ー これで､ TypeScriptのコアとなる型と､

00:04.220 --> 00:07.410
TypeScriptの基本をすべて網羅することができました｡

00:07.410 --> 00:11.640
これで､ 型の作成方法と割り当て方法､ 変数やパラメータへの型の割り当て方法､

00:11.640 --> 00:17.510
そしてその理由を理解していただけたと思います｡

00:17.510 --> 00:20.740
型割り当てと型がJavaScriptの型チェックとどのように異なる可能性があるか

00:20.740 --> 00:29.400
JavaScriptはランタイム型を使用し､ TypeScriptは開発中に重要な静的型を使用します｡

00:29.400 --> 00:31.710
したがって､ ビルドされたJavaScriptのコードには､

00:31.710 --> 00:34.410
型の割り当てが含まれていないこと｡

00:34.410 --> 00:36.550
もちろん､ 通常のJavaScriptのコードなので､

00:36.550 --> 00:41.730
型チェックも含まれますが､ ここではこんな感じです...｡

00:43.050 --> 00:44.910
というのは､ JavaScriptでは単純に許されないことです｡ 

00:44.910 --> 00:46.280
これはサポートされていない構文です｡ 

00:46.280 --> 00:47.960
それはTypeScriptのみです｡ 

00:47.960 --> 00:49.550
ということで､ ご理解いただけたかと思います｡ 

00:49.550 --> 00:52.740
そして､ 数値､ 文字列､ ブール値の関数型を見て､

00:52.740 --> 00:58.510
戻り値の型､ 引数の型を設定し､ さらに関数全体の型を説明しました｡ これは､

00:58.510 --> 01:04.780
最終的に関数を保持する変数を持つ場合に役に立ちます｡

01:04.780 --> 01:07.890
オブジェクトと配列と列挙型について､ それがどのように面白く､

01:07.890 --> 01:10.140
どのように役立つかを見てもらいました｡

01:10.140 --> 01:12.030
タプルの場合も同様です｡ 

01:12.030 --> 01:16.160
さらに､ 複雑な型をエイリアスとして統合し､

01:16.160 --> 01:21.220
再利用できるようにするエイリアスも紹介しました｡

01:21.220 --> 01:23.840
リテラル型とユニオン型について見てきましたが､

01:23.840 --> 01:29.550
これは複数の可能な型を期待するシナリオに便利なものです｡

01:29.550 --> 01:33.455
そして､ 最後にunknownとneverという､ ニッチなタイプでありながら､

01:33.455 --> 01:39.430
そのニッチで非常に有用なものを見ていただきました｡

01:39.430 --> 01:40.970
もちろん､ 他の型や､

01:40.970 --> 01:49.163
型が役立つJavaScriptの構造も探求していきます｡
