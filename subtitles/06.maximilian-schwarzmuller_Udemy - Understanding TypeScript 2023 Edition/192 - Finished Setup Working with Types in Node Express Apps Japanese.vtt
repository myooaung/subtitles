WEBVTT

00:02.170 --> 00:03.420
講師：では､ はじめましょう｡ 

00:03.420 --> 00:06.330
ここでは非常に基本的なREST APIを作成しますが､

00:06.330 --> 00:13.780
もちろんexpressの有無やTypeScriptの種類に関わらず､ あらゆるNodeアプリケーションを構築できますので､

00:13.780 --> 00:15.570
これは単なる一例です｡

00:15.570 --> 00:18.990
この特定のアプリケーションに限定されるものではありません｡ 

00:18.990 --> 00:25.970
srcフォルダに､ appを追加しておきます｡  tsファイルは､ そのサーバーをスピンアップする際のルートエントリーポイントとなります｡

00:25.970 --> 00:31.203
そして､ このExpressフレームワークから何かをインポートしたいのです｡

00:32.970 --> 00:35.460
さて､ ここでExpressを追加して､ ExpressでWebサーバーをセットアップする方法は､

00:35.460 --> 00:37.890
おそらくご存知でしょう｡

00:37.890 --> 00:41.330
この構文で Express をインポートし､

00:41.330 --> 00:46.330
関数として Express を実行します｡

00:46.380 --> 00:50.170
このようなアプリオブジェクトを取得し､ その上で listen を呼び出すと､

00:50.170 --> 00:53.750
特定のポートでリクエストの受信を待つことができます｡

00:53.750 --> 00:56.120
さて､ これは通常のJavaScriptではうまくいくのですが､

00:56.120 --> 00:58.420
すでにここでエラーが出ているのがお分かりでしょう｡

00:59.540 --> 01:01.600
ここで､ なぜこのようなエラーが発生するのか､

01:01.600 --> 01:10.100
実はrequireはnoteに存在する関数であるという指摘も受けました｡

01:10.100 --> 01:10.100
jsを使用していますが､ ブラウザ側にはありません｡ 

01:10.100 --> 01:16.640
今度はtsconfigで｡  jsonファイル nodeをサポートするような特別なライブラリは使っていません｡

01:16.640 --> 01:16.640
jsのように､

01:16.640 --> 01:22.900
TypeScriptでは､ ノードに存在するこの一般的な機能を意識していないのです｡

01:22.900 --> 01:22.900
js環境｡ 

01:22.900 --> 01:27.140
npm install --save-dev" で追加のタイプをインストールし､ "@types/node"

01:27.140 --> 01:36.291
をインストールすれば､ node で動作するために必要なすべてのタイプをインストールすることができます｡

01:36.291 --> 01:36.291
js

01:36.291 --> 01:39.460
では､ このコマンドを実行し､ それが役に立つかどうかを見てみましょう｡

01:39.460 --> 01:42.320
うん､ これでこのエラーは消えたよ｡ 

01:42.320 --> 01:46.680
でも､ もしかしたら､ アプリではオートコンプリートが出なかったのも見たかもしれませんね｡

01:46.680 --> 01:52.410
また､ エラーにはならないが､ appにカーソルを合わせると､ TypeScriptが中身を把握していないことがわかる｡

01:52.410 --> 01:54.210
タイプは "any "です｡ 

01:54.210 --> 01:59.930
だから､ もっと多くの型をインストールし､ expressに特化した型をインストールするために"@types/express

01:59.930 --> 02:02.410
"もインストールすべきなのだろう｡

02:02.410 --> 02:04.320
そしてそれは､ すでにご存知のパターンです｡ 

02:04.320 --> 02:08.350
講座のサードパーティライブラリーのコーナーで見ていただきました｡

02:08.350 --> 02:12.030
そこでは､ TypeScriptスクリプトでより良いサポートを得るために､

02:12.030 --> 02:15.220
typesパッケージをインストールする方法も紹介しました｡

02:15.220 --> 02:19.320
だから､ このタイプを追加して､ 余計な設定をせずに､

02:19.320 --> 02:22.030
はぁ､ やっぱりダメなんだ｡

02:22.030 --> 02:25.330
その理由は､ ここで使っているインポート構文にあります｡

02:25.330 --> 02:28.270
これが通常のコモンです｡  js import syntax

02:28.270 --> 02:30.450
which note. jsはデフォルトで使用していますが､

02:30.450 --> 02:36.140
ここでは実際にTypeScriptで別のimport構文が使える環境になっています｡

02:36.140 --> 02:40.373
ESモジュールでお馴染みのimport構文をブラウザで使用することができます｡

02:41.240 --> 02:46.240
そこで､ 例えば「import express from 'express'」とすることができる｡ 

02:46.710 --> 02:49.910
そうして「アプリ」にカーソルを合わせると､ 「Express」というタイプになっているのがわかります｡

02:49.910 --> 02:53.040
これで､ TypeScriptに対応したわけです｡ 

02:53.040 --> 02:54.569
さて､ 一つ重要な注意点があります｡ 

02:54.569 --> 03:00.810
ノートで｡  jsにも､ これに似た構文が存在する｡

03:00.810 --> 03:03.420
今は実験的なフラグの下にあり､ 非常に長い間そのフラグの下にあるため､

03:03.420 --> 03:10.010
一般的なものを使っています｡

03:10.010 --> 03:10.010
js in note. jsは､

03:10.010 --> 03:13.482
インポートとエクスポートを追加するためのデフォルトかつ最も一般的な方法です｡

03:13.482 --> 03:16.060
このような構文は､ この実験的なフラグを設定すればサポートされますが､

03:16.060 --> 03:24.012
このコードでは､ 実際にはこの実験的なノードを使用していません｡

03:24.012 --> 03:24.012
jsの構文です｡ 

03:24.012 --> 03:26.209
その代わり､ TypeScriptを使用しています｡ 

03:26.209 --> 03:29.859
これをJavaScriptにコンパイルすると､ この点が変わってきます｡ 

03:29.859 --> 03:31.860
そして､ これを実際に見せていただくことで､

03:31.860 --> 03:34.060
私たちも実行できるようになります｡

03:34.060 --> 03:36.230
ここで "tsc"､ あるいは "tsc-w

03:36.230 --> 03:42.680
"を実行すると､ すでにウォッチモードになり､ コンパイルが開始されるのがわかります｡

03:42.680 --> 03:46.770
distフォルダが作成され､ その中にアプリができました｡

03:46.770 --> 03:46.770
js

03:46.770 --> 03:50.040
ファイルを作成し､ この中で､ これは現在､ 異なって見えます｡

03:50.040 --> 03:55.710
ほら､ 今はこの方法でインポートを設定していないんだ｡

03:55.710 --> 03:58.900
代わりに別の構文が使われます｡ 

03:58.900 --> 04:02.350
つまり､ これが実際に実行されるコードです｡ 

04:02.350 --> 04:04.780
そして､ コードが変更された場合に自動的にサーバーを再起動するこのツールを使って､

04:04.780 --> 04:12.230
ターミナルで新しいタブを開くことで､ nodemonでこれを実行できます｡

04:12.230 --> 04:15.960
他のタブはTypeScriptのコンパイルのために開いておき､

04:15.960 --> 04:20.095
その新しいタブでnodemonの助けを借りてサーバーを起動します｡

04:20.095 --> 04:22.990
そのためには､ パッケージに手を出そう｡  json ファイルに新しいスクリプト（スタートスクリプト）を追加し､

04:22.990 --> 04:30.900
「nodemon dist/app.

04:30.900 --> 04:30.900
js

04:30.900 --> 04:34.200
"を作成し､ nodemonがこのファイルをdistフォルダで実行し､

04:34.200 --> 04:36.360
サーバーを起動するようにしました｡

04:36.360 --> 04:39.430
そして､ それが加わってパッケージ｡  jsonファイルを保存して､

04:39.430 --> 04:43.240
npmstartを実行して､ 開発サーバーを立ち上げます｡

04:43.240 --> 04:47.710
そして今､ このdistアプリを配信しています｡  jsファイル これが一般的なセットアップで､

04:47.710 --> 04:52.030
TypeScriptはすでにここでいくつかの作業を行っている｡

04:52.030 --> 04:53.940
また､ TypeSupportもあります｡ 

04:53.940 --> 05:07.000
そして､ こちらはアプリでの表示です｡  しかし､ 出力されるのは結局のところ普通のJavaScriptノードである｡

05:07.000 --> 05:07.000
jsのコードで､

05:07.000 --> 05:09.640
非常に便利です｡

05:09.640 --> 05:12.140
さて､ それでは何もしないサーバーを立ち上げるより､

05:12.140 --> 05:15.003
もっと便利なことをしましょう｡
