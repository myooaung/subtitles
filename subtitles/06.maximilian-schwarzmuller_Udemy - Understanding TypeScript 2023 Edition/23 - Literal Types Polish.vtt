WEBVTT

00:02.350 --> 00:03.921
Instruktor: No to teraz mamy tu typy związków zawodowych.

00:03.921 --> 00:07.440
Rozbudujmy tę ideę typów związkowych, a także

00:07.440 --> 00:09.764
wprowadźmy typy literalne.

00:09.764 --> 00:14.290
Typy literalne są typami, w których nie mówisz po prostu, że dana zmienna

00:14.290 --> 00:16.436
lub parametr powinien zawierać, powiedzmy,

00:16.436 --> 00:19.700
liczbę lub ciąg znaków, ale gdzie jesteś bardzo jasny

00:19.700 --> 00:21.230
co do dokładnej wartości,

00:21.230 --> 00:23.800
którą powinien trzymać.

00:23.800 --> 00:26.064
Widzieliśmy to wcześnie już tutaj w podstawówkach.

00:26.064 --> 00:28.408
Konst numer dwa, na przykład.

00:28.408 --> 00:32.098
Tam, jeśli najeżdżam na to, widzisz, że typ, który został wywnioskowany,

00:32.098 --> 00:35.680
nie jest numerem to 2. 8.

00:35.680 --> 00:37.290
I grupa typów zrobiła inferencję

00:37.290 --> 00:41.220
tej konkretnej liczby jako typ tutaj, ponieważ jest to stała.

00:41.220 --> 00:43.810
Nigdy się nie zmieni i dlatego grupa typów wie, że wartość, którą

00:43.810 --> 00:48.211
przypisałem tutaj, jest dokładnym typem, który mam. Więc ofcourse to jest liczba,

00:48.211 --> 00:52.796
można powiedzieć 2. 8 pochodzi od typu liczby, ale jest

00:52.796 --> 00:56.320
to konkretna liczba. I to nie istnieje tylko

00:56.320 --> 00:59.160
dla liczb, ale także dla ciągów znaków

00:59.160 --> 01:02.860
i tak dalej. A szczególnie w przypadku smyczków może być to bardzo przydatne.

01:02.860 --> 01:07.420
Powiedzmy, że tutaj w naszej połączonej funkcji, oczekujemy liczb lub ciągów

01:07.420 --> 01:10.190
i łączymy je w różny sposób w oparciu o to, co otrzymujemy,

01:10.190 --> 01:13.756
ale chcemy również pozwolić rozmówcy funkcji określić, w

01:13.756 --> 01:18.756
jaki sposób wynik powinien zostać zwrócony, abyśmy mogli zasadniczo wymusić konwersję

01:18.880 --> 01:25.370
z liczby na ciąg lub na odwrót.

01:25.370 --> 01:25.370
Moglibyśmy

01:25.370 --> 01:29.740
to zrobić z trzecim parametrem i moglibyśmy nazwać to powiedzmy typem wyniku lub

01:29.740 --> 01:33.208
konwersją wyniku lub jakkolwiek chcesz to nazwać i chcę to opisać

01:33.208 --> 01:37.240
za pomocą ciągu. Więc ustawię to

01:37.240 --> 01:41.122
na typ string. Teraz mój pomysł polega na tym,

01:41.122 --> 01:45.625
że mogę wywołać kombinację tutaj z dwoma liczbami i na przykład przekazać

01:45.625 --> 01:50.625
ciąg "as-number" i to jest całkowicie zależne od ciebie, którego identyfikatora

01:50.630 --> 01:55.630
używasz tutaj. Na dole możemy mieć "as-text", ale potem

01:56.260 --> 01:59.357
możemy mieć inną kombinację tutaj CombinedStringAges,

02:02.910 --> 02:07.310
gdzie przekazuję dwa łańcuchy, ale nadal chcę wyprowadzić to "as-number"

02:07.310 --> 02:10.030
i to byłby przypadek, w którym trzeci parametr

02:10.030 --> 02:13.540
może być pomocny, aby wymusić konwersję, ponieważ jeśli

02:13.540 --> 02:19.950
przekazuję dwa łańcuchy tutaj, normalnie zrobilibyśmy to w tej innej gałęzi i konkatenacji i mogę

02:19.950 --> 02:24.730
chcieć zwrócić to jako liczbę zamiast tego, tak, że mogę również konsoli logować

02:24.730 --> 02:34.030
połączone agenty łańcuchowe tutaj.

02:34.030 --> 02:34.030
Więc

02:34.030 --> 02:37.512
teraz musimy po prostu wziąć pod uwagę te identyfikatory w naszej funkcji, włączając

02:37.512 --> 02:41.730
resultConversion do naszych kontroli if. Teraz pytanie brzmi, co dokładnie

02:41.730 --> 02:45.700
chcemy zrobić; czy chcemy się upewnić, że możemy wymusić,

02:45.700 --> 02:49.930
aby te dwa ciągi zostały dodane jako liczby lub czy chcemy wymusić

02:49.930 --> 02:54.012
wynik bez względu na to, czy było to obliczenie matematyczne,

02:54.012 --> 02:58.695
czy konkatenacja ciągów, aby zostać przekonwertowanym na tekst lub

02:58.695 --> 03:03.039
liczbę. Jeśli chcemy wymusić konwersję

03:03.039 --> 03:05.960
moglibyśmy dodać tutaj if check i sprawdzić

03:05.960 --> 03:10.382
czy konwersja wyniku jest równa "as-number" i jeśli tak

03:10.382 --> 03:15.340
jest to chcę zwrócić wynik z plusem przed nim, który konwertuje

03:15.340 --> 03:18.826
go na liczbę, alternatywą byłoby np. parseFloat

03:18.826 --> 03:24.420
ale tutaj po prostu pójdę po plus, ponieważ jest to trochę krótsze i w przeciwnym

03:24.420 --> 03:29.420
razie chcę zwrócić wynik toString aby wymusić wyjście jako ciąg

03:30.156 --> 03:33.593
znaków.

03:34.570 --> 03:38.883
Więc teraz wykonujemy obliczenia w oparciu o rzeczywisty typ, który otrzymujemy,

03:38.883 --> 03:42.300
ale następnie konwertujemy na wynik, który jest jednym ze sposobów

03:42.300 --> 03:46.360
robienia tego i jeśli zapiszemy to i skompilujemy ten plik, zobaczymy, że

03:47.470 --> 03:51.020
to jest wynik, który otrzymam i otrzymamy to wyjście na przykład

03:51.020 --> 03:54.759
dla naszej kombinacji łańcuchów tutaj, ponieważ, jak powiedziałem,

03:54.759 --> 03:58.520
sama kombinacja obliczeń, że tak powiem, jest wykonywana w oparciu o

03:58.520 --> 04:02.530
typ, który podajemy, który tutaj jest ciągiem, więc konkatenujemy go, a

04:02.530 --> 04:05.860
następnie po prostu konwertujemy na wynik.

04:05.860 --> 04:09.593
Alternatywna logika polegałaby na sprawdzeniu

04:09.593 --> 04:14.320
typu tutaj i wykonaniu innej operacji w oparciu o typ zwrotu,

04:14.320 --> 04:19.180
który określamy tutaj. Więc moglibyśmy to wykomentować i

04:19.180 --> 04:22.600
zamiast tego powiedzieć, że jeśli typ wejścia pierwszego

04:22.600 --> 04:26.230
to liczba, a typ wejścia drugiego to liczba, lub jeśli

04:27.890 --> 04:30.865
resultConversion jest równe "as-number",

04:30.865 --> 04:35.865
to chcę połączyć wartości w ten sposób i teraz, aby uniknąć tego błędu, wymuszam

04:35.930 --> 04:38.794
konwersję na liczby, dodając plus przed każdym

04:38.794 --> 04:42.970
wejściem, tak że każde wejście jest konwertowane na liczbę

04:42.970 --> 04:45.490
i ma gwarancję, że jest liczbą, zanim

04:45.490 --> 04:48.490
je połączę.

04:48.490 --> 04:51.130
Uwaga boczna: jeśli przekazałbyś ciągi, których

04:51.130 --> 04:54.610
nie można przekonwertować na liczbę, więc coś takiego jak

04:54.610 --> 04:58.800
Max na przykład, wtedy otrzymasz NaN, Not a Number jako wynik.

04:58.800 --> 05:00.280
No to w innym przypadku,

05:00.280 --> 05:03.170
żeby nie mieć "as-number", albo żeby po prostu

05:03.170 --> 05:07.976
nie mieć wejść numerycznych, to robimy to w tym bloku tutaj i teraz z

05:07.976 --> 05:12.390
tym, jeśli zwrócę wynik ponownie tutaj, a następnie zapiszemy

05:12.390 --> 05:16.230
to i przekompilujemy, zobaczymy inne wyjście na naszej

05:16.230 --> 05:20.230
stronie. Teraz dostajemy 56 w tych dwóch liniach

05:20.230 --> 05:22.945
tutaj, ponieważ teraz nie konwertujemy wyniku, więc

05:22.945 --> 05:26.300
nie konwertujemy konkatenowanego ciągu dla tej linii, ale zamiast

05:26.300 --> 05:29.070
tego wykonujemy konwersję przed połączeniem dwóch

05:29.070 --> 05:31.970
wartości. Więc to zależy od ciebie, którą

05:31.970 --> 05:34.760
logikę chcesz wdrożyć. Właściwie to chcę się bliżej

05:34.760 --> 05:37.551
przyjrzeć koncepcji typów literalnych, którą opisałem

05:37.551 --> 05:41.180
na początku tego wykładu. Przekazuję "as-number" i

05:41.180 --> 05:44.157
"as-text" i puchy biznesu, że w tej chwili my

05:44.157 --> 05:47.600
jako deweloper musimy zapamiętać te wartości.

05:47.600 --> 05:50.450
Musimy zadbać o to, by nie zabrakło nam tutaj typów.

05:50.450 --> 05:54.010
Teraz moglibyśmy użyć e-num, aby to poprawić, ale jeśli mamy

05:54.010 --> 05:57.754
tylko dwie wartości tutaj, "as-text" lub "as-number", to może wszystkie

05:57.754 --> 06:00.940
wyszukiwanie typ literalny może być opcją.

06:00.940 --> 06:04.173
Moglibyśmy powiedzieć "to nie powinien być

06:04.173 --> 06:09.173
żaden ciąg, powinien być "as-number" lub "as-text"", więc używamy

06:09.870 --> 06:12.090
typu union połączonego z typami

06:12.090 --> 06:15.573
literalnymi. Typy literalne to typy, które

06:15.573 --> 06:17.987
są oparte na twoich podstawowych typach

06:17.987 --> 06:20.933
ciąg, liczba i tak dalej, ale potem masz konkretną

06:20.933 --> 06:24.750
wersję typu. Więc tutaj dopuszczamy konkretnie

06:24.750 --> 06:27.960
te dwa ciągi nie żaden ciąg tylko te dwa ciągi.

06:27.960 --> 06:31.460
Więc chcemy ciąg dla konwersji wyników, ale musi to być jedna

06:31.460 --> 06:34.207
z tych dwóch wartości. Każda inna wartość łańcuchowa

06:34.207 --> 06:37.560
nie będzie dozwolona, więc to jest idea za typem literalnym i często

06:37.560 --> 06:40.747
będziesz używał tego w kontekście typu union, ponieważ nie chcesz

06:40.747 --> 06:43.700
po prostu pozwolić na jedną dokładną wartość, którą mógłbyś

06:43.700 --> 06:46.500
twardo zakodować w swoim kodzie, gdyby tak było, ale chcesz

06:46.500 --> 06:49.544
mieć dwie lub więcej możliwych wartości.

06:49.544 --> 06:52.580
W tym przypadku otrzymaliśmy dwie możliwe wartości.

06:52.580 --> 06:56.240
Więc teraz mamy gwarancję uzyskania konwersji wyników,

06:56.240 --> 07:00.288
która jest albo "as-number" albo "as-text" i na przykład tutaj,

07:00.288 --> 07:03.800
Jeśli teraz spróbuję porównać to do as-numbe, ponieważ

07:03.800 --> 07:07.256
mam literówkę tutaj, grupa typów jest w stanie powiedzieć

07:07.256 --> 07:10.360
mi tutaj w IDE i ofcourse wszystko, co zapisujemy

07:10.360 --> 07:15.360
i kompilujemy tutaj w terminalu, ponieważ wie, że as-numbe bez r na końcu nigdy

07:15.830 --> 07:18.940
nie będzie poprawną wartością dla resultConversion,

07:18.940 --> 07:24.563
ponieważ ustawiam ten typ unii z tymi typami literalnymi.

07:25.550 --> 07:27.593
Więc teraz znowu zyskaliśmy dodatkowe

07:27.593 --> 07:31.590
bezpieczeństwo typu i upewniamy się, że nie możemy użyć tego niepoprawnie.

07:31.590 --> 07:34.720
To samo ofcourse dla przekazywania wartości. Jeśli mamy tutaj literówkę,

07:34.720 --> 07:38.747
dostaniemy błąd tylko jeśli użyjemy albo "as-number" albo "as-text"

07:38.747 --> 07:41.947
wolno nam to skompilować tak jak widzisz i teraz skompiluj

07:41.947 --> 07:45.470
to, to działa i dostajemy to samo wyjście co wcześniej

07:45.470 --> 07:49.562
tutaj. Są to więc typy literalne szczególnie

07:49.562 --> 07:52.193
przydatne w połączeniu z typami związkowymi.
