WEBVTT

00:02.140 --> 00:03.970
-: Also in unserer App. ts-Datei müssen

00:03.970 --> 00:08.100
wir hier auf die Übermittlung dieses Formulars prüfen.

00:08.100 --> 00:09.070
Hierfür werde ich eine

00:09.070 --> 00:10.800
Formularkonstante erstellen und

00:10.800 --> 00:12.170
das Formular mit dem Dokumentenabfrage-Selektor

00:12.170 --> 00:16.080
ansprechen, der nach dem Formular-Tag sucht.

00:16.080 --> 00:17.840
Und da wir nur ein Formular-Tag im gesamten

00:17.840 --> 00:18.820
Dokument haben, holen

00:18.820 --> 00:20.170
wir das natürlich auch ab.

00:21.150 --> 00:23.500
Dadurch erhalten wir Zugang zum Formular.

00:23.500 --> 00:26.163
Auf diesem Formular werde ich einen Ereignis-Listener hinzufügen.

00:29.630 --> 00:31.873
Und ich werde auf das Ereignis "Submit" warten.

00:33.290 --> 00:35.330
Diese Form könnte natürlich wie immer null sein,

00:35.330 --> 00:36.163
aber wir wissen, dass

00:36.163 --> 00:37.430
sie es nicht sein wird, also können

00:37.430 --> 00:39.480
wir dieses gute alte Ausrufezeichen hinzufügen,

00:39.480 --> 00:41.683
um TypeScript mitzuteilen, dass dies nicht null sein

00:41.683 --> 00:42.850
wird.

00:42.850 --> 00:45.080
Und dann haben wir hier den Ereignis-Listener,

00:45.080 --> 00:46.490
und er wird eine Funktion

00:46.490 --> 00:47.940
definieren, die ausgelöst

00:47.940 --> 00:49.160
werden soll, und das

00:49.160 --> 00:51.710
ist die Suchadressen-Handler-Funktion,

00:51.710 --> 00:53.610
sagen wir.

00:53.610 --> 00:55.420
Und diese Funktion sollte immer dann ausgelöst

00:55.420 --> 00:58.160
werden, wenn das Formular abgeschickt wird.

00:58.160 --> 01:00.880
In dieser Funktion holen wir uns das Ereignisobjekt

01:00.880 --> 01:04.900
und ich rufe hier zunächst einmal Ereignis verhindern Standard auf.

01:04.900 --> 01:07.240
Außerdem geben wir TypeScript hier ein paar Hinweise

01:07.240 --> 01:09.980
und teilen ihm mit, dass es sich um ein Ereignis handelt,

01:09.980 --> 01:12.370
damit es weiß, dass es diesen vorbeugenden Standardbefehl

01:12.370 --> 01:14.033
hier geben wird.

01:14.870 --> 01:17.440
Damit verhindern wir das Absenden des Formulars, wir stellen

01:17.440 --> 01:19.900
sicher, dass keine Anfrage gesendet wird, aber jetzt möchte

01:19.900 --> 01:21.980
ich Zugriff auf die Adresse erhalten, die der Benutzer

01:21.980 --> 01:23.630
eingegeben hat.

01:23.630 --> 01:24.900
Das sollte nicht allzu schwer

01:24.900 --> 01:27.820
sein. Wir haben hier eine Eingabe, die eine Vorstellung von der Adresse

01:27.820 --> 01:30.360
hat, und am Ende wollen wir den Wert erhalten, der in die Eingabe

01:30.360 --> 01:31.850
eingegeben wurde.

01:31.850 --> 01:33.780
Und wir können dies hier tun, indem wir einfach

01:33.780 --> 01:36.010
eine weitere Konstante definieren, die Adresseneingabe,

01:36.010 --> 01:37.610
die wir mit dem Dokumentabfrage-Selektor

01:37.610 --> 01:40.500
erhalten, oder tatsächlich das Element nach ID erhalten und

01:40.500 --> 01:43.210
dann die ID die Adresse war, die die Idee war, die diesem Element

01:44.050 --> 01:47.860
zugeordnet wurde, und genau wie zuvor wissen wir, dass dies niemals null sein wird,

01:47.860 --> 01:52.823
also können wir dieses Ausrufezeichen hier hinzufügen.

01:53.770 --> 01:58.730
Und damit haben wir unsere eingegebene Adresse hier durch

01:58.730 --> 02:00.370
den Zugriff auf die

02:00.370 --> 02:02.490
Adresseingabe Punkt-Wert

02:02.490 --> 02:03.700
jetzt, warum TypeScript

02:05.960 --> 02:09.350
nicht wie Wert hier?

02:09.350 --> 02:12.020
Denn es weiß nicht, dass es sich bei dem, was wir hier abrufen,

02:12.020 --> 02:14.500
um ein HTML-Eingabeelement handelt.

02:14.500 --> 02:16.000
Sagen wir also TypeScript.

02:16.000 --> 02:18.930
Konvertieren wir dies in ein Html-Eingabeelement

02:18.930 --> 02:20.820
mit dem Typecasting hier.

02:20.820 --> 02:23.650
Jetzt beschwert sich TypeScript nicht mehr über den

02:23.650 --> 02:25.040
Zugriff auf den Wert und gibt

02:25.040 --> 02:26.923
uns die eingegebene Adresse.

02:27.770 --> 02:29.710
Und nun müssen wir dies an

02:30.570 --> 02:31.740
die API von Google

02:32.970 --> 02:34.180
senden.

02:34.180 --> 02:37.850
In der nächsten Vorlesung werden wir das mit Hilfe eines anderen Drittanbieterpakets

02:37.850 --> 02:38.943
tun.
