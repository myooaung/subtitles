WEBVTT

00:02.170 --> 00:03.290
Kursleiter: Es wurde jetzt

00:03.290 --> 00:05.580
viel über Schnittstellen und Klassen gesprochen.

00:05.580 --> 00:07.390
Schauen wir nun unter die Haube

00:07.390 --> 00:11.650
und sehen wir uns an, was JavaScript tatsächlich produziert oder

00:11.650 --> 00:15.290
als Alternative zur Schnittstelle bietet.

00:15.290 --> 00:17.450
Wir haben gelernt, dass es bei Klassencode

00:17.450 --> 00:20.560
letztlich auf die Version ankommt, für die wir kompilieren.

00:20.560 --> 00:24.280
Wenn Sie hier im ts-Konflikt für es6 kompilieren, dann würde unsere

00:24.280 --> 00:27.160
Ausgabe das Schlüsselwort class verwenden.

00:27.160 --> 00:29.330
Da wir hier für es5 kompiliert haben, sehen wir stattdessen

00:29.330 --> 00:31.880
diesen Workaround unter Verwendung von Construct oder

00:31.880 --> 00:33.420
Funktionen am Ende.

00:33.420 --> 00:36.670
Was aber geschieht mit den Schnittstellen?

00:36.670 --> 00:38.720
Schauen wir uns die App doch einmal an. js-Datei.

00:38.720 --> 00:41.780
Und dort sehen Sie nichts.

00:41.780 --> 00:46.360
Sie werden keine Übersetzungen für unsere Schnittstellen sehen.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Diese Dinge findet man nirgendwo in einer App. js.

00:52.970 --> 00:55.440
Sie finden unsere Funktion hier, Sie finden

00:55.440 --> 00:59.180
unsere Konstruktorfunktion für das Person-Objekt, also im Grunde

00:59.180 --> 01:02.320
die Übersetzung für die Person-Klasse und den anderen

01:02.320 --> 01:03.500
Code.

01:03.500 --> 01:06.680
Sie finden keinen Hinweis an irgendeiner Schnittstelle.

01:06.680 --> 01:08.240
Und dafür gibt es einen guten Grund.

01:08.240 --> 01:11.350
Es gibt keine Übersetzung für Schnittstellen.

01:11.350 --> 01:13.650
JavaScript kennt diese Funktion nicht.

01:13.650 --> 01:15.550
Es handelt sich um eine reine TypeScript-Funktion,

01:15.550 --> 01:18.830
die nur während der Entwicklung und Kompilierung verfügbar ist.

01:18.830 --> 01:21.640
Sie können sie also zur Verbesserung Ihres Codes verwenden.

01:21.640 --> 01:23.970
Es ist also eine reine Entwicklungsfunktion,

01:23.970 --> 01:26.010
die Ihnen dabei hilft, besseren

01:26.010 --> 01:30.700
Code zu schreiben, klar strukturierten Code, der klaren

01:30.700 --> 01:34.100
Regeln folgt.

01:34.100 --> 01:38.720
Zur Laufzeit bleiben von diesen Schnittstellen keine Spuren zurück.

01:38.720 --> 01:41.760
Sie werden in Ihrem Code nichts sehen, was mit den Schnittstellen

01:41.760 --> 01:44.710
zu tun hat, nur Funktionen, Klassen und der gesamte andere

01:44.710 --> 01:47.130
Code wird in der Ausgabe kompiliert.

01:47.130 --> 01:50.020
Man könnte sagen, die Schnittstellen werden einfach weggeworfen.

01:50.020 --> 01:53.170
Sie werden während der Kompilierung verwendet, um Ihren Code zu überprüfen,

01:53.170 --> 01:54.340
und dann ignoriert.

01:54.340 --> 01:56.690
Es gibt nichts, was für sie ausgegeben werden könnte.
