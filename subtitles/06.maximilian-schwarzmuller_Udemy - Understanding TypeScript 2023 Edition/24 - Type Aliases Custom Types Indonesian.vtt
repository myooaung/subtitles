WEBVTT

00:02.340 --> 00:05.860
-: Sekarang ketika bekerja dengan tipe union, seperti

00:05.860 --> 00:06.970
ini dan ini, bisa

00:06.970 --> 00:11.070
jadi rumit untuk selalu mengulang tipe union.

00:11.070 --> 00:13.070
Anda mungkin ingin menukar tipe baru

00:13.070 --> 00:15.330
yang menginstal ulang tipe union ini.

00:15.330 --> 00:18.540
Dan Anda bisa melakukan itu dengan fitur types

00:18.540 --> 00:21.410
keren lainnya, fitur type alias.

00:21.410 --> 00:22.723
Anda membuat alias tersebut,

00:24.280 --> 00:25.670
biasanya sebelum Anda menggunakannya,

00:25.670 --> 00:29.240
jadi di sini di bagian atas file dalam kasus ini di sini, dengan kata

00:29.240 --> 00:31.240
kunci type.

00:31.240 --> 00:34.040
Sekarang kata kunci tipe tidak dibangun ke dalam

00:34.040 --> 00:35.880
JavaScript, namun didukung dalam

00:35.880 --> 00:40.450
TypeScript, dan setelah tipe Anda menambahkan nama tipe kustom Anda, atau alias

00:40.450 --> 00:42.860
tipe Anda, saya harus mengatakannya.

00:42.860 --> 00:44.980
Misalnya dapat digabungkan.

00:44.980 --> 00:46.720
Tetapi, namanya benar-benar terserah Anda.

00:46.720 --> 00:48.380
Anda dapat menciptakan nama apa pun

00:48.380 --> 00:50.520
di sini yang tidak dibangun ke dalam JavaScript

00:50.520 --> 00:52.530
atau TypeScript sebagai nama kunci.

00:52.530 --> 00:54.360
Jadi sesuatu seperti tanggal tidak akan diizinkan

00:54.360 --> 00:56.250
karena itu dibangun ke dalam JavaScript, tetapi

00:56.250 --> 00:58.900
combinable tidak dibangun ke dalam JavaScript, tidak dibangun ke dalam

00:58.900 --> 01:01.170
TypeScript sehingga kita dapat menggunakannya.

01:01.170 --> 01:04.550
Dan sekarang dengan tanda sama dengan Anda menetapkan jenis yang

01:04.550 --> 01:08.320
ingin Anda encode dalam alias Anda, jadi untuk mengatakannya.

01:08.320 --> 01:10.300
Jadi kita bisa menyimpan angka di sini, dan

01:10.300 --> 01:12.790
sekarang kapanpun kita ingin memastikan bahwa sesuatu

01:12.790 --> 01:14.390
harus berupa angka, kita bisa menggunakan

01:14.390 --> 01:16.400
combinable sebagai gantinya.

01:16.400 --> 01:18.570
Sekarang, itu tidak terlalu masuk akal, bahkan

01:18.570 --> 01:21.630
bisa dibilang akan membuat kode kita lebih sulit dibaca.

01:21.630 --> 01:25.500
Jika saya menggunakan combinable di bawah sana misalnya, ini akan bekerja

01:25.500 --> 01:27.420
secara teknis tetapi jika kita hanya

01:27.420 --> 01:29.550
melihat sekilas kode kita, tidak jelas

01:29.550 --> 01:33.180
bahwa di sini kita menginginkan angka atau string.

01:33.180 --> 01:35.560
Nah, biasanya karena itu Anda menggunakannya dalam

01:35.560 --> 01:37.500
hubungannya dengan tipe union.

01:37.500 --> 01:40.380
Jadi kita bisa menyimpan tipe union di dalam custom

01:40.380 --> 01:42.250
type kita, jadi bisa dikatakan, di

01:42.250 --> 01:45.240
dalam alias type kita, dan sekarang hanya merujuk ke

01:45.240 --> 01:48.170
combinable di sana, bukannya ke tipe union kita.

01:48.170 --> 01:51.060
Jadi, kita memiliki pengaturan yang sama persis seperti

01:51.060 --> 01:54.230
sebelumnya, kita hanya memiliki alias tipe reusable kita di sini

01:54.230 --> 01:55.580
yang bisa kita gunakan.

01:55.580 --> 01:57.660
Dan itu memungkinkan kita untuk menghemat beberapa

01:57.660 --> 01:59.200
kode tambahan dan memastikan kita

01:59.200 --> 02:04.200
selalu mengacu pada tipe yang sama atau pengaturan tipe yang sama ketika kita menggunakan combinable.

02:04.234 --> 02:06.600
Dan tentu saja kita tidak bisa hanya menggunakan itu

02:06.600 --> 02:08.970
untuk angka dan string, kita bisa menggunakannya

02:08.970 --> 02:11.140
untuk pengaturan tipe apa pun yang mungkin ingin

02:11.140 --> 02:14.810
kita simpan dalam alias, termasuk kedua tipe literal ini, misalnya.

02:14.810 --> 02:18.210
Jadi, untuk kedua tipe di sini, untuk tipe union ini,

02:18.210 --> 02:20.660
kita juga bisa menukar alias tipe, ConversionDescriptor,

02:20.660 --> 02:24.030
atau bagaimanapun Anda ingin menamainya, dan menyimpan

02:24.030 --> 02:28.920
tipe ini persis di alias tipe ini.

02:28.920 --> 02:32.270
Dan sekarang kita bisa menggunakan alias tipe ini di sana.

02:32.270 --> 02:34.970
Jadi, type alias benar-benar berguna.

02:34.970 --> 02:37.490
Anda dapat menyandikan definisi tipe yang lebih kompleks

02:37.490 --> 02:40.860
ke dalam tipe Anda sendiri, ke dalam nama tipe Anda sendiri, sehingga untuk mengatakan,

02:40.860 --> 02:43.120
dan menggunakan kembali itu di mana-mana dalam kode

02:43.120 --> 02:45.920
Anda di mana Anda membutuhkan pengaturan tipe ini.

02:45.920 --> 02:48.060
Sehingga kamu terhindar dari kesalahan ketik

02:48.060 --> 02:51.000
di bawah sana dan kamu dapat dengan mudah menyimpan kode, menulis

02:51.000 --> 02:53.490
kode lebih cepat, dan selalu lebih jelas tentang maksudmu,

02:53.490 --> 02:56.010
misalnya dengan memilih nama alias tipe yang deskriptif

02:56.010 --> 02:57.653
di atas sana.
