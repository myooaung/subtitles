WEBVTT

00:02.270 --> 00:05.080
ผู้สอน: ดังนั้น เราสามารถส่งคืนบางอย่างบนตัวตกแต่งเมธอด

00:05.080 --> 00:11.000
และบางอย่างควรเป็นคำอธิบาย ซึ่งช่วยให้เราเปลี่ยนเมธอดหรือเปลี่ยนการกำหนดค่าของเมธอดได้

00:11.000 --> 00:12.582
และนี่คือสิ่งที่ฉันอยากทำที่นี่

00:12.582 --> 00:18.540
ก่อนหน้านั้นฉันจะไปที่ไฟล์ HTML ดัชนีก่อนแล้วมาเพิ่มปุ่มกัน

00:18.540 --> 00:21.272
คลิก Me ซึ่งเป็นปุ่มง่ายๆ

00:21.272 --> 00:26.104
ในแอปของฉัน ts ตอนนี้ฉันต้องการให้แน่ใจว่าเมื่อเราคลิกปุ่มนี้

00:26.104 --> 00:29.800
เราจะรันเมธอดบนวัตถุ

00:29.800 --> 00:32.120
และเพื่อสิ่งนั้น ฉันจะเพิ่มคลาสใหม่ที่นี่

00:32.120 --> 00:34.600
อย่างแรกเลยคือเครื่องพิมพ์

00:34.600 --> 00:38.140
และในนั้นฉันต้องการมีข้อความคุณสมบัติซึ่งใช้งานได้

00:38.140 --> 00:49.630
ดังนั้นสตริงธรรมดาที่เก็บไว้ในนั้น จากนั้นฉันต้องการวิธีแสดงข้อความในนั้น ซึ่งฉันเพียงแค่คอนโซลบันทึกข้อความนี้

00:49.630 --> 00:51.770
แน่นอนว่านี่เป็นคลาสหลอกๆ ธรรมดาๆ แต่ก็ไม่น้อยไปกว่ากัน

00:51.770 --> 00:54.860
นี่ทำให้ฉันสามารถแสดงสิ่งที่ฉันต้องการแสดงให้คุณเห็น

00:54.860 --> 00:56.550
ให้เลือกปุ่มไปที่ประตูตอนนี้ด้วยปุ่มตัวเลือกการสืบค้นเอกสาร

00:56.550 --> 01:02.970
และมาเพิ่มตัวฟังเหตุการณ์เข้าไป

01:02.970 --> 01:05.080
ตอนนี้ ก่อนอื่น ฉันจะเพิ่มเครื่องหมายอัศเจรีย์ที่นี่เพื่อให้

01:05.080 --> 01:10.990
TypeScript ชัดเจนว่ามีสิ่งนี้อยู่ ซึ่งจะไม่เป็นโมฆะ จากนั้นฉันจะเพิ่มตัวฟังเหตุการณ์ ตัวฟังเหตุการณ์คลิก

01:10.990 --> 01:16.450
จากนั้นฉันต้องการ เรียกใช้วิธีการแสดงข้อความนี้ที่นี่

01:16.450 --> 01:20.350
เพื่อสิ่งนั้น ฉันจะสร้างเครื่องพิมพ์ใหม่ที่นี่ แบบนี้

01:20.350 --> 01:24.323
แล้วชี้ไปที่หน้า showMessage นั่นคือความคิดของฉันที่นี่

01:25.300 --> 01:27.103
ทีนี้ ถ้าเราบันทึกมัน และเรากลับไปที่หน้าของเรา

01:28.153 --> 01:36.050
และผมคลิกที่ปุ่มนี้ เราจะไม่ได้กำหนดที่นี่ แต่เราไม่ได้รับข้อความของเราแสดง

01:36.050 --> 01:38.860
และเหตุผลก็คือว่าด้วยตัวฟังเหตุการณ์

01:38.860 --> 01:41.820
หากเราชี้ไปที่ฟังก์ชันที่ควรดำเนินการ

01:41.820 --> 01:48.260
คีย์เวิร์ดนี้ภายในฟังก์ชันนั้นจะไม่มีบริบทหรือการอ้างอิงเหมือนกับที่มีถ้าเราเรียกแค่

01:48.260 --> 01:56.450
p ShowMessage ในกรณีนี้จะหมายถึงเครื่องพิมพ์

01:56.450 --> 02:00.200
ไม่ ในสถานการณ์ที่เราใช้ตัวฟังเหตุการณ์ สิ่งนี้จะอ้างถึงเป้าหมายของเหตุการณ์

02:00.200 --> 02:02.860
เนื่องจากในตอนท้าย addEventListener

02:02.860 --> 02:09.560
จะผูกสิ่งนี้ในฟังก์ชันที่จะดำเนินการกับเป้าหมายของเหตุการณ์

02:09.560 --> 02:11.360
และแน่นอน ฉันไม่ต้องการสิ่งนี้

02:11.360 --> 02:14.170
ตอนนี้วิธีแก้ปัญหาทั่วไปในที่นี้คือใช้วิธีผูกและผูก

02:14.170 --> 02:19.170
showMessage กับ p หรือผูกสิ่งนี้ใน showMessage กับ p เพื่อที่ว่าเมื่อดำเนินการ

02:19.480 --> 02:22.860
สิ่งนี้ไม่ได้หมายถึงสิ่งที่ addEventListener

02:22.860 --> 02:25.420
ต้องการให้อ้างถึง แต่แทนสิ่งนี้ภายใน

02:25.420 --> 02:31.770
showMessage จะอ้างถึง p นี้กับวัตถุนี้ที่นี่อีกครั้ง

02:31.770 --> 02:33.300
และถ้าเราตอนนี้ ถ้าเราโหลดที่นี่ใหม่

02:33.300 --> 02:36.270
และผมเคลียร์มันอีกครั้ง ตอนนี้เราเห็นว่ามันได้ผล!

02:36.270 --> 02:39.240
ตอนนี้นั่นคือ JavaScript เริ่มต้นทั้งหมด

02:39.240 --> 02:40.790
ตอนนี้ เราจะสร้างมัณฑนากร

02:40.790 --> 02:42.191
ซึ่งเราสามารถเพิ่มเมธอดนี้

02:42.191 --> 02:47.191
ซึ่งจะผูกกับคลาสรอบข้างโดยอัตโนมัติ ดังนั้น เมธอดนี้เป็นของออบเจกต์

02:47.460 --> 02:53.440
ทุกครั้งที่เรียกใช้ ไม่ว่าเราจะเรียกมันจากที่ใด

02:53.440 --> 02:55.974
สำหรับสิ่งนั้น เหนือเครื่องพิมพ์ ฉันจะเพิ่มฟังก์ชันใหม่

02:55.974 --> 02:58.800
และฉันจะตั้งชื่อมันว่า autobind เพราะนั่นคือสิ่งที่เราทำในท้ายที่สุด

02:58.800 --> 03:01.580
และนั่นจะเป็นมัณฑนากรของฉัน autobind

03:01.580 --> 03:03.890
แน่นอนว่าสามารถใช้อักขระขึ้นต้นด้วยอักษรตัวใหญ่เพื่อให้สอดคล้องกับชื่ออื่นๆ

03:03.890 --> 03:10.122
ของเราได้ แต่อีกครั้ง คุณสามารถใช้หนึ่งในสองตัวนี้เมื่อคุณกำหนดฟังก์ชันมัณฑนากร

03:10.122 --> 03:15.269
ตอนนี้ที่นี่จะเป็นมัณฑนากรของฉันแล้ว และในนั้นเราได้รับข้อโต้แย้งสองสามข้อ

03:15.269 --> 03:17.940
เราได้รับเป้าหมายตามที่คุณจะได้เรียนรู้และนั่นก็คืออะไรก็ได้

03:17.940 --> 03:25.730
อาจเป็นต้นแบบของวัตถุที่เรากำลังทำงานด้วยหรือเป็นฟังก์ชันคอนสตรัคเตอร์หากเราจะเพิ่มสิ่งนี้ในเมธอดสแตติก

03:25.730 --> 03:30.200
แต่ที่นี่จะเป็นต้นแบบเพราะเราจะเพิ่มลงในเมธอดอินสแตนซ์

03:30.200 --> 03:33.690
จากนั้นเราก็มีชื่อเมธอดหรือชื่อคุณสมบัติ แต่เนื่องจากเราเพิ่มเข้าไปในเมธอด

03:33.690 --> 03:36.330
เราจึงสามารถเรียกชื่อเมธอดนี้ได้ จึงเหมาะสมกว่า

03:36.330 --> 03:38.600
ถ้านี่คือสตริงหรือสัญลักษณ์หรืออาจเป็นตัวเลขก็ได้

03:38.600 --> 03:40.229
แต่ที่นี่เรารู้ว่าโดยทั่วไปแล้วเราจะทำงานกับสตริง

03:40.229 --> 03:52.484
ดังนั้นเราสามารถใช้สตริงได้ที่นี่ ขึ้นอยู่กับว่าคุณวางแผนจะเพิ่มมัณฑนากรนี้ไว้ที่ใดและอย่างไร ทั่วไปควรเป็น และสุดท้าย แต่ไม่ท้ายสุด เราได้รับคำอธิบายที่นี่ ซึ่งจะเป็นประเภท PropertyDescriptor

03:52.484 --> 03:56.340
เป็นการแจ้งเตือน

03:56.340 --> 03:59.655
ตอนนี้เรามีอาร์กิวเมนต์สามตัวที่เราใช้ใน

03:59.655 --> 04:03.540
Log3 ซึ่งเป็นตัวตกแต่งเมธอดของเรามาก่อน

04:03.540 --> 04:08.994
ตอนนี้ใน autobind และตอนนี้ฉันต้องการให้แน่ใจว่าเราตั้งค่าคำหลักนี้เป็นวัตถุนี้เสมอ

04:08.994 --> 04:11.973
วิธีการนี้เป็นของอีกครั้ง

04:11.973 --> 04:14.240
ตอนนี้เราจะบรรลุสิ่งนี้ได้อย่างไร

04:14.240 --> 04:17.880
ก่อนอื่นฉันต้องเข้าถึงเมธอดที่ควรเรียก

04:17.880 --> 04:20.661
และสิ่งนี้จะเป็นไปได้ด้วยความช่วยเหลือจากตัวอธิบายของเรา

04:20.661 --> 04:29.460
เพราะถ้าคุณโหลดแอปซ้ำและคุณดูตัวอธิบายเมธอดดังกล่าวด้านล่าง คุณจะเห็นว่าเราได้รับคุณสมบัติค่าในตัวอธิบายและชี้ไปที่ฟังก์ชัน

04:29.460 --> 04:32.240
เนื่องจากค่าของคุณสมบัตินี้เป็นฟังก์ชัน ในกรณีนี้

04:32.240 --> 04:35.498
เมธอดจึงเป็นเพียงคุณสมบัติที่มีฟังก์ชันเป็นค่า

04:35.498 --> 04:38.630
ดังนั้นคีย์ค่าจึงเก็บฟังก์ชันดั้งเดิมไว้ ดังนั้น ที่นี่ เราสามารถแยกเมธอดดั้งเดิมได้

04:38.630 --> 04:47.320
ถ้าเราต้องการเรียกมันแบบนี้โดยการเข้าถึงตัวอธิบาย

04:47.320 --> 04:47.320
ค่า.

04:47.320 --> 04:50.563
สิ่งนี้จะทำให้เราเข้าถึงวิธีการดั้งเดิม

04:51.790 --> 04:58.320
ต่อไป ฉันจะตั้งค่าตัวอธิบายที่ปรับปรุงใหม่ ซึ่งจะเป็นสิ่งที่เราส่งคืนในภายหลังในที่สุด

04:58.320 --> 05:03.620
ตอนนี้จะเป็นวัตถุและจะเป็นประเภทคำอธิบายคุณสมบัติ

05:03.620 --> 05:09.350
ในออบเจกต์นี้ เราสามารถเพิ่มทุกสิ่งที่เราสามารถเพิ่มลงในคำอธิบายคุณสมบัติได้

05:09.350 --> 05:12.110
และตัวอย่างเช่น สามารถตั้งค่านี้ให้กำหนดค่าได้

05:12.110 --> 05:17.130
จริง ตั้งค่านับได้ให้เป็นเท็จ เพื่อให้สิ่งนี้ไม่แสดงในลูปแปลกปลอม และตอนนี้เพิ่มตัวรับที่นี่

05:17.130 --> 05:20.310
และนั่นคือสิ่งใหม่

05:20.310 --> 05:23.400
ฉันเพิ่มตัวรับที่นี่ ซึ่งเป็นเมธอดหรือคุณสมบัติที่เก็บฟังก์ชัน

05:23.400 --> 05:32.260
ซึ่งเหมือนกัน เพื่อให้เราสามารถดำเนินการตรรกะพิเศษเมื่อผู้ใช้พยายามเข้าถึงคุณสมบัตินี้

05:32.260 --> 05:35.170
เพื่อที่เราจะไม่เพียงแค่ดำเนินการค่าของคุณสมบัตินี้โดยตรง

05:35.170 --> 05:40.850
ดังนั้นฟังก์ชัน แต่เราสามารถเข้าไปทำงานพิเศษก่อนที่จะดำเนินการฟังก์ชัน

05:40.850 --> 05:41.913
นั่นคือความคิดที่นี่

05:43.230 --> 05:46.290
ดังนั้นฉันจึงไม่เพิ่มคุณสมบัติ value ให้กับ descriptor

05:46.290 --> 05:48.660
ตรงนี้ ฉันแค่มี getter และอีกอย่าง getter

05:48.660 --> 05:51.540
โดยพื้นฐานแล้วก็เหมือนกับการมีคุณสมบัติ value

05:51.540 --> 05:54.777
ที่มีลอจิกพิเศษที่รันก่อนที่ค่าจะถูกส่งกลับ

05:54.777 --> 06:03.450
ทีนี้ ในที่นี้ ฉันต้องการให้มีฟังก์ชันขอบเขต ที่ฉันสามารถใช้เมธอดเดิมที่เราแตกออกมาที่นี่

06:03.450 --> 06:07.100
และเราเรียกการผูกและผูกนี่

06:07.100 --> 06:11.730
และแน่นอนว่ามรดกนี้หมายถึงอะไรในที่นี้?

06:11.730 --> 06:13.720
โปรดทราบว่ามันอยู่ในเมธอด getter

06:13.720 --> 06:17.700
นี้ ดังนั้นสิ่งนี้จะอ้างถึงสิ่งที่รับผิดชอบในการทริกเกอร์เมธอด

06:17.700 --> 06:19.510
getter นี้

06:19.510 --> 06:21.110
และนั่นคือเคล็ดลับในตอนนี้

06:21.110 --> 06:27.200
เมธอด getter จะถูกกระตุ้นโดยวัตถุที่เป็นรูปธรรมของมัน ดังนั้นภายในเมธอด

06:27.200 --> 06:33.610
getter นี้จะอ้างถึงวัตถุที่เรากำหนด getter เสมอ

06:33.610 --> 06:36.800
สิ่งนี้จะไม่ถูกเขียนทับโดย addEventListener เนื่องจาก

06:36.800 --> 06:44.976
getter เป็นเหมือนชั้นพิเศษระหว่างฟังก์ชันของเราที่กำลังดำเนินการกับวัตถุที่เป็นของมันและตัวฟังเหตุการณ์

06:44.976 --> 06:47.683
ดังนั้น ในที่นี้จะกล่าวถึง

06:47.683 --> 06:51.610
object ที่เรากำหนด method ไว้ตั้งแต่แรก

06:51.610 --> 06:54.660
ดังนั้นเราจึงสามารถผูกสิ่งนี้กับเมธอดเดิมได้อย่างปลอดภัย

06:54.660 --> 07:01.170
และมั่นใจได้ว่าตอนนี้ภายในเมธอดเดิมจะอ้างอิงถึงออบเจกต์เดียวกันด้วย

07:01.170 --> 07:04.300
ตอนนี้ฉันจะส่งคืนฟังก์ชันที่ถูกผูกไว้ที่นี่และหลังจากนั้น

07:04.300 --> 07:08.910
นอกคำอธิบายที่ปรับปรุงแล้วนี้ ให้ส่งคืนคำอธิบายที่ปรับปรุงแล้ว

07:08.910 --> 07:10.560
นั่นคือฟังก์ชันมัณฑนากรของเรา

07:10.560 --> 07:14.103
ส่งคืนวัตถุคำอธิบายใหม่ ดังนั้นวัตถุคำอธิบายนี้จะแทนที่คำอธิบายเก่า

07:14.103 --> 07:18.710
นั่นคือสิ่งที่ TypeScript จะทำกับมัน

07:18.710 --> 07:21.500
TypeScript จะแทนที่ตัวอธิบายเมธอดเก่า

07:21.500 --> 07:23.215
ดังนั้นการกำหนดค่าเมธอดเก่าด้วยการกำหนดค่าใหม่ที่นี่

07:23.215 --> 07:28.513
ซึ่งเพิ่มเลเยอร์ getter พิเศษนี้

07:29.460 --> 07:33.330
ตอนนี้ ฉันไม่สนใจชื่อเป้าหมายและเมธอดที่นี่ แน่นอน ดังนั้นเพื่อหลีกเลี่ยงข้อผิดพลาด

07:33.330 --> 07:39.083
ฉันจะตั้งชื่อเครื่องหมายขีดล่างนี้ และนี่ที่นี่ เครื่องหมายขีดล่างสอง

07:40.260 --> 07:43.070
อีกครั้ง เพียงเพื่อบอก TypeScript ว่าฉันไม่สนใจค่าเหล่านี้

07:43.070 --> 07:45.480
แต่ฉันต้องยอมรับค่าเหล่านี้

07:45.480 --> 07:49.800
และตอนนี้เรามาเพิ่ม autobind เพื่อแสดงข้อความที่นี่

07:49.800 --> 07:52.203
ดังนั้นที่นี่ ฉันจะเพิ่มที่ Autobind

07:54.050 --> 07:56.490
และตรวจสอบให้แน่ใจว่าคุณลบการผูกลงที่นั่นในฟังเหตุการณ์

07:56.490 --> 07:59.236
และบันทึกสิ่งนี้

07:59.236 --> 08:01.450
ทีนี้มาดูกันดีกว่า คลิก Click

08:01.450 --> 08:04.730
Me แล้วคุณจะเห็นว่า This Works!

08:04.730 --> 08:06.678
ถ้าฉันโหลดใหม่มันใช้งานได้

08:06.678 --> 08:09.680
เพราะตอนนี้ผูกไว้อย่างถูกต้องแล้ว

08:09.680 --> 08:12.060
และเพียงเพื่อยืนยันว่าเป็นมัณฑนากรของเราจริงๆ

08:12.060 --> 08:13.520
ที่สร้างความแตกต่างที่นี่

08:13.520 --> 08:15.868
ถ้าฉันจะลบการผูกที่นี่ใน getter ของฉันและมัณฑนากร

08:15.868 --> 08:20.920
และฉันบันทึกมันไว้ คุณจะเห็นว่าถ้าตอนนี้มีการโหลดซ้ำและเราคลิกคลิกฉัน เราจะเห็น

08:20.920 --> 08:23.626
undefined อีกครั้ง.

08:23.626 --> 08:26.320
ดังนั้นมันจึงเป็นเลเยอร์ getter พิเศษนี้ซึ่งทำงานที่นี่

08:26.320 --> 08:30.430
ซึ่งทำให้มั่นใจได้ว่าสิ่งนี้จะถูกผูกไว้อย่างถูกต้องเสมอ ไม่ว่าคุณจะเรียกใช้

08:30.430 --> 08:33.260
showMessage อย่างไร

08:33.260 --> 08:35.380
ถ้าเราเรียกมันแบบนี้โดยตรงบนวัตถุ

08:35.380 --> 08:38.350
มันจะใช้ได้ ถ้าเราเรียกมันแบบนี้กับตัวฟังเหตุการณ์

08:38.350 --> 08:40.760
มันก็ใช้ได้เช่นกัน

08:40.760 --> 08:42.260
คุณจะเห็นว่ามันใช้งานได้ที่นี่

08:42.260 --> 08:48.266
ซึ่งท้ายที่สุดก็มาจากการโทรของ showMessage นี้ และคุณยังเห็นว่ามันใช้งานได้หากฉันคลิกที่ปุ่ม

08:48.266 --> 08:58.718
นี่เป็นตัวอย่างที่ดีอย่างหนึ่งของวิธีที่คุณสามารถใช้เครื่องมือตกแต่งเพื่อสร้างฟังก์ชันที่น่าทึ่งและช่วยให้คุณไม่ต้องยุ่งยากในการเรียกการผูกด้วยตนเองทุกที่

08:58.718 --> 09:01.883
แต่คุณเพียงแค่ผูกมันไว้แบบนี้
