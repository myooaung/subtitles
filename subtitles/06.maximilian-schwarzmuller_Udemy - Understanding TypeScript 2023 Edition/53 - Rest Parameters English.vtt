WEBVTT

1
00:00:02.060 --> 00:00:04.880
<v Man>Kind of related to the spread operator</v>

2
00:00:04.880 --> 00:00:07.060
are rest parameters.

3
00:00:07.060 --> 00:00:10.374
And for that, I'll again tweak my add function.

4
00:00:10.374 --> 00:00:13.870
So I'll comment out all that code up here

5
00:00:13.870 --> 00:00:15.780
so that nothing breaks.

6
00:00:15.780 --> 00:00:20.520
And re-add my add function with any syntax you want

7
00:00:20.520 --> 00:00:22.760
with the function key word as an arrow function,

8
00:00:22.760 --> 00:00:23.830
whatever you want.

9
00:00:23.830 --> 00:00:26.360
But now I wanna have a special function.

10
00:00:26.360 --> 00:00:29.100
I don't want to restrict it to two values,

11
00:00:29.100 --> 00:00:31.340
I want to be able to add as many values

12
00:00:31.340 --> 00:00:33.290
as a user passes in.

13
00:00:33.290 --> 00:00:37.700
So that we can basically call add like this,

14
00:00:37.700 --> 00:00:42.700
five, ten, two, three dot seven, and so on,

15
00:00:42.880 --> 00:00:44.530
with as many values as you want.

16
00:00:44.530 --> 00:00:46.691
If you would want to call it with 10 values,

17
00:00:46.691 --> 00:00:48.090
that should also be possible.

18
00:00:48.090 --> 00:00:51.160
Now of course however, right now it's not possible

19
00:00:51.160 --> 00:00:52.600
as you can clearly see.

20
00:00:52.600 --> 00:00:54.290
Typescript is giving me an error,

21
00:00:54.290 --> 00:00:57.760
and correctly so, because I'm accepting no arguments here.

22
00:00:57.760 --> 00:01:00.336
Now of course I could accept for arguments here

23
00:01:00.336 --> 00:01:02.210
and assign the correct types,

24
00:01:02.210 --> 00:01:04.300
but what if I then call it with five.

25
00:01:04.300 --> 00:01:06.330
As I said, I wanna be flexible.

26
00:01:06.330 --> 00:01:08.850
That's where rest parameters come in.

27
00:01:08.850 --> 00:01:13.111
In the place where you expect a list of values,

28
00:01:13.111 --> 00:01:15.270
so not where you want to pass it,

29
00:01:15.270 --> 00:01:18.308
but where you want to accept it as incoming values,

30
00:01:18.308 --> 00:01:20.360
you can also use the three dots

31
00:01:20.360 --> 00:01:24.043
and then any name of your choice, like numbers.

32
00:01:25.630 --> 00:01:27.430
Now what this will do is,

33
00:01:27.430 --> 00:01:31.470
it will merge all incoming parameters,

34
00:01:31.470 --> 00:01:34.920
or generally the incoming list of values,

35
00:01:34.920 --> 00:01:39.350
comma separated list of values into an array.

36
00:01:39.350 --> 00:01:40.940
So numbers here will be an array,

37
00:01:40.940 --> 00:01:44.460
but of course by default a type of any values,

38
00:01:44.460 --> 00:01:46.920
so an array full of any values,

39
00:01:46.920 --> 00:01:48.300
and that's not what we should do,

40
00:01:48.300 --> 00:01:49.680
we should be more explicit.

41
00:01:49.680 --> 00:01:53.200
And here we could say, "It will be a number array."

42
00:01:53.200 --> 00:01:54.430
Like that.

43
00:01:54.430 --> 00:01:56.420
So now we are defining the correct type

44
00:01:56.420 --> 00:01:58.710
and now work with that numbers array.

45
00:01:58.710 --> 00:02:01.880
Now we can sum that up in a couple of different ways.

46
00:02:01.880 --> 00:02:04.110
We can work with a result variable

47
00:02:04.110 --> 00:02:06.863
and then a four loop because numbers is an array.

48
00:02:06.863 --> 00:02:09.260
So here we could loop through numbers

49
00:02:09.260 --> 00:02:11.519
and add that to the result.

50
00:02:11.519 --> 00:02:15.620
Or we use the reduce method which is available on arrays.

51
00:02:15.620 --> 00:02:19.030
Reduce works such that it performs an operation

52
00:02:19.030 --> 00:02:20.940
on every element in an array,

53
00:02:20.940 --> 00:02:24.310
returns a result, and then adds these results together.

54
00:02:24.310 --> 00:02:27.160
For that you provide a function to reduce

55
00:02:27.160 --> 00:02:31.093
and then a starting value which here is zero.

56
00:02:31.093 --> 00:02:33.430
And then this function which you pass

57
00:02:33.430 --> 00:02:35.920
to reduce itself takes two arguments

58
00:02:35.920 --> 00:02:38.968
and that's the current result you could say.

59
00:02:38.968 --> 00:02:42.640
And it's the current value which we're looking at,

60
00:02:42.640 --> 00:02:45.350
which will be each value of the array ones.

61
00:02:45.350 --> 00:02:48.290
And then here you can return cuResult,

62
00:02:48.290 --> 00:02:51.497
which for the first run will be that initial value here.

63
00:02:51.497 --> 00:02:52.703
Plus curValue.

64
00:02:53.859 --> 00:02:57.920
And if you do that reduce overall here will return a number.

65
00:02:57.920 --> 00:03:01.160
So here we can overall return the result

66
00:03:01.160 --> 00:03:04.790
of numbers reduced and hence the add variable,

67
00:03:04.790 --> 00:03:07.320
or constant here, will in the end hold a function

68
00:03:07.320 --> 00:03:10.650
which takes a couple of numbers, not an array of numbers.

69
00:03:10.650 --> 00:03:13.690
But because of the rest parameters, a list of numbers,

70
00:03:13.690 --> 00:03:16.510
which is then merged into an array inside of the function

71
00:03:16.510 --> 00:03:18.550
and which returns the number in the end.

72
00:03:18.550 --> 00:03:20.350
So then for now if we save everything,

73
00:03:20.350 --> 00:03:23.350
it should all work and we see the result,

74
00:03:23.350 --> 00:03:26.250
the sum of our little addition here.

75
00:03:26.250 --> 00:03:28.430
So that's rest parameters,

76
00:03:28.430 --> 00:03:31.400
a really useful feature for accepting

77
00:03:31.400 --> 00:03:34.210
an unlimited amount of arguments.

78
00:03:34.210 --> 00:03:36.680
And a couple of built in methods like the push method

79
00:03:36.680 --> 00:03:38.540
work exactly that way.

80
00:03:38.540 --> 00:03:42.560
You see, push here has this strange parameter definition.

81
00:03:42.560 --> 00:03:44.250
Well that's exactly what we just learned.

82
00:03:44.250 --> 00:03:48.490
Push here takes a couple of items for this array,

83
00:03:48.490 --> 00:03:50.400
which is an array full of strings.

84
00:03:50.400 --> 00:03:51.730
It takes a couple of strings.

85
00:03:51.730 --> 00:03:54.060
And this does not mean it takes an array of strings,

86
00:03:54.060 --> 00:03:56.400
but instead here wit the rest parameters,

87
00:03:56.400 --> 00:03:58.580
a comma separated list of strings,

88
00:03:58.580 --> 00:04:01.260
which ins out of porch is then merged into an array

89
00:04:01.260 --> 00:04:03.100
and handled internally.

90
00:04:03.100 --> 00:04:06.276
That is the rest parameters syntax.

91
00:04:06.276 --> 00:04:10.370
You can even combine this with tuples by the way.

92
00:04:10.370 --> 00:04:15.370
If you know you wanna support multiple arguments

93
00:04:16.520 --> 00:04:18.420
but you know how many it will be,

94
00:04:18.420 --> 00:04:20.392
so if it's not an unlimited list,

95
00:04:20.392 --> 00:04:23.430
then you can also use a tuple type there.

96
00:04:23.430 --> 00:04:28.430
And for example say, "I do accept my free numbers here."

97
00:04:28.460 --> 00:04:30.910
And then I have to remove the fourth argument here of course

98
00:04:30.910 --> 00:04:32.240
when calling the function.

99
00:04:32.240 --> 00:04:33.830
Because now I'm pretty clear

100
00:04:33.830 --> 00:04:36.980
that I want to get three arguments, which each are numbers.

101
00:04:36.980 --> 00:04:39.030
So of course we could have just added three

102
00:04:39.030 --> 00:04:40.720
standalone parameters here,

103
00:04:40.720 --> 00:04:43.090
but this syntax might still be a bit shorter

104
00:04:43.090 --> 00:04:46.919
or easier to set up than adding the free parameters.

105
00:04:46.919 --> 00:04:51.320
It really depends on your application and your requirements.

106
00:04:51.320 --> 00:04:55.210
Here I'll move away from that setup and be more generic

107
00:04:55.210 --> 00:04:57.864
and accept as many arguments as I get

108
00:04:57.864 --> 00:05:00.220
because for this function I am indeed able

109
00:05:00.220 --> 00:05:02.743
to handle an infinite amount of arguments.

