WEBVTT

00:02.440 --> 00:05.170
講師：さて､ コールバックと関数型についてですが､

00:05.170 --> 00:08.400
こちらもほとんど同じように動作します｡

00:08.400 --> 00:14.990
そこで新しい関数addAndHandleがあるとします｡

00:14.990 --> 00:22.320
そこで2つの数字を取得し､ さらにここでコールバック関数を取得することを期待します｡

00:22.320 --> 00:26.670
つまり､ 引数として渡される関数は､ その結果に対して何かを行うべきものであり､

00:26.670 --> 00:29.930
ここではもちろん結果を生成することができます｡

00:29.930 --> 00:31.060
しかし､ ただ返すだけでなく､

00:31.060 --> 00:35.670
コールバック関数を呼び出して結果を渡したいのです｡

00:35.670 --> 00:36.990
さて､ ここではっきりさせておきたいのは､

00:36.990 --> 00:39.270
コールバックは関数であるべきだということです｡

00:39.270 --> 00:42.190
この関数型は何も返しませんが､

00:42.190 --> 00:51.280
引数として数値を受け取ります｡

00:51.280 --> 00:52.740
つまり､ コールバック関数､

00:52.740 --> 00:58.460
つまりこの関数にパラメータとして渡す関数は､ 数値を受け取る必要があるのです｡

00:58.460 --> 01:01.890
次に､ addAndHandleを呼び出して､

01:01.890 --> 01:05.240
10と20を渡し､ 関数を渡します｡

01:05.240 --> 01:07.570
例えば､ ここにある匿名機能｡ 

01:07.570 --> 01:09.710
さて､ ここで関数を呼び出すと､

01:09.710 --> 01:11.470
もちろんこれは関数の型ではなく､

01:11.470 --> 01:15.150
この第3引数に渡す具体的な値である｡

01:15.150 --> 01:18.870
このように､ ここでは無名関数が作成され､

01:18.870 --> 01:22.300
そこで数値を得ることができるのです｡

01:22.300 --> 01:26.110
ここで結果に名前をつけて､ あとは好きにすればいいんじゃないでしょうか｡

01:26.110 --> 01:31.120
これは､ addAndHandleに渡したコールバック関数の結果で､

01:31.120 --> 01:43.200
addAndHandleは2つの数字を結合してコールバックを呼び出し､ コールバックはこの条件を満たさなければなりません｡

01:43.200 --> 01:45.870
コールバック関数を定義する利点は､

01:45.870 --> 01:52.240
関数の内部で､ resultが数値であることを推測できるコールバック型を渡すことで､

01:52.240 --> 01:56.620
resultに対して何でもできるようになることです｡

01:56.620 --> 02:00.990
TypeScriptは結果が数値であることを知っているので､

02:00.990 --> 02:03.226
ここで明示的に型を指定しなくても､

02:03.226 --> 02:08.473
数値を使って何ができるかを考えることができる｡

02:09.310 --> 02:20.500
なぜなら､ addAndHandle関数のコールバックには引数が1つしかないことを私たちはよく知っているからです｡

02:20.500 --> 02:23.950
ですから､ もし第二引数を取るコールバック関数を渡すとしたら､

02:23.950 --> 02:26.240
それは明らかに間違いです｡

02:26.240 --> 02:28.250
TypeScriptが拾わないのは､

02:28.250 --> 02:30.280
ここで何かを返した場合だけだ｡

02:30.280 --> 02:33.690
何も返してはいけないと明確にしたにもかかわらず､ return

02:33.690 --> 02:37.300
resultでコールバックが何かを返してしまった場合｡

02:37.300 --> 02:41.180
しかし､ これはTypeScriptのミスやバグではありません｡ 

02:41.180 --> 02:43.150
実はわざとそうしているんです｡ 

02:43.150 --> 02:46.000
コールバックタイプにvoidを指定することで､

02:46.000 --> 02:50.910
ここで返されるかもしれない結果を無視することを本質的に意味します｡

02:50.910 --> 02:54.030
つまり､ コールバック関数を取得するaddAndHandleでは､

02:54.030 --> 02:56.020
基本的に戻り値の型には何もしない､

02:56.020 --> 02:58.080
ということです｡

02:58.080 --> 03:00.600
そのため､ ここで何かを返しても罰は当たらないのですが､

03:00.600 --> 03:03.550
コールバックのタイプで明確に定義されているため､

03:03.550 --> 03:10.870
コールバックはここで返すかもしれない値に対して何もしないことが分かっています｡

03:10.870 --> 03:13.543
そのため､ 関数内のaddAndHandleは､

03:13.543 --> 03:17.120
あなたが返すかもしれないその値に対して何もしないのです｡

03:17.120 --> 03:19.620
もちろん､ それは有用な情報です｡ 

03:19.620 --> 03:21.270
この型を指定することで､

03:21.270 --> 03:33.920
addAndHandleの内部では戻り値に関心がないことを明確にすることができます｡

03:33.920 --> 03:38.260
そのため､ 何も返さないコールバックを渡すことを強制するものではありません｡

03:38.260 --> 03:42.200
ただ､ 返品される可能性のあるものは､ 使用されないと言うことです｡

03:42.200 --> 03:44.070
パラメータについては､ もちろん別です｡ 

03:44.070 --> 03:51.720
なぜなら､ ここでは､ より多くのパラメータを期待するコールバックを渡すかどうかを知ることが本当に重要だからです｡

03:51.720 --> 03:53.490
そうすると､ エラーが出たり､

03:53.490 --> 03:57.740
結果が出なかったりします｡

03:57.740 --> 04:02.840
そこで､ return型の場合のように､ 欲しいかもしれないものを無視するわけにはいかないのです｡

04:02.840 --> 04:05.506
ここでは､ addAndHandle関数がコールバックを呼び出す場所であるため､

04:05.506 --> 04:10.920
何かを渡す場合はこれを無視します｡

04:10.920 --> 04:17.150
TypeScriptはコールバック関数のパラメータの数や型について非常に厳格であり､

04:17.150 --> 04:21.253
戻り値の型を気にしないのはこのためである｡
