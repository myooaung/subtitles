WEBVTT

00:02.460 --> 00:05.590
-: Assim, as matrizes são suportadas e com números, cordas,

00:05.590 --> 00:07.620
booleons, objetos e matrizes.

00:07.620 --> 00:11.400
Temos os valores centrais ou tipos de valores, JavaScript nos suportados

00:11.400 --> 00:15.100
em TypeScript, como você aprenderá no exemplo dos objetos em suas

00:15.100 --> 00:17.884
matrizes, o TypeScript até oferece muito mais funcional,

00:17.884 --> 00:22.720
mas isso é um pouco mais avançado, e é por isso que daremos uma olhada nisso mais tarde,

00:22.720 --> 00:24.940
mas mesmo esses tipos centrais com o que

00:24.940 --> 00:26.810
você aprenderá nas palestras anteriores

00:26.810 --> 00:30.140
são suportados.

00:30.140 --> 00:33.540
Agora o TypeScript contém como um par de novos conceitos,

00:33.540 --> 00:37.840
novos tipos, que não conhecemos do script de baunilha Java, por

00:37.840 --> 00:40.300
exemplo, o tipo tuple.

00:40.300 --> 00:44.360
Agora você pode conhecer tuples de outras linguagens de programação,

00:44.360 --> 00:46.570
o JavaScript não os tem.

00:46.570 --> 00:49.570
Este é um tuple, por exemplo, e você diria, bem,

00:49.570 --> 00:52.290
este é um array. É uma matriz, mas é uma

00:52.290 --> 00:54.520
matriz de comprimento fixo e na verdade

00:54.520 --> 00:58.650
não apenas de comprimento fixo, mas também de tipo fixo.

00:58.650 --> 01:00.730
E onde isso poderia ser útil?

01:00.730 --> 01:03.350
Digamos aqui em nossa, pessoa, que

01:03.350 --> 01:07.830
na verdade temos uma série de propriedades, papel, que

01:07.830 --> 01:11.160
é uma matriz com exatamente dois elementos,

01:11.160 --> 01:14.184
onde o primeiro é um identificador numérico

01:14.184 --> 01:18.547
como dois e o segundo é um identificador de cadeia e uma

01:18.547 --> 01:22.765
descrição legível humana como autor.

01:22.765 --> 01:26.496
Agora isto deve sempre ter exatamente dois elementos porque um

01:26.496 --> 01:30.100
usuário ou uma pessoa nesta aplicação que estamos escrevendo,

01:30.100 --> 01:32.720
digamos que só pode ter um papel e um papel é composto

01:32.720 --> 01:35.185
de apenas dois elementos.

01:35.185 --> 01:37.400
É claro que poderíamos ter usado uma óptica

01:37.400 --> 01:39.090
aqui, mas por alguma razão queremos

01:39.090 --> 01:41.744
ter uma matriz com exatamente dois elementos onde

01:41.744 --> 01:43.118
o primeiro elemento é sempre

01:43.118 --> 01:47.570
o identificador numérico e o segundo elemento é sempre o identificador ou descrição

01:47.570 --> 01:50.220
da string ou como você quiser chamá-la.

01:50.220 --> 01:52.420
Agora, se nós pairarmos sobre este TypeScript

01:52.420 --> 01:55.730
realmente infere este tipo estranho que nós não vimos antes, Na verdade,

01:55.730 --> 01:58.550
se nós dis significa que o TypeScript entende que nós temos

01:58.550 --> 02:01.250
um array que pode conter até mesmo cordas ou números, este

02:01.250 --> 02:03.440
é um tipo de união e nós mergulharemos neles

02:03.440 --> 02:06.710
mais tarde. A chave para o sucesso é o TypeScript,

02:06.710 --> 02:09.950
que entende que este deve ser um conjunto com estes tipos

02:09.950 --> 02:11.668
de valores.

02:11.668 --> 02:14.580
Os pontos negativos que estão mortos Poderíamos,

02:14.580 --> 02:18.780
no entanto, executar este código, papel de pessoa, push, admin.

02:18.780 --> 02:20.250
Agora, para nossa aplicação, isto

02:20.250 --> 02:21.970
pode não fazer sentido, pois sabemos

02:21.970 --> 02:23.960
que só precisamos de dois elementos.

02:23.960 --> 02:25.790
Ainda o TypeScript não sabe que queremos

02:25.790 --> 02:28.963
apenas dois elementos. Poderíamos também trocar

02:28.963 --> 02:33.283
o papel de pessoa, o segundo elemento com índice um para ser

02:33.283 --> 02:35.200
também um número.

02:35.200 --> 02:38.010
Isto funcionaria porque o TypeScript sabe apenas

02:38.010 --> 02:42.360
que a função deve ser de tipo string ou matriz numérica, e portanto atribuir um

02:42.360 --> 02:44.700
número aqui ao segundo elemento e, portanto,

02:44.700 --> 02:46.870
substituí-lo por um número seria permitido

02:46.870 --> 02:48.680
porque estamos apenas dizendo algo

02:48.680 --> 02:50.886
sobre os tipos que geralmente podemos

02:50.886 --> 02:52.580
usar ali.

02:52.580 --> 02:55.040
Sabemos que queremos ter exatamente essa estrutura.

02:55.040 --> 02:58.094
Dois elementos, primeiro número de elemento, segundo elemento de

02:58.094 --> 03:01.770
cadeia, mas o TypeScript não faz isso. Bem, para tal cenário,

03:01.770 --> 03:05.865
um tuple seria perfeito. Podemos dizer ao TypeScript

03:05.865 --> 03:10.865
qual deve ser o papel, definindo explicitamente o tipo de papel.

03:11.010 --> 03:13.230
Portanto, aqui também temos um exemplo

03:13.230 --> 03:16.600
em que o TypeScript não é fototipo, mas queremos explicitamente

03:16.600 --> 03:19.927
substituí-lo. Agora aqui podemos, portanto, adicionar

03:19.927 --> 03:23.041
um tipo de objeto explícito, adicionando um cólon após pessoa,

03:23.041 --> 03:27.023
depois o aparelho encaracolado e depois os nomes devem ser uma corda, a idade

03:27.023 --> 03:31.180
deve ser um número e os passatempos devem ser uma matriz de corda.

03:31.180 --> 03:33.740
Portanto, tudo como deduzido pelo TypeScript.

03:33.740 --> 03:35.401
Então, para isso, não teríamos exigido,

03:35.401 --> 03:36.827
esta tarefa explícita e, como

03:36.827 --> 03:38.789
você sabe, teria sido ruim.

03:38.789 --> 03:40.470
Mas agora temos um cenário,

03:40.470 --> 03:43.565
onde a inferência não funciona da maneira que queremos,

03:43.565 --> 03:47.510
e, queremos definir um papel para ser um tuple.

03:47.510 --> 03:49.730
Agora, em vez de definir uma matriz de duas cordas

03:49.730 --> 03:51.660
ou uma matriz numérica ou usar o mesmo tipo

03:51.660 --> 03:55.180
que não era o terceiro aqui antes, podemos agora usar um tipo especial.

03:55.180 --> 03:56.810
Usamos colchetes novamente,

03:56.810 --> 04:01.710
mas agora dentro dos colchetes adicionamos número, e depois uma vírgula

04:01.710 --> 04:03.637
e depois um fio.

04:03.637 --> 04:07.340
Agora isto marca um tipo de tuple aqui.

04:07.340 --> 04:10.729
Um tuple é uma construção especial, o TypeScript entende, em

04:10.729 --> 04:13.310
Java scripted será uma matriz normal, mas durante

04:13.310 --> 04:15.750
o desenvolvimento com o TypeScript, vamos obter

04:15.750 --> 04:18.190
erros com código como este aqui.

04:18.190 --> 04:20.313
Agora o que fazem os tuples?

04:21.620 --> 04:23.564
Isto aqui, diz TypeScript, eu quero

04:23.564 --> 04:27.195
ter uma matriz especial, com exatamente dois elementos, porque

04:27.195 --> 04:30.160
eu tenho exatamente dois tipos ali e o primeiro elemento

04:30.160 --> 04:32.020
deve ser um número.

04:32.020 --> 04:35.436
O segundo elemento deve ser uma string, portanto,

04:35.436 --> 04:39.033
se compilarmos este código aqui, recebo um erro

04:40.663 --> 04:45.000
em relação ao 10 não ser atribuível como um tipo aqui, porque

04:45.000 --> 04:48.346
queremos ter uma string como segundo valor

04:48.346 --> 04:50.822
e se eu então atribuir 10 como segundo

04:50.822 --> 04:52.660
valor aqui, então obviamente

04:52.660 --> 04:56.544
não sigo esta regra.

04:56.544 --> 05:01.544
Se você comentar isso e nós compilarmos, isso funciona.

05:02.240 --> 05:06.290
Isso é um pouco estranho porque por que empurrar o trabalho aqui, porque

05:06.290 --> 05:08.610
todos nós estamos dizendo que a função deve

05:08.610 --> 05:11.901
ter exatamente dois elementos, então por que podemos empurrar

05:11.901 --> 05:14.980
a administração para a matriz de funções aqui.

05:14.980 --> 05:19.300
O empurrão é na verdade uma exceção que é permitida nos tuplos.

05:19.300 --> 05:22.410
Portanto, infelizmente o TypeScript não pode detectar

05:22.410 --> 05:24.840
este erro, mas pelo menos garante que não estamos

05:24.840 --> 05:28.570
atribuindo um valor errado aqui, e fora do empurrão, também obtemos

05:28.570 --> 05:31.500
algum apoio em relação ao comprimento.

05:31.500 --> 05:33.671
Se definirmos esse papel a uma pessoa com um novo valor.

05:33.671 --> 05:36.420
Por exemplo, não é permitida uma matriz vazia,

05:36.420 --> 05:39.710
uma com exatamente a estrutura que definimos lá em cima,

05:39.710 --> 05:43.510
é permitida, se acrescentei um elemento extra aqui.

05:43.510 --> 05:45.880
Então, receberíamos novamente um erro.

05:45.880 --> 05:49.300
Portanto, o comprimento é aplicado se o atribuirmos assim, mas não para um

05:49.300 --> 05:50.720
empurrão e assim por diante.

05:50.720 --> 05:52.840
Isto é algo que você tem que estar ciente,

05:52.840 --> 05:55.580
mas ainda assim obter este suporte e este suporte

05:55.580 --> 05:57.899
é muito bom e se você tem um cenário onde você

05:57.899 --> 06:02.240
precisa exatamente X quantidade de valores em um array e você sabe o tipo de cada

06:02.240 --> 06:05.130
valor com antecedência, então você pode querer considerar

06:05.130 --> 06:07.900
um tuple ao invés de um array para obter ainda mais

06:07.900 --> 06:11.313
rigor em seu aplicativo para ser ainda mais claro sobre o tipo

06:11.313 --> 06:15.230
de dados com os quais você está trabalhando e o tipo de dados que você está

06:15.230 --> 06:17.543
esperando.
