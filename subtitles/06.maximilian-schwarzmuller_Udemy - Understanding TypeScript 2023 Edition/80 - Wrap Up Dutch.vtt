WEBVTT

00:02.090 --> 00:05.740
En dat is het voor interfaces en klassen.

00:05.740 --> 00:08.190
In deze module hebben we uitgebreid gekeken naar klassen

00:08.190 --> 00:09.630
en wat we daar kunnen doen.

00:09.630 --> 00:11.390
Klassen en TypeScript bouwen

00:11.390 --> 00:14.130
uiteindelijk gewoon voort op klassen voor

00:14.130 --> 00:17.180
JavaScript, en die heb ik eerder in deze module

00:17.180 --> 00:18.720
al samengevat.

00:18.720 --> 00:20.710
Interfaces zijn iets anders.

00:20.710 --> 00:22.600
Ze bestaan alleen in TypeScript.

00:22.600 --> 00:24.670
Ze zijn een pure TypeScript-functie,

00:24.670 --> 00:27.390
die u helpt duidelijke, helder gestructureerde en

00:27.390 --> 00:29.450
zeer expliciete code te schrijven.

00:29.450 --> 00:33.010
Ze kunnen u helpen klassen te dwingen bepaalde eigenschappen te

00:33.010 --> 00:36.810
hebben of objecten in het algemeen een bepaalde structuur te geven.

00:36.810 --> 00:39.860
Ze kunnen worden gebruikt als functietype, zoals je hebt geleerd.

00:39.860 --> 00:42.490
Ze staan optionele eigenschappen toe en dus

00:42.490 --> 00:45.200
ook allemaal optionele methoden, als je een

00:45.200 --> 00:48.290
vraagteken achter de naam van de methode zet.

00:48.290 --> 00:50.190
Dus dat kun je gebruiken.

00:50.190 --> 00:53.210
En, zoals u net zag, bij het compileren nadat ze hun

00:53.210 --> 00:55.870
rol hebben vervuld om TypeScript uw code te

00:55.870 --> 00:57.680
laten controleren, wordt er niets

00:57.680 --> 01:00.410
weggelaten voor deze interfaces.

01:00.410 --> 01:02.300
De code wordt gewoon gedumpt.

01:02.300 --> 01:05.080
Interfaces zijn niettemin een krachtige functie

01:05.080 --> 01:07.420
om je klassen of je objecten te dwingen

01:07.420 --> 01:09.140
een bepaalde structuur te hebben

01:09.140 --> 01:12.400
en om duidelijk te beschrijven hoe een object er volgens

01:12.400 --> 01:14.810
jou uit moet zien.

01:14.810 --> 01:18.650
Zoals je hebt geleerd, kun je ze meestal vervangen door aangepaste

01:18.650 --> 01:21.120
types als je dat zou willen.

01:21.120 --> 01:23.580
Je kunt ook aangepaste types implementeren, maar

01:23.580 --> 01:27.700
het is gewoon gebruikelijker om daarvoor een interface te gebruiken, om een interface

01:27.700 --> 01:30.360
te gebruiken als je een object wilt beschrijven dan als

01:30.360 --> 01:32.180
je het wilt implementeren.

01:32.180 --> 01:33.980
Allemaal om historische redenen,

01:33.980 --> 01:36.490
want in de vroegere dagen van TypeScript konden

01:36.490 --> 01:38.980
aangepaste types niet worden geÃ¯mplementeerd

01:38.980 --> 01:40.710
of gebruikt zoals interfaces.

01:40.710 --> 01:42.610
Nu is er meer flexibiliteit, maar het

01:42.610 --> 01:45.150
is nog steeds aan te raden voor interfaces te gaan

01:45.150 --> 01:46.420
als je met objecten werkt

01:46.420 --> 01:48.680
en hun structuur wilt beschrijven.

01:48.680 --> 01:50.620
We zullen ze ook steeds weer tegenkomen

01:50.620 --> 01:51.883
in deze cursus.
