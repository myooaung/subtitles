WEBVTT

00:02.220 --> 00:04.080
-Kruispunttypes zijn één ding.

00:04.080 --> 00:05.470
Vaker gebruikt is echter een

00:05.470 --> 00:07.800
andere functie, en dat zou typebewaking zijn, een

00:07.800 --> 00:10.590
functie die we eigenlijk al een beetje gebruikten.

00:10.590 --> 00:12.400
Laten we hier Combineerbaar gebruiken.

00:12.400 --> 00:15.560
Het is een union-type waarbij we ofwel een string ofwel

00:15.560 --> 00:18.020
een getal hebben, en type guards helpen ons

00:18.020 --> 00:21.050
bij union-types, want hoewel het leuk is om de flexibiliteit

00:21.050 --> 00:23.610
te hebben, moet je vaak tijdens runtime weten

00:23.610 --> 00:26.200
welk type je nu precies krijgt.

00:26.200 --> 00:28.630
Laten we zeggen dat we hier onze optelfunctie

00:28.630 --> 00:33.070
hebben waarbij ik een getal krijg dat van het type Combineerbaar moet zijn,

00:33.070 --> 00:35.100
dus een string of een getal, en daarom

00:35.100 --> 00:37.990
noem ik het hier a, en dan heb ik nog een argument dat

00:37.990 --> 00:39.520
ook Combineerbaar moet zijn,

00:39.520 --> 00:42.110
dus een getal of een string, en dan wil ik a plus

00:42.110 --> 00:44.640
b teruggeven.

00:44.640 --> 00:47.020
Nu hebben we in het verleden gezien dat dit niet werkt.

00:47.020 --> 00:51.320
In plaats daarvan moeten we nu controleren of bijvoorbeeld

00:51.320 --> 00:53.740
typeof a gelijk is aan string, of

00:55.660 --> 00:59.780
typeof b gelijk is aan string, en als dat het geval is, geven

00:59.780 --> 01:04.681
we a terug.

01:04.681 --> 01:04.681
toString plus b. toString.

01:04.681 --> 01:06.750
Dus we voegen deze twee strings samen;

01:06.750 --> 01:09.570
anders, als het niet in dit if statement komt, geven

01:09.570 --> 01:11.510
we a plus b zo terug, want nu weet de

01:11.510 --> 01:13.270
typengroep dat a en b hier getallen

01:13.270 --> 01:15.620
moeten zijn, want als ten minste één ervan

01:15.620 --> 01:19.710
geen getal zou zijn, zouden we hier in zitten.

01:19.710 --> 01:22.890
Nu wordt dit hier een type guard genoemd, omdat

01:22.890 --> 01:25.280
het ons in staat stelt de flexibiliteit

01:25.280 --> 01:27.980
te benutten die union-types ons geven

01:27.980 --> 01:32.550
en er toch voor te zorgen dat onze code correct draait tijdens runtime,

01:32.550 --> 01:34.830
want vaak heb je functies die werken

01:34.830 --> 01:38.160
met twee of drie verschillende types, en daarom

01:38.160 --> 01:40.570
is een union-type perfect, maar wat

01:40.570 --> 01:43.890
je dan precies doet met de waarden hangt af van het

01:43.890 --> 01:46.940
type, zoals hier, waar we ofwel samenvoegen

01:46.940 --> 01:51.670
ofwel mathematisch optellen.

01:51.670 --> 01:55.310
Nu is dit een typebewaking met behulp van typeof.

01:55.310 --> 01:58.970
U kunt ook andere soorten typebeschermers schrijven.

01:58.970 --> 02:00.880
en daarvoor, laat me terugkomen op

02:00.880 --> 02:03.050
mijn admin en werknemer types die ik daar

02:03.050 --> 02:04.950
heb, waar ik privileges heb op de admin

02:04.950 --> 02:06.943
en startDate op de werknemer.

02:08.590 --> 02:11.810
Nu hebben we de ElevatedEmployee die beide combineert.

02:11.810 --> 02:14.980
Maak nu ook hier een ander type.

02:14.980 --> 02:16.330
Dat is de Onbekende Werknemer.

02:18.000 --> 02:21.940
Dit is of een werknemer of een admin.

02:21.940 --> 02:25.540
Dus we hebben een unie-type met mijn twee aangepaste objecttypes.

02:25.540 --> 02:28.173
Dus onbekende werknemer is een van de twee.

02:29.230 --> 02:32.003
Nu hebben we misschien een functie, printEmployeeInformation,

02:34.620 --> 02:36.420
waar ik een werknemer moet invoeren,

02:36.420 --> 02:39.660
en die moet van het type onbekende werknemer zijn.

02:39.660 --> 02:41.610
Nu hier, ik wil troosten. diverse gegevens

02:41.610 --> 02:44.030
over de werknemer vastleggen.

02:44.030 --> 02:47.210
Bijvoorbeeld de naam van emp. naam, wat zonder problemen

02:47.210 --> 02:48.580
zal werken omdat beide

02:48.580 --> 02:52.140
soorten werknemers een naam-eigenschap hebben.

02:52.140 --> 02:56.730
Maar dan wil ik ook troosten. log de privileges door toegang

02:58.160 --> 03:01.520
tot emp. privileges, en hier krijg

03:01.520 --> 03:04.350
ik al problemen in de autocompletie omdat

03:04.350 --> 03:07.100
TypeScript niet kan bevestigen dat dit altijd

03:07.100 --> 03:09.890
bestaat op het argument, omdat de UnknownEmployee

03:09.890 --> 03:13.540
een normale werknemer kan zijn die geen privileges eigenschap

03:13.540 --> 03:16.260
heeft.

03:16.260 --> 03:18.330
Alleen de administratie heeft dat.

03:18.330 --> 03:20.100
Dus nu hebben we hier een type bewaker nodig.

03:20.100 --> 03:24.530
Het probleem is alleen dat we met typeof niets winnen.

03:24.530 --> 03:26.830
Als we het type werknemer controleren,

03:26.830 --> 03:29.470
zal dat tijdens runtime gewoon object zijn.

03:29.470 --> 03:31.380
Dat vertelt ons echter niet of het deze

03:31.380 --> 03:32.940
eigenschap heeft of niet.

03:32.940 --> 03:34.960
Als ik dus de code in deze if check verplaats,

03:34.960 --> 03:37.430
is TypeScript niet gelukkiger dan voorheen, want

03:37.430 --> 03:39.750
een object is, nou ja, gewoon een object.

03:39.750 --> 03:41.920
Het zegt ons niets over de eigenschappen.

03:41.920 --> 03:44.980
We kunnen niet controleren of het van het type Werknemer

03:44.980 --> 03:48.130
is, want dat is geen type dat JavaScript kent, en bedenk

03:48.130 --> 03:49.840
dat deze controle tijdens runtime

03:49.840 --> 03:52.560
wordt uitgevoerd en JavaScript gebruikt,

03:52.560 --> 03:56.190
dus we kunnen het typeof alleen vergelijken met de types die

03:56.190 --> 03:58.010
JavaScript kent, en dat zouden

03:58.010 --> 04:01.920
object, string, getal en boolean zijn, en ons aangepaste type

04:01.920 --> 04:05.610
maakt daar geen deel van uit.

04:05.610 --> 04:07.950
Dat bestaat alleen in de TypeScript-wereld,

04:07.950 --> 04:11.020
niet in de gecompileerde JavaScript-wereld.

04:11.020 --> 04:13.990
Dus daarom werkt dit ook niet.

04:13.990 --> 04:17.960
Hier is onze oplossing het gebruik van een andere if-controle.

04:17.960 --> 04:20.240
We weten dat we toegang willen tot

04:20.240 --> 04:25.240
privileges, dus we kunnen kijken of medewerkers privileges iets is.

04:26.400 --> 04:28.560
Het probleem is alleen dat TypeScript ons helemaal

04:28.560 --> 04:30.690
geen toegang geeft tot deze eigenschap, zelfs

04:30.690 --> 04:33.550
niet om het op deze manier te controleren, maar er is een andere

04:33.550 --> 04:36.200
manier voor ons om het te controleren.

04:36.200 --> 04:40.000
We kunnen de sleutelwoorden gebruiken die in JavaScript zijn ingebouwd.

04:40.000 --> 04:43.120
We kunnen controleren of privileges,

04:43.120 --> 04:46.690
nu geschreven als een string, in emp staat.

04:46.690 --> 04:49.130
Dit is JavaScript code die ons toelaat

04:49.130 --> 04:53.480
te controleren of dit bestaat als een eigenschap van de werknemer,

04:53.480 --> 04:58.380
en als dat het geval is, detecteert TypeScript deze controle hier, en

04:58.380 --> 05:01.200
geeft ons daarom toegang tot deze eigenschap

05:01.200 --> 05:04.543
binnen deze if controle hier.

05:05.852 --> 05:08.380
En we kunnen dat herhalen voor de startDate,

05:08.380 --> 05:12.240
en dus controleren of startDate hier een eigenschap

05:12.240 --> 05:15.710
is, en we kunnen dit dus ook uitvoeren in deze if

05:16.970 --> 05:18.730
check.

05:18.730 --> 05:23.687
Dus als we nu daarmee printEmployeeInformation aanroepen, en we geven die

05:24.650 --> 05:28.363
ene werknemer door die we gemaakt hebben, e1, zul je zien

05:31.410 --> 05:34.860
dat dit zonder fouten gecompileerd is en, inderdaad,

05:34.860 --> 05:37.430
de privileges uitvoert en, nou ja, ook

05:37.430 --> 05:40.730
hier moeten de gegevens gewoon ook Startdatum zeggen,

05:40.730 --> 05:42.530
natuurlijk.

05:42.530 --> 05:45.820
Maar daarmee geeft het ons de output die we zouden verwachten.

05:45.820 --> 05:48.590
En aan de andere kant, als we een werknemer invoeren

05:48.590 --> 05:50.950
die niet al deze velden heeft, bijvoorbeeld,

05:50.950 --> 05:53.090
als we er een on the fly creëren die alleen

05:53.090 --> 05:56.383
een startdatum heeft maar geen privileges, dan is er al het

05:57.850 --> 06:00.370
werk en gecompileerd zonder fouten, en we drukken

06:00.370 --> 06:03.160
gewoon niets af over de privileges vanwege deze if-controle

06:03.160 --> 06:05.723
die we erin hebben.

06:07.650 --> 06:09.800
Wanneer u met klassen werkt, kunt

06:09.800 --> 06:13.070
u ook een ander type van typebescherming gebruiken,

06:13.070 --> 06:16.520
namelijk de instanceof typebescherming.

06:16.520 --> 06:21.460
Laten we zeggen dat we een klasse hebben, Auto, en die heeft een

06:21.460 --> 06:23.800
drive methode waar het gewoon

06:23.800 --> 06:26.523
console zegt. log Driving, en we

06:28.480 --> 06:31.750
hebben een andere klasse, Truck, die ook een

06:31.750 --> 06:34.623
drive method heeft, of misschien zeg je

06:35.840 --> 06:38.280
Driving a truck, maar we moeten wel

06:38.280 --> 06:40.250
method name zeggen.

06:40.250 --> 06:43.980
En waar we ook een loadCargo methode hebben, waar

06:43.980 --> 06:46.570
we een bedrag hebben, wat een getal

06:46.570 --> 06:49.040
is, en dan heb ik hier gewoon wat

06:49.040 --> 06:53.570
dummy code waar ik zeg, "Vracht laden plus bedrag. Zoiets, oeps, bedrag, zoiets.

06:53.570 --> 06:57.323
Dus nu hebben we twee klassen, die natuurlijk enige overeenkomst

06:58.170 --> 06:59.320
hebben, de aandrijfmethode,

06:59.320 --> 07:02.090
maar ook een verschil.

07:02.090 --> 07:03.890
Ook hier kunnen we een unie-type

07:03.890 --> 07:08.200
maken, Voertuig, dat ofwel een Auto ofwel een Vrachtwagen is,

07:08.200 --> 07:13.030
en nu, laten we zeggen, we maken een nieuw voertuig, v1, dat een nieuwe

07:13.030 --> 07:18.030
Auto is, en een ander, v2, dat een nieuwe Vrachtwagen is.

07:18.050 --> 07:21.873
Nu heb ik een functie, useVehicle, die verwacht een

07:23.890 --> 07:26.443
voertuig te krijgen, dat van het type

07:27.700 --> 07:29.780
voertuig moet zijn, dus van

07:29.780 --> 07:31.350
dit unie-type.

07:31.350 --> 07:34.203
Dus hier krijgen we een voertuig, en nu, laten we zeggen,

07:35.420 --> 07:37.490
is ons doel hier om alles te doen wat we met

07:37.490 --> 07:40.040
voertuigen kunnen doen: rijden en vracht laden.

07:40.040 --> 07:43.400
Dus, natuurlijk, kunnen we voertuig bellen. rijden omdat dat altijd bestaat, maar voor het

07:43.400 --> 07:45.420
voertuig. loadCargo, we hebben een

07:45.420 --> 07:50.010
probleem omdat alleen een vrachtwagen dat heeft.

07:50.010 --> 07:52.720
Een auto heeft dat niet, dus dit werkt niet.

07:52.720 --> 07:56.440
Nu kunnen we natuurlijk weer controleren of loadCargo in het voertuig

07:56.440 --> 07:59.513
zit, en als dat het geval is, kunnen we het gebruiken.

08:00.760 --> 08:05.760
Tenminste als ik die typfout hier maak.

08:06.430 --> 08:09.480
Dus dat slaan we nu op en dan roepen we useVehicle

08:09.480 --> 08:13.230
aan en geven we v1 door, en dan roepen we het weer aan met v2,

08:13.230 --> 08:17.400
en dat sla ik allemaal op, het compileert, en het werkt.

08:17.400 --> 08:21.680
Dat is één manier om het te doen.

08:21.680 --> 08:23.340
Een alternatieve manier, die

08:23.340 --> 08:26.580
misschien wat eleganter is omdat het ook het risico wegneemt

08:26.580 --> 08:28.600
dat je deze eigenschapstring hier

08:28.600 --> 08:31.920
verkeerd intypt, is dat je instanceof gebruikt.

08:31.920 --> 08:34.080
We kunnen controleren of voertuig een instantie van Vrachtwagen is.

08:34.080 --> 08:39.080
Als dat het geval is, weten we dat het een loadCargo methode zal hebben.

08:39.360 --> 08:42.510
Een instanceof is een normale operator ingebouwd

08:42.510 --> 08:45.230
in vanilla JavaScript, dus dit is geen

08:45.230 --> 08:47.430
TypeScript-code.

08:47.430 --> 08:49.280
Net als typeof maakt dit deel uit van

08:49.280 --> 08:52.250
JavaScript en wordt het uitgevoerd tijdens runtime.

08:52.250 --> 08:54.290
JavaScript kent het type Truck niet,

08:54.290 --> 08:56.780
maar wel constructorfuncties, en klassen worden

08:56.780 --> 08:59.330
uiteindelijk gewoon vertaald naar constructorfuncties,

08:59.330 --> 09:01.490
en TypeScript kan dan achterhalen of er

09:01.490 --> 09:03.400
een voertuig is gemaakt op basis van

09:03.400 --> 09:06.580
de Truck constructorfunctie.

09:06.580 --> 09:10.290
Dus omdat klassen zijn gecompileerd tot iets wat JavaScript

09:10.290 --> 09:11.970
begrijpt, constructorfuncties,

09:11.970 --> 09:15.450
kan het die gebruiken.

09:15.450 --> 09:17.210
Als we hier een interface zouden gebruiken

09:17.210 --> 09:20.390
in plaats van een klasse, en daarom zouden we natuurlijk de implementatie

09:20.390 --> 09:21.223
hier niet kunnen hebben,

09:21.223 --> 09:22.950
maar dat doen we als we een object maken

09:22.950 --> 09:25.130
met de object letterlijke notatie, dan zouden we

09:25.130 --> 09:27.300
instanceof niet kunnen gebruiken omdat interfaces,

09:27.300 --> 09:30.940
zoals je geleerd hebt, niet gecompileerd worden naar JavaScript code, en daarom

09:30.940 --> 09:34.370
kunnen we ze niet gebruiken tijdens runtime.

09:34.370 --> 09:37.160
Voor klassen kunnen we dat doen omdat JavaScript klassen

09:37.160 --> 09:40.010
en constructorfuncties ondersteunt, en met instanceof

09:40.010 --> 09:42.290
kun je dan uitzoeken of een of ander object

09:42.290 --> 09:44.500
gebaseerd is op die klasse.

09:44.500 --> 09:47.660
Als we dat weten, dan hebben we een loadCargo functie.

09:47.660 --> 09:51.850
Dus dit zijn type bewakers.

09:51.850 --> 09:53.480
Uiteindelijk is type guards

09:53.480 --> 09:55.890
gewoon een term die het idee of de aanpak

09:55.890 --> 09:59.470
beschrijft van het controleren of een bepaalde eigenschap

09:59.470 --> 10:02.980
of methode bestaat voordat je die probeert te gebruiken,

10:02.980 --> 10:06.310
of dat je iets met het type kunt doen voordat je het probeert

10:06.310 --> 10:08.470
te gebruiken.

10:08.470 --> 10:10.220
Voor objecten kun je dat doen

10:10.220 --> 10:15.113
met instanceof of met in, voor andere types kun je typeof gebruiken, en daarom

10:16.140 --> 10:19.780
heb je nu alle flexibiliteit om de flexibiliteit die union

10:19.780 --> 10:22.280
types je geven te gebruiken en toch code

10:22.280 --> 10:25.090
te schrijven die dan het ene of het andere doet

10:25.090 --> 10:29.050
op basis van het exacte type dat je op runtime krijgt.
