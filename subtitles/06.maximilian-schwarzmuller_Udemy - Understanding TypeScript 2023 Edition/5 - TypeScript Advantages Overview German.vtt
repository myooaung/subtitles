WEBVTT

00:02.290 --> 00:04.300
Erzähler: Sie haben also TypeScript in

00:04.300 --> 00:06.700
Aktion gesehen und es bietet große Vorteile.

00:06.700 --> 00:10.570
Es macht das Schreiben von sauberem Code wirklich einfacher.

00:10.570 --> 00:14.060
TypeScript fügt Typen und Daten super wichtig.

00:14.060 --> 00:16.810
Mit Typen müssen wir viel deutlicher machen, wie

00:16.810 --> 00:20.970
die Dinge funktionieren, und wir können viele nicht akzeptierte und unnötige

00:20.970 --> 00:24.460
Fehler vermeiden, indem wir Typen verwenden.

00:24.460 --> 00:27.640
Darüber hinaus können wir auch moderne IDEs verwenden,

00:27.640 --> 00:31.070
die über eine eingebaute Typenunterstützung verfügen,

00:31.070 --> 00:33.130
die diese Typen erkennt und uns eine

00:33.130 --> 00:36.940
bessere Autovervollständigung und eingebaute Fehler anzeigt,

00:36.940 --> 00:39.570
noch bevor wir den Code kompilieren, da sie

00:39.570 --> 00:43.050
auch TypeScript verstehen.

00:43.050 --> 00:46.870
Aber neben den Typen und den enormen Vorteilen, die wir allein durch die Verwendung

00:46.870 --> 00:49.660
von Typen erhalten, gibt es noch weitere Funktionen, die durch

00:49.660 --> 00:51.410
TypeScript hinzugefügt wurden.

00:51.410 --> 00:55.170
Wir können bestimmte JavaScript-Funktionen der nächsten Generation verwenden,

00:55.170 --> 00:58.340
die Sie in unseren TypeScript-Dateien schreiben und verwenden

00:58.340 --> 01:01.890
können, und dann werden sie zu JavaScript-Code kompiliert, um Workarounds

01:01.890 --> 01:05.630
zu schaffen, die auch in älteren Browsern funktionieren.

01:05.630 --> 01:08.170
Wenn Sie Bevel kennen, ein Tool, mit dem wir

01:08.170 --> 01:11.120
das auch mit Vanilla JavaScript machen können, ist

01:11.120 --> 01:14.680
es ein bisschen so, nur schon in TypeScript eingebaut.

01:14.680 --> 01:18.350
Wir können moderne JavaScript-Funktionen verwenden und trotzdem Code produzieren

01:18.350 --> 01:21.773
und ausliefern, der auch in älteren Browsern funktioniert.

01:22.610 --> 01:25.210
TypeScript fügt auch bestimmte Funktionen hinzu,

01:25.210 --> 01:26.930
die nur TypeScript versteht,

01:26.930 --> 01:29.070
wie Interfaces und Generics.

01:29.070 --> 01:32.560
Dies sind Funktionen, die in JavaScript kompiliert werden können,

01:32.560 --> 01:35.360
aber nicht müssen, denn es sind Funktionen, die uns

01:35.360 --> 01:39.610
bei der Entwicklung helfen, die uns klarere Fehler anzeigen und uns helfen,

01:39.610 --> 01:42.200
noch mehr Fehler zu vermeiden.

01:42.200 --> 01:45.660
Neben den Typen, die wir bereits kennengelernt haben, kommen

01:45.660 --> 01:47.950
also noch weitere Funktionen hinzu.

01:47.950 --> 01:50.900
Es gibt uns auch bestimmte Meta-Programmierfunktionen

01:50.900 --> 01:53.700
wie Dekoratoren, über die ich ein ganzes Modul in

01:53.700 --> 01:55.850
diesem Kurs habe, in dem Sie verstehen

01:55.850 --> 01:59.520
werden, was genau Dekoratoren sind, warum sie so meta sind und warum

01:59.520 --> 02:01.790
sie erstaunlich sind.

02:01.790 --> 02:04.230
TypeScript alls ist in hohem Maße konfigurierbar.

02:04.230 --> 02:06.390
Wir haben ihn bisher nicht konfiguriert,

02:06.390 --> 02:09.350
aber ich habe ein ganzes Modul im Kurs, in dem wir nur über

02:09.350 --> 02:12.510
den Compiler sprechen und wie man ihn konfiguriert.

02:12.510 --> 02:15.700
Und Sie können sie genau auf Ihre Bedürfnisse abstimmen,

02:15.700 --> 02:18.960
um sie strenger oder lockerer zu machen und sicherzustellen,

02:18.960 --> 02:23.310
dass sie sich genau so verhält, wie Sie es wollen.

02:23.310 --> 02:26.790
Und mit Modern Tooling mit modernen IDE's erhalten Sie

02:26.790 --> 02:30.610
sogar Unterstützung in Nicht-TypeScript-Projekten.

02:30.610 --> 02:33.700
Die IDE, die Sie gerade gesehen haben, Visual Studio Code,

02:33.700 --> 02:37.740
bietet Ihnen sogar eine bessere Unterstützung für einfache JavaScript-Dateien,

02:37.740 --> 02:41.010
da sie einige TypeScript-Funktionen unter der Haube nutzen

02:41.010 --> 02:44.710
kann, ohne dass Sie explizit TypeScript verwenden.

02:44.710 --> 02:47.640
Das ist also ein kostenloser Vorteil, den man erhält,

02:47.640 --> 02:49.810
wenn man sich mit TypeScript auskennt

02:49.810 --> 02:52.020
und moderne Tools verwendet.

02:52.020 --> 02:54.830
Es gibt also viele Gründe für die Verwendung von TypeScript, und wahrscheinlich

02:54.830 --> 02:57.460
ist das auch der Grund, warum Sie diesen Kurs besucht haben.

02:57.460 --> 03:00.360
In diesem Kurs werden wir nun Schritt für Schritt lernen, wie es funktioniert,

03:00.360 --> 03:03.663
und wir werden alles über die erstaunlichen Funktionen erfahren, die es bietet.
