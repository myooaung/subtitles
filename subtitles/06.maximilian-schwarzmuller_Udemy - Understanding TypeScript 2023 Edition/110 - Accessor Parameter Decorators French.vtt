WEBVTT

00:02.210 --> 00:03.450
Male Instructor : Maintenant,

00:03.450 --> 00:06.170
en plus des propriétés, vous pouvez également ajouter des décorateurs

00:06.170 --> 00:09.200
aux accesseurs et là, je vais créer une nouvelle fonction de décorateur parce

00:09.200 --> 00:11.660
que cela va maintenant recevoir des arguments libres.

00:11.660 --> 00:16.430
Log2, il obtiendra également la cible qui, encore une fois, est soit le prototype, si

00:16.430 --> 00:18.330
nous avons affaire à un accesseur

00:18.330 --> 00:21.290
d'instance, ou si nous avons affaire à un accesseur statique,

00:21.290 --> 00:23.360
ce sera la fonction de construction,

00:23.360 --> 00:24.960
de sorte que nous ne savons pas

00:24.960 --> 00:27.290
si nous serons de type any.

00:27.290 --> 00:32.290
Ensuite, nous aurons le nom du membre auquel nous avons affaire.

00:32.410 --> 00:35.030
Donc le nom de l'accesseur à la fin.

00:35.030 --> 00:38.683
Et nous aurons également le descripteur de propriété ici, qui

00:39.580 --> 00:42.030
sera de type descripteur de propriété.

00:42.030 --> 00:44.600
C'est le type intégré à TypeScript.

00:44.600 --> 00:49.600
Donc là-dedans, nous allons loger le décorateur d'accès et ensuite

00:50.030 --> 00:54.210
je vais aussi consigner la cible ici, puis peut-être de nouvelles

00:54.210 --> 00:56.470
lignes pour les rendre plus lisibles

00:56.470 --> 01:01.470
dans la sortie, le nom et aussi le descripteur.

01:01.720 --> 01:05.890
Maintenant ajoutons log2 au setter ici comme ceci et voyons ce

01:05.890 --> 01:07.350
que nous obtenons.

01:07.350 --> 01:10.733
Si nous sauvegardons cela, vous voyez qu'en bas vous

01:10.733 --> 01:14.090
avez le décorateur d'accès qui s'exécute ici.

01:14.090 --> 01:19.090
Nous avons eu notre prototype à nouveau, comme un buffle pour la propriété.

01:19.320 --> 01:23.570
Puis nous avons obtenu le nom de notre accesseur, prix dans ce cas.

01:23.570 --> 01:24.900
Pas le prix souligné, donc

01:24.900 --> 01:27.890
pas la propriété avec laquelle il traite en interne.

01:27.890 --> 01:30.570
Au lieu de cela, le nom de l'accesseur lui-même.

01:30.570 --> 01:33.630
Et nous avons un descripteur de propriété ici où nous voyons

01:33.630 --> 01:36.240
qu'une fonction setter est définie par exemple,

01:36.240 --> 01:37.600
une fonction getter ne l'est

01:37.600 --> 01:41.990
pas, parce que pour le prix j'ai seulement un setter, pas de getter.

01:41.990 --> 01:44.320
Et nous voyons que ce n'est pas énumérable, mais

01:44.320 --> 01:45.680
que c'est configurable.

01:45.680 --> 01:47.810
Ainsi, nous pouvons modifier cette

01:47.810 --> 01:51.000
définition ici, par exemple la supprimer, etc.

01:51.000 --> 01:54.520
Tout cela existe et c'est ainsi que nous pouvons ajouter un décorateur

01:54.520 --> 01:56.650
à un accesseur, et ce à quoi nous pouvons accéder

01:56.650 --> 01:58.920
à l'intérieur de ce décorateur.

01:58.920 --> 02:00.910
Maintenant, en plus des propriétés et des accesseurs,

02:00.910 --> 02:04.350
nous avons aussi des méthodes et nous pouvons ajouter des décorateurs aux méthodes.

02:04.350 --> 02:09.350
Donc, ici, je vais ajouter Log3, et l'ajouter à ma méthode en bas pour

02:09.430 --> 02:11.970
obtenir le prix avec le texte.

02:11.970 --> 02:13.220
Et maintenant, la question

02:13.220 --> 02:17.323
est bien sûr de savoir quels arguments un tel décorateur de méthode reçoit-il ?

02:18.180 --> 02:22.230
Un décorateur de méthode reçoit également des arguments libres,

02:22.230 --> 02:25.520
la cible étant à nouveau, s'il s'agit d'une méthode

02:25.520 --> 02:28.420
d'instance, le prototype de l'objet.

02:28.420 --> 02:31.150
S'il s'agit d'une méthode statique, la fonction

02:31.150 --> 02:34.993
de constructeur comme précédemment, puis le nom de la méthode

02:36.450 --> 02:39.380
ici, donc une chaîne ou un symbole en fait.

02:39.380 --> 02:44.380
Et aussi le descripteur à la fin, le descripteur de propriété.

02:44.490 --> 02:46.140
Ce sont les arguments libres que nous obtenons

02:46.140 --> 02:48.110
ici, et vous voyez que ce sont les mêmes arguments

02:48.110 --> 02:49.410
que dans notre accesseur.

02:49.410 --> 02:51.630
En effet, nous pourrions également réutiliser

02:51.630 --> 02:54.340
cette méthode, mais je vais en créer une nouvelle afin

02:54.340 --> 02:57.483
de pouvoir imprimer le décorateur de méthode.

02:59.020 --> 03:00.840
Maintenant, si j'ai sauvegardé ceci,

03:01.980 --> 03:04.410
ceci s'exécute et vous voyez ici que notre décorateur

03:04.410 --> 03:07.880
de méthode s'exécute et ensuite ici nous obtenons notre prototype, le même

03:07.880 --> 03:09.380
objet que précédemment.

03:09.380 --> 03:11.310
Nous obtenons le nom de la méthode

03:11.310 --> 03:14.700
ici et nous obtenons le descripteur de cette méthode ici.

03:14.700 --> 03:17.440
Le comportement est donc le même que précédemment, mais le descripteur

03:17.440 --> 03:19.400
est un peu différent puisqu'il s'agit d'un descripteur

03:19.400 --> 03:22.550
de méthode et non d'un descripteur d'accesseur.

03:22.550 --> 03:25.720
On a une valeur et une propriété inscriptible ici.

03:25.720 --> 03:27.750
Auparavant, sur le descripteur d'accès,

03:27.750 --> 03:28.860
nous avions get et set.

03:28.860 --> 03:30.910
Mais ce n'est qu'une différence de java

03:30.910 --> 03:33.088
script, rien de spécifique à TypeScript.

03:33.088 --> 03:38.088
Nous avons donc ici notre troisième fonction décoratrice que nous avons

03:38.150 --> 03:40.070
ajoutée à la méthode.

03:40.070 --> 03:43.390
Le dernier décorateur que nous pouvons ajouter est celui d'un paramètre.

03:43.390 --> 03:45.260
Alors faisons-le maintenant.

03:45.260 --> 03:47.550
Pour cela, je vais créer une autre fonction

03:47.550 --> 03:51.269
ici, Log4, et je veux ajouter Log4 à ce paramètre que je reçois

03:51.269 --> 03:53.660
ici, tax, et vous pourriez en ajouter un

03:53.660 --> 03:55.510
à chaque paramètre que vous recevez,

03:55.510 --> 03:57.130
bien sûr.

03:57.130 --> 03:59.560
Vous n'êtes pas obligé de le faire, mais vous pouvez les ajouter

03:59.560 --> 04:02.990
indépendamment à tout paramètre auquel vous souhaitez ajouter un décorateur.

04:02.990 --> 04:06.419
Maintenant, que reçoit un décorateur de paramètres comme arguments ?

04:06.419 --> 04:10.790
Eh bien, la cible est la même qu'avant.

04:10.790 --> 04:12.520
L'argument suivant que nous obtenons est

04:12.520 --> 04:14.100
le nom, et pas le nom du paramètre, mais

04:14.100 --> 04:17.310
le nom de la méthode dans laquelle nous avons utilisé ce paramètre.

04:17.310 --> 04:20.530
En gros, c'est la même chose que dans le décorateur de méthodes jusqu'à présent.

04:20.530 --> 04:22.170
Mais le dernier argument est différent.

04:22.170 --> 04:24.250
Ce n'est plus le descripteur de

04:24.250 --> 04:28.380
la propriété, mais plutôt la position de cet argument, donc le

04:28.380 --> 04:30.100
numéro de l'argument.

04:30.100 --> 04:32.763
Ici par exemple, ce serait le premier argument.

04:35.310 --> 04:38.670
Maintenant, copions cela ici et mettons

04:38.670 --> 04:43.550
tout cela dans le décorateur de paramètres Log4.

04:43.550 --> 04:45.410
Et nous allons sortir la position ici aussi afin que

04:45.410 --> 04:47.170
nous puissions voir ce qu'il y a là-dedans.

04:47.170 --> 04:50.960
Si nous l'avons sauvegardé, nous voyons notre décorateur de paramètres là-haut, pas

04:50.960 --> 04:53.480
la toute dernière sortie car l'ordre d'exécution est différent,

04:53.480 --> 04:55.630
mais nous voyons notre décorateur de paramètres

04:55.630 --> 04:57.180
ici et ensuite ici.

04:57.180 --> 04:59.530
Nous avons obtenu le prototype comme avant.

04:59.530 --> 05:00.860
Nous avons obtenu le nom

05:00.860 --> 05:02.190
de la méthode où nous avons

05:02.190 --> 05:04.770
utilisé ce paramètre, puis l'index de cet argument,

05:04.770 --> 05:06.240
et cela commence à zéro, donc

05:06.240 --> 05:09.070
le premier argument a un nombre de zéro ici, un index

05:09.070 --> 05:10.360
de zéro, et c'est notre

05:10.360 --> 05:12.740
décorateur de paramètre.

05:12.740 --> 05:14.920
Ce sont donc tous les endroits où nous pouvons ajouter

05:14.920 --> 05:16.370
des décorateurs et du TypeScript,

05:16.370 --> 05:18.570
et où nous pouvons faire diverses choses avec eux.

05:18.570 --> 05:20.450
Je vous montrerai quelques exemples

05:20.450 --> 05:21.660
dans ce module et je vous

05:21.660 --> 05:24.813
montrerai également des bibliothèques ou des frameworks

05:24.813 --> 05:28.380
qui font un usage intensif des décorateurs.

05:28.380 --> 05:30.550
Et je vais vous montrer ce qu'ils font avec les décorateurs

05:30.550 --> 05:34.583
pour vous donner une idée du pouvoir que peuvent avoir les décorateurs.
