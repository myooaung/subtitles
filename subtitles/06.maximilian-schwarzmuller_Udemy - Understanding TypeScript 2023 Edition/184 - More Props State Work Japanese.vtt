WEBVTT

00:02.110 --> 00:08.500
講師：この小さなダミーアプリケーションでは､

00:08.500 --> 00:17.640
To Doを削除できるようにしたいと思います｡

00:17.640 --> 00:31.368
それを実装するために､ To Doリストでは､ リストアイテムにTo Doテキストだけでなく､

00:31.368 --> 00:46.440
スパンの中にもTo Doを配置します｡

00:46.440 --> 00:47.700
ここで引数として､

00:47.700 --> 00:50.690
to doモデルでIDが文字列であることから､

00:50.690 --> 00:53.340
to do IDを取得し､ そこで再びset

00:55.650 --> 01:01.260
to doを呼び出しますが､ 今度はto doを削除することを期待します｡

01:01.260 --> 01:03.200
このために再びこの関数フォーラムを使用します｡

01:03.200 --> 01:04.750
なぜなら､ 状態の更新があり､

01:04.750 --> 01:09.460
それは前の状態に依存し､ そこで私は新しい配列を返します｡

01:09.460 --> 01:13.520
で､ これは基本的に私の古い配列になりますが､ フィルターをかけることができます｡ 

01:13.520 --> 01:16.230
Filter は JavaScript に組み込まれているメソッドで､

01:16.230 --> 01:18.020
データの新しい配列を返します｡

01:18.020 --> 01:24.490
この新しい配列は基本的に､ 古い配列からフィルタリングしたものを除いたものになります｡

01:24.490 --> 01:28.590
Filterは､ 古い配列の各項目に対して実行される関数を受け取り､

01:28.590 --> 01:31.390
その関数がtrueを返した場合､ その項目を保持して新しい配列に追加し､

01:31.390 --> 01:37.330
falseを返した場合は､ その項目を削除します｡

01:37.330 --> 01:39.820
そこで､ すでにあるすべてのTo Doに対して実行し､

01:39.820 --> 01:42.810
もし見ているTo Do IDがここで取得したTo Do

01:42.810 --> 01:48.120
IDと等しい場合にfalseを返すロジックを用意する必要があります｡

01:48.120 --> 01:52.100
To Doが同数なら落とされていくように｡ 

01:52.100 --> 01:53.570
そこで､ ここではtrueではなくfalseが必要なので､

01:53.570 --> 01:57.430
次でこれを逆にして感嘆符を付けましょう｡

01:57.430 --> 02:00.620
これで､ すべてのTo Doを保持できますが､ IDがここで取得したIDと等しいTo

02:00.620 --> 02:07.833
Doは､ 削除したいTo Doであるため､ 削除したいIDになります｡

02:08.710 --> 02:11.499
ここで､ to do listの内部からto

02:11.499 --> 02:16.370
do deleteハンドラを呼び出せるようにする必要がある｡

02:16.370 --> 02:19.580
ここでもpropsを使って､ on Delete

02:19.580 --> 02:22.520
to do propを追加してto do

02:22.520 --> 02:33.130
deleteハンドラを指定することができるが､ もちろんTypeScriptはこれをあまり喜ばない｡

02:33.130 --> 02:34.350
これを変えよう｡ 

02:34.350 --> 02:40.530
TSXのto doリストにdelete to doをpropとして追加して､

02:40.530 --> 02:45.380
これは関数を指すようになります｡

02:45.380 --> 02:48.150
つまりvoidだが､ to be deleted

02:48.150 --> 02:51.380
to doの考えをパラメータとして取得するもの｡

02:51.380 --> 02:54.230
これでアプリコンポーネントのエラーはなくなりました｡

02:54.230 --> 03:00.320
今度は調整として､ このボタンがクリックされたときにこの関数が呼ばれるようにする必要があります｡

03:00.320 --> 03:04.100
プロダクションがdeleteでpropを指してこれを実行するのではなく､

03:04.100 --> 03:12.930
このボタンをクリックしたときにこのpropで受け取っている関数が呼ばれるようにするだけである｡

03:12.930 --> 03:15.203
この方法の唯一の問題は､

03:15.203 --> 03:22.970
この関数では､ パラメータとしてto do IDを取得することを期待していることです｡

03:22.970 --> 03:26.620
さて､ これが確実に動作するようにするには､ ここで単にbindを使用することができます｡

03:26.620 --> 03:32.010
私は､ 関数と呼ばれるように､ またはそれを知って設定するには､ このキーワードを気にしないが､ bindに渡す第2引数は､

03:32.010 --> 03:43.743
削除で受信した最初のパラメータとなるようにするために行うには､ それがアイデアになるはずです｡

03:43.743 --> 03:43.743
IDはこちら

03:44.620 --> 03:47.440
これでうまくいくはずです｡ これで保存して､

03:47.440 --> 03:52.440
私はコースを終了し､ 1ヶ月で終了させることを追加しました｡

03:55.180 --> 03:57.940
ここでDeleteをクリックすると､ それが消えているので､

03:57.940 --> 03:59.700
これですべてうまくいきました｡

03:59.700 --> 04:03.690
あとはこれを磨いて､ ちょっと素敵なスタイルを追加して､

04:03.690 --> 04:07.333
この基本的なアプリケーションはこれで終わりです｡
