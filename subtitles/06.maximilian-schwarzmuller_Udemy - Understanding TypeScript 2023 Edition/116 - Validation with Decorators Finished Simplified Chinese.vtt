WEBVTT

00:02.320 --> 00:08.217
教师：要实现这一点, 我将首先创建一个接口ValidatorConfig,

00:09.550 --> 00:12.680
在其中配置要使用的存储｡

00:12.680 --> 00:17.653
我的想法是有几个属性, 因此我在这里使用了索引类型表示法｡

00:19.720 --> 00:21.450
它们基本上是字符串,

00:21.450 --> 00:23.440
其中的值是另一个对象｡

00:23.440 --> 00:29.570
因为这基本上就是我们要注册的一些验证属性的类名｡

00:29.570 --> 00:31.700
然后在我们存储的对象中,

00:31.700 --> 00:37.010
我们有类的具体属性, 这些属性附加了验证器｡

00:37.010 --> 00:40.610
这里我们有validatable属性,

00:40.610 --> 00:42.240
如果你想这样调用它,

00:42.240 --> 00:44.660
它也是一个字符串键｡

00:44.660 --> 00:47.350
它的值应该是一个字符串数组,

00:47.350 --> 00:50.010
基本上我们有required,

00:52.420 --> 00:55.490
positive, 等等.

00:55.490 --> 00:59.323
所以类似的东西可以作为验证器列表添加到这里｡

01:00.300 --> 01:07.950
现在我们可以在这里创建registeredValidators配置, 它应该是ValidatorConfig类型,

01:07.950 --> 01:09.640
最初是一个空对象｡

01:09.640 --> 01:11.500
因为最初当应用程序启动时,

01:11.500 --> 01:16.293
当我们的第三方库被加载时, 还没有注册任何验证器｡

01:17.640 --> 01:19.920
那么, 在我们的控制器中,

01:19.920 --> 01:23.490
我们希望为该注册表添加一些内容｡

01:23.490 --> 01:39.300
现在请记住, 属性装饰器函数有两个参数：目标（属性所在对象的原型）或构造函数（如果它是静态属性）以及属性名称｡

01:39.300 --> 01:40.710
这是我们在这里得到的两个参数,

01:40.710 --> 01:44.370
我们没有得到属性的描述符｡

01:44.370 --> 01:51.463
现在, 我们可以转到注册的验证器, 在那里我想为target添加一个新条目｡

01:51.463 --> 01:51.463
建构函式｡ 

01:52.730 --> 01:58.430
我们正在使用的实例的原型将有一个构造函数键,

01:58.430 --> 02:02.610
它指向用于创建对象的构造函数｡

02:02.610 --> 02:06.120
因此, 基本上就像这里的course一样,

02:06.120 --> 02:10.560
所以构造函数的名字最终可以从构造函数中检索出来｡

02:10.560 --> 02:11.900
因为constructor是一个函数,

02:11.900 --> 02:13.400
我们可以使用name属性,

02:13.400 --> 02:20.620
它存在于JavaScript中的任何函数上, 来获取函数名, 例如这里的课程名.

02:20.620 --> 02:25.030
因此, 现在我们将类名注册为已注册验证器中的键｡

02:25.030 --> 02:28.130
它的值应该是另一个对象｡ 

02:28.130 --> 02:30.630
所以我把它和另一个对象相等｡ 

02:30.630 --> 02:32.390
在这个对象中, 我还有一个动态赋值的属性,

02:32.390 --> 02:34.640
我在其中使用了propName,

02:34.640 --> 02:40.190
所以我想为这个属性添加一个验证器作为键｡

02:40.190 --> 02:45.530
现在这里的值是一个字符串数组, 这里我将把required作为一个字符串添加进去｡

02:45.530 --> 02:47.920
当然, 这是一个非常简单的验证器｡ 

02:47.920 --> 02:50.000
如果我们已经为这个属性注册了其他验证器,

02:50.000 --> 02:52.830
我现在会在这里覆盖它｡

02:52.830 --> 02:54.900
因此, 最好先检索任何现有的验证器,

02:54.900 --> 03:01.320
然后将它们复制到该数组中, 并只将required添加到该现有数组中｡

03:01.320 --> 03:02.870
同样, 为了节省一些时间,

03:02.870 --> 03:06.873
并且只展示一般的想法, 我将在这里使用这个更幼稚的方法｡

03:07.980 --> 03:11.180
这样, 我们就得到了所需的注释,

03:11.180 --> 03:14.690
现在让我们处理正数注释｡

03:14.690 --> 03:16.730
当然, 这基本上是一样的｡ 

03:16.730 --> 03:23.600
我复制了代码, 但我在这里将其设置为正数或您要使用的任何标识符,

03:23.600 --> 03:27.650
当然, 我们必须确保接受正确的参数｡

03:27.650 --> 03:30.990
因此, 随着我们到目前为止所添加的内容,

03:30.990 --> 03:38.640
我们在定义该类时在全局配置中注册这些属性及其验证器｡

03:38.640 --> 03:41.460
现在我们只需要处理validate函数｡ 

03:41.460 --> 03:46.240
validate函数应该检查所有注册的验证器,

03:46.240 --> 03:50.340
然后根据找到的验证器运行不同的逻辑｡

03:50.340 --> 03:57.600
首先, 我想检索我们要处理的具体对象的配置｡

03:57.600 --> 04:00.390
为此, 我们需要找出该对象基于哪个构造函数,

04:00.390 --> 04:09.070
然后在这里获取我们为该对象设置的验证配置或属性验证器映射｡

04:09.070 --> 04:11.960
所以这里我将这个对象命名为validators,

04:11.960 --> 04:14.520
或者objValidatorConfig｡

04:14.520 --> 04:17.110
我们在这里访问注册的验证器并访问一个属性,

04:17.110 --> 04:27.060
该属性应该是obj｡ 建构函式｡  和之前的逻辑一样, 我们访问对象原型上的constructor属性,

04:27.060 --> 04:28.980
因此我们可以直接在对象上访问它,

04:28.980 --> 04:31.720
这要归功于JavaScript的工作方式,

04:31.720 --> 04:36.710
也要归功于原型链, 如果我们在对象本身上找不到constructor属性,

04:36.710 --> 04:41.580
我们就可以访问原型, 这样就可以了｡

04:41.580 --> 04:43.840
因此现在我们得到了构造函数名,

04:43.840 --> 04:49.050
我们发现, 比如说, 这个Course是基于这个Course类的.

04:49.050 --> 04:52.800
因此, 我们查找Course类的所有验证器配置｡

04:52.800 --> 04:55.910
现在我们看的是这个物体｡ 

04:55.910 --> 04:58.207
这现在位于objValidatorConfig中｡ 

04:59.310 --> 05:01.540
当然, 如果我们试图验证没有注册的对象,

05:01.540 --> 05:05.110
我们可能找不到这个｡

05:05.110 --> 05:08.270
如果我们没有任何验证器配置, 如果我们在那里没有找到任何东西,

05:08.270 --> 05:14.010
我想返回true, 因为这肯定是有效的, 对吗？

05:14.010 --> 05:15.330
没有要验证的内容,

05:15.330 --> 05:18.350
因此对象肯定是有效的｡

05:18.350 --> 05:20.900
否则, 如果我们找到了我希望它用for

05:20.900 --> 05:24.910
in循环遍历这个内部对象.

05:24.910 --> 05:29.560
因此, 我通过objValidatorConfig中的const

05:29.560 --> 05:33.007
prop来循环我注册验证器的属性｡

05:34.380 --> 05:36.950
这使我可以访问所有的属性名,

05:36.950 --> 05:39.630
然后我们可能会有验证器｡

05:39.630 --> 05:43.970
当然, 现在我需要检查所有的属性验证器｡

05:43.970 --> 05:45.230
即使我们只添加了一个验证器,

05:45.230 --> 05:47.680
它也应该始终是一个数组｡

05:47.680 --> 05:49.530
因此, 我们现在可以在这里使用for

05:49.530 --> 05:56.930
of循环, 并为该给定属性的objValidatorConfig获取具体的验证器｡

05:56.930 --> 06:00.560
所以现在我们得到了一些东西, 比如positive或者required,

06:00.560 --> 06:02.963
它们存储在验证器常量中｡

06:04.080 --> 06:06.110
然后我们可以在这里有一个switch语句,

06:06.110 --> 06:09.810
或者根据我们找到的验证器调用外部函数｡

06:09.810 --> 06:12.130
但这里我将使用一个内置的switch语句,

06:12.130 --> 06:16.620
打开验证器, 然后基本上有不同的情况｡

06:16.620 --> 06:19.683
例如, 此处所需的大小写｡ 

06:20.800 --> 06:22.163
像这样

06:23.470 --> 06:28.950
在这里, 我想返回true, 如果我们的属性, 我们正在查看...

06:28.950 --> 06:33.260
因此, 此对象的此属性具有非空值｡ 

06:33.260 --> 06:38.260
因此, 如果obj prop为true, 则返回true｡ 

06:39.170 --> 06:44.420
为了把它转换成一个真值或假值, 我们可以使用双重爆炸运算符｡

06:44.420 --> 06:46.840
现在我听到一些抱怨说它不知道对象是否有这个属性,

06:46.840 --> 06:53.560
所以我们应该把它改成any来获得额外的灵活性｡

06:53.560 --> 06:56.150
当然, 您也可以在这里处理类型｡ 

06:56.150 --> 07:00.480
例如, 把你的标识符转换成明确定义的类型,

07:00.480 --> 07:05.490
在这里你使用枚举, 也许还可以改进这里的类型｡

07:05.490 --> 07:07.420
不过, 老实说, 由于我希望它能与任何对象一起工作,

07:07.420 --> 07:11.810
因此很难以TypeScript喜欢的方式对其进行改进｡

07:11.810 --> 07:13.330
我们可以使用泛型类型,

07:13.330 --> 07:22.110
但是我们需要限制我们自己, 泛型类型应该扩展和接受哪些对象｡

07:22.110 --> 07:30.640
因此, 任何可能是我们最好的选择, 以真正灵活地在这个验证函数中接受许多不同的对象｡

07:30.640 --> 07:32.270
现在回到交换机部分,

07:32.270 --> 07:37.650
所需的情况是一种可能的情况, 我们还得到了我们要处理的肯定情况｡

07:37.650 --> 07:39.280
如果我们看到的属性大于0,

07:39.280 --> 07:43.770
我想返回true｡

07:43.770 --> 07:47.260
所以如果object prop大于零, 那么它返回true,

07:47.260 --> 07:50.463
否则返回false｡

07:52.890 --> 07:55.730
现在如果我们没有把它放到for块中,

07:55.730 --> 07:59.310
或者我们有一个循环, 因为我们没有注册任何验证器,

07:59.310 --> 08:10.280
所以我们在这里传递了一个空数组, 所以如果你把它放到for块中, 我也会返回true作为默认值.

08:10.280 --> 08:14.503
现在我们在所有情况下都返回一个值, 我们可以使用validate｡

08:15.450 --> 08:19.253
接下来, 让我们看看它是否工作, 如果我们现在保存它, 我们在这里重新加载我们的应用程序,

08:23.610 --> 08:26.330
我试图提交它, 我们得到一个错误, 无效的输入,

08:26.330 --> 08:29.400
请重试｡

08:29.400 --> 08:30.780
如果我在此输入一些文字：JavaScript完整指南,

08:30.780 --> 08:38.100
我仍然得到这个, 因为我的号码是错误的｡

08:38.100 --> 08:40.440
如果我在这里输入-1, 我们也会得到这个,

08:40.440 --> 08:42.020
因为它不是正数｡

08:42.020 --> 08:45.020
但是, 如果我输入一个正数, 它就会工作｡ 

08:45.020 --> 08:48.230
如果我有一个正数, 但第一个字段是空的, 那么这个方法也有效,

08:48.230 --> 08:52.190
所以这是我们需要解决的问题.

08:52.190 --> 08:54.600
让我们来看看问题出在哪里｡ 

08:54.600 --> 08:57.380
为了找到答案, 我在这里添加了一个控制台日志,

08:57.380 --> 09:00.720
记录我们正在查看的属性｡

09:00.720 --> 09:03.513
当然, 我们也可以使用断点和开发人员工具｡

09:04.820 --> 09:09.250
现在, 如果我单击此处的“保存”, 您会看到在此处得到验证的第一件事是价格,

09:09.250 --> 09:10.623
然后我们停止｡

09:11.530 --> 09:15.100
所以价格是第一个被验证的属性｡ 

09:15.100 --> 09:22.230
有趣的是, 价格是唯一重要的属性因为我们在validate中返回.

09:22.230 --> 09:25.840
这意味着, 当我们第一次发现任何返回true或false的验证器时,

09:25.840 --> 09:31.480
我们立即返回, 而不关心其他验证器｡

09:31.480 --> 09:33.320
在false的情况下, 这是可以的,

09:33.320 --> 09:37.450
因为如果一个元素是false, 如果一个属性是false, 是无效的,

09:37.450 --> 09:40.140
那么我们甚至不需要看其他的｡

09:40.140 --> 09:42.590
但对于真实的情况, 这是一个问题｡ 

09:42.590 --> 09:44.970
如果第一次有一个属性满足我们的期望时返回true,

09:44.970 --> 09:49.410
那么我们就有问题了｡

09:49.410 --> 09:51.540
所以我们应该在这里增加一个isValid属性来增强它,

09:51.540 --> 09:55.130
这个属性最初是真的｡

09:55.130 --> 09:56.780
是有效变量, 我是说｡ 

09:56.780 --> 10:01.780
这里我们设isValid等于isValid和这个,

10:03.857 --> 10:08.857
这里也一样, 设这个等于这个｡

10:09.570 --> 10:11.290
因此我们不会立即返回,

10:11.290 --> 10:14.750
而是更新isValid, 然后中断,

10:14.750 --> 10:16.700
以免失败.

10:16.700 --> 10:19.200
这样做的结果是, 在所有这些循环之后,

10:19.200 --> 10:22.710
isValid仍然是true, 但只要其中一个检查为false,

10:22.710 --> 10:27.530
由于JavaScript的工作方式, 整体的isValid值将为false,

10:27.530 --> 10:33.000
因为true与false组合将返回false｡

10:33.000 --> 10:36.020
然后我们应该返回isValid｡ 

10:36.020 --> 10:42.433
因此, 现在我们确保检查所有属性, 而不仅仅是JavaScript检查的第一个属性｡

10:43.320 --> 10:45.460
然而, 这不是我们唯一的问题,

10:45.460 --> 10:47.750
当我们查看如何注册验证器逻辑时,

10:47.750 --> 10:50.480
我们也有一个问题｡

10:50.480 --> 10:57.130
我总是用一个新的对象覆盖给定类名的已注册验证器｡

10:57.130 --> 11:01.630
相反, 我们应该在这里添加任何现有的验证器, 这样我们就不会这样做了｡

11:01.630 --> 11:04.140
例如, 我们有这样的spread操作符,

11:04.140 --> 11:08.130
它可以在注册的验证器上为类名获取任何现有的键值对,

11:08.130 --> 11:10.870
并在添加我们的键值对之前先添加它,

11:10.870 --> 11:14.413
当然也在下面｡

11:16.890 --> 11:18.733
现在, 如果我们保存它,

11:19.650 --> 11:21.980
然后返回到我们的应用程序｡

11:21.980 --> 11:24.150
如果我两个都空了, 我们就失败了｡ 

11:24.150 --> 11:26.280
如果我们输入了有效的价格, 但我们的标题无效,

11:26.280 --> 11:28.490
我们将失败｡

11:28.490 --> 11:31.510
如果两者都成立, 我们就成功了｡ 

11:31.510 --> 11:35.570
如果我们有一个有效的标题, 但没有价格, 我们失败了｡ 

11:35.570 --> 11:37.230
还带着负价格｡ 

11:37.230 --> 11:39.170
因此, 现在我觉得这看起来很好,

11:39.170 --> 11:46.670
这是我们第一个简单的实现, 它说明了这样一个验证器如何在TypeScript装饰器的帮助下工作｡

11:46.670 --> 11:49.150
请记住, 这里的所有内容, 所有的装饰器､

11:49.150 --> 11:53.590
验证函数和注册表, 都是隐藏的｡

11:53.590 --> 11:56.780
这可能是您正在开发的第三方库的一部分,

11:56.780 --> 12:01.300
当然, 其方式可能比您与最终用户共享的方式更复杂｡

12:01.300 --> 12:04.160
作为最终用户, 您只需导入这些内容,

12:04.160 --> 12:06.800
添加这些装饰器, 然后调用validate,

12:06.800 --> 12:11.763
这样您就可以非常方便地为类添加验证了｡
