WEBVTT

00:02.290 --> 00:04.300
ผู้บรรยาย: คุณเห็นการทำงานของ

00:04.300 --> 00:06.700
TypeScript และมีประโยชน์มาก

00:06.700 --> 00:10.570
ทำให้การเขียน Clean Code ง่ายขึ้นมาก

00:10.570 --> 00:14.060
TypeScript เพิ่มประเภทและข้อมูลที่สำคัญยิ่ง

00:14.060 --> 00:16.810
ด้วย Types เราต้องมีความชัดเจนมากขึ้นเกี่ยวกับวิธีการทำงานของสิ่งต่าง

00:16.810 --> 00:20.970
ๆ และเราสามารถหลีกเลี่ยงข้อผิดพลาดที่ไม่ยอมรับและไม่จำเป็นได้มากมายโดยใช้

00:20.970 --> 00:24.460
Types

00:24.460 --> 00:27.640
นอกจากนั้น เรายังสามารถใช้ IDE สมัยใหม่ของ

00:27.640 --> 00:31.070
IDE ซึ่งรองรับ Types ในตัว ซึ่งสามารถเลือกประเภทเหล่านี้ได้

00:31.070 --> 00:39.570
และช่วยให้เราเติมข้อความอัตโนมัติได้ดีขึ้นและมีข้อผิดพลาดในตัวซึ่งแสดงก่อนที่เราจะคอมไพล์โค้ดด้วยซ้ำ เพราะพวกมันเข้าใจ

00:39.570 --> 00:43.050
TypeScript ด้วย

00:43.050 --> 00:46.870
แต่นอกเหนือจาก Types และข้อดีมากมายที่เราได้รับเพียงอย่างเดียวจากการใช้

00:46.870 --> 00:49.660
Types เรายังได้รับคุณสมบัติอื่น ๆ ที่เพิ่มเข้ามาจาก

00:49.660 --> 00:51.410
TypeScript

00:51.410 --> 00:55.170
เราสามารถใช้คุณสมบัติจาวาสคริปต์รุ่นต่อไปบางอย่างซึ่งคุณสามารถเขียนและใช้ในไฟล์

00:55.170 --> 00:58.340
TypeScript ของเราได้ จากนั้นพวกมันจะถูกคอมไพล์เป็นโค้ด

00:58.340 --> 01:05.630
JavaScript เพื่อแก้ไขปัญหาที่แม้แต่ในเบราว์เซอร์รุ่นเก่า

01:05.630 --> 01:08.170
หากคุณรู้จัก Bevel ซึ่งเป็นเครื่องมือที่ช่วยให้เราทำสิ่งนั้นกับ

01:08.170 --> 01:11.120
Vanilla JavaScript ได้เช่นกัน มันก็คล้ายๆ กันนั่นแหละ

01:11.120 --> 01:14.680
เพิ่งสร้างไว้ใน TypeScript แล้ว

01:14.680 --> 01:21.773
เราสามารถใช้คุณสมบัติ JavaScript ที่ทันสมัยและยังคงสร้างและจัดส่งโค้ดที่ใช้งานได้ในเบราว์เซอร์รุ่นเก่าเช่นกัน

01:22.610 --> 01:25.210
TypeScript ยังเพิ่มคุณสมบัติบางอย่างที่

01:25.210 --> 01:26.930
TypeScript เท่านั้นที่เข้าใจ

01:26.930 --> 01:29.070
เช่น Interfaces และ Generics

01:29.070 --> 01:32.560
คุณสมบัติเหล่านี้เป็นคุณสมบัติที่คอมไพล์เป็น JavaScript

01:32.560 --> 01:35.360
แต่ไม่จำเป็นต้องทำเพราะเป็นคุณสมบัติที่ช่วยเราในระหว่างการพัฒนา

01:35.360 --> 01:42.200
ซึ่งให้ข้อผิดพลาดที่ชัดเจนขึ้นและช่วยให้เราหลีกเลี่ยงข้อผิดพลาดได้มากขึ้น

01:42.200 --> 01:47.950
ดังนั้นมันจึงเพิ่มคุณสมบัติเพิ่มเติมที่ด้านหน้านอกเหนือจากประเภทที่เราได้เรียนรู้ไปแล้ว

01:47.950 --> 01:50.900
นอกจากนี้ยังให้คุณสมบัติการเขียนโปรแกรมเมตาบางอย่างแก่เรา

01:50.900 --> 01:53.700
เช่น มัณฑนากร ซึ่งฉันมีโมดูลทั้งหมดในหลักสูตรนี้

01:53.700 --> 01:55.850
ซึ่งคุณจะได้เข้าใจว่ามัณฑนากรคืออะไร

01:55.850 --> 02:01.790
ทำไมพวกเขาถึงเป็นเมตาดาต้า และทำไมพวกเขาถึงน่าทึ่ง

02:01.790 --> 02:04.230
TypeScript alls สามารถกำหนดค่าได้สูง

02:04.230 --> 02:06.390
จนถึงตอนนี้เรายังไม่ได้กำหนดค่า

02:06.390 --> 02:12.510
แต่ฉันมีโมดูลทั้งหมดในหลักสูตรที่เราพูดถึงเฉพาะเกี่ยวกับคอมไพเลอร์และวิธีกำหนดค่า

02:12.510 --> 02:15.700
และคุณสามารถปรับแต่งได้อย่างละเอียดตามความต้องการของคุณ

02:15.700 --> 02:23.310
เพื่อทำให้เข้มงวดขึ้นหรือหลวมขึ้น และเพื่อให้มั่นใจว่ามันทำงานในลักษณะที่คุณต้องการให้ทำงาน

02:23.310 --> 02:26.790
และด้วย Modern Tooling ที่มี IDE ที่ทันสมัย คุณจะได้รับการสนับสนุนในโครงการที่ไม่ใช่

02:26.790 --> 02:30.610
TypeScript

02:30.610 --> 02:33.700
IDE ที่คุณเพิ่งเห็นคือรหัส Visual Studio ซึ่งให้การสนับสนุนที่ดีกว่าในไฟล์

02:33.700 --> 02:37.740
JavaScript ธรรมดา เนื่องจากสามารถใช้คุณสมบัติ TypeScript

02:37.740 --> 02:41.010
บางอย่างภายใต้ประทุนโดยที่คุณไม่ต้องใช้ TypeScript

02:41.010 --> 02:44.710
อย่างชัดแจ้ง

02:44.710 --> 02:47.640
นั่นเป็นกำไรฟรีที่คุณออกนอกกรอบเมื่อรับรู้ถึง

02:47.640 --> 02:52.020
TypeScript และเมื่อใช้เครื่องมือที่ทันสมัย

02:52.020 --> 02:57.460
มีเหตุผลมากมายในการใช้ TypeScript และนั่นอาจเป็นเหตุผลว่าทำไมคุณจึงเรียนหลักสูตรนี้

02:57.460 --> 03:03.663
ในหลักสูตรนี้ เราจะเรียนรู้ทีละขั้นตอน และเราจะเรียนรู้ทั้งหมดเกี่ยวกับคุณสมบัติที่น่าทึ่งที่เพิ่มเข้ามา
