WEBVTT

00:02.160 --> 00:05.070
-：今のところ､ webpack-devのサーバーは使っていません｡ 

00:05.070 --> 00:07.680
今､ 使うのはとても簡単なことですが｡ 

00:07.680 --> 00:10.030
パッケージだけでいいんです｡  json ファイルを開き､

00:10.030 --> 00:12.430
"lite-server" の代わりに

00:12.430 --> 00:17.380
"webpack-dev-server" を使用します｡

00:17.380 --> 00:20.020
そして､ ここでもう一度npm startを起動してみましょう｡ 

00:20.020 --> 00:21.560
これで､ ローカルホスト 8080

00:21.560 --> 00:23.610
で動作するサーバが起動し､ webpack

00:23.610 --> 00:28.330
のビルドワークフローが起動するのがわかると思います｡

00:28.330 --> 00:32.020
これで､ ローカルホスト8080にアクセスすると､ そこに私たちのプロジェクトが表示されるようになりました｡

00:32.020 --> 00:33.860
面白いのは､ コードの中で何かを変更した場合､

00:33.860 --> 00:35.510
例えば､ ここでERAコンソールログを調整すると､

00:35.510 --> 00:43.160
それが保存され､ この下を見てみると､ 再コンパイルされていることがわかります｡

00:43.160 --> 00:46.450
しかし､ リロードするとここのログが表示されません｡ また､ ソースタブで､

00:46.450 --> 00:47.860
webpackのソースタブで､

00:47.860 --> 00:51.920
app.に移動すると､ ログが表示されます｡

00:51.920 --> 00:51.920
ts､ ここにログが表示されない｡ 

00:51.920 --> 00:54.820
つまり､ 実際には正しいコードを読み込んでいなかったのです｡ 

00:54.820 --> 00:58.790
これは､ このバンドルを削除すればはっきりします｡  jsファイルはこちらです｡ 

00:58.790 --> 01:04.750
ところで､ dist フォルダが空のままなのは不思議ではありません｡ webpack-dev

01:04.750 --> 01:10.240
サーバモードでは､ バンドルはメモリ上にのみ生成されるので､ そこにあり､

01:10.240 --> 01:13.020
開発サーバによって読み込まれますが､

01:13.020 --> 01:18.490
実際には dist には書き込まれていません｡

01:18.490 --> 01:22.180
しかし､ 再読み込みすると､ このページもクラッシュするようになったことがおわかりいただけると思います｡

01:22.180 --> 01:24.050
さて､ ファイルがあると言いましたが､

01:24.050 --> 01:27.080
ないように見えますよね？

01:27.080 --> 01:32.120
今､ 私が言ったようにdistで欠落しています｡ もちろん､ dist/bundleからインポートしています｡

01:32.120 --> 01:32.120
jsとindexがあります｡

01:32.120 --> 01:36.810
htmlですが､ 確かにメモリ上に生成されていると信じていいでしょう｡

01:36.810 --> 01:41.640
ただ問題は､ 今のところ正しく配線されていないことです｡

01:41.640 --> 01:45.330
これをいじるには､ webpackに行く必要があります｡  コンフィグ jsファイルを作成し､

01:45.330 --> 01:50.330
outputで実際にpublicPathキーを追加し､ これを "dist.Path

01:50.350 --> 01:53.647
"に設定してください｡ これを保存して再起動すると､ リロードされ､

01:56.250 --> 02:00.670
ここに「こんにちは」と表示されるのがわかると思います｡

02:00.670 --> 02:05.320
ソースタブにも､ 正しい出力が表示されるようになりました｡

02:05.320 --> 02:06.580
ドットフォルダーでいくと､

02:06.580 --> 02:07.860
ソースアプリ｡ ts you see the console log statement.

02:07.860 --> 02:13.893
そして､ 今､ アプリにアクセスすると tsを削除すると､ 再構築され､ 今度はそこにコンソールのログ文が消えました｡

02:15.220 --> 02:26.520
これは webpack-dev サーバーが出力先の場所とインデックスとの相対的な位置を本当に理解するために必要な追加設定に過ぎません｡

02:26.520 --> 02:26.520
htmlファイルです｡ 

02:26.520 --> 02:29.910
なぜなら､ デフォルトでは webpack-dev

02:29.910 --> 02:34.030
サーバーはインデックスを提供するからです｡ htmlファイルは､ このスクリプトを実行したのと同じフォルダーに見つかります｡

02:34.030 --> 02:37.550
これは正しいのですが､ dist フォルダへの接続が正しく行われないため､

02:37.550 --> 02:42.030
webpack-dev サーバに publicPath でアセスの場所､

02:42.030 --> 02:48.040
つまりバンドルの場所を通知する必要があるのです｡

02:48.040 --> 02:48.040
jsファイルです｡ 

02:48.040 --> 02:50.960
さて､ 開発用サーバーを終了すると､

02:50.960 --> 02:53.790
開発モードで適用したい設定がもう一つあります｡

02:53.790 --> 02:56.080
そして､ エクスポートされたオブジェクトの上部でこれを行うことにします｡ 

02:56.080 --> 02:59.180
モードを "開発 "にする これは最終的にwebpackに､ ここでは開発用にビルドしていることを伝え､

02:59.180 --> 03:05.590
開発体験を向上させるために少ない最適化を行い､ デバッグをさらに容易にし､

03:05.590 --> 03:11.420
例えばより意味のあるエラーメッセージを与えることを意味します｡

03:11.420 --> 03:12.950
ですから､ 開発段階では､

03:12.950 --> 03:16.420
このキーもぜひ追加したいところです｡

03:16.420 --> 03:17.840
そして､ これとwebpack-devサーバーの設定により､

03:17.840 --> 03:20.110
完成した開発ワークフローが出来上がりました｡

03:20.110 --> 03:27.100
さて､ 本番では別の出力が必要なため､ このワークフローを少し調整する必要があります｡
