WEBVTT

00:02.170 --> 00:03.420
Istruttore: Allora, iniziamo.

00:03.420 --> 00:06.330
Come ho detto, qui creerò un'API REST di base, ma

00:06.330 --> 00:09.130
naturalmente si può costruire qualsiasi applicazione

00:09.130 --> 00:10.810
Node con o senza express e in

00:10.810 --> 00:13.780
qualsiasi modo con TypeScript, quindi questo è solo

00:13.780 --> 00:15.570
un esempio.

00:15.570 --> 00:18.990
Non siete limitati a questa applicazione specifica.

00:18.990 --> 00:21.560
Nella cartella src aggiungerò un'applicazione. ts, che sarà il punto

00:21.560 --> 00:23.060
di ingresso principale

00:23.060 --> 00:25.970
per l'avvio del server.

00:25.970 --> 00:29.530
E voglio importare qualcosa da Express, da questo

00:29.530 --> 00:31.203
framework Express.

00:32.970 --> 00:35.460
Ora probabilmente sapete come aggiungere Express

00:35.460 --> 00:37.890
qui e configurare un server web con Express.

00:37.890 --> 00:41.330
Importiamo Express con questa sintassi

00:41.330 --> 00:46.330
e poi possiamo eseguire Express come funzione.

00:46.380 --> 00:50.170
Otteniamo un oggetto app di questo tipo, sul quale possiamo chiamare

00:50.170 --> 00:53.750
listen per ascoltare su una certa porta le richieste in arrivo.

00:53.750 --> 00:56.120
Ora, questo funzionerebbe in un normale JavaScript,

00:56.120 --> 00:58.420
ma si vede già che sto ricevendo un errore.

00:59.540 --> 01:01.600
Ora mi viene anche suggerito

01:01.600 --> 01:03.500
il motivo di questo errore,

01:03.500 --> 01:06.290
perché require è una funzione che esiste

01:06.290 --> 01:10.100
in note. js, ma non nel lato browser.

01:10.100 --> 01:12.540
Ora in tsconfig. Non sto usando nessuna libreria

01:12.540 --> 01:16.640
speciale che supporti node. js, quindi in questi TypeScript

01:16.640 --> 01:18.120
non è a conoscenza di questa

01:18.120 --> 01:20.150
funzione generale che esiste

01:20.150 --> 01:22.900
in un nodo. ambiente js.

01:22.900 --> 01:27.140
Ora, per farlo funzionare, dobbiamo installare un tipo in più con "npm install

01:27.140 --> 01:30.220
--save-dev". Possiamo installare "@types/node" per

01:30.220 --> 01:32.410
installare tutti i tipi di cui abbiamo bisogno

01:32.410 --> 01:36.291
per lavorare con node. js Eseguiamo quindi questo

01:36.291 --> 01:39.460
comando e vediamo se ci aiuta.

01:39.460 --> 01:42.320
Sì, è stato fatto e l'errore è sparito.

01:42.320 --> 01:44.390
Ma forse hai anche visto che sull'app non ho

01:44.390 --> 01:46.680
ottenuto alcun completamento automatico.

01:46.680 --> 01:50.190
Inoltre non dà errore, ma se passiamo il mouse sull'applicazione vediamo

01:50.190 --> 01:52.410
che TypeScript non sa cosa c'è dentro.

01:52.410 --> 01:54.210
È di tipo "qualsiasi".

01:54.210 --> 01:56.530
Quindi probabilmente dovremmo installare

01:56.530 --> 01:59.930
più tipi e installare anche "@types/express" per installare

01:59.930 --> 02:02.410
i tipi specifici di express.

02:02.410 --> 02:04.320
E questo è uno schema che già conoscete.

02:04.320 --> 02:06.850
Abbiamo dato un'occhiata a questo aspetto nella sezione del corso

02:06.850 --> 02:08.350
dedicata alle librerie di terze parti.

02:08.350 --> 02:12.030
Vi ho anche mostrato come potete installare i pacchetti di tipi per ottenere

02:12.030 --> 02:15.220
un supporto migliore nei vostri script TypeScript.

02:15.220 --> 02:19.320
Quindi, con questo tipo aggiunto, senza alcuna configurazione

02:19.320 --> 02:22.030
aggiuntiva, non funziona ancora.

02:22.030 --> 02:23.140
Il motivo è la sintassi

02:23.140 --> 02:25.330
di importazione che stiamo usando.

02:25.330 --> 02:28.270
Questo è il normale comune. js importare la sintassi

02:28.270 --> 02:30.450
che nota. js per impostazione predefinita,

02:30.450 --> 02:33.660
ma qui siamo in un ambiente in TypeScript dove possiamo usare una

02:33.660 --> 02:36.140
sintassi di importazione diversa.

02:36.140 --> 02:38.230
Possiamo usare la stessa sintassi di importazione

02:38.230 --> 02:40.373
che conosciamo dai moduli ES nel browser.

02:41.240 --> 02:46.240
Quindi possiamo usare "import express da 'express'", ad esempio.

02:46.710 --> 02:48.620
Se lo facciamo e poi passiamo il mouse su "app", vediamo

02:48.620 --> 02:49.910
che ora è di tipo 'Express'.

02:49.910 --> 02:53.040
Ora abbiamo il supporto per TypeScript.

02:53.040 --> 02:54.569
Ora, una nota importante.

02:54.569 --> 02:58.790
In nota. js esiste anche una sintassi

02:58.790 --> 03:00.810
simile a questa.

03:00.810 --> 03:03.420
Ora è sotto un flag sperimentale

03:03.420 --> 03:06.190
e lo è da molto tempo, quindi si usa

03:06.190 --> 03:10.010
comunemente. js in nota. js è di gran lunga il metodo predefinito

03:10.010 --> 03:13.482
e più comune per aggiungere importazioni ed esportazioni.

03:13.482 --> 03:16.060
Una sintassi simile a questa è supportata se si

03:16.060 --> 03:18.380
imposta questo flag sperimentale, ma in

03:18.380 --> 03:19.990
questo codice non stiamo usando

03:19.990 --> 03:24.012
questo nodo sperimentale. sintassi js.

03:24.012 --> 03:26.209
Utilizziamo invece TypeScript.

03:26.209 --> 03:29.859
Una volta compilato in JavaScript, la situazione cambierà.

03:29.859 --> 03:31.860
E posso anche mostrarvelo,

03:31.860 --> 03:34.060
in modo da poterlo eseguire.

03:34.060 --> 03:36.230
Se si esegue "tsc" qui, magari

03:36.230 --> 03:40.330
"tsc-w" per entrare già in modalità watch, si vede che

03:40.330 --> 03:42.680
inizia la compilazione.

03:42.680 --> 03:44.110
Viene creata una cartella dist e al suo interno

03:44.110 --> 03:46.770
abbiamo un'applicazione. js e qui l'aspetto

03:46.770 --> 03:50.040
è diverso.

03:50.040 --> 03:54.500
In questo caso, l'importazione non è impostata come in

03:54.500 --> 03:55.710
questo caso.

03:55.710 --> 03:58.900
Utilizza invece una sintassi diversa.

03:58.900 --> 04:02.350
Questo è il codice che verrà eseguito.

04:02.350 --> 04:04.780
Possiamo eseguirlo con nodemon, uno strumento

04:04.780 --> 04:07.640
che riavvia automaticamente il server se il nostro

04:07.640 --> 04:09.470
codice viene modificato, aprendo

04:09.470 --> 04:12.230
una nuova scheda nel terminale.

04:12.230 --> 04:13.620
Teniamo aperta l'altra scheda,

04:13.620 --> 04:15.960
perché è il nostro processo di compilazione di TypeScript,

04:15.960 --> 04:18.760
e in questa nuova scheda vogliamo avviare il nostro server con

04:18.760 --> 04:20.095
l'aiuto di nodemon.

04:20.095 --> 04:22.990
Per questo, passiamo al pacchetto. json e aggiungiamo un

04:22.990 --> 04:26.260
nuovo script, magari uno script di avvio, in cui

04:26.260 --> 04:30.900
diciamo "nodemon dist/app. js", in modo che nodemon esegua

04:30.900 --> 04:34.200
questo file nella cartella dist e avvii il nostro

04:34.200 --> 04:36.360
server con quello.

04:36.360 --> 04:39.430
E con l'aggiunta di questo e del pacchetto. json salvato, possiamo eseguire

04:39.430 --> 04:43.240
npmstart per avviare il nostro server di sviluppo.

04:43.240 --> 04:47.710
E ora sta servendo questa applicazione dist. js Questa è la configurazione

04:47.710 --> 04:49.230
generale e TypeScript

04:49.230 --> 04:52.030
sta già facendo un po' di lavoro.

04:52.030 --> 04:53.940
Abbiamo anche TypeSupport.

04:53.940 --> 04:55.360
E qui si vede l'applicazione. Possiamo scrivere

04:55.360 --> 04:57.756
codice che ci sembra molto familiare con la sintassi

04:57.756 --> 05:01.420
di importazione/esportazione che già conosciamo, ma ciò che otteniamo come

05:01.420 --> 05:07.000
output è alla fine un normale nodo JavaScript.

05:07.000 --> 05:07.000
js

05:07.000 --> 05:09.640
ed è estremamente utile.

05:09.640 --> 05:12.140
Ora, facciamo cose più utili che

05:12.140 --> 05:15.003
avviare un server che non fa nulla.
