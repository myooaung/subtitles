WEBVTT

00:02.400 --> 00:04.390
Kursleiter: Wir haben also unser erstes Formular

00:04.390 --> 00:07.240
gerendert, aber Sie werden feststellen, dass das Styling ein bisschen

00:07.240 --> 00:09.200
daneben ist, ich meine, das Formular sieht ganz

00:09.200 --> 00:11.910
gut aus, aber etwas Abstand zwischen den Rändern unseres Bildschirms

00:11.910 --> 00:13.870
und dem Formular wäre schön.

00:13.870 --> 00:15.830
Wenn Sie in die App eintauchen. css-Datei werden

00:15.830 --> 00:18.360
Sie feststellen, dass wir dort einen Selektor

00:18.360 --> 00:21.050
für die Benutzereingabe-ID haben.

00:21.050 --> 00:23.330
Wenn wir einige Randabstände hinzufügen, klingt

00:23.330 --> 00:25.630
das gar nicht so schlecht, also können wir eigentlich

00:25.630 --> 00:28.060
eine App machen. ts, wenn wir unser Element

00:28.060 --> 00:31.740
hier erstellen oder wenn wir Zugang zu ihm erhalten.

00:31.740 --> 00:34.520
Wir können das Element erreichen und hier eine ID hinzufügen,

00:34.520 --> 00:36.840
die vom Benutzer eingegeben werden kann.

00:36.840 --> 00:39.740
Dadurch wird sichergestellt, dass das gerenderte Element diese

00:39.740 --> 00:42.800
ID hat, so dass es beim erneuten Laden viel schöner aussieht.

00:42.800 --> 00:45.100
Wenn wir uns das in der Browsertiefe ansehen,

00:45.100 --> 00:49.320
sehen wir hier die ID und das ist der Grund für dieses bessere Styling.

00:49.320 --> 00:51.940
Damit sind wir schon beim nächsten Schritt,

00:51.940 --> 00:54.010
wir interagieren mit dem Element.

00:54.010 --> 00:56.980
Das ist aber nicht die einzige Interaktion, die ich machen möchte.

00:56.980 --> 00:58.770
Da wir hier ein Formular haben, möchte

00:58.770 --> 01:01.870
ich Zugriff auf die verschiedenen Formulareingaben, die wir hier

01:01.870 --> 01:05.910
haben, damit wir die Werte lesen können, wenn das Formular abgeschickt wird, und dass

01:05.910 --> 01:08.800
wir auch dann einen Ereignis-Listener hier für die Übermittlung

01:08.800 --> 01:12.160
einrichten und die Benutzereingabe validieren.

01:12.160 --> 01:15.720
Wir benötigen also Zugriff auf die Schaltfläche oder das Formular insgesamt,

01:15.720 --> 01:19.180
um auf die Übermittlung zu warten, und auf alle Eingabeelemente, um die

01:19.180 --> 01:21.273
neuesten Werte von dort zu erhalten.

01:22.360 --> 01:25.440
Bevor wir alles anhängen, aber nachdem ich dem

01:25.440 --> 01:28.500
Element hier meine ID zugewiesen habe, möchte

01:28.500 --> 01:32.210
ich auf die verschiedenen Eingaben in diesem Element in

01:32.210 --> 01:35.980
diesem Formular zugreifen und sie als Eigenschaften dieser

01:35.980 --> 01:39.820
Klasse speichern, also füge ich weitere Felder hinzu, und

01:39.820 --> 01:44.570
das erste Feld könnte ein titleInputElement-Feld sein.

01:44.570 --> 01:47.167
Der Typ wird HTMLInputElement sein, und wir werden

01:48.060 --> 01:50.410
es nicht nur einmal brauchen, wenn wir zwei

01:50.410 --> 01:52.770
andere ähnliche Felder brauchen.

01:52.770 --> 01:55.900
Wir haben ein descriptionInputElement-Feld,

01:55.900 --> 01:57.550
das vom Typ HTMLInputElement

01:58.520 --> 02:02.730
ist, und wir brauchen auch ein peopleInputElement-Feld.

02:02.730 --> 02:06.240
Jetzt können wir diese Felder hier im Konstruktor mit diesem

02:06.240 --> 02:09.500
titleInputElement ausfüllen, das auf diesen Wert eingestellt

02:09.500 --> 02:11.510
ist. Element, so dass

02:11.510 --> 02:13.120
unser Formular-Element,

02:13.120 --> 02:16.390
immer im Auge behalten, dass das Formular-Element

02:16.390 --> 02:21.350
hier, Abfrage-Selektor und dann Abfrage für den Titel-Element.

02:21.350 --> 02:25.000
Und wenn Sie noch einmal einen Blick auf den Index werfen. html sehen wir, dass wir

02:25.000 --> 02:28.410
den ID-Titel für dieses Element haben, so dass

02:28.410 --> 02:30.420
wir danach suchen können,

02:30.420 --> 02:33.323
also in app. ts hier in der Abfrage-Selektor

02:33.323 --> 02:37.210
können wir #title verwenden, um für den Titel ID-Element auswählen und

02:37.210 --> 02:39.750
speichern, dass in titleInputElement.

02:39.750 --> 02:44.070
Wie Sie wissen, hat typescript, genau wie bei document get element by

02:44.070 --> 02:46.230
ID, keine Chance zu verstehen, dass

02:46.230 --> 02:49.090
der Abfrage-Selektor hier ein Eingabeelement

02:49.090 --> 02:50.650
zurückgeben wird.

02:50.650 --> 02:53.780
Um also typescript zu sagen, werde ich wieder Casting verwenden

02:53.780 --> 02:56.020
und dies in ein Eingabeelement umwandeln, und

02:56.020 --> 02:58.270
dann können wir diesen Schritt zweimal wiederholen

02:58.270 --> 03:00.672
und auch das descriptionInputElement und das

03:00.672 --> 03:03.240
peopleInputElement signieren.

03:03.240 --> 03:06.600
Schlagen Sie die entsprechenden IDs im Index nach. html-Datei, bei der es sich überraschenderweise

03:06.600 --> 03:10.390
um die Beschreibung und die Personen handelt, und fügen sie zu typescript

03:10.390 --> 03:12.190
hinzu.

03:12.190 --> 03:16.120
Hier suchen wir also nach dem ID-Element description und

03:16.120 --> 03:17.720
hier nach Personen.

03:17.720 --> 03:19.510
Und damit haben wir Zugriff auf all

03:19.510 --> 03:22.687
diese Elemente innerhalb unserer Klasse hier, oder innerhalb

03:22.687 --> 03:26.593
jedes Objekts, das auf der Grundlage der Klasse erstellt wird.

03:27.600 --> 03:29.870
Jetzt müssen wir nur noch einen Listener

03:29.870 --> 03:33.330
zu unserem Element, unserem Formular, hinzufügen.

03:33.330 --> 03:38.330
Dafür füge ich eine weitere private Methode configure hinzu, die Sie nicht hinzufügen

03:38.440 --> 03:39.790
müssen, aber auch hier

03:39.790 --> 03:43.130
möchte ich diese Trennung beibehalten, bei der wir im Grunde

03:43.130 --> 03:47.900
die Auswahl und die grobe Einrichtung im Konstruktor vornehmen.

03:47.900 --> 03:49.340
Und dann das Einfügen oder

03:49.340 --> 03:52.210
die Feinabstimmung in separaten Methoden.

03:52.210 --> 03:53.900
Und in der configure-Methode ist meine

03:53.900 --> 03:57.000
Idee, einen Ereignis-Listener einzurichten, so dass wir hier dieses

03:57.000 --> 03:58.970
Element, das das Formular ist, erreichen

03:58.970 --> 04:01.830
und einen Ereignis-Listener hinzufügen können.

04:01.830 --> 04:04.570
Da Typescript weiß, dass es sich bei diesem Element um

04:04.570 --> 04:08.580
ein HTML-Formular-Element handelt, bietet es uns die Autovervollständigung

04:08.580 --> 04:10.770
an, wenn wir auf das Submit-Ereignis hören

04:10.770 --> 04:12.250
wollen, was großartig ist.

04:12.250 --> 04:15.520
Jetzt müssen wir dies nur noch an eine Methode binden, und dafür

04:15.520 --> 04:17.840
füge ich eine weitere private Methode hinzu,

04:17.840 --> 04:20.650
privat, weil ich niemals von außerhalb der Klasse darauf

04:20.650 --> 04:23.460
zugreifen werde, nur von innerhalb.

04:23.460 --> 04:26.970
Die ich submitHandler nennen werde, Name ist völlig bis zu Ihnen.

04:26.970 --> 04:29.740
Dies sollte eine Methode sein, die ein Ereignisobjekt empfängt,

04:29.740 --> 04:32.750
weil wir es an diesen Ereignis-Listener binden werden.

04:32.750 --> 04:34.880
Hier können wir also auf Folgendes hinweisen...

04:36.460 --> 04:38.713
Handler einreichen.

04:40.180 --> 04:42.080
Jetzt passen wir sie an, um sicherzustellen,

04:42.992 --> 04:45.040
dass wir, bevor wir alle Aufrufe anhängen,

04:45.040 --> 04:46.730
diese private Methode konfigurieren

04:46.730 --> 04:50.500
und ausführen. Auch hier gilt, dass sie privat ist, so dass wir sie

04:50.500 --> 04:53.660
von innerhalb der Klasse natürlich erreichen können,

04:53.660 --> 04:56.000
von außerhalb würden Sie einen Typescript-Fehler

04:56.000 --> 04:59.290
erhalten.

04:59.290 --> 05:02.010
Im Submit-Handler möchte ich auf meine

05:02.010 --> 05:05.520
verschiedenen Eingabewerte zugreifen und sie validieren,

05:05.520 --> 05:07.710
und dann natürlich etwas mit den

05:07.710 --> 05:10.310
Eingaben machen.

05:10.310 --> 05:12.700
Um den Teil, in dem wir etwas tun, kümmern wir uns später,

05:12.700 --> 05:15.480
jetzt wollen wir uns erst einmal Zugang zu ihnen verschaffen.

05:15.480 --> 05:18.430
Dazu werde ich zunächst ein Ereignis aufrufen. preventDefault, um das

05:18.430 --> 05:20.620
standardmäßige Absenden des Formulars

05:20.620 --> 05:23.890
zu verhindern, was eine HTTP-Anfrage auslösen würde,

05:23.890 --> 05:25.820
die ich hier nicht haben will.

05:25.820 --> 05:28.270
Um zu sehen, wo das funktioniert, geben

05:28.270 --> 05:32.730
wir die Konsole aus. protokolliert diesen Wert des Titelelements,

05:32.730 --> 05:36.250
um den aktuellen Inhalt des Titeleingabeelements zu drucken.

05:36.250 --> 05:39.010
Wenn wir es gespeichert haben, sehen Sie, dass es sich ohne Fehler kompilieren

05:39.010 --> 05:40.560
lässt, es sieht also gut aus.

05:40.560 --> 05:44.670
Und wenn wir jetzt hier in die Konsole gehen und "Hallo! und klicken Sie auf Projekt hinzufügen, gut ist, dass es nicht eingereicht

05:44.670 --> 05:49.440
wurde, schlecht ist, dass wir eine Fehlermeldung erhalten, "Cannot read property

05:49.440 --> 05:51.657
'value' of undefined. Was läuft hier eigentlich schief?

05:51.657 --> 05:54.620
Das Problem hier ist, dass dieses Schlüsselwort in submitHandler nicht

05:54.620 --> 05:56.173
auf die Klasse selbst verweist.

05:57.730 --> 06:02.230
Warum?

06:02.230 --> 06:06.420
Nun, aufgrund der Art und Weise, wie JavaScript und Typescript funktionieren,

06:06.420 --> 06:07.760
binden wir die Methode

06:07.760 --> 06:11.770
hier an den Ereignis-Listener und wenn wir etwas an ein Ereignis oder

06:11.770 --> 06:14.680
mit Hilfe eines Ereignis-Listeners binden, dann

06:14.680 --> 06:17.480
ist das etwas, so dass die Methode, die ausgeführt

06:17.480 --> 06:19.740
werden soll, an etwas anderes gebunden

06:19.740 --> 06:24.210
ist, in diesem Fall an das aktuelle Ziel des Ereignisses.

06:24.210 --> 06:27.270
Das Ende dieser Methode wird also nicht auf

06:27.270 --> 06:31.060
die Klasse zeigen, wenn die Methode durch ein Ereignis

06:31.060 --> 06:35.130
mit einem Ereignis-Listener ausgelöst wird.

06:35.130 --> 06:38.150
Die Lösung besteht darin, bind hier auf submitHandler

06:38.150 --> 06:40.360
aufzurufen, um vorzukonfigurieren,

06:40.360 --> 06:43.980
wie diese Funktion ausgeführt werden soll, wenn sie in der

06:43.980 --> 06:46.949
Zukunft ausgeführt wird, und das erste Argument,

06:46.949 --> 06:52.880
das wir an bind übergeben können, ist das, worauf sich das Schlüsselwort this innerhalb der

06:52.880 --> 06:56.450
auszuführenden Funktion bezieht.

06:56.450 --> 06:59.760
Und hier übergebe ich this, was bedeutet, dass this

06:59.760 --> 07:02.920
innerhalb von submitHandler auf dasselbe verweist

07:02.920 --> 07:05.750
wie this in diesem Kontext.

07:05.750 --> 07:10.030
Und da wir es hier im Kontext von configure aufrufen, das wir mit

07:10.030 --> 07:13.660
diesem configure aufrufen, wird dieses Ende von configure

07:13.660 --> 07:17.500
auf die Klasse verweisen, und dank bind, wird es dort für

07:17.500 --> 07:19.880
alle, auch auf die Klasse verweisen

07:19.880 --> 07:22.870
endet aus dem submitHandler.

07:22.870 --> 07:24.830
Wenn Sie dies nun

07:24.830 --> 07:28.890
hier speichern, neu laden und

07:28.890 --> 07:30.743
"Hallo! "Hier sehen Sie nun

07:32.840 --> 07:33.673
"Hallo! " wird hier gedruckt, wenn

07:33.673 --> 07:35.600
wir das Formular abschicken.

07:35.600 --> 07:37.510
Jetzt ist das Problem also gelöst

07:37.510 --> 07:38.770
und wir können es richtig angehen.

07:38.770 --> 07:40.210
Aber vielleicht gibt es einen besseren

07:40.210 --> 07:43.650
Weg oder eine Alternative, von der wir alle schon erfahren haben.

07:43.650 --> 07:46.330
Vielleicht eine, die Dekoratoren verwendet,

07:46.330 --> 07:49.430
also hier ist deine Chance, dies wieder zu unterbrechen

07:49.430 --> 07:51.970
und zu versuchen, diese Bindung mit Dekoratoren

07:51.970 --> 07:54.300
zu lösen, denn das ist etwas, worüber wir

07:54.300 --> 07:57.900
im Abschnitt über Dekoratoren gelernt haben.
