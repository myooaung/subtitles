WEBVTT

00:02.200 --> 00:03.970
Instructeur : C'est tout pour ce module.

00:03.970 --> 00:06.080
Évidemment, le JavaScript moderne possède également quelques

00:06.080 --> 00:07.790
autres fonctionnalités intéressantes.

00:07.790 --> 00:09.810
Par exemple, je couvrirai les classes dans

00:09.810 --> 00:11.120
le module de cours et, en général,

00:11.120 --> 00:13.470
ce n'est pas un cours de JavaScript.

00:13.470 --> 00:16.540
Je ne veux pas vous ennuyer avec des tonnes de connaissances

00:16.540 --> 00:19.030
sur JavaScript qui ne concernent pas vraiment

00:19.030 --> 00:20.140
TypeScript.

00:20.140 --> 00:22.700
Je voulais mentionner ces fonctionnalités spécifiques

00:22.700 --> 00:24.650
car il est bon de savoir que TypeScript nous

00:24.650 --> 00:28.210
aide à utiliser ces fonctionnalités d'une manière qui fonctionne toujours dans

00:28.210 --> 00:29.580
les anciens navigateurs.

00:29.580 --> 00:32.920
Parce que c'est quelque chose que vous ne devez jamais oublier.

00:32.920 --> 00:35.600
Votre code est compilé.

00:35.600 --> 00:38.690
Actuellement, la cible est réglée sur ES6 et, par conséquent,

00:38.690 --> 00:41.540
si nous vérifions le dossier dist, nous voyons que les

00:41.540 --> 00:44.280
constantes sont toutes disponibles dans le fichier

00:44.280 --> 00:46.030
JS de l'application.

00:46.030 --> 00:48.070
La déstructuration des objets, il y a un

00:48.070 --> 00:50.600
moyen d'y parvenir car toutes ces fonctionnalités

00:50.600 --> 00:52.480
sont prises en charge par ES6.

00:52.480 --> 00:55.230
Si je fixe la cible à ES5 et que je commente lib maintenant,

00:55.230 --> 00:56.590
de sorte que les librairies

00:56.590 --> 00:58.680
correctes soient importées pour la cible

00:58.680 --> 01:00.930
ES5, ce qui se produira par défaut, vous verrez

01:00.930 --> 01:05.290
que le code généré a maintenant un aspect très différent.

01:05.290 --> 01:08.140
C'est beaucoup plus long, car nous utilisons maintenant var

01:08.140 --> 01:09.810
et TypeScript a dû trouver des solutions

01:09.810 --> 01:12.960
de contournement pour certaines syntaxes qui ne sont pas prises en

01:12.960 --> 01:14.730
charge par ES5 JavaScript.

01:14.730 --> 01:18.240
Par exemple, la syntaxe de déstructuration a été supprimée.

01:18.240 --> 01:21.140
C'est donc une chose importante qu'il faut toujours garder à l'esprit.

01:21.140 --> 01:23.490
TypeScript compile votre code, non seulement

01:23.490 --> 01:26.440
à partir des fonctionnalités TypeScript uniquement

01:26.440 --> 01:29.210
vers le JavaScript ordinaire, mais aussi de

01:29.210 --> 01:33.000
JavaScript moderne à JavaScript ancien si vous demandez à TypeScript

01:33.000 --> 01:35.433
de le faire.
