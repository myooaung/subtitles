WEBVTT

00:02.160 --> 00:04.930
Instrutor: Aqui está este mesmo exemplo basicamente

00:04.930 --> 00:06.440
em um projeto real.

00:06.440 --> 00:08.550
Você encontrará este projeto simples,

00:08.550 --> 00:11.270
o arquivo HTML índice e este arquivo JavaScript,

00:11.270 --> 00:13.340
anexado a este vídeo em um subfile.

00:13.340 --> 00:16.900
Você pode simplesmente abrir isto e depois abrir o arquivo HTML do índice.

00:16.900 --> 00:18.610
Você também pode abrir o código em

00:18.610 --> 00:20.890
qualquer editor de texto de sua escolha.

00:20.890 --> 00:22.160
Aqui eu estou usando VisualStudioCode,

00:22.160 --> 00:26.250
e voltarei à minha configuração exata mais tarde neste módulo.

00:26.250 --> 00:29.250
Por enquanto, você pode simplesmente abrir estes dois arquivos

00:29.250 --> 00:31.180
de texto com qualquer editor de texto.

00:31.180 --> 00:34.110
Agora o que você encontrará ali é este arquivo JavaScript,

00:34.110 --> 00:37.000
que interage com este arquivo HTML de índice.

00:37.000 --> 00:38.830
E então esse arquivo HTML indexado, você

00:38.830 --> 00:41.050
encontrará duas entradas e o botão e qualquer

00:41.050 --> 00:43.698
arquivo JavaScript que seja importado aqui.

00:43.698 --> 00:45.843
Basicamente, alcançamos esses elementos.

00:45.843 --> 00:47.968
Então temos uma função aqui e um ouvinte

00:47.968 --> 00:50.020
de eventos no botão que aciona a função

00:50.020 --> 00:53.830
e registra o resultado da função aqui no console.

00:53.830 --> 00:56.750
Agora, se simplesmente abrirmos esse arquivo HTML

00:56.750 --> 01:00.701
índice, clicando duas vezes sobre ele no Windows Explorer ou no Mac

01:00.701 --> 01:03.220
Finder para que ele se abra em um navegador,

01:03.220 --> 01:05.150
o que você verá é isto.

01:05.150 --> 01:07.250
As duas entradas e o botão de adicionar

01:07.250 --> 01:11.170
e aqui abri também as ferramentas de desenvolvimento do navegador.

01:11.170 --> 01:13.760
Agora, se você entrar 10 e cinco aqui, por exemplo,

01:13.760 --> 01:16.640
você pode esperar ver 15 como resultado aqui à direita,

01:16.640 --> 01:19.420
mas em vez disso você vê 105.

01:19.420 --> 01:23.460
E isto nos mostra uma fraqueza do JavaScript aqui.

01:23.460 --> 01:25.890
Isto não é um erro técnico.

01:25.890 --> 01:28.050
Não é um erro que é jogado,

01:28.050 --> 01:31.640
mas é um erro lógico em nossa aplicação.

01:31.640 --> 01:33.986
Mas de onde vem este erro?

01:33.986 --> 01:37.490
Bem aqui no JavaScript, eu alcanço estas duas entradas

01:37.490 --> 01:39.612
e quando o botão é clicado, no final

01:39.612 --> 01:41.920
eu recebo os valores dos dois elementos

01:41.920 --> 01:45.300
de entrada e os passo aqui para adicionar.

01:45.300 --> 01:46.970
E aqui é importante saber

01:46.970 --> 01:50.100
que em JavaScript quando você acessa o valor de

01:50.100 --> 01:53.130
um elemento de entrada, é sempre um fio.

01:53.130 --> 01:55.790
Sempre, não importa que tipo de insumo seja.

01:55.790 --> 01:59.633
Se este for do tipo número ou não, é sempre um fio.

02:00.645 --> 02:03.995
Então estou passando em duas cordas para esta função o final, e se você

02:03.995 --> 02:05.890
adicionar duas cordas em JavaScript,

02:05.890 --> 02:09.570
elas serão concatenadas em vez de adicionadas matematicamente.

02:09.570 --> 02:14.210
É por isso que vemos 105, 10 e cinco concatenados.

02:14.210 --> 02:17.090
Esta é a questão com JavaScript aqui.

02:17.090 --> 02:19.980
E isto é algo em que o TypeScript pode nos ajudar.

02:19.980 --> 02:22.360
Agora sem o TypeScript, é claro que

02:22.360 --> 02:24.380
poderíamos adicionar um if aqui

02:24.380 --> 02:28.048
e verificar se o tipo de número um é igual ao número.

02:28.048 --> 02:33.048
E se o tipo de número dois for igual a número, e se esse for o caso, então

02:34.030 --> 02:37.390
eu devolvo meu cálculo desta forma, caso contrário,

02:37.390 --> 02:40.588
posso lançar um erro ou pelo menos converter

02:40.588 --> 02:43.304
ambos em números adicionando um "plus"

02:43.304 --> 02:47.428
na frente de cada parâmetro aqui.

02:47.428 --> 02:50.510
Agora este é um código que poderíamos escrever.

02:50.510 --> 02:53.023
Talvez um pouco mais refinado do que isso em JavaScript.

02:53.023 --> 02:57.130
E com isso garantiríamos que converteríamos números ou as

02:57.130 --> 03:00.670
entradas em números, se ainda não forem números.

03:00.670 --> 03:02.430
Com isso, se eu recarregar

03:02.430 --> 03:05.220
isto e repetir isto, agora temos 15 por causa

03:05.220 --> 03:07.590
de nosso código alterado.

03:07.590 --> 03:09.350
Portanto, é claro que podemos fazer isso em JavaScript.

03:09.350 --> 03:10.970
E este é o JavaScript de baunilha,

03:10.970 --> 03:13.440
nada de TypeScript-ish sobre ele.

03:13.440 --> 03:16.640
Mas nós escrevemos algum código extra para um erro que eu realmente

03:16.640 --> 03:19.048
gostaria de evitar em primeiro lugar.

03:19.048 --> 03:22.210
Eu não quero que isso aconteça.

03:22.210 --> 03:26.260
Quero ter certeza de que não podemos nem mesmo passar aqui cordas para adicionar,

03:26.260 --> 03:28.930
porque adicionar deve ser uma função que só funciona

03:29.890 --> 03:31.020
com números.

03:31.020 --> 03:32.570
Para que ali não precisemos verificar

03:33.428 --> 03:35.650
se recebemos um número ou não.

03:35.650 --> 03:37.000
Portanto, quero manter esta função

03:37.000 --> 03:38.500
no estado em que se encontrava antes.

03:38.500 --> 03:41.630
Quero esta função aqui, exatamente como esta.

03:41.630 --> 03:44.003
E é aí que o TypeScript pode nos ajudar.

03:45.088 --> 03:45.921
Portanto, o TypeScript

03:45.921 --> 03:48.900
pode nos ajudar em situações como as que acabei de mostrar.

03:48.900 --> 03:52.690
Agora, para ver como isso nos ajuda, vamos instalá-lo.

03:52.690 --> 03:56.590
Portanto, em typescriptlang. org, você pode clicar em download.

03:56.590 --> 03:58.540
E lá você aprenderá como instalá-lo.

03:58.540 --> 04:00.250
E nós realmente o instalaremos

04:01.136 --> 04:02.880
com este comando que usa a ferramenta

04:02.880 --> 04:06.750
NPM e a ferramenta NPM é parte do pacote Node JS.

04:06.750 --> 04:10.210
Portanto, mesmo que não vamos escrever aqui o código Node JS, ainda

04:10.210 --> 04:12.910
precisamos instalar o Node JS simplesmente porque

04:12.910 --> 04:14.760
os bastidores também serão utilizados

04:14.760 --> 04:17.770
por algumas ferramentas que utilizamos.

04:17.770 --> 04:21.780
E quando instalamos o Node JS, também instalamos o NPM, o Node

04:21.780 --> 04:24.956
Package Manager, uma ferramenta que podemos usar

04:24.956 --> 04:29.200
para instalar o TypeScript globalmente em nossa máquina.

04:29.200 --> 04:31.452
Portanto, basta visitar nodejs. org e lá, instale

04:31.452 --> 04:34.220
a última versão que você encontrar aqui.

04:34.220 --> 04:35.723
Basta clicar neste botão.

04:36.586 --> 04:38.276
Em seguida, ele será baixado e instalado ou você poderá

04:38.276 --> 04:39.420
passar por esse instalador.

04:39.420 --> 04:42.360
É suportada por todos os sistemas operacionais.

04:42.360 --> 04:45.300
E uma vez instalado o Nodo JS, você será

04:45.300 --> 04:47.936
capaz de executar este comando.

04:47.936 --> 04:51.440
Basta abrir seu terminal normal ou prompt de comando

04:51.440 --> 04:54.800
e, em seguida, copiar nesse comando.

04:54.800 --> 04:57.223
Importante, em Mac e Linux, você pode precisar adicionar sudo

04:57.223 --> 04:59.412
em frente a isto para obter as permissões corretas.

04:59.412 --> 05:02.810
No Windows, isto não será necessário.

05:02.810 --> 05:05.100
Portanto, basta instalar o TypeScript

05:05.100 --> 05:06.810
com este comando.

05:06.810 --> 05:09.372
Digite sua senha no caso de ser solicitado.

05:09.372 --> 05:12.176
E com isso, você tem o TypeScript instalado globalmente

05:12.176 --> 05:15.430
em sua máquina, agora o que isso significa?

05:15.430 --> 05:17.696
TypeScript instalado.

05:17.696 --> 05:20.810
Agora lembre-se que o TypeScript é uma linguagem de programação,

05:20.810 --> 05:22.750
mas é apenas uma linguagem de programação

05:22.750 --> 05:25.212
que funciona porque também temos este compilador,

05:25.212 --> 05:28.137
esta ferramenta que se compila em JavaScript.

05:28.137 --> 05:31.310
Portanto, no final, o que instalamos aqui, é o compilador

05:31.310 --> 05:33.296
e tudo o que ele precisa saber

05:33.296 --> 05:36.116
para entender o código TypeScript para convertê-lo

05:36.116 --> 05:39.020
para JavaScript.

05:39.020 --> 05:41.036
Então, com isto, temos o compilador

05:41.036 --> 05:44.460
instalado e podemos executar agora o comando TSC que

05:44.460 --> 05:47.210
invoca este compilador TypeScript para compilar

05:47.210 --> 05:50.870
um arquivo TypeScript para JavaScript.

05:50.870 --> 05:54.140
Então, para ver isso neste projeto em que trabalhamos, vamos simplesmente adicionar

05:54.140 --> 05:56.563
um novo arquivo usando ts. ts, por exemplo.

05:56.563 --> 05:58.677
Qualquer nome que você queira, mas a extensão deve ser . ts, que

05:58.677 --> 06:03.677
significa TypeScript.

06:05.100 --> 06:07.651
Agora, vamos copiar esse código JavaScript

06:07.651 --> 06:09.850
para o arquivo TypeScript.

06:09.850 --> 06:13.100
Aqui no VisualStudioCode, eu recebo imediatamente alguns erros que

06:13.100 --> 06:14.280
agora vamos corrigir.

06:14.280 --> 06:16.379
E esta é uma grande vantagem do TypeScript.

06:16.379 --> 06:18.915
Se você estiver usando a IDE correta, e minha

06:18.915 --> 06:22.710
forte recomendação é realmente VisualStudioCode, e eu voltarei

06:22.710 --> 06:24.420
a isso mais tarde.

06:24.420 --> 06:27.810
Então você já obtém grande suporte na IDE ao trabalhar

06:27.810 --> 06:30.230
dentro de arquivos TypeScript.

06:30.230 --> 06:34.710
Aqui, já, ele basicamente deixa o TypeScript analisar meu código e identifica

06:34.710 --> 06:36.910
alguns pontos fracos.

06:36.910 --> 06:39.720
O que é ótimo, porque é exatamente isso que eu quero.

06:39.720 --> 06:42.110
Portanto, aqui neste exemplo, deixe-me excluir

06:42.110 --> 06:44.003
o arquivo JS somente em JavaScript.

06:45.952 --> 06:48.360
E com isso, alguns dos erros desapareceram porque

06:48.360 --> 06:50.539
identificou que algumas constantes e assim

06:50.539 --> 06:53.230
por diante foram usadas em múltiplos arquivos.

06:53.230 --> 06:55.787
Mas isso ainda me dá um erro lá embaixo.

06:55.787 --> 06:57.700
E o que você vê, por exemplo, é que não é certo

06:57.700 --> 07:00.108
se realmente existe uma propriedade de valor.

07:00.108 --> 07:03.200
Isso é um erro que eu nem mesmo considerei antes

07:03.200 --> 07:05.720
em JavaScript, mas é verdade.

07:05.720 --> 07:08.350
Estou selecionando um elemento por identificação aqui.

07:08.350 --> 07:11.680
Agora o TypeScript não pode saber se isto realmente vai funcionar.

07:11.680 --> 07:13.160
Talvez eu tenha uma gralha aqui dentro.

07:13.160 --> 07:15.940
Neste caso, eu não seria capaz de selecionar um elemento.

07:15.940 --> 07:17.704
Este elemento simplesmente não existiria na página.

07:17.704 --> 07:20.164
Portanto, podemos ter um erro de digitação e o TypeScript não analisa

07:20.164 --> 07:22.472
seu código HTML para descobrir se isso funciona.

07:22.472 --> 07:24.468
Portanto, por um lado, isto pode falhar.

07:24.468 --> 07:28.740
Mas mesmo que tenha sucesso e selecionamos um elemento lá, ele não precisa

07:28.740 --> 07:30.910
ser um elemento de entrada.

07:30.910 --> 07:34.720
Pode ser qualquer outro elemento e a maioria dos elementos HTML não tem

07:34.720 --> 07:37.450
uma propriedade de valor que você possa acessar.

07:37.450 --> 07:38.630
E isto já é ótimo.

07:38.630 --> 07:41.372
O TypeScript nos obriga a ser mais explícitos,

07:41.372 --> 07:44.060
a ser mais claros sobre nossas intenções e a verificar

07:44.060 --> 07:46.130
novamente nosso código.

07:46.130 --> 07:48.100
E por exemplo aqui, e você não precisa

07:48.100 --> 07:49.820
entender toda essa sintaxe.

07:49.820 --> 07:52.172
Aprenderemos passo a passo ao longo do curso.

07:52.172 --> 07:55.660
Mas, por exemplo, aqui poderíamos deixar o TypeScript saber que

07:55.660 --> 07:58.204
temos certeza de que obteremos um elemento ao adicionar

07:58.204 --> 08:00.080
um ponto de exclamação.

08:00.080 --> 08:04.170
Isto basicamente diz ao TypeScript que isto nunca renderá nulo.

08:04.170 --> 08:06.370
Isto sempre encontrará um elemento.

08:06.370 --> 08:08.420
E como desenvolvedor, é claro que eu sei

08:08.420 --> 08:10.350
que isto sempre encontrará um elemento

08:10.350 --> 08:11.920
porque eu verifiquei duas vezes

08:11.920 --> 08:14.763
o ID e vejo que sim, eu tenho esse ID aqui.

08:15.610 --> 08:17.270
Agora, além disso, também sei

08:17.270 --> 08:19.500
que será sempre um elemento de entrada.

08:19.500 --> 08:22.408
Assim, podemos usar como elemento de entrada HTML, uma

08:22.408 --> 08:25.470
sintaxe chamada typecasting, que também explicarei com

08:25.470 --> 08:27.746
mais detalhes mais adiante, para que o TypeScript

08:27.746 --> 08:30.327
saiba que tipo de elemento será este.

08:30.327 --> 08:32.926
Podemos aplicar isto também ao segundo elemento.

08:32.926 --> 08:35.650
Portanto, só para ser realmente claro aqui,

08:35.650 --> 08:37.510
esta é a sintaxe TypeScript.

08:37.510 --> 08:39.520
Eu posso usar este ponto de exclamação

08:39.520 --> 08:41.600
aqui e posso usar esta digitação aqui

08:41.600 --> 08:44.786
porque estamos em um . ts, estamos em um arquivo TypeScript.

08:44.786 --> 08:48.380
Vamos compilar isto para JavaScript.

08:48.380 --> 08:51.050
Isto não funcionaria no JavaScript de baunilha.

08:51.050 --> 08:53.427
Isto não está disponível ali.

08:53.427 --> 08:56.300
Com isso, somos obrigados a ser mais claros sobre nossas

08:56.300 --> 08:58.460
intenções e a pensar realmente em nosso código

08:58.460 --> 09:01.060
e verificá-lo duas vezes, o que é ótimo.

09:01.060 --> 09:03.160
Mas essa não é nem mesmo a maior vantagem.

09:04.270 --> 09:06.820
A maior vantagem é a adição de tipos.

09:06.820 --> 09:09.630
Afinal de contas, é isso que dá nome ao TypeScript.

09:09.630 --> 09:12.282
E aqui eu não estou dizendo nada sobre os tipos de dados

09:12.282 --> 09:14.204
sobre os quais esta função opera.

09:14.204 --> 09:17.886
Se pairarmos sobre um destes parâmetros, vemos

09:17.886 --> 09:20.126
aqui qualquer coisa.

09:20.126 --> 09:22.828
E no final, este é o TypeScript que nos diz: "Eu

09:22.828 --> 09:24.880
não sei o que está lá dentro". Pode ser de qualquer tipo de valor.

09:24.880 --> 09:27.162
Agora podemos adicionar um tipo mais explícito em arquivos TypeScript.

09:27.162 --> 09:31.960
Portanto, não em arquivos JavaScript, mas em arquivos TypeScript, adicionando dois pontos

09:31.960 --> 09:33.806
aqui e especificando o tipo.

09:33.806 --> 09:38.580
Por exemplo, o número.

09:38.580 --> 09:40.730
Fazendo isto aqui e fazendo isto aqui.

09:40.730 --> 09:43.300
Com esta sintaxe extra que o TypeScript,

09:43.300 --> 09:45.246
que este compilador entende, estamos

09:45.246 --> 09:47.928
dizendo ao TypeScript que este aqui será do

09:47.928 --> 09:50.960
tipo número e este será do tipo número.

09:50.960 --> 09:54.010
E, portanto, agora temos aqui novamente um erro.

09:54.010 --> 09:56.126
E não nos limitamos a receber este

09:56.126 --> 09:58.060
erro na IDE, a propósito.

09:58.060 --> 09:59.370
Também o obtemos se tentarmos

09:59.370 --> 10:01.940
compilar este código porque é isso que precisamos

10:01.940 --> 10:03.820
fazer, certo?

10:03.820 --> 10:05.326
Agora, para compilar isto, vou abrir um terminal.

10:05.326 --> 10:08.670
E aqui estou apenas abrindo meu terminal ou prompt de comando

10:08.670 --> 10:10.760
que está integrado a esta IDE.

10:10.760 --> 10:13.683
É o prompt de comando regular do sistema.

10:14.947 --> 10:16.530
O terminal de comando do sistema regular

10:16.530 --> 10:18.110
que eu estava usando aqui também, já

10:18.110 --> 10:19.533
navegava para esta pasta.

10:20.510 --> 10:22.446
Portanto, se você não estiver

10:22.446 --> 10:27.420
usando algum terminal IDE embutido, você pode usar seu terminal normal,

10:27.420 --> 10:30.265
mas o CD navega na pasta de início extraída,

10:30.265 --> 10:33.960
onde você adicionou seu arquivo TypeScript.

10:33.960 --> 10:36.300
E uma vez que você esteja nessa pasta, você pode executar o TSC.

10:36.300 --> 10:38.888
Isso irá invocar este compilador TypeScript

10:38.888 --> 10:42.980
que instalamos anteriormente, usando traços. ts.

10:42.980 --> 10:47.980
E se você executar isto, você realmente receberá um erro.

10:47.990 --> 10:50.728
Você ainda receberá um arquivo JavaScript,

10:50.728 --> 10:53.267
porque por padrão o TypeScript ainda o

10:53.267 --> 10:57.460
compilará para JavaScript, você também aprenderá como suprimir

10:57.460 --> 11:00.050
isto mais tarde naquele curso.

11:00.050 --> 11:02.900
Mas isso lhe dá um erro de compilação enquanto o faz.

11:02.900 --> 11:05.904
Ele lhe diz que o argumento da cadeia de caracteres

11:05.904 --> 11:09.070
não é atribuível ao parâmetro do número do tipo.

11:09.070 --> 11:13.128
Então o problema aqui é que o TypeScript entende que o que obtemos

11:13.128 --> 11:16.550
sobre a propriedade de valor de nosso elemento de

11:16.550 --> 11:18.930
entrada será uma cadeia.

11:18.930 --> 11:23.130
Vemos isto também aqui na IDE.

11:23.130 --> 11:24.786
E não podemos passar isto para acrescentar

11:24.786 --> 11:28.130
porque lá, não queremos um fio, queremos um número.

11:28.130 --> 11:31.026
Portanto, temos que consertar isto, por exemplo, convertendo

11:31.026 --> 11:33.600
isto para um número aqui, adicionando um plus.

11:33.600 --> 11:36.790
E assim que fizermos isso, poderemos compilar

11:36.790 --> 11:39.708
novamente este código repetindo esse comando

11:39.708 --> 11:42.406
e agora ele se compila sem erros.

11:42.406 --> 11:45.225
Isto nos dá isto usando o TypeScript. JavaScript e agora ele mostra alguns erros

11:45.225 --> 11:49.030
novamente porque não entende

11:49.030 --> 11:50.690
que nunca usará os dois arquivos

11:50.690 --> 11:53.090
ao mesmo tempo aqui.

11:54.028 --> 11:55.373
Mais uma vez, tudo isto é algo que vai melhorar

11:56.466 --> 11:58.530
mais tarde no curso, uma vez que configurarmos isto.

11:58.530 --> 12:00.428
Podemos ignorar isto por enquanto.

12:00.428 --> 12:01.261
Por isso, ele me dá este arquivo.

12:02.588 --> 12:04.348
E se abrirmos isto, vemos algo interessante aqui dentro.

12:04.348 --> 12:06.210
Vemos que lá, é claro, nossos tipos desapareceram.

12:06.210 --> 12:08.690
Esta peça fundida aqui desapareceu.

12:08.690 --> 12:11.280
Temos novamente o JavaScript de baunilha.

12:11.280 --> 12:13.308
Portanto, se dermos uma olhada em nosso arquivo TypeScript

12:13.308 --> 12:16.250
aqui, vemos que ali temos todas estas adições agradáveis.

12:16.250 --> 12:18.786
Mas, como mencionei, estes são apenas recursos TypeScript.

12:18.786 --> 12:22.130
Quando você compila para JavaScript, eles são usados para avaliar

12:22.130 --> 12:24.600
seu código e para encontrar possíveis erros,

12:24.600 --> 12:26.770
mas depois são removidos e obtemos o JavaScript

12:26.770 --> 12:29.090
como saída regular.

12:29.090 --> 12:33.960
Assim, agora podemos ir para nosso arquivo HTML de

12:33.960 --> 12:37.010
índice e importar usando ts. js e isso é importante.

12:37.010 --> 12:41.230
Sempre importe arquivos JavaScript porque

12:41.230 --> 12:43.550
o navegador não pode executar TypeScript.

12:43.550 --> 12:45.990
Precisamos importar o resultado de nossa compilação.

12:45.990 --> 12:49.480
E agora com isso, se recarregamos isto, temos nosso código

12:49.480 --> 12:52.108
de trabalho porque agora, temos o código JavaScript

12:52.108 --> 12:55.750
adequado onde resolvemos este problema lançando nossas

12:55.750 --> 12:57.970
entradas antes de passá-las para a

12:59.410 --> 13:01.110
função.

13:01.110 --> 13:03.010
Mas conseguimos resolver estes problemas

13:03.986 --> 13:06.087
por causa de nossas anotações do tipo aqui.

13:06.087 --> 13:08.100
E como você viu, tivemos que escrever algumas

13:08.100 --> 13:10.720
outras partes do código também de uma maneira mais limpa.

13:10.720 --> 13:13.220
E é por isso que o TypeScript é incrível.

13:13.220 --> 13:15.400
Isso nos obriga a escrever melhor, mais

13:15.400 --> 13:17.880
limpo e menos propenso a erros de código.
