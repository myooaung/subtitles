WEBVTT

1
00:00:02.230 --> 00:00:05.130
<v Lecturer>So now we want to get our entered text here</v>

2
00:00:05.130 --> 00:00:07.960
from the NewTodo component to the app component.

3
00:00:07.960 --> 00:00:09.690
Why to the app component?

4
00:00:09.690 --> 00:00:11.160
Because that is our component

5
00:00:11.160 --> 00:00:13.610
that has a direct link to both the NewTodo

6
00:00:13.610 --> 00:00:16.340
as well as the TodoList component.

7
00:00:16.340 --> 00:00:19.320
So, here I want to add a new function

8
00:00:20.800 --> 00:00:24.560
and I'll name it todoAddHandler,

9
00:00:24.560 --> 00:00:25.393
the name is up to you,

10
00:00:25.393 --> 00:00:27.990
I just like to use that convention of having handler

11
00:00:27.990 --> 00:00:31.390
at the end if it's a function that triggers upon an event.

12
00:00:31.390 --> 00:00:34.330
And in here I expect to get the text,

13
00:00:34.330 --> 00:00:37.970
as a string, it's our function so we can expect this.

14
00:00:37.970 --> 00:00:40.720
And I then we want to add this as a todo here.

15
00:00:40.720 --> 00:00:42.270
Now, of course, since you know React

16
00:00:42.270 --> 00:00:45.230
you know updating this array alone won't do the trick,

17
00:00:45.230 --> 00:00:47.440
this won't re-render this component

18
00:00:47.440 --> 00:00:49.360
so we'll have to use some state management here

19
00:00:49.360 --> 00:00:51.900
to make this work, before we do that however,

20
00:00:51.900 --> 00:00:53.040
lets make sure that at least

21
00:00:53.040 --> 00:00:54.750
we get the value to this function.

22
00:00:54.750 --> 00:00:57.460
So let's log the text here and then we can focus

23
00:00:57.460 --> 00:01:00.133
on its state management part as a second step.

24
00:01:01.000 --> 00:01:03.020
To get that here we need to make sure

25
00:01:03.020 --> 00:01:05.850
that this todoAddHandler function

26
00:01:05.850 --> 00:01:09.050
can be called from inside the NewTodo component

27
00:01:09.050 --> 00:01:12.113
because that is where we do add the todo in the end.

28
00:01:13.090 --> 00:01:15.370
Now, how do we make this function here

29
00:01:15.370 --> 00:01:17.860
callable from inside this component?

30
00:01:17.860 --> 00:01:22.300
We pass a pointer at this function to that component.

31
00:01:22.300 --> 00:01:25.640
So, here we could add a property name, onAddTodo,

32
00:01:25.640 --> 00:01:27.280
and you can name it how ever you want,

33
00:01:27.280 --> 00:01:28.560
I just name it like this

34
00:01:28.560 --> 00:01:32.030
because this basically will happen upon an event,

35
00:01:32.030 --> 00:01:34.600
an event which we control of course, but still.

36
00:01:34.600 --> 00:01:38.030
And here I want to forward todoAddHandler

37
00:01:38.030 --> 00:01:40.600
so I pass a pointer at this function,

38
00:01:40.600 --> 00:01:42.120
I'm not executing it here,

39
00:01:42.120 --> 00:01:44.620
I just pass a pointer to this function,

40
00:01:44.620 --> 00:01:49.240
into onAddTodo so that instead of NewTodo

41
00:01:49.240 --> 00:01:52.230
on props, which we can get here,

42
00:01:52.230 --> 00:01:56.220
we can call this, so that we can call props.onAddTodo here

43
00:01:56.220 --> 00:01:59.640
and forward the entered text, that's the idea,

44
00:01:59.640 --> 00:02:01.730
But, of course, TypeScript doesn't like this

45
00:02:01.730 --> 00:02:03.440
because it doesn't know that there will be

46
00:02:03.440 --> 00:02:06.180
a onAddTodo prop on our props here

47
00:02:06.180 --> 00:02:08.240
and how such a prop would look like.

48
00:02:08.240 --> 00:02:11.670
So, just like in TodoList, we have to set up a interface

49
00:02:11.670 --> 00:02:14.540
or simply a type definition of our props.

50
00:02:14.540 --> 00:02:18.200
So, let's go to NewTodo and maybe, again,

51
00:02:18.200 --> 00:02:20.820
add a interface, you could also add a type of course

52
00:02:20.820 --> 00:02:23.060
and I will do that here to mix things up.

53
00:02:23.060 --> 00:02:25.380
I typically would always go for a interface

54
00:02:25.380 --> 00:02:27.660
but using a type is also fine.

55
00:02:27.660 --> 00:02:30.493
So, to use a type here we can name it NewTodoProps

56
00:02:31.357 --> 00:02:33.820
and the type is a object type

57
00:02:33.820 --> 00:02:36.830
where I wanna have a onAddTodo prop

58
00:02:36.830 --> 00:02:39.120
and this, in turn, will be a function type,

59
00:02:39.120 --> 00:02:40.753
it will point at a function.

60
00:02:41.720 --> 00:02:44.290
You will define function types like this, as you learnt,

61
00:02:44.290 --> 00:02:46.760
it will be a function that doesn't return anything

62
00:02:46.760 --> 00:02:48.850
but which expects one perimeter

63
00:02:48.850 --> 00:02:51.410
and that will be the text the user entered.

64
00:02:51.410 --> 00:02:54.023
So, the Todo text which is of type string,

65
00:02:55.120 --> 00:02:57.123
that's what this function expects.

66
00:02:58.920 --> 00:03:01.770
Now, let's set this on this generic type here

67
00:03:01.770 --> 00:03:03.103
and point at NewTodoProps.

68
00:03:04.510 --> 00:03:08.620
And with that, we can call onAddTodo and pass in a string.

69
00:03:08.620 --> 00:03:11.470
And if it would try to pass in a number here, for example,

70
00:03:11.470 --> 00:03:14.730
we, of course, would get an error because we clearly defined

71
00:03:14.730 --> 00:03:17.590
that the argument has to be a string up there.

72
00:03:17.590 --> 00:03:18.733
So, let's revert this.

73
00:03:20.550 --> 00:03:24.630
With that, if we enter a new goal again,

74
00:03:24.630 --> 00:03:27.150
finish it in one month,

75
00:03:27.150 --> 00:03:28.690
we again see a log here

76
00:03:28.690 --> 00:03:30.750
but now it's coming from the app component,

77
00:03:30.750 --> 00:03:34.170
as you can clearly tell, because we added this log here.

78
00:03:34.170 --> 00:03:37.380
So this communication between the NewTodo component

79
00:03:37.380 --> 00:03:39.480
and the app component here works.

80
00:03:39.480 --> 00:03:42.750
And with that, let's implement some state management here

81
00:03:42.750 --> 00:03:44.160
and, again, this is also something

82
00:03:44.160 --> 00:03:46.850
you can try on your own first if you want to,

83
00:03:46.850 --> 00:03:49.670
to make sure that we render todos in state

84
00:03:49.670 --> 00:03:52.170
so that whenever we update our todos

85
00:03:52.170 --> 00:03:54.460
we also re-render this component.

86
00:03:54.460 --> 00:03:56.263
Let's do that in the next lecture.

