WEBVTT

00:02.802 --> 00:04.030
講師：クラスについて説明しましたが､

00:04.030 --> 00:05.910
次はインターフェースについて説明します｡

00:05.910 --> 00:09.510
app ts ファイルをclassesにリネームして､ 新たにapp tsファイルを追加し､

00:09.510 --> 00:13.730
一方､ 以下はapp jsにコンパイルすることにします｡

00:13.730 --> 00:15.130
そして､ このapp tsファイルでは､

00:15.130 --> 00:17.026
これからインターフェースに飛び込んでいきます｡

00:17.026 --> 00:19.850
インターフェースとは何ですか？

00:19.850 --> 00:21.640
さて､ 最も単純なバージョンでは､

00:21.640 --> 00:25.470
インターフェースはオブジェクトの構造を記述します｡

00:25.470 --> 00:28.502
オブジェクトがどのように見えるべきかを表現するために使うことができる｡ 

00:28.502 --> 00:29.856
一例をお見せしましょう｡ 

00:29.856 --> 00:32.990
このキーワードはタイプスクリプトにのみ存在し､

00:32.990 --> 00:37.510
バニラJavaScriptには存在しない｡

00:37.510 --> 00:39.600
では､ 人物に名前をつけてみましょう｡ 

00:39.600 --> 00:41.140
ここでも授業と同じように､

00:41.140 --> 00:43.150
大文字から始めます｡ 必ずやらなければならないことではなく､

00:43.150 --> 00:46.820
推奨することであり､ 慣習なのです｡

00:46.820 --> 00:51.160
ここで､ 人物オブジェクトがどのように見えるかを定義することができます｡

00:51.160 --> 00:52.480
しかし､ クラスとは異なり､

00:52.480 --> 00:54.930
これを設計図として使用することはありません｡

00:54.930 --> 00:57.543
ただ､ カスタムタイプとして､ 言えることです｡ 

00:58.490 --> 01:00.690
ここで､ 人は文字列型の名前と､

01:00.690 --> 01:04.300
数値型の年齢を持つことができると言える｡

01:04.300 --> 01:05.140
このように､

01:05.140 --> 01:08.020
プロパティやフィールドの定義を追加し､

01:08.020 --> 01:13.440
プロパティの名前と､ そこに格納される値の型を指定します｡

01:13.440 --> 01:16.560
ここにないのは､ 具体的な価値観です｡ 

01:16.560 --> 01:17.730
だから､ これはないんです｡ 

01:17.730 --> 01:20.510
また､ ここでデフォルト値を代入しようとすると､

01:20.510 --> 01:25.290
インターフェースはイニシャライザを持てないというエラーが発生します｡

01:25.290 --> 01:29.610
だから､ 具体的な値ではなく､ 構造だけを定義すればいいのです｡

01:29.610 --> 01:32.930
ここでメソッドを追加することもできます｡ 例えば greet です｡ 

01:32.930 --> 01:34.470
さて､ プロパティと同様に､

01:34.470 --> 01:37.440
ここでは実際のメソッドを追加するのではなく､

01:37.440 --> 01:41.020
いわば構造､ 説明を追加するだけです｡

01:41.020 --> 01:42.670
どのように見えるか｡ 

01:42.670 --> 01:46.600
そして､ personオブジェクトが持つべきメソッドを定義するために､

01:46.600 --> 01:50.920
メソッド名､ 括弧､ return typeの順に追加していく｡

01:50.920 --> 01:55.310
例えば､ 白とか､ 括弧の中には好きな引数を入れることができます｡

01:55.310 --> 01:57.740
型であるはずのフレーズとか｡ 

01:57.740 --> 02:01.920
ここでも引数の名前と､ それから型だけです｡ 

02:01.920 --> 02:03.610
次に､ そのメソッドの戻り値の型｡ 

02:03.610 --> 02:06.450
もちろん､ パラメータを追加する必要はありません｡ 

02:06.450 --> 02:09.080
この人物インターフェースを使って､ 今何ができるのか｡ 

02:09.080 --> 02:11.360
その背景にはどのような考え方があるのでしょうか｡ 

02:11.360 --> 02:12.610
さて､ これを利用して､ 例えば､

02:12.610 --> 02:14.810
オブジェクトのタイプチェックを行うことができます｡

02:14.810 --> 02:22.620
ユーザー1という変数があって､ 何らかの理由ですぐに初期化しなかったとします｡

02:22.620 --> 02:28.490
最終的には､ この構造を持つオブジェクトを格納したいだけです｡

02:28.490 --> 02:31.830
次に､ ユーザー1にタイプを割り当てますが､ これは人かもしれません｡

02:31.830 --> 02:34.604
私たちのインターフェイスを型として使うことができるのです｡ 

02:34.604 --> 02:38.410
そして今､ ユーザー1に値を割り当てるとき､ それはオブジェクトでなければなりません｡

02:38.410 --> 02:42.780
なぜなら､ インターフェースはオブジェクトを定義するために使われるからです｡

02:42.780 --> 02:45.560
そして､ nameプロパティには文字列を､

02:45.560 --> 02:47.190
ageプロパティには数値を､

02:47.190 --> 02:49.850
greetメソッドにはフレーズを引数に取り､

02:49.850 --> 02:56.920
さらに何も返さないオブジェクトである必要があります｡

02:56.920 --> 02:57.830
このオブジェクトの中で､

02:57.830 --> 02:59.360
名前を追加することができます｡

02:59.360 --> 03:00.730
例えば､ マックス｡ 

03:00.730 --> 03:03.010
ここで､ 具体的な値を追加しますが､

03:03.010 --> 03:06.310
これは上で定義した型である必要があります｡

03:06.310 --> 03:08.160
カンマで区切られているのが､

03:08.160 --> 03:11.110
インターフェイスの定義との違いです｡

03:11.110 --> 03:16.110
そこで､ キーとプロパティをセミコロンで区切っています｡ 

03:16.470 --> 03:18.430
しかし､ その下にあるオブジェクトを作成するときには､

03:18.430 --> 03:21.390
バニラJavaScriptと同じようにカンマを使用します｡

03:21.390 --> 03:25.570
それから年齢､ もちろん挨拶回りも｡ 

03:25.570 --> 03:27.550
さて､ greetメソッドは､

03:27.550 --> 03:33.790
学んだように､ fraseという1つのパラメータを取るメソッドでなければなりません｡

03:33.790 --> 03:41.134
fraseは文字列でなければなりません｡

03:41.134 --> 03:41.134
という名前を付けます｡ 

03:41.210 --> 03:43.930
これは､ greetメソッドの1つの実装と言えるかもしれません｡ 

03:43.930 --> 03:45.670
今は中身はどうでもいいんです｡ 

03:45.670 --> 03:49.270
重要なのは､ この1つのパラメータ（文字列）を持っていることと､

03:49.270 --> 03:51.290
何も返さないことです｡

03:51.290 --> 03:54.090
これで､ このインターフェイスの定義を満たすので､

03:54.090 --> 03:58.150
有効なユーザー1オブジェクトになります｡

03:58.150 --> 03:59.040
ですから､ もちろん､

03:59.040 --> 04:00.940
例えばgreetに電話して､ hi

04:00.940 --> 04:06.220
there, I amと言えば､ それ以降､ 名前を表示することができます｡

04:06.220 --> 04:08.300
これを保存して再読み込みすると､ 「こんにちは､

04:08.300 --> 04:10.330
私はマックスです｡

04:10.330 --> 04:12.840
そして､ それは私たちのグリーティングメソッドからきています｡ 

04:12.840 --> 04:14.090
これはインターフェースです｡ 

04:14.090 --> 04:18.280
これにより､ オブジェクトの構造を定義することができます｡ 

04:18.280 --> 04:24.453
この構造を持たなければならないオブジェクトの型チェックに使うことができるのです｡
