WEBVTT

00:02.280 --> 00:04.510
教师：与您刚刚学习的访问修饰符有关,

00:04.510 --> 00:06.483
是另一个修饰符｡

00:07.572 --> 00:09.590
这是只读修饰符｡ 

00:09.590 --> 00:11.310
假设我们有某些字段,

00:11.310 --> 00:14.220
它们不应该只是私有或公共的,

00:14.220 --> 00:18.130
它们在初始化后也不应该更改｡

00:18.130 --> 00:21.410
例如, ID此后不应更改｡ 

00:21.410 --> 00:25.670
为了清楚地表明它不应更改, 您也可以在此处添加readonly｡

00:25.670 --> 00:27.890
你也可以把它加在这里｡ 

00:27.890 --> 00:30.920
所以在这里您也应该写入private readonly｡ 

00:30.920 --> 00:33.990
现在readonly关键字, 就像private和public一样,

00:33.990 --> 00:37.920
是由TypeScript引入的, 它在JavaScript中并不存在｡

00:37.920 --> 00:39.910
它会确定如果您在之后尝试写入它的属性,

00:39.910 --> 00:43.180
就会失败｡

00:43.180 --> 00:45.690
所以你只能在初始化时使用它一次,

00:45.690 --> 00:48.620
但之后, 比如说addEmployee,

00:48.620 --> 00:54.200
不管什么原因, 我试图把id改为d2, 你看, 我们在这里得到一个错误,

00:54.200 --> 00:57.790
我不能给id赋值, 因为它是只读的｡

00:57.790 --> 01:00.800
因此, 这增加了一些额外的安全性,

01:00.800 --> 01:04.160
使它真正清楚地表明, 某个属性只应初始化一次,

01:04.160 --> 01:10.240
此后不应更改, 这是对对象中某些属性的经常要求｡

01:10.240 --> 01:12.630
因此, 这可以再次添加额外的类型安全,

01:12.630 --> 01:14.910
并使您的意图非常明确｡

01:14.910 --> 01:16.320
当然, 你可以说,

01:16.320 --> 01:20.470
我是写代码的人, 我不会做任何我不想做的事情｡

01:20.470 --> 01:24.630
好吧, 在定义代码时, 非常清楚地定义代码还是很好的｡

01:24.630 --> 01:28.320
因为首先, 如果你暂停代码工作几个星期, 你可能会忘记你想做什么,

01:28.320 --> 01:32.270
或者不管是什么, 其次, 你可能在一个团队中工作,

01:32.270 --> 01:36.550
或者与其他人共享你的代码｡

01:36.550 --> 01:39.390
一般来说, 编写清晰明确的代码,

01:39.390 --> 01:42.460
使您的意图非常明确是一个好主意｡

01:42.460 --> 01:44.280
而readonly可以在这方面对你有所帮助,

01:44.280 --> 01:47.230
因为它让你的目标非常清楚｡

01:47.230 --> 01:49.570
如果我们看一下app. js, 正如我提到的, 我们既看不到private也看不到public,

01:49.570 --> 01:53.050
也看不到read only, 因为这些都只存在于TypeScript中,

01:53.050 --> 01:57.610
而不存在于JavaScript中｡

01:57.610 --> 02:01.420
我们还看到了一些不同的东西, 这也很有趣,

02:01.420 --> 02:06.490
方法被添加到了我们的构造函数的原型中｡

02:06.490 --> 02:08.830
现在, 你需要知道什么是原型,

02:08.830 --> 02:12.520
在这门课上介绍原型有点太多了｡

02:12.520 --> 02:14.140
附件中提供了一些资源,

02:14.140 --> 02:16.070
您可以在其中深入了解原型｡

02:16.070 --> 02:18.490
它是JavaScript的一个重要部分,

02:18.490 --> 02:26.490
尤其是在我们有类之前的JavaScript, 如果你是一个JavaScript开发人员, 理解原型并没有什么坏处｡

02:26.490 --> 02:29.030
在这里, 我不会深入探讨它们, 因为这是一个纯JavaScript主题,

02:29.030 --> 02:33.020
而不是特定于TypeScript的｡

02:33.020 --> 02:34.150
事实上, 在TypeScript中,

02:34.150 --> 02:38.780
我们通常较少使用原型, 因为我们可以使用类做更多的事情｡

02:38.780 --> 02:42.560
与此相关的是, 我们得到了另一个重要的类概念,

02:42.560 --> 02:43.503
继承｡
