WEBVTT

00:02.300 --> 00:04.180
Istruttore: Abbiamo iniziato con

00:04.180 --> 00:05.960
le basi dei nomi, continuiamo su

00:05.960 --> 00:08.460
questa strada e dividiamole in più file.

00:08.460 --> 00:11.090
Per questo, la gestione dello stato del progetto.

00:11.090 --> 00:13.610
Potremmo inserire anche questo in un file separato.

00:13.610 --> 00:16.050
Quindi prenderò tutto, compresa

00:16.050 --> 00:20.600
la creazione dell'istanza di stato del progetto, tagliandola

00:20.600 --> 00:24.250
dall'applicazione. ts e creare un nuovo file,

00:24.250 --> 00:27.060
project-state. ts.

00:27.060 --> 00:29.685
Spostatelo qui e, come prima, inseritelo

00:29.685 --> 00:32.070
in uno spazio dei nomi.

00:32.070 --> 00:35.400
Namespace app, il nome è importante, deve essere App perché

00:35.400 --> 00:38.090
è lì che si trova il resto del codice.

00:38.090 --> 00:40.440
Mettete tutto qui dentro e ora, cosa importante,

00:40.440 --> 00:43.560
esportate anche ciò che vi serve al di fuori di questo

00:43.560 --> 00:46.120
file, che in questo caso è la classe projectstate,

00:46.120 --> 00:48.830
che ci serve nel resto della nostra applicazione,

00:48.830 --> 00:51.500
e anche questa costante laggiù, che dobbiamo

00:51.500 --> 00:53.880
esportare.

00:53.880 --> 00:57.060
Non è necessario esportare l'ascoltatore e nemmeno lo

00:57.060 --> 00:59.430
stato, perché entrambi sono utilizzati

00:59.430 --> 01:01.480
solo in questo file e quindi non devono

01:01.480 --> 01:02.823
essere esportati.

01:03.700 --> 01:06.860
Ora dobbiamo importare il nostro projectstate. ts, quindi

01:06.860 --> 01:09.540
in App. ts, è tempo di un'altra importazione lassù.

01:09.540 --> 01:13.290
Progetto dash state, proprio così.

01:13.290 --> 01:16.620
Se lo salviamo, dovrebbe essere compilato senza errori.

01:16.620 --> 01:19.480
Ora, continuerò e anche la parte di validazione potrebbe

01:19.480 --> 01:21.460
essere inserita in un file separato,

01:21.460 --> 01:23.960
quindi prenderò tutto questo, creerò un nuovo

01:23.960 --> 01:26.890
file, validazione. ts, aggiungere lo spazio

01:26.890 --> 01:30.760
dei nomi App, inserire la mia logica di validazione ed esportare

01:30.760 --> 01:33.560
l'interfaccia validatable e tutte le funzioni

01:33.560 --> 01:36.706
di devalidate qui, ovviamente.

01:36.706 --> 01:39.566
E poi, in App. Come sapete, torniamo qui in

01:39.566 --> 01:41.700
cima e aggiungiamo un'importazione alla

01:41.700 --> 01:43.513
convalida. ts.

01:45.160 --> 01:49.823
Ora, anche il decoratore può essere spostato in un file separato.

01:49.823 --> 01:54.410
Decoratore di dash autobind. ad esempio.

01:54.410 --> 01:58.863
Di nuovo, aggiungiamo lo spazio dei nomi con il nome App, inseriamo

01:58.863 --> 02:01.950
la funzione ed esportiamola, ovviamente, per

02:01.950 --> 02:04.820
renderla disponibile anche al di fuori di questo

02:04.820 --> 02:08.430
file e poi qui in app. ts, è il momento di un'altra importazione

02:08.430 --> 02:12.633
in cui importare il decoratore dash autobind. ts.

02:14.840 --> 02:16.484
Ora abbiamo altre cose da esportare,

02:16.484 --> 02:19.240
il nostro componente e tutte queste classi.

02:19.240 --> 02:21.205
Voglio avere ogni classe in un file separato,

02:21.205 --> 02:25.440
in modo che ogni file sia relativamente piccolo e facile da gestire.

02:25.440 --> 02:28.280
Ora, però, ci troviamo di fronte a un nuovo problema.

02:28.280 --> 02:30.385
Aggiungiamo sempre più file allo

02:30.385 --> 02:33.934
stesso livello e, per ora, sto usando il trattino per fornire

02:33.934 --> 02:37.800
qualche suggerimento o aiuto su cosa c'è nel file, il decoratore

02:37.800 --> 02:42.330
autobind dash ci mostra che probabilmente c'è un decoratore.

02:42.330 --> 02:44.300
Qui, probabilmente, abbiamo delle interfacce.

02:44.300 --> 02:46.246
Qui, un modello e così via.

02:46.246 --> 02:49.070
Ora, se avete solo tre o quattro file,

02:49.070 --> 02:52.010
va benissimo, ma se avete più file, vi ritroverete

02:52.010 --> 02:55.276
con una struttura di cartelle molto difficile

02:55.276 --> 02:57.430
da capire.

02:57.430 --> 03:00.056
Quindi mi piace creare delle sottocartelle.

03:00.056 --> 03:02.697
Aggiungerò una sottocartella decorators, vi

03:02.697 --> 03:05.830
sposterò il mio decoratore autobind e lo rinominerò solo

03:05.830 --> 03:09.260
autobind, perché è già nella cartella decorators.

03:09.260 --> 03:11.720
Naturalmente c'è un decoratore.

03:11.720 --> 03:14.440
Poi, aggiungerò la cartella dei modelli e, in realtà,

03:14.440 --> 03:17.523
qui sposterò sia le interfacce di trascinamento che il modello

03:17.523 --> 03:19.355
del progetto, semplicemente perché

03:19.355 --> 03:21.763
penso che le interfacce di trascinamento alla

03:21.763 --> 03:24.187
fine siano solo definizioni di come dovrebbero

03:24.187 --> 03:27.263
apparire le classi trascinabili e rilasciabili.

03:27.263 --> 03:29.910
Così come il modello di progetto è la definizione di come deve

03:29.910 --> 03:31.630
apparire una classe di progetto o come deve

03:31.630 --> 03:33.655
apparire il nostro oggetto di progetto.

03:33.655 --> 03:38.530
Quindi chiamerò questo drag and drop e questo qui solo progetto

03:38.530 --> 03:42.610
e poi aggiungerò una cartella util per utility e vi aggiungerò

03:42.610 --> 03:44.860
la mia validazione e poi una cartella

03:44.860 --> 03:49.690
state e vi aggiungerò lo stato del progetto.

03:49.690 --> 03:52.400
Qui manterrò il nome project-state solo per evitare confusione

03:52.400 --> 03:55.300
con questo progetto. file ts qui.

03:55.300 --> 03:56.716
Tecnicamente non sarebbe un

03:56.716 --> 03:59.216
problema, ma voglio che sia chiaro anche in questo

03:59.216 --> 04:00.990
corso, in modo che sia più facile capire

04:00.990 --> 04:02.640
in quale file sto lavorando.

04:02.640 --> 04:07.320
Si potrebbe sicuramente rinominare questo progetto in "solo progetto". qui se si volesse.

04:07.320 --> 04:09.662
Ora, con questa rifattorizzazione e queste sottocartelle,

04:09.662 --> 04:12.069
ovviamente le nostre importazioni qui sono rotte,

04:12.069 --> 04:14.010
quindi dovremmo sistemarle.

04:14.010 --> 04:17.366
Le interfacce di trascinamento si trovano nella cartella dei modelli e ora si

04:17.366 --> 04:21.216
chiamano semplicemente trascinamento. ts.

04:21.216 --> 04:25.630
Anche il modello del progetto si trova nella cartella models e ora si

04:25.630 --> 04:28.560
chiama solo project. ts.

04:28.560 --> 04:31.100
Lo stato del progetto si trova nella cartella

04:31.100 --> 04:34.040
state, la validazione si trova nella cartella util

04:34.040 --> 04:36.896
e il decoratore autobind si trova in decorators

04:36.896 --> 04:39.860
e si chiama semplicemente autobind.

04:39.860 --> 04:42.547
Con questo, se lo salviamo, si compila senza errori

04:42.547 --> 04:44.128
e ora abbiamo una struttura

04:44.128 --> 04:47.290
di cartelle più gestibile e leggibile, direi.

04:47.290 --> 04:50.500
Con questo, continuiamo, non abbiamo finito.

04:50.500 --> 04:52.130
Abbiamo qui il nostro componente;

04:52.130 --> 04:54.813
ora aggiungerò una sottocartella components

04:54.813 --> 04:59.813
e lì voglio avere il mio file ts del componente dash di base e poi il mio file

05:00.210 --> 05:05.210
ts dell'elemento del progetto, il mio file ts dell'elenco del progetto

05:07.600 --> 05:12.110
e anche il file ts dell'input del progetto.

05:12.110 --> 05:14.430
Naturalmente si può sempre organizzare il tutto in modo

05:14.430 --> 05:17.631
diverso, ma credo che in questo modo i file correlati rimangano uniti.

05:17.631 --> 05:22.253
Quindi possiamo prendere la classe base del componente astratto, tagliarla

05:23.830 --> 05:27.023
dall'app ts e spostarla nel componente base.

05:29.610 --> 05:33.180
In questo modo e, naturalmente, come prima,

05:33.180 --> 05:37.810
aggiungerlo in uno spazio dei nomi con il nome App.

05:37.810 --> 05:41.120
E poi spostarlo in questo spazio dei nomi.

05:41.120 --> 05:43.890
Naturalmente, lo regolerò prima di doverlo esportare, in

05:43.890 --> 05:46.171
modo da poterlo utilizzare in un altro file.

05:46.171 --> 05:49.800
L'altro file, tuttavia, non sarà app. perché anche i file o le

05:49.800 --> 05:53.044
classi in cui ho utilizzato il componente

05:53.044 --> 05:54.910
saranno spostati.

05:54.910 --> 05:56.856
La classe dell'elemento di progetto qui, per esempio, la

05:56.856 --> 06:00.164
prendo e la sposto nell'elemento di progetto. ts, per essere precisi,

06:00.164 --> 06:04.550
aggiungerò anche un namespace app e lo sposterò nel namespace

06:04.550 --> 06:06.680
app e poi esporterò anche questa

06:06.680 --> 06:09.060
classe.

06:09.060 --> 06:11.413
Ora, è importante, questo si basa sul componente e l'altro,

06:12.310 --> 06:14.740
se ora lo salvassi, otterremmo un errore che il componente non

06:14.740 --> 06:16.497
viene trovato alla fine, quindi qui abbiamo

06:16.497 --> 06:19.353
di nuovo bisogno di aggiungere questa importazione dove abbiamo il percorso

06:19.353 --> 06:24.772
di riferimento uguale e poi qui è base-component.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
Si tratta sempre di un'importazione relativa, quindi,

06:27.330 --> 06:29.130
dato che si trova nella stessa cartella,

06:29.130 --> 06:32.320
non dobbiamo dire components slash qui, perché non abbiamo bisogno

06:32.320 --> 06:34.608
di andare prima nella cartella components questo

06:34.608 --> 06:37.300
file, il file degli elementi del progetto, si trova già

06:37.300 --> 06:38.729
nella cartella components, quindi

06:38.729 --> 06:40.617
relativamente a questo file il componente

06:40.617 --> 06:44.913
di base viene importato semplicemente usando il suo nome qui.

06:46.060 --> 06:48.030
Ora il progetto è qui.

06:48.030 --> 06:51.963
Ora, naturalmente, nell'app. ts, abbiamo anche l'elenco dei progetti.

06:55.940 --> 07:00.662
Prendiamolo, spostiamolo nel file ts dell'elenco dei progetti qui e lì

07:00.662 --> 07:04.940
in uno spazio dei nomi App, e poi anche qui in input progetto prendiamo

07:04.940 --> 07:07.050
questo, tagliamolo da qui, dallo

07:08.010 --> 07:14.480
spazio dei nomi App nell'applicazione.

07:14.480 --> 07:14.480
e

07:14.480 --> 07:17.097
spostarlo nel file ts di input del progetto e

07:17.097 --> 07:19.857
lì in uno spazio dei nomi dell'applicazione.

07:20.750 --> 07:24.350
Ora, come prima, è importante esportare questa classe qui, l'elemento

07:24.350 --> 07:27.550
di progetto e anche l'elenco di progetto, naturalmente, tutto

07:27.550 --> 07:30.200
deve essere esportato; con questo otteniamo un mucchio

07:30.200 --> 07:31.580
di errori perché, naturalmente,

07:31.580 --> 07:34.343
mancano ancora le importazioni.

07:35.200 --> 07:39.930
In app. Dovremmo importare tutti questi componenti ora, quindi dovremmo

07:39.930 --> 07:42.934
importare project-input. ts, elenco

07:42.934 --> 07:47.380
dei progetti. e salvare il tutto.

07:47.380 --> 07:50.240
Ora, naturalmente, si blocca ancora perché mancano

07:50.240 --> 07:51.087
altre cose: in

07:51.087 --> 07:53.192
project-input usiamo il componente

07:53.192 --> 07:55.541
proprio come in project list, quindi, proprio

07:55.541 --> 07:57.780
come abbiamo fatto in project item, dobbiamo

07:57.780 --> 08:00.091
aggiungere l'importazione del componente

08:00.091 --> 08:02.920
di base nel file ts di project input e anche nel file

08:02.920 --> 08:05.790
ts di project list.

08:05.790 --> 08:08.665
E con questo, compila senza errori e vediamo

08:08.665 --> 08:10.880
se funziona anche, se ricarichiamo

08:10.880 --> 08:15.118
qui e aggiungo questo, è trascinabile e rilasciabile

08:15.118 --> 08:16.540
e tutto sembra funzionare

08:16.540 --> 08:19.480
come dovrebbe e ora dividiamo questo in

08:19.480 --> 08:22.340
più file.

08:22.340 --> 08:23.978
Alla fine otteniamo ancora un

08:23.978 --> 08:26.010
file, ma quando lavoriamo sul nostro

08:26.010 --> 08:28.110
codice, ora è molto più gestibile.

08:28.110 --> 08:30.978
Perché abbiamo file più piccoli e mirati dove possiamo

08:30.978 --> 08:33.829
trovare rapidamente ciò che stiamo cercando e dove

08:33.829 --> 08:36.358
non dobbiamo scorrere un file enorme per trovare

08:36.358 --> 08:39.363
il punto su cui vogliamo lavorare.
