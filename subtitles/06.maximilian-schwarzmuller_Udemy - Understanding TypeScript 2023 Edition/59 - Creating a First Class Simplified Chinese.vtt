WEBVTT

00:02.270 --> 00:04.620
老师：为此, 我为你们准备了一个小的入门项目｡

00:04.620 --> 00:05.610
你会发现它附在你身上｡ 

00:05.610 --> 00:08.810
这是我们一次又一次使用的同一个起始项目｡

00:08.810 --> 00:12.080
您使用npm-start启动开发服务器,

00:12.080 --> 00:19.830
然后我在一个单独的终端中使用tsc-w以监视模式启动TypeScript编译｡

00:19.830 --> 00:22.890
在我的内置终端中有两个选项卡｡ 

00:22.890 --> 00:26.070
一个是开发服务器, 您应该让它保持正常运行,

00:26.070 --> 00:27.670
以便它监视更改和重新加载页面,

00:27.670 --> 00:35.530
并使服务器保持正常运行, 另一个选项卡是正在运行的TypeScript编译监视器｡

00:35.530 --> 00:39.400
现在, 我们可以在应用程序中工作｡

00:39.400 --> 00:39.400
ts文件,

00:39.400 --> 00:41.520
现在是空的, 开始写一些代码,

00:41.520 --> 00:45.603
我想马上开始定义一个我们可以使用的类｡

00:46.490 --> 00:49.420
我们通过使用class关键字来实现这一点,

00:49.420 --> 00:51.340
就像这样, 然后是类名,

00:51.340 --> 00:54.030
假设我们正在构建一个应用程序,

00:54.030 --> 00:56.880
一个Web应用程序, 一个用于某个Web工具的用户界面,

00:56.880 --> 01:04.100
它允许我们管理公司中可能存在的不同部门｡

01:04.100 --> 01:05.770
也许我们正在构建某种公司内部工具,

01:05.770 --> 01:11.290
无论它是什么, 我们需要有多个部门在那里｡

01:11.290 --> 01:16.320
现在, 我们可以使用对象来管理不同部门的数据,

01:16.320 --> 01:19.960
然后, 我们还可以在每个对象中添加方法,

01:19.960 --> 01:33.000
以便将部门信息呈现到屏幕上, 并简化这些不同部门对象（看起来都相同）的创建, 即创建一个部门类｡

01:33.000 --> 01:35.690
所以我们可以把这个类命名为Department｡ 

01:35.690 --> 01:36.830
名字完全取决于你｡ 

01:36.830 --> 01:42.720
约定是它以大写字符开头, 以清楚地表明这是一个类｡

01:42.720 --> 01:45.670
如果你在JavaScript开发上有很长时间了,

01:45.670 --> 01:56.980
你可能知道构造函数的概念, 你可以说, 类最终是语法上的糖, 但是我们在编译代码时会看到这一点｡

01:56.980 --> 01:59.220
这里有我们的类Department,

01:59.220 --> 02:02.080
这里有一个name属性.

02:02.080 --> 02:04.010
你可以像这样直接在类中添加它,

02:04.010 --> 02:07.290
前面没有let或者const,

02:07.290 --> 02:12.550
当然你也可以给它赋值.

02:12.550 --> 02:14.690
你可以在这里加一个冒号,

02:14.690 --> 02:17.920
然后输入字符串, 这很重要.

02:17.920 --> 02:21.150
这可能看起来像一个对象, 但它不是一个对象｡ 

02:21.150 --> 02:25.520
在物件中, 您可以使用含有冒号的索引键-值组来取得索引键名称,

02:25.520 --> 02:27.000
然后取得索引键的值｡

02:27.000 --> 02:28.810
在这里, 情况并非如此｡ 

02:28.810 --> 02:32.250
这就是所谓的场的一个类｡ 

02:32.250 --> 02:34.680
你也用花括号创建了一个类,

02:34.680 --> 02:39.120
但这里不是键值对, 这只是定义了一个键值的名字,

02:39.120 --> 02:48.530
你将在基于类创建的对象中拥有这个键值, 你定义了这个键值最后将拥有的值类型｡

02:48.550 --> 02:52.363
您也可以在此处使用= 'DEFAULT'设置初始值,

02:53.840 --> 02:55.920
但您不需要这样做｡

02:55.920 --> 02:59.050
在类中, 另一个常见的东西是一个特殊的函数,

02:59.050 --> 03:03.410
一个所谓的方法.

03:03.410 --> 03:06.780
对象中的函数被简单地称为方法,

03:06.780 --> 03:09.410
即构造函数方法｡

03:09.410 --> 03:12.500
我们可以这样添加它, 这是一个保留字｡ 

03:12.500 --> 03:18.390
构造函数是TypeScript和现代JavaScript都能理解的保留关键字,

03:18.390 --> 03:29.640
它本质上是一个绑定到该类的函数, 并绑定到基于类创建的任何对象, 该类在创建对象时执行｡

03:29.640 --> 03:35.700
所以这基本上允许你为你正在构建的对象做一些初始化工作｡

03:35.700 --> 03:38.280
现在在那里你可以接受一个论点｡ 

03:38.280 --> 03:41.910
我们把它命名为n, 也可以是string类型,

03:41.910 --> 03:49.050
然后你想把它存储在这里的name字段里, 或者你可以用this关键字访问name,

03:49.050 --> 03:51.200
然后把n存储在里面｡

03:51.200 --> 03:55.200
它的作用是将name字段的值, 也称为name属性的属性so,

03:55.200 --> 04:04.550
设置为创建department对象时在n上得到的值｡

04:04.550 --> 04:07.030
现在, 我们如何创建这样一个部门对象？

04:07.030 --> 04:08.890
没有比这更容易的了｡ 

04:08.890 --> 04:16.200
在类的外部, 你用new关键字创建了这个类, 它也内置在TypeScript和JavaScript中,

04:16.200 --> 04:22.440
然后你重复这个类的名字, 然后你加上括号, 这将创建一个新的department对象,

04:22.440 --> 04:29.620
但是这个构造函数在这个时候被调用, 当你用new关键字执行这个类的时候, 这里的构造函数接受一个参数,

04:29.620 --> 04:33.440
一个字符串.

04:33.440 --> 04:35.600
现在你把构造函数参数传递给这个部门调用,

04:35.600 --> 04:39.800
在这些括号之间.

04:39.800 --> 04:41.640
这里我们可以将其命名为Accounting,

04:41.640 --> 04:44.730
因为我们可能在这里建立了会计部门.

04:44.730 --> 04:49.800
这将基于此蓝图创建一个新的JavaScript对象｡

04:49.800 --> 04:53.910
现在我们可以将其存储在一个常量中, 例如,

04:53.910 --> 04:58.010
然后控制台｡ 记录｡  会计来看看我们能得到什么｡ 

04:58.010 --> 04:59.620
如果我们现在保存它,

04:59.620 --> 05:03.780
然后返回到这里的页面, 在def工具中查看开发控制台,

05:03.780 --> 05:07.930
我们应该在这里保存Department对象｡

05:07.930 --> 05:10.000
这是一个常规JavaScript对象,

05:10.000 --> 05:15.290
只是附加了Department类型, 最终它是一个具有一个键-值对的对象,

05:15.290 --> 05:23.110
其中键是name, 因为这是我们在上面定义的, 值是Accounting｡

05:23.110 --> 05:29.560
这里有这个Accounting值是因为我们将它作为参数传递给构造函数.

05:29.560 --> 05:31.770
在那里我们接受这样一个字符串,

05:31.770 --> 05:41.890
恢复这个字段中的值, 而字段最后只是被转换为属性, 基于类的对象将在那里之后得到｡

05:41.890 --> 05:44.480
这就是我们如何创建一个简单的类,

05:44.480 --> 05:46.570
以及它的基本思想｡

05:46.570 --> 05:50.143
现在, 让我们看看JavaScript中实际得到了什么｡ 
