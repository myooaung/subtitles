WEBVTT

00:02.160 --> 00:03.740
المدرب: إذن ما هي خياراتنا

00:03.740 --> 00:06.440
عندما نريد تقسيم الكود إلى ملفات متعددة؟

00:06.440 --> 00:10.720
الآن لدينا ثلاثة خيارات لذلك.

00:10.720 --> 00:12.680
سيكون الخيار الأول هو كتابة ملفات

00:12.680 --> 00:16.110
تعليمات برمجية متعددة وملفات TypeScript متعددة.

00:16.110 --> 00:17.460
سيقوم TypeScript تلقائيًا

00:17.460 --> 00:20.710
بتجميع جميع ملفات التعليمات البرمجية في الدليل المصدر

00:20.710 --> 00:23.020
واستيراد ملفات Java النصية المترجمة

00:23.020 --> 00:25.000
يدويًا إلى HTML.

00:25.000 --> 00:26.220
هذا خيار وقد يكون هذا

00:26.220 --> 00:28.970
صحيحًا بالنسبة لبعض المشاريع ، ولكن سيتعين

00:28.970 --> 00:31.780
عليك إدارة كل هذه الواردات يدويًا والتي

00:31.780 --> 00:34.600
يمكن أن تكون مرهقة وعرضة للخطأ وعند استخدام

00:34.600 --> 00:36.980
ميزات معينة من TypeScript ، فإنك تتخلى

00:36.980 --> 00:39.560
أيضًا عن دعم الأنواع إذا تم تحديد نوع

00:39.560 --> 00:43.670
ما في الملف A وأنت تستخدمه في الملف B ولا يعرف TypeScript عن

00:43.670 --> 00:46.030
هذا الاتصال.

00:46.030 --> 00:47.480
هذا هو السبب في أن هذا ليس خيارًا

00:47.480 --> 00:49.290
رائعًا حقًا للمشاريع الأكبر.

00:49.290 --> 00:52.500
بدلاً من ذلك ، لدينا خياران رئيسيان للمشاريع الأكبر.

00:52.500 --> 00:55.470
لدينا مساحات أسماء وحزم ملفات على سبيل المثال.

00:55.470 --> 00:59.410
تعد مساحات الأسماء الآن ميزة TypeScript ، وهي ميزة بناء

00:59.410 --> 01:03.430
الجملة ، يمكنك إضافة رمز خاص إلى التعليمات البرمجية الخاصة

01:03.430 --> 01:04.840
بك لاستخدام هذه الميزة

01:04.840 --> 01:08.650
وتتيح لك تجميع التعليمات البرمجية معًا أسفل مساحة الاسم

01:08.650 --> 01:12.730
ثم استيراد مساحات الأسماء إلى ملفات أخرى.

01:12.730 --> 01:16.020
لذلك يمكنك الحصول على مساحة اسم لكل ملف على سبيل المثال.

01:16.020 --> 01:18.790
قم باستيراد ملف آخر إلى ملف آخر واضغط

01:18.790 --> 01:21.930
على مساحة الاسم تلك التي توجد في ملف آخر

01:21.930 --> 01:24.650
من هذا الملف المستورد وسنرى ذلك عمليًا

01:24.650 --> 01:25.970
في حالة عدم وضوح

01:25.970 --> 01:28.030
ذلك تمامًا.

01:28.030 --> 01:30.020
لا يدعم TypeScript ذلك فحسب ، بل

01:30.020 --> 01:34.130
يقوم أيضًا بتجميع الملفات معًا في ملف واحد ، بحيث يمكنك في النهاية

01:34.130 --> 01:37.230
كتابة التعليمات البرمجية في ملفات متعددة يتم

01:37.230 --> 01:39.560
تجميعها ولكن يتم استيرادها بعد ذلك

01:39.560 --> 01:42.750
إلى بعضها البعض بحيث يكون لديك عدد أقل من عمليات

01:42.750 --> 01:45.190
الاستيراد لإدارتها ولا تفعل ذلك. لا

01:45.190 --> 01:46.950
تحتاج إلى إدارة عمليات الاستيراد

01:46.950 --> 01:50.030
المختلفة يدويًا في ملف HTML.

01:50.030 --> 01:52.180
الآن بديل لمساحات الأسماء ويمكن

01:52.180 --> 01:55.750
القول أنه البديل الأكثر أهمية وحداثة ، هو استخدام

01:55.750 --> 02:00.750
ES6 Imports / Exports المعروف أيضًا باسم وحدات ES6 ، لأنه اتضح أنه

02:01.870 --> 02:06.480
منفصل تمامًا عن TypeScript ، يحتوي برنامج Java script الحديث

02:06.480 --> 02:09.940
على حل لهذه المشكلة أيضًا لأنك لديك هذه المشكلة

02:09.940 --> 02:13.140
ليس فقط في مشاريع TypeScript ، ولكن في أي مشروع

02:13.140 --> 02:15.850
نصي Java أكبر.

02:15.850 --> 02:18.200
يدعم برنامج Java النصي الحديث خارج

02:18.200 --> 02:21.150
الصندوق عبارات الاستيراد والتصدير ، مما يسمح

02:21.150 --> 02:23.110
لك بتحديد الملف الذي يعتمد على

02:23.110 --> 02:24.910
أي ملف آخر ومن ثم لديك كل هذه

02:24.910 --> 02:27.920
الملفات الفردية ولكنك لست بحاجة إلى إدارة الواردات

02:27.920 --> 02:30.560
يدويًا ، وبدلاً من ذلك ، فإن المتصفحات الحديثة

02:30.560 --> 02:33.770
تفعل ذلك الذي - التي.

02:33.770 --> 02:36.020
إنهم يفهمون ذلك ويقومون تلقائيًا بتنزيل

02:36.020 --> 02:38.800
وتشغيل الملفات التي يعتمد عليها ملف آخر.

02:38.800 --> 02:41.370
يمكنك استخدام بناء جملة الاستيراد / التصدير

02:41.370 --> 02:43.470
لذلك ويدعم TypeScript هذا أيضًا.

02:43.470 --> 02:46.870
لذلك يمكنك استخدامه TypeScript دون أي مشاكل.

02:46.870 --> 02:48.700
أنت تقوم بترجمة كل ملف ولكنك

02:48.700 --> 02:50.810
تحتاج فقط إلى استيراد نص برمجي

02:50.810 --> 02:53.680
واحد لأن المتصفحات الحديثة ، كما ذكرت للتو

02:53.680 --> 02:56.350
، تعرف كيفية إحضار جميع التبعيات الأخرى

02:56.350 --> 02:58.570
، وسترى ذلك أيضًا قيد التنفيذ في

02:58.570 --> 03:00.710
هذا القسم الأساسي هنا.

03:00.710 --> 03:02.320
الآن ملاحظة مهمة هنا ، حيث

03:02.320 --> 03:03.830
سننتهي تقنيًا بملفات

03:03.830 --> 03:06.110
متعددة ، وبينما لن نضطر إلى إدارة

03:06.110 --> 03:09.140
عمليات الاستيراد يدويًا ، يتم استيراد البرنامج

03:09.140 --> 03:11.550
النصي ، لا يزال لدينا بعض العيوب بسبب

03:11.550 --> 03:15.130
ذلك لأن كل ملف تعتمد عليه يجب تنزيله بشكل منفصل مما

03:15.130 --> 03:16.900
يعني المزيد من طلبات HTTP

03:16.900 --> 03:19.460
وما إلى ذلك ، وبالتالي يمكنك تجميع الملفات

03:19.460 --> 03:22.210
معًا للعمل على ملفات متعددة أثناء التطوير

03:22.210 --> 03:24.860
ولكنك تشحن ملفًا واحدًا للإنتاج ولكنك

03:24.860 --> 03:30.840
تحتاج إلى أدوات خارجية لذلك ، على سبيل المثال Webpack و I سيوضح لك كيف يعمل ذلك أيضًا

03:30.840 --> 03:33.700
ولكن في قسم منفصل حيث سنلقي نظرة على Webpack

03:33.700 --> 03:39.500
و TypeScript ولماذا نستخدمه وكيف نستخدمه.

03:39.500 --> 03:41.100
لذلك دعونا الآن نستخدم

03:41.100 --> 03:43.900
هاتين الطريقتين في شكلهما الأساسي ودعونا

03:43.900 --> 03:45.870
نرى كيف يمكننا تحسين الكود الخاص

03:45.870 --> 03:48.853
بنا عن طريق تقسيمه عبر ملفات متعددة.
