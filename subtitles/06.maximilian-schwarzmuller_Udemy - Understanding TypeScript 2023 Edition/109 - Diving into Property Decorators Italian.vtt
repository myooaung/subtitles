WEBVTT

00:02.250 --> 00:05.050
Istruttore: Ora, prima di esplorare casi d'uso

00:05.050 --> 00:07.811
più utili o scenari per alcuni decoratori.

00:07.811 --> 00:10.700
Voglio mostrarvi brevemente tutti gli altri punti in cui è

00:10.700 --> 00:12.550
possibile aggiungere i decoratori.

00:12.550 --> 00:15.670
Ovviamente possiamo aggiungere decoratori alle classi, ma ci sono

00:15.670 --> 00:17.731
altri posti in cui possiamo aggiungerli.

00:17.731 --> 00:20.750
Per questo creerò una nuova classe, perché abbiamo bisogno di una

00:20.750 --> 00:22.460
classe per ogni decoratore che vogliamo

00:22.460 --> 00:24.580
usare, ma non dobbiamo aggiungere tutti i decoratori

00:24.580 --> 00:26.420
direttamente alla classe.

00:26.420 --> 00:28.480
Diciamo che abbiamo una classe

00:28.480 --> 00:31.523
di prodotti e che nella classe di prodotti abbiamo

00:31.523 --> 00:34.540
forse un titolo, che è una stringa.

00:34.540 --> 00:37.070
E possiamo assegnare un valore qui con il costruttore.

00:37.070 --> 00:39.600
Naturalmente si può sempre usare la scorciatoia e fare tutto in

00:39.600 --> 00:41.570
un unico passaggio in un costruttore, come abbiamo

00:41.570 --> 00:42.680
imparato in precedenza.

00:42.680 --> 00:44.451
Qui prenderò la strada più lunga.

00:44.451 --> 00:49.451
Possiamo avere un metodo qui, ottenere il prezzo con le tasse.

00:50.150 --> 00:53.442
Per questo mi aspetto di ottenere un'aliquota fiscale, che è un numero,

00:53.442 --> 00:57.150
e per far sì che funzioni dovremmo memorizzare anche un prezzo.

00:57.150 --> 01:01.200
proprietà Price, che si ottiene anche come parte del costruttore.

01:01.200 --> 01:04.060
Anche in questo caso potremmo usare la scorciatoia, ma

01:04.060 --> 01:05.340
lo farò in questo modo.

01:05.340 --> 01:08.120
E poi in questo metodo

01:08.120 --> 01:13.120
restituirò, This. prezzo moltiplicato per uno più le tasse.

01:13.200 --> 01:15.300
Abbiamo quindi questo metodo di utilità

01:15.300 --> 01:17.610
e possiamo anche aggiungere un getter e un

01:17.610 --> 01:19.090
setter, se vogliamo.

01:19.090 --> 01:22.700
Ad esempio, possiamo aggiungere un setter per il prezzo, dove otteniamo il

01:22.700 --> 01:25.850
valore, che dovrebbe essere un numero, e dove controlliamo che possiamo

01:25.850 --> 01:28.231
impostare solo determinati valori.

01:28.231 --> 01:32.090
Per far sì che questo funzioni, rinominerò il prezzo qui sopra, sottolineandolo

01:32.090 --> 01:35.350
e rendendolo privato, in modo da non poterlo raggiungere

01:35.350 --> 01:37.540
direttamente.

01:37.540 --> 01:39.970
E qui imposterò questo prezzo di sottolineatura

01:39.970 --> 01:42.580
e qui userò questo prezzo di sottolineatura.

01:42.580 --> 01:44.800
Con queste modifiche nel setter, possiamo impostare

01:44.800 --> 01:48.350
il prezzo del trattino basso uguale al valore che otteniamo.

01:48.350 --> 01:51.290
Ma prima di farlo, possiamo verificare se il valore

01:51.290 --> 01:52.770
è maggiore di zero, in modo

01:52.770 --> 01:55.630
da non accettare prezzi negativi.

01:55.630 --> 01:57.220
Quindi, impostiamo il prezzo solo

01:57.220 --> 02:00.159
se è maggiore di zero, altrimenti non facciamo nulla.

02:00.159 --> 02:04.330
In effetti, nell'altro caso si potrebbe lanciare un errore.

02:04.330 --> 02:08.389
Il prezzo non valido deve essere positivo.

02:08.389 --> 02:11.350
Quindi è qualcosa che possiamo fare, ora abbiamo

02:11.350 --> 02:14.020
una classe con due proprietà, con un accessor

02:14.020 --> 02:16.700
e anche con un metodo qui e questo metodo ha

02:16.700 --> 02:18.570
un parametro.

02:18.570 --> 02:21.180
Ora a tutte queste cose possiamo aggiungere

02:21.180 --> 02:24.690
i decoratori e iniziamo con un vecchio amico, il decoratore

02:24.690 --> 02:25.910
di log.

02:25.910 --> 02:28.960
Lo chiamerò log per non creare confusione con logger, perché

02:28.960 --> 02:30.650
questo decoratore di log non sarà

02:30.650 --> 02:31.960
aggiunto a una classe e quindi

02:31.960 --> 02:33.770
avrà argomenti diversi.

02:33.770 --> 02:35.671
Riceverà comunque degli argomenti

02:35.671 --> 02:38.580
e quali argomenti riceve il decoratore dipende da

02:38.580 --> 02:40.030
dove lo si aggiunge.

02:40.030 --> 02:41.960
Ecco perché non posso riutilizzare logger,

02:41.960 --> 02:45.700
perché è stato messo a punto per funzionare solo con le classi.

02:45.700 --> 02:48.100
Ora, qui non ho un decoratore di fabbrica, devo

02:48.100 --> 02:49.980
solo decorare una funzione come questa,

02:49.980 --> 02:53.510
ma comunque, quali argomenti riceve questa funzione decoratrice,

02:53.510 --> 02:55.230
dipende da dove la usiamo.

02:55.230 --> 02:58.750
Ad esempio, possiamo aggiungere un decoratore a una proprietà.

02:58.750 --> 03:01.120
Qui posso aggiungere un registro come questo

03:01.120 --> 03:03.840
e se si aggiunge un decoratore a una proprietà, il decoratore

03:03.840 --> 03:05.759
riceve due argomenti.

03:05.759 --> 03:09.830
Il primo argomento è l'obiettivo della proprietà e per una

03:09.830 --> 03:12.010
proprietà di istanza come questa,

03:12.010 --> 03:15.290
che si chiama istanza se si lavora con essa.

03:15.290 --> 03:19.490
Questo sarà il prototipo dell'oggetto creato.

03:19.490 --> 03:22.140
Se avessimo una proprietà statica, il target farebbe

03:22.140 --> 03:24.850
riferimento alla funzione state del costruttore.

03:24.850 --> 03:27.770
Qui dirò qualsiasi, perché non so esattamente

03:27.770 --> 03:30.140
quale struttura avrà l'oggetto.

03:30.140 --> 03:35.140
Il secondo argomento che otteniamo è semplicemente il nome della proprietà.

03:35.290 --> 03:37.682
Potrebbe essere una stringa,

03:37.682 --> 03:40.400
ma anche un simbolo.

03:40.400 --> 03:43.470
Non sappiamo cosa usare come identificatore di proprietà.

03:43.470 --> 03:48.037
E poi qui registrerò il decoratore di proprietà, in modo da poter

03:49.130 --> 03:51.120
vedere quando questo viene

03:51.120 --> 03:55.980
eseguito e voglio una console. destinazione del log e anche il nome della proprietà.

03:55.980 --> 03:57.780
In modo da vedere cosa c'è in questi due valori.

03:57.780 --> 04:01.280
Se salviamo in modo che compili senza errori e se andiamo

04:01.280 --> 04:03.080
sul nostro server, vediamo

04:03.080 --> 04:06.871
che il decoratore di proprietà viene stampato.

04:06.871 --> 04:08.630
E questo è il risultato che otteniamo.

04:08.630 --> 04:13.220
Vediamo che questo è il prototipo del nostro oggetto, perché

04:13.220 --> 04:15.850
non vediamo titolo e prezzo.

04:15.850 --> 04:18.160
Ma vediamo che il prezzo viene pagato con le

04:18.160 --> 04:19.770
tasse e che i metodi sono registrati

04:19.770 --> 04:21.900
sul prototipo di un oggetto.

04:21.900 --> 04:24.240
Questo è il prototipo del nostro oggetto e

04:24.240 --> 04:26.640
vediamo title qui a destra, che è il nome della

04:26.640 --> 04:28.943
proprietà con cui stiamo lavorando.

04:29.800 --> 04:33.770
Ma quando viene eseguito esattamente questo logger?

04:33.770 --> 04:37.880
Come si può notare, poiché non istanzio mai alcun prodotto, viene eseguito

04:37.880 --> 04:41.670
fondamentalmente quando la definizione della classe viene

04:41.670 --> 04:43.980
registrata da JavaScript.

04:43.980 --> 04:47.660
Quindi viene eseguito quando si definisce questa proprietà in

04:47.660 --> 04:49.140
JavaScript, come parte della

04:49.140 --> 04:50.960
classe, come parte di questa funzione

04:50.960 --> 04:52.970
del costruttore.

04:52.970 --> 04:54.610
Che alla fine viene creato qui.

04:54.610 --> 04:58.053
Questo è il momento in cui viene eseguito il decoratore di proprietà.
