WEBVTT

00:02.160 --> 00:04.860
Apresentador: Agora que vimos outro bom exemplo de como

00:04.860 --> 00:06.440
podemos trabalhar com decoradores,

00:06.440 --> 00:09.040
há um último exemplo no qual eu quero mergulhar.

00:09.040 --> 00:11.997
E isto é decoradores para validação.

00:11.997 --> 00:14.560
Para isso, na parte inferior do arquivo,

00:14.560 --> 00:17.733
acrescentarei aqui mais uma nova classe.

00:18.780 --> 00:20.530
Isso poderia ser um curso.

00:20.530 --> 00:23.903
Agora um curso deve ter um título, que é uma corda.

00:25.430 --> 00:27.483
E talvez um preço, que é um número.

00:29.730 --> 00:32.640
Então aqui temos um construtor onde obtemos os dois valores

00:32.640 --> 00:34.440
aqui e eu não estou deliberadamente

00:35.550 --> 00:37.780
usando o atalho aqui, para que eu possa facilmente

00:37.780 --> 00:40.953
adicionar decoradores de propriedades.

00:42.690 --> 00:44.560
Em seguida, eu estabeleço este título

00:44.560 --> 00:46.653
igual a t, e este preço igual a p.

00:47.990 --> 00:50.530
Agora, é claro, agora que queremos instanciar este

00:50.530 --> 00:53.610
curso, temos que passar com um título válido e um preço válido.

00:53.610 --> 00:56.730
Mas um cenário comum que você pode encontrar em

00:56.730 --> 00:59.630
algumas aplicações é que você vai buscar dados,

00:59.630 --> 01:03.340
digamos de um recurso web e obtém dados onde você acha que

01:03.340 --> 01:05.854
tem um par de cursos, digamos, mas você

01:05.854 --> 01:08.110
não tem certeza.

01:08.110 --> 01:12.839
Ou, outro cenário possível, você deixa os usuários inserirem os dados e simplesmente

01:12.839 --> 01:15.490
quer atribuir esses dados e negociar um novo curso

01:15.490 --> 01:18.370
com os dados inseridos pelo usuário e assume que está

01:18.370 --> 01:22.500
certo, mas não tem garantia de que está certo e, portanto, quer validar

01:22.500 --> 01:24.210
a entrada.

01:24.210 --> 01:26.380
Esse é o cenário que eu quero fingir aqui.

01:26.380 --> 01:29.940
Digamos em nosso arquivo html de índice, obtemos um formulário

01:30.894 --> 01:32.840
simples aqui e não o estilizarei,

01:32.840 --> 01:36.074
então agora será tão bonito assim, mas temos aqui um formulário

01:36.074 --> 01:41.074
simples com a entrada do tipo de texto e um espaço reservado ao título, woops, curso,

01:41.390 --> 01:44.620
título e um id de digamos título e abaixo que temos uma entrada

01:44.620 --> 01:46.870
de número onde o tipo é todo o texto, mas

01:46.870 --> 01:50.605
é o preço do curso e o id é o preço.

01:50.605 --> 01:55.030
E então temos nosso botão onde o submetemos.

01:55.030 --> 02:00.030
Portanto, o botão é do tipo submeter.

02:00.040 --> 02:02.780
Portanto, uma forma muito simples e, como eu disse, não é tão

02:02.780 --> 02:04.280
bonita se a dermos uma olhada aqui,

02:04.280 --> 02:06.070
mas tem tudo o que precisamos.

02:06.070 --> 02:08.763
Agora, vamos ligar um ouvinte ao formulário aqui.

02:09.830 --> 02:14.780
Portanto, aqui eu recebi meu cursoFormulário que posso obter com documento, consultaSelector,

02:14.780 --> 02:18.840
formulário e adiciono o ponto de exclamação porque sei que vou obter um para

02:18.840 --> 02:21.910
que este não seja nulo, e então no formulário podemos adicionarEventListener,

02:21.910 --> 02:25.050
o ouvinte do evento de submissão e então conseguimos que o

02:26.390 --> 02:32.360
objeto do evento passe para a função que eu atribuí automaticamente.

02:32.360 --> 02:35.450
Lá eu quero chamar o evento preventDefault, para que não enviemos

02:35.450 --> 02:38.030
o formulário e não enviemos nenhum pedido http.

02:38.030 --> 02:40.570
E depois queremos extrair os dados

02:40.570 --> 02:42.910
por título e pelo preço.

02:42.910 --> 02:45.779
Assim, o título pode ser extraído ao chegar

02:45.779 --> 02:49.700
ao documento, querySelector, ou na verdade desde que

02:49.700 --> 02:54.700
designamos um id, getElementById, título e sabemos que este será um

02:55.560 --> 02:59.760
HTMLInputElement para que possamos usar o typecasting

02:59.760 --> 03:01.700
para que o digitemos, e o preço

03:01.700 --> 03:06.174
é documento, getElementById, preço e também podemos converter

03:06.174 --> 03:09.672
isto em um InputElement.

03:09.672 --> 03:11.320
E na verdade eu estou lá por estes

03:11.320 --> 03:14.520
elementos, então vamos renomear as constantes para titleEL e

03:14.520 --> 03:17.779
priceEl e para obter o título concreto podemos agora ir para titleEl,

03:17.779 --> 03:20.930
acesso à propriedade de valor e para obter o preço, podemos fazer

03:20.930 --> 03:23.400
o mesmo para o priceElement e obter o valor lá também,

03:23.400 --> 03:25.260
e eu quero ter que adicionar como um número,

03:25.260 --> 03:26.840
então eu adiciono o plus na frente

03:26.840 --> 03:30.060
dele para convertê-lo para um número.

03:30.060 --> 03:34.017
Agora, é isso, mas agora eu quero criar um novo rumo

03:34.017 --> 03:36.090
com essas informações.

03:36.090 --> 03:39.060
Portanto, aqui temos o curso criado onde

03:39.060 --> 03:43.850
posso chamar de novo curso e eu passo em título e preço.

03:43.850 --> 03:46.770
Agora o datilografia aceita isto, porque o título será uma string

03:46.770 --> 03:48.640
e como eu converto este input para um número,

03:48.640 --> 03:50.200
o preço será um número.

03:50.200 --> 03:54.160
Assim, se eu então consolar o log, o curso criado depois, podemos verificar

03:54.160 --> 03:55.530
se isto funciona.

03:55.530 --> 03:58.693
Vamos salvar isso, recarregar, talvez limpar o console para que

03:58.693 --> 04:00.680
possamos ver claramente a saída, e depois

04:00.680 --> 04:02.400
adicionar um novo rumo aqui.

04:02.400 --> 04:05.785
Javascript o guia completo custou US$ 199

04:05.785 --> 04:08.010
e isto parece funcionar.

04:08.010 --> 04:11.010
Infelizmente, porém, isto só funciona

04:11.010 --> 04:13.290
se eu não entrar em nada.

04:13.290 --> 04:16.600
Se eu agora clicar em salvar, vemos que este curso foi criado.

04:16.600 --> 04:19.820
Agora, este é um curso tecnicamente válido, mas, é claro,

04:19.820 --> 04:23.121
não é realmente válido para nossa aplicação.

04:23.121 --> 04:26.220
Provavelmente queremos ter um título que não esteja

04:26.220 --> 04:28.620
vazio e um preço que seja maior que zero.

04:28.620 --> 04:30.660
Portanto, queremos acrescentar validação.

04:30.660 --> 04:32.670
É claro que podemos simplesmente adicionar

04:32.670 --> 04:37.130
um "se" aqui e verificar se o título, guarnição, comprimento é maior que zero, o que

04:37.130 --> 04:38.830
significa que não está vazio e onde

04:38.830 --> 04:41.100
também validamos o preço.

04:41.100 --> 04:43.870
Mas isso significa que sempre que criamos um novo curso,

04:43.870 --> 04:47.880
temos de acrescentar aqui a lógica de validação antes de adicioná-la.

04:47.880 --> 04:49.990
Não seria bom se a lógica de validação

04:49.990 --> 04:51.910
fosse incluída na aula do curso, com

04:51.910 --> 04:53.940
a ajuda de decoradores, talvez?

04:53.940 --> 04:56.770
E é exatamente isso que eu quero fazer aqui.

04:56.770 --> 04:59.910
Agora vou apenas dar uma idéia básica de como poderíamos

04:59.910 --> 05:01.447
implementar isto, no próximo

05:01.447 --> 05:04.861
módulo vou mostrar um pacote de exemplo que faz isto

05:04.861 --> 05:08.270
de uma maneira mais elaborada e que todos nós então usaremos

05:08.270 --> 05:12.080
para brincar um pouco com isto.

05:12.080 --> 05:14.530
Agora, porém, aqui quero implementar isto

05:14.530 --> 05:16.300
com meus próprios decoradores

05:16.300 --> 05:19.370
e acrescentarei um decorador necessário aqui e acrescentaremos

05:19.370 --> 05:21.890
outra função de decorador que eu nomearei

05:21.890 --> 05:24.433
PositiveNumber.

05:26.710 --> 05:28.510
Portanto, tenho aqui dois decoradores.

05:28.510 --> 05:31.240
E agora minha idéia é que podemos adicioná-los

05:31.240 --> 05:35.369
aqui às nossas propriedades, por exemplo, Required em frente

05:35.369 --> 05:40.369
ao título, e positiveNumber em frente ao preço e digitação tipo de registro

05:41.740 --> 05:44.020
em algum lugar e então temos uma terceira

05:44.020 --> 05:49.020
função, validar a qual podemos passar um objeto para que qualquer objeto

05:49.490 --> 05:54.490
e digitação então tenha uma olhada no projeto, encontre qualquer validação

05:55.120 --> 05:58.780
que registramos nesta classe para este objeto antes

05:58.780 --> 06:03.410
e aplique nossa lógica de validação.

06:03.410 --> 06:05.480
Essa é a idéia que tenho aqui.

06:05.480 --> 06:08.240
Portanto, isto pode ser parte de uma biblioteca de terceiros

06:08.240 --> 06:11.170
que estamos expondo a você e depois você apenas importa o número

06:11.170 --> 06:14.620
positivo exigido e valida para primeiro configurar os validadores e depois,

06:14.620 --> 06:16.750
em algum momento, chama validar.

06:16.750 --> 06:18.634
Assim, por exemplo, aqui

06:18.634 --> 06:22.462
quando criamos o curso, podemos chamar de validar

06:22.462 --> 06:31.660
e passar no curso criado e se isto não for verdade, então digamos que isto deve retornar verdadeiro ou falso, se isto não

06:31.660 --> 06:35.040
for verdade, então lançamos um erro ou mostramos

06:35.040 --> 06:42.960
um alerta, entrada inválida, por favor tente novamente e só de outra forma continuamos.

06:42.960 --> 06:43.870
Então, essa é a minha idéia.

06:43.870 --> 06:46.540
Que podemos chamar de validar, isto retorna verdadeiro ou falso.

06:46.540 --> 06:48.793
Verdadeiro se for válido, falso se não for

06:48.793 --> 06:51.670
válido e, portanto, podemos usar o resultado.

06:51.670 --> 06:53.730
Portanto, temos um par de coisas a fazer.

06:53.730 --> 06:56.290
Precisamos ter certeza de que quando adicionamos um decorador

06:56.290 --> 06:59.350
aqui, isto é de alguma forma armazenado em algum lugar.

06:59.350 --> 07:00.970
Mais uma vez, tenha em mente que isto

07:00.970 --> 07:02.950
poderia fazer parte de nossa própria biblioteca

07:02.950 --> 07:05.710
de terceiros, de modo que lá poderíamos ter algum tipo de

07:05.710 --> 07:10.050
armazenamento que é armazena que para esta classe e este título de propriedade, por exemplo,

07:10.050 --> 07:12.480
queremos que seja exigido.

07:12.480 --> 07:15.630
E na validação, podemos então verificar se no armazenamento

07:15.630 --> 07:19.026
para o objeto que temos, para a classe em que o objeto se baseia temos

07:19.026 --> 07:21.990
um validador registrado para o título, para o preço e assim

07:21.990 --> 07:23.330
por diante.

07:23.330 --> 07:25.260
E então executamos nossa lógica de validação.

07:25.260 --> 07:26.453
Essa é a minha idéia aqui.
