WEBVTT

00:02.120 --> 00:02.953
Kursleiter: Das war

00:02.953 --> 00:04.960
also eine wichtige erste Reihe von Optionen.

00:04.960 --> 00:07.520
Lassen Sie uns nun in diese strengen Optionen eintauchen,

00:07.520 --> 00:09.860
denn sie sind ziemlich interessant.

00:09.860 --> 00:12.150
Es gibt die Option strict true, mit der alle

00:12.150 --> 00:13.590
Optionen für die strenge Typüberprüfung

00:13.590 --> 00:16.750
aktiviert werden, so dass die Einstellung dieser Option im

00:16.750 --> 00:18.830
Grunde das Gleiche ist, als wenn Sie alle

00:18.830 --> 00:22.110
diese Optionen einzeln einstellen würden.

00:22.110 --> 00:24.830
Sie können also entweder alle diese Optionen nacheinander

00:24.830 --> 00:27.110
einstellen oder nur diese Option wählen.

00:27.110 --> 00:29.510
Natürlich sollten Sie die einzelnen Optionen

00:29.510 --> 00:33.020
einstellen, wenn Sie einige Optionen auf "false" setzen wollen.

00:33.020 --> 00:34.790
Denn sonst sind sie alle auf wahr eingestellt.

00:34.790 --> 00:36.520
Wenn Sie sie alle auf true setzen wollen,

00:36.520 --> 00:39.290
ist die Verwendung dieser Option natürlich viel kürzer.

00:39.290 --> 00:41.360
Was bewirken diese Optionen nun aber?

00:41.360 --> 00:43.213
Beginnen wir mit noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny ist eine sehr interessante Option, die uns hilft,

00:47.410 --> 00:49.180
besseren Code zu schreiben.

00:49.180 --> 00:51.370
Gehen wir zu unserer Analysedatei und fügen

00:51.370 --> 00:53.963
wir dort eine Funktion, sendAnalytics, hinzu,

00:55.270 --> 00:58.070
die eine Datenoption abruft, sagen wir, und dort könnten

00:58.070 --> 01:01.010
wir sie an einen Server senden, aber hier protokolliere

01:01.010 --> 01:03.430
ich sie nur auf der Konsole.

01:03.430 --> 01:07.500
Dann rufe ich sendAnalytics mit den Daten auf, also

01:07.500 --> 01:08.920
mit dem String.

01:08.920 --> 01:11.080
Wie Sie sehen, beschwert sich meine IDE bereits hier

01:11.080 --> 01:13.160
und auch der TypeScript-Compiler, denn die beiden

01:13.160 --> 01:14.960
sind natürlich miteinander verbunden, wenn

01:14.960 --> 01:17.040
ich versuche, dies zu kompilieren.

01:17.040 --> 01:20.070
Parameterdaten haben implizit einen beliebigen Typ.

01:20.070 --> 01:21.350
Dies scheint also mit dieser

01:21.350 --> 01:23.940
noImplicitAny-Option zusammenzuhängen.

01:23.940 --> 01:27.150
Wenn ich diese Option auf "false" setze, wenn ich also alle

01:27.150 --> 01:29.300
"strict"-Optionen auf "true" setze, aber

01:29.300 --> 01:31.521
diese Option auf "false", was ich tun kann,

01:31.521 --> 01:33.810
dann verschwindet dieser Fehler.

01:33.810 --> 01:37.140
Sowohl in der IDE als auch beim Kompilieren des Codes.

01:37.140 --> 01:38.730
Was bewirkt diese Option also?

01:38.730 --> 01:41.440
Es stellt sicher, und ich werde es wieder auskommentieren,

01:41.440 --> 01:44.210
um es wegen strict true wieder einzuschalten,

01:44.210 --> 01:47.050
es stellt sicher, dass wir uns über unsere Parameter

01:47.050 --> 01:49.410
im Klaren sein müssen, über die Werte, mit

01:49.410 --> 01:53.020
denen wir in unserem Code arbeiten.

01:53.020 --> 01:56.600
Hier geben wir TypeScript keine Informationen über den

01:56.600 --> 01:59.930
Typ der Daten, die wir hier als Parameter erhalten.

01:59.930 --> 02:01.320
Und das sollten wir auch.

02:01.320 --> 02:03.800
Wenn TypeScript in der Lage ist, dies abzuleiten, dann ist

02:03.800 --> 02:05.360
es natürlich in Ordnung, aber wie sollte

02:05.360 --> 02:08.770
TypeScript in der Lage sein, dies aus dieser Zeile abzuleiten, bedenken Sie,

02:08.770 --> 02:11.470
dass diese Funktion zuerst deklariert wird, bevor diese Datei

02:11.470 --> 02:12.950
ausgeführt wird.

02:12.950 --> 02:15.080
Zum Zeitpunkt der Erstellung der Funktion

02:15.080 --> 02:18.380
kann man also nicht wissen, was am Ende darin stehen wird.

02:18.380 --> 02:20.100
Hier können wir diesen Fehler also beheben,

02:20.100 --> 02:22.570
indem wir einfach den Typ deklarieren und uns darüber im Klaren

02:22.570 --> 02:24.253
sind, welchen Typ wir dort verwenden.

02:25.100 --> 02:29.530
Bitte beachten Sie, dass, wenn Sie eine Variable protokolliert haben, die

02:29.530 --> 02:32.650
Sie hier auf true setzen, Sie keine Fehlermeldung über

02:32.650 --> 02:34.720
diese Deklaration erhalten, obwohl

02:34.720 --> 02:37.670
sie auch einen Standardtyp von any erhält.

02:37.670 --> 02:39.250
Für Variablen ist das in Ordnung.

02:39.250 --> 02:40.910
Für Parameter ist das nicht in Ordnung.

02:40.910 --> 02:42.480
Warum ist das für Variablen in Ordnung?

02:42.480 --> 02:44.370
Denn was TypeScript für Variablen macht,

02:44.370 --> 02:45.940
was für Variablen möglich ist, das

02:45.940 --> 02:47.040
ist hier nicht möglich, weil

02:47.040 --> 02:48.880
die Funktion zuerst erstellt wird.

02:48.880 --> 02:52.490
Hier kann TypeScript die von Ihnen zugewiesenen Werte verfolgen.

02:52.490 --> 02:54.650
Siehst du, okay, ich habe hier

02:54.650 --> 02:56.720
so protokolliert, jetzt habe

02:56.720 --> 02:58.573
ich es auf true gesetzt, also

02:59.430 --> 03:04.430
ist es danach, wenn ich die Konsole hier protokolliere, ein boolescher

03:06.700 --> 03:08.030
Wert.

03:08.030 --> 03:10.300
TypeScript ist hier also in der Lage, den Fluss

03:10.300 --> 03:11.893
Ihres Codes zu verstehen, und deshalb

03:11.893 --> 03:14.320
müssen Sie hier keine genauen Angaben zu einem Typ

03:14.320 --> 03:15.430
machen.

03:15.430 --> 03:18.020
Natürlich sollten Sie genau sein, wenn Sie vermeiden

03:18.020 --> 03:20.310
wollen, dass Sie den neuen Wert frei zuweisen können,

03:20.310 --> 03:22.940
was Sie hier tun können, da er vom Typ any ist.

03:22.940 --> 03:25.700
Man sollte also immer noch einen Typ zuweisen, um dies zu vermeiden,

03:25.700 --> 03:27.680
aber TypeScript ist zumindest in der Lage herauszufinden,

03:27.680 --> 03:29.490
ob der Code, den man aufruft, mit dem Typ funktioniert,

03:29.490 --> 03:31.410
den er gerade enthält.

03:31.410 --> 03:32.410
Das ist hier nicht der

03:32.410 --> 03:35.360
Fall, da die Funktion vor dem Aufruf definiert wird und

03:35.360 --> 03:37.800
TypeScript daher nicht weiß, ob das, was Sie dort

03:37.800 --> 03:39.570
übergeben, innerhalb der Funktion

03:39.570 --> 03:41.393
verwendet werden kann.

03:43.280 --> 03:46.020
strictNullChecks ist nie eine wichtige Option.

03:46.020 --> 03:48.520
Das hängt mit der Auswahl der Schaltflächen zusammen,

03:48.520 --> 03:49.410
die wir hier haben.

03:49.410 --> 03:51.820
Denken Sie daran, dass ich dieses Ausrufezeichen hier hinzufügen musste,

03:51.820 --> 03:52.670
damit es funktioniert.

03:52.670 --> 03:54.380
Andernfalls würde ich eine Fehlermeldung erhalten.

03:54.380 --> 03:56.220
Jetzt können wir diesen Fehler auch

03:56.220 --> 03:58.430
loswerden, ohne das Ausrufezeichen hinzuzufügen,

03:58.430 --> 04:02.090
indem wir strictNullChecks auf false setzen.

04:02.090 --> 04:04.200
Lassen Sie uns das also tun und das hier speichern.

04:04.200 --> 04:07.860
Und wie Sie sehen, ist dieser Fehler jetzt hier verschwunden.

04:07.860 --> 04:10.120
Und ich kann alle Dateien kompilieren.

04:10.120 --> 04:12.340
Was tun strictNullChecks nun?

04:12.340 --> 04:16.160
Sie sagen TypeScript, dass es ziemlich streng sein soll, wenn es darum

04:16.160 --> 04:19.410
geht, wie man auf Werte zugreift und mit ihnen arbeitet, die

04:19.410 --> 04:22.530
möglicherweise einen Nullwert enthalten könnten.

04:22.530 --> 04:24.850
Und der Knopf hier könnte null sein.

04:24.850 --> 04:29.210
Sie zeigt nicht immer auf ein Schaltflächenelement.

04:29.210 --> 04:31.390
Es zeigt nicht immer auf ein solches Element, denn auch

04:31.390 --> 04:34.220
wenn Sie hier einen solchen Selektor haben, kann es sein, dass eine

04:34.220 --> 04:36.900
Schaltfläche auf der Seite, auf der dieses Skript ausgeführt wird,

04:36.900 --> 04:38.490
einfach nicht existiert.

04:38.490 --> 04:40.840
Und deshalb kann TypeScript das nicht erkennen,

04:40.840 --> 04:43.790
weil es nicht in Ihre HTML-Datei eintaucht und sich das

04:43.790 --> 04:44.900
ansieht.

04:44.900 --> 04:48.240
Sie kann nicht sagen, ob dies erfolgreich sein wird oder nicht.

04:48.240 --> 04:53.130
Und wenn es nicht gelingt, einen Zeiger und einen Null-Knoten zurückzugeben, dann

04:53.130 --> 04:56.650
wird null zurückgegeben, also undefiniert, um genau zu sein,

04:56.650 --> 04:59.090
aber das wird hier gleich behandelt.

04:59.090 --> 05:01.610
Daher könnte diese Schaltfläche einen Nullwert enthalten,

05:01.610 --> 05:03.530
und daher könnte dieser Code fehlschlagen.

05:03.530 --> 05:06.610
Wenn ich diese Schaltfläche hier auskommentiere, funktioniert

05:06.610 --> 05:08.480
beim Kompilieren alles, weil ich die

05:08.480 --> 05:10.733
Nullprüfungen deaktiviert habe.

05:12.000 --> 05:14.100
Aber deshalb habe ich jetzt einen Laufzeitfehler,

05:14.100 --> 05:16.210
weil ich den Ereignis-Listener addEventListener

05:16.210 --> 05:18.230
nicht auf null aufrufen kann.

05:18.230 --> 05:20.970
Und ich habe hier null, weil ich keinen Knopf habe.

05:20.970 --> 05:23.110
Dies ist ein Fehler, den wir vermeiden

05:23.110 --> 05:26.760
könnten, indem wir strictNullChecks auf true setzen.

05:26.760 --> 05:30.340
Und das wird automatisch eingestellt, wenn wir strict auf true gesetzt haben.

05:30.340 --> 05:34.450
TypeScript sieht vor, dass dies passieren könnte,

05:34.450 --> 05:38.600
und zwingt uns daher, dies zu umgehen.

05:38.600 --> 05:40.640
Eine billige Abhilfe ist dieser

05:40.640 --> 05:42.820
Ausrufezeichen-Operator hier.

05:42.820 --> 05:46.020
Dies teilt TypeScript mit, dass Sie, der Entwickler,

05:46.020 --> 05:48.360
wissen, dass diese Schaltfläche existiert,

05:48.360 --> 05:53.360
oder dass diese Operation einen Wert ergibt, der nicht Null ist.

05:53.710 --> 05:55.830
Vielleicht tun Sie das ja, wenn Sie wissen,

05:55.830 --> 05:58.990
dass Sie am HTML-Code arbeiten und dass es hier eine Schaltfläche

05:58.990 --> 06:00.430
gibt, dass dieser Selektor

06:00.430 --> 06:03.310
hier funktionieren wird.

06:03.310 --> 06:05.610
Es wäre also in Ordnung, das Ausrufezeichen in diesem Szenario

06:05.610 --> 06:06.623
zu verwenden.

06:07.600 --> 06:09.040
Wenn Sie ein anderes Szenario

06:09.040 --> 06:11.120
haben, bei dem Sie nicht sicher wissen, ob es

06:11.120 --> 06:13.050
funktioniert, und Sie nur hoffen, dass es

06:13.050 --> 06:14.170
funktioniert, dann ist

06:14.170 --> 06:18.210
es vielleicht besser, den Code, der fehlschlagen könnte, einfach in eine if-Prüfung

06:18.210 --> 06:21.570
zu verpacken, die natürlich auch zur Laufzeit vorhanden ist.

06:21.570 --> 06:24.960
Sie könnten einfach prüfen, ob button hier wahr ist, was nicht der

06:24.960 --> 06:27.510
Fall ist, wenn es null oder undefiniert ist.

06:27.510 --> 06:30.060
Und verschieben Sie diesen Code in dieses if-Check hier.

06:30.060 --> 06:32.470
Auch ohne das Ausrufezeichen erhalten wir

06:32.470 --> 06:35.810
im strictNullChecks-Modus keine Fehlermeldung, weil TypeScript

06:35.810 --> 06:37.600
versteht, dass dieser Code innerhalb

06:37.600 --> 06:39.750
dieser if-Anweisung steht und dass diese

06:39.750 --> 06:41.991
if-Anweisung sicherstellt, dass button

06:41.991 --> 06:46.310
nicht null ist und dass dies nicht fehlschlägt.

06:46.310 --> 06:49.310
Dies könnte also tatsächlich die sauberere Lösung sein.

06:49.310 --> 06:51.060
Um jedoch Code zu sparen, wenn Sie

06:51.060 --> 06:54.350
mit Sicherheit wissen, dass etwas existiert, ist die Verwendung

06:54.350 --> 06:56.550
des Ausrufezeichens kürzer und eine absolut

06:56.550 --> 06:58.320
gute Option.

06:58.320 --> 07:00.450
Hier habe ich beides gesagt, damit wir beides sehen, natürlich

07:00.450 --> 07:02.450
braucht man nur eines der beiden Dinge, entweder das

07:02.450 --> 07:04.520
if-Häkchen, oder das Ausrufezeichen.

07:04.520 --> 07:07.680
strictFunctionTypes ist eine etwas fortschrittlichere

07:07.680 --> 07:12.010
Einstellung, die eine Nische abdeckt, die Sie vielleicht nicht

07:12.010 --> 07:14.830
in vielen Anwendungen haben.

07:14.830 --> 07:17.340
Das hängt mit den Funktionstypen zusammen, die Sie möglicherweise

07:17.340 --> 07:18.380
einrichten.

07:18.380 --> 07:20.650
Also nicht Typen innerhalb von Funktionen, sondern

07:20.650 --> 07:23.690
wenn man definiert, wie eine Funktion hinsichtlich ihrer Parameter

07:23.690 --> 07:26.220
und ihres Rückgabewertes aussehen soll, und man so einen

07:26.220 --> 07:27.840
Funktionstyp erstellt, den man im

07:27.840 --> 07:29.990
Basismodul kennengelernt hat, dann kann man

07:29.990 --> 07:32.650
dort eine Box einführen, wenn man mit Klassen und Vererbung

07:32.650 --> 07:35.560
arbeitet, die wir noch nicht kennengelernt haben, die wir noch

07:35.560 --> 07:36.950
nicht benutzt haben, und deshalb

07:36.950 --> 07:39.683
ignorieren wir das erst einmal.

07:40.578 --> 07:43.630
strictBindCallApply, die hilfreich sein kann,

07:43.630 --> 07:46.840
wenn Sie mit bind, call oder apply arbeiten.

07:46.840 --> 07:49.680
Lassen Sie uns dazu kurz ein Beispiel betrachten.

07:49.680 --> 07:52.040
Hier haben wir unsere Schaltfläche und unsere Funktion.

07:52.040 --> 07:57.040
Sagen wir, es handelt sich um eine Funktion, die wir hier mit dem Schlüsselwort function

07:57.780 --> 08:01.100
definieren, oder um eine Fehlerfunktion.

08:01.100 --> 08:03.650
Das macht nichts, ich werde hier das Schlüsselwort function verwenden.

08:04.731 --> 08:09.731
clickHandler, und dort habe ich Konsole. Log angeklickt.

08:11.960 --> 08:13.810
Und hier zeigen wir auf clickHandler,

08:13.810 --> 08:15.560
und aus irgendeinem Grund wollen wir

08:15.560 --> 08:17.670
sicherstellen, dass wir bei der Ausführung

08:17.670 --> 08:19.330
bestimmte Argumente übergeben oder

08:19.330 --> 08:22.780
das this-Schlüsselwort dort auf einen bestimmten Wert setzen.

08:22.780 --> 08:26.480
Nehmen wir nun an, dass wir ein Nachrichtenargument erwarten, das eine

08:26.480 --> 08:28.110
Zeichenkette sein sollte.

08:28.110 --> 08:32.110
Und wir wollen das auch hier ausgeben.

08:32.110 --> 08:34.400
Nun, da clickHandler an addEventListener

08:34.400 --> 08:36.010
übergeben wird, so dass der Browser

08:36.010 --> 08:39.080
dies im Grunde für uns ausführt, wenn wir die Argumente, die

08:39.080 --> 08:41.070
übergeben werden, vorkonfigurieren

08:41.070 --> 08:43.570
wollen, können wir bind verwenden.

08:43.570 --> 08:47.000
Und bind nimmt als erstes Argument das, woran wir das Schlüsselwort

08:47.000 --> 08:49.320
this binden wollen.

08:49.320 --> 08:51.650
Und hier könnten wir sagen, dass das für uns keine

08:51.650 --> 08:53.580
Rolle spielt, weil wir es nicht in der Funktion

08:53.580 --> 08:55.930
verwenden, also binden wir es an null.

08:55.930 --> 08:57.700
Jetzt sehe ich, dass ich einen Fehler bekomme.

08:57.700 --> 09:00.610
Ich erhalte einen Fehler, der vermieden werden

09:00.610 --> 09:04.613
kann, wenn ich strictBindCallApply auf false setze.

09:07.040 --> 09:08.680
Jetzt sehen Sie, dass der Fehler verschwunden ist.

09:08.680 --> 09:10.501
Was bewirkt diese Option nun also?

09:10.501 --> 09:14.180
Sie prüft grundsätzlich, welche Funktion Sie aufrufen:

09:14.180 --> 09:16.020
bind, call oder apply.

09:16.020 --> 09:20.080
Und es wird geprüft, ob das, was Sie hier einrichten, sinnvoll ist.

09:20.080 --> 09:23.440
Und hier sieht TypeScript, dass wir ein Argument wollen, wir wollen

09:23.440 --> 09:25.450
den Parameter in clickHandler.

09:25.450 --> 09:28.260
Mit bind konfigurieren wir das allerdings nicht.

09:28.260 --> 09:30.600
Und deshalb erhalten wir hier einen Fehler.

09:30.600 --> 09:32.180
Wenn ich dies wieder auf true setze,

09:32.180 --> 09:34.000
oder ich habe es einfach auskommentiert,

09:34.000 --> 09:36.230
weil es natürlich standardmäßig auf true gesetzt

09:36.230 --> 09:37.870
ist, indem ich strict auf true setze,

09:37.870 --> 09:39.790
erhalten wir also wieder den Fehler.

09:39.790 --> 09:42.350
Wenn wir hier kein Argument erwarten würden, würde

09:42.350 --> 09:44.750
der Fehler dort unten verschwinden, wenn wir nur

09:44.750 --> 09:46.200
die Meldung entfernen, weil TypeScript

09:46.200 --> 09:48.140
unseren Code versteht und sieht, dass Sie

09:48.140 --> 09:50.660
keine Argumente an diese Methode oder diese Funktion

09:50.660 --> 09:52.580
übergeben, weil sie keine annimmt, also

09:52.580 --> 09:54.760
ist das in Ordnung.

09:54.760 --> 09:57.420
Aber natürlich wollen wir hier eine, also bekommen wir einen Fehler.

09:57.420 --> 10:00.880
Die Lösung besteht darin, dieses zweite Argument hier anzugeben,

10:00.880 --> 10:04.350
das das erste Argument ist, das Sie übergeben wollen.

10:04.350 --> 10:06.290
TypeScript ist hier wirklich clever.

10:06.290 --> 10:08.120
Wenn ich zum Beispiel eine Zahl eingebe, würde es

10:08.120 --> 10:10.310
sich trotzdem beschweren, weil es versteht, dass ich hier

10:10.310 --> 10:11.610
eine Zeichenkette brauche.

10:12.500 --> 10:15.960
Wenn ich jedoch eine korrekte Zeichenkette übergebe, wie z.B.

10:15.960 --> 10:17.350
you're welcome, dann beschwert

10:17.350 --> 10:19.070
es sich nicht mehr, weil es dies

10:19.070 --> 10:21.210
nicht versteht und sieht, dass dies mit

10:21.210 --> 10:24.840
meiner Funktionsdefinition hier übereinstimmt.

10:24.840 --> 10:27.370
Dies ist also ein sehr nützliches Verhalten, das sicherstellt,

10:27.370 --> 10:30.260
dass Sie nicht versehentlich bind, call oder apply in einer Weise verwenden,

10:30.260 --> 10:32.743
die mit Ihrem Code nicht funktioniert.

10:33.930 --> 10:36.600
Jetzt wird strictPropertyInitialization wichtig, sobald

10:36.600 --> 10:37.810
wir mit Klassen arbeiten.

10:37.810 --> 10:39.213
Wir können es vorerst ignorieren.

10:39.213 --> 10:41.890
noImplicitDies ist im Moment auch nicht von Bedeutung.

10:41.890 --> 10:43.650
Es hat mit dem this-Schlüsselwort zu tun

10:43.650 --> 10:45.980
und TypeScript versucht grundsätzlich, Sie zu warnen,

10:45.980 --> 10:48.240
wenn Sie das this-Schlüsselwort an einer Stelle verwenden,

10:48.240 --> 10:51.020
an der nicht klar ist, worauf es sich bezieht.

10:51.020 --> 10:53.210
Und alwaysStrict steuert einfach, dass

10:53.210 --> 10:55.560
die erzeugten JavaScript-Dateien den Strict-Modus

10:55.560 --> 10:58.663
verwenden, so dass dies hinzugefügt wird.

10:59.710 --> 11:02.383
Damit haben wir alle diese strengen Optionen abgedeckt.
