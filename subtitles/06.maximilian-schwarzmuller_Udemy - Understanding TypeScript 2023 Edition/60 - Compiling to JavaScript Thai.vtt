WEBVTT

00:02.510 --> 00:04.490
ผู้สอน: ด้วยคลาสพื้นฐานของเรา ถ้าเราไปที่โฟลเดอร์

00:04.490 --> 00:07.570
dist และเราตรวจสอบแอป js เราเห็นสิ่งที่สร้างขึ้นใน

00:07.570 --> 00:13.560
JavaScript และที่นั่นคุณเห็นว่าเรามีรหัสเดียวกัน

00:13.560 --> 00:22.230
ความแตกต่างที่สำคัญสองประการคือฟิลด์ชื่อที่เรามีอยู่ไม่มีอยู่แบบนี้ในชั้นเรียน

00:22.230 --> 00:25.460
สิ่งนี้จะได้รับการสนับสนุนใน JavaScript สมัยใหม่

00:25.460 --> 00:27.910
แต่ขึ้นอยู่กับเวอร์ชันของ JavaScript

00:27.910 --> 00:29.130
ที่คุณกำลังสร้าง

00:29.130 --> 00:33.450
ดังนั้นใน ES6 เพียงอย่างเดียว มันไม่รองรับจริง ๆ

00:33.450 --> 00:37.360
และแน่นอนว่าสิ่งที่ยอดเยี่ยมคือการมอบหมายประเภท

00:37.360 --> 00:39.760
เรามีตรรกะเชิงโครงสร้างของเรา

00:39.760 --> 00:43.870
และนี่คือวิธีที่คุณเพิ่มคุณสมบัติให้กับวัตถุที่จะสร้างขึ้นในวานิลลา

00:43.870 --> 00:54.470
JavaScript เมื่อไม่ได้ใช้ JavaScript เวอร์ชันล่าสุดซึ่งไวยากรณ์ของฟิลด์นี้จะได้รับการสนับสนุนด้วย

00:54.470 --> 00:56.480
นี่คือสิ่งที่ฉันมีใน JavaScript

00:56.480 --> 00:58.710
ตอนนี้มันน่าสนใจ แต่ถ้าเราไปที่

00:58.710 --> 01:02.080
tsconfig json และเราเปลี่ยนเป้าหมายจาก

01:02.080 --> 01:05.970
ES5 เป็น ES6 และแสดงความคิดเห็น lib ที่นี่

01:05.970 --> 01:10.870
เพื่อให้ TypeScript เพิ่มไลบรารี่ที่ถูกต้องและแนะนำโดยอัตโนมัติ

01:10.870 --> 01:16.350
หากคุณบันทึกไฟล์กำหนดค่านี้ และคุณกลับไปที่แอป js คุณเห็นบางอย่างที่แตกต่างไปจากเดิมอย่างสิ้นเชิง

01:16.350 --> 01:18.810
และนั่นเป็นสิ่งที่น่าสนใจทีเดียวที่เราเห็นที่นี่

01:18.810 --> 01:20.960
เรามีอะไรที่นี่?

01:20.960 --> 01:26.453
ในที่สุดเราก็มีสิ่งที่เรียกว่าฟังก์ชันคอนสตรัคเตอร์

01:27.299 --> 01:35.520
ฟังก์ชันคอนสตรัคเตอร์เป็นสิ่งที่สร้างขึ้นในจาวาสคริปต์ซึ่งโดยพื้นฐานแล้วมันมีอยู่ตลอดกาลอย่างที่คุณพูดได้

01:35.520 --> 01:44.480
และนี่คือวิธีสร้างพิมพ์เขียวของอ็อบเจกต์ของวานิลลาที่ไม่ใช่จาวาสคริปต์สมัยใหม่

01:44.480 --> 01:47.100
เป็นฟังก์ชันที่ถูกเรียกด้วยความช่วยเหลือของคีย์เวิร์ดใหม่

01:47.100 --> 01:50.890
และทันใดนั้น ฟังก์ชันนี้ก็น่าอัศจรรย์ แม้ว่าจะไม่มีคำสั่ง

01:50.890 --> 01:57.540
return อยู่ภายใน แต่จะส่งคืนบางอย่างตามที่คุณเห็นเมื่อเราเรียกมันที่นี่

01:57.540 --> 01:59.730
มันส่งคืนวัตถุ

01:59.730 --> 02:03.110
วัตถุใหม่ที่จะมีคุณสมบัติชื่อ

02:03.110 --> 02:04.940
ดังนั้น แนวคิดนี้จึงไม่ใช่เรื่องใหม่

02:04.940 --> 02:08.680
ไม่มีการนำเสนอโดย JavaScript หรือ TypeScript สมัยใหม่

02:08.680 --> 02:12.500
แนวคิดของการมีพิมพ์เขียวสำหรับออบเจกต์นั้นมีอยู่ใน

02:12.500 --> 02:15.180
JavaScript มานานแล้ว

02:15.180 --> 02:19.070
อย่างไรก็ตาม ในอดีต เราต้องใช้ฟังก์ชันคอนสตรัคเตอร์

02:19.070 --> 02:26.600
และเนื่องจากสิ่งนี้อาจไม่ง่ายนัก โดยเฉพาะกับนักพัฒนาที่อาจเคยทำงานกับภาษาโปรแกรมต่างๆ

02:26.600 --> 02:30.510
JavaScript สมัยใหม่แนะนำแนวคิดของคลาสของไวยากรณ์ที่สะอาดกว่านี้

02:30.510 --> 02:34.950
และ TypeScript ก็สนับสนุนสิ่งนี้เช่นกัน

02:34.950 --> 02:44.130
และเนื่องจากการคอมไพล์ที่ทรงพลังของ TypeScript คุณสามารถเลือกได้ทุกที่ที่คุณต้องการคอมไพล์เป็นสไตล์เก่าซึ่งแน่นอนว่าใช้งานได้ในเบราว์เซอร์มากขึ้น

02:44.130 --> 02:48.280
หรือสไตล์ ES6 ที่ทันสมัยกว่าที่เราเคยเห็นมาก่อน

02:48.280 --> 02:51.700
ซึ่งมีลักษณะเช่นนี้มากที่นี่

02:51.700 --> 02:54.500
ประเด็นสำคัญคือเรามีคุณลักษณะนี้ที่สร้างขึ้นใน

02:54.500 --> 03:00.163
JavaScript และสนับสนุนโดย TypeScript ซึ่งเราสามารถกำหนดพิมพ์เขียวของวัตถุได้
