WEBVTT

00:02.120 --> 00:02.953
Instruktur: Jadi, itu

00:02.953 --> 00:04.960
adalah serangkaian opsi pertama yang penting.

00:04.960 --> 00:07.520
Sekarang mari kita selami opsi-opsi ketat

00:07.520 --> 00:09.860
ini karena ini cukup menarik.

00:09.860 --> 00:12.150
Ada opsi true yang ketat ini, dan sebenarnya apa

00:12.150 --> 00:13.590
yang dilakukannya adalah mengaktifkan

00:13.590 --> 00:16.750
semua opsi pengecekan tipe yang ketat, sehingga secara efektif

00:16.750 --> 00:18.830
pengaturan ini sama seperti jika Anda telah

00:18.830 --> 00:22.110
mengatur semua opsi ini secara terpisah.

00:22.110 --> 00:24.830
Jadi, Anda bisa menetapkan semua opsi ini satu per

00:24.830 --> 00:27.110
satu, atau hanya menetapkan opsi ini.

00:27.110 --> 00:29.510
Tentu saja, Anda ingin mengatur opsi individual

00:29.510 --> 00:33.020
jika Anda ingin beberapa opsi disetel ke false.

00:33.020 --> 00:34.790
Karena kalau tidak, semuanya diatur ke true.

00:34.790 --> 00:36.520
Jika Anda ingin semuanya disetel ke true,

00:36.520 --> 00:39.290
maka menggunakan opsi ini saja tentu saja jauh lebih singkat.

00:39.290 --> 00:41.360
Sekarang, apa yang dilakukan opsi-opsi ini?

00:41.360 --> 00:43.213
Mari kita mulai dengan noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny adalah opsi yang cukup menarik yang membantu kita

00:47.410 --> 00:49.180
menulis kode yang lebih baik.

00:49.180 --> 00:51.370
Mari kita pergi ke file analytics kita di sini,

00:51.370 --> 00:53.963
dan di sana mari kita tambahkan fungsi, sendAnalytics,

00:55.270 --> 00:58.070
yang mendapatkan opsi data katakanlah, dan di sana kita

00:58.070 --> 01:01.010
bisa mengirim ini ke server tetapi di sini saya hanya mencatatnya

01:01.010 --> 01:03.430
secara konsol.

01:03.430 --> 01:07.500
Kemudian saya memanggil sendAnalytics dengan data, jadi

01:07.500 --> 01:08.920
dengan string.

01:08.920 --> 01:11.080
Sekarang seperti yang Anda lihat IDE saya sudah mengeluh

01:11.080 --> 01:13.160
di sini dan begitu juga TypeScript compiler, karena

01:13.160 --> 01:14.960
keduanya tentu saja terhubung jika saya mencoba

01:14.960 --> 01:17.040
untuk mengkompilasi ini.

01:17.040 --> 01:20.070
Data parameter secara implisit memiliki tipe apa saja.

01:20.070 --> 01:21.350
Jadi, ini tampaknya

01:21.350 --> 01:23.940
terkait dengan opsi noImplicitAny ini.

01:23.940 --> 01:27.150
Memang, jika saya menetapkan ini ke false, jadi jika saya menetapkan

01:27.150 --> 01:29.300
semua opsi ketat ke true tetapi saya menetapkan

01:29.300 --> 01:31.521
opsi ini ke false, yang bisa saya lakukan, maka

01:31.521 --> 01:33.810
kesalahan ini hilang.

01:33.810 --> 01:37.140
Baik di IDE maupun ketika kita mengkompilasi kode.

01:37.140 --> 01:38.730
Jadi, apa yang dilakukan opsi ini?

01:38.730 --> 01:41.440
Ini memastikan, dan saya akan mengomentarinya

01:41.440 --> 01:44.210
lagi untuk menyalakannya lagi karena benar

01:44.210 --> 01:47.050
ketat, ini memastikan bahwa kita harus jelas

01:47.050 --> 01:49.410
tentang parameter kita, tentang nilai

01:49.410 --> 01:53.020
yang kita kerjakan dalam kode kita.

01:53.020 --> 01:56.600
Di sini kita tidak memberikan TypeScript informasi apapun tentang

01:56.600 --> 01:59.930
tipe data yang akan kita dapatkan sebagai parameter di sini.

01:59.930 --> 02:01.320
Dan kita harus melakukannya.

02:01.320 --> 02:03.800
Jika TypeScript dapat menyimpulkan ini, maka tentu

02:03.800 --> 02:05.360
saja, tidak apa-apa, tetapi di sini

02:05.360 --> 02:08.770
bagaimana TypeScript dapat menyimpulkannya dari baris ini, perlu diingat

02:08.770 --> 02:11.470
bahwa fungsi ini dideklarasikan terlebih dahulu sebelum

02:11.470 --> 02:12.950
file ini dieksekusi.

02:12.950 --> 02:15.080
Jadi, pada saat fungsi dibuat, tidak ada

02:15.080 --> 02:18.380
peluang untuk mengetahui apa yang akan berakhir di sana.

02:18.380 --> 02:20.100
Jadi di sini kita dapat memperbaiki kesalahan

02:20.100 --> 02:22.570
ini hanya dengan mendeklarasikan tipe dan menjadi jelas tentang

02:22.570 --> 02:24.253
tipe mana yang kita gunakan di sana.

02:25.100 --> 02:29.530
Sekarang harap dicatat bahwa jika Anda memiliki variabel yang dicatat, saat Anda

02:29.530 --> 02:32.650
mengatur ini ke true di sini, Anda tidak mendapatkan kesalahan

02:32.650 --> 02:34.720
tentang deklarasi ini meskipun itu juga

02:34.720 --> 02:37.670
mendapatkan tipe default dari any.

02:37.670 --> 02:39.250
Untuk variabel, hal ini tidak masalah.

02:39.250 --> 02:40.910
Untuk parameter, itu tidak baik.

02:40.910 --> 02:42.480
Mengapa tidak apa-apa untuk variabel?

02:42.480 --> 02:44.370
Karena apa yang dilakukan TypeScript untuk variabel,

02:44.370 --> 02:45.940
apa yang mungkin dilakukan untuk variabel,

02:45.940 --> 02:47.040
apa yang tidak mungkin dilakukan

02:47.040 --> 02:48.880
di sini karena fungsi dibuat terlebih dahulu.

02:48.880 --> 02:52.490
Di sini TypeScript dapat melacak nilai yang Anda tetapkan.

02:52.490 --> 02:54.650
Anda lihat, oke, saya punya log

02:54.650 --> 02:56.720
di sini seperti ini, sekarang

02:56.720 --> 02:58.573
saya set ke true, jadi oleh

02:59.430 --> 03:04.430
karena itu, setelah itu, jika saya konsol log log di sini, itu adalah

03:06.700 --> 03:08.030
boolean.

03:08.030 --> 03:10.300
Jadi TypeScript di sini mampu memahami

03:10.300 --> 03:11.893
alur kode Anda, dan oleh karena

03:11.893 --> 03:14.320
itu, Anda tidak perlu tepat mengenai tipe

03:14.320 --> 03:15.430
di sini.

03:15.430 --> 03:18.020
Tentu saja, Anda ingin lebih tepat jika Anda ingin menghindari

03:18.020 --> 03:20.310
hal itu, Anda dapat dengan bebas menetapkan nilai baru,

03:20.310 --> 03:22.940
yang dapat Anda lakukan di sini karena bertipe any.

03:22.940 --> 03:25.700
Jadi Anda masih ingin menetapkan tipe untuk menghindari hal ini,

03:25.700 --> 03:27.680
tetapi TypeScript setidaknya dapat mengetahui

03:27.680 --> 03:29.490
apakah kode yang Anda panggil berfungsi dengan

03:29.490 --> 03:31.410
tipe yang saat ini dipegangnya.

03:31.410 --> 03:32.410
Itu tidak terjadi di sini

03:32.410 --> 03:35.360
karena di sana fungsi didefinisikan sebelum Anda memanggilnya, dan

03:35.360 --> 03:37.800
oleh karena itu, TypeScript tidak akan berubah untuk mengetahui

03:37.800 --> 03:39.570
apakah apa yang Anda masukkan di sana dapat

03:39.570 --> 03:41.393
digunakan di dalam fungsi.

03:43.280 --> 03:46.020
strictNullChecks tidak pernah menjadi pilihan penting.

03:46.020 --> 03:48.520
Ini sebenarnya terkait dengan pemilihan tombol yang kita

03:48.520 --> 03:49.410
miliki di sini.

03:49.410 --> 03:51.820
Ingat, saya harus menambahkan tanda seru di sini untuk membuatnya

03:51.820 --> 03:52.670
berfungsi.

03:52.670 --> 03:54.380
Kalau tidak, saya akan mendapatkan kesalahan.

03:54.380 --> 03:56.220
Sekarang kita juga bisa menghilangkan

03:56.220 --> 03:58.430
error tersebut tanpa menambahkan tanda

03:58.430 --> 04:02.090
seru dengan mengatur strictNullChecks ke false.

04:02.090 --> 04:04.200
Jadi mari kita lakukan itu di sini dan mari kita simpan ini.

04:04.200 --> 04:07.860
Dan seperti yang Anda lihat, kesalahan ini sekarang sudah hilang di sini.

04:07.860 --> 04:10.120
Dan saya bisa mengkompilasi semua file.

04:10.120 --> 04:12.340
Sekarang apa yang dilakukan strictNullChecks?

04:12.340 --> 04:16.160
Mereka memberi tahu TypeScript agar cukup ketat mengenai

04:16.160 --> 04:19.410
bagaimana Anda mengakses dan bekerja dengan nilai

04:19.410 --> 04:22.530
yang berpotensi memiliki nilai null.

04:22.530 --> 04:24.850
Dan tombol di sini mungkin nol.

04:24.850 --> 04:29.210
Ini tidak selalu menunjuk pada elemen tombol.

04:29.210 --> 04:31.390
Ini tidak selalu menunjuk pada elemen seperti

04:31.390 --> 04:34.220
itu karena meskipun Anda memiliki selektor seperti itu

04:34.220 --> 04:36.900
di sini, tombol mungkin tidak ada di halaman tempat

04:36.900 --> 04:38.490
skrip ini berjalan.

04:38.490 --> 04:40.840
Dan oleh karena itu, TypeScript tidak dapat mengetahui

04:40.840 --> 04:44.900
karena tidak menyelam ke dalam berkas html Anda dan melihatnya.

04:44.900 --> 04:48.240
Tidak tahu apakah ini akan berhasil atau tidak.

04:48.240 --> 04:53.130
Dan jika ini gagal mengembalikan pointer dan node null, maka akan mengembalikan

04:53.130 --> 04:56.650
null, tepatnya tidak terdefinisi, tetapi itu diperlakukan

04:56.650 --> 04:59.090
sama di sini.

04:59.090 --> 05:01.610
Jadi oleh karena itu, tombol itu mungkin memiliki nilai null,

05:01.610 --> 05:03.530
dan oleh karena itu kode ini bisa gagal.

05:03.530 --> 05:06.610
Memang, jika saya mengomentari tombol ini di sini, jika saya sekarang

05:06.610 --> 05:08.480
mengkompilasi semuanya berfungsi karena

05:08.480 --> 05:10.733
saya menonaktifkan pemeriksaan null.

05:12.000 --> 05:14.100
Tetapi saya, oleh karena itu, sekarang mengalami

05:14.100 --> 05:16.210
runtime error karena saya tidak bisa memanggil event

05:16.210 --> 05:18.230
listener, addEventListener, pada null.

05:18.230 --> 05:20.970
Dan saya tidak ada di sini karena saya tidak punya tombol.

05:20.970 --> 05:23.110
Sekarang ini adalah kesalahan yang bisa

05:23.110 --> 05:26.760
kita hindari dengan menetapkan strictNullChecks ke true.

05:26.760 --> 05:30.340
Dan itu secara otomatis ditetapkan jika kita memiliki setelan ketat ke true.

05:30.340 --> 05:34.450
Di mana TypeScript mengantisipasi bahwa hal ini mungkin terjadi,

05:34.450 --> 05:38.600
dan oleh karena itu, memaksa kita untuk mengatasinya.

05:38.600 --> 05:40.640
Sekarang satu solusi murah adalah

05:40.640 --> 05:42.820
operator tanda seru di sini.

05:42.820 --> 05:46.020
Ini memberitahu TypeScript bahwa Anda, pengembang,

05:46.020 --> 05:48.360
tahu bahwa tombol ini ada, atau

05:48.360 --> 05:53.360
bahwa operasi ini akan menghasilkan nilai non-null.

05:53.710 --> 05:55.830
Sekarang mungkin Anda melakukannya, Anda

05:55.830 --> 05:58.990
pasti melakukannya jika Anda tahu bahwa Anda sedang mengerjakan

05:58.990 --> 06:00.430
kode HTML dan ada tombol di sini,

06:00.430 --> 06:03.310
bahwa selektor ini di sini akan berfungsi.

06:03.310 --> 06:05.610
Jadi, tidak masalah menggunakan tanda seru dalam

06:05.610 --> 06:06.623
skenario ini.

06:07.600 --> 06:09.040
Jika Anda memiliki skenario

06:09.040 --> 06:11.120
lain di mana Anda tidak tahu pasti apakah

06:11.120 --> 06:13.050
itu berfungsi dan Anda hanya berharap

06:13.050 --> 06:14.170
itu berfungsi, maka mungkin

06:14.170 --> 06:18.210
lebih baik untuk hanya membungkus kode yang mungkin gagal dalam pemeriksaan if,

06:18.210 --> 06:21.570
yang akan ada di sana saat runtime juga, tentu saja.

06:21.570 --> 06:24.960
Anda cukup memeriksa apakah tombol benar di sini, yang tidak

06:24.960 --> 06:27.510
akan benar jika null atau undefined.

06:27.510 --> 06:30.060
Dan pindahkan kode itu ke dalam ini jika periksa di sini.

06:30.060 --> 06:32.470
Sekarang bahkan tanpa tanda seru, dalam

06:32.470 --> 06:35.810
mode strictNullChecks kita tidak mendapatkan error

06:35.810 --> 06:37.600
karena TypeScript memahami

06:37.600 --> 06:39.750
bahwa kode ini berada di dalam pernyataan

06:39.750 --> 06:41.991
if ini dan bahwa pernyataan if ini memastikan

06:41.991 --> 06:46.310
bahwa tombol tidak null dan ini tidak akan gagal.

06:46.310 --> 06:49.310
Jadi, ini mungkin benar-benar merupakan solusi yang lebih bersih.

06:49.310 --> 06:51.060
Namun, tentu saja, untuk menghemat

06:51.060 --> 06:54.350
kode, jika Anda tahu dengan pasti bahwa sesuatu itu memang ada,

06:54.350 --> 06:56.550
menggunakan tanda seru lebih pendek dan pilihan

06:56.550 --> 06:58.320
yang benar-benar bagus.

06:58.320 --> 07:00.450
Di sini saya mengatakan keduanya sehingga kita melihat keduanya,

07:00.450 --> 07:02.450
tentu saja Anda hanya perlu salah satu dari dua hal tersebut,

07:02.450 --> 07:04.520
baik tanda centang if, atau tanda seru.

07:04.520 --> 07:07.680
strictFunctionTypes di sini adalah sedikit pengaturan

07:07.680 --> 07:12.010
yang lebih maju yang menangkap beberapa kotak khusus yang mungkin tidak

07:12.010 --> 07:14.830
Anda miliki di banyak aplikasi.

07:14.830 --> 07:17.340
Hal ini terkait dengan, yah, jenis fungsi yang mungkin

07:17.340 --> 07:18.380
Anda siapkan.

07:18.380 --> 07:20.650
Jadi bukan tipe di dalam fungsi, tetapi jika Anda

07:20.650 --> 07:23.690
mendefinisikan bagaimana sebuah fungsi akan terlihat seperti

07:23.690 --> 07:26.220
parameter dan nilai kembalinya, dan Anda membuat tipe

07:26.220 --> 07:27.840
fungsi seperti yang Anda pelajari

07:27.840 --> 07:29.990
di modul dasar-dasar, maka di sana Anda dapat

07:29.990 --> 07:32.650
memperkenalkan kotak jika Anda bekerja dengan kelas

07:32.650 --> 07:35.560
dan pewarisan, yang belum kita pelajari, yang belum kita gunakan,

07:35.560 --> 07:39.683
dan oleh karena itu, untuk saat ini mari kita abaikan ini.

07:40.578 --> 07:43.630
strictBindCallApply, yang dapat membantu jika

07:43.630 --> 07:46.840
Anda bekerja dengan bind, call, atau apply.

07:46.840 --> 07:49.680
Untuk itu, mari kita lihat contohnya dengan cepat.

07:49.680 --> 07:52.040
Di sini kita memiliki tombol dan fungsi kita di sana.

07:52.040 --> 07:57.040
Sekarang katakanlah ini akan menjadi sebuah fungsi, yang kita definisikan di sini

07:57.780 --> 08:01.100
dengan kata kunci fungsi, atau sebagai fungsi error.

08:01.100 --> 08:03.650
Tidak masalah, saya akan menggunakan kata kunci fungsi di sini.

08:04.731 --> 08:09.731
clickHandler, dan di sana saya konsol. log diklik.

08:11.960 --> 08:13.810
Dan sekarang di sini kita arahkan ke clickHandler,

08:13.810 --> 08:15.560
dan untuk beberapa alasan, kita ingin

08:15.560 --> 08:17.670
memastikan bahwa ketika ini dieksekusi, kita

08:17.670 --> 08:19.330
mengoper argumen tertentu atau kita

08:19.330 --> 08:22.780
mengatur kata kunci ini di sana ke nilai tertentu.

08:22.780 --> 08:26.480
Sekarang katakanlah di sini kita mengharapkan argumen pesan, yang

08:26.480 --> 08:28.110
seharusnya berupa string.

08:28.110 --> 08:32.110
Dan kami juga ingin menampilkan ini di sini.

08:32.110 --> 08:34.400
Sekarang karena clickHandler dioper ke addEventListener

08:34.400 --> 08:36.010
seperti itu sehingga browser pada

08:36.010 --> 08:39.080
dasarnya mengeksekusi ini untuk kita, jika kita ingin mengkonfigurasi

08:39.080 --> 08:41.070
sebelumnya argumen yang akan dilewatkan,

08:41.070 --> 08:43.570
kita dapat menggunakan bind.

08:43.570 --> 08:47.000
Dan bind, sebagai argumen pertama, mengambil apa yang ingin

08:47.000 --> 08:49.320
kita ikat dengan kata kunci ini.

08:49.320 --> 08:51.650
Dan di sini kita bisa mengatakan bahwa itu tidak masalah

08:51.650 --> 08:53.580
bagi kita karena kita tidak menggunakan ini

08:53.580 --> 08:55.930
dalam fungsi, jadi kita mengikatnya ke null.

08:55.930 --> 08:57.700
Sekarang Anda lihat di sini saya mendapatkan error.

08:57.700 --> 09:00.610
Saya mendapatkan error yang bisa dihindari

09:00.610 --> 09:04.613
jika saya mengatur strictBindCallApply ke false.

09:07.040 --> 09:08.680
Sekarang Anda lihat kesalahannya sudah hilang.

09:08.680 --> 09:10.501
Sekarang, apa yang dilakukan opsi ini?

09:10.501 --> 09:14.180
Ini pada dasarnya memeriksa fungsi mana yang Anda panggil

09:14.180 --> 09:16.020
bind, call, atau apply.

09:16.020 --> 09:20.080
Dan ini memeriksa apakah apa yang Anda siapkan di sini masuk akal.

09:20.080 --> 09:23.440
Dan di sini TypeScript melihat kita menginginkan sebuah argumen, kita menginginkan

09:23.440 --> 09:25.450
parameter di clickHandler.

09:25.450 --> 09:28.260
Dengan bind, kita tidak mengkonfigurasi hal itu.

09:28.260 --> 09:30.600
Dan oleh karena itu, di sini kita mendapatkan error.

09:30.600 --> 09:32.180
Jika saya mengatur ini kembali ke true,

09:32.180 --> 09:34.000
atau saya hanya mengomentarinya karena,

09:34.000 --> 09:36.230
tentu saja, ini diatur ke true secara default dengan

09:36.230 --> 09:37.870
mengatur strict ke true, oleh karena

09:37.870 --> 09:39.790
itu, kita mendapatkan error lagi.

09:39.790 --> 09:42.350
Sekarang jika kita tidak mengharapkan argumen di sini,

09:42.350 --> 09:44.750
Anda lihat kesalahan akan hilang di sana jika kita

09:44.750 --> 09:46.200
hanya menghapus pesannya, karena

09:46.200 --> 09:48.140
TypeScript memahami kode kita dan melihat

09:48.140 --> 09:50.660
Anda tidak melewatkan argumen apa pun ke metode itu atau

09:50.660 --> 09:52.580
ke fungsi ini karena tidak mengambil apa

09:52.580 --> 09:54.760
pun, jadi tidak apa-apa.

09:54.760 --> 09:57.420
Tetapi tentu saja, di sini kita menginginkannya sehingga kita mendapatkan error.

09:57.420 --> 10:00.880
Solusinya adalah dengan memberikan argumen kedua ini di sini,

10:00.880 --> 10:04.350
yang merupakan argumen pertama yang ingin Anda masukkan.

10:04.350 --> 10:06.290
Sekarang TypeScript benar-benar pintar di sini.

10:06.290 --> 10:08.120
Dan misalnya, jika saya mengoper angka, ia

10:08.120 --> 10:10.310
masih akan mengeluh karena ia memahami bahwa saya

10:10.310 --> 10:11.610
membutuhkan string di sini.

10:12.500 --> 10:15.960
Jika saya mengoper string yang benar, seperti Anda dipersilakan,

10:15.960 --> 10:17.350
maka itu tidak mengeluh

10:17.350 --> 10:19.070
lagi karena tidak mengerti

10:19.070 --> 10:21.210
ini dan ia melihat bahwa ini cocok

10:21.210 --> 10:24.840
dengan definisi fungsi saya di sini.

10:24.840 --> 10:27.370
Jadi ini adalah perilaku yang sangat berguna yang memastikan

10:27.370 --> 10:30.260
bahwa Anda tidak secara tidak sengaja menggunakan bind, call, atau

10:30.260 --> 10:32.743
apply dengan cara yang tidak sesuai dengan kode Anda.

10:33.930 --> 10:36.600
Sekarang strictPropertyInitialization menjadi penting setelah

10:36.600 --> 10:37.810
kita bekerja dengan kelas.

10:37.810 --> 10:39.213
Kita bisa mengabaikannya untuk saat ini.

10:39.213 --> 10:41.890
noImplisitIni juga tidak masalah sekarang.

10:41.890 --> 10:43.650
Ini berkaitan dengan kata kunci ini

10:43.650 --> 10:45.980
dan TypeScript pada dasarnya mencoba memperingatkan

10:45.980 --> 10:48.240
Anda jika Anda menggunakan kata kunci ini di tempat

10:48.240 --> 10:51.020
yang tidak jelas apa yang dirujuknya.

10:51.020 --> 10:53.210
Dan alwaysStrict hanya mengontrol bahwa

10:53.210 --> 10:55.560
file JavaScript yang dihasilkan menggunakan

10:55.560 --> 10:58.663
mode ketat sehingga ini ditambahkan.

10:59.710 --> 11:02.383
Dengan itu, kami membahas semua opsi ketat ini.
