WEBVTT

00:02.170 --> 00:03.003
Instructeur : Maintenant

00:03.003 --> 00:04.760
que nous avons un projet correctement configuré,

00:04.760 --> 00:08.130
plongeons un peu plus profondément dans la façon dont vous pouvez déboguer votre projet ou

00:08.130 --> 00:10.500
comment vous pouvez avoir un bon flux de développement.

00:10.500 --> 00:13.560
Je vous montre ma configuration IDE de base au début

00:13.560 --> 00:14.575
de ce cours.

00:14.575 --> 00:17.750
Assurez-vous vraiment que vous avez installé les bonnes extensions.

00:17.750 --> 00:22.750
Pour TypeScript, il s'agit d'ESLint qui peut vous aider

00:22.980 --> 00:26.410
à linting votre code TypeScript.

00:26.410 --> 00:29.310
Ainsi, pour améliorer la qualité du code, vous pourriez

00:29.310 --> 00:31.620
avoir besoin d'une configuration supplémentaire

00:31.620 --> 00:33.900
pour que ESLint ait un effet.

00:33.900 --> 00:36.310
Il peut vous aider dans des projets plus

00:37.220 --> 00:38.570
avancés, mais plus intéressant

00:38.570 --> 00:40.818
encore, vous voulez vraiment utiliser

00:40.818 --> 00:43.370
Prettier pour formater automatiquement

00:43.370 --> 00:45.770
votre code et avoir un code joliment formaté

00:45.770 --> 00:49.870
et vous pourriez vouloir essayer Debugger for Chrome parce qu'il vous

00:49.870 --> 00:53.140
permet de déboguer vos fichiers TypeScript même depuis

00:53.140 --> 00:55.810
VS Code via Chrome mais sans utiliser les outils

00:55.810 --> 00:59.440
de développement de Chrome.

00:59.440 --> 01:01.820
Bien sûr, vous pouvez les utiliser aussi bien que vous

01:01.820 --> 01:02.653
avez appris.

01:02.653 --> 01:05.154
Si vous activez SourceMaps ici, ce que vous pouvez

01:05.154 --> 01:07.160
bien sûr toujours faire, vous obtenez

01:07.160 --> 01:09.240
également ces fichiers traduits, ce qui

01:09.240 --> 01:10.429
est très agréable.

01:10.429 --> 01:14.170
Mais vous pouvez également utiliser le code VS.

01:14.170 --> 01:15.960
Vous pouvez placer des points d'arrêt

01:15.960 --> 01:17.340
ici, disons dans le clickHandler

01:17.340 --> 01:19.842
et maintenant pour lancer vos fichiers ici

01:19.842 --> 01:24.842
à travers VS Code, vous devez activer sourceMaps aussi bien mais nous serons toujours

01:26.100 --> 01:28.690
capables d'utiliser VS Code au lieu du navigateur

01:28.690 --> 01:30.950
Dev Tools.

01:30.950 --> 01:34.570
Activez donc SourceMaps, placez votre point

01:34.570 --> 01:38.930
d'arrêt, puis allez dans Debug, Start Debugging.

01:38.930 --> 01:40.320
La première fois que vous l'exécutez,

01:40.320 --> 01:42.170
il devrait vous demander l'environnement

01:42.170 --> 01:45.350
et, si l'extension Debugger for Chrome est installée, vous devriez

01:45.350 --> 01:47.850
pouvoir choisir Chrome.

01:47.850 --> 01:49.960
Il va maintenant passer à un laucnh. json où vous configurez

01:49.960 --> 01:53.200
la façon dont il doit être lancé et où vous devez le faire pointer

01:53.200 --> 01:56.740
sur localhost:3000 parce que c'est là que notre serveur de développement

01:56.740 --> 01:59.330
fonctionne et bien sûr, ce processus, donc le

01:59.330 --> 02:04.220
processus de démarrage de npm devrait être opérationnel.

02:04.220 --> 02:06.910
Pour pointer vers localhost:3000 et comme webRoot,

02:06.910 --> 02:09.740
vous pouvez laisser ce placeholder ici, ce qui signifie

02:09.740 --> 02:11.890
que ce dossier de projet est supposé être l'hôte

02:11.890 --> 02:13.780
de vos fichiers, ce qui est le cas, et maintenant

02:13.780 --> 02:17.120
compilez votre code de sorte que les cartes sources soient également

02:17.120 --> 02:19.780
générées après avoir mis la configuration sourceMaps

02:19.780 --> 02:22.470
à true, de sorte que nous avons maintenant ceux-ci dans

02:22.470 --> 02:25.290
le code JavaScript.

02:25.290 --> 02:26.870
Puis avec votre point d'arrêt ajouté ici et

02:26.870 --> 02:28.400
votre lancement. json configuré,

02:28.400 --> 02:30.400
lançons le débogage ici.

02:30.400 --> 02:32.140
Commencez à déboguer pour de vrai

02:32.140 --> 02:34.830
et un nouvel onglet s'ouvrira automatiquement.

02:34.830 --> 02:36.020
Cet onglet sera fermé chaque

02:36.020 --> 02:38.730
fois que vous quitterez le processus de débogage ou si vous

02:38.730 --> 02:41.940
fermez l'onglet, le processus de débogage s'arrêtera.

02:41.940 --> 02:44.590
Maintenant, avec cela, vous entrez dans cette vue de

02:44.590 --> 02:46.790
débogage ici dans VS Code où vous pouvez suivre

02:46.790 --> 02:48.230
les variables, regarder certaines

02:48.230 --> 02:50.120
expressions et voir la pile d'appels

02:50.120 --> 02:51.910
actuelle et si vous cliquez maintenant

02:51.910 --> 02:54.120
sur Click Me, vous devriez être ramené dans

02:54.120 --> 02:56.590
l'éditeur et l'exécution du code s'arrête à votre

02:56.590 --> 02:59.630
point d'arrêt dans le fichier TypeScript et maintenant vous

02:59.630 --> 03:01.410
pouvez vous promener dans le fichier,

03:01.410 --> 03:04.540
inspecter les valeurs locales pour ce mot-clé ou pour la variable

03:04.540 --> 03:07.120
message, par exemple, les variables de script que

03:07.120 --> 03:09.750
vous pourriez avoir et les variables globales que vous

03:09.750 --> 03:13.320
avez accès aux objets globaux.

03:13.320 --> 03:15.560
Vous pouvez observer certaines

03:15.560 --> 03:19.290
expressions comme message + plusieurs points d'exclamation

03:19.290 --> 03:22.690
et vous pouvez toujours suivre la valeur qui se

03:22.690 --> 03:27.483
trouve ici dans cette fenêtre si vous le souhaitez.

03:27.483 --> 03:30.480
Et vous pouvez voir la pile d'appels de fonction actuelle,

03:30.480 --> 03:33.010
par exemple, qui se produirait dans le clickHandler

03:33.010 --> 03:34.710
et maintenant vous pouvez avancer

03:34.710 --> 03:37.590
dans votre code avec ces contrôles pour passer à l'étape

03:37.590 --> 03:39.800
suivante, sauter l'appel de fonction suivant,

03:39.800 --> 03:41.500
entrer dans l'appel de fonction ou

03:41.500 --> 03:43.827
sortir de l'appel de fonction actuel et la pile

03:43.827 --> 03:46.710
d'appels, bien sûr, s'ajustera en fonction de cela et avec

03:46.710 --> 03:49.280
cela, vous pouvez ignorer cette chose du navigateur

03:49.280 --> 03:51.920
ici, avec cela, vous pouvez toujours reprendre l'exécution

03:51.920 --> 03:56.210
du code en cliquant sur le bouton de lecture et seulement faire une pause lorsque vous

03:56.210 --> 03:58.150
atteignez votre point d'arrêt la prochaine

03:58.150 --> 04:00.290
fois.

04:00.290 --> 04:02.080
C'est ainsi que vous pouvez déboguer du code.

04:02.080 --> 04:04.050
Vous pouvez supprimer un point d'arrêt en cliquant dessus.

04:04.050 --> 04:05.910
C'est ainsi que vous pouvez déboguer

04:05.910 --> 04:07.310
du code depuis VS Code à l'aide

04:07.310 --> 04:09.728
des outils de débogage intégrés, de l'extension

04:09.728 --> 04:12.450
Chrome Debugger, de la configuration dérivée

04:12.450 --> 04:15.470
et des soureMaps définis dans votre configuration

04:15.470 --> 04:17.743
TypeScript.
