WEBVTT

00:02.120 --> 00:06.770
-：さて､ ここからは大人気のユーティリティ・ライブラリ､ Lodashを紹介します｡

00:06.770 --> 00:13.250
ここで学ぶことは､ 基本的に､ あなたが使いたいJavaScriptライブラリの例として機能します｡

00:13.250 --> 00:17.430
それがLodashであろうと､ jQueryであろうと､ 何であろうと｡ 

00:17.430 --> 00:19.510
さて､ ここで少し余談ですが､ ReactとTypeScript､

00:19.510 --> 00:21.640
あるいはNode.NETを使った作業に興味がある方は､

00:21.640 --> 00:26.718
ぜひご覧ください｡

00:26.718 --> 00:26.718
js. とExpress､

00:26.718 --> 00:31.350
そしてTypeScriptについては､ コースの後半に専用のモジュールを用意しています｡ そこでは､ TypeScriptで追加するだけでなく､

00:31.350 --> 00:35.730
もう少し多くのことを学ぶことができるからです｡

00:35.730 --> 00:40.470
しかし､ LodashやjQueryなど､ よりシンプルなライブラリの場合は､

00:40.470 --> 00:43.010
以下のような方法でうまくいきます｡

00:43.010 --> 00:45.340
そこで､ 私たちのプロジェクトでは､ Lodashを使いたいと思います｡ 

00:45.340 --> 00:48.460
Lodashはもちろん､ JavaScriptのライブラリです｡ 

00:48.460 --> 00:50.800
TypeScriptを使用する必要はなく､

00:50.800 --> 00:53.480
どのJavaScriptプロジェクトでも使用でき､

00:53.480 --> 00:59.200
インストール方法も基本的にはLodashの公式ドキュメントに記載されている通りです｡

00:59.200 --> 01:01.400
npmを使用している場合は､ npm iまたはnpm

01:01.400 --> 01:06.477
installを実行すればよいのですが､ これは単に「-save/lodash」という短い形式です｡

01:07.750 --> 01:10.820
このサンプルプロジェクトでは､ 開発ワークフローだけでなく､

01:10.820 --> 01:14.180
本番ワークフローでもwebpackを使用しています｡

01:14.180 --> 01:16.570
そこで､ nmp install dash dash save Lodashを実行することで､

01:16.570 --> 01:18.607
このライブラリを追加することができます｡

01:18.607 --> 01:23.500
そして､ このプロジェクトにインストールされ､ webpackの設定のおかげで､

01:23.500 --> 01:27.517
コードファイルにインポートして､ そこで利用することができます｡

01:27.517 --> 01:32.250
そしてそれは､ どのwebpackを使ったJavaScriptプロジェクトでも同じでしょう｡

01:32.250 --> 01:37.720
webpackを使っていないのであれば､ もちろん単純にCDNなどを利用するのもありです｡

01:37.720 --> 01:40.630
しかし､ このモジュールの少し後の次のステップで紹介することは､

01:40.630 --> 01:45.130
webpackのセットアップでのみ動作します｡

01:45.130 --> 01:47.730
Webpackのセットアップ､ Lodashのインストール､

01:47.730 --> 01:49.320
そしてLodashを使用する場合は､

01:49.320 --> 01:51.510
ここでインポートすることができます｡

01:51.510 --> 01:55.600
例えばunderscoreを'Lodash'からインポートすることができます｡ 

01:55.600 --> 01:59.960
これは､ Lodashがインストールされていれば使えるはずの構文です｡

01:59.960 --> 02:03.057
しかし､ これは現在すでにエラーが出ています｡ 

02:03.057 --> 02:06.850
"モジュール Lodash の宣言ファイルが見つかりませんでした" と表示されます｡ 

02:06.850 --> 02:09.890
例えばLodashを使って配列をシャッフルしたい場合､

02:09.890 --> 02:12.230
log underscore shuffleをコンソールして､

02:12.230 --> 02:20.430
単純な配列をこのshuffleメソッドに渡せばいいわけです｡

02:20.430 --> 02:23.110
Lodashがサポートするメソッドにshuffleメソッドがあります｡ 

02:23.110 --> 02:26.820
Lodashの公式ドキュメントで学ぶことができます｡

02:26.820 --> 02:29.056
そこで「shuffle」と検索すると､

02:29.056 --> 02:32.370
この方法で配列をシャッフルできることを知ることができる｡

02:32.370 --> 02:39.480
だから､ なんとなくうまくいくはずなのですが､ 実際にはこの通りにはいきません｡

02:39.480 --> 02:45.890
ここでwebpackサーバを起動すると､ CDNがエラーを出すことがわかります｡

02:45.890 --> 02:50.940
そしてまた､ 「モジュールLodashの宣言ファイルが見つかりません」と表示されます｡

02:50.940 --> 02:54.720
だから､ これは本当にあるべき姿ではないんです｡ 

02:54.720 --> 02:59.930
さて､ ここで問題なのは､ LodashがシンプルなJavaScriptライブラリであることです｡

02:59.930 --> 03:02.250
バニラJavaScriptで構築されており､

03:02.250 --> 03:05.150
バニラJavaScriptのために構築されています｡

03:05.150 --> 03:08.530
node modulesに行くと､ たくさんの依存関係があります｡

03:08.530 --> 03:14.220
webpackとその依存関係がそこにあるからです｡

03:14.220 --> 03:17.930
しかし､ ここで､ Lodashを検索してみると､ ここにあります｡

03:17.930 --> 03:22.750
そして､ JavaScriptのファイルがたくさんあるのを確認しながら展開します｡

03:22.750 --> 03:26.380
そしてそれは､ Lodashのすべてのソースコードに存在します｡ 

03:26.380 --> 03:30.010
JavaScriptのコードはたくさんあるが､ TypeScriptのコードはない｡ 

03:30.010 --> 03:31.750
さて､ それの何が問題なのでしょうか？

03:31.750 --> 03:37.070
問題は､ TypeScriptがこのパッケージの中身を理解できていないことだ｡

03:37.070 --> 03:41.020
Lodashがどのメソッドをエクスポートしているのかを理解していない｡ 

03:41.020 --> 03:45.500
ここで､ tsconfigにアクセスしてみると､ 実際に動作していることがわかります｡

03:45.500 --> 03:45.500
jsonファイルです｡ 

03:45.500 --> 03:48.740
そして､ エラー時に出力を出すようにしています｡ 

03:48.740 --> 03:55.770
そこで､ 「noEmitOnError」を「false」に切り替えると､ 何かエラーが発生したときに新しい出力が出るようになります｡

03:55.770 --> 03:57.600
とりあえず､ これをもう一度始めてみてください｡

03:57.600 --> 04:02.160
最終的には同じエラーが出ますので､ やはりそれを見ることになります｡

04:02.160 --> 04:07.120
しかし､ このページを再読み込みすると､ 実際にここに出力されることになります｡

04:07.120 --> 04:08.922
この下のエラーは無視して､

04:08.922 --> 04:12.580
シャッフルされた配列が出力されます｡

04:12.580 --> 04:14.920
ほら､ リロードするたびに見た目が違うでしょ｡ 

04:14.920 --> 04:16.530
そして､ それはとても興味深いことです｡ 

04:16.530 --> 04:21.280
Lodashが動作することを証明し､ このコードが正しいことを証明しています｡

04:21.280 --> 04:24.170
しかし､ 残念ながらTypeScriptはそれを理解できません｡

04:24.170 --> 04:28.400
LodashはTypeScriptではなく､ JavaScriptを使用しているからです｡

04:28.400 --> 04:34.080
問題は､ LodashのTypeScript版が存在しないことです｡

04:34.080 --> 04:37.220
そしてそれは､ かなりの確率で遭遇するシナリオです｡ 

04:37.220 --> 04:39.365
あるサードパーティのライブラリを使いたいのですが､

04:39.365 --> 04:44.210
それがJavaScript用にしか作られていないため､ このようなエラーが発生するのです｡

04:44.210 --> 04:46.060
理論上はもちろん使えるので､

04:46.060 --> 04:47.430
これは悩ましい｡

04:47.430 --> 04:49.630
TypeScriptは､ JavaScriptの上に構築されます｡ 

04:49.630 --> 04:56.150
TypeScriptのプロジェクトでは､ どんなJavaScriptライブラリでも使用することができます｡

04:56.150 --> 04:58.890
そして､ それはありがたいことに可能なのです｡ 

04:58.890 --> 05:04.220
そこで､ この設定「noEmitOnError true」をオンにしてみます｡

05:04.220 --> 05:10.053
Lodashについて､ そしてLodashが提供するものについて､ TypeScriptにどのように伝えることができるかをお見せしましょう｡

05:11.140 --> 05:16.250
いわゆるサードパーティライブラリの種類をインストールすることができます｡

05:16.250 --> 05:20.050
Lodash typesで検索すると､ npmパッケージが見つかりますが､

05:20.050 --> 05:24.140
ここでは「@types/lodash」となっています｡

05:24.140 --> 05:26.440
そこにインストールコマンドも表示され､

05:26.440 --> 05:28.120
すぐに実行されます｡

05:28.120 --> 05:32.220
しかし､ 詳細を見ていくと､ githubのリポジトリへのリンクもあります｡

05:32.220 --> 05:36.320
DefinitelyTypedは､ あらゆる種類のサードパーティライブラリの翻訳を集めた巨大なレポジトリで､

05:36.320 --> 05:40.820
これにリンクしています｡

05:40.820 --> 05:43.120
ここでは､ Lodashのフォルダにいます｡ 

05:43.120 --> 05:46.590
そして､ そこには､ いわゆる. dtsファイルです｡ 

05:46.590 --> 05:50.180
だから､ ただではなく｡  ts でも. dtsです｡ 

05:50.180 --> 05:55.760
これらはいわゆる宣言ファイルであり､ 実際のロジックは含まれていないのですが､

05:55.760 --> 06:01.848
シャッフル. dtsファイルには､ TypeScriptへの指示が書かれています｡

06:01.848 --> 06:08.720
基本的には､ TypeScriptがどのように動作し､ このパッケージには何が含まれているのかを伝えるものである｡

06:08.720 --> 06:10.700
そして､ ここではすべて異なるサブフォルダーにあるさまざまなファイルを探索し､

06:10.700 --> 06:14.280
その詳細を知ることができます｡

06:14.280 --> 06:21.750
つまり､ 最終的にこれらのファイルは､ プレーンなJavaScriptからTypeScriptへの翻訳を提供しているに過ぎないのです｡

06:21.750 --> 06:23.860
これらは実行されるロジックを含んでいませんが､

06:23.860 --> 06:26.950
このライブラリが扱う型を定義しています｡

06:26.950 --> 06:32.490
使用する型､ メソッドを呼び出したときに返ってくる型などを定義しています｡

06:32.490 --> 06:35.410
などと書くこともできます｡  dtsファイルについては､

06:35.410 --> 06:38.510
公式のtype of docsにガイドが掲載されていますので､

06:38.510 --> 06:40.470
興味のある方はご覧ください｡

06:40.470 --> 06:42.110
しかし､ 自分のタイプのプロジェクトでは､

06:42.110 --> 06:43.160
そんなことをする必要はありません｡

06:43.160 --> 06:48.110
TypeScriptのコードを書いていれば､ もちろんTypeScriptだけがそれを理解しますから｡

06:48.110 --> 06:50.310
しかし､ TypeScriptのコードがなく､ JavaScriptで書かれたサードパーティのライブラリを使用している場合や､

06:50.310 --> 06:56.860
.NET Frameworkが組み込まれていない場合は､ TypeScriptを使用することはできません｡

06:56.860 --> 06:56.860
dtsファイルは､

06:56.860 --> 07:03.960
サードパーティのライブラリの中には､ JavaScriptで書かれていても同梱されているものがありますが､ Lodashは同梱していません｡

07:03.960 --> 07:06.890
ですから､ 翻訳ファイルが組み込まれていないライブラリや､

07:06.890 --> 07:11.180
TypeScriptでネイティブに書かれていないライブラリを扱う場合は､

07:11.180 --> 07:15.760
このような型パッケージを使うのが解決策になります｡

07:15.760 --> 07:20.760
そこで､ ここでは､ 「npm install --save@types/Lodash 」を実行します｡ 

07:21.860 --> 07:24.600
devは開発時にのみ必要な依存関係なので､

07:24.600 --> 07:32.360
実際には "save-dev "を実行することもできます｡

07:32.360 --> 07:36.130
そして､ これは今､ TypeScriptからこの翻訳をインストールして､

07:36.130 --> 07:38.060
理解します｡

07:38.060 --> 07:42.510
そして､ これをインストールした途端､ このエラーが出なくなったでしょ？

07:42.510 --> 07:48.270
そして今､ npm startを再起動すると､ ここでもエラーが出なくなるのがわかると思います｡

07:48.270 --> 07:55.190
これで､ コンパイル時とブラウザ時の両方で､ エラーなく動作することがおわかりいただけたと思います｡

07:55.190 --> 07:57.270
技術的には以前も使えたのですが､

07:57.270 --> 08:01.580
今回の翻訳で､ TypeScriptも活用できるようになりました｡

08:01.580 --> 08:05.493
また､ 例えば今はIDEですべての補完ができるようになっています｡

08:05.493 --> 08:10.070
ここにドットを打つと､ 使えるLodashのメソッドが表示されます｡ 

08:10.070 --> 08:16.400
このため､ TypeScriptプロジェクトで通常のバニラJavaScriptライブラリを使用しても､

08:16.400 --> 08:21.177
優れたサポート､ 優れた自動補完､ そしてエラーを回避することができる､

08:21.177 --> 08:28.490
非常に重要な知識であり､ 絶対に知っておかなければならないことです｡

08:28.490 --> 08:33.990
これらのトランザムタイプのパッケージの力を借りれば､ こう言えるでしょう｡

08:33.990 --> 08:38.990
これらのパッケージは､ 常に"@types "とパッケージ名が付けられていて､

08:39.290 --> 08:40.860
基本的に､ 人気のあるサードパーティライブラリであれば､

08:40.860 --> 08:46.730
どれでも存在するものです｡

08:46.730 --> 08:49.960
ライブラリ名で検索し､ jQuery typesなどで検索すると､

08:49.960 --> 08:54.400
そのようなエントリが見つかるはずです｡

08:54.400 --> 08:59.373
これが､ バニラJavaScriptのライブラリで型を扱う方法です｡
