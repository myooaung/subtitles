WEBVTT

00:02.220 --> 00:03.760
Istruttore: L'ultimo tipo interessante

00:03.760 --> 00:07.490
che voglio mostrare in questo modulo è il tipo never.

00:07.490 --> 00:10.660
Ora abbiamo visto una funzione che restituisce void.

00:10.660 --> 00:13.058
Quindi non restituisce mai nulla.

00:13.058 --> 00:17.380
Mai è un altro tipo di funzione che può essere restituito.

00:17.380 --> 00:19.240
E questo potrebbe sembrare strano.

00:19.240 --> 00:21.110
Vediamo come funziona.

00:21.110 --> 00:24.662
Supponiamo di avere una funzione generateError.

00:24.662 --> 00:28.280
Qui mi aspetto di ricevere un messaggio, che è una stringa, e forse

00:28.280 --> 00:31.610
un codice di errore, che potrebbe essere un numero.

00:31.610 --> 00:33.700
Ora, all'interno di questa funzione, supponiamo

00:33.700 --> 00:35.130
di lanciare un errore.

00:35.130 --> 00:37.760
Quindi dovrebbe essere essenzialmente una

00:37.760 --> 00:41.500
funzione di utilità che genera oggetti di errore e li lancia.

00:41.500 --> 00:42.990
Quindi potremmo lanciare un oggetto, cosa

00:42.990 --> 00:44.380
che possiamo fare in JavaScript.

00:44.380 --> 00:47.366
Possiamo lanciare qualsiasi oggetto o valore come

00:47.366 --> 00:49.930
errore e questo dovrebbe avere una proprietà

00:49.930 --> 00:53.990
message, in cui memorizzare il valore dell'argomento message.

00:53.990 --> 00:56.390
E voglio avere una proprietà codice di errore,

00:56.390 --> 00:59.417
diciamo cancellare la parola, l'argomento codice in .

01:00.330 --> 01:02.390
Così è per la funzione invalido,

01:02.390 --> 01:06.600
che può essere richiamata con un errore verificatosi,

01:06.600 --> 01:09.640
ad esempio, e un codice 500.

01:09.640 --> 01:12.213
Se lo facciamo e compiliamo questo file, vedremo

01:14.120 --> 01:17.080
che una volta ricaricato otterremo il nostro errore,

01:17.080 --> 01:19.150
come un errore qui.

01:19.150 --> 01:21.670
Questo potrebbe sembrare un concetto piuttosto astratto,

01:21.670 --> 01:22.850
ma in realtà non lo è.

01:22.850 --> 01:24.640
Avere funzioni di utilità come questa

01:24.640 --> 01:27.850
sarebbe abbastanza standard nelle applicazioni più grandi,

01:27.850 --> 01:30.270
dove non si vuole lanciare manualmente un errore

01:30.270 --> 01:32.540
in 10 punti diversi della propria applicazione

01:32.540 --> 01:35.380
e dove si vuole raggiungere una funzione comoda che costruisca

01:35.380 --> 01:37.450
l'oggetto errore per noi e magari lo lanci

01:37.450 --> 01:39.350
immediatamente, in modo da poter chiamare

01:39.350 --> 01:42.300
questa funzione con input diversi, ma con un errore sempre

01:42.300 --> 01:44.690
lanciato.

01:44.690 --> 01:47.010
La cosa interessante di questa funzione è che

01:47.010 --> 01:49.048
non restituisce semplicemente void.

01:49.048 --> 01:52.385
In realtà posso specificare che restituisce void,

01:52.385 --> 01:54.545
perché ovviamente non restituisce

01:54.545 --> 01:58.030
nulla, ma in realtà non restituisce solo nulla, se siamo

01:58.030 --> 02:02.630
del tutto onesti, questa funzione non restituisce mai.

02:02.630 --> 02:05.518
Questa funzione non produce mai un valore di ritorno.

02:05.518 --> 02:08.860
Se provo a ripristinare il valore di ritorno qui, in un risultato

02:08.860 --> 02:11.193
di log della console, e poi compilo il mio

02:12.040 --> 02:16.240
codice in questo execute, vediamo che non c'è nessun undefined che viene

02:16.240 --> 02:19.630
registrato qui, perché dato che viene lanciato un errore,

02:19.630 --> 02:22.220
questo essenzialmente manda in crash il nostro

02:22.220 --> 02:25.330
script, si potrebbe dire.

02:25.330 --> 02:27.080
Annulla la nostra sceneggiatura.

02:27.080 --> 02:30.290
E questo sarà sempre il caso di questa funzione.

02:30.290 --> 02:32.210
Naturalmente possiamo avvolgerla in try

02:32.210 --> 02:34.260
catch, in modo da poter continuare in questo

02:34.260 --> 02:37.620
script, ma questa funzione essenzialmente non produce mai un valore.

02:37.620 --> 02:41.060
Questa funzione blocca sempre lo script o questa

02:41.060 --> 02:42.910
parte dello script, se si

02:42.910 --> 02:44.720
utilizza try catch, e quindi

02:44.720 --> 02:47.910
non restituisce mai nulla.

02:47.910 --> 02:50.400
Quindi il tipo di ritorno di questa

02:50.400 --> 02:54.483
funzione non è solo void, ma anche never.

02:55.710 --> 02:56.700
La cosa interessante

02:56.700 --> 02:59.060
è che se ci si passa sopra senza assegnare

02:59.060 --> 03:01.680
mai, si vede che il tipo dedotto è void.

03:01.680 --> 03:05.410
Alls perché never è un tipo più recente, esiste da un po'

03:05.410 --> 03:07.060
di tempo, ma non è stato integrato

03:07.060 --> 03:10.000
nelle prime versioni di TypeScript e quindi

03:10.000 --> 03:12.620
void è tipicamente assunto e non è orribile

03:12.620 --> 03:15.417
lasciarlo così.

03:15.417 --> 03:17.740
Ma si può essere molto chiari e impostare

03:17.740 --> 03:21.470
esplicitamente never come tipo di ritorno, per chiarire

03:21.470 --> 03:24.490
che non restituisce mai nulla.

03:24.490 --> 03:26.770
Quindi, dal punto di vista della qualità del codice,

03:26.770 --> 03:29.560
questo potrebbe essere più chiaro riguardo alle vostre

03:29.560 --> 03:30.680
intenzioni e far capire

03:30.680 --> 03:32.330
ai nostri sviluppatori che leggono

03:32.330 --> 03:35.850
il vostro codice che questa funzione è destinata a non restituire mai nulla

03:35.850 --> 03:40.954
e a mandare in crash o interrompere il vostro script, o quella parte dello script.

03:40.954 --> 03:43.890
Un'altra funzione che non restituirebbe mai, tra

03:43.890 --> 03:47.190
l'altro, sarebbe una funzione con un ciclo infinito.

03:47.190 --> 03:49.370
Quindi, se abbiamo un while (true), si

03:49.370 --> 03:51.060
crea un ciclo infinito e quindi

03:51.060 --> 03:52.790
anche questa sarebbe una funzione

03:52.790 --> 03:54.410
che non ritorna mai.

03:54.410 --> 03:56.070
La funzione error qui, o la funzione

03:56.070 --> 03:58.852
che genera un errore congelato, è probabilmente

03:58.852 --> 04:01.305
il caso d'uso più comune.

04:01.305 --> 04:04.500
Quindi mai, anche questo è un tipo interessante,

04:04.500 --> 04:06.230
che si può usare nelle funzioni

04:06.230 --> 04:08.553
per casi come questo.
