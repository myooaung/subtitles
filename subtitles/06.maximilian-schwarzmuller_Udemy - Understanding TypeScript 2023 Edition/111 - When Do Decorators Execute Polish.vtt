WEBVTT

00:02.440 --> 00:04.260
-: Zanim zanurkujemy w więcej przykładów,

00:04.260 --> 00:05.433
zrozummy kolejność, w której

00:05.433 --> 00:07.940
dekoratorzy uruchamiają chociaż.

00:07.940 --> 00:10.530
I tutaj ważne jest, aby zrozumieć, że po

00:10.530 --> 00:11.950
pierwsze, wszystkie

00:11.950 --> 00:13.710
one działają bez nas instantiating

00:13.710 --> 00:15.396
ten produkt.

00:15.396 --> 00:16.600
Lub, innymi słowy,

00:16.600 --> 00:18.300
jeśli utworzę produkt

00:18.300 --> 00:19.670
tutaj z, nowy produkt,

00:19.670 --> 00:21.233
książka, za $19, i tworzę

00:21.233 --> 00:26.660
inny produkt tutaj, książka dwa za, $29.

00:26.660 --> 00:27.887
to spełniło się bez

00:27.887 --> 00:29.970
błędów mojego kodu dekoratora tutaj

00:29.970 --> 00:31.730
nie działa częściej.

00:31.730 --> 00:35.350
Więc to nie instantyfikacja tej klasy ma znaczenie.

00:35.350 --> 00:36.680
Wszystkie te dekoratory,

00:36.680 --> 00:38.452
bez względu na to, czy był to dekorator

00:38.452 --> 00:41.810
właściwości, dekorator metody, dekorator dostępu, czy dekorator

00:41.810 --> 00:43.620
parametrów, wszystkie zostały

00:43.620 --> 00:46.770
wykonane, gdy zdefiniowałeś tę klasę, i to jest ważne,

00:46.770 --> 00:48.930
aby zrozumieć.

00:48.930 --> 00:50.960
To nie są dekoratory, które są uruchamiane

00:50.960 --> 00:53.190
w czasie rzeczywistym, gdy wywołujesz ich metodę

00:53.190 --> 00:55.100
lub gdy pracujesz z właściwością.

00:55.100 --> 00:57.190
To nie jest to, co oni robią.

00:57.190 --> 00:59.360
Zamiast tego te dekoratory pozwalają

00:59.360 --> 01:01.875
wykonać dodatkową zakulisową pracę konfiguracyjną,

01:01.875 --> 01:04.397
gdy klasa jest zdefiniowana.

01:04.397 --> 01:06.590
Wracamy do tej koncepcji metaprogramowania, którą

01:06.590 --> 01:08.070
wyjaśniłem wcześniej, prawda.

01:08.070 --> 01:10.200
To jest idea stojąca za dekoratorami lub

01:10.200 --> 01:12.410
to jest ich podstawowy przypadek użycia.

01:12.410 --> 01:15.520
Nie są słuchaczami zdarzeń, które dodajesz do czegoś, aby podczas

01:15.520 --> 01:17.100
pracy z właściwością można było

01:17.100 --> 01:18.490
uruchomić jakiś kod.

01:18.490 --> 01:19.740
Możesz sprawić, że coś

01:19.740 --> 01:21.069
takiego będzie działało

01:21.069 --> 01:23.740
z dekoratorami, ale przez podrasowanie i edycję

01:23.740 --> 01:24.977
czegoś za kulisami,

01:24.977 --> 01:26.756
ale sam dekorator naprawdę jest

01:26.756 --> 01:29.710
tylko funkcją, która wykonuje się, gdy twoja klasa

01:29.710 --> 01:33.233
jest zdefiniowana, gdy twoja (mamrocze) i możesz wtedy użyć

01:33.233 --> 01:35.010
dekoratora, aby wykonać pewną

01:35.010 --> 01:37.460
pracę za kulisami, aby następnie skonfigurować

01:37.460 --> 01:39.890
jakiś kod, który powinien działać, gdy

01:39.890 --> 01:43.660
tylko zostanie wywołany.

01:43.660 --> 01:47.310
Aby dodać dodatkowe meta dane lub przechowywać niektóre dane o

01:47.310 --> 01:50.030
właściwości gdzieś indziej w projekcie lub w bibliotece,

01:50.030 --> 01:51.696
którą tworzysz.

01:51.696 --> 01:54.075
To jest to, do czego możesz używać dekoratorów,

01:54.075 --> 01:55.756
i to jest cały wzór, który będziesz

01:55.756 --> 01:58.420
jakby widział, kiedy teraz pokażę ci te przykłady

01:58.420 --> 02:02.290
tego, co możesz zbudować z dekoratorami.

02:02.290 --> 02:04.740
Dodają dodatkową funkcjonalność za kulisami,

02:04.740 --> 02:06.200
która następnie czasami

02:06.200 --> 02:08.060
może wykonać, gdy robisz coś ze

02:08.060 --> 02:12.740
swoją klasą lub ze swoją metodą, ale która może również robić zupełnie inne

02:12.740 --> 02:14.313
rzeczy.

02:15.240 --> 02:17.860
To wszystko jest ważne dla naszego przykładu

02:17.860 --> 02:21.320
osoby z wcześniej z dekoratorem szablonów.

02:21.320 --> 02:22.980
To nie dodaje tego szablonu za każdym

02:22.980 --> 02:25.160
razem, gdy instancjonujemy tutaj osobę.

02:25.160 --> 02:27.890
Dodaje ją zawsze, gdy definiujemy tę klasę.

02:27.890 --> 02:29.820
Musielibyśmy dodać dodatkową logikę

02:29.820 --> 02:31.650
wewnątrz naszej funkcji dekoratora,

02:31.650 --> 02:33.140
aby zmienić to zachowanie.

02:33.140 --> 02:35.980
I być może po prostu przechowywać ten szablon w jakiejś

02:35.980 --> 02:38.441
innej strukturze danych naszego projektu,

02:38.441 --> 02:41.380
do której następnie wejdziemy za każdym razem, gdy będziemy

02:41.380 --> 02:43.650
tworzyć tutaj nową osobę.

02:43.650 --> 02:45.278
Więc wtedy w zasadzie po prostu ustawiamy

02:45.278 --> 02:47.240
to, gdy definiujemy klasę, ale potem po prostu

02:47.240 --> 02:48.400
przechowujemy ją za kulisami

02:48.400 --> 02:49.890
wewnętrznie i możemy następnie

02:49.890 --> 02:52.350
użyć jej, gdy chcemy jej użyć.

02:52.350 --> 02:54.160
W tej chwili zawsze renderujemy to,

02:54.160 --> 02:55.380
gdy definiujemy tę klasę,

02:55.380 --> 02:57.610
a nie gdy tworzysz nową instancję.

02:57.610 --> 02:59.570
Tak właśnie wykonują się dekoratory

02:59.570 --> 03:00.403
i jak powiedziałem,

03:00.403 --> 03:01.940
teraz pokażę Ci kilka przykładów,

03:01.940 --> 03:04.504
gdzie wykorzystujemy dekoratory w ogóle i ich

03:04.504 --> 03:06.900
czas wykonania, aby zrobić z nimi kilka fajnych

03:06.900 --> 03:08.883
rzeczy.
