WEBVTT

00:02.090 --> 00:05.740
ナレーター: インターフェイスとクラスについては以上です｡ 

00:05.740 --> 00:09.630
このモジュールでは､ クラスとそこで何ができるかを詳しく見てきました｡

00:09.630 --> 00:11.390
クラスとTypeScriptは､

00:11.390 --> 00:14.130
結局のところ､ JavaScriptのクラスの上に構築されているだけで､

00:14.130 --> 00:18.720
このモジュールの前半ですでに少しまとめました｡

00:18.720 --> 00:20.710
インターフェイスは別物です｡ 

00:20.710 --> 00:22.600
TypeScriptにしか存在しない｡ 

00:22.600 --> 00:24.670
これは純粋なTypeScriptの機能であり､

00:24.670 --> 00:29.450
明快で明確な構造の､ 非常に明示的なコードを書くのに役立ちます｡

00:29.450 --> 00:36.810
クラスが特定の機能を持つように､ あるいは一般的なオブジェクトが特定の構造を持つように強制することができます｡

00:36.810 --> 00:39.860
これらは､ 学習したように､ 関数型として使用することができます｡ 

00:39.860 --> 00:42.490
彼らは､ メソッド名の後にクエスチョンマークを追加すると､

00:42.490 --> 00:48.290
オプションのプロパティとすべて､ したがってオプションのメソッドを許可します｡

00:48.290 --> 00:50.190
だから､ それは使えるものなんです｡ 

00:50.190 --> 00:55.870
そして､ 先ほど見たように､ TypeScriptがコードをチェックする役割を果たした後にコンパイルされるとき､

00:55.870 --> 01:00.410
これらのインターフェースは何も省かれることはないのです｡

01:00.410 --> 01:02.300
コードは単純にダンプされる｡ 

01:02.300 --> 01:07.420
しかし､ インターフェースは､ クラスやオブジェクトに一定の構造を強制し､

01:07.420 --> 01:14.810
オブジェクトがどのように見えるべきかという考えを明確に記述するための強力な機能です｡

01:14.810 --> 01:21.120
このように､ カスタムタイプに置き換えることができます｡

01:21.120 --> 01:23.580
カスタムタイプを実装することもできますが､

01:23.580 --> 01:32.180
その場合は単純にインターフェイスを使うのが一般的で､ 実装するよりもオブジェクトを記述したい場合はインターフェイスを使います｡

01:32.180 --> 01:40.710
これは歴史的な理由によるもので､ TypeScriptの初期にはカスタムタイプをインターフェースのように実装したり使用したりすることができなかったからです｡

01:40.710 --> 01:42.610
現在はより柔軟になっていますが､ オブジェクトを扱う場合や､

01:42.610 --> 01:48.680
オブジェクトの構造を記述する場合は､ やはりインターフェースを使うことをお勧めします｡

01:48.680 --> 01:51.883
また､ このコースを通して何度も何度も目にすることになります｡
