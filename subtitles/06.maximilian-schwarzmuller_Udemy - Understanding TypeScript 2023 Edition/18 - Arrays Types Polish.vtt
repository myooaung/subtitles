WEBVTT

00:02.170 --> 00:06.250
-: Teraz oprócz obiektów mamy też tablice w JavaScript,

00:06.250 --> 00:08.300
bardzo ważny typ danych.

00:08.300 --> 00:10.810
Tablice tworzy się tak w JavaScript, jak wiesz, i

00:10.810 --> 00:12.560
można w nich przechowywać dowolne

00:12.560 --> 00:15.970
dane: liczby, ciągi znaków, booleans, obiekty, inne tablice, można

00:15.970 --> 00:17.970
mieć przecież tablice zagnieżdżone, można

00:17.970 --> 00:19.380
też mieszać dane.

00:19.380 --> 00:23.200
Możesz mieć tablicę z mieszanymi ciągami i liczbami.

00:23.200 --> 00:25.570
A TypeScript obsługuje również tablice.

00:25.570 --> 00:29.260
Każda tablica JavaScript jest obsługiwana, a typy tej

00:29.260 --> 00:32.140
tablicy mogą być elastyczne, lub ścisłe.

00:32.140 --> 00:35.200
Teraz przyjrzyjmy się temu w TypeScript.

00:35.200 --> 00:38.760
Do tego tutaj w aplikacji. ts, powiedzmy, że nasza osoba

00:38.760 --> 00:42.810
ma również klucz hobbies, ale oczywiście moglibyśmy również mieć

00:42.810 --> 00:45.660
zmienną lub stałą hobbies poza obiektem.

00:45.660 --> 00:49.050
Tak więc, używanie tablic jako dokładnie takich samych wewnątrz

00:49.050 --> 00:50.853
obiektów i poza nimi.

00:51.950 --> 00:54.780
Mamy więc tutaj hobby, a hobby może

00:54.780 --> 00:58.140
być sport, a także powiedzmy gotowanie.

00:58.140 --> 01:01.150
Więc mam tam dwa elementy, a te elementy, jak

01:01.150 --> 01:03.620
możesz powiedzieć, są ciągami.

01:03.620 --> 01:07.570
Teraz jeśli najedziemy na hobby, TypeScript poprawnie

01:07.570 --> 01:10.630
wykrył odległość tablicy stringów typu.

01:10.630 --> 01:12.500
Teraz jest to składnia, której nie widziałeś

01:12.500 --> 01:16.140
wcześniej, ale tak właśnie TypeScript opisuje tablicę danych.

01:16.140 --> 01:18.510
Masz nawiasy kwadratowe, a przed nimi

01:18.510 --> 01:21.340
typ danych, które są tam przechowywane.

01:21.340 --> 01:23.530
Teraz jest to typ, grupa typu wnioskuje.

01:23.530 --> 01:25.810
Zobaczyło, że tutaj mamy tablicę i że

01:25.810 --> 01:29.110
mamy tam tylko ciągi, więc wywnioskowało, że hobby prawdopodobnie

01:29.110 --> 01:31.940
powinno być tablicą ciągów.

01:31.940 --> 01:34.903
I rzeczywiście, w przypadku hobby ma to duży sens.

01:36.210 --> 01:41.040
Oczywiście można też jawnie ustawić typ zmiennej.

01:41.040 --> 01:44.720
Jeśli dodalibyśmy nową zmienną, ulubione aktywności,

01:45.580 --> 01:48.670
i początkowo powinna być ona pusta, to moglibyśmy

01:48.670 --> 01:51.160
chcieć jawnie ustawić typ przechowywanych

01:51.160 --> 01:53.140
tam danych.

01:53.140 --> 01:55.590
Powiedzmy, że powinna to być tablica łańcuchów, cóż, możemy

01:55.590 --> 01:57.570
po prostu powtórzyć to, co widzieliśmy przed

01:57.570 --> 02:00.330
chwilą; wpiszemy string, a następnie nawiasy kwadratowe, a to

02:00.330 --> 02:03.330
powie TypeScriptowi, że to, co przechowujemy w tym miejscu, nie jest

02:03.330 --> 02:05.990
pojedynczym łańcuchem, ale tablicą łańcuchów.

02:05.990 --> 02:09.550
I rzeczywiście, jeśli próbuję przechowywać tam tylko sport,

02:09.550 --> 02:12.183
dostaję błąd. Otrzymuję błąd, ponieważ

02:12.183 --> 02:15.650
to tutaj jest pojedynczy ciąg, a nie tablica ciągów.

02:15.650 --> 02:19.370
Nie dostanę błędu, oczywiście, jeśli zawinę to w nawiasy kwadratowe,

02:19.370 --> 02:22.610
a zatem skutecznie utworzę tablicę.

02:22.610 --> 02:25.870
Ponownie otrzymuję jednak błąd, jeśli dodaję liczbę, powiedzmy,

02:25.870 --> 02:29.220
ponieważ definiujemy to jako tablicę łańcuchów.

02:29.220 --> 02:31.290
Teraz tutaj mamy mieszaną tablicę.

02:31.290 --> 02:34.920
Jest to tablica ciągów i liczb, więc to nie działa

02:34.920 --> 02:37.180
i nie jest obsługiwane tutaj.

02:37.180 --> 02:40.100
Gdybyśmy chcieli obsłużyć taką mieszaną tablicę,

02:40.100 --> 02:43.120
jednym z rozwiązań byłoby użycie tutaj "any".

02:43.120 --> 02:45.880
Typ "any" jest specjalnym typem w TypeScript, któremu

02:45.880 --> 02:47.610
przyjrzymy się bliżej później,

02:47.610 --> 02:50.530
co zasadniczo oznacza, rób co chcesz.

02:50.530 --> 02:53.020
Jest to oczywiście typ, którego nie chcesz używać zbyt często,

02:53.020 --> 02:55.630
ponieważ stracisz korzyści, jakie daje TypeScript, twój powrót

02:55.630 --> 02:58.170
do świata JavaScript, gdzie również możesz użyć dowolnej

02:58.170 --> 03:00.140
wartości w dowolnym miejscu.

03:00.140 --> 03:02.940
Tak więc "dowolny" jest naprawdę elastyczny, ale elastyczność

03:02.940 --> 03:06.270
przychodzi za cenę zasadniczo rezygnacji ze wszystkich korzyści,

03:06.270 --> 03:08.710
jakie oferuje TypeScript.

03:08.710 --> 03:10.840
Więc tutaj wrócę do stringa, bo naprawdę

03:10.840 --> 03:12.530
nie chcę mieć tam liczby, a stąd

03:12.530 --> 03:14.933
możemy usunąć liczbę i jesteśmy dobrzy.

03:15.900 --> 03:18.830
Tablice dają nam również świetny przykład, właściwie

03:18.830 --> 03:21.890
tak samo jak obiekty i ich właściwości, jak dynamiczne

03:21.890 --> 03:25.730
jest wnioskowanie typu w TypeScripcie.

03:25.730 --> 03:28.750
Jeśli dodamy pętlę "for" tutaj na dole, i chcemy

03:28.750 --> 03:31.570
przejść do wszystkich hobby osoby, możemy oczywiście

03:31.570 --> 03:33.220
użyć tradycyjnej pętli "for"

03:33.220 --> 03:38.220
z for const hobby osoby. hobby, więc dostęp do właściwości hobbies

03:38.620 --> 03:41.130
i przechodzenie przez wszystkie hobby tam,

03:41.130 --> 03:42.793
przechowywanie każdego hobby

03:43.690 --> 03:46.780
dla każdej iteracji w tej stałej, a następnie możemy

03:46.780 --> 03:50.090
skonsultować hobby dziennika tutaj.

03:50.090 --> 03:52.000
Teraz to nie jest zbyt wymyślne, to jest coś,

03:52.000 --> 03:53.710
co znamy z JavaScript, prawda.

03:53.710 --> 03:58.280
Jeśli teraz skompiluję tę aplikację. ts plik w dół, otrzymujemy

03:58.280 --> 04:01.700
nazwę z tej linii, a następnie dwa hobby,

04:01.700 --> 04:04.750
które są drukowane.

04:04.750 --> 04:07.800
Ale tak naprawdę interesujące jest tutaj to, że na hobby możemy uzyskać

04:07.800 --> 04:11.040
dostęp do wszystkiego, możemy uzyskać dostęp na dowolnym ciągu.

04:11.040 --> 04:14.210
Na przykład do UpperCase, dostaję to autouzupełnienie

04:14.210 --> 04:16.230
i TypeScript nie narzeka.

04:16.230 --> 04:18.070
Dlaczego się nie skarży?

04:18.070 --> 04:21.930
Ponieważ wie, że hobby jest typu string array, więc kiedy

04:21.930 --> 04:25.830
uzyskuję dostęp do osoby. hobby, wnioskowanie TypeScript

04:25.830 --> 04:29.700
wykrywa, że hobby będzie tablicą łańcuchów.

04:29.700 --> 04:33.450
Więc hobby, z górnej strony, jest poprawnie identyfikowane jako

04:33.450 --> 04:36.000
ciąg, ponieważ ponieważ przechodzimy przez

04:36.000 --> 04:38.370
tablicę ciągów, cóż, poszczególne wartości

04:38.370 --> 04:40.510
muszą być tylko ciągami.

04:40.510 --> 04:43.450
I dlatego typy oferują nam wielkie wsparcie tam

04:43.450 --> 04:46.490
na dole, i pozwalają nam zrobić z hobby wszystko,

04:46.490 --> 04:50.050
co można zrobić z ciągiem, ponieważ wie z pewnością, że hobby

04:50.050 --> 04:53.810
będzie ciągiem z powodu typów, które tam ustawiliśmy.

04:53.810 --> 04:56.300
I to jest naprawdę elastyczne i oczywiście świetna funkcja,

04:56.300 --> 04:59.030
która sprawia, że pisanie kodu jest o wiele łatwiejsze i o wiele

04:59.030 --> 05:01.360
bardziej elastyczne i bezpieczne.

05:01.360 --> 05:04.440
Na przykład otrzymalibyśmy tutaj błąd, gdyby próbował

05:04.440 --> 05:08.570
uzyskać dostęp do hobby. mapa, jeśli myślałem, że to będzie tablica.

05:08.570 --> 05:12.060
Metoda map jest dostępna na tablicach, ale nie na łańcuchach.

05:12.060 --> 05:14.540
A tu poprawnie, znowu błąd, że mapa

05:14.540 --> 05:17.810
nie istnieje na type string, bo nie istnieje.

05:17.810 --> 05:21.290
Więc tutaj dostajemy błąd, i to dobrze, że go dostajemy, ponieważ

05:21.290 --> 05:24.510
byłoby to błędne, a tutaj widzimy, że wnioskowanie TypeScript

05:24.510 --> 05:27.343
naprawdę, naprawdę błyszczy.
