WEBVTT

00:02.130 --> 00:05.620
-: Untuk itu terlampir Anda menemukan proyek awal lama kami yang

00:05.620 --> 00:08.470
bagus, saya sudah memulai server dengan NPM start.

00:08.470 --> 00:12.320
Dan proses pengawasan TypeScript dengan TSC-W.

00:12.320 --> 00:14.870
Dan hal pertama yang perlu kita konfigurasikan

00:14.870 --> 00:18.030
di sana adalah dalam file tsconfig, pastikan target

00:18.030 --> 00:21.620
Anda disetel ke es6 dan kemudian, jika Anda menggulir ke bawah,

00:21.620 --> 00:24.230
pastikan Anda menambahkan baris dekorator

00:24.230 --> 00:26.720
eksperimental ini di sini.

00:26.720 --> 00:28.380
Dan tambahkan koma di depan ini dan kemudian

00:28.380 --> 00:31.700
Anda dapat AutoFormat untuk memformat ini semua dengan benar.

00:31.700 --> 00:34.020
Hal ini penting, jika tidak, Anda tidak akan dapat menggunakan

00:34.020 --> 00:36.000
dekorator dalam proyek Anda.

00:36.000 --> 00:37.250
Jadi, pastikan Anda

00:37.250 --> 00:40.540
mengubah tsconfig Anda. file json dengan tepat.

00:40.540 --> 00:42.630
Dan dengan itu kita bisa langsung terjun dan menulis

00:42.630 --> 00:46.980
dekorator pertama kita di sini di aplikasi. ts file.

00:46.980 --> 00:50.950
Dan saya ingin memulai dengan dekorator yang bisa kita tambahkan ke kelas.

00:50.950 --> 00:54.530
Sekarang dekorator secara umum adalah semua tentang kelas, tetapi ini

00:54.530 --> 00:55.363
adalah dekorator

00:55.363 --> 00:58.220
yang akan kita tambahkan ke kelas secara keseluruhan.

00:58.220 --> 01:00.730
Untuk itu, katakanlah kita memiliki sebuah kelas,

01:00.730 --> 01:04.360
Person, kelas yang sangat sepele, di mana kita memiliki sebuah nama.

01:04.360 --> 01:07.530
Mungkin dengan nilai Max, diinisialisasi sebelumnya di sini.

01:07.530 --> 01:10.520
Di mana kita memiliki fungsi konstruktor di mana saya hanya

01:10.520 --> 01:12.600
mencatat Membuat objek orang, sehingga

01:12.600 --> 01:14.763
kita melihat bahwa ini dieksekusi.

01:15.880 --> 01:19.363
Dan kemudian tentu saja kita bisa membuat orang baru di sini,

01:20.760 --> 01:22.910
dengan kata kunci baru, seperti ini.

01:22.910 --> 01:24.030
Dan jika kita mau, tentu

01:24.030 --> 01:26.490
saja kita bisa mencatat orang yang diciptakan ini.

01:26.490 --> 01:28.330
Dan ini seharusnya tidak mengherankan,

01:28.330 --> 01:29.430
jika kita menyimpan semua

01:29.430 --> 01:32.090
itu, itu mengkompilasi tanpa kesalahan.

01:32.090 --> 01:33.700
Dan jika kita mengunjungi halaman

01:33.700 --> 01:36.670
kita kemudian, pada Localhost: 3000, di konsol JavaScript,

01:36.670 --> 01:38.900
kita melihat objek Creating person yang

01:38.900 --> 01:41.140
berasal dari konstruktor.

01:41.140 --> 01:44.603
Dan kita, tentu saja, semua melihat Pribadi itu sendiri di sini.

01:45.810 --> 01:49.550
Sekarang di sana, dalam contoh ini kita tidak melibatkan dekorator.

01:49.550 --> 01:51.000
Mari kita ubah ini.

01:51.000 --> 01:53.370
Di bagian atas berkas, mari kita tambahkan dekorator.

01:53.370 --> 01:56.060
Dan dekorator, dan itu sangat penting untuk dipahami,

01:56.060 --> 01:58.080
pada akhirnya hanyalah sebuah fungsi.

01:58.080 --> 02:01.280
Fungsi yang Anda terapkan pada sesuatu, misalnya,

02:01.280 --> 02:03.530
pada kelas dengan cara tertentu.

02:03.530 --> 02:04.750
Jadi mari kita buat fungsi

02:04.750 --> 02:09.523
di sini, dengan kata kunci fungsi, dan saya akan menamakannya Logger.

02:10.390 --> 02:13.290
Sekarang ini adalah fungsi, satu-satunya hal khusus di sini adalah

02:13.290 --> 02:15.570
bahwa saya memulai dengan karakter kapital.

02:15.570 --> 02:16.492
Ini bukan suatu keharusan,

02:16.492 --> 02:20.200
Anda tidak harus menggunakan karakter awal kapital, Anda juga dapat menggunakan

02:20.200 --> 02:22.470
huruf kecil, Anda hanya melihat banyak dekorator

02:22.470 --> 02:25.610
di luar sana di perpustakaan yang mungkin Anda gunakan yang menggunakan

02:25.610 --> 02:27.680
karakter awal huruf besar dan oleh karena

02:27.680 --> 02:32.200
itu, saya akan melakukan hal yang sama di sini.

02:32.200 --> 02:35.450
Jadi, fungsi Logger di sini adalah sebuah fungsi dan kita

02:35.450 --> 02:39.330
dapat menerapkannya sebagai dekorator seperti yang akan terjadi.

02:39.330 --> 02:42.730
Sekarang mari kita tambahkan log konsol di sini, Logging, sehingga kita dapat

02:42.730 --> 02:44.730
melihat ketika fungsi ini berjalan.

02:44.730 --> 02:47.300
Karena saya tidak akan menyebutnya secara langsung.

02:47.300 --> 02:50.330
Sebaliknya saya ingin menambahkannya sebagai dekorator ke kelas ini.

02:50.330 --> 02:53.710
Dan kita melakukannya dengan menambahkan simbol @

02:53.710 --> 02:57.370
di sini di depan kelas dan kemudian fungsi kita di sini.

02:57.370 --> 02:58.440
Seperti ini.

02:58.440 --> 03:00.320
Sekarang beberapa hal khusus di sini.

03:00.320 --> 03:03.780
Simbol @ di sini adalah pengidentifikasi khusus yang

03:03.780 --> 03:06.170
dilihat atau dikenali TypeScript.

03:06.170 --> 03:09.110
Dan kemudian hal yang langsung setelah simbol @ harus

03:09.110 --> 03:11.010
menunjuk pada suatu fungsi.

03:11.010 --> 03:13.460
Bukan mengeksekusinya, tetapi arahkan ke sana,

03:13.460 --> 03:15.800
yang seharusnya menjadi dekorator Anda.

03:15.800 --> 03:17.400
Sekarang di sini Anda melihat bahwa Logger

03:17.400 --> 03:20.650
menerima terlalu sedikit argumen untuk digunakan sebagai dekorator di sini.

03:20.650 --> 03:23.010
Jadi hal baiknya adalah, TypeScript mengerti bahwa saya ingin

03:23.010 --> 03:24.930
menggunakannya sebagai decorator di sini.

03:24.930 --> 03:27.980
Hal buruknya adalah kita tidak melewatkan cukup banyak argumen.

03:27.980 --> 03:31.000
Dan memang, dekorator menerima argumen.

03:31.000 --> 03:34.870
Berapa banyak argumen tergantung di mana Anda menggunakan dekorator.

03:34.870 --> 03:39.710
Di sini, untuk decorator yang kita tambahkan ke kelas, kita mendapatkan satu argumen.

03:39.710 --> 03:42.910
Jadi, itulah target dari dekorator ini, yang

03:42.910 --> 03:46.160
merupakan fungsi konstruktor kita.

03:46.160 --> 03:49.020
Jadi kita bisa mengatakan bahwa kita mendapatkan fungsi

03:49.020 --> 03:51.240
di sini sebagai argumen pada akhirnya.

03:51.240 --> 03:54.110
Kita juga bisa menamainya constructor, karena pada akhirnya

03:54.110 --> 03:56.650
kita akan mendapatkan fungsi konstruktor dari

03:56.650 --> 03:59.550
kelas ini, atau kelas mana pun yang kita tambahkan decorator

03:59.550 --> 04:01.470
ini sebagai argumen.

04:01.470 --> 04:06.310
Mari kita juga menghibur. catat itu sehingga kita bisa mendapatkan beberapa

04:06.310 --> 04:09.650
wawasan tentang argumen konstruktor ini di sini.

04:09.650 --> 04:10.550
Dan mari kita simpan ini.

04:10.550 --> 04:12.750
Dan seperti yang Anda lihat, ini mengkompilasi tanpa kesalahan.

04:12.750 --> 04:14.750
Dan jika kita sekarang melihat output kita,

04:14.750 --> 04:16.580
kita melihat kode lama dari sebelumnya,

04:16.580 --> 04:18.590
tetapi kita juga melihat output Logging, dan

04:18.590 --> 04:20.810
fungsi konstruktor ini sedang dicatat.

04:20.810 --> 04:22.760
Sebenarnya kita melihat seluruh kelas

04:22.760 --> 04:24.520
di sini, tetapi kelas pada akhirnya

04:24.520 --> 04:27.670
hanyalah beberapa gula taktis di atas fungsi konstruktor.

04:27.670 --> 04:31.450
Harap perhatikan juga bahwa output dekorator kita, Logging,

04:31.450 --> 04:35.030
dan kelas ini atau fungsi konstruktor log di sini dicetak

04:35.030 --> 04:39.460
terlebih dahulu, sebelum kita melihat Membuat objek person dan objek

04:39.460 --> 04:41.540
Person kita.

04:41.540 --> 04:44.360
Karena, memang, dekorator dan itu sangat penting,

04:44.360 --> 04:48.430
dekorator dieksekusi ketika kelas Anda didefinisikan.

04:48.430 --> 04:50.530
Tidak ketika ia diinstansiasi.

04:50.530 --> 04:53.020
Anda tidak perlu menginstansiasi kelas Anda sama sekali.

04:53.020 --> 04:55.760
Kita bisa menghapus kode untuk menginstansiasi kelas,

04:55.760 --> 04:58.780
dan kita masih akan mendapatkan output dekorator tersebut.

04:58.780 --> 05:02.210
Jadi dekorator berjalan ketika JavaScript menemukan definisi

05:02.210 --> 05:05.660
kelas Anda, definisi fungsi konstruktor Anda.

05:05.660 --> 05:08.580
Tidak ketika Anda menggunakan fungsi konstruktor itu untuk

05:08.580 --> 05:10.070
menginstansiasi objek.

05:10.070 --> 05:13.280
Itu sangat penting untuk dipahami.

05:13.280 --> 05:15.170
Jadi ini adalah dekorator pertama kami.

05:15.170 --> 05:16.670
Ini bukan satu-satunya cara

05:16.670 --> 05:19.063
bagaimana kita bisa membuat dekorator.
