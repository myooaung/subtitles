WEBVTT

00:02.350 --> 00:04.170
教师：那么什么是TypeScript？

00:04.170 --> 00:06.860
它是关于什么的, 我们为什么要使用它？

00:06.860 --> 00:10.820
TypeScript是一个JavaScript超集｡ 

00:10.820 --> 00:12.190
这是什么意思？

00:12.190 --> 00:14.250
这意味着TypeScript最终是一种语言,

00:14.250 --> 00:18.710
一种编程语言, 建立在JavaScript之上｡

00:18.710 --> 00:20.940
它并不是一种全新的语言,

00:20.940 --> 00:27.450
相反, 它采用了JavaScript语言并为其添加了新的功能和优点｡

00:27.450 --> 00:31.720
可以说, 它使编写JavaScript代码变得更容易､

00:31.720 --> 00:32.840
更强大｡

00:32.840 --> 00:35.624
但是, 我们有一个巨大的劣势｡ 

00:35.624 --> 00:41.760
TypeScript无法由JavaScript环境（如浏览器）执行｡

00:41.760 --> 00:44.270
浏览器无法执行TypeScript,

00:44.270 --> 00:48.486
例如Node｡ js也不能执行TypeScript,

00:48.486 --> 00:54.080
所以我们可以执行JavaScript的环境不支持TypeScript｡

00:54.080 --> 00:56.140
那么TypeScript背后的想法是什么呢？

00:56.140 --> 01:00.760
这是一个更好的JavaScript版本, 我们不能使用它？

01:00.760 --> 01:02.130
不完全是｡ 

01:02.130 --> 01:06.050
TypeScript是一种编程语言, 但它也是一种工具｡ 

01:06.050 --> 01:14.410
它是一个功能强大的编译器, 您可以在代码上运行它来将您的打字稿代码编译为JavaScript｡

01:14.410 --> 01:16.540
因此, 在用TypeScript编写代码时,

01:16.540 --> 01:20.260
得到的结果是JavaScript｡

01:20.260 --> 01:22.870
但您并没有编写JavaScript代码,

01:22.870 --> 01:30.670
而是编写了具有所有新特性和所有优点的TypeScript代码, 您得到的是正常的JavaScript代码｡

01:30.670 --> 01:36.710
当然, 这就提出了一个重要的问题, 如果最终得到的是常规JavaScript,

01:36.710 --> 01:40.630
TypeScript如何添加新特性？

01:40.630 --> 01:43.460
答案是, TypeScript编译器将这些新特性编译为JavaScript解决方案,

01:43.460 --> 01:52.890
所以最终它可能会给你一个更好的语法, 一个更简单的方法来做一些事情, 然后它会将这个更好､ 更简单的方法编译为一个更复杂的JavaScript片段,

01:52.890 --> 02:02.060
否则你就必须编写这个片段｡

02:02.060 --> 02:03.230
所以它不是魔术,

02:03.230 --> 02:08.610
当然它不能添加JavaScript语言中根本不可能的东西, 但它可以添加新的特性,

02:08.610 --> 02:11.150
简单地说, 更容易使用, 更好的语法,

02:11.150 --> 02:15.020
像这样的东西｡

02:15.020 --> 02:17.470
此外, TypeScript当然还做了一件重要的事情,

02:17.470 --> 02:20.900
顾名思义｡

02:20.900 --> 02:26.230
它为JavaScript语言增加了类型和功能,

02:26.230 --> 02:28.750
我们稍后会仔细研究,

02:28.750 --> 02:31.541
这实际上会给开发人员一个机会,

02:31.541 --> 02:41.350
在脚本运行之前, 在浏览器运行时发现代码中的错误｡

02:41.350 --> 02:46.690
因此, 它不仅为您提供了一些新特性和更好的方式,

02:46.690 --> 02:50.240
还为您提供了额外的错误检查, 在开发过程中,

02:50.240 --> 02:58.370
您可以在早期捕获并修复可能作为运行时错误出现的错误｡

02:58.370 --> 03:00.600
那么, 我们为什么要使用TypeScript呢？

03:00.600 --> 03:02.570
考虑这个例子, 一个相当简单的JavaScript函数,

03:02.570 --> 03:06.710
它将两个数字相加｡

03:06.710 --> 03:11.810
当我调用它的时候, 请注意我传入的是两个字符串而不是两个数字,

03:11.810 --> 03:14.810
我会给你们看一个真实的例子, 在这个例子中,

03:14.810 --> 03:18.090
类似的事情可能在一秒钟内发生｡

03:18.090 --> 03:20.270
所以我们用两个字符串调用这个函数,

03:20.270 --> 03:22.519
结果你可能会得到一个不想要的结果,

03:22.519 --> 03:32.780
因为如果你把两个字符串相加, JavaScript会把字符串连接起来, 而不是做数学计算.

03:32.780 --> 03:38.980
因此, 结果不会是5, 而是23, 这是两个数字的连接字符串｡

03:38.980 --> 03:41.690
这是JavaScript中可能出现的错误,

03:41.690 --> 03:49.832
不是技术错误, 可能不会出现运行时错误, 但代码中存在逻辑错误｡

03:49.832 --> 03:55.870
当然, 这可能会导致使用JavaScript编写的Web应用程序出现严重问题｡

03:55.870 --> 03:59.360
当然, 在JavaScript中, 我们有缓解策略,

03:59.360 --> 04:05.440
我们可以在函数中添加一个if检查, 以在运行时检查输入的类型, 我们还可以验证和清理用户输入,

04:05.440 --> 04:15.840
虽然我们可能想做所有这些事情, 但如果我们在开发过程中已经捕获了这样的错误, 那就太好了｡

04:15.840 --> 04:19.220
幸运的是, 使用TypeScript可以做到这一点, 因为开发人员可以在这里编写无效代码,

04:19.220 --> 04:26.160
并在JavaScript中引入类似这样的机器人程序, 而使用TypeScript, 我们有了一个工具, 可以帮助我们编写更好的代码,

04:26.160 --> 04:30.060
避免此类问题｡

04:30.060 --> 04:31.910
那么, 让我们仔细看看这个｡ 
