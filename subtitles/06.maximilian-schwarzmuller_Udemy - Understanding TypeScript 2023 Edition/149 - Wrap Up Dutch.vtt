WEBVTT

00:02.350 --> 00:04.720
-En dat is het voor de modules.

00:04.720 --> 00:08.850
Nu is het gebruik van modules een super nuttige en belangrijke functie, omdat

00:08.850 --> 00:11.130
je daarmee beter onderhoudbare en beheersbare

00:11.130 --> 00:14.550
code kunt schrijven. Alles in één bestand is een

00:14.550 --> 00:16.360
rommeltje en echt geen optie

00:16.360 --> 00:19.360
voor iets anders dan hele kleine projecten.

00:19.360 --> 00:22.350
Het gebruik van ooit namespaces of ES-modules

00:22.350 --> 00:24.710
is een veel beter alternatief.

00:24.710 --> 00:27.620
Omdat het ervoor zorgt, dat elk bestand op zichzelf

00:27.620 --> 00:30.780
relatief klein is, en dus beheersbaar blijft.

00:30.780 --> 00:33.470
En toch krijg je uiteindelijk die hele,

00:33.470 --> 00:36.690
grote applicatie die je wilt hebben.

00:36.690 --> 00:38.580
Nu, als het gaat om deze twee benaderingen,

00:38.580 --> 00:42.883
Namespaces en ES modules, is de duidelijke aanbeveling ES modules,

00:42.883 --> 00:46.520
omdat je die extra typeveiligheid krijgt, en je zorgt ervoor

00:46.520 --> 00:48.910
dat elk bestand, duidelijk moet specificeren

00:48.910 --> 00:52.210
wat het wil.

00:52.210 --> 00:54.270
Met namespaces was het voldoende als

00:54.270 --> 00:56.280
een bestand iets invoerde, dat een

00:56.280 --> 00:58.350
ander bestand ook nodig heeft.

00:58.350 --> 00:59.970
De nadelen hiervan zijn, dat als dat

00:59.970 --> 01:02.230
ene bestand, dat het ding importeerde wordt verwijderd,

01:02.230 --> 01:05.640
dat andere bestand ook breekt, zonder dat je het merkt.

01:05.640 --> 01:08.774
Tenminste, zonder dat je het merkt voordat je de code uitvoert.

01:08.774 --> 01:11.340
Gebruik daarom ES-modules.

01:11.340 --> 01:14.250
Gebruik namespaces in kleinere projecten, of als

01:14.250 --> 01:18.100
je om een of andere reden geen ES-modules kunt gebruiken, En je kunt

01:18.100 --> 01:19.970
geen andere bundelaar gebruiken,

01:19.970 --> 01:24.290
die zulke modules zou vertalen. Om niet-module code, die alle

01:24.290 --> 01:26.360
werken en alle browsers.

01:26.360 --> 01:30.070
Maar verder gebruiken we echt modules, ES modules.

01:30.070 --> 01:31.748
En wat ik net zei is belangrijk.

01:31.748 --> 01:34.828
Deze modules, zoals we ze nu gebruiken, werken

01:34.828 --> 01:37.620
alleen in moderne browsers.

01:37.620 --> 01:39.670
Omdat we vertrouwen op de browser, om al deze

01:39.670 --> 01:42.640
bestanden te importeren. Toch?

01:42.640 --> 01:44.675
Nu willen we natuurlijk toepassingen

01:44.675 --> 01:48.940
bouwen met typescript, die ook in alle browsers draaien.

01:48.940 --> 01:52.090
Internet Explorer 9, bijvoorbeeld.

01:52.090 --> 01:54.130
Daar zou dit niet ondersteund worden.

01:54.130 --> 01:55.730
Deze syntaxis wordt daar niet ondersteund.

01:55.730 --> 01:57.410
Dus, de app zou daar niet draaien.

01:57.410 --> 01:59.160
We kunnen ook enkele andere functies gebruiken

01:59.160 --> 02:01.280
die daar niet worden ondersteund, maar hoofdzakelijk

02:01.280 --> 02:03.840
wordt dit hier niet in alle browsers ondersteund.

02:03.840 --> 02:06.250
Dus om dat in alle browsers te laten werken, kunnen

02:06.250 --> 02:09.283
we een bundeltool gebruiken. We kunnen bijvoorbeeld Webpack gebruiken.

02:09.283 --> 02:12.431
Om dat te bundelen in één JavaScript bestand.

02:12.431 --> 02:15.810
Zodat we tijdens de ontwikkeling deze multi-bestand, sterke

02:15.810 --> 02:19.060
typervaring hebben, maar wanneer we onze code verschepen

02:19.060 --> 02:21.310
hebben we eigenlijk maar één bestand.

02:21.310 --> 02:23.600
En nu was het voordeel van één bestand in

02:23.600 --> 02:25.676
plaats van al deze bestanden die we hier

02:25.676 --> 02:28.177
hebben, dat we er ook voor zorgen dat de browser

02:28.177 --> 02:31.181
niet zoveel bestanden hoeft te downloaden.

02:31.181 --> 02:33.630
Want elk bestand dat gedownload moet worden,

02:33.630 --> 02:37.010
is een extra rondreis. In het netwerk tabblad van de dev

02:37.010 --> 02:38.510
tools, kun je dat zien.

02:38.510 --> 02:40.650
Je ziet deze waterval grafiek, en

02:40.650 --> 02:42.230
je ziet dit kleine witte

02:42.230 --> 02:44.520
vakje aan het begin van elk blok.

02:44.520 --> 02:46.380
Dit is in feite de tijd die nodig is

02:46.380 --> 02:48.506
om het HDP-verzoek in te stellen.

02:48.506 --> 02:51.807
Dus, ook al zijn de bestanden die we downloaden erg klein,

02:51.807 --> 02:54.700
zoals je kunt zien, dit kost toch wat tijd vanwege

02:54.700 --> 02:56.900
alle overbodige extra instellingen,

02:56.900 --> 02:59.100
voor elk HDP verzoek.

02:59.100 --> 03:02.330
Minder aanvragen is dus sowieso een goed idee, ongeacht

03:02.330 --> 03:04.640
de browserondersteuning.

03:04.640 --> 03:08.370
Dus, om deze twee redenen, browserondersteuning en minder aanvragen,

03:08.370 --> 03:11.000
zullen we in de volgende cursussectie kijken naar

03:11.000 --> 03:12.453
bundeling, met Webpack.
