WEBVTT

00:02.280 --> 00:04.510
Instruktur: Yang berhubungan dengan apa yang baru saja Anda pelajari

00:04.510 --> 00:06.483
tentang pengubah akses, adalah pengubah lain.

00:07.572 --> 00:09.590
Dan itu adalah modifier readonly.

00:09.590 --> 00:11.310
Katakanlah kita memiliki field-field

00:11.310 --> 00:14.220
tertentu, yang tidak hanya harus privat atau publik,

00:14.220 --> 00:18.130
mereka juga tidak boleh berubah setelah inisialisasinya.

00:18.130 --> 00:21.410
Misalnya, id tidak boleh berubah setelahnya.

00:21.410 --> 00:23.520
Untuk memperjelas bahwa hal itu tidak boleh berubah,

00:23.520 --> 00:25.670
Anda bisa menambahkan readonly di sini juga.

00:25.670 --> 00:27.890
Dan Anda juga bisa menambahkannya di sini.

00:27.890 --> 00:30.920
Jadi di sini Anda juga akan menulis private readonly.

00:30.920 --> 00:33.990
Sekarang kata kunci readonly, seperti private dan public,

00:33.990 --> 00:35.710
diperkenalkan oleh TypeScript,

00:35.710 --> 00:37.920
kata kunci ini tidak ada di JavaScript.

00:37.920 --> 00:39.910
Ini memastikan bahwa jika Anda mencoba

00:39.910 --> 00:43.180
menulis ke propertinya setelah itu, Anda gagal.

00:43.180 --> 00:45.690
Jadi, Anda hanya dapat menggunakannya sekali selama

00:45.690 --> 00:48.620
inisialisasi tetapi setelah itu, katakanlah untuk addEmployee,

00:48.620 --> 00:52.430
untuk alasan apa pun, saya mencoba mengubah id ke d2, Anda lihat, kita mendapatkan

00:52.430 --> 00:54.200
kesalahan di sini, bahwa saya tidak

00:54.200 --> 00:57.790
dapat menetapkan ke id karena itu readonly.

00:57.790 --> 01:00.800
Jadi ini menambahkan beberapa keamanan ekstra untuk membuatnya benar-benar

01:00.800 --> 01:04.160
jelas bahwa properti tertentu hanya boleh diinisialisasi sekali saja dan tidak

01:04.160 --> 01:05.920
boleh berubah setelahnya, sebuah persyaratan

01:05.920 --> 01:08.860
yang cukup sering Anda miliki untuk properti tertentu dalam objek

01:08.860 --> 01:10.240
Anda.

01:10.240 --> 01:12.630
Jadi, ini bisa menambah keamanan jenis ekstra

01:12.630 --> 01:14.910
lagi, dan membuat maksud Anda sangat jelas.

01:14.910 --> 01:16.320
Tentu saja, Anda selalu bisa mengatakan,

01:16.320 --> 01:18.350
Yah, sayalah yang menulis kode, saya tidak akan melakukan

01:18.350 --> 01:20.470
apa pun yang tidak saya inginkan.

01:20.470 --> 01:23.060
Nah, masih bagus untuk menjadi sangat jelas ketika Anda

01:23.060 --> 01:24.630
mendefinisikan kode Anda.

01:24.630 --> 01:28.320
Karena a, kamu mungkin lupa apa yang ingin kamu lakukan jika kamu berhenti

01:28.320 --> 01:31.280
mengerjakan kode kamu selama beberapa minggu, atau apa

01:31.280 --> 01:32.270
pun itu, dan b, kamu

01:32.270 --> 01:34.340
mungkin bekerja dalam tim atau berbagi

01:34.340 --> 01:36.550
kode kamu dengan orang lain.

01:36.550 --> 01:39.390
Dan umumnya merupakan ide yang baik untuk menulis kode yang

01:39.390 --> 01:42.460
jelas dan eksplisit yang membuat niat Anda sangat jelas.

01:42.460 --> 01:44.280
Dan readonly bisa membantu Anda di

01:44.280 --> 01:47.230
sana, karena membuatnya sangat jelas apa tujuan Anda.

01:47.230 --> 01:49.570
Jika kita melihat aplikasi. js, seperti yang saya

01:49.570 --> 01:53.050
sebutkan, kita tidak melihat private atau public, atau read

01:53.050 --> 01:55.780
only, karena itu semua hanya ada di TypeScript,

01:55.780 --> 01:57.610
bukan di JavaScript.

01:57.610 --> 02:01.420
Kita juga melihat sesuatu yang berbeda yang juga menarik,

02:01.420 --> 02:04.580
metode-metode tersebut ditambahkan ke prototipe

02:04.580 --> 02:06.490
fungsi konstruktor kita.

02:06.490 --> 02:08.830
Sekarang untuk ini, Anda perlu tahu apa itu prototipe,

02:08.830 --> 02:10.730
dan memperkenalkannya dalam kursus ini

02:10.730 --> 02:12.520
akan sedikit berlebihan.

02:12.520 --> 02:14.140
Terlampir Anda menemukan beberapa sumber

02:14.140 --> 02:16.070
daya di mana Anda dapat menyelami prototipe.

02:16.070 --> 02:18.490
Ini adalah bagian penting dari JavaScript,

02:18.490 --> 02:22.210
terutama JavaScript sebelum kita memiliki kelas, dan tidak ada salahnya

02:22.210 --> 02:24.670
untuk memahami prototipe jika Anda seorang pengembang

02:24.670 --> 02:26.490
JavaScript.

02:26.490 --> 02:29.030
Masih di sini, saya tidak akan membahasnya lebih dalam

02:29.030 --> 02:31.160
karena ini adalah topik JavaScript murni, tidak

02:31.160 --> 02:33.020
spesifik untuk TypeScript.

02:33.020 --> 02:34.150
Memang di TypeScript, kita

02:34.150 --> 02:36.510
biasanya bekerja lebih sedikit dengan prototipe, karena

02:36.510 --> 02:38.780
kita dapat melakukan lebih banyak hal dengan kelas.

02:38.780 --> 02:42.560
Dan terkait dengan itu, kita punya konsep kelas penting lainnya,

02:42.560 --> 02:43.503
Inheritance.
