WEBVTT

00:02.273 --> 00:05.100
Instructor: Hemos visto muchos decoradores, cómo se

00:05.100 --> 00:06.190
trabaja con ellos, cómo

00:06.190 --> 00:07.340
se pueden configurar,

00:07.340 --> 00:09.940
cómo se pueden hacer cosas con ellos, qué se puede

00:09.940 --> 00:11.367
hacer con ellos.

00:11.367 --> 00:15.260
Esperamos que esto te muestre la complejidad pero también el poder de los

00:15.260 --> 00:17.340
decoradores y cómo puedes pensar en ellos,

00:17.340 --> 00:18.898
cómo puedes usarlos.

00:18.898 --> 00:22.370
No sólo puedes crear tus propios decoradores, también

00:22.370 --> 00:24.208
hay un rico ecosistema de

00:24.208 --> 00:28.590
paquetes y frameworks que se basan en decoradores.

00:28.590 --> 00:30.670
Por ejemplo, la clase validator.

00:30.670 --> 00:32.789
Si buscas "ts class validator", encontrarás

00:32.789 --> 00:35.480
un paquete que básicamente tiene una implementación

00:35.480 --> 00:37.960
más elaborada de nuestra propia lógica de validación

00:37.960 --> 00:41.680
personalizada en la que trabajamos.

00:41.680 --> 00:44.140
Este paquete se puede añadir a cualquier proyecto en el

00:44.140 --> 00:45.960
que se esté trabajando, y entonces se puede

00:45.960 --> 00:48.030
simplemente importar un montón de decoradores

00:48.030 --> 00:49.930
o fábricas de decoradores, como se puede ver,

00:49.930 --> 00:51.660
ya que los ejecutamos aquí.

00:51.660 --> 00:53.350
Añádelos a tus propiedades, con

00:53.350 --> 00:55.650
o sin alguna configuración extra, dependiendo

00:55.650 --> 00:57.530
del validador que sea, y detrás de las

00:57.530 --> 00:59.163
escenas esto manejará un registro,

00:59.163 --> 01:01.530
se podría decir, como objeto de configuración

01:01.530 --> 01:03.509
al final, almacena tu configuración

01:03.509 --> 01:07.070
del validador para las diferentes propiedades en tus diferentes

01:07.070 --> 01:08.950
clases.

01:08.950 --> 01:11.810
Y luego, te da un método de validación, que también

01:11.810 --> 01:14.150
importas del paquete, que puedes ejecutar

01:14.150 --> 01:16.656
y pasar tu objeto, para aplicar toda la lógica

01:16.656 --> 01:20.540
de validación que configuraste en la clase.

01:20.540 --> 01:22.840
Así que básicamente es hacer lo que acabamos

01:22.840 --> 01:26.000
de hacer, sólo que con más validadores, y con todo el trabajo

01:26.000 --> 01:27.830
pesado hecho por ti.

01:27.830 --> 01:29.170
Pero, por supuesto, ayuda a entender

01:29.170 --> 01:30.630
cómo funciona esto en general, ya

01:30.630 --> 01:32.370
que lo construimos por nuestra cuenta aquí,

01:32.370 --> 01:34.143
en una versión más ingenua.

01:35.010 --> 01:36.490
Ahora, además de este paquete, por supuesto,

01:36.490 --> 01:38.370
también tenemos Angular, por ejemplo.

01:38.370 --> 01:39.541
Angular es un marco de

01:39.541 --> 01:41.502
trabajo, que ya he mencionado antes,

01:41.502 --> 01:43.942
que se basa en gran medida en los decoradores,

01:43.942 --> 01:46.480
como este decorador de componentes, que le

01:46.480 --> 01:49.214
permite asignar un poco de código HTML dinámico,

01:49.214 --> 01:51.301
que aprovecha las propiedades de sus

01:51.301 --> 01:54.720
clases, así, con una sintaxis especial añadido por Angular,

01:54.720 --> 01:56.780
para luego representar algún contenido

01:56.780 --> 02:00.170
dinámico en la pantalla.

02:00.170 --> 02:01.780
Así que aquí Angular hace algo más

02:01.780 --> 02:03.360
que ofrecer estos decoradores,

02:03.360 --> 02:06.250
pero los decoradores son una parte central de Angular.

02:06.250 --> 02:07.280
Y por último, pero no

02:07.280 --> 02:10.130
menos importante, también quiero mostrarte NestJS.

02:10.130 --> 02:13.190
NestJS es un framework JavaScript del lado del servidor

02:13.190 --> 02:15.487
para Node. js, que también utiliza

02:15.487 --> 02:20.010
en gran medida typescript, y éste también adopta decoradores.

02:20.010 --> 02:23.270
Allí se utilizan decoradores para definir los controladores,

02:23.270 --> 02:26.730
y las rutas, los métodos que los usuarios tienen que utilizar en sus

02:26.730 --> 02:30.400
peticiones HTTP, para desencadenar ciertas funciones, y también un montón

02:30.400 --> 02:32.687
de otros decoradores que se pueden utilizar

02:32.687 --> 02:36.890
para extraer datos de las peticiones entrantes, y así sucesivamente.

02:36.890 --> 02:39.150
Así que aquí este marco también, ofrece

02:39.150 --> 02:41.370
todos estos decoradores para usted,

02:41.370 --> 02:44.640
por lo que sólo puede añadir a sus propiedades, a sus métodos,

02:44.640 --> 02:46.257
a sus clases, y añadir funcionalidad

02:46.257 --> 02:50.060
extra, que el marco, a su vez, también tiene en cuenta cuando se

02:50.060 --> 02:52.828
ejecuta el código.

02:52.828 --> 02:55.417
Así que, de nuevo, los decoradores se utilizan

02:55.417 --> 02:59.070
para la metaprogramación para añadir una configuración

02:59.070 --> 03:02.977
extra, una lógica extra, que luego es tenida en cuenta por, en

03:02.977 --> 03:05.700
este caso, el código del framework, que ejecuta

03:05.700 --> 03:07.580
tu código o que trabaja junto

03:07.580 --> 03:09.886
con tu código.

03:09.886 --> 03:12.000
Y eso es todo para los decoradores.

03:12.000 --> 03:14.110
Esperamos que esto le dé una buena visión general

03:14.110 --> 03:16.090
de lo que puede hacer con los decoradores,

03:16.090 --> 03:17.830
por qué pueden ser muy útiles y cómo

03:17.830 --> 03:19.563
funcionan en general.
