WEBVTT

00:02.340 --> 00:04.100
Narator: Jadi kita mulai dengan generics

00:04.100 --> 00:06.670
dan semoga sudah jelas apa yang TypeScript lakukan di sini,

00:06.670 --> 00:10.240
kita mengoper beberapa informasi tambahan ke dalam fungsi penggabungan, sehingga

00:10.240 --> 00:12.130
kita dapat bekerja dengan cara yang lebih baik

00:12.130 --> 00:14.370
dengan hasil dari fungsi penggabungan.

00:14.370 --> 00:16.540
Itulah biasanya kegunaan obat generik.

00:16.540 --> 00:19.890
Mereka memungkinkan Anda untuk terus bekerja dengan data Anda

00:19.890 --> 00:21.960
dengan cara TypeScript yang optimal.

00:21.960 --> 00:23.820
Sekarang, dalam kasus ini, di sini, bagaimanapun,

00:23.820 --> 00:25.810
kita akan memiliki masalah jika saya memasukkan,

00:25.810 --> 00:28.570
katakanlah hanya angka 30 di sini.

00:28.570 --> 00:30.470
Tentu saja, TypeScript sekarang melempar kesalahan,

00:30.470 --> 00:32.010
karena mencoba mengakses age, tetapi

00:32.010 --> 00:33.870
mengakses nama akan bekerja.

00:33.870 --> 00:37.100
Meskipun demikian, jika kita menyimpannya, itu mengkompilasi tanpa

00:37.100 --> 00:39.710
kesalahan, dan jika saya mencetak keseluruhan objek yang

00:39.710 --> 00:41.610
digabungkan, kita melihat apa yang saya

00:41.610 --> 00:43.910
dapatkan kembali hanyalah hobi dan nama di objek

00:43.910 --> 00:46.570
saya, yang masuk akal karena 30 adalah angka, dan ketika

00:46.570 --> 00:48.010
kita melewatkan itu sebagai argumen

00:48.010 --> 00:50.080
kedua untuk menetapkan objek, yang pada akhirnya

00:50.080 --> 00:51.920
kita lakukan di sini, yah, maka ini hanya

00:51.920 --> 00:54.590
gagal secara diam-diam.

00:54.590 --> 00:57.860
JavaScript tidak melempar kesalahan, tidak mengeluh.

00:57.860 --> 01:00.460
Tapi tentu saja, ini juga tidak menggabungkan

01:00.460 --> 01:02.270
30 ke dalam objek yang baru dibuat,

01:02.270 --> 01:04.690
Anda lihat tidak ada 30 dalam objek ini.

01:04.690 --> 01:06.540
Sekarang, bagaimana JavaScript melakukannya?

01:06.540 --> 01:08.470
Karena 30 bukan objek, tugas

01:08.470 --> 01:12.150
objek hanya mampu menggabungkan objek yang berbeda

01:12.150 --> 01:14.090
satu sama lain.

01:14.090 --> 01:15.410
Jadi, apa yang pada akhirnya ingin kita selamatkan?

01:15.410 --> 01:17.600
Nah, kami tidak peduli tentang tipe yang tepat,

01:17.600 --> 01:20.040
kami tidak peduli tentang struktur yang tepat

01:20.040 --> 01:22.980
dari objek yang Anda berikan di sini untuk U dan T.

01:22.980 --> 01:26.600
Tetapi apa yang kita pedulikan adalah bahwa kedua

01:26.600 --> 01:31.370
parameter, baik tipe T dan U harus berupa objek apa pun, tetapi mereka

01:31.370 --> 01:34.420
harus berupa objek setiap saat.

01:34.420 --> 01:36.830
Dan saat ini, kami tidak mengatakan itu.

01:36.830 --> 01:37.820
Saat ini, kami hanya mengatakan,

01:37.820 --> 01:40.110
mereka harus dari jenis apa pun, saya tidak peduli.

01:40.110 --> 01:41.750
Sekarang sering kali, hal itu tidak baik.

01:41.750 --> 01:45.060
Anda ingin membatasi jenis T dan U di sini, menyelesaikan

01:45.060 --> 01:46.683
jenis generik Anda.

01:47.830 --> 01:51.540
Anda bisa melakukan itu dengan type constraints.

01:51.540 --> 01:55.170
Untuk tipe generik, Anda dapat menetapkan batasan tertentu mengenai

01:55.170 --> 01:58.280
tipe yang dapat menjadi dasar tipe generik Anda dan Anda

01:58.280 --> 02:01.120
melakukan ini dengan kata kunci tambahan di sini dalam

02:01.120 --> 02:05.150
tanda kurung siku setelah tipe yang ingin Anda batasi.

02:05.150 --> 02:07.410
Jadi di sini kita bisa mengatakan extends

02:07.410 --> 02:09.020
object, dan dengan itu saya

02:09.020 --> 02:12.740
katakan, tipe T bisa berupa objek apa saja dengan struktur apa

02:12.740 --> 02:15.340
saja, tetapi harus berupa objek.

02:15.340 --> 02:17.480
Kita bisa melakukan hal yang sama untuk U.

02:17.480 --> 02:19.040
Dan jika saya melakukan itu, Anda

02:19.040 --> 02:21.820
lihat sekarang saya sudah mendapatkan error di IDE.

02:21.820 --> 02:23.980
Dan jika saya mencoba menyimpannya,

02:23.980 --> 02:26.150
saya juga mendapatkan error di compiler,

02:26.150 --> 02:28.640
karena argumen tipe 30 di sini tidak dapat

02:28.640 --> 02:31.133
ditetapkan ke tipe objek.

02:32.080 --> 02:34.480
Jadi, tentu saja, perilaku yang kita inginkan di sini.

02:34.480 --> 02:38.190
Sekarang kita dipaksa untuk memasukkan objek lagi,

02:38.190 --> 02:39.940
whoops, seperti ini.

02:39.940 --> 02:41.990
Sekarang kita dipaksa untuk meneruskan ini lagi, dan oleh

02:41.990 --> 02:43.680
karena itu kita meningkatkan fungsi ini karena

02:43.680 --> 02:45.290
sekarang benar-benar berfungsi.

02:45.290 --> 02:48.980
Dan kita tahu bahwa object assign menginginkan dua objek.

02:48.980 --> 02:51.000
Jadi pada akhirnya, kita ingin menjamin

02:51.000 --> 02:52.820
bahwa kita mendapatkan dua objek di

02:52.820 --> 02:56.370
sini dengan menetapkan batasan tertentu pada tipe generik kita.

02:56.370 --> 02:58.630
Dan kendala-kendala di sini bisa berupa apa saja.

02:58.630 --> 03:01.290
Anda bisa merujuk ke objek, ke string, Anda bisa menggunakan

03:01.290 --> 03:03.730
tipe Anda sendiri jika Anda memilikinya.

03:03.730 --> 03:06.700
Anda juga dapat menggunakan jenis union di sini jika Anda mau, Anda benar-benar

03:06.700 --> 03:08.470
fleksibel di sana, Anda dapat menetapkan

03:08.470 --> 03:10.510
batasan apa pun yang Anda inginkan.

03:10.510 --> 03:12.620
Dan tentu saja, Anda tidak harus membatasi

03:12.620 --> 03:13.720
semua tipe generik.

03:13.720 --> 03:16.560
Jika Anda hanya ingin membatasi U, Anda bisa melakukan itu.

03:16.560 --> 03:19.620
Dalam contoh ini, masuk akal untuk membatasi keduanya karena

03:19.620 --> 03:22.880
object assign menginginkan dua objek di sini, tetapi Anda benar-benar

03:22.880 --> 03:24.640
fleksibel di sana.

03:24.640 --> 03:26.620
Penting untuk menyadari konsep batasan

03:26.620 --> 03:28.440
itu, karena itu memungkinkan Anda untuk

03:28.440 --> 03:30.560
bekerja dengan tipe generik dengan cara yang

03:30.560 --> 03:32.640
lebih baik secara optimal, yang menghindari

03:32.640 --> 03:34.810
kesalahan yang tidak perlu atau perilaku aneh

03:34.810 --> 03:37.513
seperti yang kita miliki sebelumnya.
