WEBVTT

00:02.180 --> 00:05.590
教师：让我们回到对象的接口｡ 

00:05.590 --> 00:10.090
您还可以在接口和类中定义可选属性,

00:10.090 --> 00:14.100
我将向您展示这一点｡

00:14.100 --> 00:16.437
为此, 您添加属性名, 比如说'outputName',

00:16.437 --> 00:22.238
当然可以是任何您想要的, 它应该是一个字符串｡

00:22.238 --> 00:27.630
我不想强迫每一个基于Named的类都有这个｡

00:27.630 --> 00:31.120
你是否想要它应该是可选的｡ 

00:31.120 --> 00:37.670
您可以在属性名称后加入问号来指定选择性属性｡

00:37.670 --> 00:40.130
这告诉Tivescript,

00:40.130 --> 00:45.680
该属性可能存在于实现该接口的类中, 但它不是必须存在｡

00:45.680 --> 00:48.540
因此, 我们在'Person'中没有得到错误,

00:48.540 --> 00:53.440
即使我没有输出名称属性, 因为它是可选的｡

00:53.440 --> 00:56.072
当然, 我可以在这里添加输出名称,

00:56.072 --> 00:59.130
并使用某个值对其进行初始化, 或者像其他属性一样使用它,

00:59.130 --> 01:02.800
但我不必这样做｡

01:02.800 --> 01:06.720
现在, 在一个类上, 你还可以有一个可选的属性｡ 

01:06.720 --> 01:09.670
让我们在这里同名应该是可选的,

01:09.670 --> 01:13.840
因为也许我们在这里没有得到N的值｡

01:13.840 --> 01:17.460
我们也可以在这里加个问号｡

01:17.460 --> 01:20.890
我们现在还必须在Named中将其设置为可选的,

01:20.890 --> 01:26.012
否则我们违反了接口, 接口强制将其设置为字符串｡

01:26.012 --> 01:29.000
我是说这是可选的｡ 

01:29.000 --> 01:30.510
所以这里它不是可选的,

01:30.510 --> 01:32.750
这里当我把它设为N时, 我只想在N为真的情况下这样做,

01:32.750 --> 01:37.640
如果它被设置了的话｡

01:37.640 --> 01:40.080
例如, 只有当它不是空字符串时｡ 

01:40.080 --> 01:43.340
否则, name将不会被设置,

01:43.340 --> 01:49.853
这没关系, 因为我在接口和我的类中都将它设置为可选属性｡

01:50.790 --> 01:53.070
在这里, 当我们构造一个新对象时,

01:53.070 --> 01:56.203
我们可以在不传递名称的情况下完成｡

01:57.060 --> 02:02.600
为了允许这样做, 我们必须转到构造函数并在此处提供默认值,

02:02.600 --> 02:05.120
或者在此处添加问号｡

02:05.120 --> 02:06.260
这一切都是为了允许它｡ 

02:06.260 --> 02:08.800
您可以通过提供默认回退值或添加问号（在这种情况下,

02:08.800 --> 02:17.170
默认值将为undefined）来添加可选参数｡

02:17.170 --> 02:20.450
现在我们可以不带值调用这个构造函数,

02:20.450 --> 02:22.446
因为我们有可选的参数,

02:22.446 --> 02:27.930
也因为我们有可选的属性, 我们不需要初始化它｡

02:27.930 --> 02:29.648
因此此后如果你打招呼,

02:29.648 --> 02:33.510
那么这个名字当然会产生未定义的｡

02:33.510 --> 02:35.640
也许我们也应该检查一下这里是否有名字,

02:35.640 --> 02:39.100
如果有, 我们就安慰一下｡

02:39.100 --> 02:39.100
记录此内容｡ 

02:39.100 --> 02:42.970
别的, 我们聊以自慰｡  在不引用姓名的情况下记录“hi”,

02:42.970 --> 02:45.200
因为我们没有姓名｡

02:45.200 --> 02:47.170
如果我们说, 如果一切都编译了,

02:47.170 --> 02:48.840
我们在这里只看到hi,

02:48.840 --> 02:51.520
因为它没有提供名称｡

02:51.520 --> 02:56.008
所以在类和接口中都是可选属性,

02:56.008 --> 02:59.910
在我的构造函数列表中也是.

02:59.910 --> 03:01.660
现在我们再讲清楚一点,

03:01.660 --> 03:04.790
这三件事只是松散地联系在一起｡

03:04.790 --> 03:07.980
您可以在界面中建立选择性属性,

03:07.980 --> 03:11.910
然后在类别中将它实作为非选择性属性｡

03:11.910 --> 03:14.550
然后, 您只需要确保您的逻辑始终是初始化的,

03:14.550 --> 03:19.720
否则您会得到一个错误, 正如您刚才看到的｡

03:19.720 --> 03:22.180
或者你在一个接口中有一个可选属性,

03:23.723 --> 03:31.630
在你的类中也有一个可选属性, 那么你就不必在这里的所有情况下都赋值｡

03:31.630 --> 03:34.210
另外, 这里完全不相关, 你可以在函数中,

03:34.210 --> 03:40.300
也可以在方法中, 包括构造函数方法中, 有可选参数.

03:40.300 --> 03:42.670
可选参数可以使用问号定义,

03:42.670 --> 03:43.810
如果未设置默认值,

03:43.810 --> 03:51.690
则默认值为undefined, 或者简单地通过如下方式分配默认值来定义｡

03:51.690 --> 03:53.785
然后, 正如您所了解的, 这也是可选的,

03:53.785 --> 03:58.750
如果您不传入更具体的值, 则将采用默认值｡

03:58.750 --> 04:00.720
所以这给了你更大的灵活性来构造你的类,

04:00.720 --> 04:09.103
当我们谈论接口的时候, 你构造你的类的合约的方式可能需要遵守｡
