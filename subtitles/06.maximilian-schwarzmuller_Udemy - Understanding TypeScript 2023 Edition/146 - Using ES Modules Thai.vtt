WEBVTT

00:02.400 --> 00:04.350
ผู้สอน: Name spaces ค่อนข้างดี

00:04.350 --> 00:07.240
แต่ไม่จำเป็นต้องสมบูรณ์แบบ

00:07.240 --> 00:09.680
เราเห็นปัญหาอย่างหนึ่งในการบรรยายครั้งที่แล้ว

00:09.680 --> 00:13.290
ซึ่งฉันได้เพิ่มเพนเดนซีทั้งหมดลงในแต่ละไฟล์ด้วยตัวเอง

00:13.290 --> 00:15.620
เมื่อฉันลบ ลากและวางจากรายการโครงการ

00:15.620 --> 00:18.900
ใช่ ตัวอย่างเช่น มันยังคงคอมไพล์โดยไม่มีข้อผิดพลาด

00:18.900 --> 00:20.350
นี้ไม่เหมาะ

00:20.350 --> 00:27.550
ตอนนี้อาจใช้หรือไม่ก็ได้ ขึ้นอยู่กับว่าไฟล์อื่นนำเข้าโมเดลแบบลากวางซึ่งสุดท้ายแล้วฉันต้องการที่นี่หรือไม่

00:27.550 --> 00:29.100
ซึ่งในที่นี้ก็จะเป็นเช่นนั้น

00:29.100 --> 00:31.533
ในทางเทคนิคแล้ว แม้จะลบสิ่งนี้ออกไปแล้ว

00:31.533 --> 00:33.200
มันก็ใช้งานได้ที่นี่

00:33.200 --> 00:35.580
แต่นี่ไม่ใช่เรื่องดี มันค่อนข้างอันตราย

00:35.580 --> 00:38.560
หากเราเชื่อมั่นในข้อเท็จจริงที่ว่าไฟล์บางไฟล์จะจัดการกับมันแทนเรา

00:38.560 --> 00:41.990
แต่ถ้าเราลบหรือเปลี่ยนแปลงไฟล์นั้นซึ่งช่วยชีวิตเราไว้

00:41.990 --> 00:49.240
เราก็เปลี่ยนบางอย่างที่ไม่เกี่ยวข้องโดยสิ้นเชิงและแอปของเราก็หยุดทำงาน

00:49.240 --> 00:51.420
เราไม่ต้องการสิ่งนั้นอย่างแน่นอน

00:51.420 --> 00:58.050
คงจะดีไม่น้อยหากเรามีการนำเข้าและส่งออกที่ระบุอย่างชัดเจนว่าเรานำเข้าจากไฟล์ใด

00:58.050 --> 00:59.660
และถ้าเราต้องการบางอย่างที่นี่

00:59.660 --> 01:01.120
เช่น Drag Target และเราไม่ได้นำเข้าอย่างชัดเจน

01:01.120 --> 01:04.840
เราจะได้รับข้อผิดพลาด

01:04.840 --> 01:06.450
นั่นคือสิ่งที่เราต้องการโดยพื้นฐาน

01:06.450 --> 01:10.235
และเราได้รับพฤติกรรมนี้ด้วยโมดูล ES6

01:10.235 --> 01:12.930
ตอนนี้ โมดูล ES6 ยังมีอยู่นอกประเภทของโลก

01:12.930 --> 01:22.960
เบราว์เซอร์สมัยใหม่รองรับโมดูลเหล่านั้นโดยกำเนิด โดยที่เบราว์เซอร์จะดาวน์โหลดไฟล์เพนเดนซีทั้งหมดเมื่อดำเนินการ

01:22.960 --> 01:28.350
แต่ประเภทยังสามารถนำเข้าและได้รับการสนับสนุนประเภทเริ่มต้นเมื่อเราใช้

01:28.350 --> 01:31.007
ตอนนี้โมดูล ES6 ทำงานอย่างไร

01:31.007 --> 01:33.600
เรามาเริ่มกันอีกครั้งด้วยการลากและวาง

01:33.600 --> 01:35.240
ลองลบเนมสเปซที่เป็นคอนฟีเฟตแบบเพียวๆ

01:35.240 --> 01:37.360
ออก

01:37.360 --> 01:40.030
ลองเก็บคำสำคัญส่งออกไว้

01:40.030 --> 01:42.150
คำสำคัญที่ส่งออกไม่ได้เป็นเพียงการทำงานกับเนมสเปซ

01:42.150 --> 01:44.290
แต่จริง ๆ แล้วเป็นไวยากรณ์สคริปต์

01:44.290 --> 01:49.800
Java เริ่มต้นซึ่งมีความสำคัญพอ ๆ กับสคริปต์พิมพ์

01:49.800 --> 01:53.600
หมายความว่าคุณส่งออกอินเตอร์เฟสนี้และเฟสนี้ที่นี่ด้วยจากไฟล์นี้

01:53.600 --> 01:58.460
และจากนั้นคุณสามารถนำเข้าไปยังไฟล์อื่นได้

01:58.460 --> 02:02.980
ในกรณีของเราเราต้องการมันในรายการโครงการและไฟล์รายการโครงการ

02:02.980 --> 02:05.230
ตอนนี้เรามาเริ่มด้วยรายการโครงการ

02:05.230 --> 02:09.030
ในการนำเข้าบางสิ่งจากโมดูล ES ด้วยไวยากรณ์โมดูล

02:09.030 --> 02:18.970
ES นั้น คุณต้องระบุการนำเข้าที่ด้านบนสุดของไฟล์หรือใกล้กับด้านบนสุดของไฟล์ก่อนที่คุณจะเริ่มเขียนโค้ดจริงใดๆ

02:18.970 --> 02:27.320
นำเข้า จากนั้นคุณชี้ไปที่ไฟล์นั้นด้วยเส้นทางสัมพัทธ์จากไฟล์ที่คุณกำลังนำเข้า

02:27.320 --> 02:31.030
ในกรณีนี้ เราต้องขึ้นระดับ I ด้วยจุดสองจุดและเครื่องหมายทับ

02:31.030 --> 02:37.450
เพื่อให้เราอยู่ในโฟลเดอร์ต้นทางจากนั้นเราต้องไปที่โฟลเดอร์โมดูลและนำเข้าการลากและวาง

02:37.450 --> 02:43.480
ตอนนี้สำคัญ ให้เพิ่ม dot JS ที่นี่ เพราะคุณต้องอิมพอร์ตราวกับว่ามันคอมไพล์แล้ว

02:43.480 --> 02:46.470
เพราะสิ่งนี้จะถูกนำไปใช้ในวานิลลาจาวาสคริปต์

02:46.470 --> 02:49.130
จากนั้นควรมองหาจาวาสคริปต์ที่นั่น

02:49.130 --> 02:50.860
ดังนั้นสำหรับไฟล์จาวาสคริปต์

02:50.860 --> 02:55.010
ดังนั้น ดอท JS จึงต้องเป็น เพิ่ม

02:55.010 --> 03:03.150
ตอนนี้คุณนำเข้าบางอย่างจากที่นั่นและมากกว่าที่คุณเพิ่มวงเล็บปีกการะหว่างที่คุณระบุสิ่งที่คุณต้องการนำเข้าจากไฟล์นั้น

03:03.150 --> 03:08.480
ฉันได้รับการเติมข้อความอัตโนมัติแล้ว ฉันต้องการนำเข้าแบบลากได้

03:08.480 --> 03:14.430
ตอนนี้ draggable พร้อมใช้งานที่นี่และประเภทเห็นว่าไม่พร้อมใช้งานและมีความสุข

03:14.430 --> 03:17.930
ตอนนี้เราต้องแปลงทุกอย่างเพื่อให้สามารถแสดงในเวลาทำงาน

03:17.930 --> 03:20.370
ดังนั้นให้กำจัดเนมสเปซที่นี่ด้วย

03:20.370 --> 03:22.340
ตอนนี้ต้องปิดปีกกาด้วย

03:22.340 --> 03:24.870
และตัวอย่างตอนนี้ เราได้รับสิ่งที่เราต้องการ

03:24.870 --> 03:27.540
เราได้รับข้อผิดพลาด เราได้รับข้อผิดพลาดของส่วนประกอบ

03:27.540 --> 03:29.650
โปรเจ็กต์ ทั้งหมดนี้ขาดหายไป

03:29.650 --> 03:31.890
ลองส่งออกและนำเข้าสิ่งเหล่านี้ทั้งหมด

03:31.890 --> 03:33.220
ตัวอย่างเช่นในองค์ประกอบพื้นฐาน

03:33.220 --> 03:36.810
กำจัดเนมสเปซ เก็บคีย์เวิร์ดการส่งออกตามที่คุณได้เรียนรู้

03:36.810 --> 03:40.810
กำจัดวงเล็บปีกกาปิดและจัดรูปแบบใหม่และนำเข้าโครงการ

03:40.810 --> 03:43.380
เราสามารถกำจัดเนมสเปซได้เสมอ

03:43.380 --> 03:48.803
และข้อมูลอ้างอิงทั้งหมดที่นี่ คุณสามารถลบข้อมูลนำเข้าข้อมูลอ้างอิงทั้งหมดที่คุณมีได้ทุกที่

03:51.300 --> 03:53.593
กำจัดวงเล็บปีกกาเนมสเปซทั้งหมด

03:55.010 --> 03:58.466
รายการโครงการ กำจัดเนมสเปซและการอ้างอิงทั้งหมด

03:58.466 --> 04:00.690
กำจัดวงเล็บปีกกาปิดลงไป

04:00.690 --> 04:05.330
และผู้ตกแต่ง กำจัดเนมสเปซและปีกกาปิดและลากและวาง

04:05.330 --> 04:07.940
เรากำจัดไปแล้ว

04:07.940 --> 04:11.920
โครงการ กำจัดเนมสเปซและปีกกาปิด

04:11.920 --> 04:16.223
โครงการอยู่กำจัดเนมสเปซและการปิดอย่างไม่น่าแปลกใจ

04:18.390 --> 04:22.620
วงเล็บปีกกาที่นี่จริง ๆ แล้วเราอาศัยโครงการที่นำเข้าโดยไฟล์อื่น

04:22.620 --> 04:26.620
ฉันไม่มีการอ้างอิงถึงที่นี่

04:26.620 --> 04:29.880
นั่นคือพฤติกรรมที่เป็นอันตรายที่ฉันพูดถึง

04:29.880 --> 04:36.710
สิ่งนี้อาจล้มเหลวหากเราไม่นำเข้าหรือหากเราไม่อ้างอิงส่วนโครงการของเราในเนมสเปซในไฟล์อื่น

04:36.710 --> 04:39.090
ดังนั้นแน่นอนว่าไม่เหมาะ

04:39.090 --> 04:41.560
แต่ด้วยเหตุนี้เรามาทำการ Refactor กันต่อไป

04:41.560 --> 04:47.550
ในการตรวจสอบที่นี่ ให้กำจัดเนมสเปซที่นี่และวงเล็บปีกกาปิดทั้งหมดที่นี่ที่ด้านล่าง

04:47.550 --> 04:49.150
และสุดท้ายแต่ไม่ท้ายสุดคือ TS

04:49.150 --> 04:51.503
ของแอป กำจัดการนำเข้าเหล่านี้และเนมสเปซ

04:52.700 --> 04:56.988
ตอนนี้เราพบข้อผิดพลาดทุกที่ แต่ตอนนี้เราสามารถเริ่มต้นใหม่ได้

04:56.988 --> 04:59.560
ตอนนี้เรามาเริ่มกันใหม่ในส่วนประกอบพื้นฐาน

04:59.560 --> 05:03.700
นี่ดูดีไม่บ่นดูเหมือนจะมีทุกสิ่งที่ต้องการ

05:03.700 --> 05:06.250
โปรเจกต์อิมพอร์ตก็บ่น

05:06.250 --> 05:08.450
ตัวอย่างเช่น เราต้องมีส่วนประกอบ

05:08.450 --> 05:12.070
ลองเพิ่มการนำเข้าที่ด้านบนและอนุญาตให้นำเข้าส่วนประกอบจากส่วนประกอบฐาน

05:12.070 --> 05:15.830
dot slash

05:15.830 --> 05:19.990
นี่คือวิธีที่คุณนำเข้าหากมีบางอย่างอยู่ในโฟลเดอร์เดียวกัน

05:19.990 --> 05:22.370
dot slash ที่จุดเริ่มต้น จากนั้นชื่อไฟล์และทั้งหมดเป็น

05:22.370 --> 05:24.490
dot JS ที่สำคัญ

05:24.490 --> 05:26.753
อย่าลืมจุด JS ในตอนท้าย

05:28.100 --> 05:30.250
ตอนนี้เราต้องการอินเตอร์เฟสที่ตรวจสอบได้

05:31.170 --> 05:34.650
ที่นี่ และวิธีการตรวจสอบความถูกต้อง ความคิดอัตโนมัติ

05:34.650 --> 05:36.810
และสถานะโครงการ

05:36.810 --> 05:39.140
ลองนำเข้าสิ่งเหล่านี้ทั้งหมดโดยนำเข้าจาก

05:39.140 --> 05:46.149
dot slash หรือไม่เพิ่มระดับหนึ่งจากนั้นใช้การตรวจสอบความถูกต้องของ dot JS

05:46.149 --> 05:56.250
ลองนำเข้าจากไฟล์นั้นตรวจสอบได้และฟังก์ชั่นตรวจสอบความถูกต้องและนำเข้าการผูกอัตโนมัติจาก ขึ้นไปหนึ่งระดับการตกแต่ง

05:56.250 --> 06:00.350
autobind JS

06:00.350 --> 06:05.220
และสุดท้าย แต่ไม่ท้ายสุด สถานะโครงการขอนำเข้าจากการขึ้นหนึ่งระดับ

06:05.220 --> 06:07.580
สถานะโครงการ สถานะ JS

06:07.580 --> 06:13.250
จากนั้นเราสามารถนำเข้าค่าคงที่สถานะโครงการที่เราส่งออกที่นั่น

06:13.250 --> 06:16.773
ตอนนี้นี่คือการนำเข้าทั้งหมดที่เราต้องการที่นี่เพื่อให้ไฟล์นี้ใช้งานได้

06:18.190 --> 06:20.480
ไปที่รายการโครงการตอนนี้

06:20.480 --> 06:23.270
ในนั้นเราต้องการ autobind เราต้องการส่วนประกอบ

06:23.270 --> 06:24.853
เราต้องการโมเดลโครงการ

06:24.853 --> 06:26.700
ลองเพิ่มสิ่งเหล่านี้ทั้งหมด

06:26.700 --> 06:30.520
ตัวอย่างเช่น นำเข้าโมเดลโปรเจ็กต์จากโปรเจ็กต์

06:30.520 --> 06:34.523
dot dot slash models โปรเจ็กต์ JS

06:35.580 --> 06:41.110
ลองเพิ่มส่วนประกอบที่อยู่ในโฟลเดอร์เดียวกัน

06:41.110 --> 06:49.020
ดังนั้นนำเข้าองค์ประกอบฐาน dot slash JS และการผูกอัตโนมัติมานำเข้าการผูกอัตโนมัติจาก

06:50.790 --> 06:55.790
dot dot slash decorator auto bind JS

06:56.020 --> 06:59.383
และตอนนี้ไฟล์นี้ก็มีทุกอย่างที่ต้องการแล้ว

07:01.260 --> 07:03.410
ตอนนี้เรามาที่รายการโครงการกัน

07:03.410 --> 07:10.250
ที่นี่ในรายการโครงการเราต้องการส่วนประกอบด้วยเช่นกันดังนั้นเราจะคัดลอกที่นี่จากรายการโครงการเพิ่มไปยังรายการโครงการ

07:10.250 --> 07:16.120
TS แต่เราไม่ต้องการ draggoble ที่นี่ แต่ให้ลากเป้าหมายแทน ดังนั้นนำเข้ากันเถอะ

07:16.120 --> 07:19.420
.

07:19.420 --> 07:24.550
นอกจากนี้เราต้องการให้โครงการระบุสถานะโครงการ

07:24.550 --> 07:26.540
ใช่ นี่คือสิ่งที่เราต้องการ

07:26.540 --> 07:28.780
และคลาสไอเท็มโปรเจ็กต์ด้วย

07:28.780 --> 07:32.720
ดังนั้นจากไฟล์โมเดลโครงการ เรายังสามารถนำเข้าสถานะโครงการได้อีกด้วย

07:32.720 --> 07:41.740
คุณสามารถนำเข้าสิ่งที่ส่งออกหลายรายการจากไฟล์เดียวกันเพียงคั่นด้วยเครื่องหมายจุลภาคระหว่างวงเล็บปีกกาเหล่านี้เหมือนที่คุณเห็นที่นี่

07:41.740 --> 07:45.910
เรายังนำเข้าค่าคงที่สถานะโปรเจ็กต์จากโฟลเดอร์สถานะ

07:46.790 --> 07:57.130
สถานะโปรเจ็กต์ JS และนำเข้าสุดท้ายแต่ไม่ท้ายสุด ที่ด้านล่างสุดเราต้องการคลาสไอเท็มโปรเจ็กต์

07:57.130 --> 08:01.770
ดังนั้นนำเข้ารายการโครงการจากรายการโครงการ

08:01.770 --> 08:03.623
dot slash dot JS

08:06.810 --> 08:08.280
งั้นไปต่อกันเถอะ

08:08.280 --> 08:13.600
Autobind ไม่เป็นไร สถานะโปรเจ็กต์บ่นว่าเราต้องการโมเดลโปรเจ็กต์

08:13.600 --> 08:20.300
ที่ด้านบนให้นำเข้าโครงการจากโครงการแบบจำลองระดับหนึ่ง

08:20.300 --> 08:22.823
dot JS

08:24.450 --> 08:29.573
เรายังใช้สถานะโปรเจ็กต์ที่นี่ด้วย ดังนั้นมานำเข้าไฟล์นั้นจากไฟล์เดียวกัน'

08:32.320 --> 08:33.960
และสุดท้ายแต่ไม่ท้ายสุด

08:33.960 --> 08:35.660
เราได้รับไฟล์ TS ของแอปที่นั่น

08:35.660 --> 08:38.810
เราจำเป็นต้องนำเข้าอินพุตโปรเจ็กต์

08:38.810 --> 08:43.610
จากอินพุตโครงการส่วนประกอบ dot slash

08:43.610 --> 08:48.030
JS และรายการโครงการจากรายการโครงการ JS' หากตอนนี้เราบันทึกไว้

08:49.290 --> 08:54.330
ควรรวบรวมโดยไม่มีข้อผิดพลาด และตอนนี้เรากำลังใช้โมดูล

08:54.330 --> 09:00.823
ES6 เพื่อจัดระเบียบการนำเข้าและส่งออกของเรา

09:02.640 --> 09:07.040
หากเราดูที่เบราว์เซอร์แม้ว่าเราจะพบข้อผิดพลาด

09:07.040 --> 09:09.390
ตอนนี้เหตุผลคือถ้าเราตรวจสอบโฟลเดอร์

09:09.390 --> 09:12.013
dist เราได้ไฟล์ JS ของบันเดิลของเราถูกต้อง

09:13.040 --> 09:15.900
ตอนนี้เราต้องเปลี่ยนการกำหนดค่า TS อีกครั้ง

09:15.900 --> 09:19.070
อย่างแรกตอนนี้เราไม่ควรใช้

09:19.070 --> 09:22.420
AMD แต่ใช้ ES ยี่สิบห้าแทน

09:22.420 --> 09:27.240
โดยพื้นฐานแล้ว Than เป็นคำรหัสสำหรับ ES6 ซึ่งเป็นเวอร์ชันสคริปต์

09:27.240 --> 09:29.300
agma ที่แนะนำโมดูล ES

09:29.300 --> 09:34.480
เรากำลังบอกโดยพื้นฐานแล้วสคริปต์ประเภทไม่ได้แปลงการนำเข้าของเราเป็นสิ่งใด

09:34.480 --> 09:36.240
ๆ ให้คงไว้ตามที่เป็นอยู่

09:36.240 --> 09:39.250
เบราว์เซอร์สมัยใหม่จะเข้าใจ

09:39.250 --> 09:41.290
ดังนั้นสิ่งสำคัญ ตรวจสอบให้แน่ใจว่าคุณมีเป้าหมายเป็น

09:41.290 --> 09:47.530
ES6 หรือสูงกว่าที่นี่' ตอนนี้คุณควรใส่ความคิดเห็นในไฟล์ออกอีกครั้ง เนื่องจากไม่รองรับโมดูล

09:47.530 --> 09:50.670
ES

09:50.670 --> 09:56.610
และด้วยสิ่งที่คุณได้รับในโฟลเดอร์ dist นั้นโดยพื้นฐานแล้วเป็นการจำลองแบบของโฟลเดอร์ต้นทางของคุณ

09:56.610 --> 09:58.690
แต่ด้วยไฟล์สคริปต์ Java

09:58.690 --> 10:00.480
ตอนนี้เราต้องกลับไปที่ไฟล์ดัชนี

10:00.480 --> 10:04.840
HDML และนำเข้าแอป JS อีกครั้ง เนื่องจากตอนนี้เรามีไฟล์แอป JS ในโฟลเดอร์

10:04.840 --> 10:06.350
dist

10:06.350 --> 10:08.910
และอีกครั้งที่ไฟล์ JS ของแอปนี้จะให้คุณนำเข้าข้อความสั่งในนั้น

10:08.910 --> 10:11.180
เพราะอย่างที่ฉันได้กล่าวไปแล้ว สิ่งนี้ได้รับการสนับสนุนโดยจาวาสคริปต์

10:11.180 --> 10:15.900
โดยเอ็นจิ้นจาวาสคริปต์สมัยใหม่ และโดยเบราว์เซอร์สมัยใหม่

10:15.900 --> 10:19.440
และเบราว์เซอร์จะแก้ไขการนำเข้าเหล่านี้ให้คุณ

10:19.440 --> 10:24.240
ดังนั้นหากเราโหลดสิ่งนี้ซ้ำ เรายังคงได้รับข้อผิดพลาด

10:24.240 --> 10:27.310
ไม่สามารถใช้คำสั่งนำเข้าภายนอกโมดูล

10:27.310 --> 10:33.150
เบราว์เซอร์สมัยใหม่รองรับ sintex นี้ แต่คุณต้องบอกพวกเขาว่าคุณต้องการใช้

10:33.150 --> 10:37.470
และคุณบอกพวกเขาได้โดยการลบ (พึมพำ) ที่นี่และแทนที่แท็กสคริปต์

10:37.470 --> 10:42.777
ซึ่งคุณนำเข้าไฟล์ที่มีคำสั่งการนำเข้าเหล่านี้

10:42.777 --> 10:46.313
คุณใช้โมดูลประเภทเท่ากับ

10:47.300 --> 10:50.450
หากตอนนี้คุณปลอดภัยแล้ว คุณจะเห็นว่ามันใช้งานได้

10:50.450 --> 10:56.120
และตอนนี้ถ้าเราเพิ่มบางสิ่งที่นี่ เราก็จะได้แอปพลิเคชันที่ใช้งานได้อีกครั้ง

10:56.120 --> 11:01.680
ตอนนี้ถ้าคุณตรวจสอบแท็บเครือข่ายโดยวิธีที่คุณจะเห็นว่าถ้าคุณโหลดซ้ำ

11:01.680 --> 11:05.290
มีคำขอเครือข่ายจำนวนมากเกิดขึ้น ถ้าฉันซูมออกเล็กน้อย

11:05.290 --> 11:07.410
เราจะเห็นได้ดีขึ้น

11:07.410 --> 11:10.340
ขอไฟล์จาวาสคริปต์ของเราทั้งหมดได้ที่นี่

11:10.340 --> 11:14.780
เบราว์เซอร์ร้องขอโดยอัตโนมัติเมื่อพบการนำเข้าของเรา

11:14.780 --> 11:16.967
ดังนั้นมันจึงเริ่มต้นด้วยแอป JS จากนั้นจึงเห็นการนำเข้าไปยังอินพุตโปรเจ็กต์

11:16.967 --> 11:19.410
JS

11:19.410 --> 11:23.160
ที่นี่และด้วยเหตุนี้ คำขอต่อไปจึงไปที่อินพุตของโปรเจกต์

11:23.160 --> 11:25.410
นอกจากนี้ยังทำเช่นเดียวกันสำหรับรายการโครงการ

11:25.410 --> 11:27.360
ตอนนี้ในอินพุตโปรเจ็กต์จะเห็นอินพุตจาก

11:27.360 --> 11:29.422
JS คอมโพเนนต์ฐาน ซึ่งเป็นสาเหตุที่อิมพอร์ต

11:29.422 --> 11:33.400
JS คอมโพเนนต์ฐานของโพรบด้วย

11:33.400 --> 11:35.530
เบราว์เซอร์ทำสิ่งนี้ เราจึงใช้ประโยชน์จากมัน

11:35.530 --> 11:38.170
และตอนนี้เรามีอีกวิธีในการแยกไฟล์ของเรา

11:38.170 --> 11:45.850
แต่ด้วยข้อดีเพิ่มเติมที่เราระบุอย่างชัดเจนว่าเราต้องการอะไรจากแต่ละไฟล์ และถ้าเราละเว้นการนำเข้า พิมพ์สคริปต์จะตะโกนใส่เรา

11:45.850 --> 11:49.100
ซึ่งวิธีนี้ไม่ได้ทำกับวิธีก่อนหน้านี้ ซึ่งวิธีนี้คือคำแนะนำของฉันจริงๆ

11:49.100 --> 11:58.870
และเหตุใดจึงเป็นวิธีมาตรฐานในการนำเข้าและส่งออกของ defacto

11:58.870 --> 12:00.710
ตอนนี้ ถ้าคุณเคยทำงานกับ type

12:00.710 --> 12:03.850
script มาก่อนในโปรเจ็กต์อื่นๆ สมมติว่าในโปรเจ็กต์เชิงมุม

12:03.850 --> 12:06.380
คุณอาจเคยชินที่ไม่ต้องระบุนามสกุลไฟล์ที่นี่

12:06.380 --> 12:12.210
เราก็จะละเว้นได้เมื่อเราเพิ่ม แพ็คเว็บและเครื่องมือเรียกเก็บเงิน

12:12.210 --> 12:16.870
ตราบใดที่เราไม่มีสิ่งนั้นและเราต้องใช้เบราว์เซอร์ในการนำเข้าไฟล์ของเรา

12:16.870 --> 12:18.833
คุณต้องเพิ่มส่วนขยายพิเศษนั้น
