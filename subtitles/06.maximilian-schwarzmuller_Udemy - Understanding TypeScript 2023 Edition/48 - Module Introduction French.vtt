WEBVTT

00:02.260 --> 00:04.220
Maintenant que nous avons une bonne compréhension

00:04.220 --> 00:08.410
des fonctionnalités de base de typescript et de ce que typescript ajoute.

00:08.410 --> 00:10.070
Et nous comprenons aussi comment

00:10.070 --> 00:12.320
le compilateur de typescript fonctionne.

00:12.320 --> 00:13.760
Voyons ce que Typescript

00:13.760 --> 00:15.020
a d'autre à offrir, notamment

00:15.020 --> 00:18.700
en ce qui concerne la syntaxe Javascript moderne.

00:18.700 --> 00:22.130
Il s'agit d'un terme difficile et assez vague, mais en fin de compte,

00:22.130 --> 00:23.360
ce que j'entends par là, ce

00:23.360 --> 00:26.380
sont les fonctionnalités Javascript qui existent depuis quelques

00:26.380 --> 00:28.410
années maintenant et qui sont bien supportées

00:28.410 --> 00:30.790
par les navigateurs modernes, mais qui ne fonctionnent

00:30.790 --> 00:33.290
pas nécessairement dans tous, surtout dans les anciens

00:33.290 --> 00:34.970
navigateurs et là, surtout dans Internet

00:34.970 --> 00:37.570
Explorer.

00:37.570 --> 00:40.210
Je parle de choses comme Let, Cons, les fonctions

00:40.210 --> 00:43.240
flèches, la syntaxe de déstructuration, l'opérateur

00:43.240 --> 00:45.350
d'étalement, et ainsi de suite.

00:45.350 --> 00:48.220
Donc si c'est quelque chose que vous connaissez absolument,

00:48.220 --> 00:51.950
vous pouvez sauter ce module parce qu'il rafraîchira également les

00:51.950 --> 00:54.230
connaissances sur ces sujets, mais il expliquera

00:54.230 --> 00:56.240
aussi ce que typescript fait avec ces

00:56.240 --> 00:59.000
choses, avec cette syntaxe.

00:59.000 --> 01:01.450
Mais, en résumé, typescript le compile de telle

01:01.450 --> 01:02.980
sorte qu'il fonctionne.

01:02.980 --> 01:04.510
Nous allons néanmoins y jeter un

01:04.510 --> 01:05.940
coup d'œil, mais vous pouvez

01:05.940 --> 01:08.290
sauter ce module si vous savez déjà tout cela.

01:08.290 --> 01:10.130
Vous pouvez simplement jeter un coup d'œil

01:10.130 --> 01:12.400
au programme et voir s'il y a un cours dans ce module

01:12.400 --> 01:14.260
qui pourrait encore vous intéresser, sinon,

01:14.260 --> 01:16.450
je vous verrai après ce module.

01:16.450 --> 01:18.140
Si vous n'êtes pas sûr de ces fonctionnalités,

01:18.140 --> 01:20.500
si vous connaissez Javascript, en ce qui concerne Var

01:20.500 --> 01:22.610
et Zon, mais que vous ne savez pas ce que le mot-clé

01:22.610 --> 01:24.810
Let ou Cons signifie vraiment, alors vous devriez

01:24.810 --> 01:27.820
rester avec moi et vous plonger dans ce module.

01:27.820 --> 01:29.860
Pour cela, j'ai mis en place un tout nouveau projet,

01:29.860 --> 01:31.450
vous le trouverez en pièce jointe.

01:31.450 --> 01:34.780
Et vous devez toujours exécuter NPM install en premier dans

01:34.780 --> 01:35.613
ces projets.

01:35.613 --> 01:37.610
N'oubliez pas ceci pour installer toutes les dépendances

01:37.610 --> 01:39.530
et ensuite toujours NPM start pour démarrer

01:39.530 --> 01:41.390
ce serveur de développement.

01:41.390 --> 01:44.480
Il s'agit d'un projet similaire à celui que nous avions

01:44.480 --> 01:46.280
à la fin du dernier module.

01:46.280 --> 01:49.550
Le fichier tsconfig avec une configuration assez

01:50.470 --> 01:53.210
stricte An app. ts ici et ce dossier sera

01:53.210 --> 01:54.740
généré automatiquement.

01:54.740 --> 01:57.100
Au fait, gardez ce serveur de développement en marche

01:57.100 --> 01:58.360
bien sûr comme vous l'avez

01:58.360 --> 02:00.610
fait avant, et maintenant nous pouvons toujours

02:00.610 --> 02:03.300
compiler notre code avec la commande TSC ici.

02:03.300 --> 02:06.670
Ou, et c'est ce que je vais faire ici, TSC dash W pour entrer en mode veille

02:06.670 --> 02:09.160
et s'assurer que nous recompilons chaque fois que

02:09.160 --> 02:10.980
nous changeons quelque chose.

02:10.980 --> 02:12.900
Voilà donc notre projet configuré et nous allons maintenant

02:12.900 --> 02:15.030
nous plonger dans les caractéristiques de la nouvelle génération

02:15.030 --> 02:17.790
de Javascript, les types de scripts qu'elle prend en charge et ce dont vous

02:17.790 --> 02:19.390
devez être conscient.
