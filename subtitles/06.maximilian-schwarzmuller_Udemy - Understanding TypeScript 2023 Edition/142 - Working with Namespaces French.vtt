WEBVTT

00:02.190 --> 00:04.860
- : Je veux commencer par la fonctionnalité d'espace de noms.

00:04.860 --> 00:06.810
Maintenant pour vous montrer comment

00:06.810 --> 00:09.980
ça marche, je vais prendre ces deux interfaces ici.

00:09.980 --> 00:11.480
Les interfaces de glisser-déposer, supprimez-les

00:11.480 --> 00:14.140
de l'application. ts et ajouter un nouveau

00:14.140 --> 00:19.140
fichier, dragdropinterfaces. ts par exemple.

00:21.270 --> 00:25.180
Nous pouvons maintenant le coller et pour utiliser les

00:25.180 --> 00:29.140
espaces de noms, il suffit d'ajouter le mot clé namespace

00:31.645 --> 00:33.620
et les accolades.

00:33.620 --> 00:35.880
Maintenant, nous devons aussi donner un nom

00:35.880 --> 00:39.590
à cet espace de nom et ici je vais le nommer DD Interfaces pour un drag and

00:39.590 --> 00:41.660
drop, le nom est à votre convenance.

00:41.660 --> 00:43.640
Cette année, il s'agit d'une fonctionnalité de

00:43.640 --> 00:45.250
TypeScript, et non de JavaScript.

00:45.250 --> 00:47.750
Il n'est pas compilé à Vanilla JavaScript parce

00:47.750 --> 00:50.340
qu'il n'y a pas d'équivalent direct pour lui.

00:50.340 --> 00:54.860
Au lieu de cela, TypeScript va le compiler en un objet, en quelque

00:54.860 --> 00:55.693
sorte.

00:55.693 --> 00:57.490
En un objet où les éléments que vous

00:57.490 --> 01:00.440
placerez dans l'espace de nom seront stockés dans des

01:00.440 --> 01:02.140
propriétés, mais vous n'aurez

01:02.140 --> 01:06.960
pas à vous en soucier car la résolution de l'accès à ces propriétés et le fonctionnement

01:06.960 --> 01:10.640
de l'ensemble seront pris en charge par TypeScript.

01:10.640 --> 01:13.940
Nous pouvons maintenant déplacer ces interfaces dans l'espace

01:13.940 --> 01:16.130
de noms et nous avons presque terminé.

01:16.130 --> 01:18.040
Nous avons maintenant un problème, cependant,

01:18.040 --> 01:22.280
ces interfaces ne sont maintenant disponibles que dans cet espace de nom.

01:22.280 --> 01:23.113
D'ailleurs, vous

01:23.113 --> 01:25.530
ne pouvez pas seulement mettre des interfaces dans

01:25.530 --> 01:27.070
un espace de nom, vous pouvez y mettre

01:27.070 --> 01:28.057
n'importe quoi, des classes,

01:28.057 --> 01:30.780
des constantes, tout ce que vous voulez.

01:30.780 --> 01:33.900
Tout ce que vous voulez peut être placé dans un espace de nom.

01:33.900 --> 01:35.630
Donc, en gros, vous pouvez envelopper un espace de nom

01:35.630 --> 01:37.150
autour de n'importe quel code que vous avez.

01:37.150 --> 01:39.830
Mais le problème que nous rencontrons est que ces fonctionnalités,

01:39.830 --> 01:41.140
ces interfaces, ne sont désormais

01:41.140 --> 01:44.800
disponibles qu'à l'intérieur de cet espace de nom.

01:44.800 --> 01:47.280
Maintenant, comme vous le voyez, nous n'avons rien d'autre là-dedans.

01:47.280 --> 01:49.010
Maintenant, bien sûr, nous pourrions

01:49.010 --> 01:51.600
ramener le code qui dépend de ces interfaces dans cet

01:51.600 --> 01:53.370
espace de nom, mais là encore, nous ferions

01:53.370 --> 01:56.960
tout sauter parce qu'il s'avère que nous avons une classe assez longue qui

01:56.960 --> 01:58.940
dépend de ces interfaces.

01:58.940 --> 02:02.900
Nous avons la classe de liste de projet et la classe d'élément de projet.

02:02.900 --> 02:05.260
Ils dépendent de ces interfaces, donc il

02:05.260 --> 02:08.922
y aurait beaucoup de choses à ajouter à cet espace de noms.

02:08.922 --> 02:10.205
Par conséquent, vous pouvez

02:10.205 --> 02:14.210
ajouter le mot-clé export devant une interface pour exporter une fonctionnalité

02:14.210 --> 02:16.850
à partir d'un espace de noms.

02:16.850 --> 02:19.680
Cela signifie que ces interfaces sont maintenant disponibles

02:19.680 --> 02:22.110
à l'intérieur de cet espace de nom, mais aussi

02:22.110 --> 02:24.487
à l'extérieur de ce fichier.

02:24.487 --> 02:26.100
Et nous verrons comment cela fonctionne

02:26.100 --> 02:28.510
dans une seconde, mais avec cela nous faisons cette

02:28.510 --> 02:30.710
interface ou ce que nous exportons.

02:30.710 --> 02:32.815
Cela n'est pas limité aux interfaces

02:32.815 --> 02:36.610
qui sont bien sûr disponibles en dehors de ce fichier,

02:36.610 --> 02:41.140
si nous importons ou utilisons cet espace de noms.

02:41.140 --> 02:41.973
Et bien sûr, une fois encore,

02:41.973 --> 02:44.580
vous ne pouvez pas vous contenter d'exporter des interfaces dans un espace de

02:44.580 --> 02:45.636
noms, mais n'importe quoi.

02:45.636 --> 02:48.010
Maintenant, la question est de savoir comment importer

02:48.010 --> 02:52.410
cet espace de nom dans l'application.

02:52.410 --> 02:52.410
ts

02:52.410 --> 02:56.210
et pour cela, TypeScript dispose d'une syntaxe spéciale que vous pouvez utiliser.

02:56.210 --> 02:57.867
Revenons au début de l'application. ts et maintenant

02:57.867 --> 03:01.440
ici vous ajoutez trois barres obliques, trois importantes, pas seulement

03:01.440 --> 03:03.690
deux parce que ce n'est pas un commentaire

03:03.690 --> 03:06.150
normal ce que nous créons maintenant ce sera en

03:06.150 --> 03:07.330
fait la syntaxe ramassée

03:07.330 --> 03:10.280
par TypeScript un commentaire spécial, vous pourriez

03:10.280 --> 03:13.110
dire que TypeScript comprend si elle commence avec trois

03:13.110 --> 03:15.500
barres obliques.

03:15.500 --> 03:19.301
Là, vous écrivez une balise XML auto-fermante, donc

03:19.301 --> 03:21.600
une parenthèse d'ouverture,

03:21.600 --> 03:24.530
puis une barre oblique de fermeture et

03:24.530 --> 03:25.790
dans leur chemin

03:25.790 --> 03:29.220
de référence, des égaux, puis ici le nom du fichier

03:29.220 --> 03:32.370
que vous voulez importer.

03:32.370 --> 03:35.217
Dans mon cas, il s'agit de dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Maintenant, ceci est compris et repris par TypeScript parce que, comme

03:42.550 --> 03:45.220
je l'ai mentionné avec les trois barres obliques de départ,

03:45.220 --> 03:47.560
c'est une syntaxe spéciale que TypeScript comprend

03:47.560 --> 03:50.110
tout comme il comprend cette référence.

03:50.110 --> 03:51.960
Ce n'est pas Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript ne remarque

03:53.970 --> 03:58.480
pas et ce n'est pas ce à quoi il ressemblera une fois compilé.

03:58.480 --> 04:00.430
Mais à quoi cela sert-il ?

04:00.430 --> 04:07.104
Ainsi, l'espace de nom DD Interfaces est maintenant disponible dans l'application.

04:07.104 --> 04:07.104
ts.

04:07.104 --> 04:08.920
Cependant, si vous faites défiler la page vers le bas,

04:08.920 --> 04:11.040
vous verrez que mes éditeurs se plaignent toujours et si nous

04:11.040 --> 04:12.250
avons essayé de le sauvegarder comme

04:12.250 --> 04:14.300
nous le faisons tous de bonnes erreurs de compilation.

04:14.300 --> 04:16.410
Donc, il ne semble pas être disponible.

04:16.410 --> 04:19.730
L'interface dragable ne semble pas être disponible ici.

04:19.730 --> 04:22.386
Les espaces de noms ont une particularité.

04:22.386 --> 04:25.840
Vous pouvez les utiliser pour diviser votre code et n'oubliez pas

04:25.840 --> 04:27.930
que, comme je l'ai dit précédemment, ce

04:27.930 --> 04:29.610
que vous avez dans un espace de noms

04:29.610 --> 04:32.557
peut être utilisé partout dans cet espace de noms.

04:32.557 --> 04:34.157
Eh bien, il s'avère que vous pouvez

04:34.157 --> 04:37.580
diviser les espaces de noms sur plusieurs fichiers en exportant

04:37.580 --> 04:39.110
des choses dans un espace de noms

04:39.110 --> 04:42.330
et en utilisant ensuite cette syntaxe d'importation spéciale,

04:42.330 --> 04:45.230
mais vous devez ensuite mettre les choses qui veulent utiliser

04:45.230 --> 04:48.250
quelque chose de cet espace de noms d'importation ou de ce

04:48.250 --> 04:50.180
fichier importé dans le même espace de

04:50.180 --> 04:51.797
noms.

04:51.797 --> 04:55.050
Par conséquent, DD Interfaces n'est peut-être pas le meilleur nom.

04:55.050 --> 04:58.010
Peut-être que nous avons juste nommé App.

04:58.010 --> 04:59.740
Maintenant, si nous avons nommé l'application ici, nous pouvons

04:59.740 --> 05:01.670
aller à l'application. ts et créer un

05:01.670 --> 05:04.180
espace de nom du même nom ici, l'espace

05:04.180 --> 05:05.630
de nom App.

05:05.630 --> 05:06.890
Et maintenant pour le moment,

05:06.890 --> 05:10.750
mettons tout ici dans cet espace de nom et maintenant vous voyez que l'erreur

05:10.750 --> 05:12.610
a disparu Il n'y a pas de points rouges

05:12.610 --> 05:14.300
à droite.

05:14.300 --> 05:15.513
Cependant, si je l'ai sauvegardé,

05:15.513 --> 05:17.850
j'obtiendrai toujours des erreurs ici.

05:17.850 --> 05:22.850
Par exemple, cette liste de projets finis n'est pas utilisée.

05:25.010 --> 05:26.300
C'est exact, je

05:26.300 --> 05:28.210
ne l'utilise pas.

05:28.210 --> 05:29.600
Je n'en ai pas besoin non plus,

05:29.600 --> 05:32.610
donc nous pouvons simplement supprimer ces concepts ici.

05:32.610 --> 05:35.190
Avec cela, si nous sauvegardons ceci,

05:35.190 --> 05:38.040
maintenant il a compilé sans erreurs.

05:38.040 --> 05:39.880
La question est simplement de savoir quel

05:39.880 --> 05:41.920
est le résultat de cette compilation.

05:41.920 --> 05:44.260
Avons-nous un ou deux dossiers maintenant ?

05:44.260 --> 05:46.170
Jetons un coup d'œil au dossier

05:46.170 --> 05:49.380
du disque. Vous y voyez un fichier JS d'application,

05:49.380 --> 05:50.780
puis du code ici et un fichier

05:50.780 --> 05:53.980
JS d'interface de glisser-déposer.

05:53.980 --> 05:56.690
Nous avons donc deux fichiers en conséquence.

05:56.690 --> 05:59.500
Le fichier d'interface de dragon drop est en fait assez

05:59.500 --> 06:00.830
vide car vous avez appris

06:00.830 --> 06:04.360
que les interfaces ne sont pas compilées en quoi que ce soit.

06:04.360 --> 06:07.300
Il n'existe pas d'équivalent JavaScript pour une interface.

06:07.300 --> 06:09.270
Il s'agit d'une fonctionnalité purement TypeScript.

06:09.270 --> 06:12.370
Nous pouvons donc l'importer avec la syntaxe TypeScript ici pour l'utiliser

06:12.370 --> 06:15.509
et obtenir toutes les améliorations de type que nous avons apprises,

06:15.509 --> 06:17.300
mais en production, le fait qu'il soit dans

06:17.300 --> 06:20.060
un fichier séparé ou non n'a pas d'importance.

06:20.060 --> 06:21.840
Alors bien sûr, la question est de

06:21.840 --> 06:26.380
savoir ce qui se passe si nous mettons maintenant quelque chose qui existe en production,

06:26.380 --> 06:28.630
qui existe aussi en JavaScript, dans un fichier

06:28.630 --> 06:30.000
séparé.

06:30.000 --> 06:33.373
Par exemple, fait enum et la classe de projet

06:35.520 --> 06:36.470
ici, je vais prendre

06:36.470 --> 06:37.610
les deux, créer

06:37.610 --> 06:41.410
un nouveau fichier, projet dash modèle TS et mettre

06:41.410 --> 06:46.040
mon projet statut enum et classe de projet dans là.

06:46.040 --> 06:47.420
Maintenant, comme précédemment,

06:47.420 --> 06:49.070
nous pouvons ajouter un espace de nom

06:49.070 --> 06:50.590
ici, le nom doit être App, donc il doit

06:50.590 --> 06:51.790
être fait espace de nom où nous

06:51.790 --> 06:54.020
voulons aussi l'utiliser et nous devons exporter

06:54.020 --> 06:57.340
ces caractéristiques dans cet espace, de sorte que nous pouvons les utiliser

06:57.340 --> 07:00.440
dans d'autres fichiers dans le même espace de nom, mais aussi dans d'autres

07:00.440 --> 07:02.640
fichiers.

07:02.640 --> 07:03.980
Maintenant, retour dans l'application. ts, nous devons

07:03.980 --> 07:05.900
importer ce deuxième fichier.

07:05.900 --> 07:07.890
Je vais donc dupliquer cet import

07:07.890 --> 07:11.515
et tous les modèles dash ts du projet d'import.

07:11.515 --> 07:13.800
si j'ai sauvegardé cela et maintenant est compilé

07:13.800 --> 07:16.610
et nous voyons un fichier JavaScript modèle de projet.

07:16.610 --> 07:18.184
Et là-dedans, on

07:18.184 --> 07:19.490
voit du code.

07:19.490 --> 07:22.770
La question est de savoir si notre application fonctionne maintenant.

07:22.770 --> 07:24.620
Pour cela, rechargeons-le et essayons

07:25.480 --> 07:27.587
d'ajouter un projet ici et vous voyez,

07:27.587 --> 07:29.903
nous obtenons une erreur.

07:29.903 --> 07:33.183
Impossible de lire la propriété active d'undefined.

07:34.120 --> 07:36.090
La raison en est simplement que nos

07:36.090 --> 07:38.854
fichiers sont compilés de manière autonome.

07:38.854 --> 07:41.410
Les espaces de noms existent dans le monde TypeScript

07:41.410 --> 07:44.640
comme je l'ai dit, il n'y a pas d'équivalence JavaScript pour cela.

07:44.640 --> 07:47.430
Le problème que nous rencontrons ici est que dans le monde de TypeScript,

07:47.430 --> 07:48.263
tout est parfait car

07:48.263 --> 07:51.610
TypeScript est capable de trouver toutes les choses dont nous avons besoin.

07:51.610 --> 07:52.800
Par exemple, quand je

07:52.800 --> 07:54.420
dis projet ici, quand je fais

07:54.420 --> 07:56.310
référence au type de projet ici sur

07:56.310 --> 07:58.130
la classe d'état de projet, ce type

07:58.130 --> 07:59.310
de projet, cette classe

07:59.310 --> 08:00.610
de projet est définie dans

08:00.610 --> 08:02.840
le modèle de projet.

08:02.840 --> 08:06.020
Maintenant TypeScript ne se plaint pas de votre incomplétude

08:06.020 --> 08:07.570
parce que nous importons ce modèle,

08:07.570 --> 08:10.250
mais l'importation ici signifie simplement que nous

08:10.250 --> 08:13.960
disons à TypeScript où trouver ce type une fois qu'il est compilé en JavaScript,

08:13.960 --> 08:15.810
la déconnexion est fondamentalement

08:15.810 --> 08:18.150
détruite.

08:18.150 --> 08:20.840
Ainsi, dans le code JavaScript, lorsqu'il est exécuté

08:20.840 --> 08:23.230
et que nous essayons ensuite de créer un nouveau

08:23.230 --> 08:25.130
projet en instanciant le projet, JavaScript

08:25.130 --> 08:27.430
ne trouve pas cette classe de projet ou cette

08:27.430 --> 08:29.610
fonction de construction.

08:29.610 --> 08:32.980
Nous devons donc nous assurer que nous reportons la déconnexion.

08:32.980 --> 08:35.420
Et pour cela, nous pouvons aller dans le

08:35.420 --> 08:39.640
TS (marmonnements) et y mettre cette option de fichier de sortie.

08:39.640 --> 08:40.740
Nous pouvons commenter

08:40.740 --> 08:43.010
cela et l'idée derrière le fichier

08:43.010 --> 08:45.540
out est que vous dites à TypeScript qu'il

08:45.540 --> 08:48.620
doit concaténer les espaces de noms.

08:48.620 --> 08:49.670
Ainsi, ces références,

08:49.670 --> 08:51.740
qu'il a pendant la compilation, sont regroupées

08:51.740 --> 08:53.950
dans un seul fichier JavaScript au lieu de

08:53.950 --> 08:56.970
compiler plusieurs fichiers JavaScript.

08:56.970 --> 08:59.210
Donc ici, pour le fichier out, nous pouvons dire que

08:59.210 --> 09:02.350
nous voulons avoir un fichier dans le dossier du disque, que nous avons

09:02.350 --> 09:04.770
nommé peut-être bundle. js Et si on fait ça et

09:05.630 --> 09:07.050
qu'on l'enregistre,

09:07.050 --> 09:08.700
on aura une erreur ici.

09:09.650 --> 09:10.710
Nous obtiendrons une

09:12.300 --> 09:14.410
erreur indiquant que seuls les modules AMD

09:14.410 --> 09:17.250
et système sont pris en charge avec le fichier out.

09:17.250 --> 09:19.540
Maintenant, nous n'avons pas besoin de tout comprendre

09:19.540 --> 09:23.160
ici Il y a fondamentalement différentes façons de charger ou de regrouper différents

09:23.160 --> 09:26.120
fichiers JavaScript en un seul pour des raisons historiques et comment

09:26.120 --> 09:28.770
tout cela est développé et vous pouvez en apprendre plus sur

09:28.770 --> 09:31.250
ces différents types de regroupement dans une ressource

09:31.250 --> 09:33.700
jointe si vous le souhaitez, vous n'en avez pas besoin

09:33.700 --> 09:35.340
cependant.

09:35.340 --> 09:36.800
Donc, ce que nous devons faire

09:36.800 --> 09:38.120
ici, c'est définir le module

09:38.120 --> 09:40.470
qui est déjà mis en évidence comme une erreur

09:40.470 --> 09:41.598
ici, pas à JS commun,

09:41.598 --> 09:43.943
mais à AMD par exemple.

09:45.400 --> 09:47.700
Si nous faisons cela, il compile sans problème

09:47.700 --> 09:50.010
même s'il se plaint toujours ici, mais il n'a

09:50.010 --> 09:52.140
pas remarqué que je l'ai changé et maintenant

09:52.140 --> 09:53.860
ce qui se passe est en fait qu'il y

09:53.860 --> 09:56.570
a un nouveau fichier bundle JS dans dist.

09:56.570 --> 10:00.310
Si je supprime tous les fichiers JavaScript dans le dossier

10:00.310 --> 10:04.680
du disque et que je redémarre mon TSC dash nous traitons donc le compilateur

10:04.680 --> 10:05.580
vous verrez que

10:05.580 --> 10:08.600
seul ce fichier JS bundle est généré.

10:08.600 --> 10:11.530
Ce fichier contiendra tout notre code dans

10:11.530 --> 10:13.250
la version compilée et traduite

10:13.250 --> 10:15.400
et donc maintenant dans l'index

10:15.400 --> 10:20.300
HTML, nous devons juste importer bundle JS ici au lieu de App JS.

10:20.300 --> 10:23.610
Et si nous le faisons et que nous rechargeons ici, nous avons à nouveau

10:23.610 --> 10:25.830
une application fonctionnelle où nous pouvons

10:25.830 --> 10:28.260
utiliser le glisser-déposer car maintenant tout

10:28.260 --> 10:30.410
est dans un seul fichier, mais seulement

10:30.410 --> 10:32.661
dans le résultat final.

10:32.661 --> 10:34.230
Pendant le développement,

10:34.230 --> 10:36.260
nous avons ces espaces de noms

10:36.260 --> 10:39.030
ici, ce qui est un pas dans la bonne direction

10:39.030 --> 10:41.970
car c'est déjà un peu plus gérable.

10:41.970 --> 10:44.350
Divisons maintenant ce fichier en encore plus

10:44.350 --> 10:47.250
de fichiers avant d'examiner l'option de division moyenne

10:47.250 --> 10:48.283
des modules TS.
