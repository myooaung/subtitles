WEBVTT

00:02.220 --> 00:03.760
Instructeur : Le dernier type

00:03.760 --> 00:07.490
intéressant que je veux montrer dans ce module est le type jamais.

00:07.490 --> 00:10.660
Maintenant nous avons vu une fonction qui retourne void.

00:10.660 --> 00:13.058
Donc ça ne renvoie jamais rien.

00:13.058 --> 00:17.380
Jamais n'est un autre type de fonction qui peut revenir.

00:17.380 --> 00:19.240
Et ça peut paraître étrange.

00:19.240 --> 00:21.110
Voyons comment cela fonctionne.

00:21.110 --> 00:24.662
Disons que nous avons une fonction generateError.

00:24.662 --> 00:28.280
Ici, je m'attends à obtenir un message, qui est une chaîne de caractères,

00:28.280 --> 00:31.610
et peut-être un code d'erreur, qui peut être un nombre.

00:31.610 --> 00:33.700
Maintenant, à l'intérieur de cette fonction,

00:33.700 --> 00:35.130
disons qu'on lance une erreur.

00:35.130 --> 00:37.760
Il s'agit donc essentiellement d'une fonction

00:37.760 --> 00:41.500
utilitaire qui génère des objets d'erreur et les jette.

00:41.500 --> 00:42.990
Donc ici, nous pourrions lancer un objet, ce

00:42.990 --> 00:44.380
que nous pouvons faire en JavaScript.

00:44.380 --> 00:47.366
Nous pouvons lancer n'importe quel objet ou n'importe quelle

00:47.366 --> 00:49.930
valeur comme erreur, et cela devrait avoir une propriété

00:49.930 --> 00:53.990
de message, dans laquelle je stocke la valeur de mon argument de message ici.

00:53.990 --> 00:56.390
Et je veux avoir une propriété de code d'erreur,

00:56.390 --> 00:59.417
disons effacer le mot, l'argument de code dans .

01:00.330 --> 01:02.390
C'est le cas de la fonction

01:02.390 --> 01:06.600
invalide, que nous pouvons appeler avec une erreur survenue,

01:06.600 --> 01:09.640
par exemple, et un code 500.

01:09.640 --> 01:12.213
Si nous faisons cela, et que nous compilons ce fichier

01:14.120 --> 01:17.080
ici, nous voyons qu'une fois que cela se recharge, nous obtenons

01:17.080 --> 01:19.150
notre erreur, ainsi qu'une erreur ici.

01:19.150 --> 01:21.670
Et cela peut sembler assez abstrait, mais en fait,

01:21.670 --> 01:22.850
ça ne l'est pas.

01:22.850 --> 01:24.640
Les fonctions utilitaires de ce type

01:24.640 --> 01:27.850
sont assez courantes dans les grandes applications où l'on ne veut

01:27.850 --> 01:30.270
pas lancer manuellement une erreur à dix endroits

01:30.270 --> 01:32.540
différents de l'application, et où l'on veut

01:32.540 --> 01:35.380
accéder à une fonction pratique qui construit l'objet d'erreur

01:35.380 --> 01:37.450
pour nous et qui peut aussi le lancer immédiatement,

01:37.450 --> 01:39.350
de sorte que l'on peut appeler cette fonction

01:39.350 --> 01:42.300
avec différentes entrées, mais que l'erreur est toujours

01:42.300 --> 01:44.690
lancée.

01:44.690 --> 01:47.010
Ce qui est intéressant dans cette fonction, c'est

01:47.010 --> 01:49.048
qu'elle ne renvoie pas seulement void.

01:49.048 --> 01:52.385
En fait, je peux préciser qu'elle renvoie void, parce

01:52.385 --> 01:54.545
que bien sûr elle ne renvoie rien,

01:54.545 --> 01:58.030
mais en fait elle ne renvoie pas seulement rien, si nous

01:58.030 --> 02:02.630
sommes totalement honnêtes, cette fonction ne renvoie jamais.

02:02.630 --> 02:05.518
Cette fonction ne produit jamais de valeur de retour.

02:05.518 --> 02:08.860
Si j'essaie de restaurer la valeur de retour ici, dans un résultat

02:08.860 --> 02:11.193
d'enregistrement de la console, et que je

02:12.040 --> 02:16.240
compile ensuite mon code dans cette exécution, nous voyons qu'il n'y a pas

02:16.240 --> 02:19.630
de valeur indéfinie enregistrée ici, car puisqu'une erreur

02:19.630 --> 02:22.220
est lancée, cela fait essentiellement planter

02:22.220 --> 02:25.330
notre script, pourrait-on dire.

02:25.330 --> 02:27.080
Ça annule notre scénario.

02:27.080 --> 02:30.290
Et ce sera toujours le cas pour cette fonction.

02:30.290 --> 02:32.210
Bien sûr, nous pouvons l'envelopper dans un

02:32.210 --> 02:34.260
try catch afin de pouvoir continuer dans ce script,

02:34.260 --> 02:37.620
mais cette fonction ne produit essentiellement jamais de valeur.

02:37.620 --> 02:41.060
Cette fonction fait toujours planter le script

02:41.060 --> 02:42.910
ou cette partie du script,

02:42.910 --> 02:44.720
si vous utilisez try catch,

02:44.720 --> 02:47.910
et ne renvoie donc jamais rien.

02:47.910 --> 02:50.400
Et donc le type de retour de cette fonction

02:50.400 --> 02:54.483
n'est pas seulement void, mais aussi never.

02:55.710 --> 02:56.700
Ce qui est intéressant,

02:56.700 --> 02:59.060
c'est que si vous le survolez sans jamais l'assigner,

02:59.060 --> 03:01.680
vous voyez que le type inféré est void.

03:01.680 --> 03:05.410
Alls parce que never est un type plus récent, il existe depuis un certain

03:05.410 --> 03:07.060
temps maintenant, mais il n'a

03:07.060 --> 03:10.000
pas été intégré dans les premières versions de TypeScript,

03:10.000 --> 03:12.620
et donc void est typiquement supposé, et ce n'est

03:12.620 --> 03:15.417
pas horrible de le laisser comme ça.

03:15.417 --> 03:17.740
Mais vous pouvez être très clair et définir

03:17.740 --> 03:21.470
explicitement never comme type de retour pour qu'il soit bien

03:21.470 --> 03:24.490
clair que cela ne renvoie jamais rien.

03:24.490 --> 03:26.770
Ainsi, du point de vue de la qualité du code,

03:26.770 --> 03:29.560
cela pourrait être plus clair quant à vos intentions

03:29.560 --> 03:30.680
et indiquer clairement

03:30.680 --> 03:32.330
à nos développeurs qui lisent votre

03:32.330 --> 03:35.850
code que cette fonction est destinée à ne jamais retourner quoi que

03:35.850 --> 03:39.560
ce soit, et à faire planter ou briser votre script, ou cette partie du

03:39.560 --> 03:40.954
script.

03:40.954 --> 03:43.890
Une autre fonction qui ne reviendrait jamais, soit dit

03:43.890 --> 03:47.190
en passant, serait une fonction avec une boucle infinie.

03:47.190 --> 03:49.370
Donc si nous avons while (true), cela

03:49.370 --> 03:51.060
crée une boucle infinie, et

03:51.060 --> 03:52.790
c'est donc aussi une fonction

03:52.790 --> 03:54.410
qui ne revient jamais.

03:54.410 --> 03:56.070
La fonction d'erreur ici, ou la fonction

03:56.070 --> 03:58.852
qui génère une erreur gelée est probablement le cas d'utilisation

03:58.852 --> 04:01.305
le plus courant, cependant.

04:01.305 --> 04:04.500
Donc jamais, aussi un type intéressant, que vous pouvez

04:04.500 --> 04:06.230
utiliser sur les fonctions pour

04:06.230 --> 04:08.553
des cas comme celui-ci ici.
