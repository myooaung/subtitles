WEBVTT

00:02.210 --> 00:04.920
Erzähler: Eine besondere Art der Typensicherung, könnte

00:04.920 --> 00:05.753
man sagen, oder etwas,

00:05.753 --> 00:07.940
das Ihnen bei der Typensicherung hilft, ist die

00:07.940 --> 00:10.000
diskriminierte Vereinigung.

00:10.000 --> 00:11.300
Und was ist das?

00:11.300 --> 00:13.310
Es handelt sich um ein Muster, das Sie bei

00:13.310 --> 00:15.030
der Arbeit mit Union-Typen verwenden

00:15.030 --> 00:18.900
können und das die Implementierung von Type Guards erleichtert.

00:18.900 --> 00:22.000
Sie ist verfügbar, wenn Sie mit Objekttypen arbeiten.

00:22.000 --> 00:24.580
Ich werde Ihnen zeigen, wie es funktioniert.

00:24.580 --> 00:26.850
Sagen wir, wir haben ein paar Schnittstellen, und das könnten

00:26.850 --> 00:28.450
auch Klassen sein, aber hier werde ich mich

00:28.450 --> 00:29.950
für Schnittstellen entscheiden, um zu

00:29.950 --> 00:32.193
zeigen, dass es auch mit diesen funktioniert.

00:33.170 --> 00:34.803
Und da habe ich meinen Vogel,

00:36.480 --> 00:38.830
der eine Fluggeschwindigkeit hat, die vom

00:38.830 --> 00:40.973
Typ Zahl sein sollte, sagen wir mal.

00:42.660 --> 00:45.890
Und ich habe auch mein Pferd, das eine Bodengeschwindigkeit

00:45.890 --> 00:51.913
oder eine Laufgeschwindigkeit hat, die vom Typ Nummer sein sollte.

00:53.130 --> 00:55.430
Wir haben hier also diese beiden Schnittstellen.

00:55.430 --> 00:58.800
Jetzt erstellen wir unseren eigenen Vereinigungstyp,

00:58.800 --> 00:59.633
Tier, der entweder

01:00.750 --> 01:03.370
ein Vogel oder ein Pferd ist.

01:03.370 --> 01:05.743
Und genau wie zuvor könnten wir eine Funktion,

01:06.740 --> 01:08.480
move animal, haben, die ein Tier

01:09.800 --> 01:13.040
als Eingabe nimmt, das vom Typ animal ist, also unseren Union-Typ

01:13.040 --> 01:14.800
verwendet.

01:14.800 --> 01:19.800
Und jetzt möchte ich dort sagen, dass ich mich mit Geschwindigkeit bewege, und jetzt muss ich

01:19.990 --> 01:21.050
natürlich entweder

01:21.050 --> 01:25.180
auf die Fluggeschwindigkeit oder die Laufgeschwindigkeit zugreifen.

01:25.180 --> 01:27.730
Natürlich hätten wir es auch einfach Geschwindigkeit nennen können.

01:27.730 --> 01:30.840
Dies ist jedoch nur ein vereinfachtes Beispiel für einen realen

01:30.840 --> 01:33.900
Anwendungsfall, in dem Sie einige Schnittstellen oder Objekte

01:33.900 --> 01:37.390
im Allgemeinen haben, die zwar miteinander verwandt sind, aber unterschiedliche

01:37.390 --> 01:40.500
Eigenschaften oder Methoden haben.

01:40.500 --> 01:42.050
Hier geht es also um die Eigenschaft der Geschwindigkeit,

01:42.050 --> 01:43.900
die tatsächlich anders ist.

01:43.900 --> 01:46.780
Es kann hier also nicht auf die Fluggeschwindigkeit zugreifen, denn natürlich

01:46.780 --> 01:49.240
haben nicht alle Tiere eine Fluggeschwindigkeit.

01:49.240 --> 01:51.210
Jetzt können wir das tun, was wir vorher gelernt haben.

01:51.210 --> 01:56.063
Wir können hier überprüfen, ob die Fluggeschwindigkeit in Tier ist.

01:58.240 --> 02:01.063
Und wenn das der Fall ist, können wir diesen Code ausführen.

02:01.960 --> 02:04.470
Das ist ein möglicher Ansatz, aber je mehr

02:04.470 --> 02:07.430
potenzielle Tiere wir dort finden, desto mehr Dinge

02:07.430 --> 02:09.233
müssen wir überprüfen.

02:10.880 --> 02:14.100
Wir können uns auch hier in dieser Zeichenfolge vertippen.

02:14.100 --> 02:15.810
Wir können zum Beispiel ein E vergessen

02:15.810 --> 02:18.460
und uns fragen, warum das nicht funktioniert.

02:18.460 --> 02:20.410
Wir können hier keine Instanz von verwenden,

02:20.410 --> 02:22.570
weil ich mit Schnittstellen breche.

02:22.570 --> 02:27.490
Wie ich bereits erklärt habe, wird animal instance of bird nicht funktionieren, weil

02:27.490 --> 02:29.680
data eine Schnittstelle ist, die nicht

02:29.680 --> 02:31.840
in JavaScript kompiliert wird.

02:31.840 --> 02:33.970
Zur Laufzeit ist diese Funktion also nicht

02:33.970 --> 02:36.210
als Konstruktorfunktion verfügbar.

02:36.210 --> 02:37.690
Das funktioniert also nicht.

02:37.690 --> 02:40.380
Nun können wir hier eine diskriminierte Vereinigung bilden,

02:40.380 --> 02:42.460
indem wir jede Schnittstelle angeben.

02:42.460 --> 02:45.380
Also jedes Objekt, das Teil der Union sein sollte,

02:45.380 --> 02:47.130
und zusätzliches Eigentum.

02:47.130 --> 02:48.640
Sie können jeden beliebigen Namen verwenden.

02:48.640 --> 02:51.490
Oft verwendet man hier Art oder Typ.

02:51.490 --> 02:55.090
Ich werde mich für den Typ entscheiden und diesem Vogel einen Namen geben.

02:55.090 --> 02:57.480
Wichtig ist, dass wir es hier mit einer Schnittstelle zu tun haben.

02:57.480 --> 03:02.480
Dies ist also eigentlich kein Wert für die Typeigenschaft.

03:02.650 --> 03:05.410
Dies ist stattdessen ein literaler Typ, wie Sie gelernt haben,

03:05.410 --> 03:09.110
wobei type eine Zeichenkette enthalten muss, die ein Vogel sein muss.

03:09.110 --> 03:10.880
Es handelt sich also um eine Typzuweisung,

03:10.880 --> 03:15.000
bei der wir den Wert, der in type gespeichert werden kann, auf genau diesen

03:15.000 --> 03:17.590
String-Wert eingrenzen.

03:17.590 --> 03:19.810
Und dann machen Sie dasselbe für Pferd,

03:19.810 --> 03:22.283
nur mit Pferd als wörtlichem Typ.

03:23.400 --> 03:25.060
Hier in unserer Funktion

03:25.060 --> 03:27.550
können wir eine switch-Anweisung

03:27.550 --> 03:29.840
verwenden und auf den Typ animal

03:29.840 --> 03:32.280
dot umschalten.

03:32.280 --> 03:34.080
Jedes Tier hat eine Typeigenschaft,

03:34.080 --> 03:36.330
weil wir sie allen Schnittstellen hinzugefügt

03:36.330 --> 03:38.350
haben, aus denen unser Tier besteht.

03:38.350 --> 03:40.730
Und dann können wir hier ein paar Fälle haben,

03:40.730 --> 03:42.330
in denen wir sogar Autovervollständigung

03:42.330 --> 03:44.990
bekommen, weil TypeScript und unsere IDE verstehen,

03:44.990 --> 03:49.040
dass type nur entweder bird oder horse sein kann.

03:49.040 --> 03:51.050
Und wenn es sich um einen Vogel handelt,

03:51.050 --> 03:55.003
könnten wir eine interne variable Geschwindigkeit einstellen,

03:55.900 --> 03:58.860
z. B. die Fluggeschwindigkeit eines Tieres, und

03:59.880 --> 04:02.250
danach eine Pause einlegen.

04:02.250 --> 04:05.183
Andernfalls, wenn es sich um ein Pferd handelt,

04:06.830 --> 04:11.753
setzen wir die Geschwindigkeit gleich der Laufgeschwindigkeit des Tieres.

04:14.150 --> 04:17.490
Und danach können wir uns mit der Konsole mit Geschwindigkeit

04:17.490 --> 04:20.843
plus Geschwindigkeit bewegen.

04:22.490 --> 04:26.540
Wenn ich jetzt, move animal mit einem Tier aufrufe, das ich hier on

04:26.540 --> 04:30.300
the fly erstelle, wo ich den Typ auf Vogel setze und ich nur Vogel

04:30.300 --> 04:32.810
oder Pferd zulasse, dann muss ich meine Fluggeschwindigkeit

04:32.810 --> 04:34.930
einstellen und nebenbei bemerkt,

04:36.140 --> 04:39.210
TypeScript erkennt sogar, dass ein Konzept Laufgeschwindigkeit

04:39.210 --> 04:44.220
hier versucht, das zu tun und setzt dies auf 10, es beschwert sich, dass dies für den

04:44.220 --> 04:48.980
Typ Vogel nicht verfügbar ist.

04:48.980 --> 04:51.360
Wenn ich es auf Fluggeschwindigkeit einstelle,

04:51.360 --> 04:55.120
funktioniert es aber, wenn wir das speichern, gibt es das korrekt

04:55.120 --> 04:57.700
aus und kompiliert auch ohne Fehler.

04:57.700 --> 04:59.530
Dies ist nun eine diskriminierte

04:59.530 --> 05:04.060
Vereinigung, weil wir eine gemeinsame Eigenschaft in jedem Objekt haben, das

05:04.060 --> 05:08.040
unsere Vereinigung bildet, die dieses Objekt beschreibt, so dass wir

05:08.040 --> 05:11.490
diese Eigenschaft, die dieses Objekt beschreibt, in unserer

05:11.490 --> 05:16.490
Prüfung verwenden können, um 100%ige Typsicherheit zu haben und zu verstehen, welche

05:16.770 --> 05:19.870
Eigenschaften für ein solches Objekt verfügbar sind

05:19.870 --> 05:21.930
und welche nicht.

05:21.930 --> 05:24.500
Es handelt sich also um ein neues nützliches Muster, das

05:24.500 --> 05:28.060
Sie bei der Arbeit mit Objekten und mit Union-Typen verwenden können.

05:28.060 --> 05:30.340
Und es funktioniert sogar mit Schnittstellen,

05:30.340 --> 05:33.630
weil diese Schnittstelle jedes Objekt, das Sie auf der Grundlage dieser

05:33.630 --> 05:37.050
Schnittstelle erstellen, dazu zwingt, diesen Typ zu haben.

05:37.050 --> 05:39.400
Anstatt also das Vorhandensein einer bestimmten

05:39.400 --> 05:41.200
Eigenschaft zu prüfen oder eine Instanz

05:41.200 --> 05:43.660
von zu verwenden, verwenden wir eine Eigenschaft,

05:43.660 --> 05:46.310
von der wir wissen, dass sie existiert, um zu prüfen, mit

05:46.310 --> 05:49.020
welcher Art von Objekten wir arbeiten.

05:49.020 --> 05:51.930
Wir eliminieren auch die Gefahr von Tippfehlern, weil TypeScript

05:51.930 --> 05:54.730
versteht, dass die einzigen Fälle, die wir hier für den Tiertyp

05:54.730 --> 05:58.480
haben können, Vogel und Pferd sind, und daher gibt es uns diese Kunst der Vervollständigung,

05:58.480 --> 06:00.810
und wenn Sie einen Tippfehler einfügen würden,

06:00.810 --> 06:04.690
würden wir sofort einen Fehler erhalten.

06:04.690 --> 06:06.780
Dies ist also ein sehr nützliches Muster

06:06.780 --> 06:09.333
bei der Arbeit mit Objekten und Union-Typen.
