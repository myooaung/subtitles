WEBVTT

00:02.150 --> 00:04.320
الراوي: عندما يتعلق الأمر ببناء

00:04.320 --> 00:07.220
تطبيق React باستخدام Typescript ، فنحن

00:07.220 --> 00:10.800
بالطبع بحاجة إلى إعداد مشروع ، قادر على التعامل مع

00:10.800 --> 00:13.730
كود React الخاص بنا ، لذا فإن أشياء مثل JSX

00:13.730 --> 00:17.480
، على سبيل المثال ، والتي تُجمِّع تبقى وتحسن كود React

00:17.480 --> 00:21.500
الخاص بنا ، و والتي في نفس الوقت قادرة على فهم TypeScript

00:21.500 --> 00:25.320
وترجمة TypeScript إلى JavaScript.

00:25.320 --> 00:27.430
قد يكون إنشاء مثل هذا المشروع بمفردنا

00:27.430 --> 00:28.750
أمرًا صعبًا للغاية ،

00:28.750 --> 00:31.940
وبالتالي ، من الجيد أن Create React App ، وهي أداة

00:31.940 --> 00:34.080
يديرها فريق React ، والتي يمكننا

00:34.080 --> 00:36.420
استخدامها لإنشاء مشاريع React ، تدعم

00:36.420 --> 00:39.110
TypeScript خارج الصندوق.

00:39.110 --> 00:42.110
يمكنك ببساطة Google من أجل Create React App TypeScript

00:42.110 --> 00:44.590
، ويجب أن تجد هذا الإدخال في وثائق Create

00:44.590 --> 00:47.000
React App الرسمية.

00:47.000 --> 00:49.140
ستتعلم هناك كيف يمكنك إضافة

00:49.140 --> 00:51.540
TypeScript إلى مشروع موجود ، هنا

00:51.540 --> 00:54.850
، هذه الخطوات ، أو كيف يمكنك إنشاء مشروع جديد

00:54.850 --> 00:57.290
باستخدام Create React App و TypeScript

00:57.290 --> 01:00.400
، وهنا ترى أمرًا يمكنك نسخه ، لإنشاء مشروع

01:00.400 --> 01:05.680
React جديد ، والذي يدعم أيضًا TypeScript.

01:05.680 --> 01:07.020
الآن ، سأستخدم هذا

01:07.020 --> 01:11.110
هنا ، وها أنا موجود بالفعل في مجلد أريد استخدامه.

01:11.110 --> 01:13.210
هذا هو ببساطة مجلد المشروع الذي أريد

01:13.210 --> 01:14.790
استخدامه لهذا المشروع.

01:14.790 --> 01:16.900
وبعد ذلك سنلصق هذا الأمر.

01:16.900 --> 01:17.740
وفي هذه الحالة

01:17.740 --> 01:20.970
، لأنني أريد استخدام المجلد الذي أنا موجود فيه بالفعل

01:20.970 --> 01:22.710
، هنا أيضًا في الجهاز الطرفي

01:22.710 --> 01:25.190
الخاص بي ، سأستبدل اسم المشروع بنقطة ، بحيث

01:25.190 --> 01:27.590
لا يقوم بإنشاء مجلد فرعي جديد وإنشاء المشروع

01:27.590 --> 01:29.550
في ذلك ، ولكنه يستخدم هذا المجلد

01:29.550 --> 01:31.730
بدلاً من ذلك.

01:31.730 --> 01:33.720
هذا بالطبع اختياري.

01:33.720 --> 01:35.850
أريد أيضًا أن أقول إنني لاحظت

01:35.850 --> 01:38.070
أن هذا الأمر لا يعمل دائمًا.

01:38.070 --> 01:41.390
في بعض الأحيان يقوم بإنشاء مشروع JavaScript عادي.

01:41.390 --> 01:42.590
لإصلاح ذلك ، يمكنك

01:42.590 --> 01:46.343
تثبيت تطبيق Create React عالميًا على جهازك.

01:47.340 --> 01:49.140
شيء يمكنك القيام به ببساطة

01:49.140 --> 01:54.140
عن طريق تشغيل npm install -g create-reaction-app ، على Mac و Linux قد تحتاج

01:54.780 --> 01:56.560
إلى إضافة sudo أمام هذا.

01:56.560 --> 01:59.360
وبتثبيت هذا على جهازك ، يمكنك بالفعل

01:59.360 --> 02:03.010
تشغيل هذا الأمر هنا ، ولكن بدون npx ، تمامًا مثل

02:03.010 --> 02:05.920
هذا ، ومن ثم يجب أن يعمل بالتأكيد.

02:05.920 --> 02:07.270
هذا ما سأفعله هنا ،

02:07.270 --> 02:09.320
ولكن عادةً ، يجب أن يعمل أيضًا

02:09.320 --> 02:12.250
دون تثبيته باستخدام أداة npx فقط ، والتي

02:12.250 --> 02:15.520
تعد جزءًا من أداة npm التي قمنا بتثبيتها بالفعل

02:15.520 --> 02:18.840
مع Node. js في وقت سابق من الدورة.

02:18.840 --> 02:23.250
لذلك في الوقت الحالي ، يتم وضع مشروع جديد في هذا المجلد هنا.

02:23.250 --> 02:27.460
وفي هذا المشروع ، سيتم إنشاء تطبيق React حيث يمكننا جميعًا كتابة كل

02:27.460 --> 02:31.070
التعليمات البرمجية الخاصة بنا باستخدام TypeScript.

02:31.070 --> 02:32.460
لذلك دعونا ننتظر حتى ينتهي هذا.

02:32.460 --> 02:34.610
ودعونا نرى ما يعطينا هذا.

02:34.610 --> 02:36.010
وانتهت.

02:36.010 --> 02:37.930
لذلك دعونا نلقي نظرة على ما حصلنا عليه.

02:37.930 --> 02:41.000
لدينا مجلد ، والذي قد تتعرف عليه في الأساس هو

02:41.000 --> 02:43.970
نفس الهيكل الذي لديك عند إنشاء تطبيق React

02:43.970 --> 02:45.500
بدون TypeScript.

02:45.500 --> 02:48.790
لكن يمكننا أن نرى بالفعل tsconfig. json.

02:48.790 --> 02:51.020
بالمناسبة ، يمكنك أيضًا تعديل هذا الملف

02:51.020 --> 02:52.940
وضبطه وفقًا لاحتياجاتك.

02:52.940 --> 02:55.250
لقد تعلمت كيفية تعديل هذا التكوين في وقت سابق

02:55.250 --> 02:57.120
من الدورة التدريبية بعد كل شيء.

02:57.120 --> 02:58.460
يجب أن يكون التكوين الافتراضي

02:58.460 --> 03:01.160
مناسبًا لمعظم حالات الاستخدام.

03:01.160 --> 03:02.950
الآن إذا استكشفنا مجلد src

03:02.950 --> 03:05.230
، حيث سنكتب كود المصدر الخاص بنا ، فسنجد

03:05.230 --> 03:08.550
أيضًا مجموعة من. tsx هناك.

03:08.550 --> 03:11.900
الآن حتى الآن في الدورة ، لم نعمل معها. tsx ، ولكن فقط مع

03:11.900 --> 03:13.787
ملفات. ts. تم اختيار tsx

03:13.787 --> 03:17.800
ببساطة هنا ، لأن هذه هي الملفات التي لا يمكنك فيها كتابة

03:17.800 --> 03:20.530
كود TypeScript فقط ، ولكن كل كود JSX ،

03:20.530 --> 03:22.000
وهو عبارة عن React خاص

03:22.000 --> 03:25.570
، بناء جملة JavaScript ، حيث تكتب ترميز HTML داخل

03:25.570 --> 03:29.930
JavaScript ، أو في هذه الحالة ، TypeScript الشفرة.

03:29.930 --> 03:32.880
هذا ما حصلنا عليه هنا.

03:32.880 --> 03:34.920
الآن في هذه الملفات ، يمكننا بالفعل

03:34.920 --> 03:36.500
رؤية بعض بناء جملة TypeScript

03:36.500 --> 03:38.800
، على سبيل المثال ، هنا ، لدينا مهمة نوع ،

03:38.800 --> 03:41.480
سألقي نظرة فاحصة على هذا النوع لاحقًا ، لكن في

03:41.480 --> 03:43.880
الوقت الحالي ، يمكننا أن نرى على الفور أننا

03:43.880 --> 03:45.780
نستخدم TypeScript هنا .

03:45.780 --> 03:49.290
مع ذلك ، اسمحوا لي فقط بتنظيف بنية مجلد البداية قليلاً

03:49.290 --> 03:50.680
، ثم دعونا نبني تطبيق

03:50.680 --> 03:52.730
React بسيطًا جدًا معًا ، وأثناء

03:52.730 --> 03:56.150
قيامنا بذلك ، دعنا نستكشف كيف يمكننا استخدام TypeScript

03:56.150 --> 03:57.550
مع React.

03:57.550 --> 04:01.000
لذلك دعونا نركز أولاً على التنظيف

04:01.000 --> 04:02.950
هنا في التطبيق. tsx ، سأقوم بإزالة استيراد الشعار

04:02.950 --> 04:06.860
وإزالة كل المحتوى الموجود في div الخاص

04:06.860 --> 04:09.380
بي هنا ، والاحتفاظ فقط بهذا div لذلك.

04:09.380 --> 04:12.020
سأقوم أيضًا بإزالة التطبيق. استيراد css ، تخلص من

04:12.020 --> 04:15.530
التطبيق. css والتطبيق. اختبار. tsx بالإضافة إلى

04:15.530 --> 04:19.560
الشعار. svg وعامل الخدمة. ts ، فقم بإزالة

04:19.560 --> 04:23.470
كل تلك الملفات.

04:23.470 --> 04:25.500
في الفهرس. tsx ، سأقوم بإزالة استيراد عامل

04:25.500 --> 04:29.060
هذه الخدمة ، لأننا لن نعمل مع

04:29.060 --> 04:32.100
عمال الخدمة هنا ، ونزيل هذا الرمز في الأسفل ، وينتهي

04:32.100 --> 04:34.530
الأمر بهذا الإعداد ، وفي الفهرس. css سوف أقوم بمسح كل هذا ، وقم فقط

04:34.530 --> 04:38.870
بإعداد بعض أنماط HTML حيث أريد

04:38.870 --> 04:40.610
تعيين عائلة الخطوط من

04:40.610 --> 04:43.140
sans-serif ، ثم نمط الجسم حيث أريد

04:43.140 --> 04:45.860
التخلص من الهامش ، تمامًا مثل هذا

04:45.860 --> 04:48.820
، بسيط جدًا التصميم.

04:48.820 --> 04:50.763
وبهذا ، لدينا إعداد البداية

04:52.790 --> 04:54.540
الذي أريد العمل به.

04:54.540 --> 04:55.840
الآن مرة أخرى ، لقد ذكرت ذلك

04:55.840 --> 04:57.370
، ولكن إذا لم يخبرك كل هذا بأي شيء

04:57.370 --> 04:59.710
، إذا كان هذا هو بناء الجملة الذي لم تره من قبل ، فعليك

04:59.710 --> 05:02.200
بالتأكيد الغوص في بعض موارد React أولاً.

05:02.200 --> 05:05.610
ليس هذا ما سنركز عليه في هذه الوحدة ، فلن

05:05.610 --> 05:08.130
تتعلم React في هذه الوحدة.

05:08.130 --> 05:11.010
ولكن مع ذلك ، دعنا نحفظ جميع التغييرات ونستمر

05:11.010 --> 05:12.920
الآن ، ولنبدأ في كتابة بعض التعليمات

05:12.920 --> 05:15.680
البرمجية لـ React و Typhon ، ومعرفة كيفية

05:15.680 --> 05:17.980
عمل هذين الأمرين معًا.
