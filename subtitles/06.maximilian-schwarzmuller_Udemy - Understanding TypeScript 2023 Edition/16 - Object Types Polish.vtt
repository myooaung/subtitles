WEBVTT

00:02.280 --> 00:03.780
Instruktor: Zagłębmy się w

00:03.780 --> 00:06.450
podstawowe typy, które obsługuje TypeScript.

00:06.450 --> 00:09.800
Kolejnym typem, który jest interesujący jest typ obiektowy.

00:09.800 --> 00:13.100
Teraz znasz obiekty w JavaScript, wyglądają one tak.

00:13.100 --> 00:14.690
Masz nawiasy klamrowe, a następnie

00:14.690 --> 00:16.350
masz tam pary wartości kluczy i

00:16.350 --> 00:20.460
takie wartości byłyby również traktowane jako typy obiektów w TypeScript,

00:20.460 --> 00:22.250
więc każdy obiekt JavaScript jest

00:22.250 --> 00:23.620
typu object.

00:23.620 --> 00:28.410
Chociaż już powiem, że w TypeScript są bardziej specyficzne wersje obiektów,

00:28.410 --> 00:30.030
dzięki czemu można powiedzieć,

00:30.030 --> 00:32.514
że to nie jest byle jaki obiekt, to jest obiekt,

00:32.514 --> 00:35.108
który musi mieć te właściwości lub który musi

00:35.108 --> 00:39.490
być oparty na tej lub tej funkcji konstruktora.

00:39.490 --> 00:41.322
Ale dojdziemy do tego krok po kroku.

00:41.322 --> 00:45.110
Aby zanurkować w obiekty, najpierw zmienię nazwę app. ts tutaj, a ja zmienię

00:45.110 --> 00:49.770
nazwę na podstawy. ts tutaj.

00:49.770 --> 00:52.058
I dodać nową aplikację. ts, który następnie

00:52.058 --> 00:55.400
zastąpi starą aplikację. js po skompilowaniu pliku,

00:55.400 --> 00:58.600
gdzie możemy teraz zanurkować w obiekty.

00:58.600 --> 01:01.110
I zacznijmy od stworzenia podstawowego obiektu tutaj,

01:01.110 --> 01:03.902
powiedzmy, że osoba z kręconymi nawiasami klamrowymi tutaj.

01:03.902 --> 01:05.870
I nadajemy temu nazwę.

01:05.870 --> 01:08.230
Tutaj pójdę z Maksymilianem

01:08.230 --> 01:10.700
bo tak mam na imię i wiek 30 lat.

01:10.700 --> 01:14.930
Teraz oczywiście możemy pocieszać. log person here and if we

01:14.930 --> 01:18.375
do so, and we compile this unsurisingly,

01:18.375 --> 01:23.010
we should see that object being printed here in the

01:23.010 --> 01:24.536
console.

01:24.536 --> 01:27.284
Teraz, co możemy również zrobić w JavaScript,

01:27.284 --> 01:31.690
możemy spróbować uzyskać dostęp do, powiedzmy, pseudonimu, właściwości,

01:31.690 --> 01:33.970
która nie istnieje tutaj.

01:33.970 --> 01:37.320
Teraz natychmiast widzisz, że TypeScript nie jest zbyt szczęśliwy

01:37.320 --> 01:39.820
z tego powodu, a zatem moje IDE mówi mi.

01:39.820 --> 01:42.302
Mówi mi, że nick właściwości nie

01:42.302 --> 01:44.050
istnieje na tym typie.

01:44.050 --> 01:47.642
Więc jeśli zapiszemy to i spróbuję skompilować, rzeczywiście

01:47.642 --> 01:49.907
otrzymamy ten sam błąd na dole.

01:49.907 --> 01:52.210
Kompilator TypeScript nie lubi tego

01:52.210 --> 01:54.401
i mówi mi, że nie mamy właściwości

01:54.401 --> 01:56.430
nick na tym obiekcie.

01:56.430 --> 01:59.813
Dowiaduje się, że nie mamy tej właściwości nick, bo jak

01:59.813 --> 02:02.936
najedziemy na personę, którą ona wywnioskowała,

02:02.936 --> 02:05.710
to widzimy, że po personie jest dwukropek, a więc

02:05.710 --> 02:07.970
po nazwie zmiennej lub stałej.

02:07.970 --> 02:11.030
Wywnioskowało, że jest to rodzaj danych, które są tam

02:11.030 --> 02:12.110
przechowywane.

02:12.110 --> 02:14.181
Teraz to nie jest tylko obiekt, jak można powiedzieć.

02:14.181 --> 02:16.349
To jest konkretny obiekt.

02:16.349 --> 02:18.920
To obiekt z nazwą klucz, gdzie potem typ,

02:18.920 --> 02:21.430
z kolei, musi być ciągiem znaków.

02:21.430 --> 02:24.700
I klucz wieku, gdzie typem musi być liczba.

02:24.700 --> 02:27.116
I faktycznie, może to być tutaj mylące.

02:27.116 --> 02:31.100
To, tutaj, oczywiście wygląda jak obiekt JavaScript.

02:31.100 --> 02:33.980
Nawiasy klamrowe, pary wartości kluczy.

02:33.980 --> 02:36.020
Cóż, pierwszą ważną rzeczą do zobaczenia tutaj

02:36.020 --> 02:38.520
jest to, że mamy tutaj średnik po każdej linii.

02:38.520 --> 02:40.580
Nie mamy tego w obiekcie JavaScript.

02:40.580 --> 02:41.750
Mamy tu przecinek.

02:41.750 --> 02:44.160
I rzeczywiście, nie jest to tutaj obiekt JavaScript,

02:44.160 --> 02:45.940
który jest gdzieś tworzony.

02:45.940 --> 02:50.600
Jest to typ obiektu wnioskowany przez TypeScript, a typy obiektów

02:50.600 --> 02:53.914
pisze się prawie jak obiekty, ale oczywiście

02:53.914 --> 02:57.106
nie mamy tam par wartości klucza, tylko pary

02:57.106 --> 02:59.239
typu klucza.

02:59.239 --> 03:02.840
Typy obiektów są tam, aby opisać, cóż, typ

03:02.840 --> 03:06.064
obiektu, który jest gdzieś używany.

03:06.064 --> 03:07.653
Moglibyśmy być bardziej ogólnikowi.

03:07.653 --> 03:10.420
Mogłem jawnie przypisać

03:10.420 --> 03:13.640
typ tutaj do stałej obiektu.

03:13.640 --> 03:16.100
Obiekt jest jednym z wbudowanych typów,

03:16.100 --> 03:17.460
podobnie jak liczba i

03:17.460 --> 03:21.030
ciąg znaków, a teraz, jeśli najeżdżam na to, widzimy osoby

03:21.030 --> 03:24.000
typu object i teraz TypeScript naprawdę dba tylko

03:24.000 --> 03:26.430
o to, że jest to typ obiektu.

03:26.430 --> 03:28.423
Teraz, nadal, jest kompilujemy to dostaniemy

03:28.423 --> 03:32.808
ten błąd chociaż, ponieważ TypeScript nadal analizuje nasz kod i widzi, że próbujemy

03:32.808 --> 03:36.666
uzyskać dostęp do czegoś, co nie istnieje tam, ale ważne jest, aby zrozumieć,

03:36.666 --> 03:39.770
że wszystko zaczyna się od tego najbardziej ogólnego typu

03:39.770 --> 03:42.140
obiektu.

03:42.140 --> 03:44.660
Ale często chcesz być bardziej konkretny niż to.

03:44.660 --> 03:47.623
Nie chcesz tylko pracować z tym generycznym typem obiektu.

03:47.623 --> 03:50.284
Naprawdę chcesz uzyskać pełne wsparcie.

03:50.284 --> 03:53.550
Na przykład, w tej chwili, jeśli dodaję kropkę tutaj i mam spojrzenie

03:53.550 --> 03:55.570
na moje autouzupełnianie, nie otrzymuję

03:55.570 --> 03:58.080
tam żadnej pomocy przez moje IDE.

03:58.080 --> 04:00.303
Powodem tego jest to, że wszystko

04:00.303 --> 04:04.230
co mówimy IDE to to, że mamy tutaj wartość, w osobie, która

04:04.230 --> 04:05.860
jest typu object.

04:05.860 --> 04:08.300
Rzeczywiście teraz faktycznie otrzymujemy również błąd,

04:08.300 --> 04:10.210
jeśli próbuję uzyskać dostęp do nazwy.

04:10.210 --> 04:12.270
Imię istnieje tutaj, prawda?

04:12.270 --> 04:14.120
Ale to, co mówimy TypeScriptowi tutaj,

04:14.120 --> 04:16.601
to że po prostu mamy obiekt, w którym nie przekazujemy

04:16.601 --> 04:18.889
żadnej z naszych informacji do TypeScriptu.

04:18.889 --> 04:21.739
Więc właściwie TypeScript nie obsługuje żadnego

04:21.739 --> 04:24.750
typu właściwości, ponieważ nie mówimy mu nic

04:24.750 --> 04:26.210
o obiekcie.

04:26.210 --> 04:28.050
Powinniśmy więc być bardziej konkretni.

04:28.050 --> 04:32.000
A my jesteśmy bardziej konkretni, ustalając konkretny typ obiektu.

04:32.000 --> 04:34.795
Rzecz, którą TypeScript również wywnioskował automatycznie.

04:34.795 --> 04:38.548
Robimy to poprzez dodanie nawiasów klamrowych

04:38.548 --> 04:43.370
tutaj po dwukropku, po naszej nazwie const lub zmiennej.

04:43.370 --> 04:46.213
Więc to tutaj nie tworzy nowego obiektu JavaScript.

04:46.213 --> 04:48.460
To faktycznie zostanie usunięte z skompilowanego

04:48.460 --> 04:50.310
kodu JavaScript.

04:50.310 --> 04:52.643
Zamiast tego jest to tylko notacja TypeScript

04:52.643 --> 04:55.855
wyspecjalizowanego typu obiektu, że tak powiem.

04:55.855 --> 04:59.422
Czyli typu obiektu, w którym podajemy pewne informacje

04:59.422 --> 05:01.434
o strukturze obiektu.

05:01.434 --> 05:04.520
Teraz, przypisując tylko pustą parę nawiasów klamrowych jako

05:04.520 --> 05:07.440
typ, zasadniczo robimy to samo, co w przypadku obiektu.

05:07.440 --> 05:09.765
Mówimy TypeScriptowi, że to jest jakiś obiekt.

05:09.765 --> 05:12.740
Teraz jednak możemy być bardziej konkretni.

05:12.740 --> 05:16.550
Możemy tutaj dodać wpisy wartości klucza, jednak

05:16.550 --> 05:19.694
nie wartości klucza, a typ klucza.

05:19.694 --> 05:22.800
Więc tutaj moglibyśmy powiedzieć, że obiekt, który

05:22.800 --> 05:25.091
powinien być przechowywany w osobie

05:25.091 --> 05:28.197
powinien mieć właściwość name i wartość tej właściwości

05:28.197 --> 05:31.140
name powinna być typu string.

05:31.140 --> 05:33.795
Tutaj więc opisujemy typ wartości, która ostatecznie

05:33.795 --> 05:36.440
będzie przechowywana w nazwie.

05:36.440 --> 05:39.320
Teraz, przy okazji, widzisz, że dostaję tutaj błąd.

05:39.320 --> 05:41.090
Ponieważ to, co mówię teraz TypeScriptowi,

05:41.090 --> 05:43.489
to to, że moja osoba powinna mieć obiekt z dokładnie

05:43.489 --> 05:45.900
jedną parą wartości klucza, gdzie kluczem jest

05:45.900 --> 05:48.626
nazwa, a wartością tego klucza jest ciąg, ale nie przypisaliśmy

05:48.626 --> 05:52.730
obiektu z dwoma parami wartości klucza.

05:52.730 --> 05:55.020
Nazwa, która przechowuje ciąg znaków, to jest w porządku,

05:55.020 --> 05:58.500
ale wiek, który przechowuje liczbę, a to nie byłoby w porządku.

05:58.500 --> 06:01.140
Więc tutaj musimy to dostosować, dodając średnik, a następnie

06:01.140 --> 06:03.520
dodając kolejną parę wartości klucza tutaj, gdzie

06:03.520 --> 06:06.300
mówimy, że wiek powinien być typu liczba.

06:06.300 --> 06:09.670
Więc nie 30 tutaj, że faktycznie byłoby obsługiwane w TypeScript,

06:09.670 --> 06:12.673
że ograniczamy go do jednego konkretnego numeru, ale wtedy

06:12.673 --> 06:15.600
napotkamy problemy, gdy tylko to zmienimy.

06:15.600 --> 06:19.060
Zamiast tego, tutaj chcę tylko powiedzieć, że wiek powinien być jakąś liczbą.

06:19.060 --> 06:22.360
A teraz w zasadzie jawnie przypisujemy ten sam TypeScript

06:22.360 --> 06:24.870
inferowany wcześniej.

06:24.870 --> 06:26.900
Jak się dowiedziałeś, to nie jest dobra praktyka,

06:26.900 --> 06:28.570
ale aby zrozumieć typy obiektów, chciałem

06:28.570 --> 06:29.940
to zrobić tutaj.

06:29.940 --> 06:32.315
Nadal jest to coś, co można zrobić.

06:32.315 --> 06:37.010
Lepiej pozwolić TypeScriptowi wywnioskować to tak,

06:37.010 --> 06:40.440
jak zrobiliśmy to wcześniej, np.

06:40.440 --> 06:42.351
Teraz, żeby pokazać coś ciekawego,

06:42.351 --> 06:45.450
jeśli przełączę się z powrotem do tych nieoptymalnych

06:45.450 --> 06:47.970
kodów, gdzie jawnie przypisujemy typ TypeScript

06:47.970 --> 06:49.920
byłby w stanie wywnioskować,

06:49.920 --> 06:54.920
jeśli skompilujemy ten kod, oczywiście działa.

06:55.180 --> 06:56.900
Możemy uzyskać dostęp do właściwości name, ale jeśli

06:56.900 --> 06:59.077
następnie zajrzymy do app. js widzimy, że to przypisanie

06:59.077 --> 07:01.220
typu jest tutaj usunięte.

07:01.220 --> 07:03.417
I to, oczywiście, powinno być czymś oczekiwanym.

07:03.417 --> 07:06.290
Jak wspomniałem, typy i przypisania typów nie

07:06.290 --> 07:08.120
są częścią JavaScript.

07:08.120 --> 07:09.460
Są one oparte wyłącznie na TypeScript.

07:09.460 --> 07:10.800
Chciałem tylko pokazać to ponownie,

07:10.800 --> 07:12.840
aby było naprawdę jasne, że ta składnia tutaj nie

07:12.840 --> 07:15.080
tworzy jakiegoś obiektu JavaScript, który jest gdzieś

07:15.080 --> 07:16.485
w naszym kodzie.

07:16.485 --> 07:21.263
Jest to po prostu reprezentacja typu obiektu przez TypeScript, która

07:21.263 --> 07:24.570
pomaga TypeScriptowi zrozumieć obiekty, z którymi

07:24.570 --> 07:25.900
pracujesz.

07:25.900 --> 07:29.950
Lepsza składnia, oczywiście, to ta składnia, jak się dowiedziałeś.
