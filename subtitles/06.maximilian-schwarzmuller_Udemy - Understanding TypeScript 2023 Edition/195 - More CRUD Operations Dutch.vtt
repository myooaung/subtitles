WEBVTT

00:02.150 --> 00:03.930
Instructeur: Dus we hebben ons eerste POST verzoek

00:03.930 --> 00:06.120
toegevoegd, we zijn in staat een TODO aan te maken.

00:06.120 --> 00:07.250
Nu hebben we meer routes.

00:07.250 --> 00:10.170
We hebben ook een route om alle TODOS die we gemaakt hebben te bedienen.

00:10.170 --> 00:11.750
Let wel, uw TODOS wordt gereset telkens

00:11.750 --> 00:14.160
wanneer u uw code wijzigt en opslaat, want dan wordt

00:14.160 --> 00:16.630
uw server opnieuw opgestart en gaat alles wat in het

00:16.630 --> 00:18.920
geheugen was opgeslagen verloren, en wij beheren

00:18.920 --> 00:21.330
onze TODOS alleen in het geheugen.

00:21.330 --> 00:23.560
Dat is gewoon iets wat we hier hebben in de dummy

00:23.560 --> 00:24.930
app, in een echte app zou je dit

00:24.930 --> 00:28.200
natuurlijk opslaan in een echte database, het daar vandaan halen enzovoort

00:28.200 --> 00:30.280
en daarom zou het overleven.

00:30.280 --> 00:35.060
Toch kunnen we hier een nieuwe functie maken, getTodos en dit wordt

00:35.060 --> 00:38.030
een RequestHandler, zodat je de types van

00:38.030 --> 00:39.740
alle parameters niet afzonderlijk

00:39.740 --> 00:42.330
hoeft in te stellen.

00:42.330 --> 00:46.120
En daarbinnen wil ik gewoon een antwoord teruggeven waar

00:46.120 --> 00:49.560
ik wat JSON gegevens teruggeef waar ik mijn todo's

00:49.560 --> 00:52.420
heb en daar wil ik gewoon mijn TODO's array

00:52.420 --> 00:54.330
bereiken en dat terugsturen

00:54.330 --> 00:56.530
naar de client, en dat kan al.

00:56.530 --> 00:57.810
Natuurlijk kun je dit aanpassen,

00:57.810 --> 00:59.640
misschien wil je een andere logica,

00:59.640 --> 01:03.120
misschien wil je de TODOS eerst sorteren of iets dergelijks, maar

01:03.120 --> 01:06.690
dit is in zijn eenvoudigste vorm al alles wat we hier nodig hebben, het

01:06.690 --> 01:10.530
geeft onze TODOS terug, dus een heel eenvoudige functie.

01:10.530 --> 01:13.240
In de TODOS-routes hoeven we dit nu alleen nog maar te verbinden.

01:13.240 --> 01:17.680
Dus laten we getTodos ook importeren uit onze controller

01:17.680 --> 01:20.640
en het hier verbinden met deze route.

01:20.640 --> 01:23.430
En daarmee, als we dit nu opslaan, kunnen

01:23.430 --> 01:25.250
we het al in actie zien.

01:25.250 --> 01:29.860
Als we teruggaan en we maken een nieuw verzoek aan, een GET

01:29.860 --> 01:34.860
verzoek, naar http://localhost:3000/todos/ en we sturen

01:39.400 --> 01:41.410
dit, dan krijgen we een lege

01:41.410 --> 01:44.400
array terug, waarom is dat?

01:44.400 --> 01:46.750
Wel, ik zei dat de TODO's zouden worden gewist telkens

01:46.750 --> 01:48.010
als we de code veranderden en

01:48.010 --> 01:49.750
de server dus opnieuw opstartte, dus moeten

01:49.750 --> 01:51.470
we nu een nieuwe TODO aanmaken zonder

01:51.470 --> 01:54.110
de server tussendoor opnieuw op te starten.

01:54.110 --> 01:57.360
En als we die TODO hebben aangemaakt en we krijgen

01:57.360 --> 02:01.770
nu onze TODOS, dan zien we die aangemaakte TODO met het ID, serie

02:01.770 --> 02:04.380
9811 enzovoort, ook hier.

02:04.380 --> 02:05.960
Dus dat werkt al.

02:05.960 --> 02:08.980
Nu we toch bezig zijn, laten we ook werken aan patch en delete

02:08.980 --> 02:10.590
en voel je natuurlijk vrij om daar

02:10.590 --> 02:12.680
zelf met wat logica te komen.

02:12.680 --> 02:14.970
Uiteindelijk heb je nu alle bouwstenen die je

02:14.970 --> 02:16.130
daarvoor nodig hebt.

02:16.130 --> 02:18.480
Natuurlijk doen we het nu ook samen.

02:19.390 --> 02:21.570
Dus hier op het patch verzoek, laten

02:21.570 --> 02:24.350
we een nieuwe controller functie toevoegen.

02:24.350 --> 02:29.350
export const updateTodo, die van het type RequestHandler is en een

02:30.660 --> 02:34.680
functie in dit formaat moet bevatten die we al kennen.

02:34.680 --> 02:37.310
En daarin is het doel gegevens over de nieuwe

02:37.310 --> 02:40.630
TODO uit het inkomende verzoek te halen, en dan de

02:40.630 --> 02:44.140
TODO bij te werken met die nieuwe gegevens.

02:44.140 --> 02:47.240
Let wel, als onderdeel van onze route hier, hebben

02:47.240 --> 02:48.900
we een dynamisch segment.

02:48.900 --> 02:51.140
We hebben dit id-segment.

02:51.140 --> 02:54.610
Dus dat is iets wat we uit de URL kunnen halen,

02:54.610 --> 02:58.750
een concrete waarde voor dit dynamische segment.

02:58.750 --> 03:02.147
Dus hier op ons inkomend verzoek, kun je de todoId

03:03.172 --> 03:07.987
krijgen, van onze verzoek params. id,. id, want dat is de naam die ik hier gekozen heb.

03:07.987 --> 03:11.660
Als je hier een andere naam hebt gekozen, moet je daar een andere

03:11.660 --> 03:13.060
naam gebruiken.

03:13.060 --> 03:15.810
Nu, we krijgen hier geen soorten steun, toch?

03:15.810 --> 03:18.410
Params is van het type any.

03:18.410 --> 03:20.450
Omdat types deze String kunnen

03:20.450 --> 03:23.400
ontleden en begrijpen wat er in staat.

03:23.400 --> 03:25.460
Dus om betere types van ondersteuning

03:25.460 --> 03:28.920
te krijgen, kunnen we eigenlijk gebruiken dat de RequestHandler

03:28.920 --> 03:32.880
hier een generiek type is en we kunnen haakjes toevoegen en TypeScript

03:32.880 --> 03:35.880
vertellen welke parameters er zullen zijn.

03:35.880 --> 03:37.800
We stellen dit gewoon in op een object

03:37.800 --> 03:39.300
en daar hebben we nu een key value

03:39.300 --> 03:42.180
map van al onze ouders die we in de URL hebben.

03:42.180 --> 03:43.830
Dus bijvoorbeeld, dat we een ID parameter

03:43.830 --> 03:46.730
hebben, die uiteindelijk een String bevat.

03:46.730 --> 03:48.610
Dat kunnen we hier toevoegen en nu zul je

03:48.610 --> 03:50.230
zien dat we auto completion krijgen

03:50.230 --> 03:52.560
en TypeScript weet dat dit een String zal zijn.

03:52.560 --> 03:55.520
Dus dat is beter, dit generieke type gebruiken.

03:55.520 --> 03:58.640
Nu we de ID hebben, hebben we ook iets nodig uit

03:58.640 --> 04:01.050
de request body, om precies te zijn de

04:01.050 --> 04:03.560
nieuwe tekst uit de request body.

04:03.560 --> 04:08.130
Dus de updatedText kan worden opgehaald uit de request body en laten we

04:08.130 --> 04:11.700
ook hier weer typecasting gebruiken, om duidelijk te maken

04:11.700 --> 04:14.100
dat er een text property in de body komt

04:14.100 --> 04:16.910
en dat deze van het type String is.

04:16.910 --> 04:19.750
En laten we daarna de tekst ophalen.

04:19.750 --> 04:22.373
En nu kunnen we de TODO bijwerken in onze TODOS matrix daarboven.

04:23.830 --> 04:27.720
Laten we daarvoor de index vinden van de TODO die we willen

04:27.720 --> 04:28.710
bijwerken.

04:28.710 --> 04:30.808
todoIndex, door uit te reiken naar

04:30.808 --> 04:33.760
TODOS, en met findIndex, kunnen we wat logica uitvoeren

04:33.760 --> 04:36.090
op elk item in de TODOS array.

04:36.090 --> 04:38.060
En daar kijken we naar elke todo en

04:38.060 --> 04:40.010
als todo id gelijk is aan de todoId

04:40.010 --> 04:44.300
die we hier hebben, weten we dat dat de TODO is die we willen updaten.

04:44.300 --> 04:47.140
Als dat om een of andere reden min één moet zijn,

04:47.140 --> 04:50.550
betekent het dat we die TODO niet hebben gevonden, dus

04:50.550 --> 04:52.610
als dat kleiner is dan nul, weten

04:52.610 --> 04:56.960
we dat er iets fout is gegaan en in dit geval gooi ik een nieuwe fout waar

04:56.960 --> 04:59.630
ik zeg, Kan todo niet vinden!

04:59.630 --> 05:03.633
En dat zou dan onze standaard middleware voor foutafhandeling

05:04.760 --> 05:06.130
moeten activeren.

05:06.130 --> 05:08.633
Als we voorbij deze if-controle komen, hebben

05:09.870 --> 05:12.450
we de TODO gevonden, en dan kunnen we gewoon de

05:12.450 --> 05:15.040
todo op deze index in onze TODOS-array bijwerken

05:15.040 --> 05:18.960
tot een nieuwe TODO, waarbij we het oude id behouden.

05:18.960 --> 05:23.270
Dus waar we TODOS openen, todoIndex. id, dus we openen het oude ID en slaan het op, maar

05:23.270 --> 05:27.030
de tekst hier die ik heb

05:27.030 --> 05:29.490
ingesteld, wijzen we natuurlijk

05:29.490 --> 05:31.713
niet zo toe.

05:32.870 --> 05:34.570
Maar de tekst die we hier instellen, is nu de updatedText.

05:34.570 --> 05:38.750
Dit vervangt de TODO hier, en daarna kunnen we een

05:38.750 --> 05:41.340
antwoord terugsturen, met een

05:41.340 --> 05:45.280
bericht van, Bijgewerkt, bijvoorbeeld.

05:45.280 --> 05:47.053
En waar we dan ook de bijgewerkteTodo

05:47.990 --> 05:51.470
toevoegen aan het uitgaande antwoord, en dit gelijk stellen

05:51.470 --> 05:55.090
aan, wel, TODOS todoIndex, die nu de nieuwe waarde bevat.

05:55.090 --> 05:59.090
Dit is iets wat we hier in onze update logica noemen, natuurlijk

05:59.090 --> 06:02.430
wat dummy code omdat we nog werken met deze TODOS array

06:02.430 --> 06:03.960
in het geheugen, maar het

06:03.960 --> 06:07.150
laat zien hoe we TypeScript hier gebruiken, en dat

06:07.150 --> 06:09.060
is het belangrijkste.

06:09.060 --> 06:11.100
Dus laten we deze update functie nu proberen.

06:11.100 --> 06:13.620
Daarvoor kunnen we terug naar Postman, en uiteindelijk

06:13.620 --> 06:16.260
wil ik nu een PATCH verzoek sturen, want in de routes

06:16.260 --> 06:19.960
wachten we op dit patch verzoek naar deze route.

06:19.960 --> 06:23.460
En nu we het erover hebben, dat we deze route misschien ook eerst

06:23.460 --> 06:24.293
moeten verbinden

06:24.293 --> 06:26.490
met deze controllerfunctie.

06:26.490 --> 06:28.850
Dus, laten we naar het routebestand gaan

06:28.850 --> 06:33.420
en updateTodo importeren en deze verbinding hier tot stand brengen.

06:33.420 --> 06:35.590
En daarna kunnen we doorgaan en dit verzoek versturen.

06:35.590 --> 06:38.570
Dus nu terug naar Postman, PATCH is wat

06:38.570 --> 06:41.890
we willen verzenden en dan is het http://localhost:3000/todos

06:41.890 --> 06:46.320
en nu het idee van de TODO die we willen bijwerken als onderdeel

06:46.320 --> 06:49.430
van de URL.

06:49.430 --> 06:50.573
Nu we iets hebben opgeslagen, omdat we

06:51.500 --> 06:54.970
enkele wijzigingen hebben opgeslagen, herstart onze server, dus alle TODOS zullen hoe dan ook verloren gaan.

06:54.970 --> 06:58.890
Dus laten we eerst dat POST verzoek opnieuw versturen om

06:58.890 --> 07:01.150
een nieuwe TODO aan te maken.

07:01.150 --> 07:02.450
En dan hebben we hier het ID van die TODO.

07:02.450 --> 07:05.170
Nu kunnen we deze id hier toevoegen aan deze URL.

07:05.170 --> 07:08.800
En ik voeg ook een lichaam toe dat van het type JSON moet zijn, waar we de nieuwe

07:08.800 --> 07:11.780
gegevens instellen die we naar de server willen sturen.

07:11.780 --> 07:15.560
Onthoud dat ik in onze update controller op zoek

07:15.560 --> 07:18.570
ben naar een veld genaamd tekst, in de

07:18.570 --> 07:20.970
inkomende request body.

07:20.970 --> 07:22.900
Dus we moeten dit weer meegeven in de JSON

07:22.900 --> 07:24.580
gegevens die we versturen.

07:24.580 --> 07:26.690
Maak de cursus in een maand af,

07:26.690 --> 07:29.440
dit kan onze nieuwe tekst zijn.

07:29.440 --> 07:31.520
Als we dit nu versturen, zien we dat het is bijgewerkt.

07:31.520 --> 07:35.210
En als ik nu alle TODOS krijg, zien we ook dat er nog steeds

07:35.210 --> 07:37.180
maar één TODO is, maar daar is

07:37.180 --> 07:39.430
gewoon de tekst veranderd.

07:39.430 --> 07:41.623
Dus nu dit werkt, kunnen we ook de TODO bijwerken.

07:42.950 --> 07:46.470
Laten we ook eens kijken wat er gebeurt als ik een id heb die niet bestaat,

07:46.470 --> 07:48.780
bijvoorbeeld door het laatste cijfer hier te

07:48.780 --> 07:50.620
verwijderen, dan krijg ik, Kan todo

07:50.620 --> 07:53.430
niet vinden in mijn foutmelding van het type 500.

07:53.430 --> 07:57.670
Dus dit ziet er ook goed uit.

07:57.670 --> 07:59.660
Als laatste stap voegen we een functie toe om een TODO te verwijderen.

07:59.660 --> 08:03.800
Dus in de controllers map, exporteer ik een constante genaamd,

08:03.800 --> 08:07.210
deleteTodo, die van het type RequestHandler is.

08:07.210 --> 08:11.460
En weer krijgen we ons verzoek, ons antwoord, en dan

08:11.460 --> 08:14.040
de volgende functie hier.

08:14.040 --> 08:17.320
En hier wil ik nu de TODO vinden

08:17.320 --> 08:20.270
en gewoon verwijderen.

08:20.270 --> 08:21.543
Daarvoor kunnen we deze code

08:22.380 --> 08:25.090
kopiëren waar we het ID van de TODO krijgen en dan de index.

08:25.090 --> 08:29.360
Haal gewoon die regel weg waar we de bijgewerkte tekst uithalen, want

08:29.360 --> 08:32.210
voor een DELETE-verzoek is er geen request body,

08:32.210 --> 08:35.660
maar hebben we de id van de TODO nodig, die deel uitmaakt van

08:35.660 --> 08:37.400
onze route van de URL.

08:37.400 --> 08:40.340
En dan vinden we de index en zodra we de index hebben,

08:40.340 --> 08:43.530
kunnen we naar de TODO's gaan, de splitsmethode aanroepen

08:43.530 --> 08:47.350
en de todo bij de todoIndex verwijderen, en alleen die todo.

08:47.350 --> 08:51.620
En daarna kunnen we een antwoord terugsturen waarin

08:51.620 --> 08:54.040
we zeggen: Todo verwijderd! zomaar.

08:54.040 --> 08:58.490
Dit zou onze verwijderingslogica kunnen zijn.

08:58.490 --> 08:59.380
Nu is het tijd om dit te

08:59.380 --> 09:01.760
verbinden, dus in de map routes importeren we deleteTodo

09:01.760 --> 09:04.560
van controllers TODOs en verbinden het daar beneden.

09:04.560 --> 09:07.440
En met dit verbonden, als we dit nu opslaan, moeten we opnieuw

09:08.340 --> 09:09.963
een TODO toevoegen omdat alle TODO's

09:11.120 --> 09:14.370
worden gewist bij elke server herstart, dus hier is het.

09:14.370 --> 09:16.720
Kopieer dat id.

09:16.720 --> 09:20.550
En laten we nu dat DELETE verzoek versturen.

09:20.550 --> 09:22.680
Dus een nieuw DELETE verzoek hier, naar

09:22.680 --> 09:24.980
http:/localhost:3000/todos/dit id.

09:24.980 --> 09:27.160
Er hoeft geen lichaam te worden toegevoegd.

09:27.160 --> 09:32.160
Klik op Verzenden en het werkt.

09:32.800 --> 09:34.880
Als ik het opnieuw verstuur, krijgen we de foutmelding

09:34.880 --> 09:37.180
"Kan niet vinden" omdat we het net hebben verwijderd.

09:37.180 --> 09:39.950
En als we alle TODOS krijgen, moet dat een

09:39.950 --> 09:41.570
lege array zijn en dit.

09:41.570 --> 09:42.723
Dus dit werkt nu en dit

09:42.723 --> 09:45.550
is eigenlijk een CRUD functionaliteit, toegevoegd

09:45.550 --> 09:46.750
met TypeScript hier

09:46.750 --> 09:49.550
in deze eenvoudige Node en Express app.

09:49.550 --> 09:50.990
Nu is dat natuurlijk een tamelijk triviale toepassing,

09:50.990 --> 09:52.940
maar het toont ons al enig gebruik van TypeScript.

09:52.940 --> 09:56.060
Het laat zien dat we code schrijven die je bekend voorkomt

09:56.060 --> 09:58.870
als je de rest van deze cursus doorwerkt, en dat we

09:58.870 --> 10:00.480
alle functies gebruiken die

10:00.480 --> 10:02.000
je daar hebt geleerd.

10:02.000 --> 10:04.750
En net als in het React-gedeelte is dat alles wat belangrijk is.

10:04.750 --> 10:07.610
Ook hier kunt u alles gebruiken wat u over TypeScript

10:07.610 --> 10:10.110
hebt geleerd, want uiteindelijk wordt het

10:10.110 --> 10:11.520
gecompileerd tot gewone

10:11.520 --> 10:13.340
JavaScript-code, die wij vervolgens

10:13.340 --> 10:14.990
serveren.
