WEBVTT

00:02.160 --> 00:05.070
- ：目前我没有使用webpack-dev服务器｡ 

00:05.070 --> 00:07.680
现在使用它是非常直接向前, 虽然｡ 

00:07.680 --> 00:12.430
我们只要把包拿来｡  json文件, 现在我们使用“webpack-dev-server”代替“lite-server”,

00:12.430 --> 00:17.380
如下所示｡

00:17.380 --> 00:20.020
现在让我们重新开始｡ 

00:20.020 --> 00:23.610
现在, 您将看到, 这将启动在本地主机8080上运行的服务器,

00:23.610 --> 00:28.330
并启动Webpack构建工作流｡

00:28.330 --> 00:30.060
现在, 如果您访问本地主机8080,

00:30.060 --> 00:32.020
我们将在那里看到我们的项目｡

00:32.020 --> 00:33.860
有趣的是, 如果我们修改了代码,

00:33.860 --> 00:38.520
比如说, 如果你在这里调整了ERA控制台日志, 它被保存了,

00:38.520 --> 00:43.160
然后你看底部, 你会看到它重新编译了.

00:43.160 --> 00:46.450
然而, 如果你重新加载, 你不会在这里看到日志｡ 如果你进入应用程序, 也会在源代码选项卡,

00:46.450 --> 00:51.920
在webpack源代码选项卡中看到日志｡

00:51.920 --> 00:51.920
ts, 这里看不到日志｡ 

00:51.920 --> 00:54.820
所以它实际上没有加载正确的代码｡ 

00:54.820 --> 00:58.790
如果我删除这个包, 这就更清楚了｡  js文件｡ 

00:58.790 --> 01:01.513
如果我现在重新启动这个npm启动进程,

01:02.630 --> 01:04.750
你会看到它仍然工作, 顺便说一句,

01:04.750 --> 01:10.240
不要奇怪dist文件夹现在是空的, 在webpack-dev服务器模式下,

01:10.240 --> 01:13.020
bundle只在内存中生成, 所以它在那里,

01:13.020 --> 01:18.490
由dev服务器加载, 但它实际上没有写入dist｡

01:18.490 --> 01:20.270
但是你会看到如果你重新加载,

01:20.270 --> 01:22.180
这个页面现在也崩溃了｡

01:22.180 --> 01:24.050
我说过文件会在那里,

01:24.050 --> 01:27.080
但看起来好像不在那里, 对吧？

01:27.080 --> 01:32.120
正如我所说的, 现在它在dist上丢失了, 当然我们从dist/bundle导入｡

01:32.120 --> 01:32.120
js和索引｡

01:32.120 --> 01:35.130
html, 但事实上你可以相信我,

01:35.130 --> 01:36.810
它是在内存中生成的｡

01:36.810 --> 01:41.640
问题是目前的电路连接不正确｡

01:41.640 --> 01:50.330
要调整这一点, 我们必须转到webpack｡  配置 js文件, 并在输出中实际添加一个publicPath键,

01:50.350 --> 01:53.647
并将其设置为“dist”｡ 如果您现在保存并重新启动, 您会看到它重新加载,

01:56.250 --> 02:00.670
并在此处看到“Hi”｡

02:00.670 --> 02:05.320
在源选项卡中, 您现在还可以看到正确的输出｡

02:05.320 --> 02:06.580
如果你转到dot文件夹,

02:06.580 --> 02:07.860
源程序｡ 您将看到控制台日志语句｡ 

02:07.860 --> 02:13.893
如果我现在去应用程序｡  ts并删除它, 它会重新构建, 现在控制台日志语句消失了｡

02:15.220 --> 02:20.410
这只是webpack-dev服务器需要的一个附加配置,

02:20.410 --> 02:26.520
以便真正了解输出被写入的位置以及它相对于索引的位置｡

02:26.520 --> 02:26.520
html档案｡ 

02:26.520 --> 02:32.180
因为默认情况下webpack-dev服务器提供一个索引｡

02:32.180 --> 02:32.180
html文件,

02:32.180 --> 02:34.030
它在您运行此脚本的同一文件夹中找到｡

02:34.030 --> 02:37.550
这是正确的, 但它不能正确地连接到dist文件夹,

02:37.550 --> 02:44.970
这就是为什么我们必须用publicPath通知webpack-dev服务器在哪里可以找到我们的资产,

02:44.970 --> 02:48.040
所以我们的包｡ js文件｡ 

02:48.040 --> 02:50.960
现在, 如果我们退出开发服务器,

02:50.960 --> 02:53.790
我还想在开发模式下应用另一个设置｡

02:53.790 --> 02:56.080
我将在导出对象的顶部执行此操作｡ 

02:56.080 --> 03:01.800
我会将模式设置为“开发”｡  这最终会告诉webpack, 我们在这里是为开发而构建的,

03:01.800 --> 03:05.590
它将做更少的优化来改善我们的开发体验, 使调试更容易,

03:05.590 --> 03:11.420
并给我们更多有意义的错误消息, 例如｡

03:11.420 --> 03:12.950
所以在开发过程中,

03:12.950 --> 03:16.420
我们也一定要在这里添加这个键｡

03:16.420 --> 03:17.840
在配置好webpack-dev服务器之后,

03:17.840 --> 03:20.110
我们现在就完成了开发工作流｡

03:20.110 --> 03:22.880
现在, 对于生产, 我们需要稍微调整此工作流,

03:22.880 --> 03:27.100
因为我们需要不同的输出｡
