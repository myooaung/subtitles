WEBVTT

00:02.120 --> 00:04.420
Instrutor: Além de criar um decorador como

00:04.420 --> 00:07.060
este, podemos também definir uma fábrica de decoradores,

00:07.060 --> 00:10.150
que basicamente retorna uma função de decorador, mas

00:10.150 --> 00:13.120
nos permite configurá-lo quando o atribuímos como

00:13.120 --> 00:15.440
decorador a algo.

00:15.440 --> 00:18.210
Para mostrar isto, vamos converter esta função

00:18.210 --> 00:19.790
aqui em uma fábrica.

00:19.790 --> 00:22.260
Para isso, vou pegar este argumento de construtor

00:22.260 --> 00:23.220
e removê-lo, e em vez

00:23.220 --> 00:24.170
disso aqui vou devolver

00:24.170 --> 00:26.120
uma nova função, anônima, que pega este

00:26.120 --> 00:28.000
argumento de construtor e que, em seguida,

00:28.000 --> 00:29.920
segura este registro que eu quero executar

00:29.920 --> 00:34.610
dentro do decorador, então eu movo isso para lá.

00:34.610 --> 00:37.890
Portanto, agora temos uma função que devolve uma nova função.

00:37.890 --> 00:40.780
Portanto, agora quando queremos aplicar este decorador,

00:40.780 --> 00:43.350
temos que executá-lo como uma função aqui, para

00:43.350 --> 00:45.740
que possamos executar esta função externa e

00:45.740 --> 00:47.670
atribuir o valor de retorno, que é esta

00:47.670 --> 00:49.000
função interna que é nossa

00:49.000 --> 00:51.350
função de decorador válida, como um decorador

00:51.350 --> 00:53.430
para a classe, portanto.

00:53.430 --> 00:54.740
Por que faríamos isso?

00:54.740 --> 00:56.630
Porque agora aqui, por exemplo,

00:56.630 --> 00:59.440
poderíamos aceitar aqui uma cadeia de log, que

00:59.440 --> 01:00.390
é uma cadeia, qualquer

01:00.390 --> 01:01.790
argumento de sua escolha

01:01.790 --> 01:03.750
e quantos argumentos você quiser,

01:03.750 --> 01:08.230
e passar um valor para isso em "logging - pessoa" e usar isso dentro de nossa

01:08.230 --> 01:11.280
função de decorador para que aqui, em vez de mostrar

01:11.280 --> 01:14.470
esse texto de log padrão, mostremos nossa cadeia de

01:14.470 --> 01:16.300
log.

01:16.300 --> 01:18.540
Assim, agora podemos personalizar

01:18.540 --> 01:22.100
os valores que a função decoradora usa quando executa

01:22.100 --> 01:25.000
com nossa função de fábrica.

01:25.000 --> 01:27.410
Agora chamamos nosso decorador aqui, porque

01:27.410 --> 01:30.710
não estamos executando a função de decorador, mas estamos

01:30.710 --> 01:33.290
executando uma função que retornará essa função

01:33.290 --> 01:35.060
de decorador.

01:35.060 --> 01:36.940
E a vantagem disso é que agora

01:36.940 --> 01:40.790
podemos passar valores que serão utilizados por essa função

01:40.790 --> 01:43.750
de decorador interno devolvido.

01:43.750 --> 01:47.050
Portanto, se eu agora salvar isso, vemos a saída antiga,

01:47.050 --> 01:49.940
mas com nossa cadeia de log personalizados aqui.

01:49.940 --> 01:53.010
Assim, o uso de fábricas de decoradores pode

01:53.010 --> 01:55.730
nos dar mais poder e mais possibilidades

01:55.730 --> 01:59.973
de configurar o que o decorador faz internamente.
