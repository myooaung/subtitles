WEBVTT

00:02.150 --> 00:04.220
-: Ora abbiamo dato un'occhiata approfondita

00:04.220 --> 00:07.410
a tutti i tipi fondamentali e alle basi di TypeScript.

00:07.410 --> 00:11.640
Si spera che ora abbiate capito come si creano e si assegnano

00:11.640 --> 00:14.427
i tipi, come si assegnano i tipi alle variabili

00:14.427 --> 00:17.510
e ai parametri e perché lo si fa.

00:17.510 --> 00:20.740
In che modo le assegnazioni di tipo e i tipi potrebbero differire

00:20.740 --> 00:24.770
dai controlli di tipo JavaScript: JavaScript usa i tipi di runtime, mentre

00:24.770 --> 00:27.310
TypeScript usa i tipi statici che contano durante

00:27.310 --> 00:29.400
lo sviluppo.

00:29.400 --> 00:31.710
Il codice JavaScript costruito, quindi,

00:31.710 --> 00:34.410
non include alcuna assegnazione di tipo.

00:34.410 --> 00:36.550
Naturalmente include qualsiasi controllo

00:36.550 --> 00:39.060
di tipo, perché si tratta di normale codice JavaScript,

00:39.060 --> 00:41.730
ma qualcosa di simile a questo...

00:43.050 --> 00:44.910
questo non è semplicemente consentito in JavaScript.

00:44.910 --> 00:46.280
Questa non è una sintassi supportata.

00:46.280 --> 00:47.960
È solo TypeScript.

00:47.960 --> 00:49.550
Spero che questo sia chiaro.

00:49.550 --> 00:52.740
Abbiamo poi dato un'occhiata ai numeri, alle stringhe, ai booleani,

00:52.740 --> 00:55.750
ai tipi di funzione e all'impostazione dei tipi di ritorno, dei

00:55.750 --> 00:58.510
tipi di argomenti e anche alla descrizione del tipo di una

00:58.510 --> 01:00.160
funzione complessiva, che può essere

01:00.160 --> 01:02.490
utile se si vuole avere una variabile che alla fine

01:02.490 --> 01:04.780
contiene una funzione.

01:04.780 --> 01:07.890
Abbiamo dato un'occhiata agli oggetti, agli array e agli enum e

01:07.890 --> 01:10.140
a come possono essere interessanti e utili.

01:10.140 --> 01:12.030
Lo stesso vale per le tuple.

01:12.030 --> 01:16.160
E ora abbiamo anche dato un'occhiata agli alias, alias di tipi, dove

01:16.160 --> 01:18.605
è possibile unire tipi complessi in alias

01:18.605 --> 01:21.220
che possono essere riutilizzati.

01:21.220 --> 01:23.840
Abbiamo dato un'occhiata ai tipi letterali e

01:23.840 --> 01:25.840
ai tipi union, che possono essere utili

01:25.840 --> 01:29.550
per scenari in cui ci si aspetta più di un tipo possibile.

01:29.550 --> 01:33.455
E alla fine abbiamo dato un'occhiata anche a unknown e never,

01:33.455 --> 01:35.956
che sono tipi di nicchia, ma sempre nella

01:35.956 --> 01:39.430
loro nicchia possono essere molto utili.

01:39.430 --> 01:40.970
Ora, con queste nozioni di base,

01:40.970 --> 01:43.180
approfondiremo i singoli aspetti e, naturalmente,

01:43.180 --> 01:45.630
esploreremo anche altri tipi e costrutti JavaScript

01:45.630 --> 01:49.163
in cui i tipi possono essere utili.
