WEBVTT

00:02.120 --> 00:05.910
-: Agora vamos começar com uma biblioteca de utilidades muito popular,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Agora o que você aprenderá aqui basicamente funciona como um

00:09.840 --> 00:13.250
exemplo de qualquer biblioteca JavaScript que você queira usar.

00:13.250 --> 00:17.430
Não importa se isso é Lodash, jQuery, ou qualquer outra coisa.

00:17.430 --> 00:19.510
Agora uma pequena nota lateral neste

00:19.510 --> 00:21.640
ponto, se você estiver interessado em

00:21.640 --> 00:24.150
como trabalhar com Reage e TypeScript ou digamos

00:24.150 --> 00:26.718
Node. js. e Express e TypeScript,

00:26.718 --> 00:31.350
tenho módulos dedicados sobre isso mais tarde no curso, porque lá você aprenderá

00:31.350 --> 00:33.760
um pouco mais do que apenas adicioná-los

00:33.760 --> 00:35.730
com TypeScript.

00:35.730 --> 00:40.470
Mas para um librarys mais simples, como Lodash, como jQuery e aqui está

00:40.470 --> 00:43.010
uma abordagem que vai funcionar.

00:43.010 --> 00:45.340
Portanto, queremos usar Lodash em nosso projeto.

00:45.340 --> 00:48.460
Lodash, é claro, é uma biblioteca JavaScript.

00:48.460 --> 00:50.800
Não precisamos de TypeScript para usá-lo,

00:50.800 --> 00:53.480
podemos usá-lo em qualquer projeto JavaScript

00:53.480 --> 00:56.770
e podemos instalá-lo como você basicamente aprende aqui

00:56.770 --> 00:59.200
nos documentos oficiais de Lodash.

00:59.200 --> 01:01.400
Se você estiver usando npm, que nós estamos,

01:01.400 --> 01:06.477
você pode executar npm i ou npm install, isso é apenas uma forma curta, "--save/lodash".

01:07.750 --> 01:10.820
Portanto, aqui neste exemplo de projeto que usa webpack sem um fluxo de trabalho

01:10.820 --> 01:12.640
de produção, embora apenas um fluxo de trabalho

01:12.640 --> 01:14.180
de desenvolvimento.

01:14.180 --> 01:16.570
Aí podemos adicionar esta biblioteca executando apenas

01:16.570 --> 01:18.607
o traço de instalação nmp, salvando Lodash.

01:18.607 --> 01:21.700
E isto agora vai instalá-lo neste projeto e graças à configuração

01:21.700 --> 01:23.500
de nosso webpack, podemos simplesmente

01:23.500 --> 01:26.250
importá-lo em nossos arquivos de código e utilizá-lo

01:26.250 --> 01:27.517
lá.

01:27.517 --> 01:30.670
E isso seria o mesmo em qualquer projeto JavaScript

01:30.670 --> 01:32.250
alimentado por webpack.

01:32.250 --> 01:34.990
Se você não estiver usando webpack, então é claro que você também

01:34.990 --> 01:37.720
poderia simplesmente usar o CDN e assim por diante.

01:37.720 --> 01:40.630
No entanto, o que vou mostrar nos próximos passos, um

01:40.630 --> 01:42.390
pouco mais tarde neste módulo,

01:42.390 --> 01:45.130
só funcionará em uma configuração de webpack.

01:45.130 --> 01:47.730
Portanto, aqui temos uma configuração de webpack, agora instalamos

01:47.730 --> 01:49.320
o Lodash, e agora se quisermos usá-lo,

01:49.320 --> 01:51.510
podemos simplesmente importá-lo aqui.

01:51.510 --> 01:55.600
Podemos importar, digamos, destacar de 'Lodash'.

01:55.600 --> 01:57.960
Essa é uma sintaxe que deve estar disponível

01:57.960 --> 01:59.960
com o Lodash instalado.

01:59.960 --> 02:03.057
No entanto, isto já nos dá um erro.

02:03.057 --> 02:06.850
"Não foi possível encontrar um arquivo de declaração para o módulo Lodash".

02:06.850 --> 02:09.890
E teremos outro problema, se você quiser usar Lodash,

02:09.890 --> 02:12.230
por exemplo, para embaralhar uma matriz,

02:12.230 --> 02:16.810
bem, podemos consolar o embaralhamento de logs e depois passar uma simples

02:16.810 --> 02:20.430
matriz para este método de embaralhamento.

02:20.430 --> 02:23.110
O método shuffle é um método que Lodash suporta.

02:23.110 --> 02:25.790
Podemos aprender isto na documentação oficial

02:25.790 --> 02:26.820
de Lodash.

02:26.820 --> 02:29.056
Lá, se você procura por "shuffle", você

02:29.056 --> 02:32.370
aprende que pode embaralhar uma matriz com este método.

02:32.370 --> 02:37.010
Portanto, deveria funcionar, mas realmente não funciona

02:37.010 --> 02:39.480
assim, como você pode dizer.

02:39.480 --> 02:43.058
Se eu agora iniciar meu servidor webpack aqui,

02:43.058 --> 02:45.890
veremos que o CDN nos dá um erro.

02:45.890 --> 02:47.077
E mais uma vez nos diz que

02:47.077 --> 02:50.940
"não consegue encontrar um arquivo de declaração para o módulo Lodash".

02:50.940 --> 02:54.720
Portanto, isto não está realmente funcionando da maneira que deveria.

02:54.720 --> 02:57.610
Agora o problema com isso é que Lodash é uma

02:57.610 --> 02:59.930
simples biblioteca JavaScript.

02:59.930 --> 03:02.250
É construído com baunilha JavaScript,

03:02.250 --> 03:05.150
e é construído para baunilha JavaScript.

03:05.150 --> 03:08.530
Podemos verificar isso se formos aos módulos de nós, onde temos

03:08.530 --> 03:10.280
muitas dependências, porque temos

03:10.280 --> 03:12.450
muitas dependências de webpack e são dependências

03:12.450 --> 03:14.220
de lá.

03:14.220 --> 03:17.010
Mas aqui, se procuramos por Lodash, aqui

03:17.010 --> 03:17.930
está ele.

03:17.930 --> 03:21.330
E nos expandimos como vemos que há um monte de arquivos JavaScript

03:21.330 --> 03:22.750
lá dentro, certo?

03:22.750 --> 03:26.380
E isso está lá em todo o código fonte de Lodash.

03:26.380 --> 03:30.010
Um monte de código JavaScript, mas certamente nenhum código TypeScript.

03:30.010 --> 03:31.750
Agora qual é o problema com isso?

03:31.750 --> 03:35.550
O problema é que o TypeScript não entende o que está

03:35.550 --> 03:37.070
neste pacote.

03:37.070 --> 03:41.020
Não entende quais métodos a Lodash exporta.

03:41.020 --> 03:43.480
Agora você verá que isso realmente funciona se formos

03:43.480 --> 03:45.500
ao tsconfig. arquivo json.

03:45.500 --> 03:48.740
E nos certificamos de que emitimos uma saída após um erro.

03:48.740 --> 03:52.650
Portanto, se mudarmos "noEmitOnError" para "falso", de

03:52.650 --> 03:55.770
modo que emitiremos nova saída se algo errar.

03:55.770 --> 03:57.600
Por enquanto, comece isso novamente,

03:57.600 --> 04:00.230
no final nos dará esse mesmo erro, então ainda

04:00.230 --> 04:02.160
vamos ver isso.

04:02.160 --> 04:05.090
Mas se eu recarregar esta página aqui, você realmente

04:05.090 --> 04:07.120
terá uma saída aqui.

04:07.120 --> 04:08.922
Você pode ignorar o erro no fundo

04:08.922 --> 04:12.580
aqui, você verá uma saída que é a matriz baralhada.

04:12.580 --> 04:14.920
Vê, parece diferente cada vez que eu recarrego.

04:14.920 --> 04:16.530
E isso é muito interessante.

04:16.530 --> 04:19.770
Ele prova que Lodash funciona, prova que este código

04:19.770 --> 04:21.280
está correto.

04:21.280 --> 04:24.170
Mas infelizmente, o TypeScript não o entende,

04:24.170 --> 04:28.400
e não pode porque Lodash usa JavaScript, não TypeScript.

04:28.400 --> 04:31.220
Agora o problema é que não há TypeScript na versão

04:31.220 --> 04:34.080
de Lodash, então temos que viver com isso.

04:34.080 --> 04:37.220
E esse é um cenário que você vai encontrar bastante.

04:37.220 --> 04:39.365
Você quer usar uma certa biblioteca de terceiros,

04:39.365 --> 04:42.270
e ela é construída apenas para JavaScript, e por isso você

04:42.270 --> 04:44.210
recebe erros como esse.

04:44.210 --> 04:46.060
Isto é irritante porque, em teoria,

04:46.060 --> 04:47.430
podemos usá-lo, é claro.

04:47.430 --> 04:49.630
O TypeScript se baseia no JavaScript.

04:49.630 --> 04:53.160
Podemos usar qualquer biblioteca JavaScript em um projeto TypeScript,

04:53.160 --> 04:56.150
só temos que traduzi-lo para TypeScript.

04:56.150 --> 04:58.890
E isso, felizmente, é possível.

04:58.890 --> 05:02.564
Portanto, deixe-me ligar este cenário aqui, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Deixe-me mostrar-lhe como podemos dizer TypeScript

05:07.200 --> 05:10.053
sobre Lodash e sobre o que ele oferece.

05:11.140 --> 05:13.662
Você pode instalar os chamados tipos

05:13.662 --> 05:16.250
de biblioteca de terceiros.

05:16.250 --> 05:20.050
Se você procurar por tipos Lodash, você encontrará

05:20.050 --> 05:24.140
um pacote npm que aqui é chamado "@types/lodash".

05:24.140 --> 05:26.440
Lá você também vê o comando de instalação, que

05:26.440 --> 05:28.120
será executado em um segundo.

05:28.120 --> 05:30.580
Mas se você descer aos detalhes, você também encontrará

05:30.580 --> 05:32.220
um link para o repositório github.

05:32.220 --> 05:36.320
Ele se liga ao DefitelyTyped, que é um enorme repositório com toneladas

05:36.320 --> 05:39.260
de traduções para todos os tipos de bibliotecas

05:39.260 --> 05:40.820
de terceiros.

05:40.820 --> 05:43.120
Aqui estamos na pasta Lodash.

05:43.120 --> 05:46.590
E lá você encontra os chamados . arquivos dts.

05:46.590 --> 05:50.180
Portanto, não apenas . ts mas . dts.

05:50.180 --> 05:53.460
Estes são os chamados arquivos de declaração, o que significa que eles

05:53.460 --> 05:55.760
não contêm nenhuma lógica real, mas se tivermos

05:55.760 --> 05:58.750
uma olhada no baralhamento . arquivo dts, eles

05:58.750 --> 06:01.848
contêm instruções para TypeScript.

06:01.848 --> 06:05.200
Basicamente, eles dizem ao TypeScript como algo

06:05.200 --> 06:08.720
funciona e o que está incluído neste pacote.

06:08.720 --> 06:10.700
E você pode explorar diferentes arquivos

06:10.700 --> 06:14.280
aqui, todos em diferentes subpastas, para saber mais sobre isso.

06:14.280 --> 06:17.717
Portanto, no final estes arquivos simplesmente fornecem

06:17.717 --> 06:21.750
uma tradução do JavaScript simples para o TypeScript.

06:21.750 --> 06:23.860
Eles não contêm nenhuma lógica que funcione,

06:23.860 --> 06:26.950
mas definem os tipos com os quais esta biblioteca trabalha.

06:26.950 --> 06:30.010
Eles definem os tipos que você usa, os tipos que você recebe de volta

06:30.010 --> 06:32.490
quando você chama um método, e assim por diante.

06:32.490 --> 06:35.410
Você também pode escrever tais . dts por conta própria, e os

06:35.410 --> 06:38.510
tipos oficiais de documentos fornecem um guia sobre isso,

06:38.510 --> 06:40.470
se é isso que lhe interessa.

06:40.470 --> 06:42.110
Mas para seus próprios tipos de projetos

06:42.110 --> 06:43.160
você não precisa fazer isso,

06:43.160 --> 06:45.820
porque se você estiver escrevendo códigos TypeScript somente

06:45.820 --> 06:48.110
o TypeScript entende isso, é claro.

06:48.110 --> 06:50.310
Mas se você estiver trabalhando com uma biblioteca

06:50.310 --> 06:53.840
de terceiros escrita em JavaScript sem qualquer código TypeScript, ou

06:53.840 --> 06:56.860
sem código embutido . arquivos dts, que algumas

06:56.860 --> 06:59.950
bibliotecas de terceiros enviam a propósito, mesmo

06:59.950 --> 07:02.240
que estejam escritos em JavaScript,

07:02.240 --> 07:03.960
Lodash não o faz.

07:03.960 --> 07:06.890
Portanto, se você está trabalhando com uma biblioteca

07:06.890 --> 07:08.330
que não contém arquivos de

07:08.330 --> 07:11.180
tradução incorporados, e que não está nativamente

07:11.180 --> 07:15.760
escrita em TypeScript, então, usando tais pacotes de tipos é a solução.

07:15.760 --> 07:20.760
Então, aqui nós executamos então "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
Você também pode realmente executar "save-dev", porque

07:24.600 --> 07:27.920
dev é uma dependência que só é realmente necessária durante o desenvolvimento,

07:27.920 --> 07:29.230
porque então o código é cumprido

07:29.230 --> 07:32.360
através do JavaScript de qualquer maneira.

07:32.360 --> 07:36.130
E isto agora instala esta tradução do TypeScript

07:36.130 --> 07:38.060
para entendê-la.

07:38.060 --> 07:40.630
E você vê que, assim que isto é instalado,

07:40.630 --> 07:42.510
este erro desaparece.

07:42.510 --> 07:46.220
E se eu reiniciar agora npm start, você verá que o erro

07:46.220 --> 07:48.270
também não voltará aqui.

07:48.270 --> 07:51.640
Assim você vê agora que isto funciona sem nenhum

07:51.640 --> 07:55.190
erro, tanto na compilação como no navegador.

07:55.190 --> 07:57.270
Tecnicamente também funcionava antes,

07:57.270 --> 07:59.160
mas agora com a tradução, também

07:59.160 --> 08:01.580
podemos utilizar o TypeScript.

08:01.580 --> 08:04.660
E, por exemplo, agora também temos toda a conclusão

08:04.660 --> 08:05.493
aqui, na IDE.

08:05.493 --> 08:10.070
Se eu digitar um ponto aqui, vejo os métodos Lodash que eu posso usar.

08:10.070 --> 08:13.930
Portanto, este é um conhecimento muito importante, algo que você

08:13.930 --> 08:16.400
definitivamente tem que estar ciente,

08:16.400 --> 08:19.370
que lhe permite usar regularmente, normal, bibliotecas

08:19.370 --> 08:21.177
de baunilha JavaScript, em um

08:21.177 --> 08:24.220
projeto de TypeScript, e ainda obter grande suporte,

08:24.220 --> 08:28.490
grande auto-completamento, e evitar erros.

08:28.490 --> 08:33.030
Com a ajuda destes pacotes do tipo tranlastion, você poderia

08:33.030 --> 08:33.990
dizer.

08:33.990 --> 08:38.990
E estes pacotes, que são sempre chamados de "@tipos", e depois o nome do pacote,

08:39.290 --> 08:40.860
estes basicamente existem

08:40.860 --> 08:45.270
para qualquer biblioteca popular de terceiros que você possa encontrar

08:45.270 --> 08:46.730
lá.

08:46.730 --> 08:49.960
Você pode sempre procurar pelo nome da biblioteca, e depois

08:49.960 --> 08:51.690
digitar por exemplo jQuery tipos,

08:51.690 --> 08:54.400
e você deve encontrar tal entrada.

08:54.400 --> 08:57.350
Então é assim que você pode trabalhar com tipos em bibliotecas

08:57.350 --> 08:59.373
de baunilha JavaScript.
