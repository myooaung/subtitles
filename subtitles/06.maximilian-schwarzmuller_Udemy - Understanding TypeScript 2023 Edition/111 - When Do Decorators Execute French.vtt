WEBVTT

00:02.440 --> 00:04.260
- : Avant de nous plonger dans d'autres

00:04.260 --> 00:05.433
exemples, comprenons

00:05.433 --> 00:07.940
l'ordre d'exécution des décorateurs.

00:07.940 --> 00:10.530
Et ici, il est important de comprendre que

00:10.530 --> 00:11.950
tout d'abord, ils fonctionnent

00:11.950 --> 00:13.710
tous sans que nous instanciions

00:13.710 --> 00:15.396
ce produit.

00:15.396 --> 00:16.600
Ou, en d'autres

00:16.600 --> 00:18.300
termes, si je crée un produit

00:18.300 --> 00:19.670
ici avec, nouveau

00:19.670 --> 00:21.233
produit, livre, pour

00:21.233 --> 00:24.563
$19, et je crée un autre produit ici, livre

00:24.563 --> 00:26.660
deux pour, $29.

00:26.660 --> 00:27.887
ceci a comporté sans erreurs

00:27.887 --> 00:29.970
de mon code décorateur ici ne fonctionne

00:29.970 --> 00:31.730
pas plus souvent.

00:31.730 --> 00:35.350
Ce n'est donc pas l'instanciation de cette classe qui importe.

00:35.350 --> 00:36.680
Tous ces décorateurs, qu'il

00:36.680 --> 00:38.452
s'agisse d'un décorateur de propriété,

00:38.452 --> 00:41.810
d'un décorateur de méthode, d'un décorateur d'accesseur ou d'un

00:41.810 --> 00:43.620
décorateur de paramètre, ont tous

00:43.620 --> 00:46.770
été exécutés lorsque vous avez défini cette classe, et c'est

00:46.770 --> 00:48.930
important de le comprendre.

00:48.930 --> 00:50.960
Il ne s'agit pas de décorateurs qui s'exécutent au moment

00:50.960 --> 00:53.190
de l'exécution lorsque vous appelez une méthode ou lorsque

00:53.190 --> 00:55.100
vous travaillez avec une propriété.

00:55.100 --> 00:57.190
Ce n'est pas ce qu'ils font.

00:57.190 --> 00:59.360
Au lieu de cela, ces décorateurs vous permettent

00:59.360 --> 01:01.875
d'effectuer un travail supplémentaire de mise en place

01:01.875 --> 01:04.397
en coulisses lorsqu'une classe est définie.

01:04.397 --> 01:06.590
Retour au concept de métaprogrammation que j'ai

01:06.590 --> 01:08.070
expliqué plus tôt, d'accord.

01:08.070 --> 01:10.200
C'est l'idée qui se cache derrière les décorateurs

01:10.200 --> 01:12.410
ou c'est leur principal cas d'utilisation.

01:12.410 --> 01:15.520
Ce ne sont pas des écouteurs d'événements que vous ajoutez à quelque chose pour

01:15.520 --> 01:17.100
pouvoir exécuter du code lorsque vous travaillez

01:17.100 --> 01:18.490
avec une propriété.

01:18.490 --> 01:19.740
Vous pouvez faire fonctionner

01:19.740 --> 01:21.069
quelque chose comme ça avec

01:21.069 --> 01:23.740
des décorateurs en fait, mais en modifiant et en éditant

01:23.740 --> 01:24.977
quelque chose en coulisse,

01:24.977 --> 01:26.756
mais le décorateur lui-même est

01:26.756 --> 01:29.710
vraiment juste une fonction qui s'exécute quand votre

01:29.710 --> 01:33.233
classe est définie, quand votre (marmonnements) et vous pouvez

01:33.233 --> 01:35.010
alors utiliser le décorateur pour

01:35.010 --> 01:37.460
faire un peu de travail en coulisse, pour ensuite

01:37.460 --> 01:39.890
mettre en place un code qui devrait s'exécuter

01:39.890 --> 01:43.660
chaque fois que cela est appelé.

01:43.660 --> 01:47.310
Pour ajouter des métadonnées supplémentaires ou stocker des données sur une propriété

01:47.310 --> 01:50.030
ailleurs dans votre projet ou dans votre bibliothèque, que

01:50.030 --> 01:51.696
vous êtes en train de créer.

01:51.696 --> 01:54.075
Voilà à quoi peuvent servir les décorateurs,

01:54.075 --> 01:55.756
et c'est tout le modèle que vous

01:55.756 --> 01:58.420
verrez lorsque je vous montrerai ces exemples

01:58.420 --> 02:00.320
de ce que vous pouvez construire

02:00.320 --> 02:02.290
avec des décorateurs.

02:02.290 --> 02:04.740
Ils ajoutent une fonctionnalité supplémentaire

02:04.740 --> 02:06.200
en coulisse qui peut parfois

02:06.200 --> 02:08.060
s'exécuter lorsque vous faites quelque

02:08.060 --> 02:10.530
chose avec votre classe ou votre méthode, mais

02:10.530 --> 02:11.600
qui peut aussi faire

02:11.600 --> 02:12.740
des choses totalement

02:12.740 --> 02:14.313
différentes.

02:15.240 --> 02:17.860
C'est très important pour notre exemple de

02:17.860 --> 02:21.320
personne de tout à l'heure avec le décorateur de modèle.

02:21.320 --> 02:22.980
Cela n'ajoute pas ce modèle chaque

02:22.980 --> 02:25.160
fois que nous instancions une personne ici.

02:25.160 --> 02:27.890
Il l'ajoute à chaque fois que nous définissons cette classe.

02:27.890 --> 02:29.820
Nous devrions ajouter une logique supplémentaire

02:29.820 --> 02:31.650
à l'intérieur de notre fonction décorateur pour

02:31.650 --> 02:33.140
modifier ce comportement.

02:33.140 --> 02:35.980
Et peut-être simplement stocker ce modèle dans une

02:35.980 --> 02:38.441
autre structure de données de notre projet

02:38.441 --> 02:41.380
que nous utilisons ensuite à chaque fois que nous créons

02:41.380 --> 02:43.650
une nouvelle personne ici.

02:43.650 --> 02:45.278
Ainsi, nous mettons tout cela en place

02:45.278 --> 02:47.240
lorsque nous définissons la classe, mais

02:47.240 --> 02:48.400
nous le stockons ensuite

02:48.400 --> 02:49.890
en interne dans les coulisses et

02:49.890 --> 02:51.170
nous pouvons l'utiliser quand

02:51.170 --> 02:52.350
nous le voulons.

02:52.350 --> 02:54.160
Actuellement, nous rendons toujours cette information

02:54.160 --> 02:55.380
lorsque nous définissons cette classe,

02:55.380 --> 02:57.610
et non lorsque vous créez une nouvelle instance.

02:57.610 --> 02:59.570
C'est ainsi que les décorateurs s'exécutent

02:59.570 --> 03:00.403
et, comme je l'ai dit,

03:00.403 --> 03:01.940
je vais maintenant vous montrer

03:01.940 --> 03:04.504
quelques exemples où nous profitons des décorateurs

03:04.504 --> 03:06.900
en général et de leur temps d'exécution pour faire

03:06.900 --> 03:08.883
de belles choses avec eux.
