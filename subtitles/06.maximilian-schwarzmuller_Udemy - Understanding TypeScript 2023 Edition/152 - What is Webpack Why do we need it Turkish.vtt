WEBVTT

00:02.050 --> 00:04.090
Eğitmen: Peki hangi dezavantajımız var?

00:04.090 --> 00:06.030
Üzerinde çalıştığımız proje

00:06.030 --> 00:08.020
bu ES6 modül içe aktarımlarını

00:08.020 --> 00:12.390
kullanarak birden fazla dosyaya bölünmüştür.

00:12.390 --> 00:15.620
Şimdi, bu projeyi aktüel olarak inşa edelim ve bunun

00:15.620 --> 00:18.400
için, daha önce yaptığımız gibi, lite-server'ı

00:18.400 --> 00:21.930
getirmek için npm-start'ı çalıştırabiliriz.

00:21.930 --> 00:24.710
Ve elbette, yeni bir sekmede, izleme modunda TypeScript

00:24.710 --> 00:26.367
derlemesini başlatmak için

00:27.820 --> 00:31.430
tüm tsc-dash çalıştırmaları çok önemlidir.

00:31.430 --> 00:35.590
Bu bize projemizi verir ve şimdi tarayıcı geliştirici araçlarında

00:35.590 --> 00:39.570
Ağ sekmesini açarsak ve bu dosyayı yeniden yüklersek, burada sahip

00:39.570 --> 00:42.360
olduğumuz dezavantajı veya bu kurulumda yaşadığımız

00:42.360 --> 00:44.840
sorunu göreceğiz.

00:44.840 --> 00:47.490
Bir sürü HTTP isteği görüyoruz.

00:47.490 --> 00:49.160
Şimdi buradaki sonuncuları görmezden gelebilirsiniz,

00:49.160 --> 00:51.380
bunlar geliştirme sunucumuzdan geliyor.

00:51.380 --> 00:58.290
Ancak tüm bu taleplerimiz burada uygulama için. js, proje-giriş.

00:58.290 --> 00:58.290
js, proje listesi. js, temel bileşen. js

00:58.290 --> 01:00.960
ve sorun bu.

01:00.960 --> 01:04.610
Tüm bu dosyaların o kadar büyük olmadığını, nispeten küçük olduklarını

01:04.610 --> 01:06.320
fark edeceksiniz.

01:06.320 --> 01:07.590
Bu elbette iyi ama

01:07.590 --> 01:11.010
burada çok fazla HTTP isteğimiz var.

01:11.010 --> 01:12.600
Şimdi bunda ne sorun var?

01:12.600 --> 01:15.070
Sağ taraftaki şelaleye bakarsak

01:15.070 --> 01:17.810
bu konudaki sorunu görebiliriz.

01:17.810 --> 01:20.330
Yapılması gereken her HTTP isteği

01:20.330 --> 01:22.470
elbette biraz zaman alır.

01:22.470 --> 01:24.480
Dosyaları indirmek zaman alıyor

01:24.480 --> 01:27.760
ancak çok büyük olmadıkları için bu bir sorun değil.

01:27.760 --> 01:31.390
Ancak her HTTP isteğinin temel bir ek yükü, her

01:31.390 --> 01:34.540
zaman aldığı temel bir süre vardır.

01:34.540 --> 01:38.570
Bu grafiklerin önünde gördüğünüz bu küçük kutu.

01:38.570 --> 01:41.250
Bu, tarayıcının bu isteği ayarlaması ve göndermesi

01:41.250 --> 01:43.910
için gereken süreye yakındır.

01:43.910 --> 01:46.280
Dolayısıyla, dosyanın gerçek indirilmesi

01:46.280 --> 01:49.600
nispeten hızlı olsa da, talebin oluşturulması, dosyayı

01:49.600 --> 01:52.860
sunan sunucuda işin yapılması ve bunların hepsi

01:52.860 --> 01:55.310
biraz zaman alır.

01:55.310 --> 01:57.890
Ve şimdi burada çok hızlı bir kurulumumuz var çünkü

01:57.890 --> 02:00.310
her şey bizim makinemizde gerçekleşiyor.

02:00.310 --> 02:03.020
Sonuçta yerel bir geliştirme sunucumuz var.

02:03.020 --> 02:06.160
Bunu web'e dağıtırsanız, bu kadar çok istek olması

02:06.160 --> 02:08.690
gerçekten çok fazla gecikmeye neden olabilir

02:08.690 --> 02:11.140
ve sadece yapılan HTTP isteklerinin miktarı

02:11.140 --> 02:14.760
nedeniyle projenizi yavaşlatabilir.

02:14.760 --> 02:17.280
Dolayısıyla, HTTP isteklerinin miktarını

02:17.280 --> 02:21.370
azaltacak bir çözüm bulabilirsek, bu harika olur.

02:21.370 --> 02:24.020
İşte bu noktada webpack devreye giriyor.

02:24.020 --> 02:28.190
Webpack'e gidebilirsiniz. js. org'u ziyaret ederek daha fazla bilgi edinebilirsiniz.

02:28.190 --> 02:30.290
Sonuç olarak webpack, dosyalarımızı

02:30.290 --> 02:33.750
bir araya getirmemize yardımcı olacak bir araçtır.

02:33.750 --> 02:36.530
Ve sayfalarında bulabileceğiniz kapsamlı ve

02:36.530 --> 02:39.980
kapsamlı belgelerini gerçekten tavsiye edebilirim.

02:39.980 --> 02:42.300
Eğer webpack hakkında her şeyi öğrenmek istiyorsanız.

02:42.300 --> 02:44.820
Bu derste, TypeScript ile bize yardımcı olan bazı seçilmiş

02:44.820 --> 02:46.563
özellikleri kullanacağız.

02:47.560 --> 02:49.850
Peki webpack tam olarak nedir?

02:49.850 --> 02:53.850
Bu bir paketlemedir ve yapı düzenleme aracı da diyebilirsiniz.

02:53.850 --> 02:56.190
Kodları bir araya getirerek HTTP isteklerinin

02:56.190 --> 02:59.560
miktarını azaltmamıza yardımcı olan bir araçtır.

02:59.560 --> 03:03.010
Böylece birden fazla dosyaya bölünmüş kod yazarız, ancak

03:03.010 --> 03:05.390
webpack daha sonra tüm bu dosyaları alır

03:05.390 --> 03:07.050
ve bir araya getirir.

03:07.050 --> 03:10.050
Ayrıca webpack daha fazlasını da yapabiliyor.

03:10.050 --> 03:13.920
Ayrıca kodumuzu optimize edecek ve örneğin CSS dosyalarında bize

03:13.920 --> 03:17.760
yardımcı olması için daha fazla derleme adımı, daha fazla derleme

03:17.760 --> 03:20.410
aracı eklememize de olanak tanıyacaktır.

03:20.410 --> 03:23.180
Ancak bu modülde inceleyeceğimiz konu bu değil çünkü

03:23.180 --> 03:26.220
webpack ve TypeScript'e odaklanmak istiyorum.

03:26.220 --> 03:28.710
Öncelikle webpack kullanmadığımız normal

03:28.710 --> 03:30.700
kurulumumuza bir göz atalım.

03:30.700 --> 03:32.800
Orada birden fazla TypeScript dosyamız

03:32.800 --> 03:34.870
var, ancak bu içe aktarmaları kullanırsak,

03:34.870 --> 03:36.920
birden fazla HTTP isteği alırız, bu da bahsettiğim

03:36.920 --> 03:40.220
nedenlerden dolayı o kadar da iyi değildir.

03:40.220 --> 03:43.450
Buna ek olarak, daha önce bakmadığım bir konu da

03:43.450 --> 03:47.670
büyük olasılıkla optimize edilmemiş kodumuz var, bu da mümkün

03:47.670 --> 03:51.290
olduğunca küçük olmadığı anlamına geliyor.

03:51.290 --> 03:53.330
İşlev adlarını kısaltarak kodu kesinlikle

03:53.330 --> 03:55.750
daha fazla optimize edebiliriz.

03:55.750 --> 03:58.690
Ve elbette, bunu otomatik olarak yapan bir araç istiyoruz,

03:58.690 --> 04:01.030
böylece okunamayan kodlarla manuel olarak

04:01.030 --> 04:03.000
çalışmak zorunda kalmayız.

04:03.000 --> 04:06.080
Bir geliştirici olarak mükemmel okunabilir kod yazmak istiyoruz.

04:06.080 --> 04:07.850
Ancak bu kodu kısaltan ve gerçekten

04:07.850 --> 04:10.740
mümkün olduğunca küçük hale getiren, mümkün olduğunca

04:10.740 --> 04:14.960
kısa değişken ve işlev adları kullanan bir aracımız olsaydı harika olurdu,

04:14.960 --> 04:19.130
böylece mümkün olduğunca az kod gönderirdik.

04:19.130 --> 04:22.940
Çünkü daha az kod, kullanıcıların daha hızlı indirebileceği anlamına gelir,

04:22.940 --> 04:25.530
bu da uygulamamızın makinelerimizde daha hızlı başlayabileceği

04:25.530 --> 04:27.600
anlamına gelir.

04:27.600 --> 04:29.440
Buna ek olarak, mevcut kurulumumuzda,

04:29.440 --> 04:32.860
döndürmemiz gereken ekstra bir paket olan lite-server

04:32.860 --> 04:35.150
adlı ekstra bir geliştirme sunucumuz

04:35.150 --> 04:36.860
var.

04:36.860 --> 04:39.320
Tek bir komutumuz olsaydı ve bu her şeyi yapsaydı,

04:39.320 --> 04:42.280
projemizi oluştursaydı, aynı zamanda projemizdeki bir

04:42.280 --> 04:45.360
dosyayı değiştirdiğimizde web sitemizi otomatik olarak

04:45.360 --> 04:48.170
yeniden yükleyen böyle bir sunucuyu döndürseydi, küçük

04:48.170 --> 04:50.713
bir bonus, güzel bir bonus olmazdı.

04:51.550 --> 04:54.270
İşte bu noktada webpack bize yardımcı olabilir.

04:54.270 --> 04:57.240
Kodumuzu paketliyor, böylece daha az içe aktarma yapıyoruz,

04:57.240 --> 05:00.670
bunun yerine gönderdiğimiz bazı kod paketlerimiz var, kodumuzu

05:00.670 --> 05:05.100
optimize etmemize, adı üstünde küçültmemize yardımcı oluyor, böylece daha

05:05.100 --> 05:06.717
az kod gönderiyoruz ve kullanıcılarımız

05:06.717 --> 05:10.130
daha az kod indiriyor.

05:10.130 --> 05:12.530
Ayrıca isterseniz kolayca daha fazla derleme

05:12.530 --> 05:15.750
adımı ekleyebiliriz, böyle bir geliştirme sunucusu ekleyebiliriz,

05:15.750 --> 05:19.270
ancak gerçekten istersek başka birçok şey de yapabiliriz ve bu konuda

05:19.270 --> 05:22.160
her şeyi öğrenmek istiyorsanız resmi webpack dokümanları

05:22.160 --> 05:24.130
gidilecek yerdir.

05:24.130 --> 05:27.880
Bununla birlikte, projemizde örnek bir kurulum görelim ve webpack'i

05:27.880 --> 05:30.433
orada nasıl kullanabileceğimizi öğrenelim.
