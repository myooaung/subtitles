WEBVTT

00:02.120 --> 00:04.590
講師：では､ 前回の講義でお話したように､ ウォッチモードは素晴らしいスタートですが､

00:04.590 --> 00:08.910
複数のTypeScriptファイルがある場合はどうすればいいのでしょうか｡

00:08.910 --> 00:18.370
アナリティクスもあったらどうでしょう｡  このファイルには､ サーバーに分析データを送信するための仮想的なファイルが含まれています｡

00:18.530 --> 00:24.240
さて､ ここで何でもいいので､ コンソールを入れてみます｡

00:24.240 --> 00:24.240
のログステートメントがありますが､

00:24.240 --> 00:29.180
もちろん､ 私が言ったように､ ここで分析サービスにHTTPリクエストを送信することもできます｡

00:29.180 --> 00:36.420
では､ このファイルをインデックスにインポートしたとしましょう｡

00:36.420 --> 00:36.420
htmlファイルです｡ 

00:36.420 --> 00:40.320
アナリティクスを指せば js はまだ存在しないが､

00:40.320 --> 00:44.760
コンパイル後に存在することになるため､

00:44.760 --> 00:50.900
この 2 つのファイルを読み込むことができます｡

00:50.900 --> 00:52.490
そのためには､ ファイルを指定せずにこのように

00:52.490 --> 01:05.823
tsc を実行するだけで､ プロジェクトフォルダ全体を監視し､ 変更のあった TypeScript ファイルを再コンパイルしてくれるような､ 一般的なウォッチモードがあればいいのだが｡

01:06.720 --> 01:08.960
それが可能であることがわかったのです｡ 

01:08.960 --> 01:23.710
そのためには､ TypeScriptで管理されるべきプロジェクトがここにあることをTypeScriptに伝える必要があります｡

01:23.710 --> 01:26.170
つまり､ 特定のファイルを指定しているわけではなく､

01:26.170 --> 01:31.230
tscを実行して､ それから--initを実行するだけです｡

01:31.230 --> 01:36.390
このコマンドを実行したプロジェクトを､ TypeScriptプロジェクトとして初期化します｡

01:36.390 --> 01:41.850
つまり､ このコマンドを実行したフォルダにあるものはすべてTypeScriptに伝えるので､

01:41.850 --> 01:50.550
VS Codeの内蔵ターミナルでこのコマンドを実行する前に正しいフォルダにナビゲートしておくことが重要なのです｡

01:50.550 --> 01:52.910
私のファイルがあるこのプロジェクトフォルダには､

01:52.910 --> 01:57.370
自動的にこのプロジェクトがTypeScriptで管理されるようになりました｡

01:57.370 --> 01:58.400
Enterを押すと､

01:58.400 --> 02:02.634
このtsconfigが作成されます｡ jsonファイルです｡ 

02:02.634 --> 02:09.950
これは基本的に､ このファイルがあるプロジェクトと､ このフォルダのすべてのサブフォルダがTypeScriptによって管理されるべきものであることを､

02:09.950 --> 02:14.710
TypeScriptに示すものである｡

02:14.710 --> 02:16.080
さて､ このファイルを見てみると､

02:16.080 --> 02:26.380
たくさんのオプションがあります｡ そのほとんどはコメントアウトされていて､ 設定できることがわかるようになっています｡

02:26.380 --> 02:29.040
早速､ 潜入してみましょう｡ 

02:29.040 --> 02:31.610
とりあえず､ このファイルを閉じて､

02:32.800 --> 02:35.100
この結果がどうなるか見てみましょう｡

02:35.100 --> 02:36.550
この結果､ 特定のファイルを指定しなくても､

02:36.550 --> 02:42.610
このようにtscだけを実行できるようになりました｡

02:42.610 --> 02:45.550
そして､ これはTypeScriptに全てのTypeScriptファイルをコンパイルするように指示し､

02:45.550 --> 02:53.090
全ての.NET Frameworkをコンパイルします｡

02:53.090 --> 02:53.090
このプロジェクトにあるファイルを見つけることができるので､

02:54.770 --> 03:00.530
ここでEnterキーを押すと､ ほら､ しばらく時間がかかります｡

03:00.530 --> 03:00.530
js

03:00.530 --> 03:02.620
ファイルと本アプリの jsファイルです｡ 

03:02.620 --> 03:05.160
さて､ 分析です｡  jsファイルは､ アナリティクスがあることがわかったので､

03:05.160 --> 03:10.060
TypeScriptによって作成されただけです｡

03:10.060 --> 03:10.060
ts

03:10.060 --> 03:14.730
ファイルをコンパイルすると､ 先ほど言ったように､ プロジェクト内のすべての TypeScript ファイルがコンパイルされるようになります｡

03:14.730 --> 03:17.660
もちろん､ ウォッチモードとの組み合わせも可能です｡ 

03:17.660 --> 03:20.630
先ほど紹介したように､ tsc -wまたは--watchを実行すると､

03:20.630 --> 03:26.970
これですべてのTypeScriptファイルに対してウォッチモードになる｡

03:26.970 --> 03:29.590
そのため､ 現在では､ そのうちの1つを変更して保存すると､

03:29.590 --> 03:31.920
必ず再コンパイルされるようになっています｡

03:31.920 --> 03:33.840
変更されたファイルを再コンパイルするため､

03:33.840 --> 03:37.800
JavaScriptファイルに反映されたすべての変更が反映されます｡

03:37.800 --> 03:38.633
そして今､ ここにある｡ 

03:38.633 --> 03:44.463
自分のページに戻ると､ 今度はアナリティクスで送信データも見ることができます｡

03:44.463 --> 03:44.463
tsファイルもコンパイルされた｡ 
