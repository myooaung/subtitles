WEBVTT

00:02.050 --> 00:04.090
Instructeur: Dus welk nadeel hebben we?

00:04.090 --> 00:06.030
Dit is het project waaraan we

00:06.030 --> 00:08.020
werkten, opgesplitst in meerdere

00:08.020 --> 00:12.390
bestanden met behulp van deze ES6-module-importen hier.

00:12.390 --> 00:15.620
Laten we dit project nu daadwerkelijk bouwen en

00:15.620 --> 00:18.400
daarvoor kunnen we, net als eerder, npm-start

00:18.400 --> 00:21.930
draaien om de lite-server op te starten.

00:21.930 --> 00:24.710
En natuurlijk, heel belangrijk in een nieuw

00:24.710 --> 00:26.367
tabblad, alle run tsc-dash

00:27.820 --> 00:31.430
om TypeScript compilatie in watch mode op te starten.

00:31.430 --> 00:35.590
Dit geeft ons ons project en als we nu het tabblad Netwerk openen in de

00:35.590 --> 00:39.570
ontwikkelaarstools van de browser en dit bestand opnieuw laden,

00:39.570 --> 00:42.360
zien we het nadeel dat we hier hebben of het probleem

00:42.360 --> 00:44.840
dat we hebben met deze opzet.

00:44.840 --> 00:47.490
We zien een hoop HTTP verzoeken.

00:47.490 --> 00:49.160
Je kunt de laatste negeren, deze

00:49.160 --> 00:51.380
komen van onze ontwikkelingsserver.

00:51.380 --> 00:58.290
Maar dit zijn allemaal onze verzoeken om te appen. js, project-input.

00:58.290 --> 00:58.290
js, project-lijst. js, basiscomponent. js

00:58.290 --> 01:00.960
en op dat is het probleem.

01:00.960 --> 01:04.610
Je zult merken dat al deze bestanden niet zo groot zijn,

01:04.610 --> 01:06.320
ze zijn relatief klein.

01:06.320 --> 01:07.590
Dus dat is natuurlijk

01:07.590 --> 01:11.010
prima, maar we hebben veel HTTP verzoeken hier.

01:11.010 --> 01:12.600
Wat is het probleem daarmee?

01:12.600 --> 01:15.070
Het probleem daarmee is te zien als we

01:15.070 --> 01:17.810
kijken naar die waterval hier rechts.

01:17.810 --> 01:20.330
Elk HTTP-verzoek dat moet worden gedaan

01:20.330 --> 01:22.470
kost natuurlijk een beetje tijd.

01:22.470 --> 01:24.480
Het duurt even om de bestanden te downloaden,

01:24.480 --> 01:27.760
maar aangezien ze niet zo groot zijn, is dat geen probleem.

01:27.760 --> 01:31.390
Maar elk HTTP verzoek heeft een basis overhead,

01:31.390 --> 01:34.540
een basis duur die altijd duurt.

01:34.540 --> 01:38.570
Dit kleine doosje dat je voor deze grafieken ziet.

01:38.570 --> 01:41.250
Dat is ongeveer de tijd die de browser nodig heeft

01:41.250 --> 01:43.910
om dat verzoek op te stellen en te verzenden.

01:43.910 --> 01:46.280
Dus terwijl het eigenlijke downloaden van

01:46.280 --> 01:49.600
het bestand misschien relatief snel gaat, kost het opstellen

01:49.600 --> 01:52.860
van het verzoek, het werk op de server, die het bestand serveert

01:52.860 --> 01:55.310
en dat alles enige tijd.

01:55.310 --> 01:57.890
En nu hebben we een zeer snelle opstelling omdat

01:57.890 --> 02:00.310
het allemaal op onze machine gebeurt.

02:00.310 --> 02:03.020
We hebben tenslotte een lokale ontwikkelingsserver.

02:03.020 --> 02:06.160
Als je dat op het web implementeert, kunnen zoveel

02:06.160 --> 02:08.690
verzoeken echt veel vertraging veroorzaken

02:08.690 --> 02:11.140
en je project vertragen, alleen al door

02:11.140 --> 02:14.760
het grote aantal HTTP-verzoeken.

02:14.760 --> 02:17.280
Dus als we een oplossing kunnen vinden om dat

02:17.280 --> 02:21.370
aantal HTTP-verzoeken te verminderen, zou dat geweldig zijn.

02:21.370 --> 02:24.020
En daar komt webpack om de hoek kijken.

02:24.020 --> 02:28.190
Je kunt naar webpack gaan. js. org, om er meer over te weten te komen.

02:28.190 --> 02:30.290
Uiteindelijk is webpack een hulpmiddel

02:30.290 --> 02:33.750
dat ons helpt onze bestanden te bundelen.

02:33.750 --> 02:36.530
En ik kan hun uitgebreide en uitgebreide

02:36.530 --> 02:39.980
documentatie op hun pagina echt aanbevelen.

02:39.980 --> 02:42.300
Als je alles wilt leren over webpack.

02:42.300 --> 02:44.820
In deze cursus zullen we enkele geselecteerde functies gebruiken

02:44.820 --> 02:46.563
die ons helpen met TypeScript.

02:47.560 --> 02:49.850
Dus wat is webpack precies?

02:49.850 --> 02:53.850
Het is een bundeling, en je zou kunnen zeggen bouw orkestratie tool.

02:53.850 --> 02:56.190
Het is een hulpmiddel dat ons helpt het aantal

02:56.190 --> 02:59.560
HTTP-verzoeken te verminderen door code te bundelen.

02:59.560 --> 03:03.010
Dus dat we code schrijven opgesplitst over meerdere bestanden,

03:03.010 --> 03:05.390
maar webpack neemt dan al deze bestanden

03:05.390 --> 03:07.050
en bundelt ze samen.

03:07.050 --> 03:10.050
En bovendien kan webpack meer.

03:10.050 --> 03:13.920
Het zal ook onze code optimaliseren en het stelt ons ook in staat om

03:13.920 --> 03:17.760
meer bouwstappen toe te voegen, meer bouwtools, bijvoorbeeld om

03:17.760 --> 03:20.410
ons te helpen met CSS-bestanden enzovoort.

03:20.410 --> 03:23.180
Dat is echter niet wat we in deze module zullen bekijken,

03:23.180 --> 03:26.220
want ik wil me concentreren op webpack en TypeScript.

03:26.220 --> 03:28.710
Laten we dus eerst eens kijken naar onze normale opstelling

03:28.710 --> 03:30.700
waarbij we webpack niet gebruiken.

03:30.700 --> 03:32.800
Daar hebben we meerdere TypeScript-bestanden,

03:32.800 --> 03:34.870
maar als we vervolgens deze imports gebruiken,

03:34.870 --> 03:36.920
krijgen we meerdere HTTP-verzoeken, wat

03:36.920 --> 03:40.220
niet zo geweldig is om de redenen die ik noemde.

03:40.220 --> 03:43.450
Bovendien, een onderwerp waar ik nog niet eerder naar

03:43.450 --> 03:47.670
gekeken heb, is dat we hoogstwaarschijnlijk ook ongeoptimaliseerde

03:47.670 --> 03:51.290
code hebben, waardoor die niet zo klein mogelijk is.

03:51.290 --> 03:53.330
We kunnen code zeker meer optimaliseren

03:53.330 --> 03:55.750
door functienamen en dergelijke in te korten.

03:55.750 --> 03:58.690
En natuurlijk willen we een hulpmiddel dat dit automatisch

03:58.690 --> 04:01.030
doet, zodat we niet al te handmatig met onleesbare

04:01.030 --> 04:03.000
code hoeven te werken.

04:03.000 --> 04:06.080
We willen als ontwikkelaar perfect leesbare code schrijven.

04:06.080 --> 04:07.850
Maar het zou geweldig zijn als we

04:07.850 --> 04:10.740
een hulpmiddel hadden dat deze code vervolgens inkort

04:10.740 --> 04:14.960
en echt zo klein mogelijk maakt, met zo kort mogelijke namen voor variabelen

04:14.960 --> 04:17.170
en functies, zodat we zo weinig mogelijk

04:17.170 --> 04:19.130
code verzenden.

04:19.130 --> 04:22.940
Want minder code betekent dat gebruikers het sneller kunnen downloaden,

04:22.940 --> 04:25.530
waardoor onze applicatie sneller kan opstarten

04:25.530 --> 04:27.600
op onze machines.

04:27.600 --> 04:29.440
En daarnaast, onze huidige opstelling,

04:29.440 --> 04:32.860
hebben we deze extra ontwikkelingsserver, lite-server,

04:32.860 --> 04:36.860
wat een extra pakket is dat we moeten opstarten.

04:36.860 --> 04:39.320
Het zou een kleine bonus zijn, een mooie bonus

04:39.320 --> 04:42.280
als we één commando hadden en dat zou alles doen, ons

04:42.280 --> 04:45.360
project bouwen, maar ook zo'n server opstarten, die

04:45.360 --> 04:48.170
automatisch onze website herlaadt wanneer we een

04:48.170 --> 04:50.713
bestand in ons project veranderen.

04:51.550 --> 04:54.270
Nou, en dat is waar webpack ons kan helpen.

04:54.270 --> 04:57.240
Het bundelt onze code, zodat we minder imports hebben

04:57.240 --> 05:00.670
in plaats van wat, nou ja codebundels die we verschepen, het

05:00.670 --> 05:05.100
helpt ons onze code te optimaliseren, minificeren zoals dat heet, zodat we

05:05.100 --> 05:06.717
minder code verschepen en onze

05:06.717 --> 05:10.130
gebruikers minder code hoeven te downloaden.

05:10.130 --> 05:12.530
En we kunnen ook gemakkelijk meer bouwstappen toevoegen

05:12.530 --> 05:15.750
als u dat wilt, we kunnen zo'n ontwikkelingsserver toevoegen,

05:15.750 --> 05:19.270
maar we kunnen ook veel andere dingen doen als we dat echt willen en de officiële

05:19.270 --> 05:22.160
webpack docs zijn de plaats om naartoe te gaan als u er alles

05:22.160 --> 05:24.130
over wilt leren.

05:24.130 --> 05:27.880
Laten we daarmee een voorbeeld setup zien in ons project en laten we

05:27.880 --> 05:30.433
leren hoe we daar webpack kunnen gebruiken.
