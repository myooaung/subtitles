WEBVTT

00:02.200 --> 00:04.080
Instrutor: Tempo para outro novo arquivo.

00:04.080 --> 00:09.080
Vou mudar o nome do aplicativo. s aqui para os pseudônimos do sindicato. ts, e acrescente um novo

00:11.100 --> 00:13.760
aplicativo. ts onde podemos recomeçar

00:13.760 --> 00:16.370
do zero, fechar o outro arquivo.

00:16.370 --> 00:20.660
E agora aqui eu quero mergulhar um pouco mais fundo nas funções.

00:20.660 --> 00:22.640
Agora, é claro, com funções já trabalhadas.

00:22.640 --> 00:24.940
Por exemplo, aqui no arquivo de pseudônimos do sindicato

00:24.940 --> 00:26.340
com a função de combinação.

00:26.340 --> 00:29.260
E, por exemplo, você viu que para as funções você

00:29.260 --> 00:32.520
pode atribuir tipos aos parâmetros das funções.

00:32.520 --> 00:34.310
Acontece que há um pouco mais que

00:34.310 --> 00:36.483
você pode fazer com funções e tipos.

00:37.590 --> 00:40.430
Para isso vou recriar minha função de adição,

00:40.430 --> 00:43.373
que simplesmente aceita números, não cordas.

00:44.270 --> 00:48.340
O que faz uma coisa simples, ele retorna n um mais n dois, portanto não é

00:48.340 --> 00:49.513
muito complicado.

00:51.004 --> 00:53.740
Como mencionei, podemos atribuir tipos a parâmetros,

00:53.740 --> 00:55.180
isso não é novidade.

00:55.180 --> 00:57.030
A função geral, no entanto,

00:57.030 --> 01:01.050
tem um outro tipo importante, tem um tipo de retorno.

01:01.050 --> 01:03.990
E aqui o tipo de retorno é inferido pelo TypeScript.

01:03.990 --> 01:06.490
Podemos vê-lo se pairarmos sobre a adição.

01:06.490 --> 01:10.760
Aqui no final, os dois pontos após a lista de parâmetros, isto

01:10.760 --> 01:14.190
aqui, descreve o tipo de retorno da função.

01:14.190 --> 01:16.800
Portanto, o tipo do valor retornado.

01:16.800 --> 01:20.020
Aqui, eu devolvo a adição de n um e n dois.

01:20.020 --> 01:23.050
E como ambas as entradas são números, o TypeScript é capaz

01:23.050 --> 01:24.930
de inferir que o resultado disto

01:24.930 --> 01:26.770
será um número, e como o retornamos,

01:26.770 --> 01:28.820
que o tipo de retorno destes dados de

01:28.820 --> 01:30.830
função será um número.

01:30.830 --> 01:33.320
Se você as concatenasse como cordas aqui,

01:33.320 --> 01:35.363
com toString por exemplo, então

01:36.550 --> 01:39.030
o TypeScript inferiria corretamente

01:39.030 --> 01:41.900
que retornamos uma corda aqui.

01:41.900 --> 01:44.350
Agora, é claro, podemos sempre atribuir explicitamente

01:44.350 --> 01:46.910
um tipo de retorno aqui, adicionando dois pontos após

01:46.910 --> 01:48.490
a lista de parâmetros, e depois o

01:48.490 --> 01:51.263
tipo que você quer retornar, como número.

01:52.850 --> 01:54.560
Este seria o mesmo tipo de inferido.

01:54.560 --> 01:56.760
Se eu, por exemplo, definisse isto como

01:56.760 --> 02:00.020
string, eu receberia um erro aqui, porque obviamente meu cálculo

02:00.020 --> 02:03.540
aqui não corresponde ao meu tipo de retorno descrito.

02:03.540 --> 02:06.480
Agora, assim como com as variáveis, é uma boa idéia deixar

02:06.480 --> 02:10.080
o TypeScript fazer seu trabalho com relação à inferência de tipo.

02:10.080 --> 02:12.610
E se você não tiver nenhuma razão específica

02:12.610 --> 02:14.810
para definir explicitamente o tipo,

02:14.810 --> 02:17.090
você não deve, portanto, definir o tipo

02:17.090 --> 02:20.470
e, em vez disso, deixar o TypeScript inferir o tipo.

02:20.470 --> 02:22.660
Com relação aos tipos de retorno, porém, há

02:22.660 --> 02:25.910
um tipo interessante que não vimos antes, e que pode ser novinho

02:25.910 --> 02:27.530
em folha para você se tiver que experimentar

02:27.530 --> 02:30.240
com outras linguagens de programação.

02:30.240 --> 02:31.200
Porque é um tipo que

02:31.200 --> 02:33.250
não existe realmente em JavaScript.

02:33.250 --> 02:35.180
É o tipo vazio.

02:35.180 --> 02:38.160
Digamos que temos o método PrintResultado.

02:38.160 --> 02:41.190
Aí temos um argumento numérico, que

02:41.190 --> 02:44.120
deveria ser um, bem, número.

02:44.120 --> 02:47.510
E lá dentro, quero consolar. número do registro.

02:47.510 --> 02:49.450
E eu quero consolar. logá-lo como parte

02:49.450 --> 02:52.150
de um fio, onde eu digo resultado mais número.

02:52.150 --> 02:53.670
Portanto, agora isto será concatenado

02:53.670 --> 02:56.090
a um longo fio, e será produzido.

02:56.090 --> 02:57.777
E agora eu posso chamar a PrintResult.

02:57.777 --> 03:01.020
E, por exemplo, passe por isso o resultado da minha

03:01.020 --> 03:05.010
chamada de função de adição, com mais cinco, digamos 12.

03:05.010 --> 03:07.670
Portanto, estou executando adicionar aqui, com dois números.

03:07.670 --> 03:10.160
E o resultado disso, o que acrescenta retorno, é então

03:10.160 --> 03:13.130
passado como um argumento para a impressãoResultado.

03:13.130 --> 03:15.780
E isso deve ser impresso no console.

03:15.780 --> 03:19.150
Se agora compilarmos isso e depois olharmos isso em

03:19.150 --> 03:21.110
nossa página, ou em nossa página

03:21.110 --> 03:24.280
aqui, vemos o resultado 17, o que faz sentido.

03:24.280 --> 03:25.660
Agora o interessante aqui é o

03:25.660 --> 03:27.640
tipo de retorno de impressãoResultado.

03:27.640 --> 03:30.353
Qual seria o tipo de retorno aqui?

03:31.240 --> 03:33.240
Então talvez você pense que é um fio, porque

03:33.240 --> 03:35.150
eu estou criando um fio aqui dentro.

03:35.150 --> 03:37.360
Mas tenha em mente que não vamos devolver isto.

03:37.360 --> 03:39.400
Não vamos devolver nada aqui.

03:39.400 --> 03:42.010
E, portanto, esta função de impressãoResultar

03:42.010 --> 03:44.990
aqui tem um tipo especial de retorno, nulo.

03:44.990 --> 03:47.910
Agora você pode notar o tipo de retorno nulo de outras

03:47.910 --> 03:49.830
linguagens de programação.

03:49.830 --> 03:52.230
Aqui você tem algo parecido com isto.

03:52.230 --> 03:53.940
O JavaScript não sabe realmente isso,

03:53.940 --> 03:56.740
ou não tem realmente um nome para esta situação.

03:56.740 --> 03:58.590
O TypeScript, entretanto, faz.

03:58.590 --> 04:01.840
Portanto, de fato, esta função aqui tem um tipo de retorno de vazio.

04:01.840 --> 04:04.065
E, é claro, não é necessário especificá-lo aqui.

04:04.065 --> 04:06.440
A inferência do TypeScript fez seu trabalho.

04:06.440 --> 04:07.630
Mas quero deixar bem claro

04:07.630 --> 04:09.610
que isto tem o tipo de retorno vazio,

04:09.610 --> 04:13.730
e é por isso que estou acrescentando aqui, para fins de demonstração.

04:13.730 --> 04:17.070
Agora, o vazio realmente significa apenas que esta

04:17.070 --> 04:21.020
função não tem uma declaração de retorno, não devolve nada.

04:21.020 --> 04:24.540
Ela completa com sucesso, faz seu trabalho.

04:24.540 --> 04:28.170
Ele executa seu código, não produz um erro

04:28.170 --> 04:32.550
ou algo parecido, mas depois não devolve nada.

04:32.550 --> 04:34.990
Esse é o tipo de retorno nulo.

04:34.990 --> 04:37.330
Agora tecnicamente em JavaScript, é claro, se pudéssemos

04:37.330 --> 04:39.490
consolar. registre o resultado

04:39.490 --> 04:43.550
da impressãoResultado aqui e eu agora compenso isto, e

04:43.550 --> 04:46.270
vemos o que sai aqui na página.

04:46.270 --> 04:49.480
Vemos que o indefinido é devolvido por isso.

04:49.480 --> 04:51.540
Portanto, tecnicamente, e isso

04:51.540 --> 04:56.450
é realmente interessante, em JavaScript, se usamos o valor de retorno de uma

04:56.450 --> 05:00.830
função que não retorna nada, ficamos indefinidos como um valor.

05:00.830 --> 05:03.730
E como você provavelmente sabe, indefinido em JavaScript

05:03.730 --> 05:05.720
é na verdade um valor real.

05:05.720 --> 05:08.430
Um valor que você, por exemplo, também obtém

05:08.430 --> 05:11.880
se tentar acessar um imóvel em um objeto que não existe.

05:11.880 --> 05:13.670
Portanto, aqui ficamos nulos,

05:13.670 --> 05:16.680
mesmo que tecnicamente isto retorne indefinido.

05:16.680 --> 05:19.020
E agora, para torná-lo ainda mais

05:19.020 --> 05:23.300
confuso, indefinido na verdade é um tipo em TypeScript.

05:23.300 --> 05:25.640
Você pode ter indefinido como um tipo.

05:25.640 --> 05:29.570
E, por exemplo, uma variável novinha em folha, algumValor,

05:30.770 --> 05:33.270
pode receber um tipo indefinido e você

05:33.270 --> 05:34.700
não receberá um erro.

05:34.700 --> 05:37.380
Esta variável será agora apenas indefinida para sempre.

05:37.380 --> 05:39.970
Quão útil isso pode ser é uma questão diferente.

05:39.970 --> 05:43.720
Mas não definido é um tipo válido em TypeScript.

05:43.720 --> 05:46.600
No entanto, aqui você vê que estamos recebendo um erro.

05:46.600 --> 05:48.010
E estamos recebendo um

05:48.010 --> 05:51.690
erro porque uma função não pode retornar indefinida.

05:51.690 --> 05:53.300
Tecnicamente, é claro que sim,

05:53.300 --> 05:56.850
mas o TypeScript pensa em funções um pouco diferentes.

05:56.850 --> 06:00.200
Você deve usar o vazio aqui se uma função não retorna nada,

06:00.200 --> 06:04.300
e não indefinido, porque com o vazio você deixa claro que esta função

06:04.300 --> 06:05.940
deliberadamente não tem uma

06:05.940 --> 06:08.260
declaração de retorno.

06:08.260 --> 06:10.690
Se você disser que não está definido aqui, então

06:10.690 --> 06:13.460
o TypeScript espera que você tenha uma declaração

06:13.460 --> 06:17.080
de retorno onde você simplesmente não devolva um valor.

06:17.080 --> 06:18.660
Essa é a diferença técnica.

06:18.660 --> 06:20.670
Agora você vê que não estou recebendo um erro.

06:20.670 --> 06:22.860
De uma perspectiva JavaScript,

06:22.860 --> 06:26.610
isto é basicamente o mesmo que isto.

06:26.610 --> 06:29.050
Mas o TypeScript faz aqui uma diferenciação

06:29.050 --> 06:31.240
e, portanto, nulo é o tipo que você quer usar

06:31.240 --> 06:33.760
se não tiver uma declaração de retorno.

06:33.760 --> 06:37.200
Indefinido, que raramente será necessário, para ser honesto,

06:37.200 --> 06:41.100
pode ser usado se você retornar sem devolver um valor real.

06:41.100 --> 06:45.750
Mas novamente, este é um caso de uso raro, e você poderia usar o vazio com uma declaração

06:45.750 --> 06:47.560
de retorno como esta também.

06:47.560 --> 06:49.040
Você não receberia um erro.

06:49.040 --> 06:50.610
E, por padrão, você usaria

06:50.610 --> 06:52.770
sempre o vazio neste cenário.

06:52.770 --> 06:54.680
A menos que você realmente tenha uma

06:54.680 --> 06:56.750
função que deva produzir indefinida,

06:56.750 --> 06:58.620
e quer ser claro a respeito disso.

06:58.620 --> 07:01.430
Mas, mais uma vez, isso raramente será o caso.

07:01.430 --> 07:03.620
Só quero ter certeza aqui, que você entende

07:03.620 --> 07:05.870
a diferença entre o vazio e o indefinido,

07:05.870 --> 07:08.160
que o vazio é o padrão que você usará em praticamente

07:08.160 --> 07:10.930
todos os cenários onde você tem uma função que não

07:10.930 --> 07:13.450
retorna um valor, e que você pode atribuí-lo

07:13.450 --> 07:15.770
explicitamente.

07:15.770 --> 07:18.780
Mas é claro, o TypeScript também é capaz de inferir isso, como

07:18.780 --> 07:20.440
seria possível aqui também.

07:20.440 --> 07:23.083
Eu acabei de acrescentar isto para fins de demonstração aqui.
