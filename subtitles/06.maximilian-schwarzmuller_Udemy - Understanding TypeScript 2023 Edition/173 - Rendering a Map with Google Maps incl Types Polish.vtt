WEBVTT

00:02.120 --> 00:05.300
Człowiek: Więc jak możemy teraz wyprowadzić współrzędne na mapę?

00:05.300 --> 00:08.180
Do tego znów użyjemy API Google.

00:08.180 --> 00:10.690
Jeśli wyszukujesz Google JavaScript

00:10.690 --> 00:13.810
Maps, lub Google JS Maps, znajdziesz oficjalne

00:13.810 --> 00:16.970
docs dla google JavaScript Google Maps API.

00:16.970 --> 00:19.660
A tutaj dowiesz się jak możesz wykorzystać Google Maps w swojej

00:19.660 --> 00:22.020
aplikacji internetowej do renderowania mapy.

00:22.020 --> 00:24.720
I jest to naprawdę proste i łatwe.

00:24.720 --> 00:27.280
Przede wszystkim musimy dodać tutaj

00:27.280 --> 00:31.720
ten skrypt, który doda ten Google Maps SDK do naszej aplikacji.

00:31.720 --> 00:34.220
Więc po prostu złap ten skrypt i dodaj

00:34.220 --> 00:38.210
go do swojego pliku index html, powyżej swojego skryptu.

00:38.210 --> 00:40.670
Teraz ważne, nie instalujemy tego NPM, ponieważ

00:40.670 --> 00:42.920
nie jest on opublikowany w NPM, stąd używamy

00:42.920 --> 00:45.900
tego linku CDN, który ściąga skrypt, bezpośrednio

00:45.900 --> 00:48.140
z serwerów Google.

00:48.140 --> 00:51.560
I tutaj musimy skonfigurować nasz API_KEY.

00:51.560 --> 00:54.390
Teraz to jest oczywiście API_KEY, które mamy

00:54.390 --> 00:57.430
już tutaj w pliku typescript, więc możemy po

00:57.430 --> 01:02.170
prostu skopiować to do index html i zastąpić YOUR_API_KEY tym.

01:02.170 --> 01:06.120
A także pozbądź się tego "&amp;callback=initMap" na końcu, to

01:06.120 --> 01:07.150
wywołałoby funkcję,

01:07.150 --> 01:10.240
gdy tylko ta mapa zostanie załadowana, lub gdy

01:10.240 --> 01:13.430
ten SDK zostanie załadowany, a to nie jest coś, co

01:13.430 --> 01:14.843
chcę tutaj.

01:15.840 --> 01:19.760
Tak więc, z tym, ładujemy ten SDK i teraz możemy

01:19.760 --> 01:24.250
go użyć, i tutaj będziemy mieli problem.

01:24.250 --> 01:26.210
Chcę użyć go do renderowania mapy, a

01:26.210 --> 01:28.710
renderowanie mapy jest właściwie proste.

01:28.710 --> 01:31.070
W oficjalnych dokumentach widzimy, że w końcu musimy zainicjować

01:31.070 --> 01:33.870
ten google. mapy. Funkcja konstruktora

01:33.870 --> 01:36.870
mapy, przekazać do niej środek, który jest

01:36.870 --> 01:38.960
w zasadzie...

01:38.960 --> 01:41.720
Ta para współrzędnych, które otrzymujemy z tyłu, i dodaj

01:41.720 --> 01:43.250
poziom powiększenia.

01:43.250 --> 01:45.820
Więc możemy po prostu skopiować to, a następnie

01:45.820 --> 01:48.710
tutaj, gdy mamy już współrzędne, wykonać ten

01:48.710 --> 01:50.010
kod i być może przechowywać

01:50.010 --> 01:53.750
mapę tutaj w stałej o nazwie "Map. Ale oczywiście otrzymujemy tutaj błąd.

01:53.750 --> 01:55.117
"Cannot find name google"

01:55.117 --> 01:57.600
i to ma sens, nie będzie to dostępne

01:57.600 --> 02:01.320
globalnie, ale typescript tego nie wie.

02:01.320 --> 02:03.380
Będzie on dostępny globalnie, ze względu

02:03.380 --> 02:06.300
na ten JavaScript SDK, który importujemy.

02:06.300 --> 02:08.343
Ale oczywiście typescript tego nie wie.

02:09.390 --> 02:12.270
Dowiesz się co możesz tam zrobić,

02:12.270 --> 02:14.200
możesz oczywiście użyć

02:14.200 --> 02:19.200
"declare var google" i ustawić to na any.

02:19.990 --> 02:21.020
W ten sposób mówisz maszynopisowi:

02:21.020 --> 02:22.887
"Jest dobrze, to będzie istnieć, nie martw się. Możemy to zrobić, a błąd zniknie.

02:22.887 --> 02:26.480
Teraz możemy również użyć naszych współrzędnych tutaj,

02:26.480 --> 02:29.060
zamiast tych twardo zakodowanych, a jeśli

02:29.060 --> 02:31.370
chcemy również renderować marker,

02:31.370 --> 02:33.480
to jest to również możliwe.

02:33.480 --> 02:36.430
W oficjalnych dokumentach, wystarczy kliknąć na ,,Dodawanie

02:36.430 --> 02:37.930
mapy z markerem,, dowiadujemy

02:37.930 --> 02:39.517
się, że dodanie markera jest

02:39.517 --> 02:41.520
proste po prostu używamy stworzonej

02:41.520 --> 02:44.600
mapy, i tworzymy marker za pomocą tego polecenia, i wskazujemy

02:44.600 --> 02:47.223
na tę mapę.

02:49.040 --> 02:50.950
Więc po prostu skopiujemy ten fragment

02:50.950 --> 02:52.980
kodu tutaj, a z powrotem w naszym kodzie,

02:52.980 --> 02:56.130
po utworzeniu mapy, tworzę mój marker w ten sposób, a pozycja

02:56.130 --> 02:59.160
tutaj ponownie to moje współrzędne.

02:59.160 --> 03:01.160
Więc to będzie teraz renderować

03:01.160 --> 03:04.173
mapę i umieścić na niej marker.

03:05.040 --> 03:06.600
Pozostaje nam tylko upewnić

03:06.600 --> 03:08.580
się, że ta mapa jest renderowana

03:08.580 --> 03:10.350
we właściwym miejscu.

03:10.350 --> 03:12.350
Domyślnie szuka elementu z literą I. D. "mapa" i to właśnie

03:12.350 --> 03:14.010
mamy tutaj.

03:14.010 --> 03:16.670
Jeśli jednak wybrałeś inną I. D. tutaj, upewnij się,

03:16.670 --> 03:18.720
że dostosujesz to w swoim kodzie typescript.

03:18.720 --> 03:20.470
Dzięki temu,

03:20.470 --> 03:23.473
jeśli zapiszemy to, skompiluje się bez

03:24.610 --> 03:26.890
błędów, a teraz, jeśli wpiszę

03:26.890 --> 03:30.640
tutaj adres, powinien wyrenderować to.

03:30.640 --> 03:33.450
Więc to działa, i możemy dostosować poziom zoomu tutaj,

03:33.450 --> 03:35.320
aby być powiększony trochę więcej, na

03:35.320 --> 03:38.650
przykład zmienił go na 16, a teraz, jeśli spróbujemy to możemy zobaczyć

03:38.650 --> 03:40.370
to trochę wyraźniej.

03:40.370 --> 03:42.910
Ale działa i tyle możemy powiedzieć.

03:42.910 --> 03:45.640
Możemy przewijać, i korzystać z tej mapy.

03:45.640 --> 03:47.480
To wszystko jest fajne, ale nie jest optymalne.

03:47.480 --> 03:50.420
Oczywiście działa, dzięki "declare var

03:50.420 --> 03:53.340
google" nie dostajemy żadnych błędów.

03:53.340 --> 03:56.760
Ale nie dostajemy też żadnego wsparcia typu.

03:56.760 --> 03:58.810
JEŚLI wprowadzę błąd,

03:58.810 --> 04:01.550
jeśli np. odwołam się do ". map" zamiast ". map" kompiluje się bez problemów, a następnie ulega

04:01.550 --> 04:06.730
awarii tylko w produkcji.

04:06.730 --> 04:08.860
Jeśli próbuję renderować mapę.

04:08.860 --> 04:11.280
Teraz dostaję tutaj błąd, złapany przez nasz handler błędów.

04:11.280 --> 04:13.150
Więc to oczywiście nie jest to, czego chcemy.

04:13.150 --> 04:16.493
Chcemy wsparcia typu, chcemy obsługiwać błędy śmietnikowe, takie

04:17.470 --> 04:19.770
jak ten, podczas rozwoju, a nie w runtime.

04:19.770 --> 04:22.880
Jak więc zapewnić, że maszynopis zna Google Maps?

04:22.880 --> 04:27.380
Typy na ratunek.

04:27.380 --> 04:31.080
Jeśli wyszukujesz "typy google maps", znajdziesz różne pakiety,

04:31.080 --> 04:32.470
które dodają typy dla,

04:32.470 --> 04:34.160
cóż, Google Maps.

04:34.160 --> 04:37.350
Teraz nie zainstalowaliśmy pakietu Google Maps przez NPM,

04:37.350 --> 04:38.800
ale nadal możemy zainstalować

04:38.800 --> 04:41.050
typy dla tego pakietu przez NPM.

04:41.050 --> 04:44.130
I tutaj pójdę po ten pierwszy pakiet i po prostu zainstaluję

04:44.130 --> 04:46.160
go do naszego projektu.

04:46.160 --> 04:48.790
Wróćmy więc, szybki serwer deweloperski,

04:48.790 --> 04:51.560
i uruchommy "npm install --save-dev "@types/googlemaps",

04:51.560 --> 04:54.030
jedno słowo.

04:54.030 --> 04:56.400
Taka była nazwa tego pakietu.

04:58.613 --> 05:01.560
Spowoduje to teraz zainstalowanie globalnych typów dla tego pakietu.

05:01.560 --> 05:03.303
Więc teraz, jeśli ponownie uruchomię

05:04.200 --> 05:08.410
to za pomocą NPM start, zobaczmy, czy mamy lepszą sytuację.

05:08.410 --> 05:11.500
Jeśli usunę tę rzecz "declare

05:11.500 --> 05:15.180
var" tutaj, lub skomentuję ją.

05:15.180 --> 05:18.090
Nadal kompiluje, teraz ta rzecz google maps tutaj jest wykrywana,

05:18.090 --> 05:19.940
a jeśli próbuję uzyskać dostęp do ". map" tutaj, dostaję błąd, dostaję

05:19.940 --> 05:23.290
również autouzupełnianie teraz i widzi, "Tak, istnieje

05:23.290 --> 05:27.010
coś takiego jak mapy. Mówi mi również, że ten konstruktor

05:27.010 --> 05:29.880
mapy, potrzebuje "Div" lub "Element", w którym powinien

05:29.880 --> 05:32.410
renderować mapę jako pierwszy argument, a następnie

05:32.410 --> 05:35.100
niektóre opcje dla mapy.

05:35.100 --> 05:38.660
Więc to teraz działa tutaj, tak jak powinno.

05:38.660 --> 05:40.270
I to jest oczywiście wielki

05:40.270 --> 05:42.850
krok naprzód, bo teraz mamy naszą działającą

05:42.850 --> 05:45.170
aplikację, a wcześniej też działała.

05:45.170 --> 05:47.600
Ale teraz działa również z

05:47.600 --> 05:51.170
typami i z odpowiednią obsługą typów.

05:51.170 --> 05:53.490
I ten sztab jest kolejną świetną praktyką,

05:53.490 --> 05:56.050
dla tego, jak budujesz aplikacje ze skryptem typu

05:56.050 --> 05:58.500
i używasz pewnych typów funkcji, ale jest to szczególnie

05:58.500 --> 06:00.690
świetna praktyka dla tego, jak możesz pracować

06:00.690 --> 06:03.700
z bibliotekami stron trzecich.

06:03.700 --> 06:06.250
Niektóre, jak "axios" przynoszą własne typy.

06:06.250 --> 06:08.470
Inne, nie są nawet instalowane

06:08.470 --> 06:11.540
z NPM, a jednak można dodać typy za pomocą

06:11.540 --> 06:15.421
odpowiedniego pakietu typów.

06:15.421 --> 06:18.810
Mam nadzieję, że ten moduł był pomocny, w zrozumieniu tego i dla wszystkich

06:18.810 --> 06:21.320
przyszłych projektów, nad którymi możesz pracować,

06:21.320 --> 06:23.230
gdzie najprawdopodobniej będziesz również

06:23.230 --> 06:27.040
pracował, z pewnymi bibliotekami stron trzecich.
