WEBVTT

00:02.450 --> 00:04.810
Instrutor: Agora que temos um entendimento de como

00:04.810 --> 00:07.850
podemos gerenciar nossos arquivos com o compilador, vamos mergulhar

00:07.850 --> 00:09.870
nas opções do compilador, porque isso é realmente

00:09.870 --> 00:11.300
interessante.

00:11.300 --> 00:13.860
Isto nos permite controlar como nosso código

00:13.860 --> 00:16.620
TypeScript é compilado, portanto, não apenas

00:16.620 --> 00:18.360
quais arquivos, mas também como

00:18.360 --> 00:20.920
os arquivos que estão sendo compilados são

00:20.920 --> 00:23.230
tratados pelo TypeScript.

00:23.230 --> 00:26.760
E aí você vê que temos um monte de opções.

00:26.760 --> 00:29.560
Você tem breves explicações ao lado destas opções.

00:29.560 --> 00:32.450
Algumas explicações são, sem dúvida, um grande enigma.

00:32.450 --> 00:34.210
Outros são bastante claros.

00:34.210 --> 00:36.450
E eu direi que muitas dessas opções, a maioria

00:36.450 --> 00:39.950
delas não terá importância na maioria dos projetos.

00:39.950 --> 00:43.900
Portanto, você não vai definir todas essas opções, nem mesmo fechar.

00:43.900 --> 00:46.070
Normalmente você pode ignorar muitas destas opções.

00:46.070 --> 00:48.765
Agora vou retomar as opções importantes aqui ao longo deste

00:48.765 --> 00:50.230
curso, porque algumas opções só

00:50.230 --> 00:52.140
fazem sentido quando aprendemos sobre uma

00:52.140 --> 00:53.911
determinada característica.

00:53.911 --> 00:55.940
E eu quero mergulhar em algumas opções

00:55.940 --> 00:57.250
já neste momento.

00:57.250 --> 01:00.840
E para isso, vamos percorrer o arquivo de cima para baixo

01:00.840 --> 01:02.340
e ver o que temos lá.

01:02.340 --> 01:04.410
Vamos começar com a opção alvo.

01:04.410 --> 01:07.230
Como você vê, isto na verdade é definido por padrão.

01:07.230 --> 01:08.750
Não é comentado.

01:08.750 --> 01:10.780
E o que você faz com esta opção

01:10.780 --> 01:15.530
é dizer TypeScript para qual versão alvo JavaScript você quer compilar

01:15.530 --> 01:16.970
o código.

01:16.970 --> 01:18.850
Porque o que o TypeScript faz é

01:18.850 --> 01:21.600
não apenas compilar novas características

01:21.600 --> 01:23.500
como as anotações de tipo que não

01:23.500 --> 01:26.960
existem no JavaScript para o código JavaScript.

01:26.960 --> 01:29.667
Por isso, não se trata apenas de

01:29.667 --> 01:33.270
cuidar para que isto aqui funcione.

01:33.270 --> 01:37.530
Ele também compila o código para JavaScript que roda

01:37.530 --> 01:41.370
em um determinado conjunto de navegadores.

01:41.370 --> 01:43.798
E você basicamente define quais navegadores

01:43.798 --> 01:46.980
suportam o código de compilação, definindo o objetivo.

01:46.980 --> 01:49.520
O alvo padrão aqui neste projeto como você vê, o alvo

01:49.520 --> 01:52.430
inicial que está sendo configurado é o es5, o que significa

01:52.430 --> 01:55.517
que todos os tipos de código são compilados para baixo.

01:55.517 --> 01:57.550
Na verdade, podemos ver isso.

01:57.550 --> 02:00.770
Se eu executar o TSC aqui para compilar todos os meus arquivos,

02:00.770 --> 02:03.260
vemos em app. s estou usando let e const,

02:03.260 --> 02:05.732
mas em aplicação. js, nós nos vemos var.

02:05.732 --> 02:09.890
E isso acontece porque temos um alvo de es5 e,

02:09.890 --> 02:13.816
no mundo es5, não temos deixado e const.

02:13.816 --> 02:16.810
Portanto, o bom aqui é que podemos usar o TypeScript para

02:16.810 --> 02:20.650
gerar código que também funciona em navegadores mais antigos.

02:20.650 --> 02:22.930
Mas é totalmente viável se quisermos fazer isso.

02:22.930 --> 02:25.550
Talvez não queiramos fazer isso com o TypeScript, porque

02:25.550 --> 02:27.670
talvez tenhamos alguma outra ferramenta de

02:27.670 --> 02:30.560
construção que depois cuidará da transposição do JavaScript

02:30.560 --> 02:33.290
e, portanto, não queremos que o TypeScript faça isso, ou

02:33.290 --> 02:35.340
talvez queiramos enviar código que só funcione

02:35.340 --> 02:37.030
em navegadores modernos porque sabemos

02:37.030 --> 02:41.170
que nosso aplicativo só funcionará em navegadores modernos.

02:41.170 --> 02:44.160
E portanto, opções alternativas podem ser vistas

02:44.160 --> 02:46.070
aqui se você apagar o valor e depois

02:46.070 --> 02:48.080
pelo menos aqui em vscode, se você

02:48.080 --> 02:51.300
acertar Control + Space para obter o auto-completar,

02:51.300 --> 02:54.180
você vê um monte de sugestões e vê todos os valores

02:54.180 --> 02:56.450
disponíveis aqui.

02:56.450 --> 02:58.700
Agora, com o passar do tempo, isto naturalmente

02:58.700 --> 03:01.900
mudará, pois temos novas versões em JavaScript lançadas.

03:01.900 --> 03:03.785
Você viu que já tínhamos colocado isto no es5 antes.

03:03.785 --> 03:06.150
Se você não especificar o alvo, então

03:06.150 --> 03:09.520
agora mesmo, o TypeScript compila até o es3, então ele

03:09.520 --> 03:12.200
suporta uma versão ainda mais antiga.

03:12.200 --> 03:15.130
Mas você também pode ir com o es6, que é mais moderno,

03:15.130 --> 03:17.510
que, por exemplo, suporta const e deixa

03:17.510 --> 03:19.310
ou toma uma versão ainda mais

03:19.310 --> 03:24.310
recente, o es6 é equivalente ao es2015, só para constar.

03:24.870 --> 03:27.480
Assim, por exemplo, se definirmos isto como es6,

03:27.480 --> 03:29.580
e eu voltar a executar o comando tsc depois

03:29.580 --> 03:32.460
de mudar o tsconfig. json file, você verá

03:32.460 --> 03:35.440
isso agora em app. js, fomos deixados e consternados,

03:35.440 --> 03:38.130
porque agora isso é apoiado ali.

03:38.130 --> 03:39.340
Então, isso é com você.

03:39.340 --> 03:41.720
Naturalmente, quanto mais moderna for

03:41.720 --> 03:43.641
uma versão JavaScript que você escolher

03:43.641 --> 03:47.450
aqui, mais conciso será seu código gerado porque o TypeScript tem

03:47.450 --> 03:50.440
que compilar cada vez menos código, ou tem que trabalhar

03:50.440 --> 03:54.010
em torno de recursos inexistentes em menos situações, e portanto,

03:54.010 --> 03:59.560
o código compilado normalmente é feito mais conciso e mais curto.

03:59.560 --> 04:01.150
Então, esse é o alvo.

04:01.150 --> 04:02.623
E quanto às outras opções?
