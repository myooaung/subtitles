WEBVTT

00:02.240 --> 00:04.870
Penyaji: Jadi, kita sudah menambahkan komponen pertama kita.

00:04.870 --> 00:06.090
Mari kita tambahkan yang kedua.

00:06.090 --> 00:09.970
NewTodo. tsx adalah nama file.

00:09.970 --> 00:13.060
Di sana tentu saja, kita mengimpor react dari react.

00:13.060 --> 00:16.170
Dan tentu saja Anda juga bisa membangun komponen berbasis kelas.

00:16.170 --> 00:18.270
Ini juga didukung sepenuhnya, tetapi

00:18.270 --> 00:22.410
saya akan menggunakan gaya komponen fungsional modern ini saja.

00:22.410 --> 00:24.070
Jadi di sini lagi-lagi kita memiliki fungsi

00:24.070 --> 00:26.180
yang akan membentuk komponen kita nanti.

00:26.180 --> 00:29.258
Dan saya mengekspor NewTodo sebagai default saya dan mari kita

00:29.258 --> 00:31.260
tambahkan penugasan tipe dan mari kita

00:31.260 --> 00:33.021
perjelas bahwa ini akan menjadi komponen

00:33.021 --> 00:34.410
fungsi tipe.

00:34.410 --> 00:35.800
Dan oleh karena itu tentu saja di sini,

00:35.800 --> 00:38.220
kita kehilangan beberapa kode jsx yang dikembalikan.

00:38.220 --> 00:39.730
Jadi di sini saya akan mengembalikan formulir

00:39.730 --> 00:42.030
di mana saya ingin menambahkan semua kontrol yang saya perlukan untuk

00:42.030 --> 00:43.780
memungkinkan pengguna menambahkan todos baru.

00:45.060 --> 00:48.650
Sekarang mari kita tambahkan komponen todo baru ini di komponen aplikasi.

00:48.650 --> 00:53.650
Jadi di sini kita bisa mengimpor NewTodo dari file . /components/NewTodo dan cukup tambahkan

00:55.130 --> 00:58.095
di sini sebagai ganti komentar.

00:58.095 --> 01:00.520
NewTodo sebagai komponen yang menutup sendiri,

01:00.520 --> 01:02.790
karena saat ini kita tidak mengoper apa pun

01:02.790 --> 01:04.750
di antara tag pembuka dan penutup dan

01:04.750 --> 01:07.784
kita juga tidak memiliki props apa pun di sini, setidaknya

01:07.784 --> 01:09.263
untuk saat ini.

01:10.140 --> 01:11.540
Jadi, alih-alih komponen

01:11.540 --> 01:13.330
ini, kita sekarang dapat menambahkan

01:13.330 --> 01:16.190
input dan juga setelahnya sebuah tombol.

01:16.190 --> 01:18.117
Jadi tambahkan div di sini sebenarnya

01:18.117 --> 01:20.020
di mana saya ingin memiliki label

01:20.020 --> 01:24.880
dengan atribut htmlFor untuk menunjuk pada katakanlah, "todo-text".

01:24.880 --> 01:26.560
Ini semua hanya markup

01:26.560 --> 01:31.250
di sini, di mana saya mengatakan "Todo Text" dan kemudian elemen

01:31.250 --> 01:35.170
input dari tipe teks dengan id "todo text", sehingga

01:35.170 --> 01:36.900
label dan input terhubung

01:36.900 --> 01:39.640
dengan benar secara semantik.

01:39.640 --> 01:41.440
Dan di bawah div itu di sini, alih-alih

01:41.440 --> 01:43.120
formulir, saya akan menambahkan tombol

01:43.120 --> 01:44.437
di mana saya mengatakan, "ADD

01:45.297 --> 01:47.970
TODO", Dan tombol itu harus bertipe submit sehingga, yah,

01:47.970 --> 01:49.670
mengirimkan formulir.

01:49.670 --> 01:51.900
Sekarang ini adalah formulir yang sangat mendasar yang dapat kita gunakan

01:51.900 --> 01:53.143
untuk menambahkan Todo baru.

01:54.580 --> 01:57.060
Sekarang, mari kita pastikan bahwa ini berfungsi

01:57.060 --> 01:59.660
dan untuk ini kita sebenarnya memiliki beberapa langkah

01:59.660 --> 02:01.820
berbeda yang perlu kita terapkan.

02:01.820 --> 02:05.020
Kita perlu mendapatkan apa pun yang dimasukkan pengguna di sini

02:05.020 --> 02:08.550
dan kemudian kita perlu meneruskan apa yang dimasukkan pengguna di

02:08.550 --> 02:09.810
sini ke komponen aplikasi

02:09.810 --> 02:13.330
karena di situlah kita akan mengelola todos kita nanti.

02:13.330 --> 02:16.150
Jadi pertama-tama mari kita bereaksi terhadap pengiriman formulir mungkin.

02:16.150 --> 02:18.050
Kita bisa menambahkan fungsi baru,

02:18.050 --> 02:20.300
jadi sebuah fungsi dalam komponen fungsional,

02:20.300 --> 02:22.720
tetapi itu sekarang akan menjadi fungsi biasa,

02:22.720 --> 02:27.720
yang akan kita beri nama, "todoSubmitsHandler", nama apa pun yang Anda inginkan.

02:28.210 --> 02:29.990
Ini adalah fungsi yang harus dijalankan

02:29.990 --> 02:31.860
setiap kali formulir ini dikirimkan.

02:31.860 --> 02:35.571
Jadi kita bisa mengikatnya ke prop onSubmit di sini pada akhirnya,

02:35.571 --> 02:38.770
todoSubmitsHandler, jangan mengeksekusinya, cukup arahkan

02:38.770 --> 02:40.900
ke sana, sehingga dieksekusi untuk kita

02:40.900 --> 02:43.810
setiap kali formulir ini dikirimkan.

02:43.810 --> 02:46.270
Sekarang di sini kita mendapatkan objek event dan objek

02:46.270 --> 02:49.507
event tersebut bertipe react. FormEvent.

02:51.290 --> 02:54.010
Sekarang di sana saya ingin memanggil event prevent default

02:54.010 --> 02:55.780
untuk mencegah default itu, yaitu mengirim

02:55.780 --> 02:58.300
permintaan nyata ke server yang melayani aplikasi

02:58.300 --> 02:59.280
ini.

02:59.280 --> 03:01.520
Tentu saja bukan itu yang saya inginkan.

03:01.520 --> 03:04.680
Saya ingin menangani permintaan ini hanya di sini dalam JavaScript

03:04.680 --> 03:08.350
dan oleh karena itu default browser ini harus dicegah.

03:08.350 --> 03:09.770
Sekarang dengan itu dicegah,

03:09.770 --> 03:12.610
kita bisa mendapatkan apa pun yang dimasukkan pengguna ke

03:12.610 --> 03:15.250
dalam input dan untuk ini kita punya dua cara berbeda.

03:15.250 --> 03:18.310
Kita dapat mengelola status input di sini, semacam pengikatan

03:18.310 --> 03:20.970
dua arah, atau kita menggunakan ref, referensi,

03:20.970 --> 03:23.170
untuk mengekstrak apa yang dimasukkan

03:23.170 --> 03:25.010
pengguna di sini ketika formulir

03:25.010 --> 03:26.520
dikirimkan.

03:26.520 --> 03:28.410
Saya akan memilih pendekatan yang terakhir

03:28.410 --> 03:30.420
karena kita akan melihat manajemen state

03:30.420 --> 03:33.470
dalam aksi di komponen aplikasi sebentar lagi.

03:33.470 --> 03:37.340
Untuk mengatur ref seperti itu, kita mengimpor hook useRef dari

03:37.340 --> 03:40.580
react, dan hook adalah fungsi khusus yang dapat Anda

03:40.580 --> 03:44.010
jalankan dan komponen fungsi untuk menambahkan fungsi

03:44.010 --> 03:45.290
tertentu ke komponen

03:45.290 --> 03:48.101
dan ketika kita mengeksekusi useRef di sini,

03:48.101 --> 03:51.190
apa yang kita dapatkan kembali adalah objek Ref, yang

03:51.190 --> 03:53.730
dapat kita simpan dalam konstanta dan saya

03:53.730 --> 03:57.310
akan menamainya, "textInputRef" sebenarnya.

03:57.310 --> 04:00.176
Dan kita bisa, misalnya, menggunakan referensi tersebut

04:00.176 --> 04:04.980
untuk menetapkannya ke elemen dom dan kemudian berinteraksi dengan elemen dom itu dari dalam

04:04.980 --> 04:06.500
kode kita di sini.

04:06.500 --> 04:08.800
Jadi misalnya, ketika formulir itu dikirimkan.

04:09.680 --> 04:11.510
Kita menyiapkan koneksi tersebut

04:11.510 --> 04:14.020
dengan menambahkan prop Ref khusus ke

04:14.020 --> 04:16.580
elemen html pilihan Anda dan arahkan ke

04:16.580 --> 04:19.150
objek yang kita buat di sini.

04:19.150 --> 04:21.530
Jadi tambahkan textInputRef.

04:21.530 --> 04:23.540
Hal ini menciptakan hubungan di sini.

04:23.540 --> 04:27.380
Namun, Anda sudah melihat lagi TypeScript tidak menyukai ini.

04:27.380 --> 04:30.110
Karena useRef ternyata juga

04:30.110 --> 04:33.250
merupakan fungsi generik.

04:33.250 --> 04:35.270
Sekarang, tipe mana yang bisa kita berikan padanya.

04:35.270 --> 04:37.340
Apa yang menarik untuk diketahui di sini?

04:37.340 --> 04:39.200
Nah akan menarik untuk mengetahui

04:39.200 --> 04:42.030
jenis data apa yang akan disimpan di dalam grafik dan

04:42.030 --> 04:43.970
karena Anda menunjuk pada elemen input,

04:43.970 --> 04:47.880
kita akan memiliki elemen input html yang disimpan di sana.

04:47.880 --> 04:50.420
Sekarang kita semua hanya perlu memberikan nilai default

04:50.420 --> 04:51.840
ke Ref saat disiapkan dan di sana

04:51.840 --> 04:53.190
kita akan memberikan null, karena

04:53.190 --> 04:54.710
ketika komponen dirender untuk

04:54.710 --> 04:57.380
pertama kalinya, ketika kode ini dijalankan, tentu saja

04:57.380 --> 04:59.460
ini belum dirender di sana, jadi ini tidak akan

04:59.460 --> 05:01.590
menunjuk ke apa pun.

05:01.590 --> 05:03.350
Namun, setelah ini diberikan,

05:03.350 --> 05:04.950
koneksi akan terjalin dan

05:04.950 --> 05:07.040
Ref ini akan berfungsi.

05:07.040 --> 05:09.453
Dan sekarang di sini di todoSubmitHandler, kita bisa mendapatkan

05:10.342 --> 05:15.342
teks yang dimasukkan dengan menggunakan textInputRef. saat ini, itu selalu sesuatu yang

05:15.500 --> 05:17.973
perlu Anda masukkan ketika Anda

05:17.973 --> 05:21.440
bekerja dengan Ref, . tentu saja di sini karena

05:21.440 --> 05:24.530
kita bekerja dengan elemen input html.

05:24.530 --> 05:27.940
Namun, di sini masalahnya adalah bahwa ini bisa saja nol.

05:27.940 --> 05:29.630
Ini adalah masalah yang sudah kita ketahui,

05:29.630 --> 05:31.790
kita memiliki ini di awal kursus juga ketika kita

05:31.790 --> 05:33.370
memilih sesuatu di Dom dan kita memilikinya

05:33.370 --> 05:34.630
di sini juga, karena TypeScript

05:34.630 --> 05:37.020
tidak dapat mengetahui dengan pasti bahwa koneksi

05:37.020 --> 05:38.800
ini dibuat.

05:38.800 --> 05:40.580
Kita mengetahuinya, kita menulis

05:40.580 --> 05:43.050
kodenya, tetapi TypeScript sayangnya tidak memahami

05:43.050 --> 05:45.300
bahwa kita membuat koneksi di sana.

05:46.310 --> 05:48.920
Jadi, untuk memperbaikinya kita dapat menambahkan tanda seru

05:48.920 --> 05:51.350
di sini, untuk kembali memberitahu TypeScript bahwa ini akan

05:51.350 --> 05:54.350
baik-baik saja, bahwa ini akan diatur, dan kita baik-baik saja.

05:54.350 --> 05:56.130
Dengan cara TypeScript benar jika

05:56.130 --> 05:58.920
kita akan memanggil todoSubmitHandler di sini, ini

05:58.920 --> 06:00.590
akan dipanggil ke depan, ini dirender

06:00.590 --> 06:02.410
untuk pertama kalinya dan kemudian

06:02.410 --> 06:05.000
memang ini belum diinisialisasi.

06:05.000 --> 06:07.910
Kita hanya tahu bahwa itu akan diinisialisasi dengan pasti karena

06:07.910 --> 06:09.730
kita tahu ini hanya akan dipanggil ketika

06:09.730 --> 06:10.830
formulir dikirimkan dan

06:10.830 --> 06:13.830
itu hanya dapat terjadi setelah ini telah dirender.

06:13.830 --> 06:16.120
Jadi kita tahu cara kerja kode kita.

06:16.120 --> 06:18.360
Ini tidak akan pernah nol.

06:18.360 --> 06:20.810
Jika ada kemungkinan lain, Anda harus menggunakan

06:20.810 --> 06:22.780
if-check di sini untuk memeriksa apakah

06:22.780 --> 06:26.030
textInputRef. saat ini adalah null dan jika ya,

06:26.030 --> 06:27.620
lakukan sesuatu yang lain.

06:27.620 --> 06:29.550
Tetapi di sini hal ini tidak bisa terjadi.

06:29.550 --> 06:31.230
Jadi dengan itu kita mengekstrak

06:31.230 --> 06:34.640
nilai dan kita bisa konsol. catat ini di sini untuk melihat apakah berhasil.

06:34.640 --> 06:37.040
Tetapi, tentu saja ini bukan pengaturan akhir.

06:37.040 --> 06:40.900
Jadi mari kita simpan ini, mari kita masukkan di sini,

06:40.900 --> 06:44.590
selesaikan dalam satu bulan dan tambahkan todo,

06:44.590 --> 06:47.970
dan kita lihat di sini di log konsol.

06:47.970 --> 06:50.310
Itu bekerja sebagaimana mestinya.

06:50.310 --> 06:51.910
Dan dengan ini bekerja sebagaimana mestinya,

06:51.910 --> 06:55.460
sekarang mari kita pastikan kita mendapatkan nilai itu ke komponen aplikasi.

06:55.460 --> 06:58.820
Jika Anda tahu beberapa reaksi pasti mencobanya sendiri terlebih dahulu.

06:58.820 --> 07:00.963
Kita akan melakukannya bersama dalam kuliah berikutnya.
