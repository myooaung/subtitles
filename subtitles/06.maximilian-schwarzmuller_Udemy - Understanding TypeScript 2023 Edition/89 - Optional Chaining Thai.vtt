WEBVTT

00:02.450 --> 00:05.030
ผู้สอน: เลิกใช้ฟังก์ชันโอเวอร์โหลดแล้ว

00:05.030 --> 00:09.010
ให้ฉันแนะนำคุณสมบัติที่เรียบร้อยมากอีกอย่างหนึ่ง

00:09.010 --> 00:13.350
และนั่นคือการผูกมัดที่เป็นทางเลือก

00:13.350 --> 00:21.603
สมมติว่าคุณมีแอปพลิเคชันที่คุณได้รับข้อมูลจากแบ็กเอนด์จากฐานข้อมูลหรือจากแหล่งข้อมูลใดๆ

00:21.603 --> 00:29.500
ที่คุณไม่ทราบแน่ชัดว่ามีการกำหนดคุณสมบัติบางอย่างในวัตถุหรือไม่

00:29.500 --> 00:36.380
สมมติว่าเรามี fetchedUserData และ fetchedUserData อาจเป็นวัตถุเกี่ยวกับผู้ใช้ที่เราดึงมา

00:36.380 --> 00:39.705
ที่นั่นเราอาจมี ID เราอาจมีชื่อ

00:39.705 --> 00:50.550
Max และเราอาจคาดหวังงานอสังหาริมทรัพย์อื่นซึ่งเป็นวัตถุที่มีชื่อเรื่องและจากนั้นก็มีคำอธิบายด้วย

00:50.550 --> 00:53.950
นั่นคือบริษัทของฉันเอง

00:53.950 --> 00:56.900
ตอนนี้ถ้าเราได้รับข้อมูลเช่นนี้ แน่นอนว่าเราสามารถทำงานกับมันได้

00:56.900 --> 01:00.150
ตอนนี้คุณอาจทำสิ่งที่ซับซ้อนมากขึ้น แต่สำหรับการเริ่มต้น

01:00.150 --> 01:06.871
สมมติว่าทั้งหมดที่ฉันทำคือฉันกำลังอัปโหลดตำแหน่งงานจริงที่นี่

01:06.871 --> 01:12.880
ตอนนี้ถ้าเราบันทึกสิ่งนั้นโดยที่เซิร์ฟเวอร์การพัฒนาของเราเปิดใช้งานและคอมไพล์ทำงานในโหมดเฝ้าดู

01:12.880 --> 01:14.420
ฉันจะได้รับ CEO ที่นี่

01:14.420 --> 01:17.395
นั่นก็ไม่ใช่เรื่องแปลกเกินไป อย่างไรก็ตาม

01:17.395 --> 01:22.395
หากเราดึงข้อมูลนี้จากแบ็กเอนด์ ไม่ว่าด้วยเหตุผลใดก็ตาม เราอาจจะไม่ได้ดึงข้อมูลทั้งหมดที่เราต้องการ

01:23.080 --> 01:30.490
หรือข้อมูลบางอย่างอาจไม่ได้ตั้งค่า ณ จุดนี้

01:30.490 --> 01:34.730
ในแอปพลิเคชันที่ใหญ่กว่าและซับซ้อนกว่า บางครั้งคุณอาจทำงานกับข้อมูลที่มีโครงสร้างและซ้อนกัน

01:34.730 --> 01:45.340
ซึ่งคุณไม่ทราบแน่ชัดว่ามีการตั้งค่าคุณสมบัติบางอย่างบนวัตถุหรือไม่ หรืออาจไม่ได้กำหนดคุณสมบัตินั้นไว้

01:45.340 --> 01:49.680
สมมติว่าไม่มีงานอยู่ที่นี่ไม่ว่าด้วยเหตุผลใดก็ตามที่เราไม่ได้เรียกข้อมูลนั้น

01:49.680 --> 01:57.843
แน่นอนว่าตอนนี้ฉันพบข้อผิดพลาดที่ TypeScript บ่นเกี่ยวกับเรื่องนี้เนื่องจากทราบว่าไม่มีคุณสมบัติของงานในขณะนี้

01:57.843 --> 02:05.660
ปัญหาคือมันรู้สำหรับข้อมูลนี้ มันจะไม่รู้ว่านั่นคือข้อมูลที่เราดึงมาจากไฟล์บางไฟล์ที่ไม่ได้ควบคุมจาก

02:05.660 --> 02:15.550
TypeScript หรืออย่างที่ฉันเพิ่งพูดไปว่าเราอาจจะดึงข้อมูลนี้จากแบ็กเอนด์และเราไม่รู้ ด้วยความมั่นใจว่าข้อมูลใดจะถูกส่งกลับ

02:15.550 --> 02:18.150
ตอนนี้ถ้าคุณไม่รู้ว่ามันถูกกำหนดไว้หรือไม่

02:18.150 --> 02:21.730
สิ่งที่เราสามารถทำได้ใน JavaScript ปกติคือเราสามารถลองเข้าถึงงาน

02:21.730 --> 02:25.098
และถ้าได้ผลเราจะดำเนินการต่อและเราเข้าถึงชื่อ

02:25.098 --> 02:29.450
นี่คือวิธีตรวจสอบ JavaScript ว่ามีบางอย่างอยู่หรือไม่ ก่อนที่เราจะเจาะลึกลงไปถึงออบเจกต์ที่เป็นไปได้นั้น

02:29.450 --> 02:39.400
และหากไม่ได้กำหนด โค้ดนี้จะไม่ทำงาน ดังนั้นเราจึงมีข้อผิดพลาดเวลารันที่กว้างขึ้น

02:39.400 --> 02:42.410
อีกครั้งที่นี่ TypeScript รู้ว่างานนั้นไม่มีอยู่จริง

02:42.410 --> 02:45.180
แต่ถ้าสิ่งนี้จะถูกดึงมาจากแหล่งบางแห่งที่

02:45.180 --> 02:48.470
TypeScript ไม่สามารถดูเหมือนผลลัพธ์ของคำขอ HTTP

02:48.470 --> 02:54.920
นี่จะเป็นวิธีที่ปลอดภัยในการหลีกเลี่ยงข้อผิดพลาดรันไทม์ใน JavaScript

02:54.920 --> 02:58.110
ตอนนี้หากสิ่งนี้มีอยู่จริง เราจะได้ผลลัพธ์เหมือนเดิม

02:58.110 --> 03:02.233
หากไม่มีอยู่ เราจะไม่ได้รับข้อผิดพลาดรันไทม์เป็นอย่างน้อย

03:02.233 --> 03:07.020
ด้วย TypeScript คุณจะมีวิธีที่ดีกว่าในการทำเช่นนั้น

03:07.020 --> 03:10.520
คุณมีตัวดำเนินการผูกมัดเพิ่มเติม

03:10.520 --> 03:16.880
คุณสามารถเพิ่มเครื่องหมายคำถามหลังสิ่งที่คุณไม่แน่ใจว่าได้กำหนดไว้หรือไม่

03:16.880 --> 03:21.600
อย่างน้อยถ้าคุณใช้ TypeScript เวอร์ชัน 3 7 หรือสูงกว่า

03:21.600 --> 03:26.300
ที่นี่ IDE ของฉันไม่ชอบสิ่งนี้ แต่นี่เป็นไวยากรณ์ที่รองรับ

03:26.300 --> 03:30.370
สิ่งนี้บอกว่า TypeScript มีอยู่จริงหรือไม่ หากเข้าถึงงาน และด้วยเหตุนี้เราจึงสามารถเพิ่มเครื่องหมายคำถามได้

03:30.370 --> 03:36.314
ดังนั้นจึงเข้าถึงได้เฉพาะชื่อหากมีการกำหนดงาน

03:36.314 --> 03:39.300
ตอนนี้ถ้าเราทำเช่นนั้น ฉันยังคงได้รับข้อผิดพลาดที่นี่หากฉันพยายามคอมไพล์เพราะ

03:39.300 --> 03:44.510
TypeScript ยังรู้ด้วยความมั่นใจว่าไม่มีงานนั้นอยู่

03:44.510 --> 03:51.840
แต่ถ้ามันไม่รู้หรือถ้าฉันแสดงความคิดเห็นในคอมไพล์นี้ก็ใช้ได้และทุกอย่างก็ดำเนินการเหมือนเดิม

03:51.840 --> 04:00.730
ดังนั้นโอเปอเรเตอร์การผูกมัดที่เป็นตัวเลือกนี้ช่วยให้เราเข้าถึงคุณสมบัติที่ซ้อนกันและวัตถุที่ซ้อนกันในข้อมูลวัตถุของเราได้อย่างปลอดภัย

04:00.730 --> 04:03.610
และหากสิ่งที่อยู่หน้าเครื่องหมายคำถามไม่ได้กำหนด

04:03.610 --> 04:07.061
จะไม่เข้าถึงสิ่งหลังจากนั้น ดังนั้นจะไม่ส่งข้อผิดพลาดรันไทม์

04:07.061 --> 04:12.420
แต่จะแทน เพียงแค่ไม่ดำเนินการต่อ

04:12.420 --> 04:15.210
ดังนั้นเบื้องหลังสิ่งนี้จึงถูกคอมไพล์เป็น if check

04:15.210 --> 04:19.213
ซึ่งจะตรวจสอบว่ามีอยู่หรือไม่ก่อนที่จะพยายามเข้าถึงสิ่งนี้
