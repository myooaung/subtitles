WEBVTT

00:02.370 --> 00:05.290
Verteller: Dus, nu we in staat zijn om de gebruikersinvoer

00:05.290 --> 00:08.630
op te halen en alle gevalideerde met behulp van onze TypeScript,

00:08.630 --> 00:11.420
de gedreven validatie logica hier.

00:11.420 --> 00:13.810
Laten we verder gaan en ervoor zorgen dat we meer

00:13.810 --> 00:17.400
doen met die verzamelde gebruikersinput dan het alleen uitvoeren

00:17.400 --> 00:18.420
in de console.

00:18.420 --> 00:19.450
Want op dit moment is

00:19.450 --> 00:21.330
er natuurlijk wat we doen, juist.

00:21.330 --> 00:24.670
Uiteindelijk druk ik gewoon de dingen

00:24.670 --> 00:26.030
akte informatie

00:26.030 --> 00:30.300
die we verzameld hebben om console te doen.

00:30.300 --> 00:34.290
In plaats daarvan is het de bedoeling dat we ook deze lijst

00:34.290 --> 00:37.770
van projecten hier gebaseerd op dit sjabloon, waar

00:37.770 --> 00:41.550
elk project item is gebaseerd op dit sjabloon hier.

00:41.550 --> 00:45.750
En we voeren de informatie die we hebben verzameld hier uit.

00:45.750 --> 00:48.520
Dus dat is het volgende waar ik aan wil werken.

00:48.520 --> 00:52.970
Naast onze projectinvoerclausule hier, die verantwoordelijk is voor het

00:52.970 --> 00:55.440
weergeven van het forum en het verzamelen

00:55.440 --> 00:57.350
van de gebruikersinvoer, wil ik de

00:57.350 --> 00:59.410
nummerclausule hebben die verantwoordelijk

00:59.410 --> 01:03.230
is voor het weergeven van een lijst met projecten.

01:03.230 --> 01:06.100
En eigenlijk splitsen we dat op in twee clausules.

01:06.100 --> 01:07.650
Een clausule voor de lijst

01:07.650 --> 01:11.000
en een klasse per projectonderdeel in de lijst.

01:11.000 --> 01:14.970
En dan moeten we een manier vinden om die verzamelde input

01:14.970 --> 01:18.500
door te geven aan onze projectlijst en er een nieuw

01:18.500 --> 01:20.650
item aan toe te voegen.

01:20.650 --> 01:23.420
Dus laten we dit stap voor stap aanpakken, zou ik zeggen,

01:23.420 --> 01:26.880
en laten we beginnen met het toevoegen van een projectlijst klasse.

01:26.880 --> 01:29.380
Nu op de exacte plaats waar je hebt toegevoegd, is het aan jou.

01:29.380 --> 01:32.900
De volgorde maakt niet uit, omdat Java script uiteindelijk dit hele

01:32.900 --> 01:36.430
bestand volledig zal parsen voordat het wordt uitgevoerd.

01:36.430 --> 01:38.860
Het zal dus op de hoogte zijn van alle klassen.

01:38.860 --> 01:41.990
Toch zal ik het hier toevoegen boven de projectinvoerclausule,

01:41.990 --> 01:45.740
omdat ik min of meer vertrouw op de projectlijstclausule, die ik ga bouwen

01:45.740 --> 01:48.810
binnen de projectinvoerklasse, maar nogmaals, het maakt

01:48.810 --> 01:50.500
wel degelijk uit.

01:50.500 --> 01:55.500
Dus, hier heb ik mijn projectlijst clausule, projectlijst, en het idee van

01:55.600 --> 01:59.230
deze clausule hier is een beetje verwant aan wat we deden

01:59.230 --> 02:01.170
in een project invoer.

02:01.170 --> 02:04.300
Ik wil mijn sjabloon hier bereiken en het dan op een bepaalde

02:04.300 --> 02:06.930
plaats van de toepassing weergeven.

02:06.930 --> 02:09.480
En dus, wat we hier kunnen doen is opnieuw een

02:09.480 --> 02:13.120
constructor toevoegen, we kunnen de velden toevoegen die we

02:13.120 --> 02:15.310
nodig hebben en er zal een template element

02:15.310 --> 02:17.030
en een host element nodig zijn

02:17.030 --> 02:22.030
op het einde, dus, we kunnen beide hier toevoegen aan onze projectlijst.

02:22.440 --> 02:25.190
We hebben ook het element zelf nodig,

02:25.190 --> 02:29.640
ik zou zeggen het concrete element, dat wordt weergegeven.

02:29.640 --> 02:31.800
En de types zullen wel verschillen.

02:31.800 --> 02:34.580
Het gastelement zal nog steeds een div zijn,

02:34.580 --> 02:38.330
omdat ik die lijst ook in die div wil weergeven.

02:38.330 --> 02:40.970
Maar het concrete element, dat we wel weergeven.

02:40.970 --> 02:43.960
Het is natuurlijk geen formulierelement, maar

02:43.960 --> 02:46.180
als we naar ons lijstsjabloon kijken,

02:46.180 --> 02:48.520
zien we dat er een sectie in zit.

02:48.520 --> 02:51.010
Dus, we hebben een sectie-element.

02:51.010 --> 02:54.420
Nu blijkt dat er geen element en die sectie element is, dus we

02:54.420 --> 02:57.040
hebben gewoon een normaal HTML element omdat elk

02:57.040 --> 03:00.490
element dit type hier heeft voor een of andere belasting.

03:00.490 --> 03:03.060
Als er meer gespecialiseerde types zijn,

03:03.060 --> 03:05.710
kunnen we gewoon HTML-type gebruiken.

03:05.710 --> 03:10.710
Nu moeten we natuurlijk toegang krijgen tot deze elementen.

03:10.970 --> 03:15.600
Dus, we kunnen deze code hier eigenlijk kopiëren van de constructor

03:15.600 --> 03:20.250
van de projectinvoer toegevoegd aan de constructor van

03:20.250 --> 03:22.260
projectlijst en nu wat dingen

03:22.260 --> 03:24.730
aanpassen.

03:24.730 --> 03:27.630
Bijvoorbeeld, mijn template element heeft nu natuurlijk

03:27.630 --> 03:29.420
geen idee van project input.

03:29.420 --> 03:32.150
Dat is nu de projectlijst.

03:32.150 --> 03:36.660
Dus, laten we dat kopiëren en dit hier gebruiken om het element te selecteren.

03:36.660 --> 03:39.760
Ik zal het nog steeds kosten, en ik weet nog steeds met zekerheid

03:39.760 --> 03:42.710
dat ik het krijg, dus dis verandert niet.

03:42.710 --> 03:45.520
De gast elementen zijn nog steeds dood met de ID app.

03:45.520 --> 03:47.820
Dus dit verandert niet.

03:47.820 --> 03:52.070
Dan importeer ik mijn inhoud en dan, nou ja, de winkel, het

03:52.070 --> 03:53.530
eerste element.

03:53.530 --> 03:55.380
Van de import, het sjabloon.

03:55.380 --> 03:57.780
Dus het eerste element in het sjabloon, dat

03:57.780 --> 04:01.590
is de sectie, heb ik opgeslagen in de element eigenschap hier.

04:01.590 --> 04:04.430
Dit is echter geen HTML-formulierelement.

04:04.430 --> 04:07.210
Het is gewoon een HTML element hier.

04:07.210 --> 04:11.710
Nu kunnen we hier ook een ID toekennen en dat hebben we ook gedaan, het moet dynamisch

04:11.710 --> 04:15.380
zijn, niet hard-coded omdat we meer dan één lijst met projecten

04:15.380 --> 04:16.970
zullen hebben.

04:16.970 --> 04:21.220
Ik wil gereedschapslijsten hebben in de uiteindelijke app, een voor

04:21.220 --> 04:25.060
de handeling van projecten en een voor de handeling van projecten,

04:25.060 --> 04:29.895
en zij bieden, ik wil wat extra informatie aan constructeur.

04:29.895 --> 04:35.703
Het type project, en ik gebruik stats, TypeScript snelkoppeling.

04:35.703 --> 04:39.250
Je leert waar je een accessor kunt toevoegen voor de parameter,

04:39.250 --> 04:44.170
private of public om automatisch een eigenschap met dezelfde naam aan te

04:44.170 --> 04:48.060
maken en de waarde die wordt doorgegeven op dit argument op

04:48.060 --> 04:51.730
te slaan in die gelijknamige eigenschap.

04:51.730 --> 04:55.040
Dus nu zal deze klasse ook een naam van een eigenschap hebben om te typen.

04:55.040 --> 04:57.910
En nu is de vraag, wat is het type van deze type

04:57.910 --> 04:58.790
parameter?

04:58.790 --> 05:03.640
En dit zou eigenlijk een letterlijk type en een unie-type moeten zijn.

05:03.640 --> 05:07.270
Het is of actief of klaar.

05:07.270 --> 05:11.050
We hebben zelfs actieve projecten of afgeronde projecten.

05:11.050 --> 05:14.270
Dus dat is een argument dat ik verwacht te krijgen wanneer de projectlijst

05:14.270 --> 05:16.080
wordt geïnstantieerd.

05:16.080 --> 05:20.440
En met pa, moeten we eigenschap D ID typen moet dan gebaseerd

05:20.440 --> 05:21.870
zijn op dit.

05:21.870 --> 05:25.090
Het zou moeten, en voor pa, gebruik ik een sjabloon letterlijk hier.

05:25.090 --> 05:30.090
Het moet het type dash projecten zijn, dus ofwel actieve dash projecten

05:31.240 --> 05:33.640
of afgeronde dash projecten.

05:33.640 --> 05:35.070
Dat is mijn idee.

05:35.070 --> 05:37.540
U kunt dit dot-type altijd gebruiken zodat TypeScript

05:37.540 --> 05:40.380
begrijpt dat we deze eigenschap gebruiken en dat ze niet

05:40.380 --> 05:41.890
ongebruikt is.

05:41.890 --> 05:46.200
Dus daarmee krijgen we toegang tot alle kernelementen en voegen

05:46.200 --> 05:49.660
we een ID toe aan de sectie, die we uit ons sjabloon

05:49.660 --> 05:50.790
halen.

05:50.790 --> 05:53.650
Nu, natuurlijk, we willen een, we willen het goed weergeven?

05:53.650 --> 05:58.600
Dat is het idee voor dit alles, nogmaals, op een particuliere methode.

05:58.600 --> 06:00.540
Bevestig gerechtigheid.

06:00.540 --> 06:06.310
We hadden het in de projectinvoer en daar is het nu de doelwachtrij.

06:06.310 --> 06:11.300
Goed, bevestig dit aan de Dom om nu papa's lijst aan de

06:11.300 --> 06:12.750
Dom te geven.

06:12.750 --> 06:16.610
Dus in plaats van bijvoegen, doe ik eigenlijk hetzelfde

06:16.610 --> 06:19.223
als bij het projectformulier.

06:20.070 --> 06:24.230
Dus we kunnen die regel hier kopiëren en vastmaken.

06:24.230 --> 06:27.040
Ik heb mijn host element en ik wil een aangrenzend

06:27.040 --> 06:28.420
element invoegen.

06:28.420 --> 06:30.240
Na het begin, en dit zou het element moeten zijn.

06:30.240 --> 06:33.300
Dat halen we hier uit het sjabloon.

06:33.300 --> 06:36.990
Maar ik wil dat eigenlijk niet na het begin doen,

06:36.990 --> 06:41.960
maar voor het einde, dus voor het sluiten, het hostelement afplakken

06:41.960 --> 06:45.870
en dan kunnen we hier in de constructor natuurlijk attach

06:45.870 --> 06:49.940
aanroepen om ons gecreëerde element hier aan de Dom te

06:49.940 --> 06:51.763
koppelen.

06:53.880 --> 06:56.370
Er is echter één belangrijk verschil

06:56.370 --> 06:59.630
met de projectinvoer voor deze lijst.

06:59.630 --> 07:03.220
Het is niet gedaan met het toevoegen van de lijst aan de Dom.

07:03.220 --> 07:05.270
De invoer was klaar, toch?

07:05.270 --> 07:07.130
De vorm was hier klaar.

07:07.130 --> 07:08.720
We hadden alle input daar.

07:08.720 --> 07:12.420
We hoefden alleen maar een event listener op te zetten.

07:12.420 --> 07:15.840
Nu voor de lijst hier, we hebben haar eigenlijk niet gehad

07:15.840 --> 07:16.673
met een lege.

07:16.673 --> 07:21.130
H naar tech, bijvoorbeeld, en ik wil daar wat teksten toevoegen.

07:21.130 --> 07:22.990
Dus ik zal een nummer toevoegen.

07:22.990 --> 07:26.020
Nieuwe methode naar je privé methode.

07:26.020 --> 07:29.120
Render of content zou een passende naam kunnen zijn.

07:29.120 --> 07:34.120
En mijn idee hier is om de lege plekken in dat sjabloon te

07:34.230 --> 07:36.862
vullen met een levensjaar.

07:36.862 --> 07:37.780
Daarvoor.

07:37.780 --> 07:40.040
Laten we naar de dode render methode gaan, en er zijn

07:40.040 --> 07:41.580
een paar dingen die ik wil doen.

07:41.580 --> 07:45.390
Een ding is stat voor dode ongeordende lijst, die deel uitmaakt

07:45.390 --> 07:47.200
van mijn projectlijst hier.

07:47.200 --> 07:48.640
Ik wil er een ID aan toevoegen.

07:48.640 --> 07:50.860
Je hoeft dat natuurlijk niet te doen, maar ik wil dat

07:50.860 --> 07:53.500
doen zodat als we het later moeten selecteren, we dat hiermee

07:53.500 --> 07:54.390
kunnen doen.

07:54.390 --> 07:58.220
Dus ik maak hier een lijst-ID aan die is opgeslagen in een constante,

07:58.220 --> 08:00.190
en dit wordt een template literal,

08:00.190 --> 08:04.100
dus een string waarin we dynamische inhoud kunnen injecteren,

08:04.100 --> 08:09.100
en ik wil dit baseren op het type van de omringende projectlijst, dus van de omringende

08:09.370 --> 08:14.370
sectie, en daarna projectenlijst toevoegen.

08:15.220 --> 08:19.700
Nu kunnen we de orderlijst bereiken, die we krijgen in ons element,

08:19.700 --> 08:22.890
dat is stat sectie jaar, rechter element is dode

08:22.890 --> 08:23.820
sectie.

08:23.820 --> 08:27.360
Dus om de ongeordende lijst daarbinnen te krijgen, kunnen we bijvoorbeeld

08:27.360 --> 08:30.940
een query selector gebruiken en zoeken naar de eerste, en in dit geval

08:30.940 --> 08:33.120
enige ongeordende lijst.

08:33.120 --> 08:35.720
We weten dat we er een krijgen omdat we weten dat er een zal zijn en

08:35.720 --> 08:38.280
dan kunnen we hier een ID toevoegen, die de lijst-ID moet zijn.

08:38.280 --> 08:40.280
Dat is een ding dat ik wil doen.

08:40.280 --> 08:44.970
Ik wil ook de tekstinhoud van die leeftijd hier op tag zetten

08:44.970 --> 08:50.200
en daarvoor kunnen we dit element, query selector, gebruiken.

08:50.200 --> 08:53.020
Zoek de eerste en enige HQ tag.

08:53.020 --> 08:56.340
We weten dat we er één zullen vinden, vandaar het uitroepteken

08:56.340 --> 09:01.340
om dode nullen uit te sluiten en de tekstinhoud gelijk te stellen aan deze om te

09:02.940 --> 09:05.610
typen naar hoofdletters.

09:05.610 --> 09:08.130
Onthoud dat het type altijd actief is.

09:08.130 --> 09:10.060
We zijn klaar met twee operazaken.

09:10.060 --> 09:15.060
We zetten dit om naar all caps plus projecten, dat doet een Sten ook.

09:16.200 --> 09:19.853
Gewoon de rubriek vooruit is sectie.

09:21.970 --> 09:25.220
En nu met dat, zijn we, we zijn over het algemeen klaar.

09:25.220 --> 09:27.580
We hebben nog geen items in die lijst.

09:27.580 --> 09:30.230
We werken hier later aan, maar in het algemeen zijn we klaar.

09:30.230 --> 09:35.120
We kunnen dit renderen een inhoud noemen of nadat we het bijvoorbeeld

09:35.120 --> 09:37.210
aan de Dom hebben gekoppeld.

09:37.210 --> 09:39.210
Het zou leuk zijn om die in actie te zien.

09:39.210 --> 09:42.600
Natuurlijk zullen ook hier de eindpunten van de lijst ontbreken,

09:42.600 --> 09:45.523
maar het zou leuk zijn hier iets in actie te zien.

09:46.690 --> 09:49.620
Nou, laten we daarvoor naar de onderkant van het bestand

09:49.620 --> 09:53.310
gaan, waar we de projectinvoer instantiëren en daar kunnen we onze lijsten

09:53.310 --> 09:55.200
niet altijd instantiëren.

09:55.200 --> 09:59.200
We hebben de actieve projectlijst, die we instantiëren, maar nieuwe

09:59.200 --> 10:01.230
projectlijst oproepen.

10:01.230 --> 10:04.220
En daar moeten we dat type-argument doorgeven,

10:04.220 --> 10:06.040
dat hier actief of klaar is.

10:06.040 --> 10:08.610
Aangezien ik de actieve lijst weergeef, pas ik

10:08.610 --> 10:09.950
natuurlijk inactief.

10:09.950 --> 10:13.140
En dan hebben we hier de lijst met afgewerkte projecten

10:13.140 --> 10:15.290
waar ik natuurlijk, langs kom.

10:15.290 --> 10:18.673
Als we nu veilig stellen dat het moet compileren zonder fouten.

10:19.520 --> 10:23.090
En wat u dus zou moeten zien als u teruggaat zijn deze

10:23.090 --> 10:27.770
twee lege secties hier met de kopjes hier en wel, de lege ruimte waar later

10:27.770 --> 10:33.390
items zullen worden toegevoegd, project items zullen worden toegevoegd.

10:33.390 --> 10:37.440
Voorlopig hebben we niet zulke project items, sneeuw.

10:37.440 --> 10:39.710
Als volgende stap moeten we dus

10:39.710 --> 10:43.660
werken aan een manier om ervoor te zorgen dat wanneer

10:43.660 --> 10:49.420
we op project toevoegen klikken, we een nieuw project in code aanmaken.

10:49.420 --> 10:53.730
Dus een nieuwe datastructuur die een project voorstelt, en dat

10:53.730 --> 10:58.047
we dan deze informatie over dit nieuwe project doorgeven aan

10:58.047 --> 10:59.870
de act van projecten.

10:59.870 --> 11:03.850
Lijst hier naar dit actieve projectgedeelte, omdat elk nieuw

11:03.850 --> 11:06.500
project standaard actief moet zijn.

11:06.500 --> 11:09.390
Dit zal ons volgende doel zijn, en ook hier zullen er veel

11:09.390 --> 11:12.080
verschillende manieren zijn om dit uit te voeren.

11:12.080 --> 11:15.870
We doen het samen met een manier die ik in de volgende lezing heb

11:15.870 --> 11:16.703
bedacht.
