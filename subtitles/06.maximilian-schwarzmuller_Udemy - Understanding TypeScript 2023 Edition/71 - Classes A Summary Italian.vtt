WEBVTT

00:02.140 --> 00:04.200
-: Ora è tutto per le lezioni.

00:04.200 --> 00:06.180
Abbiamo imparato a conoscere le classi stesse.

00:06.180 --> 00:08.260
Abbiamo imparato a conoscere le

00:08.260 --> 00:09.850
loro proprietà, i modificatori

00:09.850 --> 00:12.110
dell'asse, private per l'asse interno,

00:12.110 --> 00:15.990
protected per l'asse interno anche nelle classi ereditate

00:15.990 --> 00:19.560
e public per l'asse da ogni parte.

00:19.560 --> 00:21.610
Abbiamo anche imparato a conoscere i metodi che possiamo aggiungere.

00:21.610 --> 00:23.520
Sui metodi e le proprietà statiche.

00:23.520 --> 00:25.520
A proposito di metodi astratti e

00:25.520 --> 00:28.280
classi astratte, che è importante quando parliamo

00:28.280 --> 00:31.350
di un altro concetto importante, l'ereditarietà

00:31.350 --> 00:33.490
che possiamo utilizzare.

00:33.490 --> 00:36.360
In questo caso, ereditiamo da 'Department' con la parola

00:36.360 --> 00:37.660
chiave 'extends'.

00:37.660 --> 00:40.440
Questo ci permette di condividere le funzionalità,

00:40.440 --> 00:41.830
le proprietà e i metodi della

00:41.830 --> 00:45.100
classe 'Dipartimento' con questa classe ereditaria e di

00:45.100 --> 00:47.162
aggiungere le nostre funzionalità

00:47.162 --> 00:50.300
o di sovrascrivere quelle esistenti.

00:50.300 --> 00:52.560
O perché dobbiamo sovrascrivere, come

00:52.560 --> 00:55.620
nel caso di 'describe', che è un metodo astratto.

00:55.620 --> 00:58.710
Oppure perché vogliamo sovrascrivere, come nel caso

00:58.710 --> 01:01.640
di 'addEmployee' qui nel reparto contabilità.

01:01.640 --> 01:04.290
Questo non è un metodo astratto della classe base,

01:04.290 --> 01:07.540
ma ovviamente possiamo sovrascriverlo se vogliamo.

01:07.540 --> 01:10.370
Abbiamo anche imparato a conoscere il modello singleton

01:10.370 --> 01:13.150
e i "costruttori privati", che a volte possono essere

01:13.150 --> 01:14.180
utili.

01:14.180 --> 01:17.290
E poi, in generale, si spera che abbiate una buona idea delle

01:17.290 --> 01:20.290
classi e di ciò che si può fare con esse in TypeScript.

01:20.290 --> 01:22.760
In generale, ovviamente, è necessario sapere

01:22.760 --> 01:26.030
cosa sono le classi e gli oggetti, e anche un po' cosa sono i prototipi

01:26.030 --> 01:29.690
in Vanilla JavaScript, perché in genere non si tratta di qualcosa introdotto

01:29.690 --> 01:31.870
da TypeScript, ma di qualcosa a cui TypeScript

01:31.870 --> 01:34.600
è legato, perché TypeScript si basa su queste caratteristiche

01:34.600 --> 01:41.663
predefinite di JavaScript e aggiunge la propria magia a queste caratteristiche.
