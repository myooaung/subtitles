WEBVTT

00:02.220 --> 00:05.760
-: Como siguiente paso, quiero trabajar en estos tipos aquí,

00:05.760 --> 00:09.900
el cualquier tipo que estoy usando aquí para mis proyectos asignados,

00:09.900 --> 00:11.320
para los oyentes aquí, y

00:11.320 --> 00:14.980
también para los proyectos en el estado del proyecto.

00:14.980 --> 00:19.030
Por supuesto, aquí no quiero trabajar con ninguno, tendría

00:19.030 --> 00:20.740
más sentido tener una clase

00:20.740 --> 00:25.660
de proyecto dedicada o un tipo de proyecto, que podamos utilizar.

00:25.660 --> 00:27.760
Y efectivamente, voy a crear una clase

00:29.070 --> 00:29.903
para ese tipo de

00:31.390 --> 00:32.450
proyecto, simplemente

00:32.450 --> 00:34.890
utilizando la clase proyecto para que tengamos

00:34.890 --> 00:38.740
una forma de construir objetos de proyecto, que siempre tengan

00:38.740 --> 00:41.570
la misma estructura.

00:41.570 --> 00:44.760
Ahora mismo lo estoy haciendo con la notación literal.

00:44.760 --> 00:47.920
La desventaja de esto, por supuesto, es que tenemos que

00:47.920 --> 00:50.490
recordar que es descripción y no Desc.

00:50.490 --> 00:52.410
que necesitamos un ID, que es una cadena,

00:52.410 --> 00:53.470
y así sucesivamente.

00:53.470 --> 00:56.440
Así que ahí es donde un tipo personalizado puede

00:56.440 --> 00:59.750
ayudarnos y voy a crear una clase y no una interfaz o un

00:59.750 --> 01:02.300
tipo personalizado con la palabra clave

01:02.300 --> 01:05.470
type porque quiero ser capaz de instanciarlo.

01:05.470 --> 01:07.960
Entonces, ¿cómo debería ser esa clase

01:07.960 --> 01:10.700
o ese proyecto para ser exactos?

01:10.700 --> 01:12.320
Bien, añadiré un constructor

01:12.320 --> 01:17.280
y luego usaré este atajo de asignar argumentos o parámetros al constructor, que

01:17.280 --> 01:19.100
luego se convierten automáticamente

01:19.100 --> 01:22.310
en propiedades también, añadiendo el accesorio al

01:22.310 --> 01:24.460
principio, Public, en este caso, y

01:24.460 --> 01:25.650
luego el nombre del

01:25.650 --> 01:29.450
argumento y la propiedad, y luego el tipo.

01:29.450 --> 01:33.100
Y aquí cada proyecto debe tener una identificación.

01:33.100 --> 01:34.990
Cada proyecto debe tener un título,

01:34.990 --> 01:37.330
que también es una cadena, al igual que el ID.

01:37.330 --> 01:38.690
Debe tener una descripción,

01:38.690 --> 01:39.920
que es una cadena, debe

01:39.920 --> 01:44.420
tener una propiedad Personas, que es un número que es el número de personas

01:44.420 --> 01:47.440
asignadas a un proyecto.

01:47.440 --> 01:49.580
Y una cosa que también quiero añadir,

01:49.580 --> 01:51.640
que no teníamos hasta ahora, es

01:51.640 --> 01:53.580
un estado del proyecto.

01:53.580 --> 01:56.920
Porque ahora mismo cuando añadimos un proyecto aquí,

01:56.920 --> 01:58.680
aparece en ambas listas.

01:58.680 --> 02:01.530
Ahora, quiero añadir el estado de un proyecto

02:01.530 --> 02:03.630
que, por supuesto, se puede cambiar

02:03.630 --> 02:07.470
para que podamos filtrar los proyectos activos en el primer

02:07.470 --> 02:11.470
cuadro y los proyectos terminados en un segundo cuadro.

02:11.470 --> 02:15.000
Así que para ser sólo muestran los proyectos adecuados en cada caja.

02:15.000 --> 02:19.890
Así que para eso voy a añadir otra propiedad pública aquí, el estado.

02:19.890 --> 02:21.280
Y ahora la pregunta, por supuesto,

02:21.280 --> 02:23.985
es ¿qué tipo debe tener este estado?

02:23.985 --> 02:28.240
Ahora podríamos utilizar un tipo de unión con dos tipos literales Activo

02:28.240 --> 02:31.170
y Terminado lo que ya utilizamos anteriormente.

02:31.170 --> 02:33.280
Pero aquí, siempre quiero introducir

02:33.280 --> 02:36.890
o reintroducir otro tipo que aprendiste, y es el

02:36.890 --> 02:38.320
Enum.

02:38.320 --> 02:41.890
El Enum perfecto aquí porque tenemos exactamente dos opciones.

02:41.890 --> 02:44.950
Y aquí, en el contexto de este objeto de proyecto, tampoco necesitamos

02:44.950 --> 02:48.740
un texto que tenga sentido para los humanos, que almacenamos como un valor,

02:48.740 --> 02:50.270
sino que realmente sólo necesitamos

02:50.270 --> 02:52.341
algún identificador.

02:52.341 --> 02:56.140
Así que aquí voy a añadir un nuevo estado del proyecto Enum.

02:56.140 --> 02:59.810
Y quiero tener dos valores allí,

02:59.810 --> 03:02.890
Activo y Terminado.

03:02.890 --> 03:05.440
Y luego aquí, este estado será

03:05.440 --> 03:08.610
de tipo estado del proyecto así.

03:08.610 --> 03:11.003
Esta es ahora mi clase de proyecto.

03:11.900 --> 03:14.220
Con esto aquí, podemos decir que se trata de

03:14.220 --> 03:17.820
un conjunto de proyectos que utilizan esa clase de proyecto.

03:17.820 --> 03:20.351
Y por supuesto, cuando creamos

03:20.351 --> 03:24.780
un proyecto aquí, lo hacemos usando nuevo proyecto, no

03:24.780 --> 03:25.613
estado del

03:25.613 --> 03:26.620
proyecto.

03:26.620 --> 03:30.310
Y aquí para proyectar enviamos un ID en este caso, como se mencionó

03:30.310 --> 03:32.200
antes, un número aleatorio que

03:32.200 --> 03:35.370
convertimos en una cadena, a continuación, el título,

03:35.370 --> 03:38.210
a continuación, la descripción, a continuación,

03:38.210 --> 03:41.930
el número de personas aquí, y luego también, por supuesto,

03:41.930 --> 03:45.080
que es el estado, a la derecha.

03:45.080 --> 03:49.950
Y una cosa que quiero tener aquí en esta aplicación en este proyecto

03:49.950 --> 03:53.180
de demostración es que cada nuevo proyecto por

03:53.180 --> 03:54.830
defecto es activo.

03:54.830 --> 03:57.040
Así que cuando creamos un nuevo proyecto aquí, asignamos

03:57.040 --> 04:00.064
el estado del proyecto. activo aquí como un valor

04:00.064 --> 04:02.990
para el estado con eso, tenemos que proyectar

04:02.990 --> 04:05.230
que añadimos.

04:05.230 --> 04:06.720
Y ahora hay otro lugar donde necesitamos

04:06.720 --> 04:08.450
la clase de proyecto.

04:08.450 --> 04:11.220
Y eso es aquí en la clase Lista de proyectos allí, tenemos

04:11.220 --> 04:13.474
la propiedad Asignar proyectos.

04:13.474 --> 04:17.240
Y, por supuesto, siempre debe ser un conjunto de proyectos.

04:17.240 --> 04:19.530
Ahora con eso estamos usando la tipificación Beta.

04:19.530 --> 04:22.810
Y una de las ventajas es que aquí, en los proyectos de renderización,

04:22.810 --> 04:26.360
ahora también tenemos autocompletado, por ejemplo.

04:26.360 --> 04:29.020
Y también obtendríamos un error, un error de compilación

04:29.020 --> 04:31.300
si intentamos guardar eso, porque ahora

04:31.300 --> 04:33.100
TypeScript entiende con qué tipos

04:33.100 --> 04:35.360
estamos trabajando aquí.

04:35.360 --> 04:39.040
Así que ese es el proyecto Clase y cómo podemos utilizarlo.

04:39.040 --> 04:41.760
La clase Proyecto no es la única clase Sin embargo,

04:41.760 --> 04:44.230
también tenemos el Listener aquí.

04:44.230 --> 04:48.630
Y para ello, añadiré un nuevo tipo personalizado Listener.

04:48.630 --> 04:50.390
El nombre, por supuesto, depende de usted.

04:50.390 --> 04:54.280
Y sólo uso un tipo aquí porque quiero básicamente

04:54.280 --> 04:58.260
codificar un tipo de función con una palabra.

04:58.260 --> 04:59.640
¿Qué queremos decir con esto?

04:59.640 --> 05:03.270
Bueno, por supuesto, un oyente aquí en nuestra aplicación

05:03.270 --> 05:05.370
es sólo una función, ¿verdad?

05:05.370 --> 05:07.160
Lo que almacenamos en el array de

05:07.160 --> 05:08.960
listeners es sólo un montón de funciones

05:08.960 --> 05:11.060
Add Listener empuja una nueva función,

05:11.060 --> 05:12.200
y cuando algo cambia,

05:12.200 --> 05:14.190
ejecutamos esa función.

05:14.190 --> 05:17.610
Así que aquí un oyente es realmente una función.

05:17.610 --> 05:22.610
Pero es una función que recibe nuestros artículos, ciertos

05:22.870 --> 05:23.703
artículos

05:23.703 --> 05:27.113
en nuestro caso y array de proyectos.

05:28.500 --> 05:30.410
Y que luego haga algo con ella.

05:30.410 --> 05:32.480
Ahora para ser precisos aquí, por supuesto,

05:32.480 --> 05:33.550
para definir un tipo de

05:33.550 --> 05:35.200
función, no tenemos llaves aquí,

05:35.200 --> 05:37.440
pero en su lugar como usted aprendió el tipo de

05:37.440 --> 05:38.780
retorno, y que será amplia,

05:38.780 --> 05:41.880
lo que significa que no nos importa cualquier valor que la función

05:41.880 --> 05:44.090
Listener podría devolver.

05:44.090 --> 05:46.140
En el lugar donde trabajamos con los oyentes.

05:46.140 --> 05:47.940
No necesitamos ningún tipo de retorno.

05:47.940 --> 05:49.810
Sólo queremos asegurarnos de

05:49.810 --> 05:51.880
que quien pasa como tal oyente espera

05:51.880 --> 05:55.870
obtener algunos elementos cuando el oyente se dispara.

05:55.870 --> 05:58.530
Con esto aquí, podemos decir que Listeners

05:58.530 --> 06:02.760
es un array de funciones de escucha bien al final.

06:02.760 --> 06:05.670
Y aquí, cuando empujo la función de oyente, tengo

06:05.670 --> 06:08.480
que dejar claro que no es cualquier función,

06:08.480 --> 06:10.630
sino que es un tipo de oyente, entonces

06:10.630 --> 06:12.350
todo funciona.

06:12.350 --> 06:14.530
Ahora, en el lugar donde usamos "Add Listener",

06:14.530 --> 06:16.180
que está ahí abajo, ahora también,

06:16.180 --> 06:17.650
por supuesto, podemos mejorar

06:17.650 --> 06:19.869
nuestra escritura y dejar claro que aquí,

06:19.869 --> 06:23.440
en realidad vamos a obtener un montón de proyectos.

06:23.440 --> 06:27.220
Así que ahora con eso, configuramos nuestro oyente,

06:27.220 --> 06:32.210
añadimos el tipo de proyecto, y eso no cambia nada aquí.

06:32.210 --> 06:35.120
Si ahora añadimos algo que funciona, y si añado un

06:35.120 --> 06:36.900
segundo elemento, que todavía

06:36.900 --> 06:38.880
se añade además del primer elemento

06:38.880 --> 06:40.530
que se añade de nuevo, así, y no

06:40.530 --> 06:43.230
estamos haciendo ningún filtro en cualquiera

06:43.230 --> 06:45.260
de las listas en absoluto.

06:45.260 --> 06:48.600
Así que antes de seguir trabajando en nuestras partes, vamos

06:48.600 --> 06:50.570
a asegurarnos de que no estamos teniendo

06:50.570 --> 06:53.990
esta duplicación aquí dentro de una sola lista, y también no la

06:53.990 --> 06:57.640
duplicación a través de ambas cajas aquí, pero que en su lugar, sólo

06:57.640 --> 06:58.610
los proyectos activos

06:58.610 --> 07:01.030
están mostrando aquí y sólo los proyectos terminados

07:01.030 --> 07:02.940
y por lo tanto inicialmente no hay proyectos

07:02.940 --> 07:08.010
que aparecen aquí en los proyectos terminados.

07:08.010 --> 07:09.623
Así que vamos a arreglar eso.
