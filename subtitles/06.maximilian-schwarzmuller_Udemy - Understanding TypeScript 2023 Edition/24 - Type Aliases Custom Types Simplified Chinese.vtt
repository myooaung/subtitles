WEBVTT

00:02.340 --> 00:06.970
- ：现在, 当使用联合类型时, 像这样和这样,

00:06.970 --> 00:11.070
总是重复联合类型可能会很麻烦｡

00:11.070 --> 00:15.330
您可能需要交换一个重新安装此联合类型的新类型｡

00:15.330 --> 00:18.540
您可以使用另一个很酷的类型特性来实现这一点,

00:18.540 --> 00:21.410
即类型别名特性｡

00:21.410 --> 00:25.670
通常在使用别名之前创建别名,

00:25.670 --> 00:31.240
在文件的顶部, 使用type关键字.

00:31.240 --> 00:34.040
现在type关键字没有内置到JavaScript中,

00:34.040 --> 00:35.880
但在TypeScript中支持它,

00:35.880 --> 00:42.860
在type之后添加自定义类型的名称, 或者应该说是类型别名的名称｡

00:42.860 --> 00:44.980
例如可组合｡ 

00:44.980 --> 00:46.720
但名字真的由你决定｡ 

00:46.720 --> 00:52.530
您可以在此处创建任何未内置到JavaScript或TypeScript中的名称作为键名｡

00:52.530 --> 00:54.360
所以像date这样的东西是不允许的, 因为它内置在JavaScript中,

00:54.360 --> 00:56.250
但是combinable没有内置在JavaScript中,

00:56.250 --> 01:01.170
没有内置在TypeScript中, 所以我们可以使用它｡

01:01.170 --> 01:08.320
现在用等号指定要在别名中编码的类型｡

01:08.320 --> 01:10.300
所以我们可以在这里存储一个数字,

01:10.300 --> 01:12.790
现在每当我们想确定某个东西应该是一个数字时,

01:12.790 --> 01:16.400
我们可以用combinable来代替｡

01:16.400 --> 01:18.570
现在, 这并没有太大的意义,

01:18.570 --> 01:21.630
它甚至可以使我们的代码更难阅读｡

01:21.630 --> 01:25.500
如果我在下面使用combinable, 从技术上讲,

01:25.500 --> 01:33.180
这是可行的, 但是如果我们浏览一下代码, 并不清楚我们想要的是数字还是字符串｡

01:33.180 --> 01:37.500
因此, 通常情况下, 您可以将它与联合类型结合使用｡

01:37.500 --> 01:40.380
所以我们可以在自定义类型中存储一个联合类型,

01:40.380 --> 01:42.250
也就是说, 在我们的类型别名中,

01:42.250 --> 01:48.170
现在只需引用下面的combinable而不是我们的联合类型｡

01:48.170 --> 01:51.060
因此, 我们的设置与之前完全相同,

01:51.060 --> 01:55.580
只是这里有我们可以使用的可重用类型别名｡

01:55.580 --> 01:57.660
这使我们可以节省一些额外的代码,

01:57.660 --> 02:04.200
并确保我们在使用combinable时总是引用相同的类型或相同的类型设置｡

02:04.234 --> 02:06.600
当然, 我们不能只把它用于数字和字符串,

02:06.600 --> 02:08.970
我们可以把它用于任何类型的设置,

02:08.970 --> 02:11.140
我们可能想存储在一个别名中,

02:11.140 --> 02:14.810
例如, 包括这两个文本类型｡

02:14.810 --> 02:18.210
所以, 对于这两个类型, 对于这个联合类型, 我们还可以交换类型别名,

02:18.210 --> 02:20.660
ConversionDescriptor,

02:20.660 --> 02:28.920
或者你想给它命名的任何名称, 并将这个类型准确地存储在这个类型别名中｡

02:28.920 --> 02:32.270
现在我们可以在下面使用这个类型别名｡ 

02:32.270 --> 02:34.970
所以类型别名非常非常有用｡ 

02:34.970 --> 02:37.490
您可以将更复杂的类型定义编码到您自己的类型中,

02:37.490 --> 02:45.920
也就是说, 编码到您自己的类型名称中, 并在您的代码中需要这种类型设置的任何地方重用它｡

02:45.920 --> 02:48.060
因此, 您可以在下面避免输入错误,

02:48.060 --> 02:51.000
并且可以简单地保存代码, 更快地编写代码,

02:51.000 --> 02:53.490
并且始终更清楚地了解您的意图,

02:53.490 --> 02:57.653
例如, 通过在上面选择描述性类型别名｡
