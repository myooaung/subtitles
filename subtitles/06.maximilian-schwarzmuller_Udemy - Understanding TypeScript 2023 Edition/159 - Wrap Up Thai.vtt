WEBVTT

00:02.190 --> 00:05.030
ผู้สอน: ดังนั้นเราจึงเพิ่ม webpack ซึ่งเป็นเครื่องมือที่สำคัญมากที่ช่วยให้เราสามารถรวมไฟล์ต่าง

00:05.030 --> 00:09.690
ๆ ของเราเข้าด้วยกันเป็นชุดเดียว

00:09.690 --> 00:12.090
สิ่งนี้ช่วยให้เราลดจำนวนคำขอ HTTP ได้อย่างแท้จริง

00:12.090 --> 00:16.500
และดังนั้นจึงสามารถเพิ่มความเร็วให้กับแอปพลิเคชันของเราได้

00:16.500 --> 00:19.840
หากคุณพบว่าตัวเองต้องทำงานกับไฟล์แต่ละไฟล์จำนวนมาก ซึ่งโดยปกติแล้วคุณจะทำในโครงการขนาดใหญ่

00:19.840 --> 00:22.270
เครื่องมืออย่างเช่น webpack เป็นสิ่งที่ต้องใช้

00:22.270 --> 00:28.200
และ webpack เป็นเครื่องมือที่สำคัญและโดดเด่นที่สุดที่จะช่วยคุณในเรื่องนี้ ดังนั้น นี่จึงเป็นเครื่องมือที่ฉัน

00:28.200 --> 00:31.190
ต้องการแสดงที่นี่

00:31.190 --> 00:33.730
คุณจะเห็นว่า webpack สามารถกำหนดค่าได้สูง และอย่างที่ฉันได้กล่าวไปหลายครั้ง

00:33.730 --> 00:39.630
เอกสารอย่างเป็นทางการของ webpack คือที่สำหรับเรียนรู้ทั้งหมดเกี่ยวกับมัน

00:39.630 --> 00:42.120
เกี่ยวกับรถตักแบบต่างๆ การตั้งค่าข้อผิดพลาดต่างๆ

00:42.120 --> 00:44.770
ที่คุณสามารถตั้งค่าได้ และวิธีการทำงานโดยทั่วไป

00:44.770 --> 00:49.660
ดังนั้น เจาะลึกลงไปในเอกสารนี้หากคุณต้องการเป็นผู้เชี่ยวชาญเกี่ยวกับ

00:49.660 --> 00:52.720
webpack และต้องการตั้งค่าที่ซับซ้อนมากขึ้น

00:52.720 --> 00:55.610
อย่างไรก็ตาม การตั้งค่าพื้นฐานของเราที่นี่ช่วยให้เราสามารถคอมไพล์ไฟล์

00:55.610 --> 01:03.820
TypeScript ด้วย webpack แล้วรวมเอาต์พุตทั้งหมดเข้าด้วยกันเป็นชุดเดียว

01:03.820 --> 01:03.820
ไฟล์.js

01:03.820 --> 01:11.510
และเรายังตั้งค่าคอนฟิกูเรชันสำหรับการพัฒนาซึ่งทำให้การดีบักง่ายขึ้นและให้ข้อความแสดงข้อผิดพลาดที่เป็นประโยชน์แก่เรามากขึ้น

01:11.510 --> 01:15.570
และเราได้รับการตั้งค่าการผลิตซึ่งให้รหัสที่ปรับให้เหมาะสมที่สุด

01:15.570 --> 01:21.160
ซึ่งจากนั้นเราสามารถนำไปใช้กับเซิร์ฟเวอร์เพื่อจัดส่งรหัสให้น้อยที่สุดเท่าที่จะทำได้

01:21.160 --> 01:22.210
และนั่นแหล่ะ

01:22.210 --> 01:30.260
webpack เป็นเครื่องมือหลักจริงๆ และความสามารถในการใช้งานและมีการกำหนดค่าที่ใช้งานได้จริงเป็นสิ่งสำคัญอย่างยิ่ง

01:30.260 --> 01:33.800
ดังนั้นมันจึงเป็นสิ่งที่ต้องใช้ในโครงการสมัยใหม่ใดๆ และในโมดูลนี้

01:33.800 --> 01:36.710
คุณจะได้เรียนรู้วิธีเริ่มต้นใช้งานในโครงการ

01:36.710 --> 01:38.763
TypeScript ของคุณ
