WEBVTT

00:02.510 --> 00:04.490
インストラクター：基本クラスで､ distフォルダに移動して､

00:04.490 --> 00:10.110
アプリを検査します｡ jsファイルでは､ JavaScriptで何が生成されるかを見ることができます｡

00:10.110 --> 00:13.560
そこには､ 本質的に同じコードがあることがわかります｡

00:13.560 --> 00:17.870
2つの重要な違いは､ ここにある名前フィールドは､

00:17.870 --> 00:22.230
このようにクラス内に存在しないことです｡

00:22.230 --> 00:25.460
これは､ 最近のJavaScriptでは実際にサポートされていることですが､

00:25.460 --> 00:29.130
あなたが作っているJavaScriptのバージョンに依存します｡

00:29.130 --> 00:33.450
だから､ ES6だけでは､ 実はサポートされていないんです｡ 

00:33.450 --> 00:37.360
そしてもちろん､ 見ていてすごいのはタイプアサインです｡

00:37.360 --> 00:43.870
このフィールド構文がサポートされている最新バージョンのJavaScriptを使用していない場合､

00:43.870 --> 00:54.470
Vanilla JavaScriptで作成されるオブジェクトにプロパティを追加する方法は､ 実際この方法となります｡

00:54.470 --> 00:56.480
というわけで､ JavaScriptではこんな感じです｡ 

00:56.480 --> 00:58.710
しかし､ tsconfig.NETにアクセスしてみると､

00:58.710 --> 01:02.080
面白いことがわかります｡ jsonファイルで､ ターゲットをES5からES6に変更し､

01:02.080 --> 01:05.970
ここでlibをコメントアウトしています｡

01:05.970 --> 01:10.870
そのため､ TypeScriptによって正しい推奨ライブラリが自動的に追加されるようになっています｡

01:10.870 --> 01:16.350
ここで､ この設定ファイルを保存して､ アプリに戻ると js まったく違うものを見ている｡

01:16.350 --> 01:18.810
そして､ ここに見られるのは､ かなり興味深いことです｡ 

01:18.810 --> 01:20.960
ここにあるのは何だろう？

01:20.960 --> 01:23.290
さて､ 最終的にここにあるのは､

01:23.290 --> 01:26.453
いわゆるコンストラクタ関数です｡

01:27.299 --> 01:31.600
コンストラクタ関数は､ JavaScriptに組み込まれているもので､

01:31.600 --> 01:44.480
基本的にずっとそこにあると言えます｡ これは､ Vanillaの非近代的なJavaScriptのオブジェクトの青写真を作成する方法です｡

01:44.480 --> 01:47.100
この関数はnewキーワードで呼び出され､

01:47.100 --> 01:50.890
return文がないにもかかわらず､

01:50.890 --> 01:57.540
突然､ 魔法のように何かを返してくれるのです｡

01:57.540 --> 01:59.730
オブジェクトを返します｡ 

01:59.730 --> 02:03.110
name プロパティを持つ新しいオブジェクトです｡ 

02:03.110 --> 02:04.940
つまり､ このコンセプトは新しいものではなく､

02:04.940 --> 02:08.680
モダンなJavaScriptやTypeScriptによって導入されたものでもありません｡

02:08.680 --> 02:15.180
オブジェクトにブループリントを持たせるというアイデアは､ JavaScriptでは非常に長い間存在していました｡

02:15.180 --> 02:19.070
しかし､ 従来はコンストラクタ関数を使用しなければならず､

02:19.070 --> 02:21.870
特に異なるプログラミング言語を使用してきた開発者にとっては､

02:21.870 --> 02:26.600
少し直感的でない場合がありました｡

02:26.600 --> 02:30.510
モダンなJavaScriptでは､ このようなクリーンな構文のクラスという考え方が導入されており､

02:30.510 --> 02:34.950
TypeScriptもこれをサポートしている｡

02:34.950 --> 02:38.180
TypeScriptの強力なコンパイル機能により､

02:38.180 --> 02:40.830
より多くのブラウザで動作する古いスタイルや､

02:40.830 --> 02:48.280
前に見たよりモダンなES6スタイルなど､ コンパイルしたいものを選ぶことができます｡

02:48.280 --> 02:51.700
これは､ ここに非常によく似ていますね｡ 

02:51.700 --> 02:54.500
重要なのは､ JavaScriptに組み込まれ､ TypeScriptでサポートされているこの機能によって､

02:54.500 --> 03:00.163
オブジェクトのブループリントを定義できるようになったことです｡
