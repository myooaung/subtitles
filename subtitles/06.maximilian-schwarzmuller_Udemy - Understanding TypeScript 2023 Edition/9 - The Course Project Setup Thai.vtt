WEBVTT

00:02.490 --> 00:03.860
อาจารย์ชาย: ดังนั้นเราจึงตั้งค่า

00:03.860 --> 00:04.860
IDE ซึ่งเป็นสิ่งสำคัญ

00:04.860 --> 00:11.250
ตอนนี้ เรามาตั้งค่าโครงการเริ่มต้นกัน ซึ่งเราจะใช้ตลอดหลักสูตรนี้ในโมดูลหลักสูตรต่างๆ

00:11.250 --> 00:18.339
โดยพื้นฐานแล้ว การตั้งค่าโครงการที่เราสามารถเริ่มโมดูลทุกหลักสูตรเพื่อเขียนโค้ดของเราที่นั่น

00:18.339 --> 00:24.330
ดังที่คุณจะเห็นตลอดหลักสูตรนี้ การเขียนโค้ดโดยทั่วไปไม่จำเป็นต้องมีการตั้งค่าที่ซับซ้อน

00:24.330 --> 00:28.330
แต่ในที่นี้ ฉันต้องการโปรเจ็กต์ที่เราสามารถเขียนโค้ด

00:28.330 --> 00:33.530
คอมไพล์โค้ด แล้วดูผลลัพธ์ของโค้ดนั้นในเบราว์เซอร์ได้ทันที

00:33.530 --> 00:36.970
ก่อนอื่นฉันจะเพิ่มไฟล์ HTML ดัชนีใหม่

00:36.970 --> 00:39.520
และคุณสามารถเพิ่มสิ่งนี้ในโฟลเดอร์ว่าง

00:39.520 --> 00:42.620
ไฟล์หรือโฟลเดอร์อื่นอีกสองไฟล์ที่คุณเห็นที่นี่เป็นเพียงไฟล์ปรับแต่งสำหรับ

00:42.620 --> 00:50.200
git ในกรณีที่คุณใช้การควบคุมเวอร์ชัน และสำหรับโปรแกรมแก้ไขของฉัน ซึ่งจะกำหนดระดับการซูม

00:50.200 --> 00:51.670
นั่นคือทั้งหมดที่ฉันมีที่นี่

00:51.670 --> 00:56.750
แต่ในไฟล์ดัชนี HTML ตอนนี้ฉันจะเริ่มต้นด้วยโครงกระดูกพื้นฐาน

00:56.750 --> 00:58.390
และสำหรับคนที่จะทำโค้ด

00:58.390 --> 01:04.200
คุณสามารถพิมพ์ HTML เลือกตัวเลือก html:5 หากคุณไม่ได้รับเมนูนี้

01:04.200 --> 01:06.820
ให้กด control และ space

01:06.820 --> 01:11.740
เลือกตัวเลือก html:5 แล้วกด Enter แล้วคุณจะได้โครงกระดูกนี้

01:11.740 --> 01:14.670
ที่นั่นเราสามารถป้อนการทำความเข้าใจ TypeScript ที่นี่เป็นชื่อเรื่องได้

01:14.670 --> 01:16.722
แต่นั่นไม่สำคัญมากนัก

01:16.722 --> 01:29.020
ที่สำคัญกว่านั้นคือที่นี่คุณเพิ่มแท็กสคริปต์ในส่วนหัวของคุณและเพิ่มแหล่งที่มาและชี้ไปที่แอป

01:29.020 --> 01:29.020
js ที่นี่และเพิ่มแอตทริบิวต์ defer

01:29.020 --> 01:34.520
สิ่งนี้พยายามนำเข้าแอพ js ซึ่งแน่นอนว่าตอนนี้ไม่มีอยู่

01:34.520 --> 01:37.960
และแน่นอนว่ามันจะดำเนินการเช่นกันหากพบมัน

01:37.960 --> 01:44.790
สิ่งนี้ทำให้เราสามารถดูการเปลี่ยนแปลงของเรา การเปลี่ยนแปลงโค้ดของเราได้โดยตรงบนหน้าจอในเบราว์เซอร์

01:44.790 --> 01:47.410
หรือหากเราเพิ่งบันทึกบางอย่างลงในคอนโซล

01:47.410 --> 01:49.560
ในเครื่องมือ def ของเบราว์เซอร์

01:49.560 --> 01:52.250
ต่อไปฉันจะเพิ่มแอพ ไฟล์ ts.

01:52.250 --> 01:54.170
นั่นคือไฟล์ ไฟล์ TypeScript

01:54.170 --> 01:55.530
ที่จะเขียนโค้ด

01:55.530 --> 01:58.580
และที่นั่น ตัวอย่างเช่น คุณสามารถคอนโซลบันทึกรหัสของคุณไปที่นี่

01:58.580 --> 02:01.580
หรืออะไรก็ตามที่คุณต้องการ

02:01.580 --> 02:03.780
คุณสามารถคอนโซลบันทึกสิ่งที่คุณต้องการได้ที่นี่

02:03.780 --> 02:06.870
และถ้าคุณทำอย่างนั้น คุณสามารถคอมไพล์ไฟล์นี้ด้วย TypeScript

02:06.870 --> 02:13.070
ซึ่งเราติดตั้งไว้ก่อนหน้านี้ เพื่อให้คุณสามารถเปิดเทอร์มินัล รวมเข้ากับโปรแกรมแก้ไขได้ที่นี่

02:13.070 --> 02:16.580
และเพียงแค่เขียนแอพ tsc ท.

02:16.580 --> 02:20.610
คอมไพล์ไฟล์ TypeScript นี้และสร้างแอป

02:20.610 --> 02:20.610
ตอนนี้เป็นไฟล์

02:20.610 --> 02:22.530
js ซึ่งเป็นไฟล์ที่เรากำลังนำเข้าที่นี่

02:22.530 --> 02:27.120
และถ้าคุณเปิดดัชนีนี้ html คุณจะเห็นสิ่งที่เกิดขึ้นที่นี่

02:27.120 --> 02:29.800
คุณเริ่มใช้ตรรกะที่คุณเขียนในนี้

02:29.800 --> 02:32.340
และนั่นก็เป็นตรรกะที่ควบคุมบางอย่างในดอม

02:32.340 --> 02:37.870
หรือเช่นในกรณีนี้ ตรรกะนั้นถูกล็อคไว้ที่คอนโซล

02:37.870 --> 02:41.700
ในกรณีนี้ ฉันเปิดไฟล์ HTML นี้ในเบราว์เซอร์

02:41.700 --> 02:44.460
คุณสามารถคลิกสองครั้งที่ภายนอก IDE

02:44.460 --> 02:47.960
ดังนั้นใน Windows Explorer ปกติหรือ Mac Finder

02:47.960 --> 02:51.830
จากนั้นอาจเปิดเครื่องมือสำหรับนักพัฒนาของคุณหากคุณเพียงแค่บันทึกบางสิ่งลงในคอนโซล

02:51.830 --> 02:54.010
และคุณจะเห็นบันทึกของคุณที่นี่

02:54.010 --> 02:56.690
ตอนนี้ก็ดี แต่เมื่อใดก็ตามที่เราเปลี่ยนแปลงบางอย่างในโค้ดของเรา

02:56.690 --> 03:02.340
เราต้องคอมไพล์ใหม่ด้วยตนเอง นั่นคือสิ่งที่เป็นอยู่ตอนนี้

03:02.340 --> 03:04.300
มันจะมีการเปลี่ยนแปลงในภายหลังในหลักสูตร

03:04.300 --> 03:07.970
แต่เราต้องโหลดหน้านี้ใหม่ด้วยตนเองที่นี่

03:07.970 --> 03:13.900
และเพื่อเร่งความเร็วและทำให้แน่ใจว่าคุณไม่ต้องทำสิ่งนี้ทุกครั้งที่คุณเปลี่ยนแปลงบางอย่าง

03:13.900 --> 03:16.540
เราจะเพิ่มเครื่องมืออื่นที่นี่ในการตั้งค่าจำลองนี้

03:16.540 --> 03:19.500
ซึ่งเราจะใช้ตลอดหลักสูตรนี้ เพื่อให้สิ่งนี้เกิดขึ้นโดยอัตโนมัติ

03:19.500 --> 03:22.360
.

03:22.360 --> 03:23.720
ตอนนี้เพื่อติดตั้งเครื่องมือดังกล่าว

03:23.720 --> 03:26.430
มาเรียกใช้ npm init ที่นี่

03:26.430 --> 03:29.830
ในโฟลเดอร์โปรเจ็กต์นี้ คำสั่ง npm จะพร้อมใช้งานหากคุณติดตั้งโหนด

03:29.830 --> 03:32.113
JS

03:32.960 --> 03:39.690
ตรวจสอบให้แน่ใจว่าคุณไปที่ nodejs org และดาวน์โหลดและติดตั้งเวอร์ชันล่าสุดที่คุณพบที่นี่

03:39.690 --> 03:43.040
ในขณะนี้ เราจะไม่เขียนโค้ด JS ของโหนดใดๆ แต่โหนด JS จะมาพร้อมกับเครื่องมือ

03:43.040 --> 03:51.210
NPM ซึ่งคุณสามารถใช้เพื่อติดตั้งการขึ้นต่อกันของบุคคลที่สามหรือเครื่องมือที่มีประโยชน์ซึ่งช่วยเร่งการพัฒนาของเรา

03:51.210 --> 03:53.840
ด้วยเหตุนี้ เราจึงต้องการที่นี่

03:53.840 --> 03:55.970
เมื่อติดตั้งแล้ว คุณสามารถเรียกใช้ npm

03:55.970 --> 03:57.800
init ในโฟลเดอร์โปรเจ็กต์นี้ได้

03:57.800 --> 04:00.560
เพียงแค่กด Enter และคุณสามารถตอบคำถามเหล่านี้ทั้งหมดได้ที่นี่ด้วยค่าเริ่มต้นเพียงแค่กด

04:00.560 --> 04:03.570
Enter ตลอดเวลา

04:03.570 --> 04:08.150
และเมื่อเสร็จสิ้น จะให้แพ็คเกจแก่คุณ json ซึ่งมีลักษณะดังนี้

04:08.150 --> 04:14.410
และตอนนี้คุณสามารถเรียกใช้การติดตั้ง npm เพื่อติดตั้งการพึ่งพาซึ่งเป็นเอกสิทธิ์ของโครงการนี้

04:14.410 --> 04:16.210
ดังนั้นในการติดตั้งเครื่องมือ

04:16.210 --> 04:17.730
คุณสามารถพูดได้ ซึ่งคุณสามารถใช้ในโครงการนี้

04:17.730 --> 04:29.930
-: -save-dev เพื่อทำเครื่องหมายว่าเป็นการพึ่งพาการพัฒนาเท่านั้น ดังนั้นเครื่องมือที่ช่วยเราในระหว่างการพัฒนาและไม่มีโค้ดใดๆ ซึ่งจะ ดำเนินการเป็นส่วนหนึ่งของรหัสหลักของเรา

04:29.930 --> 04:33.470
และชื่อเครื่องมือคือ lite-server

04:33.470 --> 04:37.103
หากคุณกด Enter ที่นี่ จะเป็นการติดตั้งเครื่องมือพิเศษนี้

04:38.230 --> 04:42.000
และเมื่อเสร็จสิ้น เพียงไปที่แพ็คเกจของคุณ json และในส่วนของสคริปต์ ให้เพิ่มเครื่องหมายจุลภาค

04:42.000 --> 04:44.390
และเพิ่มสคริปต์ใหม่ที่คุณจะตั้งชื่อว่า

04:44.390 --> 04:46.870
start

04:46.870 --> 04:51.570
จากนั้นป้อน lite-server เป็นค่าระหว่างเครื่องหมายคำพูดคู่

04:51.570 --> 04:54.580
นั่นคือชื่อของแพ็คเกจที่เพิ่มเข้ามาที่นี่

04:54.580 --> 04:59.400
หากคุณกด Enter คุณสามารถเรียกใช้ npm start ที่นี่เพื่อเริ่มสคริปต์เริ่มต้นนี้

04:59.400 --> 05:02.530
และเซิร์ฟเวอร์ lite เป็นเซิร์ฟเวอร์สำหรับการพัฒนาอย่างง่าย

05:02.530 --> 05:08.410
ซึ่งให้บริการดัชนีเสมอ html ถัดจากหน้า

05:08.410 --> 05:08.410
json ดังนั้นไฟล์นี้

05:08.410 --> 05:13.410
และให้บริการแอปพลิเคชันของคุณบน URL นี้ที่คุณเห็นที่นี่ localhost:3000

05:13.620 --> 05:16.143
โดยค่าเริ่มต้น

05:17.440 --> 05:19.690
จากนั้นคุณก็สามารถเยี่ยมชมสถานที่นี้ได้

05:19.690 --> 05:23.090
เพียงป้อน localhost:3000 ในเบราว์เซอร์

05:23.090 --> 05:24.860
และตอนนี้รหัสของคุณทำงานที่นี่

05:24.860 --> 05:26.170
แล้วทำไมถึงดีกว่านี้?

05:26.170 --> 05:32.180
ตอนนี้จะโหลดหน้าใหม่โดยอัตโนมัติเมื่อใดก็ตามที่ไฟล์อื่นในไดเร็กทอรีนี้เปลี่ยนแปลง

05:32.180 --> 05:35.130
ตัวอย่างเช่น ถ้าฉันใส่เครื่องหมายอัศเจรีย์ที่นี่

05:35.130 --> 05:38.180
และบันทึกมัน แล้วคอมไพล์มันอีกครั้งด้วยแอพ

05:38.180 --> 05:40.323
tsc TS และคุณกลับไปที่เบราว์เซอร์

05:42.270 --> 05:43.580
คุณจะเห็นผลลัพธ์ล่าสุดทันที

05:43.580 --> 05:47.230
เพราะมันโหลดใหม่โดยอัตโนมัติ

05:47.230 --> 05:51.690
และนั่นช่วยให้เราไม่ต้องทำงานเพิ่มเติมในการโหลดซ้ำด้วยตนเอง

05:51.690 --> 05:54.540
ตอนนี้สิ่งสำคัญเกี่ยวกับกระบวนการเริ่มต้น npm

05:54.540 --> 05:57.450
นี้ ให้ทำงานต่อไปตราบเท่าที่คุณกำลังทำงานในโครงการของคุณ

05:57.450 --> 06:02.800
ตราบใดที่คุณกำลังเขียนโค้ดที่คุณต้องการเห็นการดำเนินการในเบราว์เซอร์

06:02.800 --> 06:03.633
เมื่อคุณทำเสร็จแล้ว

06:03.633 --> 06:06.450
คุณสามารถออกจากกระบวนการนี้ได้ตลอดเวลาด้วยการควบคุม

06:06.450 --> 06:08.200
C แต่เมื่อคุณทำเช่นนั้น โครงการของคุณจะไม่ได้รับการให้บริการภายใต้โฮสต์ท้องถิ่น

06:08.200 --> 06:11.600
3000 อีกต่อไป

06:11.600 --> 06:15.650
ดังนั้นให้มันทำงานต่อไปตราบเท่าที่คุณกำลังเขียนโค้ดและทำการเปลี่ยนแปลง

06:15.650 --> 06:17.510
ด้วยสิ่งนั้น ฉันจะเปลี่ยนกลับ

06:17.510 --> 06:19.200
แต่ทั้งนี้ขึ้นอยู่กับคุณ

06:19.200 --> 06:22.410
และนี่คือการตั้งค่าโครงการที่ฉันจะใช้ตลอดหลักสูตรนี้

06:22.410 --> 06:25.530
แน่นอนว่าคุณจะพบว่ามันแนบมาด้วยในแบบฟอร์มที่เสร็จแล้ว

06:25.530 --> 06:27.250
บันทึกสำคัญเพียงข้อเดียว

06:27.250 --> 06:30.330
หากคุณดาวน์โหลดโครงการเริ่มต้นที่แนบมา

06:30.330 --> 06:32.500
หรือสแน็ปช็อตของหลักสูตรอื่นๆ

06:32.500 --> 06:35.900
สแนปชอตโค้ดอื่นๆ ที่คุณพบได้ทุกที่ในหลักสูตร

06:35.900 --> 06:41.070
คุณจะได้รับการดาวน์โหลดที่ไม่มีโฟลเดอร์โมดูลโหนดนี้

06:41.070 --> 06:46.970
นี่เป็นโฟลเดอร์ขนาดใหญ่ซึ่งในตอนท้ายจะจัดเก็บแพ็คเกจของบุคคลที่สามและการอ้างอิงทั้งหมด

06:46.970 --> 06:49.840
และเนื่องจากมันมีขนาดใหญ่มาก ฉันมักจะลบมันออก

06:49.840 --> 06:52.260
เพราะคุณสามารถสร้างมันใหม่ได้ง่ายๆ

06:52.260 --> 06:54.080
ด้วยการรัน npm install

06:54.080 --> 06:56.640
ดังนั้นหากคุณดาวน์โหลดไฟล์แนบของฉัน

06:56.640 --> 06:59.010
ให้ไปที่โฟลเดอร์ที่แยกออกมา และเรียกใช้การติดตั้ง

06:59.010 --> 07:01.530
npm ในโฟลเดอร์นั้น

07:01.530 --> 07:06.110
และสิ่งนี้จะติดตั้งการอ้างอิงทั้งหมดและสร้างโฟลเดอร์โมดูลโหนดนี้ใหม่

07:06.110 --> 07:07.280
และเมื่อคุณทำสิ่งนี้แล้ว

07:07.280 --> 07:08.610
คุณสามารถเรียกใช้ npm start

07:08.610 --> 07:11.330
หรือทำอะไรก็ได้ที่คุณต้องการในโปรเจกต์นี้

07:11.330 --> 07:14.750
ด้วยเหตุนี้ เราจึงมีการตั้งค่าโปรเจ็กต์นี้ที่เราจะใช้ตลอดหลักสูตร

07:14.750 --> 07:16.810
เพื่อไม่ให้เป็นการเสียเวลาอีกต่อไป

07:16.810 --> 07:18.303
มาเริ่มกันเลยดีกว่า
