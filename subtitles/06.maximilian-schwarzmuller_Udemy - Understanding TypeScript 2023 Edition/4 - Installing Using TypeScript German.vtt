WEBVTT

00:02.160 --> 00:04.930
Kursleiter: Hier ist das gleiche Beispiel in

00:04.930 --> 00:06.440
einem echten Projekt.

00:06.440 --> 00:08.550
Sie finden dieses einfache Projekt, die Index-HTML-Datei

00:08.550 --> 00:11.270
und diese JavaScript-Datei in einer Unterdatei, die an dieses

00:11.270 --> 00:13.340
Video angehängt ist.

00:13.340 --> 00:16.900
Sie können diese einfach öffnen und dann die Index-HTML-Datei öffnen.

00:16.900 --> 00:18.610
Sie können den Code auch in einem

00:18.610 --> 00:20.890
beliebigen Texteditor Ihrer Wahl öffnen.

00:20.890 --> 00:22.160
Hier verwende ich VisualStudioCode,

00:22.160 --> 00:25.000
und ich werde später in diesem Modul auf meine genaue Konfiguration

00:25.000 --> 00:26.250
zurückkommen.

00:26.250 --> 00:29.250
Sie können diese beiden Textdateien einfach mit einem

00:29.250 --> 00:31.180
beliebigen Texteditor öffnen.

00:31.180 --> 00:34.110
Darin finden Sie diese JavaScript-Datei, die

00:34.110 --> 00:37.000
mit der Index-HTML-Datei interagiert.

00:37.000 --> 00:38.830
In der Index-HTML-Datei finden Sie

00:38.830 --> 00:41.050
zwei Eingaben, die Schaltfläche und eine

00:41.050 --> 00:43.698
JavaScript-Datei, die hier importiert wird.

00:43.698 --> 00:45.843
Im Grunde erreichen wir diese Elemente.

00:45.843 --> 00:47.968
Dann haben wir hier eine Funktion und einen Ereignislistener

00:47.968 --> 00:50.020
auf der Schaltfläche, der die Funktion auslöst

00:50.020 --> 00:53.830
und das Ergebnis der Funktion hier in der Konsole protokolliert.

00:53.830 --> 00:56.750
Wenn wir nun diese Index-HTML-Datei öffnen, indem

00:56.750 --> 01:00.701
wir im Windows-Explorer oder im Mac-Finder darauf doppelklicken,

01:00.701 --> 01:03.220
so dass sie sich in einem Browser öffnet, werden

01:03.220 --> 01:05.150
Sie folgendes sehen.

01:05.150 --> 01:07.250
Die beiden Eingänge und die Schaltfläche "Hinzufügen"

01:07.250 --> 01:11.170
und hier habe ich auch die Browser-Entwicklerwerkzeuge geöffnet.

01:11.170 --> 01:13.760
Wenn Sie hier zum Beispiel 10 und fünf eingeben,

01:13.760 --> 01:16.640
erwarten Sie vielleicht, dass das Ergebnis hier rechts

01:16.640 --> 01:19.420
15 ist, aber stattdessen sehen Sie 105.

01:19.420 --> 01:23.460
Dies zeigt uns eine Schwäche von JavaScript auf.

01:23.460 --> 01:25.890
Es handelt sich nicht um einen technischen Fehler.

01:25.890 --> 01:28.050
Es handelt sich nicht um einen Fehler, der ausgelöst

01:28.050 --> 01:31.640
wird, sondern um einen logischen Fehler in unserer Anwendung.

01:31.640 --> 01:33.986
Woher kommt nun aber dieser Fehler?

01:33.986 --> 01:37.490
Nun, hier in JavaScript, erreiche ich diese beiden Eingaben und

01:37.490 --> 01:39.612
wenn die Schaltfläche angeklickt wird,

01:39.612 --> 01:41.920
erhalte ich am Ende die Werte der beiden Eingabeelemente

01:41.920 --> 01:45.300
und übergebe sie hier, um sie hinzuzufügen.

01:45.300 --> 01:46.970
Und hier ist es wichtig zu wissen,

01:46.970 --> 01:50.100
dass in JavaScript, wenn Sie auf den Wert eines Eingabeelements

01:50.100 --> 01:53.130
zugreifen, es immer eine Zeichenkette ist.

01:53.130 --> 01:55.790
Immer, unabhängig davon, um welche Art von Eingabe es sich handelt.

01:55.790 --> 01:59.633
Unabhängig davon, ob es sich um eine Zahl handelt oder nicht, handelt es sich immer um eine Zeichenkette.

02:00.645 --> 02:03.995
Ich übergebe also am Ende zwei Zeichenketten an diese Funktion, und

02:03.995 --> 02:05.890
wenn Sie zwei Zeichenketten in JavaScript

02:05.890 --> 02:09.570
hinzufügen, werden sie verkettet, anstatt mathematisch addiert.

02:09.570 --> 02:14.210
Deshalb sehen wir 105, 10 und fünf aneinandergereiht.

02:14.210 --> 02:17.090
Das ist das Problem mit JavaScript hier.

02:17.090 --> 02:19.980
Und das ist etwas, bei dem TypeScript uns helfen kann.

02:19.980 --> 02:22.360
Ohne TypeScript könnten wir hier natürlich

02:22.360 --> 02:24.380
eine if-Prüfung hinzufügen und

02:24.380 --> 02:28.048
prüfen, ob der Typ von num one gleich number ist.

02:28.048 --> 02:33.048
Und wenn der Typ von num zwei gleich Zahl ist, und wenn das der Fall ist,

02:34.030 --> 02:37.390
dann gebe ich meine Berechnung so zurück, sonst

02:37.390 --> 02:40.588
könnte ich einen Fehler auslösen oder ich konvertiere

02:40.588 --> 02:43.304
zumindest beide in Zahlen, indem ich ein

02:43.304 --> 02:47.428
Plus vor jedem Parameter hier hinzufüge.

02:47.428 --> 02:50.510
Das ist ein Code, den wir schreiben könnten.

02:50.510 --> 02:53.023
Vielleicht ein bisschen raffinierter als dies in JavaScript.

02:53.023 --> 02:57.130
Und damit würden wir sicherstellen, dass wir Zahlen oder die Eingaben

02:57.130 --> 03:00.670
in Zahlen umwandeln, wenn sie noch keine Zahlen sind.

03:00.670 --> 03:02.430
Wenn ich dies also neu lade

03:02.430 --> 03:05.220
und wiederhole, erhalten wir aufgrund

03:05.220 --> 03:07.590
des geänderten Codes jetzt 15.

03:07.590 --> 03:09.350
Das können wir natürlich auch in JavaScript machen.

03:09.350 --> 03:10.970
Und das ist Vanilla JavaScript,

03:10.970 --> 03:13.440
nichts TypeScript-artiges.

03:13.440 --> 03:16.640
Aber wir haben einen zusätzlichen Code für einen Fehler geschrieben, den

03:16.640 --> 03:19.048
ich eigentlich von vornherein verhindern möchte.

03:19.048 --> 03:22.210
Ich möchte nicht, dass dies geschieht.

03:22.210 --> 03:26.260
Ich möchte sicherstellen, dass wir hier keine Zeichenketten an add übergeben

03:26.260 --> 03:28.930
können, denn add sollte eine Funktion sein, die nur mit

03:29.890 --> 03:31.020
Zahlen arbeitet.

03:31.020 --> 03:32.570
Damit wir dort nicht prüfen müssen,

03:33.428 --> 03:35.650
ob wir eine Zahl erhalten oder nicht.

03:35.650 --> 03:37.000
Daher möchte ich diese Funktion in dem

03:37.000 --> 03:38.500
Zustand belassen, in dem sie vorher war.

03:38.500 --> 03:41.630
Ich möchte diese Funktion hier haben, genau wie diese.

03:41.630 --> 03:44.003
Und genau dabei kann uns TypeScript helfen.

03:45.088 --> 03:45.921
TypeScript kann uns

03:45.921 --> 03:48.900
also in solchen Situationen helfen, wie ich gerade gezeigt habe.

03:48.900 --> 03:52.690
Um nun zu sehen, wie es uns hilft, installieren wir es.

03:52.690 --> 03:56.590
Also auf typescriptlang. org, können Sie auf Download klicken.

03:56.590 --> 03:58.540
Dort erfahren Sie auch, wie Sie es installieren können.

03:58.540 --> 04:00.250
Und wir werden es mit diesem Befehl

04:01.136 --> 04:02.880
installieren, der das NPM-Tool

04:02.880 --> 04:06.750
verwendet, und das NPM-Tool ist Teil des Node JS-Pakets.

04:06.750 --> 04:10.210
Auch wenn wir hier keinen Node-JS-Code schreiben werden,

04:10.210 --> 04:12.910
müssen wir Node-JS installieren, weil es hinter

04:12.910 --> 04:14.760
den Kulissen auch von einigen Tools

04:14.760 --> 04:17.770
verwendet wird, die wir einsetzen.

04:17.770 --> 04:21.780
Und wenn wir Node JS installieren, installieren wir auch NPM,

04:21.780 --> 04:24.956
den Node Package Manager, ein Tool, mit dem wir dann

04:24.956 --> 04:29.200
TypeScript global auf unserem Rechner installieren können.

04:29.200 --> 04:31.452
Besuchen Sie also einfach nodejs. org und installieren

04:31.452 --> 04:34.220
Sie dort die neueste Version, die Sie hier finden.

04:34.220 --> 04:35.723
Klicken Sie einfach auf diese Schaltfläche.

04:36.586 --> 04:38.276
Es wird dann heruntergeladen und installiert, oder Sie können

04:38.276 --> 04:39.420
durch das Installationsprogramm gehen.

04:39.420 --> 04:42.360
Sie wird für alle Betriebssysteme unterstützt.

04:42.360 --> 04:45.300
Und sobald Sie Node JS installiert haben,

04:45.300 --> 04:47.936
können Sie diesen Befehl ausführen.

04:47.936 --> 04:51.440
Öffnen Sie einfach Ihr normales Terminal oder die Eingabeaufforderung

04:51.440 --> 04:54.800
und kopieren Sie diesen Befehl hinein.

04:54.800 --> 04:57.223
Wichtig: Auf Mac und Linux müssen Sie möglicherweise sudo davor

04:57.223 --> 04:59.412
setzen, um die richtigen Berechtigungen zu erhalten.

04:59.412 --> 05:02.810
Unter Windows ist dies nicht erforderlich.

05:02.810 --> 05:05.100
Stellen Sie also einfach sicher, dass Sie TypeScript

05:05.100 --> 05:06.810
mit diesem Befehl installieren.

05:06.810 --> 05:09.372
Geben Sie Ihr Passwort ein, falls Sie dazu aufgefordert werden sollten.

05:09.372 --> 05:12.176
Und damit haben Sie TypeScript global auf Ihrem

05:12.176 --> 05:15.430
Rechner installiert, was bedeutet das nun?

05:15.430 --> 05:17.696
TypeScript installiert.

05:17.696 --> 05:20.810
Denken Sie daran, dass TypeScript eine Programmiersprache ist,

05:20.810 --> 05:22.750
aber es ist nur eine Programmiersprache,

05:22.750 --> 05:25.212
die funktioniert, weil wir auch diesen Compiler

05:25.212 --> 05:28.137
haben, dieses Tool, das JavaScript kompiliert.

05:28.137 --> 05:31.310
Was wir hier also installiert haben, ist der Compiler

05:31.310 --> 05:33.296
und alles, was er wissen muss,

05:33.296 --> 05:36.116
um TypeScript-Code zu verstehen und ihn

05:36.116 --> 05:39.020
in JavaScript zu konvertieren.

05:39.020 --> 05:41.036
Damit haben wir den Compiler installiert

05:41.036 --> 05:44.460
und können nun den TSC-Befehl ausführen, der diesen TypeScript-Compiler

05:44.460 --> 05:47.210
aufruft, um eine TypeScript-Datei in JavaScript

05:47.210 --> 05:50.870
zu kompilieren.

05:50.870 --> 05:54.140
Um dies in dem Projekt zu sehen, an dem wir gearbeitet haben, fügen wir einfach

05:54.140 --> 05:56.563
eine neue Datei mit ts hinzu. ts zum Beispiel.

05:56.563 --> 05:58.677
Der Name ist frei wählbar, aber die Erweiterung sollte . ts, das

05:58.677 --> 06:03.677
für TypeScript steht.

06:05.100 --> 06:07.651
Kopieren wir nun den JavaScript-Code

06:07.651 --> 06:09.850
in die TypeScript-Datei.

06:09.850 --> 06:13.100
Hier in VisualStudioCode erhalte ich sofort einige Fehler, die wir

06:13.100 --> 06:14.280
nun beheben werden.

06:14.280 --> 06:16.379
Und das ist ein großer Vorteil von TypeScript.

06:16.379 --> 06:18.915
Wenn Sie die richtige IDE verwenden, und ich

06:18.915 --> 06:22.710
empfehle Ihnen dringend VisualStudioCode, worauf ich später

06:22.710 --> 06:24.420
noch zurückkommen werde.

06:24.420 --> 06:27.810
Dann erhalten Sie bereits in der IDE eine großartige Unterstützung, wenn

06:27.810 --> 06:30.230
Sie innerhalb von TypeScript-Dateien arbeiten.

06:30.230 --> 06:34.710
Schon hier kann TypeScript meinen Code analysieren und einige

06:34.710 --> 06:36.910
Schwachstellen aufdecken.

06:36.910 --> 06:39.720
Das ist großartig, denn das ist genau das, was ich will.

06:39.720 --> 06:42.110
In diesem Beispiel möchte ich also nur die

06:42.110 --> 06:44.003
JavaScript-Datei JS löschen.

06:45.952 --> 06:48.360
Und damit sind einige der Fehler verschwunden, denn

06:48.360 --> 06:50.539
es wurde festgestellt, dass einige Konstanten

06:50.539 --> 06:53.230
usw. in mehreren Dateien verwendet wurden.

06:53.230 --> 06:55.787
Aber ich erhalte dort immer noch eine Fehlermeldung.

06:55.787 --> 06:57.700
Sie sehen zum Beispiel, dass es nicht sicher

06:57.700 --> 07:00.108
ist, ob es wirklich eine Werteigenschaft gibt.

07:00.108 --> 07:03.200
Das ist ein Fehler, den ich bei JavaScript noch nicht einmal

07:03.200 --> 07:05.720
in Erwägung gezogen habe, aber er ist wahr.

07:05.720 --> 07:08.350
Ich wähle hier ein Element nach ID aus.

07:08.350 --> 07:11.680
Nun kann TypeScript nicht wissen, ob das wirklich funktioniert.

07:11.680 --> 07:13.160
Vielleicht habe ich hier einen Tippfehler.

07:13.160 --> 07:15.940
In diesem Fall wäre es nicht möglich, ein Element auszuwählen.

07:15.940 --> 07:17.704
Dieses Element würde auf der Seite einfach nicht vorhanden sein.

07:17.704 --> 07:20.164
Es könnte sich also um einen Tippfehler handeln, und TypeScript analysiert

07:20.164 --> 07:22.472
Ihren HTML-Code nicht, um herauszufinden, ob dies funktioniert.

07:22.472 --> 07:24.468
Zum einen könnte dies also scheitern.

07:24.468 --> 07:28.740
Aber selbst wenn es gelingt und wir dort ein Element auswählen, muss es nicht

07:28.740 --> 07:30.910
unbedingt ein Eingabeelement sein.

07:30.910 --> 07:34.720
Es könnte jedes andere Element sein, und die meisten HTML-Elemente haben keine

07:34.720 --> 07:37.450
Werteigenschaft, auf die Sie zugreifen können.

07:37.450 --> 07:38.630
Und das ist schon großartig.

07:38.630 --> 07:41.372
TypeScript zwingt uns dazu, expliziter zu sein,

07:41.372 --> 07:44.060
unsere Absichten klarer zu formulieren und

07:44.060 --> 07:46.130
unseren Code zu überprüfen.

07:46.130 --> 07:48.100
Und hier zum Beispiel, und Sie müssen die

07:48.100 --> 07:49.820
ganze Syntax nicht verstehen.

07:49.820 --> 07:52.172
Wir werden es im Laufe des Kurses Schritt für Schritt lernen.

07:52.172 --> 07:55.660
Aber zum Beispiel hier könnten wir TypeScript wissen lassen, dass wir

07:55.660 --> 07:58.204
sicher sind, dass wir ein Element erhalten, indem wir

07:58.204 --> 08:00.080
ein Ausrufezeichen hinzufügen.

08:00.080 --> 08:04.170
Dies sagt TypeScript im Grunde, dass dies niemals null ergibt.

08:04.170 --> 08:06.370
Damit wird immer ein Element gefunden.

08:06.370 --> 08:08.420
Und als Entwickler weiß ich natürlich,

08:08.420 --> 08:10.350
dass dies immer ein Element finden wird,

08:10.350 --> 08:11.920
weil ich die ID doppelt überprüft

08:11.920 --> 08:14.763
habe und sehe, ja, ich habe diese ID hier.

08:15.610 --> 08:17.270
Außerdem weiß ich jetzt, dass es sich

08:17.270 --> 08:19.500
immer um ein Eingabeelement handeln wird.

08:19.500 --> 08:22.408
Wir können also als HTML-Eingabeelement eine Syntax namens

08:22.408 --> 08:25.470
Typecasting verwenden, die ich später noch näher erläutern

08:25.470 --> 08:27.746
werde, um TypeScript wissen zu lassen, welcher

08:27.746 --> 08:30.327
Typ von Element dies sein wird.

08:30.327 --> 08:32.926
Wir können dies auch auf das zweite Element anwenden.

08:32.926 --> 08:35.650
Nur um das klarzustellen: Das ist die

08:35.650 --> 08:37.510
TypeScript-Syntax.

08:37.510 --> 08:39.520
Ich kann dieses Ausrufezeichen hier verwenden

08:39.520 --> 08:41.600
und ich kann diese Typisierung hier verwenden,

08:41.600 --> 08:44.786
denn wir befinden uns in einem . ts-Datei, befinden wir uns in einer TypeScript-Datei.

08:44.786 --> 08:48.380
Wir werden dies in JavaScript kompilieren.

08:48.380 --> 08:51.050
Dies würde in Vanilla JavaScript nicht funktionieren.

08:51.050 --> 08:53.427
Diese ist dort nicht verfügbar.

08:53.427 --> 08:56.300
Dadurch sind wir gezwungen, unsere Absichten klarer zu formulieren

08:56.300 --> 08:58.460
und wirklich über unseren Code nachzudenken

08:58.460 --> 09:01.060
und ihn zu überprüfen, was großartig ist.

09:01.060 --> 09:03.160
Aber das ist nicht einmal der größte Vorteil.

09:04.270 --> 09:06.820
Der größte Vorteil ist der Zusatz von Typen.

09:06.820 --> 09:09.630
Das ist es, was TypeScript seinen Namen gibt.

09:09.630 --> 09:12.282
Und hier sage ich nichts über die Datentypen, mit

09:12.282 --> 09:14.204
denen diese Funktion arbeitet.

09:14.204 --> 09:17.886
Wenn wir den Mauszeiger über einen dieser Parameter

09:17.886 --> 09:20.126
bewegen, sehen wir das hier.

09:20.126 --> 09:22.828
Und am Ende sagt TypeScript zu uns: "Ich

09:22.828 --> 09:24.880
weiß nicht, was da drin ist. Es kann sich dabei um jede Art von Wert handeln.

09:24.880 --> 09:27.162
Jetzt können wir einen expliziteren Typ in TypeScript-Dateien hinzufügen.

09:27.162 --> 09:31.960
Also nicht in JavaScript-Dateien, sondern in TypeScript-Dateien, indem man hier einen Doppelpunkt

09:31.960 --> 09:33.806
hinzufügt und dann den Typ angibt.

09:33.806 --> 09:38.580
Zum Beispiel die Nummer.

09:38.580 --> 09:40.730
Ich mache dies hier und das hier.

09:40.730 --> 09:43.300
Mit dieser zusätzlichen Syntax, die TypeScript

09:43.300 --> 09:45.246
und der Compiler verstehen, teilen

09:45.246 --> 09:47.928
wir TypeScript mit, dass dies hier vom Typ number

09:47.928 --> 09:50.960
und dies vom Typ number sein wird.

09:50.960 --> 09:54.010
Und deshalb bekommen wir jetzt hier wieder einen Fehler.

09:54.010 --> 09:56.126
Dieser Fehler tritt übrigens

09:56.126 --> 09:58.060
nicht nur in der IDE auf.

09:58.060 --> 09:59.370
Wir erhalten sie auch, wenn wir

09:59.370 --> 10:01.940
versuchen, diesen Code zu kompilieren, denn das ist es, was

10:01.940 --> 10:03.820
wir letztendlich tun müssen, nicht wahr?

10:03.820 --> 10:05.326
Um dies zu kompilieren, werde ich ein Terminal öffnen.

10:05.326 --> 10:08.670
Und hier öffne ich gerade mein Terminal oder die Eingabeaufforderung,

10:08.670 --> 10:10.760
die in diese IDE integriert ist.

10:10.760 --> 10:13.683
Es ist die normale Eingabeaufforderung des Systems.

10:14.947 --> 10:16.530
Das normale Systemkommando-Terminal

10:16.530 --> 10:18.110
habe ich auch hier verwendet, nur eben schon

10:18.110 --> 10:19.533
in diesen Ordner navigiert.

10:20.510 --> 10:22.446
Wenn Sie also kein eingebautes

10:22.446 --> 10:27.420
IDE-Terminal verwenden, können Sie Ihr normales Terminal benutzen, aber die

10:27.420 --> 10:30.265
CD navigiert in den extrahierten Startordner,

10:30.265 --> 10:33.960
wo Sie Ihre TypeScript-Datei hinzugefügt haben.

10:33.960 --> 10:36.300
Sobald Sie sich in diesem Ordner befinden, können Sie TSC ausführen.

10:36.300 --> 10:38.888
Dadurch wird der TypeScript-Compiler aufgerufen,

10:38.888 --> 10:42.980
den wir zuvor mit dem Bindestrich ts installiert haben. ts.

10:42.980 --> 10:47.980
Und wenn Sie dies ausführen, erhalten Sie tatsächlich eine Fehlermeldung.

10:47.990 --> 10:50.728
Sie erhalten trotzdem eine JavaScript-Datei,

10:50.728 --> 10:53.267
da TypeScript sie standardmäßig zu JavaScript

10:53.267 --> 10:57.460
kompiliert. Sie werden später in diesem Kurs auch lernen, wie Sie

10:57.460 --> 11:00.050
dies unterdrücken können.

11:00.050 --> 11:02.900
Dabei wird jedoch ein Compilerfehler angezeigt.

11:02.900 --> 11:05.904
Es sagt Ihnen, dass ein Argument vom Typ string nicht einem

11:05.904 --> 11:09.070
Parameter vom Typ number zugewiesen werden kann.

11:09.070 --> 11:13.128
Das Problem hier ist, dass TypeScript versteht, dass das, was wir

11:13.128 --> 11:16.550
über die value-Eigenschaft unseres Eingabeelements

11:16.550 --> 11:18.930
erhalten, ein String sein wird.

11:18.930 --> 11:23.130
Wir sehen das auch hier im IDE.

11:23.130 --> 11:24.786
Und das können wir nicht an add übergeben,

11:24.786 --> 11:28.130
weil wir dort keine Zeichenkette, sondern eine Zahl wollen.

11:28.130 --> 11:31.026
Wir müssen dies also korrigieren, indem wir z. B. ein Pluszeichen

11:31.026 --> 11:33.600
anhängen und dies in eine Zahl umwandeln.

11:33.600 --> 11:36.790
Sobald wir dies getan haben, können wir den Code erneut

11:36.790 --> 11:39.708
kompilieren, indem wir diesen Befehl wiederholen,

11:39.708 --> 11:42.406
und jetzt wird er ohne Fehler kompiliert.

11:42.406 --> 11:45.225
Es gibt uns dies mit TypeScript. JavaScript-Datei und jetzt zeigt es wieder einige

11:45.225 --> 11:49.030
Fehler an, weil es nicht versteht,

11:49.030 --> 11:50.690
dass es hier niemals beide Dateien

11:50.690 --> 11:53.090
gleichzeitig verwenden wird.

11:54.028 --> 11:55.373
Auch dies ist etwas, das später im Kurs

11:56.466 --> 11:58.530
besser wird, sobald wir es konfiguriert haben.

11:58.530 --> 12:00.428
Das können wir vorerst ignorieren.

12:00.428 --> 12:01.261
Ich erhalte also diese Datei.

12:02.588 --> 12:04.348
Und wenn wir das öffnen, sehen wir hier etwas Interessantes.

12:04.348 --> 12:06.210
Wir sehen, dass dort natürlich unsere Typen weg sind.

12:06.210 --> 12:08.690
Dieses Gussteil hier ist weg.

12:08.690 --> 12:11.280
Wir haben wieder Vanilla JavaScript.

12:11.280 --> 12:13.308
Wenn wir also einen Blick auf unsere TypeScript-Datei

12:13.308 --> 12:16.250
werfen, sehen wir, dass wir dort all diese netten Ergänzungen haben.

12:16.250 --> 12:18.786
Aber wie gesagt, das sind nur TypeScript-Funktionen.

12:18.786 --> 12:22.130
Bei der Kompilierung in JavaScript werden sie verwendet, um Ihren

12:22.130 --> 12:24.600
Code zu bewerten und mögliche Fehler zu finden,

12:24.600 --> 12:26.770
aber dann werden sie entfernt und wir erhalten

12:26.770 --> 12:29.090
normales JavaScript als Ausgabe.

12:29.090 --> 12:33.960
Jetzt können wir zu unserer Index-HTML-Datei gehen

12:33.960 --> 12:37.010
und mit ts importieren. js und das ist wichtig.

12:37.010 --> 12:41.230
Importieren Sie immer JavaScript-Dateien,

12:41.230 --> 12:43.550
da der Browser TypeScript nicht ausführen kann.

12:43.550 --> 12:45.990
Wir müssen das Ergebnis unserer Kompilierung importieren.

12:45.990 --> 12:49.480
Und jetzt, wenn wir das neu laden, haben wir unseren funktionierenden

12:49.480 --> 12:52.108
Code, weil wir jetzt richtigen JavaScript-Code

12:52.108 --> 12:55.750
haben, wo wir dieses Problem behoben haben, indem wir unsere Eingaben

12:55.750 --> 12:57.970
gegossen haben, bevor wir sie an die Funktion

12:59.410 --> 13:01.110
übergeben haben.

13:01.110 --> 13:03.010
Aber wir waren in der Lage, diese Probleme zu beheben,

13:03.986 --> 13:06.087
weil wir hier unsere Typkommentare verwenden.

13:06.087 --> 13:08.100
Und wie Sie gesehen haben, mussten wir auch

13:08.100 --> 13:10.720
einige andere Teile des Codes sauberer schreiben.

13:10.720 --> 13:13.220
Und das ist der Grund, warum TypeScript so erstaunlich ist.

13:13.220 --> 13:15.400
Sie zwingt uns dazu, besseren, saubereren und

13:15.400 --> 13:17.880
weniger fehleranfälligen Code zu schreiben.
