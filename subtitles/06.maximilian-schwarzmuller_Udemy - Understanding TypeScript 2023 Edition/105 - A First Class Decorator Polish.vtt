WEBVTT

00:02.130 --> 00:05.620
-: Do tego dołączony jest nasz stary dobry projekt startowy,

00:05.620 --> 00:08.470
już uruchomiłem serwer z NPM start.

00:08.470 --> 00:12.320
A proces oglądania TypeScript z TSC-W.

00:12.320 --> 00:14.870
I bardzo pierwszą rzeczą, którą musimy skonfigurować

00:14.870 --> 00:18.030
tam jest w pliku tsconfig, upewnij się, że twój cel jest

00:18.030 --> 00:21.620
ustawiony na es6, a następnie, jeśli przewiniesz w dół, upewnij

00:21.620 --> 00:24.230
się, że dodajesz tę eksperymentalną linię

00:24.230 --> 00:26.720
dekoratora tutaj.

00:26.720 --> 00:28.380
I dodaj przecinek przed tym, a następnie

00:28.380 --> 00:31.700
możesz AutoFormat, aby sformatować to wszystko poprawnie.

00:31.700 --> 00:34.020
Jest to ważne, w przeciwnym razie nie będziesz mógł

00:34.020 --> 00:36.000
używać dekoratorów w swoim projekcie.

00:36.000 --> 00:37.250
Więc upewnij się, że podrasujesz

00:37.250 --> 00:40.540
swój tsconfig. plik json odpowiednio.

00:40.540 --> 00:42.630
I z tym możemy zanurzyć się w prawo i napisać

00:42.630 --> 00:46.980
nasz pierwszy dekorator tutaj w aplikacji. plik ts.

00:46.980 --> 00:50.950
A ja chcę zacząć od dekoratora, który możemy dodać do klasy.

00:50.950 --> 00:54.530
Teraz dekoratory w ogóle dotyczą klas, ale to jest

00:54.530 --> 00:55.363
dekorator,

00:55.363 --> 00:58.220
który dodamy do klasy jako całości.

00:58.220 --> 01:00.730
W tym celu powiedzmy, że mamy klasę, Person,

01:00.730 --> 01:04.360
bardzo trywialną klasę, w której mamy nazwę.

01:04.360 --> 01:07.530
Może mieć wartość Max, wstępnie zainicjowaną tutaj.

01:07.530 --> 01:10.520
Gdzie mamy funkcję konstruktora, gdzie po prostu loguję

01:10.520 --> 01:12.600
Tworzenie obiektu osoby, abyśmy widzieli,

01:12.600 --> 01:14.763
że jest to wykonywane.

01:15.880 --> 01:19.363
A potem oczywiście możemy stworzyć tutaj nową osobę, z nowym

01:20.760 --> 01:22.910
słowem kluczowym, tak jak tutaj.

01:22.910 --> 01:24.030
A jeśli chcemy, to oczywiście

01:24.030 --> 01:26.490
możemy tę stworzoną osobę zalogować.

01:26.490 --> 01:28.330
I to nie powinno trzymać żadnych niespodzianek,

01:28.330 --> 01:29.430
jeśli zapiszemy to wszystko,

01:29.430 --> 01:32.090
to kompiluje się bez błędów.

01:32.090 --> 01:33.700
I jeśli odwiedzimy naszą stronę

01:33.700 --> 01:36.670
wtedy, na Localhost: 3000, w konsoli JavaScript

01:36.670 --> 01:38.900
widzimy Creating person object, który

01:38.900 --> 01:41.140
pochodzi z konstruktora.

01:41.140 --> 01:44.603
I my, oczywiście, wszyscy widzimy tu samą Osobę.

01:45.810 --> 01:49.550
Teraz tam, w tym przykładzie nie mamy żadnych zaangażowanych dekoratorów.

01:49.550 --> 01:51.000
Zmieńmy to.

01:51.000 --> 01:53.370
Na górze pliku dodajmy dekorator.

01:53.370 --> 01:56.060
A dekorator, i to jest naprawdę ważne, aby zrozumieć,

01:56.060 --> 01:58.080
jest w końcu tylko funkcją.

01:58.080 --> 02:01.280
Funkcja, którą stosujesz do czegoś, na przykład

02:01.280 --> 02:03.530
do klasy w określony sposób.

02:03.530 --> 02:04.750
Utwórzmy więc tutaj

02:04.750 --> 02:09.523
funkcję, ze słowem kluczowym function, i nazwę ją Logger.

02:10.390 --> 02:13.290
Teraz jest to funkcja, jedyną specjalną rzeczą tutaj

02:13.290 --> 02:15.570
jest to, że zaczynam od dużego znaku.

02:15.570 --> 02:16.492
Nie jest to obowiązkowe,

02:16.492 --> 02:20.200
nie musisz używać dużych znaków startowych, możesz użyć

02:20.200 --> 02:22.470
małych liter, po prostu widzisz wiele

02:22.470 --> 02:25.610
dekoratorów w bibliotekach, z których możesz korzystać,

02:25.610 --> 02:32.200
które używają dużych znaków startowych i dlatego zrobię to samo tutaj.

02:32.200 --> 02:35.450
Tak więc funkcja Logger jest tutaj funkcją i

02:35.450 --> 02:39.330
możemy ją zastosować jako dekorator, jak się okaże.

02:39.330 --> 02:42.730
Teraz dodajmy tutaj log konsoli, Logging, abyśmy mogli zobaczyć,

02:42.730 --> 02:44.730
kiedy ta funkcja się uruchamia.

02:44.730 --> 02:47.300
Bo nie zadzwonię do niego bezpośrednio.

02:47.300 --> 02:50.330
Zamiast tego chcę dodać go jako dekorator do tej klasy.

02:50.330 --> 02:53.710
I robimy to poprzez dodanie symbolu @ tutaj przed

02:53.710 --> 02:57.370
klasą, a następnie naszej funkcji tutaj.

02:57.370 --> 02:58.440
Tak po prostu.

02:58.440 --> 03:00.320
Teraz kilka szczególnych rzeczy tutaj.

03:00.320 --> 03:03.780
Symbol @ jest tutaj specjalnym identyfikatorem, który

03:03.780 --> 03:06.170
TypeScript widzi lub rozpoznaje.

03:06.170 --> 03:09.110
A następnie rzecz bezpośrednio po symbolu @ powinna

03:09.110 --> 03:11.010
wskazywać na funkcję.

03:11.010 --> 03:13.460
Nie wykonuj go, ale wskaż na niego, który

03:13.460 --> 03:15.800
powinien być twoim dekoratorem.

03:15.800 --> 03:17.400
Teraz tutaj widzisz, że Logger następnie

03:17.400 --> 03:20.650
przyjmuje zbyt mało argumentów, aby użyć go jako dekoratora tutaj.

03:20.650 --> 03:23.010
Więc dobrą rzeczą jest to, że TypeScript rozumie,

03:23.010 --> 03:24.930
że chcę użyć go jako dekoratora tutaj.

03:24.930 --> 03:27.980
Złe jest to, że przekazujemy za mało argumentów.

03:27.980 --> 03:31.000
I rzeczywiście, dekoratorzy otrzymują argumenty.

03:31.000 --> 03:34.870
Ile argumentów zależy od tego, gdzie używasz dekoratora.

03:34.870 --> 03:39.710
Tutaj dla dekoratora, który dodajemy do klasy otrzymujemy jeden argument.

03:39.710 --> 03:42.910
To jest cel tego dekoratora, że tak powiem,

03:42.910 --> 03:46.160
który jest naszą funkcją konstruktora.

03:46.160 --> 03:49.020
Możemy więc powiedzieć, że otrzymujemy tutaj

03:49.020 --> 03:51.240
funkcję jako argument na końcu.

03:51.240 --> 03:54.110
Możemy również nazwać go konstruktorem, ponieważ

03:54.110 --> 03:56.650
w końcu otrzymamy naszą funkcję konstruktora

03:56.650 --> 03:59.550
tej klasy, lub którejkolwiek klasy, do której dodamy

03:59.550 --> 04:01.470
ten dekorator jako argument.

04:01.470 --> 04:06.310
Pocieszmy się też. zaloguj się, abyśmy mogli uzyskać pewien

04:06.310 --> 04:09.650
wgląd w ten argument konstruktora tutaj.

04:09.650 --> 04:10.550
I zapiszmy to.

04:10.550 --> 04:12.750
I jak widać kompiluje się bez błędów.

04:12.750 --> 04:14.750
A jeśli teraz spojrzymy na nasze wyjście,

04:14.750 --> 04:16.580
widzimy stary kod z wcześniej, ale widzimy

04:16.580 --> 04:18.590
również wyjście Logging, a ta funkcja konstruktora

04:18.590 --> 04:20.810
jest rejestrowana.

04:20.810 --> 04:22.760
Cóż, faktycznie widzimy tutaj całą

04:22.760 --> 04:24.520
klasę, ale klasy w końcu są tylko

04:24.520 --> 04:27.670
pewnym taktycznym cukrem nad funkcjami konstruktora.

04:27.670 --> 04:31.450
Zwróć też uwagę, że nasze wyjście dekoratora, Logging,

04:31.450 --> 04:35.030
i ta klasa lub ta funkcja konstruktora log tutaj jest

04:35.030 --> 04:39.460
drukowana najpierw, zanim zobaczymy obiekt Creating person

04:39.460 --> 04:41.540
i nasz obiekt Person.

04:41.540 --> 04:44.360
Ponieważ, rzeczywiście, dekoratory i to jest naprawdę

04:44.360 --> 04:48.430
ważne, dekoratory wykonują się, gdy twoja klasa jest zdefiniowana.

04:48.430 --> 04:50.530
Nie, kiedy jest zainicjowany.

04:50.530 --> 04:53.020
Nie musisz w ogóle instantyzować swojej klasy.

04:53.020 --> 04:55.760
Moglibyśmy usunąć ten kod do instancjonowania klasy,

04:55.760 --> 04:58.780
a nadal otrzymalibyśmy to wyjście dekoratora.

04:58.780 --> 05:02.210
Więc dekorator uruchamia się, gdy JavaScript znajdzie twoją

05:02.210 --> 05:05.660
definicję klasy, twoją definicję funkcji konstruktora.

05:05.660 --> 05:08.580
Nie, gdy używasz tej funkcji konstruktora do instancjonowania

05:08.580 --> 05:10.070
obiektu.

05:10.070 --> 05:13.280
To naprawdę ważne, by to zrozumieć.

05:13.280 --> 05:15.170
Jest to więc nasz pierwszy dekorator.

05:15.170 --> 05:16.670
Nie jest to jednak jedyny sposób,

05:16.670 --> 05:19.063
w jaki możemy stworzyć dekoratora.
