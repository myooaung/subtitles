WEBVTT

00:02.160 --> 00:12.780
ผู้นำเสนอ: ตอนนี้คลาสและฟังก์ชันคอนสตรัคเตอร์ทั้งหมดที่มีมานานแล้วไม่ได้มีแค่คุณสมบัติที่คุณสามารถใช้เพื่อกำหนดโครงสร้างทั่วไปของอ็อบเจกต์

00:12.780 --> 00:14.770
คุณยังสามารถเพิ่มวิธีการ

00:14.770 --> 00:17.460
จริงๆ แล้วเรามีเมธอดคอนสตรัคเตอร์อยู่ตรงนั้น

00:17.460 --> 00:19.620
แต่นั่นเป็นเพียงฟังก์ชันอรรถประโยชน์

00:19.620 --> 00:22.940
ซึ่งเรียกว่า เมื่อคุณสร้างอินสแตนซ์ของคลาส

00:22.940 --> 00:25.584
โปรดจำไว้ว่า ในอดีตเรามีเพียงฟังก์ชันคอนสตรัคเตอร์

00:25.584 --> 00:33.300
ตอนนี้เรามีน้ำตาลวากยสัมพันธ์ แต่เรายังมีฟังก์ชันคอนสตรัคซึ่งเราสามารถเพิ่มเพื่อรันโค้ดการเริ่มต้นใดๆ

00:33.300 --> 00:36.350
คุณอาจต้องการเพิ่มฟังก์ชันหรือเมธอด 2-3 รายการที่เรียกแล้ว

00:36.350 --> 00:40.980
ซึ่งคุณสามารถเรียกใช้กับวัตถุที่สร้างขึ้นได้

00:40.980 --> 00:46.000
ตัวอย่างเช่น อธิบายวิธีการที่นี่ในชั้นเรียนแผนกของเรา

00:46.000 --> 00:47.994
ตอนนี้เมธอดถูกเพิ่มดังนี้

00:47.994 --> 00:49.382
ชื่อของเมธอด จากนั้นไม่มีทวิภาค

00:49.382 --> 00:56.090
ไม่มีเครื่องหมายเท่ากับ แทน ใส่วงเล็บและวงเล็บปีกกา

00:56.090 --> 00:59.070
วงเล็บใช้อาร์กิวเมนต์ที่คุณอาจต้องการ

00:59.070 --> 01:00.780
สมมติว่าตรงนี้ เราไม่ต้องการอะไรเลย

01:00.780 --> 01:05.150
มิฉะนั้น คุณสามารถเพิ่มพารามิเตอร์ได้เหมือนที่คุณทำในฟังก์ชันปกติ

01:05.150 --> 01:12.020
และโดยทั่วไปแล้วสิ่งที่คุณต้องการเสมอคือเนื้อความของฟังก์ชันหรือเนื้อความของเมธอดที่อยู่ระหว่างวงเล็บปีกกา

01:12.020 --> 01:14.693
ตอนนี้คุณกำหนดตรรกะของวิธีการของคุณแล้ว

01:15.580 --> 01:22.410
และที่นั่น เราอาจต้องการแจ้งชื่อแผนกพร้อมข้อมูลเพิ่มเติมเล็กน้อย

01:22.410 --> 01:26.230
เราสามารถทำได้ที่นี่ด้วยคอนโซล เข้าสู่ระบบ ตัวอย่างเช่น

01:26.230 --> 01:30.620
แผนก ทวิภาค และจากนั้นอาจเป็นชื่อ

01:30.620 --> 01:32.100
อย่างไรก็ตามสิ่งนี้จะไม่ทำงาน

01:32.100 --> 01:37.710
สิ่งนี้จะค้นหาชื่อตัวแปรซึ่งจะต้องมีอยู่ภายในเมธอดที่อธิบายนี้

01:37.710 --> 01:40.860
หรือภายนอกคลาสเป็นตัวแปรส่วนกลาง

01:40.860 --> 01:42.470
และอย่างที่คุณเห็นว่าเลือกอายุหรือไม่

01:42.470 --> 01:44.433
ฉันได้รับข้อผิดพลาดสำหรับชื่อ ฉันไม่ทำเช่นนี้

01:44.433 --> 01:50.100
ฉันไม่เข้าใจเพราะมีตัวแปรชื่อส่วนกลางในเบราว์เซอร์ในวัตถุหน้าต่าง

01:50.100 --> 01:53.030
อย่างไรก็ตาม สิ่งนี้จะไม่อ้างถึงคุณสมบัติชื่อนี้ที่นี่

01:53.030 --> 01:57.130
แต่หมายถึงตัวแปรชื่อโกลบอลบางตัวที่อยู่นอกคลาสนี้

01:57.130 --> 01:59.599
ในการอ้างถึงคุณสมบัติของคลาสหรือเมธอดจากภายในคลาส

01:59.599 --> 02:05.630
เราต้องใช้คีย์เวิร์ดนี้เหมือนที่เราทำที่นี่ในตัวสร้าง

02:05.630 --> 02:12.400
โดยทั่วไปแล้วจะอ้างอิงกลับไปยังอินสแตนซ์ที่เป็นรูปธรรมของคลาสนี้ที่สร้างขึ้น

02:12.400 --> 02:17.650
และด้วยเครื่องหมายจุด เราสามารถเข้าถึงคุณสมบัติและวิธีการทั้งหมดจากอินสแตนซ์นี้

02:17.650 --> 02:19.555
ในกรณีนี้นี้. ชื่อ.

02:19.555 --> 02:24.555
ถ้าตอนนี้ ข้างล่างนี้ โทรหาฝ่ายบัญชี อธิบายเช่นนี้

02:24.583 --> 02:33.730
คำหลักนี้เมื่อดำเนินการนี้จะอ้างถึงวัตถุการบัญชีที่เป็นรูปธรรมซึ่งสร้างขึ้นจากคลาสนี้

02:33.730 --> 02:35.530
ดังนั้น ถ้าตอนนี้ฉันบันทึกมัน

02:35.530 --> 02:40.420
และเราโหลดใหม่ เราควรจะเห็นผลลัพธ์นี้ที่นี่ ซึ่งแน่นอนว่ามีการพิมพ์ผิด

02:40.420 --> 02:42.110
แต่โดยทั่วไปก็ใช้ได้

02:42.110 --> 02:43.944
ตอนนี้มาแก้ไขการพิมพ์ผิดที่นี่

02:43.944 --> 02:46.190
นี่คือวิธีที่เราจะเพิ่มวิธีการ

02:46.190 --> 02:48.166
ตอนนี้คำสำคัญเกี่ยวกับคำหลักนี้คืออะไร

02:48.166 --> 02:50.600
อย่างที่คุณคงทราบดีว่า หากคุณใช้งาน

02:50.600 --> 02:54.890
JavaScript มาบ้างแล้ว คำหลักนี้อาจดูซับซ้อน

02:54.890 --> 02:56.090
ตัวอย่างเช่น ถ้าฉันจะเพิ่มวัตถุอื่นที่นี่

02:56.090 --> 03:11.270
สำเนาบัญชี และนี่คือวัตถุของเราซึ่งมีวิธีการอธิบายและกล้าชี้ไปที่การบัญชี

03:11.270 --> 03:11.270
อธิบาย.

03:11.270 --> 03:17.150
แล้วถ้าผมเรียกสำเนาบัญชี อธิบายเป็นวิธีการคุณคิดว่าจะเกิดอะไรขึ้น?

03:17.150 --> 03:19.200
คุณคิดว่าเราจะได้รับข้อผิดพลาดหรือไม่?

03:19.200 --> 03:22.927
แน่นอนเราไม่พบข้อผิดพลาดในการรวบรวมที่คอมไพล์ได้ดี

03:22.927 --> 03:26.360
แต่ที่รันไทม์ เราเห็นแผนกไม่ได้กำหนด

03:26.360 --> 03:28.780
และเหตุผลก็คือ สิ่งที่ฉันกำลังทำคือ

03:28.780 --> 03:32.010
ฉันกำลังเพิ่มคุณสมบัติ คำอธิบาย ให้กับวัตถุนี้

03:32.010 --> 03:34.040
ซึ่งสร้างขึ้นด้วยตัวอักษรของวัตถุ

03:34.040 --> 03:37.888
ไม่ได้ขึ้นอยู่กับคลาสนี้ แต่เหมือนกับวัตถุจำลองที่ไม่ได้อิงตามคลาสเฉพาะใดๆ

03:37.888 --> 03:41.420
ของคุณ ที่กำหนดไว้

03:41.420 --> 03:49.000
จากนั้นค่าสำหรับคุณสมบัติอธิบายนี้เป็นตัวชี้ที่วิธีการอธิบายในวัตถุการบัญชีของฉัน

03:49.000 --> 03:54.690
ผมจึงชี้ไปที่วิธีการนี้เพื่อค้นหาวัตถุที่เป็นรูปธรรมนี้

03:54.690 --> 03:56.240
ฉันไม่ได้ดำเนินการ

03:56.240 --> 04:00.410
ดังนั้นฉันจึงไม่ส่งค่าของการเรียกใช้ฟังก์ชันนี้เพื่ออธิบาย

04:00.410 --> 04:04.090
ฉันกำลังผ่านฟังก์ชั่นเพื่ออธิบายที่นี่

04:04.090 --> 04:06.430
ดังนั้นเมื่อฉันโทรไปที่อธิบายที่นี่ในสำเนา

04:06.430 --> 04:10.440
มันจะดำเนินการตามวิธีการนี้อย่างถูกต้อง

04:10.440 --> 04:17.040
ปัญหาคือ เมื่อเมธอดนี้ดำเนินการ สิ่งนี้จะไม่อ้างถึงออบเจกต์นี้ซึ่งเมธอดนี้เป็นส่วนหนึ่งของเดิม

04:17.040 --> 04:21.140
ดังนั้นจะไม่อ้างถึงอ็อบเจกต์การบัญชี

04:21.140 --> 04:22.350
แต่นี่และนั่นเป็นกฎง่ายๆ

04:22.350 --> 04:29.650
ที่คุณสามารถจดจำได้ โดยทั่วไปหมายถึงสิ่งที่รับผิดชอบในการเรียกใช้เมธอด

04:29.650 --> 04:34.880
และผู้รับผิดชอบในการเรียกวิธีการอธิบายในกรณีนี้คือสำเนาบัญชี

04:34.880 --> 04:39.160
เพราะเราเรียกว่าอธิบายในสำเนาบัญชี

04:39.160 --> 04:43.980
นี่จะหมายถึงสิ่งที่อยู่หน้าจุดตรงนี้ ซึ่งก็คือสำเนาบัญชี

04:43.980 --> 04:47.530
อย่างไรก็ตามนั่นคือวัตถุที่ไม่มีคุณสมบัติชื่อ

04:47.530 --> 04:56.610
ดังนั้นเมื่อฉันเข้าถึงสิ่งนี้ ชื่อ ฉันได้รับข้อผิดพลาดเนื่องจากสิ่งนี้ไม่ได้อ้างถึงวัตถุที่มีคุณสมบัติชื่อ

04:56.610 --> 04:59.220
ดังนั้นชื่อทำให้เราไม่ได้กำหนดแน่นอน

04:59.220 --> 05:02.260
และนั่นเป็นเหตุผลที่ฉันได้รับผลลัพธ์ที่แปลกประหลาดนี้

05:02.260 --> 05:04.310
นั่นเป็นสิ่งหนึ่งที่คุณต้องจำไว้

05:04.310 --> 05:07.470
ไม่ใช่แค่ใน TypeScript แต่เป็น JavaScript

05:07.470 --> 05:09.540
และแน่นอนว่า มันสามารถเกิดขึ้นกับคุณใน

05:09.540 --> 05:11.500
TypeScript ได้เช่นกัน

05:11.500 --> 05:16.660
ตอนนี้ เพื่อแก้ไขปัญหานี้ คุณสามารถเพิ่มพารามิเตอร์ให้กับวิธีการอธิบาย

05:16.660 --> 05:19.730
ซึ่งเรียกว่าสิ่งนี้

05:19.730 --> 05:21.380
นั่นคือพารามิเตอร์พิเศษ

05:21.380 --> 05:25.334
ซึ่งเป็นคำสั่งพิเศษที่ TypeScript เข้าใจ

05:25.334 --> 05:28.430
หากคุณเพิ่มพารามิเตอร์ชื่อ this ที่นี่

05:28.430 --> 05:31.420
มันไม่ใช่พารามิเตอร์ที่คาดไว้จริงๆ

05:31.420 --> 05:36.010
คุณยังสามารถเรียก Description ได้โดยไม่ต้องผ่านค่าใดๆ

05:36.010 --> 05:38.476
สิ่งนี้ถูกตีความโดย TypeScript

05:38.476 --> 05:42.980
แทน เพื่อเป็นคำแนะนำเกี่ยวกับสิ่งที่ควรอ้างถึง

05:42.980 --> 05:45.960
และตอนนี้สิ่งสำคัญคือต้องกำหนดประเภทให้กับสิ่งนี้

05:45.960 --> 05:48.810
และประเภทที่นี่ ในกรณีนี้ควรเป็นประเภทชั้นเรียนของเราที่นี่

05:48.810 --> 05:51.780
ดังนั้นแผนก

05:51.780 --> 05:53.840
สิ่งที่ฉันกำลังพูดถึงคือ

05:53.840 --> 05:56.250
เมื่อคำอธิบายถูกดำเนินการภายในคำอธิบาย

05:56.250 --> 06:05.040
ดังนั้นในกรณีนี้ ควรอ้างถึงอินสแตนซ์ที่อ้างอิงจากคลาสแผนกเสมอ

06:05.040 --> 06:09.160
ดังนั้นวัตถุซึ่งท้ายที่สุดจะเป็นแผนกประเภท

06:09.160 --> 06:12.370
ดังนั้น ตอนนี้เราได้รับข้อผิดพลาดจริง ๆ ข้างล่างนี้

06:12.370 --> 06:14.140
เราได้รับข้อผิดพลาดที่นี่

06:14.140 --> 06:16.012
เพราะสิ่งที่เราได้รับคือ

06:16.012 --> 06:24.100
เมื่อเราเรียกคำอธิบายที่นี่ว่าสำเนาบัญชี เราไม่ได้เรียกสิ่งนี้ในอินสแตนซ์ของแผนก

06:24.100 --> 06:26.350
ดังนั้นสิ่งนี้จะถูกละเมิด

06:26.350 --> 06:32.250
ในกรณีนี้จะไม่อ้างถึงวัตถุประเภทแผนก

06:32.250 --> 06:34.690
ตรงนี้เราจึงเพิ่มความปลอดภัยพิเศษของประเภทโดยการเพิ่มพารามิเตอร์จำลองนี้

06:34.690 --> 06:36.920
เพราะตอนนี้ถ้าฉันพยายามบันทึกสิ่งนี้

06:36.920 --> 06:42.480
ฉันได้รับข้อผิดพลาดที่เกี่ยวข้องกับบรรทัดนี้ที่นี่

06:42.480 --> 06:47.030
เนื่องจากตอนนี้ แท้จริงแล้ว เราจะรันโค้ดบางอย่างที่ไม่ทำงานตามที่คาดไว้

06:47.030 --> 06:49.260
ดังนั้นเราต้องแก้ไขสิ่งนี้

06:49.260 --> 06:51.140
เช่น โดยการเพิ่มคุณสมบัติชื่อที่นี่เพื่อให้ใช้งานได้

06:52.040 --> 07:08.070
เพราะตอนนี้ TypeScript เห็นโอเค วัตถุที่คุณเรียกอธิบาย ตอนนี้มีคุณสมบัติชื่อเหมือนที่คาดว่าจะมีเพราะสิ่งนี้ ขึ้นอยู่กับวัตถุแผนกซึ่งมีคุณสมบัติชื่อด้วย

07:08.070 --> 07:12.270
ตอนนี้ที่นี่ TypeScript จะมีความสุขเพราะเราเพิ่มชื่อ

07:12.270 --> 07:14.934
หากฉันลบออก เราจะได้รับข้อผิดพลาดกลับมาพร้อมกับชื่อ

07:14.934 --> 07:19.750
อย่างไรก็ตาม วิธีนี้ใช้ได้ และเราหลีกเลี่ยงผลลัพธ์ที่ไม่ได้กำหนดจากก่อนหน้านี้

07:19.750 --> 07:22.770
สิ่งสำคัญคือต้องเข้าใจเกี่ยวกับเรื่องนี้

07:22.770 --> 07:32.993
และสิ่งสำคัญคือต้องตระหนักถึงการปรับปรุงนี้ คุณสามารถเพิ่มลงในโค้ดของคุณเพื่อให้แน่ใจว่าคุณตรวจจับพฤติกรรมที่ไม่ต้องการได้เหมือนที่เราเคยทำมาก่อน
