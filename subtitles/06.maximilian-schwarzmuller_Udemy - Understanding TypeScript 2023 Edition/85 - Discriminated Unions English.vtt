WEBVTT

1
00:00:02.210 --> 00:00:04.920
<v Narrator>Now, a special type of type guard,</v>

2
00:00:04.920 --> 00:00:05.753
you could say,

3
00:00:05.753 --> 00:00:07.940
or something that helps you with type guards,

4
00:00:07.940 --> 00:00:10.000
is the discriminated union.

5
00:00:10.000 --> 00:00:11.300
Now what's that.

6
00:00:11.300 --> 00:00:13.310
It's a pattern, which you can use

7
00:00:13.310 --> 00:00:15.030
when working with union types,

8
00:00:15.030 --> 00:00:18.900
that makes implementing type guards easier.

9
00:00:18.900 --> 00:00:22.000
It is available when you work with object types.

10
00:00:22.000 --> 00:00:24.580
Let me show you how it works.

11
00:00:24.580 --> 00:00:26.850
Let's say we have a couple of interfaces,

12
00:00:26.850 --> 00:00:28.450
and this could be classes as well,

13
00:00:28.450 --> 00:00:29.950
but here I'll go for interfaces

14
00:00:29.950 --> 00:00:32.193
to show that it works with those as well.

15
00:00:33.170 --> 00:00:34.803
And there I have my bird,

16
00:00:36.480 --> 00:00:38.830
which has a flying speed,

17
00:00:38.830 --> 00:00:40.973
which should be of type number, let's say.

18
00:00:42.660 --> 00:00:45.890
And I also have my horse,

19
00:00:45.890 --> 00:00:50.310
which has a ground speed or a running speed,

20
00:00:50.310 --> 00:00:51.913
which should be of type number.

21
00:00:53.130 --> 00:00:55.430
So we have these two interfaces here.

22
00:00:55.430 --> 00:00:58.800
Now we create our own union type,

23
00:00:58.800 --> 00:00:59.633
animal,

24
00:01:00.750 --> 00:01:03.370
Which is either a bird or a horse.

25
00:01:03.370 --> 00:01:05.743
And just as before, we might have a function,

26
00:01:06.740 --> 00:01:08.480
move animal

27
00:01:09.800 --> 00:01:13.040
that takes an animal as an input, which is of type animal,

28
00:01:13.040 --> 00:01:14.800
So using our union type.

29
00:01:14.800 --> 00:01:19.800
And now in there, I want to say moving with speed,

30
00:01:19.990 --> 00:01:21.050
and now of course,

31
00:01:21.050 --> 00:01:25.180
I need to access either flying speed or running speed.

32
00:01:25.180 --> 00:01:27.730
Now, of course, we could have just named it speed.

33
00:01:27.730 --> 00:01:30.840
But this is just a simplified example of a real use case

34
00:01:30.840 --> 00:01:33.900
you might face, where you have some interfaces

35
00:01:33.900 --> 00:01:37.390
or objects in general, that are kind of related

36
00:01:37.390 --> 00:01:40.500
but have different properties or methods.

37
00:01:40.500 --> 00:01:42.050
So here, it's the speed property,

38
00:01:42.050 --> 00:01:43.900
which actually is different.

39
00:01:43.900 --> 00:01:46.780
So it can't access flying speed here because of course,

40
00:01:46.780 --> 00:01:49.240
not all animals have a flying speed.

41
00:01:49.240 --> 00:01:51.210
Now we can do what we learned before.

42
00:01:51.210 --> 00:01:56.063
We can check if flying speed is in animal here.

43
00:01:58.240 --> 00:02:01.063
And if that is the case, we can execute this code.

44
00:02:01.960 --> 00:02:04.470
Now this is an approach we can take,

45
00:02:04.470 --> 00:02:07.430
but the more potential animals we get there,

46
00:02:07.430 --> 00:02:09.233
the more things we have to check.

47
00:02:10.880 --> 00:02:14.100
We also can mistype here in this string.

48
00:02:14.100 --> 00:02:15.810
We can forget an E, for example,

49
00:02:15.810 --> 00:02:18.460
and wonder why this won't work.

50
00:02:18.460 --> 00:02:20.410
Now, we can't use instance of here

51
00:02:20.410 --> 00:02:22.570
because I'm breaking with interfaces.

52
00:02:22.570 --> 00:02:27.490
As I explained, animal instance of bird

53
00:02:27.490 --> 00:02:29.680
will not work because data is an interface,

54
00:02:29.680 --> 00:02:31.840
which is not compiled to JavaScript.

55
00:02:31.840 --> 00:02:33.970
So at runtime, this will not be available

56
00:02:33.970 --> 00:02:36.210
as a constructor function.

57
00:02:36.210 --> 00:02:37.690
So therefore, this does not work.

58
00:02:37.690 --> 00:02:40.380
Now we can build a discriminated union here

59
00:02:40.380 --> 00:02:42.460
by giving every interface.

60
00:02:42.460 --> 00:02:45.380
So every object which should be part of the Union,

61
00:02:45.380 --> 00:02:47.130
and extra property.

62
00:02:47.130 --> 00:02:48.640
You can use any name you want.

63
00:02:48.640 --> 00:02:51.490
Often you use kind, or type here.

64
00:02:51.490 --> 00:02:55.090
I'll go for type, and name this bird.

65
00:02:55.090 --> 00:02:57.480
Now important, we're trading an interface here.

66
00:02:57.480 --> 00:03:02.480
So this is actually not a value for the type property.

67
00:03:02.650 --> 00:03:05.410
This instead is a literal type as you learned,

68
00:03:05.410 --> 00:03:09.110
where type must hold a string, which must be bird.

69
00:03:09.110 --> 00:03:10.880
So this is a type assignment,

70
00:03:10.880 --> 00:03:15.000
where we narrow down the value that may be stored in type

71
00:03:15.000 --> 00:03:17.590
to exactly this string value.

72
00:03:17.590 --> 00:03:19.810
And then do the same for horse ,

73
00:03:19.810 --> 00:03:22.283
just with horse as a literal type.

74
00:03:23.400 --> 00:03:25.060
Now here,

75
00:03:25.060 --> 00:03:27.550
in our function,

76
00:03:27.550 --> 00:03:29.840
we can use a switch statement

77
00:03:29.840 --> 00:03:32.280
and switch on animal dot type.

78
00:03:32.280 --> 00:03:34.080
Every animal has a type property

79
00:03:34.080 --> 00:03:36.330
because we added it to all interfaces

80
00:03:36.330 --> 00:03:38.350
that make up our animal.

81
00:03:38.350 --> 00:03:40.730
And then here we can have a couple of cases

82
00:03:40.730 --> 00:03:42.330
where we even get auto completion

83
00:03:42.330 --> 00:03:44.990
because TypeScript and our IDE understands

84
00:03:44.990 --> 00:03:49.040
that type can only either be bird or horse.

85
00:03:49.040 --> 00:03:51.050
And if it's bird, then we could set

86
00:03:51.050 --> 00:03:55.003
some internal variable speed to let's say,

87
00:03:55.900 --> 00:03:58.860
animal dot flying speed

88
00:03:59.880 --> 00:04:02.250
and then break thereafter.

89
00:04:02.250 --> 00:04:05.183
Otherwise, if the case is horse,

90
00:04:06.830 --> 00:04:11.753
we set speed equal to animal dot running speed.

91
00:04:14.150 --> 00:04:17.490
And there after we can console log,

92
00:04:17.490 --> 00:04:20.843
moving at speed plus speed.

93
00:04:22.490 --> 00:04:26.540
If I now call, move animal with an animal

94
00:04:26.540 --> 00:04:30.300
I create on the fly here, where I set the type to bird

95
00:04:30.300 --> 00:04:32.810
and I only allow to use bird or horse,

96
00:04:32.810 --> 00:04:34.930
then I have to set my

97
00:04:36.140 --> 00:04:39.210
flying speed and by the way, TypeScript even recognizes

98
00:04:39.210 --> 00:04:42.050
that a concept running speed here

99
00:04:42.050 --> 00:04:44.220
to try to do that and set this to 10,

100
00:04:44.220 --> 00:04:48.980
it complains that this is not available for type bird.

101
00:04:48.980 --> 00:04:51.360
If I set it to flying speed, however it works,

102
00:04:51.360 --> 00:04:55.120
if we save that, it outputs this correctly,

103
00:04:55.120 --> 00:04:57.700
and also compiles without errors.

104
00:04:57.700 --> 00:04:59.530
Now this is a discriminated union

105
00:04:59.530 --> 00:05:04.060
because we have one common property in every object

106
00:05:04.060 --> 00:05:08.040
that makes up our union, which describes that object,

107
00:05:08.040 --> 00:05:11.490
so that we can use this property that describes this object

108
00:05:11.490 --> 00:05:16.490
in our check to have 100% type safety and understand

109
00:05:16.770 --> 00:05:19.870
which properties are available for such an object

110
00:05:19.870 --> 00:05:21.930
and which properties are not.

111
00:05:21.930 --> 00:05:24.500
So this is a novelty useful pattern which you can use

112
00:05:24.500 --> 00:05:28.060
when working with objects and with union types.

113
00:05:28.060 --> 00:05:30.340
And it even works with interfaces

114
00:05:30.340 --> 00:05:33.630
because this interface forces every object you build

115
00:05:33.630 --> 00:05:37.050
based on this interface, to have this type.

116
00:05:37.050 --> 00:05:39.400
So instead of checking for the existence

117
00:05:39.400 --> 00:05:41.200
of a given property,

118
00:05:41.200 --> 00:05:43.660
or instead of using instance of,

119
00:05:43.660 --> 00:05:46.310
we use a property we know that exists

120
00:05:46.310 --> 00:05:49.020
to check which type of objects we're working with.

121
00:05:49.020 --> 00:05:51.930
We also eliminate the danger of mistyping

122
00:05:51.930 --> 00:05:54.730
because TypeScript understands that the only cases

123
00:05:54.730 --> 00:05:58.480
we can have here, for animal type, are bird and horse

124
00:05:58.480 --> 00:06:00.810
and hence it gives us this art of completion

125
00:06:00.810 --> 00:06:02.770
and if you would introduce a typo,

126
00:06:02.770 --> 00:06:04.690
we would immediately get an error.

127
00:06:04.690 --> 00:06:06.780
So therefore this is a very useful pattern

128
00:06:06.780 --> 00:06:09.333
when working with objects and union types.

