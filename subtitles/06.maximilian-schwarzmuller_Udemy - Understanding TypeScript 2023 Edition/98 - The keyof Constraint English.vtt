WEBVTT

1
00:00:02.230 --> 00:00:03.280
<v Instructor>So we got the basics</v>

2
00:00:03.280 --> 00:00:04.930
about generics down hopefully,

3
00:00:04.930 --> 00:00:07.150
now let's dive a bit deeper into constraints,

4
00:00:07.150 --> 00:00:09.250
or into one specific type of constraint,

5
00:00:09.250 --> 00:00:10.400
which you can add.

6
00:00:10.400 --> 00:00:12.680
For that I'll trade yet another function,

7
00:00:12.680 --> 00:00:16.293
a generic function, which I' ll name extractAndConvert.

8
00:00:18.700 --> 00:00:21.550
The idea of this function here is that we get

9
00:00:21.550 --> 00:00:24.120
an object as a first argument,

10
00:00:24.120 --> 00:00:26.340
and the second parameter is,

11
00:00:26.340 --> 00:00:28.413
in the end, a key.

12
00:00:30.050 --> 00:00:32.570
Now I want to return the value for that key in the object,

13
00:00:32.570 --> 00:00:35.310
which we can do with this default JavaScript notation.

14
00:00:35.310 --> 00:00:36.310
Using the square brackets

15
00:00:36.310 --> 00:00:38.200
to exe as a property in a object,

16
00:00:38.200 --> 00:00:39.840
but that's nothing TypeScript specific,

17
00:00:39.840 --> 00:00:42.010
that's Vanilla JavaScript again.

18
00:00:42.010 --> 00:00:43.000
Now therefore here we could say

19
00:00:43.000 --> 00:00:44.580
that here we want to have an object,

20
00:00:44.580 --> 00:00:48.460
and for the key we want to have a string, let's say.

21
00:00:48.460 --> 00:00:50.160
Now here I'm getting an error, though,

22
00:00:50.160 --> 00:00:52.000
because what we don't know here in the end,

23
00:00:52.000 --> 00:00:54.500
is whether the object we're getting here

24
00:00:54.500 --> 00:00:57.510
really will have that key.

25
00:00:57.510 --> 00:00:59.410
That's the end what TypeScript is telling us

26
00:00:59.410 --> 00:01:01.430
with this strange error.

27
00:01:01.430 --> 00:01:02.530
For example here,

28
00:01:02.530 --> 00:01:05.700
I could console log the result of calling this

29
00:01:05.700 --> 00:01:09.770
with let's say, an empty object and then name.

30
00:01:09.770 --> 00:01:12.600
And here by the way I'm calling this extractAndConvert,

31
00:01:12.600 --> 00:01:16.025
because I want to call this without console log

32
00:01:16.025 --> 00:01:18.600
and simply say Value, colon, plus.

33
00:01:18.600 --> 00:01:19.660
But that's just a side note

34
00:01:19.660 --> 00:01:22.450
I'm returning us stray in the end with that retrieved data.

35
00:01:22.450 --> 00:01:23.840
But the main problem here is,

36
00:01:23.840 --> 00:01:25.160
I could call it like this

37
00:01:26.091 --> 00:01:28.020
and it would pass in an object as a first parameter,

38
00:01:28.020 --> 00:01:29.890
and then a string as a second.

39
00:01:29.890 --> 00:01:31.430
But correctly, TypeScript tells me

40
00:01:31.430 --> 00:01:33.200
that in the end it's not guaranteed

41
00:01:33.200 --> 00:01:35.193
that this key exists in this object.

42
00:01:36.420 --> 00:01:39.920
Now to guarantee this, we can again use generic types here.

43
00:01:39.920 --> 00:01:41.620
We could say we've got a type T,

44
00:01:41.620 --> 00:01:43.130
and that will be our object here.

45
00:01:43.130 --> 00:01:46.550
We can say, extends object.

46
00:01:46.550 --> 00:01:48.363
But we also gotta type U.

47
00:01:49.440 --> 00:01:52.850
Our key here let's say, which in the end,

48
00:01:52.850 --> 00:01:56.320
has to be a key of our T-type though.

49
00:01:56.320 --> 00:01:58.210
So of this object, we wanna guarantee

50
00:01:58.210 --> 00:02:01.560
that what we get here as a second parameter as a key

51
00:02:01.560 --> 00:02:04.890
is a property of that first type.

52
00:02:04.890 --> 00:02:09.130
And for that we can say extends key of T.

53
00:02:11.550 --> 00:02:13.540
And now you see the error is gone here,

54
00:02:13.540 --> 00:02:15.370
and instead I got the error down there,

55
00:02:15.370 --> 00:02:17.930
because now I'm informing TypeScript here,

56
00:02:17.930 --> 00:02:21.800
that the first parameter should be any kind of object,

57
00:02:21.800 --> 00:02:23.610
and the second parameter

58
00:02:23.610 --> 00:02:25.870
should be any kind of key in that object.

59
00:02:25.870 --> 00:02:28.480
And here, yes we're passing in any kind of object,

60
00:02:28.480 --> 00:02:30.430
but we don't have a name key in there.

61
00:02:30.430 --> 00:02:34.990
This error will only go away as soon as I add a name key.

62
00:02:34.990 --> 00:02:37.990
So this is all the times for we can use generic types for

63
00:02:37.990 --> 00:02:41.800
with this keyoff keyword here also, to tell TypeScript

64
00:02:41.800 --> 00:02:45.730
that we want to ensure that we have this correct structure,

65
00:02:45.730 --> 00:02:47.460
and that's of course really useful,

66
00:02:47.460 --> 00:02:49.120
because it allows us to ensure

67
00:02:49.120 --> 00:02:51.160
that we don't make dumb mistakes,

68
00:02:51.160 --> 00:02:53.390
where we try to call this function, which in the end,

69
00:02:53.390 --> 00:02:56.740
we tried to exe as a property that doesn't exist.

70
00:02:56.740 --> 00:02:58.140
So this works.

71
00:02:58.140 --> 00:02:59.870
But if I try to exe as 'age' here,

72
00:02:59.870 --> 00:03:01.570
I again get an error, for example.

73
00:03:02.890 --> 00:03:05.560
So let's switch this back to 'name' therefore.

