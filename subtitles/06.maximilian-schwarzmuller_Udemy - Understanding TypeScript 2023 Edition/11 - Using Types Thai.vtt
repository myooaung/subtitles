WEBVTT

00:02.060 --> 00:06.410
ผู้สอน: Typescript ให้ JavaScript หลายประเภท

00:06.410 --> 00:10.100
ตอนนี้ JavaScript เองยังรู้จักประเภทข้อมูลบางประเภท และผมจะกลับมาที่โมดูลนี้เช่นกัน

00:10.100 --> 00:12.230
แต่ Typescript จะเพิ่มประเภทอื่นๆ

00:12.230 --> 00:17.380
อีกมากมาย และในขณะที่คุณจะได้เรียนรู้ในหลักสูตรนี้ Typescript ยังช่วยให้คุณสามารถเขียน

00:17.380 --> 00:21.110
ประเภทของตัวเอง

00:21.110 --> 00:24.320
ตอนนี้ เรามาเริ่มกันที่ Core Types บางส่วน ซึ่ง

00:24.320 --> 00:26.250
JavaScript รู้อยู่แล้วและ

00:26.250 --> 00:28.289
Typescript ใดรองรับด้วย และเราจะมาดูกันว่า

00:28.289 --> 00:36.800
JavaScript ที่รู้ประเภทนั้นแตกต่างกันอย่างไร และ Typescript ที่ใช้ประเภทนั้นหมายถึงอะไร

00:36.800 --> 00:38.287
หนึ่งในประเภทหลักที่เราใช้งานใน

00:38.287 --> 00:41.740
JavaScript และ Typescript คือประเภทตัวเลข

00:41.740 --> 00:47.290
ตอนนี้ใน JavaScript และเช่นเดียวกันกับ Typescript คือมีประเภทตัวเลขเพียงประเภทเดียว

00:47.290 --> 00:50.750
ไม่มีประเภทพิเศษสำหรับจำนวนเต็มหรือทศนิยม

00:50.750 --> 00:55.520
แต่ค่าเหล่านี้ตรงนี้ จะเป็นตัวเลขทั้งหมด

00:55.520 --> 00:58.180
หนึ่งจะเป็นตัวเลขที่ไม่มีทศนิยม

00:58.180 --> 01:04.532
5. เห็นได้ชัดว่า 3 เป็นหนึ่งที่มีทศนิยมและค่าทั้งหมดเหล่านี้เป็นตัวเลขประเภท

01:04.532 --> 01:10.480
ภาษาโปรแกรมอื่นๆ มีประเภทจำนวนเต็มพิเศษและประเภททศนิยมหรือประเภทคู่

01:10.480 --> 01:11.980
JavaScript ไม่มีสิ่งนั้นและ

01:11.980 --> 01:14.120
Typescript ก็ไม่มีเช่นกัน

01:14.120 --> 01:16.070
ดังนั้นเราจึงมีประเภทตัวเลขที่เรารู้จักจาก

01:16.070 --> 01:19.810
JavaScript เช่นเดียวกับประเภทใน Typescript

01:19.810 --> 01:26.370
นอกจากนี้ เรายังมีประเภทข้อมูลสตริง ซึ่งจะเป็นข้อความ ซึ่งคุณสามารถกำหนดด้วยวิธีใดวิธีหนึ่งจากสามวิธีนี้

01:26.370 --> 01:28.285
โดยใช้เครื่องหมายอัญประกาศเดี่ยว

01:28.285 --> 01:30.950
อัญประกาศคู่ หรือเครื่องหมายย้อนกลับ

01:30.950 --> 01:34.720
สัญกรณ์สุดท้ายที่มี backticks เป็นไวยากรณ์พิเศษซึ่งมีให้ใน

01:34.720 --> 01:38.640
JavaScript สมัยใหม่และใน Typescript ซึ่งช่วยให้เราเขียนสิ่งที่เรียกว่าเทมเพลตตัวอักษร

01:38.640 --> 01:47.520
ซึ่งเป็นสตริงปกติที่คุณสามารถแทรกข้อมูลบางอย่างลงในแบบไดนามิกได้

01:47.520 --> 01:49.240
ดังนั้น สตริงจึงเป็นเพียงข้อความ

01:49.240 --> 01:53.000
และ JavaScript รู้เกี่ยวกับประเภทของค่าสตริง

01:53.000 --> 01:55.000
typescript ก็ทำเช่นนั้นเช่นกัน

01:55.000 --> 01:57.240
สุดท้าย แต่ไม่ท้ายสุด หนึ่งในประเภทข้อมูลหลักที่

01:57.240 --> 02:02.250
JavaScript รู้จักและ Typescript รองรับก็คือประเภทข้อมูลบูลีน

02:02.250 --> 02:03.810
นั่นจะเป็นจริงหรือเท็จ และนั่นเป็นสิ่งสำคัญอย่างยิ่งในการเขียนโปรแกรม

02:03.810 --> 02:08.920
โดยเฉพาะอย่างยิ่งเมื่อทำงานกับคำสั่ง IF

02:08.920 --> 02:10.970
ที่นี่ เราได้ค่าสองค่านี้มา

02:10.970 --> 02:13.690
และนั่นเป็นสิ่งสำคัญ เนื่องจากใน

02:13.690 --> 02:17.520
JavaScript คุณอาจทราบแนวคิดเกี่ยวกับค่าจริงและค่าเท็จ

02:17.520 --> 02:22.190
เช่น ศูนย์ เลขศูนย์ เป็นค่าเท็จ

02:22.190 --> 02:25.510
หากคุณใช้ในเงื่อนไข IF จะถือว่าเป็นเท็จ

02:25.510 --> 02:28.560
ประเภทข้อมูลบูลีนรู้แค่ค่าสองค่านี้ว่าจริงหรือเท็จ

02:28.560 --> 02:31.230
และนั่นไม่ใช่แค่กรณีสำหรับ Typescript เท่านั้น

02:31.230 --> 02:33.160
แต่ยังรวมถึง JavaScript ด้วย

02:33.160 --> 02:35.532
แนวคิดที่เป็นความจริงและเป็นเท็จซึ่งคุณควรทราบ

02:35.532 --> 02:38.280
ซึ่งไม่เกี่ยวข้องกับประเภทข้อมูล

02:38.280 --> 02:40.840
นั่นคือเบื้องหลังการทำงาน

02:40.840 --> 02:43.030
JavaScript เพิ่มรันไทม์

02:43.030 --> 02:46.510
เมื่อเห็นค่าบางอย่าง และเงื่อนไข IF

02:46.510 --> 02:50.060
ด้วยตัวเลข สตริง และบูลีน เราจึงได้รับข้อมูลหลักสองประเภท

02:50.060 --> 02:51.450
แน่นอนว่าไม่ใช่ทั้งหมด

02:51.450 --> 02:53.410
เรามีออบเจกต์และอื่นๆ เช่นกัน

02:53.410 --> 02:54.617
แต่มาเน้นที่ประเภทเหล่านี้และดูว่า

02:54.617 --> 02:57.330
Typescript ทำอะไรกับพวกมัน หรือเราทำอะไรกับพวกมันได้บ้างโดยใช้

02:57.330 --> 03:00.930
Typescript

03:00.930 --> 03:02.620
สำหรับสิ่งนี้ ฉันกลับมาที่โปรเจ็กต์

03:02.620 --> 03:07.600
เราเห็นในโมดูลหลักสูตรแรก และฉันแสดงให้คุณเห็นว่าตอนนี้ทั้งหมดที่คุณต้องทำคือรัน

03:07.600 --> 03:18.110
npm start ในเทอร์มินัล นำทางไปยังโฟลเดอร์โปรเจ็กต์นี้ เพื่อหมุน เซิร์ฟเวอร์การพัฒนาที่ใช้งานอยู่นี้ ซึ่งจะโหลดซ้ำเมื่อใดก็ตามที่เราเปลี่ยนแปลงบางอย่าง

03:18.110 --> 03:24.890
และที่นี่ ฉันเปิดที่อยู่ localhost:3000 นี้ในแท็บใหม่ของเบราว์เซอร์ของฉัน

03:24.890 --> 03:28.300
ฉันได้รับข้อผิดพลาดเพราะฉันยังไม่มีถาดแอปเป็นไฟล์

03:28.300 --> 03:32.280
แน่นอน คุณจะพบโปรเจ็กต์เริ่มต้นนี้ ซึ่งทั้งหมดแนบมากับการบรรยายนี้

03:32.280 --> 03:34.400
จะได้รับถาดแอปเป็นไฟล์ ซึ่งเรากำลังพยายามนำเข้าที่นี่

03:34.400 --> 03:42.050
ในไฟล์ html ดัชนีของเรา ทันทีที่เราคอมไพล์แอป

03:42.050 --> 03:42.050
ts

03:42.050 --> 03:45.070
จาก typescript เป็น JavaScript และเราสามารถทำได้ในแท็บใหม่ของเทอร์มินัล

03:45.070 --> 03:46.860
เพื่อให้กระบวนการนี้ทำงานต่อไปและเปิดแท็บใหม่แทน

03:46.860 --> 03:51.117
เพียงแค่เปิดแอป tsc ts และสิ่งที่ทำคือคอมไพล์ไฟล์ Typescript

03:53.920 --> 03:56.630
และแยกไฟล์ JavaScript ออกมา และเมื่อเป็นเช่นนั้น

03:56.630 --> 04:05.520
เราสามารถโหลดหน้านี้ใหม่และเราจะได้เวลาเริ่มต้น...

04:05.520 --> 04:05.520
เอาต์พุตที่นี่

04:05.520 --> 04:08.000
ตอนนี้เรามีการตั้งค่านี้แล้ว ถ้าเราสามารถเขียนโค้ด

04:08.000 --> 04:10.620
Typescript แล้วคอมไพล์เป็นโค้ด JavaScript

04:10.620 --> 04:14.650
เพื่อดูว่ามันทำอะไร

04:14.650 --> 04:17.000
ด้วยสิ่งนั้นในไฟล์ Typescript ฉันจะกำจัดเนื้อหาในนั้น

04:17.000 --> 04:18.870
เพราะตอนนี้ ฉันต้องการเจาะลึกประเภทข้อมูลหลักเหล่านี้

04:18.870 --> 04:23.720
ซึ่งฉันเพิ่งแสดงให้คุณเห็นในสไลด์ เพื่อให้คุณเข้าใจวิธีการทำงานกับพวกเขา ใน

04:23.720 --> 04:27.230
typescript

04:27.230 --> 04:29.430
เรามาเริ่มกันเลย ง่ายมากๆ

04:29.430 --> 04:32.240
สมมติว่าเรามีฟังก์ชันใหม่ บวก และที่นั่นเราคาดว่าจะมีเลขสองตัว

04:32.240 --> 04:34.990
n1 และบวกสอง และนั่นจะคืนค่า n1 บวก n2

04:34.990 --> 04:38.610
แบบนั้น ฟังก์ชันง่ายๆ ไม่มีอะไรเกี่ยวกับ Typescript-ish

04:38.610 --> 04:42.370
เลย

04:42.370 --> 04:46.080
ตอนนี้ เรามีตัวเลขสองตัวที่เราต้องการใช้งาน

04:46.080 --> 04:49.800
นั่นอาจเป็นเลข 1 ตรงนี้ ซึ่งก็คือเลข 5 และเลข

04:49.800 --> 04:57.060
2 ด้วย ซึ่งอาจจะเป็น 2 8 อะไรก็ได้ เลขสองตัวตรงนี้

04:57.060 --> 04:59.820
ตอนนี้ เห็นได้ชัดว่าและไม่น่าแปลกใจมาก เราสามารถเพิ่มหรือเรียกใช้ฟังก์ชันเพิ่ม

04:59.820 --> 05:02.950
และส่งผ่านหมายเลข 1 และหมายเลข 2 เป็นอาร์กิวเมนต์ของฟังก์ชันนี้

05:02.950 --> 05:07.320
เก็บผลลัพธ์เป็นค่าคงที่ใหม่ บางที จากนั้นเพื่อดูบางสิ่งบนหน้าจอ เราสามารถปลอบใจ

05:07.320 --> 05:15.080
.

05:15.080 --> 05:15.080
บันทึกผลลัพธ์

05:15.080 --> 05:22.730
ถ้าเราทำเช่นนั้น และฉันจะคอมไพล์ไฟล์นี้ใหม่ด้วยแอป tsc ts หน้านี้ควรจะโหลดซ้ำโดยอัตโนมัติอยู่แล้ว

05:22.730 --> 05:24.350
ถ้าไม่ คุณสามารถโหลดใหม่ได้ด้วยตนเอง

05:24.350 --> 05:27.010
และคุณควรเห็น 7 8.

05:27.010 --> 05:30.250
ตอนนี้คุณอาจคิดว่านั่นไม่พิเศษเกินไปใช่ไหม

05:30.250 --> 05:33.650
นี่เป็นส่วนย่อยของ JavaScript ที่ตรงไปตรงมาและไม่มีอะไรที่

05:33.650 --> 05:37.330
Typescript-ish ทำเกี่ยวกับมัน

05:37.330 --> 05:39.450
มาทำบางสิ่งที่จะเบรกข้อมูลโค้ดนั้นใน

05:39.450 --> 05:41.900
JavaScript ปกติ

05:41.900 --> 05:45.100
สมมติว่า อินพุตนี้ไม่ใช่ตัวเลข แต่ข้อความบางส่วน

05:45.100 --> 05:53.380
ห้าในข้อความ และถ้าเราบันทึกมัน และเรียกใช้คำสั่งการรวบรวมของเราอีกครั้งที่นี่ คุณจะเห็นว่า

05:53.380 --> 05:56.110
เมื่อหน้านี้โหลดซ้ำที่นี่ ฉันได้

05:56.110 --> 06:02.200
52 . 8 เป็นผลลัพธ์ และนั่นไม่ใช่ผลลัพธ์ที่ถูกต้องของการบวกนี้

06:02.200 --> 06:04.500
ตอนนี้ คุณรู้หรือไม่ว่าทำไมเราจึงได้รับผลลัพธ์นี้ใน

06:04.500 --> 06:08.670
JavaScript ปกติ ซึ่งท้ายที่สุดแล้วเราก็ดำเนินการที่นี่

06:08.670 --> 06:10.150
เราได้ผลลัพธ์นี้ เพราะนี่ไม่ใช่ผลลัพธ์ของการบวกทางคณิตศาสตร์

06:10.150 --> 06:17.760
แต่แทนที่จะเชื่อมสิ่งนี้เป็นสตริง เพราะอินพุตนี้ ตรงนี้ ห้า เป็นสตริง แล้วจาวาสคริปต์เห็นว่า "โอเค ฉัน มีสตริง "ฉันกำลังเพิ่มบางอย่างในสตริงนี้

06:17.760 --> 06:27.667
ในขณะที่แน่นอนว่า "สิ่งนี้ควรแปลงเป็นสตริงด้วย" ดังนั้นโดยรวมแล้วฉันจึงได้สตริง "เพราะค่าแรกเป็นสตริง" และด้วยเหตุนี้ สิ่งที่จาวาสคริปต์ทำคือมันแปลง

06:27.667 --> 06:39.240
2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
จากตัวเลขเป็นสตริง เชื่อมสตริงที่ยาวขึ้นจาก 5 และ 2 8 จึงให้ผล

06:42.720 --> 06:46.700
52 8 เป็นสตริงและส่งกลับค่านั้น

06:46.700 --> 06:49.490
ดังนั้นจึงไม่จัดการกับสิ่งนี้ด้วยวิธีทางคณิตศาสตร์

06:49.490 --> 06:50.850
แต่เป็นสตริงแทน และด้วย JavaScript

06:50.850 --> 06:52.900
สิ่งนี้สามารถเกิดขึ้นได้

06:52.900 --> 06:54.037
แน่นอน ตอนนี้คุณอาจคิดว่า

06:54.037 --> 06:55.427
"ทำไมฉันถึงเขียนโค้ดแบบนั้น?

06:55.427 --> 06:58.160
"ฉันเป็นผู้พัฒนา ทำไมฉันถึงทำผิดพลาด? บางทีคุณอาจไม่ใช่คนที่ทำผิดพลาด

06:58.160 --> 07:01.230
บางที นี่อาจถูกดึงมาจากอินพุตของผู้ใช้บางส่วน

07:01.230 --> 07:04.180
และคุณแนะนำข้อผิดพลาดเล็กน้อยในโค้ดของคุณ

07:04.180 --> 07:06.690
ซึ่งคุณลืมแปลงสิ่งนี้ หรือคุณกำลังทำงานในทีม

07:06.690 --> 07:09.350
และคุณมีไฟล์สคริปต์สองสามไฟล์ ทำงานร่วมกัน

07:09.350 --> 07:14.740
และ นักพัฒนารายอื่นแนะนำข้อผิดพลาดดังกล่าว

07:14.740 --> 07:17.270
ไม่ใช่เรื่องเป็นไปไม่ได้ที่จะเกิดข้อผิดพลาด

07:17.270 --> 07:20.110
แต่การติดตามข้อผิดพลาดเหล่านี้อาจเป็นเรื่องยาก

07:20.110 --> 07:22.340
แน่นอนว่าที่นี่ค่อนข้างชัดเจนว่ามีบางอย่างผิดพลาด

07:22.340 --> 07:28.320
เพราะเรามีสคริปต์พื้นฐาน แต่ในสคริปต์ที่ใหญ่กว่า คุณอาจไม่รู้ด้วยซ้ำว่ามีบางอย่างผิดพลาดที่นี่

07:28.320 --> 07:31.520
และนั่นคือ Typescript ที่ช่วยเราได้

07:31.520 --> 07:36.390
เราสามารถเพิ่มการกำหนดประเภทในฟังก์ชันนี้ให้กับพารามิเตอร์ของเรา

07:36.390 --> 07:42.280
เราสามารถบอก Typescript ได้ว่าพารามิเตอร์ทั้งสองนี้ควรเป็นหมายเลขประเภทและไม่ใช่ประเภท

07:42.280 --> 07:45.340
ฉันไม่สนว่าค่าใดเป็นค่าดีฟอลต์

07:45.340 --> 07:47.535
เราจึงทำเช่นนั้นโดยเพิ่มเครื่องหมายทวิภาคที่นี่

07:47.535 --> 07:50.300
หลังค่าที่เราต้องการกำหนดประเภท ในกรณีนี้

07:50.300 --> 07:55.220
ตามหลังชื่อพารามิเตอร์และตามด้วยชื่อประเภท

07:55.220 --> 07:57.140
ตัวอย่างเช่น ตัวเลขจะเป็นหนึ่งในชื่อที่รองรับ

07:57.140 --> 08:00.560
นอกจากตัวเลขแล้ว คุณยังมีสตริงหรือบูลีนด้วย

08:00.560 --> 08:03.480
แต่เราจะกลับมาที่สิ่งเหล่านั้น

08:03.480 --> 08:07.750
ในขณะนี้ เราต้องการตัวเลข และเราไม่ได้ต้องการแค่พารามิเตอร์ตัวแรกที่นี่

08:07.750 --> 08:10.530
แต่ยังรวมถึงตัวที่สองด้วย

08:10.530 --> 08:12.010
ตรงนี้ เราสามารถเพิ่มเครื่องหมายทวิภาค

08:12.010 --> 08:18.367
แล้วก็ตัวเลข และตอนนี้ สิ่งที่เราพูดกับ typescript คือ "เฮ้ พารามิเตอร์ทั้งสองตรงนี้ ควรเป็นตัวเลขประเภท"

08:18.367 --> 08:22.147
การส่งผ่านค่าของประเภทอื่นคือ ไม่อนุญาต" และแน่นอนว่า IDE

08:22.147 --> 08:25.530
ของฉันบ่นที่นี่แล้ว เพราะ Visual Studio Code มีการสนับสนุน

08:25.530 --> 08:28.360
Typescript ในตัว แต่ถึงแม้เราจะมองข้ามสิ่งนี้ไป

08:28.360 --> 08:34.260
ทันทีที่ฉันคอมไพล์ใหม่ด้วยการเรียกใช้แอป tsc อีกครั้ง

08:34.260 --> 08:34.260
คุณจะเห็นว่าเราได้รับข้อผิดพลาด

08:40.040 --> 08:41.670
เราได้รับข้อผิดพลาดว่า "อาร์กิวเมนต์ประเภท

08:41.670 --> 08:42.697
'"5" ไม่สามารถกำหนดให้กับพารามิเตอร์ประเภท

08:42.697 --> 08:51.140
'number' ได้ และมันยังแสดงให้เราเห็นว่าสิ่งนี้เกิดขึ้นที่ไหน และให้หมายเลขบรรทัด บรรทัดที่แปด และโดยพื้นฐานแล้วมันแสดงให้เราเห็น เหมือนกัน IDE

08:51.140 --> 08:54.430
แสดงที่นี่

08:54.430 --> 08:56.740
ดังนั้น ในกรณีที่เรามองข้ามมันใน IDE,

08:56.740 --> 08:58.707
คอมไพล์มัน, ตอนนี้แสดงข้อผิดพลาด

08:58.707 --> 09:01.340
และนั่นคือสิ่งสำคัญเกี่ยวกับ Typescript

09:01.340 --> 09:03.284
มันช่วยเราในระหว่างการรวบรวมเท่านั้น

09:03.284 --> 09:06.220
ไม่ได้เปลี่ยน JavaScript ให้ทำงานแตกต่างกันในขณะรันไทม์

09:06.220 --> 09:10.110
เนื่องจากเบราว์เซอร์ไม่รองรับ Typescript ในตัว

09:10.110 --> 09:13.510
มันสามารถช่วยเราระหว่างการพัฒนาเท่านั้น ก่อนที่เราจะคอมไพล์โค้ด

09:13.510 --> 09:15.700
Typescript ของเราเป็น JavaScript

09:15.700 --> 09:19.310
แต่ที่นั่น มันมีประโยชน์มาก เพราะมันเพิ่มขั้นตอนพิเศษ

09:19.310 --> 09:21.520
การตรวจสุขภาพเพิ่มเติม ซึ่งที่นี่

09:21.520 --> 09:25.560
เราพบว่า "โอ้ เราทำผิดพลาด .

09:25.560 --> 09:28.407
"นี่ นี่ไม่ควรเป็นสตริง นี่ควรเป็นตัวเลข"

09:28.407 --> 09:31.660
และเราแก้ไขได้และก็เรียบร้อยดี

09:31.660 --> 09:34.210
นี่คือสิ่งที่ Typescript ทำ

09:34.210 --> 09:35.670
ช่วยคุณในระหว่างการพัฒนา

09:35.670 --> 09:37.390
มันไม่ได้เปลี่ยนรหัสรันไทม์ของคุณ

09:37.390 --> 09:40.130
ที่นี่ แม้ว่าจะมีการตั้งค่าเริ่มต้น มันก็รวบรวมข้อผิดพลาดของเราไว้ที่นี่

09:40.130 --> 09:47.220
แม้ว่าตรวจพบข้อผิดพลาดระหว่างการคอมไพล์ และสร้างไฟล์ที่ทำให้ผลลัพธ์ไม่ถูกต้อง เนื่องจากโดยค่าเริ่มต้น Typescript

09:47.220 --> 09:50.690
จะไม่เข้ามาที่นี่

09:50.690 --> 09:53.560
คุณจะได้เรียนรู้ในภายหลังว่าคุณจะแน่ใจได้อย่างไรว่าเป็นเช่นนั้น

09:53.560 --> 09:56.300
แต่โดยค่าเริ่มต้นแล้ว มันไม่ได้ปิดกั้นการคอมไพล์ด้วยซ้ำ

09:56.300 --> 09:59.260
ถึงกระนั้น มันก็ตะคอกใส่คุณและชี้ไปที่ข้อผิดพลาดนี้

09:59.260 --> 10:04.850
เพื่อที่คุณจะได้แก้ไขมันได้ และเพื่อหลีกเลี่ยงความผิดพลาดดังกล่าวที่นี่

10:04.850 --> 10:09.020
ตรวจสอบว่าคุณไม่มีแอป

10:09.020 --> 10:09.020
js และแอพ t เปิดในเวลาเดียวกัน

10:09.020 --> 10:11.950
คุณอาจได้รับข้อผิดพลาดที่นี่ใน

10:11.950 --> 10:13.470
IDE เกี่ยวกับการใช้งานฟังก์ชันที่ซ้ำกัน

10:13.470 --> 10:15.830
การปิดไฟล์ JavaScript จะแก้ไขปัญหานี้
