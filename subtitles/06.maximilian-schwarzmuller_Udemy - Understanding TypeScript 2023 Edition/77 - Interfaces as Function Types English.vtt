WEBVTT

1
00:00:02.220 --> 00:00:03.053
<v Instructor>Now, I mentioned</v>

2
00:00:03.053 --> 00:00:04.920
that interfaces are used

3
00:00:04.920 --> 00:00:07.114
to define the structure of an object.

4
00:00:07.114 --> 00:00:09.690
Now, interfaces can also be used

5
00:00:09.690 --> 00:00:11.750
to define the structure of a function.

6
00:00:11.750 --> 00:00:14.330
So basically as a replacement for the function types

7
00:00:14.330 --> 00:00:15.578
you already learned about.

8
00:00:15.578 --> 00:00:17.890
Just as quick refresher,

9
00:00:17.890 --> 00:00:20.090
we can define the type of a function,

10
00:00:20.090 --> 00:00:23.305
for example, with a custom type with the type keyword.

11
00:00:23.305 --> 00:00:26.380
AddFn for add function

12
00:00:26.380 --> 00:00:29.350
which then could hold a function definition like this.

13
00:00:29.350 --> 00:00:30.830
It should return a number

14
00:00:30.830 --> 00:00:32.370
and it should take two arguments

15
00:00:32.370 --> 00:00:35.970
where each argument also is of type number.

16
00:00:35.970 --> 00:00:39.310
Now, we could create a new function add here

17
00:00:39.310 --> 00:00:42.860
which is of type AddFn and when we don't initialize it

18
00:00:42.860 --> 00:00:45.040
but assign our function later,

19
00:00:45.040 --> 00:00:46.580
then of course, we have to make sure

20
00:00:46.580 --> 00:00:49.470
that this function takes two arguments

21
00:00:49.470 --> 00:00:51.300
which are of type number

22
00:00:51.300 --> 00:00:55.170
and that in there, we also return a number.

23
00:00:55.170 --> 00:00:56.360
This is something that we can do.

24
00:00:56.360 --> 00:00:57.843
This is what you already learned.

25
00:00:57.843 --> 00:01:01.760
Now, you can also use an interface as an alternative

26
00:01:01.760 --> 00:01:03.077
to this custom type.

27
00:01:03.077 --> 00:01:06.860
Interfaces are there to define the structure of an object

28
00:01:06.860 --> 00:01:08.240
as I taught you but in the end,

29
00:01:08.240 --> 00:01:10.220
functions are just objects

30
00:01:10.220 --> 00:01:12.720
and therefore this is a little exception.

31
00:01:12.720 --> 00:01:15.350
You can create function types with interfaces.

32
00:01:15.350 --> 00:01:18.930
For that you create an interface, name it AddFn

33
00:01:18.930 --> 00:01:20.930
to still keep that name here.

34
00:01:20.930 --> 00:01:23.720
And now in there, you define the bit of function

35
00:01:23.720 --> 00:01:28.300
by just adding parentheses with your arguments,

36
00:01:28.300 --> 00:01:31.150
a: number, B:number, for example,

37
00:01:31.150 --> 00:01:33.980
and then a colon, not an arrow

38
00:01:33.980 --> 00:01:36.810
but a colon here with the return type.

39
00:01:36.810 --> 00:01:39.780
So in the end, like you would define a method

40
00:01:39.780 --> 00:01:41.630
as we're doing it here with greet,

41
00:01:41.630 --> 00:01:45.710
with the exception that we're now not adding a method name.

42
00:01:45.710 --> 00:01:47.880
So we have an anonymous function

43
00:01:47.880 --> 00:01:49.300
if you wanna call it like this

44
00:01:49.300 --> 00:01:52.000
in the AddFn interface

45
00:01:52.000 --> 00:01:55.250
and TypeScript understands this special syntax

46
00:01:55.250 --> 00:01:57.800
of this anonymous function in your interface

47
00:01:57.800 --> 00:02:00.410
and understands that you wanna use this interface

48
00:02:00.410 --> 00:02:02.070
as a function type

49
00:02:02.070 --> 00:02:05.360
and this is how your function should look like.

50
00:02:05.360 --> 00:02:07.650
So now we can use AddFn here

51
00:02:07.650 --> 00:02:10.440
and indeed, if I would try to accept a string here,

52
00:02:10.440 --> 00:02:11.640
we would get an error

53
00:02:11.640 --> 00:02:13.786
because this is not assignable,

54
00:02:13.786 --> 00:02:17.060
we need to have a number instead of a string.

55
00:02:17.060 --> 00:02:19.670
So it's simply an alternative to this custom type.

56
00:02:19.670 --> 00:02:23.010
Of course, here I would argue using the custom type

57
00:02:23.010 --> 00:02:25.020
is probably a bit more common,

58
00:02:25.020 --> 00:02:26.470
it's also a bit more shorter

59
00:02:26.470 --> 00:02:28.340
but it's a nice alternative syntax

60
00:02:28.340 --> 00:02:30.870
to be aware of, especially if you encounter this

61
00:02:30.870 --> 00:02:34.030
in some project and you're otherwise lost what this means,

62
00:02:34.030 --> 00:02:35.265
this strange anonymous method.

63
00:02:35.265 --> 00:02:38.993
Well, it's in the end just a custom function type.

