WEBVTT

00:02.370 --> 00:05.290
Erzähler: Da wir nun in der Lage sind, die Benutzereingaben

00:05.290 --> 00:08.630
und alle validierten Daten mit Hilfe von TypeScript, der getriebenen

00:08.630 --> 00:11.420
Validierungslogik, abzurufen.

00:11.420 --> 00:13.810
Machen wir weiter und stellen wir sicher, dass wir

00:13.810 --> 00:17.400
mehr mit den gesammelten Benutzereingaben machen, als sie nur in der Konsole

00:17.400 --> 00:18.420
auszugeben.

00:18.420 --> 00:19.450
Denn im Moment ist es

00:19.450 --> 00:21.330
natürlich das, was wir tun, richtig.

00:21.330 --> 00:24.670
Letztendlich drucke ich nur die Informationen aus, die wir

00:24.670 --> 00:26.030
für die Konsole gesammelt

00:26.030 --> 00:30.300
haben, und das ist nicht unser endgültiges Ziel in dieser Anwendung.

00:30.300 --> 00:34.290
Stattdessen sollte das Ziel sein, dass wir auch diese Liste von Projekten

00:34.290 --> 00:37.770
hier auf der Grundlage dieser Vorlage erstellen, wobei jedes

00:37.770 --> 00:41.550
Projektelement auf dieser Vorlage hier basiert.

00:41.550 --> 00:45.750
Und wir geben die Informationen, die wir gesammelt haben, hier aus.

00:45.750 --> 00:48.520
Das wird also die nächste Sache sein, an der ich arbeiten möchte.

00:48.520 --> 00:52.970
Neben unserer Projekteingabeklausel, die für die Darstellung des Forums und

00:52.970 --> 00:55.440
die Erfassung der Benutzereingaben verantwortlich

00:55.440 --> 00:57.350
ist, möchte ich auch die Nummer der

00:57.350 --> 00:59.410
Klausel haben, die für die Darstellung

00:59.410 --> 01:03.230
einer Liste von Projekten verantwortlich ist.

01:03.230 --> 01:06.100
Wir werden das in zwei Klauseln aufteilen.

01:06.100 --> 01:07.650
Eine Klausel für die Liste

01:07.650 --> 01:11.000
und eine Klasse pro Projektelement in der Liste.

01:11.000 --> 01:14.970
Und dann müssen wir einen Weg finden, diese gesammelten Eingaben

01:14.970 --> 01:18.500
an unsere Projektliste weiterzugeben und ihr ein neues

01:18.500 --> 01:20.650
Element hinzuzufügen.

01:20.650 --> 01:23.420
Gehen wir also Schritt für Schritt vor und fangen

01:23.420 --> 01:26.880
wir mit dem Hinzufügen einer Projektlistenklasse an.

01:26.880 --> 01:29.380
An welcher Stelle Sie nun genau hinzufügen, bleibt Ihnen überlassen.

01:29.380 --> 01:32.900
Die Reihenfolge spielt keine Rolle, da das Java-Skript am

01:32.900 --> 01:36.430
Ende die gesamte Datei analysiert, bevor es sie ausführt.

01:36.430 --> 01:38.860
Es wird also alle Klassen kennen.

01:38.860 --> 01:41.990
Dennoch werde ich es hier über der Projekteingabeklausel hinzufügen,

01:41.990 --> 01:45.740
weil ich mich irgendwie auf die Projektlistenklausel verlassen würde, die ich

01:45.740 --> 01:48.810
innerhalb der Projekteingabeklasse erstellen werde, aber auch

01:48.810 --> 01:50.500
hier ist es wirklich wichtig.

01:50.500 --> 01:55.500
Hier habe ich also meine Projektlistenklausel, Projektliste, und die Idee dieser Klausel

01:55.600 --> 01:59.230
hier ist ein bisschen verwandt mit dem, was wir in einer Projekteingabe

01:59.230 --> 02:01.170
gemacht haben.

02:01.170 --> 02:04.300
Ich möchte meine Vorlage hier erreichen und sie dann an einer bestimmten

02:04.300 --> 02:06.930
Stelle außerhalb der Anwendung rendern.

02:06.930 --> 02:09.480
Und deshalb können wir hier wieder einen Konstruktor

02:09.480 --> 02:13.120
hinzufügen, wir können die Felder hinzufügen, die wir brauchen,

02:13.120 --> 02:15.310
und am Ende brauchen wir ein Template-Element

02:15.310 --> 02:17.030
und ein Host-Element, also können

02:17.030 --> 02:22.030
wir beides hier zu unserer Projektliste hinzufügen.

02:22.440 --> 02:25.190
Wir brauchen auch das Element selbst, ich

02:25.190 --> 02:29.640
würde sagen, also das konkrete Element, das gerendert wird.

02:29.640 --> 02:31.800
Und die Typen werden sich unterscheiden.

02:31.800 --> 02:34.580
Das Host-Element wird immer noch ein div sein,

02:34.580 --> 02:38.330
weil ich die Liste auch in diesem div darstellen möchte.

02:38.330 --> 02:40.970
Aber das konkrete Element, das wir wiedergeben.

02:40.970 --> 02:43.960
Natürlich handelt es sich nicht um ein Formularelement, aber wenn

02:43.960 --> 02:46.180
wir uns unsere Listenvorlage ansehen, sehen wir,

02:46.180 --> 02:48.520
dass sich darin ein Abschnitt befindet.

02:48.520 --> 02:51.010
Wir haben also ein Abschnittselement.

02:51.010 --> 02:54.420
Jetzt stellt sich heraus, dass es kein Element und diese Abschnitt

02:54.420 --> 02:57.040
Element, so dass wir nur eine normale HTML-Element,

02:57.040 --> 03:00.490
weil jedes Element hat diesen Typ hier für einige Steuer.

03:00.490 --> 03:03.060
Es gibt speziellere Typen, wenn sie es sind,

03:03.060 --> 03:05.710
und wir können einfach HTML-Typ verwenden.

03:05.710 --> 03:10.710
Jetzt müssen wir natürlich Zugang zu diesen Elementen bekommen.

03:10.970 --> 03:15.600
Also, wir können diesen Code hier eigentlich aus dem Konstruktor

03:15.600 --> 03:20.250
der Projekteingabe in den Konstruktor der Projektliste

03:20.250 --> 03:22.260
kopieren und nun einige Dinge

03:22.260 --> 03:24.730
anpassen.

03:24.730 --> 03:27.630
Zum Beispiel hat mein Vorlagenelement jetzt natürlich keine

03:27.630 --> 03:29.420
Vorstellung vom Projekteingang.

03:29.420 --> 03:32.150
Das ist jetzt stattdessen die Projektliste.

03:32.150 --> 03:36.660
Kopieren wir das also und verwenden wir das hier, um das Element auszuwählen.

03:36.660 --> 03:39.760
Ich werde es immer noch kosten, und ich weiß immer noch mit Sicherheit,

03:39.760 --> 03:42.710
dass ich es bekomme, also ändert sich das nicht.

03:42.710 --> 03:45.520
Die Host-Elemente sind mit der ID-App noch zu tode.

03:45.520 --> 03:47.820
Dies ändert sich also nicht.

03:47.820 --> 03:52.070
Dann importiere ich meinen Inhalt und dann, na ja, das Geschäft,

03:52.070 --> 03:53.530
das erste Element.

03:53.530 --> 03:55.380
Aus dem Import, der Vorlage.

03:55.380 --> 03:57.780
Das erste Element in der Vorlage, also der Abschnitt,

03:57.780 --> 04:01.590
habe ich in der Element-Eigenschaft hier gespeichert.

04:01.590 --> 04:04.430
Es handelt sich jedoch nicht um ein HTML-Formularelement.

04:04.430 --> 04:07.210
Es handelt sich hier nur um ein HTML-Element.

04:07.210 --> 04:11.710
Jetzt können wir hier auch eine ID zuweisen, und zwar dynamisch und

04:11.710 --> 04:15.380
nicht fest codiert, weil wir mehr als eine Liste von Projekten

04:15.380 --> 04:16.970
haben werden.

04:16.970 --> 04:21.220
Ich möchte in der endgültigen Anwendung Werkzeuglisten haben, eine für die Durchführung

04:21.220 --> 04:25.060
von Projekten und eine für den Abschluss von Projekten, und sie bieten,

04:25.060 --> 04:28.420
ich möchte einige zusätzliche Informationen zu Konstrukteur

04:28.420 --> 04:29.895
bekommen.

04:29.895 --> 04:34.870
Der Typ des Projekts, und ich werde Statistiken verwenden, TypeScript

04:34.870 --> 04:35.703
Abkürzung.

04:35.703 --> 04:39.250
Sie erfahren, wo Sie einen Accessor vor dem Parameter private

04:39.250 --> 04:44.170
oder public hinzufügen können, um automatisch eine gleichnamige Eigenschaft zu

04:44.170 --> 04:48.060
erstellen und den Wert, der über dieses Argument übergeben wird,

04:48.060 --> 04:51.730
in dieser gleichnamigen Eigenschaft zu speichern.

04:51.730 --> 04:55.040
Jetzt hat diese Klasse also auch einen Eigenschaftsnamen, den sie eingeben kann.

04:55.040 --> 04:57.910
Nun stellt sich die Frage, was der Typ dieses Typparameters

04:57.910 --> 04:58.790
ist.

04:58.790 --> 05:03.640
Und das sollte eigentlich ein literaler Typ und ein Unionstyp sein.

05:03.640 --> 05:07.270
Sie ist entweder aktiv oder beendet.

05:07.270 --> 05:11.050
Wir haben sogar aktive Projekte oder abgeschlossene Projekte.

05:11.050 --> 05:14.270
Das ist also ein Argument, das ich erwarte, wenn die Projektliste

05:14.270 --> 05:16.080
instanziiert wird.

05:16.080 --> 05:20.440
Und bei Papa müssen wir die Eigenschaft D ID eingeben, die dann auf diesem

05:20.440 --> 05:21.870
basieren soll.

05:21.870 --> 05:25.090
Das sollte so sein, und für Papa verwende ich hier eine wörtliche Vorlage.

05:25.090 --> 05:30.090
Es sollte der Typ Dash-Projekte sein, also entweder aktive Dash-Projekte oder

05:31.240 --> 05:33.640
abgeschlossene Dash-Projekte.

05:33.640 --> 05:35.070
Das ist meine Idee hier.

05:35.070 --> 05:37.540
Sie können immer diesen Punkttyp verwenden, damit TypeScript

05:37.540 --> 05:40.380
versteht, dass wir diese Eigenschaft verwenden und dass sie

05:40.380 --> 05:41.890
nicht unbenutzt ist.

05:41.890 --> 05:46.200
Damit haben wir Zugriff auf alle Kernelemente und fügen dem

05:46.200 --> 05:49.660
Abschnitt eine ID hinzu, die wir aus unserer Vorlage

05:49.660 --> 05:50.790
erhalten.

05:50.790 --> 05:53.650
Jetzt wollen wir natürlich eine, wir wollen es richtig rendern?

05:53.650 --> 05:58.600
Das ist die Idee, die hinter dem Ganzen steckt, und zwar wiederum in einer privaten Methode.

05:58.600 --> 06:00.540
Gerechtigkeit anbringen.

06:00.540 --> 06:06.310
Wir hatten es in der Projekteingabe und dort ist es jetzt die Zielwarteschlange.

06:06.310 --> 06:11.300
Hängen Sie dies an den Dom an, um die Vaterliste an den Dom zu

06:11.300 --> 06:12.750
übermitteln.

06:12.750 --> 06:16.610
Anstelle des Anhängens werde ich also dasselbe tun, was ich

06:16.610 --> 06:19.223
für das Projektformular getan habe.

06:20.070 --> 06:24.230
Wir können diese Zeile also hierher kopieren und die Einstellung anhängen.

06:24.230 --> 06:27.040
Ich habe mein Host-Element und möchte ein angrenzendes

06:27.040 --> 06:28.420
Element einfügen.

06:28.420 --> 06:30.240
Nach dem Anfang, und das sollte das Element sein.

06:30.240 --> 06:33.300
Wir extrahieren das hier aus der Vorlage.

06:33.300 --> 06:36.990
Aber eigentlich will ich das nicht nach dem Anfang machen,

06:36.990 --> 06:41.960
sondern vor dem Ende, also vor dem Schließen, das Host-Element abheften

06:41.960 --> 06:45.870
und dann können wir natürlich hier im Konstruktor attach

06:45.870 --> 06:51.763
aufrufen, um unser erstelltes Element hier an den Dom anzuhängen.

06:53.880 --> 06:56.370
Bei dieser Liste gibt es jedoch einen

06:56.370 --> 06:59.630
wichtigen Unterschied zur Projekteingabe.

06:59.630 --> 07:03.220
Mit dem Hinzufügen der Liste zum Dom ist es nicht getan.

07:03.220 --> 07:05.270
Die Eingabe wurde beendet, richtig?

07:05.270 --> 07:07.130
Das Formular wurde hier fertiggestellt.

07:07.130 --> 07:08.720
Wir hatten dort alle Inputs.

07:08.720 --> 07:12.420
Alles, was wir tun mussten, war, einen Ereignis-Listener einzurichten.

07:12.420 --> 07:15.840
Was nun die Liste hier angeht, so haben wir sie eigentlich nicht mit einem leeren

07:15.840 --> 07:16.673
Blatt gehabt.

07:16.673 --> 07:21.130
H zu Technik, zum Beispiel, und ich möchte dort einige Texte hinzufügen.

07:21.130 --> 07:22.990
Ich werde also eine Zahl hinzufügen.

07:22.990 --> 07:26.020
Neue Methode zu Ihrer privaten Methode.

07:26.020 --> 07:29.120
Render oder Inhalt könnte ein passender Name sein.

07:29.120 --> 07:34.120
Und meine Idee ist es, die leeren Stellen in dieser Vorlage mit

07:34.230 --> 07:36.862
einem Lebensjahr zu füllen.

07:36.862 --> 07:37.780
Dafür.

07:37.780 --> 07:40.040
Gehen wir zur toten Render-Content-Methode, und es gibt

07:40.040 --> 07:41.580
ein paar Dinge, die ich tun möchte.

07:41.580 --> 07:45.390
Eine Sache ist stat für tote ungeordnete Liste, die Teil meiner

07:45.390 --> 07:47.200
Projektliste hier ist.

07:47.200 --> 07:48.640
Ich möchte ihm eine ID hinzufügen.

07:48.640 --> 07:50.860
Natürlich müssen Sie das nicht tun, aber ich möchte

07:50.860 --> 07:53.500
das tun, damit wir es später auswählen können, wenn wir

07:53.500 --> 07:54.390
es brauchen.

07:54.390 --> 07:58.220
Also werde ich eine Liste ID hier ist in einer Konstanten gespeichert,

07:58.220 --> 08:00.190
und dies wird eine Vorlage literal,

08:00.190 --> 08:04.100
so wird es eine Zeichenfolge, wo wir dynamische Inhalte einfügen

08:04.100 --> 08:09.100
können, und ich möchte diese auf den Typ der umgebenden Projektliste, so aus dem umgebenden

08:09.370 --> 08:14.370
Abschnitt basieren, und dann fügen Sie Projekte Liste danach.

08:15.220 --> 08:19.700
Jetzt können wir auf die Bestellliste zugreifen, die wir in unserem Element erhalten, das

08:19.700 --> 08:22.890
der statische Abschnitt Jahr ist, das rechte Element ist der tote

08:22.890 --> 08:23.820
Abschnitt.

08:23.820 --> 08:27.360
Um also die ungeordnete Liste darin zu erhalten, können wir zum Beispiel

08:27.360 --> 08:30.940
einen Abfrage-Selektor verwenden und nach der ersten und in diesem Fall

08:30.940 --> 08:33.120
einzigen ungeordneten Liste suchen.

08:33.120 --> 08:35.720
Wir wissen, dass wir eine bekommen werden, weil wir wissen, dass es eine geben wird,

08:35.720 --> 08:38.280
und dann können wir hier eine ID hinzufügen, die die Listen-ID sein sollte.

08:38.280 --> 08:40.280
Das ist eine Sache, die ich tun möchte.

08:40.280 --> 08:44.970
Ich möchte auch den Textinhalt aus diesem Alter zu Tag hier und für

08:44.970 --> 08:50.200
diese können wir erreichen, um dieses Element, Abfrage-Selektor.

08:50.200 --> 08:53.020
Suchen Sie das erste und einzige HQ-Tag.

08:53.020 --> 08:56.340
Wir wissen, dass wir eine finden werden, daher das Ausrufezeichen,

08:56.340 --> 09:01.340
um Groß- und Kleinschreibung auszuschließen und den Textinhalt gleich auf Großbuchstaben

09:02.940 --> 09:05.610
umzustellen.

09:05.610 --> 09:08.130
Denken Sie daran, dass der Typ immer aktiv ist.

09:08.130 --> 09:10.060
Wir sind mit zwei Opernfällen fertig.

09:10.060 --> 09:15.060
Wir konvertieren dies in Großbuchstaben und Projekte, so auch ein Sten.

09:16.200 --> 09:19.853
Einfach die Überschrift vorwärts ist Abschnitt.

09:21.970 --> 09:25.220
Und damit sind wir in der Regel auch schon fertig.

09:25.220 --> 09:27.580
Wir haben noch keine Einträge in dieser Liste.

09:27.580 --> 09:30.230
Wir werden später daran arbeiten, aber im Allgemeinen sind wir fertig.

09:30.230 --> 09:35.120
Wir können diesen Rendering-Vorgang z. B. nach dem Anhängen

09:35.120 --> 09:37.210
an den Dom aufrufen.

09:37.210 --> 09:39.210
Jetzt wäre es schön, diese in Aktion zu sehen.

09:39.210 --> 09:42.600
Natürlich werden auch hier wieder Listenpunkte am Ende fehlen,

09:42.600 --> 09:45.523
aber es wäre schön, hier etwas in Aktion zu sehen.

09:46.690 --> 09:49.620
Dazu gehen wir zum Ende der Datei, wo wir die Projekteingabe

09:49.620 --> 09:53.310
instanziieren, und dort können wir unsere Listen nicht immer

09:53.310 --> 09:55.200
instanziieren.

09:55.200 --> 09:59.200
Wir haben die aktive Projektliste, die wir instanziieren, aber eine

09:59.200 --> 10:01.230
neue Projektliste aufrufen.

10:01.230 --> 10:04.220
Und dort müssen wir das Typ-Argument übergeben, das hier

10:04.220 --> 10:06.040
entweder aktiv oder fertig ist.

10:06.040 --> 10:08.610
Da ich auf der aktiven Liste stehe, bin ich

10:08.610 --> 10:09.950
natürlich inaktiv.

10:09.950 --> 10:13.140
Und dann haben wir hier die Liste der abgeschlossenen Projekte, bei

10:13.140 --> 10:15.290
denen ich natürlich am Ende vorbeigehe.

10:15.290 --> 10:18.673
Wenn wir nun sicher sind, dass es ohne Fehler kompiliert werden sollte.

10:19.520 --> 10:23.090
Wenn Sie nun zurückgehen, sehen Sie diese beiden

10:23.090 --> 10:27.770
leeren Abschnitte mit den Überschriften und dem leeren Raum,

10:27.770 --> 10:33.390
in den später die Projektelemente eingefügt werden sollen.

10:33.390 --> 10:37.440
Im Moment haben wir keine derartigen Projektelemente, Schnee.

10:37.440 --> 10:39.710
Als nächsten Schritt sollten wir

10:39.710 --> 10:43.660
uns überlegen, wie wir sicherstellen können, dass wir ein

10:43.660 --> 10:49.420
neues Projekt im Code erstellen, wenn wir auf Projekt hinzufügen klicken.

10:49.420 --> 10:53.730
Also eine neue Datenstruktur, die ein Projekt darstellt, und dass

10:53.730 --> 10:58.047
wir dann diese Informationen über dieses neue Projekt an den Akt der

10:58.047 --> 10:59.870
Projekte weitergeben.

10:59.870 --> 11:03.850
Führen Sie hier diesen aktiven Projektabschnitt auf, denn jedes neue

11:03.850 --> 11:06.500
Projekt sollte standardmäßig aktiv sein.

11:06.500 --> 11:09.390
Dies wird unser nächstes Ziel sein, und auch hier wird es viele

11:09.390 --> 11:12.080
verschiedene Möglichkeiten geben, dies umzusetzen.

11:12.080 --> 11:15.870
Wir werden das zusammen mit einer Methode machen, die ich in der nächsten Vorlesung

11:15.870 --> 11:16.703
vorstelle.
