WEBVTT

00:02.160 --> 00:04.930
Giảng viên: Đây là ví dụ cơ bản tương tự trong

00:04.930 --> 00:06.440
một dự án thực tế.

00:06.440 --> 00:08.550
Bạn sẽ tìm thấy dự án đơn giản này, tệp

00:08.550 --> 00:11.270
HTML chỉ mục và tệp JavaScript này, được đính kèm

00:11.270 --> 00:13.340
với video này trong một tệp con.

00:13.340 --> 00:16.900
Bạn chỉ cần mở cái này và sau đó mở tệp HTML chỉ mục.

00:16.900 --> 00:18.610
Bạn cũng có thể mở mã trong bất

00:18.610 --> 00:20.890
kỳ trình soạn thảo văn bản nào bạn chọn.

00:20.890 --> 00:22.160
Ở đây tôi đang sử dụng VisualStudioCode

00:22.160 --> 00:25.000
và tôi sẽ quay lại thiết lập chính xác của mình sau trong mô-đun

00:25.000 --> 00:26.250
này.

00:26.250 --> 00:29.250
Hiện tại, bạn chỉ có thể mở hai tệp văn bản này bằng bất

00:29.250 --> 00:31.180
kỳ trình soạn thảo văn bản nào.

00:31.180 --> 00:34.110
Bây giờ những gì bạn sẽ tìm thấy trong đó là tệp JavaScript

00:34.110 --> 00:37.000
này, tệp này tương tác với tệp HTML chỉ mục này.

00:37.000 --> 00:38.830
Và sau đó là tệp HTML lập chỉ mục,

00:38.830 --> 00:41.050
bạn sẽ tìm thấy hai đầu vào và nút và bất

00:41.050 --> 00:43.698
kỳ tệp JavaScript nào được nhập vào đây.

00:43.698 --> 00:45.843
Về cơ bản, chúng tôi tiếp cận với những yếu tố này.

00:45.843 --> 00:47.968
Sau đó, chúng tôi có một chức năng ở đây và

00:47.968 --> 00:50.020
một trình xử lý sự kiện trên nút kích hoạt

00:50.020 --> 00:53.830
chức năng và ghi lại kết quả của chức năng ở đây trong bảng điều khiển.

00:53.830 --> 00:56.750
Bây giờ, nếu chúng ta chỉ cần mở tệp HTML chỉ mục

00:56.750 --> 01:00.701
đó, bằng cách nhấp đúp vào tệp đó trong Windows Explorer hoặc

01:00.701 --> 01:03.220
Mac Finder để tệp mở ra trong trình duyệt,

01:03.220 --> 01:05.150
bạn sẽ thấy điều này.

01:05.150 --> 01:07.250
Hai đầu vào và nút thêm và ở đây tôi

01:07.250 --> 01:11.170
cũng đã mở các công cụ dành cho nhà phát triển trình duyệt.

01:11.170 --> 01:13.760
Bây giờ, nếu bạn nhập 10 và 5 ở đây chẳng

01:13.760 --> 01:16.640
hạn, bạn có thể thấy kết quả là 15 ở đây bên

01:16.640 --> 01:19.420
phải nhưng thay vào đó bạn thấy 105.

01:19.420 --> 01:23.460
Và điều này cho chúng ta thấy một điểm yếu của JavaScript ở đây.

01:23.460 --> 01:25.890
Đây không phải là một lỗi kỹ thuật.

01:25.890 --> 01:28.050
Đó không phải là một lỗi được đưa ra,

01:28.050 --> 01:31.640
nhưng đó là một lỗi logic trong ứng dụng của chúng tôi.

01:31.640 --> 01:33.986
Tuy nhiên, lỗi này đến từ đâu?

01:33.986 --> 01:37.490
Ở đây trong JavaScript, tôi tiếp cận với hai đầu vào này

01:37.490 --> 01:39.612
và khi nhấp vào nút, cuối cùng tôi

01:39.612 --> 01:41.920
nhận được các giá trị của hai phần tử

01:41.920 --> 01:45.300
đầu vào và tôi chuyển chúng vào đây để thêm.

01:45.300 --> 01:46.970
Và ở đây, điều quan trọng cần

01:46.970 --> 01:50.100
biết là trong JavaScript khi bạn truy cập giá trị

01:50.100 --> 01:53.130
của phần tử đầu vào, nó luôn là một chuỗi.

01:53.130 --> 01:55.790
Luôn luôn, bất kể đây là loại đầu vào nào.

01:55.790 --> 01:59.633
Nếu đây là loại số hay không, thì nó luôn là một chuỗi.

02:00.645 --> 02:03.995
Vì vậy, tôi sẽ chuyển hai chuỗi vào cuối hàm này và nếu bạn thêm

02:03.995 --> 02:05.890
hai chuỗi trong JavaScript, chúng

02:05.890 --> 02:09.570
sẽ được nối với nhau thay vì được thêm vào một cách toán học.

02:09.570 --> 02:14.210
Đó là lý do tại sao chúng ta thấy 105, 10 và 5 được ghép nối với nhau.

02:14.210 --> 02:17.090
Đây là vấn đề với JavaScript ở đây.

02:17.090 --> 02:19.980
Và đây là điều mà TypeScript có thể giúp chúng ta.

02:19.980 --> 02:22.360
Bây giờ không có TypeScript, tất nhiên

02:22.360 --> 02:24.380
chúng ta có thể thêm dấu kiểm if

02:24.380 --> 02:28.048
ở đây và kiểm tra xem loại số một có bằng số không.

02:28.048 --> 02:33.048
Và nếu loại số hai bằng số, và nếu đúng như vậy thì tôi trả về

02:34.030 --> 02:37.390
phép tính của mình như thế này, nếu không,

02:37.390 --> 02:40.588
tôi có thể đưa ra lỗi hoặc ít nhất tôi chuyển

02:40.588 --> 02:43.304
đổi cả hai thành số bằng cách thêm

02:43.304 --> 02:47.428
dấu cộng vào trước mỗi tham số ở đây .

02:47.428 --> 02:50.510
Bây giờ đây là một số mã chúng ta có thể viết.

02:50.510 --> 02:53.023
Có thể tinh tế hơn một chút so với điều này trong JavaScript.

02:53.023 --> 02:57.130
Và với điều đó, chúng tôi sẽ đảm bảo rằng chúng tôi chuyển đổi

02:57.130 --> 03:00.670
số hoặc đầu vào thành số nếu chúng chưa phải là số.

03:00.670 --> 03:02.430
Vì vậy, với điều đó, nếu tôi tải lại

03:02.430 --> 03:05.220
cái này và tôi lặp lại điều này, bây giờ chúng tôi nhận

03:05.220 --> 03:07.590
được 15 do mã đã thay đổi của chúng tôi.

03:07.590 --> 03:09.350
Vì vậy, tất nhiên chúng ta có thể làm điều này trong JavaScript.

03:09.350 --> 03:10.970
Và đây là vanilla JavaScript,

03:10.970 --> 03:13.440
không có TypeScript-ish gì về nó.

03:13.440 --> 03:16.640
Nhưng chúng tôi đã viết thêm một số mã cho một lỗi mà tôi

03:16.640 --> 03:19.048
thực sự muốn ngăn chặn ngay từ đầu.

03:19.048 --> 03:22.210
Tôi không muốn điều này xảy ra.

03:22.210 --> 03:26.260
Tôi muốn đảm bảo rằng chúng ta thậm chí không thể chuyển các chuỗi

03:26.260 --> 03:28.930
ở đây để thêm vì add phải là một hàm chỉ hoạt động

03:29.890 --> 03:31.020
trên các số.

03:31.020 --> 03:32.570
Vì vậy, trong đó chúng tôi không cần kiểm

03:33.428 --> 03:35.650
tra xem chúng tôi có nhận được một số hay không.

03:35.650 --> 03:37.000
Vì vậy, tôi muốn giữ chức năng

03:37.000 --> 03:38.500
này ở trạng thái như trước đây.

03:38.500 --> 03:41.630
Tôi muốn chức năng này ở đây, giống như thế này.

03:41.630 --> 03:44.003
Và đó là nơi TypeScript có thể giúp chúng tôi.

03:45.088 --> 03:45.921
Vì vậy, TypeScript

03:45.921 --> 03:48.900
có thể giúp chúng ta trong những tình huống như tôi vừa trình bày.

03:48.900 --> 03:52.690
Bây giờ để xem nó giúp chúng ta như thế nào, hãy cài đặt nó.

03:52.690 --> 03:56.590
Vì vậy, trên typescriptlang. org, bạn có thể nhấp vào tải xuống.

03:56.590 --> 03:58.540
Và ở đó bạn sẽ học cách cài đặt nó.

03:58.540 --> 04:00.250
Và chúng tôi thực sự sẽ cài

04:01.136 --> 04:02.880
đặt nó bằng lệnh này sử dụng

04:02.880 --> 04:06.750
công cụ NPM và công cụ NPM là một phần của gói Node JS.

04:06.750 --> 04:10.210
Vì vậy, mặc dù chúng tôi sẽ không viết mã Node JS ở đây, chúng

04:10.210 --> 04:12.910
tôi vẫn cần cài đặt Node JS đơn giản vì đằng sau

04:12.910 --> 04:14.760
hậu trường cũng sẽ được sử dụng

04:14.760 --> 04:17.770
bởi một số công cụ chúng tôi sử dụng.

04:17.770 --> 04:21.780
Và khi chúng tôi cài đặt Node JS, chúng tôi cũng cài đặt NPM, Trình

04:21.780 --> 04:24.956
quản lý gói Node, một công cụ mà sau đó chúng tôi có thể

04:24.956 --> 04:29.200
sử dụng để cài đặt TypeScript trên toàn cầu trên máy của mình.

04:29.200 --> 04:31.452
Vì vậy, chỉ cần truy cập nodejs. org và ở đó, cài đặt

04:31.452 --> 04:34.220
phiên bản mới nhất mà bạn tìm thấy ở đây.

04:34.220 --> 04:35.723
Đơn giản chỉ cần nhấp vào nút này.

04:36.586 --> 04:38.276
Sau đó, nó sẽ tải xuống và cài đặt hoặc bạn có

04:38.276 --> 04:39.420
thể xem qua trình cài đặt đó.

04:39.420 --> 04:42.360
Nó được hỗ trợ cho tất cả các hệ điều hành.

04:42.360 --> 04:45.300
Và khi bạn đã cài đặt Node JS, bạn

04:45.300 --> 04:47.936
sẽ có thể chạy lệnh này.

04:47.936 --> 04:51.440
Chỉ cần mở thiết bị đầu cuối bình thường hoặc dấu

04:51.440 --> 04:54.800
nhắc lệnh của bạn và sau đó sao chép lệnh đó.

04:54.800 --> 04:57.223
Quan trọng, trên Mac và Linux, bạn có thể cần phải

04:57.223 --> 04:59.412
thêm sudo trước phần này để có quyền phù hợp.

04:59.412 --> 05:02.810
Trên Windows, điều này sẽ không bắt buộc.

05:02.810 --> 05:05.100
Vì vậy, chỉ cần đảm bảo rằng sau đó bạn đã cài

05:05.100 --> 05:06.810
đặt TypeScript bằng lệnh này.

05:06.810 --> 05:09.372
Nhập mật khẩu của bạn trong trường hợp bạn được nhắc về nó.

05:09.372 --> 05:12.176
Và cùng với đó, bạn đã cài đặt TypeScript trên toàn

05:12.176 --> 05:15.430
cầu trên máy của mình, bây giờ điều này có nghĩa là gì?

05:15.430 --> 05:17.696
Đã cài đặt TypeScript.

05:17.696 --> 05:20.810
Bây giờ hãy nhớ rằng TypeScript là một ngôn ngữ lập trình,

05:20.810 --> 05:22.750
nhưng nó chỉ là ngôn ngữ lập trình

05:22.750 --> 05:25.212
hoạt động vì chúng ta cũng có trình biên dịch

05:25.212 --> 05:28.137
này, công cụ biên dịch thành JavaScript.

05:28.137 --> 05:31.310
Vì vậy, cuối cùng, những gì chúng tôi đã cài đặt

05:31.310 --> 05:33.296
ở đây, đó là trình biên dịch và

05:33.296 --> 05:36.116
mọi thứ nó cần biết để hiểu mã TypeScript

05:36.116 --> 05:39.020
để chuyển đổi nó thành JavaScript.

05:39.020 --> 05:41.036
Vì vậy, với điều này, chúng tôi đã

05:41.036 --> 05:44.460
cài đặt trình biên dịch và chúng tôi có thể chạy lệnh TSC

05:44.460 --> 05:47.210
ngay bây giờ để gọi trình biên dịch TypeScript

05:47.210 --> 05:50.870
này để biên dịch tệp TypeScript thành JavaScript.

05:50.870 --> 05:54.140
Vì vậy, để thấy được điều này trong dự án mà chúng ta đã thực hiện, hãy chỉ cần thêm một

05:54.140 --> 05:56.563
tệp mới bằng cách sử dụng ts. chẳng hạn.

05:56.563 --> 05:58.677
Bất kỳ tên nào bạn muốn, nhưng phần mở rộng phải là . ts viết

05:58.677 --> 06:03.677
tắt của TypeScript.

06:05.100 --> 06:07.651
Bây giờ, hãy sao chép mã JavaScript

06:07.651 --> 06:09.850
đó vào tệp TypeScript.

06:09.850 --> 06:13.100
Ở đây trong VisualStudioCode, tôi ngay lập tức nhận được một số lỗi mà bây giờ

06:13.100 --> 06:14.280
chúng tôi sẽ khắc phục.

06:14.280 --> 06:16.379
Và đây là một lợi thế lớn của TypeScript.

06:16.379 --> 06:18.915
Nếu bạn đang sử dụng đúng IDE và khuyến

06:18.915 --> 06:22.710
nghị mạnh mẽ của tôi thực sự là VisualStudioCode, và tôi

06:22.710 --> 06:24.420
sẽ quay lại vấn đề đó sau.

06:24.420 --> 06:27.810
Sau đó, bạn đã nhận được sự hỗ trợ tuyệt vời trong IDE khi

06:27.810 --> 06:30.230
làm việc bên trong các tệp TypeScript.

06:30.230 --> 06:34.710
Ở đây, về cơ bản, nó cho phép TypeScript phân tích mã của tôi

06:34.710 --> 06:36.910
và xác định một số điểm yếu.

06:36.910 --> 06:39.720
Điều đó thật tuyệt, bởi vì đó chính xác là những gì tôi muốn.

06:39.720 --> 06:42.110
Vì vậy, ở đây trong ví dụ này, hãy để tôi

06:42.110 --> 06:44.003
xóa tệp JS chỉ JavaScript.

06:45.952 --> 06:48.360
Và cùng với đó, một số lỗi đã biến mất

06:48.360 --> 06:50.539
vì nó xác định rằng một số hằng số,

06:50.539 --> 06:53.230
v.v. đã được sử dụng trong nhiều tệp.

06:53.230 --> 06:55.787
Nhưng nó vẫn cho tôi một lỗi ở dưới đó.

06:55.787 --> 06:57.700
Và những gì bạn thấy, chẳng hạn, là

06:57.700 --> 07:00.108
chưa chắc thực sự có thuộc tính giá trị.

07:00.108 --> 07:03.200
Bây giờ đó là một sai lầm mà tôi thậm chí còn chưa xem xét trước

07:03.200 --> 07:05.720
đây trong JavaScript, nhưng đó là sự thật.

07:05.720 --> 07:08.350
Tôi đang chọn một phần tử theo ID ở đây.

07:08.350 --> 07:11.680
Bây giờ TypeScript không thể biết liệu điều này có thực sự hoạt động hay không.

07:11.680 --> 07:13.160
Có lẽ tôi có một lỗi đánh máy ở đây.

07:13.160 --> 07:15.940
Trong trường hợp này, tôi sẽ không thể chọn một phần tử.

07:15.940 --> 07:17.704
Yếu tố này đơn giản là không tồn tại trên trang.

07:17.704 --> 07:20.164
Vì vậy, chúng tôi có thể mắc lỗi đánh máy và TypeScript không phân tích

07:20.164 --> 07:22.472
mã HTML của bạn để tìm hiểu xem điều này có hoạt động hay không.

07:22.472 --> 07:24.468
Vì vậy, đối với một, điều này có thể thất bại.

07:24.468 --> 07:28.740
Nhưng ngay cả khi nó thành công và chúng tôi chọn một phần tử ở đó, nó không

07:28.740 --> 07:30.910
nhất thiết phải là phần tử đầu vào.

07:30.910 --> 07:34.720
Nó có thể là bất kỳ phần tử nào khác và hầu hết các phần tử HTML không

07:34.720 --> 07:37.450
có thuộc tính giá trị mà bạn có thể truy cập.

07:37.450 --> 07:38.630
Và điều này đã là tuyệt vời.

07:38.630 --> 07:41.372
TypeScript buộc chúng ta phải rõ ràng hơn,

07:41.372 --> 07:44.060
rõ ràng hơn về ý định của chúng ta và kiểm

07:44.060 --> 07:46.130
tra lại mã của chúng ta.

07:46.130 --> 07:48.100
Và ví dụ ở đây, và bạn không cần

07:48.100 --> 07:49.820
phải hiểu hết cú pháp đó.

07:49.820 --> 07:52.172
Chúng ta sẽ học nó từng bước trong suốt khóa học.

07:52.172 --> 07:55.660
Nhưng ví dụ ở đây, chúng tôi có thể cho TypeScript biết rằng chúng

07:55.660 --> 07:58.204
tôi chắc chắn rằng chúng tôi sẽ nhận được một phần

07:58.204 --> 08:00.080
tử bằng cách thêm dấu chấm than.

08:00.080 --> 08:04.170
Điều này về cơ bản nói với TypeScript rằng điều này sẽ không bao giờ mang lại giá trị rỗng.

08:04.170 --> 08:06.370
Điều này sẽ luôn tìm thấy một phần tử.

08:06.370 --> 08:08.420
Và với tư cách là một nhà phát triển, tôi

08:08.420 --> 08:10.350
tất nhiên biết rằng điều này sẽ luôn tìm

08:10.350 --> 08:11.920
thấy một phần tử vì tôi đã kiểm

08:11.920 --> 08:14.763
tra lại ID và tôi thấy đúng vậy, tôi có ID đó ở đây.

08:15.610 --> 08:17.270
Ngoài ra, tôi cũng biết

08:17.270 --> 08:19.500
nó sẽ luôn là một yếu tố đầu vào.

08:19.500 --> 08:22.408
Vì vậy, chúng ta có thể sử dụng làm phần tử đầu vào HTML,

08:22.408 --> 08:25.470
một cú pháp được gọi là typecasting mà tôi cũng sẽ giải

08:25.470 --> 08:27.746
thích chi tiết hơn sau này, để cho TypeScript

08:27.746 --> 08:30.327
biết đây sẽ là loại phần tử nào.

08:30.327 --> 08:32.926
Chúng ta cũng có thể áp dụng điều này cho phần tử thứ hai.

08:32.926 --> 08:35.650
Vì vậy, để thực sự rõ ràng ở đây, đây

08:35.650 --> 08:37.510
là cú pháp TypeScript.

08:37.510 --> 08:39.520
Tôi có thể sử dụng dấu chấm than này ở đây

08:39.520 --> 08:41.600
và tôi có thể sử dụng cách đánh máy này ở đây

08:41.600 --> 08:44.786
vì chúng tôi đang ở trong một . ts, chúng tôi đang ở trong tệp TypeScript.

08:44.786 --> 08:48.380
Chúng tôi sẽ biên dịch nó thành JavaScript.

08:48.380 --> 08:51.050
Điều này sẽ không hoạt động trong JavaScript vanilla.

08:51.050 --> 08:53.427
Điều này không có sẵn ở đó.

08:53.427 --> 08:56.300
Với điều này, chúng tôi buộc phải rõ ràng hơn về ý định

08:56.300 --> 08:58.460
của mình và thực sự nghĩ về mã của mình

08:58.460 --> 09:01.060
và kiểm tra lại mã, điều này thật tuyệt.

09:01.060 --> 09:03.160
Nhưng đó thậm chí không phải là lợi thế lớn nhất.

09:04.270 --> 09:06.820
Ưu điểm lớn nhất là việc bổ sung các loại.

09:06.820 --> 09:09.630
Rốt cuộc, đó là những gì mang lại cho TypeScript tên của nó.

09:09.630 --> 09:12.282
Và ở đây tôi không nói bất cứ điều gì về các loại dữ

09:12.282 --> 09:14.204
liệu mà chức năng này hoạt động.

09:14.204 --> 09:17.886
Nếu chúng ta di chuột qua một trong các tham số này, chúng

09:17.886 --> 09:20.126
ta sẽ thấy bất kỳ thứ gì ở đây.

09:20.126 --> 09:22.828
Và cuối cùng, đây là TypeScript nói với chúng tôi,

09:22.828 --> 09:24.880
"Tôi không biết có gì trong đó. Nó có thể là bất kỳ loại giá trị nào.

09:24.880 --> 09:27.162
Bây giờ chúng ta có thể thêm một loại rõ ràng hơn trong các tệp TypeScript.

09:27.162 --> 09:31.960
Vì vậy, không phải trong các tệp JavaScript mà trong các tệp TypeScript, bằng cách thêm dấu hai

09:31.960 --> 09:33.806
chấm ở đây và sau đó chỉ định loại.

09:33.806 --> 09:38.580
Ví dụ, số.

09:38.580 --> 09:40.730
Làm điều này ở đây và làm điều này ở đây.

09:40.730 --> 09:43.300
Với cú pháp bổ sung mà TypeScript này,

09:43.300 --> 09:45.246
mà trình biên dịch này hiểu,

09:45.246 --> 09:47.928
chúng ta đang nói với TypeScript rằng

09:47.928 --> 09:50.960
đây sẽ là kiểu số và đây sẽ là kiểu số.

09:50.960 --> 09:54.010
Và do đó, bây giờ chúng tôi lại gặp lỗi ở đây.

09:54.010 --> 09:56.126
Và nhân tiện, chúng tôi không

09:56.126 --> 09:58.060
gặp lỗi này trong IDE.

09:58.060 --> 09:59.370
Chúng tôi cũng nhận được nó nếu

09:59.370 --> 10:01.940
chúng tôi cố gắng biên dịch mã này vì đó cuối cùng là những

10:01.940 --> 10:03.820
gì chúng tôi cần làm, phải không?

10:03.820 --> 10:05.326
Bây giờ để biên dịch cái này, tôi sẽ mở một thiết bị đầu cuối.

10:05.326 --> 10:08.670
Và ở đây, tôi chỉ đang mở thiết bị đầu cuối hoặc dấu nhắc

10:08.670 --> 10:10.760
lệnh được tích hợp vào IDE này.

10:10.760 --> 10:13.683
Đó là dấu nhắc lệnh hệ thống thông thường.

10:14.947 --> 10:16.530
Thiết bị đầu cuối lệnh hệ thống thông thường

10:16.530 --> 10:18.110
mà tôi cũng đang sử dụng ở đây, vừa được

10:18.110 --> 10:19.533
điều hướng vào thư mục này.

10:20.510 --> 10:22.446
Vì vậy, nếu bạn không sử dụng một

10:22.446 --> 10:27.420
số thiết bị đầu cuối IDE tích hợp sẵn, bạn có thể sử dụng thiết bị đầu cuối thông thường

10:27.420 --> 10:30.265
của mình nhưng CD sẽ điều hướng vào thư mục bắt đầu

10:30.265 --> 10:33.960
được giải nén mà bạn đã thêm tệp TypeScript của mình.

10:33.960 --> 10:36.300
Và khi bạn đã ở trong thư mục đó, bạn có thể chạy TSC.

10:36.300 --> 10:38.888
Điều đó sẽ gọi trình biên dịch TypeScript này

10:38.888 --> 10:42.980
mà chúng tôi đã cài đặt trước đó bằng cách sử dụng dấu gạch ngang ts. ts.

10:42.980 --> 10:47.980
Và nếu bạn chạy cái này, bạn sẽ thực sự gặp lỗi.

10:47.990 --> 10:50.728
Bạn vẫn sẽ nhận được một tệp JavaScript,

10:50.728 --> 10:53.267
vì theo mặc định, TypeScript sẽ vẫn

10:53.267 --> 10:57.460
biên dịch tệp đó thành JavaScript, bạn cũng sẽ học cách chặn

10:57.460 --> 11:00.050
điều này sau trong khóa học đó.

11:00.050 --> 11:02.900
Nhưng nó cung cấp cho bạn một lỗi trình biên dịch trong khi làm như vậy.

11:02.900 --> 11:05.904
Nó cho bạn biết rằng đối số kiểu chuỗi

11:05.904 --> 11:09.070
không thể gán cho tham số kiểu số.

11:09.070 --> 11:13.128
Vì vậy, vấn đề ở đây là TypeScript hiểu rằng những gì chúng

11:13.128 --> 11:16.550
ta nhận được trên thuộc tính giá trị của phần tử

11:16.550 --> 11:18.930
đầu vào sẽ là một chuỗi.

11:18.930 --> 11:23.130
Chúng tôi cũng thấy điều này ở đây trong IDE.

11:23.130 --> 11:24.786
Và chúng tôi không thể chuyển cái này

11:24.786 --> 11:28.130
cho add vì ở đó, chúng tôi không muốn một chuỗi, chúng tôi muốn một số.

11:28.130 --> 11:31.026
Vì vậy, chúng tôi phải khắc phục điều này bằng cách, ví dụ, chuyển

11:31.026 --> 11:33.600
đổi số này thành một số ở đây bằng cách thêm dấu cộng.

11:33.600 --> 11:36.790
Và ngay sau khi chúng tôi thực hiện việc này, chúng tôi

11:36.790 --> 11:39.708
có thể biên dịch lại mã này bằng cách lặp lại lệnh đó

11:39.708 --> 11:42.406
và bây giờ nó sẽ biên dịch mà không có lỗi.

11:42.406 --> 11:45.225
Nó cung cấp cho chúng tôi điều này bằng cách sử dụng TypeScript. JavaScript và bây giờ nó lại hiển thị một

11:45.225 --> 11:49.030
số lỗi vì nó không hiểu rằng

11:49.030 --> 11:50.690
nó sẽ không bao giờ sử dụng

11:50.690 --> 11:53.090
cả hai tệp cùng một lúc ở đây.

11:54.028 --> 11:55.373
Một lần nữa, đây là tất cả những thứ sẽ trở nên

11:56.466 --> 11:58.530
tốt hơn sau này trong khóa học khi chúng ta định cấu hình phần này.

11:58.530 --> 12:00.428
Chúng ta có thể bỏ qua điều này cho bây giờ.

12:00.428 --> 12:01.261
Vì vậy, nó mang lại cho tôi tập tin này.

12:02.588 --> 12:04.348
Và nếu chúng ta mở cái này, chúng ta sẽ thấy một điều thú vị ở đây.

12:04.348 --> 12:06.210
Tất nhiên, chúng tôi thấy rằng ở đó, các loại của chúng tôi đã biến mất.

12:06.210 --> 12:08.690
Việc đúc ở đây đã biến mất.

12:08.690 --> 12:11.280
Chúng tôi lại có JavaScript vanilla.

12:11.280 --> 12:13.308
Vì vậy, nếu chúng ta xem tệp TypeScript của mình ở đây,

12:13.308 --> 12:16.250
chúng ta sẽ thấy rằng ở đó chúng ta có tất cả những bổ sung tuyệt vời này.

12:16.250 --> 12:18.786
Nhưng như tôi đã đề cập, đây chỉ là các tính năng của TypeScript.

12:18.786 --> 12:22.130
Khi bạn biên dịch sang JavaScript, chúng được sử dụng để đánh

12:22.130 --> 12:24.600
giá mã của bạn và tìm các lỗi tiềm ẩn, nhưng sau

12:24.600 --> 12:26.770
đó chúng bị loại bỏ và chúng tôi lấy JavaScript

12:26.770 --> 12:29.090
thông thường làm đầu ra.

12:29.090 --> 12:33.960
Vì vậy, bây giờ chúng ta có thể truy cập tệp HTML chỉ

12:33.960 --> 12:37.010
mục của mình và nhập bằng ts. js và điều đó rất quan trọng.

12:37.010 --> 12:41.230
Luôn nhập tệp JavaScript vì trình

12:41.230 --> 12:43.550
duyệt không thể chạy TypeScript.

12:43.550 --> 12:45.990
Chúng ta cần nhập kết quả của quá trình biên dịch.

12:45.990 --> 12:49.480
Và bây giờ với điều đó, nếu chúng tôi tải lại mã này, chúng tôi

12:49.480 --> 12:52.108
có mã làm việc của mình vì bây giờ, chúng tôi có

12:52.108 --> 12:55.750
mã JavaScript phù hợp nơi chúng tôi đã khắc phục sự cố này bằng cách

12:55.750 --> 12:57.970
truyền đầu vào trước khi chúng tôi chuyển

12:59.410 --> 13:01.110
chúng đến chức năng.

13:01.110 --> 13:03.010
Nhưng chúng tôi đã có thể khắc phục những sự cố

13:03.986 --> 13:06.087
này nhờ các chú thích loại của chúng tôi ở đây.

13:06.087 --> 13:08.100
Và như bạn đã thấy, chúng tôi cũng phải viết

13:08.100 --> 13:10.720
một số phần khác của mã theo cách gọn gàng hơn.

13:10.720 --> 13:13.220
Và đó là lý do tại sao TypeScript thật tuyệt vời.

13:13.220 --> 13:15.400
Nó buộc chúng ta phải viết mã

13:15.400 --> 13:17.880
tốt hơn, sạch hơn và ít lỗi hơn.
