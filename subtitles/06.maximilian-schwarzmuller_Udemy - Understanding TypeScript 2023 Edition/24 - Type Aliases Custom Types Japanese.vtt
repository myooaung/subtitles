WEBVTT

00:02.340 --> 00:06.970
-：さて､ 「これ」と「これ」のようなユニオン型を扱う場合､

00:06.970 --> 00:11.070
常にユニオン型を繰り返すのは面倒なことです｡

00:11.070 --> 00:15.330
このユニオン型を再インストールした新しい型を取引したい場合があります｡

00:15.330 --> 00:18.540
そして､ もうひとつのクールなタイプの機能であるタイプエイリアスの機能を使えば､

00:18.540 --> 00:21.410
それが可能になるのです｡

00:21.410 --> 00:22.723
このようなエイリアスは､

00:24.280 --> 00:25.670
通常､ 使用する前に作成します｡

00:25.670 --> 00:31.240
この場合は､ ファイルの先頭で､ typeキーワードで作成します｡

00:31.240 --> 00:34.040
typeキーワードはJavaScriptには組み込まれていませんが､

00:34.040 --> 00:35.880
TypeScriptではサポートされています｡

00:35.880 --> 00:42.860
typeの後に､ カスタムタイプの名前､ またはタイプエイリアスの名前を追加します｡

00:42.860 --> 00:44.980
例えばcombinable｡ 

00:44.980 --> 00:46.720
でも､ 名前は本当にあなた次第なんです｡ 

00:46.720 --> 00:50.520
ここでは､ JavaScriptやTypeScriptに組み込まれていない任意の名前を､

00:50.520 --> 00:52.530
キー名として考案することができる｡

00:52.530 --> 00:56.250
しかし､ combinableはJavaScriptに組み込まれているわけでもなく､

00:56.250 --> 00:58.900
TypeScriptに組み込まれているわけでもないので､

00:58.900 --> 01:01.170
使うことができるのです｡

01:01.170 --> 01:08.320
そして､ 今度は等号で､ エイリアスにエンコードしたいタイプを割り当てるわけです｡

01:08.320 --> 01:10.300
つまり､ ここに数字を格納しておけば､

01:10.300 --> 01:12.790
何かが数字であることを確認したいときはいつでも､

01:12.790 --> 01:16.400
代わりにcombinableを使うことができるのです｡

01:16.400 --> 01:21.630
さて､ これはあまり意味のないことで､ 間違いなく我々のコードをより読みにくくするものです｡

01:21.630 --> 01:25.500
例えば､ 下のほうでcombinableを使えば､ 技術的にはうまくいくのですが､

01:25.500 --> 01:27.420
コードをちらっと見ただけでは､

01:27.420 --> 01:33.180
ここで数値や文字列が欲しいということはわかりません｡

01:33.180 --> 01:37.500
そのため､ 一般的にはユニオン型と組み合わせて使用します｡

01:37.500 --> 01:40.380
そこで､ カスタム・タイプにユニオン・タイプを格納し､

01:40.380 --> 01:48.170
いわばタイプ・エイリアスで､ ユニオン・タイプの代わりにcombinableを参照することができるようになります｡

01:48.170 --> 01:51.060
つまり､ 前とまったく同じセットアップを行い､ 再利用可能な型のエイリアスをここに置いて､

01:51.060 --> 01:55.580
代わりに使用できるようにしたのです｡

01:55.580 --> 01:57.660
これにより､ 余分なコードを省くことができ､

01:57.660 --> 01:59.200
combinableを使用する際に､

01:59.200 --> 02:04.200
常に同じ型または同じ型設定を参照するようにすることができます｡

02:04.234 --> 02:06.600
もちろん､ 数値や文字列だけでなく､

02:06.600 --> 02:08.970
例えばこれら2つのリテラル型など､

02:08.970 --> 02:14.810
エイリアスに格納したいあらゆる型の設定に使用することができます｡

02:14.810 --> 02:18.210
この2つの型､ つまりこのユニオン型に対して､

02:18.210 --> 02:28.920
ConversionDescriptorなどの型別名を取引し､ まさにこの型をこの型別名の中に格納することも可能です｡

02:28.920 --> 02:32.270
そして､ このタイプエイリアスを下に使うことができます｡ 

02:32.270 --> 02:34.970
だから､ タイプエイリアスは本当に､ 本当に便利なんです｡ 

02:34.970 --> 02:37.490
より複雑な型定義は､ 独自の型､ いわば型名にエンコードすることができ､

02:37.490 --> 02:45.920
この型設定を必要とするコード内のあらゆる場所で再利用することができるのです｡

02:45.920 --> 02:48.060
そうすれば､ 下の方のタイプミスを避けることができますし､

02:48.060 --> 02:51.000
単純にコードを節約して､ より速くコードを書くことができますし､

02:51.000 --> 02:53.490
例えば上の方で説明的な型のエイリアス名を選ぶなどして､

02:53.490 --> 02:57.653
常に自分の意図を明確にすることができます｡
