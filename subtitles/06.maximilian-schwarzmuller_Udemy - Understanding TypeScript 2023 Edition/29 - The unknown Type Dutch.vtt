WEBVTT

00:02.340 --> 00:04.020
Instructeur: We zijn bijna klaar met

00:04.020 --> 00:06.240
de basis over TypeScript en de kerntypes.

00:06.240 --> 00:10.130
Er zijn nog twee soorten die goed zijn om te weten,

00:10.130 --> 00:13.170
omdat ze er van tijd tot tijd toe doen.

00:13.170 --> 00:16.603
Het eerste type is het onbekende type.

00:17.860 --> 00:20.350
Daarom noem ik dit bestand jouw functies. ts en voeg een

00:20.350 --> 00:23.343
nieuwe app toe. ts bestand en daarin,

00:24.290 --> 00:28.620
laten we zeggen dat we een nieuwe variabele hebben, userInput,

00:28.620 --> 00:32.143
en deze is van het type onbekend.

00:32.143 --> 00:34.850
Het is niet van het type any, wat de standaard zou zijn, maar

00:34.850 --> 00:36.690
unknown, wat een ander type is dat door

00:36.690 --> 00:38.500
TypeScript is geÃ¯ntroduceerd.

00:38.500 --> 00:40.950
Het kan onbekend zijn omdat we nog niet weten wat de

00:40.950 --> 00:42.950
gebruiker uiteindelijk zal invoeren.

00:42.950 --> 00:45.593
Als het een nummer is, als het een string is, weten we het niet.

00:46.770 --> 00:48.960
Het interessante van het onbekende type

00:48.960 --> 00:51.020
is dat we er elke waarde in kunnen opslaan

00:51.020 --> 00:54.630
zonder fouten te krijgen, dus dit is allemaal toegestaan.

00:54.630 --> 00:57.660
Als ik nu mijn bestand hier compileer, zie je

00:57.660 --> 01:00.290
dat ik geen compilatiefout krijg.

01:00.290 --> 01:01.910
Tot zover is het dus hetzelfde als wanneer

01:01.910 --> 01:03.820
we hier geen type zouden hebben toegekend,

01:03.820 --> 01:05.260
en dus het any type hebben, of wanneer

01:05.260 --> 01:08.610
we expliciet any als type zouden hebben ingesteld.

01:08.610 --> 01:11.810
Maar toch, onbekend is anders dan anders.

01:11.810 --> 01:15.430
Dit hier werkt, maar we krijgen problemen als ik een

01:15.430 --> 01:19.660
andere variabele heb, laten we zeggen userName, die een string

01:19.660 --> 01:20.890
moet zijn.

01:20.890 --> 01:22.860
En dat is hier niet geÃ¯nitialiseerd,

01:22.860 --> 01:27.200
maar hier wil ik userName gelijk stellen aan userInput.

01:27.200 --> 01:29.150
Nu zie je dat we een fout krijgen.

01:29.150 --> 01:33.010
Het type onbekend is niet toewijsbaar aan het type string.

01:33.010 --> 01:34.590
Dus, userName wil een string

01:34.590 --> 01:37.990
en natuurlijk is onbekend niet gegarandeerd een string.

01:37.990 --> 01:41.620
Hier heb ik er een toegewezen, maar dat is alleen in deze lijn.

01:41.620 --> 01:44.460
userInput kan technisch gezien elke waarde

01:44.460 --> 01:46.490
hebben omdat het onbekend is.

01:46.490 --> 01:47.640
Nu, het interessante

01:47.640 --> 01:51.060
is dat als ik unknown overschakel naar any, deze fout verdwijnt

01:51.060 --> 01:53.900
omdat any het meest flexibele type is in TypeScript

01:53.900 --> 01:56.810
en het in feite alle typecontrole uitschakelt en TypeScript

01:56.810 --> 02:00.950
gewoon zegt: "Ik geef het op, doe maar wat je wilt. Onbekend is een beetje restrictiever dan ieder ander.

02:00.950 --> 02:05.510
Met onbekend moeten we eerst het type controleren dat momenteel

02:05.510 --> 02:08.820
is opgeslagen in userInput voordat we het kunnen

02:08.820 --> 02:12.200
toewijzen aan bijvoorbeeld een variabele die

02:12.200 --> 02:14.400
een string wil.

02:14.400 --> 02:16.180
Dus, omdat hier een string gewenst

02:16.180 --> 02:18.110
is, kunnen we controleren of het type

02:18.110 --> 02:23.110
van userInput gelijk is aan string en TypeScript zal deze controle detecteren en begrijpen

02:23.650 --> 02:26.020
dat hier, wat is opgeslagen in userName omdat

02:26.020 --> 02:29.790
het eindigt uit dit if statement, waar ik controleer of userInput van

02:29.790 --> 02:31.830
het type string is, userInput gegarandeerd

02:31.830 --> 02:34.680
een string is en daarom kan ik het veilig toewijzen aan

02:34.680 --> 02:36.920
userName.

02:36.920 --> 02:39.990
Dus, ik heb hier zo'n extra typecontrole nodig

02:39.990 --> 02:42.670
met unknown om een onbekende waarde

02:42.670 --> 02:47.560
te kunnen toewijzen aan een waarde met een vast type en daarom is unknown

02:47.560 --> 02:50.530
de betere keuze dan een willekeurige als

02:50.530 --> 02:54.780
je weet dat ik niet precies kan zeggen welk type er in zit, het

02:54.780 --> 02:56.930
kan een getal zijn, het kan een

02:56.930 --> 02:59.450
string zijn, maar ik weet wat ik er uiteindelijk

02:59.450 --> 03:02.910
mee wil doen.

03:02.910 --> 03:05.470
Wel, voeg gewoon een extra controle toe om er zeker

03:05.470 --> 03:07.440
van te zijn dat wat je wilt doen ook kan,

03:07.440 --> 03:10.240
zodat als je met een string wilt werken, je een string

03:10.240 --> 03:12.160
hebt, en je bent goed.

03:12.160 --> 03:14.690
En dan is onbekend beter dan elk ander,

03:14.690 --> 03:18.720
omdat het ervoor zorgt dat je niet alles mag doen, maar je hebt

03:18.720 --> 03:20.930
tenminste een soort controle.

03:20.930 --> 03:23.260
Natuurlijk, als je van tevoren weet dat

03:23.260 --> 03:25.990
userInput altijd een string is, of altijd een string

03:25.990 --> 03:28.150
of een getal, wel, dan moet je string of

03:28.150 --> 03:30.000
zo'n union-type gebruiken in plaats

03:30.000 --> 03:31.680
van unknown.

03:31.680 --> 03:34.460
Onbekend is dus nog steeds een type dat je niet altijd moet gebruiken,

03:34.460 --> 03:36.010
maar het is beter dan alle andere om

03:36.010 --> 03:37.460
de beschreven redenen.
