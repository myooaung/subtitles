WEBVTT

00:02.450 --> 00:05.030
Kursleiter: Lassen wir jetzt die Funktionsüberladungen

00:05.030 --> 00:09.010
beiseite, und lassen Sie mich eine andere, sehr nützliche Funktion vorstellen.

00:09.010 --> 00:13.350
Und das ist eine optionale Verkettung.

00:13.350 --> 00:16.720
Nehmen wir an, Sie haben eine Anwendung, bei der Sie

00:16.720 --> 00:21.603
Daten von einem Backend aus einer Datenbank oder aus einer anderen Quelle

00:21.603 --> 00:26.350
erhalten, bei der Sie nicht mit Sicherheit wissen, ob in einem Objekt eine

00:26.350 --> 00:29.500
bestimmte Eigenschaft definiert ist.

00:29.500 --> 00:33.920
Nehmen wir an, wir haben fetchedUserData und fetchedUserData könnte ein Objekt über

00:33.920 --> 00:36.380
einen Benutzer sein, den wir abgerufen haben.

00:36.380 --> 00:39.705
Dort könnten wir eine ID haben, wir könnten einen

00:39.705 --> 00:44.705
Namen Max haben und wir könnten auch eine andere Eigenschaft Job erwarten,

00:45.730 --> 00:50.550
die ein Objekt ist, das einen Titel hat und das dann auch eine Beschreibung

00:50.550 --> 00:53.950
hat, meine eigene Firma.

00:53.950 --> 00:56.900
Wenn wir nun solche Daten erhalten, können wir natürlich damit arbeiten.

00:56.900 --> 01:00.150
Sie können auch komplexere Dinge tun,

01:00.150 --> 01:03.940
aber nehmen wir einmal an, ich lade hier nur

01:03.940 --> 01:06.871
die Berufsbezeichnung hoch.

01:06.871 --> 01:09.940
Wenn wir das nun mit unserem Entwicklungsserver gespeichert

01:09.940 --> 01:12.880
haben und die Kompilierung im Überwachungsmodus läuft,

01:12.880 --> 01:14.420
erhalte ich hier CEO.

01:14.420 --> 01:17.395
Wenn wir diese jedoch von einem Backend

01:17.395 --> 01:22.395
abrufen, holen wir aus irgendeinem Grund vielleicht nicht

01:23.080 --> 01:27.690
alle Daten, die wir brauchen, oder einige Daten sind an

01:27.690 --> 01:30.490
diesem Punkt nicht gesetzt.

01:30.490 --> 01:34.730
In größeren, komplexeren Anwendungen arbeiten Sie sicherlich manchmal

01:34.730 --> 01:39.240
mit strukturierten, verschachtelten Daten, bei denen Sie nicht mit Sicherheit

01:39.240 --> 01:42.650
wissen, ob eine Eigenschaft eines Objekts gesetzt ist oder

01:42.650 --> 01:45.340
ob sie vielleicht undefiniert ist.

01:45.340 --> 01:49.680
Sagen wir mal, Job existiert hier nicht, aus welchem Grund auch immer, wir holen ihn

01:49.680 --> 01:53.180
nicht, hier bekomme ich natürlich einen Fehler, TypeScript beschwert

01:53.180 --> 01:55.930
sich jetzt darüber, weil es weiß, dass es jetzt keine

01:55.930 --> 01:57.843
Job-Eigenschaft gibt.

01:57.843 --> 02:01.347
Das Problem ist, dass es für diese Daten weiß, dass es nicht

02:01.347 --> 02:05.660
weiß, wenn wir Daten aus einer Datei holen, die nicht von TypeScript kontrolliert

02:05.660 --> 02:09.720
wird, oder wie ich gerade sagte, wenn wir sie vielleicht aus dem Backend

02:09.720 --> 02:12.530
holen und wir nicht mit Sicherheit wissen, welche

02:12.530 --> 02:15.550
Daten zurückgegeben werden.

02:15.550 --> 02:18.150
Wenn Sie nun nicht wissen, ob das definiert ist oder nicht,

02:18.150 --> 02:21.730
können wir in normalem JavaScript versuchen, auf job zuzugreifen, und wenn

02:21.730 --> 02:25.098
das funktioniert, fahren wir fort und greifen auf title zu.

02:25.098 --> 02:29.450
Dies ist die Art und Weise, wie JavaScript prüft, ob etwas existiert, bevor

02:29.450 --> 02:33.520
wir dann tiefer in dieses potenzielle Objekt eintauchen. Wenn es undefiniert

02:33.520 --> 02:37.110
ist, wird dieser Code nie ausgeführt und wir haben daher einen

02:37.110 --> 02:39.400
größeren Laufzeitfehler.

02:39.400 --> 02:42.410
Auch hier weiß TypeScript natürlich, dass der Job nicht

02:42.410 --> 02:45.180
existiert, aber wenn dieser aus einer Quelle geholt

02:45.180 --> 02:48.470
würde, in die TypeScript nicht hineinschauen kann, wie z. B.

02:48.470 --> 02:52.910
das Ergebnis einer HTTP-Anfrage, wäre dies der sichere Weg, um Laufzeitfehler

02:52.910 --> 02:54.920
in JavaScript zu vermeiden.

02:54.920 --> 02:58.110
Wenn dies der Fall ist, erhalten wir die gleiche Ausgabe wie zuvor.

02:58.110 --> 03:02.233
Wenn sie nicht vorhanden ist, erhalten wir zumindest keinen Laufzeitfehler.

03:02.233 --> 03:07.020
Mit TypeScript kann man das auf eine schönere Art und Weise tun.

03:07.020 --> 03:10.520
Sie haben den optionalen Verkettungsoperator.

03:10.520 --> 03:15.320
Sie können ein Fragezeichen hinter den Begriff setzen, wenn Sie nicht sicher sind, ob er

03:15.320 --> 03:16.880
definiert ist oder nicht.

03:16.880 --> 03:21.600
Zumindest wenn Sie TypeScript Version 3 verwenden. 7 oder höher.

03:21.600 --> 03:24.770
Hier mag meine IDE das nicht, aber das ist dann eine

03:24.770 --> 03:26.300
unterstützte Syntax.

03:26.300 --> 03:30.370
Dies teilt TypeScript mit, dass dies existiert, wenn es auf job zugreift und

03:30.370 --> 03:33.450
daher können wir hier das Fragezeichen hinzufügen und daher

03:33.450 --> 03:36.314
nur auf title zugreifen, wenn job definiert ist.

03:36.314 --> 03:39.300
Wenn wir das nun tun, erhalte ich immer noch einen Fehler, wenn ich

03:39.300 --> 03:42.490
versuche, es zu kompilieren, weil TypeScript immer noch mit Sicherheit

03:42.490 --> 03:44.510
weiß, dass der Job nicht existiert.

03:44.510 --> 03:47.370
Aber wenn es das nicht wüsste, oder wenn ich das auskommentiere,

03:47.370 --> 03:51.840
dann kompiliert es ganz gut und alles wird wie vorher ausgeführt.

03:51.840 --> 03:56.400
Dieser optionale Verkettungsoperator hilft uns also, sicher auf verschachtelte

03:56.400 --> 04:00.730
Eigenschaften und verschachtelte Objekte in unseren Objektdaten zuzugreifen,

04:00.730 --> 04:03.610
und wenn das Ding vor dem Fragezeichen undefiniert

04:03.610 --> 04:07.061
ist, wird es nicht auf das Ding danach zugreifen und daher keinen

04:07.061 --> 04:12.420
Laufzeitfehler auslösen, sondern einfach nicht fortfahren.

04:12.420 --> 04:15.210
Hinter den Kulissen wird dies also im Grunde zu einer if-Prüfung

04:15.210 --> 04:18.380
kompiliert, die prüft, ob die Datei existiert, bevor sie versucht, auf sie

04:18.380 --> 04:19.213
zuzugreifen.
