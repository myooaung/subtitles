WEBVTT

00:02.190 --> 00:04.860
-: Saya ingin memulai dengan fitur namespace.

00:04.860 --> 00:06.810
Sekarang untuk menunjukkan kepada Anda bagaimana

00:06.810 --> 00:09.980
cara kerjanya, saya akan mengambil dua antarmuka ini di sini.

00:09.980 --> 00:11.480
Antarmuka seret dan lepas,

00:11.480 --> 00:14.140
potong dari aplikasi. ts dan tambahkan file

00:14.140 --> 00:19.140
baru, dragdropinterfaces. misalnya.

00:21.270 --> 00:25.180
Sekarang kita bisa menempelkannya di sana dan sekarang untuk menggunakan namespace,

00:25.180 --> 00:29.140
yang harus kita lakukan adalah kita harus menambahkan kata kunci namespace dan

00:31.645 --> 00:33.620
kemudian kurung kurawal.

00:33.620 --> 00:35.880
Sekarang kita juga harus memberi nama namespace

00:35.880 --> 00:39.590
ini dan di sini saya akan menamainya DD Interfaces untuk drag and

00:39.590 --> 00:41.660
drop, nama terserah Anda.

00:41.660 --> 00:43.640
Sekarang, tahun ini adalah fitur TypeScript,

00:43.640 --> 00:45.250
bukan fitur JavaScript.

00:45.250 --> 00:47.750
Ini tidak dikompilasi ke Vanilla JavaScript

00:47.750 --> 00:50.340
karena tidak ada padanan langsung untuk itu.

00:50.340 --> 00:54.860
Sebaliknya TypeScript pada dasarnya akan mengkompilasinya menjadi sebuah objek yang bisa

00:54.860 --> 00:55.693
Anda katakan.

00:55.693 --> 00:57.490
Untuk sebuah objek di mana hal-hal

00:57.490 --> 01:00.440
yang akan Anda masukkan ke dalam namespace kemudian disimpan

01:00.440 --> 01:02.140
pada properti, tetapi Anda tidak

01:02.140 --> 01:06.960
perlu khawatir tentang hal itu karena semua penyelesaian akses ke properti ini dan bahwa

01:06.960 --> 01:10.640
semuanya bekerja akan diurus oleh TypeScript.

01:10.640 --> 01:13.940
Jadi sekarang kita bisa memindahkan interface ini ke dalam namespace

01:13.940 --> 01:16.130
dan dengan itu kita hampir selesai.

01:16.130 --> 01:18.040
Sekarang kita memiliki satu masalah,

01:18.040 --> 01:22.280
bagaimanapun juga, interface ini sekarang hanya tersedia di namespace ini.

01:22.280 --> 01:23.113
Ngomong-ngomong,

01:23.113 --> 01:25.530
Anda tidak hanya bisa meletakkan interface ke dalam

01:25.530 --> 01:27.070
namespace, Anda bisa meletakkan

01:27.070 --> 01:28.057
apa saja di sana, kelas,

01:28.057 --> 01:30.780
konstanta, apa pun yang Anda inginkan.

01:30.780 --> 01:33.900
Apa pun yang Anda inginkan bisa dimasukkan ke dalam namespace.

01:33.900 --> 01:35.630
Jadi pada dasarnya Anda dapat membungkus namespace

01:35.630 --> 01:37.150
di sekitar kode apa pun yang Anda miliki.

01:37.150 --> 01:39.830
Tetapi masalah yang kita hadapi adalah bahwa fitur-fitur

01:39.830 --> 01:41.140
ini, antarmuka-antarmuka

01:41.140 --> 01:44.800
di sini sekarang hanya tersedia di dalam namespace itu.

01:44.800 --> 01:47.280
Sekarang seperti yang Anda lihat, tidak ada yang lain di sana.

01:47.280 --> 01:49.010
Sekarang tentu saja kita bisa membawa

01:49.010 --> 01:51.600
kode yang bergantung pada mereka kembali ke namespace

01:51.600 --> 01:53.370
ini, tetapi sekali lagi kita akan meniup

01:53.370 --> 01:56.960
ini karena ternyata kita memiliki kelas yang cukup panjang yang bergantung

01:56.960 --> 01:58.940
pada antarmuka ini.

01:58.940 --> 02:02.900
Kita memiliki kelas daftar proyek dan kelas item proyek.

02:02.900 --> 02:05.260
Mereka bergantung pada antarmuka ini, jadi

02:05.260 --> 02:08.922
akan ada banyak yang harus kita tambahkan ke namespace itu.

02:08.922 --> 02:10.205
Oleh karena itu, apa yang

02:10.205 --> 02:14.210
dapat Anda lakukan adalah Anda dapat menambahkan kata kunci ekspor di depan antarmuka

02:14.210 --> 02:16.850
untuk mengekspor fitur dari namespace.

02:16.850 --> 02:19.680
Sekarang apa artinya ini adalah bahwa sekarang

02:19.680 --> 02:22.110
antarmuka ini tersedia di dalam namespace

02:22.110 --> 02:24.487
ini, tetapi juga di luar file ini.

02:24.487 --> 02:26.100
Dan kita akan melihat bagaimana ini

02:26.100 --> 02:28.510
bekerja sebentar lagi, tetapi dengan itu kita membuat

02:28.510 --> 02:30.710
antarmuka ini atau apa pun yang kita ekspor.

02:30.710 --> 02:32.815
Hal ini tidak terbatas pada interface

02:32.815 --> 02:36.610
yang tentu saja tersedia di luar file ini juga jika kita kemudian

02:36.610 --> 02:41.140
pada dasarnya mengimpor atau menggunakan namespace tersebut.

02:41.140 --> 02:41.973
Dan tentu saja sekali

02:41.973 --> 02:44.580
lagi Anda tidak bisa hanya mengekspor antarmuka dalam namespace

02:44.580 --> 02:45.636
tetapi apa pun.

02:45.636 --> 02:48.010
Sekarang dengan itu, pertanyaannya adalah, bagaimana

02:48.010 --> 02:50.310
kita mengimpor namespace ini sekarang kembali

02:50.310 --> 02:52.410
ke aplikasi. ts dan untuk itu, TypeScript

02:52.410 --> 02:56.210
memiliki sintaks khusus yang dapat Anda gunakan.

02:56.210 --> 02:57.867
Mari kita kembali ke bagian atas aplikasi. ts dan sekarang

02:57.867 --> 03:01.440
di sini Anda menambahkan tiga garis miring ke depan, yang penting

03:01.440 --> 03:03.690
tiga, bukan hanya dua karena ini sebenarnya

03:03.690 --> 03:06.150
bukan komentar normal yang kita buat sekarang

03:06.150 --> 03:07.330
ini sebenarnya akan menjadi

03:07.330 --> 03:10.280
sintaksis yang diambil oleh TypeScript komentar khusus,

03:10.280 --> 03:13.110
bisa dibilang TypeScript mengerti jika dimulai dengan

03:13.110 --> 03:15.500
tiga garis miring.

03:15.500 --> 03:19.301
Di sana Anda menulis tag XML yang menutup sendiri,

03:19.301 --> 03:21.600
jadi buka kurung sudut, lalu braket

03:21.600 --> 03:24.530
sudut penutup garis miring ke depan dan

03:24.530 --> 03:25.790
di jalur referensinya

03:25.790 --> 03:29.220
sama dengan dan kemudian di sini nama file yang

03:29.220 --> 03:32.370
ingin Anda impor.

03:32.370 --> 03:35.217
Dalam kasus saya di sini dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Sekarang, ini dipahami dan diambil oleh TypeScript karena seperti

03:42.550 --> 03:45.220
yang saya sebutkan dengan tiga garis miring awal, ini

03:45.220 --> 03:47.560
adalah sintaks khusus yang dipahami TypeScript

03:47.560 --> 03:50.110
seperti halnya memahami hal referensi ini.

03:50.110 --> 03:51.960
Ini bukan Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript tidak memperhatikan

03:53.970 --> 03:58.480
dan ini tidak akan terlihat seperti apa setelah dikompilasi.

03:58.480 --> 04:00.430
Sekarang, apa yang dicapai?

04:00.430 --> 04:05.070
Ini mencapai bahwa sekarang namespace DD Interfaces ini tersedia

04:05.070 --> 04:07.104
di aplikasi. ts.

04:07.104 --> 04:08.920
Namun, jika Anda menggulir ke bawah, Anda melihat

04:08.920 --> 04:11.040
editor saya masih mengeluh dan jika kami mencoba menyimpannya

04:11.040 --> 04:12.250
seperti yang kita semua lakukan

04:12.250 --> 04:14.300
kesalahan kompilasi yang baik.

04:14.300 --> 04:16.410
Jadi, tampaknya tidak tersedia.

04:16.410 --> 04:19.730
Antarmuka yang bisa diseret tampaknya tidak tersedia di sini.

04:19.730 --> 04:22.386
Nah, ada hal khusus tentang namespaces.

04:22.386 --> 04:25.840
Anda dapat menggunakannya untuk membagi kode Anda dan ingat ketika

04:25.840 --> 04:27.930
saya mengatakan sebelumnya bahwa apa

04:27.930 --> 04:29.610
yang Anda miliki di namespace dapat

04:29.610 --> 04:32.557
digunakan dari mana saja di namespace itu.

04:32.557 --> 04:34.157
Nah, ternyata Anda dapat membagi

04:34.157 --> 04:37.580
ruang nama di beberapa file dengan mengekspor hal-hal dalam

04:37.580 --> 04:39.110
ruang nama dan kemudian menggunakan

04:39.110 --> 04:42.330
sintaks impor khusus ini, tetapi Anda kemudian harus

04:42.330 --> 04:45.230
meletakkan hal-hal yang ingin menggunakan sesuatu

04:45.230 --> 04:48.250
dari ruang nama impor atau dari file yang diimpor ke

04:48.250 --> 04:51.797
dalam ruang nama yang sama.

04:51.797 --> 04:55.050
Oleh karena itu, mungkin DD Interfaces bukan nama terbaik.

04:55.050 --> 04:58.010
Mungkin kita hanya menamakannya sebagai App.

04:58.010 --> 04:59.740
Sekarang, jika kita menamai sebagai app di sini,

04:59.740 --> 05:01.670
kita bisa pergi ke app. ts dan membuat

05:01.670 --> 05:04.180
namespace dengan nama yang sama di sini,

05:04.180 --> 05:05.630
namespace App.

05:05.630 --> 05:06.890
Dan sekarang untuk saat ini,

05:06.890 --> 05:10.750
mari kita letakkan semuanya di sini ke dalam namespace itu dan sekarang Anda lihat

05:10.750 --> 05:12.610
kesalahannya hilang Tidak ada titik

05:12.610 --> 05:14.300
merah di sebelah kanan.

05:14.300 --> 05:15.513
Namun, jika saya menyimpannya,

05:15.513 --> 05:17.850
saya masih akan mendapatkan kesalahan di sini.

05:17.850 --> 05:22.850
Misalnya, daftar proyek yang sudah selesai tidak digunakan.

05:25.010 --> 05:26.300
Nah, itu benar, saya

05:26.300 --> 05:28.210
tidak menggunakan itu.

05:28.210 --> 05:29.600
Saya juga tidak memerlukannya,

05:29.600 --> 05:32.610
jadi kita bisa menghapus konsep-konsep ini di sini.

05:32.610 --> 05:35.190
Dengan itu, jika kita menyimpan ini, sekarang

05:35.190 --> 05:38.040
sudah terkompilasi tanpa kesalahan.

05:38.040 --> 05:39.880
Pertanyaannya adalah apa

05:39.880 --> 05:41.920
hasil dari kompilasi ini?

05:41.920 --> 05:44.260
Apakah kita memiliki satu atau dua file sekarang?

05:44.260 --> 05:46.170
Nah, mari kita lihat folder disk

05:46.170 --> 05:49.380
dan di sana Anda melihat Anda memiliki file App JS dan

05:49.380 --> 05:50.780
kemudian beberapa kode

05:50.780 --> 05:53.980
di sini dan file JS antarmuka seret dan lepas.

05:53.980 --> 05:56.690
Jadi, kita punya dua file sebagai hasilnya.

05:56.690 --> 05:59.500
Sekarang file antarmuka dragon drop sebenarnya cukup kosong

05:59.500 --> 06:00.830
karena Anda telah mempelajari

06:00.830 --> 06:04.360
bahwa antarmuka pada dasarnya tidak dikompilasi ke apa pun.

06:04.360 --> 06:07.300
Tidak ada padanan JavaScript untuk antarmuka.

06:07.300 --> 06:09.270
Ini adalah fitur TypeScript murni.

06:09.270 --> 06:12.370
Jadi kita dapat mengimpornya dengan sintaks TypeScript di sini untuk

06:12.370 --> 06:15.509
menggunakannya dan mendapatkan semua peningkatan tipe yang kita

06:15.509 --> 06:17.300
pelajari tetapi dalam produksi tidak

06:17.300 --> 06:20.060
masalah apakah itu dalam file terpisah atau tidak.

06:20.060 --> 06:21.840
Jadi tentu saja, pertanyaannya

06:21.840 --> 06:26.380
adalah bagaimana jika kita sekarang menempatkan sesuatu yang memang ada dalam produksi,

06:26.380 --> 06:28.630
yang juga ada dalam JavaScript ke dalam file

06:28.630 --> 06:30.000
terpisah.

06:30.000 --> 06:33.373
Misalnya, apakah enum dan kelas proyek di sini,

06:35.520 --> 06:36.470
saya akan mengambil

06:36.470 --> 06:37.610
keduanya, membuat

06:37.610 --> 06:41.410
file baru, model dasbor proyek TS dan meletakkan enum

06:41.410 --> 06:46.040
status proyek dan kelas proyek saya di sana.

06:46.040 --> 06:47.420
Sekarang seperti sebelumnya

06:47.420 --> 06:49.070
kita bisa menambahkan namespace

06:49.070 --> 06:50.590
di sini, namanya harus App, jadi

06:50.590 --> 06:51.790
harus dilakukan namespace

06:51.790 --> 06:54.020
di mana kita kemudian juga ingin menggunakannya

06:54.020 --> 06:57.340
dan kita harus mengekspor fitur-fitur ini di sana, sehingga kita

06:57.340 --> 07:00.440
dapat menggunakannya di file lain di namespace yang sama, tetapi

07:00.440 --> 07:02.640
file lain juga.

07:02.640 --> 07:03.980
Sekarang kembali ke aplikasi. ts, kita harus

07:03.980 --> 07:05.900
mengimpor file kedua itu.

07:05.900 --> 07:07.890
Jadi saya akan menduplikasi

07:07.890 --> 07:11.515
impor ini dan semua model dasbor proyek impor ts.

07:11.515 --> 07:13.800
jika saya menyimpannya dan sekarang dikompilasi

07:13.800 --> 07:16.610
dan kita melihat file JavaScript model proyek.

07:16.610 --> 07:18.184
Dan di sana, kita melihat

07:18.184 --> 07:19.490
beberapa kode.

07:19.490 --> 07:22.770
Pertanyaannya adalah apakah aplikasi kita sekarang berfungsi?

07:22.770 --> 07:24.620
Untuk itu, mari kita muat ulang dan mari

07:25.480 --> 07:27.587
kita coba menambahkan proyek di sini dan Anda

07:27.587 --> 07:29.903
lihat, kita mendapatkan kesalahan.

07:29.903 --> 07:33.183
Tidak dapat membaca properti aktif dari undefined.

07:34.120 --> 07:36.090
Alasannya adalah karena file

07:36.090 --> 07:38.854
kami dikompilasi secara mandiri.

07:38.854 --> 07:41.410
Namespaces ada di dunia TypeScript seperti yang

07:41.410 --> 07:44.640
saya katakan, tidak ada padanan JavaScript untuk itu.

07:44.640 --> 07:47.430
Jadi masalah yang kita hadapi di sini adalah bahwa di dunia TypeScript,

07:47.430 --> 07:48.263
semuanya bagus karena

07:48.263 --> 07:51.610
TypeScript mampu menemukan semua hal yang kita butuhkan.

07:51.610 --> 07:52.800
Misalnya, ketika saya

07:52.800 --> 07:54.420
mengatakan proyek di sini, ketika

07:54.420 --> 07:56.310
saya mereferensikan jenis proyek

07:56.310 --> 07:58.130
di sini pada kelas status proyek,

07:58.130 --> 07:59.310
jenis proyek ini, kelas

07:59.310 --> 08:00.610
proyek ini didefinisikan

08:00.610 --> 08:02.840
dalam model proyek.

08:02.840 --> 08:06.020
Sekarang TypeScript tidak mengeluhkan ketidaklengkapan

08:06.020 --> 08:07.570
Anda karena kami mengimpor model

08:07.570 --> 08:10.250
itu, tetapi impor di sini benar-benar hanya berarti

08:10.250 --> 08:13.960
kami memberi tahu TypeScript di mana menemukan jenis itu setelah dikompilasi

08:13.960 --> 08:15.810
ke JavaScript, pemutusan pada dasarnya

08:15.810 --> 08:18.150
dihancurkan.

08:18.150 --> 08:20.840
Jadi dalam kode JavaScript ketika dijalankan dan

08:20.840 --> 08:23.230
ketika kita kemudian mencoba membuat proyek

08:23.230 --> 08:25.130
baru dengan menginstansiasi proyek,

08:25.130 --> 08:27.430
JavaScript tidak menemukan kelas proyek

08:27.430 --> 08:29.610
atau fungsi konstruktor ini.

08:29.610 --> 08:32.980
Jadi, kita harus memastikan bahwa kita membawa pemutusan hubungan.

08:32.980 --> 08:35.420
Dan untuk itu kita bisa pergi ke TS

08:35.420 --> 08:39.640
(bergumam) dan di sana mengatur opsi file keluar ini.

08:39.640 --> 08:40.740
Kita dapat mengomentari

08:40.740 --> 08:43.010
ini dan ide di balik file out adalah bahwa

08:43.010 --> 08:45.540
Anda memberi tahu TypeScript bahwa ia harus

08:45.540 --> 08:48.620
menggabungkan namespaces.

08:48.620 --> 08:49.670
Jadi referensi ini,

08:49.670 --> 08:51.740
yang dimilikinya selama kompilasi menjadi

08:51.740 --> 08:53.950
satu file JavaScript tunggal alih-alih

08:53.950 --> 08:56.970
mengkompilasi beberapa file JavaScript.

08:56.970 --> 08:59.210
Jadi di sini untuk file keluar kita dapat mengatakan

08:59.210 --> 09:02.350
bahwa kita ingin memiliki file di folder disk, yang kita beri nama

09:02.350 --> 09:04.770
mungkin bundel. js Dan jika kita melakukan itu

09:05.630 --> 09:07.050
dan menyimpannya, kita sebenarnya

09:07.050 --> 09:08.700
akan mendapatkan kesalahan di sini.

09:09.650 --> 09:10.710
Kita akan mendapatkan

09:12.300 --> 09:14.410
kesalahan bahwa hanya AMD dan modul

09:14.410 --> 09:17.250
sistem yang didukung bersama file out.

09:17.250 --> 09:19.540
Sekarang, kita tidak perlu memahami semuanya di

09:19.540 --> 09:23.160
sini Pada dasarnya ada berbagai cara untuk memuat atau menggabungkan file JavaScript

09:23.160 --> 09:26.120
yang berbeda menjadi satu untuk alasan historis dan bagaimana

09:26.120 --> 09:28.770
semuanya dikembangkan dan Anda dapat mempelajari lebih

09:28.770 --> 09:31.250
lanjut tentang jenis gabungan yang berbeda ini dalam

09:31.250 --> 09:33.700
sumber daya terlampir jika Anda mau, Anda tidak perlu

09:33.700 --> 09:35.340
melakukannya.

09:35.340 --> 09:36.800
Jadi pada dasarnya apa yang perlu

09:36.800 --> 09:38.120
kita lakukan di sini adalah

09:38.120 --> 09:40.470
kita perlu mengatur modul yang sudah disorot sebagai

09:40.470 --> 09:41.598
kesalahan di sini, bukan

09:41.598 --> 09:43.943
ke JS umum, tetapi ke AMD misalnya.

09:45.400 --> 09:47.700
Jika kita melakukan itu, itu mengkompilasi tanpa

09:47.700 --> 09:50.010
masalah meskipun masih mengeluh di sini, tetapi

09:50.010 --> 09:52.140
itu tidak menangkap bahwa saya mengubahnya

09:52.140 --> 09:53.860
dan sekarang yang terjadi sebenarnya

09:53.860 --> 09:56.570
adalah bahwa ada file JS bundel baru di dist.

09:56.570 --> 10:00.310
Jika saya menghapus semua file JavaScript di folder disk dan

10:00.310 --> 10:04.680
saya memulai ulang dasbor TSC saya, kami memprosesnya sehingga kompiler

10:04.680 --> 10:05.580
Anda hanya akan

10:05.580 --> 10:08.600
melihat bahwa file bundel JS dihasilkan.

10:08.600 --> 10:11.530
File ini akan menyimpan semua kode kita dalam versi

10:11.530 --> 10:13.250
yang telah dikompilasi dan diterjemahkan

10:13.250 --> 10:15.400
dan oleh karena itu sekarang dalam indeks

10:15.400 --> 10:20.300
HTML, kita hanya perlu mengimpor bundel JS di sini, bukan App JS.

10:20.300 --> 10:23.610
Dan jika kita melakukannya dan kita memuat ulang di sini, kita memiliki

10:23.610 --> 10:25.830
aplikasi yang berfungsi lagi di mana kita dapat

10:25.830 --> 10:28.260
menggunakan seret dan lepas semuanya karena sekarang

10:28.260 --> 10:30.410
semuanya ada dalam satu file, tetapi hanya

10:30.410 --> 10:32.661
pada hasil akhirnya.

10:32.661 --> 10:34.230
Selama pengembangan, kita

10:34.230 --> 10:36.260
memiliki namespaces di sini, yang

10:36.260 --> 10:39.030
merupakan satu langkah ke arah yang benar karena

10:39.030 --> 10:41.970
sudah sedikit lebih mudah dikelola.

10:41.970 --> 10:44.350
Sekarang mari kita pisahkan ini menjadi lebih

10:44.350 --> 10:47.250
banyak file sebelum kita melihat opsi pemisahan rata-rata

10:47.250 --> 10:48.283
modul TS.
