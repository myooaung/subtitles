WEBVTT

00:02.370 --> 00:05.290
Narrateur : Donc, maintenant que nous sommes en mesure de récupérer

00:05.290 --> 00:08.630
l'entrée de l'utilisateur et tous les validés avec l'aide de notre TypeScript,

00:08.630 --> 00:11.420
la logique de validation conduit ici.

00:11.420 --> 00:13.810
Passons à autre chose et assurons-nous que nous faisons

00:13.810 --> 00:17.400
plus avec cette entrée utilisateur recueillie que de simplement l'afficher

00:17.400 --> 00:18.420
dans la console.

00:18.420 --> 00:19.450
Parce que pour l'instant,

00:19.450 --> 00:21.330
il y a bien sûr ce que nous faisons, d'accord.

00:21.330 --> 00:24.670
En fin de compte, je ne fais qu'imprimer les informations que nous

00:24.670 --> 00:26.030
avons recueillies pour faire

00:26.030 --> 00:30.300
la console, et ce n'est pas notre objectif final dans cette application.

00:30.300 --> 00:34.290
Au lieu de cela, l'objectif est, devrait être que nous rendions

00:34.290 --> 00:37.770
également cette liste de projets ici basée sur ce modèle,

00:37.770 --> 00:41.550
où chaque élément de projet est basé sur ce modèle ici.

00:41.550 --> 00:45.750
Et on sort les informations qu'on a recueillies ici.

00:45.750 --> 00:48.520
Donc, ce sera la prochaine chose sur laquelle je veux travailler.

00:48.520 --> 00:52.970
En plus d'avoir notre clause d'entrée de projet ici, qui est responsable

00:52.970 --> 00:55.440
du rendu du forum et de la collecte des données

00:55.440 --> 00:57.350
de l'utilisateur, je veux avoir

00:57.350 --> 00:59.410
la clause de numéro de qui est responsable

00:59.410 --> 01:03.230
du rendu d'une liste de projets.

01:03.230 --> 01:06.100
Et en fait, nous allons diviser cela en deux clauses.

01:06.100 --> 01:07.650
Une clause pour la liste

01:07.650 --> 01:11.000
et une classe par élément de projet dans la liste.

01:11.000 --> 01:14.970
Nous devons ensuite trouver un moyen de transmettre les données

01:14.970 --> 01:18.500
recueillies ici à notre liste de projets et d'y ajouter

01:18.500 --> 01:20.650
un nouvel élément.

01:20.650 --> 01:23.420
Alors, abordons cette question étape par étape, je dirais,

01:23.420 --> 01:26.880
et commençons par ajouter une classe de liste de projets.

01:26.880 --> 01:29.380
Maintenant, à l'endroit exact où vous avez ajouté, c'est vous qui décidez.

01:29.380 --> 01:32.900
L'ordre n'a pas d'importance car, à la fin, le script Java

01:32.900 --> 01:36.430
analysera entièrement ce fichier avant de l'exécuter.

01:36.430 --> 01:38.860
Ainsi, il sera au courant de toutes les classes.

01:38.860 --> 01:41.990
Je vais tout de même l'ajouter ici, au-dessus de la clause d'entrée du projet,

01:41.990 --> 01:45.740
car je m'appuierais sur la clause de liste de projets, que je suis sur le point de construire

01:45.740 --> 01:48.810
à l'intérieur de la classe d'entrée du projet, mais encore une fois, c'est

01:48.810 --> 01:50.500
vraiment important.

01:50.500 --> 01:55.500
Donc, ici je vais avoir ma clause de liste de projet, liste de projet, et l'idée

01:55.600 --> 01:59.230
de cette clause ici est un peu liée à ce que nous avons fait

01:59.230 --> 02:01.170
dans une entrée de projet.

02:01.170 --> 02:04.300
Je veux atteindre mon modèle ici et le rendre à un

02:04.300 --> 02:06.930
certain endroit de l'application.

02:06.930 --> 02:09.480
Et donc, ce que nous pouvons faire ici est d'ajouter

02:09.480 --> 02:13.120
un constructeur, nous pouvons ajouter les champs dont nous avons

02:13.120 --> 02:15.310
besoin et il y aura besoin de l'élément

02:15.310 --> 02:17.030
template et de l'élément host

02:17.030 --> 02:22.030
à la fin, donc, nous pouvons ajouter les deux ici à notre liste de projets.

02:22.440 --> 02:25.190
Nous aurons également besoin de l'élément

02:25.190 --> 02:29.640
lui-même, je dirais donc l'élément concret, qui est rendu.

02:29.640 --> 02:31.800
Et les types seront différents.

02:31.800 --> 02:34.580
L'élément hôte sera toujours un div parce

02:34.580 --> 02:38.330
que je veux rendre la liste dans ce div ici aussi.

02:38.330 --> 02:40.970
Mais l'élément concret, que nous rendons.

02:40.970 --> 02:43.960
Bien sûr, ce n'est pas un élément de formulaire, mais si nous

02:43.960 --> 02:46.180
regardons notre modèle de liste ici, nous voyons

02:46.180 --> 02:48.520
qu'il y a une section à l'intérieur.

02:48.520 --> 02:51.010
Nous avons donc un élément de section.

02:51.010 --> 02:54.420
Maintenant, il s'avère qu'il n'y a pas d'élément et ces éléments de section,

02:54.420 --> 02:57.040
donc nous aurons juste un élément HTML ordinaire parce

02:57.040 --> 03:00.490
que chaque élément a ce type ici pour une certaine taxe.

03:00.490 --> 03:03.060
Il existe des types plus spécialisés si c'est le cas,

03:03.060 --> 03:05.710
et nous pouvons simplement utiliser le type HTML.

03:05.710 --> 03:10.710
Donc, maintenant, bien sûr, nous devons avoir accès à ces éléments.

03:10.970 --> 03:15.600
Donc, nous pouvons copier ce code ici en fait du constructeur

03:15.600 --> 03:20.250
de l'entrée du projet ajouté au constructeur de la liste des

03:20.250 --> 03:22.260
projets et maintenant ajuster

03:22.260 --> 03:24.730
certaines choses.

03:24.730 --> 03:27.630
Par exemple, mon élément de modèle n'a bien sûr aucune

03:27.630 --> 03:29.420
idée de l'apport du projet.

03:29.420 --> 03:32.150
C'est plutôt la liste des projets maintenant.

03:32.150 --> 03:36.660
Donc, copions cela et utilisons ceci pour sélectionner l'élément.

03:36.660 --> 03:39.760
Je continuerai à le payer, et je sais toujours avec certitude

03:39.760 --> 03:42.710
que je l'obtiendrai, donc cela ne change rien.

03:42.710 --> 03:45.520
Les éléments de l'hôte est toujours à la mort avec l'application ID.

03:45.520 --> 03:47.820
Cela ne change donc pas.

03:47.820 --> 03:52.070
Ensuite j'importe mon contenu et ensuite je, enfin, le magasin,

03:52.070 --> 03:53.530
le premier élément.

03:53.530 --> 03:55.380
Hors de l'importation, le modèle.

03:55.380 --> 03:57.780
Donc, fondamentalement, le premier élément du modèle,

03:57.780 --> 04:01.590
qui est la section, je l'ai stocké dans la propriété de l'élément ici.

04:01.590 --> 04:04.430
Cependant, il ne s'agit pas d'un élément de formulaire HTML.

04:04.430 --> 04:07.210
C'est juste un élément HTML ici.

04:07.210 --> 04:11.710
Maintenant, nous pouvons également attribuer un ID ici et en fait, il devrait

04:11.710 --> 04:15.380
être dynamique, pas codé en dur parce que nous aurons plus d'une

04:15.380 --> 04:16.970
liste de projets.

04:16.970 --> 04:21.220
Je veux avoir des listes d'outils dans l'application finale, une pour

04:21.220 --> 04:25.060
l'acte de projets et une pour l'acte de projets, et ils offrent,

04:25.060 --> 04:28.420
je veux obtenir des informations supplémentaires au

04:28.420 --> 04:29.895
constructeur.

04:29.895 --> 04:35.703
Le type du projet, et je vais utiliser les statistiques, raccourci TypeScript.

04:35.703 --> 04:39.250
Vous apprenez où vous pouvez ajouter un accesseur devant

04:39.250 --> 04:44.170
le paramètre, private ou public, pour créer automatiquement une propriété

04:44.170 --> 04:48.060
du même nom et stocker la valeur qui est passée sur cet argument

04:48.060 --> 04:51.730
dans cette propriété de même nom.

04:51.730 --> 04:55.040
Donc maintenant cette classe aura un nom de propriété à taper également.

04:55.040 --> 04:57.910
Et maintenant la question est, quel est le type de ce paramètre

04:57.910 --> 04:58.790
de type ?

04:58.790 --> 05:03.640
Et cela devrait en fait être un type littéral et un type d'union.

05:03.640 --> 05:07.270
C'est soit actif, soit terminé.

05:07.270 --> 05:11.050
Nous avons même des projets en cours ou des projets terminés.

05:11.050 --> 05:14.270
C'est donc un argument que je m'attends à recevoir lorsque la

05:14.270 --> 05:16.080
liste de projets est instanciée.

05:16.080 --> 05:20.440
Et avec papa, nous devons taper la propriété D ID devrait alors

05:20.440 --> 05:21.870
être basé sur cela.

05:21.870 --> 05:25.090
Il devrait l'être, et pour papa, j'utilise un modèle littéral ici.

05:25.090 --> 05:30.090
Il devrait s'agir du type de projets de tableau de bord, donc soit des projets de tableau de bord actifs,

05:31.240 --> 05:33.640
soit des projets de tableau de bord terminés.

05:33.640 --> 05:35.070
C'est mon idée.

05:35.070 --> 05:37.540
Vous pouvez toujours utiliser ce type de point pour que

05:37.540 --> 05:40.380
TypeScript comprenne que nous utilisons cette propriété et qu'elle

05:40.380 --> 05:41.890
n'est pas inutilisée.

05:41.890 --> 05:46.200
Ainsi, nous avons accès à tous les éléments de base et nous ajoutons

05:46.200 --> 05:49.660
un ID à la section, que nous obtenons à partir de notre

05:49.660 --> 05:50.790
modèle.

05:50.790 --> 05:53.650
Maintenant, bien sûr, nous voulons un, nous voulons le rendre correct ?

05:53.650 --> 05:58.600
C'est l'idée de tout cela, encore une fois, à une méthode privée.

05:58.600 --> 06:00.540
Attachez la justice.

06:00.540 --> 06:05.310
Nous l'avions dans l'entrée du projet et là, c'est maintenant la file d'attente

06:05.310 --> 06:06.310
des objectifs.

06:06.310 --> 06:11.300
Et bien, attachez ça au Dom pour rendre la liste de

06:11.300 --> 06:12.750
papa au Dom.

06:12.750 --> 06:16.610
Donc, au lieu de joindre, je vais en fait faire la même chose que j'ai

06:16.610 --> 06:19.223
fait pour joindre le formulaire de projet.

06:20.070 --> 06:24.230
Donc nous pouvons copier cette ligne ici et l'attitude attacher.

06:24.230 --> 06:27.040
J'ai mon élément hôte et je veux insérer un

06:27.040 --> 06:28.420
élément adjacent.

06:28.420 --> 06:30.240
Après le début, et ce devrait être l'élément.

06:30.240 --> 06:33.300
On extrait ça du modèle ici.

06:33.300 --> 06:36.990
Cependant, je ne veux pas le faire après le début, mais

06:36.990 --> 06:41.960
plutôt avant la fin, c'est-à-dire avant la fermeture, en attachant l'élément

06:41.960 --> 06:45.870
hôte et ensuite nous pouvons appeler attacher ici dans

06:45.870 --> 06:49.940
le constructeur, bien sûr, pour attacher notre élément créé

06:49.940 --> 06:51.763
ici au Dom.

06:53.880 --> 06:56.370
Il y a maintenant une différence importante

06:56.370 --> 06:59.630
par rapport à l'entrée du projet pour cette liste.

06:59.630 --> 07:03.220
Il ne s'agit pas simplement d'ajouter la liste au Dom.

07:03.220 --> 07:05.270
L'entrée était terminée, non ?

07:05.270 --> 07:07.130
La forme ici était terminée.

07:07.130 --> 07:08.720
Nous avions toutes les données nécessaires.

07:08.720 --> 07:12.420
Tout ce que nous avions à faire était de mettre en place un écouteur d'événements.

07:12.420 --> 07:15.840
Maintenant pour la liste ici, nous ne l'avons pas eu avec

07:15.840 --> 07:16.673
un vide.

07:16.673 --> 07:21.130
H à tech, par exemple, et je veux y ajouter des textes.

07:21.130 --> 07:22.990
Je vais donc ajouter un numéro.

07:22.990 --> 07:26.020
Nouvelle méthode à votre méthode privée.

07:26.020 --> 07:29.120
Rendu ou contenu pourrait être un nom approprié.

07:29.120 --> 07:34.120
Et mon idée ici est de remplir les espaces vides de ce modèle

07:34.230 --> 07:36.862
avec une année de vie.

07:36.862 --> 07:37.780
Pour ça.

07:37.780 --> 07:40.040
Passons à la méthode de rendu du contenu mort, et il y a plusieurs

07:40.040 --> 07:41.580
choses que je veux faire.

07:41.580 --> 07:45.390
Une chose est stat pour la liste morte non ordonnée, qui fait partie

07:45.390 --> 07:47.200
de ma liste de projets ici.

07:47.200 --> 07:48.640
Je veux y ajouter un identifiant.

07:48.640 --> 07:50.860
Bien sûr, vous n'êtes pas obligé de le faire, mais je veux le faire

07:50.860 --> 07:53.500
de sorte que si nous avons besoin de le sélectionner plus tard, nous pouvons

07:53.500 --> 07:54.390
le faire avec ceux-ci.

07:54.390 --> 07:58.220
Je vais donc créer une liste d'ID qui est stockée dans une constante,

07:58.220 --> 08:00.190
et ce sera un modèle littéral, donc

08:00.190 --> 08:04.100
une chaîne de caractères dans laquelle nous pouvons injecter du contenu

08:04.100 --> 08:09.100
dynamique, et je veux la baser sur le type de la liste de projets qui l'entoure, donc sur

08:09.370 --> 08:14.370
la section qui l'entoure, et ajouter la liste de projets par la suite.

08:15.220 --> 08:19.700
Maintenant nous pouvons atteindre la liste des commandes, que nous obtenons dans notre

08:19.700 --> 08:22.890
élément, qui est la section stat année, l'élément de droite est

08:22.890 --> 08:23.820
la section morte.

08:23.820 --> 08:27.360
Ainsi, pour obtenir la liste non ordonnée à l'intérieur, nous pouvons,

08:27.360 --> 08:30.940
par exemple, utiliser un sélecteur de requête et rechercher la première,

08:30.940 --> 08:33.120
et dans ce cas la seule liste non ordonnée.

08:33.120 --> 08:35.720
Nous savons que nous en obtiendrons un parce que nous savons qu'il y en aura un

08:35.720 --> 08:38.280
et ensuite nous pouvons ajouter un ID ici, qui devrait être l'ID de la liste.

08:38.280 --> 08:40.280
C'est une chose que je veux faire.

08:40.280 --> 08:44.970
Je veux également définir le contenu du texte de cet âge à la balise ici

08:44.970 --> 08:49.360
et pour cela nous pouvons atteindre cet élément, le sélecteur de

08:49.360 --> 08:50.200
requête.

08:50.200 --> 08:53.020
Trouvez la première et unique balise HQ.

08:53.020 --> 08:56.340
Nous savons que nous en trouverons un, d'où le point

08:56.340 --> 09:01.340
d'exclamation pour exclure les cas nuls et définir le contenu du texte égal

09:02.940 --> 09:05.610
à ceci pour le mettre en majuscules.

09:05.610 --> 09:08.130
N'oubliez pas que le type est toujours actif.

09:08.130 --> 09:10.060
Nous avons terminé avec deux cas d'opéra.

09:10.060 --> 09:15.060
Nous le convertissons en majuscules et en projets, tout comme le fait un Sten.

09:16.200 --> 09:19.853
Le simple fait d'avancer est une section.

09:21.970 --> 09:25.220
Et maintenant avec ça, nous avons, nous avons généralement fini.

09:25.220 --> 09:27.580
Nous n'avons pas encore d'éléments dans cette liste.

09:27.580 --> 09:30.230
Nous travaillerons sur ce point plus tard, mais nous avons généralement terminé.

09:30.230 --> 09:35.120
Nous pouvons appeler ce rendu un contenu ou après l'avoir attaché

09:35.120 --> 09:37.210
au Dom, par exemple.

09:37.210 --> 09:39.210
Maintenant, ce serait bien de les voir en action.

09:39.210 --> 09:42.600
Bien sûr, une fois de plus, les éléments de la liste se terminent manquent,

09:42.600 --> 09:45.523
mais il serait agréable de voir quelque chose en action ici.

09:46.690 --> 09:49.620
Eh bien pour cela, allons au bas du fichier où nous

09:49.620 --> 09:53.310
instancions l'entrée du projet et là nous ne pouvons pas toujours

09:53.310 --> 09:55.200
instancier nos listes.

09:55.200 --> 09:59.200
Nous avons la liste de projet active, que nous instancions, mais en appelant

09:59.200 --> 10:01.230
la nouvelle liste de projet.

10:01.230 --> 10:04.220
Et là, nous devons passer dans cet argument de type, qui

10:04.220 --> 10:06.040
est soit actif ou terminé ici.

10:06.040 --> 10:08.610
Puisque je rends la liste active, je passe

10:08.610 --> 10:09.950
bien sûr inactif.

10:09.950 --> 10:13.140
Et puis ici, nous avons la liste des projets terminés

10:13.140 --> 10:15.290
où, bien sûr, je passe terminé.

10:15.290 --> 10:18.673
Si nous sommes maintenant sûrs qu'il devrait compiler sans erreurs.

10:19.520 --> 10:23.090
Et donc ce que vous devriez voir si vous revenez en arrière,

10:23.090 --> 10:27.770
ce sont ces deux sections vides ici avec les titres ici et bien, l'espace vide

10:27.770 --> 10:32.460
où les éléments ultérieurs seront ajoutés, les éléments du projet seront

10:32.460 --> 10:33.390
ajoutés.

10:33.390 --> 10:37.440
Pour l'instant, nous n'avons pas de tels éléments de projet, la neige.

10:37.440 --> 10:39.710
La prochaine étape consistera

10:39.710 --> 10:43.660
donc à trouver un moyen de s'assurer que lorsque nous

10:43.660 --> 10:48.410
cliquons sur ajouter un projet, nous créons un nouveau projet dans

10:48.410 --> 10:49.420
le code.

10:49.420 --> 10:53.730
Donc une nouvelle structure de données qui représente un projet,

10:53.730 --> 10:58.047
et que nous passons ensuite cette information sur ce nouveau projet

10:58.047 --> 10:59.870
à l'acte des projets.

10:59.870 --> 11:03.850
Liste ici à cette section de projet actif, parce que chaque nouveau

11:03.850 --> 11:06.500
projet devrait être actif par défaut.

11:06.500 --> 11:09.390
Ce sera notre prochain objectif, et là encore, il y aura de nombreuses

11:09.390 --> 11:12.080
façons différentes de le mettre en œuvre.

11:12.080 --> 11:15.870
Nous allons le faire ensemble avec une méthode que j'ai trouvée dans le prochain

11:15.870 --> 11:16.703
cours.
