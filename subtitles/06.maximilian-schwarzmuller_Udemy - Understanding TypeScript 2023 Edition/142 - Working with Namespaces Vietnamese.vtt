WEBVTT

00:02.190 --> 00:04.860
-: Tôi muốn bắt đầu với tính năng không gian tên.

00:04.860 --> 00:06.810
Bây giờ để cho bạn thấy nó hoạt động

00:06.810 --> 00:09.980
như thế nào, tôi sẽ lấy hai giao diện này ở đây.

00:09.980 --> 00:11.480
Các giao diện kéo thả,

00:11.480 --> 00:14.140
cắt từ app. ts và thêm một tệp

00:14.140 --> 00:19.140
mới, dragdropinterfaces. chẳng hạn.

00:21.270 --> 00:25.180
Bây giờ chúng ta có thể dán nó vào đó và bây giờ để sử dụng không gian

00:25.180 --> 00:29.140
tên, tất cả những gì chúng ta phải làm là thêm từ khóa không gian tên

00:31.645 --> 00:33.620
và sau đó là dấu ngoặc nhọn.

00:33.620 --> 00:35.880
Bây giờ chúng ta cũng phải đặt tên cho không

00:35.880 --> 00:39.590
gian tên này và ở đây tôi sẽ đặt tên cho nó là Giao diện DD để kéo và

00:39.590 --> 00:41.660
thả, tên tùy thuộc vào bạn.

00:41.660 --> 00:43.640
Bây giờ, năm nay là một tính năng của TypeScript, không

00:43.640 --> 00:45.250
phải là một tính năng của JavaScript.

00:45.250 --> 00:47.750
Nó không được biên dịch sang Vanilla JavaScript

00:47.750 --> 00:50.340
vì không có tương đương trực tiếp cho nó.

00:50.340 --> 00:54.860
Thay vào đó, TypeScript về cơ bản sẽ biên dịch nó thành một đối tượng mà bạn

00:54.860 --> 00:55.693
có thể nói.

00:55.693 --> 00:57.490
Đối với một đối tượng mà những thứ

00:57.490 --> 01:00.440
bạn sẽ đặt vào không gian tên sau đó được lưu trữ trên

01:00.440 --> 01:02.140
các thuộc tính, nhưng bạn sẽ không

01:02.140 --> 01:06.960
phải lo lắng về điều đó vì tất cả việc giải quyết quyền truy cập vào các thuộc tính này

01:06.960 --> 01:09.360
và mọi thứ hoạt động sẽ được TypeScript đảm

01:09.360 --> 01:10.640
nhận.

01:10.640 --> 01:13.940
Vì vậy, bây giờ chúng ta có thể di chuyển các giao diện này vào không gian tên

01:13.940 --> 01:16.130
và chúng ta gần như đã hoàn thành công việc đó.

01:16.130 --> 01:18.040
Bây giờ chúng tôi có một vấn đề, tuy

01:18.040 --> 01:22.280
nhiên, các giao diện này hiện chỉ khả dụng trong không gian tên này.

01:22.280 --> 01:23.113
Nhân tiện, bạn

01:23.113 --> 01:25.530
không thể chỉ đặt các giao diện vào một không

01:25.530 --> 01:27.070
gian tên mà bạn có thể đặt bất

01:27.070 --> 01:28.057
cứ thứ gì vào đó, các

01:28.057 --> 01:29.720
lớp, hằng số, bất cứ thứ gì bạn

01:29.720 --> 01:30.780
muốn.

01:30.780 --> 01:33.900
Bất cứ điều gì bạn muốn có thể được đặt trong một không gian tên.

01:33.900 --> 01:35.630
Vì vậy, về cơ bản, bạn có thể bọc một không gian

01:35.630 --> 01:37.150
tên xung quanh bất kỳ mã nào bạn có.

01:37.150 --> 01:39.830
Nhưng vấn đề chúng tôi gặp phải là những tính

01:39.830 --> 01:41.140
năng này, những giao diện

01:41.140 --> 01:44.800
này ở đây hiện chỉ khả dụng bên trong không gian tên đó.

01:44.800 --> 01:47.280
Bây giờ như bạn thấy, chúng tôi không có gì khác trong đó.

01:47.280 --> 01:49.010
Tất nhiên, bây giờ chúng ta có

01:49.010 --> 01:51.600
thể đưa mã phụ thuộc vào chúng trở lại không gian

01:51.600 --> 01:53.370
tên này, nhưng sau đó, một lần nữa

01:53.370 --> 01:56.960
chúng ta sẽ làm điều này vì hóa ra chúng ta có lớp khá dài phụ thuộc

01:56.960 --> 01:58.940
vào các giao diện này.

01:58.940 --> 02:02.900
Chúng ta có lớp danh sách dự án và lớp hạng mục dự án.

02:02.900 --> 02:05.260
Chúng phụ thuộc vào các giao diện này, vì

02:05.260 --> 02:08.922
vậy sẽ có rất nhiều thứ chúng ta phải thêm vào không gian tên đó.

02:08.922 --> 02:10.205
Do đó, điều bạn có thể

02:10.205 --> 02:14.210
làm là thêm từ khóa export trước giao diện để xuất một đối

02:14.210 --> 02:16.850
tượng địa lý từ một không gian tên.

02:16.850 --> 02:19.680
Bây giờ điều này có nghĩa là bây giờ các giao diện

02:19.680 --> 02:22.110
này có sẵn bên trong không gian tên này,

02:22.110 --> 02:24.487
nhưng cũng có sẵn bên ngoài tệp này.

02:24.487 --> 02:26.100
Và chúng ta sẽ xem cách nó hoạt động trong

02:26.100 --> 02:28.510
giây lát, nhưng cùng với đó, chúng ta sẽ tạo giao diện

02:28.510 --> 02:30.710
này hoặc bất kỳ thứ gì chúng ta đang xuất.

02:30.710 --> 02:32.815
Tất nhiên, điều này không bị

02:32.815 --> 02:36.610
hạn chế đối với các giao diện có sẵn bên ngoài tệp này

02:36.610 --> 02:41.140
nếu về cơ bản chúng ta nhập hoặc sử dụng không gian tên đó.

02:41.140 --> 02:41.973
Và tất nhiên, một lần

02:41.973 --> 02:44.580
nữa, bạn không thể chỉ xuất các giao diện trong một không gian

02:44.580 --> 02:45.636
tên mà là bất cứ thứ gì.

02:45.636 --> 02:48.010
Bây giờ với điều đó, câu hỏi chỉ là, làm cách

02:48.010 --> 02:50.310
nào để chúng tôi nhập không gian tên này trở

02:50.310 --> 02:52.410
lại ứng dụng. ts và để làm được điều

02:52.410 --> 02:56.210
đó, TypeScript có cú pháp đặc biệt mà bạn có thể sử dụng.

02:56.210 --> 02:57.867
Hãy trở lại đầu trang của ứng dụng. ts và bây giờ ở đây

02:57.867 --> 03:01.440
bạn thêm ba dấu gạch chéo lên, ba dấu gạch chéo quan trọng, không

03:01.440 --> 03:03.690
chỉ hai vì đây thực sự không phải là một nhận

03:03.690 --> 03:06.150
xét bình thường mà những gì chúng tôi đang tạo

03:06.150 --> 03:07.330
bây giờ, đây thực sự sẽ

03:07.330 --> 03:10.280
là cú pháp được TypeScript chọn một nhận xét đặc biệt,

03:10.280 --> 03:13.110
bạn có thể nói rằng TypeScript hiểu nếu nó bắt đầu

03:13.110 --> 03:15.500
bằng ba dấu gạch chéo.

03:15.500 --> 03:19.301
Ở đó bạn viết một thẻ XML tự đóng, để mở dấu ngoặc

03:19.301 --> 03:21.600
nhọn, sau đó gạch chéo về phía

03:21.600 --> 03:24.530
trước dấu ngoặc nhọn đóng và trong

03:24.530 --> 03:25.790
đường dẫn tham

03:25.790 --> 03:29.220
chiếu của chúng bằng nhau và sau đó là tên

03:29.220 --> 03:32.370
của tệp bạn muốn nhập.

03:32.370 --> 03:35.217
Trong trường hợp của tôi ở đây dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Bây giờ, TypeScript hiểu và chọn điều này vì như tôi

03:42.550 --> 03:45.220
đã đề cập với ba dấu gạch chéo bắt đầu, đó là một

03:45.220 --> 03:47.560
cú pháp đặc biệt mà TypeScript hiểu giống

03:47.560 --> 03:50.110
như nó hiểu điều tham chiếu này.

03:50.110 --> 03:51.960
Đây không phải là Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript không nhận thấy

03:53.970 --> 03:58.480
và đây không phải là giao diện của nó sau khi được biên dịch.

03:58.480 --> 04:00.430
Bây giờ, những gì không đạt được mặc dù?

04:00.430 --> 04:05.070
Điều này đạt được rằng bây giờ không gian tên Giao diện DD này có sẵn trong

04:05.070 --> 04:07.104
ứng dụng. ts.

04:07.104 --> 04:08.920
Tuy nhiên, nếu bạn cuộn xuống, bạn sẽ thấy

04:08.920 --> 04:11.040
các biên tập viên của tôi vẫn phàn nàn và nếu chúng

04:11.040 --> 04:12.250
tôi cố gắng cứu nó vì tất cả

04:12.250 --> 04:14.300
chúng tôi đều mắc lỗi biên dịch tốt.

04:14.300 --> 04:16.410
Vì vậy, nó dường như không có sẵn.

04:16.410 --> 04:19.730
Giao diện có thể kéo dường như không khả dụng ở đây.

04:19.730 --> 04:22.386
Chà, có một điều đặc biệt về không gian tên.

04:22.386 --> 04:25.840
Bạn có thể sử dụng chúng để phân tách mã của mình và hãy nhớ khi

04:25.840 --> 04:27.930
tôi đã nói trước đó rằng những gì bạn có

04:27.930 --> 04:29.610
trong không gian tên có thể được

04:29.610 --> 04:32.557
sử dụng từ bất kỳ đâu trong không gian tên đó.

04:32.557 --> 04:34.157
Chà, hóa ra bạn có thể phân

04:34.157 --> 04:37.580
chia các không gian tên trên nhiều tệp bằng cách xuất

04:37.580 --> 04:39.110
mọi thứ trong một không

04:39.110 --> 04:42.330
gian tên và sau đó sử dụng cú pháp nhập đặc biệt này,

04:42.330 --> 04:45.230
nhưng sau đó bạn phải đặt những thứ muốn sử dụng

04:45.230 --> 04:48.250
thứ gì đó từ không gian tên nhập đó hoặc từ tệp

04:48.250 --> 04:50.180
đã nhập đó vào cùng một không

04:50.180 --> 04:51.797
gian tên.

04:51.797 --> 04:55.050
Do đó có lẽ Giao diện DD không phải là tên tốt nhất.

04:55.050 --> 04:58.010
Có lẽ chúng tôi chỉ đặt tên là Ứng dụng.

04:58.010 --> 04:59.740
Bây giờ, nếu chúng tôi đặt tên là ứng dụng ở đây, chúng

04:59.740 --> 05:01.670
tôi có thể truy cập app. ts và tạo một

05:01.670 --> 05:04.180
không gian tên cùng tên tại đây,

05:04.180 --> 05:05.630
namespace App.

05:05.630 --> 05:06.890
Và bây giờ, hãy đặt mọi

05:06.890 --> 05:10.750
thứ ở đây vào không gian tên đó và bây giờ bạn sẽ thấy lỗi không

05:10.750 --> 05:12.610
còn nữa. Không có dấu chấm màu

05:12.610 --> 05:14.300
đỏ nào ở bên phải.

05:14.300 --> 05:15.513
Tuy nhiên, nếu tôi

05:15.513 --> 05:17.850
đã lưu nó, tôi vẫn sẽ gặp lỗi ở đây.

05:17.850 --> 05:22.850
Ví dụ, danh sách dự án đã hoàn thành đó không được sử dụng.

05:25.010 --> 05:26.300
Vâng, đó là chính

05:26.300 --> 05:28.210
xác tôi không sử dụng đó.

05:28.210 --> 05:29.600
Tôi cũng không cần nó, vì vậy

05:29.600 --> 05:32.610
chúng ta có thể đơn giản loại bỏ những khái niệm này ở đây.

05:32.610 --> 05:35.190
Cùng với đó, nếu chúng tôi đã lưu cái này, thì

05:35.190 --> 05:38.040
bây giờ nó sẽ được biên dịch mà không có lỗi.

05:38.040 --> 05:39.880
Câu hỏi đặt ra là kết quả của

05:39.880 --> 05:41.920
quá trình biên dịch này là gì?

05:41.920 --> 05:44.260
Bây giờ chúng ta có một hoặc hai tệp không?

05:44.260 --> 05:46.170
Chà, hãy xem thư mục đĩa và

05:46.170 --> 05:49.380
ở đó bạn sẽ thấy mình có một tệp JS Ứng dụng,

05:49.380 --> 05:50.780
sau đó là một số mã ở

05:50.780 --> 05:53.980
đây và một tệp JS giao diện kéo và thả.

05:53.980 --> 05:56.690
Vì vậy, kết quả là chúng tôi có hai tệp.

05:56.690 --> 05:59.500
Bây giờ tệp giao diện thả rồng thực sự khá trống vì

05:59.500 --> 06:00.830
bạn đã biết rằng các giao

06:00.830 --> 06:04.360
diện về cơ bản không được biên dịch thành bất kỳ thứ gì.

06:04.360 --> 06:07.300
Không có JavaScript tương đương cho một giao diện.

06:07.300 --> 06:09.270
Đó là một tính năng TypeScript thuần túy.

06:09.270 --> 06:12.370
Vì vậy, chúng tôi có thể nhập nó bằng cú pháp TypeScript tại đây để sử

06:12.370 --> 06:15.509
dụng nó và nhận được tất cả các cải tiến về loại mà chúng tôi đã học nhưng

06:15.509 --> 06:17.300
trong quá trình sản xuất, việc nó có nằm

06:17.300 --> 06:20.060
trong một tệp riêng biệt hay không không quan trọng.

06:20.060 --> 06:21.840
Vì vậy, tất nhiên, câu hỏi đặt ra

06:21.840 --> 06:26.380
là điều gì sẽ xảy ra nếu bây giờ chúng ta đặt thứ gì đó tồn tại trong quá trình sản xuất,

06:26.380 --> 06:28.630
cũng như thứ tồn tại trong JavaScript vào

06:28.630 --> 06:30.000
một tệp riêng biệt.

06:30.000 --> 06:33.373
Ví dụ: enum và lớp dự án ở đây, tôi sẽ lấy

06:35.520 --> 06:36.470
cả hai, tạo

06:36.470 --> 06:37.610
một tệp mới,

06:37.610 --> 06:41.410
dự án TS mô hình dấu gạch ngang và đặt trạng

06:41.410 --> 06:46.040
thái dự án của tôi enum và lớp dự án vào đó.

06:46.040 --> 06:47.420
Bây giờ giống như trước khi

06:47.420 --> 06:49.070
chúng ta có thể thêm một không gian

06:49.070 --> 06:50.590
tên ở đây, tên phải là Ứng dụng,

06:50.590 --> 06:51.790
vì vậy nó phải được thực hiện

06:51.790 --> 06:54.020
không gian tên nơi chúng ta cũng muốn sử dụng

06:54.020 --> 06:57.340
nó và chúng ta phải xuất các tính năng này trong đó để chúng ta có thể

06:57.340 --> 06:59.450
sử dụng chúng trong đó. các tệp khác trong

06:59.450 --> 07:00.440
cùng một không gian

07:00.440 --> 07:02.640
tên, nhưng cũng có một tệp khác.

07:02.640 --> 07:03.980
Bây giờ trở lại trong ứng dụng. ts, chúng

07:03.980 --> 07:05.900
ta phải nhập tệp thứ hai đó.

07:05.900 --> 07:07.890
Vì vậy, tôi sẽ sao chép lần nhập

07:07.890 --> 07:11.515
này và tất cả ts mô hình dấu gạch ngang của dự án nhập.

07:11.515 --> 07:13.800
nếu tôi đã lưu nó và bây giờ được biên dịch

07:13.800 --> 07:16.610
và chúng tôi thấy tệp JavaScript mô hình dự án.

07:16.610 --> 07:18.184
Và trong đó, chúng tôi

07:18.184 --> 07:19.490
thấy một số mã.

07:19.490 --> 07:22.770
Câu hỏi đặt ra là ứng dụng của chúng ta hiện có hoạt động không?

07:22.770 --> 07:24.620
Để làm được điều đó, hãy tải lại

07:25.480 --> 07:27.587
nó và thử thêm một dự án vào đây và

07:27.587 --> 07:29.070
bạn sẽ thấy, chúng tôi

07:29.070 --> 07:29.903
gặp lỗi.

07:29.903 --> 07:33.183
Không thể đọc thuộc tính hoạt động của không xác định.

07:34.120 --> 07:36.090
Lý do đơn giản là các tệp của

07:36.090 --> 07:38.854
chúng tôi được biên dịch độc lập.

07:38.854 --> 07:41.410
Không gian tên tồn tại trong thế giới TypeScript

07:41.410 --> 07:44.640
như tôi đã nói, không có JavaScript tương đương với nó.

07:44.640 --> 07:47.430
Vì vậy, vấn đề chúng tôi gặp phải ở đây là trong thế giới TypeScript,

07:47.430 --> 07:48.263
mọi thứ đều tuyệt vời

07:48.263 --> 07:51.610
vì TypeScript có thể tìm thấy tất cả những thứ chúng tôi cần.

07:51.610 --> 07:52.800
Ví dụ, khi tôi nói

07:52.800 --> 07:54.420
dự án ở đây, khi tôi tham

07:54.420 --> 07:56.310
chiếu loại dự án ở đây trên

07:56.310 --> 07:58.130
lớp trạng thái dự án, loại

07:58.130 --> 07:59.310
dự án này, lớp dự

07:59.310 --> 08:00.610
án này được định nghĩa

08:00.610 --> 08:02.840
trong mô hình dự án.

08:02.840 --> 08:06.020
Bây giờ TypeScript không phàn nàn về việc bạn chưa hoàn

08:06.020 --> 08:07.570
thành vì chúng tôi nhập mô

08:07.570 --> 08:10.250
hình đó, nhưng nhập ở đây thực sự chỉ có nghĩa là

08:10.250 --> 08:13.960
chúng tôi cho TypeScript biết nơi tìm loại đó sau khi nó được biên

08:13.960 --> 08:15.810
dịch thành JavaScript, về cơ bản,

08:15.810 --> 08:18.150
việc ngắt kết nối sẽ bị hủy.

08:18.150 --> 08:20.840
Vì vậy, trong mã JavaScript khi được thực

08:20.840 --> 08:23.230
thi và sau đó khi chúng tôi cố gắng tạo

08:23.230 --> 08:25.130
một dự án mới bằng cách khởi tạo

08:25.130 --> 08:27.430
dự án, JavaScript không tìm thấy lớp

08:27.430 --> 08:29.610
dự án hoặc hàm tạo này.

08:29.610 --> 08:32.980
Vì vậy, chúng tôi phải đảm bảo rằng chúng tôi thực hiện ngắt kết nối.

08:32.980 --> 08:35.420
Và để làm được điều đó, chúng ta có

08:35.420 --> 08:39.640
thể truy cập TS (lầm bầm) và ở đó đặt tùy chọn tệp ra này.

08:39.640 --> 08:40.740
Chúng tôi có thể

08:40.740 --> 08:43.010
nhận xét điều này trong và ý tưởng

08:43.010 --> 08:45.540
đằng sau tệp đầu ra là bạn nói với TypeScript

08:45.540 --> 08:48.620
rằng nó sẽ nối các không gian tên.

08:48.620 --> 08:49.670
Vì vậy, các tham chiếu

08:49.670 --> 08:51.740
này có trong quá trình biên dịch thành

08:51.740 --> 08:53.950
một tệp JavaScript duy nhất thay vì

08:53.950 --> 08:56.970
biên dịch nhiều tệp JavaScript.

08:56.970 --> 08:59.210
Vì vậy, ở đây đối với tệp ra, chúng tôi có thể nói

08:59.210 --> 09:02.350
rằng chúng tôi muốn có một tệp trong thư mục đĩa, mà chúng tôi đặt

09:02.350 --> 09:04.770
tên có thể là gói. js Và nếu chúng tôi làm

09:05.630 --> 09:07.050
điều đó và lưu nó, chúng tôi

09:07.050 --> 09:08.700
thực sự sẽ gặp lỗi ở đây.

09:09.650 --> 09:10.710
Chúng tôi sẽ gặp

09:12.300 --> 09:14.410
lỗi chỉ có AMD và các mô-đun hệ

09:14.410 --> 09:17.250
thống được hỗ trợ cùng với tệp ngoài.

09:17.250 --> 09:19.540
Bây giờ, chúng ta không cần phải hiểu mọi

09:19.540 --> 09:23.160
thứ ở đây. Về cơ bản, có nhiều cách khác nhau để tải hoặc nhóm các

09:23.160 --> 09:26.120
tệp JavaScript khác nhau thành một vì lý do lịch sử

09:26.120 --> 09:28.770
và cách tất cả được phát triển và bạn có thể tìm

09:28.770 --> 09:31.250
hiểu thêm về các loại nhóm khác nhau này trong

09:31.250 --> 09:33.700
tài nguyên đính kèm nếu bạn muốn, bạn không

09:33.700 --> 09:35.340
cần phải mặc dù.

09:35.340 --> 09:36.800
Vì vậy, về cơ bản, những gì chúng

09:36.800 --> 09:38.120
ta cần làm ở đây là chúng ta

09:38.120 --> 09:40.470
cần đặt mô-đun đã được đánh dấu là lỗi ở đây,

09:40.470 --> 09:41.598
không phải cho JS thông

09:41.598 --> 09:43.943
thường, mà là cho AMD chẳng hạn.

09:45.400 --> 09:47.700
Nếu chúng tôi làm điều đó, nó sẽ biên dịch

09:47.700 --> 09:50.010
mà không gặp sự cố mặc dù nó vẫn phàn nàn ở đây,

09:50.010 --> 09:52.140
nhưng tôi không nhận ra rằng tôi đã thay

09:52.140 --> 09:53.860
đổi nó và bây giờ điều thực sự xảy

09:53.860 --> 09:56.570
ra là có một tệp JS gói mới trong dist.

09:56.570 --> 10:00.310
Nếu tôi xóa tất cả các tệp JavaScript trong thư mục đĩa và

10:00.310 --> 10:04.680
tôi khởi động lại dấu gạch ngang TSC của mình, chúng tôi sẽ xử lý để

10:04.680 --> 10:05.580
trình biên dịch

10:05.580 --> 10:08.600
bạn sẽ chỉ thấy tệp JS gói đó được tạo.

10:08.600 --> 10:11.530
Tệp này sẽ chứa tất cả mã của chúng tôi trong

10:11.530 --> 10:13.250
phiên bản được biên dịch

10:13.250 --> 10:15.400
và dịch và do đó, bây giờ trong HTML

10:15.400 --> 10:20.300
chỉ mục, chúng tôi chỉ cần nhập gói JS tại đây thay vì App JS.

10:20.300 --> 10:23.610
Và nếu chúng tôi làm như vậy và chúng tôi tải lại ở đây, chúng tôi

10:23.610 --> 10:25.830
lại có một ứng dụng đang hoạt động, nơi chúng

10:25.830 --> 10:28.260
tôi có thể sử dụng tính năng kéo và thả mọi thứ

10:28.260 --> 10:30.410
vì bây giờ tất cả đều nằm trong một tệp, nhưng

10:30.410 --> 10:32.661
chỉ trong kết quả cuối cùng.

10:32.661 --> 10:34.230
Trong quá trình phát triển,

10:34.230 --> 10:36.260
chúng tôi có các không gian tên

10:36.260 --> 10:39.030
này ở đây, đây là một bước đi đúng hướng

10:39.030 --> 10:41.970
vì nó đã dễ quản lý hơn một chút.

10:41.970 --> 10:44.350
Bây giờ, hãy chia tệp này thành nhiều tệp hơn

10:44.350 --> 10:47.250
nữa trước khi chúng ta xem xét các mô-đun TS tùy chọn chia

10:47.250 --> 10:48.283
trung bình.
