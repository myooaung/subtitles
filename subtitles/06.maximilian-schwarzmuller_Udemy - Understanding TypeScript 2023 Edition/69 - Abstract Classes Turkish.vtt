WEBVTT

00:02.060 --> 00:04.710
Statik özellikleri aradan çıkardıktan

00:04.710 --> 00:07.000
sonra, kalıtıma ve bununla ilgili bir

00:07.000 --> 00:08.743
kavrama geri dönelim.

00:08.743 --> 00:11.740
Miras almayı planladığınız sınıflara yöntem

00:11.740 --> 00:14.280
eklemenin başka bir yolu.

00:14.280 --> 00:16.660
İşte Departman sınıfımız ve bildiğiniz

00:16.660 --> 00:19.200
gibi, BT Departmanı ve Muhasebe Departmanı'nda

00:19.200 --> 00:21.360
bundan miras alıyoruz.

00:21.360 --> 00:23.470
Şimdi, burada Department sınıfımızda

00:23.470 --> 00:26.160
bu tanımlama yöntemine sahibiz ve bu nedenle

00:26.160 --> 00:28.850
bunu IT Department ve Accounting Department'a

00:28.850 --> 00:31.850
dayalı herhangi bir örnekte çağırabiliriz çünkü

00:31.850 --> 00:34.560
bu sınıflar Department'ı temel alır ve Department

00:34.560 --> 00:36.560
temel sınıfının tüm özelliklerine

00:36.560 --> 00:39.523
ve yöntemlerine erişebilirler.

00:40.380 --> 00:43.850
Şimdi, öğrendiğiniz gibi, yöntemleri geçersiz kılabilirsiniz.

00:43.850 --> 00:46.550
Örneğin, burada Muhasebe Departmanında,

00:46.550 --> 00:50.030
farklı bir şey yapmak istediğim, belki Muhasebe

00:50.030 --> 00:51.900
Departmanı Kimliği ve ardından

00:51.900 --> 00:56.880
Erişim Bozma Kimliği dediğimde kendi tanımlama yöntemi sürümümüzü

00:56.880 --> 01:00.443
ekleyebiliriz.

01:02.040 --> 01:03.140
Şimdi, bu burada çalışmayacaktır

01:03.140 --> 01:06.960
çünkü ID, Department'ın özel bir özelliğidir ve bu nedenle, bu

01:06.960 --> 01:10.400
sınıfı temel alan sınıflarda da kullanılabilmesi için

01:10.400 --> 01:12.590
bunu korumalı bir özelliğe dönüştürmemiz

01:12.590 --> 01:14.750
gerekir.

01:14.750 --> 01:16.210
Ama bununla işe yaraması gerekir.

01:16.210 --> 01:19.080
Ve eğer şimdi muhasebeyi tanımla dersem, ki

01:19.080 --> 01:20.540
bunu yapabiliriz, elbette

01:20.540 --> 01:23.650
bu iki satırı yorumlayalım ve bunun yerine muhasebeyi

01:23.650 --> 01:27.460
çağıralım. aşağıda tanımladığımızda, yeni

01:27.460 --> 01:29.300
çıktıyı görmeliyiz ve gerçekten

01:29.300 --> 01:33.340
de Muhasebe Departmanı Kimliği, d2'yi görüyoruz.

01:33.340 --> 01:36.570
Elbette BT Departmanındaki tanımlama yöntemini

01:36.570 --> 01:38.900
de geçersiz kılabiliriz.

01:38.900 --> 01:43.240
Ancak bazen sadece bir yöntemi geçersiz kılma seçeneği sunmak

01:43.240 --> 01:46.440
istemezsiniz çünkü bu her zaman vardır.

01:46.440 --> 01:50.430
Bunun yerine, belirli bir sınıfla çalışan veya belirli bir sınıfı genişleten

01:50.430 --> 01:53.390
geliştiricileri belirli bir yöntemi uygulamaya veya belirli

01:53.390 --> 01:54.820
bir yöntemi geçersiz kılmaya

01:54.820 --> 01:56.840
zorlamak istersiniz.

01:56.840 --> 01:58.360
Bunu ne zaman yapacaksın?

01:58.360 --> 02:01.690
Belirli bir yöntemin, bu durumda Department gibi bir

02:01.690 --> 02:05.670
temel sınıfa dayalı tüm sınıflarda kullanılabilir olmasını sağlamak

02:05.670 --> 02:07.320
istediğinizde.

02:07.320 --> 02:10.550
Ancak aynı zamanda tam uygulamanın belirli bir sürüme

02:10.550 --> 02:14.220
bağlı olacağını da bildiğinizde, genel bir yöntem sağlayabildiğinizde,

02:14.220 --> 02:17.340
ancak bu yöntemin var olmasını zorunlu kılmak istediğinizde,

02:17.340 --> 02:24.270
temel sınıfta varsayılan bir uygulama sağlayamayacağınız için miras alan sınıfların kendi uygulamalarını

02:24.270 --> 02:28.520
sağlamaları gerekecektir.

02:28.520 --> 02:30.150
Böyle bir durumda, temel

02:30.150 --> 02:34.600
sınıfınızda boş bir yöntem olmasını isteyebilir ve şimdi bu sınıfa

02:34.600 --> 02:38.460
dayanan tüm sınıfları bu yöntemi eklemeye ve geçersiz kılmaya

02:38.460 --> 02:40.810
zorlayabilirsiniz ve bunu buraya abstract

02:40.810 --> 02:44.880
anahtar sözcüğünü ekleyerek yapabilirsiniz.

02:44.880 --> 02:46.630
Buraya abstract eklerseniz, bunun

02:46.630 --> 02:49.840
yalnızca soyut bir sınıfta mevcut olduğuna dair bir hata aldığımızı

02:49.840 --> 02:51.440
görürsünüz.

02:51.440 --> 02:54.220
Dolayısıyla, yöntemin önünde abstract olan bir veya

02:54.220 --> 02:57.390
daha fazla yönteminiz varsa, buraya class'ın önüne de abstract

02:57.390 --> 03:00.400
eklemeniz gerekir ve şimdi, bu konuda iyiyiz, ancak şimdi

03:00.400 --> 03:01.690
burada bir hata olduğunu

03:01.690 --> 03:03.740
görüyorsunuz.

03:03.740 --> 03:05.650
Describe, soyut olarak işaretlendiği

03:05.650 --> 03:07.850
için bir uygulamaya sahip olamaz.

03:07.850 --> 03:10.340
Küme parantezlerini kaldırmanız, noktalı

03:10.340 --> 03:14.030
virgül eklemeniz ve bunun yerine bunun sahip olması gereken dönüş

03:14.030 --> 03:16.820
türünü (bu durumda beyaz) eklemeniz gerekir.

03:16.820 --> 03:18.400
Yani şimdi, bu yöntemin nasıl

03:18.400 --> 03:21.970
görünmesi gerektiğini, yapısının ne olduğunu tanımlıyorsunuz,

03:21.970 --> 03:25.230
ancak bunun dışında başka bir şey söylemiyorsunuz.

03:25.230 --> 03:27.990
Ancak şimdi, BT Departmanında bir hata

03:27.990 --> 03:31.120
alıyoruz çünkü miras alınan soyut üye describe'i

03:31.120 --> 03:33.640
uygulamıyor, yani burada describe

03:33.640 --> 03:36.330
yöntemini sunmuyoruz.

03:36.330 --> 03:38.410
Ve bunu yapmak zorundayız çünkü soyut

03:38.410 --> 03:41.000
olan ve böyle bir soyut metoda sahip olan Department

03:41.000 --> 03:42.860
sınıfını temel alıyoruz.

03:42.860 --> 03:45.220
Bu da, bu yöntemin bu Departman sınıfını temel alan

03:45.220 --> 03:48.623
herhangi bir sınıf tarafından uygulanması gerektiği anlamına gelir.

03:49.620 --> 03:51.420
Şimdi burada, BT Departmanında,

03:51.420 --> 03:53.820
bir açıklama yöntemi eklememiz gerekiyor.

03:53.820 --> 03:58.820
Ve orada, artık konsoldan BT Departmanı'na giriş yapabilir ve sonra

03:59.040 --> 04:01.120
istediğimizi yapabiliriz.

04:01.120 --> 04:03.070
Bu, Muhasebe Departmanında sahip olduğumuz

04:03.070 --> 04:04.900
uygulama ile aynı olabilir, ancak

04:04.900 --> 04:07.440
farklı bir uygulama da olabilir.

04:07.440 --> 04:10.040
Şimdi bununla bunu kaydedebiliriz ve yeniden derlenir

04:10.040 --> 04:12.850
ve daha önce olduğu gibi neredeyse aynı çıktıyı alırız.

04:12.850 --> 04:15.240
Ancak şimdi Department'a bağlı olarak farklı

04:15.240 --> 04:18.090
sınıflarımızda describe yönteminin iki farklı

04:18.090 --> 04:20.020
uygulamasına sahibiz.

04:20.020 --> 04:23.600
Bu nedenle soyut, başka bir sınıfa dayanan tüm sınıfların bazı

04:23.600 --> 04:27.120
ortak yöntemleri veya özellikleri paylaşmasını zorunlu

04:27.120 --> 04:30.260
kılmak istiyorsanız çok yararlı olabilir, ayrıca soyut

04:30.260 --> 04:33.150
özelliklere de sahip olabilirsiniz.

04:33.150 --> 04:34.260
Ancak aynı zamanda,

04:34.260 --> 04:36.510
temel sınıftaki somut değeri, somut uygulamayı

04:36.510 --> 04:39.170
sağlamak zorunda olmadığınızdan emin olmak istersiniz,

04:39.170 --> 04:41.000
bunun yerine miras alan sınıfın bunu

04:41.000 --> 04:43.440
yapması gerekir.

04:43.440 --> 04:45.970
Ayrıca soyut sınıflar da önemlidir.

04:45.970 --> 04:49.200
Dolayısıyla, bu anahtar sözcükle soyut olarak işaretlenen

04:49.200 --> 04:51.420
sınıflar kendileri örneklenebilir.

04:51.420 --> 04:54.240
Yani şu anda Departmanı örnekleyemezsiniz.

04:54.240 --> 04:57.440
Temelde, miras alan sınıfların örneklenebilmesi

04:57.440 --> 05:01.800
için miras alınması gereken bir sınıftır ve miras alan sınıflar,

05:01.800 --> 05:05.230
bu durumda burada ortaya koyduğunuz yapıyı takip

05:05.230 --> 05:09.040
eden yöntemi tanımlamak için somut uygulamalar sağlamak

05:09.040 --> 05:11.770
zorunda kalırlar.

05:11.770 --> 05:15.750
Dolayısıyla, bu anahtar sözcük bir Department örneğine veya örneğine atıfta

05:15.750 --> 05:19.930
bulunarak, arada olabilecek miras alınmış sınıflar da dahil olmak üzere bir

05:19.930 --> 05:21.530
şekilde Department'ı temel alır

05:21.530 --> 05:23.610
ve hiçbir şey döndürmez
