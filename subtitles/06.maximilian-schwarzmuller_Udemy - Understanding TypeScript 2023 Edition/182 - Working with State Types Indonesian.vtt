WEBVTT

00:02.260 --> 00:03.920
Penjelasan: Saatnya untuk beberapa manajemen

00:03.920 --> 00:05.340
state di komponen App, karena ketika

00:05.340 --> 00:07.240
kita memperbarui array seperti ini, komponen

00:07.240 --> 00:08.880
tidak akan dirender ulang.

00:08.880 --> 00:10.530
Begitulah cara kerja React.

00:10.530 --> 00:12.590
Di dalam komponen fungsi kita, kita dapat

00:12.590 --> 00:15.000
mengelola State dengan hook useState.

00:15.000 --> 00:16.820
Dan sekali lagi, jika Anda tidak mengetahui

00:16.820 --> 00:18.750
hal ini atau jika state atau komponen fungsi

00:18.750 --> 00:21.120
atau hook tidak memberi tahu Anda apa pun, pasti

00:21.120 --> 00:23.810
periksa beberapa sumber daya React khusus seperti React

00:23.810 --> 00:26.480
saya, kursus panduan lengkap.

00:26.480 --> 00:29.870
Jadi, sekarang saya ingin mengelola todo saya di sini dengan state,

00:29.870 --> 00:31.760
dan untuk itu saya akan menghapus dummy

00:31.760 --> 00:33.060
todo yang saya mulai, dan

00:33.060 --> 00:36.430
sebagai gantinya menginisialisasi state dengan memanggil useState

00:36.430 --> 00:39.080
dan untuk itu, saya dapat mengoper larik kosong saya

00:39.080 --> 00:41.210
sebagai nilai state awal sehingga awalnya

00:41.210 --> 00:44.510
state saya adalah larik kosong.

00:44.510 --> 00:47.100
Sekarang useState selalu mengembalikan sebuah

00:47.100 --> 00:49.370
larik dengan tepat dua elemen.

00:49.370 --> 00:52.070
Elemen pertama adalah snapshot state terbaru

00:52.070 --> 00:53.630
untuk siklus render ini.

00:53.630 --> 00:55.070
Dan argumen kedua, elemen

00:55.070 --> 00:56.720
kedua dalam larik adalah fungsi

00:56.720 --> 00:58.860
untuk memperbarui state tersebut dan

00:58.860 --> 01:01.110
me-render ulang komponen.

01:01.110 --> 01:02.660
Kita dapat menggunakan penataan ulang

01:02.660 --> 01:05.060
larik yang telah kita pelajari sebelumnya dalam kursus

01:05.060 --> 01:07.060
ini, untuk menarik kedua elemen ini dan menyimpannya

01:07.060 --> 01:09.230
dalam konstanta yang terpisah.

01:09.230 --> 01:10.900
Dan kemudian di sini kita memiliki todos

01:10.900 --> 01:13.103
dan katakanlah sebuah fungsi bernama setTodos.

01:14.920 --> 01:16.820
Dengan itu, kita masih mendapatkan

01:16.820 --> 01:19.530
larik todo kita dan sekarang di sini di todoAddHandler,

01:19.530 --> 01:21.480
saya ingin memanggil setTodos dan mengatur

01:21.480 --> 01:24.430
larik todo saya ke larik baru, yang memiliki todoText

01:24.430 --> 01:27.373
baru yang ditambahkan ke dalamnya.

01:28.240 --> 01:29.283
Nah untuk itu, tentu

01:30.400 --> 01:32.130
saja kita bisa memasukkan array

01:32.130 --> 01:34.100
baru dan menambahkan objek baru,

01:34.100 --> 01:36.530
katakanlah dengan ID, di mana kita membuat

01:36.530 --> 01:42.530
ID acak dengan Math.

01:42.530 --> 01:42.530
acak(). toString.

01:42.530 --> 01:44.830
Ini tidak benar-benar unik, tetapi cukup bagus di sini,

01:44.830 --> 01:46.620
dan di mana kita juga memiliki teks kita, yang

01:46.620 --> 01:48.760
merupakan nilai teks yang saya dapatkan di sini.

01:48.760 --> 01:51.910
Tetapi anehnya, saya mendapatkan error di sini.

01:51.910 --> 01:54.790
Dan kesalahan yang kita dapatkan adalah argumen

01:54.790 --> 01:56.860
ini tidak dapat ditetapkan.

01:56.860 --> 01:59.630
Yah pada dasarnya menjadi sesuatu yang mengharapkan

01:59.630 --> 02:01.970
untuk memiliki array dari apa-apa.

02:01.970 --> 02:03.590
Dan itu, tentu saja bukan yang Anda inginkan di sini.

02:03.590 --> 02:06.010
Kita tidak ingin memiliki susunan yang tidak ada apa-apanya sebagai negara kita.

02:06.010 --> 02:07.110
Mengapa hal ini terjadi?

02:07.950 --> 02:11.800
Karena di sini ketika saya menginisialisasi useState dengan array kosong, TypeScript

02:11.800 --> 02:15.040
menyimpulkan bagaimana state kita akan terlihat, jika saya akan menginisialisasi

02:15.040 --> 02:17.060
ini ke string, TypeScript akan menyimpulkan

02:17.060 --> 02:20.130
bahwa state saya adalah string.

02:20.130 --> 02:23.010
Jadi, jika saya menghapus ini untuk sementara dan saya memasukkan beberapa

02:23.010 --> 02:24.123
teks, itu akan diterima.

02:25.160 --> 02:26.137
Jika saya mengopernya dalam

02:26.137 --> 02:28.260
array, TypeScript mengharapkan bahwa itu adalah

02:28.260 --> 02:30.080
array tetapi bukan array dari apa pun, tetapi

02:30.080 --> 02:32.000
pada dasarnya selalu array kosong.

02:32.000 --> 02:36.070
Jadi array dari apa-apa yang tentu saja tidak saya inginkan di sini.

02:36.070 --> 02:38.050
Untuk memperbaiki hal ini kita harus memberitahu React,

02:38.050 --> 02:40.460
bagaimana estate kita akan terlihat dari waktu ke waktu.

02:40.460 --> 02:42.920
Dan untuk itu kita dapat menggunakan lagi bahwa

02:42.920 --> 02:44.630
useState adalah fungsi generik,

02:44.630 --> 02:48.080
karena kita dapat meneruskan struktur estate kita.

02:48.080 --> 02:51.240
Jadi jenis data state kita, dan di sana kita dapat

02:51.240 --> 02:54.200
mengoper bahwa state kita harus berupa array

02:54.200 --> 02:56.253
objek, tepatnya array objek di

02:57.210 --> 02:59.570
mana kita memiliki properti ID yang

02:59.570 --> 03:02.750
merupakan string, dan properti teks, yang merupakan

03:02.750 --> 03:04.860
string.

03:04.860 --> 03:08.050
Dan sekarang pembaruan keadaan ini diperbolehkan.

03:08.050 --> 03:10.100
Sekarang menulis ini di sini tentu saja tidak masalah, tetapi karena

03:10.100 --> 03:12.410
kita akan membutuhkannya di tempat yang berbeda dalam aplikasi, saya akan

03:12.410 --> 03:16.710
membuat file baru dan menamainya todo. model. ts.

03:16.710 --> 03:18.210
Nama file terserah Anda.

03:18.210 --> 03:19.940
Dan di sini saya ingin mengekspor pada

03:19.940 --> 03:21.710
dasarnya, sebuah nama antarmuka Todo

03:21.710 --> 03:24.080
di mana saya hanya ingin menggambarkan bagaimana ID

03:24.080 --> 03:25.440
Todo kita akan terlihat seperti

03:25.440 --> 03:27.430
di aplikasi saya yang saya ingin memiliki ID

03:27.430 --> 03:30.190
bertipe string, dan properti teks bertipe string.

03:30.190 --> 03:34.420
Dan dengan ini diekspor di sini di komponen aplikasi, kita

03:34.420 --> 03:35.900
bisa mengimpor ini jadi

03:35.900 --> 03:38.210
di sini kita bisa mengimpor Todo

03:39.080 --> 03:42.543
dari . /todo. model.

03:43.900 --> 03:46.720
Dan di sini kita hanya memiliki array todo yang tentu

03:46.720 --> 03:49.550
saja lebih pendek dan lebih mudah dibaca.

03:49.550 --> 03:51.480
Dan sekarang pembaruan status kita masih berfungsi,

03:51.480 --> 03:52.870
tetapi ini sedikit lebih bersih.

03:52.870 --> 03:55.100
Dan ini seperti yang Anda lihat sangat penting

03:55.100 --> 03:57.210
di sini ketika bekerja dengan sesuatu seperti

03:57.210 --> 03:59.170
larik di mana jenis konten untuk jenis data

03:59.170 --> 04:01.860
yang ingin Anda simpan yang pada akhirnya, jika Anda menginisialisasi

04:01.860 --> 04:04.270
dengan larik kosong.

04:04.270 --> 04:06.250
Namun demikian, dengan ini, hal itu berhasil.

04:06.250 --> 04:07.450
Kelemahannya tentu saja

04:07.450 --> 04:09.910
adalah, logika pembaharuan state kita di sini

04:09.910 --> 04:13.670
tidak benar, karena saat ini saya selalu menimpa larik todo yang ada

04:13.670 --> 04:17.400
dengan larik baru yang hanya memiliki tepat satu elemen.

04:17.400 --> 04:20.110
Dan sebagai gantinya, saya ingin menimpanya dengan

04:20.110 --> 04:23.730
larik baru yang memiliki semua elemen lama serta elemen baru.

04:23.730 --> 04:26.583
Jadi, mari kita sesuaikan logika ini dalam kuliah berikutnya.
