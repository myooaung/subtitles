WEBVTT

00:02.260 --> 00:07.020
-: ตอนนี้มีคุณลักษณะสุดท้ายที่น่าสนใจซึ่งฉันอยากจะแนะนำด้วย

00:07.020 --> 00:10.330
นั่นคือตัวสร้างส่วนตัว

00:10.330 --> 00:13.823
และตัวสร้างส่วนตัวคืออะไรและมีประโยชน์อย่างไร

00:14.870 --> 00:20.460
มีรูปแบบในการเขียนโปรแกรมเชิงวัตถุซึ่งเรียกว่ารูปแบบซิงเกิล

00:20.460 --> 00:26.440
รูปแบบ singleton เกี่ยวกับการทำให้มั่นใจว่าคุณมีอินสแตนซ์ของคลาสหนึ่งๆ

00:26.440 --> 00:28.030
เสมอ

00:28.030 --> 00:34.450
สิ่งนี้มีประโยชน์ในสถานการณ์ที่คุณไม่สามารถใช้วิธีการหรือคุณสมบัติแบบสแตติกหรือคุณไม่ต้องการ

00:34.450 --> 00:40.730
แต่ในขณะเดียวกันคุณต้องการให้แน่ใจว่าคุณไม่สามารถสร้างหลายออบเจกต์ตามคลาสได้ แต่คุณ

00:40.730 --> 00:44.630
มีวัตถุหนึ่งชิ้นตามคลาสเสมอ

00:44.630 --> 00:51.460
สมมติว่าสำหรับแผนกบัญชีของเรา เราต้องการให้แน่ใจว่าเราสามารถสร้างออบเจกต์ตามคลาสนี้ได้เพียงหนึ่งรายการเท่านั้น

00:51.460 --> 00:57.840
เนื่องจากเรามีแผนกบัญชีเพียงแผนกเดียวในบริษัททั้งหมดของเรา

00:57.840 --> 01:00.260
เราอาจมีแผนกไอทีมากกว่าหนึ่งแผนก

01:00.260 --> 01:03.290
แต่เรามีแผนกบัญชีเพียงแผนกเดียว

01:03.290 --> 01:05.310
ตอนนี้เพื่อบังคับใช้สิ่งนี้และเพื่อหลีกเลี่ยงไม่ให้เราต้องเรียกใช้

01:05.310 --> 01:18.860
AccountingDepartment ใหม่ด้วยตนเองหลายๆ ครั้ง เราสามารถเปลี่ยนตัวสร้างของคลาส AccountingDepartment เป็นตัวสร้างส่วนตัวได้โดยเพิ่มคำหลักส่วนตัวไว้ข้างหน้า

01:18.860 --> 01:23.480
สิ่งนี้ทำเพื่อให้มั่นใจว่าเราไม่สามารถเรียกสิ่งนี้ใหม่ได้

01:23.480 --> 01:30.600
ที่นี่คุณเห็นว่าฉันได้รับข้อผิดพลาดเนื่องจากตัวสร้างเป็นส่วนตัวดังนั้นจึงสามารถเข้าถึงได้จากภายในชั้นเรียนเท่านั้น

01:30.600 --> 01:37.920
ซึ่งฟังดูแปลกเพราะเราจะเข้าไปในชั้นเรียนได้อย่างไรหากเราไม่สามารถสร้างวัตถุจากมันได้อีกต่อไป

01:37.920 --> 01:40.490
คำตอบคือ วิธีการคงที่

01:40.490 --> 01:46.250
สามารถเรียกใช้เมธอดสแตติกในคลาสได้ ดังนั้นคุณจึงไม่ต้องสร้างอินสแตนซ์สำหรับสิ่งนั้น

01:46.250 --> 01:49.460
ดังนั้นที่นี่เราสามารถเพิ่มเมธอดสแตติกซึ่งเราสามารถเรียกว่า

01:49.460 --> 01:53.260
getInstance ได้ แต่ชื่อนั้นขึ้นอยู่กับคุณทั้งหมด

01:53.260 --> 01:56.930
ตอนนี้ getInstance จะตรวจสอบว่าเรามีอินสแตนซ์ของคลาสนี้แล้วหรือไม่

01:56.930 --> 02:00.090
ถ้าไม่มี ให้ส่งคืนอันใหม่

02:00.090 --> 02:04.300
เพื่อให้เราสามารถเพิ่มอินสแตนซ์คุณสมบัติคงที่ใหม่ ซึ่งเป็นคุณสมบัติส่วนตัวแบบคงที่

02:04.300 --> 02:09.200
เพื่อให้คุณสามารถใส่ส่วนตัวไว้หน้าอินสแตนซ์ที่เรียกว่าคงที่ซึ่งจะเป็นประเภท

02:09.200 --> 02:12.040
AccountingDepartment

02:12.040 --> 02:16.570
ดังนั้น เราจะเก็บอินสแตนซ์แผนกบัญชีไว้ที่นั่น

02:16.570 --> 02:17.580
นั่นคือสิ่งที่ฉันกำลังพูดที่นี่

02:17.580 --> 02:25.960
ฉันมีคุณสมบัติคงที่ซึ่งสามารถเข้าถึงได้ในคลาสเอง แต่จากภายในคลาสเท่านั้นและค่าที่เราเก็บไว้ในนั้นจะเป็นประเภท AccountingDepartment

02:25.960 --> 02:30.140
ดังนั้นของคลาสเอง

02:30.140 --> 02:33.880
ตอนนี้เราสามารถใช้คุณสมบัติอินสแตนซ์นี้ใน getInstance

02:33.880 --> 02:38.880
และตรวจสอบว่าสิ่งนี้ อินสแตนซ์ถูกตั้งค่าที่นี่ภายในสแตติก

02:39.260 --> 02:43.570
หากเราใช้สิ่งนี้ มันจะอ้างถึงคลาสเอง และจากนั้นเราสามารถเข้าถึงคุณสมบัติสแตติกอื่นๆ

02:43.570 --> 02:47.610
ทั้งหมดในนั้น

02:47.610 --> 02:51.963
ทางเลือกอื่นที่จะใช้ชื่อคลาส

02:53.720 --> 03:01.600
และตอนนี้หากตั้งค่านี้ไว้ ฉันต้องการคืนค่านี้ ตัวอย่างหรือชื่อคลาสอีกครั้ง

03:01.600 --> 03:01.600
อินสแตนซ์

03:01.600 --> 03:05.680
แต่ภายในเมธอดแบบสแตติกนี้ใช้งานได้ มันทำให้เราสามารถเข้าถึงคลาสได้เอง

03:05.680 --> 03:09.370
ซึ่งแตกต่างจากเมธอดที่ไม่ใช่สแตติกซึ่งช่วยให้เราเข้าถึงอินสแตนซ์ที่เรากำลังพยายามทำงาน

03:09.370 --> 03:13.550
ไม่ใช่สิ่งที่เรากำลังทำอยู่ที่นี่ .

03:13.550 --> 03:15.660
อย่างไรก็ตาม หากเราไม่ได้ทำที่นี่

03:15.660 --> 03:17.290
แสดงว่าเรายังไม่มีอินสแตนซ์

03:17.290 --> 03:22.030
ฉันจึงตั้งค่านี้ ดังนั้นคุณสมบัติอินสแตนซ์คงที่นี้จึงเท่ากับ

03:22.030 --> 03:28.630
AccountingDepartment ใหม่ เราสามารถใช้สิ่งนี้ได้จากภายในที่นี่ เพราะตอนนี้เราอยู่ในเมธอดคลาสนี้

03:28.630 --> 03:35.250
ดังนั้นที่นี่เราสามารถเข้าถึงตัวสร้างส่วนตัวและส่งผ่าน ID ของเรา และอาร์เรย์รายงานของเรา

03:35.250 --> 03:44.830
จากนั้น คืนสิ่งนี้

03:44.830 --> 03:44.830
ตัวอย่างที่นี่

03:44.830 --> 03:48.220
ตอนนี้เรากำลังส่งคืนอินสแตนซ์หนึ่งที่เราอาจมีอยู่แล้ว

03:48.220 --> 03:50.970
หรือหากเรายังไม่มี เราจะสร้างอินสแตนซ์ใหม่

03:50.970 --> 03:53.270
แต่โค้ดนี้ โค้ดที่ทำเครื่องหมายไว้ตรงนี้

03:53.270 --> 03:57.850
รันได้ครั้งเดียวเท่านั้น เพราะเมื่อเรามีอินสแตนซ์ เราก็สร้างมันขึ้นมาในบล็อกนี้

03:57.850 --> 04:00.370
ถ้าและเราจะส่งคืนอินสแตนซ์ที่มีอยู่

04:00.370 --> 04:03.700
ดังนั้น ถ้าคุณต้องการทำงานกับแผนกบัญชี แทนที่จะสร้างแบบนี้

04:03.700 --> 04:10.153
เราสามารถเรียกว่า const แผนกบัญชีการบัญชี

04:10.153 --> 04:10.153
getInstance

04:11.646 --> 04:14.850
และสิ่งนี้ส่งคืนอินสแตนซ์ใหม่ของแผนกบัญชี

04:14.850 --> 04:21.103
แต่ถ้าฉันทำเช่นนี้อีกครั้ง ฉันจะได้รับอินสแตนซ์เดียวกันกับที่คุณจะเห็นว่าฉันคอนโซลล็อกแอคเคาท์หรือไม่

04:22.020 --> 04:23.570
และแอคเคานท์ 2 ที่นี่

04:23.570 --> 04:26.550
คุณจะเห็นว่าทั้งสองควรจะเท่ากันทุกประการ ถ้าเราบันทึกมันและโหลดซ้ำ

04:26.550 --> 04:28.253
คุณจะเห็นว่ามีออบเจกต์แผนกบัญชีของฉัน

04:30.550 --> 04:36.690
2 ออบเจ็กต์ มี ID เดียวกัน การตั้งค่าเหมือนกันทุกประการ เป็นออบเจ็กต์เดียวกัน อินสแตนซ์เดียวกัน

04:36.690 --> 04:47.900
เนื่องจากเรา มีเพียงหนึ่งอินสแตนซ์ที่มีรูปแบบซิงเกิลตันนี้ซึ่งสร้างขึ้นด้วยความช่วยเหลือของไพรเวตคีย์เวิร์ดหน้าคอนสตรัคเตอร์

04:47.900 --> 04:52.490
นี่เป็นแนวทางที่คุณจะไม่ได้ใช้ตลอดเวลา

04:52.490 --> 04:55.010
รูปแบบซิงเกิลตันอาจมีประโยชน์ในบางครั้ง

04:55.010 --> 04:56.530
คุณไม่จำเป็นต้องใช้ตลอดเวลา

04:56.530 --> 05:00.360
แต่ก็คุ้มค่าที่จะรู้เพราะมันเป็นสิ่งที่น่าสนใจซึ่งคุณสามารถนำไปใช้กับ

05:00.360 --> 05:04.923
TypeScript ได้อย่างง่ายดายด้วยตัวสร้างส่วนตัว
