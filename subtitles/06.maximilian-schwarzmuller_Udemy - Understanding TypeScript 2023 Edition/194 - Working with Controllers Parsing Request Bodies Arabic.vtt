WEBVTT

00:02.170 --> 00:03.860
المعلم: الآن بعد أن سجلنا بعض المسارات

00:03.860 --> 00:05.630
، دعنا نضيف بعض المنطق لهذه المسارات.

00:05.630 --> 00:07.730
لذلك سأضيف مجلد وحدات تحكم.

00:07.730 --> 00:08.750
هذا ليس أمرًا لا بد

00:08.750 --> 00:11.550
منه ، لكنني أريد تقسيم المنطق هنا إلى وحدات التحكم

00:11.550 --> 00:13.650
والطرق في مجلد المسارات.

00:13.650 --> 00:16.740
وفي وحدات التحكم ، سأضيف أيضًا todos. ts ، وهذا سيحمل الآن

00:16.740 --> 00:19.230
وظائف وحدة التحكم التي نريد أن

00:19.230 --> 00:21.990
نشير إليها من داخل مساراتنا.

00:21.990 --> 00:25.120
لذا هنا ، أحتاج إلى وظيفة سأقوم بتصديرها ، وسأقوم

00:25.120 --> 00:27.220
بإنشائها كوظيفة سهم ، وهي ليست

00:27.220 --> 00:29.170
ضرورية ، رغم ذلك ، وسأسمي هذا

00:29.170 --> 00:31.290
createTodo ، وهي وظيفة ستتلقى

00:32.420 --> 00:34.510
هذه المعلمات النموذجية التي

00:34.510 --> 00:36.720
تحصل عليها في كل وظيفة وسيطة في التعبير

00:36.720 --> 00:38.830
السريع والطلب والاستجابة والوظيفة

00:38.830 --> 00:41.297
التالية.

00:41.297 --> 00:44.550
ورأينا للتو من أين يمكننا الحصول على الأنواع.

00:44.550 --> 00:47.190
يمكننا استيراد الطلب والاستجابة

00:47.190 --> 00:50.460
والوظيفة التالية من express.

00:50.460 --> 00:52.800
هذا يستورد لنا تلك الأنواع.

00:52.800 --> 00:54.910
يمكننا بعد ذلك إضافتها هنا.

00:54.910 --> 00:57.230
الآن ، دائمًا ما تكون إضافة كل هذه الأنواع هنا كما

00:57.230 --> 00:59.980
فعلنا في الخطأ في التعامل مع البرامج الوسيطة ، أيضًا ، أمرًا

00:59.980 --> 01:01.300
مرهقًا ، على الرغم من ذلك.

01:01.300 --> 01:03.750
إنه يعمل ، لكنه قد يكون مزعجًا.

01:03.750 --> 01:05.190
لذلك هناك اختصار.

01:05.190 --> 01:08.220
بدلاً من تعيين الأنواع على جميع هذه المعلمات

01:08.220 --> 01:11.160
، يمكننا أيضًا إخبار TypeScript بنوع الوظيفة

01:11.160 --> 01:14.610
التي نريد تخزينها في ثابت createTodo هذا ، ويمكننا

01:14.610 --> 01:16.260
بعد ذلك ببساطة استيراد

01:16.260 --> 01:19.530
نوع RequestHandler من express ، ثم قمنا بتعيين

01:19.530 --> 01:24.340
هذا هنا ، createTodo ، إلى اكتب RequestHandler.

01:24.340 --> 01:28.780
والآن ترى TypeScript يعرف أننا هنا تلقينا طلبًا ، وهنا حصلنا

01:28.780 --> 01:30.560
على رد ، وهنا حصلنا على الوظيفة

01:30.560 --> 01:32.590
التالية ، لأنه تم تعريف RequestHandler

01:32.590 --> 01:35.730
على أنه يبدو هكذا.

01:35.730 --> 01:38.080
إنها وظيفة ذات ثلاث معاملات حيث يكون

01:38.080 --> 01:40.160
المعامل الأول هو الطلب ، والمعامل

01:40.160 --> 01:42.030
الثاني هو الاستجابة ، والمعامل

01:42.030 --> 01:44.810
الثالث هو الوظيفة التالية.

01:44.810 --> 01:47.313
لذلك هذا يمكن أن يبسط هذا الإعداد هنا.

01:48.195 --> 01:49.380
RequestHandler ، بالطبع

01:49.380 --> 01:51.360
، متاح دائمًا لأننا قمنا بتثبيت الأنواع

01:51.360 --> 01:52.570
لـ express وبالتالي

01:52.570 --> 01:55.270
يمكننا إضافة هذا الاستيراد هنا.

01:55.270 --> 01:57.940
كن على علم بأن هذا الاستيراد سيختفي دائمًا

01:57.940 --> 01:59.960
بمجرد تجميع هذا التحويل إلى JavaScript

01:59.960 --> 02:02.300
لأننا نستورد نوعًا هنا فقط.

02:02.300 --> 02:05.030
هذا لا يستورد أي كود من شأنه أن يتم تنفيذه.

02:05.030 --> 02:06.930
إنه مجرد استيراد نوع.

02:06.930 --> 02:08.650
وبالتالي ، أثناء التجميع

02:08.650 --> 02:11.290
، ستتم إزالته لأنه لا يضيف أي شيء

02:11.290 --> 02:15.860
قد يكون مطلوبًا عند تشغيله في JavaScript عادي.

02:15.860 --> 02:16.693
ومع ذلك ، حصلت

02:16.693 --> 02:18.900
على وظيفة createTodo ، والآن

02:18.900 --> 02:22.240
لماذا لا نضيف مصفوفة TODOS هنا لإدارة بعض

02:22.240 --> 02:25.530
المهام في الذاكرة فقط ، بالطبع.

02:25.530 --> 02:28.310
سيختفي هذا عند إعادة تشغيل الخادم لأنه

02:28.310 --> 02:31.460
مجرد ثابت في JavaScript في النهاية.

02:31.460 --> 02:32.293
يمكنك بالطبع تخيل

02:32.293 --> 02:34.770
التحدث إلى قاعدة بيانات هنا أيضًا ، لكنني

02:34.770 --> 02:36.360
أريد أن أبقي هذا بسيطًا لأنه

02:36.360 --> 02:38.630
يتعلق بـ JavaScript و TypeScript وليس

02:38.630 --> 02:41.323
كثيرًا عن اتصالات قاعدة البيانات.

02:42.390 --> 02:43.790
لذا هنا يجب أن أفعل

02:43.790 --> 02:47.600
، والآن أريد أن أقوم بعمل جديد هنا عندما نتلقى طلبًا

02:47.600 --> 02:49.320
واردًا ، ويجب أن يكون

02:49.320 --> 02:51.020
هذا كائنًا جديدًا ، ولماذا

02:51.020 --> 02:52.980
لا ننشئ مخططًا لهذا الكائن

02:52.980 --> 02:55.420
، نموذجًا.

02:55.420 --> 02:57.640
لذلك سأضيف مجلد نماذج

02:57.640 --> 02:59.030
، وفي مجلد النماذج

02:59.030 --> 03:04.030
هذا ، سأضيف todo. ts وقم بتصدير فصل دراسي هنا ، والذي سأطلق

03:04.760 --> 03:06.250
عليه اسم Todo ، حيث أعرّف

03:06.250 --> 03:08.210
كيف يجب أن يبدو الشكل.

03:08.210 --> 03:10.330
هناك يمكننا إضافة مُنشئ وأيضًا

03:10.330 --> 03:13.129
استخدام اختصار TypeScript هذا حيث

03:13.129 --> 03:16.440
يمكننا إضافة مُعدِّل وصول مثل public ثم

03:16.440 --> 03:19.360
اسم خاصية مثل ID ، وهو من نوع سلسلة ،

03:19.360 --> 03:21.250
دعنا نقول ، ونص ، وهو أيضًا

03:21.250 --> 03:24.050
كتابة سلسلة ، ثم TypeScript سيضيف

03:24.050 --> 03:27.470
تلقائيًا الحقول والخصائص ذات الأسماء المتساوية

03:27.470 --> 03:32.750
والقيم المخصصة التي نمررها إلى المُنشئ إلى تلك الحقول كلما قمنا

03:32.750 --> 03:37.230
بإنشاء مثيل لفئة.

03:37.230 --> 03:38.670
لذلك سأستخدم بناء الجملة هذا هنا

03:38.670 --> 03:40.060
، وقد تعرفت على بناء الجملة هذا في

03:40.060 --> 03:41.810
وقت سابق من الدورة التدريبية بالفعل.

03:41.810 --> 03:44.660
والآن في todos. هنا في وحدة التحكم

03:44.660 --> 03:47.893
، يمكننا بالطبع استيراد Todo من ، الصعود

03:49.020 --> 03:53.403
إلى مستوى واحد ، النماذج / المهام ، واستخدام هذا

03:54.530 --> 03:58.800
النوع والفئة الآن هنا في ملفنا.

03:58.800 --> 04:01.320
وهو نوع وفصل في نفس الوقت لأنه ، من

04:01.320 --> 04:02.800
الواضح أنه فصل دراسي

04:02.800 --> 04:05.750
، وكل فصل يعمل تلقائيًا أيضًا كنوع.

04:05.750 --> 04:08.550
هذا أيضًا ما رأيته خلال هذه الدورة التدريبية.

04:08.550 --> 04:09.750
الآن هنا ، يمكننا

04:09.750 --> 04:11.910
أولاً أن نقول إن TODOS هنا ستكون

04:11.910 --> 04:13.550
مجموعة من المهام.

04:13.550 --> 04:15.480
هذا التعليق التوضيحي الإضافي لا يضر

04:15.480 --> 04:18.590
حتى نحصل على الدعم المناسب بمجرد أن نبدأ في الإضافة إلى

04:18.590 --> 04:21.410
دوس أو نبدأ العمل مع المهام في هذه المجموعة.

04:21.410 --> 04:23.610
وهنا عندما أقوم بإنشاء مهمة جديدة

04:23.610 --> 04:26.220
، أقوم بإنشائها الآن عن طريق إنشاء مثيل

04:26.220 --> 04:28.370
لهذه الفئة ، وعلينا تمرير معرّف

04:28.370 --> 04:32.030
، وهنا سأقوم بإنشاء معرّف عشوائي فريد من نوعه باستخدام

04:32.030 --> 04:34.230
Math random toString.

04:34.230 --> 04:35.270
هذا ليس فريدًا حقًا ، ولكنه

04:35.270 --> 04:36.660
جيد بما فيه الكفاية هنا.

04:36.660 --> 04:39.170
والآن بالنسبة للقيمة هنا ، هناك بالطبع

04:39.170 --> 04:41.670
أريد تعيين بعض النصوص ، والتي أتوقع

04:41.670 --> 04:45.530
الحصول عليها في نص الطلب الوارد الخاص بي.

04:45.530 --> 04:48.823
لذلك أتوقع أن أحصل على نصي هنا ، بشكل أساسي

04:49.750 --> 04:53.270
على نص الطلب. نص ، حتى أتمكن بعد

04:53.270 --> 04:56.280
ذلك من تعيين النص كقيمة هنا.

04:56.280 --> 04:57.113
الآن ، هذا يعمل

04:57.113 --> 04:59.640
، لكن يرجى ملاحظة أن هذا يعمل فقط لأن

04:59.640 --> 05:02.320
TypeScript يرى أن هذا من النوع أي.

05:02.320 --> 05:04.420
إنه لا يعرف أن هذه سلسلة.

05:04.420 --> 05:05.510
ولا يمكنه معرفة ذلك

05:05.510 --> 05:08.390
، لأنه كيف يمكن لـ TypeScript معرفة البيانات

05:08.390 --> 05:11.140
التي ستكون جزءًا من طلباتنا الواردة؟

05:11.140 --> 05:12.430
ليس من الواضح لها.

05:12.430 --> 05:14.260
نحن لا نذكر في أي مكان أبدًا

05:14.260 --> 05:17.620
ما سيكون داخل الطلبات التي نتلقاها.

05:17.620 --> 05:19.270
الآن ، كيف يمكننا تحسين هذا؟

05:19.270 --> 05:21.780
حسنًا ، يمكننا استخدام التلبيس ، على سبيل المثال.

05:21.780 --> 05:23.660
يعد Typecasting دائمًا حلاً رائعًا

05:23.660 --> 05:26.090
إذا كنت تعرف نوعًا معينًا ، لكن TypeScript

05:26.090 --> 05:27.360
لا يعرف ذلك.

05:27.360 --> 05:30.440
لذلك هنا عند نص الطلب ، قبل الوصول إلى النص ،

05:30.440 --> 05:32.650
يمكننا كتابة هذا ليكون كائنًا

05:32.650 --> 05:34.900
حيث لدينا خاصية نص ، وهي سلسلة.

05:34.900 --> 05:36.920
نظرًا لأننا نبني هذا التطبيق

05:36.920 --> 05:40.320
، فنحن نعرف ما نتوقعه في طلباتنا الواردة.

05:40.320 --> 05:42.750
لذلك بما أننا نعلم أنه ستكون هناك خاصية

05:42.750 --> 05:44.166
نصية في نص الطلب الوارد

05:44.166 --> 05:46.630
، يمكننا أن نجعلها مثل هذا الكائن.

05:46.630 --> 05:51.480
والآن نحصل هنا على دعم TypeScript المناسب وأيضًا دعم IDE.

05:51.480 --> 05:53.560
وبهذا نضيف مهمة جديدة.

05:53.560 --> 05:55.470
الآن يمكننا الوصول إلى TODOS

05:55.470 --> 05:58.280
ودفع الجديد للقيام به في هذه المجموعة.

05:58.280 --> 05:59.330
ومرة أخرى ، سيؤدي

05:59.330 --> 06:01.060
هذا بالطبع إلى تخزينه هنا

06:01.060 --> 06:02.750
فقط بشكل ثابت وبالتالي في

06:02.750 --> 06:05.650
الذاكرة فقط ، لأن العمل مع قاعدة بيانات لا

06:05.650 --> 06:08.880
يرتبط حقًا بالعقدة أو TypeScript ، ولكن ، حسنًا

06:08.880 --> 06:11.170
، بقاعدة البيانات.

06:11.170 --> 06:14.140
وبهذا ، حصلنا على وظيفة إنشاء Todo هنا.

06:14.140 --> 06:16.400
الآن دعنا نذهب إلى مسارات المهام

06:16.400 --> 06:19.070
ونستورد وظيفة وحدة التحكم هذه.

06:19.070 --> 06:22.030
لذا قم بالاستيراد من مجلد وحدات

06:22.030 --> 06:24.000
التحكم من ملف todos هناك

06:24.000 --> 06:26.660
، واستورد وظيفة إنشاء Todo وأشر

06:26.660 --> 06:30.100
إلى هذه الوظيفة هنا على مسار النشر بحيث

06:30.100 --> 06:35.100
لا يصل أي طلب يستهدف القطع المائلة إلى شيء مائل إلى وظيفة

06:36.060 --> 06:38.390
createTodo.

06:38.390 --> 06:39.580
لا تنفذه هنا.

06:39.580 --> 06:40.650
فقط أشر إليه.

06:40.650 --> 06:43.890
سيتم تنفيذه من أجلك عن طريق العقدة والتعبير في خادم

06:43.890 --> 06:45.883
الويب قيد التشغيل لاحقًا.

06:46.880 --> 06:49.630
والآن لدينا هذه الوظيفة هنا.

06:49.630 --> 06:50.900
لم ننتهي ، رغم ذلك.

06:50.900 --> 06:52.290
في وحدة التحكم ،

06:52.290 --> 06:54.360
يجب علينا جميعًا الرد.

06:54.360 --> 06:56.720
لذلك يمكننا هنا إرسال رد ، على سبيل

06:56.720 --> 06:59.420
المثال ، بتنسيق JSON باستخدام طريقة

06:59.420 --> 07:02.300
JSON حيث نقول أن الرسالة أنشأت المهام

07:02.300 --> 07:04.040
أو ما تريده ، وقمنا بإنشاء

07:04.040 --> 07:07.770
مفتاح تودو ، ربما ، حيث نعيد توجيه الجديد للقيام بذلك

07:07.770 --> 07:10.520
تمت إضافته على من جانب الخادم بحيث يمكننا

07:10.520 --> 07:14.490
أيضًا استخدام ذلك على العميل.

07:14.490 --> 07:17.750
وربما أيضًا قم بتعيين رمز الحالة 201 هنا

07:17.750 --> 07:19.700
للإشارة إلى أننا نجحنا وأن

07:19.700 --> 07:21.793
المورد قد تم إنشاؤه.

07:22.680 --> 07:24.640
الآن علينا فقط التأكد من

07:24.640 --> 07:28.500
أن الجسد الذي نحاول استخراجه هنا موجود بالفعل.

07:28.500 --> 07:29.770
وللبيانات والتطبيقات. ts ، نحتاج

07:29.770 --> 07:33.130
إلى تحليل جثث الطلبات الواردة.

07:33.130 --> 07:37.620
لذلك ، يمكننا الاستيراد من حزمة body-parser

07:37.620 --> 07:39.220
التي قمنا بتثبيتها

07:39.220 --> 07:41.380
أيضًا ، ومن تلك الحزمة

07:41.380 --> 07:46.380
، يمكننا استيراد طريقة JSON مثل هذه.

07:46.410 --> 07:49.170
ثم هنا يمكنك تسجيل هذا المنفذ

07:49.170 --> 07:51.310
كبرنامج وسيط.

07:51.310 --> 07:54.480
هذه هي البرامج الوسيطة التي توفرها حزمة

07:54.480 --> 07:58.130
تابعة لجهة خارجية والتي ستقوم بتحليل نصوص جميع

07:58.130 --> 08:01.570
الطلبات الواردة واستخراج أي بيانات JSON تجدها

08:01.570 --> 08:05.990
هناك لتعبئة مفتاح الجسم في كائن الطلب هذا ببيانات JSON التي

08:05.990 --> 08:07.970
تم تحليلها.

08:07.970 --> 08:10.290
هذا ما تفعله برمجية JSON الوسيطة

08:10.290 --> 08:12.503
من حزمة body-parser.

08:13.890 --> 08:16.520
وبهذا ، يجب أن يكون لدينا خادم قادر

08:16.520 --> 08:18.230
على إنشاء مهام جديدة.

08:18.230 --> 08:22.210
احفظ جميع الملفات وتأكد من إعادة تجميعها بدون أخطاء.

08:22.210 --> 08:26.150
تأكد من أن nodemon لا يزال يخدم التطبيق. js.

08:26.150 --> 08:28.560
والآن نحن بحاجة لإرسال طلب آخر.

08:28.560 --> 08:31.150
وباستخدام المتصفح ، لا يمكننا فعل ذلك

08:31.150 --> 08:34.260
، لكن يمكننا استخدام أداة لذلك ، Postman.

08:34.260 --> 08:35.600
يمكنك ببساطة البحث عنه

08:35.600 --> 08:38.160
ثم تثبيت تطبيق Postman على نظامك.

08:38.160 --> 08:39.283
إنه مجاني للاستخدام.

08:40.440 --> 08:41.570
بمجرد تثبيته ، يمكنك

08:41.570 --> 08:43.390
بدء تشغيله وسترى شاشة تبدو

08:43.390 --> 08:44.440
كالتالي.

08:44.440 --> 08:46.460
إذا رأيت تراكبًا شكليًا ، فيمكنك

08:46.460 --> 08:48.010
ببساطة إغلاقه.

08:48.010 --> 08:50.240
وهنا يمكنك الآن إنشاء طلب جديد من خلال

08:50.240 --> 08:51.740
النقر فوق ذلك بالإضافة

08:51.740 --> 08:53.040
إلى اختيار نوع الطلب

08:53.040 --> 08:55.100
، وفي هذه الحالة ، طلب نشر ، وإدخال

08:55.100 --> 08:56.450
عنوان URL.

08:56.450 --> 08:58.820
هنا localhost 3000 ، 3000

08:58.820 --> 09:01.660
لأنه المنفذ الذي اخترته هنا.

09:01.660 --> 09:03.100
وبعد ذلك نحتاج إلى

09:03.100 --> 09:06.320
إرسال الطلب لخفض todos لا شيء.

09:06.320 --> 09:10.000
حتى هنا لخفض todos أي شيء مائل.

09:10.000 --> 09:12.120
نريد إرفاق جسم بالطلب ، ويجب

09:12.120 --> 09:15.440
أن يكون ذلك هيئة خام JSON هنا لإرسال بعض

09:15.440 --> 09:17.010
بيانات JSON.

09:17.010 --> 09:19.480
والآن ماذا نريد أن نرسل هنا؟

09:19.480 --> 09:21.840
حسنًا ، ما نستخرجه في وظيفة البرامج الوسيطة

09:21.840 --> 09:22.880
، لذلك في هذه الحالة

09:22.880 --> 09:24.570
، يجب أن يكون لدينا خاصية نص

09:24.570 --> 09:27.410
كجزء من بيانات JSON التي نرسلها.

09:27.410 --> 09:29.610
لذا هنا ، دعنا نضيف نصًا كاسم ثم

09:29.610 --> 09:31.070
أي نص من اختيارك ، مثل

09:31.070 --> 09:33.230
إنهاء الدورة التدريبية.

09:33.230 --> 09:36.960
وإذا نقرت الآن على إرسال ، فسيتم إرسال الطلب ، وهنا

09:36.960 --> 09:38.990
الرد ، ويبدو هذا جيدًا.

09:38.990 --> 09:40.670
لقد حصلنا على إنشاء ما يجب القيام به مرة أخرى.

09:40.670 --> 09:43.600
نرى المعرف الذي تم إنشاؤه والنص.

09:43.600 --> 09:45.870
لذا من الواضح أن خلفيتنا تعمل هنا.

09:45.870 --> 09:47.690
وكتبناها كلها باستخدام TypeScript

09:47.690 --> 09:49.880
، لكننا نخدمها على أنها JavaScript عادية.

09:49.880 --> 09:51.183
هذه هي الحيلة بأكملها.
