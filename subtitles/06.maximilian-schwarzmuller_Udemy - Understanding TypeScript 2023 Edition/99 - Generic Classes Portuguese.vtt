WEBVTT

00:02.270 --> 00:04.390
Instrutor: Muito bem, já chega de funções genéricas.

00:04.390 --> 00:06.490
Sempre os utilizaremos durante todo este

00:06.490 --> 00:08.150
curso, todo o projeto do curso.

00:08.150 --> 00:10.390
Portanto, isso deve estar ficando cada vez mais claro,

00:10.390 --> 00:11.890
quanto mais trabalhamos com ele.

00:11.890 --> 00:14.823
A idéia geral, espera-se, já esteja clara neste momento.

00:15.660 --> 00:18.490
Mas as funções genéricas não são tudo que podemos usar,

00:18.490 --> 00:20.550
também temos classes genéricas e, portanto,

00:20.550 --> 00:21.560
vamos ver como criar

00:21.560 --> 00:23.740
uma classe tão genérica e por que poderíamos

00:23.740 --> 00:25.170
fazer isso, por que isso poderia

00:25.170 --> 00:27.760
ser útil para nós.

00:27.760 --> 00:31.950
Poderíamos estar criando uma classe de armazenagem aqui.

00:31.950 --> 00:36.060
Uma classe, digamos, que tem dados de propriedade privada.

00:36.060 --> 00:38.850
que, no final, conterá uma série de dados.

00:38.850 --> 00:40.940
Depois tem um método addItem, que

00:40.940 --> 00:44.200
leva nosso item e que deve ser adicionado aos dados

00:44.200 --> 00:45.763
com push, digamos.

00:48.570 --> 00:50.830
E temos um método removeItem, que leva

00:50.830 --> 00:52.173
nosso item, onde poderíamos

00:53.010 --> 00:57.740
dizer isto. dados. emenda e, em seguida,

00:57.740 --> 01:01.730
só precisamos obter o indexOff(item) aqui e emendar

01:01.730 --> 01:02.910
um elemento.

01:02.910 --> 01:06.030
É assim que podemos remover um elemento de uma matriz.

01:06.030 --> 01:07.873
E, é claro, obtenhaItems, onde retornar,

01:09.750 --> 01:13.120
digamos, uma cópia disto. dados, assim com o operador de

01:13.120 --> 01:15.770
propagação de que você tomou conhecimento.

01:16.610 --> 01:17.443
Agora podemos fazer

01:17.443 --> 01:19.450
isso e estamos recebendo um monte de erros aqui.

01:19.450 --> 01:20.500
Estamos recebendo um monte

01:20.500 --> 01:23.900
de erros, agora por um, porque o nome Armazenamento é um nome reservado, então vamos

01:23.900 --> 01:25.230
nomeá-lo Datastorage.

01:25.230 --> 01:26.620
Isso é fácil de se livrar.

01:26.620 --> 01:27.920
Agora também recebemos um erro

01:27.920 --> 01:29.400
aqui porque não estamos dizendo nada

01:29.400 --> 01:30.880
sobre o tipo de dados que estamos armazenando,

01:30.880 --> 01:32.960
e que tipo de item tem aqui.

01:32.960 --> 01:35.870
E é exatamente aí que podemos transformar isso em uma classe genérica,

01:35.870 --> 01:38.860
porque você pode não se importar com o tipo de dados.

01:38.860 --> 01:40.880
Queremos ter certeza de que são dados uniformes,

01:40.880 --> 01:42.410
por isso, ou são apenas cordas,

01:42.410 --> 01:44.830
ou apenas números, ou apenas objetos.

01:44.830 --> 01:47.550
Mas fora isso, eu não me importo.

01:47.550 --> 01:50.820
Portanto, aqui poderíamos transformar isto em classe genérica,

01:50.820 --> 01:53.300
adicionando colchetes angulares após o nome da

01:53.300 --> 01:56.330
classe e depois novamente T, U, o que você quiser usar como

01:56.330 --> 02:00.110
um identificador, e adicionar isto aqui como um tipo genérico.

02:00.110 --> 02:01.083
Agora aqui podemos

02:01.083 --> 02:04.490
dizer que este é um conjunto de dados do tipo T, portanto, ele

02:04.490 --> 02:07.413
armazena dados desse tipo genérico nele.

02:07.413 --> 02:09.670
Portanto, aqui adicionamos tais

02:09.670 --> 02:12.400
dados, e tentamos removê-los aqui.

02:12.400 --> 02:15.140
E, portanto, aqui se deduz corretamente que os

02:15.140 --> 02:18.490
itens são devolvidos para uma série de tipos genéricos.

02:18.490 --> 02:20.860
E agora podemos criar diferentes tipos

02:20.860 --> 02:24.690
de armazenamento, podemos ter nosso sting ou nosso textStorage

02:24.690 --> 02:29.500
aqui, chamando o novo DataStorage, definindo esse tipo genérico para digitar

02:29.500 --> 02:31.250
string aqui.

02:31.250 --> 02:33.070
E então aqui no textStorage, eu posso

02:33.070 --> 02:34.340
chamar addItem, e se eu tentar

02:34.340 --> 02:36.410
adicionar um número eu recebo um erro porque

02:36.410 --> 02:37.513
eu estou dizendo que este

02:37.513 --> 02:40.800
será um DataStorage que só armazena picadas.

02:40.800 --> 02:45.800
Assim, eu posso realmente armazenar Max aqui, e talvez também armazenar Manu,

02:46.830 --> 02:51.450
e depois chamar textStorage. removeItem('Max') e depois

02:51.450 --> 02:55.073
console. log. textStorage. getItems.

02:56.520 --> 02:58.870
E tudo isso deve funcionar se salvarmos isso

02:58.870 --> 03:00.300
porque é um tipo genérico e,

03:00.300 --> 03:03.103
de fato, no final, temos apenas o Manu lá dentro.

03:04.400 --> 03:08.240
Portanto, esta seria uma simples classe genérica que podemos criar.

03:08.240 --> 03:10.500
Agora, por que construiríamos uma classe tão genérica?

03:10.500 --> 03:11.770
Bem, como eu disse, porque

03:11.770 --> 03:14.220
talvez não queiramos apenas armazenar textos, talvez

03:14.220 --> 03:17.110
eu também queira armazenar alguns números em um armazenamento

03:17.110 --> 03:18.950
de dados diferente.

03:18.950 --> 03:21.510
Assim, eu poderia criar tal DataStorage, e a configuração

03:21.510 --> 03:23.810
deste para número garante que agora só podemos

03:23.810 --> 03:26.250
adicionar números a esse armazenamento.

03:26.250 --> 03:28.330
Naturalmente, poderíamos também criar um depósito onde

03:28.330 --> 03:30.520
permitiríamos ambos, utilizando um tipo de união.

03:30.520 --> 03:32.550
Portanto, temos total flexibilidade

03:32.550 --> 03:36.470
ali, mas damos algumas informações extras, o que torna

03:36.470 --> 03:38.490
esta classe flexível e ainda

03:38.490 --> 03:41.450
fortemente digitada.

03:41.450 --> 03:43.470
Assim como tivemos com as funções.

03:43.470 --> 03:46.910
Suporte de tipos realmente flexíveis e ainda perfeitos.

03:46.910 --> 03:49.900
Essa é toda a idéia por trás dos tipos genéricos.

03:49.900 --> 03:52.680
Portanto, aqui podemos fazer isso com a classe DataStorage

03:52.680 --> 03:53.750
armazenando cordas,

03:53.750 --> 03:55.130
ou armazenando números, ou

03:55.130 --> 03:56.513
o que quisermos.

03:57.790 --> 04:01.300
Porém, teremos um problema com nossa classe DataStorage.

04:01.300 --> 04:04.880
Digamos que aqui eu tenho meu armazenamento de objetos,

04:04.880 --> 04:07.090
agora posso criar um novo DataStorage

04:07.090 --> 04:10.490
e dizer lá dentro que quero armazenar objetos, certo,

04:10.490 --> 04:12.270
quero armazenar objetos e,

04:12.270 --> 04:17.270
claro, podemos ir ao armazenamento de objetos e adicionar um item.

04:17.300 --> 04:20.460
Digamos que um objeto que eu tenho nome Max está ali.

04:20.460 --> 04:22.920
Vamos também guardar outro objeto,

04:22.920 --> 04:24.760
onde eu guardo o Manu.

04:24.760 --> 04:26.770
Então, digamos que estamos fazendo

04:26.770 --> 04:28.310
algumas coisas em nosso código

04:28.310 --> 04:29.740
e, em um momento posterior

04:29.740 --> 04:34.100
aqui, eu quero remover o item, quero remover o item com nome: 'Manu' aqui.

04:34.100 --> 04:37.863
E então, eu quero consolar. log. objStorage. getItems.

04:39.450 --> 04:40.550
Assim.

04:40.550 --> 04:41.883
Se salvarmos isso, vemos

04:42.920 --> 04:45.840
que temos um objeto lá dentro que é o Max.

04:45.840 --> 04:47.470
Portanto, isso parece bem certo.

04:47.470 --> 04:49.140
Agora, não é realmente bom.

04:49.140 --> 04:52.490
Digamos aqui, eu quero remover o Max agora, então agora

04:52.490 --> 04:55.740
devemos ter o Manu no armazenamento de dados.

04:55.740 --> 04:59.653
Portanto, se eu recarregar, um poço, ainda é o Max.

05:00.550 --> 05:03.660
Agora o problema é que estamos trabalhando com objetos aqui,

05:03.660 --> 05:07.350
como você sabe, objetos em JavaScript são tipos de referência.

05:07.350 --> 05:09.440
Agora, anexe para encontrar um recurso adicional,

05:09.440 --> 05:11.460
que lhe permita mergulhar em referência.

05:11.460 --> 05:12.730
Enquanto valores primitivos,

05:12.730 --> 05:14.650
aqui presumo que você conheça a diferença

05:14.650 --> 05:16.970
porque é uma coisa central do JavaScript, totalmente

05:16.970 --> 05:19.060
sem relação com o datilografia.

05:19.060 --> 05:20.600
Aqui o problema é que, da forma

05:20.600 --> 05:22.300
como nossa classe é construída

05:22.300 --> 05:26.243
com esta lógica sobre como os dados são removidos e identificados, não estamos

05:27.080 --> 05:29.580
realmente fazendo um bom trabalho quando trabalhamos

05:29.580 --> 05:32.200
com valores não-primitivos.

05:32.200 --> 05:35.130
Portanto, quando trabalhamos com objetos ou matrizes,

05:35.130 --> 05:37.840
porque indexOf, se passarmos em um objeto aqui, ele não

05:37.840 --> 05:40.910
funcionará porque tecnicamente este é um objeto novo.

05:40.910 --> 05:43.800
Pode parecer com este, mas não funciona porque tecnicamente

05:43.800 --> 05:46.520
este é um objeto novo na memória e tem um endereço

05:46.520 --> 05:48.290
diferente.

05:48.290 --> 05:52.110
E de fato aqui, o JavaScript procurará o endereço e basicamente

05:52.110 --> 05:54.930
não o encontrará, então o que ele então faz

05:54.930 --> 05:58.453
é remover o último elemento da matriz aqui, pois este

05:59.510 --> 06:01.473
no final retorna -1.

06:02.419 --> 06:06.070
IndexOf retorna -1 mesmo que não encontre nada.

06:06.070 --> 06:07.990
O que significa que começa no final da matriz,

06:07.990 --> 06:09.770
que é um comportamento Javascript normal

06:09.770 --> 06:11.921
e remove o último elemento da matriz.

06:11.921 --> 06:14.190
É por isso que funcionou para Manu, não funcionou

06:14.190 --> 06:16.810
realmente acidentalmente, mas por que não funciona

06:16.810 --> 06:19.880
para Max, estamos sempre removendo o último elemento da

06:19.880 --> 06:21.760
matriz por enquanto, já que não podemos

06:21.760 --> 06:23.670
identificá-lo.

06:23.670 --> 06:25.890
Agora, um trabalho para ao menos consertar

06:25.890 --> 06:29.140
é verificar se encontramos nosso item, para que

06:29.140 --> 06:32.260
possamos verificar se este código aqui, se é igual

06:32.260 --> 06:36.260
a -1, o que significa que não o encontramos.

06:36.260 --> 06:37.360
Então podemos retornar

06:37.360 --> 06:40.780
e ter certeza de não remover acidentalmente o item errado.

06:40.780 --> 06:42.900
Mas é claro que agora acabamos de consertar essa

06:42.900 --> 06:44.850
barra, mas ainda não temos este estado interior

06:44.850 --> 06:46.580
onde ela funcionaria com objetos.

06:46.580 --> 06:48.890
Bem, a única maneira de trabalhar com objetos,

06:48.890 --> 06:51.740
é se passarmos exatamente o mesmo objeto novamente.

06:51.740 --> 06:55.700
Portanto, aqui se eu tivesse meu objeto máximo armazenado em uma constante,

06:55.700 --> 06:58.840
como esta, e aqui eu passo o objeto máximo.

06:58.840 --> 07:02.050
E eu faço o mesmo aqui, então eu estou realmente usando o mesmo,

07:02.050 --> 07:05.330
o mesmo objeto, exatamente o mesmo objeto em memória, e portanto,

07:05.330 --> 07:06.540
agora funcionaria.

07:06.540 --> 07:08.930
Esta seria a única maneira de fazer isto funcionar.

07:08.930 --> 07:12.340
Portanto, aqui, a melhor idéia poderia ser garantir

07:12.340 --> 07:16.150
que isto realmente só funcione com valores primitivos.

07:16.150 --> 07:20.100
Assim, poderíamos dizer que o T estende o fio, o número,

07:20.100 --> 07:24.010
talvez todos os booleanos acrescentem.

07:24.010 --> 07:25.990
Portanto, agora basicamente dizemos que o DataStorage

07:25.990 --> 07:27.920
só deve funcionar com estes tipos.

07:27.920 --> 07:30.470
Portanto, os objetos não são mais permitidos.

07:30.470 --> 07:32.500
Isto poderia ser melhor aqui porque, precisaríamos

07:32.500 --> 07:35.220
de um DataStorage mais especializado, que então provavelmente

07:35.220 --> 07:40.080
só funcionaria com objetos por sua vez, e não com valores primitivos.

07:40.080 --> 07:42.430
Para afinar nossa lógica de recuperação aqui,

07:42.430 --> 07:44.800
para talvez verificar se há alguma iD no item que

07:44.800 --> 07:45.880
deve ser removido.

07:45.880 --> 07:46.970
A forma como funciona aqui,

07:46.970 --> 07:48.910
realmente só funciona para tipos primitivos,

07:48.910 --> 07:52.320
portanto, estabelecer tal restrição é definitivamente uma boa idéia.

07:52.320 --> 07:55.610
E com isso, se nós o salvamos, depois de comentarmos isto, é claro

07:55.610 --> 07:57.253
que funciona novamente.

07:58.810 --> 08:00.540
Agora, é desnecessário dizer,

08:00.540 --> 08:02.620
esperemos, que você possa ter mais de um

08:02.620 --> 08:04.310
tipo genérico aqui também.

08:04.310 --> 08:05.910
Você não está limitado a um tipo

08:05.910 --> 08:07.600
quando você trabalha com aulas.

08:07.600 --> 08:09.610
E você também pode ter métodos, que

08:09.610 --> 08:13.080
têm seus próprios tipos genéricos em vez de classes.

08:13.080 --> 08:16.630
Assim, você poderia introduzir novos tipos genéricos nos métodos de classe,

08:16.630 --> 08:18.010
se você tiver algum tipo genérico,

08:18.010 --> 08:19.750
que só é necessário em um determinado

08:19.750 --> 08:21.580
método, e não em toda a classe.

08:21.580 --> 08:23.000
Portanto, você é realmente flexível lá.

08:23.000 --> 08:25.570
Você pode usar restrições em qualquer

08:25.570 --> 08:28.100
lugar e em geral, os tipos genéricos

08:28.100 --> 08:30.240
estão lá para facilitar sua vida

08:30.240 --> 08:33.900
e para lhe dar aquela combinação perfeita de total

08:33.900 --> 08:36.010
flexibilidade.

08:36.010 --> 08:39.310
Podemos usar qualquer valor primitivo que você queira aqui e

08:39.310 --> 08:40.900
digitar segurança, porque sabemos

08:40.900 --> 08:42.820
perfeitamente o que está armazenado

08:42.820 --> 08:44.710
neste DataStorage e o que está armazenado

08:44.710 --> 08:46.770
neste DataStorage.

08:46.770 --> 08:50.660
Portanto, esta combinação é a coisa incrível que os tipos

08:50.660 --> 08:52.283
genéricos nos dão.
