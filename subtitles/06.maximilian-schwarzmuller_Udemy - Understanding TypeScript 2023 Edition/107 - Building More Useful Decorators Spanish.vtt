WEBVTT

00:02.480 --> 00:06.780
Hombre: Ahora, con los conocimientos sobre las funciones de fábrica, o decoradores

00:06.780 --> 00:10.523
de fábrica, podemos hacer cosas bastante interesantes.

00:11.570 --> 00:16.240
Podríamos intercambiar una nueva fábrica de decoradores con la plantilla,

00:16.240 --> 00:17.693
por ejemplo.

00:19.400 --> 00:21.590
Y aquí, espero obtener una plantilla,

00:21.590 --> 00:23.780
que debería ser alguna cadena.

00:23.780 --> 00:28.780
Y un hookId, que también debe ser una cadena.

00:28.870 --> 00:32.050
Entonces aquí, devuelvo mi función anónima, que

00:32.050 --> 00:34.800
es el decorador real, como has aprendido.

00:34.800 --> 00:37.440
Porque, de nuevo, tengo una fábrica de decorados.

00:37.440 --> 00:40.570
Y ahí, quiero renderizar alguna plantilla, que

00:40.570 --> 00:42.530
debería ser algún código HTML,

00:42.530 --> 00:46.590
en algún lugar del dom, donde encuentro este hookId.

00:46.590 --> 00:49.160
Así que ahora podemos ir al índice. html y añadir un lugar así

00:49.160 --> 00:51.250
para que podamos ver que esto funciona.

00:51.250 --> 00:54.483
Podemos añadir un div aquí, con un id de app, tal vez.

00:55.430 --> 00:59.560
Y luego en app. ts, en lugar de logger, añado

00:59.560 --> 01:01.357
WithTemplate.

01:02.570 --> 01:05.130
Vamos a pasar una cadena vacía como primer argumento por ahora,

01:05.130 --> 01:06.810
y app como segundo argumento.

01:06.810 --> 01:09.313
Así que, este ID que asigné al div aquí.

01:10.170 --> 01:12.400
Y ahora dentro de esa función interna está

01:12.400 --> 01:13.830
nuestro decorador real.

01:13.830 --> 01:16.540
Dentro de esta función decoradora,

01:16.540 --> 01:19.500
quiero llegar al elemento.

01:19.500 --> 01:24.500
Al elemento gancho con el documento. getElementById.

01:25.662 --> 01:29.390
Para el ganchoId que estamos recibiendo aquí como un argumento.

01:29.390 --> 01:33.480
Y si HookEl es una cosa que existe, entonces quiero acceder

01:34.330 --> 01:37.960
a su innerHTML, y establecer esto igual a la plantilla,

01:37.960 --> 01:39.920
digamos.

01:39.920 --> 01:41.440
Una configuración muy simple,

01:41.440 --> 01:43.640
por supuesto, pero esto debería servir.

01:43.640 --> 01:45.460
Ahora, no me interesa el constructor.

01:45.460 --> 01:48.110
Y para decirle a typescript que no me interesa aquí, puedo

01:48.110 --> 01:50.370
añadir un guión bajo como nombre, que básicamente

01:50.370 --> 01:52.007
le indica a typescript, "Sí, sé que

01:52.007 --> 01:54.580
tengo este argumento, pero no lo necesito.

01:54.580 --> 01:56.170
Sin embargo, tengo que especificarlo.

01:56.170 --> 01:58.920
Así que, con este subrayado, te digo que soy consciente

01:58.920 --> 02:00.850
de ello, pero que no lo utilizaré. Porque, todo lo que quiero hacer por ahora,

02:00.850 --> 02:02.300
es que quiero rendir este año.

02:02.300 --> 02:04.033
Así que ahora cuando añadimos

02:05.580 --> 02:07.750
WithTemplate aquí, aquí podríamos añadir

02:07.750 --> 02:10.400
una etiqueta h1, Mi objeto persona así.

02:10.400 --> 02:14.570
Además, ciérralo.

02:14.570 --> 02:15.653
Y si ahora guardamos eso, se compila sin errores.

02:19.130 --> 02:22.380
Y, efectivamente, aquí se ve que esto se ha representado en la pantalla.

02:22.380 --> 02:26.350
Y esto, con suerte, te muestra el poder

02:26.350 --> 02:29.720
que tienes con los decoradores.

02:29.720 --> 02:31.720
Puedes construir decoradores realmente avanzados

02:31.720 --> 02:34.780
como este, que de repente hace algo de magia entre bastidores.

02:34.780 --> 02:38.500
Y a eso me refiero con la metaprogramación.

02:38.500 --> 02:41.260
Aquí añadimos algo de lógica, que podríamos exponer

02:41.260 --> 02:43.930
si fuera una biblioteca de terceros que compartiéramos

02:43.930 --> 02:46.190
con otros usuarios.

02:46.190 --> 02:47.890
Podríamos exponer esto como parte

02:47.890 --> 02:50.350
de la librería, y cualquiera que use nuestra librería

02:50.350 --> 02:52.630
puede importar esta función decoradora y añadirla

02:52.630 --> 02:54.910
a una clase para que, de repente, se renderice

02:54.910 --> 02:57.408
mágicamente algún contenido.

02:57.408 --> 03:00.500
Y, por supuesto, no estás limitado a hacer eso.

03:00.500 --> 03:02.980
Si quieres que salga el nombre que forma

03:02.980 --> 03:05.340
parte de la clase cuando se instancie,

03:05.340 --> 03:07.850
también puedes hacerlo.

03:07.850 --> 03:09.570
Al fin y al cabo, aquí tenemos nuestro constructor: Function.

03:09.570 --> 03:12.427
Ahora lo que podemos hacer con eso es que podemos crear una

03:14.190 --> 03:16.010
nueva persona aquí, llamando a nuestro

03:16.010 --> 03:18.660
constructor, porque ese es nuestro constructor: Función

03:18.660 --> 03:20.380
aquí, después de todo.

03:20.380 --> 03:23.820
Permítanme convertir esto en cualquiera, por lo que el typescript

03:23.820 --> 03:26.570
permite esto y no piensa que es una función normal.

03:26.570 --> 03:29.240
Y entonces podríamos ir a nuestro elemento

03:29.240 --> 03:31.880
gancho, y buscar una etiqueta h1, que, por

03:31.880 --> 03:35.160
supuesto, en la práctica, no siempre tendrá.

03:35.160 --> 03:36.070
Pero a efectos de demostración,

03:36.070 --> 03:37.330
supongo que siempre tendremos uno aquí.

03:37.330 --> 03:39.820
Ups, y siempre debería cerrar la etiqueta

03:39.820 --> 03:42.330
h1 ahí abajo ahora que lo veo.

03:42.330 --> 03:43.850
Y luego aquí, con un signo de exclamación,

03:43.850 --> 03:46.750
de nuevo asumiendo que siempre encontramos un elemento h1,

03:46.750 --> 03:49.900
podemos establecer un textContent igual a p. nombre.

03:49.900 --> 03:53.660
Y si hago eso y guardo esto,

03:53.660 --> 03:56.010
ahora me sale el nombre, que es

03:56.010 --> 03:59.400
parte del objeto aquí en la plantilla.

03:59.400 --> 04:01.540
Así que esto es algo que puedes hacer, y por supuesto

04:01.540 --> 04:03.420
puedes escribir decoradores mucho más

04:03.420 --> 04:06.010
elaborados de lo que yo estoy haciendo aquí.

04:06.010 --> 04:07.840
Consideremos Angular, un framework muy

04:07.840 --> 04:09.550
popular que utiliza typescript.

04:09.550 --> 04:12.270
Utilizan decoradores, como este decorador

04:12.270 --> 04:15.740
de componentes, para permitirte pasar un objeto en

04:15.740 --> 04:18.420
el que especifiques cosas como la plantilla

04:18.420 --> 04:21.020
para el discomponente.

04:21.020 --> 04:21.930
Y el selector en el dom

04:21.930 --> 04:23.950
donde esta plantilla debe ser renderizada.

04:23.950 --> 04:25.760
Esto está relativamente cerca de lo que definimos aquí.

04:25.760 --> 04:28.170
Una plantilla, y luego un lugar en el que se debe renderizar.

04:28.170 --> 04:31.230
No hace falta decir que los decoradores de Angular

04:31.230 --> 04:33.760
son, por supuesto, mucho más avanzados y

04:33.760 --> 04:36.550
elaborados que nuestro decorador básico.

04:36.550 --> 04:38.740
Sin embargo, la idea central es la misma.

04:38.740 --> 04:41.660
Angular te da los decoradores aquí, para que puedas

04:41.660 --> 04:43.900
especificar algún código HTML, que

04:43.900 --> 04:46.700
puede ser conectado a tu clase de componente

04:46.700 --> 04:49.470
que será renderizado al dom cuando este componente

04:49.470 --> 04:51.760
sea renderizado.

04:51.760 --> 04:53.830
Ahora, en caso de que no sepas cómo funciona

04:53.830 --> 04:55.850
Angular, eso no es un problema.

04:55.850 --> 04:57.060
Sólo tienes que entender aquí,

04:57.060 --> 04:58.700
que funciona con clases y decoradores,

04:58.700 --> 05:01.300
y luego hace básicamente lo que hicimos aquí.

05:01.300 --> 05:03.600
Así que esa es otra cosa que puedes hacer con los decoradores,

05:03.600 --> 05:06.400
o como específicamente aquí, con las fábricas de decoradores.

05:06.400 --> 05:09.220
Porque eso nos permite pasar en ese conflicto

05:09.220 --> 05:12.210
extra que necesitamos aquí.

05:12.210 --> 05:13.610
Y a eso también me refería con la metaprogramación.

05:13.610 --> 05:16.590
Estamos creando cosas, estamos creando funciones de

05:16.590 --> 05:21.130
decoración, que se podría decir que tienen algún impacto en el usuario final.

05:21.130 --> 05:24.840
En el NP dual render o algo en la pantalla aquí.

05:24.840 --> 05:27.510
Pero lo hacemos con una herramienta que exponemos

05:27.510 --> 05:29.090
a otros desarrolladores.

05:29.090 --> 05:31.370
Porque este decorador es una herramienta, que

05:31.370 --> 05:33.970
otros desarrolladores tienen que utilizar añadiéndolo

05:33.970 --> 05:36.000
a una clase en este ejemplo.

05:36.000 --> 05:38.580
De lo contrario, esto no haría nada.

05:38.580 --> 05:40.300
Así que proporcionamos utilidades

05:40.300 --> 05:43.490
adicionales a los desarrolladores, que los otros desarrolladores

05:43.490 --> 05:46.590
pueden utilizar para, por ejemplo, representar convenientemente

05:46.590 --> 05:49.050
algo en la pantalla para una clase que da.

05:49.050 --> 05:50.590
Eso es lo mismo que hace Angular aquí,

05:50.590 --> 05:52.940
de una manera más avanzada, y es algo para lo que los graduados

05:52.940 --> 05:54.220
son perfectos.
