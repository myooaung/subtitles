WEBVTT

00:02.220 --> 00:04.080
-: Agora os tipos de interseção são uma coisa.

00:04.080 --> 00:05.470
Usado com mais freqüência, no entanto,

00:05.470 --> 00:07.800
é outra característica, e que seria o tipo guardas, uma

00:07.800 --> 00:10.590
característica que na verdade já usamos um pouco.

00:10.590 --> 00:12.400
Vamos usar o Combinável aqui.

00:12.400 --> 00:15.560
É um tipo de sindicato onde temos um cordel ou um número, e os

00:15.560 --> 00:18.020
guardas de tipo nos ajudam com os tipos de sindicatos

00:18.020 --> 00:21.050
porque, embora seja bom ter a flexibilidade, muitas vezes

00:21.050 --> 00:23.610
você precisa saber qual tipo exato você está recebendo

00:23.610 --> 00:26.200
agora em tempo de execução.

00:26.200 --> 00:28.630
Digamos que aqui temos nossa função de adição

00:28.630 --> 00:33.070
onde recebo um número que precisa ser do tipo Combinável, portanto, um fio

00:33.070 --> 00:35.100
ou um número, e, portanto, vou realmente

00:35.100 --> 00:37.990
nomeá-lo um aqui, e então tenho outro argumento que

00:37.990 --> 00:39.520
também precisa ser Combinável,

00:39.520 --> 00:42.110
portanto, um número ou um fio, e então quero

00:42.110 --> 00:44.640
retornar um mais b.

00:44.640 --> 00:47.020
Agora vimos no passado que isto não funciona.

00:47.020 --> 00:51.320
Em vez disso, precisamos agora verificar se o tipo

00:51.320 --> 00:53.740
a é igual a string, por exemplo,

00:55.660 --> 00:59.780
ou se o tipo b é igual a string, e se for esse o caso,

00:59.780 --> 01:04.681
devolvemos a.

01:04.681 --> 01:04.681
toString plus b. toString.

01:04.681 --> 01:06.750
Portanto, concatenamos estas duas cordas;

01:06.750 --> 01:09.570
caso contrário, se não fizermos esta afirmação, retornamos

01:09.570 --> 01:11.510
a mais b como esta porque agora o grupo

01:11.510 --> 01:13.270
de tipos conhece a e b tem que ser

01:13.270 --> 01:15.620
números aqui, porque se pelo menos um deles

01:15.620 --> 01:19.710
não fosse um número, estaríamos aqui dentro.

01:19.710 --> 01:22.890
Agora isto aqui é chamado de tipo guarda porque

01:22.890 --> 01:25.280
nos permite utilizar a flexibilidade

01:25.280 --> 01:27.980
que os tipos de união nos dão e ainda garantir

01:27.980 --> 01:32.550
que nosso código funcione corretamente em tempo de execução, porque

01:32.550 --> 01:34.830
muitas vezes você tem funções que

01:34.830 --> 01:38.160
funcionam com dois ou três tipos diferentes, e,

01:38.160 --> 01:40.570
portanto, um tipo de união é perfeito,

01:40.570 --> 01:43.890
mas o que exatamente você faz com os valores então

01:43.890 --> 01:46.940
depende do tipo, como aqui, onde ou concatenamos

01:46.940 --> 01:51.670
ou adicionamos matematicamente.

01:51.670 --> 01:55.310
Agora, este é um tipo de guarda usando o tipo de.

01:55.310 --> 01:58.970
Você também pode escrever outros tipos de guardas tipo.

01:58.970 --> 02:00.880
e para isso, deixe-me voltar aos meus tipos de

02:00.880 --> 02:03.050
administradores e funcionários que eu tenho lá em cima,

02:03.050 --> 02:04.950
onde eu tenho privilégios sobre o administrador

02:04.950 --> 02:06.943
e começoData sobre o funcionário.

02:08.590 --> 02:11.810
Agora temos o ElevatedEmployee que combina ambos.

02:11.810 --> 02:14.980
Agora também crie outro tipo aqui.

02:14.980 --> 02:16.330
Esse é o Funcionário Desconhecido.

02:18.000 --> 02:21.940
Isto é apenas um funcionário ou um administrador.

02:21.940 --> 02:25.540
Portanto, temos um tipo de união usando meus dois tipos de objetos personalizados.

02:25.540 --> 02:28.173
Tão desconhecido funcionário é um dos dois.

02:29.230 --> 02:32.003
Agora podemos ter uma função, imprimirEmployeeInformation,

02:34.620 --> 02:36.420
onde eu preciso passar em um funcionário,

02:36.420 --> 02:39.660
e que deve ser do tipo desconhecido funcionário.

02:39.660 --> 02:41.610
Agora aqui, eu quero consolar. registrar várias

02:41.610 --> 02:44.030
informações sobre o funcionário.

02:44.030 --> 02:47.210
Por exemplo, o nome do emp. nome, que funcionará sem

02:47.210 --> 02:48.580
problemas porque ambos

02:48.580 --> 02:52.140
os tipos de funcionários têm um nome de propriedade.

02:52.140 --> 02:56.730
Mas depois também quero consolar. logar os privilégios acessando

02:58.160 --> 03:01.520
o emp. privilégios, e aqui eu já

03:01.520 --> 03:04.350
tenho problemas no autocompletar porque

03:04.350 --> 03:07.100
o TypeScript não pode confirmar que isto

03:07.100 --> 03:09.890
sempre existe no argumento, porque o Desconhecido

03:09.890 --> 03:13.540
pode ser um funcionário normal que não tem uma propriedade

03:13.540 --> 03:16.260
de privilégios.

03:16.260 --> 03:18.330
Somente o administrador tem isso.

03:18.330 --> 03:20.100
Por isso, agora precisamos de um tipo de guarda aqui.

03:20.100 --> 03:24.530
O problema só é com o tipo de tipo, não vamos ganhar nada.

03:24.530 --> 03:26.830
Se verificarmos o tipo de funcionário, isso

03:26.830 --> 03:29.470
será apenas objeto no momento da execução.

03:29.470 --> 03:31.380
Mas isso não nos diz se ela possui

03:31.380 --> 03:32.940
ou não essa propriedade.

03:32.940 --> 03:34.960
Portanto, se eu mover o código neste se verificar,

03:34.960 --> 03:37.430
o TypeScript não é mais feliz do que antes, porque

03:37.430 --> 03:39.750
um objeto é, bem, apenas um objeto.

03:39.750 --> 03:41.920
Não nos diz nada sobre as propriedades.

03:41.920 --> 03:44.980
Não podemos verificar se é do tipo Empregado porque

03:44.980 --> 03:48.130
não é um tipo que o JavaScript conhece, e tenha em mente

03:48.130 --> 03:49.840
que esta verificação é feita

03:49.840 --> 03:52.560
em tempo de execução e usa JavaScript, de modo

03:52.560 --> 03:56.190
que só podemos comparar o tipo de tipo nos leva com os tipos

03:56.190 --> 03:58.010
que o JavaScript conhece, e isso

03:58.010 --> 04:01.920
seria objeto, string, número e booleano que está ligado, e nosso

04:01.920 --> 04:05.610
tipo personalizado não faz parte dele.

04:05.610 --> 04:07.950
Isso só existe no mundo TypeScript,

04:07.950 --> 04:11.020
não no mundo JavaScript compilado.

04:11.020 --> 04:13.990
Portanto, isto também não funciona.

04:13.990 --> 04:17.960
Agora, aqui, nosso trabalho é usar um controle diferente se for verificado.

04:17.960 --> 04:20.240
Sabemos que queremos ter acesso aos privilégios,

04:20.240 --> 04:25.240
por isso podemos verificar se os privilégios dos funcionários são uma coisa.

04:26.400 --> 04:28.560
O problema é que o TypeScript não nos

04:28.560 --> 04:30.690
permite acessar este imóvel, nem

04:30.690 --> 04:33.550
mesmo verificá-lo desta forma, mas há uma maneira

04:33.550 --> 04:36.200
diferente de verificá-lo.

04:36.200 --> 04:40.000
Podemos usar as palavras-chave que estão embutidas no JavaScript.

04:40.000 --> 04:43.120
Podemos verificar se os privilégios,

04:43.120 --> 04:46.690
agora escritos como um fio, estão em emp.

04:46.690 --> 04:49.130
Este é o código JavaScript que permite

04:49.130 --> 04:53.480
verificar se isto existe como propriedade no empregado, e se

04:53.480 --> 04:58.380
este for o caso, TypeScript detecta esta verificação aqui, e, portanto,

04:58.380 --> 05:01.200
nos permite acessar esta propriedade dentro

05:01.200 --> 05:04.543
disto se verificar aqui.

05:05.852 --> 05:08.380
E podemos repetir isso para o startDate,

05:08.380 --> 05:12.240
e, portanto, verificar se startDate é uma propriedade

05:12.240 --> 05:15.710
aqui, e podemos, portanto, também emitir isto neste

05:16.970 --> 05:18.730
se verificar.

05:18.730 --> 05:23.687
Portanto, agora com isso, se chamarmos printEmployeeInformation,

05:24.650 --> 05:28.363
e passarmos naquele funcionário que criamos, e1,

05:31.410 --> 05:34.860
você verá que este compilado sem erros e, de fato,

05:34.860 --> 05:37.430
produz os privilégios e, bem, também

05:37.430 --> 05:40.730
aqui os dados devem dizer apenas Data de Início

05:40.730 --> 05:42.530
aqui, é claro.

05:42.530 --> 05:45.820
Mas com isso, isso nos dá o resultado que esperaríamos.

05:45.820 --> 05:48.590
E por outro lado, se passarmos em um funcionário

05:48.590 --> 05:50.950
que não tenha todos esses campos, por exemplo,

05:50.950 --> 05:53.090
se criarmos um na mosca que só tenha um

05:53.090 --> 05:56.383
startDate mas sem privilégios, então há todo o trabalho e

05:57.850 --> 06:00.370
compilado sem erros, e simplesmente não imprimimos

06:00.370 --> 06:03.160
nada sobre os privilégios por causa disso se tivermos

06:03.160 --> 06:05.723
um cheque lá dentro.

06:07.650 --> 06:09.800
Ao trabalhar com classes, você

06:09.800 --> 06:13.070
também pode usar outro tipo de guarda tipo,

06:13.070 --> 06:16.520
e esse seria o exemplo de guarda tipo.

06:16.520 --> 06:21.460
Digamos que lá em baixo temos uma classe, Carro, e que tem um método

06:21.460 --> 06:23.800
de acionamento onde diz apenas

06:23.800 --> 06:26.523
console. condução de troncos,

06:28.480 --> 06:31.750
e temos outra classe, Truck, que também tem um

06:31.750 --> 06:34.623
método de condução, ou talvez você diga Conduzir

06:35.840 --> 06:38.280
um caminhão, mas temos que dizer o nome

06:38.280 --> 06:40.250
do método.

06:40.250 --> 06:43.980
E onde também temos um método de cargaCarga, onde temos

06:43.980 --> 06:46.570
uma quantidade, que é um número, e então

06:46.570 --> 06:49.040
aqui estou tendo apenas um código falso

06:49.040 --> 06:53.570
onde eu digo: "Carregando carga mais quantidade". Algo assim, oops, quantidade, algo assim.

06:53.570 --> 06:57.323
Portanto, agora temos duas classes, que, é claro, têm alguma semelhança,

06:58.170 --> 06:59.320
o método de acionamento,

06:59.320 --> 07:02.090
mas também têm uma diferença.

07:02.090 --> 07:03.890
Agora, novamente, podemos

07:03.890 --> 07:08.200
criar um tipo de sindicato aqui, Veículo, que é um carro

07:08.200 --> 07:13.030
ou um caminhão, e agora, digamos, criamos um novo veículo, v1,

07:13.030 --> 07:18.030
que é um carro novo, e outro, v2, que é um caminhão novo.

07:18.050 --> 07:21.873
Agora eu tenho uma função, usarVeículo, que apenas espera

07:23.890 --> 07:26.443
obter um veículo, que deve ser do tipo veículo,

07:27.700 --> 07:29.780
portanto, que deve ser deste tipo

07:29.780 --> 07:31.350
de união.

07:31.350 --> 07:34.203
Portanto, aqui temos um veículo, e agora, digamos, nosso

07:35.420 --> 07:37.490
objetivo aqui é fazer tudo o que podemos fazer

07:37.490 --> 07:40.040
com os veículos: dirigir e carregarCarga.

07:40.040 --> 07:43.400
Portanto, é claro, podemos chamar de veículo. dirigir porque isso sempre existe, mas para

07:43.400 --> 07:45.420
o veículo. CargaCarga, temos

07:45.420 --> 07:50.010
um problema porque só um caminhão tem isso.

07:50.010 --> 07:52.720
Um carro não o tem, então isto não vai funcionar.

07:52.720 --> 07:56.440
Agora podemos, é claro, verificar novamente se a cargaCargo

07:56.440 --> 07:59.513
está no veículo, e se for o caso, podemos usá-la.

08:00.760 --> 08:05.760
Pelo menos se eu consertar essa gralha aqui.

08:06.430 --> 08:09.480
Portanto, agora salvamos isso e depois chamamos

08:09.480 --> 08:13.230
de useVehicle e passamos em v1, e depois chamamos novamente

08:13.230 --> 08:17.400
com v2, e eu salvo tudo isso, ele compila, e funciona.

08:17.400 --> 08:21.680
Essa é uma maneira de fazer isso.

08:21.680 --> 08:23.340
Uma maneira alternativa, que

08:23.340 --> 08:26.580
pode ser um pouco mais elegante, pois também elimina o risco

08:26.580 --> 08:28.600
de você misturar-se nesta cadeia de

08:28.600 --> 08:31.920
propriedades aqui, é que você use a instância de.

08:31.920 --> 08:34.080
Podemos verificar se o veículo é um exemplo de caminhão.

08:34.080 --> 08:39.080
Se for esse o caso, sabemos que terá um método de cargaCarga.

08:39.360 --> 08:42.510
Uma instânciaof é um operador normal embutido

08:42.510 --> 08:45.230
no JavaScript de baunilha, portanto, este

08:45.230 --> 08:47.430
não é um código TypeScript.

08:47.430 --> 08:49.280
Assim como o tipo de JavaScript, este

08:49.280 --> 08:52.250
é parte do JavaScript e é executado em tempo de execução.

08:52.250 --> 08:54.290
O JavaScript não conhece o tipo de caminhão,

08:54.290 --> 08:56.780
mas conhece as funções de construtor, e as classes

08:56.780 --> 08:59.330
no final são apenas traduzidas para funções de construtor,

08:59.330 --> 09:01.490
e o TypeScript é então capaz de descobrir

09:01.490 --> 09:03.400
se o veículo foi criado com base na função

09:03.400 --> 09:06.580
de construtor do caminhão.

09:06.580 --> 09:10.290
Portanto, como as classes são compiladas para algo que

09:10.290 --> 09:11.970
o JavaScript entende, funções

09:11.970 --> 09:15.450
de construtor, ele é capaz de usar isso.

09:15.450 --> 09:17.210
Se estivéssemos usando uma interface

09:17.210 --> 09:20.390
aqui ao invés de uma classe e, portanto, claro, não poderíamos ter a

09:20.390 --> 09:21.223
implementação aqui,

09:21.223 --> 09:22.950
mas faremos isso quando criarmos um objeto

09:22.950 --> 09:25.130
com a notação literal do objeto, então não poderíamos

09:25.130 --> 09:27.300
usar a instânciaof porque as interfaces, como

09:27.300 --> 09:30.940
você aprendeu, não são compiladas para qualquer código JavaScript e, portanto,

09:30.940 --> 09:34.370
não podemos usá-las em tempo de execução.

09:34.370 --> 09:37.160
Para classes podemos fazer isso porque o JavaScript

09:37.160 --> 09:40.010
suporta classes e funções construtoras, e com a instânciaof,

09:40.010 --> 09:42.290
você pode então descobrir se algum objeto

09:42.290 --> 09:44.500
é baseado nessa classe.

09:44.500 --> 09:47.660
Se soubermos se é, então teremos uma função de cargaCarga.

09:47.660 --> 09:51.850
Portanto, estes são tipos de guardas.

09:51.850 --> 09:53.480
No final, tipo guardas

09:53.480 --> 09:55.890
é apenas um termo que descreve a idéia

09:55.890 --> 09:59.470
ou abordagem de verificar se uma determinada propriedade

09:59.470 --> 10:02.980
ou método existe antes de tentar utilizá-lo, ou se

10:02.980 --> 10:08.470
você pode fazer algo com o tipo antes de tentar utilizá-lo.

10:08.470 --> 10:10.220
Para objetos, isso pode ser feito

10:10.220 --> 10:15.113
com exemploof ou com in, para outros tipos, você pode usar tipoof e, portanto, agora

10:16.140 --> 10:19.780
você tem toda a flexibilidade para usar os tipos de união de flexibilidade

10:19.780 --> 10:22.280
que lhe dão e ainda escrever código que então

10:22.280 --> 10:25.090
faz uma coisa ou outra com base no tipo exato que

10:25.090 --> 10:29.050
você está recebendo em tempo de execução.
