WEBVTT

00:02.160 --> 00:03.740
Kursleiter: Welche Möglichkeiten haben

00:03.740 --> 00:06.440
wir also, wenn wir den Code in mehrere Dateien aufteilen wollen?

00:06.440 --> 00:10.720
Dafür gibt es eigentlich drei Möglichkeiten.

00:10.720 --> 00:12.680
Die erste Möglichkeit wäre, einfach mehrere

00:12.680 --> 00:16.110
Code-Dateien zu schreiben, mehrere TypeScript-Dateien.

00:16.110 --> 00:17.460
TypeScript kompiliert

00:17.460 --> 00:20.710
dann automatisch alle Codedateien im Quellverzeichnis

00:20.710 --> 00:23.020
und importiert die kompilierten Java-Script-Dateien

00:23.020 --> 00:25.000
manuell in HTML.

00:25.000 --> 00:26.220
Das ist eine Option, und

00:26.220 --> 00:28.970
für manche Projekte mag das genau richtig sein, aber

00:28.970 --> 00:31.780
Sie müssten all diese Importe manuell verwalten, was

00:31.780 --> 00:34.600
mühsam und fehleranfällig sein kann, und wenn Sie bestimmte

00:34.600 --> 00:36.980
TypeScript-Funktionen verwenden, geben Sie

00:36.980 --> 00:39.560
auch die Unterstützung für Typen auf, wenn ein Typ

00:39.560 --> 00:42.100
in Datei A definiert ist und Sie ihn in Datei B verwenden

00:42.100 --> 00:43.670
und TypeScript diese Verbindung

00:43.670 --> 00:46.030
nicht kennt.

00:46.030 --> 00:47.480
Aus diesem Grund ist dies keine

00:47.480 --> 00:49.290
gute Option für größere Projekte.

00:49.290 --> 00:52.500
Für größere Projekte haben wir zwei Hauptoptionen.

00:52.500 --> 00:55.470
Wir haben zum Beispiel Namespaces und Dateibündelung.

00:55.470 --> 00:59.410
Namespaces sind ein TypeScript-Feature, ein Syntax-Feature.

00:59.410 --> 01:03.430
Sie können Ihrem Code speziellen Code hinzufügen, um dieses Feature

01:03.430 --> 01:04.840
zu nutzen, und es ermöglicht

01:04.840 --> 01:08.650
Ihnen im Grunde, Code unter einem Namespace zu gruppieren und

01:08.650 --> 01:12.730
Namespaces in andere Dateien zu importieren.

01:12.730 --> 01:16.020
So können Sie zum Beispiel einen Namensraum pro Datei haben.

01:16.020 --> 01:18.790
Importieren Sie eine andere Datei in eine andere Datei

01:18.790 --> 01:21.930
und greifen Sie auf den Namensraum zu, der sich in einer anderen

01:21.930 --> 01:24.650
Datei aus der importierenden Datei befindet, und wir

01:24.650 --> 01:25.970
werden das in der Praxis sehen,

01:25.970 --> 01:28.030
falls das nicht ganz klar ist.

01:28.030 --> 01:30.020
TypeScript unterstützt nicht

01:30.020 --> 01:34.130
nur das, sondern bündelt auch die Dateien in einer Datei, so dass

01:34.130 --> 01:37.230
man am Ende Code in mehreren Dateien schreibt,

01:37.230 --> 01:39.560
die kompiliert werden, aber dann ineinander

01:39.560 --> 01:42.750
importiert werden, so dass man weniger Importe zu

01:42.750 --> 01:45.190
verwalten hat und nicht verschiedene

01:45.190 --> 01:46.950
Importe in einer HTML-Datei

01:46.950 --> 01:50.030
manuell verwalten muss.

01:50.030 --> 01:52.180
Eine Alternative zu Namespaces und wohl

01:52.180 --> 01:55.750
die wichtigere und modernere Alternative ist die Verwendung

01:55.750 --> 02:00.750
von ES6-Importen/Exporten, auch bekannt als ES6-Module, denn es hat sich herausgestellt,

02:01.870 --> 02:06.480
dass moderne Java-Skripte, völlig losgelöst von TypeScript, ebenfalls eine

02:06.480 --> 02:09.940
Lösung für dieses Problem haben, da man dieses Problem nicht

02:09.940 --> 02:11.440
nur in TypeScript-Projekten

02:11.440 --> 02:13.140
hat, sondern in jedem größeren

02:13.140 --> 02:15.850
Java-Skript-Projekt.

02:15.850 --> 02:18.200
Moderne Java-Skripte unterstützen standardmäßig

02:18.200 --> 02:21.150
Import- und Exportanweisungen, mit denen Sie angeben

02:21.150 --> 02:23.110
können, welche Datei von welcher

02:23.110 --> 02:24.910
anderen Datei abhängt, und dann

02:24.910 --> 02:27.920
haben Sie all diese einzelnen Dateien, aber Sie müssen

02:27.920 --> 02:30.560
die Importe nicht manuell verwalten, stattdessen

02:30.560 --> 02:33.770
tun das moderne Browser.

02:33.770 --> 02:36.020
Sie verstehen sie und laden automatisch Dateien herunter,

02:36.020 --> 02:38.800
von denen eine andere Datei abhängt, und führen sie aus.

02:38.800 --> 02:41.370
Sie verwenden dafür die Import/Export-Syntax, die

02:41.370 --> 02:43.470
auch von TypeScript unterstützt wird.

02:43.470 --> 02:46.870
Sie können es also ohne Probleme in TypeScript verwenden.

02:46.870 --> 02:48.700
Sie kompilieren pro Datei, aber Sie

02:48.700 --> 02:50.810
brauchen nur einen Skriptimport, weil,

02:50.810 --> 02:53.680
wie ich gerade erwähnt habe, moderne Browser wissen,

02:53.680 --> 02:56.350
wie sie dann alle anderen Abhängigkeiten holen können,

02:56.350 --> 02:58.570
und Sie werden das auch in Aktion in diesem

02:58.570 --> 03:00.710
Kernabschnitt hier sehen.

03:00.710 --> 03:02.320
Ein wichtiger Hinweis:

03:02.320 --> 03:03.830
Damit haben wir

03:03.830 --> 03:06.110
technisch gesehen immer

03:06.110 --> 03:09.140
noch mehrere Dateien, und obwohl

03:09.140 --> 03:19.460
wir die Importe, also die Skript-Importe, nicht manuell verwalten müssen, haben wir dadurch

03:19.460 --> 03:24.860
immer noch einige Nachteile, denn jede Datei, von

03:24.860 --> 03:30.840
der man abhängig ist, muss separat heruntergeladen werden,

03:30.840 --> 03:39.500
was mehr HTTP-Anfragen und so weiter bedeutet.

03:39.500 --> 03:41.100
Lassen Sie uns also diese beiden

03:41.100 --> 03:43.900
Ansätze in ihrer Grundform verwenden und sehen,

03:43.900 --> 03:45.870
wie wir unseren Code durch Aufteilung

03:45.870 --> 03:48.853
auf mehrere Dateien verbessern können.
