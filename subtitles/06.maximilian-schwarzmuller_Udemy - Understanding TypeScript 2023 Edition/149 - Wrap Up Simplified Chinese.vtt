WEBVTT

00:02.350 --> 00:04.720
- ：模块就这样｡ 

00:04.720 --> 00:14.550
现在, 使用模块是一个非常有用和重要的特性, 因为它允许您编写更易于维护和管理的代码｡

00:14.550 --> 00:14.550
把所有这些都放在一个文件里是一团糟,

00:16.360 --> 00:19.360
除了非常小的项目, 真的不是任何东西的选择｡

00:19.360 --> 00:24.710
使用名称空间或ES模块是一种更好的选择｡

00:24.710 --> 00:27.620
因为它确保每个文件本身相对较小,

00:27.620 --> 00:30.780
因此保持可管理性｡

00:30.780 --> 00:36.690
而且, 您最终得到了您想要的整个大型应用程序｡

00:36.690 --> 00:38.580
现在, 当谈到这两种方法（命名空间和ES模块）时,

00:38.580 --> 00:52.210
明确的建议是ES模块, 因为您可以获得额外的类型安全, 并确保每个文件都必须明确指定它所需要的内容｡

00:52.210 --> 00:56.280
对于命名空间, 如果一个文件导入了另一个文件也需要的东西,

00:56.280 --> 00:58.350
这就足够了｡

00:58.350 --> 00:59.970
这个的缺点是, 如果导入的那个文件被删除了,

00:59.970 --> 01:05.640
那么其他文件也会被破坏, 而你却没有注意到｡

01:05.640 --> 01:08.774
至少, 在你运行代码之前没有注意到｡ 

01:08.774 --> 01:11.340
因此, 请使用ES模块｡ 

01:11.340 --> 01:14.250
在较小的项目中使用命名空间, 或者如果由于某种原因不能使用ES模块,

01:14.250 --> 01:24.290
并且不能使用另一个捆绑器, 它将翻译这样的模块｡

01:24.290 --> 01:24.290
到非模块代码,

01:24.290 --> 01:26.360
其中所有的作品和所有的浏览器｡

01:26.360 --> 01:30.070
但除此之外, 使用真正使用的模块, ES模块｡ 

01:30.070 --> 01:31.748
我刚才说的很重要｡ 

01:31.748 --> 01:34.828
这里的这些模块, 现在我们使用它们的方式,

01:34.828 --> 01:37.620
只在现代浏览器中工作｡

01:37.620 --> 01:42.640
因为我们依赖浏览器来导入所有这些文件｡

01:42.640 --> 01:42.640
对不对？

01:42.640 --> 01:44.675
现在, 我们当然希望用typescript构建应用程序,

01:44.675 --> 01:48.940
它也可以在所有浏览器中运行｡

01:48.940 --> 01:52.090
例如, Internet Explorer 9｡ 

01:52.090 --> 01:54.130
在那里, 这是不受支持的｡ 

01:54.130 --> 01:55.730
此处不支持此语法｡ 

01:55.730 --> 01:57.410
因此, 应用程序不会在那里运行｡ 

01:57.410 --> 01:59.160
我们可能还使用了一些其他的功能,

01:59.160 --> 02:03.840
这些功能在那里不受支持, 但主要是这些功能在这里并不是所有的浏览器都受支持｡

02:03.840 --> 02:09.283
因此, 要使其在所有浏览器中工作, 我们可以使用捆绑工具｡

02:09.283 --> 02:09.283
例如, 我们可以使用Webpack｡ 

02:09.283 --> 02:12.431
将它们捆绑到一个JavaScript文件中｡ 

02:12.431 --> 02:15.810
因此, 在开发过程中, 我们有多个文件, 强大的输入体验,

02:15.810 --> 02:21.310
但当我们发布代码时, 我们实际上只有一个文件｡

02:21.310 --> 02:23.600
现在我们的优势是提供一个文件,

02:23.600 --> 02:25.676
而不是所有这些文件, 我们在这里,

02:25.676 --> 02:31.181
是我们也确保浏览器不必下载那么多的文件｡

02:31.181 --> 02:37.010
因为每一个必须下载的文件都是一个额外的往返｡

02:37.010 --> 02:37.010
在开发工具的网络选项卡中,

02:37.010 --> 02:38.510
您实际上可以看到这一点｡

02:38.510 --> 02:40.650
您可以看到这个瀑布图的区域,

02:40.650 --> 02:42.230
您可以看到这个白色的小方框,

02:42.230 --> 02:44.520
位于任何区块的开头｡

02:44.520 --> 02:48.506
这基本上是设置HDP请求所需的设置时间｡

02:48.506 --> 02:51.807
因此, 即使我们正在下载的文件非常小,

02:51.807 --> 02:54.700
你可以告诉, 这仍然需要一些时间,

02:54.700 --> 02:56.900
因为所有冗余的额外设置,

02:56.900 --> 02:59.100
为每个HDP请求｡

02:59.100 --> 03:04.640
因此, 无论浏览器支持与否, 减少请求是一个好主意｡

03:04.640 --> 03:12.453
因此, 出于浏览器支持和请求减少这两个原因, 我们将在下一节课程中讨论Webpack的捆绑｡
