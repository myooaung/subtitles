WEBVTT

00:02.160 --> 00:04.860
Présentateur : Maintenant que nous avons vu un autre bel exemple de la façon

00:04.860 --> 00:06.440
dont nous pouvons travailler avec les décorateurs,

00:06.440 --> 00:09.040
il y a un dernier exemple dans lequel je veux me plonger.

00:09.040 --> 00:11.997
Et voilà les décorateurs pour la validation.

00:11.997 --> 00:14.560
Pour cela, au bas du fichier, je vais

00:14.560 --> 00:17.733
ajouter encore une nouvelle classe ici.

00:18.780 --> 00:20.530
Ça pourrait être un cours.

00:20.530 --> 00:23.903
Un cours doit avoir un titre, qui est une chaîne de caractères.

00:25.430 --> 00:27.483
Et peut-être un prix, qui est un nombre.

00:29.730 --> 00:32.640
Ensuite, nous avons un constructeur où nous obtenons les

00:32.640 --> 00:34.440
deux valeurs ici et je n'utilise délibérément

00:35.550 --> 00:37.780
pas le raccourci ici, afin que je puisse facilement

00:37.780 --> 00:40.953
ajouter des décorateurs de propriétés.

00:42.690 --> 00:44.560
Ensuite, je fixe ce titre

00:44.560 --> 00:46.653
à t, et ce prix à p.

00:47.990 --> 00:50.530
Maintenant, bien sûr, lorsque nous voulons instancier

00:50.530 --> 00:53.610
ce cours, nous devons fournir un titre et un prix valides.

00:53.610 --> 00:56.730
Mais un scénario commun que vous pouvez rencontrer dans certaines

00:56.730 --> 00:59.630
applications est que vous récupérez des données, disons

00:59.630 --> 01:03.340
à partir d'une ressource web et vous obtenez des données où vous devinez

01:03.340 --> 01:05.854
que vous avez un couple de cours, disons, mais

01:05.854 --> 01:08.110
vous n'êtes pas sûr.

01:08.110 --> 01:12.839
Ou, autre scénario possible, vous laissez les utilisateurs entrer les données et vous voulez simplement

01:12.839 --> 01:15.490
affecter ces données et échanger un nouveau cours avec

01:15.490 --> 01:18.370
les données entrées par l'utilisateur et vous supposez qu'elles

01:18.370 --> 01:21.280
sont correctes, mais vous n'avez pas la garantie qu'elles le

01:21.280 --> 01:22.500
sont et vous voulez donc valider

01:22.500 --> 01:24.210
l'entrée.

01:24.210 --> 01:26.380
C'est le scénario que je veux simuler ici.

01:26.380 --> 01:29.940
Disons que dans notre fichier html d'index, nous avons un formulaire

01:30.894 --> 01:32.840
simple ici et je ne vais pas le styliser,

01:32.840 --> 01:36.074
donc il ne sera pas aussi beau, mais nous avons un formulaire

01:36.074 --> 01:41.074
simple ici avec l'entrée de type texte et un espace réservé de titre, woops, cours, titre

01:41.390 --> 01:44.620
et un id de disons titre et en dessous nous avons une entrée

01:44.620 --> 01:46.870
numérique où le type est tout le texte, mais

01:46.870 --> 01:50.605
c'est le prix du cours et l'id est prix.

01:50.605 --> 01:55.030
Et puis nous avons notre bouton où nous soumettons ceci.

01:55.030 --> 02:00.030
Le bouton est donc de type submit.

02:00.040 --> 02:02.780
Il s'agit donc d'un formulaire très simple et, comme je l'ai dit, il n'est

02:02.780 --> 02:04.280
pas très beau si on le regarde ici, mais il

02:04.280 --> 02:06.070
contient tout ce dont nous avons besoin.

02:06.070 --> 02:08.763
Maintenant, connectons un écouteur au formulaire ici.

02:09.830 --> 02:14.780
J'ai donc ici mon CourseForm que je peux obtenir avec document, querySelector, form et j'ajoute

02:14.780 --> 02:18.840
le point d'exclamation parce que je sais que j'en obtiendrai un donc ce ne sera

02:18.840 --> 02:21.910
pas nul, et ensuite sur le formulaire nous pouvons ajouterEventListener,

02:21.910 --> 02:25.050
l'écouteur d'événement de soumission et ensuite nous obtenons

02:26.390 --> 02:29.300
l'objet d'événement passé dans la fonction que j'ai assignée

02:29.300 --> 02:32.360
automatiquement.

02:32.360 --> 02:35.450
Là, je veux appeler l'événement preventDefault, pour ne pas soumettre

02:35.450 --> 02:38.030
le formulaire et ne pas envoyer de requête http.

02:38.030 --> 02:40.570
Et ensuite nous voulons extraire les données

02:40.570 --> 02:42.910
pour le titre et pour le prix.

02:42.910 --> 02:45.779
Ainsi, le titre peut être extrait en accédant

02:45.779 --> 02:49.700
à document, querySelector, ou en fait, puisque nous avons

02:49.700 --> 02:54.700
attribué un id, getElementById, title et que nous savons qu'il s'agira d'un

02:55.560 --> 02:59.760
HTMLInputElement, nous pouvons utiliser le typecasting pour

02:59.760 --> 03:01.700
que typescript le sache, et le

03:01.700 --> 03:06.174
prix est document, getElementById, price et nous pouvons également

03:06.174 --> 03:09.672
le convertir en InputElement.

03:09.672 --> 03:11.320
Pour obtenir le titre concret,

03:11.320 --> 03:14.520
nous pouvons maintenant aller dans titleEl, accéder

03:14.520 --> 03:17.779
à la propriété value et pour obtenir le prix, nous

03:17.779 --> 03:20.930
pouvons faire la même chose pour priceElement et

03:20.930 --> 03:23.400
obtenir la valeur là aussi, et je veux

03:23.400 --> 03:25.260
l'ajouter comme un nombre, donc

03:25.260 --> 03:26.840
j'ajoute le plus devant

03:26.840 --> 03:30.060
pour le convertir en nombre.

03:30.060 --> 03:34.017
Voilà, c'est fait, mais maintenant je veux créer un nouveau

03:34.017 --> 03:36.090
cours avec ces informations.

03:36.090 --> 03:39.060
Donc, ici nous avons le cours créé où je peux

03:39.060 --> 03:43.850
appeler le nouveau cours et je passe dans le titre et le prix.

03:43.850 --> 03:46.770
Maintenant, Typescript l'accepte, car le titre sera une chaîne de caractères

03:46.770 --> 03:48.640
et comme je convertis cette entrée en un nombre,

03:48.640 --> 03:50.200
le prix sera un nombre.

03:50.200 --> 03:54.160
Ainsi, si j'enregistre en console, le cours créé par la suite, nous pouvons vérifier

03:54.160 --> 03:55.530
si cela fonctionne.

03:55.530 --> 03:58.693
Sauvegardons cela, rechargeons, effaçons peut-être la console

03:58.693 --> 04:00.680
pour pouvoir voir clairement la sortie, puis

04:00.680 --> 04:02.400
ajoutons un nouveau cours ici.

04:02.400 --> 04:05.785
Javascript le guide complet coûte 199$ et

04:05.785 --> 04:08.010
ça semble fonctionner.

04:08.010 --> 04:11.010
Malheureusement, cela ne fonctionne

04:11.010 --> 04:13.290
que si je ne saisis rien.

04:13.290 --> 04:16.600
Si je clique maintenant sur enregistrer, nous voyons que ce cours est créé.

04:16.600 --> 04:19.820
Maintenant, c'est techniquement un cours valide mais bien

04:19.820 --> 04:23.121
sûr, il n'est pas vraiment valide pour notre application.

04:23.121 --> 04:26.220
Nous voulons probablement avoir un titre qui n'est pas

04:26.220 --> 04:28.620
vide et un prix qui est supérieur à zéro.

04:28.620 --> 04:30.660
Donc nous voulons ajouter la validation.

04:30.660 --> 04:32.670
Bien sûr, nous pouvons simplement ajouter

04:32.670 --> 04:37.130
un if check ici et vérifier si title, trim, length est supérieur à zéro, ce qui signifie

04:37.130 --> 04:38.830
qu'il n'est pas vide et où nous validons

04:38.830 --> 04:41.100
également le prix.

04:41.100 --> 04:43.870
Mais cela signifie que chaque fois que nous créons un nouveau

04:43.870 --> 04:47.880
cours, nous devons ajouter la logique de validation ici avant de l'ajouter.

04:47.880 --> 04:49.990
Ne serait-il pas agréable que la logique de validation

04:49.990 --> 04:51.910
soit incluse dans la classe du cours, avec l'aide

04:51.910 --> 04:53.940
de décorateurs, peut-être ?

04:53.940 --> 04:56.770
Et c'est exactement ce que je veux faire ici.

04:56.770 --> 04:59.910
Dans le module suivant, je vous montrerai

04:59.910 --> 05:01.447
un exemple de paquetage

05:01.447 --> 05:04.861
qui fait cela de manière plus élaborée

05:04.861 --> 05:12.080
et que nous utiliserons tous pour jouer un peu avec.

05:12.080 --> 05:14.530
Cependant, ici, je veux implémenter ceci

05:14.530 --> 05:16.300
avec mes propres décorateurs

05:16.300 --> 05:19.370
et je vais ajouter un décorateur requis ici et nous allons

05:19.370 --> 05:21.890
ajouter une autre fonction de décorateur que

05:21.890 --> 05:24.433
je vais nommer PositiveNumber.

05:26.710 --> 05:28.510
J'ai donc deux décorateurs ici.

05:28.510 --> 05:31.240
Et maintenant mon idée est que nous pouvons

05:31.240 --> 05:35.369
les ajouter ici à nos propriétés, par exemple Requis devant le titre,

05:35.369 --> 05:40.369
et nombre positif devant le prix et typescript enregistre cela quelque part

05:41.740 --> 05:44.020
et ensuite nous avons une troisième

05:44.020 --> 05:49.020
fonction, validate à laquelle nous pouvons passer un objet, donc n'importe

05:49.490 --> 05:54.490
quel objet et typescript jette un coup d'oeil au projet, trouve toute validation

05:55.120 --> 05:58.780
que nous avons enregistrée sur cette classe pour cet objet

05:58.780 --> 06:03.410
plus tôt et applique notre logique de validation.

06:03.410 --> 06:05.480
C'est l'idée que j'ai ici.

06:05.480 --> 06:08.240
Ainsi, cela pourrait faire partie d'une bibliothèque tierce

06:08.240 --> 06:11.170
que nous vous exposons et il vous suffirait d'importer le nombre

06:11.170 --> 06:14.620
positif requis et de valider pour configurer d'abord les validateurs et ensuite,

06:14.620 --> 06:16.750
à un moment donné, appeler valider.

06:16.750 --> 06:18.634
Donc, par exemple, ici, lorsque

06:18.634 --> 06:22.462
nous avons créé le cours, nous pouvons appeler validate

06:22.462 --> 06:31.660
et passer dans le createdCourse et si ce n'est pas vrai, alors disons que cela devrait retourner true ou false, si ce n'est

06:31.660 --> 06:35.040
pas vrai, alors nous lançons une erreur ou montrons

06:35.040 --> 06:42.960
une alerte, invalid input please try again et seulement sinon nous continuons.

06:42.960 --> 06:43.870
C'est donc mon idée.

06:43.870 --> 06:46.540
Que nous pouvons appeler valider, cela renvoie vrai ou faux.

06:46.540 --> 06:48.793
Vrai s'il est valide, faux s'il ne l'est

06:48.793 --> 06:51.670
pas et nous pouvons donc utiliser le résultat.

06:51.670 --> 06:53.730
Nous avons donc deux choses à faire.

06:53.730 --> 06:56.290
Nous devons nous assurer que lorsque nous ajoutons un décorateur

06:56.290 --> 06:59.350
ici, celui-ci est en quelque sorte stocké quelque part.

06:59.350 --> 07:00.970
Encore une fois, gardez à l'esprit

07:00.970 --> 07:02.950
que cela pourrait faire partie de notre

07:02.950 --> 07:05.710
propre bibliothèque tierce, donc nous pourrions avoir

07:05.710 --> 07:10.050
une sorte de stockage qui stocke que pour cette classe et cette propriété titre par exemple,

07:10.050 --> 07:12.480
nous voulons qu'elle soit requise.

07:12.480 --> 07:15.630
Et dans valider, nous pouvons alors vérifier si dans le stockage

07:15.630 --> 07:19.026
de l'objet que nous avons, pour la classe sur laquelle l'objet est basé,

07:19.026 --> 07:21.990
nous avons un validateur enregistré pour le titre, pour le prix

07:21.990 --> 07:23.330
et ainsi de suite.

07:23.330 --> 07:25.260
Et nous exécutons ensuite notre logique de validation.

07:25.260 --> 07:26.453
C'est mon idée.
