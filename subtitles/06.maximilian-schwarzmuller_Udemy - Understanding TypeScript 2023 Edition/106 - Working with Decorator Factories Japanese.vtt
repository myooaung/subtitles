WEBVTT

00:02.120 --> 00:04.420
講師：このようにデコレーターを作る以外に､

00:04.420 --> 00:07.060
デコレーターファクトリーを定義することもできます｡

00:07.060 --> 00:10.150
ファクトリーは基本的にデコレーター関数を返しますが､

00:10.150 --> 00:15.440
デコレーターとして何かに割り当てるときに､ それを設定することができます｡

00:15.440 --> 00:19.790
これを示すために､ ここにある関数をファクトリーに変換してみましょう｡

00:19.790 --> 00:26.120
その代わりに､ コンストラクタの引数を取る新しい無名関数を返し､

00:26.120 --> 00:34.610
デコレータの内部で実行したいロギングを保持します｡

00:34.610 --> 00:37.890
これで､ 新しい関数を返す関数ができました｡ 

00:37.890 --> 00:40.780
つまり､ 外側の関数を実行し､

00:40.780 --> 00:47.670
その戻り値である内側の関数を有効なデコレータ関数として､

00:47.670 --> 00:53.430
クラス Therefore に取り付けます｡

00:53.430 --> 00:54.740
なぜ､ そんなことをするのでしょうか？

00:54.740 --> 00:56.630
例えば､ ここで文字列であるログ文字列を受け取り､

00:56.630 --> 01:03.750
好きな引数､ 好きなだけ引数を取り､ その値を "logging - person" で渡し､

01:03.750 --> 01:16.300
それをデコレータ関数内で使用することで､ 標準のログテキストを表示する代わりに､ ログ文字列を表示することができます｡

01:16.300 --> 01:25.000
これで､ デコレータ関数がファクトリー関数を実行する際に使用する値をカスタマイズできるようになりました｡

01:25.000 --> 01:27.410
デコレータ関数を実行するのではなく､

01:27.410 --> 01:30.710
そのようなデコレータ関数を返す関数を実行しているので､

01:30.710 --> 01:35.060
ここでデコレータを呼んでいます｡

01:35.060 --> 01:43.750
そして､ この利点は､ その内側に返されるデコレータ関数で使用される値を渡すことができるようになったことです｡

01:43.750 --> 01:49.940
これを保存すると､ 古い出力が表示されますが､ ここにカスタムログ文字列が表示されます｡

01:49.940 --> 01:53.010
そのため､ デコレータファクトリを使用することで､

01:53.010 --> 01:59.973
より強力に､ そしてデコレータが内部で行うことを設定する可能性が広がります｡
