WEBVTT

00:02.250 --> 00:04.870
-: Ora che conosciamo queste potenti funzioni,

00:04.870 --> 00:07.960
la domanda più ovvia è: perché dovremmo usarle?

00:07.960 --> 00:09.610
Perché è utile?

00:09.610 --> 00:12.200
È utile in situazioni come questa, in cui sappiamo

00:12.200 --> 00:13.780
di voler disporre di un certo

00:13.780 --> 00:15.820
insieme di funzionalità.

00:15.820 --> 00:18.750
Supponiamo un metodo greet, e vogliamo assicurarci

00:18.750 --> 00:21.910
che una clausola abbia tale metodo greet e che un'altra

00:21.910 --> 00:24.450
clausola lo abbia, beh, allora possiamo

00:24.450 --> 00:26.360
implementare un'interfaccia

00:26.360 --> 00:29.570
che forzi l'esistenza di questo metodo.

00:29.570 --> 00:32.690
In questo modo possiamo condividere facilmente le funzionalità tra

00:32.690 --> 00:35.850
le clausole e ogni clausola deve aggiungere la propria implementazione,

00:35.850 --> 00:38.060
ovvero il codice esatto che deve essere eseguito

00:38.060 --> 00:39.450
quando il metodo viene chiamato,

00:39.450 --> 00:41.370
ma facciamo rispettare una certa struttura

00:41.370 --> 00:43.280
con l'aiuto delle interfacce.

00:43.280 --> 00:46.400
Questo può essere utile se non abbiamo altre parti del codice

00:46.400 --> 00:48.550
che si basano su quella struttura.

00:48.550 --> 00:51.680
Qui, impostiamo user1 come tipo Greetable e diciamo

00:51.680 --> 00:55.240
che non ci interessa cosa c'è dentro user, ma quello che deve

00:55.240 --> 00:57.840
esserci è un metodo greet e sappiamo che deve

00:57.840 --> 00:59.730
esserci perché qualsiasi cosa

00:59.730 --> 01:03.510
memorizziamo in user1 deve essere greetable.

01:03.510 --> 01:07.350
Questo ci consente di scrivere codice veramente potente e flessibile,

01:07.350 --> 01:09.840
in cui non dobbiamo sapere tutto su un oggetto

01:09.840 --> 01:11.710
o su una clausola, ma sappiamo solo

01:11.710 --> 01:14.710
che qualsiasi cosa io stia ottenendo qui in user1 deve avere

01:14.710 --> 01:16.210
un metodo greet.

01:16.210 --> 01:18.850
Non ci interessa se Person ha qualcos'altro,

01:18.850 --> 01:20.630
qui siamo interessati a greet,

01:20.630 --> 01:22.400
quindi abbiamo mandato a Greetable

01:22.400 --> 01:25.180
e quindi non possiamo memorizzare nulla in user1

01:25.180 --> 01:27.190
che non abbia un metodo greet, perché

01:27.190 --> 01:30.770
Greetable obbliga qualsiasi cosa si basi su di esso ad avere tale

01:30.770 --> 01:32.333
metodo greet.
