WEBVTT

1
00:00:02.120 --> 00:00:04.420
<v Instructor>Besides creating a decorator like this,</v>

2
00:00:04.420 --> 00:00:07.060
we can also define a decorator factory,

3
00:00:07.060 --> 00:00:10.150
which basically returns a decorator function,

4
00:00:10.150 --> 00:00:13.120
but allows us to configure it when we assign it

5
00:00:13.120 --> 00:00:15.440
as a decorator to something.

6
00:00:15.440 --> 00:00:18.210
To show this, let's convert this function here

7
00:00:18.210 --> 00:00:19.790
into a factory.

8
00:00:19.790 --> 00:00:22.260
For that, I will grab this constructor argument

9
00:00:22.260 --> 00:00:23.220
and remove it,

10
00:00:23.220 --> 00:00:24.170
and instead in here

11
00:00:24.170 --> 00:00:26.120
I will return a new, anonymous function

12
00:00:26.120 --> 00:00:28.000
which takes that constructor argument

13
00:00:28.000 --> 00:00:29.920
and which then holds this logging

14
00:00:29.920 --> 00:00:33.070
which I want to execute inside of the decorator,

15
00:00:33.070 --> 00:00:34.610
so I move that in there.

16
00:00:34.610 --> 00:00:37.890
So now we have a function that returns a new function.

17
00:00:37.890 --> 00:00:40.780
So now when we want to apply this decorator

18
00:00:40.780 --> 00:00:43.350
we have to execute it as a function here

19
00:00:43.350 --> 00:00:45.740
so that we execute this outer function

20
00:00:45.740 --> 00:00:47.670
and we attach the return value,

21
00:00:47.670 --> 00:00:49.000
which is this inner function

22
00:00:49.000 --> 00:00:51.350
which is our valid decorator function,

23
00:00:51.350 --> 00:00:53.430
as a decorator to class therefore.

24
00:00:53.430 --> 00:00:54.740
Why would we do that?

25
00:00:54.740 --> 00:00:56.630
Because now here, for example,

26
00:00:56.630 --> 00:00:59.440
we could accept a log string here,

27
00:00:59.440 --> 00:01:00.390
which is a string,

28
00:01:00.390 --> 00:01:01.790
any argument of your choice

29
00:01:01.790 --> 00:01:03.750
and as many arguments as you want,

30
00:01:03.750 --> 00:01:08.230
and pass a value for that in "logging - person"

31
00:01:08.230 --> 00:01:11.280
and use that inside of our decorator function

32
00:01:11.280 --> 00:01:14.470
so that here, instead of showing that standard logging text,

33
00:01:14.470 --> 00:01:16.300
we show our log string.

34
00:01:16.300 --> 00:01:18.540
So now we can customize the values

35
00:01:18.540 --> 00:01:22.100
the decorator function uses when it executes

36
00:01:22.100 --> 00:01:25.000
with our factory function.

37
00:01:25.000 --> 00:01:27.410
We now call our decorator here,

38
00:01:27.410 --> 00:01:30.710
because we're not executing the decorator function,

39
00:01:30.710 --> 00:01:33.290
but we're executing a function that will return

40
00:01:33.290 --> 00:01:35.060
such a decorator function.

41
00:01:35.060 --> 00:01:36.940
And the advantage to this is

42
00:01:36.940 --> 00:01:40.790
that we can now pass in values which will be used by

43
00:01:40.790 --> 00:01:43.750
that inner returned decorator function.

44
00:01:43.750 --> 00:01:47.050
So, if I now save that, we see the old output,

45
00:01:47.050 --> 00:01:49.940
but with our custom log string here.

46
00:01:49.940 --> 00:01:53.010
So, using decorator factories can give us

47
00:01:53.010 --> 00:01:55.730
more power and more possibilities

48
00:01:55.730 --> 00:01:59.973
of configuring what the decorator then does internally.

