WEBVTT

00:02.280 --> 00:03.780
Instructeur: Laten we dieper

00:03.780 --> 00:06.450
ingaan op de kerntypes die TypeScript ondersteunt.

00:06.450 --> 00:09.800
Het volgende type dat interessant is, is het objecttype.

00:09.800 --> 00:13.100
Nu, je kent objecten in JavaScript, ze zien er zo uit.

00:13.100 --> 00:14.690
Je hebt accolades en dan heb

00:14.690 --> 00:16.350
je daar sleutelwaardeparen

00:16.350 --> 00:20.460
en zulke waarden worden ook in TypeScript behandeld als objecttypes,

00:20.460 --> 00:22.250
dus elk JavaScript-object is van

00:22.250 --> 00:23.620
het type object.

00:23.620 --> 00:28.410
Hoewel ik al zal zeggen dat er meer specifieke versies van objecten in TypeScript

00:28.410 --> 00:30.030
zijn, zodat je kunt zeggen

00:30.030 --> 00:32.514
dat dit niet zomaar een object is, maar een

00:32.514 --> 00:35.108
object dat deze eigenschappen moet hebben

00:35.108 --> 00:37.260
of dat gebaseerd moet zijn op deze of

00:37.260 --> 00:39.490
gene constructorfunctie.

00:39.490 --> 00:41.322
Maar we komen er stap voor stap.

00:41.322 --> 00:45.110
Om in objecten te duiken, zal ik eerst app. ts hier en ik zal dit

00:45.110 --> 00:49.770
hernoemen tot basis. ts hier.

00:49.770 --> 00:52.058
En voeg een nieuwe app toe. ts bestand, dat dan

00:52.058 --> 00:55.400
de oude app overschrijft. js bestand zodra we het compileren,

00:55.400 --> 00:58.600
waar we nu in objecten kunnen duiken.

00:58.600 --> 01:01.110
En laten we beginnen met het maken van een basisobject,

01:01.110 --> 01:03.902
laten we zeggen een persoon met accolades.

01:03.902 --> 01:05.870
En we geven dit een naam.

01:05.870 --> 01:08.230
Hier ga ik voor Maximiliaan omdat dat

01:08.230 --> 01:10.700
mijn naam is en een leeftijd van 30.

01:10.700 --> 01:14.930
Nu kunnen we natuurlijk troosten. log persoon hier en als we dat

01:14.930 --> 01:18.375
doen, en we compileren dit niet verrassend,

01:18.375 --> 01:23.010
zouden we moeten zien dat dat object hier in de console wordt

01:23.010 --> 01:24.536
afgedrukt.

01:24.536 --> 01:27.284
Wat we ook kunnen doen in JavaScript is proberen

01:27.284 --> 01:31.690
toegang te krijgen tot, laten we zeggen, nickname, een eigenschap

01:31.690 --> 01:33.970
die hier niet bestaat.

01:33.970 --> 01:37.320
Nu zie je meteen dat TypeScript daar niet zo blij mee

01:37.320 --> 01:39.820
is, en dus vertelt mijn IDE me dat.

01:39.820 --> 01:42.302
Het vertelt me dat de eigenschap bijnaam

01:42.302 --> 01:44.050
niet bestaat op dat type.

01:44.050 --> 01:47.642
Dus als we dat opslaan en ik probeer het te compileren, krijgen

01:47.642 --> 01:49.907
we inderdaad diezelfde foutmelding.

01:49.907 --> 01:52.210
De TypeScript compiler vindt dit niet leuk

01:52.210 --> 01:54.401
en vertelt me dat we geen nickname eigenschap

01:54.401 --> 01:56.430
hebben op dit object.

01:56.430 --> 01:59.813
Het ontdekt dat we deze bijnaam-eigenschap niet hebben,

01:59.813 --> 02:02.936
want als we met de muis over persoon gaan, zien we dat

02:02.936 --> 02:05.710
er een dubbele punt staat na persoon, dus na de

02:05.710 --> 02:07.970
variabele of constante naam.

02:07.970 --> 02:11.030
Daaruit leidt hij af dat dit het soort gegevens is dat daar

02:11.030 --> 02:12.110
is opgeslagen.

02:12.110 --> 02:14.181
Dat is niet alleen maar object, zoals je kunt zien.

02:14.181 --> 02:16.349
Dat is een concreet object.

02:16.349 --> 02:18.920
Het is een object met een naam sleutel, waarbij

02:18.920 --> 02:21.430
het type dan weer een string moet zijn.

02:21.430 --> 02:24.700
En de leeftijdsleutel, waarbij het type een getal moet zijn.

02:24.700 --> 02:27.116
En eigenlijk kan dit hier verwarrend zijn.

02:27.116 --> 02:31.100
Dit, hier, ziet er duidelijk uit als een JavaScript object.

02:31.100 --> 02:33.980
accolades, sleutel waarde paren.

02:33.980 --> 02:36.020
Nou, het eerste belangrijke ding om hier te

02:36.020 --> 02:38.520
zien is dat we een puntkomma hebben na elke regel.

02:38.520 --> 02:40.580
Dat hebben we niet in een JavaScript object.

02:40.580 --> 02:41.750
We hebben een komma hier.

02:41.750 --> 02:44.160
En inderdaad, dit is geen JavaScript object dat

02:44.160 --> 02:45.940
hier ergens wordt aangemaakt.

02:45.940 --> 02:50.600
Dit is het objecttype dat TypeScript afleidt en objecttypes worden

02:50.600 --> 02:53.914
bijna als objecten geschreven, maar daar hebben

02:53.914 --> 02:57.106
we natuurlijk geen sleutelwaardeparen, maar

02:57.106 --> 02:59.239
sleuteltypeparen.

02:59.239 --> 03:02.840
Objecttypen zijn er om het type object te beschrijven

03:02.840 --> 03:06.064
dat ergens wordt gebruikt.

03:06.064 --> 03:07.653
We zouden meer algemeen kunnen zijn.

03:07.653 --> 03:10.420
Ik zou hier expliciet een type kunnen

03:10.420 --> 03:13.640
toekennen aan de constante van object.

03:13.640 --> 03:16.100
Object is een van de ingebouwde types,

03:16.100 --> 03:17.460
net als nummer en string,

03:17.460 --> 03:21.030
en als ik hier nu overheen ga zien we personen van het type

03:21.030 --> 03:24.000
object en nu geeft TypeScript echt alleen om het

03:24.000 --> 03:26.430
feit dat dit een objecttype is.

03:26.430 --> 03:28.423
Nu, nog steeds, als we dit compileren

03:28.423 --> 03:32.808
krijgen we die foutmelding, omdat TypeScript nog steeds onze code analyseert

03:32.808 --> 03:35.490
en ziet dat we iets proberen te benaderen dat daar

03:35.490 --> 03:36.666
niet bestaat, maar het

03:36.666 --> 03:39.770
is belangrijk te begrijpen dat het allemaal begint met

03:39.770 --> 03:42.140
dit meest generieke objecttype.

03:42.140 --> 03:44.660
Maar vaak wil je specifieker zijn dan dat.

03:44.660 --> 03:47.623
Je wilt niet alleen werken met dat generieke objecttype.

03:47.623 --> 03:50.284
Je wilt echt de volledige steun.

03:50.284 --> 03:53.550
Als ik nu bijvoorbeeld hier een punt toevoeg en ik kijk

03:53.550 --> 03:55.570
naar mijn autocompletie, krijg ik

03:55.570 --> 03:58.080
daar helemaal geen hulp van mijn IDE.

03:58.080 --> 04:00.303
De reden daarvoor is dat we de IDE alleen

04:00.303 --> 04:04.230
vertellen dat we hier een waarde hebben, in persoon, die van

04:04.230 --> 04:05.860
het type object is.

04:05.860 --> 04:08.300
Nu krijgen we inderdaad ook een foutmelding als

04:08.300 --> 04:10.210
ik de naam probeer te benaderen.

04:10.210 --> 04:12.270
De naam bestaat hier, toch?

04:12.270 --> 04:14.120
Maar wat we TypeScript hier vertellen

04:14.120 --> 04:16.601
is dat we gewoon een object hebben waar we geen

04:16.601 --> 04:18.889
informatie aan TypeScript geven.

04:18.889 --> 04:21.739
Dus eigenlijk ondersteunt TypeScript geen

04:21.739 --> 04:24.750
enkel type eigenschap, omdat we het niets vertellen

04:24.750 --> 04:26.210
over het object.

04:26.210 --> 04:28.050
Dus we moeten specifieker zijn.

04:28.050 --> 04:32.000
En we zijn specifieker door een specifiek objecttype in te stellen.

04:32.000 --> 04:34.795
Hetgeen TypeScript ook automatisch afleidde.

04:34.795 --> 04:38.548
We doen dit door accolades toe te voegen na

04:38.548 --> 04:43.370
de dubbele punt, na onze const of variabele naam.

04:43.370 --> 04:46.213
Dus dit maakt geen nieuw JavaScript object aan.

04:46.213 --> 04:48.460
Dit wordt in feite uit de gecompileerde

04:48.460 --> 04:50.310
JavaScript-code gehaald.

04:50.310 --> 04:52.643
In plaats daarvan is dit gewoon TypeScript's

04:52.643 --> 04:55.855
notatie van een gespecialiseerd objecttype, zeg maar.

04:55.855 --> 04:59.422
Dus van een objecttype waarbij we wat informatie geven over

04:59.422 --> 05:01.434
de structuur van het object.

05:01.434 --> 05:04.520
Door nu alleen een leeg paar accolades als type toe te kennen,

05:04.520 --> 05:07.440
doen we in wezen hetzelfde als met object.

05:07.440 --> 05:09.765
We vertellen TypeScript dat dit een of ander object is.

05:09.765 --> 05:12.740
Maar nu kunnen we specifieker zijn.

05:12.740 --> 05:16.550
Wij kunnen hier sleutelwaarde-items toevoegen, echter

05:16.550 --> 05:19.694
niet sleutelwaarde, maar sleuteltype.

05:19.694 --> 05:22.800
Dus hier kunnen we zeggen dat het object dat moet

05:22.800 --> 05:25.091
worden opgeslagen in person een name

05:25.091 --> 05:28.197
property moet hebben en dat de waarde van die name

05:28.197 --> 05:31.140
property van het type string moet zijn.

05:31.140 --> 05:33.795
Dus hier beschrijven we het type waarde dat uiteindelijk

05:33.795 --> 05:36.440
in de naam wordt opgeslagen.

05:36.440 --> 05:39.320
Trouwens, ik krijg hier een foutmelding.

05:39.320 --> 05:41.090
Want wat ik TypeScript nu vertel is

05:41.090 --> 05:43.489
dat mijn persoon een object moet hebben met precies

05:43.489 --> 05:45.900
één sleutelwaardepaar, waarbij de sleutel naam

05:45.900 --> 05:48.626
is en de waarde van die sleutel een string, maar we hebben

05:48.626 --> 05:52.730
geen object toegewezen met twee sleutelwaardeparen.

05:52.730 --> 05:55.020
Naam, die een string bevat, dat is prima,

05:55.020 --> 05:58.500
maar leeftijd, die een getal bevat, en dat zou niet goed zijn.

05:58.500 --> 06:01.140
Dus hier moeten we dit aanpassen door een puntkomma toe te

06:01.140 --> 06:03.520
voegen en dan nog een sleutelwaardepaar toe te voegen

06:03.520 --> 06:06.300
waar we zeggen dat leeftijd van het type nummer moet zijn.

06:06.300 --> 06:09.670
Dus niet 30 hier, dat zou eigenlijk ondersteund worden in TypeScript,

06:09.670 --> 06:12.673
dat we het beperken tot één specifiek getal, maar dan lopen

06:12.673 --> 06:15.600
we tegen problemen aan zodra we dat veranderen.

06:15.600 --> 06:19.060
In plaats daarvan wil ik hier zeggen dat leeftijd een getal moet zijn.

06:19.060 --> 06:22.360
En nu wijzen we eigenlijk expliciet dezelfde

06:22.360 --> 06:24.870
TypeScript toe als voorheen.

06:24.870 --> 06:26.900
Zoals je geleerd hebt, is dat geen goede praktijk,

06:26.900 --> 06:28.570
maar om objecttypes te begrijpen wilde

06:28.570 --> 06:29.940
ik het hier doen.

06:29.940 --> 06:32.315
Toch is dit iets wat je kunt doen.

06:32.315 --> 06:37.010
Het is beter om TypeScript dit te laten afleiden

06:37.010 --> 06:40.440
zoals we eerder deden, zoals dit.

06:40.440 --> 06:42.351
Nu, om iets interessants te laten

06:42.351 --> 06:45.450
zien, als ik terugschakel naar deze suboptimale

06:45.450 --> 06:47.970
code, waar we expliciet een type toekennen,

06:47.970 --> 06:49.920
zou TypeScript in staat zijn dit

06:49.920 --> 06:54.920
af te leiden, als we deze code compileren, werkt het natuurlijk.

06:55.180 --> 06:56.900
We hebben toegang tot de name property, maar

06:56.900 --> 06:59.077
als we dan kijken naar app. js we zien dat deze typetoewijzing

06:59.077 --> 07:01.220
hier wordt verwijderd.

07:01.220 --> 07:03.417
En dat zou natuurlijk te verwachten zijn.

07:03.417 --> 07:06.290
Zoals ik al zei, zijn types en typetoewijzingen geen

07:06.290 --> 07:08.120
onderdeel van JavaScript.

07:08.120 --> 07:09.460
Ze zijn alleen TypeScript.

07:09.460 --> 07:10.800
Ik wilde dit nog eens laten zien

07:10.800 --> 07:12.840
om echt duidelijk te maken dat deze syntax

07:12.840 --> 07:15.080
hier geen JavaScript-object maakt, dat ergens

07:15.080 --> 07:16.485
in onze code staat.

07:16.485 --> 07:21.263
Dit is gewoon TypeScript's voorstelling van een objecttype die

07:21.263 --> 07:24.570
TypeScript helpt de objecten waarmee u werkt

07:24.570 --> 07:25.900
te begrijpen.

07:25.900 --> 07:29.950
Beter is natuurlijk deze syntax, zoals je geleerd hebt.
