WEBVTT

00:02.170 --> 00:03.420
Kursleiter: Fangen wir also an.

00:03.420 --> 00:06.330
Wie bereits erwähnt, werde ich hier eine sehr einfache REST-API

00:06.330 --> 00:09.130
erstellen, aber natürlich kann man jede beliebige Node-Anwendung

00:09.130 --> 00:10.810
mit oder ohne Express und auf jede

00:10.810 --> 00:13.780
Art und Weise mit TypeScript erstellen, daher ist dies nur

00:13.780 --> 00:15.570
ein Beispiel.

00:15.570 --> 00:18.990
Sie sind nicht auf diese spezielle Anwendung beschränkt.

00:18.990 --> 00:21.560
Im Ordner src füge ich eine App hinzu. ts-Datei, die der Root-Einstiegspunkt

00:21.560 --> 00:23.060
sein wird, an dem wir den

00:23.060 --> 00:25.970
Server hochfahren.

00:25.970 --> 00:29.530
Und dort möchte ich etwas aus Express importieren, aus diesem

00:29.530 --> 00:31.203
Express-Framework.

00:32.970 --> 00:35.460
Jetzt wissen Sie wahrscheinlich, wie wir hier Express hinzufügen

00:35.460 --> 00:37.890
und einen Webserver mit Express einrichten können.

00:37.890 --> 00:41.330
Wir importieren Express mit dieser Syntax

00:41.330 --> 00:46.330
hier und dann können wir Express als Funktion ausführen.

00:46.380 --> 00:50.170
Wir erhalten ein solches App-Objekt zurück, mit dem wir listen aufrufen können,

00:50.170 --> 00:53.750
um auf einem bestimmten Port auf eingehende Anfragen zu warten.

00:53.750 --> 00:56.120
Dies würde in normalem JavaScript funktionieren, aber Sie

00:56.120 --> 00:58.420
sehen bereits, dass ich hier einen Fehler erhalte.

00:59.540 --> 01:01.600
Jetzt bekomme ich auch einen Vorschlag,

01:01.600 --> 01:03.500
warum ich diesen Fehler hier bekommen

01:03.500 --> 01:06.290
könnte, weil require eigentlich eine Funktion ist,

01:06.290 --> 01:10.100
die in note existiert. js, aber nicht auf der Browserseite.

01:10.100 --> 01:12.540
Jetzt in der tsconfig. json-Datei verwende ich keine speziellen

01:12.540 --> 01:16.640
Bibliotheken, die Node unterstützen würden. js, so dass TypeScript diese

01:16.640 --> 01:18.120
allgemeine Funktion,

01:18.120 --> 01:20.150
die in einem Knoten existiert,

01:20.150 --> 01:22.900
nicht kennt. js-Umgebung.

01:22.900 --> 01:27.140
Damit dies funktioniert, müssen wir einen zusätzlichen Typ mit "npm install --save-dev"

01:27.140 --> 01:30.220
installieren. Wir können "@types/node" installieren, um

01:30.220 --> 01:32.410
alle Typen zu installieren, die wir für die

01:32.410 --> 01:36.291
Arbeit mit Node benötigen. js Führen wir also diesen

01:36.291 --> 01:39.460
Befehl aus und sehen wir, ob er uns hilft.

01:39.460 --> 01:42.320
Ja, es ist erledigt und der Fehler ist verschwunden.

01:42.320 --> 01:44.390
Aber vielleicht haben Sie auch gesehen, dass ich bei der

01:44.390 --> 01:46.680
App keine automatische Vervollständigung erhalten habe.

01:46.680 --> 01:50.190
Es tritt auch kein Fehler auf, aber wenn wir mit dem Mauszeiger über app fahren, sehen

01:50.190 --> 01:52.410
wir, dass TypeScript nicht weiß, was da drin ist.

01:52.410 --> 01:54.210
Sie ist vom Typ "any".

01:54.210 --> 01:56.530
Wir sollten also wahrscheinlich mehr Typen

01:56.530 --> 01:59.930
installieren und auch "@types/express" installieren, um express-spezifische

01:59.930 --> 02:02.410
Typen zu installieren.

02:02.410 --> 02:04.320
Und das ist ein Muster, das Sie bereits kennen.

02:04.320 --> 02:06.850
Wir haben uns das im Abschnitt über die Bibliothek von Drittanbietern

02:06.850 --> 02:08.350
im Kurs angesehen.

02:08.350 --> 02:12.030
Dort habe ich Ihnen auch gezeigt, wie Sie Type-Pakete installieren können, um eine

02:12.030 --> 02:15.220
bessere Unterstützung in Ihren TypeScript-Skripten zu erhalten.

02:15.220 --> 02:19.320
So mit diesem Typ hinzugefügt, ohne zusätzliche Konfiguration,

02:19.320 --> 02:22.030
Hah, es funktioniert immer noch nicht.

02:22.030 --> 02:23.140
Der Grund dafür ist die

02:23.140 --> 02:25.330
Import-Syntax, die wir hier verwenden.

02:25.330 --> 02:28.270
Dies ist die übliche Vorgehensweise. js-Import-Syntax,

02:28.270 --> 02:30.450
die beachten. js standardmäßig verwendet,

02:30.450 --> 02:33.660
aber hier sind wir tatsächlich in einer Umgebung in TypeScript, wo wir

02:33.660 --> 02:36.140
eine andere Import-Syntax verwenden können.

02:36.140 --> 02:38.230
Wir können die gleiche Importsyntax verwenden,

02:38.230 --> 02:40.373
die wir von ES-Modulen im Browser kennen.

02:41.240 --> 02:46.240
Wir können also zum Beispiel "import express from 'express'" verwenden.

02:46.710 --> 02:48.620
Wenn wir das tun und dann den Mauszeiger über "app" bewegen, sehen

02:48.620 --> 02:49.910
Sie, dass es jetzt vom Typ "Express" ist.

02:49.910 --> 02:53.040
Jetzt haben wir also TypeScript-Unterstützung.

02:53.040 --> 02:54.569
Nun noch eine wichtige Anmerkung.

02:54.569 --> 02:58.790
In Anmerkung. js gibt es auch eine Syntax,

02:58.790 --> 03:00.810
die dieser ähnlich ist.

03:00.810 --> 03:03.420
Jetzt ist es unter einer experimentellen Flagge,

03:03.420 --> 03:06.190
und es ist unter dieser Flagge für eine sehr lange Zeit,

03:06.190 --> 03:10.010
so mit gemeinsamen. js in note. js ist bei weitem der Standard

03:10.010 --> 03:13.482
und die häufigste Art, Importe und Exporte hinzuzufügen.

03:13.482 --> 03:16.060
Syntax, die so aussieht wie diese, wird unterstützt,

03:16.060 --> 03:18.380
wenn Sie dieses experimentelle Flag setzen, aber

03:18.380 --> 03:19.990
hier in diesem Code verwenden wir

03:19.990 --> 03:24.012
diesen experimentellen Knoten nicht. js-Syntax.

03:24.012 --> 03:26.209
Stattdessen verwenden wir TypeScript.

03:26.209 --> 03:29.859
Sobald wir dies in JavaScript kompilieren, wird sich dies ändern.

03:29.859 --> 03:31.860
Und das kann ich Ihnen sogar zeigen,

03:31.860 --> 03:34.060
damit wir das auch ausführen können.

03:34.060 --> 03:36.230
Wenn Sie hier "tsc" ausführen, vielleicht

03:36.230 --> 03:40.330
"tsc-w", um bereits in den Überwachungsmodus zu gelangen, sehen Sie, dass

03:40.330 --> 03:42.680
dies die Kompilierung startet.

03:42.680 --> 03:44.110
Es wird ein dist-Ordner erstellt, und darin

03:44.110 --> 03:46.770
befindet sich jetzt eine App. js-Datei, und

03:46.770 --> 03:50.040
hier sieht das jetzt anders aus.

03:50.040 --> 03:54.500
Sehen Sie, dort wird der Import nicht so eingerichtet, wie wir

03:54.500 --> 03:55.710
es hier haben.

03:55.710 --> 03:58.900
Es wird stattdessen eine andere Syntax verwendet.

03:58.900 --> 04:02.350
Dies ist also der Code, der tatsächlich ausgeführt wird.

04:02.350 --> 04:04.780
Und wir können dies mit nodemon mit diesem Tool

04:04.780 --> 04:07.640
ausführen, das den Server automatisch neu startet, wenn

04:07.640 --> 04:09.470
sich unser Code ändert, indem wir eine

04:09.470 --> 04:12.230
neue Registerkarte hier im Terminal öffnen.

04:12.230 --> 04:13.620
Lassen Sie die andere Registerkarte

04:13.620 --> 04:15.960
offen, weil das unser TypeScript-Kompilierungsprozess

04:15.960 --> 04:18.760
ist, und in dieser neuen Registerkarte wollen wir unseren Server mit

04:18.760 --> 04:20.095
Hilfe von nodemon starten.

04:20.095 --> 04:22.990
Lassen Sie uns dazu das Paket ansehen. json-Datei und fügen Sie

04:22.990 --> 04:26.260
ein neues Skript hinzu, vielleicht ein Startskript,

04:26.260 --> 04:30.900
in dem wir "nodemon dist/app. js", so dass nodemon diese Datei

04:30.900 --> 04:34.200
im dist-Ordner ausführt und damit unseren

04:34.200 --> 04:36.360
Server startet.

04:36.360 --> 04:39.430
Und damit auch das Paket. json-Datei gespeichert haben,

04:39.430 --> 04:43.240
können wir npmstart ausführen, um unseren Entwicklungsserver zu starten.

04:43.240 --> 04:47.710
Und jetzt dient es dieser dist app. js-Datei Das ist das allgemeine Setup, das

04:47.710 --> 04:49.230
wir haben, und das ist TypeScript,

04:49.230 --> 04:52.030
das hier bereits etwas Arbeit leistet.

04:52.030 --> 04:53.940
Wir haben auch TypeSupport.

04:53.940 --> 04:55.360
Und hier sehen Sie in app. ts können wir Code

04:55.360 --> 04:57.756
schreiben, der uns mit der uns bereits bekannten Import/Export-Syntax

04:57.756 --> 05:01.420
sehr vertraut vorkommt, aber was wir als Ausgabe erhalten, ist letztlich ein

05:01.420 --> 05:07.000
normaler JavaScript-Knoten.

05:07.000 --> 05:07.000
js-Code

05:07.000 --> 05:09.640
und das ist äußerst nützlich.

05:09.640 --> 05:12.140
Jetzt sollten wir etwas Sinnvolleres tun,

05:12.140 --> 05:15.003
als nur einen Server zu starten, der nichts tut.
