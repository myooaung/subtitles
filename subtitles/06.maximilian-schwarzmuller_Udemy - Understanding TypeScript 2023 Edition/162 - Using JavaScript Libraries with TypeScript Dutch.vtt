WEBVTT

00:02.120 --> 00:05.910
-: Nu beginnen we met een zeer populaire nutsbibliotheek,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Wat je hier leert dient als voorbeeld voor elke

00:09.840 --> 00:13.250
JavaScript-bibliotheek die je wilt gebruiken.

00:13.250 --> 00:17.430
Of dat nu Lodash, jQuery of iets anders is.

00:17.430 --> 00:19.510
Nu een kleine kanttekening op dit punt, als je

00:19.510 --> 00:21.640
geïnteresseerd bent in het werken met React en

00:21.640 --> 00:26.718
TypeScript of laten we zeggen Node.

00:26.718 --> 00:26.718
js. en

00:26.718 --> 00:31.350
Express en TypeScript, daar heb ik later in de cursus speciale modules over,

00:31.350 --> 00:33.760
want daar leer je wat meer dan alleen het

00:33.760 --> 00:35.730
toevoegen met TypeScript.

00:35.730 --> 00:40.470
Maar voor eenvoudigere bibliotheken, zoals Lodash, jQuery en dergelijke,

00:40.470 --> 00:43.010
is hier een aanpak die zal werken.

00:43.010 --> 00:45.340
Dus we willen Lodash gebruiken in ons project.

00:45.340 --> 00:48.460
Lodash is natuurlijk een JavaScript-bibliotheek.

00:48.460 --> 00:50.800
We hebben TypeScript niet nodig om het te gebruiken,

00:50.800 --> 00:53.480
we kunnen het gebruiken in elk JavaScript-project

00:53.480 --> 00:56.770
en we kunnen het installeren zoals je in principe hier leert op

00:56.770 --> 00:59.200
de officiële docs van Lodash.

00:59.200 --> 01:01.400
Als je npm gebruikt, wat wij doen, kun

01:01.400 --> 01:06.477
je npm i of npm install uitvoeren, dat is gewoon een korte vorm, "--save/lodash".

01:07.750 --> 01:10.820
Dus hier in dit voorbeeld project dat webpack gebruikt zonder

01:10.820 --> 01:12.640
een productie workflow maar gewoon een

01:12.640 --> 01:14.180
ontwikkelings workflow.

01:14.180 --> 01:16.570
Daar kunnen we deze bibliotheek toevoegen door gewoon nmp

01:16.570 --> 01:18.607
install dash dash save Lodash uit te voeren.

01:18.607 --> 01:21.700
En dit zal het nu installeren in dit project en dankzij

01:21.700 --> 01:23.500
onze webpack setup kunnen we het

01:23.500 --> 01:26.250
gewoon importeren in onze codebestanden en het

01:26.250 --> 01:27.517
daar gebruiken.

01:27.517 --> 01:30.670
En dat zou hetzelfde zijn in elk webpack aangedreven

01:30.670 --> 01:32.250
JavaScript Project.

01:32.250 --> 01:34.990
Als je webpack niet gebruikt, dan kun je natuurlijk

01:34.990 --> 01:37.720
ook gewoon de CDN gebruiken en zo.

01:37.720 --> 01:40.630
Echter, wat ik je in de volgende stappen iets later

01:40.630 --> 01:42.390
in deze module zal laten zien,

01:42.390 --> 01:45.130
zal alleen werken in een webpack opstelling.

01:45.130 --> 01:47.730
Dus hier hebben we een webpack setup, we hebben nu Lodash geïnstalleerd,

01:47.730 --> 01:49.320
en als we het nu willen gebruiken, kunnen

01:49.320 --> 01:51.510
we het hier gewoon importeren.

01:51.510 --> 01:55.600
We kunnen importeren, laten we zeggen underscore van 'Lodash'.

01:55.600 --> 01:57.960
Dat is een syntaxis die beschikbaar zou moeten

01:57.960 --> 01:59.960
zijn met Lodash geïnstalleerd.

01:59.960 --> 02:03.057
Dit geeft nu echter al een foutmelding.

02:03.057 --> 02:06.850
"Kon geen declaratiebestand vinden voor module Lodash".

02:06.850 --> 02:09.890
En we hebben een ander probleem, als je bijvoorbeeld

02:09.890 --> 02:12.230
Lodash wilt gebruiken om een array te shuffelen,

02:12.230 --> 02:16.810
nou dan kunnen we consol log underscore shuffle en dan laten we zeggen een eenvoudige

02:16.810 --> 02:20.430
array doorgeven aan deze shuffle methode.

02:20.430 --> 02:23.110
De shuffle methode is een methode die Lodash ondersteunt.

02:23.110 --> 02:25.790
We kunnen dit leren in de officiële documentatie

02:25.790 --> 02:26.820
van Lodash.

02:26.820 --> 02:29.056
Als je daar zoekt naar "shuffle", leer

02:29.056 --> 02:32.370
je dat je met deze methode een array kunt schudden.

02:32.370 --> 02:37.010
Het zou moeten werken, maar het werkt niet op deze manier,

02:37.010 --> 02:39.480
zoals je kunt zien.

02:39.480 --> 02:43.058
Als ik nu mijn webpack server hier start, zien we dat

02:43.058 --> 02:45.890
het CDN ons een foutmelding geeft.

02:45.890 --> 02:47.077
En opnieuw vertelt het

02:47.077 --> 02:50.940
ons dat het "geen declaratiebestand kan vinden voor module Lodash".

02:50.940 --> 02:54.720
Dus, dit werkt niet echt zoals het zou moeten.

02:54.720 --> 02:57.610
Het probleem is dat Lodash een eenvoudige

02:57.610 --> 02:59.930
JavaScript-bibliotheek is.

02:59.930 --> 03:02.250
Het is gebouwd met vanilla JavaScript,

03:02.250 --> 03:05.150
en het is gebouwd voor vanilla JavaScript.

03:05.150 --> 03:08.530
We kunnen dit controleren als we naar node modules gaan, waar we veel

03:08.530 --> 03:10.280
afhankelijkheden hebben, omdat we

03:10.280 --> 03:12.450
daar veel afhankelijkheden hebben van webpack

03:12.450 --> 03:14.220
en zijn afhankelijkheden.

03:14.220 --> 03:17.010
Maar hier, als we zoeken naar Lodash,

03:17.010 --> 03:17.930
hier is het.

03:17.930 --> 03:21.330
En we breiden uit zoals we zien dat er een hoop JavaScript bestanden

03:21.330 --> 03:22.750
in zitten, toch?

03:22.750 --> 03:26.380
En dat staat in alle Lodash broncode.

03:26.380 --> 03:30.010
Een hoop JavaScript-code, maar zeker geen TypeScript-code.

03:30.010 --> 03:31.750
Wat is het probleem daarmee?

03:31.750 --> 03:35.550
Het probleem is dat TypeScript niet begrijpt wat er

03:35.550 --> 03:37.070
in dit pakket zit.

03:37.070 --> 03:41.020
Het begrijpt niet welke methodes Lodash exporteert.

03:41.020 --> 03:43.480
Nu zul je zien dat het echt werkt als we naar de

03:43.480 --> 03:45.500
tsconfig gaan. json bestand.

03:45.500 --> 03:48.740
En we zorgen ervoor dat we bij een fout een uitvoer geven.

03:48.740 --> 03:52.650
Dus als we "noEmitOnError" op "false" zetten, zodat we wel nieuwe

03:52.650 --> 03:55.770
uitvoer uitzenden als er iets fout gaat.

03:55.770 --> 03:57.600
Voorlopig, start dit opnieuw,

03:57.600 --> 04:00.230
het zal uiteindelijk dezelfde fout geven,

04:00.230 --> 04:02.160
dus dat zullen we nog zien.

04:02.160 --> 04:05.090
Maar als ik deze pagina hier herlaad, krijg je

04:05.090 --> 04:07.120
eigenlijk een output hier.

04:07.120 --> 04:08.922
U kunt de fout onderaan negeren,

04:08.922 --> 04:12.580
u ziet een uitvoer die de geschudde array is.

04:12.580 --> 04:14.920
Zie je, het ziet er elke keer anders uit als ik herlaad.

04:14.920 --> 04:16.530
En dat is heel interessant.

04:16.530 --> 04:19.770
Het bewijst dat Lodash werkt, het bewijst dat

04:19.770 --> 04:21.280
deze code klopt.

04:21.280 --> 04:24.170
Maar helaas begrijpt TypeScript dat niet, en dat

04:24.170 --> 04:28.400
kan ook niet omdat Lodash JavaScript gebruikt, niet TypeScript.

04:28.400 --> 04:31.220
Nu is het probleem dat er geen TypeScript de versie

04:31.220 --> 04:34.080
van Lodash is, dus daar moeten we mee leven.

04:34.080 --> 04:37.220
En dat is een scenario dat je vaak zult tegenkomen.

04:37.220 --> 04:39.365
Je wilt een bepaalde bibliotheek van derden

04:39.365 --> 04:42.270
gebruiken, en die is alleen gebouwd voor JavaScript, en

04:42.270 --> 04:44.210
daarom krijg je zulke fouten.

04:44.210 --> 04:46.060
Dit is vervelend omdat we het in theorie natuurlijk

04:46.060 --> 04:47.430
kunnen gebruiken.

04:47.430 --> 04:49.630
TypeScript bouwt voort op JavaScript.

04:49.630 --> 04:53.160
We kunnen elke JavaScript-bibliotheek gebruiken in een TypeScript-project,

04:53.160 --> 04:56.150
we moeten hem alleen vertalen naar TypeScript.

04:56.150 --> 04:58.890
En dat is gelukkig mogelijk.

04:58.890 --> 05:02.564
Dus laat me deze instelling hier aanzetten, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Ik zal u laten zien hoe we TypeScript kunnen vertellen

05:07.200 --> 05:10.053
over Lodash en over wat het biedt.

05:11.140 --> 05:13.662
U kunt de zogenaamde types van een bibliotheek

05:13.662 --> 05:16.250
van derden installeren.

05:16.250 --> 05:20.050
Als u zoekt naar Lodash-types, vindt u een

05:20.050 --> 05:24.140
npm-pakket dat hier "@types/lodash" heet.

05:24.140 --> 05:26.440
Daar zie je ook het commando installeren, dat over

05:26.440 --> 05:28.120
een seconde wordt uitgevoerd.

05:28.120 --> 05:30.580
Maar als je naar beneden gaat naar details vind je ook

05:30.580 --> 05:32.220
een link naar github repository.

05:32.220 --> 05:36.320
Het linkt naar DefinitelyTyped, wat een enorme opslagplaats

05:36.320 --> 05:39.260
is met tonnen vertalingen voor allerlei bibliotheken

05:39.260 --> 05:40.820
van derden.

05:40.820 --> 05:43.120
Hier zijn we in de Lodash map.

05:43.120 --> 05:46.590
En daar vind je zogenaamde . dts-bestanden.

05:46.590 --> 05:50.180
Dus niet alleen. maar. dts.

05:50.180 --> 05:53.460
Dit zijn zogenaamde declaratiebestanden, wat betekent dat ze

05:53.460 --> 05:55.760
geen eigenlijke logica bevatten, maar als we

05:55.760 --> 05:58.750
kijken naar de shuffle . dts bestand, bevatten

05:58.750 --> 06:01.848
ze instructies aan TypeScript.

06:01.848 --> 06:05.200
Ze vertellen TypeScript eigenlijk hoe

06:05.200 --> 06:08.720
iets werkt en wat er in dit pakket zit.

06:08.720 --> 06:10.700
En u kunt hier verschillende bestanden in

06:10.700 --> 06:14.280
verschillende submappen verkennen, om daar meer over te weten te komen.

06:14.280 --> 06:17.717
Uiteindelijk bieden deze bestanden dus gewoon

06:17.717 --> 06:21.750
een vertaling van gewoon JavaScript naar TypeScript.

06:21.750 --> 06:23.860
Ze bevatten geen logica die draait, maar

06:23.860 --> 06:26.950
ze definiëren de types waarmee deze bibliotheek werkt.

06:26.950 --> 06:30.010
Ze definiëren de types die je gebruikt, de types die je terugkrijgt

06:30.010 --> 06:32.490
als je een methode aanroept, enzovoort.

06:32.490 --> 06:35.410
U kunt ook zulke . dts-bestanden op uw eigen,

06:35.410 --> 06:38.510
en de officiële types docs bieden een gids daarover als

06:38.510 --> 06:40.470
u daarin geïnteresseerd bent.

06:40.470 --> 06:42.110
Maar voor je eigen type projecten

06:42.110 --> 06:43.160
hoef je dat niet te doen,

06:43.160 --> 06:45.820
want als je TypeScript codes schrijft begrijpt alleen

06:45.820 --> 06:48.110
TypeScript dat natuurlijk.

06:48.110 --> 06:50.310
Maar als u werkt met een bibliotheek van

06:50.310 --> 06:53.840
derden, geschreven in JavaScript zonder TypeScript-code,

06:53.840 --> 06:56.860
of zonder ingebouwde . dts-bestanden, die sommige

06:56.860 --> 06:59.950
bibliotheken van derden overigens leveren, zelfs

06:59.950 --> 07:02.240
als ze in JavaScript zijn geschreven,

07:02.240 --> 07:03.960
maar Lodash niet.

07:03.960 --> 07:06.890
Dus als u werkt met een bibliotheek die geen ingebouwde

07:06.890 --> 07:08.330
vertaalbestanden bevat,

07:08.330 --> 07:11.180
en die niet in TypeScript is geschreven, dan

07:11.180 --> 07:15.760
is het gebruik van zulke types pakketten de oplossing.

07:15.760 --> 07:20.760
Dus hier draaien we dan "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
U kunt eigenlijk ook "save-dev" uitvoeren, omdat dev

07:24.600 --> 07:27.920
een afhankelijkheid is die eigenlijk alleen nodig is tijdens

07:27.920 --> 07:29.230
de ontwikkeling, omdat de

07:29.230 --> 07:30.980
code dan sowieso via JavaScript wordt

07:30.980 --> 07:32.360
samengesteld.

07:32.360 --> 07:36.130
En dit installeert nu deze vertaling van TypeScript

07:36.130 --> 07:38.060
om het te begrijpen.

07:38.060 --> 07:40.630
En je ziet, zodra dit is geïnstalleerd,

07:40.630 --> 07:42.510
is deze fout verdwenen.

07:42.510 --> 07:46.220
En als ik nu npm start herstart, zul je zien dat de fout ook

07:46.220 --> 07:48.270
hier niet meer terugkomt.

07:48.270 --> 07:51.640
Dus je ziet nu dat dit zonder fouten werkt,

07:51.640 --> 07:55.190
zowel bij de compilatie als in de browser.

07:55.190 --> 07:57.270
Technisch werkte het voorheen ook,

07:57.270 --> 07:59.160
maar nu met de vertaling kunnen

07:59.160 --> 08:01.580
we ook TypeScript gebruiken.

08:01.580 --> 08:04.660
En bijvoorbeeld nu krijgen we ook alle voltooiing hier,

08:04.660 --> 08:05.493
in de IDE.

08:05.493 --> 08:10.070
Als ik hier een punt intik, zie ik de Lodash methodes die ik kan gebruiken.

08:10.070 --> 08:13.930
Dit is dus een heel belangrijk stukje kennis, iets waar u zeker

08:13.930 --> 08:16.400
van op de hoogte moet zijn, waardoor u gewone,

08:16.400 --> 08:19.370
normale, vanille JavaScript-bibliotheken kunt

08:19.370 --> 08:21.177
gebruiken in een TypeScript-project,

08:21.177 --> 08:24.220
en toch geweldige ondersteuning krijgt, geweldige

08:24.220 --> 08:28.490
auto-aanvulling, en fouten kunt vermijden.

08:28.490 --> 08:33.030
Met de hulp van deze tranlastypes pakketten, zou je kunnen

08:33.030 --> 08:33.990
zeggen.

08:33.990 --> 08:38.990
En deze pakketten, die altijd "@types" heten, en dan de pakketnaam,

08:39.290 --> 08:40.860
bestaan in principe

08:40.860 --> 08:45.270
voor elke populaire bibliotheek van derden die je kunt

08:45.270 --> 08:46.730
vinden.

08:46.730 --> 08:49.960
U kunt altijd zoeken op bibliotheeknaam, en dan bijvoorbeeld

08:49.960 --> 08:51.690
jQuery typen, en dan zou u zo'n

08:51.690 --> 08:54.400
vermelding moeten vinden.

08:54.400 --> 08:57.350
Dus dat is hoe je kunt werken met types in vanille

08:57.350 --> 08:59.373
JavaScript bibliotheken.
