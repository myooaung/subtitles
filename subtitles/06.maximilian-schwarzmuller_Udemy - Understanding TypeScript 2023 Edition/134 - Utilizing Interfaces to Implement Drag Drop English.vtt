WEBVTT

1
00:00:02.190 --> 00:00:05.380
<v Instructor>So let's now come to the end of this project,</v>

2
00:00:05.380 --> 00:00:09.590
and that involves the possibility to drag and drop

3
00:00:09.590 --> 00:00:12.390
a project which we have in one of the boxes,

4
00:00:12.390 --> 00:00:15.170
for example, in the active projects box

5
00:00:15.170 --> 00:00:16.410
into the other box.

6
00:00:16.410 --> 00:00:19.310
So, to basically switch the project from being

7
00:00:19.310 --> 00:00:22.780
an active project to being a finished project.

8
00:00:22.780 --> 00:00:25.430
So, it's also not just about the visual update

9
00:00:25.430 --> 00:00:27.800
it's not just about dragging and dropping it

10
00:00:27.800 --> 00:00:31.050
and updating the UI, it's also about adjusting

11
00:00:31.050 --> 00:00:35.470
the data behind the scenes in our state management class

12
00:00:35.470 --> 00:00:37.790
the project state where we manage a list

13
00:00:37.790 --> 00:00:39.960
of projects in the end, keep in mind

14
00:00:39.960 --> 00:00:42.990
that every project does have a status property

15
00:00:42.990 --> 00:00:45.420
and we'll need to update that as well.

16
00:00:45.420 --> 00:00:48.610
So, two things we need to implement: drag and drop

17
00:00:48.610 --> 00:00:51.800
and then all of this behind the scenes state

18
00:00:51.800 --> 00:00:53.410
and data update.

19
00:00:53.410 --> 00:00:56.220
Now let's start with drag and drop,

20
00:00:56.220 --> 00:00:59.870
and for that we will basically implement drag and drop

21
00:00:59.870 --> 00:01:02.960
as we would do it in vanilla java script

22
00:01:02.960 --> 00:01:04.790
which you, for example, can learn about

23
00:01:04.790 --> 00:01:06.970
in my complete java script guide.

24
00:01:06.970 --> 00:01:09.690
Basically, it's all about implementing a bunch

25
00:01:09.690 --> 00:01:11.960
of event listeners and of course you will see

26
00:01:11.960 --> 00:01:14.800
how it works in this module in the next lectures,

27
00:01:14.800 --> 00:01:17.350
but we'll implement it in typescript style,

28
00:01:17.350 --> 00:01:21.150
so we'll enhance it by using some typescript features.

29
00:01:21.150 --> 00:01:24.240
So, let's get started and how do I want to enhance it

30
00:01:24.240 --> 00:01:25.790
with typescript features?

31
00:01:25.790 --> 00:01:28.423
Well I want to reuse interfaces here.

32
00:01:29.280 --> 00:01:32.120
Drag and drop interfaces,

33
00:01:32.120 --> 00:01:35.470
but not just to define the structure

34
00:01:35.470 --> 00:01:39.060
of some objects as we previously used interfaces

35
00:01:39.060 --> 00:01:42.010
but instead to really setup a contract

36
00:01:42.010 --> 00:01:44.590
which certain classes can sign

37
00:01:44.590 --> 00:01:46.970
to force these classes to,

38
00:01:46.970 --> 00:01:49.690
to basically implement certain methods

39
00:01:49.690 --> 00:01:51.980
that help us with drag and drop.

40
00:01:51.980 --> 00:01:55.250
To be precise I'm thinking about two interfaces,

41
00:01:55.250 --> 00:01:58.590
and of course, using these interfaces will be optional

42
00:01:58.590 --> 00:02:00.920
but this will allow us to, well,

43
00:02:00.920 --> 00:02:04.465
basically provide some code that forces a class

44
00:02:04.465 --> 00:02:06.340
to implement everything it needs

45
00:02:06.340 --> 00:02:09.810
to be draggable or to be a valid drop target

46
00:02:09.810 --> 00:02:12.960
which if we were building a bigger application

47
00:02:12.960 --> 00:02:15.160
could help us write cleaner code

48
00:02:15.160 --> 00:02:17.460
and more understandable code, especially

49
00:02:17.460 --> 00:02:19.080
when working in a team.

50
00:02:19.080 --> 00:02:21.710
So, which interfaces am I talking about?

51
00:02:21.710 --> 00:02:23.160
I want to have one interface,

52
00:02:23.160 --> 00:02:24.617
which I'll name draggable,

53
00:02:26.200 --> 00:02:28.660
and I'll have a second interface

54
00:02:28.660 --> 00:02:31.060
which I'll name drag target.

55
00:02:31.060 --> 00:02:32.950
My idea here is that we can add

56
00:02:32.950 --> 00:02:35.710
the draggable interface to any class

57
00:02:35.710 --> 00:02:38.030
that renders and element which can be draggable.

58
00:02:38.030 --> 00:02:41.810
In our example, that would be the project item class.

59
00:02:41.810 --> 00:02:44.170
The project item class is responsible

60
00:02:44.170 --> 00:02:46.600
for rendering, well, these project items

61
00:02:46.600 --> 00:02:49.230
and these should be the draggable pieces,

62
00:02:49.230 --> 00:02:53.320
and the boxes, active projects and finished projects,

63
00:02:53.320 --> 00:02:57.880
so here our project list class should be drag targets.

64
00:02:57.880 --> 00:03:02.100
Now, what do these interfaces force to be implemented

65
00:03:02.100 --> 00:03:03.890
or to be added to the classes then?

66
00:03:03.890 --> 00:03:05.760
Let's start with draggable.

67
00:03:05.760 --> 00:03:09.550
Here, we basically need two event listeners

68
00:03:09.550 --> 00:03:12.540
and therefore two handlers for these events.

69
00:03:12.540 --> 00:03:17.070
A drag start handler, which will be a method

70
00:03:17.070 --> 00:03:19.733
and a drag end handler,

71
00:03:22.020 --> 00:03:24.180
because when implementing drag and drop

72
00:03:24.180 --> 00:03:26.070
the thing which you want to drag

73
00:03:26.070 --> 00:03:29.840
will require some listener that listens

74
00:03:29.840 --> 00:03:32.330
to the start of that drag event

75
00:03:32.330 --> 00:03:34.540
and also, potentially a listener

76
00:03:34.540 --> 00:03:36.560
that listens to the end of the drag event

77
00:03:36.560 --> 00:03:39.020
so that can do any kind of updates there

78
00:03:39.020 --> 00:03:40.440
which you want to do.

79
00:03:40.440 --> 00:03:42.580
Now, the drag start event handler

80
00:03:42.580 --> 00:03:44.225
will get an event object which we

81
00:03:44.225 --> 00:03:47.370
will have called drag event, that's a built in type,

82
00:03:47.370 --> 00:03:51.010
types with options libs, because of our TS conflict setup

83
00:03:51.010 --> 00:03:53.210
and the libs we're adding there

84
00:03:53.210 --> 00:03:55.330
and it will not return anything

85
00:03:55.330 --> 00:03:57.600
it will be a method which executes

86
00:03:57.600 --> 00:03:59.882
but which then just does something,

87
00:03:59.882 --> 00:04:01.900
configures the drag event for example,

88
00:04:01.900 --> 00:04:03.930
but does not return.

89
00:04:03.930 --> 00:04:06.970
Now the drag end handler gets a similar event,

90
00:04:06.970 --> 00:04:10.730
it also gets a drag event and it all returns nothing.

91
00:04:10.730 --> 00:04:13.130
Now, of course you will see how we apply those

92
00:04:13.130 --> 00:04:15.810
in just a few seconds, so bare with me.

93
00:04:15.810 --> 00:04:17.810
Now, what about the drag target?

94
00:04:17.810 --> 00:04:20.530
Well, for the target, so the box

95
00:04:20.530 --> 00:04:22.620
onto which we can drag something

96
00:04:22.620 --> 00:04:26.280
there are three event handlers I want to implement.

97
00:04:26.280 --> 00:04:28.593
A drag over handler,

98
00:04:29.440 --> 00:04:31.800
a drop handler,

99
00:04:31.800 --> 00:04:34.280
and a drag leave handler.

100
00:04:34.280 --> 00:04:36.470
Now, what do these things do?

101
00:04:36.470 --> 00:04:39.370
Now, you need to implement a drag over handler

102
00:04:39.370 --> 00:04:41.960
when implementing drag and drop in java script

103
00:04:41.960 --> 00:04:45.140
to basically signal the browser in java script

104
00:04:45.140 --> 00:04:48.060
that the thing you're dragging something over

105
00:04:48.060 --> 00:04:50.160
is a valid drag target.

106
00:04:50.160 --> 00:04:53.840
If you don't do the right in the drag over handler,

107
00:04:53.840 --> 00:04:56.410
dropping will not be possible.

108
00:04:56.410 --> 00:04:57.980
You need the drop handler then

109
00:04:57.980 --> 00:05:00.760
to react to the actual drop that happens,

110
00:05:00.760 --> 00:05:03.960
so if the drag over handler will permit the drop

111
00:05:03.960 --> 00:05:06.500
with the drop handler will handle the drop

112
00:05:06.500 --> 00:05:08.650
and then here we can update our data

113
00:05:08.650 --> 00:05:11.960
and UI for example and the drag leave handler

114
00:05:11.960 --> 00:05:14.500
can be useful if we're, for example,

115
00:05:14.500 --> 00:05:16.940
giving some visual feedback to the user

116
00:05:16.940 --> 00:05:19.880
when he or she drags something over the box

117
00:05:19.880 --> 00:05:22.210
for example, we change the background color

118
00:05:22.210 --> 00:05:25.790
well if no drop happens and instead it's canceled

119
00:05:25.790 --> 00:05:28.410
or the user moves the element away we can use

120
00:05:28.410 --> 00:05:32.190
the drag leave handler to revert our visual update.

121
00:05:32.190 --> 00:05:36.250
Now, all three handlers all receive a drag event

122
00:05:36.250 --> 00:05:37.990
and don't return anything,

123
00:05:37.990 --> 00:05:41.473
so let's update them appropriately like this.

124
00:05:44.070 --> 00:05:47.250
And also for this last handler here.

125
00:05:47.250 --> 00:05:49.810
And now we configured some interfaces

126
00:05:49.810 --> 00:05:52.840
which on their own don't do much,

127
00:05:52.840 --> 00:05:55.710
but now we can use them and I want to start

128
00:05:55.710 --> 00:05:57.490
with the project item.

129
00:05:57.490 --> 00:06:00.380
So let's find our project item class for this

130
00:06:00.380 --> 00:06:02.710
here's the component, here's the project item,

131
00:06:02.710 --> 00:06:05.100
and now you might remember that an interface

132
00:06:05.100 --> 00:06:08.540
cannot just be used to define a custom object type

133
00:06:08.540 --> 00:06:12.290
but that you can use it as a contract on a class.

134
00:06:12.290 --> 00:06:15.760
You can call implements, or add implements here

135
00:06:15.760 --> 00:06:16.750
after your class name

136
00:06:16.750 --> 00:06:19.290
and after potential extensions you are doing

137
00:06:19.290 --> 00:06:20.900
and then implement the interface.

138
00:06:20.900 --> 00:06:24.340
In this case, the draggable interface.

139
00:06:24.340 --> 00:06:27.250
Now, when you do so, and I just formatted this

140
00:06:27.250 --> 00:06:29.820
to bring it in a new line to make it easier to read.

141
00:06:29.820 --> 00:06:31.393
When you do so, you get an error now

142
00:06:31.393 --> 00:06:34.460
that that the class here incorrectly implements

143
00:06:34.460 --> 00:06:38.600
the interface because that draggable interface forces us

144
00:06:38.600 --> 00:06:40.763
to add two methods, if you remember.

145
00:06:42.840 --> 00:06:44.480
So, let's add them here.

146
00:06:44.480 --> 00:06:46.290
Maybe we'll load a constructor.

147
00:06:46.290 --> 00:06:49.550
Let's add a drag start handler

148
00:06:49.550 --> 00:06:53.610
which gets an event of type drag event

149
00:06:53.610 --> 00:06:56.500
and let's also add our drag end handler

150
00:06:56.500 --> 00:06:59.143
which receives our drag event.

151
00:06:59.990 --> 00:07:02.010
And now we have these two methods added.

152
00:07:02.010 --> 00:07:05.330
Now, that alone does not enable drag and drop.

153
00:07:05.330 --> 00:07:08.900
It just helps us write draggable components

154
00:07:08.900 --> 00:07:11.880
or draggable classes in a uniform way,

155
00:07:11.880 --> 00:07:14.560
so if we add more and more classes

156
00:07:14.560 --> 00:07:18.210
which should be draggable, we always will have these methods

157
00:07:18.210 --> 00:07:20.700
which simply makes it easier to reason about our code

158
00:07:20.700 --> 00:07:22.870
and to work our code, especially when working

159
00:07:22.870 --> 00:07:25.520
in a team, because everyone knows where to put

160
00:07:25.520 --> 00:07:27.840
in work for the drag start event.

161
00:07:27.840 --> 00:07:31.340
Now what this does not do, of course, is listen

162
00:07:31.340 --> 00:07:32.950
to a drag start event.

163
00:07:32.950 --> 00:07:35.010
That's something we can do in the configure method

164
00:07:35.010 --> 00:07:36.730
which you already have though.

165
00:07:36.730 --> 00:07:38.980
We can reach out to our rendered element

166
00:07:38.980 --> 00:07:41.090
and add an event listener to it

167
00:07:41.090 --> 00:07:43.890
and there, that would be the drag start event.

168
00:07:43.890 --> 00:07:45.780
The drag start event is one event,

169
00:07:45.780 --> 00:07:49.190
one default browser dom event you can listen to

170
00:07:49.190 --> 00:07:51.750
and the even handler we want to trigger,

171
00:07:51.750 --> 00:07:53.740
of course, is the drag

172
00:07:55.320 --> 00:07:57.793
start handler, at which we can point here.

173
00:07:59.080 --> 00:08:00.750
Now, we also want to be sure that

174
00:08:00.750 --> 00:08:02.460
inside of the drag start handler

175
00:08:02.460 --> 00:08:04.870
that this keyword refers to our class

176
00:08:04.870 --> 00:08:06.560
and as you learn with event listeners

177
00:08:06.560 --> 00:08:08.530
that would by default would not be the case,

178
00:08:08.530 --> 00:08:11.810
so we could use bind here and bind this

179
00:08:11.810 --> 00:08:14.750
that would be valid, but we have a better way actually.

180
00:08:14.750 --> 00:08:16.900
We added out auto bind decorator

181
00:08:16.900 --> 00:08:18.550
so I'm just going to add this here

182
00:08:18.550 --> 00:08:20.303
to the drag start handler.

183
00:08:21.210 --> 00:08:26.070
Now, we can also listen to the drag end event here

184
00:08:26.070 --> 00:08:28.530
and point at the drag end handler.

185
00:08:28.530 --> 00:08:30.400
You can also add auto bind there

186
00:08:30.400 --> 00:08:32.690
if you plan on using the vis keyword here

187
00:08:32.690 --> 00:08:35.830
for the moment I will just log drag end

188
00:08:35.830 --> 00:08:37.730
in here so that we see that is triggered

189
00:08:37.730 --> 00:08:40.520
because here I actually have nothing specific I want to do

190
00:08:40.520 --> 00:08:44.410
with it and therefore I will also blank this parameter

191
00:08:44.410 --> 00:08:47.310
and basically tell typescript that I'm not using it.

192
00:08:47.310 --> 00:08:49.850
Here in drag start, we will use event

193
00:08:49.850 --> 00:08:51.730
and for the moment, I'll just log the event,

194
00:08:51.730 --> 00:08:53.720
when this event occurs.

195
00:08:53.720 --> 00:08:55.610
Now, that alone won't do the trick though.

196
00:08:55.610 --> 00:08:57.000
If you save everything

197
00:08:57.000 --> 00:08:59.230
and you add some project here,

198
00:08:59.230 --> 00:09:01.460
you'll see that you can't re-drag it, right?

199
00:09:01.460 --> 00:09:04.750
If you try to drag it, that will not work

200
00:09:04.750 --> 00:09:07.390
because you'll also need to change something

201
00:09:07.390 --> 00:09:09.720
in your HTML file.

202
00:09:09.720 --> 00:09:11.810
On this list item, which is getting rendered

203
00:09:11.810 --> 00:09:14.550
for every project, which is the thing you want to drag,

204
00:09:14.550 --> 00:09:18.380
you have to add the draggable attribute

205
00:09:18.380 --> 00:09:19.830
and set this to true.

206
00:09:19.830 --> 00:09:21.040
That is important.

207
00:09:21.040 --> 00:09:24.200
This tells the browser that this will be draggable.

208
00:09:24.200 --> 00:09:28.430
With that, if you saved it, and you re-add a project here,

209
00:09:28.430 --> 00:09:30.400
you see now, this indeed is draggable,

210
00:09:30.400 --> 00:09:32.070
it now is stuck to my mouse

211
00:09:32.070 --> 00:09:35.720
and now we can really move it around here just fine.

212
00:09:35.720 --> 00:09:38.530
You'll also see on the right that a drag event fired

213
00:09:38.530 --> 00:09:41.390
when I started dragging and if I let go, you'll see

214
00:09:41.390 --> 00:09:43.860
the drag end event also fires.

215
00:09:43.860 --> 00:09:46.510
So our listeners are connected

216
00:09:46.510 --> 00:09:50.540
and we can drag, now we can work on the drop target

217
00:09:50.540 --> 00:09:53.200
so on the box where this should be draggable to,

218
00:09:53.200 --> 00:09:56.560
to then add the project to that box.

219
00:09:56.560 --> 00:09:58.660
One this I will also do real quick

220
00:09:58.660 --> 00:10:02.930
is in the apps.css file, on the list items,

221
00:10:02.930 --> 00:10:06.550
so on projects LI, I will add a background color

222
00:10:06.550 --> 00:10:09.810
of white simply so that we can see this a bit better.

223
00:10:09.810 --> 00:10:12.350
So here, project LI, I added the white

224
00:10:12.350 --> 00:10:15.800
so that when we do drag around the project here,

225
00:10:15.800 --> 00:10:17.370
we do have the white background here

226
00:10:17.370 --> 00:10:19.150
so this makes it a bit easier to see.

227
00:10:19.150 --> 00:10:20.840
Doesn't change our next step though.

228
00:10:20.840 --> 00:10:22.700
We want to make his dropabble.

