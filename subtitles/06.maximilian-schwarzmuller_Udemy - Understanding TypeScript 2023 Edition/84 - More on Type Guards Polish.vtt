WEBVTT

00:02.220 --> 00:04.080
-: Teraz typy skrzyżowań to jedna rzecz.

00:04.080 --> 00:05.470
Częściej jednak używana jest

00:05.470 --> 00:07.800
inna funkcja, a byłyby to strażniki typów, funkcja,

00:07.800 --> 00:10.590
z której właściwie już trochę korzystaliśmy.

00:10.590 --> 00:12.400
Użyjmy tutaj Combinable.

00:12.400 --> 00:15.560
Jest to typ unii, w którym albo mamy ciąg znaków, albo liczbę,

00:15.560 --> 00:18.020
a strażnicy typów pomagają nam z typami unii,

00:18.020 --> 00:21.050
ponieważ chociaż miło jest mieć elastyczność, często

00:21.050 --> 00:23.610
musisz wiedzieć, który dokładny typ dostajesz

00:23.610 --> 00:26.200
teraz w czasie biegu.

00:26.200 --> 00:28.630
Powiedzmy, że mamy tutaj naszą funkcję

00:28.630 --> 00:33.070
add, gdzie dostaję liczbę, która musi być typu Combinable, więc łańcuch

00:33.070 --> 00:35.100
lub liczba, i dlatego faktycznie

00:35.100 --> 00:37.990
nazwę ją tutaj a, a następnie mam inny argument,

00:37.990 --> 00:39.520
który również musi być Combinable,

00:39.520 --> 00:42.110
więc liczba lub łańcuch, a następnie chcę

00:42.110 --> 00:44.640
zwrócić a plus b.

00:44.640 --> 00:47.020
W przeszłości widzieliśmy, że to nie działa.

00:47.020 --> 00:51.320
Zamiast tego musimy teraz sprawdzić, czy typeof

00:51.320 --> 00:53.740
a jest równy np. stringowi

00:55.660 --> 00:59.780
lub typeof b jest równy stringowi i jeśli tak

00:59.780 --> 01:01.000
jest, to zwracamy

01:01.000 --> 01:04.681
a. toString plus b. toString.

01:04.681 --> 01:06.750
Więc konkatenujemy te dwa ciągi; w przeciwnym

01:06.750 --> 01:09.570
razie, jeśli nie zrobić go w tej instrukcji if, zwracamy

01:09.570 --> 01:11.510
a plus b tak, ponieważ teraz grupa typów

01:11.510 --> 01:13.270
wie, że a i b muszą być liczbami tutaj,

01:13.270 --> 01:15.620
ponieważ jeśli przynajmniej jeden z nich

01:15.620 --> 01:19.710
nie byłby liczbą, bylibyśmy w tym miejscu.

01:19.710 --> 01:22.890
Teraz to tutaj jest nazywane strażnikiem typu,

01:22.890 --> 01:25.280
ponieważ pozwala nam wykorzystać

01:25.280 --> 01:27.980
elastyczność, jaką dają nam typy unii

01:27.980 --> 01:32.550
i nadal zapewnić, że nasz kod działa poprawnie w czasie rzeczywistym,

01:32.550 --> 01:34.830
ponieważ często masz funkcje,

01:34.830 --> 01:38.160
które działają z dwoma lub trzema różnymi typami,

01:38.160 --> 01:40.570
a zatem typ unii jest idealny, ale

01:40.570 --> 01:43.890
to, co dokładnie robisz z wartościami, zależy

01:43.890 --> 01:46.940
od typu, jak tutaj, gdzie albo konkatenujemy,

01:46.940 --> 01:51.670
albo dodajemy matematycznie.

01:51.670 --> 01:55.310
Teraz to strażnik typu używający typeof.

01:55.310 --> 01:58.970
Możesz również napisać inne rodzaje strażników typów.

01:58.970 --> 02:00.880
i w tym celu wrócę do moich typów admina

02:00.880 --> 02:03.050
i pracownika, które mam tam na górze,

02:03.050 --> 02:04.950
gdzie mam uprawnienia na admina

02:04.950 --> 02:06.943
i startDate na pracownika.

02:08.590 --> 02:11.810
Teraz mamy ElevatedEmployee, który łączy oba te elementy.

02:11.810 --> 02:14.980
Teraz również utwórz tutaj kolejny typ.

02:14.980 --> 02:16.330
To jest właśnie UnknownEmployee.

02:18.000 --> 02:21.940
To jest albo tylko pracownik albo admin.

02:21.940 --> 02:25.540
Mamy więc typ unii wykorzystujący moje dwa niestandardowe typy obiektów.

02:25.540 --> 02:28.173
Tak więc nieznany pracownik jest albo jednym albo drugim.

02:29.230 --> 02:32.003
Teraz możemy mieć funkcję, printEmployeeInformation,

02:34.620 --> 02:36.420
gdzie muszę przekazać pracownika,

02:36.420 --> 02:39.660
a to powinno być typu nieznanego pracownika.

02:39.660 --> 02:41.610
Teraz tutaj, chcę pocieszyć. rejestrować

02:41.610 --> 02:44.030
różne informacje o pracowniku.

02:44.030 --> 02:47.210
Na przykład nazwa z emp. nazwa, co będzie działać

02:47.210 --> 02:48.580
bez problemów, ponieważ

02:48.580 --> 02:52.140
oba typy pracowników mają właściwość name.

02:52.140 --> 02:56.730
Ale wtedy chcę też pocieszyć. rejestrować uprawnienia poprzez

02:58.160 --> 03:01.520
dostęp do emp. privileges, i tu już mam

03:01.520 --> 03:04.350
problemy w autouzupełnianiu, bo TypeScript

03:04.350 --> 03:07.100
nie może potwierdzić, że to zawsze istnieje

03:07.100 --> 03:09.890
na argumencie, bo UnknownEmployee może

03:09.890 --> 03:13.540
być normalnym pracownikiem, który nie ma właściwości

03:13.540 --> 03:16.260
privileges.

03:16.260 --> 03:18.330
Tylko admin ma takie możliwości.

03:18.330 --> 03:20.100
Więc teraz potrzebujemy tutaj strażnika typu.

03:20.100 --> 03:24.530
Problem po prostu jest z typeof, nic nie wygramy.

03:24.530 --> 03:26.830
Jeśli sprawdzimy typ pracownika,

03:26.830 --> 03:29.470
to w runtime będzie to po prostu obiekt.

03:29.470 --> 03:31.380
To jednak nie mówi nam, czy ma tę

03:31.380 --> 03:32.940
właściwość, czy nie.

03:32.940 --> 03:34.960
Stąd, jeśli przesunę kod w tym if check, TypeScript

03:34.960 --> 03:37.430
nie jest szczęśliwszy niż wcześniej, ponieważ obiekt

03:37.430 --> 03:39.750
jest, cóż, tylko obiektem.

03:39.750 --> 03:41.920
Nie mówi nam nic o właściwościach.

03:41.920 --> 03:44.980
Nie możemy sprawdzić, czy jest typu Employee,

03:44.980 --> 03:48.130
ponieważ nie jest to typ, który zna JavaScript,

03:48.130 --> 03:49.840
i pamiętaj, że to sprawdzanie

03:49.840 --> 03:52.560
działa w czasie wykonywania i używa JavaScript,

03:52.560 --> 03:56.190
więc możemy tylko porównać typeof dostaje nas z typami,

03:56.190 --> 03:58.010
które zna JavaScript, a to byłby

03:58.010 --> 04:01.920
obiekt, ciąg, liczba i boolean to na, a nasz niestandardowy

04:01.920 --> 04:05.610
typ nie jest częścią tego.

04:05.610 --> 04:07.950
To istnieje tylko w świecie TypeScript,

04:07.950 --> 04:11.020
a nie w skompilowanym świecie JavaScript.

04:11.020 --> 04:13.990
A więc to też nie działa.

04:13.990 --> 04:17.960
Teraz tutaj, naszym obejściem jest użycie innego sprawdzenia if.

04:17.960 --> 04:20.240
Wiemy, że chcemy uzyskać dostęp do uprawnień,

04:20.240 --> 04:25.240
więc moglibyśmy sprawdzić, czy uprawnienia pracowników to coś.

04:26.400 --> 04:28.560
Problem po prostu polega na tym, że TypeScript

04:28.560 --> 04:30.690
nie pozwala nam w ogóle na dostęp do tej właściwości,

04:30.690 --> 04:33.550
nawet na sprawdzenie jej w taki sposób, ale jest inny sposób,

04:33.550 --> 04:36.200
abyśmy mogli to sprawdzić.

04:36.200 --> 04:40.000
Możemy użyć słów kluczowych in, które są wbudowane w JavaScript.

04:40.000 --> 04:43.120
Możemy sprawdzić, czy uprawnienia, zapisane

04:43.120 --> 04:46.690
teraz jako ciąg znaków, znajdują się w emp.

04:46.690 --> 04:49.130
To jest kod JavaScript, który pozwala

04:49.130 --> 04:53.480
sprawdzić, czy to istnieje jako właściwość na pracowniku, a

04:53.480 --> 04:58.380
jeśli tak jest, TypeScript wykrywa to sprawdzenie tutaj, a zatem pozwala

04:58.380 --> 05:01.200
nam uzyskać dostęp do tej właściwości wewnątrz

05:01.200 --> 05:04.543
tego sprawdzenia if tutaj.

05:05.852 --> 05:08.380
I możemy powtórzyć to dla startDate,

05:08.380 --> 05:12.240
a zatem sprawdzić, czy startDate jest właściwością tutaj,

05:12.240 --> 05:15.710
i możemy, zatem, również wyprowadzić to w tym sprawdzeniu

05:16.970 --> 05:18.730
if.

05:18.730 --> 05:23.687
Więc teraz, jeśli wywołamy printEmployeeInformation, i przekażemy tego jednego

05:24.650 --> 05:28.363
pracownika, którego stworzyliśmy, e1, zobaczysz, że to skompilowało

05:31.410 --> 05:34.860
się bez błędów i rzeczywiście, wyprowadza uprawnienia

05:34.860 --> 05:37.430
i, cóż, również tutaj dane powinny po prostu

05:37.430 --> 05:42.530
powiedzieć Data rozpoczęcia tutaj, oczywiście.

05:42.530 --> 05:45.820
Ale dzięki temu daje nam wyjście, którego byśmy oczekiwali.

05:45.820 --> 05:48.590
A z drugiej strony, jeśli przekażemy pracownika,

05:48.590 --> 05:50.950
który nie ma tych wszystkich pól, na przykład

05:50.950 --> 05:53.090
stworzymy takiego w locie, który ma tylko

05:53.090 --> 05:56.383
startDate, ale nie ma uprawnień, to tam wszystko działa i

05:57.850 --> 06:00.370
kompiluje się bez błędów, a o uprawnieniach

06:00.370 --> 06:03.160
po prostu nic nie wypisujemy ze względu na to sprawdzenie

06:03.160 --> 06:05.723
if, które tam mamy.

06:07.650 --> 06:09.800
Podczas pracy z klasami możesz

06:09.800 --> 06:13.070
również użyć innego typu strażnika typu,

06:13.070 --> 06:16.520
a byłby to strażnik typu instanceof.

06:16.520 --> 06:21.460
Powiedzmy, że na dole mamy klasę Car, która ma metodę

06:21.460 --> 06:23.800
drive, gdzie po prostu mówi

06:23.800 --> 06:26.523
console. log Driving, i mamy

06:28.480 --> 06:31.750
inną klasę, Truck, która również ma metodę

06:31.750 --> 06:34.623
drive, lub może powiedzieć Driving

06:35.840 --> 06:38.280
a truck, ale musimy powiedzieć

06:38.280 --> 06:40.250
nazwę metody.

06:40.250 --> 06:43.980
I gdzie mamy również metodę loadCargo, gdzie mamy

06:43.980 --> 06:46.570
kwotę, która jest liczbą, a następnie

06:46.570 --> 06:49.040
tutaj mam po prostu jakiś dummy kod,

06:49.040 --> 06:53.570
w którym mówię: "Ładowanie ładunku plus kwota. Coś takiego, ups, kwota, coś takiego.

06:53.570 --> 06:57.323
Mamy więc teraz dwie klasy, które oczywiście mają pewne

06:58.170 --> 06:59.320
podobieństwo, metodę

06:59.320 --> 07:02.090
napędu, ale mają też różnice.

07:02.090 --> 07:03.890
Teraz, ponownie, możemy

07:03.890 --> 07:08.200
utworzyć typ unii, Vehicle, który jest albo samochodem albo

07:08.200 --> 07:13.030
ciężarówką, a teraz, powiedzmy, tworzymy nowy pojazd, v1, który

07:13.030 --> 07:18.030
jest nowym samochodem, i inny, v2, który jest nową ciężarówką.

07:18.050 --> 07:21.873
Teraz mam funkcję, useVehicle, która po prostu oczekuje,

07:23.890 --> 07:26.443
że otrzyma pojazd, który powinien być typu

07:27.700 --> 07:29.780
vehicle, więc który powinien być

07:29.780 --> 07:31.350
tego typu unii.

07:31.350 --> 07:34.203
Więc tutaj dostajemy pojazd, a teraz, powiedzmy, naszym

07:35.420 --> 07:37.490
celem tutaj jest zrobienie wszystkiego,

07:37.490 --> 07:40.040
co możemy zrobić z pojazdami: jazda i loadCargo.

07:40.040 --> 07:43.400
Możemy więc oczywiście wezwać pojazd. jechać, bo to zawsze istnieje, ale dla

07:43.400 --> 07:45.420
pojazdu. loadCargo, mamy

07:45.420 --> 07:50.010
problem, bo tylko ciężarówka tak ma.

07:50.010 --> 07:52.720
Samochód tego nie ma, więc to nie zadziała.

07:52.720 --> 07:56.440
Teraz możemy oczywiście znów sprawdzić, czy loadCargo jest

07:56.440 --> 07:59.513
w pojeździe, a jeśli tak, to możemy go użyć.

08:00.760 --> 08:05.760
Przynajmniej jeśli poprawię tę literówkę tutaj.

08:06.430 --> 08:09.480
Więc teraz zapisujemy to, a następnie wywołujemy

08:09.480 --> 08:13.230
useVehicle i przekazujemy v1, a następnie wywołujemy go ponownie

08:13.230 --> 08:17.400
z v2, i zapisuję to wszystko, kompiluje się i działa.

08:17.400 --> 08:21.680
To jest jeden ze sposobów.

08:21.680 --> 08:23.340
Alternatywny sposób, który może

08:23.340 --> 08:26.580
być nieco bardziej elegancki, ponieważ eliminuje również

08:26.580 --> 08:28.600
ryzyko, że pomylisz się w tym ciągu właściwości

08:28.600 --> 08:31.920
tutaj, jest to, że używasz instanceof.

08:31.920 --> 08:34.080
Możemy sprawdzić czy vehicle jest instancją Truck.

08:34.080 --> 08:39.080
Jeśli tak jest, to wiemy, że będzie miał metodę loadCargo.

08:39.360 --> 08:42.510
Instancja jest zwykłym operatorem wbudowanym

08:42.510 --> 08:45.230
w vanilla JavaScript, więc nie jest to

08:45.230 --> 08:47.430
żaden kod TypeScript.

08:47.430 --> 08:49.280
Podobnie jak typeof, jest to część

08:49.280 --> 08:52.250
JavaScript i wykonuje się w czasie runtime.

08:52.250 --> 08:54.290
JavaScript nie zna typu Truck, ale zna

08:54.290 --> 08:56.780
funkcje konstruktora, a klasy w końcu są po prostu

08:56.780 --> 08:59.330
tłumaczone na funkcje konstruktora, a TypeScript

08:59.330 --> 09:01.490
jest następnie w stanie dowiedzieć się,

09:01.490 --> 09:03.400
czy pojazd został utworzony na podstawie

09:03.400 --> 09:06.580
funkcji konstruktora Truck.

09:06.580 --> 09:10.290
Więc ponieważ klasy są skompilowane do czegoś, co

09:10.290 --> 09:11.970
JavaScript rozumie, funkcje

09:11.970 --> 09:15.450
konstruktora, jest w stanie tego użyć.

09:15.450 --> 09:17.210
Jeśli zamiast klasy używalibyśmy tutaj

09:17.210 --> 09:20.390
interfejsu, a co za tym idzie, oczywiście nie moglibyśmy mieć tutaj

09:20.390 --> 09:21.223
implementacji, ale

09:21.223 --> 09:22.950
to zrobimy, gdy stworzymy obiekt za

09:22.950 --> 09:25.130
pomocą notacji object literal, to nie moglibyśmy

09:25.130 --> 09:27.300
użyć instanceof, ponieważ interfejsy, jak

09:27.300 --> 09:30.940
się dowiedziałeś, nie są kompilowane do żadnego kodu JavaScript, a co za tym

09:30.940 --> 09:34.370
idzie, nie możemy ich używać w trybie runtime.

09:34.370 --> 09:37.160
Dla klas możemy to zrobić, ponieważ JavaScript obsługuje

09:37.160 --> 09:40.010
klasy i funkcje konstruktora, a dzięki instanceof można

09:40.010 --> 09:42.290
następnie dowiedzieć się, czy jakiś obiekt

09:42.290 --> 09:44.500
jest oparty na tej klasie.

09:44.500 --> 09:47.660
Jeśli wiemy, czy jest, to będziemy mieli funkcję loadCargo.

09:47.660 --> 09:51.850
Są to więc strażnicy typu.

09:51.850 --> 09:53.480
W końcu strażnicy typów

09:53.480 --> 09:55.890
to tylko termin, który opisuje ideę

09:55.890 --> 09:59.470
lub podejście do sprawdzania, czy pewna właściwość

09:59.470 --> 10:02.980
lub metoda istnieje, zanim spróbujesz jej użyć,

10:02.980 --> 10:06.310
lub czy możesz zrobić coś z typem, zanim spróbujesz

10:06.310 --> 10:08.470
go użyć.

10:08.470 --> 10:10.220
Dla obiektów można to zrobić

10:10.220 --> 10:15.113
za pomocą instanceof lub in, dla innych typów można użyć typeof, a zatem masz

10:16.140 --> 10:19.780
teraz całą elastyczność, aby użyć elastyczności typów

10:19.780 --> 10:22.280
unii i nadal pisać kod, który następnie

10:22.280 --> 10:25.090
robi jedną lub drugą rzecz w oparciu o dokładny

10:25.090 --> 10:29.050
typ, który otrzymujesz w czasie rzeczywistym.
