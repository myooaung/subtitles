WEBVTT

00:02.260 --> 00:05.180
Instructor: Ahora, si volvemos a esta interfaz de

00:05.180 --> 00:08.230
aquí, la pregunta es ¿por qué necesitamos esto?

00:08.230 --> 00:10.160
¿No tendríamos exactamente lo mismo

00:10.160 --> 00:13.420
si añadiéramos un tipo personalizado aquí y allá?

00:13.420 --> 00:15.580
La diferencia es que tenemos que añadir un signo

00:15.580 --> 00:18.470
de igualdad y entonces estamos diciendo que el tipo Persona es

00:18.470 --> 00:19.940
un objeto que se parece a esto?

00:19.940 --> 00:21.490
Y efectivamente, si lo guardamos,

00:21.490 --> 00:23.220
se compila sin errores.

00:23.220 --> 00:26.740
Así que podríamos sustituir nuestra interfaz por ese tipo

00:26.740 --> 00:28.490
y funcionaría como antes.

00:28.490 --> 00:31.290
Entonces, ¿por qué tenemos una interfaz?

00:31.290 --> 00:32.277
Bueno, una interfaz

00:32.277 --> 00:35.310
y un tipo personalizado no son exactamente lo mismo,

00:35.310 --> 00:39.260
mientras que a menudo, se pueden utilizar indistintamente y se puede

00:39.260 --> 00:42.130
utilizar una interfaz en lugar de un tipo personalizado

00:42.130 --> 00:43.520
o al revés.

00:43.520 --> 00:45.720
También hay algunas diferencias.

00:45.720 --> 00:47.400
Bueno, una diferencia natural es que

00:47.400 --> 00:49.070
las interfaces sólo se pueden usar

00:49.070 --> 00:51.470
para describir la estructura de un objeto, también

00:51.470 --> 00:53.780
puedes usar tipos para eso, pero en lugar de un tipo

00:53.780 --> 00:55.250
personalizado, también puedes

00:55.250 --> 00:56.800
almacenar otras cosas como tipos

00:56.800 --> 01:00.350
de unión y demás, lo que hicimos al principio del curso.

01:00.350 --> 01:03.740
Eso suena a que el tipo es, por tanto, más flexible,

01:03.740 --> 01:08.510
pero la otra cara de la moneda es que la interfaz es más clara.

01:08.510 --> 01:10.870
Cuando defines algo como una interfaz,

01:10.870 --> 01:12.900
está súper claro que quieres definir

01:12.900 --> 01:15.580
la estructura de un objeto con eso.

01:15.580 --> 01:18.360
Y, de hecho, cuando se trata de definir tipos de objetos,

01:18.360 --> 01:21.630
es más frecuente ver interfaces en la naturaleza.

01:21.630 --> 01:23.800
Luego, se ven los tipos personalizados.

01:23.800 --> 01:26.410
Ahora, otra cosa que puedes hacer con las interfaces

01:26.410 --> 01:27.530
pero que sólo podrías

01:27.530 --> 01:30.090
hacer con los tipos personalizados es que puedes

01:30.090 --> 01:33.360
implementar una interfaz en una clase.

01:33.360 --> 01:34.820
¿Qué queremos decir con eso?

01:34.820 --> 01:38.360
La razón por la que a menudo se trabaja con interfaces es

01:38.360 --> 01:40.550
que una interfaz puede utilizarse

01:40.550 --> 01:43.750
como un contrato que una clase puede implementar

01:43.750 --> 01:46.400
y al que una clase debe adherirse.

01:46.400 --> 01:48.150
¿Qué queremos decir con eso?

01:48.150 --> 01:52.390
Digamos que nuestra interfaz no es una interfaz Persona

01:52.390 --> 01:53.970
con el nombre y la edad,

01:53.970 --> 01:57.690
sino que la llamamos Greetable.

01:57.690 --> 01:59.270
Ahora bien, esto puede parecer

01:59.270 --> 02:01.090
un nombre extraño, pero al final

02:01.090 --> 02:03.560
sólo dice que cualquier objeto que deba ser

02:03.560 --> 02:06.310
tratado como Greetable tiene que ser un objeto

02:06.310 --> 02:09.251
con un nombre y con un método greet.

02:09.251 --> 02:10.783
Así que ahora, podríamos decir

02:10.783 --> 02:14.630
esto aquí, esta variable user1 debe contener un objeto Greetable

02:14.630 --> 02:16.730
y por supuesto ahora obtenemos un error

02:16.730 --> 02:19.930
porque tenemos más que sólo nombre y greet.

02:19.930 --> 02:22.000
Pero podríamos utilizar esta interfaz

02:22.000 --> 02:25.860
para compartirla entre posiblemente múltiples clases tenemos que

02:25.860 --> 02:27.410
asegurarnos de que cada clase

02:27.410 --> 02:30.860
que se adhiere a esta interfaz tiene que tener una propiedad name

02:30.860 --> 02:33.410
y tiene que tener un método greet.

02:33.410 --> 02:35.730
Así que aquí, ahora podríamos añadir una clase Persona, el

02:35.730 --> 02:36.970
nombre está disponible de nuevo

02:36.970 --> 02:38.540
porque hemos renombrado la interfaz.

02:38.540 --> 02:40.790
Y ahora, dile a Typescript y a

02:40.790 --> 02:45.480
esta clase que se adhieran básicamente a esta interfaz.

02:45.480 --> 02:48.350
Debe implementar esta interfaz.

02:48.350 --> 02:53.000
Debe seguir el contrato establecido por esta interfaz.

02:53.000 --> 02:55.260
Lo hacemos añadiendo la palabra clave implements

02:55.260 --> 02:56.930
después del nombre de la clase.

02:56.930 --> 02:59.280
Y luego, el nombre de nuestra interfaz, Greetable.

03:00.420 --> 03:02.780
Y puedes implementar más de una interfaz.

03:02.780 --> 03:04.710
Es una diferencia con respecto a la herencia.

03:04.710 --> 03:07.270
Puedes heredar sólo de una clase, puedes

03:07.270 --> 03:09.370
implementar múltiples interfaces

03:09.370 --> 03:12.730
simplemente separándolas con una coma, así que ahí, podríamos

03:12.730 --> 03:16.000
tener otra interfaz si la tuviéramos.

03:16.000 --> 03:17.710
Sin embargo, aquí sólo tengo uno.

03:17.710 --> 03:20.350
Y ahora, la implicación de esto es que obtenemos

03:20.350 --> 03:21.740
un error aquí porque nuestra

03:21.740 --> 03:25.200
clase implementa incorrectamente la interfaz.

03:25.200 --> 03:27.240
No tiene la propiedad name,

03:27.240 --> 03:29.690
no tiene el método greet.

03:29.690 --> 03:33.960
Así que ahora, tenemos que establecer esto aquí en nuestra clase, tal

03:33.960 --> 03:35.610
vez voy a establecer un constructor

03:35.610 --> 03:38.173
donde obtenemos un valor para el nombre,

03:39.010 --> 03:41.260
y luego configurarlo así, y donde también

03:41.260 --> 03:44.380
añadimos nuestro método greet donde entonces podríamos

03:44.380 --> 03:48.080
tener esta lógica de por ahí.

03:48.080 --> 03:50.780
Ahora, en nuestra clase, podemos tener más que eso.

03:50.780 --> 03:52.340
Podemos tener más campos,

03:52.340 --> 03:53.920
podemos tener más métodos,

03:53.920 --> 03:56.030
también podemos extender esta clase,

03:56.030 --> 03:59.170
podemos trabajar con esta clase como siempre.

03:59.170 --> 04:02.640
Pero estamos obligados a implementar este método correctamente

04:02.640 --> 04:04.400
para tener esta propiedad nombre

04:04.400 --> 04:07.040
porque estamos implementando esta interfaz.

04:07.040 --> 04:09.740
Y por lo tanto, las interfaces se utilizan a menudo

04:09.740 --> 04:13.870
para compartir la funcionalidad entre las diferentes clases sin tener

04:13.870 --> 04:16.550
en cuenta su implementación concreta.

04:16.550 --> 04:19.240
No se pueden tener implementaciones o valores dentro

04:19.240 --> 04:22.450
de las interfaces, pero sí en cuanto a la estructura, en cuanto a

04:22.450 --> 04:24.980
las características que debe tener una clase.

04:24.980 --> 04:28.120
Es un poco como trabajar con clases abstractas, por lo

04:28.120 --> 04:29.640
tanto, la diferencia es que

04:29.640 --> 04:33.520
una interfaz no tiene detalles de implementación en absoluto, mientras

04:33.520 --> 04:37.160
que las clases abstractas pueden ser una mezcla de tienes que

04:37.160 --> 04:39.330
sobrescribir estas partes y tengo una

04:39.330 --> 04:42.470
implementación concreta partes.

04:42.470 --> 04:43.730
Esa es una diferencia importante

04:43.730 --> 04:46.860
entre las interfaces y las clases abstractas.

04:46.860 --> 04:47.850
Ahora, sin embargo,

04:47.850 --> 04:49.790
tenemos nuestra clase de persona aquí.

04:49.790 --> 04:53.910
Y ahora aquí, el usuario1 puede ser creado usando nueva

04:53.910 --> 04:55.930
Persona y alimentando el

04:55.930 --> 04:58.090
nombre por ejemplo.

04:58.090 --> 04:59.730
Y ahora, el uso ver que está

04:59.730 --> 05:02.300
bien que tenemos esta edad aquí en user1 porque

05:02.300 --> 05:05.870
barco user1 basado en Persona, Persona implementa Greetable,

05:05.870 --> 05:07.540
y usted puede agregar más de

05:07.540 --> 05:10.440
Greetable en una clase, pero usted tiene que satisfacer

05:10.440 --> 05:15.120
las condiciones establecidas por la interfaz.

05:15.120 --> 05:17.130
Y por lo tanto ahora, si guardamos todo, tenemos

05:17.130 --> 05:18.730
un código válido, y si registramos nuestro

05:18.730 --> 05:23.040
usuario1 allí abajo con la consola. vemos que es un objeto normal

05:23.040 --> 05:25.430
con la edad y el nombre en este

05:25.430 --> 05:27.590
caso, pero la clave es que

05:27.590 --> 05:30.950
se basa en una clase que implementa la

05:30.950 --> 05:32.770
interfaz.

05:32.770 --> 05:35.550
Y entonces todos pueden utilizar la interfaz como un tipo.

05:35.550 --> 05:37.780
Por supuesto, podríamos haber puesto esto como

05:37.780 --> 05:40.580
tipo Persona, pero como ves, usar el tipo Greetable aquí funciona

05:40.580 --> 05:42.200
porque el objeto Persona que almacenamos

05:42.200 --> 05:46.300
en la clase user1 al final está basado en la interfaz Greetable.

05:46.300 --> 05:47.750
Lo pone en práctica.

05:47.750 --> 05:49.820
Así que esa es otra poderosa característica.

05:49.820 --> 05:53.690
Se puede utilizar una interfaz como tipo en alguna constante

05:53.690 --> 05:58.010
o variable que en realidad almacenará otra clase de otro tipo

05:58.010 --> 06:03.950
que a su vez se basa en el tipo de la interfaz porque la implementa.

06:03.950 --> 06:06.530
Así que esas son las interfaces en pocas palabras.

06:06.530 --> 06:08.643
Incluye un montón de potentes funciones.
