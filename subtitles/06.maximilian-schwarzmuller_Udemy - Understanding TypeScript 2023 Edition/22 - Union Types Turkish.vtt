WEBVTT

00:02.130 --> 00:02.963
Eğitmen: TypeScript'in

00:02.963 --> 00:05.180
bildiği birkaç temel türü ele aldık.

00:05.180 --> 00:06.590
Şimdi devam edelim.

00:06.590 --> 00:09.140
Bunun için uygulamayı yeniden adlandıracağım. Burada objs-arrays-enums

00:09.140 --> 00:11.670
ya da her ne isim vermek isterseniz, temel olarak bu dosyaya

00:11.670 --> 00:12.750
sahip olacağız, ancak

00:12.750 --> 00:17.130
yepyeni bir uygulama oluşturacağım.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
dosyasında çalışabilmemiz için

00:18.860 --> 00:20.500
yine boş bir dosyamız olsun.

00:20.500 --> 00:22.550
Şimdi bu dosyada, TypeScript'te bulabileceğiniz

00:22.550 --> 00:25.790
başka bir ilginç türe dalmak istiyorum.

00:25.790 --> 00:28.640
Ve bu da sendika tipi.

00:28.640 --> 00:30.190
Bu ne şimdi?

00:30.190 --> 00:33.000
Daha önce yazdığımız ekleme fonksiyonumuza geri dönelim,

00:33.000 --> 00:34.490
bunu kopyalayacağım ve uygulamaya

00:34.490 --> 00:37.270
taşıyacağım. ts.

00:37.270 --> 00:39.190
Bu yorumdan kurtulun ve buraya ekleyin,

00:39.190 --> 00:42.940
temel bilgileri kapatalım. Böylece bu hatadan kurtulmuş

00:42.940 --> 00:44.170
oluruz.

00:44.170 --> 00:47.970
Add'de artık burada kabul ettiklerimiz konusunda daha

00:47.970 --> 00:49.920
esnek olmak istiyorum.

00:49.920 --> 00:52.570
Ayrıca showResult ve phrase'den de kurtulacağım,

00:52.570 --> 00:54.370
buna ihtiyacım yok.

00:54.370 --> 00:55.690
Yapmak istediğim tek

00:55.690 --> 00:58.590
şey bir sonuç hesaplamak ve bunu döndürmek.

00:58.590 --> 01:01.960
Ancak girdiler konusunda daha esnek olmak istiyorum.

01:01.960 --> 01:06.045
Daha önce, sadece sayılarla çalıştığımızdan emin olduk.

01:06.045 --> 01:09.357
Şimdi diyelim ki bu birleştirmeyi gerçekten adlandırdık

01:09.357 --> 01:13.190
ve hem sayılarla hem de dizelerle çalışması gerekiyor.

01:13.190 --> 01:15.710
Çünkü bu artı operatörü ile hem sayıları

01:15.710 --> 01:18.595
hem de dizeleri birleştirebileceğimiz ortaya

01:18.595 --> 01:21.650
çıktı, tek fark bir senaryoda sonuç olarak bir sayı

01:21.650 --> 01:24.030
elde ederken, diğer senaryoda aslında

01:24.030 --> 01:27.120
bu modülün başlarında gördüğümüz gibi birleştirilmiş

01:27.120 --> 01:30.150
bir dize elde ediyoruz.

01:30.150 --> 01:32.040
Ancak şimdi bu davranışa izin vermek

01:32.040 --> 01:33.950
istiyorum, çünkü sayılar ve dizelerle

01:33.950 --> 01:36.740
çalışan esnek bir kombinasyon işlevine sahip olmak istediğiniz

01:36.740 --> 01:38.963
bir uygulamanız olabilir.

01:39.830 --> 01:42.360
Bu nedenle, bu girdi1'i ve bu girdi2'yi

01:42.360 --> 01:47.340
de adlandıracağım ve şimdi bu ikisini birleştireceğim.

01:47.340 --> 01:49.740
Ancak elbette bir sorunumuz olacak, şu

01:49.740 --> 01:53.180
anda her iki parametreyi de sayı olarak ayarladık.

01:53.180 --> 01:56.050
Bu, sayılarla çalışmak istediğimiz sürece bu fonksiyonu

01:56.050 --> 01:58.190
çağırabileceğimiz anlamına gelir.

01:58.190 --> 01:59.130
Diyelim ki aşağıda,

01:59.130 --> 02:01.640
combinedAges adında yeni bir sabit oluşturuyoruz.

02:02.931 --> 02:04.690
Ve burada, oluşturduğumuz

02:04.690 --> 02:09.602
uygulamada yaş olarak 30 ve 26'yı birleştirip

02:09.602 --> 02:12.000
geçiyorum.

02:12.000 --> 02:15.014
Konsol günlüğünün birleştirilmesinden sonra bir başkasıAges,

02:15.014 --> 02:17.240
şimdi bu dosyayı burada derlersek ve ardından

02:17.240 --> 02:19.830
bu sayfayı yeniden yüklersek 56 almamız çok şaşırtıcı

02:19.830 --> 02:22.360
olmamalı.

02:22.360 --> 02:24.690
Yani bu işe yarıyor, bu sayıyı elde ediyoruz.

02:24.690 --> 02:26.710
Ancak tabii ki burada bir dize oluşturmaya

02:26.710 --> 02:28.838
çalışırsak bir sorunla karşılaşırız.

02:28.838 --> 02:31.610
CombinedNames, örneğin.

02:31.610 --> 02:36.033
Burada Max ve Anna'yı birleştirmeye çalışırsam, hemen burada

02:37.230 --> 02:39.630
Max'in sayı türüne atanamayacağına

02:39.630 --> 02:42.320
dair bir hata alırız çünkü bu elbette

02:42.320 --> 02:44.350
bir dizedir.

02:44.350 --> 02:45.790
Elbette bunu sayılar yerine dizeleri

02:45.790 --> 02:47.750
kabul edecek şekilde değiştirebiliriz, ancak

02:47.750 --> 02:50.130
şimdi ilk işlev çağrısı başarısız olur.

02:50.130 --> 02:52.750
İşte bu noktada sendika tipleri bize yardımcı olabilir.

02:52.750 --> 02:55.692
Uygulamamızda, bir fonksiyonun parametresi

02:55.692 --> 02:58.810
veya bir sabit ya da bir yerde kullandığımız

02:58.810 --> 03:01.700
bir değişken gibi, iki farklı türde değer

03:01.700 --> 03:05.030
kabul ettiğimiz bir yer varsa.

03:05.030 --> 03:07.410
O zaman, bir sendika tipi bize yardımcı olabilir.

03:07.410 --> 03:09.800
TypeScript'e bir sayı veya dize

03:09.800 --> 03:12.690
ile sorunumuz olmadığını söylemek için,

03:12.690 --> 03:14.220
burada sayı ve ardından

03:14.220 --> 03:17.710
boru sembolünü kullanırız ve ardından diğer

03:17.710 --> 03:20.660
türü de kabul ederiz.

03:20.660 --> 03:22.340
Ve ikiden fazla türünüz olabilir, burada

03:22.340 --> 03:25.220
ihtiyacınız olduğu kadar çok tür kabul edebilirsiniz.

03:25.220 --> 03:27.050
Burada sadece iki taneye ihtiyacım

03:27.050 --> 03:28.880
var ve bu da sayı veya dize ile

03:28.880 --> 03:31.720
yapacağım uygun tür ataması.

03:31.720 --> 03:33.690
Şimdi burada, artı işlecinin dize

03:33.690 --> 03:35.930
veya sayı ve dize veya sayı türlerine

03:35.930 --> 03:39.120
uygulanamayacağına dair bir hata alıyorum.

03:39.120 --> 03:41.500
Aslında bu tam olarak doğru değil, bu işe

03:41.500 --> 03:44.350
yaramalı, çünkü artı operatörünü hem sayılarla

03:44.350 --> 03:46.670
hem de dizelerle kullanabiliriz.

03:46.670 --> 03:49.600
Ancak TypeScript yalnızca burada bir union türümüz

03:49.600 --> 03:52.540
olduğunu görür ve union türünde ne olduğunu analiz

03:52.540 --> 03:56.010
etmez, yalnızca "Tamam, birden çok tür bekliyorsunuz.

03:56.010 --> 03:57.530
Belki de artı operatörünü kullanamadığım

03:57.530 --> 03:59.460
türler de buna dahildir, bu nedenle burada

03:59.460 --> 04:01.640
şikayet edeceğim. Neyse ki artık bu sorunu aşabiliriz.

04:01.640 --> 04:05.410
Çalışma zamanı tip kontrolümüzü buraya ekleyebilir ve

04:05.410 --> 04:07.910
typeof input1'in sayıya eşit olup olmadığına

04:07.910 --> 04:11.240
ve typeof input2'nin sayıya eşit olup olmadığına

04:12.750 --> 04:15.170
bakabilir ve ardından bu hesaplamayı

04:16.530 --> 04:21.283
buraya taşıyabiliriz, şimdi sadece bir iyileştirme, kilit kapsamı nedeniyle

04:24.100 --> 04:28.510
sonucu bu if kontrolünün başlangıcında bir değişken olarak oluşturalım,

04:28.510 --> 04:33.880
böylece bu tüm işlevde kullanılabilen bir değişken olur ve ardından buraya yeni

04:33.880 --> 04:37.873
bir değer atayalım.

04:37.873 --> 04:40.310
Şimdi burada iki sayımız olup olmadığını kontrol ediyoruz.

04:40.310 --> 04:42.818
Bu nedenle TypeScript burada input1 ve input2'nin

04:42.818 --> 04:45.890
her ikisinin de sayı olacağını bilir.

04:45.890 --> 04:49.790
Şimdi buraya başka bir kontrol ekleyelim.

04:49.790 --> 04:53.900
Ve orada sonucu input1'e eşit olarak ayarlayabiliriz. tostring, bunu açıkça bir dizeye

04:53.900 --> 04:56.913
dönüştürür

04:58.550 --> 05:00.570
ve input2. tostring.

05:00.570 --> 05:02.880
İki dizeyi birleştirebildiğimiz

05:02.880 --> 05:04.160
için bu TypeScript ve JavaScript

05:04.160 --> 05:05.700
için de uygun olacaktır.

05:05.700 --> 05:08.220
Şimdi neredeyse aynı hesaplamaya sahibiz, ancak

05:08.220 --> 05:10.800
burada her zaman sayılarla çalışacağımızı, burada

05:10.800 --> 05:12.110
her zaman dizelerle çalışacağımızı

05:12.110 --> 05:13.590
ve ardından sonucu döndürdüğümüzü

05:13.590 --> 05:15.730
açıkça belirttik.

05:15.730 --> 05:17.490
Ve şimdi bununla birlikte, aşağıda

05:17.490 --> 05:20.870
birleştirilmiş isimleri konsol günlüğüne kaydeder ve bu dosyayı

05:20.870 --> 05:25.350
derlersek, sayfamızı tekrar ziyaret ettiğimizde, orada birleştirilmiş sayıları

05:25.350 --> 05:27.210
elde ettiğimizi, bunların basitçe

05:27.210 --> 05:29.278
birbirine eklendiğini ve dolayısıyla

05:29.278 --> 05:33.150
sonuç olarak bir sayı ve burada iki birleştirilmiş isim elde ettiğimizi

05:33.150 --> 05:35.090
göreceğiz.

05:35.090 --> 05:36.850
Örneğin bir fonksiyonda veya kodumuzun

05:36.850 --> 05:40.830
herhangi bir yerinde ne yapacağımız konusunda daha esnek olmak için union

05:40.830 --> 05:43.770
türlerini bu şekilde kullanabiliriz.

05:43.770 --> 05:45.920
Bu ekstra çalışma zamanı tür denetimi, birlik

05:45.920 --> 05:49.520
türleriyle çalışırken her zaman gerekli olmayacaktır, ancak genellikle

05:49.520 --> 05:51.230
gerekli olacaktır çünkü birlik türleriyle,

05:51.230 --> 05:54.090
örneğin kabul ettiğiniz parametrelerde daha esnek olabilirsiniz,

05:54.090 --> 05:56.350
ancak bu durumda, tam olarak hangi türü aldığınıza

05:56.350 --> 05:58.170
bağlı olarak işlevinizde farklı bir mantığa

05:58.170 --> 06:00.940
sahip olabilirsiniz.

06:00.940 --> 06:03.730
Böylece fonksiyonunuz birden fazla değer

06:03.730 --> 06:05.640
türüyle çalışabilir, ancak

06:05.640 --> 06:07.810
aldığınız türe bağlı olarak biraz

06:07.810 --> 06:10.320
farklı şeyler yapar.

06:10.320 --> 06:12.410
Birlik türleriyle çalışırken sık sık böyle bir çalışma

06:12.410 --> 06:15.270
zamanı kontrolüne ihtiyaç duyabilirsiniz, ancak buna her zaman ihtiyacınız

06:15.270 --> 06:16.700
olmayacaktır.

06:16.700 --> 06:18.490
TypeScript programlarında, çalışma

06:18.490 --> 06:20.900
zamanı tür denetimi olmadan bir union türünü kullanabileceğiniz

06:20.900 --> 06:24.060
durumlarla da kesinlikle karşılaşacaksınız.

06:24.060 --> 06:25.870
Bu gerçekten de yazdığınız mantığa bağlıdır.
