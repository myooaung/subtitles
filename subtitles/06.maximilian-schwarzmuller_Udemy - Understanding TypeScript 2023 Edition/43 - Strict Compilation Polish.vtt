WEBVTT

00:02.120 --> 00:02.953
Instruktor: Czyli

00:02.953 --> 00:04.960
to był ważny pierwszy zestaw opcji.

00:04.960 --> 00:07.520
Teraz zanurzmy się w tych surowych opcjach,

00:07.520 --> 00:09.860
ponieważ są one dość interesujące.

00:09.860 --> 00:12.150
Istnieje ta opcja strict true, a właściwie

00:12.150 --> 00:13.590
to, co robi, to włącza wszystkie

00:13.590 --> 00:16.750
opcje ścisłego sprawdzania typu, więc skutecznie ustawiając

00:16.750 --> 00:18.830
to jako to samo, co gdybyś ustawił wszystkie

00:18.830 --> 00:22.110
te opcje osobno.

00:22.110 --> 00:24.830
Możesz więc albo ustawić wszystkie te opcje po

00:24.830 --> 00:27.110
kolei, albo ustawić tylko tę opcję.

00:27.110 --> 00:29.510
Oczywiście, chcesz ustawić poszczególne

00:29.510 --> 00:33.020
opcje, jeśli chcesz mieć niektóre opcje ustawione na false.

00:33.020 --> 00:34.790
'Bo inaczej wszystkie są ustawione na true.

00:34.790 --> 00:36.520
Jeśli chcesz, aby wszystkie były ustawione

00:36.520 --> 00:39.290
na true, wtedy użycie tylko tej opcji jest oczywiście krótsze.

00:39.290 --> 00:41.360
Co jednak robią teraz te opcje?

00:41.360 --> 00:43.213
Zacznijmy od noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny to dość ciekawa opcja, która pomaga

00:47.410 --> 00:49.180
nam pisać lepszy kod.

00:49.180 --> 00:51.370
Przejdźmy do naszego pliku analytics

00:51.370 --> 00:53.963
tutaj, i tam dodajmy funkcję, sendAnalytics,

00:55.270 --> 00:58.070
która dostaje opcję danych powiedzmy, i tam

00:58.070 --> 01:01.010
moglibyśmy wysłać to na serwer, ale tutaj po prostu

01:01.010 --> 01:03.430
loguję konsolę.

01:03.430 --> 01:07.500
Następnie wywołuję sendAnalytics z danymi,

01:07.500 --> 01:08.920
więc z ciągiem.

01:08.920 --> 01:11.080
Teraz jak widzisz moje IDE już narzeka tutaj

01:11.080 --> 01:13.160
i tak samo TypeScript kompilator, bo te

01:13.160 --> 01:14.960
dwa oczywiście są połączone, jeśli

01:14.960 --> 01:17.040
próbowałem to skompilować.

01:17.040 --> 01:20.070
Dane parametrów niejawnie mają typ any.

01:20.070 --> 01:21.350
Wydaje się więc, że jest

01:21.350 --> 01:23.940
to związane z tą opcją noImplicitAny.

01:23.940 --> 01:27.150
Rzeczywiście, jeśli ustawię to na false, więc jeśli

01:27.150 --> 01:29.300
ustawię wszystkie opcje ścisłe na true,

01:29.300 --> 01:31.521
ale ustawię tę opcję na false, co mogę

01:31.521 --> 01:33.810
zrobić, to ten błąd odchodzi.

01:33.810 --> 01:37.140
Zarówno w IDE, jak i gdy kompilujemy kod.

01:37.140 --> 01:38.730
Co więc robi ta opcja?

01:38.730 --> 01:41.440
Zapewnia, i skomentuję go ponownie, aby

01:41.440 --> 01:44.210
włączyć go ponownie ze względu na ścisłą

01:44.210 --> 01:47.050
prawdę, zapewnia, że musimy być jasni co

01:47.050 --> 01:49.410
do naszych parametrów, co do wartości,

01:49.410 --> 01:53.020
z którymi pracujemy w naszym kodzie.

01:53.020 --> 01:56.600
Tutaj nie dajemy TypeScriptowi żadnych informacji

01:56.600 --> 01:59.930
o typie danych, które otrzymamy jako parametr.

01:59.930 --> 02:01.320
I powinniśmy.

02:01.320 --> 02:03.800
Jeśli TypeScript jest w stanie to wywnioskować, to

02:03.800 --> 02:05.360
oczywiście jest to w porządku, ale

02:05.360 --> 02:08.770
tutaj jak TypeScript byłby w stanie wywnioskować to z tej linii, cóż pamiętaj,

02:08.770 --> 02:11.470
że ta funkcja jest deklarowana jako pierwsza przed wykonaniem

02:11.470 --> 02:12.950
tego pliku.

02:12.950 --> 02:15.080
Tak więc w momencie tworzenia funkcji

02:15.080 --> 02:18.380
nie ma szans na to, aby wiedzieć, co tam się skończy.

02:18.380 --> 02:20.100
Tak więc tutaj możemy naprawić ten

02:20.100 --> 02:22.570
błąd, po prostu deklarując typ i będąc jasnym,

02:22.570 --> 02:24.253
jakiego typu tam używamy.

02:25.100 --> 02:29.530
Teraz zauważ, że jeśli miałeś zmienną zalogowaną, jak ustawiasz

02:29.530 --> 02:32.650
to na true tutaj, nie dostajesz błędu o tej

02:32.650 --> 02:34.720
deklaracji, mimo że również

02:34.720 --> 02:37.670
dostaje domyślny typ any.

02:37.670 --> 02:39.250
Dla zmiennych jest to ok.

02:39.250 --> 02:40.910
Dla parametrów to nie jest w porządku.

02:40.910 --> 02:42.480
Dlaczego jest dobrze dla zmiennych?

02:42.480 --> 02:44.370
Ponieważ to, co TypeScript robi dla zmiennych,

02:44.370 --> 02:45.940
co jest możliwe dla zmiennych, co nie

02:45.940 --> 02:47.040
jest możliwe tutaj, ponieważ

02:47.040 --> 02:48.880
funkcja jest tworzona najpierw.

02:48.880 --> 02:52.490
Tutaj TypeScript jest w stanie śledzić wartości, które przypisujesz.

02:52.490 --> 02:54.650
Widzisz, ok, mam tutaj

02:54.650 --> 02:56.720
logowane tak, teraz ustawiłem

02:56.720 --> 02:58.573
to na true, więc w związku

02:59.430 --> 03:08.030
z tym, następnie, jeśli konsola loguję się tutaj, to jest to boolean.

03:08.030 --> 03:10.300
Więc TypeScript jest tutaj w stanie zrozumieć

03:10.300 --> 03:11.893
przepływ twojego kodu, a zatem

03:11.893 --> 03:14.320
nie musisz być precyzyjny w odniesieniu do typu

03:14.320 --> 03:15.430
tutaj.

03:15.430 --> 03:18.020
Oczywiście, chcesz być precyzyjny, jeśli chcesz uniknąć

03:18.020 --> 03:20.310
tego, że możesz swobodnie przypisać nową wartość,

03:20.310 --> 03:22.940
co możesz zrobić tutaj, ponieważ jest typu any.

03:22.940 --> 03:25.700
Więc chcesz nadal przypisać typ, aby tego uniknąć, ale TypeScript

03:25.700 --> 03:27.680
jest przynajmniej w stanie dowiedzieć się,

03:27.680 --> 03:29.490
czy kod, który wywołujesz, działa z typem,

03:29.490 --> 03:31.410
który aktualnie trzyma.

03:31.410 --> 03:32.410
To nie jest przypadek

03:32.410 --> 03:35.360
tutaj, ponieważ tam funkcja jest zdefiniowana przed jej wywołaniem,

03:35.360 --> 03:37.800
a zatem TypeScript nie miałby zmiany wiedząc, czy

03:37.800 --> 03:39.570
to, co przekazujesz tam, może być używane

03:39.570 --> 03:41.393
wewnątrz funkcji.

03:43.280 --> 03:46.020
strictNullChecks nigdy nie jest ważną opcją.

03:46.020 --> 03:48.520
Jest to właściwie związane z naszym wyborem przycisku,

03:48.520 --> 03:49.410
który mamy tutaj.

03:49.410 --> 03:51.820
Pamiętaj, że musiałem dodać ten wykrzyknik tutaj, żeby

03:51.820 --> 03:52.670
to zadziałało.

03:52.670 --> 03:54.380
W przeciwnym razie dostałbym błąd.

03:54.380 --> 03:56.220
Teraz możemy również pozbyć

03:56.220 --> 03:58.430
się tego błędu bez dodawania wykrzyknika,

03:58.430 --> 04:02.090
ustawiając strictNullChecks na false.

04:02.090 --> 04:04.200
Zróbmy to więc tutaj i zapiszmy to.

04:04.200 --> 04:07.860
I jak widzisz ten błąd już zniknął w tym miejscu.

04:07.860 --> 04:10.120
I mogę skompilować wszystkie pliki.

04:10.120 --> 04:12.340
Co teraz robi strictNullChecks?

04:12.340 --> 04:16.160
Mówią one TypeScriptowi, aby był dość, cóż, surowy w odniesieniu

04:16.160 --> 04:19.410
do sposobu dostępu i pracy z wartościami, które mogą

04:19.410 --> 04:22.530
potencjalnie zawierać wartość null.

04:22.530 --> 04:24.850
A przycisk tutaj może być zerowy.

04:24.850 --> 04:29.210
Nie zawsze jest to wskazanie na element przycisku.

04:29.210 --> 04:31.390
Nie zawsze wskazuje na taki element, bo

04:31.390 --> 04:34.220
nawet jeśli masz tutaj taki selektor, to na stronie,

04:34.220 --> 04:36.900
na której działa ten skrypt, przycisk może po prostu

04:36.900 --> 04:38.490
nie istnieć.

04:38.490 --> 04:40.840
I dlatego TypeScript nie może powiedzieć,

04:40.840 --> 04:43.790
ponieważ nie nurkuje w twoim pliku html i patrzy

04:43.790 --> 04:44.900
na to.

04:44.900 --> 04:48.240
Nie może powiedzieć, czy to się uda, czy nie.

04:48.240 --> 04:53.130
A jeśli to nie zwróci wskaźnika i węzła null, to zwróci null, dobrze

04:53.130 --> 04:56.650
undefined, aby być dokładnym, ale to jest traktowane

04:56.650 --> 04:59.090
tak samo tutaj.

04:59.090 --> 05:01.610
Tak więc, ten przycisk może mieć wartość null, a

05:01.610 --> 05:03.530
zatem ten kod może się nie powieść.

05:03.530 --> 05:06.610
Rzeczywiście, jeśli skomentuję ten przycisk tutaj, jeśli

05:06.610 --> 05:08.480
teraz skompiluję wszystko, to działa,

05:08.480 --> 05:10.733
ponieważ wyłączyłem kontrole null.

05:12.000 --> 05:14.100
Ale ja, w związku z tym, mam teraz błąd runtime,

05:14.100 --> 05:16.210
ponieważ nie mogę wywołać listenera zdarzeń,

05:16.210 --> 05:18.230
addEventListener, na null.

05:18.230 --> 05:20.970
A ja tu mam null, bo nie mam guzika.

05:20.970 --> 05:23.110
Teraz jest to błąd, którego mogliśmy

05:23.110 --> 05:26.760
uniknąć, ustawiając strictNullChecks na true.

05:26.760 --> 05:30.340
I to jest automatycznie ustawione, jeśli mamy strict ustawione na true.

05:30.340 --> 05:34.450
Gdzie TypeScript przewiduje, że może się to zdarzyć,

05:34.450 --> 05:38.600
a zatem zmusza nas do pracy wokół tego.

05:38.600 --> 05:40.640
Teraz jednym tanim obejściem jest

05:40.640 --> 05:42.820
ten operator wykrzyknika tutaj.

05:42.820 --> 05:46.020
To mówi TypeScriptowi, że ty, deweloper,

05:46.020 --> 05:48.360
wiesz, że ten przycisk istnieje,

05:48.360 --> 05:53.360
lub że ta operacja da wartość non-null.

05:53.710 --> 05:55.830
Teraz może tak, na pewno tak, jeśli

05:55.830 --> 05:58.990
wiesz, że pracujesz na kodzie HTML i że jest tutaj

05:58.990 --> 06:00.430
przycisk, że ten selektor

06:00.430 --> 06:03.310
tutaj będzie działał.

06:03.310 --> 06:05.610
Więc byłoby dobrze użyć wykrzyknika w tym

06:05.610 --> 06:06.623
scenariuszu.

06:07.600 --> 06:09.040
Jeśli masz inny scenariusz,

06:09.040 --> 06:11.120
w którym nie wiesz na pewno, czy działa

06:11.120 --> 06:13.050
i po prostu masz nadzieję, że działa,

06:13.050 --> 06:14.170
to może być lepiej po

06:14.170 --> 06:18.210
prostu zawinąć kod, który może zawieść w sprawdzeniu if, który oczywiście

06:18.210 --> 06:21.570
będzie tam również w czasie biegu.

06:21.570 --> 06:24.960
Mógłbyś po prostu sprawdzić, czy przycisk jest tutaj prawdziwy,

06:24.960 --> 06:27.510
co nie będzie, jeśli jest null lub undefined.

06:27.510 --> 06:30.060
I przenieś ten kod do tego if check tutaj.

06:30.060 --> 06:32.470
Teraz nawet bez wykrzyknika, w trybie

06:32.470 --> 06:35.810
strictNullChecks nie otrzymamy błędu, ponieważ

06:35.810 --> 06:37.600
TypeScript rozumie, że ten

06:37.600 --> 06:39.750
kod jest wewnątrz tej instrukcji

06:39.750 --> 06:41.991
if i że ta instrukcja if upewnia się,

06:41.991 --> 06:46.310
że przycisk nie jest null i że to nie zawiedzie.

06:46.310 --> 06:49.310
Więc to może być faktycznie czystsze obejście.

06:49.310 --> 06:51.060
Jednak, oczywiście, aby zaoszczędzić

06:51.060 --> 06:54.350
kod, jeśli wiesz z pewnością, że coś istnieje, użycie wykrzyknika

06:54.350 --> 06:58.320
jest krótsze i absolutnie świetna opcja.

06:58.320 --> 07:00.450
Tutaj powiedziałem oba, żebyśmy widzieli oba,

07:00.450 --> 07:02.450
oczywiście wystarczy jedna z tych dwóch rzeczy,

07:02.450 --> 07:04.520
albo zaznaczenie if, albo wykrzyknik.

07:04.520 --> 07:07.680
strictFunctionTypes tutaj jest trochę bardziej

07:07.680 --> 07:12.010
zaawansowanym ustawieniem łapiącym jakieś niszowe pole, którego

07:12.010 --> 07:14.830
możesz nie mieć w wielu aplikacjach.

07:14.830 --> 07:17.340
Jest to związane z, cóż, typami funkcji, które

07:17.340 --> 07:18.380
możesz ustawić.

07:18.380 --> 07:20.650
Czyli nie typy wewnątrz funkcji, ale jeśli

07:20.650 --> 07:23.690
zdefiniujesz jak ma wyglądać funkcja odnośnie jej parametrów

07:23.690 --> 07:26.220
i wartości zwracanej i stworzysz taki typ funkcji,

07:26.220 --> 07:27.840
o którym dowiedziałeś się w module

07:27.840 --> 07:29.990
podstawy, to tam możesz wprowadzić pole,

07:29.990 --> 07:32.650
jeśli pracujesz z klasami i dziedziczeniem, którego

07:32.650 --> 07:39.683
jeszcze nie poznaliśmy, którego jeszcze nie używaliśmy i dlatego na razie zignorujmy to.

07:40.578 --> 07:43.630
strictBindCallApply, które mogą być pomocne,

07:43.630 --> 07:46.840
jeśli robisz pracę z bind, call lub apply.

07:46.840 --> 07:49.680
W tym celu szybko zobaczmy przykład.

07:49.680 --> 07:52.040
Tutaj mamy nasz przycisk i naszą funkcję tam.

07:52.040 --> 07:57.040
Teraz powiedzmy, że byłaby to funkcja, którą definiujemy tutaj za pomocą słowa

07:57.780 --> 08:01.100
kluczowego function, lub jako funkcja błędu.

08:01.100 --> 08:03.650
Nie ma znaczenia, użyję tutaj słowa kluczowego function.

08:04.731 --> 08:09.731
clickHandler, a w nim konsola I. log kliknięty.

08:11.960 --> 08:13.810
I teraz tutaj wskazujemy na clickHandler,

08:13.810 --> 08:15.560
i z jakiegoś powodu chcemy się upewnić,

08:15.560 --> 08:17.670
że kiedy to się wykonuje, przekazujemy określone

08:17.670 --> 08:19.330
argumenty lub ustawiamy słowo kluczowe

08:19.330 --> 08:22.780
this tam na określoną wartość.

08:22.780 --> 08:26.480
Powiedzmy teraz, że tutaj oczekujemy argumentu wiadomości, który

08:26.480 --> 08:28.110
powinien być ciągiem znaków.

08:28.110 --> 08:32.110
I chcemy to również wyprowadzić tutaj.

08:32.110 --> 08:34.400
Teraz, ponieważ clickHandler jest przekazywany

08:34.400 --> 08:36.010
do addEventListener tak, że przeglądarka

08:36.010 --> 08:39.080
w zasadzie wykonuje to za nas, jeśli chcemy wstępnie skonfigurować

08:39.080 --> 08:41.070
argumenty, które zostaną przekazane,

08:41.070 --> 08:43.570
możemy użyć bind.

08:43.570 --> 08:47.000
A bind, jako pierwszy argument, przyjmuje to, z czym chcemy

08:47.000 --> 08:49.320
związać słowo kluczowe this.

08:49.320 --> 08:51.650
I tutaj moglibyśmy powiedzieć, że nie ma

08:51.650 --> 08:53.580
to dla nas znaczenia, bo nie używamy

08:53.580 --> 08:55.930
tego w funkcji, więc wiążemy to z null.

08:55.930 --> 08:57.700
Teraz widzisz tutaj, że dostaję błąd.

08:57.700 --> 09:00.610
Otrzymuję błąd, którego można uniknąć,

09:00.610 --> 09:04.613
jeśli ustawię strictBindCallApply na false.

09:07.040 --> 09:08.680
Teraz widzisz, że błąd zniknął.

09:08.680 --> 09:10.501
Co zatem robi ta opcja?

09:10.501 --> 09:14.180
Zasadniczo sprawdza, którą funkcję wywołujesz

09:14.180 --> 09:16.020
bind, call lub apply.

09:16.020 --> 09:20.080
I sprawdza, czy to, co tu ustawiasz, ma sens.

09:20.080 --> 09:23.440
I tutaj TypeScript widzi, że chcemy argument, chcemy

09:23.440 --> 09:25.450
parametr w clickHandler.

09:25.450 --> 09:28.260
Z bindem nie konfigurujemy tego jednak.

09:28.260 --> 09:30.600
I dlatego tutaj pojawia się błąd.

09:30.600 --> 09:32.180
Jeśli ustawię to z powrotem na true,

09:32.180 --> 09:34.000
lub po prostu skomentowałem to, ponieważ

09:34.000 --> 09:36.230
oczywiście jest to domyślnie ustawione na true przez

09:36.230 --> 09:37.870
ustawienie strict na true, my, zatem,

09:37.870 --> 09:39.790
otrzymujemy błąd ponownie.

09:39.790 --> 09:42.350
Teraz, jeśli nie spodziewalibyśmy się argumentu tutaj,

09:42.350 --> 09:44.750
widzisz, że błąd zniknąłby tam na dole, gdybyśmy tylko

09:44.750 --> 09:46.200
usunęli komunikat, ponieważ TypeScript

09:46.200 --> 09:48.140
rozumie nasz kod i widzi, że nie przekazujesz

09:48.140 --> 09:50.660
żadnych argumentów do tej metody lub do tej funkcji, ponieważ

09:50.660 --> 09:52.580
nie przyjmuje ona żadnych, więc to jest w

09:52.580 --> 09:54.760
porządku.

09:54.760 --> 09:57.420
Ale oczywiście tutaj chcemy mieć jeden, więc otrzymujemy błąd.

09:57.420 --> 10:00.880
Rozwiązaniem jest dostarczenie tego drugiego argumentu tutaj,

10:00.880 --> 10:04.350
który jest pierwszym argumentem, który chcesz przekazać.

10:04.350 --> 10:06.290
Teraz TypeScript jest tutaj naprawdę inteligentny.

10:06.290 --> 10:08.120
I na przykład, gdybym przekazał liczbę,

10:08.120 --> 10:10.310
nadal narzekałby, ponieważ rozumie, że potrzebuję

10:10.310 --> 10:11.610
tutaj ciągu.

10:12.500 --> 10:15.960
Jeśli jednak przekażę poprawny ciąg znaków, jak

10:15.960 --> 10:17.350
you're welcome, to

10:17.350 --> 10:19.070
już nie narzeka, bo nie rozumie

10:19.070 --> 10:21.210
tego i widzi, że to jest dopasowanie

10:21.210 --> 10:24.840
do mojej definicji funkcji tutaj.

10:24.840 --> 10:27.370
Jest to więc bardzo przydatne zachowanie, które

10:27.370 --> 10:30.260
upewnia się, że nie przypadkowo używasz bind, call, lub

10:30.260 --> 10:32.743
apply w sposób, który nie działa z twoim kodem.

10:33.930 --> 10:36.600
Teraz strictPropertyInitialization staje się ważny,

10:36.600 --> 10:37.810
gdy pracujemy z klasami.

10:37.810 --> 10:39.213
Możemy to na razie zignorować.

10:39.213 --> 10:41.890
noImplicitTo również nie ma teraz znaczenia.

10:41.890 --> 10:43.650
Ma do czynienia z tym słowem kluczowym

10:43.650 --> 10:45.980
i TypeScript zasadniczo próbuje ostrzec cię,

10:45.980 --> 10:48.240
jeśli używasz tego słowa kluczowego w miejscu,

10:48.240 --> 10:51.020
w którym nie jest jasne, do czego się odnosi.

10:51.020 --> 10:53.210
I alwaysStrict po prostu kontroluje,

10:53.210 --> 10:55.560
że pliki JavaScript, które są generowane,

10:55.560 --> 10:58.663
używają trybu ścisłego, więc jest to dodane.

10:59.710 --> 11:02.383
Tym samym pokryliśmy wszystkie te surowe opcje.
