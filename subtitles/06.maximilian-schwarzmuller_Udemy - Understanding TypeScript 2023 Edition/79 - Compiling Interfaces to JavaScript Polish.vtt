WEBVTT

00:02.170 --> 00:03.290
Instruktor: Dużo mówiło

00:03.290 --> 00:05.580
się teraz o interfejsach i klasach.

00:05.580 --> 00:07.390
Teraz zajrzyjmy pod maskę

00:07.390 --> 00:11.650
i zobaczmy, co JavaScript faktycznie produkuje lub oferuje

00:11.650 --> 00:15.290
jako alternatywę dla interfejsu.

00:15.290 --> 00:17.450
Dowiedzieliśmy się, że dla kodu klasy,

00:17.450 --> 00:20.560
w końcu zależy to od wersji, dla której kompilujemy.

00:20.560 --> 00:24.280
Jeśli skompilujesz dla es6 tutaj w konflikcie ts, wtedy nasze

00:24.280 --> 00:27.160
wyjście użyłoby słowa kluczowego class.

00:27.160 --> 00:29.330
Ponieważ skompilowaliśmy dla es5 tutaj, zamiast

00:29.330 --> 00:31.880
tego widzimy to obejście przy użyciu konstruktu lub

00:31.880 --> 00:33.420
funkcji na końcu.

00:33.420 --> 00:36.670
Co jednak dzieje się w przypadku interfejsów?

00:36.670 --> 00:38.720
Cóż, przyjrzyjmy się aplikacji. plik js.

00:38.720 --> 00:41.780
A tam nic nie widać.

00:41.780 --> 00:46.360
Nie zobaczysz żadnych tłumaczeń dla naszych interfejsów.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Takich rzeczy nie znajdziesz nigdzie w aplikacji. słoiki.

00:52.970 --> 00:55.440
Po prostu znajdujesz naszą funkcję tutaj,

00:55.440 --> 00:59.180
znajdujesz naszą funkcję konstruktora dla obiektu osoby,

00:59.180 --> 01:02.320
więc w zasadzie to tłumaczenie dla klasy osoby, a także

01:02.320 --> 01:03.500
inny kod.

01:03.500 --> 01:06.680
Na żadnym interfejsie nie znajdujesz odniesienia.

01:06.680 --> 01:08.240
I jest ku temu dobry powód.

01:08.240 --> 01:11.350
Nie ma tłumaczenia dla interfejsów.

01:11.350 --> 01:13.650
JavaScript nie wie o tej funkcji.

01:13.650 --> 01:15.550
Jest to czysta funkcja TypeScript,

01:15.550 --> 01:18.830
dostępna tylko podczas rozwoju i kompilacji.

01:18.830 --> 01:21.640
Możesz więc użyć go do ulepszenia swojego kodu.

01:21.640 --> 01:23.970
Żadne dane wyjściowe nie trafią jednak

01:23.970 --> 01:26.010
do plików JavaScript, dlatego jest

01:26.010 --> 01:28.390
to funkcja czysto deweloperska, pomagająca

01:28.390 --> 01:30.700
pisać lepszy kod, o przejrzystej strukturze,

01:30.700 --> 01:34.100
kierujący się jasnymi zasadami.

01:34.100 --> 01:38.720
W czasie runtime nie zostanie pozostawiony żaden ślad po tych interfejsach.

01:38.720 --> 01:41.760
Nie zobaczysz niczego związanego z interfejsami

01:41.760 --> 01:44.710
w swoim kodzie, tylko funkcje, klasy i cały inny

01:44.710 --> 01:47.130
kod jest kompilowany na wyjściu.

01:47.130 --> 01:50.020
Interfejsy są po prostu wyrzucane, można powiedzieć.

01:50.020 --> 01:53.170
Są one używane podczas kompilacji, aby sprawdzić twój kod, a następnie

01:53.170 --> 01:54.340
są ignorowane.

01:54.340 --> 01:56.690
Nie ma nic, co byłoby dla nich wyjściowe.
