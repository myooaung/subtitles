WEBVTT

00:02.260 --> 00:03.920
Explicador: Tempo para algum gerenciamento

00:03.920 --> 00:05.340
estatal no componente App, porque

00:05.340 --> 00:07.240
quando atualizamos a matriz assim, o componente

00:07.240 --> 00:08.880
não seria reapresentado.

00:08.880 --> 00:10.530
É assim que Reagir funciona.

00:10.530 --> 00:12.590
Em nosso componente funcional, podemos

00:12.590 --> 00:15.000
administrar o Estado com o gancho de usoState.

00:15.000 --> 00:16.820
E novamente, se você não souber disto

00:16.820 --> 00:18.750
ou se componentes ou ganchos de estado

00:18.750 --> 00:21.120
ou função não lhe disserem nada, definitivamente

00:21.120 --> 00:23.810
verifique alguns recursos dedicados ao React como

00:23.810 --> 00:26.480
meu React, o curso completo de guia.

00:26.480 --> 00:29.870
Portanto, agora eu quero administrar meus todos aqui com o estado,

00:29.870 --> 00:31.760
e para isso eu vou limpar aquele falso

00:31.760 --> 00:33.060
todo com o qual eu comecei,

00:33.060 --> 00:36.430
e em vez disso inicializar o estado chamando useState e para isso,

00:36.430 --> 00:39.080
no entanto, eu posso passar minha matriz vazia como

00:39.080 --> 00:41.210
um valor de estado inicial para que inicialmente

00:41.210 --> 00:44.510
meu estado seja uma matriz vazia.

00:44.510 --> 00:47.100
Agora useState sempre retorna uma matriz

00:47.100 --> 00:49.370
com exatamente dois elementos.

00:49.370 --> 00:52.070
O primeiro elemento é o último instantâneo de estado para

00:52.070 --> 00:53.630
este ciclo de renderização.

00:53.630 --> 00:55.070
E o segundo argumento, o segundo

00:55.070 --> 00:56.720
elemento da matriz é uma função

00:56.720 --> 00:58.860
para atualizar esse estado e renderizar

00:58.860 --> 01:01.110
de novo o componente.

01:01.110 --> 01:02.660
Podemos usar a reestruturação da

01:02.660 --> 01:05.060
matriz sobre a qual aprendemos anteriormente no curso,

01:05.060 --> 01:07.060
para retirar estes dois elementos e armazená-los

01:07.060 --> 01:09.230
em constantes separadas.

01:09.230 --> 01:10.900
E então aqui temos os todos e vamos

01:10.900 --> 01:13.103
dizer uma função chamada setTodos.

01:14.920 --> 01:16.820
Com isso, ainda temos nossa matriz

01:16.820 --> 01:19.530
todos e agora aqui no todoAddHandler, quero

01:19.530 --> 01:21.480
chamar setTodos e definir minha

01:21.480 --> 01:24.430
matriz todos para uma nova matriz, que tem o novo

01:24.430 --> 01:27.373
todoText adicionado a ela.

01:28.240 --> 01:29.283
Agora para isso, é

01:30.400 --> 01:32.130
claro, podemos passar em uma

01:32.130 --> 01:34.100
nova matriz e adicionar um novo objeto,

01:34.100 --> 01:36.530
digamos com um ID, onde criamos um ID aleatório

01:36.530 --> 01:42.530
com Matemática.

01:42.530 --> 01:42.530
aleatório(). toString.

01:42.530 --> 01:44.830
Não é realmente único, mas bom o suficiente aqui,

01:44.830 --> 01:46.620
e onde então também temos nosso texto,

01:46.620 --> 01:48.760
que é o valor do texto que estou obtendo aqui.

01:48.760 --> 01:51.910
Mas, estranhamente, estou recebendo um erro aqui.

01:51.910 --> 01:54.790
E o erro que estamos recebendo é que este argumento

01:54.790 --> 01:56.860
não é atribuível.

01:56.860 --> 01:59.630
Bem, basicamente, em algo que espera

01:59.630 --> 02:01.970
ter um conjunto de nada.

02:01.970 --> 02:03.590
E isso, é claro, não é o que você quer aqui.

02:03.590 --> 02:06.010
Não queremos ter um conjunto de nada como nosso estado.

02:06.010 --> 02:07.110
Por que isso está acontecendo?

02:07.950 --> 02:11.800
Porque aqui, quando eu inicializo o uso, o TypeScript infere

02:11.800 --> 02:15.040
como será nosso estado, se eu inicializasse isto

02:15.040 --> 02:17.060
para uma string, o TypeScript

02:17.060 --> 02:20.130
inferiria que meu estado é uma string.

02:20.130 --> 02:23.010
Portanto, se eu removesse isso temporariamente e passasse em algum

02:23.010 --> 02:24.123
texto, ele seria aceito.

02:25.160 --> 02:26.137
Se eu passar em um array,

02:26.137 --> 02:28.260
o TypeScript espera que seja um array mas

02:28.260 --> 02:30.080
não um array de nada, mas sempre basicamente

02:30.080 --> 02:32.000
um array vazio.

02:32.000 --> 02:36.070
Portanto, um conjunto de nada que, obviamente, não quero aqui.

02:36.070 --> 02:38.050
Para corrigir isso, temos que dizer ao React,

02:38.050 --> 02:40.460
como será nosso patrimônio ao longo do tempo.

02:40.460 --> 02:42.920
E para isso podemos usar novamente esse useState

02:42.920 --> 02:44.630
é uma função genérica, porque

02:44.630 --> 02:48.080
podemos passar na estrutura de nosso patrimônio.

02:48.080 --> 02:51.240
Assim, de que tipo de dados nosso estado é, e aí podemos

02:51.240 --> 02:54.200
passar que nosso estado deve ser uma matriz de objetos,

02:54.200 --> 02:56.253
para ser preciso e uma matriz de objetos

02:57.210 --> 02:59.570
onde temos uma propriedade de identificação

02:59.570 --> 03:02.750
que é uma string, e uma propriedade de texto, que é uma

03:02.750 --> 03:04.860
string.

03:04.860 --> 03:08.050
E agora esta atualização estadual é permitida.

03:08.050 --> 03:10.100
Escrever isto aqui é claro, mas como precisaremos dele

03:10.100 --> 03:12.410
em diferentes lugares no aplicativo, na verdade criarei um

03:12.410 --> 03:16.710
novo arquivo e nomearei este todo. modelo. ts.

03:16.710 --> 03:18.210
O nome do arquivo fica a seu critério.

03:18.210 --> 03:19.940
E aqui eu quero basicamente exportar,

03:19.940 --> 03:21.710
um nome de interface Todo onde eu

03:21.710 --> 03:24.080
só quero descrever como deve ser nossa ID Todo

03:24.080 --> 03:25.440
em meu aplicativo que eu quero

03:25.440 --> 03:27.430
ter uma ID de tipo string, e uma propriedade

03:27.430 --> 03:30.190
de texto de tipo string.

03:30.190 --> 03:34.420
E com isto exportado aqui no componente app, podemos

03:34.420 --> 03:35.900
importar isto para

03:35.900 --> 03:38.210
que aqui possamos importar

03:39.080 --> 03:42.543
Todo de . /todo. modelo.

03:43.900 --> 03:46.720
E aqui temos então simplesmente um conjunto de todos

03:46.720 --> 03:49.550
que, naturalmente, é mais curto e mais fácil de ler.

03:49.550 --> 03:51.480
E agora nossa atualização estadual ainda funciona,

03:51.480 --> 03:52.870
mas isto é um pouco mais limpo.

03:52.870 --> 03:55.100
E isto, como você vê, é realmente importante

03:55.100 --> 03:57.210
aqui quando se trabalha com algo como uma matriz

03:57.210 --> 03:59.170
onde os tipos de conteúdo para que tipo de

03:59.170 --> 04:01.860
dados você quer armazenar que eventualmente, se você

04:01.860 --> 04:04.270
inicializá-los com uma matriz vazia.

04:04.270 --> 04:06.250
Com isso, porém, funciona.

04:06.250 --> 04:07.450
A desvantagem, é claro,

04:07.450 --> 04:09.910
é que nossa lógica de atualização do estado aqui

04:09.910 --> 04:13.670
não é correta, porque neste momento eu sempre substituo a matriz existente

04:13.670 --> 04:17.400
de todos por uma nova matriz que só tem exatamente um elemento.

04:17.400 --> 04:20.110
E, em vez disso, quero substituí-la por uma nova matriz

04:20.110 --> 04:23.730
que tenha todos os elementos antigos, assim como o novo elemento.

04:23.730 --> 04:26.583
Portanto, vamos ajustar esta lógica na próxima palestra.
