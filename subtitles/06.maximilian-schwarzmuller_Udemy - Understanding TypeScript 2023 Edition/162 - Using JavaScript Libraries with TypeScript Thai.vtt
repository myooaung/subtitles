WEBVTT

00:02.120 --> 00:05.910
-: ตอนนี้เราจะเริ่มต้นด้วยไลบรารียูทิลิตี้ยอดนิยมอย่าง

00:05.910 --> 00:06.770
Lodash

00:06.770 --> 00:09.840
ตอนนี้สิ่งที่คุณจะได้เรียนรู้ต่อไปนี้ทำหน้าที่เป็นตัวอย่างไลบรารี

00:09.840 --> 00:13.250
JavaScript ที่คุณต้องการใช้

00:13.250 --> 00:17.430
ไม่ว่าจะเป็น Lodash, jQuery หรืออะไรก็ตาม

00:17.430 --> 00:19.510
ในตอนนี้ มีข้อสังเกตเล็กๆ น้อยๆ หากคุณสนใจวิธีการทำงานกับ

00:19.510 --> 00:26.718
React และ TypeScript หรือสมมุติว่า Node

00:26.718 --> 00:26.718
จ. และ

00:26.718 --> 00:33.760
Express และ TypeScript ฉันมีโมดูลเฉพาะในภายหลังในหลักสูตร เพราะคุณจะได้เรียนรู้มากกว่าการเพิ่มด้วย

00:33.760 --> 00:35.730
TypeScript

00:35.730 --> 00:43.010
แต่สำหรับไลบรารีที่ง่ายกว่า เช่น Lodash เช่น jQuery และนี่คือแนวทางที่ใช้ได้ผล

00:43.010 --> 00:45.340
ดังนั้นเราจึงต้องการใช้ Lodash ในโครงการของเรา

00:45.340 --> 00:48.460
แน่นอนว่า Lodash เป็นไลบรารี JavaScript

00:48.460 --> 00:50.800
เราไม่จำเป็นต้องใช้ TypeScript เราสามารถใช้ในโครงการ

00:50.800 --> 00:56.770
JavaScript ใดก็ได้ และเราสามารถติดตั้งได้เมื่อคุณเรียนรู้ที่นี่ในเอกสารอย่างเป็นทางการของ

00:56.770 --> 00:59.200
Lodash

00:59.200 --> 01:01.400
หากคุณใช้ npm ซึ่งก็คือเรา คุณสามารถเรียกใช้

01:01.400 --> 01:06.477
npm i หรือ npm install ซึ่งเป็นรูปแบบสั้นๆ "--save/lodash"

01:07.750 --> 01:10.820
ดังนั้นในโครงการตัวอย่างนี้ซึ่งใช้ webpack โดยไม่มีเวิร์กโฟลว์การผลิต

01:10.820 --> 01:14.180
แต่เป็นเพียงเวิร์กโฟลว์การพัฒนา

01:14.180 --> 01:16.570
เราสามารถเพิ่มไลบรารีนี้ได้โดยเรียกใช้

01:16.570 --> 01:18.607
nmp install dash dash save Lodash

01:18.607 --> 01:21.700
และตอนนี้จะติดตั้งลงในโปรเจกต์นี้ และต้องขอบคุณการตั้งค่า

01:21.700 --> 01:27.517
webpack ของเรา เราจึงสามารถอิมพอร์ตลงในไฟล์โค้ดของเราและใช้งานที่นั่นได้

01:27.517 --> 01:30.670
และนั่นจะเหมือนกันในโครงการ JavaScript ที่ขับเคลื่อนโดย

01:30.670 --> 01:32.250
webpack

01:32.250 --> 01:34.990
หากคุณไม่ได้ใช้ webpack คุณสามารถใช้

01:34.990 --> 01:37.720
CDN และอื่น ๆ ได้

01:37.720 --> 01:42.390
อย่างไรก็ตาม สิ่งที่ฉันจะแสดงให้คุณเห็นในขั้นตอนต่อไปในโมดูลนี้จะใช้งานได้ในการตั้งค่า

01:42.390 --> 01:45.130
webpack เท่านั้น

01:45.130 --> 01:47.730
ที่นี่เรามีการตั้งค่า webpack ตอนนี้เราได้ติดตั้ง

01:47.730 --> 01:49.320
Lodash แล้ว และตอนนี้หากเราต้องการใช้

01:49.320 --> 01:51.510
เราก็สามารถนำเข้าได้ที่นี่

01:51.510 --> 01:55.600
เราสามารถนำเข้าได้ สมมติว่าขีดเส้นใต้จาก 'Lodash'

01:55.600 --> 01:57.960
นั่นคือไวยากรณ์ที่ควรพร้อมใช้งานเมื่อติดตั้ง

01:57.960 --> 01:59.960
Lodash

01:59.960 --> 02:03.057
อย่างไรก็ตาม ตอนนี้ทำให้เรามีข้อผิดพลาดแล้ว

02:03.057 --> 02:06.850
"ไม่พบไฟล์ประกาศสำหรับโมดูล Lodash"

02:06.850 --> 02:09.890
และเราจะมีปัญหาอีกประการหนึ่ง ถ้าคุณต้องการใช้

02:09.890 --> 02:12.230
Lodash เช่น เพื่อสับเปลี่ยนอาร์เรย์

02:12.230 --> 02:20.430
เราก็สามารถคอนโซลบันทึกขีดล่าง การสับเปลี่ยนแล้วส่งผ่าน สมมติว่าเป็นอาร์เรย์ธรรมดาสำหรับวิธีการสับเปลี่ยนนี้

02:20.430 --> 02:23.110
วิธีการสับเปลี่ยนเป็นวิธีที่ Lodash รองรับ

02:23.110 --> 02:25.790
เราสามารถเรียนรู้สิ่งนี้ได้ในเอกสารอย่างเป็นทางการของ

02:25.790 --> 02:26.820
Lodash

02:26.820 --> 02:32.370
ที่นั่น หากคุณค้นหา "shuffle" คุณจะได้เรียนรู้ว่าคุณสามารถสับเปลี่ยนอาร์เรย์ด้วยวิธีนี้ได้

02:32.370 --> 02:37.010
ดังนั้น มันน่าจะได้ผล แต่มันไม่ได้ผลจริง

02:37.010 --> 02:39.480
ๆ อย่างที่คุณบอก

02:39.480 --> 02:43.058
ถ้าตอนนี้ฉันเริ่มต้นเซิร์ฟเวอร์ webpack ที่นี่ เราจะเห็นว่า

02:43.058 --> 02:45.890
CDN แสดงข้อผิดพลาดให้เรา

02:45.890 --> 02:47.077
และบอกเราอีกครั้งว่า

02:47.077 --> 02:50.940
"ไม่พบไฟล์การประกาศสำหรับโมดูล Lodash"

02:50.940 --> 02:54.720
ดังนั้นสิ่งนี้จึงไม่ได้ผลอย่างที่ควรจะเป็น

02:54.720 --> 02:57.610
ตอนนี้ปัญหาคือ Lodash เป็นไลบรารี

02:57.610 --> 02:59.930
JavaScript ที่เรียบง่าย

02:59.930 --> 03:05.150
สร้างด้วยวานิลลาจาวาสคริปต์ และสร้างขึ้นสำหรับวานิลลาจาวาสคริปต์

03:05.150 --> 03:08.530
เราสามารถตรวจสอบสิ่งนี้ได้หากเราไปที่โหนดโมดูล ซึ่งเรามีการอ้างอิงจำนวนมาก

03:08.530 --> 03:10.280
เนื่องจากเรามีการพึ่งพาจำนวนมากของ

03:10.280 --> 03:14.220
webpack และเป็นการพึ่งพาที่นั่น

03:14.220 --> 03:17.930
แต่ที่นี่ถ้าเราค้นหา Lodash นี่คือที่นี่

03:17.930 --> 03:22.750
และเราขยายเมื่อเราเห็นว่ามีไฟล์ JavaScript จำนวนมากอยู่ในนั้นใช่ไหม

03:22.750 --> 03:26.380
และนั่นคือซอร์สโค้ดทั้งหมดของ Lodash

03:26.380 --> 03:30.010
โค้ด JavaScript จำนวนมาก แต่ไม่มีโค้ด TypeScript อย่างแน่นอน

03:30.010 --> 03:31.750
ตอนนี้ปัญหาคืออะไร

03:31.750 --> 03:37.070
ปัญหาคือ TypeScript ไม่เข้าใจสิ่งที่อยู่ในแพ็คเกจนี้

03:37.070 --> 03:41.020
ไม่เข้าใจว่า Lodash ส่งออกด้วยวิธีใด

03:41.020 --> 03:43.480
ตอนนี้คุณจะเห็นว่ามันใช้งานได้จริงถ้าเราไปที่

03:43.480 --> 03:45.500
tsconfig ไฟล์ json

03:45.500 --> 03:48.740
และเราตรวจสอบให้แน่ใจว่าเราปล่อยเอาต์พุตเมื่อเกิดข้อผิดพลาด

03:48.740 --> 03:55.770
ดังนั้นหากเราเปลี่ยน "noEmitOnError" เป็น "เท็จ" เพื่อให้เราปล่อยเอาต์พุตใหม่หากมีข้อผิดพลาดเกิดขึ้น

03:55.770 --> 03:57.600
สำหรับตอนนี้ ให้เริ่มต้นใหม่อีกครั้ง

03:57.600 --> 04:02.160
ในท้ายที่สุด มันก็จะแจ้งข้อผิดพลาดเดิมแก่เรา ดังนั้นเราจะยังเห็นสิ่งนั้นอยู่

04:02.160 --> 04:07.120
แต่ถ้าฉันโหลดหน้านี้ใหม่ที่นี่ คุณจะได้ผลลัพธ์ที่นี่

04:07.120 --> 04:08.922
คุณสามารถละเว้นข้อผิดพลาดที่ด้านล่างที่นี่

04:08.922 --> 04:12.580
คุณจะเห็นผลลัพธ์ซึ่งเป็นอาร์เรย์ที่สับเปลี่ยน

04:12.580 --> 04:14.920
คุณเห็นไหม มันดูแตกต่างออกไปทุกครั้งที่ฉันโหลดซ้ำ

04:14.920 --> 04:16.530
และนั่นก็น่าสนใจมาก

04:16.530 --> 04:21.280
มันพิสูจน์ได้ว่า Lodash ใช้งานได้ มันพิสูจน์ว่ารหัสนี้ถูกต้อง

04:21.280 --> 04:24.170
แต่น่าเสียดายที่ TypeScript ไม่เข้าใจ และไม่เข้าใจเพราะ

04:24.170 --> 04:28.400
Lodash ใช้ JavaScript ไม่ใช่ TypeScript

04:28.400 --> 04:31.220
ตอนนี้ปัญหาคือไม่มี TypeScript เวอร์ชันของ

04:31.220 --> 04:34.080
Lodash ดังนั้นเราต้องอยู่กับสิ่งนั้น

04:34.080 --> 04:37.220
และนั่นเป็นสถานการณ์ที่คุณจะพบไม่น้อย

04:37.220 --> 04:39.365
คุณต้องการใช้ไลบรารีของบุคคลที่สามบางตัว

04:39.365 --> 04:44.210
และมันสร้างขึ้นสำหรับ JavaScript เท่านั้น ดังนั้นคุณจึงได้รับข้อผิดพลาดเช่นนั้น

04:44.210 --> 04:47.430
สิ่งนี้น่ารำคาญเพราะในทางทฤษฎี เราสามารถใช้มันได้แน่นอน

04:47.430 --> 04:49.630
TypeScript สร้างขึ้นบน JavaScript

04:49.630 --> 04:53.160
เราสามารถใช้ JavaScript Library ในโครงการ TypeScript

04:53.160 --> 04:56.150
เราแค่ต้องแปลเป็น TypeScript

04:56.150 --> 04:58.890
และขอบคุณที่เป็นไปได้

04:58.890 --> 05:02.564
ให้ฉันเปิดการตั้งค่านี้ที่นี่ "noEmitOnError

05:02.564 --> 05:04.220
จริง"

05:04.220 --> 05:07.200
ให้ฉันแสดงให้คุณเห็นว่าเราสามารถบอก TypeScript

05:07.200 --> 05:10.053
เกี่ยวกับ Lodash และสิ่งที่มีให้ได้อย่างไร

05:11.140 --> 05:16.250
คุณสามารถติดตั้งประเภทที่เรียกว่าไลบรารีของบุคคลที่สามได้

05:16.250 --> 05:20.050
หากคุณค้นหาประเภท Lodash คุณจะพบแพ็คเกจ

05:20.050 --> 05:24.140
npm ซึ่งที่นี่เรียกว่า "@types/lodash"

05:24.140 --> 05:28.120
คุณยังเห็นคำสั่งติดตั้งซึ่งจะทำงานในไม่กี่วินาที

05:28.120 --> 05:30.580
แต่ถ้าคุณลงลึกในรายละเอียดคุณจะพบลิงก์ไปยังที่เก็บ

05:30.580 --> 05:32.220
GitHub

05:32.220 --> 05:40.820
มันเชื่อมโยงกับ AbsoluteTyped ซึ่งเป็นพื้นที่เก็บข้อมูลขนาดใหญ่ที่มีคำแปลมากมายสำหรับไลบรารีของบุคคลที่สามทุกประเภท

05:40.820 --> 05:43.120
เราอยู่ในโฟลเดอร์ Lodash

05:43.120 --> 05:46.590
และคุณจะพบสิ่งที่เรียกว่า ไฟล์ .dts

05:46.590 --> 05:50.180
ดังนั้นไม่ใช่แค่ ได้ แต่ . ดีทีเอส

05:50.180 --> 05:55.760
สิ่งเหล่านี้เรียกว่าไฟล์การประกาศ ซึ่งหมายความว่าไฟล์เหล่านี้ไม่มีตรรกะที่แท้จริง

05:55.760 --> 05:58.750
แต่ถ้าเราดูที่ shuffle dts ซึ่งมีคำแนะนำสำหรับ

05:58.750 --> 06:01.848
TypeScript

06:01.848 --> 06:08.720
โดยพื้นฐานแล้วพวกเขาจะบอก TypeScript ว่าทำงานอย่างไรและมีอะไรรวมอยู่ในแพ็คเกจนี้

06:08.720 --> 06:10.700
และคุณสามารถสำรวจไฟล์ต่างๆ ได้ที่นี่ ทั้งหมดในโฟลเดอร์ย่อยต่างๆ

06:10.700 --> 06:14.280
เพื่อเรียนรู้เพิ่มเติมเกี่ยวกับเรื่องนั้น

06:14.280 --> 06:17.717
ดังนั้นในท้ายที่สุด ไฟล์เหล่านี้เพียงแค่ให้การแปลจาก

06:17.717 --> 06:21.750
JavaScript ธรรมดาเป็น TypeScript

06:21.750 --> 06:26.950
ไม่มีตรรกะใด ๆ ที่ทำงาน แต่กำหนดประเภทที่ไลบรารีนี้ใช้งานได้

06:26.950 --> 06:30.010
ซึ่งจะกำหนดประเภทที่คุณใช้ ประเภทที่คุณได้รับกลับมาเมื่อคุณเรียกใช้เมธอด

06:30.010 --> 06:32.490
และอื่นๆ

06:32.490 --> 06:40.470
คุณยังสามารถเขียนเช่น . dts ด้วยตัวคุณเอง และประเภทเอกสารที่เป็นทางการจะให้คำแนะนำเกี่ยวกับสิ่งนั้นหากคุณสนใจ

06:40.470 --> 06:42.110
แต่สำหรับโครงการประเภทของคุณเอง

06:42.110 --> 06:43.160
คุณไม่จำเป็นต้องทำเช่นนั้น

06:43.160 --> 06:45.820
เพราะถ้าคุณเขียนโค้ด TypeScript แน่นอนว่า TypeScript

06:45.820 --> 06:48.110
เท่านั้นที่เข้าใจ

06:48.110 --> 06:50.310
แต่ถ้าคุณทำงานกับไลบรารีของบุคคลที่สามที่เขียนด้วย

06:50.310 --> 06:56.860
JavaScript โดยไม่มีโค้ด TypeScript หรือไม่มีไฟล์ .

06:56.860 --> 06:56.860
dts

06:56.860 --> 06:59.950
ซึ่งไลบรารีของบุคคลที่สามบางแห่งจัดส่งมาให้แม้ว่าจะเขียนด้วย

06:59.950 --> 07:03.960
JavaScript แต่ Lodash ก็ไม่ส่ง

07:03.960 --> 07:08.330
ดังนั้น หากคุณกำลังทำงานกับไลบรารี่ที่ไม่มีไฟล์การแปลในตัว

07:08.330 --> 07:11.180
และไม่ได้เขียนด้วย TypeScript ดังนั้น

07:11.180 --> 07:15.760
การใช้แพ็คเกจประเภทดังกล่าวจึงเป็นทางออก

07:15.760 --> 07:20.760
ตรงนี้เราเรียกใช้ "npm install --save@types/Lodash"

07:21.860 --> 07:24.600
คุณยังสามารถเรียกใช้ "save-dev" ได้ เนื่องจาก

07:24.600 --> 07:27.920
dev เป็นการอ้างอิงที่จำเป็นจริงๆ ในระหว่างการพัฒนาเท่านั้น

07:27.920 --> 07:32.360
เพราะโค้ดจะถูกปฏิบัติตามผ่าน JavaScript อยู่ดี

07:32.360 --> 07:36.130
และตอนนี้ติดตั้งการแปลนี้จาก TypeScript

07:36.130 --> 07:38.060
เพื่อทำความเข้าใจ

07:38.060 --> 07:40.630
และคุณจะเห็นว่า ทันทีที่มีการติดตั้ง

07:40.630 --> 07:42.510
ข้อผิดพลาดนี้จะหายไป

07:42.510 --> 07:48.270
และถ้าตอนนี้ฉันรีสตาร์ท npm start คุณจะเห็นข้อผิดพลาดที่จะไม่กลับมาที่นี่เช่นกัน

07:48.270 --> 07:51.640
คุณจะเห็นว่าตอนนี้มันใช้งานได้โดยไม่มีข้อผิดพลาดใดๆ

07:51.640 --> 07:55.190
ทั้งในคอมไพล์และในเบราว์เซอร์

07:55.190 --> 07:57.270
ในทางเทคนิคก่อนหน้านี้ก็ใช้งานได้เช่นกัน

07:57.270 --> 07:59.160
แต่ตอนนี้ด้วยการแปล เราสามารถใช้

07:59.160 --> 08:01.580
TypeScript ได้เช่นกัน

08:01.580 --> 08:04.660
และตัวอย่างเช่น ตอนนี้เรายังได้รับความสมบูรณ์ทั้งหมดที่นี่ใน

08:04.660 --> 08:05.493
IDE

08:05.493 --> 08:10.070
ถ้าฉันพิมพ์จุดที่นี่ ฉันเห็นวิธี Lodash ที่ฉันสามารถใช้ได้

08:10.070 --> 08:13.930
ดังนั้น นี่จึงเป็นความรู้ที่สำคัญมาก สิ่งที่คุณต้องระวังอย่างแน่นอน

08:13.930 --> 08:21.177
ซึ่งช่วยให้คุณใช้ไลบรารีวานิลลาวานิลลาแบบปกติ ในโครงการ TypeScript และยังคงได้รับการสนับสนุนที่ดี

08:21.177 --> 08:28.490
การเติมข้อความอัตโนมัติที่ยอดเยี่ยม และหลีกเลี่ยง ข้อผิดพลาด

08:28.490 --> 08:33.990
ด้วยความช่วยเหลือของแพ็คเกจประเภทการแปลเหล่านี้ คุณสามารถพูดได้

08:33.990 --> 08:38.990
และแพ็คเกจเหล่านี้ซึ่งมักจะตั้งชื่อว่า "@types" จากนั้นตามด้วยชื่อแพ็คเกจ

08:39.290 --> 08:40.860
โดยทั่วไปแล้วสิ่งเหล่านี้มีอยู่สำหรับไลบรารีของบุคคลที่สามยอดนิยมใดๆ

08:40.860 --> 08:46.730
ที่คุณสามารถหาได้จากที่นั่น

08:46.730 --> 08:49.960
คุณสามารถค้นหาชื่อไลบรารีได้ตลอดเวลา จากนั้นพิมพ์เช่น

08:49.960 --> 08:54.400
ประเภท jQuery และคุณควรจะพบรายการดังกล่าว

08:54.400 --> 08:57.350
นั่นคือวิธีที่คุณสามารถทำงานกับประเภทในไลบรารีวานิลลา

08:57.350 --> 08:59.373
JavaScript
