WEBVTT

00:02.260 --> 00:04.920
教师：这样, 我们就差不多完成了核心类型｡

00:04.920 --> 00:07.470
还有一种类型, 我们已经看到了,

00:07.470 --> 00:09.390
那就是any类型｡

00:09.390 --> 00:13.310
any类型是可以在TypeScript中指定的最灵活的类型｡

00:13.310 --> 00:16.710
此类型不告诉TypeScript任何内容｡ 

00:16.710 --> 00:19.960
这基本上意味着你可以在那里存储任何类型的值｡ 

00:19.960 --> 00:22.031
我们没有得到具体的类型分配｡ 

00:22.031 --> 00:27.040
TypeScript基本上不会在你使用任何时候对你大喊大叫｡

00:27.040 --> 00:28.030
回到这里的代码中,

00:28.030 --> 00:31.360
如果我将favorite activities的类型设置为any,

00:31.360 --> 00:32.870
就不会出现错误｡

00:32.870 --> 00:36.580
如果将其设置为任何数组, 我至少会告诉TypeScript, favorite

00:36.580 --> 00:39.220
activities是某个东西的数组｡

00:39.220 --> 00:41.460
所以如果我在那里只存储一个值,

00:41.460 --> 00:42.830
我会得到一个错误｡

00:42.830 --> 00:46.638
但是只要是数组, 我就可以在里面存储任何我想要的东西｡

00:46.638 --> 00:49.840
所以任何都是非常灵活的｡ 

00:49.840 --> 00:54.060
这听起来很棒, 但实际上这是一个很大的缺点,

00:54.060 --> 00:58.290
你绝对要尽可能避免｡

00:58.290 --> 01:02.512
因为任何东西基本上都剥夺了TypeScript给您带来的所有好处｡

01:02.512 --> 01:06.430
它给你同样的经验, 你有香草JavaScript,

01:06.430 --> 01:10.480
你也必须对任何类型的一切, 所以说｡

01:10.480 --> 01:16.020
Any基本上确保了TypeScript编译器不能检查任何东西,

01:16.020 --> 01:19.180
因为如果任何属性或任何变量都可以存储任何值,

01:19.180 --> 01:20.818
那么就没有太多要检查的东西了,

01:20.818 --> 01:23.687
对吗？

01:23.687 --> 01:30.270
所以, 如果你有一些值, 一些数据, 你真的不知道哪种数据将存储在那里,

01:30.270 --> 01:31.810
你可以使用任何作为后备,

01:31.810 --> 01:33.820
然后你可能会使用一些运行时检查,

01:33.820 --> 01:42.660
就像我们在这里做的那样, 在运行时缩小你想对某些值做什么｡

01:42.660 --> 01:44.600
那你可以随便挑一个｡ 

01:44.600 --> 01:48.210
但在其他情况下, 你真的想避免任何｡ 

01:48.210 --> 01:51.120
如果你有机会知道你正在使用哪种类型的数据,

01:51.120 --> 01:54.090
就明确地说出来｡

01:54.090 --> 01:56.780
让TypeScript推断执行它的工作,

01:56.780 --> 01:58.817
或显式设置您自己的类型｡

01:58.817 --> 02:01.783
如果不需要的话, 不要退回到任何一个｡ 
