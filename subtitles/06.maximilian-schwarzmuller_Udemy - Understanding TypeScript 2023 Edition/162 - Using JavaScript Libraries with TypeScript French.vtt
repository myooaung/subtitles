WEBVTT

00:02.120 --> 00:05.910
- : Nous allons maintenant commencer par une bibliothèque utilitaire très populaire,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Ce que vous allez apprendre ici sert d'exemple pour toute

00:09.840 --> 00:13.250
bibliothèque JavaScript que vous voulez utiliser.

00:13.250 --> 00:17.430
Peu importe si c'est Lodash, jQuery, ou autre.

00:17.430 --> 00:19.510
Si vous souhaitez savoir

00:19.510 --> 00:21.640
comment travailler avec

00:21.640 --> 00:24.150
React et TypeScript ou, disons,

00:24.150 --> 00:26.718
Node. js. et Express et TypeScript,

00:26.718 --> 00:31.350
j'ai prévu des modules dédiés à ce sujet plus loin dans le cours, car vous y apprendrez

00:31.350 --> 00:33.760
un peu plus que le simple fait de les ajouter

00:33.760 --> 00:35.730
avec TypeScript.

00:35.730 --> 00:40.470
Mais pour les bibliothèques plus simples, comme Lodash, comme jQuery et autres,

00:40.470 --> 00:43.010
voici une approche qui fonctionnera.

00:43.010 --> 00:45.340
Nous voulons donc utiliser Lodash dans notre projet.

00:45.340 --> 00:48.460
Lodash est bien sûr une bibliothèque JavaScript.

00:48.460 --> 00:50.800
Nous n'avons pas besoin de TypeScript pour l'utiliser,

00:50.800 --> 00:53.480
nous pouvons l'utiliser dans n'importe quel projet JavaScript

00:53.480 --> 00:56.770
et nous pouvons l'installer comme vous l'apprenez ici dans la documentation

00:56.770 --> 00:59.200
officielle de Lodash.

00:59.200 --> 01:01.400
Si vous utilisez npm, ce qui est le cas, vous

01:01.400 --> 01:06.477
pouvez lancer npm i ou npm install, c'est juste une forme courte, "--save/lodash".

01:07.750 --> 01:10.820
Donc ici, dans cet exemple de projet qui utilise webpack

01:10.820 --> 01:12.640
sans flux de production mais juste

01:12.640 --> 01:14.180
un flux de développement.

01:14.180 --> 01:16.570
Là, nous pouvons ajouter cette bibliothèque en exécutant

01:16.570 --> 01:18.607
simplement nmp install dash dash save Lodash.

01:18.607 --> 01:21.700
Et cela va maintenant l'installer dans ce projet et grâce

01:21.700 --> 01:23.500
à notre configuration webpack nous

01:23.500 --> 01:26.250
pouvons juste l'importer dans nos fichiers de code

01:26.250 --> 01:27.517
et l'utiliser là.

01:27.517 --> 01:30.670
Et ce serait la même chose dans n'importe quel projet JavaScript

01:30.670 --> 01:32.250
propulsé par webpack.

01:32.250 --> 01:34.990
Si vous n'utilisez pas webpack, vous pouvez

01:34.990 --> 01:37.720
bien sûr utiliser simplement le CDN, etc.

01:37.720 --> 01:40.630
Cependant, ce que je vous montrerai dans les étapes suivantes,

01:40.630 --> 01:42.390
un peu plus loin dans ce module, ne fonctionnera

01:42.390 --> 01:45.130
que dans une configuration webpack.

01:45.130 --> 01:47.730
Nous avons donc ici une configuration de webpack, nous avons maintenant

01:47.730 --> 01:49.320
installé Lodash, et maintenant si nous voulons

01:49.320 --> 01:51.510
l'utiliser, nous pouvons simplement l'importer ici.

01:51.510 --> 01:55.600
Nous pouvons importer, disons underscore de 'Lodash'.

01:55.600 --> 01:57.960
C'est une syntaxe qui devrait être disponible

01:57.960 --> 01:59.960
avec Lodash installé.

01:59.960 --> 02:03.057
Cependant, cela nous donne déjà une erreur.

02:03.057 --> 02:06.850
"Impossible de trouver un fichier de déclaration pour le module Lodash".

02:06.850 --> 02:09.890
Et nous aurons un autre problème, si vous voulez utiliser

02:09.890 --> 02:12.230
Lodash par exemple pour mélanger un tableau,

02:12.230 --> 02:16.810
eh bien nous pourrions consolider log underscore shuffle et ensuite passer disons

02:16.810 --> 02:20.430
un tableau simple à cette méthode shuffle.

02:20.430 --> 02:23.110
La méthode shuffle est une méthode prise en charge par Lodash.

02:23.110 --> 02:25.790
Nous pouvons apprendre cela dans la documentation officielle

02:25.790 --> 02:26.820
de Lodash.

02:26.820 --> 02:29.056
Là, si vous recherchez "shuffle", vous apprenez

02:29.056 --> 02:32.370
que vous pouvez mélanger un tableau avec cette méthode.

02:32.370 --> 02:37.010
Donc, ça devrait marcher, mais ça ne marche pas vraiment comme

02:37.010 --> 02:39.480
ça, comme vous pouvez le voir.

02:39.480 --> 02:43.058
Si je démarre maintenant mon serveur webpack ici, nous

02:43.058 --> 02:45.890
verrons que le CDN nous donne une erreur.

02:45.890 --> 02:47.077
Et de nouveau, il nous dit

02:47.077 --> 02:50.940
qu'il "ne peut pas trouver un fichier de déclaration pour le module Lodash".

02:50.940 --> 02:54.720
Donc, cela ne fonctionne pas vraiment comme il le faudrait.

02:54.720 --> 02:57.610
Le problème, c'est que Lodash est une simple

02:57.610 --> 02:59.930
bibliothèque JavaScript.

02:59.930 --> 03:02.250
Il est construit avec vanilla JavaScript,

03:02.250 --> 03:05.150
et il est construit pour vanilla JavaScript.

03:05.150 --> 03:08.530
Nous pouvons le vérifier si nous allons dans les modules de node, où

03:08.530 --> 03:10.280
nous avons beaucoup de dépendances,

03:10.280 --> 03:12.450
car nous avons beaucoup de dépendances de webpack

03:12.450 --> 03:14.220
et de ses dépendances.

03:14.220 --> 03:17.010
Mais ici, si on cherche Lodash,

03:17.010 --> 03:17.930
c'est là.

03:17.930 --> 03:21.330
Et nous élargissons comme nous le voyons il y a un tas de fichiers JavaScript

03:21.330 --> 03:22.750
là-dedans, d'accord ?

03:22.750 --> 03:26.380
Et c'est là dans tout le code source de Lodash.

03:26.380 --> 03:30.010
Un tas de code JavaScript mais certainement pas de code TypeScript.

03:30.010 --> 03:31.750
Quel est le problème avec ça ?

03:31.750 --> 03:35.550
Le problème est que TypeScript ne comprend pas ce qu'il

03:35.550 --> 03:37.070
y a dans ce paquet.

03:37.070 --> 03:41.020
Il ne comprend pas quelles méthodes Lodash exporte.

03:41.020 --> 03:43.480
Maintenant, vous verrez que cela fonctionne réellement si nous

03:43.480 --> 03:45.500
allons dans le tsconfig. json.

03:45.500 --> 03:48.740
Et nous nous assurons que nous émettons une sortie en cas d'erreur.

03:48.740 --> 03:52.650
Donc si nous passons "noEmitOnError" à "false" pour que nous

03:52.650 --> 03:55.770
émettions une nouvelle sortie en cas d'erreur.

03:55.770 --> 03:57.600
Pour l'instant, recommencez,

03:57.600 --> 04:00.230
ça va finir par nous donner la même erreur,

04:00.230 --> 04:02.160
donc on verra toujours ça.

04:02.160 --> 04:05.090
Mais si je recharge cette page ici, vous obtiendrez

04:05.090 --> 04:07.120
une sortie ici.

04:07.120 --> 04:08.922
Vous pouvez ignorer l'erreur en

04:08.922 --> 04:12.580
bas de la page, vous verrez une sortie qui est le tableau mélangé.

04:12.580 --> 04:14.920
Tu vois, ça a l'air différent à chaque fois que je recharge.

04:14.920 --> 04:16.530
Et c'est très intéressant.

04:16.530 --> 04:19.770
Cela prouve que Lodash fonctionne, cela prouve que

04:19.770 --> 04:21.280
ce code est correct.

04:21.280 --> 04:24.170
Mais malheureusement, TypeScript ne le comprend pas,

04:24.170 --> 04:28.400
et il ne le peut pas car Lodash utilise JavaScript, et non TypeScript.

04:28.400 --> 04:31.220
Le problème, c'est qu'il n'y a pas de version TypeScript

04:31.220 --> 04:34.080
de Lodash, donc nous devons nous en accommoder.

04:34.080 --> 04:37.220
Et c'est un scénario que vous rencontrerez assez souvent.

04:37.220 --> 04:39.365
Vous voulez utiliser une certaine bibliothèque

04:39.365 --> 04:42.270
tierce, et elle n'est construite que pour JavaScript, et donc

04:42.270 --> 04:44.210
vous obtenez des erreurs comme ça.

04:44.210 --> 04:46.060
C'est ennuyeux car en théorie, nous pouvons

04:46.060 --> 04:47.430
bien sûr l'utiliser.

04:47.430 --> 04:49.630
TypeScript s'appuie sur JavaScript.

04:49.630 --> 04:53.160
Nous pouvons utiliser n'importe quelle bibliothèque JavaScript dans un

04:53.160 --> 04:56.150
projet TypeScript, il suffit de la traduire en TypeScript.

04:56.150 --> 04:58.890
Et cela, heureusement, est possible.

04:58.890 --> 05:02.564
Alors laissez-moi activer ce paramètre ici, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Laissez-moi vous montrer comment nous pouvons parler

05:07.200 --> 05:10.053
à TypeScript de Lodash et de ce qu'il offre.

05:11.140 --> 05:13.662
Vous pouvez installer les types de bibliothèque

05:13.662 --> 05:16.250
d'une tierce partie.

05:16.250 --> 05:20.050
Si vous recherchez les types Lodash, vous trouverez

05:20.050 --> 05:24.140
un paquet npm qui s'appelle ici "@types/lodash".

05:24.140 --> 05:26.440
Vous y verrez également la commande install, qui

05:26.440 --> 05:28.120
sera exécutée dans une seconde.

05:28.120 --> 05:30.580
Mais si vous descendez dans les détails, vous trouverez également

05:30.580 --> 05:32.220
un lien vers le dépôt github.

05:32.220 --> 05:36.320
Il renvoie à DefinitelyTyped, qui est un énorme dépôt contenant des

05:36.320 --> 05:39.260
tonnes de traductions pour toutes sortes de bibliothèques

05:39.260 --> 05:40.820
tierces.

05:40.820 --> 05:43.120
Nous sommes ici dans le dossier Lodash.

05:43.120 --> 05:46.590
Et là, vous trouvez ce qu'on appelle . fichiers dts.

05:46.590 --> 05:50.180
Donc pas seulement. ts mais . dts.

05:50.180 --> 05:53.460
Il s'agit de fichiers de déclaration, ce qui signifie qu'ils ne

05:53.460 --> 05:55.760
contiennent pas de logique réelle, mais si nous

05:55.760 --> 05:58.750
regardons le shuffle . dts, ils contiennent

05:58.750 --> 06:01.848
des instructions pour TypeScript.

06:01.848 --> 06:05.200
Ils indiquent essentiellement à TypeScript comment quelque

06:05.200 --> 06:08.720
chose fonctionne et ce qui est inclus dans ce paquet.

06:08.720 --> 06:10.700
Et vous pouvez explorer différents fichiers

06:10.700 --> 06:14.280
ici, tous dans différents sous-dossiers, pour en savoir plus.

06:14.280 --> 06:17.717
En fin de compte, ces fichiers fournissent simplement

06:17.717 --> 06:21.750
une traduction de JavaScript en TypeScript.

06:21.750 --> 06:23.860
Ils ne contiennent pas de logique d'exécution, mais

06:23.860 --> 06:26.950
ils définissent les types avec lesquels cette bibliothèque travaille.

06:26.950 --> 06:30.010
Ils définissent les types que vous utilisez, les types que vous

06:30.010 --> 06:32.490
récupérez lorsque vous appelez une méthode, etc.

06:32.490 --> 06:35.410
Vous pouvez également écrire de telles . dts par vous-même, et les types

06:35.410 --> 06:38.510
officiels de documents fournissent un guide à ce sujet si

06:38.510 --> 06:40.470
c'est ce qui vous intéresse.

06:40.470 --> 06:42.110
Mais pour vos propres types de projets,

06:42.110 --> 06:43.160
vous n'avez pas besoin

06:43.160 --> 06:45.820
de le faire, car si vous écrivez des codes TypeScript,

06:45.820 --> 06:48.110
seul TypeScript le comprend bien sûr.

06:48.110 --> 06:50.310
Mais si vous travaillez avec une bibliothèque

06:50.310 --> 06:53.840
tierce écrite en JavaScript sans code TypeScript, ou sans code

06:53.840 --> 06:56.860
intégré dans . dts, que certaines bibliothèques

06:56.860 --> 06:59.950
tierces fournissent d'ailleurs, même si elles sont

06:59.950 --> 07:02.240
écrites en JavaScript, ce qui n'est pas

07:02.240 --> 07:03.960
le cas de Lodash.

07:03.960 --> 07:06.890
Ainsi, si vous travaillez avec une bibliothèque qui

07:06.890 --> 07:08.330
ne contient pas de fichiers

07:08.330 --> 07:11.180
de traduction intégrés et qui n'est pas écrite en

07:11.180 --> 07:15.760
TypeScript, l'utilisation d'un tel paquetage de types est la solution.

07:15.760 --> 07:20.760
Donc ici nous exécutons "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
Vous pouvez également exécuter "save-dev", car dev

07:24.600 --> 07:27.920
est une dépendance qui n'est vraiment nécessaire que pendant

07:27.920 --> 07:29.230
le développement, car le

07:29.230 --> 07:30.980
code est alors compilé par JavaScript

07:30.980 --> 07:32.360
de toute façon.

07:32.360 --> 07:36.130
Et cela installe maintenant cette traduction de TypeScript

07:36.130 --> 07:38.060
pour le comprendre.

07:38.060 --> 07:40.630
Et vous voyez, dès que c'est installé,

07:40.630 --> 07:42.510
cette erreur disparaît.

07:42.510 --> 07:46.220
Et si je redémarre maintenant npm start, vous verrez que l'erreur

07:46.220 --> 07:48.270
ne reviendra pas ici non plus.

07:48.270 --> 07:51.640
Vous voyez donc maintenant que cela fonctionne sans aucune erreur,

07:51.640 --> 07:55.190
aussi bien dans la compilation que dans le navigateur.

07:55.190 --> 07:57.270
Techniquement, cela fonctionnait aussi avant,

07:57.270 --> 07:59.160
mais maintenant, avec la traduction,

07:59.160 --> 08:01.580
nous pouvons aussi utiliser TypeScript.

08:01.580 --> 08:04.660
Et par exemple maintenant, nous avons aussi tous les compléments

08:04.660 --> 08:05.493
ici, dans l'IDE.

08:05.493 --> 08:10.070
Si je tape un point ici, je vois les méthodes Lodash que je peux utiliser.

08:10.070 --> 08:13.930
Il s'agit donc d'un élément de connaissance très important, dont vous

08:13.930 --> 08:16.400
devez absolument être conscient, qui vous permet

08:16.400 --> 08:19.370
d'utiliser des bibliothèques JavaScript ordinaires,

08:19.370 --> 08:21.177
normales, vanille, dans un projet

08:21.177 --> 08:24.220
TypeScript, tout en bénéficiant d'un excellent support,

08:24.220 --> 08:26.880
d'une excellente autocomplétion et en évitant les

08:26.880 --> 08:28.490
erreurs.

08:28.490 --> 08:33.030
Avec l'aide de ces paquets de types de transitions, on

08:33.030 --> 08:33.990
peut dire.

08:33.990 --> 08:38.990
Et ces paquets, qui sont toujours nommés "@types", puis le nom du paquet,

08:39.290 --> 08:40.860
existent en fait pour

08:40.860 --> 08:45.270
toutes les bibliothèques tierces populaires que vous pouvez

08:45.270 --> 08:46.730
trouver.

08:46.730 --> 08:49.960
Vous pouvez toujours rechercher le nom de la bibliothèque, puis

08:49.960 --> 08:51.690
les types, par exemple les types de

08:51.690 --> 08:54.400
jQuery, et vous devriez trouver une telle entrée.

08:54.400 --> 08:57.350
Voilà donc comment vous pouvez travailler avec des types dans

08:57.350 --> 08:59.373
les bibliothèques JavaScript vanille.
