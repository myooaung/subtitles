WEBVTT

00:02.120 --> 00:04.590
ผู้สอน: ดังที่ฉันได้กล่าวไว้ในการบรรยายครั้งที่แล้ว

00:04.590 --> 00:06.080
โหมดเฝ้าดูเป็นการเริ่มต้นที่ดี

00:06.080 --> 00:08.910
แต่ถ้าเรามีไฟล์ TypeScript มากกว่าหนึ่งไฟล์ล่ะ

00:08.910 --> 00:18.370
จะเป็นอย่างไรถ้าเรามีการวิเคราะห์ด้วย ts ที่เราส่งข้อมูลการวิเคราะห์ไปยังเซิร์ฟเวอร์ของเราโดยสมมุติฐานหรือไม่

00:18.530 --> 00:21.430
ทีนี้ มาที่นี่เพื่อมีอะไรในนั้น

00:21.430 --> 00:24.240
ฉันจะใส่คอนโซล คำสั่งบันทึก แต่แน่นอน คุณสามารถส่งคำขอ

00:24.240 --> 00:26.710
HTTP ไปยังบริการวิเคราะห์ของคุณได้ที่นี่

00:26.710 --> 00:29.180
ตามที่ฉันได้กล่าวไว้

00:29.180 --> 00:36.420
สมมติว่าเราได้นำเข้าไฟล์นี้ที่นี่ในดัชนีของเราด้วย

00:36.420 --> 00:36.420
ไฟล์ .html

00:36.420 --> 00:41.730
หากเราชี้ไปที่การวิเคราะห์ js ที่นี่ซึ่งยังไม่มีอยู่ แต่จะมีอยู่หลังจากการคอมไพล์แล้ว

00:41.730 --> 00:50.900
เราสามารถโหลดไฟล์ทั้งสองนี้ และแน่นอนว่าเราต้องการคอมไพล์ทั้งสองไฟล์เมื่อใดก็ตามที่ไฟล์ใดไฟล์หนึ่งมีการเปลี่ยนแปลง

00:50.900 --> 00:55.320
ในตอนนี้ จะเป็นการดีหากเราสามารถเข้าสู่โหมดเฝ้าดูทั่วไปที่เราเรียกใช้

00:55.320 --> 00:57.630
tsc แบบนี้โดยไม่ต้องชี้ไปที่ไฟล์

00:57.630 --> 01:02.480
และเพียงแค่เฝ้าดูโฟลเดอร์โปรเจ็กต์ทั้งหมดของเราและคอมไพล์ไฟล์ TypeScript

01:02.480 --> 01:05.823
ที่อาจเปลี่ยนแปลงใหม่

01:06.720 --> 01:08.960
ปรากฎว่าเป็นไปได้

01:08.960 --> 01:11.340
เพื่อที่เราเพียงแค่ต้องบอก

01:11.340 --> 01:15.020
TypeScript ว่านี่คือโครงการหนึ่งที่ควรได้รับการจัดการด้วย

01:15.020 --> 01:20.700
TypeScript และเราทำเช่นนั้นก่อนอื่น และเราต้องทำเพียงครั้งเดียว

01:20.700 --> 01:23.710
โดยรัน tsc --init

01:23.710 --> 01:26.170
ฉันไม่ได้ชี้ไปที่ไฟล์ใดไฟล์หนึ่งที่นี่

01:26.170 --> 01:31.230
ฉันแค่รัน tsc แล้วก็ --init ซ้ำแล้วซ้ำอีก สิ่งนี้จำเป็นเพียงครั้งเดียว

01:31.230 --> 01:33.530
มันจะเริ่มต้นโครงการนี้ที่คุณเรียกใช้คำสั่งนี้เป็นโครงการ

01:33.530 --> 01:36.390
TypeScript

01:36.390 --> 01:41.850
ซึ่งหมายความว่าโดยทั่วไปแล้วจะบอก TypeScript ว่าทุกอย่างในโฟลเดอร์ที่คุณเรียกใช้คำสั่งนี้

01:41.850 --> 01:48.070
ดังนั้นจึงเป็นเรื่องสำคัญที่คุณจะต้องนำทางไปยังโฟลเดอร์ที่ถูกต้องก่อนที่จะรันคำสั่งนี้ด้วยเทอร์มินัลในตัวที่นี่ใน

01:48.070 --> 01:50.550
VS Code

01:50.550 --> 01:52.910
ฉันอยู่ในโฟลเดอร์โปรเจ็กต์นี้โดยอัตโนมัติซึ่งมีไฟล์ของฉัน

01:52.910 --> 01:57.370
ดังนั้นโปรเจกต์นี้จึงได้รับการจัดการโดย TypeScript

01:57.370 --> 01:58.400
ลองกด Enter แล้วสิ่งนี้จะสร้าง

01:58.400 --> 02:02.634
tsconfig นี้ขึ้นมา ไฟล์ json

02:02.634 --> 02:12.239
นี่เป็นตัวบ่งชี้สำหรับ TypeScript ว่าโครงการที่ไฟล์นี้อยู่และโฟลเดอร์ย่อยทั้งหมดของโฟลเดอร์นี้ควรได้รับการจัดการโดย

02:12.239 --> 02:14.710
TypeScript

02:14.710 --> 02:16.080
ตอนนี้ หากเราตรวจสอบไฟล์นี้

02:16.080 --> 02:17.860
เราเห็นมีตัวเลือกมากมาย ซึ่งส่วนใหญ่แสดงความคิดเห็นไว้

02:17.860 --> 02:19.330
มีอยู่เพื่อให้คุณเห็นว่าคุณสามารถตั้งค่าได้

02:19.330 --> 02:26.380
และคุณมีคำอธิบายสั้น ๆ ที่นี่เช่นกัน แต่เราไม่ต้องกังวลเกี่ยวกับสิ่งเหล่านั้นในตอนนี้

02:26.380 --> 02:29.040
เราจะดำดิ่งลงไปในพวกมันในไม่กี่วินาที

02:29.040 --> 02:36.550
ในตอนนี้ เรามาปิดไฟล์นี้กันตรงนี้และมาดูกันว่าสิ่งนี้ให้อะไรเราบ้าง เพราะมันให้อะไรกับเราคือตอนนี้เราสามารถรัน

02:36.550 --> 02:42.610
tsc แบบนี้ได้โดยไม่ต้องชี้ไปที่ไฟล์ใดไฟล์หนึ่ง

02:42.610 --> 02:45.550
และสิ่งที่จะทำคือมันจะบอกให้ TypeScript

02:45.550 --> 02:49.080
ดำเนินการต่อและคอมไพล์ไฟล์ TypeScript ทั้งหมด

02:49.080 --> 02:53.090
ดังนั้นไฟล์ . ts ที่สามารถหาได้ในโปรเจกต์นี้ ดังนั้นถ้าฉันกด

02:53.090 --> 02:54.770
Enter ที่นี่ คุณเห็นไหมว่าจะใช้เวลาสักครู่

02:54.770 --> 03:00.530
และตอนนี้สิ่งที่เราได้รับคือการวิเคราะห์นี้

03:00.530 --> 03:00.530
js

03:00.530 --> 03:02.620
และแอพนี้ ไฟล์.js

03:02.620 --> 03:05.160
ตอนนี้การวิเคราะห์ ไฟล์ js เพิ่งสร้างโดย TypeScript

03:05.160 --> 03:10.060
เนื่องจากพบว่าเรามีการวิเคราะห์

03:10.060 --> 03:10.060
ts

03:10.060 --> 03:13.390
และอย่างที่ฉันบอก ตอนนี้มันจะรวบรวมไฟล์ TypeScript

03:13.390 --> 03:14.730
ทั้งหมดในโครงการ

03:14.730 --> 03:17.660
และแน่นอนว่ายังสามารถใช้ร่วมกับโหมดนาฬิกาได้อีกด้วย

03:17.660 --> 03:20.630
คุณสามารถเรียกใช้ tsc -w หรือ --watch ตามที่ฉันแสดงก่อนหน้านี้

03:20.630 --> 03:23.420
และตอนนี้จะเข้าสู่โหมดเฝ้าดูสำหรับไฟล์

03:23.420 --> 03:26.970
TypeScript ทั้งหมด

03:26.970 --> 03:29.590
ตอนนี้เมื่อใดก็ตามที่ฉันเปลี่ยนหนึ่งในนั้นและฉันบันทึก

03:29.590 --> 03:31.920
มันจะคอมไพล์ใหม่

03:31.920 --> 03:33.840
มันจะคอมไพล์ไฟล์นั้นที่เปลี่ยนแปลงใหม่

03:33.840 --> 03:36.100
ดังนั้นการเปลี่ยนแปลงที่สะท้อนให้เห็นทั้งหมดในไฟล์

03:36.100 --> 03:37.800
JavaScript

03:37.800 --> 03:38.633
และตอนนี้อยู่ที่นี่

03:38.633 --> 03:41.430
ถ้าผมกลับมาที่หน้าของเรา เราจะเห็นการส่งข้อมูลด้วย

03:41.430 --> 03:44.463
เพราะตอนนี้การวิเคราะห์ ไฟล์ ts ถูกคอมไพล์ด้วย
