WEBVTT

00:02.260 --> 00:04.920
講師：これで､ コアタイプはほぼ終了です｡

00:04.920 --> 00:09.390
もう一つ､ すでに見たが､ anyという型がある｡

00:09.390 --> 00:13.310
any型は､ TypeScriptで割り当てることのできる最も柔軟な型である｡

00:13.310 --> 00:16.710
この型はTypeScriptに何も伝えない｡ 

00:16.710 --> 00:19.960
基本的にどんな種類の値でも格納できるということです｡ 

00:19.960 --> 00:22.031
特に型式指定は受けませんでした｡ 

00:22.031 --> 00:27.040
TypeScriptは､ 基本的にどれを使っても怒鳴られることはない｡

00:27.040 --> 00:28.030
このコードに戻り､

00:28.030 --> 00:32.870
お気に入りのアクティビティをanyに設定すると､ エラーは発生しません｡

00:32.870 --> 00:39.220
もし､ 任意の配列が設定された場合､ 少なくとも私はTypeScriptにfavorite activitiesが何かの配列であることを伝えることにしています｡

00:39.220 --> 00:41.460
だから､ そこに1つの値だけを格納しようとすると､

00:41.460 --> 00:42.830
エラーが発生するのです｡

00:42.830 --> 00:46.638
しかし､ 配列である以上､ そこに好きなものを格納することができる｡

00:46.638 --> 00:49.840
だから､ どんなものでも本当に柔軟に対応できるのです｡ 

00:49.840 --> 00:52.070
そして､ これは拳では素晴らしく聞こえるかもしれませんが､

00:52.070 --> 00:54.060
実は大きなデメリットであり､

00:54.060 --> 00:58.290
可能な限り絶対に避けたいものです｡

00:58.290 --> 01:00.170
なぜなら､ TypeScriptが与えてくれる利点は､

01:00.170 --> 01:02.512
基本的にすべて奪われてしまうからです｡

01:02.512 --> 01:04.380
バニラ・ジャバスクリプトと同じように､

01:04.380 --> 01:10.480
あらゆるものをタイプしなければならないのです｡

01:10.480 --> 01:16.020
というのも､ プロパティや変数がどんな値でも格納できるのであれば､

01:16.020 --> 01:23.687
チェックすることはあまりないだろうからだ｡

01:23.687 --> 01:30.270
したがって､ ある値､ ある種のデータで､ どの種類のデータがそこに格納されるか本当にわからない場合､

01:30.270 --> 01:33.820
そして､ ある値に対して何をしたいかを絞り込むために､

01:33.820 --> 01:37.050
今回行ったような実行時チェックを実行時に行う場合の予備として､

01:37.050 --> 01:42.660
anyを使うことができます｡

01:42.660 --> 01:44.600
それなら､ どれでもいいんじゃないですか？

01:44.600 --> 01:48.210
しかし､ そうでない場合には､ どうしても避けたいものです｡ 

01:48.210 --> 01:51.120
どのようなデータを扱っているのか知る可能性がある場合は､

01:51.120 --> 01:54.090
それを明示すること｡

01:54.090 --> 01:58.817
TypeScriptの推論に任せるか､ 明示的に独自の型を設定します｡

01:58.817 --> 02:01.783
必要でないものは使わないでください｡ 
