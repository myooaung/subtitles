WEBVTT

00:02.260 --> 00:03.920
Uitleg: Tijd voor wat state management

00:03.920 --> 00:05.340
in de App component, want als we

00:05.340 --> 00:07.240
de array zo updaten, wordt de component

00:07.240 --> 00:08.880
niet opnieuw gerenderd.

00:08.880 --> 00:10.530
Zo werkt React.

00:10.530 --> 00:12.590
In onze functiecomponent kunnen

00:12.590 --> 00:15.000
we State beheren met de useState hook.

00:15.000 --> 00:16.820
En nogmaals, als je dit niet weet

00:16.820 --> 00:18.750
of als state of functiecomponenten

00:18.750 --> 00:21.120
of hooks je niets zeggen, kijk dan zeker

00:21.120 --> 00:23.810
eens naar wat speciale React bronnen zoals mijn

00:23.810 --> 00:26.480
React, de complete gids cursus.

00:26.480 --> 00:29.870
Dus, nu wil ik mijn todo's hier beheren met state, en daarvoor

00:29.870 --> 00:31.760
wis ik die dummy todo waarmee ik begon,

00:31.760 --> 00:33.060
en in plaats daarvan initialiseer

00:33.060 --> 00:36.430
ik de state door useState aan te roepen en daaraan kan ik echter

00:36.430 --> 00:39.080
mijn lege array doorgeven als startwaarde voor

00:39.080 --> 00:41.210
de state, zodat mijn state aanvankelijk

00:41.210 --> 00:44.510
een lege array is.

00:44.510 --> 00:47.100
Nu geeft useState altijd een array terug

00:47.100 --> 00:49.370
met precies twee elementen.

00:49.370 --> 00:52.070
Het eerste element is de laatste momentopname

00:52.070 --> 00:53.630
voor deze rendercyclus.

00:53.630 --> 00:55.070
En het tweede argument, het

00:55.070 --> 00:56.720
tweede element in de array is een

00:56.720 --> 00:58.860
functie om die toestand bij te werken en

00:58.860 --> 01:01.110
de component opnieuw weer te geven.

01:01.110 --> 01:02.660
We kunnen array-herstructurering

01:02.660 --> 01:05.060
gebruiken, waarover we eerder in de cursus hebben geleerd,

01:05.060 --> 01:07.060
om deze twee elementen eruit te halen en op te

01:07.060 --> 01:09.230
slaan in afzonderlijke constanten.

01:09.230 --> 01:10.900
En dan hebben we hier de todo's en laten

01:10.900 --> 01:13.103
we zeggen een functie genaamd setTodos.

01:14.920 --> 01:16.820
Daarmee krijgen we nog steeds onze

01:16.820 --> 01:19.530
todo's-array en nu wil ik hier in de todoAddHandler

01:19.530 --> 01:21.480
setTodos aanroepen en mijn todo's-array

01:21.480 --> 01:24.430
instellen op een nieuwe array, waaraan de nieuwe

01:24.430 --> 01:27.373
todoTekst is toegevoegd.

01:28.240 --> 01:29.283
Daarvoor kunnen we

01:30.400 --> 01:32.130
natuurlijk een nieuwe array invoeren

01:32.130 --> 01:34.100
en een nieuw object toevoegen, laten

01:34.100 --> 01:36.530
we zeggen met een ID, waarbij we een willekeurige

01:36.530 --> 01:42.530
ID maken met Math.

01:42.530 --> 01:42.530
random(). toString.

01:42.530 --> 01:44.830
Het is niet echt uniek, maar goed genoeg hier,

01:44.830 --> 01:46.620
en waar we dan ook onze tekst hebben,

01:46.620 --> 01:48.760
dat is die tekstwaarde die ik hier krijg.

01:48.760 --> 01:51.910
Maar vreemd genoeg krijg ik hier een foutmelding.

01:51.910 --> 01:54.790
En de fout die we krijgen is dat dit argument

01:54.790 --> 01:56.860
niet toewijsbaar is.

01:56.860 --> 01:59.630
Nou eigenlijk in iets dat verwacht een

01:59.630 --> 02:01.970
array van niets te hebben.

02:01.970 --> 02:03.590
En dat is natuurlijk niet wat je hier wilt.

02:03.590 --> 02:06.010
We willen niet een reeks van niets als onze staat hebben.

02:06.010 --> 02:07.110
Waarom gebeurt dit?

02:07.950 --> 02:11.800
Want als ik hier useState initialiseer met een lege array, leidt TypeScript

02:11.800 --> 02:15.040
af hoe onze state eruit zal zien, als ik deze zou initialiseren

02:15.040 --> 02:17.060
op een string, zou TypeScript afleiden

02:17.060 --> 02:20.130
dat mijn state een string is.

02:20.130 --> 02:23.010
Dus als ik dit tijdelijk verwijder en ik geef wat tekst door, wordt

02:23.010 --> 02:24.123
het geaccepteerd.

02:25.160 --> 02:26.137
Als ik het in een array

02:26.137 --> 02:28.260
doorgeef, verwacht TypeScript dat het een array

02:28.260 --> 02:30.080
is, maar geen array van iets, maar in principe

02:30.080 --> 02:32.000
altijd een lege array.

02:32.000 --> 02:36.070
Dus een array van niets wat ik hier natuurlijk niet wil.

02:36.070 --> 02:38.050
Om dit op te lossen moeten we React vertellen

02:38.050 --> 02:40.460
hoe ons landgoed er na verloop van tijd uit zal zien.

02:40.460 --> 02:42.920
En daarvoor kunnen we weer gebruiken dat useState

02:42.920 --> 02:44.630
een generieke functie is, omdat

02:44.630 --> 02:48.080
we de structuur van ons landgoed kunnen doorgeven.

02:48.080 --> 02:51.240
Dus van welk type gegevens onze staat is, en daar kunnen

02:51.240 --> 02:54.200
we doorgeven dat onze staat een array van objecten

02:54.200 --> 02:56.253
moet zijn, om precies te zijn en array

02:57.210 --> 02:59.570
van objecten waar we een ID eigenschap

02:59.570 --> 03:02.750
hebben die een string is, en een tekst eigenschap,

03:02.750 --> 03:04.860
die een string is.

03:04.860 --> 03:08.050
En nu is deze statusupdate toegestaan.

03:08.050 --> 03:10.100
Dit hier schrijven is natuurlijk prima, maar omdat we

03:10.100 --> 03:12.410
het op verschillende plaatsen in de app nodig hebben, maak ik

03:12.410 --> 03:16.710
een nieuw bestand en noem dit todo. model. ts.

03:16.710 --> 03:18.210
De bestandsnaam is aan jou.

03:18.210 --> 03:19.940
En hier wil ik eigenlijk een interface

03:19.940 --> 03:21.710
exporteren met de naam Todo, waar

03:21.710 --> 03:24.080
ik wil beschrijven hoe onze Todo ID eruit moet

03:24.080 --> 03:25.440
zien in mijn app, dat ik een

03:25.440 --> 03:27.430
ID wil hebben van het type string, en een

03:27.430 --> 03:30.190
teksteigenschap van het type string.

03:30.190 --> 03:34.420
En met dit geëxporteerd hier in de app component, kunnen

03:34.420 --> 03:35.900
we dit importeren dus

03:35.900 --> 03:38.210
hier kunnen we Todo importeren

03:39.080 --> 03:42.543
van . /todo. model.

03:43.900 --> 03:46.720
En hier hebben we dan gewoon een array van todo's, die

03:46.720 --> 03:49.550
natuurlijk korter en makkelijker leesbaar is.

03:49.550 --> 03:51.480
En nu werkt onze status update nog steeds, maar

03:51.480 --> 03:52.870
dit is een beetje schoner.

03:52.870 --> 03:55.100
En dit zoals u ziet is echt belangrijk hier

03:55.100 --> 03:57.210
wanneer u werkt met iets als een array

03:57.210 --> 03:59.170
waar typen inhoud voor welk type gegevens

03:59.170 --> 04:01.860
u dat uiteindelijk wilt opslaan, als u het initialiseert

04:01.860 --> 04:04.270
met een lege array.

04:04.270 --> 04:06.250
Met dit werkt het wel.

04:06.250 --> 04:07.450
Het nadeel is natuurlijk

04:07.450 --> 04:09.910
dat onze logica voor het bijwerken van de toestand

04:09.910 --> 04:13.670
hier niet correct is, omdat ik nu steeds de bestaande array van todo's overschrijf

04:13.670 --> 04:17.400
met een nieuwe array die slechts precies één element bevat.

04:17.400 --> 04:20.110
En in plaats daarvan wil ik het overschrijven met een nieuwe

04:20.110 --> 04:23.730
array die zowel alle oude elementen als het nieuwe element bevat.

04:23.730 --> 04:26.583
Dus laten we deze logica aanpassen in de volgende lezing.
