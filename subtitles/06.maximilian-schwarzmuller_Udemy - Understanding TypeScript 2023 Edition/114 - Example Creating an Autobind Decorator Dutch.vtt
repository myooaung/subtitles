WEBVTT

00:02.270 --> 00:03.613
Instructeur: Dus we kunnen iets

00:03.613 --> 00:05.080
teruggeven op Methode Decoratoren,

00:05.080 --> 00:06.820
en dat iets moet een descriptor zijn, waarmee

00:06.820 --> 00:08.920
we de methode kunnen veranderen of de configuratie

00:08.920 --> 00:11.000
van de methode kunnen wijzigen.

00:11.000 --> 00:12.582
En dit is iets wat ik hier wil doen.

00:12.582 --> 00:15.985
Daarvoor ga ik eerst naar het index HTML bestand

00:15.985 --> 00:18.540
en laten we daar een knop toevoegen.

00:18.540 --> 00:21.272
Klik Mij, een heel eenvoudige

00:21.272 --> 00:24.720
knop, in mijn app. ts bestand, wil ik er nu voor zorgen

00:24.720 --> 00:26.104
dat wanneer we op deze knop

00:26.104 --> 00:29.800
klikken, we een methode uitvoeren op een object.

00:29.800 --> 00:32.120
En daarvoor voeg ik hier gewoon een nieuwe

00:32.120 --> 00:34.600
klasse toe, allereerst printer.

00:34.600 --> 00:38.140
En daarin wil ik een property message hebben die

00:38.140 --> 00:41.690
gewoon dit werk is, dus een simpele string die daarin

00:41.690 --> 00:45.980
is opgeslagen en dan wil ik een show message methode hebben

00:45.980 --> 00:49.630
waarin ik gewoon dit bericht log.

00:49.630 --> 00:51.770
Dus, natuurlijk, is dit een soort eenvoudige dummy klasse,

00:51.770 --> 00:53.430
maar toch, dit stelt me in staat om je te laten

00:53.430 --> 00:54.860
zien wat ik je wil laten zien.

00:54.860 --> 00:56.550
Laten we nu de deurknop selecteren,

00:56.550 --> 01:00.860
met document query selector knop en laten we er een event listener

01:00.860 --> 01:02.970
aan toevoegen.

01:02.970 --> 01:05.080
Allereerst voeg ik hier mijn uitroepteken

01:05.080 --> 01:07.800
toe om TypeScript duidelijk te maken dat dit bestaat,

01:07.800 --> 01:08.806
dat dit niet null is,

01:08.806 --> 01:10.990
en dan voeg ik een event listener toe, een

01:10.990 --> 01:14.210
click event listener, en dan wil ik deze show message method

01:14.210 --> 01:16.450
hier activeren.

01:16.450 --> 01:20.350
Daarvoor maak ik hier een nieuwe printer, zoals deze, en wijs

01:20.350 --> 01:23.120
dan hier naar p. showMessage, dat is

01:23.120 --> 01:24.323
mijn idee hier.

01:25.300 --> 01:27.103
Nu, als we dat opslaan, en we gaan

01:28.153 --> 01:31.440
terug naar onze pagina en ik klik op deze knop, krijgen

01:31.440 --> 01:33.320
we hier ongedefinieerd, hoewel,

01:33.320 --> 01:36.050
we krijgen ons bericht niet te zien.

01:36.050 --> 01:38.860
En de reden daarvoor is dat met een event listener,

01:38.860 --> 01:41.820
als we naar een functie wijzen die moet worden uitgevoerd,

01:41.820 --> 01:44.240
het dit sleutelwoord binnen die functie

01:44.240 --> 01:48.260
niet dezelfde context of referentie zal hebben als wanneer we gewoon

01:48.260 --> 01:52.193
p aanroepen. ShowMessage, verwijst

01:53.144 --> 01:56.450
in dit geval naar de printer.

01:56.450 --> 02:00.200
Nee, in het scenario hier waar we een event listener gebruiken, zal dit

02:00.200 --> 02:02.860
verwijzen naar het doel van de gebeurtenis, omdat

02:02.860 --> 02:05.777
addEventListener dit uiteindelijk bindt in de functie

02:05.777 --> 02:07.693
die moet worden uitgevoerd aan het

02:07.693 --> 02:09.560
doel van de gebeurtenis.

02:09.560 --> 02:11.360
En natuurlijk wil ik dit niet.

02:11.360 --> 02:12.570
Nu, een gebruikelijke

02:12.570 --> 02:14.170
workaround hier zou zijn om de

02:14.170 --> 02:19.170
bindmethode te gebruiken en showMessage te binden aan p, of dit in showMessage te binden

02:19.480 --> 02:22.860
aan p zodat wanneer dit wordt uitgevoerd, dit niet verwijst

02:22.860 --> 02:25.420
naar wat addEventListener wil dat het verwijst,

02:25.420 --> 02:28.040
maar in plaats daarvan zal dit binnenin showMessage

02:28.040 --> 02:31.770
weer verwijzen naar dit p, naar dit object hier.

02:31.770 --> 02:33.300
En als we nu, als we hier herladen

02:33.300 --> 02:36.270
en ik wis dit weer, nu zien we dat dit werkt!

02:36.270 --> 02:39.240
Dat is allemaal standaard JavaScript.

02:39.240 --> 02:40.790
Nu bouwen we een decorator,

02:40.790 --> 02:42.191
die we kunnen toevoegen aan

02:42.191 --> 02:47.191
deze methode, die deze automatisch zal binden aan de omringende klasse, dus aan het object

02:47.460 --> 02:50.130
waartoe deze methode behoort, elke keer dat hij

02:50.130 --> 02:53.440
wordt aangeroepen, ongeacht waar we hem aanroepen.

02:53.440 --> 02:55.974
Dus daarvoor voeg ik boven de printer een nieuwe functie

02:55.974 --> 02:58.800
toe en die noem ik autobind, want dat is uiteindelijk wat

02:58.800 --> 03:01.580
we doen en dat wordt mijn decorator autobind.

03:01.580 --> 03:03.890
Kan natuurlijk ook een hoofdletter gebruiken om in

03:03.890 --> 03:05.960
lijn te blijven met onze andere benamingen, maar

03:05.960 --> 03:07.930
nogmaals, u kunt een van de twee gebruiken wanneer

03:07.930 --> 03:10.122
u een decoratorfunctie definieert.

03:10.122 --> 03:13.300
Nu zal dit hier al mijn decorateur zijn en daarin krijgen

03:13.300 --> 03:15.269
we een paar argumenten.

03:15.269 --> 03:17.940
We krijgen het doel, zoals je zult leren, en dat is alles.

03:17.940 --> 03:20.085
Het is ofwel het prototype van het object

03:20.085 --> 03:22.533
waarmee we werken of het is de constructorfunctie

03:22.533 --> 03:25.730
als we dit toevoegen aan een statische methode, maar hier zal

03:25.730 --> 03:27.340
het het prototype zijn omdat we

03:27.340 --> 03:30.200
het toevoegen aan een instance methode.

03:30.200 --> 03:32.520
Dan hebben we de naam van de methode of de naam van de eigenschap,

03:32.520 --> 03:33.690
maar omdat we het toevoegen aan

03:33.690 --> 03:36.330
een methode kunnen we deze naam aanroepen, dat is logischer.

03:36.330 --> 03:38.600
Als dit een string is of een symbool of het kan ook

03:38.600 --> 03:40.229
een getal zijn, natuurlijk, maar

03:40.229 --> 03:43.250
hier weten we dat we typisch met strings zullen werken dus we

03:43.250 --> 03:45.061
kunnen ook gewoon gaan voor string hier,

03:45.061 --> 03:48.470
afhankelijk van waar je van plan bent deze decorator toe te voegen en

03:48.470 --> 03:50.170
hoe generiek het moet zijn en last

03:50.170 --> 03:52.484
but not least, krijgen we hier de descriptor die

03:52.484 --> 03:56.340
van het type PropertyDescriptor zal zijn als waarschuwing.

03:56.340 --> 03:57.650
Dus nu hebben we deze

03:57.650 --> 03:59.655
drie argumenten die we allemaal

03:59.655 --> 04:03.540
gebruikten bij Log3, onze methodeversierder.

04:03.540 --> 04:05.970
Nu, in autobind, en ik wil er nu voor zorgen

04:05.970 --> 04:08.994
dat we altijd het this keyword zetten op dit object

04:08.994 --> 04:11.973
waar deze methode weer bij hoort.

04:11.973 --> 04:14.240
Hoe kunnen we dit bereiken?

04:14.240 --> 04:15.797
Allereerst moet ik toegang krijgen

04:15.797 --> 04:17.880
tot de methode die moet worden aangeroepen.

04:17.880 --> 04:20.661
En dit zal mogelijk zijn met behulp van onze descriptor,

04:20.661 --> 04:22.013
want als je de app herlaadt

04:22.013 --> 04:25.180
en je kijkt naar zo'n methode descriptor daar beneden zie je dat

04:25.180 --> 04:27.330
we de value property in de descriptor krijgen

04:27.330 --> 04:29.460
en die wijst naar de functie.

04:29.460 --> 04:32.240
Omdat de waarde van deze eigenschap een functie is, is een methode

04:32.240 --> 04:33.930
in dit geval gewoon een eigenschap met

04:33.930 --> 04:35.498
een functie als waarde.

04:35.498 --> 04:38.630
Dus de value key bevat de originele functie, daarom kunnen

04:38.630 --> 04:42.980
we hier de originele methode uithalen, als we die zo willen aanroepen door

04:42.980 --> 04:47.320
de descriptor te benaderen.

04:47.320 --> 04:47.320
waarde.

04:47.320 --> 04:50.563
Dit geeft ons toegang tot de originele methode.

04:51.790 --> 04:55.450
Vervolgens stel ik een nieuwe aangepaste descriptor in, dit zal

04:55.450 --> 04:58.320
uiteindelijk zijn wat we later teruggeven.

04:58.320 --> 05:00.030
Nu wordt dit een object

05:00.030 --> 05:03.620
en het is van het type property descriptor.

05:03.620 --> 05:06.350
Nu kunnen we in dit object hier alles toevoegen wat

05:06.350 --> 05:09.350
we aan een property descriptor kunnen toevoegen.

05:09.350 --> 05:12.110
En bijvoorbeeld, kan dit op configureerbaar zetten,

05:12.110 --> 05:14.962
true, enumerable op false zetten, zodat dit niet

05:14.962 --> 05:17.130
verschijnt in vreemde lussen, en nu hier

05:17.130 --> 05:20.310
een getter toevoegen, en dat is nieuw.

05:20.310 --> 05:23.400
Ik voeg hier een getter toe, wat een methode is, of een eigenschap

05:23.400 --> 05:26.150
die een functie bevat, wat hetzelfde is, zodat we wat extra

05:27.020 --> 05:29.628
logica kunnen uitvoeren wanneer gebruikers proberen

05:29.628 --> 05:32.260
toegang te krijgen tot deze eigenschap.

05:32.260 --> 05:35.170
Zodat we niet direct de waarde van deze eigenschap uitvoeren,

05:35.170 --> 05:36.633
dus de functie, maar dat we kunnen

05:36.633 --> 05:38.888
ingrijpen en wat extra werk doen voordat we

05:38.888 --> 05:40.850
de functie uitvoeren.

05:40.850 --> 05:41.913
Dat is het idee hier.

05:43.230 --> 05:46.290
Dus ik voeg geen waarde-eigenschap toe aan deze descriptor hier,

05:46.290 --> 05:48.660
ik heb alleen een getter en nogmaals, de getter is

05:48.660 --> 05:51.540
in feite als een waarde-eigenschap met extra logica die wordt

05:51.540 --> 05:54.777
uitgevoerd voordat de waarde wordt geretourneerd.

05:54.777 --> 05:59.777
Nu wil ik hier mijn gebonden functie hebben waar ik de oorspronkelijke

05:59.900 --> 06:03.450
methode kan gebruiken die we hier hebben uitgehaald

06:03.450 --> 06:07.100
en we roepen binden en dit binden.

06:07.100 --> 06:08.590
En nu het legaat, natuurlijk,

06:08.590 --> 06:11.730
waar verwijst dit naar hier?

06:11.730 --> 06:13.720
Denk eraan dat het binnen deze getter-methode

06:13.720 --> 06:17.700
staat, dus dit zal verwijzen naar wat verantwoordelijk is voor het triggeren

06:17.700 --> 06:19.510
van deze getter-methode.

06:19.510 --> 06:21.110
En dat is nu de truc, de getter

06:21.110 --> 06:23.700
methode zal getriggerd worden door het concrete

06:23.700 --> 06:27.200
object waartoe het behoort, dus dit binnenste van de getter

06:27.200 --> 06:29.190
methode zal altijd verwijzen naar

06:29.190 --> 06:33.610
het object waarop we de getter gedefinieerd hebben.

06:33.610 --> 06:36.800
Dit wordt niet overschreven door addEventListener,

06:36.800 --> 06:38.965
omdat de getter een extra laag vormt

06:38.965 --> 06:41.221
tussen onze functie die wordt uitgevoerd

06:41.221 --> 06:43.660
en het object waartoe het behoort en de Event

06:43.660 --> 06:44.976
Listener.

06:44.976 --> 06:47.683
Dus daarom zal dit hier verwijzen naar het object

06:47.683 --> 06:51.610
waarop we de methode oorspronkelijk hebben gedefinieerd.

06:51.610 --> 06:54.660
We kunnen dit dus veilig binden aan de oorspronkelijke methode

06:54.660 --> 06:57.495
en ervoor zorgen dat dit nu binnen de oorspronkelijke

06:57.495 --> 07:01.170
methode ook zal verwijzen naar exact hetzelfde object.

07:01.170 --> 07:04.300
Nu zal ik de gebonden functie hier teruggeven en daarna,

07:04.300 --> 07:06.760
buiten deze aangepaste descriptor, de aangepaste

07:06.760 --> 07:08.910
descriptor teruggeven.

07:08.910 --> 07:10.560
Dus dat is onze decoratorfunctie,

07:10.560 --> 07:12.420
die een nieuw descriptorobject teruggeeft,

07:12.420 --> 07:14.103
en daarom zal dit descriptorobject

07:14.103 --> 07:16.960
de oude descriptor overschrijven, dat is wat TypeScript

07:16.960 --> 07:18.710
ermee zal doen.

07:18.710 --> 07:21.500
TypeScript zal dan de oude methods descriptor, dus

07:21.500 --> 07:23.215
de oude methods configuratie vervangen

07:23.215 --> 07:26.390
door deze nieuwe configuratie hier, die deze extra getterlaag

07:26.390 --> 07:28.513
heeft toegevoegd.

07:29.460 --> 07:33.330
Nu, ik ben hier natuurlijk niet geïnteresseerd in doel en methode

07:33.330 --> 07:37.500
naam, dus om fouten te voorkomen zal ik deze underscore en deze hier underscore

07:37.500 --> 07:39.083
twee noemen.

07:40.260 --> 07:43.070
Nogmaals, gewoon om TypeScript te vertellen dat ik niet geïnteresseerd

07:43.070 --> 07:45.480
ben in deze waarden, maar ze wel moet accepteren.

07:45.480 --> 07:49.800
En nu voegen we autobind toe aan showMessage hier.

07:49.800 --> 07:52.203
Dus hier zal ik Autobind toevoegen, en

07:54.050 --> 07:56.490
ervoor zorgen dat je bind daar beneden

07:56.490 --> 07:59.236
in de event listener, en dit opslaan.

07:59.236 --> 08:01.450
En laten we daar nu eens naar kijken, laten

08:01.450 --> 08:04.730
we klikken op Click Me, en je zou moeten zien Dit werkt!

08:04.730 --> 08:06.678
Als ik herlaad, werkt dit.

08:06.678 --> 08:09.680
Omdat dit nu correct gebonden is.

08:09.680 --> 08:12.060
En om te controleren of het echt onze decorator

08:12.060 --> 08:13.520
is die hier het verschil maakt,

08:13.520 --> 08:15.868
als ik de binding hier in mijn getter en de decorator

08:15.868 --> 08:17.850
zou verwijderen en ik sla dat op, zie je

08:17.850 --> 08:20.920
dat als het nu opnieuw wordt geladen en we klikken op mij,

08:20.920 --> 08:23.626
we weer ongedefinieerd zien.

08:23.626 --> 08:26.320
Het is dus echt deze extra getterlaag die hier

08:26.320 --> 08:27.389
zijn werk doet en ervoor

08:27.389 --> 08:30.430
zorgt dat dit altijd correct wordt gebonden, ongeacht

08:30.430 --> 08:33.260
hoe je showMessage aanroept.

08:33.260 --> 08:35.380
Als we het zo direct op het object aanroepen

08:35.380 --> 08:38.350
werkt het, als we het hier zo aanroepen met een event

08:38.350 --> 08:40.760
listener werkt het ook.

08:40.760 --> 08:42.260
Dus je ziet dat dit hier werkt,

08:42.260 --> 08:45.070
wat uiteindelijk komt van deze showMessage oproep

08:45.070 --> 08:48.266
en dan zie je ook dat het werkt als ik op de knop klik.

08:48.266 --> 08:49.918
Dit is dus een mooi voorbeeld van

08:49.918 --> 08:52.060
hoe je decoratoren kunt gebruiken om een

08:52.060 --> 08:55.190
vrij verbazingwekkende functionaliteit te bouwen en je

08:55.190 --> 08:58.718
het gedoe van overal handmatig binden kunt besparen.

08:58.718 --> 09:01.883
In plaats daarvan bind je het gewoon zo.
