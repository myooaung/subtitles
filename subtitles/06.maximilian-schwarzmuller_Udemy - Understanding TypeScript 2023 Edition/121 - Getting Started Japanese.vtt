WEBVTT

00:02.180 --> 00:12.030
-：添付されているのは､ すでに講座で何度も見たようなスタートプロジェクトで､ 基本的に空のインデックスを持つ非常につまらないプロジェクトです｡

00:12.030 --> 00:12.030
html

00:12.030 --> 00:14.400
ファイルと空のアプリを作成します｡ tsファイルを作成し､

00:14.400 --> 00:17.140
ここで小さな小さなデモアプリケーション､

00:17.140 --> 00:20.350
小さなプロジェクトを構築することにします｡

00:20.350 --> 00:24.705
これから作るアプリはそれほど複雑なものではありませんが､

00:24.705 --> 00:31.480
基本的にはいくつかのプロジェクトを管理できる素敵なアプリケーションになります｡ プロジェクトとは本質的に目標のことで､

00:31.480 --> 00:49.530
プロジェクトのリストがあり､ アクティブなリストと終了したリストの2つのリストがあって､ 一方のリストからもう一方のリストにアイテムをドラッグ＆ドロップしたりすることができます｡

00:49.530 --> 00:52.734
もちろん､ アプリケーション自体も素晴らしいものですが､

00:52.734 --> 00:56.570
最も重要なのは､ これまで学んだことの多くを実践できるようにすることであり､

00:56.570 --> 01:02.240
それがもちろんこのモジュールの目標でもあるのです｡

01:02.240 --> 01:05.710
このモジュールでは､ すべてのコードを1つのファイルにまとめて､

01:05.710 --> 01:12.010
この1つのアプリに書き込むことにしています｡

01:12.010 --> 01:12.010
このため､

01:12.010 --> 01:17.000
非常に大きなファイルになってしまいます｡

01:17.000 --> 01:19.420
このモジュールの後のモジュールでは､

01:19.420 --> 01:24.660
この問題に踏み込んで､ TypeSriptでこのファイルを分割する方法を紹介する予定だが､

01:24.660 --> 01:27.030
とりあえず､ まだこの問題はわからないし､

01:27.030 --> 01:32.930
ここまではサイズの問題はなかったので､ デモアプリケーションに集中しよう｡

01:32.930 --> 01:37.420
そのために､ まずは実際にインデックスに取り組んでみます｡

01:37.420 --> 01:37.420
htmlファイルです｡ 

01:37.420 --> 01:39.100
添付された新しいファイルをダウンロードして､

01:39.100 --> 01:44.650
このスタートインデックスの内容をすべて置き換えてください｡

01:44.650 --> 01:44.650
htmlファイルをダウンロードしたファイルで､

01:46.314 --> 01:48.700
appも同じようにします｡ cssはまだありません｡

01:48.700 --> 01:50.360
この講義に添付されているファイルを､

01:50.360 --> 01:57.010
プロジェクトのindexの横に追加してください｡

01:57.010 --> 01:57.010
htmlは､

01:57.010 --> 01:59.470
すでにインポートされているからです｡

01:59.470 --> 02:02.200
では､ このファイルの中で何が起こっているのでしょうか？

02:02.200 --> 02:06.900
インデックスに アプリをインポートしているhtmlファイル｡

02:06.900 --> 02:06.900
cssファイルで､

02:06.900 --> 02:10.484
いくつかのスタイリングとアプリを作成します｡ もちろん､ このようにJavaScriptのコードを書くわけではなく､

02:10.484 --> 02:15.589
app.JSファイル内にコードを書くことになります｡

02:15.589 --> 02:15.589
tsですが､

02:15.589 --> 02:19.658
それはもちろんJavaScriptファイルにコンパイルされます｡

02:19.658 --> 02:25.890
さて､ そのhtmlファイルの本文には､ いくつかのテンプレートタグがあります｡

02:25.890 --> 02:44.610
テンプレート・タグはモダンなブラウザでサポートされているデフォルトのhtmlタグで､

02:44.610 --> 03:11.386
すぐに読み込まれず､ すぐに表示されず､ すぐにレンダリングされないhtmlコードを指定することができます｡

03:11.386 --> 03:13.320
このテンプレートでは､

03:13.320 --> 03:15.450
ヘッダーとh2セクション､

03:15.450 --> 03:33.988
そして順序なしリストがあります｡ この順序なしリストには､ このテンプレートに基づいて複数のプロジェクトが格納され､ 上部のフォームから入力されたデータがレンダリングされ､

03:33.988 --> 03:38.490
すべてが TypeScript によってこの

03:38.490 --> 03:45.930
id "app" の div に追加されます｡

03:45.930 --> 04:11.975
さて､ アプリ｡  TypeScriptのコードを書くのが私たちの仕事です｡

04:11.975 --> 04:36.790
最終的にユーザーがここに入力したものを取得します｡

04:36.790 --> 04:39.580
もちろん､ 自信のある方は､

04:39.580 --> 04:54.295
これを機会に今すぐ一時停止して､ 自分で実装してみてください｡ 最終的にどのように見えるかは関係なく､

04:54.295 --> 04:57.810
このフォーラムが表示され､

04:57.810 --> 05:15.440
ユーザーが何かを入力でき､ 何かを入力したプロジェクトごとに､ このリストにリスト項目が表示されます｡

05:15.440 --> 05:17.993
では､ さっそくですが､ まずはじめに｡ 
