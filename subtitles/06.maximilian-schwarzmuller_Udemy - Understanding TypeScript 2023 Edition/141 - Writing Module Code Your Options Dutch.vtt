WEBVTT

00:02.160 --> 00:03.740
Instructeur: Dus wat zijn onze opties

00:03.740 --> 00:06.440
als we code willen splitsen in meerdere bestanden?

00:06.440 --> 00:10.720
Nu hebben we daar eigenlijk drie opties voor.

00:10.720 --> 00:12.680
De eerste optie zou zijn om gewoon meerdere

00:12.680 --> 00:16.110
codebestanden te schrijven, meerdere TypeScript-bestanden.

00:16.110 --> 00:17.460
TypeScript zal dan automatisch

00:17.460 --> 00:20.710
alle codebestanden in de bronmap compileren en de gecompileerde

00:20.710 --> 00:23.020
Java-scriptbestanden handmatig in HTML

00:23.020 --> 00:25.000
importeren.

00:25.000 --> 00:26.220
Dat is een optie en voor

00:26.220 --> 00:28.970
sommige projecten kan dit precies goed zijn, maar

00:28.970 --> 00:31.780
dan moet u al deze importen handmatig beheren, wat

00:31.780 --> 00:34.600
omslachtig en foutgevoelig kan zijn, en bij gebruik

00:34.600 --> 00:36.980
van bepaalde TypeScript-functies geeft

00:36.980 --> 00:39.560
u ook type-ondersteuning op als een bepaald type

00:39.560 --> 00:42.100
is gedefinieerd in bestand A en u gebruikt het

00:42.100 --> 00:43.670
in bestand B en TypeScript weet

00:43.670 --> 00:46.030
niet van deze verbinding.

00:46.030 --> 00:47.480
Daarom is dit niet echt een goede

00:47.480 --> 00:49.290
optie voor grotere projecten.

00:49.290 --> 00:52.500
Voor grotere projecten hebben we twee mogelijkheden.

00:52.500 --> 00:55.470
We hebben bijvoorbeeld namespaces en bestandsbundeling.

00:55.470 --> 00:59.410
Nu is namespaces een TypeScript feature, een syntax feature,

00:59.410 --> 01:03.430
je kan speciale code toevoegen aan je code om deze feature te

01:03.430 --> 01:04.840
gebruiken en het laat

01:04.840 --> 01:08.650
je toe om in principe code te groeperen onder een namespace

01:08.650 --> 01:12.730
en dan namespaces te importeren in andere bestanden.

01:12.730 --> 01:16.020
Zo kun je bijvoorbeeld een naamruimte per bestand hebben.

01:16.020 --> 01:18.790
Importeer een ander bestand in weer een ander bestand

01:18.790 --> 01:21.930
en tap in die namespace die leeft in een ander bestand van dat

01:21.930 --> 01:24.650
importerende bestand en we zullen dat in de praktijk

01:24.650 --> 01:25.970
zien voor het geval dat niet

01:25.970 --> 01:28.030
helemaal duidelijk is.

01:28.030 --> 01:30.020
TypeScript ondersteunt dat niet

01:30.020 --> 01:34.130
alleen, het bundelt ook de bestanden in één bestand, zodat u uiteindelijk

01:34.130 --> 01:37.230
code schrijft in meerdere bestanden die worden gecompileerd,

01:37.230 --> 01:39.560
maar ze worden vervolgens in elkaar geïmporteerd,

01:39.560 --> 01:50.030
zodat u minder imports hoeft te beheren en u niet handmatig verschillende imports in een HTML-bestand hoeft te beheren.

01:50.030 --> 01:52.180
Een alternatief voor namespaces

01:52.180 --> 01:55.750
en wellicht het belangrijkste en modernste alternatief,

01:55.750 --> 02:00.750
is het gebruik van ES6 Imports/Exports ook bekend als ES6 modules, want het

02:01.870 --> 02:06.480
blijkt dat totaal los van TypeScript, modern Java script ook een oplossing

02:06.480 --> 02:09.940
heeft voor dit probleem, want je hebt dit probleem niet

02:09.940 --> 02:13.140
alleen in TypeScript projecten, maar in elk groter

02:13.140 --> 02:15.850
Java script project.

02:15.850 --> 02:18.200
Modern Java script ondersteunt out of the

02:18.200 --> 02:21.150
box import en export statements, waarmee je kunt aangeven

02:21.150 --> 02:23.110
welk bestand afhankelijk is van welk

02:23.110 --> 02:24.910
ander bestand en dan heb je al deze

02:24.910 --> 02:27.920
individuele bestanden, maar je hoeft de import niet

02:27.920 --> 02:30.560
handmatig te beheren, in plaats daarvan doen

02:30.560 --> 02:33.770
browsers, moderne browsers dat.

02:33.770 --> 02:36.020
Ze begrijpen het en downloaden en draaien automatisch

02:36.020 --> 02:38.800
bestanden waarvan een ander bestand afhankelijk is.

02:38.800 --> 02:41.370
Daarvoor gebruik je de import/export syntax

02:41.370 --> 02:43.470
en TypeScript ondersteunt dat ook.

02:43.470 --> 02:46.870
U kunt het dus zonder problemen in TypeScript gebruiken.

02:46.870 --> 02:48.700
Je compileert per bestand, maar

02:48.700 --> 02:50.810
je hebt maar één scriptimport nodig

02:50.810 --> 02:53.680
omdat, zoals ik net al zei, moderne browsers dan

02:53.680 --> 02:56.350
alle andere afhankelijkheden weten op te

02:56.350 --> 02:58.570
halen en dat zie je ook in actie in dit

02:58.570 --> 03:00.710
kerngedeelte hier.

03:00.710 --> 03:02.320
Nu een belangrijke opmerking,

03:02.320 --> 03:03.830
daarmee eindigen we technisch

03:03.830 --> 03:06.110
gezien nog steeds met meerdere bestanden en

03:06.110 --> 03:09.140
hoewel we de importen niet handmatig hoeven te beheren, de

03:09.140 --> 03:11.550
scriptimporten, hebben we daardoor nog steeds

03:11.550 --> 03:13.730
enkele nadelen omdat elk bestand waarvan

03:13.730 --> 03:15.130
je afhankelijk bent apart moet

03:15.130 --> 03:16.900
worden gedownload, wat meer HTTP-verzoeken

03:16.900 --> 03:19.460
betekent enzovoort en daarom kun je bestanden bundelen

03:19.460 --> 03:22.210
om aan meerdere bestanden te werken tijdens de ontwikkeling,

03:22.210 --> 03:24.860
maar een enkel bestand verzenden voor productie, maar

03:24.860 --> 03:30.840
daar heb je hulpmiddelen van derden voor nodig, bijvoorbeeld Webpack, en ik zal je laten zien hoe dat werkt, maar in

03:30.840 --> 03:35.700
een aparte sectie waar we zullen kijken naar Webpack en TypeScript en waarom we het gebruiken

03:35.700 --> 03:39.500
en hoe we het gebruiken.

03:39.500 --> 03:41.100
Dus laten we voor nu deze twee

03:41.100 --> 03:43.900
benaderingen in hun basisvorm gebruiken en eens kijken

03:43.900 --> 03:45.870
hoe we onze code kunnen verbeteren door

03:45.870 --> 03:48.853
hem te splitsen over meerdere bestanden.
