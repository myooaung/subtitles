WEBVTT

00:00.000 --> 00:02.410
(silenzio) -: Quindi vediamo già

00:02.410 --> 00:04.190
come TypeScript può aiutarci

00:04.190 --> 00:06.200
durante lo sviluppo.

00:06.200 --> 00:10.560
Ora, sappiamo anche che esiste un tipo di numero in JavaScript.

00:10.560 --> 00:14.010
E possiamo vederlo con il tipo di operatore incorporato.

00:14.010 --> 00:15.781
Questo non è specifico di TypeScript,

00:15.781 --> 00:17.560
ma è un operatore e una parola chiave

00:17.560 --> 00:20.420
integrata supportata da JavaScript.

00:20.420 --> 00:22.910
Possiamo usarlo per ottenere il tipo di un determinato valore.

00:22.910 --> 00:27.050
Quindi, in questo caso, potremmo usare il tipo di serratura del numero uno.

00:27.050 --> 00:27.992
Se lo facciamo, vedremo

00:27.992 --> 00:30.780
che non appena compileremo il codice, eseguiremo

00:30.780 --> 00:32.623
il codice aggiornato.

00:33.780 --> 00:37.040
In questo caso, stampiamo il numero nella console.

00:37.040 --> 00:39.330
Ora lo facciamo, grazie a questo output qui,

00:39.330 --> 00:41.180
e grazie al tipo di operatore e in Vanilla

00:41.180 --> 00:43.770
JavaScript, senza TypeScript, potremmo usarlo

00:43.770 --> 00:46.710
per migliorare sempre la nostra funzione qui.

00:46.710 --> 00:51.500
Possiamo verificare se il tipo di numero è uguale a numero.

00:51.500 --> 00:54.300
Scusate, il tipo di n1 intendo, se è

00:54.300 --> 00:56.350
uguale a numero, e potremmo

00:56.350 --> 01:00.710
anche controllare se il tipo di n2 è uguale a numero.

01:00.710 --> 01:02.349
ed eseguire la nostra operazione

01:02.349 --> 01:05.220
solo se si tratta di un errore altrimenti lanciato

01:05.220 --> 01:07.860
o fare il contrario e controllare se non

01:07.860 --> 01:10.820
è uguale o se n2 non è uguale.

01:10.820 --> 01:13.230
E se uno dei due non è un numero, si potrebbe

01:13.230 --> 01:16.360
lanciare un nuovo errore, dicendo che l'input

01:16.360 --> 01:19.690
non è corretto. Questo sarebbe un modo non

01:19.690 --> 01:22.300
TypeScript per garantire che non si possa

01:22.300 --> 01:25.700
chiamare questa funzione con una stringa.

01:25.700 --> 01:26.760
Se lo faccio ora e ricompilo,

01:26.760 --> 01:29.060
otterremo il nostro errore TypeScript, ma

01:29.060 --> 01:30.830
ignoriamolo per ora.

01:30.830 --> 01:31.730
Se lo eseguiamo nuovamente,

01:31.730 --> 01:33.100
otterremo un input errato, che

01:33.100 --> 01:34.940
stiamo lanciando noi stessi.

01:34.940 --> 01:38.080
Quindi ora abbiamo reso più rigida la disfunzione in JavaScript,

01:38.080 --> 01:39.930
che fallisce in fase di esecuzione,

01:39.930 --> 01:41.970
ma fallire potrebbe essere meglio che mostrare

01:41.970 --> 01:44.950
un output errato, come accadeva prima.

01:44.950 --> 01:47.640
Si tratta quindi di un modo per controllare gli input

01:47.640 --> 01:48.715
solo in JavaScript.

01:48.715 --> 01:50.640
Non è necessario TypeScript per questo.

01:50.640 --> 01:53.200
Si tratta di normale codice JavaScript.

01:53.200 --> 01:54.033
Ma naturalmente questo approccio

01:54.033 --> 01:55.160
presenta degli svantaggi.

01:55.160 --> 01:57.160
A volte è la cosa giusta da fare.

01:57.160 --> 02:01.440
A volte è possibile convalidare solo alcuni input in fase di esecuzione.

02:01.440 --> 02:03.150
Ma l'aspetto negativo è che stiamo

02:03.150 --> 02:05.480
controllando qualcosa che in realtà possiamo

02:05.480 --> 02:08.950
evitare durante lo sviluppo con TypeScript.

02:08.950 --> 02:11.180
Quindi sì, viene lanciato un errore.

02:11.180 --> 02:14.210
E nella nostra applicazione potremmo avere misure incorporate

02:14.210 --> 02:16.860
che possono poi ripiegare su qualche altro comportamento

02:16.860 --> 02:19.080
per salvare l'applicazione in esecuzione.

02:19.080 --> 02:20.750
Tuttavia, stiamo lanciando

02:20.750 --> 02:24.180
un errore, che non è affatto necessario che si verifichi.

02:24.180 --> 02:27.350
Avremmo potuto evitarlo con TypeScript.

02:27.350 --> 02:28.830
E qui si vede davvero la differenza

02:28.830 --> 02:30.400
tra JavaScript e TypeScript, quando

02:30.400 --> 02:31.450
si tratta di tipi.

02:31.450 --> 02:33.750
JavaScript è tipizzato dinamicamente, il che

02:33.750 --> 02:35.610
significa che va benissimo avere una

02:35.610 --> 02:36.880
variabile che inizialmente

02:36.880 --> 02:39.100
potrebbe contenere un numero, a cui successivamente

02:39.100 --> 02:41.600
assegneremo una stringa.

02:41.600 --> 02:44.500
Ecco perché abbiamo l'operatore type off, in modo

02:44.500 --> 02:48.024
da poter controllare il tipo corrente di qualcosa in fase

02:48.024 --> 02:50.124
di esecuzione se abbiamo del codice

02:50.124 --> 02:52.267
che dipende da un certo tipo.

02:52.267 --> 02:53.570
TypeScript, invece,

02:53.570 --> 02:55.094
è tipizzato staticamente,

02:55.094 --> 02:58.480
il che significa che definiamo i tipi di variabili e

02:58.480 --> 03:01.740
parametri durante lo sviluppo, senza che cambino

03:01.740 --> 03:04.980
improvvisamente durante il runtime.

03:04.980 --> 03:05.813
Naturalmente,

03:05.813 --> 03:09.090
poiché TypeScript è compilato in JavaScript, in teoria

03:09.090 --> 03:10.660
potrebbero farlo.

03:10.660 --> 03:12.510
Ma se usiamo TypeScript e scriviamo

03:12.510 --> 03:13.790
del codice in cui improvvisamente

03:13.790 --> 03:19.840
assegniamo un nuovo tipo di dati a una variabile, dove prima avevamo detto che doveva essere un numero,

03:19.840 --> 03:22.900
per esempio, e ora assegniamo una stringa, otteniamo

03:22.900 --> 03:27.480
un errore durante lo sviluppo, così siamo costretti a essere chiari riguardo

03:27.480 --> 03:32.120
ai tipi che qualcosa può o non può contenere.

03:32.120 --> 03:33.710
Questa è la differenza.

03:33.710 --> 03:36.620
Quindi non vogliamo utilizzare implementazioni

03:36.620 --> 03:38.330
o soluzioni di questo tipo, se

03:38.330 --> 03:40.810
possiamo evitarlo con TypeScript.

03:40.810 --> 03:42.200
Tuttavia, è importante

03:42.200 --> 03:43.890
sapere che JavaScript conosce

03:43.890 --> 03:46.400
il concetto di tipi.

03:46.400 --> 03:48.740
Conosce alcuni tipi come numeri,

03:48.740 --> 03:50.640
stringhe e booleani.

03:50.640 --> 03:52.300
Ma usarlo significa sempre che possiamo

03:52.300 --> 03:53.540
fallire solo in fase di esecuzione

03:53.540 --> 03:56.400
invece che durante lo sviluppo, che è un posto migliore

03:56.400 --> 03:58.700
per noi sviluppatori.

03:58.700 --> 04:01.550
Ci permette di risolvere i bug prima.

04:01.550 --> 04:02.840
Inoltre, JavaScript

04:02.840 --> 04:05.410
conosce solo un paio di tipi.

04:05.410 --> 04:07.170
Come imparerete nel corso di questo corso.

04:07.170 --> 04:10.540
TypeScript conosce molti più tipi di JavaScript.

04:10.540 --> 04:14.450
Quindi il controllo del runtime non è così flessibile o potente

04:14.450 --> 04:18.030
come quello che possiamo fare con TypeScript.

04:18.030 --> 04:19.490
Per tutte queste ragioni, questo

04:19.490 --> 04:20.660
approccio non è quello che

04:20.660 --> 04:22.550
vogliamo utilizzare in questo caso.

04:22.550 --> 04:26.540
A volte può essere utile ottenere il tipo in fase di esecuzione.

04:26.540 --> 04:28.790
Ma a volte, come in questo esempio, è

04:28.790 --> 04:31.740
molto meglio ottenerlo durante lo sviluppo.

04:31.740 --> 04:34.280
L'unica cosa importante da riconoscere, naturalmente,

04:34.280 --> 04:36.070
è che con TypeScript, si arriva al

04:36.070 --> 04:38.670
supporto solo durante lo sviluppo, non in fase di

04:38.670 --> 04:39.596
runtime, perché queste

04:39.596 --> 04:41.610
funzionalità e controlli di TypeScript

04:41.610 --> 04:44.650
non sono integrati nel motore JavaScript, quindi la logica

04:44.650 --> 04:47.590
non può essere eseguita nel browser, ma solo durante lo

04:47.590 --> 04:51.223
sviluppo, quando si compila il codice.
