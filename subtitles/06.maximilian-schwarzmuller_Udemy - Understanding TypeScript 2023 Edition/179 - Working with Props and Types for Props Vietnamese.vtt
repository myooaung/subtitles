WEBVTT

00:02.170 --> 00:04.780
-: Vì vậy, mục tiêu là xây dựng một thành phần danh sách việc cần

00:04.780 --> 00:06.330
làm và do đó ở đây trong thư mục nguồn,

00:06.330 --> 00:08.600
tôi sẽ thêm một thư mục con mới, các thành phần và trong

00:08.600 --> 00:11.280
đó có tệp "to-doList. tsx", tệp này sẽ chứa thành

00:11.280 --> 00:13.690
phần danh sách việc cần làm của tôi.

00:13.690 --> 00:15.370
Bây giờ, để xây dựng một thành phần

00:15.370 --> 00:17.030
phản ứng, chúng ta cần nhập React

00:17.030 --> 00:20.250
từ "reac" nếu không JXS sẽ không hoạt động trong tệp này.

00:20.250 --> 00:22.820
Sau đó, tôi tạo hằng số danh sách việc cần làm của

00:22.820 --> 00:24.530
mình, lưu trữ một hàm mũi tên và

00:24.530 --> 00:26.990
tất nhiên đây không nhất thiết phải là một hàm

00:26.990 --> 00:30.320
mũi tên, bạn cũng có thể sử dụng một hàm với từ khóa hàm.

00:30.320 --> 00:33.160
Bây giờ chúng ta sẽ xuất cái này.

00:33.160 --> 00:36.500
Bây giờ, hãy sử dụng các tính năng bản ghi bổ sung của chúng tôi ngay bây giờ

00:36.500 --> 00:39.370
và hãy đặt loại này để phản ứng. fc để chỉ ra rằng đây không

00:39.370 --> 00:42.010
phải là một hàm thông thường mà là một thành

00:42.010 --> 00:43.950
phần chức năng.

00:43.950 --> 00:46.920
Do đó, chúng tôi gặp lỗi vì chúng tôi không trả lại

00:46.920 --> 00:49.790
thứ gì đó đủ điều kiện làm phần tử phản ứng.

00:49.790 --> 00:53.250
Vì vậy, ở đây, chúng ta nên quay lại, giả sử một danh sách không có thứ tự.

00:53.250 --> 00:54.850
Bởi vì tôi muốn hiển thị một danh sách

00:54.850 --> 00:58.000
ở đây, nên việc trả lại một danh sách không có thứ tự bây giờ là hợp lý.

00:58.000 --> 01:02.740
Bây giờ, trên danh sách không có thứ tự đó, tôi muốn xuất các mục trong danh sách.

01:02.740 --> 01:07.230
Vì vậy, ở đây, chúng ta có thể mong đợi có được những việc cần làm, và đó là một mảng,

01:07.230 --> 01:09.240
và trong một mảng, chúng ta có một đối

01:09.240 --> 01:11.690
tượng trong đó mỗi mục có một ID.

01:11.690 --> 01:15.627
Giả sử t1 cho một việc cần làm và một văn bản

01:15.627 --> 01:18.100
như "Kết thúc khóa học. Đây chỉ là một mục, nhưng tất nhiên bạn có thể

01:18.100 --> 01:18.933
có nhiều đối tượng

01:18.933 --> 01:20.800
như vậy trong mảng này.

01:20.800 --> 01:22.010
Ở đây trong danh sách của chúng tôi, sau đó chúng

01:22.010 --> 01:24.620
tôi có thể tự động xuất các việc cần làm và ánh xạ chúng vào danh sách các mục danh sách.

01:24.620 --> 01:29.620
Vì vậy, ở đây, chúng ta sẽ xem qua tất cả những việc cần làm, đây là một hàm

01:30.250 --> 01:32.930
JavaScript tích hợp, tất nhiên, hàm bản

01:32.930 --> 01:35.070
đồ và chúng ta trả về một mục danh

01:35.070 --> 01:37.740
sách cho mọi phần tử trong mảng này và trong

01:37.740 --> 01:41.530
mục danh sách đó, tôi đặt "thành -làm. text" làm nội dung trên mục danh sách và thêm chỗ dựa

01:41.530 --> 01:45.570
khóa đặc biệt này, điều mà React

01:45.570 --> 01:47.870
thực sự muốn trên các phần tử lặp

01:47.870 --> 01:49.620
lại nằm cạnh nhau.

01:49.620 --> 01:51.980
Ở đây, chúng ta nên chọn một cái gì đó duy nhất và ID

01:51.980 --> 01:54.130
phải đủ điều kiện làm mã định danh duy nhất.

01:54.130 --> 01:57.710
Cùng với đó, chúng tôi đang hiển thị danh sách việc cần làm.

01:57.710 --> 02:00.470
Bây giờ, hãy tích hợp thành phần danh sách việc cần làm

02:00.470 --> 02:02.860
vào thành phần ứng dụng và để làm điều này, tất

02:02.860 --> 02:05.520
nhiên chúng ta có thể chuyển đến thành phần ứng dụng,

02:05.520 --> 02:06.930
nhập "TodoList" từ ". /components/TodoList"

02:06.930 --> 02:11.530
như thế này, tệp ". tsx" sẽ được thêm tự động theo quy trình xây dựng mà

02:11.530 --> 02:14.350
chúng tôi đang sử dụng ở đây.

02:14.350 --> 02:17.160
Và sau đó, bên trong div của chúng ta, chúng ta có thể

02:17.160 --> 02:18.850
hiển thị "TodoList" như thế.

02:18.850 --> 02:21.440
Nếu bây giờ chúng tôi lưu cái này và chúng tôi quay lại

02:21.440 --> 02:24.190
trang đang chạy, chúng tôi sẽ thấy cái cần làm này ở đây.

02:24.190 --> 02:25.870
Kiểu dáng rất tệ và chúng tôi có thể

02:25.870 --> 02:29.350
thêm kiểu dáng tốt hơn sau này, nhưng hiện tại, điều đó sẽ ổn thôi.

02:29.350 --> 02:31.680
Bây giờ, điều này tuy nhiên không thực sự thực tế.

02:31.680 --> 02:35.620
Khi chúng tôi xây dựng ứng dụng danh sách việc cần làm này, sau này tôi muốn có

02:35.620 --> 02:37.950
thể thêm những việc cần làm mới bằng một thành

02:37.950 --> 02:40.063
phần riêng biệt mà chúng tôi chưa có.

02:40.063 --> 02:42.920
Và chúng tôi có thể sẽ quản lý các việc cần làm

02:42.920 --> 02:45.570
ở đây trong thành phần ứng dụng này bởi vì

02:45.570 --> 02:48.810
ở đây, tại nơi này, chúng tôi sẽ có một thành phần

02:48.810 --> 02:53.020
bổ sung các việc cần làm và thành phần đó sẽ có thể trao đổi lại với

02:53.020 --> 02:55.280
thành phần ứng dụng này.

02:55.280 --> 02:56.690
Tại đây, sau đó chúng tôi quản lý mảng

02:56.690 --> 02:59.650
việc cần làm của mình và chúng tôi thêm việc cần làm vào mảng đó hoặc chúng

02:59.650 --> 03:01.510
tôi xóa việc cần làm khỏi mảng đó.

03:01.510 --> 03:04.220
To-do list sau đó chúng ta sẽ chuyển mảng đó.

03:04.220 --> 03:06.930
Vì vậy, mặc dù chúng tôi chưa quản lý nó, nhưng chúng tôi có

03:06.930 --> 03:09.270
thể có mảng "việc cần làm" đó không phải trong danh

03:09.270 --> 03:11.660
sách việc cần làm mà trong thành phần ứng dụng.

03:11.660 --> 03:15.010
Thực tế hơn là mảng này sau đó sẽ kết thúc ở đây nên chúng tôi

03:15.010 --> 03:16.740
đã có thể di chuyển nó đến đây.

03:16.740 --> 03:20.093
Bây giờ, chúng ta cần chuyển nó tới "TodoList. Đối với điều này, tất nhiên, chúng ta có thể sử dụng đạo cụ.

03:20.930 --> 03:23.600
Vì vậy, trong danh sách việc cần làm, bạn có thể có một item

03:23.600 --> 03:25.640
prop, tên tất nhiên là tùy thuộc vào chúng tôi

03:25.640 --> 03:28.370
vì chúng tôi đang xác định thành phần này, chúng tôi có thể

03:28.370 --> 03:30.350
xác định cách đặt tên cho prop của nó.

03:30.350 --> 03:32.100
Chúng tôi có thể cung cấp dữ liệu trong mảng "việc cần làm" của mình.

03:32.100 --> 03:35.010
Bây giờ, chúng tôi đã thấy rằng IDE không thích điều này và nếu

03:35.010 --> 03:37.820
tôi cố gắng lưu điều này, chúng tôi cũng gặp lỗi biên dịch.

03:37.820 --> 03:40.650
Chúng tôi gặp lỗi biên dịch vì "mục"

03:40.650 --> 03:45.400
thuộc tính không tồn tại trên bất kỳ loại nào.

03:45.400 --> 03:47.830
Vì vậy, về cơ bản, nó không tồn tại trên loại giao

03:47.830 --> 03:50.440
lộ này ở đây, loại cuối cùng xác định cấu trúc của

03:50.440 --> 03:52.070
các đạo cụ mà "TodoList. Bởi vì khi sử dụng TypeScript với

03:52.070 --> 03:55.300
React, bạn phải hiểu rõ về các loại mà bạn đang làm việc.

03:55.300 --> 03:59.470
Điều đó không chỉ có nghĩa là bạn nói với TypeScript rằng đây là một loại

03:59.470 --> 04:02.110
chức năng đặc biệt, không, nó còn có nghĩa là

04:02.110 --> 04:05.250
nếu bạn dựa vào các đạo cụ trong một số thành phần, bạn

04:05.250 --> 04:08.360
sẽ nói cho TypeScript biết các đạo cụ này trông như thế

04:08.360 --> 04:11.020
nào và chúng được cấu trúc như thế nào.

04:11.020 --> 04:14.860
Vì vậy, trong thành phần danh sách việc cần làm, chúng tôi nhận được các

04:14.860 --> 04:17.420
đạo cụ ở đây, phải, đó là React thông thường.

04:17.420 --> 04:19.400
Và trên các đạo cụ, chúng tôi có thể có tài sản của vật phẩm của chúng tôi.

04:19.400 --> 04:23.530
Vì vậy, chúng tôi có một chỗ dựa có tên là "vật phẩm"

04:23.530 --> 04:26.200
và đó thực sự là những gì tôi đã

04:26.200 --> 04:30.323
nói ở đây: "Tôi có chỗ dựa vật phẩm này. Vấn đề bây giờ là về mặt kỹ thuật này sẽ hoạt động nhưng bản

04:31.420 --> 04:33.430
ghi vẫn chưa bị hủy bỏ.

04:33.430 --> 04:35.067
Chúng tôi đã không thực sự nói với TypeScript

04:35.067 --> 04:37.140
rằng prop của chúng tôi nên có thuộc tính "items" ở đây.

04:37.140 --> 04:39.503
Để nói với nó, chúng ta có thể sử dụng

04:39.503 --> 04:41.950
thực tế là loại thành phần chức năng

04:41.950 --> 04:45.063
này ở đây thực sự là một loại chung.

04:45.063 --> 04:46.913
Một loại chung mà chúng ta có thể định nghĩa tất

04:47.840 --> 04:50.510
cả các props bổ sung bên cạnh props mặc định của child, mà mọi thành

04:50.510 --> 04:52.170
phần đều có, mà chúng ta mong đợi ở đây.

04:52.170 --> 04:54.250
Vì vậy, chúng ta có thể thêm các dấu ngoặc

04:54.250 --> 04:58.132
nhọn ở đây và thêm đối tượng mô tả cấu trúc của đối tượng "đạo cụ" mà chúng ta

04:58.132 --> 05:00.710
đang có ở đây hoặc, để giữ cho mã của chúng ta gọn gàng

05:00.710 --> 05:03.670
hơn, chúng ta thực hiện điều này trong một giao diện bổ sung

05:03.670 --> 05:06.170
ở đây và điều đó hoàn toàn không bắt buộc.

05:06.170 --> 05:09.670
Vì vậy, ở đây chúng ta có thể có các đạo cụ danh sách việc cần làm và điều

05:09.670 --> 05:12.350
này mô tả các đạo cụ của chúng ta trông như thế nào.

05:12.350 --> 05:15.120
Và ở đây, tôi hy vọng sẽ nhận được khóa "item",

05:15.120 --> 05:18.260
trong đó chúng ta có một mảng các đối tượng mà mọi

05:18.260 --> 05:20.510
đối tượng đều có ID, là một chuỗi

05:20.510 --> 05:23.380
và có một văn bản, là một chuỗi.

05:23.380 --> 05:26.120
Đó là dữ liệu chúng tôi đang quản lý ở đây.

05:26.120 --> 05:30.020
Chúng tôi có một mảng các đối tượng có

05:30.020 --> 05:32.850
chuỗi ID và chuỗi văn bản.

05:32.850 --> 05:34.370
Đó là những gì tôi mong đợi để có được ở đây

05:34.370 --> 05:36.070
là "đạo cụ" một mảng các đối tượng như vậy và

05:36.070 --> 05:38.940
nếu chúng ta ở đây, bây giờ chúng ta có thể chỉ vào giao diện đạo cụ danh sách

05:38.940 --> 05:40.700
việc cần làm này và bây giờ mọi thứ đều ổn. Bây giờ Typescript hiểu

05:40.700 --> 05:42.670
rằng ở đây, chúng ta sẽ nhận

05:42.670 --> 05:45.040
được các props, nơi chúng ta sẽ có

05:45.040 --> 05:48.640
một item prop và item prop này sẽ là một mảng nơi chúng

05:48.640 --> 05:52.145
ta có khóa ID và khóa văn

05:52.145 --> 05:55.000
bản trên mọi phần tử mảng.

05:55.000 --> 05:56.920
Vì vậy, bây giờ nếu chúng tôi lưu cái này, nó sẽ biên

05:56.920 --> 05:58.870
dịch và chúng tôi lại nhận được đầu ra hoạt động.

05:58.870 --> 05:59.850
Vì vậy, một lần nữa, đây là bản thảo được sử dụng với React.

05:59.850 --> 06:02.390
Chúng tôi không chỉ sử dụng nó để nói với React hoặc để nói

06:02.390 --> 06:04.188
với TypeScript, rằng đây là một thành phần

06:04.188 --> 06:06.830
chức năng, mà còn về các đạo cụ mà thành phần này cuối cùng nhận

06:06.830 --> 06:10.000
được và điều này giúp chúng tôi rất nhiều với sự an toàn của loại.

06:10.000 --> 06:13.490
Nó tránh được việc tôi vô tình nghĩ rằng nó được

06:13.490 --> 06:15.130
đặt tên là "todos. Không, điều này không được hỗ trợ, chúng tôi gặp lỗi.

06:15.130 --> 06:19.060
Nó là các mặt hàng.

06:19.060 --> 06:21.165
Tất cả các bạn sẽ thấy chúng được hoàn thành tự động tại đây.

06:21.165 --> 06:23.330
Vì vậy, mã hóa trở nên dễ dàng hơn rất nhiều khi

06:23.330 --> 06:24.910
làm việc với bản thảo ở đây. Và tất nhiên đó là toàn bộ ưu điểm của Typescript: nó đơn giản

06:24.910 --> 06:27.160
hóa việc viết mã, nó tránh những lỗi không cần thiết và như bạn có thể thấy, nó cũng

06:27.160 --> 06:28.400
làm như vậy trong một ứng dụng phản ứng.

06:28.400 --> 06:30.670
Tất nhiên, chúng tôi chưa kết thúc, mặc dù.

06:30.670 --> 06:34.420
Hiện tại, việc cần làm của chúng tôi ở đây không bao

06:34.420 --> 06:36.640
giờ thay đổi và

06:36.640 --> 06:39.930
tôi muốn thay đổi điều đó, tôi muốn có một thành

06:39.930 --> 06:44.120
phần cho phép chúng tôi thêm việc cần làm mới.

06:44.120 --> 06:46.080
Vì vậy, hãy làm việc trên đó tiếp theo.
