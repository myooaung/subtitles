WEBVTT

00:02.340 --> 00:04.020
講師：TypeScriptに関する基礎知識､

00:04.020 --> 00:06.240
コアとなる型について､ ほぼ終了しました｡

00:06.240 --> 00:10.130
さらに2つのタイプがありますが､ これはその時々で重要な意味を持つので､

00:10.130 --> 00:13.170
意識しておくとよいでしょう｡

00:13.170 --> 00:16.603
1つ目のタイプは､ 未知のタイプです｡ 

00:17.860 --> 00:23.343
そのために､ このファイルをあなたの関数と名付けることにします｡  ツし､ 新しいアプリを追加します｡

00:23.343 --> 00:23.343
tsファイルを作成し､

00:24.290 --> 00:32.143
その中に新しい変数userInputがあり､ これはunknown型であるとします｡

00:32.143 --> 00:38.500
デフォルトのanyではなく､ TypeScriptで導入されたunknownという別の型になっています｡

00:38.500 --> 00:40.950
ユーザーが最終的に何を入力するのかがまだわからないので､

00:40.950 --> 00:42.950
不明かもしれません｡

00:42.950 --> 00:45.593
数字ならともかく､ 文字列ではわからない｡ 

00:46.770 --> 00:48.960
さて､ unknown型の面白いところは､

00:48.960 --> 00:54.630
どんな値でもエラーにならずに格納できることです｡

00:54.630 --> 01:00.290
ここで私のファイルをコンパイルしてみると､ コンパイルエラーは発生しないことがわかります｡

01:00.290 --> 01:03.820
つまり､ ここまでは､ ここで型を割り当てずにany型にした場合と､

01:03.820 --> 01:08.610
明示的にanyを型として設定した場合と同じなのです｡

01:08.610 --> 01:11.810
それでも､ 未知なるものは､ どんなものとも違う｡ 

01:11.810 --> 01:15.430
しかし､ 別の変数､ 例えばuserNameがある場合､

01:15.430 --> 01:20.890
問題が発生します｡

01:20.890 --> 01:22.860
そして､ ここでは初期化されていませんが､

01:22.860 --> 01:27.200
ここではuserNameをuserInputと等しく設定したいのです｡

01:27.200 --> 01:29.150
今､ エラーが出たのがお分かりになると思います｡ 

01:29.150 --> 01:33.010
unknown 型は string 型に代入できない｡ 

01:33.010 --> 01:34.590
つまり､ userNameは文字列を欲しており､

01:34.590 --> 01:37.990
当然ながらunknownは文字列であることが保証されていない｡

01:37.990 --> 01:41.620
ここでは､ 1つを割り当てたが､ それはこのラインだけの話だ｡ 

01:41.620 --> 01:46.490
userInputは未知数なので､ 技術的にはどのような値でも保持することができます｡

01:46.490 --> 01:47.640
面白いのは､ unknownをanyに切り替えると､

01:47.640 --> 01:53.900
このエラーがなくなることです｡ anyはTypeScriptで最も柔軟な型なので､ 基本的に型チェックをすべて無効にして､

01:53.900 --> 02:00.950
TypeScriptが「あきらめます､ 好きなようにしてください」と言うだけなのです｡

02:00.950 --> 02:00.950
Unknownはanyより少し制約がある｡ 

02:00.950 --> 02:05.510
unknownの場合､ 例えば文字列を欲している変数に代入する前に､

02:05.510 --> 02:14.400
まずuserInputに現在格納されている型を確認する必要があるんだ｡

02:14.400 --> 02:16.180
TypeScriptはこのチェックを検知して､

02:16.180 --> 02:18.110
userNameに格納されているものが何であるかを理解する｡

02:18.110 --> 02:36.920
なぜなら､ このif文はuserInputがstring型であることをチェックして終了するので､ userInputは文字列であることが保証され､ したがってuserNameに安全に代入できる｡

02:36.920 --> 02:50.530
つまり､ 未知の値を固定型の値に代入するためには､

02:50.530 --> 03:02.910
unknownによる追加の型チェックが必要なのです｡

03:02.910 --> 03:07.440
まあ､ やりたいことができるかどうかのチェックを追加するだけで､

03:07.440 --> 03:12.160
文字列を扱いたいなら文字列があればOKということになります｡

03:12.160 --> 03:14.690
そして､ 未知数というのは､ 何でもかんでもできるわけではないが､

03:14.690 --> 03:20.930
少なくとも何らかの型式チェックができるようになるからです｡

03:20.930 --> 03:23.260
もちろん､ userInputが常に文字列である､

03:23.260 --> 03:25.990
あるいは常に文字列または数値であることを事前に知っている可能性がある場合は､

03:25.990 --> 03:31.680
unknownの代わりにstringまたはそのようなユニオン型を使用する必要があります｡

03:31.680 --> 03:34.460
つまり､ unknownはまだ､ ずっと使ってはいけないタイプですが､

03:34.460 --> 03:37.460
説明したような理由で､ どれよりも優れています｡
