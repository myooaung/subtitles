WEBVTT

00:02.540 --> 00:05.610
Instructeur : Je vais maintenant explorer les surcharges

00:05.610 --> 00:08.050
de fonctions, une fonctionnalité qui nous permet

00:08.050 --> 00:11.450
de définir plusieurs signatures de fonctions, pour ainsi dire,

00:11.450 --> 00:13.840
pour une seule et même fonction.

00:13.840 --> 00:17.080
Cela signifie simplement que nous pouvons avoir plusieurs façons

00:17.080 --> 00:20.340
possibles d'appeler une fonction avec différents paramètres, par

00:20.340 --> 00:24.300
exemple, pour ensuite faire quelque chose à l'intérieur de cette fonction.

00:24.300 --> 00:26.540
Et un bon exemple où les surcharges de fonctions

00:26.540 --> 00:29.060
peuvent nous aider peut être vu un peu plus haut.

00:29.060 --> 00:32.090
Cette fonction d'ajout que nous avons écrite plus tôt, ce qu'elle

00:32.090 --> 00:35.940
fait, c'est qu'elle prend deux valeurs combinables, ce qui signifie des chaînes

00:35.940 --> 00:37.960
de caractères ou des nombres, et ensuite,

00:37.960 --> 00:39.830
comme vous pouvez le voir, le type de

00:39.830 --> 00:43.450
retour que TypeScript déduit ici est combinable.

00:43.450 --> 00:45.370
Cela signifie simplement que TypeScript

00:45.370 --> 00:47.960
comprend que ce qu'il renvoie est également une chaîne

00:47.960 --> 00:51.080
ou un nombre, mais en fait, si vous y réfléchissez, ce n'est

00:51.080 --> 00:52.880
pas vraiment vrai.

00:52.880 --> 00:55.280
Je veux dire, techniquement c'est vrai, mais nous

00:55.280 --> 00:57.620
savons que si nous passons dans deux nombres le type

00:57.620 --> 00:59.400
de retour sera toujours un nombre.

00:59.400 --> 01:01.940
Si nous passons au moins une chaîne, le type

01:01.940 --> 01:03.950
de retour sera une chaîne.

01:03.950 --> 01:05.460
En quoi cela peut-il être important ?

01:05.460 --> 01:08.225
Gardez à l'esprit que la fonction d'ajout est écrite comme ceci.

01:08.225 --> 01:11.060
Et en fait, vous pouvez commenter tout ce qui se trouve

01:11.060 --> 01:15.390
en dessous et ajouter un nouveau code juste en dessous de la fonction.

01:15.390 --> 01:18.670
Si j'obtiens maintenant mon résultat ici en appelant add,

01:18.670 --> 01:21.870
je passe dans un et cinq, vous voyez que le résultat est

01:21.870 --> 01:23.390
de type combinable.

01:23.390 --> 01:27.010
Une conséquence de ceci est que TypeScript ne sait

01:27.010 --> 01:30.390
pas si le résultat est un nombre ou une chaîne.

01:30.390 --> 01:34.510
Maintenant, cela peut vraiment avoir de l'importance si nous passons dans des chaînes de caractères.

01:34.510 --> 01:39.510
Si je passe en Max Schwarz ici, alors cela fonctionne mais je récupère

01:39.700 --> 01:41.750
toujours du combinable.

01:41.750 --> 01:43.990
En conséquence, je ne peux pas appeler les

01:43.990 --> 01:46.120
fonctions de chaîne sur le résultat,

01:46.120 --> 01:50.600
je ne peux pas appeler split par exemple pour diviser sur l'espace blanc.

01:50.600 --> 01:52.870
Je sais que cela va fonctionner, parce que je sais que

01:52.870 --> 01:55.270
lorsque j'appelle la fonction comme ceci, je la transformerai

01:55.270 --> 01:57.200
en branche if et je récupérerai une chaîne de

01:57.200 --> 01:59.980
caractères, donc je sais que les résultats contiendront la chaîne

01:59.980 --> 02:03.030
de caractères, mais TypeScript sait simplement qu'elle contient une

02:03.030 --> 02:05.620
chaîne de caractères ou un nombre.

02:05.620 --> 02:08.350
Maintenant, bien sûr, nous pouvons utiliser le type casting ici

02:08.350 --> 02:11.340
et dire à TypeScript que ce que nous obtenons en retour est une chaîne.

02:11.340 --> 02:13.930
Nous pouvons le faire avec la syntaxe du type casting

02:13.930 --> 02:16.040
que vous avez appris plus tôt.

02:16.040 --> 02:18.840
Pourtant, ce n'est pas optimal de devoir faire cela, je dirais,

02:18.840 --> 02:21.800
parce que nous devons écrire plus de code ici, même si nous nous attendons

02:21.800 --> 02:24.560
à ce que TypeScript comprenne que lorsque nous appelons cette

02:24.560 --> 02:26.070
fonction comme ceci, nous obtenons

02:26.070 --> 02:27.740
toujours une chaîne.

02:27.740 --> 02:30.890
Mais TypeScript n'analyse pas vraiment notre code assez

02:30.890 --> 02:33.700
bien ici, et c'est là qu'une surcharge de fonction

02:33.700 --> 02:35.000
peut nous aider.

02:35.000 --> 02:38.730
Une surcharge de fonction est écrite en écrivant simplement la fonction

02:38.730 --> 02:41.880
juste au-dessus de votre fonction principale, pour ainsi

02:41.880 --> 02:46.683
dire, avec le même nom, donc vous répétez cette ligne ici fondamentalement, cependant

02:47.880 --> 02:50.890
sans les accolades, pas d'accolades d'ouverture et

02:50.890 --> 02:54.080
de fermeture par la suite, et maintenant ici vous voulez

02:54.080 --> 02:57.980
utiliser les types spécifiques nombre et nombre et ensuite le type de

02:57.980 --> 03:03.410
retour find pour quand c'est le cas quand vous obtenez au moins un nombre.

03:03.410 --> 03:06.643
Et là on pourrait dire, alors le type de retour est un nombre.

03:08.840 --> 03:10.980
Donc maintenant, avec cela, nous disons à TypeScript,

03:10.980 --> 03:14.980
si nous appelons cette fonction et que les deux arguments sont un nombre, alors cette

03:14.980 --> 03:17.180
fonction renvoie un nombre.

03:17.180 --> 03:19.430
Bien entendu, cette syntaxe ne fonctionne

03:19.430 --> 03:22.480
pas en JavaScript, elle sera éliminée par TypeScript lors

03:22.480 --> 03:24.430
du processus de compilation.

03:24.430 --> 03:28.480
Mais TypeScript fusionne cette information de fonction et cette

03:28.480 --> 03:31.380
déclaration de fonction ici ensemble et combine

03:31.380 --> 03:33.640
fondamentalement la connaissance

03:33.640 --> 03:35.550
de ces deux lignes ici.

03:35.550 --> 03:38.590
Et maintenant il sait que nous pouvons appeler cette

03:38.590 --> 03:41.490
fonction ici soit avec A et B de type combinable,

03:41.490 --> 03:43.790
soit avec A et B de type nombre.

03:43.790 --> 03:47.060
À propos, vous pouvez également ajouter plus ou moins de paramètres

03:47.060 --> 03:50.100
dans vos surcharges, vous êtes vraiment flexible.

03:50.100 --> 03:53.640
Vous pouvez également ajouter la fonction add ici et

03:53.640 --> 03:57.620
attendre un nombre et retourner un nombre, et cela fonctionnera

03:57.620 --> 04:01.210
également si nous rendons B optionnel dans nos autres

04:01.210 --> 04:03.270
surcharges également.

04:03.270 --> 04:05.254
Parce qu'en fin de compte, bien sûr, vous devez

04:05.254 --> 04:08.630
vous assurer que votre code ici fonctionne toujours et que vous recevez tous

04:08.630 --> 04:10.850
les arguments dont vous avez besoin à la fin.

04:10.850 --> 04:13.610
Donc, B serait optionnel ici et vous voyez que cela fonctionne,

04:13.610 --> 04:15.170
maintenant, bien sûr, nous devrions

04:15.170 --> 04:17.850
juste travailler autour de B étant potentiellement optionnel

04:17.850 --> 04:19.550
là-bas.

04:19.550 --> 04:21.390
Je n'en ai cependant pas besoin, je vais donc

04:21.390 --> 04:24.460
m'en débarrasser et laisser ceci, mais je ne voulais pas non plus de surcharge

04:24.460 --> 04:27.200
pour les cas où nous l'appelons avec des chaînes.

04:27.200 --> 04:30.060
Je vais donc ajouter une autre surcharge de fonction ici

04:30.060 --> 04:33.450
où A est une chaîne de caractères et B une chaîne de caractères et

04:33.450 --> 04:36.090
je suis assez clair quant au fait que ce que nous retournons

04:36.090 --> 04:38.460
sera une chaîne de caractères.

04:38.460 --> 04:40.280
Au fait, c'est une bonne pratique d'ajouter

04:40.280 --> 04:43.660
un point-virgule après ces lignes de surcharge ici.

04:43.660 --> 04:46.560
Donc maintenant, avec ça, je dis que si on appelle cette fonction

04:46.560 --> 04:49.100
avec deux nombres, on obtient toujours un nombre.

04:49.100 --> 04:52.170
Si on l'appelle avec deux cordes, on obtient toujours une corde.

04:52.170 --> 04:54.510
Si nous l'appelons avec une chaîne et un numéro, nous

04:54.510 --> 04:57.020
obtenons techniquement toujours une chaîne, mais je

04:57.020 --> 04:57.853
ne veux pas ajouter

04:57.853 --> 04:59.410
toutes ces combinaisons possibles

04:59.410 --> 05:01.240
ici, je pourrais bien sûr en ajouter d'autres

05:01.240 --> 05:03.173
et ajouter aussi le numéro ici, ou l'autre

05:04.040 --> 05:07.500
combinaison que nous pourrions avoir, qui est celle-ci.

05:07.500 --> 05:10.060
Eh bien, je suppose que maintenant j'ai ajouté toutes les combinaisons.

05:10.060 --> 05:12.540
Et maintenant, j'énumère toutes les combinaisons

05:12.540 --> 05:16.040
potentielles de valeurs ici et ce que nous retournons dans chaque cas.

05:16.040 --> 05:18.260
Avec cela, vous voyez que l'erreur en bas a disparu

05:18.260 --> 05:20.520
parce que maintenant TypeScript sait que les résultats

05:20.520 --> 05:25.623
seront de type string si nous appelons add avec ces deux valeurs qui sont toutes deux des strings.

05:25.623 --> 05:28.510
Et si je passe la souris sur l'ajout, vous voyez qu'il y a trois

05:28.510 --> 05:31.100
surcharges supplémentaires disponibles.

05:31.100 --> 05:32.980
Ici, j'appelle add avec deux chaînes,

05:32.980 --> 05:35.560
mais TypeScript sait qu'il existe trois autres façons

05:35.560 --> 05:36.630
de l'appeler.

05:36.630 --> 05:39.450
Par exemple, avec une chaîne et un numéro,

05:39.450 --> 05:41.340
auquel cas je reçois une chaîne,

05:41.340 --> 05:46.340
avec un numéro et une chaîne, ou avec deux numéros.

05:47.430 --> 05:48.630
Cela pourrait également fonctionner.

05:48.630 --> 05:50.210
Ensuite, bien sûr, je ne peux pas appeler

05:50.210 --> 05:52.650
split parce que TypeScript identifie correctement que lorsque

05:52.650 --> 05:54.630
j'appelle ceci avec deux chiffres, je reçois en

05:54.630 --> 05:58.253
retour un chiffre, et sur un chiffre, vous ne pouvez pas appeler split.

05:59.260 --> 06:02.010
Il s'agit donc de surcharges de fonctions et elles peuvent

06:02.010 --> 06:04.060
vous aider dans des situations comme celle-ci,

06:04.060 --> 06:06.780
où TypeScript ne serait pas en mesure de déduire correctement

06:06.780 --> 06:08.590
le type de retour par lui-même, ici vous

06:08.590 --> 06:11.660
pouvez être vraiment clair sur ce qui est retourné pour les différentes

06:11.660 --> 06:16.033
combinaisons que vous pourriez supporter dans votre fonction.
