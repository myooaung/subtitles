WEBVTT

00:02.390 --> 00:04.530
Instruktur: Sekarang mengirim permintaan

00:04.530 --> 00:06.890
bisa dilakukan tanpa paket pihak ketiga.

00:06.890 --> 00:10.140
Dalam JavaScript modern di browser modern, Anda

00:10.140 --> 00:11.910
harus mengambil API.

00:11.910 --> 00:13.620
Ini dibangun ke dalam browser, ini

00:13.620 --> 00:16.710
adalah fungsi yang tersedia secara global dan Anda dapat menggunakannya

00:16.710 --> 00:19.600
untuk mengirim permintaan ke URL.

00:19.600 --> 00:22.450
Sekarang tidak ada yang menentang API ini, selain

00:22.450 --> 00:24.870
fakta bahwa penanganan kesalahan bisa

00:24.870 --> 00:27.210
sedikit kikuk dengannya.

00:27.210 --> 00:29.250
Tetapi saya juga ingin mempraktikkan

00:29.250 --> 00:31.123
penggunaan pustaka pihak ketiga.

00:31.960 --> 00:36.070
Oleh karena itu, kita akan menggunakan paket axios yang sangat populer.

00:36.070 --> 00:38.510
Ini adalah paket yang dapat Anda gunakan dalam

00:38.510 --> 00:43.510
JavaScript dan oleh karena itu juga dalam TypeScript untuk mengirim permintaan HTTP.

00:43.880 --> 00:47.263
Jadi kita hanya perlu menginstal axios untuk mulai menggunakannya.

00:48.100 --> 00:51.080
Untuk ini dalam proyek kami di mana kami dapat menggunakan

00:51.080 --> 00:54.150
NPM untuk mengelola dependensi, kami dapat menjalankan

00:54.150 --> 00:57.620
npm install, dash, dash save axios seperti ini dan ini sekarang

00:57.620 --> 01:00.520
akan menginstal paket axios.

01:00.520 --> 01:04.750
Dengan ini terinstal, kita sekarang dapat mengimpor axios di sini,

01:04.750 --> 01:07.390
impor axios dari axios, dan Anda akan melihat

01:07.390 --> 01:09.170
sesuatu yang menarik.

01:09.170 --> 01:12.090
Jika sekarang saya mulai menggunakan ini dan saya mengetik titik di sini,

01:12.090 --> 01:13.990
saya mendapatkan pelengkapan otomatis.

01:13.990 --> 01:16.290
Dan misalnya, Anda memiliki metode get di sini

01:16.290 --> 01:18.523
yang akan mengirim permintaan get ke URL.

01:19.850 --> 01:23.150
Jadi di sini kita benar-benar mendapat dukungan TypeScript bawaan.

01:23.150 --> 01:25.640
Dan jika kita pergi ke modul

01:25.640 --> 01:29.670
node dan kita lihat paket axios, ini dia.

01:29.670 --> 01:33.970
Anda akan melihat bahwa di sana, ada indeks. file dts.

01:33.970 --> 01:38.970
Jadi, penulis pustaka axios sudah membundel pustaka mereka

01:39.430 --> 01:43.750
bersama dengan paket terjemahan TypeScript.

01:43.750 --> 01:47.440
Di sana, semuanya dijelaskan ke TypeScript.

01:47.440 --> 01:50.120
Paket ini atau file ini di sini pada dasarnya menjelaskan

01:50.120 --> 01:53.660
kepada TypeScript apa yang dapat dilakukan oleh pustaka JavaScript ini

01:53.660 --> 01:55.600
dan jenis yang digunakannya.

01:55.600 --> 01:59.100
Sekarang beberapa perpustakaan melakukan itu dan axios adalah salah satunya.

01:59.100 --> 02:02.070
Anda dapat mengetahui dengan cepat apakah sebuah perpustakaan melakukan hal ini atau tidak,

02:02.070 --> 02:03.420
jika Anda mulai menggunakannya.

02:03.420 --> 02:05.520
Jika Anda tidak mendapatkan dukungan pelengkapan

02:05.520 --> 02:07.930
otomatis dan Anda mendapat banyak kesalahan kompilasi,

02:07.930 --> 02:10.750
Anda mungkin perlu menginstal tipe tambahan.

02:10.750 --> 02:12.970
Jika Anda mendapatkan dukungan yang baik seperti

02:12.970 --> 02:16.120
yang kami lakukan di sini dan Anda tidak akan mendapatkan kesalahan kompilasi

02:16.120 --> 02:18.140
setelahnya, maka Anda sudah mendapatkan library

02:18.140 --> 02:20.170
dengan terjemahan tipe bawaan.

02:20.170 --> 02:23.120
Dan karenanya, Anda tidak perlu menginstal jenis tambahan apa pun.

02:23.120 --> 02:26.240
Senang mengetahuinya dan di sini kita memiliki contoh yang bagus.

02:26.240 --> 02:27.800
Jadi, karena kita sudah memiliki dukungan

02:27.800 --> 02:30.410
bawaan, kita bisa langsung mulai menggunakan akses.

02:30.410 --> 02:34.350
Dan saya ingin mengirim permintaan HTTP ke URL ini sekarang.

02:34.350 --> 02:37.980
Jadi mari kita salin URL ini dan masukkan di sini.

02:37.980 --> 02:40.220
Dan saya akan memasukkannya di antara

02:40.220 --> 02:42.440
backticks untuk membuat template literal,

02:42.440 --> 02:45.880
sehingga mereka dapat dengan mudah menukar bagian dari string

02:45.880 --> 02:49.050
ini dengan dinamis untuk nilai lainnya.

02:49.050 --> 02:51.730
Jadi mari kita tempelkan string itu, cukup panjang

02:51.730 --> 02:55.460
dan mari kita mulai dengan mengganti kunci API Anda di bagian akhir

02:55.460 --> 02:59.210
dengan kunci Google API kita yang kita simpan di konstanta ini.

02:59.210 --> 03:01.690
Untuk ini, karena ini adalah template literal,

03:01.690 --> 03:04.110
kita dapat menambahkan tanda dollar, kurung

03:04.110 --> 03:09.110
kurawal, dan kemudian menunjuk ke Google API key untuk menggunakan konstanta ini.

03:10.820 --> 03:13.240
Selain itu, mari kita tukar alamat ini.

03:13.240 --> 03:15.500
Di sini kita punya alamat dummy yang dimasukkan

03:15.500 --> 03:17.130
dan tentu saja di sana saya ingin menggunakan

03:17.130 --> 03:19.300
alamat yang dimasukkan pengguna.

03:19.300 --> 03:22.540
Sekarang hanya satu catatan penting, alamat ini, tentu

03:22.540 --> 03:24.910
saja, persis seperti teks yang dimasukkan

03:24.910 --> 03:27.560
pengguna dan yang ditawarkan dapat berisi karakter

03:27.560 --> 03:30.650
khusus, spasi, koma, dan banyak lagi.

03:30.650 --> 03:32.250
Dan tidak semua karakter

03:32.250 --> 03:35.580
dan simbol ini didukung dalam URL.

03:35.580 --> 03:37.750
Jadi, kita perlu mengonversi string yang dimasukkan

03:37.750 --> 03:40.550
ini menjadi string yang kompatibel dengan URL.

03:40.550 --> 03:43.810
Dan untungnya, TypeScript dan JavaScript secara

03:43.810 --> 03:46.940
khusus memiliki fungsi bawaan yang membantu

03:46.940 --> 03:50.460
kita dengan itu, fungsi encode URI.

03:50.460 --> 03:53.020
Kita dapat memanggilnya dan mengoper string ke

03:53.020 --> 03:54.770
sana dan ini akan mengubah string

03:54.770 --> 03:57.460
ini menjadi string yang kompatibel dengan URL.

03:57.460 --> 03:59.845
Dengan itu kita mendapatkan URL yang sudah

03:59.845 --> 04:01.600
jadi yang dapat kita kirimkan permintaan

04:01.600 --> 04:04.900
untuk mendapatkan kembali koordinat kita.

04:04.900 --> 04:07.390
Sekarang get memberi kita janji karena tentu saja,

04:07.390 --> 04:10.620
mengirim permintaan seperti itu sebagai tugas asinkron.

04:10.620 --> 04:13.430
Dan di sana kita memiliki log jika ini berhasil

04:13.430 --> 04:15.690
atau menangkap jika kita memiliki kesalahan

04:15.690 --> 04:18.620
teknis atau kode respons kesalahan.

04:18.620 --> 04:21.560
Jadi di sini kita akan console log kesalahan apa pun yang mungkin

04:21.560 --> 04:24.710
kita dapatkan pada titik ini, karena biasanya kita harus berhasil.

04:24.710 --> 04:27.820
Dan oleh karena itu di sini, saya akan mengharapkan

04:27.820 --> 04:32.400
respons saya di blok then dan saya juga ingin mencatat respons ini.

04:32.400 --> 04:35.820
Jadi sekarang dengan itu, saya akan mengatakan, mari kita lihat apa yang diberikan ini kepada kita.

04:35.820 --> 04:39.720
Mari kita jalankan kembali NPM start untuk memunculkan proses webpack lagi dan

04:39.720 --> 04:40.953
mulai membangun ini.

04:42.120 --> 04:43.790
Dan mari kita kembali ke aplikasi

04:43.790 --> 04:47.220
kita dan memasuki tempat di sini seperti Sixth Avenue.

04:47.220 --> 04:50.090
Jika saya menekan Search Address, Anda akan melihat setelah beberapa saat

04:50.090 --> 04:51.480
Anda mendapatkan output di sini.

04:51.480 --> 04:53.660
Dan di sana Anda harus memiliki kode status

04:53.660 --> 04:56.120
200 yang berarti bahwa permintaan berhasil.

04:56.120 --> 04:59.090
Dan Anda memiliki bidang data yang menampung

04:59.090 --> 05:01.240
data yang dibalas oleh server.

05:01.240 --> 05:03.890
Bidang data itu memiliki bidang hasil dan di sana

05:03.890 --> 05:06.570
kita memiliki array, seperti yang Anda ketahui.

05:06.570 --> 05:10.690
Dalam larik itu, kami mendapat beberapa item, jumlahnya bervariasi.

05:10.690 --> 05:13.770
Dan ini pada dasarnya adalah hasil yang ditemukan Google.

05:13.770 --> 05:16.740
Dan hasil pertama biasanya merupakan yang terbaik.

05:16.740 --> 05:18.790
Jadi, jika Anda melihat itu, kita melihat

05:18.790 --> 05:20.460
misalnya, alamat yang diformat.

05:20.460 --> 05:22.520
Jadi alamat yang ditemukan Google untuk alamat

05:22.520 --> 05:23.790
yang kita masukkan ini, sedikit

05:23.790 --> 05:26.570
lebih lengkap daripada yang kita masukkan.

05:26.570 --> 05:29.300
Dan kita punya kunci geometri di sini.

05:29.300 --> 05:31.880
Dan jika kita memperluas ini, kita melihat bahwa

05:31.880 --> 05:35.240
pada gilirannya memiliki kunci lokasi dan ini akhirnya adalah

05:35.240 --> 05:37.540
objek dengan koordinat yang kita minati,

05:37.540 --> 05:39.700
garis lintang dan garis bujur.

05:39.700 --> 05:43.000
Jadi pada akhirnya, kita harus menelusuri data, hasil

05:43.000 --> 05:47.390
dan kemudian di sana hasil pertama, geometri, lokasi dan kita akan memiliki

05:47.390 --> 05:50.030
objek dengan garis lintang dan bujur.

05:50.030 --> 05:52.840
Dan kita akan dapat kemudian merender garis lintang

05:52.840 --> 05:55.240
dan bujur ini pada peta nanti.

05:55.240 --> 05:57.430
Jadi untuk saat ini, mari kita ekstrak

05:57.430 --> 05:59.360
ini dan mari kita dapatkan koordinat

05:59.360 --> 06:04.360
kita dengan mengakses respons titik data titik hasil.

06:04.600 --> 06:09.600
Dan kemudian di sana hasil pertama titik geometri titik lokasi titik, jadi benar-benar

06:11.200 --> 06:13.093
mengebor ke dalam ini.

06:15.130 --> 06:16.880
Sekarang apa yang akan Anda perhatikan

06:16.880 --> 06:19.850
tentu saja, adalah bahwa sementara TypeScript tidak mengeluh di sini,

06:19.850 --> 06:23.280
kami juga tidak mendapat dukungan TypeScript yang baik di sini, bukan?

06:23.280 --> 06:25.740
Jika saya mengetikkan titik di sini, itu tidak menunjukkan

06:25.740 --> 06:27.620
bahwa ada properti hasil.

06:27.620 --> 06:30.350
Dan memang, saya bisa mencoba mengakses apa pun

06:30.350 --> 06:33.840
di sini, bahkan sesuatu yang tidak ada pada respons dan itu

06:33.840 --> 06:34.820
masuk akal.

06:34.820 --> 06:38.010
Bagaimana TypeScript mengetahui apa yang akan ada dalam respons

06:38.010 --> 06:40.920
dari URL mana pun yang saya kirimi permintaan?

06:40.920 --> 06:42.810
TypeScript tidak melanjutkan dan

06:42.810 --> 06:44.970
mengirim permintaan selama pengembangan

06:44.970 --> 06:46.510
untuk mencari tahu apa yang

06:46.510 --> 06:49.170
ada di sana, itu juga tidak akan bagus.

06:49.170 --> 06:51.400
Tetapi kita dapat memberitahu TypeScript

06:51.400 --> 06:53.950
apa yang kita harapkan ada di dalam respon karena

06:53.950 --> 06:58.950
metode get ini sebenarnya adalah metode generik dan ada hal apa saja di sini, yang sebenarnya

06:59.040 --> 07:02.830
adalah jenis respon yang kita harapkan untuk didapatkan.

07:02.830 --> 07:06.880
Jadi di sini, saya dapat menambahkan jenis respons saya dan saya dapat

07:06.880 --> 07:11.270
memberi tahu TypeScript bahwa apa yang saya harapkan adalah objek yang

07:11.270 --> 07:15.260
memiliki kunci hasil, yang kemudian pada gilirannya, adalah larik

07:15.260 --> 07:18.330
yang penuh dengan objek, di mana setiap objek memiliki

07:18.330 --> 07:22.170
kunci geometri, yang kemudian pada gilirannya adalah objek,

07:22.170 --> 07:24.330
yang memiliki kunci lokasi, yang kemudian

07:24.330 --> 07:28.160
pada gilirannya adalah objek, yang memiliki garis lintang, yang

07:28.160 --> 07:31.170
merupakan angka, dan garis bujur, yang merupakan

07:31.170 --> 07:33.510
angka.

07:33.510 --> 07:36.030
Jadi, jelas merupakan tipe yang cukup kompleks.

07:36.030 --> 07:39.400
Tetapi dengan itu, jika kita mengetikkan titik di sini, saya mendapatkan pelengkapan

07:39.400 --> 07:42.220
otomatis dan TypeScript memahami apa yang saya akses di sini.

07:42.220 --> 07:44.860
Dan tentu saja, kita juga bisa menarik tipe ini dari sini

07:44.860 --> 07:46.620
dan membuat alias tipe kita sendiri.

07:46.620 --> 07:50.497
Mungkin di sini, respons geocoding Google.

07:53.220 --> 07:55.380
Itu akan menjadi tipe kustom saya di sini,

07:55.380 --> 07:58.420
dan kemudian saya dapat memberi tahu TypeScript bahwa di sini

07:58.420 --> 08:01.540
saya berharap mendapatkan respons geocoding Google.

08:01.540 --> 08:03.900
Sekarang, tentu saja, sebenarnya respons

08:03.900 --> 08:07.020
berisi lebih dari sekadar larik hasil, ia juga memiliki

08:07.020 --> 08:09.460
kode status dan juga memiliki beberapa bidang

08:09.460 --> 08:13.040
lain di setiap item larik hasil, lalu geometri.

08:13.040 --> 08:17.030
Sekarang, tentu saja, Anda dapat dengan mudah menambahkan semua bidang

08:18.210 --> 08:21.330
ini ke tipe kustom Anda di sini, tetapi di sini saya benar-benar

08:21.330 --> 08:25.640
hanya ingin fokus pada nilai yang secara aktif saya minati.

08:25.640 --> 08:27.360
Dan oleh karena itu sebenarnya ada satu

08:27.360 --> 08:30.900
bidang lain yang akan saya tambahkan, dan itu adalah status di samping hasil.

08:30.900 --> 08:34.520
Jadi di sini di tingkat atas, kami mendapat status dan itu akan menjadi

08:34.520 --> 08:35.500
string yang memberi

08:35.500 --> 08:38.390
tahu kami apakah Google berhasil atau tidak.

08:38.390 --> 08:41.810
Dan status sebenarnya akan baik-baik saja atau

08:41.810 --> 08:44.010
beberapa nilai lainnya.

08:44.010 --> 08:46.910
Ini pada dasarnya adalah pesan status yang direspon Google

08:46.910 --> 08:50.020
untuk memberi tahu kami apakah berhasil mengambil koordinat

08:50.020 --> 08:51.890
untuk alamat ini atau tidak.

08:51.890 --> 08:54.000
Dan tentu saja, dalam dokumen resmi, kita bisa mempelajari

08:54.000 --> 08:57.280
jenis tanggapan yang mungkin kita dapatkan kembali di sini.

08:57.280 --> 08:58.900
Jika Anda menggulir ke bawah sedikit

08:58.900 --> 09:01.070
dan mengklik understand the response, Anda mempelajari

09:01.070 --> 09:04.240
apa yang ada di dalam respons yang Anda dapatkan kembali dan oleh karena

09:04.240 --> 09:07.000
itu klik pada respons geocoding.

09:07.000 --> 09:08.580
Dan kemudian pada kode status,

09:08.580 --> 09:11.090
kita belajar tentang kode status yang tersedia.

09:11.090 --> 09:15.090
Misalnya, kita semua mendapat hasil nol jika tidak ada yang ditemukan.

09:15.090 --> 09:16.850
Kami juga punya beberapa kode lain, tetapi di

09:16.850 --> 09:19.223
sini saya benar-benar hanya peduli tentang dua kode ini.

09:20.200 --> 09:23.310
Jadi saya memberi tahu TypeScript bahwa di sini, saya mendapatkan kode status yang

09:23.310 --> 09:24.890
merupakan salah satu dari dua nilai ini.

09:24.890 --> 09:27.480
Sekarang sekali lagi, ini mungkin memiliki nilai angka

09:27.480 --> 09:29.830
juga, tetapi ini bagus untuk saya di sini.

09:29.830 --> 09:31.640
Seperti yang saya katakan, Anda tentu saja bisa

09:31.640 --> 09:33.700
menulis ini dengan cara yang lebih lengkap.

09:33.700 --> 09:36.230
Sekarang dengan itu ditambahkan, di sana di blok then,

09:36.230 --> 09:41.230
kita dapat memeriksa apakah respons dot data dot status tidak oke, yang berarti ada sesuatu yang tidak beres

09:41.580 --> 09:44.120
dan dalam hal ini, kita dapat melempar kesalahan di sini

09:44.120 --> 09:46.710
dan oleh karena itu kita akan berakhir di blok catch di mana

09:46.710 --> 09:48.090
kita dapat mengatur beberapa

09:48.090 --> 09:49.810
penanganan kesalahan.

09:49.810 --> 09:54.280
Jadi di sini kita akan melempar kesalahan tidak bisa mengambil lokasi.

09:54.280 --> 09:57.080
Dan kemudian di sini, di error handler untuk melakukan sesuatu,

09:57.080 --> 09:59.150
kita dapat melempar peringatan di mana kita mengeluarkan

09:59.150 --> 10:01.230
pesan kesalahan setidaknya.

10:01.230 --> 10:04.660
Ini tentu saja, hanya beberapa penanganan kesalahan yang sangat mendasar.

10:04.660 --> 10:06.950
Sebaliknya jika kita memiliki respon sukses, kita mengambil

10:06.950 --> 10:09.910
koordinat kita di sini dan sekarang kita dapat menggunakan koordinat

10:09.910 --> 10:12.113
ini untuk menampilkannya pada peta.
