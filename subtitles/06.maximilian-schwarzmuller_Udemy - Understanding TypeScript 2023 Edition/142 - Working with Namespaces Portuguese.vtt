WEBVTT

00:02.190 --> 00:04.860
-: Quero começar com o espaço de nomes.

00:04.860 --> 00:06.810
Agora, para mostrar-lhes como

00:06.810 --> 00:09.980
funciona, vou pegar estas duas interfaces aqui.

00:09.980 --> 00:11.480
As interfaces de arrastar e soltar,

00:11.480 --> 00:14.140
cortá-las da aplicação. ts e adicionar um novo

00:14.140 --> 00:19.140
arquivo, dragdropinterfaces. ts, por exemplo.

00:21.270 --> 00:25.180
Agora podemos colá-lo ali e agora para usar espaços de nomes, tudo o que

00:25.180 --> 00:29.140
temos que fazer é adicionar o espaço de nomes de palavras-chave e, em seguida,

00:31.645 --> 00:33.620
usar chaves de caracóis.

00:33.620 --> 00:35.880
Agora também temos que dar um nome a este

00:35.880 --> 00:39.590
espaço de nomes e aqui vou nomeá-lo Interfaces DD para um arrastar

00:39.590 --> 00:41.660
e largar, mas o nome é com você.

00:41.660 --> 00:43.640
Agora, este ano é um recurso TypeScript,

00:43.640 --> 00:45.250
não um recurso JavaScript.

00:45.250 --> 00:47.750
Não é compilado para o Vanilla JavaScript porque

00:47.750 --> 00:50.340
não há um equivalente direto para ele.

00:50.340 --> 00:54.860
Em vez disso, o TypeScript irá basicamente compilá-lo para um objeto que você poderia

00:54.860 --> 00:55.693
dizer.

00:55.693 --> 00:57.490
Para um objeto onde as coisas que

00:57.490 --> 01:00.440
você vai colocar no namespace então são armazenadas

01:00.440 --> 01:02.140
em propriedades, mas você não

01:02.140 --> 01:06.960
terá que se preocupar com isso porque toda a resolução de acesso a essas propriedades

01:06.960 --> 01:10.640
e que tudo funciona será resolvido pelo TypeScript.

01:10.640 --> 01:13.940
Assim, agora podemos mover estas interfaces para o namespace

01:13.940 --> 01:16.130
e com isso estamos quase terminando.

01:16.130 --> 01:18.040
Agora temos um problema, porém,

01:18.040 --> 01:22.280
estas interfaces agora só estão disponíveis neste namespace.

01:22.280 --> 01:23.113
A propósito, você

01:23.113 --> 01:25.530
não pode simplesmente colocar interfaces em

01:25.530 --> 01:27.070
um namespace onde você pode colocar

01:27.070 --> 01:28.057
qualquer coisa, classes,

01:28.057 --> 01:30.780
constantes, o que você quiser.

01:30.780 --> 01:33.900
O que você quiser pode ser colocado em um namespace.

01:33.900 --> 01:35.630
Assim, basicamente, você pode envolver um espaço de nomes

01:35.630 --> 01:37.150
em torno de qualquer código que você tenha.

01:37.150 --> 01:39.830
Mas o problema que temos é que estas características,

01:39.830 --> 01:41.140
estas interfaces aqui estão

01:41.140 --> 01:44.800
agora disponíveis apenas dentro desse espaço de nomes.

01:44.800 --> 01:47.280
Agora, como você vê, não temos mais nada lá dentro.

01:47.280 --> 01:49.010
Agora, é claro que poderíamos trazer

01:49.010 --> 01:51.600
o código que depende deles de volta a este espaço de

01:51.600 --> 01:53.370
nomes, mas, mais uma vez, iríamos

01:53.370 --> 01:56.960
explodir com isso porque, afinal, temos uma classe bastante longa que

01:56.960 --> 01:58.940
depende destas interfaces.

01:58.940 --> 02:02.900
Temos a classe da lista de projetos e a classe de itens do projeto.

02:02.900 --> 02:05.260
Elas dependem dessas interfaces, portanto,

02:05.260 --> 02:08.922
haveria muito a acrescentar a esse espaço de nomes.

02:08.922 --> 02:10.205
Portanto, o que você pode

02:10.205 --> 02:14.210
fazer é adicionar a palavra-chave de exportação na frente de uma interface

02:14.210 --> 02:16.850
para exportar um recurso de um namespace.

02:16.850 --> 02:19.680
Agora o que isto significa é que agora estas interfaces

02:19.680 --> 02:22.110
estão disponíveis dentro deste namespace,

02:22.110 --> 02:24.487
mas também fora deste arquivo.

02:24.487 --> 02:26.100
E veremos como isto funciona em

02:26.100 --> 02:28.510
um segundo, mas com isso fazemos esta interface

02:28.510 --> 02:30.710
ou o que quer que estejamos exportando.

02:30.710 --> 02:32.815
Isto não se restringe às interfaces

02:32.815 --> 02:36.610
disponíveis fora deste arquivo também, se então basicamente

02:36.610 --> 02:41.140
importarmos ou usarmos esse espaço de nomes.

02:41.140 --> 02:41.973
E, claro, mais uma vez

02:41.973 --> 02:44.580
não se pode simplesmente exportar interfaces em um namespace,

02:44.580 --> 02:45.636
mas qualquer coisa.

02:45.636 --> 02:48.010
Agora, com isso, a questão é como importar

02:48.010 --> 02:50.310
agora este espaço de nomes de volta para

02:50.310 --> 02:52.410
a aplicação. ts e, para isso, o

02:52.410 --> 02:56.210
TypeScript tem uma sintaxe especial que você pode usar.

02:56.210 --> 02:57.867
Vamos voltar ao topo da aplicação. ts e agora aqui

02:57.867 --> 03:01.440
você adiciona três cortes, três cortes importantes, não apenas

03:01.440 --> 03:03.690
dois, porque este não é realmente um comentário

03:03.690 --> 03:06.150
normal que estamos criando agora, esta será

03:06.150 --> 03:07.330
na verdade uma sintaxe

03:07.330 --> 03:10.280
captada pelo TypeScript um comentário especial, você

03:10.280 --> 03:13.110
poderia dizer que o TypeScript entende se ele começa

03:13.110 --> 03:15.500
com três cortes.

03:15.500 --> 03:19.301
Aí você escreve uma etiqueta XML de auto-fechamento,

03:19.301 --> 03:21.600
de modo que o ângulo de abertura

03:21.600 --> 03:24.530
do suporte, depois o ângulo de fechamento

03:24.530 --> 03:25.790
da barra e em seu caminho

03:25.790 --> 03:29.220
de referência é igual e depois aqui o nome do arquivo

03:29.220 --> 03:32.370
que você quer importar.

03:32.370 --> 03:35.217
No meu caso, aqui a dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Agora, isto é compreendido e captado pelo TypeScript porque, como

03:42.550 --> 03:45.220
mencionei com os três cortes iniciais, é uma sintaxe

03:45.220 --> 03:47.560
especial que o TypeScript entende exatamente

03:47.560 --> 03:50.110
como ele entende esta coisa de referência.

03:50.110 --> 03:51.960
Isto não é Vanilla JavaScript

03:51.960 --> 03:53.970
O Vanilla JavaScript não percebe

03:53.970 --> 03:58.480
e isto não é o que vai parecer uma vez compilado.

03:58.480 --> 04:00.430
Mas, o que se consegue?

04:00.430 --> 04:05.070
Isso faz com que agora este namespace DD Interfaces esteja disponível

04:05.070 --> 04:07.104
em app. ts.

04:07.104 --> 04:08.920
Entretanto, se você rolar para baixo, você

04:08.920 --> 04:11.040
vê que meus editores ainda reclamam e se nós tentamos

04:11.040 --> 04:12.250
salvá-lo, pois todos nós cometemos

04:12.250 --> 04:14.300
bons erros de compilação.

04:14.300 --> 04:16.410
Portanto, parece que não está disponível.

04:16.410 --> 04:19.730
A interface arrastável não parece estar disponível aqui.

04:19.730 --> 04:22.386
Bem, há uma coisa especial sobre os namespaces.

04:22.386 --> 04:25.840
Você pode usá-los para dividir seu código e lembrar quando

04:25.840 --> 04:27.930
eu disse anteriormente que o que você

04:27.930 --> 04:29.610
tem em um namespace pode ser

04:29.610 --> 04:32.557
usado de qualquer lugar nesse namespace.

04:32.557 --> 04:34.157
Bem, acontece que você pode

04:34.157 --> 04:37.580
dividir espaços de nomes em vários arquivos exportando coisas

04:37.580 --> 04:39.110
em um espaço de nomes e depois

04:39.110 --> 04:42.330
usando esta sintaxe especial de importação, mas você

04:42.330 --> 04:45.230
então tem que colocar as coisas que querem usar algo

04:45.230 --> 04:48.250
daquele espaço de nomes de importação ou daquele arquivo

04:48.250 --> 04:51.797
importado no mesmo espaço de nomes.

04:51.797 --> 04:55.050
Por isso, talvez DD Interfaces não seja o melhor nome.

04:55.050 --> 04:58.010
Talvez tenhamos acabado de nomear como App.

04:58.010 --> 04:59.740
Agora, se formos nomeados como app aqui,

04:59.740 --> 05:01.670
podemos ir para app. ts e criar um

05:01.670 --> 05:04.180
namespace com o mesmo nome aqui,

05:04.180 --> 05:05.630
namespace App.

05:05.630 --> 05:06.890
E agora, por enquanto,

05:06.890 --> 05:10.750
vamos colocar tudo aqui nesse espaço de nomes e agora você vê que

05:10.750 --> 05:12.610
o erro desapareceu Não há pontos

05:12.610 --> 05:14.300
vermelhos à direita.

05:14.300 --> 05:15.513
No entanto, se eu salvei

05:15.513 --> 05:17.850
isso, ainda vou receber erros aqui.

05:17.850 --> 05:22.850
Por exemplo, essa lista de projetos acabados não é utilizada.

05:25.010 --> 05:26.300
Bem, isso é correto,

05:26.300 --> 05:28.210
eu não estou usando isso.

05:28.210 --> 05:29.600
Também não estou precisando dele,

05:29.600 --> 05:32.610
portanto, podemos simplesmente remover estes conceitos aqui.

05:32.610 --> 05:35.190
Com isso, se salvamos isto,

05:35.190 --> 05:38.040
agora ele compilou sem erros.

05:38.040 --> 05:39.880
A questão é apenas qual é o resultado

05:39.880 --> 05:41.920
desta compilação?

05:41.920 --> 05:44.260
Temos um ou dois arquivos agora?

05:44.260 --> 05:46.170
Bem, vamos dar uma olhada na pasta

05:46.170 --> 05:49.380
do disco e lá você vê que tem um arquivo JS do aplicativo

05:49.380 --> 05:50.780
e depois algum código aqui

05:50.780 --> 05:53.980
e um arquivo JS de interface de arrastar e soltar.

05:53.980 --> 05:56.690
Temos, portanto, dois arquivos como resultado.

05:56.690 --> 05:59.500
Agora, o arquivo de interface do Dragão drop é realmente bastante

05:59.500 --> 06:00.830
vazio porque você aprendeu

06:00.830 --> 06:04.360
que as interfaces não são basicamente compiladas para nada.

06:04.360 --> 06:07.300
Não há equivalente em JavaScript para uma interface.

06:07.300 --> 06:09.270
É um recurso de TypeScript puro.

06:09.270 --> 06:12.370
Portanto, podemos importá-lo com a sintaxe TypeScript

06:12.370 --> 06:15.509
aqui para usá-lo e obter todas as melhorias de tipo que aprendemos,

06:15.509 --> 06:17.300
mas na produção não importa se está

06:17.300 --> 06:20.060
em um arquivo separado ou não.

06:20.060 --> 06:21.840
Portanto, a questão é: e

06:21.840 --> 06:26.380
se agora colocarmos algo que existe na produção, que existe

06:26.380 --> 06:28.630
também em JavaScript, em um arquivo

06:28.630 --> 06:30.000
separado?

06:30.000 --> 06:33.373
Por exemplo, enumera e a classe de projeto aqui,

06:35.520 --> 06:36.470
eu pego os dois,

06:36.470 --> 06:37.610
crio um novo arquivo,

06:37.610 --> 06:41.410
traço de projeto modelo TS e coloco meu status de

06:41.410 --> 06:46.040
projeto enumera e classe de projeto ali.

06:46.040 --> 06:47.420
Agora, assim como antes

06:47.420 --> 06:49.070
de podermos adicionar um namespace

06:49.070 --> 06:50.590
aqui, o nome tem que ser App,

06:50.590 --> 06:51.790
então tem que ser feito

06:51.790 --> 06:54.020
um namespace onde também queremos usá-lo

06:54.020 --> 06:57.340
e temos que exportar estes recursos para que possamos usá-los

06:57.340 --> 07:00.440
em outros arquivos no mesmo namespace, mas em outros arquivos

07:00.440 --> 07:02.640
também.

07:02.640 --> 07:03.980
Agora de volta ao aplicativo. ts, temos que

07:03.980 --> 07:05.900
importar esse segundo arquivo.

07:05.900 --> 07:07.890
Portanto, vou duplicar esta importação

07:07.890 --> 07:11.515
e todo o modelo de traço do projeto de importação.

07:11.515 --> 07:13.800
se eu salvei isso e agora está compilado e

07:13.800 --> 07:16.610
vemos um arquivo JavaScript modelo de projeto.

07:16.610 --> 07:18.184
E lá dentro, vemos

07:18.184 --> 07:19.490
algum código.

07:19.490 --> 07:22.770
A questão é se nossa aplicação agora funciona?

07:22.770 --> 07:24.620
Para isso, vamos recarregá-lo

07:25.480 --> 07:27.587
e vamos tentar acrescentar um projeto

07:27.587 --> 07:29.070
aqui e você vê, recebemos

07:29.070 --> 07:29.903
um erro.

07:29.903 --> 07:33.183
Não é possível ler propriedade ativa de indefinida.

07:34.120 --> 07:36.090
A razão para isso é simplesmente que nossos

07:36.090 --> 07:38.854
arquivos são compilados de forma autônoma.

07:38.854 --> 07:41.410
Namespaces existem no mundo TypeScript, como

07:41.410 --> 07:44.640
eu disse, não há equivalência JavaScript para ele.

07:44.640 --> 07:47.430
Portanto, o problema que temos aqui é que no mundo do TypeScript,

07:47.430 --> 07:48.263
tudo é ótimo porque

07:48.263 --> 07:51.610
o TypeScript é capaz de encontrar todas as coisas que precisamos.

07:51.610 --> 07:52.800
Por exemplo, quando

07:52.800 --> 07:54.420
eu digo projeto aqui, quando

07:54.420 --> 07:56.310
eu referi o tipo de projeto aqui na

07:56.310 --> 07:58.130
classe de estado do projeto, este

07:58.130 --> 07:59.310
tipo de projeto, esta

07:59.310 --> 08:00.610
classe de projeto é definida

08:00.610 --> 08:02.840
no modelo de projeto.

08:02.840 --> 08:06.020
Agora o TypeScript não reclama de seu incompleto porque

08:06.020 --> 08:07.570
importamos esse modelo, mas

08:07.570 --> 08:10.250
importar aqui realmente significa apenas dizer

08:10.250 --> 08:13.960
ao TypeScript onde encontrar esse tipo uma vez compilado para

08:13.960 --> 08:15.810
o JavaScript, a desconexão é basicamente

08:15.810 --> 08:18.150
destruída.

08:18.150 --> 08:20.840
Assim, no código JavaScript quando é executado

08:20.840 --> 08:23.230
e quando tentamos então criar um novo projeto

08:23.230 --> 08:25.130
instanciando o projeto, o JavaScript

08:25.130 --> 08:27.430
não encontra esta classe de projeto ou função

08:27.430 --> 08:29.610
construtora.

08:29.610 --> 08:32.980
Portanto, temos que nos certificar de que transportamos a desconexão.

08:32.980 --> 08:35.420
E para isso, podemos ir ao TS

08:35.420 --> 08:39.640
(mumbles) e lá definir esta opção de arquivo.

08:39.640 --> 08:40.740
Podemos comentar

08:40.740 --> 08:43.010
isso e a idéia por trás do arquivo externo

08:43.010 --> 08:45.540
é que você diga ao TypeScript que ele deve

08:45.540 --> 08:48.620
concatenar os espaços de nomes.

08:48.620 --> 08:49.670
Portanto, estas referências,

08:49.670 --> 08:51.740
que tem durante a compilação em um único

08:51.740 --> 08:53.950
arquivo JavaScript, em vez de compilar

08:53.950 --> 08:56.970
vários arquivos JavaScript.

08:56.970 --> 08:59.210
Portanto, aqui para o arquivo externo podemos

08:59.210 --> 09:02.350
dizer que queremos ter um arquivo na pasta do disco, que nomeamos

09:02.350 --> 09:04.770
talvez de bundle. js E se fizermos isso

09:05.630 --> 09:07.050
e salvarmos isso, na verdade

09:07.050 --> 09:08.700
teremos aqui um erro.

09:09.650 --> 09:10.710
Receberemos um erro

09:12.300 --> 09:14.410
de que apenas os módulos AMD e do sistema

09:14.410 --> 09:17.250
são suportados ao lado de um arquivo externo.

09:17.250 --> 09:19.540
Agora, não precisamos entender tudo aqui

09:19.540 --> 09:23.160
Existem basicamente diferentes maneiras de carregar ou agrupar

09:23.160 --> 09:26.120
diferentes arquivos JavaScript em um por razões históricas

09:26.120 --> 09:28.770
e como tudo isso é desenvolvido e você pode aprender

09:28.770 --> 09:31.250
mais sobre esses diferentes tipos agrupados

09:31.250 --> 09:33.700
em um recurso anexado se quiser, não precisa

09:33.700 --> 09:35.340
pensar nisso.

09:35.340 --> 09:36.800
Portanto, basicamente o

09:36.800 --> 09:38.120
que precisamos fazer aqui

09:38.120 --> 09:40.470
é definir um módulo que já é destacado como

09:40.470 --> 09:41.598
um erro aqui, não ao

09:41.598 --> 09:43.943
JS comum, mas à AMD, por exemplo.

09:45.400 --> 09:47.700
Se fizermos isso, ele se compila sem problemas

09:47.700 --> 09:50.010
mesmo que ainda esteja reclamando aqui,

09:50.010 --> 09:52.140
mas não pegou que eu o mudei e agora o que

09:52.140 --> 09:53.860
acontece é que na verdade há um novo

09:53.860 --> 09:56.570
pacote de arquivos JS em distancia.

09:56.570 --> 10:00.310
Se eu remover todos os arquivos JavaScript da pasta

10:00.310 --> 10:04.680
do disco e reiniciar meu traço TSC, nós processamos para que

10:04.680 --> 10:05.580
o compilador

10:05.580 --> 10:08.600
veja apenas o arquivo JS do pacote.

10:08.600 --> 10:11.530
Este arquivo conterá todo nosso código na

10:11.530 --> 10:13.250
versão compilada e traduzida

10:13.250 --> 10:15.400
e, portanto, agora em HTML indexado,

10:15.400 --> 10:20.300
só temos que importar aqui o pacote JS em vez do App JS.

10:20.300 --> 10:23.610
E se fizermos isso e recarregarmos aqui, temos novamente

10:23.610 --> 10:25.830
uma aplicação funcional onde podemos

10:25.830 --> 10:28.260
usar o arrastar e soltar tudo porque agora

10:28.260 --> 10:30.410
está tudo em um arquivo, mas somente

10:30.410 --> 10:32.661
no resultado final.

10:32.661 --> 10:34.230
Durante o desenvolvimento,

10:34.230 --> 10:36.260
temos aqui estes namespaces,

10:36.260 --> 10:39.030
o que é um passo na direção certa, pois

10:39.030 --> 10:41.970
já é um pouco mais manejável.

10:41.970 --> 10:44.350
Agora vamos dividir isto em ainda mais arquivos

10:44.350 --> 10:47.250
antes de darmos uma olhada na opção de divisão média dos

10:47.250 --> 10:48.283
módulos TS.
