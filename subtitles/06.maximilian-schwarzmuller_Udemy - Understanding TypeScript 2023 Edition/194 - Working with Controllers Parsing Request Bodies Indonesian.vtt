WEBVTT

00:02.170 --> 00:03.860
Instruktur: Jadi sekarang setelah kita mendaftarkan beberapa

00:03.860 --> 00:05.630
rute, mari kita tambahkan beberapa logika untuk rute-rute ini.

00:05.630 --> 00:07.730
Untuk itu saya akan menambahkan folder pengendali.

00:07.730 --> 00:08.750
Itu bukan suatu keharusan,

00:08.750 --> 00:11.550
tetapi saya ingin membagi logika saya di sini ke dalam pengontrol

00:11.550 --> 00:13.650
dan rute ke dalam folder rute.

00:13.650 --> 00:16.740
Dan dalam pengendali, saya juga akan menambahkan todos. ts, dan itu sekarang akan

00:16.740 --> 00:19.230
menampung fungsi-fungsi pengontrol yang

00:19.230 --> 00:21.990
ingin kita arahkan dari dalam rute kita.

00:21.990 --> 00:25.120
Jadi di sini, saya memerlukan fungsi yang akan saya ekspor,

00:25.120 --> 00:27.220
dan saya akan membuatnya sebagai fungsi

00:27.220 --> 00:29.170
panah, yang tidak harus dilakukan, dan

00:29.170 --> 00:31.290
saya akan menamainya createTodo, dan ini

00:32.420 --> 00:34.510
adalah fungsi yang akan menerima parameter

00:34.510 --> 00:36.720
khas yang Anda dapatkan di setiap fungsi middleware

00:36.720 --> 00:38.830
di express, permintaan, respons, dan fungsi

00:38.830 --> 00:41.297
berikutnya.

00:41.297 --> 00:44.550
Dan kita baru saja melihat dari mana kita bisa mendapatkan jenis-jenisnya.

00:44.550 --> 00:47.190
Kita bisa mengimpor fungsi request,

00:47.190 --> 00:50.460
response, dan next dari express.

00:50.460 --> 00:52.800
Ini mengimpor tipe-tipe tersebut kepada kita.

00:52.800 --> 00:54.910
Kemudian, kita bisa menambahkannya di sini.

00:54.910 --> 00:57.230
Sekarang, selalu menambahkan semua jenis ini di sini seperti

00:57.230 --> 00:59.980
yang kita lakukan di middleware penanganan kesalahan, juga, bisa

00:59.980 --> 01:01.300
jadi tidak praktis.

01:01.300 --> 01:03.750
Ini berhasil, tetapi bisa menjengkelkan.

01:03.750 --> 01:05.190
Jadi ada jalan pintas.

01:05.190 --> 01:08.220
Alih-alih mengatur tipe pada semua parameter

01:08.220 --> 01:11.160
ini, kita juga bisa memberi tahu TypeScript

01:11.160 --> 01:14.610
jenis fungsi apa yang ingin kita simpan dalam konstanta

01:14.610 --> 01:16.260
createTodo ini, dan kita

01:16.260 --> 01:19.530
bisa mengimpor tipe RequestHandler dari express,

01:19.530 --> 01:22.330
lalu kita atur ini di sini, createTodo, ke tipe

01:22.330 --> 01:24.340
RequestHandler.

01:24.340 --> 01:28.780
Dan sekarang Anda melihat TypeScript tahu bahwa di sini kita punya permintaan, di sini

01:28.780 --> 01:30.560
kita punya respons, dan di sini kita

01:30.560 --> 01:32.590
punya fungsi berikutnya, karena RequestHandler

01:32.590 --> 01:35.730
kita didefinisikan agar terlihat seperti ini.

01:35.730 --> 01:38.080
Ini adalah fungsi dengan tiga parameter di mana

01:38.080 --> 01:40.160
parameter pertama adalah permintaan,

01:40.160 --> 01:42.030
parameter kedua adalah respons, dan

01:42.030 --> 01:44.810
parameter ketiga adalah fungsi berikutnya.

01:44.810 --> 01:47.313
Jadi, ini bisa menyederhanakan penyiapan ini di sini.

01:48.195 --> 01:49.380
RequestHandler, tentu saja,

01:49.380 --> 01:51.360
selalu tersedia karena kita memasang tipe-tipe

01:51.360 --> 01:52.570
untuk express dan oleh karena

01:52.570 --> 01:55.270
itu kita dapat menambahkan impor ini di sini.

01:55.270 --> 01:57.940
Ketahuilah bahwa impor ini akan selalu hilang setelah

01:57.940 --> 01:59.960
dikompilasi ke JavaScript karena kita

01:59.960 --> 02:02.300
hanya mengimpor sebuah tipe di sini.

02:02.300 --> 02:05.030
Ini tidak mengimpor kode apa pun yang akan dieksekusi.

02:05.030 --> 02:06.930
Ini hanya mengimpor tipe.

02:06.930 --> 02:08.650
Dan oleh karena itu, selama kompilasi,

02:08.650 --> 02:11.290
itu akan dihapus karena tidak menambahkan apa

02:11.290 --> 02:15.860
pun yang diperlukan saat ini berjalan dalam JavaScript biasa.

02:15.860 --> 02:16.693
Dengan itu, bagaimanapun,

02:16.693 --> 02:18.900
saya mendapatkan fungsi createTodo, dan sekarang

02:18.900 --> 02:22.240
mengapa kita tidak menambahkan array TODOS di sini untuk mengelola

02:22.240 --> 02:25.530
beberapa to dos dalam memori saja, tentu saja.

02:25.530 --> 02:28.310
Ini akan hilang kapan pun server kita restart karena

02:28.310 --> 02:31.460
pada akhirnya hanya sebuah konstanta dalam JavaScript.

02:31.460 --> 02:32.293
Tentu saja Anda bisa

02:32.293 --> 02:34.770
membayangkan berbicara dengan basis data di sini, tetapi

02:34.770 --> 02:36.360
saya ingin membuat ini tetap sederhana

02:36.360 --> 02:38.630
karena ini tentang JavaScript dan TypeScript dan tidak

02:38.630 --> 02:41.323
terlalu banyak tentang koneksi basis data.

02:42.390 --> 02:43.790
Jadi di sini saya harus melakukan,

02:43.790 --> 02:47.600
dan sekarang di sini saya ingin membuat sebuah hal baru yang harus dilakukan di

02:47.600 --> 02:49.320
sini ketika kita mendapat permintaan

02:49.320 --> 02:51.020
masuk, dan itu harus menjadi objek

02:51.020 --> 02:52.980
baru, dan mengapa kita tidak membuat blueprint

02:52.980 --> 02:55.420
untuk objek ini, sebuah model.

02:55.420 --> 02:57.640
Jadi saya akan menambahkan folder

02:57.640 --> 02:59.030
model, dan di folder model

02:59.030 --> 03:04.030
itu, saya akan menambahkan todo. ts dan mengekspor sebuah kelas di sini, yang akan saya beri nama

03:04.760 --> 03:06.250
Todo, di mana saya mendefinisikan bagaimana

03:06.250 --> 03:08.210
melakukan harus terlihat seperti.

03:08.210 --> 03:10.330
Di sana kita dapat menambahkan konstruktor

03:10.330 --> 03:13.129
dan juga menggunakan pintasan TypeScript ini di

03:13.129 --> 03:16.440
mana kita dapat menambahkan pengubah akses seperti publik

03:16.440 --> 03:19.360
dan kemudian nama properti seperti ID, yang bertipe

03:19.360 --> 03:21.250
string, katakanlah, dan teks, yang

03:21.250 --> 03:24.050
juga bertipe string, dan kemudian TypeScript akan

03:24.050 --> 03:27.470
secara otomatis menambahkan bidang, properti dengan nama

03:27.470 --> 03:30.130
yang sama, dan nilai yang diberikan yang kita berikan

03:30.130 --> 03:32.750
ke konstruktor ke bidang-bidang tersebut setiap

03:32.750 --> 03:37.230
kali kita menginstansiasi kelas tersebut.

03:37.230 --> 03:38.670
Jadi, saya akan menggunakan sintaksis ini

03:38.670 --> 03:40.060
di sini, dan Anda sudah belajar tentang

03:40.060 --> 03:41.810
sintaksis ini sebelumnya dalam kursus ini.

03:41.810 --> 03:44.660
Dan sekarang di todo. ts di sini di controller,

03:44.660 --> 03:47.893
kita tentu saja dapat mengimpor Todo dari,

03:49.020 --> 03:53.403
naik satu tingkat, models/todo, dan menggunakan tipe dan

03:54.530 --> 03:58.800
kelas ini sekarang di sini dalam file kita.

03:58.800 --> 04:01.320
Dan itu adalah tipe dan kelas karena, yah, jelas,

04:01.320 --> 04:02.800
itu adalah kelas, dan setiap

04:02.800 --> 04:05.750
kelas secara otomatis juga bertindak sebagai tipe.

04:05.750 --> 04:08.550
Itu juga yang Anda lihat di sepanjang kursus ini.

04:08.550 --> 04:09.750
Jadi sekarang di sini, pertama-tama

04:09.750 --> 04:11.910
kita bisa mengatakan bahwa TODOS di sini akan

04:11.910 --> 04:13.550
menjadi array to dos.

04:13.550 --> 04:15.480
Anotasi ekstra ini tidak ada salahnya agar

04:15.480 --> 04:18.590
kita mendapatkan dukungan yang tepat begitu kita mulai menambahkan

04:18.590 --> 04:21.410
to dos atau mulai bekerja dengan to dos dalam array ini.

04:21.410 --> 04:23.610
Dan di sini ketika saya membuat to do baru,

04:23.610 --> 04:26.220
saya sekarang membuatnya dengan menginstansiasi

04:26.220 --> 04:28.370
kelas ini, dan kita harus memasukkan

04:28.370 --> 04:32.030
ID, dan di sini saya akan membuat ID unik semu acak dengan Math

04:32.030 --> 04:34.230
random toString.

04:34.230 --> 04:35.270
Ini tidak terlalu unik,

04:35.270 --> 04:36.660
tetapi cukup bagus di sini.

04:36.660 --> 04:39.170
Dan sekarang untuk nilai di sini, di sana saya tentu

04:39.170 --> 04:41.670
saja ingin mengatur beberapa teks, yang saya harapkan

04:41.670 --> 04:45.530
untuk mendapatkannya di badan permintaan masuk saya.

04:45.530 --> 04:48.823
Jadi, saya berharap mendapatkan teks saya di sini, pada dasarnya

04:49.750 --> 04:53.270
pada badan permintaan. teks, sehingga saya bisa

04:53.270 --> 04:56.280
menetapkan teks sebagai nilai di sini.

04:56.280 --> 04:57.113
Sekarang, ini berfungsi,

04:57.113 --> 04:59.640
tetapi harap dilihat bahwa ini hanya berfungsi karena

04:59.640 --> 05:02.320
TypeScript melihat bahwa ini bertipe any.

05:02.320 --> 05:04.420
Ia tidak tahu bahwa ini adalah string.

05:04.420 --> 05:05.510
Dan itu tidak bisa tahu,

05:05.510 --> 05:08.390
karena bagaimana TypeScript tahu data mana yang akan

05:08.390 --> 05:11.140
menjadi bagian dari permintaan masuk kita?

05:11.140 --> 05:12.430
Tidak jelas untuk itu.

05:12.430 --> 05:14.260
Kami tidak pernah menyatakan di mana

05:14.260 --> 05:17.620
pun apa yang akan ada di dalam permintaan yang kami terima.

05:17.620 --> 05:19.270
Sekarang, bagaimana kita bisa memperbaiki hal ini?

05:19.270 --> 05:21.780
Nah, kita bisa menggunakan typecasting, misalnya.

05:21.780 --> 05:23.660
Typecasting selalu merupakan solusi yang

05:23.660 --> 05:26.090
bagus jika Anda tahu tentang tipe tertentu, tetapi

05:26.090 --> 05:27.360
TypeScript tidak.

05:27.360 --> 05:30.440
Jadi di sini, pada request body, sebelum kita mengakses teks, kita dapat melakukan

05:30.440 --> 05:32.650
typecast ini menjadi sebuah objek di mana kita memiliki

05:32.650 --> 05:34.900
properti teks, yang merupakan sebuah string.

05:34.900 --> 05:36.920
Karena kami membangun aplikasi ini, kami

05:36.920 --> 05:40.320
tahu apa yang kami harapkan ada pada permintaan yang masuk.

05:40.320 --> 05:42.750
Jadi, karena kita tahu bahwa akan ada properti teks pada

05:42.750 --> 05:44.166
badan permintaan yang masuk, kita

05:44.166 --> 05:46.630
bisa meng-cast-nya menjadi objek seperti itu.

05:46.630 --> 05:51.480
Dan sekarang di sini kita mendapatkan TypeScript yang tepat dan juga dukungan IDE.

05:51.480 --> 05:53.560
Jadi dengan itu, kita menambahkan hal baru yang harus dilakukan.

05:53.560 --> 05:55.470
Sekarang kita bisa menjangkau TODOS

05:55.470 --> 05:58.280
dan mendorong yang baru untuk dilakukan ke array ini.

05:58.280 --> 05:59.330
Dan sekali lagi, ini

05:59.330 --> 06:01.060
tentu saja hanya akan menyimpannya

06:01.060 --> 06:02.750
di sini sebagai konstanta dan oleh

06:02.750 --> 06:05.650
karena itu hanya di memori, karena bekerja dengan database

06:05.650 --> 06:08.880
tidak benar-benar terkait langsung dengan node atau TypeScript,

06:08.880 --> 06:11.170
tetapi, yah, ke database.

06:11.170 --> 06:14.140
Jadi dengan itu, kita mendapatkan fungsi create Todo di sini.

06:14.140 --> 06:16.400
Sekarang mari kita pergi ke rute yang harus

06:16.400 --> 06:19.070
dilakukan dan mengimpor fungsi pengontrol ini.

06:19.070 --> 06:22.030
Jadi impor dari folder controllers dari

06:22.030 --> 06:24.000
file todos di sana, dan impor

06:24.000 --> 06:26.660
fungsi create Todo dan arahkan ke fungsi

06:26.660 --> 06:30.100
ini di sini pada rute posting sehingga setiap

06:30.100 --> 06:38.390
permintaan yang menargetkan slash todos slash tidak ada yang mencapai fungsi createTodo.

06:38.390 --> 06:39.580
Jangan mengeksekusinya di sini.

06:39.580 --> 06:40.650
Tunjuk saja.

06:40.650 --> 06:43.890
Ini akan dieksekusi untuk Anda oleh node dan diekspresikan di server

06:43.890 --> 06:45.883
web yang sedang berjalan nanti.

06:46.880 --> 06:49.630
Jadi sekarang kita punya fungsi ini di sini.

06:49.630 --> 06:50.900
Namun, kami belum selesai.

06:50.900 --> 06:52.290
Di controller, kita semua

06:52.290 --> 06:54.360
hanya harus mengembalikan respons.

06:54.360 --> 06:56.720
jadi di sini kita bisa mengirim respon,

06:56.720 --> 06:59.420
misalnya, dalam format JSON dengan metode JSON

06:59.420 --> 07:02.300
di mana kita mengatakan pesan membuat todo atau

07:02.300 --> 07:04.040
apa pun yang Anda inginkan, dan

07:04.040 --> 07:07.770
kami memiliki kunci createdTodo, mungkin, di mana kami meneruskan

07:07.770 --> 07:10.520
to do baru yang ditambahkan di sisi server sehingga

07:10.520 --> 07:14.490
pada klien, kami juga dapat menggunakannya.

07:14.490 --> 07:17.750
Dan mungkin juga menetapkan kode status 201 di sini untuk

07:17.750 --> 07:19.700
menunjukkan bahwa kita berhasil

07:19.700 --> 07:21.793
dan sumber daya telah dibuat.

07:22.680 --> 07:24.640
Sekarang kita hanya perlu memastikan

07:24.640 --> 07:28.500
bahwa tubuh yang kita coba ekstrak di sini benar-benar ada.

07:28.500 --> 07:29.770
Dan untuk data dan aplikasi. ts, kita perlu

07:29.770 --> 07:33.130
mengurai badan permintaan yang masuk.

07:33.130 --> 07:37.620
Untuk itu, kita bisa mengimpor dari paket body-parser

07:37.620 --> 07:39.220
yang juga kita instal,

07:39.220 --> 07:41.380
dan dari paket tersebut,

07:41.380 --> 07:46.380
kita bisa mengimpor method JSON seperti ini.

07:46.410 --> 07:49.170
Dan kemudian di sini Anda dapat mendaftarkan

07:49.170 --> 07:51.310
eksekusi ini sebagai middleware.

07:51.310 --> 07:54.480
Jadi ini adalah middleware yang disediakan oleh paket

07:54.480 --> 07:58.130
pihak ketiga yang akan mengurai badan semua permintaan yang

07:58.130 --> 08:01.570
masuk dan mengekstrak data JSON apa pun yang ditemukannya

08:01.570 --> 08:05.990
di sana untuk kemudian mengisi kunci tubuh pada objek permintaan ini dengan

08:05.990 --> 08:07.970
data JSON yang diurai.

08:07.970 --> 08:10.290
Itulah yang dilakukan oleh middleware

08:10.290 --> 08:12.503
JSON ini dari paket body-parser.

08:13.890 --> 08:16.520
Dan dengan itu, kita harus memiliki server yang

08:16.520 --> 08:18.230
mampu menciptakan to dos baru.

08:18.230 --> 08:22.210
Simpan semua file dan pastikan file tersebut dikompilasi ulang tanpa kesalahan.

08:22.210 --> 08:26.150
Pastikan nodemon masih melayani aplikasi. file js.

08:26.150 --> 08:28.560
Dan sekarang kita perlu mengirim permintaan posting.

08:28.560 --> 08:31.150
Dan dengan browser, kita tidak bisa melakukan itu,

08:31.150 --> 08:34.260
tetapi kita bisa menggunakan alat untuk itu, Postman.

08:34.260 --> 08:35.600
Anda cukup mencarinya dan kemudian

08:35.600 --> 08:38.160
menginstal aplikasi Postman pada sistem Anda.

08:38.160 --> 08:39.283
Ini gratis untuk digunakan.

08:40.440 --> 08:41.570
Setelah Anda menginstalnya, Anda

08:41.570 --> 08:43.390
dapat memulainya dan Anda akan melihat layar yang

08:43.390 --> 08:44.440
terlihat seperti ini.

08:44.440 --> 08:46.460
Jika Anda melihat modal overlay,

08:46.460 --> 08:48.010
Anda bisa menutupnya.

08:48.010 --> 08:50.240
Dan di sini Anda sekarang dapat membuat permintaan

08:50.240 --> 08:51.740
baru dengan mengklik plus itu,

08:51.740 --> 08:53.040
memilih jenis permintaan,

08:53.040 --> 08:55.100
dalam hal ini, permintaan posting, memasukkan

08:55.100 --> 08:56.450
URL.

08:56.450 --> 08:58.820
Di sini localhost 3000, 3000 karena

08:58.820 --> 09:01.660
port yang saya pilih di sini.

09:01.660 --> 09:03.100
Dan kemudian kita perlu

09:03.100 --> 09:06.320
mengirim permintaan ke slash todos slash nothing.

09:06.320 --> 09:10.000
Jadi di sini untuk memangkas todos memangkas apa-apa.

09:10.000 --> 09:12.120
Kami ingin melampirkan badan ke permintaan,

09:12.120 --> 09:15.440
dan itu harus menjadi JSON tubuh mentah di sini untuk mengirim

09:15.440 --> 09:17.010
beberapa data JSON.

09:17.010 --> 09:19.480
Dan sekarang apa yang perlu kita kirimkan ke sini?

09:19.480 --> 09:21.840
Nah, apa yang kita ekstrak dalam fungsi middleware,

09:21.840 --> 09:22.880
jadi dalam hal ini, kita

09:22.880 --> 09:24.570
harus memiliki properti teks sebagai

09:24.570 --> 09:27.410
bagian dari data JSON yang kita kirimkan.

09:27.410 --> 09:29.610
Jadi di sini, mari tambahkan teks sebagai nama

09:29.610 --> 09:31.070
dan kemudian teks apa pun pilihan

09:31.070 --> 09:33.230
Anda, seperti selesaikan kursus.

09:33.230 --> 09:36.960
Dan jika Anda sekarang mengklik send, ia mengirimkan permintaan, dan inilah

09:36.960 --> 09:38.990
responsnya, dan ini terlihat bagus.

09:38.990 --> 09:40.670
Kita harus membuat kembali.

09:40.670 --> 09:43.600
Kita melihat ID yang dihasilkan dan teksnya.

09:43.600 --> 09:45.870
Jadi backend kita jelas berfungsi di sini.

09:45.870 --> 09:47.690
Dan kami menulis semuanya dengan TypeScript,

09:47.690 --> 09:49.880
tetapi kami menyajikannya sebagai JavaScript biasa.

09:49.880 --> 09:51.183
Itulah seluruh triknya.
