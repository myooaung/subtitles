WEBVTT

00:02.210 --> 00:04.920
Người kể chuyện: Bây giờ, bạn có thể nói, một loại

00:04.920 --> 00:05.753
bảo vệ loại đặc

00:05.753 --> 00:07.940
biệt, hoặc thứ gì đó giúp bạn với loại bảo

00:07.940 --> 00:10.000
vệ, là liên minh phân biệt đối xử.

00:10.000 --> 00:11.300
Bây giờ là gì vậy.

00:11.300 --> 00:13.310
Đó là một mẫu mà bạn có thể sử dụng

00:13.310 --> 00:15.030
khi làm việc với các kiểu kết

00:15.030 --> 00:18.900
hợp, giúp triển khai các bộ bảo vệ kiểu dễ dàng hơn.

00:18.900 --> 00:22.000
Nó có sẵn khi bạn làm việc với các loại đối tượng.

00:22.000 --> 00:24.580
Hãy để tôi chỉ cho bạn cách nó hoạt động.

00:24.580 --> 00:26.850
Giả sử chúng ta có một vài giao diện và đây cũng có

00:26.850 --> 00:28.450
thể là các lớp, nhưng ở đây tôi sẽ tìm

00:28.450 --> 00:29.950
các giao diện để chứng minh rằng

00:29.950 --> 00:32.193
nó cũng hoạt động với các giao diện đó.

00:33.170 --> 00:34.803
Và ở đó tôi có con chim

00:36.480 --> 00:38.830
của mình, nó có tốc độ bay, giả

00:38.830 --> 00:40.973
sử nó thuộc loại số.

00:42.660 --> 00:45.890
Và tôi cũng có con ngựa của mình,

00:45.890 --> 00:50.310
có tốc độ mặt đất hoặc tốc độ chạy, phải thuộc

00:50.310 --> 00:51.913
loại số.

00:53.130 --> 00:55.430
Vì vậy, chúng tôi có hai giao diện ở đây.

00:55.430 --> 00:58.800
Bây giờ, chúng tôi tạo loại liên minh, động vật của

00:58.800 --> 00:59.633
riêng mình,

01:00.750 --> 01:03.370
Đó là một con chim hoặc một con ngựa.

01:03.370 --> 01:05.743
Và cũng giống như trước đây, chúng ta có thể có

01:06.740 --> 01:08.480
một chức năng, di chuyển con vật

01:09.800 --> 01:13.040
lấy một con vật làm đầu vào, thuộc loại động vật, Vì vậy, sử dụng

01:13.040 --> 01:14.800
loại kết hợp của chúng ta.

01:14.800 --> 01:19.800
Và bây giờ ở đó, tôi muốn nói di chuyển với tốc độ, và tất nhiên,

01:19.990 --> 01:21.050
bây giờ, tôi

01:21.050 --> 01:25.180
cần truy cập tốc độ bay hoặc tốc độ chạy.

01:25.180 --> 01:27.730
Bây giờ, tất nhiên, chúng ta có thể đặt tên cho nó là tốc độ.

01:27.730 --> 01:30.840
Nhưng đây chỉ là một ví dụ đơn giản về trường hợp sử dụng

01:30.840 --> 01:33.900
thực tế mà bạn có thể gặp phải, trong đó bạn có một số giao

01:33.900 --> 01:37.390
diện hoặc đối tượng nói chung, thuộc loại liên quan nhưng có

01:37.390 --> 01:40.500
các thuộc tính hoặc phương thức khác nhau.

01:40.500 --> 01:42.050
Vì vậy, ở đây, thuộc tính

01:42.050 --> 01:43.900
tốc độ, thực ra là khác.

01:43.900 --> 01:46.780
Vì vậy, nó không thể truy cập tốc độ bay ở đây vì tất nhiên, không

01:46.780 --> 01:49.240
phải tất cả các loài động vật đều có tốc độ bay.

01:49.240 --> 01:51.210
Bây giờ chúng ta có thể làm những gì chúng ta đã học trước đây.

01:51.210 --> 01:56.063
Chúng ta có thể kiểm tra xem tốc độ bay của động vật ở đây.

01:58.240 --> 02:01.063
Và nếu đúng như vậy, chúng ta có thể thực thi mã này.

02:01.960 --> 02:04.470
Bây giờ đây là một cách tiếp cận chúng ta có thể thực hiện,

02:04.470 --> 02:07.430
nhưng chúng ta càng có nhiều động vật tiềm năng ở đó, chúng ta càng

02:07.430 --> 02:09.233
phải kiểm tra nhiều thứ hơn.

02:10.880 --> 02:14.100
Chúng ta cũng có thể gõ nhầm ở đây trong chuỗi này.

02:14.100 --> 02:15.810
Ví dụ, chúng ta có thể quên chữ

02:15.810 --> 02:18.460
E và tự hỏi tại sao điều này không hiệu quả.

02:18.460 --> 02:20.410
Bây giờ, chúng tôi không thể sử dụng phiên

02:20.410 --> 02:22.570
bản ở đây vì tôi đang phá vỡ các giao diện.

02:22.570 --> 02:27.490
Như tôi đã giải thích, phiên bản động vật của chim sẽ không hoạt động vì dữ

02:27.490 --> 02:29.680
liệu là một giao diện không được

02:29.680 --> 02:31.840
biên dịch thành JavaScript.

02:31.840 --> 02:33.970
Vì vậy, trong thời gian chạy, hàm này

02:33.970 --> 02:36.210
sẽ không khả dụng dưới dạng hàm tạo.

02:36.210 --> 02:37.690
Vì vậy, điều này không hoạt động.

02:37.690 --> 02:40.380
Bây giờ chúng ta có thể xây dựng một liên minh phân biệt

02:40.380 --> 02:42.460
đối xử ở đây bằng cách đưa ra mọi giao diện.

02:42.460 --> 02:45.380
Vì vậy, mọi đối tượng phải là một phần của Liên

02:45.380 --> 02:47.130
minh và tài sản bổ sung.

02:47.130 --> 02:48.640
Bạn có thể sử dụng bất kỳ tên nào bạn muốn.

02:48.640 --> 02:51.490
Thường thì bạn sử dụng loại hoặc loại ở đây.

02:51.490 --> 02:55.090
Tôi sẽ gõ và đặt tên cho loài chim này.

02:55.090 --> 02:57.480
Bây giờ quan trọng, chúng tôi đang kinh doanh một giao diện ở đây.

02:57.480 --> 03:02.480
Vì vậy, đây thực sự không phải là một giá trị cho thuộc tính loại.

03:02.650 --> 03:05.410
Thay vào đó, đây là một loại chữ như bạn đã học,

03:05.410 --> 03:09.110
trong đó loại phải chứa một chuỗi, phải là con chim.

03:09.110 --> 03:10.880
Vì vậy, đây là phép gán kiểu,

03:10.880 --> 03:15.000
trong đó chúng tôi thu hẹp giá trị có thể được lưu trữ trong kiểu

03:15.000 --> 03:17.590
thành chính xác giá trị chuỗi này.

03:17.590 --> 03:19.810
Và sau đó làm tương tự với ngựa,

03:19.810 --> 03:22.283
chỉ với ngựa là một loại chữ.

03:23.400 --> 03:25.060
Bây giờ ở đây, trong chức

03:25.060 --> 03:27.550
năng của chúng ta, chúng ta có thể

03:27.550 --> 03:29.840
sử dụng câu lệnh switch và bật

03:29.840 --> 03:32.280
loại dấu chấm động vật.

03:32.280 --> 03:34.080
Mỗi con vật có một thuộc tính loại

03:34.080 --> 03:36.330
bởi vì chúng tôi đã thêm nó vào tất cả các giao

03:36.330 --> 03:38.350
diện tạo nên con vật của chúng tôi.

03:38.350 --> 03:40.730
Và sau đó, ở đây chúng ta có thể có một vài

03:40.730 --> 03:42.330
trường hợp thậm chí chúng

03:42.330 --> 03:44.990
ta có thể hoàn thành tự động vì TypeScript và

03:44.990 --> 03:49.040
IDE của chúng ta hiểu rằng loại đó chỉ có thể là chim hoặc ngựa.

03:49.040 --> 03:51.050
Và nếu đó là chim, thì chúng

03:51.050 --> 03:55.003
ta có thể thiết lập một số tốc độ biến bên trong

03:55.900 --> 03:58.860
để giả sử, động vật chấm tốc độ bay và

03:59.880 --> 04:02.250
sau đó phá vỡ sau đó.

04:02.250 --> 04:05.183
Ngược lại, nếu trường hợp là ngựa,

04:06.830 --> 04:11.753
ta đặt tốc độ bằng với tốc độ chạy chấm của con vật.

04:14.150 --> 04:17.490
Và ở đó sau khi chúng ta có thể điều khiển nhật

04:17.490 --> 04:20.843
ký, di chuyển với tốc độ cộng với tốc độ.

04:22.490 --> 04:26.540
Nếu bây giờ tôi gọi, di chuyển động vật bằng một con vật tôi tạo

04:26.540 --> 04:30.300
khi đang bay ở đây, nơi tôi đặt loại là chim và tôi chỉ cho

04:30.300 --> 04:32.810
phép sử dụng chim hoặc ngựa, thì tôi phải

04:32.810 --> 04:34.930
đặt tốc độ bay của mình và nhân tiện,

04:36.140 --> 04:39.210
TypeScript thậm chí còn nhận ra rằng một khái

04:39.210 --> 04:42.050
niệm đang chạy tốc độ ở đây để thử làm điều đó

04:42.050 --> 04:44.220
và đặt giá trị này thành 10, nó phàn

04:44.220 --> 04:48.980
nàn rằng điều này không khả dụng cho loại chim.

04:48.980 --> 04:51.360
Tuy nhiên, nếu tôi đặt nó ở tốc độ bay, thì nó

04:51.360 --> 04:55.120
vẫn hoạt động, nếu chúng tôi lưu nó, nó sẽ xuất ra kết quả này một cách

04:55.120 --> 04:57.700
chính xác và cũng biên dịch mà không có lỗi.

04:57.700 --> 04:59.530
Bây giờ, đây là một liên kết

04:59.530 --> 05:04.060
phân biệt bởi vì chúng tôi có một thuộc tính chung trong mọi đối

05:04.060 --> 05:08.040
tượng tạo nên liên kết của chúng tôi, mô tả đối tượng đó,

05:08.040 --> 05:11.490
vì vậy chúng tôi có thể sử dụng thuộc tính mô tả đối

05:11.490 --> 05:16.490
tượng này trong kiểm tra của mình để có loại an toàn 100% và hiểu thuộc

05:16.770 --> 05:19.870
tính nào có sẵn cho một đối tượng như vậy và thuộc

05:19.870 --> 05:21.930
tính nào không.

05:21.930 --> 05:24.500
Vì vậy, đây là một mẫu hữu ích mới mà bạn có thể

05:24.500 --> 05:28.060
sử dụng khi làm việc với các đối tượng và với các kiểu kết hợp.

05:28.060 --> 05:30.340
Và nó thậm chí còn hoạt động với các

05:30.340 --> 05:33.630
giao diện vì giao diện này buộc mọi đối tượng bạn

05:33.630 --> 05:37.050
xây dựng dựa trên giao diện này phải có loại này.

05:37.050 --> 05:39.400
Vì vậy, thay vì kiểm tra sự tồn tại của một thuộc

05:39.400 --> 05:41.200
tính nhất định hoặc thay vì sử dụng

05:41.200 --> 05:43.660
phiên bản của thuộc tính đó, chúng tôi sử dụng

05:43.660 --> 05:46.310
một thuộc tính mà chúng tôi biết là tồn tại để kiểm

05:46.310 --> 05:49.020
tra loại đối tượng mà chúng tôi đang làm việc.

05:49.020 --> 05:51.930
Chúng tôi cũng loại bỏ nguy cơ nhập sai vì TypeScript

05:51.930 --> 05:54.730
hiểu rằng các trường hợp duy nhất chúng tôi có thể

05:54.730 --> 05:58.480
có ở đây, đối với loại động vật, là chim và ngựa và do đó, nó cung cấp cho

05:58.480 --> 06:00.810
chúng tôi nghệ thuật hoàn thành này và nếu

06:00.810 --> 06:02.770
bạn đưa ra một lỗi đánh máy, chúng tôi

06:02.770 --> 06:04.690
sẽ gặp lỗi ngay lập tức .

06:04.690 --> 06:06.780
Vì vậy, đây là một mẫu rất hữu ích khi

06:06.780 --> 06:09.333
làm việc với các đối tượng và kiểu kết hợp.
