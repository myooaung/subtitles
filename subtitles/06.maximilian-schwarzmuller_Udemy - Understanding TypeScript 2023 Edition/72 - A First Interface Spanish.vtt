WEBVTT

00:02.802 --> 00:04.030
Instructor: Ahora que hemos cubierto

00:04.030 --> 00:05.910
las clases, vamos a echar un vistazo a las interfaces.

00:05.910 --> 00:09.510
Vamos a cambiar el nombre del archivo app ts a clases y añadir un nuevo

00:09.510 --> 00:11.230
archivo app ts, mientras que a

00:11.230 --> 00:13.730
partir de ahora se compilará a app js.

00:13.730 --> 00:15.130
Y en este archivo ts de la aplicación,

00:15.130 --> 00:17.026
ahora nos sumergiremos en las interfaces.

00:17.026 --> 00:19.850
¿Qué es una interfaz?

00:19.850 --> 00:21.640
Pues bien, en su versión más sencilla,

00:21.640 --> 00:25.470
una interfaz describe la estructura de un objeto.

00:25.470 --> 00:28.502
Podemos utilizarlo para describir el aspecto de un objeto.

00:28.502 --> 00:29.856
Déjeme mostrarle un ejemplo.

00:29.856 --> 00:32.990
Creamos una interfaz con la palabra clave "interface",

00:32.990 --> 00:37.510
que sólo existe en typescript, no en vanilla JavaScript.

00:37.510 --> 00:39.600
Ahora vamos a nombrar a la persona.

00:39.600 --> 00:41.140
Una vez más, al igual que en una

00:41.140 --> 00:43.150
clase, empiezo con un carácter mayúsculo,

00:43.150 --> 00:46.820
no es una obligación sino una recomendación y una convención.

00:46.820 --> 00:47.910
Ahí podemos definir

00:47.910 --> 00:51.160
el aspecto de un objeto persona.

00:51.160 --> 00:52.480
Sin embargo, a diferencia

00:52.480 --> 00:54.930
de una clase, no usaremos esto como un plano.

00:54.930 --> 00:57.543
Como tipo de costumbre, podríamos decir.

00:58.490 --> 01:00.690
Aquí, se podría decir que una persona podría

01:00.690 --> 01:01.860
tener un nombre, que es de

01:01.860 --> 01:04.300
tipo cadena, y una edad que es de tipo número.

01:04.300 --> 01:05.140
Como puedes ver

01:05.140 --> 01:08.020
aquí, añado propiedades o definiciones de campo,

01:08.020 --> 01:09.970
donde tengo los nombres de las propiedades

01:09.970 --> 01:13.440
y los tipos de los valores que se almacenarán allí.

01:13.440 --> 01:16.560
Lo que no tenemos aquí son los valores concretos.

01:16.560 --> 01:17.730
Así que no tenemos esto.

01:17.730 --> 01:20.510
Y si intentáramos asignar un valor por defecto aquí,

01:20.510 --> 01:21.810
obtendríamos un error

01:21.810 --> 01:25.290
de que una interfaz no puede tener un inicializador.

01:25.290 --> 01:27.540
Así que sólo podemos definir la estructura,

01:27.540 --> 01:29.610
no los valores concretos.

01:29.610 --> 01:32.930
También podemos añadir un método aquí, saludar por ejemplo.

01:32.930 --> 01:34.470
Ahora, al igual que con las

01:34.470 --> 01:37.440
propiedades, no añadimos el método real aquí, pero

01:37.440 --> 01:39.610
sólo la estructura, la descripción

01:39.610 --> 01:41.020
por así decirlo.

01:41.020 --> 01:42.670
Cómo debería ser.

01:42.670 --> 01:46.600
Y para definir un método que debe tener un objeto persona, añadimos

01:46.600 --> 01:49.470
el nombre del método, luego los paréntesis y luego

01:49.470 --> 01:50.920
el tipo de retorno.

01:50.920 --> 01:52.210
Por ejemplo, blanco, y entre

01:52.210 --> 01:53.260
paréntesis puedes tener

01:53.260 --> 01:55.310
los argumentos que quieras.

01:55.310 --> 01:57.740
Como una frase que debería ser un tipo.

01:57.740 --> 02:01.920
De nuevo, sólo el nombre del argumento y luego el tipo.

02:01.920 --> 02:03.610
A continuación, el tipo de retorno del método.

02:03.610 --> 02:06.450
Por supuesto, no es necesario añadir parámetros.

02:06.450 --> 02:09.080
¿Qué podemos hacer ahora con esta interfaz de personas?

02:09.080 --> 02:11.360
¿Cuál es la idea que hay detrás?

02:11.360 --> 02:12.610
Bien, ahora podemos usar esto

02:12.610 --> 02:14.810
para comprobar el tipo de un objeto, por ejemplo.

02:14.810 --> 02:18.020
Podríamos tener una variable, el usuario uno,

02:18.020 --> 02:19.130
y digamos que por

02:19.130 --> 02:22.620
alguna razón no inicializamos inmediatamente.

02:22.620 --> 02:25.660
Sólo queremos almacenar eventualmente un objeto

02:25.660 --> 02:28.490
allí, que tiene esta estructura.

02:28.490 --> 02:30.710
Entonces podemos asignar un tipo al usuario uno,

02:30.710 --> 02:31.830
que podría ser persona.

02:31.830 --> 02:34.604
Podemos utilizar nuestra interfaz como un tipo.

02:34.604 --> 02:38.410
Y ahora cuando asigno un valor al usuario uno, tiene que ser

02:38.410 --> 02:39.730
un objeto porque las

02:39.730 --> 02:42.780
interfaces se usan para definir objetos.

02:42.780 --> 02:45.560
Y tiene que ser un objeto con una propiedad

02:45.560 --> 02:47.190
name, que debe contener

02:47.190 --> 02:49.850
una cadena, una propiedad age, que debe

02:49.850 --> 02:53.102
contener un número, y un método greet que debe tomar

02:53.102 --> 02:56.920
un argumento de frase y además no devolver nada.

02:56.920 --> 02:57.830
Aquí, en este objeto,

02:57.830 --> 02:59.360
podemos añadir un nombre.

02:59.360 --> 03:00.730
Max, por ejemplo.

03:00.730 --> 03:03.010
Ahora aquí añadimos el valor concreto

03:03.010 --> 03:06.310
y tiene que ser de ese tipo definido ahí arriba.

03:06.310 --> 03:08.160
Ahora separado con una coma, y eso es

03:08.160 --> 03:11.110
una diferencia de nuestra definición de interfaz.

03:11.110 --> 03:16.110
Allí separamos nuestras claves y propiedades con puntos y comas.

03:16.470 --> 03:18.430
Pero ahí abajo, cuando creamos nuestro objeto,

03:18.430 --> 03:21.390
al igual que en el JavaScript de vainilla usamos una coma.

03:21.390 --> 03:25.570
Luego una edad, y por supuesto, también el método de saludo.

03:25.570 --> 03:27.550
Ahora el método greet, como aprendiste,

03:27.550 --> 03:32.020
tiene que ser un método que toma un parámetro, frase, que tiene que ser una

03:32.020 --> 03:33.790
cadena, y donde luego quiero

03:33.790 --> 03:36.134
registrar por consola la frase más algún

03:36.134 --> 03:41.134
espacio en blanco más esto. nombre.

03:41.210 --> 03:43.930
Esto podría ser una implementación del método de saludo.

03:43.930 --> 03:45.670
Ahora lo que hay ahí no importa.

03:45.670 --> 03:48.210
Sólo es importante que tengamos este único parámetro,

03:48.210 --> 03:49.270
que es una cadena, y

03:49.270 --> 03:51.290
que no devolvamos nada.

03:51.290 --> 03:54.090
Ahora bien, esto sería un objeto de usuario uno

03:54.090 --> 03:58.150
válido porque satisface esta definición de nuestra interfaz.

03:58.150 --> 03:59.040
Por lo tanto, por

03:59.040 --> 04:00.940
supuesto, ahora podemos, por ejemplo,

04:00.940 --> 04:04.020
llamar a saludar y decir hola, soy yo, y a partir de entonces

04:04.020 --> 04:06.220
debemos imprimir el nombre.

04:06.220 --> 04:08.300
Si ahora guardamos eso y luego lo recargamos,

04:08.300 --> 04:10.330
vemos hola ahí estoy Max.

04:10.330 --> 04:12.840
Y eso viene de nuestro método de saludo.

04:12.840 --> 04:14.090
Se trata de una interfaz.

04:14.090 --> 04:18.280
Nos permite definir la estructura de un objeto.

04:18.280 --> 04:21.140
Podemos usarlo como una comprobación de tipo

04:21.140 --> 04:24.453
para los objetos que deben tener esta estructura.
