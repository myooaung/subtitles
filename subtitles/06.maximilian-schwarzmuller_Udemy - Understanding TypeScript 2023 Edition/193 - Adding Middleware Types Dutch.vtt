WEBVTT

00:02.210 --> 00:04.200
Instructeur: Dus we hebben deze basis

00:04.200 --> 00:05.490
dummy server aan de praat,

00:05.490 --> 00:08.380
maar deze server doet natuurlijk niets nuttigs.

00:08.380 --> 00:11.430
Nu heb ik gezegd dat ik een heel eenvoudige rest-API wil

00:11.430 --> 00:13.110
bouwen, en daarvoor maak ik een

00:13.110 --> 00:15.570
nieuwe submap aan in de bronmap, die ik routes

00:15.570 --> 00:16.830
zal noemen.

00:16.830 --> 00:19.870
Daarin voeg ik een bestand toe dat een bepaalde set

00:19.870 --> 00:22.540
routes van deze rest-API moet afhandelen,

00:22.540 --> 00:25.710
en nu is het aan jou welk soort API je wilt bouwen.

00:25.710 --> 00:28.520
Ik zal hier een todo API bouwen, als je de React in TypeScript

00:28.520 --> 00:30.770
sectie hebt genomen, klinkt dat je bekend

00:30.770 --> 00:32.140
in de oren omdat we daar ook

00:32.140 --> 00:34.530
een todo app hebben gebouwd, dit staat echter

00:34.530 --> 00:36.820
helemaal los van die sectie, het zal niet samenwerken

00:36.820 --> 00:38.710
met React, natuurlijk zou je het wel

00:38.710 --> 00:41.250
op je eentje kunnen aansluiten, maar hier zal ik

00:41.250 --> 00:43.870
zo'n eenvoudige todo API bouwen, gewoon zodat we

00:43.870 --> 00:48.350
zien hoe TypeScript werkt met Node en Express.

00:48.350 --> 00:51.400
De applicatie die we bouwen is niet al te complex,

00:51.400 --> 00:54.760
maar zal veel interessante concepten bevatten.

00:54.760 --> 00:57.080
Dus hier voegen we mijn todo routes

00:57.080 --> 01:01.800
toe door een todo toe te voegen. ts bestand in de routes map, en daarin wil ik

01:01.800 --> 01:04.570
nu Express gebruiken. js om enkele routes

01:04.570 --> 01:06.630
te registreren.

01:06.630 --> 01:09.730
Daarvoor importeer ik iets uit Express,

01:09.730 --> 01:13.700
en dat iets is nu eigenlijk de router.

01:13.700 --> 01:16.160
De gebruikelijke JS syntaxis daarvoor

01:16.160 --> 01:20.950
is dat je Express importeert door require express te gebruiken, en dan

01:20.950 --> 01:23.550
in een nieuwe regel, zie je vaak code waar

01:23.550 --> 01:25.673
we dit hier doen.

01:27.090 --> 01:28.180
Dat is iets wat je kunt doen,

01:28.180 --> 01:30.130
maar hier importeer ik het gewoon zo.

01:31.130 --> 01:34.120
Dit geeft ons een router, en we kunnen Router hier gewoon

01:34.120 --> 01:36.750
aanroepen als een functie, en hiermee kunnen

01:36.750 --> 01:39.300
we middleware registreren, dus uiteindelijk

01:39.300 --> 01:41.980
routes eindpunten voor inkomende verzoeken waar

01:41.980 --> 01:45.540
we dan wat logica op deze verzoeken uitvoeren.

01:45.540 --> 01:48.980
Nu voor de todo app, wil ik wat basis routes registreren, een

01:48.980 --> 01:53.700
post route bij slash niets waar we een nieuwe todo kunnen toevoegen, dus hier hebben

01:53.700 --> 01:55.760
we wat code nodig, een functie die dan

01:55.760 --> 01:58.860
ergens een todo toevoegt, voor nu zal ik gewoon helemaal

01:58.860 --> 02:01.250
geen code opgeven, gewoon de route in het algemeen

02:01.250 --> 02:03.380
hier instellen.

02:03.380 --> 02:05.110
Dus we hebben het post verzoek,

02:05.110 --> 02:08.770
dan een get verzoek, alle todo's laten we zeggen, dan

02:08.770 --> 02:12.900
ook laten we zeggen patch verzoek om een todo bij te werken, en

02:12.900 --> 02:15.520
daar verwacht ik het id te krijgen, een

02:15.520 --> 02:19.280
dynamisch segment in de URL, en dan hier ook een delete verzoek

02:19.280 --> 02:22.700
om een todo te verwijderen op id.

02:22.700 --> 02:25.720
Dit zijn mijn routes, en nu kunnen we de geconfigureerde

02:25.720 --> 02:28.620
router als standaard exporteren in dit bestand.

02:28.620 --> 02:30.930
Nu zal er niets gebeuren op deze routes, toch?

02:30.930 --> 02:32.510
Ik heb geen functie ingesteld die

02:32.510 --> 02:35.830
wordt uitgevoerd wanneer een verzoek deze eindpunten bereikt,

02:35.830 --> 02:38.620
maar we weten nu tenminste welke routes we willen, we zullen

02:38.620 --> 02:41.740
de functies later in een tweede stap toevoegen.

02:41.740 --> 02:44.100
Laten we nu gewoon de router hier, de geconfigureerde routes

02:44.100 --> 02:48.320
verbinden met onze lopende server hier in app. ts, en om dat te doen, importeren we

02:48.320 --> 02:54.290
gewoon onze, laten we zeggen todoRoutes van .

02:54.290 --> 02:54.290
/routes/todos.

02:56.040 --> 02:58.910
Dus we importeren die geëxporteerde router

02:58.910 --> 03:01.610
in todos in app. ts, en nu moeten we het verbinden

03:01.610 --> 03:03.390
met onze lopende Express applicatie

03:03.390 --> 03:08.340
door gebruik te maken van app. gebruiken, en laten we dan zeggen dat

03:08.340 --> 03:10.800
we alle verzoeken die beginnen met /todos

03:10.800 --> 03:14.600
willen doorsturen naar onze todoRoutes, zodat verzoeken

03:14.600 --> 03:17.210
gericht op een andere URL daar niet worden

03:17.210 --> 03:18.703
behandeld.

03:19.920 --> 03:23.730
Over afhandeling gesproken, in de Express middleware setup die we hier gebruiken,

03:23.730 --> 03:25.983
kunnen we ook een middleware instellen die fouten

03:25.983 --> 03:29.030
afhandelt, dus alle fouten die ergens in onze code worden gegooid,

03:29.030 --> 03:33.610
en we doen dit met app.

03:33.610 --> 03:33.610
gebruiken,

03:33.610 --> 03:37.470
en dan zetten we hier zo'n typische middleware functie op waar we het verzoek, het

03:37.470 --> 03:40.640
antwoord, en een volgende functie krijgen, en nogmaals, dit alles

03:40.640 --> 03:48.330
vereist dat je wat Express kent. js en Node.

03:48.330 --> 03:48.330
js,

03:48.330 --> 03:51.160
zal ik niet duiken in hoe middleware precies werkt in

03:51.160 --> 03:52.970
Express en wat middleware is.

03:52.970 --> 03:54.960
Dus dat is een gewone middleware functie zoals je die zou

03:54.960 --> 03:57.150
moeten kennen van Express. js, en je weet waarschijnlijk

03:57.150 --> 03:59.050
ook dat er een alternatief is voor

03:59.050 --> 04:02.310
die functie, een functie die vier parameters neemt

04:02.310 --> 04:04.680
waarbij de eerste parameter een potentiële

04:04.680 --> 04:07.350
fout is, en dit is nu een functie voor foutverwerking

04:07.350 --> 04:10.720
in de middleware, die automatisch wordt geactiveerd

04:10.720 --> 04:15.290
door Express als je in een andere middleware voorafgaand aan deze een fout

04:15.290 --> 04:18.750
hebt.

04:18.750 --> 04:21.200
Dus dit is mijn error handling middleware functie,

04:21.200 --> 04:23.380
en zie je, we hebben een hoop fouten hier.

04:23.380 --> 04:26.260
Een hoop fouten omdat dit allemaal van het type

04:26.260 --> 04:29.030
any is en we ook niet al deze waarden gebruiken,

04:29.030 --> 04:33.080
maar laat me duidelijk maken welke types we hier hebben.

04:33.080 --> 04:35.510
Dit zal van het type Fout zijn, dit

04:35.510 --> 04:39.890
zal van het type express zijn. Request, of je importeert gewoon Request

04:39.890 --> 04:43.020
hier als een extra genaamd import van express, dit

04:43.020 --> 04:45.540
werkt ook als je de Express types geïnstalleerd

04:45.540 --> 04:46.670
hebt wat wij doen,

04:46.670 --> 04:49.310
dan hebben we hier ook de Response, en een NextFunction

04:49.310 --> 04:56.310
hier, en dan kunnen we onze types hier aanpassen, dit is nu van het type Request, dit is van het type Response, en

04:56.310 --> 05:01.420
dit is deze NextFunction die we kunnen uitvoeren om het verzoek zijn reis naar de

05:01.420 --> 05:03.650
volgende middleware in de rij te laten

05:03.650 --> 05:06.680
vervolgen.

05:06.680 --> 05:08.590
Dat is onze middleware voor foutafhandeling,

05:08.590 --> 05:10.820
die in werking treedt wanneer we een fout

05:10.820 --> 05:13.030
hebben in een van onze andere middlewares,

05:13.030 --> 05:15.000
en hier kunnen we een antwoord terugsturen

05:15.000 --> 05:17.690
met laten we zeggen JSON-gegevens waar we een foutmelding

05:17.690 --> 05:22.690
hebben. bericht, en waar we misschien

05:22.855 --> 05:24.630
ook, eh. bericht bedoel ik,

05:24.630 --> 05:28.510
en waar we misschien ook een statuscode van 500 instellen, en natuurlijk

05:28.510 --> 05:29.610
kun je een uitgebreidere

05:29.610 --> 05:32.460
foutafhandeling functionaliteit hebben dan ik hier

05:32.460 --> 05:35.020
heb, maar daarmee hebben we onze routes toegevoegd,

05:35.020 --> 05:38.830
we hebben onze foutafhandeling middleware toegevoegd, waarom voegen

05:38.830 --> 05:40.670
we nu niet wat logica toe aan deze API

05:40.670 --> 05:43.103
in de volgende lezing.
