WEBVTT

00:02.230 --> 00:05.130
المحاضر: نريد الآن الحصول على النص المدخل

00:05.130 --> 00:07.960
هنا من مكون NewTodo إلى مكون التطبيق.

00:07.960 --> 00:09.690
لماذا لمكون التطبيق؟

00:09.690 --> 00:11.160
لأن هذا هو المكون الخاص

00:11.160 --> 00:13.610
بنا الذي له ارتباط مباشر بكل من NewTodo

00:13.610 --> 00:16.340
بالإضافة إلى مكون TodoList.

00:16.340 --> 00:19.320
لذا ، أريد هنا إضافة وظيفة جديدة وسأسميها

00:20.800 --> 00:24.560
todoAddHandler ، الاسم متروك لك ، أود فقط استخدام

00:24.560 --> 00:25.393
هذا الاصطلاح

00:25.393 --> 00:27.990
الخاص بوجود معالج في النهاية إذا

00:27.990 --> 00:31.390
كانت وظيفة يتم تشغيلها عند حدث.

00:31.390 --> 00:34.330
وهنا أتوقع أن أحصل على النص ، كسلسلة

00:34.330 --> 00:37.970
، إنها وظيفتنا لذا يمكننا توقع ذلك.

00:37.970 --> 00:40.720
وبعد ذلك نريد أن نضيف هذا كعملية هنا.

00:40.720 --> 00:42.270
الآن ، بالطبع ، نظرًا لأنك تعلم

00:42.270 --> 00:45.230
أن React تعلم أن تحديث هذه المصفوفة وحده لن يؤدي إلى الحيلة

00:45.230 --> 00:47.440
، فلن يؤدي ذلك إلى إعادة عرض هذا المكون ، لذا

00:47.440 --> 00:49.360
سيتعين علينا استخدام بعض إدارة الحالة

00:49.360 --> 00:51.900
هنا لإنجاز هذا العمل ، قبل أن نقوم بذلك ومع ذلك ، فلنتأكد

00:51.900 --> 00:53.040
من أننا نحصل على قيمة هذه

00:53.040 --> 00:54.750
الوظيفة على الأقل.

00:54.750 --> 00:57.460
لذلك دعونا نسجل النص هنا وبعد ذلك يمكننا التركيز

00:57.460 --> 01:00.133
على جزء إدارة الحالة الخاص به كخطوة ثانية.

01:01.000 --> 01:03.020
للحصول على ذلك هنا ، نحتاج إلى

01:03.020 --> 01:05.850
التأكد من إمكانية استدعاء وظيفة todoAddHandler

01:05.850 --> 01:09.050
هذه من داخل مكون NewTodo لأن هذا هو المكان الذي

01:09.050 --> 01:12.113
نضيف فيه المهام في النهاية.

01:13.090 --> 01:15.370
الآن ، كيف نجعل هذه الوظيفة هنا قابلة

01:15.370 --> 01:17.860
للاستدعاء من داخل هذا المكون؟

01:17.860 --> 01:22.300
نقوم بتمرير مؤشر في هذه الوظيفة إلى هذا المكون.

01:22.300 --> 01:25.640
لذلك ، يمكننا هنا إضافة اسم خاصية ، onAddTodo ،

01:25.640 --> 01:27.280
ويمكنك تسميتها كيفما تريد

01:27.280 --> 01:28.560
، أنا فقط أسميها على

01:28.560 --> 01:32.030
هذا النحو لأن هذا سيحدث أساسًا عند حدث ، حدث نتحكم

01:32.030 --> 01:34.600
فيه بالطبع ، ولكن لا يزال.

01:34.600 --> 01:38.030
وهنا أريد إعادة توجيه todoAddHandler لذا أمرر مؤشرًا

01:38.030 --> 01:40.600
في هذه الوظيفة ، أنا لا أقوم بتنفيذها هنا

01:40.600 --> 01:42.120
، أنا فقط أمرر مؤشرًا إلى

01:42.120 --> 01:44.620
هذه الوظيفة ، إلى onAddTodo بحيث بدلاً

01:44.620 --> 01:49.240
من NewTodo على الدعائم ، والتي يمكننا الحصول عليها هنا ، يمكننا استدعاء

01:49.240 --> 01:56.220
هذا ، حتى نتمكن من استدعاء الدعائم.

01:56.220 --> 01:56.220
onAddTodo

01:56.220 --> 01:59.640
هنا وإعادة توجيه النص الذي تم إدخاله ، هذه هي الفكرة ،

01:59.640 --> 02:01.730
ولكن ، بالطبع ، لا يحب TypeScript

02:01.730 --> 02:03.440
هذا لأنه لا يعرف أنه سيكون هناك

02:03.440 --> 02:06.180
خاصية onAddTodo على أدواتنا هنا وكيف ستبدو

02:06.180 --> 02:08.240
هذه الدعامة.

02:08.240 --> 02:11.670
لذلك ، تمامًا كما هو الحال في TodoList ، يتعين علينا إعداد

02:11.670 --> 02:14.540
واجهة أو ببساطة تعريف نوع الدعائم الخاصة بنا.

02:14.540 --> 02:18.200
لذا ، دعنا ننتقل إلى NewTodo وربما ، مرة أخرى ، نضيف واجهة

02:18.200 --> 02:20.820
، يمكنك أيضًا إضافة نوع الدورة التدريبية

02:20.820 --> 02:23.060
وسأفعل ذلك هنا لخلط الأشياء.

02:23.060 --> 02:25.380
عادةً ما أختار دائمًا واجهة ولكن

02:25.380 --> 02:27.660
استخدام نوع جيد أيضًا.

02:27.660 --> 02:30.493
لذلك ، لاستخدام نوع هنا ، يمكننا تسميته

02:31.357 --> 02:33.820
NewTodoProps والنوع هو نوع كائن

02:33.820 --> 02:36.830
حيث أريد أن يكون لدي خاصية onAddTodo وهذا

02:36.830 --> 02:39.120
بدوره سيكون نوع دالة ، سيشير إلى

02:39.120 --> 02:40.753
دالة.

02:41.720 --> 02:44.290
ستحدد أنواع الوظائف مثل هذه ، كما تعلمت

02:44.290 --> 02:46.760
، ستكون وظيفة لا تُرجع أي شيء ولكنها

02:46.760 --> 02:48.850
تتوقع محيطًا واحدًا وسيكون هذا

02:48.850 --> 02:51.410
هو النص الذي أدخله المستخدم.

02:51.410 --> 02:54.023
لذا ، فإن نص Todo الذي هو من نوع سلسلة ،

02:55.120 --> 02:57.123
هذا ما تتوقعه هذه الوظيفة.

02:58.920 --> 03:01.770
الآن ، دعنا نضع هذا على هذا النوع العام هنا ونشير

03:01.770 --> 03:03.103
إلى NewTodoProps.

03:04.510 --> 03:08.620
وبهذا ، يمكننا استدعاء onAddTodo وتمرير سلسلة نصية.

03:08.620 --> 03:11.470
وإذا حاولت تمرير رقم هنا ، على سبيل المثال

03:11.470 --> 03:14.730
، سنحصل على خطأ بالطبع لأننا حددنا بوضوح أن الحجة

03:14.730 --> 03:17.590
يجب أن تكون عبارة عن سلسلة في الأعلى.

03:17.590 --> 03:18.733
لذا ، دعونا نعود إلى هذا.

03:20.550 --> 03:24.630
مع ذلك ، إذا أدخلنا هدفًا جديدًا مرة أخرى ، وقمنا بإنهائه

03:24.630 --> 03:27.150
في غضون شهر واحد ، فإننا نرى مرة أخرى

03:27.150 --> 03:28.690
سجلًا هنا ولكنه الآن يأتي

03:28.690 --> 03:30.750
من مكون التطبيق ، كما يمكنك أن

03:30.750 --> 03:34.170
تقول بوضوح ، لأننا أضفنا هذا السجل هنا.

03:34.170 --> 03:37.380
لذلك يعمل هذا الاتصال بين مكون NewTodo

03:37.380 --> 03:39.480
ومكوِّن التطبيق هنا.

03:39.480 --> 03:42.750
وبهذا ، دعنا ننفذ بعض إدارة الحالة هنا ، ومرة أخرى

03:42.750 --> 03:44.160
، هذا أيضًا شيء يمكنك

03:44.160 --> 03:46.850
تجربته بنفسك أولاً إذا كنت ترغب في ذلك

03:46.850 --> 03:49.670
، للتأكد من أننا نقدم todos في الحالة بحيث

03:49.670 --> 03:52.170
عندما نقوم بتحديث todos ، فإننا نعيد

03:52.170 --> 03:54.460
أيضًا- جعل هذا المكون.

03:54.460 --> 03:56.263
لنفعل ذلك في المحاضرة التالية.
