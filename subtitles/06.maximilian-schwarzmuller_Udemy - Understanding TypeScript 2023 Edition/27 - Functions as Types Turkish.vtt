WEBVTT

00:02.140 --> 00:04.980
-: Böylece fonksiyon parametreleri ve fonksiyonun

00:04.980 --> 00:08.100
geri dönüş değeri için tipler kullanabilirsiniz.

00:08.100 --> 00:10.420
Şimdi, bunu bir sonraki seviyeye

00:10.420 --> 00:14.820
taşımak için, ya onların da bir fonksiyon tipi olsaydı.

00:14.820 --> 00:17.170
Şimdi ne demek istediğimi açıkça ifade edeyim.

00:17.170 --> 00:19.333
Diyelim ki bir 'combinevalues' değişkenimiz

00:21.360 --> 00:24.200
var ve bu değişken varsayılan olarak 'any' tipine sahip. Şimdi öğrendiğiniz gibi, 'herhangi biri' o kadar da kullanışlı değildir.

00:24.200 --> 00:26.860
Sonunda yapmak istediğim şey, 'combinevalues'ı

00:26.860 --> 00:29.617
'add'e eşitlemek istiyorum. Bu yüzden bu 'add' fonksiyonunu, bu 'add' fonksiyonundaki

00:29.617 --> 00:32.600
bir işaretçiyi 'combinevalues' içinde saklamak istiyorum,

00:32.600 --> 00:35.330
böylece sonunda konsol günlüğü tutabilir, değerleri

00:35.330 --> 00:37.430
birleştirebilir ve 'combinevalues'i

00:37.430 --> 00:39.160
8 ve 8'e sahip bir fonksiyon olarak

00:39.160 --> 00:41.580
çalıştırabiliriz.

00:41.580 --> 00:44.520
Şimdi bunu kaydedersem ve derledikten sonra

00:44.520 --> 00:47.480
çalıştırırsam, yani bu dosyayı derledikten

00:47.480 --> 00:51.150
sonra yeniden yüklemesine izin verirsek, burada 16 elde

00:51.150 --> 00:52.130
ederiz.

00:52.130 --> 00:54.660
Yani, bu çalışır ve çalışmasını bekleriz çünkü bu normal

00:54.660 --> 00:55.840
JavaScript kodudur.

00:55.840 --> 00:58.820
Bir sayı değişkeninde bir işleve bir işaretçi

00:58.820 --> 01:00.880
saklayabiliriz ve sonra teklif

01:00.880 --> 01:03.350
bu değişkeni bir işlev olarak çalıştırır,

01:03.350 --> 01:05.440
çünkü işlevi işaret eder, değil

01:05.440 --> 01:07.300
mi?

01:07.300 --> 01:08.580
Böylece bu değişken aracılığıyla bu fonksiyonu çalıştırabiliriz.

01:08.580 --> 01:09.910
TypeScript açısından

01:09.910 --> 01:13.250
bu kod parçacığıyla ilgili sorunumuz, 'combinevalues'

01:13.250 --> 01:15.900
ifadesinin herhangi bir ifade olmasıdır.

01:15.900 --> 01:19.640
Dolayısıyla, 'combinevalues' değerini burada bir sayı olarak ayarlarsam,

01:19.640 --> 01:20.670
elbette bunu derleyemeyiz

01:20.670 --> 01:24.520
çünkü TypeScript'in bunun istenmeyen bir durum olduğunu veya bir soruna

01:24.520 --> 01:27.910
neden olabileceğini algılama şansı yoktur.

01:27.910 --> 01:30.543
Ancak çalışma zamanında bir hata alacaktır çünkü

01:30.543 --> 01:34.230
aslında bir sayı olduğu halde 'combinevalues' fonksiyon olarak çalıştırılmaya

01:34.230 --> 01:36.220
çalışılmıştır.

01:36.220 --> 01:39.090
Şimdi bundan kaçınmak istiyoruz ve bunun için 'combinevalues'in

01:39.090 --> 01:42.080
bir fonksiyon tutacağı konusunda net olmamız gerekiyor.

01:42.080 --> 01:44.870
Şimdi bu yöndeki ilk adım, buradaki

01:44.870 --> 01:48.650
türü fonksiyon olarak ayarlamamızdır.

01:48.650 --> 01:50.550
Function, TypeScript tarafından

01:50.550 --> 01:54.770
sağlanan bir türdür ve bu, burada depoladığımız her şeyin bir function

01:54.770 --> 01:57.940
olması gerektiğini açıkça ortaya koyar.

01:57.940 --> 02:00.870
Bu nedenle, burada bir hata alıyorum, çünkü 5 bir sayıdır ve

02:00.870 --> 02:02.230
bir fonksiyon değildir.

02:02.230 --> 02:05.350
Ve eğer bunu yorumlarsam, bunu derleyebiliriz, aksi takdirde

02:05.350 --> 02:06.660
derleme sırasında bir hata

02:06.660 --> 02:09.670
alırdık ve şimdi yine beklendiği gibi çalışıyor.

02:09.670 --> 02:12.860
Yani bu iyi, ancak mükemmel değil çünkü şimdi bunun

02:12.860 --> 02:15.380
bir fonksiyon olması gerektiğini söylüyoruz,

02:15.380 --> 02:17.940
ancak örneğin burada 'combinevalues' 'printResult'a

02:17.940 --> 02:21.460
eşit olarak da ayarlanabilir.

02:21.460 --> 02:25.290
Ve elbette TypeScript şikayet etmeyecektir çünkü 'printResult'

02:25.290 --> 02:27.150
bir fonksiyondur, ancak elbette

02:27.150 --> 02:29.600
iki argüman alan bir fonksiyon değildir.

02:29.600 --> 02:32.620
Yani yine bunu derlersem, TypeScript şikayet etmeyecek.

02:32.620 --> 02:34.800
Ancak yeniden yüklersek burada tanımlanmamış ve Sonuç 8'i görürüz.

02:34.800 --> 02:38.720
Bu yüzden istediğim sonucu alamıyorum

02:38.720 --> 02:42.470
çünkü orada yanlış işlevi sakladım.

02:42.470 --> 02:45.980
Yine, TypeScript'in bize bu konuda bilgi vermesi

02:45.980 --> 02:47.350
iyi olurdu.

02:47.350 --> 02:49.980
TypeScript bize bu konuda bilgi veremez çünkü TypeScript'e

02:49.980 --> 02:51.340
söylediğimiz tek şey orada bir

02:51.340 --> 02:54.410
fonksiyon saklamak istediğimizdir ve durum açıkça budur.

02:54.410 --> 02:58.040
Bu nedenle, 'combinevalues' içinde saklamak istediğimiz

02:58.040 --> 03:00.550
fonksiyonun nasıl görünmesi gerektiği

03:00.550 --> 03:03.810
konusunda daha kesin olabilirsek iyi olur. İşte bu noktada fonksiyon türleri devreye giriyor.

03:03.810 --> 03:07.200
Fonksiyon tipleri, bir fonksiyonu parametreleri ve

03:07.200 --> 03:08.380
o fonksiyonun geri

03:08.380 --> 03:11.900
dönüş değeri ile ilgili olarak tanımlayan tiplerdir.

03:11.900 --> 03:15.690
Bir fonksiyon tipi, JavaScript'ten bildiğiniz bu ok fonksiyonu notasyonu

03:15.690 --> 03:18.360
ile veya en azından bu notasyona yakın bir şekilde

03:18.360 --> 03:19.870
oluşturulur.

03:19.870 --> 03:23.710
Buraya küme parantezleri eklemezsiniz çünkü burada bir ok

03:23.710 --> 03:25.530
fonksiyonu oluşturmuyoruz,

03:25.530 --> 03:28.890
bunun yerine bir fonksiyon tipi oluşturuyoruz.

03:28.890 --> 03:31.610
Şimdi bu okun sağ tarafında, sonunda burada saklayabilmek

03:31.610 --> 03:35.450
istediğiniz işlevin dönüş türünü belirlersiniz.

03:35.450 --> 03:37.180
Bu numara olmalı.

03:37.180 --> 03:40.840
Şimdi bununla diyoruz ki, 'combinevalues' parametre almayan ve

03:40.840 --> 03:42.640
bir sayı döndüren herhangi bir fonksiyonu

03:42.640 --> 03:44.120
kabul eder.

03:44.120 --> 03:47.200
Bu elbette tam olarak istediğimiz şey değil.

03:47.200 --> 03:50.430
'combinevalues'in bir fonksiyon aldığından veya 2 sayı alan ve bir

03:50.430 --> 03:51.840
sayı döndüren fonksiyonları

03:51.840 --> 03:54.180
saklayabildiğinden emin olmak istiyoruz.

03:54.180 --> 03:57.130
Ve bunun için bu fonksiyon tipine

03:57.130 --> 04:01.400
parametreler ekleyebiliriz.

04:01.400 --> 04:02.400
Yukarıdaki parametre adlarını

04:02.400 --> 04:05.040
eşleştirmek zorunda değiliz, sadece türleri eşleştirmeliyiz.

04:05.040 --> 04:06.020
Dolayısıyla, sayı türünde

04:06.020 --> 04:09.060
olması gereken a ve sayı türünde olması gereken b'ye sahip olabiliriz.

04:09.060 --> 04:10.510
Şimdi TypeScript'e söylediğimiz

04:10.510 --> 04:14.070
şey, 'combinevalues' fonksiyonunun, her parametrenin bir

04:14.070 --> 04:15.660
sayı olduğu iki parametre

04:15.660 --> 04:18.322
alan ve fonksiyonun genelinin bir sayı döndürdüğü

04:18.322 --> 04:22.930
herhangi bir fonksiyonu kabul etmesi gerektiğidir.

04:22.930 --> 04:24.350
İşte bu yüzden TypeScript, 'add' ifadesini

04:24.350 --> 04:27.780
birleşik değerlerde saklamamızdan şikayet etmez, çünkü 'add' bu tür tanımını mükemmel

04:27.780 --> 04:29.690
şekilde karşılayan bir fonksiyondur.

04:29.690 --> 04:33.380
Ancak 'printResult' hakkında şikayet eder çünkü

04:33.380 --> 04:36.890
burada bize söylediği gibi 'printResult', bir

04:36.890 --> 04:40.632
sayı olan bir argüman türünde bir fonksiyondur,

04:40.632 --> 04:44.360
hiçbir şey döndürülmez, oysa biz aslında her argümanın

04:44.360 --> 04:48.690
bir sayı olduğu iki argümanlı bir fonksiyon almayı bekleriz

04:48.690 --> 04:52.310
ve ayrıca bir sayı döndürürüz.

04:52.310 --> 04:55.810
Dolayısıyla burada bir uyumsuzluk var ve bunu

04:55.810 --> 04:58.700
derlemeye çalışırsam, elbette derleyicide

04:58.700 --> 05:00.480
bir hata alacağız ve bunu

05:00.480 --> 05:03.440
yalnızca bu kod satırını kaldırarak

05:03.440 --> 05:06.270
düzeltebiliriz.

05:06.270 --> 05:07.110
Şimdi bunu hatasız bir şekilde yeniden derleyebiliyoruz.

05:07.110 --> 05:10.930
Ve şimdi bu beklendiği gibi çalışıyor.

05:10.930 --> 05:12.060
Yani fonksiyon tipleri,

05:12.060 --> 05:15.140
bir yerde özellikle hangi tip fonksiyonu kullanmak istediğimizi

05:15.140 --> 05:17.413
tanımlamamıza izin verir.

05:18.290 --> 05:20.887
Bu, bir parametre içinde beklenen bir değer, bazı geri

05:20.887 --> 05:23.890
çağırmalarla bir işlev oluşturmak için veya burada olduğu gibi

05:23.890 --> 05:25.420
bir değişken olabilir.
