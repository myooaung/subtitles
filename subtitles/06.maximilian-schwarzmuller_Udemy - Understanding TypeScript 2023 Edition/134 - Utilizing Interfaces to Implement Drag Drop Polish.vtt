WEBVTT

00:02.190 --> 00:05.380
Prowadzący: No to teraz przejdźmy do końca tego

00:05.380 --> 00:09.590
projektu, a wiąże się to z możliwością przeciągnięcia projektu,

00:09.590 --> 00:12.390
który mamy w jednym z boksów, na przykład

00:12.390 --> 00:15.170
w boksie aktywnych projektów do drugiego

00:15.170 --> 00:16.410
boksu.

00:16.410 --> 00:19.310
Tak więc, aby w zasadzie przełączyć projekt z bycia

00:19.310 --> 00:22.780
aktywnym projektem na bycie skończonym projektem.

00:22.780 --> 00:25.430
Tak więc, nie chodzi tylko o wizualną aktualizację,

00:25.430 --> 00:27.800
nie chodzi tylko o przeciąganie i upuszczanie

00:27.800 --> 00:31.050
i aktualizację UI, chodzi również o dostosowanie danych

00:31.050 --> 00:35.470
za kulisami w naszej klasie zarządzania stanem projektu, gdzie zarządzamy

00:35.470 --> 00:39.960
listą projektów w końcu, pamiętaj, że każdy projekt ma właściwość statusu

00:39.960 --> 00:45.420
i będziemy musieli zaktualizować go również.

00:45.420 --> 00:48.610
Tak więc, dwie rzeczy, które musimy zaimplementować: przeciąganie

00:48.610 --> 00:51.800
i upuszczanie, a następnie cały ten zakulisowy stan i aktualizacja

00:51.800 --> 00:53.410
danych.

00:53.410 --> 00:56.220
Teraz zacznijmy od przeciągania i upuszczania, i w tym celu

00:56.220 --> 00:59.870
zasadniczo zaimplementujemy przeciąganie i upuszczanie tak, jak zrobilibyśmy

00:59.870 --> 01:02.960
to w waniliowym skrypcie java, o którym na przykład możesz dowiedzieć

01:02.960 --> 01:04.790
się z mojego kompletnego przewodnika

01:04.790 --> 01:06.970
po skryptach java.

01:06.970 --> 01:09.690
Zasadniczo chodzi o to, aby zaimplementować garść

01:09.690 --> 01:11.960
słuchaczy zdarzeń i oczywiście zobaczysz,

01:11.960 --> 01:14.800
jak to działa w tym module w kolejnych wykładach, ale zaimplementujemy

01:14.800 --> 01:17.350
to w stylu typescriptowym, więc wzmocnimy to poprzez

01:17.350 --> 01:21.150
użycie niektórych funkcji typescriptowych.

01:21.150 --> 01:24.240
A więc zacznijmy i jak chcę go wzbogacić o funkcje

01:24.240 --> 01:25.790
typescript?

01:25.790 --> 01:28.423
Otóż chcę tutaj ponownie wykorzystać interfejsy.

01:29.280 --> 01:32.120
Interfejsy przeciągania i upuszczania, ale

01:32.120 --> 01:35.470
nie tylko w celu zdefiniowania struktury niektórych

01:35.470 --> 01:39.060
obiektów, jak wcześniej używaliśmy interfejsów, ale

01:39.060 --> 01:42.010
zamiast tego, aby naprawdę ustawić kontrakt,

01:42.010 --> 01:44.590
który pewne klasy mogą podpisać, aby zmusić

01:44.590 --> 01:46.970
te klasy do, w zasadzie, wdrożenia pewnych

01:46.970 --> 01:49.690
metod, które pomagają nam w przeciąganiu

01:49.690 --> 01:51.980
i upuszczaniu.

01:51.980 --> 01:55.250
Aby być precyzyjnym, myślę o dwóch interfejsach, i oczywiście

01:55.250 --> 01:58.590
używanie tych interfejsów będzie opcjonalne, ale pozwoli

01:58.590 --> 02:00.920
nam to, cóż, w zasadzie zapewnić pewien

02:00.920 --> 02:04.465
kod, który zmusza klasę do implementacji wszystkiego, czego

02:04.465 --> 02:06.340
potrzebuje, aby być przeciągalnym

02:06.340 --> 02:09.810
lub być poprawnym celem upuszczania, co, jeśli budujemy

02:09.810 --> 02:12.960
większą aplikację, może pomóc nam napisać czystszy

02:12.960 --> 02:19.080
kod i bardziej zrozumiały kod, szczególnie podczas pracy w zespole.

02:19.080 --> 02:21.710
O jakich więc interfejsach mówię?

02:21.710 --> 02:23.160
Chcę mieć jeden interfejs,

02:23.160 --> 02:24.617
który nazwę draggable,

02:26.200 --> 02:28.660
i będę miał drugi interfejs, który

02:28.660 --> 02:31.060
nazwę drag target.

02:31.060 --> 02:32.950
Moim pomysłem tutaj jest to, że możemy

02:32.950 --> 02:35.710
dodać interfejs draggable do każdej klasy, która renderuje

02:35.710 --> 02:38.030
i element, który może być przeciągany.

02:38.030 --> 02:41.810
W naszym przykładzie byłaby to klasa elementu projektu.

02:41.810 --> 02:44.170
Klasa project item jest odpowiedzialna

02:44.170 --> 02:46.600
za renderowanie, no właśnie, tych elementów

02:46.600 --> 02:49.230
projektu i to powinny być te przeciągane elementy,

02:49.230 --> 02:53.320
a także pudełka, aktywne projekty i zakończone projekty, więc tutaj

02:53.320 --> 02:57.880
nasza klasa project list powinna być celami przeciągania.

02:57.880 --> 03:02.100
A teraz, co te interfejsy wymuszają w takim razie do implementacji

03:02.100 --> 03:03.890
lub dodania do klas?

03:03.890 --> 03:05.760
Zacznijmy od draggable.

03:05.760 --> 03:09.550
Tutaj zasadniczo potrzebujemy dwóch słuchaczy zdarzeń,

03:09.550 --> 03:12.540
a zatem dwóch handlarzy dla tych zdarzeń.

03:12.540 --> 03:17.070
Obsługa początku przeciągania, która będzie metodą i obsługa końca przeciągania,

03:17.070 --> 03:19.733
ponieważ podczas implementacji przeciągania

03:22.020 --> 03:24.180
i upuszczania rzeczy, które chcesz przeciągnąć,

03:24.180 --> 03:26.070
będzie wymagać jakiegoś słuchacza,

03:26.070 --> 03:32.330
który słucha początku tego zdarzenia przeciągania, a także potencjalnie słuchacza, który słucha końca

03:32.330 --> 03:36.560
zdarzenia przeciągania, więc można zrobić wszelkiego rodzaju aktualizacje,

03:36.560 --> 03:40.440
które chcesz zrobić.

03:40.440 --> 03:42.580
Teraz, obsługa zdarzenia drag start

03:42.580 --> 03:44.225
otrzyma obiekt zdarzenia,

03:44.225 --> 03:47.370
który nazwiemy drag event, to jest wbudowany typ,

03:47.370 --> 03:51.010
typy z opcjami libs, ze względu na naszą konfigurację konfliktu

03:51.010 --> 03:53.210
TS i libs, które tam dodajemy i nie

03:53.210 --> 03:55.330
zwróci niczego, będzie to metoda,

03:55.330 --> 03:57.600
która wykonuje, ale która po prostu

03:57.600 --> 04:03.930
robi coś, konfiguruje zdarzenie drag na przykład, ale nie zwraca.

04:03.930 --> 04:06.970
Teraz drag end handler dostaje podobne zdarzenie,

04:06.970 --> 04:10.730
dostaje również zdarzenie drag i to wszystko nie zwraca nic.

04:10.730 --> 04:13.130
Teraz oczywiście zobaczysz, jak zastosujemy

04:13.130 --> 04:15.810
je w ciągu kilku sekund, więc wytrzymaj ze mną.

04:15.810 --> 04:17.810
A teraz, co z celem oporu?

04:17.810 --> 04:20.530
Otóż dla targetu, czyli pudełka na które

04:20.530 --> 04:22.620
możemy coś przeciągnąć są trzy

04:22.620 --> 04:26.280
event handlery, które chcę zaimplementować.

04:26.280 --> 04:28.593
A drag over handler,

04:29.440 --> 04:31.800
a drop handler, a drag

04:31.800 --> 04:34.280
leave handler.

04:34.280 --> 04:36.470
Co te rzeczy robią?

04:36.470 --> 04:39.370
Teraz musisz zaimplementować obsługę przeciągania podczas

04:39.370 --> 04:41.960
implementacji przeciągania i upuszczania w skrypcie

04:41.960 --> 04:45.140
java, aby zasadniczo zasygnalizować przeglądarce w skrypcie

04:45.140 --> 04:48.060
java, że rzecz, nad którą przeciągasz, jest prawidłowym

04:48.060 --> 04:50.160
celem przeciągania.

04:50.160 --> 04:53.840
Jeśli nie wykonasz prawa w handlerze przeciągania,

04:53.840 --> 04:56.410
upuszczanie nie będzie możliwe.

04:56.410 --> 04:57.980
Musisz drop handler następnie

04:57.980 --> 05:00.760
reagować na rzeczywisty spadek, że dzieje, więc

05:00.760 --> 05:03.960
jeśli drag over handler pozwoli na spadek z drop handler

05:03.960 --> 05:06.500
będzie obsługiwać spadek, a następnie tutaj

05:06.500 --> 05:08.650
możemy zaktualizować nasze dane i UI na

05:08.650 --> 05:11.960
przykład i drag leave handler może być przydatna, jeśli jesteśmy,

05:11.960 --> 05:14.500
na przykład, dając pewne wizualne informacje

05:14.500 --> 05:16.940
zwrotne do użytkownika, gdy on lub ona przeciąga

05:16.940 --> 05:19.880
coś nad pudełkiem na przykład, zmieniamy kolor tła

05:19.880 --> 05:22.210
dobrze, jeśli nie ma kropli dzieje i zamiast

05:22.210 --> 05:25.790
tego jest anulowane lub użytkownik przenosi element daleko możemy

05:25.790 --> 05:28.410
użyć drag leave handler do przywrócenia naszej

05:28.410 --> 05:32.190
aktualizacji wizualnej.

05:32.190 --> 05:36.250
Teraz wszystkie trzy handlery otrzymują zdarzenie przeciągania

05:36.250 --> 05:37.990
i nie zwracają niczego, więc

05:37.990 --> 05:41.473
zaktualizujmy je odpowiednio w ten sposób.

05:44.070 --> 05:47.250
A także dla tego ostatniego prowadzącego tutaj.

05:47.250 --> 05:49.810
A teraz skonfigurowaliśmy kilka interfejsów,

05:49.810 --> 05:52.840
które same w sobie nie robią wiele, ale teraz

05:52.840 --> 05:55.710
możemy ich używać i chcę zacząć od elementu

05:55.710 --> 05:57.490
projektu.

05:57.490 --> 06:00.380
Więc znajdźmy naszą klasę elementu projektu dla tego

06:00.380 --> 06:02.710
tutaj jest komponent, tutaj jest element projektu,

06:02.710 --> 06:05.100
a teraz możesz pamiętać, że interfejs nie może

06:05.100 --> 06:08.540
być po prostu użyty do zdefiniowania niestandardowego typu obiektu,

06:08.540 --> 06:12.290
ale że możesz go użyć jako kontraktu na klasie.

06:12.290 --> 06:15.760
Możesz nazwać implements, lub dodać implements tutaj po nazwie twojej

06:15.760 --> 06:16.750
klasy i po potencjalnych

06:16.750 --> 06:19.290
rozszerzeniach, które robisz, a następnie zaimplementować

06:19.290 --> 06:20.900
interfejs.

06:20.900 --> 06:24.340
W tym przypadku interfejs draggable.

06:24.340 --> 06:27.250
Teraz, gdy to zrobisz, a ja właśnie sformatowałem to, aby

06:27.250 --> 06:29.820
przynieść go w nowej linii, aby ułatwić czytanie.

06:29.820 --> 06:31.393
Kiedy to zrobisz, otrzymasz

06:31.393 --> 06:34.460
teraz błąd, że ta klasa tutaj niepoprawnie implementuje

06:34.460 --> 06:38.600
interfejs, ponieważ ten przeciągalny interfejs zmusza nas do dodania

06:38.600 --> 06:40.763
dwóch metod, jeśli pamiętasz.

06:42.840 --> 06:44.480
Dodajmy więc je tutaj.

06:44.480 --> 06:46.290
Może uda się załadować konstruktor.

06:46.290 --> 06:49.550
Dodajmy drag start handler, który otrzymuje

06:49.550 --> 06:53.610
zdarzenie typu drag event oraz dodajmy nasz drag

06:53.610 --> 06:56.500
end handler, który odbiera nasze

06:56.500 --> 06:59.143
zdarzenie drag.

06:59.990 --> 07:02.010
I teraz mamy dodane te dwie metody.

07:02.010 --> 07:05.330
Teraz to samo nie umożliwia przeciągania i upuszczania.

07:05.330 --> 07:08.900
Po prostu pomaga nam pisać przeciągalne komponenty lub przeciągalne

07:08.900 --> 07:11.880
klasy w jednolity sposób, więc jeśli dodamy więcej i więcej

07:11.880 --> 07:14.560
klas, które powinny być przeciągalne, zawsze będziemy

07:14.560 --> 07:18.210
mieli te metody, co po prostu ułatwia rozumowanie o naszym kodzie

07:18.210 --> 07:20.700
i pracę nad naszym kodem, szczególnie podczas

07:20.700 --> 07:22.870
pracy w zespole, ponieważ każdy wie, gdzie

07:22.870 --> 07:27.840
włożyć pracę dla zdarzenia rozpoczęcia przeciągania.

07:27.840 --> 07:31.340
Teraz to, czego to nie robi, oczywiście, to słuchanie zdarzenia

07:31.340 --> 07:32.950
rozpoczęcia przeciągania.

07:32.950 --> 07:35.010
To jest coś, co możemy zrobić w metodzie configure,

07:35.010 --> 07:36.730
którą jednak już masz.

07:36.730 --> 07:38.980
Możemy sięgnąć do naszego renderowanego elementu

07:38.980 --> 07:41.090
i dodać do niego listener zdarzeń i tam, to

07:41.090 --> 07:43.890
będzie zdarzenie rozpoczęcia przeciągania.

07:43.890 --> 07:45.780
Zdarzenie rozpoczęcia przeciągania jest

07:45.780 --> 07:49.190
jednym zdarzeniem, jednym domyślnym zdarzeniem przeglądarki dom, którego

07:49.190 --> 07:51.750
możemy słuchać, a parzystym handlerem, który chcemy wywołać,

07:51.750 --> 07:53.740
jest oczywiście handler rozpoczęcia przeciągania,

07:55.320 --> 07:57.793
na który możemy wskazać tutaj.

07:59.080 --> 08:00.750
Teraz, chcemy również być pewni,

08:00.750 --> 08:02.460
że wewnątrz handler'a drag start,

08:02.460 --> 08:04.870
że to słowo kluczowe odnosi się do naszej klasy

08:04.870 --> 08:06.560
i jak nauczysz się z event listeners,

08:06.560 --> 08:08.530
że domyślnie nie będzie to miało miejsca,

08:08.530 --> 08:11.810
więc moglibyśmy użyć bind here i bind this, które byłyby ważne,

08:11.810 --> 08:14.750
ale mamy lepszy sposób.

08:14.750 --> 08:16.900
Dodaliśmy dekorator auto bind, więc

08:16.900 --> 08:18.550
po prostu dodam go tutaj do

08:18.550 --> 08:20.303
handler'a drag start.

08:21.210 --> 08:26.070
Teraz możemy również nasłuchiwać zdarzenia zakończenia przeciągania tutaj i wskazać

08:26.070 --> 08:28.530
na handler zakończenia przeciągania.

08:28.530 --> 08:30.400
Możesz również dodać auto bind tam,

08:30.400 --> 08:32.690
jeśli planujesz użyć słowa kluczowego vis

08:32.690 --> 08:35.830
tutaj na razie będę po prostu logować drag end w tym miejscu,

08:35.830 --> 08:37.730
abyśmy widzieli, że jest wyzwalany,

08:37.730 --> 08:40.520
ponieważ tutaj faktycznie nie mam nic konkretnego,

08:40.520 --> 08:44.410
co chcę z tym zrobić i dlatego będę również puste ten parametr i w zasadzie

08:44.410 --> 08:47.310
powiedzieć typescript, że nie używam go.

08:47.310 --> 08:49.850
Tutaj w drag start, użyjemy eventu i na razie

08:49.850 --> 08:51.730
będę po prostu logował zdarzenie,

08:51.730 --> 08:53.720
kiedy to zdarzenie wystąpi.

08:53.720 --> 08:55.610
Samo to jednak nie załatwi sprawy.

08:55.610 --> 08:57.000
Jeśli zapiszesz wszystko

08:57.000 --> 08:59.230
i dodasz tutaj jakiś projekt, to zobaczysz,

08:59.230 --> 09:01.460
że nie możesz go przeciągnąć, prawda?

09:01.460 --> 09:04.750
Jeśli spróbujesz go przeciągnąć, to nie zadziała,

09:04.750 --> 09:07.390
ponieważ będziesz musiał również zmienić

09:07.390 --> 09:09.720
coś w swoim pliku HTML.

09:09.720 --> 09:11.810
Na tym elemencie listy, który jest renderowany

09:11.810 --> 09:14.550
dla każdego projektu, który jest rzeczą, którą

09:14.550 --> 09:18.380
chcesz przeciągnąć, musisz dodać atrybut draggable i ustawić go

09:18.380 --> 09:19.830
na true.

09:19.830 --> 09:21.040
To ważne.

09:21.040 --> 09:24.200
To mówi przeglądarce, że to będzie przeciągalne.

09:24.200 --> 09:28.430
Z tym, jeśli zapisałeś to i ponownie dodajesz projekt tutaj, widzisz teraz, to rzeczywiście

09:28.430 --> 09:30.400
jest przeciągalne, to teraz jest przyklejone

09:30.400 --> 09:32.070
do mojej myszy i teraz możemy naprawdę

09:32.070 --> 09:35.720
przenieść go tutaj po prostu dobrze.

09:35.720 --> 09:38.530
Zobaczysz też po prawej stronie, że zdarzenie przeciągania wystrzeliło,

09:38.530 --> 09:41.390
gdy zacząłem przeciągać, a jeśli puszczę, zobaczysz, że zdarzenie

09:41.390 --> 09:43.860
zakończenia przeciągania również wystrzeliło.

09:43.860 --> 09:46.510
Więc nasi słuchacze są podłączeni i możemy

09:46.510 --> 09:50.540
przeciągnąć, teraz możemy pracować nad drop targetem, więc

09:50.540 --> 09:53.200
na polu, na które to powinno być przeciągane,

09:53.200 --> 09:56.560
aby następnie dodać projekt do tego pola.

09:56.560 --> 09:58.660
Jeden z nich, który również zrobię naprawdę

09:58.660 --> 10:02.930
szybko, jest w aplikacjach. plik css, na elementach listy,

10:02.930 --> 10:06.550
więc na projektach LI dodam kolor tła biały po prostu,

10:06.550 --> 10:09.810
żebyśmy mogli to trochę lepiej zobaczyć.

10:09.810 --> 10:12.350
Więc tutaj, w projekcie LI, dodałem białe, więc

10:12.350 --> 10:15.800
kiedy przeciągamy projekt, mamy tutaj białe tło, więc to sprawia,

10:15.800 --> 10:17.370
że jest to trochę łatwiejsze

10:17.370 --> 10:19.150
do zobaczenia.

10:19.150 --> 10:20.840
Nie zmienia to jednak naszego kolejnego kroku.

10:20.840 --> 10:22.700
Chcemy zrobić mu dropabble.
