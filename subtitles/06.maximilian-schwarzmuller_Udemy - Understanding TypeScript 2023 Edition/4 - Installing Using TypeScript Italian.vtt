WEBVTT

00:02.160 --> 00:04.930
Istruttore: Ecco lo stesso esempio in

00:04.930 --> 00:06.440
un progetto reale.

00:06.440 --> 00:08.550
Troverete questo semplice progetto, il file

00:08.550 --> 00:11.270
HTML dell'indice e questo file JavaScript, allegati

00:11.270 --> 00:13.340
a questo video in un sottofascicolo.

00:13.340 --> 00:16.900
Si può semplicemente aprire questo e poi aprire il file HTML dell'indice.

00:16.900 --> 00:18.610
È anche possibile aprire il codice

00:18.610 --> 00:20.890
in un editor di testo a scelta.

00:20.890 --> 00:22.160
Qui sto usando VisualStudioCode

00:22.160 --> 00:25.000
e tornerò sulla mia configurazione esatta più avanti in

00:25.000 --> 00:26.250
questo modulo.

00:26.250 --> 00:29.250
Per ora è sufficiente aprire questi due file di testo

00:29.250 --> 00:31.180
con un qualsiasi editor di testo.

00:31.180 --> 00:34.110
Ora, quello che troverete lì dentro è questo file JavaScript,

00:34.110 --> 00:37.000
che interagisce con questo file HTML di indice.

00:37.000 --> 00:38.830
Nel file HTML dell'indice si trovano

00:38.830 --> 00:41.050
due input, il pulsante e qualsiasi file

00:41.050 --> 00:43.698
JavaScript che viene importato qui.

00:43.698 --> 00:45.843
In pratica ci rivolgiamo a questi elementi.

00:45.843 --> 00:47.968
Poi abbiamo una funzione qui e un ascoltatore

00:47.968 --> 00:50.020
di eventi sul pulsante che attiva la funzione

00:50.020 --> 00:53.830
e registra il risultato della funzione qui nella console.

00:53.830 --> 00:56.750
Ora, se apriamo semplicemente il file HTML dell'indice,

00:56.750 --> 01:00.701
facendo doppio clic su di esso nell'Esplora risorse di Windows o nel

01:00.701 --> 01:03.220
Finder di Mac, in modo che si apra in un browser,

01:03.220 --> 01:05.150
vedremo questo.

01:05.150 --> 01:07.250
I due input e il pulsante di aggiunta

01:07.250 --> 01:11.170
e qui ho aperto anche gli strumenti di sviluppo del browser.

01:11.170 --> 01:13.760
Se si inseriscono 10 e 5, ad esempio, ci

01:13.760 --> 01:16.640
si aspetterebbe di vedere 15 come risultato

01:16.640 --> 01:19.420
qui a destra, ma invece si vede 105.

01:19.420 --> 01:23.460
E questo ci mostra una debolezza di JavaScript.

01:23.460 --> 01:25.890
Non si tratta di un errore tecnico.

01:25.890 --> 01:28.050
Non si tratta di un errore che viene lanciato,

01:28.050 --> 01:31.640
ma di un errore logico nella nostra applicazione.

01:31.640 --> 01:33.986
Ma da dove proviene questo errore?

01:33.986 --> 01:37.490
Qui, in JavaScript, raggiungo questi due input e quando

01:37.490 --> 01:39.612
il pulsante viene cliccato, alla

01:39.612 --> 01:41.920
fine ottengo i valori dei due elementi

01:41.920 --> 01:45.300
di input e li passo qui per aggiungerli.

01:45.300 --> 01:46.970
È importante sapere che in

01:46.970 --> 01:50.100
JavaScript, quando si accede al valore di un elemento

01:50.100 --> 01:53.130
di input, questo è sempre una stringa.

01:53.130 --> 01:55.790
Sempre, indipendentemente dal tipo di input.

01:55.790 --> 01:59.633
Se è di tipo numero o no, è sempre una stringa.

02:00.645 --> 02:03.995
Quindi alla fine sto passando due stringhe a questa funzione e se si aggiungono

02:03.995 --> 02:05.890
due stringhe in JavaScript, queste vengono

02:05.890 --> 02:09.570
concatenate invece di essere aggiunte matematicamente.

02:09.570 --> 02:14.210
Ecco perché vediamo concatenati 105, 10 e cinque.

02:14.210 --> 02:17.090
Questo è il problema di JavaScript.

02:17.090 --> 02:19.980
E questo è un aspetto in cui TypeScript può aiutarci.

02:19.980 --> 02:22.360
Ora, senza TypeScript, potremmo aggiungere

02:22.360 --> 02:24.380
un controllo if qui e verificare

02:24.380 --> 02:28.048
se il tipo di num one è uguale a number.

02:28.048 --> 02:33.048
E se il tipo di num due è uguale a numero, allora restituisco

02:34.030 --> 02:37.390
il mio calcolo in questo modo, altrimenti

02:37.390 --> 02:40.588
potrei lanciare un errore o almeno convertire

02:40.588 --> 02:43.304
entrambi in numeri aggiungendo

02:43.304 --> 02:47.428
un più davanti a ciascun parametro.

02:47.428 --> 02:50.510
Questo è il codice che potremmo scrivere.

02:50.510 --> 02:53.023
Forse un po' più raffinato di questo in JavaScript.

02:53.023 --> 02:57.130
E con questo ci assicuriamo di convertire i numeri o gli

02:57.130 --> 03:00.670
input in numeri, se non sono ancora numeri.

03:00.670 --> 03:02.430
Quindi, se ricarico questo

03:02.430 --> 03:05.220
e lo ripeto, ora otteniamo 15 grazie

03:05.220 --> 03:07.590
al codice modificato.

03:07.590 --> 03:09.350
Quindi, ovviamente, possiamo farlo in JavaScript.

03:09.350 --> 03:10.970
E questo è JavaScript puro,

03:10.970 --> 03:13.440
non ha nulla di TypeScript.

03:13.440 --> 03:16.640
Ma abbiamo scritto del codice aggiuntivo per un errore che

03:16.640 --> 03:19.048
in realtà vorrei evitare in primo luogo.

03:19.048 --> 03:22.210
Non voglio che questo accada.

03:22.210 --> 03:26.260
Voglio assicurarmi che non si possano passare stringhe ad add, perché

03:26.260 --> 03:28.930
add dovrebbe essere una funzione che opera solo

03:29.890 --> 03:31.020
sui numeri.

03:31.020 --> 03:32.570
In questo modo non è necessario

03:33.428 --> 03:35.650
verificare se si ottiene un numero o meno.

03:35.650 --> 03:37.000
Quindi voglio mantenere questa funzione

03:37.000 --> 03:38.500
nello stato in cui era prima.

03:38.500 --> 03:41.630
Voglio questa funzione qui, proprio come questa.

03:41.630 --> 03:44.003
Ed è qui che TypeScript può aiutarci.

03:45.088 --> 03:45.921
Quindi TypeScript

03:45.921 --> 03:48.900
può aiutarci in queste situazioni, come ho appena mostrato.

03:48.900 --> 03:52.690
Per vedere come ci aiuta, installiamolo.

03:52.690 --> 03:56.590
Quindi su typescriptlang. org, è possibile fare clic su download.

03:56.590 --> 03:58.540
E lì imparerete come installarlo.

03:58.540 --> 04:00.250
Lo installeremo con questo

04:01.136 --> 04:02.880
comando che utilizza lo strumento

04:02.880 --> 04:06.750
NPM, che fa parte del pacchetto Node JS.

04:06.750 --> 04:10.210
Quindi, anche se non scriveremo codice Node JS qui, dobbiamo

04:10.210 --> 04:12.910
comunque installare Node JS semplicemente perché

04:12.910 --> 04:14.760
dietro le quinte sarà usato anche

04:14.760 --> 04:17.770
da alcuni strumenti che utilizziamo.

04:17.770 --> 04:21.780
Quando installiamo Node JS, installiamo anche NPM, il Node Package

04:21.780 --> 04:24.956
Manager, uno strumento che possiamo usare per installare

04:24.956 --> 04:29.200
TypeScript a livello globale sulla nostra macchina.

04:29.200 --> 04:31.452
È quindi sufficiente visitare nodejs. org e lì installare

04:31.452 --> 04:34.220
l'ultima versione che si trova qui.

04:34.220 --> 04:35.723
È sufficiente fare clic su questo pulsante.

04:36.586 --> 04:38.276
A questo punto verrà scaricato e installato, oppure si può procedere

04:38.276 --> 04:39.420
con il programma di installazione.

04:39.420 --> 04:42.360
È supportato da tutti i sistemi operativi.

04:42.360 --> 04:45.300
Una volta installato Node JS, sarà possibile

04:45.300 --> 04:47.936
eseguire questo comando.

04:47.936 --> 04:51.440
È sufficiente aprire il normale terminale o

04:51.440 --> 04:54.800
prompt dei comandi e copiare il comando.

04:54.800 --> 04:57.223
È importante che su Mac e Linux sia necessario aggiungere

04:57.223 --> 04:59.412
sudo per ottenere i permessi giusti.

04:59.412 --> 05:02.810
In Windows, questa operazione non è necessaria.

05:02.810 --> 05:05.100
Quindi assicuratevi di installare TypeScript

05:05.100 --> 05:06.810
con questo comando.

05:06.810 --> 05:09.372
Immettere la password nel caso in cui venga richiesta.

05:09.372 --> 05:12.176
E con questo abbiamo installato TypeScript a livello

05:12.176 --> 05:15.430
globale sulla nostra macchina, ma cosa significa?

05:15.430 --> 05:17.696
TypeScript installato.

05:17.696 --> 05:20.810
Ricordate che TypeScript è un linguaggio di programmazione,

05:20.810 --> 05:22.750
ma è un linguaggio di programmazione che

05:22.750 --> 05:25.212
funziona solo perché abbiamo anche questo compilatore,

05:25.212 --> 05:28.137
questo strumento che compila in JavaScript.

05:28.137 --> 05:31.310
Quindi, alla fine, quello che abbiamo installato

05:31.310 --> 05:33.296
è il compilatore e tutto ciò che

05:33.296 --> 05:36.116
deve sapere per comprendere il codice TypeScript

05:36.116 --> 05:39.020
e convertirlo in JavaScript.

05:39.020 --> 05:41.036
Quindi abbiamo installato il

05:41.036 --> 05:44.460
compilatore e possiamo eseguire il comando TSC

05:44.460 --> 05:47.210
che invoca il compilatore TypeScript per

05:47.210 --> 05:50.870
compilare un file TypeScript in JavaScript.

05:50.870 --> 05:54.140
Per vedere questo aspetto nel progetto su cui abbiamo lavorato, aggiungiamo semplicemente

05:54.140 --> 05:56.563
un nuovo file usando ts. ad esempio.

05:56.563 --> 05:58.677
Qualsiasi nome si voglia, ma l'estensione deve essere . ts, che

05:58.677 --> 06:03.677
sta per TypeScript.

06:05.100 --> 06:07.651
Ora copiamo il codice JavaScript

06:07.651 --> 06:09.850
nel file TypeScript.

06:09.850 --> 06:13.100
In VisualStudioCode, ottengo immediatamente alcuni errori

06:13.100 --> 06:14.280
che ora risolveremo.

06:14.280 --> 06:16.379
E questo è un grande vantaggio di TypeScript.

06:16.379 --> 06:18.915
Se si utilizza l'IDE giusto, il

06:18.915 --> 06:22.710
mio consiglio è VisualStudioCode, sul quale tornerò

06:22.710 --> 06:24.420
più avanti.

06:24.420 --> 06:27.810
In questo modo si ottiene già un ottimo supporto nell'IDE quando

06:27.810 --> 06:30.230
si lavora all'interno di file TypeScript.

06:30.230 --> 06:34.710
Qui, in pratica, TypeScript analizza il mio codice e identifica

06:34.710 --> 06:36.910
alcuni punti deboli.

06:36.910 --> 06:39.720
Il che è fantastico, perché è esattamente quello che voglio.

06:39.720 --> 06:42.110
Quindi, in questo esempio, cancelliamo

06:42.110 --> 06:44.003
il file JavaScript solo JS.

06:45.952 --> 06:48.360
E con questo, alcuni errori sono scomparsi

06:48.360 --> 06:50.539
perché ha identificato che alcune costanti

06:50.539 --> 06:53.230
e così via sono state usate in più file.

06:53.230 --> 06:55.787
Ma mi dà ancora un errore in basso.

06:55.787 --> 06:57.700
Ad esempio, non è sicuro che esista

06:57.700 --> 07:00.108
davvero una proprietà value.

07:00.108 --> 07:03.200
Questo è un errore che non avevo nemmeno considerato

07:03.200 --> 07:05.720
prima in JavaScript, ma è vero.

07:05.720 --> 07:08.350
Sto selezionando un elemento in base all'ID.

07:08.350 --> 07:11.680
Ora TypeScript non può sapere se questo funzionerà davvero.

07:11.680 --> 07:13.160
Forse c'è un errore di battitura.

07:13.160 --> 07:15.940
In questo caso, non sarei in grado di selezionare un elemento.

07:15.940 --> 07:17.704
Questo elemento semplicemente non esisterebbe nella pagina.

07:17.704 --> 07:20.164
Quindi potrebbe esserci un errore di battitura e TypeScript

07:20.164 --> 07:22.472
non analizza il codice HTML per scoprire se funziona.

07:22.472 --> 07:24.468
Quindi, per prima cosa, questo potrebbe fallire.

07:24.468 --> 07:28.740
Ma anche se riesce a selezionare un elemento, non deve essere necessariamente

07:28.740 --> 07:30.910
un elemento di input.

07:30.910 --> 07:34.720
Potrebbe essere qualsiasi altro elemento e la maggior parte degli elementi

07:34.720 --> 07:37.450
HTML non ha una proprietà value a cui si può accedere.

07:37.450 --> 07:38.630
E questo è già fantastico.

07:38.630 --> 07:41.372
TypeScript ci costringe a essere più espliciti,

07:41.372 --> 07:44.060
a essere più chiari sulle nostre intenzioni e a

07:44.060 --> 07:46.130
ricontrollare il nostro codice.

07:46.130 --> 07:48.100
Per esempio qui, e non c'è bisogno di

07:48.100 --> 07:49.820
capire tutta questa sintassi.

07:49.820 --> 07:52.172
Lo impareremo passo dopo passo nel corso del corso.

07:52.172 --> 07:55.660
Ad esempio, potremmo far sapere a TypeScript che siamo

07:55.660 --> 07:58.204
sicuri di ottenere un elemento aggiungendo

07:58.204 --> 08:00.080
un punto esclamativo.

08:00.080 --> 08:04.170
In pratica, indica a TypeScript che questa operazione non produrrà mai un risultato nullo.

08:04.170 --> 08:06.370
Questo troverà sempre un elemento.

08:06.370 --> 08:08.420
E come sviluppatore, ovviamente so

08:08.420 --> 08:10.350
che questo troverà sempre un elemento,

08:10.350 --> 08:11.920
perché ho controllato due volte

08:11.920 --> 08:14.763
l'ID e ho visto che sì, ho quell'ID qui.

08:15.610 --> 08:17.270
Inoltre, so anche che sarà

08:17.270 --> 08:19.500
sempre un elemento di input.

08:19.500 --> 08:22.408
Quindi possiamo usare come elemento di input HTML,

08:22.408 --> 08:25.470
una sintassi chiamata typecasting, che spiegherò in

08:25.470 --> 08:27.746
dettaglio più avanti, per far sapere a TypeScript

08:27.746 --> 08:30.327
quale tipo di elemento sarà.

08:30.327 --> 08:32.926
Possiamo applicare questo metodo anche al secondo elemento.

08:32.926 --> 08:35.650
Per essere chiari, questa è la sintassi

08:35.650 --> 08:37.510
di TypeScript.

08:37.510 --> 08:39.520
Posso usare questo punto esclamativo

08:39.520 --> 08:41.600
qui e posso usare questo typecasting

08:41.600 --> 08:44.786
qui perché siamo in un . ts, siamo in un file TypeScript.

08:44.786 --> 08:48.380
Compileremo il tutto in JavaScript.

08:48.380 --> 08:51.050
Questo non funzionerebbe nel JavaScript vanilla.

08:51.050 --> 08:53.427
Non è disponibile in loco.

08:53.427 --> 08:56.300
In questo modo, siamo costretti a essere più chiari sulle nostre

08:56.300 --> 08:58.460
intenzioni e a pensare davvero al nostro codice

08:58.460 --> 09:01.060
e a ricontrollarlo, il che è fantastico.

09:01.060 --> 09:03.160
Ma questo non è nemmeno il vantaggio maggiore.

09:04.270 --> 09:06.820
Il vantaggio maggiore è l'aggiunta di tipi.

09:06.820 --> 09:09.630
È questo che dà il nome a TypeScript, dopo tutto.

09:09.630 --> 09:12.282
E qui non sto dicendo nulla sui tipi di dati

09:12.282 --> 09:14.204
su cui questa funzione opera.

09:14.204 --> 09:17.886
Se passiamo il mouse su uno di questi parametri, vediamo

09:17.886 --> 09:20.126
questo qualcosa qui.

09:20.126 --> 09:22.828
E alla fine, questo è TypeScript che ci dice:

09:22.828 --> 09:24.880
"Non so cosa c'è lì dentro". Può essere qualsiasi tipo di valore.

09:24.880 --> 09:27.162
Ora possiamo aggiungere un tipo più esplicito nei file TypeScript.

09:27.162 --> 09:31.960
Quindi non nei file JavaScript, ma nei file TypeScript, aggiungendo i due punti

09:31.960 --> 09:33.806
qui e specificando il tipo.

09:33.806 --> 09:38.580
Ad esempio, il numero.

09:38.580 --> 09:40.730
Fare questo qui e fare questo qui.

09:40.730 --> 09:43.300
Con questa sintassi extra che TypeScript,

09:43.300 --> 09:45.246
che questo compilatore comprende,

09:45.246 --> 09:47.928
stiamo dicendo a TypeScript che questo qui sarà

09:47.928 --> 09:50.960
di tipo numero e questo sarà di tipo numero.

09:50.960 --> 09:54.010
E quindi ora si verifica di nuovo un errore.

09:54.010 --> 09:56.126
Tra l'altro, questo errore non

09:56.126 --> 09:58.060
si verifica solo nell'IDE.

09:58.060 --> 09:59.370
Lo otteniamo anche se proviamo

09:59.370 --> 10:01.940
a compilare questo codice, perché in definitiva è quello

10:01.940 --> 10:03.820
che dobbiamo fare, giusto?

10:03.820 --> 10:05.326
Ora per compilare questo, aprirò un terminale.

10:05.326 --> 10:08.670
E qui sto aprendo il mio terminale o prompt dei comandi

10:08.670 --> 10:10.760
che è integrato in questo IDE.

10:10.760 --> 10:13.683
È il normale prompt dei comandi del sistema.

10:14.947 --> 10:16.530
Anche in questo caso ho utilizzato il normale

10:16.530 --> 10:18.110
terminale di comando del sistema, ma ho già

10:18.110 --> 10:19.533
navigato in questa cartella.

10:20.510 --> 10:22.446
Quindi, se non si utilizza un

10:22.446 --> 10:27.420
terminale IDE integrato, si può usare quello normale, ma il CD deve navigare

10:27.420 --> 10:30.265
nella cartella di partenza estratta, dove

10:30.265 --> 10:33.960
è stato aggiunto il file TypeScript.

10:33.960 --> 10:36.300
Una volta entrati in quella cartella, è possibile eseguire TSC.

10:36.300 --> 10:38.888
Questo richiamerà il compilatore TypeScript

10:38.888 --> 10:42.980
che abbiamo installato in precedenza, usando dash ts. ts.

10:42.980 --> 10:47.980
Se lo si esegue, si ottiene un errore.

10:47.990 --> 10:50.728
Si otterrà comunque un file JavaScript, perché

10:50.728 --> 10:53.267
per impostazione predefinita TypeScript

10:53.267 --> 10:57.460
lo compilerà in JavaScript; si apprenderà anche come sopprimere questa

10:57.460 --> 11:00.050
funzione più avanti nel corso.

11:00.050 --> 11:02.900
Ma nel farlo dà un errore del compilatore.

11:02.900 --> 11:05.904
Dice che un argomento di tipo stringa non può essere

11:05.904 --> 11:09.070
assegnato a un parametro di tipo numero.

11:09.070 --> 11:13.128
Il problema è che TypeScript capisce che la proprietà

11:13.128 --> 11:16.550
value del nostro elemento di input sarà

11:16.550 --> 11:18.930
una stringa.

11:18.930 --> 11:23.130
Lo vediamo anche qui nell'IDE.

11:23.130 --> 11:24.786
E non possiamo passarlo ad

11:24.786 --> 11:28.130
add perché lì non vogliamo una stringa, ma un numero.

11:28.130 --> 11:31.026
Dobbiamo quindi risolvere il problema, ad esempio convertendolo

11:31.026 --> 11:33.600
in un numero, aggiungendo un più.

11:33.600 --> 11:36.790
Una volta fatto questo, possiamo compilare di

11:36.790 --> 11:39.708
nuovo questo codice ripetendo il comando

11:39.708 --> 11:42.406
e ora viene compilato senza errori.

11:42.406 --> 11:45.225
Ci dà questo usando TypeScript. e ora mostra di nuovo degli errori, perché

11:45.225 --> 11:49.030
non capisce che non potrà

11:49.030 --> 11:50.690
mai usare entrambi i file

11:50.690 --> 11:53.090
allo stesso tempo.

11:54.028 --> 11:55.373
Anche in questo caso, si tratta di un aspetto

11:56.466 --> 11:58.530
che verrà migliorato nel corso del corso, una volta configurato.

11:58.530 --> 12:00.428
Per ora possiamo ignorare questo aspetto.

12:00.428 --> 12:01.261
Quindi mi dà questo file.

12:02.588 --> 12:04.348
E se apriamo questo, vediamo qualcosa di interessante.

12:04.348 --> 12:06.210
Vediamo che lì, naturalmente, i nostri tipi sono spariti.

12:06.210 --> 12:08.690
Questa colata qui non c'è più.

12:08.690 --> 12:11.280
Abbiamo di nuovo JavaScript alla vaniglia.

12:11.280 --> 12:13.308
Quindi, se diamo un'occhiata al nostro file

12:13.308 --> 12:16.250
TypeScript, vediamo che ci sono tutte queste belle aggiunte.

12:16.250 --> 12:18.786
Ma come ho detto, queste sono solo funzioni di TypeScript.

12:18.786 --> 12:22.130
Quando si compila in JavaScript, vengono utilizzati per valutare

12:22.130 --> 12:24.600
il codice e trovare potenziali errori, ma poi

12:24.600 --> 12:26.770
vengono eliminati e si ottiene un normale

12:26.770 --> 12:29.090
JavaScript come output.

12:29.090 --> 12:33.960
Ora possiamo andare al nostro file HTML dell'indice

12:33.960 --> 12:37.010
e importarlo usando ts. js e questo è importante.

12:37.010 --> 12:41.230
Importare sempre i file JavaScript perché

12:41.230 --> 12:43.550
il browser non può eseguire TypeScript.

12:43.550 --> 12:45.990
Dobbiamo importare il risultato della nostra compilazione.

12:45.990 --> 12:49.480
E ora, se ricarichiamo il codice, abbiamo il nostro codice

12:49.480 --> 12:52.108
funzionante, perché ora abbiamo un codice JavaScript

12:52.108 --> 12:55.750
corretto, in cui abbiamo risolto il problema facendo il casting

12:55.750 --> 12:57.970
dei nostri input prima di passarli alla

12:59.410 --> 13:01.110
funzione.

13:01.110 --> 13:03.010
Ma siamo riusciti a risolvere questi problemi

13:03.986 --> 13:06.087
grazie alle nostre annotazioni sui tipi.

13:06.087 --> 13:08.100
E come avete visto, abbiamo dovuto scrivere

13:08.100 --> 13:10.720
anche altre parti del codice in modo più pulito.

13:10.720 --> 13:13.220
Ed è per questo che TypeScript è straordinario.

13:13.220 --> 13:15.400
Ci costringe a scrivere codice migliore,

13:15.400 --> 13:17.880
più pulito e meno soggetto a errori.
