WEBVTT

00:02.150 --> 00:06.180
Instrutor: Então somos capazes de reunir nosso valor de entrada de título e

00:06.180 --> 00:07.420
imprimi-lo no console,

00:07.420 --> 00:10.160
mas, claro, não é essa, em última análise, a idéia.

00:10.160 --> 00:13.940
Em vez disso, a idéia é reunir todos os nossos valores de entrada,

00:13.940 --> 00:15.420
validá-los rapidamente

00:15.420 --> 00:17.890
e, em seguida, fazer algo com eles.

00:17.890 --> 00:20.598
Para isso, vou acrescentar mais um novo

00:20.598 --> 00:21.860
método, outro método

00:21.860 --> 00:25.700
privado, porque só vou chamá-lo de dentro da classe, e

00:25.700 --> 00:28.530
esse é o método gatherUserInput.

00:28.530 --> 00:30.460
O nome depende totalmente de você.

00:30.460 --> 00:33.240
Minha idéia é que este método seja chamado aqui.

00:33.240 --> 00:35.230
Depois de evitarmos o padrão, isto

00:35.230 --> 00:38.980
deve basicamente alcançar todas as nossas entradas aqui, reunir

00:38.980 --> 00:40.870
a entrada do usuário ali, validá-la

00:40.870 --> 00:43.060
e, em seguida, devolvê-la.

00:43.060 --> 00:45.950
Para que aqui, eu recebi meu userInput,

00:45.950 --> 00:50.090
que poderia ser um tuple com o título, a descrição e as

00:50.090 --> 00:53.810
pessoas, como os valores do tuple livre.

00:53.810 --> 00:55.510
Na verdade, eu gosto dessa idéia.

00:55.510 --> 00:57.800
Portanto, já vamos definir aqui um tipo de retorno.

00:57.800 --> 00:59.880
O tipo de retorno é um tuple.

00:59.880 --> 01:02.620
Agora você se lembra como um tuple é definido?

01:02.620 --> 01:05.630
Como é definido o tipo de um tuple?

01:05.630 --> 01:08.620
Não é cordel, colchetes.

01:08.620 --> 01:12.260
Isso significa que você está devolvendo uma série de cordas.

01:12.260 --> 01:14.550
Em vez disso, quero dizer

01:14.550 --> 01:18.160
que devolvo um conjunto de X elementos

01:18.160 --> 01:21.510
exatamente destes três tipos.

01:21.510 --> 01:23.650
E para isso, você define aqui o tipo de retorno,

01:23.650 --> 01:27.160
dois colchetes, e então dentro dos colchetes, você adiciona os

01:27.160 --> 01:30.240
diferentes elementos, e tipos de elementos.

01:30.240 --> 01:32.900
Por exemplo, fio, corda e número.

01:32.900 --> 01:37.130
Com isso, você está dizendo que este método aqui retorna um tuple, que tem três

01:37.130 --> 01:38.510
elementos, onde o primeiro

01:38.510 --> 01:40.300
elemento é uma corda, o segundo elemento

01:40.300 --> 01:41.820
é uma corda, e o terceiro elemento

01:41.820 --> 01:44.080
é na verdade um número.

01:44.080 --> 01:46.360
E agora podemos acrescentar alguma lógica a este

01:46.360 --> 01:48.540
método para que isso se torne realidade.

01:48.540 --> 01:52.670
Então, para isso, vamos antes de tudo obter o título inserido a partir

01:52.670 --> 01:57.210
deste títuloInputElement. valor.

01:57.210 --> 01:58.340
E podemos repetir isso.

01:58.340 --> 02:01.920
Também queremos a descrição inserida, naturalmente, a partir desta

02:01.920 --> 02:05.100
descriçãoInputElement. e a quantidade de

02:05.100 --> 02:09.510
pessoas inscritas, ou apenas pessoas inscritas

02:09.510 --> 02:12.440
deste Ingresso de pessoas.

02:12.440 --> 02:13.870
Agora eu armazenei isto em constantes

02:13.870 --> 02:15.490
para que eu não tenha que repetir sempre

02:15.490 --> 02:17.640
estas expressões mais longas.

02:17.640 --> 02:19.370
Agora, podemos validar isto.

02:19.370 --> 02:21.500
Uma validação trivial seria verificar

02:21.500 --> 02:24.850
se o Title foi inserido. trim, removendo assim o

02:24.850 --> 02:27.610
amplo espaço do X no início e no final.

02:27.610 --> 02:30.560
O comprimento é igual a zero, ou se

02:30.560 --> 02:35.350
especificadoDescrição. comprimento do revestimento

02:35.350 --> 02:37.570
é igual a zero, ou se o usuário

02:37.570 --> 02:41.520
entrouPeople. O comprimento do revestimento

02:41.520 --> 02:44.380
é igual a zero.

02:44.380 --> 02:48.410
Isso verificaria se nenhuma entrada está vazia.

02:48.410 --> 02:50.330
Agora, no entanto, não verifica tudo o que

02:50.330 --> 02:51.860
talvez queiramos verificar.

02:51.860 --> 02:54.770
Não estamos verificando se as pessoas inscritas

02:54.770 --> 02:57.160
são, digamos, um número positivo.

02:57.160 --> 03:00.170
Não somos capazes de definir um comprimento mínimo.

03:00.170 --> 03:02.190
Teríamos que acrescentar mais e mais condições

03:02.190 --> 03:04.050
aqui, e embora possamos fazer isso, esta

03:04.050 --> 03:06.820
não seria realmente uma solução escalável.

03:06.820 --> 03:09.110
Se tivermos nossas partes na aplicação onde também

03:09.110 --> 03:11.550
queremos validar a entrada do usuário, temos sempre

03:11.550 --> 03:14.440
que repetir por muito tempo se as declarações forem feitas.

03:14.440 --> 03:18.390
Por isso, em breve, apresentarei uma solução de validação mais inteligente

03:18.390 --> 03:21.960
ou uma solução de validação mais escalável.

03:21.960 --> 03:23.780
Por enquanto, podemos deixar as coisas assim.

03:23.780 --> 03:26.190
Mas você já pode pensar sobre isso e, claro,

03:26.190 --> 03:28.520
após esta palestra aqui, fazer uma pausa

03:28.520 --> 03:32.220
e pensar como você poderia terceirizar isso em uma função

03:32.220 --> 03:34.670
de validação separada, que é configurável,

03:34.670 --> 03:38.350
e como os tipos poderiam ajudá-lo lá.

03:38.350 --> 03:41.370
Há definitivamente muitas abordagens possíveis, e vou compartilhar

03:41.370 --> 03:44.040
a minha com vocês na próxima palestra.

03:44.040 --> 03:45.620
Mas antes de chegarmos lá,

03:45.620 --> 03:48.350
vamos realmente usar esta abordagem trivial

03:48.350 --> 03:52.130
aqui e fazer algo se todas estas condições forem satisfeitas.

03:52.130 --> 03:53.620
Agora, se chegarmos a isto se

03:53.620 --> 03:56.000
o bloqueio falhar, sabemos que pelo menos uma

03:56.000 --> 03:57.350
validação falhou, e então

03:57.350 --> 04:01.833
podemos passar em alerta, onde dizemos Invalid input, por favor tente novamente.

04:03.450 --> 04:04.910
Senão, se não conseguirmos

04:04.910 --> 04:06.200
entrar lá, sabemos

04:06.200 --> 04:08.600
que temos uma entrada válida, senão,

04:08.600 --> 04:11.310
quero devolver meu tuple.

04:11.310 --> 04:14.170
Portanto, aqui, quero devolver o título

04:14.170 --> 04:17.090
inserido, a descrição inserida, e também

04:17.090 --> 04:19.660
as pessoas inseridas.

04:19.660 --> 04:20.630
Agora, como você pode dizer,

04:20.630 --> 04:21.850
o grupo de tipos não está satisfeito,

04:21.850 --> 04:24.210
porque as pessoas inscritas devem ser um número, não um

04:24.210 --> 04:25.370
texto.

04:25.370 --> 04:27.410
E na verdade, tudo o que você extrair

04:27.410 --> 04:28.720
da propriedade de valor

04:28.720 --> 04:32.350
de um elemento de entrada será texto por padrão.

04:32.350 --> 04:34.520
Então, para transformar isto em um

04:34.520 --> 04:38.060
número, podemos chamar parseFloat, por exemplo, ou simplesmente

04:38.060 --> 04:40.610
adicionar um plus na frente dele, e isto

04:40.610 --> 04:42.850
o converterá em um número, e o grupo

04:42.850 --> 04:45.430
de tipos ainda não está feliz porque, bem,

04:45.430 --> 04:48.910
nem sempre retornamos um tuple.

04:48.910 --> 04:50.830
E quanto a esta parte aqui?

04:50.830 --> 04:52.310
Se conseguirmos entrar no bloco,

04:52.310 --> 04:53.510
estamos mostrando um alerta,

04:53.510 --> 04:55.820
mas não estamos devolvendo um tuple.

04:55.820 --> 04:59.810
Bem, há várias coisas que poderíamos fazer em seu lugar.

04:59.810 --> 05:03.460
Não podemos simplesmente devolver nada, assim.

05:03.460 --> 05:06.320
Alternativamente, poderíamos lançar um erro.

05:06.320 --> 05:08.360
Então, na verdade, não devolveríamos

05:08.360 --> 05:11.100
nada, mas cometeríamos um erro nesse caso.

05:11.100 --> 05:12.820
Agora, eu não quero lançar um erro aqui porque

05:12.820 --> 05:15.570
não quero realmente implementar o tratamento de erros, então o

05:15.570 --> 05:18.090
que vou fazer é apenas acrescentar uma declaração de retorno,

05:18.090 --> 05:20.100
mas é claro que isto não é um tuple.

05:20.100 --> 05:23.110
Portanto, na verdade, o tipo de retorno aqui em

05:23.110 --> 05:25.923
cima é um tuple, ou na verdade é indefinido.

05:27.320 --> 05:29.040
Agora, no entanto, como você aprendeu,

05:29.040 --> 05:30.750
você não deve usar aqui indefinido como

05:30.750 --> 05:32.550
um tipo de retorno sobre funções.

05:32.550 --> 05:34.040
Em vez disso, use o vazio.

05:34.040 --> 05:35.410
É quase o mesmo, mas

05:35.410 --> 05:37.040
exclusivo para funções,

05:37.040 --> 05:39.350
e isto diz ao TypeScript que esta

05:39.350 --> 05:44.350
é uma função que tem pelo menos um ramo que não retorna nenhum valor

05:45.230 --> 05:46.930
como este.

05:46.930 --> 05:49.160
Aqui também usamos, naturalmente, um tipo de sindicato,

05:49.160 --> 05:51.240
pois temos ambas as possibilidades.

05:51.240 --> 05:53.170
Podemos não devolver

05:53.170 --> 05:55.660
nada, ou devolver um tuple.

05:55.660 --> 05:57.510
Portanto, agora temos

05:57.510 --> 05:59.370
oUserInput e o UserInput

05:59.370 --> 06:01.670
lá para todos ou é indefinido

06:01.670 --> 06:04.130
no final ou é aquele tuple.

06:04.130 --> 06:07.640
Portanto, agora, antes de avançarmos e melhorarmos a validação,

06:07.640 --> 06:09.620
vamos nos basear nesse userInput.

06:09.620 --> 06:12.480
Quando reunimos o userInput lá embaixo, agora temos

06:12.480 --> 06:14.820
aquela coisa do userInput, e agora podemos

06:14.820 --> 06:17.050
verificar se ele é um tuple.

06:17.050 --> 06:19.820
Agora o problema está na hora da corrida, não

06:19.820 --> 06:22.620
temos como verificar se se trata de um tuple.

06:22.620 --> 06:25.200
Não há nenhum exemplo que pudéssemos usar.

06:25.200 --> 06:28.560
Não há nenhum tipo de Tuple que pudéssemos verificar.

06:28.560 --> 06:31.020
Também não podemos verificar se o typof

06:33.803 --> 06:36.053
userInput é igual a tuple porque isso

06:37.130 --> 06:40.050
não existe no Vanilla JavaScript.

06:40.050 --> 06:41.850
A corda existe, por exemplo,

06:41.850 --> 06:44.950
mas o tuple não é um tipo JavaScript.

06:44.950 --> 06:47.020
Portanto, para verificar se é um tuple,

06:47.020 --> 06:48.900
temos que lembrar que os tuple no

06:48.900 --> 06:50.990
final são apenas apagados.

06:50.990 --> 06:52.750
Eles são especiais em TypeScript,

06:52.750 --> 06:54.860
mas uma vez que estamos em terra JavaScript

06:54.860 --> 06:55.940
eles são apenas apagados

06:55.940 --> 06:58.320
porque a idéia de um tuple onde o número de

06:58.320 --> 06:59.950
elementos e os tipos de elementos

06:59.950 --> 07:04.470
é fixo realmente só existe em TypeScript.

07:04.470 --> 07:05.930
Portanto, durante a execução,

07:05.930 --> 07:09.370
tudo o que precisamos verificar aqui é se é um array, e para

07:09.370 --> 07:12.950
isso, podemos usar o objeto array em JavaScript, e aí está

07:12.950 --> 07:15.180
o método isArray.

07:15.180 --> 07:17.500
Este é um método incorporado ao Vanilla JavaScript

07:17.500 --> 07:20.290
que nos permite verificar se este aqui é um array.

07:20.290 --> 07:23.200
Sabemos que ou é indefinido ou é um tuple.

07:23.200 --> 07:24.630
Um tuple é um conjunto, portanto,

07:24.630 --> 07:26.000
se isto retornar verdadeiro,

07:26.000 --> 07:27.400
teremos o tuple.

07:27.400 --> 07:31.010
E então aqui, podemos usar a estruturação, por exemplo,

07:31.010 --> 07:34.070
para obter o título, a descrição e as pessoas fora

07:34.070 --> 07:35.560
do input do usuário, e então

07:35.560 --> 07:37.720
fazer algo com esse input.

07:37.720 --> 07:39.230
Por exemplo, console,

07:39.230 --> 07:42.623
por enquanto. título do registro, descrição e pessoas.

07:43.980 --> 07:46.060
Se fizermos tudo isso e salvarmos tudo,

07:46.060 --> 07:47.950
ele se compila sem erros, e se voltarmos

07:47.950 --> 07:49.870
aqui, e eu clicar em um projeto como

07:49.870 --> 07:51.310
este, eu recebo informações

07:51.310 --> 07:53.050
inválidas.

07:53.050 --> 07:54.580
Se eu entrar no Olá, ainda

07:54.580 --> 07:56.950
o recebo porque não temos descrição.

07:56.950 --> 07:58.890
Esta é uma descrição.

07:58.890 --> 08:00.180
É claro que ainda o conseguimos,

08:00.180 --> 08:02.940
mas se eu agora também entro em algo nas pessoas, isto funciona

08:02.940 --> 08:05.220
e nós imprimimos isto aqui.

08:05.220 --> 08:09.330
É claro que este é um bom passo na direção certa.

08:09.330 --> 08:10.990
Ainda não estamos totalmente lá.

08:10.990 --> 08:13.330
Como eu disse, podemos melhorar a validação.

08:13.330 --> 08:16.230
Apenas uma coisa que quero fazer imediatamente antes de fazermos

08:16.230 --> 08:20.070
isso, quero limpar todas as entradas depois de clicarmos em ADD PROJECT.

08:20.070 --> 08:22.440
Portanto, quero esvaziar todas as entradas novamente.

08:22.440 --> 08:25.290
Agora para isso, podemos acrescentar um novo método privado,

08:25.290 --> 08:27.043
clearInput ou clearInputs, e lá, podemos

08:28.210 --> 08:32.740
definir este títuloInputElement. valor igual a um fio vazio e

08:32.740 --> 08:34.130
repetir isso também

08:36.200 --> 08:38.980
para as outras entradas.

08:38.980 --> 08:41.960
Portanto, aqui, temos a descriçãoInputElement,

08:41.960 --> 08:44.250
e aqui, temos as pessoasInputElement,

08:44.250 --> 08:48.190
e agora, se chamarmos isto. clearInputs aqui, devemos nos certificar

08:48.190 --> 08:50.200
de que o formulário seja liberado uma vez

08:50.200 --> 08:51.730
que seja submetido.

08:51.730 --> 08:52.870
Portanto, se tentarmos

08:52.870 --> 08:54.380
isso novamente, digite algo aqui,

08:54.380 --> 08:56.230
você verá que está impresso aqui, e o formulário

08:56.230 --> 08:57.740
está limpo.

08:57.740 --> 09:00.720
Com isso, geralmente estou satisfeito com a forma como lidamos

09:00.720 --> 09:03.300
com isso, mas agora quero melhorar a validação e escrever

09:03.300 --> 09:06.970
isso de uma forma mais reutilizável e escalonável.

09:06.970 --> 09:07.840
Como mencionei, sinta-se

09:07.840 --> 09:10.320
definitivamente livre para fazer isto por conta própria primeiro.

09:10.320 --> 09:11.530
Na próxima palestra,

09:11.530 --> 09:12.580
o faremos juntos.
