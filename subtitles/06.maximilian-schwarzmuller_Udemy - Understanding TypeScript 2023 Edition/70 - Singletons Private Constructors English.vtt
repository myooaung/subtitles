WEBVTT

1
00:00:02.260 --> 00:00:04.960
<v ->Now there is one last interesting feature</v>

2
00:00:04.960 --> 00:00:07.020
which I also want to introduce,

3
00:00:07.020 --> 00:00:10.330
and that would be private constructors.

4
00:00:10.330 --> 00:00:13.823
And what's a private constructor and which use does it have?

5
00:00:14.870 --> 00:00:17.700
There is a pattern in object oriented programming

6
00:00:17.700 --> 00:00:20.460
which is called the singleton pattern.

7
00:00:20.460 --> 00:00:23.030
The singleton pattern is about ensuring

8
00:00:23.030 --> 00:00:26.440
that you always only have exactly one instance

9
00:00:26.440 --> 00:00:28.030
of a certain class.

10
00:00:28.030 --> 00:00:30.558
This can be useful in scenarios where you somehow

11
00:00:30.558 --> 00:00:33.000
can't use static methods or properties

12
00:00:33.000 --> 00:00:34.450
or you don't want to,

13
00:00:34.450 --> 00:00:36.440
but at the same time you want to make sure

14
00:00:36.440 --> 00:00:39.600
that you can't create multiple objects based on a class

15
00:00:39.600 --> 00:00:40.730
but that you always

16
00:00:40.730 --> 00:00:44.630
have exactly one object based on a class.

17
00:00:44.630 --> 00:00:47.660
Let's say for our AccountingDepartment

18
00:00:47.660 --> 00:00:51.460
we wanna make sure that we can only create exactly

19
00:00:51.460 --> 00:00:53.320
one object based on this class,

20
00:00:53.320 --> 00:00:56.010
because we have exactly one accounting department

21
00:00:56.010 --> 00:00:57.840
in our entire company.

22
00:00:57.840 --> 00:01:00.260
We might have more than one IT department

23
00:01:00.260 --> 00:01:03.290
but we have exactly one accounting department.

24
00:01:03.290 --> 00:01:05.310
Now to enforce this and to avoid

25
00:01:05.310 --> 00:01:09.020
that we manually call new AccountingDepartment

26
00:01:09.020 --> 00:01:12.260
multiple times, we can turn the constructor

27
00:01:12.260 --> 00:01:14.320
of the AccountingDepartment class

28
00:01:14.320 --> 00:01:17.360
into a private constructor by adding the private keyword

29
00:01:17.360 --> 00:01:18.860
in front of it.

30
00:01:18.860 --> 00:01:20.560
Now what this does is,

31
00:01:20.560 --> 00:01:23.480
it ensures that we can't call new on this.

32
00:01:23.480 --> 00:01:25.160
Here you see I'm getting an error

33
00:01:25.160 --> 00:01:27.620
because the constructor is private

34
00:01:27.620 --> 00:01:30.600
so it's only accessible from inside the class,

35
00:01:30.600 --> 00:01:33.690
which sounds strange because how do we get inside

36
00:01:33.690 --> 00:01:37.920
of the class if we can't create objects based on it anymore.

37
00:01:37.920 --> 00:01:40.490
The answer is, well, static methods.

38
00:01:40.490 --> 00:01:43.610
A static method can be called on the class itself

39
00:01:43.610 --> 00:01:46.250
so you don't have instantiate it for that.

40
00:01:46.250 --> 00:01:49.460
So here we can add a static method which

41
00:01:49.460 --> 00:01:51.340
we could call getInstance,

42
00:01:51.340 --> 00:01:53.260
the name is totally up to you though.

43
00:01:53.260 --> 00:01:56.930
Now getInstance will check if we already have an instance

44
00:01:56.930 --> 00:02:00.090
of this class and if not, return a new one.

45
00:02:00.090 --> 00:02:04.300
For that we can add a new static property instance,

46
00:02:04.300 --> 00:02:06.350
a static private property

47
00:02:06.350 --> 00:02:09.200
so you can put private in front of static

48
00:02:09.200 --> 00:02:12.040
called instance which will be of type AccountingDepartment.

49
00:02:12.040 --> 00:02:16.570
So in there we'll store an AccountingDepartment instance.

50
00:02:16.570 --> 00:02:17.580
So that's what I'm saying here,

51
00:02:17.580 --> 00:02:19.100
I have a static property

52
00:02:19.100 --> 00:02:21.410
which is accessible on the class itself,

53
00:02:21.410 --> 00:02:23.310
but only from inside the class

54
00:02:23.310 --> 00:02:25.960
and the value we store in there will be

55
00:02:25.960 --> 00:02:30.140
of type AccountingDepartment, so of the class itself.

56
00:02:30.140 --> 00:02:33.880
Now we can use this instance property here in getInstance

57
00:02:33.880 --> 00:02:38.880
and check if this.instance is set here inside

58
00:02:39.260 --> 00:02:43.570
of static, if we use this, it will refer to the class itself

59
00:02:43.570 --> 00:02:47.610
and then we can access all other static properties on that.

60
00:02:47.610 --> 00:02:51.963
The alternative to that would be to use the class name.

61
00:02:53.720 --> 00:02:58.450
And now if this is set I want to return this.instance,

62
00:02:58.450 --> 00:03:01.600
or again classname.instance but this inside

63
00:03:01.600 --> 00:03:04.030
of a static method works, it gives us access

64
00:03:04.030 --> 00:03:05.680
to the class itself then,

65
00:03:05.680 --> 00:03:09.370
unlike this in a non static method which gives us access

66
00:03:09.370 --> 00:03:11.590
to the instance with which we're trying to work,

67
00:03:11.590 --> 00:03:13.550
not what we're doing here.

68
00:03:13.550 --> 00:03:15.660
If however we don't make it in here then

69
00:03:15.660 --> 00:03:17.290
we have no instance yet,

70
00:03:17.290 --> 00:03:22.030
then I set this.instance, so this static instance property

71
00:03:22.030 --> 00:03:25.660
equal to new AccountingDepartment,

72
00:03:25.660 --> 00:03:28.630
we can use this from inside here

73
00:03:28.630 --> 00:03:32.030
because now we're inside of this class method,

74
00:03:32.030 --> 00:03:35.250
so here we can access the private constructor

75
00:03:35.250 --> 00:03:37.423
and pass in our ID,

76
00:03:39.630 --> 00:03:41.200
and our reports array

77
00:03:41.200 --> 00:03:44.830
and then return this.instance here.

78
00:03:44.830 --> 00:03:47.010
So now we're either returning the one instance

79
00:03:47.010 --> 00:03:48.220
we might already have,

80
00:03:48.220 --> 00:03:50.970
or if we don't have it yet we create a new one.

81
00:03:50.970 --> 00:03:53.270
But this code, the marked code here,

82
00:03:53.270 --> 00:03:56.377
can only run once because once we have an instance

83
00:03:56.377 --> 00:03:57.850
we make it into we make it into this if block

84
00:03:57.850 --> 00:04:00.370
and we return the existing instance.

85
00:04:00.370 --> 00:04:03.700
So now if you wanna work with the AccountingDepartment,

86
00:04:03.700 --> 00:04:05.940
instead of creating it like this we could call,

87
00:04:05.940 --> 00:04:10.153
const accounting AccountingDepartment.getInstance,

88
00:04:11.646 --> 00:04:13.190
and this returns us a new instance

89
00:04:13.190 --> 00:04:14.850
of the AccountingDepartment.

90
00:04:14.850 --> 00:04:18.190
But if I do this again I will get the same instance as

91
00:04:18.190 --> 00:04:21.103
you will see if I console log accounting,

92
00:04:22.020 --> 00:04:23.570
and accounting2 here.

93
00:04:23.570 --> 00:04:26.550
You will see that the two should be exactly equal,

94
00:04:26.550 --> 00:04:28.253
if we save that and reload,

95
00:04:30.550 --> 00:04:34.110
you see down there are my two AccountingDepartment objects,

96
00:04:34.110 --> 00:04:36.690
they have the same ID, the exact same setup,

97
00:04:36.690 --> 00:04:39.720
they are the same object, the same instance

98
00:04:39.720 --> 00:04:41.530
because we only have one instance

99
00:04:41.530 --> 00:04:44.340
with this singleton pattern which is created

100
00:04:44.340 --> 00:04:46.590
with the help of the private keyword in front

101
00:04:46.590 --> 00:04:47.900
of the constructor.

102
00:04:47.900 --> 00:04:51.000
Now this is, arguably, an approach which

103
00:04:51.000 --> 00:04:52.490
you won't use all the time.

104
00:04:52.490 --> 00:04:55.010
The singleton pattern can sometimes be useful,

105
00:04:55.010 --> 00:04:56.530
you don't need it all the time,

106
00:04:56.530 --> 00:04:58.700
but it's definitely worth to know about it

107
00:04:58.700 --> 00:05:00.360
because it is something interesting which

108
00:05:00.360 --> 00:05:03.290
you can easily implement with TypeScript thanks

109
00:05:03.290 --> 00:05:04.923
to private constructors.

