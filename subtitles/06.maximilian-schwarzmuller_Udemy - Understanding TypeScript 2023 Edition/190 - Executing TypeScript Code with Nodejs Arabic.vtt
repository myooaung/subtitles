WEBVTT

00:02.200 --> 00:03.210
المدرب: لنبدأ مع

00:03.210 --> 00:05.520
TypeScript و Node. js ولهذا ، فأنا

00:05.520 --> 00:08.660
في مجلد جديد فارغ هنا ، فقط بعض ملفات

00:08.660 --> 00:10.610
التكوين هناك ، ودعنا نبدأ

00:10.610 --> 00:12.140
بكل بساطة.

00:12.140 --> 00:15.020
دعونا نضيف التطبيق. ts هنا.

00:15.020 --> 00:17.370
يمكنك تسمية ما تريد ، بالطبع.

00:17.370 --> 00:19.180
وهناك ، دعنا نكتب بعض التعليمات البرمجية

00:19.180 --> 00:22.220
التي نريد تنفيذها باستخدام Node. js ، ولكن حيث نريد

00:22.220 --> 00:24.980
استخدام TypeScript.

00:24.980 --> 00:26.350
قد يكون النص البسيط

00:26.350 --> 00:28.910
هو أننا نتحكم فقط في شيء ما.

00:28.910 --> 00:30.450
يعمل هذا في المتصفح ، ولكنه

00:30.450 --> 00:33.350
يعمل أيضًا مع Node. شبيبة.

00:33.350 --> 00:35.840
تأكد الآن من حصولك على Node. js مثبتة ، والتي يجب

00:35.840 --> 00:37.220
أن تكون لديك بالتأكيد

00:37.220 --> 00:38.740
إذا تابعت هذه الدورة التدريبية

00:38.740 --> 00:42.077
لأننا استخدمناها في NPM مع Webpack ومع العديد من الأدوات

00:42.077 --> 00:43.910
والمكتبات الأخرى التي قمنا

00:43.910 --> 00:46.710
بتثبيتها مع NPM بالفعل.

00:46.710 --> 00:48.480
لذلك يجب أن يكون لديك Node. شبيبة مثبتة.

00:48.480 --> 00:50.300
وإذا قمت بتثبيته ، يمكنك

00:50.300 --> 00:52.130
تنفيذ هذا الملف إذا قمت بترجمته

00:52.130 --> 00:54.110
إلى JavaScript.

00:54.110 --> 00:57.000
لذلك إذا قمت بتشغيل تطبيق tsc. ts ، وأنا أنتج

00:57.000 --> 01:00.360
تطبيقي. لذلك ، يمكنني تنفيذ

01:00.360 --> 01:02.890
ذلك باستخدام العقدة وأقوم بطباعة

01:02.890 --> 01:04.503
شيء ما هنا.

01:06.550 --> 01:08.990
الآن عندما أحذف التطبيق. js وأحاول تنفيذ

01:08.990 --> 01:11.890
التطبيق. ts مع العقدة ، سترى

01:11.890 --> 01:13.810
شيئًا غريبًا.

01:13.810 --> 01:15.070
هذا أيضا يعمل.

01:15.070 --> 01:18.010
إذا كانت العقدة قادرة على تنفيذ TypeScript؟

01:18.010 --> 01:20.380
لا ليس كذلك وهذا مهم حقًا.

01:20.380 --> 01:23.210
إنه لا يهتم فقط بامتداد الملف ، ولكن مهما

01:23.210 --> 01:25.260
وجد في الملف فإنه يعامله على

01:25.260 --> 01:27.420
أنه JavaScript عادي وهذا هنا

01:27.420 --> 01:30.180
لا يستخدم أي ميزات TypeScript ، لذلك

01:30.180 --> 01:31.370
فهو يعمل.

01:31.370 --> 01:34.340
يتغير ذلك إذا أضفنا محتوى مختلفًا هنا.

01:34.340 --> 01:36.400
دعنا نقول بدلاً من ذلك أن لدينا

01:36.400 --> 01:37.370
متغير عمر ، وهو

01:37.370 --> 01:40.080
رقم ثم هنا قمت بتعيين هذا على 30 ، ثم أعتمد

01:40.080 --> 01:42.250
على التحكم. سجل العمر هنا.

01:42.250 --> 01:44.840
هذا بالطبع هو رمز TypeScript صالح.

01:44.840 --> 01:46.790
ولكن إذا حاولنا تنفيذ ذلك باستخدام العقدة

01:46.790 --> 01:48.370
، فسترى أننا حصلنا على خطأ.

01:48.370 --> 01:52.450
لذا فإن العقدة غير قادرة على تحليل وتجميع TypeScript

01:52.450 --> 01:54.210
، فهي تتعامل فقط مع كل ملف

01:54.210 --> 01:56.960
تقوم بتنفيذه على أنه JavaScript.

01:56.960 --> 01:59.030
وإذا كنت لا تستخدم أيًا من ميزات TypeScript

01:59.030 --> 02:01.100
في الملف ، فحينئذٍ تعمل.

02:01.100 --> 02:02.950
ولكن إذا قمت بذلك ، فلن تنجح.

02:02.950 --> 02:04.920
يجب عليك دائمًا ترجمة الملف

02:04.920 --> 02:06.550
إلى JavaScript أولاً ،

02:06.550 --> 02:08.960
ثم تنفيذ ملف JavaScript ، الذي يحتوي

02:08.960 --> 02:11.350
على كود JavaScript صالح فقط.

02:11.350 --> 02:13.030
من المهم حقًا فهم ذلك.

02:13.030 --> 02:15.890
العقدة لا تنفذ TypeScript.

02:15.890 --> 02:20.710
الآن يمكنك بالفعل تثبيت حزمة ، ts-node ، والتي تمنحك في النهاية مترجم

02:20.710 --> 02:24.230
TypeScript هذا ، جنبًا إلى جنب مع العقدة القابلة

02:24.230 --> 02:27.880
للتنفيذ ، كما يمكنك القول ، حتى تتمكن من تثبيت أداة

02:27.880 --> 02:30.320
على مستوى العالم ، والتي يمكنك استخدامها

02:30.320 --> 02:34.170
لتشغيل ملفات TypeScript فقط مثل هذا.

02:34.170 --> 02:35.210
ولكن وراء الكواليس

02:35.210 --> 02:37.620
، ستقوم فقط بالتجميع نيابة عنك وتنفيذ

02:37.620 --> 02:39.440
كود الترجمة.

02:39.440 --> 02:42.610
لذلك فهو يجمع بشكل أساسي بين tsc وخطوة العقدة

02:42.610 --> 02:43.890
في خطوة واحدة.

02:43.890 --> 02:46.060
لذلك ، إنها حزمة يمكنك استخدامها

02:46.060 --> 02:49.150
ولكن في حين أن هذا قد يكون جيدًا للتطوير والإنتاج

02:49.150 --> 02:52.330
ولخدمة ملفاتك حقًا على بعض خوادم الويب ، على

02:52.330 --> 02:54.850
بعض مضيف الويب ، ربما لا يكون هذا مثاليًا

02:54.850 --> 02:56.950
، لأن وجود خطوة التجميع الإضافية

02:56.950 --> 02:59.910
هذه في كل مرة يتم تنفيذ الكود الخاص بك ، ببساطة

02:59.910 --> 03:02.160
يضيف القليل من النفقات الإضافية

03:02.160 --> 03:12.090
، وهو أمر جيد أثناء التطوير ، ولكن ربما لا تريده عندما يكون كودك جاهزًا للإنتاج وتريد حقًا تقديمه في مكان ما.

03:12.090 --> 03:13.260
لذلك في هذه الوحدة

03:13.260 --> 03:15.950
، لن نستخدم ts-node ولن نحاول تنفيذ أي

03:15.950 --> 03:18.180
ملفات TypeScript مع العقدة.

03:18.180 --> 03:21.570
بدلاً من ذلك ، سأعرض لك إعدادًا يمكننا استخدامه لبناء

03:21.570 --> 03:24.520
تطبيق ويب سريع للعقدة أو بقية واجهة برمجة التطبيقات

03:24.520 --> 03:26.150
هنا ، فقط مع TypeScript ومجمع

03:26.150 --> 03:31.343
TypeScript وعقدة الفانيليا.

03:31.343 --> 03:31.343
شبيبة.
