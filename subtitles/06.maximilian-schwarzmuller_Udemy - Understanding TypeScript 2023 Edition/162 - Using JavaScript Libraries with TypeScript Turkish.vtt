WEBVTT

00:02.120 --> 00:06.770
-: Şimdi çok popüler bir yardımcı kütüphane olan Lodash ile başlayacağız.

00:06.770 --> 00:09.840
Şimdi burada öğrenecekleriniz temel olarak kullanmak istediğiniz

00:09.840 --> 00:13.250
herhangi bir JavaScript kütüphanesi için örnek teşkil eder.

00:13.250 --> 00:17.430
Bunun Lodash, jQuery veya başka bir şey olması fark etmez.

00:17.430 --> 00:19.510
Şimdi bu noktada küçük bir not, React ve TypeScript

00:19.510 --> 00:21.640
ile nasıl çalışacağınızla ilgileniyorsanız

00:21.640 --> 00:26.718
veya Node diyelim.

00:26.718 --> 00:26.718
js. ve

00:26.718 --> 00:31.350
Express ve TypeScript ile ilgili modüllerim var, çünkü orada TypeScript

00:31.350 --> 00:33.760
ile eklemekten biraz daha fazlasını

00:33.760 --> 00:35.730
öğreneceksiniz.

00:35.730 --> 00:40.470
Ancak Lodash, jQuery gibi daha basit kütüphaneler için burada

00:40.470 --> 00:43.010
işe yarayacak bir yaklaşım var.

00:43.010 --> 00:45.340
Bu yüzden projemizde Lodash kullanmak istiyoruz.

00:45.340 --> 00:48.460
Lodash elbette bir JavaScript kütüphanesidir.

00:48.460 --> 00:50.800
Kullanmak için TypeScript'e ihtiyacımız

00:50.800 --> 00:53.480
yok, herhangi bir JavaScript projesinde kullanabiliriz

00:53.480 --> 00:56.770
ve temel olarak burada Lodash resmi dokümanlarında öğrendiğiniz

00:56.770 --> 00:59.200
gibi yükleyebiliriz.

00:59.200 --> 01:01.400
Eğer npm kullanıyorsanız, ki biz kullanıyoruz,

01:01.400 --> 01:06.477
npm i veya npm install'ı çalıştırabilirsiniz, bu sadece kısa bir formdur, "--save/lodash".

01:07.750 --> 01:10.820
İşte bu örnek projede webpack üretim iş akışı olmadan

01:10.820 --> 01:12.640
sadece geliştirme iş akışı olarak

01:12.640 --> 01:14.180
kullanılıyor.

01:14.180 --> 01:16.570
Orada sadece nmp install dash dash save Lodash komutunu

01:16.570 --> 01:18.607
çalıştırarak bu kütüphaneyi ekleyebiliriz.

01:18.607 --> 01:21.700
Ve bu şimdi onu bu projeye yükleyecek ve webpack

01:21.700 --> 01:23.500
kurulumumuz sayesinde onu

01:23.500 --> 01:27.517
kod dosyalarımıza aktarabilir ve orada kullanabiliriz.

01:27.517 --> 01:30.670
Ve bu, webpack destekli herhangi bir JavaScript Projesinde

01:30.670 --> 01:32.250
de aynı olacaktır.

01:32.250 --> 01:34.990
Eğer webpack kullanmıyorsanız, elbette

01:34.990 --> 01:37.720
CDN'i de kullanabilirsiniz.

01:37.720 --> 01:40.630
Ancak, bu modülde biraz sonra göstereceğim

01:40.630 --> 01:42.390
adımlar yalnızca bir webpack

01:42.390 --> 01:45.130
kurulumunda çalışacaktır.

01:45.130 --> 01:47.730
Yani burada bir webpack kurulumumuz var, şimdi Lodash'ı

01:47.730 --> 01:49.320
yükledik ve şimdi kullanmak istiyorsak,

01:49.320 --> 01:51.510
onu buradan içe aktarabiliriz.

01:51.510 --> 01:55.600
Diyelim ki 'Lodash'tan underscore'u içe aktarabiliriz.

01:55.600 --> 01:57.960
Bu, Lodash yüklendiğinde mevcut olması

01:57.960 --> 01:59.960
gereken bir sözdizimidir.

01:59.960 --> 02:03.057
Ancak, bu şimdi zaten bize bir hata veriyor.

02:03.057 --> 02:06.850
"Lodash modülü için bir bildirim dosyası bulunamadı".

02:06.850 --> 02:09.890
Ve başka bir sorunumuz daha olacak, örneğin bir

02:09.890 --> 02:12.230
diziyi karıştırmak için Lodash kullanmak

02:12.230 --> 02:16.810
istiyorsanız, shuffle'ın altını çizebilir ve ardından bu shuffle

02:16.810 --> 02:20.430
yöntemine basit bir dizi aktarabiliriz.

02:20.430 --> 02:23.110
Shuffle yöntemi Lodash'ın desteklediği bir yöntemdir.

02:23.110 --> 02:26.820
Bunu Lodash'ın resmi dokümantasyonundan öğrenebiliriz.

02:26.820 --> 02:29.056
Orada, "shuffle" kelimesini aratırsanız,

02:29.056 --> 02:32.370
bu yöntemle bir diziyi karıştırabileceğinizi öğrenirsiniz.

02:32.370 --> 02:37.010
Yani, bir bakıma işe yaraması gerekiyor, ancak sizin de anlayabileceğiniz

02:37.010 --> 02:39.480
gibi gerçekten bu şekilde çalışmıyor.

02:39.480 --> 02:43.058
Şimdi burada webpack sunucumu başlatırsam, CDN'in

02:43.058 --> 02:45.890
bize bir hata verdiğini göreceğiz.

02:45.890 --> 02:47.077
Ve yine bize "Lodash

02:47.077 --> 02:50.940
modülü için bir bildirim dosyası bulamadığını" söylüyor.

02:50.940 --> 02:54.720
Yani, bu gerçekten olması gerektiği gibi çalışmıyor.

02:54.720 --> 02:57.610
Şimdi bununla ilgili sorun şu ki, Lodash basit

02:57.610 --> 02:59.930
bir JavaScript kütüphanesidir.

02:59.930 --> 03:02.250
Vanilya JavaScript ile oluşturulmuştur

03:02.250 --> 03:05.150
ve vanilya JavaScript için geliştirilmiştir.

03:05.150 --> 03:08.530
Çok fazla bağımlılığımızın olduğu node modüllerine gidersek

03:08.530 --> 03:10.280
bunu doğrulayabiliriz, çünkü webpack'in

03:10.280 --> 03:12.450
çok fazla bağımlılığı var ve orada bağımlılıkları

03:12.450 --> 03:14.220
var.

03:14.220 --> 03:17.010
Ama burada, Lodash'ı ararsak, işte

03:17.010 --> 03:17.930
burada.

03:17.930 --> 03:21.330
Ve orada bir sürü JavaScript dosyası olduğunu gördüğümüz gibi genişletiyoruz,

03:21.330 --> 03:22.750
değil mi?

03:22.750 --> 03:26.380
Ve bu tüm Lodash kaynak kodlarında mevcuttur.

03:26.380 --> 03:30.010
Bir sürü JavaScript kodu var ama kesinlikle TypeScript kodu yok.

03:30.010 --> 03:31.750
Şimdi bunda ne sorun var?

03:31.750 --> 03:35.550
Sorun, TypeScript'in bu pakette ne olduğunu

03:35.550 --> 03:37.070
anlamamasıdır.

03:37.070 --> 03:41.020
Lodash'ın hangi yöntemleri dışa aktardığını anlamıyor.

03:41.020 --> 03:43.480
Şimdi tsconfig'e gidersek aslında çalıştığını

03:43.480 --> 03:45.500
göreceksiniz. json dosyası.

03:45.500 --> 03:48.740
Ve hata oluştuğunda bir çıktı verdiğimizden emin oluruz.

03:48.740 --> 03:52.650
Bu nedenle, "noEmitOnError" değerini "false" olarak değiştirirsek,

03:52.650 --> 03:55.770
bir şey hata verirse yeni çıktı yayarız.

03:55.770 --> 03:57.600
Şimdilik, bunu tekrar başlatın,

03:57.600 --> 04:00.230
sonunda bize aynı hatayı verecektir, bu yüzden

04:00.230 --> 04:02.160
bunu hala göreceğiz.

04:02.160 --> 04:05.090
Ancak bu sayfayı yeniden yüklersem, aslında

04:05.090 --> 04:07.120
burada bir çıktı alacaksınız.

04:07.120 --> 04:08.922
Burada alttaki hatayı görmezden gelebilirsiniz,

04:08.922 --> 04:12.580
karıştırılmış dizi olan bir çıktı göreceksiniz.

04:12.580 --> 04:14.920
Görüyorsunuz, her yeniden yüklediğimde farklı görünüyor.

04:14.920 --> 04:16.530
Ve bu çok ilginç.

04:16.530 --> 04:19.770
Lodash'ın çalıştığını kanıtlar, bu kodun doğru

04:19.770 --> 04:21.280
olduğunu kanıtlar.

04:21.280 --> 04:24.170
Ancak ne yazık ki TypeScript bunu anlamaz ve anlayamaz

04:24.170 --> 04:28.400
çünkü Lodash, TypeScript değil JavaScript kullanır.

04:28.400 --> 04:31.220
Şimdi sorun şu ki, Lodash'ın TypeScript sürümü

04:31.220 --> 04:34.080
yok, bu yüzden bununla yaşamak zorundayız.

04:34.080 --> 04:37.220
Ve bu oldukça sık karşılaşacağınız bir senaryodur.

04:37.220 --> 04:39.365
Belirli bir üçüncü taraf kütüphanesini kullanmak

04:39.365 --> 04:42.270
istiyorsunuz ve bu kütüphane yalnızca JavaScript için geliştirilmiş

04:42.270 --> 04:44.210
ve bu nedenle böyle hatalar alıyorsunuz.

04:44.210 --> 04:46.060
Bu can sıkıcı bir durum çünkü teoride elbette

04:46.060 --> 04:47.430
bunu kullanabiliriz.

04:47.430 --> 04:49.630
TypeScript, JavaScript üzerine kuruludur.

04:49.630 --> 04:53.160
Bir TypeScript projesinde herhangi bir JavaScript Kütüphanesini kullanabiliriz,

04:53.160 --> 04:56.150
tek yapmamız gereken onu TypeScript'e çevirmektir.

04:56.150 --> 04:58.890
Ve şükürler olsun ki bu mümkün.

04:58.890 --> 05:02.564
Şimdi bu ayarı açmama izin verin, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Size TypeScript'e Lodash'ı ve neler sunduğunu

05:07.200 --> 05:10.053
nasıl anlatabileceğimizi göstereyim.

05:11.140 --> 05:13.662
Üçüncü taraf bir kütüphanenin sözde

05:13.662 --> 05:16.250
türlerini yükleyebilirsiniz.

05:16.250 --> 05:20.050
Lodash türleri için arama yaparsanız, burada "@types/lodash"

05:20.050 --> 05:24.140
olarak adlandırılan bir npm paketi bulacaksınız.

05:24.140 --> 05:26.440
Orada ayrıca bir saniye içinde çalışacak olan install

05:26.440 --> 05:28.120
komutunu da göreceksiniz.

05:28.120 --> 05:30.580
Ancak ayrıntılara inerseniz, github deposuna

05:30.580 --> 05:32.220
da bir bağlantı bulursunuz.

05:32.220 --> 05:36.320
Her türlü üçüncü taraf kütüphanesi için tonlarca çeviri

05:36.320 --> 05:39.260
içeren büyük bir depo olan DefinitelyTyped'e

05:39.260 --> 05:40.820
bağlanır.

05:40.820 --> 05:43.120
İşte Lodash klasöründeyiz.

05:43.120 --> 05:46.590
Ve orada sözde bulursunuz. dts dosyaları.

05:46.590 --> 05:50.180
Yani sadece . ama . dts.

05:50.180 --> 05:53.460
Bunlar sözde bildirim dosyalarıdır, yani herhangi

05:53.460 --> 05:55.760
bir gerçek mantık içermezler, ancak

05:55.760 --> 05:58.750
shuffle . dts dosyası, TypeScript'e

05:58.750 --> 06:01.848
yönelik talimatlar içerirler.

06:01.848 --> 06:05.200
Temel olarak TypeScript'e bir şeyin nasıl çalıştığını

06:05.200 --> 06:08.720
ve bu pakete nelerin dahil olduğunu söylerler.

06:08.720 --> 06:10.700
Ve bu konuda daha fazla bilgi edinmek için

06:10.700 --> 06:14.280
burada farklı alt klasörlerdeki farklı dosyaları inceleyebilirsiniz.

06:14.280 --> 06:17.717
Yani sonuçta bu dosyalar basitçe düz JavaScript'ten

06:17.717 --> 06:21.750
TypeScript'e bir çeviri sağlar.

06:21.750 --> 06:23.860
Çalışan herhangi bir mantık içermezler, ancak

06:23.860 --> 06:26.950
bu kütüphanenin birlikte çalıştığı türleri tanımlarlar.

06:26.950 --> 06:30.010
Kullandığınız türleri, bir yöntemi çağırdığınızda

06:30.010 --> 06:32.490
geri aldığınız türleri vb. tanımlarlar.

06:32.490 --> 06:35.410
Böyle de yazabilirsiniz. dts dosyalarını kendiniz oluşturabilirsiniz

06:35.410 --> 06:38.510
ve eğer ilgilendiğiniz şey buysa resmi doküman türleri bu konuda

06:38.510 --> 06:40.470
bir kılavuz sağlar.

06:40.470 --> 06:42.110
Ancak kendi proje türleriniz için

06:42.110 --> 06:43.160
bunu yapmak zorunda değilsiniz,

06:43.160 --> 06:45.820
çünkü TypeScript kodları yazıyorsanız bunu elbette

06:45.820 --> 06:48.110
yalnızca TypeScript anlar.

06:48.110 --> 06:50.310
Ancak, herhangi bir TypeScript kodu olmadan

06:50.310 --> 06:53.840
JavaScript ile yazılmış üçüncü taraf bir kütüphane ile çalışıyorsanız

06:53.840 --> 06:56.860
veya yerleşik . dts dosyaları, JavaScript

06:56.860 --> 06:59.950
ile yazılmış olsalar bile bazı üçüncü taraf kütüphaneler

06:59.950 --> 07:02.240
tarafından gönderilir, ancak Lodash

07:02.240 --> 07:03.960
bunu yapmaz.

07:03.960 --> 07:06.890
Dolayısıyla, yerleşik çeviri dosyaları içermeyen

07:06.890 --> 07:08.330
ve TypeScript'te yerel

07:08.330 --> 07:11.180
olarak yazılmamış bir kütüphaneyle çalışıyorsanız,

07:11.180 --> 07:15.760
bu tür bir tür paketi kullanmak çözümdür.

07:15.760 --> 07:20.760
Bu yüzden burada "npm install --save@types/Lodash" komutunu çalıştırıyoruz.

07:21.860 --> 07:24.600
Aslında "save-dev" komutunu da çalıştırabilirsiniz,

07:24.600 --> 07:27.920
çünkü dev gerçekten sadece geliştirme sırasında gerekli olan

07:27.920 --> 07:29.230
bir bağımlılıktır, çünkü

07:29.230 --> 07:30.980
o zaman kod zaten JavaScript aracılığıyla

07:30.980 --> 07:32.360
derlenir.

07:32.360 --> 07:36.130
Ve bu şimdi onu anlamak için TypeScript'ten

07:36.130 --> 07:38.060
bu çeviriyi yükler.

07:38.060 --> 07:40.630
Ve görüyorsunuz, bu yüklenir yüklenmez,

07:40.630 --> 07:42.510
bu hata ortadan kalkıyor.

07:42.510 --> 07:46.220
Ve şimdi npm start'ı yeniden başlatırsam, hatanın burada da geri

07:46.220 --> 07:48.270
gelmeyeceğini göreceksiniz.

07:48.270 --> 07:51.640
Şimdi hem derlemede hem de tarayıcıda herhangi

07:51.640 --> 07:55.190
bir hata olmadan çalıştığını görüyorsunuz.

07:55.190 --> 07:57.270
Teknik olarak daha önce de çalışıyordu,

07:57.270 --> 07:59.160
ancak şimdi çeviri ile TypeScript'i

07:59.160 --> 08:01.580
de kullanabiliyoruz.

08:01.580 --> 08:05.493
Ve örneğin şimdi tüm tamamlamaları burada, IDE'de de alabiliyoruz.

08:05.493 --> 08:10.070
Buraya bir nokta yazarsam, kullanabileceğim Lodash yöntemlerini görüyorum.

08:10.070 --> 08:13.930
Bu nedenle bu, bir TypeScript projesinde normal, normal, vanilya

08:13.930 --> 08:16.400
JavaScript kütüphanelerini kullanmanıza

08:16.400 --> 08:19.370
ve yine de harika destek, harika otomatik tamamlama

08:19.370 --> 08:21.177
almanıza ve hatalardan kaçınmanıza

08:21.177 --> 08:24.220
olanak tanıyan çok önemli bir bilgidir ve kesinlikle

08:24.220 --> 08:28.490
bilmeniz gereken bir şeydir.

08:28.490 --> 08:33.030
Bu tranlastion tipi paketlerin yardımıyla, diyebiliriz

08:33.030 --> 08:33.990
ki.

08:33.990 --> 08:38.990
Ve her zaman "@types" olarak adlandırılan bu paketler ve ardından paket

08:39.290 --> 08:40.860
adı, bunlar temelde orada

08:40.860 --> 08:45.270
bulabileceğiniz tüm popüler üçüncü taraf kütüphaneleri için

08:45.270 --> 08:46.730
mevcuttur.

08:46.730 --> 08:49.960
Her zaman kütüphane adını ve ardından örneğin jQuery

08:49.960 --> 08:51.690
türlerini arayabilirsiniz

08:51.690 --> 08:54.400
ve böyle bir giriş bulmalısınız.

08:54.400 --> 08:57.350
İşte vanilla JavaScript kütüphanelerindeki tiplerle

08:57.350 --> 08:59.373
bu şekilde çalışabilirsiniz.
