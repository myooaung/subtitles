WEBVTT

00:02.100 --> 00:04.890
Instructeur : Pour comprendre les classes, il faut comprendre

00:04.890 --> 00:07.040
la programmation orientée objet.

00:07.040 --> 00:10.050
En fonction de votre niveau de connaissances et si vous

00:10.050 --> 00:12.560
avez travaillé avec le JavaScript moderne

00:12.560 --> 00:15.340
et peut-être aussi avec d'autres langages de programmation,

00:15.340 --> 00:18.320
vous savez peut-être à quoi servent les classes et ce

00:18.320 --> 00:22.270
qu'est la programmation orientée objet (OOP).

00:22.270 --> 00:24.570
Vous pouvez donc également sauter ce cours pour

00:24.570 --> 00:27.720
passer directement aux parties où nous écrivons du code.

00:27.720 --> 00:29.330
Sinon, restez avec moi car

00:29.330 --> 00:32.200
il est important de comprendre cela.

00:32.200 --> 00:35.240
L'idée derrière la programmation orientée objet, et les

00:35.240 --> 00:38.550
classes seront importantes pour cela comme vous le verrez, est

00:38.550 --> 00:41.630
que vous travaillez avec des entités réelles dans votre code,

00:41.630 --> 00:43.110
pourrait-on dire.

00:43.110 --> 00:47.370
Pour que vous travailliez avec des choses dans votre code avec des objets

00:47.370 --> 00:52.110
qui ressemblent autant que possible à des objets de la vie réelle, au moins pour

00:52.110 --> 00:54.410
faciliter le raisonnement de votre code

00:54.410 --> 00:56.250
en tant que développeur.

00:56.250 --> 00:59.150
Par exemple, nous pouvons être en train de créer une boutique

00:59.150 --> 01:01.270
en ligne et avoir une liste de produits.

01:01.270 --> 01:05.190
Nous pourrions donc vouloir travailler avec un objet liste de produits, qui possède

01:05.190 --> 01:08.140
tout ce dont nous avons besoin pour gérer une liste de produits.

01:08.140 --> 01:11.570
Une méthode pour ajouter des produits à la liste des produits principaux,

01:11.570 --> 01:13.370
la liste elle-même.

01:13.370 --> 01:15.670
Il peut s'agir, par exemple, d'un objet

01:15.670 --> 01:18.360
responsable de l'affichage et de la gestion d'une

01:18.360 --> 01:19.540
liste de produits provenant

01:19.540 --> 01:22.840
d'un service ou d'une base de données.

01:22.840 --> 01:25.530
Ce produit contient donc toute la logique de rendu,

01:25.530 --> 01:27.260
de récupération et de gestion.

01:27.260 --> 01:29.420
Ça, c'est une liste de produits.

01:29.420 --> 01:32.510
Dans le cadre de notre programme et du site web que nous construisons, nous

01:32.510 --> 01:33.870
pourrions également avoir besoin

01:33.870 --> 01:36.000
de travailler avec le produit individuel.

01:36.000 --> 01:39.540
Ainsi, nous pourrions également vouloir un objet ou plusieurs objets,

01:39.540 --> 01:40.960
un pour chaque produit qui est

01:40.960 --> 01:43.930
responsable de la gestion du produit unique.

01:43.930 --> 01:47.180
Il peut contenir et rendre les détails de ce produit, peut-être

01:47.180 --> 01:49.830
nous permettre de l'ajouter à un panier, des choses

01:49.830 --> 01:51.260
comme ça.

01:51.260 --> 01:54.900
Ainsi, lorsque nous voulons dessiner l'interface utilisateur à l'écran, nous

01:54.900 --> 01:57.010
voulons gérer cela par le biais de JavaScript

01:57.010 --> 01:58.740
et donc de TypeScript, puis nous pourrions

01:58.740 --> 02:00.550
mettre en œuvre cela avec une liste de produits

02:00.550 --> 02:02.970
et un objet produit qui contient la logique pour gérer

02:02.970 --> 02:05.370
les données sous-jacentes, mais aussi pour rendre

02:05.370 --> 02:07.760
le contenu à l'écran.

02:07.760 --> 02:10.010
Et bien sûr, ces deux objets seraient

02:10.010 --> 02:11.940
donc en quelque sorte liés.

02:11.940 --> 02:14.790
Nous pouvons également avoir un objet panier sur notre écran,

02:14.790 --> 02:16.410
qui est responsable du rendu et de la

02:16.410 --> 02:18.040
gestion de la carte d'achat.

02:18.040 --> 02:20.380
C'est bien sûr aussi lié au produit.

02:20.380 --> 02:22.930
Il contient donc toute la logique dont nous avons

02:22.930 --> 02:24.880
besoin pour rendre notre carte d'achat,

02:24.880 --> 02:27.240
passer des commandes, communiquer avec le serveur,

02:27.240 --> 02:28.073
etc.

02:28.073 --> 02:31.190
Ce serait donc une façon de penser à l'application

02:31.190 --> 02:33.010
que nous construisons.

02:33.010 --> 02:35.590
Comment nous pourrions le diviser en morceaux logiques

02:35.590 --> 02:37.670
qui ont un sens pour nous, les humains.

02:37.670 --> 02:40.320
Et dans le code de TypeScript et JavaScript, dans la plupart

02:40.320 --> 02:42.920
des langages de programmation modernes, cela est activement

02:42.920 --> 02:46.750
pris en charge parce que nous avons des objets qui sont des structures de données

02:46.750 --> 02:48.900
plus complexes qui détiennent des propriétés

02:48.900 --> 02:50.640
et des méthodes.

02:50.640 --> 02:53.340
Et bien sûr, nous avons aussi cela en JavaScript.

02:53.340 --> 02:57.310
Mais nous pouvons aussi avoir des cours qui nous aident à le faire.

02:57.310 --> 02:59.100
Maintenant, quelle est l'idée derrière les cours ?

02:59.100 --> 03:00.740
Et que sont les instances ?

03:00.740 --> 03:02.030
Lorsque nous obtenons

03:02.030 --> 03:04.690
ces objets et que nous suivons cette approche orientée

03:04.690 --> 03:07.500
objet, nous pouvons envisager de diviser notre application

03:07.500 --> 03:11.130
ou notre logique applicative en de tels objets qui gèrent des parties

03:11.130 --> 03:13.750
de notre logique.

03:13.750 --> 03:17.000
Maintenant, lié à l'idée d'utiliser ces objets qui

03:17.000 --> 03:19.340
bien sûr existent en JavaScript, nous

03:19.340 --> 03:23.910
pouvons utiliser des objets comme l'idée d'avoir des classes.

03:23.910 --> 03:27.470
Les objets sont les choses concrètes avec lesquelles nous travaillons dans notre code.

03:27.470 --> 03:30.380
Les structures de données que nous utilisons pour stocker des données

03:30.380 --> 03:33.450
pour stocker des méthodes pour exécuter des méthodes sur.

03:33.450 --> 03:36.570
Les classes sont des modèles d'objets.

03:36.570 --> 03:40.880
Les classes nous permettent de définir l'apparence des objets, les données qu'ils

03:40.880 --> 03:42.230
doivent contenir, les méthodes

03:42.230 --> 03:44.070
qu'ils doivent avoir, afin que nous

03:44.070 --> 03:48.240
puissions facilement construire des objets basés sur ces classes.

03:48.240 --> 03:51.830
Et nous appelons cela des instances des classes.

03:51.830 --> 03:54.830
Un objet est donc une instance d'une classe s'il est basé

03:54.830 --> 03:56.850
sur une telle classe, de sorte que nous

03:56.850 --> 03:59.900
pouvons rapidement reproduire plusieurs objets avec

03:59.900 --> 04:02.230
la même structure, les mêmes méthodes et basés

04:02.230 --> 04:04.090
sur les mêmes classes.

04:04.090 --> 04:07.280
Les classes nous aident donc à définir l'apparence des objets,

04:07.280 --> 04:10.170
les propriétés et les méthodes qu'ils possèdent, etc.

04:10.170 --> 04:14.920
Les classes existent donc pour accélérer la création d'objets.

04:14.920 --> 04:16.160
Et c'est simplement une alternative

04:16.160 --> 04:20.070
à l'utilisation de la notation littérale des objets que vous connaissez déjà.

04:20.070 --> 04:21.330
Ils facilitent simplement les choses.

04:21.330 --> 04:24.620
Les classes facilitent simplement la création de plusieurs

04:24.620 --> 04:26.900
objets qui ont généralement la même structure

04:26.900 --> 04:28.030
et les mêmes méthodes,

04:28.030 --> 04:31.500
et qui ne diffèrent que par les détails exacts des données qui y sont

04:31.500 --> 04:32.780
stockées.

04:32.780 --> 04:34.540
Disons que nous avons plusieurs personnes

04:34.540 --> 04:36.670
que nous voulons représenter par des objets.

04:36.670 --> 04:39.330
Chaque personne peut avoir un nom et un âge,

04:39.330 --> 04:40.830
les valeurs diffèrent, mais

04:40.830 --> 04:43.310
la structure générale est la même.

04:43.310 --> 04:44.500
C'est donc la théorie.

04:44.500 --> 04:46.113
Voyons cela en pratique.
