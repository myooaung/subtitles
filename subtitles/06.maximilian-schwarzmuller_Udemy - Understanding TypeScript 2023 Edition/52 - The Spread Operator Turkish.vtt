WEBVTT

00:02.250 --> 00:04.530
Eğitmen: Ayrıca diziler ve nesnelerle

00:04.530 --> 00:09.240
ilgili yararlı özellikler ve dizilerde ve nesnelerde depolanan

00:09.240 --> 00:13.600
verileri nasıl alabileceğimizi de öğrendik.

00:13.600 --> 00:17.180
Şimdi, bunun için buraya yeni bir dizi ekleyelim, diyelim ki

00:17.180 --> 00:19.880
hobiler ve bu bir string dizisi olabilir.

00:22.520 --> 00:26.700
Burada spor ve yemek pişirme gibi ve şimdi açıkçası

00:26.700 --> 00:31.700
öğeleri burada indekse göre alabiliriz, örneğin bunun

00:31.810 --> 00:33.030
gibi.

00:33.030 --> 00:36.150
Ancak, bu temel JavaScript şeylerini bilmelisiniz.

00:36.150 --> 00:40.310
Yeni Nesil JavaScript, bir dizinin tüm değerlerini çıkarmak

00:41.172 --> 00:43.910
istiyorsak güzel bir özellik sunar.

00:43.910 --> 00:44.990
Buna ne zaman ihtiyacın olabilir ki?

00:44.990 --> 00:48.670
Diyelim ki aktif hobileriniz var ve bu benim hobi

00:48.670 --> 00:53.670
olarak yürüyüş yaptığım bir dizi ve şimdi spor ve yemek pişirmeyi

00:54.200 --> 00:56.510
de eklemek istiyorum.

00:56.510 --> 00:58.960
Şimdi push'u çağırarak aktif hobilere bir öğe

00:58.960 --> 01:01.290
ekleyebiliriz, bu arada bir sabite nasıl push

01:01.290 --> 01:05.620
yapabileceğimi merak ediyorsanız, dizilerin nesne olduğunu ve nesnelerin referans

01:05.620 --> 01:08.130
değerleri olduğunu unutmayın.

01:08.130 --> 01:11.010
Bastığımızda bir belleği değiştiririz ancak adresi değiştirmeyiz.

01:11.010 --> 01:14.150
Bu size bir şey anlatmıyorsa, bu konuyla ilgili olarak

01:14.150 --> 01:17.390
bu derse eklediğim ek kaynakları kontrol edin, o zaman bu

01:17.390 --> 01:20.170
örneğe geri dönelim, buraya push yapabiliriz, ancak

01:20.170 --> 01:24.120
push, hobileri push yaparsak, hobileri diziye yeni bir dizi olarak

01:24.120 --> 01:27.540
ekleyeceğiz, yani yeni bir iç içe diziler olarak.

01:27.540 --> 01:30.920
Hangi türler aslında bunu algılar, bana bir string dizisini

01:30.920 --> 01:33.690
bir string dizisine eklemek istersem, bunun

01:33.690 --> 01:36.143
uygun olmadığını söyler.

01:37.110 --> 01:40.390
Bunun yerine push tek bir değer alır, böylece

01:40.390 --> 01:44.450
hobileri sıfır olarak iletebiliriz, aslında push sınırsız

01:44.450 --> 01:47.450
sayıda argüman bile alır, böylece birden

01:47.450 --> 01:51.240
fazla öğeyi aynı anda sırayla itebiliriz.

01:51.240 --> 01:54.013
Ancak bu biraz zahmetlidir ve Spread Operatörünün devreye girdiği

01:54.013 --> 01:54.890
yer burasıdır.

01:54.890 --> 01:57.700
Şuna benziyor, üç nokta ve evet bu garip görünüyor

01:57.700 --> 02:00.850
ama bu [Hypescript?] tarafından desteklenen geçerli

02:00.850 --> 02:04.770
bir JavaScript Operatörüdür. ] ve bundan sonra, sizin de öğreneceğiniz

02:04.770 --> 02:09.547
gibi, yaymak istediğimiz diziyi veya nesneyi belirtiriz veya işaret

02:09.547 --> 02:11.700
ederiz.

02:11.700 --> 02:15.160
Bu işlemin sonunda JavaScript'e, Modern JavaScript'te

02:15.160 --> 02:17.690
bulunan bir Vanilla JavaScript Operatörü

02:17.690 --> 02:21.070
olduğu için, JavaScript'e diziden sonraki tüm öğeleri

02:21.070 --> 02:25.500
çekmesini ve temelde bunları bir değerler listesi olarak eklemesini söyler,

02:25.500 --> 02:28.530
yani bir dizi olarak değil, bir Operatör kullandığınız

02:28.530 --> 02:31.900
yerde tek tek değerlerin bir listesi olarak, örneğin burada

02:31.900 --> 02:33.950
push'a geçirilen argümanların bir

02:33.950 --> 02:36.090
listesi ve şimdi bunu kullanabileceğiniz

02:36.090 --> 02:41.740
bir yer doğrudan yeni bir dizi oluşturduğunuzda.

02:41.740 --> 02:46.220
Orada mevcut bir diziyi bu diziye de yayabilirsiniz.

02:46.220 --> 02:48.950
Yani temel olarak, virgülle ayrılmış bir değerler listesine ihtiyaç

02:48.950 --> 02:51.460
duyduğunuzda, böyle bir virgülle ayrılmış liste elde etmek

02:51.460 --> 02:54.360
için bir dizi ile Yayma Operatörünü kullanabilirsiniz.

02:54.360 --> 02:56.660
Spread Operatörünün amacı budur ve bu nedenle

02:56.660 --> 02:59.230
bir dizinin elemanlarını çekmek için gerçekten

02:59.230 --> 03:00.663
kullanışlıdır.

03:01.860 --> 03:04.380
Yayma Operatörü, sadece diziler üzerinde

03:04.380 --> 03:07.880
değil, nesneler üzerinde de mevcuttur.

03:07.880 --> 03:10.990
Diyelim ki isim anahtarı Max ve h anahtarı 30

03:10.990 --> 03:14.070
olan bir kişimiz var ve şimdi kopyalanmış

03:14.070 --> 03:16.640
bir kişi oluşturmak istiyoruz.

03:16.640 --> 03:19.060
Şimdi eğer bir kişiyi bu şekilde atarsak,

03:19.060 --> 03:22.680
aslında yaptığımız şey bellekteki bu kişi nesnesinin

03:22.680 --> 03:25.000
işaretçisini bu copy person sabitine

03:25.000 --> 03:27.050
kopyalamaktır.

03:27.050 --> 03:30.470
Ve yine, eğer bu size çok şey anlatmıyorsa, ekteki referans değer

03:30.470 --> 03:32.360
kaynaklarımı kontrol edin.

03:32.360 --> 03:36.190
Yani, aslında o nesnenin bir kopyasını oluşturmuyoruz.

03:36.190 --> 03:38.610
Şimdi gerçek bir kopya oluşturmak için nesnelerle

03:38.610 --> 03:40.880
yayma operatörünü kullanabiliriz.

03:40.880 --> 03:43.400
Küme parantezleriyle yeni bir nesne oluşturuyoruz

03:43.400 --> 03:46.510
ve ardından kopyalamak istediğiniz ilk nesnemizle birlikte

03:46.510 --> 03:49.630
üç nokta olan Yayma Operatörünü kullanıyoruz.

03:49.630 --> 03:52.970
Şimdi bunun yaptığı şey tüm öğeleri çıkarmaktır, ancak

03:52.970 --> 03:56.310
elbette burada öğeler bir dizi gibi tek değerler değil,

03:56.310 --> 03:58.630
anahtar değer çiftleridir.

03:58.630 --> 04:00.550
Burada anahtar değer çiftlerimiz var.

04:00.550 --> 04:04.110
Böylece bu anahtar değer çiftleri buradan çıkarılır ve daha

04:04.110 --> 04:08.010
sonra anahtar değer çiftlerine ihtiyaç duyduğunuz her yerde kullanılabilir,

04:08.010 --> 04:12.920
bu da genellikle onları ekleyebileceğiniz bir nesne değildir.

04:12.920 --> 04:15.447
Dolayısıyla, normalde boş olan bu nesneye,

04:15.447 --> 04:19.100
şimdi kişinin anahtar değer çiftleri eklenir ve burada yeni bir

04:19.100 --> 04:21.240
nesne oluşturduğumuz ve onu sadece anahtar

04:21.240 --> 04:23.700
değer çiftlerine eklediğimiz için, sadece

04:23.700 --> 04:27.310
bellekteki nesneyi gösteren işaretçinin değil, orijinal nesnenin

04:27.310 --> 04:30.803
mükemmel bir kopyasını elde ederiz.
