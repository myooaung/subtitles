WEBVTT

00:02.390 --> 00:06.890
ผู้สอน: ตอนนี้สามารถส่งคำขอได้โดยไม่ต้องใช้แพ็คเกจของบุคคลที่สาม

00:06.890 --> 00:10.140
ใน JavaScript สมัยใหม่ในเบราว์เซอร์สมัยใหม่

00:10.140 --> 00:11.910
คุณต้องดึงข้อมูล API

00:11.910 --> 00:13.620
สิ่งนี้สร้างขึ้นในเบราว์เซอร์

00:13.620 --> 00:16.710
เป็นฟังก์ชันที่มีอยู่ทั่วโลก และคุณสามารถใช้เพื่อส่งคำขอไปยัง

00:16.710 --> 00:19.600
URL

00:19.600 --> 00:27.210
ตอนนี้ไม่มีอะไรที่พูดถึง API นี้เลย นอกจากข้อเท็จจริงที่ว่าการจัดการข้อผิดพลาดอาจดูเกะกะเล็กน้อย

00:27.210 --> 00:31.123
แต่ฉันต้องการฝึกฝนการใช้ไลบรารีของบุคคลที่สามด้วย

00:31.960 --> 00:36.070
ดังนั้นเราจะใช้แพ็คเกจ axios ที่เป็นที่นิยมมาก

00:36.070 --> 00:38.510
นี่คือแพ็คเกจที่คุณสามารถใช้ใน

00:38.510 --> 00:43.510
JavaScript และใน TypeScript เพื่อส่งคำขอ HTTP

00:43.880 --> 00:47.263
ดังนั้นเราต้องติดตั้ง axios เพื่อเริ่มใช้งาน

00:48.100 --> 00:51.080
สำหรับสิ่งนี้ในโครงการของเราที่เราสามารถใช้

00:51.080 --> 00:54.150
NPM เพื่อจัดการการพึ่งพา เราสามารถรันการติดตั้ง

00:54.150 --> 00:57.620
npm, dash, dash save axios แบบนี้ และตอนนี้จะติดตั้งแพ็คเกจ

00:57.620 --> 01:00.520
axios

01:00.520 --> 01:04.750
ด้วยการติดตั้งนี้ ตอนนี้เราสามารถนำเข้า axios ที่นี่

01:04.750 --> 01:09.170
นำเข้า axios จาก axios แล้วคุณจะเห็นสิ่งที่น่าสนใจ

01:09.170 --> 01:13.990
ถ้าตอนนี้ฉันเริ่มใช้สิ่งนี้และพิมพ์จุดที่นี่ ฉันจะได้รับการเติมข้อความอัตโนมัติ

01:13.990 --> 01:16.290
ตัวอย่างเช่น คุณมีเมธอด get ที่นี่

01:16.290 --> 01:18.523
ซึ่งจะส่งคำขอรับไปยัง URL

01:19.850 --> 01:23.150
ดังนั้นเราจึงได้รับการสนับสนุน TypeScript ในตัว

01:23.150 --> 01:25.640
และถ้าเราไปที่โมดูลโหนดและเราดูที่แพ็คเกจ

01:25.640 --> 01:29.670
axios นี่คือสิ่งนี้

01:29.670 --> 01:33.970
คุณจะเห็นว่าในนั้นมีดัชนี ไฟล์ .dts

01:33.970 --> 01:38.970
ดังนั้นผู้เขียนไลบรารี axios จึงรวมไลบรารีของพวกเขาไว้ด้วยกันกับแพ็คเกจการแปล

01:39.430 --> 01:43.750
TypeScript

01:43.750 --> 01:47.440
ในนั้นทุกอย่างจะอธิบายให้ TypeScript

01:47.440 --> 01:50.120
แพ็คเกจนี้หรือไฟล์นี้โดยทั่วไปจะอธิบายให้

01:50.120 --> 01:55.600
TypeScript ทราบว่าไลบรารี JavaScript นี้ทำอะไรได้บ้างและประเภทใดที่ใช้

01:55.600 --> 01:59.100
ตอนนี้ห้องสมุดบางแห่งทำเช่นนั้นและ axios เป็นหนึ่งในนั้น

01:59.100 --> 02:02.070
คุณสามารถบอกได้อย่างรวดเร็วว่าห้องสมุดทำสิ่งนี้หรือไม่

02:02.070 --> 02:03.420
หากคุณเริ่มใช้งาน

02:03.420 --> 02:07.930
หากคุณไม่ได้รับการสนับสนุนการเติมข้อความอัตโนมัติและคุณมีข้อผิดพลาดในการคอมไพล์จำนวนมาก

02:07.930 --> 02:10.750
คุณอาจต้องติดตั้งประเภทเพิ่มเติม

02:10.750 --> 02:12.970
หากคุณได้รับการสนับสนุนที่ดีเหมือนที่เราทำที่นี่

02:12.970 --> 02:16.120
และคุณจะไม่พบข้อผิดพลาดในการคอมไพล์หลังจากนั้น

02:16.120 --> 02:20.170
แสดงว่าคุณมีไลบรารีที่มีการแปลในตัวแล้ว

02:20.170 --> 02:23.120
ดังนั้น คุณไม่จำเป็นต้องติดตั้งประเภทพิเศษใดๆ

02:23.120 --> 02:26.240
น่ารู้และเรามีตัวอย่างที่ดีที่นี่

02:26.240 --> 02:27.800
เนื่องจากเรามีการสนับสนุนอยู่แล้ว

02:27.800 --> 02:30.410
เราจึงเริ่มใช้การเข้าถึงได้ทันที

02:30.410 --> 02:34.350
และฉันต้องการส่งคำขอ HTTP ไปยัง URL นี้ทันที

02:34.350 --> 02:37.980
ลองคัดลอก URL นี้แล้วป้อนที่นี่

02:37.980 --> 02:40.220
และฉันจะป้อนมันระหว่าง backticks

02:40.220 --> 02:42.440
เพื่อสร้างเทมเพลตตามตัวอักษร

02:42.440 --> 02:45.880
เพื่อให้พวกเขาสามารถสลับส่วนของสตริงนี้เป็นไดนามิกสำหรับค่าอื่นๆ

02:45.880 --> 02:49.050
ได้อย่างง่ายดาย

02:49.050 --> 02:51.730
มาวางในสตริงนั้นกัน มันค่อนข้างยาวและเริ่มด้วยการแทนที่คีย์

02:51.730 --> 02:59.210
API ของคุณในตอนท้ายด้วยคีย์ Google API ที่เราเก็บไว้ในค่าคงที่นี้

02:59.210 --> 03:01.690
สำหรับสิ่งนี้ เนื่องจากเป็นเทมเพลตตัวอักษร

03:01.690 --> 03:04.110
เราจึงสามารถเพิ่มเครื่องหมายดอลลาร์

03:04.110 --> 03:09.110
วงเล็บปีกกา แล้วชี้ไปที่คีย์ Google API เพื่อใช้ค่าคงที่นี้

03:10.820 --> 03:13.240
นอกจากนี้ เรามาแลกเปลี่ยนที่อยู่นี้กันเถอะ

03:13.240 --> 03:15.500
ที่นี่เราได้ป้อนที่อยู่จำลอง

03:15.500 --> 03:19.300
และแน่นอนว่าฉันต้องการใช้ที่อยู่ที่ผู้ใช้ป้อน

03:19.300 --> 03:24.910
ตอนนี้มีเพียงหมายเหตุสำคัญอันเดียว แน่นอนว่าที่อยู่นี้เป็นข้อความที่ผู้ใช้ป้อนทุกประการ

03:24.910 --> 03:27.560
และพวกเขาเสนอให้สามารถมีอักขระพิเศษ ช่องว่าง

03:27.560 --> 03:30.650
เครื่องหมายจุลภาค และอื่นๆ อีกมากมาย

03:30.650 --> 03:32.250
และอักขระและสัญลักษณ์เหล่านี้บางส่วนไม่ได้รับการสนับสนุนใน

03:32.250 --> 03:35.580
URL

03:35.580 --> 03:37.750
ดังนั้นเราจึงจำเป็นต้องแปลงสตริงที่ป้อนนี้เป็นสตริงที่เข้ากันได้กับ

03:37.750 --> 03:40.550
URL

03:40.550 --> 03:46.940
และโชคดีที่ TypeScript และ JavaScript มีฟังก์ชันในตัวที่ช่วยเราในเรื่องนั้นโดยเฉพาะ

03:46.940 --> 03:50.460
นั่นคือฟังก์ชันเข้ารหัส URI

03:50.460 --> 03:53.020
เราสามารถเรียกสิ่งนั้นและส่งสตริงไปหามันได้

03:53.020 --> 03:54.770
ซึ่งจะแปลงสตริงนี้เป็นสตริงที่เข้ากันได้กับ

03:54.770 --> 03:57.460
URL

03:57.460 --> 04:04.900
ด้วยเหตุนี้เราจึงได้รับ URL ที่สมบูรณ์ซึ่งเราสามารถส่งคำขอเพื่อรับพิกัดของเรากลับมาได้

04:04.900 --> 04:10.620
ตอนนี้ get ให้คำมั่นสัญญาแก่เรา เพราะแน่นอนว่าการส่งคำขอเป็นงานแบบอะซิงโครนัส

04:10.620 --> 04:18.620
และที่นั่นเรามีบันทึกว่าสำเร็จหรือตรวจจับได้หากเรามีข้อผิดพลาดทางเทคนิคหรือรหัสตอบกลับข้อผิดพลาด

04:18.620 --> 04:21.560
ที่นี่เราจะคอนโซลบันทึกข้อผิดพลาดใด ๆ ที่เราอาจได้รับ

04:21.560 --> 04:24.710
ณ จุดนี้ เพราะโดยปกติแล้วเราควรจะประสบความสำเร็จ

04:24.710 --> 04:27.820
ดังนั้น ที่นี่ ฉันจะคาดหวังการตอบกลับของฉันในบล็อกนั้น

04:27.820 --> 04:32.400
และฉันต้องการบันทึกการตอบกลับนี้ด้วย

04:32.400 --> 04:35.820
ทีนี้ มาดูกันว่าสิ่งนี้ให้อะไรเราบ้าง

04:35.820 --> 04:40.953
ลองรัน NPM start อีกครั้งเพื่อเรียกใช้กระบวนการ webpack นั้นอีกครั้งและเริ่มสร้างสิ่งนี้

04:42.120 --> 04:43.790
และกลับไปที่ใบสมัครของเราและป้อนสถานที่ที่นี่เช่น

04:43.790 --> 04:47.220
Sixth Avenue

04:47.220 --> 04:51.480
ถ้าฉันกดค้นหาที่อยู่ คุณจะเห็นผลลัพธ์ที่นี่หลังจากผ่านไประยะหนึ่ง

04:51.480 --> 04:53.660
และที่นั่นคุณควรมีรหัสสถานะ

04:53.660 --> 04:56.120
200 ซึ่งหมายความว่าคำขอสำเร็จ

04:56.120 --> 05:01.240
และคุณมีฟิลด์ข้อมูลที่เก็บข้อมูลที่เซิร์ฟเวอร์ตอบกลับด้วย

05:01.240 --> 05:06.570
ฟิลด์ข้อมูลนั้นมีฟิลด์ผลลัพธ์และในนั้นเรามีอาร์เรย์อย่างที่คุณบอก

05:06.570 --> 05:10.690
ในอาร์เรย์นั้น เรามีไอเท็ม 2 ชิ้น จำนวนแตกต่างกันไป

05:10.690 --> 05:13.770
และนี่คือผลลัพธ์ที่ Google พบ

05:13.770 --> 05:16.740
และผลลัพธ์แรกมักเป็นผลลัพธ์ที่ดีที่สุด

05:16.740 --> 05:18.790
ดังนั้นหากคุณลองดู เราจะเห็นตัวอย่างเช่น

05:18.790 --> 05:20.460
ที่อยู่ที่จัดรูปแบบ

05:20.460 --> 05:23.790
ดังนั้น ที่อยู่ที่ Google พบสำหรับที่อยู่นี้ที่เราป้อน

05:23.790 --> 05:26.570
จึงสมบูรณ์กว่าที่เราป้อนเล็กน้อย

05:26.570 --> 05:29.300
และเราได้คีย์เรขาคณิตตรงนี้

05:29.300 --> 05:31.880
และถ้าเราขยายสิ่งนี้ เราจะเห็นว่าในทางกลับกันมีรหัสตำแหน่ง

05:31.880 --> 05:39.700
และสุดท้ายนี่คือวัตถุที่มีพิกัดที่เราสนใจ ละติจูดและลองจิจูด

05:39.700 --> 05:43.000
สุดท้ายเราต้องเจาะลึกข้อมูล ผลลัพธ์

05:43.000 --> 05:50.030
จากนั้นผลลัพธ์แรก เรขาคณิต ตำแหน่ง และเราจะมีวัตถุที่มีละติจูดและลองจิจูด

05:50.030 --> 05:55.240
และเราจะสามารถแสดงละติจูดและลองจิจูดนี้บนแผนที่ได้ในภายหลัง

05:55.240 --> 06:04.360
สำหรับตอนนี้ ลองดึงข้อมูลนี้ออกมาและรับพิกัดของเราโดยการเข้าถึงผลลัพธ์ของจุดข้อมูลจุดตอบสนอง

06:04.600 --> 06:13.093
แล้วมีผลลัพธ์ตำแหน่งดอทเรขาคณิตดอทอันแรก เจาะเข้าไปในนี่จริงๆ

06:15.130 --> 06:16.880
แน่นอนว่าสิ่งที่คุณจะสังเกตได้ก็คือแม้ว่า

06:16.880 --> 06:19.850
TypeScript จะไม่บ่นที่นี่ แต่เราก็ไม่ได้รับการสนับสนุน

06:19.850 --> 06:23.280
TypeScript ที่ดีที่นี่ใช่ไหม

06:23.280 --> 06:27.620
ถ้าฉันพิมพ์จุดตรงนี้ แสดงว่าไม่ได้มีคุณสมบัติเป็นผลลัพธ์

06:27.620 --> 06:30.350
และแน่นอนว่าฉันสามารถพยายามเข้าถึงอะไรก็ได้ที่นี่

06:30.350 --> 06:34.820
แม้แต่บางอย่างที่ไม่มีอยู่ในการตอบกลับและนั่นก็สมเหตุสมผล

06:34.820 --> 06:38.010
TypeScript จะรู้ได้อย่างไรว่าจะตอบสนอง

06:38.010 --> 06:40.920
URL ใด ๆ ที่ฉันส่งคำขอไป

06:40.920 --> 06:46.510
TypeScript ไม่ดำเนินการต่อและส่งคำขอในระหว่างการพัฒนาเพื่อค้นหาว่ามีอะไรอยู่ในนั้น

06:46.510 --> 06:49.170
ซึ่งนั่นก็ไม่ดีเช่นกัน

06:49.170 --> 06:51.400
แต่เราสามารถบอก TypeScript

06:51.400 --> 06:53.950
ว่าเราคาดหวังอะไรในการตอบกลับ

06:53.950 --> 07:02.830
เพราะเมธอด get นี้เป็นเมธอดทั่วไป และมีอะไรๆ อยู่ที่นี่ นั่นคือประเภทของการตอบกลับที่เราคาดว่าจะได้รับ

07:02.830 --> 07:06.880
ดังนั้นที่นี่ ฉันสามารถเพิ่มประเภทการตอบกลับของฉัน

07:06.880 --> 07:11.270
และฉันสามารถบอก TypeScript ว่าสิ่งที่ฉันคาดหวังคือวัตถุที่มีคีย์ผลลัพธ์

07:11.270 --> 07:18.330
ซึ่งในทางกลับกัน เป็นอาร์เรย์ที่เต็มไปด้วยวัตถุ โดยที่ทุกวัตถุมีคีย์เรขาคณิต

07:18.330 --> 07:33.510
ซึ่งจากนั้นใน ทางเลี้ยวคือวัตถุซึ่งมีรหัสตำแหน่ง ซึ่งในทางกลับกันคือวัตถุซึ่งมีละติจูดซึ่งเป็นตัวเลข และลองจิจูดซึ่งเป็นตัวเลข

07:33.510 --> 07:36.030
แน่นอนว่าเป็นประเภทที่ค่อนข้างซับซ้อน

07:36.030 --> 07:39.400
แต่ด้วยสิ่งนั้น ถ้าเราพิมพ์จุดที่นี่ ฉันได้รับการเติมข้อความอัตโนมัติและ

07:39.400 --> 07:42.220
TypeScript เข้าใจสิ่งที่ฉันกำลังเข้าถึงที่นี่

07:42.220 --> 07:46.620
และแน่นอน เรายังสามารถดึงประเภทนี้ออกจากที่นี่และสร้างนามแฝงประเภทของเราเองได้

07:46.620 --> 07:50.497
อาจจะเป็นที่นี่ การตอบสนองของ Google geocoding

07:53.220 --> 07:55.380
นั่นจะเป็นประเภทที่กำหนดเองของฉันที่นี่

07:55.380 --> 07:58.420
จากนั้นฉันสามารถบอก TypeScript ได้ที่นี่ ฉันคาดว่าจะได้รับการตอบกลับจาก

07:58.420 --> 08:01.540
Google geocoding

08:01.540 --> 08:03.900
แน่นอนว่าตอนนี้ การตอบสนองมีมากกว่าอาร์เรย์ผลลัพธ์

08:03.900 --> 08:09.460
แต่ยังมีรหัสสถานะ และยังมีฟิลด์อื่นๆ อีกมากมายในแต่ละรายการของอาร์เรย์ผลลัพธ์

08:09.460 --> 08:13.040
ตามมาด้วยรูปทรงเรขาคณิต

08:13.040 --> 08:21.330
แน่นอน ตอนนี้คุณสามารถเพิ่มฟิลด์เหล่านี้ทั้งหมดลงในประเภทแบบกำหนดเองของคุณได้ที่นี่ แต่ที่นี่

08:21.330 --> 08:25.640
ฉันแค่ต้องการเน้นที่ค่าที่ฉันสนใจจริงๆ

08:25.640 --> 08:27.360
และด้วยเหตุนี้จึงมีอีกฟิลด์หนึ่งที่ฉันจะเพิ่มเข้าไป

08:27.360 --> 08:30.900
และนั่นคือสถานะถัดจากผลลัพธ์

08:30.900 --> 08:35.500
ที่ระดับบนสุด เราได้รับสถานะ และนั่นจะเป็นสตริงที่บอกเราว่า

08:35.500 --> 08:38.390
Google ทำสำเร็จหรือไม่

08:38.390 --> 08:44.010
และสถานะจะไม่เป็นไรหรือค่าอื่นอีกสองสามค่า

08:44.010 --> 08:51.890
นี่เป็นข้อความแสดงสถานะที่ Google ตอบกลับเพื่อแจ้งให้เราทราบว่าการดึงข้อมูลพิกัดสำหรับที่อยู่นี้สำเร็จหรือไม่

08:51.890 --> 08:57.280
และแน่นอนว่าในเอกสารอย่างเป็นทางการ เราสามารถเรียนรู้ได้ว่าคำตอบประเภทใดที่เราอาจได้รับกลับมาที่นี่

08:57.280 --> 08:58.900
หากคุณเลื่อนลงมาเล็กน้อยและคลิกที่

08:58.900 --> 09:01.070
"เข้าใจคำตอบ" คุณจะได้เรียนรู้ว่ามีอะไรอยู่ในคำตอบที่คุณได้รับกลับมา

09:01.070 --> 09:07.000
และจากนั้นจึงคลิกที่คำตอบที่มีการเข้ารหัสทางภูมิศาสตร์

09:07.000 --> 09:11.090
จากนั้นในรหัสสถานะ เราจะเรียนรู้เกี่ยวกับรหัสสถานะที่มี

09:11.090 --> 09:15.090
ตัวอย่างเช่น เราทุกคนมีผลลัพธ์เป็นศูนย์หากไม่พบสิ่งใดเลย

09:15.090 --> 09:16.850
เรามีรหัสอื่นๆ อีกสองสามรหัสด้วย

09:16.850 --> 09:19.223
แต่ในที่นี้ ผมสนใจเฉพาะสองรหัสนี้จริงๆ

09:20.200 --> 09:24.890
ฉันจึงบอก TypeScript ว่าที่นี่ ฉันได้รับรหัสสถานะซึ่งเป็นหนึ่งในสองค่านี้

09:24.890 --> 09:29.830
อีกครั้ง มันอาจมีค่าเป็นตัวเลขด้วย แต่นี่เป็นสิ่งที่ดีสำหรับฉันตรงนี้

09:29.830 --> 09:33.700
อย่างที่ฉันพูด แน่นอนว่าคุณสามารถเขียนสิ่งนี้ได้อย่างสมบูรณ์มากขึ้น

09:33.700 --> 09:36.230
ตอนนี้เมื่อเพิ่มเข้าไปแล้ว ลงไปที่นั่นในบล็อกนั้น

09:36.230 --> 09:41.230
เราสามารถตรวจสอบได้ว่าการตอบสนองจุดข้อมูลจุดสถานะไม่เป็นไร ซึ่งหมายความว่ามีบางอย่างผิดพลาด

09:41.580 --> 09:44.120
และในกรณีนั้น เราสามารถส่งข้อผิดพลาดที่นี่ได้

09:44.120 --> 09:49.810
ดังนั้นเราจะลงเอยด้วยการจับ บล็อกที่เราสามารถตั้งค่าการจัดการข้อผิดพลาดบางอย่าง

09:49.810 --> 09:54.280
ในที่นี้เราจะแจ้งข้อผิดพลาดว่าไม่สามารถเรียกข้อมูลตำแหน่งได้

09:54.280 --> 10:01.230
จากนั้นในตัวจัดการข้อผิดพลาดเพื่อทำบางสิ่ง เราสามารถส่งการแจ้งเตือนโดยที่เราแสดงข้อความแสดงข้อผิดพลาดเป็นอย่างน้อย

10:01.230 --> 10:04.660
แน่นอนว่านี่เป็นเพียงการจัดการข้อผิดพลาดพื้นฐานบางอย่างเท่านั้น

10:04.660 --> 10:06.950
มิฉะนั้นหากเราได้รับคำตอบสำเร็จ เราจะเรียกข้อมูลพิกัดของเราที่นี่

10:06.950 --> 10:12.113
และตอนนี้เราสามารถใช้พิกัดเหล่านี้เพื่อแสดงผลบนแผนที่
