WEBVTT

00:02.050 --> 00:04.090
المدرب: إذن أي عيب لدينا؟

00:04.090 --> 00:06.030
هذا هو المشروع الذي عملنا

00:06.030 --> 00:08.020
عليه ، مقسم إلى ملفات

00:08.020 --> 00:12.390
متعددة باستخدام واردات وحدة ES6 هنا.

00:12.390 --> 00:15.620
الآن ، لنقم ببناء هذا المشروع فعليًا ومن

00:15.620 --> 00:18.400
أجل ذلك ، كما فعلنا من قبل ، يمكننا تشغيل

00:18.400 --> 00:21.930
npm-start لإحضار الخادم البسيط.

00:21.930 --> 00:24.710
وبالطبع ، من المهم جدًا في علامة تبويب

00:24.710 --> 00:26.367
جديدة ، تشغيل tsc-dash

00:27.820 --> 00:31.430
لبدء تجميع TypeScript في وضع المراقبة.

00:31.430 --> 00:35.590
هذا يعطينا مشروعنا وإذا فتحنا الآن علامة تبويب الشبكة

00:35.590 --> 00:39.570
في أدوات مطور المتصفح وقمنا بإعادة تحميل هذا الملف ،

00:39.570 --> 00:42.360
فسنرى العيب الذي لدينا هنا أو المشكلة

00:42.360 --> 00:44.840
التي نواجهها في هذا الإعداد.

00:44.840 --> 00:47.490
نرى مجموعة من طلبات HTTP.

00:47.490 --> 00:49.160
الآن يمكنك تجاهل آخر ما يأتي

00:49.160 --> 00:51.380
من خادم التطوير الخاص بنا.

00:51.380 --> 00:58.290
لكن كل هذه طلباتنا هنا للتطبيق. شبيبة ، مدخلات المشروع.

00:58.290 --> 00:58.290
js ، قائمة المشروع. شبيبة ، المكون الأساسي. شبيبة

00:58.290 --> 01:00.960
وهذه هي المشكلة.

01:00.960 --> 01:04.610
ستلاحظ أن كل هذه الملفات ليست كبيرة جدًا ، إنها

01:04.610 --> 01:06.320
صغيرة نسبيًا.

01:06.320 --> 01:07.590
هذا بالطبع جيد

01:07.590 --> 01:11.010
ولكن لدينا الكثير من طلبات HTTP هنا.

01:11.010 --> 01:12.600
الآن ما هي المشكلة في ذلك؟

01:12.600 --> 01:15.070
يمكن رؤية مشكلة ذلك إذا ألقينا نظرة

01:15.070 --> 01:17.810
على هذا الشلال هنا على اليمين.

01:17.810 --> 01:20.330
كل طلب HTTP يجب إجراؤه بالطبع

01:20.330 --> 01:22.470
يستغرق بعض الوقت.

01:22.470 --> 01:24.480
يستغرق تنزيل الملفات وقتًا ولكن

01:24.480 --> 01:27.760
نظرًا لأنها ليست كبيرة ، فهذه ليست مشكلة.

01:27.760 --> 01:31.390
لكن كل طلب HTTP له مثل قاعدة الحمل ، وهي المدة

01:31.390 --> 01:34.540
الأساسية التي يستغرقها دائمًا.

01:34.540 --> 01:38.570
هذا المربع الصغير الذي تراه أمام هذه الرسوم البيانية هنا.

01:38.570 --> 01:41.250
هذا قريب من الوقت الذي يتطلب فيه المتصفح

01:41.250 --> 01:43.910
إعداد هذا الطلب وإرساله.

01:43.910 --> 01:46.280
لذلك ، في حين أن التنزيل الفعلي للملف

01:46.280 --> 01:49.600
قد يكون سريعًا نسبيًا ، فإن إعداد الطلب ، والقيام

01:49.600 --> 01:52.860
بالعمل على الخادم ، الذي يخدم الملف ، وكل ذلك

01:52.860 --> 01:55.310
يستغرق بعض الوقت.

01:55.310 --> 01:57.890
والآن لدينا إعداد سريع للغاية

01:57.890 --> 02:00.310
لأن كل هذا يحدث على أجهزتنا.

02:00.310 --> 02:03.020
حصلنا على خادم تطوير محلي من كل شيء.

02:03.020 --> 02:06.160
إذا قمت بنشر ذلك على الويب ، فإن الحصول على هذا العدد

02:06.160 --> 02:08.690
الكبير من الطلبات يمكن أن يؤدي حقًا إلى

02:08.690 --> 02:11.140
الكثير من وقت الاستجابة وإبطاء مشروعك

02:11.140 --> 02:14.760
لمجرد الكم الهائل من طلبات HTTP التي يتم إجراؤها.

02:14.760 --> 02:17.280
لذلك إذا تمكنا من إيجاد حل لتقليل

02:17.280 --> 02:21.370
هذا المقدار من طلبات HTTP ، فسيكون ذلك مذهلاً.

02:21.370 --> 02:24.020
وهنا يأتي دور webpack.

02:24.020 --> 02:28.190
يمكنك الذهاب إلى webpack. شبيبة. org ، لمعرفة المزيد عنها.

02:28.190 --> 02:30.290
في النهاية webpack هي أداة

02:30.290 --> 02:33.750
ستساعدنا في تجميع ملفاتنا معًا.

02:33.750 --> 02:36.530
ويمكنني حقًا أن أوصي بوثائقهم الشاملة

02:36.530 --> 02:39.980
والشاملة التي تجدها على صفحتهم.

02:39.980 --> 02:42.300
إذا كنت تريد معرفة كل شيء عن حزمة الويب.

02:42.300 --> 02:44.820
في هذه الدورة ، سنستخدم بعض الميزات المحددة

02:44.820 --> 02:46.563
التي تساعدنا في TypeScript.

02:47.560 --> 02:49.850
إذن ما هي حزمة الويب بالضبط؟

02:49.850 --> 02:53.850
إنها تجميع ، ويمكنك القول إنشاء أداة تنسيق.

02:53.850 --> 02:56.190
إنها أداة تساعدنا في تقليل كمية طلبات

02:56.190 --> 02:59.560
HTTP عن طريق تجميع التعليمات البرمجية معًا.

02:59.560 --> 03:03.010
حتى نكتب الكود مقسمًا عبر ملفات متعددة ولكن

03:03.010 --> 03:05.390
Webpack بعد ذلك يأخذ كل هذه الملفات

03:05.390 --> 03:07.050
ونجمعها معًا.

03:07.050 --> 03:10.050
وبالإضافة إلى ذلك ، فإن حزمة الويب قادرة على فعل المزيد.

03:10.050 --> 03:13.920
سيؤدي أيضًا إلى تحسين الكود الخاص بنا ويسمح لنا أيضًا بإضافة المزيد

03:13.920 --> 03:17.760
من خطوات الإنشاء والمزيد من أدوات البناء ، على سبيل المثال ، لمساعدتنا

03:17.760 --> 03:20.410
في ملفات CSS وما إلى ذلك.

03:20.410 --> 03:23.180
هذا ليس ما سنلقي نظرة عليه في هذه الوحدة ، لأنني

03:23.180 --> 03:26.220
أريد التركيز على webpack و TypeScript.

03:26.220 --> 03:28.710
لذلك دعونا أولاً وقبل كل شيء نلقي نظرة على إعدادنا

03:28.710 --> 03:30.700
الطبيعي حيث لا نستخدم حزمة الويب.

03:30.700 --> 03:32.800
لدينا العديد من ملفات TypeScript

03:32.800 --> 03:34.870
ولكن إذا استخدمنا هذه الواردات بعد

03:34.870 --> 03:36.920
ذلك ، فسنحصل على طلبات HTTP متعددة

03:36.920 --> 03:40.220
، وهي ليست بهذه الروعة للأسباب التي ذكرتها.

03:40.220 --> 03:43.450
بالإضافة إلى ذلك ، هناك موضوع لم ألق نظرة عليه

03:43.450 --> 03:47.670
من قبل وهو أنه من المحتمل جدًا أن يكون لدينا رمز غير مُحسَّن

03:47.670 --> 03:51.290
، مما يعني أنه ليس صغيرًا قدر الإمكان.

03:51.290 --> 03:53.330
يمكننا بالتأكيد تحسين الكود بشكل أكبر

03:53.330 --> 03:55.750
عن طريق تقصير أسماء الوظائف وما إلى ذلك.

03:55.750 --> 03:58.690
وبالطبع ، نريد أداة تقوم بذلك تلقائيًا ،

03:58.690 --> 04:01.030
حتى لا نتعامل يدويًا مع تعليمات برمجية

04:01.030 --> 04:03.000
غير قابلة للقراءة.

04:03.000 --> 04:06.080
نريد أن نكتب كودًا قابلاً للقراءة تمامًا كمطور.

04:06.080 --> 04:07.850
ولكن سيكون من الرائع أن يكون

04:07.850 --> 04:10.740
لدينا أداة تختصر هذا الرمز وتجعله حقًا صغيرًا

04:10.740 --> 04:14.960
قدر الإمكان ، ويستخدم أقصر ما يمكن من أسماء المتغيرات والوظائف

04:14.960 --> 04:17.170
، بحيث نقوم بشحن أقل قدر ممكن من التعليمات

04:17.170 --> 04:19.130
البرمجية.

04:19.130 --> 04:22.940
لأن رمزًا أقل يعني أنه يمكن للمستخدمين تنزيله بشكل

04:22.940 --> 04:25.530
أسرع ، مما يعني أن تطبيقنا يمكن أن يبدأ

04:25.530 --> 04:27.600
بشكل أسرع على أجهزتنا.

04:27.600 --> 04:29.440
بالإضافة إلى ذلك ، إعدادنا

04:29.440 --> 04:32.860
الحالي ، لدينا خادم التطوير الإضافي هذا ، خادم لايت

04:32.860 --> 04:35.150
وهو حزمة إضافية مثبتة ، والتي يتعين

04:35.150 --> 04:36.860
علينا تدويرها.

04:36.860 --> 04:39.320
لن تكون مكافأة صغيرة ، مكافأة رائعة

04:39.320 --> 04:42.280
إذا كان لدينا أمر واحد وهذا من شأنه أن يفعل كل

04:42.280 --> 04:45.360
شيء ، وبناء مشروعنا ، ولكن أيضًا يدور مثل هذا الخادم

04:45.360 --> 04:48.170
، والذي يعيد تحميل موقعنا تلقائيًا كلما قمنا

04:48.170 --> 04:50.713
بتغيير ملف في مشروعنا.

04:51.550 --> 04:54.270
حسنًا ، وهذا هو المكان الذي يمكن أن يساعدنا فيه webpack.

04:54.270 --> 04:57.240
إنه يجمع الكود الخاص بنا بحيث يكون لدينا واردات

04:57.240 --> 05:00.670
أقل بدلاً من ذلك ، لدينا بعض حزم الأكواد الجيدة التي

05:00.670 --> 05:05.100
نشحنها ، ويساعدنا ذلك على تحسين الكود الخاص بنا ، وتقليله كما يطلق

05:05.100 --> 05:06.717
عليه ، بحيث نقوم بشحن كود

05:06.717 --> 05:10.130
أقل ويكون لدى مستخدمينا كود أقل لتنزيله.

05:10.130 --> 05:12.530
ويمكننا أيضًا إضافة المزيد من خطوات الإنشاء بسهولة

05:12.530 --> 05:15.750
إذا كنت ترغب في ذلك ، يمكننا إضافة خادم التطوير هذا ، ولكن يمكننا

05:15.750 --> 05:19.270
أيضًا القيام بالعديد من الأشياء الأخرى إذا أردنا فعلاً ذلك ، ومستندات

05:19.270 --> 05:22.160
webpack الرسمية هي المكان المناسب للذهاب إذا كنت تريد

05:22.160 --> 05:24.130
معرفة كل شيء عن هو - هي.

05:24.130 --> 05:27.880
مع ذلك ، دعنا نرى مثالًا للإعداد في مشروعنا ودعنا نتعلم

05:27.880 --> 05:30.433
كيف يمكننا استخدام حزمة الويب هناك.
