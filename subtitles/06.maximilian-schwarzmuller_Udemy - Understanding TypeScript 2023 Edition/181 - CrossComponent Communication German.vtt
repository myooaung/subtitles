WEBVTT

00:02.230 --> 00:05.130
Dozent: Jetzt wollen wir also unseren eingegebenen Text von der

00:05.130 --> 00:07.960
NewTodo-Komponente in die App-Komponente übertragen.

00:07.960 --> 00:09.690
Warum zur App-Komponente?

00:09.690 --> 00:11.160
Denn das ist unsere Komponente,

00:11.160 --> 00:13.610
die eine direkte Verbindung sowohl zur NewTodo

00:13.610 --> 00:16.340
als auch zur TodoList Komponente hat.

00:16.340 --> 00:19.320
Hier möchte ich also eine neue Funktion hinzufügen, die ich

00:20.800 --> 00:24.560
todoAddHandler nenne. Der Name ist Ihnen überlassen, ich verwende nur gerne

00:24.560 --> 00:25.393
die Konvention,

00:25.393 --> 00:27.990
einen Handler am Ende zu haben, wenn es sich um eine Funktion

00:27.990 --> 00:31.390
handelt, die durch ein Ereignis ausgelöst wird.

00:31.390 --> 00:34.330
Und hier erwarte ich, dass ich den Text als String bekomme,

00:34.330 --> 00:37.970
das ist unsere Funktion, also können wir das erwarten.

00:37.970 --> 00:40.720
Und dann wollen wir das hier als ToDo hinzufügen.

00:40.720 --> 00:42.270
Da Sie React kennen, wissen

00:42.270 --> 00:45.230
Sie natürlich, dass das Aktualisieren dieses Arrays

00:45.230 --> 00:47.440
allein nicht ausreicht, um diese Komponente

00:47.440 --> 00:49.360
neu zu rendern, also müssen wir hier

00:49.360 --> 00:54.750
etwas Zustandsmanagement verwenden, damit das funktioniert.

00:54.750 --> 00:57.460
Lassen Sie uns also den Text hier protokollieren und dann können wir uns in einem

00:57.460 --> 01:00.133
zweiten Schritt auf den Teil der Zustandsverwaltung konzentrieren.

01:01.000 --> 01:03.020
Um dies zu erreichen, müssen wir sicherstellen,

01:03.020 --> 01:05.850
dass diese todoAddHandler-Funktion von der NewTodo-Komponente

01:05.850 --> 01:09.050
aus aufgerufen werden kann, denn dort fügen wir das todo

01:09.050 --> 01:12.113
am Ende hinzu.

01:13.090 --> 01:15.370
Wie machen wir nun diese Funktion hier aus

01:15.370 --> 01:17.860
dieser Komponente heraus aufrufbar?

01:17.860 --> 01:22.300
Wir übergeben einen Zeiger auf diese Funktion an diese Komponente.

01:22.300 --> 01:25.640
Hier könnten wir also eine Eigenschaft mit dem Namen onAddTodo hinzufügen,

01:25.640 --> 01:27.280
und Sie können sie benennen, wie immer

01:27.280 --> 01:28.560
Sie wollen, ich nenne sie einfach

01:28.560 --> 01:32.030
so, weil dies im Grunde bei einem Ereignis geschieht, einem Ereignis, das wir

01:32.030 --> 01:34.600
natürlich kontrollieren, aber trotzdem.

01:34.600 --> 01:38.030
Und hier möchte ich todoAddHandler weiterleiten, also übergebe

01:38.030 --> 01:40.600
ich einen Zeiger auf diese Funktion, ich führe

01:40.600 --> 01:42.120
sie hier nicht aus, ich übergebe

01:42.120 --> 01:44.620
nur einen Zeiger auf diese Funktion, in onAddTodo,

01:44.620 --> 01:49.240
so dass wir anstelle von NewTodo auf props, die wir hier bekommen können, dies aufrufen

01:49.240 --> 01:56.220
können, so dass wir props aufrufen können.

01:56.220 --> 01:56.220
onAddTodo

01:56.220 --> 01:59.640
hier und leiten den eingegebenen Text weiter, das ist die Idee, aber

01:59.640 --> 02:01.730
natürlich mag TypeScript das nicht, weil

02:01.730 --> 02:03.440
es nicht weiß, dass es eine onAddTodo-Prop

02:03.440 --> 02:06.180
auf unseren Props hier geben wird und wie eine solche Prop

02:06.180 --> 02:08.240
aussehen würde.

02:08.240 --> 02:11.670
Genau wie bei TodoList müssen wir also eine Schnittstelle oder einfach

02:11.670 --> 02:14.540
eine Typdefinition für unsere Requisiten einrichten.

02:14.540 --> 02:18.200
Gehen wir also zu NewTodo und fügen Sie vielleicht wieder eine Schnittstelle hinzu,

02:18.200 --> 02:20.820
Sie könnten auch einen Kurstyp hinzufügen und ich werde

02:20.820 --> 02:23.060
das hier tun, um die Dinge zu vermischen.

02:23.060 --> 02:25.380
Normalerweise würde ich mich immer für eine Schnittstelle entscheiden,

02:25.380 --> 02:27.660
aber die Verwendung eines Typs ist auch in Ordnung.

02:27.660 --> 02:30.493
Um hier einen Typ zu verwenden, können wir ihn NewTodoProps

02:31.357 --> 02:33.820
nennen, und der Typ ist ein Objekttyp, bei dem ich

02:33.820 --> 02:36.830
einen onAddTodo prop haben möchte, und dieser wiederum wird

02:36.830 --> 02:39.120
ein Funktionstyp sein, der auf eine Funktion

02:39.120 --> 02:40.753
verweisen wird.

02:41.720 --> 02:44.290
Sie werden Funktionstypen wie diesen definieren. Wie Sie

02:44.290 --> 02:46.760
gelernt haben, handelt es sich dabei um eine Funktion, die

02:46.760 --> 02:48.850
nichts zurückgibt, aber einen Perimeter erwartet,

02:48.850 --> 02:51.410
und das ist der vom Benutzer eingegebene Text.

02:51.410 --> 02:54.023
Der Todo-Text, der vom Typ String ist, ist das,

02:55.120 --> 02:57.123
was diese Funktion erwartet.

02:58.920 --> 03:01.770
Jetzt setzen wir dies auf diesen generischen Typ hier und

03:01.770 --> 03:03.103
zeigen auf NewTodoProps.

03:04.510 --> 03:08.620
Und damit können wir onAddTodo aufrufen und eine Zeichenkette übergeben.

03:08.620 --> 03:11.470
Und wenn es versuchen würde, hier eine Zahl einzugeben, würden

03:11.470 --> 03:14.730
wir natürlich einen Fehler bekommen, weil wir oben klar definiert haben,

03:14.730 --> 03:17.590
dass das Argument eine Zeichenkette sein muss.

03:17.590 --> 03:18.733
Also, lassen Sie uns das umkehren.

03:20.550 --> 03:24.630
Wenn wir also wieder ein neues Ziel eingeben, das wir in einem Monat abschließen,

03:24.630 --> 03:27.150
sehen wir hier wieder ein Protokoll, aber jetzt

03:27.150 --> 03:28.690
kommt es von der App-Komponente,

03:28.690 --> 03:30.750
wie Sie deutlich sehen können, weil wir

03:30.750 --> 03:34.170
dieses Protokoll hier hinzugefügt haben.

03:34.170 --> 03:37.380
Die Kommunikation zwischen der NewTodo-Komponente und der

03:37.380 --> 03:39.480
App-Komponente funktioniert also.

03:39.480 --> 03:42.750
Und damit implementieren wir hier eine Zustandsverwaltung,

03:42.750 --> 03:44.160
und auch das können Sie zunächst

03:44.160 --> 03:46.850
selbst ausprobieren, um sicherzustellen, dass

03:46.850 --> 03:49.670
wir die Todos im Zustand rendern, so dass wir bei jeder

03:49.670 --> 03:52.170
Aktualisierung unserer Todos auch diese Komponente

03:52.170 --> 03:54.460
neu rendern.

03:54.460 --> 03:56.263
Das werden wir in der nächsten Vorlesung tun.
