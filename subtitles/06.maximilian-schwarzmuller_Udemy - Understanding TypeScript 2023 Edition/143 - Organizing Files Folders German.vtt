WEBVTT

00:02.300 --> 00:04.180
Kursleiter: Wir fangen also mit den Namensbasen

00:04.180 --> 00:05.960
an, fahren wir auf diesem Weg fort und

00:05.960 --> 00:08.460
teilen wir sie in weitere Dateien auf.

00:08.460 --> 00:11.090
Dafür gibt es das Projektzustandsmanagement.

00:11.090 --> 00:13.610
Wir könnten das auch in eine separate Datei aufnehmen.

00:13.610 --> 00:16.050
Ich nehme also alles, einschließlich

00:16.050 --> 00:20.600
der Erstellung der Projektstatusinstanz hier, und schneide

00:20.600 --> 00:24.250
es aus der App aus. ts-Datei und erstellen Sie eine neue

00:24.250 --> 00:27.060
Datei, project-state. ts.

00:27.060 --> 00:29.685
Verschieben Sie das dort hinein und legen

00:29.685 --> 00:32.070
Sie es wie zuvor in einen Namensraum.

00:32.070 --> 00:35.400
Namespace app, Name ist wichtig, es muss App sein, denn

00:35.400 --> 00:38.090
dort befindet sich der Rest unseres Codes.

00:38.090 --> 00:40.440
Das ist in diesem Fall die

00:40.440 --> 00:43.560
Klasse projectstate, die wir im

00:43.560 --> 00:46.120
Rest unserer Anwendung benötigen,

00:46.120 --> 00:48.830
und auch diese Konstante dort

00:48.830 --> 00:53.880
unten müssen wir exportieren.

00:53.880 --> 00:57.060
Sie brauchen den Listener hier nicht zu exportieren, und auch

00:57.060 --> 00:59.430
nicht den Status, da beide Dinge nur in dieser Datei

00:59.430 --> 01:01.480
verwendet werden und daher nicht exportiert

01:01.480 --> 01:02.823
werden müssen.

01:03.700 --> 01:06.860
Nun müssen wir unseren Projektstatus importieren. ts-Datei, also

01:06.860 --> 01:09.540
in App. ts, Zeit für einen weiteren Import dort oben.

01:09.540 --> 01:13.290
Projekt Dash State, einfach so.

01:13.290 --> 01:16.620
Wenn wir das speichern, sollte es ohne Fehler kompiliert werden.

01:16.620 --> 01:19.480
Ich fahre fort und der Validierungsteil hier könnte

01:19.480 --> 01:21.460
auch in eine separate Datei gehen, also

01:21.460 --> 01:23.960
nehme ich das alles und erstelle eine neue Datei,

01:23.960 --> 01:26.890
Validierung. ts, fügen Sie hier den Namespace

01:26.890 --> 01:30.760
App hinzu, fügen Sie dort meine Validierungslogik ein und exportieren

01:30.760 --> 01:33.560
Sie die validierbare Schnittstelle und natürlich

01:33.560 --> 01:36.706
die gesamte devalidate-Funktion hierher.

01:36.706 --> 01:39.566
Und dann, zurück in App. ts, Sie wissen ja, wie das ist, wir gehen

01:39.566 --> 01:41.700
zurück an den Anfang und fügen einen Import zur Validierung

01:41.700 --> 01:43.513
hinzu. ts.

01:45.160 --> 01:49.823
Jetzt kann der Dekorator auch in eine separate Datei verschoben werden.

01:49.823 --> 01:54.410
Autobind Dash Decorator. ts, zum Beispiel.

01:54.410 --> 01:58.863
Fügen Sie auch hier den Namespace mit dem Namen App hinzu, fügen Sie die Funktion

01:58.863 --> 02:01.950
dort ein und exportieren Sie sie natürlich, damit

02:01.950 --> 02:04.820
sie auch außerhalb dieser Datei und dann hier in

02:04.820 --> 02:08.430
app verfügbar ist. ts, Zeit für einen weiteren Import, bei

02:08.430 --> 02:12.633
dem ich autobind dash decorator importiere. ts.

02:14.840 --> 02:16.484
Jetzt müssen wir noch mehr Dinge exportieren,

02:16.484 --> 02:19.240
wir haben unsere Komponente und dann all diese Klassen.

02:19.240 --> 02:21.205
Ich möchte jede Klasse in einer separaten

02:21.205 --> 02:25.440
Datei haben, so dass jede Datei relativ klein und leicht zu verwalten ist.

02:25.440 --> 02:28.280
Jetzt stoßen wir allerdings auf ein neues Problem.

02:28.280 --> 02:30.385
Wir fügen mehr und mehr Dateien auf der gleichen

02:30.385 --> 02:33.934
Ebene hinzu und für den Moment benutze ich das Bindestrich-Ding hier,

02:33.934 --> 02:37.800
um einen Hinweis oder eine Hilfe zu geben, was in der Datei ist, autobind dash

02:37.800 --> 02:41.260
decorator zeigt uns, dass es wahrscheinlich einen Dekorator darin

02:41.260 --> 02:42.330
gibt.

02:42.330 --> 02:44.300
Hier haben wir wahrscheinlich Schnittstellen.

02:44.300 --> 02:46.246
Hier, ein Modell und so weiter.

02:46.246 --> 02:49.070
Wenn Sie nur drei oder vier Dateien haben,

02:49.070 --> 02:52.010
ist das völlig in Ordnung, aber wenn Sie mehr

02:52.010 --> 02:55.276
Dateien haben, wird die Ordnerstruktur sehr schwer

02:55.276 --> 02:57.430
zu verstehen sein.

02:57.430 --> 03:00.056
Ich möchte also Unterordner erstellen.

03:00.056 --> 03:02.697
Ich füge einen Unterordner decorators hinzu, verschiebe

03:02.697 --> 03:05.830
meinen Autobind-Dekorator dorthin und benenne ihn einfach in

03:05.830 --> 03:08.290
autobind um, da er sich bereits im Ordner decorators

03:08.290 --> 03:09.260
befindet.

03:09.260 --> 03:11.720
Natürlich ist da ein Dekorateur drin.

03:11.720 --> 03:14.440
Dann füge ich meinen Models-Ordner hinzu und

03:14.440 --> 03:17.523
verschiebe hier sowohl die Drag&amp;Drop-Interfaces

03:17.523 --> 03:19.355
als auch das Project Model, weil

03:19.355 --> 03:21.763
ich denke, dass die Drag&amp;Drop-Interfaces

03:21.763 --> 03:24.187
letztendlich nur Definitionen dafür sind,

03:24.187 --> 03:27.263
wie Drag&amp;Drop-Klassen aussehen sollen.

03:27.263 --> 03:29.910
So wie das Projektmodell die Definition ist, wie

03:29.910 --> 03:31.630
eine Projektklasse oder unser

03:31.630 --> 03:33.655
Projektobjekt aussehen soll.

03:33.655 --> 03:38.530
Ich benenne also dieses Drag &amp; Drop und das hier einfach Projekt und dann

03:38.530 --> 03:42.610
füge ich hier einen util-Ordner für Utility hinzu und füge

03:42.610 --> 03:44.860
dort meine Validierung hinzu und

03:44.860 --> 03:49.690
dann einen state-Ordner und füge dort den Projektstatus hinzu.

03:49.690 --> 03:52.400
Hier werde ich den Namen project-state beibehalten, um Verwechslungen

03:52.400 --> 03:55.300
mit diesem Projekt zu vermeiden. ts-Datei hier.

03:55.300 --> 03:56.716
Technisch gesehen wäre das kein Problem,

03:56.716 --> 03:59.216
aber ich möchte es hier in diesem Kurs auch deutlich machen,

03:59.216 --> 04:00.990
damit Sie leichter erkennen können, in welcher

04:00.990 --> 04:02.640
Datei ich arbeite.

04:02.640 --> 04:05.640
Sie könnten es auf jeden Fall einfach in Projekt umbenennen. ts hier, wenn Sie

04:05.640 --> 04:07.320
das wollten.

04:07.320 --> 04:09.662
Mit dieser Umstrukturierung und den Unterordnern

04:09.662 --> 04:12.069
sind unsere Importe natürlich kaputt, also sollten

04:12.069 --> 04:14.010
wir sie reparieren.

04:14.010 --> 04:17.366
Die Drag-and-Drop-Schnittstelle befindet sich im Ordner models

04:17.366 --> 04:21.216
und heißt jetzt einfach drag-drop. ts.

04:21.216 --> 04:25.630
Und das Projektmodell befindet sich ebenfalls im Ordner models und heißt

04:25.630 --> 04:28.560
jetzt einfach project. ts.

04:28.560 --> 04:31.100
Der Projektstatus befindet sich im Ordner

04:31.100 --> 04:34.040
state, die Validierung befindet sich im Ordner util

04:34.040 --> 04:36.896
und der Dekorator autobind befindet sich im Ordner

04:36.896 --> 04:39.860
decorators und heißt einfach autobind.

04:39.860 --> 04:42.547
Wenn wir das speichern, wird es ohne Fehler kompiliert,

04:42.547 --> 04:44.128
und wir haben jetzt eine überschaubare

04:44.128 --> 04:47.290
und lesbare Ordnerstruktur, würde ich sagen.

04:47.290 --> 04:50.500
Machen wir also weiter, wir sind noch nicht fertig.

04:50.500 --> 04:52.130
Hier haben wir unsere Komponente,

04:52.130 --> 04:54.813
für die ich jetzt einen Unterordner Komponenten

04:54.813 --> 04:59.813
hinzufügen werde, und dort möchte ich meine Basis Dash Komponente ts-Datei

05:00.210 --> 05:05.210
haben und dann meine Projektelement ts-Datei, meine Projektliste ts-Datei

05:07.600 --> 05:12.110
und auch die Projekteingabe ts-Datei.

05:12.110 --> 05:14.430
Natürlich kann man das auch anders organisieren,

05:14.430 --> 05:17.631
aber ich denke, so bleiben verwandte Dateien zusammen.

05:17.631 --> 05:22.253
Wir können also diese abstrakte Komponenten-Basisklasse hier nehmen, sie aus app ts

05:23.830 --> 05:27.023
ausschneiden und in die Basiskomponente verschieben.

05:29.610 --> 05:33.180
Genau so, und natürlich auch genau so wie zuvor,

05:33.180 --> 05:37.810
fügen Sie es in einen Namensraum mit dem Namen App.

05:37.810 --> 05:41.120
Und dann verschieben Sie es in diesen Namensraum.

05:41.120 --> 05:43.890
Natürlich passe ich das an, bevor wir es exportieren müssen, damit

05:43.890 --> 05:46.171
wir es in einer anderen Datei verwenden können.

05:46.171 --> 05:49.800
Diese andere Datei wird jedoch nicht app sein. ts, weil die Dateien oder die Klassen,

05:49.800 --> 05:53.044
in denen ich die Komponente verwendet habe, ebenfalls

05:53.044 --> 05:54.910
verschoben werden.

05:54.910 --> 05:56.856
Die Projektelementklasse hier, zum Beispiel, nehme ich

05:56.856 --> 06:00.164
und verschiebe sie in das Projektelement. ts, um genau zu sein, füge

06:00.164 --> 06:04.550
ich dort auch einen Namespace app hinzu und verschiebe ihn in

06:04.550 --> 06:06.680
den Namespace app und exportiere

06:06.680 --> 06:09.060
dann auch diese Klasse.

06:09.060 --> 06:11.413
Wichtig ist, dass dies auf der Komponente beruht, und wenn ich

06:12.310 --> 06:14.740
das jetzt speichern würde, bekämen wir eine Fehlermeldung,

06:14.740 --> 06:16.497
dass die Komponente am Ende nicht gefunden wird,

06:16.497 --> 06:19.353
also müssen wir hier wieder diesen Import hinzufügen, wo wir den Referenzpfad

06:19.353 --> 06:24.772
gleich haben, und hier ist es die Basiskomponente.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
Dies ist immer ein relativer Import hier, so dass,

06:27.330 --> 06:29.130
da dies in den gleichen Ordner, wir

06:29.130 --> 06:32.320
nicht zu sagen, Komponenten Schrägstrich hier, weil wir nicht

06:32.320 --> 06:34.608
brauchen, um in die Komponenten-Ordner erste

06:34.608 --> 06:37.300
diese Datei, die Projekt-Element-Datei, ist bereits

06:37.300 --> 06:38.729
in der Komponenten-Ordner

06:38.729 --> 06:40.617
so relativ aus dieser Datei Basiskomponente

06:40.617 --> 06:44.913
importiert wird, indem Sie einfach ihren Namen hier.

06:46.060 --> 06:48.030
Jetzt ist das Projekt also da.

06:48.030 --> 06:51.963
Jetzt, natürlich, in app. ts, wir haben auch die Projektliste bekommen.

06:55.940 --> 07:00.662
Lassen Sie uns das nehmen, verschieben Sie es in die Projektliste ts-Datei hier

07:00.662 --> 07:04.940
und dort in einen Namespace App, und dann auch hier in Projekteingabe lassen

07:04.940 --> 07:07.050
Sie uns das nehmen, schneiden Sie es

07:08.010 --> 07:14.480
von hier aus, aus dem Namespace App in der App.

07:14.480 --> 07:14.480
ts-Datei

07:14.480 --> 07:17.097
und verschieben Sie sie in die Projekt-Input-ts-Datei

07:17.097 --> 07:19.857
und dort in einen app-Namensraum.

07:20.750 --> 07:24.350
Jetzt, wichtig wie vorher, diese Klasse hier exportieren,

07:24.350 --> 07:27.550
Projektelement und auch Projektliste, muss natürlich

07:27.550 --> 07:30.200
alles exportiert werden, damit bekommen wir

07:30.200 --> 07:31.580
einen Haufen Fehler, weil

07:31.580 --> 07:34.343
natürlich noch Importe fehlen.

07:35.200 --> 07:39.930
In App. ts, wir sollten jetzt alle diese Komponenten importieren, also hier

07:39.930 --> 07:47.380
sollten wir project-input importieren. ts, Projekt-Liste.

07:47.380 --> 07:47.380
ts, und speichern Sie diese.

07:47.380 --> 07:50.240
Jetzt stürzt es natürlich immer noch ab, weil wir noch mehr

07:50.240 --> 07:51.087
Dinge haben, die

07:51.087 --> 07:53.192
fehlen. In der Projekteingabe verwenden

07:53.192 --> 07:55.541
wir die Komponente genauso wie in der Projektliste,

07:55.541 --> 07:57.780
also müssen wir den Import der Basiskomponente

07:57.780 --> 08:00.091
in der ts-Datei der Projekteingabe und auch in

08:00.091 --> 08:02.920
der ts-Datei der Projektliste hinzufügen, genauso wie

08:02.920 --> 08:05.790
wir es in der Projekteinheit getan haben.

08:05.790 --> 08:08.665
Und damit kompiliert es ohne Fehler, und schauen

08:08.665 --> 08:10.880
wir mal, ob es auch funktioniert, wenn

08:10.880 --> 08:15.118
wir hier neu laden und ich das hier hinzufüge, es lässt sich ziehen und fallen

08:15.118 --> 08:16.540
lassen, und das scheint

08:16.540 --> 08:19.480
alles zu funktionieren, wie es sollte, und jetzt teilen

08:19.480 --> 08:22.340
wir das auf mehrere Dateien auf.

08:22.340 --> 08:23.978
Am Ende haben wir immer noch eine Datei,

08:23.978 --> 08:26.010
aber wenn wir an unserem Code arbeiten, ist

08:26.010 --> 08:28.110
er jetzt viel übersichtlicher.

08:28.110 --> 08:30.978
Weil wir kleinere, konzentrierte Dateien haben, in denen wir

08:30.978 --> 08:33.829
schnell finden können, was wir suchen, und in denen wir nicht

08:33.829 --> 08:36.358
durch eine riesige Datei blättern müssen, um die Stelle

08:36.358 --> 08:39.363
zu finden, an der wir als nächstes arbeiten wollen.
