WEBVTT

00:02.220 --> 00:03.053
Instructeur: Nu heb

00:03.053 --> 00:04.920
ik gezegd dat interfaces worden gebruikt

00:04.920 --> 00:07.114
om de structuur van een object te definiëren.

00:07.114 --> 00:09.690
Nu kunnen interfaces ook worden gebruikt om de structuur

00:09.690 --> 00:11.750
van een functie te definiëren.

00:11.750 --> 00:14.330
Dus eigenlijk als vervanging voor de functietypes waar

00:14.330 --> 00:15.578
je al over geleerd hebt.

00:15.578 --> 00:17.890
Als snelle opfrisser kunnen we het type van

00:17.890 --> 00:20.090
een functie definiëren, bijvoorbeeld

00:20.090 --> 00:23.305
met een aangepast type met het type sleutelwoord.

00:23.305 --> 00:26.380
AddFn voor add-functie die dan een functiedefinitie

00:26.380 --> 00:29.350
als deze zou kunnen bevatten.

00:29.350 --> 00:30.830
Het moet een getal teruggeven

00:30.830 --> 00:32.370
en twee argumenten nemen,

00:32.370 --> 00:35.970
waarbij elk argument ook van het type getal is.

00:35.970 --> 00:39.310
Nu zouden we hier een nieuwe functie add kunnen maken

00:39.310 --> 00:42.860
die van het type AddFn is en wanneer we die niet initialiseren

00:42.860 --> 00:45.040
maar onze functie later toewijzen,

00:45.040 --> 00:46.580
dan moeten we er natuurlijk

00:46.580 --> 00:49.470
voor zorgen dat deze functie twee argumenten

00:49.470 --> 00:51.300
neemt die van het type getal zijn

00:51.300 --> 00:55.170
en dat we daarin ook een getal teruggeven.

00:55.170 --> 00:56.360
Dit is iets wat we kunnen doen.

00:56.360 --> 00:57.843
Dit is wat je al geleerd hebt.

00:57.843 --> 01:01.760
Nu kunt u ook een interface gebruiken als alternatief voor dit

01:01.760 --> 01:03.077
aangepaste type.

01:03.077 --> 01:06.860
Interfaces zijn er om de structuur van een object te definiëren, zoals ik

01:06.860 --> 01:08.240
je heb geleerd, maar uiteindelijk

01:08.240 --> 01:10.220
zijn functies gewoon objecten en daarom

01:10.220 --> 01:12.720
is dit een kleine uitzondering.

01:12.720 --> 01:15.350
Je kunt functietypen maken met interfaces.

01:15.350 --> 01:18.930
Daarvoor maak je een interface, met de naam AddFn om

01:18.930 --> 01:20.930
die naam hier te behouden.

01:20.930 --> 01:23.720
En nu definieer je daar het stukje functie

01:23.720 --> 01:28.300
door gewoon haakjes toe te voegen met je argumenten, a: getal,

01:28.300 --> 01:31.150
B:getal, bijvoorbeeld, en dan een dubbele

01:31.150 --> 01:33.980
punt, geen pijl maar een dubbele punt hier

01:33.980 --> 01:36.810
met het terugkeertype.

01:36.810 --> 01:39.780
Dus uiteindelijk, zoals je een methode zou definiëren

01:39.780 --> 01:41.630
zoals we het hier doen met greet,

01:41.630 --> 01:45.710
met de uitzondering dat we nu geen methode naam toevoegen.

01:45.710 --> 01:47.880
We hebben dus een anonieme functie

01:47.880 --> 01:49.300
als je die zo wilt noemen

01:49.300 --> 01:52.000
in de AddFn interface en TypeScript begrijpt

01:52.000 --> 01:55.250
deze speciale syntaxis van deze anonieme functie

01:55.250 --> 01:57.800
in je interface en begrijpt dat je deze

01:57.800 --> 02:02.070
interface wilt gebruiken als functietype en zo moet je functie

02:02.070 --> 02:05.360
eruit zien.

02:05.360 --> 02:07.650
Dus nu kunnen we AddFn hier gebruiken en inderdaad,

02:07.650 --> 02:10.440
als ik hier een string zou proberen te accepteren,

02:10.440 --> 02:11.640
zouden we een fout krijgen

02:11.640 --> 02:13.786
omdat dit niet toewijsbaar is, we moeten

02:13.786 --> 02:17.060
een getal hebben in plaats van een string.

02:17.060 --> 02:19.670
Het is dus gewoon een alternatief voor dit aangepaste type.

02:19.670 --> 02:23.010
Natuurlijk, hier zou ik stellen dat het gebruik van het aangepaste type

02:23.010 --> 02:25.020
waarschijnlijk wat gebruikelijker is, het

02:25.020 --> 02:26.470
is ook wat korter, maar het is een

02:26.470 --> 02:28.340
leuke alternatieve syntaxis om te weten,

02:28.340 --> 02:30.870
vooral als je dit in een of ander project tegenkomt en

02:30.870 --> 02:34.030
je anders even niet weet wat dit betekent, deze vreemde anonieme

02:34.030 --> 02:35.265
methode.

02:35.265 --> 02:38.993
Nou, uiteindelijk is het gewoon een aangepast functietype.
