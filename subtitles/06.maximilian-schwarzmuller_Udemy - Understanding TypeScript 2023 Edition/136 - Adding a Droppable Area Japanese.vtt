WEBVTT

00:02.180 --> 00:04.910
講師：視覚的にはドラッグ＆ドロップができるのですが､

00:04.910 --> 00:07.240
技術的にはJavaScriptではもちろん､

00:07.240 --> 00:10.410
スクリプトには何が起こっているのかわかりません｡

00:10.410 --> 00:14.810
しかし､ 私たち人間にはもちろん､ ここでまさにこのアイテムを引きずっていることは明らかです｡

00:14.810 --> 00:16.300
しかし､ 私たちのコードを見てみると､

00:16.300 --> 00:20.320
JavaScriptは､ 何がどこにドラッグされているのかをどうやって知ることができるでしょうか？

00:20.320 --> 00:24.440
今ある情報をもとに､ どのように状態を更新していくのか｡

00:24.440 --> 00:26.690
それは､ 本当にありえないことなんです｡ 

00:26.690 --> 00:28.810
そこで､ JavaScriptでこの機能を実現するために､

00:28.810 --> 00:33.960
ドラッグ可能なアイテムであるプロジェクトアイテムのクラスに戻る必要があります｡

00:33.960 --> 00:38.250
そこで､ dragStartHandlerにおいて､ コンソールのイベントをログに記録することが､

00:38.250 --> 00:39.950
やるべきことのすべてではありません｡

00:39.950 --> 00:42.200
実は､ その必要はまったくないんです｡ 

00:42.200 --> 00:48.210
代わりに､ データ転送のプロパティを持つイベントオブジェクトを使用しましょう｡

00:48.210 --> 00:50.440
このようなデータ転送のプロパティを持っているのは､

00:50.440 --> 00:53.280
ドラッグイベントの場合､ 特別なことです｡

00:53.280 --> 00:55.330
このプロパティでドラッグイベントにデータを添付し､

00:55.330 --> 01:03.730
後でドロップ時にそのデータを抽出することができます｡ ブラウザの裏側のJavaScriptでは､ ドラッグ操作中にそのデータを保存し､

01:03.730 --> 01:12.020
ドロップ時に得られるデータがここで添付したデータと同じであることを確認します｡

01:12.020 --> 01:15.520
そのために､ データ転送時にsetDataを呼び出すことができますが､

01:15.520 --> 01:18.910
データ転送は実際にはnullである可能性があります｡

01:18.910 --> 01:21.080
ですから､ ここで感嘆符を付けなければなりません｡ もちろん､

01:21.080 --> 01:23.460
ここでNULLにならないことは分かっています｡

01:23.460 --> 01:25.700
なぜNULLになりうるのか､ と思われるかもしれません｡ 

01:25.700 --> 01:29.060
ドラッグイベントは常に同じ種類のイベントですが､ どのリスナーがトリガーするか､

01:29.060 --> 01:37.520
あるいはどのイベントをリッスンしているかによって､ データ転送が必ずしも利用できるわけではありません｡

01:37.520 --> 01:44.073
そのため､ すべてのドラッグ関連のイベントで､ データ転送オブジェクトを持つイベントオブジェクトが得られるわけではありません｡

01:45.320 --> 01:46.620
しかし､ ドラッグ開始イベントで起動する

01:46.620 --> 01:49.080
dragStartHandler はそれを持っているので､

01:49.080 --> 01:52.840
ここで安全に setData を呼び出すことができます｡

01:52.840 --> 01:56.330
そして､ setDataはここで2つの引数を取ります｡ 

01:56.330 --> 01:59.900
第一引数はデータの形式を示す識別子で､

01:59.900 --> 02:04.970
そこにはある種の可能な形式が用意されている｡

02:04.970 --> 02:08.210
JavaScriptによるドラッグ＆ドロップの詳細については､

02:08.210 --> 02:10.890
こちらでご覧いただけます｡

02:10.890 --> 02:15.140
ちなみに私のJavaScript完全ガイドの講座でも詳しく説明しています｡

02:15.140 --> 02:18.390
ここでは､ text/plain形式が必要です｡

02:18.390 --> 02:20.010
つまり､ 転送されるデータにプレーンテキストを添付するだけですが､

02:20.010 --> 02:25.430
これは重要なことです｡

02:25.430 --> 02:28.250
ここでオブジェクトをくっつけたり､ プロジェクト自体をくっつけたりすると､

02:28.250 --> 02:31.390
どんどんトラブってしまいます｡

02:31.390 --> 02:34.340
そのため､ ここでレンダリングできる完全なプロジェクトではありません｡ 

02:34.340 --> 02:37.955
その代わり､ プロジェクトのIDを添付しておけば､

02:37.955 --> 02:41.645
後でそのプロジェクトを状態から取得できるようになるので､

02:41.645 --> 02:44.870
実はそれで十分なのです｡

02:44.870 --> 02:47.320
だから､ IDを添付すればいいのです｡ 

02:47.320 --> 02:52.053
少量のデータしか転送しないので､ メモリの節約にもなります｡

02:53.100 --> 02:56.300
これで､ ドラッグイベントにデータを添付することができました｡ 

02:56.300 --> 03:00.610
もうひとつ､ データ転送の際に感嘆符を追加する必要があるので､

03:00.610 --> 03:05.430
effectAllowedプロパティをmoveに設定します｡

03:05.430 --> 03:08.610
これは基本的にカーソルの見え方を制御し､

03:08.610 --> 03:15.200
AからBに要素を移動させるという意図をブラウザに少し伝えるものです｡

03:15.200 --> 03:16.760
コピーという方法もありますが､

03:16.760 --> 03:23.120
その場合はカーソルが変わるので､ コピーしているのであって移動しているのではないことがわかります｡

03:23.120 --> 03:31.360
しかし､ ここでは要素を移動させたいので､ ドロップすると元の場所から削除して新しい場所に追加します｡

03:31.360 --> 03:34.940
それで､ 今データがここに添付されていますが､ これが第一段階です｡ 

03:34.940 --> 03:36.870
それでは､ ドロップさせたい場所､

03:36.870 --> 03:40.360
つまりプロジェクトリストに戻りましょう｡

03:40.360 --> 03:43.400
そこでは､ dragLeaveHandlerで開始されます｡ 

03:43.400 --> 03:46.370
このアプリケーションでは､ このプロジェクトでは､

03:46.370 --> 03:51.500
ドラッグ＆ドロップ操作は1つだけです｡

03:51.500 --> 03:57.220
大規模なアプリケーションでは､ ページ上にドラッグ＆ドロップできるさまざまなパーツがあり､

03:57.220 --> 04:01.080
すべてをどこでもドロップできるようにしたくはないでしょう｡

04:01.080 --> 04:06.080
そこで､ マウスでドラッグできる領域に入ったときに起動される

04:06.230 --> 04:14.970
dragOverHandler で､ 本当にドラッグが許可されているかどうかを確認したいと思います｡

04:14.970 --> 04:19.546
そのために､ イベントかどうかを確認します｡  dataTransfer､

04:19.546 --> 04:22.950
ここではそれも利用可能なので､ それが利用可能であれば､

04:22.950 --> 04:25.500
データ転送タイプのプロパティは､

04:25.500 --> 04:34.140
text/plainに等しい最初の値を持っています｡

04:34.300 --> 04:42.390
つまり､ ドラッグイベントに添付されるデータが､ そのような形式であるかどうかということです｡

04:42.390 --> 04:45.030
もちろん､ これは dragStartHandler

04:45.030 --> 04:47.320
で設定したフォーマットだからです｡

04:47.320 --> 04:53.180
例えば､ ここではデータ形式が異なる画像などをドロップすることはできないわけです｡

04:53.180 --> 04:56.173
プレーンテキストのドロップを許可したところです｡ 

04:57.170 --> 04:59.450
もちろん､ ここで参照しているのはイベントなので､

04:59.450 --> 05:03.280
アンダースコアを再びイベントに置き換える必要があります｡

05:03.280 --> 05:09.070
もしそうなら､ ドロップを許可して､ 背景を更新することになりますね｡

05:09.070 --> 05:13.960
それと､ もうひとつ大事なことなんですが､ イベントを呼んでください｡

05:13.960 --> 05:13.960
preventDefault｡ 

05:13.960 --> 05:15.950
でも､ なぜそう呼ばなければならないのでしょうか？

05:15.950 --> 05:22.480
JavaScript では､ ドラッグ＆ドロップは実際にはドロップのみが許可されるように動作するため､

05:22.480 --> 05:26.119
ドロップイベントは､ 同じ要素のドラッグオーバーハンドラで

05:26.119 --> 05:32.750
preventDefault を呼び出した場合にのみトリガーされます｡

05:32.750 --> 05:35.360
と考えることができます｡ 

05:35.360 --> 05:38.870
JavaScript のドラッグ＆ドロップイベントのデフォルトはドロップ不可なので､

05:38.870 --> 05:41.350
ドラッグオーバーハンドラでデフォルトを無効にし､

05:41.350 --> 05:54.870
JavaScript とブラウザに､ この要素､ この場合はこのセクション､ このプロジェクトレスクラスに対してドロップを許可するように伝える必要があります｡

05:54.870 --> 05:57.920
つまり､ dragOverHandlerでこの処理を行った場合のみ､

05:57.920 --> 06:01.220
ユーザーが手を離したときにdropイベントが実際に発生します｡

06:01.220 --> 06:02.910
そうでなければ､ ユーザーが手を放しても､

06:02.910 --> 06:05.060
ドロップイベントは発生しません｡

06:05.060 --> 06:12.620
これで､ ドロップハンドラはもちろん実行されるようになります｡

06:12.620 --> 06:20.610
このドロップハンドラで､ イベントを受け取ることができるようになりました｡

06:20.610 --> 06:20.610
のように､

06:20.610 --> 06:23.003
ここにイベントを記録し､ これがうまくいくかどうかを確認します｡

06:23.940 --> 06:28.100
すべてを保存して､ ここに新しい項目を追加し､

06:28.100 --> 06:30.220
これをドラッグします｡

06:30.220 --> 06:36.490
完成したプロジェクトのここにドロップすると､ このドラッグイベントが発生するのがわかります｡

06:36.490 --> 06:43.050
これは236行目からで､ ドロップハンドラのこの行になります｡

06:43.050 --> 06:45.950
ここで､ ブラウザでドラッグイベントを調べてみると､

06:45.950 --> 06:47.447
ここに大量のデータがあり､

06:47.447 --> 06:50.830
データ転送プロパティもあります｡

06:50.830 --> 06:52.920
そして､ その中には､ 私たちが許可した効果､

06:52.920 --> 06:54.320
つまりMoveが見えますし､

06:54.320 --> 06:57.930
また､ そこには何も見えません｡

06:57.930 --> 07:04.510
まあ､ これがコンソールに入れられた後､ すでにデータがクリアされていたからに他なりませんが｡

07:04.510 --> 07:06.100
そして､ ここにオブジェクトを入れ､

07:06.100 --> 07:10.830
オブジェクトは参照型なので､ データが失われた最新のスナップショットが表示されます｡

07:10.830 --> 07:16.910
実はこれを落としている時点で､ データ転送からデータを抽出することができるようになります｡

07:16.910 --> 07:18.360
そして､ それを証明できるのが私です｡ 

07:18.360 --> 07:23.210
もちろん､ データ転送にアクセスするだけで､

07:23.210 --> 07:34.560
getDataメソッドが用意されています｡

07:35.060 --> 07:37.179
これを保存して､ プロジェクトを再度追加し､

07:37.179 --> 07:46.050
これをここにドラッグすると､ このプロジェクトアイテムのIDが表示されます｡

07:46.600 --> 07:47.920
ここではIDとして0も付けているので､

07:47.920 --> 07:55.124
インスペクションすればわかると思います｡

07:55.124 --> 07:55.124
2167さん､ 私にはこのIDのように見えます｡ 

07:55.124 --> 07:59.170
というわけで､ 無事IDの移行が完了しました｡ 

07:59.170 --> 08:00.490
さあ､ あと少しです｡ 

08:00.490 --> 08:06.163
あとは､ 裏で状態を更新して､ DUIを再レンダリングするだけです｡
