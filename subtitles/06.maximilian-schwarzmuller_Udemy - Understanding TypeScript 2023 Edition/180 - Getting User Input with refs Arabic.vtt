WEBVTT

00:02.240 --> 00:04.870
المقدم: حسنًا ، تمت إضافة المكون الأول لدينا.

00:04.870 --> 00:06.090
دعنا نضيف الثانية.

00:06.090 --> 00:09.970
NewTodo. tsx هو اسم ملف.

00:09.970 --> 00:13.060
هناك بالطبع ، نستورد رد الفعل من رد الفعل.

00:13.060 --> 00:16.170
ويمكنك بالطبع أيضًا بناء مكونات قائمة على الفصل.

00:16.170 --> 00:18.270
هذا أيضًا مدعوم بالكامل ، لكنني

00:18.270 --> 00:22.410
سأستخدم هذا النمط من المكونات الوظيفية الحديثة فقط.

00:22.410 --> 00:24.070
إذن لدينا هنا مرة أخرى دالة

00:24.070 --> 00:26.180
ستشكل المكون الخاص بنا لاحقًا.

00:26.180 --> 00:29.258
وأنا أقوم بتصدير NewTodo كإعداد افتراضي

00:29.258 --> 00:31.260
ودعنا نضيف تعيين نوع ودعنا

00:31.260 --> 00:33.021
نوضح أن هذا سيكون مكون

00:33.021 --> 00:34.410
دالة كتابة.

00:34.410 --> 00:35.800
وبالتالي ، بالطبع ، نفتقد

00:35.800 --> 00:38.220
بعض رموز jsx التي تم إرجاعها.

00:38.220 --> 00:39.730
لذا سأقوم هنا بإرجاع نموذج حيث

00:39.730 --> 00:42.030
أريد إضافة جميع عناصر التحكم التي أحتاجها للسماح

00:42.030 --> 00:43.780
للمستخدم بإضافة مهام جديدة.

00:45.060 --> 00:48.650
الآن دعنا نضيف مكون todo الجديد هذا في مكون التطبيق.

00:48.650 --> 00:53.650
لذا هنا يمكننا استيراد NewTodo من. / Components / NewTodo وأضفه

00:55.130 --> 00:58.095
ببساطة هنا بدلاً من التعليق.

00:58.095 --> 01:00.520
NewTodo كعنصر إغلاق ذاتي ، لأننا

01:00.520 --> 01:02.790
في الوقت الحالي لا نمرر أي شيء بين

01:02.790 --> 01:04.750
علامتي الافتتاح والختام وليس

01:04.750 --> 01:07.784
لدينا أيضًا أي دعائم هنا ، في الوقت الحالي

01:07.784 --> 01:09.263
على الأقل.

01:10.140 --> 01:11.540
لذلك بدلاً من هذا

01:11.540 --> 01:13.330
المكون ، يمكننا الآن

01:13.330 --> 01:16.190
إضافة إدخال وكذلك زر بعد ذلك.

01:16.190 --> 01:18.117
لذا أضف div هنا في الواقع

01:18.117 --> 01:20.020
حيث أريد الحصول على تصنيف

01:20.020 --> 01:24.880
به html لسمات للإشارة إليها دعنا نقول ، "todo-text".

01:24.880 --> 01:26.560
هذا كله مجرد ترميز

01:26.560 --> 01:31.250
هنا ، حيث أقول "Todo Text" ثم إدخال عنصر من نوع

01:31.250 --> 01:35.170
النص مع معرف "todo text" ، بحيث يتم توصيل

01:35.170 --> 01:36.900
التسمية والمدخلات

01:36.900 --> 01:39.640
بشكل صحيح.

01:39.640 --> 01:41.440
وتحت هذا div هنا ، بدلاً من النموذج

01:41.440 --> 01:43.120
سأضيف زرًا حيث أقول ، "إضافة

01:43.120 --> 01:44.437
TODO" ، ويجب أن يكون هذا

01:45.297 --> 01:47.970
الزر من نوع الإرسال حتى يقوم ، حسنًا ، بإرسال

01:47.970 --> 01:49.670
النموذج.

01:49.670 --> 01:51.900
هذا الآن نموذج أساسي للغاية يمكننا استخدامه

01:51.900 --> 01:53.143
لإضافة Todo جديد.

01:54.580 --> 01:57.060
الآن ، لنتأكد من أن هذا يعمل ، ولهذا

01:57.060 --> 01:59.660
لدينا بالفعل بضع خطوات مختلفة

01:59.660 --> 02:01.820
نحتاج إلى تطبيقها.

02:01.820 --> 02:05.020
نحتاج إلى الحصول على كل ما يدخله المستخدم هنا

02:05.020 --> 02:08.550
، ثم نحتاج إلى إعادة توجيه ما يدخله المستخدم هنا إلى

02:08.550 --> 02:09.810
مكون التطبيق لأن هذا

02:09.810 --> 02:13.330
هو المكان الذي سندير فيه مهامنا لاحقًا.

02:13.330 --> 02:16.150
لذا أولاً وقبل كل شيء ، دعونا نرد على نموذج التقديم ربما.

02:16.150 --> 02:18.050
يمكننا إضافة وظيفة جديدة

02:18.050 --> 02:20.300
، وبالتالي وظيفة في المكون الوظيفي

02:20.300 --> 02:22.720
، ولكن هذه ستكون الآن وظيفة عادية

02:22.720 --> 02:27.720
، والتي سنسميها ، "todoSubmitsHandler" ، أي اسم تريده.

02:28.210 --> 02:29.990
هذه وظيفة يجب تنشيطها كلما

02:29.990 --> 02:31.860
تم تقديم هذا النموذج.

02:31.860 --> 02:35.571
لذا يمكننا ربطه مع onSubmit prop هنا في النهاية

02:35.571 --> 02:38.770
، todoSubmitsHandler ، لا تنفذه ، فقط

02:38.770 --> 02:40.900
أشر إليه ، حتى يتم تنفيذه لنا

02:40.900 --> 02:43.810
متى تم إرسال هذا النموذج.

02:43.810 --> 02:46.270
الآن هنا نحصل على كائن حدث ويكون كائن

02:46.270 --> 02:49.507
الحدث من النوع رد فعل. FormEvent.

02:51.290 --> 02:54.010
الآن هناك أريد استدعاء حدث منع التقصير

02:54.010 --> 02:55.780
لمنع هذا الافتراضي ، وهو إرسال

02:55.780 --> 02:59.280
طلب حقيقي إلى الخادم الذي يخدم هذا التطبيق.

02:59.280 --> 03:01.520
هذا بالطبع ليس عندما أريد أن يحدث.

03:01.520 --> 03:04.680
أرغب في معالجة هذا الطلب هنا فقط في JavaScript

03:04.680 --> 03:08.350
وبالتالي يجب منع هذا المتصفح الافتراضي.

03:08.350 --> 03:09.770
الآن مع منع ذلك ، يمكننا

03:09.770 --> 03:12.610
الحصول على كل ما أدخله المستخدم في الإدخال

03:12.610 --> 03:15.250
ولهذا حصلنا على طريقتين مختلفتين.

03:15.250 --> 03:18.310
يمكننا إما إدارة حالة الإدخال هنا ، نوعًا

03:18.310 --> 03:20.970
من الربط ثنائي الاتجاه ، أو استخدام

03:20.970 --> 03:23.170
مرجع ، مرجع ، لاستخراج ما أدخله

03:23.170 --> 03:25.010
المستخدم هنا عند تقديم

03:25.010 --> 03:26.520
النموذج.

03:26.520 --> 03:28.410
سأذهب إلى النهج الأخير لأننا

03:28.410 --> 03:30.420
سنرى إدارة الحالة قيد التنفيذ

03:30.420 --> 03:33.470
في مكون التطبيق في ثانية على أي حال.

03:33.470 --> 03:37.340
لإعداد مثل هذا المرجع ، نقوم باستيراد الخطاف useRef

03:37.340 --> 03:40.580
من رد الفعل ، والخطافات هي وظائف خاصة يمكنك

03:40.580 --> 03:44.010
تنفيذها ومكونات وظيفية لإضافة وظائف معينة

03:44.010 --> 03:45.290
إلى المكون وعندما

03:45.290 --> 03:48.101
نقوم بتنفيذ useRef هنا ، فإن ما نعود

03:48.101 --> 03:51.190
إليه هو كائن Ref ، والتي يمكننا تخزينها

03:51.190 --> 03:53.730
بشكل ثابت وسأطلق عليها اسم "textInputRef"

03:53.730 --> 03:57.310
في الواقع.

03:57.310 --> 04:00.176
ويمكننا ، على سبيل المثال ، استخدام مثل

04:00.176 --> 04:04.980
هذا المرجع لتعيينه إلى عنصر dom ثم التفاعل مع عنصر dom هذا من داخل

04:04.980 --> 04:06.500
الكود لدينا هنا.

04:06.500 --> 04:08.800
على سبيل المثال ، عندما يتم تقديم هذا النموذج.

04:09.680 --> 04:11.510
لقد أنشأنا مثل هذا الاتصال

04:11.510 --> 04:14.020
عن طريق إضافة خاصية Ref الخاصة إلى

04:14.020 --> 04:16.580
أي عنصر html من اختيارك والإشارة إلى

04:16.580 --> 04:19.150
هذا الكائن الذي أنشأناه هنا.

04:19.150 --> 04:21.530
لذا أضف textInputRef.

04:21.530 --> 04:23.540
هذا يخلق اتصالا هنا.

04:23.540 --> 04:27.380
ومع ذلك ، ترى بالفعل مرة أخرى أن TypeScript لا يحب هذا.

04:27.380 --> 04:30.110
لأنه تبين أن useRef

04:30.110 --> 04:33.250
وظيفة عامة أيضًا.

04:33.250 --> 04:35.270
الآن أي نوع يمكننا تمريره إليه.

04:35.270 --> 04:37.340
ما الذي سيكون من المثير للاهتمام معرفته هنا؟

04:37.340 --> 04:39.200
حسنًا ، سيكون من المثير للاهتمام

04:39.200 --> 04:42.030
معرفة نوع البيانات التي سيتم تخزينها داخل الرسم

04:42.030 --> 04:43.970
البياني وبما أنك تشير إلى عنصر

04:43.970 --> 04:47.880
الإدخال ، سيكون لدينا عنصر إدخال html مخزّن هناك.

04:47.880 --> 04:50.420
الآن علينا جميعًا فقط توفير قيمة افتراضية

04:50.420 --> 04:51.840
للمرجع عند إعداده وهناك

04:51.840 --> 04:53.190
سنقدم قيمة خالية ، لأنه

04:53.190 --> 04:54.710
عندما يتم تقديم المكون لأول

04:54.710 --> 04:57.380
مرة ، عندما يتم تنفيذ هذا الرمز ، بالطبع لم

04:57.380 --> 04:59.460
يحدث هذا تم تقديمه هناك ، لذلك لن يشير

04:59.460 --> 05:01.590
هذا إلى أي شيء.

05:01.590 --> 05:03.350
بمجرد تقديم هذا ، سيتم

05:03.350 --> 05:04.950
إنشاء الاتصال وبعد

05:04.950 --> 05:07.040
ذلك سيعمل هذا المرجع.

05:07.040 --> 05:09.453
والآن هنا في todoSubmitHandler ، يمكننا الحصول

05:10.342 --> 05:15.342
على النص المُدخل باستخدام textInputRef. الحالي ، هذا دائمًا شيء تحتاج

05:15.500 --> 05:17.973
إلى إدخاله عند العمل مع

05:17.973 --> 05:21.440
المرجع ،. value of course هنا

05:21.440 --> 05:24.530
لأننا نعمل مع عنصر الإدخال html.

05:24.530 --> 05:27.940
ومع ذلك ، تكمن المشكلة هنا في أن هذا قد يكون فارغًا.

05:27.940 --> 05:29.630
إنها مشكلة نعرفها بالفعل ، لقد واجهنا

05:29.630 --> 05:31.790
هذا في وقت مبكر من الدورة التدريبية أيضًا

05:31.790 --> 05:33.370
عندما اخترنا شيئًا ما في Dom ولديناها

05:33.370 --> 05:34.630
هنا أيضًا ، لأن TypeScript

05:34.630 --> 05:37.020
لا يمكنها أن تعرف على وجه اليقين أن هذا الاتصال

05:37.020 --> 05:38.800
قد تم إنشاؤه.

05:38.800 --> 05:40.580
نحن نعلم ذلك ، وكتبنا الكود

05:40.580 --> 05:43.050
، لكن TypeScript للأسف لا تفهم أننا

05:43.050 --> 05:45.300
نقوم بإنشاء اتصال هناك.

05:46.310 --> 05:48.920
لذا ، لإصلاح هذا ، يمكننا إضافة علامة تعجب

05:48.920 --> 05:51.350
هنا ، لإخبار TypeScript مرة أخرى أن هذا

05:51.350 --> 05:54.350
سيكون جيدًا ، وأنه سيتم تعيينه ، ونحن جيدون.

05:54.350 --> 05:56.130
بالمناسبة ، يعد TypeScript

05:56.130 --> 05:58.920
صحيحًا إذا استدعينا todoSubmitHandler هنا

05:58.920 --> 06:00.590
، فسيتم استدعاء هذا الأمر

06:00.590 --> 06:02.410
إلى الأمام ، وقد تم تقديم هذا

06:02.410 --> 06:05.000
لأول مرة ومن ثم لم تتم تهيئة هذا بعد.

06:05.000 --> 06:07.910
نحن نعلم فقط أنه سيتم تهيئته على وجه اليقين

06:07.910 --> 06:09.730
لأننا نعلم أنه سيتم استدعاء

06:09.730 --> 06:10.830
هذا فقط عند تقديم

06:10.830 --> 06:13.830
النموذج ويمكن أن يحدث ذلك فقط بعد تقديمه.

06:13.830 --> 06:16.120
لذلك نحن نعرف الطريقة التي يعمل بها كودنا.

06:16.120 --> 06:18.360
هذا لن يكون باطل ابدا

06:18.360 --> 06:20.810
إذا كان هناك احتمال آخر ، فسيتعين عليك استخدام

06:20.810 --> 06:22.780
if-check هنا للتحقق مما إذا كان

06:22.780 --> 06:26.030
textInputRef. الحالي باطل وإذا كان كذلك

06:26.030 --> 06:27.620
، افعل شيئًا آخر.

06:27.620 --> 06:29.550
لكن هنا لا يمكن أن يحدث هذا.

06:29.550 --> 06:31.230
وبهذا نستخرج قيمة ويمكننا

06:31.230 --> 06:34.640
أن نواسيها. سجل هذا هنا لمعرفة ما إذا كان يعمل.

06:34.640 --> 06:37.040
لكن بالطبع لم يكن هذا هو الإعداد النهائي في ذلك الوقت.

06:37.040 --> 06:40.900
لذلك دعونا نحفظ هذا ، دعونا ندخل هنا ، وننهيها

06:40.900 --> 06:44.590
في شهر واحد ونضيف المهام ، ونراها هنا

06:44.590 --> 06:47.970
في سجلات وحدة التحكم.

06:47.970 --> 06:50.310
هذا يعمل بالطريقة التي ينبغي.

06:50.310 --> 06:51.910
ومع عملها بالطريقة التي يجب أن

06:51.910 --> 06:55.460
تعمل بها ، دعنا الآن نتأكد من حصولنا على هذه القيمة لمكون التطبيق.

06:55.460 --> 06:58.820
إذا كنت تعرف بعض ردود الفعل بالتأكيد جربها بنفسك أولاً.

06:58.820 --> 07:00.963
سنفعل ذلك معًا في المحاضرة التالية.
