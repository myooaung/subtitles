WEBVTT

00:02.490 --> 00:03.860
男性講師：そこで､ IDEを設定したのですが､

00:03.860 --> 00:04.860
これが重要です｡

00:04.860 --> 00:07.780
このプロジェクトは､ このコース全体を通して､

00:07.780 --> 00:11.250
さまざまなコースモジュールで使用します｡

00:11.250 --> 00:13.230
つまり､ 基本的には､ すべてのコースモジュールを開始し､

00:13.230 --> 00:18.339
そこでコードを書くことができるように､ プロジェクトを設定します｡

00:18.339 --> 00:20.730
さて､ このコースを通じてお分かりのように､

00:20.730 --> 00:24.330
コードを書くには一般的に複雑な設定は必要ありません｡

00:24.330 --> 00:33.530
しかし､ ここでは､ コードを書いてコンパイルし､ その出力をすぐにブラウザで見ることができるプロジェクトが欲しいのです｡

00:33.530 --> 00:36.970
そしてそのために､ まず新しいインデックスのHTMLファイルを追加します｡ 

00:36.970 --> 00:39.520
他の2つのファイルやフォルダは､

00:39.520 --> 00:42.620
バージョン管理をするためのgitの設定ファイルと､

00:42.620 --> 00:50.200
ズームレベルを設定するエディターの設定ファイルです｡

00:50.200 --> 00:51.670
というわけで､ ここでは以上です｡ 

00:51.670 --> 00:56.750
しかし､ そのindex HTMLファイルでは､ これからベーススケルトンを使って初期化します｡

00:56.750 --> 00:58.390
もしこのメニューが表示されない場合は､

00:58.390 --> 01:06.820
コントロールキーとスペースキーを押してください｡

01:06.820 --> 01:09.600
html:5を選んでエンターキーを押すと､

01:09.600 --> 01:11.740
このようなスケルトンになります｡

01:11.740 --> 01:14.670
ここでタイトルとしてTypeScriptの理解を入力してもいいのですが､

01:14.670 --> 01:16.722
それはあまり重要ではありません｡

01:16.722 --> 01:21.150
さらに重要なのは､ ここではheadセクションにscriptタグを追加し､

01:21.150 --> 01:29.020
sourceを追加してappを指定することです｡

01:29.020 --> 01:29.020
jsをここに追加し､ defer属性を追加します｡ 

01:29.020 --> 01:34.520
これはアプリをインポートしようとするものです｡  js ファイルは､ もちろん今は存在しません｡

01:34.520 --> 01:35.530
そして､ それを見つけたら､

01:35.530 --> 01:37.960
もちろん実行もします｡

01:37.960 --> 01:44.790
これにより､ 私たちの変更点､ コードの変更点をブラウザの画面上で直接確認することができるようになりました｡

01:44.790 --> 01:47.410
あるいは､ コンソールに何かを記録するだけなら､

01:47.410 --> 01:49.560
ブラウザのdefツールで｡

01:49.560 --> 01:52.250
次に､ アプリを追加します｡  tsファイルです｡ 

01:52.250 --> 01:55.530
これがTypeScriptのファイルで､ ここにコードを書いていくことになります｡

01:55.530 --> 01:58.580
そしてそこで､ 例えば､ あなたのコードはここに行く､

01:58.580 --> 02:01.580
とコンソールログすることもできます｡

02:01.580 --> 02:03.780
ここで好きなようにコンソールログを取ることができます｡ 

02:03.780 --> 02:09.280
そうすると､ 先ほどインストールしたTypeScriptでこのファイルをコンパイルすることができます｡

02:09.280 --> 02:10.880
そのためには､ ターミナルを開いて､

02:10.880 --> 02:13.070
ここのエディタに統合してください｡

02:13.070 --> 02:16.580
そして､ 単純にtsc appと書きます｡  ツ｡ 

02:16.580 --> 02:18.490
このTypeScriptファイルをコンパイルして､

02:18.490 --> 02:22.530
アプリを生成します｡ js ファイルをインポートします｡

02:22.530 --> 02:27.120
そして､ 今､ このインデックスを開くと htmlファイルでは､ ここで起こることは何でも見ることができます｡

02:27.120 --> 02:29.800
ここに書いた理屈を一蹴するんですね｡ 

02:29.800 --> 02:32.340
そして､ それはdom上の何かを操作するロジックであるか､

02:32.340 --> 02:37.870
今回のように単にコンソールにロックされるロジックであるかのどちらかです｡

02:37.870 --> 02:41.700
そこで今回は､ このHTMLファイルをブラウザで開いてみました｡ 

02:41.700 --> 02:44.460
IDEの外でダブルクリックするだけでいいのです｡ 

02:44.460 --> 02:47.960
だから､ 通常のWindowsのエクスプローラでも､ Macのファインダでも｡ 

02:47.960 --> 02:49.910
そして､ コンソールに何かログを記録しているのであれば､

02:49.910 --> 02:54.010
開発者ツールを開くと､ ここにログが表示されるでしょう｡

02:54.010 --> 02:56.690
これはいいことなのですが､ コードの中で何かを変更するたびに､

02:56.690 --> 03:02.340
手動で再コンパイルする必要があります｡

03:02.340 --> 03:04.300
コースの後半で変更になります｡ 

03:04.300 --> 03:07.970
しかし､ ここでこのページを手動で再読み込みする必要もあるのです｡ 

03:07.970 --> 03:10.140
また､ この作業を高速化し､

03:10.140 --> 03:22.360
何かを変更するたびにこの作業を行う必要がないようにするために､ このダミーセットアップに別のツールを追加しておきます｡

03:22.360 --> 03:23.720
さて､ このようなツールをインストールするために､

03:23.720 --> 03:26.430
ここでnpm initを実行してみましょう｡

03:26.430 --> 03:29.830
このプロジェクトフォルダでは､ node JSをインストールした場合､

03:29.830 --> 03:32.113
npmコマンドが利用できます｡

03:32.960 --> 03:36.050
そのために､ nodejsにアクセスすることを確認してください｡  orgからダウンロードし､

03:36.050 --> 03:39.690
ここにある最新版をインストールしてください｡

03:39.690 --> 03:43.040
今のところ､ node JSのコードは書きませんが､ node JSにはNPMというツールが付属しており､

03:43.040 --> 03:51.210
これを使うとサードパーティの依存関係や､ 開発を加速させる便利なツールをインストールすることができます｡

03:51.210 --> 03:53.840
そのために､ ここに必要なのです｡ 

03:53.840 --> 03:55.970
そのため､ これをインストールした状態で､ このプロジェクトフォルダ内でnpm

03:55.970 --> 03:57.800
initを実行します｡

03:57.800 --> 03:58.740
エンターキーをずっと押すだけで､

03:58.740 --> 04:03.570
ここにあるすべての質問にデフォルトで答えることができます｡

04:03.570 --> 04:08.150
そして､ これが完了すると､ パッケージが渡されるのです｡  jsonファイルには､ 次のようなものがあります｡

04:08.150 --> 04:14.410
そして､ このプロジェクト専用の依存関係をインストールするために､ npm installを実行することができます｡

04:14.410 --> 04:17.730
つまり､ 開発中に役立つツールで､

04:17.730 --> 04:29.930
メインコードの一部として実行されるコードを含まないものです｡

04:29.930 --> 04:33.470
そして､ ツール名はlite-serverです｡ 

04:33.470 --> 04:37.103
ここでエンターキーを押すと､ この追加ツールがインストールされます｡ 

04:38.230 --> 04:42.000
そして､ これが終わったら､ そのままパッケージの中に入ってください｡  jsonファイルを開き､ scriptsの部分にカンマを追加し､

04:42.000 --> 04:46.870
startと名付けた新しいスクリプトを追加します｡

04:46.870 --> 04:49.029
そして､ 二重引用符の間に値として､

04:49.029 --> 04:51.570
lite-serverを入力します｡

04:51.570 --> 04:54.580
つまり､ ここに追加されたパッケージの名前です｡ 

04:54.580 --> 04:59.400
ここでEnterキーを押すと､ ここでnpm startを実行して､ このスタートスクリプトを起動することができます｡

04:59.400 --> 05:05.430
そして､ liteサーバーは､ 常にインデックスを提供するシンプルな開発用サーバーです｡

05:05.430 --> 05:05.430
htmlファイルの横にある｡

05:05.430 --> 05:08.410
jsonファイルなので､ このファイル｡ 

05:08.410 --> 05:16.143
そして､ ここに表示されているURL､ デフォルトではlocalhost:3000でアプリケーションを提供します｡

05:17.440 --> 05:19.690
そして､ この場所を訪れればいいのです｡ 

05:19.690 --> 05:23.090
ブラウザでlocalhost:3000を入力するだけです｡ 

05:23.090 --> 05:24.860
そして､ あなたのコードはここで実行されます｡ 

05:24.860 --> 05:26.170
そして､ なぜこの方がいいのか？

05:26.170 --> 05:28.840
さて､ これでこのディレクトリにある別のファイルが変更されるたびに､

05:28.840 --> 05:32.180
自動的にページが再読み込みされるようになりました｡

05:32.180 --> 05:35.130
例えば､ ここに感嘆符を追加して保存し､ これを再びtsc

05:35.130 --> 05:40.323
appでコンパイルするとします｡

05:40.323 --> 05:40.323
TSで､

05:42.270 --> 05:47.230
ブラウザに戻ると､ 自動的に再読み込みされるので､ すぐに最新の出力が表示されます｡

05:47.230 --> 05:51.690
そして､ それは単に手動でリロードする余分な作業を省くだけなのです｡

05:51.690 --> 05:54.540
さて､ このnpm startプロセスについて重要なことは､

05:54.540 --> 06:02.800
プロジェクトで作業している限り､ ブラウザで実行されるのを見たいコードを書いている限り､ 絶対にこのプロセスを実行し続けることです｡

06:02.800 --> 06:06.450
終了したら､ コントロールCでいつでもこの処理を終了できますが､

06:06.450 --> 06:11.600
そうすると､ プロジェクトはもはやローカルホスト3000で提供されなくなります｡

06:11.600 --> 06:15.650
ですから､ あなたがコードを書き､ 変更を加える限り､ それを稼働させ続けることができるのです｡

06:15.650 --> 06:19.200
それで､ 私は元に戻しますが､ これは完全にあなた次第です｡

06:19.200 --> 06:22.410
そして､ これがこのコースを通して使うプロジェクトの設定です｡

06:22.410 --> 06:25.530
もちろん､ 完成形でも添付されていますよ｡

06:25.530 --> 06:27.250
ただ､ ひとつだけ重要なことがあります｡ 

06:27.250 --> 06:30.330
もし､ 添付のスタートプロジェクト､ または他のコースのスナップショット､

06:30.330 --> 06:41.070
コースのどこかにある他のコードのスナップショットをダウンロードすると､ このノードモジュールフォルダを含まないダウンロードを取得することになります｡

06:41.070 --> 06:46.970
これは巨大なフォルダで､ 最終的にはすべてのサードパーティーパッケージとその依存関係を格納します｡

06:46.970 --> 06:52.260
そして､ あまりにも巨大なので､ npm installを実行すれば簡単に再作成できるので､

06:52.260 --> 06:54.080
通常は削除しています｡

06:54.080 --> 06:56.640
私の添付ファイルをダウンロードしたら､ 解凍したフォルダに移動して､

06:56.640 --> 07:01.530
そのフォルダでnpm installを実行してください｡

07:01.530 --> 07:03.341
そして､ これはすべての依存関係をインストールし､

07:03.341 --> 07:06.110
このノードモジュールフォルダを再作成します｡

07:06.110 --> 07:07.280
そして､ これができたら､ npm

07:07.280 --> 07:11.330
startを実行したり､ このプロジェクトでやりたいことを何でもできるようになります｡

07:11.330 --> 07:14.750
これで､ このコースで使用するプロジェクトのセットアップができました｡

07:14.750 --> 07:18.303
さて､ これ以上時間を無駄にせず､ さっそく始めてみましょう｡
