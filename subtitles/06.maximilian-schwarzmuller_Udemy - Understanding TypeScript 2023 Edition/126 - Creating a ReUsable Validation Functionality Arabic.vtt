WEBVTT

00:02.160 --> 00:06.060
المدرب: حسنًا ، ماذا يمكننا أن نتحدث عن التحقق من الصحة؟

00:06.060 --> 00:10.450
حسنًا ، ربما ، لنبدأ بالنتيجة النهائية المرجوة.

00:10.450 --> 00:14.850
فكرتي هي أنه لدينا لاحقًا بعض وظائف التحقق من الصحة والتي

00:14.850 --> 00:17.950
لم تكن موجودة بعد ، ولكن لدينا لاحقًا ،

00:17.950 --> 00:21.230
والتي قمت بتمرير العنوان المدخل إليها ،

00:21.230 --> 00:25.360
أو في الواقع كائن تكوين سأقوله حيث القيمة هي العنوان

00:25.360 --> 00:27.900
المدخل ، وبالتالي فإن الشيء ليتم

00:27.900 --> 00:30.300
التحقق من صحتها.

00:30.300 --> 00:33.260
ولكن حيث لدي أيضًا خصائص إضافية

00:33.260 --> 00:37.350
تخبر وظيفة التحقق بكيفية التحقق من

00:37.350 --> 00:39.130
صحتها.

00:39.130 --> 00:43.210
على سبيل المثال ، لقد طلبنا هنا ضبطه على صحيح

00:43.210 --> 00:47.009
، وضبط minLength على خمسة لفرض خمسة أحرف

00:47.009 --> 00:48.360
، وهكذا.

00:48.360 --> 00:50.040
ثم نقوم بهذا هنا لجميع المدخلات

00:50.040 --> 00:51.540
الثلاثة ، والتحقق من الصحة

00:51.540 --> 00:53.900
هو دالة ترجع صوابًا إذا كانت صحيحة

00:53.900 --> 00:56.620
، وخطأ إذا لم تكن صالحة ، وفي النهاية ، يمكن

00:56.620 --> 00:59.580
أن يكون لدينا شيء مثل هذا.

00:59.580 --> 01:04.580
أو دخلت الوصف ودخلت الناس ، فستكون هذه الفكرة

01:04.790 --> 01:06.790
تقريبًا.

01:06.790 --> 01:09.210
بالطبع ، إنها مجرد طريقة واحدة لتنفيذ

01:09.210 --> 01:11.703
ذلك ، لكنها طريقة أحبها كثيرًا.

01:12.600 --> 01:15.320
لذلك ، في الجزء العلوي من الملف

01:15.320 --> 01:19.470
، سأضيف بعض منطق التحقق من الصحة.

01:19.470 --> 01:22.380
ومرة أخرى ، هناك العديد من الطرق للقيام بذلك.

01:22.380 --> 01:24.390
سأبدأ أولاً بتحديد بنية

01:24.390 --> 01:27.840
مثل هذا الكائن القابل للتحقق.

01:27.840 --> 01:31.280
إذن هذا الكائن نمرره إلى وظيفة التحقق

01:31.280 --> 01:33.430
، لأنه بالطبع يحتاج دائمًا

01:33.430 --> 01:37.820
إلى بنية مماثلة مع قدر معين من الخصائص التي يمكن

01:37.820 --> 01:40.100
أن تكون موجودة وأنواع معينة

01:40.100 --> 01:42.410
من الخصائص ، بحيث تعرف وظيفة

01:42.410 --> 01:44.950
التحقق فعليًا ما تعمل به ويمكنها

01:44.950 --> 01:47.400
خصائص استخراج بشكل صحيح وهلم

01:47.400 --> 01:49.870
جرا.

01:49.870 --> 01:52.850
لذلك ، سأبدأ بتحديد الواجهة.

01:52.850 --> 01:55.380
يمكننا أيضًا اختيار نوع مخصص ، الأمر متروك

01:55.380 --> 01:56.550
لك تمامًا.

01:56.550 --> 01:58.690
نظرًا لأنني سأحدد بنية الكائن

01:58.690 --> 02:02.793
، فأنا دائمًا من أشد المعجبين بتحديد الواجهة فقط.

02:03.810 --> 02:06.700
سأطلق عليه اسم Validatable

02:06.700 --> 02:09.940
هنا ، لأنه يصف كائنًا قابلاً

02:09.940 --> 02:13.300
للتحقق ، وسيكون له قيمة يجب أن

02:13.300 --> 02:17.140
تكون سلسلة أو رقمًا أيضًا.

02:17.140 --> 02:18.980
سيكون لها خاصية مطلوبة ، والتي

02:18.980 --> 02:21.240
سيكون لها قيمة منطقية ، سواء كانت

02:21.240 --> 02:22.630
صحيحة أم خاطئة.

02:22.630 --> 02:26.470
ثم لنفترض أننا ندعم التحقق من صحة minLength ، والذي

02:26.470 --> 02:28.212
يجب أن يكون رقمًا ، والطول

02:28.212 --> 02:30.220
الأقصى الذي يجب أن يكون رقمًا

02:30.220 --> 02:32.510
، وكذلك في حالة الحصول على رقم

02:32.510 --> 02:35.240
، وقيمة min ، وقيمة قصوى.

02:35.240 --> 02:37.417
الفرق بين minLength و maxLength

02:37.417 --> 02:40.310
هو أن هذا يتحقق من طول السلسلة ، وهذه

02:40.310 --> 02:42.320
قيمة الرقم إذا كانت أعلى

02:42.320 --> 02:43.960
من رقم معين أو أقل من

02:43.960 --> 02:46.010
حد أقصى معين.

02:46.010 --> 02:48.870
هذه هي الخصائص التي أريد دعمها.

02:48.870 --> 02:50.470
الآن بجانب القيمة ، يجب

02:50.470 --> 02:52.140
أن تكون جميعها اختيارية

02:52.140 --> 02:54.410
، والتي يمكننا فرضها عن طريق إضافة

02:54.410 --> 02:57.650
علامة استفهام بعد الأسماء.

02:57.650 --> 03:00.070
بالمناسبة ، البديل لاستخدام علامة

03:00.070 --> 03:02.720
الاستفهام هو السماح بقيم غير محددة.

03:02.720 --> 03:04.880
علامة الاستفهام تفعل الشيء نفسه.

03:04.880 --> 03:09.370
تقول أن المطلوب هو إما منطقي أو غير محدد.

03:09.370 --> 03:12.610
الآن لدينا واجهة قابلة للتحقق.

03:12.610 --> 03:13.893
ماذا يمكننا ان نفعل مع ذلك؟

03:14.930 --> 03:17.893
حسنًا ، الآن مع إنشاء تلك الواجهة ، يمكننا

03:18.830 --> 03:21.330
إنشاء هذه الوظيفة ، وظيفة التحقق

03:21.330 --> 03:24.220
من الصحة التي أبحث عنها.

03:24.220 --> 03:27.410
يجب أن يحصل على مثل هذا الكائن القابل للتحقق.

03:27.410 --> 03:32.410
لذا فإن ValidatableInput من النوع Validatable.

03:32.410 --> 03:33.450
هذه فكرتي هنا.

03:33.450 --> 03:36.400
لذلك يحصل على جسم له هذه البنية.

03:36.400 --> 03:38.270
والآن هناك ، يمكننا

03:38.270 --> 03:41.670
التحقق من وجود كل هذه الخصائص ثم

03:41.670 --> 03:44.810
إجراء التحقق المناسب.

03:44.810 --> 03:46.150
الآن ما الذي سنفعله بالضبط

03:46.150 --> 03:48.200
في وظيفة التحقق من الصحة؟

03:48.200 --> 03:49.033
حسنًا ، في النهاية

03:49.033 --> 03:50.930
هنا ، أريد إنشاء متغير isValid ، وهو

03:50.930 --> 03:52.330
صحيح في البداية.

03:52.330 --> 03:54.030
لذا فإن الافتراض الافتراضي

03:54.030 --> 03:55.510
هو أن ما نحصل عليه صحيح.

03:55.510 --> 03:57.430
لكننا سنقوم بتعيينها على "خطأ"

03:57.430 --> 04:01.330
بمجرد فشل واحد على الأقل من عمليات التحقق الخاصة بنا.

04:01.330 --> 04:03.480
والآن لنبدأ بالتحقق الأول.

04:03.480 --> 04:06.410
دعونا نرى ما إذا كان المدخلات الصالحة هنا

04:06.410 --> 04:08.220
، هذه الحجة التي نحصل عليها

04:08.220 --> 04:11.380
، إذا كانت تحتوي على خاصية مطلوبة؟

04:11.380 --> 04:13.260
إذا لم يكن ذلك غير محدد.

04:13.260 --> 04:16.490
إذا تم تعيين هذا ، وإذا كان صحيحًا ، فهذا

04:16.490 --> 04:18.630
يعني أن القيمة مطلوبة ويجب

04:18.630 --> 04:20.630
ألا تكون فارغة.

04:20.630 --> 04:22.080
الآن هنا ، يمكننا

04:22.080 --> 04:26.160
تعيين isValid يساوي isValid والطريقة التي يعمل

04:26.160 --> 04:27.700
بها JavaScript ، وهذا

04:27.700 --> 04:30.550
يضمن أن القيمة الجديدة لـ isValid

04:30.550 --> 04:34.330
ستكون خطأ إذا كان الشيء التالي و false.

04:34.330 --> 04:36.870
لأنه إذا كان أحد الأمرين على الأقل خاطئًا ، فستكون

04:36.870 --> 04:38.660
القيمة الإجمالية خاطئة.

04:38.660 --> 04:40.500
الآن isValid في البداية

04:40.500 --> 04:44.070
صحيح ، ولكن إذا كان الشيء بعد المنطق والعامل

04:44.070 --> 04:46.300
خطأ ، فسيكون isValid خطأ.

04:46.300 --> 04:48.700
وفي النهاية سأعود هو صالح.

04:48.700 --> 04:50.040
إذن ماذا نضيف

04:50.040 --> 04:53.550
الآن بعد رمزي العطف؟

04:53.550 --> 04:57.290
حسنًا ، أريد التحقق من صحة الإدخال. القيمة ، إذا كانت

04:57.290 --> 04:58.170
فارغة.

04:58.170 --> 05:00.530
ومن أجل ذلك ، يمكننا قصه

05:00.530 --> 05:04.210
والتحقق من الطول ، أم يمكننا ذلك؟

05:04.210 --> 05:05.630
حسنًا ، المشكلة هي أننا لا

05:05.630 --> 05:07.510
نعرف ما إذا كانت القيمة سلسلة.

05:07.510 --> 05:09.090
إنها سلسلة أو رقم.

05:09.090 --> 05:10.910
لذلك ليس مضمونًا أن تكون سلسلة

05:10.910 --> 05:12.140
، وبالتالي فإن طريقة

05:12.140 --> 05:14.100
القطع ليست متاحة دائمًا.

05:14.100 --> 05:17.570
الآن هناك طرق مختلفة للتغلب على ذلك.

05:17.570 --> 05:19.600
يمكننا إضافة نوع guard ، يمكننا التحقق مما

05:19.600 --> 05:23.390
إذا كان typeof validatableInput. القيمة تساوي السلسلة

05:25.250 --> 05:30.250
، وقم بإجراء هذا الفحص فقط إذا كانت كذلك.

05:30.920 --> 05:33.040
لكن في الواقع سيكون هذا زائدا قليلا.

05:33.040 --> 05:36.120
ما يمكننا القيام به هنا بسيط للغاية.

05:36.120 --> 05:37.257
يمكننا ببساطة أن نقول

05:37.257 --> 05:39.140
"حسنًا ، قم بتحويلها إلى سلسلة. إذا كان رقمًا ، فهو الآن سلسلة مرة أخرى.

05:39.140 --> 05:41.370
إذا كانت سلسلة ، فلن يتغير شيء.

05:41.370 --> 05:44.170
وبهذا ، نقوم بذلك.

05:44.170 --> 05:45.900
الآن أنا فقط بحاجة إلى إضافة الشيك الخاص

05:45.900 --> 05:47.950
بي هنا للتحقق مما إذا كان هذا هو صفر.

05:47.950 --> 05:50.360
أو على وجه الدقة ، إذا لم يكن صفرًا.

05:50.360 --> 05:53.463
لذلك إذا لم يكن صفرًا ، فسيعود هذا

05:54.680 --> 05:56.810
إلى القيمة true ، ويظل

05:56.810 --> 05:58.740
isValid صحيحًا.

05:58.740 --> 06:00.500
إذا كانت صفرًا ، إذا كان طولها صفرًا

06:00.500 --> 06:02.760
، وإذا كانت فارغة ، فسيتم إرجاع خطأ ، وبالتالي

06:02.760 --> 06:04.940
يصبح isValid غير صحيح.

06:04.940 --> 06:06.890
ونحن نتحقق من هذا فقط إذا تم

06:06.890 --> 06:08.280
وضع علامة على الشيك

06:08.280 --> 06:11.190
المطلوب بالإعداد المطلوب على "صواب".

06:11.190 --> 06:13.530
هذا هو أول فحص أريد إجراؤه هنا.

06:13.530 --> 06:15.560
إنه ليس الوحيد بالطبع.

06:15.560 --> 06:17.660
يمكننا المتابعة والتحقق من

06:17.660 --> 06:18.950
صحة الإدخال. تم تعيين minLength ،

06:18.950 --> 06:23.880
إذا تم تعيين minLength ، فيجب أن يكون لهذه

06:23.880 --> 06:25.190
السلسلة التي نحصل عليها

06:25.190 --> 06:27.050
حد أدنى معين من الطول.

06:27.050 --> 06:28.780
هام ، يجب أن يكون للسلسلة

06:28.780 --> 06:30.440
حد أدنى معين من الطول.

06:30.440 --> 06:31.620
لا نهتم بالأرقام هنا ، فنحن

06:31.620 --> 06:33.600
لا نتحقق من الحد الأدنى لقيمة الرقم.

06:33.600 --> 06:37.060
لذلك يمكننا هنا بالفعل إضافة نوع guard ، يمكننا

06:37.060 --> 06:40.390
دمجه في هذا الفحص ، والتحقق مما إذا كان typeof

06:40.390 --> 06:42.320
validatableInput. القيمة تساوي

06:42.320 --> 06:46.910
السلسلة.

06:46.910 --> 06:48.460
إذا لم يكن الأمر كذلك ، فلن نحتاج إلى الخوض

06:48.460 --> 06:50.357
في هذا إذا تحقق لأنه لا يوجد شيء للتحقق منه.

06:50.357 --> 06:52.570
إذا كانت قيمتنا عبارة عن رقم ، فنحن لا نهتم بهذا الأمر.

06:52.570 --> 06:55.330
إذا حددنا حدًا أدنى لطول رقم ، فإننا

06:55.330 --> 06:57.710
نتخطى هذا الاختيار بشكل أساسي

06:57.710 --> 06:59.330
لأنه لا معنى له.

06:59.330 --> 07:01.890
إذا كان لدينا سلسلة على الرغم من

07:01.890 --> 07:03.420
ذلك ، وتم تعيين minLength

07:03.420 --> 07:05.663
، فأنا أرغب في تعيين isValid

07:06.570 --> 07:10.053
يساوي isValid ، ثم التحقق مرة أخرى.

07:11.181 --> 07:12.600
والتحقق هنا

07:12.600 --> 07:16.580
هو ما إذا كان ValidatableInput. القيمة ، التي نعرف أنها سلسلة عند هذه

07:16.580 --> 07:20.810
النقطة هنا ، الطول ،

07:20.810 --> 07:24.070
أكبر من المدخلات الصالحة. طول دقيقة.

07:24.070 --> 07:28.520
أكبر من القيمة التي تم تحديدها هنا.

07:28.520 --> 07:31.660
الآن لدينا مشكلة واحدة محتملة هنا ، وهل

07:31.660 --> 07:33.920
ترى أيها يمكن أن يكون؟

07:33.920 --> 07:36.163
يجب أن يعمل هذا بشكل عام ، لكنه سيفشل إذا

07:37.030 --> 07:38.630
تم ضبط minLength على صفر.

07:38.630 --> 07:42.210
ربما لا يكون نية المطور من تعيينه إلى

07:42.210 --> 07:45.760
الصفر هو تخطي هذا الفحص ، ولكن للتحقق

07:45.760 --> 07:48.760
مما إذا كان لدينا الحد الأدنى للطول

07:48.760 --> 07:50.170
وهو صفر.

07:50.170 --> 07:51.960
حسنًا ، يمكن القول إنه فحص زائد عن الحاجة

07:51.960 --> 07:53.800
، لأنه يتحقق أساسًا مما إذا كان لدينا

07:53.800 --> 07:55.850
أي شيء على الإطلاق ، وهو ما نقوم به بالفعل

07:55.850 --> 07:57.260
مع الشيك المطلوب.

07:57.260 --> 07:59.300
لذا فهي ليست مشكلة كبيرة.

07:59.300 --> 08:01.330
ومع ذلك ، إذا كنت تريد أن تكون

08:01.330 --> 08:04.150
آمنًا للغاية هنا ، فيجب أن نتحقق بالفعل

08:04.150 --> 08:05.470
من صحة الإدخال. minLength لا يساوي undefined.

08:05.470 --> 08:10.470
أو لا يساوي قيمة خالية ، بعلامة تساوي

08:10.640 --> 08:14.910
واحدة ، وهذا يشمل قيمة خالية وغير محددة ، وهذه هي الطريقة التي

08:14.910 --> 08:17.130
يعمل بها JavaScript.

08:17.130 --> 08:18.890
هذا أكثر أمانًا بعض الشيء ،

08:18.890 --> 08:20.470
لأننا الآن نتأكد من إجراء

08:20.470 --> 08:23.010
هذا الفحص دائمًا حتى إذا تم ضبط minLength

08:23.010 --> 08:25.140
على صفر ، وهي قيمة خاطئة.

08:25.140 --> 08:27.222
مرة أخرى ، يمكنك أن تجادل إذا كان ذلك

08:27.222 --> 08:29.740
منطقيًا ، لأنه في الأساس نفس الفحص الموجود

08:29.740 --> 08:32.270
هناك ، ولكن مع ذلك ، أريد أن أقوم به هنا.

08:32.270 --> 08:34.930
إذن هذا هو الحد الأدنى للطول.

08:34.930 --> 08:36.790
الآن سأقوم بنسخ هذا ، وسأفعل الشيء

08:36.790 --> 08:38.130
نفسه مع maxLength.

08:38.130 --> 08:40.720
يتم تحديد maxLength هنا

08:40.720 --> 08:44.350
أيضًا ، هنا وأيضًا للسلاسل فقط.

08:44.350 --> 08:46.870
وبالطبع هنا علينا فقط إعادة هذا.

08:46.870 --> 08:49.280
نريد التأكد من أن طول القيمة

08:49.280 --> 08:52.380
المقدمة أقل من الحد الأقصى للطول.

08:52.380 --> 08:55.173
حسنًا ، والآن نحصل على شيكين آخرين متبقيين للقيمة

08:56.810 --> 08:58.760
الدنيا والقيمة القصوى والتي لا معنى

08:58.760 --> 09:00.160
لها إلا لرقم.

09:00.160 --> 09:03.310
لذا سأضيف هنا شيكًا آخر وأتحقق مما إذا

09:03.310 --> 09:05.150
كان الإدخال صالحًا. دقيقة لا تساوي

09:05.150 --> 09:08.280
فارغة.

09:09.720 --> 09:11.100
مرة أخرى ، أنا لا أتحقق فقط

09:11.100 --> 09:13.820
من المصداقية ، لأن ذلك سيواجه مشاكل بقيمة صفر.

09:13.820 --> 09:17.050
وبعد ذلك سأتحقق مما إذا كان نوع الإدخال القابل للتحقق. القيمة تساوي

09:17.050 --> 09:21.770
الرقم.

09:21.770 --> 09:23.250
لأنني لا أرى فائدة كبيرة

09:23.250 --> 09:25.640
في التحقق من هذا لسلسلة.

09:25.640 --> 09:26.760
إذا كنت تريد التحقق من وجود سلسلة

09:26.760 --> 09:28.020
، فبالطبع يمكنك حذف هذا.

09:28.020 --> 09:29.680
ثم عليك فقط التأكد من تحويل

09:29.680 --> 09:32.120
القيمة إلى رقم عند استخدامه في الشيك

09:32.120 --> 09:34.380
الذي نحن على وشك كتابته.

09:34.380 --> 09:35.970
الشيك الذي نحن على وشك كتابته

09:35.970 --> 09:37.220
، مرة أخرى ، يستخدم القيمة

09:37.220 --> 09:39.740
القديمة لـ isValid ودمجها مع شيك جديد ثم تخزينها

09:39.740 --> 09:41.500
مرة أخرى في isValid.

09:41.500 --> 09:44.000
ويجب أن يتضمن الشيك الجديد الآن

09:44.000 --> 09:47.210
رقمنا جيدًا والتحقق مما إذا كان أكبر من قيمة

09:47.210 --> 09:48.730
الحد الأدنى.

09:48.730 --> 09:54.650
حتى هنا أتحقق مما إذا كان المدخلات الصالحة. القيمة أكبر من validatableInput.

09:54.650 --> 09:54.650
دقيقة.

09:54.650 --> 09:58.690
والآن يمكننا تكرار هذا من أجل

09:58.690 --> 10:02.010
max ، لذا نحتاج هنا إلى max ، وهنا نحتاج أيضًا

10:02.010 --> 10:06.190
إلى max ونحتاج إلى تغيير هذا هنا إلى رمز أصغر من.

10:06.190 --> 10:10.363
من خلال ذلك ، نتحقق من جميع السيناريوهات المختلفة التي يمكن

10:11.920 --> 10:13.230
أن تكون لديك هنا.

10:13.230 --> 10:16.930
ونحن نعود هو صالح.

10:16.930 --> 10:18.710
الآن نحتاج فقط إلى إنشاء كائنات

10:19.840 --> 10:21.600
تلتزم بهذه الواجهة ثم إرسالها

10:21.600 --> 10:23.630
إلى وظيفة التحقق من الصحة.

10:23.630 --> 10:26.573
لذلك ، دعنا ننتقل إلى إدخال المشروع

10:28.160 --> 10:31.360
، وهناك في collectUserInput أريد إنشاء

10:31.360 --> 10:34.000
كائن قابل للتحقق.

10:34.000 --> 10:36.360
ملاحظة جانبية ، إلى جانب الواجهة ، بالطبع كان

10:36.360 --> 10:38.420
بإمكاننا أيضًا إنشاء فصل دراسي هنا ، ثم

10:38.420 --> 10:40.870
يمكننا إنشاء مثيل له باستخدام الكلمة الأساسية

10:40.870 --> 10:43.570
الجديدة ، ولكن كل ذلك لأغراض التدريب والعروض التوضيحية

10:43.570 --> 10:46.070
هنا أريد أن أوضح كيف يعمل هذا مع الواجهة.

10:46.070 --> 10:48.990
إذن لدينا هنا عنواننا صالح ، والذي يجب

10:48.990 --> 10:51.900
أن يكون من النوع Validatable.

10:52.850 --> 10:54.970
وهذا بالطبع شيء يحتاج

10:54.970 --> 10:56.830
إلى خاصية قيمة.

10:56.830 --> 10:58.930
وهذا هو عنواننا المدخل.

10:58.930 --> 11:01.020
لا تحتاج إلى أي خصائص أخرى ولكن

11:01.020 --> 11:03.550
أريد التحقق مما إذا كانت ليست فارغة

11:03.550 --> 11:06.750
، لذلك سنقوم بتعيين المطلوب على صحيح.

11:06.750 --> 11:08.743
وبعد ذلك يمكننا نسخ ذلك

11:09.710 --> 11:12.430
وتكرار ذلك للوصف وللناس.

11:12.430 --> 11:16.270
وهنا لدينا الوصف ، عفوًا ، الوصف

11:16.270 --> 11:19.250
الذي تم إدخاله أعني.

11:19.250 --> 11:21.880
هنا دخلنا الناس.

11:21.880 --> 11:24.260
لأكون دقيقًا هنا أريد أن يكون لدي رقم.

11:24.260 --> 11:26.230
لذا قمت بتحويل هذا إلى رقم برمز زائد.

11:26.230 --> 11:29.020
يجب أن يكون كل شيء مطلوبًا ، ولكن لنفترض

11:29.020 --> 11:30.810
هنا أيضًا أن الوصف يجب أن يكون

11:30.810 --> 11:32.890
بحد أدنى من خمسة أحرف وبالنسبة

11:32.890 --> 11:35.420
للأشخاص ، يجب أن يكون الحد الأدنى واحدًا

11:35.420 --> 11:38.823
، بحيث يكون لدينا شخصان على الأقل.

11:39.820 --> 11:42.030
بالمناسبة ، الأمر متروك لك في كيفية تنفيذ ذلك.

11:42.030 --> 11:44.020
بالطبع ، في منطق التحقق

11:44.020 --> 11:47.200
الخاص بك ، يمكنك أيضًا البحث عن مساواة

11:47.200 --> 11:50.080
أكبر وأصغر إذا كنت ترغب في ذلك.

11:50.080 --> 11:52.030
نفس الشيء بالنسبة لطول الدورة.

11:52.030 --> 11:54.200
أكبر يساوي ، أصغر يساوي.

11:54.200 --> 11:56.940
هذا ممكن أيضًا.

11:56.940 --> 11:58.660
في الواقع ، سأحتفظ بهذه التغييرات.

11:58.660 --> 12:00.520
إذن ، لدينا الآن حد أدنى مخصص لشخص

12:00.520 --> 12:01.920
واحد وخمسة كحد أقصى.

12:01.920 --> 12:05.253
الآن لدينا هذه الكائنات الثلاثة التي يمكن التحقق

12:06.100 --> 12:08.500
من صحتها والآن هنا ، إلى وظيفة التحقق

12:08.500 --> 12:11.680
من الصحة ، نقوم بتمرير عنواننا صالح ، إلى استدعاء

12:11.680 --> 12:16.440
الوظيفة الثاني ، قمت بتمرير الوصف قابل للتحقق ، وإلى استدعاء الوظيفة

12:16.440 --> 12:21.310
الثالث أقوم بتمرير peopleValidatable.

12:21.310 --> 12:24.460
والآن يجب أن يعود التحقق "صحيح" إذا كانت جميعها صحيحة

12:24.460 --> 12:26.380
، وخطأ في الحالات الأخرى.

12:26.380 --> 12:29.480
لذا أريد الآن التحقق مما إذا كان أحدهم

12:29.480 --> 12:32.420
على الأقل قد فشل عن طريق التحقق مما

12:32.420 --> 12:36.580
إذا كانت جميعها خاطئة عن طريق إضافة علامة تعجب أمامها

12:36.580 --> 12:38.970
، للتحقق مما إذا كان هذا خطأ أو

12:38.970 --> 12:41.560
هذا خطأ أو هذا خطأ.

12:41.560 --> 12:42.740
وإذا كان أحدها على الأقل

12:42.740 --> 12:44.750
خاطئًا ، لذلك إذا كان أحد استدعاءات دالة

12:44.750 --> 12:45.730
التحقق على الأقل خاطئًا

12:45.730 --> 12:47.760
، فسنجعله هناك ونعرض التنبيه.

12:47.760 --> 12:49.860
وبهذا بعيدًا ، لاختبار

12:51.930 --> 12:53.610
ذلك أيضًا ، سأذهب إلى

12:53.610 --> 12:54.860
الفهرس. html ، لأنه يوجد على

12:54.860 --> 12:56.270
مدخلات الأشخاص

12:56.270 --> 12:58.210
، فأنا في الواقع أسمح بـ 10 كحد

12:58.210 --> 13:00.410
أقصى وصفر كحد أدنى.

13:00.410 --> 13:01.460
لذلك في الإدخال يمكننا تقنيًا إدخال قيم غير صالحة.

13:01.460 --> 13:05.120
عن قصد بالطبع ، حتى نتمكن من اختبار

13:05.120 --> 13:06.240
منطقنا.

13:06.240 --> 13:08.090
وهناك الآن دعونا نحفظ كل

13:08.090 --> 13:10.200
شيء ، ويترجم بدون أخطاء.

13:10.200 --> 13:11.750
دعونا نجربها الآن.

13:11.750 --> 13:13.083
إذا قمت بالنقر فوق إضافة

13:13.920 --> 13:16.000
مشروع ، فسأحصل على خطأ وهو أمر جيد.

13:16.000 --> 13:17.430
الآن دعنا ندخل الاختبار هنا ، لا يزال هناك خطأ.

13:17.430 --> 13:21.370
دعنا ندخل الاختبار هنا وخمسة هنا

13:21.370 --> 13:24.180
، وما زلت أحصل على خطأ.

13:24.180 --> 13:25.390
لأن وصفي قصير جدا.

13:25.390 --> 13:26.870
إذا أدخلت حرفًا آخر ، فسيكون

13:26.870 --> 13:28.160
لديّ الحد الأدنى للطول

13:28.160 --> 13:29.500
ويمكنني إنشاء هذا.

13:29.500 --> 13:31.210
فلنقل الآن ، لنفترض ،

13:31.210 --> 13:32.640
ناقص شخص واحد ، حسنًا

13:32.640 --> 13:34.580
، html لا يدعم هذا.

13:34.580 --> 13:37.940
لكن دعونا ندخل صفرًا أو ستة ونحصل

13:37.940 --> 13:39.200
على أخطاء.

13:39.200 --> 13:42.040
وفقط إذا أدخلت شيئًا ما بين واحد

13:42.040 --> 13:43.840
وخمسة ، فهذا يعمل.

13:43.840 --> 13:46.100
لذا يبدو أن هذا يعمل

13:46.100 --> 13:49.260
كما ينبغي ، وهذا جيد جدًا.

13:49.260 --> 13:50.240
وهذه بالطبع طريقة واحدة

13:50.240 --> 13:51.850
فقط لتنفيذ التحقق من الصحة.

13:51.850 --> 13:53.570
ولكن الطريقة التي يمكن إعادة استخدامها

13:53.570 --> 13:56.510
في الواقع الآن ، يمكن استخدامها مثل هذه في أجزاء مختلفة

13:56.510 --> 13:59.170
من التطبيق أيضًا وبالطبع تستفيد من الكتابة المطبوعة

13:59.170 --> 14:01.660
وتقدم لنا دعمًا كبيرًا وفحصًا من النوع لتجنب

14:01.660 --> 14:04.480
الأخطاء غير الضرورية.
