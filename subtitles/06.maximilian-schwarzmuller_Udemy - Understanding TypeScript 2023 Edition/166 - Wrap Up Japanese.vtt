WEBVTT

00:02.150 --> 00:05.480
ナレーター：このモジュールについては､ すでにここまでです｡ 

00:05.480 --> 00:10.130
もちろん､ サードパーティのライブラリはたくさんあります｡

00:10.130 --> 00:12.680
Class ValidatorとClass Transformerのパッケージでは､

00:12.680 --> 00:15.806
この他にもいろいろなことを調べることができます｡

00:15.806 --> 00:21.410
しかし､ ここで考えているのは､ これらのパッケージのすべての機能に飛び込むということではありません｡

00:21.410 --> 00:24.300
そのあたりは､ 皆さんの探求心に任せたいと思います｡ 

00:24.300 --> 00:36.719
まず､ TypeScriptを使えば､ Lodashのような通常のJavaScriptパッケージが問題なく使えるということです｡

00:36.719 --> 00:41.767
最初はエラーが出るかもしれませんが､ 技術的にはうまくいったということを覚えておいてください｡

00:41.767 --> 00:45.244
しかし､ 正しい型をインポートし､ JavaScriptからTypeScriptに正しく変換することで､

00:45.244 --> 00:51.500
これらのコンパイルエラーを回避することも可能です｡

00:51.500 --> 00:54.590
そして､ このような翻訳パッケージは､ すべての主要な､

00:54.590 --> 00:59.180
人気のある､ そして多くの小さなJavaScriptライブラリに存在します｡

00:59.180 --> 01:07.110
また､ JavaScriptのライブラリの中には､ 翻訳ファイルやDTSファイルがすでに組み込まれているものもあるかもしれません｡

01:07.110 --> 01:10.713
もちろん､ それ以降､ このような翻訳をインストールする必要はありません｡

01:11.550 --> 01:14.350
翻訳が必要なライブラリのあるVanillaの仕事以外にも､

01:14.350 --> 01:17.094
Class Transformerのように､ Vanilla

01:17.094 --> 01:20.610
JavaScriptで問題なく動作するライブラリもあるかもしれませんし､

01:20.610 --> 01:31.400
少なくとも最新のVanilla JavaScriptではクラスもありますが､ 余計な翻訳やTypeScriptプロジェクトなしですべての仕事ができます｡

01:31.400 --> 01:34.960
そして､ Class Validatorのようなパッケージがあります｡ 

01:34.960 --> 01:38.440
TypeScript特有の機能を取り入れ､

01:38.440 --> 01:44.840
プロジェクトや問題解決のための全く新しい考え方を与えてくれます｡

01:44.840 --> 01:47.603
ここでは､ デコレーターを活用することで､ このようなケースを実現しています｡ 

01:48.680 --> 01:51.080
これらのことをすべて知っておくことは非常に重要で､

01:51.080 --> 01:55.253
将来のプロジェクトに必要なすべての柔軟性を与えてくれます｡
