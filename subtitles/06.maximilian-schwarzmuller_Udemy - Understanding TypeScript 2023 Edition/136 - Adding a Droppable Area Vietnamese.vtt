WEBVTT

00:02.180 --> 00:04.910
Giảng viên: Về mặt trực quan, chúng ta có thể kéo và thả

00:04.910 --> 00:07.240
nhưng tất nhiên về mặt kỹ thuật trong JavaScript,

00:07.240 --> 00:10.410
tập lệnh của chúng ta không biết điều gì đang xảy ra.

00:10.410 --> 00:12.030
Nhưng đối với con người chúng ta, tất nhiên,

00:12.030 --> 00:14.810
rõ ràng là chúng ta đang kéo vật phẩm chính xác này vào đây.

00:14.810 --> 00:16.300
Nhưng nếu chúng ta xem mã của

00:16.300 --> 00:20.320
mình, làm thế nào JavaScript biết được những gì đang bị kéo vào đâu?

00:20.320 --> 00:21.980
Làm cách nào chúng tôi cập nhật trạng thái

00:21.980 --> 00:24.440
của mình dựa trên thông tin chúng tôi có ngay bây giờ?

00:24.440 --> 00:26.690
Nó sẽ không thực sự có thể.

00:26.690 --> 00:28.810
Vì vậy, để làm cho nó hoạt động trong

00:28.810 --> 00:30.840
JavaScript, chúng ta phải quay lại

00:30.840 --> 00:33.960
lớp của mục có thể kéo của chúng tôi, mục dự án.

00:33.960 --> 00:36.710
Ở đó, trong dragStartHandler, việc ghi nhật ký sự kiện

00:36.710 --> 00:38.250
của bảng điều khiển không phải là

00:38.250 --> 00:39.950
tất cả những gì chúng ta nên làm.

00:39.950 --> 00:42.200
Thật ra chúng ta không cần phải làm điều đó cả.

00:42.200 --> 00:45.070
Thay vào đó, bây giờ hãy sử dụng đối tượng sự kiện của chúng

00:45.070 --> 00:48.210
ta ở đây vì đối tượng đó có thuộc tính truyền dữ liệu.

00:48.210 --> 00:50.440
Điều này đặc biệt đối với các sự kiện kéo,

00:50.440 --> 00:53.280
mà bạn có thuộc tính truyền dữ liệu như vậy.

00:53.280 --> 00:55.330
Và trên thuộc tính đó, bạn có thể

00:55.330 --> 00:57.530
đính kèm dữ liệu vào sự kiện kéo và sau

00:57.530 --> 00:59.520
đó bạn sẽ có thể trích xuất dữ liệu

00:59.520 --> 01:01.390
đó khi thả và trình duyệt bằng

01:01.390 --> 01:03.730
JavaScript ở phía sau, sẽ lưu trữ dữ liệu

01:03.730 --> 01:06.430
đó trong quá trình kéo và đảm bảo rằng dữ liệu

01:06.430 --> 01:09.470
của bạn nhận được khi sự sụt giảm xảy ra giống như

01:09.470 --> 01:12.020
dữ liệu bạn đính kèm ở đây.

01:12.020 --> 01:15.520
Đối với điều đó, bạn có thể gọi, setData, khi truyền dữ liệu,

01:15.520 --> 01:18.910
nhưng việc truyền dữ liệu thực sự có thể là null.

01:18.910 --> 01:21.080
Vì vậy, chúng tôi phải thêm một dấu chấm than ở đây, tất

01:21.080 --> 01:23.460
nhiên chúng tôi biết rằng nó sẽ không có giá trị ở đây.

01:23.460 --> 01:25.700
Bạn có thể tự hỏi tại sao nó có thể là null?

01:25.700 --> 01:29.060
Chà, sự kiện kéo luôn là cùng một loại sự kiện nhưng dựa

01:29.060 --> 01:31.340
trên việc người nghe nào kích hoạt nó

01:31.340 --> 01:34.190
hoặc sự kiện chính xác mà bạn đang nghe, việc

01:34.190 --> 01:37.520
truyền dữ liệu không nhất thiết phải khả dụng.

01:37.520 --> 01:39.896
Vì vậy, không phải tất cả các sự kiện liên quan

01:39.896 --> 01:42.640
đến kéo đều cung cấp cho bạn một đối tượng sự kiện có đối

01:42.640 --> 01:44.073
tượng truyền dữ liệu.

01:45.320 --> 01:46.620
Tuy nhiên, dragStartHandler

01:46.620 --> 01:49.080
kích hoạt sự kiện bắt đầu kéo, không có nó nên

01:49.080 --> 01:52.840
ở đây chúng ta có thể gọi setData một cách an toàn.

01:52.840 --> 01:56.330
Và bây giờ setData có hai đối số ở đây.

01:56.330 --> 01:59.900
Đối số đầu tiên là một mã định danh của định

01:59.900 --> 02:01.320
dạng dữ liệu và ở

02:01.320 --> 02:04.970
đó bạn có sẵn một số định dạng có thể có.

02:04.970 --> 02:08.210
Trong tài liệu đính kèm, bạn sẽ tìm hiểu sâu về kéo và thả bằng JavaScript,

02:08.210 --> 02:10.890
nơi bạn có thể tìm hiểu thêm về chúng.

02:10.890 --> 02:12.270
Nhân tiện, bạn cũng sẽ tìm hiểu thêm

02:12.270 --> 02:15.140
về nó trong khóa học Hướng dẫn hoàn chỉnh về JavaScript của tôi.

02:15.140 --> 02:18.390
Ở đây chúng tôi cần định dạng văn bản/thuần túy, có

02:18.390 --> 02:20.010
nghĩa là chúng tôi sẽ đính

02:20.010 --> 02:24.190
kèm một số dữ liệu yêu cầu văn bản thuần túy được chuyển và điều đó

02:24.190 --> 02:25.430
quan trọng.

02:25.430 --> 02:28.250
Chúng tôi sẽ không đính kèm các đối tượng của mình ở đây,

02:28.250 --> 02:29.740
dự án của chúng tôi, chúng tôi

02:29.740 --> 02:31.390
sẽ tiếp tục bị mắc kẹt.

02:31.390 --> 02:34.340
Vì vậy, không phải là dự án hoàn chỉnh có thể được hiển thị ở đây.

02:34.340 --> 02:37.955
Thay vào đó, nó thực sự đủ để đính kèm ID của dự án

02:37.955 --> 02:41.645
vì điều này sau này sẽ cho phép chúng tôi tìm nạp

02:41.645 --> 02:44.870
dự án đó từ trạng thái của chúng tôi.

02:44.870 --> 02:47.320
Vì vậy, đính kèm ID là tất cả những gì chúng ta cần làm.

02:47.320 --> 02:50.240
Chúng tôi chỉ muốn chuyển một lượng nhỏ dữ liệu, điều này cũng sẽ

02:50.240 --> 02:52.053
giúp chúng tôi tiết kiệm một số bộ nhớ.

02:53.100 --> 02:56.300
Vì vậy, bây giờ với điều đó, chúng tôi đang đính kèm dữ liệu vào sự kiện kéo.

02:56.300 --> 02:58.330
Một điều khác mà tôi muốn làm là, khi

02:58.330 --> 03:00.610
truyền dữ liệu, nơi chúng tôi lại phải

03:00.610 --> 03:02.340
thêm dấu chấm than, tôi sẽ đặt

03:02.340 --> 03:05.430
thuộc tính effectAllowed để di chuyển.

03:05.430 --> 03:08.610
Về cơ bản, điều này kiểm soát giao diện của con trỏ và

03:08.610 --> 03:12.440
cho trình duyệt biết một chút về ý định của chúng tôi, rằng chúng

03:12.440 --> 03:15.200
tôi dự định di chuyển một phần tử từ A sang B.

03:15.200 --> 03:16.760
Một giải pháp thay thế có thể

03:16.760 --> 03:19.230
là sao chép, sau đó bạn nhận được một con trỏ

03:19.230 --> 03:20.820
khác cho người dùng biết rằng

03:20.820 --> 03:23.120
bạn đang sao chép và không di chuyển, nhưng

03:23.120 --> 03:25.140
ở đây chúng tôi muốn di chuyển phần

03:25.140 --> 03:26.580
tử có nghĩa là khi giảm, chúng

03:26.580 --> 03:28.810
tôi xóa phần tử đó ở vị trí ban đầu và thêm

03:28.810 --> 03:31.360
phần tử đó vào nơi mới.

03:31.360 --> 03:34.940
Vì vậy, bây giờ dữ liệu được đính kèm ở đây và đó là bước số một.

03:34.940 --> 03:36.870
Bây giờ chúng ta hãy quay lại nơi

03:36.870 --> 03:38.470
mà chúng ta muốn xảy ra sự sụt

03:38.470 --> 03:40.360
giảm, đó là danh sách dự án.

03:40.360 --> 03:43.400
Ở đó, nó bắt đầu trong dragLeaveHandler.

03:43.400 --> 03:46.370
Bây giờ trong ứng dụng này, trong dự án này ở đây,

03:46.370 --> 03:49.200
chúng ta chỉ có một thao tác kéo và thả và đó

03:49.200 --> 03:51.500
là các dự án của chúng ta ở đây.

03:51.500 --> 03:54.970
Trong các ứng dụng lớn hơn, bạn có thể có các phần khác

03:54.970 --> 03:57.220
nhau trên trang có thể được kéo và thả

03:57.220 --> 04:01.080
và bạn không muốn làm cho mọi thứ có thể bỏ được ở mọi nơi.

04:01.080 --> 04:06.080
Vì vậy, ở đây, trong dragOverHandler, sẽ kích hoạt khi bạn đi vào một khu

04:06.230 --> 04:09.580
vực có thể kéo được với một mục được gắn vào chuột,

04:09.580 --> 04:11.860
tôi muốn kiểm tra xem liệu thao tác

04:11.860 --> 04:14.970
kéo có thực sự được phép ở đây hay không.

04:14.970 --> 04:19.546
Đối với điều đó, tôi sẽ kiểm tra xem event. dataTransfer, ở đây

04:19.546 --> 04:21.060
nó cũng có sẵn,

04:21.060 --> 04:22.950
vì vậy nếu có sẵn,

04:22.950 --> 04:25.500
và sau đó, nếu có sẵn, thuộc

04:25.500 --> 04:29.140
tính loại truyền dữ liệu có giá trị

04:29.140 --> 04:34.140
đầu tiên bằng văn bản/thuần túy.

04:34.300 --> 04:39.280
Điều đó đơn giản có nghĩa là dữ liệu được đính kèm với sự kiện kéo

04:39.280 --> 04:42.390
của chúng tôi có ở định dạng đó không?

04:42.390 --> 04:43.360
Tất nhiên đó là vì

04:43.360 --> 04:45.030
đó là định dạng chúng tôi thiết

04:45.030 --> 04:47.320
lập trong dragStartHandler ở đây.

04:47.320 --> 04:50.490
Vì vậy, ví dụ, ở đây nó sẽ không cho phép thả hình ảnh hoặc

04:50.490 --> 04:51.380
thứ gì đó tương tự

04:51.380 --> 04:53.180
có định dạng dữ liệu khác.

04:53.180 --> 04:56.173
Tôi vừa cho phép loại bỏ văn bản thuần túy.

04:57.170 --> 04:59.450
Tất nhiên bây giờ tôi cũng cần thay thế dấu

04:59.450 --> 05:01.020
gạch dưới bằng một sự kiện một

05:01.020 --> 05:03.280
lần nữa vì tôi đang đề cập đến nó ở đây.

05:03.280 --> 05:07.150
Bây giờ nếu đó là trường hợp thì tôi biết tôi muốn cho phép giảm,

05:07.150 --> 05:09.070
vì vậy tôi sẽ cập nhật nền.

05:09.070 --> 05:11.620
Và chỉ một điều quan trọng khác mà chúng ta phải làm,

05:11.620 --> 05:13.960
bạn phải gọi event. ngăn chặn Mặc định.

05:13.960 --> 05:15.950
Nhưng tại sao chúng ta phải gọi như vậy?

05:15.950 --> 05:18.860
Bởi vì trong JavaScript, thao tác kéo và

05:18.860 --> 05:22.480
thả hoạt động sao cho chỉ thực sự cho phép thả, do đó,

05:22.480 --> 05:26.119
sự kiện thả sẽ chỉ kích hoạt trên một phần tử, nếu trong

05:26.119 --> 05:29.649
thao tác kéo overHandler trên chính phần tử đó mà

05:29.649 --> 05:32.750
bạn đã gọi là preventDefault.

05:32.750 --> 05:35.360
Bạn có thể nghĩ về điều này như sau.

05:35.360 --> 05:38.870
Giá trị mặc định cho các sự kiện kéo và thả của JavaScript

05:38.870 --> 05:41.350
là không cho phép thả, vì vậy bạn phải

05:41.350 --> 05:44.889
ngăn chặn mặc định trong trình kéo overHandler để thông

05:44.889 --> 05:48.120
báo cho JavaScript và trình duyệt rằng đối với phần

05:48.120 --> 05:49.670
tử này, trong trường hợp

05:49.670 --> 05:52.980
này đối với phần này cho lớp phi dự án này, bạn muốn

05:52.980 --> 05:54.870
cho phép thả.

05:54.870 --> 05:57.920
Vì vậy, chỉ khi bạn làm điều này là dragOverHandler thì

05:57.920 --> 06:00.020
sự kiện thả sẽ thực sự kích hoạt khi người

06:00.020 --> 06:01.220
dùng rời đi.

06:01.220 --> 06:02.910
Mặt khác, nếu người dùng cho phép,

06:02.910 --> 06:05.060
sự kiện thả sẽ không kích hoạt.

06:05.060 --> 06:07.090
Vì vậy, cùng với đó, trình xử lý thả

06:07.090 --> 06:08.960
cuối cùng sẽ thực thi tất nhiên,

06:08.960 --> 06:12.620
bởi vì bây giờ chúng tôi đang cho phép điều này xảy ra.

06:12.620 --> 06:16.440
Vì vậy, ở đây trong trình xử lý thả xuống, giờ đây chúng ta có thể chấp nhận

06:16.440 --> 06:20.610
sự kiện và hiện tại, hãy chỉ console. ghi lại sự kiện ở đây như thế này

06:20.610 --> 06:23.003
để xem nó có hoạt động không.

06:23.940 --> 06:28.100
Bây giờ chúng tôi lưu mọi thứ, chúng tôi thêm một mục mới

06:28.100 --> 06:30.220
ở đây và tôi kéo mục này.

06:30.220 --> 06:33.430
Nếu tôi thả nó ở đây trong các dự án đã hoàn thành, bạn

06:33.430 --> 06:36.490
sẽ thấy sự kiện kéo này đang kích hoạt ở đây.

06:36.490 --> 06:39.360
Và nó đến từ dòng 236, đây thực sự

06:39.360 --> 06:43.050
là dòng này trong trình xử lý thả xuống.

06:43.050 --> 06:45.950
Bây giờ nếu chúng tôi kiểm tra sự kiện kéo ở đây trong trình duyệt,

06:45.950 --> 06:47.447
bạn sẽ thấy chúng tôi có một loạt

06:47.447 --> 06:50.830
dữ liệu ở đây và chúng tôi cũng có thuộc tính truyền dữ liệu đó.

06:50.830 --> 06:52.920
Và trong đó, bạn sẽ thấy hiệu ứng

06:52.920 --> 06:54.320
mà chúng tôi đã cho phép,

06:54.320 --> 06:57.930
đó là Di chuyển và bạn cũng sẽ không thấy gì trong đó.

06:57.930 --> 07:01.600
Chà, chỉ vì dữ liệu đã bị xóa sau khi dữ liệu này

07:01.600 --> 07:04.510
được đưa vào bảng điều khiển.

07:04.510 --> 07:06.100
Và vì chúng ta đặt đối tượng ở đây

07:06.100 --> 07:08.160
và các đối tượng là kiểu tham chiếu, nên chúng

07:08.160 --> 07:10.830
ta thấy ảnh chụp nhanh mới nhất nơi dữ liệu bị mất.

07:10.830 --> 07:13.360
Trên thực tế tại thời điểm chúng tôi bỏ điều này,

07:13.360 --> 07:16.910
chúng tôi sẽ có thể trích xuất dữ liệu từ quá trình truyền dữ liệu.

07:16.910 --> 07:18.360
Và tôi có thể chứng minh điều này với bạn.

07:18.360 --> 07:20.960
Tất nhiên, chúng tôi có thể chỉ cần truy cập

07:20.960 --> 07:23.210
truyền dữ liệu và ở đó bạn có phương thức

07:23.210 --> 07:26.580
getData, và bây giờ chúng tôi muốn lấy dữ liệu ở định dạng

07:26.580 --> 07:29.560
văn bản/đơn giản này và đó phải là ID dự án mà chúng

07:29.560 --> 07:34.560
tôi đã đính kèm vào gói truyền dữ liệu của mình trên mục dự án.

07:35.060 --> 07:37.179
Vì vậy, nếu bây giờ chúng tôi

07:37.179 --> 07:39.690
lưu cái này và chúng tôi thêm lại dự

07:39.690 --> 07:41.050
án ở đây, và kéo cái

07:41.050 --> 07:46.050
này vào đây, bạn thực sự thấy cái này ở đây, là ID của mục dự án này.

07:46.600 --> 07:47.920
Chúng ta có thể thấy

07:47.920 --> 07:50.880
điều đó nếu chúng ta kiểm tra nó vì chúng ta cũng

07:50.880 --> 07:55.124
thêm nó ở đây dưới dạng ID, 0. 2167, có vẻ như ID này đối với tôi.

07:55.124 --> 07:59.170
Như vậy là chúng ta đang chuyển ID thành công.

07:59.170 --> 08:00.490
Bây giờ chúng tôi gần như ở đó.

08:00.490 --> 08:04.100
Bây giờ, chúng tôi chỉ cần cập nhật trạng thái của mình ở hậu

08:04.100 --> 08:06.163
trường và sau đó kết xuất lại DUI.
