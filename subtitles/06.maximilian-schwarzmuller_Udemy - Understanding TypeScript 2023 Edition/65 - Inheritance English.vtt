WEBVTT

1
00:00:02.300 --> 00:00:03.830
<v Instructor>So we work with our department</v>

2
00:00:03.830 --> 00:00:07.350
quite a bit here and I created my accounting department.

3
00:00:07.350 --> 00:00:09.610
Now for the application we're building,

4
00:00:09.610 --> 00:00:12.120
we might need departments, of course,

5
00:00:12.120 --> 00:00:14.320
but we might need more information

6
00:00:14.320 --> 00:00:16.660
for the specific types of departments.

7
00:00:16.660 --> 00:00:18.830
We might have an IT department,

8
00:00:18.830 --> 00:00:22.680
which has an ID, which has a name, which has employees,

9
00:00:22.680 --> 00:00:24.900
but which also has administrators,

10
00:00:24.900 --> 00:00:28.180
something which only the IT department has for example.

11
00:00:28.180 --> 00:00:30.340
We might have the accounting department

12
00:00:30.340 --> 00:00:34.280
which might also have an ID, a name, and employees,

13
00:00:34.280 --> 00:00:37.470
but it might also have, let's say, reports.

14
00:00:37.470 --> 00:00:41.030
An array of reports it generated, and so on.

15
00:00:41.030 --> 00:00:44.541
So you might have some base properties and also methods

16
00:00:44.541 --> 00:00:46.970
which all departments should have,

17
00:00:46.970 --> 00:00:49.050
but then we might have specialized versions

18
00:00:49.050 --> 00:00:51.900
of these departments with their own specific properties

19
00:00:51.900 --> 00:00:54.660
and methods which only that department might have.

20
00:00:54.660 --> 00:00:58.100
An inheritance can help us implement something like this.

21
00:00:58.100 --> 00:01:00.010
So how can we utilize inheritance here?

22
00:01:00.010 --> 00:01:01.670
Well we have our class department.

23
00:01:01.670 --> 00:01:05.130
Now let's create these specialized departments.

24
00:01:05.130 --> 00:01:08.483
So here we could have a class IT department.

25
00:01:09.610 --> 00:01:14.010
And in this class here, I want to utilize the name

26
00:01:14.010 --> 00:01:17.270
and the ID and the employees of the general department

27
00:01:17.270 --> 00:01:19.537
but I want to add my own features.

28
00:01:19.537 --> 00:01:21.970
Now we can inherit the department class

29
00:01:21.970 --> 00:01:24.270
by using the extends keyword here

30
00:01:24.270 --> 00:01:25.970
and then the class we want to inherit.

31
00:01:25.970 --> 00:01:27.530
In this case, that's department.

32
00:01:27.530 --> 00:01:30.600
Now, important you can only inherit from one class,

33
00:01:30.600 --> 00:01:33.010
so you can't inherit from multiple classes,

34
00:01:33.010 --> 00:01:34.660
if you would need that.

35
00:01:34.660 --> 00:01:38.070
So now, here, I'm inheriting from department

36
00:01:38.070 --> 00:01:40.700
and one consequence is that if I now create

37
00:01:40.700 --> 00:01:44.560
an IT department here, I indeed can call it like this,

38
00:01:44.560 --> 00:01:46.640
with this kind of constructor, even though

39
00:01:46.640 --> 00:01:49.400
the IT department class is empty.

40
00:01:49.400 --> 00:01:52.830
If we save that, we indeed see it works as before,

41
00:01:52.830 --> 00:01:55.152
because when we inherit from another class,

42
00:01:55.152 --> 00:01:59.610
the class which inherits automatically gets everything

43
00:01:59.610 --> 00:02:02.870
the base class, department in this case, has,

44
00:02:02.870 --> 00:02:06.072
including its constructor, so as long as we don't add

45
00:02:06.072 --> 00:02:11.072
a dedicated constructor for this inherited class,

46
00:02:11.130 --> 00:02:14.760
so for this subclass, the base class' constructor,

47
00:02:14.760 --> 00:02:17.830
so this constructor is automatically used

48
00:02:17.830 --> 00:02:20.800
when we instantiate our subclass.

49
00:02:20.800 --> 00:02:25.170
So we in the end magically call the base class constructor

50
00:02:25.170 --> 00:02:27.562
with the arguments we're passing here.

51
00:02:27.562 --> 00:02:30.350
Now we can add our own constructor, though,

52
00:02:30.350 --> 00:02:33.570
by adding constructor here in IT department

53
00:02:33.570 --> 00:02:35.800
and now you see I'm getting errors.

54
00:02:35.800 --> 00:02:38.580
For one, we now of course should accept

55
00:02:38.580 --> 00:02:40.850
the data we're getting here, though we could argue

56
00:02:40.850 --> 00:02:44.120
the name should not be something we need to pass in here.

57
00:02:44.120 --> 00:02:46.430
And it shouldn't also be accounting.

58
00:02:46.430 --> 00:02:49.110
But instead here, the name of the department,

59
00:02:49.110 --> 00:02:52.563
since it's the IT department class, can always be IT.

60
00:02:53.700 --> 00:02:56.910
I still want to accept my ID though,

61
00:02:56.910 --> 00:03:01.130
but now I want to essentially forward that

62
00:03:01.130 --> 00:03:04.120
just like the fixed name IT,

63
00:03:04.120 --> 00:03:06.420
to the constructor of department.

64
00:03:06.420 --> 00:03:09.240
And for that we have a special keyword we can,

65
00:03:09.240 --> 00:03:11.120
and in this case we have to, use.

66
00:03:11.120 --> 00:03:13.210
And that's super.

67
00:03:13.210 --> 00:03:15.580
Whenever you add your own constructor

68
00:03:15.580 --> 00:03:18.400
in a class that inherits from another class,

69
00:03:18.400 --> 00:03:21.200
you have to add super in the inheriting class

70
00:03:21.200 --> 00:03:23.790
and you have to execute it like a function.

71
00:03:23.790 --> 00:03:28.070
Super here calls the constructor of the base class,

72
00:03:28.070 --> 00:03:31.300
so department constructor in this case.

73
00:03:31.300 --> 00:03:33.690
And now the other super takes the arguments

74
00:03:33.690 --> 00:03:37.630
of the parent class constructor, the ID, and the name.

75
00:03:37.630 --> 00:03:41.060
So here I can forward ID, so ID which I'm getting here

76
00:03:41.060 --> 00:03:44.360
is just passed to super, and I can hard code

77
00:03:44.360 --> 00:03:46.860
a value for the name, like IT.

78
00:03:46.860 --> 00:03:48.840
So this will now call the constructor

79
00:03:48.840 --> 00:03:52.500
of the base class from inside the subclass.

80
00:03:52.500 --> 00:03:55.310
Now, important, you have to call super first

81
00:03:55.310 --> 00:03:58.220
in your constructor before you do anything

82
00:03:58.220 --> 00:03:59.700
with the "this" keyword.

83
00:03:59.700 --> 00:04:03.860
So if you plan on assigning any other special properties

84
00:04:03.860 --> 00:04:06.670
here you have to do that after calling super.

85
00:04:06.670 --> 00:04:10.346
And indeed I want to add my own special properties here.

86
00:04:10.346 --> 00:04:13.528
We could add our admins here.

87
00:04:13.528 --> 00:04:17.800
Let's say as a private, or as a public, actually.

88
00:04:17.800 --> 00:04:20.878
As a public property, admins,

89
00:04:20.878 --> 00:04:25.630
and that should be an array of strings, let's say.

90
00:04:25.630 --> 00:04:27.780
Well then I don't want to forward this

91
00:04:27.780 --> 00:04:31.460
to my base class because the department class

92
00:04:31.460 --> 00:04:34.670
doesn't want any administrator data.

93
00:04:34.670 --> 00:04:38.800
Instead, I want to store this in a property of IT department

94
00:04:38.800 --> 00:04:42.150
so here we can then add admins as a field

95
00:04:42.150 --> 00:04:44.922
which takes a couple of administrators

96
00:04:44.922 --> 00:04:47.290
and store admins in there,

97
00:04:47.290 --> 00:04:49.070
or because I'm using public in here,

98
00:04:49.070 --> 00:04:52.020
I'm already using that shortcut where a property

99
00:04:52.020 --> 00:04:55.160
of the same name will be created and the data

100
00:04:55.160 --> 00:04:57.530
we feed into this argument is stored

101
00:04:57.530 --> 00:05:00.148
in that automatically created property.

102
00:05:00.148 --> 00:05:03.710
Still to make it clear that super has to be called first,

103
00:05:03.710 --> 00:05:07.610
I'll take the longer route, add admins here, like that,

104
00:05:07.610 --> 00:05:12.610
and then here say, this.admins = admins.

105
00:05:13.260 --> 00:05:15.160
Again, the shortcut would be shorter.

106
00:05:15.160 --> 00:05:17.830
I'm doing this here to show and make it really clear

107
00:05:17.830 --> 00:05:21.020
that if you are using something that uses the "this" keyword

108
00:05:21.020 --> 00:05:24.480
you have to do that after calling super.

109
00:05:24.480 --> 00:05:27.640
And with that if we save that, I'm going to get an error,

110
00:05:27.640 --> 00:05:29.530
because I'm not passing in any admins,

111
00:05:29.530 --> 00:05:30.920
so let's do that here.

112
00:05:30.920 --> 00:05:33.920
Max is the only admin I'm passing in here.

113
00:05:33.920 --> 00:05:36.950
Now we can save that and compiled it without errors

114
00:05:36.950 --> 00:05:39.910
and now here, indeed we see our department here.

115
00:05:39.910 --> 00:05:41.840
It now has the name IT.

116
00:05:41.840 --> 00:05:44.670
And if we console log the entire department,

117
00:05:44.670 --> 00:05:49.670
and we may be able to rename this from accounting to IT

118
00:05:50.220 --> 00:05:54.250
and then console.log IT here.

119
00:05:54.250 --> 00:05:57.570
Of course renaming that was optional, just makes more sense,

120
00:05:57.570 --> 00:06:00.160
given that we're building an IT department here.

121
00:06:00.160 --> 00:06:02.510
Now that I console logged the entire department,

122
00:06:02.510 --> 00:06:06.110
we indeed see we got admins, but we also got employees

123
00:06:06.110 --> 00:06:11.110
and everything which I set up in my department class here.

124
00:06:12.000 --> 00:06:13.990
So that's inheritance in action,

125
00:06:13.990 --> 00:06:16.520
a very useful feature, because now of course,

126
00:06:16.520 --> 00:06:20.770
we can also create our accounting department here

127
00:06:20.770 --> 00:06:23.260
by extending department

128
00:06:23.260 --> 00:06:27.030
and there we can then add our accounting specific things.

129
00:06:27.030 --> 00:06:29.540
So we can still use a constructor here,

130
00:06:29.540 --> 00:06:31.700
and now maybe with the shortcut,

131
00:06:31.700 --> 00:06:34.400
accept a couple of reports here

132
00:06:34.400 --> 00:06:36.170
which might be a private property

133
00:06:36.170 --> 00:06:40.950
and then we have addReport which takes text,

134
00:06:40.950 --> 00:06:45.360
which should be a string, and then we reach out

135
00:06:45.360 --> 00:06:49.430
to reports here and push text as an item into the report

136
00:06:49.430 --> 00:06:51.990
and maybe we also have getReports here

137
00:06:51.990 --> 00:06:56.990
and there we just console.log (this.reports)

138
00:06:57.563 --> 00:07:00.860
or we name it printReports, therefore it makes more sense.

139
00:07:00.860 --> 00:07:02.720
And now we would have a very special version

140
00:07:02.720 --> 00:07:04.890
of a department with two methods

141
00:07:04.890 --> 00:07:06.740
which the base department doesn't have

142
00:07:06.740 --> 00:07:08.100
and with an extra property

143
00:07:08.100 --> 00:07:09.840
which the base department doesn't have.

144
00:07:09.840 --> 00:07:13.000
And still, we get everything from the base department.

145
00:07:13.000 --> 00:07:15.560
The name, which I'll set to accounting here,

146
00:07:15.560 --> 00:07:17.950
and the ID, which we also forward

147
00:07:17.950 --> 00:07:20.260
to the base department constructor.

148
00:07:20.260 --> 00:07:22.120
And so with that, down there,

149
00:07:22.120 --> 00:07:24.770
if we create our accounting here

150
00:07:24.770 --> 00:07:27.510
with new AccountingDepartment,

151
00:07:27.510 --> 00:07:31.750
we can feed in our ID and then our reports.

152
00:07:31.750 --> 00:07:34.340
Let's say that's an empty array initially.

153
00:07:34.340 --> 00:07:39.340
Then we can call addReport, something went wrong,

154
00:07:40.550 --> 00:07:43.446
never that good of course, in the accounting I guess,

155
00:07:43.446 --> 00:07:48.446
and then we can also print our reports here like that

156
00:07:50.070 --> 00:07:52.630
and with all of that it compiles just fine

157
00:07:52.630 --> 00:07:55.710
and we get the report here and we see,

158
00:07:55.710 --> 00:07:58.890
the IT department for example, wouldn't have any reports.

159
00:07:58.890 --> 00:08:01.820
The accounting department does because of inheritance,

160
00:08:01.820 --> 00:08:05.623
where we inherit certain features and add our own features.

