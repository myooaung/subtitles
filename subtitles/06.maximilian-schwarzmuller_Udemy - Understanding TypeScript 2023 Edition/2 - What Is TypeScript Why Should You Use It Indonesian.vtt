WEBVTT

00:02.350 --> 00:04.170
Instruktur: Jadi apa itu TypeScript?

00:04.170 --> 00:06.860
Tentang apa itu semua, mengapa kita menggunakannya?

00:06.860 --> 00:10.820
TypeScript adalah Superset JavaScript.

00:10.820 --> 00:12.190
Sekarang, apa artinya ini?

00:12.190 --> 00:14.250
Ini berarti bahwa TypeScript pada akhirnya

00:14.250 --> 00:16.370
adalah sebuah bahasa, bahasa pemrograman,

00:16.370 --> 00:18.710
yang dibangun di atas JavaScript.

00:18.710 --> 00:20.940
Ini bukan bahasa baru, melainkan

00:20.940 --> 00:23.980
mengambil bahasa JavaScript dan menambahkan

00:23.980 --> 00:27.450
fitur dan keunggulan baru ke dalamnya.

00:27.450 --> 00:31.720
Ini membuat penulisan kode JavaScript lebih mudah dan lebih kuat,

00:31.720 --> 00:32.840
bisa dibilang.

00:32.840 --> 00:35.624
Tetapi, kami memiliki satu kerugian besar.

00:35.624 --> 00:39.786
TypeScript tidak dapat dieksekusi oleh lingkungan JavaScript

00:39.786 --> 00:41.760
seperti browser.

00:41.760 --> 00:44.270
Browser tidak dapat mengeksekusi TypeScript,

00:44.270 --> 00:48.486
dan misalnya, Node. js juga tidak dapat mengeksekusi TypeScript,

00:48.486 --> 00:52.250
sehingga lingkungan di mana kita dapat mengeksekusi JavaScript tidak

00:52.250 --> 00:54.080
mendukung TypeScript.

00:54.080 --> 00:56.140
Lalu, apa ide di balik TypeScript?

00:56.140 --> 01:00.760
Ini adalah versi JavaScript yang lebih baik dan kita tidak bisa menggunakannya?

01:00.760 --> 01:02.130
Yah, tidak cukup.

01:02.130 --> 01:06.050
TypeScript adalah bahasa pemrograman, tetapi juga merupakan alat.

01:06.050 --> 01:10.049
Ini adalah kompiler yang kuat yang Anda jalankan di atas kode

01:10.049 --> 01:14.410
Anda untuk mengkompilasi kode typescript Anda ke JavaScript.

01:14.410 --> 01:16.540
Jadi, apa yang Anda dapatkan sebagai

01:16.540 --> 01:20.260
hasil saat menulis kode di TypeScript adalah JavaScript.

01:20.260 --> 01:22.870
Tetapi Anda tidak menulis kode JavaScript itu,

01:22.870 --> 01:24.900
Anda menulis kode TypeScript dengan

01:24.900 --> 01:27.480
semua fitur baru dan semua keuntungannya, dan

01:27.480 --> 01:30.670
Anda mendapatkan kode JavaScript normal.

01:30.670 --> 01:33.810
Nah, tentu saja hal itu memunculkan satu pertanyaan penting,

01:33.810 --> 01:36.710
bagaimana TypeScript dapat menambahkan fitur baru jika

01:36.710 --> 01:40.630
apa yang Anda dapatkan pada akhirnya adalah JavaScript biasa?

01:40.630 --> 01:43.460
Dan jawabannya adalah, kompiler TypeScript mengkompilasi

01:43.460 --> 01:47.710
fitur-fitur baru ini ke solusi JavaScript, jadi pada akhirnya ini mungkin

01:47.710 --> 01:50.670
memberi Anda sintaks yang lebih bagus, cara yang lebih

01:50.670 --> 01:52.890
mudah untuk melakukan sesuatu, dan kemudian

01:52.890 --> 01:56.571
akan mengkompilasi yang lebih bagus, cara yang lebih mudah ke cuplikan

01:56.571 --> 02:02.060
JavaScript yang lebih kompleks, yang harus Anda tulis sebaliknya.

02:02.060 --> 02:03.230
Jadi ini bukan sihir, tentu

02:03.230 --> 02:06.790
saja tidak dapat menambahkan apa yang tidak mungkin sama sekali dalam

02:06.790 --> 02:08.610
bahasa JavaScript, tetapi dapat menambahkan

02:08.610 --> 02:11.150
fitur-fitur baru yang lebih mudah digunakan, sintaksis

02:11.150 --> 02:15.020
yang lebih bagus, hal-hal seperti ini.

02:15.020 --> 02:17.470
Selain itu, TypeScript, tentu saja, melakukan

02:17.470 --> 02:20.900
satu hal penting, yang sudah tersirat dari namanya.

02:20.900 --> 02:22.740
Ini menambahkan tipe, menambahkan

02:22.740 --> 02:26.230
fitur ke bahasa JavaScript, yang akan kita lihat lebih dekat

02:26.230 --> 02:28.750
sebentar lagi, yang sebenarnya akan memberi

02:28.750 --> 02:31.541
Anda sebagai pengembang, kesempatan untuk

02:31.541 --> 02:35.070
mengidentifikasi kesalahan dalam kode Anda lebih awal

02:35.070 --> 02:38.480
sebelum skrip Anda berjalan dan kesalahan terjadi pada

02:38.480 --> 02:41.350
saat runtime di browser.

02:41.350 --> 02:44.320
Jadi, ini tidak hanya memberi Anda beberapa fitur baru

02:44.320 --> 02:46.690
dan cara-cara yang lebih baik untuk melakukan

02:46.690 --> 02:50.240
sesuatu, tetapi juga memberi Anda pengecekan kesalahan ekstra

02:50.240 --> 02:54.153
di mana kesalahan yang seharusnya Anda dapatkan sebagai kesalahan runtime

02:54.153 --> 02:58.370
dapat ditangkap dan diperbaiki lebih awal selama pengembangan.

02:58.370 --> 03:00.600
Jadi, mengapa kita menggunakan TypeScript?

03:00.600 --> 03:02.570
Perhatikan contoh ini, fungsi

03:02.570 --> 03:06.710
JavaScript yang cukup sederhana yang menambahkan dua angka.

03:06.710 --> 03:08.760
Sekarang ketika saya memanggilnya, harap perhatikan

03:08.760 --> 03:11.810
bahwa saya mengoper dua string, bukan dua angka, dan saya akan menunjukkan

03:11.810 --> 03:14.810
kepada Anda contoh nyata di mana sesuatu seperti ini bisa terjadi

03:14.810 --> 03:18.090
secara realistis hanya dalam hitungan detik.

03:18.090 --> 03:20.270
Jadi, kita memanggil fungsi ini dengan dua string

03:20.270 --> 03:22.519
dan sebagai hasilnya apa yang sebenarnya akan

03:22.519 --> 03:25.260
Anda dapatkan di sini mungkin adalah perilaku yang tidak

03:25.260 --> 03:27.240
diinginkan, karena jika Anda menambahkan

03:27.240 --> 03:29.596
dua string, JavaScript akan menggabungkan string

03:29.596 --> 03:32.780
alih-alih melakukan penghitungan matematis di sini.

03:32.780 --> 03:36.310
Jadi, hasilnya bukan lima, tetapi dua puluh tiga,

03:36.310 --> 03:38.980
rangkaian gabungan dari dua angka.

03:38.980 --> 03:41.690
Ini adalah kesalahan yang bisa Anda miliki dalam JavaScript,

03:41.690 --> 03:43.530
ini bukan kesalahan teknis, Anda mungkin

03:43.530 --> 03:46.720
tidak akan mendapatkan kesalahan runtime, tetapi Anda memiliki

03:46.720 --> 03:49.832
kesalahan logis dalam kode Anda.

03:49.832 --> 03:52.820
Dan itu, tentu saja, dapat menyebabkan masalah besar dalam

03:52.820 --> 03:55.870
aplikasi web yang Anda tulis dengan JavaScript.

03:55.870 --> 03:59.360
Sekarang, tentu saja, dalam JavaScript kita memiliki strategi mitigasi,

03:59.360 --> 04:02.541
kita dapat menambahkan pemeriksaan if dalam fungsi untuk memeriksa

04:02.541 --> 04:05.440
jenis input pada saat runtime, kita juga dapat memvalidasi

04:05.440 --> 04:08.240
dan membersihkan input pengguna, dan sementara kita

04:08.240 --> 04:10.670
mungkin ingin melakukan semua itu, akan lebih

04:10.670 --> 04:15.840
baik jika kita dapat menangkap kesalahan seperti ini selama pengembangan.

04:15.840 --> 04:19.220
Dan untungnya, hal ini dimungkinkan dengan TypeScript, karena pengembang

04:19.220 --> 04:21.810
dapat menulis kode yang tidak valid di sini dan memperkenalkan

04:21.810 --> 04:23.970
bot seperti ini di JavaScript, dan dengan TypeScript

04:23.970 --> 04:26.160
kami memiliki alat yang membantu kami menulis

04:26.160 --> 04:30.060
kode yang lebih baik dan menghindari masalah seperti itu.

04:30.060 --> 04:31.910
Jadi, mari kita lihat lebih dekat hal ini.
