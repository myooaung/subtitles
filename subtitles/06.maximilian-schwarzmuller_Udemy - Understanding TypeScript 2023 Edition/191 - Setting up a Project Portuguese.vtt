WEBVTT

00:02.290 --> 00:03.280
Instrutor: Então,

00:03.280 --> 00:06.110
vamos começar com nossa aplicação de digitação de Nó.

00:06.110 --> 00:08.750
Agora, você pode pensar que precisamos de uma configuração

00:08.750 --> 00:11.170
complexa com o webpack e assim por diante, mas na verdade

00:11.170 --> 00:12.410
não precisamos.

00:12.410 --> 00:16.270
Vamos apenas usar o comando tsc para compilar nossos arquivos.

00:16.270 --> 00:18.160
E então, podemos usar o comando do nó para executar

00:18.160 --> 00:19.890
nossos arquivos compilados.

00:19.890 --> 00:21.700
Isso é tudo o que precisamos aqui.

00:21.700 --> 00:25.960
Ainda assim, vou montar aqui um projeto com npm init simplesmente para que possamos

00:25.960 --> 00:28.810
obter um pacote. json porque como vamos criar

00:28.810 --> 00:32.250
aqui uma aplicação normal de Nodo, instalaremos alguns pacotes

00:32.250 --> 00:36.240
de terceiros como o Express. js.

00:36.240 --> 00:38.470
E também quero instalar uma ferramenta extra que

00:38.470 --> 00:40.950
simplifique nosso processo de desenvolvimento.

00:40.950 --> 00:44.630
Portanto, corra npm init aqui em qualquer pasta vazia à sua escolha.

00:44.630 --> 00:48.190
Você pode confirmar todas as configurações padrão aqui se quiser, e lá depois,

00:48.190 --> 00:50.540
você terá um pacote. arquivo json que

00:50.540 --> 00:52.750
deve se parecer com isto.

00:52.750 --> 00:56.210
Agora, execute também o tsc --init aqui para também inicializar

00:56.210 --> 00:59.390
este projeto como um projeto de digitação para que você obtenha

00:59.390 --> 01:01.860
este tsconfig. json que agora você pode

01:01.860 --> 01:04.313
encontrar em suas necessidades.

01:05.770 --> 01:09.020
E aí, eu já tenho o primeiro ajuste que quero fazer.

01:09.020 --> 01:13.300
A meta aqui pode ser facilmente definida para es2018, por exemplo, dependendo da

01:13.300 --> 01:16.090
versão do nó que você estiver usando, mas se você estiver

01:16.090 --> 01:17.750
usando a mais recente, esta sintaxe

01:17.750 --> 01:19.630
JavaScript moderna deve definitivamente

01:19.630 --> 01:21.380
ser suportada.

01:21.380 --> 01:24.220
O módulo pode ficar em commonjs, mas então, eu

01:24.220 --> 01:27.460
também quero adicionar aqui o móduloResolução e definir

01:27.460 --> 01:29.010
isto como um nó.

01:29.010 --> 01:33.350
Isto diz simplesmente como seus diferentes arquivos e importações

01:33.350 --> 01:35.483
funcionarão juntos.

01:36.410 --> 01:37.640
E precisamos definir isto como um

01:37.640 --> 01:40.020
nó para nos certificarmos de que tudo funcione corretamente.

01:40.020 --> 01:42.470
Também colocarei aqui meu outDir, comentarei

01:42.470 --> 01:44.790
isto e o colocarei em distancia, e meu

01:44.790 --> 01:46.990
rootDir em src porque quero separar

01:46.990 --> 01:49.600
meu código fonte datilografado.

01:49.600 --> 01:50.700
E então a saída que

01:50.700 --> 01:53.170
será os arquivos JavaScript reais que

01:53.170 --> 01:55.733
podemos executar com a ajuda do nó.

01:56.820 --> 01:58.850
Fora isso, estou bem com o modo estrito,

01:58.850 --> 02:00.710
mas é claro, você pode ajustar tudo isso

02:00.710 --> 02:03.030
às suas necessidades e gostos pessoais.

02:03.030 --> 02:06.320
Afinal, você aprendeu tudo sobre isso ao longo deste curso.

02:06.320 --> 02:08.830
E com isso, podemos salvar esta configuração.

02:08.830 --> 02:11.070
A propósito, você também encontrará esta configuração

02:11.070 --> 02:12.460
inicial muito básica anexada.

02:12.460 --> 02:14.120
Você pode salvar esta configuração.

02:14.120 --> 02:16.170
E também criarei uma pasta src onde escreveremos

02:16.170 --> 02:18.130
nosso código fonte, nosso código fonte

02:18.130 --> 02:20.230
datilografado.

02:20.230 --> 02:23.020
E essa é a parte em que agora quero mergulhar.

02:23.020 --> 02:26.370
Vamos agora construir nossa aplicação com datilografia

02:26.370 --> 02:27.960
na pasta src.

02:27.960 --> 02:30.200
E como vamos construir um servidor web simples e também

02:30.200 --> 02:32.920
queremos usar o Express. js lá, vou, antes de mais

02:32.920 --> 02:36.120
nada, instalar algumas dependências aqui.

02:36.120 --> 02:38.440
Com npm install --save, quero instalar

02:38.440 --> 02:41.040
o Express aqui que é a estrutura Express

02:41.040 --> 02:44.100
para o Node. js que você, é claro, nem sempre

02:44.100 --> 02:45.680
precisa, mas aqui, eu quero

02:45.680 --> 02:48.440
construir uma aplicação Node Express.

02:48.440 --> 02:51.500
E ele instalará o pacote de carroceria que nos ajudará

02:51.500 --> 02:54.403
a analisar os corpos de pedidos recebidos.

02:55.290 --> 02:58.180
Por enquanto, é só isso em relação às minhas dependências de produção.

02:58.180 --> 03:00.110
Poderemos acrescentar mais tarde.

03:00.110 --> 03:01.523
Então, vamos bater aqui para entrar.

03:02.960 --> 03:04.120
E com isso instalado,

03:04.120 --> 03:07.540
vamos dar uma olhada nas dependências de desenvolvimento.

03:07.540 --> 03:11.450
Vou instalar aqueles com npm install --save-dev, e lá, quero instalar

03:11.450 --> 03:13.330
o modemon, uma ferramenta que nos

03:13.330 --> 03:16.340
permite executar um arquivo com Node, mas que depois

03:16.340 --> 03:18.210
observa o arquivo e a pasta em que

03:18.210 --> 03:19.820
o arquivo está, bem como todas

03:19.820 --> 03:22.690
as subpastas para alterações.

03:22.690 --> 03:24.050
Sempre que um arquivo mudar,

03:24.050 --> 03:26.030
ele reiniciará o servidor do Node.

03:26.030 --> 03:27.620
Isto simplesmente acelerará o desenvolvimento

03:27.620 --> 03:29.510
porque reiniciará automaticamente nosso

03:29.510 --> 03:31.490
servidor de aplicação Node sempre que alterarmos

03:31.490 --> 03:33.500
o código fonte.

03:33.500 --> 03:36.180
Precisamos reiniciar o servidor quando o código muda porque,

03:36.180 --> 03:39.430
caso contrário, nosso servidor ainda funciona com o código antigo,

03:39.430 --> 03:41.340
mas reiniciar manualmente é irritante,

03:41.340 --> 03:44.190
por isso não podemos acelerar isto com nodemon.

03:44.190 --> 03:47.323
E no momento, é isso mesmo.

03:49.290 --> 03:50.340
Então, vamos entrar aqui e

03:50.340 --> 03:52.360
instalar esta dependência de desenvolvimento.

03:52.360 --> 03:54.760
Não será o último que precisamos neste curso,

03:54.760 --> 03:56.660
mas por enquanto, estamos bem.

03:56.660 --> 03:58.830
Portanto, vamos esperar que isto termine.

03:58.830 --> 04:00.130
Assim, a instalação terminou,

04:00.130 --> 04:01.450
e agora vamos começar a escrever

04:01.450 --> 04:04.773
e criar uma aplicação Node Express muito básica.
