WEBVTT

00:02.320 --> 00:05.210
Instructeur: Om dit te implementeren maak ik eerst

00:05.210 --> 00:08.217
een interface ValidatorConfig, waarin ik die opslag

00:09.550 --> 00:12.680
wil configureren waarmee ik wil werken.

00:12.680 --> 00:15.130
Mijn idee daar is om een paar eigenschappen te hebben,

00:15.130 --> 00:17.653
en daarom gebruik ik deze index type notatie hier.

00:19.720 --> 00:21.450
Dat zijn eigenlijk strings, waarbij

00:21.450 --> 00:23.440
de waarde weer een ander object is.

00:23.440 --> 00:26.380
Omdat dit hier eigenlijk de klassenaam is waarvoor we een

00:26.380 --> 00:29.570
aantal gevalideerde eigenschappen willen registreren.

00:29.570 --> 00:31.700
En dan hebben we in het object dat we daar

00:31.700 --> 00:34.580
opslaan, de concrete eigenschappen van de klasse

00:34.580 --> 00:37.010
waaraan validators zijn gekoppeld.

00:37.010 --> 00:40.610
Dus hier hebben we de valideerbare eigenschap, als

00:40.610 --> 00:42.240
je het zo wilt noemen, die

00:42.240 --> 00:44.660
ook een string key zal zijn.

00:44.660 --> 00:47.350
En dan moet de waarde daarvan een array

00:47.350 --> 00:50.010
van strings zijn met in principe zoiets

00:52.420 --> 00:55.490
als vereist, positief, enzovoort.

00:55.490 --> 00:57.460
Dus zoiets zou hier kunnen worden toegevoegd

00:57.460 --> 00:59.323
als een lijst van validatoren.

01:00.300 --> 01:05.300
Nu kunnen we hier onze registeredValidators config aanmaken, die van het type ValidatorConfig

01:05.790 --> 01:07.950
moet zijn, wat aanvankelijk een leeg

01:07.950 --> 01:09.640
object is.

01:09.640 --> 01:11.500
Omdat aanvankelijk, wanneer de app start

01:11.500 --> 01:13.920
wanneer onze bibliotheek van derden wordt geladen,

01:13.920 --> 01:16.293
nog geen validators zijn geregistreerd.

01:17.640 --> 01:19.920
Nou, en dan willen we hier in onze

01:19.920 --> 01:23.490
regisseurs iets toevoegen aan dat register.

01:23.490 --> 01:28.020
Onthoud nu dat een property decorator functie twee argumenten krijgt:

01:28.020 --> 01:31.010
het doel, dat het prototype is van het object

01:31.010 --> 01:33.910
waar de property op zit, of de constructorfunctie

01:33.910 --> 01:37.340
als het een statische property zou zijn, en de naam van

01:37.340 --> 01:39.300
de property.

01:39.300 --> 01:40.710
Dit zijn de twee argumenten die

01:40.710 --> 01:44.370
we hier krijgen, we krijgen niet de descriptor voor eigenschappen.

01:44.370 --> 01:46.760
Nu kunnen we naar onze geregistreerde validators gaan

01:46.760 --> 01:51.463
en daar wil ik een nieuw item voor doel toevoegen. constructeur.

01:52.730 --> 01:56.070
Het prototype van de instantie waarmee we werken zal een constructorsleutel

01:56.070 --> 01:58.430
hebben die verwijst naar de constructorfunctie

01:58.430 --> 02:02.610
die werd gebruikt om ons object te maken.

02:02.610 --> 02:04.690
En dat wordt dus eigenlijk zoiets als cursus

02:04.690 --> 02:06.120
hier, zodat de naam van die constructorfunctie

02:06.120 --> 02:08.460
uiteindelijk uit die constructor gehaald kan

02:08.460 --> 02:10.560
worden.

02:10.560 --> 02:11.900
Omdat de constructor een functie

02:11.900 --> 02:13.400
is, kunnen we de naam-eigenschap

02:13.400 --> 02:15.900
gebruiken, die op elke functie in JavaScript bestaat,

02:15.900 --> 02:18.310
om de functienaam te krijgen, en dat wordt dan hier

02:18.310 --> 02:20.620
bijvoorbeeld de cursusnaam.

02:20.620 --> 02:23.390
Dus nu registreren we de klassenaam als een sleutel in

02:23.390 --> 02:25.030
geregistreerde validators.

02:25.030 --> 02:28.130
En de waarde daarvoor moet dan een ander object zijn.

02:28.130 --> 02:30.630
Dus ik stel dit gelijk aan een ander object hier.

02:30.630 --> 02:32.390
En in dat object heb ik ook een dynamisch

02:32.390 --> 02:34.640
toegewezen eigenschap waar ik mijn propName

02:34.640 --> 02:37.400
gebruik, dus de eigenschap waarvoor ik een validator

02:37.400 --> 02:40.190
wil toevoegen als sleutel.

02:40.190 --> 02:42.310
Nu is de waarde hier een array van strings,

02:42.310 --> 02:45.530
en hier zal ik required toevoegen als een string.

02:45.530 --> 02:47.920
Nu is dit natuurlijk een zeer naïeve validator.

02:47.920 --> 02:50.000
Als we al andere validators hadden geregistreerd

02:50.000 --> 02:52.830
voor deze eigenschap, zou ik die nu hier overschrijven.

02:52.830 --> 02:54.900
Het zou dus beter zijn om eerst alle bestaande

02:54.900 --> 02:58.360
validators op te halen en ze dan te kopiëren naar deze array en alleen

02:58.360 --> 03:01.320
de vereiste toe te voegen aan die bestaande array.

03:01.320 --> 03:02.870
Nogmaals, om hier wat tijd te besparen,

03:02.870 --> 03:04.740
en om gewoon het algemene idee te laten zien, zal

03:04.740 --> 03:06.873
ik hier deze meer naïeve benadering hanteren.

03:07.980 --> 03:11.180
Daarmee hebben we echter de vereiste annotatie, laten

03:11.180 --> 03:14.690
we nu werken aan de annotatie voor positieve getallen.

03:14.690 --> 03:16.730
En natuurlijk is dat eigenlijk hetzelfde.

03:16.730 --> 03:21.410
Ik kopieer die code, maar ik zet dit hier op positief of welke identificatiecode

03:21.410 --> 03:23.600
je ook wilt gebruiken en natuurlijk moeten

03:23.600 --> 03:25.010
we ervoor zorgen dat we de

03:25.010 --> 03:27.650
juiste argumenten accepteren.

03:27.650 --> 03:30.990
Dus met dat samen met wat we tot nu toe hebben toegevoegd,

03:30.990 --> 03:34.420
registreren we deze eigenschappen en hun validators in

03:34.420 --> 03:38.640
onze globale configuratie wanneer deze klasse is gedefinieerd.

03:38.640 --> 03:41.460
Nu moeten we alleen nog werken aan de valideerfunctie.

03:41.460 --> 03:43.400
De valideerfunctie moet alle geregistreerde

03:43.400 --> 03:46.240
validatoren doorlopen, en dan in principe verschillende

03:46.240 --> 03:50.340
logica's uitvoeren op basis van de gevonden validatoren.

03:50.340 --> 03:54.857
Dus hier wil ik eerst de configuratie ophalen voor het concrete

03:54.857 --> 03:57.600
object waar we mee te maken hebben.

03:57.600 --> 04:00.390
Daarvoor moeten we uitzoeken op welke constructorfunctie

04:00.390 --> 04:04.277
het object gebaseerd is en dan de validatie config of de property validator

04:04.277 --> 04:09.070
mappings ophalen die we voor dat object hebben ingesteld.

04:09.070 --> 04:11.960
Dus hier noem ik dit object validators, of

04:11.960 --> 04:14.520
objValidatorConfig misschien.

04:14.520 --> 04:17.110
En we bereiken de geregistreerde validators hier en hebben

04:17.110 --> 04:22.110
toegang tot een eigenschap die obj. constructeur. naam, dezelfde logica als voorheen,

04:23.900 --> 04:27.060
we hebben toegang tot de constructor eigenschap die bestaat

04:27.060 --> 04:28.980
op het prototype van het object en daarom

04:28.980 --> 04:31.720
kunnen we het direct op het object openen dankzij hoe

04:31.720 --> 04:33.340
JavaScript werkt en dankzij de

04:33.340 --> 04:35.050
prototype-keten zullen we dan het

04:35.050 --> 04:36.710
prototype bereiken als we de constructor

04:36.710 --> 04:38.920
eigenschap niet kunnen vinden op het object

04:38.920 --> 04:41.580
zelf, en dat zal werken.

04:41.580 --> 04:43.840
En daarom hebben we nu de naam van de constructeur

04:43.840 --> 04:46.970
en komen we erachter dat, bijvoorbeeld, deze Cursus hier gebaseerd

04:46.970 --> 04:49.050
is op deze Cursus-klasse.

04:49.050 --> 04:51.290
Dus zoeken we elke validatorconfiguratie op die

04:51.290 --> 04:52.800
we hebben voor de cursusklasse.

04:52.800 --> 04:55.910
Dus nu kijken we eigenlijk naar dit object.

04:55.910 --> 04:58.207
Dit staat nu in objValidatorConfig.

04:59.310 --> 05:01.540
Nu kunnen we dit natuurlijk niet vinden als we

05:01.540 --> 05:03.270
ons object proberen te valideren waarvoor

05:03.270 --> 05:05.110
niets is geregistreerd.

05:05.110 --> 05:08.270
Dus als we geen validatorconfiguratie hebben,

05:08.270 --> 05:11.640
als we daar niets vinden, wil ik true teruggeven, want

05:11.640 --> 05:14.010
dan is dit zeker geldig, toch?

05:14.010 --> 05:15.330
Er valt niets te valideren,

05:15.330 --> 05:18.350
dus het object is zeker geldig.

05:18.350 --> 05:20.900
Anders, als we het vinden, wil ik dat

05:20.900 --> 05:24.910
het door dit binnenste object loopt met een for in lus.

05:24.910 --> 05:27.580
Dus daarmee loop ik door mijn eigenschappen

05:27.580 --> 05:29.560
waarvoor ik validators heb geregistreerd,

05:29.560 --> 05:33.007
met const prop in objValidatorConfig.

05:34.380 --> 05:36.950
Dit geeft me toegang tot alle namen van eigenschappen

05:36.950 --> 05:39.630
waarvoor we dan validators zouden kunnen hebben.

05:39.630 --> 05:41.180
Dus nu moet ik natuurlijk alle validators

05:41.180 --> 05:43.970
doorlopen die we voor een eigenschap kunnen hebben.

05:43.970 --> 05:45.230
Dit moet altijd een array zijn,

05:45.230 --> 05:47.680
ook al hebben we maar één validator toegevoegd.

05:47.680 --> 05:49.530
Dus we kunnen hier nu een for of lus

05:49.530 --> 05:53.040
gebruiken en de concrete validator krijgen, die we hebben,

05:53.040 --> 05:56.930
voor de objValidatorConfig voor deze gegeven eigenschap.

05:56.930 --> 06:00.560
Dus nu krijgen we dingen als positief of vereist, die dan worden

06:00.560 --> 06:02.963
opgeslagen in de validatorconstante.

06:04.080 --> 06:06.110
En dan kunnen we hier een switch statement hebben,

06:06.110 --> 06:08.030
of natuurlijk externe functies aanroepen op

06:08.030 --> 06:09.810
basis van welke validator we vinden.

06:09.810 --> 06:12.130
Maar hier ga ik voor een ingebouwd switch statement,

06:12.130 --> 06:16.620
schakel de validator in en heb dan in principe verschillende gevallen.

06:16.620 --> 06:19.683
Bijvoorbeeld het vereiste geval hier.

06:20.800 --> 06:22.163
Whoops, zoals dit.

06:23.470 --> 06:27.900
Hier wil ik true teruggeven als ons eigendom, waar we naar

06:27.900 --> 06:28.950
kijken...

06:28.950 --> 06:33.260
Dus deze eigenschap op dit object heeft een niet-lege waarde.

06:33.260 --> 06:38.260
Dus ik geef true terug als obj prop waar is.

06:39.170 --> 06:42.010
En om dit om te zetten in een echte true of false waarde kunnen

06:42.010 --> 06:44.420
we de double bang operator gebruiken.

06:44.420 --> 06:46.840
Nu hoor ik allerlei klachten dat het niet weet of

06:46.840 --> 06:49.440
het object deze eigenschap heeft, dus hier moeten we

06:49.440 --> 06:51.220
dit eigenlijk veranderen in elke om

06:51.220 --> 06:53.560
deze extra flexibiliteit hier te krijgen.

06:53.560 --> 06:56.150
Je zou natuurlijk ook aan de types hier kunnen werken.

06:56.150 --> 07:00.480
En bijvoorbeeld ook je identifiers hier omzetten in duidelijk gedefinieerde

07:00.480 --> 07:03.430
types waar Enums mee werken en misschien ook de typering

07:03.430 --> 07:05.490
hier verbeteren.

07:05.490 --> 07:07.420
Hoewel, om eerlijk te zijn, aangezien ik wil dat

07:07.420 --> 07:09.960
dit werkt met elk object, is het moeilijk om dit te verbeteren op

07:09.960 --> 07:11.810
een manier die TypeScript zal bevallen.

07:11.810 --> 07:13.330
We zouden kunnen werken

07:13.330 --> 07:16.800
met generieke types, maar dan zouden we ons moeten beperken

07:16.800 --> 07:19.740
tot de objecten die de generieke types moeten uitbreiden

07:19.740 --> 07:22.110
en dus accepteren.

07:22.110 --> 07:25.850
Dus elke optie zou onze beste optie kunnen zijn om echt flexibel

07:25.850 --> 07:27.880
te zijn en veel verschillende objecten

07:27.880 --> 07:30.640
te aanvaarden in deze valideerfunctie.

07:30.640 --> 07:32.270
Nu terug naar het switch segment,

07:32.270 --> 07:34.750
het vereiste geval is een mogelijk geval, we hebben

07:34.750 --> 07:37.650
ook het positieve geval dat we willen behandelen.

07:37.650 --> 07:39.280
En daar wil ik true teruggeven

07:39.280 --> 07:43.770
als de eigenschap waar we naar kijken groter is dan nul.

07:43.770 --> 07:47.260
Dus als object prop groter is dan nul, dan

07:47.260 --> 07:50.463
geeft dit true terug, anders false.

07:52.890 --> 07:55.730
Als we niet in dit for-blok komen of als we een

07:55.730 --> 07:57.970
lus hebben die nergens doorheen loopt

07:57.970 --> 07:59.310
omdat we geen validators

07:59.310 --> 08:01.500
hebben geregistreerd, hebben we

08:01.500 --> 08:04.130
hier een lege array doorgegeven of zoiets,

08:04.130 --> 08:06.350
dus als je voorbij deze for-lus komt,

08:06.350 --> 08:10.280
zal ik ook waar teruggeven als standaard.

08:10.280 --> 08:12.800
En nu geven we onder alle omstandigheden iets

08:12.800 --> 08:14.503
terug en kunnen we valideren.

08:15.450 --> 08:19.253
Laten we eens kijken of het werkt, als we dit nu opslaan, en we herladen onze

08:23.610 --> 08:26.330
app hier en ik probeer dit in te dienen krijgen we een

08:26.330 --> 08:29.400
foutmelding, ongeldige invoer probeer opnieuw.

08:29.400 --> 08:30.780
Als ik hier wat tekst invoer:

08:30.780 --> 08:34.793
JavaScript The Complete Guide, krijg ik nog steeds dit omdat mijn

08:35.940 --> 08:38.100
nummer verkeerd is.

08:38.100 --> 08:40.440
Als ik hier min één invoer krijgen we ook dit,

08:40.440 --> 08:42.020
want dat is niet positief.

08:42.020 --> 08:45.020
Als ik echter een positief getal invoer, werkt het wel.

08:45.020 --> 08:48.230
Als ik een positief getal heb, maar het eerste veld

08:48.230 --> 08:49.860
is leeg, dan werkt dit ook,

08:49.860 --> 08:52.190
dus daar moeten we aan werken.

08:52.190 --> 08:54.600
Dus laten we uitzoeken wat het probleem is.

08:54.600 --> 08:57.380
En om daar achter te komen voeg ik hier een klein console

08:57.380 --> 09:00.720
log toe en log de eigenschap waar we naar kijken.

09:00.720 --> 09:02.340
We zouden natuurlijk ook breekpunten en hulpmiddelen

09:02.340 --> 09:03.513
voor ontwikkelaars kunnen gebruiken.

09:04.820 --> 09:07.410
Als ik nu hier op opslaan klik, zie je dat het eerste

09:07.410 --> 09:09.250
wat gevalideerd wordt de prijs is

09:09.250 --> 09:10.623
en daarna stoppen we.

09:11.530 --> 09:15.100
Dus de prijs is de eerste eigenschap die wordt gevalideerd.

09:15.100 --> 09:16.980
En dat is het interessante hier,

09:16.980 --> 09:20.090
de prijs is eigenlijk het enige bezit dat er toe doet,

09:20.090 --> 09:22.230
want we keren terug in validatie.

09:22.230 --> 09:25.840
Dat betekent dat de eerste keer dat we een validator vinden die true

09:25.840 --> 09:29.050
of false teruggeeft, we onmiddellijk terugkeren en ons niets

09:29.050 --> 09:31.480
aantrekken van de andere validators.

09:31.480 --> 09:33.320
In het valse geval is dit in orde,

09:33.320 --> 09:35.360
want als één element vals is, als één

09:35.360 --> 09:37.450
eigenschap vals is, ongeldig is, dan

09:37.450 --> 09:40.140
kunnen we de andere niet eens bekijken.

09:40.140 --> 09:42.590
Maar voor het echte geval is het een probleem.

09:42.590 --> 09:44.970
Als we de eerste keer dat een eigenschap aan

09:44.970 --> 09:49.410
onze verwachtingen voldoet true teruggeven, hebben we een probleem.

09:49.410 --> 09:51.540
Dus moeten we dit verbeteren door hier

09:51.540 --> 09:55.130
een isValid eigenschap te hebben, die aanvankelijk waar is.

09:55.130 --> 09:56.780
Is geldige variabele, bedoel ik.

09:56.780 --> 10:01.780
En dan stellen we hier isValid gelijk aan isValid en dit hier,

10:03.857 --> 10:08.857
en hetzelfde hier beneden, stel dit gelijk aan dit.

10:09.570 --> 10:11.290
Zodat we niet onmiddellijk

10:11.290 --> 10:14.750
terugkeren, maar gewoon isValid bijwerken en daarna afbreken

10:14.750 --> 10:16.700
om niet door te vallen.

10:16.700 --> 10:19.200
Het resultaat daarvan is dat uiteindelijk na

10:19.200 --> 10:22.710
al deze lussen isValid ofwel nog steeds waar is, maar zodra één

10:22.710 --> 10:25.710
van deze controles hier onwaar is, zal dankzij de manier

10:25.710 --> 10:27.530
waarop JavaScript werkt, de totale

10:27.530 --> 10:29.670
isValid-waarde onwaar zijn omdat waar

10:29.670 --> 10:33.000
gecombineerd met onwaar onwaar zal teruggeven.

10:33.000 --> 10:36.020
En dan moeten we daar beneden isValid teruggeven.

10:36.020 --> 10:39.330
Nu zorgen we er dus voor dat alle eigenschappen worden gecontroleerd

10:39.330 --> 10:42.433
en niet alleen de eerste waar JavaScript naar kijkt.

10:43.320 --> 10:45.460
Dit zal echter niet ons enige probleem zijn,

10:45.460 --> 10:47.750
we hebben hier ook een probleem als we kijken

10:47.750 --> 10:50.480
hoe we onze validatorlogica registreren.

10:50.480 --> 10:53.720
Ik overschrijf altijd de geregistreerde validators

10:53.720 --> 10:57.130
voor een bepaalde klassenaam met een nieuw object.

10:57.130 --> 11:00.050
In plaats daarvan moeten we bestaande validators hier toevoegen,

11:00.050 --> 11:01.630
zodat we dat niet doen.

11:01.630 --> 11:04.140
We hebben bijvoorbeeld de spread operator om

11:04.140 --> 11:08.130
bestaande sleutelwaardeparen voor die klassenaam te nemen in de geregistreerde

11:08.130 --> 11:10.870
validators en die eerst toe te voegen voordat we

11:10.870 --> 11:14.413
onze toevoegen, ook daar beneden natuurlijk.

11:16.890 --> 11:18.733
En nu daarmee, als we dit opslaan, en

11:19.650 --> 11:21.980
we gaan terug naar onze applicatie hier.

11:21.980 --> 11:24.150
Als ik beide leeg heb, falen we.

11:24.150 --> 11:26.280
Als we een geldige prijs invoeren, maar we

11:26.280 --> 11:28.490
hebben een ongeldige titel, dan falen we.

11:28.490 --> 11:31.510
Als beide geldig is, hebben we succes.

11:31.510 --> 11:35.570
Als we een geldige titel hebben maar geen prijs, falen we.

11:35.570 --> 11:37.230
Ook met een negatieve prijs.

11:37.230 --> 11:39.170
En daarom ziet dit er nu goed uit en

11:39.170 --> 11:42.280
dit is nu onze eerste naïeve implementatie van hoe zo'n

11:42.280 --> 11:44.500
validator zou kunnen werken met behulp

11:44.500 --> 11:46.670
van TypeScript decorators.

11:46.670 --> 11:49.150
En vergeet niet dat dat alles hier, alle decoratoren,

11:49.150 --> 11:52.310
de valideerfunctie en het register, voor u verborgen zouden

11:52.310 --> 11:53.590
blijven.

11:53.590 --> 11:55.820
Dat zou deel kunnen uitmaken van een bibliotheek van

11:55.820 --> 11:56.780
een derde partij waaraan

11:56.780 --> 11:59.250
u werkt, uiteraard op een uitgebreidere manier dan waarschijnlijk

11:59.250 --> 12:01.300
die u deelt met uw eindgebruikers.

12:01.300 --> 12:04.160
En jij, als eindgebruiker, zou deze dingen gewoon importeren,

12:04.160 --> 12:06.800
deze decoratoren toevoegen, en valideren aanroepen,

12:06.800 --> 12:08.840
en dan zou je een heel handige manier hebben

12:08.840 --> 12:11.763
om validatie toe te voegen aan je klassen.
