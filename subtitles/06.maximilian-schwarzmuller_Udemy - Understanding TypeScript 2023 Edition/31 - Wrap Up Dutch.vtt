WEBVTT

00:02.150 --> 00:04.220
-: Daarmee hebben we alle kerntypes

00:04.220 --> 00:07.410
en de TypeScript-basics grondig bekeken.

00:07.410 --> 00:11.640
U begrijpt nu hopelijk hoe we types maken en toekennen,

00:11.640 --> 00:14.427
hoe we types toekennen aan variabelen

00:14.427 --> 00:17.510
en parameters, en waarom we dat doen.

00:17.510 --> 00:20.740
Hoe typetoewijzingen en -types kunnen verschillen van typecontroles

00:20.740 --> 00:24.770
in JavaScript: JavaScript gebruikt runtime-types, en TypeScript gebruikt

00:24.770 --> 00:27.310
statische types die van belang zijn tijdens de

00:27.310 --> 00:29.400
ontwikkeling.

00:29.400 --> 00:31.710
Dat de gebouwde JavaScript-code

00:31.710 --> 00:34.410
dus geen typetoewijzingen bevat.

00:34.410 --> 00:36.550
Het omvat natuurlijk alle typecontroles,

00:36.550 --> 00:39.060
want dat is gewone JavaScript-code,

00:39.060 --> 00:41.730
maar zoiets als dit hier...

00:43.050 --> 00:44.910
dit is gewoon niet toegestaan in JavaScript.

00:44.910 --> 00:46.280
Dit is geen ondersteunde syntaxis.

00:46.280 --> 00:47.960
Dat is alleen TypeScript.

00:47.960 --> 00:49.550
Dus dat is hopelijk duidelijk.

00:49.550 --> 00:52.740
En dan hebben we gekeken naar getallen, strings, Booleans en

00:52.740 --> 00:55.750
functietypes en het instellen van terugkeertypes, argumenttypes,

00:55.750 --> 00:58.510
en ook het beschrijven van het type van een algemene

00:58.510 --> 01:00.160
functie, wat nuttig kan zijn als

01:00.160 --> 01:02.490
je een variabele wilt hebben die uiteindelijk

01:02.490 --> 01:04.780
een functie bevat.

01:04.780 --> 01:07.890
We hebben gekeken naar objecten en arrays en enums en hoe dat

01:07.890 --> 01:10.140
interessant kan zijn en je kan helpen.

01:10.140 --> 01:12.030
Hetzelfde geldt voor tupels.

01:12.030 --> 01:16.160
En nu hebben we ook gekeken naar aliassen, types aliassen, waarbij

01:16.160 --> 01:18.605
je complexe types kunt samenvoegen tot

01:18.605 --> 01:21.220
aliassen die je kunt hergebruiken.

01:21.220 --> 01:23.840
We hebben gekeken naar letterlijke types en union-types,

01:23.840 --> 01:25.840
die nuttig kunnen zijn voor scenario's

01:25.840 --> 01:29.550
waarin u meer dan één mogelijk type verwacht.

01:29.550 --> 01:33.455
En nu hebben we aan het eind ook nog gekeken naar onbekend

01:33.455 --> 01:35.956
en nooit, dat zijn nichetypes, maar

01:35.956 --> 01:39.430
toch kunnen ze in hun niche heel nuttig zijn.

01:39.430 --> 01:40.970
Met deze basisbeginselen gaan

01:40.970 --> 01:43.180
we dieper in op afzonderlijke aspecten,

01:43.180 --> 01:45.630
en natuurlijk ook op andere types en JavaScript-constructies

01:45.630 --> 01:49.163
waarbij types nuttig kunnen zijn.
