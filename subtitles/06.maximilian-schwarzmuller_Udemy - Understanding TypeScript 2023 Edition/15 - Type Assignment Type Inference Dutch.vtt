WEBVTT

00:02.270 --> 00:03.850
Instructeur: Dus we gebruiken

00:03.850 --> 00:07.450
de kernsoorten nummer, boolean en string.

00:07.450 --> 00:10.840
En hier in de lijst van parameters van deze functie

00:10.840 --> 00:13.970
wijzen we steeds expliciet de types toe met een

00:13.970 --> 00:16.540
dubbele punt na de parameternaam, en

00:16.540 --> 00:18.410
dan de naam van het type.

00:18.410 --> 00:21.350
Dus hier zijn de namen nummer, boolean, string.

00:21.350 --> 00:23.100
En voor het geval u het zich afvroeg,

00:23.100 --> 00:25.420
dit zijn nu speciale identificatiecodes.

00:25.420 --> 00:28.530
Deze algemene, hier, is een speciale syntaxis die is toegevoegd

00:28.530 --> 00:30.170
door TypeScript.

00:30.170 --> 00:32.900
Het maakt geen deel uit van de gecompileerde JavaScript-code.

00:32.900 --> 00:35.040
Als we die code hier controleren, zijn

00:35.040 --> 00:37.280
deze typetoewijzingen verdwenen, omdat

00:37.280 --> 00:39.530
JavaScript ze niet ondersteunt.

00:39.530 --> 00:42.390
Deze dubbele punt na een variabele, of

00:42.390 --> 00:43.920
na een parameter.

00:43.920 --> 00:46.320
En dan nummer en boolean en string.

00:46.320 --> 00:48.290
Deze speciale sleutelwoorden.

00:48.290 --> 00:50.840
Dit wordt geïntroduceerd door TypeScript.

00:50.840 --> 00:53.500
De TypeScript compiler begrijpt het.

00:53.500 --> 00:55.480
De IDE hier ondersteunt TypeScript,

00:55.480 --> 00:58.580
en klaagt dus niet over deze speciale sleutelwoorden.

00:58.580 --> 01:01.760
JavaScript begrijpt deze syntaxis niet.

01:01.760 --> 01:04.590
Het begrijpt een dubbele punt na een parameter niet, of een

01:04.590 --> 01:06.560
dubbele punt na een variabele, en dan het

01:06.560 --> 01:09.190
speciale getal of tekenreeks sleutelwoord.

01:09.190 --> 01:11.540
JavaScript begrijpt dit niet en daarom maakt dit

01:11.540 --> 01:13.560
geen deel uit van de JavaScript-uitvoer.

01:13.560 --> 01:15.920
Het wordt eigenlijk alleen gebruikt door de TypeScript compiler.

01:15.920 --> 01:18.130
En dan, nou ja, het is een compiler

01:18.130 --> 01:21.820
omdat het deze code omzet in JavaScript code.

01:21.820 --> 01:24.880
Kanttekening, je ziet ook dat het const wisselt

01:24.880 --> 01:27.700
voor var, maar daar kom ik later op terug.

01:27.700 --> 01:30.590
We hebben hier dus onze expliciete typetoewijzingen en

01:30.590 --> 01:33.060
het wordt alleen begrepen door TypeScript.

01:33.060 --> 01:35.763
Geweldig, waarom hebben we ze niet daar beneden?

01:36.880 --> 01:39.890
Ik heb hier geen expliciete type opdrachten.

01:39.890 --> 01:41.180
En trouwens ook niet hier

01:41.180 --> 01:43.450
als we bijvoorbeeld het resultaat berekenen,

01:43.450 --> 01:45.530
want TypeScript heeft een ingebouwde

01:45.530 --> 01:48.400
functie die type-inferentie heet.

01:48.400 --> 01:51.000
Dit betekent dat TypeScript zijn best doet,

01:51.000 --> 01:53.010
en dat doet het behoorlijk goed,

01:53.010 --> 01:56.400
om te begrijpen welk type je in een bepaalde variabele

01:56.400 --> 01:58.860
of constante hebt staan.

01:58.860 --> 02:02.300
En hier begrijpt het bijvoorbeeld dat nummer1 uiteindelijk

02:02.300 --> 02:05.780
altijd van het type nummer zal zijn, omdat je het initialiseert

02:05.780 --> 02:08.020
met een nummer.

02:08.020 --> 02:09.950
Dit is eigenlijk een constante, dus

02:09.950 --> 02:11.740
het is nog specifieker dan dat.

02:11.740 --> 02:15.350
En het type dat het hier aangeeft is niet zomaar een

02:15.350 --> 02:17.490
getal, het is het getal vijf.

02:17.490 --> 02:20.110
Want je kunt toch geen nieuw getal, of

02:20.110 --> 02:23.870
een nieuwe waarde aan een const waarde toekennen.

02:23.870 --> 02:25.840
Als u dit zou veranderen in een variabele,

02:25.840 --> 02:28.460
dus als u in plaats daarvan let zou gebruiken, dan zou

02:28.460 --> 02:30.180
dit natuurlijk niets breken.

02:30.180 --> 02:32.940
We kunnen daar een variabele gebruiken, het is misschien niet de beste praktijk

02:32.940 --> 02:34.540
omdat deze waarde nooit verandert, maar het

02:34.540 --> 02:36.210
is ook niet verschrikkelijk.

02:36.210 --> 02:38.260
Maar als we hier nu overheen gaan zien we

02:38.260 --> 02:41.210
dat TypeScript niet zegt, oké, dit moet een vijf zijn.

02:41.210 --> 02:45.510
Maar toch detecteert het dat het type hier een nummer is.

02:45.510 --> 02:49.260
We zouden deze code absoluut zelf kunnen schrijven.

02:49.260 --> 02:51.970
We kunnen een dubbele punt toevoegen na de naam van de variabele

02:51.970 --> 02:53.870
links van het gelijkheidsteken, en dan

02:53.870 --> 02:55.590
de naam van het type.

02:55.590 --> 02:56.880
Dus eigenlijk hetzelfde

02:56.880 --> 02:59.470
als wat we deden in de parameters van deze functie.

02:59.470 --> 03:01.860
Maar dit is overbodig en wordt eigenlijk

03:01.860 --> 03:04.620
ook niet als een goede praktijk beschouwd.

03:04.620 --> 03:06.790
Want TypeScript kan dit

03:06.790 --> 03:09.990
type daar perfect uit afleiden.

03:09.990 --> 03:13.690
Dus, dit toewijzen is geen goed idee.

03:13.690 --> 03:16.420
Dit verandert alleen als u deze variabele op een niet-toegewezen

03:16.420 --> 03:18.053
manier zou aanmaken.

03:19.000 --> 03:22.130
Zoals dit, als je het niet onmiddellijk initialiseert.

03:22.130 --> 03:25.700
Dan is het een goede gewoonte om TypeScript te vertellen welke

03:25.700 --> 03:29.070
waarde daar uiteindelijk zal worden opgeslagen.

03:29.070 --> 03:32.590
Zodat wanneer je er later een waarde aan toekent, en natuurlijk is het een

03:32.590 --> 03:34.080
beetje overbodig om dit in twee

03:34.080 --> 03:35.320
regels te splitsen.

03:35.320 --> 03:37.800
Ik doe dit alleen voor demo doeleinden.

03:37.800 --> 03:39.480
Maar als ik dit nu hier toeken,

03:39.480 --> 03:42.460
breekt dit, omdat ik TypeScript vooraf heb verteld

03:42.460 --> 03:44.630
dat dit van het type nummer zal zijn.

03:44.630 --> 03:45.610
Dat hoef je niet te doen.

03:45.610 --> 03:47.420
Het werkt ook als je dat niet doet.

03:47.420 --> 03:50.330
Maar nu zou je ook deze vijf kunnen toevoegen en dan

03:50.330 --> 03:51.630
zou je geen foutmelding

03:51.630 --> 03:53.470
krijgen omdat je TypeScript niets

03:53.470 --> 03:55.350
vertelt over het type dat in deze

03:55.350 --> 03:56.975
variabele wordt opgeslagen

03:56.975 --> 03:59.630
en TypeScript dus elk type toelaat.

03:59.630 --> 04:02.600
Als je in plaats daarvan hier een getal met een dubbele punt

04:02.600 --> 04:05.417
toevoegt, vertel je TypeScript, "Hé, uiteindelijk zal

04:05.417 --> 04:07.370
daar een getal worden opgeslagen". En dus als je er later iets anders in opslaat,

04:07.370 --> 04:10.060
zoals in dit geval waar we een string hebben opgeslagen,

04:10.060 --> 04:12.470
krijg je hier een foutmelding in de IDE, en natuurlijk

04:12.470 --> 04:15.170
ook als je je code hebt gecompileerd.

04:15.170 --> 04:17.570
We krijgen de fout die we al eerder zagen.

04:17.570 --> 04:20.253
Dus zo kun je types toewijzen.

04:22.300 --> 04:24.920
Zelfs als TypeScript net een type heeft afgeleid, en

04:24.920 --> 04:27.830
laat me dit herstellen, zal het tegen je schreeuwen als je

04:27.830 --> 04:29.310
dat afgeleide type breekt.

04:29.310 --> 04:32.720
Eigenlijk is het verkeerd om te zeggen zelfs, want natuurlijk

04:32.720 --> 04:35.670
doet het dat, waarom zou het dat niet doen?

04:35.670 --> 04:37.000
Type-inferentie is er om u code te

04:37.000 --> 04:39.750
besparen, om te voorkomen dat u handmatig een type moet toekennen.

04:39.750 --> 04:42.730
Natuurlijk schreeuwt TypeScript tegen je als je dan

04:42.730 --> 04:44.520
een verkeerd type gebruikt, een

04:44.520 --> 04:46.510
type dat het niet heeft afgeleid.

04:46.510 --> 04:48.640
Als hier bijvoorbeeld resultPhrase wordt

04:48.640 --> 04:52.460
aangemaakt met let zodat het een variabele is, dan leidt TypeScript

04:52.460 --> 04:54.000
hier af dat dit van het type string

04:54.000 --> 04:57.670
zal zijn omdat we het initialiseren met een string.

04:57.670 --> 04:59.850
Dit is dus eigenlijk het equivalent van

04:59.850 --> 05:03.060
niet initialiseren, en het type zelf instellen, en dan

05:03.060 --> 05:04.970
later een waarde toekennen.

05:04.970 --> 05:07.410
Nu, als we resultPhrase veranderen in,

05:07.410 --> 05:12.310
laten we zeggen, nul hier, om welke reden we dat ook willen doen, nou dan krijgen

05:12.310 --> 05:15.660
we hier een foutmelding dat type nul niet toewijsbaar

05:15.660 --> 05:17.330
is van het type string.

05:17.330 --> 05:21.210
En dat is logisch, toch?

05:21.210 --> 05:22.690
TypeScript heeft afgeleid dat

05:22.690 --> 05:25.430
we een string willen opslaan, we proberen nu een nummer op

05:25.430 --> 05:27.290
te slaan, we krijgen een foutmelding.

05:27.290 --> 05:28.530
Dat is het werk, de kerntaak van TypeScript.

05:28.530 --> 05:33.000
Typen controleren en tegen ons schreeuwen als we

05:33.000 --> 05:35.280
ze verkeerd gebruiken.
