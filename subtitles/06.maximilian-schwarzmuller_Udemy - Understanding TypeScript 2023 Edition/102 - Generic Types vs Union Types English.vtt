WEBVTT

1
00:00:02.180 --> 00:00:04.432
<v ->Now one common source of confusion,</v>

2
00:00:04.432 --> 00:00:06.300
I want to clarify here, is the difference

3
00:00:06.300 --> 00:00:09.030
between Generics and Union types.

4
00:00:09.030 --> 00:00:11.950
Why could you confuse these two?

5
00:00:11.950 --> 00:00:14.440
Well, for example, our data storage here.

6
00:00:14.440 --> 00:00:16.260
If we're accepting Generic types

7
00:00:16.260 --> 00:00:19.240
based on these types, we could also

8
00:00:19.240 --> 00:00:21.157
rewrite that to just say,

9
00:00:21.157 --> 00:00:23.750
"Well, we want to store strings,

10
00:00:23.750 --> 00:00:27.610
or numbers, or Booleans in here, right?"

11
00:00:27.610 --> 00:00:30.470
So, we could store that or to be precise,

12
00:00:30.470 --> 00:00:32.660
wrap this in parentheses so that we say

13
00:00:32.660 --> 00:00:35.040
either of these types as an array.

14
00:00:35.040 --> 00:00:37.017
Then here, of course, we could also say,

15
00:00:37.017 --> 00:00:38.420
"Well, what we get here when we

16
00:00:38.420 --> 00:00:39.740
add an item is either a string,

17
00:00:39.740 --> 00:00:41.120
a number, or a Boolean,

18
00:00:41.120 --> 00:00:43.007
when we remove it it's the same."

19
00:00:44.424 --> 00:00:45.880
Now, what's the problem with this approach?

20
00:00:45.880 --> 00:00:49.630
On first sight, it might look like it achieves the same,

21
00:00:49.630 --> 00:00:52.310
but, it actually does something totally different.

22
00:00:52.310 --> 00:00:53.710
What we're saying here is,

23
00:00:53.710 --> 00:00:55.690
we're storing any kind of data in there

24
00:00:55.690 --> 00:00:57.220
as long as it's either an array

25
00:00:57.220 --> 00:00:59.730
of strings, numbers or Booleans,

26
00:00:59.730 --> 00:01:02.930
and we're also then adding any kind of data here,

27
00:01:02.930 --> 00:01:04.670
either a string, number or a Boolean,

28
00:01:04.670 --> 00:01:06.650
and the same for removing.

29
00:01:06.650 --> 00:01:09.830
Now, we already have some errors down there, of course,

30
00:01:09.830 --> 00:01:12.520
because I can't initialize this in a generic way anymore.

31
00:01:12.520 --> 00:01:14.420
But, other than that it works.

32
00:01:14.420 --> 00:01:15.890
Now, the problem, however, is

33
00:01:15.890 --> 00:01:18.260
for one up here, we're not saying

34
00:01:18.260 --> 00:01:20.630
this is either an array of strings,

35
00:01:20.630 --> 00:01:24.190
or an array of numbers, or an array of Booleans.

36
00:01:24.190 --> 00:01:26.290
This says, we have an array

37
00:01:26.290 --> 00:01:30.190
which can have strings, numbers and Booleans mixed.

38
00:01:30.190 --> 00:01:32.100
So if you would want to say either

39
00:01:32.100 --> 00:01:34.403
an array of strings, or an array of numbers,

40
00:01:34.403 --> 00:01:36.020
we would have to say

41
00:01:36.020 --> 00:01:39.100
string array, number array, or Boolean array.

42
00:01:39.100 --> 00:01:41.660
Well, we can do that, but now we have a problem here.

43
00:01:41.660 --> 00:01:44.710
Now, we're adding a string, a number or a Boolean,

44
00:01:44.710 --> 00:01:46.750
but depending on what we actually

45
00:01:46.750 --> 00:01:50.270
set this data array to be, either a number array,

46
00:01:50.270 --> 00:01:52.320
or a Boolean array, or a string array,

47
00:01:52.320 --> 00:01:54.140
we're not allowed to add a number,

48
00:01:54.140 --> 00:01:55.870
or a Boolean or a string.

49
00:01:55.870 --> 00:01:57.833
If we set this to be a string array

50
00:01:57.833 --> 00:01:59.800
then we can't add a number here.

51
00:01:59.800 --> 00:02:02.850
Yet, here I am fine with any parameter

52
00:02:02.850 --> 00:02:05.670
as long as it is a number, Boolean, or a string.

53
00:02:05.670 --> 00:02:08.380
So, the problem is here with Union types.

54
00:02:08.380 --> 00:02:11.053
We accept any of these values every time

55
00:02:11.053 --> 00:02:14.250
this method gets called, or this method.

56
00:02:14.250 --> 00:02:15.397
So, we're not saying,

57
00:02:15.397 --> 00:02:18.150
"Hey, whenever we're working with this class,

58
00:02:18.150 --> 00:02:20.990
you have to decide for one type and stick to it,

59
00:02:20.990 --> 00:02:21.830
instead we're saying,

60
00:02:21.830 --> 00:02:23.440
whenever you're calling this method

61
00:02:23.440 --> 00:02:26.150
you're free to use any of these types.

62
00:02:26.150 --> 00:02:29.640
That's exactly not what we want here.

63
00:02:29.640 --> 00:02:33.050
If I revert this to the previous setup

64
00:02:33.050 --> 00:02:34.810
where we used generic types

65
00:02:37.580 --> 00:02:39.450
then we got a different setup.

66
00:02:39.450 --> 00:02:42.060
Here, we say you have to choose once

67
00:02:42.060 --> 00:02:43.950
which kind of data you want to store

68
00:02:43.950 --> 00:02:45.750
and then you're only allowed to

69
00:02:45.750 --> 00:02:48.523
add that exact type of data.

70
00:02:49.710 --> 00:02:52.623
So here if I add a number, for example,

71
00:02:53.830 --> 00:02:54.730
I get an error

72
00:02:54.730 --> 00:02:56.170
because that's not a string

73
00:02:56.170 --> 00:02:57.810
and it shows that I only want to

74
00:02:57.810 --> 00:03:01.250
manage strings here when I set the generic type.

75
00:03:01.250 --> 00:03:05.040
That's the difference between union types and generic types.

76
00:03:05.040 --> 00:03:06.920
Union types can be great if you want

77
00:03:06.920 --> 00:03:08.690
to have a function which you can

78
00:03:08.690 --> 00:03:11.570
call with one of these types every time you call it.

79
00:03:11.570 --> 00:03:13.460
Generic types are great if you want to

80
00:03:13.460 --> 00:03:15.510
lock in a certain type.

81
00:03:15.510 --> 00:03:18.380
Use the same type throughout the entire

82
00:03:18.380 --> 00:03:20.070
class instance you create.

83
00:03:20.070 --> 00:03:23.300
Use the same type throughout the entire function.

84
00:03:23.300 --> 00:03:25.850
That's where you want the generic type.

85
00:03:25.850 --> 00:03:28.120
You want union types when you are

86
00:03:28.120 --> 00:03:30.810
flexible to have a different type

87
00:03:30.810 --> 00:03:33.470
with every method call, with every function call.

88
00:03:33.470 --> 00:03:36.130
Then, you can use union types.

89
00:03:36.130 --> 00:03:38.743
Generic types lock in a type.

