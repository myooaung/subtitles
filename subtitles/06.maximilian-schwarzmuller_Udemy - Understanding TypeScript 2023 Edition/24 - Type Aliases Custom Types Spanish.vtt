WEBVTT

00:02.340 --> 00:05.860
-: Ahora bien, cuando se trabaja con tipos de unión,

00:05.860 --> 00:06.970
como este y este,

00:06.970 --> 00:11.070
puede ser engorroso repetir siempre el tipo de unión.

00:11.070 --> 00:13.070
Es posible que desee negociar un nuevo

00:13.070 --> 00:15.330
tipo que reinstale este tipo de unión.

00:15.330 --> 00:18.540
Y puedes hacerlo con otra característica genial de los

00:18.540 --> 00:21.410
tipos, la característica de los alias de tipos.

00:21.410 --> 00:22.723
Usted crea tal alias, típicamente

00:24.280 --> 00:25.670
antes de usarlo, así que

00:25.670 --> 00:29.240
aquí en la parte superior del archivo en este caso aquí, con la palabra

00:29.240 --> 00:31.240
clave de tipo.

00:31.240 --> 00:34.040
Ahora la palabra clave type no está incorporada

00:34.040 --> 00:35.880
en JavaScript, aunque está soportada

00:35.880 --> 00:40.450
en TypeScript, y después de type añades el nombre de tu tipo personalizado, o de

00:40.450 --> 00:42.860
tu alias de tipo, debería decir.

00:42.860 --> 00:44.980
Por ejemplo, combinable.

00:44.980 --> 00:46.720
Pero el nombre depende realmente de ti.

00:46.720 --> 00:48.380
Aquí puedes inventar cualquier

00:48.380 --> 00:50.520
nombre que no esté incorporado en JavaScript

00:50.520 --> 00:52.530
o TypeScript como nombre de clave.

00:52.530 --> 00:54.360
Así que algo como la fecha no se permitiría

00:54.360 --> 00:56.250
porque eso está construido en JavaScript,

00:56.250 --> 00:58.900
pero combinable no está construido en JavaScript, no está construido

00:58.900 --> 01:01.170
en TypeScript por lo que podemos usarlo.

01:01.170 --> 01:04.550
Y ahora con el signo igual asignas el tipo que

01:04.550 --> 01:08.320
quieres codificar en tu alias, por así decirlo.

01:08.320 --> 01:10.300
Así que podríamos almacenar un número aquí,

01:10.300 --> 01:12.790
y ahora cada vez que queramos asegurarnos de que algo

01:12.790 --> 01:14.390
debe ser un número, podríamos utilizar

01:14.390 --> 01:16.400
combinable en su lugar.

01:16.400 --> 01:18.570
Ahora bien, eso no tiene demasiado sentido, incluso

01:18.570 --> 01:21.630
podría hacer que nuestro código fuera más difícil de leer.

01:21.630 --> 01:25.500
Si utilizo combinable ahí abajo por ejemplo, esto funcionaría

01:25.500 --> 01:27.420
técnicamente pero si echamos

01:27.420 --> 01:29.550
un vistazo a nuestro código, no es

01:29.550 --> 01:33.180
obvio que aquí queramos un número o una cadena.

01:33.180 --> 01:35.560
Bueno, por lo tanto, normalmente se utiliza

01:35.560 --> 01:37.500
junto con los tipos de unión.

01:37.500 --> 01:40.380
Así que podemos almacenar un tipo de unión en nuestro

01:40.380 --> 01:42.250
tipo personalizado, por así decirlo,

01:42.250 --> 01:45.240
en nuestro alias de tipo, y ahora sólo se refieren a combinable

01:45.240 --> 01:48.170
allí en lugar de nuestro tipo de unión.

01:48.170 --> 01:51.060
Así que, tenemos exactamente la misma configuración que antes,

01:51.060 --> 01:54.230
sólo tenemos nuestro alias de tipo reutilizable aquí que podemos

01:54.230 --> 01:55.580
utilizar en su lugar.

01:55.580 --> 01:57.660
Y eso nos permite ahorrar algo de código extra

01:57.660 --> 01:59.200
y asegurarnos de que siempre nos

01:59.200 --> 02:04.200
referimos a los mismos tipos o a la misma configuración de tipos cuando utilizamos combinables.

02:04.234 --> 02:06.600
Y, por supuesto, no sólo podemos utilizarlo para números

02:06.600 --> 02:08.970
y cadenas, sino que podemos utilizarlo para cualquier

02:08.970 --> 02:11.140
configuración de tipos que queramos almacenar

02:11.140 --> 02:14.810
en un alias, incluyendo estos dos tipos literales, por ejemplo.

02:14.810 --> 02:18.210
Así que, para estos dos tipos aquí, para este tipo de unión,

02:18.210 --> 02:20.660
también podríamos intercambiar el alias

02:20.660 --> 02:24.030
de tipo, ConversionDescriptor, o como quieras llamarlo,

02:24.030 --> 02:28.920
y almacenar exactamente este tipo en este alias de tipo.

02:28.920 --> 02:32.270
Y ahora podemos usar este tipo de alias ahí abajo.

02:32.270 --> 02:34.970
Así que los alias de tipo son muy, muy útiles.

02:34.970 --> 02:37.490
Puedes codificar definiciones de tipos más complejas

02:37.490 --> 02:40.860
en tus propios tipos, en tus propios nombres de tipos, por así decirlo, y reutilizar

02:40.860 --> 02:43.120
eso en cualquier parte de tu código donde necesites

02:43.120 --> 02:45.920
exactamente esta configuración de tipos.

02:45.920 --> 02:48.060
Para que evites los errores tipográficos ahí

02:48.060 --> 02:51.000
abajo y puedas simplemente ahorrar código, escribir código

02:51.000 --> 02:53.490
más rápido, y ser siempre más claro en tus intenciones,

02:53.490 --> 02:56.010
por ejemplo eligiendo nombres de alias de tipos descriptivos

02:56.010 --> 02:57.653
ahí arriba.
