WEBVTT

00:02.090 --> 00:02.923
Verteller: Om meer

00:02.923 --> 00:04.750
geavanceerde dingen te doen met decoratoren

00:04.750 --> 00:07.340
zul je moeten opmerken dat sommige decoratoren

00:07.340 --> 00:09.200
bijvoorbeeld, klasse decoratoren

00:09.200 --> 00:11.700
maar ook methode decoratoren, eigenlijk ook in

00:11.700 --> 00:14.650
staat zijn om iets terug te geven.

00:14.650 --> 00:16.570
Nu, ik stuur bij geen enkele decorateur

00:16.570 --> 00:17.510
iets terug.

00:17.510 --> 00:18.430
Ik heb het niet over

00:18.430 --> 00:20.010
de decoratiefunctie, die

00:20.010 --> 00:22.460
terugkomt in de decoratiefabriek.

00:22.460 --> 00:23.701
Ik bedoel eigenlijk

00:23.701 --> 00:26.040
een terugkeerwaarde in de decoratorfunctie,

00:26.040 --> 00:28.890
en die hebben we nergens.

00:28.890 --> 00:31.559
Nu zouden we in de WithTemplate functie, in deze

00:31.559 --> 00:34.670
WithTemplate decorator functie, zou ik zeggen, zo'n

00:34.670 --> 00:36.930
retourwaarde kunnen toevoegen.

00:36.930 --> 00:38.520
En wat je kan teruggeven en

00:38.520 --> 00:40.430
wat TypeScript kan gebruiken,

00:40.430 --> 00:43.660
hangt af van het soort decorator waarmee je werkt.

00:43.660 --> 00:44.990
Hier werken we met een decorator

00:44.990 --> 00:47.270
die wordt toegevoegd aan een klasse, en

00:47.270 --> 00:48.750
in zo'n decoratorfunctie

00:48.750 --> 00:51.677
kun je een nieuwe constructorfunctie teruggeven,

00:51.677 --> 00:53.800
die de oude vervangt.

00:53.800 --> 00:55.590
Dus die zal de klasse vervangen

00:55.590 --> 00:58.330
waaraan je de decorator hebt toegevoegd.

00:58.330 --> 01:01.073
Dus hier kunnen we een nieuwe functie teruggeven,

01:01.073 --> 01:02.490
een nieuwe constructorfunctie,

01:02.490 --> 01:06.370
of gewoon een nieuwe klasse, uiteindelijk, omdat een klasse, het

01:06.370 --> 01:08.280
klasse sleutelwoord, ons toestaat

01:08.280 --> 01:11.150
deze syntactische suiker te gebruiken om zo'n

01:11.150 --> 01:13.360
constructorfunctie te maken, en de klasse

01:13.360 --> 01:17.463
die ik hier maak hoeft geen naam te hebben, maar we kunnen en moeten de

01:17.463 --> 01:22.250
constructor die we hier krijgen uitbreiden.

01:22.250 --> 01:23.730
Dus wat ik hier nu doe is in mijn

01:23.730 --> 01:25.848
decoratiefunctie hier, een nieuwe klasse

01:25.848 --> 01:28.060
teruggeven, en nogmaals, onthoud dat dit

01:28.060 --> 01:29.270
gewoon syntactisch suiker

01:29.270 --> 01:30.910
is voor een constructeursfunctie,

01:30.910 --> 01:32.770
dus ik geef een constructeursfunctie

01:32.770 --> 01:35.400
terug, op het einde, die gebaseerd is op de oorspronkelijke

01:35.400 --> 01:38.830
constructeursfunctie, zodat ik alle eigenschappen van mijn oorspronkelijke

01:38.830 --> 01:50.520
klasse, van mijn oorspronkelijke constructeursfunctie behoud, we hoeven dat niet noodzakelijk te doen, maar ik wil mijn eigenschappen hier niet verliezen, dus doe ik het.

01:50.520 --> 01:53.670
En dan kunnen we hier nieuwe functionaliteit toevoegen.

01:53.670 --> 01:56.716
Bijvoorbeeld, en ik zal hier wat namen moeten veranderen, kan

01:56.716 --> 02:00.340
ik een nieuwe constructorfunctie toevoegen, en om verwarring te voorkomen,

02:00.340 --> 02:01.500
zal ik de constructor die

02:01.500 --> 02:04.040
ik hier krijg een andere naam geven.

02:04.040 --> 02:06.640
Dus de klasse waarin ik deze decorator

02:06.640 --> 02:09.620
heb toegevoegd, noem ik hier originalConstructor

02:12.889 --> 02:15.690
en kopieer dat hier.

02:15.690 --> 02:18.950
En nu, in plaats van deze constructeursfunctie hier, moet

02:18.950 --> 02:20.853
ik super aanroepen om deze oorspronkelijke

02:20.853 --> 02:24.530
constructeursfunctie van binnenuit aan te roepen, want als je een

02:24.530 --> 02:25.430
constructeursfunctie

02:25.430 --> 02:27.410
toevoegt in een klasse die een andere

02:27.410 --> 02:29.920
klasse uitbreidt, wat uiteindelijk is wat we

02:29.920 --> 02:33.630
hier doen, dan moet je super aanroepen.

02:33.630 --> 02:36.108
En nu kun je hier elke logica schrijven die je wilt.

02:36.108 --> 02:40.040
En, bijvoorbeeld, hier kunnen we deze template rendering

02:40.040 --> 02:42.782
logica verplaatsen, uit onze decorator

02:42.782 --> 02:45.620
functie naar deze nieuwe constructor

02:45.620 --> 02:49.020
functie die we hier teruggeven.

02:49.020 --> 02:50.960
Dus nogmaals, houd in gedachten dat we hier

02:50.960 --> 02:52.550
een klasse maken die uiteindelijk

02:52.550 --> 02:53.383
gewoon een constructorfunctie

02:53.383 --> 02:55.833
maakt met deze logica erin.

02:56.670 --> 02:58.850
Dus wat ik nu probeer te doen is,

02:58.850 --> 03:01.367
ik probeer de klasse te vervangen.

03:01.367 --> 03:04.298
De constructor functie waaraan we onze decorator

03:04.298 --> 03:07.550
hebben toegevoegd met een nieuwe klasse, met een nieuwe

03:07.550 --> 03:10.290
constructor functie, waar ik nog steeds de oude

03:10.290 --> 03:12.920
logica uitvoer, maar waar ik ook mijn eigen nieuwe

03:12.920 --> 03:14.670
logica aan toevoeg, en daarom moet

03:14.670 --> 03:17.450
de template nu eigenlijk alleen naar de DOM gerenderd

03:17.450 --> 03:21.340
worden als ik mijn object hier echt instantiëer.

03:21.340 --> 03:22.890
En niet de hele tijd, wanneer

03:22.890 --> 03:25.180
deze decoratorfunctie wordt uitgevoerd,

03:25.180 --> 03:26.340
wat, zoals je geleerd

03:26.340 --> 03:29.620
hebt, gebeurt zodra we de klasse definiëren.

03:29.620 --> 03:31.010
Nu een kleine aanpassing hier,

03:31.010 --> 03:34.290
ik roep mijn originele constructor hier niet meer aan, in plaats daarvan

03:34.290 --> 03:37.380
kunnen we dit gewoon openen. naam om de waarde

03:37.380 --> 03:40.180
te krijgen van de naam van de instantie

03:40.180 --> 03:42.750
die we creëren.

03:42.750 --> 03:45.120
Nu krijgen we een kleine klacht

03:45.120 --> 03:47.750
dat de types niet kloppen.

03:47.750 --> 03:51.330
Om dat op te lossen kunnen we onze decorator functie veranderen in

03:51.330 --> 03:53.990
een generieke functie waar we een type krijgen,

03:53.990 --> 03:57.113
en dit instellen als het type van de oorspronkelijke constructor,

03:58.090 --> 03:59.820
en nu duidelijk maken dat dit eigenlijk

03:59.820 --> 04:01.668
een constructor functie zal zijn,

04:01.668 --> 04:05.780
en we kunnen dat duidelijk maken door een speciaal type, een objecttype,

04:05.780 --> 04:09.260
toe te wijzen waar we een nieuwe eigenschap instellen, dit is natuurlijk

04:09.260 --> 04:17.760
een reserve naam, maar het vertelt TypeScript dat dit uiteindelijk een object zal zijn dat kan worden vernieuwd.

04:17.760 --> 04:19.690
Dus dat wordt een constructorfunctie, een

04:19.690 --> 04:22.170
functie die we kunnen aanroepen met het nieuwe sleutelwoord

04:22.170 --> 04:24.380
om een nieuw object te genereren.

04:24.380 --> 04:27.410
En deze nieuwe functie, deze nieuwe methode, waarop het

04:27.410 --> 04:30.660
object T gebaseerd is, zal een willekeurig aantal argumenten

04:30.660 --> 04:33.520
krijgen, dus ik gebruik hier restparameters om zoveel

04:33.520 --> 04:35.380
argumenten te accepteren als je wilt,

04:35.380 --> 04:37.290
zodat ze echt flexibel zijn wat betreft

04:37.290 --> 04:39.840
de argumenten die kunnen worden doorgegeven aan

04:39.840 --> 04:42.200
de constructor van de klasse die we proberen

04:42.200 --> 04:44.000
te veranderen.

04:45.420 --> 04:46.430
De nieuwe functie

04:46.430 --> 04:49.063
zal dan uiteindelijk een object teruggeven.

04:50.140 --> 04:53.500
Nu moet ik ook de definitie van de restparameter kopiëren naar mijn

04:53.500 --> 04:55.680
constructor hier, zodat deze constructor

04:55.680 --> 04:57.640
ook alle argumenten kan accepteren die

04:57.640 --> 05:00.260
we zouden kunnen krijgen, zodat we in principe Person

05:00.260 --> 05:02.380
kunnen instantiëren met alle argumenten

05:02.380 --> 05:04.380
die je hier wilt invoeren.

05:04.380 --> 05:06.610
Met eventuele argumenten die we ook hier nodig

05:06.610 --> 05:09.279
hebben, in de oorspronkelijke constructorfunctie.

05:09.279 --> 05:11.600
En daarmee is het enige probleem dat we tegenkomen

05:11.600 --> 05:14.021
dat we niet weten of zo'n name property bestaat,

05:14.021 --> 05:16.250
en juist ja, we weten niet aan welke klasse we

05:16.250 --> 05:19.639
deze WithTemplate decorator zullen toevoegen, dus we weten niet

05:19.639 --> 05:22.530
of er een name property zal zijn op de klasse waaraan we hem

05:22.530 --> 05:23.951
toevoegen.

05:23.951 --> 05:25.560
Maar we kunnen dit oplossen door

05:25.560 --> 05:27.140
TypeScript gewoon te vertellen

05:27.140 --> 05:30.200
dat het object waarop T gebaseerd is, dus onze oorspronkelijke

05:30.200 --> 05:32.773
constructorfunctie, niet zomaar een object

05:32.773 --> 05:35.530
zal produceren, maar in feite een object zal produceren

05:35.530 --> 05:37.460
met een name eigenschap die van het

05:37.460 --> 05:41.140
type string zal zijn en dat is correct.

05:41.140 --> 05:44.922
Onze WithTemplate decorator wordt toegevoegd aan een klasse, die een

05:44.922 --> 05:46.250
name property krijgt.

05:46.250 --> 05:47.300
Als ik dit zou weglaten,

05:47.300 --> 05:48.133
zouden we een fout

05:48.133 --> 05:50.740
krijgen, omdat we nu zouden proberen deze decorator toe

05:50.740 --> 05:53.460
te voegen aan een klasse die niet aan dit criterium voldoet,

05:53.460 --> 05:55.543
maar hier voldoet deze er wel aan.

05:55.543 --> 05:58.790
Nu krijg ik hier een foutmelding als ik dit probeer te compileren, omdat

05:58.790 --> 06:00.630
ik hier geen args gebruik, we kunnen dit

06:00.630 --> 06:02.660
veranderen in een _ om typescript te vertellen

06:02.660 --> 06:04.930
dat we weten dat we het niet gebruiken en dat we dit

06:04.930 --> 06:06.230
willen negeren.

06:06.230 --> 06:08.050
Dit is een geldige parameternaam, het

06:08.050 --> 06:10.678
is gewoon een speciale naam die typescript neemt als

06:10.678 --> 06:13.220
een ik snap het, ik moet het accepteren, maar ik zal

06:13.220 --> 06:15.260
het niet gebruiken parameter.

06:15.260 --> 06:18.273
En daarmee compileert het allemaal en als we herladen,

06:19.440 --> 06:22.420
zie je, zien we nog steeds Max op de pagina hier.

06:22.420 --> 06:23.910
Het interessante is, dat

06:23.910 --> 06:25.480
als we nu de code verwijderen

06:25.480 --> 06:27.060
waarin we Person instantiëren,

06:27.060 --> 06:28.440
als ik dit uitcommentarieer

06:28.440 --> 06:30.740
zodat ik alleen een Person klasse vind,

06:30.740 --> 06:33.550
maar die nergens instantieer, dan zie je bij het

06:33.550 --> 06:36.890
herladen geen Max op het scherm.

06:36.890 --> 06:39.467
Alle decorators worden nog steeds uitgevoerd,

06:39.467 --> 06:42.410
maar we renderen niets meer naar het scherm.

06:42.410 --> 06:43.243
En de reden daarvoor

06:43.243 --> 06:46.340
is dat we nu onze decorator hier nog verder hebben verbeterd,

06:46.340 --> 06:49.520
door gebruik te maken van de mogelijkheid om een nieuwe

06:49.520 --> 06:52.360
waarde terug te geven, of in dit geval een nieuwe

06:52.360 --> 06:55.350
constructorfunctie.

06:55.350 --> 06:57.205
In het geval van de class decorator.

06:57.205 --> 07:00.780
Dit is een nieuwe constructeursfunctie, of een nieuwe klasse, die,

07:00.780 --> 07:03.040
zoals ik heb uitgelegd, slechts syntactisch

07:03.040 --> 07:04.300
suiker is voor de constructeursfunctie,

07:04.300 --> 07:06.750
en deze constructeursfunctie vervangt dus onze

07:06.750 --> 07:09.070
oorspronkelijke klasse, onze oorspronkelijke

07:09.070 --> 07:12.160
constructeursfunctie.

07:12.160 --> 07:15.220
Omdat ik hier super heb genoemd, slaan

07:15.220 --> 07:17.610
we de originele functie op.

07:17.610 --> 07:19.690
We slaan de oorspronkelijke klasse op, alles

07:19.690 --> 07:22.540
wat we hier initialiseren gebeurt in principe nog steeds,

07:22.540 --> 07:25.530
want dat doe ik ook in mijn vervangende constructor, en ik breid

07:25.530 --> 07:27.480
de oorspronkelijke klasse uit.

07:27.480 --> 07:30.420
Dus we bewaren alles wat in de oorspronkelijke klas zat.

07:30.420 --> 07:31.550
U hoeft dat niet te doen,

07:31.550 --> 07:32.670
maar ik doe het hier, omdat

07:32.670 --> 07:35.560
ik die oorspronkelijke gegevens niet wil verliezen.

07:35.560 --> 07:36.850
Maar achter de schermen vervang

07:36.850 --> 07:39.770
ik de klasse door mijn nieuwe aangepaste klasse hier, en daarmee

07:39.770 --> 07:42.370
kunnen we extra logica toevoegen, die moet worden uitgevoerd

07:42.370 --> 07:45.600
wanneer de klasse wordt geïnstantieerd.

07:45.600 --> 07:49.090
En nu kunnen we ineens logica toevoegen die niet wordt uitgevoerd

07:49.090 --> 07:52.410
wanneer de klasse wordt gedefinieerd, maar wanneer de klasse

07:52.410 --> 07:54.660
wordt geïnstantieerd.

07:54.660 --> 07:57.150
En dit moet dus een mooi eerste voorbeeld

07:57.150 --> 08:01.860
zijn van de volle kracht die je met decorateurs kunt ontketenen als je echt

08:01.860 --> 08:04.480
begrijpt wat je ermee kunt doen.

08:04.480 --> 08:06.800
En je kunt ze niet zomaar definiëren als functies,

08:06.800 --> 08:09.970
en je kunt ze niet zomaar definiëren met factorfuncties.

08:09.970 --> 08:12.600
Bij sommige decoratoren, zoals de klasse-decorator,

08:12.600 --> 08:14.400
kun je ook iets teruggeven om het ding

08:14.400 --> 08:17.650
waaraan je de decorator hebt toegevoegd, in ons geval de klasse,

08:17.650 --> 08:19.470
te vervangen door een nieuwe klasse

08:19.470 --> 08:23.000
die de oude klasse kan implementeren, maar ook zijn nieuwe aangepaste

08:23.000 --> 08:25.711
logica kan toevoegen.

08:25.711 --> 08:28.004
En daarmee, als we dit weer becommentariëren,

08:28.004 --> 08:30.240
renderen we Max weer naar het scherm

08:30.240 --> 08:31.570
met onze eigen klasse

08:31.570 --> 08:35.793
die de oude klasse vervangt, of uitbreidt en vervangt.
