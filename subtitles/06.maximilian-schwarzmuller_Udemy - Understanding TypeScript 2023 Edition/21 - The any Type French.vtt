WEBVTT

00:02.260 --> 00:03.960
Instructeur : Avec cela, nous avons presque fini

00:03.960 --> 00:04.920
avec les types de base.

00:04.920 --> 00:07.470
Il existe un autre type, que nous avons

00:07.470 --> 00:09.390
déjà vu, et c'est le type any.

00:09.390 --> 00:11.480
Le type any est le type le plus flexible que vous

00:11.480 --> 00:13.310
pouvez assigner en TypeScript.

00:13.310 --> 00:16.710
Ce type ne dit rien à TypeScript.

00:16.710 --> 00:19.960
Cela signifie que vous pouvez y stocker n'importe quel type de valeur.

00:19.960 --> 00:22.031
Nous n'avons pas reçu d'affectation de type spécifique.

00:22.031 --> 00:25.260
TypeScript ne vous criera jamais dessus lorsque

00:25.260 --> 00:27.040
vous en utiliserez.

00:27.040 --> 00:28.030
Dans notre code ici, si

00:28.030 --> 00:31.360
je définissais le type d'activités favorites sur n'importe quel type, je

00:31.360 --> 00:32.870
n'obtiendrais pas d'erreur.

00:32.870 --> 00:36.580
S'il le fixe à n'importe quel tableau, j'indique au moins à TypeScript que les

00:36.580 --> 00:39.220
activités favorites sont un tableau de quelque chose.

00:39.220 --> 00:41.460
Donc, si je ne stockais qu'une seule valeur, j'obtiendrais

00:41.460 --> 00:42.830
une erreur.

00:42.830 --> 00:44.500
Mais tant que c'est un tableau,

00:44.500 --> 00:46.638
je peux y stocker ce que je veux.

00:46.638 --> 00:49.840
Tout est donc très flexible.

00:49.840 --> 00:52.070
Cela peut sembler génial au premier abord,

00:52.070 --> 00:54.060
mais c'est en fait un gros inconvénient

00:54.060 --> 00:58.290
et vous devez absolument l'éviter dans la mesure du possible.

00:58.290 --> 01:00.170
Parce que tous les avantages

01:00.170 --> 01:02.512
de TypeScript sont perdus.

01:02.512 --> 01:04.380
Il vous donne la même expérience que

01:04.380 --> 01:06.430
celle que vous avez avec vanilla JavaScript

01:06.430 --> 01:10.480
où vous devez également taper n'importe quoi sur tout pour ainsi dire.

01:10.480 --> 01:13.820
Tout fait en sorte que le compilateur TypeScript ne

01:13.820 --> 01:16.020
puisse rien vérifier, car si une propriété

01:16.020 --> 01:19.180
ou une variable peut stocker n'importe quelle valeur,

01:19.180 --> 01:20.818
il n'y a pas grand-chose à

01:20.818 --> 01:23.687
vérifier, n'est-ce pas ?

01:23.687 --> 01:27.130
Vous pouvez donc utiliser n'importe quelle solution de repli si vous

01:27.130 --> 01:30.270
avez une valeur, un type de données pour lequel vous ne pouvez

01:30.270 --> 01:31.810
pas vraiment savoir quel type

01:31.810 --> 01:33.820
de données sera stocké et pour lequel vous

01:33.820 --> 01:37.050
utilisez peut-être des contrôles d'exécution, comme nous l'avons

01:37.050 --> 01:40.440
fait ici, au moment de l'exécution pour préciser ce que vous voulez

01:40.440 --> 01:42.660
faire pour certaines valeurs.

01:42.660 --> 01:44.600
Alors vous pouvez choisir n'importe lequel.

01:44.600 --> 01:48.210
Mais dans d'autres cas, vous voulez vraiment les éviter.

01:48.210 --> 01:51.120
Si vous avez une chance de savoir avec quel type de données

01:51.120 --> 01:54.090
vous travaillez, soyez explicite à ce sujet.

01:54.090 --> 01:56.780
Laissez l'inférence TypeScript faire son travail ou définissez

01:56.780 --> 01:58.817
explicitement vos propres types.

01:58.817 --> 02:01.783
Ne vous y repliez pas si vous n'en avez pas besoin.
