WEBVTT

00:02.150 --> 00:06.310
教师：现在, 您还可以在界面中添加只读修改器｡

00:06.310 --> 00:10.780
您不能添加public或private或类似的内容｡ 

00:10.780 --> 00:15.610
这在接口上是不可能的, 但是可以添加read-only,

00:15.610 --> 00:19.470
以明确表示在基于此接口生成的任何对象中,

00:19.470 --> 00:22.710
此属性只能设置一次, 并且此后为只读,

00:22.710 --> 00:28.440
以便在初始化对象后不能更改｡

00:28.440 --> 00:31.893
如果我们用类型来代替, 你也可以在类型上使用,

00:33.220 --> 00:51.400
所以, 这两件事非常相似, 但更常见的是, 如果你真的想使用一个对象, 你可以使用一个接口, 只读只是你可以添加的一个额外特性.

00:51.400 --> 00:53.320
在这里添加了只读, 顺便说一下,

00:53.320 --> 00:56.100
你看我没有在类中添加它｡

00:56.100 --> 00:58.170
我没有在这里添加只读属性,

00:58.170 --> 01:04.740
如果我现在转到用户1, 然后尝试将name设置为其他属性, 我会在这里得到一个错误,

01:04.740 --> 01:06.120
因为它是只读的,

01:06.120 --> 01:10.140
当然, 如果我保存它, 它会尝试编译它, 我也会得到这个错误,

01:10.140 --> 01:12.640
因此, 一旦我们在类中实现它,

01:12.640 --> 01:16.910
接口就会真正产生影响, 即使我没有在这里添加只读属性,

01:16.910 --> 01:19.650
这个类知道它实现了readable,

01:19.650 --> 01:32.973
它自动假设属性名, 我们在这里有, 因为接口的原因我们需要有, 是只读的, 因为这是我们在接口内部设置的, 当然这也很方便.
