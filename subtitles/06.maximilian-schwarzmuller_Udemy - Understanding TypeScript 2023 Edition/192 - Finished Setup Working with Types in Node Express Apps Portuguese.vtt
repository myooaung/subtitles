WEBVTT

00:02.170 --> 00:03.420
Instrutor: Então, vamos começar.

00:03.420 --> 00:06.330
Como mencionei, aqui eu criarei uma API REST muito

00:06.330 --> 00:09.130
básica, mas é claro que você poderia construir qualquer

00:09.130 --> 00:10.810
aplicação de Nodo com ou sem expressa

00:10.810 --> 00:13.780
e de qualquer tipo com TypeScript, então este é apenas

00:13.780 --> 00:15.570
um exemplo.

00:15.570 --> 00:18.990
Você não está restrito a esta aplicação específica.

00:18.990 --> 00:21.560
Na pasta src vou adicionar um aplicativo. ts, que será o ponto

00:21.560 --> 00:23.060
de entrada raiz onde

00:23.060 --> 00:25.970
giramos aquele servidor.

00:25.970 --> 00:29.530
E lá eu quero importar algo do Express, desta estrutura

00:29.530 --> 00:31.203
do Express.

00:32.970 --> 00:35.460
Agora você provavelmente sabe como podemos adicionar o Express

00:35.460 --> 00:37.890
aqui e configurar um servidor web com o Express.

00:37.890 --> 00:41.330
Importamos Express com esta sintaxe aqui

00:41.330 --> 00:46.330
e depois aqui podemos executar Express como uma função.

00:46.380 --> 00:50.170
Recuperamos tal objeto de aplicação, sobre o qual podemos telefonar

00:50.170 --> 00:53.750
para escutar em uma determinada porta para pedidos recebidos.

00:53.750 --> 00:56.120
Agora isto funcionaria em JavaScript normal, mas você

00:56.120 --> 00:58.420
já está vendo que estou recebendo um erro aqui.

00:59.540 --> 01:01.600
Agora eu também recebo uma sugestão

01:01.600 --> 01:03.500
de por que eu poderia estar recebendo

01:03.500 --> 01:06.290
este erro aqui porque a exigência é realmente uma

01:06.290 --> 01:10.100
função que existe na nota. js, mas não no lado do navegador.

01:10.100 --> 01:12.540
Agora no tsconfig. json file Eu não estou usando

01:12.540 --> 01:16.640
nenhuma libra especial que suportaria o nó. js então, neste TypeScript,

01:16.640 --> 01:18.120
não tem conhecimento

01:18.120 --> 01:20.150
desta função geral que existe

01:20.150 --> 01:22.900
em um nó. ambiente js.

01:22.900 --> 01:27.140
Agora, para que isto funcione, precisamos instalar um tipo extra com "npm

01:27.140 --> 01:30.220
install --save-dev" podemos instalar "@types/node"

01:30.220 --> 01:32.410
para instalar todos os tipos que precisamos

01:32.410 --> 01:36.291
para trabalhar com o nó. js Então vamos executar

01:36.291 --> 01:39.460
este comando e ver se isso nos ajuda.

01:39.460 --> 01:42.320
Sim, está feito e este erro desapareceu.

01:42.320 --> 01:44.390
Mas talvez você também tenha visto que no aplicativo

01:44.390 --> 01:46.680
eu não obtive nenhum auto-completamento.

01:46.680 --> 01:50.190
Também não se perde por erro, mas se pairarmos sobre o aplicativo, vemos que

01:50.190 --> 01:52.410
o TypeScript não sabe o que está lá dentro.

01:52.410 --> 01:54.210
É do tipo "qualquer".

01:54.210 --> 01:56.530
Portanto, provavelmente deveríamos instalar

01:56.530 --> 01:59.930
mais tipos e também instalar "@types/express" para instalar

01:59.930 --> 02:02.410
tipos específicos expressos.

02:02.410 --> 02:04.320
E esse é um padrão que você já conhece.

02:04.320 --> 02:06.850
Demos uma olhada nisso na seção de biblioteca

02:06.850 --> 02:08.350
de terceiros do curso.

02:08.350 --> 02:12.030
Lá, eu também mostrei como você pode instalar pacotes de tipos para

02:12.030 --> 02:15.220
obter melhor suporte em seus scripts TypeScript.

02:15.220 --> 02:19.320
Portanto, com este tipo adicionado, sem nenhuma configuração

02:19.320 --> 02:22.030
extra, Hah, ele ainda não funciona.

02:22.030 --> 02:23.140
Bem, a razão para isso é a sintaxe

02:23.140 --> 02:25.330
de importação que estamos usando aqui.

02:25.330 --> 02:28.270
Este é o comum. js sintaxe de importação

02:28.270 --> 02:30.450
que observa. js usa por padrão, mas

02:30.450 --> 02:33.660
aqui estamos realmente em um ambiente em TypeScript onde podemos

02:33.660 --> 02:36.140
usar uma sintaxe de importação diferente.

02:36.140 --> 02:38.230
Podemos usar a mesma sintaxe de importação que

02:38.230 --> 02:40.373
conhecemos dos módulos ES no navegador.

02:41.240 --> 02:46.240
Assim, podemos usar "importar expresso de 'expresso', por exemplo.

02:46.710 --> 02:48.620
E se fizermos isso e depois pairarmos sobre "app", você

02:48.620 --> 02:49.910
vê agora que é do tipo "Express".

02:49.910 --> 02:53.040
Portanto, agora temos suporte a TypeScript.

02:53.040 --> 02:54.569
Agora, uma nota importante.

02:54.569 --> 02:58.790
Em nota. js também existe uma sintaxe

02:58.790 --> 03:00.810
que é semelhante a esta.

03:00.810 --> 03:03.420
Agora ela está sob uma bandeira experimental,

03:03.420 --> 03:06.190
e está sob essa bandeira há muito tempo, portanto,

03:06.190 --> 03:10.010
usando comum. js em nota. js é de longe a forma padrão

03:10.010 --> 03:13.482
e mais comum de acrescentar importações e exportações.

03:13.482 --> 03:16.060
A sintaxe parecida com esta é suportada se você definir

03:16.060 --> 03:18.380
esta bandeira experimental, mas aqui neste

03:18.380 --> 03:19.990
código não estamos realmente usando

03:19.990 --> 03:24.012
este nó experimental. sintaxe js.

03:24.012 --> 03:26.209
Em vez disso, estamos usando o TypeScript.

03:26.209 --> 03:29.859
Uma vez que compilamos isto em JavaScript, isto mudará.

03:29.859 --> 03:31.860
E eu posso realmente mostrar isto a vocês

03:31.860 --> 03:34.060
para que também possamos executar isto.

03:34.060 --> 03:36.230
Se você executar "tsc" aqui, talvez

03:36.230 --> 03:40.330
"tsc-w" para já entrar no modo de relógio, você vê que isto

03:40.330 --> 03:42.680
inicia a compilação.

03:42.680 --> 03:44.110
Ele cria uma pasta distante, e lá dentro

03:44.110 --> 03:46.770
temos agora um aplicativo. js, e aqui dentro,

03:46.770 --> 03:50.040
isto agora parece diferente.

03:50.040 --> 03:54.500
Vejam, lá agora não se configura essa importação da forma como

03:54.500 --> 03:55.710
a temos aqui.

03:55.710 --> 03:58.900
Em vez disso, usa uma sintaxe diferente.

03:58.900 --> 04:02.350
Portanto, aqui, este é o código que será realmente executado.

04:02.350 --> 04:04.780
E podemos executar isto com nodemon com

04:04.780 --> 04:07.640
esta ferramenta que reinicia automaticamente

04:07.640 --> 04:09.470
o servidor se nosso código mudar,

04:09.470 --> 04:12.230
abrindo uma nova aba aqui no terminal.

04:12.230 --> 04:13.620
Mantenha a outra aba aberta

04:13.620 --> 04:15.960
porque esse é nosso processo de compilação TypeScript,

04:15.960 --> 04:18.760
e nessa nova aba queremos iniciar nosso servidor com a ajuda

04:18.760 --> 04:20.095
de nodemon.

04:20.095 --> 04:22.990
Para isso, vamos para o pacote. json e adicionar um novo

04:22.990 --> 04:26.260
roteiro, um roteiro inicial talvez, onde dizemos

04:26.260 --> 04:30.900
"nodemon dist/app". js" para que o nodemon execute

04:30.900 --> 04:34.200
este arquivo na pasta dist e inicie nosso

04:34.200 --> 04:36.360
servidor com isso.

04:36.360 --> 04:39.430
E com isso adicionado e o pacote. json file saved podemos rodar

04:39.430 --> 04:43.240
npmstart para girar nosso servidor de desenvolvimento.

04:43.240 --> 04:47.710
E agora ele está servindo esta aplicação distinta. js file Agora esta é a configuração geral

04:47.710 --> 04:49.230
que temos, e este é o TypeScript

04:49.230 --> 04:52.030
que já está fazendo algum trabalho aqui.

04:52.030 --> 04:53.940
Temos também o TypeSupport.

04:53.940 --> 04:55.360
E aqui você vê em anexo. ts podemos escrever

04:55.360 --> 04:57.756
um código que nos parece muito familiar com

04:57.756 --> 05:01.420
a sintaxe de importação/exportação que já conhecemos, mas o que

05:01.420 --> 05:03.640
obtemos como saída é no final um nó JavaScript

05:03.640 --> 05:07.000
regular. código js e isso

05:07.000 --> 05:09.640
é extremamente útil.

05:09.640 --> 05:12.140
Agora, com isso, vamos fazer coisas mais úteis

05:12.140 --> 05:15.003
do que apenas iniciar um servidor que não faz nada.
