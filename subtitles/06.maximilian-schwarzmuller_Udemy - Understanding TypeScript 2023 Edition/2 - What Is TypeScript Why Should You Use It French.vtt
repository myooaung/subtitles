WEBVTT

00:02.350 --> 00:04.170
Instructeur : Alors, qu'est-ce que TypeScript ?

00:04.170 --> 00:06.860
De quoi s'agit-il, pourquoi l'utiliser ?

00:06.860 --> 00:10.820
TypeScript est un super-ensemble de JavaScript.

00:10.820 --> 00:12.190
Maintenant, qu'est-ce que ça veut dire ?

00:12.190 --> 00:14.250
Cela signifie que TypeScript est en fin

00:14.250 --> 00:16.370
de compte un langage, un langage de programmation,

00:16.370 --> 00:18.710
qui s'appuie sur JavaScript.

00:18.710 --> 00:20.940
Il ne s'agit pas d'un tout nouveau langage,

00:20.940 --> 00:23.980
mais d'une reprise du langage JavaScript, auquel il ajoute

00:23.980 --> 00:27.450
de nouvelles fonctionnalités et de nouveaux avantages.

00:27.450 --> 00:31.720
Il rend l'écriture de code JavaScript plus facile et plus puissante, pourrait-on

00:31.720 --> 00:32.840
dire.

00:32.840 --> 00:35.624
Mais, nous avons un énorme désavantage.

00:35.624 --> 00:39.786
TypeScript ne peut pas être exécuté par les environnements JavaScript

00:39.786 --> 00:41.760
comme le navigateur.

00:41.760 --> 00:44.270
Les navigateurs ne peuvent pas exécuter TypeScript,

00:44.270 --> 00:48.486
et par exemple, Node. js ne peut pas non plus exécuter TypeScript, de

00:48.486 --> 00:52.250
sorte que les environnements dans lesquels nous pouvons exécuter JavaScript ne

00:52.250 --> 00:54.080
prennent pas en charge TypeScript.

00:54.080 --> 00:56.140
Quelle est l'idée derrière TypeScript alors ?

00:56.140 --> 01:00.760
C'est une meilleure version de JavaScript et nous ne pouvons pas l'utiliser ?

01:00.760 --> 01:02.130
Eh bien, pas tout à fait.

01:02.130 --> 01:06.050
TypeScript est un langage de programmation, mais c'est aussi un outil.

01:06.050 --> 01:10.049
Il s'agit d'un puissant compilateur que vous exécutez sur

01:10.049 --> 01:14.410
votre code pour compiler votre code typecript en JavaScript.

01:14.410 --> 01:16.540
Ainsi, ce que vous obtenez comme résultat

01:16.540 --> 01:20.260
lorsque vous écrivez du code en TypeScript est du JavaScript.

01:20.260 --> 01:22.870
Mais vous n'avez pas écrit ce code JavaScript, vous

01:22.870 --> 01:24.900
avez écrit du code TypeScript avec toutes

01:24.900 --> 01:27.480
les nouvelles fonctionnalités et tous les avantages,

01:27.480 --> 01:30.670
et vous obtenez du code JavaScript normal.

01:30.670 --> 01:33.810
Cela soulève bien sûr une question importante : comment

01:33.810 --> 01:36.710
TypeScript peut-il ajouter de nouvelles fonctionnalités

01:36.710 --> 01:40.630
si ce que vous obtenez au final est du JavaScript ordinaire ?

01:40.630 --> 01:43.460
La réponse est la suivante : le compilateur TypeScript

01:43.460 --> 01:47.710
compile ces nouvelles fonctionnalités en contournements JavaScript, de sorte

01:47.710 --> 01:50.670
qu'au final, il peut vous donner une syntaxe plus agréable,

01:50.670 --> 01:52.890
une manière plus facile de faire quelque

01:52.890 --> 01:56.571
chose, et il compilera ensuite cette manière plus agréable et plus

01:56.571 --> 01:59.820
facile en un extrait JavaScript plus complexe, que vous auriez

01:59.820 --> 02:02.060
dû écrire autrement.

02:02.060 --> 02:03.230
Ce n'est donc pas magique,

02:03.230 --> 02:06.790
bien sûr, il ne peut pas ajouter ce qui n'est pas possible du tout dans le langage

02:06.790 --> 02:08.610
JavaScript, mais il peut ajouter de nouvelles

02:08.610 --> 02:11.150
fonctionnalités qui sont simplement plus faciles à

02:11.150 --> 02:15.020
utiliser, une syntaxe plus agréable, des choses comme ça.

02:15.020 --> 02:17.470
En outre, TypeScript fait bien sûr

02:17.470 --> 02:20.900
une chose importante, que son nom indique déjà.

02:20.900 --> 02:22.740
Il ajoute des types, il ajoute une

02:22.740 --> 02:26.230
fonctionnalité au langage JavaScript, que nous allons examiner

02:26.230 --> 02:28.750
de près dans une seconde, qui vous donnera en

02:28.750 --> 02:31.541
fait, en tant que développeur, la possibilité d'identifier

02:31.541 --> 02:35.070
les erreurs dans votre code plus tôt, avant que votre script ne

02:35.070 --> 02:38.480
s'exécute et que l'erreur ne se produise au moment de l'exécution

02:38.480 --> 02:41.350
dans le navigateur.

02:41.350 --> 02:44.320
Ainsi, elle ne se contente pas de vous offrir de nouvelles

02:44.320 --> 02:46.690
fonctionnalités et des façons plus agréables

02:46.690 --> 02:50.240
de faire quelque chose, elle vous offre également un contrôle d'erreur

02:50.240 --> 02:54.153
supplémentaire qui permet de détecter et de corriger, dès le début du développement,

02:54.153 --> 02:58.370
des erreurs qui, autrement, seraient des erreurs d'exécution.

02:58.370 --> 03:00.600
Alors, pourquoi utiliser TypeScript ?

03:00.600 --> 03:02.570
Prenons cet exemple, une fonction

03:02.570 --> 03:06.710
JavaScript assez simple qui additionne deux nombres.

03:06.710 --> 03:08.760
Maintenant, lorsque je l'appelle, remarquez

03:08.760 --> 03:11.810
que je passe deux chaînes de caractères au lieu de deux nombres,

03:11.810 --> 03:14.810
et je vais vous montrer un exemple réel où quelque chose comme cela

03:14.810 --> 03:18.090
pourrait se produire de façon réaliste dans une seconde.

03:18.090 --> 03:20.270
Donc, nous appelons cette fonction avec deux

03:20.270 --> 03:22.519
chaînes de caractères et le résultat que vous

03:22.519 --> 03:25.260
obtiendrez ici est probablement un comportement indésirable,

03:25.260 --> 03:27.240
parce que si vous ajoutez deux chaînes de

03:27.240 --> 03:29.596
caractères, JavaScript concaténera les chaînes

03:29.596 --> 03:32.780
au lieu de faire un calcul mathématique ici.

03:32.780 --> 03:36.310
Ainsi, le résultat ne serait pas cinq, mais vingt-trois,

03:36.310 --> 03:38.980
une chaîne concaténée des deux nombres.

03:38.980 --> 03:41.690
C'est une erreur que vous pouvez avoir en JavaScript,

03:41.690 --> 03:43.530
ce n'est pas une erreur technique,

03:43.530 --> 03:46.720
vous n'aurez probablement pas d'erreur d'exécution, mais

03:46.720 --> 03:49.832
vous avez une erreur logique dans votre code.

03:49.832 --> 03:52.820
Et cela, bien sûr, peut conduire à d'énormes problèmes dans

03:52.820 --> 03:55.870
les applications web que vous écrivez avec JavaScript.

03:55.870 --> 03:59.360
Bien sûr, en JavaScript, nous avons des stratégies d'atténuation, nous pouvons

03:59.360 --> 04:02.541
ajouter un contrôle if dans la fonction pour vérifier les types d'entrées

04:02.541 --> 04:05.440
au moment de l'exécution, nous pouvons également valider et

04:05.440 --> 04:08.240
assainir les entrées de l'utilisateur, et bien que nous puissions

04:08.240 --> 04:10.670
vouloir faire tout cela, ce serait également bien si

04:10.670 --> 04:15.840
nous pouvions déjà attraper des erreurs comme celle-ci pendant le développement.

04:15.840 --> 04:19.220
Et heureusement, c'est possible avec TypeScript, parce que les développeurs

04:19.220 --> 04:21.810
peuvent écrire du code invalide ici et introduire

04:21.810 --> 04:23.970
des bots comme celui-ci en JavaScript, et

04:23.970 --> 04:26.160
avec TypeScript nous avons un outil qui nous

04:26.160 --> 04:30.060
aide à écrire un meilleur code et à éviter de tels problèmes.

04:30.060 --> 04:31.910
Alors, regardons cela de plus près.
