WEBVTT

1
00:00:02.190 --> 00:00:04.480
So to get started with our own generics.

2
00:00:04.480 --> 00:00:06.820
Here below the commented out code.

3
00:00:06.820 --> 00:00:09.210
I will start with a generic function.

4
00:00:09.210 --> 00:00:11.430
You can build generic classes and functions

5
00:00:11.430 --> 00:00:15.350
I'll show both and here I'll start with a function.

6
00:00:15.350 --> 00:00:17.490
Now lets say we wanna have a function

7
00:00:17.490 --> 00:00:22.490
which basically merges two objects and returns a new object.

8
00:00:23.660 --> 00:00:25.380
So here we could name it "merge".

9
00:00:25.380 --> 00:00:28.803
And we wanna get object A and object B as a input.

10
00:00:30.010 --> 00:00:33.990
Now of course we could write this function in a certain way.

11
00:00:33.990 --> 00:00:36.660
We could say this is of type object

12
00:00:36.660 --> 00:00:39.033
and this is of type object.

13
00:00:39.960 --> 00:00:41.760
And then what this function does is,

14
00:00:41.760 --> 00:00:45.200
it returns the result of object assign.

15
00:00:45.200 --> 00:00:48.130
Where I get object A and object B.

16
00:00:48.130 --> 00:00:50.230
So of course since we got this object assign

17
00:00:50.230 --> 00:00:53.000
method already built into normal javascript.

18
00:00:53.000 --> 00:00:55.820
We could argue if we really need a merge function

19
00:00:55.820 --> 00:00:58.140
but of course you could be doing additional work here.

20
00:00:58.140 --> 00:01:00.480
You could enrich this with extra information,

21
00:01:00.480 --> 00:01:01.833
with extra options and in the end

22
00:01:01.833 --> 00:01:04.730
this is just a demo, just and example.

23
00:01:04.730 --> 00:01:07.510
So this would be valid, we could call merge here,

24
00:01:07.510 --> 00:01:11.830
and console log its result, like this.

25
00:01:11.830 --> 00:01:15.130
And then pass in an object which has a name key

26
00:01:15.130 --> 00:01:17.570
and a second object which has an age

27
00:01:17.570 --> 00:01:20.010
and if we run that and we save this.

28
00:01:20.010 --> 00:01:22.780
Here in the browser indeed we get this output.

29
00:01:22.780 --> 00:01:24.280
So we get this merge object.

30
00:01:24.280 --> 00:01:27.050
Now this works, the problem we have

31
00:01:27.050 --> 00:01:29.660
with that is if we

32
00:01:31.660 --> 00:01:33.300
try to store this

33
00:01:33.300 --> 00:01:38.097
merge name max, and age 30.

34
00:01:39.620 --> 00:01:44.620
If we try to store this here, I can't access name

35
00:01:45.770 --> 00:01:48.730
on the result, I can't access age on the results

36
00:01:48.730 --> 00:01:50.020
on this merged object.

37
00:01:50.020 --> 00:01:52.360
Even though we know that both will exist.

38
00:01:52.360 --> 00:01:54.830
Because typescript doesn't know this.

39
00:01:54.830 --> 00:01:57.100
Typescript can't know this.

40
00:01:57.100 --> 00:01:59.310
Because we are just telling it, you're getting an object

41
00:01:59.310 --> 00:02:02.370
and in the end typed in first that we return an object.

42
00:02:02.370 --> 00:02:04.790
Which is correct, but which doesn't carry

43
00:02:04.790 --> 00:02:07.810
all the information we could use here.

44
00:02:07.810 --> 00:02:09.970
Now of course we can always do type casting

45
00:02:09.970 --> 00:02:12.080
we can tell typescript that what we get back

46
00:02:12.080 --> 00:02:14.220
is an object where we have a name key

47
00:02:14.220 --> 00:02:15.960
and where we have an age key.

48
00:02:15.960 --> 00:02:19.020
But that's really cumbersome if we have to do that.

49
00:02:19.020 --> 00:02:21.420
So here, generics can help us.

50
00:02:21.420 --> 00:02:23.750
We turn this into a generic function by adding

51
00:02:23.750 --> 00:02:26.470
these angled brackets after the function name.

52
00:02:26.470 --> 00:02:29.740
And then we define Q identifiers.

53
00:02:29.740 --> 00:02:33.190
Typically you start with T, for type.

54
00:02:33.190 --> 00:02:35.600
But you could use any identifier here,

55
00:02:35.600 --> 00:02:37.730
doesn't have to be a single character

56
00:02:37.730 --> 00:02:39.860
but the convention is to use a single character

57
00:02:39.860 --> 00:02:42.250
and typically, if you only have one generic type

58
00:02:42.250 --> 00:02:43.690
you name this T.

59
00:02:43.690 --> 00:02:46.640
And then you say, well this generic type here,

60
00:02:46.640 --> 00:02:48.510
this is now available inside of this function.

61
00:02:48.510 --> 00:02:51.453
So we could say what we get here is of type T.

62
00:02:53.090 --> 00:02:55.740
Looks strange, we'll get there no worries.

63
00:02:55.740 --> 00:02:57.280
Now here we get two arguments where

64
00:02:57.280 --> 00:02:59.570
we don't know exactly how they will look like.

65
00:02:59.570 --> 00:03:02.450
So I will accept a second generic type here.

66
00:03:02.450 --> 00:03:04.340
Simply by adding a comma in the angled brackets,

67
00:03:04.340 --> 00:03:07.400
And then we just continue in the alphabet.

68
00:03:07.400 --> 00:03:10.490
And therefor the second generic parameter or type

69
00:03:10.490 --> 00:03:15.490
you might be using in a function typically is named U.

70
00:03:15.630 --> 00:03:18.560
So we could say this is of type U.

71
00:03:18.560 --> 00:03:22.100
Okay now what does this yield us?

72
00:03:22.100 --> 00:03:25.450
Well a lot actually, as you see with this alone

73
00:03:25.450 --> 00:03:28.620
if you hover over merge, typescript infers that

74
00:03:28.620 --> 00:03:33.230
this function returns the intersection of T and U.

75
00:03:33.230 --> 00:03:36.800
And we could of course also set this explicitly like this

76
00:03:36.800 --> 00:03:38.040
but we don't even need to do that

77
00:03:38.040 --> 00:03:42.010
because object assign returns an intersection and therefor

78
00:03:42.010 --> 00:03:44.150
since we returned a result of object assign,

79
00:03:44.150 --> 00:03:45.740
typescript automatically understands

80
00:03:45.740 --> 00:03:48.390
that this function returns the intersection.

81
00:03:48.390 --> 00:03:50.320
So how is this helpful then?

82
00:03:50.320 --> 00:03:52.510
Well if we now hover over merged object

83
00:03:52.510 --> 00:03:54.260
we see that now with this alone

84
00:03:54.260 --> 00:03:56.450
typescript understands that what we store

85
00:03:56.450 --> 00:03:59.230
in merged object is the intersection of these

86
00:03:59.230 --> 00:04:01.690
two object types, because it sees that we're

87
00:04:01.690 --> 00:04:04.220
passing in these objects, which are of these

88
00:04:04.220 --> 00:04:06.100
object types it infers.

89
00:04:06.100 --> 00:04:08.840
Name string and age number.

90
00:04:08.840 --> 00:04:11.590
And that our function returns the intersection.

91
00:04:11.590 --> 00:04:13.630
Why is it able to infer this now and

92
00:04:13.630 --> 00:04:16.313
not with object which we had before?

93
00:04:17.220 --> 00:04:19.560
Because object is highly unspecific type.

94
00:04:19.560 --> 00:04:22.490
We say any object and yes therefor typescript

95
00:04:22.490 --> 00:04:24.530
is able to infer that we return

96
00:04:24.530 --> 00:04:26.600
the intersection of object and object.

97
00:04:26.600 --> 00:04:29.570
But the intersection of two unknown objects

98
00:04:29.570 --> 00:04:32.270
is just a new unknown object which doesn't

99
00:04:32.270 --> 00:04:35.420
offer any additional type information to typescript.

100
00:04:35.420 --> 00:04:38.170
With generic types, what we're telling typescript

101
00:04:38.170 --> 00:04:43.170
is that, these two parameters can and often will be

102
00:04:43.282 --> 00:04:47.100
of different types and therefor typescript

103
00:04:47.100 --> 00:04:49.690
is able to understand that we're not just working

104
00:04:49.690 --> 00:04:53.150
with some random object type, but that we will get

105
00:04:53.150 --> 00:04:55.250
different type data here.

106
00:04:55.250 --> 00:04:56.940
And that this function overall

107
00:04:56.940 --> 00:04:59.770
will return the intersection of that data.

108
00:04:59.770 --> 00:05:01.773
And therefor typescript is able to understand that

109
00:05:01.773 --> 00:05:04.390
what we store in here in merged object

110
00:05:04.390 --> 00:05:07.910
is such intersect the data of these two inputs.

111
00:05:07.910 --> 00:05:09.530
Because now we're not just dealing with

112
00:05:09.530 --> 00:05:14.423
some unknown objects here but with very specific types.

113
00:05:15.330 --> 00:05:20.150
And therefor now if I console log merged object age here

114
00:05:20.150 --> 00:05:22.980
this works without errors as you can tell.

115
00:05:22.980 --> 00:05:26.770
Here I'm printing 30 because of generic types.

116
00:05:26.770 --> 00:05:29.040
We're giving typescript the extra information

117
00:05:29.040 --> 00:05:31.950
that we don't know exactly the types will be

118
00:05:31.950 --> 00:05:34.780
sure, there will be objects here we can tell that.

119
00:05:34.780 --> 00:05:36.550
But we don't know if its an object with

120
00:05:36.550 --> 00:05:38.640
a name key, with a age key, with a hobbies key.

121
00:05:38.640 --> 00:05:41.130
We don't know and we don't care, we don't care

122
00:05:41.130 --> 00:05:43.360
about the exact object here, we don't want

123
00:05:43.360 --> 00:05:46.050
to specify that this has to be of this type.

124
00:05:46.050 --> 00:05:47.490
Because then all of a sudden if I

125
00:05:47.490 --> 00:05:50.520
add hobbies in there, we would have a problem.

126
00:05:50.520 --> 00:05:52.540
So I don't want to be that restrictive.

127
00:05:52.540 --> 00:05:54.480
I just want to say this is of any type

128
00:05:54.480 --> 00:05:56.940
which I don't care about but its most likely

129
00:05:56.940 --> 00:05:58.590
a different type then of this one here.

130
00:05:58.590 --> 00:06:00.860
And if it would be the same that would be fine too.

131
00:06:00.860 --> 00:06:03.030
But typescript understands that we do

132
00:06:03.030 --> 00:06:06.530
have specific types here for these two parameters

133
00:06:06.530 --> 00:06:08.800
and that we return the intersection of them.

134
00:06:08.800 --> 00:06:12.660
Instead of just having any unspecific object here.

135
00:06:12.660 --> 00:06:14.770
Now specifically the magic here is not

136
00:06:14.770 --> 00:06:16.210
just that we tell typescript that

137
00:06:16.210 --> 00:06:18.410
we got two different types here.

138
00:06:18.410 --> 00:06:20.740
But that these types are not set in stone

139
00:06:20.740 --> 00:06:22.870
when we define this function, but they

140
00:06:22.870 --> 00:06:25.810
are set dynamically when we call the function.

141
00:06:25.810 --> 00:06:27.430
So here we're calling the function

142
00:06:27.430 --> 00:06:30.560
and typescript infers the types for the two arguments.

143
00:06:30.560 --> 00:06:33.890
For T, it basically fills in an object type

144
00:06:33.890 --> 00:06:36.677
with an object with a name property which holds a string

145
00:06:36.677 --> 00:06:39.600
and a hobbies property which holds an array of strings.

146
00:06:39.600 --> 00:06:43.290
And for U it fills in a type of type object

147
00:06:43.290 --> 00:06:47.990
with age property where age is of type number.

148
00:06:47.990 --> 00:06:51.030
Now when we call this function again in another line

149
00:06:51.030 --> 00:06:53.890
and we pass in different objects and

150
00:06:53.890 --> 00:06:57.090
I store this in a new constant with a new name,

151
00:06:57.090 --> 00:06:59.920
then of course, different types are filled in

152
00:06:59.920 --> 00:07:03.130
for T and U for this function call.

153
00:07:03.130 --> 00:07:05.350
You can also specifically tell typescript

154
00:07:05.350 --> 00:07:07.780
which types it should fill in by adding

155
00:07:07.780 --> 00:07:09.110
angled brackets after the

156
00:07:09.110 --> 00:07:11.320
function name when you call it

157
00:07:11.320 --> 00:07:13.010
and then you would fill

158
00:07:13.010 --> 00:07:15.200
in your own types for T and U.

159
00:07:15.200 --> 00:07:18.030
We could tell typescript that T should be of type string

160
00:07:18.030 --> 00:07:20.180
for this function call and U should

161
00:07:20.180 --> 00:07:22.710
be of type number but then of course typescript

162
00:07:22.710 --> 00:07:23.950
would complain about the

163
00:07:23.950 --> 00:07:25.940
concrete values we're passing in here.

164
00:07:25.940 --> 00:07:28.270
Because this clearly is not a string and

165
00:07:28.270 --> 00:07:30.190
if we would fix this, this clearly

166
00:07:30.190 --> 00:07:32.280
would not be of type number.

167
00:07:32.280 --> 00:07:34.650
So here we could be very specific and say well,

168
00:07:34.650 --> 00:07:38.620
the first argument or the type T to be precise

169
00:07:38.620 --> 00:07:41.700
for this function call here will be an object type

170
00:07:41.700 --> 00:07:45.310
where we have a name property which is of type string

171
00:07:45.310 --> 00:07:48.850
and a hobbies property which is of type string array.

172
00:07:48.850 --> 00:07:52.970
And the concrete type for U, for this function call

173
00:07:52.970 --> 00:07:55.800
will be an object where we have an age property

174
00:07:55.800 --> 00:07:57.320
which should be of type number.

175
00:07:57.320 --> 00:08:00.220
And now we would be good and no errors

176
00:08:00.220 --> 00:08:02.730
would be there anymore and this would work.

177
00:08:02.730 --> 00:08:05.060
But this is redundant, you can absolutely

178
00:08:05.060 --> 00:08:07.310
do that and it is important to understand

179
00:08:07.310 --> 00:08:10.070
that this is in the end what generics are all about

180
00:08:10.070 --> 00:08:12.990
that you can fill in different concrete types

181
00:08:12.990 --> 00:08:15.170
for different function calls.

182
00:08:15.170 --> 00:08:16.930
But we don't need to do that here because

183
00:08:16.930 --> 00:08:20.110
typescript simply infers the types of the values

184
00:08:20.110 --> 00:08:22.170
we're passing as arguments here.

185
00:08:22.170 --> 00:08:25.120
And then places in the inferred types

186
00:08:25.120 --> 00:08:28.240
for T and U for this function call.

187
00:08:28.240 --> 00:08:31.283
That's how generics work behind the scenes in the end.

