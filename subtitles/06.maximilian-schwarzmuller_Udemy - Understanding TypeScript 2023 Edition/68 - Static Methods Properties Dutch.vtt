WEBVTT

00:02.251 --> 00:03.380
Instructeur: Een andere

00:03.380 --> 00:05.350
leuke eigenschap met betrekking tot

00:05.350 --> 00:08.000
eigenschappen en methoden, die ook bestaat in JavaScript

00:08.000 --> 00:10.010
als je ES6 of later gebruikt, maar alle

00:10.010 --> 00:11.180
typescripts zijn statische

00:11.180 --> 00:14.010
eigenschappen en methoden.

00:14.010 --> 00:17.520
Met statische eigenschappen en methoden kunt u eigenschappen en

00:17.520 --> 00:20.620
methoden aan klassen toevoegen die niet worden aangeroepen

00:20.620 --> 00:22.530
op een instantie van de klasse, dus

00:22.530 --> 00:26.080
waarbij u niet eerst de nieuwe klassenaam hoeft aan te roepen, maar

00:26.080 --> 00:28.950
die u rechtstreeks op de klasse aanroept.

00:28.950 --> 00:31.350
Dit wordt vaak gebruikt voor utiliteitsfuncties

00:31.350 --> 00:35.922
die je logisch wilt groeperen of naar een klasse wilt mappen, of globale

00:35.922 --> 00:40.860
constanten die je ook in een klasse wilt opslaan.

00:40.860 --> 00:43.270
Een voorbeeld ingebouwd in JavaScript,

00:43.270 --> 00:46.050
dat niet door typescript en niet door jou is

00:46.050 --> 00:48.290
gedefinieerd, maar deel uitmaakt

00:48.290 --> 00:51.170
van JavaScript in de browser is de Math constructor

00:51.170 --> 00:53.220
functie, of klasse als je het zo wilt

00:53.220 --> 00:55.500
noemen, die globaal beschikbaar is

00:55.500 --> 00:59.210
in JavaScript, waar je pi kunt benaderen als een constante

00:59.210 --> 01:01.400
waarde om je dat pi getal te geven,

01:01.400 --> 01:05.050
of functies, of methoden om precies te zijn, zoals pow om

01:05.050 --> 01:08.610
de macht van iets te berekenen.

01:08.610 --> 01:10.530
Dit zijn methoden en eigenschappen waartoe

01:10.530 --> 01:13.370
je geen toegang hebt in de instantie van Math.

01:13.370 --> 01:16.310
Je hoeft niet eerst nieuwe wiskunde te bellen.

01:16.310 --> 01:19.830
Dat werkt inderdaad niet, maar je benadert deze eigenschappen

01:19.830 --> 01:22.360
in methoden direct op de klasse zelf.

01:22.360 --> 01:25.340
Dus Math werkt hier meer als een naamruimte als een groeperingsmechanisme

01:25.340 --> 01:27.370
en dat is een veel voorkomend gebruik

01:27.370 --> 01:28.640
voor statische methoden

01:28.640 --> 01:30.480
en eigenschappen en je kunt ze ook

01:30.480 --> 01:33.650
toevoegen aan je eigen klassen.

01:33.650 --> 01:36.770
Laten we zeggen dat we op Department een methode willen

01:36.770 --> 01:40.050
hebben die ons helpt werknemers te creëren en dat is iets

01:40.050 --> 01:43.450
wat we misschien willen kunnen gebruiken zonder Department

01:43.450 --> 01:45.390
te instantiëren, omdat we typisch

01:45.390 --> 01:46.890
onze meer gespecialiseerde

01:46.890 --> 01:49.970
versies instantiëren, IT-afdeling en boekhoudafdeling

01:49.970 --> 01:51.290
en we willen Department

01:51.290 --> 01:54.710
niet echt instantiëren alleen maar om een utility methode

01:54.710 --> 01:56.890
aan te roepen en daarom kunnen we hier

01:56.890 --> 01:58.490
een methode toevoegen, create

01:58.490 --> 02:03.490
Employee, laten we zeggen, waar we de naam willen krijgen, die een string is als argument

02:03.680 --> 02:07.621
en daar willen we iets retourneren.

02:07.621 --> 02:10.230
Om er een statische methode van te maken, die we

02:10.230 --> 02:12.920
kunnen gebruiken zonder deze klasse te instantiëren,

02:12.920 --> 02:16.250
voegen we het statische sleutelwoord toe voor deze methode

02:16.250 --> 02:18.549
en dan geven we hier misschien een object

02:18.549 --> 02:23.549
terug waarvan we de naam-eigenschap hebben gekoppeld aan deze naamwaarde.

02:25.170 --> 02:27.010
Nu is dat natuurlijk een zeer eenvoudige

02:27.010 --> 02:28.690
methode, maar je krijgt het idee.

02:28.690 --> 02:31.960
Om dat te gebruiken kunnen we naar beneden gaan waar we

02:31.960 --> 02:33.490
onze code uitvoeren en nu

02:33.490 --> 02:36.940
zeggen dat we een nieuwe werknemer willen, werknemer1.

02:39.300 --> 02:41.020
Nou dan kunnen we dit gewoon

02:41.020 --> 02:46.020
met Departement krijgen. createEmployee en geef bijvoorbeeld Max

02:46.920 --> 02:50.680
door en als ik dan console. log(employee1) zouden we een

02:50.680 --> 02:53.170
object moeten zien met de naam Max.

02:53.170 --> 02:55.630
Dus als ik dat opsla, is dit inderdaad de

02:55.630 --> 02:58.240
werknemer die we net hebben aangemaakt.

02:58.240 --> 03:01.200
Dit zou dus een typisch voorbeeld zijn voor een statische methode.

03:01.200 --> 03:04.870
We roepen het rechtstreeks aan in de klasse, zonder het nieuwe sleutelwoord,

03:04.870 --> 03:06.360
en daarom gebruiken we de klasse

03:06.360 --> 03:09.030
als een groeperingsmechanisme, en als u een statische

03:09.030 --> 03:13.470
eigenschap wilt toevoegen, kunt u dat ook doen.

03:13.470 --> 03:17.950
Als u iets als het fiscale jaar hier hebt dat u momenteel in uw bedrijf

03:19.730 --> 03:22.040
wilt gebruiken, kunt u dit instellen

03:22.040 --> 03:24.980
op, laten we zeggen, 2020 en dan weer om het beschikbaar

03:24.980 --> 03:27.310
te maken zonder dit te instantiëren,

03:27.310 --> 03:28.560
kunt u statisch toevoegen

03:28.560 --> 03:30.810
voor deze eigenschap, of voor dat veld

03:30.810 --> 03:33.950
en dat nu openen.

03:33.950 --> 03:36.560
Dus nu daar beneden console. logboek. (mijnwerknemer).

03:38.050 --> 03:42.420
Hier hebben we ook toegang tot het departement. fiscaal. Jaar gewoon zo zonder

03:43.900 --> 03:46.190
het te instantiëren en als we

03:46.190 --> 03:47.150
dat opslaan,

03:47.150 --> 03:51.130
zien we hier natuurlijk 2020 gelogd worden.

03:51.130 --> 03:53.347
Dit zijn dus statische methoden en eigenschappen.

03:53.347 --> 03:55.250
Eén belangrijk woord over hen, of één ding

03:55.250 --> 03:56.947
dat je in gedachten moet houden.

03:56.947 --> 03:59.067
Als je ze toevoegt aan een klasse,

03:59.067 --> 04:03.370
kun je ze niet benaderen vanuit je niet-statische delen.

04:03.370 --> 04:04.870
Dus als je de fiscalYear

04:04.870 --> 04:08.150
wilt gebruiken in de constructor, en je wilt de

04:08.150 --> 04:10.375
console. log het hier in,

04:10.375 --> 04:13.490
dit, zoals je kunt zien zal niet werken.

04:13.490 --> 04:15.600
Ik krijg een foutmelding dat de

04:15.600 --> 04:18.690
eigenschap fiscalYear een statisch lid is.

04:18.690 --> 04:20.976
We hebben hier geen toegang toe omdat de constructor

04:20.976 --> 04:24.290
en eigenlijk alles daarin, alle methoden ook, die niet gemarkeerd

04:24.290 --> 04:26.530
zijn met statisch, en je kunt de constructor

04:26.530 --> 04:29.427
niet markeren als statisch, trouwens, geen toegang

04:29.427 --> 04:32.430
zullen hebben tot statische eigenschappen, omdat dit

04:32.430 --> 04:34.770
verwijst naar de instantie die gemaakt is

04:34.770 --> 04:37.660
op basis van de klasse terwijl de statische eigenschap

04:37.660 --> 04:41.450
niet beschikbaar is op de instantie, omdat het hele idee achter statische

04:41.450 --> 04:44.150
eigenschappen en statische methoden is dat ze los

04:44.150 --> 04:47.780
staan van instanties.

04:47.780 --> 04:50.930
Dus natuurlijk kun je ze niet benaderen met het trefwoord this.

04:50.930 --> 04:53.940
Als u de statische eigenschap of methode vanuit de

04:53.940 --> 04:56.080
klasse wilt gebruiken, moet u hier de

04:56.080 --> 04:59.380
klassenaam gebruiken om er toegang toe te krijgen.

04:59.380 --> 05:01.337
Dit geeft u toegang tot statische

05:01.337 --> 05:04.290
eigenschappen en methoden vanuit de klasse.

05:04.290 --> 05:06.593
Dat is een belangrijk ding om in gedachten te houden.
