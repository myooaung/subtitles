WEBVTT

00:02.450 --> 00:04.900
Istruttore: Ora, cosa si fa se si ha una libreria

00:04.900 --> 00:07.090
in cui non si possono installare i tipi,

00:07.090 --> 00:10.470
come abbiamo fatto per Lodash, ad esempio?

00:10.470 --> 00:14.440
Per Lodash, fortunatamente abbiamo un pacchetto di tipi e, come ho

00:14.440 --> 00:15.880
già detto, per la maggior

00:15.880 --> 00:18.870
parte delle librerie di terze parti è disponibile,

00:18.870 --> 00:21.210
ma non necessariamente per tutte.

00:21.210 --> 00:25.320
Oppure, se si dispone di altro codice JavaScript, ad esempio

00:25.320 --> 00:27.320
nell'indice. Nel file html è presente

00:27.320 --> 00:29.800
un altro codice di script, che viene eseguito

00:29.800 --> 00:34.800
in modo fisso, in cui viene impostata una variabile globale.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Qualcosa del genere, in

00:38.450 --> 00:40.770
cui alla fine si sa che questo sarà

00:40.770 --> 00:43.180
disponibile a livello globale.

00:43.180 --> 00:46.240
Come si sa, le variabili aggiunte in questo modo saranno

00:46.240 --> 00:48.600
aggiunte all'oggetto finestra globale

00:48.600 --> 00:50.210
e si desidera utilizzarle dall'interno

00:50.210 --> 00:52.670
del codice TypeScript.

00:52.670 --> 00:53.503
Ad esempio,

00:53.503 --> 00:57.770
se voglio fare una console. log(GLOBAL) in questo modo, ottengo

00:57.770 --> 00:59.990
un errore nel mio IDE.

00:59.990 --> 01:04.299
E se eseguo tsc -w per avviare la compilazione, ottengo

01:04.299 --> 01:06.340
un errore anche qui.

01:06.340 --> 01:09.470
Quindi, non gli piace questa cosa globale, anche

01:09.470 --> 01:11.530
se sappiamo che funzionerà perché

01:11.530 --> 01:15.630
il nostro indice. Il file html definisce questa variabile globale.

01:15.630 --> 01:18.010
E, dato che abbiamo il rinvio su questo

01:18.010 --> 01:19.493
script, questo script sarà

01:19.493 --> 01:22.170
eseguito dopo questo script laggiù.

01:22.170 --> 01:23.780
In questi casi, in TypeScript

01:23.780 --> 01:26.460
è disponibile un'altra sintassi, il comando

01:26.460 --> 01:29.460
declare, che si può usare.

01:29.460 --> 01:32.110
È possibile dichiarare alcune variabili,

01:32.110 --> 01:34.150
ad esempio, in TypeScript.

01:34.150 --> 01:36.730
Si può dichiarare var GLOBAL e dire a TypeScript

01:36.730 --> 01:38.640
che, ad esempio, questa sarà

01:38.640 --> 01:42.050
una stringa o che è qualsiasi cosa.

01:42.050 --> 01:43.687
In pratica, questo dice a

01:43.687 --> 01:45.910
TypeScript: "Non preoccuparti, esisterà",

01:45.910 --> 01:47.823
e anche se lo salviamo, e se esco

01:49.090 --> 01:52.580
da questo compilatore e uso invece webpack, vedremo questo

01:52.580 --> 01:55.740
output nella nostra pagina, perché tecnicamente

01:55.740 --> 01:59.060
funziona, e con declare var, diciamo anche a TypeScript

01:59.060 --> 02:02.270
che questo esiste.

02:02.270 --> 02:04.420
Ora rimuoverò questo dmidecode, ma è importante

02:04.420 --> 02:06.770
essere consapevoli di dichiarare, di questa parola

02:06.770 --> 02:08.830
chiave, di questo comando.

02:08.830 --> 02:12.160
Permette di dichiarare funzioni o variabili di TypeScript

02:12.160 --> 02:14.590
di cui si conosce l'esistenza o di far conoscere

02:14.590 --> 02:17.210
a TypeScript i pacchetti e le variabili globali

02:17.210 --> 02:18.670
in generale, che Typescript

02:18.670 --> 02:20.150
non può conoscere, ma di cui

02:20.150 --> 02:23.373
lo sviluppatore sa che saranno presenti.
