WEBVTT

00:02.150 --> 00:04.320
解说员：在使用Typescript构建React

00:04.320 --> 00:07.220
App时, 我们当然需要一个项目设置,

00:07.220 --> 00:25.320
它既能够处理我们的React代码, 例如像JSX这样的代码, 又能够编译并优化我们的React代码, 同时还能够理解TypeScript并将TypeScript编译为JavaScript｡

00:25.320 --> 00:27.430
我们自己建立这样一个项目可能非常困难,

00:27.430 --> 00:28.750
因此, 由React团队管理的Create

00:28.750 --> 00:39.110
React App（我们可以使用它来创建React项目）支持现成的TypeScript是件好事｡

00:39.110 --> 00:42.110
您可以简单地在Google上搜索Create React App

00:42.110 --> 00:44.590
TypeScript, 您应该可以在正式的Create

00:44.590 --> 00:47.000
React App文档中找到此条目｡

00:47.000 --> 00:51.540
在这里, 您将了解如何将TypeScript添加到现有项目（这里是这些步骤）,

00:51.540 --> 00:57.290
或者如何使用Create React App和TypeScript创建新项目（这里是一个命令,

00:57.290 --> 01:00.400
您可以复制该命令来创建新的React项目,

01:00.400 --> 01:05.680
该项目也支持TypeScript）｡

01:05.680 --> 01:07.020
现在, 我将在这里使用它,

01:07.020 --> 01:11.110
这里我已经在一个文件夹中, 我想使用它｡

01:11.110 --> 01:14.790
这只是我想用于此项目的项目文件夹｡

01:14.790 --> 01:16.900
然后我们将粘贴此命令｡ 

01:16.900 --> 01:17.740
在这个例子中,

01:17.740 --> 01:20.970
因为我想使用我已经在的文件夹, 也在我的终端中,

01:20.970 --> 01:22.710
我将用一个点替换项目名称,

01:22.710 --> 01:27.590
这样它就不会创建一个新的子文件夹, 并在其中创建项目,

01:27.590 --> 01:31.730
而是使用这个文件夹｡

01:31.730 --> 01:33.720
这当然是可选的｡ 

01:33.720 --> 01:38.070
我还想说, 我注意到这个命令并不总是有效｡

01:38.070 --> 01:41.390
有时它会创建一个常规的JavaScript项目｡ 

01:41.390 --> 01:42.590
要解决此问题, 您可以在计算机上全局安装Create

01:42.590 --> 01:46.343
React App｡

01:47.340 --> 01:49.140
你可以通过运行npm install

01:49.140 --> 01:56.560
-g create-react-app来完成这件事, 在Mac和Linux上, 你可能需要在它前面添加一个sudo｡

01:56.560 --> 01:59.360
在你的机器上安装了这个, 你可以在这里运行这个命令,

01:59.360 --> 02:05.920
但是不需要npx, 就像这样, 然后它肯定会工作｡

02:05.920 --> 02:07.270
这就是我在这里要做的, 但通常情况下,

02:07.270 --> 02:09.320
它也应该可以工作, 而不需要安装它, 只需使用npx工具,

02:09.320 --> 02:18.840
这是我们已经与Node一起安装的npm工具的一部分｡

02:18.840 --> 02:18.840
js在课程的前面｡ 

02:18.840 --> 02:23.250
现在, 它将一个新项目搭建到这个文件夹中｡ 

02:23.250 --> 02:31.070
在该项目中, 它将建立一个React应用程序, 我们可以在其中使用TypeScript编写所有代码｡

02:31.070 --> 02:32.460
所以我们等这一切结束吧｡ 

02:32.460 --> 02:34.610
让我们看看这能给我们带来什么｡ 

02:34.610 --> 02:36.010
而它完成了｡ 

02:36.010 --> 02:37.930
让我们看看我们得到了什么｡ 

02:37.930 --> 02:45.500
我们得到了一个文件夹, 您可能会认识到, 它的结构基本上与您在不使用TypeScript创建React应用程序时的结构相同｡

02:45.500 --> 02:48.790
但是我们已经可以看到tsconfig了｡  json文件｡ 

02:48.790 --> 02:51.020
顺便说一下, 您还可以编辑此文件,

02:51.020 --> 02:52.940
并根据需要对其进行微调｡

02:52.940 --> 02:57.120
毕竟, 您在本课程前面已经学习了如何调整此配置｡

02:57.120 --> 03:01.160
不过, 默认配置对于大多数用例应该是合适的｡

03:01.160 --> 03:02.950
现在, 如果我们探索src文件夹,

03:02.950 --> 03:08.550
也就是我们编写源代码的地方, 我们还会发现一堆｡

03:08.550 --> 03:08.550
tsx文件在那里｡ 

03:08.550 --> 03:13.787
到目前为止, 我们还没有使用｡  tsx文件, 但只能与.

03:13.787 --> 03:13.787
ts文件｡  在这里选择tsx,

03:13.787 --> 03:22.000
是因为在这些文件中, 您不能只编写TypeScript代码, 而是编写所有JSX代码, 这是一种特殊的React JavaScript语法,

03:22.000 --> 03:29.930
您可以在JavaScript中编写HTML标记, 在本例中是TypeScript代码｡

03:29.930 --> 03:32.880
这就是我们在这里得到的｡ 

03:32.880 --> 03:36.500
现在在这些文件中, 我们已经可以看到一些TypeScript语法了,

03:36.500 --> 03:41.480
例如, 在这里, 我们得到了一个类型赋值, 我稍后会仔细看看这个类型, 但是现在, 我们只是可以立即看到,

03:41.480 --> 03:45.780
我们在这里显然使用了TypeScript｡

03:45.780 --> 03:52.730
接下来, 让我稍微清理一下这个起始文件夹结构, 然后让我们一起构建一个非常简单的React应用程序,

03:52.730 --> 03:57.550
在我们这样做的同时, 让我们探索一下如何将TypeScript与React配合使用｡

03:57.550 --> 04:02.950
我们首先关注应用程序中的清理｡

04:02.950 --> 04:02.950
tsx,

04:02.950 --> 04:06.860
我将删除徽标导入, 并删除我的div中的所有内容,

04:06.860 --> 04:09.380
因此只保留该div｡

04:09.380 --> 04:15.530
我还将删除应用程序｡  css导入, 去掉应用程序｡

04:15.530 --> 04:15.530
css文件和应用程序｡  测试｡  tsx文件以及徽标｡

04:15.530 --> 04:23.470
svg和服务工作器｡  ts文件, 请删除所有这些文件｡

04:23.470 --> 04:25.500
在索引中｡  tsx, 我将删除这个serviceWorker导入,

04:25.500 --> 04:29.060
因为我们在这里不使用serviceWorkers,

04:29.060 --> 04:34.530
删除下面代码, 并以这个设置和索引结束｡

04:34.530 --> 04:34.530
css我会清除所有这些,

04:34.530 --> 04:43.140
然后设置一些HTML样式, 我想在其中设置一个无衬线字体系列, 然后设置一个正文样式,

04:43.140 --> 04:48.820
我想在其中去掉边距, 就像这样, 非常简单的样式｡

04:48.820 --> 04:50.763
这样, 我们就有了一个开始的设置,

04:52.790 --> 04:54.540
我想用它来工作｡

04:54.540 --> 04:55.840
现在, 我再次提到了它,

04:55.840 --> 04:57.370
但是如果这一切都没有告诉你任何东西,

04:57.370 --> 05:02.200
如果这是你以前从未见过的语法, 那么一定要先深入了解一些React资源｡

05:02.200 --> 05:08.130
这不是我们在本模块中的重点, 您不会在本模块中学习React｡

05:08.130 --> 05:11.010
但是, 让我们保存所有的更改, 现在继续,

05:11.010 --> 05:12.920
让我们开始写一些React和Typhon代码,

05:12.920 --> 05:17.980
并学习这两个东西如何一起工作｡
