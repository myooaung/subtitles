WEBVTT

00:02.540 --> 00:05.610
Instruktur: Selanjutnya saya ingin mengeksplorasi fungsi

00:05.610 --> 00:08.050
overloads, sebuah fitur yang memungkinkan kita

00:08.050 --> 00:11.450
untuk mendefinisikan beberapa fungsi signature, jadi untuk mengatakan,

00:11.450 --> 00:13.840
untuk satu fungsi yang sama.

00:13.840 --> 00:17.080
Yang secara sederhana berarti kita dapat memiliki beberapa

00:17.080 --> 00:20.340
kemungkinan cara memanggil fungsi dengan parameter yang berbeda,

00:20.340 --> 00:24.300
misalnya, untuk kemudian melakukan sesuatu di dalam fungsi itu.

00:24.300 --> 00:26.540
Dan contoh yang baik di mana fungsi overload dapat

00:26.540 --> 00:29.060
membantu kita dapat dilihat sedikit lebih jauh di atas.

00:29.060 --> 00:32.090
Fungsi add yang kita tulis sebelumnya, apa yang dilakukannya

00:32.090 --> 00:35.940
adalah mengambil dua nilai yang dapat digabungkan, yang berarti string

00:35.940 --> 00:37.960
atau angka, dan kemudian seperti yang

00:37.960 --> 00:39.830
Anda lihat tipe pengembalian TypeScript

00:39.830 --> 00:43.450
menyimpulkan di sini semuanya dapat digabungkan.

00:43.450 --> 00:45.370
Ini berarti TypeScript memahami bahwa

00:45.370 --> 00:47.960
apa yang dikembalikannya juga berupa string atau

00:47.960 --> 00:51.080
angka, tetapi sebenarnya jika Anda memikirkannya, itu tidak

00:51.080 --> 00:52.880
sepenuhnya benar.

00:52.880 --> 00:55.280
Maksud saya, secara teknis itu benar, tetapi kita

00:55.280 --> 00:57.620
tahu bahwa jika kita mengoper dua angka, tipe kembaliannya

00:57.620 --> 00:59.400
akan selalu berupa angka.

00:59.400 --> 01:01.940
Jika kita mengoper setidaknya satu string,

01:01.940 --> 01:03.950
tipe kembaliannya adalah string.

01:03.950 --> 01:05.460
Sekarang, mengapa hal ini penting?

01:05.460 --> 01:08.225
Ingatlah bahwa fungsi add ditulis seperti ini.

01:08.225 --> 01:11.060
Dan sebenarnya Anda dapat mengomentari semua yang

01:11.060 --> 01:15.390
ada di bawah dan menambahkan beberapa kode baru di sana tepat di bawah fungsi.

01:15.390 --> 01:18.670
Jika saya sekarang mendapatkan hasil saya di sini dengan memanggil

01:18.670 --> 01:21.870
add, saya mengoper satu dan lima, Anda lihat hasilnya adalah tipe

01:21.870 --> 01:23.390
yang dapat digabungkan.

01:23.390 --> 01:27.010
Konsekuensi dari hal ini adalah TypeScript tidak mengetahui

01:27.010 --> 01:30.390
apakah hasil adalah angka atau string.

01:30.390 --> 01:34.510
Sekarang ini mungkin sangat penting jika kita mengoper dalam string.

01:34.510 --> 01:39.510
Jika saya mengoper Max Schwarz di sini, maka ini berfungsi tetapi saya masih mendapatkan

01:39.700 --> 01:41.750
kembali combinable.

01:41.750 --> 01:43.990
Sekarang sebagai konsekuensinya saya tidak

01:43.990 --> 01:46.120
bisa memanggil fungsi string pada hasil,

01:46.120 --> 01:50.600
saya tidak bisa memanggil split misalnya untuk membagi pada ruang putih.

01:50.600 --> 01:52.870
Saya tahu bahwa ini akan bekerja, karena saya tahu

01:52.870 --> 01:55.270
bahwa ketika saya memanggil fungsi seperti ini,

01:55.270 --> 01:57.200
saya akan membuatnya menjadi cabang if

01:57.200 --> 01:59.980
ini dan saya akan mendapatkan kembali string, jadi saya tahu

01:59.980 --> 02:03.030
bahwa hasil akan menyimpan string, tetapi TypeScript hanya tahu

02:03.030 --> 02:05.620
bahwa itu memegang string atau angka.

02:05.620 --> 02:08.350
Sekarang tentu saja, kita dapat menggunakan type casting di sini dan memberitahu

02:08.350 --> 02:11.340
TypeScript bahwa yang kita dapatkan kembali adalah sebuah string.

02:11.340 --> 02:13.930
Kita bisa melakukan itu dengan sintaksis type casting

02:13.930 --> 02:16.040
yang sudah Anda pelajari sebelumnya.

02:16.040 --> 02:18.840
Tetap saja, ini tidak optimal bahwa kita harus melakukan itu, saya berpendapat,

02:18.840 --> 02:21.800
karena kita harus menulis lebih banyak kode di sini meskipun kita mengharapkan

02:21.800 --> 02:24.560
TypeScript untuk memahami bahwa ketika kita memanggil fungsi ini seperti

02:24.560 --> 02:26.070
ini, kita selalu mendapatkan kembali

02:26.070 --> 02:27.740
sebuah string.

02:27.740 --> 02:30.890
Tetapi TypeScript tidak benar-benar menganalisis kode kita

02:30.890 --> 02:33.700
dengan cukup baik di sini, dan di situlah fungsi overload

02:33.700 --> 02:35.000
dapat membantu kita.

02:35.000 --> 02:38.730
Overload fungsi ditulis hanya dengan menulis fungsi tepat di atas

02:38.730 --> 02:41.880
fungsi utama Anda, jadi untuk mengatakan, dengan nama

02:41.880 --> 02:46.683
yang sama, jadi Anda mengulangi baris ini di sini pada dasarnya, namun tanpa tanda kurung

02:47.880 --> 02:50.890
kurawal, tidak ada kurung kurawal pembuka dan penutup

02:50.890 --> 02:54.080
setelahnya, dan sekarang di sini Anda ingin menggunakan

02:54.080 --> 02:57.980
tipe spesifik angka dan angka dan kemudian temukan tipe pengembalian

02:57.980 --> 03:01.980
untuk saat ini adalah kasus ketika Anda mendapatkan setidaknya satu

03:01.980 --> 03:03.410
angka.

03:03.410 --> 03:06.643
Dan di sana kita bisa mengatakan, maka tipe pengembaliannya adalah angka.

03:08.840 --> 03:10.980
Jadi sekarang dengan itu kita mengatakan kepada

03:10.980 --> 03:14.980
TypeScript, jika kita memanggil fungsi ini dan kedua argumen adalah angka, maka

03:14.980 --> 03:17.180
fungsi ini mengembalikan angka.

03:17.180 --> 03:19.430
Sekarang ini tentu saja bukan sintaks yang

03:19.430 --> 03:22.480
akan bekerja di JavaScript, itu akan dihilangkan oleh TypeScript

03:22.480 --> 03:24.430
dalam proses kompilasi.

03:24.430 --> 03:28.480
Tetapi TypeScript menggabungkan informasi fungsi ini dan deklarasi

03:28.480 --> 03:31.380
fungsi ini di sini bersama-sama dan pada dasarnya

03:31.380 --> 03:33.640
menggabungkan pengetahuan dari dua

03:33.640 --> 03:35.550
baris ini di sini.

03:35.550 --> 03:38.590
Dan sekarang ia tahu oke, kita bisa memanggil fungsi

03:38.590 --> 03:41.490
ini di sini baik dengan A dan B bertipe combinable

03:41.490 --> 03:43.790
atau dengan A dan B bertipe number.

03:43.790 --> 03:47.060
Ngomong-ngomong, Anda juga dapat menambahkan lebih banyak atau lebih sedikit parameter

03:47.060 --> 03:50.100
di sini dalam overload Anda, Anda benar-benar fleksibel di sana.

03:50.100 --> 03:53.640
Anda juga menambahkan fungsi add di sini dan hanya mengharapkan

03:53.640 --> 03:57.620
satu angka dan mengembalikan angka, dan ini juga akan berfungsi

03:57.620 --> 04:01.210
jika kita membuat B opsional di overloads kita yang lain

04:01.210 --> 04:03.270
juga.

04:03.270 --> 04:05.254
Karena pada akhirnya tentu saja Anda perlu

04:05.254 --> 04:08.630
memastikan bahwa kode Anda di sini selalu berfungsi dan Anda menerima semua

04:08.630 --> 04:10.850
argumen yang Anda butuhkan pada akhirnya.

04:10.850 --> 04:13.610
Jadi B akan menjadi opsional di sini maka Anda melihat

04:13.610 --> 04:15.170
ini berfungsi, sekarang tentu

04:15.170 --> 04:17.850
saja kita hanya harus bekerja di sekitar B yang berpotensi

04:17.850 --> 04:19.550
opsional di sana.

04:19.550 --> 04:21.390
Namun, saya tidak membutuhkannya, jadi saya

04:21.390 --> 04:24.460
akan menyingkirkannya dan hanya meninggalkan ini, tetapi saya juga tidak

04:24.460 --> 04:27.200
ingin kelebihan beban ketika kita memanggil ini dengan string.

04:27.200 --> 04:30.060
Jadi saya akan menambahkan fungsi add overload lain

04:30.060 --> 04:33.450
di sini di mana A adalah string dan B adalah string dan kemudian

04:33.450 --> 04:36.090
saya cukup jelas mengenai fakta bahwa apa yang kita

04:36.090 --> 04:38.460
kembalikan akan menjadi string.

04:38.460 --> 04:40.280
Ngomong-ngomong, merupakan praktik yang baik

04:40.280 --> 04:43.660
untuk menambahkan titik koma setelah baris-baris kelebihan beban di sini.

04:43.660 --> 04:46.560
Jadi sekarang dengan itu saya katakan jika kita memanggil fungsi ini dengan

04:46.560 --> 04:49.100
dua angka, kita selalu mendapatkan kembali sebuah angka.

04:49.100 --> 04:52.170
Jika kita memanggilnya dengan dua string, kita selalu mendapatkan kembali sebuah string.

04:52.170 --> 04:54.510
Jika kita memanggilnya dengan satu string dan satu angka,

04:54.510 --> 04:57.020
secara teknis kita juga selalu mendapatkan kembali sebuah string,

04:57.020 --> 04:57.853
tetapi saya tidak ingin

04:57.853 --> 04:59.410
menambahkan semua kemungkinan kombinasi

04:59.410 --> 05:01.240
di sini, tentu saja saya bisa menambahkan lebih

05:01.240 --> 05:03.173
banyak dan kemudian juga menambahkan angka di sini,

05:04.040 --> 05:07.500
atau kombinasi lain yang mungkin kita miliki, yaitu yang ini.

05:07.500 --> 05:10.060
Nah, saya kira sekarang saya menambahkan semua kombinasi.

05:10.060 --> 05:12.540
Dan sekarang saya membuat daftar semua kombinasi potensial

05:12.540 --> 05:16.040
nilai di sini dan apa yang kita kembalikan dalam setiap kasus.

05:16.040 --> 05:18.260
Sekarang dengan itu, Anda melihat kesalahan di bawah

05:18.260 --> 05:20.520
sana hilang karena sekarang TypeScript tahu bahwa

05:20.520 --> 05:24.790
hasilnya akan bertipe string jika kita memanggil add dengan dua nilai ini yang keduanya adalah

05:24.790 --> 05:25.623
string.

05:25.623 --> 05:28.510
Dan jika saya arahkan kursor ke add, Anda melihat

05:28.510 --> 05:31.100
ada tiga overload tambahan yang tersedia.

05:31.100 --> 05:32.980
Di sini saya memanggil add dengan dua

05:32.980 --> 05:35.560
string, tetapi TypeScript tahu ada tiga cara lain untuk

05:35.560 --> 05:36.630
memanggil ini.

05:36.630 --> 05:39.450
Misalnya, dengan string dan angka, dalam hal

05:39.450 --> 05:41.340
ini saya mendapatkan kembali

05:41.340 --> 05:46.340
sebuah string, dengan angka dan beberapa string, atau dengan dua angka.

05:47.430 --> 05:48.630
Ini juga bisa digunakan.

05:48.630 --> 05:50.210
Kemudian tentu saja saya tidak bisa memanggil

05:50.210 --> 05:52.650
split karena TypeScript dengan benar mengidentifikasi bahwa

05:52.650 --> 05:54.630
ketika saya memanggil ini dengan dua angka, saya mendapatkan

05:54.630 --> 05:58.253
kembali sebuah angka, dan pada sebuah angka Anda tidak bisa memanggil split.

05:59.260 --> 06:02.010
Jadi ini adalah fungsi overload dan mereka dapat membantu

06:02.010 --> 06:04.060
Anda dalam situasi seperti ini di sini, di

06:04.060 --> 06:06.780
mana TypeScript tidak akan dapat menyimpulkan dengan

06:06.780 --> 06:08.590
benar jenis pengembaliannya sendiri,

06:08.590 --> 06:11.660
di sini Anda dapat benar-benar jelas tentang apa yang dikembalikan

06:11.660 --> 06:14.667
untuk kombinasi berbeda yang mungkin Anda dukung dalam fungsi

06:14.667 --> 06:16.033
Anda.
