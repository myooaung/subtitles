WEBVTT

00:02.510 --> 00:04.490
Instructeur: Met onze basis klas als we nu naar de dist

00:04.490 --> 00:07.570
map gaan en we inspecteren de app. js bestand, zien we wat

00:07.570 --> 00:10.110
er in JavaScript wordt gegenereerd, en

00:10.110 --> 00:13.560
daar zie je dat we in wezen dezelfde code hebben.

00:13.560 --> 00:17.870
Twee belangrijke verschillen zijn, dat het naamveld

00:17.870 --> 00:20.870
dat we hier hebben niet zo bestaat in

00:20.870 --> 00:22.230
de klasse.

00:22.230 --> 00:25.460
Dit zou eigenlijk worden ondersteund in modern JavaScript,

00:25.460 --> 00:27.910
maar het hangt af van de versie van JavaScript

00:27.910 --> 00:29.130
waarvoor je bouwt.

00:29.130 --> 00:33.450
Dus alleen in ES6 wordt het eigenlijk niet ondersteund.

00:33.450 --> 00:35.430
En wat natuurlijk geweldig is om

00:35.430 --> 00:37.360
te zien is de type opdracht.

00:37.360 --> 00:39.760
We hebben echter wel onze constructielogica,

00:39.760 --> 00:43.870
en dit is inderdaad hoe je eigenschappen toevoegt aan de aan

00:43.870 --> 00:48.150
te maken objecten in Vanilla JavaScript als je niet de laatste versie

00:48.150 --> 00:51.570
van JavaScript gebruikt waar deze veldsyntaxis ook

00:51.570 --> 00:54.470
wordt ondersteund.

00:54.470 --> 00:56.480
Dus dit is wat ik heb in JavaScript.

00:56.480 --> 00:58.710
Nu wordt het echter interessant

00:58.710 --> 01:02.080
als we naar de tsconfig. json bestand en we veranderen

01:02.080 --> 01:05.970
het doel van ES5 naar ES6 en commentariëren lib hier.

01:05.970 --> 01:08.190
Zodat de juiste en aanbevolen bibliotheken

01:08.190 --> 01:10.870
automatisch door TypeScript worden toegevoegd.

01:10.870 --> 01:14.090
Als je nu dit config bestand opslaat, en je gaat terug naar app. ziet u iets totaal

01:14.090 --> 01:16.350
anders.

01:16.350 --> 01:18.810
En dat is best interessant wat we hier zien.

01:18.810 --> 01:20.960
Wat hebben we hier?

01:20.960 --> 01:23.290
Wat we hier uiteindelijk hebben

01:23.290 --> 01:26.453
is een zogenaamde constructeursfunctie.

01:27.299 --> 01:31.600
Constructorfunctie is iets dat is ingebouwd in

01:31.600 --> 01:33.770
JavaScript dat er eigenlijk

01:33.770 --> 01:35.520
altijd al is geweest,

01:35.520 --> 01:40.230
en dit is Vanilla niet-moderne JavaScript's manier

01:40.230 --> 01:44.480
om objectblauwdrukken te maken.

01:44.480 --> 01:47.100
Het is een functie die wordt aangeroepen met behulp

01:47.100 --> 01:50.890
van het nieuwe sleutelwoord en dan ineens, op magische wijze, geeft deze

01:50.890 --> 01:53.640
functie, ook al heeft hij geen return statement in

01:53.640 --> 01:55.850
zich, toch iets terug, zoals je ziet als we

01:55.850 --> 01:57.540
hem hier aanroepen.

01:57.540 --> 01:59.730
Het geeft een object terug.

01:59.730 --> 02:03.110
Een nieuw object dat een naam-eigenschap zal hebben.

02:03.110 --> 02:04.940
Dit concept is dus niet nieuw, het

02:04.940 --> 02:08.680
is niet geïntroduceerd door modern JavaScript of door TypeScript.

02:08.680 --> 02:12.500
Het idee van blauwdrukken voor objecten bestaat

02:12.500 --> 02:15.180
al heel lang in JavaScript.

02:15.180 --> 02:19.070
In het verleden moesten we echter constructorfuncties gebruiken en

02:19.070 --> 02:21.870
aangezien dit een beetje onintuïtief kon zijn, vooral

02:21.870 --> 02:24.520
voor ontwikkelaars die met verschillende programmeertalen

02:24.520 --> 02:26.600
hebben gewerkt.

02:26.600 --> 02:30.510
Modern JavaScript introduceerde het idee van klassen

02:30.510 --> 02:34.950
van deze schonere syntax, en TypeScript ondersteunt dit ook.

02:34.950 --> 02:38.180
En door de krachtige compilatie van TypeScript

02:38.180 --> 02:40.830
kunt u kiezen waar u het in wilt compileren,

02:40.830 --> 02:44.130
de oudere stijl die natuurlijk in meer browsers

02:44.130 --> 02:48.280
werkt of de modernere ES6-stijl die we eerder zagen.

02:48.280 --> 02:51.700
Wat hier erg op lijkt.

02:51.700 --> 02:54.500
Het belangrijkste is dat we deze functie hebben ingebouwd

02:54.500 --> 02:57.300
in JavaScript en ondersteund door TypeScript, waarmee

02:57.300 --> 03:00.163
we objectblauwdrukken kunnen definiëren.
