WEBVTT

00:02.060 --> 00:04.960
Instruktor: Czyli to już jest dla typów generycznych.

00:04.960 --> 00:07.370
Mogą być naprawdę podstępne w zrozumieniu,

00:07.370 --> 00:10.670
ale w końcu podsumowanie, które podałem na ostatnim wykładzie,

00:10.670 --> 00:14.400
jest idealnym wyjaśnieniem. Dają nam one elastyczność połączoną

00:14.400 --> 00:16.710
z bezpieczeństwem typu.

00:16.710 --> 00:19.700
Jesteśmy elastyczni, jeśli chodzi o wartości,

00:19.700 --> 00:21.660
które przekazujemy lub wartości,

00:21.660 --> 00:24.960
których używamy w klasie, przynajmniej tak długo,

00:24.960 --> 00:26.800
jak przestrzegamy możliwych

00:26.800 --> 00:30.190
ograniczeń, które mogłeś dodać, ale mamy pełne wsparcie

00:30.190 --> 00:34.500
typu, co następnie robimy z klasą lub z wynikiem funkcji generycznej,

00:34.500 --> 00:38.720
ponieważ TypeScript wie, jaki konkretny typ przekazujemy, gdy

00:38.720 --> 00:41.640
wywołujemy funkcję tutaj lub gdy instancjonujemy

00:41.640 --> 00:44.360
klasę tutaj.

00:44.360 --> 00:46.680
Tutaj ustawiamy konkretny typ, ale

00:46.680 --> 00:49.970
nie blokujemy tej klasy lub funkcji do tego konkretnego

00:49.970 --> 00:52.600
typu, kiedy ją tworzymy.

00:52.600 --> 00:55.540
Zamiast tego jesteśmy elastyczni i możemy po prostu zapewnić

00:55.540 --> 00:58.090
pewne ograniczenia, i oczywiście te ograniczenia,

00:58.090 --> 01:02.350
alls są opcjonalne, i możesz mieć niektóre klasy generyczne lub funkcje generyczne,

01:02.350 --> 01:04.800
które nie mają żadnych ograniczeń i niektóre,

01:04.800 --> 01:07.510
które mają wiele ograniczeń.

01:07.510 --> 01:09.960
Tak więc typy generyczne są naprawdę przydatną funkcją.

01:09.960 --> 01:12.700
Z obietnicą i tablicą, pokazałem ci dwa z wielu wbudowanych

01:12.700 --> 01:15.600
typów generycznych, i, oczywiście, zobaczymy również

01:15.600 --> 01:16.990
więcej, w tym niestandardowe

01:16.990 --> 01:20.053
typy generyczne w całym tym kursie.
