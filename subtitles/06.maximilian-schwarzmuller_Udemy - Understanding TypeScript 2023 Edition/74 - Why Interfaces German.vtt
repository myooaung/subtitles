WEBVTT

00:02.250 --> 00:04.870
-: Jetzt, wo wir über diese leistungsstarken Funktionen Bescheid

00:04.870 --> 00:07.960
wissen, stellt sich natürlich die Frage: Warum sollten wir sie nutzen?

00:07.960 --> 00:09.610
Warum ist das hilfreich?

00:09.610 --> 00:12.200
Nun, das ist in Situationen wie dieser nützlich, wo

00:12.200 --> 00:13.780
wir wissen, dass wir eine bestimmte

00:13.780 --> 00:15.820
Reihe von Funktionen haben wollen.

00:15.820 --> 00:18.750
Sagen wir eine Begrüßungsmethode, und wir wollen sicherstellen,

00:18.750 --> 00:21.910
dass eine Klausel eine solche Methode hat, und eine andere Klausel

00:21.910 --> 00:24.450
hat sie vielleicht auch, dann können wir eine Schnittstelle

00:24.450 --> 00:26.360
implementieren, die die Existenz dieser

00:26.360 --> 00:29.570
Methode erzwingt.

00:29.570 --> 00:32.690
Dann können wir auf einfache Weise Funktionalität zwischen Klauseln

00:32.690 --> 00:35.850
teilen, und jede Klausel muss ihre eigene Implementierung hinzufügen,

00:35.850 --> 00:38.060
den genauen Code, der ausgeführt werden soll, wenn

00:38.060 --> 00:39.450
die Methode aufgerufen wird, aber

00:39.450 --> 00:41.370
wir erzwingen eine bestimmte Struktur mit

00:41.370 --> 00:43.280
Hilfe von Schnittstellen.

00:43.280 --> 00:46.400
Dies kann nützlich sein, wenn wir keine anderen Teile unseres Codes haben,

00:46.400 --> 00:48.550
die auf diese Struktur angewiesen sind.

00:48.550 --> 00:51.680
Hier legen wir fest, dass user1 vom Typ Greetable ist, und

00:51.680 --> 00:55.240
damit sagen wir, dass es uns egal ist, was in user drin ist, aber was

00:55.240 --> 00:57.840
drin sein muss, ist eine greet-Methode, und wir

00:57.840 --> 00:59.730
wissen, dass sie drin sein muss, weil

00:59.730 --> 01:03.510
alles, was wir in user1 speichern, greetable sein muss.

01:03.510 --> 01:07.350
Das erlaubt uns, wirklich leistungsfähigen und flexiblen Code zu schreiben,

01:07.350 --> 01:09.840
bei dem wir nicht alles über ein Objekt oder alles über

01:09.840 --> 01:11.710
eine Klausel wissen müssen, sondern nur

01:11.710 --> 01:14.710
wissen, dass das, was ich hier in user1 bekomme, eine greet-Methode

01:14.710 --> 01:16.210
haben muss.

01:16.210 --> 01:18.850
Es ist uns egal, ob Person noch etwas anderes hat, hier

01:18.850 --> 01:20.630
sind wir an greet interessiert, deshalb

01:20.630 --> 01:22.400
haben wir uns an Greetable gewandt,

01:22.400 --> 01:25.180
und deshalb können wir in user1 nichts speichern, was

01:25.180 --> 01:27.190
keine greet-Methode hätte, denn Greetable

01:27.190 --> 01:30.770
zwingt alles, was man darauf aufbaut, eine solche greet-Methode zu

01:30.770 --> 01:32.333
haben.
