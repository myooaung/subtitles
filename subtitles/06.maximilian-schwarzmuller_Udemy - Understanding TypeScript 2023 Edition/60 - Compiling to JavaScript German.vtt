WEBVTT

00:02.510 --> 00:04.490
Kursleiter: Mit unserer Basisklasse gehen wir jetzt in

00:04.490 --> 00:07.570
den dist-Ordner und untersuchen die App. js-Datei sehen wir, was in

00:07.570 --> 00:10.110
JavaScript generiert wird, und dort sehen

00:10.110 --> 00:13.560
Sie, dass wir im Wesentlichen den gleichen Code haben.

00:13.560 --> 00:17.870
Zwei wichtige Unterschiede sind, dass das Namensfeld,

00:17.870 --> 00:20.870
das wir hier haben, so nicht in der Klasse

00:20.870 --> 00:22.230
existiert.

00:22.230 --> 00:25.460
Dies würde eigentlich in modernen JavaScript unterstützt

00:25.460 --> 00:27.910
werden, aber es hängt von der Version von JavaScript

00:27.910 --> 00:29.130
Sie bauen für.

00:29.130 --> 00:33.450
In ES6 allein wird es also nicht unterstützt.

00:33.450 --> 00:35.430
Und natürlich ist es toll zu sehen,

00:35.430 --> 00:37.360
wie die Typenbelegung aussieht.

00:37.360 --> 00:39.760
Wir haben jedoch unsere Konstruktionslogik,

00:39.760 --> 00:43.870
und so fügen Sie in der Tat Eigenschaften zu den zu erstellenden Objekten

00:43.870 --> 00:48.150
in Vanilla JavaScript hinzu, wenn Sie nicht die neueste Version von

00:48.150 --> 00:51.570
JavaScript verwenden, in der diese Feldsyntax ebenfalls

00:51.570 --> 00:54.470
unterstützt wird.

00:54.470 --> 00:56.480
Das habe ich also in JavaScript.

00:56.480 --> 00:58.710
Interessant wird es jedoch, wenn wir

00:58.710 --> 01:02.080
in die tsconfig gehen. json-Datei und wir wechseln

01:02.080 --> 01:05.970
das Ziel von ES5 zu ES6 und kommentieren die lib hier aus.

01:05.970 --> 01:08.190
Damit die richtigen und empfohlenen Bibliotheken

01:08.190 --> 01:10.870
von TypeScript automatisch hinzugefügt werden.

01:10.870 --> 01:14.090
Wenn Sie nun diese Konfigurationsdatei speichern und zurück zur Anwendung gehen. js sehen Sie etwas

01:14.090 --> 01:16.350
ganz anderes.

01:16.350 --> 01:18.810
Und das ist ziemlich interessant, was wir hier sehen.

01:18.810 --> 01:20.960
Was haben wir hier?

01:20.960 --> 01:23.290
Nun, was wir hier letztendlich haben,

01:23.290 --> 01:26.453
ist eine so genannte Konstruktorfunktion.

01:27.299 --> 01:31.600
Constructor-Funktion ist etwas, das in JavaScript, die

01:31.600 --> 01:33.770
im Grunde gibt es seit jeher

01:33.770 --> 01:35.520
könnte man sagen, und das

01:35.520 --> 01:40.230
ist Vanilla nicht-modernen JavaScript die Art und Weise der

01:40.230 --> 01:44.480
Schaffung von Objekt Blaupausen gebaut ist.

01:44.480 --> 01:47.100
Es handelt sich um eine Funktion, die mit Hilfe des

01:47.100 --> 01:50.890
Schlüsselworts new aufgerufen wird, und plötzlich gibt diese Funktion,

01:50.890 --> 01:53.640
obwohl sie keine Rückgabeanweisung enthält, auf magische

01:53.640 --> 01:55.850
Weise etwas zurück, wie Sie sehen, wenn wir

01:55.850 --> 01:57.540
sie hier aufrufen.

01:57.540 --> 01:59.730
Sie gibt ein Objekt zurück.

01:59.730 --> 02:03.110
Ein neues Objekt, das eine Eigenschaft name hat.

02:03.110 --> 02:04.940
Dieses Konzept ist also nicht neu, es

02:04.940 --> 02:08.680
wurde weder von modernem JavaScript noch von TypeScript eingeführt.

02:08.680 --> 02:12.500
Die Idee, Blaupausen für Objekte zu haben, gibt es

02:12.500 --> 02:15.180
in JavaScript schon sehr lange.

02:15.180 --> 02:19.070
In der Vergangenheit mussten wir jedoch Konstruktorfunktionen verwenden,

02:19.070 --> 02:21.870
was insbesondere für Entwickler, die mit anderen

02:21.870 --> 02:24.520
Programmiersprachen gearbeitet haben, etwas

02:24.520 --> 02:26.600
unintuitiv sein kann.

02:26.600 --> 02:30.510
Modernes JavaScript hat die Idee von Klassen mit dieser sauberen

02:30.510 --> 02:34.950
Syntax eingeführt, und TypeScript unterstützt dies ebenfalls.

02:34.950 --> 02:38.180
Und aufgrund der leistungsstarken Kompilierung von TypeScript

02:38.180 --> 02:40.830
können Sie wählen, wohin Sie es kompilieren möchten:

02:40.830 --> 02:44.130
in den älteren Stil, der natürlich in mehr Browsern funktioniert,

02:44.130 --> 02:48.280
oder in den moderneren ES6-Stil, den wir zuvor gesehen haben.

02:48.280 --> 02:51.700
Das sieht in etwa so aus wie das hier.

02:51.700 --> 02:54.500
Das Wichtigste ist, dass wir diese in JavaScript integrierte

02:54.500 --> 02:57.300
und von TypeScript unterstützte Funktion haben, mit der

02:57.300 --> 03:00.163
wir Objekt-Blueprints definieren können.
