WEBVTT

00:02.140 --> 00:04.200
- : C'est tout pour les cours.

00:04.200 --> 00:06.180
Nous avons appris à connaître les classes elles-mêmes.

00:06.180 --> 00:08.260
Nous avons appris à connaître leurs

00:08.260 --> 00:09.850
propriétés, les modificateurs

00:09.850 --> 00:12.110
d'axe, private pour l'axe interne,

00:12.110 --> 00:15.990
protected pour l'axe interne également dans les classes héritées,

00:15.990 --> 00:19.560
et public pour l'axe de partout.

00:19.560 --> 00:21.610
Nous avons également appris les méthodes que nous pouvons ajouter.

00:21.610 --> 00:23.520
À propos des méthodes et des propriétés statiques.

00:23.520 --> 00:25.520
A propos des méthodes abstraites et

00:25.520 --> 00:28.280
des classes abstraites, ce qui est important lorsque

00:28.280 --> 00:31.350
nous parlons d'un autre concept important, l'héritage

00:31.350 --> 00:33.490
que nous pouvons utiliser.

00:33.490 --> 00:36.360
Ici, nous héritons de 'Department' avec le

00:36.360 --> 00:37.660
mot clé 'extends'.

00:37.660 --> 00:40.440
Cela nous permet de partager les fonctionnalités,

00:40.440 --> 00:41.830
les propriétés et les méthodes

00:41.830 --> 00:45.100
de la classe "Département" avec cette classe héritée et d'ajouter

00:45.100 --> 00:47.162
nos propres fonctionnalités ou de remplacer

00:47.162 --> 00:50.300
les fonctionnalités existantes.

00:50.300 --> 00:52.560
Soit parce que nous devons surcharger comme

00:52.560 --> 00:55.620
dans le cas de 'describe' qui est une méthode abstraite.

00:55.620 --> 00:58.710
Ou bien parce que nous voulons passer outre, comme dans le cas de

00:58.710 --> 01:01.640
"addEmployee" ici dans le département de la comptabilité.

01:01.640 --> 01:04.290
Ce n'est pas une méthode abstraite dans la classe de base,

01:04.290 --> 01:07.540
mais nous pouvons bien sûr la surcharger si nous le voulons.

01:07.540 --> 01:10.370
Nous avons également appris à connaître le modèle singleton

01:10.370 --> 01:13.150
et les "constructeurs privés", qui peuvent parfois être

01:13.150 --> 01:14.180
utiles.

01:14.180 --> 01:17.290
Et puis pour l'ensemble, vous avez maintenant, je l'espère, une bonne idée

01:17.290 --> 01:20.290
des classes et de ce que vous pouvez faire avec elles dans TypeScript.

01:20.290 --> 01:22.760
En général, bien sûr, vous aurez besoin de savoir

01:22.760 --> 01:26.030
ce que sont les classes et les objets, et aussi un peu ce que sont les

01:26.030 --> 01:29.690
prototypes dans Vanilla JavaScript parce que ce n'est généralement pas

01:29.690 --> 01:31.870
quelque chose d'introduit par TypeScript,

01:31.870 --> 01:34.600
mais bien sûr quelque chose auquel TypeScript est lié parce

01:34.600 --> 01:37.800
que TypeScript se base sur ces fonctionnalités JavaScript par défaut,

01:37.800 --> 01:41.663
et ajoute sa propre magie par-dessus ces fonctionnalités.
