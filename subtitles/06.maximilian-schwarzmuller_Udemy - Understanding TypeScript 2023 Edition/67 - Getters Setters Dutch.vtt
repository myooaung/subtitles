WEBVTT

00:02.200 --> 00:04.920
Dus dat zijn klassen, eigenschappen

00:04.920 --> 00:07.510
en overerving met Typescript.

00:07.510 --> 00:08.343
En zoals ik al zei,

00:08.343 --> 00:10.260
deze functies worden in het algemeen

00:10.260 --> 00:12.490
wel ondersteund in Javascript, in modern

00:12.490 --> 00:14.230
JavaScript, natuurlijk met

00:14.230 --> 00:16.940
uitzondering van type-toewijzingen, en ook

00:16.940 --> 00:21.060
met uitzondering van protected private public.

00:21.060 --> 00:24.770
Deze trefwoorden zijn eigenlijk alleen beschikbaar in Typescript.

00:24.770 --> 00:28.560
Maar het is niet alles wat je met klassen kunt doen.

00:28.560 --> 00:29.940
Wanneer je een functie

00:29.940 --> 00:32.840
nodig hebt, die je ook hebt in vanilla JavaScript,

00:32.840 --> 00:35.670
en die ook wordt ondersteund in Typescript,

00:35.670 --> 00:38.610
zijn getters en setters.

00:38.610 --> 00:42.050
Laten we zeggen dat we hier op de boekhoudafdeling

00:42.050 --> 00:43.390
bijvoorbeeld een

00:43.390 --> 00:47.450
laatste rapport hebben, onroerend goed.

00:47.450 --> 00:51.630
Dat is een privé-eigenschap, en het is een type string,

00:51.630 --> 00:53.310
dus dat hebben we.

00:53.310 --> 00:56.480
En dan initialiseren we dit, zodat

00:56.480 --> 01:01.480
we het argument van de orders van onze rapporten krijgen

01:02.270 --> 01:04.880
en dat is de eerste waarde.

01:04.880 --> 01:07.877
Wat natuurlijk in principe ongedefinieerd is als we een

01:07.877 --> 01:09.890
lege rapport-array doorgeven.

01:09.890 --> 01:14.680
Als we nu een rapport toevoegen, dan wil ik dit laatste rapport,

01:14.680 --> 01:17.010
gelijk zetten aan tekst.

01:17.010 --> 01:20.440
Dat is wat we toevoegen aan onze rapporten array.

01:20.440 --> 01:23.890
Het laatste rapport is privé, dus we kunnen

01:23.890 --> 01:26.250
het openen vanuit deze methode,

01:26.250 --> 01:28.590
maar niet van buitenaf met de

01:28.590 --> 01:30.240
puntnotatie.

01:30.240 --> 01:33.440
Nu kunnen we een getter toevoegen, om het toch toegankelijk te maken.

01:33.440 --> 01:36.020
Een getter is in feite een eigenschap, waarbij

01:36.020 --> 01:38.670
je een functie of methode uitvoert, wanneer

01:38.670 --> 01:40.910
je een waarde ophaalt en waarmee je als

01:40.910 --> 01:42.380
ontwikkelaar complexere

01:42.380 --> 01:44.460
logica kunt toevoegen.

01:44.460 --> 01:47.560
Hier maakt u een getter door het sleutelwoord get te gebruiken,

01:47.560 --> 01:49.250
en dan een naam naar keuze.

01:49.250 --> 01:51.810
Meestal nauw verbonden met het eigendom waarvan

01:51.810 --> 01:54.180
u de toegang probeert te controleren.

01:54.180 --> 01:58.180
Hier zouden we bijvoorbeeld het meest recente rapport kunnen noemen.

01:58.180 --> 01:59.340
Zoiets.

01:59.340 --> 02:01.630
Nu is het belangrijk dat dit wordt gedefinieerd als een methode.

02:01.630 --> 02:04.260
Dus je voegt haakjes toe en dan accolades.

02:04.260 --> 02:07.250
En nu hier, moet je iets teruggeven, dat

02:07.250 --> 02:11.990
is belangrijk een getter methode, moet iets teruggeven.

02:11.990 --> 02:14.610
Dus u kunt dit laatste rapport terugsturen,

02:14.610 --> 02:16.660
en dan kapselen we het in, omdat

02:16.660 --> 02:19.570
het nu publiekelijk toegankelijk is.

02:19.570 --> 02:22.720
Maar vaak wil je hier meer complexe logica.

02:22.720 --> 02:26.240
Dus hier kunnen we controleren of we een waarde hebben, dus

02:26.240 --> 02:27.600
of dit waarheid is.

02:27.600 --> 02:28.960
Als het niet ongedefinieerd

02:28.960 --> 02:31.520
is, dan willen we het laatste rapport teruggeven,

02:31.520 --> 02:34.440
anders willen we misschien wat andere logica teruggeven,

02:34.440 --> 02:37.850
bijvoorbeeld laten we zeggen anders gooien we een foutmelding

02:37.850 --> 02:42.650
met throw new error, no reports found.

02:42.650 --> 02:46.650
Dus nu hebben we meer logica, meer complexe logica, toegevoegd aan deze eigenschap

02:46.650 --> 02:49.200
en wanneer we het willen opvragen, kunnen we deze

02:49.200 --> 02:51.500
eigenschap niet direct opvragen via de puntnotatie,

02:51.500 --> 02:57.240
maar we kunnen dit gebruiken als een eigenschap om deze logica te beëindigen.

02:57.240 --> 02:58.810
Dus hoe zou dit werken?

02:58.810 --> 03:02.170
Daar beneden, waar ik mijn boekhoudafdeling maak.

03:02.170 --> 03:08.693
Voordat ik mijn rapport toevoeg, als ik probeerde Console log, boekhouding.

03:08.693 --> 03:08.693
meest

03:09.630 --> 03:11.010
recente rapport, en nu belangrijk.

03:11.010 --> 03:13.902
Oeps, boekhouding. meest recente rapport.

03:13.902 --> 03:16.890
En nu is het belangrijk dat je dit als eigendom benadert.

03:16.890 --> 03:18.690
Dus geen haakjes hier.

03:18.690 --> 03:20.570
Je voert dit niet uit als een methode.

03:20.570 --> 03:23.030
Je benadert het als een normale eigenschap,

03:23.030 --> 03:24.460
en achter de schermen zal

03:24.460 --> 03:27.890
deze methode daarboven worden uitgevoerd.

03:27.890 --> 03:31.670
Dus als ik dit nu probeer voordat we ons rapport hebben toegevoegd, zien

03:31.670 --> 03:33.940
we dat dit zonder fouten is herbouwd, opnieuw

03:33.940 --> 03:35.440
gecompileerd zonder fouten,

03:35.440 --> 03:38.550
maar natuurlijk wordt hier een fout gegooid het is onze aangepaste

03:38.550 --> 03:40.820
geen rapport gevonden fout, omdat er nog geen

03:40.820 --> 03:42.820
rapport was toegevoegd, en omdat we dit

03:42.820 --> 03:45.370
gebruiken als een getter, hebben we toegang tot

03:45.370 --> 03:48.310
deze methode en voeren het uit.

03:48.310 --> 03:51.560
Als we geen rapport hebben komen we niet tot deze IF controle,

03:51.560 --> 03:52.830
of in deze IF verklaring,

03:52.830 --> 03:55.693
en daarom treedt deze regel hier in werking.

03:56.590 --> 04:00.250
Als alternatief kunnen we dat naar beneden verplaatsen, nadat we een

04:00.250 --> 04:02.210
rapport hebben toegevoegd, dan kunnen

04:02.210 --> 04:04.100
we dat natuurlijk opslaan, en krijgen

04:04.100 --> 04:05.730
we geen foutmelding meer, maar

04:05.730 --> 04:08.400
in plaats daarvan dit laatste rapport.

04:08.400 --> 04:09.750
Dus dat is een getter.

04:09.750 --> 04:12.190
En je kunt ook een setter toevoegen.

04:12.190 --> 04:14.550
Een setter wordt bijna op dezelfde manier toegevoegd.

04:14.550 --> 04:16.290
Je gebruikt het sleutelwoord

04:16.290 --> 04:18.630
set, en dan weer een naam naar keuze.

04:18.630 --> 04:21.940
typisch een naam gerelateerd aan de eigenschap die moet worden

04:21.940 --> 04:22.870
ingesteld.

04:22.870 --> 04:25.570
Dus hier zal ik het meest recente verslag hergebruiken.

04:25.570 --> 04:27.840
Zodat we dit zowel kunnen gebruiken om een waarde te lezen

04:27.840 --> 04:29.150
als om een waarde in te stellen.

04:29.150 --> 04:30.090
En dan nog, je hebt dit

04:30.090 --> 04:31.850
gedefinieerd als een methode.

04:31.850 --> 04:34.850
Maar nu moet dit een argument worden.

04:34.850 --> 04:38.630
De waarde die de gebruiker zou hebben doorgegeven.

04:38.630 --> 04:40.940
Hier zou een stringwaarde moeten staan,

04:40.940 --> 04:44.110
en nu kun je hier elke willekeurige logica toepassen

04:44.110 --> 04:46.160
om dit op te slaan.

04:46.160 --> 04:48.530
Omdat we hier een waarde doorgeven voor

04:48.530 --> 04:51.890
het meest recente rapport, wil ik uiteindelijk het rapport

04:51.890 --> 04:53.080
toevoegen.

04:53.080 --> 04:55.370
Hier zou een setter dus gewoon een alternatief kunnen

04:55.370 --> 04:57.140
zijn voor de methode rapport toevoegen.

04:57.140 --> 05:01.280
Dus hier hebben we toegang tot dit rapport.

05:01.280 --> 05:03.760
Dit is nodig omdat we in de klasse zitten.

05:03.760 --> 05:07.280
We verwijzen naar de klasse, en dan naar deze klasse methode hier.

05:07.280 --> 05:10.380
En nu kunnen we hier gewoon waarde doorsturen.

05:10.380 --> 05:12.310
Nu zouden we een meer complexe logica

05:12.310 --> 05:16.130
kunnen toevoegen, en ook controleren of de waarde misschien niet gedefinieerd

05:16.130 --> 05:19.810
is als het onwaar is, en dan gewoon een nieuwe foutmelding geven of

05:19.810 --> 05:24.020
gooien, waarbij we zeggen: geef een geldige waarde door.

05:24.020 --> 05:26.140
Dat zouden we ook kunnen doen.

05:26.140 --> 05:29.010
En nu gebruiken we hier ook een setter.

05:29.010 --> 05:31.330
Met dat erbij kunnen we het testen.

05:31.330 --> 05:33.193
Daaronder zou ik het meest recente rapport

05:35.400 --> 05:36.570
kunnen toevoegen.

05:36.570 --> 05:38.780
Ik zou dit kunnen gebruiken voor de boekhouding,

05:38.780 --> 05:40.770
en net als dit zouden we ervan lezen, maar door

05:40.770 --> 05:42.300
nu een gelijkheidsteken toe te voegen,

05:42.300 --> 05:44.520
proberen we er een waarde op in te stellen, en dat

05:44.520 --> 05:47.150
zal deze settermethode activeren.

05:47.150 --> 05:50.090
We voeren het niet uit als een methode, maar benaderen

05:50.090 --> 05:52.383
het als een eigenschap.

05:53.220 --> 05:56.030
Als ik nu een lege tekenreeks doorgeef, dan geven

05:56.030 --> 05:58.770
we technisch gezien wel een tekenreeks door,

05:58.770 --> 06:02.760
maar een lege tekenreeks wordt behandeld als onwaar, zie hier.

06:02.760 --> 06:04.950
En daarom zouden we nu een foutmelding moeten krijgen.

06:04.950 --> 06:07.450
Dus als ik deze regel code opsla, als ik de code

06:07.450 --> 06:09.850
opsla met deze regel code toegevoegd, krijgen

06:11.120 --> 06:14.530
we deze foutmelding Geef een geldige waarde in.

06:14.530 --> 06:17.010
Als ik echter een geldige waarde

06:17.010 --> 06:22.010
invoer, als ik bijvoorbeeld zeg eindejaarsrapport hier, en

06:22.250 --> 06:23.900
ik sla dit nu op.

06:23.900 --> 06:27.210
Nu zult u zien dat dit alles werkt en dat het eindejaarsrapport

06:27.210 --> 06:29.620
deel uitmaakt van onze rapportenlijst.

06:29.620 --> 06:31.150
Dus dit zijn getters en setters, die geweldig

06:31.150 --> 06:33.620
kunnen zijn voor het inkapselen van logica, en voor het toevoegen

06:33.620 --> 06:35.390
van extra logica, die moet worden uitgevoerd

06:35.390 --> 06:38.050
wanneer u probeert een eigenschap te lezen, of wanneer u probeert

06:38.050 --> 06:40.243
een eigenschap in te stellen.
