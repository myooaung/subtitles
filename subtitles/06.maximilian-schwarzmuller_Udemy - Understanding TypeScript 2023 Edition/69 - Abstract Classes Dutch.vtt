WEBVTT

00:02.060 --> 00:04.710
Dus met statische eigenschappen uit de weg, laten

00:04.710 --> 00:07.000
we terugkomen op overerving en een concept

00:07.000 --> 00:08.743
dat daarmee samenhangt.

00:08.743 --> 00:11.740
Een andere manier om methoden toe te voegen aan klassen,

00:11.740 --> 00:14.280
waarvan u van plan bent te erven.

00:14.280 --> 00:16.660
Hier is onze afdelingsklasse en zoals

00:16.660 --> 00:19.200
je weet, erven we ervan op de IT-afdeling

00:19.200 --> 00:21.360
en de boekhoudafdeling.

00:21.360 --> 00:23.470
Nu hebben we die beschrijvingsmethode

00:23.470 --> 00:26.160
hier in onze afdelingsklasse, en daarom kunnen

00:26.160 --> 00:28.850
we deze aanroepen op elke instantie, gebaseerd

00:28.850 --> 00:31.850
op IT-afdeling en boekhoudafdeling, omdat deze klassen

00:31.850 --> 00:34.560
gebaseerd zijn op afdeling, en ze toegang hebben

00:34.560 --> 00:36.560
tot alle eigenschappen en methoden

00:36.560 --> 00:39.523
van de basisklasse van afdeling.

00:40.380 --> 00:43.850
Zoals je geleerd hebt, kun je methoden overschrijven.

00:43.850 --> 00:46.550
Dus bijvoorbeeld, hier in de Boekhoudafdeling,

00:46.550 --> 00:50.030
zouden we onze eigen beschrijvingsmethode versie

00:50.030 --> 00:51.900
kunnen toevoegen, waar ik

00:51.900 --> 00:56.880
iets anders wil doen, waar misschien als ik zeg Boekhoudafdeling ID,

00:56.880 --> 01:00.443
en dan Access Distort ID.

01:02.040 --> 01:03.140
Nu zou dit hier niet

01:03.140 --> 01:06.960
werken, want ID is een private eigenschap van Department en daarom

01:06.960 --> 01:10.400
moeten we er een beschermde eigenschap van maken, zodat het

01:10.400 --> 01:12.590
ook beschikbaar is in klassen die gebaseerd

01:12.590 --> 01:14.750
zijn op deze klasse.

01:14.750 --> 01:16.210
Maar daarmee zou het moeten werken.

01:16.210 --> 01:19.080
En als ik nu beschrijven op boekhouding aanroep, wat we

01:19.080 --> 01:20.540
natuurlijk kunnen doen, laten

01:20.540 --> 01:23.650
we dan misschien deze twee regels weglaten en in plaats daarvan

01:23.650 --> 01:27.460
boekhouding aanroepen. beschrijven, zouden we die nieuwe

01:27.460 --> 01:29.300
uitvoer moeten zien, en inderdaad,

01:29.300 --> 01:33.340
we zien de ID van de boekhoudafdeling, d2.

01:33.340 --> 01:36.570
Nu kunnen we natuurlijk ook de beschrijvingsmethode

01:36.570 --> 01:38.900
in de IT-afdeling opheffen.

01:38.900 --> 01:43.240
Maar soms wil je niet alleen de mogelijkheid bieden om een methode

01:43.240 --> 01:46.440
te overrulen, want die bestaat altijd.

01:46.440 --> 01:50.430
In plaats daarvan wil je de ontwikkelaars die met een bepaalde klasse werken

01:50.430 --> 01:53.390
of een bepaalde klasse uitbreiden dwingen een bepaalde

01:53.390 --> 01:54.820
methode te implementeren of

01:54.820 --> 01:56.840
een bepaalde methode te overrulen.

01:56.840 --> 01:58.360
Wanneer zou je dat doen?

01:58.360 --> 02:01.690
Nou, wanneer je ervoor wilt zorgen dat een bepaalde methode

02:01.690 --> 02:05.670
beschikbaar is in alle klassen gebaseerd op een basisklasse in dit

02:05.670 --> 02:07.320
geval Departement.

02:07.320 --> 02:10.550
Maar wanneer je tegelijkertijd weet dat de exacte implementatie

02:10.550 --> 02:14.220
zal afhangen van de specifieke versie, dus wanneer je een algemene

02:14.220 --> 02:17.340
methode kunt verstrekken, maar je wilt afdwingen dat deze

02:17.340 --> 02:20.240
methode bestaat, maar de overervende klassen zullen

02:20.240 --> 02:22.410
hun eigen implementatie moeten verstrekken

02:22.410 --> 02:24.270
omdat je geen standaard implementatie

02:24.270 --> 02:28.520
in de basisklasse kunt verstrekken.

02:28.520 --> 02:30.150
Dus in zo'n situatie wil je

02:30.150 --> 02:34.600
misschien een lege methode in je basisklasse hebben en nu alle klassen

02:34.600 --> 02:38.460
gebaseerd op die klasse dwingen om deze methode toe te voegen

02:38.460 --> 02:40.810
en te overschrijven, en dat kun je doen

02:40.810 --> 02:44.880
door hier het abstracte sleutelwoord toe te voegen.

02:44.880 --> 02:46.630
Als je hier abstract toevoegt, zie

02:46.630 --> 02:49.840
je dat we een foutmelding krijgen dat dit alleen beschikbaar

02:49.840 --> 02:51.440
is in een abstracte klasse.

02:51.440 --> 02:54.220
Dus als je een methode of meer hebt met abstract

02:54.220 --> 02:57.390
voor de methode, moet je hier ook abstract toevoegen

02:57.390 --> 03:00.400
voor class en nu zijn we goed wat dat betreft,

03:00.400 --> 03:01.690
maar nu zie je dat ik

03:01.690 --> 03:03.740
hier een fout heb.

03:03.740 --> 03:05.650
Describe kan geen implementatie hebben

03:05.650 --> 03:07.850
omdat het gemarkeerd is als abstract.

03:07.850 --> 03:10.340
U moet de accolades verwijderen, een puntkomma

03:10.340 --> 03:14.030
toevoegen, en in plaats daarvan het terugkeertype dat dit

03:14.030 --> 03:16.820
moet hebben, in dit geval wit.

03:16.820 --> 03:18.400
Dus nu definieer je alleen

03:18.400 --> 03:21.970
hoe deze methode eruit moet zien en wat de structuur

03:21.970 --> 03:25.230
ervan is, maar je zegt verder niets.

03:25.230 --> 03:27.990
Nu krijgen we echter een foutmelding in de IT-afdeling

03:27.990 --> 03:31.120
omdat deze het overgeërfde abstracte lid describe niet

03:31.120 --> 03:33.640
implementeert, wat betekent dat we de methode

03:33.640 --> 03:36.330
describe hier niet aanbieden.

03:36.330 --> 03:38.410
En dat moeten we doen omdat we uitgaan van

03:38.410 --> 03:41.000
de Department klasse, die abstract is, en die zo'n

03:41.000 --> 03:42.860
abstracte methode heeft.

03:42.860 --> 03:45.220
Dit betekent dat deze methode moet worden toegepast

03:45.220 --> 03:48.623
door elke klasse die gebaseerd is op deze afdelingsklasse.

03:49.620 --> 03:51.420
Dus nu moeten we hier in de IT afdeling

03:51.420 --> 03:53.820
een beschrijvingsmethode toevoegen.

03:53.820 --> 03:58.820
En daarbinnen kunnen we nu console log IT Department, en

03:59.040 --> 04:01.120
dan doen wat we willen.

04:01.120 --> 04:03.070
Dit kan dezelfde uitvoering

04:03.070 --> 04:04.900
zijn als in de boekhouding,

04:04.900 --> 04:07.440
maar ook een andere.

04:07.440 --> 04:10.040
Dus nu kunnen we dit opslaan en opnieuw compileren,

04:10.040 --> 04:12.850
en krijgen we bijna dezelfde uitvoer als voorheen.

04:12.850 --> 04:15.240
Maar nu hebben we twee verschillende implementaties

04:15.240 --> 04:18.090
van de beschrijvingsmethode in onze verschillende klassen

04:18.090 --> 04:20.020
op basis van Departement.

04:20.020 --> 04:23.600
Abstract kan daarom heel nuttig zijn als je wilt afdwingen dat

04:23.600 --> 04:27.120
alle klassen die gebaseerd zijn op een andere klasse, een of andere

04:27.120 --> 04:30.260
gemeenschappelijke methode of eigenschap delen, je kunt

04:30.260 --> 04:33.150
ook abstracte eigenschappen hebben.

04:33.150 --> 04:34.260
Maar tegelijkertijd

04:34.260 --> 04:36.510
wil je ervoor zorgen dat je de concrete waarde,

04:36.510 --> 04:39.170
de concrete implementatie niet in de basisklasse

04:39.170 --> 04:41.000
hoeft aan te bieden, maar dat de overervende

04:41.000 --> 04:43.440
klasse dat moet doen.

04:43.440 --> 04:45.970
Ook belangrijk, abstracte klassen.

04:45.970 --> 04:49.200
Dus klassen die met dit sleutelwoord als abstract gemarkeerd zijn,

04:49.200 --> 04:51.420
kunnen zelf geïnstantieerd worden.

04:51.420 --> 04:54.240
Dus je kunt de afdeling nu niet instantiëren.

04:54.240 --> 04:57.440
Het is eigenlijk gewoon een klasse waarvan men moet erven,

04:57.440 --> 05:01.800
zodat de overervende klassen kunnen worden geïnstantieerd, en overervende

05:01.800 --> 05:05.230
klassen worden gedwongen concrete implementaties te bieden

05:05.230 --> 05:09.040
voor in dit geval het beschrijven van een methode volgens de structuur

05:09.040 --> 05:11.770
die u hier hebt uiteengezet.

05:11.770 --> 05:15.750
Dus met dit sleutelwoord dat verwijst naar een instantie of instantie van

05:15.750 --> 05:19.930
een afdeling, op de een of andere manier gebaseerd op afdeling, inclusief geërfde

05:19.930 --> 05:21.530
klassen die ertussen kunnen zitten

05:21.530 --> 05:23.610
en dat het niets teruggeeft
