WEBVTT

00:02.410 --> 00:04.290
Instruktor: Czas więc na trochę

00:04.290 --> 00:06.370
dziedziczenia i na klasę bazową.

00:06.370 --> 00:09.189
Chcę dodać klasę bazową, która zasadniczo ma templateElement,

00:09.189 --> 00:12.090
hostElement, element w nim, który wykonuje to zadanie

00:12.090 --> 00:15.430
wybierania elementów w dom, który ma metodę attach, której

00:15.430 --> 00:16.810
zawsze potrzebujemy, i tak

00:16.810 --> 00:18.520
dalej.

00:18.520 --> 00:22.540
Więc co w zasadzie zarządza wszystkimi tymi wspólnymi funkcjonalnościami,

00:22.540 --> 00:26.630
które nasze klasy, które faktycznie renderują coś do domeny, mają

00:26.630 --> 00:28.220
wspólne.

00:28.220 --> 00:30.880
Więc w tym celu, nad moim ProjectInput,

00:30.880 --> 00:35.650
a także klasą ProjectList, więc w zasadzie tutaj, dodam klasę

00:35.650 --> 00:38.250
Component Base.

00:38.250 --> 00:41.540
Teraz nazwa zależy od Ciebie, ale ja nazwę ją Component, ponieważ

00:41.540 --> 00:44.090
możesz znać ten termin z React lub Angular, jeśli

00:44.090 --> 00:45.870
pracujesz z tym, a nawet jeśli nie

00:45.870 --> 00:47.590
pracowałeś z tym, możesz myśleć

00:47.590 --> 00:49.873
o tych klasach jako UI, komponentach interfejsu

00:50.770 --> 00:53.950
użytkownika, które renderujesz na ekranie.

00:53.950 --> 00:57.950
A każdy komponent to w końcu obiekt renderowalny, który posiada pewne

00:57.950 --> 00:59.970
funkcjonalności, które pozwalają

00:59.970 --> 01:01.370
nam go wyrenderować.

01:01.370 --> 01:05.260
A potem konkretne instancje, czyli klasy dziedziczone, dodają

01:05.260 --> 01:10.260
dodatkową funkcjonalność, której ten konkretny komponent potrzebuje.

01:10.300 --> 01:14.370
Co zatem trafia do ogólnej klasy komponentów?

01:14.370 --> 01:17.590
No, powiedziałbym, że te trzy elementy na pewno.

01:17.590 --> 01:21.390
templateElement, hostElement i element.

01:21.390 --> 01:23.590
Mamy tu jednak pewien problem

01:23.590 --> 01:25.470
dotyczący typów.

01:25.470 --> 01:28.320
TemplateElement zawsze będzie HTMLTemplateElement,

01:29.160 --> 01:31.980
ale hostElement nie zawsze musi być divem, na przykład,

01:31.980 --> 01:35.410
gdy będziemy dodawać klasę project item, będziemy renderować

01:35.410 --> 01:37.160
to w ProjectList, a nie bezpośrednio

01:37.160 --> 01:42.360
nawet nasz root div tutaj, więc to nie zawsze jest div.

01:42.360 --> 01:45.220
A to tutaj, no to zawsze jest HTMLElement, na pewno

01:45.220 --> 01:47.040
możemy się z tego rozliczyć, ale

01:47.040 --> 01:50.540
tak jak w przypadku klasy ProjectInput, tak naprawdę wiemy,

01:50.540 --> 01:52.560
że to jest gdzieś konkretna jego forma,

01:52.560 --> 01:55.230
to jest HTMLFormElement.

01:55.230 --> 01:57.540
Więc stracilibyśmy te dodatkowe informacje,

01:57.540 --> 02:00.320
gdybyśmy ograniczyli się do tego, że zawsze mamy tam

02:00.320 --> 02:02.130
tylko HTMLElement, bez przechowywania

02:02.130 --> 02:05.220
bardziej szczegółowych informacji.

02:05.220 --> 02:07.690
Jak więc możemy to obejść?

02:07.690 --> 02:10.050
Cóż, nie tylko używając dziedziczenia,

02:10.050 --> 02:12.920
ale tworząc tutaj klasę generyczną, gdzie

02:12.920 --> 02:15.230
gdy dziedziczymy po niej, możemy

02:15.230 --> 02:17.680
ustawić konkretne typy.

02:17.680 --> 02:20.940
W tym celu dodajemy nawiasy kątowe po nazwie klasy, a następnie,

02:20.940 --> 02:23.550
dwa identyfikatory naszego wyboru, jak T i

02:23.550 --> 02:26.690
U, które byłyby powszechnym wyborem.

02:26.690 --> 02:30.110
A teraz możemy też dodać tutaj pewne ograniczenia

02:30.110 --> 02:34.820
i powiedzieć, że T na pewno będzie jakimś HTMLElementem.

02:34.820 --> 02:36.770
Może to być po prostu HTMLElement, lub

02:36.770 --> 02:38.970
jego bardziej szczegółowa wersja.

02:38.970 --> 02:41.870
I podobnie jest w przypadku U.

02:41.870 --> 02:44.780
I dalej tutaj wiemy, że hostElement będzie typu

02:44.780 --> 02:46.690
T, a element będzie typu U.

02:46.690 --> 02:48.660
A teraz, ilekroć dziedziczymy z tej klasy,

02:48.660 --> 02:50.970
możemy określić konkretne typy, dzięki czemu możemy

02:50.970 --> 02:52.930
pracować z różnymi typami w różnych miejscach,

02:52.930 --> 02:54.780
w których dziedziczymy.

02:56.050 --> 02:58.053
Teraz dodajmy tutaj również konstruktor.

02:58.910 --> 03:01.080
W tym konstruktorze będziemy potrzebowali

03:01.080 --> 03:03.060
trochę informacji.

03:03.060 --> 03:05.950
Musimy znać ID naszego szablonu, abyśmy wiedzieli

03:05.950 --> 03:08.030
jak go wybrać, a to powinien być

03:08.030 --> 03:09.750
ciąg znaków.

03:09.750 --> 03:11.590
Musimy znać hostElementId, który również

03:11.590 --> 03:13.050
musi być ciągiem znaków, abyśmy

03:13.050 --> 03:15.833
wiedzieli, gdzie renderować ten komponent.

03:17.440 --> 03:20.505
I chcę również uzyskać newElementId, abyśmy otrzymali identyfikator,

03:20.505 --> 03:22.590
który musi być przypisany do nowo wyrenderowanego

03:22.590 --> 03:24.350
elementu.

03:24.350 --> 03:26.020
Jest to jednak opcjonalne, co

03:26.020 --> 03:28.210
sygnalizuję poprzez dodanie znaku zapytania

03:28.210 --> 03:29.690
po parametrze.

03:29.690 --> 03:31.940
Alternatywą byłoby również zaakceptowanie

03:31.940 --> 03:34.050
niezdefiniowanego tutaj jako typu, ale

03:34.050 --> 03:36.470
po prostu użyję znaku zapytania.

03:36.470 --> 03:38.510
I teraz, z tym w konstruktorze, możemy,

03:38.510 --> 03:39.793
w zasadzie, uzyskać ten

03:40.640 --> 03:42.083
kod tutaj i umieścić go w

03:43.810 --> 03:46.950
naszym konstruktorze klasy Component, tak, że przechowujemy

03:46.950 --> 03:48.940
templateElement, ale, oczywiście,

03:48.940 --> 03:52.060
teraz ID, które otrzymujemy tutaj, jest tym templateId,

03:52.060 --> 03:57.450
dlatego dostaję to jako argument w konstruktorze.

03:57.450 --> 04:00.060
I dla hostElementu, oczywiście ID tutaj

04:00.060 --> 04:02.733
to nasz hostElementId, tak jak tutaj.

04:04.790 --> 04:07.930
Również ważne, oczywiście odnośnie rzutowania tutaj,

04:07.930 --> 04:10.230
wiemy, że to będzie typu T, bo T tutaj jest tym

04:10.230 --> 04:12.580
typem generycznym, który przechowujemy

04:12.580 --> 04:15.420
czy który używamy dla naszego hostElementu, więc tutaj

04:15.420 --> 04:17.163
możemy już rzutować.

04:18.160 --> 04:20.253
I tym sposobem wybieramy elementy.

04:21.130 --> 04:22.940
Możemy też złapać więcej kodu.

04:22.940 --> 04:26.650
Ten kod tutaj, gdzie importujemy węzeł i tak dalej, i

04:26.650 --> 04:30.130
gdzie ustawiamy ID, możemy złapać to wszystko.

04:30.130 --> 04:32.520
Skopiujmy więc to tutaj i dodajmy

04:32.520 --> 04:35.317
do konstruktora klasy Component.

04:35.317 --> 04:37.640
importedNode, następnie ustawiamy

04:37.640 --> 04:41.080
element, a element tutaj ma ten generyczny typ U, więc

04:41.080 --> 04:43.000
kiedy rzucamy to tutaj, wiemy,

04:43.000 --> 04:46.870
że będzie to ten typ U tutaj, więc powinniśmy rzucić go na U.

04:46.870 --> 04:49.090
To jest dobre wykorzystanie generycznych tutaj, co sprawia,

04:49.090 --> 04:51.993
że ta klasa Component jest naprawdę wielokrotnego użytku.

04:53.060 --> 04:55.200
Teraz co do identyfikatora.

04:55.200 --> 04:58.200
To jest to, co otrzymujemy tutaj, czyli newElementId.

04:58.200 --> 05:00.590
Teraz oczywiście możemy nie zawsze to mieć,

05:00.590 --> 05:02.150
bo jest to opcjonalne, więc powinniśmy

05:02.150 --> 05:03.870
sprawdzić czy mamy.

05:03.870 --> 05:06.070
Więc jeśli newElementId jest rzeczą, i tylko jeśli

05:06.070 --> 05:07.650
jest rzeczą, tylko wtedy będę próbował

05:07.650 --> 05:10.543
go przypisać, w przeciwnym razie nie próbujemy, ponieważ wtedy

05:10.543 --> 05:13.023
nie mamy żadnego ID do przypisania.

05:14.420 --> 05:16.300
Cóż, dzięki temu mamy konstruktor.

05:16.300 --> 05:19.160
Teraz użyjmy tutaj funkcji attach.

05:19.160 --> 05:21.970
Skopiujmy więc metodę attach z jednej

05:21.970 --> 05:25.470
z naszych innych klas i dodajmy ją tutaj, jako metodę

05:25.470 --> 05:28.473
prywatną, w klasie Component.

05:32.690 --> 05:35.640
Możemy wtedy również wywołać to. dołącz na końcu konstruktora

05:35.640 --> 05:38.540
klasy Component.

05:38.540 --> 05:39.960
Teraz tutaj chcemy dodać

05:39.960 --> 05:42.570
element, ale nie wiemy, gdzie powinien być dodany,

05:42.570 --> 05:44.193
więc to jest właściwie jakaś

05:44.193 --> 05:46.450
dodatkowa informacja, którą powinniśmy

05:46.450 --> 05:49.450
tutaj pobrać, jako czwarty argument w contructor,

05:52.430 --> 05:54.200
insert Atstart może być nazwą,

05:54.200 --> 05:56.680
a to jest boolean, powiedzmy.

05:56.680 --> 06:00.190
I powinniśmy przenieść to przed naszym opcjonalnym parametrem.

06:00.190 --> 06:02.230
Parametry opcjonalne powinny być zawsze ostatnie,

06:02.230 --> 06:03.980
ponieważ ludzie mogą je pominąć.

06:03.980 --> 06:06.680
Twoje wymagane parametry, dlatego nie mogą pojawić

06:06.680 --> 06:09.220
się po tych opcjonalnych parametrach.

06:09.220 --> 06:12.700
I insertAtStart jest następnie przekazywany do attach, tam,

06:12.700 --> 06:13.533
insertAtBeginning,

06:14.615 --> 06:18.740
możesz również ponownie użyć insertAtStart, po prostu używam innej nazwy

06:18.740 --> 06:21.350
tutaj, aby uniknąć zamieszania, jest odbierany

06:21.350 --> 06:23.470
jako boolean.

06:23.470 --> 06:28.040
A potem tutaj sprawdzamy czy insertAtBeginning jest

06:28.040 --> 06:32.920
true, jeśli jest, to tutaj mamy afterbegin, w przeciwnym

06:32.920 --> 06:34.887
razie mamy beforeend.

06:36.770 --> 06:39.653
Teraz jesteśmy elastyczni, jeśli chodzi o to, jak to zostanie wstawione.

06:42.980 --> 06:46.570
Chcę również oznaczyć tę klasę teraz jako klasę abstrakcyjną, ponieważ

06:46.570 --> 06:49.600
ludzie nigdy nie powinni bezpośrednio instancjonować, zamiast

06:49.600 --> 06:52.560
tego zawsze powinni być używani do dziedziczenia.

06:52.560 --> 06:56.090
Więc przed klasą dodaję słowo kluczowe abstract.

06:56.090 --> 06:58.750
Dzięki temu mamy pewność, że teraz nie będziemy mogli go zainicjować.

06:58.750 --> 07:01.963
Jeśli próbowalibyśmy to zrobić, TypeScript krzyczałby na nas.

07:04.070 --> 07:06.490
Dodam jeszcze dwie metody, a to jest

07:06.490 --> 07:08.410
metoda configure, a także

07:08.410 --> 07:10.840
wtedy metoda renderContent.

07:10.840 --> 07:13.430
I dodam to jako metodę abstrakcyjną, co oznacza,

07:13.430 --> 07:16.463
że brakuje tutaj konkretnej implementacji, ale teraz,

07:18.000 --> 07:21.080
w zasadzie, zmuszamy każdą klasę dziedziczącą po komponencie,

07:21.080 --> 07:22.670
do dodania tych dwóch metod

07:22.670 --> 07:25.980
i posiadania ich dostępnych.

07:25.980 --> 07:27.220
Dodaję to tutaj, aby

07:27.220 --> 07:29.390
jeśli ktoś inny spojrzy na nasz

07:29.390 --> 07:31.460
kod, mógł dobrze zrozumieć,

07:31.460 --> 07:34.150
jaka jest idea klasy Component.

07:34.150 --> 07:36.340
Że robi wszystkie ogólne renderowanie,

07:36.340 --> 07:38.530
lub dołączenie komponentu, ale że konkretna

07:38.530 --> 07:40.790
zawartość i konfiguracja następnie musi

07:40.790 --> 07:43.840
się zdarzyć w miejscu, w którym dziedziczymy.

07:43.840 --> 07:47.670
Uwaga boczna, nie możesz mieć prywatnych, abstrakcyjnych metod.

07:47.670 --> 07:49.660
Więc private musi być tutaj pominięty,

07:49.660 --> 07:52.000
to nie jest dozwolone przez TypeScript.

07:52.000 --> 07:54.590
No, a dzięki temu możemy rozszerzyć Component

07:54.590 --> 07:56.480
tutaj na ProjectList, a teraz pozbyć

07:56.480 --> 07:59.130
się tych trzech właściwości.

07:59.130 --> 08:00.640
Zachowujemy assignedProjects,

08:00.640 --> 08:03.520
ponieważ jest to specyficzne dla ProjectList.

08:03.520 --> 08:06.620
Teraz chcemy również określić konkretne wartości, które powinny

08:06.620 --> 08:09.560
być podłączone do naszych typów generycznych.

08:09.560 --> 08:12.410
I wiemy, że jak to odwrócimy, to wiemy, że

08:12.410 --> 08:16.540
będziemy mieli HTMLDivElement i HTMLElement, więc tutaj

08:16.540 --> 08:19.313
przekażę HTMLDivElement, i HTMLElement,

08:20.410 --> 08:22.800
tak jak tutaj, a potem pozbędziemy

08:22.800 --> 08:25.830
się tych trzech właściwości.

08:25.830 --> 08:29.510
W konstruktorze, teraz nie potrzebujemy tego tutaj,

08:29.510 --> 08:32.550
ale zamiast tego musimy na początku wywołać

08:32.550 --> 08:35.130
super, wywołać kontruktor klasy bazowej,

08:35.130 --> 08:38.080
a do tego, do super kontruktora, musimy przekazać

08:38.080 --> 08:40.840
pewne informacje.

08:40.840 --> 08:42.753
ID out templateElement, hostElementId,

08:44.050 --> 08:45.850
czy chcemy to wstawić na początku

08:45.850 --> 08:47.870
hostElementu i ewentualnie ID, które

08:47.870 --> 08:51.920
powinno być przypisane do nowego elementu.

08:51.920 --> 08:54.038
Więc tutaj jest nasz identyfikator

08:54.038 --> 08:57.811
szablonu, i z tym możemy pozbyć się tego tutaj.

08:57.811 --> 09:01.292
Następnie tutaj, hostElement, ten ID był app, więc możemy

09:01.292 --> 09:02.670
się tego pozbyć.

09:02.670 --> 09:04.260
Zachowujemy assignedProjects,

09:04.260 --> 09:06.400
ponieważ nadal potrzebujemy tego tutaj.

09:06.400 --> 09:08.193
Pozbywamy się tego tutaj, ale

09:10.150 --> 09:13.050
jeśli chodzi o ID dla nowego elementu, chcę przekazać

09:13.050 --> 09:16.850
to jako czwarty parametr w rzeczywistości.

09:16.850 --> 09:19.040
Trzeci to miejsce, gdzie to powinno być

09:19.040 --> 09:22.400
wstawione, a tutaj używamy do wstawienia tego przed końcem,

09:22.400 --> 09:25.890
więc właściwie to, co chcę tutaj wstawić jako parametr dla

09:25.890 --> 09:29.170
wartości insertAtStart, to false, bo to nie powinno być

09:29.170 --> 09:32.283
wstawione na początku, tylko na końcu.

09:36.000 --> 09:38.940
Teraz z pewnością chcę jeszcze ustawić tutaj swojego słuchacza.

09:38.940 --> 09:40.730
Nie muszę jednak wywoływać attach,

09:40.730 --> 09:44.410
to się stanie w klasie bazowej, w komponencie bazowym.

09:44.410 --> 09:46.253
Będę jednak wywoływał renderContent.

09:47.870 --> 09:50.010
I tutaj nie powinniśmy używać tego typu, ale

09:50.010 --> 09:52.100
po prostu typu, ponieważ nie możemy użyć tego

09:52.100 --> 09:54.410
przed super zakończonym uruchomieniem.

09:54.410 --> 09:55.490
To jednak nie problem,

09:55.490 --> 09:57.690
bo otrzymaliśmy typ jako argument.

09:57.690 --> 09:59.680
Teraz widzisz, że nadal dostaję

09:59.680 --> 10:03.487
błąd, ponieważ mamy metodę attach w ProjectList, a to koliduje

10:03.487 --> 10:05.410
z metodą attach, którą mamy w

10:05.410 --> 10:07.330
klasie bazowej.

10:07.330 --> 10:10.600
Pozbądźmy się więc tutaj tej metody attach.

10:10.600 --> 10:14.024
Teraz nadal otrzymujemy błąd, ponieważ widzisz, renderContent

10:14.024 --> 10:16.060
jest prywatny tutaj, ale określamy go

10:16.060 --> 10:18.270
jako metodę publiczną tutaj, chciałbym

10:18.270 --> 10:20.240
mieć go jako prywatny, ale prywatne

10:20.240 --> 10:22.860
metody abstrakcyjne nie są obsługiwane.

10:22.860 --> 10:25.680
Więc usunę tutaj słowo kluczowe private i teraz z tym,

10:25.680 --> 10:28.170
zostajemy z jednym problemem tutaj, że nie mamy

10:28.170 --> 10:30.510
tej metody configure, którą obiecałem, że

10:30.510 --> 10:31.990
będziemy mieli tutaj.

10:31.990 --> 10:33.650
Cóż, dodajmy to.

10:33.650 --> 10:38.500
Więc tutaj oprócz renderConfig moglibyśmy dodać configure, chociaż

10:38.500 --> 10:40.510
ja tutaj nic nie robię.

10:40.510 --> 10:42.950
Alternatywnie, możesz przekonwertować to tutaj,

10:42.950 --> 10:46.000
aby było opcjonalną metodą, dodając znak zapytania, wtedy, nie

10:46.000 --> 10:47.520
jesteś zmuszony do dodania go.

10:47.520 --> 10:50.380
Tutaj dodam, bo można by też argumentować,

10:50.380 --> 10:53.210
że my, w przypadku ProjectList, ten kod, w którym

10:53.210 --> 10:56.490
ustawiamy tutaj naszego listenera, wrzucamy właściwie

10:56.490 --> 10:58.530
do configure.

10:58.530 --> 11:00.810
Więc możemy sięgnąć po konfigurację,

11:00.810 --> 11:03.320
a następnie zrobić naszą rzecz tutaj, tę

11:03.320 --> 11:05.220
konfigurację słuchacza.

11:05.220 --> 11:06.610
I teraz powinniśmy tylko upewnić

11:06.610 --> 11:10.653
się, że wywołujemy renderContent, ale także skonfigurować tak.

11:12.730 --> 11:14.440
W przypadku, gdy zastanawiasz się,

11:14.440 --> 11:16.450
dlaczego nie wywołuję configure i renderContent

11:16.450 --> 11:18.560
tutaj w klasie abstrakcyjnej w contruktorze,

11:18.560 --> 11:19.993
cóż, moglibyśmy to zrobić, ale

11:21.780 --> 11:23.720
możemy mieć wtedy problem.

11:23.720 --> 11:26.760
Jeśli wywołamy to w klasie Component, wtedy możemy

11:26.760 --> 11:30.770
wywołać metodę w klasie dziedziczącej, więc w klasie, która

11:30.770 --> 11:33.240
rozszerza Component, gdzie renderContent

11:33.240 --> 11:36.810
lub configure opiera się na czymś, gdzie kontruktor klasy

11:36.810 --> 11:39.410
dziedziczącej faktycznie może ustawić

11:39.410 --> 11:41.540
coś, tylko po zakończeniu kontruktora

11:41.540 --> 11:44.710
klasy bazowej, na którym renderContent lub configure

11:44.710 --> 11:48.100
polegają.

11:48.100 --> 11:50.690
Dlatego bezpieczniej jest, w zasadzie, upewnić

11:50.690 --> 11:52.410
się, że klasa dziedzicząca musi

11:52.410 --> 11:55.410
wywołać te metody, zamiast klasy bazowej wywoływać

11:55.410 --> 11:56.860
te metody za nas.

11:57.980 --> 12:01.280
W ten sposób zrestrukturyzowaliśmy klasę ProjectList,

12:01.280 --> 12:05.040
aby wykorzystać dziedziczenie i naszą wspólną logikę.

12:05.040 --> 12:07.730
Zróbmy teraz to samo dla ProjectInput.

12:07.730 --> 12:13.170
Tam również chcemy rozszerzyć Component.

12:13.170 --> 12:14.900
Użyj generycznej natury

12:14.900 --> 12:19.430
tego i mamy HTMLDivElement dla elementu hosta i HTMLFormElement

12:19.430 --> 12:23.980
dla elementu, który jest renderowany.

12:23.980 --> 12:27.210
Dzięki temu możemy pozbyć się tych trzech właściwości tutaj,

12:27.210 --> 12:28.310
więc zróbmy to.

12:28.310 --> 12:30.090
Zachowujemy oczywiście te trzy właściwości,

12:30.090 --> 12:32.140
ponieważ są one specyficzne dla ProjectInput.

12:33.040 --> 12:35.310
Następnie musimy wywołać super tutaj,

12:35.310 --> 12:38.320
a do super przekazujemy ID szablonu, czyli ProjectInput,

12:38.320 --> 12:39.900
ID elementu hosta, czyli

12:39.900 --> 12:41.970
app, insertBefore tutaj jest true,

12:41.970 --> 12:45.270
ponieważ chcę wstawić ten nowo utworzony element

12:45.270 --> 12:50.510
na początku tutaj dla tej klasy ProjectInput.

12:50.510 --> 12:53.110
A potem newElementId, cóż, to tutaj jest

12:53.110 --> 12:55.170
user-input, więc powinniśmy również

12:55.170 --> 12:56.913
przekazać to.

12:57.844 --> 12:59.400
Dzięki temu możemy pozbyć

12:59.400 --> 13:03.480
się tego kodu, tego kodu i całego tego kodu tutaj właściwie.

13:03.480 --> 13:05.240
Oczywiście, zachowaj ten kod tutaj.

13:05.240 --> 13:07.820
Można też jednak twierdzić, że wrzucamy

13:07.820 --> 13:09.860
to do configu może.

13:09.860 --> 13:12.100
Zejdźmy więc do metody configure, którą

13:12.100 --> 13:13.660
już tutaj mamy, i dodajmy do

13:13.660 --> 13:16.790
configure nasze listenery tutaj lub nasze property setup

13:16.790 --> 13:17.683
tutaj.

13:18.880 --> 13:20.780
Oczywiście pozbądźmy się attach,

13:20.780 --> 13:24.450
bo to teraz coś, co robi za nas klasa bazowa i sprawdźmy, czego

13:24.450 --> 13:26.980
nie lubi TypeScript, oczywiście powinniśmy

13:26.980 --> 13:29.690
pozbyć się tutaj attach.

13:29.690 --> 13:32.520
I tak, właściwie jedna rzecz, której TypeScript

13:32.520 --> 13:35.090
nie lubi, teraz narzeka, że te pola nie są

13:35.090 --> 13:37.190
inicjalizowane w kontruktorze,

13:37.190 --> 13:40.380
ponieważ nie rozumie lub nie sprawdza, że configure

13:40.380 --> 13:42.260
jest wywoływany w kontruktorze

13:42.260 --> 13:44.770
i robi tę inicjalizację.

13:44.770 --> 13:47.500
Tak więc, aby zadowolić TypeScript, faktycznie

13:47.500 --> 13:50.550
przeniosę te inicjalizacje z powrotem z configure bezpośrednio

13:50.550 --> 13:52.170
do konstruktora.

13:52.170 --> 13:54.190
Technicznie wynik jest dokładnie taki sam, ale

13:54.190 --> 13:55.953
teraz TypeScript nie będzie narzekał.

13:56.800 --> 13:59.240
Będzie jednak narzekał, że mamy prywatną

14:00.440 --> 14:02.310
metodę configure, więc tak

14:02.310 --> 14:05.910
jak poprzednio powinniśmy to zmienić i zamienić configure

14:05.910 --> 14:08.940
w metodę publiczną.

14:08.940 --> 14:11.460
Teraz nie jest to obowiązkowe, ale jest to rodzaj konwencji,

14:11.460 --> 14:13.000
aby mieć swoje publiczne metody

14:13.000 --> 14:14.570
najpierw, dlatego przesunę je powyżej

14:14.570 --> 14:17.240
innych prywatnych metod tutaj.

14:17.240 --> 14:19.370
I oczywiście teraz też narzeka,

14:19.370 --> 14:21.990
że nie mamy metody renderContent.

14:21.990 --> 14:25.020
Teraz dodam jedno, tylko dlatego, że musimy.

14:25.020 --> 14:26.780
Tutaj nie robimy w nim nic, więc

14:26.780 --> 14:28.890
technicznie nie jest to wymagane, ale

14:28.890 --> 14:31.053
teraz spełniamy naszą klasę bazową.

14:32.260 --> 14:34.603
Side note, renderContent, i configure, w klasie

14:35.550 --> 14:39.590
ProjectList, mogą być również przeniesione powyżej tej prywatnej metody

14:39.590 --> 14:43.230
tutaj z dokładnie tych samych powodów, dla tej konwencji, o której

14:43.230 --> 14:45.123
właśnie wspomniałem.

14:46.440 --> 14:49.870
A wraz z tym, zrestrukturyzowaliśmy również ProjectInput,

14:49.870 --> 14:51.780
aby wykorzystać dziedziczenie

14:51.780 --> 14:55.330
i pozwolić klasie bazowej wykonać wiele pracy.

14:55.330 --> 14:57.670
Zobaczmy, czy teraz to wszystko działa.

14:57.670 --> 15:00.710
Jeśli zapiszemy to, kompiluje się bez błędów,

15:00.710 --> 15:02.740
wydaje się, że działa dobrze,

15:02.740 --> 15:05.870
więc czy to działa jest pytanie.

15:05.870 --> 15:07.810
I to wygląda całkiem nieźle.

15:07.810 --> 15:09.720
Działa to tak samo jak wcześniej,

15:09.720 --> 15:11.600
ale teraz mamy czystszy kod, w którym

15:11.600 --> 15:14.240
korzystamy z ponownego wykorzystania kodu, dzięki

15:14.240 --> 15:15.850
dziedziczeniu.

15:15.850 --> 15:18.540
Teraz nie jest to jedyne miejsce, w którym możemy dziedziczyć.

15:18.540 --> 15:20.610
Chcę tutaj zakończyć ten wykład

15:20.610 --> 15:24.230
również refaktoryzacją stanu naszego projektu.

15:24.230 --> 15:26.240
Technicznie, tam nie potrzebujemy dziedziczenia,

15:26.240 --> 15:29.450
ponieważ mamy tylko ten jeden pojedynczy stan, którym zarządzamy

15:29.450 --> 15:31.230
w całej tej aplikacji, ale wyobraź sobie

15:31.230 --> 15:33.130
większą aplikację, w której masz wiele

15:33.130 --> 15:35.310
różnych stanów.

15:35.310 --> 15:37.240
Jeden dla stanu użytkownika,

15:37.240 --> 15:39.290
czy jest zalogowany i tak dalej,

15:39.290 --> 15:43.030
jeden dla projektów, jeden dla koszyka.

15:43.030 --> 15:45.600
Teraz zauważysz, że niektóre cechy twojej

15:45.600 --> 15:48.080
klasy państwowej są zawsze takie same.

15:48.080 --> 15:50.520
Konkretnie chodzi o tę tablicę słuchaczy,

15:50.520 --> 15:52.780
oraz metodę addListener.

15:52.780 --> 15:54.730
Więc możemy również użyć tutaj klasy bazowej.

15:55.650 --> 15:58.170
Moglibyśmy użyć tutaj klasy State,

15:58.170 --> 16:01.230
a ta klasa ma tablicę listeners i ta klasa

16:01.230 --> 16:04.640
ma również metodę addListeners, więc wytniemy

16:04.640 --> 16:07.120
obie z ProjectState i dodamy je

16:07.120 --> 16:09.160
do State.

16:09.160 --> 16:12.610
Teraz oznacza to również, że my oczywiście nie wiemy,

16:12.610 --> 16:14.700
czy nasz listener rzeczywiście

16:14.700 --> 16:16.720
zwróci tablicę projektów.

16:16.720 --> 16:18.253
Więc właściwie tutaj,

16:19.110 --> 16:20.760
dla tego typu funkcji,

16:20.760 --> 16:24.740
chcę również mieć typ generyczny faktycznie.

16:24.740 --> 16:27.440
Żebyśmy mogli ustawić to z zewnątrz.

16:27.440 --> 16:28.483
Możemy to zrobić, możemy

16:29.790 --> 16:31.623
napisać typ generyczny, jak ten tutaj,

16:32.680 --> 16:35.730
typ niestandardowy, który jest generyczny, możemy dodać

16:35.730 --> 16:38.410
nawiasy kątowe po naszej nazwie typu, użyć identyfikatora

16:38.410 --> 16:40.150
naszego wyboru, a następnie ponownie

16:40.150 --> 16:42.460
użyć tego typu tutaj.

16:42.460 --> 16:44.960
Teraz możemy zrobić State generic, możemy użyć tego

16:44.960 --> 16:46.320
samego identyfikatora, ponieważ

16:46.320 --> 16:49.530
jest to inna konstrukcja niż nasz typ niestandardowy.

16:49.530 --> 16:53.520
A następnie tutaj, kiedy mówimy, że chcemy mieć listę słuchaczy,

16:53.520 --> 16:56.780
musimy powiedzieć TypeScriptowi, który typ generyczny

16:56.780 --> 16:58.850
słuchaczy używa tego obiektu State,

16:58.850 --> 17:01.510
który tworzymy.

17:01.510 --> 17:03.850
A to oznacza po prostu, że możemy przekazać

17:03.850 --> 17:06.490
nasz typ generyczny tutaj i tutaj.

17:06.490 --> 17:09.410
Więc kiedy teraz rozszerzamy stan, musimy określić typ

17:09.410 --> 17:12.630
danych, z którymi ten stan będzie pracował, a zamiast stanu, to

17:12.630 --> 17:14.930
następnie zostaje przekazane do naszego niestandardowego

17:14.930 --> 17:17.680
typu listenera, taki jest pomysł.

17:17.680 --> 17:19.580
I jak to wszystko wykorzystać?

17:19.580 --> 17:21.950
Cóż, tam na dole, w klasie ProjectState,

17:21.950 --> 17:24.930
po prostu rozszerzamy klasę State, a teraz dostarczamy

17:24.930 --> 17:27.900
wartość, konkretną wartość dla tego ogólnego

17:27.900 --> 17:30.040
uchwytu miejsca, a tutaj tą konkretną

17:30.040 --> 17:32.480
wartością jest Project, ponieważ ProjectState

17:32.480 --> 17:36.510
jest o zarządzaniu zgadnij co?

17:36.510 --> 17:37.393
Projekty.

17:38.970 --> 17:41.650
Teraz prywatny konstruktor tutaj ma problem,

17:41.650 --> 17:43.390
jak możesz powiedzieć, ponieważ

17:43.390 --> 17:45.160
nie wywołujemy super.

17:45.160 --> 17:46.930
No to zdecydowanie powinniśmy to zrobić,

17:46.930 --> 17:48.350
nazwijmy to super w tym miejscu,

17:48.350 --> 17:49.800
to wszystko co tam mamy.

17:50.640 --> 17:53.490
I tutaj, jeśli przewijamy w dół, gdzie przechodzimy

17:53.490 --> 17:55.880
przez słuchaczy, widzimy, że listeners

17:55.880 --> 17:57.890
jest prywatny, i jest prywatny w

17:57.890 --> 18:00.240
naszej klasie bazowej.

18:00.240 --> 18:01.860
Teraz oznacza to, że możemy uzyskać dostęp

18:01.860 --> 18:03.580
do niego tylko z wnętrza klasy bazowej.

18:03.580 --> 18:06.760
Ale dowiedziałeś się o innym modyfikatorze dostępu,

18:06.760 --> 18:09.380
który jest podobny do private, ale pozwala

18:09.380 --> 18:12.900
również na dostęp z klas dziedziczących, a to byłoby

18:12.900 --> 18:14.990
chronione.

18:14.990 --> 18:17.200
Protected oznacza, że nadal nie można

18:17.200 --> 18:18.930
uzyskać do niego dostępu spoza

18:18.930 --> 18:23.030
klasy, ale można go uzyskać z każdej klasy, która dziedziczy.

18:23.030 --> 18:24.740
Z tym, zapiszmy to wszystko, powinno

18:24.740 --> 18:26.650
się skompilować po prostu dobrze.

18:26.650 --> 18:28.940
I szybko przetestujmy to, i to wygląda dobrze,

18:28.940 --> 18:31.790
więc to działa jak wcześniej, ale teraz, ponownie,

18:31.790 --> 18:34.160
z nieco ładniejszym kodem, używając dziedziczenia

18:34.160 --> 18:36.420
i generics również dla naszego zarządzania

18:36.420 --> 18:38.363
stanem.
