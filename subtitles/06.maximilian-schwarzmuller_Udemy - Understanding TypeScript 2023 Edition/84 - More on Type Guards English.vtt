WEBVTT

1
00:00:02.220 --> 00:00:04.080
<v ->Now intersection types are one thing.</v>

2
00:00:04.080 --> 00:00:05.470
Used more often, however,

3
00:00:05.470 --> 00:00:07.800
is another feature, and that would be type guards,

4
00:00:07.800 --> 00:00:10.590
a feature we actually already used a bit.

5
00:00:10.590 --> 00:00:12.400
Let's use Combinable here.

6
00:00:12.400 --> 00:00:15.560
It's a union type where we either have a string or a number,

7
00:00:15.560 --> 00:00:18.020
and type guards help us with union types

8
00:00:18.020 --> 00:00:21.050
because whilst it is nice to have the flexibility,

9
00:00:21.050 --> 00:00:23.610
often you need to know which exact type

10
00:00:23.610 --> 00:00:26.200
you are getting now at runtime.

11
00:00:26.200 --> 00:00:28.630
Let's say here we have our add function

12
00:00:28.630 --> 00:00:33.070
where I get a number which needs to be of type Combinable,

13
00:00:33.070 --> 00:00:35.100
so a string or a number,

14
00:00:35.100 --> 00:00:37.990
and, therefore, I'll actually name it a here,

15
00:00:37.990 --> 00:00:39.520
and then I got another argument

16
00:00:39.520 --> 00:00:42.110
which also needs to be Combinable, so a number or a string,

17
00:00:42.110 --> 00:00:44.640
and then I want to return a plus b.

18
00:00:44.640 --> 00:00:47.020
Now we saw in the past that this does not work.

19
00:00:47.020 --> 00:00:51.320
Instead we now need to check if typeof a

20
00:00:51.320 --> 00:00:53.740
is equal to string, for example,

21
00:00:55.660 --> 00:00:59.780
or typeof b is equal to string,

22
00:00:59.780 --> 00:01:01.000
and if that is the case,

23
00:01:01.000 --> 00:01:04.681
we return a.toString plus b.toString.

24
00:01:04.681 --> 00:01:06.750
So we concatenate these two strings;

25
00:01:06.750 --> 00:01:09.570
otherwise, if don't make it into this if statement,

26
00:01:09.570 --> 00:01:11.510
we return a plus b like this

27
00:01:11.510 --> 00:01:13.270
because now types group knows

28
00:01:13.270 --> 00:01:15.620
a and b have to be numbers here,

29
00:01:15.620 --> 00:01:18.230
because if at least one of them would not be a number,

30
00:01:18.230 --> 00:01:19.710
we would be in here.

31
00:01:19.710 --> 00:01:22.890
Now this here is called a type guard

32
00:01:22.890 --> 00:01:25.280
because it allows us to utilize

33
00:01:25.280 --> 00:01:27.980
the flexibility union types gives us

34
00:01:27.980 --> 00:01:32.550
and still ensure that our code runs correctly at runtime,

35
00:01:32.550 --> 00:01:34.830
because often you have functions

36
00:01:34.830 --> 00:01:38.160
that work with two or three different types,

37
00:01:38.160 --> 00:01:40.570
and, therefore, a union type is perfect,

38
00:01:40.570 --> 00:01:43.890
but what exactly you do with the values

39
00:01:43.890 --> 00:01:46.940
then does depend on the type, like here,

40
00:01:46.940 --> 00:01:51.670
where we either concatenate or we add mathematically.

41
00:01:51.670 --> 00:01:55.310
Now this a type guard using typeof.

42
00:01:55.310 --> 00:01:58.970
You can also write other kinds of type guards.

43
00:01:58.970 --> 00:02:00.880
and for that, let me come back to my admin

44
00:02:00.880 --> 00:02:03.050
and employee types I got up there,

45
00:02:03.050 --> 00:02:04.950
where I got privileges on the admin

46
00:02:04.950 --> 00:02:06.943
and startDate on the employee.

47
00:02:08.590 --> 00:02:11.810
Now we have the ElevatedEmployee which combines both.

48
00:02:11.810 --> 00:02:14.980
Now also create another type here.

49
00:02:14.980 --> 00:02:16.330
That's the UnknownEmployee.

50
00:02:18.000 --> 00:02:21.940
This is either just an employee or an admin.

51
00:02:21.940 --> 00:02:25.540
So we have a union type using my two custom object types.

52
00:02:25.540 --> 00:02:28.173
So unknown employee is either of the two.

53
00:02:29.230 --> 00:02:32.003
Now we might have a function, printEmployeeInformation,

54
00:02:34.620 --> 00:02:36.420
where I need to pass in an employee,

55
00:02:36.420 --> 00:02:39.660
and that should be of the type unknown employee.

56
00:02:39.660 --> 00:02:41.610
Now here, I want to console.log

57
00:02:41.610 --> 00:02:44.030
various pieces of information about the employee.

58
00:02:44.030 --> 00:02:47.210
For example, the name from emp.name,

59
00:02:47.210 --> 00:02:48.580
which will work without issues

60
00:02:48.580 --> 00:02:52.140
because both types of employees have a name property.

61
00:02:52.140 --> 00:02:56.730
But then I also want to console.log the privileges

62
00:02:58.160 --> 00:03:01.520
by accessing emp.privileges,

63
00:03:01.520 --> 00:03:04.350
and here I already get problems in the autocompletion

64
00:03:04.350 --> 00:03:07.100
because TypeScript can't confirm

65
00:03:07.100 --> 00:03:09.890
that this always exists on the argument,

66
00:03:09.890 --> 00:03:13.540
because the UnknownEmployee might be a normal employee

67
00:03:13.540 --> 00:03:16.260
which does not have a privileges property.

68
00:03:16.260 --> 00:03:18.330
Only the admin has that.

69
00:03:18.330 --> 00:03:20.100
So now we need a type guard here.

70
00:03:20.100 --> 00:03:24.530
The problem just is with typeof, we'll not win anything.

71
00:03:24.530 --> 00:03:26.830
If we check the type of employee,

72
00:03:26.830 --> 00:03:29.470
that will just be object at runtime.

73
00:03:29.470 --> 00:03:31.380
That doesn't tell us whether it has

74
00:03:31.380 --> 00:03:32.940
this property or not, though.

75
00:03:32.940 --> 00:03:34.960
Hence, if I move the code in this if check,

76
00:03:34.960 --> 00:03:37.430
TypeScript is not happier than before

77
00:03:37.430 --> 00:03:39.750
because an object is, well, just an object.

78
00:03:39.750 --> 00:03:41.920
Doesn't tell us anything about the properties.

79
00:03:41.920 --> 00:03:44.980
We can't check if it's of type Employee

80
00:03:44.980 --> 00:03:48.130
because that is not a type JavaScript knows,

81
00:03:48.130 --> 00:03:49.840
and keep in mind that this check

82
00:03:49.840 --> 00:03:52.560
runs at runtime and uses JavaScript,

83
00:03:52.560 --> 00:03:56.190
so we can only compare the type typeof gets us

84
00:03:56.190 --> 00:03:58.010
with the types JavaScript knows,

85
00:03:58.010 --> 00:04:01.920
and that would be object, string, number,

86
00:04:01.920 --> 00:04:05.610
and boolean it's on, and our custom type is not part of it.

87
00:04:05.610 --> 00:04:07.950
That only exists in TypeScript world,

88
00:04:07.950 --> 00:04:11.020
not in the compiled JavaScript world.

89
00:04:11.020 --> 00:04:13.990
So, therefore, this also does not work.

90
00:04:13.990 --> 00:04:17.960
Now here, our workaround is to use a different if check.

91
00:04:17.960 --> 00:04:20.240
We know we want to access privileges,

92
00:04:20.240 --> 00:04:25.240
so we could check if employee privileges is a thing.

93
00:04:26.400 --> 00:04:28.560
The problem just is TypeScript doesn't allow us

94
00:04:28.560 --> 00:04:30.690
to access this property at all,

95
00:04:30.690 --> 00:04:33.550
not even to check it like this,

96
00:04:33.550 --> 00:04:36.200
but there is a different way for us to check it.

97
00:04:36.200 --> 00:04:40.000
We can use the in keywords that's built into JavaScript.

98
00:04:40.000 --> 00:04:43.120
We can check if privileges,

99
00:04:43.120 --> 00:04:46.690
now written as a string, is in emp.

100
00:04:46.690 --> 00:04:49.130
This is JavaScript code that allows to check

101
00:04:49.130 --> 00:04:53.480
if this exists as a property on employee,

102
00:04:53.480 --> 00:04:58.380
and if that is the case, TypeScript detects this check here,

103
00:04:58.380 --> 00:05:01.200
and, therefore, allows us to access this property

104
00:05:01.200 --> 00:05:04.543
inside of this if check here.

105
00:05:05.852 --> 00:05:08.380
And we can repeat that for the startDate,

106
00:05:08.380 --> 00:05:12.240
and, therefore, check if startDate is a property here,

107
00:05:12.240 --> 00:05:15.710
and we can, therefore, also output this

108
00:05:16.970 --> 00:05:18.730
in this if check.

109
00:05:18.730 --> 00:05:23.687
So now with that, if we call printEmployeeInformation,

110
00:05:24.650 --> 00:05:28.363
and we pass in that one employee we created, e1,

111
00:05:31.410 --> 00:05:34.860
you'll see that this compiled without errors and, indeed,

112
00:05:34.860 --> 00:05:37.430
outputs the privileges and, well,

113
00:05:37.430 --> 00:05:40.730
also here the data should just also say

114
00:05:40.730 --> 00:05:42.530
Start Date here, of course.

115
00:05:42.530 --> 00:05:45.820
But with that, it gives us the output we would expect.

116
00:05:45.820 --> 00:05:48.590
And on the other end, if we pass in an employee

117
00:05:48.590 --> 00:05:50.950
which does not have all these fields,

118
00:05:50.950 --> 00:05:53.090
for example, if we create one on the fly

119
00:05:53.090 --> 00:05:56.383
which only has a startDate but no privileges,

120
00:05:57.850 --> 00:06:00.370
then there's all the works and compiled without errors,

121
00:06:00.370 --> 00:06:03.160
and we simply don't print anything about the privileges

122
00:06:03.160 --> 00:06:05.723
because of this if check we have in there.

123
00:06:07.650 --> 00:06:09.800
When working with classes,

124
00:06:09.800 --> 00:06:13.070
you can also use another type of type guard,

125
00:06:13.070 --> 00:06:16.520
and that would be the instanceof type guard.

126
00:06:16.520 --> 00:06:21.460
Let's say down there we have a class, Car,

127
00:06:21.460 --> 00:06:23.800
and that has a drive method

128
00:06:23.800 --> 00:06:26.523
where it just say console.log Driving,

129
00:06:28.480 --> 00:06:31.750
and we have another class, Truck,

130
00:06:31.750 --> 00:06:34.623
which also has a drive method,

131
00:06:35.840 --> 00:06:38.280
or maybe you say Driving a truck,

132
00:06:38.280 --> 00:06:40.250
but we do have to say method name.

133
00:06:40.250 --> 00:06:43.980
And where we also have a loadCargo method,

134
00:06:43.980 --> 00:06:46.570
where we have an amount, which is a number,

135
00:06:46.570 --> 00:06:49.040
and then here I'm just having some dummy code

136
00:06:49.040 --> 00:06:53.570
where I say, "Loading cargo plus amount."

137
00:06:53.570 --> 00:06:57.323
Something like that, oops, amount, something like that.

138
00:06:58.170 --> 00:06:59.320
So now we have two classes,

139
00:06:59.320 --> 00:07:02.090
which, of course, have some similarity, the drive method,

140
00:07:02.090 --> 00:07:03.890
but also have a difference.

141
00:07:03.890 --> 00:07:08.200
Now, again, we can create a union type here, Vehicle,

142
00:07:08.200 --> 00:07:13.030
which is either a Car or a Truck, and now, let's say,

143
00:07:13.030 --> 00:07:18.030
we create a new vehicle, v1, which is a new Car,

144
00:07:18.050 --> 00:07:21.873
and another one, v2, which is a new Truck.

145
00:07:23.890 --> 00:07:26.443
Now I have a function, useVehicle,

146
00:07:27.700 --> 00:07:29.780
which just expects to get a vehicle,

147
00:07:29.780 --> 00:07:31.350
which should be of type vehicle,

148
00:07:31.350 --> 00:07:34.203
so which should be of this union type.

149
00:07:35.420 --> 00:07:37.490
So here we get a vehicle, and now, let's say,

150
00:07:37.490 --> 00:07:40.040
our goal here is to to do everything we can do

151
00:07:40.040 --> 00:07:43.400
with vehicles: drive and loadCargo.

152
00:07:43.400 --> 00:07:45.420
So, of course, we can call vehicle.drive

153
00:07:45.420 --> 00:07:50.010
because that always exists, but for vehicle.loadCargo,

154
00:07:50.010 --> 00:07:52.720
we have a problem because only a truck has that.

155
00:07:52.720 --> 00:07:56.440
A car doesn't have it, so this won't work.

156
00:07:56.440 --> 00:07:59.513
Now we can, of course, again, check if loadCargo

157
00:08:00.760 --> 00:08:05.760
is in vehicle, and if that is the case, we can use it.

158
00:08:06.430 --> 00:08:09.480
At least if I fix that typo here.

159
00:08:09.480 --> 00:08:13.230
So we now save that and we then call useVehicle

160
00:08:13.230 --> 00:08:17.400
and pass in v1, and then we call it again with v2,

161
00:08:17.400 --> 00:08:21.680
and I save all of that, it compiles, and it works.

162
00:08:21.680 --> 00:08:23.340
Now that is one way of doing it.

163
00:08:23.340 --> 00:08:26.580
An alternative way, which might be a bit more elegant

164
00:08:26.580 --> 00:08:28.600
because it also eliminates the risk

165
00:08:28.600 --> 00:08:31.920
of you mistyping in this property string here,

166
00:08:31.920 --> 00:08:34.080
is that you use instanceof.

167
00:08:34.080 --> 00:08:39.080
We can check if vehicle is an instanceof Truck.

168
00:08:39.360 --> 00:08:42.510
If that's the case, we know it will have a loadCargo method.

169
00:08:42.510 --> 00:08:45.230
An instanceof is a normal operator

170
00:08:45.230 --> 00:08:47.430
built into vanilla JavaScript,

171
00:08:47.430 --> 00:08:49.280
so this is no TypeScript code.

172
00:08:49.280 --> 00:08:52.250
Just like typeof, this is part of JavaScript

173
00:08:52.250 --> 00:08:54.290
and it executes at runtime.

174
00:08:54.290 --> 00:08:56.780
JavaScript doesn't know the Truck type,

175
00:08:56.780 --> 00:08:59.330
but it knows constructor functions,

176
00:08:59.330 --> 00:09:01.490
and classes in the end are just translated

177
00:09:01.490 --> 00:09:03.400
to constructor functions,

178
00:09:03.400 --> 00:09:06.580
and TypeScript is then able to find out if vehicle

179
00:09:06.580 --> 00:09:10.290
was created based on the Truck constructor function.

180
00:09:10.290 --> 00:09:11.970
So since classes are compiled

181
00:09:11.970 --> 00:09:15.450
to something JavaScript understands, constructor functions,

182
00:09:15.450 --> 00:09:17.210
it is able to use that.

183
00:09:17.210 --> 00:09:20.390
If we would be using a interface here instead of a class,

184
00:09:20.390 --> 00:09:21.223
and, therefore, of course,

185
00:09:21.223 --> 00:09:22.950
we couldn't have the implementation in here,

186
00:09:22.950 --> 00:09:25.130
but we'll do that when we create a object

187
00:09:25.130 --> 00:09:27.300
with the object literal notation,

188
00:09:27.300 --> 00:09:30.940
then we could not use instanceof because interfaces,

189
00:09:30.940 --> 00:09:34.370
as you learned, are not compiled to any JavaScript code,

190
00:09:34.370 --> 00:09:37.160
and, therefore, we can't use them at runtime.

191
00:09:37.160 --> 00:09:40.010
For classes we can do that because JavaScript

192
00:09:40.010 --> 00:09:42.290
supports classes and constructor functions,

193
00:09:42.290 --> 00:09:44.500
and with instanceof, you can then find out

194
00:09:44.500 --> 00:09:47.660
if some object is based on that class.

195
00:09:47.660 --> 00:09:51.850
If we know if it is, then we'll have a loadCargo function.

196
00:09:51.850 --> 00:09:53.480
So these are type guards.

197
00:09:53.480 --> 00:09:55.890
In the end, type guards is just a term

198
00:09:55.890 --> 00:09:59.470
that describes the idea or approach

199
00:09:59.470 --> 00:10:02.980
of checking if a certain property

200
00:10:02.980 --> 00:10:06.310
or method exists before you try to use it,

201
00:10:06.310 --> 00:10:08.470
or if you can do something with the type

202
00:10:08.470 --> 00:10:10.220
before you try to use it.

203
00:10:10.220 --> 00:10:15.113
For objects, that can be done with instanceof or with in,

204
00:10:16.140 --> 00:10:19.780
for other types, you can use typeof,

205
00:10:19.780 --> 00:10:22.280
and, therefore, you now have all the flexibility

206
00:10:22.280 --> 00:10:25.090
to use the flexibility union types give you

207
00:10:25.090 --> 00:10:29.050
and still write code that then does one thing or the other

208
00:10:29.050 --> 00:10:32.573
based on the exact type you're getting at runtime.

