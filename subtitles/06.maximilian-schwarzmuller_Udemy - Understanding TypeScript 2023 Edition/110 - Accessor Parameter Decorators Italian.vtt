WEBVTT

00:02.210 --> 00:03.450
Istruttore maschile: Ora,

00:03.450 --> 00:06.170
oltre alle proprietà, si possono aggiungere decoratori

00:06.170 --> 00:09.200
agli accessiori e qui creerò una nuova funzione decoratore,

00:09.200 --> 00:11.660
perché ora riceverà argomenti liberi.

00:11.660 --> 00:16.430
Log2, otterrà anche il target, che ancora una volta è il prototipo, se

00:16.430 --> 00:18.330
abbiamo a che fare con un accessor

00:18.330 --> 00:21.290
di istanza, o se abbiamo a che fare con uno statico,

00:21.290 --> 00:23.360
sarà la funzione costruttore,

00:23.360 --> 00:24.960
quindi non sappiamo se saremo

00:24.960 --> 00:27.290
di tipo any.

00:27.290 --> 00:32.290
Poi avremo il nome del membro con cui abbiamo a che fare.

00:32.410 --> 00:35.030
Quindi il nome dell'accessor alla fine.

00:35.030 --> 00:38.683
E avremo anche il descrittore della proprietà, che sarà

00:39.580 --> 00:42.030
di tipo property descriptor.

00:42.030 --> 00:44.600
È il tipo integrato in TypeScript.

00:44.600 --> 00:49.600
Quindi, registriamo il decoratore dell'accessor e poi registriamo

00:50.030 --> 00:54.210
anche il target della console, quindi forse nuove righe

00:54.210 --> 00:56.470
per renderle più leggibili

00:56.470 --> 01:01.470
nell'output, il nome e anche il descrittore.

01:01.720 --> 01:05.890
Ora aggiungiamo log2 al setter in questo modo e vediamo

01:05.890 --> 01:07.350
cosa otteniamo.

01:07.350 --> 01:10.733
Se lo salviamo, vediamo che in basso c'è il decoratore

01:10.733 --> 01:14.090
di accesso che viene eseguito qui.

01:14.090 --> 01:19.090
Abbiamo di nuovo il nostro prototipo, lo stesso di un buff per la proprietà.

01:19.320 --> 01:23.570
Poi abbiamo il nome del nostro accessorio, in questo caso il prezzo.

01:23.570 --> 01:24.900
Non è un prezzo di sottolineatura,

01:24.900 --> 01:27.890
quindi non è la proprietà con cui si confronta internamente.

01:27.890 --> 01:30.570
invece del nome dell'accessorio stesso.

01:30.570 --> 01:33.630
E qui abbiamo un descrittore di proprietà in cui vediamo

01:33.630 --> 01:36.240
che una funzione setter è definita, ad esempio,

01:36.240 --> 01:37.600
mentre una funzione getter

01:37.600 --> 01:41.990
non lo è, perché per il prezzo ho solo un setter, nessun getter.

01:41.990 --> 01:44.320
E vediamo che non è enumerabile, ma che

01:44.320 --> 01:45.680
è configurabile.

01:45.680 --> 01:47.810
In modo da poter modificare questa

01:47.810 --> 01:51.000
definizione, ad esempio cancellarla e così via.

01:51.000 --> 01:54.520
Tutto questo esiste e questo è il modo in cui possiamo aggiungere un decoratore

01:54.520 --> 01:56.650
a un accessor e ciò a cui possiamo accedere all'interno

01:56.650 --> 01:58.920
di questo decoratore.

01:58.920 --> 02:00.910
Ora, oltre alle proprietà e agli accessori,

02:00.910 --> 02:04.350
abbiamo anche i metodi e possiamo aggiungere decoratori ai metodi.

02:04.350 --> 02:09.350
Quindi aggiungerò Log3 e lo aggiungerò al mio metodo laggiù per ottenere

02:09.430 --> 02:11.970
il prezzo con il testo.

02:11.970 --> 02:13.220
Ora la domanda è:

02:13.220 --> 02:17.323
quali argomenti riceve un tale decoratore di metodi?

02:18.180 --> 02:22.230
Un decoratore di metodi riceve anche argomenti liberi,

02:22.230 --> 02:25.520
il cui obiettivo, se si tratta di un metodo di istanza,

02:25.520 --> 02:28.420
è il prototipo dell'oggetto.

02:28.420 --> 02:31.150
Se si tratta di un metodo statico, la funzione

02:31.150 --> 02:34.993
costruttore come prima, poi il nome del metodo, quindi

02:36.450 --> 02:39.380
una stringa o un simbolo.

02:39.380 --> 02:44.380
E anche il descrittore alla fine, il descrittore della proprietà.

02:44.490 --> 02:46.140
Questi sono gli argomenti liberi che otteniamo

02:46.140 --> 02:48.110
qui e, come vedete, sono gli stessi argomenti del

02:48.110 --> 02:49.410
nostro accessor.

02:49.410 --> 02:51.630
Quindi potremmo anche riutilizzare

02:51.630 --> 02:54.340
questo, ma ne creerò uno nuovo, in modo da

02:54.340 --> 02:57.483
poter stampare il decoratore del metodo.

02:59.020 --> 03:00.840
Ora, se ho salvato questo, questo viene

03:01.980 --> 03:04.410
eseguito e si vede che il nostro decoratore di

03:04.410 --> 03:07.880
metodi viene eseguito e poi si ottiene il nostro prototipo, lo stesso

03:07.880 --> 03:09.380
oggetto di prima.

03:09.380 --> 03:11.310
Qui otteniamo il nome del metodo

03:11.310 --> 03:14.700
e qui otteniamo il descrittore di questo metodo.

03:14.700 --> 03:17.440
Quindi il comportamento è lo stesso di prima, solo che il descrittore

03:17.440 --> 03:19.400
è un po' diverso, poiché si tratta di un descrittore

03:19.400 --> 03:20.950
di metodo e non di un descrittore di

03:20.950 --> 03:22.550
accesso.

03:22.550 --> 03:25.720
Abbiamo un valore e una proprietà scrivibile.

03:25.720 --> 03:27.750
In precedenza, nel descrittore degli accessi,

03:27.750 --> 03:28.860
avevamo get e set.

03:28.860 --> 03:30.910
Ma questa è solo una differenza di java script,

03:30.910 --> 03:33.088
niente di specifico di TypeScript.

03:33.088 --> 03:38.088
Quindi, abbiamo la nostra terza funzione decoratrice che abbiamo

03:38.150 --> 03:40.070
aggiunto al metodo.

03:40.070 --> 03:43.390
L'ultimo decoratore che possiamo aggiungere è quello di un parametro.

03:43.390 --> 03:45.260
Quindi, facciamolo ora.

03:45.260 --> 03:47.550
A tale scopo, creerò un'altra funzione,

03:47.550 --> 03:51.269
Log4, e voglio aggiungere Log4 a questo parametro, tax,

03:51.269 --> 03:53.660
e naturalmente si può aggiungere a

03:53.660 --> 03:57.130
tutti i parametri che si ottengono.

03:57.130 --> 03:59.560
Non è necessario, ma si possono aggiungere indipendentemente

03:59.560 --> 04:02.990
a qualsiasi parametro a cui si voglia aggiungere un decoratore.

04:02.990 --> 04:06.419
Ora, cosa riceve un decoratore di parametri come argomenti?

04:06.419 --> 04:10.790
L'obiettivo è lo stesso di prima.

04:10.790 --> 04:12.520
Il prossimo argomento che otteniamo

04:12.520 --> 04:14.100
è il nome, e non il nome del parametro,

04:14.100 --> 04:17.310
ma il nome del metodo in cui abbiamo usato questo parametro.

04:17.310 --> 04:20.530
Quindi, fondamentalmente, lo stesso del decoratore di metodi finora utilizzato.

04:20.530 --> 04:22.170
Ma l'ultimo argomento è diverso.

04:22.170 --> 04:24.250
Non si tratta più del descrittore della

04:24.250 --> 04:28.380
proprietà, ma della posizione di questo argomento, quindi del numero

04:28.380 --> 04:30.100
dell'argomento.

04:30.100 --> 04:32.763
In questo caso, ad esempio, questo sarebbe il primo argomento.

04:35.310 --> 04:38.670
Quindi, di nuovo, copiamoli qui e mettiamoli

04:38.670 --> 04:43.550
tutti nel decoratore di parametri Log4.

04:43.550 --> 04:45.410
E facciamo uscire la posizione anche qui,

04:45.410 --> 04:47.170
in modo da poter vedere cosa c'è dentro.

04:47.170 --> 04:50.960
Se ora lo salviamo, vediamo il nostro decoratore di parametri lassù, non proprio

04:50.960 --> 04:53.480
l'ultimo output perché l'ordine di esecuzione è diverso,

04:53.480 --> 04:55.630
ma vediamo il nostro decoratore di parametri

04:55.630 --> 04:57.180
qui e poi qui.

04:57.180 --> 04:59.530
Abbiamo il prototipo di prima.

04:59.530 --> 05:00.860
Abbiamo il nome del metodo

05:00.860 --> 05:02.190
in cui abbiamo usato questo

05:02.190 --> 05:04.770
parametro e poi l'indice di quell'argomento,

05:04.770 --> 05:06.240
che parte da zero, quindi il

05:06.240 --> 05:09.070
primo argomento ha un numero pari a zero, un indice pari

05:09.070 --> 05:10.360
a zero, e questo è il nostro

05:10.360 --> 05:12.740
decoratore di parametri.

05:12.740 --> 05:14.920
Questi sono tutti i punti in cui possiamo aggiungere

05:14.920 --> 05:16.370
decoratori e TypeScript e possiamo

05:16.370 --> 05:18.570
fare varie cose con essi.

05:18.570 --> 05:20.450
In questo modulo vi mostrerò

05:20.450 --> 05:21.660
un paio di esempi

05:21.660 --> 05:24.813
e anche librerie o framework che fanno

05:24.813 --> 05:28.380
largo uso di decoratori.

05:28.380 --> 05:30.550
E vi mostrerò cosa fanno con i decoratori

05:30.550 --> 05:34.583
per darvi un'idea del potere che possono avere i decoratori.
