WEBVTT

00:02.450 --> 00:05.030
Instructeur: Laten we nu even afstand nemen van functie-overloads

00:05.030 --> 00:09.010
en laat me een andere zeer fraaie functie introduceren.

00:09.010 --> 00:13.350
En dat is optioneel ketenen.

00:13.350 --> 00:16.720
Laten we zeggen dat je een toepassing hebt waarbij

00:16.720 --> 00:21.603
je gegevens krijgt van een backend uit een database of uit een andere

00:21.603 --> 00:26.350
bron waarbij je niet met zekerheid weet of in een object een bepaalde

00:26.350 --> 00:29.500
eigenschap is gedefinieerd.

00:29.500 --> 00:33.920
Laten we zeggen dat we fetchedUserData hebben en fetchedUserData kan een object zijn

00:33.920 --> 00:36.380
over een gebruiker die we hebben opgehaald.

00:36.380 --> 00:39.705
Daar hebben we misschien een ID en een naam

00:39.705 --> 00:44.705
Max en we kunnen ook een andere eigenschap job verwachten

00:45.730 --> 00:50.550
die een object is met een titel en die dan ook een beschrijving

00:50.550 --> 00:53.950
heeft, mijn eigen bedrijf.

00:53.950 --> 00:56.900
Als we zulke gegevens krijgen, kunnen we er natuurlijk mee werken.

00:56.900 --> 01:00.150
Nu kun je meer complexe dingen doen,

01:00.150 --> 01:03.940
maar laten we zeggen dat ik alleen de functietitel

01:03.940 --> 01:06.871
upload.

01:06.871 --> 01:09.940
Als we dat opslaan met onze ontwikkelingsserver

01:09.940 --> 01:12.880
aan de gang en de compilatie in de wachtstand,

01:12.880 --> 01:14.420
krijg ik hier CEO.

01:14.420 --> 01:17.395
Maar als we dit ophalen van een backend,

01:17.395 --> 01:22.395
halen we om welke reden dan ook misschien niet alle gegevens

01:23.080 --> 01:27.690
op die we nodig hebben, misschien zijn sommige gegevens

01:27.690 --> 01:30.490
niet ingesteld op dit punt.

01:30.490 --> 01:34.730
In grotere complexere toepassingen werk je zeker soms met gestructureerde

01:34.730 --> 01:39.240
met geneste gegevens waarbij je niet met zekerheid weet of een eigenschap

01:39.240 --> 01:42.650
op een object is ingesteld of dat het misschien ongedefinieerd

01:42.650 --> 01:45.340
is.

01:45.340 --> 01:49.680
Dus laten we hier zeggen dat job niet bestaat, om welke reden dan ook, we halen

01:49.680 --> 01:53.180
het niet op, hier krijg ik natuurlijk een foutmelding TypeScript

01:53.180 --> 01:55.930
klaagt hierover omdat het weet dat er nu geen job

01:55.930 --> 01:57.843
eigenschap is.

01:57.843 --> 02:01.347
Het probleem is dat het voor deze gegevens niet weet of

02:01.347 --> 02:05.660
het gegevens zijn die we ophalen uit een bestand dat niet gecontroleerd

02:05.660 --> 02:09.720
wordt door TypeScript of zoals ik net zei of we dit misschien ophalen

02:09.720 --> 02:12.530
uit de backend en we niet met zekerheid weten

02:12.530 --> 02:15.550
welke gegevens terugkomen.

02:15.550 --> 02:18.150
Als je niet weet of dat gedefinieerd is of niet, wat we

02:18.150 --> 02:21.730
in gewone JavaScript kunnen doen is proberen toegang te krijgen tot job

02:21.730 --> 02:25.098
en als dat werkt gaan we verder en krijgen we toegang tot titel.

02:25.098 --> 02:29.450
Dit is de JavaScript-manier om te controleren of iets bestaat voordat

02:29.450 --> 02:33.520
we vervolgens dieper in dat potentiÃ«le object duiken en als dat ongedefinieerd

02:33.520 --> 02:37.110
is, wordt deze code nooit uitgevoerd en hebben we dus een bredere

02:37.110 --> 02:39.400
run time error.

02:39.400 --> 02:42.410
Ook hier weet TypeScript natuurlijk dat de opdracht

02:42.410 --> 02:45.180
niet bestaat, maar als deze zou worden opgehaald

02:45.180 --> 02:48.470
uit een bron waar TypeScript niet in kan kijken, zoals het

02:48.470 --> 02:52.910
resultaat van een HTTP-verzoek, zou dit de veilige manier zijn om run time errors

02:52.910 --> 02:54.920
in JavaScript te vermijden.

02:54.920 --> 02:58.110
Als dit bestaat, krijgen we dezelfde uitvoer als voorheen.

02:58.110 --> 03:01.400
Als het niet bestaat, krijgen we tenminste geen run

03:01.400 --> 03:02.233
time error.

03:02.233 --> 03:07.020
Met TypeScript heb je eigenlijk een mooiere manier om dat te doen.

03:07.020 --> 03:10.520
Je hebt de optionele kettingoperator.

03:10.520 --> 03:15.320
Je kunt een vraagteken zetten achter het ding waarvan je niet zeker weet of het

03:15.320 --> 03:16.880
gedefinieerd is of niet.

03:16.880 --> 03:21.600
Tenminste als u TypeScript versie 3 gebruikt. 7 of hoger.

03:21.600 --> 03:24.770
Hier houdt mijn IDE hier niet van, maar dit is dan een ondersteunde

03:24.770 --> 03:26.300
syntaxis.

03:26.300 --> 03:30.370
Dit vertelt TypeScript of dit bestaat, als het bestaat toegang tot job en dus

03:30.370 --> 03:33.450
kunnen we hier dat vraagteken toevoegen en dus alleen toegang

03:33.450 --> 03:36.314
krijgen tot titel als job gedefinieerd is.

03:36.314 --> 03:39.300
Als we dat doen krijg ik nog steeds een foutmelding als ik het

03:39.300 --> 03:42.490
probeer te compileren, omdat TypeScript nog steeds met zekerheid

03:42.490 --> 03:44.510
weet dat de opdracht niet bestaat.

03:44.510 --> 03:47.370
Maar als het dat niet zou weten of als ik dit in commentaar

03:47.370 --> 03:51.840
geef, compileert het prima en wordt alles uitgevoerd zoals voorheen.

03:51.840 --> 03:56.400
Dus deze optionele chaining operator hier helpt ons veilig toegang te krijgen

03:56.400 --> 04:00.730
tot geneste eigenschappen en geneste objecten in onze objectgegevens

04:00.730 --> 04:03.610
en als het ding voor het vraagteken ongedefinieerd

04:03.610 --> 04:07.061
is, zal het geen toegang krijgen tot het ding daarna en daarom

04:07.061 --> 04:12.420
geen runtime error geven, maar zal het gewoon niet doorgaan.

04:12.420 --> 04:15.210
Dus achter de schermen wordt dit in feite gecompileerd tot een if-check

04:15.210 --> 04:18.380
die controleert of dat bestaat voordat het probeert hier toegang toe te

04:18.380 --> 04:19.213
krijgen.
