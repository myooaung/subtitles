WEBVTT

00:02.130 --> 00:02.963
Instructeur: Dus we hebben

00:02.963 --> 00:05.180
een paar van de kerntypes die TypeScript kent behandeld.

00:05.180 --> 00:06.590
Laten we verder gaan.

00:06.590 --> 00:09.140
Daarvoor hernoem ik app. ts hier naar objs-arrays-enums,

00:09.140 --> 00:12.750
of hoe je het ook wilt noemen, zodat we nog steeds dat bestand hebben, maar

00:12.750 --> 00:17.130
ik maak een gloednieuwe app.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
bestand, zodat we weer een leeg bestand

00:18.860 --> 00:20.500
hebben waarin we kunnen werken.

00:20.500 --> 00:22.550
In dit bestand wil ik nu duiken in een

00:22.550 --> 00:25.790
ander interessant type dat je in TypeScript tegenkomt.

00:25.790 --> 00:28.640
En dat is het vakbondstype.

00:28.640 --> 00:30.190
Wat is dat?

00:30.190 --> 00:33.000
Laten we teruggaan naar onze add-functie, die we eerder

00:33.000 --> 00:34.490
schreven, ik zal die kopiëren

00:34.490 --> 00:37.270
en verplaatsen naar app. ts.

00:37.270 --> 00:39.190
Weg met dat commentaar hier, en hier op toevoegen,

00:39.190 --> 00:42.940
laten we de basis sluiten. zodat we van die fout

00:42.940 --> 00:44.170
afkomen.

00:44.170 --> 00:47.970
Hier in add, wil ik nu flexibeler zijn wat betreft

00:47.970 --> 00:49.920
wat we hier accepteren.

00:49.920 --> 00:52.570
Ik zal ook showResult en phrase wegdoen,

00:52.570 --> 00:54.370
dat heb ik niet nodig.

00:54.370 --> 00:55.690
En het enige wat ik wil doen

00:55.690 --> 00:58.590
is een resultaat berekenen en dat teruggeven.

00:58.590 --> 01:01.960
Maar ik wil flexibeler zijn wat betreft de ingangen.

01:01.960 --> 01:06.045
Voorheen zorgden we ervoor dat we alleen met getallen werkten.

01:06.045 --> 01:09.357
Laten we nu zeggen dat we deze combinatie daadwerkelijk een naam

01:09.357 --> 01:13.190
geven en dat hij zowel met getallen als met tekenreeksen moet werken.

01:13.190 --> 01:15.710
Want het blijkt dat we zowel getallen als strings

01:15.710 --> 01:18.595
kunnen combineren met deze plus operator, het enige

01:18.595 --> 01:21.650
verschil is dat we in het ene scenario een getal als resultaat

01:21.650 --> 01:24.030
krijgen, in het andere scenario krijgen

01:24.030 --> 01:27.120
we een aaneengeschakelde string, zoals we eigenlijk

01:27.120 --> 01:30.150
al vroeg in deze module zagen.

01:30.150 --> 01:32.040
Maar nu wil ik dit gedrag toestaan, omdat

01:32.040 --> 01:33.950
je een toepassing zou kunnen hebben waarin

01:33.950 --> 01:36.740
je een flexibele combinatiefunctie wilt hebben die wel

01:36.740 --> 01:38.963
werkt met getallen en tekenreeksen.

01:39.830 --> 01:42.360
Daarom zal ik ook deze input1

01:42.360 --> 01:47.340
hier noemen, en deze input2, en deze twee nu combineren.

01:47.340 --> 01:49.740
Maar we hebben natuurlijk een probleem,

01:49.740 --> 01:53.180
nu stellen we beide parameters in op getallen.

01:53.180 --> 01:56.050
Dit betekent dat we deze functie kunnen aanroepen, zolang

01:56.050 --> 01:58.190
we maar met getallen willen werken.

01:58.190 --> 01:59.130
Laten we zeggen dat we daar

01:59.130 --> 02:01.640
beneden een nieuwe constante creëren, combinedAges.

02:02.931 --> 02:04.690
En daar noem ik combineren

02:04.690 --> 02:09.602
en doorgeven in 30 en 26 hier als leeftijden in welke toepassing

02:09.602 --> 02:12.000
we ook bouwen.

02:12.000 --> 02:15.014
Nog een na console log gecombineerdAges, nou het zou

02:15.014 --> 02:17.240
niet al te verrassend moeten zijn dat als

02:17.240 --> 02:19.830
we nu dit bestand hier compileren, en we dan deze

02:19.830 --> 02:22.360
pagina opnieuw laden, we 56 krijgen.

02:22.360 --> 02:24.690
Dus dit werkt, we krijgen dit nummer.

02:24.690 --> 02:26.710
Maar we hebben natuurlijk een probleem

02:26.710 --> 02:28.838
als we hier een string proberen te maken.

02:28.838 --> 02:31.610
CombinedNames, bijvoorbeeld.

02:31.610 --> 02:36.033
Als ik hier Max en Anna probeer te combineren, wel, dan krijgen we hier

02:37.230 --> 02:39.630
meteen een foutmelding dat Max niet

02:39.630 --> 02:42.320
toewijsbaar is aan type nummer omdat dit

02:42.320 --> 02:44.350
natuurlijk een string is.

02:44.350 --> 02:45.790
Nu kunnen we dit natuurlijk veranderen

02:45.790 --> 02:47.750
om strings in plaats van getallen te accepteren,

02:47.750 --> 02:50.130
maar nu zou de eerste functieaanroep mislukken.

02:50.130 --> 02:52.750
En dat is waar vakbondstypes ons kunnen helpen.

02:52.750 --> 02:55.692
Als we ergens in onze toepassing een parameter

02:55.692 --> 02:58.810
van een functie hebben, of een constante of een variabele

02:58.810 --> 03:01.700
die we ergens gebruiken, waar we twee verschillende

03:01.700 --> 03:05.030
soorten waarden accepteren.

03:05.030 --> 03:07.410
Nou dan kan een vakbondstype ons helpen.

03:07.410 --> 03:09.800
Om TypeScript te vertellen dat

03:09.800 --> 03:12.690
we genoegen nemen met een getal of een

03:12.690 --> 03:14.220
string, gebruiken

03:14.220 --> 03:17.710
we hier getal en dan het pipe symbool, en het

03:17.710 --> 03:20.660
andere type accepteren we ook.

03:20.660 --> 03:22.340
En je kunt meer dan twee typen hebben,

03:22.340 --> 03:25.220
je kunt hier zoveel typen accepteren als je nodig hebt.

03:25.220 --> 03:27.050
Dus hier heb ik er maar twee nodig,

03:27.050 --> 03:28.880
en dat is de veroorzaakte typetoewijzing

03:28.880 --> 03:31.720
waar ik voor ga, nummer of string.

03:31.720 --> 03:33.690
Nu krijg ik hier een fout, dat de plus

03:33.690 --> 03:35.930
operator niet kan worden toegepast

03:35.930 --> 03:39.120
op types string of nummer en string of nummer.

03:39.120 --> 03:41.500
Dat is eigenlijk niet helemaal correct, dit zou

03:41.500 --> 03:44.350
moeten werken, want we kunnen de plus operator zowel met

03:44.350 --> 03:46.670
getallen als met strings gebruiken.

03:46.670 --> 03:49.600
Maar TypeScript ziet alleen dat we hier een union type

03:49.600 --> 03:52.540
hebben, en het analyseert niet wat er in het union type

03:52.540 --> 03:56.010
staat, het ziet alleen, "Oké, je verwacht meerdere types.

03:56.010 --> 03:57.530
Misschien omvat dat types waar

03:57.530 --> 03:59.460
ik de plus operator niet kan gebruiken,

03:59.460 --> 04:01.640
vandaar dat ik hier zal klagen. Gelukkig kunnen we dat probleem omzeilen.

04:01.640 --> 04:05.410
We kunnen onze runtime typecontrole hier toevoegen

04:05.410 --> 04:07.910
en kijken of input1 typeof dat gelijk

04:07.910 --> 04:11.240
is aan getal en of typeof input2 gelijk is aan getal,

04:12.750 --> 04:15.170
en dan deze berekening daarheen verplaatsen,

04:16.530 --> 04:21.283
nu nog één verbetering, laten we resultaat maken als variabele aan

04:24.100 --> 04:28.510
het begin van die if-controle, vanwege lock scoping, zodat dit

04:28.510 --> 04:33.880
een variabele is die beschikbaar is in de hele functie, en dan gewoon een nieuwe

04:33.880 --> 04:37.873
waarde daarin toewijzen.

04:37.873 --> 04:40.310
Dus nu controleren we of we wel twee getallen hebben.

04:40.310 --> 04:42.818
En daarom weet TypeScript dat hier input1

04:42.818 --> 04:45.890
en input2 allebei getallen zullen zijn.

04:45.890 --> 04:49.790
Laten we nu een andere controle toevoegen.

04:49.790 --> 04:53.900
En daar kunnen we resultaat gelijk stellen aan input1. tostring, die dit expliciet omzet

04:53.900 --> 04:56.913
in een string,

04:58.550 --> 05:00.570
en input2. tostring.

05:00.570 --> 05:02.880
En dit is dan ook prima voor TypeScript

05:02.880 --> 05:04.160
en JavaScript, omdat we twee strings

05:04.160 --> 05:05.700
aan elkaar kunnen rijgen.

05:05.700 --> 05:08.220
Dus nu hebben we bijna dezelfde berekening, maar

05:08.220 --> 05:10.800
we hebben duidelijk gemaakt dat we hier altijd met

05:10.800 --> 05:12.110
getallen werken, hier werken

05:12.110 --> 05:13.590
we altijd met tekenreeksen,

05:13.590 --> 05:15.730
en dan geven we het resultaat terug.

05:15.730 --> 05:17.490
En als we nu de gecombineerde

05:17.490 --> 05:20.870
namen daar beneden loggen, en we compileren dit bestand,

05:20.870 --> 05:25.350
dan zullen we zien dat zodra we onze pagina opnieuw bezoeken, we de gecombineerde

05:25.350 --> 05:27.210
getallen daar hebben, die eenvoudig

05:27.210 --> 05:29.278
bij elkaar zijn opgeteld en dus krijgen

05:29.278 --> 05:35.090
we een getal als resultaat, en twee gecombineerde namen hier.

05:35.090 --> 05:36.850
Dus dit is hoe we union-types kunnen

05:36.850 --> 05:40.830
gebruiken om flexibeler te zijn met betrekking tot wat we doen in een functie,

05:40.830 --> 05:43.770
bijvoorbeeld, of ergens anders in onze code.

05:43.770 --> 05:45.920
Deze extra runtime typecontrole zal niet

05:45.920 --> 05:49.520
altijd nodig zijn wanneer je werkt met union-types, maar vaak wel,

05:49.520 --> 05:51.230
omdat je met union-types flexibeler

05:51.230 --> 05:54.090
kunt zijn in bijvoorbeeld de parameters die je accepteert,

05:54.090 --> 05:56.350
maar dan kun je verschillende logica in je

05:56.350 --> 05:58.170
functie hebben op basis van welk

05:58.170 --> 06:00.940
exact type je krijgt.

06:00.940 --> 06:03.730
Zodat je functie met meerdere typen waarden

06:03.730 --> 06:05.640
kan werken, maar dat hij dan

06:05.640 --> 06:07.810
iets anders doet, afhankelijk

06:07.810 --> 06:10.320
van het type dat je krijgt.

06:10.320 --> 06:12.410
Zo'n runtime-controle kan dus vaak

06:12.410 --> 06:15.270
nodig zijn bij het werken met union-types, maar

06:15.270 --> 06:16.700
niet altijd.

06:16.700 --> 06:18.490
U zult in TypeScript-programma's

06:18.490 --> 06:20.900
zeker ook situaties tegenkomen waarin u een union-type

06:20.900 --> 06:24.060
kunt gebruiken zonder een runtime typecontrole.

06:24.060 --> 06:25.870
Het hangt echt af van de logica die je schrijft.
