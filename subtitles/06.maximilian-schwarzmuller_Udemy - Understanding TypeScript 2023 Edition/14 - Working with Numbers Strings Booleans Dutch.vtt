WEBVTT

00:01.850 --> 00:03.270
Instructeur: Dus nu we

00:03.270 --> 00:06.760
de basisprincipes van TypeScript kennen en weten hoe

00:06.760 --> 00:09.661
het verschilt van JavaScript, gaan we wat dieper

00:09.661 --> 00:11.410
in op de verschillende kerntypes

00:11.410 --> 00:14.148
die TypeScript kent.

00:14.148 --> 00:17.490
Het getal is het type dat we hier zien, en zoals ik heb uitgelegd is

00:17.490 --> 00:18.500
er geen verschil tussen

00:18.500 --> 00:22.050
gehele getallen zoals de vijf hier en floats of doubles, zoals het in

00:22.050 --> 00:24.330
andere programmeertalen zou heten, zoals

00:24.330 --> 00:25.640
2. 8 hier.

00:25.640 --> 00:28.440
Inderdaad, in JavaScript, en hetzelfde geldt voor TypeScript,

00:28.440 --> 00:30.810
zijn alle getallen standaard floats.

00:30.810 --> 00:33.270
Voor JavaScript, en dus ook voor TypeScript,

00:33.270 --> 00:35.171
is er dus geen verschil tussen vijf

00:35.171 --> 00:36.770
zoals dit en vijf zoals dit.

00:36.770 --> 00:38.640
Het is in wezen hetzelfde nummer.

00:38.640 --> 00:42.720
Nu hebben we naast getallen ook andere kerntypes.

00:42.720 --> 00:46.350
En dat zijn strings, dus tekst, en booleans.

00:46.350 --> 00:47.800
Laten we die ook eens bekijken.

00:47.800 --> 00:50.650
We hebben al deze zaken in actie gezien in deze als-verklaring,

00:50.650 --> 00:53.291
die een beetje overbodig is.

00:53.291 --> 00:55.971
Toch zou dit hier een string zijn.

00:55.971 --> 00:57.720
Ook vijf met aanhalingstekens zou

00:57.720 --> 01:00.389
natuurlijk een string zijn, omdat het tekst is.

01:00.389 --> 01:03.851
En het resultaat, bijvoorbeeld, van deze vergelijking hier,

01:03.851 --> 01:05.170
zou een boolean zijn.

01:05.170 --> 01:08.090
Deze operator, het drievoudige gelijkheidsteken

01:08.090 --> 01:10.950
of de ontkende gelijkheidsoperator hier,

01:10.950 --> 01:13.640
die waar of onwaar oplevert.

01:13.640 --> 01:14.720
En we kunnen natuurlijk

01:14.720 --> 01:17.340
ook een dynamische innerRef controle maken, wat

01:17.340 --> 01:18.850
we vaak zullen doen.

01:18.850 --> 01:22.340
Of we initialiseren een variabele met een true of false waarde, dus laten

01:22.340 --> 01:23.379
we beide doen.

01:23.379 --> 01:27.509
Hier zouden we een nieuwe constante kunnen toevoegen, "printResult".

01:27.509 --> 01:29.990
En zet dit op waar, bijvoorbeeld.

01:29.990 --> 01:31.320
En voor alle duidelijkheid,

01:31.320 --> 01:33.130
dit kan ook een variabele zijn.

01:33.130 --> 01:34.460
Het hoeft geen const te zijn.

01:34.460 --> 01:36.030
Het kan een variabele zijn, die u zou

01:36.030 --> 01:37.730
aanmaken met let in JavaScript.

01:37.730 --> 01:39.870
Maar omdat ik niet van plan ben het hier te veranderen, ga ik

01:39.870 --> 01:40.703
voor een constante.

01:40.703 --> 01:43.670
En we kunnen dit als derde parameter doorgeven.

01:43.670 --> 01:46.960
Laten we zeggen dat we "printResult" invoeren, wat hier geldt.

01:46.960 --> 01:49.720
Nu krijgen we natuurlijk meteen een foutmelding,

01:49.720 --> 01:53.160
omdat onze add-functie geen derde argument ondersteunt.

01:53.160 --> 01:55.560
We zien, "Verwachtte twee argumenten maar kreeg er drie".

01:55.560 --> 01:57.260
Dus moeten we ervoor zorgen dat we een

01:57.260 --> 01:58.920
derde argument ondersteunen.

01:58.920 --> 02:03.920
En daar zouden we een "showResult" parameter kunnen toevoegen.

02:03.940 --> 02:05.920
Je zou het hier ook "printResult" kunnen noemen.

02:05.920 --> 02:07.910
Ik kies voor "showResult" om verwarring

02:07.910 --> 02:11.340
over de naamgeving te voorkomen, maar technisch gezien botsen

02:11.340 --> 02:12.930
deze twee namen niet.

02:12.930 --> 02:14.320
Dus hier noem ik het "showResult".

02:14.320 --> 02:17.580
En ik wil er zeker van zijn dat dit van het type boolean is

02:17.580 --> 02:19.500
door dit op boolean te zetten.

02:19.500 --> 02:22.109
Nogmaals, door hier een dubbele punt toe te voegen

02:22.109 --> 02:25.120
na de parameter en vervolgens de naam van het type.

02:25.120 --> 02:28.100
Nu accepteert deze functie dit, en wat we nu kunnen

02:28.100 --> 02:31.787
doen is hier een if check toevoegen en controleren "if showResult",

02:31.787 --> 02:36.480
als dit waar is, kunnen we natuurlijk vergelijken met true.

02:36.480 --> 02:37.628
Maar zoals je weet in

02:37.628 --> 02:41.990
JavaScript, kun je hier ook gewoon de truthy of falsy waarde doorgeven.

02:41.990 --> 02:43.970
En JavaScript zal het evalueren, en als dit op

02:43.970 --> 02:47.389
de een of andere manier waar oplevert of een waarheidswaarde in het algemeen,

02:47.389 --> 02:48.989
dan maken we het in het if-blok.

02:48.989 --> 02:50.011
Anders niet.

02:50.011 --> 02:52.900
En laten we zeggen dat we het hier redden, en dan

02:52.900 --> 02:55.429
wil ik "console. log n1 plus n2".

02:55.429 --> 02:58.581
Anders, in het andere geval, als we er niet in geraken,

02:58.581 --> 03:00.549
dan wil ik dit teruggeven.

03:00.549 --> 03:02.300
Dus nu is dit een functie die

03:02.300 --> 03:04.760
soms een waarde teruggeeft en soms geen

03:04.760 --> 03:07.200
waarde teruggeeft, maar onmiddellijk

03:07.200 --> 03:08.309
uitvoert.

03:08.309 --> 03:11.550
Nu zou je kunnen argumenteren, als je zo'n functie wilt schrijven,

03:11.550 --> 03:14.310
die een soort van onvoorspelbaar is of die zich onverwacht

03:14.310 --> 03:18.349
zou kunnen gedragen als je hier een true doorgeeft.

03:18.349 --> 03:19.990
Maar hier doen we het.

03:19.990 --> 03:22.090
Dus deze functie komt slechts soms terug.

03:22.090 --> 03:24.869
Soms keert het ook niet terug, maar

03:24.869 --> 03:27.830
logt het alleen iets in de console.

03:27.830 --> 03:31.120
Nu kunnen we hier gewoon toevoegen en hoeven

03:31.120 --> 03:33.640
we het niet op te slaan in het resultaat

03:33.640 --> 03:37.570
en de console niet. log resultaat omdat, met "printResult"

03:37.570 --> 03:39.550
ingesteld op waar, zichzelf toevoegen.

03:39.550 --> 03:41.869
Dus de functie zelf zal het resultaat afdrukken.

03:41.869 --> 03:43.640
Dus als we dat nu opslaan en

03:43.640 --> 03:47.880
onze app opnieuw compileren. ts bestand hier met het commando tsc.

03:47.880 --> 03:50.830
Zodra dit gedaan is, wordt de pagina opnieuw geladen, en zien

03:50.830 --> 03:52.600
we hier nog steeds onze uitvoer.

03:52.600 --> 03:54.677
Maar nu komt het van lijn zes.

03:54.677 --> 03:57.690
En als we kijken, regel zes zit inderdaad

03:57.690 --> 03:58.980
in de functie.

03:58.980 --> 03:59.891
Dus dit is een boolean.

03:59.891 --> 04:02.429
Stel dat we de uitvoer willen aanpassen.

04:02.429 --> 04:06.190
In de if hier hebben we een "resultPhrase" constante waar

04:06.190 --> 04:10.181
we zeggen, "Result is" dubbele punt en dan wat witruimte.

04:10.181 --> 04:14.205
En dat geven we hier ook door met "resultPhrase".

04:14.205 --> 04:17.410
Nou, dan zouden we dat hier ook als argument kunnen verwachten.

04:17.410 --> 04:20.750
Zin, die pijpstring zou opleveren, door een dubbele punt toe te voegen.

04:20.750 --> 04:22.291
En dan is string de naam van

04:22.291 --> 04:26.469
het type, en nu kunnen we die zin gebruiken om het uit te voeren als deel van

04:26.469 --> 04:31.193
onze resultaatuitvoer als we het resultaat direct in de functie afdrukken.

04:31.193 --> 04:34.789
Dus dan hebben we hier "zin plus n1 plus n2".

04:34.789 --> 04:37.440
En als we dat doen en we hercompileren door dat commando

04:37.440 --> 04:39.040
te herhalen, zullen we zien dat

04:39.040 --> 04:41.720
deze zin deel uitmaakt van het resultaat.

04:41.720 --> 04:44.861
Maar we hebben ook, nu, de oude bug heringevoerd omdat

04:44.861 --> 04:48.141
ik een string heb, die ik combineer met twee getallen.

04:48.141 --> 04:52.000
Alles wordt hier omgezet in een string, en dat is niet

04:52.000 --> 04:53.240
wat ik wil.

04:53.240 --> 04:55.930
Om dit te vermijden zouden we in deze functie een resultaatvariabele

04:55.930 --> 04:57.708
kunnen toevoegen.

04:57.708 --> 05:02.027
Of een resultaatconstante en sla ons resultaat hier op.

05:02.027 --> 05:04.530
Dit wordt nu op een wiskundige manier behandeld

05:04.530 --> 05:07.990
omdat het alleen om getallen gaat, en dan zouden we dat hier

05:07.990 --> 05:11.430
kunnen combineren met een zin of gewoon teruggeven.

05:11.430 --> 05:15.160
En aangezien dit nooit direct samen met een string wordt berekend,

05:15.160 --> 05:17.029
zal dit altijd een getal zijn.

05:17.029 --> 05:19.350
En, ja, dan hier, wordt dit getal gecombineerd met

05:19.350 --> 05:21.140
deze string omgezet in een string.

05:21.140 --> 05:24.360
Maar omdat de wiskundige berekening eerder klaar was, hebben we

05:24.360 --> 05:25.548
het juiste resultaat.

05:25.548 --> 05:28.520
Dus als we dat herhalen en dan opnieuw compileren, krijgen

05:28.520 --> 05:30.181
we de juiste uitvoer.

05:30.181 --> 05:33.050
Dit zijn dus de kerngegevens in actie.

05:33.050 --> 05:35.541
Laten we er nu voor zorgen dat we volledig begrijpen

05:35.541 --> 05:38.061
hoe types worden toegewezen en ook waarom we

05:38.061 --> 05:41.343
daar beneden niet expliciet types toewijzen.
