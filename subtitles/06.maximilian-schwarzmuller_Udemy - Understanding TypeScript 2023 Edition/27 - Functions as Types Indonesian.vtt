WEBVTT

00:02.140 --> 00:04.980
-: Jadi, Anda dapat menggunakan tipe untuk parameter

00:04.980 --> 00:06.750
fungsi dan untuk nilai balik

00:06.750 --> 00:08.100
fungsi.

00:08.100 --> 00:10.420
Sekarang, untuk membawanya ke tingkat berikutnya,

00:10.420 --> 00:14.820
bagaimana jika mereka juga merupakan tipe fungsi itu sendiri.

00:14.820 --> 00:17.170
Sekarang izinkan saya menjelaskan apa yang saya maksud.

00:17.170 --> 00:19.333
Katakanlah kita memiliki variabel 'combinevalues'

00:21.360 --> 00:24.200
dan variabel ini secara default memiliki tipe 'any. Sekarang, seperti yang Anda pelajari, 'any' tidak begitu berguna.

00:24.200 --> 00:26.860
Apa yang ingin saya lakukan pada akhirnya adalah, saya

00:26.860 --> 00:29.617
ingin mengatur 'combinevalues' sama dengan 'add. Jadi saya ingin menyimpan fungsi 'add' itu, pointer

00:29.617 --> 00:32.600
pada fungsi 'add' ini, di 'combinevalues' sehingga

00:32.600 --> 00:35.330
pada akhirnya, kita bisa console log, menggabungkan

00:35.330 --> 00:39.160
nilai, dan mengeksekusi 'combinevalues' sebagai fungsi yang

00:39.160 --> 00:41.580
memiliki 8 dan 8.

00:41.580 --> 00:44.520
Sekarang jika saya menyimpan itu, dan saya mengeksekusi

00:44.520 --> 00:47.480
ini, setelah mengkompilasinya, jadi saya telah mengkompilasi

00:47.480 --> 00:51.150
file ini dan kemudian kita biarkan ini dimuat ulang, kita mendapatkan 16

00:51.150 --> 00:52.130
di sini.

00:52.130 --> 00:54.660
Jadi, itu berfungsi, dan kita akan mengharapkannya berfungsi karena itu

00:54.660 --> 00:55.840
adalah kode JavaScript normal.

00:55.840 --> 00:58.820
Kita bisa menyimpan pointer pada fungsi, dalam variabel

00:58.820 --> 01:00.880
angka, dan kemudian penawaran mengeksekusi

01:00.880 --> 01:03.350
variabel ini sebagai fungsi, karena, yah,

01:03.350 --> 01:05.440
pointer ini menunjuk pada fungsi,

01:05.440 --> 01:07.300
bukan?

01:07.300 --> 01:08.580
Jadi kita bisa mengeksekusi fungsi itu, melalui variabel itu.

01:08.580 --> 01:09.910
Masalah yang kita miliki

01:09.910 --> 01:13.250
dengan cuplikan ini di sini dari perspektif TypeScript, hanya

01:13.250 --> 01:15.900
saja 'combinevalues' adalah apa saja.

01:15.900 --> 01:19.640
Jadi jika saya mengatur 'combinevalues' ke angka di sini setelah itu, tentu saja,

01:19.640 --> 01:20.670
sayangnya kita tidak dapat

01:20.670 --> 01:24.520
mengkompilasi ini karena TypeScript tidak memiliki kesempatan untuk mendeteksi bahwa

01:24.520 --> 01:27.910
ini tidak diinginkan atau bahwa ini dapat menyebabkan masalah.

01:27.910 --> 01:30.543
Tetapi pada saat run time, akan terjadi error karena

01:30.543 --> 01:34.230
jelas kita mencoba mengeksekusi 'combinevalues' sebagai fungsi, padahal

01:34.230 --> 01:36.220
sebenarnya itu adalah angka.

01:36.220 --> 01:39.090
Sekarang kita ingin menghindari hal ini, dan untuk itu kita harus

01:39.090 --> 01:42.080
jelas bahwa 'combinevalues' akan memegang sebuah fungsi.

01:42.080 --> 01:44.870
Sekarang langkah pertama ke arah itu, adalah

01:44.870 --> 01:48.650
bahwa kita menetapkan jenis di sini, ke fungsi.

01:48.650 --> 01:50.550
Function adalah tipe yang disediakan

01:50.550 --> 01:54.770
oleh TypeScript pada akhirnya, dan ini memperjelas bahwa apa pun yang

01:54.770 --> 01:57.940
kita simpan di sini harus berupa fungsi.

01:57.940 --> 02:00.870
Oleh karena itu, di sini saya mendapatkan error, karena 5 adalah

02:00.870 --> 02:02.230
angka dan bukan fungsi.

02:02.230 --> 02:05.350
Dan jika saya mengomentari ini, kita dapat mengkompilasi ini, jika tidak, kita

02:05.350 --> 02:06.660
akan mendapatkan kesalahan selama

02:06.660 --> 02:09.670
kompilasi, dan sekarang ini kembali berjalan seperti yang diharapkan.

02:09.670 --> 02:12.860
Jadi ini bagus, tetapi tidak sempurna karena sekarang

02:12.860 --> 02:15.380
kita mengatakan ini harus menjadi fungsi,

02:15.380 --> 02:17.940
tetapi bisa juga mengatur 'combinevalues'

02:17.940 --> 02:21.460
sama dengan 'printResult' misalnya di sini.

02:21.460 --> 02:25.290
Dan tentu saja TypeScript tidak akan komplain karena 'printResult' adalah

02:25.290 --> 02:27.150
sebuah fungsi, tetapi tentu saja itu

02:27.150 --> 02:29.600
bukan fungsi yang mengambil dua argumen.

02:29.600 --> 02:32.620
Jadi sekali lagi jika saya meng-compile ini, TypeScript tidak akan komplain.

02:32.620 --> 02:34.800
Tetapi jika kita memuat ulang, kita melihat undefined di sini dan Hasil 8.

02:34.800 --> 02:38.720
Jadi saya tidak mendapatkan hasil yang saya inginkan

02:38.720 --> 02:42.470
karena saya menyimpan fungsi yang salah di sana.

02:42.470 --> 02:45.980
Sekali lagi, akan lebih baik jika TypeScript memberitahu

02:45.980 --> 02:47.350
kita tentang hal itu.

02:47.350 --> 02:49.980
TypeScript tidak dapat menginformasikan kepada kita tentang hal ini karena

02:49.980 --> 02:51.340
semua yang kita katakan kepada TypeScript

02:51.340 --> 02:54.410
adalah bahwa kita ingin menyimpan fungsi di sana dan ini jelas merupakan kasusnya.

02:54.410 --> 02:58.040
Jadi akan lebih baik jika kita bisa lebih tepat mengenai bagaimana

02:58.040 --> 03:00.550
fungsi seharusnya terlihat seperti yang

03:00.550 --> 03:03.810
ingin kita simpan di 'combinevalues. Dan di situlah tipe fungsi berperan.

03:03.810 --> 03:07.200
Tipe fungsi adalah tipe yang mendeskripsikan suatu

03:07.200 --> 03:08.380
fungsi mengenai parameter

03:08.380 --> 03:11.900
dan nilai balik dari fungsi tersebut.

03:11.900 --> 03:15.690
Tipe fungsi dibuat dengan notasi fungsi panah yang Anda ketahui

03:15.690 --> 03:18.360
dari JavaScript atau setidaknya mendekati

03:18.360 --> 03:19.870
notasi tersebut.

03:19.870 --> 03:23.710
Anda tidak menambahkan tanda kurung kurawal di sini karena kita

03:23.710 --> 03:25.530
tidak membuat fungsi panah di

03:25.530 --> 03:28.890
sini, kita membuat tipe fungsi sebagai gantinya.

03:28.890 --> 03:31.610
Sekarang di sisi kanan panah ini, Anda menentukan tipe

03:31.610 --> 03:33.690
pengembalian fungsi yang pada akhirnya Anda

03:33.690 --> 03:35.450
ingin dapat menyimpan di sini.

03:35.450 --> 03:37.180
Itu seharusnya nomor.

03:37.180 --> 03:40.840
Sekarang dengan itu kita katakan, 'combinevalues' menerima fungsi apa pun

03:40.840 --> 03:42.640
yang tidak mengambil parameter dan kemudian

03:42.640 --> 03:44.120
mengembalikan angka.

03:44.120 --> 03:47.200
Nah, tentu saja tidak sepenuhnya seperti itu yang kita inginkan.

03:47.200 --> 03:50.430
Kita ingin memastikan bahwa 'combinevalues' mengambil sebuah fungsi atau

03:50.430 --> 03:51.840
mampu menyimpan fungsi yang mengambil

03:51.840 --> 03:54.180
2 angka dan mengembalikan sebuah angka.

03:54.180 --> 03:57.130
Dan untuk itu kita bisa menambahkan

03:57.130 --> 04:01.400
parameter di sini ke tipe fungsi ini.

04:01.400 --> 04:02.400
Kita tidak harus mencocokkan

04:02.400 --> 04:05.040
nama parameter dari atas sana, hanya jenisnya saja.

04:05.040 --> 04:06.020
Jadi kita bisa memiliki

04:06.020 --> 04:09.060
a yang seharusnya bertipe number dan b yang seharusnya bertipe number.

04:09.060 --> 04:10.510
Dan sekarang apa yang kita katakan

04:10.510 --> 04:14.070
kepada TypeScript adalah bahwa 'combinevalues' harus menerima

04:14.070 --> 04:15.660
fungsi apa pun yang mengambil

04:15.660 --> 04:18.322
dua parameter di mana setiap parameter adalah angka,

04:18.322 --> 04:22.930
dan di mana fungsi secara keseluruhan kemudian mengembalikan angka.

04:22.930 --> 04:24.350
Dan itulah mengapa TypeScript tidak mengeluh

04:24.350 --> 04:27.780
tentang kita menyimpan 'add' dalam nilai gabungan, karena 'add' adalah fungsi yang secara

04:27.780 --> 04:29.690
sempurna memenuhi definisi tipe ini.

04:29.690 --> 04:33.380
Tetapi ia mengeluh tentang 'printResult' karena 'printResult'

04:33.380 --> 04:36.890
seperti yang dikatakannya di sini, adalah fungsi dengan

04:36.890 --> 04:40.632
tipe satu argumen yang merupakan angka, tidak ada yang dikembalikan,

04:40.632 --> 04:44.360
di mana sebenarnya kita mengharapkan untuk mendapatkan fungsi

04:44.360 --> 04:48.690
dengan dua argumen di mana setiap argumen adalah angka dan kita juga

04:48.690 --> 04:52.310
mengembalikan angka.

04:52.310 --> 04:55.810
Jadi kita memiliki ketidakcocokan di sini, dan jika saya mencoba

04:55.810 --> 04:58.700
untuk mengkompilasi ini, kita akan mendapatkan

04:58.700 --> 05:00.480
kesalahan di sini, tentu saja,

05:00.480 --> 05:03.440
di kompiler, dan kita hanya dapat memperbaikinya

05:03.440 --> 05:06.270
dengan menghapus baris kode ini.

05:06.270 --> 05:07.110
Sekarang kita dapat mengkompilasi ulang ini tanpa kesalahan.

05:07.110 --> 05:10.930
Dan sekarang ini berjalan seperti yang diharapkan.

05:10.930 --> 05:12.060
Jadi tipe fungsi, memungkinkan

05:12.060 --> 05:15.140
kita untuk mendeskripsikan tipe fungsi mana yang secara spesifik

05:15.140 --> 05:17.413
ingin kita gunakan di suatu tempat.

05:18.290 --> 05:20.887
Baik itu nilai yang diharapkan dalam parameter, untuk

05:20.887 --> 05:23.890
membuat fungsi dengan beberapa pemanggilan kembali, atau,

05:23.890 --> 05:25.420
seperti di sini, variabel.
