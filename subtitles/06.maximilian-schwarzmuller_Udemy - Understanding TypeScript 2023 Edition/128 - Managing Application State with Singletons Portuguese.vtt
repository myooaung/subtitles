WEBVTT

00:02.310 --> 00:04.580
Instrutor: Assim, conseguir projetos de A

00:04.580 --> 00:06.000
a B é agora nosso objetivo.

00:06.000 --> 00:09.750
Para ser preciso, quando os usuários criam um novo projeto, quando

00:09.750 --> 00:11.850
eles inserem todos os dados, nós queremos

00:11.850 --> 00:15.790
criar um novo objeto de projeto no final, que nós então produzimos

00:15.790 --> 00:18.830
em nossa classe de lista de projetos como parte da lista

00:18.830 --> 00:20.460
não-ordenada, que é apresentada

00:20.460 --> 00:21.990
lá.

00:21.990 --> 00:23.299
Essa é a idéia.

00:23.299 --> 00:26.350
É claro que uma forma trivial de implementar isto

00:26.350 --> 00:28.890
poderia ser simplesmente ir ao lugar onde

00:28.890 --> 00:30.830
o usuário entra e depois usar

00:30.830 --> 00:34.513
aqui o documento. getElementbyId, para chegar

00:36.100 --> 00:39.410
àquela lista não ordenada que fizemos como parte

00:39.410 --> 00:42.270
de nossa classe de lista de projetos, que tem

00:42.270 --> 00:44.470
esta identificação aqui, tão ativa

00:44.470 --> 00:49.110
lista de projetos ou lista de projetos acabados, e então simplesmente

00:49.110 --> 00:51.090
chegar a ela e adicionar um novo

00:51.090 --> 00:52.760
item a ela.

00:52.760 --> 00:54.770
Mas esta não é realmente a idéia de

00:54.770 --> 00:57.250
como eu quero construir esta aplicação.

00:57.250 --> 00:59.800
Quero construí-la de forma orientada

00:59.800 --> 01:02.530
a objetos, onde temos nossas diferentes

01:02.530 --> 01:06.500
classes que trabalham juntas de forma reativa, onde criamos

01:06.500 --> 01:08.200
uma nova classe e então algo

01:08.200 --> 01:10.550
acontece na cúpula.

01:10.550 --> 01:12.730
Onde chamamos um método de uma classe

01:12.730 --> 01:14.650
e depois esta classe faz algo.

01:14.650 --> 01:16.980
É assim que eu quero que estas coisas funcionem.

01:16.980 --> 01:19.560
Agora, claro, poderíamos acrescentar um método

01:19.560 --> 01:21.550
à classe da lista de projetos, digamos

01:21.550 --> 01:24.120
que eu acrescento o método do projeto.

01:24.120 --> 01:25.890
Esse método deveria então ser chamado

01:25.890 --> 01:28.200
quando um projeto deveria ser adicionado e entregue,

01:28.200 --> 01:30.700
e teríamos que encontrar alguma forma de chamá-lo

01:30.700 --> 01:32.940
de dentro da entrada do projeto.

01:32.940 --> 01:34.820
Para fazer isso, poderíamos ter certeza

01:34.820 --> 01:37.940
de que realmente passamos referências à nossa lista aqui, ao

01:37.940 --> 01:40.330
construtor de entrada do projeto, para que de dentro

01:40.330 --> 01:42.810
da classe de entrada do projeto, possamos trabalhar

01:42.810 --> 01:45.290
com essas instâncias concretas e chamar os métodos

01:45.290 --> 01:47.570
nessas instâncias.

01:47.570 --> 01:50.260
Porque isso é o que teríamos que fazer.

01:50.260 --> 01:52.050
Essa seria uma maneira viável,

01:52.050 --> 01:54.400
definitivamente uma abordagem que você

01:54.400 --> 01:58.680
poderia adotar, mas eu quero adotar uma abordagem ainda mais abstrata.

01:58.680 --> 02:01.393
Na minha opinião, uma abordagem ainda mais interessante.

02:02.330 --> 02:06.210
Construirei uma classe que gerencie o estado de nossa aplicação,

02:06.210 --> 02:08.110
por assim dizer, uma classe que

02:08.110 --> 02:11.187
gerencie nossos projetos, ou qualquer estado que

02:11.187 --> 02:13.840
precisemos gerenciar na aplicação, o que também

02:13.840 --> 02:15.530
nos permite, em seguida, estabelecer

02:15.530 --> 02:18.660
ouvintes nas diferentes partes da aplicação que estejam

02:18.660 --> 02:21.670
interessados.

02:21.670 --> 02:24.540
Este é um padrão que pode parecer familiar para você

02:24.540 --> 02:27.050
se você trabalhou com estruturas como Angular

02:27.050 --> 02:29.820
ou bibliotecas como React e Redux.

02:29.820 --> 02:33.423
Que você tem um objeto de gestão estatal global e que você

02:33.423 --> 02:35.443
apenas ouve as mudanças.

02:35.443 --> 02:37.480
É isso que eu quero implementar aqui.

02:37.480 --> 02:39.620
Claro que é apenas uma maneira de fazer isso, mas

02:39.620 --> 02:41.660
acho que é uma maneira bastante interessante,

02:41.660 --> 02:43.680
e é por isso que quero mostrar isso.

02:43.680 --> 02:45.908
Portanto, no topo do arquivo do aplicativo,

02:45.908 --> 02:50.350
eu acrescentarei uma classe de gerenciamento do estado do projeto.

02:50.350 --> 02:53.347
E eu simplesmente nomearei projectState;

02:54.820 --> 02:57.210
parece-me um nome sensato.

02:57.210 --> 02:59.900
Agora a idéia aqui é que nesta classe

02:59.900 --> 03:03.760
temos uma propriedade ou um campo, um campo privado,

03:03.760 --> 03:06.570
projetos, que contém uma série de

03:06.570 --> 03:08.800
projetos.

03:08.800 --> 03:12.000
Agora também precisamos definir como deve ser um projeto, faremos

03:12.000 --> 03:13.360
isso no próximo passo, por enquanto

03:13.360 --> 03:15.830
vou apenas dizer que é um conjunto de qualquer coisa,

03:15.830 --> 03:18.710
o que obviamente não é perfeito, não final, mas quero me concentrar

03:18.710 --> 03:22.240
nessa solução de gestão estatal por enquanto.

03:22.240 --> 03:25.653
Portanto, temos aqui esta lista de projetos.

03:26.530 --> 03:30.163
Agora meu objetivo é que eu quero adicionar um item a essa

03:30.163 --> 03:35.163
lista sempre que nós, bem clique aqui para adicionar o botão de projeto.

03:36.940 --> 03:39.970
Para que isso funcione, dentro da classe de estado do projeto,

03:39.970 --> 03:43.460
acrescentarei um método de projeto de adição, um método público.

03:43.460 --> 03:45.560
E lá espero obter o título, que

03:45.560 --> 03:47.060
deve ser um fio, a descrição,

03:47.060 --> 03:49.390
que deve ser um fio, e também o número

03:49.390 --> 03:53.250
de pessoas que trabalham no projeto, que deve ser um

03:53.250 --> 03:55.220
número.

03:55.220 --> 03:58.450
Então aqui, podemos criar um novo projeto com a notação

03:58.450 --> 04:00.950
literal do objeto, por enquanto.

04:00.950 --> 04:03.950
Onde devemos ter alguma identificação para cada projeto para que possamos

04:03.950 --> 04:06.050
identificá-lo de forma única, e eu vou gerar uma identificação

04:06.050 --> 04:12.100
aqui usando a matemática.

04:12.100 --> 04:12.100
aleatório(). toString.

04:12.100 --> 04:14.960
Agora um número aleatório não é realmente uma identificação

04:14.960 --> 04:17.880
única, você pode gerar o mesmo número mais de uma vez, mas

04:17.880 --> 04:19.300
é muito improvável, e para

04:19.300 --> 04:22.570
nossos propósitos de demonstração aqui serve.

04:22.570 --> 04:25.170
Agora, além disso, cada projeto deve ter um título e ali

04:25.170 --> 04:28.370
se guardará esse argumento de título que estamos recebendo.

04:28.370 --> 04:30.913
O mesmo para a descrição, onde vou

04:31.960 --> 04:33.830
guardar a descrição.

04:33.830 --> 04:37.693
E o meu pessoal onde vou armazenar o número de pessoas.

04:39.700 --> 04:43.440
Este, por enquanto, é o projeto que eu quero armazenar.

04:43.440 --> 04:45.000
Assim, uma vez que o criamos aqui,

04:45.000 --> 04:48.020
podemos chegar ao conjunto de projetos em estado de projeto,

04:48.020 --> 04:48.853
que é privado, mas

04:48.853 --> 04:50.320
de dentro da classe, que é este

04:50.320 --> 04:51.530
método, podemos acessá-lo,

04:51.530 --> 04:53.340
é claro.

04:53.340 --> 04:55.900
E lá quero acrescentar este novo projeto e

04:55.900 --> 05:00.380
para isso podemos simplesmente empurrar nosso novo projeto para ele.

05:00.380 --> 05:03.350
Agora, com isso, podemos acrescentar um projeto.

05:03.350 --> 05:07.027
Mas ainda temos, é claro, algumas perguntas pouco claras.

05:07.027 --> 05:12.027
Como chamamos o projeto de adição a partir de nossa classe lá embaixo, onde reunimos a

05:12.750 --> 05:14.650
entrada do usuário de dentro do manipulador

05:14.650 --> 05:15.990
de envio?

05:15.990 --> 05:17.940
Como chamamos de projeto de adição?

05:17.940 --> 05:21.730
E como passamos essa lista atualizada de projetos sempre

05:21.730 --> 05:25.690
que ela muda para a classe da lista de projetos?

05:25.690 --> 05:29.230
Estas são as duas questões que, obviamente, enfrentamos no momento.

05:29.230 --> 05:31.840
Bem, uma coisa que farei aqui,

05:31.840 --> 05:36.499
é criar uma instância de estado do projeto aqui.

05:36.499 --> 05:39.720
Uma instância global, que poderíamos usar de todo o arquivo,

05:39.720 --> 05:42.760
e o farei logo após criarmos essa classe.

05:42.760 --> 05:47.050
Portanto, aqui eu tenho meu estado de projeto constante onde

05:47.050 --> 05:50.370
instanto um estado de projeto como este.

05:50.370 --> 05:52.400
Desta forma, esta é uma constante

05:52.400 --> 05:54.620
global que pode ser usada em qualquer

05:54.620 --> 05:58.000
lugar do arquivo, então falar com esta classe agora é super

05:58.000 --> 06:01.660
simples, basta usar esta constante global aqui.

06:01.660 --> 06:04.850
Podemos até usar uma característica que todos nós aprendemos,

06:04.850 --> 06:06.430
o construtor privado, para garantir

06:06.430 --> 06:09.170
que esta seja uma classe de um só botão.

06:09.170 --> 06:11.950
Podemos criar aqui um construtor privado e depois

06:11.950 --> 06:14.300
temos aqui outra propriedade privada, por

06:14.300 --> 06:16.670
exemplo, que é do tipo estado de projeto, portanto

06:16.670 --> 06:18.933
do mesmo tipo que esta classe é.

06:20.640 --> 06:24.360
E então adicionamos aqui um método get instance, um método

06:24.360 --> 06:26.390
estático na verdade, onde verificamos

06:26.390 --> 06:30.050
se este . instância é uma coisa, e para isso,

06:30.050 --> 06:31.020
isto na verdade também

06:31.020 --> 06:33.970
tem que ser uma instância estática, uma propriedade

06:33.970 --> 06:35.800
estática, quero dizer.

06:35.800 --> 06:37.100
Se isto for uma coisa, se for,

06:37.100 --> 06:39.550
devolvemos isto . instância, então voltamos

06:39.550 --> 06:42.230
a uma única instância que temos, caso contrário,

06:42.230 --> 06:44.590
criamos uma nova.

06:44.590 --> 06:45.423
Então, caso

06:45.423 --> 06:50.423
contrário, este . instância será igual ao novo estado do projeto.

06:50.450 --> 06:52.963
E então devolvemos isto . instância.

06:54.740 --> 07:00.903
Agora, com isso, podemos chamar de ProjectState, assim, de ProjectState.

07:00.903 --> 07:00.903
getInstance,

07:02.650 --> 07:04.390
e temos a garantia de trabalhar

07:04.390 --> 07:06.560
sempre com exatamente o mesmo objeto

07:06.560 --> 07:11.700
e sempre teremos apenas um objeto do tipo em toda a aplicação.

07:11.700 --> 07:12.840
Que é a idéia aqui,

07:12.840 --> 07:16.480
porque quero ter apenas um objeto de gestão estatal para nosso

07:16.480 --> 07:17.503
projeto.

07:17.503 --> 07:19.570
Então é este o estado do projeto com este

07:19.570 --> 07:21.563
construtor de singleton agora.

07:22.730 --> 07:25.890
Por isso, agora temos nosso projeto em estado constante.

07:25.890 --> 07:28.040
Vamos então para a classe de entrada do projeto,

07:28.040 --> 07:30.270
onde reunimos a entrada do usuário.

07:30.270 --> 07:33.950
Aqui, agora podemos chamar de ProjectState. adicionarProjeto e encaminhar

07:33.950 --> 07:37.830
o título, a descrição e as pessoas, nós recebemos de volta a partir

07:37.830 --> 07:40.960
da coleta de informações do usuário no final.

07:40.960 --> 07:43.920
Portanto, agora este projeto deve ser criado.

07:43.920 --> 07:47.140
Agora só precisamos empurrar essa informação de

07:47.140 --> 07:51.530
que temos um novo projeto para nossa classe de lista de projetos,

07:51.530 --> 07:53.840
porque essa é a classe que é responsável

07:53.840 --> 07:56.500
pela saída de algo para a tela.

07:56.500 --> 07:59.450
E para isso quero estabelecer um padrão de assinatura

07:59.450 --> 08:00.350
no final.

08:00.350 --> 08:03.020
Onde dentro do estado de nosso projeto

08:03.020 --> 08:05.730
administramos uma lista de ouvintes,

08:05.730 --> 08:08.690
então uma lista de funções no final, que deve

08:08.690 --> 08:11.600
ser chamada sempre que algo mudar.

08:11.600 --> 08:12.433
Por isso, vou acrescentar

08:12.433 --> 08:15.830
outra propriedade privada aqui, ouvintes.

08:15.830 --> 08:18.810
E os ouvintes serão um conjunto vazio e por enquanto,

08:18.810 --> 08:22.130
novamente, apenas um conjunto de qualquer coisa que especificaremos

08:22.130 --> 08:25.543
com mais detalhes posteriormente.

08:26.760 --> 08:31.382
Agora eu também quero ter um método aqui addListener

08:31.382 --> 08:35.590
onde eu obtenha uma função de ouvinte, então esta

08:35.590 --> 08:39.150
deve ser uma função no final aqui.

08:39.150 --> 08:41.370
E então acrescentarei isto aos meus ouvintes.

08:41.370 --> 08:43.970
Portanto, empurramos a função de ouvinte

08:43.970 --> 08:46.500
para aqui, bem como a matriz de ouvintes.

08:46.500 --> 08:49.580
Agora, qual é a idéia de ter essa matriz de ouvintes?

08:49.580 --> 08:51.110
É um conjunto de funções, de

08:51.110 --> 08:53.070
referências de funções, certo?

08:53.070 --> 08:55.250
A idéia é que sempre que algo muda, como aqui

08:55.250 --> 08:57.310
quando adicionamos um novo projeto,

08:57.310 --> 08:59.790
chamamos todas as funções de ouvinte.

08:59.790 --> 09:03.050
Assim, nós fazemos loop através de todos os ouvintes, deste

09:03.050 --> 09:04.720
ouvinte, assim através de todas

09:04.720 --> 09:07.330
as funções do ouvinte, e então como estas são referências

09:07.330 --> 09:09.520
de funções, podemos executar isto como

09:09.520 --> 09:11.593
uma função.

09:13.010 --> 09:14.630
E para essa função, passamos

09:14.630 --> 09:18.620
o que é relevante para ela, com base no estado que estamos administrando,

09:18.620 --> 09:20.130
que é neste caso, nesta classe,

09:20.130 --> 09:23.280
é claro, nossa lista de projetos.

09:23.280 --> 09:27.983
Este é o estado pelo qual esta classe é responsável.

09:29.100 --> 09:29.933
Portanto, aqui,

09:30.980 --> 09:33.050
eu encaminho este projeto e chamarei

09:33.050 --> 09:35.170
uma fatia dele para apenas devolver

09:35.170 --> 09:39.100
uma cópia dessa matriz e não a matriz original.

09:39.100 --> 09:41.880
Para que não possa ser editado a partir do local

09:41.880 --> 09:44.210
de onde vem a função de ouvinte.

09:44.210 --> 09:45.760
Como arrays e objetos são valores

09:45.760 --> 09:48.110
de referência em Javascript, então se você

09:48.110 --> 09:50.490
passasse o array original, poderíamos editá-lo

09:50.490 --> 09:54.380
de fora e também da mesma forma, se empurrarmos algo para ele de dentro

09:54.380 --> 09:57.020
desta classe, ele já mudaria em todos os outros

09:57.020 --> 09:59.830
lugares do aplicativo, mas estes lugares não notariam

09:59.830 --> 10:05.630
realmente que ele mudou, então ele poderia introduzir bugs estranhos se passarmos a referência original,

10:05.630 --> 10:12.770
e é por isso que eu passo a cópia novinha em folha, um array novinho em folha aqui.

10:12.770 --> 10:15.390
Assim, agora cada função de ouvinte está sendo

10:15.390 --> 10:19.400
executada e recebe nossa cópia, nossa novíssima cópia de projetos.

10:19.400 --> 10:21.380
Agora só precisamos ir aos lugares

10:21.380 --> 10:23.800
onde queremos ser informados sobre as mudanças,

10:23.800 --> 10:26.560
em nosso caso, a classe da lista de projetos aqui,

10:26.560 --> 10:29.030
e criar tal ouvinte.

10:29.030 --> 10:32.880
Portanto, aqui, no construtor da classe da lista de projetos,

10:32.880 --> 10:35.546
antes de anexarmos e renderizarmos o conteúdo,

10:35.546 --> 10:38.010
eu irei contactar o projectState e chamar

10:38.010 --> 10:40.110
o addListener aqui para basicamente

10:40.110 --> 10:43.720
registrar uma função de ouvinte aqui.

10:43.720 --> 10:46.150
Agora um ouvinte, como eu disse, é uma função, por isso

10:46.150 --> 10:49.100
temos que passar uma função para acrescentar Escutador.

10:49.100 --> 10:51.210
Porque os ouvintes que estamos administrando

10:51.210 --> 10:52.610
aqui no estado do projeto, isso

10:52.610 --> 10:54.680
é apenas uma lista de funções, que eventualmente

10:54.680 --> 10:57.773
chamaremos quando algo mudar corretamente?

10:58.840 --> 11:01.110
Portanto, terei que passar uma

11:01.110 --> 11:04.990
função para a minha função de "addListener" aqui.

11:04.990 --> 11:07.520
Aqui estou passando uma função de seta anônima.

11:07.520 --> 11:10.770
E essa função receberá uma lista de projetos

11:10.770 --> 11:14.400
quando for chamada de dentro do ProjectState.

11:14.400 --> 11:17.430
Assim, obtemos uma lista de projetos, sabemos que, dentro

11:17.430 --> 11:19.160
deste corpo funcional, podemos

11:19.160 --> 11:21.560
então utilizar esta lista de projetos.

11:21.560 --> 11:26.046
E aqui acrescentarei um campo totalmente novo à lista de projetos, talvez

11:26.046 --> 11:28.410
designadoProjetos, que é do tipo qualquer

11:28.410 --> 11:30.310
array, portanto qualquer coisa

11:30.310 --> 11:32.357
em um array, e array de quaisquer valores,

11:32.357 --> 11:34.010
bem, claro que também especificarei

11:34.010 --> 11:37.630
isto com mais detalhes mais tarde.

11:37.630 --> 11:39.890
Então, aqui podemos dizer que este projeto

11:39.890 --> 11:41.780
atribuído é igual a projetos.

11:41.780 --> 11:44.240
Portanto, aos projetos que estamos recebendo.

11:44.240 --> 11:45.870
Agora aqui para me livrar de qualquer

11:45.870 --> 11:47.280
tipo de erro implícito, tenho

11:47.280 --> 11:49.900
que ficar claro que isto será na verdade um conjunto

11:49.900 --> 11:51.563
de qualquer coisa aqui.

11:52.610 --> 11:55.020
Portanto, agora estou acrescentando os projetos

11:55.020 --> 11:57.660
que recebo porque algo mudou em meu estado.

11:57.660 --> 11:59.490
Aqui aos meus projetos designados onde

11:59.490 --> 12:00.530
não estou acrescentando,

12:00.530 --> 12:02.350
estou substituindo os projetos designados

12:02.350 --> 12:04.170
com os novos projetos.

12:04.170 --> 12:08.223
E então minha idéia é tornar todos esses projetos realidade.

12:09.080 --> 12:10.883
Para isso podemos acrescentar

12:11.951 --> 12:15.080
um novo método; renderPrjects, por exemplo.

12:15.080 --> 12:16.920
O que eu quero chamar daqui,

12:16.920 --> 12:20.063
este renderProjects, exatamente como este.

12:22.230 --> 12:24.120
Termina com os projetos de renderProjects.

12:24.120 --> 12:27.480
Chegarei a esta lista aqui, certo, nós atribuímos essa identificação

12:27.480 --> 12:31.290
quando entregamos o conteúdo, o que fazemos aqui.

12:31.290 --> 12:34.440
Parece que fazemos isso depois que o renderProjects é chamado, mas tenha

12:34.440 --> 12:36.640
em mente, que termina fora de uma função, que só será

12:36.640 --> 12:38.470
chamada eventualmente quando novos projetos

12:38.470 --> 12:40.230
forem adicionados.

12:40.230 --> 12:43.510
Portanto, na verdade, o renderContent será executado primeiro.

12:43.510 --> 12:47.090
E, portanto, no renderProjects, podemos confiar que esta identificação

12:47.090 --> 12:49.370
seja atribuída a uma lista não ordenada,

12:49.370 --> 12:53.030
de modo que aqui podemos agarrá-la e obter nosso elemento de lista

12:53.030 --> 12:58.030
usando documento. getElementbyId e depois eu apenas passo este

12:58.469 --> 13:00.790
identificador de identificação usando o

13:00.790 --> 13:03.690
tipo desta classe concreta de lista de projetos.

13:03.690 --> 13:08.563
E também usando, bem, o resto desta identificação que geramos.

13:09.580 --> 13:11.130
E a essa lista ou nessa lista

13:11.130 --> 13:14.170
quero apresentar todos os projetos que temos.

13:14.170 --> 13:17.670
Portanto, vou analisar aqui todos os

13:17.670 --> 13:21.060
itens deste projeto designado.

13:21.060 --> 13:23.150
E então para cada item eu quero acrescentar

13:23.150 --> 13:23.983
algo à lista e nós refinamos

13:23.983 --> 13:25.380
isto mais tarde.

13:25.380 --> 13:29.787
Por enquanto, vou apenas chamar o appendChild aqui no meu

13:30.890 --> 13:32.480
elemento de lista.

13:32.480 --> 13:34.490
A propósito, devemos acrescentar aqui um ponto

13:34.490 --> 13:36.970
de exclamação para deixar claro que isto não será nulo.

13:36.970 --> 13:41.970
Também podemos lançar isto a um elemento de lista HTML UL, portanto, a um elemento

13:42.000 --> 13:43.560
de lista não-ordenado,

13:43.560 --> 13:45.420
porque é isso que será.

13:45.420 --> 13:47.530
E então podemos anexar a criança aqui

13:47.530 --> 13:49.740
e isso deve ser um item de lista totalmente

13:49.740 --> 13:51.980
novo; assim, aqui podemos criar nosso

13:51.980 --> 13:56.160
item de lista com documento. criarElement LI.

13:56.160 --> 13:58.350
E nesse item da lista aqui, vou apenas colocar

13:58.350 --> 14:03.950
o conteúdo do texto igual ao item do projeto.

14:03.950 --> 14:03.950
título.

14:03.950 --> 14:06.240
Cada item de projeto será um projeto

14:06.240 --> 14:09.940
à medida que o criamos lá em cima no estado de projeto, portanto,

14:09.940 --> 14:11.350
será um objeto e, portanto,

14:11.350 --> 14:13.100
terá um título.

14:14.210 --> 14:15.940
Agora com isso, se formos lá embaixo,

14:15.940 --> 14:18.880
temos nosso item de lista que agora é adicionado aqui.

14:18.880 --> 14:20.730
E com isso estamos quase lá, permanecendo

14:20.730 --> 14:22.340
correções aqui, eu montei

14:22.340 --> 14:23.740
aquele campo, mas no construtor

14:23.740 --> 14:27.080
eu então nunca o referi.

14:27.080 --> 14:29.090
Somente aqui na minha função de ouvinte,

14:29.090 --> 14:31.230
mas como mencionado, isto não funciona imediatamente

14:31.230 --> 14:32.640
no construtor.

14:32.640 --> 14:37.640
Por isso, o que farei aqui é colocar este projeto designado igual a uma matriz vazia

14:38.970 --> 14:41.200
aqui inicialmente, para que todos nós

14:41.200 --> 14:44.450
estejamos felizes e isto seja inicializado.

14:44.450 --> 14:45.510
Agora, se salvarmos

14:45.510 --> 14:47.780
isso, ele deverá compilar sem erros.

14:47.780 --> 14:50.400
E agora se acrescentarmos algo aqui, será

14:50.400 --> 14:51.993
que isso funciona?

14:53.480 --> 14:56.270
De fato, vemos isso aparecer em nossas listas.

14:56.270 --> 14:58.270
Em ambas as listas no momento, porque não

14:58.270 --> 15:00.847
temos lógica de filtragem e assim por diante.

15:00.847 --> 15:03.210
E isso é algo que podemos consertar depois,

15:03.210 --> 15:04.710
mas funciona, e isso é o

15:04.710 --> 15:06.220
importante.

15:06.220 --> 15:08.390
Agora você vê que também temos um bug aqui, no entanto.

15:08.390 --> 15:10.260
Se eu acrescentar um segundo elemento,

15:10.260 --> 15:12.370
duplicamos o último elemento e adicionamos

15:12.370 --> 15:13.880
os novos elementos, então isso é

15:13.880 --> 15:15.490
algo que teremos que consertar.

15:15.490 --> 15:17.653
E estas são todas as coisas que vamos enfrentar,

15:17.653 --> 15:21.270
mas agora pelo menos somos capazes de produzir algo com isso, vamos

15:21.270 --> 15:24.450
mergulhar em todas as melhorias como ser mais claros sobre

15:24.450 --> 15:27.160
os tipos que estamos usando, evitando a saída duplicada,

15:27.160 --> 15:30.733
e muitas outras coisas também.
