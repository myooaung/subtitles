WEBVTT

00:02.060 --> 00:04.710
Tak więc z właściwościami statycznymi poza

00:04.710 --> 00:07.000
drogą, wróćmy do dziedziczenia i do koncepcji

00:07.000 --> 00:08.743
związanej z tym.

00:08.743 --> 00:11.740
Innym sposobem jest dodawanie metod do klas,

00:11.740 --> 00:14.280
po których planujemy dziedziczyć.

00:14.280 --> 00:16.660
Oto nasza klasa Department i jak

00:16.660 --> 00:19.200
wiesz, dziedziczymy po niej na dział

00:19.200 --> 00:21.360
IT i dział księgowości.

00:21.360 --> 00:23.470
Mamy metodę describe w naszej klasie

00:23.470 --> 00:26.160
Department i dlatego możemy ją wywołać na

00:26.160 --> 00:28.850
dowolnej instancji, opartej na klasie IT

00:28.850 --> 00:31.850
Department i Accounting Department, ponieważ

00:31.850 --> 00:34.560
te klasy są oparte na Department i mają dostęp

00:34.560 --> 00:36.560
do wszystkich właściwości i metod

00:36.560 --> 00:39.523
klasy bazowej Department.

00:40.380 --> 00:43.850
Teraz, jak się dowiedziałeś, możesz nadpisać metody.

00:43.850 --> 00:46.550
Więc na przykład tutaj w Dziale Księgowości,

00:46.550 --> 00:50.030
moglibyśmy dodać naszą własną wersję metody

00:50.030 --> 00:51.900
opisowej, gdzie chcę zrobić

00:51.900 --> 00:56.880
coś innego, gdzie może kiedy mówię ID Działu Księgowości, a następnie

00:56.880 --> 01:00.443
ID Distort dostępu.

01:02.040 --> 01:03.140
Teraz nie zadziałałoby

01:03.140 --> 01:06.960
to tutaj, ponieważ ID jest prywatną właściwością Departamentu

01:06.960 --> 01:10.400
i dlatego musimy przekształcić to w chronione, aby było

01:10.400 --> 01:12.590
dostępne również w klasach opartych

01:12.590 --> 01:14.750
na tej klasie.

01:14.750 --> 01:16.210
Ale z tym, to powinno działać.

01:16.210 --> 01:19.080
I jeśli teraz wywołam opis na księgowości, co

01:19.080 --> 01:20.540
oczywiście możemy zrobić,

01:20.540 --> 01:23.650
to może wykomentujmy te dwie linie, a zamiast tego

01:23.650 --> 01:27.460
wywołajmy księgowość. opisuje w dół, powinniśmy

01:27.460 --> 01:29.300
zobaczyć to nowe wyjście,

01:29.300 --> 01:33.340
i rzeczywiście, widzimy ID działu księgowości, d2.

01:33.340 --> 01:36.570
Teraz, oczywiście, moglibyśmy również nadpisać

01:36.570 --> 01:38.900
metodę describe w dziale IT.

01:38.900 --> 01:43.240
Ale czasami nie chcesz po prostu zaoferować opcji nadrzędnej

01:43.240 --> 01:46.440
metody, ponieważ to zawsze istnieje.

01:46.440 --> 01:50.430
Zamiast tego chcesz zmusić programistów pracujących z określoną klasą

01:50.430 --> 01:53.390
lub rozszerzających określoną klasę do wdrożenia

01:53.390 --> 01:54.820
określonej metody lub nadpisania

01:54.820 --> 01:56.840
określonej metody.

01:56.840 --> 01:58.360
Kiedy byś to zrobił?

01:58.360 --> 02:01.690
Cóż, zawsze, gdy chcesz zapewnić, że pewna metoda jest dostępna

02:01.690 --> 02:05.670
we wszystkich klasach opartych na jakiejś klasie bazowej w tym przypadku

02:05.670 --> 02:07.320
Departament.

02:07.320 --> 02:10.550
Ale kiedy również wiesz w tym samym czasie, że dokładna

02:10.550 --> 02:14.220
implementacja będzie zależeć od konkretnej wersji, więc kiedy

02:14.220 --> 02:17.340
możesz zapewnić ogólną metodę, ale chcesz wymusić,

02:17.340 --> 02:20.240
że ta metoda istnieje, ale klasy dziedziczące

02:20.240 --> 02:22.410
będą musiały zapewnić własną implementację,

02:22.410 --> 02:24.270
ponieważ nie możesz zapewnić

02:24.270 --> 02:28.520
domyślnej implementacji w klasie bazowej.

02:28.520 --> 02:30.150
Więc w takiej sytuacji,

02:30.150 --> 02:34.600
możesz chcieć mieć pustą metodę w swojej klasie bazowej i teraz

02:34.600 --> 02:38.460
zmusić wszystkie klasy oparte na tej klasie do dodania

02:38.460 --> 02:40.810
i nadpisania tej metody i możesz to

02:40.810 --> 02:44.880
zrobić dodając słowo kluczowe abstract tutaj.

02:44.880 --> 02:46.630
Jeśli dodasz tutaj abstract,

02:46.630 --> 02:49.840
widzisz, że otrzymujemy błąd, że jest to dostępne tylko

02:49.840 --> 02:51.440
w klasie abstrakcyjnej.

02:51.440 --> 02:54.220
Więc jeśli masz jedną metodę lub więcej z abstract

02:54.220 --> 02:57.390
przed metodą, musisz dodać abstract tutaj przed klasą,

02:57.390 --> 03:00.400
jak również i teraz, jesteśmy dobrzy w odniesieniu

03:00.400 --> 03:01.690
do tego, ale teraz widzisz,

03:01.690 --> 03:03.740
że mam błąd tutaj.

03:03.740 --> 03:05.650
Describe nie może mieć implementacji,

03:05.650 --> 03:07.850
ponieważ jest oznaczony jako abstrakcyjny.

03:07.850 --> 03:10.340
Musisz usunąć kręcone nawiasy klamrowe,

03:10.340 --> 03:14.030
dodać średnik, a zamiast tego dodać typ zwrotu, który to

03:14.030 --> 03:16.820
powinno mieć, w tym przypadku biały.

03:16.820 --> 03:18.400
Więc teraz właśnie określasz,

03:18.400 --> 03:21.970
jak ta metoda powinna wyglądać, jaka jest jej struktura,

03:21.970 --> 03:25.230
ale nie mówisz nic więcej poza tym.

03:25.230 --> 03:27.990
Teraz jednak otrzymujemy błąd w dziale IT, ponieważ

03:27.990 --> 03:31.120
nie implementuje on dziedziczonego abstrakcyjnego

03:31.120 --> 03:33.640
członka describe, co oznacza , że nie oferujemy

03:33.640 --> 03:36.330
tutaj metody describe.

03:36.330 --> 03:38.410
A musimy to zrobić, bo bazujemy na klasie

03:38.410 --> 03:41.000
Department, która jest abstrakcyjna i która ma

03:41.000 --> 03:42.860
taką abstrakcyjną metodę.

03:42.860 --> 03:45.220
Co oznacza, że ta metoda musi być zaimplementowana

03:45.220 --> 03:48.623
przez każdą klasę opartą na tej klasie Department.

03:49.620 --> 03:51.420
Więc teraz tutaj w dziale

03:51.420 --> 03:53.820
IT musimy dodać metodę opisową.

03:53.820 --> 03:58.820
A w nim możemy teraz konsoli zalogować dział IT, a następnie

03:59.040 --> 04:01.120
zrobić co chcemy.

04:01.120 --> 04:03.070
Może to być takie samo wdrożenie,

04:03.070 --> 04:04.900
jakie mamy w dziale księgowości,

04:04.900 --> 04:07.440
ale może być też inne.

04:07.440 --> 04:10.040
Więc teraz z tym, możemy zapisać to i ponownie skompilować,

04:10.040 --> 04:12.850
a my otrzymamy prawie takie same dane wyjściowe jak wcześniej.

04:12.850 --> 04:15.240
Ale teraz mamy dwie różne implementacje

04:15.240 --> 04:18.090
metody describe w naszych różnych klasach opartych

04:18.090 --> 04:20.020
na Departamencie.

04:20.020 --> 04:23.600
Abstrakcja może być zatem bardzo przydatna, jeśli chcesz wymusić,

04:23.600 --> 04:27.120
aby wszystkie klasy oparte na jakiejś innej klasie, dzieliły

04:27.120 --> 04:30.260
się jakąś wspólną metodą lub właściwością, możesz również

04:30.260 --> 04:33.150
mieć właściwości abstrakcyjne.

04:33.150 --> 04:34.260
Ale w tym samym czasie

04:34.260 --> 04:36.510
chcesz się upewnić, że nie musisz dostarczać

04:36.510 --> 04:39.170
konkretnej wartości , konkretnej implementacji

04:39.170 --> 04:41.000
w klasie bazowej, ale zamiast tego

04:41.000 --> 04:43.440
klasa dziedzicząca musi to zrobić.

04:43.440 --> 04:45.970
Ważne są również klasy abstrakcyjne.

04:45.970 --> 04:49.200
Tak więc klasy oznaczone jako abstrakcyjne za pomocą tego słowa

04:49.200 --> 04:51.420
kluczowego mogą być same instancjonowane.

04:51.420 --> 04:54.240
Więc nie możesz teraz zainicjować Departamentu.

04:54.240 --> 04:57.440
To w zasadzie tylko klasa, która gapi się, aby być dziedziczona,

04:57.440 --> 05:01.800
aby klasy dziedziczące mogły być instancjonowane, a klasy dziedziczące

05:01.800 --> 05:05.230
są zmuszone do dostarczenia konkretnych implementacji

05:05.230 --> 05:09.040
dla w tym przypadku do opisania metody zgodnie ze strukturą,

05:09.040 --> 05:11.770
którą tutaj ułożyłeś.

05:11.770 --> 05:15.750
Więc z tym słowem kluczowym odnoszącym się do instancji Departamentu lub

05:15.750 --> 05:19.930
instancji, w jakiś sposób opartej na Departamencie, włączając w to klasy dziedziczone,

05:19.930 --> 05:21.530
które mogą być pomiędzy i że nie

05:21.530 --> 05:23.610
zwraca niczego
