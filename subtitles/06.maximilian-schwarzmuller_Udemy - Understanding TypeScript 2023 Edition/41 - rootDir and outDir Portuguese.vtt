WEBVTT

00:02.220 --> 00:03.053
-: Vamos em frente.

00:03.053 --> 00:04.950
Temos aqui a opção OutFile, agora

00:04.950 --> 00:07.730
esta opção não nos importa agora, não vai funcionar

00:07.730 --> 00:09.440
neste momento.

00:09.440 --> 00:12.340
Mais interessante para nós é o OutDIR e o rootDir.

00:12.340 --> 00:14.720
Quanto maior for seu projeto, mais você

00:14.720 --> 00:17.640
poderá querer organizar seus arquivos.

00:17.640 --> 00:19.690
Normalmente, você não quer ter seus

00:19.690 --> 00:21.770
arquivos por aqui apenas na pasta

00:21.770 --> 00:24.120
do seu projeto de nível de raiz.

00:24.120 --> 00:26.580
Em vez disso, o que você verá com freqüência nos projetos

00:26.580 --> 00:28.080
é que você tem uma pasta de origem,

00:28.080 --> 00:29.790
e você tem uma pasta distante, a seguir,

00:29.790 --> 00:31.240
a seguir.

00:31.240 --> 00:35.690
Portanto, a pasta dist tem o trabalho de segurar toda a saída, assim como todos

00:35.690 --> 00:37.800
os arquivos JavaScript, digamos.

00:37.800 --> 00:41.380
E a pasta de origem pode conter todos os nossos arquivos TypeScript.

00:41.380 --> 00:44.643
Assim, podemos mover os arquivos TypeScript para a pasta

00:44.643 --> 00:47.430
de origem, e se eu agora apagar a pasta JavaScript,

00:47.430 --> 00:49.891
temos o problema de que se compilarmos tudo,

00:49.891 --> 00:53.167
estes arquivos TypeScript são compilados porque o compilador,

00:53.167 --> 00:55.768
o TypeScript, de fato, procura em subpastas,

00:55.768 --> 01:00.050
mas a saída fica ao lado de nossos arquivos de entrada.

01:00.050 --> 01:02.760
E isso é algo que podemos controlar com o OutDir,

01:02.760 --> 01:03.660
por exemplo.

01:03.660 --> 01:07.117
Se estabelecermosDir, podemos dizer os tipos com o

01:07.117 --> 01:10.900
compilador onde o arquivo criado deve ser armazenado.

01:10.900 --> 01:13.580
Poderíamos definir isto para dist.

01:13.580 --> 01:17.037
Agora, se fizermos isso, então se você executar a semente de chia

01:17.037 --> 01:19.560
você verá que os arquivos JavaScript, de fato,

01:19.560 --> 01:21.500
não são colocados na pasta de origem,

01:21.500 --> 01:23.170
mas na pasta dist.

01:23.170 --> 01:26.340
Agora só temos que ajustar nosso índice. arquivo html, e aí ponto

01:26.340 --> 01:31.630
em dist/app. js e dist/analíticos.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
ou, alternativamente, mover o índice. html na pasta dist, mas então

01:33.880 --> 01:36.172
nosso servidor def não funcionaria mais corretamente

01:36.172 --> 01:37.550
neste momento.

01:37.550 --> 01:39.875
Portanto, vamos apenas ajustar essas

01:39.875 --> 01:44.140
importações e com isso, temos uma aplicação funcional ainda, como

01:44.140 --> 01:45.270
você vê, mas agora

01:45.270 --> 01:48.480
com uma estrutura de projeto mais limpa.

01:48.480 --> 01:49.650
Agora o bom é que, se tivéssemos

01:49.650 --> 01:51.530
uma subpasta aqui, uma pasta analítica,

01:51.530 --> 01:52.980
digamos, e tivéssemos nosso

01:52.980 --> 01:54.893
arquivo TypeScript lá dentro, então

01:54.893 --> 01:57.350
se recompilarmos, e não importa se você fizer isso

01:57.350 --> 02:00.373
com este comando ou com o modo relógio, esta estrutura de pastas

02:00.373 --> 02:03.300
que você tem a pasta de origem será toda replicada na pasta

02:03.300 --> 02:08.813
dist, o que é, naturalmente, muito conveniente porque isso garante que você possa importar os arquivos

02:08.813 --> 02:14.110
basicamente como você os importaria também na pasta de origem, para que a estrutura que você montou lá

02:14.110 --> 02:16.640
seja mantida.

02:16.640 --> 02:18.800
Agora, você também pode definir o diretório

02:18.800 --> 02:21.230
raiz e definir isto especificamente na pasta

02:21.230 --> 02:23.800
onde seus arquivos estão armazenados, como

02:23.800 --> 02:25.202
neste exemplo, fonte, para

02:25.202 --> 02:28.560
ter certeza de que os tipos de compilador não olham em nossas

02:28.560 --> 02:30.030
pastas.

02:30.030 --> 02:31.530
Isso também é algo que você pode

02:31.530 --> 02:34.003
fazer com a opção de incluir lá embaixo, certo?

02:34.870 --> 02:36.007
Mas com o diretório

02:36.007 --> 02:38.781
raiz, os tipos de compilador não olharão apenas

02:38.781 --> 02:41.450
para aquela pasta de origem, mas também se certificarão

02:41.450 --> 02:45.680
de que a estrutura do projeto, que você montou lá, seja mantida em uma

02:45.680 --> 02:47.880
pasta distante.

02:47.880 --> 02:50.020
Agora, por padrão, já o fazia antes, como você viu,

02:50.020 --> 02:51.820
mas tenha em mente que antes teria incluído

02:51.820 --> 02:54.280
qualquer arquivo TypeScript aqui, todo o início da fonte,

02:54.280 --> 02:55.699
assim, por exemplo, se você comentar

02:55.699 --> 02:58.830
isso temporariamente se tivéssemos uma pasta de usuário aqui no nível

02:58.830 --> 03:03.280
superior com um usuário.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
onde temos um nome de usuário do Max, digamos, então

03:06.170 --> 03:07.750
se compilarmos isso, todos

03:07.750 --> 03:09.752
vocês verão essa pasta de usuário

03:09.752 --> 03:11.420
na pasta dist.

03:11.420 --> 03:13.810
E agora a pasta de origem está incluída também

03:13.810 --> 03:17.200
porque agora temos um arquivo datilografado em um nível superior

03:17.200 --> 03:19.950
e, portanto, o compilador datilografada pensa que

03:19.950 --> 03:21.780
todo o nosso projeto novamente é a

03:21.780 --> 03:24.920
entrada e replica a estrutura de pastas que encontra lá na

03:24.920 --> 03:25.970
pasta dist.

03:25.970 --> 03:28.960
Isso, é claro, não é o que gostaríamos

03:28.960 --> 03:30.120
e é aí que a opção

03:30.976 --> 03:32.660
rootDir nos ajuda.

03:32.660 --> 03:34.020
Agora, se definíssemos isto

03:34.020 --> 03:35.950
como fonte, mesmo que tivéssemos outras

03:35.950 --> 03:38.630
pastas com arquivos TypeScript no nível da raiz, elas

03:38.630 --> 03:40.400
não seriam incluídas na saída e a própria

03:40.400 --> 03:41.830
pasta da fonte não acabaria

03:41.830 --> 03:43.780
lá de repente.

03:43.780 --> 03:46.480
Tantas vezes você define tanto o rootDir como o outDir para

03:46.480 --> 03:49.650
ser realmente claro a respeito de onde você insere os arquivos ao vivo

03:49.650 --> 03:52.040
e onde seus arquivos de saída seriam gerados.

03:52.040 --> 03:54.870
Se seguirmos em frente, podemos ignorar o composto.

03:54.870 --> 03:57.010
Podemos dar uma olhada em RemoveComments.

03:57.010 --> 03:58.780
Deve ficar bem claro se você definir

03:58.780 --> 04:00.850
isto, então quaisquer comentários

04:00.850 --> 04:04.450
que você possa ter em seus arquivos TypeScript, serão removidos

04:04.450 --> 04:08.000
nos arquivos JavaScript compilados.

04:08.000 --> 04:11.200
Então, se eu comentar isso e compilar meu código, você verá

04:11.200 --> 04:12.970
uma aplicação. ts, tenho um comentário a fazer.

04:12.970 --> 04:14.990
Um aplicativo. js, não está lá.

04:14.990 --> 04:18.330
Portanto, você pode fazer isso para diminuir seus arquivos

04:18.330 --> 04:20.950
e o esforço pode ser uma boa opção.

04:20.950 --> 04:23.820
Você também pode definir noEmit se você não quiser gerar

04:23.820 --> 04:25.600
nenhum arquivo JavaScript.

04:25.600 --> 04:27.130
Agora isto pode parecer estranho

04:27.130 --> 04:29.190
porque esta é a idéia do TypeScript, mas se

04:29.190 --> 04:30.700
você quiser apenas verificar se

04:30.700 --> 04:32.420
seus arquivos estão corretos mas não

04:32.420 --> 04:35.030
quer escrever todos estes arquivos de saída, para economizar

04:35.030 --> 04:37.680
algum tempo, por exemplo, em um projeto maior, então você

04:37.680 --> 04:39.120
poderia definir isto como "verdadeiro"

04:39.120 --> 04:41.792
para ter apenas os tipos de compilador verificando seus

04:41.792 --> 04:45.460
arquivos e relatando quaisquer erros potenciais sem realmente criar um arquivo

04:45.460 --> 04:47.903
de saída.

04:47.903 --> 04:50.490
ImportHelpers não é realmente importante para nós,

04:50.490 --> 04:52.065
aqui podemos ignorar isso.

04:52.065 --> 04:54.570
downlevelIteration é uma opção avançada.

04:54.570 --> 04:57.150
É interessante quando você compila seu

04:57.150 --> 05:00.295
código para versões mais antigas do JavaScript

05:00.295 --> 05:02.690
e trabalha com quatro loops.

05:02.690 --> 05:05.798
Então, em alguns cenários raros, você poderia se deparar com problemas

05:05.798 --> 05:08.378
onde a compilação não funciona corretamente.

05:08.378 --> 05:10.440
Esta opção, se você ativá-la, lhe dará

05:10.440 --> 05:12.770
uma compilação mais exata, que funcionará

05:12.770 --> 05:15.280
nestes casos de nicho, portanto, você pode pensar

05:15.280 --> 05:17.210
que deve sempre ativá-la, mas também

05:17.210 --> 05:20.097
será a saída mais onde aqueles códigos.

05:20.097 --> 05:21.880
Portanto, você só deve ligar isto

05:21.880 --> 05:25.110
se tiver loops e vir que seu código gerado de repente se comporta

05:25.110 --> 05:27.700
de forma diferente do que deveria em relação a

05:27.700 --> 05:29.023
esses loops.
