WEBVTT

00:02.270 --> 00:03.613
Instructeur : Nous pouvons donc renvoyer

00:03.613 --> 00:05.080
quelque chose sur les décorateurs de méthodes,

00:05.080 --> 00:06.820
et ce quelque chose devrait être un descripteur,

00:06.820 --> 00:08.920
qui nous permet de changer la méthode ou de modifier la

00:08.920 --> 00:11.000
configuration de la méthode.

00:11.000 --> 00:12.582
Et c'est quelque chose que je veux faire ici.

00:12.582 --> 00:15.985
Avant cela, je vais tout d'abord aller dans le fichier HTML

00:15.985 --> 00:18.540
de l'index et là, ajoutons un bouton.

00:18.540 --> 00:21.272
Click Me, un bouton très simple, dans

00:21.272 --> 00:24.720
mon application. ts, je veux maintenant m'assurer

00:24.720 --> 00:26.104
que lorsque nous cliquons

00:26.104 --> 00:29.800
sur ce bouton, nous exécutons une méthode sur un objet.

00:29.800 --> 00:32.120
Et pour cela, je vais simplement ajouter une nouvelle

00:32.120 --> 00:34.600
classe ici, tout d'abord, l'imprimante.

00:34.600 --> 00:38.140
Et là-dedans, je veux avoir une propriété message

00:38.140 --> 00:41.690
qui est juste ce travail, donc une simple chaîne stockée

00:41.690 --> 00:45.980
là-dedans et puis je veux avoir une méthode show message là-dedans

00:45.980 --> 00:49.630
où je console simplement ce message.

00:49.630 --> 00:51.770
Bien sûr, il s'agit d'une simple classe factice, mais

00:51.770 --> 00:53.430
elle me permet néanmoins de vous montrer

00:53.430 --> 00:54.860
ce que je veux vous montrer.

00:54.860 --> 00:56.550
Sélectionnons le bouton de porte

00:56.550 --> 01:00.860
maintenant, avec le bouton de sélection de requête de document et ajoutons-lui

01:00.860 --> 01:02.970
un écouteur d'événement.

01:02.970 --> 01:05.080
Tout d'abord, j'ajouterai mon point d'exclamation

01:05.080 --> 01:07.800
ici pour indiquer clairement à TypeScript que ceci existe,

01:07.800 --> 01:08.806
que ceci ne sera pas nul,

01:08.806 --> 01:10.990
puis j'ajouterai un écouteur d'événements,

01:10.990 --> 01:14.210
un écouteur d'événements de clics, et ensuite je veux déclencher cette

01:14.210 --> 01:16.450
méthode show message ici.

01:16.450 --> 01:20.350
Pour cela, je vais créer une nouvelle imprimante ici, comme ceci, et

01:20.350 --> 01:23.120
puis ici pointer sur p. showMessage, c'est

01:23.120 --> 01:24.323
mon idée ici.

01:25.300 --> 01:27.103
Maintenant, si nous sauvegardons cela,

01:28.153 --> 01:31.440
et que nous retournons à notre page et que je clique sur ce bouton, nous

01:31.440 --> 01:33.320
obtenons undefined ici, cependant, nous

01:33.320 --> 01:36.050
n'obtenons pas notre message affiché.

01:36.050 --> 01:38.860
La raison en est qu'avec un écouteur d'événements,

01:38.860 --> 01:41.820
si nous désignons une fonction qui doit être exécutée,

01:41.820 --> 01:44.240
le mot-clé this à l'intérieur de cette fonction

01:44.240 --> 01:48.260
n'aura pas le même contexte ou la même référence que si nous appelons

01:48.260 --> 01:52.193
simplement p. ShowMessage, dans ce

01:53.144 --> 01:56.450
cas, il s'agit de l'imprimante.

01:56.450 --> 02:00.200
Non, dans le scénario ici où nous utilisons un écouteur d'événements,

02:00.200 --> 02:02.860
cela fera référence à la cible de l'événement,

02:02.860 --> 02:05.777
parce que addEventListener à la fin lie cela dans la

02:05.777 --> 02:07.693
fonction qui doit être exécutée à

02:07.693 --> 02:09.560
la cible de l'événement.

02:09.560 --> 02:11.360
Et bien sûr, je ne veux pas de ça.

02:11.360 --> 02:12.570
Maintenant, une solution

02:12.570 --> 02:14.170
de contournement commune serait

02:14.170 --> 02:19.170
d'utiliser la méthode bind et de lier showMessage à p, ou de lier ceci dans showMessage

02:19.480 --> 02:22.860
à p de sorte que lorsque ceci s'exécute, ceci ne se réfère

02:22.860 --> 02:25.420
pas à ce que addEventListener veut qu'il se

02:25.420 --> 02:28.040
réfère, mais plutôt ceci dans showMessage se

02:28.040 --> 02:31.770
référera à ce p, à cet objet ici à nouveau.

02:31.770 --> 02:33.300
Et si nous sommes maintenant, si nous rechargeons

02:33.300 --> 02:36.270
ici et que j'efface encore ceci, maintenant nous voyons que cela fonctionne !

02:36.270 --> 02:39.240
Maintenant, c'est tout le JavaScript par défaut.

02:39.240 --> 02:40.790
Maintenant, nous allons construire

02:40.790 --> 02:42.191
un décorateur, que nous pouvons

02:42.191 --> 02:47.191
ajouter à cette méthode, qui la liera automatiquement à la classe environnante, donc à l'objet auquel

02:47.460 --> 02:50.130
cette méthode appartient, à chaque fois qu'elle sera

02:50.130 --> 02:53.440
appelée, peu importe où nous l'appelons.

02:53.440 --> 02:55.974
Donc, pour cela, au-dessus de l'imprimante, je vais ajouter une

02:55.974 --> 02:58.800
nouvelle fonction et je vais la nommer autobind parce que c'est, en fin

02:58.800 --> 03:01.580
de compte, ce que nous faisons et ce sera mon décorateur autobind.

03:01.580 --> 03:03.890
On peut aussi bien sûr utiliser un caractère de départ en majuscule

03:03.890 --> 03:05.960
pour rester dans la lignée de nos autres dénominations,

03:05.960 --> 03:07.930
mais là encore, vous pouvez utiliser l'un ou l'autre

03:07.930 --> 03:10.122
lorsque vous définissez une fonction décorateur.

03:10.122 --> 03:13.300
Maintenant, ceci sera mon décorateur déjà et dans celui-ci

03:13.300 --> 03:15.269
nous avons quelques arguments.

03:15.269 --> 03:17.940
Nous obtenons la cible, comme vous allez l'apprendre, et c'est tout.

03:17.940 --> 03:20.085
C'est soit le prototype de l'objet avec

03:20.085 --> 03:22.533
lequel nous travaillons, soit la fonction du

03:22.533 --> 03:25.730
constructeur si nous l'ajoutons à une méthode statique,

03:25.730 --> 03:27.340
mais ici ce sera le prototype car

03:27.340 --> 03:30.200
nous l'ajouterons à une méthode d'instance.

03:30.200 --> 03:32.520
Nous avons donc le nom de la méthode ou le nom de la propriété, mais

03:32.520 --> 03:33.690
puisque nous l'ajoutons à une méthode,

03:33.690 --> 03:36.330
nous pouvons appeler ce nom de méthode, ce qui est plus logique.

03:36.330 --> 03:38.600
S'il s'agit d'une chaîne de caractères, d'un

03:38.600 --> 03:40.229
symbole ou d'un nombre, bien sûr,

03:40.229 --> 03:43.250
mais nous savons que nous travaillerons généralement avec

03:43.250 --> 03:45.061
des chaînes de caractères, nous pouvons

03:45.061 --> 03:48.470
donc choisir string, en fonction de l'endroit où vous prévoyez d'ajouter

03:48.470 --> 03:50.170
ce décorateur et de son caractère

03:50.170 --> 03:52.484
générique. Enfin, nous obtenons le descripteur,

03:52.484 --> 03:56.340
qui sera de type PropertyDescriptor, comme une alerte.

03:56.340 --> 03:57.650
Nous avons donc maintenant

03:57.650 --> 03:59.655
ces trois arguments que nous avons tous

03:59.655 --> 04:03.540
utilisés sur Log3 qui était notre décorateur de méthode auparavant.

04:03.540 --> 04:05.970
Maintenant, dans la liaison automatique, et je veux

04:05.970 --> 04:08.994
maintenant m'assurer que nous définissons toujours le mot-clé

04:08.994 --> 04:11.973
this à cet objet auquel cette méthode appartient à nouveau.

04:11.973 --> 04:14.240
Maintenant, comment pouvons-nous y parvenir ?

04:14.240 --> 04:15.797
Tout d'abord, je dois obtenir l'accès

04:15.797 --> 04:17.880
à la méthode qui doit être appelée.

04:17.880 --> 04:20.661
Et cela sera possible avec l'aide de notre descripteur, car si

04:20.661 --> 04:22.013
vous rechargez l'application

04:22.013 --> 04:25.180
et que vous jetez un coup d'œil à un tel descripteur de méthode, vous voyez

04:25.180 --> 04:27.330
que nous avons la propriété value dans le descripteur

04:27.330 --> 04:29.460
et qu'elle pointe vers la fonction.

04:29.460 --> 04:32.240
Comme la valeur de cette propriété est une fonction, dans ce cas,

04:32.240 --> 04:33.930
une méthode est juste une propriété avec

04:33.930 --> 04:35.498
une fonction comme valeur.

04:35.498 --> 04:38.630
Ainsi, la clé de valeur contient la fonction originale, donc,

04:38.630 --> 04:42.980
ici, nous pouvons extraire la méthode originale, si nous voulons l'appeler comme

04:42.980 --> 04:47.320
ceci en accédant au descripteur.

04:47.320 --> 04:47.320
valeur.

04:47.320 --> 04:50.563
Cela nous donnera accès à la méthode originale.

04:51.790 --> 04:55.450
Ensuite, je vais mettre en place un nouveau descripteur ajusté, ce

04:55.450 --> 04:58.320
sera, au final, ce que nous retournerons plus tard.

04:58.320 --> 05:00.030
Maintenant, ce sera un objet

05:00.030 --> 05:03.620
et il sera de type descripteur de propriété.

05:03.620 --> 05:06.350
Maintenant, dans cet objet, nous pouvons ajouter toutes les

05:06.350 --> 05:09.350
choses que nous pouvons ajouter à un descripteur de propriété.

05:09.350 --> 05:12.110
Par exemple, nous pouvons définir ce paramètre comme configurable,

05:12.110 --> 05:14.962
vrai, définir enumerable comme faux, afin que cela n'apparaisse

05:14.962 --> 05:17.130
pas dans les boucles étrangères, et maintenant

05:17.130 --> 05:20.310
ajouter un getter ici, et c'est nouveau.

05:20.310 --> 05:23.400
J'ajoute un getter ici, qui est une méthode, ou une propriété qui contient

05:23.400 --> 05:26.150
une fonction, ce qui est la même chose, afin que nous puissions

05:27.020 --> 05:29.628
exécuter une logique supplémentaire lorsque les utilisateurs

05:29.628 --> 05:32.260
essaient d'accéder à cette propriété.

05:32.260 --> 05:35.170
Ainsi, nous n'exécutons pas directement la valeur de cette propriété,

05:35.170 --> 05:36.633
donc la fonction, mais nous pouvons

05:36.633 --> 05:38.888
intervenir et effectuer un travail supplémentaire

05:38.888 --> 05:40.850
avant d'exécuter la fonction.

05:40.850 --> 05:41.913
C'est l'idée ici.

05:43.230 --> 05:46.290
Donc, je n'ajoute pas de propriété de valeur à ce descripteur ici, j'ai

05:46.290 --> 05:48.660
juste un getter et encore une fois, le getter est essentiellement

05:48.660 --> 05:51.540
comme avoir une propriété de valeur avec une logique supplémentaire

05:51.540 --> 05:54.777
qui s'exécute avant que la valeur soit retournée.

05:54.777 --> 05:59.777
Maintenant, ici, je veux avoir ma fonction liée où je peux utiliser

05:59.900 --> 06:03.450
la méthode originale que nous avons extraite

06:03.450 --> 06:07.100
ici et nous appelons bind et bind this.

06:07.100 --> 06:08.590
Et maintenant, le legs,

06:08.590 --> 06:11.730
bien sûr, c'est ce à quoi cela fait référence ici ?

06:11.730 --> 06:13.720
Gardez à l'esprit qu'il se trouve à l'intérieur

06:13.720 --> 06:17.700
de cette méthode getter et qu'il fera donc référence à ce qui est responsable du déclenchement

06:17.700 --> 06:19.510
de cette méthode getter.

06:19.510 --> 06:21.110
Et c'est là le truc maintenant,

06:21.110 --> 06:23.700
la méthode getter sera déclenchée par l'objet

06:23.700 --> 06:27.200
concret auquel elle appartient, donc cet intérieur de la

06:27.200 --> 06:29.190
méthode getter fera toujours référence

06:29.190 --> 06:33.610
à l'objet sur lequel nous avons défini le getter.

06:33.610 --> 06:36.800
Elle ne sera pas écrasée par addEventListener car le getter

06:36.800 --> 06:38.965
est comme une couche supplémentaire entre

06:38.965 --> 06:41.221
notre fonction en cours d'exécution, l'objet

06:41.221 --> 06:44.976
auquel elle appartient et l'Event Listener.

06:44.976 --> 06:47.683
Donc, ici, ceci fera référence à l'objet

06:47.683 --> 06:51.610
sur lequel nous avons défini la méthode à l'origine.

06:51.610 --> 06:54.660
Nous pouvons donc lier en toute sécurité cette méthode à la méthode

06:54.660 --> 06:57.495
originale et nous assurer que cette méthode à l'intérieur

06:57.495 --> 07:01.170
de la méthode originale fera également référence au même objet.

07:01.170 --> 07:04.300
Maintenant, je vais renvoyer la fonction liée ici et par

07:04.300 --> 07:06.760
la suite, en dehors de ce descripteur ajusté,

07:06.760 --> 07:08.910
renvoyer le descripteur ajusté.

07:08.910 --> 07:10.560
C'est donc notre fonction décorateur,

07:10.560 --> 07:12.420
qui renvoie un nouvel objet descripteur,

07:12.420 --> 07:14.103
et donc cet objet descripteur remplacera

07:14.103 --> 07:18.710
l'ancien descripteur, c'est ce que TypeScript en fera.

07:18.710 --> 07:21.500
TypeScript remplacera alors l'ancien descripteur de méthodes,

07:21.500 --> 07:23.215
donc l'ancienne configuration des

07:23.215 --> 07:26.390
méthodes, par cette nouvelle configuration ici, qui a ajouté cette

07:26.390 --> 07:28.513
couche getter supplémentaire.

07:29.460 --> 07:33.330
Maintenant, je ne suis pas intéressé par la cible et le nom de la méthode

07:33.330 --> 07:37.500
ici, bien sûr, donc pour éviter les erreurs, je vais nommer cet underscore

07:37.500 --> 07:39.083
et cet underscore deux.

07:40.260 --> 07:43.070
Encore une fois, il s'agit simplement de dire à TypeScript que ces valeurs

07:43.070 --> 07:45.480
ne m'intéressent pas mais que je dois les accepter.

07:45.480 --> 07:49.800
Et maintenant, ajoutons un lien automatique à showMessage ici.

07:49.800 --> 07:52.203
Donc, ici, je vais ajouter à Autobind, et assurez-vous

07:54.050 --> 07:56.490
que vous avez enlevé bind là-bas dans l'écouteur

07:56.490 --> 07:59.236
d'événement, et enregistrez ceci.

07:59.236 --> 08:01.450
Et maintenant regardons ça, cliquons

08:01.450 --> 08:04.730
sur Click Me, et vous devriez voir que ça marche !

08:04.730 --> 08:06.678
Si je recharge, ça marche.

08:06.678 --> 08:09.680
Parce que cela est maintenant lié correctement.

08:09.680 --> 08:12.060
Et juste pour vérifier que c'est vraiment notre décorateur

08:12.060 --> 08:13.520
qui fait la différence ici, si je

08:13.520 --> 08:15.868
supprime la liaison ici dans mon getter et le décorateur

08:15.868 --> 08:17.850
et que je sauvegarde cela, vous voyez que

08:17.850 --> 08:20.920
si c'est maintenant rechargé et que nous cliquons sur Click me,

08:20.920 --> 08:23.626
nous voyons à nouveau undefined.

08:23.626 --> 08:26.320
C'est donc cette couche supplémentaire de getter

08:26.320 --> 08:27.389
qui fait son travail

08:27.389 --> 08:30.430
ici et qui garantit que le lien est toujours correct, quelle

08:30.430 --> 08:33.260
que soit la façon dont vous appelez showMessage.

08:33.260 --> 08:35.380
Si nous l'appelons comme ceci directement sur l'objet,

08:35.380 --> 08:38.350
cela fonctionnera, si nous l'appelons ici comme ceci avec un écouteur

08:38.350 --> 08:40.760
d'événements, cela fonctionne également.

08:40.760 --> 08:42.260
Vous voyez donc que cela fonctionne

08:42.260 --> 08:45.070
ici, ce qui, en fin de compte, provient de cet appel showMessage,

08:45.070 --> 08:48.266
et vous voyez également que cela fonctionne si je clique sur le bouton.

08:48.266 --> 08:49.918
Voilà donc un bel exemple de la façon

08:49.918 --> 08:52.060
dont vous pouvez utiliser les décorateurs

08:52.060 --> 08:55.190
pour créer une fonctionnalité tout à fait étonnante et vous

08:55.190 --> 08:58.718
épargner le souci d'appeler manuellement bind partout.

08:58.718 --> 09:01.883
Au lieu de cela, il suffit de le lier comme ceci.
