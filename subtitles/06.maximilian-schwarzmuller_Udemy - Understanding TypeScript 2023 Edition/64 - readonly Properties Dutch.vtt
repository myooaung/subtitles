WEBVTT

00:02.280 --> 00:04.510
Verwant aan wat je net leerde over toegangsmodifiers,

00:04.510 --> 00:06.483
is een andere modifier.

00:07.572 --> 00:09.590
En dat is de readonly modifier.

00:09.590 --> 00:11.310
Laten we zeggen dat we bepaalde

00:11.310 --> 00:14.220
velden hebben, die niet alleen privaat of publiek moeten

00:14.220 --> 00:18.130
zijn, maar ook niet mogen veranderen na hun initialisatie.

00:18.130 --> 00:21.410
Het id mag daarna bijvoorbeeld niet meer veranderen.

00:21.410 --> 00:23.520
Om duidelijk te maken dat het niet mag veranderen,

00:23.520 --> 00:25.670
kunt u hier ook readonly toevoegen.

00:25.670 --> 00:27.890
En dat had je hier ook kunnen toevoegen.

00:27.890 --> 00:30.920
Dus hier zou u ook private readonly hebben geschreven.

00:30.920 --> 00:33.990
Nu is het readonly keyword, net als private en public,

00:33.990 --> 00:35.710
geïntroduceerd door TypeScript,

00:35.710 --> 00:37.920
het bestaat niet in JavaScript.

00:37.920 --> 00:39.910
Het zorgt ervoor dat als je daarna

00:39.910 --> 00:43.180
probeert te schrijven naar zijn eigendom, je faalt.

00:43.180 --> 00:45.690
Dus je kunt het maar één keer gebruiken tijdens

00:45.690 --> 00:48.620
de initialisatie, maar daarna, laten we zeggen voor

00:48.620 --> 00:52.430
addEmployee, om wat voor reden dan ook, probeer ik id te veranderen in

00:52.430 --> 00:54.200
d2, zie je, we krijgen hier een fout,

00:54.200 --> 00:57.790
dat ik niet kan toewijzen aan id omdat het readonly is.

00:57.790 --> 01:00.800
Dit voegt dus wat extra veiligheid toe om echt duidelijk te maken

01:00.800 --> 01:04.160
dat een bepaalde eigenschap slechts eenmaal geïnitialiseerd moet

01:04.160 --> 01:05.920
worden en daarna niet meer mag veranderen,

01:05.920 --> 01:10.240
een eis die je vaak hebt voor bepaalde eigenschappen in je objecten.

01:10.240 --> 01:12.630
Dit kan dus weer extra type veiligheid toevoegen,

01:12.630 --> 01:14.910
en je bedoelingen heel duidelijk maken.

01:14.910 --> 01:16.320
Je kunt natuurlijk altijd

01:16.320 --> 01:18.350
zeggen: Ik ben degene die de code schrijft,

01:18.350 --> 01:20.470
ik doe niets wat ik niet wil.

01:20.470 --> 01:23.060
Nou, het is nog steeds goed om heel duidelijk te zijn

01:23.060 --> 01:24.630
als je je code definieert.

01:24.630 --> 01:28.320
Want a, je vergeet misschien wat je wilde doen als je een

01:28.320 --> 01:31.280
paar weken aan je code werkt, of wat dan ook,

01:31.280 --> 01:32.270
en b, je werkt misschien

01:32.270 --> 01:34.340
in een team of deelt je code met

01:34.340 --> 01:36.550
andere mensen.

01:36.550 --> 01:39.390
En het is over het algemeen een goed idee om duidelijke en expliciete

01:39.390 --> 01:42.460
code te schrijven die je bedoeling heel duidelijk maakt.

01:42.460 --> 01:44.280
En readonly kan je daarbij helpen,

01:44.280 --> 01:47.230
omdat het heel duidelijk maakt wat je doel is.

01:47.230 --> 01:49.570
Als we kijken naar app. js, zoals ik al zei,

01:49.570 --> 01:53.050
zien we noch private, noch public, noch read only, want

01:53.050 --> 01:55.780
dat bestaat allemaal alleen in TypeScript,

01:55.780 --> 01:57.610
niet in JavaScript.

01:57.610 --> 02:01.420
We zien ook iets anders wat ook interessant is, de methoden

02:01.420 --> 02:04.580
worden toegevoegd aan het prototype van onze

02:04.580 --> 02:06.490
constructorfunctie.

02:06.490 --> 02:08.830
Nu moet je daarvoor weten wat prototypes zijn, en

02:08.830 --> 02:10.730
die in deze cursus introduceren zou een

02:10.730 --> 02:12.520
beetje te veel van het goede zijn.

02:12.520 --> 02:14.140
Bijgevoegd vind je enkele bronnen

02:14.140 --> 02:16.070
waar je in prototypes kunt duiken.

02:16.070 --> 02:18.490
Het is een belangrijk onderdeel van JavaScript,

02:18.490 --> 02:22.210
vooral van JavaScript voordat we klassen hadden, en het kan geen kwaad

02:22.210 --> 02:24.670
om prototypes te begrijpen als je een JavaScript-ontwikkelaar

02:24.670 --> 02:26.490
bent.

02:26.490 --> 02:29.030
Toch zal ik er hier niet dieper op ingaan, omdat

02:29.030 --> 02:31.160
het een puur JavaScript-onderwerp is,

02:31.160 --> 02:33.020
niet specifiek voor TypeScript.

02:33.020 --> 02:34.150
In TypeScript werken

02:34.150 --> 02:36.510
we inderdaad meestal minder met prototypes,

02:36.510 --> 02:38.780
omdat we meer kunnen doen met klassen.

02:38.780 --> 02:42.560
En daarmee samenhangend hebben we een ander belangrijk klasse concept,

02:42.560 --> 02:43.503
Inheritance.
