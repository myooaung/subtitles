WEBVTT

00:02.180 --> 00:04.910
Instructeur : Visuellement, nous sommes capables de faire

00:04.910 --> 00:07.240
du glisser-déposer mais techniquement, en JavaScript

00:07.240 --> 00:10.410
bien sûr, notre script n'a aucune idée de ce qui se passe.

00:10.410 --> 00:12.030
Mais pour nous, les humains, il

00:12.030 --> 00:14.810
est clair que nous traînons cet élément précis ici.

00:14.810 --> 00:16.300
Mais si nous jetons un coup d'œil

00:16.300 --> 00:20.320
à notre code, comment JavaScript pourrait-il savoir ce qui est traîné où ?

00:20.320 --> 00:21.980
Comment mettrions-nous à jour notre état sur

00:21.980 --> 00:24.440
la base des informations dont nous disposons actuellement ?

00:24.440 --> 00:26.690
Ce ne serait pas vraiment possible.

00:26.690 --> 00:28.810
Pour que cela fonctionne en JavaScript,

00:28.810 --> 00:30.840
nous devons donc revenir à la classe

00:30.840 --> 00:33.960
de notre élément glissant, l'élément de projet.

00:33.960 --> 00:36.710
Là, dans le dragStartHandler, l'enregistrement de l'événement

00:36.710 --> 00:38.250
de la console n'est pas tout ce que

00:38.250 --> 00:39.950
nous devrions faire.

00:39.950 --> 00:42.200
En fait, nous n'avons pas besoin de faire ça du tout.

00:42.200 --> 00:45.070
Au lieu de cela, nous allons maintenant utiliser notre objet

00:45.070 --> 00:48.210
événement ici, car il a une propriété de transfert de données.

00:48.210 --> 00:50.440
Le fait de disposer d'une telle propriété de transfert

00:50.440 --> 00:53.280
de données est une particularité des événements de drague.

00:53.280 --> 00:55.330
Et sur cette propriété, vous pouvez attacher

00:55.330 --> 00:57.530
des données à l'événement de glissement et vous

00:57.530 --> 00:59.520
pourrez plus tard extraire ces données lors

00:59.520 --> 01:01.390
d'un dépôt et le navigateur en JavaScript

01:01.390 --> 01:03.730
dans les coulisses, stockera ces données pendant

01:03.730 --> 01:06.430
l'opération de glissement et s'assurera que les données

01:06.430 --> 01:09.470
que vous obtenez lorsque le dépôt se produit sont les mêmes que

01:09.470 --> 01:12.020
celles que vous attachez ici.

01:12.020 --> 01:15.520
Pour cela, vous pouvez appeler, setData, sur le transfert de données,

01:15.520 --> 01:18.910
mais le transfert de données pourrait en fait être nul.

01:18.910 --> 01:21.080
Nous devons donc ajouter un point d'exclamation

01:21.080 --> 01:23.460
ici, nous savons bien sûr qu'il ne sera pas nul ici.

01:23.460 --> 01:25.700
Vous pourriez vous demander pourquoi il pourrait être nul ?

01:25.700 --> 01:29.060
L'événement drag est toujours le même type d'événement,

01:29.060 --> 01:31.340
mais selon l'écouteur qui le déclenche

01:31.340 --> 01:34.190
ou l'événement exact que vous écoutez, le transfert

01:34.190 --> 01:37.520
de données n'est pas nécessairement disponible.

01:37.520 --> 01:39.896
Ainsi, tous les événements liés au glisser ne vous

01:39.896 --> 01:42.640
donnent pas un objet événement qui possède l'objet de

01:42.640 --> 01:44.073
transfert de données.

01:45.320 --> 01:46.620
Cependant, le dragStartHandler

01:46.620 --> 01:49.080
qui se déclenche lors de l'événement de démarrage du déplacement

01:49.080 --> 01:52.840
le possède, et nous pouvons donc appeler setData en toute sécurité.

01:52.840 --> 01:56.330
Et maintenant setData prend deux arguments ici.

01:56.330 --> 01:59.900
Le premier argument est un identifiant du format

01:59.900 --> 02:01.320
des données, et vous

02:01.320 --> 02:04.970
disposez de certains formats possibles.

02:04.970 --> 02:08.210
Vous trouverez ci-joint une étude approfondie de la fonction glisser-déposer

02:08.210 --> 02:10.890
avec JavaScript, qui vous permettra d'en savoir plus.

02:10.890 --> 02:12.270
Vous en apprendrez également plus

02:12.270 --> 02:15.140
à ce sujet dans mon cours JavaScript Complete Guide, d'ailleurs.

02:15.140 --> 02:18.390
Ici, nous avons besoin du format text/plain, ce qui signifie

02:18.390 --> 02:20.010
que nous allons simplement

02:20.010 --> 02:24.190
joindre du texte brut demandé aux données qui sont transférées, et c'est

02:24.190 --> 02:25.430
important.

02:25.430 --> 02:28.250
Nous n'allons pas attacher nos objets ici, notre projet

02:28.250 --> 02:29.740
lui-même, nous allons juste continuer

02:29.740 --> 02:31.390
à nous faire piéger.

02:31.390 --> 02:34.340
Donc pas le projet complet qui peut être rendu ici.

02:34.340 --> 02:37.955
Au lieu de cela, il suffit de joindre l'ID du

02:37.955 --> 02:41.645
projet, car cela nous permettra plus tard de

02:41.645 --> 02:44.870
récupérer ce projet dans notre état.

02:44.870 --> 02:47.320
Il suffit donc de joindre l'ID.

02:47.320 --> 02:50.240
Nous voulons transférer seulement une petite quantité de données, cela nous permettra

02:50.240 --> 02:52.053
également d'économiser de la mémoire.

02:53.100 --> 02:56.300
Donc maintenant, avec ça, nous attachons des données à l'événement drag.

02:56.300 --> 02:58.330
Une autre chose que je veux faire est, sur

02:58.330 --> 03:00.610
le transfert de données où nous devons encore

03:00.610 --> 03:02.340
ajouter le point d'exclamation,

03:02.340 --> 03:05.430
je vais définir la propriété effectAllowed sur move.

03:05.430 --> 03:08.610
Cela permet de contrôler l'apparence du curseur

03:08.610 --> 03:12.440
et d'informer le navigateur de notre intention de

03:12.440 --> 03:15.200
déplacer un élément de A à B.

03:15.200 --> 03:16.760
Une alternative pourrait être

03:16.760 --> 03:19.230
la copie, où vous obtenez alors un curseur différent

03:19.230 --> 03:20.820
qui indique à l'utilisateur que

03:20.820 --> 03:23.120
vous copiez et non que vous déplacez, mais ici

03:23.120 --> 03:25.140
nous voulons déplacer l'élément, ce qui

03:25.140 --> 03:26.580
signifie que lors d'un dépôt,

03:26.580 --> 03:28.810
nous le supprimons à son emplacement d'origine

03:28.810 --> 03:31.360
et l'ajoutons au nouvel emplacement.

03:31.360 --> 03:34.940
Donc maintenant les données sont attachées ici et c'est l'étape numéro un.

03:34.940 --> 03:36.870
Revenons maintenant à l'endroit où nous

03:36.870 --> 03:38.470
voulons que le dépôt se produise,

03:38.470 --> 03:40.360
c'est-à-dire la liste des projets.

03:40.360 --> 03:43.400
Là, ça commence dans le dragLeaveHandler.

03:43.400 --> 03:46.370
Maintenant, dans cette application, dans ce projet

03:46.370 --> 03:49.200
ici, nous n'avons qu'une seule opération de glisser-déposer

03:49.200 --> 03:51.500
et c'est notre projet ici.

03:51.500 --> 03:54.970
Dans les applications plus importantes, vous pouvez avoir différents

03:54.970 --> 03:57.220
éléments sur la page qui peuvent être glissés

03:57.220 --> 04:01.080
et déposés et vous ne voulez pas que tout puisse être déposé partout.

04:01.080 --> 04:06.080
Ainsi, ici, dans le dragOverHandler, qui se déclenche lorsque vous entrez dans

04:06.230 --> 04:09.580
une zone pouvant être glissée avec un élément attaché

04:09.580 --> 04:11.860
à la souris, je veux vérifier si un glissement

04:11.860 --> 04:14.970
est réellement autorisé ici.

04:14.970 --> 04:19.546
Pour cela, je vais vérifier si l'événement. dataTransfer, ici c'est disponible

04:19.546 --> 04:21.060
aussi, donc si c'est

04:21.060 --> 04:22.950
disponible, et ensuite,

04:22.950 --> 04:25.500
si c'est disponible, la propriété

04:25.500 --> 04:29.140
des types de transfert de données a une première

04:29.140 --> 04:34.140
valeur qui est égale à text/plain.

04:34.300 --> 04:39.280
Cela signifie simplement que les données attachées à notre événement

04:39.280 --> 04:42.390
de glisser, sont-elles de ce format ?

04:42.390 --> 04:43.360
Ce qui est bien sûr le

04:43.360 --> 04:45.030
cas, car c'est le format que nous avons

04:45.030 --> 04:47.320
défini dans le dragStartHandler ici.

04:47.320 --> 04:50.490
Ainsi, par exemple, ici, il ne serait pas possible de déposer des images ou quelque

04:50.490 --> 04:51.380
chose de ce genre qui aurait

04:51.380 --> 04:53.180
un format de données différent.

04:53.180 --> 04:56.173
Je viens d'autoriser l'abandon du texte brut.

04:57.170 --> 04:59.450
Bien sûr, je dois maintenant aussi remplacer

04:59.450 --> 05:01.020
underscore par un événement,

05:01.020 --> 05:03.280
car je m'y réfère ici.

05:03.280 --> 05:07.150
Maintenant, si c'est le cas, je sais que je veux autoriser une baisse, alors

05:07.150 --> 05:09.070
je vais mettre à jour le fond.

05:09.070 --> 05:11.620
Et une autre chose importante que nous devons faire, vous devez

05:11.620 --> 05:13.960
appeler l'événement. prévenir le défaut.

05:13.960 --> 05:15.950
Mais pourquoi devons-nous appeler ça ?

05:15.950 --> 05:18.860
Parce qu'en JavaScript, le glisser-déposer

05:18.860 --> 05:22.480
fonctionne de telle sorte qu'un dépôt n'est en fait autorisé

05:22.480 --> 05:26.119
que si l'événement de dépôt ne se déclenche que sur un élément,

05:26.119 --> 05:29.649
si dans le drag overHandler de ce même élément vous avez

05:29.649 --> 05:32.750
appelé preventDefault.

05:32.750 --> 05:35.360
Vous pouvez penser à ce qui suit.

05:35.360 --> 05:38.870
Par défaut, les événements de glisser-déposer JavaScript

05:38.870 --> 05:41.350
n'autorisent pas le dépôt. Vous devez donc

05:41.350 --> 05:44.889
empêcher le défaut dans le drag overHandler pour indiquer

05:44.889 --> 05:48.120
à JavaScript et au navigateur que pour cet élément,

05:48.120 --> 05:49.670
dans ce cas pour cette section

05:49.670 --> 05:52.980
pour cette classe sans projet, vous voulez autoriser

05:52.980 --> 05:54.870
un dépôt.

05:54.870 --> 05:57.920
Ainsi, ce n'est que si vous faites cela dans un dragOverHandler que l'événement

05:57.920 --> 06:00.020
de dépôt se déclenchera réellement lorsque l'utilisateur

06:00.020 --> 06:01.220
le lâche.

06:01.220 --> 06:02.910
Sinon, si l'utilisateur se laisse aller,

06:02.910 --> 06:05.060
l'événement de chute ne se déclenchera pas.

06:05.060 --> 06:07.090
Ainsi, le gestionnaire de dépôt

06:07.090 --> 06:08.960
finira par s'exécuter bien sûr,

06:08.960 --> 06:12.620
car nous permettons maintenant que cela se produise.

06:12.620 --> 06:16.440
Donc, ici, dans le gestionnaire de dépôt, nous pouvons maintenant accepter l'événement, et pour

06:16.440 --> 06:20.610
le moment, nous nous contentons de la console. enregistrez l'événement ici comme

06:20.610 --> 06:23.003
ceci pour voir si cela fonctionne.

06:23.940 --> 06:28.100
Nous sauvegardons maintenant tout, nous ajoutons un nouvel élément

06:28.100 --> 06:30.220
ici, et je fais glisser ceci.

06:30.220 --> 06:33.430
Si je le dépose ici dans les projets finis, vous voyez que

06:33.430 --> 06:36.490
cet événement de déplacement se déclenche ici.

06:36.490 --> 06:39.360
Et cela vient de la ligne 236 qui est en fait

06:39.360 --> 06:43.050
cette ligne dans le gestionnaire de dépôt.

06:43.050 --> 06:45.950
Maintenant, si nous inspectons l'événement de glisser ici dans le navigateur,

06:45.950 --> 06:47.447
vous voyez que nous avons un tas de données

06:47.447 --> 06:50.830
ici et nous avons également cette propriété de transfert de données.

06:50.830 --> 06:52.920
Et là, vous voyez l'effet que nous avons

06:52.920 --> 06:54.320
autorisé, c'est-à-dire

06:54.320 --> 06:57.930
Move, et vous ne verrez également rien là-dedans.

06:57.930 --> 07:01.600
Eh bien, seulement parce que les données ont déjà été effacées

07:01.600 --> 07:04.510
après que cela ait été mis dans la console.

07:04.510 --> 07:06.100
Et comme nous avons mis l'objet ici et que

07:06.100 --> 07:08.160
les objets sont des types de référence, eh bien, nous

07:08.160 --> 07:10.830
voyons le dernier instantané où les données sont perdues.

07:10.830 --> 07:13.360
En fait, au moment où nous abandonnons cette idée, nous

07:13.360 --> 07:16.910
serons en mesure d'extraire des données du transfert de données.

07:16.910 --> 07:18.360
Et je peux vous le prouver.

07:18.360 --> 07:20.960
Bien sûr, nous pouvons simplement accéder au transfert

07:20.960 --> 07:23.210
de données et là vous avez une méthode getData,

07:23.210 --> 07:26.580
et maintenant nous voulons obtenir les données avec ce format

07:26.580 --> 07:29.560
text/plain et cela devrait être l'ID du projet que nous

07:29.560 --> 07:34.560
avons attaché à notre paquet de transfert de données sur l'élément de projet.

07:35.060 --> 07:37.179
Donc, si nous sauvegardons maintenant

07:37.179 --> 07:39.690
et ajoutons à nouveau le projet ici, et

07:39.690 --> 07:41.050
que nous faisons glisser

07:41.050 --> 07:46.050
ceci ici, vous voyez que ceci est l'ID de cet élément de projet.

07:46.600 --> 07:47.920
Nous pouvons le voir

07:47.920 --> 07:50.880
si nous l'inspectons parce que nous l'ajoutons

07:50.880 --> 07:55.124
également ici comme un ID, 0. 2167, ça ressemble à cette identification pour moi.

07:55.124 --> 07:59.170
Donc, nous avons réussi à transférer l'ID.

07:59.170 --> 08:00.490
Maintenant, nous y sommes presque.

08:00.490 --> 08:04.100
Il ne nous reste plus qu'à mettre à jour notre état dans les coulisses

08:04.100 --> 08:06.163
et à rendre à nouveau le DUI.
