WEBVTT

00:02.280 --> 00:04.510
Istruttore: In relazione a ciò che avete appena imparato sui

00:04.510 --> 00:06.483
modificatori di accesso, c'è un altro modificatore.

00:07.572 --> 00:09.590
E questo è il modificatore readonly.

00:09.590 --> 00:11.310
Supponiamo di avere alcuni

00:11.310 --> 00:14.220
campi che non devono essere solo privati o pubblici,

00:14.220 --> 00:18.130
ma anche non modificati dopo la loro inizializzazione.

00:18.130 --> 00:21.410
Ad esempio, l'id non dovrebbe cambiare in seguito.

00:21.410 --> 00:23.520
Per chiarire che non deve essere modificato,

00:23.520 --> 00:25.670
si può aggiungere anche readonly.

00:25.670 --> 00:27.890
E si poteva aggiungere anche questo.

00:27.890 --> 00:30.920
Quindi qui si sarebbe dovuto scrivere anche private readonly.

00:30.920 --> 00:33.990
Ora, la parola chiave readonly, proprio come private e

00:33.990 --> 00:35.710
public, è stata introdotta da TypeScript,

00:35.710 --> 00:37.920
non esiste in JavaScript.

00:37.920 --> 00:39.910
Si assicura che se si tenta di scrivere

00:39.910 --> 00:43.180
sulla sua proprietà in seguito, si fallisce.

00:43.180 --> 00:45.690
Quindi si può usare solo una volta durante

00:45.690 --> 00:48.620
l'inizializzazione, ma in seguito, diciamo

00:48.620 --> 00:52.430
che per addEmployee, per qualsiasi motivo, provo a cambiare

00:52.430 --> 00:54.200
id in d2, si ottiene un errore:

00:54.200 --> 00:57.790
non posso assegnare id perché è readonly.

00:57.790 --> 01:00.800
In questo modo si aggiunge una sicurezza in più, per rendere

01:00.800 --> 01:04.160
chiaro che una certa proprietà deve essere inizializzata una sola

01:04.160 --> 01:05.920
volta e non deve essere modificata

01:05.920 --> 01:08.860
in seguito, un requisito che si ha spesso per certe proprietà

01:08.860 --> 01:10.240
nei propri oggetti.

01:10.240 --> 01:12.630
In questo modo si può aggiungere un'ulteriore sicurezza

01:12.630 --> 01:14.910
e rendere molto chiare le proprie intenzioni.

01:14.910 --> 01:16.320
Naturalmente, si può sempre

01:16.320 --> 01:18.350
dire: "Beh, sono io che scrivo il codice,

01:18.350 --> 01:20.470
non farò nulla che non voglia".

01:20.470 --> 01:23.060
È comunque bene essere molto chiari quando

01:23.060 --> 01:24.630
si definisce il codice.

01:24.630 --> 01:28.320
Perché a) potreste dimenticare quello che volevate fare se vi fermate a

01:28.320 --> 01:31.280
lavorare sul vostro codice per un paio di settimane, o qualunque

01:31.280 --> 01:32.270
cosa sia, e b) potreste

01:32.270 --> 01:34.340
lavorare in un team o condividere il vostro

01:34.340 --> 01:36.550
codice con altre persone.

01:36.550 --> 01:39.390
E in genere è una buona idea scrivere codice chiaro ed

01:39.390 --> 01:42.460
esplicito che renda evidente la propria intenzione.

01:42.460 --> 01:44.280
Il readonly può essere d'aiuto,

01:44.280 --> 01:47.230
perché rende molto chiaro l'obiettivo.

01:47.230 --> 01:49.570
Se diamo un'occhiata all'app. js, come ho detto,

01:49.570 --> 01:53.050
non vediamo né privato né pubblico, né solo lettura,

01:53.050 --> 01:55.780
perché tutto ciò esiste solo in TypeScript,

01:55.780 --> 01:57.610
non in JavaScript.

01:57.610 --> 02:01.420
Vediamo anche qualcosa di diverso, anch'esso interessante:

02:01.420 --> 02:04.580
i metodi vengono aggiunti al prototipo della nostra

02:04.580 --> 02:06.490
funzione costruttore.

02:06.490 --> 02:08.830
Per questo è necessario sapere cosa sono i

02:08.830 --> 02:10.730
prototipi, e introdurli in questo

02:10.730 --> 02:12.520
corso sarebbe un po' troppo.

02:12.520 --> 02:14.140
In allegato trovate alcune risorse

02:14.140 --> 02:16.070
in cui potete immergervi nei prototipi.

02:16.070 --> 02:18.490
È una parte importante di JavaScript, soprattutto

02:18.490 --> 02:22.210
di JavaScript prima che ci fossero le classi, e non fa male capire

02:22.210 --> 02:26.490
i prototipi se si è uno sviluppatore JavaScript.

02:26.490 --> 02:29.030
Anche in questo caso, non li approfondirò perché si

02:29.030 --> 02:31.160
tratta di un argomento puramente JavaScript,

02:31.160 --> 02:33.020
non specifico di TypeScript.

02:33.020 --> 02:34.150
In effetti, in TypeScript,

02:34.150 --> 02:36.510
di solito si lavora meno con i prototipi, perché

02:36.510 --> 02:38.780
si può fare di più con le classi.

02:38.780 --> 02:43.503
In relazione a ciò, abbiamo un altro importante concetto di classe, l'ereditarietà.
