WEBVTT

00:02.120 --> 00:04.590
Instruktor: Więc jak wspomniałem w ostatnim wykładzie,

00:04.590 --> 00:06.080
tryb watch jest świetnym początkiem,

00:06.080 --> 00:08.910
ale co jeśli mamy więcej niż jeden plik TypeScript?

00:08.910 --> 00:13.370
Co by było, gdybyśmy mieli również analitykę. ts plik, w którym hipotetycznie

00:13.370 --> 00:18.370
wysyłamy dane analityczne na nasz serwer?

00:18.530 --> 00:21.430
Teraz tutaj, żeby po prostu mieć tam cokolwiek,

00:21.430 --> 00:24.240
wstawię konsolę. oświadczenie dziennika, ale

00:24.240 --> 00:26.710
oczywiście możesz wysyłać żądania HTTP do swojej

00:26.710 --> 00:29.180
usługi analitycznej tutaj, jak powiedziałem.

00:29.180 --> 00:32.685
Więc powiedzmy, że zrobiliśmy też import tego pliku

00:32.685 --> 00:36.420
tutaj w naszym indeksie. plik html.

00:36.420 --> 00:40.320
Jeśli wskażemy na analitykę. js tutaj, który jeszcze nie istnieje,

00:40.320 --> 00:41.730
ale który będzie istniał

00:41.730 --> 00:44.760
po kompilacji, wtedy moglibyśmy ładować te dwa

00:44.760 --> 00:46.660
pliki i oczywiście chcemy skompilować

00:46.660 --> 00:48.950
oba pliki, gdy tylko jeden z nich się

00:48.950 --> 00:50.900
zmieni.

00:50.900 --> 00:52.490
Byłoby miło, gdybyśmy mogli

00:52.490 --> 00:55.320
wprowadzić ogólny tryb obserwacyjny, w którym

00:55.320 --> 00:57.630
po prostu uruchamiamy tsc w ten sposób,

00:57.630 --> 00:59.790
bez wskazywania pliku, a on po prostu

00:59.790 --> 01:02.480
obserwuje cały folder projektu i rekompiluje

01:02.480 --> 01:05.823
każdy plik TypeScript, który może się zmienić.

01:06.720 --> 01:08.960
Otóż okazuje się, że jest to możliwe.

01:08.960 --> 01:11.340
W tym celu musimy po prostu powiedzieć

01:11.340 --> 01:15.020
TypeScriptowi, że ten tutaj jest jednym projektem, który

01:15.020 --> 01:16.750
powinien być zarządzany za

01:16.750 --> 01:18.980
pomocą TypeScriptu i robimy to po pierwsze,

01:18.980 --> 01:20.700
i musimy to zrobić tylko raz,

01:20.700 --> 01:23.710
uruchamiając tsc --init.

01:23.710 --> 01:26.170
Więc nie wskazuję tutaj konkretnego pliku,

01:26.170 --> 01:29.540
po prostu uruchamiam tsc, a następnie --init tutaj i ponownie,

01:29.540 --> 01:31.230
jest to wymagane tylko raz.

01:31.230 --> 01:33.530
To zainicjuje ten projekt, w którym uruchamiasz

01:33.530 --> 01:36.390
to polecenie, jako projekt TypeScript.

01:36.390 --> 01:39.910
Oznacza to, że teraz zasadniczo powie TypeScriptowi, że wszystko

01:39.910 --> 01:41.850
w folderze, w którym uruchamiasz to

01:41.850 --> 01:44.160
polecenie i dlatego ważne jest, abyś nawigował

01:44.160 --> 01:46.470
do właściwego folderu, zanim uruchomiłeś

01:46.470 --> 01:48.070
to polecenie za pomocą wbudowanego

01:48.070 --> 01:50.550
terminalu tutaj w VS Code.

01:50.550 --> 01:52.910
Automatycznie w tym folderze projektu,

01:52.910 --> 01:55.740
gdzie są moje pliki, aby ten projekt był teraz zarządzany

01:55.740 --> 01:57.370
przez TypeScript.

01:57.370 --> 01:58.400
Wciśnijmy Enter

01:58.400 --> 02:02.634
i co to robi, to tworzy tsconfig. plik json.

02:02.634 --> 02:06.580
To w zasadzie jest wskaźnik dla TypeScript, że projekt,

02:06.580 --> 02:09.950
w którym leży ten plik i wszystkie podfoldery

02:09.950 --> 02:12.239
tego folderu powinny być zarządzane

02:12.239 --> 02:14.710
przez TypeScript.

02:14.710 --> 02:16.080
Teraz, jeśli zajrzymy do tego

02:16.080 --> 02:17.860
pliku, zobaczymy tam kilka opcji, większość

02:17.860 --> 02:19.330
z nich jest wykomentowana, są

02:19.330 --> 02:22.090
tam tylko po to, abyś widział, że możesz je ustawić i masz

02:22.090 --> 02:24.500
tu również krótkie wyjaśnienie, ale nie musimy się

02:24.500 --> 02:26.380
tym teraz przejmować.

02:26.380 --> 02:29.040
Zanurzymy się w nich za chwilę.

02:29.040 --> 02:31.610
Na razie zamknijmy ten plik

02:32.800 --> 02:35.100
i zobaczmy, co nam to daje,

02:35.100 --> 02:36.550
ponieważ możemy

02:36.550 --> 02:39.870
teraz uruchomić tsc bez wskazywania

02:39.870 --> 02:42.610
konkretnego pliku.

02:42.610 --> 02:45.550
W ten sposób TypeScript będzie musiał

02:45.550 --> 02:49.080
skompilować wszystkie pliki TypeScript,

02:49.080 --> 02:53.090
aby wszystkie . ts pliki, które może znaleźć w tym projekcie,

02:53.090 --> 02:54.770
więc jeśli uderzę Enter tutaj,

02:54.770 --> 02:56.830
widzisz, to trwa chwilę, a teraz to, co

02:56.830 --> 03:02.620
mamy jest ta analityka. plik js i ta aplikacja.

03:02.620 --> 03:02.620
plik js.

03:02.620 --> 03:05.160
A teraz analityka. Plik js został właśnie stworzony

03:05.160 --> 03:10.060
przez TypeScript, ponieważ stwierdził, że mamy analitykę.

03:10.060 --> 03:10.060
ts

03:10.060 --> 03:13.390
plik i jak powiedziałem, teraz skompiluje wszystkie pliki TypeScript

03:13.390 --> 03:14.730
w projekcie.

03:14.730 --> 03:17.660
I oczywiście można to również połączyć z trybem zegarka.

03:17.660 --> 03:20.630
Możesz uruchomić tsc -w lub --watch, jak pokazałem

03:20.630 --> 03:23.420
wcześniej, a to spowoduje teraz wejście w tryb

03:23.420 --> 03:26.970
zegarka dla wszystkich plików TypeScript.

03:26.970 --> 03:29.590
Więc teraz za każdym razem, gdy zmienię jeden z nich

03:29.590 --> 03:31.920
i zapiszę go, skompiluje się ponownie.

03:31.920 --> 03:33.840
Przekompiluje ten plik, który się zmienił,

03:33.840 --> 03:36.100
a zatem wszystkie odzwierciedlone zmiany

03:36.100 --> 03:37.800
w pliku JavaScript.

03:37.800 --> 03:38.633
A teraz jest tutaj.

03:38.633 --> 03:41.430
Jeśli wróciłem na swoją stronę, to widzimy też dane dotyczące

03:41.430 --> 03:44.463
wysyłania, bo teraz analityka. skompilowano również plik ts.
