WEBVTT

00:02.120 --> 00:05.300
Uomo: Come possiamo visualizzare le coordinate su una mappa?

00:05.300 --> 00:08.180
Anche in questo caso, utilizzeremo un'API di Google.

00:08.180 --> 00:10.690
Se si cerca Google JavaScript Maps o Google

00:10.690 --> 00:13.810
JS Maps, si troverà la documentazione ufficiale

00:13.810 --> 00:16.970
dell'API Google JavaScript di Google Maps.

00:16.970 --> 00:19.660
Qui imparerete come utilizzare Google Maps nella vostra

00:19.660 --> 00:22.020
applicazione web per renderizzare una mappa.

00:22.020 --> 00:24.720
Ed è davvero semplice e diretto.

00:24.720 --> 00:27.280
Prima di tutto dobbiamo aggiungere questo

00:27.280 --> 00:31.720
script, che aggiungerà l'SDK di Google Maps alla nostra applicazione.

00:31.720 --> 00:34.220
È sufficiente prendere questo script

00:34.220 --> 00:38.210
e aggiungerlo al file html dell'indice, sopra lo script.

00:38.210 --> 00:40.670
Ora, è importante che non installiamo questo

00:40.670 --> 00:42.920
NPM, perché non è pubblicato su NPM, quindi

00:42.920 --> 00:45.900
usiamo questo link CDN, che preleva lo script direttamente

00:45.900 --> 00:48.140
dai server di Google.

00:48.140 --> 00:51.560
E qui dobbiamo impostare la nostra API_KEY.

00:51.560 --> 00:54.390
Ora, questa è naturalmente l'API_KEY che

00:54.390 --> 00:57.430
abbiamo già nel file typescript, quindi possiamo

00:57.430 --> 01:02.170
copiarla nell'index html e sostituirla con YOUR_API_KEY.

01:02.170 --> 01:06.120
Inoltre, eliminiamo questo "&amp;callback=initMap" alla

01:06.120 --> 01:07.150
fine, che attiverebbe

01:07.150 --> 01:10.240
una funzione non appena la mappa viene caricata

01:10.240 --> 01:14.843
o l'SDK viene caricato, e non è una cosa che voglio.

01:15.840 --> 01:19.760
Quindi, abbiamo caricato l'SDK e ora

01:19.760 --> 01:22.820
possiamo usarlo, ma qui c'è un

01:22.820 --> 01:24.250
problema.

01:24.250 --> 01:26.210
Voglio utilizzarlo per il rendering di una

01:26.210 --> 01:28.710
mappa e il rendering di una mappa è davvero semplice.

01:28.710 --> 01:31.070
Nella documentazione ufficiale, vediamo che alla fine dobbiamo istanziare

01:31.070 --> 01:33.870
questo google. mappe. Funzione costruttore

01:33.870 --> 01:38.960
di mappe, passa un centro, che è essenzialmente...

01:38.960 --> 01:41.720
Questa coppia di coordinate la riceviamo dal retro e aggiungiamo

01:41.720 --> 01:43.250
un livello di zoom.

01:43.250 --> 01:45.820
Quindi possiamo copiare questo e poi, una

01:45.820 --> 01:48.710
volta ottenute le coordinate, eseguire questo

01:48.710 --> 01:50.010
codice e magari memorizzare

01:50.010 --> 01:53.750
la mappa in una costante chiamata "Map". Ma ovviamente si verifica un errore.

01:53.750 --> 01:55.117
"Impossibile trovare il

01:55.117 --> 01:57.600
nome google", e questo ha senso, non sarà disponibile

01:57.600 --> 02:01.320
a livello globale, ma il dattiloscritto non lo sa.

02:01.320 --> 02:03.380
Sarà disponibile a livello globale,

02:03.380 --> 02:06.300
grazie all'SDK JavaScript che stiamo importando.

02:06.300 --> 02:08.343
Ma ovviamente il dattiloscritto non lo sa.

02:09.390 --> 02:12.270
Si può ovviamente usare

02:12.270 --> 02:14.200
"declare var google"

02:14.200 --> 02:19.200
e impostarlo su qualsiasi.

02:19.990 --> 02:21.020
Con ciò si dice al dattiloscritto:

02:21.020 --> 02:22.887
"Va bene, questo esisterà, non preoccuparti". Possiamo farlo e l'errore scompare.

02:22.887 --> 02:26.480
Ora possiamo anche usare le nostre coordinate, invece

02:26.480 --> 02:29.060
di quelle codificate, e se vogliamo anche

02:29.060 --> 02:31.370
renderizzare un marcatore, anche

02:31.370 --> 02:33.480
questo è possibile.

02:33.480 --> 02:36.430
Nella documentazione ufficiale, facendo semplicemente

02:36.430 --> 02:37.930
clic su "Aggiunta di una mappa

02:37.930 --> 02:39.517
con un marcatore", si apprende

02:39.517 --> 02:41.520
che l'aggiunta di un marcatore è semplice:

02:41.520 --> 02:44.600
basta usare la mappa creata, creare un marcatore con questo

02:44.600 --> 02:47.223
comando e puntare alla mappa.

02:49.040 --> 02:50.950
Copiamo quindi questo frammento

02:50.950 --> 02:52.980
di codice e torniamo al nostro codice,

02:52.980 --> 02:56.130
dopo aver creato la mappa, creo il mio marcatore in questo

02:56.130 --> 02:59.160
modo e le posizioni qui sono le mie coordinate.

02:59.160 --> 03:01.160
Ora verrà eseguita una mappa e

03:01.160 --> 03:04.173
verrà posizionato un marcatore su di essa.

03:05.040 --> 03:06.600
L'unica cosa che resta da fare

03:06.600 --> 03:08.580
è assicurarsi che questa mappa sia

03:08.580 --> 03:10.350
resa nel posto giusto.

03:10.350 --> 03:12.350
Per impostazione predefinita, cerca un elemento con una I. D. "mappa" e questo è ciò

03:12.350 --> 03:14.010
che abbiamo qui.

03:14.010 --> 03:16.670
Ma se si sceglie un'altra I. D. qui, assicurarsi di

03:16.670 --> 03:18.720
modificarlo nel codice dattiloscritto.

03:18.720 --> 03:20.470
Se salviamo

03:20.470 --> 03:23.473
questo file, viene compilato senza errori

03:24.610 --> 03:26.890
e ora, se inserisco un indirizzo,

03:26.890 --> 03:30.640
dovrebbe essere visualizzato questo.

03:30.640 --> 03:33.450
Quindi funziona e possiamo regolare il livello di zoom

03:33.450 --> 03:35.320
qui, per ingrandirlo un po' di più, per

03:35.320 --> 03:38.650
esempio portandolo a 16, e ora se proviamo questo possiamo vederlo

03:38.650 --> 03:40.370
un po' più chiaramente.

03:40.370 --> 03:42.910
Ma sta funzionando, e questo è ciò che possiamo dire.

03:42.910 --> 03:45.640
Possiamo scorrere e utilizzare questa mappa.

03:45.640 --> 03:47.480
Tutto questo è bello, ma non è ottimale.

03:47.480 --> 03:50.420
Naturalmente funziona, grazie a "declare

03:50.420 --> 03:53.340
var google", non riceviamo alcun errore.

03:53.340 --> 03:56.760
Ma non riceviamo nemmeno alcun tipo di supporto.

03:56.760 --> 03:58.810
SE introduco un errore, se

03:58.810 --> 04:01.550
ad esempio faccio riferimento a ". map" invece di ". maps" compila senza problemi e

04:01.550 --> 04:02.960
si blocca solo in

04:02.960 --> 04:06.730
produzione.

04:06.730 --> 04:08.860
Se provo a renderizzare una mappa.

04:08.860 --> 04:11.280
Ora ricevo un errore, catturato dal nostro gestore di errori.

04:11.280 --> 04:13.150
Quindi questo non è ovviamente ciò che vogliamo.

04:13.150 --> 04:16.493
Vogliamo un supporto per i tipi, vogliamo gestire errori di dump come questo,

04:17.470 --> 04:19.770
durante lo sviluppo e non in fase di runtime.

04:19.770 --> 04:22.880
Quindi come possiamo assicurarci che il dattiloscritto conosca Google Maps?

04:22.880 --> 04:27.380
Tipi in soccorso.

04:27.380 --> 04:31.080
Se si cerca "types google maps", si trovano vari pacchetti

04:31.080 --> 04:32.470
che aggiungono tipi per,

04:32.470 --> 04:34.160
beh, Google Maps.

04:34.160 --> 04:37.350
Ora non abbiamo installato il pacchetto Google Maps tramite NPM,

04:37.350 --> 04:38.800
ma possiamo comunque installare

04:38.800 --> 04:41.050
i tipi per quel pacchetto tramite NPM.

04:41.050 --> 04:44.130
E qui sceglierò il primo pacchetto e lo installerò semplicemente

04:44.130 --> 04:46.160
nel nostro progetto.

04:46.160 --> 04:48.790
Quindi torniamo indietro, server di sviluppo

04:48.790 --> 04:51.560
rapido, ed eseguiamo "npm install --save-dev

04:51.560 --> 04:54.030
"@types/googlemaps", una parola.

04:54.030 --> 04:56.400
Questo era il nome del pacchetto.

04:58.613 --> 05:01.560
A questo punto verranno installati i tipi globali per questo pacchetto.

05:01.560 --> 05:03.303
Se ora riavvio il tutto

05:04.200 --> 05:08.410
con NPM start, vediamo se la situazione è migliore.

05:08.410 --> 05:11.500
Se rimuovo questo "dichiarare

05:11.500 --> 05:15.180
var" qui, o lo commento.

05:15.180 --> 05:18.090
Compila ancora, ma ora questa cosa di google maps viene

05:18.090 --> 05:19.940
rilevata e se provo ad accedere a ". map" qui, ottengo un errore,

05:19.940 --> 05:23.290
ma ora ottengo anche il completamento automatico e

05:23.290 --> 05:27.010
vedo: "Sì, c'è una mappa". Mi dice anche che questo costruttore

05:27.010 --> 05:29.880
di mappe ha bisogno di un "Div" o di un "Element" in

05:29.880 --> 05:32.410
cui rendere la mappa come primo parametro

05:32.410 --> 05:35.100
e poi di alcune opzioni per la mappa.

05:35.100 --> 05:38.660
Quindi ora funziona come dovrebbe.

05:38.660 --> 05:40.270
E questo è naturalmente un grande

05:40.270 --> 05:42.850
passo avanti, perché ora abbiamo la nostra applicazione

05:42.850 --> 05:45.170
funzionante, che funzionava anche prima.

05:45.170 --> 05:47.600
Ma ora funziona anche con

05:47.600 --> 05:51.170
i tipi e con un supporto adeguato.

05:51.170 --> 05:53.490
E questo staff è un'altra grande pratica, per il

05:53.490 --> 05:56.050
modo in cui si costruiscono le applicazioni con gli

05:56.050 --> 05:58.500
script di tipo e si usano certi tipi di funzionalità,

05:58.500 --> 06:00.690
ma è soprattutto una grande pratica per il modo

06:00.690 --> 06:03.700
in cui si può lavorare con le librerie di terze parti.

06:03.700 --> 06:06.250
Alcuni, come "axios", portano con sé i propri tipi.

06:06.250 --> 06:08.470
Altri non sono nemmeno installati

06:08.470 --> 06:11.540
con NPM, ma si possono aggiungere tipi

06:11.540 --> 06:15.421
con un pacchetto di tipi appropriato.

06:15.421 --> 06:18.810
Spero che questo modulo vi sia stato utile per capire questo

06:18.810 --> 06:21.320
aspetto e per tutti i progetti futuri a cui potreste

06:21.320 --> 06:23.230
lavorare, in cui molto probabilmente

06:23.230 --> 06:25.620
lavorerete anche con alcune librerie di terze

06:25.620 --> 06:27.040
parti.
