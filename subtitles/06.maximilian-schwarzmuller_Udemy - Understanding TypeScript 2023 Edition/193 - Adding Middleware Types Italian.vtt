WEBVTT

00:02.210 --> 00:04.200
Istruttore: Quindi abbiamo questo server fittizio

00:04.200 --> 00:05.490
di base attivo e funzionante, ma

00:05.490 --> 00:08.380
questo server non sta facendo nulla di utile, ovviamente.

00:08.380 --> 00:11.430
Ora, ho detto che voglio costruire un'API di riposo molto semplice

00:11.430 --> 00:13.110
e per questo creerò una nuova sottocartella

00:13.110 --> 00:16.830
nella cartella dei sorgenti, che chiamerò routes.

00:16.830 --> 00:19.870
Lì, aggiungerò un file che dovrà gestire un certo insieme

00:19.870 --> 00:22.540
di rotte di questa API di riposo; ora sta a voi

00:22.540 --> 00:25.710
decidere quale tipo di API volete costruire.

00:25.710 --> 00:28.520
Qui costruirò un'API di todo, se avete letto la sezione

00:28.520 --> 00:30.770
React in TypeScript, vi sembrerà familiare

00:30.770 --> 00:32.140
perché anche lì abbiamo

00:32.140 --> 00:34.530
costruito un'app di todo, ma questa è totalmente

00:34.530 --> 00:36.820
separata da quella sezione, non funzionerà

00:36.820 --> 00:38.710
insieme a React, naturalmente potreste

00:38.710 --> 00:41.250
collegarla da soli, ma qui costruirò una semplice

00:41.250 --> 00:43.870
API di todo semplicemente per vedere come TypeScript

00:43.870 --> 00:48.350
funziona con Node ed Express.

00:48.350 --> 00:51.400
L'applicazione che stiamo costruendo non è troppo

00:51.400 --> 00:54.760
complessa, ma conterrà molti concetti interessanti.

00:54.760 --> 00:57.080
Quindi, aggiungeremo le mie rotte

00:57.080 --> 01:01.800
di todo aggiungendo un todos. ts nella cartella delle rotte e lì voglio

01:01.800 --> 01:04.570
usare Express. js per registrare

01:04.570 --> 01:06.630
alcune rotte.

01:06.630 --> 01:09.730
A tale scopo, importerò qualcosa da

01:09.730 --> 01:13.700
Express e questo qualcosa è ora il router.

01:13.700 --> 01:16.160
La sintassi JS più comune è quella

01:16.160 --> 01:20.950
di importare Express usando require express e poi in una nuova

01:20.950 --> 01:23.550
riga, spesso si vede del codice in

01:23.550 --> 01:25.673
cui si fa questo qui.

01:27.090 --> 01:28.180
È una cosa che si può fare,

01:28.180 --> 01:30.130
ma qui la importerò semplicemente così.

01:31.130 --> 01:34.120
Ora, questo ci dà un router, che possiamo semplicemente

01:34.120 --> 01:36.750
chiamare Router come funzione e che ci permette

01:36.750 --> 01:39.300
di registrare middleware, quindi, alla

01:39.300 --> 01:41.980
fine, endpoint di rotte per le richieste in

01:41.980 --> 01:45.540
arrivo, su cui poi eseguiamo una logica.

01:45.540 --> 01:48.980
Ora per l'applicazione todo, voglio registrare alcune rotte

01:48.980 --> 01:53.700
di base, una rotta post a slash nothing, dove possiamo aggiungere un nuovo todo, quindi

01:53.700 --> 01:55.760
qui avremo bisogno di un po' di codice,

01:55.760 --> 01:58.860
di una funzione che aggiunga un todo da qualche parte, per

01:58.860 --> 02:01.250
ora non specificherò alcun codice, ma imposterò

02:01.250 --> 02:03.380
solo la rotta in generale.

02:03.380 --> 02:05.110
Quindi abbiamo la richiesta

02:05.110 --> 02:08.770
post, poi una richiesta get, per ottenere tutti i todo,

02:08.770 --> 02:12.900
diciamo, poi anche una richiesta patch per aggiornare un todo,

02:12.900 --> 02:15.520
e mi aspetto di ottenere l'id, un segmento

02:15.520 --> 02:19.280
dinamico nell'URL, e poi qui anche una richiesta delete

02:19.280 --> 02:22.700
per cancellare un todo per id.

02:22.700 --> 02:25.720
Queste sono le mie rotte e ora possiamo esportare il router

02:25.720 --> 02:28.620
configurato come predefinito in questo file.

02:28.620 --> 02:30.930
Ora non succederà nulla su questi percorsi, giusto?

02:30.930 --> 02:32.510
Non ho impostato alcuna funzione

02:32.510 --> 02:35.830
che venga eseguita quando una richiesta raggiunge questi endpoint,

02:35.830 --> 02:38.620
ma almeno ora sappiamo quali rotte vogliamo; aggiungeremo

02:38.620 --> 02:41.740
le funzioni in un secondo momento.

02:41.740 --> 02:44.100
Per ora, colleghiamo il router qui, le rotte configurate al nostro

02:44.100 --> 02:48.320
server in esecuzione qui nell'applicazione. e per farlo basta importare

02:48.320 --> 02:54.290
le nostre, diciamo, todoRoutes da .

02:54.290 --> 02:54.290
/route/todos.

02:56.040 --> 02:58.910
Quindi stiamo importando il router esportato in todos

02:58.910 --> 03:01.610
nell'applicazione. e ora dobbiamo collegarlo

03:01.610 --> 03:03.390
alla nostra applicazione Express

03:03.390 --> 03:08.340
in esecuzione utilizzando app. e poi diciamo che vogliamo inoltrare

03:08.340 --> 03:10.800
tutte le richieste che iniziano con

03:10.800 --> 03:14.600
/todos alle nostre todoRoutes, quindi le richieste

03:14.600 --> 03:17.210
che puntano a un URL diverso non saranno

03:17.210 --> 03:18.703
gestite lì.

03:19.920 --> 03:23.730
A proposito di gestione, nell'impostazione del middleware Express che stiamo

03:23.730 --> 03:25.983
usando, possiamo anche impostare un middleware

03:25.983 --> 03:29.030
che gestisca gli errori, quindi qualsiasi errore che possa essere

03:29.030 --> 03:31.660
lanciato in qualsiasi punto del nostro codice, e lo facciamo

03:31.660 --> 03:33.610
con app. e poi configuriamo

03:33.610 --> 03:37.470
una tipica funzione middleware, dove otteniamo

03:37.470 --> 03:40.640
la richiesta, la risposta e la funzione

03:40.640 --> 03:45.430
successiva. js e conoscere

03:45.430 --> 03:48.330
Node. js, non mi addentrerò esattamente

03:48.330 --> 03:51.160
su come funziona il middleware in Express e su cosa

03:51.160 --> 03:52.970
sia il middleware.

03:52.970 --> 03:54.960
Si tratta quindi di una normale funzione middleware, come

03:54.960 --> 03:57.150
si dovrebbe sapere da Express. js, e probabilmente

03:57.150 --> 03:59.050
sapete anche che esiste un'alternativa

03:59.050 --> 04:02.310
a questa funzione, una funzione che prende quattro parametri

04:02.310 --> 04:04.680
in cui il primo parametro è un potenziale

04:04.680 --> 04:07.350
errore, e questa è una funzione middleware

04:07.350 --> 04:10.720
per la gestione degli errori, che verrà lanciata automaticamente

04:10.720 --> 04:15.290
da Express se in qualsiasi altro middleware precedente a questo si verifica

04:15.290 --> 04:18.750
un errore.

04:18.750 --> 04:21.200
Questa è la mia funzione middleware per la gestione degli errori

04:21.200 --> 04:23.380
e, come vedete, qui abbiamo una serie di errori.

04:23.380 --> 04:26.260
Ci sono un mucchio di errori, perché tutti questi

04:26.260 --> 04:29.030
valori sono di tipo any e non vengono utilizzati

04:29.030 --> 04:33.080
tutti, ma vorrei chiarire quali tipi abbiamo qui.

04:33.080 --> 04:35.510
Questo sarà di tipo Error, questo

04:35.510 --> 04:39.890
sarà di tipo express. Request, oppure si importa semplicemente

04:39.890 --> 04:43.020
Request qui come un extra chiamato import from express,

04:43.020 --> 04:45.540
questo funziona anche se si hanno i tipi di

04:45.540 --> 04:46.670
Express installati,

04:46.670 --> 04:49.310
come facciamo noi, quindi abbiamo anche Response

04:49.310 --> 04:54.310
e una NextFunction qui, e quindi possiamo regolare i nostri tipi qui, questo è ora di

04:54.490 --> 04:56.310
tipo Request, questo è di tipo Response

04:56.310 --> 04:59.230
e questa è la NextFunction che possiamo eseguire

04:59.230 --> 05:01.420
per lasciare che la richiesta continui

05:01.420 --> 05:03.650
il suo viaggio verso il prossimo middleware

05:03.650 --> 05:06.680
in linea.

05:06.680 --> 05:08.590
Questo è il nostro middleware per

05:08.590 --> 05:10.820
la gestione degli errori, che si attiverà

05:10.820 --> 05:13.030
ogni volta che si verificherà un errore

05:13.030 --> 05:15.000
in uno degli altri middleware e qui

05:15.000 --> 05:17.690
potremmo inviare una risposta con dati JSON, ad

05:17.690 --> 05:22.690
esempio, con un messaggio di errore. e dove forse abbiamo anche impostato,

05:22.855 --> 05:24.630
erro. e dove magari impostiamo

05:24.630 --> 05:28.510
anche un codice di stato 500. Naturalmente, si può avere una funzionalità

05:28.510 --> 05:29.610
di gestione degli errori

05:29.610 --> 05:32.460
più elaborata di quella che ho qui, ma con questo, abbiamo

05:32.460 --> 05:35.020
aggiunto le nostre rotte, abbiamo aggiunto il nostro

05:35.020 --> 05:38.830
middleware di gestione degli errori, perché non aggiungiamo ora un po'

05:38.830 --> 05:40.670
di logica a questa API nella prossima

05:40.670 --> 05:43.103
lezione.
