WEBVTT

00:02.150 --> 00:03.290
المدرب: يمكنك أيضًا

00:03.290 --> 00:05.890
تنفيذ الوراثة في الواجهات.

00:05.890 --> 00:10.890
لنفترض أن لدينا واجهة أخرى ، مسماة ، وهذه هي الواجهة

00:11.100 --> 00:13.600
التي تتأكد بالفعل من أن

00:13.600 --> 00:16.420
لدينا خاصية الاسم.

00:16.420 --> 00:18.510
الآن ، هنا في الشخص ، يمكننا تنفيذ

00:18.510 --> 00:20.950
Greetable and Named لإجبارنا على

00:20.950 --> 00:24.110
الحصول على كل من طريقة الترحيب والاسم.

00:24.110 --> 00:25.820
هذا شيء يمكننا القيام به.

00:25.820 --> 00:30.200
أو ، إذا علمنا أن Greetable تعتقد أن الكائنات القابلة للتحية

00:30.200 --> 00:31.810
تحتاج دائمًا إلى اسم ،

00:31.810 --> 00:34.500
فيمكننا التأكد من أن واجهة Greetable

00:34.500 --> 00:36.970
هذه تمد فعليًا واجهة Named ، بحيث تشكل

00:36.970 --> 00:40.120
معًا واجهة جديدة ، والتي تفرض على كل كائن بناءً

00:40.120 --> 00:43.460
على Greetable أن يكون لديه طريقة الترحيب ، ولكن

00:43.460 --> 00:46.150
أيضًا للحصول على اسم.

00:46.150 --> 00:48.840
وللقيام بذلك ، يمكننا إضافة امتدادات

00:48.840 --> 00:52.700
هنا ، على الواجهة أيضًا ، وقمنا بتوسيع Named.

00:52.700 --> 00:55.760
الآن ، كما قلت ، يشكل هذا واجهة جديدة ، وهي في النهاية

00:55.760 --> 00:58.330
واجهة تجبرنا على أن يكون لدينا طريقة

00:58.330 --> 01:00.760
ترحيب ، ولكن ليس هذا فقط ، فهي تفرض علينا

01:00.760 --> 01:03.140
أيضًا الحصول على كل ما تحدده الواجهة

01:03.140 --> 01:04.910
المسماة.

01:04.910 --> 01:07.150
في هذه الحالة ، خاصية الاسم.

01:07.150 --> 01:09.450
لذلك إذا قمت بإزالة الاسم هنا

01:09.450 --> 01:12.120
، فسأحصل بالفعل على خطأ ، لأن هذه الفئة

01:12.120 --> 01:14.860
الآن تنفذ بشكل غير صحيح واجهة Greetable

01:14.860 --> 01:17.600
، لأن اسم الخاصية مفقود.

01:17.600 --> 01:20.900
هذه أيضًا هي الطريقة التي يمكننا بها دمج الواجهات.

01:20.900 --> 01:23.410
لماذا نقوم بتقسيم واجهة مثل هذه؟

01:23.410 --> 01:25.600
حسنًا ، ربما يكون لديك تطبيق حيث

01:25.600 --> 01:27.810
تريد في بعض الكائنات فقط إجبارها

01:27.810 --> 01:31.120
على الحصول على اسم ، وليس طريقة ترحيب ، بينما في الكائنات

01:31.120 --> 01:34.630
الأخرى ، تحتاج إلى كل من الترحيب والاسم.

01:34.630 --> 01:36.830
مع هذا الانقسام ، هذا ممكن.

01:36.830 --> 01:40.630
يمكن لبعض الكائنات أو بعض الفئات تنفيذ Named فقط ، بينما

01:40.630 --> 01:42.590
يمكن للآخرين تنفيذ Greetable

01:42.590 --> 01:45.990
ويضطرون إلى الحصول على كل من الترحيب والاسم.

01:45.990 --> 01:48.490
لذا فإن تمديد الواجهات ممكن.

01:48.490 --> 01:50.880
وهناك يمكنك أيضًا تمديد أكثر من واحد.

01:50.880 --> 01:53.380
لذلك يمكنك دمج واجهات متعددة

01:53.380 --> 01:55.060
في واجهة واحدة.

01:55.060 --> 01:58.570
يمكننا دمج واجهة أخرى إذا كانت لدينا.

01:58.570 --> 02:00.860
ببساطة مفصولة بفاصلة.

02:00.860 --> 02:03.570
تذكر أنه بالنسبة للفصول ، لم يكن هذا ممكنًا.

02:03.570 --> 02:05.710
عندما تستخدم الأصناف في الوراثة

02:05.710 --> 02:07.920
، يمكنك أن ترث من فئة واحدة فقط.

02:07.920 --> 02:10.600
لا يمكنك أن ترث من فئات متعددة.

02:10.600 --> 02:12.490
لواجهات مختلفة.

02:12.490 --> 02:14.760
بالنسبة للواجهات ، يمكنك بالفعل

02:14.760 --> 02:16.920
أن ترث من واجهات متعددة ، لأنه في

02:16.920 --> 02:18.920
النهاية يتم دمجها جميعًا معًا

02:18.920 --> 02:21.430
، وفي ميزة TypeScript الصافية هذه ،

02:21.430 --> 02:23.010
والتي لم تتم ترجمتها في

02:23.010 --> 02:24.800
الواقع إلى JavaScript كما

02:24.800 --> 02:27.080
سترى ، يمكننا بالتالي كسر مجموعة

02:27.080 --> 02:29.250
القواعد لفئات JavaScript ، وتوسيع

02:29.250 --> 02:31.733
واجهات متعددة.
