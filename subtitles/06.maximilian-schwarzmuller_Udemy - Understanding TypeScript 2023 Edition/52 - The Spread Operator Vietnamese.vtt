WEBVTT

00:02.250 --> 00:04.530
Giảng viên: Chúng tôi cũng có các

00:04.530 --> 00:09.240
tính năng hữu ích liên quan đến mảng và đối tượng và cách chúng tôi có

00:09.240 --> 00:13.600
thể truy xuất dữ liệu được lưu trữ trong mảng và đối tượng.

00:13.600 --> 00:17.180
Bây giờ, để làm điều đó, hãy thêm một mảng mới ở đây, giả sử

00:17.180 --> 00:19.880
sở thích và đó có thể là một mảng các chuỗi.

00:22.520 --> 00:26.700
Như thể thao và nấu ăn ở đây và bây giờ rõ ràng là chúng

00:26.700 --> 00:31.700
ta có thể truy xuất các phần tử theo chỉ mục ở đây, ví dụ như

00:31.810 --> 00:33.030
thế này.

00:33.030 --> 00:36.150
Tuy nhiên, bạn nên biết những điều cơ bản về JavaScript này.

00:36.150 --> 00:40.310
JavaScript thế hệ tiếp theo, giới thiệu một tính năng hay nếu chúng ta muốn

00:41.172 --> 00:43.910
trích xuất tất cả các giá trị của một mảng.

00:43.910 --> 00:44.990
Khi nào bạn có thể cần điều đó?

00:44.990 --> 00:48.670
Chà, giả sử bạn có sở thích năng động và đó là

00:48.670 --> 00:53.670
mảng mà tôi có sở thích đi bộ đường dài, và bây giờ tôi muốn

00:54.200 --> 00:56.510
thêm thể thao và nấu ăn.

00:56.510 --> 00:58.960
Bây giờ, chúng ta có thể thêm một mục vào các sở thích

00:58.960 --> 01:01.290
đang hoạt động bằng cách gọi push, nhân tiện, trong

01:01.290 --> 01:05.620
trường hợp bạn đang tự hỏi làm thế nào tôi có thể push đến một hằng số, hãy nhớ rằng mảng là đối

01:05.620 --> 01:08.130
tượng và đối tượng là giá trị tham chiếu.

01:08.130 --> 01:11.010
Khi chúng tôi đẩy, chúng tôi thay đổi bộ nhớ nhưng không thay đổi địa chỉ.

01:11.010 --> 01:14.150
Nếu điều này không cho bạn biết bất cứ điều gì, hãy kiểm tra các

01:14.150 --> 01:17.390
tài nguyên bổ sung mà tôi đã đính kèm với bài giảng này về chủ đề đó,

01:17.390 --> 01:20.170
vì vậy hãy quay lại ví dụ này, chúng ta có thể nhấn vào đây,

01:20.170 --> 01:24.120
nhưng nhấn, nếu chúng ta nhấn vào sở thích, chúng ta sẽ thêm sở thích dưới dạng

01:24.120 --> 01:27.540
mảng mới trong mảng, do đó, như một mảng mới lồng nhau.

01:27.540 --> 01:30.920
Loại nào thực sự sẽ phát hiện ra nó, nó cho tôi biết

01:30.920 --> 01:33.690
rằng nếu tôi muốn thêm một mảng chuỗi vào

01:33.690 --> 01:36.143
một mảng chuỗi thì không được.

01:37.110 --> 01:40.390
Vì vậy, thay vì push nhận các giá trị đơn lẻ để chúng

01:40.390 --> 01:44.450
ta có thể chuyển sở thích bằng 0, trên thực tế, push thậm chí nhận

01:44.450 --> 01:47.450
một số lượng đối số không giới hạn để chúng ta có

01:47.450 --> 01:51.240
thể đẩy nhiều mục theo thứ tự cùng một lúc như vậy.

01:51.240 --> 01:54.013
Nhưng điều đó hơi cồng kềnh và đó là lúc Toán tử trải rộng

01:54.013 --> 01:54.890
xuất hiện.

01:54.890 --> 01:57.700
Nó trông giống như thế này, đó là ba dấu chấm và vâng,

01:57.700 --> 02:00.850
điều này có vẻ lạ nhưng đây là một Toán tử JavaScript hợp

02:00.850 --> 02:04.770
lệ được hỗ trợ bởi [Hypescript? ] và sau đó chúng tôi chỉ định

02:04.770 --> 02:09.547
hoặc chúng tôi chỉ vào mảng hoặc đối tượng như bạn cũng sẽ học, mà

02:09.547 --> 02:11.700
chúng tôi muốn trải rộng.

02:11.700 --> 02:15.160
Vì vậy, những gì điều này làm là, cuối cùng nó báo cho JavaScript

02:15.160 --> 02:17.690
bởi vì đó là Toán tử JavaScript Vanilla có

02:17.690 --> 02:21.070
sẵn trong JavaScript hiện đại, vì vậy nó yêu cầu JavaScript

02:21.070 --> 02:25.500
rút ra tất cả các phần tử sau mảng và về cơ bản thêm chúng dưới dạng danh sách

02:25.500 --> 02:28.530
các giá trị, vì vậy không phải là một mảng mà là danh

02:28.530 --> 02:31.900
sách các giá trị riêng lẻ ở nơi bạn đã sử dụng Toán tử, vì

02:31.900 --> 02:33.950
vậy, ví dụ ở đây là danh sách các đối

02:33.950 --> 02:36.090
số được truyền cho Push và bây giờ là

02:36.090 --> 02:39.180
nơi bạn có thể sử dụng trực tiếp khi bạn tạo một mảng

02:39.180 --> 02:41.740
mới.

02:41.740 --> 02:46.220
Ở đó bạn cũng có thể trải một mảng hiện có vào mảng đó.

02:46.220 --> 02:48.950
Vì vậy, về cơ bản, bất cứ khi nào bạn cần một danh sách các giá trị được

02:48.950 --> 02:51.460
phân tách bằng dấu phẩy, bạn có thể sử dụng Toán tử trải rộng với

02:51.460 --> 02:54.360
một mảng để nhận danh sách được phân tách bằng dấu phẩy như vậy.

02:54.360 --> 02:56.660
Đó là ý tưởng của Toán tử trải rộng và

02:56.660 --> 02:59.230
do đó, nó thực sự hữu ích để lấy ra các phần

02:59.230 --> 03:00.663
tử của một mảng.

03:01.860 --> 03:04.380
Toán tử trải rộng, tất cả những gì nó không

03:04.380 --> 03:07.880
chỉ tồn tại trên mảng, nó còn tồn tại trên các đối tượng.

03:07.880 --> 03:10.990
Giả sử chúng tôi có một người có khóa tên là

03:10.990 --> 03:14.070
Max và khóa h là 30 và bây giờ chúng tôi muốn

03:14.070 --> 03:16.640
tạo một người được sao chép.

03:16.640 --> 03:19.060
Bây giờ nếu chúng ta chỉ định một người như

03:19.060 --> 03:22.680
thế này, điều chúng ta đang làm thực ra là sao chép con trỏ tại

03:22.680 --> 03:25.000
đối tượng người này trong bộ nhớ vào hằng

03:25.000 --> 03:27.050
số người sao chép này.

03:27.050 --> 03:30.470
Và một lần nữa, hãy kiểm tra các tài nguyên giá trị tham chiếu của tôi được đính

03:30.470 --> 03:32.360
kèm nếu điều đó không cho bạn biết nhiều.

03:32.360 --> 03:36.190
Vì vậy, chúng tôi không thực sự tạo một bản sao của đối tượng đó.

03:36.190 --> 03:38.610
Bây giờ để tạo một bản sao thực sự, chúng ta có thể

03:38.610 --> 03:40.880
sử dụng toán tử trải rộng với các đối tượng.

03:40.880 --> 03:43.400
Chúng tôi tạo một đối tượng mới với dấu ngoặc

03:43.400 --> 03:46.510
nhọn và sau đó chúng tôi sử dụng Toán tử trải rộng, ba dấu

03:46.510 --> 03:49.630
chấm với đối tượng đầu tiên mà bạn muốn sao chép.

03:49.630 --> 03:52.970
Bây giờ những gì nó làm là nó lấy ra tất cả các phần tử nhưng

03:52.970 --> 03:56.310
tất nhiên ở đây các phần tử là các cặp giá trị chính chứ không

03:56.310 --> 03:58.630
phải các giá trị đơn lẻ như một mảng.

03:58.630 --> 04:00.550
Ở đây chúng tôi có các cặp giá trị chính.

04:00.550 --> 04:04.110
Vì vậy, các cặp giá trị khóa này được lấy ra khỏi đó và

04:04.110 --> 04:08.010
sau đó có thể được sử dụng ở bất kỳ nơi nào bạn cần các cặp giá

04:08.010 --> 04:11.310
trị khóa, thường là đối tượng không bao giờ bạn có

04:11.310 --> 04:12.920
thể thêm chúng vào.

04:12.920 --> 04:15.447
Vì vậy, đối với đối tượng trống rỗng này, các

04:15.447 --> 04:19.100
cặp giá trị chính của người hiện đã được thêm vào và vì chúng tôi đã

04:19.100 --> 04:21.240
tạo một đối tượng mới ở đây và chỉ cần thêm

04:21.240 --> 04:23.700
nó vào các cặp giá trị chính, chúng tôi đã có

04:23.700 --> 04:27.310
một bản sao hoàn hảo của đối tượng ban đầu chứ không chỉ của đối tượng

04:27.310 --> 04:29.080
ban đầu. con trỏ trỏ đến đối tượng

04:29.080 --> 04:30.803
trong bộ nhớ.
