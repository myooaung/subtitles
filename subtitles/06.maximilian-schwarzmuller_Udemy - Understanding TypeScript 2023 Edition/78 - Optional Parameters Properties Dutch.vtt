WEBVTT

00:02.180 --> 00:05.590
Instructeur: Laten we terugkomen op interfaces voor objecten.

00:05.590 --> 00:10.090
Je kunt ook optionele eigenschappen definiÃ«ren in interfaces

00:10.090 --> 00:14.100
en ook in klassen, zoals ik zal laten zien.

00:14.100 --> 00:16.437
Daarvoor voeg je de naam van je eigenschap

00:16.437 --> 00:20.740
toe, laten we zeggen 'outputName' hier, kan zijn wat je wilt natuurlijk, en

00:20.740 --> 00:22.238
dat moet een string zijn.

00:22.238 --> 00:26.400
Ik wil niet dat elke klasse op basis van Named dat

00:26.400 --> 00:27.630
moet hebben.

00:27.630 --> 00:31.120
Het moet optioneel zijn of je het wilt hebben of niet.

00:31.120 --> 00:34.289
U kunt een optionele eigenschap opgeven door een vraagteken

00:34.289 --> 00:37.670
toe te voegen na de naam van de eigenschap.

00:37.670 --> 00:40.130
Dit vertelt Tivescript dat deze eigenschap

00:40.130 --> 00:44.060
kan bestaan in klassen die deze interface implementeren, maar

00:44.060 --> 00:45.680
dat dit niet hoeft.

00:45.680 --> 00:48.540
En daarom krijgen we hier geen fout in 'Person',

00:48.540 --> 00:51.180
ook al heb ik geen uitvoernaam eigenschap

00:51.180 --> 00:53.440
omdat die optioneel is.

00:53.440 --> 00:56.072
Nu kan ik hier natuurlijk een uitvoernaam toevoegen

00:56.072 --> 00:59.130
en deze initialiseren met een waarde of gebruiken zoals

00:59.130 --> 01:02.800
elke andere eigenschap, maar dat hoeft niet.

01:02.800 --> 01:06.720
Nu kun je op een klasse ook een optionele eigenschap hebben.

01:06.720 --> 01:09.670
Dezelfde naam moet hier optioneel zijn,

01:09.670 --> 01:13.840
want misschien krijgen we hier geen waarde voor N.

01:13.840 --> 01:16.010
We kunnen hier ook een vraagteken toevoegen

01:16.010 --> 01:17.460
in onze klas.

01:17.460 --> 01:20.890
Nu moeten we het hier in Named ook gewoon optioneel maken,

01:20.890 --> 01:23.610
anders overtreden we onze interface die dit

01:23.610 --> 01:26.012
dwingt een string te zijn.

01:26.012 --> 01:29.000
Nu zeg ik dat dit optioneel kan zijn.

01:29.000 --> 01:30.510
Dus hier is het niet optioneel,

01:30.510 --> 01:32.750
en hier als ik dit gelijk stel aan

01:32.750 --> 01:37.640
N, wil ik dit alleen doen als N waar is, als het is ingesteld.

01:37.640 --> 01:40.080
Dus alleen als het geen lege string is bijvoorbeeld.

01:40.080 --> 01:43.340
Anders wordt naam niet ingesteld en dat is goed, want

01:43.340 --> 01:46.524
ik heb er een optionele eigenschap van gemaakt,

01:46.524 --> 01:49.853
zowel hier in de interface als in mijn klasse.

01:50.790 --> 01:53.070
Als we nu een nieuw object construeren, zouden

01:53.070 --> 01:56.203
we dit kunnen doen zonder een naam door te geven.

01:57.060 --> 01:59.813
Om dat toe te staan, moeten we naar de constructor

01:59.813 --> 02:02.600
gaan en hier een standaardwaarde opgeven of

02:02.600 --> 02:05.120
ook een vraagteken toevoegen.

02:05.120 --> 02:06.260
Dit is allemaal om het toe te staan.

02:06.260 --> 02:08.800
U kunt optionele parameters toevoegen door

02:08.800 --> 02:12.170
een standaard terugvalwaarde te geven of door een vraagteken

02:12.170 --> 02:13.990
toe te voegen, in welk geval de standaardwaarde

02:13.990 --> 02:17.170
ongedefinieerd zal zijn.

02:17.170 --> 02:20.450
En nu kunnen we deze constructor aanroepen zonder waarde, omdat

02:20.450 --> 02:22.446
we die optionele parameter hebben en

02:22.446 --> 02:25.960
omdat we de optionele eigenschap hebben die in orde is, hoeven we

02:25.960 --> 02:27.930
die niet te initialiseren.

02:27.930 --> 02:29.648
En dus daarna als je groet,

02:29.648 --> 02:33.510
nou deze naam zal natuurlijk ongedefinieerd opleveren.

02:33.510 --> 02:35.640
Dus waarschijnlijk moeten we ook hier controleren of we een

02:35.640 --> 02:37.000
naam hebben, en als dat zo is, kunnen we

02:37.000 --> 02:39.100
de console gebruiken. log dit.

02:39.100 --> 02:42.970
Anders troosten we. log "hi" zonder enige verwijzing

02:42.970 --> 02:45.200
naar de naam omdat we die niet hebben.

02:45.200 --> 02:47.170
Als we zeggen dat als alles compileert

02:47.170 --> 02:48.840
en we zien alleen hi hier

02:48.840 --> 02:51.520
omdat het geen naam gaf.

02:51.520 --> 02:53.950
Dat zijn dus optionele eigenschappen,

02:53.950 --> 02:56.008
zowel in een klasse als in een interface

02:56.008 --> 02:59.910
en ook in mijn constructielijst hier.

02:59.910 --> 03:01.660
Voor alle duidelijkheid: deze

03:01.660 --> 03:04.790
drie dingen houden slechts losjes verband met elkaar.

03:04.790 --> 03:07.980
Je kunt een optionele eigenschap in een interface implementeren

03:07.980 --> 03:11.910
als een niet-optionele eigenschap in de klasse.

03:11.910 --> 03:14.550
Je moet er dan alleen voor zorgen dat je logica zodanig

03:14.550 --> 03:17.810
is dat dit altijd geÃ¯nitialiseerd wordt anders krijg je een foutmelding

03:17.810 --> 03:19.720
zoals je net zag.

03:19.720 --> 03:22.180
Of je hebt een optionele eigenschap in

03:23.723 --> 03:26.870
een interface en een optionele eigenschap in je

03:26.870 --> 03:31.630
klasse, dan hoef je hier niet in alle gevallen een waarde toe te kennen.

03:31.630 --> 03:34.210
En daarnaast, en hier totaal los van, kun je

03:34.210 --> 03:36.020
optionele parameters hebben in

03:36.020 --> 03:38.300
functies en dus ook in methoden, inclusief

03:38.300 --> 03:40.300
de constructormethode.

03:40.300 --> 03:42.670
Optionele parameters worden ofwel met het vraagteken

03:42.670 --> 03:43.810
gedefinieerd, waarbij

03:43.810 --> 03:48.040
de standaardwaarde, indien niet ingesteld, dus ongedefinieerd is, ofwel eenvoudigweg

03:48.040 --> 03:51.690
door een standaardwaarde toe te kennen zoals hier.

03:51.690 --> 03:53.785
Zoals u leert, is dit ook optioneel

03:53.785 --> 03:56.960
en wordt de standaardwaarde aangenomen als u geen specifiekere

03:56.960 --> 03:58.750
waarde opgeeft.

03:58.750 --> 04:00.720
Dit geeft je dus meer flexibiliteit in

04:00.720 --> 04:02.950
hoe je je klassen structureert, en wanneer

04:02.950 --> 04:04.770
we het hebben over interfaces, hoe

04:04.770 --> 04:06.860
je je contracten structureert waaraan

04:06.860 --> 04:09.103
klassen zich zouden moeten houden.
