WEBVTT

00:02.200 --> 00:04.920
Palestrante: Assim são as classes, propriedades

00:04.920 --> 00:07.510
e herança com Typescript.

00:07.510 --> 00:08.343
E como mencionei,

00:08.343 --> 00:10.260
estas características embora geralmente

00:10.260 --> 00:12.490
sejam suportadas em Javascript, em Javascript

00:12.490 --> 00:14.230
moderno, naturalmente com exceção

00:14.230 --> 00:16.940
das atribuições de tipo, e também com exceção

00:16.940 --> 00:21.060
de público privado protegido.

00:21.060 --> 00:24.770
Estas palavras-chave estão realmente disponíveis apenas em Typescript.

00:24.770 --> 00:28.560
Mas agora não é tudo o que se pode fazer com as aulas.

00:28.560 --> 00:29.940
Sempre que necessário,

00:29.940 --> 00:32.840
o que você também tem em baunilha JavaScript,

00:32.840 --> 00:35.670
no qual também é suportado em Typescript,

00:35.670 --> 00:38.610
são getters e setters.

00:38.610 --> 00:42.050
Agora vamos ver que aqui no departamento de contabilidade,

00:42.050 --> 00:43.390
por exemplo, digamos

00:43.390 --> 00:47.450
que temos um último relatório, propriedade.

00:47.450 --> 00:51.630
Que é uma propriedade privada, e é um tipo de cordão,

00:51.630 --> 00:53.310
por isso temos isso.

00:53.310 --> 00:56.480
E então aqui inicializamos isto, para ser nossos

00:56.480 --> 01:01.480
relatórios argumento de ordens de propriedade que estamos recebendo

01:02.270 --> 01:04.880
aqui e eles são o primeiro valor.

01:04.880 --> 01:07.877
O que, é claro, é basicamente indefinido se passarmos para dentro

01:07.877 --> 01:09.890
e esvaziarmos a matriz de relatórios.

01:09.890 --> 01:14.680
Agora quando acrescentamos um relatório, então eu quero definir este último

01:14.680 --> 01:17.010
relatório, igual ao texto.

01:17.010 --> 01:20.440
Que é o que adicionamos ao nosso conjunto de relatórios.

01:20.440 --> 01:23.890
Agora o último relatório é privado, por isso podemos

01:23.890 --> 01:26.250
acessá-lo de dentro deste método, mas

01:26.250 --> 01:28.590
não poderemos acessá-lo de fora com

01:28.590 --> 01:30.240
a notação de pontos.

01:30.240 --> 01:33.440
Agora podemos acrescentar um getter, para ainda torná-lo acessível.

01:33.440 --> 01:36.020
Um getter é basicamente uma propriedade, onde

01:36.020 --> 01:38.670
você executa uma função ou método, quando você

01:38.670 --> 01:40.910
recupera um valor e que lhe permite, como

01:40.910 --> 01:42.380
desenvolvedor, adicionar

01:42.380 --> 01:44.460
uma lógica mais complexa.

01:44.460 --> 01:47.560
Aqui, você cria um getter usando a palavra-chave get, e depois

01:47.560 --> 01:49.250
qualquer nome de sua escolha.

01:49.250 --> 01:51.810
Tipicamente relacionado ao bem ao qual você

01:51.810 --> 01:54.180
está tentando controlar o acesso.

01:54.180 --> 01:58.180
Por exemplo, aqui poderíamos citar o relatório mais recente.

01:58.180 --> 01:59.340
Qualquer coisa desse tipo.

01:59.340 --> 02:01.630
Agora, importante, isto é definido como um método.

02:01.630 --> 02:04.260
Então você adiciona parênteses e, em seguida, um parêntesis e depois um aparelho de frisar.

02:04.260 --> 02:07.250
E agora aqui dentro, você tem que devolver

02:07.250 --> 02:11.990
algo, que é um método importante, tem que devolver algo.

02:11.990 --> 02:14.610
Portanto, você poderia devolver este último relatório,

02:14.610 --> 02:16.660
e então nós meio que encapsulamos isto,

02:16.660 --> 02:19.570
porque isto é acessível ao público agora.

02:19.570 --> 02:22.720
Mas muitas vezes você quer ter uma lógica mais complexa aqui.

02:22.720 --> 02:26.240
Portanto, aqui poderíamos verificar se temos um valor aqui, portanto,

02:26.240 --> 02:27.600
se isto é verdade.

02:27.600 --> 02:28.960
Se não estiver indefinido,

02:28.960 --> 02:31.520
então queremos retornar o último relatório,

02:31.520 --> 02:34.440
caso contrário, podemos querer retornar alguma lógica

02:34.440 --> 02:37.850
diferente, por exemplo, digamos que caso contrário, lançamos

02:37.850 --> 02:42.650
uma mensagem de erro com um novo erro, nenhum relatório encontrado.

02:42.650 --> 02:46.650
Então agora adicionamos mais lógica, lógica mais complexa, a esta propriedade

02:46.650 --> 02:49.200
e quando queremos recuperá-la, não podemos recuperar

02:49.200 --> 02:51.500
diretamente esta propriedade através da notação

02:51.500 --> 02:55.290
de pontos, mas podemos usá-la como uma propriedade até o final executar

02:55.290 --> 02:57.240
esta lógica.

02:57.240 --> 02:58.810
Então, como isso funcionaria?

02:58.810 --> 03:02.170
Bem lá embaixo, onde eu crio meu departamento de Contabilidade.

03:02.170 --> 03:08.693
Antes de acrescentar meu relatório, se eu tentasse fazer o Log Console, a contabilidade.

03:08.693 --> 03:08.693
mais

03:09.630 --> 03:11.010
recente, e agora importante.

03:11.010 --> 03:13.902
Oops, contabilidade. maisrecentrosport.

03:13.902 --> 03:16.890
E agora é importante que você acesse isto como uma propriedade.

03:16.890 --> 03:18.690
Portanto, aqui não há parênteses.

03:18.690 --> 03:20.570
Você não executa isto como um método.

03:20.570 --> 03:23.030
Você apenas acessa como uma propriedade

03:23.030 --> 03:24.460
normal, e nos bastidores,

03:24.460 --> 03:27.890
isto executará este método lá em cima.

03:27.890 --> 03:31.670
Portanto, se eu tentar fazer isso agora antes de acrescentarmos nosso

03:31.670 --> 03:33.940
relatório, veremos que este foi reconstruído

03:33.940 --> 03:35.440
sem erros, recompilado sem

03:35.440 --> 03:38.550
erros, mas é claro que aqui é lançado um erro, é nosso costume

03:38.550 --> 03:40.820
nenhum relatório encontrou erro, porque

03:40.820 --> 03:42.820
nenhum relatório foi acrescentado

03:42.820 --> 03:45.370
ainda, e, uma vez que usando isto como um getter,

03:45.370 --> 03:48.310
acessa este método e o executa.

03:48.310 --> 03:51.560
Se não tivermos nenhum relatório, não chegamos a esta verificação

03:51.560 --> 03:52.830
IF, ou a esta declaração

03:52.830 --> 03:55.693
IF, e portanto esta linha aqui, entra em ação.

03:56.590 --> 04:00.250
Como uma alternativa, se pudéssemos baixar isso, depois de adicionarmos

04:00.250 --> 04:02.210
um relatório, é claro que podemos

04:02.210 --> 04:04.100
salvar isso, e não teremos mais um

04:04.100 --> 04:05.730
erro, mas, em vez disso, emitiremos

04:05.730 --> 04:08.400
este último relatório.

04:08.400 --> 04:09.750
Então, isso é um getter.

04:09.750 --> 04:12.190
E você também pode adicionar um setter.

04:12.190 --> 04:14.550
Um setter é adicionado quase da mesma forma.

04:14.550 --> 04:16.290
Você usa a palavra-chave definida

04:16.290 --> 04:18.630
e, novamente, qualquer nome de sua escolha.

04:18.630 --> 04:21.940
tipicamente um nome relacionado ao imóvel que deve

04:21.940 --> 04:22.870
ser definido.

04:22.870 --> 04:25.570
Portanto, aqui vou reutilizar o relatório mais recente.

04:25.570 --> 04:27.840
Para que possamos usar isto tanto para ler um valor quanto

04:27.840 --> 04:29.150
para definir um valor.

04:29.150 --> 04:30.090
E então, novamente,

04:30.090 --> 04:31.850
você definiu isto como um método.

04:31.850 --> 04:34.850
Mas agora, isto precisa de um argumento.

04:34.850 --> 04:38.630
O valor que o usuário teria passado.

04:38.630 --> 04:40.940
Aqui deve haver um valor de string,

04:40.940 --> 04:44.110
e agora aqui você pode executar qualquer lógica

04:44.110 --> 04:46.160
que queira armazenar isto.

04:46.160 --> 04:48.530
Agora aqui, já que estavam passando em um valor

04:48.530 --> 04:51.890
para o relatório mais recente, eu, no final, quero executar o relatório

04:51.890 --> 04:53.080
de adição.

04:53.080 --> 04:55.370
Portanto, aqui um setter poderia ser simplesmente uma alternativa

04:55.370 --> 04:57.140
ao método de relatório de adição.

04:57.140 --> 05:01.280
Portanto, aqui podemos acessar este relatório adicional.

05:01.280 --> 05:03.760
Isto é necessário, uma vez que estamos dentro da classe.

05:03.760 --> 05:07.280
Referimo-nos à classe, e depois a este método de classe aqui.

05:07.280 --> 05:10.380
E agora podemos simplesmente avançar valor aqui.

05:10.380 --> 05:12.310
Agora poderíamos acrescentar uma

05:12.310 --> 05:16.130
lógica mais complexa, e também verificar se o valor talvez não esteja

05:16.130 --> 05:19.810
definido se é falso, e então simplesmente retornar ou lançar um

05:19.810 --> 05:24.020
novo erro, onde dizemos por favor passar em um valor válido.

05:24.020 --> 05:26.140
Isso é algo que também poderíamos fazer.

05:26.140 --> 05:29.010
E agora estamos usando um setter aqui também.

05:29.010 --> 05:31.330
Com isso adicionado, podemos testá-lo.

05:31.330 --> 05:33.193
Lá embaixo, eu poderia acrescentar o relatório

05:35.400 --> 05:36.570
mais recente.

05:36.570 --> 05:38.780
Eu poderia acessar isso na contabilidade, e assim

05:38.780 --> 05:40.770
mesmo leríamos a partir dela, mas agora adicionando

05:40.770 --> 05:42.300
um sinal de igualdade, estamos tentando

05:42.300 --> 05:44.520
definir um valor para isso, e isso irá desencadear

05:44.520 --> 05:47.150
este método de setter.

05:47.150 --> 05:50.090
Novamente pouco antes de não executá-lo como um método, mas simplesmente

05:50.090 --> 05:52.383
acessá-lo como uma propriedade.

05:53.220 --> 05:56.030
Agora aqui se eu passar em uma corda vazia, então

05:56.030 --> 05:58.770
nós tecnicamente passamos em uma corda, mas

05:58.770 --> 06:02.760
uma corda vazia será tratada como falsa, veja aqui.

06:02.760 --> 06:04.950
E, portanto, devemos agora receber um erro.

06:04.950 --> 06:07.450
Portanto, se eu salvar esta linha de código, se eu

06:07.450 --> 06:09.850
salvar o código com esta linha de código adicionada,

06:11.120 --> 06:14.530
nós recebemos este erro, por favor, passe um valor válido.

06:14.530 --> 06:17.010
Mas se eu passar em um valor válido,

06:17.010 --> 06:22.010
se eu disser relatório de final de ano aqui, por exemplo, e agora

06:22.250 --> 06:23.900
eu guardo isto.

06:23.900 --> 06:27.210
Agora você verá todos os trabalhos e o relatório de final de ano

06:27.210 --> 06:29.620
faz parte de nossa lista de relatórios.

06:29.620 --> 06:31.150
Portanto, estes são getters e setters,

06:31.150 --> 06:33.620
o que pode ser ótimo para encapsular lógica, e para adicionar

06:33.620 --> 06:35.390
lógica extra, que deve funcionar quando

06:35.390 --> 06:38.050
você tenta ler uma propriedade, ou quando você tenta definir

06:38.050 --> 06:40.243
uma propriedade.
