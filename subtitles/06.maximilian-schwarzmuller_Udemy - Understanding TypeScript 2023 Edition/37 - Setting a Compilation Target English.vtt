WEBVTT

1
00:00:02.450 --> 00:00:04.810
<v Instructor>So now that we have a understanding</v>

2
00:00:04.810 --> 00:00:07.850
of how we can manage our files with the compiler,

3
00:00:07.850 --> 00:00:09.870
let's dive into the compiler options,

4
00:00:09.870 --> 00:00:11.300
because that's really interesting.

5
00:00:11.300 --> 00:00:13.860
This allows us to control

6
00:00:13.860 --> 00:00:16.620
how our TypeScript code is compiled,

7
00:00:16.620 --> 00:00:18.360
so not only which files,

8
00:00:18.360 --> 00:00:20.920
but also how the files which are getting compiled

9
00:00:20.920 --> 00:00:23.230
are treated by TypeScript.

10
00:00:23.230 --> 00:00:26.760
And there you see we have a bunch of options.

11
00:00:26.760 --> 00:00:29.560
You got short explanations next to these options.

12
00:00:29.560 --> 00:00:32.450
Some explanations arguably are a big cryptic.

13
00:00:32.450 --> 00:00:34.210
Others are quite clear.

14
00:00:34.210 --> 00:00:36.450
And I will say that a lot of these options,

15
00:00:36.450 --> 00:00:39.950
most of these options will not matter in most projects.

16
00:00:39.950 --> 00:00:43.900
So, you'll not set all of these options, not even close.

17
00:00:43.900 --> 00:00:46.070
You typically can ignore a lot of these options.

18
00:00:46.070 --> 00:00:48.765
Now I will pick up on the important options here

19
00:00:48.765 --> 00:00:50.230
throughout this course,

20
00:00:50.230 --> 00:00:52.140
because some options only make sense

21
00:00:52.140 --> 00:00:53.911
when we learn about a certain feature.

22
00:00:53.911 --> 00:00:55.940
And I want to dive into some options

23
00:00:55.940 --> 00:00:57.250
right now already though.

24
00:00:57.250 --> 00:01:00.840
And for that, let's go through the file from top to bottom

25
00:01:00.840 --> 00:01:02.340
and see what we got there.

26
00:01:02.340 --> 00:01:04.410
Let's start with the target option.

27
00:01:04.410 --> 00:01:07.230
As you see, this actually is set by default.

28
00:01:07.230 --> 00:01:08.750
It's not commented out.

29
00:01:08.750 --> 00:01:10.780
And what you do with this option

30
00:01:10.780 --> 00:01:15.530
is you tell TypeScript for which target JavaScript version

31
00:01:15.530 --> 00:01:16.970
you want to compile the code.

32
00:01:16.970 --> 00:01:18.850
Because what TypeScript does is

33
00:01:18.850 --> 00:01:21.600
it does not just compile new features

34
00:01:21.600 --> 00:01:23.500
like the type annotations

35
00:01:23.500 --> 00:01:26.960
that don't exist in JavaScript to JavaScript code.

36
00:01:26.960 --> 00:01:29.667
So it does not just take care that

37
00:01:29.667 --> 00:01:33.270
this here works.

38
00:01:33.270 --> 00:01:37.530
It also compiles the code to JavaScript

39
00:01:37.530 --> 00:01:41.370
that runs in a certain set of browsers.

40
00:01:41.370 --> 00:01:43.798
And you basically define which browsers

41
00:01:43.798 --> 00:01:46.980
support the compile code by setting the target.

42
00:01:46.980 --> 00:01:49.520
The default target here in this project as you see,

43
00:01:49.520 --> 00:01:52.430
the initial target which is getting set up is es5,

44
00:01:52.430 --> 00:01:55.517
which means all types of code is compiled down.

45
00:01:55.517 --> 00:01:57.550
We can actually see that.

46
00:01:57.550 --> 00:02:00.770
If I run TSC here to compile all my files,

47
00:02:00.770 --> 00:02:03.260
we see in app.ts I'm using let and const,

48
00:02:03.260 --> 00:02:05.732
but in app.js, we se var.

49
00:02:05.732 --> 00:02:09.890
And that happens because we got a target of es5

50
00:02:09.890 --> 00:02:13.816
and in es5 world, we don't have let and const.

51
00:02:13.816 --> 00:02:16.810
So the good thing here is that we can use TypeScript

52
00:02:16.810 --> 00:02:20.650
to generate code that works in older browsers as well.

53
00:02:20.650 --> 00:02:22.930
But it's totally up to use if we want to do that.

54
00:02:22.930 --> 00:02:25.550
Maybe we don't want to do that with TypeScript,

55
00:02:25.550 --> 00:02:27.670
because maybe we got some other build tool

56
00:02:27.670 --> 00:02:30.560
that will then take care about the JavaScript transpilation

57
00:02:30.560 --> 00:02:33.290
and therefore we don't want to have TypeScript do that,

58
00:02:33.290 --> 00:02:35.340
or maybe we wanna ship code

59
00:02:35.340 --> 00:02:37.030
that only works in modern browsers

60
00:02:37.030 --> 00:02:41.170
because we know our app only will run in modern browsers.

61
00:02:41.170 --> 00:02:44.160
And therefore, alternative options can be seen here

62
00:02:44.160 --> 00:02:46.070
if you delete the value

63
00:02:46.070 --> 00:02:48.080
and then here in vscode at least,

64
00:02:48.080 --> 00:02:51.300
if you hit Control + Space to get the auto-completion,

65
00:02:51.300 --> 00:02:54.180
you see a bunch of suggestions

66
00:02:54.180 --> 00:02:56.450
and you see all available values here.

67
00:02:56.450 --> 00:02:58.700
Now over time, this of course will change

68
00:02:58.700 --> 00:03:01.900
because we have got new JavaScript versions released.

69
00:03:01.900 --> 00:03:03.785
You saw we set this to es5 before.

70
00:03:03.785 --> 00:03:06.150
If you don't specify target at all,

71
00:03:06.150 --> 00:03:09.520
then right now, TypeScript compiles to es3 even,

72
00:03:09.520 --> 00:03:12.200
so it supports an even older version.

73
00:03:12.200 --> 00:03:15.130
But you can also go with es6, which is more modern,

74
00:03:15.130 --> 00:03:17.510
which, for example, supports const and let

75
00:03:17.510 --> 00:03:19.310
or take an even more recent version,

76
00:03:19.310 --> 00:03:24.310
es6 is equivalent to es2015, just for the record.

77
00:03:24.870 --> 00:03:27.480
So if we set this to es6, for example,

78
00:03:27.480 --> 00:03:29.580
and I rerun the tsc command

79
00:03:29.580 --> 00:03:32.460
after changing the tsconfig.json file,

80
00:03:32.460 --> 00:03:35.440
you will see that now in app.js, we got let and const,

81
00:03:35.440 --> 00:03:38.130
because now that is supported there.

82
00:03:38.130 --> 00:03:39.340
So that is up to you.

83
00:03:39.340 --> 00:03:41.720
Of course, the more modern

84
00:03:41.720 --> 00:03:43.641
of a JavaScript version you pick here,

85
00:03:43.641 --> 00:03:47.450
the more concise your generated code is

86
00:03:47.450 --> 00:03:50.440
because TypeScript has to compile less and less code,

87
00:03:50.440 --> 00:03:54.010
or it has to work around non-existing features

88
00:03:54.010 --> 00:03:56.190
in less situations, and therefore,

89
00:03:56.190 --> 00:03:57.820
the compiled code typically is done

90
00:03:57.820 --> 00:03:59.560
more concise and shorter.

91
00:03:59.560 --> 00:04:01.150
So that's target.

92
00:04:01.150 --> 00:04:02.623
What about the other options?

