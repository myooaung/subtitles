WEBVTT

00:02.250 --> 00:04.530
Instructeur : Nous avons également obtenu

00:04.530 --> 00:09.240
des fonctionnalités utiles liées aux tableaux et aux objets et comment nous pouvons

00:09.240 --> 00:13.600
récupérer les données qui sont stockées dans les tableaux et les objets.

00:13.600 --> 00:17.180
Maintenant, pour cela, ajoutons un nouveau tableau ici, disons hobbies

00:17.180 --> 00:19.880
et cela peut être un tableau de chaînes de caractères.

00:22.520 --> 00:26.700
Comme les sports et la cuisine ici et maintenant évidemment

00:26.700 --> 00:31.700
nous pouvons récupérer des éléments par index ici, comme ceci par

00:31.810 --> 00:33.030
exemple.

00:33.030 --> 00:36.150
Mais, vous devez connaître ces éléments de base de JavaScript.

00:36.150 --> 00:40.310
Next Gen JavaScript, introduit une fonctionnalité intéressante si nous voulons

00:41.172 --> 00:43.910
extraire toutes les valeurs d'un tableau.

00:43.910 --> 00:44.990
Quand pourrais-tu en avoir besoin ?

00:44.990 --> 00:48.670
Disons que vous avez les passe-temps actifs et que c'est

00:48.670 --> 00:53.670
un éventail où j'ai la randonnée comme passe-temps, et maintenant je veux

00:54.200 --> 00:56.510
ajouter le sport et la cuisine.

00:56.510 --> 00:58.960
Maintenant, nous pouvons ajouter un élément aux loisirs

00:58.960 --> 01:01.290
actifs en appelant push, au cas où vous vous demanderiez

01:01.290 --> 01:05.620
comment je peux pousser vers une constante, gardez à l'esprit que les tableaux sont des objets et

01:05.620 --> 01:08.130
que les objets sont des valeurs de référence.

01:08.130 --> 01:11.010
Quand on pousse, on change une mémoire mais pas l'adresse.

01:11.010 --> 01:14.150
Si cela ne vous dit rien, consultez les ressources supplémentaires

01:14.150 --> 01:17.390
que j'ai jointes à ce cours sur ce sujet. Revenons donc à cet exemple,

01:17.390 --> 01:20.170
nous pouvons pousser ici, mais si nous poussons les hobbies,

01:20.170 --> 01:24.120
nous ajouterons les hobbies comme un nouveau tableau dans le tableau, donc

01:24.120 --> 01:27.540
comme un nouveau tableau imbriqué.

01:27.540 --> 01:30.920
Les types qui le détectent en fait, me disent que si je

01:30.920 --> 01:33.690
veux ajouter un tableau de chaînes à un tableau

01:33.690 --> 01:36.143
de chaînes, ce n'est pas correct.

01:37.110 --> 01:40.390
Donc, au lieu de prendre des valeurs uniques, nous pourrions

01:40.390 --> 01:44.450
passer des hobbies zéro, en fait, push prend même une quantité illimitée

01:44.450 --> 01:47.450
d'arguments afin que nous puissions pousser plusieurs

01:47.450 --> 01:51.240
éléments dans l'ordre à la fois comme ça.

01:51.240 --> 01:54.013
Mais c'est un peu lourd et c'est là qu'intervient le Spread

01:54.013 --> 01:54.890
Operator.

01:54.890 --> 01:57.700
Cela ressemble à ça, c'est trois points et oui, cela

01:57.700 --> 02:00.850
semble étrange mais c'est un opérateur JavaScript valide

02:00.850 --> 02:04.770
supporté par [Hypescript ? ] et après cela, nous spécifions

02:04.770 --> 02:09.547
ou nous indiquons le tableau ou l'objet, comme vous l'apprendrez également,

02:09.547 --> 02:11.700
que nous voulons étendre.

02:11.700 --> 02:15.160
Ce qu'il fait, c'est qu'il demande à JavaScript

02:15.160 --> 02:17.690
de retirer tous les éléments

02:17.690 --> 02:21.070
du tableau et de les ajouter sous forme

02:21.070 --> 02:25.500
de liste de valeurs, non pas sous forme de tableau,

02:25.500 --> 02:28.530
mais sous forme de liste de valeurs

02:28.530 --> 02:33.950
individuelles à l'endroit où vous avez utilisé un opérateur,

02:33.950 --> 02:36.090
comme ici, par exemple,

02:36.090 --> 02:41.740
une liste d'arguments passés à push.

02:41.740 --> 02:46.220
Vous pouvez également y étendre un tableau existant dans ce tableau.

02:46.220 --> 02:48.950
Ainsi, chaque fois que vous avez besoin d'une liste de valeurs séparées

02:48.950 --> 02:51.460
par des virgules, vous pouvez utiliser l'opérateur d'étalement

02:51.460 --> 02:54.360
avec un tableau pour obtenir une telle liste séparée par des virgules.

02:54.360 --> 02:56.660
C'est l'idée de l'opérateur d'étalement

02:56.660 --> 02:59.230
et il est donc très utile pour extraire les éléments

02:59.230 --> 03:00.663
d'un tableau.

03:01.860 --> 03:04.380
L'opérateur d'étalement, tout ce qu'il n'existe

03:04.380 --> 03:07.880
pas seulement sur les tableaux, il existe aussi sur les objets.

03:07.880 --> 03:10.990
Disons que nous avons une personne qui a une clé de

03:10.990 --> 03:14.070
nom, Max et une clé h qui est 30 et maintenant nous

03:14.070 --> 03:16.640
voulons créer une personne copiée.

03:16.640 --> 03:19.060
Maintenant, si nous assignons simplement une

03:19.060 --> 03:22.680
personne comme ceci, ce que nous faisons est en fait de copier le pointeur

03:22.680 --> 03:25.000
de cet objet personne en mémoire dans cette

03:25.000 --> 03:27.050
constante copy person.

03:27.050 --> 03:30.470
Et encore une fois, vérifiez mes ressources de valeur de référence jointes

03:30.470 --> 03:32.360
si cela ne vous dit pas grand-chose.

03:32.360 --> 03:36.190
Donc, nous ne créons pas vraiment une copie de cet objet.

03:36.190 --> 03:38.610
Maintenant, pour créer une véritable copie, nous pouvons

03:38.610 --> 03:40.880
utiliser l'opérateur d'étalement avec des objets.

03:40.880 --> 03:43.400
Nous créons un nouvel objet avec des accolades et

03:43.400 --> 03:46.510
ensuite nous utilisons l'opérateur d'étalement, trois points

03:46.510 --> 03:49.630
avec notre premier objet que vous voulez copier.

03:49.630 --> 03:52.970
Maintenant, ce que cela fait, c'est qu'il sort tous les éléments,

03:52.970 --> 03:56.310
mais bien sûr ici les éléments sont des paires clé-valeur et non des

03:56.310 --> 03:58.630
valeurs uniques comme dans un tableau.

03:58.630 --> 04:00.550
Ici, nous avons des paires clé-valeur.

04:00.550 --> 04:04.110
Ces paires de clés et de valeurs sont donc extraites et peuvent

04:04.110 --> 04:08.010
être utilisées partout où vous avez besoin de paires de clés et de valeurs,

04:08.010 --> 04:11.310
c'est-à-dire généralement dans un objet auquel vous ne les

04:11.310 --> 04:12.920
ajoutez jamais.

04:12.920 --> 04:15.447
Ainsi donc, à cet objet autrement vide, les paires

04:15.447 --> 04:19.100
clé-valeur de personne sont maintenant ajoutées et puisque nous avons

04:19.100 --> 04:21.240
créé un nouvel objet ici, et que nous l'ajoutons

04:21.240 --> 04:23.700
simplement aux paires clé-valeur, nous avons

04:23.700 --> 04:27.310
obtenu une copie parfaite de l'objet original et pas seulement du pointeur

04:27.310 --> 04:30.803
qui pointe vers l'objet en mémoire.
