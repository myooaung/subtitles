WEBVTT

1
00:00:02.220 --> 00:00:03.760
<v Instructor>The last interesting type</v>

2
00:00:03.760 --> 00:00:07.490
I want to show in this module is the never type.

3
00:00:07.490 --> 00:00:10.660
Now we saw a function that returned void.

4
00:00:10.660 --> 00:00:13.058
So that never returns anything.

5
00:00:13.058 --> 00:00:17.380
Never is another type functions can return.

6
00:00:17.380 --> 00:00:19.240
And that might sound strange.

7
00:00:19.240 --> 00:00:21.110
Let's have a look at how it works.

8
00:00:21.110 --> 00:00:24.662
Let's say we have a function generateError.

9
00:00:24.662 --> 00:00:28.280
Here I expect to get a message, which is a string,

10
00:00:28.280 --> 00:00:31.610
and maybe some error code, which might be a number.

11
00:00:31.610 --> 00:00:33.700
Now inside of this functions, let's say,

12
00:00:33.700 --> 00:00:35.130
we throw an error.

13
00:00:35.130 --> 00:00:37.760
So this should essentially be a utility function

14
00:00:37.760 --> 00:00:41.500
that generates error objects and throws them.

15
00:00:41.500 --> 00:00:42.990
So here we might throw an object,

16
00:00:42.990 --> 00:00:44.380
which we can do in JavaScript.

17
00:00:44.380 --> 00:00:47.366
We can throw any object or any value as an error,

18
00:00:47.366 --> 00:00:49.930
and that should have a message property,

19
00:00:49.930 --> 00:00:53.990
in which I store the value of my message argument here.

20
00:00:53.990 --> 00:00:56.390
And I want to have a error code property,

21
00:00:56.390 --> 00:00:59.417
let's say erase the word, the code argument in .

22
00:01:00.330 --> 00:01:02.390
So it is with the invalid function,

23
00:01:02.390 --> 00:01:06.600
and we can call this with an error occurred,

24
00:01:06.600 --> 00:01:09.640
for example, and a code of 500.

25
00:01:09.640 --> 00:01:12.213
If we do that, and we compile this file here,

26
00:01:14.120 --> 00:01:17.080
we see that once this reloads we get our error,

27
00:01:17.080 --> 00:01:19.150
well as an error here.

28
00:01:19.150 --> 00:01:21.670
And this might sound pretty abstract,

29
00:01:21.670 --> 00:01:22.850
but actually, it isn't.

30
00:01:22.850 --> 00:01:24.640
Having utility functions like this

31
00:01:24.640 --> 00:01:27.850
would be pretty standard in bigger applications

32
00:01:27.850 --> 00:01:30.270
where you don't manually want to throw an error

33
00:01:30.270 --> 00:01:32.540
in 10 different places of your app,

34
00:01:32.540 --> 00:01:35.380
and where you want to reach out to one convenient function

35
00:01:35.380 --> 00:01:37.450
that builds the error object for you

36
00:01:37.450 --> 00:01:39.350
and maybe also throws it immediately,

37
00:01:39.350 --> 00:01:42.300
so that you can call this function with different inputs

38
00:01:42.300 --> 00:01:44.690
but you always have an error being thrown.

39
00:01:44.690 --> 00:01:47.010
Now the interesting thing about this function is,

40
00:01:47.010 --> 00:01:49.048
it does not just return void.

41
00:01:49.048 --> 00:01:52.385
I actually can specify that it returns void,

42
00:01:52.385 --> 00:01:54.545
because of course returns nothing,

43
00:01:54.545 --> 00:01:58.030
but actually it does not just return nothing,

44
00:01:58.030 --> 00:02:02.630
if we are totally honest, this function returns never.

45
00:02:02.630 --> 00:02:05.518
This function never produces a return value.

46
00:02:05.518 --> 00:02:08.860
If I were to try to restore the return value here,

47
00:02:08.860 --> 00:02:11.193
in a console log result,

48
00:02:12.040 --> 00:02:16.240
and I then compile my code in this execute,

49
00:02:16.240 --> 00:02:19.630
we see there is no undefined being logged here,

50
00:02:19.630 --> 00:02:22.220
because since an error is thrown,

51
00:02:22.220 --> 00:02:25.330
this essentially crashes our script, you could say.

52
00:02:25.330 --> 00:02:27.080
It cancels our script.

53
00:02:27.080 --> 00:02:30.290
And this will always be the case for this function.

54
00:02:30.290 --> 00:02:32.210
Of course we can wrap it in try catch

55
00:02:32.210 --> 00:02:34.260
so that we can still continue in this script,

56
00:02:34.260 --> 00:02:37.620
but this function essentially never produces a value.

57
00:02:37.620 --> 00:02:41.060
This function always crashes the script

58
00:02:41.060 --> 00:02:42.910
or this part of the script,

59
00:02:42.910 --> 00:02:44.720
if you are using try catch,

60
00:02:44.720 --> 00:02:47.910
and therefore never returns anything.

61
00:02:47.910 --> 00:02:50.400
And hence the return type of this function

62
00:02:50.400 --> 00:02:54.483
actually is not just void, but also never.

63
00:02:55.710 --> 00:02:56.700
Now the interesting thing is,

64
00:02:56.700 --> 00:02:59.060
if you hover over it without assigning never,

65
00:02:59.060 --> 00:03:01.680
you see the inferred type is void.

66
00:03:01.680 --> 00:03:05.410
Alls because never is a newer type,

67
00:03:05.410 --> 00:03:07.060
it's been around for some time now,

68
00:03:07.060 --> 00:03:10.000
but it wasn't built into the first versions of TypeScript,

69
00:03:10.000 --> 00:03:12.620
and therefore void is typically assumed,

70
00:03:12.620 --> 00:03:15.417
and it's not horrible to leave it at that.

71
00:03:15.417 --> 00:03:17.740
But you can be very clear

72
00:03:17.740 --> 00:03:21.470
and explicitly set never as the return type

73
00:03:21.470 --> 00:03:24.490
to make it really clear that this never returns anything.

74
00:03:24.490 --> 00:03:26.770
So from a code-quality perspective,

75
00:03:26.770 --> 00:03:29.560
this might be clearer regarding your intentions

76
00:03:29.560 --> 00:03:30.680
and make it really clear

77
00:03:30.680 --> 00:03:32.330
to our developers reading your code

78
00:03:32.330 --> 00:03:35.850
that this function is intended to never return anything,

79
00:03:35.850 --> 00:03:39.560
and to essentially crash or break your script,

80
00:03:39.560 --> 00:03:40.954
or that part of the script.

81
00:03:40.954 --> 00:03:43.890
Another function that would never return,

82
00:03:43.890 --> 00:03:47.190
by the way, would be a function with an infinite loop.

83
00:03:47.190 --> 00:03:49.370
So if we have while (true) in there,

84
00:03:49.370 --> 00:03:51.060
that creates an infinite loop,

85
00:03:51.060 --> 00:03:52.790
and that therefore also would be a function

86
00:03:52.790 --> 00:03:54.410
that never returns.

87
00:03:54.410 --> 00:03:56.070
The error function here,

88
00:03:56.070 --> 00:03:58.852
or the function that generates a frozen error

89
00:03:58.852 --> 00:04:01.305
probably is the more common use-case, though.

90
00:04:01.305 --> 00:04:04.500
So never, also an interesting type,

91
00:04:04.500 --> 00:04:06.230
which you can use on functions

92
00:04:06.230 --> 00:04:08.553
for cases like this one here.

