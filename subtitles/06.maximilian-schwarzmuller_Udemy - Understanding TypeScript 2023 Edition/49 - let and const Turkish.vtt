WEBVTT

00:02.090 --> 00:04.730
Eğitmen: Şimdi herhangi bir özelliğe dalmadan önce, bu dersin

00:04.730 --> 00:07.002
ekinde bu sayfaya bir bağlantı bulacaksınız.

00:07.002 --> 00:11.350
Bu sayfa temel olarak az çok tüm modern JavaScript özelliklerini, hangi

00:11.350 --> 00:13.610
tarayıcıların bu özellikleri desteklediğini

00:13.610 --> 00:16.770
ve ayrıca hangi derleyicilerin bu özellikleri desteklediğini

00:16.770 --> 00:19.700
listeler.

00:19.700 --> 00:23.150
Ve orada ayrıca TypeScript'i, bir polyfill sağlayıcısı olan

00:23.150 --> 00:25.310
core-js ile birleştirilmiş TypeScript'i

00:25.310 --> 00:27.210
de bulabilirsiniz.

00:27.210 --> 00:28.820
Ancak genel olarak bu, TypeScript'in

00:28.820 --> 00:32.070
neleri derleyebildiğini açıklar.

00:32.070 --> 00:34.110
Şimdi, TypeScript'in bununla çalışıp çalışmadığını

00:34.110 --> 00:35.990
bilmek istediğiniz const anahtar sözcüğü

00:35.990 --> 00:37.960
gibi belirli bir özelliği arıyorsanız bu

00:37.960 --> 00:40.860
kaynağı her zaman kullanabilirsiniz.

00:40.860 --> 00:43.340
Daha sonra bununla nasıl çalıştığını ve hangi kısıtlamaların

00:43.340 --> 00:46.580
olduğunu, hangi tarayıcıların bunu desteklediğini görebilirsiniz.

00:46.580 --> 00:48.250
Bu arada, TypeScript hedefi ile

00:48.250 --> 00:51.090
ilgili olarak hangi tarayıcıları hedeflemek isteyebileceğiniz

00:51.090 --> 00:53.967
konusunda da size bir ipucu verir.

00:53.967 --> 00:55.260
Dolayısıyla bu, JavaScript'in

00:55.260 --> 00:58.600
farklı yinelemeleri arasında geçiş yapmanıza ve her bir yinelemenin getirdiği

00:58.600 --> 01:01.940
özellikleri ve bu özelliklerin nasıl desteklendiğini görmenize olanak

01:01.940 --> 01:04.220
tanıyan harika bir kaynaktır.

01:04.220 --> 01:06.140
Bu nedenle, neleri kullanabileceğinizi, neleri derleyebileceğinizi

01:06.140 --> 01:08.800
ve hangi hedefleri belirlemeniz gerekebileceğini öğrenmek için bunu kesinlikle

01:08.800 --> 01:11.060
bir kaynak olarak kullanın.

01:11.060 --> 01:14.060
Ve bununla birlikte, en önemli ve bariz ve sıklıkla

01:14.060 --> 01:17.030
kullanılan tanıtımlardan biriyle başlayalım,

01:17.030 --> 01:19.260
Yeni Nesil JavaScript eklendi.

01:19.260 --> 01:21.780
Bu arada, Yeni Nesil JavaScript ile

01:21.780 --> 01:24.700
ES6 veya daha yenisini kastediyorum.

01:24.700 --> 01:27.860
Bahsettiğim şey de bu ya da buna benzer bir şey.

01:27.860 --> 01:32.750
Sabitleri veya değişkenleri tanımlamanıza olanak tanır.

01:32.750 --> 01:35.350
Aradaki fark, sabitlerin, yani const anahtar

01:35.350 --> 01:39.910
sözcüğü ile tanımlanan değişkenlerin değiştirilememesidir.

01:39.910 --> 01:42.410
Doğru türe sahip olsa bile buraya yeni

01:42.410 --> 01:44.270
bir değer atamaya çalışırsanız,

01:44.270 --> 01:47.220
sabit olduğu için bir hata alırsınız.

01:47.220 --> 01:48.280
Şimdi, bu arada, TypeScript

01:48.280 --> 01:50.200
tarafından oluşturulan bir hatadır.

01:50.200 --> 01:53.340
Vanilla JavaScript'te, kodunuzu burada çalıştırdığınızda tarayıcı

01:53.340 --> 01:55.100
tarafından bir hata alırsınız ve TypeScript'in

01:55.100 --> 01:57.280
arkasındaki fikir budur, öğrendiğiniz gibi,

01:57.280 --> 02:00.410
kodu yazarken zaten bir hata alıyoruz, çünkü bu elbette bir geliştirici

02:00.410 --> 02:02.990
olarak bizim için daha iyi.

02:02.990 --> 02:04.930
Konsolda test etmeden önce

02:04.930 --> 02:07.820
bu kodu daha önce düzeltmemizi sağlar.

02:07.820 --> 02:11.330
Dolayısıyla burada, bu satırı kaldırır veya yorum

02:11.330 --> 02:12.830
yaparsak, şimdi yeniden

02:12.830 --> 02:14.400
derlenir ve bu nedenle

02:14.400 --> 02:17.130
tarayıcıda da hata almayız.

02:17.130 --> 02:20.860
Yani, bu const. Let değiştirilebilen bir değişkendir

02:20.860 --> 02:23.620
ve bu nedenle elbette var ile benzerdir.

02:23.620 --> 02:27.260
Var da hala var çünkü JavaScript, özellikler aniden kaldırılmayacak

02:27.260 --> 02:29.550
şekilde çalışıyor, çünkü o zaman eski

02:29.550 --> 02:33.460
tarayıcılar ve komut dosyaları bozulabilir.

02:33.460 --> 02:35.160
Ama artık var kullanmamalısınız.

02:35.160 --> 02:37.860
Peki neden artık var kullanmıyorsunuz?

02:37.860 --> 02:39.670
Yani, const'a sahip olmamız mantıklı,

02:39.670 --> 02:42.520
çünkü bu gerçekten yeni bir özellik ekliyor, sabitler.

02:42.520 --> 02:43.380
Ama neden izin verelim?

02:43.380 --> 02:45.380
Neden buraya yeni bir anahtar kelime eklediler?

02:45.380 --> 02:47.223
Neden Var'a sadık kalmadılar?

02:48.280 --> 02:51.460
Let ve const'ın var'dan önemli bir farkı vardır.

02:51.460 --> 02:53.300
const için bariz fark, değerin değiştirilememesidir,

02:53.300 --> 02:57.040
ancak let için de bir fark elde ederiz.

02:57.040 --> 03:00.930
Ve bu değişkenin kullanılabildiği kapsam budur.

03:00.930 --> 03:04.363
Artık JavaScript'teki bu kapsam kavramını biliyor olmalısınız.

03:05.609 --> 03:09.260
Ve var ile, bir global ve bir fonksiyon kapsamına sahip olursunuz.

03:09.260 --> 03:10.700
Bu, fonksiyonların dışında tanımladığınız

03:10.700 --> 03:12.550
değişkenlerin kodlarınızın her yerinde

03:12.550 --> 03:15.340
kullanılabilir olduğu anlamına gelir.

03:15.340 --> 03:17.410
İşlevlerin içinde tanımlanan değişkenler

03:17.410 --> 03:19.370
yalnızca o işlevde kullanılabilir.

03:19.370 --> 03:22.610
Örneğin, burada. Bir toplama fonksiyonum

03:22.610 --> 03:27.610
olsaydı ve a ve b olmak üzere iki sayı alsaydım.

03:27.670 --> 03:29.750
Sonra oraya var result ile bir değişken

03:29.750 --> 03:32.280
ekleyebiliriz, diyelim ki, ve result = a + b olarak

03:32.280 --> 03:34.730
ayarlarız, ve sonra result'u döndürürüz, ve

03:34.730 --> 03:36.230
tabii ki, bunu daha kısa bir

03:36.230 --> 03:38.430
şekilde yazabilirdik, ama var'ın ne yaptığını

03:38.430 --> 03:40.570
göstermek istiyorum.

03:40.570 --> 03:41.860
Ve bu iyi olurdu.

03:41.860 --> 03:43.012
Ve sonuç yalnızca bu işlevin

03:43.012 --> 03:44.188
içinde kullanılabilir.

03:44.188 --> 03:47.723
Burada konsol günlüğü sonucunu denersem, bu başarısız

03:47.723 --> 03:49.470
olur çünkü yalnızca bu işlevin

03:49.470 --> 03:52.190
kapsamında kullanılabilir.

03:52.190 --> 03:53.970
Bunu var harbor dışında tanımlarsam her

03:53.970 --> 03:56.610
şey çalışır çünkü artık global olarak kullanılabilir, bu

03:56.610 --> 03:58.180
nedenle buradan erişebilirim.

03:58.180 --> 04:00.220
Ayrıca, JavaScript'in çalışma şekli sayesinde

04:00.220 --> 04:03.580
değişkenlere daha yüksek bir seviyede erişebilirsiniz.

04:03.580 --> 04:05.210
Dolayısıyla, bir fonksiyonun içinde

04:05.210 --> 04:08.260
bu fonksiyonun kapsamındaki değişkenlerle çalışabilirsiniz,

04:08.260 --> 04:11.100
ancak buradaki global kapsam gibi daha yüksek bir kapsama sahip

04:11.100 --> 04:12.563
tüm değişkenler.

04:13.580 --> 04:14.980
Yani, bu var.

04:14.980 --> 04:19.180
Şimdi let için davranış genellikle aynıdır.

04:19.180 --> 04:21.580
Bu işe yarıyor ve bu işe yarıyor.

04:21.580 --> 04:23.800
Yani genel olarak let için de aynı şey geçerli.

04:23.800 --> 04:27.180
Ancak önemli bir fark, var için gerçekten sadece

04:27.180 --> 04:30.860
global ve fonksiyon kapsamına sahip olmanızdır.

04:30.860 --> 04:32.460
Peki ya if ifadeleri?

04:32.460 --> 04:36.720
Burada age > 20 değerini kontrol edersek ve burada isOld adında

04:36.720 --> 04:38.889
bir değişken oluşturup bunu true

04:38.889 --> 04:41.190
değerine ayarlarsak, isOld değerini

04:41.190 --> 04:44.500
konsolda günlüğe kaydedersek TypeScript'te

04:44.500 --> 04:46.270
bir hata alırız, ancak aslında

04:46.270 --> 04:50.090
JavaScript'te bir hata almayız.

04:50.090 --> 04:53.620
Buradaki kodu, sadece çalıştığını görmek için alırsanız ve konsolda JavaScript

04:53.620 --> 04:56.280
geliştirici araçlarına giderseniz ve oraya yapıştırıp

04:56.280 --> 04:57.190
enter tuşuna basarsanız,

04:57.190 --> 04:59.120
true değerinin buraya yazdırıldığını

04:59.120 --> 05:00.970
görürsünüz.

05:01.830 --> 05:02.960
Ve gerçekten de, isOld öğesine

05:02.960 --> 05:05.040
erişmeye çalışırsanız true değerini alırsınız.

05:05.040 --> 05:08.380
Dolayısıyla, bu isOld değişkeni, yalnızca if deyiminin içinde

05:08.380 --> 05:10.530
değil, genel olarak kaydedilir.

05:10.530 --> 05:11.700
Çünkü var ile JavaScript,

05:11.700 --> 05:13.080
fonksiyonlar ve global

05:13.080 --> 05:15.860
dışında başka bir kapsam bilmez.

05:15.860 --> 05:17.400
Ve bu let ile değişir.

05:17.400 --> 05:19.690
Şimdi, dediğim gibi, TypeScript yine de şikayet ediyor,

05:19.690 --> 05:21.600
çünkü bu yazmak için iyi bir kod değil, ancak teknik

05:21.600 --> 05:23.170
olarak işe yarayacaktır.

05:23.170 --> 05:25.100
Let ile bu durum değişir.

05:25.100 --> 05:26.350
Şimdi let ile, bu gerçekten

05:26.350 --> 05:29.880
sadece bu küme parantezlerinin içinde kullanılabilir.

05:29.880 --> 05:32.300
Çünkü let ve const, blok kapsamı adı verilen yeni

05:32.300 --> 05:33.540
bir kavram getirmiştir;

05:33.540 --> 05:36.550
bu, bir değişken veya sabitin tanımladığınız blokta veya

05:36.550 --> 05:40.420
daha alt bloklarda her zaman kullanılabilir olduğu anlamına gelir.

05:40.420 --> 05:43.060
Ve bir blok temelde her zaman küme parantezleriyle

05:43.060 --> 05:44.900
çevrili bir kod parçacığıdır;

05:44.900 --> 05:46.710
bir if deyiminde, bir for döngüsünde,

05:46.710 --> 05:48.760
bir fonksiyonda veya hatta, bu şekilde

05:48.760 --> 05:50.590
küme parantezleri eklerseniz

05:50.590 --> 05:52.670
bu mümkündür.

05:52.670 --> 05:54.230
Burada tanımlanan herhangi bir

05:54.230 --> 05:56.760
değişken sadece o blokta kullanılabilir.

05:56.760 --> 05:57.700
Bu iyi bir şeydir

05:57.700 --> 06:00.000
çünkü sizi daha temiz kod yazmaya ve bu

06:00.000 --> 06:02.470
gibi durumlardan kaçınmaya zorlar.

06:02.470 --> 06:03.640
Tarayıcıda bir fark olduğunu

06:03.640 --> 06:05.530
kanıtlamak için, let kullanarak bu kodu kopyalarsam

06:05.530 --> 06:09.750
ve sayfamı buraya yeniden yüklersem ve şimdi bunu buraya girersem, isOld'un tanımlanmadığına

06:09.750 --> 06:14.706
dair bir hata aldığımı görürsünüz.

06:14.706 --> 06:14.706
Daha önce bir hata almamıştık.

06:14.706 --> 06:19.706
Gerçekten de, isOld çıktısını vermeye çalıştığımda yine bu hatayı alıyorum.

06:20.070 --> 06:21.060
İşte fark bu.

06:21.060 --> 06:23.370
Bu nedenle, let ve const sadece bu sabit özelliği

06:23.370 --> 06:25.740
elde ettiğimiz için değil, aynı zamanda daha

06:25.740 --> 06:29.150
temiz kod yazmak zorunda kaldığımız için de daha iyidir.

06:29.150 --> 06:30.130
Bu yüzden tekrar çalışmasını sağlamak

06:30.130 --> 06:31.230
için bunu yorumlamama izin verin.
