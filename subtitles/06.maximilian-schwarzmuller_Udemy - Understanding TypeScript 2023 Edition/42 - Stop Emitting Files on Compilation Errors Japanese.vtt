WEBVTT

00:02.050 --> 00:04.370
講師：アイソレートモジュールを無視することはできませんが､

00:04.370 --> 00:05.880
もう1つ､ 実はここにも書かれていないのですが､

00:05.880 --> 00:10.810
それでも私自身が触れておきたいオプションがあります｡

00:10.810 --> 00:14.680
そして､ これがエラー時に発光させないオプションです｡ 

00:14.680 --> 00:16.200
trueまたはfalseに設定でき､

00:16.200 --> 00:18.820
デフォルトはfalseです｡

00:18.820 --> 00:19.653
さて､ これでどうでしょう｡ 

00:19.653 --> 00:23.050
もし､ これをfalseにした場合､ どのような問題が生じるかを紹介しましょう｡

00:23.050 --> 00:27.590
誤差が生じると問題になるし､ 問題になることもある｡

00:27.590 --> 00:32.410
ここで､ 自分のボタンを持っていて､ この感嘆符を削除するとします｡

00:32.410 --> 00:34.750
さて､ 何が起こっているのか完全には理解できないが､

00:34.750 --> 00:40.610
ここでの問題は単純に､ TypeScriptがここにボタンがあることを知らないということだ｡

00:40.610 --> 00:42.790
結局のところ､ ボタンを問い合わせたときに､

00:42.790 --> 00:48.800
DOMの中にこのセレクタを満たす要素がなければ､ ボタンが得られないかもしれないのです｡

00:48.800 --> 00:50.910
そしてそれは､ 基本的にTypeScriptが訴えていることでもあるのです｡ 

00:50.910 --> 00:54.849
ここでは､ NULLの可能性があるオブジェクトにアクセスしていますが､

00:54.849 --> 00:57.200
これは良いことではありません｡

00:57.200 --> 00:59.300
今､ ここにあるのはエラーです｡ 

00:59.300 --> 01:04.770
このコードをコンパイルすると､ コンソールにこのようなエラーも表示されます｡

01:04.770 --> 01:08.210
それにもかかわらず､ ファイルは作成される｡ 

01:08.210 --> 01:11.660
だから､ アプリを削除しても jsfileが再作成されます｡ 

01:11.660 --> 01:16.300
そのため､ エラーが発生しても､ TypeScriptはJavaScriptファイルを作成する｡

01:16.300 --> 01:18.740
これは望まれていることかもしれませんし､ 望まれていないことかもしれません｡ 

01:18.740 --> 01:21.360
TypeScriptファイルにエラーがあり､ それを回避する方法がよくわからないが､

01:21.360 --> 01:26.000
最終的なアプリでは問題にならないことが分かっている場合などです｡

01:26.000 --> 01:29.410
ここみたいに､ エクスクラメーションマークを知らなくても｡ 

01:29.410 --> 01:31.577
さて､ 感嘆符について知らなければ､

01:31.577 --> 01:35.900
基本的にこのエラーを無効にする方法がわからないかもしれません｡

01:35.900 --> 01:39.630
しかし､ それでも私たちは､ このページでこれがうまくいくことを知っています｡ 

01:39.630 --> 01:43.630
だから､ エラーが出てもコンパイルすれば大丈夫かもしれない｡

01:43.630 --> 01:45.570
しかし､ もちろん現実にはエラーのないプロジェクトを目指すべきですし､

01:45.570 --> 01:51.720
むしろこの問題を無視するのではなく､ どのように回避できるかを学ぶべきでしょう｡

01:51.720 --> 01:54.590
それでも､ エラー時にJavaScriptファイルが生成されても構わないのであれば､

01:54.590 --> 02:02.590
これをfalseに設定するか､ falseがデフォルトなので全く設定しないことも可能です｡

02:02.590 --> 02:04.240
しかし､ これをtrueに設定すると､

02:04.240 --> 02:09.100
何が起こるかというと､ 問題のあるファイルは生成されなくなります｡

02:09.100 --> 02:10.910
今､ これを再実行すると...

02:12.440 --> 02:15.110
あのね､ 実は何も生成されていないんだよ｡ 

02:15.110 --> 02:18.180
アナリティクスでも コンソール以外に何らかのコンテンツがある場合､

02:18.180 --> 02:26.440
ts ファイルは出力されません｡

02:26.440 --> 02:26.440
のログを見ると､ 生成されていないことがわかります｡ 

02:26.550 --> 02:27.560
そしてその理由は､

02:27.560 --> 02:29.600
ファイルにエラーがあるためです｡

02:29.600 --> 02:34.300
また､ いずれかのファイルがコンパイルに失敗した場合は､ どのファイルも省略されます｡

02:34.300 --> 02:35.810
したがって､ TypeScriptが再びファイルをコンパイルできるようにする前に､

02:35.810 --> 02:40.890
このエラーを修正する必要があるのだ｡

02:40.890 --> 02:43.530
したがって､ TypeScriptファイルにまだエラーがある場合､

02:43.530 --> 02:46.830
JavaScriptファイルを取得することに興味がないため､

02:46.830 --> 02:49.703
通常設定したいオプションです｡
