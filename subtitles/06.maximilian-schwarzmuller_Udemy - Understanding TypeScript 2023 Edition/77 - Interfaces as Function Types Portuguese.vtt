WEBVTT

00:02.220 --> 00:03.053
Instrutor: Agora,

00:03.053 --> 00:04.920
mencionei que as interfaces são usadas

00:04.920 --> 00:07.114
para definir a estrutura de um objeto.

00:07.114 --> 00:09.690
Agora, as interfaces também podem ser usadas para

00:09.690 --> 00:11.750
definir a estrutura de uma função.

00:11.750 --> 00:14.330
Portanto, basicamente como um substituto para os tipos de funções

00:14.330 --> 00:15.578
que você já aprendeu.

00:15.578 --> 00:17.890
Da mesma forma, podemos definir o tipo

00:17.890 --> 00:20.090
de uma função, por exemplo, com um tipo

00:20.090 --> 00:23.305
personalizado com a palavra-chave tipo.

00:23.305 --> 00:26.380
AddFn para adicionar uma função que então poderia

00:26.380 --> 00:29.350
conter uma definição de função como esta.

00:29.350 --> 00:30.830
Ele deve retornar um número

00:30.830 --> 00:32.370
e deve levar dois argumentos

00:32.370 --> 00:35.970
onde cada argumento também é do tipo número.

00:35.970 --> 00:39.310
Agora, poderíamos criar aqui uma nova função que

00:39.310 --> 00:42.860
é do tipo AddFn e quando não a inicializamos mas atribuímos

00:42.860 --> 00:45.040
nossa função mais tarde, então,

00:45.040 --> 00:46.580
é claro, temos que ter certeza

00:46.580 --> 00:49.470
de que esta função leva dois argumentos que

00:49.470 --> 00:51.300
são do tipo número e que lá dentro,

00:51.300 --> 00:55.170
também devolvemos um número.

00:55.170 --> 00:56.360
Isto é algo que podemos fazer.

00:56.360 --> 00:57.843
Isto é o que você já aprendeu.

00:57.843 --> 01:01.760
Agora, você também pode usar uma interface como alternativa a este

01:01.760 --> 01:03.077
tipo personalizado.

01:03.077 --> 01:06.860
As interfaces estão lá para definir a estrutura de um objeto como

01:06.860 --> 01:08.240
eu ensinei, mas no final,

01:08.240 --> 01:10.220
as funções são apenas objetos e, portanto,

01:10.220 --> 01:12.720
esta é uma pequena exceção.

01:12.720 --> 01:15.350
Você pode criar tipos de funções com interfaces.

01:15.350 --> 01:18.930
Para que você crie uma interface, nomeie AddFn para

01:18.930 --> 01:20.930
ainda manter esse nome aqui.

01:20.930 --> 01:23.720
E agora lá dentro, você define o pouco de

01:23.720 --> 01:28.300
função adicionando apenas parênteses com seus argumentos, a:

01:28.300 --> 01:31.150
número, B:número, por exemplo, e depois

01:31.150 --> 01:33.980
um dois pontos, não uma flecha, mas um dois

01:33.980 --> 01:36.810
pontos aqui com o tipo de retorno.

01:36.810 --> 01:39.780
Portanto, no final, como você definiria um método como

01:39.780 --> 01:41.630
o estamos fazendo aqui com saudação,

01:41.630 --> 01:45.710
com a exceção de que agora não estamos acrescentando um nome de método.

01:45.710 --> 01:47.880
Portanto, temos uma função anônima

01:47.880 --> 01:49.300
se você quiser chamá-la

01:49.300 --> 01:52.000
assim na interface AddFn e o TypeScript

01:52.000 --> 01:55.250
entende esta sintaxe especial desta função

01:55.250 --> 01:57.800
anônima em sua interface e entende

01:57.800 --> 02:00.410
que você quer usar esta interface como

02:00.410 --> 02:02.070
um tipo de função e é assim

02:02.070 --> 02:05.360
que sua função deve ser.

02:05.360 --> 02:07.650
Portanto, agora podemos usar AddFn aqui

02:07.650 --> 02:10.440
e, de fato, se eu tentasse aceitar uma string aqui,

02:10.440 --> 02:11.640
receberíamos um erro

02:11.640 --> 02:13.786
porque isto não é atribuível, precisamos

02:13.786 --> 02:17.060
ter um número ao invés de uma string.

02:17.060 --> 02:19.670
Portanto, é simplesmente uma alternativa a este tipo personalizado.

02:19.670 --> 02:23.010
Claro, aqui eu argumentaria que usar o tipo personalizado é provavelmente

02:23.010 --> 02:25.020
um pouco mais comum, é também um pouco mais curto,

02:25.020 --> 02:26.470
mas é uma sintaxe alternativa agradável

02:26.470 --> 02:28.340
de se estar ciente, especialmente se você

02:28.340 --> 02:30.870
se deparar com isso em algum projeto e estiver de outra

02:30.870 --> 02:35.265
forma perdido o que isto significa, este estranho método anônimo.

02:35.265 --> 02:38.993
Bem, no final, é apenas um tipo de função personalizada.
