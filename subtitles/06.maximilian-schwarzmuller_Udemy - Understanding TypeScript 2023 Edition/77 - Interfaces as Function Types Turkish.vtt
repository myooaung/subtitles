WEBVTT

00:02.220 --> 00:03.053
Eğitmen: Şimdi, arayüzlerin

00:03.053 --> 00:04.920
bir nesnenin yapısını tanımlamak için kullanıldığından

00:04.920 --> 00:07.114
bahsetmiştim.

00:07.114 --> 00:09.690
Artık arayüzler bir fonksiyonun yapısını tanımlamak

00:09.690 --> 00:11.750
için de kullanılabilmektedir.

00:11.750 --> 00:14.330
Yani temel olarak daha önce öğrendiğiniz fonksiyon türlerinin

00:14.330 --> 00:15.578
yerine geçer.

00:15.578 --> 00:17.890
Hızlıca hatırlatmak gerekirse, bir fonksiyonun

00:17.890 --> 00:20.090
türünü, örneğin type anahtar sözcüğünü

00:20.090 --> 00:23.305
kullanarak özel bir türle tanımlayabiliriz.

00:23.305 --> 00:26.380
Add fonksiyonu için AddFn, bu durumda aşağıdaki

00:26.380 --> 00:29.350
gibi bir fonksiyon tanımı tutabilir.

00:29.350 --> 00:30.830
Bir sayı döndürmeli

00:30.830 --> 00:32.370
ve her bir argümanın

00:32.370 --> 00:35.970
da sayı türünde olduğu iki argüman almalıdır.

00:35.970 --> 00:39.310
Şimdi, burada AddFn türünde yeni bir add fonksiyonu

00:39.310 --> 00:42.860
oluşturabiliriz ve bunu ilklendirmeyip fonksiyonumuzu

00:42.860 --> 00:46.580
daha sonra atadığımızda, elbette bu fonksiyonun sayı

00:46.580 --> 00:49.470
türünde iki argüman aldığından ve burada

00:49.470 --> 00:51.300
da bir sayı döndürdüğümüzden

00:51.300 --> 00:55.170
emin olmamız gerekir.

00:55.170 --> 00:56.360
Bu bizim yapabileceğimiz bir şey.

00:56.360 --> 00:57.843
Bunu zaten öğrendiniz.

00:57.843 --> 01:03.077
Şimdi, bu özel türe alternatif olarak bir arayüz de kullanabilirsiniz.

01:03.077 --> 01:06.860
Arayüzler, size öğrettiğim gibi bir nesnenin yapısını tanımlamak

01:06.860 --> 01:08.240
için vardır, ancak sonuçta

01:08.240 --> 01:10.220
işlevler sadece nesnelerdir ve bu

01:10.220 --> 01:12.720
nedenle bu küçük bir istisnadır.

01:12.720 --> 01:15.350
Arayüzler ile fonksiyon türleri oluşturabilirsiniz.

01:15.350 --> 01:18.930
Bunun için bir arayüz oluşturun ve bu ismi burada tutmak

01:18.930 --> 01:20.930
için AddFn olarak adlandırın.

01:20.930 --> 01:23.720
Ve şimdi burada, argümanlarınızla birlikte

01:23.720 --> 01:28.300
parantezler ekleyerek fonksiyon parçasını tanımlarsınız, örneğin

01:28.300 --> 01:31.150
a: sayı, B:sayı ve ardından iki nokta üst

01:31.150 --> 01:33.980
üste, ok değil ama burada dönüş türüyle birlikte

01:33.980 --> 01:36.810
iki nokta üst üste.

01:36.810 --> 01:39.780
Sonuç olarak, burada greet ile yaptığımız

01:39.780 --> 01:41.630
gibi bir yöntem tanımlayacaksınız,

01:41.630 --> 01:45.710
ancak şimdi bir yöntem adı eklemiyoruz.

01:45.710 --> 01:47.880
AddFn arayüzünde bu şekilde adlandırmak

01:47.880 --> 01:49.300
isterseniz anonim bir

01:49.300 --> 01:52.000
fonksiyonumuz var ve TypeScript, arayüzünüzdeki

01:52.000 --> 01:55.250
bu anonim fonksiyonun bu özel sözdizimini anlar

01:55.250 --> 01:57.800
ve bu arayüzü bir fonksiyon türü olarak

01:57.800 --> 02:02.070
kullanmak istediğinizi ve fonksiyonunuzun nasıl görünmesi gerektiğini

02:02.070 --> 02:05.360
anlar.

02:05.360 --> 02:07.650
Şimdi burada AddFn'i kullanabiliriz

02:07.650 --> 02:10.440
ve aslında burada bir string kabul etmeye çalışsaydım,

02:10.440 --> 02:11.640
bu atanabilir olmadığı

02:11.640 --> 02:13.786
için bir hata alırdık, string yerine

02:13.786 --> 02:17.060
bir sayıya ihtiyacımız var.

02:17.060 --> 02:19.670
Yani bu özel türe basit bir alternatiftir.

02:19.670 --> 02:23.010
Elbette, burada özel tip kullanmanın muhtemelen biraz daha yaygın

02:23.010 --> 02:25.020
olduğunu iddia ediyorum, ayrıca biraz

02:25.020 --> 02:26.470
daha kısa ama farkında olmak

02:26.470 --> 02:28.340
için güzel bir alternatif sözdizimi,

02:28.340 --> 02:30.870
özellikle de bir projede bununla karşılaşırsanız

02:30.870 --> 02:34.030
ve bunun ne anlama geldiğini bilmiyorsanız, bu garip anonim

02:34.030 --> 02:35.265
yöntem.

02:35.265 --> 02:38.993
Sonuçta bu sadece özel bir fonksiyon türüdür.
