WEBVTT

00:02.240 --> 00:04.220
Instructeur: SourceMap helpt ons

00:04.220 --> 00:06.560
bij het debuggen en ontwikkelen.

00:06.560 --> 00:09.540
Dus om te laten zien wat dit doet laat ik alles compileren

00:09.540 --> 00:12.000
zonder die sourceMap instelling.

00:12.000 --> 00:14.530
Als we nu naar de browser gaan en we willen begrijpen

00:14.530 --> 00:17.420
wat onze code doet, kunnen we naar het tabblad bronnen gaan

00:17.420 --> 00:21.620
hier in ontwikkelaarshulpmiddelen en daar vinden we onze JavaScript-bestanden.

00:21.620 --> 00:23.060
Nu kunnen we in deze bestanden

00:23.060 --> 00:25.090
duiken en het goede is dat deze bestanden

00:25.090 --> 00:28.350
redelijk leesbaar zijn voor ons, mensen natuurlijk, omdat ze

00:28.350 --> 00:30.940
uiteindelijk JavaScript-code bevatten.

00:30.940 --> 00:35.200
Dat is goed, maar wat als we complexere TypeScript-code hebben

00:35.200 --> 00:38.940
en we onze TypeScript-code willen debuggen en niet de

00:38.940 --> 00:41.640
gecompileerde JavaScript-code.

00:41.640 --> 00:43.060
Met andere woorden, het zou mooi

00:43.060 --> 00:47.180
zijn als we hier de TypeScript-bestanden zouden zien en niet de JavaScript-bestanden.

00:47.180 --> 00:50.000
Met de sourceMap optie kom je er wel.

00:50.000 --> 00:53.700
Als je dit op true zet en je voert het tsc commando opnieuw uit dan

00:53.700 --> 00:56.950
zie je dat we deze . js, . kaartbestanden

00:56.950 --> 00:58.810
worden ook gegenereerd.

00:58.810 --> 01:01.540
Als we ze bekijken zijn het nogal vreemde bestanden,

01:01.540 --> 01:04.920
maar wat ze doen is in feite fungeren als een brug die wordt

01:04.920 --> 01:07.110
begrepen door moderne browsers en de

01:07.110 --> 01:10.170
ontwikkelaarstools om de JavaScript-bestanden

01:10.170 --> 01:13.410
te verbinden met de invoerbestanden.

01:13.410 --> 01:17.440
Dus met deze gegenereerde bestanden zie je in het tabblad

01:17.440 --> 01:20.320
Bronnen niet alleen onze JavaScript bestanden,

01:20.320 --> 01:23.497
maar ook onze TypeScript bestanden.

01:23.497 --> 01:27.230
En we kunnen zelfs breekpunten plaatsen in de TypeScript bestanden en

01:27.230 --> 01:29.320
als ik nu bijvoorbeeld op de knop klik pauzeert

01:29.320 --> 01:31.650
hij nu in het TypeScript bestand.

01:31.650 --> 01:34.720
Wat natuurlijk super, super handig is.

01:34.720 --> 01:37.670
Want dat tilt het debuggen echt naar een hoger niveau,

01:37.670 --> 01:40.260
omdat we rechtstreeks in onze invoerbestanden

01:40.260 --> 01:43.400
kunnen werken, in onze TypeScript-bestanden in plaats

01:43.400 --> 01:45.670
van in de JavaScript-bestanden.

01:45.670 --> 01:48.010
Desalniettemin zal ik dit hier toelichten

01:48.010 --> 01:50.800
omdat we hier een vrij eenvoudig project hebben

01:50.800 --> 01:53.580
en ik wil deze extra . kaartbestanden liggen hier.

01:53.580 --> 01:55.950
Maar dit is super handig in projecten omdat

01:55.950 --> 01:57.803
het het debuggen vereenvoudigt.
