WEBVTT

00:02.340 --> 00:05.860
- : Maintenant, lorsque vous travaillez avec des types d'union,

00:05.860 --> 00:06.970
comme ceci et cela,

00:06.970 --> 00:11.070
il peut être encombrant de toujours répéter le type d'union.

00:11.070 --> 00:13.070
Vous pourriez vouloir échanger un nouveau

00:13.070 --> 00:15.330
type qui réinstalle ce type d'union.

00:15.330 --> 00:18.540
Et vous pouvez le faire grâce à une autre fonctionnalité intéressante

00:18.540 --> 00:21.410
des types, la fonctionnalité des alias de type.

00:21.410 --> 00:22.723
Vous créez un tel alias,

00:24.280 --> 00:25.670
généralement avant de

00:25.670 --> 00:29.240
l'utiliser, donc ici en haut du fichier, dans ce cas ici,

00:29.240 --> 00:31.240
avec le mot-clé type.

00:31.240 --> 00:34.040
Le mot-clé type n'est pas intégré à JavaScript,

00:34.040 --> 00:35.880
mais il est pris en charge par TypeScript.

00:35.880 --> 00:40.450
Après type, vous ajoutez le nom de votre type personnalisé, ou de votre alias

00:40.450 --> 00:42.860
de type, devrais-je dire.

00:42.860 --> 00:44.980
Par exemple, combinable.

00:44.980 --> 00:46.720
Mais c'est à vous de choisir le nom.

00:46.720 --> 00:48.380
Vous pouvez inventer ici tout

00:48.380 --> 00:50.520
nom qui n'est pas intégré à JavaScript

00:50.520 --> 00:52.530
ou TypeScript comme nom de clé.

00:52.530 --> 00:54.360
Ainsi, quelque chose comme date ne serait

00:54.360 --> 00:56.250
pas autorisé parce que c'est intégré à JavaScript,

00:56.250 --> 00:58.900
mais combinable n'est pas intégré à JavaScript, ni à TypeScript,

00:58.900 --> 01:01.170
et nous pouvons donc l'utiliser.

01:01.170 --> 01:04.550
Et maintenant, avec le signe égal, vous attribuez le type

01:04.550 --> 01:08.320
que vous voulez coder dans votre alias, pour ainsi dire.

01:08.320 --> 01:10.300
Ainsi, nous pourrions stocker un nombre ici, et

01:10.300 --> 01:12.790
maintenant, chaque fois que nous voulons nous assurer que

01:12.790 --> 01:14.390
quelque chose doit être un nombre, nous

01:14.390 --> 01:16.400
pourrions utiliser combinable à la place.

01:16.400 --> 01:18.570
Cela n'a pas beaucoup de sens, on peut même

01:18.570 --> 01:21.630
dire que cela rendrait notre code plus difficile à lire.

01:21.630 --> 01:25.500
Si j'utilise combinable ici, par exemple, cela fonctionnerait

01:25.500 --> 01:27.420
techniquement mais si nous jetons

01:27.420 --> 01:29.550
un coup d'œil à notre code, il n'est

01:29.550 --> 01:33.180
pas évident que nous voulons un nombre ou une chaîne.

01:33.180 --> 01:35.560
Eh bien, typiquement donc, vous l'utilisez en

01:35.560 --> 01:37.500
conjonction avec les types d'union.

01:37.500 --> 01:40.380
Nous pouvons donc stocker un type d'union dans notre

01:40.380 --> 01:42.250
type personnalisé, pour ainsi dire,

01:42.250 --> 01:45.240
dans notre alias de type, et faire référence à combinable

01:45.240 --> 01:48.170
à la place de notre type d'union.

01:48.170 --> 01:51.060
Ainsi, nous avons exactement la même configuration que précédemment,

01:51.060 --> 01:54.230
nous avons juste notre alias de type réutilisable ici que nous pouvons

01:54.230 --> 01:55.580
utiliser à la place.

01:55.580 --> 01:57.660
Et cela nous permet d'économiser un peu de code supplémentaire

01:57.660 --> 01:59.200
et de nous assurer que nous nous référons

01:59.200 --> 02:04.200
toujours aux mêmes types ou à la même configuration de type lorsque nous utilisons combinable.

02:04.234 --> 02:06.600
Et bien sûr, nous ne pouvons pas seulement l'utiliser pour les

02:06.600 --> 02:08.970
nombres et les chaînes de caractères, nous pouvons l'utiliser

02:08.970 --> 02:11.140
pour n'importe quelle configuration de type que nous pourrions

02:11.140 --> 02:14.810
vouloir stocker dans un alias, y compris ces deux types littéraux, par exemple.

02:14.810 --> 02:18.210
Ainsi, pour ces deux types ici, pour ce type d'union, nous

02:18.210 --> 02:20.660
pourrions également échanger l'alias de

02:20.660 --> 02:24.030
type, ConversionDescriptor, ou tout autre nom que vous

02:24.030 --> 02:28.920
souhaitez lui donner, et stocker exactement ce type dans cet alias de type.

02:28.920 --> 02:32.270
Et maintenant nous pouvons utiliser cet alias de type ici.

02:32.270 --> 02:34.970
Donc les alias de type sont vraiment, vraiment utiles.

02:34.970 --> 02:37.490
Vous pouvez encoder des définitions de type plus complexes

02:37.490 --> 02:40.860
dans vos propres types, dans vos propres noms de type, pour ainsi dire, et

02:40.860 --> 02:43.120
réutiliser cela partout dans votre code où vous avez

02:43.120 --> 02:45.920
besoin exactement de cette configuration de type.

02:45.920 --> 02:48.060
Ainsi, vous évitez les fautes de frappe et vous

02:48.060 --> 02:51.000
pouvez simplement économiser du code, écrire du code plus

02:51.000 --> 02:53.490
rapidement et être toujours plus clair sur vos intentions,

02:53.490 --> 02:56.010
par exemple en choisissant des noms d'alias de type

02:56.010 --> 02:57.653
descriptifs.
