WEBVTT

00:02.170 --> 00:03.420
教师：那么我们开始吧｡ 

00:03.420 --> 00:06.330
正如我提到的, 这里我将创建一个非常基本的REST

00:06.330 --> 00:13.780
API, 但当然, 您可以使用或不使用express以及使用TypeScript以任何方式构建任何节点应用程序,

00:13.780 --> 00:15.570
因此这只是一个示例｡

00:15.570 --> 00:18.990
您不限于此特定应用程序｡ 

00:18.990 --> 00:21.560
在src文件夹中, 我将添加一个应用程序｡  ts文件,

00:21.560 --> 00:25.970
它将是启动服务器的根入口点｡

00:25.970 --> 00:31.203
我想从Express中导入一些东西, 从这个Express框架中｡

00:32.970 --> 00:37.890
现在, 您可能知道如何在此处添加Express并使用Express设置Web服务器｡

00:37.890 --> 00:41.330
我们在这里使用此语法导入Express,

00:41.330 --> 00:46.330
然后在这里将Express作为函数执行｡

00:46.380 --> 00:53.750
我们得到了这样一个app对象, 可以在其上调用listen来监听某个端口上的传入请求｡

00:53.750 --> 00:56.120
这在普通的JavaScript中是可以工作的,

00:56.120 --> 00:58.420
但是你已经看到我在这里得到了一个错误｡

00:59.540 --> 01:10.100
现在我也得到了一个建议, 为什么我可能会在这里得到这个错误, 因为require实际上是一个存在于note中的函数｡

01:10.100 --> 01:10.100
js, 但不在浏览器端｡ 

01:10.100 --> 01:16.640
现在在tsconfig中｡  json文件我没有使用任何支持节点的特殊库｡

01:16.640 --> 01:16.640
js所以在这些TypeScript中它不知道这个通用函数存在于节点中｡

01:22.900 --> 01:22.900
js环境中创建｡ 

01:22.900 --> 01:27.140
现在, 为了使这个工作, 我们需要安装一个额外的类型与“npm安装--save-dev”,

01:27.140 --> 01:36.291
我们可以安装“@types/node”, 以安装所有的类型, 我们需要与节点一起工作｡

01:36.291 --> 01:36.291
让我们运行这个命令,

01:36.291 --> 01:39.460
看看是否有帮助｡

01:39.460 --> 01:42.320
是的, 它已经完成了, 这个错误也消失了｡ 

01:42.320 --> 01:44.390
但也许你也看到了, 在应用程序上,

01:44.390 --> 01:46.680
我没有得到任何自动完成｡

01:46.680 --> 01:52.410
它也不会出错, 但如果我们将鼠标悬停在应用程序上, 我们会看到TypeScript不知道里面有什么｡

01:52.410 --> 01:54.210
它的类型为“any”｡ 

01:54.210 --> 01:56.530
因此, 我们可能应该安装更多类型,

01:56.530 --> 02:02.410
并安装“@types/express”来安装express特定类型｡

02:02.410 --> 02:04.320
这是你已经知道的模式｡ 

02:04.320 --> 02:08.350
我们在本课程的第三方库部分中了解了这一点｡

02:08.350 --> 02:15.220
在那里, 我还向您展示了如何安装types包以在TypeScript脚本中获得更好的支持｡

02:15.220 --> 02:19.320
所以加了这个类型, 没有任何额外的配置,

02:19.320 --> 02:22.030
哈, 还是不行｡

02:22.030 --> 02:25.330
原因是我们在这里使用的导入语法｡

02:25.330 --> 02:30.450
这是常见的规律｡  js导入语法说明｡

02:30.450 --> 02:30.450
js默认使用,

02:30.450 --> 02:36.140
但这里我们实际上是在一个TypeScript环境中, 在这里我们可以使用不同的导入语法｡

02:36.140 --> 02:40.373
我们可以在浏览器中使用从ES模块中了解到的相同导入语法｡

02:41.240 --> 02:46.240
所以我们可以用“从'express'导入express”为例｡ 

02:46.710 --> 02:48.620
如果 我们 这样 做 , 然后 将 鼠标 悬停 在 " app " 上 , 您 会 看到

02:48.620 --> 02:49.910
现在 它 的 类型 为 " Express " ｡

02:49.910 --> 02:53.040
现在 我们 有 了 TypeScript 支持 ｡ 

02:53.040 --> 02:54.569
现在, 有一点很重要｡ 

02:54.569 --> 03:00.810
在注意｡  还存在与此类似的语法｡

03:00.810 --> 03:03.420
现在它处于一个实验性的状态, 并且已经处于这个状态很长时间了,

03:03.420 --> 03:10.010
所以使用common｡

03:10.010 --> 03:10.010
js在备注中｡  js是目前为止添加导入和导出的默认和最常用的方式｡

03:13.482 --> 03:16.060
如果你设置了这个实验性的标志, 就支持类似这样的语法,

03:16.060 --> 03:24.012
但是在这段代码中, 我们实际上没有使用这个实验性的节点｡

03:24.012 --> 03:24.012
js语法｡ 

03:24.012 --> 03:26.209
我们使用的是TypeScript｡ 

03:26.209 --> 03:29.859
一旦我们将其编译为JavaScript, 这将发生变化｡ 

03:29.859 --> 03:34.060
我可以给你们看这个, 这样我们也可以执行这个｡

03:34.060 --> 03:36.230
如果你在这里运行“tsc”,

03:36.230 --> 03:42.680
也许“tsc-w”已经进入监视模式, 你会看到这开始编译｡

03:42.680 --> 03:46.770
它创建了一个dist文件夹, 在那里我们现在有一个应用程序｡

03:46.770 --> 03:46.770
js文件,

03:46.770 --> 03:50.040
在这里, 看起来不一样了｡

03:50.040 --> 03:55.710
你看, 它现在没有像我们这里那样设置导入｡

03:55.710 --> 03:58.900
而是使用不同的语法｡ 

03:58.900 --> 04:02.350
这是实际要执行的代码｡ 

04:02.350 --> 04:04.780
我们可以使用nodemon执行此操作,

04:04.780 --> 04:12.230
如果在终端中打开一个新的选项卡更改了代码, 该工具会自动重新启动服务器｡

04:12.230 --> 04:15.960
保持另一个选项卡打开, 因为这是我们的TypeScript编译过程,

04:15.960 --> 04:20.095
在这个新选项卡中, 我们希望在nodemon的帮助下启动我们的服务器｡

04:20.095 --> 04:22.990
对于这一点, 让我们去包｡  json文件并添加一个新脚本,

04:22.990 --> 04:26.260
可能是一个启动脚本, 在这里我们说“nodemon

04:26.260 --> 04:30.900
dist/app”｡ js”, 以便nodemon执行dist文件夹中的该文件,

04:30.900 --> 04:36.360
并使用该文件启动服务器｡

04:36.360 --> 04:43.240
再加上那个包裹｡  json文件保存后, 我们可以运行npmstart来启动我们的开发服务器｡

04:43.240 --> 04:47.710
现在它正在为这个分布式应用服务｡  js文件这就是我们的常规设置,

04:47.710 --> 04:52.030
TypeScript已经在这里做了一些工作｡

04:52.030 --> 04:53.940
我们还提供类型支持｡ 

04:53.940 --> 04:57.756
这里您可以看到应用程序 我们可以用我们已经知道的导入/导出语法编写看起来非常熟悉的代码,

04:57.756 --> 05:07.000
但是我们得到的输出是在最终的常规JavaScript节点中｡

05:07.000 --> 05:07.000
js代码,

05:07.000 --> 05:09.640
这是非常有用的｡

05:09.640 --> 05:15.003
现在, 让我们做更多有用的事情, 而不仅仅是启动一个什么都不做的服务器｡
