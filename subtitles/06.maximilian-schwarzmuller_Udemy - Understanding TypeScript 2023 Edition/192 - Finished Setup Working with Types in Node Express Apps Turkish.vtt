WEBVTT

00:02.170 --> 00:03.420
Eğitmen: Öyleyse başlayalım.

00:03.420 --> 00:06.330
Bahsettiğim gibi, burada çok temel bir REST API oluşturacağım,

00:06.330 --> 00:09.130
ancak elbette Express ile veya Express olmadan ve TypeScript

00:09.130 --> 00:10.810
ile herhangi bir şekilde herhangi

00:10.810 --> 00:13.780
bir Node uygulaması oluşturabilirsiniz, bu yüzden bu sadece

00:13.780 --> 00:15.570
bir örnektir.

00:15.570 --> 00:18.990
Bu özel uygulama ile sınırlı değilsiniz.

00:18.990 --> 00:21.560
src klasörüne bir uygulama ekleyeceğim. ts dosyası, bu sunucuyu

00:21.560 --> 00:23.060
döndürdüğümüz kök

00:23.060 --> 00:25.970
giriş noktası olacaktır.

00:25.970 --> 00:29.530
Ve orada Express'ten, bu Express çerçevesinden bir şey

00:29.530 --> 00:31.203
içe aktarmak istiyorum.

00:32.970 --> 00:35.460
Şimdi muhtemelen Express'i buraya nasıl ekleyebileceğimizi ve Express

00:35.460 --> 00:37.890
ile bir web sunucusu kurabileceğimizi biliyorsunuzdur.

00:37.890 --> 00:41.330
Express'i buradaki sözdizimiyle içe aktarıyoruz

00:41.330 --> 00:46.330
ve ardından Express'i bir fonksiyon olarak çalıştırabiliyoruz.

00:46.380 --> 00:50.170
Gelen istekleri belirli bir portta dinlemek için listen'i

00:50.170 --> 00:53.750
çağırabileceğimiz böyle bir app nesnesi geri alırız.

00:53.750 --> 00:56.120
Şimdi bu normal JavaScript'te çalışacaktır, ancak

00:56.120 --> 00:58.420
burada bir hata aldığımı zaten görüyorsunuz.

00:59.540 --> 01:01.600
Şimdi burada bu hatayı neden alıyor

01:01.600 --> 01:03.500
olabileceğime dair bir öneri

01:03.500 --> 01:06.290
de alıyorum çünkü require aslında note'da

01:06.290 --> 01:10.100
var olan bir fonksiyon. js, ancak tarayıcı tarafında değil.

01:10.100 --> 01:12.540
Şimdi tsconfig'de. json dosyası Node'u destekleyecek

01:12.540 --> 01:16.640
herhangi bir özel kütüphane kullanmıyorum. js bu nedenle bu TypeScript'te

01:16.640 --> 01:18.120
bir node'da var olan

01:18.120 --> 01:20.150
bu genel işlevin farkında

01:20.150 --> 01:22.900
değildir. js ortamı.

01:22.900 --> 01:27.140
Şimdi bu işi yapmak için "npm install --save-dev" ile ekstra bir tip yüklememiz

01:27.140 --> 01:30.220
gerekiyor, node ile çalışmak için ihtiyacımız olan

01:30.220 --> 01:32.410
tüm tipleri yüklemek için "@types/node"

01:32.410 --> 01:36.291
yükleyebiliriz. js Şimdi bu komutu çalıştıralım

01:36.291 --> 01:39.460
ve bize yardımcı olup olmadığına bakalım.

01:39.460 --> 01:42.320
Evet, tamamlandı ve bu hata ortadan kalktı.

01:42.320 --> 01:44.390
Ama belki uygulamada otomatik tamamlama

01:44.390 --> 01:46.680
almadığımı da görmüşsünüzdür.

01:46.680 --> 01:50.190
Ayrıca hata vermiyor, ancak uygulamanın üzerine gelirsek TypeScript'in

01:50.190 --> 01:52.410
orada ne olduğunu bilmediğini görüyoruz.

01:52.410 --> 01:54.210
"Herhangi" tipindedir.

01:54.210 --> 01:56.530
Bu yüzden muhtemelen daha fazla tip

01:56.530 --> 01:59.930
yüklemeli ve express'e özgü tipleri yüklemek için

01:59.930 --> 02:02.410
"@types/express" yüklemeliyiz.

02:02.410 --> 02:04.320
Ve bu zaten bildiğiniz bir model.

02:04.320 --> 02:06.850
Kursun üçüncü taraf kütüphanesi bölümünde

02:06.850 --> 02:08.350
buna bir göz attık.

02:08.350 --> 02:12.030
Orada, TypeScript komut dosyalarınızda daha iyi destek almak için tür

02:12.030 --> 02:15.220
paketlerini nasıl yükleyebileceğinizi de gösterdim.

02:15.220 --> 02:19.320
Yani bu tür eklendiğinde, herhangi bir ekstra yapılandırma

02:19.320 --> 02:22.030
olmadan, Hah, hala çalışmıyor.

02:22.030 --> 02:23.140
Bunun nedeni burada kullandığımız

02:23.140 --> 02:25.330
içe aktarma sözdizimidir.

02:25.330 --> 02:28.270
Bu normal bir ortaktır. js içe aktarma sözdizimi

02:28.270 --> 02:30.450
hangi not. js varsayılan olarak kullanır,

02:30.450 --> 02:33.660
ancak burada aslında TypeScript'te farklı bir içe aktarma sözdizimi

02:33.660 --> 02:36.140
kullanabileceğimiz bir ortamdayız.

02:36.140 --> 02:38.230
ES modüllerinden bildiğimiz import sözdizimini

02:38.230 --> 02:40.373
tarayıcıda da kullanabiliriz.

02:41.240 --> 02:46.240
Bu yüzden örneğin "import express from 'express'" kullanabiliriz.

02:46.710 --> 02:48.620
Bunu yaptıktan sonra "app "in üzerine gelirsek, artık "Express"

02:48.620 --> 02:49.910
türünde olduğunu görürsünüz.

02:49.910 --> 02:53.040
Artık TypeScript desteğimiz var.

02:53.040 --> 02:54.569
Şimdi, önemli bir not.

02:54.569 --> 02:58.790
Not olarak. js'de de buna benzer bir

02:58.790 --> 03:00.810
sözdizimi vardır.

03:00.810 --> 03:03.420
Şimdi deneysel bir bayrak altında ve çok uzun bir

03:03.420 --> 03:06.190
süredir bu bayrak altında, bu yüzden yaygın olarak

03:06.190 --> 03:10.010
kullanılıyor. js in note. js, ithalat ve ihracat

03:10.010 --> 03:13.482
eklemenin varsayılan ve en yaygın yoludur.

03:13.482 --> 03:16.060
Bu deneysel bayrağı ayarlarsanız buna benzeyen

03:16.060 --> 03:18.380
sözdizimi desteklenir, ancak burada

03:18.380 --> 03:19.990
bu kodda aslında bu deneysel

03:19.990 --> 03:24.012
düğümü kullanmıyoruz. js sözdizimi.

03:24.012 --> 03:26.209
Bunun yerine TypeScript kullanıyoruz.

03:26.209 --> 03:29.859
Bunu JavaScript'e derlediğimizde bu durum değişecektir.

03:29.859 --> 03:31.860
Bunu size gösterebilirim, böylece

03:31.860 --> 03:34.060
biz de bunu uygulayabiliriz.

03:34.060 --> 03:36.230
Burada "tsc", belki de izleme moduna

03:36.230 --> 03:40.330
girmek için "tsc-w" çalıştırırsanız, bunun derlemeye başladığını

03:40.330 --> 03:42.680
görürsünüz.

03:42.680 --> 03:44.110
Bir dist klasörü oluşturur ve orada

03:44.110 --> 03:46.770
artık bir uygulamamız vardır. js dosyası ve burada,

03:46.770 --> 03:50.040
bu artık farklı görünüyor.

03:50.040 --> 03:54.500
Gördüğünüz gibi, şu anda bu içe aktarma işlemi bizim burada yaptığımız gibi

03:54.500 --> 03:55.710
ayarlanmıyor.

03:55.710 --> 03:58.900
Bunun yerine farklı bir söz dizimi kullanır.

03:58.900 --> 04:02.350
Yani burada, aslında çalıştırılacak olan kod budur.

04:02.350 --> 04:04.780
Kodumuz değiştiğinde sunucuyu otomatik

04:04.780 --> 04:07.640
olarak yeniden başlatan bu aracı nodemon

04:07.640 --> 04:09.470
ile terminalde yeni bir sekme

04:09.470 --> 04:12.230
açarak çalıştırabiliriz.

04:12.230 --> 04:13.620
Diğer sekmeyi açık tutun çünkü

04:13.620 --> 04:15.960
bu bizim TypeScript derleme işlemimizdir ve

04:15.960 --> 04:18.760
bu yeni sekmede nodemon yardımıyla sunucumuzu başlatmak

04:18.760 --> 04:20.095
istiyoruz.

04:20.095 --> 04:22.990
Bunun için pakete gidelim. json dosyasını açın ve

04:22.990 --> 04:26.260
yeni bir betik ekleyin, bir başlangıç betiği olabilir,

04:26.260 --> 04:30.900
burada "nodemon dist/app. js" böylece nodemon dist klasöründeki

04:30.900 --> 04:34.200
bu dosyayı çalıştırır ve sunucumuzu bununla

04:34.200 --> 04:36.360
başlatır.

04:36.360 --> 04:39.430
Ve bu da eklenince paket. json dosyası kaydedildi, geliştirme

04:39.430 --> 04:43.240
sunucumuzu çalıştırmak için npmstart'ı çalıştırabiliriz.

04:43.240 --> 04:47.710
Ve şimdi bu dist uygulamasına hizmet ediyor. js dosyası Şimdi elimizdeki genel

04:47.710 --> 04:49.230
kurulum bu ve TypeScript

04:49.230 --> 04:52.030
burada zaten bazı işler yapıyor.

04:52.030 --> 04:53.940
Ayrıca TypeSupport'umuz da var.

04:53.940 --> 04:55.360
Ve burada uygulamada görüyorsunuz. Bildiğimiz

04:55.360 --> 04:57.756
içe/dışa aktarma sözdizimiyle bize çok

04:57.756 --> 05:01.420
tanıdık gelen bir kod yazabiliriz, ancak çıktı olarak elde

05:01.420 --> 05:03.640
ettiğimiz şey sonuçta normal JavaScript

05:03.640 --> 05:07.000
düğümüdür. js kodu ve bu son

05:07.000 --> 05:09.640
derece kullanışlıdır.

05:09.640 --> 05:12.140
Şimdi bununla birlikte, hiçbir şey yapmayan bir

05:12.140 --> 05:15.003
sunucu başlatmaktan daha faydalı şeyler yapalım.
