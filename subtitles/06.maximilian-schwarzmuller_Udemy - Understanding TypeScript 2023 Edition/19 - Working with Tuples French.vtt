WEBVTT

00:02.460 --> 00:05.590
- : Les tableaux sont donc pris en charge, ainsi que les nombres, les chaînes de caractères,

00:05.590 --> 00:07.620
les booléens, les objets et les tableaux.

00:07.620 --> 00:11.400
Nous avons les valeurs de base ou les types de valeurs, JavaScript nos supportés

00:11.400 --> 00:15.100
dans TypeScript, comme vous l'apprendrez dans l'exemple des objets

00:15.100 --> 00:17.884
dans leurs tableaux, TypeScript offre même beaucoup

00:17.884 --> 00:21.520
plus de fonctionnalités, mais c'est un peu plus avancé, c'est pourquoi

00:21.520 --> 00:22.720
nous y jetterons un coup

00:22.720 --> 00:24.940
d'œil plus tard, mais même ces types de base

00:24.940 --> 00:26.810
avec ce que vous apprendrez dans les

00:26.810 --> 00:30.140
conférences précédentes sont supportés.

00:30.140 --> 00:33.540
TypeScript contient maintenant quelques nouveaux concepts,

00:33.540 --> 00:37.840
de nouveaux types, que nous ne connaissons pas dans le script Java classique,

00:37.840 --> 00:40.300
par exemple, le type tuple.

00:40.300 --> 00:44.360
Vous connaissez peut-être les tuples dans d'autres langages de programmation,

00:44.360 --> 00:46.570
mais JavaScript n'en a pas.

00:46.570 --> 00:49.570
C'est un tuple par exemple, et vous diriez que

00:49.570 --> 00:52.290
c'est un tableau. Il s'agit d'un tableau,

00:52.290 --> 00:54.520
mais d'un tableau de longueur fixe, et

00:54.520 --> 00:58.650
en fait pas seulement de longueur fixe mais aussi de type fixe.

00:58.650 --> 01:00.730
Et où cela peut-il être utile ?

01:00.730 --> 01:03.350
Disons qu'ici, sur notre personne, nous

01:03.350 --> 01:07.830
avons en fait un certain nombre de propriétés, le rôle, qui est un

01:07.830 --> 01:11.160
tableau avec exactement deux éléments, où le premier

01:11.160 --> 01:14.184
est, disons, un identifiant numérique comme

01:14.184 --> 01:18.547
deux et le second est un identifiant de chaîne et une description

01:18.547 --> 01:22.765
lisible par l'homme comme l'auteur.

01:22.765 --> 01:26.496
Il doit toujours comporter exactement deux éléments, car un utilisateur

01:26.496 --> 01:30.100
ou une personne dans l'application que nous sommes en train d'écrire,

01:30.100 --> 01:32.720
disons, ne peut avoir qu'un seul rôle et un rôle n'est

01:32.720 --> 01:35.185
constitué que de deux éléments.

01:35.185 --> 01:37.400
Bien sûr, nous aurions pu utiliser une optique ici,

01:37.400 --> 01:39.090
mais pour une raison quelconque, nous voulons

01:39.090 --> 01:41.744
avoir un tableau avec exactement deux éléments où le premier

01:41.744 --> 01:43.118
élément est toujours l'identifiant

01:43.118 --> 01:47.570
numérique et le second élément est toujours l'identifiant de la chaîne de caractères ou la description

01:47.570 --> 01:50.220
ou tout autre nom que vous voulez lui donner.

01:50.220 --> 01:52.420
Maintenant, si nous survolons ceci, TypeScript

01:52.420 --> 01:55.730
déduit en fait ce type étrange que nous n'avons pas vu auparavant, En fait,

01:55.730 --> 01:58.550
si nous disons moyens, TypeScript comprend que nous avons un tableau

01:58.550 --> 02:01.250
qui pourrait contenir même des chaînes ou des chiffres, c'est

02:01.250 --> 02:03.440
un type d'union et nous allons plonger dans ces derniers

02:03.440 --> 02:06.710
plus tard. L'essentiel est que TypeScript

02:06.710 --> 02:09.950
comprenne qu'il doit s'agir d'un tableau avec ces

02:09.950 --> 02:11.668
types de valeurs.

02:11.668 --> 02:14.580
Les bas qui sont morts Nous pourrions exécuter

02:14.580 --> 02:18.780
ce code cependant, rôle de personne, pousser, admin.

02:18.780 --> 02:20.250
Pour notre application, cela n'a

02:20.250 --> 02:21.970
peut-être pas de sens, car nous savons que

02:21.970 --> 02:23.960
nous n'avons besoin que de deux éléments.

02:23.960 --> 02:25.790
Pourtant TypeScript ne sait pas que nous

02:25.790 --> 02:28.963
ne voulons que deux éléments. Nous serions également en mesure

02:28.963 --> 02:33.283
de changer le rôle de la personne, le deuxième élément avec l'index un pour

02:33.283 --> 02:35.200
être un nombre aussi bien.

02:35.200 --> 02:38.010
Cela fonctionnerait parce que TypeScript sait seulement

02:38.010 --> 02:42.360
que le rôle doit être de type chaîne ou tableau de nombres, et donc l'attribution d'un

02:42.360 --> 02:44.700
nombre ici au deuxième élément et donc son remplacement

02:44.700 --> 02:46.870
par un nombre serait autorisé parce que nous

02:46.870 --> 02:48.680
disons juste quelque chose sur les

02:48.680 --> 02:50.886
types que nous pouvons généralement utiliser

02:50.886 --> 02:52.580
ici.

02:52.580 --> 02:55.040
Nous savons que nous voulons avoir exactement cette structure.

02:55.040 --> 02:58.094
Deux éléments, premier élément un nombre, deuxième élément une chaîne,

02:58.094 --> 03:01.770
mais TypeScript ne fait pas ça. Pour un tel scénario, un

03:01.770 --> 03:05.865
tuple serait parfait. Nous pouvons indiquer à TypeScript

03:05.865 --> 03:10.865
quel rôle doit être, en définissant explicitement le type de rôle.

03:11.010 --> 03:13.230
Nous avons donc ici un exemple où TypeScript

03:13.230 --> 03:16.600
ne fait pas de phototype, mais où nous voulons explicitement

03:16.600 --> 03:19.927
le remplacer. Ici, nous pouvons donc ajouter

03:19.927 --> 03:23.041
un type d'objet explicite en ajoutant deux points après

03:23.041 --> 03:27.023
person, puis les accolades et ensuite names should be a string, age

03:27.023 --> 03:31.180
should be a number and hobbies should be a string array.

03:31.180 --> 03:33.740
Tout est donc déduit par TypeScript.

03:33.740 --> 03:35.401
Donc, pour cela, nous n'aurions pas exigé,

03:35.401 --> 03:36.827
cette affectation explicite et comme

03:36.827 --> 03:38.789
vous l'apprenez, cela aurait été mauvais.

03:38.789 --> 03:40.470
Mais maintenant nous avons un

03:40.470 --> 03:43.565
scénario, où l'inférence ne fonctionne pas de la façon

03:43.565 --> 03:47.510
dont nous le voulons, et, nous voulons définir le rôle comme un tuple.

03:47.510 --> 03:49.730
Maintenant, au lieu de définir un tableau de deux chaînes de caractères

03:49.730 --> 03:51.660
ou un tableau de chiffres ou d'utiliser le même type qui

03:51.660 --> 03:55.180
n'était pas le troisième ici plus tôt, nous pouvons maintenant utiliser un type spécial.

03:55.180 --> 03:56.810
Nous utilisons à nouveau des

03:56.810 --> 04:01.710
crochets, mais maintenant, à l'intérieur des crochets, nous ajoutons un nombre, puis

04:01.710 --> 04:03.637
une virgule et enfin une chaîne.

04:03.637 --> 04:07.340
Maintenant, cela marque un type de tuple ici.

04:07.340 --> 04:10.729
Un tuple est une construction spéciale, TypeScript comprend, en

04:10.729 --> 04:13.310
Java scripté sera un tableau normal, mais au cours

04:13.310 --> 04:15.750
du développement avec TypeScript, nous aurons

04:15.750 --> 04:18.190
des erreurs avec du code comme celui-ci.

04:18.190 --> 04:20.313
Maintenant, que font les tuples ?

04:21.620 --> 04:23.564
Ici, en TypeScript, je veux avoir

04:23.564 --> 04:27.195
un tableau spécial, avec exactement deux éléments, parce que

04:27.195 --> 04:30.160
j'ai exactement deux types là-dedans et le premier

04:30.160 --> 04:32.020
élément doit être un nombre.

04:32.020 --> 04:35.436
Le deuxième élément doit être une chaîne de caractères,

04:35.436 --> 04:39.033
donc, si nous compilons ce code ici, j'obtiens une erreur

04:40.663 --> 04:45.000
concernant 10 qui n'est pas assignable comme type ici, parce que

04:45.000 --> 04:48.346
nous voulons avoir une chaîne de caractères comme

04:48.346 --> 04:50.822
deuxième valeur et si j'assigne 10 comme

04:50.822 --> 04:52.660
deuxième valeur ici, alors

04:52.660 --> 04:56.544
je ne suis évidemment pas cette règle.

04:56.544 --> 05:01.544
Si vous commentez cela et que nous compilons, cela fonctionne.

05:02.240 --> 05:06.290
C'est un peu étrange, car pourquoi la poussée fonctionne-t-elle ici,

05:06.290 --> 05:08.610
parce que nous disons tous que le rôle devrait

05:08.610 --> 05:11.901
avoir exactement deux éléments, alors pourquoi pouvons-nous

05:11.901 --> 05:14.980
pousser admin sur le tableau de rôle ici.

05:14.980 --> 05:19.300
Push est en fait une exception qui est autorisée dans les tuples.

05:19.300 --> 05:22.410
Malheureusement, TypeScript ne peut pas détecter cette erreur,

05:22.410 --> 05:24.840
mais au moins il garantit que nous n'assignons pas

05:24.840 --> 05:28.570
une mauvaise valeur ici, et en dehors de la poussée, nous obtenons également

05:28.570 --> 05:31.500
un certain soutien concernant la longueur.

05:31.500 --> 05:33.671
Si nous définissons le rôle de cette personne à une nouvelle valeur.

05:33.671 --> 05:36.420
Par exemple, un tableau vide n'est pas autorisé, un

05:36.420 --> 05:39.710
tableau avec exactement la structure que nous avons définie

05:39.710 --> 05:43.510
ici, est autorisé, si j'ai ajouté un élément supplémentaire ici.

05:43.510 --> 05:45.880
Ensuite, nous aurions à nouveau une erreur.

05:45.880 --> 05:49.300
La longueur est donc respectée si nous l'attribuons de cette manière, mais pas pour

05:49.300 --> 05:50.720
une poussée et ainsi de suite.

05:50.720 --> 05:52.840
Si vous avez un scénario dans lequel

05:52.840 --> 05:55.580
vous avez besoin d'un nombre X de valeurs

05:55.580 --> 05:57.899
dans un tableau et que vous connaissez

05:57.899 --> 06:02.240
le type de chaque valeur à l'avance, vous pouvez envisager d'utiliser

06:02.240 --> 06:05.130
un tuple au lieu d'un tableau pour rendre votre

06:05.130 --> 06:07.900
application encore plus stricte et être

06:07.900 --> 06:11.313
encore plus clair sur le type de données avec lequel

06:11.313 --> 06:17.543
vous travaillez et le type de données que vous attendez.
