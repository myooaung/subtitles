WEBVTT

00:02.270 --> 00:03.103
المعلم: لهذا

00:03.103 --> 00:04.620
، حصلت على مشروع بسيط لك.

00:04.620 --> 00:05.610
تجده مرفقًا.

00:05.610 --> 00:07.070
إنه نفس مشروع البداية الذي

00:07.070 --> 00:08.810
استخدمناه مرارًا وتكرارًا.

00:08.810 --> 00:12.080
تبدأ خادم التطوير باستخدام npm-start

00:12.080 --> 00:15.510
ثم بدأت تجميع TypeScript في وضع المراقبة

00:15.510 --> 00:19.830
مع tsc-w في محطة منفصلة.

00:19.830 --> 00:22.890
هنا في طرفي المدمج لديّ علامتا تبويب.

00:22.890 --> 00:24.390
واحد مع خادم التطوير الذي

00:24.390 --> 00:26.070
يجب عليك متابعته وتشغيله

00:26.070 --> 00:27.670
حتى يراقب التغييرات ويعيد

00:27.670 --> 00:30.720
تحميل الصفحة ويبقي الخادم قيد التشغيل وعلامة

00:30.720 --> 00:32.820
تبويب أخرى حيث لديّ برنامج مراقبة

00:32.820 --> 00:35.530
تجميع TypeScript.

00:35.530 --> 00:36.930
الآن مع ذلك يمكننا العمل

00:36.930 --> 00:39.400
في التطبيق. ts فارغًا الآن وابدأ

00:39.400 --> 00:41.520
في كتابة بعض التعليمات البرمجية

00:41.520 --> 00:42.990
هناك وأريد أن أبدأ على الفور

00:42.990 --> 00:45.603
بتحديد فئة يمكننا استخدامها.

00:46.490 --> 00:49.420
نقوم بذلك باستخدام الكلمة الأساسية

00:49.420 --> 00:51.340
للفصل ، تمامًا مثل ذلك ثم

00:51.340 --> 00:54.030
اسم الفصل وهناك دعنا نقول أننا نبني

00:54.030 --> 00:56.880
تطبيقًا ، تطبيق ويب ، واجهة مستخدم

00:56.880 --> 01:00.700
لبعض أدوات الويب التي تسمح لنا بإدارة أقسامنا

01:00.700 --> 01:04.100
المختلفة نحن قد يكون في شركتنا.

01:04.100 --> 01:05.770
ربما نبني نوعًا من الأدوات

01:05.770 --> 01:08.440
الداخلية للشركة مهما كانت ، ونحتاج

01:08.440 --> 01:11.290
إلى أقسام متعددة هناك.

01:11.290 --> 01:13.790
يمكننا الآن استخدام الكائنات

01:13.790 --> 01:16.320
لإدارة البيانات للأقسام المختلفة

01:16.320 --> 01:19.960
، وقد نضيف أيضًا طرقًا هناك لكل كائن حتى

01:19.960 --> 01:21.980
نتمكن من عرض معلومات القسم

01:21.980 --> 01:24.020
على الشاشة وتبسيط إنشاء

01:24.020 --> 01:26.980
كائنات القسم المختلفة التي ستبدو

01:26.980 --> 01:33.000
جميعها الشيء نفسه ، هو إنشاء فئة القسم.

01:33.000 --> 01:35.690
حتى نتمكن من تسمية هذا القسم القسم.

01:35.690 --> 01:36.830
الاسم متروك لك تمامًا.

01:36.830 --> 01:40.030
الاصطلاح هو أنه يبدأ بحرف كبير

01:40.030 --> 01:42.720
لتوضيح أن هذه فئة.

01:42.720 --> 01:45.670
الآن إذا كنت على وشك تطوير JavaScript لفترة

01:45.670 --> 01:48.270
أطول ، فقد تعرف فكرة وظائف المُنشئ بالمناسبة

01:48.270 --> 01:50.090
والفصول في النهاية عبارة

01:50.090 --> 01:52.140
عن سكر نحوي لذلك يمكنك القول

01:52.140 --> 01:53.920
، لكننا سنرى أنه بمجرد تجميع

01:53.920 --> 01:56.980
الكود الخاص بنا .

01:56.980 --> 01:59.220
لذلك لدينا هنا قسم الفصل لدينا

01:59.220 --> 02:02.080
والآن هناك قد يكون لدينا خاصية الاسم.

02:02.080 --> 02:04.010
يمكنك إضافته تمامًا مثل

02:04.010 --> 02:07.290
هذا ، دون أي اسم أو ثابت أمامه تمامًا مثل هذا

02:07.290 --> 02:09.840
، مباشرة في الفصل وبعد ذلك بالطبع

02:09.840 --> 02:12.550
يمكنك أيضًا تعيين نوع لهذا.

02:12.550 --> 02:14.690
يمكنك القيام بذلك عن طريق إضافة نقطتين

02:14.690 --> 02:17.920
هنا ثم النوع على سبيل المثال سلسلة وهذا أمر مهم.

02:17.920 --> 02:21.150
قد يبدو هذا ككائن لكنه ليس كائنًا.

02:21.150 --> 02:23.240
في كائن ما ، تستخدم أزواج المفتاح

02:23.240 --> 02:25.520
والقيمة مع نقطتين للحصول على اسم مفتاح

02:25.520 --> 02:27.000
ثم قيمة المفتاح.

02:27.000 --> 02:28.810
هنا ليس هذا هو الحال.

02:28.810 --> 02:32.250
هذا هو ما يسمى مجال الفصل.

02:32.250 --> 02:34.680
يمكنك إنشاء فئة بأقواس متعرجة

02:34.680 --> 02:37.110
أيضًا ، ولكن هنا ليس زوجًا من قيم

02:37.110 --> 02:39.120
المفاتيح ، فهذا يحدد فقط اسم

02:39.120 --> 02:41.040
المفتاح الذي ستحصل عليه

02:41.040 --> 02:43.530
في الكائن الذي ستنشئه بناءً على

02:43.530 --> 02:48.530
الفئة وتحدد نوع القيمة هذا المفتاح سيصمد في النهاية.

02:48.550 --> 02:52.363
يمكنك أيضًا تعيين قيمة أولية هنا باستخدام = 'DEFAULT' ولكنك

02:53.840 --> 02:55.920
لست بحاجة إلى القيام بذلك.

02:55.920 --> 02:59.050
بدلاً من ذلك ، هناك شيء آخر لديك عادة في الفصول

02:59.050 --> 03:03.410
الدراسية وهو وظيفة خاصة هناك ، ما يسمى بالطريقة.

03:03.410 --> 03:06.780
تسمى الوظائف في الكائنات ببساطة

03:06.780 --> 03:09.410
الطرق ، وهي طريقة الباني.

03:09.410 --> 03:12.500
يمكننا إضافتها بهذا الشكل وهذه كلمة محجوزة.

03:12.500 --> 03:16.170
المُنشئ هي كلمة رئيسية محجوزة مفهومة من قِبل

03:16.170 --> 03:18.390
TypeScript وجافا سكريبت الحديثة

03:18.390 --> 03:22.480
أيضًا ، وهذه في الأساس وظيفة مرتبطة بهذه الفئة ومرتبطة

03:22.480 --> 03:25.840
بأي كائن تقوم بإنشائه بناءً على الفئة التي

03:25.840 --> 03:29.640
يتم تنفيذها عند إنشاء الكائن.

03:29.640 --> 03:33.500
لذلك يتيح لك هذا بشكل أساسي القيام ببعض أعمال التهيئة

03:33.500 --> 03:35.700
للكائن الذي تقوم ببنائه.

03:35.700 --> 03:38.280
الآن هناك يمكنك قبول حجة.

03:38.280 --> 03:41.910
دعنا نسميها n ربما والتي يمكن أن تكون أيضًا من نوع السلسلة

03:41.910 --> 03:45.620
ثم تريد تخزين ذلك في حقل الاسم الخاص بك هنا أو يمكنك القيام

03:45.620 --> 03:47.000
بذلك عن طريق الوصول إلى

03:47.000 --> 03:49.050
الاسم باستخدام هذه الكلمة الرئيسية

03:49.050 --> 03:51.200
وتخزين n فيها.

03:51.200 --> 03:55.200
ما يفعله هذا هو أنه يعين قيمة حقل الاسم ،

03:55.200 --> 03:58.630
وتسمى أيضًا الخاصية حتى خاصية الاسم

03:58.630 --> 04:01.180
، إلى القيمة التي تحصل عليها

04:01.180 --> 04:04.550
في n عند إنشاء كائن قسم.

04:04.550 --> 04:07.030
الآن كيف يمكننا إنشاء مثل هذا الكائن القسم؟

04:07.030 --> 04:08.890
لا شيء أسهل من ذلك.

04:08.890 --> 04:13.110
خارج الفصل الدراسي الذي قمت بإنشائه باستخدام الكلمة الأساسية

04:13.110 --> 04:16.200
الجديدة المضمنة أيضًا في TypeScript و JavaScript

04:16.200 --> 04:20.160
، ثم تكرر اسم الفئة ، ثم تضيف أقواسًا وهذا من شأنه إنشاء

04:20.160 --> 04:22.440
كائن قسم جديد ، ولكن تم استدعاء

04:22.440 --> 04:26.240
المُنشئ في هذا الوقت عند تنفيذ هذه الفئة مثل هذه باستخدام

04:26.240 --> 04:29.620
الكلمة الأساسية الجديدة ، يأخذ المنشئ هنا وسيطة

04:29.620 --> 04:33.440
، سلسلة.

04:33.440 --> 04:35.600
يمكنك الآن تمرير وسيطات

04:35.600 --> 04:39.800
المُنشئ إلى هذا القسم ، لذا بين هذه الأقواس.

04:39.800 --> 04:41.640
لذلك يمكننا هنا تسمية هذه المحاسبة

04:41.640 --> 04:44.730
لأننا ربما نبني قسم المحاسبة هنا.

04:44.730 --> 04:46.100
الآن سيؤدي هذا الآن إلى

04:46.100 --> 04:49.800
إنشاء كائن JavaScript جديد بناءً على هذا المخطط.

04:49.800 --> 04:53.910
لذا يمكننا الآن تخزين هذا بشكل ثابت على سبيل المثال

04:53.910 --> 04:58.010
ثم وحدة التحكم. سجل. المحاسبة هنا لمعرفة ما نحصل عليه.

04:58.010 --> 04:59.620
إذا حفظنا ذلك الآن ثم

04:59.620 --> 05:02.020
عدنا إلى صفحتنا هنا وألقينا نظرة

05:02.020 --> 05:03.780
على وحدة التحكم في التطوير

05:03.780 --> 05:05.660
هنا في أدوات def ، ينبغي أن

05:05.660 --> 05:07.930
تعترض إدارتنا هنا.

05:07.930 --> 05:10.000
إنه كائن جافا سكريبت عادي ،

05:10.000 --> 05:13.770
فقط تم إرفاق هذا النوع من القسم به ، ويمكنك القول في

05:13.770 --> 05:15.290
النهاية إنه كائن به

05:15.290 --> 05:18.140
زوج واحد من قيم المفاتيح ، حيث يكون المفتاح

05:18.140 --> 05:20.270
هو الاسم لأن هذا هو ما حددناه

05:20.270 --> 05:23.110
هناك والقيمة هي المحاسبة.

05:23.110 --> 05:25.530
لدينا هذه القيمة المحاسبية

05:25.530 --> 05:27.460
هنا لأننا نمررها كوسيطة

05:27.460 --> 05:29.560
للمنشئ.

05:29.560 --> 05:31.770
هناك نحن نقبل مثل هذه السلسلة

05:31.770 --> 05:34.830
، واستعادة القيمة في هذا الحقل والحقول

05:34.830 --> 05:38.400
في النهاية تُرجمت للتو إلى خصائص ، سيكون الكائن

05:38.400 --> 05:41.890
بناءً على الفئة هناك بعد ذلك.

05:41.890 --> 05:44.480
إذن هذه هي الطريقة التي يمكننا بها إنشاء

05:44.480 --> 05:46.570
فصل بسيط وما هي الفكرة العامة.

05:46.570 --> 05:50.143
الآن دعنا نرى ما نحصل عليه بالفعل في JavaScript.
