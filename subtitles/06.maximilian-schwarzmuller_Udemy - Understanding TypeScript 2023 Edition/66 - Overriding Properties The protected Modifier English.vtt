WEBVTT

1
00:00:02.210 --> 00:00:04.400
So, now, that's the basics about inheritance.

2
00:00:04.400 --> 00:00:06.900
We can also override methods

3
00:00:06.900 --> 00:00:09.810
or properties of our base class.

4
00:00:09.810 --> 00:00:13.350
So, let's say in the accounting, I want to add my own

5
00:00:13.350 --> 00:00:15.020
addEmployee method.

6
00:00:15.020 --> 00:00:16.200
We can do that.

7
00:00:16.200 --> 00:00:18.500
We can add our own method here,

8
00:00:18.500 --> 00:00:20.120
and get the name here.

9
00:00:20.120 --> 00:00:21.330
Let's say.

10
00:00:21.330 --> 00:00:22.550
And now, here, I want to have a different

11
00:00:22.550 --> 00:00:23.860
logic for adding that.

12
00:00:23.860 --> 00:00:27.610
An extra if check or an if check if name=Max,

13
00:00:27.610 --> 00:00:29.410
well, then I want to return,

14
00:00:29.410 --> 00:00:31.930
and not add Max as an employee,

15
00:00:31.930 --> 00:00:34.770
because Max is totally unsuited for that.

16
00:00:34.770 --> 00:00:36.360
Otherwise, if the name is not Max,

17
00:00:36.360 --> 00:00:38.050
I want to add the employee.

18
00:00:38.050 --> 00:00:40.420
Now, however, we face another issue.

19
00:00:40.420 --> 00:00:44.520
If I try to add these two employees,

20
00:00:44.520 --> 00:00:47.500
we see employees is not a known property.

21
00:00:47.500 --> 00:00:50.510
The reason for that is that employees is private.

22
00:00:50.510 --> 00:00:51.890
Now, that's important.

23
00:00:51.890 --> 00:00:54.860
Private properties are really only accessible

24
00:00:54.860 --> 00:00:57.360
from inside the class in which they're defined,

25
00:00:57.360 --> 00:01:00.670
not classes that inherit from that class.

26
00:01:00.670 --> 00:01:03.530
So, employees is available inside of the department,

27
00:01:03.530 --> 00:01:06.100
but not in classes based on department.

28
00:01:06.100 --> 00:01:09.040
So, accounting department doesn't have direct access

29
00:01:09.040 --> 00:01:11.320
to the employees properties.

30
00:01:11.320 --> 00:01:15.930
If we want to grant that access, and still make sure that

31
00:01:15.930 --> 00:01:19.840
it's not a property that can be changed from outside,

32
00:01:19.840 --> 00:01:22.080
we can switch it to protected.

33
00:01:22.080 --> 00:01:25.760
Protected is like private, but unlike private,

34
00:01:25.760 --> 00:01:28.280
it's now not just available in this class,

35
00:01:28.280 --> 00:01:32.040
but also in any class that extends this class.

36
00:01:32.040 --> 00:01:35.130
So, now we can access employees from

37
00:01:35.130 --> 00:01:37.740
inside our accounting department.

38
00:01:37.740 --> 00:01:41.377
Here, I can now add an employee if it's not Max.

39
00:01:41.377 --> 00:01:43.980
Therefore, now, if I go down there,

40
00:01:43.980 --> 00:01:45.680
and on my accounting,

41
00:01:45.680 --> 00:01:49.240
I want to add an employee of the name Max.

42
00:01:49.240 --> 00:01:50.480
This should not work.

43
00:01:50.480 --> 00:01:52.790
If I try to add Manu, this should work.

44
00:01:52.790 --> 00:01:57.110
So, if we now save that, and we also output print employee

45
00:01:57.110 --> 00:01:59.196
information here, and then save that,

46
00:01:59.196 --> 00:02:00.840
we should see that, indeed,

47
00:02:00.840 --> 00:02:03.120
we have one employee there, which is Manu,

48
00:02:03.120 --> 00:02:06.620
because of my own accounting method logic for AddEmployee,

49
00:02:06.620 --> 00:02:08.590
Max was not added.

50
00:02:08.590 --> 00:02:10.017
So, the key takeaway here is that you

51
00:02:10.017 --> 00:02:14.010
A) can override methods of your base class.

52
00:02:14.010 --> 00:02:16.690
You can add your own implementation,

53
00:02:16.690 --> 00:02:18.690
and then that implementation is used,

54
00:02:18.690 --> 00:02:21.023
instead of the base class's implementation.

55
00:02:21.023 --> 00:02:25.130
And B) you also have to control access to

56
00:02:25.130 --> 00:02:28.100
properties with protected.

57
00:02:28.100 --> 00:02:29.690
Because if you use private,

58
00:02:29.690 --> 00:02:32.120
you're really restricted to this class,

59
00:02:32.120 --> 00:02:36.400
whereas protected still makes it inaccessible from outside,

60
00:02:36.400 --> 00:02:39.270
but makes it accessible from inside of classes

61
00:02:39.270 --> 00:02:41.123
that extend the base class.

