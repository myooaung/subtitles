WEBVTT

00:02.273 --> 00:05.100
Eğitmen: Pek çok dekoratöre, onlarla nasıl çalıştığınıza,

00:05.100 --> 00:06.190
onları nasıl yapılandırabileceğinize,

00:06.190 --> 00:07.340
onlarla nasıl bir şeyler

00:07.340 --> 00:11.367
yapabileceğinize, onlarla neler yapabileceğinize baktık.

00:11.367 --> 00:15.260
Bu umarım size dekoratörlerin karmaşıklığını ama aynı zamanda gücünü ve onlar hakkında

00:15.260 --> 00:17.340
nasıl düşünebileceğinizi, onları nasıl kullanabileceğinizi

00:17.340 --> 00:18.898
gösterir.

00:18.898 --> 00:22.370
Sadece kendi dekoratörlerinizi oluşturmakla kalmazsınız,

00:22.370 --> 00:24.208
aynı zamanda dekoratörlere dayanan

00:24.208 --> 00:28.590
paketler ve çerçevelerden oluşan zengin bir ekosistem de vardır.

00:28.590 --> 00:30.670
Örneğin, sınıf validator.

00:30.670 --> 00:32.789
"ts class validator" şeklinde arama

00:32.789 --> 00:35.480
yaparsanız, temelde üzerinde çalıştığımız

00:35.480 --> 00:37.960
kendi özel doğrulama mantığımızın daha ayrıntılı

00:37.960 --> 00:41.680
bir uygulamasını içeren bir paket bulursunuz.

00:41.680 --> 00:44.140
Bu paket, üzerinde çalıştığınız herhangi bir projeye

00:44.140 --> 00:45.960
eklenebilir ve daha sonra gördüğünüz

00:45.960 --> 00:48.030
gibi bir grup dekoratörü veya dekoratör fabrikasını

00:48.030 --> 00:49.930
içe aktarabilirsiniz, çünkü bunları burada

00:49.930 --> 00:51.660
yürütüyoruz.

00:51.660 --> 00:53.350
Bunları, doğrulayıcıya bağlı

00:53.350 --> 00:55.650
olarak bazı ekstra yapılandırmalarla veya

00:55.650 --> 00:57.530
yapılandırmalar olmadan özelliklerinize

00:57.530 --> 00:59.163
ekleyin ve perde arkasında bu,

00:59.163 --> 01:01.530
sonunda yapılandırma nesnesi gibi bir kayıt

01:01.530 --> 01:03.509
defterini yönetecek, farklı sınıflarınızdaki

01:03.509 --> 01:08.950
farklı özellikler için doğrulayıcı kurulumunuzu saklayacaktır.

01:08.950 --> 01:11.810
Ardından, sınıfta ayarladığınız tüm doğrulama

01:11.810 --> 01:14.150
mantığını uygulamak için nesnenizi

01:14.150 --> 01:16.656
çalıştırıp geçirebileceğiniz, paketten

01:16.656 --> 01:19.020
içe aktardığınız bir validate yöntemi

01:19.020 --> 01:20.540
verir.

01:20.540 --> 01:22.840
Yani temelde az önce yaptığımız şeyi yapıyor,

01:22.840 --> 01:26.000
sadece daha fazla doğrulayıcı ile ve tüm ağır işleri

01:26.000 --> 01:27.830
sizin için yapıyor.

01:27.830 --> 01:29.170
Ancak elbette bunun genel olarak

01:29.170 --> 01:30.630
nasıl çalıştığını anlamaya yardımcı

01:30.630 --> 01:32.370
olur, çünkü burada daha naif bir versiyonda

01:32.370 --> 01:34.143
kendi başımıza inşa ettik.

01:35.010 --> 01:36.490
Şimdi bu paketin yanı sıra, elbette,

01:36.490 --> 01:38.370
örneğin Angular'ımız da var.

01:38.370 --> 01:39.541
Angular, daha önce

01:39.541 --> 01:41.502
de bahsettiğim gibi, Angular tarafından

01:41.502 --> 01:43.942
eklenen özel bir sözdizimiyle sınıflarınızın

01:43.942 --> 01:46.480
özelliklerinden de yararlanan bazı dinamik

01:46.480 --> 01:51.301
HTML kodlarını atamanıza ve ardından ekrana bazı dinamik içerikler oluşturmanıza

01:51.301 --> 02:00.170
olanak tanıyan bu bileşen dekoratörü gibi dekoratörlere büyük ölçüde dayanan bir çerçevedir.

02:00.170 --> 02:01.780
Yani burada Angular bu dekoratörleri

02:01.780 --> 02:03.360
sunmaktan daha fazlasını yapar,

02:03.360 --> 02:06.250
ancak dekoratörler Angular'ın temel bir parçasıdır.

02:06.250 --> 02:07.280
Ve son olarak,

02:07.280 --> 02:10.130
size NestJS'i de göstermek istiyorum.

02:10.130 --> 02:13.190
NestJS, Node için sunucu tarafı bir JavaScript

02:13.190 --> 02:15.487
çerçevesidir. js, aynı zamanda typescript'i

02:15.487 --> 02:20.010
de yoğun bir şekilde kullanır ve bu da dekoratörleri benimser.

02:20.010 --> 02:23.270
Burada, denetleyicileri ve rotaları, kullanıcıların

02:23.270 --> 02:26.730
HTTP isteklerinde kullanmaları gereken yöntemleri, belirli

02:26.730 --> 02:30.400
işlevleri tetiklemek için ve ayrıca gelen isteklerden veri ayıklamak

02:30.400 --> 02:32.687
için kullanabileceğiniz diğer birçok

02:32.687 --> 02:36.890
dekoratörü tanımlamak için dekoratörler kullanırsınız.

02:36.890 --> 02:39.150
İşte bu çerçeve de yine sizin için tüm

02:39.150 --> 02:41.370
bu dekoratörleri sunar, böylece bunları

02:41.370 --> 02:44.640
özelliklerinize, yöntemlerinize, sınıflarınıza

02:44.640 --> 02:46.257
ekleyebilir ve ekstra işlevsellik

02:46.257 --> 02:50.060
ekleyebilirsiniz; çerçeve de kodunuzu çalıştırırken bunları

02:50.060 --> 02:52.828
dikkate alır.

02:52.828 --> 02:55.417
Yani burada da dekoratörler metaprogramlama

02:55.417 --> 02:59.070
için ekstra yapılandırma, ekstra mantık eklemek

02:59.070 --> 03:02.977
için kullanılır ve bu durumda kodunuzu çalıştıran veya

03:02.977 --> 03:05.700
kodunuzla birlikte çalışan çerçeve dışındaki

03:05.700 --> 03:09.886
kod tarafından dikkate alınır.

03:09.886 --> 03:12.000
Dekoratörler için bu kadar.

03:12.000 --> 03:14.110
Bu yazının size dekoratörlerle neler yapabileceğiniz,

03:14.110 --> 03:16.090
neden çok yararlı olabilecekleri ve genel olarak

03:16.090 --> 03:17.830
nasıl çalıştıkları hakkında iyi bir genel

03:17.830 --> 03:19.563
bakış sağlayacağını umuyoruz.
