WEBVTT

00:02.160 --> 00:03.740
Người hướng dẫn: Vậy các tùy chọn của

00:03.740 --> 00:06.440
chúng ta là gì khi chúng ta muốn chia mã thành nhiều tệp?

00:06.440 --> 00:10.720
Bây giờ thực sự chúng tôi có ba lựa chọn cho điều đó.

00:10.720 --> 00:12.680
Tùy chọn đầu tiên sẽ đơn giản

00:12.680 --> 00:16.110
là viết nhiều tệp mã, nhiều tệp TypeScript.

00:16.110 --> 00:17.460
TypeScript sau đó sẽ

00:17.460 --> 00:20.710
tự động biên dịch tất cả các tệp mã trong thư mục nguồn

00:20.710 --> 00:23.020
và nhập thủ công các tệp script Java

00:23.020 --> 00:25.000
đã biên dịch vào HTML.

00:25.000 --> 00:26.220
Đó là một tùy chọn và đối

00:26.220 --> 00:28.970
với một số dự án, điều này có thể phù hợp nhưng bạn

00:28.970 --> 00:31.780
sẽ phải quản lý tất cả các lần nhập này theo cách thủ

00:31.780 --> 00:34.600
công, điều này có thể gây cồng kềnh và dễ bị lỗi và

00:34.600 --> 00:36.980
khi sử dụng một số tính năng TypeScript nhất

00:36.980 --> 00:39.560
định, bạn cũng từ bỏ hỗ trợ các loại nếu một số

00:39.560 --> 00:42.100
loại được xác định trong tệp A và bạn sử dụng

00:42.100 --> 00:43.670
nó trong tệp B và TypeScript

00:43.670 --> 00:46.030
không biết về kết nối này.

00:46.030 --> 00:47.480
Đó là lý do tại sao đây không thực sự là

00:47.480 --> 00:49.290
một lựa chọn tuyệt vời cho các dự án lớn hơn.

00:49.290 --> 00:52.500
Thay vào đó, đối với các dự án lớn hơn, chúng tôi có hai lựa chọn chính.

00:52.500 --> 00:55.470
Ví dụ, chúng tôi có các không gian tên và gói tệp.

00:55.470 --> 00:59.410
Giờ đây, không gian tên là một tính năng TypeScript, một tính

00:59.410 --> 01:03.430
năng cú pháp, bạn có thể thêm mã đặc biệt vào mã của mình để sử dụng

01:03.430 --> 01:04.840
tính năng này và về cơ bản,

01:04.840 --> 01:08.650
nó cho phép bạn nhóm mã lại với nhau bên dưới một không gian tên

01:08.650 --> 01:12.730
và sau đó nhập các không gian tên vào các tệp khác.

01:12.730 --> 01:16.020
Vì vậy, bạn có thể có một không gian tên cho mỗi tệp chẳng hạn.

01:16.020 --> 01:18.790
Nhập một tệp khác vào một tệp khác và nhấn vào

01:18.790 --> 01:21.930
không gian tên nằm trong một tệp khác từ tệp nhập

01:21.930 --> 01:24.650
đó và chúng ta sẽ thấy điều đó trong thực tế

01:24.650 --> 01:25.970
trong trường hợp điều

01:25.970 --> 01:28.030
đó không hoàn toàn rõ ràng.

01:28.030 --> 01:30.020
TypeScript không chỉ hỗ trợ

01:30.020 --> 01:34.130
điều đó, nó còn gộp các tệp lại với nhau thành một tệp,

01:34.130 --> 01:37.230
để cuối cùng bạn viết mã vào nhiều tệp được

01:37.230 --> 01:39.560
biên dịch nhưng sau đó chúng được

01:39.560 --> 01:42.750
nhập vào nhau để bạn quản lý ít lần nhập hơn

01:42.750 --> 01:45.190
và bạn không 'không cần quản lý thủ

01:45.190 --> 01:46.950
công các lần nhập khác nhau

01:46.950 --> 01:50.030
trong một tệp HTML.

01:50.030 --> 01:52.180
Giờ đây, một giải pháp thay thế cho

01:52.180 --> 01:55.750
không gian tên và được cho là giải pháp thay thế hiện đại

01:55.750 --> 02:00.750
và quan trọng hơn, là sử dụng Nhập/Xuất ES6 còn được gọi là mô-đun ES6, bởi vì

02:01.870 --> 02:06.480
hóa ra hoàn toàn tách rời khỏi TypeScript, tập lệnh Java hiện đại cũng

02:06.480 --> 02:09.940
có giải pháp cho vấn đề này bởi vì bạn gặp sự cố này không

02:09.940 --> 02:11.440
chỉ trong các dự án TypeScript

02:11.440 --> 02:13.140
mà còn trong bất kỳ dự án tập

02:13.140 --> 02:15.850
lệnh Java lớn nào.

02:15.850 --> 02:18.200
Tập lệnh Java hiện đại sẵn có hỗ trợ các

02:18.200 --> 02:21.150
câu lệnh nhập và xuất, cho phép bạn chỉ định tệp

02:21.150 --> 02:23.110
nào phụ thuộc vào tệp nào khác

02:23.110 --> 02:24.910
và sau đó bạn có tất cả các tệp

02:24.910 --> 02:27.920
riêng lẻ này nhưng bạn không cần phải quản lý nhập

02:27.920 --> 02:30.560
thủ công, thay vào đó, các trình duyệt, các

02:30.560 --> 02:33.770
trình duyệt hiện đại sẽ làm cái đó.

02:33.770 --> 02:36.020
Họ hiểu nó và tự động tải xuống và chạy

02:36.020 --> 02:38.800
các tệp mà một tệp khác phụ thuộc vào.

02:38.800 --> 02:41.370
Bạn sử dụng cú pháp nhập/xuất cho điều đó và

02:41.370 --> 02:43.470
TypeScript cũng hỗ trợ điều này.

02:43.470 --> 02:46.870
Vì vậy, bạn có thể sử dụng TypeScript mà không gặp vấn đề gì.

02:46.870 --> 02:48.700
Bạn biên dịch mỗi tệp nhưng bạn

02:48.700 --> 02:50.810
chỉ cần nhập một tập lệnh vì như tôi

02:50.810 --> 02:53.680
vừa đề cập, các trình duyệt hiện đại biết cách

02:53.680 --> 02:56.350
tìm nạp tất cả các phần phụ thuộc khác và bạn

02:56.350 --> 02:58.570
cũng sẽ thấy điều đó đang hoạt động trong

02:58.570 --> 03:00.710
phần cốt lõi này ở đây.

03:00.710 --> 03:02.320
Bây giờ, một lưu ý quan trọng ở đây,

03:02.320 --> 03:03.830
với điều đó về mặt kỹ thuật, chúng

03:03.830 --> 03:06.110
tôi vẫn sẽ kết thúc với nhiều tệp và mặc dù chúng

03:06.110 --> 03:09.140
tôi sẽ không phải quản lý quá trình nhập theo cách thủ công,

03:09.140 --> 03:11.550
tập lệnh nhập, chúng tôi vẫn có một số nhược điểm

03:11.550 --> 03:13.730
vì điều đó bởi vì mọi tệp bạn phụ thuộc vào cần

03:13.730 --> 03:15.130
được tải xuống riêng biệt,

03:15.130 --> 03:16.900
điều đó có nghĩa là nhiều yêu cầu HTTP

03:16.900 --> 03:19.460
hơn, v.v. và do đó, bạn có thể nhóm các tệp lại với nhau

03:19.460 --> 03:22.210
để hoạt động trên nhiều tệp trong quá trình phát triển

03:22.210 --> 03:24.860
nhưng gửi một tệp duy nhất để sản xuất nhưng bạn cần

03:24.860 --> 03:30.840
các công cụ của bên thứ ba cho việc đó, chẳng hạn như Webpack và tôi sẽ chỉ cho bạn cách thức hoạt động của nó nhưng trong

03:30.840 --> 03:39.500
một phần riêng biệt, nơi chúng tôi sẽ xem xét Webpack và TypeScript cũng như lý do chúng tôi sử dụng và cách chúng tôi sử dụng nó.

03:39.500 --> 03:41.100
Vì vậy, bây giờ chúng ta hãy

03:41.100 --> 03:43.900
sử dụng hai cách tiếp cận này ở dạng cơ bản và hãy

03:43.900 --> 03:45.870
xem cách chúng ta có thể cải thiện

03:45.870 --> 03:48.853
mã của mình bằng cách chia mã thành nhiều tệp.
