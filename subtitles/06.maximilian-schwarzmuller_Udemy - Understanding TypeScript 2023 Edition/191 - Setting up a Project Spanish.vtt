WEBVTT

00:02.290 --> 00:03.280
Instructor: Así que

00:03.280 --> 00:06.110
vamos a empezar con nuestra aplicación Node typescript.

00:06.110 --> 00:08.750
Ahora, podrías pensar que necesitamos una configuración

00:08.750 --> 00:11.170
compleja con webpack y demás, pero en realidad

00:11.170 --> 00:12.410
no es así.

00:12.410 --> 00:16.270
Usaremos el comando tsc para compilar nuestros archivos.

00:16.270 --> 00:18.160
Y luego, podemos usar el comando node para ejecutar

00:18.160 --> 00:19.890
nuestros archivos compilados.

00:19.890 --> 00:21.700
Eso es todo lo que necesitamos aquí.

00:21.700 --> 00:25.960
Aún así, voy a configurar un proyecto aquí con npm init simplemente para que

00:25.960 --> 00:28.810
tengamos un paquete. json porque como crearemos

00:28.810 --> 00:32.250
una aplicación Node normal aquí, instalaremos algunos paquetes

00:32.250 --> 00:36.240
de terceros como Express. js.

00:36.240 --> 00:38.470
Y también quiero instalar una herramienta extra

00:38.470 --> 00:40.950
que simplifique nuestro proceso de desarrollo.

00:40.950 --> 00:44.630
Así que ejecute npm init aquí en cualquier carpeta vacía de su elección.

00:44.630 --> 00:48.190
Si lo desea, puede confirmar aquí todos los ajustes por defecto y, a continuación,

00:48.190 --> 00:50.540
tendrá un paquete. json que debería

00:50.540 --> 00:52.750
ser algo así.

00:52.750 --> 00:56.210
Ahora, también ejecute tsc --init aquí para también inicializar

00:56.210 --> 00:59.390
este proyecto como un proyecto typescript para que usted obtenga

00:59.390 --> 01:01.860
este tsconfig. json que ahora puede

01:01.860 --> 01:04.313
encontrar en sus requisitos.

01:05.770 --> 01:09.020
Y ahí, ya tengo el primer ajuste que quiero hacer.

01:09.020 --> 01:13.300
El objetivo aquí se puede establecer fácilmente a es2018 por ejemplo, dependiendo

01:13.300 --> 01:16.090
de la versión de nodo que está utilizando, pero si usted

01:16.090 --> 01:17.750
está usando la última, esta moderna

01:17.750 --> 01:19.630
sintaxis de JavaScript definitivamente

01:19.630 --> 01:21.380
debe ser compatible.

01:21.380 --> 01:24.220
El módulo puede permanecer en commonjs, pero entonces,

01:24.220 --> 01:27.460
también quiero añadir moduleResolution aquí y establecer

01:27.460 --> 01:29.010
esto a node.

01:29.010 --> 01:33.350
Esto simplemente le dice a Typescript cómo sus diferentes archivos e importaciones

01:33.350 --> 01:35.483
trabajarán juntos.

01:36.410 --> 01:37.640
Y tenemos que poner esto en el nodo

01:37.640 --> 01:40.020
para asegurarnos de que todo funciona correctamente.

01:40.020 --> 01:42.470
También estableceré mi outDir aquí,

01:42.470 --> 01:44.790
comentando esto y poniéndolo a dist,

01:44.790 --> 01:46.990
y mi rootDir a src porque quiero separar

01:46.990 --> 01:49.600
mi código fuente typescript.

01:49.600 --> 01:50.700
Y luego la salida que

01:50.700 --> 01:53.170
será los archivos JavaScript reales que

01:53.170 --> 01:55.733
podemos ejecutar con la ayuda de nodo.

01:56.820 --> 01:58.850
Aparte de eso, estoy bien con el modo estricto,

01:58.850 --> 02:00.710
pero por supuesto, puedes ajustar todo

02:00.710 --> 02:03.030
esto a tus necesidades y gustos personales.

02:03.030 --> 02:06.320
Al fin y al cabo, lo has aprendido todo a lo largo de este curso.

02:06.320 --> 02:08.830
Y con eso, podemos guardar esta configuración.

02:08.830 --> 02:11.070
Por cierto, también encontrarás esta configuración

02:11.070 --> 02:12.460
inicial muy básica adjunta.

02:12.460 --> 02:14.120
Puede guardar esta configuración.

02:14.120 --> 02:16.170
Y también crearé una carpeta src donde

02:16.170 --> 02:18.130
escribiremos nuestro código fuente,

02:18.130 --> 02:20.230
nuestro código fuente typescript.

02:20.230 --> 02:23.020
Y esta es la parte en la que ahora quiero sumergirme.

02:23.020 --> 02:26.370
Ahora construiremos nuestra aplicación con typescript

02:26.370 --> 02:27.960
en la carpeta src.

02:27.960 --> 02:30.200
Y como vamos a construir un servidor web simple y también

02:30.200 --> 02:32.920
queremos usar Express. js allí, voy a, en primer

02:32.920 --> 02:36.120
lugar, instalar algunas dependencias aquí.

02:36.120 --> 02:38.440
Con npm install --save, quiero instalar

02:38.440 --> 02:41.040
express aquí que es el framework Express

02:41.040 --> 02:44.100
para Node. js que, por supuesto, no siempre

02:44.100 --> 02:45.680
se necesita pero aquí, quiero

02:45.680 --> 02:48.440
construir una aplicación Node Express.

02:48.440 --> 02:51.500
Y se instalará el paquete body-parser que nos ayuda a analizar

02:51.500 --> 02:54.403
los cuerpos de las peticiones entrantes.

02:55.290 --> 02:58.180
Por ahora, eso es todo en cuanto a mis dependencias de producción.

02:58.180 --> 03:00.110
Es posible que más adelante añadamos más.

03:00.110 --> 03:01.523
Así que vamos a darle a enter aquí.

03:02.960 --> 03:04.120
Y con eso instalado,

03:04.120 --> 03:07.540
echemos un vistazo a las dependencias de desarrollo.

03:07.540 --> 03:11.450
Los instalaré con npm install --save-dev, y ahí, quiero instalar modemon,

03:11.450 --> 03:13.330
una herramienta que nos permite

03:13.330 --> 03:16.340
ejecutar un archivo con Node, pero que luego vigila

03:16.340 --> 03:18.210
el archivo y la carpeta en la que está

03:18.210 --> 03:19.820
el archivo, así como todas las

03:19.820 --> 03:22.690
subcarpetas en busca de cambios.

03:22.690 --> 03:24.050
Cada vez que se modifique un archivo,

03:24.050 --> 03:26.030
se reiniciará el servidor Node.

03:26.030 --> 03:27.620
Esto simplemente acelerará el desarrollo

03:27.620 --> 03:29.510
porque reiniciará automáticamente nuestro

03:29.510 --> 03:31.490
servidor de aplicaciones Node cada vez que

03:31.490 --> 03:33.500
cambiemos el código fuente.

03:33.500 --> 03:36.180
Necesitamos reiniciar el servidor cuando el código cambia

03:36.180 --> 03:39.430
porque de lo contrario, nuestro servidor sigue funcionando con el código

03:39.430 --> 03:41.340
antiguo, pero reiniciar manualmente es molesto

03:41.340 --> 03:44.190
por lo que no podemos acelerar esto con nodemon.

03:44.190 --> 03:47.323
Y por el momento, eso es todo.

03:49.290 --> 03:50.340
Así que vamos a darle a enter

03:50.340 --> 03:52.360
aquí y a instalar esta dependencia de desarrollo.

03:52.360 --> 03:54.760
No será la última que necesitemos en este curso,

03:54.760 --> 03:56.660
pero por el momento, estamos bien.

03:56.660 --> 03:58.830
Así que esperemos a que esto termine.

03:58.830 --> 04:00.130
Así que la instalación terminó,

04:00.130 --> 04:01.450
y ahora vamos a empezar a escribir

04:01.450 --> 04:04.773
y crear una aplicación Node Express muy básica.
