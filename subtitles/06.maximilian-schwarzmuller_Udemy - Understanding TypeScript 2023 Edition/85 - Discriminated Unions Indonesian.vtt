WEBVTT

00:02.210 --> 00:04.920
Narator: Sekarang, tipe khusus dari type guard, bisa

00:04.920 --> 00:05.753
dibilang, atau sesuatu

00:05.753 --> 00:07.940
yang membantu Anda dengan type guard, adalah

00:07.940 --> 00:10.000
discriminated union.

00:10.000 --> 00:11.300
Sekarang apa itu.

00:11.300 --> 00:13.310
Ini adalah pola, yang dapat Anda gunakan

00:13.310 --> 00:15.030
ketika bekerja dengan tipe union,

00:15.030 --> 00:18.900
yang membuat implementasi type guard menjadi lebih mudah.

00:18.900 --> 00:22.000
Ini tersedia apabila Anda bekerja dengan tipe objek.

00:22.000 --> 00:24.580
Izinkan saya menunjukkan kepada Anda cara kerjanya.

00:24.580 --> 00:26.850
Katakanlah kita memiliki beberapa interface, dan ini

00:26.850 --> 00:28.450
bisa juga berupa kelas, tetapi di sini saya

00:28.450 --> 00:29.950
akan menggunakan interface untuk menunjukkan

00:29.950 --> 00:32.193
bahwa ini juga berfungsi dengan itu.

00:33.170 --> 00:34.803
Dan di sana saya memiliki burung

00:36.480 --> 00:38.830
saya, yang memiliki kecepatan terbang, yang seharusnya

00:38.830 --> 00:40.973
bertipe number, katakanlah.

00:42.660 --> 00:45.890
Dan saya juga memiliki kuda saya, yang memiliki

00:45.890 --> 00:50.310
ground speed atau kecepatan lari, yang harus berupa angka

00:50.310 --> 00:51.913
tipe.

00:53.130 --> 00:55.430
Jadi, kita memiliki dua antarmuka di sini.

00:55.430 --> 00:58.800
Sekarang kita membuat tipe union kita sendiri,

00:58.800 --> 00:59.633
hewan, yaitu

01:00.750 --> 01:03.370
burung atau kuda.

01:03.370 --> 01:05.743
Dan seperti sebelumnya, kita mungkin memiliki

01:06.740 --> 01:08.480
fungsi, move animal yang mengambil

01:09.800 --> 01:13.040
hewan sebagai input, yang bertipe animal, Jadi menggunakan

01:13.040 --> 01:14.800
tipe union kita.

01:14.800 --> 01:19.800
Dan sekarang di sana, saya ingin mengatakan bergerak dengan kecepatan, dan sekarang

01:19.990 --> 01:21.050
tentu saja, saya

01:21.050 --> 01:25.180
perlu mengakses kecepatan terbang atau kecepatan lari.

01:25.180 --> 01:27.730
Sekarang, tentu saja, kita bisa saja menamakannya kecepatan.

01:27.730 --> 01:30.840
Tetapi ini hanyalah contoh yang disederhanakan dari kasus

01:30.840 --> 01:33.900
penggunaan nyata yang mungkin Anda hadapi, di mana Anda memiliki

01:33.900 --> 01:37.390
beberapa antarmuka atau objek secara umum, yang agak terkait tetapi

01:37.390 --> 01:40.500
memiliki properti atau metode yang berbeda.

01:40.500 --> 01:42.050
Jadi di sini, ini adalah properti

01:42.050 --> 01:43.900
kecepatan, yang sebenarnya berbeda.

01:43.900 --> 01:46.780
Jadi tidak bisa mengakses kecepatan terbang di sini karena tentu

01:46.780 --> 01:49.240
saja, tidak semua hewan memiliki kecepatan terbang.

01:49.240 --> 01:51.210
Sekarang kita bisa melakukan apa yang kita pelajari sebelumnya.

01:51.210 --> 01:56.063
Kita bisa memeriksa apakah kecepatan terbang ada pada hewan di sini.

01:58.240 --> 02:01.063
Dan jika itu yang terjadi, kita bisa mengeksekusi kode ini.

02:01.960 --> 02:04.470
Sekarang ini adalah pendekatan yang bisa kita ambil, tetapi

02:04.470 --> 02:07.430
semakin banyak hewan potensial yang kita dapatkan di sana, semakin

02:07.430 --> 02:09.233
banyak hal yang harus kita periksa.

02:10.880 --> 02:14.100
Kita juga bisa salah ketik di sini dalam string ini.

02:14.100 --> 02:15.810
Kita bisa melupakan E, misalnya, dan

02:15.810 --> 02:18.460
bertanya-tanya mengapa ini tidak akan berhasil.

02:18.460 --> 02:20.410
Sekarang, kita tidak bisa menggunakan instance

02:20.410 --> 02:22.570
di sini karena saya melanggar dengan antarmuka.

02:22.570 --> 02:27.490
Seperti yang sudah saya jelaskan, contoh hewan burung tidak akan berfungsi karena

02:27.490 --> 02:29.680
data adalah antarmuka, yang tidak dikompilasi

02:29.680 --> 02:31.840
ke JavaScript.

02:31.840 --> 02:33.970
Jadi pada saat runtime, ini tidak akan

02:33.970 --> 02:36.210
tersedia sebagai fungsi konstruktor.

02:36.210 --> 02:37.690
Jadi, oleh karena itu, ini tidak berfungsi.

02:37.690 --> 02:40.380
Sekarang kita bisa membangun persatuan yang terdiskriminasi

02:40.380 --> 02:42.460
di sini dengan memberikan setiap antarmuka.

02:42.460 --> 02:45.380
Jadi setiap objek yang seharusnya menjadi bagian dari

02:45.380 --> 02:47.130
Union, dan properti tambahan.

02:47.130 --> 02:48.640
Anda bisa menggunakan nama apa pun yang Anda inginkan.

02:48.640 --> 02:51.490
Sering kali Anda menggunakan jenis, atau ketik di sini.

02:51.490 --> 02:55.090
Saya akan memilih jenisnya, dan menamai burung ini.

02:55.090 --> 02:57.480
Sekarang penting, kita memperdagangkan antarmuka di sini.

02:57.480 --> 03:02.480
Jadi, ini sebenarnya bukan nilai untuk properti jenis.

03:02.650 --> 03:05.410
Ini adalah tipe literal seperti yang Anda pelajari,

03:05.410 --> 03:09.110
di mana type harus memegang string, yang harus berupa burung.

03:09.110 --> 03:10.880
Jadi, ini adalah type assignment,

03:10.880 --> 03:15.000
di mana kita mempersempit nilai yang mungkin disimpan dalam type

03:15.000 --> 03:17.590
menjadi nilai string ini.

03:17.590 --> 03:19.810
Dan kemudian lakukan hal yang sama untuk kuda

03:19.810 --> 03:22.283
, hanya dengan kuda sebagai jenis literal.

03:23.400 --> 03:25.060
Sekarang di sini, dalam

03:25.060 --> 03:27.550
fungsi kita, kita dapat menggunakan

03:27.550 --> 03:29.840
pernyataan sakelar dan beralih

03:29.840 --> 03:32.280
pada jenis titik hewan.

03:32.280 --> 03:34.080
Setiap hewan memiliki properti tipe

03:34.080 --> 03:36.330
karena kita menambahkannya ke semua antarmuka

03:36.330 --> 03:38.350
yang membentuk hewan kita.

03:38.350 --> 03:40.730
Dan kemudian di sini kita dapat memiliki beberapa

03:40.730 --> 03:42.330
kasus di mana kita bahkan mendapatkan

03:42.330 --> 03:44.990
penyelesaian otomatis karena TypeScript dan IDE

03:44.990 --> 03:49.040
kita memahami bahwa tipe hanya bisa berupa burung atau kuda.

03:49.040 --> 03:51.050
Dan jika itu burung, maka kita bisa

03:51.050 --> 03:55.003
mengatur beberapa kecepatan variabel internal untuk katakanlah,

03:55.900 --> 03:58.860
kecepatan terbang titik hewan dan kemudian istirahat

03:59.880 --> 04:02.250
setelahnya.

04:02.250 --> 04:05.183
Jika tidak, jika kasusnya adalah kuda, kita

04:06.830 --> 04:11.753
menetapkan kecepatan sama dengan kecepatan lari titik hewan.

04:14.150 --> 04:17.490
Dan di sana setelah kita dapat konsol log, bergerak

04:17.490 --> 04:20.843
dengan kecepatan plus kecepatan.

04:22.490 --> 04:26.540
Jika sekarang saya memanggil, memindahkan hewan dengan hewan yang saya

04:26.540 --> 04:30.300
buat dengan cepat di sini, di mana saya mengatur jenisnya ke burung dan

04:30.300 --> 04:32.810
saya hanya mengizinkan untuk menggunakan burung

04:32.810 --> 04:34.930
atau kuda, maka saya harus mengatur kecepatan

04:36.140 --> 04:39.210
terbang saya dan omong-omong, TypeScript bahkan mengenali

04:39.210 --> 04:42.050
bahwa konsep kecepatan lari di sini untuk mencoba melakukan

04:42.050 --> 04:44.220
itu dan mengatur ini menjadi 10, ia mengeluh

04:44.220 --> 04:48.980
bahwa ini tidak tersedia untuk jenis burung.

04:48.980 --> 04:51.360
Jika saya mengaturnya ke kecepatan terbang, bagaimanapun

04:51.360 --> 04:55.120
itu bekerja, jika kita menyimpannya, ia mengeluarkan ini dengan benar, dan

04:55.120 --> 04:57.700
juga mengkompilasi tanpa kesalahan.

04:57.700 --> 04:59.530
Sekarang ini adalah union yang

04:59.530 --> 05:04.060
terdiskriminasi karena kita memiliki satu properti umum di setiap objek yang

05:04.060 --> 05:08.040
membentuk union kita, yang mendeskripsikan objek tersebut, sehingga

05:08.040 --> 05:11.490
kita dapat menggunakan properti ini yang mendeskripsikan

05:11.490 --> 05:16.490
objek ini dalam pemeriksaan kita untuk memiliki keamanan tipe 100% dan memahami properti

05:16.770 --> 05:19.870
mana yang tersedia untuk objek tersebut dan properti

05:19.870 --> 05:21.930
mana yang tidak.

05:21.930 --> 05:24.500
Jadi ini adalah pola baru yang berguna yang dapat

05:24.500 --> 05:28.060
Anda gunakan saat bekerja dengan objek dan dengan tipe union.

05:28.060 --> 05:30.340
Dan bahkan bekerja dengan antarmuka karena

05:30.340 --> 05:33.630
antarmuka ini memaksa setiap objek yang Anda bangun berdasarkan

05:33.630 --> 05:37.050
antarmuka ini, untuk memiliki tipe ini.

05:37.050 --> 05:39.400
Jadi, alih-alih memeriksa keberadaan properti

05:39.400 --> 05:41.200
yang diberikan, atau alih-alih

05:41.200 --> 05:43.660
menggunakan instance of, kita menggunakan

05:43.660 --> 05:46.310
properti yang kita tahu ada untuk memeriksa jenis

05:46.310 --> 05:49.020
objek yang sedang kita kerjakan.

05:49.020 --> 05:51.930
Kami juga menghilangkan bahaya salah ketik karena TypeScript

05:51.930 --> 05:54.730
memahami bahwa satu-satunya kasus yang dapat kita miliki

05:54.730 --> 05:58.480
di sini, untuk jenis hewan, adalah burung dan kuda dan karenanya memberi kita

05:58.480 --> 06:00.810
seni penyelesaian ini dan jika Anda akan memperkenalkan

06:00.810 --> 06:02.770
kesalahan ketik, kami akan segera mendapatkan

06:02.770 --> 06:04.690
kesalahan.

06:04.690 --> 06:06.780
Jadi oleh karena itu, ini adalah pola yang sangat

06:06.780 --> 06:09.333
berguna ketika bekerja dengan objek dan tipe union.
