WEBVTT

00:02.260 --> 00:03.920
Instructor: Entonces, sindicatos discriminados.

00:03.920 --> 00:05.750
Muy, muy útil.

00:05.750 --> 00:09.060
Otra característica muy útil es la fundición de tipos.

00:09.060 --> 00:12.640
El Type Casting te ayuda a decirle a TypeScript que

00:12.640 --> 00:15.350
algún valor es de un tipo específico cuando

00:15.350 --> 00:19.240
TypeScript no es capaz de detectarlo por sí mismo, pero

00:19.240 --> 00:22.660
tú como desarrollador sabes que será así.

00:22.660 --> 00:25.030
Un buen ejemplo para esto es si conseguimos

00:25.030 --> 00:27.120
X a algo en el dom.

00:27.120 --> 00:29.560
Digamos que aquí tenemos un párrafo en

00:29.560 --> 00:32.180
el dom sólo un párrafo, nada más allí, y es

00:32.180 --> 00:33.390
un párrafo vacío.

00:33.390 --> 00:35.190
Así que, obviamente, si guardamos eso,

00:35.190 --> 00:37.150
no vemos nada aquí, en la pantalla.

00:37.150 --> 00:38.950
Ahora podemos acceder a ese párrafo

00:38.950 --> 00:40.543
desde nuestro script.

00:43.160 --> 00:48.160
Const párrafo con el selector de consulta del documento P, por ejemplo.

00:49.180 --> 00:51.890
Ahora bien, cuando usamos el selector de consulta

00:51.890 --> 00:54.500
y pasamos P como selector, de modo que está seleccionando

00:54.500 --> 00:57.070
por la etiqueta P, entonces TypeScript es capaz

00:57.070 --> 00:59.510
de averiguar, como puedes ver si pasas el ratón

00:59.510 --> 01:02.480
por encima, que esto será de tipo elemento párrafo o nulo

01:02.480 --> 01:05.900
porque tal vez ese elemento no existe en la página, pero eso es otra

01:05.900 --> 01:07.050
cosa.

01:07.050 --> 01:09.920
Ignoremos por ahora el caso o nulo.

01:09.920 --> 01:12.400
Lo importante es que TypeScript descubra realmente

01:12.400 --> 01:14.600
que se trata de un elemento de párrafo.

01:14.600 --> 01:16.800
Ahora, esto cambia si seleccionamos

01:16.800 --> 01:18.460
por algo más, digamos un ID.

01:18.460 --> 01:22.020
Aquí nombramos mensaje-salida, por lo que este párrafo tiene

01:22.020 --> 01:23.920
un ID de mensaje-salida.

01:23.920 --> 01:25.890
Ahora nosotros, como desarrollador, por

01:25.890 --> 01:28.360
supuesto sabemos que asignamos este ID a este párrafo,

01:28.360 --> 01:29.780
pero TypeScript no lo sabe.

01:29.780 --> 01:33.020
TypeScript no se sumerge en nuestros archivos

01:33.020 --> 01:34.590
HTML y los analiza.

01:34.590 --> 01:37.360
Así que si ahora seleccionamos por ese

01:37.360 --> 01:41.720
ID aquí, por ejemplo, con getElementById, entonces vemos que

01:41.720 --> 01:45.130
lo que TypeScript infiere es que esto es sólo un elemento

01:45.130 --> 01:49.830
HTML o null, no sabe qué elemento HTML específico es.

01:49.830 --> 01:52.720
Ahora, para un párrafo, eso podría no importar demasiado,

01:52.720 --> 01:54.830
tal vez sólo queremos hacer cosas con

01:54.830 --> 01:57.290
él que podríamos hacer con cualquier elemento

01:57.290 --> 01:59.990
HTML, por ejemplo, acceder a su contenido de texto

01:59.990 --> 02:01.470
o algo así.

02:01.470 --> 02:03.220
Pero, ¿y si tuviéramos una aportación aquí?

02:03.220 --> 02:07.750
¿Qué pasa si en realidad teníamos un texto de tipo de entrada, y queremos obtener

02:07.750 --> 02:10.430
el valor que el usuario introdujo por lo que voy

02:10.430 --> 02:12.760
a darle un ID de usuario-entrada y ahora selecciono

02:12.760 --> 02:15.500
esto en mi código TypeScript.

02:15.500 --> 02:17.730
Así que aquí selecciono por ID user-input,

02:17.730 --> 02:21.530
y ya no es un párrafo, sino userInputElement.

02:21.530 --> 02:24.023
Ahora nosotros como desarrollador, sabemos que aquí,

02:24.909 --> 02:26.700
llegamos a este elemento de entrada, pero

02:26.700 --> 02:28.530
como he dicho, TypeScript no lo sabe.

02:28.530 --> 02:31.140
TypeScript no lee nuestro código HTML, por lo que

02:31.140 --> 02:34.435
TypeScript sólo sabe que se trata de algún elemento HTML.

02:34.435 --> 02:37.860
Ahora, si yo quisiera establecer la propiedad

02:37.860 --> 02:40.902
de valor de este por lo tanto, y trataría de

02:40.902 --> 02:45.000
hacer userInputElement. valor igual hola, ves que en

02:45.000 --> 02:47.050
realidad me da un error.

02:47.050 --> 02:48.960
Obtengo un error porque por un lado, este

02:48.960 --> 02:50.780
objeto es posiblemente nulo.

02:50.780 --> 02:54.220
Podemos arreglar esto añadiendo un signo de exclamación

02:54.220 --> 02:56.210
después de esto, y volveré a esto

02:56.210 --> 02:58.390
en un segundo, pero incluso entonces

02:58.390 --> 03:01.640
sigo obteniendo un error de que el valor no existe en

03:01.640 --> 03:03.890
el tipo Elemento HTML porque este tipo

03:03.890 --> 03:08.343
genérico, que básicamente cualquier elemento HTML tiene como tipo, no

03:08.343 --> 03:11.630
soporta propiedades que son específicas de, bueno,

03:11.630 --> 03:14.510
elementos HTML específicos.

03:14.510 --> 03:17.540
Por lo tanto, tendríamos que decirle a TypeScript

03:17.540 --> 03:20.860
que en realidad lo que seleccionamos aquí no sólo no

03:20.860 --> 03:25.080
es null, sino que también es de tipo HTMLInputElement.

03:25.080 --> 03:28.240
Y eso es lo que podemos hacer con la fundición de tipos.

03:28.240 --> 03:31.153
Ahora bien, hay dos formas de fundición de tipos, dos sintaxis

03:31.153 --> 03:34.170
que podemos utilizar, y que son equivalentes.

03:34.170 --> 03:36.971
Una es que añadimos algo delante de lo que queremos

03:36.971 --> 03:41.920
convertir, o donde queremos decirle a TypeScript que escriba.

03:41.920 --> 03:44.170
Añadimos paréntesis angulares de apertura

03:44.170 --> 03:45.810
y cierre y luego entre estos paréntesis,

03:45.810 --> 03:49.480
el tipo de la cosa después de los paréntesis angulares.

03:49.480 --> 03:51.223
En este caso, HTMLInputElement.

03:53.110 --> 03:54.970
Y este tipo está disponible globalmente

03:54.970 --> 03:57.963
porque en mi archivo tsconfig, estoy incluyendo la lib. dom.

03:59.180 --> 04:00.810
Con esto, TypeScript sabe que

04:00.810 --> 04:03.830
cualquier cosa que seleccionemos aquí después de los

04:03.830 --> 04:06.530
paréntesis angulados será de tipo HTMLInputElement,

04:06.530 --> 04:08.950
y por lo tanto ya no se queja.

04:08.950 --> 04:10.330
Así que, esta es la versión uno.

04:10.330 --> 04:12.830
Permítanme copiar eso y comentarlo y mostrarles

04:12.830 --> 04:14.750
la alternativa.

04:14.750 --> 04:18.000
Esto funciona absolutamente bien y puedes usarlo.

04:18.000 --> 04:21.210
Ahora bien, si conoces React, sin embargo, sabes

04:21.210 --> 04:24.400
que ahí, también tienes esa sintaxis de corchetes

04:24.400 --> 04:26.970
en ángulo dentro de JavaScript o TypeScript

04:26.970 --> 04:29.200
si usas eso para los archivos React,

04:29.200 --> 04:33.550
donde escribes código JSX en tus componentes React.

04:33.550 --> 04:36.060
Ahora bien, si no conoces React, puede que eso no te diga mucho.

04:36.060 --> 04:40.800
Sólo ten en cuenta que existe una sintaxis similar en los proyectos de React y allí los paréntesis

04:40.800 --> 04:43.320
angulados no se utilizan para pasar ninguna información

04:43.320 --> 04:47.480
sobre los tipos que estás utilizando, sino que son analizados por algunas herramientas

04:47.480 --> 04:50.390
de compilación y por React, en última instancia, para saber

04:50.390 --> 04:54.390
lo que quieres renderizar en la pantalla.

04:54.390 --> 04:56.750
Por lo tanto, totalmente desvinculado de TypeScript.

04:56.750 --> 04:59.880
Para no chocar con esa sintaxis JSX, el equipo de TypeScript

04:59.880 --> 05:01.900
proporciona una alternativa a este casting

05:01.900 --> 05:04.350
de tipos con corchetes angulados.

05:04.350 --> 05:06.450
También puede añadir algo después de la

05:06.450 --> 05:07.920
cosa que desea escribir fundido,

05:07.920 --> 05:09.960
así que después de esta selección en este

05:09.960 --> 05:12.600
caso, y esa cosa es la palabra clave as.

05:12.600 --> 05:14.740
Y entonces aquí de nuevo añades el tipo

05:14.740 --> 05:16.750
al que quieres lanzar esto.

05:16.750 --> 05:19.970
Así que, esto le dice a TypeScript que la expresión

05:19.970 --> 05:23.730
delante de ella, en este caso, esta expresión aquí, producirá

05:23.730 --> 05:27.405
un valor de tipo HTMLInputElement.

05:27.405 --> 05:30.067
Por lo tanto, de nuevo, no obtenemos ningún error.

05:30.067 --> 05:31.650
Por lo tanto, esta es una alternativa,

05:31.650 --> 05:33.940
y usted puede utilizar cualquiera de las dos

05:33.940 --> 05:36.350
sintaxis, lo que usted prefiere, sólo debe tratar

05:36.350 --> 05:38.990
de ser coherente en todo su proyecto a continuación,

05:38.990 --> 05:42.377
para que no se alternan entre estas dos sintaxis.

05:42.377 --> 05:45.220
Y con eso, puedes pasar esta valiosa información

05:45.220 --> 05:47.480
extra a TypeScript y hacer que el código

05:47.480 --> 05:50.400
como este funcione, aunque TypeScript por sí

05:50.400 --> 05:52.760
mismo no sería capaz de averiguar que

05:52.760 --> 05:56.000
esto aquí produce un HTMLInputElement.

05:56.000 --> 05:57.940
Por supuesto, ya que estás forzando a TypeScript

05:57.940 --> 06:00.420
a usar este tipo, es tu responsabilidad como desarrollador

06:00.420 --> 06:02.200
asegurarte de que cualquier cosa que

06:02.200 --> 06:05.620
esta expresión produzca será de ese tipo.

06:05.620 --> 06:07.700
De lo contrario, podría obtener un error en tiempo

06:07.700 --> 06:09.920
de ejecución o un comportamiento inesperado en tiempo

06:09.920 --> 06:12.780
de ejecución si intenta interactuar con ese elemento de una manera

06:12.780 --> 06:14.423
que en realidad no es compatible.

06:15.610 --> 06:18.060
Por lo tanto, el reparto de tipos es una característica poderosa.

06:18.060 --> 06:20.490
También lo es este signo de exclamación de aquí.

06:20.490 --> 06:22.590
De hecho, ya exploré esto

06:22.590 --> 06:24.820
un poco antes en el curso.

06:24.820 --> 06:27.470
Este signo de exclamación nos permite decirle a TypeScript

06:27.470 --> 06:31.090
que la expresión que se encuentra delante de él nunca producirá null.

06:31.090 --> 06:33.170
Y esto es necesario para algunas expresiones,

06:33.170 --> 06:35.070
como esta de aquí, cuando se selecciona

06:35.070 --> 06:38.010
algo del dom que podría devolver null.

06:38.010 --> 06:40.980
Si sabemos como desarrollador que esto nunca devolverá null,

06:40.980 --> 06:43.690
entonces podemos usar este signo de exclamación.

06:43.690 --> 06:45.470
Por lo demás, y eso ya lo has

06:45.470 --> 06:48.248
aprendido, sólo quiero reiterarlo.

06:48.248 --> 06:49.380
De lo contrario, si no estás

06:49.380 --> 06:52.600
seguro de que esto no devolverá null, puedes utilizar una comprobación if.

06:52.600 --> 06:56.070
Así que podría comprobar si userInputElement es verdadero,

06:56.070 --> 06:57.510
y por lo tanto no es nulo,

06:57.510 --> 06:59.440
y luego usarlo allí.

06:59.440 --> 07:02.720
Ahora, tuve que quitar el casting de tipo en este caso porque si

07:02.720 --> 07:04.670
hacemos el casting de tipo aquí, también

07:04.670 --> 07:07.170
le decimos a TypeScript que esto no será nulo, y como

07:07.170 --> 07:10.470
no estoy seguro de eso, no puedo hacer el casting aquí.

07:10.470 --> 07:13.120
En cambio, tengo que hacerlo aquí cuando utilice

07:13.120 --> 07:14.290
el valor, y por lo tanto

07:14.290 --> 07:16.600
quiero hacerlo antes de acceder a la propiedad

07:16.600 --> 07:19.820
value, añadiendo como HTMLInputElement así.

07:19.820 --> 07:21.530
Sin embargo, eso fracasaría.

07:21.530 --> 07:24.060
Esta es una sintaxis inválida, usted trataría

07:24.060 --> 07:28.030
de acceder a una propiedad de valor en una cosa HTMLInputElement, y

07:28.030 --> 07:30.280
esto ni siquiera tiene sentido.

07:30.280 --> 07:33.010
Simplemente tenemos que envolver esta expresión entre

07:33.010 --> 07:35.670
paréntesis, luego asegurarnos de que esto se evalúa primero,

07:35.670 --> 07:37.590
y luego tratamos de acceder al valor en el

07:37.590 --> 07:39.480
resultado de esta expresión.

07:39.480 --> 07:41.650
Y ahora tenemos una alternativa al uso del

07:41.650 --> 07:42.893
signo de exclamación.
