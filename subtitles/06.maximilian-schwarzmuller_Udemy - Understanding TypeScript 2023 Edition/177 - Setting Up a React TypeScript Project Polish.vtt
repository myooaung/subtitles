WEBVTT

00:02.150 --> 00:04.320
Narrator: Jeśli chodzi o budowanie

00:04.320 --> 00:07.220
aplikacji React z Typescript, oczywiście potrzebujemy

00:07.220 --> 00:10.800
konfiguracji projektu, która jest w stanie zarówno obsługiwać

00:10.800 --> 00:13.730
nasz kod React, więc rzeczy takie jak JSX, na przykład,

00:13.730 --> 00:17.480
i który kompiluje się pozostaje i optymalizuje nasz kod React,

00:17.480 --> 00:21.500
i który w tym samym czasie, jest w stanie zrozumieć TypeScript i kompilacji

00:21.500 --> 00:25.320
TypeScript do JavaScript.

00:25.320 --> 00:27.430
Samodzielne skonfigurowanie takiego

00:27.430 --> 00:28.750
projektu może być dość trudne,

00:28.750 --> 00:31.940
dlatego dobrze, że Create React App, narzędzie zarządzane

00:31.940 --> 00:34.080
przez zespół React, które możemy wykorzystać

00:34.080 --> 00:36.420
do tworzenia projektów React, wspiera TypeScript

00:36.420 --> 00:39.110
po wyjęciu z pudełka.

00:39.110 --> 00:42.110
Możesz po prostu Google dla Create React App TypeScript,

00:42.110 --> 00:44.590
a powinieneś znaleźć ten wpis na oficjalnej

00:44.590 --> 00:47.000
dokumentacji Create React App.

00:47.000 --> 00:49.140
Tam dowiesz się, jak możesz dodać TypeScript

00:49.140 --> 00:51.540
do albo istniejącego projektu, tutaj,

00:51.540 --> 00:54.850
te kroki, lub jak możesz stworzyć nowy projekt z Create

00:54.850 --> 00:57.290
React App i TypeScript, a tutaj widzisz

00:57.290 --> 01:00.400
polecenie, które możesz po prostu skopiować, aby

01:00.400 --> 01:03.030
utworzyć nowy projekt React, który również

01:03.030 --> 01:05.680
obsługuje TypeScript.

01:05.680 --> 01:07.020
Teraz wykorzystam to

01:07.020 --> 01:11.110
tutaj, a tutaj już jestem w folderze, który chcę wykorzystać.

01:11.110 --> 01:13.210
To jest po prostu folder projektu, którego

01:13.210 --> 01:14.790
chcę użyć do tego projektu.

01:14.790 --> 01:16.900
A potem po prostu wkleimy to polecenie.

01:16.900 --> 01:17.740
I w tym przypadku,

01:17.740 --> 01:20.970
ponieważ chcę użyć folderu, w którym już jestem, również

01:20.970 --> 01:22.710
tutaj w moim terminalu, zastąpię

01:22.710 --> 01:25.190
nazwę projektu kropką, aby nie tworzył

01:25.190 --> 01:27.590
nowego podfolderu i tworzył projekt w

01:27.590 --> 01:29.550
tym, ale że zamiast tego używa tego

01:29.550 --> 01:31.730
folderu.

01:31.730 --> 01:33.720
Jest to oczywiście opcjonalne.

01:33.720 --> 01:35.850
Chcę również powiedzieć, że zauważyłem,

01:35.850 --> 01:38.070
że to polecenie nie zawsze działa.

01:38.070 --> 01:41.390
Czasami tworzy zwykły projekt w języku JavaScript.

01:41.390 --> 01:42.590
Aby to naprawić, możesz

01:42.590 --> 01:46.343
zainstalować Create React App globalnie na swoim komputerze.

01:47.340 --> 01:49.140
Coś, co możesz po prostu zrobić,

01:49.140 --> 01:54.140
uruchamiając npm install -g create-react-app, na Macu i Linuksie może być konieczne

01:54.780 --> 01:56.560
dodanie sudo przed tym.

01:56.560 --> 01:59.360
I z tym zainstalowanym na maszynie, możesz faktycznie

01:59.360 --> 02:03.010
uruchomić to polecenie tutaj, ale bez npx, po prostu tak, a następnie

02:03.010 --> 02:05.920
powinno to zdecydowanie działać.

02:05.920 --> 02:07.270
Więc to właśnie zrobię tutaj,

02:07.270 --> 02:09.320
ale normalnie powinno to również działać

02:09.320 --> 02:12.250
bez instalowania go, po prostu używając narzędzia npx,

02:12.250 --> 02:15.520
które jest częścią narzędzia npm, które już zainstalowaliśmy

02:15.520 --> 02:18.840
razem z Node. js wcześniej w kursie.

02:18.840 --> 02:23.250
Więc na razie rusztuje nowy projekt do tego folderu tutaj.

02:23.250 --> 02:27.460
I w tym projekcie założy aplikację React, w której będziemy

02:27.460 --> 02:31.070
mogli pisać cały nasz kod za pomocą TypeScript.

02:31.070 --> 02:32.460
Poczekajmy więc, aż to się skończy.

02:32.460 --> 02:34.610
I zobaczmy, co to nam daje.

02:34.610 --> 02:36.010
I skończyło się.

02:36.010 --> 02:37.930
Przyjrzyjmy się więc temu, co mamy.

02:37.930 --> 02:41.000
Mamy folder, który możesz rozpoznać, że jest to w zasadzie

02:41.000 --> 02:43.970
ta sama struktura, którą masz, gdy tworzysz React App

02:43.970 --> 02:45.500
bez TypeScript.

02:45.500 --> 02:48.790
Ale możemy już zobaczyć tsconfig. plik json.

02:48.790 --> 02:51.020
Przy okazji, możesz również edytować ten plik

02:51.020 --> 02:52.940
i dostroić go do swoich potrzeb.

02:52.940 --> 02:55.250
Przecież wcześniej w kursie nauczyłeś się

02:55.250 --> 02:57.120
jak podrasować tę konfigurację.

02:57.120 --> 02:58.460
Domyślna konfiguracja powinna

02:58.460 --> 03:01.160
być jednak w porządku dla większości przypadków użycia.

03:01.160 --> 03:02.950
Teraz, jeśli zbadamy folder src,

03:02.950 --> 03:05.230
w którym będziemy pisać nasz kod źródłowy,

03:05.230 --> 03:08.550
znajdziemy również garść . pliki tsx.

03:08.550 --> 03:11.900
Jak dotąd w kursie nie pracowaliśmy z . tsx, ale tylko z plikami

03:11.900 --> 03:13.787
. pliki ts. tsx po prostu został

03:13.787 --> 03:17.800
tutaj wybrany, ponieważ są to pliki, w których nie można pisać tylko

03:17.800 --> 03:20.530
kodu TypeScript, ale cały kod JSX, który po prostu

03:20.530 --> 03:22.000
jest specjalną składnią

03:22.000 --> 03:25.570
React, JavaScript, gdzie piszemy znaczniki HTML wewnątrz

03:25.570 --> 03:29.930
swojego kodu JavaScript, czyli w tym przypadku TypeScript.

03:29.930 --> 03:32.880
To jest to, co dostajemy tutaj.

03:32.880 --> 03:34.920
Teraz w tych plikach, możemy już zobaczyć

03:34.920 --> 03:36.500
niektóre składnie TypeScript,

03:36.500 --> 03:38.800
na przykład, tutaj, mamy przypisanie typu, będę

03:38.800 --> 03:41.480
miał bliższe spojrzenie na ten typ później, ale na razie,

03:41.480 --> 03:43.880
po prostu możemy natychmiast zobaczyć, że oczywiście

03:43.880 --> 03:45.780
używamy TypeScript tutaj.

03:45.780 --> 03:49.290
W tym momencie, pozwólcie mi oczyścić nieco strukturę folderów

03:49.290 --> 03:50.680
startowych, a następnie

03:50.680 --> 03:52.730
zbudujmy razem bardzo prostą aplikację

03:52.730 --> 03:56.150
React, a podczas gdy to robimy, zbadajmy jak możemy używać TypeScript

03:56.150 --> 03:57.550
z React.

03:57.550 --> 04:01.000
Skupmy się więc najpierw na sprzątaniu,

04:01.000 --> 04:02.950
tu w App. tsx, usunę import logo i usunę

04:02.950 --> 04:06.860
całą zawartość w moim div tutaj

04:06.860 --> 04:09.380
i po prostu zachowam ten div dlatego.

04:09.380 --> 04:12.020
Usunę również aplikację. import css, pozbyć

04:12.020 --> 04:15.530
się App. plik css i App. test. tsx, jak również

04:15.530 --> 04:19.560
logo. svg i serviceWorker. pliki ts, usuń

04:19.560 --> 04:23.470
wszystkie.

04:23.470 --> 04:25.500
W indeksie. tsx, usunę ten import ServiceWorker,

04:25.500 --> 04:29.060
ponieważ nie będziemy pracować

04:29.060 --> 04:32.100
z serviceWorkers tutaj, usuń ten kod na dole, a skończysz

04:32.100 --> 04:34.530
z tym ustawieniem, a w indeksie. css Wyczyszczę to wszystko i po prostu

04:34.530 --> 04:38.870
ustawię jakiś styl HTML, gdzie chcę

04:38.870 --> 04:40.610
ustawić font-family of sans-serif,

04:40.610 --> 04:43.140
a następnie styl body, gdzie chcę pozbyć

04:43.140 --> 04:48.820
się marginesu, tak po prostu, bardzo prosta stylizacja.

04:48.820 --> 04:50.763
I dzięki temu mamy setup startowy,

04:52.790 --> 04:54.540
z którym chcę pracować.

04:54.540 --> 04:55.840
Teraz znowu, wspomniałem o tym, ale

04:55.840 --> 04:57.370
jeśli to wszystko nie mówi ci nic, jeśli jest

04:57.370 --> 04:59.710
to składnia, której nigdy wcześniej nie widziałeś, to zdecydowanie

04:59.710 --> 05:02.200
zanurkuj w niektórych zasobach React najpierw.

05:02.200 --> 05:05.610
To nie jest to, na czym skupimy się w tym module, nie

05:05.610 --> 05:08.130
nauczysz się Reacta w tym module.

05:08.130 --> 05:11.010
Ale z tym, zapiszmy wszystkie nasze zmiany i teraz

05:11.010 --> 05:12.920
kontynuujmy, i zacznijmy pisać

05:12.920 --> 05:15.680
trochę kodu React i Typhon, i nauczyć się, jak

05:15.680 --> 05:17.980
te dwie rzeczy działają razem.
