WEBVTT

00:02.460 --> 00:05.590
-: So werden Arrays unterstützt und mit Zahlen, Strings,

00:05.590 --> 00:07.620
Booleons, Objekten und Arrays.

00:07.620 --> 00:11.400
Wir haben die Kernwerte oder Werttypen, JavaScript nos in TypeScript

00:11.400 --> 00:15.100
unterstützt, wie Sie am Beispiel von Objekten in ihren Arrays lernen

00:15.100 --> 00:17.884
werden, TypeScript bietet sogar viel mehr funktionale

00:17.884 --> 00:21.520
es gibt, aber das ist ein bisschen mehr fortgeschritten, weshalb

00:21.520 --> 00:22.720
wir einen Blick auf das

00:22.720 --> 00:24.940
später haben, aber auch diese Kerntypen

00:24.940 --> 00:26.810
mit dem, was Sie in den vorherigen

00:26.810 --> 00:30.140
Vorlesungen lernen werden unterstützt.

00:30.140 --> 00:33.540
TypeScript enthält einige neue Konzepte, neue

00:33.540 --> 00:37.840
Typen, die wir nicht aus Vanilla-Java-Script kennen, zum

00:37.840 --> 00:40.300
Beispiel den Tupel-Typ.

00:40.300 --> 00:44.360
Sie kennen Tupel vielleicht aus anderen Programmiersprachen,

00:44.360 --> 00:46.570
in JavaScript gibt es sie nicht.

00:46.570 --> 00:49.570
Das ist zum Beispiel ein Tupel, und Sie würden sagen,

00:49.570 --> 00:52.290
das ist ein Array. Es ist ein Array, aber

00:52.290 --> 00:54.520
es ist ein Array mit fester Länge, und

00:54.520 --> 00:58.650
zwar nicht nur mit fester Länge, sondern auch mit festem Typ.

00:58.650 --> 01:00.730
Und wo könnte das nützlich sein?

01:00.730 --> 01:03.350
Nehmen wir an, wir haben hier bei unserer

01:03.350 --> 01:07.830
Person eine Reihe von Eigenschaften, role, die ein Array mit

01:07.830 --> 01:11.160
genau zwei Elementen ist, wobei das erste, sagen

01:11.160 --> 01:14.184
wir, ein numerischer Bezeichner wie two

01:14.184 --> 01:18.547
ist und das zweite ein String-Bezeichner und eine von Menschen

01:18.547 --> 01:22.765
lesbare Beschreibung wie author.

01:22.765 --> 01:26.496
Diese sollte immer genau zwei Elemente haben, weil ein Benutzer

01:26.496 --> 01:30.100
oder eine Person in dieser Anwendung, die wir schreiben,

01:30.100 --> 01:32.720
nur eine Rolle haben kann und eine Rolle nur

01:32.720 --> 01:35.185
aus zwei Elementen besteht.

01:35.185 --> 01:37.400
Natürlich hätten wir hier auch eine Optik verwenden

01:37.400 --> 01:39.090
können, aber aus irgendeinem Grund wollen

01:39.090 --> 01:41.744
wir ein Array mit genau zwei Elementen haben, wobei das erste

01:41.744 --> 01:43.118
Element immer der numerische

01:43.118 --> 01:47.570
Bezeichner und das zweite Element immer der String-Bezeichner oder die Beschreibung oder wie

01:47.570 --> 01:50.220
auch immer Sie es nennen wollen, ist.

01:50.220 --> 01:52.420
Wenn wir mit dem Mauszeiger darüber fahren,

01:52.420 --> 01:55.730
erkennt TypeScript diesen seltsamen Typ, den wir noch nie gesehen

01:55.730 --> 01:58.550
haben. Wenn wir ihn ausblenden, versteht TypeScript, dass

01:58.550 --> 02:01.250
wir ein Array haben, das sogar Strings oder Zahlen enthalten

02:01.250 --> 02:03.440
kann, einen Union-Typ, auf den wir später noch

02:03.440 --> 02:06.710
eingehen werden. Das Wichtigste ist, dass TypeScript

02:06.710 --> 02:09.950
versteht, dass es sich um ein Array mit diesen Typen von Werten

02:09.950 --> 02:11.668
handeln sollte.

02:11.668 --> 02:14.580
Die Daunen, die tot ist Wir könnten diesen

02:14.580 --> 02:18.780
Code aber ausführen, Person Rolle, Push, Admin.

02:18.780 --> 02:20.250
Für unsere Anwendung ist das vielleicht

02:20.250 --> 02:21.970
nicht sinnvoll, weil wir wissen, dass

02:21.970 --> 02:23.960
wir nur zwei Elemente brauchen.

02:23.960 --> 02:25.790
Trotzdem weiß TypeScript nicht, dass

02:25.790 --> 02:28.963
wir nur zwei Elemente wollen. Wir könnten auch die Personenrolle,

02:28.963 --> 02:35.200
das zweite Element mit dem Index eins, auf eine Zahl umstellen.

02:35.200 --> 02:38.010
Das würde funktionieren, weil TypeScript nur weiß,

02:38.010 --> 02:42.360
dass role vom Typ string oder number array sein sollte, und daher wäre es erlaubt,

02:42.360 --> 02:44.700
dem zweiten Element hier eine Zahl zuzuweisen

02:44.700 --> 02:46.870
und es daher durch eine Zahl zu ersetzen,

02:46.870 --> 02:48.680
weil wir nur etwas über die Typen

02:48.680 --> 02:50.886
sagen, die wir generell dort verwenden

02:50.886 --> 02:52.580
können.

02:52.580 --> 02:55.040
Wir wissen, dass wir genau diese Struktur haben wollen.

02:55.040 --> 02:58.094
Zwei Elemente, erstes Element Nummer, zweites Element String,

02:58.094 --> 03:01.770
aber TypeScript macht das nicht. Für ein solches Szenario

03:01.770 --> 03:05.865
wäre ein Tupel perfekt. Wir können TypeScript mitteilen,

03:05.865 --> 03:10.865
welche Rolle es sein soll, indem wir explizit den Typ der Rolle festlegen.

03:11.010 --> 03:13.230
Hier haben wir also auch ein Beispiel, bei

03:13.230 --> 03:16.600
dem TypeScript nicht phototypisiert, wir es aber explizit außer

03:16.600 --> 03:19.927
Kraft setzen wollen. Hier können wir also einen expliziten

03:19.927 --> 03:23.041
Objekttyp hinzufügen, indem wir einen Doppelpunkt nach Person

03:23.041 --> 03:27.023
hinzufügen, dann die geschweiften Klammern und dann sollte Name eine Zeichenkette

03:27.023 --> 03:31.180
sein, Alter eine Zahl und Hobbys ein String-Array.

03:31.180 --> 03:33.740
Also alles wie von TypeScript abgeleitet.

03:33.740 --> 03:35.401
Dafür hätten wir diese explizite Zuweisung

03:35.401 --> 03:36.827
nicht gebraucht, und wie Sie erfahren,

03:36.827 --> 03:38.789
wäre das auch schlecht gewesen.

03:38.789 --> 03:40.470
Nun haben wir aber ein Szenario,

03:40.470 --> 03:43.565
in dem die Inferenz nicht so funktioniert, wie wir

03:43.565 --> 03:47.510
es uns wünschen, und wir wollen role als Tupel festlegen.

03:47.510 --> 03:49.730
Anstatt nun zwei String-Arrays oder Zahlen-Arrays

03:49.730 --> 03:51.660
zu setzen oder denselben Typ zu verwenden, der

03:51.660 --> 03:55.180
vorher nicht drittklassig war, können wir nun einen speziellen Typ verwenden.

03:55.180 --> 03:56.810
Wir verwenden wieder eckige Klammern,

03:56.810 --> 04:01.710
aber jetzt fügen wir innerhalb der eckigen Klammern eine Zahl, dann ein Komma und dann eine

04:01.710 --> 04:03.637
Zeichenkette ein.

04:03.637 --> 04:07.340
Dies markiert hier einen Tupeltyp.

04:07.340 --> 04:10.729
Ein Tupel ist ein spezielles Konstrukt, das TypeScript versteht,

04:10.729 --> 04:13.310
in Java ist es ein normales Array, aber bei der Entwicklung

04:13.310 --> 04:15.750
mit TypeScript werden wir Fehler mit Code wie

04:15.750 --> 04:18.190
diesem hier bekommen.

04:18.190 --> 04:20.313
Was bewirken Tupel nun?

04:21.620 --> 04:23.564
Dies hier sagt TypeScript, dass ich

04:23.564 --> 04:27.195
ein spezielles Array mit genau zwei Elementen haben möchte,

04:27.195 --> 04:30.160
weil ich genau zwei Typen darin habe und das erste Element

04:30.160 --> 04:32.020
eine Zahl sein soll.

04:32.020 --> 04:35.436
Das zweite Element sollte eine Zeichenkette sein.

04:35.436 --> 04:39.033
Wenn wir also diesen Code hier kompilieren, erhalte

04:40.663 --> 04:45.000
ich eine Fehlermeldung, dass 10 hier nicht als Typ zugewiesen werden

04:45.000 --> 04:48.346
kann, weil wir eine Zeichenkette als zweiten Wert

04:48.346 --> 04:50.822
haben wollen, und wenn ich dann 10 als

04:50.822 --> 04:52.660
zweiten Wert zuweise, dann

04:52.660 --> 04:56.544
folge ich offensichtlich nicht dieser Regel.

04:56.544 --> 05:01.544
Wenn Sie dies auskommentieren und wir kompilieren, funktioniert das.

05:02.240 --> 05:06.290
Das ist ein bisschen seltsam, denn warum funktioniert das Verschieben

05:06.290 --> 05:08.610
hier, weil wir alle sagen, dass die Rolle

05:08.610 --> 05:11.901
genau zwei Elemente haben sollte, also warum können wir

05:11.901 --> 05:14.980
hier admin auf das Rollen-Array schieben.

05:14.980 --> 05:19.300
Push ist eigentlich eine Ausnahme, die in Tupeln erlaubt ist.

05:19.300 --> 05:22.410
Leider kann TypeScript diesen Fehler nicht abfangen, aber

05:22.410 --> 05:24.840
es stellt zumindest sicher, dass wir hier keinen

05:24.840 --> 05:28.570
falschen Wert zuweisen, und außerhalb von push erhalten wir auch etwas

05:28.570 --> 05:31.500
Unterstützung bezüglich der Länge.

05:31.500 --> 05:33.671
Wenn wir Person diese Rolle auf einen neuen Wert setzen.

05:33.671 --> 05:36.420
Zum Beispiel ist ein leeres Array nicht erlaubt, ein

05:36.420 --> 05:39.710
Array mit genau der Struktur, die wir dort oben definiert haben,

05:39.710 --> 05:43.510
ist erlaubt, wenn ich hier ein zusätzliches Element hinzufüge.

05:43.510 --> 05:45.880
Dann würden wir wieder einen Fehler erhalten.

05:45.880 --> 05:49.300
Die Länge wird also durchgesetzt, wenn wir sie auf diese Weise zuweisen, aber nicht

05:49.300 --> 05:50.720
für ein Schieben und so weiter.

05:50.720 --> 05:52.840
Wenn Sie ein Szenario haben,

05:52.840 --> 05:55.580
in dem Sie genau X Werte in einem Array

05:55.580 --> 05:57.899
benötigen und den Typ jedes Wertes

05:57.899 --> 06:02.240
im Voraus kennen, dann sollten Sie vielleicht ein Tupel anstelle

06:02.240 --> 06:05.130
eines Arrays in Erwägung ziehen, um noch

06:05.130 --> 06:07.900
mehr Strenge in Ihre Anwendung zu bekommen,

06:07.900 --> 06:11.313
um noch klarer über die Art der Daten zu sein, mit

06:11.313 --> 06:17.543
denen Sie arbeiten und die Art der Daten, die Sie erwarten.
