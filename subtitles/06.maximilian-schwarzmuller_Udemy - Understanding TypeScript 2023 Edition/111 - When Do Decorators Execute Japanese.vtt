WEBVTT

00:02.440 --> 00:04.260
-: さらに例を挙げる前に､

00:04.260 --> 00:07.940
デコレータの実行順序を理解しておきましょう｡

00:07.940 --> 00:15.396
そしてここで重要なのは､ まず第一に､ これらはすべて私たちがこの製品をインスタンス化することなく実行されているということです｡

00:15.396 --> 00:16.600
つまり､ ここに新商品､

00:16.600 --> 00:21.233
本､ 19ドルの商品を作り､ ここにもう一つ､

00:21.233 --> 00:26.660
本2､ 29ドルの商品を作るとします｡

00:26.660 --> 00:31.730
がエラーにならずにコンパイルされました｡

00:31.730 --> 00:35.350
つまり､ 重要なのはこのクラスのインスタンス化ではないのです｡ 

00:35.350 --> 00:36.680
これらのデコレーターは､

00:36.680 --> 00:38.452
プロパティデコレーター､ メソッドデコレーター､

00:38.452 --> 00:48.930
アクセサーデコレーター､ パラメーターデコレーターにかかわらず､ すべてこのクラスを定義したときに実行されるもので､ これを理解することが重要です｡

00:48.930 --> 00:55.100
これらは､ メソッドを呼び出したときやプロパティを操作したときに実行時に実行されるデコレータではありません｡

00:55.100 --> 00:57.190
これは､ 彼らがやっていることではありません｡ 

00:57.190 --> 00:59.360
その代わりに､ これらのデコレータを使用することで､

00:59.360 --> 01:04.397
クラスが定義されたときに舞台裏で追加のセットアップ作業を行うことができます｡

01:04.397 --> 01:08.070
先ほど説明したメタプログラミングの概念に戻りますね｡

01:08.070 --> 01:10.200
それがデコレーターの考え方であり､

01:10.200 --> 01:12.410
コアな使用例です｡

01:12.410 --> 01:18.490
これは､ あるプロパティを操作したときにコードを実行できるようにするために追加するイベントリスナーではありません｡

01:18.490 --> 01:21.069
しかし､ デコレーター自体は､

01:21.069 --> 01:26.756
クラスが定義されたときに実行される関数にすぎず､

01:26.756 --> 01:43.660
この関数が呼ばれたときに実行されるコードを設定するために､ デコレーターを使用することができます｡

01:43.660 --> 01:47.310
プロジェクトや作成中のライブラリのどこかに､ 追加のメタデータを追加したり､

01:47.310 --> 01:51.696
プロパティに関するデータを保存したりすることです｡

01:51.696 --> 01:54.075
これがデコレータの使い方で､

01:54.075 --> 02:02.290
これがデコレータを使った構築の例を紹介するときのすべてのパターンです｡

02:02.290 --> 02:10.530
裏側で追加された機能は､ クラスやメソッドで何かしたときに実行されることもありますが､

02:10.530 --> 02:14.313
まったく別のことをすることもあります｡

02:15.240 --> 02:17.860
これは､ 先ほどのテンプレート・デコレーターを使った人物の例で､

02:17.860 --> 02:21.320
すべて重要なことです｡

02:21.320 --> 02:22.980
これは､ ここで人をインスタンス化するたびに､

02:22.980 --> 02:25.160
このテンプレートを追加するわけではありません｡

02:25.160 --> 02:27.890
このクラスを定義すると､ 必ず追加されます｡ 

02:27.890 --> 02:33.140
この動作を変更するためには､ デコレータ関数の内部に余分なロジックを追加する必要があります｡

02:33.140 --> 02:35.980
そして､ このテンプレートをプロジェクトの他のデータ構造に保存して､

02:35.980 --> 02:43.650
新しい人を作成するたびに､ そのデータ構造にアクセスできるようにします｡

02:43.650 --> 02:47.240
つまり､ 基本的にはクラスを定義するときにこれを設定するだけで､

02:47.240 --> 02:48.400
あとは裏で内部的に保存しておき､

02:48.400 --> 02:52.350
使いたいときに使えるようにするのです｡

02:52.350 --> 02:54.160
現在は､ 新しいインスタンスを作成するときではなく､

02:54.160 --> 02:55.380
このクラスを定義するときに､

02:55.380 --> 02:57.610
常にこれをレンダリングします｡

02:57.610 --> 03:00.403
このようにデコレータは実行されるのですが､

03:00.403 --> 03:01.940
これからいくつかの例を挙げて､

03:01.940 --> 03:04.504
デコレータ全般とその実行時間の利点を活かして､

03:04.504 --> 03:08.883
素敵なことをやってみたいと思います｡
