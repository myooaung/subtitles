WEBVTT

00:02.170 --> 00:04.780
- : Donc, le but est de construire un composant de liste de tâches

00:04.780 --> 00:06.330
et donc ici dans le dossier source, je

00:06.330 --> 00:08.600
vais ajouter un nouveau sous-dossier, composants, et

00:08.600 --> 00:11.280
dans celui-ci un "to-doList. tsx", qui contiendrait

00:11.280 --> 00:13.690
mon composant de liste de choses à faire.

00:13.690 --> 00:15.370
Maintenant, pour construire un composant

00:15.370 --> 00:17.030
react, nous devons importer React

00:17.030 --> 00:20.250
de "react" sinon JXS ne fonctionnera pas dans ce fichier.

00:20.250 --> 00:22.820
Ensuite, je crée ma constante de liste de choses à faire, qui

00:22.820 --> 00:24.530
stocke une fonction flèche et, bien sûr,

00:24.530 --> 00:26.990
il n'est pas nécessaire que ce soit une fonction flèche,

00:26.990 --> 00:30.320
vous pouvez aussi utiliser une fonction avec le mot-clé function.

00:30.320 --> 00:33.160
Maintenant, nous allons exporter ceci.

00:33.160 --> 00:36.500
Maintenant, utilisons nos fonctionnalités supplémentaires de type script, et définissons le

00:36.500 --> 00:39.370
type de ce document comme étant react. fc pour indiquer qu'il ne

00:39.370 --> 00:42.010
doit pas s'agir d'une fonction régulière, mais

00:42.010 --> 00:43.950
d'un composant fonctionnel.

00:43.950 --> 00:46.920
Par conséquent, nous obtenons une erreur parce que nous ne renvoyons

00:46.920 --> 00:49.790
pas quelque chose qui se qualifie comme un élément de réaction.

00:49.790 --> 00:53.250
Donc ici, nous devrions retourner, disons une liste non ordonnée.

00:53.250 --> 00:54.850
Comme je veux rendre une liste ici,

00:54.850 --> 00:58.000
il est logique de renvoyer une liste non ordonnée pour le moment.

00:58.000 --> 01:02.740
Maintenant, sur cette liste non ordonnée, je veux produire des éléments de liste.

01:02.740 --> 01:07.230
Donc, ici, nous pourrions nous attendre à obtenir nos tâches à faire, et c'est

01:07.230 --> 01:09.240
un tableau, et dans un tableau nous

01:09.240 --> 01:11.690
avons un objet où chaque élément a un ID.

01:11.690 --> 01:15.627
Disons que t1 pour la première tâche et un texte

01:15.627 --> 01:18.100
comme "Terminer le cours". Il ne s'agit que d'un seul élément, mais vous pouvez bien

01:18.100 --> 01:18.933
sûr avoir plusieurs

01:18.933 --> 01:20.800
objets de ce type dans ce tableau.

01:20.800 --> 01:22.010
Ici, dans notre liste, nous pouvons alors produire

01:22.010 --> 01:24.620
dynamiquement des tâches à accomplir et les faire correspondre à une liste d'éléments de liste.

01:24.620 --> 01:29.620
Donc, ici, nous parcourons toutes les tâches, c'est une fonction JavaScript

01:30.250 --> 01:32.930
intégrée, bien sûr, la fonction map, et

01:32.930 --> 01:35.070
nous retournons un élément de liste

01:35.070 --> 01:37.740
pour chaque élément de ce tableau et dans

01:37.740 --> 01:41.530
cet élément de liste, je mets "to-do". text" en tant que contenu de l'élément de la liste et ajouter cette

01:41.530 --> 01:45.570
clé spéciale, que React veut en fait

01:45.570 --> 01:47.870
sur les éléments répétés assis les uns

01:47.870 --> 01:49.620
à côté des autres.

01:49.620 --> 01:51.980
Ici, nous devons choisir quelque chose d'unique et l'ID

01:51.980 --> 01:54.130
doit être considéré comme un identifiant unique.

01:54.130 --> 01:57.710
Avec ça, nous rendons une liste de choses à faire.

01:57.710 --> 02:00.470
Intégrons maintenant le composant de liste de tâches dans

02:00.470 --> 02:02.860
le composant d'application et pour cela, nous pouvons

02:02.860 --> 02:05.520
bien sûr aller dans le composant d'application, importer

02:05.520 --> 02:06.930
"TodoList" de ". /components/TodoList"

02:06.930 --> 02:11.530
comme ceci, le ". tsx" sera ajoutée automatiquement par le flux de travail de construction

02:11.530 --> 02:14.350
que nous utilisons ici.

02:14.350 --> 02:17.160
Et puis ici, à l'intérieur de notre div, nous pouvons

02:17.160 --> 02:18.850
rendre "TodoList" comme ça.

02:18.850 --> 02:21.440
Si nous sauvegardons maintenant et que nous revenons

02:21.440 --> 02:24.190
à la page en cours, nous voyons cette tâche ici.

02:24.190 --> 02:25.870
Le style est horrible et nous pourrons

02:25.870 --> 02:29.350
ajouter un meilleur style plus tard, mais pour le moment, cela devrait aller.

02:29.350 --> 02:31.680
Cependant, ceci n'est pas vraiment réaliste.

02:31.680 --> 02:35.620
Lorsque nous construirons cette application de liste de tâches, je voudrais pouvoir

02:35.620 --> 02:37.950
ajouter de nouvelles tâches à l'aide d'un composant

02:37.950 --> 02:40.063
distinct, ce qui n'est pas encore le cas.

02:40.063 --> 02:42.920
Et nous allons probablement gérer les tâches

02:42.920 --> 02:45.570
ici dans ce composant d'application parce

02:45.570 --> 02:48.810
qu'ici, à cet endroit, nous aurons un composant qui

02:48.810 --> 02:53.020
ajoute les tâches et ce composant sera capable de parler en retour

02:53.020 --> 02:55.280
à ce composant d'application.

02:55.280 --> 02:56.690
Ici, nous gérons ensuite notre

02:56.690 --> 02:59.650
tableau de tâches et nous ajoutons des tâches à ce tableau ou nous

02:59.650 --> 03:01.510
supprimons des tâches de ce tableau.

03:01.510 --> 03:04.220
A la liste des choses à faire, nous allons ensuite passer ce tableau.

03:04.220 --> 03:06.930
Ainsi, même si nous ne le gérons pas encore, nous aurions probablement

03:06.930 --> 03:09.270
ce tableau "todos" non pas dans la liste des tâches, mais

03:09.270 --> 03:11.660
dans le composant de l'application.

03:11.660 --> 03:15.010
C'est plus réaliste que ce tableau finisse plus tard ici, donc nous

03:15.010 --> 03:16.740
pouvons déjà le déplacer ici.

03:16.740 --> 03:20.093
Maintenant, nous devons le passer à "TodoList. Pour cela, nous pouvons bien sûr utiliser des accessoires.

03:20.930 --> 03:23.600
Ainsi, sur la liste des tâches, vous pouvez avoir une prop

03:23.600 --> 03:25.640
d'éléments, le nom est bien sûr à notre discrétion

03:25.640 --> 03:28.370
car nous définissons ce composant, nous pouvons définir comment

03:28.370 --> 03:30.350
sa prop doit être nommée.

03:30.350 --> 03:32.100
Nous pouvons introduire notre tableau "todos".

03:32.100 --> 03:35.010
Maintenant, nous voyons déjà que l'IDE n'aime pas cela et si j'essaie de

03:35.010 --> 03:37.820
sauvegarder cela, nous avons également une erreur de compilation.

03:37.820 --> 03:40.650
Nous avons obtenu une erreur de compilation

03:40.650 --> 03:45.400
car la propriété "items" n'existe pas sur le type whatever.

03:45.400 --> 03:47.830
Donc, il n'existe pas fondamentalement sur ce type

03:47.830 --> 03:50.440
d'intersection ici qui définit finalement la structure

03:50.440 --> 03:52.070
des props reçus par "TodoList". En effet, lorsque vous utilisez le script de

03:52.070 --> 03:55.300
type avec React, vous devez être clair sur les types avec lesquels vous travaillez.

03:55.300 --> 03:59.470
Cela ne signifie pas seulement que vous indiquez à Typescript qu'il s'agit d'un

03:59.470 --> 04:02.110
type spécial de fonction, non, cela signifie également

04:02.110 --> 04:05.250
que si vous vous appuyez sur des props dans certains composants,

04:05.250 --> 04:08.360
vous indiquez à Typescript comment ces props doivent se présenter

04:08.360 --> 04:11.020
et comment ils sont structurés.

04:11.020 --> 04:14.860
Donc, dans le composant de la liste des tâches, nous recevons des props

04:14.860 --> 04:17.420
ici, d'accord, c'est du React normal.

04:17.420 --> 04:19.400
Et sur les accessoires, nous avons probablement la propriété de notre objet.

04:19.400 --> 04:23.530
Nous avons donc une prop nommée "items"

04:23.530 --> 04:26.200
et c'est bien ce que j'ai

04:26.200 --> 04:30.323
dit ici : "J'ai cette prop items". Le problème est que, techniquement, cela devrait fonctionner mais le script

04:31.420 --> 04:33.430
n'a pas encore été interrompu.

04:33.430 --> 04:35.067
Nous n'avons pas vraiment dit à Typescript que

04:35.067 --> 04:37.140
notre prop devait avoir une propriété "items" ici.

04:37.140 --> 04:39.503
Pour le dire, nous pouvons utiliser

04:39.503 --> 04:41.950
le fait que ce type de composant de fonction

04:41.950 --> 04:45.063
ici est en fait un type générique.

04:45.063 --> 04:46.913
Un type générique où l'on peut définir tous les props

04:47.840 --> 04:50.510
supplémentaires en plus du prop par défaut des enfants, que chaque composant

04:50.510 --> 04:52.170
possède, et que nous attendons ici.

04:52.170 --> 04:54.250
Nous pouvons donc ajouter des parenthèses

04:54.250 --> 04:58.132
angulaires ici et ajouter notre objet qui décrit la structure de cet objet "props"

04:58.132 --> 05:00.710
que nous obtenons ici ou, pour garder notre code plus

05:00.710 --> 05:03.670
léger, nous le faisons dans une interface supplémentaire

05:03.670 --> 05:06.170
ici et c'est totalement facultatif.

05:06.170 --> 05:09.670
Donc, ici, nous pourrions avoir nos accessoires de liste de choses à faire

05:09.670 --> 05:12.350
et ceci décrit comment nos accessoires ressemblent.

05:12.350 --> 05:15.120
Et ici, je m'attends à obtenir une clé "items",

05:15.120 --> 05:18.260
où nous avons un tableau d'objets où chaque objet

05:18.260 --> 05:20.510
a un ID, qui est une chaîne, et a un

05:20.510 --> 05:23.380
texte, qui est une chaîne.

05:23.380 --> 05:26.120
Ce sont les données que nous gérons ici.

05:26.120 --> 05:30.020
Nous avons un tableau d'objets avec une chaîne d'identification

05:30.020 --> 05:32.850
et une chaîne de texte.

05:32.850 --> 05:34.370
Ce que je m'attends à obtenir ici, c'est "props",

05:34.370 --> 05:36.070
un tableau d'objets de ce type, et si nous sommes

05:36.070 --> 05:38.940
ici, nous pouvons maintenant pointer vers cette interface props de la liste des

05:38.940 --> 05:40.700
tâches et maintenant tout va bien. Maintenant, Typescript comprend

05:40.700 --> 05:42.670
qu'ici, nous aurons des props,

05:42.670 --> 05:45.040
où nous aurons un prop d'articles et

05:45.040 --> 05:48.640
que ce prop d'articles sera un tableau où nous avons une

05:48.640 --> 05:52.145
clé ID et une clé texte sur chaque

05:52.145 --> 05:55.000
élément du tableau.

05:55.000 --> 05:56.920
Donc maintenant, si nous sauvegardons ceci, il compile,

05:56.920 --> 05:58.870
et nous obtenons la sortie de travail à nouveau.

05:58.870 --> 05:59.850
Donc, encore une fois, c'est le typecript qui est utilisé avec React.

05:59.850 --> 06:02.390
Nous ne l'utilisons pas seulement pour indiquer à React ou à Typescript

06:02.390 --> 06:04.188
qu'il s'agit d'un composant fonctionnel, mais

06:04.188 --> 06:06.830
aussi pour indiquer les accessoires que ce composant peut recevoir,

06:06.830 --> 06:10.000
ce qui nous aide beaucoup à assurer la sécurité des types.

06:10.000 --> 06:13.490
Il évite qu'ici je pense accidentellement qu'il

06:13.490 --> 06:15.130
s'appelle "todos". Non, ceci n'est pas supporté, nous obtenons une erreur.

06:15.130 --> 06:19.060
Il s'agit d'articles.

06:19.060 --> 06:21.165
Vous les verrez tous s'auto compléter ici.

06:21.165 --> 06:23.330
Le codage devient donc beaucoup plus facile lorsqu'on

06:23.330 --> 06:24.910
travaille avec le typage ici. Et c'est bien sûr là tout l'avantage de Typescript : il simplifie

06:24.910 --> 06:27.160
le codage, il évite les erreurs inutiles et, comme vous pouvez le voir, il le fait

06:27.160 --> 06:28.400
aussi dans une application react.

06:28.400 --> 06:30.670
Bien sûr, nous n'avons pas fini.

06:30.670 --> 06:34.420
Pour l'instant, nos tâches ne changent jamais

06:34.420 --> 06:36.640
et je veux changer

06:36.640 --> 06:39.930
cela, je veux avoir un composant qui nous

06:39.930 --> 06:44.120
permette d'ajouter de nouvelles tâches.

06:44.120 --> 06:46.080
Alors travaillons sur ça ensuite.
