WEBVTT

00:02.160 --> 00:06.060
Eğitmen: Peki, doğrulama konusunda ne yapabiliriz?

00:06.060 --> 00:10.450
Belki de arzu edilen nihai sonuçtan başlayalım.

00:10.450 --> 00:14.850
Benim fikrim, daha sonra henüz var olmayan bir validate fonksiyonuna

00:14.850 --> 00:17.950
sahip olmamız, ancak daha sonra enteredTitle'ı

00:17.950 --> 00:21.230
veya aslında değerin enteredTitle olduğu bir

00:21.230 --> 00:25.360
yapılandırma nesnesini, yani doğrulanacak şeyi ilettiğim

00:25.360 --> 00:30.300
bir validate fonksiyonuna sahip olmamızdır.

00:30.300 --> 00:33.260
Ancak burada validate fonksiyonuna

00:33.260 --> 00:37.350
nasıl doğrulama yapacağını söyleyen ek özelliklerim

00:37.350 --> 00:39.130
de var.

00:39.130 --> 00:43.210
Örneğin, burada required değerini true olarak ayarladık,

00:43.210 --> 00:47.009
minLength değerini beş karaktere zorlamak için beş olarak

00:47.009 --> 00:48.360
ayarladık vb.

00:48.360 --> 00:50.040
Bunu burada her üç girdi için

00:50.040 --> 00:51.540
de yaparız ve validate

00:51.540 --> 00:53.900
geçerli ise true, geçerli değilse

00:53.900 --> 00:56.620
false döndüren bir fonksiyondur ve sonuçta

00:56.620 --> 00:59.580
şöyle bir şey elde edebiliriz.

00:59.580 --> 01:04.580
Ya da enteredDescription ve enteredPeople, kabaca

01:04.790 --> 01:06.790
fikir bu olurdu.

01:06.790 --> 01:09.210
Elbette bu, bunu uygulamanın sadece bir yolu,

01:09.210 --> 01:11.703
ancak benim oldukça hoşuma giden bir yol.

01:12.600 --> 01:15.320
Bunun için dosyanın en üstüne

01:15.320 --> 01:19.470
bazı doğrulama mantıkları ekleyeceğim.

01:19.470 --> 01:22.380
Ve yine, bunu yapmanın birçok yolu vardır.

01:22.380 --> 01:24.390
Öncelikle böyle bir doğrulanabilir

01:24.390 --> 01:27.840
nesnenin yapısını tanımlayarak başlayacağım.

01:27.840 --> 01:31.280
Dolayısıyla bu nesneyi validate fonksiyonuna

01:31.280 --> 01:33.430
aktarırız, çünkü elbette bunun

01:33.430 --> 01:37.820
her zaman belirli miktarda özellik ve belirli türde özellikler

01:37.820 --> 01:40.100
içeren benzer bir yapıya sahip olması

01:40.100 --> 01:42.410
gerekir, böylece validate fonksiyonu

01:42.410 --> 01:44.950
aslında ne ile çalıştığını bilir ve

01:44.950 --> 01:49.870
özellikleri doğru bir şekilde çıkarabilir.

01:49.870 --> 01:52.850
Bu yüzden, bir arayüz tanımlayarak başlayacağım.

01:52.850 --> 01:55.380
Özel bir tip de seçebiliriz, tamamen

01:55.380 --> 01:56.550
size kalmış.

01:56.550 --> 01:58.690
Bir nesnenin yapısını tanımlayacağım

01:58.690 --> 02:02.793
için, her zaman sadece bir arayüz tanımlamanın daha büyük bir hayranıyım.

02:03.810 --> 02:06.700
Burada Validatable olarak adlandıracağım,

02:06.700 --> 02:09.940
çünkü validatable bir nesneyi tanımlar ve

02:09.940 --> 02:13.300
bir dize veya aynı zamanda bir sayı olması gereken

02:13.300 --> 02:17.140
bir değere sahip olacaktır.

02:17.140 --> 02:18.980
Boolean değerine sahip, yani doğru

02:18.980 --> 02:21.240
veya yanlış olan gerekli bir prop'a sahip

02:21.240 --> 02:22.630
olacaktır.

02:22.630 --> 02:26.470
Ve sonra diyelim ki bir sayı olması gereken minLength doğrulamasını,

02:26.470 --> 02:28.212
bir sayı olması gereken maxLength

02:28.212 --> 02:30.220
doğrulamasını ve ayrıca bir sayı

02:30.220 --> 02:32.510
almamız durumunda bir min ve bir max değerini

02:32.510 --> 02:35.240
destekliyoruz.

02:35.240 --> 02:37.417
minLength ve maxLength'ten farkı, bunun dizenin

02:37.417 --> 02:40.310
uzunluğunu kontrol etmesi, bunun ise belirli bir sayının

02:40.310 --> 02:42.320
üzerinde veya belirli bir maksimumun altında

02:42.320 --> 02:43.960
olması durumunda sayının değerini

02:43.960 --> 02:46.010
kontrol etmesidir.

02:46.010 --> 02:48.870
Desteklemek istediğim mülkler bunlar.

02:48.870 --> 02:50.470
Şimdi, değerin yanı sıra,

02:50.470 --> 02:52.140
hepsi isteğe bağlı olmalıdır,

02:52.140 --> 02:54.410
ancak adlardan sonra bir soru işareti

02:54.410 --> 02:57.650
ekleyerek bunu zorlayabiliriz.

02:57.650 --> 03:00.070
Bu arada, soru işareti kullanmanın alternatifi

03:00.070 --> 03:02.720
tanımlanmamış değerlere izin vermektir.

03:02.720 --> 03:04.880
Soru işareti de temelde aynı şeyi yapar.

03:04.880 --> 03:09.370
Gerekli öğesinin Boolean ya da tanımsız olduğunu söylüyor.

03:09.370 --> 03:12.610
Artık doğrulanabilir bir arayüzümüz var.

03:12.610 --> 03:13.893
Bununla ne yapabiliriz?

03:14.930 --> 03:17.893
Şimdi bu arayüz oluşturulduktan

03:18.830 --> 03:21.330
sonra, aradığım doğrulama

03:21.330 --> 03:24.220
işlevini oluşturabiliriz.

03:24.220 --> 03:27.410
Bu, böyle doğrulanabilir bir nesne almalıdır.

03:27.410 --> 03:32.410
Yani ValidatableInput Validatable türündedir.

03:32.410 --> 03:33.450
Benim fikrim de bu.

03:33.450 --> 03:36.400
Böylece bu yapıya sahip bir nesne elde eder.

03:36.400 --> 03:38.270
Ve şimdi orada, tüm bu özelliklerin

03:38.270 --> 03:41.670
var olup olmadığını kontrol edebilir ve ardından

03:41.670 --> 03:44.810
uygun doğrulamayı yapabiliriz.

03:44.810 --> 03:46.150
Şimdi validate fonksiyonunda

03:46.150 --> 03:48.200
tam olarak ne yapıyoruz?

03:48.200 --> 03:49.033
Sonunda, başlangıçta

03:49.033 --> 03:50.930
doğru olan isValid adında bir değişken oluşturmak

03:50.930 --> 03:52.330
istiyorum.

03:52.330 --> 03:54.030
Yani varsayılan varsayım, elde ettiğimiz

03:54.030 --> 03:55.510
şeyin doğru olduğudur.

03:55.510 --> 03:57.430
Ancak kontrollerimizden en az

03:57.430 --> 04:01.330
biri başarısız olur olmaz bunu yanlış olarak ayarlayacağız.

04:01.330 --> 04:03.480
Ve şimdi ilk çekle başlayalım.

04:03.480 --> 04:06.410
Bakalım buradaki validatableInput,

04:06.410 --> 04:08.220
yani aldığımız bu argümanın

04:08.220 --> 04:11.380
gerekli bir prop'u var mı?

04:11.380 --> 04:13.260
Eğer bu tanımsız değilse.

04:13.260 --> 04:16.490
Bu ayarlanmışsa ve bu nedenle doğruysa, bu, değerin

04:16.490 --> 04:18.630
gerekli olduğu ve boş olmaması gerektiği

04:18.630 --> 04:20.630
anlamına gelir.

04:20.630 --> 04:22.080
Şimdi burada, isValid

04:22.080 --> 04:26.160
öğesini isValid öğesine eşit olarak ayarlayabiliriz ve JavaScript'in

04:26.160 --> 04:27.700
çalışma şekli, and öğesinden

04:27.700 --> 04:30.550
sonraki öğe false ise isValid öğesinin yeni

04:30.550 --> 04:34.330
değerinin false olmasını sağlar.

04:34.330 --> 04:36.870
Çünkü iki şeyden en az biri yanlışsa, toplam

04:36.870 --> 04:38.660
değer de yanlış olacaktır.

04:38.660 --> 04:40.500
Şimdi isValid başlangıçta doğrudur,

04:40.500 --> 04:44.070
ancak mantıksal ve işlecinden sonraki şey yanlışsa, isValid

04:44.070 --> 04:46.300
yanlış olacaktır.

04:46.300 --> 04:48.700
Ve sonunda isValid değerini döndüreceğim.

04:48.700 --> 04:50.040
Peki şimdi iki ampersand

04:50.040 --> 04:53.550
sembolünden sonra ne ekleyeceğiz?

04:53.550 --> 04:57.290
ValidatableInput olup olmadığını kontrol etmek istiyorum. değeri, eğer bu

04:57.290 --> 04:58.170
boşsa.

04:58.170 --> 05:00.530
Bunun için kırpıp uzunluğunu

05:00.530 --> 05:04.210
kontrol edebiliriz, değil mi?

05:04.210 --> 05:05.630
Sorun şu ki, value'nun bir string

05:05.630 --> 05:07.510
olup olmadığını bilmiyoruz.

05:07.510 --> 05:09.090
Bu bir dize veya sayıdır.

05:09.090 --> 05:10.910
Yani bir dize olması garanti değildir

05:10.910 --> 05:12.140
ve bu nedenle trim yöntemi

05:12.140 --> 05:14.100
her zaman kullanılamaz.

05:14.100 --> 05:17.570
Şimdi bunun etrafında çalışmanın çeşitli yolları var.

05:17.570 --> 05:19.600
Bir tür koruması ekleyebilir, typeof validatableInput

05:19.600 --> 05:23.390
olup olmadığını kontrol edebiliriz. değerinin dizeye eşit olup olmadığını

05:25.250 --> 05:30.250
kontrol eder ve yalnızca eşitse bu kontrolü gerçekleştirir.

05:30.920 --> 05:33.040
Ama aslında bu biraz gereksiz olurdu.

05:33.040 --> 05:36.120
Burada yapabileceğimiz şey çok basit.

05:36.120 --> 05:37.257
Basitçe şöyle diyebiliriz:

05:37.257 --> 05:39.140
"Peki, bunu bir dizeye dönüştür. Eğer bir sayıysa, şimdi yine bir dizedir.

05:39.140 --> 05:41.370
Eğer bir dize olsaydı, hiçbir şey değişmezdi.

05:41.370 --> 05:44.170
Ve bununla birlikte, bunu yapıyoruz.

05:44.170 --> 05:45.900
Şimdi bunun sıfır olup olmadığını kontrol

05:45.900 --> 05:47.950
etmek için buraya kontrolümü eklemem gerekiyor.

05:47.950 --> 05:50.360
Daha doğrusu, eğer sıfır değilse.

05:50.360 --> 05:53.463
Yani sıfır değilse, bu true değerini

05:54.680 --> 05:56.810
döndürür ve isValid değeri

05:56.810 --> 05:58.740
true olarak kalır.

05:58.740 --> 06:00.500
Sıfırsa, yani uzunluğu sıfırsa,

06:00.500 --> 06:02.760
boşsa, bu false değerini döndürür ve dolayısıyla

06:02.760 --> 06:04.940
isValid değeri false olur.

06:04.940 --> 06:06.890
Ve bunu yalnızca gerekli kontrolü

06:06.890 --> 06:08.280
true olarak ayarlandığında

06:08.280 --> 06:11.190
işaretlenirse kontrol ediyoruz.

06:11.190 --> 06:13.530
Burada yapmak istediğim ilk kontrol bu.

06:13.530 --> 06:15.560
Elbette tek değil.

06:15.560 --> 06:17.660
Devam edebilir ve validatableInput olup olmadığını

06:17.660 --> 06:18.950
kontrol edebiliriz. minLength ayarlanırsa,

06:18.950 --> 06:23.880
elde ettiğimiz bu dizenin belirli bir

06:23.880 --> 06:25.190
minimum uzunluğa sahip

06:25.190 --> 06:27.050
olması gerekir.

06:27.050 --> 06:28.780
Önemli olan, dizenin belirli bir minimum

06:28.780 --> 06:30.440
uzunluğa sahip olmasıdır.

06:30.440 --> 06:31.620
Burada sayılarla ilgilenmiyoruz,

06:31.620 --> 06:33.600
bir sayının minimum değerini kontrol etmiyoruz.

06:33.600 --> 06:37.060
Yani burada aslında bir tip koruması ekleyebiliriz, bunu bu kontrole

06:37.060 --> 06:40.390
dahil edebiliriz ve typeof validatableInput olup olmadığını

06:40.390 --> 06:42.320
kontrol edebiliriz. değeri dizeye

06:42.320 --> 06:46.910
eşittir.

06:46.910 --> 06:48.460
Eğer değilse, bu if kontrolüne girmemize gerek

06:48.460 --> 06:50.357
yoktur çünkü o zaman kontrol edilecek bir şey yoktur.

06:50.357 --> 06:52.570
Eğer değerimiz bir sayı ise, bunu önemsemeyiz.

06:52.570 --> 06:55.330
Bir sayı için minimum uzunluk belirlersek,

06:55.330 --> 06:57.710
temelde bu kontrolü atlarız çünkü pek

06:57.710 --> 06:59.330
bir anlam ifade etmez.

06:59.330 --> 07:01.890
Yine de bir dizemiz varsa ve minLength

07:01.890 --> 07:03.420
ayarlanmışsa, isValid'i

07:03.420 --> 07:05.663
isValid'e eşitlemek istiyorum

07:06.570 --> 07:10.053
ve sonra tekrar kontrolümüz.

07:11.181 --> 07:12.600
Ve buradaki kontrol

07:12.600 --> 07:16.580
validatableInput olup olmadığıdır. değerinin, ki bu noktada bir dize olduğunu biliyoruz,

07:16.580 --> 07:20.810
uzunluğu validatableInput

07:20.810 --> 07:24.070
değerinden büyüktür. minUzunluk.

07:24.070 --> 07:28.520
Yani burada tanımlanan değerden daha büyüktür.

07:28.520 --> 07:31.660
Şimdi burada potansiyel bir sorunumuz var ve bunun hangisi

07:31.660 --> 07:33.920
olabileceğini görüyor musunuz?

07:33.920 --> 07:36.163
Bu genellikle çalışmalıdır, ancak minLength sıfır

07:37.030 --> 07:38.630
olarak ayarlanırsa başarısız olur.

07:38.630 --> 07:42.210
Geliştiricinin bunu sıfır olarak ayarlamasının amacı

07:42.210 --> 07:45.760
muhtemelen bu kontrolü atlamak değil, minimum sıfır

07:45.760 --> 07:48.760
uzunluğuna sahip olup olmadığımızı kontrol

07:48.760 --> 07:50.170
etmektir.

07:50.170 --> 07:51.960
Muhtemelen gereksiz bir kontroldür, çünkü

07:51.960 --> 07:53.800
temelde herhangi bir şeye sahip olup olmadığımızı

07:53.800 --> 07:55.850
kontrol ediyor, ki bunu zaten gerekli kontrolle

07:55.850 --> 07:57.260
yapıyoruz.

07:57.260 --> 07:59.300
Yani çok büyük bir sorun değil.

07:59.300 --> 08:01.330
Yine de, burada süper güvenli olmak istiyorsanız,

08:01.330 --> 08:05.470
aslında validatableInput olup olmadığını kontrol etmeliyiz.

08:05.470 --> 08:05.470
minLength değeri undefined değerine eşit değildir.

08:05.470 --> 08:10.470
Veya null'a eşit değildir, bir

08:10.640 --> 08:14.910
eşittir işaretiyle, bu null ve undefined'ı içerir, JavaScript

08:14.910 --> 08:17.130
böyle çalışır.

08:17.130 --> 08:18.890
Bu biraz daha güvenli, çünkü artık

08:18.890 --> 08:20.470
minLength değeri sıfır olarak

08:20.470 --> 08:23.010
ayarlanmış olsa bile bu kontrolü her zaman yaptığımızdan

08:23.010 --> 08:25.140
emin oluyoruz.

08:25.140 --> 08:27.222
Yine, bunun mantıklı olup olmadığını tartışabilirsiniz,

08:27.222 --> 08:29.740
çünkü temelde oradakiyle aynı kontrol, ama yine de, burada

08:29.740 --> 08:32.270
gerçekleştirmek istiyorum.

08:32.270 --> 08:34.930
Yani bu minUzunluk.

08:34.930 --> 08:36.790
Şimdi bunu kopyalayacağım ve temelde maxLength

08:36.790 --> 08:38.130
için de aynısını yapacağım.

08:38.130 --> 08:40.720
Dolayısıyla buradaki maxLength de kontrol

08:40.720 --> 08:44.350
edilir, ayrıca burada ve yalnızca dizeler için.

08:44.350 --> 08:46.870
Ve tabii ki burada bunu geri çevirmemiz gerekiyor.

08:46.870 --> 08:49.280
Sağlanan değerin uzunluğunun maksimum uzunluğumuzun

08:49.280 --> 08:52.380
altında olduğundan emin olmak istiyoruz.

08:52.380 --> 08:55.173
Peki, şimdi sadece bir sayı için anlamlı olan minimum

08:56.810 --> 08:58.760
ve maksimum değer için iki kontrolümüz

08:58.760 --> 09:00.160
daha kaldı.

09:00.160 --> 09:03.310
Bu yüzden burada başka bir kontrol ekleyeceğim

09:03.310 --> 09:05.150
ve validatableInput. min değeri null değerine

09:05.150 --> 09:08.280
eşit değildir.

09:09.720 --> 09:11.100
Tekrar ediyorum, sadece doğruluğu kontrol

09:11.100 --> 09:13.820
etmiyorum, çünkü bu sıfır değerinde sorunlara yol açacaktır.

09:13.820 --> 09:17.050
Ve sonra validatableInput türünün olup olmadığını kontrol edeceğim. değeri sayıya

09:17.050 --> 09:21.770
eşittir.

09:21.770 --> 09:23.250
Çünkü bunu bir dize için kontrol

09:23.250 --> 09:25.640
etmenin pek mantıklı olmadığını görüyorum.

09:25.640 --> 09:26.760
Bir dize için kontrol etmek istiyorsanız,

09:26.760 --> 09:28.020
elbette bunu atlayabilirsiniz.

09:28.020 --> 09:29.680
Daha sonra, yazacağımız çekte

09:29.680 --> 09:32.120
kullanırken değeri bir sayıya dönüştürdüğünüzden

09:32.120 --> 09:34.380
emin olmanız gerekir.

09:34.380 --> 09:35.970
Yazmak üzere olduğumuz kontrol,

09:35.970 --> 09:37.220
yine isValid'in eski değerini

09:37.220 --> 09:39.740
kullanır ve bunu yeni bir kontrolle birleştirerek

09:39.740 --> 09:41.500
tekrar isValid'de depolar.

09:41.500 --> 09:44.000
Ve yeni kontrol şimdi sayımızı iyi bir şekilde

09:44.000 --> 09:47.210
içermeli ve minimum değerden büyük olup olmadığını kontrol

09:47.210 --> 09:48.730
etmelidir.

09:48.730 --> 09:50.720
Yani burada validatableInput olup olmadığını kontrol ediyorum. değeri validatableInput

09:50.720 --> 09:54.650
değerinden büyüktür. min.

09:54.650 --> 09:58.690
Ve şimdi bunu max için tekrarlayabiliriz,

09:58.690 --> 10:02.010
bu yüzden burada max'e ihtiyacımız var ve burada da max'e ihtiyacımız

10:02.010 --> 10:06.190
var ve bunu burada daha küçük bir sembolle değiştirmemiz gerekiyor.

10:06.190 --> 10:10.363
Bununla birlikte, burada sahip olabileceğiniz tüm farklı senaryoları

10:11.920 --> 10:13.230
kontrol ediyoruz.

10:13.230 --> 10:16.930
Ve isValid döndürüyoruz.

10:16.930 --> 10:18.710
Şimdi tek yapmamız gereken bu arayüze

10:19.840 --> 10:21.600
uyan nesneler yaratmak ve bunları

10:21.600 --> 10:23.630
validate fonksiyonuna göndermek.

10:23.630 --> 10:26.573
Bunun için proje girdisine gidelim ve orada

10:28.160 --> 10:31.360
gatherUserInput içinde doğrulanabilir nesnemi

10:31.360 --> 10:34.000
oluşturmak istiyorum.

10:34.000 --> 10:36.360
Ek not, bir arayüzün yanı sıra, elbette burada bir

10:36.360 --> 10:38.420
sınıf da oluşturabilirdik, sonra onu new

10:38.420 --> 10:40.870
anahtar sözcüğü ile örneklendirebilirdik, ancak

10:40.870 --> 10:43.570
tüm bunlar pratik ve demo amaçlı burada bunun bir arayüzle

10:43.570 --> 10:46.070
nasıl çalıştığını göstermek istiyorum.

10:46.070 --> 10:48.990
Burada, Validatable türünde olması gereken

10:48.990 --> 10:51.900
titleValidatable'ımız var.

10:52.850 --> 10:54.970
Bu da elbette bir değer özelliğine sahip

10:54.970 --> 10:56.830
olması gereken bir nesnedir.

10:56.830 --> 10:58.930
Ve bu da girilen Başlığımız.

10:58.930 --> 11:01.020
Başka bir özelliğe ihtiyacı yok ama boş

11:01.020 --> 11:03.550
olup olmadığını kontrol etmek istiyorum, bu

11:03.550 --> 11:06.750
yüzden required değerini true olarak ayarlayacağız.

11:06.750 --> 11:08.743
Sonra bunu kopyalayıp açıklama

11:09.710 --> 11:12.430
ve insanlar için tekrarlayabiliriz.

11:12.430 --> 11:16.270
Ve burada bir açıklama var, yani

11:16.270 --> 11:19.250
girilen açıklama.

11:19.250 --> 11:21.880
Burada girmiş olan insanlar var.

11:21.880 --> 11:24.260
Burada kesin olmak gerekirse, bir sayıya sahip olmak istiyorum.

11:24.260 --> 11:26.230
Bu yüzden bunu artı sembolü ile bir sayıya dönüştürüyorum.

11:26.230 --> 11:29.020
Hepsi gerekli olmalıdır, ancak burada da

11:29.020 --> 11:30.810
diyelim ki açıklama beş karakterlik

11:30.810 --> 11:32.890
bir minLength'e sahip olmalı ve

11:32.890 --> 11:35.420
kişiler için minimum bir olmalıdır,

11:35.420 --> 11:38.823
böylece en az iki kişi atanmış olur.

11:39.820 --> 11:42.030
Bu arada, bunu nasıl uygulayacağınız size kalmış.

11:42.030 --> 11:44.020
Elbette, doğrulama mantığınızda,

11:44.020 --> 11:47.200
isterseniz daha büyük eşit daha küçük eşit olup olmadığını

11:47.200 --> 11:50.080
da kontrol edebilirsiniz.

11:50.080 --> 11:52.030
Kurs uzunluğu için de aynı şey geçerli.

11:52.030 --> 11:54.200
Büyük eşit, küçük eşit.

11:54.200 --> 11:56.940
Bu da mümkün.

11:56.940 --> 11:58.660
Aslında, bu değişiklikleri koruyacağım.

11:58.660 --> 12:00.520
Yani şu anda en az bir, en fazla beş kişi

12:00.520 --> 12:01.920
görevlendirilmiş durumda.

12:01.920 --> 12:05.253
Şimdi bu üç validatable nesnemiz var ve şimdi

12:06.100 --> 12:08.500
burada, validate fonksiyonuna

12:08.500 --> 12:11.680
titleValidatable'ı, ikinci fonksiyon

12:11.680 --> 12:14.920
çağrısına descriptionValidatable'ı ve

12:14.920 --> 12:16.440
üçüncü fonksiyon çağrısına

12:16.440 --> 12:21.310
da peopleValidatable'ı geçiriyoruz.

12:21.310 --> 12:24.460
Ve şimdi validate, hepsi geçerliyse true, aksi takdirde

12:24.460 --> 12:26.380
false döndürmelidir.

12:26.380 --> 12:29.480
Şimdi bunların hepsinin yanlış olup olmadığını kontrol ederek

12:29.480 --> 12:32.420
en az birinin başarısız olup olmadığını kontrol etmek istiyorum,

12:32.420 --> 12:36.580
önüne bir ünlem işareti ekleyerek bunun yanlış olup olmadığını veya bunun yanlış

12:36.580 --> 12:38.970
olup olmadığını veya bunun yanlış olup olmadığını

12:38.970 --> 12:41.560
kontrol etmek istiyorum.

12:41.560 --> 12:42.740
Ve bunlardan en az biri yanlışsa,

12:42.740 --> 12:44.750
yani doğrulama işlevi çağrılarından en az biri

12:44.750 --> 12:45.730
yanlış dönerse, bunu orada

12:45.730 --> 12:47.760
yapacağız ve uyarıyı göstereceğiz.

12:47.760 --> 12:49.860
Bunu da test etmek için

12:51.930 --> 12:54.860
index'e gideceğim.

12:54.860 --> 12:54.860
html,

12:54.860 --> 12:56.270
çünkü orada insanlar

12:56.270 --> 12:58.210
için girişte, aslında en fazla 10 ve en

12:58.210 --> 13:00.410
az sıfıra izin veriyorum.

13:00.410 --> 13:01.460
Yani girişte teknik olarak geçersiz değerler girebiliriz.

13:01.460 --> 13:05.120
Elbette mantığımızı test edebilmemiz için

13:05.120 --> 13:06.240
bilerek.

13:06.240 --> 13:08.090
Ve şimdilik hepsini kaydedelim,

13:08.090 --> 13:10.200
hatasız derleniyor.

13:10.200 --> 13:11.750
Şimdi bir deneyelim.

13:11.750 --> 13:13.083
Proje ekle'ye tıkladığımda

13:13.920 --> 13:16.000
bir hata alıyorum ki bu iyi bir şey.

13:16.000 --> 13:17.430
Şimdi buraya test girelim, hala hata alıyoruz.

13:17.430 --> 13:21.370
Buraya test ve buraya beş girelim,

13:21.370 --> 13:24.180
yine de hata alıyorum.

13:24.180 --> 13:25.390
Çünkü tarifim çok kısa.

13:25.390 --> 13:26.870
Bir karakter daha girersem minimum

13:26.870 --> 13:28.160
uzunluğa sahip olurum ve bunu

13:28.160 --> 13:29.500
oluşturabilirim.

13:29.500 --> 13:31.210
Şimdi diyelim ki eksi bir kişiye

13:31.210 --> 13:32.640
girelim ve tamam html

13:32.640 --> 13:34.580
bunu desteklemiyor.

13:34.580 --> 13:37.940
Ancak sıfır ya da altı girdiğimizde hata

13:37.940 --> 13:39.200
alıyoruz.

13:39.200 --> 13:42.040
Ve sadece bir ile beş arasında bir şey

13:42.040 --> 13:43.840
girersem çalışıyor.

13:43.840 --> 13:46.100
Yani olması gerektiği gibi çalışıyor

13:46.100 --> 13:49.260
gibi görünüyor ve bu oldukça iyi.

13:49.260 --> 13:50.240
Ve bu elbette doğrulamayı

13:50.240 --> 13:51.850
uygulamanın sadece bir yoludur.

13:51.850 --> 13:53.570
Ancak şu anda oldukça yeniden kullanılabilir

13:53.570 --> 13:56.510
olan bir yol, uygulamanın farklı bölümlerinde de bu şekilde

13:56.510 --> 13:59.170
kullanılabilir ve elbette typescript'ten yararlanır

13:59.170 --> 14:01.660
ve gereksiz hataları önlemek için bize harika bir

14:01.660 --> 14:04.480
destek ve tip kontrolü sunar.
