WEBVTT

00:02.060 --> 00:04.710
Jadi, setelah properti statis selesai, mari

00:04.710 --> 00:07.000
kita kembali ke pewarisan dan konsep

00:07.000 --> 00:08.743
yang terkait dengan itu.

00:08.743 --> 00:11.740
Cara lain untuk menambahkan metode ke kelas-kelas,

00:11.740 --> 00:14.280
yang Anda rencanakan untuk diwariskan.

00:14.280 --> 00:16.660
Inilah kelas Departemen kita dan seperti yang

00:16.660 --> 00:19.200
Anda ketahui, kita mewarisinya pada Departemen

00:19.200 --> 00:21.360
IT dan Departemen Akuntansi.

00:21.360 --> 00:23.470
Sekarang, kita memiliki metode deskripsi

00:23.470 --> 00:26.160
di sini di kelas Departemen kita, dan oleh karena itu

00:26.160 --> 00:28.850
kita dapat memanggil ini pada instance apa pun, berdasarkan

00:28.850 --> 00:31.850
Departemen TI dan Departemen Akuntansi karena kelas-kelas

00:31.850 --> 00:34.560
ini didasarkan pada Departemen, dan mereka memiliki

00:34.560 --> 00:36.560
akses ke semua properti dan metode kelas

00:36.560 --> 00:39.523
dasar Departemen itu.

00:40.380 --> 00:43.850
Sekarang, seperti yang telah Anda pelajari, Anda bisa menimpa metode.

00:43.850 --> 00:46.550
Jadi misalnya, di sini, di Departemen Akuntansi,

00:46.550 --> 00:50.030
kita bisa menambahkan versi metode deskripsi kita sendiri,

00:50.030 --> 00:51.900
di mana saya ingin melakukan sesuatu

00:51.900 --> 00:56.880
yang berbeda, di mana mungkin ketika saya mengatakan ID Departemen Akuntansi,

00:56.880 --> 01:00.443
dan kemudian mengakses ID Distort.

01:02.040 --> 01:03.140
Sekarang, ini tidak akan

01:03.140 --> 01:06.960
bekerja di sini, karena ID adalah properti privat Departemen dan oleh karena

01:06.960 --> 01:10.400
itu, kita perlu mengubahnya menjadi properti yang dilindungi sehingga

01:10.400 --> 01:12.590
tersedia di kelas-kelas yang didasarkan

01:12.590 --> 01:14.750
pada kelas ini juga.

01:14.750 --> 01:16.210
Tetapi dengan itu, seharusnya bisa berfungsi.

01:16.210 --> 01:19.080
Dan jika sekarang saya memanggil describe on accounting,

01:19.080 --> 01:20.540
yang bisa kita lakukan, tentu

01:20.540 --> 01:23.650
saja, mari kita komentari dua baris ini, dan sebagai gantinya,

01:23.650 --> 01:27.460
panggil accounting. jelaskan di bawah sana, kita

01:27.460 --> 01:29.300
akan melihat output baru itu,

01:29.300 --> 01:33.340
dan memang, kita melihat Accounting Department ID, d2.

01:33.340 --> 01:36.570
Sekarang, tentu saja, kita juga bisa mengesampingkan

01:36.570 --> 01:38.900
metode deskripsi di Departemen TI.

01:38.900 --> 01:43.240
Tetapi terkadang Anda tidak hanya ingin menawarkan opsi untuk

01:43.240 --> 01:46.440
menimpa metode karena itu selalu ada.

01:46.440 --> 01:50.430
Anda malah ingin memaksa pengembang yang bekerja dengan kelas tertentu

01:50.430 --> 01:53.390
atau memperluas kelas tertentu untuk mengimplementasikan

01:53.390 --> 01:54.820
metode tertentu atau untuk

01:54.820 --> 01:56.840
menimpa metode tertentu.

01:56.840 --> 01:58.360
Kapan Anda akan melakukan itu?

01:58.360 --> 02:01.690
Nah, setiap kali Anda ingin memastikan bahwa metode tertentu

02:01.690 --> 02:05.670
tersedia di semua kelas berdasarkan beberapa kelas dasar dalam hal

02:05.670 --> 02:07.320
ini Departemen.

02:07.320 --> 02:10.550
Tetapi ketika pada saat yang sama juga tahu bahwa implementasi

02:10.550 --> 02:14.220
yang tepat akan tergantung pada versi spesifik, jadi ketika Anda

02:14.220 --> 02:17.340
dapat menyediakan metode umum, tetapi Anda ingin menegakkan

02:17.340 --> 02:20.240
bahwa metode ini ada, tetapi kelas yang mewarisi perlu

02:20.240 --> 02:22.410
menyediakan implementasinya sendiri

02:22.410 --> 02:24.270
karena Anda tidak dapat menyediakan

02:24.270 --> 02:28.520
implementasi default di kelas dasar.

02:28.520 --> 02:30.150
Jadi dalam situasi seperti

02:30.150 --> 02:34.600
itu, Anda mungkin ingin memiliki metode kosong di kelas dasar Anda dan sekarang

02:34.600 --> 02:38.460
memaksa semua kelas berdasarkan kelas itu untuk menambahkan dan

02:38.460 --> 02:40.810
menimpa metode ini dan Anda dapat melakukannya

02:40.810 --> 02:44.880
dengan menambahkan kata kunci abstrak di sini.

02:44.880 --> 02:46.630
Jika Anda menambahkan abstract

02:46.630 --> 02:49.840
di sini, Anda lihat kita mendapatkan error bahwa ini hanya

02:49.840 --> 02:51.440
tersedia di kelas abstrak.

02:51.440 --> 02:54.220
Jadi jika Anda memiliki satu metode atau lebih dengan abstrak

02:54.220 --> 02:57.390
di depan metode, Anda harus menambahkan abstrak di sini di depan kelas

02:57.390 --> 03:00.400
juga dan sekarang, kita baik-baik saja mengenai hal itu, tetapi

03:00.400 --> 03:01.690
sekarang Anda lihat saya memiliki

03:01.690 --> 03:03.740
kesalahan di sini.

03:03.740 --> 03:05.650
Describe tidak dapat memiliki implementasi

03:05.650 --> 03:07.850
karena ditandai sebagai abstrak.

03:07.850 --> 03:10.340
Anda harus menghapus tanda kurung kurawal, menambahkan

03:10.340 --> 03:14.030
titik koma, dan sebagai gantinya menambahkan tipe pengembalian yang

03:14.030 --> 03:16.820
seharusnya dimiliki, dalam hal ini putih.

03:16.820 --> 03:18.400
Jadi sekarang, Anda hanya mendefinisikan

03:18.400 --> 03:21.970
bagaimana metode ini harus terlihat seperti apa strukturnya, tetapi

03:21.970 --> 03:25.230
Anda tidak mengatakan hal lain selain ini.

03:25.230 --> 03:27.990
Sekarang, bagaimanapun, kita mendapatkan error di

03:27.990 --> 03:31.120
Departemen IT karena tidak mengimplementasikan inherited

03:31.120 --> 03:33.640
abstract member describe, yang berarti, kita

03:33.640 --> 03:36.330
tidak menawarkan metode describe di sini.

03:36.330 --> 03:38.410
Dan kita memang harus melakukan itu karena kita

03:38.410 --> 03:41.000
berdasarkan pada kelas Department, yang abstrak, dan yang

03:41.000 --> 03:42.860
memiliki metode abstrak tersebut.

03:42.860 --> 03:45.220
Yang berarti, metode ini harus diimplementasikan

03:45.220 --> 03:48.623
oleh kelas mana pun yang berbasis pada kelas Departemen ini.

03:49.620 --> 03:51.420
Jadi sekarang di sini di Departemen

03:51.420 --> 03:53.820
IT, kita harus menambahkan metode deskripsi.

03:53.820 --> 03:58.820
Dan di sana, sekarang kita bisa melakukan konsol log IT Department, dan kemudian melakukan

03:59.040 --> 04:01.120
apa pun yang kita inginkan.

04:01.120 --> 04:03.070
Ini bisa merupakan implementasi yang

04:03.070 --> 04:04.900
sama seperti yang kita miliki di Departemen

04:04.900 --> 04:07.440
Akuntansi, tetapi bisa juga berbeda.

04:07.440 --> 04:10.040
Jadi sekarang dengan itu, kita dapat menyimpan ini dan itu mengkompilasi

04:10.040 --> 04:12.850
ulang, dan kita mendapatkan output yang hampir sama seperti sebelumnya.

04:12.850 --> 04:15.240
Tetapi sekarang kita memiliki dua implementasi

04:15.240 --> 04:18.090
berbeda dari metode describe di kelas-kelas kita yang berbeda

04:18.090 --> 04:20.020
berdasarkan Department.

04:20.020 --> 04:23.600
Oleh karena itu, abstrak bisa sangat berguna jika Anda ingin memaksakan

04:23.600 --> 04:27.120
bahwa semua kelas yang didasarkan pada beberapa kelas lain, berbagi

04:27.120 --> 04:30.260
beberapa metode atau properti yang sama, Anda juga dapat

04:30.260 --> 04:33.150
memiliki properti abstrak.

04:33.150 --> 04:34.260
Tetapi pada saat yang sama,

04:34.260 --> 04:36.510
Anda ingin memastikan bahwa Anda tidak harus

04:36.510 --> 04:39.170
menyediakan nilai konkret, implementasi konkret di

04:39.170 --> 04:41.000
kelas dasar, tetapi sebaliknya, kelas

04:41.000 --> 04:43.440
yang mewarisi harus melakukan itu.

04:43.440 --> 04:45.970
Juga penting, kelas abstrak.

04:45.970 --> 04:49.200
Jadi kelas-kelas yang ditandai sebagai abstrak dengan kata

04:49.200 --> 04:51.420
kunci ini dapat diinstansiasi sendiri.

04:51.420 --> 04:54.240
Jadi, Anda tidak bisa menginstansiasi Departemen sekarang.

04:54.240 --> 04:57.440
Ini pada dasarnya hanya sebuah kelas yang harus diwariskan

04:57.440 --> 05:01.800
sehingga kelas yang mewarisi dapat diinstansiasi, dan kelas yang mewarisi

05:01.800 --> 05:05.230
dipaksa untuk menyediakan implementasi konkret untuk

05:05.230 --> 05:09.040
dalam hal ini untuk mendeskripsikan metode mengikuti struktur

05:09.040 --> 05:11.770
yang Anda susun di sini.

05:11.770 --> 05:15.750
Jadi dengan kata kunci ini merujuk ke instance atau instance Departemen,

05:15.750 --> 05:19.930
entah bagaimana berdasarkan Departemen termasuk kelas yang diwariskan yang

05:19.930 --> 05:21.530
mungkin ada di antaranya dan itu

05:21.530 --> 05:23.610
tidak mengembalikan apa pun
