WEBVTT

00:02.180 --> 00:05.590
Instruktor: Wróćmy do interfejsów dla obiektów.

00:05.590 --> 00:10.090
Możesz również zdefiniować opcjonalne właściwości

00:10.090 --> 00:14.100
w interfejsach, a także w klasach, jak pokażę.

00:14.100 --> 00:16.437
W tym celu dodajesz swoją nazwę właściwości,

00:16.437 --> 00:20.740
powiedzmy "outputName" tutaj, może być cokolwiek chcesz oczywiście, i to

00:20.740 --> 00:22.238
powinno być ciągiem.

00:22.238 --> 00:26.400
Nie chcę zmuszać każdej klasy opartej na Named do posiadania

00:26.400 --> 00:27.630
tego.

00:27.630 --> 00:31.120
Powinien być opcjonalny, czy chcesz go mieć, czy nie.

00:31.120 --> 00:34.289
Możesz określić właściwość opcjonalną, dodając

00:34.289 --> 00:37.670
znak zapytania po nazwie właściwości.

00:37.670 --> 00:40.130
To mówi Tivescriptowi, że ta właściwość

00:40.130 --> 00:44.060
może istnieć w klasach, które implementują ten interfejs,

00:44.060 --> 00:45.680
ale nie musi.

00:45.680 --> 00:48.540
I dlatego nie otrzymujemy tutaj żadnego błędu w "Person",

00:48.540 --> 00:51.180
mimo że nie mam właściwości nazwy wyjściowej,

00:51.180 --> 00:53.440
ponieważ jest ona opcjonalna.

00:53.440 --> 00:56.072
Teraz oczywiście mogę dodać tutaj nazwę

00:56.072 --> 00:59.130
wyjściową i zainicjować to z jakąś wartością lub

00:59.130 --> 01:02.800
użyć jej jak każdej innej właściwości, ale nie muszę.

01:02.800 --> 01:06.720
Teraz na klasie możesz mieć również opcjonalną właściwość.

01:06.720 --> 01:09.670
Niech ta sama nazwa tutaj będzie opcjonalna,

01:09.670 --> 01:13.840
bo może nie dostaniemy tutaj wartości dla N.

01:13.840 --> 01:16.010
Również w naszej klasie możemy dodać

01:16.010 --> 01:17.460
tutaj znak zapytania.

01:17.460 --> 01:20.890
Teraz po prostu musimy również uczynić go opcjonalnym tutaj w Named

01:20.890 --> 01:23.610
inaczej naruszamy przeciwko naszemu interfejsowi,

01:23.610 --> 01:26.012
który wymusza, aby był to ciąg znaków.

01:26.012 --> 01:29.000
Teraz mówię, że to może być opcjonalne.

01:29.000 --> 01:30.510
Więc tutaj nie jest to opcjonalne,

01:30.510 --> 01:32.750
a tutaj, gdy ustawiam to równe N, chcę

01:32.750 --> 01:37.640
to zrobić tylko wtedy, gdy N jest prawdziwe, jeśli jest ustawione.

01:37.640 --> 01:40.080
Więc tylko wtedy, gdy nie jest to pusty ciąg na przykład.

01:40.080 --> 01:43.340
W przeciwnym razie nazwa nie zostanie ustawiona i to jest w

01:43.340 --> 01:46.524
porządku, ponieważ zmieniłem ją na opcjonalną właściwość

01:46.524 --> 01:49.853
zarówno tutaj w interfejsie, ale także w mojej klasie.

01:50.790 --> 01:53.070
Teraz tutaj, gdy konstruujemy nowy obiekt,

01:53.070 --> 01:56.203
moglibyśmy to zrobić bez przekazywania nazwy.

01:57.060 --> 01:59.813
Aby na to pozwolić, musimy przejść do konstruktora

01:59.813 --> 02:02.600
i podać tutaj wartość domyślną lub również

02:02.600 --> 02:05.120
dodać tutaj znak zapytania.

02:05.120 --> 02:06.260
To wszystko po to, by na to pozwolić.

02:06.260 --> 02:08.800
Możesz dodać opcjonalne parametry albo poprzez

02:08.800 --> 02:12.170
zapewnienie domyślnej wartości awaryjnej, albo poprzez dodanie

02:12.170 --> 02:13.990
znaku zapytania, w którym to przypadku

02:13.990 --> 02:17.170
domyślna wartość będzie niezdefiniowana.

02:17.170 --> 02:20.450
I teraz możemy wywołać ten konstruktor bez wartości, ponieważ

02:20.450 --> 02:22.446
mamy ten opcjonalny parametr, a ponieważ

02:22.446 --> 02:25.960
mamy opcjonalną właściwość, która jest w porządku, nie musimy

02:25.960 --> 02:27.930
jej inicjalizować.

02:27.930 --> 02:29.648
I stąd później, jeśli pozdrowisz,

02:29.648 --> 02:33.510
cóż ta nazwa oczywiście da nieokreślone.

02:33.510 --> 02:35.640
Więc pewnie tutaj też powinniśmy sprawdzić

02:35.640 --> 02:37.000
czy mamy nazwę, a jeśli tak

02:37.000 --> 02:39.100
to konsolujemy. zaloguj to.

02:39.100 --> 02:42.970
W przeciwnym razie, pocieszamy. zaloguj się "hi" bez odniesienia

02:42.970 --> 02:45.200
do nazwy, bo jej nie mamy.

02:45.200 --> 02:47.170
Jeśli powiemy, że jeśli wszystko

02:47.170 --> 02:48.840
kompiluje i widzimy tylko

02:48.840 --> 02:51.520
hi tutaj, ponieważ nie podał nazwy.

02:51.520 --> 02:53.950
Więc to byłyby opcjonalne właściwości

02:53.950 --> 02:56.008
zarówno w klasie, jak i w interfejsie,

02:56.008 --> 02:59.910
a także w mojej liście konstruktorów tutaj.

02:59.910 --> 03:01.660
Teraz tylko po to, żeby znowu było

03:01.660 --> 03:04.790
naprawdę jasne, te trzy rzeczy są tylko luźno powiązane.

03:04.790 --> 03:07.980
Możesz opcjonalną właściwość w interfejsie, a następnie

03:07.980 --> 03:11.060
zaimplementować ją jako nieopcjonalną właściwość

03:11.060 --> 03:11.910
w klasie.

03:11.910 --> 03:14.550
Następnie musisz tylko upewnić się, że twoja logika jest

03:14.550 --> 03:17.810
taka, że jest to zawsze inicjalizowane w przeciwnym razie otrzymasz

03:17.810 --> 03:19.720
błąd, jak właśnie zobaczyłeś.

03:19.720 --> 03:22.180
Lub masz opcjonalną właściwość w interfejsie

03:23.723 --> 03:26.870
i opcjonalną właściwość w swojej klasie, wtedy nie

03:26.870 --> 03:31.630
musisz przypisywać wartości we wszystkich przypadkach tutaj.

03:31.630 --> 03:34.210
A dodatkowo i zupełnie bez związku tutaj, możesz

03:34.210 --> 03:36.020
mieć opcjonalne parametry w funkcjach,

03:36.020 --> 03:38.300
a więc także w metodach, w tym w metodzie

03:38.300 --> 03:40.300
konstruktora.

03:40.300 --> 03:42.670
Parametry opcjonalne są definiowane albo za

03:42.670 --> 03:43.810
pomocą znaku zapytania,

03:43.810 --> 03:48.040
gdzie wartość domyślna, jeśli nie jest ustawiona, jest zatem niezdefiniowana

03:48.040 --> 03:51.690
lub po prostu przez przypisanie wartości domyślnej, jak to.

03:51.690 --> 03:53.785
Następnie, jak się dowiesz, jest to również opcjonalne

03:53.785 --> 03:56.960
i domyślna wartość zostanie przyjęta, jeśli nie przekażesz bardziej

03:56.960 --> 03:58.750
konkretnej wartości.

03:58.750 --> 04:00.720
Więc to daje ci więcej elastyczności

04:00.720 --> 04:02.950
w tym, jak strukturyzujesz swoje klasy, a

04:02.950 --> 04:04.770
kiedy mówimy o interfejsach, jak strukturyzujesz

04:04.770 --> 04:06.860
swoje kontrakty, które klasy mogą potrzebować

04:06.860 --> 04:09.103
przestrzegać.
