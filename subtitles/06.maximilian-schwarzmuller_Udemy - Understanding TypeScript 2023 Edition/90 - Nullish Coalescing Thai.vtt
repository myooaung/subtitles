WEBVTT

00:02.300 --> 00:04.800
ผู้สอน: ตอนนี้เกี่ยวข้องกับการผูกมัดที่เป็นทางเลือก

00:04.800 --> 00:06.930
เรามีคุณสมบัติที่ดีอีกอย่างหนึ่งใน TypeScript

00:06.930 --> 00:09.550
ซึ่งช่วยให้เราจัดการกับข้อมูลที่เป็นโมฆะได้

00:09.550 --> 00:12.820
และคุณลักษณะนั้นเรียกว่าการรวมตัวกันเป็นโมฆะ

00:12.820 --> 00:15.900
ลองนึกภาพว่าคุณมีข้อมูลบางอย่าง อินพุตบางอย่าง

00:15.900 --> 00:19.830
ซึ่งคุณไม่ทราบแน่ชัดว่าเป็นค่าว่างหรือไม่ได้กำหนด

00:19.830 --> 00:23.320
หรือเป็นข้อมูลที่ถูกต้องหรือไม่

00:23.320 --> 00:28.180
ตัวอย่างเช่น userInput อาจเป็นค่าว่างก็ได้

00:28.180 --> 00:31.040
อีกครั้ง ที่นี่ เราฮาร์ดโค้ดสิ่งนี้ลงใน TypeScript

00:31.040 --> 00:33.580
ดังนั้น TypeScript จึงรู้ว่านี่เป็นค่าว่าง

00:33.580 --> 00:38.650
แต่ถ้าคุณกำลังดึงข้อมูลนี้ผ่าน DOM API ที่คุณไม่ทราบแน่ชัด หรือถ้าคุณได้รับสิ่งนี้

00:38.650 --> 00:46.510
จากส่วนหลัง คุณอาจไม่ทราบล่วงหน้าและ TypeScript อาจไม่ทราบว่าสิ่งนี้เป็นค่าว่างหรือไม่

00:46.510 --> 00:50.650
หากคุณต้องการจัดเก็บสิ่งนี้ไว้ในค่าคงที่หรือตัวแปรอื่น

00:50.650 --> 00:58.760
เช่น storageData คุณอาจต้องแน่ใจว่าหากเป็นค่าว่าง คุณจะเก็บค่าทางเลือกไว้

00:58.760 --> 01:03.560
ตอนนี้คุณสามารถทำได้ด้วยตัวดำเนินการเชิงตรรกะ OR ซึ่งคุณจัดเก็บค่าดีฟอลต์

01:03.560 --> 01:11.550
ซึ่งคุณจะได้รับค่าที่สองของค่าแรกที่ไม่ได้กำหนดหรือค่าว่าง หากเป็นเท็จเพื่อให้แม่นยำ

01:11.550 --> 01:13.690
ปัญหาของแนวทางนี้คือ ถ้าจริง

01:13.690 --> 01:18.960
ๆ แล้วไม่ใช่ค่าว่างหรือไม่ได้กำหนด แต่สมมติว่าเป็นสตริงว่าง

01:18.960 --> 01:21.740
ก็จะถือว่าเป็นค่าเท็จ ดังนั้นค่าเริ่มต้น

01:21.740 --> 01:25.600
ค่าที่ใช้แทนจึงจะเริ่มทำงาน

01:25.600 --> 01:28.850
ดังนั้นถ้าฉันปลอบใจ เข้าสู่ระบบ storageData ที่นี่

01:28.850 --> 01:31.700
คุณจะเห็นว่าสิ่งนี้พิมพ์เป็นค่าเริ่มต้น

01:31.700 --> 01:33.430
บางทีนั่นอาจเป็นสิ่งที่คุณต้องการ

01:33.430 --> 01:36.540
และในกรณีนี้ นี่เป็นวิธีแก้ปัญหาที่สมบูรณ์แบบ

01:36.540 --> 01:40.730
แต่ถ้าคุณต้องการเก็บข้อมูลที่ผู้ใช้ป้อนหรือข้อมูลใดก็ตามที่คุณใช้งานอยู่

01:40.730 --> 01:48.970
เว้นแต่ว่าข้อมูลนั้นจะไม่เป็นโมฆะหรือไม่ได้กำหนดจริงๆ คุณต้องใช้วิธีอื่นเพราะที่นี่เราจะถือว่าข้อมูลนี้เป็นเท็จและใช้ทางเลือกสำรอง

01:48.970 --> 01:51.720
แต่บางทีคุณอาจต้องการเก็บอินพุตว่างไว้เพียงค่าว่างหรือไม่ได้กำหนด

01:51.720 --> 01:54.370
ควรจัดการให้แตกต่างออกไป

01:54.370 --> 01:56.390
สำหรับสิ่งนั้น TypeScript ยังมีตัวดำเนินการ

01:56.390 --> 02:02.210
ตัวดำเนินการเครื่องหมายคำถามคู่ ซึ่งเรียกว่าตัวดำเนินการการรวมศูนย์ที่เป็นโมฆะ

02:02.210 --> 02:05.250
และหมายความว่าถ้านี่เป็น null หรือไม่ได้กำหนด

02:05.250 --> 02:06.730
และแค่นั้นจริง ๆ ไม่ใช่สตริงว่าง

02:06.730 --> 02:09.180
ไม่ใช่ศูนย์ จริง ๆ แล้วเป็นแค่ null

02:09.180 --> 02:13.370
หรือไม่ได้กำหนด เราจะใช้ทางเลือกสำรอง

02:13.370 --> 02:16.700
หากไม่เป็นโมฆะหรือไม่ได้กำหนด เราจะใช้ค่านั้น

02:16.700 --> 02:19.220
ในสถานการณ์นี้ คอมไพล์ และคุณเห็น

02:19.220 --> 02:23.060
เราเก็บสตริงว่าง ดังนั้น ฉันไม่ได้พิมพ์อะไรที่นี่

02:23.060 --> 02:24.720
นี่คือสตริงว่าง

02:24.720 --> 02:26.060
ในทางกลับกัน ถ้านี่ไม่ได้กำหนดที่นี่

02:26.060 --> 02:28.550
และฉันบันทึกสิ่งนี้ ตอนนี้มันเขียนว่า DEFAULT

02:28.550 --> 02:30.400
เพราะต้องขอบคุณโอเปอเรเตอร์เครื่องหมายคำถามสองตัวนี้

02:30.400 --> 02:32.980
เราจึงถอยกลับมาที่สิ่งนี้ เอาล่ะ ทางเลือกสำรอง

02:32.980 --> 02:42.773
ดังนั้นเราจึงได้ อีกหนึ่งคุณสมบัติที่มีประโยชน์มากซึ่งสามารถช่วยคุณจัดการกับค่าที่เป็นโมฆะหรือไม่ได้กำหนดด้วยความสง่างาม
