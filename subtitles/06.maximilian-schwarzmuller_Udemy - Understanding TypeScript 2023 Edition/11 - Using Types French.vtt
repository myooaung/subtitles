WEBVTT

00:02.060 --> 00:06.410
Instructeur : Typescript fournit de nombreux types à JavaScript.

00:06.410 --> 00:10.100
Maintenant, JavaScript lui-même connaît également certains types de données,

00:10.100 --> 00:12.230
et j'y reviendrai également dans ce module,

00:12.230 --> 00:14.950
mais Typescript ajoute de nombreux autres types, et comme

00:14.950 --> 00:17.380
vous l'apprendrez également dans ce cours, Typescript

00:17.380 --> 00:21.110
vous permet également d'écrire vos propres types.

00:21.110 --> 00:24.320
Commençons par quelques-uns des types de base, que

00:24.320 --> 00:26.250
JavaScript connaît déjà et que

00:26.250 --> 00:28.289
Typescript prend également en charge.

00:28.289 --> 00:30.550
Nous verrons également ce que signifie

00:30.550 --> 00:33.380
la différence entre JavaScript, qui connaît

00:33.380 --> 00:36.800
le type, et Typescript, qui utilise ce type.

00:36.800 --> 00:38.287
L'un des principaux types avec lesquels

00:38.287 --> 00:41.740
nous travaillons en JavaScript et Typescript est le type nombre.

00:41.740 --> 00:45.220
En JavaScript, et il en va de même pour Typescript, il n'existe

00:45.220 --> 00:47.290
qu'un seul type de numéro.

00:47.290 --> 00:50.750
Il n'existe pas de type spécial pour les entiers ou les flottants.

00:50.750 --> 00:55.520
Au lieu de cela, ces valeurs ici, seraient toutes des nombres.

00:55.520 --> 00:58.180
L'un serait un nombre sans décimale.

00:58.180 --> 01:01.640
5. 3 est évidemment un avec une décimale

01:01.640 --> 01:04.532
et toutes ces valeurs sont de type nombre.

01:04.532 --> 01:08.180
D'autres langages de programmation disposent de types entiers spéciaux

01:08.180 --> 01:10.480
et de types flottants ou doubles.

01:10.480 --> 01:11.980
JavaScript ne l'a pas et

01:11.980 --> 01:14.120
Typescript ne l'a pas non plus.

01:14.120 --> 01:16.070
Ainsi, nous avons le type nombre, que nous

01:16.070 --> 01:19.810
connaissons de JavaScript, également comme un type, dans Typescript.

01:19.810 --> 01:23.950
Nous disposons également du type de données chaîne de caractères, c'est-à-dire du

01:23.950 --> 01:26.370
texte, que vous pouvez définir de l'une de ces trois

01:26.370 --> 01:28.285
façons : avec des guillemets simples, des

01:28.285 --> 01:30.950
guillemets doubles ou des guillemets anglais.

01:30.950 --> 01:34.720
La dernière notation avec des backticks est une syntaxe spéciale, fournie

01:34.720 --> 01:38.640
dans le JavaScript moderne et aussi dans le Typescript, qui nous permet

01:38.640 --> 01:42.440
d'écrire ce qu'on appelle des littéraux de modèle, c'est-à-dire des

01:42.440 --> 01:44.550
chaînes normales dans lesquelles on peut

01:44.550 --> 01:47.520
injecter dynamiquement des données.

01:47.520 --> 01:49.240
Ainsi, les chaînes sont simplement

01:49.240 --> 01:53.000
du texte et JavaScript connaît les types de valeurs des chaînes.

01:53.000 --> 01:55.000
C'est également le cas de Typescript.

01:55.000 --> 01:57.240
Enfin, l'un des principaux types de données,

01:57.240 --> 01:59.790
que JavaScript connaît et que Typescript prend également

01:59.790 --> 02:02.250
en charge, est le type de données booléen.

02:02.250 --> 02:03.810
Ce serait vrai ou faux, et c'est super

02:03.810 --> 02:06.610
important en programmation, évidemment, surtout quand

02:06.610 --> 02:08.920
on travaille avec des instructions IF.

02:08.920 --> 02:10.970
Ici, nous avons obtenu ces deux valeurs,

02:10.970 --> 02:13.690
et c'est important, parce qu'en JavaScript, vous

02:13.690 --> 02:17.520
connaissez peut-être aussi l'idée de valeurs véridiques et fausses,

02:17.520 --> 02:22.190
par exemple que zéro, le chiffre zéro, est une valeur fausse.

02:22.190 --> 02:25.510
Si vous l'utilisez dans une condition IF, elle est traitée comme fausse.

02:25.510 --> 02:28.560
Le type de données booléen ne connaît que ces deux valeurs, vrai

02:28.560 --> 02:31.230
ou faux, et ce n'est pas seulement le cas pour Typescript,

02:31.230 --> 02:33.160
mais aussi pour JavaScript.

02:33.160 --> 02:35.532
Cette notion de vérité, de fausseté, que vous devez

02:35.532 --> 02:38.280
connaître, qui n'est pas liée aux types de données.

02:38.280 --> 02:40.840
C'est le travail en coulisses.

02:40.840 --> 02:43.030
JavaScript ajoute du temps d'exécution,

02:43.030 --> 02:46.510
lorsqu'il voit certaines valeurs, et des conditions IF.

02:46.510 --> 02:48.530
Ainsi, avec les nombres, les chaînes de caractères et les booléens,

02:48.530 --> 02:50.060
nous disposons de deux types de données de base.

02:50.060 --> 02:51.450
Bien sûr, il y a aussi les

02:51.450 --> 02:53.410
objets, etc., mais concentrons-nous

02:53.410 --> 02:54.617
sur ces types et voyons

02:54.617 --> 02:57.330
ce que Typescript fait avec eux, ou ce que nous

02:57.330 --> 03:00.930
pouvons faire avec eux, avec l'aide de Typescript.

03:00.930 --> 03:02.620
Pour cela, je reviens au projet que

03:02.620 --> 03:05.190
nous avons vu dans le premier module de cours, et

03:05.190 --> 03:07.600
là, je vous ai montré que tout ce que vous devez

03:07.600 --> 03:10.320
faire, maintenant, c'est exécuter npm start dans un

03:10.320 --> 03:12.280
terminal, naviguer dans ce dossier de

03:12.280 --> 03:15.130
projet, pour faire tourner ce serveur de développement

03:15.130 --> 03:18.110
en direct, qui se rechargera, chaque fois que nous changerons

03:18.110 --> 03:22.300
quelque chose, et ici, j'ai ouvert cette adresse localhost:3000 dans le nouvel

03:22.300 --> 03:24.890
onglet de mon navigateur.

03:24.890 --> 03:26.070
Je sais, j'ai une erreur, parce que

03:26.070 --> 03:28.300
je n'ai pas encore de plateau d'application comme fichier.

03:28.300 --> 03:30.380
Bien sûr, vous trouverez ce projet de départ,

03:30.380 --> 03:32.280
tout attaché à cette conférence, obtiendra

03:32.280 --> 03:34.400
un tel plateau d'application comme fichier,

03:34.400 --> 03:37.590
que nous essayons d'importer ici, dans notre fichier html d'index,

03:37.590 --> 03:42.050
dès que nous compilerons l'application. ts de Typescript à JavaScript et nous pouvons le faire

03:42.050 --> 03:45.070
dans un nouvel onglet du terminal, de sorte que nous gardons ce processus

03:45.070 --> 03:46.860
en cours et ouvrons un nouvel onglet à la place,

03:46.860 --> 03:51.117
en exécutant simplement tsc app. ts et ce que cela fait, c'est qu'il compile

03:53.920 --> 03:56.630
le fichier Typescript et sort un fichier JavaScript,

03:56.630 --> 03:58.680
et une fois que cela se produit, nous

03:58.680 --> 04:01.570
pouvons recharger cette page et nous avons le temps

04:01.570 --> 04:05.520
de commencer... sortie ici.

04:05.520 --> 04:08.000
Nous avons maintenant cette configuration,

04:08.000 --> 04:10.620
qui nous permet d'écrire du code Typescript

04:10.620 --> 04:14.650
et de le compiler en code JavaScript, pour voir ce qu'il fait.

04:14.650 --> 04:17.000
Maintenant, avec cela dans le fichier Typescript, je

04:17.000 --> 04:18.870
vais en fait me débarrasser du contenu, parce

04:18.870 --> 04:21.820
que maintenant, je veux me plonger dans ces types de données de base,

04:21.820 --> 04:23.720
que je viens de vous montrer sur la diapositive,

04:23.720 --> 04:27.230
afin que vous compreniez comment travailler avec eux dans Typescript.

04:27.230 --> 04:29.430
Maintenant, commençons très, très simplement.

04:29.430 --> 04:32.240
Disons que nous avons une nouvelle fonction,

04:32.240 --> 04:34.990
add, où nous attendons deux nombres, n1 et

04:34.990 --> 04:38.610
add two, et qui renvoie n1 plus n2, juste comme ça, une

04:38.610 --> 04:42.370
fonction très simple, rien de typographique.

04:42.370 --> 04:46.080
Maintenant, nous avons deux chiffres avec lesquels nous voulons travailler.

04:46.080 --> 04:49.800
Cela pourrait être le numéro 1 ici, qui est, disons, cinq et

04:49.800 --> 04:54.680
aussi le numéro 2, qui est peut-être 2. 8, comme vous voulez,

04:54.680 --> 04:57.060
deux chiffres ici.

04:57.060 --> 04:59.820
Maintenant, évidemment et sans grande surprise, nous

04:59.820 --> 05:02.950
pouvons ajouter, ou appeler la fonction add et passer le nombre

05:02.950 --> 05:05.280
1 et le nombre 2 comme arguments à cette fonction,

05:05.280 --> 05:07.320
stocker le résultat dans une nouvelle constante

05:07.320 --> 05:10.360
peut-être, et ensuite pour voir quelque chose à l'écran, nous

05:10.360 --> 05:15.080
pouvons utiliser la console.

05:15.080 --> 05:15.080
enregistrer le résultat.

05:15.080 --> 05:20.080
Si on fait ça, et que je recompile ce fichier avec tsc app. ts, alors cette page devrait se recharger

05:20.270 --> 05:22.730
automatiquement, déjà.

05:22.730 --> 05:24.350
Si non, vous pouvez recharger manuellement,

05:24.350 --> 05:27.010
bien sûr, et vous devriez voir 7. 8.

05:27.010 --> 05:30.250
Vous pourriez penser que ce n'est pas trop spécial, n'est-ce pas ?

05:30.250 --> 05:33.650
Il s'agit d'un extrait JavaScript assez simple

05:33.650 --> 05:37.330
et, en effet, il n'a rien de typographique.

05:37.330 --> 05:39.450
Eh bien, faisons quelque chose qui freinera

05:39.450 --> 05:41.900
ce snippet en JavaScript normal.

05:41.900 --> 05:45.100
Disons que cette entrée ici n'est pas un nombre, mais

05:45.100 --> 05:48.530
du texte, un cinq en texte, et si nous sauvegardons maintenant

05:48.530 --> 05:49.880
cela, et réexécutons

05:49.880 --> 05:53.380
notre commande de compilation ici, vous verrez que, une

05:53.380 --> 05:56.110
fois que cette page se recharge ici, j'obtiens

05:56.110 --> 05:59.530
52. 8 comme une sortie et ce n'est évidemment

05:59.530 --> 06:02.200
pas le résultat correct de cet ajout.

06:02.200 --> 06:04.500
Maintenant, savez-vous pourquoi nous obtenons

06:04.500 --> 06:06.450
cette sortie dans le JavaScript normal,

06:06.450 --> 06:08.670
que nous, à la fin, exécutons ici.

06:08.670 --> 06:10.150
Eh bien, nous obtenons cette

06:10.150 --> 06:14.710
sortie, parce que ce n'est pas le résultat de l'addition mathématique, mais au lieu de cela,

06:14.710 --> 06:17.760
cela concatène cela comme une chaîne, parce que cette entrée,

06:17.760 --> 06:21.060
ici, cinq, est une chaîne et puis JavaScript voit, "Ok, j'ai une

06:21.060 --> 06:23.997
chaîne, "j'ajoute quelque chose à cette chaîne, alors que

06:23.997 --> 06:27.667
certainement, "ce quelque chose devrait également être converti en une

06:27.667 --> 06:30.467
chaîne, "de sorte que globalement, j'ai une chaîne, "parce

06:30.467 --> 06:32.097
que la première valeur était une

06:32.097 --> 06:34.190
chaîne," et donc, ce que JavaScript fait,

06:34.190 --> 06:39.240
c'est, il convertit 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
d'un nombre à une chaîne, concatène une chaîne plus longue à partir de 5 et 2. 8, ce qui

06:42.720 --> 06:46.700
donne 52. 8, sous la forme d'une chaîne de caractères et la renvoie.

06:46.700 --> 06:49.490
Il ne le traite donc pas de manière mathématique, mais plutôt

06:49.490 --> 06:50.850
comme une chaîne de caractères,

06:50.850 --> 06:52.900
et avec JavaScript, cela peut arriver.

06:52.900 --> 06:54.037
Maintenant, bien sûr, vous pouvez penser,

06:54.037 --> 06:55.427
"Pourquoi voudrais-je écrire un tel code ?

06:55.427 --> 06:58.160
"Je suis le développeur, pourquoi ferais-je cette erreur ? Eh bien, peut-être que vous n'êtes pas le seul à faire cette erreur.

06:58.160 --> 07:01.230
Peut-être que cette information est extraite d'une entrée

07:01.230 --> 07:04.180
utilisateur et que vous avez introduit un petit bug dans votre

07:04.180 --> 07:06.690
code, où vous avez oublié de la transformer, ou bien

07:06.690 --> 07:09.350
vous travaillez en équipe et vous avez deux fichiers

07:09.350 --> 07:12.460
de script qui travaillent ensemble, et un autre développeur

07:12.460 --> 07:14.740
a introduit une telle erreur.

07:14.740 --> 07:17.270
Il n'est pas impossible de commettre de telles erreurs,

07:17.270 --> 07:20.110
mais il peut être difficile de les retrouver.

07:20.110 --> 07:22.340
Ici, bien sûr, il est assez évident que quelque chose s'est

07:22.340 --> 07:24.010
mal passé, parce que nous avons un script

07:24.010 --> 07:26.400
de base, mais dans un script plus important, vous pourriez

07:26.400 --> 07:28.320
ne pas reconnaître immédiatement que quelque

07:28.320 --> 07:31.520
chose s'est mal passé ici, et c'est là que Typescript peut nous aider.

07:31.520 --> 07:33.720
Nous pouvons ajouter des affectations

07:33.720 --> 07:36.390
de type dans cette fonction, à nos paramètres.

07:36.390 --> 07:38.820
Nous pouvons dire à Typescript que ces

07:38.820 --> 07:42.280
deux paramètres doivent être de type nombre et non de

07:42.280 --> 07:45.340
type , peu importe lequel est par défaut.

07:45.340 --> 07:47.535
Pour ce faire, nous ajoutons deux points

07:47.535 --> 07:50.300
ici, après la valeur à laquelle nous voulons attribuer

07:50.300 --> 07:52.890
un type, donc, dans ce cas, après le nom du paramètre

07:52.890 --> 07:55.220
et ensuite le nom du type.

07:55.220 --> 07:57.140
Par exemple, numéro serait l'un des noms pris en charge.

07:57.140 --> 08:00.560
Outre les nombres, il y a aussi les chaînes de caractères

08:00.560 --> 08:03.480
et les booléens, mais nous y reviendrons.

08:03.480 --> 08:05.990
Pour le moment, nous avons besoin d'un nombre et nous

08:05.990 --> 08:07.750
n'en avons pas seulement besoin sur

08:07.750 --> 08:10.530
le premier paramètre ici, mais aussi sur le second.

08:10.530 --> 08:12.010
Donc, ici aussi, nous pouvons

08:12.010 --> 08:16.150
ajouter deux points, puis un nombre, et maintenant, ce que nous disons à Typescript,

08:16.150 --> 08:18.367
c'est, "Hey, les deux paramètres ici, devraient

08:18.367 --> 08:22.147
être de type nombre, "passer des valeurs d'un type différent n'est pas

08:22.147 --> 08:25.530
autorisé", et en effet, mon IDE se plaint déjà ici, parce que Visual

08:25.530 --> 08:28.360
Studio Code a un support intégré de Typescript, mais

08:28.360 --> 08:34.260
même si nous négligeons cela, dès que je recompile ceci, en réexécutant tsc app.

08:34.260 --> 08:34.260
ts,

08:34.260 --> 08:39.193
vous verrez, on a une erreur.

08:40.040 --> 08:41.670
Nous obtenons une erreur, qui,

08:41.670 --> 08:42.697
"Argument of type '"5"

08:42.697 --> 08:46.250
is not assignable to parameter of type 'number', et il nous montre

08:46.250 --> 08:48.660
même où cela s'est produit et nous donne un numéro

08:48.660 --> 08:51.140
de ligne, ligne huit, et il nous montre essentiellement

08:51.140 --> 08:54.430
la même chose, l'IDE montre ici.

08:54.430 --> 08:56.740
Ainsi, au cas où nous l'aurions négligé dans l'IDE, la

08:56.740 --> 08:58.707
compilation du fichier génère maintenant une

08:58.707 --> 09:01.340
erreur, et c'est ce qui est important avec Typescript.

09:01.340 --> 09:03.284
Cela ne nous aide que lors de la compilation.

09:03.284 --> 09:06.220
Il ne modifie pas JavaScript pour qu'il fonctionne différemment au

09:06.220 --> 09:10.110
moment de l'exécution, car les navigateurs n'ont pas de support Typescript intégré.

09:10.110 --> 09:13.510
Il ne peut nous aider que pendant le développement, avant que nous compilions

09:13.510 --> 09:15.700
notre code Typescript en JavaScript, mais

09:15.700 --> 09:19.310
là, il est extrêmement utile, car il ajoute une étape supplémentaire,

09:19.310 --> 09:21.520
un contrôle supplémentaire de l'intégrité,

09:21.520 --> 09:25.560
alors qu'ici, nous découvrons, "Oh, nous avons fait une erreur.

09:25.560 --> 09:28.407
"Ici, ça ne devrait pas être une chaîne de caractères, ça

09:28.407 --> 09:31.660
devrait être un nombre", et on peut corriger ça et c'est bon.

09:31.660 --> 09:34.210
C'est ce que fait Typescript.

09:34.210 --> 09:35.670
Il vous aide pendant le développement.

09:35.670 --> 09:37.390
Il ne modifie pas votre code d'exécution.

09:37.390 --> 09:40.130
En effet, ici, même avec les paramètres par défaut,

09:40.130 --> 09:42.800
il a compilé notre erreur ici, même s'il l'a détectée

09:42.800 --> 09:44.700
pendant la compilation, et a créé un

09:44.700 --> 09:47.220
fichier qui provoque le résultat incorrect,

09:47.220 --> 09:50.690
car par défaut, Typescript n'intervient pas, ici.

09:50.690 --> 09:53.560
Vous apprendrez plus tard comment vous pouvez vous assurer qu'il

09:53.560 --> 09:56.300
le fait, mais par défaut, il ne bloque même pas la compilation.

09:56.300 --> 09:59.260
Pourtant, il vous crie dessus et vous signale cette

09:59.260 --> 10:03.570
erreur, afin que vous puissiez la corriger et que vous puissiez éviter de

10:03.570 --> 10:04.850
telles erreurs ici.

10:04.850 --> 10:07.450
Au fait, assurez-vous que vous n'avez

10:07.450 --> 10:09.020
pas d'application. js et app. ts ouverts en même temps.

10:09.020 --> 10:11.950
Vous pourriez obtenir des erreurs ici dans

10:11.950 --> 10:13.470
l'IDE, concernant les implémentations de fonctions en double.

10:13.470 --> 10:15.830
Fermer le fichier JavaScript résout ce problème.
