WEBVTT

00:02.480 --> 00:06.780
Mann: Nun, mit dem Wissen über Fabrikfunktionen oder Fabrikdekoratoren

00:06.780 --> 00:10.523
können wir ziemlich interessante Dinge tun.

00:11.570 --> 00:16.240
Wir könnten zum Beispiel eine neue Dekorator-Fabrik mit Vorlage

00:16.240 --> 00:17.693
handeln.

00:19.400 --> 00:21.590
Und hier erwarte ich eine Vorlage, die

00:21.590 --> 00:23.780
eine Zeichenkette sein sollte.

00:23.780 --> 00:28.780
Und eine hookId, die ebenfalls eine Zeichenkette sein sollte.

00:28.870 --> 00:32.050
Dann gebe ich hier meine anonyme Funktion zurück, die der eigentliche

00:32.050 --> 00:34.800
Dekorator ist, wie Sie gelernt haben.

00:34.800 --> 00:37.440
Denn auch hier habe ich eine Dekorationsfabrik.

00:37.440 --> 00:40.570
Und dort möchte ich eine Vorlage, die ein HTML-Code

00:40.570 --> 00:42.530
sein sollte, an einer Stelle

00:42.530 --> 00:46.590
im Dom wiedergeben, wo ich diese hookId finde.

00:46.590 --> 00:49.160
Jetzt können wir also zum Index gehen. html und fügen Sie eine solche Stelle

00:49.160 --> 00:51.250
hinzu, damit wir sehen können, dass dies funktioniert.

00:51.250 --> 00:54.483
Wir können hier ein div hinzufügen, vielleicht mit einer id von app.

00:55.430 --> 00:59.560
Und dann in app. ts, anstelle von Logger, füge

00:59.560 --> 01:01.357
ich WithTemplate hinzu.

01:02.570 --> 01:05.130
Übergeben wir zunächst eine leere Zeichenkette als erstes Argument

01:05.130 --> 01:06.810
und app als zweites Argument.

01:06.810 --> 01:09.313
Diese ID habe ich also dem Div hier zugewiesen.

01:10.170 --> 01:12.400
Und innerhalb dieser inneren Funktion befindet sich nun

01:12.400 --> 01:13.830
unser eigentlicher Dekorator.

01:13.830 --> 01:16.540
Innerhalb dieser Decorator-Funktion

01:16.540 --> 01:19.500
möchte ich das Element erreichen.

01:19.500 --> 01:24.500
Zum Hook-Element mit Dokument. getElementById.

01:25.662 --> 01:29.390
Für den HookId, den wir hier als Argument bekommen.

01:29.390 --> 01:33.480
Und wenn HookEl ein Ding ist, das existiert, dann möchte ich

01:34.330 --> 01:37.960
auf sein innerHTML zugreifen und dieses gleich Template

01:37.960 --> 01:39.920
setzen, sagen wir mal.

01:39.920 --> 01:41.440
Die Einrichtung ist natürlich

01:41.440 --> 01:43.640
sehr einfach, aber sie sollte genügen.

01:43.640 --> 01:45.460
Der Konstruktor interessiert mich nicht.

01:45.460 --> 01:48.110
Und um typescript mitzuteilen, dass ich hier nicht interessiert bin,

01:48.110 --> 01:50.370
kann ich einen Unterstrich als Namen hinzufügen, der typescript

01:50.370 --> 01:52.007
im Grunde signalisiert: "Ja, ich weiß, dass

01:52.007 --> 01:54.580
ich dieses Argument bekomme, aber ich brauche es nicht.

01:54.580 --> 01:56.170
Ich muss es allerdings präzisieren.

01:56.170 --> 01:58.920
Mit diesem Unterstrich sage ich Ihnen also, dass ich ihn

01:58.920 --> 02:00.850
kenne, aber nicht verwenden werde. Denn alles, was ich im Moment tun will,

02:00.850 --> 02:02.300
ist, dieses Jahr zu machen.

02:02.300 --> 02:04.033
Wenn wir nun WithTemplate hier

02:05.580 --> 02:07.750
hinzufügen, können wir ein h1-Tag hinzufügen,

02:07.750 --> 02:10.400
My Person Object wie dieses.

02:10.400 --> 02:14.570
Schließen Sie es außerdem.

02:14.570 --> 02:15.653
Und wenn wir das jetzt gespeichert haben, kompiliert es ohne Fehler.

02:19.130 --> 02:22.380
Und tatsächlich, hier sehen Sie, dass dies auf dem Bildschirm gerendert wurde.

02:22.380 --> 02:26.350
Und das zeigt Ihnen hoffentlich, welche Macht

02:26.350 --> 02:29.720
Sie mit Dekorateuren haben.

02:29.720 --> 02:31.720
Man kann wirklich fortgeschrittene Dekoratoren

02:31.720 --> 02:34.780
wie diesen bauen, der plötzlich hinter den Kulissen etwas zaubert.

02:34.780 --> 02:38.500
Und das ist es, was ich mit Metaprogrammierung meine.

02:38.500 --> 02:41.260
Wir fügen hier eine Logik hinzu, die wir offenlegen könnten,

02:41.260 --> 02:43.930
wenn es sich um eine Bibliothek eines Drittanbieters handeln

02:43.930 --> 02:46.190
würde, die wir mit anderen Benutzern teilen.

02:46.190 --> 02:47.890
Wir könnten dies als Teil der Bibliothek

02:47.890 --> 02:50.350
offenlegen, und jeder, der unsere Bibliothek verwendet,

02:50.350 --> 02:52.630
kann diese Dekoratorfunktion importieren und sie

02:52.630 --> 02:54.910
zu einer Klasse hinzufügen, um dann auf magische Weise

02:54.910 --> 02:57.408
plötzlich einen Inhalt zu rendern.

02:57.408 --> 03:00.500
Und natürlich sind Sie nicht einmal darauf beschränkt, das zu tun.

03:00.500 --> 03:02.980
Wenn Sie den Namen ausgeben möchten, der

03:02.980 --> 03:05.340
Teil der Klasse ist, wenn sie instanziiert

03:05.340 --> 03:07.850
wird, können Sie auch das tun.

03:07.850 --> 03:09.570
Wir bekommen hier schließlich unsere Konstruktor: Funktion.

03:09.570 --> 03:12.427
Damit können wir nun eine neue Person erstellen, indem

03:14.190 --> 03:16.010
wir unseren Konstruktor aufrufen,

03:16.010 --> 03:18.660
denn das ist ja schließlich unsere Konstruktor:

03:18.660 --> 03:20.380
Funktion hier.

03:20.380 --> 03:23.820
Lassen Sie mich dies in any umwandeln, damit das Typescript dies zulässt

03:23.820 --> 03:26.570
und nicht denkt, es sei eine normale Funktion.

03:26.570 --> 03:29.240
Und dann könnten wir zu unserem Hook-Element

03:29.240 --> 03:31.880
gehen und nach einem h1-Tag suchen, das Sie

03:31.880 --> 03:35.160
in der Praxis natürlich nicht immer haben werden.

03:35.160 --> 03:36.070
Aber ich gehe davon aus, dass wir zu Demonstrationszwecken

03:36.070 --> 03:37.330
immer einen hier haben werden.

03:37.330 --> 03:39.820
Ups, und ich sollte den h1-Tag dort unten

03:39.820 --> 03:42.330
immer schließen, jetzt wo ich ihn sehe.

03:42.330 --> 03:43.850
Und dann hier, mit einem Ausrufezeichen,

03:43.850 --> 03:46.750
wieder vorausgesetzt, dass wir immer ein h1-Element finden,

03:46.750 --> 03:49.900
können wir einen textContent gleich p setzen. Name.

03:49.900 --> 03:53.660
Wenn ich das tue und speichere,

03:53.660 --> 03:56.010
gebe ich jetzt den Namen aus, der

03:56.010 --> 03:59.400
Teil des Objekts hier in der Vorlage ist.

03:59.400 --> 04:01.540
Das ist also etwas, was Sie tun können, und natürlich

04:01.540 --> 04:03.420
können Sie weitaus ausgefeiltere Dekoratoren

04:03.420 --> 04:06.010
schreiben, als ich es hier tue.

04:06.010 --> 04:07.840
Nehmen wir Angular, ein sehr beliebtes Framework,

04:07.840 --> 04:09.550
das Typescript verwendet.

04:09.550 --> 04:12.270
Sie verwenden Dekoratoren, wie diesen Komponentendekorator,

04:12.270 --> 04:15.740
um Ihnen zu ermöglichen, ein Objekt zu übergeben, in

04:15.740 --> 04:18.420
dem Sie Dinge wie die Vorlage für discomponent

04:18.420 --> 04:21.020
angeben.

04:21.020 --> 04:21.930
Und den Selektor im Dom,

04:21.930 --> 04:23.950
in dem diese Vorlage gerendert werden soll.

04:23.950 --> 04:25.760
Das kommt dem, was wir hier definiert haben, relativ nahe.

04:25.760 --> 04:28.170
Eine Vorlage und dann einen Ort, an dem sie gerendert werden soll.

04:28.170 --> 04:31.230
Es erübrigt sich zu sagen, dass die Angular-Dekoratoren

04:31.230 --> 04:33.760
natürlich viel fortgeschrittener und ausgefeilter

04:33.760 --> 04:36.550
sind als unser einfacher Dekorator hier.

04:36.550 --> 04:38.740
Der Kerngedanke ist jedoch derselbe.

04:38.740 --> 04:41.660
Angular gibt Ihnen hier die Dekoratoren, so dass

04:41.660 --> 04:43.900
Sie etwas HTML-Code angeben können,

04:43.900 --> 04:46.700
der mit Ihrer Komponentenklasse verbunden werden

04:46.700 --> 04:49.470
kann, die im Dom gerendert wird, wenn diese Komponente

04:49.470 --> 04:51.760
gerendert wird.

04:51.760 --> 04:53.830
Falls Sie nicht wissen, wie Angular funktioniert,

04:53.830 --> 04:55.850
ist das kein Problem.

04:55.850 --> 04:57.060
Man muss nur verstehen, dass es

04:57.060 --> 04:58.700
mit Klassen und Dekoratoren funktioniert,

04:58.700 --> 05:01.300
und dann macht es im Grunde das, was wir hier gemacht haben.

05:01.300 --> 05:03.600
Das ist also eine weitere Sache, die man mit Dekoratoren

05:03.600 --> 05:06.400
machen kann, oder wie hier speziell, mit Dekorator-Fabriken.

05:06.400 --> 05:09.220
Denn so können wir den zusätzlichen Konflikt

05:09.220 --> 05:12.210
einbringen, den wir hier brauchen.

05:12.210 --> 05:13.610
Und das ist auch das, was ich mit Metaprogrammierung meinte.

05:13.610 --> 05:16.590
Wir erstellen Dinge, wir erstellen Dekorfunktionen,

05:16.590 --> 05:21.130
die sozusagen Auswirkungen auf den Endbenutzer haben.

05:21.130 --> 05:24.840
Im NP-Doppelrender oder etwas auf dem Bildschirm hier.

05:24.840 --> 05:27.510
Aber wir machen das mit einem Tool, das wir anderen Entwicklern

05:27.510 --> 05:29.090
zur Verfügung stellen.

05:29.090 --> 05:31.370
Denn dieser Dekorator ist ein solches Werkzeug, das

05:31.370 --> 05:33.970
andere Entwickler verwenden müssen, indem sie es zu einer

05:33.970 --> 05:36.000
Klasse in diesem Beispiel hinzufügen.

05:36.000 --> 05:38.580
Andernfalls würde dies nichts bewirken.

05:38.580 --> 05:40.300
Deshalb stellen wir den Entwicklern

05:40.300 --> 05:43.490
zusätzliche Hilfsmittel zur Verfügung, die andere Entwickler

05:43.490 --> 05:46.590
nutzen können, um zum Beispiel etwas auf dem Bildschirm

05:46.590 --> 05:49.050
für eine Klasse zu rendern.

05:49.050 --> 05:50.590
Das ist dasselbe, was Angular hier macht, nur

05:50.590 --> 05:52.940
auf eine fortgeschrittenere Art und Weise, und das ist etwas, wofür

05:52.940 --> 05:54.220
sich Grader perfekt eignen.
