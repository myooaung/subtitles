WEBVTT

00:02.190 --> 00:03.570
-ーーこちらにもモジュールがあります｡ 

00:03.570 --> 00:07.540
なぜなら､ TypeScriptのモジュールについて学び､

00:07.540 --> 00:10.830
複数のファイルを接続する方法を学んでからでないと､

00:10.830 --> 00:13.400
本当に意味がないからです｡

00:13.400 --> 00:15.350
だから､ 今は無視しよう｡ 

00:15.350 --> 00:17.250
リブは面白いですけどね｡ 

00:17.250 --> 00:25.650
Libは､ TypeScriptが知っているデフォルトのオブジェクトや機能を指定するためのオプションである｡

00:25.650 --> 00:28.580
それは､ ドMと一緒に仕事をするようなことを意味しています｡ 

00:28.580 --> 00:33.700
インデックスで言ってみましょう｡  htmlにはボタンがあり､ このボタンに「クリックしてください」と書いてあります｡

00:33.700 --> 00:33.700
さて､

00:33.700 --> 00:35.100
このボタンをクリックすると､ メッセージが印刷されるだけです｡

00:35.100 --> 00:36.610
今､ アプリで｡  このボタンを選択することができます｡ 

00:36.610 --> 00:41.420
このボタンへのアクセスは､ ドキュメントで取得できます｡

00:41.420 --> 00:41.420
querySelector｡ 

00:43.808 --> 00:44.641
例えば､ 最初に見つけたボタンを選択する｡ 

00:44.641 --> 00:48.130
そうすれば､ これはうまくいくのです｡ 

00:48.130 --> 00:51.580
ここでは､ どのような種類のエラーも発生しません｡ 

00:51.580 --> 01:00.990
というのも､ TypeScriptはここにボタンがあるかどうかがわからないからだ｡

01:00.990 --> 01:08.860
今のところ､ この行の後に感嘆符を付けることで回避することができます｡

01:08.860 --> 01:11.320
これは基本的に､ TypeScriptに「大丈夫､ "こんなボタン

01:11.320 --> 01:13.667
"がありますよ」と伝えるものです｡

01:13.667 --> 01:15.097
"ここで価値を得る"｡  では､ ここにクリックイベントを追加してみましょう｡ 

01:15.097 --> 01:19.470
そして､ コンソールにあるような無名関数を探します｡

01:19.470 --> 01:19.470
ログがクリックされました｡ 

01:19.470 --> 01:21.670
さて､ ここで興味深いのは､ 感嘆符を付けなければならなかったということではなく､ 先ほども言ったように､

01:21.670 --> 01:29.310
tscを実行すると､ これがそのままコンパイルされてしまうということなのです｡

01:29.310 --> 01:34.840
さて､ TypeScriptはここでdocumentが不明であると文句を言うべきではないだろうか｡

01:34.840 --> 01:39.690
そのような文書､ 定数､ 変数が利用できることをどうやって知るのでしょうか？

01:39.690 --> 01:48.350
たとえそれが利用可能であっても､ querySelectorメソッドを持つオブジェクトを保持していることをどうやって知ることができるのでしょうか？

01:48.350 --> 01:51.690
ボタンがaddEventListenerメソッドを持つものであることをどうやって知るのでしょうか？

01:51.690 --> 01:55.932
TypeScriptはどうやってそのすべてを知っているのでしょうか？

01:55.932 --> 01:57.120
今､ あなたは「当然知っている」と言うかもしれません｡  なぜなら､ Vanilla JavaScriptではこれは有効なコードですが､

01:57.120 --> 02:03.290
TypeScriptのコードを書くときは､ 必ずしもブラウザのために書くのではないことを覚えておいてください｡

02:03.290 --> 02:05.580
Node.NETを書くことができる｡  jsアプリケーションをTypeScriptで作成した場合､

02:05.580 --> 02:11.310
確かにこれはすべてうまくいかないでしょう｡

02:11.310 --> 02:13.200
この動作の理由はこのlibオプションで､

02:13.200 --> 02:14.630
ご覧のようにここでは設定すらされていませんが､

02:14.630 --> 02:18.280
設定されていない場合はいくつかのデフォルトが想定されます｡

02:18.280 --> 02:31.536
設定されていない場合､ デフォルトはあなたのJavaScriptターゲットに依存し､ es6の場合､ デフォルトでes6でグローバルに利用可能なすべての機能を含んでいます｡

02:31.536 --> 02:33.270
例えば､ es6で利用可能なMapオブジェクト｡ 

02:33.270 --> 02:35.940
そのため､ Mapを使用しても文句を言われることはないでしょう｡ 

02:35.940 --> 02:40.120
つまり､ JavaScriptでグローバルに利用できるようになったes6の機能は､

02:40.120 --> 02:48.700
すべてTypeScriptでも利用できることを前提としているのです｡

02:50.677 --> 02:51.780
さらに､ すべてのDOM

02:51.780 --> 02:54.530
APIが利用可能であることが前提となっています｡

02:54.530 --> 02:57.070
これらのオプションについての詳しい説明は､

02:57.070 --> 03:01.740
このモジュールの最後の講義でリンクされている公式ボックスに記載されています｡

03:01.740 --> 03:04.550
つまり､ 長い話になるが､ libオプションが設定されていない場合､ いくつかのデフォルトが想定され､

03:04.550 --> 03:11.520
これらは通常､ ブラウザ上でTypeScriptを実行させるために必要なデフォルトとなる｡

03:11.520 --> 03:13.760
つまり､ DOM APIはすべてなくなってしまったのです｡ 

03:13.760 --> 03:16.030
これをコメントインして､ すべてをコンパイルすると､

03:16.030 --> 03:20.670
間違いなくエラーが発生します｡ なぜなら､ コメントインされたことで､

03:20.670 --> 03:24.780
デフォルトの設定がなくなったからです｡

03:24.780 --> 03:26.010
代わりに､ 「おい､ "いくつかのデフォルトのライブラリ

03:26.010 --> 03:30.370
"を入れてくれ､ デフォルトの型定義はこの配列で渡すから」と言うことになります｡

03:30.370 --> 03:36.330
そして､ ご覧の通り､ ここでは説明もパスも値も渡していません｡

03:36.330 --> 03:39.470
ですから､ 私が今TypeScriptに言っているのは､

03:39.470 --> 03:45.050
「おい､ すべてのデフォルトに関して､ これを考慮してくれ」ということです｡

03:45.050 --> 03:45.050
そして､ 何もないんです｡ 

03:45.050 --> 03:46.920
つまり､ コメントアウトされた場合のみ､ TypeScriptがいくつかのデフォルトを仮定するため､

03:46.920 --> 03:50.037
動作します｡

03:50.037 --> 03:55.300
明示的にデフォルトを設定すれば､ もちろんTypeScriptはここで設定したものに準拠する｡

03:55.300 --> 03:57.410
例えば､ ここでは､ ドキュメントも知らないし､

03:57.410 --> 03:59.740
コンソールも知らない｡

03:59.740 --> 04:02.680
そこで､ もう少し妥当な値を2つ設定し､

04:02.680 --> 04:07.343
コントロールスペースを押せば､ 自動補完されるようにします｡

04:08.900 --> 04:10.930
例えば､ そこにdomを追加することができます｡ 

04:10.930 --> 04:15.800
これは識別子で､ TypeScriptが理解できる定義済みの識別子がいくつかあります｡

04:15.800 --> 04:21.070
このオプションのドキュメントもこの講義に添付されています｡

04:21.070 --> 04:22.840
これはTypeScriptが理解する識別子で､ 基本的にTypeScriptのすべてのDOM

04:22.840 --> 04:30.100
APIをアンロックし､ TypeScriptがここでやっていることを理解できるようにするためのものだ｡

04:30.100 --> 04:35.150
さて､ すでにコンソールやドキュメントなど､ さまざまな機能があることがおわかりいただけたと思います｡

04:35.150 --> 04:37.040
つまり､ Next-Gen JavaScriptを扱うのだから､ es6オプションも追加して､

04:37.040 --> 04:45.400
TypeScriptがグローバルに利用可能なes6オプションをすべて理解できるようにしなければならないのだ｡

04:45.400 --> 04:50.830
そして､ ドムを加えるのもよいでしょう｡  iterableとscripthost｡

04:50.830 --> 05:02.530
ちなみに､ これはターゲットをes6に設定したときに得られるデフォルトのセットアップです｡

05:02.530 --> 05:05.250
つまり､ これをコメントインしてこのように設定すれば､

05:05.250 --> 05:09.980
libを全く指定しない場合と全く同じ動作になるわけです｡

05:09.980 --> 05:15.860
さて､ ここで私は､ しかし､ それをコメントし､ これでコンパイルすることにします｡

05:15.860 --> 05:17.959
また､ この設定は少し冗長ですが､

05:17.959 --> 05:20.920
何をするものなのかを説明したいと思います｡
