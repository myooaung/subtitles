WEBVTT

00:02.280 --> 00:04.510
Instrutor: Meio relacionado com o que você acabou de aprender

00:04.510 --> 00:06.483
sobre modificadores de acesso, é outro modificador.

00:07.572 --> 00:09.590
E esse é o modificador somente de leitura.

00:09.590 --> 00:11.310
Digamos que temos certos campos,

00:11.310 --> 00:14.220
que não devem ser apenas privados ou públicos,

00:14.220 --> 00:18.130
eles também não devem mudar após sua inicialização.

00:18.130 --> 00:21.410
Por exemplo, a identificação não deve mudar depois disso.

00:21.410 --> 00:23.520
Para deixar claro que não deve mudar, você pode

00:23.520 --> 00:25.670
acrescentar somente leitura aqui também.

00:25.670 --> 00:27.890
E você poderia ter acrescentado isso aqui também.

00:27.890 --> 00:30.920
Portanto, aqui você também teria escrito em privado, apenas para leitura.

00:30.920 --> 00:33.990
Agora a palavra-chave readonly, assim como privada e pública,

00:33.990 --> 00:35.710
é introduzida pelo TypeScript,

00:35.710 --> 00:37.920
ela não existe no JavaScript.

00:37.920 --> 00:39.910
Ele garante que se você tentar escrever

00:39.910 --> 00:43.180
para sua propriedade depois disso, você falhará.

00:43.180 --> 00:45.690
Então você só pode usá-lo uma vez durante a inicialização,

00:45.690 --> 00:48.620
mas depois, digamos que para o funcionário addEmployee,

00:48.620 --> 00:52.430
por qualquer razão, eu tento mudar a id para d2, você vê, recebemos um

00:52.430 --> 00:54.200
erro aqui, que eu não posso atribuir

00:54.200 --> 00:57.790
à id porque ela é somente leitura.

00:57.790 --> 01:00.800
Isto acrescenta alguma segurança extra para deixar realmente claro

01:00.800 --> 01:04.160
que uma determinada propriedade deve ser inicializada apenas uma vez e

01:04.160 --> 01:05.920
não deve mudar depois disso, uma exigência

01:05.920 --> 01:08.860
que você tem com bastante freqüência para certas propriedades

01:08.860 --> 01:10.240
em seus objetos.

01:10.240 --> 01:12.630
Portanto, isto pode acrescentar novamente segurança

01:12.630 --> 01:14.910
de tipo extra e deixar suas intenções muito claras.

01:14.910 --> 01:16.320
Claro, você sempre pode dizer,

01:16.320 --> 01:18.350
Bem, sou eu quem escreve o código, não

01:18.350 --> 01:20.470
vou fazer nada que não queira.

01:20.470 --> 01:23.060
Bem, ainda é bom ser muito claro quando você

01:23.060 --> 01:24.630
define seu código.

01:24.630 --> 01:28.320
Porque a, você pode esquecer o que queria fazer se parar de trabalhar

01:28.320 --> 01:31.280
em seu código por algumas semanas, ou seja lá o que for,

01:31.280 --> 01:32.270
e b, você pode estar

01:32.270 --> 01:34.340
trabalhando em equipe ou compartilhando

01:34.340 --> 01:36.550
seu código com outras pessoas.

01:36.550 --> 01:39.390
E geralmente é uma boa idéia escrever um código claro

01:39.390 --> 01:42.460
e explícito que deixe sua intenção muito clara.

01:42.460 --> 01:44.280
E só ler pode ajudá-lo lá, porque

01:44.280 --> 01:47.230
deixa muito claro qual é seu objetivo.

01:47.230 --> 01:49.570
Se dermos uma olhada no app. js, como mencionei,

01:49.570 --> 01:53.050
não vemos nem privado nem público, nem lido apenas,

01:53.050 --> 01:55.780
porque tudo só existe em TypeScript, não

01:55.780 --> 01:57.610
em JavaScript.

01:57.610 --> 02:01.420
Também vemos algo diferente que também é interessante,

02:01.420 --> 02:04.580
os métodos são acrescentados ao protótipo de nossa

02:04.580 --> 02:06.490
função construtora.

02:06.490 --> 02:08.830
Agora, para isso, você precisa saber o que são

02:08.830 --> 02:10.730
protótipos, e introduzi-los neste

02:10.730 --> 02:12.520
curso seria um pouco exagerado.

02:12.520 --> 02:14.140
Em anexo você encontra alguns recursos

02:14.140 --> 02:16.070
onde você pode mergulhar em protótipos.

02:16.070 --> 02:18.490
É uma parte importante do JavaScript, especialmente

02:18.490 --> 02:22.210
do JavaScript antes de termos aulas, e não custa nada entender

02:22.210 --> 02:24.670
protótipos se você é um desenvolvedor de

02:24.670 --> 02:26.490
JavaScript.

02:26.490 --> 02:29.030
Ainda aqui, não vou mergulhar mais fundo neles

02:29.030 --> 02:31.160
porque é um tópico puro de JavaScript,

02:31.160 --> 02:33.020
não específico do TypeScript.

02:33.020 --> 02:34.150
De fato, em TypeScript,

02:34.150 --> 02:36.510
normalmente trabalhamos menos com protótipos,

02:36.510 --> 02:38.780
porque podemos fazer mais com as aulas.

02:38.780 --> 02:42.560
E em relação a isso, temos outro conceito de classe importante,

02:42.560 --> 02:43.503
Herança.
