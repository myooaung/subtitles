WEBVTT

1
00:00:02.140 --> 00:00:03.620
<v ->So let's continue practicing with</v>

2
00:00:03.620 --> 00:00:06.220
these generic types because I know they can be strange

3
00:00:06.220 --> 00:00:08.305
to wrap your head around; In the end they're

4
00:00:08.305 --> 00:00:09.970
really straightforward though.

5
00:00:09.970 --> 00:00:12.180
Let's create an average generic function,

6
00:00:12.180 --> 00:00:14.810
count and print.

7
00:00:14.810 --> 00:00:19.810
Now this function should take some argument, some parameter.

8
00:00:20.330 --> 00:00:23.470
Let's name it element, but the name is really up to you

9
00:00:23.470 --> 00:00:26.530
which should be of a generic type.

10
00:00:26.530 --> 00:00:28.340
Because I really don't care about the type,

11
00:00:28.340 --> 00:00:30.380
at least in certain ways.

12
00:00:30.380 --> 00:00:33.400
So let's say we have one generic type in this function

13
00:00:33.400 --> 00:00:35.800
and our parameter is of that type.

14
00:00:35.800 --> 00:00:38.350
That's, by the way, all the typical for generic types.

15
00:00:38.350 --> 00:00:40.030
If you have a generic function,

16
00:00:40.030 --> 00:00:42.180
then often your parameter will be of that type.

17
00:00:42.180 --> 00:00:43.890
Doesn't have to be, but often

18
00:00:43.890 --> 00:00:45.890
that is how you work with generic functions,

19
00:00:45.890 --> 00:00:46.920
as you will see,

20
00:00:46.920 --> 00:00:49.080
as you get more and more experience with them.

21
00:00:49.080 --> 00:00:50.670
So here we got count and print

22
00:00:50.670 --> 00:00:52.350
with our generic type here,

23
00:00:52.350 --> 00:00:54.430
and element is of that type.

24
00:00:54.430 --> 00:00:56.500
Now what I want to return here

25
00:00:56.500 --> 00:01:00.300
is nienda tuple with two elements where the first element

26
00:01:00.300 --> 00:01:03.190
should be my element itself

27
00:01:03.190 --> 00:01:07.070
and the second element should be a description string.

28
00:01:07.070 --> 00:01:10.160
Maybe we name it count and describe, therefore.

29
00:01:10.160 --> 00:01:15.160
So here I got my description text, and here I'll say

30
00:01:15.410 --> 00:01:19.890
got no value, and I want to use that

31
00:01:19.890 --> 00:01:22.620
if we pass in an element which has no length.

32
00:01:22.620 --> 00:01:25.570
Because my idea with count and describe is that we can

33
00:01:25.570 --> 00:01:29.040
pass in an array or a string, and we get back the amount

34
00:01:29.040 --> 00:01:32.040
of characters or elements in that string or array.

35
00:01:32.040 --> 00:01:34.040
So if we got an empty string or an empty array,

36
00:01:34.040 --> 00:01:37.440
I wanna use got no value, but here if I check

37
00:01:37.440 --> 00:01:42.440
that element dot length is greater than zero,

38
00:01:43.210 --> 00:01:46.170
then I want to set the description text to

39
00:01:47.430 --> 00:01:52.430
got plus element dot length plus elements.

40
00:01:55.850 --> 00:01:58.100
You could be even more specific and check if the length

41
00:01:58.100 --> 00:02:03.100
is equal to one here, and then say got one element,

42
00:02:06.590 --> 00:02:11.590
else if element length is greater than one,

43
00:02:11.720 --> 00:02:13.750
we have description text

44
00:02:13.750 --> 00:02:18.750
equal got plus element length elements

45
00:02:18.990 --> 00:02:21.173
so that we got the plural form right.

46
00:02:22.850 --> 00:02:25.220
Now here, description text is there for the second

47
00:02:25.220 --> 00:02:27.040
element and return here. Now you already see

48
00:02:27.040 --> 00:02:29.480
types of complaints about the length here.

49
00:02:29.480 --> 00:02:32.350
Because it's not clear that element has a length.

50
00:02:32.350 --> 00:02:34.770
So maybe we should make it clear that it does.

51
00:02:34.770 --> 00:02:38.430
We could do so by creating a new interface or a custom type

52
00:02:38.430 --> 00:02:41.060
with the type keyword here and here I'll go for

53
00:02:41.060 --> 00:02:44.750
an interface which I'll name lengthy which in the end

54
00:02:44.750 --> 00:02:47.440
is just guaranteeing that we have an object with

55
00:02:47.440 --> 00:02:50.820
a length property which should yield a number in the end.

56
00:02:50.820 --> 00:02:52.870
And then here we can set a constraint and say

57
00:02:52.870 --> 00:02:54.740
that says T extends lengthy.

58
00:02:54.740 --> 00:02:57.710
So we know whatever we get, we'll have a length property

59
00:02:57.710 --> 00:03:01.053
and an array or a string would have a length property.

60
00:03:02.030 --> 00:03:07.030
Now here, I can console log count and describe

61
00:03:07.500 --> 00:03:11.240
and pass in, let's say, hi there.

62
00:03:11.240 --> 00:03:14.280
Now this works because a string has a length property.

63
00:03:14.280 --> 00:03:15.290
It's not a object.

64
00:03:15.290 --> 00:03:17.310
It's a string, but behind the scenes, Javascript

65
00:03:17.310 --> 00:03:19.980
kind of converts this to a object on the fly

66
00:03:19.980 --> 00:03:21.720
you could say and adds a length property

67
00:03:21.720 --> 00:03:23.940
when we need it. So therefore we can safely

68
00:03:23.940 --> 00:03:26.960
call it like this. Type script in first that here

69
00:03:26.960 --> 00:03:31.370
we return an array with either a string or type T

70
00:03:31.370 --> 00:03:33.580
element in there. Now I want to have a tuple

71
00:03:33.580 --> 00:03:36.060
so I'll be more specific here and set the return type

72
00:03:36.060 --> 00:03:39.110
to be basically an array with exactly two elements

73
00:03:39.110 --> 00:03:41.330
where the first element will be of type T

74
00:03:41.330 --> 00:03:43.850
and the second element will be of type string.

75
00:03:43.850 --> 00:03:46.270
So now I'm just saying that we return a tuple here

76
00:03:46.270 --> 00:03:49.360
where the first element will be, well, any element

77
00:03:49.360 --> 00:03:52.010
of our generic type, and the second element

78
00:03:52.010 --> 00:03:54.110
will be a string.

79
00:03:54.110 --> 00:03:56.820
Now, with that if we save this, is recompiled

80
00:03:56.820 --> 00:04:00.330
without errors and prints hi there, got nine elements

81
00:04:00.330 --> 00:04:02.330
because we got nine characters in there.

82
00:04:04.320 --> 00:04:06.890
We could also call this with an array

83
00:04:06.890 --> 00:04:09.530
where we have sports and cooking,

84
00:04:09.530 --> 00:04:12.460
and now you will see that we got got two elements

85
00:04:12.460 --> 00:04:15.990
as a description text, or with an empty array

86
00:04:15.990 --> 00:04:18.660
of course, in which case, if I save

87
00:04:18.660 --> 00:04:22.500
that we got no value, but we won't be able to call

88
00:04:22.500 --> 00:04:24.103
this, for example, with a number because a number

89
00:04:24.103 --> 00:04:26.333
doesn't have a length property and therefore

90
00:04:26.333 --> 00:04:28.090
this does not work.

91
00:04:28.090 --> 00:04:32.900
So, here again, we got our generic function.

92
00:04:32.900 --> 00:04:35.043
Idea is similar to the function before.

93
00:04:35.043 --> 00:04:38.680
We want to be a bit unspecific about the type of data

94
00:04:38.680 --> 00:04:40.540
we get here. We don't really care if it's

95
00:04:40.540 --> 00:04:43.180
a string, if it's an array, or anything else

96
00:04:43.180 --> 00:04:45.610
which a length property. We just care about

97
00:04:45.610 --> 00:04:47.930
that it does have a length property

98
00:04:47.930 --> 00:04:49.980
and then we want to do something with it

99
00:04:49.980 --> 00:04:51.970
because we rely on the length property

100
00:04:51.970 --> 00:04:53.540
in our code, so we need to guarantee

101
00:04:53.540 --> 00:04:55.370
that we got that, but other than that,

102
00:04:55.370 --> 00:04:57.330
we really have no interest in which type of data

103
00:04:57.330 --> 00:04:59.490
we're getting here. I don't want to lock this down

104
00:04:59.490 --> 00:05:01.820
to a string or to an array, and I don't want

105
00:05:01.820 --> 00:05:04.220
to create a bunch of overloads to handle

106
00:05:04.220 --> 00:05:05.830
all the different possible types.

107
00:05:05.830 --> 00:05:08.124
I also don't want to create a very long union type

108
00:05:08.124 --> 00:05:10.970
here because I might forget types which have

109
00:05:10.970 --> 00:05:13.610
a length property, or if I create my own object

110
00:05:13.610 --> 00:05:16.220
with a length property, I might not allow for it

111
00:05:16.220 --> 00:05:18.640
if I restrict this here to be of type,

112
00:05:18.640 --> 00:05:21.580
string and array or anything like that.

113
00:05:21.580 --> 00:05:23.500
So therefore, I want to be more flexible

114
00:05:23.500 --> 00:05:25.380
and with generic types we can be that,

115
00:05:25.380 --> 00:05:27.550
we don't care about the exact type.

116
00:05:27.550 --> 00:05:30.080
Here, thanks to the constraint, I only care about

117
00:05:30.080 --> 00:05:33.363
the fact that it has a length property.

