WEBVTT

00:02.340 --> 00:04.020
Instructeur : Nous avons presque fini

00:04.020 --> 00:06.240
avec les bases de TypeScript et les types de base.

00:06.240 --> 00:10.130
Il existe deux autres types qu'il est bon de connaître,

00:10.130 --> 00:13.170
car ils sont importants de temps en temps.

00:13.170 --> 00:16.603
Le premier type est le type inconnu.

00:17.860 --> 00:20.350
Pour cela, je vais nommer ce fichier vos fonctions. ts et ajouter une nouvelle

00:20.350 --> 00:23.343
application. ts et dans ce fichier,

00:24.290 --> 00:28.620
disons que nous avons une nouvelle variable, userInput,

00:28.620 --> 00:32.143
et qu'elle est de type inconnu.

00:32.143 --> 00:34.850
Il n'est pas de type any, qui serait le type par défaut,

00:34.850 --> 00:36.690
mais unknown, qui est un type différent

00:36.690 --> 00:38.500
introduit par TypeScript.

00:38.500 --> 00:40.950
Elle peut être inconnue parce que nous ne savons pas encore ce

00:40.950 --> 00:42.950
que l'utilisateur va éventuellement saisir.

00:42.950 --> 00:45.593
Si c'est un nombre, si c'est une chaîne, on ne sait pas.

00:46.770 --> 00:48.960
Ce qui est intéressant avec le type inconnu,

00:48.960 --> 00:51.020
c'est que nous pouvons y stocker n'importe

00:51.020 --> 00:54.630
quelle valeur sans obtenir d'erreur, donc tout est permis.

00:54.630 --> 00:57.660
Si je compile maintenant mon fichier ici, vous voyez que

00:57.660 --> 01:00.290
je n'obtiens aucune erreur de compilation.

01:00.290 --> 01:01.910
Donc, jusqu'à présent, c'est la même

01:01.910 --> 01:03.820
chose que si nous n'avions pas assigné de

01:03.820 --> 01:05.260
type ici, et donc nous avons le

01:05.260 --> 01:08.610
type any ou si nous avions explicitement défini any comme type.

01:08.610 --> 01:11.810
Mais quand même, l'inconnu est différent de tout.

01:11.810 --> 01:15.430
Cela fonctionne, mais nous aurons des problèmes

01:15.430 --> 01:19.660
si j'ai une autre variable, disons userName, qui doit être

01:19.660 --> 01:20.890
une chaîne.

01:20.890 --> 01:22.860
Et c'est non initialisé ici,

01:22.860 --> 01:27.200
mais alors ici je veux mettre userName égal à userInput.

01:27.200 --> 01:29.150
Maintenant vous voyez que nous avons une erreur.

01:29.150 --> 01:33.010
Le type inconnu n'est pas assignable au type string.

01:33.010 --> 01:34.590
Ainsi, userName veut une chaîne de caractères

01:34.590 --> 01:37.990
et, bien sûr, unknown n'est pas garanti comme étant une chaîne de caractères.

01:37.990 --> 01:41.620
Ici, j'en ai attribué un, mais c'est juste le cas dans cette ligne.

01:41.620 --> 01:44.460
userInput peut techniquement contenir n'importe quelle

01:44.460 --> 01:46.490
valeur car elle est inconnue.

01:46.490 --> 01:47.640
Maintenant, ce qui est intéressant,

01:47.640 --> 01:51.060
c'est que si je passe de unknown à any, cette erreur disparaît parce que

01:51.060 --> 01:53.900
any est le type le plus flexible de TypeScript et il désactive

01:53.900 --> 01:56.810
fondamentalement toute vérification de type et TypeScript

01:56.810 --> 02:00.950
dit simplement : "J'abandonne, faites ce que vous voulez. Inconnu est un peu plus restrictif que n'importe quel autre.

02:00.950 --> 02:05.510
Avec unknown, nous devons d'abord vérifier le type qui est actuellement

02:05.510 --> 02:08.820
stocké dans userInput avant de pouvoir l'affecter,

02:08.820 --> 02:12.200
par exemple, à une variable qui veut une chaîne de

02:12.200 --> 02:14.400
caractères.

02:14.400 --> 02:16.180
Ainsi, puisqu'une chaîne est souhaitée

02:16.180 --> 02:18.110
ici, nous pourrions vérifier si le type

02:18.110 --> 02:23.110
de userInput est égal à string et TypeScript détectera cette vérification et comprendra qu'ici,

02:23.650 --> 02:26.020
ce qui est stocké dans userName parce qu'il se

02:26.020 --> 02:29.790
termine par cette instruction if, où je vérifie que userInput est de type

02:29.790 --> 02:31.830
string, userInput est garanti comme étant

02:31.830 --> 02:34.680
une chaîne et donc je peux l'affecter en toute sécurité

02:34.680 --> 02:36.920
à userName.

02:36.920 --> 02:39.990
Ainsi, j'ai besoin d'un contrôle de type supplémentaire

02:39.990 --> 02:42.670
ici avec unknown pour être en mesure d'affecter

02:42.670 --> 02:47.560
une valeur inconnue à une valeur avec un type fixe et donc unknown est le meilleur

02:47.560 --> 02:50.530
choix par rapport à n'importe quel type si vous savez

02:50.530 --> 02:54.780
que je ne peux pas dire exactement quel type de magasin là-dedans, il pourrait

02:54.780 --> 02:56.930
être un nombre, il pourrait être une

02:56.930 --> 02:59.450
chaîne, mais je sais ce que je veux faire avec

02:59.450 --> 03:02.910
elle éventuellement.

03:02.910 --> 03:05.470
Eh bien, il suffit d'ajouter une vérification supplémentaire

03:05.470 --> 03:07.440
pour s'assurer que ce que vous voulez faire peut

03:07.440 --> 03:10.240
être fait, de sorte que si vous voulez travailler avec une chaîne,

03:10.240 --> 03:12.160
vous avez une chaîne, et vous êtes bon.

03:12.160 --> 03:14.690
Et puis l'inconnu est meilleur que tout parce

03:14.690 --> 03:18.720
qu'il garantit que vous n'êtes pas autorisé à tout faire mais que vous avez

03:18.720 --> 03:20.930
au moins un certain type de contrôle.

03:20.930 --> 03:23.260
Bien sûr, si vous avez une chance de savoir à l'avance

03:23.260 --> 03:25.990
que userInput est toujours une chaîne, ou toujours une

03:25.990 --> 03:28.150
chaîne ou un nombre, alors vous devriez utiliser

03:28.150 --> 03:30.000
string ou un tel type d'union au lieu

03:30.000 --> 03:31.680
de unknown.

03:31.680 --> 03:34.460
Ainsi, le type inconnu est encore un type que vous ne devriez pas utiliser

03:34.460 --> 03:36.010
tout le temps, mais il est meilleur que tout

03:36.010 --> 03:37.460
autre pour les raisons décrites.
