WEBVTT

00:02.170 --> 00:04.780
-: Het doel is dus om een to-do list component te bouwen

00:04.780 --> 00:06.330
en daarom voeg ik hier in de bronmap

00:06.330 --> 00:08.600
een nieuwe submap toe, components, en daarin

00:08.600 --> 00:11.280
een "to-doList. tsx" bestand, dat mijn

00:11.280 --> 00:13.690
to-do list component zou bevatten.

00:13.690 --> 00:15.370
Nu, om een react component te bouwen,

00:15.370 --> 00:17.030
moeten we React importeren van

00:17.030 --> 00:20.250
"react" anders zal JXS niet werken in dit bestand.

00:20.250 --> 00:22.820
Dan maak ik mijn to-do list constant, die een pijlfunctie

00:22.820 --> 00:24.530
opslaat en natuurlijk hoeft dit

00:24.530 --> 00:26.990
geen pijlfunctie te zijn, je kunt ook een functie

00:26.990 --> 00:30.320
gebruiken met het function keyword.

00:30.320 --> 00:33.160
Nu gaan we dit exporteren.

00:33.160 --> 00:36.500
Laten we nu onze extra typescript functies gebruiken, en laten we het type hiervan

00:36.500 --> 00:39.370
instellen op reageren. fc om aan te geven dat dit

00:39.370 --> 00:42.010
geen gewone functie moet zijn, maar een

00:42.010 --> 00:43.950
functionele component.

00:43.950 --> 00:46.920
Daarom krijgen we een foutmelding omdat we niet iets terugsturen

00:46.920 --> 00:49.790
dat in aanmerking komt als een react-element.

00:49.790 --> 00:53.250
Dus hier moeten we, laten we zeggen, een ongeordende lijst teruggeven.

00:53.250 --> 00:54.850
Omdat ik hier een lijst wil weergeven,

00:54.850 --> 00:58.000
is het zinvol om voorlopig een ongeordende lijst terug te geven.

00:58.000 --> 01:02.740
Nu wil ik op die ongeordende lijst lijst items uitvoeren.

01:02.740 --> 01:07.230
Dus hier zouden we onze to-dos kunnen verwachten, en dat is een array,

01:07.230 --> 01:09.240
en in een array hebben we een object

01:09.240 --> 01:11.690
waar elk item een ID heeft.

01:11.690 --> 01:15.627
Laten we zeggen t1 voor to-do één en een tekst

01:15.627 --> 01:18.100
als "Beëindig de cursus. Dit is slechts één object, maar natuurlijk zou je meerdere

01:18.100 --> 01:18.933
van dergelijke objecten

01:18.933 --> 01:20.800
in deze array kunnen hebben.

01:20.800 --> 01:22.010
Hier in onze lijst kunnen we dan dynamisch

01:22.010 --> 01:24.620
to-dos uitvoeren en ze in kaart brengen in een lijst met lijstitems.

01:24.620 --> 01:29.620
Dus hier gaan we door alle to-dos, dit is een ingebouwde JavaScript-functie,

01:30.250 --> 01:32.930
natuurlijk, de map-functie, en we

01:32.930 --> 01:35.070
geven een lijstitem terug voor

01:35.070 --> 01:37.740
elk element in deze array en in dat

01:37.740 --> 01:41.530
lijstitem stel ik "to-do. tekst" als inhoud op het lijstitem en voeg deze speciale

01:41.530 --> 01:45.570
key prop toe, die React eigenlijk

01:45.570 --> 01:47.870
wil op herhaalde elementen die naast

01:47.870 --> 01:49.620
elkaar zitten.

01:49.620 --> 01:51.980
Hier moeten we iets unieks kiezen en de ID moet

01:51.980 --> 01:54.130
een unieke identificatie zijn.

01:54.130 --> 01:57.710
Daarmee maken we een lijst van to-dos.

01:57.710 --> 02:00.470
Laten we nu de to-do list component integreren in

02:00.470 --> 02:02.860
de app component en daarvoor kunnen we natuurlijk

02:02.860 --> 02:05.520
naar de app component gaan, "TodoList" importeren

02:05.520 --> 02:06.930
uit ". /components/TodoList"

02:06.930 --> 02:11.530
zoals dit, de ". tsx" extensie zal automatisch worden toegevoegd door de bouwworkflow

02:11.530 --> 02:14.350
die we hier onder de motorkap gebruiken.

02:14.350 --> 02:17.160
En dan hier binnen onze div, kunnen we "TodoList"

02:17.160 --> 02:18.850
zo weergeven.

02:18.850 --> 02:21.440
Als we dit nu opslaan en teruggaan naar de lopende

02:21.440 --> 02:24.190
pagina, zien we hier deze ene to-do.

02:24.190 --> 02:25.870
De styling is verschrikkelijk en we kunnen

02:25.870 --> 02:29.350
later een betere styling toevoegen, maar voor het moment moet dit goed zijn.

02:29.350 --> 02:31.680
Dit is echter niet echt realistisch.

02:31.680 --> 02:35.620
Als we deze to-do lijst app bouwen, wil ik later nieuwe to-dos

02:35.620 --> 02:37.950
kunnen toevoegen met een aparte component

02:37.950 --> 02:40.063
die we nog niet hebben.

02:40.063 --> 02:42.920
En we zullen waarschijnlijk de to-dos

02:42.920 --> 02:45.570
hier in deze app component beheren

02:45.570 --> 02:48.810
omdat we hier een component hebben die to-dos

02:48.810 --> 02:53.020
toevoegt en die component zal terug kunnen praten met

02:53.020 --> 02:55.280
deze app component.

02:55.280 --> 02:56.690
Hier beheren we dan onze array

02:56.690 --> 02:59.650
van to-dos en we voegen to-dos toe aan die array of we verwijderen

02:59.650 --> 03:01.510
to-dos uit die array.

03:01.510 --> 03:04.220
Naar de takenlijst geven we dan die array door.

03:04.220 --> 03:06.930
Dus, ook al beheren we het nog niet, we zouden die "todo's"

03:06.930 --> 03:09.270
array waarschijnlijk niet in de to-do lijst

03:09.270 --> 03:11.660
hebben, maar in de app component.

03:11.660 --> 03:15.010
Dat is realistischer dat deze array later hier terecht komt, dus kunnen we

03:15.010 --> 03:16.740
hem alvast hierheen verplaatsen.

03:16.740 --> 03:20.093
Nu moeten we het doorgeven aan "TodoList. Hiervoor kunnen we natuurlijk rekwisieten gebruiken.

03:20.930 --> 03:23.600
Dus op de takenlijst zou je een items prop kunnen

03:23.600 --> 03:25.640
hebben, de naam is natuurlijk aan ons

03:25.640 --> 03:28.370
omdat we deze component definiëren, we kunnen bepalen

03:28.370 --> 03:30.350
hoe de prop moet heten.

03:30.350 --> 03:32.100
We kunnen onze "todo's" matrix invoeren.

03:32.100 --> 03:35.010
Nu zien we al dat de IDE dit niet leuk vindt en als ik dit probeer

03:35.010 --> 03:37.820
op te slaan, krijgen we ook een compilatiefout.

03:37.820 --> 03:40.650
We kregen een compilatiefout omdat

03:40.650 --> 03:45.400
eigenschap "items" niet bestaat op type whatever.

03:45.400 --> 03:47.830
Het bestaat dus eigenlijk niet op dit kruispunttype

03:47.830 --> 03:50.440
hier dat uiteindelijk de structuur van de door

03:50.440 --> 03:52.070
"TodoList. Want als je typescript gebruikt met

03:52.070 --> 03:55.300
React, moet je duidelijk zijn over de types waarmee je werkt.

03:55.300 --> 03:59.470
Dat betekent niet alleen dat je typescript vertelt dat dit een speciaal

03:59.470 --> 04:02.110
soort functie is, nee, het betekent ook dat

04:02.110 --> 04:05.250
als je vertrouwt op props in een of ander onderdeel,

04:05.250 --> 04:08.360
je typescript vertelt hoe deze props eruit moeten

04:08.360 --> 04:11.020
zien en hoe ze gestructureerd zijn.

04:11.020 --> 04:14.860
Dus in de takenlijst component, ontvangen we props

04:14.860 --> 04:17.420
hier, juist, dat is gewone React.

04:17.420 --> 04:19.400
En op de rekwisieten hebben we waarschijnlijk ons eigendom.

04:19.400 --> 04:23.530
Dus we hebben een prop met de naam "items"

04:23.530 --> 04:26.200
en dat is inderdaad wat ik hierboven

04:26.200 --> 04:30.323
zei: "Ik heb deze items prop. Het probleem is nu dat dit technisch wel zou werken, maar dat typescript

04:31.420 --> 04:33.430
nog niet afbreekt.

04:33.430 --> 04:35.067
We hebben typescript niet echt verteld dat

04:35.067 --> 04:37.140
onze prop hier een "items" eigenschap moet hebben.

04:37.140 --> 04:39.503
Om het te vertellen, kunnen we gebruik

04:39.503 --> 04:41.950
maken van het feit dat dit type functiecomponent

04:41.950 --> 04:45.063
hier eigenlijk een generiek type is.

04:45.063 --> 04:46.913
Een generiek type waar we alle extra props kunnen

04:47.840 --> 04:50.510
definiëren naast de standaard prop van kinderen, die elk component

04:50.510 --> 04:52.170
heeft, wat we hier verwachten.

04:52.170 --> 04:54.250
Dus we kunnen hier haakjes toevoegen

04:54.250 --> 04:58.132
en ons object dat de structuur beschrijft van dit "props" object

04:58.132 --> 05:00.710
dat we hier krijgen of, om onze code slanker

05:00.710 --> 05:03.670
te houden, doen we dit in een extra interface hier

05:03.670 --> 05:06.170
en dat is volledig optioneel.

05:06.170 --> 05:09.670
Dus hier kunnen we onze takenlijst rekwisieten hebben en dit

05:09.670 --> 05:12.350
beschrijft hoe onze rekwisieten eruit zien.

05:12.350 --> 05:15.120
En hier verwacht ik een "items" sleutel,

05:15.120 --> 05:18.260
waar we een array van objecten hebben waar elk

05:18.260 --> 05:20.510
object een ID heeft, wat een string

05:20.510 --> 05:23.380
is, en een tekst, wat een string is.

05:23.380 --> 05:26.120
Dat zijn de gegevens die we hier beheren.

05:26.120 --> 05:30.020
We hebben een array van objecten met een ID-string

05:30.020 --> 05:32.850
en een tekststring.

05:32.850 --> 05:34.370
Dat is wat ik verwacht te krijgen hier

05:34.370 --> 05:36.070
is "props" een array van zulke objecten

05:36.070 --> 05:38.940
en als we hier zijn, kunnen we nu wijzen naar deze to-do list props

05:38.940 --> 05:40.700
interface en nu is alles in orde. Nu begrijpt typescript

05:40.700 --> 05:42.670
dat we hier props krijgen,

05:42.670 --> 05:45.040
waar we een items prop hebben en dat

05:45.040 --> 05:48.640
deze items prop een array zal zijn waar we een ID sleutel

05:48.640 --> 05:52.145
en een tekst sleutel hebben

05:52.145 --> 05:55.000
op elk array element.

05:55.000 --> 05:56.920
Dus als we dit nu opslaan, compileert het,

05:56.920 --> 05:58.870
en krijgen we weer de werkende uitvoer.

05:58.870 --> 05:59.850
Dus nogmaals, dit is typescript in combinatie met React.

05:59.850 --> 06:02.390
We gebruiken het niet alleen om React of typescript te

06:02.390 --> 06:04.188
vertellen dat dit een functionele component

06:04.188 --> 06:06.830
is, maar ook over de props die deze component uiteindelijk

06:06.830 --> 06:10.000
krijgt en dit helpt ons veel met typeveiligheid.

06:10.000 --> 06:13.490
Het voorkomt dat ik hier per ongeluk denk dat

06:13.490 --> 06:15.130
het "todos" heet. Nee, dit wordt niet ondersteund, we krijgen een foutmelding.

06:15.130 --> 06:19.060
Het zijn items.

06:19.060 --> 06:21.165
Jullie zullen allemaal zien dat ze hier automatisch worden afgemaakt.

06:21.165 --> 06:23.330
Dus coderen wordt een stuk makkelijker als

06:23.330 --> 06:24.910
je hier met typescript werkt. En dat is natuurlijk het hele voordeel van typescript:

06:24.910 --> 06:27.160
het vereenvoudigt het coderen, het voorkomt onnodige fouten en zoals je ziet

06:27.160 --> 06:28.400
doet het dat ook in een react app.

06:28.400 --> 06:30.670
Maar we zijn natuurlijk nog niet klaar.

06:30.670 --> 06:34.420
Momenteel veranderen onze to-dos hier nooit

06:34.420 --> 06:36.640
en dat wil ik veranderen,

06:36.640 --> 06:39.930
ik wil een component waarmee we nieuwe

06:39.930 --> 06:44.120
to-dos kunnen toevoegen.

06:44.120 --> 06:46.080
Dus laten we daar nu aan werken.
