WEBVTT

00:02.440 --> 00:05.240
Narrator: Widzieliśmy, jak możemy budować całkiem

00:05.240 --> 00:08.120
niesamowite rzeczy z dekoratorami, fabrykami dekoratorów,

00:08.120 --> 00:11.740
a także poprzez wykorzystanie wartości zwracanych przez dekoratory,

00:11.740 --> 00:12.790
które w przykładach,

00:12.790 --> 00:14.930
dekorator klasy pozwala nam w zasadzie

00:14.930 --> 00:18.740
zastąpić klasę, do której dodaliśmy dekorator, klasą, która jest zupełnie

00:18.740 --> 00:21.400
inna, która opiera się na istniejącej klasie, jak

00:21.400 --> 00:23.900
w naszym przypadku i która w związku z tym może dodać

00:23.900 --> 00:27.230
pewne funkcjonalności.

00:27.230 --> 00:30.490
Teraz możesz zwrócić wartości również w innych dekoratorach,

00:30.490 --> 00:32.030
ale nie we wszystkich.

00:32.030 --> 00:35.430
Lub nie we wszystkich z nich wartość zwracana jest respektowana.

00:35.430 --> 00:38.150
Teraz dekoratorzy, w których możesz zwrócić coś,

00:38.150 --> 00:41.330
są dekoratorami, które możesz dodać do metod i dekoratorów,

00:41.330 --> 00:43.540
które dodajesz do accessorów.

00:43.540 --> 00:47.400
Więc tutaj na setterze log 2 i log 3 na metodzie te dwa

00:47.400 --> 00:51.210
dekoratory, log 2 i log 3 te również mogłyby coś zwrócić

00:51.210 --> 00:54.080
i TypeScript by to wykorzystał.

00:54.080 --> 00:58.040
Dekoratory na właściwościach i na parametrach oczywiście

00:58.040 --> 01:00.670
też mogą coś zwrócić, ale TypeScript

01:00.670 --> 01:02.500
to zignoruje.

01:02.500 --> 01:05.030
Tak więc wartości zwracane nie są tam obsługiwane

01:05.030 --> 01:07.700
lub nie są używane do dokładnego określenia.

01:07.700 --> 01:09.690
Teraz co można zwrócić na logu 3?

01:09.690 --> 01:12.680
Tak na dekoratorach metod i na logu 2, tak na

01:12.680 --> 01:15.320
dekoratorach accessorów jednak.

01:15.320 --> 01:19.320
Możesz zwrócić zupełnie nowy deskryptor właściwości.

01:19.320 --> 01:22.050
Log 2 i log 3, czyli te dwa dekoratory, o których

01:22.050 --> 01:23.110
mówię, tak?

01:23.110 --> 01:28.110
Dziennik 2 i dziennik 3, oba otrzymują deskryptor z właściwości, z metody,

01:28.170 --> 01:30.510
można powiedzieć, są dołączone.

01:30.510 --> 01:33.034
Ponieważ accessor jest jakby metodą,

01:33.034 --> 01:36.220
masz funkcję, która jest tam wykonywana.

01:36.220 --> 01:39.072
Teraz deskryptor właściwości jest rzeczą JavaScript,

01:39.072 --> 01:41.980
jak wiesz, jeśli spojrzymy na tę stronę ponownie

01:41.980 --> 01:44.500
i przeładujemy ją, zobaczymy, że na przykład

01:44.500 --> 01:47.260
dla naszego dekoratora accessor, deskryptor

01:47.260 --> 01:50.497
właściwości jest tym obiektem tutaj, który ma konfigurowalne

01:50.497 --> 01:54.910
i enumerowalne i get i set właściwości.

01:54.910 --> 01:57.660
A dla dekoratora metody naszym deskryptorem jest ten

01:57.660 --> 01:59.330
obiekt tutaj, który również posiada

01:59.330 --> 02:02.290
configurable, enumerable, value i writable.

02:02.290 --> 02:04.410
A to jest waniliowy JavaScript.

02:04.410 --> 02:07.830
Masz deskryptory właściwości również w vanilla JavaScript.

02:07.830 --> 02:11.710
Pozwalają one na bardziej szczegółowe zdefiniowanie danej właściwości.

02:11.710 --> 02:14.430
Możesz oczywiście przypisać wartość do właściwości,

02:14.430 --> 02:15.990
a ponieważ mówimy o metodzie,

02:15.990 --> 02:17.940
wartość jest w tym przypadku funkcją,

02:17.940 --> 02:20.010
ale możesz również kontrolować, czy jest

02:20.010 --> 02:22.910
ona zapisywalna, więc czy można ją zmienić po utworzeniu,

02:22.910 --> 02:24.700
po utworzeniu obiektu.

02:24.700 --> 02:25.950
Czy jest konfigurowalny, czyli

02:25.950 --> 02:27.140
czy można zmienić jego konfigurację

02:27.140 --> 02:29.570
i czy można usunąć tę właściwość.

02:29.570 --> 02:30.770
I jeśli jest enumerable,

02:30.770 --> 02:33.166
co oznacza, że jeśli pojawi się, gdy zapętlisz

02:33.166 --> 02:35.410
swój obiekt na przykład.

02:35.410 --> 02:36.810
I dlatego metoda na przykład

02:36.810 --> 02:38.790
domyślnie jest ustawiona na false,

02:38.790 --> 02:40.930
więc jeśli używasz pętli for in na obiekcie,

02:40.930 --> 02:44.040
ta metoda nie jest drukowana jako właściwość.

02:44.040 --> 02:45.240
Dla accessora mamy

02:45.240 --> 02:47.180
też configurable i enumerable,

02:47.180 --> 02:49.750
ale get i set i tam też można oczywiście

02:49.750 --> 02:53.040
zwrócić np. nowy deskryptor, który przypisuje

02:53.040 --> 02:56.180
zupełnie nową metodę set lub który nagle dodaje

02:56.180 --> 02:58.750
też funkcjonalność get.

02:58.750 --> 03:01.585
Tak więc tutaj w logu 2 i logu 3 możesz zwrócić

03:01.585 --> 03:05.190
nowy obiekt deskryptora na końcu i sprawić, że będzie

03:05.190 --> 03:08.020
to jasne dla TypeScript, zwracając lub ustawiając

03:08.020 --> 03:10.560
typ zwrotny na property descriptor

03:10.560 --> 03:14.860
i tam możesz zatem również ustawić słowo kluczowe set, słowo

03:14.860 --> 03:17.010
kluczowe get, właściwość configurable

03:17.010 --> 03:24.800
lub enumerable i zmienić, jak ten accessor lub metoda jest skonfigurowana.

03:24.800 --> 03:27.560
Teraz nie chcę tego robić tutaj dla accessora,

03:27.560 --> 03:29.800
nie ma nic ciekawego co mógłbym z nim

03:29.800 --> 03:32.520
zrobić dlatego nie zwrócę deskryptora właściwości,

03:32.520 --> 03:36.400
ale faktycznie pokażę przykład z dekoratorem metody gdzie

03:36.400 --> 03:42.533
zwrócimy coś i możemy budować ciekawe za pomocą dekoratorów.
