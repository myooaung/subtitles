WEBVTT

00:02.210 --> 00:04.200
Eğitmen: Bu temel kukla sunucuyu kurduk

00:04.200 --> 00:05.490
ve çalıştırdık, ancak

00:05.490 --> 00:08.380
bu sunucu elbette yararlı bir şey yapmıyor.

00:08.380 --> 00:11.430
Şimdi, çok basit bir rest API oluşturmak istediğimi söyledim

00:11.430 --> 00:13.110
ve bunun için kaynak klasöründe

00:13.110 --> 00:16.830
routes adını vereceğim yeni bir alt klasör oluşturacağım.

00:16.830 --> 00:19.870
Orada, bu rest API'sinin belirli bir rota kümesini işlemesi

00:19.870 --> 00:22.540
gereken bir dosya ekleyeceğim ve şimdi ne tür bir

00:22.540 --> 00:25.710
API oluşturmak istediğiniz size kalmış.

00:25.710 --> 00:28.520
Burada bir todo API'si oluşturacağım, TypeScript'te

00:28.520 --> 00:30.770
React bölümünü aldıysanız, bu size tanıdık

00:30.770 --> 00:32.140
geliyor çünkü orada da bir

00:32.140 --> 00:34.530
todo uygulaması oluşturduk, ancak bu o bölümden

00:34.530 --> 00:36.820
tamamen bağımsız, React ile birlikte çalışmayacak,

00:36.820 --> 00:41.250
elbette kendi başınıza da bağlayabilirsiniz, ancak burada TypeScript'in Node

00:41.250 --> 00:43.870
ve Express ile nasıl çalıştığını görmemiz için

00:43.870 --> 00:48.350
böyle basit bir todo API'si oluşturacağım.

00:48.350 --> 00:51.400
İnşa ettiğimiz uygulama çok karmaşık değil,

00:51.400 --> 00:54.760
ancak birçok ilginç kavram içerecek.

00:54.760 --> 00:57.080
Burada, bir todos ekleyerek todo

00:57.080 --> 01:01.800
rotalarımı ekleyeceğiz. ts dosyasını rotalar klasöründe ve orada, şimdi Express'i

01:01.800 --> 01:04.570
kullanmak istiyorum. js bazı rotaları

01:04.570 --> 01:06.630
kaydetmek için.

01:06.630 --> 01:09.730
Bunun için Express'ten bir şeyi içe aktaracağım

01:09.730 --> 01:13.700
ve bu şey artık aslında yönlendirici.

01:13.700 --> 01:16.160
Şimdi bunun için yaygın JS sözdizimi, tipik

01:16.160 --> 01:20.950
olarak require express kullanarak Express'i içe aktarmanız ve ardından yeni

01:20.950 --> 01:23.550
bir satırda, genellikle burada bunu yaptığımız

01:23.550 --> 01:25.673
kodu görmenizdir.

01:27.090 --> 01:28.180
Bu sizin yapabileceğiniz bir şey,

01:28.180 --> 01:30.130
ancak ben burada sadece bu şekilde içe aktaracağım.

01:31.130 --> 01:34.120
Şimdi bu bize bir yönlendirici verir ve burada Router'ı

01:34.120 --> 01:36.750
bir fonksiyon olarak çağırabiliriz ve bu da ara yazılımları

01:36.750 --> 01:39.300
kaydetmemize olanak tanır, yani sonuçta gelen

01:39.300 --> 01:41.980
istekler için uç noktaları yönlendirir ve daha sonra

01:41.980 --> 01:45.540
bu istekler üzerinde bazı mantıklar yürütürüz.

01:45.540 --> 01:48.980
Şimdi todo uygulaması için bazı temel rotalar kaydetmek istiyorum,

01:48.980 --> 01:53.700
yeni bir todo ekleyebileceğimiz slash nothing'de bir post rotası, bu yüzden burada bazı

01:53.700 --> 01:55.760
kodlara ihtiyacımız olacak, daha sonra

01:55.760 --> 01:58.860
bir yere bir todo ekleyen bazı fonksiyonlar, şimdilik sadece

01:58.860 --> 02:01.250
hiçbir kod belirtmeyeceğim, sadece burada genel

02:01.250 --> 02:03.380
olarak rotayı ayarlayın.

02:03.380 --> 02:05.110
Yani gönderi isteğimiz var,

02:05.110 --> 02:08.770
sonra bir get isteği, diyelim ki tüm todo'ları alalım,

02:08.770 --> 02:12.900
sonra da diyelim ki bir todo'yu güncellemek için yama isteği

02:12.900 --> 02:15.520
ve orada URL'de dinamik bir segment olan

02:15.520 --> 02:19.280
id'yi almayı bekliyorum ve sonra burada da bir todo'yu

02:19.280 --> 02:22.700
id'ye göre silmek için bir silme isteği.

02:22.700 --> 02:25.720
Bunlar benim rotalarım ve şimdi yapılandırılmış yönlendiriciyi

02:25.720 --> 02:28.620
bu dosyada varsayılan olarak dışa aktarabiliriz.

02:28.620 --> 02:30.930
Şimdi bu güzergahlarda hiçbir şey olmayacak, değil mi?

02:30.930 --> 02:32.510
Bir istek bu uç noktalara ulaştığında

02:32.510 --> 02:35.830
çalışacak herhangi bir işlev ayarlamadım, ancak en azından şimdi

02:35.830 --> 02:38.620
hangi rotaları istediğimizi biliyoruz, işlevleri

02:38.620 --> 02:41.740
daha sonra ikinci bir adımda ekleyeceğiz.

02:41.740 --> 02:44.100
Şimdilik, yönlendiriciyi buraya bağlayalım, yapılandırılmış rotaları

02:44.100 --> 02:48.320
burada uygulamada çalışan sunucumuza bağlayalım. 'den içe aktarıyoruz

02:48.320 --> 02:53.211
ve bunu yapmak için, diyelim ki todoRoutes'umuzu

02:53.211 --> 02:54.290
. /routes/todos.

02:56.040 --> 02:58.910
Bu yüzden todos'taki dışa aktarılan yönlendiriciyi uygulamaya

02:58.910 --> 03:01.610
aktarıyoruz. 'yi kullanmamız gerekiyor ve

03:01.610 --> 03:03.390
şimdi burada, app kullanarak onu çalışan

03:03.390 --> 03:08.340
Express uygulamamıza bağlamamız gerekiyor. kullanın ve sonra diyelim ki /todos

03:08.340 --> 03:10.800
ile başlayan tüm istekleri todoRoutes'umuza

03:10.800 --> 03:14.600
yönlendirmek istiyoruz, böylece farklı bir URL'yi hedefleyen

03:14.600 --> 03:18.703
istekler burada ele alınmayacaktır.

03:19.920 --> 03:23.730
İşleme demişken, burada kullandığımız Express ara yazılım kurulumunda,

03:23.730 --> 03:25.983
hataları işleyecek bir ara yazılım da kurabiliriz,

03:25.983 --> 03:29.030
yani kodumuzun herhangi bir yerinde atılabilecek herhangi

03:29.030 --> 03:33.610
bir hata ve bunu app ile yaparız.

03:33.610 --> 03:33.610
kullanırız

03:33.610 --> 03:37.470
ve sonra burada istek, yanıt ve bir sonraki işlevi aldığımız tipik bir

03:37.470 --> 03:40.640
ara katman işlevi kurarız ve yine bunların hepsi biraz Express

03:40.640 --> 03:48.330
bilmenizi gerektirir. js ve Node'u bilmek.

03:48.330 --> 03:48.330
js,

03:48.330 --> 03:51.160
ara yazılımın Express'te tam olarak nasıl çalıştığını ve ara yazılımın

03:51.160 --> 03:52.970
ne olduğunu anlatmayacağım.

03:52.970 --> 03:54.960
Yani Express'ten de bildiğiniz gibi bu normal bir

03:54.960 --> 03:57.150
ara katman işlevidir. js, ve muhtemelen

03:57.150 --> 03:59.050
bu fonksiyona bir alternatif

03:59.050 --> 04:02.310
olduğunu da biliyorsunuzdur, ilk parametrenin

04:02.310 --> 04:04.680
potansiyel bir hata olduğu dört parametre

04:04.680 --> 04:07.350
alan bir fonksiyon, ve şimdi bu bir hata

04:07.350 --> 04:10.720
işleme ara katman fonksiyonudur, bundan önceki

04:10.720 --> 04:13.530
herhangi bir ara katmanda bir hata varsa

04:13.530 --> 04:15.290
Express tarafından otomatik

04:15.290 --> 04:18.750
olarak ateşlenecektir.

04:18.750 --> 04:21.200
Bu benim hata işleme ara katman işlevim ve görüyorsunuz,

04:21.200 --> 04:23.380
burada bir sürü hatamız var.

04:23.380 --> 04:26.260
Bir sürü hata var çünkü bunların hepsi any tipinde ve

04:26.260 --> 04:29.030
ayrıca bu değerlerin hepsini kullanmıyoruz, ancak

04:29.030 --> 04:33.080
burada hangi tiplere sahip olduğumuzu açıkça belirtmeme izin verin.

04:33.080 --> 04:35.510
Bu Hata tipinde olacaktır, bu express

04:35.510 --> 04:39.890
tipinde olacaktır. Request, ya da burada Request'i import

04:39.890 --> 04:43.020
from express adında ekstra bir import olarak içe aktarabilirsiniz,

04:43.020 --> 04:46.670
bu aynı zamanda bizim yaptığımız gibi Express türlerini yüklediyseniz

04:46.670 --> 04:49.310
de çalışır, o zaman burada Response ve bir NextFunction

04:49.310 --> 05:06.680
da var ve sonra burada türlerimizi ayarlayabiliriz, bu artık Request türündedir, bu Response türündedir ve bu da isteğin sıradaki bir sonraki ara katmana yolculuğuna devam etmesine izin vermek için çalıştırabileceğimiz NextFunction'dır.

05:06.680 --> 05:08.590
Şimdi bu bizim hata işleme ara yazılımımız,

05:08.590 --> 05:10.820
diğer ara yazılımlarımızdan birinde

05:10.820 --> 05:13.030
bir hata olduğunda devreye girecek ve

05:13.030 --> 05:15.000
burada, diyelim ki JSON verileriyle

05:15.000 --> 05:17.690
bir hata mesajımızın olduğu bir yanıtı geri

05:17.690 --> 05:22.690
gönderebiliriz. mesajı ve belki de ayarladığımız

05:22.855 --> 05:24.630
yer, err. mesajını ve belki

05:24.630 --> 05:28.510
de 500 durum kodunu ayarladığımız yeri kastediyorum ve elbette, burada

05:28.510 --> 05:29.610
sahip olduğumdan daha

05:29.610 --> 05:32.460
ayrıntılı bir hata işleme işlevine sahip olabilirsiniz,

05:32.460 --> 05:35.020
ancak bununla birlikte, rotalarımızı ekledik,

05:35.020 --> 05:43.103
hata işleme ara yazılımımızı ekledik, neden şimdi bir sonraki derste bu API'ye biraz mantık eklemiyoruz?
