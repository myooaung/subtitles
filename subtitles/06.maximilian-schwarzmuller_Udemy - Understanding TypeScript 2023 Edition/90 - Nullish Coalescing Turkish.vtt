WEBVTT

00:02.300 --> 00:04.800
Eğitmen: Şimdi isteğe bağlı zincirleme ile gevşek bir şekilde

00:04.800 --> 00:06.930
ilişkili olarak, TypeScript'te nullish verilerle başa

00:06.930 --> 00:09.550
çıkmamıza yardımcı olan başka bir güzel özelliğimiz var.

00:09.550 --> 00:12.820
Ve bu özelliğe boş birleşme denir.

00:12.820 --> 00:15.900
Şimdi elinizde null veya tanımsız olup olmadığını

00:15.900 --> 00:17.530
ya da gerçekten geçerli bir

00:17.530 --> 00:19.830
veri parçası olup olmadığını kesin olarak

00:19.830 --> 00:23.320
bilmediğiniz bir veri, bir girdi olduğunu düşünün.

00:23.320 --> 00:28.180
Örneğin, userInput null olabilir diyelim.

00:28.180 --> 00:31.040
Şimdi, yine burada, bunu TypeScript'e sabit olarak

00:31.040 --> 00:33.580
kodlarız, dolayısıyla TypeScript bunun null

00:33.580 --> 00:36.500
olduğunu bilir, ancak bunu kesin olarak bilmediğiniz

00:36.500 --> 00:38.650
bir DOM API'si aracılığıyla getiriyorsanız

00:38.650 --> 00:42.970
veya bunu bir arka uçtan alıyorsanız, önceden bilmeyebilirsiniz ve TypeScript

00:42.970 --> 00:46.510
bunun null olup olmadığını bilmeyebilir.

00:46.510 --> 00:50.650
Daha sonra bunu storedData gibi başka bir sabit veya değişkende saklamak

00:50.650 --> 00:52.803
isterseniz, null olması durumunda

00:54.090 --> 00:56.150
bir yedek değer sakladığınızdan

00:56.150 --> 00:58.760
emin olmak isteyebilirsiniz.

00:58.760 --> 01:03.560
Şimdi bunu mantıksal VEYA operatörü ile yapabilirsiniz, burada bir varsayılanı

01:03.560 --> 01:05.330
depolarsınız, burada birincinin

01:05.330 --> 01:06.740
ikinci değeri tanımsız

01:06.740 --> 01:08.940
veya null ise, kesin olarak yanlışsa,

01:08.940 --> 01:11.550
bunu elde edersiniz.

01:11.550 --> 01:13.690
Bu yaklaşımla ilgili sorun, bu değer

01:13.690 --> 01:17.110
aslında null veya tanımsız değilse, ancak diyelim

01:17.110 --> 01:18.960
ki boş bir dizeyse, yanlış bir

01:18.960 --> 01:21.740
değer olarak değerlendirilir ve bu nedenle

01:21.740 --> 01:25.600
varsayılan, geri dönüş değeri devreye girer.

01:25.600 --> 01:28.850
Yani eğer teselli edersem. storedData'yı burada günlüğe kaydettiğinizde,

01:28.850 --> 01:31.700
bunun DEFAULT yazdırdığını göreceksiniz.

01:31.700 --> 01:33.430
Belki de istediğiniz budur

01:33.430 --> 01:36.540
ve bu durumda bu mükemmel bir çözümdür.

01:36.540 --> 01:38.800
Ancak, kullanıcı girdisini veya üzerinde çalıştığınız

01:38.800 --> 01:40.730
veriyi gerçekten null veya tanımsız olmadığı

01:40.730 --> 01:45.530
sürece saklamak istiyorsanız, başka bir yaklaşıma ihtiyacınız vardır çünkü burada bunu false

01:45.530 --> 01:48.970
olarak ele alır ve geri dönüşü kullanırız.

01:48.970 --> 01:51.720
Ancak belki de boş bir girdiyi sadece null veya

01:51.720 --> 01:54.370
undefined olarak tutmak istiyorsunuzdur.

01:54.370 --> 01:56.390
Bunun için TypeScript'in bir operatörü

01:56.390 --> 01:58.780
de vardır, çift soru işareti operatörü,

01:58.780 --> 02:02.210
buna nullish birleştirme operatörü denir.

02:02.210 --> 02:05.250
Bunun anlamı, eğer bu null veya undefined ise ve gerçekten

02:05.250 --> 02:06.730
sadece bu ise, boş bir dize

02:06.730 --> 02:09.180
değil, sıfır değil, gerçekten sadece null

02:09.180 --> 02:11.540
veya undefined ise, o zaman geri dönüşü

02:11.540 --> 02:13.370
kullanacağız.

02:13.370 --> 02:16.700
Eğer null veya undefined değilse, bu değeri kullanacağız.

02:16.700 --> 02:19.220
Buradaki senaryoda, bu derlenir ve gördüğünüz

02:19.220 --> 02:21.400
gibi boş dizeyi sakladık, dolayısıyla

02:21.400 --> 02:23.060
buraya hiçbir şey yazdırmıyorum,

02:23.060 --> 02:24.720
bu boş dizedir.

02:24.720 --> 02:26.060
Öte yandan, diyelim ki bu

02:26.060 --> 02:28.550
tanımsızsa ve bunu kaydedersem, şimdi DEFAULT

02:28.550 --> 02:30.400
yazdığını görüyorsunuz, çünkü bu

02:30.400 --> 02:32.980
çift soru işareti operatörü sayesinde, bu geri

02:32.980 --> 02:35.500
dönüşe geri dönüyoruz ve bu nedenle burada nullish

02:35.500 --> 02:38.320
veya tanımsız değerlerle zarafetle başa çıkmanıza

02:38.320 --> 02:40.580
yardımcı olabilecek çok kullanışlı bir

02:40.580 --> 02:42.773
özelliğimiz daha var.
