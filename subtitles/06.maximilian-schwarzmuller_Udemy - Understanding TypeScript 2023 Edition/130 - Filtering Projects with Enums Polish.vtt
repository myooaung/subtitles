WEBVTT

00:02.310 --> 00:03.940
Człowiek: Więc mamy dwa problemy,

00:03.940 --> 00:06.500
jeśli chcemy je tak nazwać, do naprawienia.

00:06.500 --> 00:07.820
Teraz chcę zacząć od kwestii,

00:07.820 --> 00:10.960
że projekty pokazują się w obu skrzynkach.

00:10.960 --> 00:13.050
Chcę wprowadzić pewne filtrowanie,

00:13.050 --> 00:15.980
a najlepszym miejscem do filtrowania jest oczywiście

00:15.980 --> 00:18.930
nasza funkcja listenera.

00:18.930 --> 00:22.743
Jeśli przejdziemy do miejsca, w którym rejestrujemy naszego

00:26.000 --> 00:29.170
listenera, tutaj w klauzuli listy projektów.

00:29.170 --> 00:32.270
Wtedy, tutaj, dostajemy a- listę projektów, prawda?

00:32.270 --> 00:36.170
Teraz ta lista projektów obejmuje wszystkie projekty.

00:36.170 --> 00:39.400
Teraz jednak, wewnątrz klauzuli listy projektów,

00:39.400 --> 00:43.140
interesują nas tylko projekty aktywne lub zakończone.

00:43.140 --> 00:44.250
Teraz, tutaj, przy

00:44.250 --> 00:49.103
okazji, moglibyśmy również teoretycznie użyć naszego enum, ale w rzeczywistości

00:50.660 --> 00:53.160
potrzebuję konkretnych wartości przechowywanych

00:53.160 --> 00:56.440
w enum tam na dole lub w typie tam na dole i dlatego tutaj

00:56.440 --> 00:58.990
nie chcę używać enum zawsze, ponieważ chcę

00:58.990 --> 01:02.180
pokazać literalne typy ciągów.

01:02.180 --> 01:06.190
Tak więc, co zrobimy tutaj wewnątrz naszej funkcji listenera jest,

01:06.190 --> 01:08.690
zanim przechowamy projekty i renderujemy

01:08.690 --> 01:10.470
je, chcemy je filtrować.

01:10.470 --> 01:13.020
Więc tutaj mamy nasze odpowiednie projekty,

01:13.020 --> 01:16.660
można powiedzieć, i to jest oczywiście projekty filtrowane.

01:16.660 --> 01:19.070
Metoda filter jest domyślną metodą, która

01:19.070 --> 01:21.460
istnieje na każdej tablicy w JavaScript.

01:21.460 --> 01:23.690
Pobiera to funkcję, która następnie wykonuje

01:23.690 --> 01:26.820
się na każdym elemencie w tej tablicy projektów i kiedy ta funkcja

01:26.820 --> 01:29.660
tutaj zwraca wartość true, zachowujemy element w nowo

01:29.660 --> 01:30.940
utworzonej tablicy, która

01:30.940 --> 01:35.040
jest następnie przechowywana w odpowiednich projektach.

01:35.040 --> 01:38.130
Jeśli funkcja zwróci false, to upuszczamy element nie z oryginalnej

01:38.130 --> 01:39.770
listy, ale w nowej liście, która

01:39.770 --> 01:41.660
jest generowana i która jest przechowywana

01:41.660 --> 01:44.230
w odpowiednich projektach.

01:44.230 --> 01:46.600
Tak więc w tym miejscu musimy zwrócić true lub false w zależności

01:46.600 --> 01:48.810
od tego czy chcemy zachować projekt czy nie.

01:48.810 --> 01:52.430
A do tego oczywiście wystarczy spojrzeć na status.

01:52.430 --> 01:55.310
Status projektu jest enum i chcemy sprawdzić,

01:55.310 --> 01:59.070
czy status projektu jest równy statusowi projektu aktywnego,

01:59.070 --> 02:03.590
jeśli jesteśmy w aktywnej liście projektów, więc jeśli właściwość

02:03.590 --> 02:05.790
type jest aktywna, lub czy status

02:05.790 --> 02:07.940
projektu jest zakończony, jeśli

02:07.940 --> 02:12.270
jesteśmy w zakończonej liście.

02:12.270 --> 02:15.430
Więc tutaj faktycznie napiszę a- prawdziwe

02:15.430 --> 02:17.250
ciało funkcji poprzez zawijanie

02:17.250 --> 02:20.100
tego z nawiasami klamrowymi, nie używając

02:20.100 --> 02:23.480
skrótu strzałkowego funkcji i wtedy możemy sprawdzić,

02:23.480 --> 02:25.540
jeśli ten typ jest równy aktywny,

02:26.800 --> 02:31.480
to chcę zwrócić wynik tego sprawdzenia tutaj else i dlatego po prostu

02:31.480 --> 02:40.160
po tej instrukcji if, chcę zwrócić porównanie do statusu projektu zakończonego.

02:40.160 --> 02:42.220
Dzięki temu otrzymujemy nasze odpowiednie projekty,

02:42.220 --> 02:43.520
które możemy teraz przechowywać

02:43.520 --> 02:45.490
tutaj, w przypisanych projektach.

02:45.490 --> 02:47.070
Więc teraz zobaczmy, czy to działa.

02:47.070 --> 02:48.053
Jeśli przeładuję

02:49.310 --> 02:51.570
i dodamy tutaj projekt, to czy to

02:51.570 --> 02:52.743
działa?

02:54.950 --> 02:55.930
To działa i jak widać

02:55.930 --> 02:58.050
jest dodawane tylko do aktywnych projektów,

02:58.050 --> 03:00.020
a nie do zakończonych.

03:00.020 --> 03:02.390
Jednak jeśli dodam tutaj drugi projekt,

03:02.390 --> 03:04.740
nadal mamy tę duplikację trwającą.

03:04.740 --> 03:08.720
Teraz jest to związane z tym, jak renderujemy nasze projekty.

03:08.720 --> 03:10.520
Wewnątrz projektów renderowania

03:10.520 --> 03:13.430
zawsze przechodzimy przez wszystkie nasze elementy projektu

03:13.430 --> 03:15.090
i dołączamy je do listy.

03:15.090 --> 03:16.640
Problemem jest oczywiście

03:16.640 --> 03:19.900
to, że możemy mieć już wyrenderowany na ekranie

03:19.900 --> 03:21.950
element projektu.

03:21.950 --> 03:25.020
Najlepszym rozwiązaniem byłoby przeprowadzenie

03:25.020 --> 03:27.450
porównania, w którym sprawdziłbyś, co

03:27.450 --> 03:30.170
zostało już wyrenderowane i co musisz wyrenderować,

03:30.170 --> 03:31.730
aby uniknąć niepotrzebnego

03:31.730 --> 03:34.110
renderowania.

03:34.110 --> 03:35.760
Jednak uruchomienie tego porównania,

03:35.760 --> 03:38.440
patrząc na rzeczywisty DOM, również kosztuje sporo

03:38.440 --> 03:39.710
wydajności.

03:39.710 --> 03:43.100
Dla tego zastosowania tutaj, jest więc doskonale, aby po prostu

03:43.100 --> 03:45.250
wziąć nasz element listy i wyczyścić całą

03:45.250 --> 03:48.720
jego zawartość poprzez ustawienie wewnętrznego HTML na pusty ciąg,

03:48.720 --> 03:49.640
co oznacza, że pozbywamy

03:49.640 --> 03:53.710
się wszystkich elementów listy, a następnie renderujemy.

03:53.710 --> 03:56.350
Oznacza to, że za każdym razem, gdy dodajemy nowy projekt,

03:56.350 --> 03:58.470
renderujemy wszystkie projekty, ale na

03:58.470 --> 04:00.210
potrzeby tego projektu tutaj, dla

04:00.210 --> 04:01.670
tej aplikacji tutaj, jest to

04:01.670 --> 04:03.490
absolutnie w porządku.

04:03.490 --> 04:05.410
Więc teraz z tym, jeśli zapisaliśmy to,

04:05.410 --> 04:06.987
dajmy jeszcze jedną próbę.

04:06.987 --> 04:10.540
"Czy to działa? " to pierwszy projekt i teraz jeśli

04:10.540 --> 04:12.960
dodam tutaj kolejny projekt, to widzisz,

04:12.960 --> 04:14.530
że zostaje on dodany, ale drugi

04:14.530 --> 04:17.453
projekt nie zostaje ponownie dodany.

04:18.430 --> 04:21.870
Whoops i, teraz, tutaj dostałem (mumbles) błąd, bo opis nie

04:21.870 --> 04:23.540
był wystarczająco długi.

04:23.540 --> 04:26.230
Więc teraz wszystko działa, jak widać i renderujemy

04:26.230 --> 04:28.150
te projekty w sposób, w jaki powinny

04:28.150 --> 04:30.090
być renderowane, co oczywiście

04:30.090 --> 04:32.170
jest słuszne.

04:32.170 --> 04:35.050
A dzięki temu, aplikacja nie wygląda najgorzej.

04:35.050 --> 04:36.890
Jedną rzeczą, której brakuje,

04:36.890 --> 04:39.550
jest jakaś funkcja "przeciągnij i upuść" lub

04:39.550 --> 04:44.040
jakiś sposób na przeniesienie projektów z pierwszej listy do drugiej.

04:44.040 --> 04:45.180
Nie bardzo wychodzi

04:45.180 --> 04:46.930
nam też inna informacja, którą

04:46.930 --> 04:48.900
dostaliśmy, opis i ilość osób.

04:48.900 --> 04:50.750
Więc to też nie jest wspaniałe.

04:50.750 --> 04:54.980
I, mamy również trochę duplikacji kodu, gdy faktycznie mamy spojrzenie

04:54.980 --> 04:57.620
na listę projektów na tej klauzuli tutaj

04:57.620 --> 04:58.910
i na klauzuli wejściowej

04:58.910 --> 05:01.000
projektu.

05:01.000 --> 05:04.270
W obu mamy element szablonu, element hosta i element

05:04.270 --> 05:06.970
i mamy metodę attach i tak dalej.

05:06.970 --> 05:09.180
Tak więc, chcę poprawić kod tutaj i ponownie

05:09.180 --> 05:11.800
użyć niektórych kodów poprzez użycie dziedziczenia

05:11.800 --> 05:14.480
i użycie klauzuli bazowej, a następnie, chcę również

05:14.480 --> 05:16.850
utworzyć dedykowaną klauzulę dla każdej pozycji

05:16.850 --> 05:18.580
projektu, gdzie następnie po prostu

05:18.580 --> 05:20.340
instancjonujemy tę klauzulę pozycji

05:20.340 --> 05:22.200
projektu wewnątrz listy projektów

05:22.200 --> 05:23.725
zamiast dołączać pozycję listy

05:23.725 --> 05:27.050
ręcznie, jak to ma miejsce w tym przypadku, a następnie wewnątrz

05:27.050 --> 05:30.700
tej klauzuli 'to be created' pozycji projektu, ta część dołączania powinna

05:30.700 --> 05:34.540
się wydarzyć, a następnie chcę również wyprowadzić więcej informacji na

05:34.540 --> 05:40.540
temat pozycji projektu, w tym jej opis i liczbę przydzielonych osób.

05:40.540 --> 05:42.080
Pozostaje więc trochę pracy

05:42.080 --> 05:44.520
i zanim popracujemy nad elementem projektu

05:44.520 --> 05:47.120
w tej formie, w której chcę go mieć, upewnijmy

05:47.120 --> 05:48.660
się właściwie, że po pierwsze

05:48.660 --> 05:53.660
dodamy pewne dziedziczenie, aby nasza lista projektów i wejście projektu, lub pewne

05:53.800 --> 05:57.693
jego części, były bardziej wielokrotnego użytku.
