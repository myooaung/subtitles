WEBVTT

00:02.160 --> 00:06.060
Instructeur: Dus, wat kunnen we over validatie?

00:06.060 --> 00:10.450
Nou, misschien, laten we beginnen bij het gewenste eindresultaat.

00:10.450 --> 00:14.850
Mijn idee is dat we later een valideerfunctie hebben die nog

00:14.850 --> 00:17.950
niet bestaat, maar die we later hebben, waaraan

00:17.950 --> 00:21.230
ik de enteredTitle doorgeef, of eigenlijk een

00:21.230 --> 00:25.360
configuratieobject zou ik zeggen met als waarde de enteredTitle,

00:25.360 --> 00:30.300
dus het ding dat gevalideerd moet worden.

00:30.300 --> 00:33.260
Maar waar ik dan ook extra eigenschappen

00:33.260 --> 00:37.350
heb die de valideerfunctie vertellen hoe ze moeten

00:37.350 --> 00:39.130
valideren.

00:39.130 --> 00:43.210
Dus bijvoorbeeld, dat we required hier hebben ingesteld op waar,

00:43.210 --> 00:47.009
minLength ingesteld op vijf om vijf karakters af te dwingen,

00:47.009 --> 00:48.360
enzovoort.

00:48.360 --> 00:50.040
En dan doen we dit hier voor alle

00:50.040 --> 00:51.540
drie de ingangen, en valideren

00:51.540 --> 00:53.900
is een functie die true teruggeeft als het geldig

00:53.900 --> 00:56.620
is, en false als het niet geldig is, en uiteindelijk

00:56.620 --> 00:59.580
zouden we zoiets als dit kunnen hebben.

00:59.580 --> 01:04.580
Of enteredDescription en enteredPeople, dat zou ongeveer

01:04.790 --> 01:06.790
het idee zijn.

01:06.790 --> 01:09.210
Het is natuurlijk maar één manier om dit uit te voeren,

01:09.210 --> 01:11.703
maar het is een manier die mij nogal bevalt.

01:12.600 --> 01:15.320
Daarvoor zal ik bovenaan het

01:15.320 --> 01:19.470
bestand wat validatielogica toevoegen.

01:19.470 --> 01:22.380
En, nogmaals, er zijn vele manieren om dit te doen.

01:22.380 --> 01:24.390
Ik begin met het definiëren van

01:24.390 --> 01:27.840
de structuur van zo'n valideerbaar object.

01:27.840 --> 01:31.280
Dus dit object geven we door aan de valideerfunctie, omdat

01:31.280 --> 01:33.430
dit natuurlijk altijd een soortgelijke

01:33.430 --> 01:37.820
structuur moet hebben met een bepaalde hoeveelheid eigenschappen

01:37.820 --> 01:40.100
die er kunnen zijn en bepaalde typen

01:40.100 --> 01:42.410
eigenschappen, zodat de valideerfunctie

01:42.410 --> 01:44.950
ook echt weet waar hij mee werkt en op de juiste

01:44.950 --> 01:47.400
manier eigenschappen kan extraheren

01:47.400 --> 01:49.870
enzovoort.

01:49.870 --> 01:52.850
Ik begin dus met het definiëren van een interface.

01:52.850 --> 01:55.380
We kunnen ook voor een aangepast type gaan,

01:55.380 --> 01:56.550
helemaal aan jou.

01:56.550 --> 01:58.690
Aangezien ik de structuur van een object definieer,

01:58.690 --> 02:02.793
ben ik altijd een grotere fan van het definiëren van alleen een interface.

02:03.810 --> 02:06.700
Ik noem het hier Validatable, omdat

02:06.700 --> 02:09.940
het een valideerbaar object beschrijft,

02:09.940 --> 02:13.300
en het zal een waarde hebben die een string

02:13.300 --> 02:17.140
of ook een getal moet zijn.

02:17.140 --> 02:18.980
Het zal een vereiste prop hebben,

02:18.980 --> 02:21.240
die een Booleaanse waarde heeft, dus

02:21.240 --> 02:22.630
waar of onwaar.

02:22.630 --> 02:26.470
En laten we dan zeggen dat we minLength validatie ondersteunen,

02:26.470 --> 02:28.212
wat een getal moet zijn, maxLength

02:28.212 --> 02:30.220
wat een getal moet zijn, en ook

02:30.220 --> 02:32.510
als we een getal krijgen, een min en

02:32.510 --> 02:35.240
een max waarde.

02:35.240 --> 02:37.417
Het verschil met minLength en maxLength

02:37.417 --> 02:40.310
is dat dit de lengte van de string controleert, dit

02:40.310 --> 02:42.320
de waarde van het getal als het boven

02:42.320 --> 02:43.960
een bepaald getal of onder een

02:43.960 --> 02:46.010
bepaald maximum ligt.

02:46.010 --> 02:48.870
Dit zijn de eigendommen die ik wil steunen.

02:48.870 --> 02:50.470
Naast de waarde moeten ze

02:50.470 --> 02:52.140
echter allemaal optioneel

02:52.140 --> 02:54.410
zijn, wat we kunnen afdwingen door

02:54.410 --> 02:57.650
een vraagteken achter de namen te zetten.

02:57.650 --> 03:00.070
Het alternatief voor het gebruik van een vraagteken

03:00.070 --> 03:02.720
is overigens het toestaan van ongedefinieerde waarden.

03:02.720 --> 03:04.880
Het vraagteken doet eigenlijk hetzelfde.

03:04.880 --> 03:09.370
Er staat dat required ofwel een Boolean ofwel ongedefinieerd is.

03:09.370 --> 03:12.610
Dus nu hebben we de valideerbare interface.

03:12.610 --> 03:13.893
Wat kunnen we daarmee doen?

03:14.930 --> 03:17.893
Nou, met die interface gemaakt, kunnen

03:18.830 --> 03:21.330
we die functie maken, die valideerfunctie

03:21.330 --> 03:24.220
die ik zoek.

03:24.220 --> 03:27.410
Dat moet zo'n valideerbaar object opleveren.

03:27.410 --> 03:32.410
Dus ValidatableInput is van het type Validatable.

03:32.410 --> 03:33.450
Dat is mijn idee.

03:33.450 --> 03:36.400
Dus het krijgt een object dat deze structuur heeft.

03:36.400 --> 03:38.270
En nu kunnen we daarin controleren

03:38.270 --> 03:41.670
of al deze eigenschappen bestaan en dan de

03:41.670 --> 03:44.810
juiste validatie doen.

03:44.810 --> 03:46.150
Wat doen we dan precies

03:46.150 --> 03:48.200
in de valideerfunctie?

03:48.200 --> 03:49.033
Nou, uiteindelijk wil

03:49.033 --> 03:50.930
ik hier een variabele aanmaken, isValid, die

03:50.930 --> 03:52.330
in eerste instantie waar is.

03:52.330 --> 03:54.030
Dus de standaardaanname is dat

03:54.030 --> 03:55.510
wat we krijgen waar is.

03:55.510 --> 03:57.430
Maar we zetten het op false

03:57.430 --> 04:01.330
zodra tenminste één van onze controles faalt.

04:01.330 --> 04:03.480
En nu beginnen we met de eerste controle.

04:03.480 --> 04:06.410
Eens kijken of de valideerbare invoer

04:06.410 --> 04:08.220
hier, dit argument dat

04:08.220 --> 04:11.380
we krijgen, een vereiste prop heeft?

04:11.380 --> 04:13.260
Als dat niet ongedefinieerd is.

04:13.260 --> 04:16.490
Als dit is ingesteld, en als het dus waar is, betekent

04:16.490 --> 04:18.630
dit dat de waarde vereist is en

04:18.630 --> 04:20.630
niet leeg mag zijn.

04:20.630 --> 04:22.080
Dus nu kunnen we hier

04:22.080 --> 04:26.160
isValid gelijk stellen aan isValid en de manier waarop

04:26.160 --> 04:27.700
JavaScript werkt, zorgt

04:27.700 --> 04:30.550
ervoor dat de nieuwe waarde van isValid

04:30.550 --> 04:34.330
onwaar zal zijn als het ding na en onwaar is.

04:34.330 --> 04:36.870
Want als ten minste één van de twee dingen onwaar is,

04:36.870 --> 04:38.660
zal de totale waarde onwaar zijn.

04:38.660 --> 04:40.500
Nu isValid aanvankelijk

04:40.500 --> 04:44.070
waar, maar als het ding na de logische en operator

04:44.070 --> 04:46.300
onwaar is, isValid onwaar.

04:46.300 --> 04:48.700
En uiteindelijk zal ik isValid teruggeven.

04:48.700 --> 04:50.040
Dus wat voegen we

04:50.040 --> 04:53.550
nu toe na de twee ampersand-symbolen?

04:53.550 --> 04:57.290
Ik wil controleren of validatableInput. waarde, als die leeg

04:57.290 --> 04:58.170
is.

04:58.170 --> 05:00.530
En daarvoor kunnen we het trimmen

05:00.530 --> 05:04.210
en de lengte controleren, of niet?

05:04.210 --> 05:05.630
Het probleem is dat we niet

05:05.630 --> 05:07.510
weten of value een string is.

05:07.510 --> 05:09.090
Het is een string of een nummer.

05:09.090 --> 05:10.910
Het is dus niet gegarandeerd een string,

05:10.910 --> 05:12.140
en daarom is de trimmethode

05:12.140 --> 05:14.100
niet altijd beschikbaar.

05:14.100 --> 05:17.570
Nu zijn er verschillende manieren om dat te omzeilen.

05:17.570 --> 05:19.600
We zouden een typebewaking kunnen toevoegen, we zouden kunnen

05:19.600 --> 05:23.390
controleren of typeof valideerbareInvoer. waarde gelijk is aan string,

05:25.250 --> 05:30.250
en voer deze controle alleen uit als dat zo is.

05:30.920 --> 05:33.040
Maar eigenlijk zou dat een beetje overbodig zijn.

05:33.040 --> 05:36.120
Wat we hier kunnen doen is heel eenvoudig.

05:36.120 --> 05:37.257
We kunnen gewoon zeggen

05:37.257 --> 05:39.140
"wel, converteer het naar een string". Als het een nummer was, is het nu weer een string.

05:39.140 --> 05:41.370
Als het een string was, veranderde er niets.

05:41.370 --> 05:44.170
En daarmee doen we dit.

05:44.170 --> 05:45.900
Nu moet ik gewoon mijn controle hier

05:45.900 --> 05:47.950
toevoegen om te kijken of dat nul is.

05:47.950 --> 05:50.360
Of om precies te zijn, als het niet nul is.

05:50.360 --> 05:53.463
Dus als het niet nul is, zal dit waar

05:54.680 --> 05:56.810
opleveren, en isValid

05:56.810 --> 05:58.740
blijft waar.

05:58.740 --> 06:00.500
Als het nul is, dus als het een lengte

06:00.500 --> 06:02.760
van nul heeft, als het leeg is, zal dit false teruggeven

06:02.760 --> 06:04.940
en wordt isValid dus false.

06:04.940 --> 06:06.890
En we controleren dit alleen als

06:06.890 --> 06:08.280
de vereiste controle is

06:08.280 --> 06:11.190
gemarkeerd door vereist op waar te zetten.

06:11.190 --> 06:13.530
Dat is de eerste controle die ik hier wil uitvoeren.

06:13.530 --> 06:15.560
Het is natuurlijk niet de enige.

06:15.560 --> 06:17.660
We kunnen doorgaan en controleren of

06:17.660 --> 06:18.950
validatableInput. minLength is ingesteld,

06:18.950 --> 06:23.880
dan moet deze string die we krijgen een

06:23.880 --> 06:25.190
bepaalde minimale

06:25.190 --> 06:27.050
lengte hebben.

06:27.050 --> 06:28.780
Belangrijk is dat de string een bepaalde

06:28.780 --> 06:30.440
minimumlengte heeft.

06:30.440 --> 06:31.620
Het gaat hier niet om getallen, we

06:31.620 --> 06:33.600
controleren niet op een minimumwaarde van een getal.

06:33.600 --> 06:37.060
Dus hier kunnen we eigenlijk een typebewaking toevoegen,

06:37.060 --> 06:40.390
we kunnen het opnemen in deze controle, en controleren of

06:40.390 --> 06:42.320
typeof valideerbareInvoer. waarde gelijk

06:42.320 --> 06:46.910
is aan string.

06:46.910 --> 06:48.460
Als het niet zo is, hoeven we deze if-controle niet

06:48.460 --> 06:50.357
uit te voeren, want dan valt er niets te controleren.

06:50.357 --> 06:52.570
Als onze waarde een getal is, geven we hier niet om.

06:52.570 --> 06:55.330
Als we voor een getal een minimumlengte instellen,

06:55.330 --> 06:57.710
slaan we deze controle in principe over, omdat

06:57.710 --> 06:59.330
het weinig zin heeft.

06:59.330 --> 07:01.890
Als we echter een string hebben, en minLength

07:01.890 --> 07:03.420
is ingesteld, dan wil ik

07:03.420 --> 07:05.663
isValid gelijk stellen aan isValid

07:06.570 --> 07:10.053
en, en dan nogmaals, onze controle.

07:11.181 --> 07:12.600
En de controle

07:12.600 --> 07:16.580
hier is of validatableInput. waarde, waarvan we weten dat het een string is

07:16.580 --> 07:20.810
op dit punt, lengte, is groter

07:20.810 --> 07:24.070
dan valideerbare invoer. minlengte.

07:24.070 --> 07:28.520
Dus groter dan de waarde die hier is gedefinieerd.

07:28.520 --> 07:31.660
Nu hebben we een potentieel probleem hier, en zie je

07:31.660 --> 07:33.920
welk probleem dat zou kunnen zijn?

07:33.920 --> 07:36.163
Dit zou over het algemeen moeten werken, maar het zal mislukken

07:37.030 --> 07:38.630
als minLength op nul staat.

07:38.630 --> 07:42.210
De bedoeling van de ontwikkelaar om het op nul te zetten

07:42.210 --> 07:45.760
is waarschijnlijk niet om deze controle over te slaan,

07:45.760 --> 07:48.760
maar om te controleren of we wel de minimale lengte

07:48.760 --> 07:50.170
van nul hebben.

07:50.170 --> 07:51.960
Welnu, aantoonbaar is het een overbodige

07:51.960 --> 07:53.800
controle, omdat het in feite controleert

07:53.800 --> 07:55.850
of we wel iets hebben, wat we al doen met de vereiste

07:55.850 --> 07:57.260
controle.

07:57.260 --> 07:59.300
Dus het is geen groot probleem.

07:59.300 --> 08:01.330
Toch, als je hier superveilig wilt

08:01.330 --> 08:05.470
zijn, moeten we eigenlijk controleren of validatableInput.

08:05.470 --> 08:05.470
minLength is niet gelijk aan undefined.

08:05.470 --> 08:10.470
Of niet gelijk aan null, met

08:10.640 --> 08:14.910
een gelijkteken, dit omvat null en undefined,

08:14.910 --> 08:17.130
zo werkt JavaScript.

08:17.130 --> 08:18.890
Dit is een beetje veiliger, want nu

08:18.890 --> 08:20.470
zorgen we ervoor dat we deze controle

08:20.470 --> 08:23.010
altijd uitvoeren, zelfs als minLength is ingesteld

08:23.010 --> 08:25.140
op nul, wat een falsy waarde is.

08:25.140 --> 08:27.222
Nogmaals, je kunt betwisten of het zinvol

08:27.222 --> 08:29.740
is, omdat het in feite dezelfde controle is als daarboven,

08:29.740 --> 08:32.270
maar toch wil ik het hier uitvoeren.

08:32.270 --> 08:34.930
Dus dat is de minimumlengte.

08:34.930 --> 08:36.790
Nu kopieer ik dit, en doe eigenlijk hetzelfde

08:36.790 --> 08:38.130
voor maxLength.

08:38.130 --> 08:40.720
Dus maxLength wordt hier ook gecontroleerd,

08:40.720 --> 08:44.350
ook hier en ook alleen voor strings.

08:44.350 --> 08:46.870
En natuurlijk moeten we dit hier gewoon terugdraaien.

08:46.870 --> 08:49.280
We willen er zeker van zijn dat de lengte van

08:49.280 --> 08:52.380
de opgegeven waarde onder onze maximale lengte ligt.

08:52.380 --> 08:55.173
Nou, en nu krijgen we nog twee controles voor min

08:56.810 --> 08:58.760
en max waarde die alleen zin hebben

08:58.760 --> 09:00.160
voor een getal.

09:00.160 --> 09:03.310
Dus hier zal ik nog een controle toevoegen en kijken

09:03.310 --> 09:05.150
of validatableInput. min is niet gelijk

09:05.150 --> 09:08.280
aan nul.

09:09.720 --> 09:11.100
Nogmaals, ik controleer niet alleen op

09:11.100 --> 09:13.820
waarheidsgehalte, want dat zou problemen geven bij een waarde van nul.

09:13.820 --> 09:17.050
En dan controleer ik of het type valideerbare invoer. waarde gelijk is

09:17.050 --> 09:21.770
aan nummer.

09:21.770 --> 09:23.250
Want ik zie niet veel zin

09:23.250 --> 09:25.640
om dit te controleren op een string.

09:25.640 --> 09:26.760
Als je het wilt controleren op een string,

09:26.760 --> 09:28.020
kun je dit natuurlijk weglaten.

09:28.020 --> 09:29.680
Dan moet je er alleen voor zorgen dat

09:29.680 --> 09:32.120
je de waarde omzet in een getal wanneer je het gebruikt

09:32.120 --> 09:34.380
in de cheque die we gaan schrijven.

09:34.380 --> 09:35.970
De controle die we nu gaan schrijven, gebruikt

09:35.970 --> 09:37.220
opnieuw de oude waarde van isValid

09:37.220 --> 09:39.740
en combineert die met een nieuwe controle om die vervolgens

09:39.740 --> 09:41.500
weer op te slaan in isValid.

09:41.500 --> 09:44.000
En de nieuwe controle moet nu goed ons

09:44.000 --> 09:47.210
getal opnemen en controleren of het groter is

09:47.210 --> 09:48.730
dan de min-waarde.

09:48.730 --> 09:50.720
Dus hier controleer ik of validatableInput. waarde groter is dan valideerbare

09:50.720 --> 09:54.650
invoer. min.

09:54.650 --> 09:58.690
En nu kunnen we dit herhalen voor

09:58.690 --> 10:02.010
max, dus hier hebben we max nodig en hier ook max en

10:02.010 --> 10:06.190
we moeten dit hier veranderen in een kleiner dan symbool.

10:06.190 --> 10:10.363
Daarmee controleren we alle verschillende scenario's die je

10:11.920 --> 10:13.230
hier kunt hebben.

10:13.230 --> 10:16.930
En we sturen isValid terug.

10:16.930 --> 10:18.710
Nu moeten we alleen nog objecten maken die

10:19.840 --> 10:21.600
aan deze interface voldoen om ze vervolgens

10:21.600 --> 10:23.630
naar de valideerfunctie te sturen.

10:23.630 --> 10:26.573
Daarvoor gaan we naar project input, en

10:28.160 --> 10:31.360
daar in gatherUserInput wil ik mijn valideerbaar

10:31.360 --> 10:34.000
object construeren.

10:34.000 --> 10:36.360
Kanttekening, naast een interface hadden we hier

10:36.360 --> 10:38.420
natuurlijk ook een klasse kunnen maken, die

10:38.420 --> 10:40.870
we dan kunnen instantiëren met het nieuwe sleutelwoord,

10:40.870 --> 10:43.570
maar dat alles voor praktijk- en demodoeleinden hier wil

10:43.570 --> 10:46.070
ik laten zien hoe dit werkt met een interface.

10:46.070 --> 10:48.990
Dus hier hebben we onze titleValidatable,

10:48.990 --> 10:51.900
die van het type Validatable moet zijn.

10:52.850 --> 10:54.970
En dat is natuurlijk een object dat een

10:54.970 --> 10:56.830
waarde-eigenschap moet hebben.

10:56.830 --> 10:58.930
En dat is onze ingevoerdeTitel.

10:58.930 --> 11:01.020
Het heeft geen andere eigenschappen

11:01.020 --> 11:03.550
nodig, maar ik wil controleren of het niet

11:03.550 --> 11:06.750
leeg is, dus zetten we required op true.

11:06.750 --> 11:08.743
En dan kunnen we dat kopiëren en herhalen

11:09.710 --> 11:12.430
voor de beschrijving en voor mensen.

11:12.430 --> 11:16.270
En hier hebben we de beschrijving, whoops, de ingevoerde

11:16.270 --> 11:19.250
beschrijving bedoel ik.

11:19.250 --> 11:21.880
Hier hebben we de ingevoerde mensen.

11:21.880 --> 11:24.260
Om precies te zijn wil ik een nummer hebben.

11:24.260 --> 11:26.230
Dus ik zet dit om in een getal met een plusteken.

11:26.230 --> 11:29.020
Alles moet verplicht zijn, maar laten we ook hier

11:29.020 --> 11:30.810
zeggen dat de beschrijving een

11:30.810 --> 11:32.890
minLengte van vijf tekens moet hebben

11:32.890 --> 11:35.420
en voor de personen moet het minimum één zijn,

11:35.420 --> 11:38.823
zodat we minstens twee personen toegewezen krijgen.

11:39.820 --> 11:42.030
Het is overigens aan jou hoe je dit implementeert.

11:42.030 --> 11:44.020
Natuurlijk zou je in je validatielogica

11:44.020 --> 11:47.200
ook kunnen controleren op groter gelijk kleiner

11:47.200 --> 11:50.080
gelijk als je dat wilt.

11:50.080 --> 11:52.030
Hetzelfde voor de lengte natuurlijk.

11:52.030 --> 11:54.200
Groter gelijk, kleiner gelijk.

11:54.200 --> 11:56.940
Dat kan ook.

11:56.940 --> 11:58.660
Eigenlijk zal ik deze veranderingen behouden.

11:58.660 --> 12:00.520
Dus nu hebben we het minimum van één persoon toegewezen

12:00.520 --> 12:01.920
en een maximum van vijf.

12:01.920 --> 12:05.253
Nu hebben we deze drie valideerbare objecten en

12:06.100 --> 12:08.500
nu geven we hier, aan de valideerfunctie,

12:08.500 --> 12:11.680
onze titleValidatable door, aan de tweede functieaanroep

12:11.680 --> 12:16.440
geef ik de descriptionValidatable door, en aan de derde functieaanroep

12:16.440 --> 12:21.310
geef ik peopleValidatable door.

12:21.310 --> 12:24.460
En nu zou valideren waar moeten zijn als ze allemaal

12:24.460 --> 12:26.380
geldig zijn, en anders vals.

12:26.380 --> 12:29.480
Dus nu wil ik controleren of ten minste een van

12:29.480 --> 12:32.420
hen faalt door te controleren of deze allemaal

12:32.420 --> 12:36.580
onwaar zijn door er een uitroepteken voor te zetten, om te controleren

12:36.580 --> 12:38.970
of dit onwaar is of dit onwaar is of

12:38.970 --> 12:41.560
dit onwaar is.

12:41.560 --> 12:42.740
En als ten minste een van hen vals

12:42.740 --> 12:44.750
is, dus als ten minste een van de valideerfunctie-aanroepen

12:44.750 --> 12:45.730
vals is, maken we het daarin

12:45.730 --> 12:47.760
en tonen we de waarschuwing.

12:47.760 --> 12:49.860
En met dat uit de weg, om dit

12:51.930 --> 12:53.610
ook te testen, ga ik naar

12:53.610 --> 12:54.860
de index. html, want daar op de input

12:54.860 --> 12:56.270
voor mensen,

12:56.270 --> 12:58.210
sta ik eigenlijk een maximum van

12:58.210 --> 13:00.410
10 en een minimum van nul toe.

13:00.410 --> 13:01.460
Dus in de invoer kunnen we technisch gezien ongeldige waarden invoeren.

13:01.460 --> 13:05.120
Met opzet natuurlijk, zodat we onze logica kunnen

13:05.120 --> 13:06.240
testen.

13:06.240 --> 13:08.090
En daar voor nu alles opslaan,

13:08.090 --> 13:10.200
compileert zonder fouten.

13:10.200 --> 13:11.750
Laten we het nu eens proberen.

13:11.750 --> 13:13.083
Als ik op project toevoegen klik,

13:13.920 --> 13:16.000
krijg ik een foutmelding, wat goed is.

13:16.000 --> 13:17.430
Laten we nu een test invoeren, er is nog steeds een fout.

13:17.430 --> 13:21.370
Laten we test hier en vijf hier invoeren, en ik krijg

13:21.370 --> 13:24.180
nog steeds een foutmelding.

13:24.180 --> 13:25.390
Omdat mijn beschrijving te kort is.

13:25.390 --> 13:26.870
Als ik nog één karakter invoer

13:26.870 --> 13:28.160
heb ik wel de minimumlengte

13:28.160 --> 13:29.500
en kan ik dit maken.

13:29.500 --> 13:31.210
Dus laten we nu, laten we zeggen,

13:31.210 --> 13:32.640
min één mensen invoeren, en

13:32.640 --> 13:34.580
goed oké html ondersteunt dit niet.

13:34.580 --> 13:37.940
Maar laten we nul of zes invoeren en we krijgen

13:37.940 --> 13:39.200
fouten.

13:39.200 --> 13:42.040
En alleen als ik iets tussen één en vijf

13:42.040 --> 13:43.840
invoer werkt het.

13:43.840 --> 13:46.100
Dus dat lijkt te werken zoals

13:46.100 --> 13:49.260
het hoort, en dat is vrij goed.

13:49.260 --> 13:50.240
En dat is natuurlijk

13:50.240 --> 13:51.850
maar één manier van valideren.

13:51.850 --> 13:53.570
Maar een manier die nu eigenlijk heel

13:53.570 --> 13:56.510
herbruikbaar is, zou ook zo gebruikt kunnen worden in verschillende

13:56.510 --> 13:59.170
delen van de app en natuurlijk maakt het gebruik van typescript

13:59.170 --> 14:01.660
en biedt het ons geweldige ondersteuning en typecontrole

14:01.660 --> 14:04.480
om onnodige fouten te voorkomen.
