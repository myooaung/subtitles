WEBVTT

00:02.300 --> 00:03.830
Ausbilder: Wir arbeiten hier viel mit

00:03.830 --> 00:07.350
unserer Abteilung zusammen, und ich habe meine Buchhaltungsabteilung gegründet.

00:07.350 --> 00:09.610
Für die Anwendung, die wir erstellen, könnten

00:09.610 --> 00:12.120
wir natürlich Abteilungen benötigen, aber wir könnten

00:12.120 --> 00:14.320
mehr Informationen für die spezifischen Arten

00:14.320 --> 00:16.660
von Abteilungen benötigen.

00:16.660 --> 00:18.830
Wir haben z. B. eine IT-Abteilung,

00:18.830 --> 00:22.680
die eine ID hat, die einen Namen hat, die Mitarbeiter hat,

00:22.680 --> 00:24.900
die aber auch Administratoren hat,

00:24.900 --> 00:28.180
etwas, das nur die IT-Abteilung hat.

00:28.180 --> 00:30.340
Wir könnten eine Buchhaltungsabteilung

00:30.340 --> 00:34.280
haben, die ebenfalls eine ID, einen Namen und Mitarbeiter hat,

00:34.280 --> 00:37.470
aber auch, sagen wir mal, Berichte.

00:37.470 --> 00:41.030
Es wird eine Reihe von Berichten erstellt, und so weiter.

00:41.030 --> 00:44.541
Man könnte also einige Basiseigenschaften und auch Methoden haben, die

00:44.541 --> 00:46.970
alle Abteilungen haben sollten, aber dann könnten

00:46.970 --> 00:49.050
wir spezialisierte Versionen dieser Abteilungen

00:49.050 --> 00:51.900
mit ihren eigenen spezifischen Eigenschaften und Methoden

00:51.900 --> 00:54.660
haben, die nur diese Abteilung haben könnte.

00:54.660 --> 00:58.100
Eine Vererbung kann uns dabei helfen, so etwas zu realisieren.

00:58.100 --> 01:00.010
Wie können wir hier also die Vererbung nutzen?

01:00.010 --> 01:01.670
Nun, wir haben unsere Klassenabteilung.

01:01.670 --> 01:05.130
Lassen Sie uns nun diese spezialisierten Abteilungen einrichten.

01:05.130 --> 01:08.483
Hier könnten wir also eine erstklassige IT-Abteilung haben.

01:09.610 --> 01:14.010
Und in dieser Klasse hier möchte ich den Namen und die ID und die Mitarbeiter

01:14.010 --> 01:17.270
der allgemeinen Abteilung verwenden, aber ich möchte meine

01:17.270 --> 01:19.537
eigenen Funktionen hinzufügen.

01:19.537 --> 01:21.970
Jetzt können wir die Abteilungsklasse erben, indem wir

01:21.970 --> 01:24.270
hier das Schlüsselwort extends und dann die Klasse,

01:24.270 --> 01:25.970
die wir erben wollen, verwenden.

01:25.970 --> 01:27.530
In diesem Fall ist das die Abteilung.

01:27.530 --> 01:30.600
Wichtig ist, dass Sie nur von einer Klasse erben können,

01:30.600 --> 01:33.010
also nicht von mehreren Klassen, falls

01:33.010 --> 01:34.660
Sie das brauchen.

01:34.660 --> 01:38.070
Hier erbe ich also von der Abteilung, und eine Folge davon

01:38.070 --> 01:40.700
ist, dass ich, wenn ich hier eine IT-Abteilung

01:40.700 --> 01:44.560
erstelle, sie tatsächlich so aufrufen kann, mit dieser Art

01:44.560 --> 01:46.640
von Konstruktor, obwohl die Klasse

01:46.640 --> 01:49.400
IT-Abteilung leer ist.

01:49.400 --> 01:52.830
Wenn wir das speichern, sehen wir in der Tat, dass es wie vorher

01:52.830 --> 01:55.152
funktioniert, denn wenn wir von einer

01:55.152 --> 01:59.610
anderen Klasse erben, bekommt die Klasse, die erbt, automatisch alles, was

01:59.610 --> 02:02.870
die Basisklasse, in diesem Fall die Abteilung, hat, einschließlich

02:02.870 --> 02:06.072
ihres Konstruktors, also solange wir keinen eigenen

02:06.072 --> 02:11.072
Konstruktor für diese geerbte Klasse hinzufügen, also für diese Unterklasse, den

02:11.130 --> 02:14.760
Konstruktor der Basisklasse, also wird dieser Konstruktor

02:14.760 --> 02:17.830
automatisch verwendet, wenn wir unsere Unterklasse

02:17.830 --> 02:20.800
instanziieren.

02:20.800 --> 02:25.170
Also rufen wir am Ende auf magische Weise den Konstruktor der Basisklasse mit den

02:25.170 --> 02:27.562
Argumenten auf, die wir hier übergeben.

02:27.562 --> 02:30.350
Jetzt können wir aber unseren eigenen Konstruktor hinzufügen,

02:30.350 --> 02:33.570
indem wir den Konstruktor hier in der IT-Abteilung hinzufügen, und jetzt

02:33.570 --> 02:35.800
sehen Sie, dass ich Fehler bekomme.

02:35.800 --> 02:38.580
Zum einen sollten wir jetzt natürlich die Daten akzeptieren,

02:38.580 --> 02:40.850
die wir hier erhalten, obwohl wir argumentieren könnten,

02:40.850 --> 02:44.120
dass der Name nicht etwas ist, das wir hier eingeben müssen.

02:44.120 --> 02:46.430
Und es sollte auch nicht die Buchhaltung sein.

02:46.430 --> 02:49.110
Stattdessen kann hier der Name der Abteilung, da es

02:49.110 --> 02:52.563
sich um die Klasse der IT-Abteilung handelt, immer IT lauten.

02:53.700 --> 02:56.910
Ich möchte immer noch meine ID akzeptieren,

02:56.910 --> 03:01.130
aber jetzt möchte ich im Wesentlichen, dass genau wie der

03:01.130 --> 03:04.120
feste Name IT, an den Konstruktor der Abteilung

03:04.120 --> 03:06.420
weiterleiten.

03:06.420 --> 03:09.240
Und dafür gibt es ein spezielles Schlüsselwort, das wir verwenden können,

03:09.240 --> 03:11.120
und in diesem Fall müssen wir es auch verwenden.

03:11.120 --> 03:13.210
Und das ist super.

03:13.210 --> 03:15.580
Wenn Sie in einer Klasse, die von einer anderen

03:15.580 --> 03:18.400
Klasse erbt, einen eigenen Konstruktor hinzufügen,

03:18.400 --> 03:21.200
müssen Sie in der ererbenden Klasse super hinzufügen

03:21.200 --> 03:23.790
und ihn wie eine Funktion ausführen.

03:23.790 --> 03:28.070
Super ruft hier den Konstruktor der Basisklasse auf, also in

03:28.070 --> 03:31.300
diesem Fall den Abteilungskonstruktor.

03:31.300 --> 03:33.690
Und jetzt nimmt das andere Super die Argumente

03:33.690 --> 03:37.630
des Konstruktors der Elternklasse, die ID und den Namen.

03:37.630 --> 03:41.060
Hier kann ich also die ID weiterleiten, d.h. die ID, die ich hier

03:41.060 --> 03:44.360
erhalte, wird einfach an super übergeben, und ich kann einen

03:44.360 --> 03:46.860
Wert für den Namen hart codieren, wie IT.

03:46.860 --> 03:48.840
Dadurch wird nun der Konstruktor

03:48.840 --> 03:52.500
der Basisklasse aus der Unterklasse heraus aufgerufen.

03:52.500 --> 03:55.310
Wichtig ist, dass Sie zuerst super in Ihrem Konstruktor

03:55.310 --> 03:58.220
aufrufen müssen, bevor Sie etwas mit dem Schlüsselwort

03:58.220 --> 03:59.700
"this" tun.

03:59.700 --> 04:03.860
Wenn Sie also vorhaben, hier andere besondere Eigenschaften zuzuweisen,

04:03.860 --> 04:06.670
müssen Sie das nach dem Aufruf von super tun.

04:06.670 --> 04:10.346
Und in der Tat möchte ich hier meine eigenen besonderen Eigenschaften hinzufügen.

04:10.346 --> 04:13.528
Wir könnten hier unsere Admins hinzufügen.

04:13.528 --> 04:17.800
Sagen wir, als Privatperson oder als öffentliche Person, um genau zu sein.

04:17.800 --> 04:20.878
Als öffentliche Eigenschaft, Admins,

04:20.878 --> 04:25.630
und das sollte ein Array von Strings sein, sagen wir.

04:25.630 --> 04:27.780
Nun, dann möchte ich dies nicht an

04:27.780 --> 04:31.460
meine Basisklasse weiterleiten, da die Abteilungsklasse

04:31.460 --> 04:34.670
keine Administratordaten haben möchte.

04:34.670 --> 04:38.800
Stattdessen möchte ich dies in einer Eigenschaft der IT-Abteilung speichern,

04:38.800 --> 04:42.150
so dass wir hier Admins als ein Feld hinzufügen können, das ein

04:42.150 --> 04:44.922
paar Administratoren aufnimmt und Admins darin speichert,

04:44.922 --> 04:47.290
oder weil ich hier public verwende, verwende

04:47.290 --> 04:49.070
ich bereits diese Abkürzung, bei

04:49.070 --> 04:52.020
der eine Eigenschaft mit demselben Namen erstellt wird

04:52.020 --> 04:55.160
und die Daten, die wir in dieses Argument eingeben, in dieser

04:55.160 --> 04:57.530
automatisch erstellten Eigenschaft gespeichert

04:57.530 --> 05:00.148
werden.

05:00.148 --> 05:03.710
Um dennoch deutlich zu machen, dass Super zuerst aufgerufen

05:03.710 --> 05:07.610
werden muss, nehme ich den längeren Weg, füge hier Admins hinzu,

05:07.610 --> 05:12.610
so, und dann hier, sagen wir, das. Admins = Admins.

05:13.260 --> 05:15.160
Auch hier wäre die Abkürzung kürzer.

05:15.160 --> 05:17.830
Ich tue dies hier, um zu zeigen und zu verdeutlichen,

05:17.830 --> 05:21.020
dass Sie, wenn Sie etwas verwenden, das das Schlüsselwort "this"

05:21.020 --> 05:24.480
verwendet, dies nach dem Aufruf von super tun müssen.

05:24.480 --> 05:27.640
Wenn wir das speichern, bekomme ich eine Fehlermeldung,

05:27.640 --> 05:29.530
weil ich keine Admins übergebe, also

05:29.530 --> 05:30.920
machen wir das hier.

05:30.920 --> 05:33.920
Max ist der einzige Administrator, den ich hier durchlasse.

05:33.920 --> 05:36.950
Jetzt können wir das speichern und es ohne Fehler kompilieren

05:36.950 --> 05:39.910
und jetzt sehen wir hier tatsächlich unsere Abteilung.

05:39.910 --> 05:41.840
Sie trägt jetzt den Namen IT.

05:41.840 --> 05:44.670
Und wenn wir die gesamte Abteilung über die

05:44.670 --> 05:49.670
Konsole protokollieren, können wir sie vielleicht von Buchhaltung in IT und

05:50.220 --> 05:54.250
dann in Konsole umbenennen. IT hier anmelden.

05:54.250 --> 05:57.570
Die Umbenennung war natürlich optional, macht aber mehr Sinn,

05:57.570 --> 06:00.160
da wir hier eine IT-Abteilung aufbauen.

06:00.160 --> 06:02.510
Jetzt, wo ich die gesamte Abteilung mit der Konsole

06:02.510 --> 06:06.110
protokolliert habe, sehen wir, dass wir Admins haben, aber auch Mitarbeiter

06:06.110 --> 06:11.110
und alles, was ich hier in meiner Abteilungsklasse eingerichtet habe.

06:12.000 --> 06:13.990
Das ist also Vererbung in Aktion, eine

06:13.990 --> 06:16.520
sehr nützliche Funktion, denn jetzt können wir

06:16.520 --> 06:20.770
natürlich auch unsere Buchhaltungsabteilung hier erstellen, indem wir die

06:20.770 --> 06:23.260
Abteilung erweitern, und dort können wir dann

06:23.260 --> 06:27.030
unsere buchhaltungsspezifischen Dinge hinzufügen.

06:27.030 --> 06:29.540
Wir können also immer noch einen Konstruktor

06:29.540 --> 06:31.700
hier verwenden, und jetzt vielleicht

06:31.700 --> 06:34.400
mit der Abkürzung, akzeptieren Sie ein paar Berichte

06:34.400 --> 06:36.170
hier, die eine private Eigenschaft

06:36.170 --> 06:40.950
sein könnte, und dann haben wir addReport, die Text, die eine Zeichenkette sein sollte,

06:40.950 --> 06:45.360
und dann erreichen wir Berichte hier und schieben Text als ein Element in den

06:45.360 --> 06:49.430
Bericht und vielleicht haben wir auch getReports hier und dort haben

06:49.430 --> 06:56.990
wir nur Konsole.

06:56.990 --> 06:56.990
log (this. reports)

06:57.563 --> 07:00.860
oder wir nennen es printReports, daher ist es sinnvoller.

07:00.860 --> 07:02.720
Und jetzt hätten wir eine ganz spezielle

07:02.720 --> 07:04.890
Version einer Abteilung mit zwei Methoden, die

07:04.890 --> 07:06.740
die Basisabteilung nicht hat, und mit einer

07:06.740 --> 07:08.100
zusätzlichen Eigenschaft, die

07:08.100 --> 07:09.840
die Basisabteilung nicht hat.

07:09.840 --> 07:13.000
Und trotzdem bekommen wir alles von der Basisabteilung.

07:13.000 --> 07:15.560
Der Name, den ich hier auf Buchhaltung setze,

07:15.560 --> 07:17.950
und die ID, die wir auch an den Konstruktor

07:17.950 --> 07:20.260
der Basisabteilung weiterleiten.

07:20.260 --> 07:22.120
Wenn wir also hier unten

07:22.120 --> 07:24.770
unsere Buchhaltung mit new AccountingDepartment

07:24.770 --> 07:27.510
erstellen, können wir unsere ID und

07:27.510 --> 07:31.750
dann unsere Berichte eingeben.

07:31.750 --> 07:34.340
Nehmen wir an, das ist zunächst ein leeres Feld.

07:34.340 --> 07:39.340
Dann können wir addReport aufrufen, irgendetwas ist schief gelaufen, natürlich

07:40.550 --> 07:43.446
nie so gut, in der Buchhaltung schätze ich, und

07:43.446 --> 07:48.446
dann können wir auch unsere Berichte hier so ausdrucken und mit all dem kompiliert

07:50.070 --> 07:52.630
es ganz gut und wir bekommen den Bericht

07:52.630 --> 07:55.710
hier und wir sehen, die IT-Abteilung zum Beispiel,

07:55.710 --> 07:58.890
hätte keine Berichte.

07:58.890 --> 08:01.820
Die Buchhaltungsabteilung tut dies aufgrund der Vererbung, bei

08:01.820 --> 08:05.623
der wir bestimmte Funktionen erben und unsere eigenen Funktionen hinzufügen.
