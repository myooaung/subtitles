WEBVTT

00:02.400 --> 00:04.390
Eğitmen: İlk formumuzu oluşturduk,

00:04.390 --> 00:07.240
ancak fark edeceğiniz şey stilin biraz kapalı olduğu,

00:07.240 --> 00:09.200
yani form iyi görünüyor, ancak ekranımızın

00:09.200 --> 00:11.910
kenarları ile form arasında biraz mesafe olması

00:11.910 --> 00:13.870
iyi olurdu.

00:13.870 --> 00:15.830
Eğer uygulamanın içine dalarsanız. css dosyasında

00:15.830 --> 00:18.360
aslında bir kullanıcı giriş kimliği

00:18.360 --> 00:21.050
seçicimiz olduğunu göreceksiniz.

00:21.050 --> 00:23.330
Bazı kenar boşluğu dolguları eklersek, bu kulağa

00:23.330 --> 00:25.630
çok kötü gelmiyor, bu yüzden aslında yapabileceğimiz

00:25.630 --> 00:28.060
şey bir uygulama. Burada elemanımızı

00:28.060 --> 00:31.740
oluşturduğumuzda veya ona eriştiğimizde.

00:31.740 --> 00:34.520
Elemana ulaşabilir ve buraya kullanıcı girişi

00:34.520 --> 00:36.840
olacak bir ID ekleyebiliriz.

00:36.840 --> 00:39.740
Bu, işlenen öğenin bu kimliğe sahip olduğundan emin olur, dolayısıyla

00:39.740 --> 00:42.800
bu yeniden yüklendiğinde çok daha güzel görünür.

00:42.800 --> 00:45.100
Bunu tarayıcı derinliğinde incelersek,

00:45.100 --> 00:49.320
burada kimliği görürüz ve bu daha iyi stilin nedeni budur.

00:49.320 --> 00:51.940
Bununla zaten bir sonraki adımı atıyoruz,

00:51.940 --> 00:54.010
öğeyle etkileşime geçiyoruz.

00:54.010 --> 00:56.980
Şimdi yapmak istediğim tek etkileşim bu değil.

00:56.980 --> 00:58.770
Burada bir formumuz olduğundan,

00:58.770 --> 01:01.870
form gönderildiğinde değerleri okuyabilmemiz için

01:01.870 --> 01:05.910
burada sahip olduğumuz farklı form girdilerine erişmek istiyorum

01:05.910 --> 01:08.800
ve ayrıca burada gönderime bir olay dinleyicisi

01:08.800 --> 01:12.160
kurup kullanıcı girdisini doğrulayacağız.

01:12.160 --> 01:15.720
Bu nedenle, gönderimi dinlemek için düğmeye veya formun

01:15.720 --> 01:19.180
geneline ve oradan en son değerleri almak için tüm giriş

01:19.180 --> 01:21.273
öğelerine erişmemiz gerekir.

01:22.360 --> 01:25.440
Bunun için, her şeyi eklemeden önce, ancak

01:25.440 --> 01:28.500
kimliğimi buradaki öğeye atadıktan sonra,

01:28.500 --> 01:32.210
bu formdaki bu öğedeki farklı girdilere erişmek istiyorum

01:32.210 --> 01:35.980
ve bunları bu sınıfın özellikleri olarak saklamak istiyorum,

01:35.980 --> 01:39.820
bu yüzden oraya daha fazla alan ekleyeceğim ve ilk alan

01:39.820 --> 01:44.570
bir titleInputElement alanı olabilir.

01:44.570 --> 01:47.167
Tür HTMLInputElement olacak bunu yazın ve sadece

01:48.060 --> 01:50.410
iki benzer alana daha ihtiyacımız olduğunda

01:50.410 --> 01:52.770
buna ihtiyacımız olmayacak.

01:52.770 --> 01:55.900
Bir HTMLInputElement türü olan bir descriptionInputElement

01:55.900 --> 01:57.550
alanına ve ayrıca bir peopleInputElement

01:58.520 --> 02:02.730
alanına ihtiyacımız var.

02:02.730 --> 02:06.240
Şimdi bu alanları kurucuda, buna eşit olarak ayarlanmış bu

02:06.240 --> 02:11.510
titleInputElement ile doldurabiliriz.

02:11.510 --> 02:11.510
öğesine,

02:11.510 --> 02:13.120
yani form öğemize, buradaki

02:13.120 --> 02:16.390
form öğesi, sorgu seçici ve ardından başlık öğesi

02:16.390 --> 02:21.350
için sorgu olduğunu her zaman aklınızda bulundurun.

02:21.350 --> 02:25.000
Ve yine endekse bir göz atarsanız. html içinde görüyoruz,

02:25.000 --> 02:28.410
bu elemanın ID başlığını aldık, böylece

02:28.410 --> 02:30.420
bunu sorgulayabiliriz,

02:30.420 --> 02:33.323
yani app. Burada sorgu seçicide

02:33.323 --> 02:37.210
#title kullanarak title ID öğesini seçebilir ve bunu titleInputElement

02:37.210 --> 02:39.750
içinde saklayabiliriz.

02:39.750 --> 02:44.070
Şimdi bildiğiniz gibi, tıpkı document get element by ID'de olduğu

02:44.070 --> 02:46.230
gibi, typescript'in sorgu seçicinin

02:46.230 --> 02:49.090
burada bir girdi öğesi döndüreceğini anlama

02:49.090 --> 02:50.650
şansı yoktur.

02:50.650 --> 02:53.780
Bu yüzden typescript'e söylemek için yine casting kullanacağım

02:53.780 --> 02:56.020
ve bunu bir girdi öğesine cast edeceğim ve

02:56.020 --> 02:58.270
sonra bu adımı iki kez tekrarlayabilir ve

02:58.270 --> 03:00.672
descriptionInputElement ve peopleInputElement'i

03:00.672 --> 03:03.240
de imzalayabiliriz.

03:03.240 --> 03:06.600
Dizinde uygun kimliklere bakın. html dosyası, ki bunlar şaşırtıcı

03:06.600 --> 03:10.390
bir şekilde, sanırım açıklama ve kişiler, ve bunları typescript'e

03:10.390 --> 03:12.190
ekleyin.

03:12.190 --> 03:16.120
Burada description ID öğesini, burada da people

03:16.120 --> 03:17.720
öğesini arıyoruz.

03:17.720 --> 03:19.510
Bu sayede sınıfımızın içindeki

03:19.510 --> 03:22.687
tüm bu öğelere veya sınıfa dayalı olarak oluşturulan

03:22.687 --> 03:26.593
her nesneye erişebiliriz.

03:27.600 --> 03:29.870
Şimdi sadece elemanımıza, formumuza

03:29.870 --> 03:33.330
bir dinleyici eklememiz gerekiyor.

03:33.330 --> 03:38.330
Bunun için, eklemek zorunda olmadığınız başka bir özel yöntem olan

03:38.440 --> 03:39.790
configure ekleyeceğim,

03:39.790 --> 03:43.130
ancak yine de temelde seçimi ve kaba kurulumu

03:43.130 --> 03:47.900
yapıcıda yaptığımız bu ayrımı korumak istiyorum.

03:47.900 --> 03:49.340
Ve sonra ayrı yöntemlerle

03:49.340 --> 03:52.210
ekleme veya ince ayar.

03:52.210 --> 03:53.900
Ve configure yönteminde benim

03:53.900 --> 03:57.000
fikrim bir olay dinleyicisi kurmaktır, bu yüzden burada

03:57.000 --> 03:58.970
form olan bu öğeye ulaşabilir ve bir

03:58.970 --> 04:01.830
olay dinleyicisi ekleyebiliriz.

04:01.830 --> 04:04.570
Şimdi typescript bu öğenin bir HTML form öğesi

04:04.570 --> 04:08.580
olduğunu bildiğinden, burada submit olayını dinlemek istediğimizde

04:08.580 --> 04:10.770
aslında bize otomatik tamamlama sunuyor

04:10.770 --> 04:12.250
ki bu harika.

04:12.250 --> 04:15.520
Şimdi bunu bir yönteme bağlamamız gerekiyor ve bunun için

04:15.520 --> 04:17.840
başka bir private yöntem ekleyeceğim,

04:17.840 --> 04:20.650
private çünkü buna sınıfın dışından asla erişmeyeceğim,

04:20.650 --> 04:23.460
sadece içinden erişeceğim.

04:23.460 --> 04:26.970
Ben buna submitHandler adını vereceğim, isim tamamen size kalmış.

04:26.970 --> 04:29.740
Bu, bir olay nesnesi alan bir yöntem olmalıdır,

04:29.740 --> 04:32.750
çünkü onu bu olay dinleyicisine bağlayacağız.

04:32.750 --> 04:34.880
Yani burada şunu gösterebiliriz.

04:36.460 --> 04:38.713
gönderme işleyicisi.

04:40.180 --> 04:42.080
Şimdi, tüm çağrıları eklemeden

04:42.992 --> 04:45.040
önce bu özel yöntemi yapılandırıp

04:45.040 --> 04:46.730
çalıştırdığımızdan emin olmak

04:46.730 --> 04:49.330
için ayarlıyoruz, yine özeldir, bu nedenle

04:49.330 --> 04:50.500
sınıfın içinden elbette

04:50.500 --> 04:53.660
ona ulaşabiliriz, dışarıdan bir typescript hatası alırsınız,

04:53.660 --> 04:56.000
bu nedenle şimdi bu yöntem form her gönderildiğinde

04:56.000 --> 04:59.290
tetiklenmelidir.

04:59.290 --> 05:02.010
Gönder işleyicisinde, buradaki farklı

05:02.010 --> 05:05.520
girdi değerlerime erişmek ve bunları doğrulamak

05:05.520 --> 05:07.710
ve ardından elbette girdilerle

05:07.710 --> 05:10.310
bir şeyler yapmak istiyorum.

05:10.310 --> 05:12.700
Şimdi bir şeyler yapma kısmını daha sonra düşüneceğiz,

05:12.700 --> 05:15.480
şimdilik sadece onlara erişelim.

05:15.480 --> 05:18.430
Bunun için öncelikle olay diyeceğim. preventDefault ile varsayılan

05:18.430 --> 05:20.620
form gönderimini engelleyin, bu da burada

05:20.620 --> 05:23.890
istemediğim bir HTTP isteğinin gönderilmesini tetikler

05:23.890 --> 05:25.820
ve sonra bunun nerede çalıştığını

05:25.820 --> 05:32.730
görmek için konsola yazdıralım.

05:32.730 --> 05:32.730
başlık

05:32.730 --> 05:36.250
giriş elemanında o anda ne olduğunu yazdırmak için bu başlık Elemanı değerini günlüğe kaydedin.

05:36.250 --> 05:39.010
Kaydettiğimizde hiçbir hata olmadan derlendiğini görüyorsunuz,

05:39.010 --> 05:40.560
yani iyi görünüyor.

05:40.560 --> 05:44.670
Ve şimdi konsola gidip "Merhaba! ve proje ekle'ye tıklayın, iyi olan şey gönderilmemiş

05:44.670 --> 05:49.440
olması, kötü olan ise bir hata almamız, "Tanımsız 'değer' özelliği

05:49.440 --> 05:51.657
okunamıyor. Şimdi burada yanlış giden ne?

05:51.657 --> 05:54.620
Buradaki sorun, submitHandler'daki bu anahtar sözcüğün aslında

05:54.620 --> 05:56.173
sınıfı işaret etmemesidir.

05:57.730 --> 06:02.230
Neden?

06:02.230 --> 06:06.420
JavaScript ve typescript'in çalışma şekli nedeniyle, buradaki

06:06.420 --> 06:07.760
yöntemi olay dinleyicisine

06:07.760 --> 06:11.770
bağlarız ve bir şeyi bir olaya bağladığımızda veya bir olay

06:11.770 --> 06:14.680
dinleyicisinin yardımıyla bu bir şeydir,

06:14.680 --> 06:17.480
bu nedenle yürütülecek olan bu yöntem başka

06:17.480 --> 06:19.740
bir şeye, bu durumda olayın mevcut

06:19.740 --> 06:24.210
hedefine bağlı olacaktır.

06:24.210 --> 06:27.270
Dolayısıyla, yöntem bir olay dinleyicisi

06:27.270 --> 06:31.060
olan bir olay üzerine tetiklendiğinde, bu yöntemin

06:31.060 --> 06:35.130
bu ucu sınıfı işaret etmeyecektir.

06:35.130 --> 06:38.150
Şimdi çözüm, bu fonksiyonun gelecekte çalıştırıldığında

06:38.150 --> 06:40.360
nasıl çalıştırılacağını önceden

06:40.360 --> 06:43.980
yapılandırmak için submitHandler'da bind'ı çağırmaktır

06:43.980 --> 06:46.949
ve bind'a iletebileceğimiz ilk argüman aslında

06:46.949 --> 06:56.450
this anahtar kelimesinin çalıştırılacak fonksiyonun içinde neye atıfta bulunacağıdır.

06:56.450 --> 06:59.760
Ve burada bunu geçiyorum, yani submitHandler'ın

06:59.760 --> 07:02.920
içindeki bu, bu bağlamda bunun ifade ettiği

07:02.920 --> 07:05.750
şeyle aynı şeyi ifade edecek.

07:05.750 --> 07:10.030
Ve bu configure ile çağırdığımız configure bağlamında çağırdığımız

07:10.030 --> 07:13.660
için, configure'dan çıkan bu uçlar sınıfa atıfta

07:13.660 --> 07:17.500
bulunacak ve bind sayesinde, orada herkes için submitHandler'dan

07:17.500 --> 07:22.870
çıkan sınıf uçlarına da atıfta bulunacaktır.

07:22.870 --> 07:24.830
Şimdi bunu buraya

07:24.830 --> 07:28.890
kaydederseniz ve yeniden yüklersek

07:28.890 --> 07:33.673
ve "Merhaba! " burada, şimdi "Merhaba!

07:33.673 --> 07:33.673
"

07:33.673 --> 07:35.600
formu gönderdiğimizde buraya yazdırılır.

07:35.600 --> 07:37.510
Şimdi bu sorun çözüldü ve artık bu konuyla

07:37.510 --> 07:38.770
düzgün bir şekilde ilgileniyoruz.

07:38.770 --> 07:40.210
Ama belki de daha iyi bir yol

07:40.210 --> 07:43.650
ya da hepimizin öğrendiği alternatif bir yol vardır.

07:43.650 --> 07:46.330
Belki bir tanesi dekoratörleri kullanıyordur,

07:46.330 --> 07:49.430
işte size bunu tekrar duraklatma ve bu bağlamayı

07:49.430 --> 07:51.970
dekoratörlerle çözmeyi deneme şansı,

07:51.970 --> 07:54.300
çünkü bu dekoratörler bölümünde

07:54.300 --> 07:57.900
öğrendiğimiz bir şey.
