WEBVTT

1
00:00:02.390 --> 00:00:04.530
<v Instructor>Now sending a requests is possible</v>

2
00:00:04.530 --> 00:00:06.890
without a third party package.

3
00:00:06.890 --> 00:00:10.140
In modern JavaScript in modern browsers,

4
00:00:10.140 --> 00:00:11.910
you have to fetch API.

5
00:00:11.910 --> 00:00:13.620
This is built into browsers,

6
00:00:13.620 --> 00:00:16.710
it's a globally available function and you can use it

7
00:00:16.710 --> 00:00:19.600
to send requests to URLs.

8
00:00:19.600 --> 00:00:22.450
Now there's nothing that speaks against this API,

9
00:00:22.450 --> 00:00:24.870
besides the fact that error handling

10
00:00:24.870 --> 00:00:27.210
can be a bit clunky with it.

11
00:00:27.210 --> 00:00:29.250
But I also want to practice the usage

12
00:00:29.250 --> 00:00:31.123
of third party libraries.

13
00:00:31.960 --> 00:00:36.070
Therefore, we will use the very popular axios package.

14
00:00:36.070 --> 00:00:38.510
This is a package you can use in JavaScript

15
00:00:38.510 --> 00:00:43.510
and therefore also in TypeScript to send HTTP requests.

16
00:00:43.880 --> 00:00:47.263
So we just need to install axios to start using it.

17
00:00:48.100 --> 00:00:51.080
For this in our project where we can use NPM

18
00:00:51.080 --> 00:00:54.150
to manage dependencies, we can run npm install,

19
00:00:54.150 --> 00:00:57.620
dash, dash save axios just like this

20
00:00:57.620 --> 00:01:00.520
and this will now install the axios package.

21
00:01:00.520 --> 00:01:04.750
With this installed, we can now import axios here,

22
00:01:04.750 --> 00:01:07.390
import axios from axios,

23
00:01:07.390 --> 00:01:09.170
and you will see something interesting.

24
00:01:09.170 --> 00:01:12.090
If I now start using this and I type a dot here,

25
00:01:12.090 --> 00:01:13.990
I get autocompletion.

26
00:01:13.990 --> 00:01:16.290
And for example, you have a get method here

27
00:01:16.290 --> 00:01:18.523
which will send a get request to a URL.

28
00:01:19.850 --> 00:01:23.150
So here we actually got built-in TypeScript support.

29
00:01:23.150 --> 00:01:25.640
And if we go to node modules and we have a look

30
00:01:25.640 --> 00:01:29.670
at the axios package, here it is.

31
00:01:29.670 --> 00:01:33.970
You will see that in there, there is an index.dts file.

32
00:01:33.970 --> 00:01:38.970
So the axios library authors already bundled their library

33
00:01:39.430 --> 00:01:43.750
together with such a TypeScript translation package.

34
00:01:43.750 --> 00:01:47.440
In there, everything is explained to TypeScript.

35
00:01:47.440 --> 00:01:50.120
This package or this file here basically explains

36
00:01:50.120 --> 00:01:53.660
to TypeScript what this JavaScript library is able to do

37
00:01:53.660 --> 00:01:55.600
and which types it uses.

38
00:01:55.600 --> 00:01:59.100
Now some libraries do that and axios is one of them.

39
00:01:59.100 --> 00:02:02.070
You can tell pretty fast if a library does this or not,

40
00:02:02.070 --> 00:02:03.420
if you start using it.

41
00:02:03.420 --> 00:02:05.520
If you get no autocompletion support

42
00:02:05.520 --> 00:02:07.930
and you got a lot of compilation errors,

43
00:02:07.930 --> 00:02:10.750
you probably need to install extra types.

44
00:02:10.750 --> 00:02:12.970
If you get good support like we do here

45
00:02:12.970 --> 00:02:16.120
and you will get no compilation errors thereafter,

46
00:02:16.120 --> 00:02:18.140
well then you already got a library

47
00:02:18.140 --> 00:02:20.170
with built in type translations.

48
00:02:20.170 --> 00:02:23.120
And hence, you don't need to install any extra types.

49
00:02:23.120 --> 00:02:26.240
Good to know and here we have a great example.

50
00:02:26.240 --> 00:02:27.800
So since we have built in support,

51
00:02:27.800 --> 00:02:30.410
we can start using access right away.

52
00:02:30.410 --> 00:02:34.350
And I wanna send a HTTP request to this URL now.

53
00:02:34.350 --> 00:02:37.980
So let's copy this URL and let's enter it here.

54
00:02:37.980 --> 00:02:40.220
And I will enter it between backticks

55
00:02:40.220 --> 00:02:42.440
to create a template literal,

56
00:02:42.440 --> 00:02:45.880
so that they can easily swap parts of this string

57
00:02:45.880 --> 00:02:49.050
for dynamic for other values.

58
00:02:49.050 --> 00:02:51.730
So let's paste in that string, it is quite long

59
00:02:51.730 --> 00:02:55.460
and let's start by replacing your API key at the end

60
00:02:55.460 --> 00:02:59.210
with our Google API key which we stored in this constant.

61
00:02:59.210 --> 00:03:01.690
For this, since this is a template literal,

62
00:03:01.690 --> 00:03:04.110
we can add dollar sign, curly braces,

63
00:03:04.110 --> 00:03:09.110
and then point at Google API key to use this constant.

64
00:03:10.820 --> 00:03:13.240
In addition, let's swap this address.

65
00:03:13.240 --> 00:03:15.500
Here we got a dummy address entered

66
00:03:15.500 --> 00:03:17.130
and of course there I want to use

67
00:03:17.130 --> 00:03:19.300
the address the user entered.

68
00:03:19.300 --> 00:03:22.540
Now just one important note, this address, of course,

69
00:03:22.540 --> 00:03:24.910
is exactly the text the user entered

70
00:03:24.910 --> 00:03:27.560
and they offered can contain special characters,

71
00:03:27.560 --> 00:03:30.650
whitespace, commas, and much more.

72
00:03:30.650 --> 00:03:32.250
And not all these characters

73
00:03:32.250 --> 00:03:35.580
and symbols are supported in URLs.

74
00:03:35.580 --> 00:03:37.750
So we need to convert this entered string

75
00:03:37.750 --> 00:03:40.550
into a URL compatible string.

76
00:03:40.550 --> 00:03:43.810
And thankfully, TypeScript and JavaScript specifically

77
00:03:43.810 --> 00:03:46.940
has a built-in function that helps us with that,

78
00:03:46.940 --> 00:03:50.460
the encode URI function.

79
00:03:50.460 --> 00:03:53.020
We can call that and pass a string to it

80
00:03:53.020 --> 00:03:54.770
and this will convert this string

81
00:03:54.770 --> 00:03:57.460
to a URL compatible string.

82
00:03:57.460 --> 00:03:59.845
With that we got the finished URL

83
00:03:59.845 --> 00:04:01.600
to which we can send the request

84
00:04:01.600 --> 00:04:04.900
to get back our coordinates.

85
00:04:04.900 --> 00:04:07.390
Now get gives us a promise because of course,

86
00:04:07.390 --> 00:04:10.620
sending such a request as an asynchronous task.

87
00:04:10.620 --> 00:04:13.430
And there we have a then log if this succeeds

88
00:04:13.430 --> 00:04:15.690
or catch if we have a technical error

89
00:04:15.690 --> 00:04:18.620
or an error response code.

90
00:04:18.620 --> 00:04:21.560
So here we'll console log any errors we might be getting

91
00:04:21.560 --> 00:04:24.710
at this point, because normally we should succeed.

92
00:04:24.710 --> 00:04:27.820
And therefore here, I will expect my response

93
00:04:27.820 --> 00:04:32.400
in the then block and I also want to log this response then.

94
00:04:32.400 --> 00:04:35.820
So now with that, I'd say, let's see what this gives us.

95
00:04:35.820 --> 00:04:39.720
Let's rerun NPM start to bring up that webpack process again

96
00:04:39.720 --> 00:04:40.953
and start building this.

97
00:04:42.120 --> 00:04:43.790
And let's go back to our application

98
00:04:43.790 --> 00:04:47.220
and enter a place here like Sixth Avenue.

99
00:04:47.220 --> 00:04:50.090
If I hit Search Address, you'll see after a while

100
00:04:50.090 --> 00:04:51.480
you get an output here.

101
00:04:51.480 --> 00:04:53.660
And there you should have a status code of 200

102
00:04:53.660 --> 00:04:56.120
which means that the request succeeded.

103
00:04:56.120 --> 00:04:59.090
And you have a data field which holds the data

104
00:04:59.090 --> 00:05:01.240
the server replies with.

105
00:05:01.240 --> 00:05:03.890
That data field has a results field

106
00:05:03.890 --> 00:05:06.570
and in there we have an array, as you can tell.

107
00:05:06.570 --> 00:05:10.690
In that array, we got a couple of items, the number varies.

108
00:05:10.690 --> 00:05:13.770
And these are basically the results Google found.

109
00:05:13.770 --> 00:05:16.740
And the first result is typically the best one.

110
00:05:16.740 --> 00:05:18.790
So if you have a look at that, we see for example,

111
00:05:18.790 --> 00:05:20.460
the formatted address.

112
00:05:20.460 --> 00:05:22.520
So the address which Google found

113
00:05:22.520 --> 00:05:23.790
for this address we entered,

114
00:05:23.790 --> 00:05:26.570
it's a bit more complete than what we entered.

115
00:05:26.570 --> 00:05:29.300
And we got the geometry key here.

116
00:05:29.300 --> 00:05:31.880
And if we expand this, we see that in turn

117
00:05:31.880 --> 00:05:35.240
has a location key and this finally is an object

118
00:05:35.240 --> 00:05:37.540
with the coordinates we are interested in,

119
00:05:37.540 --> 00:05:39.700
a latitude and a longitude.

120
00:05:39.700 --> 00:05:43.000
So in the end, we have to drill into data, results

121
00:05:43.000 --> 00:05:47.390
and then there the first result, geometry, location

122
00:05:47.390 --> 00:05:50.030
and we will have an object with a latitude and longitude.

123
00:05:50.030 --> 00:05:52.840
And we will be able to then render this latitude

124
00:05:52.840 --> 00:05:55.240
and longitude on a map later.

125
00:05:55.240 --> 00:05:57.430
So for now, let's just extract this

126
00:05:57.430 --> 00:05:59.360
and let's get our coordinates

127
00:05:59.360 --> 00:06:04.360
by accessing response dot data dot results.

128
00:06:04.600 --> 00:06:09.600
And then there the first result dot geometry dot location,

129
00:06:11.200 --> 00:06:13.093
so really drilling into this.

130
00:06:15.130 --> 00:06:16.880
Now what you will notice of course,

131
00:06:16.880 --> 00:06:19.850
is that whilst TypeScript does not complain here,

132
00:06:19.850 --> 00:06:23.280
we also got no good TypeScript support here, right?

133
00:06:23.280 --> 00:06:25.740
If I type a dot here, it's not suggesting

134
00:06:25.740 --> 00:06:27.620
that there is a results property.

135
00:06:27.620 --> 00:06:30.350
And indeed, I could try to access anything here,

136
00:06:30.350 --> 00:06:33.840
even something which does not exist on the response

137
00:06:33.840 --> 00:06:34.820
and that makes sense.

138
00:06:34.820 --> 00:06:38.010
How would TypeScript know what will be in the response

139
00:06:38.010 --> 00:06:40.920
of any URL I'm sending a request to?

140
00:06:40.920 --> 00:06:42.810
TypeScript does not go ahead

141
00:06:42.810 --> 00:06:44.970
and send the request during development

142
00:06:44.970 --> 00:06:46.510
to find out what's in there,

143
00:06:46.510 --> 00:06:49.170
that would also not be that good.

144
00:06:49.170 --> 00:06:51.400
But we can tell TypeScript what we expect

145
00:06:51.400 --> 00:06:53.950
to be in the response because this get method

146
00:06:53.950 --> 00:06:58.950
actually is a generic method and there is any thing here,

147
00:06:59.040 --> 00:07:02.830
that is actually the type of the response we expect to get.

148
00:07:02.830 --> 00:07:06.880
So here, I can add my response type

149
00:07:06.880 --> 00:07:11.270
and I can tell TypeScript that what I expect is an object

150
00:07:11.270 --> 00:07:15.260
which has a results key, which then in turn,

151
00:07:15.260 --> 00:07:18.330
is an array full of objects,

152
00:07:18.330 --> 00:07:22.170
where every object has a geometry key,

153
00:07:22.170 --> 00:07:24.330
which then in turn is an object,

154
00:07:24.330 --> 00:07:28.160
which has a location key, which then in turn is an object,

155
00:07:28.160 --> 00:07:31.170
which has a latitude, which is a number,

156
00:07:31.170 --> 00:07:33.510
and a longitude, which is a number.

157
00:07:33.510 --> 00:07:36.030
So definitely quite a complex type.

158
00:07:36.030 --> 00:07:39.400
But with that, if we type a dot here, I get autocompletion

159
00:07:39.400 --> 00:07:42.220
and TypeScript understands what I'm accessing here.

160
00:07:42.220 --> 00:07:44.860
And of course, we can also pull this type out of here

161
00:07:44.860 --> 00:07:46.620
and create our own type alias.

162
00:07:46.620 --> 00:07:50.497
Maybe here, Google geocoding response.

163
00:07:53.220 --> 00:07:55.380
That would be my custom type here,

164
00:07:55.380 --> 00:07:58.420
and then I can tell TypeScript that here I expect

165
00:07:58.420 --> 00:08:01.540
to get that Google geocoding response.

166
00:08:01.540 --> 00:08:03.900
Now, of course, actually the response contains more

167
00:08:03.900 --> 00:08:07.020
than just the results array, it also has a status code

168
00:08:07.020 --> 00:08:09.460
and it also has multiple other fields

169
00:08:09.460 --> 00:08:13.040
in each item of the results array, then the geometry.

170
00:08:13.040 --> 00:08:17.030
Now, of course, you can simply add all these fields

171
00:08:18.210 --> 00:08:21.330
to your custom type here, but here I really just want

172
00:08:21.330 --> 00:08:25.640
to focus on the values I'm actively interested in.

173
00:08:25.640 --> 00:08:27.360
And therefore there is actually one other field

174
00:08:27.360 --> 00:08:30.900
which I will add, and that is the status next to results.

175
00:08:30.900 --> 00:08:34.520
So right here on the top level, we got status

176
00:08:34.520 --> 00:08:35.500
and that will be a string

177
00:08:35.500 --> 00:08:38.390
which tells us whether Google succeeded or not.

178
00:08:38.390 --> 00:08:41.810
And status will actually either be okay

179
00:08:41.810 --> 00:08:44.010
or a couple of other values.

180
00:08:44.010 --> 00:08:46.910
This is basically a status message Google responds with

181
00:08:46.910 --> 00:08:50.020
to tell us whether it succeeded fetching coordinates

182
00:08:50.020 --> 00:08:51.890
for this address or not.

183
00:08:51.890 --> 00:08:54.000
And of course, in the official docs we can learn

184
00:08:54.000 --> 00:08:57.280
which kind of responses we might get back here.

185
00:08:57.280 --> 00:08:58.900
If you scroll down a little bit

186
00:08:58.900 --> 00:09:01.070
and click on understand the response,

187
00:09:01.070 --> 00:09:04.240
you learn what's inside the response you get back

188
00:09:04.240 --> 00:09:07.000
and therefore click on geocoding responses.

189
00:09:07.000 --> 00:09:08.580
And then on status codes, we learn

190
00:09:08.580 --> 00:09:11.090
about the available status codes.

191
00:09:11.090 --> 00:09:15.090
For example, we all got zero results if nothing was found.

192
00:09:15.090 --> 00:09:16.850
We got a couple of other codes as well,

193
00:09:16.850 --> 00:09:19.223
but here I really only care about these two.

194
00:09:20.200 --> 00:09:23.310
So I tell TypeScript that here, I get a status code

195
00:09:23.310 --> 00:09:24.890
which is one of these two values.

196
00:09:24.890 --> 00:09:27.480
Now again, it might have a number value as well,

197
00:09:27.480 --> 00:09:29.830
but this is good for me here.

198
00:09:29.830 --> 00:09:31.640
As I said, you can of course write this

199
00:09:31.640 --> 00:09:33.700
in a more complete way.

200
00:09:33.700 --> 00:09:36.230
Now with that added, down there in the then block,

201
00:09:36.230 --> 00:09:41.230
we can check if response dot data dot status is not okay,

202
00:09:41.580 --> 00:09:44.120
which means something went wrong and in that case,

203
00:09:44.120 --> 00:09:46.710
we can throw an error here and therefore we will end up

204
00:09:46.710 --> 00:09:48.090
in the catch block where we could

205
00:09:48.090 --> 00:09:49.810
set up some error handling.

206
00:09:49.810 --> 00:09:54.280
So here we'll throw an error could not fetch location.

207
00:09:54.280 --> 00:09:57.080
And then here in the error handler to do something,

208
00:09:57.080 --> 00:09:59.150
we can throw an alert where we output

209
00:09:59.150 --> 00:10:01.230
the error message at least.

210
00:10:01.230 --> 00:10:04.660
This is of course, just some very basic error handling.

211
00:10:04.660 --> 00:10:06.950
Otherwise if we have a success response,

212
00:10:06.950 --> 00:10:09.910
we fetch our coordinates here and now we can use

213
00:10:09.910 --> 00:10:12.113
these coordinates to output them on a map.

