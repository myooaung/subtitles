WEBVTT

00:02.340 --> 00:04.020
Instrutor: Estamos quase terminando

00:04.020 --> 00:06.240
com o básico sobre TypeScript e os tipos centrais.

00:06.240 --> 00:10.130
Há mais dois tipos que são bons de se estar atento porque

00:10.130 --> 00:13.170
serão importantes de tempos em tempos.

00:13.170 --> 00:16.603
O primeiro tipo é o tipo desconhecido.

00:17.860 --> 00:20.350
Para isso, vou nomear este arquivo suas funções. ts e acrescente um

00:20.350 --> 00:23.343
novo aplicativo. ts e ali, digamos

00:24.290 --> 00:28.620
que temos uma nova variável, userInput,

00:28.620 --> 00:32.143
e esta é de tipo desconhecido.

00:32.143 --> 00:34.850
Não é do tipo nenhum, que seria o padrão, mas desconhecido,

00:34.850 --> 00:36.690
que é um tipo diferente introduzido

00:36.690 --> 00:38.500
pelo TypeScript.

00:38.500 --> 00:40.950
Pode ser desconhecido porque ainda não sabemos o

00:40.950 --> 00:42.950
que o usuário eventualmente entrará.

00:42.950 --> 00:45.593
Se é um número, se é um fio, não sabemos.

00:46.770 --> 00:48.960
Agora o interessante sobre o tipo desconhecido

00:48.960 --> 00:51.020
é que podemos armazenar ali qualquer valor

00:51.020 --> 00:54.630
sem receber erros, portanto, tudo isso é permitido.

00:54.630 --> 00:57.660
Se eu agora compilar meu arquivo aqui, você vê que

00:57.660 --> 01:00.290
eu não recebo nenhum erro de compilação.

01:00.290 --> 01:01.910
Portanto, até agora, é o mesmo que se

01:01.910 --> 01:03.820
não tivéssemos designado um tipo aqui e,

01:03.820 --> 01:05.260
portanto, temos qualquer tipo

01:05.260 --> 01:08.610
ou se teríamos definido explicitamente qualquer tipo como o tipo.

01:08.610 --> 01:11.810
Mas ainda assim, o desconhecido é diferente de qualquer outro.

01:11.810 --> 01:15.430
Isto aqui funciona, mas nos depararemos com problemas

01:15.430 --> 01:19.660
se eu tiver outra variável, digamos userName, que deveria ser

01:19.660 --> 01:20.890
uma string.

01:20.890 --> 01:22.860
E isso aqui não é iniciado,

01:22.860 --> 01:27.200
mas aqui eu quero definir o userName igual a userInput.

01:27.200 --> 01:29.150
Agora você vê que estamos recebendo um erro.

01:29.150 --> 01:33.010
O tipo desconhecido não é atribuível ao tipo string.

01:33.010 --> 01:34.590
Portanto, userName quer uma corda

01:34.590 --> 01:37.990
e, é claro, desconhecido não é garantido que seja uma corda.

01:37.990 --> 01:41.620
Aqui, eu designei um, mas esse é apenas o caso nesta linha.

01:41.620 --> 01:44.460
userInput tecnicamente poderia ter qualquer

01:44.460 --> 01:46.490
valor porque é desconhecido.

01:46.490 --> 01:47.640
Agora, o interessante

01:47.640 --> 01:51.060
é que se eu trocar o desconhecido por algum, este erro desaparece

01:51.060 --> 01:53.900
porque qualquer um é o tipo mais flexível no TypeScript

01:53.900 --> 01:56.810
e basicamente desativa toda a verificação de tipo e o

01:56.810 --> 02:00.950
TypeScript apenas diz: "Eu desisto, faça o que você quiser". O desconhecido é um pouco mais restritivo do que qualquer outro.

02:00.950 --> 02:05.510
Com desconhecido, temos que primeiro verificar o tipo que está

02:05.510 --> 02:08.820
atualmente armazenado no UserInput antes de

02:08.820 --> 02:12.200
podermos atribuí-lo, por exemplo, a uma variável

02:12.200 --> 02:14.400
que queira uma string.

02:14.400 --> 02:16.180
Então, como uma string é desejada

02:16.180 --> 02:18.110
aqui, poderíamos verificar se o tipo

02:18.110 --> 02:23.110
de userInput é igual a string e TypeScript detectará esta verificação e entenderá que aqui,

02:23.650 --> 02:26.020
o que está armazenado em userName porque termina

02:26.020 --> 02:29.790
fora desta declaração, onde eu verifico se userInput é do tipo string,

02:29.790 --> 02:31.830
userInput é garantidamente uma string

02:31.830 --> 02:36.920
e, portanto, eu posso seguramente atribuí-la a userName.

02:36.920 --> 02:39.990
Portanto, eu preciso de uma verificação de tipo

02:39.990 --> 02:42.670
extra aqui com desconhecido para poder

02:42.670 --> 02:47.560
atribuir um valor desconhecido a um valor com um tipo fixo e, portanto,

02:47.560 --> 02:50.530
desconhecido é a melhor escolha sobre qualquer

02:50.530 --> 02:54.780
outro se você sabe que eu não posso dizer exatamente que tipo de

02:54.780 --> 02:56.930
loja lá dentro, pode ser um número,

02:56.930 --> 02:59.450
pode ser um fio, mas eu sei o que eu quero

02:59.450 --> 03:02.910
fazer com ele eventualmente.

03:02.910 --> 03:05.470
Bem, basta acrescentar um cheque extra para ter certeza

03:05.470 --> 03:07.440
de que o que você quer fazer pode ser feito,

03:07.440 --> 03:10.240
para que se você quiser trabalhar com um cordel, você tenha

03:10.240 --> 03:12.160
um cordel, e você seja bom.

03:12.160 --> 03:14.690
E então desconhecido é melhor do que qualquer outro

03:14.690 --> 03:18.720
porque garante que você não está autorizado a fazer tudo, mas você tem pelo

03:18.720 --> 03:20.930
menos algum tipo de verificação.

03:20.930 --> 03:23.260
É claro, se você tem a chance de saber com antecedência

03:23.260 --> 03:25.990
que o UserInput é sempre uma string, ou sempre uma string

03:25.990 --> 03:28.150
ou um número, bem, então você deve usar uma

03:28.150 --> 03:31.680
string ou um tipo de união em vez de desconhecido.

03:31.680 --> 03:34.460
Portanto, desconhecido ainda é um tipo que você não deve usar o tempo

03:34.460 --> 03:36.010
todo, mas é melhor do que qualquer outro

03:36.010 --> 03:37.460
pelas razões descritas.
