WEBVTT

1
00:00:02.250 --> 00:00:05.050
<v Instructor>Now before we explore more useful</v>

2
00:00:05.050 --> 00:00:07.811
use cases or a scenarios for some decorators.

3
00:00:07.811 --> 00:00:10.700
I wanna briefly show you all the other places

4
00:00:10.700 --> 00:00:12.550
where you can add decorators.

5
00:00:12.550 --> 00:00:15.670
Well obviously we can add decorators to classes

6
00:00:15.670 --> 00:00:17.731
but there are more places where we can add them.

7
00:00:17.731 --> 00:00:20.750
For that I'll create a new class, because we need a class

8
00:00:20.750 --> 00:00:22.460
for any decorator we wanna use,

9
00:00:22.460 --> 00:00:24.580
but we don't have to add all decorators

10
00:00:24.580 --> 00:00:26.420
directly to the class.

11
00:00:26.420 --> 00:00:28.480
Let's say we have a product class here

12
00:00:28.480 --> 00:00:31.523
and in the product class, we have a title maybe,

13
00:00:31.523 --> 00:00:34.540
which is a string.

14
00:00:34.540 --> 00:00:37.070
And we can assign a value here with the constructor.

15
00:00:37.070 --> 00:00:39.600
Of course we could always use the shortcut

16
00:00:39.600 --> 00:00:41.570
and do it all in one step in a constructor

17
00:00:41.570 --> 00:00:42.680
as you learned earlier.

18
00:00:42.680 --> 00:00:44.451
Here I'll take the longer route.

19
00:00:44.451 --> 00:00:49.451
We can have a method here, get price with tax.

20
00:00:50.150 --> 00:00:53.442
For that I expect to get a tax rate which is a number

21
00:00:53.442 --> 00:00:57.150
and for that to work we should also store a price here.

22
00:00:57.150 --> 00:01:01.200
Price property which we also get as part of the constructor.

23
00:01:01.200 --> 00:01:04.060
Again we could use the shortcut here,

24
00:01:04.060 --> 00:01:05.340
but I'll do it like this.

25
00:01:05.340 --> 00:01:08.120
And then in this method I will return,

26
00:01:08.120 --> 00:01:13.120
This.price times one plus tax.

27
00:01:13.200 --> 00:01:15.300
So we have this utility method

28
00:01:15.300 --> 00:01:17.610
and we can also add a getter and a setter

29
00:01:17.610 --> 00:01:19.090
if you want to.

30
00:01:19.090 --> 00:01:22.700
For example, we can add a setter for the price here,

31
00:01:22.700 --> 00:01:25.850
where we get the value which should be a number

32
00:01:25.850 --> 00:01:28.231
and where we control that we can only set certain values.

33
00:01:28.231 --> 00:01:32.090
Now to make this work, I'll re-name price up here,

34
00:01:32.090 --> 00:01:35.350
to underscore price and make it private actually,

35
00:01:35.350 --> 00:01:37.540
so that we can't directly reach it.

36
00:01:37.540 --> 00:01:39.970
And here I will set this underscore price

37
00:01:39.970 --> 00:01:42.580
and here I will use this underscore price.

38
00:01:42.580 --> 00:01:44.800
And with these changes in the setter,

39
00:01:44.800 --> 00:01:48.350
we can set this underscore price equal to the value we get.

40
00:01:48.350 --> 00:01:51.290
But before we do so, we can check if value

41
00:01:51.290 --> 00:01:52.770
is greater than zero,

42
00:01:52.770 --> 00:01:55.630
so that we don't accept negative prices.

43
00:01:55.630 --> 00:01:57.220
So with that, we only set the price

44
00:01:57.220 --> 00:02:00.159
if it's greater than zero, otherwise we don't do anything.

45
00:02:00.159 --> 00:02:04.330
Indeed we could throw an error in the other case.

46
00:02:04.330 --> 00:02:08.389
Invalid price should be positive.

47
00:02:08.389 --> 00:02:11.350
So that's something we can do, now we have a class

48
00:02:11.350 --> 00:02:14.020
with two properties, with an accessor

49
00:02:14.020 --> 00:02:16.700
and also with method here

50
00:02:16.700 --> 00:02:18.570
and this method has a parameter.

51
00:02:18.570 --> 00:02:21.180
Now to all these things we can add decorators

52
00:02:21.180 --> 00:02:24.690
and let's start with a good old friend,

53
00:02:24.690 --> 00:02:25.910
a log decorator.

54
00:02:25.910 --> 00:02:28.960
Here I'll name it log to not clash with logger up there,

55
00:02:28.960 --> 00:02:30.650
because this log decorator,

56
00:02:30.650 --> 00:02:31.960
will not be added to a class

57
00:02:31.960 --> 00:02:33.770
and therefore it will get different arguments.

58
00:02:33.770 --> 00:02:35.671
It will get arguments though,

59
00:02:35.671 --> 00:02:38.580
and which arguments decorator gets,

60
00:02:38.580 --> 00:02:40.030
depends on where you add it.

61
00:02:40.030 --> 00:02:41.960
Which is why I can't reuse logger,

62
00:02:41.960 --> 00:02:45.700
because that was fine-tuned to only work with classes.

63
00:02:45.700 --> 00:02:48.100
Now here I don't have a decorator factory actually,

64
00:02:48.100 --> 00:02:49.980
I just have to decorate a function like this,

65
00:02:49.980 --> 00:02:53.510
but still, which arguments this decorator function gets,

66
00:02:53.510 --> 00:02:55.230
depends on where we use it.

67
00:02:55.230 --> 00:02:58.750
For example, we can add a decorator to a property.

68
00:02:58.750 --> 00:03:01.120
Here I can add log like this

69
00:03:01.120 --> 00:03:03.840
and if you add a decorator to a property,

70
00:03:03.840 --> 00:03:05.759
the decorator receives two arguments.

71
00:03:05.759 --> 00:03:09.830
The first argument, is the target of the property

72
00:03:09.830 --> 00:03:12.010
and for an instance property like this one,

73
00:03:12.010 --> 00:03:15.290
which we call on a instance if you work with it.

74
00:03:15.290 --> 00:03:19.490
This will be the prototype of the object that was created.

75
00:03:19.490 --> 00:03:22.140
If we had a static property here,

76
00:03:22.140 --> 00:03:24.850
target would refer to the constructor function state.

77
00:03:24.850 --> 00:03:27.770
So here I'll say any because I don't know exactly

78
00:03:27.770 --> 00:03:30.140
which structure does object will have.

79
00:03:30.140 --> 00:03:35.140
The second argument we get, is the property name simply.

80
00:03:35.290 --> 00:03:37.682
That could be a string here,

81
00:03:37.682 --> 00:03:40.400
could of course also be a symbol.

82
00:03:40.400 --> 00:03:43.470
We don't know what we use as a property identifier.

83
00:03:43.470 --> 00:03:48.037
And then here I will log property decorator,

84
00:03:49.130 --> 00:03:51.120
so that we can see when this runs

85
00:03:51.120 --> 00:03:55.980
and I wanna a console.log target and also property name.

86
00:03:55.980 --> 00:03:57.780
So that we see what's in these two values.

87
00:03:57.780 --> 00:04:01.280
With that if we save so that it compiles without errors,

88
00:04:01.280 --> 00:04:03.080
and if we go to our server,

89
00:04:03.080 --> 00:04:06.871
we see, property decorator gets printed down there.

90
00:04:06.871 --> 00:04:08.630
And this is our output we get.

91
00:04:08.630 --> 00:04:13.220
We see here that's the prototype of our object

92
00:04:13.220 --> 00:04:15.850
because we're not seeing title and price here.

93
00:04:15.850 --> 00:04:18.160
But we do see get price with tax

94
00:04:18.160 --> 00:04:19.770
and indeed methods are registered

95
00:04:19.770 --> 00:04:21.900
on the prototype of an object.

96
00:04:21.900 --> 00:04:24.240
So that's the prototype of our object

97
00:04:24.240 --> 00:04:26.640
and we see title over here on the right,

98
00:04:26.640 --> 00:04:28.943
that's the property name we're working with.

99
00:04:29.800 --> 00:04:33.770
Now when exactly does this logger execute though?

100
00:04:33.770 --> 00:04:37.880
Well as you can tell, since I never instantiate any product,

101
00:04:37.880 --> 00:04:41.670
it executes basically when your class definition

102
00:04:41.670 --> 00:04:43.980
is registered by JavaScript.

103
00:04:43.980 --> 00:04:47.660
So it executes when you define this property

104
00:04:47.660 --> 00:04:49.140
basically to JavaScript,

105
00:04:49.140 --> 00:04:50.960
as part of your class here,

106
00:04:50.960 --> 00:04:52.970
as part of this constructor function.

107
00:04:52.970 --> 00:04:54.610
Which is created here in the end.

108
00:04:54.610 --> 00:04:58.053
This is when this property decorator executes.

