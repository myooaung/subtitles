WEBVTT

1
00:00:02.290 --> 00:00:03.910
<v Instructor>So to tell Webpack what to do</v>

2
00:00:03.910 --> 00:00:06.710
with TypeScript files, we need to add a new entry

3
00:00:06.710 --> 00:00:08.830
to the configuration object here.

4
00:00:08.830 --> 00:00:11.510
And that's the module property.

5
00:00:11.510 --> 00:00:14.020
Module also takes a JavaScript object

6
00:00:14.020 --> 00:00:15.470
to then configure it.

7
00:00:15.470 --> 00:00:17.440
A module in the end is just a file,

8
00:00:17.440 --> 00:00:20.520
so here we tell Webpack how to work with the files it finds,

9
00:00:20.520 --> 00:00:22.940
like with the app.ts file, and then also

10
00:00:22.940 --> 00:00:25.520
once it understands that file, how to deal

11
00:00:25.520 --> 00:00:27.290
with all the imports in the file.

12
00:00:27.290 --> 00:00:29.800
So how should Webpack deal with these files?

13
00:00:29.800 --> 00:00:33.640
Well, we tell Webpack by adding a rules array here,

14
00:00:33.640 --> 00:00:35.430
because you can set up multiple rules

15
00:00:35.430 --> 00:00:37.300
that should be applied to all the files.

16
00:00:37.300 --> 00:00:40.690
Here we only need one, but in more complex projects,

17
00:00:40.690 --> 00:00:44.030
where you also want to use Webpack to handle CSS files,

18
00:00:44.030 --> 00:00:46.140
or images, or anything like that,

19
00:00:46.140 --> 00:00:49.220
you can add more rules for different types of files.

20
00:00:49.220 --> 00:00:51.500
And as mentioned before, the official docs

21
00:00:51.500 --> 00:00:53.840
are a great place to learn more about loaders,

22
00:00:53.840 --> 00:00:55.730
which you in the end use to teach Webpack

23
00:00:55.730 --> 00:00:57.980
more about different files, and to learn more

24
00:00:57.980 --> 00:00:59.720
about Webpack in general.

25
00:00:59.720 --> 00:01:02.560
So here, we will add such a loader actually.

26
00:01:02.560 --> 00:01:06.110
A loader is simply a package that tells Webpack

27
00:01:06.110 --> 00:01:07.780
how to deal with certain files,

28
00:01:07.780 --> 00:01:09.960
and of course here, we got the ts loader,

29
00:01:09.960 --> 00:01:11.520
which helps us tell Webpack

30
00:01:11.520 --> 00:01:13.690
how to deal with TypeScript files.

31
00:01:13.690 --> 00:01:16.850
So we add a rule which is just a JavaScript object,

32
00:01:16.850 --> 00:01:19.720
where we first of all add a test property.

33
00:01:19.720 --> 00:01:22.950
This describes a test Webpack will perform

34
00:01:22.950 --> 00:01:26.510
on any file it finds to find out whether this rule here

35
00:01:26.510 --> 00:01:28.550
applies to that file or not.

36
00:01:28.550 --> 00:01:31.080
And the test here is a regular expression.

37
00:01:31.080 --> 00:01:33.610
And there I wanna tell Webpack that any file

38
00:01:33.610 --> 00:01:36.950
which ends with .ts should be used

39
00:01:36.950 --> 00:01:38.913
or should be handled by this rule.

40
00:01:39.860 --> 00:01:42.940
A regular expression that checks for the file extension

41
00:01:42.940 --> 00:01:46.260
can use a backslash here, and then .ts,

42
00:01:46.260 --> 00:01:47.550
and then a dollar sign.

43
00:01:47.550 --> 00:01:50.840
This is our regular expression which then tells Webpack

44
00:01:50.840 --> 00:01:54.593
that you wanna check for files that end with .ts.

45
00:01:55.560 --> 00:01:58.810
Then, you also have to specify what Webpack should do

46
00:01:58.810 --> 00:02:02.590
with those files, and you do that with the use keyword here.

47
00:02:02.590 --> 00:02:05.290
And there, you specify the loader Webpack should use,

48
00:02:05.290 --> 00:02:07.590
in my case, ts-loader.

49
00:02:07.590 --> 00:02:10.600
So we tell Webpack that any TypeScript file it finds

50
00:02:10.600 --> 00:02:12.720
should be handled by the TypeScript loader

51
00:02:12.720 --> 00:02:16.010
which then in turn knows what to do with such a file.

52
00:02:16.010 --> 00:02:17.680
The ts-loader will automatically

53
00:02:17.680 --> 00:02:20.330
take the tsconfig.json file into account

54
00:02:20.330 --> 00:02:23.430
so we don't need to specify any extra configuration here.

55
00:02:23.430 --> 00:02:26.050
Just one configuration that never hurts,

56
00:02:26.050 --> 00:02:29.910
exclude node modules as a regular expression

57
00:02:29.910 --> 00:02:33.773
so that Webpack also doesn't try to look into node modules.

58
00:02:35.130 --> 00:02:38.400
With that we need to add one extra configuration here

59
00:02:38.400 --> 00:02:42.800
after the module configuration, and that's the resolve key.

60
00:02:42.800 --> 00:02:47.800
There we tell Webpack which file extensions it adds

61
00:02:47.820 --> 00:02:49.750
to the imports it finds.

62
00:02:49.750 --> 00:02:52.440
I said Webpack would add extensions on its own,

63
00:02:52.440 --> 00:02:56.160
and by default, it will look for .js files.

64
00:02:56.160 --> 00:02:59.220
Now here we want Webpack to look for .ts files,

65
00:02:59.220 --> 00:03:01.280
and then for here in resolve, we can add

66
00:03:01.280 --> 00:03:05.390
a extensions property, set as equal to an array,

67
00:03:05.390 --> 00:03:08.390
and tell Webpack that it should look for .ts files

68
00:03:08.390 --> 00:03:10.640
as well as .js files.

69
00:03:10.640 --> 00:03:13.360
So now Webpack will basically look for such files

70
00:03:13.360 --> 00:03:16.900
and then bundle all files that have these extensions,

71
00:03:16.900 --> 00:03:18.723
which you are importing together.

72
00:03:19.760 --> 00:03:22.770
And that's our setup almost finished for the moment,

73
00:03:22.770 --> 00:03:24.690
our configuration file almost finished

74
00:03:24.690 --> 00:03:26.150
for the moment at least.

75
00:03:26.150 --> 00:03:28.730
With that we just should go to tsconfig as well,

76
00:03:28.730 --> 00:03:33.070
and there make sure that you set sourceMap to true.

77
00:03:33.070 --> 00:03:35.210
This will help us debug our code,

78
00:03:35.210 --> 00:03:37.130
and Webpack supports this as well.

79
00:03:37.130 --> 00:03:39.850
There we now just also have to add an entry,

80
00:03:39.850 --> 00:03:41.340
maybe here below output,

81
00:03:41.340 --> 00:03:43.710
and that's a devtool key.

82
00:03:43.710 --> 00:03:47.210
And there, the value should be inline-source-map

83
00:03:47.210 --> 00:03:48.510
as a string.

84
00:03:48.510 --> 00:03:51.620
This then tells Webpack that there will be

85
00:03:51.620 --> 00:03:53.700
generated source maps already,

86
00:03:53.700 --> 00:03:57.210
which it should extract and basically wire up correctly

87
00:03:57.210 --> 00:04:00.170
to the bundle it generates, so that whilst we get

88
00:04:00.170 --> 00:04:03.603
such a bundle, we still have a great development experience.

89
00:04:05.830 --> 00:04:08.360
Now with that we can use Webpack, and the question is

90
00:04:08.360 --> 00:04:09.823
how do we use it?

91
00:04:11.000 --> 00:04:14.720
A simple way of using it is to go to the package.json file,

92
00:04:14.720 --> 00:04:16.650
and there let's add a script.

93
00:04:16.650 --> 00:04:18.440
For example, build.

94
00:04:18.440 --> 00:04:19.810
You can give it any name you want

95
00:04:19.810 --> 00:04:21.620
here in the scripts section.

96
00:04:21.620 --> 00:04:23.930
And there, simply run Webpack,

97
00:04:23.930 --> 00:04:26.453
so just type webpack like this.

98
00:04:27.560 --> 00:04:29.880
Let's now also go to the dist folder,

99
00:04:29.880 --> 00:04:32.993
and in the end remove everything that's in there,

100
00:04:34.000 --> 00:04:36.870
and with that save, now run npm run build

101
00:04:36.870 --> 00:04:38.663
and let's see whether that works.

102
00:04:39.970 --> 00:04:43.000
And it fails...

103
00:04:45.440 --> 00:04:47.800
Yeah, I simply got a typo,

104
00:04:47.800 --> 00:04:51.440
that should not be devtools, but devtool here.

105
00:04:51.440 --> 00:04:53.830
So change this to devtool in the configuration file

106
00:04:53.830 --> 00:04:56.143
and now let's repeat npm run build.

107
00:04:59.500 --> 00:05:02.620
And, with that you can ignore the warning you get here.

108
00:05:02.620 --> 00:05:04.230
You will see that in the dist file,

109
00:05:04.230 --> 00:05:06.410
you have a bundled js file.

110
00:05:06.410 --> 00:05:08.150
And what you see in there also already

111
00:05:08.150 --> 00:05:09.960
is quite unreadable code,

112
00:05:09.960 --> 00:05:14.060
because we have this minification in action here actually.

113
00:05:14.060 --> 00:05:18.680
So this actually already is this optimized code as well.

114
00:05:18.680 --> 00:05:21.410
Now before we see how we can also work

115
00:05:21.410 --> 00:05:23.490
with different configurations here,

116
00:05:23.490 --> 00:05:26.120
let's actually go to the index.html file,

117
00:05:26.120 --> 00:05:27.510
and adjust our imports here

118
00:05:27.510 --> 00:05:30.350
and point bundle.js,

119
00:05:30.350 --> 00:05:32.220
and for the moment, since we're not using

120
00:05:32.220 --> 00:05:35.140
Webpack Dev Server yet, let's run npm start

121
00:05:35.140 --> 00:05:38.480
to bring up that index.html file again.

122
00:05:38.480 --> 00:05:40.510
And if you now reload this page,

123
00:05:40.510 --> 00:05:44.890
you see this works!

124
00:05:44.890 --> 00:05:46.610
If we enter something here,

125
00:05:46.610 --> 00:05:49.230
our project works the way it should,

126
00:05:49.230 --> 00:05:52.030
and it imports the bundled js file here,

127
00:05:52.030 --> 00:05:56.200
so only one file instead of all these individual files.

128
00:05:56.200 --> 00:05:59.020
And that already is an enhancement.

129
00:05:59.020 --> 00:06:01.640
Here we already have the bundled code

130
00:06:01.640 --> 00:06:05.410
which avoids all these unnecessary htp requests.

131
00:06:05.410 --> 00:06:07.690
And if you go to the sources tab by the way,

132
00:06:07.690 --> 00:06:09.420
and you wanna debug your code,

133
00:06:09.420 --> 00:06:11.250
you'll find this Webpack folder,

134
00:06:11.250 --> 00:06:12.770
and in there a source folder,

135
00:06:12.770 --> 00:06:15.300
and there you can go to your TypeScript files.

136
00:06:15.300 --> 00:06:19.090
And for example, here, on project-input,

137
00:06:19.090 --> 00:06:22.110
you can also set a break point here

138
00:06:22.110 --> 00:06:24.970
on gatherUserInput, and if you now press the button,

139
00:06:24.970 --> 00:06:26.190
it pauses there,

140
00:06:26.190 --> 00:06:27.680
and you can debug your code.

141
00:06:27.680 --> 00:06:29.650
And that's the source maps coming in,

142
00:06:29.650 --> 00:06:31.200
which really help us developing

143
00:06:31.200 --> 00:06:34.050
and which make our life as a developer easier.

144
00:06:34.050 --> 00:06:37.520
We got this optimized code, but thanks to the source maps

145
00:06:37.520 --> 00:06:40.750
we can debug our original TypeScript code here.

146
00:06:40.750 --> 00:06:43.260
So we already have a pretty amazing setup,

147
00:06:43.260 --> 00:06:46.280
which gives us a lot of optimizations already,

148
00:06:46.280 --> 00:06:48.440
now let's finish this and make sure

149
00:06:48.440 --> 00:06:52.050
we actually have the Webpack Dev Server included,

150
00:06:52.050 --> 00:06:54.440
and we then actually have two workflows,

151
00:06:54.440 --> 00:06:58.443
one for production, and one for development.

