WEBVTT

00:02.273 --> 00:05.100
Người hướng dẫn: Chúng tôi đã xem xét rất nhiều trình trang trí,

00:05.100 --> 00:06.190
cách bạn làm việc với chúng,

00:06.190 --> 00:07.340
cách bạn có thể định cấu hình

00:07.340 --> 00:09.940
chúng, cách bạn có thể thực hiện công việc với chúng, bạn có

00:09.940 --> 00:11.367
thể làm gì với chúng.

00:11.367 --> 00:15.260
Điều này hy vọng sẽ cho bạn thấy sự phức tạp nhưng cũng là sức mạnh của những người

00:15.260 --> 00:17.340
trang trí và cách bạn có thể nghĩ về chúng,

00:17.340 --> 00:18.898
cách bạn có thể sử dụng chúng.

00:18.898 --> 00:22.370
Bạn không chỉ có thể tạo các công cụ trang trí của riêng

00:22.370 --> 00:24.208
mình mà còn có một hệ sinh thái

00:24.208 --> 00:28.590
phong phú gồm các gói và khung dựa trên các công cụ trang trí.

00:28.590 --> 00:30.670
Ví dụ, trình xác nhận lớp.

00:30.670 --> 00:32.789
Nếu bạn tìm kiếm "trình xác thực lớp

00:32.789 --> 00:35.480
ts", bạn sẽ tìm thấy một gói về cơ bản có triển

00:35.480 --> 00:37.960
khai phức tạp hơn logic xác thực tùy chỉnh

00:37.960 --> 00:41.680
của riêng chúng tôi mà chúng tôi đã làm việc trên đó.

00:41.680 --> 00:44.140
Gói này có thể được thêm vào bất kỳ dự án nào bạn đang

00:44.140 --> 00:45.960
thực hiện và sau đó bạn có thể chỉ cần nhập

00:45.960 --> 00:48.030
một loạt các nhà máy trang trí hoặc nhà máy

00:48.030 --> 00:49.930
trang trí, như bạn có thể thấy, vì chúng

00:49.930 --> 00:51.660
tôi thực hiện chúng ở đây.

00:51.660 --> 00:53.350
Thêm chúng vào các thuộc tính của

00:53.350 --> 00:55.650
bạn, có hoặc không có một số cấu hình bổ sung, tùy

00:55.650 --> 00:57.530
thuộc vào trình xác thực đó là gì và đằng

00:57.530 --> 00:59.163
sau hậu trường, điều này sẽ quản

00:59.163 --> 01:01.530
lý một sổ đăng ký như vậy, bạn có thể nói, chẳng hạn

01:01.530 --> 01:03.509
như đối tượng cấu hình cuối cùng, lưu trữ

01:03.509 --> 01:07.070
thiết lập trình xác thực của bạn cho mục đích khác thuộc tính trong các

01:07.070 --> 01:08.950
lớp khác nhau của bạn.

01:08.950 --> 01:11.810
Và sau đó, cung cấp cho bạn một phương thức xác thực,

01:11.810 --> 01:14.150
mà bạn cũng nhập từ gói, mà bạn có thể thực

01:14.150 --> 01:16.656
thi và chuyển đối tượng của mình tới, để áp

01:16.656 --> 01:19.020
dụng tất cả logic xác thực mà bạn đã thiết

01:19.020 --> 01:20.540
lập trong lớp.

01:20.540 --> 01:22.840
Vì vậy, về cơ bản, nó đang thực hiện những gì chúng

01:22.840 --> 01:26.000
tôi vừa làm, chỉ với nhiều trình xác thực hơn và với tất cả các công việc

01:26.000 --> 01:27.830
nặng nhọc đã được thực hiện cho bạn.

01:27.830 --> 01:29.170
Nhưng tất nhiên sẽ giúp hiểu

01:29.170 --> 01:30.630
cách thức hoạt động của nó nói chung,

01:30.630 --> 01:32.370
vì chúng tôi đã tự xây dựng nó ở đây, trong

01:32.370 --> 01:34.143
một phiên bản ngây thơ hơn.

01:35.010 --> 01:36.490
Bây giờ bên cạnh gói này, tất nhiên,

01:36.490 --> 01:38.370
chúng tôi cũng có Angular chẳng hạn.

01:38.370 --> 01:39.541
Angular là một khung,

01:39.541 --> 01:41.502
mà tôi đã đề cập trước đó, phụ thuộc

01:41.502 --> 01:43.942
rất nhiều vào các trình trang trí, như

01:43.942 --> 01:46.480
trình trang trí thành phần này, cho phép

01:46.480 --> 01:49.214
bạn gán một số mã HTML động, mã này cũng khai

01:49.214 --> 01:51.301
thác các thuộc tính của các lớp

01:51.301 --> 01:54.720
của bạn, với một cú pháp đặc biệt được thêm vào bởi Angular,

01:54.720 --> 01:56.780
để sau đó hiển thị một số nội dung

01:56.780 --> 02:00.170
động lên màn hình.

02:00.170 --> 02:01.780
Vì vậy, ở đây Angular không chỉ

02:01.780 --> 02:03.360
cung cấp các bộ trang trí này,

02:03.360 --> 02:06.250
mà các bộ trang trí là một phần cốt lõi của Angular.

02:06.250 --> 02:07.280
Và cuối cùng nhưng không

02:07.280 --> 02:10.130
kém phần quan trọng, tôi cũng muốn cho bạn xem NestJS.

02:10.130 --> 02:13.190
NestJS là một khung JavaScript phía máy

02:13.190 --> 02:15.487
chủ cho Node. js, cũng sử dụng

02:15.487 --> 02:20.010
rất nhiều bản in và điều này cũng bao gồm các trình trang trí.

02:20.010 --> 02:23.270
Ở đó, bạn sử dụng các bộ trang trí để xác định bộ điều khiển

02:23.270 --> 02:26.730
và định tuyến, các phương thức mà người dùng phải sử dụng

02:26.730 --> 02:30.400
trên các yêu cầu HTTP của họ, để kích hoạt các chức năng nhất định

02:30.400 --> 02:32.687
và cũng có nhiều bộ trang trí khác mà bạn

02:32.687 --> 02:35.660
có thể sử dụng để trích xuất dữ liệu từ các yêu cầu đến,

02:35.660 --> 02:36.890
v.v.

02:36.890 --> 02:39.150
Vì vậy, ở đây, khung này cũng cung

02:39.150 --> 02:41.370
cấp tất cả các công cụ trang trí này

02:41.370 --> 02:44.640
cho bạn, để bạn có thể chỉ cần thêm chúng vào thuộc

02:44.640 --> 02:46.257
tính, phương thức, lớp của

02:46.257 --> 02:48.590
mình và thêm chức năng bổ sung, mà sau

02:48.590 --> 02:50.060
đó khung cũng sẽ tính đến

02:50.060 --> 02:52.828
khi nó thực thi mã của bạn.

02:52.828 --> 02:55.417
Vì vậy, ở đây một lần nữa, các bộ trang

02:55.417 --> 02:59.070
trí được sử dụng cho lập trình siêu dữ liệu để thêm cấu

02:59.070 --> 03:02.977
hình bổ sung, logic bổ sung, sau đó được tính đến bởi, trong

03:02.977 --> 03:05.700
trường hợp này, mã ngoài khung, mã thực

03:05.700 --> 03:07.580
thi mã của bạn hoặc mã hoạt động

03:07.580 --> 03:09.886
cùng với mã của bạn.

03:09.886 --> 03:12.000
Và đó là nó cho trang trí.

03:12.000 --> 03:14.110
Điều này hy vọng cung cấp cho bạn một cái nhìn tổng

03:14.110 --> 03:16.090
quan tốt về những gì bạn có thể làm với các công

03:16.090 --> 03:17.830
cụ trang trí, tại sao chúng có thể rất hữu

03:17.830 --> 03:19.563
ích và cách chúng thường hoạt động.
