WEBVTT

00:02.170 --> 00:03.003
Instructeur: Dus nu

00:03.003 --> 00:04.760
we een goed geconfigureerd project hebben,

00:04.760 --> 00:08.130
laten we een beetje dieper duiken in hoe je je project kunt debuggen of hoe je een

00:08.130 --> 00:10.500
geweldige ontwikkelingsflow kunt hebben.

00:10.500 --> 00:13.560
Aan het begin van deze cursus laat ik mijn basis IDE opstelling

00:13.560 --> 00:14.575
zien.

00:14.575 --> 00:17.750
Zorg ervoor dat je de juiste extensies hebt geïnstalleerd.

00:17.750 --> 00:22.750
Voor TypeScript komt het neer op ESLint, dat u kan helpen bij

00:22.980 --> 00:26.410
het linten van uw TypeScript-code.

00:26.410 --> 00:29.310
Dus bij het verbeteren van de codekwaliteit heb

00:29.310 --> 00:31.620
je misschien extra configuratie nodig

00:31.620 --> 00:33.900
om ESLint effect te laten hebben.

00:33.900 --> 00:36.310
Het kan u helpen bij meer geavanceerde

00:37.220 --> 00:38.570
projecten, maar nog interessanter

00:38.570 --> 00:40.818
dan dat, u wilt echt Prettier gebruiken

00:40.818 --> 00:43.370
om uw code automatisch te formatteren en

00:43.370 --> 00:45.770
een mooi opgemaakte code te hebben en

00:45.770 --> 00:49.870
u wilt misschien Debugger for Chrome eens proberen, want daarmee

00:49.870 --> 00:53.140
kunt u uw TypeScript-bestanden zelfs vanuit VS Code

00:53.140 --> 00:55.810
debuggen via Chrome, maar zonder de Chrome

00:55.810 --> 00:59.440
Dev Tools te gebruiken.

00:59.440 --> 01:01.820
Natuurlijk kun je die ook gebruiken als je

01:01.820 --> 01:02.653
geleerd hebt.

01:02.653 --> 01:05.154
Als je hier sourceMaps inschakelt, wat je

01:05.154 --> 01:07.160
natuurlijk altijd kunt doen, krijg

01:07.160 --> 01:09.240
je ook deze vertaalde bestanden, wat

01:09.240 --> 01:10.429
erg leuk is.

01:10.429 --> 01:14.170
Maar u kunt ook VS Code gebruiken.

01:14.170 --> 01:15.960
U kunt hier onderbrekingspunten

01:15.960 --> 01:17.340
plaatsen, laten we zeggen

01:17.340 --> 01:19.842
in de clickHandler en nu om uw bestanden hier

01:19.842 --> 01:24.842
via VS Code te starten, moet u ook sourceMaps inschakelen, maar we zullen nog steeds

01:26.100 --> 01:28.690
VS Code kunnen gebruiken in plaats van de browser

01:28.690 --> 01:30.950
Dev Tools.

01:30.950 --> 01:34.570
Dus schakel sourceMaps in, plaats uw breekpunt

01:34.570 --> 01:38.930
en ga dan naar Debug, Start Debugging.

01:38.930 --> 01:40.320
Nu, de eerste keer dat u dit uitvoert,

01:40.320 --> 01:42.170
zou het u moeten vragen om de omgeving

01:42.170 --> 01:45.350
en daar met die Debugger voor Chrome extensie geïnstalleerd,

01:45.350 --> 01:47.850
zou u Chrome moeten kunnen kiezen.

01:47.850 --> 01:49.960
Het zal nu naar een laucnh gaan. json bestand waar

01:49.960 --> 01:53.200
je configureert hoe het dat moet lanceren en daar

01:53.200 --> 01:56.740
moet je het wijzen op localhost:3000 omdat dat is waar

01:56.740 --> 01:59.330
onze ontwikkelingsserver draait en natuurlijk

01:59.330 --> 02:04.220
zou dat proces, dus het npm startproces moeten draaien.

02:04.220 --> 02:06.910
Om daar naar localhost:3000 te wijzen en als webRoot,

02:06.910 --> 02:09.740
kun je die placeholder hier laten staan wat betekent

02:09.740 --> 02:11.890
dat deze projectmap wordt verondersteld

02:11.890 --> 02:13.780
de host van je bestanden te zijn wat

02:13.780 --> 02:17.120
het geval is en compileer nu je code zodat de sourceMaps ook

02:17.120 --> 02:19.780
worden gegenereerd na het instellen van de sourceMaps

02:19.780 --> 02:22.470
config op true zodat we deze nu in de JavaScript

02:22.470 --> 02:25.290
code hebben.

02:25.290 --> 02:26.870
Dan met uw breekpunt hier toegevoegd

02:26.870 --> 02:28.400
en uw lancering. json geconfigureerd,

02:28.400 --> 02:30.400
laten we hier debuggen.

02:30.400 --> 02:32.140
Begin nu echt te debuggen en er wordt

02:32.140 --> 02:34.830
nu automatisch een nieuw tabblad geopend.

02:34.830 --> 02:36.020
Dit tabblad wordt gesloten

02:36.020 --> 02:38.730
als u het debuggen afsluit of als u het tabblad

02:38.730 --> 02:41.940
sluit, wordt het debuggen afgesloten.

02:41.940 --> 02:44.590
Daarmee komt u in deze debug-weergave in VS Code

02:44.590 --> 02:46.790
waar u variabelen kunt volgen, bepaalde

02:46.790 --> 02:48.230
expressies kunt bekijken

02:48.230 --> 02:50.120
en de huidige aanroepstapel kunt

02:50.120 --> 02:51.910
zien en als u nu op Klik op mij klikt,

02:51.910 --> 02:54.120
moet u terug naar de editor en wordt de uitvoering

02:54.120 --> 02:56.590
van de code gepauzeerd op uw breekpunt in het

02:56.590 --> 02:59.630
TypeScript-bestand en nu kunt u door het bestand haar

02:59.630 --> 03:01.410
lopen, lokale waarden inspecteren

03:01.410 --> 03:04.540
voor dit sleutelwoord of voor de berichtvariabele, bijvoorbeeld,

03:04.540 --> 03:07.120
script-brede variabelen die u zou kunnen hebben

03:07.120 --> 03:09.750
en globale variabelen waartoe u toegang hebt tot

03:09.750 --> 03:13.320
globale objecten.

03:13.320 --> 03:15.560
U kunt bepaalde uitdrukkingen

03:15.560 --> 03:19.290
bekijken, zoals bericht + meerdere uitroeptekens

03:19.290 --> 03:22.690
en wel, dan kunt u altijd de waarde volgen die hier

03:22.690 --> 03:26.180
in dit venster staat, als u dat zou willen, dus dat

03:26.180 --> 03:27.483
zou werken.

03:27.483 --> 03:30.480
En u kunt de huidige functie-aanroep-stapel zien, die

03:30.480 --> 03:33.010
bijvoorbeeld in de clickHandler zou voorkomen

03:33.010 --> 03:34.710
en nu kunt u met deze besturingselementen

03:34.710 --> 03:37.590
door uw code stappen om naar de volgende stap te gaan,

03:37.590 --> 03:39.800
de volgende functie-aanroep over te slaan,

03:39.800 --> 03:41.500
in de functie-aanroep te stappen

03:41.500 --> 03:43.827
of uit de huidige functie-aanroep te stappen

03:43.827 --> 03:46.710
en de aanroep-stapel, natuurlijk, hier zal zich daaraan

03:46.710 --> 03:49.280
aanpassen en daarmee kunt u dit browser-ding hier

03:49.280 --> 03:51.920
negeren, daarmee kunt u altijd de uitvoering van

03:51.920 --> 03:56.210
de code hervatten door op de afspeelknop te klikken en alleen pauzeren wanneer

03:56.210 --> 04:00.290
u de volgende keer uw breekpunt bereikt.

04:00.290 --> 04:02.080
Dus zo kun je code debuggen.

04:02.080 --> 04:04.050
U kunt een onderbrekingspunt verwijderen door erop te klikken.

04:04.050 --> 04:05.910
Zo kunt u vanuit VS Code code

04:05.910 --> 04:07.310
debuggen met behulp van

04:07.310 --> 04:09.728
de ingebouwde debuggereedschappen,

04:09.728 --> 04:12.450
de Chrome Debugger extensie, afgeleide

04:12.450 --> 04:15.470
configuratie en soureMaps die zijn ingesteld

04:15.470 --> 04:17.743
in uw TypeScript config.
