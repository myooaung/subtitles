WEBVTT

00:02.160 --> 00:06.060
Instruktor: Co więc możemy powiedzieć o walidacji?

00:06.060 --> 00:10.450
No, może zacznijmy od pożądanego efektu końcowego.

00:10.450 --> 00:14.850
Chodzi mi o to, że później mamy jakąś funkcję validate, która

00:14.850 --> 00:17.950
jeszcze nie istnieje, ale że później ją mamy,

00:17.950 --> 00:21.230
do której przekazuję enterTitle, a właściwie

00:21.230 --> 00:25.360
obiekt konfiguracyjny powiedziałbym, gdzie wartością

00:25.360 --> 00:30.300
jest enterTitle, czyli rzecz do walidacji.

00:30.300 --> 00:33.260
Ale gdzie ja wtedy również mam dodatkowe

00:33.260 --> 00:37.350
właściwości, które mówią funkcji validate, jak

00:37.350 --> 00:39.130
to sprawdzić.

00:39.130 --> 00:43.210
Więc na przykład, że mamy wymagane ustawienie na true tutaj,

00:43.210 --> 00:47.009
minLength ustawione na pięć, aby wymusić pięć znaków

00:47.009 --> 00:48.360
i tak dalej.

00:48.360 --> 00:50.040
I wtedy robimy to tutaj dla wszystkich

00:50.040 --> 00:51.540
trzech wejść, a validate

00:51.540 --> 00:53.900
jest funkcją, która zwraca true, jeśli

00:53.900 --> 00:56.620
jest ważna i false, jeśli nie jest ważna, a na

00:56.620 --> 00:59.580
koniec możemy mieć coś takiego.

00:59.580 --> 01:04.580
Albo enteredDescription i enterPeople, to z grubsza

01:04.790 --> 01:06.790
byłby pomysł.

01:06.790 --> 01:09.210
Oczywiście jest to tylko jeden ze sposobów realizacji

01:09.210 --> 01:11.703
tego, ale jest to sposób, który dość mocno mi się podoba.

01:12.600 --> 01:15.320
W tym celu, na górze pliku,

01:15.320 --> 01:19.470
dodam trochę logiki walidacji.

01:19.470 --> 01:22.380
I, znowu, jest wiele sposobów, aby to zrobić.

01:22.380 --> 01:24.390
Przede wszystkim zacznę od zdefiniowania

01:24.390 --> 01:27.840
struktury takiego walidowalnego obiektu.

01:27.840 --> 01:31.280
Więc ten obiekt przekazujemy do funkcji validate,

01:31.280 --> 01:33.430
bo oczywiście to zawsze musi mieć

01:33.430 --> 01:37.820
podobną strukturę z pewną ilością właściwości, które mogą się

01:37.820 --> 01:40.100
tam znaleźć i pewnymi typami właściwości,

01:40.100 --> 01:42.410
żeby funkcja validate faktycznie

01:42.410 --> 01:44.950
wiedziała, z czym pracuje i mogła poprawnie

01:44.950 --> 01:49.870
wyodrębnić właściwości i tak dalej.

01:49.870 --> 01:52.850
Zacznę więc od zdefiniowania interfejsu.

01:52.850 --> 01:55.380
Możemy też pójść w stronę niestandardowego typu, całkowicie

01:55.380 --> 01:56.550
zależnego od Ciebie.

01:56.550 --> 01:58.690
Ponieważ zdefiniuję strukturę obiektu,

01:58.690 --> 02:02.793
zawsze jestem większym fanem definiowania tylko interfejsu.

02:03.810 --> 02:06.700
Nazwę ją tutaj Validatable, ponieważ

02:06.700 --> 02:09.940
opisuje ona obiekt validatable, a także

02:09.940 --> 02:13.300
będzie miała wartość, która powinna być

02:13.300 --> 02:17.140
ciągiem znaków lub również liczbą.

02:17.140 --> 02:18.980
Będzie miał wymagany prop, który

02:18.980 --> 02:21.240
będzie miał wartość Boolean, więc

02:21.240 --> 02:22.630
true lub false.

02:22.630 --> 02:26.470
A następnie powiedzmy, że obsługujemy walidację minLength,

02:26.470 --> 02:28.212
która powinna być liczbą,

02:28.212 --> 02:30.220
maxLength, która powinna być liczbą,

02:30.220 --> 02:32.510
a także w przypadku, gdy otrzymujemy

02:32.510 --> 02:35.240
liczbę, wartość min i max.

02:35.240 --> 02:37.417
Różnica w stosunku do minLength i maxLength

02:37.417 --> 02:40.310
polega na tym, że to sprawdza długość ciągu, to wartość

02:40.310 --> 02:42.320
liczby, jeśli jest powyżej określonej

02:42.320 --> 02:43.960
liczby lub poniżej określonego

02:43.960 --> 02:46.010
maksimum.

02:46.010 --> 02:48.870
To są nieruchomości, które chcę wspierać.

02:48.870 --> 02:50.470
Teraz oprócz wartości,

02:50.470 --> 02:52.140
wszystkie powinny być jednak

02:52.140 --> 02:54.410
opcjonalne, co możemy wymusić dodając

02:54.410 --> 02:57.650
znak zapytania po nazwach.

02:57.650 --> 03:00.070
Przy okazji, alternatywą dla użycia znaku zapytania

03:00.070 --> 03:02.720
jest dopuszczenie niezdefiniowanych wartości.

03:02.720 --> 03:04.880
Znak zapytania w zasadzie robi to samo.

03:04.880 --> 03:09.370
Mówi, że wymagane jest albo Boolean albo niezdefiniowane.

03:09.370 --> 03:12.610
Tak więc teraz mamy interfejs validatable.

03:12.610 --> 03:13.893
Co możemy z tym zrobić?

03:14.930 --> 03:17.893
Cóż, teraz z utworzonym interfejsem

03:18.830 --> 03:21.330
możemy stworzyć tę funkcję, tę funkcję

03:21.330 --> 03:24.220
walidacji, której szukam.

03:24.220 --> 03:27.410
To powinno uzyskać taki obiekt validatable.

03:27.410 --> 03:32.410
Tak więc ValidatableInput jest typu Validatable.

03:32.410 --> 03:33.450
To jest mój pomysł tutaj.

03:33.450 --> 03:36.400
Otrzymuje więc obiekt, który ma taką strukturę.

03:36.400 --> 03:38.270
I teraz w nim możemy sprawdzić,

03:38.270 --> 03:41.670
czy wszystkie te właściwości istnieją, a następnie

03:41.670 --> 03:44.810
wykonać odpowiednią walidację.

03:44.810 --> 03:46.150
Teraz co dokładnie robimy

03:46.150 --> 03:48.200
w funkcji validate dlatego?

03:48.200 --> 03:49.033
No i na koniec tutaj

03:49.033 --> 03:50.930
chcę stworzyć zmienną, isValid, która początkowo

03:50.930 --> 03:52.330
ma wartość true.

03:52.330 --> 03:54.030
Więc domyślne założenie jest takie,

03:54.030 --> 03:55.510
że to co dostajemy jest prawdą.

03:55.510 --> 03:57.430
Ale ustawimy ją na false, gdy tylko

03:57.430 --> 04:01.330
przynajmniej jedna z naszych kontroli się nie powiedzie.

04:01.330 --> 04:03.480
A teraz zacznijmy od pierwszej kontroli.

04:03.480 --> 04:06.410
Zobaczmy, czy validatableInput tutaj,

04:06.410 --> 04:08.220
ten argument, który otrzymujemy,

04:08.220 --> 04:11.380
jeśli to ma wymagany prop?

04:11.380 --> 04:13.260
Jeśli to nie jest nieokreślone.

04:13.260 --> 04:16.490
Jeśli jest to ustawione i jeśli jest to prawda dlatego,

04:16.490 --> 04:18.630
oznacza to, że wartość jest wymagana

04:18.630 --> 04:20.630
i nie może być pusta.

04:20.630 --> 04:22.080
Więc teraz tutaj, możemy

04:22.080 --> 04:26.160
ustawić isValid równe isValid i sposób działania JavaScript,

04:26.160 --> 04:27.700
to zapewnia, że nowa

04:27.700 --> 04:30.550
wartość isValid będzie fałszywa, jeśli

04:30.550 --> 04:34.330
rzecz po i jest fałszywa.

04:34.330 --> 04:36.870
Ponieważ jeśli przynajmniej jedna z tych dwóch rzeczy jest fałszywa,

04:36.870 --> 04:38.660
ogólna wartość będzie fałszywa.

04:38.660 --> 04:40.500
Teraz isValid początkowo jest

04:40.500 --> 04:44.070
prawdą, ale jeśli rzecz po operatorze logicznym i jest fałszywa,

04:44.070 --> 04:46.300
isValid będzie fałszywy.

04:46.300 --> 04:48.700
A na koniec zwrócę isValid.

04:48.700 --> 04:50.040
Co zatem teraz dodajemy

04:50.040 --> 04:53.550
po dwóch symbolach ampersandu?

04:53.550 --> 04:57.290
Cóż, chcę sprawdzić, czy validatableInput. wartość, jeśli jest

04:57.290 --> 04:58.170
pusta.

04:58.170 --> 05:00.530
A do tego możemy go przyciąć

05:00.530 --> 05:04.210
i sprawdzić długość, czy może?

05:04.210 --> 05:05.630
Cóż, problem polega na tym, że

05:05.630 --> 05:07.510
nie wiemy, czy wartość jest ciągiem.

05:07.510 --> 05:09.090
Jest to ciąg znaków lub liczba.

05:09.090 --> 05:10.910
Więc nie jest gwarantowane, że będzie

05:10.910 --> 05:12.140
to ciąg, a zatem metoda

05:12.140 --> 05:14.100
trim nie zawsze jest dostępna.

05:14.100 --> 05:17.570
Teraz są różne sposoby na obejście tego problemu.

05:17.570 --> 05:19.600
Moglibyśmy dodać strażnika typu, moglibyśmy

05:19.600 --> 05:23.390
sprawdzić, czy typeof validatableInput. wartość jest równa łańcuchowi

05:25.250 --> 05:30.250
i wykonaj to sprawdzenie tylko wtedy, gdy tak jest.

05:30.920 --> 05:33.040
Ale właściwie to byłoby trochę zbędne.

05:33.040 --> 05:36.120
To co możemy tutaj zrobić jest bardzo proste.

05:36.120 --> 05:37.257
Możemy po prostu powiedzieć

05:37.257 --> 05:39.140
"cóż, przekonwertuj to na ciąg znaków. Jeśli była to liczba, teraz znowu jest to ciąg znaków.

05:39.140 --> 05:41.370
Jeśli był to ciąg, nic się nie zmieniło.

05:41.370 --> 05:44.170
I dzięki temu, robimy to.

05:44.170 --> 05:45.900
Teraz muszę tylko dodać moją kontrolę

05:45.900 --> 05:47.950
tutaj, aby sprawdzić, czy to jest zero.

05:47.950 --> 05:50.360
A dokładnie, jeśli nie jest zerowa.

05:50.360 --> 05:53.463
Więc jeśli nie jest to zero, to zwróci

05:54.680 --> 05:56.810
to true, a isValid pozostanie

05:56.810 --> 05:58.740
true.

05:58.740 --> 06:00.500
Jeśli jest zerowy, więc jeśli ma długość

06:00.500 --> 06:02.760
zero, jeśli jest pusty, to zwróci false, a zatem

06:02.760 --> 06:04.940
isValid stanie się fałszywy.

06:04.940 --> 06:06.890
I sprawdzamy to tylko wtedy, gdy

06:06.890 --> 06:08.280
wymagana kontrola jest

06:08.280 --> 06:11.190
oznaczona ustawieniem required na true.

06:11.190 --> 06:13.530
To jest pierwsza kontrola, którą chcę tu przeprowadzić.

06:13.530 --> 06:15.560
Nie jest to oczywiście jedyny taki przypadek.

06:15.560 --> 06:17.660
Możemy kontynuować i sprawdzić, czy

06:17.660 --> 06:18.950
validatableInput. minLength jest ustawiony,

06:18.950 --> 06:23.880
jeśli minLength jest ustawiony, to ten ciąg, który

06:23.880 --> 06:25.190
otrzymamy powinien mieć określoną

06:25.190 --> 06:27.050
minimalną długość.

06:27.050 --> 06:28.780
Co ważne, ciąg powinien mieć określoną

06:28.780 --> 06:30.440
minimalną długość.

06:30.440 --> 06:31.620
Nie zależy nam tutaj na liczbach,

06:31.620 --> 06:33.600
nie sprawdzamy minimalnej wartości liczby.

06:33.600 --> 06:37.060
Więc tutaj możemy faktycznie dodać strażnika typu, możemy

06:37.060 --> 06:40.390
włączyć go do tego sprawdzenia i sprawdzić, czy typeof

06:40.390 --> 06:42.320
validatableInput. wartość jest równa

06:42.320 --> 06:46.910
łańcuchowi.

06:46.910 --> 06:48.460
Jeśli nie jest, nie musimy wchodzić w to sprawdzanie

06:48.460 --> 06:50.357
if, bo wtedy nie ma czego sprawdzać.

06:50.357 --> 06:52.570
Jeśli nasza wartość jest liczbą, nie przejmujemy się tym.

06:52.570 --> 06:55.330
Jeśli ustawimy min długość dla liczby, w zasadzie

06:55.330 --> 06:57.710
pomijamy to sprawdzenie, ponieważ nie ma

06:57.710 --> 06:59.330
to większego sensu.

06:59.330 --> 07:01.890
Jeśli jednak mamy ciąg znaków, a minLength

07:01.890 --> 07:03.420
jest ustawione, to chcę

07:03.420 --> 07:05.663
ustawić isValid równe isValid i,

07:06.570 --> 07:10.053
a następnie ponownie, nasze sprawdzenie.

07:11.181 --> 07:12.600
A sprawdzenie

07:12.600 --> 07:16.580
tutaj to czy validatableInput. wartość, która wiemy, że jest ciągiem w tym momencie

07:16.580 --> 07:20.810
tutaj, długość, jest większa

07:20.810 --> 07:24.070
niż validatableInput. minLength.

07:24.070 --> 07:28.520
Czyli większy niż wartość, która została tu zdefiniowana.

07:28.520 --> 07:31.660
Teraz jednak mamy tu jeden potencjalny problem,

07:31.660 --> 07:33.920
a czy widzisz, który to może być?

07:33.920 --> 07:36.163
To powinno ogólnie działać, ale zawiedzie, jeśli

07:37.030 --> 07:38.630
minLength jest ustawiony na zero.

07:38.630 --> 07:42.210
Intencją dewelopera ustawiającego go na zero prawdopodobnie

07:42.210 --> 07:45.760
nie jest pominięcie tego sprawdzenia, ale sprawdzenie,

07:45.760 --> 07:50.170
czy rzeczywiście mamy minimalną długość zerową.

07:50.170 --> 07:51.960
Cóż, prawdopodobnie jest to zbędne sprawdzenie,

07:51.960 --> 07:53.800
ponieważ w zasadzie sprawdza, czy w ogóle

07:53.800 --> 07:57.260
mamy coś, co już robimy z wymaganym sprawdzeniem.

07:57.260 --> 07:59.300
Nie jest to więc wielki problem.

07:59.300 --> 08:01.330
Mimo to, jeśli chcesz być super bezpieczny

08:01.330 --> 08:05.470
tutaj, powinniśmy faktycznie sprawdzić, czy validatableInput.

08:05.470 --> 08:05.470
minLength nie jest równa undefined.

08:05.470 --> 08:10.470
Lub not equal to null, z jednym

08:10.640 --> 08:14.910
znakiem równości, obejmuje to null i undefined,

08:14.910 --> 08:17.130
tak działa JavaScript.

08:17.130 --> 08:18.890
Jest to nieco bezpieczniejsze, ponieważ

08:18.890 --> 08:20.470
teraz upewniamy się, że zawsze uruchamiamy

08:20.470 --> 08:23.010
to sprawdzenie, nawet jeśli minLength jest ustawiony na

08:23.010 --> 08:25.140
zero, co jest wartością falsy.

08:25.140 --> 08:27.222
Ponownie, możesz argumentować, czy ma to

08:27.222 --> 08:29.740
sens, ponieważ jest to w zasadzie ta sama kontrola,

08:29.740 --> 08:32.270
co tam na górze, ale nadal, tutaj chcę ją wykonać.

08:32.270 --> 08:34.930
Tak więc to jest minLength.

08:34.930 --> 08:36.790
Teraz skopiuję to i w zasadzie zrobię

08:36.790 --> 08:38.130
to samo dla maxLength.

08:38.130 --> 08:40.720
Więc maxLength tutaj jest również sprawdzany,

08:40.720 --> 08:44.350
również tutaj i również tylko dla ciągów.

08:44.350 --> 08:46.870
I oczywiście tutaj po prostu musimy to przywrócić.

08:46.870 --> 08:49.280
Chcemy się upewnić, że długość wartości, która jest

08:49.280 --> 08:52.380
dostarczana, jest poniżej naszej maksymalnej długości.

08:52.380 --> 08:55.173
No, a teraz zostały nam jeszcze dwie kontrole dla

08:56.810 --> 08:58.760
wartości min i max, które mają sens

08:58.760 --> 09:00.160
tylko dla liczby.

09:00.160 --> 09:03.310
Więc tutaj dodam kolejną kontrolę i sprawdzę,

09:03.310 --> 09:05.150
czy validatableInput. min nie jest równe

09:05.150 --> 09:08.280
null.

09:09.720 --> 09:11.100
Ponownie, nie sprawdzam tylko prawdziwości,

09:11.100 --> 09:13.820
ponieważ to miałoby problemy z wartością zerową.

09:13.820 --> 09:17.050
A następnie sprawdzę, czy typ validatableInput. wartość jest równa

09:17.050 --> 09:21.770
liczbie.

09:21.770 --> 09:23.250
Ponieważ nie widzę zbyt wiele

09:23.250 --> 09:25.640
sensu w sprawdzaniu tego dla ciągu.

09:25.640 --> 09:26.760
Jeśli chcesz sprawdzić, czy jest to

09:26.760 --> 09:28.020
ciąg, oczywiście możesz to pominąć.

09:28.020 --> 09:29.680
Następnie musisz tylko upewnić się,

09:29.680 --> 09:32.120
że konwertujesz wartość na liczbę, gdy używasz

09:32.120 --> 09:34.380
jej w kontroli, którą zaraz napiszemy.

09:34.380 --> 09:35.970
Kontrola, którą mamy zamiar napisać,

09:35.970 --> 09:37.220
ponownie używa starej wartości

09:37.220 --> 09:39.740
isValid i łączy ją z nową kontrolą, aby następnie przechowywać

09:39.740 --> 09:41.500
ją z powrotem w isValid.

09:41.500 --> 09:44.000
A nowy check powinien teraz dobrze uwzględnić

09:44.000 --> 09:47.210
naszą liczbę i sprawdzić czy jest większa od wartości

09:47.210 --> 09:48.730
min.

09:48.730 --> 09:54.650
Więc tutaj sprawdzam, czy validatableInput. jest większa niż validatableInput.

09:54.650 --> 09:54.650
min.

09:54.650 --> 09:58.690
I teraz możemy to powtórzyć dla

09:58.690 --> 10:02.010
max, więc tutaj potrzebujemy max i tutaj też potrzebujemy

10:02.010 --> 10:06.190
max i musimy to tutaj zmienić na mniejszy niż symbol.

10:06.190 --> 10:10.363
Dzięki temu sprawdzamy wszystkie różne scenariusze, jakie

10:11.920 --> 10:13.230
można tu mieć.

10:13.230 --> 10:16.930
I zwracamy isValid.

10:16.930 --> 10:18.710
Teraz musimy tylko stworzyć obiekty, które

10:19.840 --> 10:21.600
przestrzegają tego interfejsu, aby następnie

10:21.600 --> 10:23.630
wysłać je do funkcji validate.

10:23.630 --> 10:26.573
W tym celu zejdźmy do project input,

10:28.160 --> 10:31.360
a tam w gatherUserInput chcę skonstruować

10:31.360 --> 10:34.000
mój validatable object.

10:34.000 --> 10:36.360
Side note, oprócz interfejsu, oczywiście mogliśmy

10:36.360 --> 10:38.420
również stworzyć tutaj klasę, a następnie moglibyśmy

10:38.420 --> 10:40.870
ją instancjonować za pomocą nowego słowa kluczowego,

10:40.870 --> 10:43.570
ale wszystko to dla praktyki i celów demonstracyjnych tutaj

10:43.570 --> 10:46.070
chcę pokazać, jak to działa z interfejsem.

10:46.070 --> 10:48.990
Więc tutaj mamy nasz titleValidatable,

10:48.990 --> 10:51.900
który powinien być typu Validatable.

10:52.850 --> 10:54.970
I to oczywiście jest obiekt, który

10:54.970 --> 10:56.830
musi mieć właściwość value.

10:56.830 --> 10:58.930
I to jest właśnie nasz enteredTitle.

10:58.930 --> 11:01.020
Nie potrzebuje żadnych innych właściwości,

11:01.020 --> 11:03.550
ale chcę sprawdzić, czy nie jest pusty,

11:03.550 --> 11:06.750
więc ustawimy required na true.

11:06.750 --> 11:08.743
A potem możemy to skopiować

11:09.710 --> 11:12.430
i powtórzyć dla opisu i dla osób.

11:12.430 --> 11:16.270
I tu mamy opis, whoops, wpisany

11:16.270 --> 11:19.250
opis mam na myśli.

11:19.250 --> 11:21.880
Tutaj mamy wpisanych ludzi.

11:21.880 --> 11:24.260
Aby być precyzyjnym tutaj chcę mieć numer.

11:24.260 --> 11:26.230
Konwertuję więc to na liczbę z symbolem plusa.

11:26.230 --> 11:29.020
Wszystkie powinny być wymagane, ale wtedy również

11:29.020 --> 11:30.810
tutaj powiedzmy, że opis powinien

11:30.810 --> 11:32.890
mieć minLength na poziomie pięciu znaków,

11:32.890 --> 11:35.420
a dla osób minimum powinno być jedno, tak abyśmy

11:35.420 --> 11:38.823
mieli przypisane przynajmniej dwie osoby.

11:39.820 --> 11:42.030
Swoją drogą, to od Ciebie zależy, jak to wdrożysz.

11:42.030 --> 11:44.020
Oczywiście, w twojej logice sprawdzania

11:44.020 --> 11:47.200
poprawności, możesz również sprawdzić dla większego równego

11:47.200 --> 11:50.080
mniejszego równego, jeśli chcesz.

11:50.080 --> 11:52.030
To samo dotyczy długości kursu.

11:52.030 --> 11:54.200
Większy równy, mniejszy równy.

11:54.200 --> 11:56.940
To też jest możliwe.

11:56.940 --> 11:58.660
Właściwie to zachowam te zmiany.

11:58.660 --> 12:00.520
Czyli teraz mamy minimum jedną osobę przypisaną,

12:00.520 --> 12:01.920
a maksimum pięć.

12:01.920 --> 12:05.253
Teraz mamy te trzy obiekty validatable i teraz

12:06.100 --> 12:08.500
tutaj, do funkcji validate, przekazujemy

12:08.500 --> 12:11.680
nasz titleValidatable, do drugiego wywołania

12:11.680 --> 12:14.920
funkcji przekazuję descriptionValidatable,

12:14.920 --> 12:16.440
a do trzeciego wywołania

12:16.440 --> 12:21.310
funkcji przekazuję peopleValidatable.

12:21.310 --> 12:24.460
A teraz validate powinno zwrócić true, jeśli wszystkie są poprawne,

12:24.460 --> 12:26.380
a false w przeciwnym razie.

12:26.380 --> 12:29.480
Więc teraz chcę sprawdzić, czy co najmniej jeden

12:29.480 --> 12:32.420
z nich zawodzi, sprawdzając, czy te wszystkie

12:32.420 --> 12:36.580
są fałszywe, dodając wykrzyknik przed nim, aby sprawdzić, czy

12:36.580 --> 12:38.970
to jest fałszywe, czy to jest fałszywe,

12:38.970 --> 12:41.560
czy to jest fałszywe.

12:41.560 --> 12:42.740
I jeśli przynajmniej jeden z nich

12:42.740 --> 12:44.750
jest fałszywy, więc jeśli przynajmniej jedno z wywołań

12:44.750 --> 12:45.730
funkcji validate zwróci

12:45.730 --> 12:47.760
false, zrobimy to tam i pokażemy alert.

12:47.760 --> 12:49.860
I z tego powodu, aby również

12:51.930 --> 12:53.610
przetestować to, przejdę

12:53.610 --> 12:54.860
do indeksu. html, bo tam na wejściu

12:54.860 --> 12:56.270
dla ludzi faktycznie

12:56.270 --> 12:58.210
dopuszczam maksymalnie 10, a

12:58.210 --> 13:00.410
minimalnie zero.

13:00.410 --> 13:01.460
Tak więc w danych wejściowych technicznie możemy wprowadzić niepoprawne wartości.

13:01.460 --> 13:05.120
Oczywiście celowo, abyśmy mogli przetestować

13:05.120 --> 13:06.240
naszą logikę.

13:06.240 --> 13:08.090
A tam na razie zapiszmy wszystko,

13:08.090 --> 13:10.200
kompiluje się bez błędów.

13:10.200 --> 13:11.750
Spróbujmy teraz.

13:11.750 --> 13:13.083
Jeśli kliknę dodaj projekt,

13:13.920 --> 13:16.000
dostaję błąd, który jest dobry.

13:16.000 --> 13:17.430
Teraz wprowadźmy tutaj test, nadal otrzymujemy błąd.

13:17.430 --> 13:21.370
Wprowadźmy test tutaj i pięć tutaj, a

13:21.370 --> 13:24.180
ja nadal otrzymuję błąd.

13:24.180 --> 13:25.390
Bo mój opis jest za krótki.

13:25.390 --> 13:26.870
Jeśli wpiszę jeszcze jeden znak

13:26.870 --> 13:28.160
to rzeczywiście mam min długość

13:28.160 --> 13:29.500
i mogę to stworzyć.

13:29.500 --> 13:31.210
No to teraz wprowadźmy powiedzmy

13:31.210 --> 13:32.640
minus jedną osobę i dobrze

13:32.640 --> 13:34.580
ok. html nie obsługuje tego.

13:34.580 --> 13:37.940
Ale wpiszmy zero lub sześć i dostajemy

13:37.940 --> 13:39.200
błędy.

13:39.200 --> 13:42.040
I tylko jak wpiszę coś pomiędzy jeden

13:42.040 --> 13:43.840
a pięć to działa.

13:43.840 --> 13:46.100
Więc to wydaje się działać tak,

13:46.100 --> 13:49.260
jak powinno, i to jest całkiem dobre.

13:49.260 --> 13:50.240
A to oczywiście tylko jeden

13:50.240 --> 13:51.850
ze sposobów implementacji walidacji.

13:51.850 --> 13:53.570
Ale sposób, który faktycznie jest teraz

13:53.570 --> 13:56.510
dość wielokrotnego użytku, może być używany tak jak ten w różnych

13:56.510 --> 13:59.170
częściach aplikacji, jak również i oczywiście wykorzystuje

13:59.170 --> 14:01.660
typescript i oferuje nam świetne wsparcie i sprawdzanie

14:01.660 --> 14:04.480
typu, aby uniknąć niepotrzebnych błędów.
