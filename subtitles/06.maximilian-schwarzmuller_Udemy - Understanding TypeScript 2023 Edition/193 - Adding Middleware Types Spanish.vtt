WEBVTT

00:02.210 --> 00:04.200
Instructor: Así que tenemos este servidor ficticio

00:04.200 --> 00:05.490
básico en funcionamiento, pero

00:05.490 --> 00:08.380
este servidor no está haciendo nada útil, por supuesto.

00:08.380 --> 00:11.430
Ahora, he dicho que quiero construir una API de descanso muy

00:11.430 --> 00:13.110
simple, y para ello, voy a crear una

00:13.110 --> 00:15.570
nueva subcarpeta en la carpeta de origen, que voy

00:15.570 --> 00:16.830
a llamar rutas.

00:16.830 --> 00:19.870
Allí, añadiré un archivo que debe manejar un cierto

00:19.870 --> 00:22.540
conjunto de rutas de esta API de descanso, y ahora

00:22.540 --> 00:25.710
depende de ti qué tipo de API quieres construir.

00:25.710 --> 00:28.520
Construiré una API de todo aquí, si tomaste la sección

00:28.520 --> 00:30.770
de React en TypeScript, eso te suena familiar

00:30.770 --> 00:32.140
porque allí construimos

00:32.140 --> 00:34.530
una aplicación de todo también, esto está totalmente

00:34.530 --> 00:36.820
separado de esa sección sin embargo, no funcionará

00:36.820 --> 00:38.710
junto con React, por supuesto podrías

00:38.710 --> 00:41.250
conectarlo por tu cuenta, pero aquí construiré

00:41.250 --> 00:43.870
una API de todo tan simple simplemente para que veamos

00:43.870 --> 00:48.350
cómo TypeScript trabaja con Node y Express.

00:48.350 --> 00:51.400
La aplicación que estamos construyendo no es demasiado

00:51.400 --> 00:54.760
compleja, pero contendrá muchos conceptos interesantes.

00:54.760 --> 00:57.080
Así que aquí, vamos a añadir mis rutas

00:57.080 --> 01:01.800
de tareas añadiendo un todos. ts en la carpeta de rutas, y allí, ahora

01:01.800 --> 01:04.570
quiero usar Express. js para registrar

01:04.570 --> 01:06.630
algunas rutas.

01:06.630 --> 01:09.730
Para ello, voy a importar algo de

01:09.730 --> 01:13.700
Express, y ese algo es ahora el router.

01:13.700 --> 01:16.160
Ahora la sintaxis común de JS para eso

01:16.160 --> 01:20.950
típicamente es que importas Express usando require express, y luego

01:20.950 --> 01:23.550
en una nueva línea, a menudo ves código

01:23.550 --> 01:25.673
donde hacemos esto aquí.

01:27.090 --> 01:28.180
Eso es algo que se puede

01:28.180 --> 01:30.130
hacer, pero aquí sólo lo importaré así.

01:31.130 --> 01:34.120
Ahora esto nos da un enrutador, y podemos simplemente llamar

01:34.120 --> 01:36.750
a Router aquí como una función, y esto nos permite registrar

01:36.750 --> 01:39.300
middleware, así que al final, los puntos finales de

01:39.300 --> 01:41.980
las rutas para las solicitudes entrantes donde luego

01:41.980 --> 01:45.540
ejecutamos alguna lógica sobre estas solicitudes.

01:45.540 --> 01:48.980
Ahora para la aplicación de todo, quiero registrar algunas rutas básicas,

01:48.980 --> 01:53.700
una ruta de post en slash nada donde podemos añadir un nuevo todo, así que aquí vamos a necesitar

01:53.700 --> 01:55.760
un poco de código, alguna función que luego

01:55.760 --> 01:58.860
añade un todo en algún lugar, por ahora voy a especificar ningún

01:58.860 --> 02:01.250
código en absoluto, sólo la configuración de la

02:01.250 --> 02:03.380
ruta en general aquí.

02:03.380 --> 02:05.110
Así que tenemos la solicitud de

02:05.110 --> 02:08.770
publicación, a continuación, una solicitud de obtención, obtener

02:08.770 --> 02:12.900
todos los todos digamos, entonces también digamos solicitud de parche

02:12.900 --> 02:15.520
para actualizar un todo, y allí espero obtener

02:15.520 --> 02:19.280
el id, un segmento dinámico en la URL, y luego aquí también una solicitud

02:19.280 --> 02:22.700
de eliminación para eliminar un todo por id.

02:22.700 --> 02:25.720
Estas son mis rutas, y ahora podemos exportar el router

02:25.720 --> 02:28.620
configurado como predeterminado en este archivo.

02:28.620 --> 02:30.930
Ahora no pasará nada en estas rutas, ¿verdad?

02:30.930 --> 02:32.510
No he configurado ninguna función

02:32.510 --> 02:35.830
que se ejecute cuando una solicitud llegue a estos puntos finales,

02:35.830 --> 02:38.620
pero al menos ahora sabemos qué rutas queremos, añadiremos

02:38.620 --> 02:41.740
las funciones en un segundo paso más adelante.

02:41.740 --> 02:44.100
Por ahora, vamos a conectar el router aquí, las rutas configuradas

02:44.100 --> 02:48.320
a nuestro servidor en ejecución aquí en la aplicación. y para ello, simplemente importamos

02:48.320 --> 02:54.290
nuestras, digamos todoRoutes de .

02:54.290 --> 02:54.290
/rutas/todos.

02:56.040 --> 02:58.910
Así que estamos importando ese router exportado en

02:58.910 --> 03:01.610
todos a la aplicación. ts, y ahora aquí, tenemos que

03:01.610 --> 03:03.390
conectarlo a nuestra aplicación Express

03:03.390 --> 03:08.340
en ejecución mediante el uso de app. y digamos que queremos redirigir todas

03:08.340 --> 03:10.800
las peticiones que empiecen por /todos

03:10.800 --> 03:14.600
a nuestras todoRoutes, de modo que las peticiones que tengan

03:14.600 --> 03:17.210
como objetivo una URL diferente no se gestionen

03:17.210 --> 03:18.703
allí.

03:19.920 --> 03:23.730
Hablando de manejo, en la configuración del middleware Express que estamos usando,

03:23.730 --> 03:25.983
también podemos configurar un middleware que

03:25.983 --> 03:29.030
maneje los errores, así que cualquier error que pueda ser lanzado

03:29.030 --> 03:31.660
en cualquier parte de nuestro código, y lo hacemos con

03:31.660 --> 03:33.610
app. uso, y entonces configuramos

03:33.610 --> 03:37.470
una función típica de middleware aquí donde obtenemos la solicitud, la respuesta,

03:37.470 --> 03:40.640
y una función siguiente, y de nuevo, todo esto requiere que usted

03:40.640 --> 03:45.430
sepa algunos Express. js y conocer

03:45.430 --> 03:48.330
Node. js, no me sumergiré en cómo

03:48.330 --> 03:51.160
funciona exactamente el middleware en Express

03:51.160 --> 03:52.970
y qué es el middleware.

03:52.970 --> 03:54.960
Así que esa es una función regular de middleware aquí como

03:54.960 --> 03:57.150
usted debe saber de Express. js, y probablemente

03:57.150 --> 03:59.050
también sepas que hay una alternativa

03:59.050 --> 04:02.310
a esa función, una función que toma cuatro parámetros

04:02.310 --> 04:04.680
donde el primer parámetro es un error

04:04.680 --> 04:07.350
potencial, y ahora esta es una función de

04:07.350 --> 04:10.720
manejo de errores del middleware, que será disparada

04:10.720 --> 04:15.290
automáticamente por Express si en cualquier otro middleware anterior

04:15.290 --> 04:18.750
a este tienes un error.

04:18.750 --> 04:21.200
Así que esta es mi función de manejo de errores del middleware,

04:21.200 --> 04:23.380
y ves, tenemos un montón de errores aquí.

04:23.380 --> 04:26.260
Un montón de errores porque todo esto es de tipo

04:26.260 --> 04:29.030
any y además no estamos usando todos estos valores,

04:29.030 --> 04:33.080
pero déjame aclarar que tipo de tipos tenemos aquí.

04:33.080 --> 04:35.510
Esto será de tipo Error, esto

04:35.510 --> 04:39.890
será de tipo express. Request, o simplemente importas Request

04:39.890 --> 04:43.020
aquí como un extra llamado import from express, esto

04:43.020 --> 04:45.540
también funciona si tienes los tipos Express

04:45.540 --> 04:46.670
instalados que es lo

04:46.670 --> 04:49.310
que hacemos, entonces aquí también tenemos

04:49.310 --> 04:54.310
el Response, y un NextFunction aquí, y entonces podemos ajustar nuestros tipos aquí,

04:54.490 --> 04:56.310
esto es ahora de tipo Request, esto

04:56.310 --> 04:59.230
es de tipo Response, y esto es este NextFunction que

04:59.230 --> 05:01.420
podemos ejecutar para dejar que la petición

05:01.420 --> 05:03.650
continúe su viaje al siguiente middleware

05:03.650 --> 05:06.680
en línea.

05:06.680 --> 05:08.590
Ahora que es nuestro middleware de

05:08.590 --> 05:10.820
manejo de errores, se disparará cada vez

05:10.820 --> 05:13.030
que tengamos un error en uno de nuestros

05:13.030 --> 05:15.000
otros middlewares, y aquí, podríamos

05:15.000 --> 05:17.690
enviar una respuesta con digamos datos JSON donde

05:17.690 --> 05:22.690
tenemos un mensaje que es el error. mensaje, y donde tal vez también se establece,

05:22.855 --> 05:24.630
err. mensaje, y donde

05:24.630 --> 05:28.510
tal vez también establecer un código de estado de 500, y por supuesto, usted

05:28.510 --> 05:29.610
puede tener una funcionalidad

05:29.610 --> 05:32.460
de manejo de errores más elaborada que la que tengo aquí,

05:32.460 --> 05:35.020
pero con eso, hemos añadido nuestras rutas, hemos

05:35.020 --> 05:38.830
añadido nuestro middleware de manejo de errores, por qué no añadimos algo

05:38.830 --> 05:40.670
de lógica a esta API ahora en la próxima

05:40.670 --> 05:43.103
conferencia.
