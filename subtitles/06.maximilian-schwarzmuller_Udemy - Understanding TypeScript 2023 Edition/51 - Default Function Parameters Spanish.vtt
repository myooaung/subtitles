WEBVTT

00:02.170 --> 00:03.830
Limitémonos a las funciones.

00:03.830 --> 00:07.120
Otra buena característica que está disponible en el JavaScript moderno

00:07.120 --> 00:09.450
es que puedes asignar argumentos por defecto a los

00:09.450 --> 00:11.033
parámetros de las funciones.

00:11.880 --> 00:13.830
Digamos que aquí en nuestra función

00:13.830 --> 00:17.720
add, por alguna razón, queríamos un valor por defecto para b.

00:17.720 --> 00:20.180
Así que sabemos que queremos ser capaces de sumar dos números.

00:20.180 --> 00:23.850
Pero en caso de que llames a esta función con un solo número,

00:23.850 --> 00:28.130
asumiremos un valor por defecto para el segundo argumento, o para

00:28.130 --> 00:29.990
el segundo parámetro.

00:29.990 --> 00:32.120
Podemos hacerlo añadiendo un signo de igualdad aquí

00:32.120 --> 00:34.980
en la lista de parámetros y estableciendo nuestro valor por defecto.

00:34.980 --> 00:36.920
Que por supuesto tiene que coincidir con nuestro tipo.

00:36.920 --> 00:40.020
Por ejemplo, uno o cualquiera que sea el valor por defecto.

00:40.020 --> 00:42.770
Y ahora esto nos permite llamar a esta función con

00:42.770 --> 00:44.080
un solo argumento.

00:44.080 --> 00:46.700
Así que podría llamarlo así y TypeScript no se

00:46.700 --> 00:48.830
quejaría porque detecta que tenemos

00:48.830 --> 00:50.200
un argumento por defecto

00:50.200 --> 00:51.860
aquí que se toma por b.

00:51.860 --> 00:53.910
Y por lo tanto aquí obtengo una salida

00:53.910 --> 00:58.910
de seis porque mi b por defecto es uno y añado cinco, lo que hace seis Ahora, una nota

00:59.130 --> 01:03.113
importante sobre los argumentos por defecto aquí.

01:04.010 --> 01:07.090
Tienen que ser los últimos de la lista.

01:07.090 --> 01:10.710
Si asignas un argumento por defecto a, por ejemplo, tendremos

01:10.710 --> 01:12.640
un problema, ¿por qué?

01:12.640 --> 01:15.290
Porque los argumentos por defecto no se omiten cuando

01:15.290 --> 01:16.840
se llama a una función.

01:16.840 --> 01:19.490
Así que si llamo a una función aquí con un argumento,

01:19.490 --> 01:21.990
entonces los argumentos que estoy pasando aquí

01:21.990 --> 01:25.060
se pasan a los parámetros en el mismo orden.

01:25.060 --> 01:27.240
Así que llamar a la función con un argumento,

01:27.240 --> 01:29.900
cinco en este caso, pasa este único argumento al primer

01:29.900 --> 01:32.400
argumento aquí en la lista de parámetros.

01:32.400 --> 01:34.150
Y como el segundo argumento no

01:34.150 --> 01:37.660
se proporciona con un valor por defecto, no es opcional.

01:37.660 --> 01:40.920
Y, por tanto, no aportamos ningún segundo argumento.

01:40.920 --> 01:43.730
Así que TypeScript, o JavaScript en realidad,

01:43.730 --> 01:46.800
no mira la definición de tu función y adivina que probablemente

01:46.800 --> 01:50.650
quieres omitir el argumento por defecto y proporcionar tu valor

01:50.650 --> 01:53.290
al no predeterminado.

01:53.290 --> 01:55.740
En cambio, simplemente se adhiere al orden.

01:55.740 --> 01:59.720
Y, por lo tanto, debe establecer los valores predeterminados de la derecha.

01:59.720 --> 02:01.830
Por lo tanto, asegúrese de que los parámetros

02:01.830 --> 02:04.010
para los que no acepta argumentos por defecto

02:04.010 --> 02:07.523
vienen primero antes de sus parámetros por defecto.
