WEBVTT

00:02.110 --> 00:03.890
Instrutor: Então agora, depois de

00:03.890 --> 00:07.820
todas estas características onde trabalhamos com os próprios tipos, por

00:07.820 --> 00:10.340
assim dizer, onde trabalhamos na verificação

00:10.340 --> 00:13.880
de tipos, tipos de custos, vamos voltar às características que nos

00:13.880 --> 00:16.110
ajudam a montar códigos flexíveis.

00:16.110 --> 00:17.930
É claro, ainda escreva os dois tipos.

00:17.930 --> 00:20.150
Afinal de contas, é datilografia, mas não

00:20.150 --> 00:23.520
tanto focada apenas nos tipos, agora podemos administrá-los.

00:23.520 --> 00:25.830
E para isso, quero começar pelos tipos de

00:25.830 --> 00:29.040
índice, uma característica que nos permite criar objetos

00:29.040 --> 00:31.150
mais flexíveis em relação às propriedades

00:31.150 --> 00:33.010
que eles possam ter.

00:33.010 --> 00:34.485
Agora o que quero dizer com isso?

00:34.485 --> 00:36.813
Digamos que você está escrevendo uma aplicação

00:36.813 --> 00:39.680
onde está validando alguma entrada de usuário.

00:39.680 --> 00:41.810
Portanto, você tem vários campos de

00:41.810 --> 00:44.603
entrada e, dependendo do que o usuário entrar lá

00:44.603 --> 00:46.682
e qual campo é, talvez queira armazenar

00:46.682 --> 00:50.490
e eventualmente mostrar mensagens de erro diferentes.

00:50.490 --> 00:52.520
Por exemplo, se for um campo de e-mail, você

00:52.520 --> 00:54.360
quer verificar quem quer que seja no

00:54.360 --> 00:55.590
e-mail e se não for, então

00:55.590 --> 00:59.830
você quer adicionar uma mensagem de erro apropriada ao recipiente de erro.

00:59.830 --> 01:01.133
Então é com isso que vou começar.

01:01.133 --> 01:06.133
Terei aqui meu recipiente de erro de interface.

01:07.570 --> 01:09.530
E isso deve ser um objeto, por isso

01:09.530 --> 01:11.400
uso uma interface aqui, mas deve

01:11.400 --> 01:14.090
ser flexível em relação ao que ele contém.

01:14.090 --> 01:15.680
Em última análise, meu objetivo

01:15.680 --> 01:17.692
é que com isso possamos tratar objetos

01:17.692 --> 01:20.782
onde temos algum identificador de erro, o que poderia ser o

01:20.782 --> 01:23.700
ideal se o campo de entrada ao qual o erro pertence.

01:23.700 --> 01:26.581
Por exemplo, o e-mail. E depois alguma cadeia

01:26.581 --> 01:31.581
de erros, não um e-mail válido. E então temos outra propriedade.

01:32.130 --> 01:35.610
Digamos nome de usuário e então uma cadeia de erros

01:35.610 --> 01:37.150
pode estar armazenando

01:37.150 --> 01:39.280
esse campo de entrada se o campo

01:39.280 --> 01:41.611
de entrada estiver incorreto.

01:41.611 --> 01:45.770
Deve começar com um personagem.

01:45.770 --> 01:49.170
Algo assim deve ser armazenado naquele objeto.

01:49.170 --> 01:51.992
O problema com isso é que não sei antecipadamente quais

01:51.992 --> 01:55.320
os nomes exatos de propriedade que teremos lá dentro.

01:55.320 --> 01:58.021
Você poderia dizer que teremos e-mail e nome de usuário,

01:58.021 --> 02:01.650
mas por um lado eu quero que este seja um recipiente flexível.

02:01.650 --> 02:03.150
Quero poder usá-lo em qualquer

02:03.150 --> 02:05.350
forma que eu tenha em minha página web.

02:05.350 --> 02:07.560
E eu posso ter diferentes formas com diferentes

02:07.560 --> 02:10.157
entradas com diferentes identificadores.

02:10.157 --> 02:12.741
Portanto, não quero me restringir apenas

02:12.741 --> 02:16.150
a nossos erros de e-mail e nome de usuário.

02:16.150 --> 02:18.461
E, além disso, mesmo que tivéssemos sempre apenas

02:18.461 --> 02:20.859
entradas de e-mail e nome de usuário e quiséssemos

02:20.859 --> 02:23.291
apenas armazenar erros para eles.

02:23.291 --> 02:27.461
O que fazemos se apenas o e-mail for inválido e não o nome de usuário?

02:27.461 --> 02:30.912
Então, é claro que neste objeto poderíamos armazenar um valor nulo

02:30.912 --> 02:34.421
para um nome de usuário, mas eu gostaria apenas de omiti-lo.

02:34.421 --> 02:37.232
Então, nós tínhamos um objeto que só contém

02:37.232 --> 02:40.419
propriedades para insumos onde temos um erro?

02:40.419 --> 02:42.960
Assim, podemos também fazer loop através deste objeto

02:42.960 --> 02:46.260
com um loop de quatro em loop para ler todos os erros que obtivemos,

02:46.260 --> 02:48.200
por exemplo, e não temos nenhuma propriedade

02:48.200 --> 02:51.112
lá dentro que não armazene realmente um erro.

02:51.112 --> 02:53.261
Resumindo, preciso de um objeto

02:53.261 --> 02:56.861
em que esteja bem claro quanto ao tipo de valor.

02:56.861 --> 03:00.260
Deve ser um cordão, mas onde eu não adiantarei

03:00.260 --> 03:02.190
quantas propriedades terei

03:02.190 --> 03:05.320
e que nome as propriedades terão.

03:05.320 --> 03:08.171
E para tal cenário, podemos utilizar tipos de índices.

03:08.171 --> 03:10.760
Você define um tipo de índice usando parênteses rectos aqui.

03:10.760 --> 03:14.730
Lembre-se normalmente escreveríamos um nome de propriedade aqui, mas agora

03:14.730 --> 03:16.280
usamos parênteses rectos.

03:16.280 --> 03:21.280
Então, qualquer nome de sua escolha, por exemplo, chave ou adereço.

03:23.581 --> 03:28.581
Em seguida, um cólon. E depois o tipo de valor do imóvel.

03:29.010 --> 03:30.010
E depois um objeto.

03:30.010 --> 03:33.760
Você não pode ter cordas, números ou símbolos como uma propriedade.

03:33.760 --> 03:37.660
Você, por exemplo, não pode usar booleano aqui. Isso não é permitido.

03:37.660 --> 03:40.504
Mas você pode usar fio aqui.

03:40.504 --> 03:43.190
Com isso, estou simplesmente dizendo que qualquer

03:43.190 --> 03:46.330
objeto que eu esteja construindo com base nesta interface

03:46.330 --> 03:51.083
de recipiente de erro mais tarde deve ter propriedades, que são cordas.

03:52.120 --> 03:53.928
O nome de usuário, por exemplo, seria uma string

03:53.928 --> 03:55.899
válida mesmo que eu não a embrulhe entre aspas.

03:55.899 --> 03:59.980
Em seguida, acrescentamos dois pontos. E depois o tipo de valor, que

03:59.980 --> 04:01.629
é string. Portanto, com isso

04:01.629 --> 04:04.320
digo que não sei o nome exato da propriedade.

04:04.320 --> 04:07.620
Também não conheço a contagem dos bens.

04:07.620 --> 04:10.608
Só sei que todo bem que é adicionado a este

04:10.608 --> 04:13.459
objeto, que se baseia em um recipiente de

04:13.459 --> 04:16.959
erro, deve ter um nome de propriedade que possa ser

04:16.959 --> 04:20.640
interpretado como um fio e o valor do bem também deve

04:20.640 --> 04:23.080
ser um fio. É isso que estou dizendo aqui.

04:23.080 --> 04:28.080
Agora, com isso também podemos acrescentar propriedades pré-definidas,

04:29.560 --> 04:31.906
no entanto, somente se forem do mesmo

04:31.906 --> 04:35.339
tipo que estas aqui. Assim, poderíamos acrescentar uma identificação que é um tipo de cadeia.

04:35.339 --> 04:39.760
E então qualquer objeto que construímos que adere a esta interface deve ter uma propriedade

04:39.760 --> 04:43.360
de identificação e pode adicionar tantas outras propeties quantas quiser,

04:43.360 --> 04:47.370
mas não podemos definir a identificação para um número aqui, por exemplo, porque

04:47.370 --> 04:49.277
temos um tipo de índice aqui.

04:49.277 --> 04:53.033
Portanto, essa é uma restrição que temos se construírmos como objeto.

04:55.240 --> 04:56.550
E agora, qual é a conseqüência?

04:56.550 --> 05:00.080
Agora podemos criar um saco de erro, por exemplo, que é do tipo

05:00.080 --> 05:02.390
recipiente de erro que, portanto, é um objeto

05:02.390 --> 05:05.150
e seria válido assim porque não temos que adicionar

05:05.150 --> 05:07.440
nenhuma propriedade.

05:07.440 --> 05:10.340
Isso é tudo o que é válido. Mas é claro que agora podemos acrescentar algumas.

05:10.340 --> 05:13.380
Por exemplo, e-mail não é um e-mail válido.

05:13.380 --> 05:15.780
E isto não faz mal. Não estaria tudo bem se, em vez

05:15.780 --> 05:17.093
disso, eu atribuísse um número

05:17.093 --> 05:19.133
aqui, porque estamos dizendo que cada propriedade

05:19.133 --> 05:23.001
precisa de um tipo de valor em cadeia. Portanto, devemos usar um fio aqui.

05:23.001 --> 05:25.940
Se eu usar um número aqui, isso funcionaria porque isso

05:25.940 --> 05:28.610
também pode ser interpretado como um fio.

05:28.610 --> 05:30.883
Portanto, também posso usar um número como um tipo chave

05:30.883 --> 05:33.031
aqui, se eu quiser. Sou bastante livre em

05:33.031 --> 05:35.981
relação ao que uso aqui. Se isso mudar o tipo

05:35.981 --> 05:40.981
de adereço aqui para numerar, então você pode fazer isso e isso

05:42.130 --> 05:44.810
seria bom. Mas isso não aconteceria

05:44.810 --> 05:46.470
porque o e-mail não é um número.

05:46.470 --> 05:48.170
Isto não pode ser convertido em um número.

05:48.170 --> 05:51.550
Pode ser tratado como um fio, mas não como um número.

05:51.550 --> 05:54.870
Portanto, é assim que você controla que tipo de propriedades, ou que

05:54.870 --> 05:56.990
nomes de propriedades, você permite.

05:56.990 --> 05:59.493
E aqui eu fiz um para permitir nomes de propriedade de cordas.

05:59.493 --> 06:02.264
Portanto, qualquer coisa que possa ser convertida em uma corda é um

06:02.264 --> 06:04.740
nome de propriedade válido. E então o valor também

06:04.740 --> 06:06.413
tem que ser um fio.

06:06.413 --> 06:08.021
E como eu disse, é claro, agora

06:08.021 --> 06:10.632
podemos acrescentar aqui múltiplos valores,

06:10.632 --> 06:12.830
múltiplos valores eu deveria dizer.

06:12.830 --> 06:17.263
Deve começar com um caráter capital.

06:18.170 --> 06:21.220
Portanto, este é agora um saco de erro que poderíamos construir

06:21.220 --> 06:22.722
com a ajuda de um recipiente

06:22.722 --> 06:25.392
de erro, o que nos dá esta flexibilidade extra que

06:25.392 --> 06:27.522
não precisamos saber antecipadamente

06:27.522 --> 06:30.740
quais nomes de propriedades queremos usar e quantas propriedades

06:30.740 --> 06:32.653
precisamos.
