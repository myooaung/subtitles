WEBVTT

00:02.100 --> 00:04.390
المعلم: الآن بالطبع ، في تطبيقات

00:04.390 --> 00:08.640
React الأكبر ، أنت تعمل بأكثر من مجرد useRef و useState.

00:08.640 --> 00:10.950
لفهم كيفية استخدامك لـ TypeScript هناك ، من

00:10.950 --> 00:13.460
المفيد دائمًا أن تقوم ببساطة بالمرور فوق الوظائف

00:13.460 --> 00:15.180
التي تطلبها ، وبالتالي فإن الخطافات

00:15.180 --> 00:17.090
الأخرى التي تعمل معها.

00:17.090 --> 00:20.010
على سبيل المثال ، إذا كنت بحاجة إلى أداة useEffect

00:20.010 --> 00:22.660
هنا ، في مكون NewTodo ، لأي سبب من الأسباب

00:22.660 --> 00:26.330
، فيمكنك تسميتها وتحريك مؤشر الماوس فوقها بعد ذلك ، لفهم

00:26.330 --> 00:29.010
الأنواع التي تعمل بها.

00:29.010 --> 00:30.960
على سبيل المثال ، أن الوسيطة الأولى

00:30.960 --> 00:33.720
هي EffectCallback ، وهي دالة خاصة ، حيث ستحذرك

00:33.720 --> 00:37.100
TypeScript إذا قمت بإعدادها بشكل غير صحيح ، أن الوسيطة

00:37.100 --> 00:38.610
الثانية إما لا شيء أو مصفوفة

00:38.610 --> 00:42.997
من أي شيء ، أشياء من هذا القبيل ، وهذا سيساعدك دائمًا أنت ، ستتعلم أيضًا

00:42.997 --> 00:45.930
أن useEffect لا يُرجع أي شيء ، على سبيل المثال ،

00:45.930 --> 00:49.200
وفي useState ، حيث ذكرت أنك دائمًا ما تستعيد مصفوفة

00:49.200 --> 00:52.410
تحتوي على عنصرين بالضبط ، حسنًا ، سترى أيضًا هنا ، useState

00:52.410 --> 00:56.310
تُرجع مصفوفة ، هذا ما نراه هنا ، قوس الفتح والإغلاق ، حيث يكون العنصر

00:56.310 --> 01:01.750
الأول من النوع العام ، لذا فإن قائمة Todos ، لأن هذه هي لقطة الحالة الخاصة بك ، والعنصر

01:01.750 --> 01:08.600
الثاني هو React.

01:08.600 --> 01:08.600
وظيفة

01:08.600 --> 01:11.370
الإرسال هنا في النهاية ، هذا ما يحدث هنا.

01:11.370 --> 01:12.690
لذلك يمكن أن يكون مفيدا.

01:12.690 --> 01:15.490
ربما تعمل أيضًا مع Redux.

01:15.490 --> 01:19.660
حسنًا ، لحسن الحظ ، إذا تعمقت في وثائقهم ، فستجد

01:19.660 --> 01:21.360
أيضًا إرشادات حول

01:21.360 --> 01:24.530
استخدام Redux مع TypeScript.

01:24.530 --> 01:27.430
هنا ، ضمن الوصفات ، تجد Usage with TypeScript

01:27.430 --> 01:30.710
، وهناك ، يمكنك معرفة كيف يمكنك إضافة أنواع إلى

01:30.710 --> 01:33.270
أفعالك ، وإلى مخفضاتك ، وإلى إدارة حالتك

01:33.270 --> 01:35.540
باستخدام Redux.

01:35.540 --> 01:38.650
إنه حقًا واضح ومباشر ، وليس معقدًا على الإطلاق

01:38.650 --> 01:41.520
، ويضيف الكثير من الأمان هناك.

01:41.520 --> 01:43.230
ربما تستخدم أيضًا

01:43.230 --> 01:47.110
حزمة React Router ، هذه الحزمة هنا.

01:47.110 --> 01:52.040
هناك ، لا تجد تدوينات TypeScript معينة هناك ، حسنًا ، بالطبع يمكنك تثبيت

01:52.040 --> 01:54.020
هذا في مشروعك ، أيضًا ، باستخدام

01:54.020 --> 01:55.340
npm install dash dash

01:55.340 --> 01:58.770
save تفاعل dash router dash dom ، وهو الأمر الذي

01:58.770 --> 02:00.740
ستستخدمه عادةً لتثبيت هذا حزمة

02:00.740 --> 02:03.720
في مشروع React الخاص بك.

02:03.720 --> 02:07.000
هذا سيضيف حزمة رد فعل جهاز التوجيه دوم.

02:07.000 --> 02:10.250
لكن هذه الحزمة لا تحتوي على إرشادات خاصة بالنوع

02:10.250 --> 02:12.430
في صفحتها هنا ، ولا تجد أي شيء خاص

02:12.430 --> 02:14.720
بـ TypeScript هنا ، على الأقل في

02:14.720 --> 02:17.570
الوقت الذي أقوم فيه بتسجيل هذا.

02:17.570 --> 02:19.163
ومع ذلك ، يمكننا بالطبع استخدام

02:19.163 --> 02:21.250
هذا في مشروع TypeScript أيضًا ، ويمكننا

02:21.250 --> 02:23.920
الحصول على دعم جيد للنوع هناك.

02:23.920 --> 02:25.800
الآن ، بعد تثبيته ، ستلاحظ أنه

02:25.800 --> 02:29.360
إذا قمت بالاستيراد من رد فعل جهاز التوجيه دوم ، فأنا لا

02:29.360 --> 02:31.880
أمتلك دعمًا رائعًا للنوع هناك.

02:31.880 --> 02:33.870
على سبيل المثال ، إذا حاولت استيراد

02:33.870 --> 02:36.870
شيء ما هنا ، فقد تلقيت بالفعل تحذيرًا ، لم يتمكن من العثور

02:36.870 --> 02:39.210
على إعلان لوحدة رد فعل جهاز التوجيه دوم

02:39.210 --> 02:42.730
، بحيث لم يتم العثور على أي نوع من المعلومات هنا.

02:42.730 --> 02:45.420
لإصلاح ذلك ، بالطبع ، يمكننا القيام بشيء

02:45.420 --> 02:48.450
فعلناه من قبل ، npm install dash dash save dash

02:48.450 --> 02:52.530
dev ، في الأنواع ، رد فعل slash dash router dash dom ، لذلك نقوم بإلغاء

02:52.530 --> 02:54.620
أنواع البحث هنا ، ونحن جيدون مرة

02:54.620 --> 02:56.860
أخرى ، هذا هي خدعة تعلمتها بالفعل ،

02:56.860 --> 02:59.097
في وقت مبكر من الدورة التدريبية ، ولكن

02:59.097 --> 03:02.010
بالطبع ، لا داعي لنسيانها ، فقط لأن لدينا مشروعًا

03:02.010 --> 03:03.920
يعمل فيه الكثير بالفعل مع TypeScript

03:03.920 --> 03:06.790
خارج الصندوق.

03:06.790 --> 03:08.140
إذا أضفنا بعد ذلك شيئًا

03:08.140 --> 03:10.810
لا يعمل مع TypeScript ، مثل هذا ، فيمكننا إضافته

03:10.810 --> 03:13.700
على هذا النحو ، والآن أصبح على دراية بالمسار ، فهو

03:13.700 --> 03:15.380
على دراية بجميع الميزات الأخرى

03:15.380 --> 03:17.270
من هذه الحزمة أيضًا.

03:17.270 --> 03:21.070
لذا فهذه هي السهولة التي يمكنك من خلالها إضافة دعم لهذا أيضًا.

03:21.070 --> 03:23.560
وهذه هي الطريقة التي يجب عليك اتباعها بشكل

03:23.560 --> 03:26.010
عام ، وإلقاء نظرة على المستندات الرسمية ،

03:26.010 --> 03:29.030
والتحقق مما إذا كنت ترى إرشادات حول الاستخدام مع TypeScript

03:29.030 --> 03:31.590
هناك ، وإذا لم يكن الأمر كذلك ، فقم بتثبيته ومعرفة

03:31.590 --> 03:33.720
ما إذا كان يحتوي على دعم نوع مدمج ، بحيث

03:33.720 --> 03:37.350
تحصل على الأقل دعم جيد للإكمال التلقائي والتجميع ، وإذا لم يكن

03:37.350 --> 03:39.090
ذلك موجودًا أيضًا ، فقم بتثبيت

03:39.090 --> 03:42.080
حزمة الأنواع ، كما فعلنا هنا.

03:42.080 --> 03:43.980
وهذا هو حقًا لهذه الوحدة ، وهذه

03:43.980 --> 03:46.410
هي الطريقة التي يمكنك بها استخدام TypeScript

03:46.410 --> 03:49.920
، وجميع ميزاته المدهشة في تطبيق React ، وبالطبع كل ما

03:49.920 --> 03:52.450
تتعلمه من هذه الدورة ، ينطبق أيضًا على

03:52.450 --> 03:54.370
تطبيق React.

03:54.370 --> 03:56.380
يمكنك استخدام جميع ميزات TypeScript التي

03:56.380 --> 03:59.130
تعلمتها من هذه الدورة التدريبية في مشروع React.
