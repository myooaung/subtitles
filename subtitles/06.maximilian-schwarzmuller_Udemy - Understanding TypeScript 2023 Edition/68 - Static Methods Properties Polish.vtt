WEBVTT

00:02.251 --> 00:03.380
Instruktor: Kolejna

00:03.380 --> 00:05.350
miła cecha związana z właściwościami

00:05.350 --> 00:08.000
i metodami, która istnieje również w JavaScript,

00:08.000 --> 00:10.010
gdy używasz ES6 lub później, ale wszystkie

00:10.010 --> 00:11.180
skrypty typów są statycznymi

00:11.180 --> 00:14.010
właściwościami i metodami.

00:14.010 --> 00:17.520
Właściwości i metody statyczne pozwalają na dodanie do klas właściwości

00:17.520 --> 00:20.620
i metod, do których dostęp nie jest uzyskiwany na instancji

00:20.620 --> 00:22.530
klasy, a więc tam, gdzie nie trzeba

00:22.530 --> 00:26.080
najpierw wywoływać nowej nazwy klasy, ale do których dostęp uzyskuje

00:26.080 --> 00:28.950
się bezpośrednio na klasie.

00:28.950 --> 00:31.350
Jest to często używane dla funkcji użytkowych,

00:31.350 --> 00:35.922
które chcesz grupować lub mapować do klasy logicznie, lub globalnych

00:35.922 --> 00:40.860
stałych, które również chcesz przechowywać w klasie.

00:40.860 --> 00:43.270
Przykładem wbudowanym w JavaScript, który

00:43.270 --> 00:46.050
nie jest zdefiniowany przez typescript i nie

00:46.050 --> 00:48.290
jest zdefiniowany przez ciebie, ale

00:48.290 --> 00:51.170
częścią JavaScript w przeglądarce jest funkcja

00:51.170 --> 00:53.220
konstruktora Math, lub klasa, jeśli

00:53.220 --> 00:55.500
chcesz ją nazwać w ten sposób, która jest

00:55.500 --> 00:59.210
globalnie dostępna w JavaScript, gdzie możesz uzyskać dostęp

00:59.210 --> 01:01.400
do pi jako stałej wartości, aby dać ci

01:01.400 --> 01:05.050
tę liczbę pi, lub funkcje, lub metody, aby być precyzyjnym,

01:05.050 --> 01:08.610
jak pow, aby obliczyć moc czegoś.

01:08.610 --> 01:10.530
Są to metody i właściwości, do których

01:10.530 --> 01:13.370
nie masz dostępu na instancji Math.

01:13.370 --> 01:16.310
Nie musisz najpierw dzwonić do nowej matematyki.

01:16.310 --> 01:19.830
Rzeczywiście to nie zadziała, ale uzyskujesz dostęp do tych właściwości

01:19.830 --> 01:22.360
w metodach bezpośrednio na samej klasie.

01:22.360 --> 01:25.340
Więc Math działa bardziej jak przestrzeń nazw jako mechanizm

01:25.340 --> 01:27.370
grupowania tutaj i to jest powszechny

01:27.370 --> 01:28.640
przypadek użycia dla statycznych

01:28.640 --> 01:30.480
metod i właściwości i możesz dodać

01:30.480 --> 01:33.650
je do swoich własnych klas, jak również.

01:33.650 --> 01:36.770
Powiedzmy, że w Departamencie chcemy mieć metodę,

01:36.770 --> 01:40.050
która pomaga nam tworzyć pracowników i jest to coś, do

01:40.050 --> 01:43.450
czego możemy chcieć mieć dostęp bez instancjonowania

01:43.450 --> 01:45.390
Departamentu, ponieważ zazwyczaj

01:45.390 --> 01:46.890
instancjonujemy nasze bardziej

01:46.890 --> 01:51.290
wyspecjalizowane wersje, dział IT i dział księgowości i nie chcemy tak

01:51.290 --> 01:54.710
naprawdę instancjonować Departamentu tylko po to, aby

01:54.710 --> 01:58.490
wywołać metodę użytkową i dlatego możemy dodać metodę tutaj,

01:58.490 --> 02:03.490
create Employee, powiedzmy, gdzie chcemy uzyskać nazwę, która jest łańcuchem

02:03.680 --> 02:07.621
jako argument i tam chcemy coś zwrócić.

02:07.621 --> 02:10.230
Teraz, aby uczynić tę metodę statyczną, do

02:10.230 --> 02:12.920
której możemy uzyskać dostęp bez instancjowania

02:12.920 --> 02:16.250
tej klasy, dodajemy słowo kluczowe static przed tą metodą,

02:16.250 --> 02:18.549
a następnie tutaj być może zwrócimy obiekt,

02:18.549 --> 02:23.549
w którym mamy właściwość name zmapowaną na tę wartość name.

02:25.170 --> 02:27.010
Teraz oczywiście to jest bardzo prosta

02:27.010 --> 02:28.690
metoda, ale masz pomysł.

02:28.690 --> 02:31.960
Teraz, aby użyć tego możemy zejść tam, gdzie wykonujemy

02:31.960 --> 02:33.490
nasz kod i teraz powiedzmy,

02:33.490 --> 02:36.940
że chcemy nowego pracownika, pracownika1.

02:39.300 --> 02:41.020
No to możemy to załatwić

02:41.020 --> 02:46.020
z Departamentem. createEmployee i przekazać np. Max

02:46.920 --> 02:50.680
i jeśli ja wtedy console. log(pracownik1) powinniśmy

02:50.680 --> 02:53.170
zobaczyć obiekt o nazwie Max.

02:53.170 --> 02:55.630
Więc jeśli to zapiszę, rzeczywiście tutaj jest

02:55.630 --> 02:58.240
to pracownik, którego właśnie stworzyliśmy.

02:58.240 --> 03:01.200
Byłby to więc typowy przykład dla metody statycznej.

03:01.200 --> 03:04.870
Wywołujemy go bezpośrednio na klasie, bez słowa kluczowego new,

03:04.870 --> 03:06.360
a zatem używamy klasy jako

03:06.360 --> 03:09.030
mechanizmu grupującego można powiedzieć i jeśli

03:09.030 --> 03:11.630
chciałbyś dodać statyczną właściwość, mógłbyś

03:11.630 --> 03:13.470
to zrobić również.

03:13.470 --> 03:17.950
Jeśli masz coś takiego jak fiscalYear tutaj, że obecnie chcesz użyć w

03:19.730 --> 03:22.040
swojej firmie, możesz ustawić to na,

03:22.040 --> 03:24.980
powiedzmy, 2020, a następnie ponownie, aby udostępnić

03:24.980 --> 03:27.310
go bez instancjonowania tego, możesz

03:27.310 --> 03:28.560
dodać static przed tą

03:28.560 --> 03:30.810
właściwością lub przed tym polem i

03:30.810 --> 03:33.950
teraz uzyskać dostęp do tego.

03:33.950 --> 03:36.560
Więc teraz w dół tam konsola. log. (mycreatedemployee).

03:38.050 --> 03:42.420
Tutaj mamy również dostęp do działu. fiskalne. Rok po prostu tak bez instancjonowania

03:43.900 --> 03:47.150
go i jeśli zapiszemy to, bez zaskoczenia zobaczymy,

03:47.150 --> 03:51.130
że 2020 jest tutaj rejestrowany.

03:51.130 --> 03:53.347
Są to więc statyczne metody i właściwości.

03:53.347 --> 03:55.250
Jedno ważne słowo o nich, lub jedna rzecz,

03:55.250 --> 03:56.947
o której należy pamiętać.

03:56.947 --> 03:59.067
Kiedy dodajesz je na klasie, nie możesz

03:59.067 --> 04:03.370
uzyskać do nich dostępu z wnętrza swoich nie statycznych części.

04:03.370 --> 04:04.870
Więc jeśli masz ochotę

04:04.870 --> 04:08.150
na dostęp do fiscalYear tutaj w konstruktorze, i chcesz

04:08.150 --> 04:10.375
konsoli. zaloguj się to

04:10.375 --> 04:13.490
tu, to tam, jak widać nie zadziała.

04:13.490 --> 04:15.600
Otrzymuję tutaj błąd, że właściwość

04:15.600 --> 04:18.690
fiscalYear jest statycznym członkiem.

04:18.690 --> 04:20.976
Nie możemy uzyskać dostępu do tego tutaj, ponieważ

04:20.976 --> 04:24.290
konstruktor i w zasadzie wszystko, co się w nim znajduje, wszystkie

04:24.290 --> 04:26.530
metody, które nie są oznaczone jako statyczne,

04:26.530 --> 04:29.427
a nie można oznaczyć konstruktora jako statycznego, przy

04:29.427 --> 04:32.430
okazji, nie będą mogły uzyskać dostępu do właściwości statycznych,

04:32.430 --> 04:34.770
ponieważ odnosi się to do instancji utworzonej

04:34.770 --> 04:37.660
na podstawie klasy, podczas gdy właściwość statyczna

04:37.660 --> 04:44.150
nie jest dostępna na instancji, ponieważ cała idea właściwości statycznych i metod statycznych polega na tym, że są one oderwane

04:44.150 --> 04:47.780
od instancji.

04:47.780 --> 04:50.930
Więc oczywiście nie możesz uzyskać do nich dostępu za pomocą tego słowa kluczowego.

04:50.930 --> 04:53.940
Jeśli chciałbyś użyć statycznej właściwości lub

04:53.940 --> 04:56.080
metody z wnętrza klasy, musiałbyś

04:56.080 --> 04:59.380
użyć nazwy klasy tutaj, aby uzyskać do niej dostęp.

04:59.380 --> 05:01.337
Dzięki temu masz dostęp do statycznych

05:01.337 --> 05:04.290
właściwości i metod, a wszystko to z wnętrza klasy.

05:04.290 --> 05:06.593
To jedna ważna rzecz, o której należy pamiętać.
