WEBVTT

00:02.130 --> 00:02.963
Erzähler: Dazu bin

00:02.963 --> 00:05.260
ich wieder in unserem Dummy-Projekt-Setup, das wir

00:05.260 --> 00:06.690
immer wieder verwendet haben.

00:06.690 --> 00:08.260
Dort können wir NPM starts ausführen,

00:08.260 --> 00:10.190
um den Entwicklungsserver zu starten.

00:10.190 --> 00:13.690
In einem neuen Terminalfenster, in dem der Server in einem anderen

00:13.690 --> 00:15.260
Terminalfenster läuft, führe

00:15.260 --> 00:17.419
ich TSC dash W aus, um den TypeScript-Kompilierungsprozess

00:17.419 --> 00:21.540
zu starten und am Laufen zu halten.

00:21.540 --> 00:23.470
Damit haben wir natürlich eine leere Seite,

00:23.470 --> 00:24.560
weil nichts darauf steht,

00:24.560 --> 00:27.060
aber jetzt können wir in der TS-Datei der Anwendung herumspielen

00:27.060 --> 00:29.480
und mit den Generika beginnen.

00:29.480 --> 00:32.940
Und ich denke, es ist am einfachsten, Generics zu verstehen,

00:32.940 --> 00:35.450
wenn wir uns einen Standardtyp ansehen,

00:35.450 --> 00:37.450
der in TypeScript eingebaut ist,

00:37.450 --> 00:39.610
mit dem wir viel gearbeitet haben

00:39.610 --> 00:41.890
und der sich als Generic herausstellt,

00:41.890 --> 00:44.410
und das wäre ein Array.

00:44.410 --> 00:46.900
Nehmen wir an, wir haben ein Array von Namen.

00:46.900 --> 00:50.370
Max und Manual, sagen wir.

00:50.370 --> 00:51.620
Wir erhalten also

00:51.620 --> 00:54.610
zwei Namen und der Typ der Namenskonstante

00:54.610 --> 00:57.210
ist natürlich ein Array von Strings.

00:57.210 --> 00:59.610
Eigentlich könnte man dies als eine

00:59.610 --> 01:02.460
Kombination von zwei Typen betrachten.

01:02.460 --> 01:05.760
Genauso wie man ein Objekt mit verschiedenen Eigenschaften haben kann,

01:05.760 --> 01:07.700
wobei in jeder Eigenschaft ein anderer Typ

01:07.700 --> 01:09.310
gespeichert sein kann.

01:09.310 --> 01:13.750
Ein Array ist immer ein Ding mit verschiedenen Daten darin, in diesem

01:13.750 --> 01:16.440
Fall mit Zeichenketten darin.

01:16.440 --> 01:20.230
Wir haben also den Array-Typ, einfach ein Array, und wenn ich die Namen

01:20.230 --> 01:22.770
hier entfernen und ausschneiden würde, würde

01:22.770 --> 01:25.010
TypeScript daraus schließen, dass es sich

01:25.010 --> 01:29.140
um ein Array des Typs anything mit beliebigen Daten darin handelt.

01:29.140 --> 01:32.690
Tatsächlich kennt TypeScript den Array-Typ.

01:32.690 --> 01:35.280
Wir könnten also sagen, dass dies hier ein Array sein

01:35.280 --> 01:37.600
sollte, aber wie Sie sehen, erhalten wir eine

01:37.600 --> 01:39.900
Fehlermeldung, obwohl ich Ihnen sagen kann,

01:39.900 --> 01:43.570
dass dieser Array-Typ, wie dies, in TypeScript existiert.

01:43.570 --> 01:45.870
Aber wir sehen, dass es sich um einen generischen

01:45.870 --> 01:48.710
Typ handelt und dass er ein Argument vom Typ benötigt.

01:48.710 --> 01:50.950
Und das ist etwas, was wir bisher noch nicht gesehen haben.

01:50.950 --> 01:53.870
Wir haben noch nie von generischen Typen gehört.

01:53.870 --> 01:55.750
Diese merkwürdige Notation hier,

01:55.750 --> 01:58.120
wann immer Sie so etwas in TypeScript sehen,

01:58.120 --> 02:01.060
haben Sie es mit einem generischen Typ zu tun.

02:01.060 --> 02:05.610
Ein generischer Typ ist ein Typ, der irgendwie mit einem anderen

02:05.610 --> 02:08.890
Typ verbunden ist und sehr flexibel ist, was

02:08.890 --> 02:12.920
den genauen Typ dieses anderen Typs angeht.

02:12.920 --> 02:14.130
Klingt schwierig?

02:14.130 --> 02:16.820
Nun, lassen Sie uns zu dem Beispiel mit dem Array zurückkehren.

02:16.820 --> 02:19.380
Wir wissen, dass wir hier ein Array speichern wollen.

02:19.380 --> 02:22.250
Ein Array könnte also selbst ein Typ sein, es ist eine Liste

02:22.250 --> 02:24.610
von Daten, die für sich genommen schon einen

02:24.610 --> 02:26.730
Typ ausmacht, könnte man sagen.

02:26.730 --> 02:29.770
Genauso wie ein Objekt ein eigenständiger Typ ist, auch wenn wir noch

02:29.770 --> 02:32.200
nicht wissen, welche Daten dort hineingehen werden.

02:32.200 --> 02:34.490
Ein Array ist also ein eigenständiger Typ.

02:34.490 --> 02:38.230
Aber in einem Array werden natürlich Daten eines bestimmten

02:38.230 --> 02:39.860
Typs gespeichert.

02:39.860 --> 02:42.690
Dem Array-Typ selbst ist es egal, welche Art von

02:42.690 --> 02:44.810
Daten darin gespeichert ist.

02:44.810 --> 02:48.150
Dem Array-Typ ist es egal, ob Sie eine Liste von Zeichenketten,

02:48.150 --> 02:50.540
Zahlen, Objekten oder gemischten Daten

02:50.540 --> 02:52.430
speichern wollen.

02:52.430 --> 02:54.500
Der Array-Typ kümmert sich nicht wirklich,

02:54.500 --> 02:58.640
aber es kümmert sich darum, zumindest einige Informationen zu erhalten, auch wenn

02:58.640 --> 03:01.200
Sie ihm sagen, ich weiß nicht, indem Sie dies auf den

03:01.200 --> 03:02.960
Typ jedes Arrays setzen.

03:02.960 --> 03:05.870
Das ist besser, als gar nichts zu sagen.

03:05.870 --> 03:08.330
Dies ist eine Möglichkeit, einen Array-Typ zu definieren,

03:08.330 --> 03:10.070
den Typ der Daten, die darin gespeichert werden,

03:10.070 --> 03:11.430
und dann eckige Klammern.

03:11.430 --> 03:14.620
Die andere Möglichkeit, die genau den gleichen Typ erzeugen würde, wäre die

03:14.620 --> 03:15.830
Verwendung dieses Array-Dings

03:15.830 --> 03:17.630
und dann diese spitzen Klammern.

03:17.630 --> 03:20.030
Zwischen diesen spitzen Klammern geben Sie

03:20.030 --> 03:22.340
nun den Typ der Daten an, die in das Array aufgenommen

03:22.340 --> 03:24.140
werden sollen.

03:24.140 --> 03:26.330
Zum Beispiel eine Zeichenkette,

03:26.330 --> 03:31.330
und das hier ist 100% dasselbe wie die Definition dieses Typs hier.

03:32.030 --> 03:34.950
Natürlich könnten Sie hier auch einen Union-Typ verwenden, um zu sagen,

03:34.950 --> 03:37.730
dass dieses Array Zeichenketten oder Zahlen speichert, oder Sie können

03:37.730 --> 03:40.850
ein beliebiges Array verwenden, wenn Sie nichts über den Typ sagen wollen, oder

03:40.850 --> 03:42.970
wie wir es gerade hatten, Zeichenkette.

03:42.970 --> 03:44.330
Dies ist also ein generischer

03:44.330 --> 03:46.900
Typ, ein in TypeScript eingebauter generischer Typ.

03:46.900 --> 03:50.440
Ein Typ, der mit einem anderen Typ verbunden ist, bei dem wir

03:50.440 --> 03:53.980
wissen wollen, welcher unserer Typen, der so zu TypeScript

03:53.980 --> 03:56.810
ist, uns bessere Unterstützung geben kann.

03:56.810 --> 03:57.910
Wenn wir zum Beispiel

03:57.910 --> 04:01.510
wissen, dass das, was wir dort speichern, eine Zeichenkette sein wird,

04:01.510 --> 04:04.380
dann wissen wir, dass ich jedes Mal, wenn ich auf ein Element

04:04.380 --> 04:06.143
in diesem Array zugreife, etwas mit

04:07.100 --> 04:09.410
der Zeichenkette machen kann.

04:09.410 --> 04:12.260
Ich kann zum Beispiel all diese String-Methoden aufrufen

04:12.260 --> 04:15.280
und TypeScript wird sich nicht beschweren, weil es weiß,

04:15.280 --> 04:18.220
dass dieses Array Strings enthält.

04:18.220 --> 04:20.410
Das ist die Idee der generischen Typen.

04:20.410 --> 04:23.230
Ein bestimmter Typ, in diesem Fall der Array-Typ,

04:23.230 --> 04:26.780
könnte einfach besser oder überhaupt funktionieren, wenn

04:26.780 --> 04:29.040
Sie zusätzliche Informationen über einen

04:29.040 --> 04:33.430
Datentyp bereitstellen, der in diesem Array-Typ enthalten ist, und natürlich

04:33.430 --> 04:36.590
ist der Array-Typ nur ein Beispiel.

04:36.590 --> 04:39.840
Ein weiterer generischer Typ, der in TypeScript integriert

04:39.840 --> 04:42.130
ist, ist der Typ promise.

04:42.130 --> 04:45.470
Versprechen sind eine JavaScript-Funktion, richtig?

04:45.470 --> 04:46.970
Es ist keine TypeScript-Funktion.

04:46.970 --> 04:49.437
Sie können Versprechen in JavaScript erstellen.

04:49.437 --> 04:52.000
Falls Sie nicht wissen, was Versprechen sind,

04:52.000 --> 04:53.870
finden Sie anbei den Link.

04:53.870 --> 04:58.150
Ein Versprechen kann durch die Verwendung von new promise erstellt werden.

04:58.150 --> 05:00.640
Auch hier handelt es sich um eine Konstruktorfunktion,

05:00.640 --> 05:03.270
eine in JavaScript eingebaute Klasse, und die Konstruktorfunktion

05:03.270 --> 05:05.870
für das Versprechen nimmt ein Argument an, das selbst

05:05.870 --> 05:07.640
eine Funktion ist, die wiederum zwei

05:07.640 --> 05:12.580
Argumente erhält, nämlich eine Resolve- und eine Reject-Funktion.

05:12.580 --> 05:15.180
Diese werden nun von JavaScript im Browser

05:15.180 --> 05:17.790
automatisch an uns weitergegeben.

05:17.790 --> 05:22.400
Und dann können wir in einem Versprechen zum Beispiel einen Timer setzen

05:22.400 --> 05:25.640
und dann in der Callback-Funktion dieses Timers das

05:25.640 --> 05:28.140
äußere Versprechen auflösen.

05:28.140 --> 05:30.140
Hier in dieser Callback-Funktion

05:30.140 --> 05:34.823
könnten wir also das Resolve aufrufen und sagen, dass dies erledigt ist.

05:36.500 --> 05:41.020
Wenn wir dies tun, erzeugt dieses Versprechen hier ein neues Objekt, ein Versprechensobjekt,

05:41.020 --> 05:43.860
das in der Versprechenskonstante gespeichert wird.

05:43.860 --> 05:47.700
Diese Versprechenskonstante hat einen bestimmten Typ.

05:47.700 --> 05:49.470
Es ist vom Typ Versprechen, und

05:49.470 --> 05:51.130
dann sehen Sie wieder diese spitzen

05:51.130 --> 05:56.130
Klammern, weil dieses Versprechen schließlich zu etwas aufgelöst wird.

05:56.480 --> 05:58.930
Hier steht unknown, weil TypeScript nicht ganz

05:58.930 --> 06:01.470
in der Lage ist, zu verstehen, dass wir hier tatsächlich

06:01.470 --> 06:03.880
einen String auflösen werden.

06:03.880 --> 06:05.870
Wir könnten also sagen, dass es sich um ein Versprechen

06:05.870 --> 06:08.120
handelt, das letztendlich eine Zeichenkette ergibt,

06:08.120 --> 06:11.450
und das tun wir, indem wir wieder unseren generischen Typ verwenden.

06:11.450 --> 06:14.030
Der Haupttyp ist das Versprechen, aber ein

06:14.030 --> 06:16.120
Versprechen arbeitet genau wie ein

06:16.120 --> 06:18.380
Array mit anderen Typen zusammen.

06:18.380 --> 06:22.000
Ein Array verwendet andere Typen, weil seine gespeicherten Daten in ihm, Daten bestimmter

06:22.000 --> 06:23.350
Typen, und das Versprechen arbeitet

06:23.350 --> 06:25.640
zusammen mit anderen Typen, weil es schließlich eine

06:25.640 --> 06:29.750
Art von Rückgabe einige Daten eines bestimmten Typs und in diesem Fall, dass ein Versprechen,

06:29.750 --> 06:31.140
die schließlich eine Zeichenfolge

06:31.140 --> 06:32.940
zurückgibt ist.

06:32.940 --> 06:34.470
Noch einmal: Warum ist das nützlich?

06:34.470 --> 06:37.550
Warum ist diese zusätzliche Information nützlich?

06:37.550 --> 06:40.350
Nun, wenn wir nur ein Versprechen Typ hier und das wäre nicht

06:40.350 --> 06:41.430
erlaubt, aber wenn wir

06:41.430 --> 06:44.770
sagten, Versprechen des Typs alles, was im Grunde das gleiche wie

06:44.770 --> 06:46.870
von Typen würde nicht wissen, generische

06:46.870 --> 06:48.390
Typen, wenn es keine Informationen

06:48.390 --> 06:51.280
über das, was wir zurück bekommen würde.

06:51.280 --> 06:53.340
Nun, bei diesem Versprechen können wir sie natürlich

06:53.340 --> 06:55.750
verwenden, wie wir es bei allen Versprechen tun können, und

06:55.750 --> 06:57.770
schließlich werden wir einige Daten erhalten, aber

06:57.770 --> 06:59.770
wir wissen nichts über diese Daten.

06:59.770 --> 07:02.500
Ich kann zum Beispiel keine String-Methode darauf aufrufen.

07:02.500 --> 07:04.850
Nun, ich kann, weil es in diesem Fall keine ist, aber

07:04.850 --> 07:07.590
ich bekomme keine besondere TypeScript-Unterstützung.

07:07.590 --> 07:11.313
Ich könnte auch Dinge ausprobieren, die definitiv nicht funktionieren werden.

07:12.170 --> 07:13.800
Wenn wir das zum Beispiel umdrehen und

07:13.800 --> 07:15.220
hier eine Zahl zurückgeben, könnte

07:15.220 --> 07:17.320
ich hier immer noch eine String-Methode aufrufen,

07:17.320 --> 07:19.390
weil TypeScript keine Informationen über die

07:19.390 --> 07:22.640
Daten hat, die dieses Versprechen schließlich liefern wird.

07:22.640 --> 07:24.070
Mit generischen Typen geben wir

07:24.070 --> 07:26.280
diese Informationen an TypeScript weiter.

07:26.280 --> 07:28.160
Wir können TypeScript mitteilen, dass

07:28.160 --> 07:30.240
dieses Versprechen schließlich eine Zeichenkette

07:30.240 --> 07:32.840
oder in diesem Fall eine Zahl ergeben wird, und TypeScript

07:32.840 --> 07:34.940
kann uns dann hier warnen.

07:34.940 --> 07:37.390
Wenn ich versuche, dies zu speichern, wird eine Fehlermeldung

07:37.390 --> 07:40.870
ausgegeben, weil es weiß, dass dieses Versprechen schließlich eine Zahl

07:40.870 --> 07:44.092
ergibt und man daraufhin Split aufrufen kann.

07:44.092 --> 07:48.010
So erhalten wir eine bessere Typsicherheit mit generischen Typen.

07:48.010 --> 07:50.510
Sie sind also sehr flexibel, was die Verwendung dieser

07:50.510 --> 07:52.720
generischen Informationen angeht.

07:52.720 --> 07:54.830
Ein Array weiß, welche Daten es speichert,

07:54.830 --> 07:57.140
ein Promise weiß, welche Daten es zurückgibt.

07:57.140 --> 07:59.840
Wenn Sie Ihre eigenen generischen Klassen oder Funktionen erstellen,

07:59.840 --> 08:02.140
können Sie etwas völlig anderes tun als dort.

08:02.140 --> 08:04.570
Aber letztendlich helfen generische Typen dabei,

08:04.570 --> 08:06.970
zusätzliche Typinformationen zu erhalten, wenn

08:06.970 --> 08:10.640
man eine komplexere Klasse oder eine komplexere Funktion hat, die etwas

08:10.640 --> 08:14.240
mit den eingehenden Daten macht, und zwar in einer Weise, bei der es nicht

08:14.240 --> 08:16.020
wirklich wichtig ist, dass die Daten

08:16.020 --> 08:18.700
von einem bestimmten Typ sind, sondern bei der man die

08:18.700 --> 08:21.500
Typinformationen der eingehenden Daten speichern möchte,

08:21.500 --> 08:24.850
um eine bessere TypeScript-Unterstützung zu erhalten, wenn man mit

08:24.850 --> 08:27.590
seinem generischen Typ arbeitet.

08:27.590 --> 08:30.450
Wenn Sie also mit einem Versprechen oder einem Datenarray

08:30.450 --> 08:33.270
arbeiten, ist das im Grunde die Idee der Generika.

08:33.270 --> 08:36.300
Das hier wurde also alles in Generika gebaut.

08:36.300 --> 08:37.460
Lassen Sie uns das auskommentieren.

08:37.460 --> 08:40.450
Lassen Sie uns nun unser eigenes generisches Wort erstellen.

08:40.450 --> 08:42.653
Lassen Sie uns unsere eigenen generischen Typen verwenden.
