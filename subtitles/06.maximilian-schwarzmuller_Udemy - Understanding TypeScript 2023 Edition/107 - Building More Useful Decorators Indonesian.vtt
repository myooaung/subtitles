WEBVTT

00:02.480 --> 00:06.780
Man: Sekarang, dengan pengetahuan tentang fungsi-fungsi pabrik, atau dekorator

00:06.780 --> 00:10.523
pabrik, kita bisa melakukan hal-hal yang cukup menarik.

00:11.570 --> 00:16.240
Kita bisa menukar pabrik dekorator baru dengan templat,

00:16.240 --> 00:17.693
misalnya.

00:19.400 --> 00:21.590
Dan di sini, saya berharap mendapatkan template,

00:21.590 --> 00:23.780
yang seharusnya berupa beberapa string.

00:23.780 --> 00:28.780
Dan hookId, yang juga harus berupa string.

00:28.870 --> 00:32.050
Kemudian di sini, saya mengembalikan fungsi anonim saya, yang merupakan

00:32.050 --> 00:34.800
dekorator sebenarnya, seperti yang telah Anda pelajari.

00:34.800 --> 00:37.440
Karena sekali lagi, saya memiliki pabrik dekorator.

00:37.440 --> 00:40.570
Dan di sana, saya ingin merender beberapa templat,

00:40.570 --> 00:42.530
yang seharusnya berupa kode HTML,

00:42.530 --> 00:46.590
ke suatu tempat di dom, di mana saya menemukan hookId ini.

00:46.590 --> 00:49.160
Jadi sekarang kita bisa masuk ke indeks. html dan tambahkan tempat seperti

00:49.160 --> 00:51.250
itu sehingga kita dapat melihat bahwa ini berfungsi.

00:51.250 --> 00:54.483
Kita bisa menambahkan div di sini, dengan id app, mungkin.

00:55.430 --> 00:59.560
Dan kemudian di aplikasi. ts, alih-alih logger, saya menambahkan

00:59.560 --> 01:01.357
WithTemplate.

01:02.570 --> 01:05.130
Mari kita oper string kosong sebagai argumen pertama untuk saat

01:05.130 --> 01:06.810
ini, dan aplikasi sebagai argumen kedua.

01:06.810 --> 01:09.313
Jadi, ID ini saya tetapkan ke div di sini.

01:10.170 --> 01:12.400
Dan sekarang di dalam fungsi dalam itu adalah dekorator

01:12.400 --> 01:13.830
kita yang sebenarnya.

01:13.830 --> 01:16.540
Di dalam fungsi dekorator ini,

01:16.540 --> 01:19.500
saya ingin menjangkau elemen.

01:19.500 --> 01:24.500
Ke elemen kait dengan dokumen. getElementById.

01:25.662 --> 01:29.390
Untuk hookId yang kita dapatkan di sini sebagai argumen.

01:29.390 --> 01:33.480
Dan jika HookEl adalah sesuatu yang ada, maka saya ingin mengakses

01:34.330 --> 01:37.960
innerHTML-nya, dan mengatur ini sama dengan template,

01:37.960 --> 01:39.920
katakanlah.

01:39.920 --> 01:41.440
Tentu saja, pengaturan yang sangat

01:41.440 --> 01:43.640
sederhana, tetapi ini akan berhasil.

01:43.640 --> 01:45.460
Sekarang, saya tidak tertarik dengan konstruktornya.

01:45.460 --> 01:48.110
Dan untuk memberi tahu typescript bahwa saya tidak tertarik di sini, saya

01:48.110 --> 01:50.370
dapat menambahkan garis bawah sebagai nama, yang pada dasarnya

01:50.370 --> 01:52.007
memberi sinyal pada typescript, "Ya, saya tahu

01:52.007 --> 01:54.580
saya mendapatkan argumen ini, tetapi saya tidak membutuhkannya.

01:54.580 --> 01:56.170
Namun, saya harus menentukannya.

01:56.170 --> 01:58.920
Jadi, dengan garis bawah ini, saya katakan bahwa saya menyadarinya,

01:58.920 --> 02:00.850
tetapi saya tidak akan menggunakannya. Karena, yang ingin saya lakukan untuk saat ini, adalah

02:00.850 --> 02:02.300
saya ingin membuat tahun ini.

02:02.300 --> 02:04.033
Jadi sekarang ketika kita menambahkan

02:05.580 --> 02:07.750
WithTemplate di sini, di sini kita bisa menambahkan

02:07.750 --> 02:10.400
tag h1, My Person Object seperti ini.

02:10.400 --> 02:14.570
Juga, tutuplah.

02:14.570 --> 02:15.653
Dan jika kita sekarang menyimpannya, itu mengkompilasi tanpa kesalahan.

02:19.130 --> 02:22.380
Dan memang, di sini Anda melihat hal ini ditampilkan di layar.

02:22.380 --> 02:26.350
Dan ini mudah-mudahan menunjukkan kepada Anda kekuatan

02:26.350 --> 02:29.720
yang Anda miliki dengan dekorator.

02:29.720 --> 02:31.720
Anda dapat membangun dekorator yang sangat canggih

02:31.720 --> 02:34.780
seperti ini, yang tiba-tiba melakukan keajaiban di belakang layar.

02:34.780 --> 02:38.500
Dan itulah yang saya maksud dengan metaprogramming.

02:38.500 --> 02:41.260
Kita menambahkan beberapa logika di sini, yang bisa kita

02:41.260 --> 02:43.930
ekspos jika ini akan menjadi pustaka pihak ketiga yang

02:43.930 --> 02:46.190
kita bagikan dengan pengguna lain.

02:46.190 --> 02:47.890
Kita bisa mengekspos ini sebagai bagian

02:47.890 --> 02:50.350
dari pustaka, dan siapa pun yang menggunakan pustaka

02:50.350 --> 02:52.630
kita dapat mengimpor fungsi dekorator ini dan menambahkannya

02:52.630 --> 02:54.910
ke kelas untuk kemudian secara ajaib merender beberapa

02:54.910 --> 02:57.408
konten secara tiba-tiba.

02:57.408 --> 03:00.500
Dan tentu saja, Anda, Anda bahkan tidak terbatas untuk melakukan itu.

03:00.500 --> 03:02.980
Jika Anda ingin menampilkan nama yang merupakan

03:02.980 --> 03:05.340
bagian dari kelas ketika kelas tersebut diinstansiasi,

03:05.340 --> 03:07.850
Anda dapat melakukannya juga.

03:07.850 --> 03:09.570
Kita mendapatkan konstruktor: Fungsi di sini.

03:09.570 --> 03:12.427
Sekarang apa yang bisa kita lakukan dengan itu adalah kita bisa

03:14.190 --> 03:16.010
membuat orang baru di sini, dengan memanggil

03:16.010 --> 03:18.660
konstruktor kita, karena itulah konstruktor kita: Fungsi

03:18.660 --> 03:20.380
di sini, bagaimanapun juga.

03:20.380 --> 03:23.820
Izinkan saya mengubah ini menjadi any, sehingga typescript mengizinkan

03:23.820 --> 03:26.570
ini dan tidak menganggapnya sebagai fungsi normal.

03:26.570 --> 03:29.240
Dan kemudian kita bisa pergi ke elemen hook

03:29.240 --> 03:31.880
kita, dan meminta tag h1, yang tentu saja dalam

03:31.880 --> 03:35.160
praktiknya, tidak akan selalu Anda miliki.

03:35.160 --> 03:36.070
Tetapi untuk tujuan demo, saya berasumsi

03:36.070 --> 03:37.330
bahwa kita akan selalu memilikinya di sini.

03:37.330 --> 03:39.820
Ups, dan saya harus selalu menutup tag h1 di

03:39.820 --> 03:42.330
sana sekarang setelah saya melihatnya.

03:42.330 --> 03:43.850
Dan kemudian di sini, dengan tanda

03:43.850 --> 03:46.750
seru, lagi-lagi dengan asumsi bahwa kita selalu menemukan

03:46.750 --> 03:49.900
elemen h1, kita dapat mengatur textContent sama dengan p. nama.

03:49.900 --> 03:53.660
Dan Jika saya melakukan itu dan menyimpannya,

03:53.660 --> 03:56.010
sekarang saya mengeluarkan nama, yang merupakan

03:56.010 --> 03:59.400
bagian dari objek di sini dalam template.

03:59.400 --> 04:01.540
Jadi, ini adalah sesuatu yang bisa Anda lakukan,

04:01.540 --> 04:03.420
dan tentu saja Anda bisa menulis dekorator

04:03.420 --> 04:06.010
yang jauh lebih rumit daripada yang saya lakukan di sini.

04:06.010 --> 04:07.840
Pertimbangkan Angular, kerangka kerja yang sangat

04:07.840 --> 04:09.550
populer yang menggunakan typescript.

04:09.550 --> 04:12.270
Mereka menggunakan dekorator, seperti dekorator

04:12.270 --> 04:15.740
komponen ini, untuk memungkinkan Anda mengoper objek

04:15.740 --> 04:18.420
di mana Anda menentukan hal-hal seperti templat

04:18.420 --> 04:21.020
untuk discomponent.

04:21.020 --> 04:21.930
Dan selektor di dom

04:21.930 --> 04:23.950
di mana templat ini harus dirender.

04:23.950 --> 04:25.760
Ini relatif dekat dengan apa yang kami definisikan di sini.

04:25.760 --> 04:28.170
Templat, dan kemudian tempat di mana templat itu harus dirender.

04:28.170 --> 04:31.230
Sekarang tidak perlu dikatakan lagi, dekorator Angular

04:31.230 --> 04:33.760
tentu saja jauh lebih canggih dan rumit daripada

04:33.760 --> 04:36.550
dekorator dasar kita di sini.

04:36.550 --> 04:38.740
Namun demikian, ide intinya sama.

04:38.740 --> 04:41.660
Angular memberi Anda dekorator di sini, sehingga

04:41.660 --> 04:43.900
Anda dapat menentukan beberapa kode

04:43.900 --> 04:46.700
HTML, yang dapat dihubungkan ke kelas komponen

04:46.700 --> 04:49.470
Anda yang akan dirender ke dom ketika komponen

04:49.470 --> 04:51.760
ini dirender.

04:51.760 --> 04:53.830
Sekarang jika Anda tidak tahu cara kerja

04:53.830 --> 04:55.850
Angular, itu bukan masalah.

04:55.850 --> 04:57.060
Anda hanya perlu memahami di sini,

04:57.060 --> 04:58.700
bahwa ini bekerja dengan kelas dan dekorator,

04:58.700 --> 05:01.300
dan kemudian pada dasarnya melakukan apa yang kita lakukan di sini.

05:01.300 --> 05:03.600
Jadi, itulah satu hal lain yang dapat Anda lakukan dengan dekorator,

05:03.600 --> 05:06.400
atau seperti yang secara khusus di sini, dengan pabrik dekorator.

05:06.400 --> 05:09.220
Karena itu memungkinkan kita untuk melewatkan

05:09.220 --> 05:12.210
konflik ekstra yang kita butuhkan di sini.

05:12.210 --> 05:13.610
Dan itu juga yang saya maksudkan dengan metaprogramming.

05:13.610 --> 05:16.590
Kita menciptakan sesuatu, kita menciptakan fungsi-fungsi

05:16.590 --> 05:21.130
dekorator, yang mungkin Anda katakan memiliki dampak pada pengguna akhir.

05:21.130 --> 05:24.840
Dalam NP dual render atau sesuatu di layar di sini.

05:24.840 --> 05:27.510
Tetapi kami melakukannya dengan alat yang kami

05:27.510 --> 05:29.090
ekspos ke pengembang lain.

05:29.090 --> 05:31.370
Karena dekorator ini adalah alat bantu, yang

05:31.370 --> 05:33.970
harus digunakan oleh pengembang lain dengan menambahkannya

05:33.970 --> 05:36.000
ke kelas dalam contoh ini.

05:36.000 --> 05:38.580
Kalau tidak, ini tidak akan menghasilkan apa-apa.

05:38.580 --> 05:40.300
Jadi, kami menyediakan utilitas

05:40.300 --> 05:43.490
ekstra bagi para pengembang, yang dapat digunakan oleh pengembang

05:43.490 --> 05:46.590
lain untuk, misalnya, merender sesuatu dengan mudah di

05:46.590 --> 05:49.050
layar untuk kelas pemberian.

05:49.050 --> 05:50.590
Itu adalah hal yang sama yang dilakukan Angular

05:50.590 --> 05:52.940
di sini, dengan cara yang lebih maju, dan itu adalah sesuatu yang sangat

05:52.940 --> 05:54.220
cocok untuk siswa kelas.
