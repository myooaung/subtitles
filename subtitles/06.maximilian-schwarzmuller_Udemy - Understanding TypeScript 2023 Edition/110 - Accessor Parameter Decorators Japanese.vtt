WEBVTT

00:02.210 --> 00:03.450
男性講師：さて､ プロパティ以外にも､

00:03.450 --> 00:06.170
アクセサにデコレーターを追加することができます｡ ここでは､

00:06.170 --> 00:11.660
自由な引数を受け取ることができるようになるので､ 新しいデコレーター関数を作成することにします｡

00:11.660 --> 00:18.330
Log2 では､ ターゲットも取得します｡ インスタンスアクセッサを扱っている場合はプロトタイプ､

00:18.330 --> 00:23.360
静的なものを扱っている場合はコンストラクタ関数になるので､ any

00:23.360 --> 00:27.290
型であることは分かりません｡

00:27.290 --> 00:32.290
そうすると､ 相手のメンバーの名前が出てくるんです｡ 

00:32.410 --> 00:35.030
だから､ 最後にアクセッサの名前｡ 

00:35.030 --> 00:42.030
また､ プロパティ・デスクリプタも用意し､ タイプはプロパティ・デスクリプタとします｡

00:42.030 --> 00:44.600
それがTypeScriptに組み込まれた型です｡ 

00:44.600 --> 00:49.600
そこで､ アクセサー・デコレーターをログに記録し､

00:50.030 --> 01:01.470
ターゲットもコンソールログに記録します｡

01:01.720 --> 01:07.350
では､ このようにセッターにlog2を追加して､ 何が得られるか見てみましょう｡

01:07.350 --> 01:14.090
これを保存すると､ アクセサー・デコレーターがここで実行されるのがわかります｡

01:14.090 --> 01:19.090
また試作品を手に入れました､ 物件のバフと同じです｡ 

01:19.320 --> 01:23.570
そして､ アクセサの名前､ この場合はpriceを取得しました｡ 

01:23.570 --> 01:24.900
アンダースコア価格ではないので､

01:24.900 --> 01:27.890
内部で扱うプロパティではありません｡

01:27.890 --> 01:30.570
代わりに本当にアクセサーそのものの名前です｡ 

01:30.570 --> 01:33.630
そして､ このプロパティ記述子を見ると､

01:33.630 --> 01:37.600
例えばセッター関数が定義されているのに対して､

01:37.600 --> 01:41.990
ゲッター関数は定義されていないことがわかります｡

01:41.990 --> 01:45.680
そして､ それは列挙可能ではなく､ 設定可能であることがわかります｡

01:45.680 --> 01:47.810
この定義を変更できるように､

01:47.810 --> 01:51.000
例えば削除したりすることができるように｡

01:51.000 --> 01:58.920
このように､ アクセサにデコレータを追加し､ そのデコレータの内部にアクセスすることができるのです｡

01:58.920 --> 02:00.910
プロパティとアクセサに加えて､ メソッドも用意され､

02:00.910 --> 02:04.350
メソッドにデコレータを追加できるようになりました｡

02:04.350 --> 02:11.970
ここでLog3を追加し､ それをテキストで価格を取得する下のメソッドに追加します｡

02:11.970 --> 02:13.220
そして､ 問題はもちろん､ このようなメソッド・デコレーターはどのような引数を受け取るのか､

02:13.220 --> 02:17.323
ということです｡

02:18.180 --> 02:28.420
メソッドデコレーターは自由引数も受け取り､ インスタンスメソッドであればそのターゲットは再びオブジェクトのプロトタイプとなる｡

02:28.420 --> 02:31.150
静的メソッドの場合は､ 先ほどと同じようにコンストラクタ関数､

02:31.150 --> 02:39.380
そしてメソッドの名前､ つまり文字列またはシンボルを指定します｡

02:39.380 --> 02:44.380
また､ 末尾のディスクリプタ､ プロパティディスクリプタ｡ 

02:44.490 --> 02:46.140
これらはここで得られる自由引数で､

02:46.140 --> 02:49.410
アクセッサと同じ引数であることがおわかりいただけると思います｡

02:49.410 --> 02:51.630
もちろん､ これを再利用することもできますが､

02:51.630 --> 02:54.340
ここではメソッド・デコレーターを表示できるように､

02:54.340 --> 02:57.483
新しいものを作成することにします｡

02:59.020 --> 03:00.840
これで保存すると､ メソッド・デコレーターが実行され､

03:01.980 --> 03:09.380
先ほどと同じオブジェクトのプロトタイプが表示されるのがわかります｡

03:09.380 --> 03:11.310
ここでメソッドの名前を取得し､

03:11.310 --> 03:14.700
ここでこのメソッドの記述子を取得します｡

03:14.700 --> 03:17.440
つまり､ 基本的には以前と全く同じ動作ですが､

03:17.440 --> 03:19.400
ただ､ 記述子はメソッド記述子であり､

03:19.400 --> 03:20.950
アクセッサ記述子ではないので､

03:20.950 --> 03:22.550
少し異なります｡

03:22.550 --> 03:25.720
ここでは､ 値と書き込み可能なプロパティを取得しました｡ 

03:25.720 --> 03:28.860
これまでアクセサー記述子には､ getとsetがありました｡

03:28.860 --> 03:30.910
しかし､ これはあくまでJavaScriptの違いであり､

03:30.910 --> 03:33.088
TypeScript固有のものではありません｡

03:33.088 --> 03:40.070
ここで､ 3つ目のデコレーター関数をメソッドに追加しました｡

03:40.070 --> 03:43.390
最後のデコレータは､ パラメータに追加するものです｡ 

03:43.390 --> 03:45.260
では､ 今からそれをやってみましょう｡ 

03:45.260 --> 03:47.550
ここではLog4という関数をもう一つ作り､

03:47.550 --> 03:57.130
taxという1つのパラメータにLog4を追加します｡

03:57.130 --> 04:02.990
必須ではありませんが､ デコレータを追加したいパラメータに独立して追加することができます｡

04:02.990 --> 04:06.419
さて､ パラメータ・デコレーターは何を引数として取得するのでしょうか？

04:06.419 --> 04:10.790
まあ､ ターゲットは以前と同じになるんですけどね｡ 

04:10.790 --> 04:12.520
次に得られる引数は名前であり､

04:12.520 --> 04:14.100
パラメータの名前ではなく､

04:14.100 --> 04:17.310
このパラメータを使用したメソッドの名前である｡

04:17.310 --> 04:20.530
つまり､ 基本的にはここまでのメソッド・デコレーターと同じです｡ 

04:20.530 --> 04:22.170
しかし､ 最後の主張は違います｡ 

04:22.170 --> 04:24.250
これは今､ プロパティディスクリプターではなく､

04:24.250 --> 04:30.100
この引数の位置なので､ 引数の番号になります｡

04:30.100 --> 04:32.763
例えばここでは､ これが第1引数になる｡ 

04:35.310 --> 04:38.670
では､ もう一度､ ここにあるものをコピーして､

04:38.670 --> 04:43.550
Log4パラメータ・デコレーターにすべて入れてみましょう｡

04:43.550 --> 04:45.410
そして､ ここでも出力位置を決めて､

04:45.410 --> 04:47.170
中身が見えるようにしましょう｡

04:47.170 --> 04:50.960
実行順序が異なるため､ 一番最後の出力ではありませんが､

04:50.960 --> 04:57.180
パラメータ・デコレータがここに､ そしてここに表示されていることがわかります｡

04:57.180 --> 04:59.530
前回と同じように試作品を手に入れました｡ 

04:59.530 --> 05:02.190
このパラメータを使用したメソッドの名前と､

05:02.190 --> 05:06.240
その引数のインデックスを取得し､ それは0から始まります｡ つまり､

05:06.240 --> 05:12.740
最初の引数の番号はここで0､ インデックスは0､ これがパラメータデコレータです｡

05:12.740 --> 05:14.920
以上､ デコレーターとTypeScriptを追加して､

05:14.920 --> 05:18.570
いろいろなことができるようになりました｡

05:18.570 --> 05:21.660
さて､ このモジュールではいくつかの例を紹介します｡

05:21.660 --> 05:28.380
また､ デコレータを多用するライブラリやフレームワークも紹介します｡

05:28.380 --> 05:30.550
そして､ デコレーターが持つ力を知ってもらうために､

05:30.550 --> 05:34.583
デコレーターでどんなことをしているのかを紹介します｡
