WEBVTT

00:02.220 --> 00:03.053
-: Devam edelim.

00:03.053 --> 00:04.950
Burada outFile seçeneğimiz var,

00:04.950 --> 00:07.730
şimdi bu seçenek şu anda bizim için önemli değil,

00:07.730 --> 00:09.440
şu anda çalışmayacak.

00:09.440 --> 00:12.340
Bizim için daha ilginç olan outDIR ve rootDir'dir.

00:12.340 --> 00:14.720
Projeniz büyüdükçe, dosyalarınızı daha

00:14.720 --> 00:17.640
fazla organize etmek isteyebilirsiniz.

00:17.640 --> 00:19.690
Tipik olarak, dosyalarınızın

00:19.690 --> 00:21.770
kök düzeydeki proje klasörünüzde

00:21.770 --> 00:24.120
bulunmasını istemezsiniz.

00:24.120 --> 00:26.580
Bunun yerine, projelerde sıklıkla göreceğiniz

00:26.580 --> 00:28.080
şey, bir kaynak klasörünüzün

00:28.080 --> 00:29.790
olması ve bir dist klasörünüzün

00:29.790 --> 00:31.240
olmasıdır.

00:31.240 --> 00:35.690
Dist klasörü tüm çıktıları, yani diyelim ki tüm JavaScript dosyalarını

00:35.690 --> 00:37.800
tutma görevine sahiptir.

00:37.800 --> 00:41.380
Ve kaynak klasörü tüm TypeScript dosyalarımızı tutabilir.

00:41.380 --> 00:44.643
Böylece TypeScript dosyalarını kaynak klasörüne taşıyabiliriz

00:44.643 --> 00:47.430
ve şimdi JavaScript klasörünü silersem, her

00:47.430 --> 00:49.891
şeyi derlediğimizde bu TypeScript dosyalarının

00:49.891 --> 00:53.167
derlenmesi gibi bir sorunumuz olur çünkü TypeScript,

00:53.167 --> 00:55.768
derleyici alt klasörlere bakar, ancak çıktı

00:55.768 --> 01:00.050
girdi dosyalarımızın yanında yer alır.

01:00.050 --> 01:02.760
Ve bu, örneğin outDir ile kontrol edebileceğimiz

01:02.760 --> 01:03.660
bir şeydir.

01:03.660 --> 01:07.117
outDir'i ayarlarsak, derleyici ile türlere oluşturulan

01:07.117 --> 01:10.900
dosyanın nerede saklanması gerektiğini söyleyebiliriz.

01:10.900 --> 01:13.580
Bunu uzak olarak ayarlayabiliriz.

01:13.580 --> 01:17.037
Şimdi bunu yaparsak, chia seed'i çalıştırdığınızda JavaScript

01:17.037 --> 01:19.560
dosyalarının gerçekten de kaynak klasörüne

01:19.560 --> 01:21.500
değil, dist klasörüne yerleştirildiğini

01:21.500 --> 01:23.170
göreceksiniz.

01:23.170 --> 01:26.340
Şimdi sadece endeksimizi ayarlamamız gerekiyor. html dosyasını ve orada dist/app'yi

01:26.340 --> 01:31.630
işaret eder. js ve dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
veya alternatif olarak dizini taşıyın. html dosyasını dist klasörüne

01:33.880 --> 01:36.172
yerleştirdik ancak bu durumda def sunucumuz şu anda

01:36.172 --> 01:37.550
düzgün çalışmayacaktır.

01:37.550 --> 01:39.875
O halde bu içe aktarmaları ayarlayalım

01:39.875 --> 01:44.140
ve gördüğünüz gibi hala çalışan bir uygulamamız var, ancak

01:44.140 --> 01:45.270
şimdi daha temiz

01:45.270 --> 01:48.480
bir proje yapısına sahibiz.

01:48.480 --> 01:49.650
Şimdi iyi olan şey, eğer

01:49.650 --> 01:51.530
burada bir alt klasörümüz, diyelim

01:51.530 --> 01:52.980
ki bir analitik klasörümüz

01:52.980 --> 01:54.893
olsaydı ve TypeScript dosyamız orada

01:54.893 --> 01:57.350
olsaydı, o zaman yeniden derlersek ve bunu bu

01:57.350 --> 02:00.373
komutla mı yoksa izleme moduyla mı yaptığınız önemli değil,

02:00.373 --> 02:03.300
kaynak klasörünüzde sahip olduğunuz bu klasör yapısının

02:03.300 --> 02:05.640
tümü dist klasöründe kopyalanacaktır, bu

02:05.640 --> 02:08.813
da elbette çok kullanışlıdır çünkü bu, dosyaları temelde

02:08.813 --> 02:14.110
kaynak klasörde içe aktardığınız gibi içe aktarabilmenizi sağlar, böylece orada kurduğunuz

02:14.110 --> 02:16.640
yapı korunur.

02:16.640 --> 02:18.800
Şimdi kök dizini de ayarlayabilir ve

02:18.800 --> 02:21.230
derleyici türlerinin klasörlerimize bakmadığından

02:21.230 --> 02:23.800
emin olmak için bunu özellikle dosyalarınızın

02:23.800 --> 02:25.202
depolandığı klasöre, bu

02:25.202 --> 02:30.030
örnekte olduğu gibi kaynak olarak ayarlayabilirsiniz.

02:30.030 --> 02:31.530
Bu da aşağıdaki dahil et seçeneği

02:31.530 --> 02:34.003
ile yapabileceğiniz bir şey, değil mi?

02:34.870 --> 02:36.007
Ancak kök dizinde,

02:36.007 --> 02:38.781
derleyici türleri yalnızca bu kaynak

02:38.781 --> 02:41.450
klasöre bakmaz, aynı zamanda orada

02:41.450 --> 02:45.680
kurduğunuz proje yapısının bir dist klasöründe tutulduğundan

02:45.680 --> 02:47.880
emin olur.

02:47.880 --> 02:50.020
Gördüğünüz gibi bunu daha önce varsayılan olarak

02:50.020 --> 02:51.820
yapıyordu, ancak daha önce buraya herhangi

02:51.820 --> 02:54.280
bir TypeScript dosyasını, kaynağın tüm başlangıcını dahil

02:54.280 --> 02:55.699
edeceğini unutmayın, bu nedenle,

02:55.699 --> 02:58.830
örneğin, burada bir kullanıcı ile üst düzeyde bir kullanıcı klasörümüz olsaydı,

02:58.830 --> 03:03.280
bunu geçici olarak yorumlarsanız.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
dosyasında diyelim ki Max kullanıcı adı var, o zaman

03:06.170 --> 03:07.750
bunu derlediğimizde hepiniz

03:07.750 --> 03:09.752
dist klasöründe bu kullanıcı klasörünü

03:09.752 --> 03:11.420
göreceksiniz.

03:11.420 --> 03:13.810
Ve şimdi kaynak klasörü de dahil edildi çünkü

03:13.810 --> 03:17.200
şimdi daha yüksek bir seviyede bir typescript dosyamız var

03:17.200 --> 03:19.950
ve bu nedenle typescript derleyicisi tüm projemizin

03:19.950 --> 03:21.780
yine girdi olduğunu düşünüyor ve

03:21.780 --> 03:25.970
orada dist klasöründe bulduğu klasör yapısını kopyalıyor.

03:25.970 --> 03:28.960
Elbette bu bizim istediğimiz bir şey değildir ve rootDir

03:28.960 --> 03:30.120
seçeneği bu noktada

03:30.976 --> 03:32.660
bize yardımcı olur.

03:32.660 --> 03:34.020
Şimdi bunu kaynak olarak ayarlarsak,

03:34.020 --> 03:35.950
kök düzeyinde TypeScript dosyaları

03:35.950 --> 03:38.630
içeren başka klasörlerimiz olsa bile bunlar çıktıya

03:38.630 --> 03:40.400
dahil edilmeyecek ve kaynak klasörün

03:40.400 --> 03:43.780
kendisi aniden orada bitmeyecektir.

03:43.780 --> 03:46.480
Bu nedenle, girdi dosyalarınızın nerede bulunduğu ve çıktı dosyalarınızın

03:46.480 --> 03:49.650
nerede oluşturulacağı konusunda gerçekten net olmak için genellikle hem

03:49.650 --> 03:52.040
rootDir hem de outDir'i ayarlarsınız.

03:52.040 --> 03:54.870
Eğer yolumuza devam edersek, kompoziti görmezden gelebiliriz.

03:54.870 --> 03:57.010
removeComments'a bir göz atabiliriz.

03:57.010 --> 03:58.780
Bunu ayarlarsanız, TypeScript

03:58.780 --> 04:00.850
dosyalarınızda olabilecek tüm

04:00.850 --> 04:04.450
yorumların derlenen JavaScript dosyalarında kaldırılacağı

04:04.450 --> 04:08.000
oldukça açık olmalıdır.

04:08.000 --> 04:11.200
Yani bunu yorumlarsam ve kodumu derlersem, bir uygulama

04:11.200 --> 04:12.970
görürsünüz. Ts, bir yorumum var.

04:12.970 --> 04:14.990
Bir uygulama. Js, orada değil.

04:14.990 --> 04:18.330
Böylece dosyalarınızı küçültmek için bunu yapabilirsiniz

04:18.330 --> 04:20.950
ve bu çaba güzel bir seçenek olabilir.

04:20.950 --> 04:23.820
Herhangi bir JavaScript dosyası oluşturmak istemiyorsanız noEmit

04:23.820 --> 04:25.600
seçeneğini de ayarlayabilirsiniz.

04:25.600 --> 04:27.130
Şimdi bu garip gelebilir çünkü

04:27.130 --> 04:29.190
TypeScript'in fikri budur, ancak dosyalarınızın

04:29.190 --> 04:30.700
doğru olup olmadığını kontrol

04:30.700 --> 04:32.420
etmek istiyorsanız ancak tüm bu çıktı

04:32.420 --> 04:35.030
dosyalarını yazmak istemiyorsanız, örneğin daha

04:35.030 --> 04:37.680
büyük bir projede biraz zaman kazanmak için, o zaman

04:37.680 --> 04:39.120
bunu "true" olarak ayarlayarak

04:39.120 --> 04:41.792
derleyici türlerinin dosyalarınızı kontrol etmesini

04:41.792 --> 04:45.460
ve aslında bir çıktı dosyası oluşturmadan olası hataları bildirmesini

04:45.460 --> 04:47.903
sağlayabilirsiniz.

04:47.903 --> 04:50.490
importHelpers bizim için gerçekten önemli değil, burada

04:50.490 --> 04:52.065
bunu görmezden gelebiliriz.

04:52.065 --> 04:54.570
downlevelIteration gelişmiş bir seçenektir.

04:54.570 --> 04:57.150
Kodunuzu JavaScript'in eski sürümlerine

04:57.150 --> 05:00.295
derlediğinizde ve dört döngü ile çalıştığınızda

05:00.295 --> 05:02.690
ilginçtir.

05:02.690 --> 05:05.798
Daha sonra bazı nadir senaryolarda derlemenin düzgün çalışmadığı

05:05.798 --> 05:08.378
sorunlarla karşılaşabilirsiniz.

05:08.378 --> 05:10.440
Bu seçeneği açarsanız, size bu niş durumlarda

05:10.440 --> 05:12.770
çalışacak daha kesin bir derleme sağlar, bu nedenle

05:12.770 --> 05:15.280
her zaman açmanız gerektiğini düşünebilirsiniz,

05:15.280 --> 05:17.210
ancak aynı zamanda bu kodların olduğu

05:17.210 --> 05:20.097
yerlerde daha fazla çıktı verecektir.

05:20.097 --> 05:21.880
Bu nedenle, bunu yalnızca döngüleriniz

05:21.880 --> 05:25.110
varsa ve oluşturulan kodunuzun bu döngülerle ilgili olarak aniden

05:25.110 --> 05:27.700
olması gerekenden farklı davrandığını görürseniz

05:27.700 --> 05:29.023
açmalısınız.
