WEBVTT

00:02.510 --> 00:04.490
Instruktur: Dengan kelas dasar kita jika kita sekarang pergi

00:04.490 --> 00:07.570
ke folder dist dan kita memeriksa aplikasi. js, kita melihat apa yang dihasilkan

00:07.570 --> 00:10.110
dalam JavaScript, dan di sana Anda melihat bahwa

00:10.110 --> 00:13.560
pada dasarnya kita memiliki kode yang sama.

00:13.560 --> 00:17.870
Dua perbedaan penting adalah, bahwa bidang nama yang kita

00:17.870 --> 00:20.870
miliki di sini tidak ada seperti ini di sini

00:20.870 --> 00:22.230
di dalam kelas.

00:22.230 --> 00:25.460
Hal ini sebenarnya akan didukung dalam JavaScript modern,

00:25.460 --> 00:27.910
tetapi itu tergantung pada versi JavaScript

00:27.910 --> 00:29.130
yang Anda buat.

00:29.130 --> 00:33.450
Jadi di ES6 sendiri, sebenarnya tidak didukung.

00:33.450 --> 00:35.430
Dan tentu saja yang mengagumkan adalah

00:35.430 --> 00:37.360
melihat jenis penugasannya.

00:37.360 --> 00:39.760
Kami memiliki logika konstruksi

00:39.760 --> 00:43.870
kami, dan memang begitulah cara Anda menambahkan properti

00:43.870 --> 00:48.150
ke objek yang akan dibuat di Vanilla JavaScript saat tidak menggunakan

00:48.150 --> 00:51.570
JavaScript versi terbaru di mana sintaks bidang

00:51.570 --> 00:54.470
ini juga akan didukung.

00:54.470 --> 00:56.480
Jadi, inilah yang saya miliki dalam JavaScript.

00:56.480 --> 00:58.710
Namun sekarang menjadi menarik jika

00:58.710 --> 01:02.080
kita pergi ke tsconfig. json dan kita mengganti

01:02.080 --> 01:05.970
target dari ES5 ke ES6 dan mengomentari lib di sini.

01:05.970 --> 01:08.190
Sehingga pustaka yang benar dan direkomendasikan

01:08.190 --> 01:10.870
ditambahkan oleh TypeScript secara otomatis.

01:10.870 --> 01:14.090
Jika sekarang Anda menyimpan file konfigurasi ini, dan Anda kembali ke aplikasi. Anda melihat sesuatu

01:14.090 --> 01:16.350
yang sama sekali berbeda.

01:16.350 --> 01:18.810
Dan itu cukup menarik apa yang kita lihat di sini.

01:18.810 --> 01:20.960
Apa yang kita miliki di sini?

01:20.960 --> 01:23.290
Nah, apa yang pada akhirnya kita miliki

01:23.290 --> 01:26.453
di sini adalah apa yang disebut fungsi konstruktor.

01:27.299 --> 01:31.600
Fungsi konstruktor adalah sesuatu yang dibangun

01:31.600 --> 01:33.770
ke dalam JavaScript yang

01:33.770 --> 01:35.520
pada dasarnya telah

01:35.520 --> 01:40.230
ada sejak lama, dan ini adalah cara Vanilla JavaScript

01:40.230 --> 01:44.480
non-modern untuk membuat cetak biru objek.

01:44.480 --> 01:47.100
Ini adalah fungsi yang dipanggil dengan bantuan kata

01:47.100 --> 01:50.890
kunci new dan kemudian tiba-tiba, secara ajaib, fungsi ini meskipun tidak

01:50.890 --> 01:53.640
memiliki pernyataan kembali di dalamnya, mengembalikan

01:53.640 --> 01:55.850
sesuatu seperti yang Anda lihat ketika kita

01:55.850 --> 01:57.540
memanggilnya di sini.

01:57.540 --> 01:59.730
Ini mengembalikan sebuah objek.

01:59.730 --> 02:03.110
Objek baru yang akan memiliki properti nama.

02:03.110 --> 02:04.940
Jadi konsep ini bukanlah hal baru,

02:04.940 --> 02:08.680
tidak diperkenalkan oleh JavaScript modern atau oleh TypeScript.

02:08.680 --> 02:12.500
Ide untuk memiliki cetak biru untuk objek telah ada di JavaScript

02:12.500 --> 02:15.180
untuk waktu yang sangat lama.

02:15.180 --> 02:19.070
Namun di masa lalu, kita harus menggunakan fungsi konstruktor dan karena

02:19.070 --> 02:21.870
ini bisa sedikit tidak intuitif terutama bagi pengembang

02:21.870 --> 02:24.520
yang mungkin telah bekerja dengan bahasa pemrograman

02:24.520 --> 02:26.600
yang berbeda.

02:26.600 --> 02:30.510
JavaScript modern memperkenalkan ide kelas sintaksis

02:30.510 --> 02:34.950
yang lebih bersih ini, dan TypeScript juga mendukung hal ini.

02:34.950 --> 02:38.180
Dan karena kompilasi TypeScript yang kuat, Anda dapat memilih

02:38.180 --> 02:40.830
di mana pun Anda ingin mengkompilasinya, gaya

02:40.830 --> 02:44.130
lama yang tentu saja berfungsi di lebih banyak browser atau

02:44.130 --> 02:48.280
ke dalam gaya ES6 yang lebih modern yang kita lihat sebelumnya.

02:48.280 --> 02:51.700
Yang terlihat sangat mirip seperti ini di sini.

02:51.700 --> 02:54.500
Kunci utamanya adalah bahwa kita memiliki fitur ini yang

02:54.500 --> 02:57.300
dibangun ke dalam JavaScript dan didukung oleh TypeScript

02:57.300 --> 03:00.163
sehingga kita dapat mendefinisikan cetak biru objek.
