WEBVTT

00:02.170 --> 00:04.780
-: Tak więc, celem jest zbudowanie komponentu listy rzeczy

00:04.780 --> 00:06.330
do zrobienia i stąd tutaj w folderze

00:06.330 --> 00:08.600
źródłowym, dodam nowy podfolder, komponenty,

00:08.600 --> 00:11.280
a w nim "to-doList. tsx", który przechowywałby

00:11.280 --> 00:13.690
mój komponent listy rzeczy do zrobienia.

00:13.690 --> 00:15.370
Teraz, aby zbudować komponent react,

00:15.370 --> 00:17.030
musimy zaimportować React z "react",

00:17.030 --> 00:20.250
w przeciwnym razie JXS nie będzie działał w tym pliku.

00:20.250 --> 00:22.820
Następnie tworzę moją stałą listy rzeczy do zrobienia,

00:22.820 --> 00:24.530
która przechowuje funkcję strzałki

00:24.530 --> 00:26.990
i oczywiście nie musi to być funkcja strzałki, możesz

00:26.990 --> 00:30.320
również użyć funkcji ze słowem kluczowym function.

00:30.320 --> 00:33.160
Teraz wyeksportujemy to.

00:33.160 --> 00:36.500
Teraz użyjmy naszych dodatkowych funkcji typescript i ustawmy

00:36.500 --> 00:39.370
typ tego na react. fc, aby wskazać, że nie

00:39.370 --> 00:42.010
powinna to być zwykła funkcja, ale składnik

00:42.010 --> 00:43.950
funkcjonalny.

00:43.950 --> 00:46.920
Stąd otrzymujemy błąd, ponieważ nie zwracamy czegoś,

00:46.920 --> 00:49.790
co kwalifikuje się jako element react.

00:49.790 --> 00:53.250
Więc w tym miejscu powinniśmy zwrócić, powiedzmy, nieuporządkowaną listę.

00:53.250 --> 00:54.850
Ponieważ chcę renderować listę

00:54.850 --> 00:58.000
tutaj, zwracanie nieuporządkowanej listy na razie ma sens.

00:58.000 --> 01:02.740
Teraz, na tej nieuporządkowanej liście, chcę wyprowadzić elementy listy.

01:02.740 --> 01:07.230
Tak więc, w tym miejscu moglibyśmy się spodziewać, że dostaniemy nasze to-dos,

01:07.230 --> 01:09.240
a to jest tablica, a w tablicy mamy

01:09.240 --> 01:11.690
obiekt, gdzie każdy element ma ID.

01:11.690 --> 01:15.627
Powiedzmy, że t1 dla to-do one i tekst

01:15.627 --> 01:18.100
typu "Ukończ kurs. To tylko jeden element, ale oczywiście mógłbyś

01:18.100 --> 01:18.933
mieć wiele takich

01:18.933 --> 01:20.800
obiektów w tej tablicy.

01:20.800 --> 01:22.010
W tym miejscu na naszej liście możemy następnie

01:22.010 --> 01:24.620
dynamicznie wyprowadzać to-dos i mapować je na listę elementów listy.

01:24.620 --> 01:29.620
Więc tutaj, przechodzimy przez wszystkie to-do, jest to wbudowana

01:30.250 --> 01:32.930
funkcja JavaScript, oczywiście, funkcja

01:32.930 --> 01:35.070
map, i zwracamy element listy

01:35.070 --> 01:37.740
dla każdego elementu w tej tablicy i

01:37.740 --> 01:41.530
w tym elemencie listy, ustawiam "to-do. text" jako treść na elemencie listy i dodać ten specjalny kluczowy

01:41.530 --> 01:45.570
rekwizyt, który React faktycznie

01:45.570 --> 01:47.870
chce na powtarzających się elementach

01:47.870 --> 01:49.620
siedzących obok siebie.

01:49.620 --> 01:51.980
Tutaj powinniśmy wybrać coś unikalnego, a identyfikator powinien

01:51.980 --> 01:54.130
kwalifikować się jako unikalny identyfikator.

01:54.130 --> 01:57.710
Za pomocą tego renderujemy listę to-dos.

01:57.710 --> 02:00.470
Zintegrujmy teraz komponent listy rzeczy do zrobienia

02:00.470 --> 02:02.860
z komponentem aplikacji i w tym celu możemy oczywiście

02:02.860 --> 02:05.520
przejść do komponentu aplikacji, zaimportować "TodoList"

02:05.520 --> 02:06.930
z ". /components/TodoList"

02:06.930 --> 02:11.530
jak to ma miejsce w przypadku ". tsx" zostanie dodane automatycznie przez build workflow,

02:11.530 --> 02:14.350
którego używamy pod maską.

02:14.350 --> 02:17.160
A następnie tutaj wewnątrz naszego div, możemy renderować

02:17.160 --> 02:18.850
"TodoList" w ten sposób.

02:18.850 --> 02:21.440
Jeśli teraz to zapiszemy i wrócimy do strony z uruchomieniem,

02:21.440 --> 02:24.190
to widzimy tutaj ten jeden to-do.

02:24.190 --> 02:25.870
Stylizacja jest okropna i możemy dodać

02:25.870 --> 02:29.350
lepszą stylizację później, ale na razie powinno to być w porządku.

02:29.350 --> 02:31.680
Teraz to jednak nie jest do końca realistyczne.

02:31.680 --> 02:35.620
Kiedy budujemy tę aplikację do listy rzeczy do zrobienia, później chcę mieć możliwość

02:35.620 --> 02:37.950
dodawania nowych to-do za pomocą osobnego komponentu,

02:37.950 --> 02:40.063
którego jeszcze nie mamy.

02:40.063 --> 02:42.920
I prawdopodobnie będziemy zarządzać to-dos

02:42.920 --> 02:45.570
tutaj w tym komponencie aplikacji, ponieważ

02:45.570 --> 02:48.810
tutaj w tym miejscu będziemy mieli komponent, który

02:48.810 --> 02:53.020
dodaje to-dos i ten komponent będzie mógł rozmawiać z powrotem do tego

02:53.020 --> 02:55.280
komponentu aplikacji.

02:55.280 --> 02:56.690
Tutaj zarządzamy naszą

02:56.690 --> 02:59.650
tablicą to-dos i dodajemy to-dos do tej tablicy lub

02:59.650 --> 03:01.510
usuwamy to-dos z tej tablicy.

03:01.510 --> 03:04.220
Do listy rzeczy do zrobienia przekażemy następnie tę tablicę.

03:04.220 --> 03:06.930
Tak więc, nawet jeśli jeszcze tym nie zarządzamy, prawdopodobnie

03:06.930 --> 03:09.270
mielibyśmy tę tablicę "todos" nie w liście rzeczy do

03:09.270 --> 03:11.660
zrobienia, ale w komponencie aplikacji.

03:11.660 --> 03:15.010
To jest bardziej realistyczne, że ta tablica później trafi do nas, więc

03:15.010 --> 03:16.740
możemy ją już przenieść tutaj.

03:16.740 --> 03:20.093
Teraz musimy przekazać ją do "TodoList. Do tego oczywiście możemy wykorzystać rekwizyty.

03:20.930 --> 03:23.600
Tak więc na liście rzeczy do zrobienia, można by mieć

03:23.600 --> 03:25.640
prop items, nazwa oczywiście zależy od nas,

03:25.640 --> 03:28.370
ponieważ definiujemy ten komponent, możemy zdefiniować

03:28.370 --> 03:30.350
jak jego prop ma się nazywać.

03:30.350 --> 03:32.100
Możemy podać naszą tablicę "todos".

03:32.100 --> 03:35.010
Teraz już widzimy, że IDE tego nie lubi i jeśli próbuję to

03:35.010 --> 03:37.820
zapisać, to również dostaliśmy błąd kompilacji.

03:37.820 --> 03:40.650
Otrzymaliśmy błąd kompilacji, ponieważ

03:40.650 --> 03:45.400
właściwość "items" nie istnieje na typie whatever.

03:45.400 --> 03:47.830
Czyli w zasadzie nie istnieje na tym skrzyżowaniu typ

03:47.830 --> 03:50.440
tutaj który w końcu definiuje strukturę rekwizytów otrzymywanych

03:50.440 --> 03:52.070
przez "TodoList". Ponieważ podczas używania typescript

03:52.070 --> 03:55.300
z React, musisz być jasny co do typów, z którymi pracujesz.

03:55.300 --> 03:59.470
To nie oznacza tylko, że mówisz typescriptowi, że jest to specjalny

03:59.470 --> 04:02.110
rodzaj funkcji, nie, oznacza to również,

04:02.110 --> 04:05.250
że jeśli polegasz na rekwizytach w jakimś komponencie,

04:05.250 --> 04:08.360
mówisz typescriptowi, jak te rekwizyty powinny wyglądać,

04:08.360 --> 04:11.020
jak są skonstruowane.

04:11.020 --> 04:14.860
Więc w komponencie listy rzeczy do zrobienia, otrzymujemy tutaj

04:14.860 --> 04:17.420
rekwizyty, prawda, to jest zwykły React.

04:17.420 --> 04:19.400
A na rekwizytach mamy prawdopodobnie własność naszego przedmiotu.

04:19.400 --> 04:23.530
Mamy więc prop o nazwie "items" i to jest rzeczywiście

04:23.530 --> 04:26.200
to, co powiedziałem tutaj na

04:26.200 --> 04:30.323
górze: "Mam ten prop items. Problem teraz polega na tym, że to technicznie działałoby, ale typescript

04:31.420 --> 04:33.430
jeszcze nie abortuje.

04:33.430 --> 04:35.067
Tak naprawdę nie powiedzieliśmy typescriptowi,

04:35.067 --> 04:37.140
że nasz prop powinien mieć tutaj właściwość "items".

04:37.140 --> 04:39.503
Aby to powiedzieć, możemy użyć faktu,

04:39.503 --> 04:41.950
że ten typ składnika funkcji tutaj jest

04:41.950 --> 04:45.063
w rzeczywistości typem generycznym.

04:45.063 --> 04:46.913
Typ generyczny, w którym możemy zdefiniować wszystkie

04:47.840 --> 04:50.510
dodatkowe rekwizyty poza domyślnym rekwizytem children, który posiada każdy

04:50.510 --> 04:52.170
komponent, a którego tutaj oczekujemy.

04:52.170 --> 04:54.250
Możemy więc dodać tutaj nawiasy kątowe

04:54.250 --> 04:58.132
i dodać nasz obiekt, który opisuje strukturę tego obiektu "props", który

04:58.132 --> 05:00.710
otrzymujemy tutaj lub, aby utrzymać nasz kod szczuplejszy,

05:00.710 --> 05:03.670
robimy to w dodatkowym interfejsie tutaj i to jest całkowicie

05:03.670 --> 05:06.170
opcjonalne.

05:06.170 --> 05:09.670
Tak więc tutaj możemy mieć rekwizyty z listy rzeczy do zrobienia

05:09.670 --> 05:12.350
i to opisuje jak wyglądają nasze rekwizyty.

05:12.350 --> 05:15.120
I tutaj spodziewam się uzyskać klucz "items",

05:15.120 --> 05:18.260
gdzie mamy tablicę obiektów, gdzie każdy obiekt

05:18.260 --> 05:20.510
ma ID, który jest ciągiem znaków, i

05:20.510 --> 05:23.380
ma tekst, który jest ciągiem znaków.

05:23.380 --> 05:26.120
To są dane, którymi tutaj zarządzamy.

05:26.120 --> 05:30.020
Mamy tablicę obiektów z ciągiem ID

05:30.020 --> 05:32.850
i ciągiem tekstowym.

05:32.850 --> 05:34.370
To jest to, czego oczekuję, aby uzyskać tutaj

05:34.370 --> 05:36.070
to "props" tablica takich obiektów i jeśli jesteśmy

05:36.070 --> 05:38.940
tutaj, możemy teraz wskazać na ten interfejs props listy rzeczy do zrobienia

05:38.940 --> 05:40.700
i teraz wszystko jest w porządku. Teraz typescript rozumie,

05:40.700 --> 05:42.670
że tutaj dostaniemy rekwizyty,

05:42.670 --> 05:45.040
gdzie będziemy mieli rekwizyt items

05:45.040 --> 05:48.640
i że ten rekwizyt items będzie tablicą, gdzie mamy klucz

05:48.640 --> 05:52.145
ID i klucz tekstowy na każdym

05:52.145 --> 05:55.000
elemencie tablicy.

05:55.000 --> 05:56.920
Więc teraz, jeśli zapiszemy to, skompiluje się

05:56.920 --> 05:58.870
i ponownie otrzymamy działające wyjście.

05:58.870 --> 05:59.850
Więc znowu jest to typescript używany z React.

05:59.850 --> 06:02.390
Nie używamy go tylko po to, aby powiedzieć Reactowi lub powiedzieć

06:02.390 --> 06:04.188
typescriptowi, że jest to funkcjonalny komponent,

06:04.188 --> 06:06.830
ale także o rekwizytach, które ten komponent ostatecznie dostaje

06:06.830 --> 06:10.000
i to bardzo pomaga nam w bezpieczeństwie typu.

06:10.000 --> 06:13.490
Unika, że ja tu przypadkowo myślę, że to się

06:13.490 --> 06:15.130
nazywa "todos". Nie, to nie jest obsługiwane, otrzymujemy błąd.

06:15.130 --> 06:19.060
To są przedmioty.

06:19.060 --> 06:21.165
Wszyscy zobaczycie, że otrzymują tutaj autouzupełnienie.

06:21.165 --> 06:23.330
Więc kodowanie staje się o wiele łatwiejsze podczas

06:23.330 --> 06:24.910
pracy z typescript tutaj. I to oczywiście jest cała zaleta typescript: upraszcza

06:24.910 --> 06:27.160
kodowanie, pozwala uniknąć niepotrzebnych błędów i jak widać robi to również

06:27.160 --> 06:28.400
w aplikacji typu react.

06:28.400 --> 06:30.670
Oczywiście, nie skończyliśmy jednak.

06:30.670 --> 06:34.420
W tej chwili nasze to-dosy tutaj nigdy się

06:34.420 --> 06:36.640
nie zmieniają

06:36.640 --> 06:39.930
i chcę to zmienić, chcę mieć komponent,

06:39.930 --> 06:44.120
który pozwoli nam dodawać nowe to-dosy.

06:44.120 --> 06:46.080
Więc popracujmy nad tym w następnej kolejności.
