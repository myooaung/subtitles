WEBVTT

00:02.220 --> 00:03.053
教师：现在, 如果您继续,

00:03.053 --> 00:04.883
我们会有更多选项, noUnusedLocals､

00:04.883 --> 00:07.920
noUnusedParameters､ noImplicitReturns｡

00:07.920 --> 00:10.470
基本上, 这有助于提高代码质量｡ 

00:10.470 --> 00:15.930
如果您有某些未使用的变量等, TypeScript将发出抱怨｡

00:15.930 --> 00:20.930
例如, 如果我们打开这三个选项, 这个选项可以帮助您使用Switch语句,

00:21.711 --> 00:26.270
而您可能会忘记break关键字｡

00:26.270 --> 00:28.880
但是如果我们打开这三个选项, TypeScript会抱怨,

00:28.880 --> 00:36.730
比如, 如果你在这里有一个用户名变量, 在这个函数的本地, 而你没有使用它｡

00:36.730 --> 00:39.490
你看, 这里有黄色的曲线, 因为这不是错误,

00:39.490 --> 00:41.500
真的｡

00:41.500 --> 00:43.179
更像是警告或者暗示｡ 

00:43.179 --> 00:45.643
如果我在这里编译, 你会看到, 但是,

00:47.750 --> 00:51.900
我得到了一个错误, 因为TypeScript只知道错误｡

00:51.900 --> 00:54.140
在这里我们看到声明了用户名,

00:54.140 --> 01:00.550
但是它的值从未被读取, 因为我们确保不需要未使用的局部变量｡

01:00.550 --> 01:02.483
未使用的全局变量, 例如appId,

01:03.440 --> 01:13.870
是允许的, 因为TypeScript无法知道您是否需要在另一个脚本文件中使用全局定义的值｡

01:13.870 --> 01:14.980
因此, 这是允许的,

01:14.980 --> 01:17.280
但是在一个没有其他地方需要它的函数中,

01:17.280 --> 01:22.020
如果你有未使用的代码, TypeScript现在就会抱怨｡

01:22.020 --> 01:23.540
这是个好主意｡ 

01:23.540 --> 01:26.021
允许您删除此类未使用的代码｡ 

01:26.021 --> 01:28.510
未使用的参数也是如此｡ 

01:28.510 --> 01:31.350
如果你在这里取一个H, 当然, 绑定现在被打破了,

01:31.350 --> 01:33.050
但是即使我们在这里传递这个,

01:33.050 --> 01:35.970
但是现在, 同样, TypeScript和ID告诉我们,

01:35.970 --> 01:44.293
这个是未使用的, 或者这个, 所以也许你应该删除它或者开始使用它｡

01:45.238 --> 01:48.173
所以这就是noUnusedParameters｡ 

01:48.173 --> 01:51.365
noImplicitReturns意味着如果我们有一个函数,

01:51.365 --> 01:57.130
有时返回, 有时不返回, 我们就会得到一个错误｡

01:57.130 --> 02:02.940
假设我们有另一个函数add, 我们得到两个数｡

02:02.940 --> 02:05.906
数和n2是一个数｡ 

02:05.906 --> 02:10.906
当然, 我们可以返回n1加上n2｡ 

02:14.030 --> 02:15.710
但我们假设, 出于某种原因,

02:15.710 --> 02:18.518
我们要检查n1 + n2是否大于0,

02:18.518 --> 02:23.700
因为我们只想在结果大于0时返回｡

02:23.700 --> 02:25.040
然后我们需要一个返回值｡ 

02:25.040 --> 02:26.940
否则我们什么都不想还｡ 

02:26.940 --> 02:28.170
我们不想要退货｡ 

02:28.170 --> 02:32.598
然后我们会收到一个警告, 因为noImplicitReturns的额外设置｡

02:32.598 --> 02:36.401
TypeScript检测到此函数中并非所有分支都指向return语句,

02:36.401 --> 02:40.650
并且由于我们的设置, 这是不允许的｡

02:40.650 --> 02:45.790
我们至少必须通过添加return关键字来故意不返回任何内容｡

02:45.790 --> 02:48.260
此处不允许省略｡ 

02:48.260 --> 02:49.730
如果你有一个函数在no分支中不返回任何东西,

02:49.730 --> 02:54.520
这是允许的, 但是如果你有至少一个case你的函数确实返回了一些东西,

02:54.520 --> 02:59.933
那么你必须确保你在所有的case中都返回了一些东西｡

03:01.830 --> 03:04.240
至此, 本配置演练已接近尾声｡

03:04.240 --> 03:06.526
我们可以忽略这里的moduleResolution｡ 

03:06.526 --> 03:08.933
所有这些选项实际上都很先进,

03:08.933 --> 03:10.830
这对我们来说并不重要,

03:10.830 --> 03:13.510
对你在很多项目中也不重要｡

03:13.510 --> 03:18.180
Source Map Options允许您调整我们之前看到的这些源地图｡

03:18.180 --> 03:21.440
所以这些从JavaScript到TypeScript的翻译文件｡ 

03:21.440 --> 03:27.010
通常, 默认设置在这里就可以了, 所以如果您不知道要更改什么以及为什么要这样做,

03:27.010 --> 03:29.470
通常不需要在这里进行任何更改｡

03:29.470 --> 03:38.910
关于这些实验性的选项, 我将在稍后的装饰器模块中特别在experimentalDecorators中进行介绍｡

03:38.910 --> 03:41.810
这基本上使某些特性能够在TypeScript中使用,

03:41.810 --> 03:52.940
这些特性实际上是实验性的, 不确定它们是否会在未来的某个时候在JavaScript中使用, 也不确定您是否仍然希望使用它们｡

03:52.940 --> 03:57.070
然后, 您必须明确地告诉TypeScript您希望使用这些功能,

03:57.070 --> 03:59.390
并且可以使用该配置来完成此操作｡

03:59.390 --> 04:01.880
但是, 我会再次回到这一点｡ 

04:01.880 --> 04:05.870
因此, 现在我们浏览一下这个文件, 您可以在其中设置许多选项｡

04:05.870 --> 04:08.222
随着TypeScript的发展,

04:08.222 --> 04:10.612
您通常也会在此处添加越来越多的选项,

04:10.612 --> 04:20.343
因此官方文档始终是一个很好的地方, 可以更深入地了解并确保您不会错过可能对您的项目有帮助的有趣选项｡
