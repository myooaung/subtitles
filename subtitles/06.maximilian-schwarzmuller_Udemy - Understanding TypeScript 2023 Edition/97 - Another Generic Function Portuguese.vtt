WEBVTT

00:02.140 --> 00:03.620
-: Então vamos continuar praticando

00:03.620 --> 00:06.220
com estes tipos genéricos porque eu sei que eles podem ser estranhos

00:06.220 --> 00:08.305
para embrulhar sua cabeça; no final, no entanto,

00:08.305 --> 00:09.970
eles são realmente diretos.

00:09.970 --> 00:12.180
Vamos criar uma função genérica

00:12.180 --> 00:14.810
média, contar e imprimir.

00:14.810 --> 00:19.810
Agora esta função deve levar algum argumento, algum parâmetro.

00:20.330 --> 00:23.470
Vamos nomear o elemento, mas o nome é realmente de sua

00:23.470 --> 00:26.530
responsabilidade, que deve ser de tipo genérico.

00:26.530 --> 00:28.340
Porque eu realmente não me importo

00:28.340 --> 00:30.380
com o tipo, pelo menos de certa forma.

00:30.380 --> 00:33.400
Então digamos que temos um tipo genérico nesta função

00:33.400 --> 00:35.800
e nosso parâmetro é desse tipo.

00:35.800 --> 00:38.350
Isso é, aliás, tudo o típico para os tipos genéricos.

00:38.350 --> 00:40.030
Se você tem uma função genérica, então

00:40.030 --> 00:42.180
muitas vezes seu parâmetro será desse tipo.

00:42.180 --> 00:43.890
Não precisa ser, mas muitas vezes é assim

00:43.890 --> 00:45.890
que você trabalha com funções genéricas, como

00:45.890 --> 00:46.920
você verá, à medida que

00:46.920 --> 00:49.080
ganha mais e mais experiência com elas.

00:49.080 --> 00:50.670
Portanto, aqui temos a contagem

00:50.670 --> 00:52.350
e impressão com nosso tipo genérico,

00:52.350 --> 00:54.430
e o elemento é desse tipo.

00:54.430 --> 00:56.500
Agora o que eu quero voltar aqui

00:56.500 --> 01:00.300
é nienda tuple com dois elementos onde o primeiro elemento

01:00.300 --> 01:03.190
deve ser meu próprio elemento e o segundo

01:03.190 --> 01:07.070
elemento deve ser uma cadeia de descrição.

01:07.070 --> 01:10.160
Talvez a gente a nomeie e descreva, portanto.

01:10.160 --> 01:15.160
Portanto, aqui recebi meu texto descritivo, e aqui direi que

01:15.410 --> 01:19.890
não tem valor, e quero usar isso se passarmos em um elemento

01:19.890 --> 01:22.620
que não tem comprimento.

01:22.620 --> 01:25.570
Porque minha idéia com contagem e descrição é que podemos

01:25.570 --> 01:29.040
passar em um array ou string, e recebemos de volta a quantidade de

01:29.040 --> 01:32.040
caracteres ou elementos nesse array ou string.

01:32.040 --> 01:34.040
Portanto, se tivermos uma string

01:34.040 --> 01:37.440
vazia ou uma matriz vazia, eu quero usar sem valor, mas

01:37.440 --> 01:42.440
aqui se eu verificar que o comprimento do ponto do elemento é maior que zero,

01:43.210 --> 01:46.170
então eu quero definir o texto de descrição para

01:47.430 --> 01:52.430
obter mais o comprimento do ponto do elemento mais os elementos.

01:55.850 --> 01:58.100
Você poderia ser ainda mais específico

01:58.100 --> 02:03.100
e verificar se o comprimento é igual a um aqui, e então dizer que tem um

02:06.590 --> 02:11.590
elemento, senão se o comprimento do elemento é maior que um, temos texto

02:11.720 --> 02:13.750
de descrição igual tem mais

02:13.750 --> 02:18.750
elementos de comprimento do elemento para que tenhamos a forma plural

02:18.990 --> 02:21.173
correta.

02:22.850 --> 02:25.220
Agora aqui, o texto descritivo está lá para o segundo elemento

02:25.220 --> 02:27.040
e volta aqui. Agora você já vê tipos

02:27.040 --> 02:29.480
de reclamações sobre o comprimento aqui.

02:29.480 --> 02:32.350
Porque não está claro que esse elemento tenha um comprimento.

02:32.350 --> 02:34.770
Portanto, talvez devêssemos deixar claro que sim.

02:34.770 --> 02:38.430
Poderíamos fazê-lo criando uma nova interface ou um tipo personalizado

02:38.430 --> 02:41.060
com a palavra-chave do tipo aqui e aqui eu irei

02:41.060 --> 02:44.750
para uma interface que nomearei longa que no final é apenas a garantia

02:44.750 --> 02:47.440
de que temos um objeto com uma propriedade longa

02:47.440 --> 02:50.820
que deve render um número no final.

02:50.820 --> 02:52.870
E então aqui podemos estabelecer uma restrição

02:52.870 --> 02:54.740
e dizer que o T se estende por muito tempo.

02:54.740 --> 02:57.710
Portanto, sabemos que o que quer que consigamos, teremos uma propriedade

02:57.710 --> 03:01.053
de comprimento e uma matriz ou um cordel teria uma propriedade de comprimento.

03:02.030 --> 03:07.030
Agora aqui, posso consolar a contagem de registros e descrever

03:07.500 --> 03:11.240
e passar, digamos, oi lá dentro.

03:11.240 --> 03:14.280
Agora isto funciona porque uma corda tem uma propriedade de comprimento.

03:14.280 --> 03:15.290
Não é um objeto.

03:15.290 --> 03:17.310
É um fio, mas nos bastidores, o Javascript

03:17.310 --> 03:19.980
converte isto em um objeto na mosca e acrescenta uma propriedade

03:19.980 --> 03:21.720
de comprimento quando precisamos

03:21.720 --> 03:23.940
dele. Portanto, podemos chamá-lo

03:23.940 --> 03:26.960
assim com segurança. Digite primeiro o script

03:26.960 --> 03:31.370
em que aqui retornamos um array com uma string ou digite um elemento

03:31.370 --> 03:33.580
T ali dentro. Agora eu quero ter um tuple,

03:33.580 --> 03:36.060
então vou ser mais específico aqui e definir o tipo

03:36.060 --> 03:39.110
de retorno para ser basicamente um array com exatamente dois elementos

03:39.110 --> 03:41.330
onde o primeiro elemento será do tipo T e o segundo

03:41.330 --> 03:43.850
elemento será do tipo string.

03:43.850 --> 03:46.270
Portanto, agora estou apenas dizendo que devolvemos

03:46.270 --> 03:49.360
aqui um tuple onde o primeiro elemento será, bem, qualquer

03:49.360 --> 03:52.010
elemento do nosso tipo genérico, e o segundo elemento

03:52.010 --> 03:54.110
será um cordel.

03:54.110 --> 03:56.820
Agora, com isso, se salvarmos isto, é recompilado

03:56.820 --> 04:00.330
sem erros e impressões oi lá, temos nove elementos porque temos

04:00.330 --> 04:02.330
nove caracteres lá dentro.

04:04.320 --> 04:06.890
Também poderíamos chamar isto com uma matriz

04:06.890 --> 04:09.530
onde temos esportes e culinária, e agora

04:09.530 --> 04:12.460
você verá que temos dois elementos como um texto

04:12.460 --> 04:15.990
de descrição, ou com uma matriz vazia, nesse caso, se eu

04:15.990 --> 04:18.660
salvar que não temos valor, mas não poderemos

04:18.660 --> 04:22.500
chamar isto, por exemplo, com um número porque um número não

04:22.500 --> 04:24.103
tem uma propriedade de comprimento

04:24.103 --> 04:28.090
e, portanto, isto não funciona.

04:28.090 --> 04:32.900
Portanto, aqui novamente, temos nossa função genérica.

04:32.900 --> 04:35.043
A idéia é semelhante à função anterior.

04:35.043 --> 04:38.680
Queremos ser um pouco pouco pouco pouco específicos sobre o tipo de dados que

04:38.680 --> 04:40.540
recebemos aqui. Não nos interessa se é

04:40.540 --> 04:43.180
um fio, se é uma matriz, ou qualquer outra coisa que seja uma propriedade

04:43.180 --> 04:45.610
de comprimento. Nós apenas nos preocupamos com

04:45.610 --> 04:47.930
o fato de que ele tem uma propriedade de comprimento e depois

04:47.930 --> 04:49.980
queremos fazer algo com ele porque confiamos na

04:49.980 --> 04:51.970
propriedade de comprimento em nosso código, por

04:51.970 --> 04:53.540
isso precisamos garantir que conseguimos

04:53.540 --> 04:55.370
isso, mas, além disso, realmente não temos

04:55.370 --> 04:57.330
interesse em que tipo de dados estamos obtendo

04:57.330 --> 04:59.490
aqui. Não quero prender isto

04:59.490 --> 05:01.820
a um fio ou a uma matriz, e não quero criar um monte

05:01.820 --> 05:04.220
de sobrecargas para lidar com todos os diferentes

05:04.220 --> 05:05.830
tipos possíveis.

05:05.830 --> 05:08.124
Eu também não quero criar aqui um tipo de união

05:08.124 --> 05:10.970
muito longa porque posso esquecer tipos que têm uma

05:10.970 --> 05:13.610
propriedade de comprimento, ou se eu criar meu

05:13.610 --> 05:16.220
próprio objeto com uma propriedade de comprimento,

05:16.220 --> 05:18.640
posso não permitir que ele seja do tipo, corda

05:18.640 --> 05:21.580
e matriz ou qualquer coisa do tipo.

05:21.580 --> 05:23.500
Portanto, quero ser mais flexível e

05:23.500 --> 05:25.380
com tipos genéricos podemos ser que,

05:25.380 --> 05:27.550
não nos importamos com o tipo exato.

05:27.550 --> 05:30.080
Aqui, graças à restrição, eu só me preocupo

05:30.080 --> 05:33.363
com o fato de ter uma propriedade longa.
