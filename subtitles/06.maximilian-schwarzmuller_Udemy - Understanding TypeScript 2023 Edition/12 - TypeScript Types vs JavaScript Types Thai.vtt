WEBVTT

00:00.000 --> 00:02.410
(เงียบ) -: ดังนั้นเราจึงเห็นแล้วว่า

00:02.410 --> 00:06.200
TypeScript สามารถช่วยเราได้อย่างไรในระหว่างการพัฒนา

00:06.200 --> 00:10.560
ตอนนี้ เรารู้แล้วว่ามีประเภทตัวเลขใน JavaScript

00:10.560 --> 00:14.010
และเราสามารถเห็นได้ด้วยตัวดำเนินการในตัว

00:14.010 --> 00:15.781
นี่ไม่ใช่ TypeScript เฉพาะ

00:15.781 --> 00:17.560
นี่คือโอเปอเรเตอร์ในตัวและคำหลักที่สนับสนุนโดย

00:17.560 --> 00:20.420
JavaScript

00:20.420 --> 00:22.910
เราสามารถใช้เพื่อรับประเภทของค่าหนึ่งๆ

00:22.910 --> 00:27.050
ตรงนี้ เราสามารถล็อกคอนโซลประเภทหมายเลขหนึ่งได้

00:27.050 --> 00:27.992
และสิ่งที่เราจะเห็นถ้าเราทำเช่นนั้นก็คือ

00:27.992 --> 00:32.623
ทันทีที่เราคอมไพล์สิ่งนี้ เพื่อให้เราเรียกใช้โค้ดที่อัปเดต

00:33.780 --> 00:37.040
ที่นี่ เราพิมพ์หมายเลขไปที่คอนโซล

00:37.040 --> 00:41.180
ตอนนี้เราทำได้แล้ว ขอบคุณเอาต์พุตนี้ และขอบคุณประเภทของโอเปอเรเตอร์และในวานิลลา

00:41.180 --> 00:46.710
JavaScript หากไม่มี TypeScript เราสามารถใช้สิ่งนั้นเพื่อปรับปรุงฟังก์ชันของเราที่นี่ได้เสมอ

00:46.710 --> 00:51.500
เราสามารถตรวจสอบว่าชนิดของจำนวนเท่ากับจำนวน

00:51.500 --> 00:54.300
ขอโทษนะ ประเภทของ n1 ฉันหมายถึง ถ้านั่นเท่ากับจำนวน

00:54.300 --> 00:56.350
และเราตรวจสอบได้ด้วยว่า

00:56.350 --> 01:00.710
ประเภทของ n2 เท่ากับจำนวนหรือไม่

01:00.710 --> 01:05.220
และทำการดำเนินการของเราที่นี่เฉพาะในกรณีที่เป็นข้อผิดพลาดที่เกิดขึ้นเป็นอย่างอื่น

01:05.220 --> 01:07.860
หรือทำตรงกันข้ามและตรวจสอบว่าไม่เท่ากันหรือไม่

01:07.860 --> 01:10.820
หรือหาก n2 ไม่เท่ากัน

01:10.820 --> 01:13.230
และถ้าหนึ่งในสองไม่ใช่ตัวเลข

01:13.230 --> 01:16.360
เราอาจโยนข้อผิดพลาดใหม่โดยที่เราพูดว่า

01:16.360 --> 01:19.690
อินพุตไม่ถูกต้อง นี่จะเป็นวิธีที่ไม่ใช่

01:19.690 --> 01:25.700
TypeScript เพื่อให้มั่นใจว่าเราไม่สามารถเรียกใช้ฟังก์ชันนี้ด้วยสตริงได้ที่นี่

01:25.700 --> 01:26.760
ถ้าฉันทำตอนนี้และคอมไพล์ใหม่

01:26.760 --> 01:30.830
เราได้รับข้อผิดพลาด TypeScript แต่ตอนนี้ขอข้ามไปก่อน

01:30.830 --> 01:33.100
หากเรารันซ้ำ เราได้รับอินพุตที่ไม่ถูกต้อง

01:33.100 --> 01:34.940
ซึ่งเรากำลังโยนทิ้งเอง

01:34.940 --> 01:38.080
ดังนั้นตอนนี้เราจึงแก้ไขความผิดปกติใน JavaScript

01:38.080 --> 01:44.950
ซึ่งล้มเหลวในขณะรันไทม์ แต่การล้มเหลวที่นี่อาจดีกว่าการแสดงผลลัพธ์ที่ไม่ถูกต้องที่เราเคยมีมาก่อน

01:44.950 --> 01:47.640
นี่จะเป็นวิธีการตรวจสอบอินพุตใน JavaScript

01:47.640 --> 01:48.715
เท่านั้น

01:48.715 --> 01:50.640
คุณไม่จำเป็นต้องใช้ TypeScript สำหรับสิ่งนั้น

01:50.640 --> 01:53.200
นั่นคือรหัส JavaScript ปกติ

01:53.200 --> 01:55.160
แต่แน่นอนว่าแนวทางนี้มีข้อเสีย

01:55.160 --> 01:57.160
บางครั้งก็เป็นสิ่งที่ถูกต้องที่จะทำ

01:57.160 --> 02:01.440
บางครั้งคุณสามารถตรวจสอบอินพุตบางอย่างได้ในขณะรันไทม์เท่านั้น

02:01.440 --> 02:05.480
แต่ข้อเสียอยู่ที่นี่ เรากำลังตรวจสอบบางอย่างที่เราสามารถหลีกเลี่ยงได้ในระหว่างการพัฒนาด้วย

02:05.480 --> 02:08.950
TypeScript

02:08.950 --> 02:11.180
ใช่ เรากำลังส่งข้อผิดพลาด

02:11.180 --> 02:19.080
และในแอปพลิเคชันของเรา เราอาจสร้างมาตรการที่สามารถย้อนกลับไปใช้พฤติกรรมอื่นเพื่อบันทึกแอปพลิเคชันที่กำลังทำงานอยู่ได้

02:19.080 --> 02:20.750
แต่ถึงกระนั้น เรากำลังโยนข้อผิดพลาด

02:20.750 --> 02:24.180
ซึ่งจริงๆ แล้วไม่จำเป็นต้องเกิดขึ้นตั้งแต่แรก

02:24.180 --> 02:27.350
เราสามารถป้องกันได้ด้วย TypeScript

02:27.350 --> 02:28.830
และที่นี่ เราเห็นความแตกต่างระหว่าง

02:28.830 --> 02:31.450
JavaScript และ TypeScript เมื่อพูดถึงประเภท

02:31.450 --> 02:33.750
JavaScript มีการพิมพ์แบบไดนามิก

02:33.750 --> 02:39.100
ซึ่งหมายความว่าเป็นเรื่องปกติที่เรามีตัวแปรซึ่งในตอนแรกอาจเก็บตัวเลขไว้

02:39.100 --> 02:41.600
ซึ่งเราจะกำหนดสตริงให้ในภายหลัง

02:41.600 --> 02:44.500
และนั่นคือเหตุผลที่เราต้องปิดตัวดำเนินการ

02:44.500 --> 02:48.024
เพื่อให้เราสามารถตรวจสอบประเภทปัจจุบันของบางสิ่งที่รันไทม์

02:48.024 --> 02:52.267
หากเรามีรหัสบางอย่างที่ขึ้นอยู่กับประเภทนั้น

02:52.267 --> 02:53.570
ในทางกลับกัน TypeScript

02:53.570 --> 02:55.094
เป็นการพิมพ์แบบสแตติก

02:55.094 --> 02:58.480
ซึ่งหมายความว่าเรากำหนดประเภทของตัวแปรและพารามิเตอร์ที่สิ้นสุดในระหว่างการพัฒนา

02:58.480 --> 03:04.980
พวกมันจะไม่เปลี่ยนแปลงกะทันหันระหว่างรันไทม์

03:04.980 --> 03:05.813
แน่นอนว่าตอนนี้เนื่องจาก

03:05.813 --> 03:10.660
TypeScript ถูกคอมไพล์เป็น JavaScript พวกเขาจึงสามารถทำได้ในทางทฤษฎี

03:10.660 --> 03:13.790
แต่ถ้าเราใช้ TypeScript และเราเขียนโค้ดโดยที่เรากำหนดข้อมูลชนิดใหม่ให้กับตัวแปรอย่างกะทันหัน

03:13.790 --> 03:19.840
โดยที่ก่อนหน้านี้เราบอกว่าสิ่งนี้ควรเป็นตัวเลข เป็นต้น และตอนนี้เรากำลังกำหนดสตริง เราก็จะได้

03:19.840 --> 03:32.120
เกิดข้อผิดพลาดระหว่างการพัฒนา ดังนั้นเราจำเป็นต้องระบุให้ชัดเจนเกี่ยวกับประเภท บางอย่างสามารถหรือไม่สามารถถือได้

03:32.120 --> 03:33.710
นั่นคือความแตกต่างที่นี่

03:33.710 --> 03:36.620
ดังนั้นเราจึงไม่ต้องการใช้การนำไปใช้งานหรือโซลูชันเช่นนั้น

03:36.620 --> 03:38.330
หากเราสามารถหลีกเลี่ยงได้ด้วย

03:38.330 --> 03:40.810
TypeScript

03:40.810 --> 03:42.200
ถึงกระนั้น สิ่งสำคัญคือต้องรู้ว่า

03:42.200 --> 03:46.400
JavaScript แน่นอน รู้เกี่ยวกับแนวคิดของประเภท

03:46.400 --> 03:48.740
มันรู้เกี่ยวกับบางประเภท เช่น

03:48.740 --> 03:50.640
ตัวเลข สตริง และบูลีน

03:50.640 --> 03:53.540
แต่การใช้นั่นหมายความว่าเราจะล้มเหลวได้เฉพาะในขณะรันไทม์แทนที่จะเป็นระหว่างการพัฒนา

03:53.540 --> 03:58.700
ซึ่งเป็นที่ที่ดีกว่าสำหรับเราในฐานะนักพัฒนา

03:58.700 --> 04:01.550
ช่วยให้เราสามารถแก้ไขข้อบกพร่องได้เร็วกว่านี้

04:01.550 --> 04:02.840
และยิ่งไปกว่านั้น JavaScript

04:02.840 --> 04:05.410
รู้แค่สองสามประเภทเท่านั้น

04:05.410 --> 04:07.170
ที่คุณจะได้เรียนรู้ตลอดหลักสูตรนี้

04:07.170 --> 04:10.540
TypeScript รู้เกี่ยวกับประเภทมากกว่า JavaScript

04:10.540 --> 04:14.450
การตรวจสอบรันไทม์จึงไม่ยืดหยุ่นหรือไม่มีประสิทธิภาพเท่ากับสิ่งที่เราทำได้ด้วย

04:14.450 --> 04:18.030
TypeScript

04:18.030 --> 04:22.550
และด้วยเหตุผลเหล่านี้ แนวทางนี้จึงไม่ใช่แนวทางที่เราต้องการใช้ที่นี่

04:22.550 --> 04:26.540
บางครั้งการรับประเภทในขณะรันไทม์อาจมีประโยชน์

04:26.540 --> 04:31.740
แต่บางครั้งเช่นในตัวอย่างนี้ เป็นวิธีที่ดีกว่าที่จะได้รับในระหว่างการพัฒนา

04:31.740 --> 04:34.280
สิ่งสำคัญเพียงอย่างเดียวที่ต้องจำไว้ก็คือ

04:34.280 --> 04:36.070
TypeScript คุณจะได้รับการสนับสนุนระหว่างการพัฒนาเท่านั้น

04:36.070 --> 04:39.596
ไม่ใช่ในขณะรันไทม์ เนื่องจากคุณสมบัติและการตรวจสอบ TypeScript

04:39.596 --> 04:41.610
เหล่านี้ไม่ได้สร้างไว้ในเอ็นจิ้น JavaScript

04:41.610 --> 04:44.650
ดังนั้นตรรกะจึงไม่สามารถดำเนินการในเบราว์เซอร์ได้

04:44.650 --> 04:51.223
มันสามารถดำเนินการได้เฉพาะในระหว่างการพัฒนาเมื่อคุณคอมไพล์โค้ดของคุณ
