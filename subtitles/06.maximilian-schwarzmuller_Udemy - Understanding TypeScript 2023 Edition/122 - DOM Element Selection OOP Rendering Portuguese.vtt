WEBVTT

00:02.300 --> 00:03.420
Tutor: Para começar, aqui

00:03.420 --> 00:07.060
vou rodar npm para começar a trazer à tona o servidor de desenvolvimento.

00:07.060 --> 00:09.384
Que serve o arquivo HTML e a aba menu,

00:09.384 --> 00:13.434
tsc-w para iniciar tipos de compilação no modo relógio para que

00:13.434 --> 00:17.988
nosso arquivo JavaScript de aplicação seja continuamente reconstruído

00:17.988 --> 00:21.740
e possamos visualizá-lo na aplicação em execução.

00:21.740 --> 00:24.480
Neste momento, é claro que nossa aplicação não parece muito chique.

00:24.480 --> 00:26.340
É uma página vazia.

00:26.340 --> 00:27.850
Portanto, para começar,

00:27.850 --> 00:30.250
há muitas maneiras de se fazer isso.

00:30.250 --> 00:35.040
Agora, quero começar por tornar este formulário visível.

00:35.040 --> 00:36.660
E agora, há muitas maneiras de

00:36.660 --> 00:38.790
escrever esta aplicação em uma abordagem

00:38.790 --> 00:40.208
orientada a objetos.

00:40.208 --> 00:43.303
O que é 100% opcional, mas como aprendemos sobre

00:43.303 --> 00:46.080
as aulas e assim por diante, eu quero realmente

00:46.080 --> 00:48.083
mostrar como isto funciona e,

00:48.083 --> 00:51.140
portanto, vou usar esta abordagem.

00:51.140 --> 00:51.973
Portanto, na chave

00:51.973 --> 00:55.510
do aplicativo, eu acrescentarei uma nova classe e lhe darei o nome de Project

00:55.510 --> 00:59.120
Input, embora o nome da classe, é claro, dependa inteiramente de você.

00:59.120 --> 01:00.570
Agora, nesta classe,

01:00.570 --> 01:04.590
nosso objetivo tem que ser, obter acesso a este modelo e à forma

01:04.590 --> 01:08.220
nele contida e ter acesso a este mergulho aqui, e então,

01:08.220 --> 01:11.710
no final, render nosso modelo nesse mergulho.

01:11.710 --> 01:15.160
Assim, o conteúdo do modelo, a forma em que o div.

01:15.160 --> 01:17.130
Esse tem que ser nosso objetivo.

01:17.130 --> 01:18.850
Agora, para conseguir isso,

01:18.850 --> 01:20.588
aqui no Project Input, vou

01:20.588 --> 01:23.450
adicionar um construtor onde, no final, quero

01:23.450 --> 01:25.920
ter acesso ao meu modelo e ao local onde

01:25.920 --> 01:27.970
ele deve ser entregue.

01:28.830 --> 01:33.310
E para isto aqui, vou adicionar duas propriedades com isto,

01:33.310 --> 01:37.460
a propriedade do elemento modelo e depois também a propriedade

01:37.460 --> 01:40.180
do elemento hospedeiro.

01:40.180 --> 01:42.420
Os nomes são 100% de sua responsabilidade.

01:42.420 --> 01:44.990
No final, minha idéia é que o elemento hospedeiro,

01:44.990 --> 01:46.970
contém uma referência ao elemento onde

01:46.970 --> 01:49.650
eu quero renderizar meu conteúdo template no final

01:49.650 --> 01:51.427
e bem, o elemento template me dá acesso

01:51.427 --> 01:54.050
ao template que contém este conteúdo.

01:54.050 --> 01:56.120
Agora, para ter acesso a esse modelo,

01:56.120 --> 01:59.690
vamos dar uma olhada no índice html e ver como podemos identificar

01:59.690 --> 02:01.870
o modelo que contém o formulário.

02:01.870 --> 02:04.050
Bem, ele tem este ID de entrada de projeto,

02:04.050 --> 02:06.120
o que parece uma boa estratégia.

02:06.120 --> 02:08.510
Portanto, aqui podemos usar o documento

02:08.510 --> 02:11.022
getElementById projet-input.

02:11.022 --> 02:15.410
Isto nos dá acesso a este elemento modelo.

02:15.410 --> 02:17.820
Agora, um par de coisas importantes.

02:17.820 --> 02:21.320
Aqui obtemos um erro de que o elemento modelo é uma propriedade

02:21.320 --> 02:23.900
que não existe na entrada do projeto.

02:23.900 --> 02:28.140
Agora, para nos livrarmos disto, deveríamos acrescentar isto

02:28.140 --> 02:31.610
como um novo campo aqui diretamente na classe.

02:31.610 --> 02:34.050
Então, podemos atribuir a ele com segurança.

02:34.050 --> 02:36.040
Agora aqui, também quero ser claro sobre o tipo

02:36.040 --> 02:37.450
que seria armazenado lá dentro.

02:37.450 --> 02:41.070
E isso será um elemento de modelo HTML.

02:41.070 --> 02:43.270
Este tipo está disponível globalmente

02:43.270 --> 02:47.380
porque no arquivo tsconfig js, eu adicionei o DOM como uma lib e que

02:47.380 --> 02:50.360
adiciona todos estes tipos de DOM, todos estes

02:50.360 --> 02:53.777
tipos de elementos HTML como tipos de typescript ao projeto

02:53.777 --> 02:55.493
inteiro.

02:57.280 --> 03:00.400
Agora isto infunde um novo erro aqui, no entanto, você

03:00.400 --> 03:03.110
vê que no final isto pode ser nulo quando obtemos

03:03.110 --> 03:04.760
o elemento por ID, é claro que

03:04.760 --> 03:08.510
sabemos que não falhará, mas o datilografia não tem chance de

03:08.510 --> 03:09.850
saber isto porque não

03:09.850 --> 03:12.757
vai analisar nosso arquivo html.

03:12.757 --> 03:16.210
Portanto, talvez não exista nenhum elemento com esta identificação

03:16.210 --> 03:18.210
e, portanto, isto resultaria nulo.

03:18.210 --> 03:20.680
Agora aqui, dizemos que não armazenamos nulos

03:20.680 --> 03:23.920
ali, apenas armazenamos o elemento HTML template.

03:23.920 --> 03:25.800
Portanto, para eliminar este perigo,

03:25.800 --> 03:29.470
temos que dizer à máquina de escrever, que isto nunca será nulo.

03:29.470 --> 03:31.290
E você sabe como você pode fazer isso?

03:31.290 --> 03:33.580
Você pode acrescentar um ponto de exclamação aqui.

03:33.580 --> 03:35.020
Uma alternativa, claro,

03:35.020 --> 03:36.170
apenas para mostrar

03:36.170 --> 03:37.820
isto, se você não tiver

03:37.820 --> 03:41.640
certeza, é armazená-lo como digamos em uma constante

03:41.640 --> 03:48.600
e depois verificar se o elemento modelo é verdadeiro, então se não é nulo e depois armazená-lo dentro

03:48.600 --> 03:51.490
dele se verificar aqui.

03:51.490 --> 03:52.720
Agora, ainda estamos recebendo

03:52.720 --> 03:54.190
um erro, mas esse será um erro diferente,

03:54.190 --> 03:55.840
ao qual voltarei mais tarde.

03:55.840 --> 03:58.060
Por enquanto, isto serviria para o truque

03:58.060 --> 03:59.650
se não tivéssemos certeza.

03:59.650 --> 04:01.930
Agora aqui, no entanto, tenho certeza.

04:01.930 --> 04:02.763
E, a propósito, se você

04:02.763 --> 04:03.596
não tiver certeza,

04:03.596 --> 04:06.000
você deve fornecer um recuo no outro caso, é claro.

04:06.000 --> 04:08.530
Mas aqui estou certo de que obteremos tal elemento e, portanto,

04:08.530 --> 04:10.544
podemos simplesmente acrescentar um ponto de

04:10.544 --> 04:11.803
exclamação depois disso para

04:11.803 --> 04:13.710
dizer datilografia: "Tudo de bom".

04:13.710 --> 04:17.300
Teremos acesso a um elemento com essa identificação. Mas, como já mencionei, ainda temos outro

04:17.300 --> 04:18.133
erro.

04:18.133 --> 04:20.220
Falta o conteúdo da propriedade no tipo elemento HTML.

04:20.220 --> 04:24.270
O problema aqui é que estamos dizendo à máquina de escrever

04:24.270 --> 04:27.140
que vamos armazenar um elemento modelo

04:27.140 --> 04:29.550
que é do tipo html.

04:29.550 --> 04:32.160
E, de fato, será esse o caso.

04:32.160 --> 04:34.800
Agora, é claro, getElementById não

04:34.800 --> 04:38.730
sabe qual elemento irá retornar eventualmente.

04:38.730 --> 04:41.130
Ele apenas sabe que seria um elemento

04:41.130 --> 04:43.920
html, mas não qual versão especializada.

04:43.920 --> 04:46.600
Se for um div, um parágrafo, um botão ou, neste

04:46.600 --> 04:48.720
caso, um elemento modelo.

04:48.720 --> 04:51.387
getElementById não tem nenhuma chance de saber isso.

04:51.387 --> 04:54.590
Assim, a fim de dizer datilografia sobre o tipo que, naturalmente,

04:54.590 --> 04:57.460
também conhecemos com certeza.

04:57.460 --> 05:00.660
Podemos utilizar fundição de tipo.

05:00.660 --> 05:02.260
Você também tomou conhecimento disso.

05:02.260 --> 05:03.730
Há duas sintaxes que você pode usar.

05:03.730 --> 05:05.950
Os colchetes de ângulo no início e,

05:05.950 --> 05:07.690
em seguida, o tipo a que você

05:07.690 --> 05:10.130
quer lançar isto com que você está dizendo

05:10.130 --> 05:11.847
ao typeScript: "Ei!

05:11.847 --> 05:12.700
A coisa, a expressão

05:12.700 --> 05:15.840
que vem depois disto aqui, isto será deste tipo. ou, alternativamente, você adiciona como elemento de modelo HTML,

05:15.840 --> 05:17.650
que é a abordagem que eu utilizaria.

05:17.650 --> 05:21.200
E com isso, você garante que o que você

05:21.200 --> 05:23.040
buscar aqui não será

05:23.040 --> 05:25.700
nulo e será deste tipo.

05:25.700 --> 05:27.950
Muito se fala em selecionar isto, mas é uma tarefa

05:30.027 --> 05:30.860
comum e é importante

05:30.860 --> 05:32.016
fazer isto direito.

05:32.016 --> 05:33.630
Agora vamos continuar com o elemento hospedeiro.

05:33.630 --> 05:35.563
Aqui, devemos também acrescentar

05:36.890 --> 05:39.360
o elemento hospedeiro como um campo e sabemos

05:39.360 --> 05:43.350
que o elemento hospedeiro, quando realmente quisermos render nosso projeto-entrada

05:43.350 --> 05:45.960
será, no final, este div aqui.

05:45.960 --> 05:48.560
É aí que eu quero renderizar minha forma.

05:48.560 --> 05:51.410
Portanto, aqui podemos dizer elemento HTML div.

05:51.410 --> 05:54.000
Esse é o tipo de elemento a que vamos acrescentar isto.

05:54.000 --> 05:57.730
Poderíamos também ser um pouco menos específicos e dizer apenas

05:57.730 --> 06:00.260
elemento HTML, porque aqui eu realmente

06:00.260 --> 06:02.740
não me importo se é um div ou não.

06:02.740 --> 06:04.970
Mas como o conhecemos com

06:04.970 --> 06:08.400
certeza, por que não adicioná-lo?

06:08.400 --> 06:10.250
Agora, quero ter acesso a esse div, é

06:10.250 --> 06:11.263
claro, onde isso deve

06:12.110 --> 06:14.850
ser adicionado e se tivermos uma olhada no índice. html, vemos que podemos identificar este mergulho novamente

06:14.850 --> 06:16.530
pela identificação.

06:16.530 --> 06:18.970
A identificação do aplicativo neste caso.

06:18.970 --> 06:19.945
Então agora, de volta

06:19.945 --> 06:24.640
ao app ts, podemos usar o documento getElementById mais uma vez e chegar ao elemento com o app id.

06:24.640 --> 06:28.780
Agora, temos os mesmos problemas de antes, isto pode ser

06:28.780 --> 06:32.920
nulo, então temos que acrescentar o ponto de exclamação

06:32.920 --> 06:35.112
porque, novamente, sabemos com

06:35.112 --> 06:39.620
certeza que não será, e getElementById não sabe que este será

06:39.620 --> 06:42.283
um elemento HTML div, então, devemos

06:43.430 --> 06:46.030
lançar isto aqui também.

06:46.030 --> 06:48.150
E com isso podemos agora encontrar como

06:48.150 --> 06:51.210
temos acesso a todos os elementos que precisamos.

06:51.210 --> 06:53.990
Bem, isso foi muito falar sobre isso.

06:53.990 --> 06:56.070
Com isso, infelizmente, não conseguimos muito.

06:56.070 --> 06:59.140
Temos acesso a esses elementos, mas não

06:59.140 --> 07:01.970
estamos renderizando nada lá.

07:01.970 --> 07:03.940
Portanto, vamos continuar com isso.

07:03.940 --> 07:05.790
Para isso, precisamos importar o conteúdo

07:05.790 --> 07:08.020
deste elemento do modelo, então basicamente importar

07:08.020 --> 07:10.620
o que está dentro das etiquetas do modelo e entregar isto

07:10.620 --> 07:11.760
para o DOM.

07:11.760 --> 07:15.520
Podemos fazer isso aqui mesmo no construtor porque minha idéia

07:15.520 --> 07:17.603
e, é claro, isso é apenas minha idéia,

07:18.510 --> 07:20.270
você poderia montar isso de maneira

07:20.270 --> 07:21.870
diferente.

07:21.870 --> 07:22.940
Mas minha idéia é que quando

07:22.940 --> 07:24.550
criamos uma nova instância desta classe,

07:24.550 --> 07:26.430
quero imediatamente renderizar uma forma

07:26.430 --> 07:28.250
que pertença a esta instância.

07:28.250 --> 07:30.190
Portanto, faremos isso bem no construtor.

07:30.190 --> 07:31.770
Lá podemos obter nosso nó

07:31.770 --> 07:34.420
importado ou conteúdo HTML importado ou

07:34.420 --> 07:37.430
como você quiser nomeá-lo, que podemos obter

07:37.430 --> 07:40.627
com o importNode de documento e que é um método fornecido

07:40.627 --> 07:44.917
no objeto de documento global e para importarNode você passa um

07:45.860 --> 07:49.260
ponteiro no seu elemento template.

07:49.260 --> 07:52.650
Portanto, este elemento modelo no final, ou, para ser preciso, não o elemento,

07:52.650 --> 07:54.410
mas o conteúdo do ponto lá.

07:54.410 --> 07:57.010
O conteúdo é uma propriedade que

07:57.010 --> 08:00.891
existe nos elementos do modelo HTML e simplesmente

08:00.891 --> 08:05.320
dá uma referência ao conteúdo de um modelo.

08:05.320 --> 08:07.480
Portanto, para o código HTML entre o texto modelo.

08:07.480 --> 08:09.520
A ImportNode também aceita um

08:09.520 --> 08:13.306
segundo argumento que define se ela deve importar isto

08:13.306 --> 08:15.670
com um clone profundo ou não.

08:15.670 --> 08:17.940
Portanto, todos os níveis de aninhamento dentro do modelo e eu definitivamente

08:17.940 --> 08:19.630
quero fazer isso, então eu vou fornecer verdade aqui.

08:19.630 --> 08:22.570
Agora, temos o nó importado e, como você verá,

08:22.570 --> 08:26.340
este é um fragmento de documento do tipo que foi assumido

08:26.340 --> 08:28.830
ou inferido automaticamente.

08:28.830 --> 08:30.770
Agora podemos usar esse nó importado,

08:30.770 --> 08:34.910
e é claro que eu quero usá-lo para renderizar algum conteúdo.

08:34.910 --> 08:36.960
Para isso acrescentarei um novo

08:36.960 --> 08:40.970
método, um método privado que nomearei em anexo.

08:40.970 --> 08:42.810
Você não precisa fazer isso, eu só quero

08:42.810 --> 08:45.150
dividir minha lógica de seleção e renderização.

08:45.150 --> 08:46.390
Dentro do attach,

08:46.390 --> 08:51.270
eu irei alcançar o elemento hospedeiro, portanto o lugar onde eu quero

08:51.270 --> 08:52.820
renderizar meu conteúdo

08:52.820 --> 08:54.930
e chamar o insertAdjacentElement

08:54.930 --> 08:57.840
que é um método padrão fornecido pelo navegador

08:57.840 --> 09:00.770
no final em JavaScript.

09:00.770 --> 09:02.980
Para inserir o elemento HTML um elemento

09:02.980 --> 09:04.340
adjacente, primeiramente

09:04.340 --> 09:08.778
é necessário uma descrição de onde inseri-lo, para que lá você possa inseri-lo

09:08.778 --> 09:13.180
após o início do elemento que você está alvejando, logo após a tag de abertura

09:13.180 --> 09:17.850
do elemento hospedeiro, antes do início ou antes da tag de abertura, antes da

09:17.850 --> 09:20.870
tag de fim ou após a tag de fim.

09:20.870 --> 09:23.570
E aqui vou eu depois de começar a inseri-lo

09:23.570 --> 09:27.020
logo no início da etiqueta de abertura.

09:27.020 --> 09:30.580
E então o que eu quero inserir é meu nó importado,

09:30.580 --> 09:33.053
porém, primeiro de tudo isso é

09:34.900 --> 09:39.140
uma constante disponível apenas no construtor e segundo,

09:39.140 --> 09:42.970
é um fragmento de documento.

09:42.970 --> 09:44.630
Não podíamos inseri-lo assim.

09:44.630 --> 09:46.896
Em vez disso, precisamos ter acesso ao elemento HTML concreto

09:46.896 --> 09:48.240
ali dentro, que podemos armazenar

09:48.240 --> 09:49.800
em outro elemento de propriedade.

09:49.800 --> 09:52.770
Que também temos que adicionar como um campo lá

09:52.770 --> 09:55.560
em cima que pode ser do tipo elemento HTML ou,

09:55.560 --> 09:58.270
no nosso caso, na verdade, sabemos que estará

09:58.270 --> 10:02.500
dentro do template aqui, portanto, será um formulário.

10:02.500 --> 10:05.790
Esse é o primeiro elemento do modelo.

10:05.790 --> 10:07.010
Portanto, aqui podemos

10:07.010 --> 10:09.470
dizer que será um elemento de formulário HTML,

10:09.470 --> 10:10.960
e então aqui, este elemento

10:10.960 --> 10:15.200
é igual importNode primeiroElementChild, agora só temos que dizer datilografia

10:15.200 --> 10:20.106
novamente, que este será um elemento de formulário HTML.

10:20.106 --> 10:22.199
Agora este elemento é agora a propriedade

10:22.199 --> 10:25.510
concreta que aponta para o nó que queremos inserir.

10:25.510 --> 10:28.360
Portanto, lá embaixo, no insertAdjacentElement,

10:28.360 --> 10:31.110
inserimos este elemento aqui.

10:31.110 --> 10:33.690
Agora só precisamos ter certeza de que aqui

10:33.690 --> 10:36.350
no construtor, no final dele que chamamos

10:36.350 --> 10:38.460
de anexo, este método de anexo privado,

10:38.460 --> 10:39.950
para que este código também

10:39.950 --> 10:42.260
seja executado.

10:42.260 --> 10:44.290
E agora, com toda a formatação,

10:44.290 --> 10:46.620
é assim que meu código se parece.

10:46.620 --> 10:48.200
Assim, agora é a classe de

10:48.200 --> 10:51.460
entrada do projeto, e teoricamente, quando o instanciamos,

10:51.460 --> 10:53.950
ele deve render a forma.

10:53.950 --> 10:56.920
Agora vamos tentar.

10:56.920 --> 10:59.440
Abaixo da classe, vamos simplesmente criar uma nova constante,

10:59.440 --> 11:01.120
prjInput por exemplo, o nome é com você.

11:01.120 --> 11:05.415
E chamar novo projeto de "Input" como este.

11:05.415 --> 11:08.930
E se agora salvarmos isso, ele deve recompilar

11:08.930 --> 11:11.783
e recarregar e se você voltar para o navegador,

11:11.783 --> 11:14.160
de fato você deve ver esse formulário

11:14.160 --> 11:16.050
aqui.

11:16.050 --> 11:17.990
Isso é muito legal, porque com isso,

11:17.990 --> 11:20.660
demos o primeiro passo muito importante.

11:20.660 --> 11:22.450
Temos a nossa forma

11:22.450 --> 11:26.930
rendida e mesmo que falte muito, isso é melhor

11:26.930 --> 11:29.150
do que nada.

11:29.150 --> 11:31.630
Este formulário, vem do arquivo html índice e

11:31.630 --> 11:33.010
é renderizado com a ajuda

11:33.010 --> 11:36.430
de nosso código de digitação orientado ao objeto lá em cima.
