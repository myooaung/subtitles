WEBVTT

00:02.110 --> 00:03.890
Instructor: Así que ahora, después de

00:03.890 --> 00:07.820
todas estas características en las que hemos trabajado con los tipos en sí, por así decirlo,

00:07.820 --> 00:10.340
en las que hemos trabajado en la comprobación de tipos,

00:10.340 --> 00:13.880
en el cálculo de costes de los tipos, volvamos a las características que nos

00:13.880 --> 00:16.110
ayudan a montar código flexible.

00:16.110 --> 00:17.930
Por supuesto, sigue escribiendo los dos tipos.

00:17.930 --> 00:20.150
Al fin y al cabo es typescript, pero no se

00:20.150 --> 00:23.520
centra tanto en los tipos, ahora podemos gestionarlos.

00:23.520 --> 00:25.830
Y para ello, quiero empezar con los tipos

00:25.830 --> 00:29.040
de índice, una característica que nos permite crear objetos

00:29.040 --> 00:31.150
más flexibles en cuanto a las propiedades

00:31.150 --> 00:33.010
que pueden contener.

00:33.010 --> 00:34.485
¿Qué quiero decir con eso?

00:34.485 --> 00:36.813
Digamos que estás escribiendo una aplicación

00:36.813 --> 00:39.680
en la que estás validando alguna entrada del usuario.

00:39.680 --> 00:41.810
Así que tienes múltiples campos de entrada

00:41.810 --> 00:44.603
y dependiendo de lo que el usuario introduzca allí

00:44.603 --> 00:46.682
y de qué campo sea, podrías querer almacenar

00:46.682 --> 00:50.490
y eventualmente mostrar diferentes mensajes de error.

00:50.490 --> 00:52.520
Por ejemplo, si se trata de un campo de correo

00:52.520 --> 00:54.360
electrónico quieres comprobar quién

00:54.360 --> 00:55.590
está en el correo y si no lo está

00:55.590 --> 00:59.830
entonces quieres añadir un mensaje de error adecuado al contenedor de errores.

00:59.830 --> 01:01.133
Así que con eso voy a empezar.

01:01.133 --> 01:06.133
Tendré mi contenedor de errores de interfaz aquí.

01:07.570 --> 01:09.530
Y eso debe ser un objeto, por eso uso

01:09.530 --> 01:11.400
una interfaz aquí, pero debe ser

01:11.400 --> 01:14.090
flexible en cuanto a lo que contiene.

01:14.090 --> 01:15.680
En definitiva, mi objetivo es que

01:15.680 --> 01:17.692
con eso podamos tratar objetos en los que

01:17.692 --> 01:20.782
tengamos algún identificador de error, que podría ser el ideal

01:20.782 --> 01:23.700
si el campo de entrada al que pertenece el error.

01:23.700 --> 01:26.581
Por ejemplo, el correo electrónico. Y luego una cadena de error,

01:26.581 --> 01:31.581
no un correo electrónico válido. Y luego tenemos otra propiedad.

01:32.130 --> 01:35.610
Digamos que el nombre de usuario y luego una cadena de

01:35.610 --> 01:37.150
error podría estar almacenando

01:37.150 --> 01:39.280
ese campo de entrada si el campo de

01:39.280 --> 01:41.611
entrada es incorrecto.

01:41.611 --> 01:45.770
Debe comenzar con un personaje.

01:45.770 --> 01:49.170
Algo así debería almacenarse en ese objeto.

01:49.170 --> 01:51.992
El problema es que no sé de antemano los nombres

01:51.992 --> 01:55.320
exactos de las propiedades que vamos a tener ahí.

01:55.320 --> 01:58.021
Podrías decir, bueno tendremos correo electrónico y nombre

01:58.021 --> 02:01.650
de usuario, pero para uno quiero que esto sea un contenedor flexible.

02:01.650 --> 02:03.150
Quiero poder utilizarlo en cualquier

02:03.150 --> 02:05.350
formulario que tenga en mi página web.

02:05.350 --> 02:07.560
Y puedo tener diferentes formularios con diferentes

02:07.560 --> 02:10.157
entradas con diferentes identificadores.

02:10.157 --> 02:12.741
Así que no quiero limitarme a los errores

02:12.741 --> 02:16.150
de nuestro correo electrónico y nombre de usuario.

02:16.150 --> 02:18.461
Y además, aunque siempre tuviéramos sólo entradas

02:18.461 --> 02:20.859
de correo electrónico y nombre de usuario y sólo

02:20.859 --> 02:23.291
quisiéramos almacenar errores para esos.

02:23.291 --> 02:27.461
¿Qué hacemos si sólo el correo electrónico es inválido y no el nombre de usuario?

02:27.461 --> 02:30.912
Entonces, por supuesto, en este objeto podríamos almacenar null como valor

02:30.912 --> 02:34.421
para un nombre de usuario, pero me gustaría simplemente omitirlo.

02:34.421 --> 02:37.232
Entonces, ¿tenemos un objeto que sólo contiene propiedades

02:37.232 --> 02:40.419
para las entradas en las que tenemos un error?

02:40.419 --> 02:42.960
Así que también podemos hacer un bucle a través de este

02:42.960 --> 02:46.260
objeto con un bucle de cuatro en para leer todos los errores que tenemos,

02:46.260 --> 02:48.200
por ejemplo, y no tienen ninguna propiedad

02:48.200 --> 02:51.112
en allí que no almacenan realmente un error.

02:51.112 --> 02:53.261
En resumen, necesito un objeto

02:53.261 --> 02:56.861
en el que tenga muy claro el tipo de valor.

02:56.861 --> 03:00.260
Debería ser una cadena, pero donde no avanzo cuántas

03:00.260 --> 03:02.190
propiedades tendré y qué nombre

03:02.190 --> 03:05.320
tendrán las propiedades.

03:05.320 --> 03:08.171
Y para tal escenario podemos utilizar los tipos de índice.

03:08.171 --> 03:10.760
Aquí se define un tipo de índice utilizando corchetes.

03:10.760 --> 03:14.730
Recuerda que normalmente escribiríamos aquí el nombre de una propiedad, pero

03:14.730 --> 03:16.280
ahora usamos corchetes.

03:16.280 --> 03:21.280
A continuación, cualquier nombre de su elección, por ejemplo, llave o puntal.

03:23.581 --> 03:28.581
Luego, dos puntos. Y luego el tipo de valor de la propiedad.

03:29.010 --> 03:30.010
Y luego un objeto.

03:30.010 --> 03:33.760
No puedes tener cadenas, números o símbolos como propiedad.

03:33.760 --> 03:37.660
Por ejemplo, aquí no se puede usar booleano. Eso no está permitido.

03:37.660 --> 03:40.504
Pero aquí se puede utilizar la cadena.

03:40.504 --> 03:43.190
Con esto simplemente estoy diciendo que cualquier

03:43.190 --> 03:46.330
objeto que esté construyendo basado en esta interfaz de

03:46.330 --> 03:51.083
contenedor de errores más tarde debe tener propiedades, que son cadenas.

03:52.120 --> 03:53.928
El nombre de usuario, por ejemplo, sería una cadena

03:53.928 --> 03:55.899
válida aunque no la envuelva entre comillas.

03:55.899 --> 03:59.980
Luego, añadimos dos puntos. Y luego el tipo de valor, que

03:59.980 --> 04:01.629
es cadena. Así que con eso

04:01.629 --> 04:04.320
digo que no sé el nombre exacto de la propiedad.

04:04.320 --> 04:07.620
Tampoco conozco el recuento de propiedades.

04:07.620 --> 04:10.608
Sólo sé que cada propiedad que se añada a este objeto, que

04:10.608 --> 04:13.459
se basa en el contenedor de errores, debe tener un nombre

04:13.459 --> 04:16.959
de propiedad que pueda interpretarse como una cadena y el valor

04:16.959 --> 04:23.080
de la propiedad también debe ser una cadena.

04:23.080 --> 04:23.080
Eso es lo que estoy diciendo aquí.

04:23.080 --> 04:28.080
Ahora, con eso también podemos añadir propiedades predefinidas, sin

04:29.560 --> 04:31.906
embargo, sólo si son del mismo tipo

04:31.906 --> 04:35.339
que esto de aquí. Así que podríamos añadir un ID que es una cadena de tipo.

04:35.339 --> 04:39.760
Y entonces cualquier objeto que construyamos que se adhiera a esta interfaz debe

04:39.760 --> 04:43.360
tener una propiedad ID y puede añadir tantas otras propeidades como

04:43.360 --> 04:47.370
quiera, pero no podemos establecer ID a un número aquí, por ejemplo, porque

04:47.370 --> 04:49.277
tenemos un tipo de índice aquí.

04:49.277 --> 04:53.033
Así que esa es una restricción que tenemos si construimos tal objeto.

04:55.240 --> 04:56.550
¿Y ahora cuál es la consecuencia?

04:56.550 --> 05:00.080
Ahora podemos crear una bolsa de errores por ejemplo que sea

05:00.080 --> 05:02.390
de tipo contenedor de errores que por lo

05:02.390 --> 05:05.150
tanto es un objeto y sería válido así porque no tenemos

05:05.150 --> 05:07.440
que añadir ninguna propiedad.

05:07.440 --> 05:10.340
Eso es todo lo válido. Pero, por supuesto, ahora podemos añadir algunos.

05:10.340 --> 05:13.380
Por ejemplo, el correo electrónico no es válido.

05:13.380 --> 05:15.780
Y esto está bien. No estaría bien si en su lugar

05:15.780 --> 05:17.093
asignara un número aquí porque

05:17.093 --> 05:19.133
estamos diciendo que cada propiedad necesita

05:19.133 --> 05:23.001
un tipo de valor de cadena. Así que debemos usar una cadena aquí.

05:23.001 --> 05:25.940
Si utilizo un número aquí, eso funcionaría porque eso puede

05:25.940 --> 05:28.610
ser interpretado como una cadena también.

05:28.610 --> 05:30.883
Así que también puedo usar un número como tipo de clave

05:30.883 --> 05:33.031
aquí si quisiera. Soy bastante libre con

05:33.031 --> 05:35.981
respecto a lo que uso aquí. Si cambiara el tipo

05:35.981 --> 05:40.981
de puntal aquí a número, entonces puede hacer eso y esto estaría

05:42.130 --> 05:44.810
bien. Pero esto no sería así porque el

05:44.810 --> 05:46.470
correo electrónico no es un número.

05:46.470 --> 05:48.170
Esto no se puede convertir en un número.

05:48.170 --> 05:51.550
Se puede tratar como una cadena, pero no como un número.

05:51.550 --> 05:54.870
Así es como se controla qué tipo de propiedades, o qué nombres

05:54.870 --> 05:56.990
de propiedades, se permiten.

05:56.990 --> 05:59.493
Y aquí hice uno para permitir nombres de propiedades de cadena.

05:59.493 --> 06:02.264
Por lo tanto, cualquier cosa que se pueda convertir en una cadena es un

06:02.264 --> 06:04.740
nombre de propiedad válido. Y entonces el valor tiene

06:04.740 --> 06:06.413
que ser también una cadena.

06:06.413 --> 06:08.021
Y como he dicho, por supuesto,

06:08.021 --> 06:10.632
ahora podemos añadir múltiples valores aquí,

06:10.632 --> 06:12.830
múltiples valores debería decir.

06:12.830 --> 06:17.263
Debe comenzar con un carácter mayúsculo.

06:18.170 --> 06:21.220
Así que esto es ahora una bolsa de errores que podríamos

06:21.220 --> 06:22.722
construir con la ayuda del contenedor

06:22.722 --> 06:25.392
de errores, que nos da esta flexibilidad extra que

06:25.392 --> 06:27.522
no necesitamos saber de antemano qué nombres

06:27.522 --> 06:32.653
de propiedades queremos usar y cuántas propiedades necesitamos.
