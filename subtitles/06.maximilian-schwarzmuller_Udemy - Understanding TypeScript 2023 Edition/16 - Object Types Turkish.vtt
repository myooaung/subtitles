WEBVTT

00:02.280 --> 00:03.780
Eğitmen: TypeScript'in desteklediği

00:03.780 --> 00:06.450
temel türleri daha derinlemesine inceleyelim.

00:06.450 --> 00:09.800
İlginç olan bir sonraki tür nesne türüdür.

00:09.800 --> 00:13.100
Şimdi, JavaScript'teki nesneleri biliyorsunuz, buna benzerler.

00:13.100 --> 00:14.690
Küme parantezleriniz ve ardından

00:14.690 --> 00:16.350
anahtar değer çiftleriniz vardır

00:16.350 --> 00:20.460
ve bu değerler de TypeScript'te nesne türleri olarak ele alınır, bu nedenle herhangi

00:20.460 --> 00:23.620
bir JavaScript nesnesi nesne türündedir.

00:23.620 --> 00:28.410
Yine de TypeScript'te nesnelerin daha spesifik versiyonları olduğunu söyleyeceğim,

00:28.410 --> 00:30.030
böylece bunun herhangi bir

00:30.030 --> 00:32.514
nesne olmadığını, bu özelliklere sahip olması

00:32.514 --> 00:35.108
gereken veya şu ya da bu kurucu fonksiyona dayalı

00:35.108 --> 00:39.490
olması gereken bir nesne olduğunu söyleyebilirsiniz.

00:39.490 --> 00:41.322
Ama oraya adım adım gideceğiz.

00:41.322 --> 00:45.110
Nesnelere dalmak için öncelikle uygulamayı yeniden adlandıracağım. ve bunun adını temeller

00:45.110 --> 00:49.770
olarak değiştireceğim. Burada.

00:49.770 --> 00:52.058
Ve yeni bir uygulama ekleyin. ts dosyası, daha sonra eski

00:52.058 --> 00:55.400
uygulamayı geçersiz kılacaktır. js dosyasını derledikten

00:55.400 --> 00:58.600
sonra, artık nesnelere dalabiliriz.

00:58.600 --> 01:01.110
Ve burada temel bir nesne oluşturarak başlayalım,

01:01.110 --> 01:03.902
diyelim ki burada küme parantezleri olan bir kişi.

01:03.902 --> 01:05.870
Ve buna bir isim veriyoruz.

01:05.870 --> 01:08.230
Burada Maximilian ile devam edeceğim

01:08.230 --> 01:10.700
çünkü bu benim adım ve 30 yaşındayım.

01:10.700 --> 01:14.930
Şimdi, elbette teselli edebiliriz. log person here ve eğer bunu

01:14.930 --> 01:18.375
yaparsak ve bunu şaşırtıcı olmayan bir şekilde

01:18.375 --> 01:24.536
derlersek, bu nesnenin konsolda yazdırıldığını görmeliyiz.

01:24.536 --> 01:27.284
Şimdi, JavaScript'te de yapabileceğimiz

01:27.284 --> 01:31.690
şey, diyelim ki burada bulunmayan bir özellik olan nickname'e

01:31.690 --> 01:33.970
erişmeyi deneyebiliriz.

01:33.970 --> 01:37.320
Şimdi TypeScript'in bundan pek memnun olmadığını hemen görebilirsiniz

01:37.320 --> 01:39.820
ve bu nedenle IDE'm bana bunu söylüyor.

01:39.820 --> 01:42.302
Bana o türde özellik takma adının mevcut

01:42.302 --> 01:44.050
olmadığını söylüyor.

01:44.050 --> 01:47.642
Eğer bunu kaydedersek ve derlemeye çalışırsak, gerçekten

01:47.642 --> 01:49.907
de aynı hatayı alırız.

01:49.907 --> 01:52.210
TypeScript derleyicisi bundan hoşlanmıyor

01:52.210 --> 01:54.401
ve bana bu nesne üzerinde bir takma ad özelliğimiz

01:54.401 --> 01:56.430
olmadığını söylüyor.

01:56.430 --> 01:59.813
Bu takma ad özelliğine sahip olmadığımızı bulur çünkü çıkarım

01:59.813 --> 02:02.936
yaptığı kişinin üzerine gelirsek, kişiden sonra iki

02:02.936 --> 02:05.710
nokta üst üste olduğunu görebiliriz, yani değişken

02:05.710 --> 02:07.970
veya sabit adından sonra.

02:07.970 --> 02:11.030
Burada depolanan veri türünün bu olduğu sonucuna

02:11.030 --> 02:12.110
varılmıştır.

02:12.110 --> 02:14.181
Sizin de anlayabileceğiniz gibi bu sadece bir nesne değil.

02:14.181 --> 02:16.349
Bu somut bir nesnedir.

02:16.349 --> 02:18.920
İsim anahtarı olan bir nesnedir, burada

02:18.920 --> 02:21.430
da türün bir dize olması gerekir.

02:21.430 --> 02:24.700
Ve türün sayı olması gereken yaş anahtarı.

02:24.700 --> 02:27.116
Ve aslında, burada kafa karıştırıcı olabilir.

02:27.116 --> 02:31.100
Bu, burada, açıkça bir JavaScript nesnesine benziyor.

02:31.100 --> 02:33.980
Küme parantezleri, anahtar değer çiftleri.

02:33.980 --> 02:36.020
Burada görmeniz gereken ilk önemli şey,

02:36.020 --> 02:38.520
her satırdan sonra bir noktalı virgül olması.

02:38.520 --> 02:40.580
Bir JavaScript nesnesinde buna sahip değiliz.

02:40.580 --> 02:41.750
Burada bir virgül var.

02:41.750 --> 02:44.160
Ve gerçekten de bu, bir yerde oluşturulmuş bir

02:44.160 --> 02:45.940
JavaScript nesnesi değildir.

02:45.940 --> 02:50.600
Bu, TypeScript tarafından çıkarılan nesne türüdür ve nesne türleri

02:50.600 --> 02:53.914
neredeyse nesneler gibi yazılır, ancak elbette

02:53.914 --> 02:57.106
burada anahtar değer çiftlerimiz değil, anahtar

02:57.106 --> 02:59.239
türü çiftlerimiz vardır.

02:59.239 --> 03:02.840
Nesne türleri, bir yerde kullanılmakta olan

03:02.840 --> 03:06.064
nesne türünü tanımlamak için vardır.

03:06.064 --> 03:07.653
Daha genel olabiliriz.

03:07.653 --> 03:10.420
Burada nesne sabitine açıkça

03:10.420 --> 03:13.640
bir tür atayabilirim.

03:13.640 --> 03:16.100
Object, tıpkı number ve string gibi yerleşik

03:16.100 --> 03:17.460
türlerden biridir ve şimdi

03:17.460 --> 03:21.030
bunun üzerine gelirsem, object türündeki kişileri görürüz ve şimdi

03:21.030 --> 03:24.000
TypeScript gerçekten yalnızca bunun bir object türü

03:24.000 --> 03:26.430
olduğu gerçeğiyle ilgilenir.

03:26.430 --> 03:28.423
Şimdi, yine de bunu derlediğimizde

03:28.423 --> 03:32.808
bu hatayı alırız, çünkü TypeScript hala kodumuzu analiz eder ve orada

03:32.808 --> 03:35.490
var olmayan bir şeye erişmeye çalıştığımızı

03:35.490 --> 03:36.666
görür, ancak her şeyin

03:36.666 --> 03:39.770
bu en genel nesne türüyle başladığını anlamak

03:39.770 --> 03:42.140
önemlidir.

03:42.140 --> 03:44.660
Ancak çoğu zaman bundan daha spesifik olmak istersiniz.

03:44.660 --> 03:47.623
Sadece bu genel nesne türüyle çalışmak istemezsiniz.

03:47.623 --> 03:50.284
Gerçekten tam destek almak istiyorsunuz.

03:50.284 --> 03:53.550
Örneğin, şu anda buraya bir nokta eklersem ve otomatik tamamlama

03:53.550 --> 03:55.570
özelliğime bakarsam, IDE'm tarafından

03:55.570 --> 03:58.080
hiçbir yardım alamıyorum.

03:58.080 --> 04:00.303
Bunun nedeni, IDE'ye söylediğimiz

04:00.303 --> 04:05.860
tek şeyin, burada nesne türünde bir değerimiz olduğudur.

04:05.860 --> 04:08.300
Aslında şimdi de isme erişmeye çalıştığımda

04:08.300 --> 04:10.210
bir hata alıyoruz.

04:10.210 --> 04:12.270
İsim burada var, değil mi?

04:12.270 --> 04:14.120
Ancak burada TypeScript'e söylediğimiz

04:14.120 --> 04:16.601
şey, TypeScript'e hiçbir bilgi vermediğimiz

04:16.601 --> 04:18.889
bir nesneye sahip olduğumuzdur.

04:18.889 --> 04:21.739
Yani aslında, TypeScript herhangi bir özellik

04:21.739 --> 04:24.750
türünü desteklemez çünkü ona nesne hakkında hiçbir

04:24.750 --> 04:26.210
şey söylemeyiz.

04:26.210 --> 04:28.050
Bu yüzden daha spesifik olmalıyız.

04:28.050 --> 04:32.000
Ve belirli bir nesne türü belirleyerek daha spesifik oluruz.

04:32.000 --> 04:34.795
TypeScript'in de otomatik olarak çıkardığı şey.

04:34.795 --> 04:38.548
Bunu, const veya değişken adımızdan sonra iki nokta

04:38.548 --> 04:43.370
üst üste işaretinden sonra küme parantezleri ekleyerek yaparız.

04:43.370 --> 04:46.213
Yani buradaki yeni bir JavaScript nesnesi oluşturmaz.

04:46.213 --> 04:48.460
Bu aslında derlenmiş JavaScript

04:48.460 --> 04:50.310
kodundan çıkarılacaktır.

04:50.310 --> 04:52.643
Bunun yerine, bu sadece TypeScript'in

04:52.643 --> 04:55.855
özel bir nesne türünün gösterimidir.

04:55.855 --> 04:59.422
Yani nesnenin yapısı hakkında bazı bilgiler sağladığımız

04:59.422 --> 05:01.434
bir nesne türü.

05:01.434 --> 05:04.520
Şimdi, tür olarak sadece boş bir çift küme parantezi

05:04.520 --> 05:07.440
atayarak, aslında object ile aynı şeyi yaparız.

05:07.440 --> 05:09.765
TypeScript'e bunun bir nesne olduğunu söyleriz.

05:09.765 --> 05:12.740
Şimdi daha spesifik olabiliriz.

05:12.740 --> 05:16.550
Buraya anahtar değer girdileri ekleyebiliriz, ancak anahtar

05:16.550 --> 05:19.694
değer yerine anahtar türü ekleyebiliriz.

05:19.694 --> 05:22.800
Yani burada person'da saklanması gereken nesnenin

05:22.800 --> 05:25.091
bir name özelliğine sahip olması ve

05:25.091 --> 05:28.197
bu name özelliğinin değerinin string tipinde olması

05:28.197 --> 05:31.140
gerektiğini söyleyebiliriz.

05:31.140 --> 05:33.795
Yani burada, sonunda name'de depolanacak

05:33.795 --> 05:36.440
olan değerin türünü tanımlıyoruz.

05:36.440 --> 05:39.320
Şimdi, bu arada, burada bir hata aldığımı görüyorsunuz.

05:39.320 --> 05:41.090
Çünkü şu anda TypeScript'e söylediğim

05:41.090 --> 05:43.489
şey, kişimin tam olarak bir anahtar değer çiftine

05:43.489 --> 05:45.900
sahip bir nesneye sahip olması gerektiğidir;

05:45.900 --> 05:48.626
burada anahtar addır ve bu anahtarın değeri dizedir,

05:48.626 --> 05:52.730
ancak iki anahtar değer çiftine sahip bir nesne atamadık.

05:52.730 --> 05:55.020
Ad, bir dize tutar, bu iyidir,

05:55.020 --> 05:58.500
ancak yaş, bir sayı tutar ve bu iyi olmaz.

05:58.500 --> 06:01.140
Bu yüzden burada bir noktalı virgül ekleyerek bunu ayarlamamız

06:01.140 --> 06:03.520
ve ardından burada yaşın sayı türünde olması gerektiğini

06:03.520 --> 06:06.300
söylediğimiz başka bir anahtar değer çifti eklememiz gerekir.

06:06.300 --> 06:09.670
Yani burada 30 değil, aslında TypeScript'te desteklenebilir,

06:09.670 --> 06:12.673
bunu belirli bir sayı ile kısıtlarız, ancak bunu değiştirir

06:12.673 --> 06:15.600
değiştirmez sorunlarla karşılaşırız.

06:15.600 --> 06:19.060
Bunun yerine, burada sadece yaşın bir sayı olması gerektiğini söylemek istiyorum.

06:19.060 --> 06:22.360
Ve şimdi temel olarak daha önce çıkarılan aynı

06:22.360 --> 06:24.870
TypeScript'i açıkça atıyoruz.

06:24.870 --> 06:26.900
Öğrendiğiniz gibi, bu iyi bir uygulama değil,

06:26.900 --> 06:28.570
ancak nesne türlerini anlamak için bunu

06:28.570 --> 06:29.940
burada yapmak istedim.

06:29.940 --> 06:32.315
Yine de bu yapabileceğiniz bir şey.

06:32.315 --> 06:37.010
TypeScript'in bunu daha önce yaptığımız gibi çıkarmasına

06:37.010 --> 06:40.440
izin vermek daha iyidir.

06:40.440 --> 06:42.351
Şimdi, sadece ilginç bir

06:42.351 --> 06:45.450
şey göstermek için, TypeScript'in çıkarım

06:45.450 --> 06:47.970
yapabileceği bir türü açıkça atadığımız

06:47.970 --> 06:49.920
bu alt-optimal koda geri

06:49.920 --> 06:54.920
dönersem, bu kodu derlersek, elbette çalışır.

06:55.180 --> 06:56.900
name özelliğine erişebiliriz, ancak

06:56.900 --> 06:59.077
daha sonra app. js burada bu tür atamasının

06:59.077 --> 07:01.220
kaldırıldığını görüyoruz.

07:01.220 --> 07:03.417
Bu da elbette beklenen bir şey olmalıdır.

07:03.417 --> 07:06.290
Daha önce de belirttiğim gibi, tipler ve tip atamaları JavaScript'in

07:06.290 --> 07:08.120
bir parçası değildir.

07:08.120 --> 07:09.460
Yalnızca TypeScript.

07:09.460 --> 07:10.800
Buradaki sözdiziminin kodumuzda

07:10.800 --> 07:12.840
bir yerde bulunan bir JavaScript nesnesi oluşturmadığını

07:12.840 --> 07:16.485
açıkça belirtmek için bunu tekrar göstermek istedim.

07:16.485 --> 07:21.263
Bu, TypeScript'in birlikte çalıştığınız nesneleri anlamasına yardımcı

07:21.263 --> 07:24.570
olan bir nesne türünün TypeScript tarafından temsil

07:24.570 --> 07:25.900
edilmesidir.

07:25.900 --> 07:29.950
Elbette daha iyi sözdizimi, öğrendiğiniz gibi bu sözdizimidir.
