WEBVTT

00:02.802 --> 00:04.030
Istruttore: Ora che abbiamo trattato

00:04.030 --> 00:05.910
le classi, diamo un'occhiata alle interfacce.

00:05.910 --> 00:09.510
Rinomineremo il file app ts in classes e aggiungeremo

00:09.510 --> 00:11.230
un nuovo file app ts, che in

00:11.230 --> 00:13.730
seguito sarà compilato in app js.

00:13.730 --> 00:15.130
In questo file di app ts, ci

00:15.130 --> 00:17.026
immergeremo nelle interfacce.

00:17.026 --> 00:19.850
Che cos'è un'interfaccia?

00:19.850 --> 00:21.640
Nella sua versione più semplice,

00:21.640 --> 00:25.470
un'interfaccia descrive la struttura di un oggetto.

00:25.470 --> 00:28.502
Possiamo usarlo per descrivere l'aspetto di un oggetto.

00:28.502 --> 00:29.856
Vi mostro un esempio.

00:29.856 --> 00:32.990
Creiamo un'interfaccia con la parola chiave interface,

00:32.990 --> 00:37.510
che esiste solo in typescript, non in JavaScript puro.

00:37.510 --> 00:39.600
Ora diamo un nome alla persona.

00:39.600 --> 00:41.140
Anche in questo caso, come

00:41.140 --> 00:43.150
in un corso, inizio con la maiuscola,

00:43.150 --> 00:46.820
non è un obbligo ma una raccomandazione e una convenzione.

00:46.820 --> 00:47.910
A questo punto, possiamo

00:47.910 --> 00:51.160
definire l'aspetto dell'oggetto persona.

00:51.160 --> 00:52.480
Tuttavia, a differenza

00:52.480 --> 00:54.930
di una classe, non lo useremo come progetto.

00:54.930 --> 00:57.543
Come tipo personalizzato, si potrebbe dire.

00:58.490 --> 01:00.690
In questo caso, si potrebbe dire che una persona

01:00.690 --> 01:01.860
può avere un nome, di tipo

01:01.860 --> 01:04.300
stringa, e un'età, di tipo numero.

01:04.300 --> 01:05.140
Come si può vedere

01:05.140 --> 01:08.020
qui, aggiungo le proprietà o le definizioni dei

01:08.020 --> 01:09.970
campi, dove ho i nomi delle proprietà

01:09.970 --> 01:13.440
e i tipi di valori che saranno memorizzati.

01:13.440 --> 01:16.560
Quello che non abbiamo qui sono i valori concreti.

01:16.560 --> 01:17.730
Quindi non abbiamo questo.

01:17.730 --> 01:20.510
Se provassimo ad assegnare un valore predefinito,

01:20.510 --> 01:21.810
otterremmo un errore:

01:21.810 --> 01:25.290
un'interfaccia non può avere un inizializzatore.

01:25.290 --> 01:27.540
Quindi possiamo definire solo la struttura,

01:27.540 --> 01:29.610
non i valori concreti.

01:29.610 --> 01:32.930
Possiamo anche aggiungere un metodo qui, ad esempio Greet.

01:32.930 --> 01:34.470
Come per le proprietà, qui

01:34.470 --> 01:37.440
non aggiungiamo il metodo vero e proprio, ma

01:37.440 --> 01:39.610
solo la struttura, la descrizione

01:39.610 --> 01:41.020
per così dire.

01:41.020 --> 01:42.670
Come dovrebbe apparire.

01:42.670 --> 01:46.600
Per definire un metodo che un oggetto persona dovrebbe avere,

01:46.600 --> 01:49.470
si aggiunge il nome del metodo, poi le parentesi

01:49.470 --> 01:50.920
e il tipo di ritorno.

01:50.920 --> 01:52.210
Ad esempio, bianco, e tra parentesi

01:52.210 --> 01:53.260
si possono inserire tutti

01:53.260 --> 01:55.310
gli argomenti desiderati.

01:55.310 --> 01:57.740
Come una frase che dovrebbe essere un tipo.

01:57.740 --> 02:01.920
Di nuovo, solo il nome dell'argomento e poi il tipo.

02:01.920 --> 02:03.610
Poi il tipo di ritorno del metodo.

02:03.610 --> 02:06.450
Naturalmente, non è necessario aggiungere parametri.

02:06.450 --> 02:09.080
Cosa possiamo fare ora con questa interfaccia personale?

02:09.080 --> 02:11.360
Qual è l'idea alla base?

02:11.360 --> 02:12.610
Ora possiamo usarlo per verificare

02:12.610 --> 02:14.810
la digitazione di un oggetto, ad esempio.

02:14.810 --> 02:18.020
Potremmo avere una variabile, l'utente uno, e diciamo

02:18.020 --> 02:19.130
che per qualche motivo

02:19.130 --> 02:22.620
non la inizializziamo immediatamente.

02:22.620 --> 02:25.660
Vogliamo solo memorizzare un oggetto

02:25.660 --> 02:28.490
che abbia questa struttura.

02:28.490 --> 02:30.710
Poi possiamo assegnare un tipo all'utente uno, che potrebbe

02:30.710 --> 02:31.830
essere persona.

02:31.830 --> 02:34.604
Possiamo usare la nostra interfaccia come tipo.

02:34.604 --> 02:38.410
Ora, quando assegno un valore all'utente uno, questo deve essere

02:38.410 --> 02:39.730
un oggetto, perché le interfacce

02:39.730 --> 02:42.780
sono usate per definire gli oggetti.

02:42.780 --> 02:45.560
Deve essere un oggetto con una proprietà name,

02:45.560 --> 02:47.190
che deve contenere una stringa,

02:47.190 --> 02:49.850
una proprietà age, che deve contenere un

02:49.850 --> 02:53.102
numero, e un metodo greet, che deve accettare un argomento

02:53.102 --> 02:56.920
phrase e non restituire nulla.

02:56.920 --> 02:57.830
In questo oggetto

02:57.830 --> 02:59.360
possiamo aggiungere un nome.

02:59.360 --> 03:00.730
Max, ad esempio.

03:00.730 --> 03:03.010
Ora aggiungiamo il valore concreto,

03:03.010 --> 03:06.310
che deve essere del tipo definito qui sopra.

03:06.310 --> 03:08.160
Ora sono separati da una virgola, e questa è

03:08.160 --> 03:11.110
una differenza rispetto alla nostra definizione di interfaccia.

03:11.110 --> 03:16.110
Si separano le chiavi e le proprietà con i punti e virgola.

03:16.470 --> 03:18.430
Ma qui sotto, quando creiamo il nostro oggetto,

03:18.430 --> 03:21.390
proprio come nel JavaScript tradizionale, usiamo una virgola.

03:21.390 --> 03:25.570
Poi un'età e, naturalmente, anche il metodo del saluto.

03:25.570 --> 03:27.550
Ora il metodo greet, come si è appreso,

03:27.550 --> 03:32.020
deve essere un metodo che prende un parametro, phrase, che deve essere

03:32.020 --> 03:33.790
una stringa, e dove poi voglio

03:33.790 --> 03:36.134
che la console log phrase più qualche

03:36.134 --> 03:41.134
spazio bianco e questo. nome.

03:41.210 --> 03:43.930
Questa potrebbe essere un'implementazione del metodo greet.

03:43.930 --> 03:45.670
Ora quello che c'è dentro non ha importanza.

03:45.670 --> 03:48.210
È solo importante avere un parametro,

03:48.210 --> 03:49.270
una stringa, e

03:49.270 --> 03:51.290
non restituire nulla.

03:51.290 --> 03:54.090
Questo sarebbe un oggetto utente valido,

03:54.090 --> 03:58.150
perché soddisfa la definizione della nostra interfaccia.

03:58.150 --> 03:59.040
Pertanto, naturalmente,

03:59.040 --> 04:00.940
ora possiamo, ad esempio, chiamare

04:00.940 --> 04:04.020
Greet e dire Ciao, sono io, e poi dovremmo stampare

04:04.020 --> 04:06.220
il nome.

04:06.220 --> 04:08.300
Se ora lo salviamo e lo ricarichiamo,

04:08.300 --> 04:10.330
vediamo che sono Max.

04:10.330 --> 04:12.840
E questo viene dal nostro metodo Greet.

04:12.840 --> 04:14.090
Si tratta di un'interfaccia.

04:14.090 --> 04:18.280
Ci permette di definire la struttura di un oggetto.

04:18.280 --> 04:21.140
Possiamo usarlo come verifica del tipo per

04:21.140 --> 04:24.453
gli oggetti che devono avere questa struttura.
