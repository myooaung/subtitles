WEBVTT

1
00:00:01.538 --> 00:00:03.725
<v Narrator>To get started let's first of all</v>

2
00:00:03.725 --> 00:00:07.086
go to tsconfig.json file because there we need

3
00:00:07.086 --> 00:00:09.965
to make sure certain things are configured.

4
00:00:09.965 --> 00:00:12.780
Make sure that target here,

5
00:00:12.780 --> 00:00:16.286
is actually set to es5 or es6, that is up to you.

6
00:00:16.286 --> 00:00:19.423
It depends on which browsers you plan on supporting.

7
00:00:19.423 --> 00:00:22.190
Because in the end webpack and the types that loader

8
00:00:22.190 --> 00:00:24.050
will use this target to determine

9
00:00:24.050 --> 00:00:26.543
how your code should be transformed.

10
00:00:26.543 --> 00:00:28.960
Should your types of code be transformed

11
00:00:28.960 --> 00:00:32.480
to Java script code that runs in older browsers as well?

12
00:00:32.480 --> 00:00:36.210
Or as with es6 to code that only runs

13
00:00:36.210 --> 00:00:37.811
in more recent browsers?

14
00:00:37.811 --> 00:00:42.640
Module then should be set to es2015 or es6

15
00:00:42.640 --> 00:00:44.110
so that setting is fine.

16
00:00:44.110 --> 00:00:49.110
And in addition, you also want to verify your outDir.

17
00:00:50.560 --> 00:00:53.520
I will keep it to dist but you could change this

18
00:00:53.520 --> 00:00:55.997
if you want to compile your code to a different directory.

19
00:00:55.997 --> 00:00:59.378
You don't need to root directory anymore though,

20
00:00:59.378 --> 00:01:02.260
because webpack will take over there,

21
00:01:02.260 --> 00:01:05.014
and webpack will determine where your root files are.

22
00:01:05.014 --> 00:01:07.660
So in general these settings should be fine.

23
00:01:07.660 --> 00:01:09.525
We can always tweak them later if something

24
00:01:09.525 --> 00:01:12.487
doesn't work the way we want it to work.

25
00:01:12.487 --> 00:01:15.220
With that lets add a new configuration file

26
00:01:15.220 --> 00:01:19.848
next to tsconfig.json and that's the webpack.config.js file.

27
00:01:19.848 --> 00:01:22.368
And make sure you do really name it like this

28
00:01:22.368 --> 00:01:24.150
because this is the file webpack

29
00:01:24.150 --> 00:01:27.579
will automatically look for and this will even tell webpack

30
00:01:27.579 --> 00:01:30.220
how to work with our project.

31
00:01:30.220 --> 00:01:32.840
Because webpack is a tool which needs to be configured

32
00:01:32.840 --> 00:01:34.568
to work correctly here.

33
00:01:34.568 --> 00:01:37.568
So what do we do in this webpack.config file?

34
00:01:37.568 --> 00:01:40.338
This configuration file uses JavaScript

35
00:01:40.338 --> 00:01:43.288
and actually it uses node.js features.

36
00:01:43.288 --> 00:01:46.747
So we want to use the node.js exports syntax,

37
00:01:46.747 --> 00:01:50.379
which looks like this to then export a JavaScript object.

38
00:01:50.379 --> 00:01:53.538
Which will be the configuration object picked up by webpack.

39
00:01:53.538 --> 00:01:55.585
So in case you never saw that before,

40
00:01:55.585 --> 00:01:59.648
this is how you export things in a node.js environment.

41
00:01:59.648 --> 00:02:02.877
And here we are exporting a JavaScript object.

42
00:02:02.877 --> 00:02:05.920
Now webpack needs a couple of pieces of information.

43
00:02:05.920 --> 00:02:09.840
Most importantly it needs to know with which file

44
00:02:09.840 --> 00:02:14.585
your entire project starts; so where your entry point is.

45
00:02:14.585 --> 00:02:17.370
In our case that's the app.ts file.

46
00:02:17.370 --> 00:02:18.922
This file should be executed first,

47
00:02:18.922 --> 00:02:20.981
and what webpack then will do

48
00:02:20.981 --> 00:02:24.013
is it will have a look at the imports in this file

49
00:02:24.013 --> 00:02:25.461
and go to these files

50
00:02:25.461 --> 00:02:27.378
and have a look at their imports

51
00:02:27.378 --> 00:02:30.219
and the imports of the imported files and so on.

52
00:02:30.219 --> 00:02:33.461
Until it knows all files your project uses in the end.

53
00:02:33.461 --> 00:02:36.201
And then it will go through the files contents

54
00:02:36.201 --> 00:02:38.740
like this content here and all the content

55
00:02:38.740 --> 00:02:41.690
in all files and compile them,

56
00:02:41.690 --> 00:02:44.290
with the help of the ts.loader package I mentioned.

57
00:02:44.290 --> 00:02:46.960
Now to make webpack work correctly here

58
00:02:46.960 --> 00:02:50.421
you should actually now remove all .js extensions

59
00:02:50.421 --> 00:02:51.598
in all the imports.

60
00:02:51.598 --> 00:02:54.400
We needed that before, when we used the

61
00:02:54.400 --> 00:02:57.885
native browser built in ts. Module functionality,

62
00:02:57.885 --> 00:03:01.130
but with webpack you don't need these extensions.

63
00:03:01.130 --> 00:03:03.664
Because webpack will actually automatically look for

64
00:03:03.664 --> 00:03:06.501
.js, and certain other extension files.

65
00:03:06.501 --> 00:03:09.270
So you don't and you shouldn't add them here,

66
00:03:09.270 --> 00:03:10.716
otherwise webpack will look for

67
00:03:10.716 --> 00:03:13.655
files with a double extension, which you don't want.

68
00:03:13.655 --> 00:03:18.441
So remove .js on all these imports here,

69
00:03:18.441 --> 00:03:21.370
and once you did that save all these files

70
00:03:21.370 --> 00:03:24.043
to make sure your changes are applied.

71
00:03:24.043 --> 00:03:26.498
Now back to webpack.config.js,

72
00:03:26.498 --> 00:03:31.320
there you now should add an entry property

73
00:03:31.320 --> 00:03:32.740
in this exported object.

74
00:03:32.740 --> 00:03:37.740
And point at ./src/app.ts in our example.

75
00:03:38.680 --> 00:03:42.444
So at the root entry file of your project.

76
00:03:42.444 --> 00:03:45.880
Next add a output key here.

77
00:03:45.880 --> 00:03:48.051
An output now is a object here.

78
00:03:48.051 --> 00:03:51.120
Where we first of all specify the file name.

79
00:03:51.120 --> 00:03:52.998
This will be the single JavaScript file

80
00:03:52.998 --> 00:03:55.440
which will be produced in the end.

81
00:03:55.440 --> 00:03:57.350
And here we'll name it bundle.js,

82
00:03:57.350 --> 00:03:58.788
but you could name it whatever you want.

83
00:03:58.788 --> 00:04:01.709
App.js, or whatever you want.

84
00:04:01.709 --> 00:04:05.171
You can also add dynamic parts here for example,

85
00:04:05.171 --> 00:04:08.971
content hash, to tell webpack to automatically create

86
00:04:08.971 --> 00:04:11.829
a unique has for every build which can help you

87
00:04:11.829 --> 00:04:13.578
with caching in the browser.

88
00:04:13.578 --> 00:04:16.229
But again you can learn more about that in the webpack docs.

89
00:04:16.229 --> 00:04:19.779
Here we don't need it so we'll just name the file bundle.js.

90
00:04:19.779 --> 00:04:23.320
In addition to the file name you also need to specify

91
00:04:23.320 --> 00:04:26.131
the path, where the output should be written to.

92
00:04:26.131 --> 00:04:28.900
And of course that should match the path you have

93
00:04:28.900 --> 00:04:32.970
in your ts.config.js file to avoid errors.

94
00:04:32.970 --> 00:04:34.189
So to this folder.

95
00:04:34.189 --> 00:04:37.010
Now unlike in the ts.config,js file,

96
00:04:37.010 --> 00:04:39.819
you shouldn't write ./dist here.

97
00:04:39.819 --> 00:04:42.099
Webpack wants an absolute path here.

98
00:04:42.099 --> 00:04:45.669
And to build one we can use a node.js module.

99
00:04:45.669 --> 00:04:48.880
For that we can use the node.js import syntax,

100
00:04:48.880 --> 00:04:51.280
which uses the required keyword,

101
00:04:51.280 --> 00:04:54.220
and import the path module.

102
00:04:54.220 --> 00:04:56.050
You don't need to install this as a library

103
00:04:56.050 --> 00:04:59.651
this is a core node.js module which you already have

104
00:04:59.651 --> 00:05:02.149
if you got node.js installed, which you do

105
00:05:02.149 --> 00:05:04.966
because we did it earlier in the course.

106
00:05:04.966 --> 00:05:08.552
Now you can use path to call the resolve method there

107
00:05:08.552 --> 00:05:11.280
which allows you to build an absolute path

108
00:05:11.280 --> 00:05:12.910
to a certain folder.

109
00:05:12.910 --> 00:05:15.320
For that we use a special constant,

110
00:05:15.320 --> 00:05:17.236
the __dirname constant,

111
00:05:17.236 --> 00:05:21.150
which is available globally in a node.js environment.

112
00:05:21.150 --> 00:05:24.692
And webpack as I said uses node.js to execute your files.

113
00:05:24.692 --> 00:05:27.433
And then as second argument dist,

114
00:05:27.433 --> 00:05:30.661
in the end dist just constructs an absolute path

115
00:05:30.661 --> 00:05:33.190
to the dist folder which webpack then

116
00:05:33.190 --> 00:05:35.452
uses to write your out-put there.

117
00:05:35.452 --> 00:05:38.753
And with that you got an entry point and a out-put point,

118
00:05:38.753 --> 00:05:40.743
but you don't tell webpack what to do

119
00:05:40.743 --> 00:05:42.553
with your TypeScript files.

120
00:05:42.553 --> 00:05:45.140
Because by default webpack doesn't know that,

121
00:05:45.140 --> 00:05:46.884
by default it's just a bundler.

122
00:05:46.884 --> 00:05:48.684
Any extra functionality,

123
00:05:48.684 --> 00:05:51.261
like compiling TypeScript to JavaScript

124
00:05:51.261 --> 00:05:53.452
has to be taught to webpack.

125
00:05:53.452 --> 00:05:55.943
We'll do that in the next lecture.

