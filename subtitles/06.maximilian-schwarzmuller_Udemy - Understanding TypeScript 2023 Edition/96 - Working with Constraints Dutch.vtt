WEBVTT

00:02.340 --> 00:04.100
Verteller: We zijn dus begonnen met

00:04.100 --> 00:06.670
generics en hopelijk is het duidelijk wat TypeScript

00:06.670 --> 00:10.240
hier doet, we geven wat extra informatie door aan de merge functie,

00:10.240 --> 00:12.130
zodat we beter kunnen werken met het

00:12.130 --> 00:14.370
resultaat van de merge functie.

00:14.370 --> 00:16.540
Daar zijn generieke geneesmiddelen voor.

00:16.540 --> 00:19.890
Daarmee kunt u optimaal blijven werken met uw

00:19.890 --> 00:21.960
gegevens in TypeScript.

00:21.960 --> 00:23.820
Nu, in dit geval, hier, zouden we

00:23.820 --> 00:25.810
echter een probleem hebben als ik,

00:25.810 --> 00:28.570
laten we zeggen een nummer 30 hier doorgeef.

00:28.570 --> 00:30.470
Natuurlijk gooit TypeScript nu een fout, omdat

00:30.470 --> 00:32.010
het probeert de leeftijd te benaderen,

00:32.010 --> 00:33.870
maar toegang tot de naam zou wel werken.

00:33.870 --> 00:37.100
Desalniettemin, als we dat opslaan, compileert het zonder

00:37.100 --> 00:39.710
fouten, en als ik het totale samengevoegde object

00:39.710 --> 00:41.610
afdruk, zien we dat ik alleen hobby's

00:41.610 --> 00:43.910
en naam terug krijg in mijn object, wat logisch

00:43.910 --> 00:46.570
is omdat 30 een getal is, en als we dat als tweede

00:46.570 --> 00:48.010
argument doorgeven aan object

00:48.010 --> 00:51.920
toewijzen, wat we hier uiteindelijk doen, wel, dan faalt dit gewoon

00:51.920 --> 00:54.590
stilletjes.

00:54.590 --> 00:57.860
JavaScript geeft geen foutmelding, het klaagt niet.

00:57.860 --> 01:00.460
Maar natuurlijk voegt het ook geen 30 samen

01:00.460 --> 01:02.270
in het nieuw gemaakte object,

01:02.270 --> 01:04.690
je ziet dat er geen 30 in dit object zit.

01:04.690 --> 01:06.540
Hoe zou JavaScript dat doen?

01:06.540 --> 01:08.470
Omdat 30 geen object is, kan een

01:08.470 --> 01:12.150
objecttoewijzing alleen verschillende objecten met

01:12.150 --> 01:14.090
elkaar samenvoegen.

01:14.090 --> 01:15.410
Wat willen we uiteindelijk redden?

01:15.410 --> 01:17.600
Nou, we geven niet om het exacte type,

01:17.600 --> 01:20.040
we geven niet om de exacte structuur van

01:20.040 --> 01:22.980
het object dat je hier levert voor U en T.

01:22.980 --> 01:26.600
Maar waar het ons om gaat is dat beide parameters,

01:26.600 --> 01:31.370
beide typen T en U, elk soort object moeten zijn, maar ze moeten

01:31.370 --> 01:34.420
te allen tijde een object zijn.

01:34.420 --> 01:36.830
En momenteel zeggen we dat niet.

01:36.830 --> 01:37.820
Momenteel zeggen we gewoon,

01:37.820 --> 01:40.110
ze moeten van elk type zijn, het kan me niet schelen.

01:40.110 --> 01:41.750
Nu is dat vaak niet goed.

01:41.750 --> 01:45.060
U wilt de types T en U hier beperken, en uw generieke

01:45.060 --> 01:46.683
types oplossen.

01:47.830 --> 01:51.540
Dat kan met typebeperkingen.

01:51.540 --> 01:55.170
Voor generieke types kun je bepaalde beperkingen instellen met betrekking

01:55.170 --> 01:58.280
tot de types waarop je generieke types gebaseerd kunnen

01:58.280 --> 02:01.120
zijn, en dat doe je met het uitgebreide sleutelwoord

02:01.120 --> 02:05.150
hier tussen de haakjes achter het type dat je wilt beperken.

02:05.150 --> 02:07.410
Dus hier zouden we kunnen zeggen uitbreidt

02:07.410 --> 02:09.020
object, en daarmee zeg ik

02:09.020 --> 02:12.740
dat het T-type elk object kan zijn met elke structuur, maar

02:12.740 --> 02:15.340
het moet een object zijn.

02:15.340 --> 02:17.480
We kunnen hetzelfde doen voor U.

02:17.480 --> 02:19.040
En als ik dat doe, zie je dat

02:19.040 --> 02:21.820
ik nu al een foutmelding krijg in de IDE.

02:21.820 --> 02:23.980
En als ik dat probeer op te slaan, krijg

02:23.980 --> 02:26.150
ik ook een foutmelding in de compiler,

02:26.150 --> 02:28.640
omdat het type 30 argument hier niet toewijsbaar

02:28.640 --> 02:31.133
is aan type object.

02:32.080 --> 02:34.480
Dus dat is natuurlijk het gedrag dat we hier willen.

02:34.480 --> 02:38.190
Nu moeten we weer een object invoeren, whoops,

02:38.190 --> 02:39.940
zoals dit.

02:39.940 --> 02:41.990
Nu moeten we dit weer doorgeven, en daarom

02:41.990 --> 02:43.680
verbeteren we deze functie omdat

02:43.680 --> 02:45.290
het nu echt werkt.

02:45.290 --> 02:48.980
En we weten dat object toewijzen twee objecten wil.

02:48.980 --> 02:51.000
Dus uiteindelijk willen we garanderen

02:51.000 --> 02:52.820
dat we hier twee objecten krijgen door

02:52.820 --> 02:56.370
bepaalde beperkingen te stellen aan onze generieke types.

02:56.370 --> 02:58.630
En die beperkingen kunnen van alles zijn.

02:58.630 --> 03:01.290
Je kunt verwijzen naar objecten, naar string, je zou

03:01.290 --> 03:03.730
je eigen type kunnen gebruiken als je dat had.

03:03.730 --> 03:06.700
Je kunt hier ook union types gebruiken als je dat wilt, je bent

03:06.700 --> 03:08.470
daar echt flexibel, je kunt alle beperkingen

03:08.470 --> 03:10.510
instellen die je wilt.

03:10.510 --> 03:12.620
En natuurlijk hoef je niet alle generieke

03:12.620 --> 03:13.720
types te beperken.

03:13.720 --> 03:16.560
Als je alleen U wilt beperken, kan dat.

03:16.560 --> 03:19.620
In dit voorbeeld is het gewoon logisch om beide te beperken,

03:19.620 --> 03:22.880
omdat object toewijzen hier twee objecten wil, maar je bent

03:22.880 --> 03:24.640
daar echt flexibel.

03:24.640 --> 03:26.620
Het is wel belangrijk om dat concept

03:26.620 --> 03:28.440
van constraints te kennen, want

03:28.440 --> 03:30.560
daarmee kun je beter optimaal werken

03:30.560 --> 03:32.640
met generieke types, wat onnodige

03:32.640 --> 03:34.810
fouten of vreemd gedrag zoals we dat

03:34.810 --> 03:37.513
eerder hadden, voorkomt.
