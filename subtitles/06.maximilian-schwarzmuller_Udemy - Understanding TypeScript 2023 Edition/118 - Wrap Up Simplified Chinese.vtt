WEBVTT

00:02.273 --> 00:05.100
教师：我们看了很多装饰器, 你如何使用它们,

00:05.100 --> 00:07.340
你如何配置它们, 你如何用它们做一些事情,

00:07.340 --> 00:11.367
你可以用它们做什么｡

00:11.367 --> 00:15.260
这希望向你展示装饰器的复杂性和强大功能,

00:15.260 --> 00:18.898
以及你如何思考它们, 如何使用它们｡

00:18.898 --> 00:28.590
您不仅可以创建自己的装饰器, 还可以创建一个由依赖于装饰器的包和框架组成的丰富的生态系统｡

00:28.590 --> 00:30.670
例如, 类验证器｡ 

00:30.670 --> 00:32.789
如果您搜索“ts class

00:32.789 --> 00:35.480
validator”, 您会找到一个包,

00:35.480 --> 00:41.680
其中基本上包含我们自己的自定义验证逻辑的更详细的实现｡

00:41.680 --> 00:44.140
这个包可以添加到您正在处理的任何项目中,

00:44.140 --> 00:48.030
然后您可以简单地导入一组装饰器或装饰器工厂, 正如您所看到的,

00:48.030 --> 00:51.660
因为我们在这里执行它们｡

00:51.660 --> 00:53.350
将它们添加到你的属性中,

00:53.350 --> 00:57.530
有或没有一些额外的配置, 这取决于它是什么验证器,

00:57.530 --> 01:08.950
在幕后, 这将管理这样一个注册表, 你可以说, 比如配置对象, 最后, 将你的验证器设置存储在你的不同类中的不同属性中｡

01:08.950 --> 01:11.810
然后, 给你一个validate方法,

01:11.810 --> 01:16.656
你也可以从包中导入它, 你可以执行它并将你的对象传递给它,

01:16.656 --> 01:20.540
以应用你在类中设置的所有验证逻辑｡

01:20.540 --> 01:22.840
所以它基本上就是我们刚才做的,

01:22.840 --> 01:27.830
只是使用了更多的验证器, 并为您完成了所有繁重的工作｡

01:27.830 --> 01:30.630
当然, 这有助于理解它通常是如何工作的,

01:30.630 --> 01:34.143
因为我们在这里建立了一个更天真的版本｡

01:35.010 --> 01:36.490
当然, 除了这个套件之外,

01:36.490 --> 01:38.370
我们还有Angular｡

01:38.370 --> 01:39.541
Angular是一个框架,

01:39.541 --> 01:41.502
我在前面已经提到过,

01:41.502 --> 02:00.170
它严重依赖于装饰器, 就像这个组件装饰器, 它允许您分配一些动态HTML代码, 这些代码也利用Angular添加的特殊语法来访问类的属性, 然后将一些动态内容呈现到屏幕上｡

02:00.170 --> 02:03.360
所以这里Angular做的不仅仅是提供这些装饰器,

02:03.360 --> 02:06.250
但是装饰器是Angular的核心部分｡

02:06.250 --> 02:07.280
最后, 但同样重要的是,

02:07.280 --> 02:10.130
我还想向你们展示NestJS｡

02:10.130 --> 02:15.487
NestJS是一个用于Node的服务器端JavaScript框架｡

02:15.487 --> 02:15.487
js,

02:15.487 --> 02:20.010
它也大量使用了打字稿, 并且还包含了装饰器｡

02:20.010 --> 02:23.270
在这里, 您可以使用装饰器来定义控制器和路由,

02:23.270 --> 02:36.890
用户必须在其HTTP请求上使用这些方法来触发某些函数, 还可以使用许多其他装饰器来从传入的请求中提取数据, 等等｡

02:36.890 --> 02:39.150
这个框架也提供了所有这些装饰器,

02:39.150 --> 02:46.257
所以你可以把它们添加到你的属性, 方法, 类中, 并添加额外的功能,

02:46.257 --> 02:52.828
当执行代码时, 框架也会考虑这些功能.

02:52.828 --> 02:55.417
这里, 装饰器被用于元编程来添加额外的配置,

02:55.417 --> 03:02.977
额外的逻辑, 然后, 在这个例子中, 框架外的代码会考虑到这些配置, 这些代码会执行你的代码,

03:02.977 --> 03:09.886
或者与你的代码一起工作｡

03:09.886 --> 03:12.000
这就是装修工的工作｡ 

03:12.000 --> 03:14.110
希望这能给你一个很好的概述,

03:14.110 --> 03:16.090
你可以用装饰器做什么, 为什么它们会很有帮助,

03:16.090 --> 03:19.563
以及它们通常是如何工作的｡
