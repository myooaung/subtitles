WEBVTT

00:02.120 --> 00:05.300
男：では､ 今､ 地図上に座標を出力するにはどうすればいいのでしょうか？

00:05.300 --> 00:08.180
そのためにまた､ GoogleのAPIを利用します｡ 

00:08.180 --> 00:10.690
Google JavaScript Maps､ またはGoogle

00:10.690 --> 00:13.810
JS Mapsで検索すると､ google JavaScript Google

00:13.810 --> 00:16.970
Maps APIの公式ドキュメントを見つけることができます｡

00:16.970 --> 00:22.020
そしてここでは､ WebアプリケーションでGoogle Mapsを使って地図をレンダリングする方法を学びます｡

00:22.020 --> 00:24.720
しかも､ 実にわかりやすく､ シンプルなのです｡ 

00:24.720 --> 00:31.720
まず最初に､ このGoogle Maps SDKをアプリケーションに追加するためのスクリプトをここに追加する必要があります｡

00:31.720 --> 00:34.220
そのスクリプトを､ index htmlファイルの､

00:34.220 --> 00:38.210
スクリプトの上に追加するだけです｡

00:38.210 --> 00:40.670
重要なのは､ このNPMはNPMに公開されていないのでインストールせず､

00:40.670 --> 00:48.140
Googleのサーバーから直接スクリプトを取得するこのCDNリンクを使用することです｡

00:48.140 --> 00:51.560
そして､ ここでAPI_KEYを設定する必要があります｡ 

00:51.560 --> 00:54.390
もちろん､ API_KEYはすでにtypescriptファイルに記述されているので､

00:54.390 --> 01:02.170
それをindex htmlにコピーしてYOUR_API_KEYに置き換えるだけでよい｡

01:02.170 --> 01:07.150
また､ 最後の"&amp;callback=initMap "は削除してください｡

01:07.150 --> 01:14.843
この場合､ マップがロードされたり､ SDKがロードされるとすぐに関数がトリガーされます｡

01:15.840 --> 01:19.760
これで､ このSDKをロードして､ 使えるようになったわけですが､

01:19.760 --> 01:24.250
ここで問題が発生します｡

01:24.250 --> 01:26.210
マップのレンダリングに使いたいのですが､

01:26.210 --> 01:28.710
マップのレンダリングは実は簡単なんです｡

01:28.710 --> 01:33.870
公式ドキュメントを見ると､ 最終的にはこのgoogleをインスタンス化する必要があることがわかります｡

01:33.870 --> 01:33.870
の地図をご覧ください｡  Mapのコンストラクタ関数に中心を渡すと､

01:36.870 --> 01:38.960
本質的に...

01:38.960 --> 01:43.250
このペアの座標は後ろから取得し､ ズームレベルを追加しています｡

01:43.250 --> 01:48.710
これをコピーして､ 座標が決まったらこのコードを実行し､

01:48.710 --> 01:50.010
マップを定数 "Map

01:50.010 --> 01:53.750
"に格納すればいいのです｡ しかし､ 当然ながらここでエラーが発生する｡ 

01:53.750 --> 01:55.117
"Cannot find name

01:55.117 --> 01:57.600
google "と言えば､ これはグローバルに利用できないが､

01:57.600 --> 02:01.320
typescriptはそれを知らない､ と納得できる｡

02:01.320 --> 02:03.380
このJavaScript SDKを輸入しているため､

02:03.380 --> 02:06.300
グローバルに利用できるようになるのです｡

02:06.300 --> 02:08.343
しかし､ typescriptはもちろんこのことを知らない｡ 

02:09.390 --> 02:12.270
そこで何ができるかというと､ もちろん「declare

02:12.270 --> 02:14.200
var google」を使って､

02:14.200 --> 02:19.200
これをanyに設定することができます｡

02:19.990 --> 02:21.020
これでは､ タイプスクリプトに「大丈夫､

02:21.020 --> 02:22.887
これは存在するのだから､ 心配しないで」と言われているようなものです｡ そうすれば､ エラーはなくなるんです｡ 

02:22.887 --> 02:29.060
ハードコードされた座標の代わりに､ ここで座標を使用することもできますし､

02:29.060 --> 02:33.480
マーカーをレンダリングすることも可能です｡

02:33.480 --> 02:36.430
公式ドキュメントの「Adding a map with

02:36.430 --> 02:37.930
a marker」をクリックすると､

02:37.930 --> 02:39.517
マーカーを追加する方法は簡単で､

02:39.517 --> 02:47.223
作成したマップを使って､ このコマンドでマーカーを作成し､ このマップを指定するだけです｡

02:49.040 --> 02:50.950
このコード・スニペットをコピーして､

02:50.950 --> 02:52.980
コードに戻って､ 地図を作成した後､

02:52.980 --> 02:59.160
このようにマーカーを作成し､ この位置が再び私の座標です｡

02:59.160 --> 03:01.160
これで地図がレンダリングされ､

03:01.160 --> 03:04.173
その上にマーカーが配置されるわけです｡

03:05.040 --> 03:10.350
あとは､ このマップが正しい場所にレンダリングされるようにすることです｡

03:10.350 --> 03:14.010
デフォルトでは､ Iを含む要素を探します｡  D. "地図 "であり､ それがここにあるのです｡

03:14.010 --> 03:18.720
でも､ 違うIを選んだら｡  D. を使用する場合は､ タイプスクリプトのコードで必ず調整してください｡

03:18.720 --> 03:20.470
これで保存すると､

03:20.470 --> 03:26.890
エラーなしでコンパイルされ､ ここにアドレスを入力すると､

03:26.890 --> 03:30.640
このようにレンダリングされるはずです｡

03:30.640 --> 03:33.450
これはうまくいっています｡ ここでズームレベルを調整して､

03:33.450 --> 03:35.320
もう少し拡大することができます｡

03:35.320 --> 03:40.370
たとえば16に変更すると､ もう少し鮮明に見ることができます｡

03:40.370 --> 03:42.910
しかし､ それが功を奏していることは､ 私たちにもわかることです｡ 

03:42.910 --> 03:45.640
スクロールして､ この地図を使うことができます｡ 

03:45.640 --> 03:47.480
これはこれでいいのですが､ 最適とは言えません｡ 

03:47.480 --> 03:50.420
もちろん､ "declare var google "のおかげで､

03:50.420 --> 03:53.340
エラーにならずに動いています｡

03:53.340 --> 03:56.760
でも､ タイプサポートも受けられない｡ 

03:56.760 --> 03:58.810
もし､ 私がエラーを引き起こした場合､

03:58.810 --> 04:06.730
例えば「.NET」を参照した場合｡ の代わりに "map "を使用します｡  maps "は問題なくコンパイルされ､ 以後は本番でクラッシュするのみです｡

04:06.730 --> 04:08.860
マップをレンダリングしようとすると

04:08.860 --> 04:11.280
ここでエラーが発生し､ エラーハンドラによって捕捉されました｡ 

04:11.280 --> 04:13.150
ですから､ これはもちろん私たちが望んでいることではありません｡ 

04:13.150 --> 04:16.493
型サポートが欲しい､ このようなダンプミスを実行時ではなく､

04:17.470 --> 04:19.770
開発時に処理したい｡

04:19.770 --> 04:22.880
では､ どうすればタイプスクリプトがGoogle Mapsを知っていることを確認できるのでしょうか｡ 

04:22.880 --> 04:27.380
タイプは､ 救助のために｡ 

04:27.380 --> 04:31.080
types google maps」で検索すると､ いろいろなパッケージが出てきますが､ これはまあGoogle

04:31.080 --> 04:34.160
Maps用のタイプを追加しているわけです｡

04:34.160 --> 04:41.050
Google MapsのパッケージはNPMでインストールしませんでしたが､ NPMでそのパッケージのタイプをインストールすることができます｡

04:41.050 --> 04:46.160
そして､ この最初のパッケージを､ プロジェクトにインストールすることにします｡

04:46.160 --> 04:48.790
では､ クイック開発サーバーに戻って､ 「npm install --save-dev

04:48.790 --> 04:54.030
"@types/googlemaps"」と一言実行しましょう｡

04:54.030 --> 04:56.400
それが､ このパッケージの名前でした｡ 

04:58.613 --> 05:01.560
これで､ このパッケージのグローバルタイプがインストールされます｡ 

05:01.560 --> 05:03.303
では､ NPM startでこれを再起動すると､

05:04.200 --> 05:08.410
より良い状況になるかどうか見てみましょう｡

05:08.410 --> 05:11.500
ここでこの「declare var」というのを削除するか､

05:11.500 --> 05:15.180
コメントアウトすれば｡

05:15.180 --> 05:18.090
まだコンパイルはできますが､ このグーグルマップというものが検出され､ ".NET "にアクセスしようとすると､

05:18.090 --> 05:19.940
".NET "が表示されます｡ map "と入力するとエラーが出ますが､

05:19.940 --> 05:23.290
オートコンプリートで "Yes, there is a maps thing.

05:23.290 --> 05:27.010
"と表示されるようになりました｡ また､ このマップコンストラクタは､ マップをレンダリングする「Div」または「Element」を最初の引数として必要とし､

05:27.010 --> 05:35.100
さらにマップに関するいくつかのオプションが必要であることも教えてくれています｡

05:35.100 --> 05:38.660
だから､ これはもうここで､ 当然のように動いているのです｡ 

05:38.660 --> 05:40.270
もちろん､ これは大きな前進です｡

05:40.270 --> 05:42.850
なぜなら､ これで私たちのアプリケーションが動き出しましたし､

05:42.850 --> 05:45.170
以前も動きましたから｡

05:45.170 --> 05:51.170
しかし､ 今では型にも対応し､ 適切な型サポートで動作するようになりました｡

05:51.170 --> 05:53.490
また､ このスタッフは､ タイプスクリプトを使ってどのようにアプリケーションを構築し､

05:53.490 --> 06:00.690
特定のタイプの機能を使用するかという点でも､ 特にサードパーティのライブラリとどのように連携するかという点でも､

06:00.690 --> 06:03.700
素晴らしいプラクティスです｡

06:03.700 --> 06:06.250
アクシオス」のように､ 独自の型を持ってくるものもあります｡ 

06:06.250 --> 06:08.470
また､ NPMでインストールされていないものでも､

06:08.470 --> 06:15.421
適切なタイプパッケージでタイプを追加することができます｡

06:15.421 --> 06:21.320
このモジュールが､ このことを理解するために､ また､ あなたが今後取り組むかもしれないプロジェクトで､

06:21.320 --> 06:23.230
特定のサードパーティライブラリを使用する可能性がある場合に､

06:23.230 --> 06:27.040
お役に立てれば幸いです｡
