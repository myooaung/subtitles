WEBVTT

00:02.170 --> 00:06.250
-: Oltre agli oggetti, in JavaScript abbiamo anche gli array, un

00:06.250 --> 00:08.300
tipo di dati molto importante.

00:08.300 --> 00:10.810
Gli array vengono creati in questo modo in JavaScript,

00:10.810 --> 00:12.560
come sapete, e potete memorizzarvi qualsiasi

00:12.560 --> 00:15.970
dato: numeri, stringhe, booleani, oggetti, altri array, potete avere array

00:15.970 --> 00:17.970
annidati, dopo tutto, e potete anche mescolare

00:17.970 --> 00:19.380
i dati.

00:19.380 --> 00:23.200
È possibile avere un array con stringhe e numeri mescolati.

00:23.200 --> 00:25.570
E TypeScript supporta anche gli array.

00:25.570 --> 00:29.260
È supportato qualsiasi array JavaScript e i tipi di tale

00:29.260 --> 00:32.140
array possono essere flessibili o rigidi.

00:32.140 --> 00:35.200
Ora diamo un'occhiata a questo in TypeScript.

00:35.200 --> 00:38.760
Per questo qui in app. ts, diciamo che la nostra persona ha

00:38.760 --> 00:42.810
anche una chiave hobbies, ma naturalmente potremmo anche avere una variabile

00:42.810 --> 00:45.660
o una costante hobbies al di fuori dell'oggetto.

00:45.660 --> 00:49.050
Quindi, l'uso degli array è esattamente lo stesso sia all'interno degli

00:49.050 --> 00:50.853
oggetti che al di fuori di essi.

00:51.950 --> 00:54.780
Abbiamo quindi degli hobby, che possono

00:54.780 --> 00:58.140
essere lo sport e la cucina, per esempio.

00:58.140 --> 01:01.150
Quindi ho due elementi e questi elementi, come

01:01.150 --> 01:03.620
potete vedere, sono stringhe.

01:03.620 --> 01:07.570
Ora, se passiamo sopra gli hobby, TypeScript ha rilevato correttamente

01:07.570 --> 01:10.630
la distanza dell'array di tipo stringa.

01:10.630 --> 01:12.500
Questa è una sintassi che non avete mai

01:12.500 --> 01:16.140
visto prima, ma è il modo in cui TypeScript descrive un array di dati.

01:16.140 --> 01:18.510
Ci sono le parentesi quadre e, davanti

01:18.510 --> 01:21.340
a queste, il tipo di dati memorizzati.

01:21.340 --> 01:23.530
Ora questo è il tipo, il gruppo del tipo dedotto.

01:23.530 --> 01:25.810
Ha visto che qui abbiamo un array e che ci sono

01:25.810 --> 01:29.110
solo stringhe, quindi ha dedotto che gli hobby probabilmente

01:29.110 --> 01:31.940
dovrebbero essere un array di stringhe.

01:31.940 --> 01:34.903
E in effetti, per gli hobby, questo ha molto senso.

01:36.210 --> 01:41.040
Naturalmente, si può anche impostare esplicitamente il tipo di variabile.

01:41.040 --> 01:44.720
Se aggiungiamo una nuova variabile, Attività preferite,

01:45.580 --> 01:48.670
che inizialmente dovrebbe essere vuota, potremmo

01:48.670 --> 01:51.160
voler impostare esplicitamente il tipo

01:51.160 --> 01:53.140
di dati memorizzati.

01:53.140 --> 01:55.590
Supponiamo che debba essere un array di stringhe,

01:55.590 --> 01:57.570
allora possiamo ripetere ciò che abbiamo

01:57.570 --> 02:00.330
appena visto: digitiamo stringa e poi parentesi quadre,

02:00.330 --> 02:03.330
per indicare a TypeScript che ciò che memorizziamo qui non è

02:03.330 --> 02:05.990
una singola stringa, ma un array di stringhe.

02:05.990 --> 02:09.550
E infatti se provo a memorizzare solo gli sport, ottengo

02:09.550 --> 02:12.183
un errore. Ricevo un errore perché

02:12.183 --> 02:15.650
si tratta di una singola stringa e non di un array di stringhe.

02:15.650 --> 02:19.370
Naturalmente non ricevo alcun errore se lo inserisco tra parentesi

02:19.370 --> 02:22.610
quadre e quindi creo effettivamente un array.

02:22.610 --> 02:25.870
Tuttavia, se aggiungo un numero, ad esempio, ottengo un errore,

02:25.870 --> 02:29.220
perché abbiamo definito che si tratta di un array di stringhe.

02:29.220 --> 02:31.290
Qui abbiamo un array misto.

02:31.290 --> 02:34.920
Si tratta di un array di stringhe e numeri, quindi non

02:34.920 --> 02:37.180
funziona e non è supportato qui.

02:37.180 --> 02:40.100
Se si volesse supportare un array misto di questo tipo,

02:40.100 --> 02:43.120
una soluzione sarebbe quella di utilizzare "any".

02:43.120 --> 02:45.880
Il tipo "any" è un tipo speciale in TypeScript,

02:45.880 --> 02:47.610
che vedremo più da vicino, che

02:47.610 --> 02:50.530
in pratica significa: fai quello che vuoi.

02:50.530 --> 02:53.020
Naturalmente è un tipo che non si vuole usare troppo spesso,

02:53.020 --> 02:55.630
perché si perderebbero i vantaggi offerti da TypeScript

02:55.630 --> 02:58.170
e si tornerebbe nel mondo di JavaScript, dove si può usare

02:58.170 --> 03:00.140
qualsiasi valore ovunque.

03:00.140 --> 03:02.940
Quindi "any" è davvero flessibile, ma la

03:02.940 --> 03:06.270
flessibilità ha il prezzo di rinunciare a tutti i

03:06.270 --> 03:08.710
vantaggi offerti da TypeScript.

03:08.710 --> 03:10.840
Quindi tornerò a stringa, perché non voglio

03:10.840 --> 03:12.530
che ci sia un numero qui dentro e quindi

03:12.530 --> 03:14.933
possiamo rimuovere il numero e siamo a posto.

03:15.900 --> 03:18.830
Gli array sono anche un ottimo esempio, proprio

03:18.830 --> 03:21.890
come gli oggetti e le loro proprietà, di quanto

03:21.890 --> 03:25.730
sia dinamica l'inferenza dei tipi di TypeScript.

03:25.730 --> 03:28.750
Se aggiungiamo un ciclo "for" qui in fondo, e vogliamo cercare

03:28.750 --> 03:31.570
tutti gli hobby di una persona, possiamo naturalmente usare

03:31.570 --> 03:33.220
un ciclo "for" tradizionale, con

03:33.220 --> 03:38.220
il ciclo "for" per ogni hobby della persona. hobbies, quindi accedere alla proprietà

03:38.620 --> 03:41.130
hobbies e passare in rassegna tutti gli

03:41.130 --> 03:42.793
hobbies, memorizzando ogni

03:43.690 --> 03:46.780
hobby per ogni iterazione in questa costante,

03:46.780 --> 03:50.090
per poi consultare il log hobby qui.

03:50.090 --> 03:52.000
Non è una cosa troppo sofisticata, è qualcosa

03:52.000 --> 03:53.710
che conosciamo da JavaScript, giusto.

03:53.710 --> 03:58.280
Se ora compilo questa applicazione. Il file ts laggiù, otteniamo

03:58.280 --> 04:01.700
il nome da questa riga e successivamente

04:01.700 --> 04:04.750
i due hobby che vengono stampati.

04:04.750 --> 04:07.800
Ma ciò che è interessante è che su Hobby possiamo

04:07.800 --> 04:11.040
accedere a qualsiasi cosa, a qualsiasi stringa.

04:11.040 --> 04:14.210
Ad esempio, per UpperCase, ottengo questo completamento automatico

04:14.210 --> 04:16.230
e TypeScript non si lamenta.

04:16.230 --> 04:18.070
Perché non si lamenta?

04:18.070 --> 04:21.930
Perché sa che hobby è di tipo array di stringhe, quindi

04:21.930 --> 04:25.830
quando accedo a person. hobbies, l'inferenza di TypeScript

04:25.830 --> 04:29.700
rileva che hobbies sarà un array di stringhe.

04:29.700 --> 04:33.450
Quindi, hobby, al contrario, viene correttamente identificato

04:33.450 --> 04:36.000
come una stringa, perché dato che passiamo attraverso

04:36.000 --> 04:38.370
un array di stringhe, i singoli valori devono

04:38.370 --> 04:40.510
essere solo stringhe.

04:40.510 --> 04:43.450
Pertanto, i tipi ci offrono un grande supporto laggiù

04:43.450 --> 04:46.490
e ci permettono di fare con Hobby tutto ciò che può essere

04:46.490 --> 04:50.050
fatto con una stringa, perché sa con certezza che Hobby sarà una

04:50.050 --> 04:53.810
stringa grazie ai tipi che abbiamo impostato lassù.

04:53.810 --> 04:56.300
Si tratta di un sistema molto flessibile e, naturalmente,

04:56.300 --> 04:59.030
di una grande caratteristica che rende la scrittura del codice

04:59.030 --> 05:01.360
molto più semplice, flessibile e sicura.

05:01.360 --> 05:04.440
Ad esempio, si otterrebbe un errore se si tentasse

05:04.440 --> 05:08.570
di accedere a Hobby. mappa, se pensassi che si tratta di un array.

05:08.570 --> 05:12.060
Il metodo map è disponibile per gli array, ma non per le stringhe.

05:12.060 --> 05:14.540
E qui, correttamente, di nuovo un errore che indica

05:14.540 --> 05:17.810
che la mappa non esiste sul tipo stringa, perché non esiste.

05:17.810 --> 05:21.290
Quindi otteniamo un errore, ed è un bene che lo otteniamo, perché

05:21.290 --> 05:24.510
sarebbe sbagliato, e qui vediamo l'inferenza di TypeScript

05:24.510 --> 05:27.343
brillare davvero, davvero tanto.
