WEBVTT

1
00:00:02.210 --> 00:00:03.450
<v Male Instructor>Now besides properties,</v>

2
00:00:03.450 --> 00:00:06.170
you can also add decorators to accessors

3
00:00:06.170 --> 00:00:09.200
and there I will create a new decorator function

4
00:00:09.200 --> 00:00:11.660
because this will now receive free arguments.

5
00:00:11.660 --> 00:00:16.430
Log2, it will also get the target which again

6
00:00:16.430 --> 00:00:18.330
is either the prototype,

7
00:00:18.330 --> 00:00:21.290
if we're dealing with an instance accessor,

8
00:00:21.290 --> 00:00:23.360
or if we're dealing with a static one,

9
00:00:23.360 --> 00:00:24.960
it will be the constructor function

10
00:00:24.960 --> 00:00:27.290
so we don't know we will be of type any.

11
00:00:27.290 --> 00:00:32.290
Then we'll have the name of the member we're dealing with.

12
00:00:32.410 --> 00:00:35.030
So the name of the accessor in the end.

13
00:00:35.030 --> 00:00:38.683
And we'll also have the property descriptor here,

14
00:00:39.580 --> 00:00:42.030
which will be of type property descriptor.

15
00:00:42.030 --> 00:00:44.600
That's the type built into TypeScript.

16
00:00:44.600 --> 00:00:49.600
So in there, let's log accessor decorator

17
00:00:50.030 --> 00:00:54.210
and then I will also console log the target here,

18
00:00:54.210 --> 00:00:56.470
then maybe new lines to make them more readable

19
00:00:56.470 --> 00:01:01.470
in the output, the name and also the descriptor.

20
00:01:01.720 --> 00:01:05.890
Now let's add log2 to the setter here like this

21
00:01:05.890 --> 00:01:07.350
and let's see what we get.

22
00:01:07.350 --> 00:01:10.733
If we save that, you see down there

23
00:01:10.733 --> 00:01:14.090
you got the accessor decorator which executes here.

24
00:01:14.090 --> 00:01:19.090
We got our prototype again, same as a buff for the property.

25
00:01:19.320 --> 00:01:23.570
Then we got the name of our accessor, price in this case.

26
00:01:23.570 --> 00:01:24.900
Not underscore price,

27
00:01:24.900 --> 00:01:27.890
so not the property with which it deals internally.

28
00:01:27.890 --> 00:01:30.570
Instead really the name of the accessor itself.

29
00:01:30.570 --> 00:01:33.630
And we got a property descriptor here where we see

30
00:01:33.630 --> 00:01:36.240
that a setter function is defined for example,

31
00:01:36.240 --> 00:01:37.600
a getter function is not,

32
00:01:37.600 --> 00:01:41.990
because for price I only have a setter, no getter.

33
00:01:41.990 --> 00:01:44.320
And we see that it's not enumerable,

34
00:01:44.320 --> 00:01:45.680
but that it is configurable.

35
00:01:45.680 --> 00:01:47.810
So that we can change this definition here

36
00:01:47.810 --> 00:01:51.000
for example that we can delete it and so on.

37
00:01:51.000 --> 00:01:54.520
This all exists and this is how we can add a decorator

38
00:01:54.520 --> 00:01:56.650
to an accessor, and what we then can access

39
00:01:56.650 --> 00:01:58.920
inside of this decorator.

40
00:01:58.920 --> 00:02:00.910
Now besides properties and accessors,

41
00:02:00.910 --> 00:02:04.350
we also got methods and can add decorators to methods.

42
00:02:04.350 --> 00:02:09.350
So here I'll add Log3, and add that to my method down there

43
00:02:09.430 --> 00:02:11.970
to get price with text.

44
00:02:11.970 --> 00:02:13.220
And now the question of course

45
00:02:13.220 --> 00:02:17.323
is which arguments does such a method decorator receive?

46
00:02:18.180 --> 00:02:22.230
A method decorator also receives free arguments,

47
00:02:22.230 --> 00:02:25.520
the target again which if it's an instance method,

48
00:02:25.520 --> 00:02:28.420
is the prototype of the object.

49
00:02:28.420 --> 00:02:31.150
If it's a static method, the constructor function

50
00:02:31.150 --> 00:02:34.993
just as before, then the name of the method here,

51
00:02:36.450 --> 00:02:39.380
so a string or a symbol actually.

52
00:02:39.380 --> 00:02:44.380
And also the descriptor at the end, property descriptor.

53
00:02:44.490 --> 00:02:46.140
These are the free arguments we get here,

54
00:02:46.140 --> 00:02:48.110
and you see these are the same arguments

55
00:02:48.110 --> 00:02:49.410
as in our accessor.

56
00:02:49.410 --> 00:02:51.630
So indeed we could also re-use this,

57
00:02:51.630 --> 00:02:54.340
but I will create a new one so that here

58
00:02:54.340 --> 00:02:57.483
I can print method decorator.

59
00:02:59.020 --> 00:03:00.840
Now with that if I saved this,

60
00:03:01.980 --> 00:03:04.410
this executes and you see here our method decorator

61
00:03:04.410 --> 00:03:07.880
executes and then here we get our prototype,

62
00:03:07.880 --> 00:03:09.380
same object as before.

63
00:03:09.380 --> 00:03:11.310
We get the name of the method here

64
00:03:11.310 --> 00:03:14.700
and we get this descriptor of this method here.

65
00:03:14.700 --> 00:03:17.440
So the very same behavior as before basically,

66
00:03:17.440 --> 00:03:19.400
just a descriptor is a little bit different

67
00:03:19.400 --> 00:03:20.950
since it's a method descriptor

68
00:03:20.950 --> 00:03:22.550
and not an accessor descriptor.

69
00:03:22.550 --> 00:03:25.720
We got a value and a writeable property here.

70
00:03:25.720 --> 00:03:27.750
Previously on the accessor descriptor,

71
00:03:27.750 --> 00:03:28.860
we had get and set.

72
00:03:28.860 --> 00:03:30.910
But that's just a java script difference,

73
00:03:30.910 --> 00:03:33.088
nothing TypeScript specific.

74
00:03:33.088 --> 00:03:38.088
So, here we do have our third decorator function

75
00:03:38.150 --> 00:03:40.070
which we now added to the method.

76
00:03:40.070 --> 00:03:43.390
The last decorator we can add is to a parameter.

77
00:03:43.390 --> 00:03:45.260
So let's do that now.

78
00:03:45.260 --> 00:03:47.550
For that, I'll create one more function here,

79
00:03:47.550 --> 00:03:51.269
Log4 and I want to add Log4

80
00:03:51.269 --> 00:03:53.660
to this one parameter I'm getting here,

81
00:03:53.660 --> 00:03:55.510
tax and you could add one

82
00:03:55.510 --> 00:03:57.130
to every parameter you get of course.

83
00:03:57.130 --> 00:03:59.560
You don't have to but you can add them independently

84
00:03:59.560 --> 00:04:02.990
to any parameter you want to add a decorator to.

85
00:04:02.990 --> 00:04:06.419
Now what does a parameter decorator get as arguments?

86
00:04:06.419 --> 00:04:10.790
Well, it gets the target same as before.

87
00:04:10.790 --> 00:04:12.520
The next argument we get is the name,

88
00:04:12.520 --> 00:04:14.100
and not the name of the parameter,

89
00:04:14.100 --> 00:04:17.310
but the name of the method in which we used this parameter.

90
00:04:17.310 --> 00:04:20.530
So basically, the same as in the method decorator thus far.

91
00:04:20.530 --> 00:04:22.170
But the last argument is different.

92
00:04:22.170 --> 00:04:24.250
This is now not the property descriptor,

93
00:04:24.250 --> 00:04:28.380
but instead this is the position of this argument,

94
00:04:28.380 --> 00:04:30.100
so the number of the argument.

95
00:04:30.100 --> 00:04:32.763
Here for example, this would be the first argument.

96
00:04:35.310 --> 00:04:38.670
So now again, let's copy that here

97
00:04:38.670 --> 00:04:43.550
and put all of that into Log4 parameter decorator.

98
00:04:43.550 --> 00:04:45.410
And let's output position here as well

99
00:04:45.410 --> 00:04:47.170
so that we can see what's in there.

100
00:04:47.170 --> 00:04:50.960
If we now saved it, we see our parameter decorator up there,

101
00:04:50.960 --> 00:04:53.480
not the very last output because execution order

102
00:04:53.480 --> 00:04:55.630
is different but we see our parameter decorator

103
00:04:55.630 --> 00:04:57.180
here and then here.

104
00:04:57.180 --> 00:04:59.530
We got the prototype as before.

105
00:04:59.530 --> 00:05:00.860
We got the name of the method

106
00:05:00.860 --> 00:05:02.190
where we used this parameter,

107
00:05:02.190 --> 00:05:04.770
and then the index of that argument,

108
00:05:04.770 --> 00:05:06.240
and that starts at zero,

109
00:05:06.240 --> 00:05:09.070
so the first argument has a number of zero here,

110
00:05:09.070 --> 00:05:10.360
an index of zero,

111
00:05:10.360 --> 00:05:12.740
and that's our parameter decorator.

112
00:05:12.740 --> 00:05:14.920
So these are all the places where we can add

113
00:05:14.920 --> 00:05:16.370
decorators and TypeScript,

114
00:05:16.370 --> 00:05:18.570
and we can do various things with them.

115
00:05:18.570 --> 00:05:20.450
Now I will show you a couple of examples

116
00:05:20.450 --> 00:05:21.660
in this module here,

117
00:05:21.660 --> 00:05:24.813
and I'll also show you libraries or frameworks

118
00:05:24.813 --> 00:05:28.380
that make heavy use of decorators.

119
00:05:28.380 --> 00:05:30.550
And I'll show you what they do with decorators

120
00:05:30.550 --> 00:05:34.583
to give you an idea of the power that decorators can have.

