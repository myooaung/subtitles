WEBVTT

00:02.330 --> 00:04.870
Narrator: Mówiąc o bardziej ogólnych typach,

00:04.870 --> 00:06.970
jako mały bonus, możesz powiedzieć,

00:06.970 --> 00:11.410
chcę wskazać twój kierunek na kilka wbudowanych typów.

00:11.410 --> 00:15.740
Typescript dostarcza, które wykorzystują typy generyczne lub które

00:15.740 --> 00:17.240
są typami generycznymi,

00:17.240 --> 00:20.350
które dają nam pewne funkcjonalności użytkowe.

00:20.350 --> 00:22.050
Więc tylko mały bonus tutaj,

00:22.050 --> 00:22.920
a od czasu do czasu

00:22.920 --> 00:25.550
te specjalne typy mogą się przydać.

00:25.550 --> 00:26.840
Teraz w załączniku znajdziesz

00:26.840 --> 00:30.680
link do pełnej dokumentacji wszystkich wbudowanych typów narzędzi.

00:30.680 --> 00:33.810
Tutaj chcę podać tylko kilka przykładów.

00:33.810 --> 00:36.010
Teraz tak samo jak wszystkie te rzeczy

00:36.010 --> 00:38.610
typu, typy te istnieją tylko w typach świata

00:38.610 --> 00:41.300
i dlatego tylko przed kompilacją.

00:41.300 --> 00:43.460
Ale podczas tego etapu kompilacji

00:43.460 --> 00:48.130
mogą dać ci dodatkowe bezpieczeństwo typu lub dodatkową elastyczność.

00:48.130 --> 00:51.670
Na przykład istnieje wbudowany typ częściowy.

00:51.670 --> 00:55.580
Powiedzmy, że mamy nowy typ, a ty interfejs, który znajdziemy lub

00:55.580 --> 00:58.480
niestandardowy typ naprawdę nie ma znaczenia,

00:58.480 --> 00:59.493
CourseGoal.

01:00.660 --> 01:03.780
KursGoal ma tytuł, który powinien być ciągiem

01:03.780 --> 01:06.930
znaków i powiedzmy opis, który powinien

01:06.930 --> 01:09.040
być ciągiem znaków.

01:09.040 --> 01:14.040
Może mamy też właściwość completeUntil, która jest Date.

01:15.290 --> 01:17.961
Teraz chcemy mieć funkcję, powiedzmy,

01:17.961 --> 01:21.500
createCourseGoal, która tworzy nam taki obiekt.

01:21.500 --> 01:23.380
Oczywiście, mogliśmy stworzyć również tę klasę.

01:23.380 --> 01:26.290
Ale mamy taką funkcję, ponieważ w tej funkcji

01:26.290 --> 01:28.740
możemy pobierać jakieś dane z bazy danych,

01:28.740 --> 01:30.590
czy cokolwiek to jest.

01:30.590 --> 01:32.110
Mamy więc taką funkcję.

01:32.110 --> 01:33.330
I w końcu tutaj,

01:33.330 --> 01:37.890
chcę uzyskać mój tytuł, który jest ciągiem, mogę

01:37.890 --> 01:42.320
uzyskać mój opis, który jest ciągiem, i mam nadzieję,

01:42.320 --> 01:47.150
że otrzymam moją datę, która jest Data.

01:47.150 --> 01:49.680
Teraz w tej funkcji, oczywiście, moglibyśmy zwrócić obiekt,

01:49.680 --> 01:51.740
ale właśnie ustawiliśmy wszystkie te rzeczy.

01:51.740 --> 01:55.340
Czyli gdzie ustawiamy title na title, description na description

01:55.340 --> 01:57.840
i completeUntil na date.

01:57.840 --> 02:00.760
Moglibyśmy zrobić to wszystko i gdybyśmy następnie

02:00.760 --> 02:03.890
zdefiniowali, że ta funkcja zawsze zwróci CourseGoal,

02:03.890 --> 02:07.120
mielibyśmy poprawnie skonfigurowaną funkcję.

02:07.120 --> 02:08.420
Teraz z jakiegoś powodu powiedzmy,

02:08.420 --> 02:09.530
że jednak nie robimy tego w ten

02:09.530 --> 02:11.623
sposób, nie robimy tego wszystkiego w jednym kroku.

02:12.680 --> 02:13.870
Zamiast tego, co chcę

02:13.870 --> 02:17.340
zrobić, chcę zacząć od utworzenia zmiennej tutaj, która przechowuje

02:17.340 --> 02:18.700
pusty obiekt.

02:18.700 --> 02:22.620
A potem krok po kroku chcę dodać tutaj swój tytuł.

02:22.620 --> 02:26.420
Chcę dodać tutaj swój opis.

02:26.420 --> 02:31.303
I chcę tu dodać swoją datę.

02:33.640 --> 02:36.420
Teraz tutaj dostaję błędy, bo oczywiście nie mogę ustawić

02:36.420 --> 02:39.170
tytułu this is not a property of this object.

02:39.170 --> 02:41.930
I chociaż działa to w vanilla JavaScript,

02:41.930 --> 02:45.410
TypeScript nie bardzo lubi to w locie dodając tutaj.

02:45.410 --> 02:47.810
Więc możemy chcieć powiedzieć, że to powinno

02:47.810 --> 02:49.300
być typu CourseGoal tutaj.

02:49.300 --> 02:51.040
Teraz TypeScript nie narzeka na

02:51.040 --> 02:53.640
to, ale na fakt, że jest to pusty obiekt, który

02:53.640 --> 02:56.223
wyraźnie nie pasuje do naszego typu tutaj.

02:57.070 --> 02:58.360
Więc w końcu chcę go zwrócić

02:58.360 --> 03:01.000
i chcę dodać wszystkie te rzeczy krok po kroku,

03:01.000 --> 03:04.570
może dlatego, że mamy dodatkową walidację przed każdym krokiem,

03:04.570 --> 03:07.590
a zatem jeden, aby dodać go w ten sposób.

03:07.590 --> 03:12.390
Teraz tutaj jest miejsce, gdzie typ częściowy może się przydać.

03:12.390 --> 03:17.390
Możemy powiedzieć, że CourseGoal powinien być tutaj typem częściowym, który w końcu

03:17.580 --> 03:18.413
dzięki typom generycznym

03:18.413 --> 03:21.600
będzie przechowywał courseGoal.

03:21.600 --> 03:24.200
Teraz to, co to robi, to mówi TypeScriptowi,

03:24.200 --> 03:28.260
że to jest obiekt, który w końcu będzie courseGoal.

03:28.260 --> 03:32.090
Ale początkowo, częściowy rodzaj zawijania naszego własnego

03:32.090 --> 03:35.740
typu i zmienia go na typ, w którym wszystkie te właściwości są

03:35.740 --> 03:36.620
opcjonalne.

03:36.620 --> 03:39.440
To jest to, co partial robi jeden z tych wbudowanych typów, z którymi

03:39.440 --> 03:40.670
Typescript statków.

03:40.670 --> 03:44.270
Więc zamienia to w typ, który jest również typem obiektu, gdzie wszystkie

03:44.270 --> 03:45.713
właściwości są opcjonalne.

03:45.713 --> 03:49.290
Dlatego możemy początkowo ustawić to na pusty obiekt

03:49.290 --> 03:53.030
i nadal dodawać wszystkie te rzeczy krok po kroku.

03:53.030 --> 03:54.880
Jedynym problemem jest to, że

03:54.880 --> 03:58.130
w końcu nie możemy tego zwrócić, ponieważ teraz jest

03:58.130 --> 04:02.130
to nadal typu partial CourseGoal, a nie typu CourseGoal.

04:02.130 --> 04:04.630
Możemy to naprawić, konwertując to do courseGoal z typecastingiem,

04:04.630 --> 04:07.480
ponieważ wiemy, że w tym momencie będziemy mieli dodane wszystkie

04:07.480 --> 04:08.990
dane.

04:08.990 --> 04:11.667
Będzie to więc prawdziwy kursGoal, a nie częściowy.

04:11.667 --> 04:13.510
I oczywiście to jest trochę zmyślone.

04:13.510 --> 04:15.500
Ale możesz mieć takie scenariusze,

04:15.500 --> 04:18.220
gdzie chcesz tymczasowo przełączyć jeden z

04:18.220 --> 04:19.650
twoich typów obiektów,

04:19.650 --> 04:23.530
jeden z twoich interfejsów, aby był tylko opcjonalny.

04:23.530 --> 04:25.540
Aby upewnić się, że wszystkie właściwości

04:25.540 --> 04:28.170
w nim mogą być opcjonalne tylko tymczasowo.

04:28.170 --> 04:31.223
A wtedy typ częściowy pozwoliłby ci to zrobić.

04:32.370 --> 04:35.920
I nigdy wbudowany typ użytkowy, który masz, jest typem

04:35.920 --> 04:40.170
tylko do odczytu, który może wszystkie być bardzo przydatny.

04:40.170 --> 04:42.623
Załóżmy, że mamy tablicę nazwisk.

04:43.460 --> 04:46.330
A w nim dostałem Maxa i Sporta.

04:46.330 --> 04:47.420
Teraz poprawnie TypeScript

04:47.420 --> 04:49.860
infekuje, że jest to tablica łańcuchów.

04:49.860 --> 04:50.960
Co możemy teraz zrobić?

04:50.960 --> 04:52.690
Możemy oczywiście wcisnąć

04:53.700 --> 04:55.400
tam Manu, a pewnie powinienem

04:55.400 --> 04:58.340
to zmienić na Anna nie sport, żeby mieć tam

04:58.340 --> 04:59.720
imię.

04:59.720 --> 05:00.553
Więc to działa.

05:00.553 --> 05:01.386
Teraz powiedzmy jednak,

05:01.386 --> 05:04.230
że chcę się upewnić, że jest to tablica zamknięta.

05:04.230 --> 05:06.260
Więcej nie możemy tu dodać.

05:06.260 --> 05:07.870
I zawsze możemy dodać więcej tutaj,

05:07.870 --> 05:11.690
ale przynajmniej chcę, aby Typescript krzyczał na mnie, jeśli spróbuję.

05:11.690 --> 05:13.730
Cóż, to jest miejsce, w którym możemy

05:13.730 --> 05:18.730
użyć typu tylko do odczytu, moglibyśmy ustawić to na tablicę łańcuchów tylko do odczytu.

05:18.930 --> 05:20.510
Dzięki temu mówimy TypeScriptowi,

05:20.510 --> 05:23.030
cóż, to co przechowujemy tutaj, to tablica łańcuchów.

05:23.030 --> 05:25.830
Ale jest to również tablica ciągów, która jest tylko do odczytu.

05:25.830 --> 05:28.210
Więc kiedy próbujemy dodać coś za pomocą

05:28.210 --> 05:31.600
push, lub jeśli próbujemy usunąć coś za pomocą pop, otrzymujemy

05:31.600 --> 05:32.760
błędy, ponieważ nie

05:32.760 --> 05:36.320
wolno nam robić tych rzeczy z tą tablicą.

05:36.320 --> 05:38.760
I nie jest to ograniczone do tablic przy okazji,

05:38.760 --> 05:41.610
możesz również użyć read only na obiekcie.

05:41.610 --> 05:43.990
Na przykład, aby wprowadzić na rynek jako

05:43.990 --> 05:46.860
tylko do odczytu, aby nie można było zmienić właściwości

05:46.860 --> 05:49.920
lub dodać nowe właściwości do tego obiektu.

05:49.920 --> 05:52.240
Więc to może być również bardzo, bardzo

05:52.240 --> 05:56.510
poręczne i dać ci więcej elastyczności lub być bardziej precyzyjnym

05:56.510 --> 05:59.490
w tym, co zamierzasz zrobić w swoim kodzie.

05:59.490 --> 06:01.380
Teraz wszystko to są tylko typy użytkowe,

06:01.380 --> 06:03.610
które istnieją tylko w świecie TypeScript.

06:03.610 --> 06:05.881
Nie są więc do niczego skompilowane.

06:05.881 --> 06:09.400
Ale podczas kompilacji dają ci dodatkową surowość lub

06:09.400 --> 06:12.410
dodatkowe kontrole lub pomijają pewne kontrole,

06:12.410 --> 06:14.800
jak to zrobiliśmy z częściowym.

06:14.800 --> 06:17.170
Teraz masz więcej niż read only i partial.

06:17.170 --> 06:19.730
I jak wspomniałem w załączniku znajdziesz dokumentację

06:19.730 --> 06:22.420
do pełnej listy tych typów użyteczności.

06:22.420 --> 06:25.580
W pewnych scenariuszach mogą się one naprawdę przydać, dlatego

06:25.580 --> 06:27.460
zdecydowanie nie chciałam ich przed

06:27.460 --> 06:28.350
Wami ukrywać.

06:28.350 --> 06:30.500
Ale zamiast tego powinieneś być ich świadomy,

06:30.500 --> 06:34.060
abyś mógł ich użyć, gdy musisz coś zablokować, lub jak w przypadku częściowego

06:34.060 --> 06:36.980
otwarcia czegokolwiek lub z wszystkimi innymi, których

06:36.980 --> 06:39.690
nie omówiłem tutaj, jeśli masz jakąś inną operację,

06:39.690 --> 06:42.570
która może zostać ulepszona za pomocą jednego z tych wbudowanych

06:42.570 --> 06:45.140
typów narzędzi.

06:45.140 --> 06:47.670
I te wszystkie typy użytkowe są ogólne,

06:47.670 --> 06:49.170
ponieważ to, co robią,

06:49.170 --> 06:52.580
to biorą jakąś inną wartość, która jest dowolnego typu

06:52.580 --> 06:54.190
i robią coś z nią.

06:54.190 --> 06:57.970
Ustawiają wszystko na opcjonalne, zamykają, nie dbając

06:57.970 --> 07:01.330
o to, czy jest to tablica lub obiekt, czy tablica

07:01.330 --> 07:04.430
ciągów, tablica liczb i tak dalej.

07:04.430 --> 07:06.000
Dlatego też są one ogólne.

07:06.000 --> 07:09.520
I razem z górnymi wbudowanymi generycznymi, które widzieliśmy wcześniej i twoimi

07:09.520 --> 07:10.790
własnymi generycznymi.

07:10.790 --> 07:13.780
To teraz mam nadzieję, że wszystko ponownie pomaga ci zrozumieć,

07:13.780 --> 07:16.793
dlaczego generics mogą być przydatne, dlaczego istnieją.
