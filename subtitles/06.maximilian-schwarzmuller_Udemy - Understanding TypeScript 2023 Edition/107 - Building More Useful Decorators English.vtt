WEBVTT

1
00:00:02.480 --> 00:00:06.780
<v Man>Now, with the knowledge about factory functions,</v>

2
00:00:06.780 --> 00:00:10.523
or factory decorators, we can do quite interesting stuff.

3
00:00:11.570 --> 00:00:16.240
We could trade a new decorator factory with template,

4
00:00:16.240 --> 00:00:17.693
for example.

5
00:00:19.400 --> 00:00:21.590
And here, I expect to get a template,

6
00:00:21.590 --> 00:00:23.780
which should be some string.

7
00:00:23.780 --> 00:00:28.780
And a hookId, which should also be a string.

8
00:00:28.870 --> 00:00:32.050
Then here, I return my anonymous function,

9
00:00:32.050 --> 00:00:34.800
which is the actual decorator, as you've learned.

10
00:00:34.800 --> 00:00:37.440
Because again, I have a decorator factory.

11
00:00:37.440 --> 00:00:40.570
And in there, I want to render some template,

12
00:00:40.570 --> 00:00:42.530
which should be some HTML code,

13
00:00:42.530 --> 00:00:46.590
into some place in the dom, where I find this hookId.

14
00:00:46.590 --> 00:00:49.160
So now we can go to index.html and add such a place

15
00:00:49.160 --> 00:00:51.250
so that we can see that this works.

16
00:00:51.250 --> 00:00:54.483
We can add a div here, with an id of app, maybe.

17
00:00:55.430 --> 00:00:59.560
And then in app.ts, instead of logger,

18
00:00:59.560 --> 00:01:01.357
I add WithTemplate.

19
00:01:02.570 --> 00:01:05.130
Let's pass an empty string as a first argument for now,

20
00:01:05.130 --> 00:01:06.810
and app as a second argument.

21
00:01:06.810 --> 00:01:09.313
So, this ID I assigned to the div here.

22
00:01:10.170 --> 00:01:12.400
And now inside of that inner function

23
00:01:12.400 --> 00:01:13.830
is our actual decorator.

24
00:01:13.830 --> 00:01:16.540
Inside of this decorator function,

25
00:01:16.540 --> 00:01:19.500
I want to reach out to the element.

26
00:01:19.500 --> 00:01:24.500
To the hook element with document.getElementById.

27
00:01:25.662 --> 00:01:29.390
For the hookId we're getting here as an argument.

28
00:01:29.390 --> 00:01:33.480
And if HookEl is a thing that exists, then

29
00:01:34.330 --> 00:01:37.960
I want to access it's innerHTML,

30
00:01:37.960 --> 00:01:39.920
and set this equal to template, let's say.

31
00:01:39.920 --> 00:01:41.440
A very simple set up, of course,

32
00:01:41.440 --> 00:01:43.640
but this should do the trick.

33
00:01:43.640 --> 00:01:45.460
Now, I'm not interested in the constructor.

34
00:01:45.460 --> 00:01:48.110
And to tell typescript that I'm not interested here,

35
00:01:48.110 --> 00:01:50.370
I can add an underscore as a name,

36
00:01:50.370 --> 00:01:52.007
which basically signals the typescript,

37
00:01:52.007 --> 00:01:54.580
"Yeah, I know I get this argument, but I don't need it.

38
00:01:54.580 --> 00:01:56.170
I have to specify it though.

39
00:01:56.170 --> 00:01:58.920
So, with this underscore, I tell you that I'm aware of it,

40
00:01:58.920 --> 00:02:00.850
but that I won't use it."

41
00:02:00.850 --> 00:02:02.300
Because, all I want to do for now,

42
00:02:02.300 --> 00:02:04.033
is I want to render this year.

43
00:02:05.580 --> 00:02:07.750
So now when we add WithTemplate here,

44
00:02:07.750 --> 00:02:10.400
here we could add a h1 tag,

45
00:02:10.400 --> 00:02:14.570
My Person Object like this.

46
00:02:14.570 --> 00:02:15.653
Also, close it.

47
00:02:19.130 --> 00:02:22.380
And if we now saved that, it compiles without errors.

48
00:02:22.380 --> 00:02:26.350
And indeed, here you see this was rendered on the screen.

49
00:02:26.350 --> 00:02:29.720
And this hopefully shows you the power

50
00:02:29.720 --> 00:02:31.720
you have with decorators.

51
00:02:31.720 --> 00:02:34.780
You can build really advanced decorators like this one,

52
00:02:34.780 --> 00:02:38.500
which all of a sudden does some magic behind the scenes.

53
00:02:38.500 --> 00:02:41.260
And that is what I mean with metaprogramming.

54
00:02:41.260 --> 00:02:43.930
We add some logic here, which we could expose

55
00:02:43.930 --> 00:02:46.190
if this would be a third-party library

56
00:02:46.190 --> 00:02:47.890
we share with other users.

57
00:02:47.890 --> 00:02:50.350
We could expose this as part of the library,

58
00:02:50.350 --> 00:02:52.630
and anyone who uses our library

59
00:02:52.630 --> 00:02:54.910
can import this decorator function

60
00:02:54.910 --> 00:02:57.408
and add it to a class to then magically

61
00:02:57.408 --> 00:03:00.500
render some content all of a sudden.

62
00:03:00.500 --> 00:03:02.980
And of course, you are, you're not even limited to do that.

63
00:03:02.980 --> 00:03:05.340
If you would want to output the name which is part of the

64
00:03:05.340 --> 00:03:07.850
class when it gets instantiated,

65
00:03:07.850 --> 00:03:09.570
you can do that as well.

66
00:03:09.570 --> 00:03:12.427
We get our constructor: Function here after all.

67
00:03:14.190 --> 00:03:16.010
Now what we can do with that

68
00:03:16.010 --> 00:03:18.660
is we can create a new person here,

69
00:03:18.660 --> 00:03:20.380
by calling our constructor,

70
00:03:20.380 --> 00:03:23.820
because that is our constructor: Function here, after all.

71
00:03:23.820 --> 00:03:26.570
Let me convert this to any, so the typescript allows this

72
00:03:26.570 --> 00:03:29.240
and doesn't think it's a normal function.

73
00:03:29.240 --> 00:03:31.880
And then we could go to our hook element,

74
00:03:31.880 --> 00:03:35.160
and query for a h1 tag, which you, of course in practice,

75
00:03:35.160 --> 00:03:36.070
will not always have.

76
00:03:36.070 --> 00:03:37.330
But for demo purposes,

77
00:03:37.330 --> 00:03:39.820
I assume we will always have one here.

78
00:03:39.820 --> 00:03:42.330
Whoops, and I should always close the h1 tag down there

79
00:03:42.330 --> 00:03:43.850
now that I see it.

80
00:03:43.850 --> 00:03:46.750
And then here, with an exclamation mark,

81
00:03:46.750 --> 00:03:49.900
again assuming that we always find an h1 element,

82
00:03:49.900 --> 00:03:53.660
we can set a textContent equal to p.name.

83
00:03:53.660 --> 00:03:56.010
And If I do that and save this,

84
00:03:56.010 --> 00:03:59.400
now I output the name, which is part of the object

85
00:03:59.400 --> 00:04:01.540
here in the template.

86
00:04:01.540 --> 00:04:03.420
So this is something you can do, and of course

87
00:04:03.420 --> 00:04:06.010
you can write way more elaborate decorators

88
00:04:06.010 --> 00:04:07.840
than I'm doing it here.

89
00:04:07.840 --> 00:04:09.550
Consider Angular,

90
00:04:09.550 --> 00:04:12.270
a very popular framework that uses typescript.

91
00:04:12.270 --> 00:04:15.740
They use decorators, like this component decorator,

92
00:04:15.740 --> 00:04:18.420
to allow you to pass in an object

93
00:04:18.420 --> 00:04:21.020
where you specify things like the template

94
00:04:21.020 --> 00:04:21.930
for discomponent.

95
00:04:21.930 --> 00:04:23.950
And the selector in the dom

96
00:04:23.950 --> 00:04:25.760
where this template should be rendered.

97
00:04:25.760 --> 00:04:28.170
This is relatively close to what we defined here.

98
00:04:28.170 --> 00:04:31.230
A template, and then a place where it should be rendered.

99
00:04:31.230 --> 00:04:33.760
Now needless to say, the Angular decorators

100
00:04:33.760 --> 00:04:36.550
are of course way more advanced and elaborate

101
00:04:36.550 --> 00:04:38.740
than our basic decorator here.

102
00:04:38.740 --> 00:04:41.660
Nonetheless, the core idea is the same.

103
00:04:41.660 --> 00:04:43.900
Angular gives you the decorators here,

104
00:04:43.900 --> 00:04:46.700
so that you can specify some HTML code,

105
00:04:46.700 --> 00:04:49.470
which can be connected to your component class

106
00:04:49.470 --> 00:04:51.760
that will be rendered to the dom

107
00:04:51.760 --> 00:04:53.830
when this component gets rendered.

108
00:04:53.830 --> 00:04:55.850
Now in case you don't know how Angular works,

109
00:04:55.850 --> 00:04:57.060
that's not a problem.

110
00:04:57.060 --> 00:04:58.700
You just have to understand here,

111
00:04:58.700 --> 00:05:01.300
that it works with classes and decorators,

112
00:05:01.300 --> 00:05:03.600
and then it does basically what we did here.

113
00:05:03.600 --> 00:05:06.400
So that's one other thing you can do with decorators,

114
00:05:06.400 --> 00:05:09.220
or as specifically here, with decorator factories.

115
00:05:09.220 --> 00:05:12.210
Because that allows us to pass in that extra conflict

116
00:05:12.210 --> 00:05:13.610
which we need here.

117
00:05:13.610 --> 00:05:16.590
And that's also what I meant with metaprogramming.

118
00:05:16.590 --> 00:05:21.130
We're creating things, we're creating decorator functions,

119
00:05:21.130 --> 00:05:24.840
which you might say have some impact on the end user.

120
00:05:24.840 --> 00:05:27.510
In the NP dual render or something on the screen here.

121
00:05:27.510 --> 00:05:29.090
But we do that with a tool

122
00:05:29.090 --> 00:05:31.370
which we expose to other developers.

123
00:05:31.370 --> 00:05:33.970
Because this decorator is such a tool,

124
00:05:33.970 --> 00:05:36.000
which other developers have to use

125
00:05:36.000 --> 00:05:38.580
by adding it to a class in this example.

126
00:05:38.580 --> 00:05:40.300
Otherwise, this would do nothing.

127
00:05:40.300 --> 00:05:43.490
So we provide extra utilities to developers,

128
00:05:43.490 --> 00:05:46.590
which the other developers can use to, for example,

129
00:05:46.590 --> 00:05:49.050
conveniently render something on the screen

130
00:05:49.050 --> 00:05:50.590
for a giving class.

131
00:05:50.590 --> 00:05:52.940
That's the same thing Angular does here,

132
00:05:52.940 --> 00:05:54.220
in a more advanced way,

133
00:05:54.220 --> 00:05:57.363
and it is something that graders are perfect for.

