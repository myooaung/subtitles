WEBVTT

00:02.350 --> 00:04.720
-I to jest to dla modułów.

00:04.720 --> 00:08.850
Używanie modułów jest bardzo użyteczną i ważną cechą, ponieważ pozwala

00:08.850 --> 00:11.130
na pisanie bardziej łatwego w utrzymaniu

00:11.130 --> 00:14.550
i zarządzaniu kodu. Posiadanie wszystkiego w jednym

00:14.550 --> 00:16.360
pliku to bałagan i naprawdę nie jest

00:16.360 --> 00:19.360
to opcja dla niczego poza naprawdę małymi projektami.

00:19.360 --> 00:22.350
Używanie kiedykolwiek przestrzeni nazw lub modułów ES

00:22.350 --> 00:24.710
jest tam dla o wiele lepszej alternatywy.

00:24.710 --> 00:27.620
Ponieważ upewnia się, że każdy plik jest stosunkowo

00:27.620 --> 00:30.780
mały, a zatem pozostaje łatwy do zarządzania.

00:30.780 --> 00:33.470
A i tak w końcu kończysz z tą całą, wielką

00:33.470 --> 00:36.690
aplikacją, którą chcesz mieć na końcu.

00:36.690 --> 00:38.580
Teraz, jeśli chodzi o te dwa podejścia,

00:38.580 --> 00:42.883
Przestrzenie nazw i moduły ES, wyraźną rekomendacją są moduły ES,

00:42.883 --> 00:46.520
ponieważ otrzymujesz to dodatkowe bezpieczeństwo typu

00:46.520 --> 00:48.910
i zapewniasz, że każdy plik, musi wyraźnie

00:48.910 --> 00:52.210
określić, czego chce.

00:52.210 --> 00:54.270
Z przestrzeniami nazw wystarczyło,

00:54.270 --> 00:56.280
że jeden plik zaimportował coś, co

00:56.280 --> 00:58.350
inny plik również potrzebuje.

00:58.350 --> 00:59.970
Wady tego, jeśli ten jeden

00:59.970 --> 01:02.230
plik, który zaimportował rzecz jest

01:02.230 --> 01:05.640
usunięty, że inny plik również łamie, bez zauważenia.

01:05.640 --> 01:08.774
Przynajmniej bez zauważenia przez ciebie, zanim uruchomisz kod.

01:08.774 --> 01:11.340
Dlatego też należy korzystać z modułów ES.

01:11.340 --> 01:14.250
Użyj przestrzeni nazw w mniejszych projektach,

01:14.250 --> 01:18.100
lub jeśli z jakiegoś powodu nie możesz użyć modułów ES, I nie możesz

01:18.100 --> 01:19.970
użyć innego bundlera, który przetłumaczyłby

01:19.970 --> 01:24.290
takie moduły. Do kodu non module, który wszystkie

01:24.290 --> 01:26.360
prace i wszystkie przeglądarki.

01:26.360 --> 01:30.070
Ale poza tym używaj naprawdę modułów, modułów ES.

01:30.070 --> 01:31.748
I to, co właśnie powiedziałem, jest ważne.

01:31.748 --> 01:34.828
Te moduły tutaj, w tej chwili sposób, w jaki ich używamy,

01:34.828 --> 01:37.620
działają tylko w nowoczesnych przeglądarkach.

01:37.620 --> 01:39.670
Ponieważ polegamy na przeglądarce, aby w zasadzie

01:39.670 --> 01:42.640
zaimportować wszystkie te pliki. Prawda?

01:42.640 --> 01:44.675
Teraz oczywiście chcemy budować aplikacje

01:44.675 --> 01:48.940
z typescript, które również działają we wszystkich przeglądarkach.

01:48.940 --> 01:52.090
Internet Explorer 9, na przykład.

01:52.090 --> 01:54.130
Tam nie byłoby to popierane.

01:54.130 --> 01:55.730
Ta składnia, nie jest tam obsługiwana.

01:55.730 --> 01:57.410
Tak więc, aplikacja nie byłaby tam uruchamiana.

01:57.410 --> 01:59.160
Możemy też używać kilku innych funkcji,

01:59.160 --> 02:01.280
które nie są tam obsługiwane, ale głównie to tutaj

02:01.280 --> 02:03.840
nie jest obsługiwane we wszystkich przeglądarkach.

02:03.840 --> 02:06.250
Tak więc, aby sprawić, że będzie to działało we wszystkich przeglądarkach,

02:06.250 --> 02:09.283
możemy użyć narzędzia do wiązania. Do tego celu możemy wykorzystać na przykład Webpack.

02:09.283 --> 02:12.431
Aby spiąć to razem w jeden plik JavaScript.

02:12.431 --> 02:15.810
Tak, że podczas rozwoju mamy to multi file, silne doświadczenie

02:15.810 --> 02:19.060
typowania, ale kiedy wysyłamy nasz kod, mamy w rzeczywistości

02:19.060 --> 02:21.310
tylko jeden plik.

02:21.310 --> 02:23.600
Zaletą wysyłania jednego pliku zamiast

02:23.600 --> 02:25.676
tych wszystkich, które mamy tutaj,

02:25.676 --> 02:28.177
jest to, że zapewniamy, że przeglądarka

02:28.177 --> 02:31.181
nie musi pobierać tak wielu plików.

02:31.181 --> 02:33.630
Ponieważ każdy plik, który trzeba pobrać, to dodatkowa

02:33.630 --> 02:37.010
podróż w obie strony. W zakładce sieci w narzędziach dev, możesz

02:37.010 --> 02:38.510
faktycznie to zobaczyć.

02:38.510 --> 02:40.650
Obszar, w którym widzisz ten wykres wodospadu,

02:40.650 --> 02:42.230
i widzisz to małe białe pole

02:42.230 --> 02:44.520
na początku każdego bloku.

02:44.520 --> 02:46.380
Jest to zasadniczo czas konfiguracji, który

02:46.380 --> 02:48.506
jest potrzebny do skonfigurowania żądania HDP.

02:48.506 --> 02:51.807
Tak więc, nawet jeśli pliki, które pobieramy są bardzo małe, jak

02:51.807 --> 02:54.700
możesz powiedzieć, to nadal zajmuje to trochę czasu, ponieważ

02:54.700 --> 02:56.900
wszystkie nadmiarowe dodatkowe ustawienia,

02:56.900 --> 02:59.100
dla każdego żądania HDP.

02:59.100 --> 03:02.330
Więc robienie mniejszej ilości zapytań jest i tak dobrym pomysłem,

03:02.330 --> 03:04.640
niezależnie od obsługi przeglądarki.

03:04.640 --> 03:08.370
Tak więc, z tych dwóch powodów, wsparcia przeglądarki i mniejszej ilości

03:08.370 --> 03:11.000
żądań, przyjrzymy się bundlingowi, z Webpackiem, w

03:11.000 --> 03:12.453
następnym odcinku kursu.
