WEBVTT

1
00:00:02.090 --> 00:00:04.730
<v Instructor>Now before we dive into any features though,</v>

2
00:00:04.730 --> 00:00:07.002
attached to this lecture you find a link to this page.

3
00:00:07.002 --> 00:00:11.350
This page basically lists all more or less

4
00:00:11.350 --> 00:00:13.610
modern JavaScript features,

5
00:00:13.610 --> 00:00:16.770
which browsers support these features

6
00:00:16.770 --> 00:00:19.700
and also which compilers support these features.

7
00:00:19.700 --> 00:00:23.150
And there you also find TypeScript,

8
00:00:23.150 --> 00:00:25.310
TypeScript combined with core-js,

9
00:00:25.310 --> 00:00:27.210
which is a polyfill provider.

10
00:00:27.210 --> 00:00:28.820
But generally this describes

11
00:00:28.820 --> 00:00:32.070
what TypeScript is able to compile.

12
00:00:32.070 --> 00:00:34.110
Now you can always use this resource

13
00:00:34.110 --> 00:00:35.990
if you're looking for a specific feature

14
00:00:35.990 --> 00:00:37.960
like, let's say, the const keyword,

15
00:00:37.960 --> 00:00:40.860
Where you want to know if TypeScript works with that or not.

16
00:00:40.860 --> 00:00:43.340
Then you can see how it works with that,

17
00:00:43.340 --> 00:00:46.580
and what restrictions are, which browsers support this.

18
00:00:46.580 --> 00:00:48.250
This also, by the way, gives you a hint

19
00:00:48.250 --> 00:00:51.090
regarding which browsers you might want to target,

20
00:00:51.090 --> 00:00:53.967
regarding the TypeScript target, and so on.

21
00:00:53.967 --> 00:00:55.260
So, this is a great resource

22
00:00:55.260 --> 00:00:58.600
which allows you to switch between different iterations

23
00:00:58.600 --> 00:01:01.940
of JavaScript, and the features each iteration introduced,

24
00:01:01.940 --> 00:01:04.220
and how these features are supported.

25
00:01:04.220 --> 00:01:06.140
So definitely use this as a resource

26
00:01:06.140 --> 00:01:08.800
to find out what you can use, what you can compile,

27
00:01:08.800 --> 00:01:11.060
and which targets you might need to set.

28
00:01:11.060 --> 00:01:14.060
And with that, let's start with one of the most important

29
00:01:14.060 --> 00:01:17.030
and obvious, and often-used introductions,

30
00:01:17.030 --> 00:01:19.260
Next-Gen JavaScript added.

31
00:01:19.260 --> 00:01:21.780
By the way, with Next-Gen JavaScript,

32
00:01:21.780 --> 00:01:24.700
I mean, ES6 or more recent.

33
00:01:24.700 --> 00:01:27.860
And that's let or const, what I'm talking about.

34
00:01:27.860 --> 00:01:32.750
It allows you to define constants or variables.

35
00:01:32.750 --> 00:01:35.350
The difference is that constants,

36
00:01:35.350 --> 00:01:38.730
so variables define with the const keyword

37
00:01:38.730 --> 00:01:39.910
cannot be changed.

38
00:01:39.910 --> 00:01:42.410
If you would try to assign a new value here

39
00:01:42.410 --> 00:01:44.270
even if it has the correct type,

40
00:01:44.270 --> 00:01:47.220
you'll get an error because it's a constant.

41
00:01:47.220 --> 00:01:48.280
Now, this is by the way,

42
00:01:48.280 --> 00:01:50.200
an error that is formed by TypeScript.

43
00:01:50.200 --> 00:01:53.340
In Vanilla JavaScript, you would get an error by the browser

44
00:01:53.340 --> 00:01:55.100
when you run your code here,

45
00:01:55.100 --> 00:01:57.280
and that's the idea behind TypeScript, as you learned,

46
00:01:57.280 --> 00:02:00.410
we get an error already whilst you are writing the code,

47
00:02:00.410 --> 00:02:02.990
because that, of course, is better for us as a developer.

48
00:02:02.990 --> 00:02:04.930
It allows us to fix this code earlier

49
00:02:04.930 --> 00:02:07.820
before testing it in the console.

50
00:02:07.820 --> 00:02:11.330
So therefore here, if we remove that

51
00:02:11.330 --> 00:02:12.830
or comment out this line,

52
00:02:12.830 --> 00:02:14.400
now it recompiles and, therefore,

53
00:02:14.400 --> 00:02:17.130
we get no error in the browser, as well.

54
00:02:17.130 --> 00:02:20.860
So, that's const. Let is a variable which can be changed,

55
00:02:20.860 --> 00:02:23.620
and therefore, of course, it's similar to var.

56
00:02:23.620 --> 00:02:27.260
Var also still exists because JavaScript works such that

57
00:02:27.260 --> 00:02:29.550
features aren't suddenly taken away,

58
00:02:29.550 --> 00:02:33.460
because then older browsers and their scripts might break.

59
00:02:33.460 --> 00:02:35.160
But you shouldn't use var anymore.

60
00:02:35.160 --> 00:02:37.860
And why should you not use var anymore?

61
00:02:37.860 --> 00:02:39.670
I mean, it makes sense that we have const,

62
00:02:39.670 --> 00:02:42.520
because that really adds a new feature, constants.

63
00:02:42.520 --> 00:02:43.380
But why let?

64
00:02:43.380 --> 00:02:45.380
Why did they introduce a new keyword here?

65
00:02:45.380 --> 00:02:47.223
Why didn't they stick to var?

66
00:02:48.280 --> 00:02:51.460
Let and const have one important difference to var.

67
00:02:51.460 --> 00:02:53.300
Well, the obvious difference for const

68
00:02:53.300 --> 00:02:55.240
is that the value can't be changed,

69
00:02:55.240 --> 00:02:57.040
but for let, we also get a difference.

70
00:02:57.040 --> 00:03:00.930
And that's the scope in which this variable is available.

71
00:03:00.930 --> 00:03:04.363
Now you should know this concept of scopes in JavaScript.

72
00:03:05.609 --> 00:03:09.260
And with var, you have a global and a function scope.

73
00:03:09.260 --> 00:03:10.700
That means that variables

74
00:03:10.700 --> 00:03:12.550
that you define outside of functions

75
00:03:12.550 --> 00:03:15.340
are available everywhere in your scripts.

76
00:03:15.340 --> 00:03:17.410
Variables defined inside functions

77
00:03:17.410 --> 00:03:19.370
are only available in that function.

78
00:03:19.370 --> 00:03:22.610
For example, here. If I had a function add,

79
00:03:22.610 --> 00:03:27.610
and there might get two numbers, a and b.

80
00:03:27.670 --> 00:03:29.750
Then we can add a variable in there

81
00:03:29.750 --> 00:03:32.280
with var result, let's say,

82
00:03:32.280 --> 00:03:34.730
and we set result = a + b then,

83
00:03:34.730 --> 00:03:36.230
and then we return result,

84
00:03:36.230 --> 00:03:38.430
and of course, we could have written this in a shorter way

85
00:03:38.430 --> 00:03:40.570
but I want to show what var does.

86
00:03:40.570 --> 00:03:41.860
And this would be fine.

87
00:03:41.860 --> 00:03:43.012
And the result would only be available

88
00:03:43.012 --> 00:03:44.188
inside of this function.

89
00:03:44.188 --> 00:03:47.723
If I try to console log result here

90
00:03:47.723 --> 00:03:49.470
that would fail because

91
00:03:49.470 --> 00:03:52.190
it's only available in the scope of this function.

92
00:03:52.190 --> 00:03:53.970
If I define it outside of var harbor

93
00:03:53.970 --> 00:03:56.610
everything works because now it's available globally,

94
00:03:56.610 --> 00:03:58.180
therefore here I can access it.

95
00:03:58.180 --> 00:04:00.220
And also, the way JavaScript works,

96
00:04:00.220 --> 00:04:03.580
you can access variables on a higher level.

97
00:04:03.580 --> 00:04:05.210
So, inside of a function

98
00:04:05.210 --> 00:04:08.260
you can work with variables scope to this function,

99
00:04:08.260 --> 00:04:11.100
but all the variables having a higher scope,

100
00:04:11.100 --> 00:04:12.563
like the global scope here.

101
00:04:13.580 --> 00:04:14.980
So, that's var.

102
00:04:14.980 --> 00:04:19.180
Now for let, the behavior is generally the same.

103
00:04:19.180 --> 00:04:21.580
This works and this works.

104
00:04:21.580 --> 00:04:23.800
So it's generally the same for let.

105
00:04:23.800 --> 00:04:27.180
But an important difference is that for var,

106
00:04:27.180 --> 00:04:30.860
you really only have global and functions scope.

107
00:04:30.860 --> 00:04:32.460
What about if statements?

108
00:04:32.460 --> 00:04:36.720
If we check age &gt; 20 here,

109
00:04:36.720 --> 00:04:38.889
and then in there we create a variable,

110
00:04:38.889 --> 00:04:41.190
isOld, and set this to true,

111
00:04:41.190 --> 00:04:44.500
then if a console log isOld here

112
00:04:44.500 --> 00:04:46.270
we get an error in TypeScript,

113
00:04:46.270 --> 00:04:50.090
but actually we'd not get one in JavaScript.

114
00:04:50.090 --> 00:04:53.620
This code here, if you grab it just to see that it works,

115
00:04:53.620 --> 00:04:56.280
and move to the JavaScript developer tools

116
00:04:56.280 --> 00:04:57.190
in there in the console,

117
00:04:57.190 --> 00:04:59.120
and we paste it in there and hit enter,

118
00:04:59.120 --> 00:05:00.970
you see true is getting printed here.

119
00:05:01.830 --> 00:05:02.960
And indeed, if you try to access

120
00:05:02.960 --> 00:05:05.040
isOld, you get true.

121
00:05:05.040 --> 00:05:08.380
So, this isOld variable, is registered globally,

122
00:05:08.380 --> 00:05:10.530
and not just inside of the if statement.

123
00:05:10.530 --> 00:05:11.700
Because with var,

124
00:05:11.700 --> 00:05:13.080
JavaScript doesn't know

125
00:05:13.080 --> 00:05:15.860
any other scopes than functions and global.

126
00:05:15.860 --> 00:05:17.400
And that changes with let.

127
00:05:17.400 --> 00:05:19.690
Now, as I said, TypeScript complains nonetheless,

128
00:05:19.690 --> 00:05:21.600
because this is not good code to write,

129
00:05:21.600 --> 00:05:23.170
but technically, it would work.

130
00:05:23.170 --> 00:05:25.100
With let, that changes.

131
00:05:25.100 --> 00:05:26.350
Now with let,

132
00:05:26.350 --> 00:05:29.880
this really is only available inside of these curly braces.

133
00:05:29.880 --> 00:05:32.300
Because let and const introduced a new concept

134
00:05:32.300 --> 00:05:33.540
called block scope,

135
00:05:33.540 --> 00:05:36.550
which means a variable or constant is always available

136
00:05:36.550 --> 00:05:40.420
in the block in which you define it or in any lower blocks.

137
00:05:40.420 --> 00:05:43.060
And a block is basically always a snippet

138
00:05:43.060 --> 00:05:44.900
surrounded with curly braces,

139
00:05:44.900 --> 00:05:46.710
as you have it for an if statement,

140
00:05:46.710 --> 00:05:48.760
in a for loop, in a function,

141
00:05:48.760 --> 00:05:50.590
or even, that's possible,

142
00:05:50.590 --> 00:05:52.670
if you just add curly braces like this.

143
00:05:52.670 --> 00:05:54.230
Any variable defined in here

144
00:05:54.230 --> 00:05:56.760
would only be available in that block.

145
00:05:56.760 --> 00:05:57.700
And that's a good thing

146
00:05:57.700 --> 00:06:00.000
because it forces you to write cleaner code

147
00:06:00.000 --> 00:06:02.470
and avoid situations like this.

148
00:06:02.470 --> 00:06:03.640
So just to offer proof

149
00:06:03.640 --> 00:06:05.530
that there is a difference in the browser,

150
00:06:05.530 --> 00:06:09.750
if I copy this code using let, and I reload my page here,

151
00:06:09.750 --> 00:06:12.440
and now I enter this here, you see I get an error

152
00:06:13.559 --> 00:06:14.706
that isOld is not defined. We didn't get an error before.

153
00:06:14.706 --> 00:06:19.706
Indeed, if I tried to output isOld, I get that error again.

154
00:06:20.070 --> 00:06:21.060
So that's the difference.

155
00:06:21.060 --> 00:06:23.370
And therefore, let and const is better,

156
00:06:23.370 --> 00:06:25.740
not just because we get this constant feature,

157
00:06:25.740 --> 00:06:29.150
but also because we are forced to write cleaner code.

158
00:06:29.150 --> 00:06:30.130
So let me comment this out

159
00:06:30.130 --> 00:06:31.230
to make it work again.

