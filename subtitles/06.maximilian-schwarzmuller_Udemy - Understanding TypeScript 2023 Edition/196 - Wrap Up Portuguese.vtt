WEBVTT

00:02.320 --> 00:04.290
Palestrante: Então é tudo para este módulo.

00:04.290 --> 00:05.660
Você aprendeu como usar

00:05.660 --> 00:08.480
o typescript no aplicativo de nó expresso, que você

00:08.480 --> 00:11.940
pode instalar tipos extras para o expresso e para o nó, por exemplo,

00:11.940 --> 00:13.230
para obter um ótimo suporte

00:13.230 --> 00:16.320
de typescript em seus arquivos.

00:16.320 --> 00:18.570
Que você escreva o pedido como você

00:18.570 --> 00:19.990
sempre o faria.

00:19.990 --> 00:21.790
Mas que, por exemplo, sua sintaxe de

00:21.790 --> 00:23.720
importação e exportação é diferente e

00:23.720 --> 00:26.120
que você pode, naturalmente, usar tipos, e também

00:26.120 --> 00:29.300
qualquer outro recurso de digitação que você aprenda.

00:29.300 --> 00:31.080
Você poderia usar interfaces,

00:31.080 --> 00:33.080
poderia usar decoradores, poderia

00:33.080 --> 00:35.480
usar eNoms e QPUlls e tudo o que é exclusivo

00:35.480 --> 00:37.840
datilografar.

00:37.840 --> 00:39.310
Tudo isso funciona aqui, porque

00:39.310 --> 00:42.650
estamos escrevendo uma aplicação de digitação regular aqui

00:42.650 --> 00:46.070
e ela é compilada com o compilador de digitação normal para o código

00:46.070 --> 00:48.050
Javascript regular.

00:48.050 --> 00:52.750
Código Javascript que depois é executado com o nó JS.

00:52.750 --> 00:54.450
Agora, se você quiser ter mais exemplos

00:54.450 --> 00:57.720
de como trabalhar com typescript e node express, você pode, naturalmente,

00:57.720 --> 00:58.910
por exemplo, simplesmente

00:58.910 --> 01:01.210
procurar no Google por node express typescript para

01:01.210 --> 01:02.840
encontrar mais exemplos.

01:02.840 --> 01:04.600
Mas eu também posso recomendar

01:04.600 --> 01:06.980
fortemente que você verifique o NestJS.

01:06.980 --> 01:10.390
É um nó. A estrutura js que abraça o datilografia

01:10.390 --> 01:13.270
enquanto você pode fazer o trabalho expresso de nós com

01:13.270 --> 01:15.310
datilografia, como você viu em todo este

01:15.310 --> 01:18.010
módulo, esta é uma estrutura que lhe dá projetos, projetos

01:18.010 --> 01:21.740
de nós, com suporte a datilografia fora da caixa.

01:21.740 --> 01:24.490
E abrange todas estas características tipográficas

01:24.490 --> 01:26.960
como decoradores e assim por diante.

01:26.960 --> 01:30.910
Com o NestJS você pode construir aplicações web de nó, API's de repouso,

01:30.910 --> 01:34.390
mas também aplicações onde você renderiza visualizações

01:34.390 --> 01:36.440
ou APIs de gráficos.

01:36.440 --> 01:38.930
Você pode construir tudo isso com nó. js, mas também com

01:38.930 --> 01:41.110
datilografia e este projeto

01:41.110 --> 01:43.380
utiliza muito recursos como decoradores,

01:43.380 --> 01:46.950
interfaces e assim por diante.

01:46.950 --> 01:50.200
Portanto, verifique definitivamente o NestJS se você quer

01:50.200 --> 01:53.580
construir uma aplicação web de serviço com nó e digitação.

01:53.580 --> 01:56.660
É uma ótima estrutura, realmente divertido de usar e usa todas

01:56.660 --> 02:00.350
as características legais que o datilografia tem a oferecer.

02:00.350 --> 02:03.630
Portanto, nenhuma instalação de tipo personalizado, trabalho ao redor

02:03.630 --> 02:05.310
ou algo parecido é necessário.

02:05.310 --> 02:08.913
Aqui você obtém um ótimo suporte de datilografia fora da caixa.
