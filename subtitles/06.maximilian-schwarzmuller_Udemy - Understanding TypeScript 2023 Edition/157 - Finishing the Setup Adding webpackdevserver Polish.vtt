WEBVTT

00:02.160 --> 00:05.070
-: W tej chwili nie używam serwera webpack-dev.

00:05.070 --> 00:07.680
Teraz jednak używanie go jest bardzo proste.

00:07.680 --> 00:10.030
Musimy tylko do paczki. plik json i teraz

00:10.030 --> 00:12.430
tam zamiast "lite-server"

00:12.430 --> 00:17.380
użyjmy "webpack-dev-server", tak jak to.

00:17.380 --> 00:20.020
A teraz uruchommy npm start jeszcze raz.

00:20.020 --> 00:21.560
Teraz zobaczysz, że to uruchamia

00:21.560 --> 00:23.610
serwer działający na lokalnym hoście

00:23.610 --> 00:25.780
8080, i uruchamia przepływ pracy

00:25.780 --> 00:28.330
budowania webpacka.

00:28.330 --> 00:30.060
Więc teraz jeśli odwiedzimy lokalny

00:30.060 --> 00:32.020
host 8080 zobaczymy tam nasz projekt.

00:32.020 --> 00:33.860
Interesującą rzeczą jest teraz,

00:33.860 --> 00:35.510
jeśli zmienimy coś w kodzie,

00:35.510 --> 00:38.520
na przykład, jeśli dostosujesz log konsoli ERA tutaj,

00:38.520 --> 00:41.200
I jest zapisany, a następnie oglądasz dół tutaj,

00:41.200 --> 00:43.160
widzisz, że rekompiluje.

00:43.160 --> 00:46.450
Jednak po ponownym załadowaniu nie widać tutaj logu A także

00:46.450 --> 00:47.860
w zakładce źródeł, w zakładce

00:47.860 --> 00:49.130
źródeł webpack, jeśli przejdziesz

00:49.130 --> 00:51.920
do app. ts, nie widać tu loga.

00:51.920 --> 00:54.820
Więc faktycznie nie załadował poprawnego kodu.

00:54.820 --> 00:58.790
Staje się to wyraźniejsze, jeśli usunę ten pakiet. plik js tutaj.

00:58.790 --> 01:01.513
Jeśli teraz ponownie uruchomię ten proces npm

01:02.630 --> 01:04.750
start, zobaczysz, że nadal działa,

01:04.750 --> 01:08.090
a przy okazji nie dziw się, że folder dist pozostaje teraz

01:08.090 --> 01:10.240
pusty, w trybie serwera webpack-dev

01:10.240 --> 01:13.020
bundle jest generowany tylko w pamięci, więc jest

01:13.020 --> 01:15.840
tam i jest ładowany przez serwer dev, ale nie jest

01:15.840 --> 01:18.490
faktycznie zapisywany do dist.

01:18.490 --> 01:20.270
Ale zobaczysz, że jeśli przeładujesz,

01:20.270 --> 01:22.180
ta strona teraz również się zawiesza.

01:22.180 --> 01:24.050
Teraz powiedziałem, że plik będzie

01:24.050 --> 01:27.080
tam, ale nie wygląda na to, że tam jest, prawda?

01:27.080 --> 01:29.120
Teraz brakuje go na dist jak wspomniałem, a oczywiście

01:29.120 --> 01:35.130
importujemy z dist/bundle. js i indeks.

01:35.130 --> 01:35.130
html,

01:35.130 --> 01:36.810
ale rzeczywiście możesz mi wierzyć, że jest generowany w pamięci.

01:36.810 --> 01:38.450
Problemem jest po prostu to,

01:38.450 --> 01:41.640
że w tej chwili wszystko jest źle podłączone.

01:41.640 --> 01:45.330
Aby to podrasować musimy przejść do webpacka. konfig. js i tam, w output,

01:45.330 --> 01:50.330
faktycznie dodać klucz publicPath i ustawić

01:50.350 --> 01:53.647
to na "dist. Jeśli teraz zapiszesz to i ponownie uruchomisz, teraz

01:56.250 --> 01:59.120
widzisz, że przeładowuje się i teraz widzisz

01:59.120 --> 02:00.670
"Cześć" tutaj.

02:00.670 --> 02:02.400
W zakładce źródła teraz

02:02.400 --> 02:05.320
widać tam również to poprawne wyjście.

02:05.320 --> 02:06.580
Jeśli przejdziesz do folderu

02:06.580 --> 02:07.860
dot, source app. ts widzisz wypowiedź w dzienniku konsoli.

02:07.860 --> 02:11.270
I jeśli teraz przejdę do aplikacji. ts i usuń to, odbudowuje się i teraz nie ma tam

02:11.270 --> 02:13.893
oświadczenia logu konsoli.

02:15.220 --> 02:18.460
Jest to tylko dodatkowa konfiguracja, która jest

02:18.460 --> 02:20.410
potrzebna, aby serwer webpack-dev

02:20.410 --> 02:22.970
naprawdę zrozumiał, gdzie wyjście jest

02:22.970 --> 02:26.520
zapisane i gdzie jest względem indeksu. plik html.

02:26.520 --> 02:29.910
Ponieważ domyślnie serwer

02:29.910 --> 02:32.180
webpack-dev serwuje indeks. plik html, znajduje w tym samym folderze, w którym uruchamiasz

02:32.180 --> 02:34.030
ten skrypt tutaj.

02:34.030 --> 02:37.550
Co jest poprawne, ale wtedy nie wykonuje poprawnie

02:37.550 --> 02:40.520
połączenia do folderu dist, dlatego musimy

02:40.520 --> 02:42.030
poinformować serwer webpack-dev

02:42.030 --> 02:44.970
za pomocą publicPath, gdzie znaleźć nasze

02:44.970 --> 02:48.040
assesty, a więc nasz bundle. plik js w tym przypadku.

02:48.040 --> 02:50.960
Teraz, jeśli opuścimy serwer deweloperski,

02:50.960 --> 02:52.370
jest jeszcze jedno ustawienie, które chcę

02:52.370 --> 02:53.790
zastosować w trybie deweloperskim.

02:53.790 --> 02:56.080
I zrobię to na samej górze wyeksportowanego obiektu.

02:56.080 --> 02:59.180
Ustawię tryb na "rozwój". To w końcu powie webpackowi, że tutaj budujemy dla rozwoju

02:59.180 --> 03:01.800
i że zrobi mniej optymalizacji, aby poprawić

03:01.800 --> 03:03.550
nasze doświadczenie rozwoju,

03:03.550 --> 03:05.590
sprawić, że debugowanie będzie jeszcze

03:05.590 --> 03:09.450
łatwiejsze i dać nam bardziej znaczące komunikaty o błędach, na

03:09.450 --> 03:11.420
przykład.

03:11.420 --> 03:12.950
Więc w rozwoju też

03:12.950 --> 03:16.420
na pewno chcemy dodać tutaj ten klucz.

03:16.420 --> 03:17.840
I z tym i skonfigurowanym serwerem webpack-dev,

03:17.840 --> 03:20.110
otrzymujemy teraz gotowy przepływ pracy deweloperskiej.

03:20.110 --> 03:22.880
Teraz dla produkcji, będziemy musieli dostosować

03:22.880 --> 03:25.570
ten przepływ pracy trochę, ponieważ tam chcemy

03:25.570 --> 03:27.100
innego wyjścia.
