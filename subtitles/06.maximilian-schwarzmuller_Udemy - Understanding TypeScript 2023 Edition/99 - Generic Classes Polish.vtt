WEBVTT

00:02.270 --> 00:04.390
Instruktor: Dobrze, dość o funkcjach generycznych.

00:04.390 --> 00:06.490
Będziemy ich zawsze używać w trakcie tego

00:06.490 --> 00:08.150
kursu, całego projektu kursu.

00:08.150 --> 00:10.390
Więc to powinno być coraz bardziej jasne,

00:10.390 --> 00:11.890
im więcej z tym pracujemy.

00:11.890 --> 00:14.823
Mam nadzieję, że ogólna idea jest już jasna.

00:15.660 --> 00:18.490
Funkcje generyczne to jednak nie wszystko, co możemy wykorzystać,

00:18.490 --> 00:21.560
mamy również klasy generyczne i dlatego zobaczmy, jak moglibyśmy

00:21.560 --> 00:25.170
stworzyć taką klasę generyczną i dlaczego moglibyśmy to zrobić, dlaczego

00:25.170 --> 00:27.760
to może być dla nas przydatne.

00:27.760 --> 00:31.950
Możemy tutaj stworzyć klasę magazynową.

00:31.950 --> 00:36.060
Klasa letts say, która ma prywatną właściwość data.

00:36.060 --> 00:38.850
Który w efekcie końcowym będzie trzymał tablicę z danymi.

00:38.850 --> 00:40.940
Następnie ma metodę addItem, która

00:40.940 --> 00:44.200
przyjmuje nasz element i to powinno być dodane do danych

00:44.200 --> 00:45.763
z push, powiedzmy.

00:48.570 --> 00:50.830
I mamy metodę removeItem, która przyjmuje

00:50.830 --> 00:52.173
nasz przedmiot, gdzie moglibyśmy

00:53.010 --> 00:57.740
powiedzieć to. dane. splice, a następnie musimy

00:57.740 --> 01:02.910
tylko uzyskać indexOff(item) tutaj i splice jeden element.

01:02.910 --> 01:06.030
W ten sposób możemy usunąć element z tablicy.

01:06.030 --> 01:07.873
I oczywiście getItems, gdzie zwróć,

01:09.750 --> 01:13.120
powiedzmy, kopię tego. dane, tak jak to było w przypadku

01:13.120 --> 01:15.770
operatora spreadu, o którym się dowiedziałeś.

01:16.610 --> 01:17.443
Teraz możemy to zrobić

01:17.443 --> 01:19.450
i dostajemy tutaj masę błędów.

01:19.450 --> 01:20.500
Dostajemy masę błędów,

01:20.500 --> 01:23.900
teraz na jeden bo nazwa Storage jest nazwą zastrzeżoną, więc nazwijmy

01:23.900 --> 01:25.230
ją Datastorage.

01:25.230 --> 01:26.620
Tego łatwo się pozbyć.

01:26.620 --> 01:27.920
Teraz otrzymujemy również

01:27.920 --> 01:29.400
błąd tutaj, ponieważ nie mówimy

01:29.400 --> 01:30.880
nic o rodzaju danych, które przechowujemy,

01:30.880 --> 01:32.960
i jaki typ ma tutaj element.

01:32.960 --> 01:35.870
I to jest dokładnie to, gdzie możemy przekształcić to w klasę

01:35.870 --> 01:38.860
generyczną, ponieważ możesz nie dbać o typ danych.

01:38.860 --> 01:40.880
Chcemy się upewnić, że są to jednolite

01:40.880 --> 01:42.410
dane, więc albo są to tylko ciągi,

01:42.410 --> 01:44.830
albo tylko liczby, albo tylko obiekty.

01:44.830 --> 01:47.550
Ale poza tym nic mnie to nie obchodzi.

01:47.550 --> 01:50.820
Więc tutaj moglibyśmy przekształcić to w klasę generyczną,

01:50.820 --> 01:53.300
dodając nawiasy kątowe po nazwie klasy, a

01:53.300 --> 01:56.330
następnie ponownie T, U, cokolwiek chcesz użyć jako

01:56.330 --> 02:00.110
identyfikatora, i dodać to tutaj jako typ generyczny.

02:00.110 --> 02:01.083
Teraz tutaj możemy

02:01.083 --> 02:04.490
powiedzieć, że to jest tablica typu T, więc przechowuje

02:04.490 --> 02:07.413
w niej dane tego generycznego typu.

02:07.413 --> 02:09.670
Dlatego tutaj dodajemy takie dane,

02:09.670 --> 02:12.400
a tutaj staramy się takie dane usunąć.

02:12.400 --> 02:15.140
I dlatego tutaj otrzymujemy elementy poprawnie jest

02:15.140 --> 02:18.490
wnioskowane, aby zwrócić tablicę typów generycznych.

02:18.490 --> 02:20.860
Teraz możemy tworzyć różne magazyny,

02:20.860 --> 02:24.690
możemy mieć nasz sting lub textStorage tutaj, poprzez

02:24.690 --> 02:29.500
wywołanie new DataStorage, ustawiając typ generyczny na typ string

02:29.500 --> 02:31.250
tutaj.

02:31.250 --> 02:33.070
A następnie tutaj w textStorage mogę

02:33.070 --> 02:34.340
wywołać addItem, a jeśli

02:34.340 --> 02:36.410
spróbuję dodać liczbę, otrzymam błąd,

02:36.410 --> 02:37.513
ponieważ mówię, że będzie

02:37.513 --> 02:40.800
to DataStorage, który przechowuje tylko stingi.

02:40.800 --> 02:45.800
Tak więc, mogę rzeczywiście przechowywać Max tutaj, a może także przechowywać Manu,

02:46.830 --> 02:51.450
a następnie wywołać textStorage. removeItem('Max'), a następnie

02:51.450 --> 02:55.073
console. log. textStorage. getItems.

02:56.520 --> 02:58.870
I to wszystko powinno działać, jeśli zapiszemy

02:58.870 --> 03:00.300
to, ponieważ jest to typ generyczny

03:00.300 --> 03:03.103
i rzeczywiście na końcu mamy tam po prostu Manu.

03:04.400 --> 03:08.240
Byłaby to więc jedna prosta klasa generyczna, którą możemy stworzyć.

03:08.240 --> 03:10.500
Teraz, dlaczego mielibyśmy zbudować taką klasę generyczną?

03:10.500 --> 03:11.770
Cóż, tak jak powiedziałem,

03:11.770 --> 03:14.220
ponieważ być może nie chcemy przechowywać tylko

03:14.220 --> 03:17.110
tekstów, mogę również chcieć przechowywać niektóre liczby

03:17.110 --> 03:18.950
w innym magazynie danych.

03:18.950 --> 03:21.510
Więc wtedy mógłbym stworzyć taki DataStorage, a ustawienie

03:21.510 --> 03:23.810
tego na liczbę zapewnia, że teraz możemy dodawać

03:23.810 --> 03:26.250
tylko liczby do tego magazynu.

03:26.250 --> 03:28.330
Oczywiście, moglibyśmy również skonfigurować magazyn,

03:28.330 --> 03:30.520
w którym zezwalamy na oba, używając typu union.

03:30.520 --> 03:32.550
Tak więc, mamy tam pełną elastyczność,

03:32.550 --> 03:36.470
ale dajemy typowi pewne dodatkowe informacje, które sprawiają,

03:36.470 --> 03:38.490
że jest to zarówno elastyczna, jak

03:38.490 --> 03:41.450
i wciąż silnie typowana klasa.

03:41.450 --> 03:43.470
Tak jak to było z funkcjami.

03:43.470 --> 03:46.910
Naprawdę elastyczne i wciąż doskonałe wsparcie typów.

03:46.910 --> 03:49.900
To jest cała idea stojąca za typami generycznymi.

03:49.900 --> 03:52.680
Tak więc, tutaj możemy to zrobić z klasą DataStorage, przechowując

03:52.680 --> 03:53.750
ciągi znaków, lub przechowując

03:53.750 --> 03:56.513
liczby, lub cokolwiek chcemy.

03:57.790 --> 04:01.300
Będziemy mieli jednak jeden problem dotyczący naszej klasy DataStorage.

04:01.300 --> 04:04.880
Powiedzmy, że tutaj mam mój magazyn obiektów, teraz mogę

04:04.880 --> 04:07.090
stworzyć nowy DataStorage i powiedzieć

04:07.090 --> 04:10.490
tam, że chcę przechowywać obiekty, prawda, chcę przechowywać

04:10.490 --> 04:12.270
obiekty i oczywiście możemy

04:12.270 --> 04:17.270
przejść do magazynu obiektów i dodać element.

04:17.300 --> 04:20.460
Powiedzmy, że obiekt, który mam nazywa się tam Max.

04:20.460 --> 04:22.920
Przechowujmy też inny obiekt, w którym

04:22.920 --> 04:24.760
przechowuję Manu.

04:24.760 --> 04:26.770
Następnie, powiedzmy, że robimy pewne

04:26.770 --> 04:28.310
rzeczy w naszym kodzie, a następnie

04:28.310 --> 04:29.740
w późniejszym momencie tutaj,

04:29.740 --> 04:34.100
będę chciał usunąć element, chcę usunąć element z nazwą: 'Manu' tutaj.

04:34.100 --> 04:37.863
A potem, chcę pocieszyć. log. objStorage. getItems.

04:39.450 --> 04:40.550
Jak to.

04:40.550 --> 04:41.883
Jeśli to zapiszemy, zobaczymy,

04:42.920 --> 04:45.840
że mamy tam obiekt, który jest Maxem.

04:45.840 --> 04:47.470
Więc to wygląda dobrze.

04:47.470 --> 04:49.140
Teraz to już nie bardzo.

04:49.140 --> 04:52.490
Powiedzmy tutaj, chcę teraz usunąć Maxa, więc teraz powinniśmy

04:52.490 --> 04:55.740
mieć Manu pozostawione w magazynie danych.

04:55.740 --> 04:59.653
Stąd, jeśli przeładuję, a dobrze, to nadal jest to Max.

05:00.550 --> 05:03.660
Teraz problem polega na tym, że pracujemy tutaj z obiektami,

05:03.660 --> 05:07.350
jak wiesz obiekty w JavaScript są typami referencyjnymi.

05:07.350 --> 05:09.440
Teraz dołączyć, aby znaleźć dodatkowy zasób,

05:09.440 --> 05:11.460
który pozwala nurkować w odniesieniu.

05:11.460 --> 05:12.730
Natomiast wartości prymitywne,

05:12.730 --> 05:14.650
tutaj zakładam, że znasz różnicę, ponieważ

05:14.650 --> 05:16.970
jest to rzecz rdzeniowa JavaScript, całkowicie

05:16.970 --> 05:19.060
niezwiązana z typescript.

05:19.060 --> 05:20.600
Tutaj problem polega na tym,

05:20.600 --> 05:22.300
że sposób, w jaki nasza klasa jest

05:22.300 --> 05:26.243
zbudowana z tą logiką, w jaki sposób dane są usuwane i identyfikowane, tak

05:27.080 --> 05:29.580
naprawdę nie wykonujemy dobrej pracy, gdy pracujemy

05:29.580 --> 05:32.200
z wartościami nieprymitywnymi.

05:32.200 --> 05:35.130
Tak więc, gdy pracujemy z obiektami lub tablicami, ponieważ

05:35.130 --> 05:37.840
indexOf, jeśli przekażemy tutaj obiekt, nie będzie

05:37.840 --> 05:40.910
działać, ponieważ technicznie jest to nowy obiekt.

05:40.910 --> 05:43.800
Może wyglądać jak ten, ale nie działa, ponieważ

05:43.800 --> 05:46.520
technicznie jest to zupełnie nowy obiekt w

05:46.520 --> 05:48.290
pamięci i ma inny adres.

05:48.290 --> 05:52.110
I rzeczywiście tutaj, JavaScript będzie szukał adresu i

05:52.110 --> 05:54.930
w zasadzie go nie znajdzie, więc to co wtedy

05:54.930 --> 05:58.453
zrobi, to usunie ostatni element w tablicy tutaj, ponieważ

05:59.510 --> 06:01.473
to w końcu zwraca -1.

06:02.419 --> 06:06.070
IndexOf zwraca -1 nawet jeśli nic nie znajdzie.

06:06.070 --> 06:07.990
Co oznacza, że zaczyna się na końcu tablicy,

06:07.990 --> 06:09.770
to jest normalne zachowanie Javascript

06:09.770 --> 06:11.921
i usuwa ostatni element tablicy.

06:11.921 --> 06:14.190
Dlatego zadziałało to dla Manu, tak naprawdę

06:14.190 --> 06:16.810
nie działało to przypadkowo, ale dlaczego nie

06:16.810 --> 06:19.020
działa dla Maxa, zawsze usuwamy ostatni

06:19.020 --> 06:19.880
element tablicy

06:19.880 --> 06:21.760
na razie, ponieważ nie możemy go

06:21.760 --> 06:23.670
zidentyfikować.

06:23.670 --> 06:25.890
Teraz, jednym obejściem, aby przynajmniej

06:25.890 --> 06:29.140
naprawić to, jest sprawdzenie, czy znaleźliśmy nasz

06:29.140 --> 06:32.260
przedmiot, więc możemy sprawdzić, czy ten kod tutaj,

06:32.260 --> 06:36.260
jeśli jest równy -1, co oznacza, że nie znaleźliśmy go.

06:36.260 --> 06:37.360
Wtedy możemy wrócić i upewnić

06:37.360 --> 06:40.780
się, czy przypadkiem nie usuwamy niewłaściwego przedmiotu.

06:40.780 --> 06:42.900
Ale oczywiście teraz właśnie naprawiliśmy ten pasek,

06:42.900 --> 06:44.850
ale nadal nie mamy tego wewnętrznego stanu,

06:44.850 --> 06:46.580
w którym działałby z obiektami.

06:46.580 --> 06:48.890
Cóż, jedynym sposobem, w jaki może działać z obiektami,

06:48.890 --> 06:51.740
jest to, że przekazujemy dokładnie ten sam obiekt ponownie.

06:51.740 --> 06:55.700
Więc tutaj, jeśli miałem mój obiekt max przechowywany w stałej,

06:55.700 --> 06:58.840
jak to, a w tym miejscu przekazuję obiekt max.

06:58.840 --> 07:02.050
I robię to samo tutaj, wtedy naprawdę używam tego samego, dokładnie

07:02.050 --> 07:05.330
tego samego obiektu, dokładnie tego samego obiektu w pamięci i dlatego

07:05.330 --> 07:06.540
teraz działałoby to.

07:06.540 --> 07:08.930
To byłby jedyny sposób, aby to zadziałało.

07:08.930 --> 07:12.340
Więc dlatego tutaj lepszym pomysłem może być upewnienie

07:12.340 --> 07:16.150
się, że to naprawdę działa tylko z prymitywnymi wartościami.

07:16.150 --> 07:20.100
Możemy więc powiedzieć, że T rozszerza ciąg, liczbę,

07:20.100 --> 07:24.010
może wszystkie boolean dodaje dalej.

07:24.010 --> 07:25.990
Więc teraz zasadniczo mówimy, że DataStorage

07:25.990 --> 07:27.920
powinien działać tylko z tymi typami.

07:27.920 --> 07:30.470
Dlatego obiekty nie są już dozwolone.

07:30.470 --> 07:32.500
To może być lepsze tutaj, ponieważ, potrzebowalibyśmy

07:32.500 --> 07:35.220
bardziej wyspecjalizowanego DataStorage, który wtedy

07:35.220 --> 07:38.290
prawdopodobnie działa tylko z obiektami po kolei, a nie z prymitywnymi

07:38.290 --> 07:40.080
wartościami.

07:40.080 --> 07:42.430
Aby dostroić naszą logikę pobierania tutaj, aby być może

07:42.430 --> 07:44.800
sprawdzić, czy niektóre iD w elemencie, który powinien

07:44.800 --> 07:45.880
zostać usunięty.

07:45.880 --> 07:46.970
Sposób, w jaki działa tutaj,

07:46.970 --> 07:48.910
naprawdę działa tylko dla prymitywnych typów,

07:48.910 --> 07:52.320
więc ustawienie takiego ograniczenia jest zdecydowanie dobrym pomysłem.

07:52.320 --> 07:55.610
I z tym, jeśli zapisaliśmy, po skomentowaniu tego, znowu

07:55.610 --> 07:57.253
działa, oczywiście.

07:58.810 --> 08:00.540
Teraz nie trzeba mówić, miejmy nadzieję,

08:00.540 --> 08:02.620
że oczywiście można mieć więcej niż jeden typ

08:02.620 --> 08:04.310
generyczny również tutaj.

08:04.310 --> 08:05.910
Podczas pracy z klasami nie jesteś

08:05.910 --> 08:07.600
ograniczony do jednego typu.

08:07.600 --> 08:09.610
I możesz również mieć metody,

08:09.610 --> 08:13.080
które mają własne typy generyczne zamiast klas.

08:13.080 --> 08:16.630
Możesz więc wprowadzić nowe typy generyczne w metodach klasy, jeśli masz

08:16.630 --> 08:18.010
jakiś typ generyczny, który

08:18.010 --> 08:19.750
jest potrzebny tylko w określonej

08:19.750 --> 08:21.580
metodzie, a nie w całej klasie.

08:21.580 --> 08:23.000
Więc jesteś tam naprawdę elastyczny.

08:23.000 --> 08:25.570
Możesz używać ograniczeń wszędzie

08:25.570 --> 08:28.100
i ogólnie rzecz biorąc, typy generyczne

08:28.100 --> 08:30.240
są tam, aby ułatwić ci życie

08:30.240 --> 08:36.010
i dać ci to idealne połączenie pełnej elastyczności.

08:36.010 --> 08:39.310
Możemy użyć tutaj dowolnej prymitywnej wartości, którą chcesz

08:39.310 --> 08:40.900
i bezpieczeństwa typu, ponieważ

08:40.900 --> 08:42.820
doskonale wiemy, co jest przechowywane

08:42.820 --> 08:44.710
w tym DataStorage i co jest przechowywane

08:44.710 --> 08:46.770
w tym DataStorage.

08:46.770 --> 08:50.660
Więc to połączenie jest niesamowitą rzeczą, jaką dają

08:50.660 --> 08:52.283
nam typy generyczne.
