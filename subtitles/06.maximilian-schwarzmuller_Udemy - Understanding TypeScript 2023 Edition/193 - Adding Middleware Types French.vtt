WEBVTT

00:02.210 --> 00:04.200
Instructeur : Nous avons donc mis en place

00:04.200 --> 00:05.490
ce serveur fictif de base,

00:05.490 --> 00:08.380
mais ce serveur ne fait rien d'utile bien sûr.

00:08.380 --> 00:11.430
Maintenant, j'ai dit que je voulais construire une API de repos très

00:11.430 --> 00:13.110
simple, et pour cela, je vais créer un

00:13.110 --> 00:15.570
nouveau sous-dossier dans le dossier source, que je

00:15.570 --> 00:16.830
vais nommer routes.

00:16.830 --> 00:19.870
J'y ajouterai un fichier qui doit gérer un certain nombre

00:19.870 --> 00:22.540
de routes de cette API de repos. Maintenant, c'est

00:22.540 --> 00:25.710
à vous de décider quel type d'API vous voulez construire.

00:25.710 --> 00:28.520
Je vais construire une API todo ici, si vous avez pris la section

00:28.520 --> 00:30.770
React in TypeScript, cela vous semble familier

00:30.770 --> 00:32.140
parce que là nous avons construit

00:32.140 --> 00:34.530
une application todo aussi, ceci est totalement détaché

00:34.530 --> 00:36.820
de cette section cependant, il ne fonctionnera

00:36.820 --> 00:38.710
pas avec React, bien sûr vous pourriez le

00:38.710 --> 00:41.250
connecter cependant sur votre propre, mais ici je vais

00:41.250 --> 00:43.870
construire une API todo si simple simplement pour que nous

00:43.870 --> 00:48.350
voyons comment TypeScript fonctionne avec Node et Express.

00:48.350 --> 00:51.400
L'application que nous construisons n'est pas trop complexe,

00:51.400 --> 00:54.760
mais elle contiendra beaucoup de concepts intéressants.

00:54.760 --> 00:57.080
Donc ici, nous allons ajouter mes routes

00:57.080 --> 01:01.800
de todo en ajoutant un todos. ts dans le dossier routes, et là, je veux maintenant

01:01.800 --> 01:04.570
utiliser Express. js pour enregistrer

01:04.570 --> 01:06.630
certaines routes.

01:06.630 --> 01:09.730
Pour cela, je vais importer quelque chose d'Express,

01:09.730 --> 01:13.700
et ce quelque chose est maintenant le routeur.

01:13.700 --> 01:16.160
Maintenant, la syntaxe JS commune pour cela

01:16.160 --> 01:20.950
est typiquement que vous importez Express en utilisant require express, et ensuite

01:20.950 --> 01:23.550
dans une nouvelle ligne, vous voyez souvent du

01:23.550 --> 01:25.673
code où nous faisons ceci ici.

01:27.090 --> 01:28.180
C'est quelque chose que vous pouvez

01:28.180 --> 01:30.130
faire, mais ici je vais juste l'importer comme ça.

01:31.130 --> 01:34.120
Maintenant, cela nous donne un routeur, et nous pouvons simplement

01:34.120 --> 01:36.750
appeler Router ici comme une fonction, et cela nous permet

01:36.750 --> 01:39.300
d'enregistrer des intergiciels, donc à la fin, des routes

01:39.300 --> 01:41.980
de points de terminaison pour les demandes entrantes où nous

01:41.980 --> 01:45.540
exécutons ensuite une certaine logique sur ces demandes.

01:45.540 --> 01:48.980
Maintenant pour l'application todo, je veux enregistrer quelques routes

01:48.980 --> 01:53.700
de base, une route post à slash nothing où nous pouvons ajouter un nouveau todo, donc ici nous aurons

01:53.700 --> 01:55.760
besoin d'un certain code, une certaine fonction

01:55.760 --> 01:58.860
qui ajoute ensuite un todo quelque part, pour l'instant je ne vais

01:58.860 --> 02:01.250
pas spécifier de code du tout, juste configurer la

02:01.250 --> 02:03.380
route en général ici.

02:03.380 --> 02:05.110
Nous avons donc la requête

02:05.110 --> 02:08.770
post, puis une requête get, pour obtenir tous les todos

02:08.770 --> 02:12.900
disons, puis aussi disons une requête patch pour mettre à jour

02:12.900 --> 02:15.520
un todo, et là je m'attends à obtenir l'id,

02:15.520 --> 02:19.280
un segment dynamique dans l'URL, et puis ici aussi une requête

02:19.280 --> 02:22.700
delete pour supprimer un todo par id.

02:22.700 --> 02:25.720
Ce sont mes routes, et maintenant nous pouvons exporter

02:25.720 --> 02:28.620
le routeur configuré comme défaut dans ce fichier.

02:28.620 --> 02:30.930
Maintenant, rien ne se passera sur ces routes, n'est-ce pas ?

02:30.930 --> 02:32.510
Je n'ai pas mis en place de fonction qui

02:32.510 --> 02:35.830
s'exécuterait lorsqu'une requête atteint ces points de terminaison, mais

02:35.830 --> 02:38.620
nous savons au moins maintenant quelles routes nous voulons, nous

02:38.620 --> 02:41.740
ajouterons les fonctions dans une deuxième étape plus tard.

02:41.740 --> 02:44.100
Pour l'instant, nous allons simplement connecter le routeur ici, les routes configurées

02:44.100 --> 02:48.320
à notre serveur en cours d'exécution ici dans l'application. ts, et pour ce faire, nous

02:48.320 --> 02:53.211
importons simplement nos, disons todoRoutes de

02:53.211 --> 02:54.290
. /routes/todos.

02:56.040 --> 02:58.910
Donc nous importons ce routeur exporté dans

02:58.910 --> 03:01.610
todos dans app. ts, et maintenant, nous devons

03:01.610 --> 03:03.390
le connecter à notre application Express

03:03.390 --> 03:08.340
en cours d'exécution en utilisant app. et disons que nous voulons transférer

03:08.340 --> 03:10.800
toutes les demandes qui commencent

03:10.800 --> 03:14.600
par /todos vers nos todoRoutes, de sorte que les demandes

03:14.600 --> 03:17.210
ciblant une URL différente ne seront pas

03:17.210 --> 03:18.703
traitées ici.

03:19.920 --> 03:23.730
En parlant de gestion, dans la configuration du middleware Express que nous utilisons

03:23.730 --> 03:25.983
ici, nous pouvons également configurer un middleware

03:25.983 --> 03:29.030
qui gérera les erreurs, c'est-à-dire toutes les erreurs qui pourraient

03:29.030 --> 03:31.660
être lancées n'importe où dans notre code, et nous faisons cela

03:31.660 --> 03:33.610
avec app. et ensuite nous mettons

03:33.610 --> 03:37.470
en place une fonction middleware typique ici où nous obtenons la demande, la réponse,

03:37.470 --> 03:40.640
et une fonction suivante, et encore une fois, tout cela nécessite

03:40.640 --> 03:45.430
de connaître un peu d'Express. js et de connaître

03:45.430 --> 03:48.330
Node. js, je ne vais pas me plonger dans

03:48.330 --> 03:51.160
le fonctionnement exact de l'intergiciel dans Express et

03:51.160 --> 03:52.970
dans ce qu'est l'intergiciel.

03:52.970 --> 03:54.960
Il s'agit donc d'une fonction habituelle de l'intergiciel, comme vous

03:54.960 --> 03:57.150
devriez le savoir depuis Express. js, et vous savez probablement

03:57.150 --> 03:59.050
aussi qu'il existe une alternative

03:59.050 --> 04:02.310
à cette fonction, une fonction qui prend quatre paramètres,

04:02.310 --> 04:04.680
dont le premier est une erreur potentielle.

04:04.680 --> 04:07.350
Il s'agit d'une fonction middleware de gestion

04:07.350 --> 04:18.750
des erreurs, qui sera déclenchée automatiquement par Express si une erreur se produit dans un autre middleware avant celui-ci.

04:18.750 --> 04:21.200
Voici donc ma fonction de gestion des erreurs, et vous

04:21.200 --> 04:23.380
voyez, nous avons un tas d'erreurs ici.

04:23.380 --> 04:26.260
Un tas d'erreurs parce que tout ceci est de type any

04:26.260 --> 04:29.030
et nous n'utilisons pas non plus toutes ces valeurs,

04:29.030 --> 04:33.080
mais laissez-moi clarifier le type de type que nous avons ici.

04:33.080 --> 04:35.510
Ce sera de type Error, ce

04:35.510 --> 04:39.890
sera de type express. Request, ou vous importez simplement

04:39.890 --> 04:43.020
Request ici comme un extra nommé import from express,

04:43.020 --> 04:45.540
cela fonctionne aussi si vous avez les types

04:45.540 --> 04:46.670
Express installés,

04:46.670 --> 04:49.310
ce qui est le cas, alors ici nous avons aussi la

04:49.310 --> 04:54.310
Response, et une NextFunction ici, et alors nous pouvons ajuster nos types ici, ceci

04:54.490 --> 04:56.310
est maintenant de type Request,

04:56.310 --> 04:59.230
ceci est de type Response, et ceci est cette NextFunction

04:59.230 --> 05:01.420
que nous pouvons exécuter pour laisser

05:01.420 --> 05:03.650
la requête continuer son voyage vers le

05:03.650 --> 05:06.680
prochain middleware en ligne.

05:06.680 --> 05:08.590
Maintenant, c'est notre middleware

05:08.590 --> 05:10.820
de gestion des erreurs, il se déclenchera chaque

05:10.820 --> 05:13.030
fois que nous aurons une erreur dans l'un de

05:13.030 --> 05:15.000
nos autres middlewares, et ici, nous pourrions

05:15.000 --> 05:17.690
renvoyer une réponse avec disons des données JSON où

05:17.690 --> 05:22.690
nous avons un message d'erreur. et où l'on peut aussi mettre,

05:22.855 --> 05:24.630
euh... Je veux dire, et où

05:24.630 --> 05:28.510
nous pouvons également définir un code d'état de 500, et bien sûr, vous pouvez

05:28.510 --> 05:29.610
avoir une fonctionnalité

05:29.610 --> 05:32.460
de gestion des erreurs plus élaborée que celle que j'ai ici,

05:32.460 --> 05:35.020
mais avec cela, nous avons ajouté nos routes, nous avons

05:35.020 --> 05:38.830
ajouté notre intergiciel de gestion des erreurs, pourquoi ne pas ajouter une

05:38.830 --> 05:40.670
certaine logique à cette API maintenant

05:40.670 --> 05:43.103
dans le prochain cours.
