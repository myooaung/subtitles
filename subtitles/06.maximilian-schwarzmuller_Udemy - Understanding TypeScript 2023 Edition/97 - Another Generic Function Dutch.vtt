WEBVTT

00:02.140 --> 00:03.620
-Laten we blijven oefenen met deze

00:03.620 --> 00:06.220
generieke types, want ik weet dat ze vreemd kunnen zijn

00:06.220 --> 00:08.305
om je hoofd in te wikkelen; maar uiteindelijk

00:08.305 --> 00:09.970
zijn ze heel eenvoudig.

00:09.970 --> 00:12.180
Laten we een gemiddelde generieke

00:12.180 --> 00:14.810
functie maken, tellen en afdrukken.

00:14.810 --> 00:19.810
Nu moet deze functie een argument aannemen, een parameter.

00:20.330 --> 00:23.470
Laten we het element een naam geven, maar de naam is

00:23.470 --> 00:26.530
echt aan u, die van een algemeen type moet zijn.

00:26.530 --> 00:28.340
Omdat ik echt niet geef om het type,

00:28.340 --> 00:30.380
althans in bepaalde opzichten.

00:30.380 --> 00:33.400
Dus laten we zeggen dat we één generiek type in deze functie

00:33.400 --> 00:35.800
hebben en dat onze parameter van dat type is.

00:35.800 --> 00:38.350
Dat is trouwens allemaal typisch voor generieke types.

00:38.350 --> 00:40.030
Als je een generieke functie hebt,

00:40.030 --> 00:42.180
zal je parameter vaak van dat type zijn.

00:42.180 --> 00:43.890
Dat hoeft niet, maar vaak is dat de manier

00:43.890 --> 00:45.890
waarop je met generieke functies werkt, zoals

00:45.890 --> 00:46.920
je zult zien naarmate je

00:46.920 --> 00:49.080
er meer en meer ervaring mee krijgt.

00:49.080 --> 00:50.670
Dus hier hebben we tellen en

00:50.670 --> 00:52.350
afdrukken met ons generieke

00:52.350 --> 00:54.430
type, en element is van dat type.

00:54.430 --> 00:56.500
Wat ik hier nu wil teruggeven

00:56.500 --> 01:00.300
is een nienda tuple met twee elementen waarbij het eerste

01:00.300 --> 01:03.190
element mijn element zelf moet zijn en het

01:03.190 --> 01:07.070
tweede element een description string.

01:07.070 --> 01:10.160
Misschien noemen we het tellen en beschrijven, daarom.

01:10.160 --> 01:15.160
Dus hier heb ik mijn beschrijvingstekst, en hier zal ik zeggen

01:15.410 --> 01:19.890
got no value, en dat wil ik gebruiken als we een element doorgeven

01:19.890 --> 01:22.620
dat geen lengte heeft.

01:22.620 --> 01:25.570
Want mijn idee met count en describe is dat we een array

01:25.570 --> 01:29.040
of een string kunnen invoeren, en dat we het aantal karakters

01:29.040 --> 01:32.040
of elementen in die string of array terugkrijgen.

01:32.040 --> 01:34.040
Dus als we een lege string of

01:34.040 --> 01:37.440
een lege array hebben, wil ik got no value gebruiken,

01:37.440 --> 01:42.440
maar als ik hier controleer dat element puntlengte groter is dan nul,

01:43.210 --> 01:46.170
dan wil ik de beschrijvingstekst instellen

01:47.430 --> 01:52.430
op got plus element puntlengte plus elementen.

01:55.850 --> 01:58.100
Je zou nog specifieker kunnen

01:58.100 --> 02:03.100
zijn en controleren of de lengte hier gelijk is aan één, en dan zeggen

02:06.590 --> 02:11.590
got one element, anders als elementlengte groter is dan één, hebben

02:11.720 --> 02:13.750
we beschrijvingstekst gelijk

02:13.750 --> 02:18.750
got plus elementlengte elementen zodat we de meervoudsvorm goed

02:18.990 --> 02:21.173
hebben.

02:22.850 --> 02:25.220
Nu staat hier de beschrijvingstekst voor het tweede element

02:25.220 --> 02:27.040
en kom hier terug. Nu zie je hier al

02:27.040 --> 02:29.480
soorten klachten over de lengte.

02:29.480 --> 02:32.350
Omdat het niet duidelijk is dat het element een lengte heeft.

02:32.350 --> 02:34.770
Dus misschien moeten we dat duidelijk maken.

02:34.770 --> 02:38.430
We kunnen dat doen door een nieuwe interface of een aangepast type te

02:38.430 --> 02:41.060
maken met het type keyword hier en hier ga ik voor

02:41.060 --> 02:44.750
een interface die ik lengthy zal noemen en die uiteindelijk gewoon

02:44.750 --> 02:47.440
garandeert dat we een object hebben met een lengte-eigenschap

02:47.440 --> 02:50.820
die uiteindelijk een getal moet opleveren.

02:50.820 --> 02:52.870
En dan kunnen we hier een beperking instellen

02:52.870 --> 02:54.740
en zeggen dat T langgerekt is.

02:54.740 --> 02:57.710
Dus wat we ook krijgen, we hebben een lengte-eigenschap

02:57.710 --> 03:01.053
en een array of een string zou een lengte-eigenschap hebben.

03:02.030 --> 03:07.030
Nu kan ik het tellen en beschrijven in de console loggen en

03:07.500 --> 03:11.240
doorgeven, laten we zeggen, hallo daar.

03:11.240 --> 03:14.280
Dit werkt omdat een string een lengte-eigenschap heeft.

03:14.280 --> 03:15.290
Het is geen object.

03:15.290 --> 03:17.310
Het is een string, maar achter de schermen

03:17.310 --> 03:19.980
converteert Javascript dit naar een object en voegt een

03:19.980 --> 03:21.720
lengte-eigenschap toe wanneer we die

03:21.720 --> 03:23.940
nodig hebben. Dus daarom kunnen

03:23.940 --> 03:26.960
we het gerust zo noemen. Type script in eerst dat

03:26.960 --> 03:31.370
we hier een array teruggeven met ofwel een string of type T element

03:31.370 --> 03:33.580
erin. Nu wil ik een tupel hebben,

03:33.580 --> 03:36.060
dus ik zal hier specifieker zijn en het terugkeertype

03:36.060 --> 03:39.110
instellen op een array met precies twee elementen, waarbij

03:39.110 --> 03:41.330
het eerste element van het type T is en het tweede

03:41.330 --> 03:43.850
element van het type string.

03:43.850 --> 03:46.270
Dus nu zeg ik gewoon dat we hier een tupel

03:46.270 --> 03:49.360
teruggeven waar het eerste element, wel, elk element

03:49.360 --> 03:52.010
van ons generisch type is, en het tweede element

03:52.010 --> 03:54.110
een string.

03:54.110 --> 03:56.820
Nu, als we dit opslaan, wordt het opnieuw gecompileerd

03:56.820 --> 04:00.330
zonder fouten en drukt hi there, got nine elements because we got

04:00.330 --> 04:02.330
nine characters in there.

04:04.320 --> 04:06.890
We zouden dit ook kunnen aanroepen met een array

04:06.890 --> 04:09.530
waarin we sport en koken hebben, en nu zul je

04:09.530 --> 04:12.460
zien dat we twee elementen hebben gekregen als beschrijvingstekst,

04:12.460 --> 04:15.990
of met een lege array natuurlijk, in welk geval, als ik dat opsla,

04:15.990 --> 04:18.660
we geen waarde krijgen, maar we zullen dit niet

04:18.660 --> 04:28.090
kunnen aanroepen, bijvoorbeeld met een getal, omdat een getal geen lengte-eigenschap heeft en dit dus niet werkt.

04:28.090 --> 04:32.900
Dus hier hebben we weer onze generieke functie.

04:32.900 --> 04:35.043
Het idee is vergelijkbaar met de vorige functie.

04:35.043 --> 04:38.680
We willen een beetje vaag zijn over het soort gegevens dat we

04:38.680 --> 04:40.540
hier krijgen. Het maakt ons niet uit

04:40.540 --> 04:43.180
of het een string is, of een array, of iets anders dat een lengte-eigenschap

04:43.180 --> 04:45.610
heeft. We geven er alleen om dat

04:45.610 --> 04:47.930
het een lengte-eigenschap heeft en dan willen

04:47.930 --> 04:49.980
we er iets mee doen omdat we vertrouwen op

04:49.980 --> 04:51.970
de lengte-eigenschap in onze code, dus

04:51.970 --> 04:53.540
we moeten garanderen dat we die

04:53.540 --> 04:55.370
hebben, maar verder hebben we geen

04:55.370 --> 04:57.330
belang bij welk type gegevens we hier

04:57.330 --> 04:59.490
krijgen. Ik wil dit niet beperken

04:59.490 --> 05:01.820
tot een string of een array, en ik wil geen

05:01.820 --> 05:04.220
heleboel overloads maken om alle mogelijke

05:04.220 --> 05:05.830
types te verwerken.

05:05.830 --> 05:08.124
Ik wil hier ook geen heel lang unie-type

05:08.124 --> 05:10.970
maken, omdat ik misschien types vergeet die een

05:10.970 --> 05:13.610
lengte-eigenschap hebben, of als ik een eigen

05:13.610 --> 05:16.220
object maak met een lengte-eigenschap, dat

05:16.220 --> 05:18.640
ik dat niet toesta als ik dit hier beperk tot

05:18.640 --> 05:21.580
type, string en array of iets dergelijks.

05:21.580 --> 05:23.500
Dus daarom wil ik flexibeler zijn en

05:23.500 --> 05:25.380
met generieke types kunnen we dat zijn,

05:25.380 --> 05:27.550
we geven niet om het exacte type.

05:27.550 --> 05:30.080
Hier geef ik, dankzij de beperking, alleen

05:30.080 --> 05:33.363
om het feit dat het een lengte-eigenschap heeft.
