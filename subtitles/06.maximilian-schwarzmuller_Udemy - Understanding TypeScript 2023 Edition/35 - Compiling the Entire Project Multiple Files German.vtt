WEBVTT

00:02.120 --> 00:04.590
Kursleiter: Wie ich in der letzten Vorlesung erwähnt habe,

00:04.590 --> 00:06.080
ist der Watch-Modus ein guter Anfang,

00:06.080 --> 00:08.910
aber was ist, wenn wir mehr als eine TypeScript-Datei haben?

00:08.910 --> 00:13.370
Was wäre, wenn wir auch eine Analytik hätten. ts-Datei, in der wir hypothetisch

00:13.370 --> 00:18.370
Analysedaten an unseren Server senden?

00:18.530 --> 00:21.430
Um hier irgendetwas zu haben, werde ich einfach eine

00:21.430 --> 00:24.240
Konsole einbauen. Log-Anweisung, aber natürlich

00:24.240 --> 00:26.710
könnten Sie hier, wie gesagt, HTTP-Anforderungen

00:26.710 --> 00:29.180
an Ihren Analysedienst senden.

00:29.180 --> 00:32.685
Nehmen wir also an, wir haben diese Datei auch in unseren

00:32.685 --> 00:36.420
Index importiert. html-Datei.

00:36.420 --> 00:40.320
Wenn wir auf die Analytik zeigen. js hier, die noch nicht existiert,

00:40.320 --> 00:41.730
aber nach der Kompilierung

00:41.730 --> 00:44.760
existieren wird, dann könnten wir diese beiden Dateien

00:44.760 --> 00:46.660
laden und natürlich wollen wir beide

00:46.660 --> 00:48.950
Dateien kompilieren, wenn sich eine von

00:48.950 --> 00:50.900
ihnen ändert.

00:50.900 --> 00:52.490
Dafür wäre es schön, wenn wir in

00:52.490 --> 00:55.320
einen allgemeinen Überwachungsmodus gelangen könnten,

00:55.320 --> 00:57.630
in dem wir tsc einfach so ausführen, ohne auf

00:57.630 --> 00:59.790
eine Datei zu zeigen, und es einfach unseren

00:59.790 --> 01:02.480
gesamten Projektordner überwacht und jede TypeScript-Datei

01:02.480 --> 01:05.823
neu kompiliert, die sich ändern könnte.

01:06.720 --> 01:08.960
Nun, es stellt sich heraus, dass dies möglich ist.

01:08.960 --> 01:11.340
Dazu müssen wir TypeScript nur mitteilen,

01:11.340 --> 01:15.020
dass dies hier ein Projekt ist, das mit TypeScript verwaltet

01:15.020 --> 01:16.750
werden soll, und das tun wir,

01:16.750 --> 01:20.700
indem wir zunächst, und das müssen wir nur einmal tun, tsc

01:20.700 --> 01:23.710
--init ausführen.

01:23.710 --> 01:26.170
Ich zeige hier also nicht auf eine bestimmte

01:26.170 --> 01:29.540
Datei, ich führe einfach tsc und dann --init aus, und auch das

01:29.540 --> 01:31.230
ist nur einmal erforderlich.

01:31.230 --> 01:33.530
Dadurch wird das Projekt, in dem Sie diesen Befehl

01:33.530 --> 01:36.390
ausführen, als TypeScript-Projekt initialisiert.

01:36.390 --> 01:39.910
Das bedeutet, dass es TypeScript mitteilt, dass sich alles in dem Ordner

01:39.910 --> 01:41.850
befindet, in dem Sie diesen Befehl ausführen.

01:41.850 --> 01:44.160
Daher ist es wichtig, dass Sie in den richtigen

01:44.160 --> 01:46.470
Ordner navigieren, bevor Sie diesen Befehl

01:46.470 --> 01:48.070
mit dem integrierten Terminal

01:48.070 --> 01:50.550
hier in VS Code ausführen.

01:50.550 --> 01:52.910
Ich bin automatisch in diesem Projektordner,

01:52.910 --> 01:55.740
wo meine Dateien sind, so dass dieses Projekt jetzt von

01:55.740 --> 01:57.370
TypeScript verwaltet wird.

01:57.370 --> 01:58.400
Drücken wir also die Eingabetaste,

01:58.400 --> 02:02.634
und damit wird diese tsconfig erstellt. json-Datei.

02:02.634 --> 02:06.580
Dies ist im Grunde der Indikator für TypeScript, dass das

02:06.580 --> 02:09.950
Projekt, in dem diese Datei liegt, und alle Unterordner

02:09.950 --> 02:12.239
dieses Ordners von TypeScript verwaltet

02:12.239 --> 02:14.710
werden sollen.

02:14.710 --> 02:16.080
Wenn wir nun einen Blick in diese Datei

02:16.080 --> 02:17.860
werfen, sehen wir eine Reihe von Optionen, von

02:17.860 --> 02:19.330
denen die meisten auskommentiert sind,

02:19.330 --> 02:22.090
sie sind nur da, damit Sie sehen, dass Sie sie einstellen können, und

02:22.090 --> 02:24.500
Sie haben hier auch eine kurze Erklärung, aber wir müssen uns

02:24.500 --> 02:26.380
im Moment nicht darum kümmern.

02:26.380 --> 02:29.040
Wir werden sie gleich näher erläutern.

02:29.040 --> 02:31.610
Für den Moment schließen wir einfach diese

02:32.800 --> 02:35.100
Datei hier und schauen, was uns das bringt,

02:35.100 --> 02:36.550
denn was es uns bringt, ist,

02:36.550 --> 02:39.870
dass wir jetzt einfach tsc so ausführen können, ohne auf

02:39.870 --> 02:42.610
eine bestimmte Datei zu zeigen.

02:42.610 --> 02:45.550
Dadurch wird TypeScript angewiesen,

02:45.550 --> 02:49.080
alle TypeScript-Dateien zu kompilieren,

02:49.080 --> 02:53.090
sodass alle . ts-Dateien, die es in diesem Projekt

02:53.090 --> 02:54.770
finden kann. Wenn ich hier auf Enter

02:54.770 --> 02:56.830
drücke, dauert das eine Weile, und jetzt

02:56.830 --> 03:02.620
haben wir diese Analyse. js-Datei und diese Anwendung.

03:02.620 --> 03:02.620
js-Datei.

03:02.620 --> 03:05.160
Nun zu den Analysen. js-Datei wurde gerade von

03:05.160 --> 03:08.010
TypeScript erstellt, weil es festgestellt hat, dass wir die

03:08.010 --> 03:10.060
Analytik haben. ts-Datei und kompiliert

03:10.060 --> 03:14.730
wie gesagt nun alle TypeScript-Dateien im Projekt.

03:14.730 --> 03:17.660
Und natürlich kann dies auch mit dem Uhrenmodus kombiniert werden.

03:17.660 --> 03:20.630
Sie können tsc -w oder --watch ausführen, wie ich

03:20.630 --> 03:23.420
zuvor gezeigt habe, und dies wird nun den Watch-Modus

03:23.420 --> 03:26.970
für alle TypeScript-Dateien aktivieren.

03:26.970 --> 03:29.590
Wenn ich nun eines davon ändere und es speichere,

03:29.590 --> 03:31.920
wird es neu kompiliert.

03:31.920 --> 03:33.840
Die geänderte Datei wird neu kompiliert

03:33.840 --> 03:36.100
und damit auch alle in der JavaScript-Datei

03:36.100 --> 03:37.800
enthaltenen Änderungen.

03:37.800 --> 03:38.633
Und jetzt ist sie da.

03:38.633 --> 03:41.430
Wenn ich zu meiner Seite zurückkehre, sehen wir, dass die Daten auch gesendet

03:41.430 --> 03:44.463
werden, weil jetzt die Analysen. ts-Datei wurde ebenfalls kompiliert.
