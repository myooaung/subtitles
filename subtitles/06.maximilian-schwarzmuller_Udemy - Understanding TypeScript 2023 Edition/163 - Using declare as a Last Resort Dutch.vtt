WEBVTT

00:02.450 --> 00:04.900
Instructeur: Wat doe je nu als je een bibliotheek

00:04.900 --> 00:07.090
hebt waar je geen types kunt installeren

00:07.090 --> 00:10.470
zoals we dat bijvoorbeeld bij Lodash hebben gedaan?

00:10.470 --> 00:14.440
Voor Lodash hebben we gelukkig zo'n types pakket, en zoals

00:14.440 --> 00:15.880
ik al zei, voor de meeste

00:15.880 --> 00:18.870
bibliotheken van derden heb je dat, maar niet

00:18.870 --> 00:21.210
noodzakelijk voor alle.

00:21.210 --> 00:25.320
Of, wat als je andere JavaScript code hebt, laten we zeggen

00:25.320 --> 00:27.320
in je index. html bestand,

00:27.320 --> 00:29.800
heb je wat andere scriptcode, die

00:29.800 --> 00:34.800
staar uitvoert, waar je een of andere globale variabele instelt.

00:35.350 --> 00:38.450
GLOBAL = "THIS IS SET" Zoiets waarbij je uiteindelijk

00:38.450 --> 00:40.770
weet dat dit wereldwijd beschikbaar

00:40.770 --> 00:43.180
zal zijn.

00:43.180 --> 00:46.240
Zoals u weet, worden dergelijke variabelen toegevoegd

00:46.240 --> 00:48.600
aan het globale vensterobject, en

00:48.600 --> 00:50.210
u wilt ze gebruiken vanuit

00:50.210 --> 00:52.670
uw TypeScript-code.

00:52.670 --> 00:53.503
Bijvoorbeeld,

00:53.503 --> 00:57.770
hier als ik de console wil. log(GLOBAL) zoals dit, krijg ik

00:57.770 --> 00:59.990
hier een foutmelding in mijn IDE.

00:59.990 --> 01:04.299
En als ik tsc -w uitvoer om de compilatie te starten, krijg ik

01:04.299 --> 01:06.340
hier ook een foutmelding.

01:06.340 --> 01:09.470
Dus, het houdt niet van dat globale ding,

01:09.470 --> 01:11.530
ook al weten we dat het zal werken

01:11.530 --> 01:15.630
omdat onze index. html bestand definieert deze globale variabele.

01:15.630 --> 01:18.010
En omdat we dit script hebben uitgesteld,

01:18.010 --> 01:19.493
zal dit script worden

01:19.493 --> 01:22.170
uitgevoerd na dit script.

01:22.170 --> 01:23.780
In zulke gevallen is er een andere

01:23.780 --> 01:26.460
syntaxis beschikbaar in TypeScript, en dat is

01:26.460 --> 01:29.460
het commando declare dat u kunt gebruiken.

01:29.460 --> 01:32.110
U kunt bepaalde variabelen declareren,

01:32.110 --> 01:34.150
bijvoorbeeld aan TypeScript.

01:34.150 --> 01:36.730
Je kan zeggen declare var GLOBAL en TypeScript

01:36.730 --> 01:38.640
vertellen dat dit bijvoorbeeld

01:38.640 --> 01:42.050
een string zal zijn, of dat dit iets is.

01:42.050 --> 01:43.687
Dit vertelt TypeScript in

01:43.687 --> 01:45.910
feite, "Maak je geen zorgen, het zal

01:45.910 --> 01:47.823
bestaan," en ooit als we dit opslaan,

01:49.090 --> 01:52.580
en ik stop met deze compiler en gebruik in plaats daarvan

01:52.580 --> 01:55.740
webpack, zien we wel deze uitvoer op onze pagina, omdat

01:55.740 --> 01:59.060
het technisch werkt, en met declare var vertellen we

01:59.060 --> 02:02.270
TypeScript ook dat dit bestaat.

02:02.270 --> 02:04.420
Nu ga ik deze dmidecode hier verwijderen, maar

02:04.420 --> 02:06.770
het is belangrijk om te weten dat dit sleutelwoord,

02:06.770 --> 02:08.830
dit commando, wordt gedeclareerd.

02:08.830 --> 02:12.160
Hiermee kunt u TypeScript functies of variabelen declareren

02:12.160 --> 02:14.590
waarvan u weet dat ze bestaan, of TypeScript

02:14.590 --> 02:17.210
laten weten van packages, globale variabelen in

02:17.210 --> 02:18.670
het algemeen, die Typescript

02:18.670 --> 02:20.150
niet kan kennen, maar waarvan

02:20.150 --> 02:22.080
u als ontwikkelaar weet dat ze er zullen

02:22.080 --> 02:23.373
zijn.
