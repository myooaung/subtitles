WEBVTT

00:02.480 --> 00:06.780
Homme : Maintenant, avec la connaissance des fonctions d'usine, ou des décorateurs

00:06.780 --> 00:10.523
d'usine, nous pouvons faire des choses assez intéressantes.

00:11.570 --> 00:16.240
Nous pourrions échanger une nouvelle usine de décorateurs avec le modèle,

00:16.240 --> 00:17.693
par exemple.

00:19.400 --> 00:21.590
Et ici, je m'attends à obtenir un modèle, qui

00:21.590 --> 00:23.780
devrait être une chaîne de caractères.

00:23.780 --> 00:28.780
Et un hookId, qui doit également être une chaîne.

00:28.870 --> 00:32.050
Puis ici, je renvoie ma fonction anonyme, qui est le véritable

00:32.050 --> 00:34.800
décorateur, comme vous l'avez appris.

00:34.800 --> 00:37.440
Parce que, encore une fois, j'ai une usine de décorateurs.

00:37.440 --> 00:40.570
Et là, je veux rendre un certain modèle, qui devrait

00:40.570 --> 00:42.530
être un code HTML, à un endroit

00:42.530 --> 00:46.590
quelconque du domaine, où je trouve ce hookId.

00:46.590 --> 00:49.160
Donc maintenant nous pouvons aller à l'index. html et ajoutez un tel endroit pour

00:49.160 --> 00:51.250
que nous puissions voir que cela fonctionne.

00:51.250 --> 00:54.483
On peut ajouter un div ici, avec un id de app, peut-être.

00:55.430 --> 00:59.560
Et ensuite dans l'application. ts, au lieu de logger, j'ajoute

00:59.560 --> 01:01.357
WithTemplate.

01:02.570 --> 01:05.130
Passons une chaîne vide comme premier argument pour le moment,

01:05.130 --> 01:06.810
et app comme second argument.

01:06.810 --> 01:09.313
Donc, cet ID que j'ai assigné à la div ici.

01:10.170 --> 01:12.400
Et maintenant, à l'intérieur de cette fonction interne

01:12.400 --> 01:13.830
se trouve notre décorateur actuel.

01:13.830 --> 01:16.540
À l'intérieur de cette fonction décoratrice,

01:16.540 --> 01:19.500
je veux atteindre l'élément.

01:19.500 --> 01:24.500
Vers l'élément de crochet avec le document. getElementById.

01:25.662 --> 01:29.390
Pour le hookId que nous recevons ici comme argument.

01:29.390 --> 01:33.480
Et si HookEl est une chose qui existe, alors je veux

01:34.330 --> 01:37.960
accéder à son innerHTML, et le rendre égal à

01:37.960 --> 01:39.920
template, disons.

01:39.920 --> 01:41.440
Une mise en place très simple, bien

01:41.440 --> 01:43.640
sûr, mais cela devrait faire l'affaire.

01:43.640 --> 01:45.460
Maintenant, je ne suis pas intéressé par le constructeur.

01:45.460 --> 01:48.110
Et pour dire à Typescript que je ne suis pas intéressé ici, je peux

01:48.110 --> 01:50.370
ajouter un tiret bas comme nom, ce qui signale essentiellement

01:50.370 --> 01:52.007
à Typescript, "Ouais, je sais que je reçois

01:52.007 --> 01:54.580
cet argument, mais je n'en ai pas besoin.

01:54.580 --> 01:56.170
Je dois cependant le préciser.

01:56.170 --> 01:58.920
Donc, avec ce trait de soulignement, je vous dis que je suis au

01:58.920 --> 02:00.850
courant, mais que je ne l'utiliserai pas. Parce que, tout ce que je veux faire pour le moment,

02:00.850 --> 02:02.300
c'est de rendre cette année.

02:02.300 --> 02:04.033
Donc maintenant, lorsque nous ajoutons

02:05.580 --> 02:07.750
WithTemplate ici, nous pouvons ajouter une

02:07.750 --> 02:10.400
balise h1, My Person Object comme ceci.

02:10.400 --> 02:14.570
Aussi, fermez-la.

02:14.570 --> 02:15.653
Et si nous sauvegardons maintenant cela, cela compile sans erreurs.

02:19.130 --> 02:22.380
Et en effet, ici vous voyez que cela a été rendu sur l'écran.

02:22.380 --> 02:26.350
Et cela vous montre, je l'espère, le pouvoir

02:26.350 --> 02:29.720
que vous avez avec les décorateurs.

02:29.720 --> 02:31.720
Vous pouvez créer des décorateurs vraiment avancés,

02:31.720 --> 02:34.780
comme celui-ci, qui fait soudainement de la magie en coulisse.

02:34.780 --> 02:38.500
Et c'est ce que je veux dire avec la métaprogrammation.

02:38.500 --> 02:41.260
Nous ajoutons ici une certaine logique, que nous pourrions

02:41.260 --> 02:43.930
exposer s'il s'agissait d'une bibliothèque tierce que nous

02:43.930 --> 02:46.190
partagerions avec d'autres utilisateurs.

02:46.190 --> 02:47.890
Nous pourrions l'exposer en tant qu'élément

02:47.890 --> 02:50.350
de la bibliothèque, et toute personne qui utilise notre

02:50.350 --> 02:52.630
bibliothèque peut importer cette fonction de décorateur

02:52.630 --> 02:54.910
et l'ajouter à une classe pour rendre soudainement

02:54.910 --> 02:57.408
du contenu comme par magie.

02:57.408 --> 03:00.500
Et bien sûr, vous êtes, vous n'êtes même pas limité pour faire ça.

03:00.500 --> 03:02.980
Si vous souhaitez afficher le nom qui fait

03:02.980 --> 03:05.340
partie de la classe lorsqu'elle est instanciée,

03:05.340 --> 03:07.850
vous pouvez également le faire.

03:07.850 --> 03:09.570
Nous obtenons notre constructeur : Fonction ici après tout.

03:09.570 --> 03:12.427
Maintenant, ce que nous pouvons faire avec cela est de créer

03:14.190 --> 03:16.010
une nouvelle personne ici, en appelant

03:16.010 --> 03:18.660
notre constructeur, parce que c'est notre constructeur

03:18.660 --> 03:20.380
: Fonction ici, après tout.

03:20.380 --> 03:23.820
Permettez-moi de le convertir en n'importe quelle fonction, pour que le script le

03:23.820 --> 03:26.570
permette et ne pense pas qu'il s'agit d'une fonction normale.

03:26.570 --> 03:29.240
Ensuite, nous pourrions accéder à notre élément

03:29.240 --> 03:31.880
hook et rechercher une balise h1, que vous n'aurez

03:31.880 --> 03:35.160
pas toujours, bien sûr, dans la pratique.

03:35.160 --> 03:36.070
Mais à des fins de démonstration,

03:36.070 --> 03:37.330
je suppose que nous en aurons toujours un ici.

03:37.330 --> 03:39.820
Oups, et je devrais toujours fermer le

03:39.820 --> 03:42.330
tag h1 en bas maintenant que je le vois.

03:42.330 --> 03:43.850
Et puis ici, avec un point d'exclamation,

03:43.850 --> 03:46.750
toujours en supposant que nous trouvons toujours un élément

03:46.750 --> 03:49.900
h1, nous pouvons définir un textContent égal à p. nom.

03:49.900 --> 03:53.660
Si je fais cela et que je l'enregistre,

03:53.660 --> 03:56.010
j'affiche maintenant le nom, qui fait

03:56.010 --> 03:59.400
partie de l'objet ici dans le modèle.

03:59.400 --> 04:01.540
C'est donc quelque chose que vous pouvez faire,

04:01.540 --> 04:03.420
et bien sûr vous pouvez écrire des décorateurs

04:03.420 --> 04:06.010
bien plus élaborés que ce que je fais ici.

04:06.010 --> 04:07.840
Prenons l'exemple d'Angular, un framework très populaire

04:07.840 --> 04:09.550
qui utilise le langage de type script.

04:09.550 --> 04:12.270
Ils utilisent des décorateurs, comme ce décorateur

04:12.270 --> 04:15.740
de composant, pour vous permettre de passer dans un objet

04:15.740 --> 04:18.420
où vous spécifiez des choses comme le modèle

04:18.420 --> 04:21.020
pour discomponent.

04:21.020 --> 04:21.930
Et le sélecteur dans

04:21.930 --> 04:23.950
le dom où ce modèle doit être rendu.

04:23.950 --> 04:25.760
C'est relativement proche de ce que nous avons défini ici.

04:25.760 --> 04:28.170
Un modèle, et ensuite un endroit où il doit être rendu.

04:28.170 --> 04:31.230
Il va sans dire que les décorateurs Angular sont

04:31.230 --> 04:33.760
bien sûr beaucoup plus avancés et élaborés

04:33.760 --> 04:36.550
que notre décorateur de base.

04:36.550 --> 04:38.740
Néanmoins, l'idée de base est la même.

04:38.740 --> 04:41.660
Angular vous donne les décorateurs ici, de sorte

04:41.660 --> 04:43.900
que vous pouvez spécifier un certain

04:43.900 --> 04:46.700
code HTML, qui peut être connecté à votre classe

04:46.700 --> 04:49.470
de composant qui sera rendu au dom lorsque ce

04:49.470 --> 04:51.760
composant est rendu.

04:51.760 --> 04:53.830
Si vous ne savez pas comment fonctionne

04:53.830 --> 04:55.850
Angular, ce n'est pas un problème.

04:55.850 --> 04:57.060
Il faut juste comprendre qu'il

04:57.060 --> 04:58.700
fonctionne avec des classes et des décorateurs,

04:58.700 --> 05:01.300
et qu'il fait en gros ce que nous avons fait ici.

05:01.300 --> 05:03.600
C'est donc une autre chose que vous pouvez faire avec les décorateurs,

05:03.600 --> 05:06.400
ou comme spécifiquement ici, avec les usines de décorateurs.

05:06.400 --> 05:09.220
Parce que cela nous permet de faire passer ce conflit

05:09.220 --> 05:12.210
supplémentaire dont nous avons besoin ici.

05:12.210 --> 05:13.610
Et c'est aussi ce que je voulais dire avec la métaprogrammation.

05:13.610 --> 05:16.590
Nous créons des choses, nous créons des fonctions de décorateur,

05:16.590 --> 05:21.130
dont on peut dire qu'elles ont un certain impact sur l'utilisateur final.

05:21.130 --> 05:24.840
Dans le double rendu NP ou quelque chose sur l'écran ici.

05:24.840 --> 05:27.510
Mais nous le faisons avec un outil que nous exposons

05:27.510 --> 05:29.090
aux autres développeurs.

05:29.090 --> 05:31.370
Car ce décorateur est un outil, que les autres

05:31.370 --> 05:33.970
développeurs doivent utiliser en l'ajoutant

05:33.970 --> 05:36.000
à une classe dans cet exemple.

05:36.000 --> 05:38.580
Sinon, cela ne servirait à rien.

05:38.580 --> 05:40.300
Nous fournissons donc des utilitaires

05:40.300 --> 05:43.490
supplémentaires aux développeurs, que les autres développeurs

05:43.490 --> 05:46.590
peuvent utiliser pour, par exemple, rendre quelque chose à l'écran

05:46.590 --> 05:49.050
de manière pratique pour un cours.

05:49.050 --> 05:50.590
C'est la même chose que ce que fait Angular

05:50.590 --> 05:52.940
ici, de manière plus avancée, et c'est quelque chose pour lequel

05:52.940 --> 05:54.220
les niveleurs sont parfaits.
