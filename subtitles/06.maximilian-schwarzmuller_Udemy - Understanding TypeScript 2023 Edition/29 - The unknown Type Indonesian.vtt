WEBVTT

00:02.340 --> 00:04.020
Instruktur: Kita hampir selesai dengan dasar-dasar

00:04.020 --> 00:06.240
tentang TypeScript dan tipe-tipe inti.

00:06.240 --> 00:10.130
Ada dua jenis lagi yang baik untuk diperhatikan, karena mereka

00:10.130 --> 00:13.170
akan menjadi masalah dari waktu ke waktu.

00:13.170 --> 00:16.603
Jenis pertama adalah jenis yang tidak diketahui.

00:17.860 --> 00:20.350
Untuk itu, saya akan menamai file ini fungsi Anda. ts dan menambahkan

00:20.350 --> 00:23.343
aplikasi baru. ts dan di sana, katakanlah

00:24.290 --> 00:28.620
kita memiliki variabel baru, userInput, dan

00:28.620 --> 00:32.143
ini bertipe unknown.

00:32.143 --> 00:34.850
Ini bukan tipe any, yang akan menjadi default, tetapi unknown,

00:34.850 --> 00:36.690
yang merupakan tipe berbeda yang diperkenalkan

00:36.690 --> 00:38.500
oleh TypeScript.

00:38.500 --> 00:40.950
Mungkin tidak diketahui karena kita belum tahu apa yang pada

00:40.950 --> 00:42.950
akhirnya akan dimasukkan oleh pengguna.

00:42.950 --> 00:45.593
Jika itu angka, jika itu string, kita tidak tahu.

00:46.770 --> 00:48.960
Sekarang hal yang menarik tentang unknown

00:48.960 --> 00:51.020
type adalah kita dapat menyimpan nilai apa

00:51.020 --> 00:54.630
pun di sana tanpa mendapatkan error, jadi ini semua diperbolehkan.

00:54.630 --> 00:57.660
Jika sekarang saya mengkompilasi file saya di sini, Anda lihat

00:57.660 --> 01:00.290
saya tidak mendapatkan kesalahan kompilasi.

01:00.290 --> 01:01.910
Jadi, sejauh ini, ini sama seperti

01:01.910 --> 01:03.820
jika kita tidak menetapkan tipe di sini,

01:03.820 --> 01:05.260
dan karenanya kita memiliki tipe

01:05.260 --> 01:08.610
any atau jika kita secara eksplisit menetapkan any sebagai tipe.

01:08.610 --> 01:11.810
Tapi tetap saja, tidak diketahui berbeda dengan yang lain.

01:11.810 --> 01:15.430
Ini di sini berfungsi, tetapi kita akan mengalami masalah jika

01:15.430 --> 01:19.660
saya memiliki variabel lain, katakanlah userName, yang seharusnya

01:19.660 --> 01:20.890
berupa string.

01:20.890 --> 01:22.860
Dan itu tidak diinisialisasi di sini,

01:22.860 --> 01:27.200
tetapi kemudian di sini saya ingin mengatur userName sama dengan userInput.

01:27.200 --> 01:29.150
Sekarang Anda lihat, kita mendapatkan error.

01:29.150 --> 01:33.010
Tipe unknown tidak dapat ditetapkan ke tipe string.

01:33.010 --> 01:34.590
Jadi, userName menginginkan sebuah

01:34.590 --> 01:37.990
string dan tentu saja unknown tidak dijamin menjadi string.

01:37.990 --> 01:41.620
Di sini, saya menugaskan satu, tetapi itu hanya terjadi di baris ini.

01:41.620 --> 01:44.460
userInput secara teknis dapat menyimpan nilai

01:44.460 --> 01:46.490
apa pun karena tidak diketahui.

01:46.490 --> 01:47.640
Sekarang, hal yang menarik

01:47.640 --> 01:51.060
adalah jika saya mengganti unknown ke any, kesalahan ini hilang karena

01:51.060 --> 01:53.900
any adalah tipe yang paling fleksibel di TypeScript dan pada

01:53.900 --> 01:56.810
dasarnya menonaktifkan semua pemeriksaan tipe dan TypeScript

01:56.810 --> 02:00.950
hanya berkata, "Saya menyerah, lakukan apa pun yang Anda inginkan. Unknown sedikit lebih terbatas daripada yang lainnya.

02:00.950 --> 02:05.510
Dengan unknown, kita harus terlebih dahulu memeriksa tipe yang

02:05.510 --> 02:08.820
saat ini disimpan di userInput sebelum kita dapat

02:08.820 --> 02:12.200
menetapkannya ke, misalnya, variabel yang menginginkan

02:12.200 --> 02:14.400
string.

02:14.400 --> 02:16.180
Jadi, karena string yang diinginkan

02:16.180 --> 02:18.110
di sini, kita bisa memeriksa apakah tipe

02:18.110 --> 02:23.110
userInput sama dengan string dan TypeScript akan mendeteksi pemeriksaan ini dan memahami bahwa

02:23.650 --> 02:26.020
di sini, apa yang disimpan di userName karena

02:26.020 --> 02:29.790
berakhir dari pernyataan if ini, di mana saya memeriksa userInput yang

02:29.790 --> 02:31.830
bertipe string, userInput dijamin menjadi

02:31.830 --> 02:34.680
string dan oleh karena itu saya dapat dengan aman menetapkannya

02:34.680 --> 02:36.920
ke userName.

02:36.920 --> 02:39.990
Jadi, saya memerlukan pemeriksaan tipe tambahan

02:39.990 --> 02:42.670
di sini dengan unknown untuk dapat menetapkan

02:42.670 --> 02:47.560
nilai yang tidak diketahui ke nilai dengan tipe tetap dan oleh karena itu unknown

02:47.560 --> 02:50.530
adalah pilihan yang lebih baik daripada apa pun

02:50.530 --> 02:54.780
jika Anda tahu saya tidak dapat mengetahui dengan tepat jenis penyimpanan

02:54.780 --> 02:56.930
apa di sana, mungkin angka, mungkin

02:56.930 --> 02:59.450
string, tapi saya tahu apa yang ingin saya

02:59.450 --> 03:02.910
lakukan dengan itu pada akhirnya.

03:02.910 --> 03:05.470
Nah, tambahkan saja pemeriksaan ekstra untuk memastikan

03:05.470 --> 03:07.440
bahwa apa yang ingin Anda lakukan dapat dilakukan,

03:07.440 --> 03:10.240
sehingga jika Anda ingin bekerja dengan string, Anda memiliki

03:10.240 --> 03:12.160
string, dan Anda baik-baik saja.

03:12.160 --> 03:14.690
Dan kemudian tidak diketahui lebih baik daripada apa pun

03:14.690 --> 03:18.720
karena memastikan bahwa Anda tidak diizinkan untuk melakukan segalanya tetapi Anda memiliki

03:18.720 --> 03:20.930
setidaknya beberapa jenis pemeriksaan.

03:20.930 --> 03:23.260
Tentu saja, jika Anda memiliki kesempatan untuk mengetahui

03:23.260 --> 03:25.990
sebelumnya bahwa userInput selalu berupa string, atau selalu

03:25.990 --> 03:28.150
string atau angka, maka Anda harus menggunakan

03:28.150 --> 03:30.000
string atau tipe union seperti itu, bukannya

03:30.000 --> 03:31.680
unknown.

03:31.680 --> 03:34.460
Jadi, unknown masih merupakan jenis yang tidak boleh Anda gunakan sepanjang

03:34.460 --> 03:36.010
waktu, tetapi lebih baik daripada yang lain

03:36.010 --> 03:37.460
karena alasan yang dijelaskan.
