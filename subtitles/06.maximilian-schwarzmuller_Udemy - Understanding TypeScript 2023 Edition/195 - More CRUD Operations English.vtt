WEBVTT

1
00:00:02.150 --> 00:00:03.930
<v Instructor>So we added our first POST request,</v>

2
00:00:03.930 --> 00:00:06.120
we're capable of creating a TODO.

3
00:00:06.120 --> 00:00:07.250
Now we got more routes.

4
00:00:07.250 --> 00:00:10.170
We also got a route to serve all the TODOS we created.

5
00:00:10.170 --> 00:00:11.750
Now please be aware that,

6
00:00:11.750 --> 00:00:14.160
your TODOS will reset every time you change

7
00:00:14.160 --> 00:00:16.630
and save your code because that restarts your server

8
00:00:16.630 --> 00:00:18.920
and that loses everything that was stored in memory

9
00:00:18.920 --> 00:00:21.330
and we're only managing our TODOS in memory.

10
00:00:21.330 --> 00:00:23.560
That's simply something we have here in the dummy app,

11
00:00:23.560 --> 00:00:24.930
in a real app, you would of course

12
00:00:24.930 --> 00:00:28.200
store this in a real database, fetch it from there and so on

13
00:00:28.200 --> 00:00:30.280
and therefore it would survive.

14
00:00:30.280 --> 00:00:35.060
Nonetheless here, we can create a new function, getTodos

15
00:00:35.060 --> 00:00:38.030
and this will be a RequestHandler here,

16
00:00:38.030 --> 00:00:39.740
so you don't have to set the types

17
00:00:39.740 --> 00:00:42.330
on all the parameters individually.

18
00:00:42.330 --> 00:00:46.120
And then in there, I simply want to return a response

19
00:00:46.120 --> 00:00:49.560
where I return some JSON data where I have my todos

20
00:00:49.560 --> 00:00:52.420
and there, I just want to reach out to my TODOs array

21
00:00:52.420 --> 00:00:54.330
and send that back to the client,

22
00:00:54.330 --> 00:00:56.530
and that already can be all.

23
00:00:56.530 --> 00:00:57.810
Of course, you could tweak this,

24
00:00:57.810 --> 00:00:59.640
maybe you wanna have a different logic,

25
00:00:59.640 --> 00:01:03.120
maybe you wanna sort the TODOS first or anything like that

26
00:01:03.120 --> 00:01:06.690
but this in its simplest form already is all we need here,

27
00:01:06.690 --> 00:01:10.530
it returns our TODOS, so a very simple function.

28
00:01:10.530 --> 00:01:13.240
In the TODOS routes, we now just need to connect this.

29
00:01:13.240 --> 00:01:17.680
So let's import getTodos from our controller as well

30
00:01:17.680 --> 00:01:20.640
and connect it here with this route.

31
00:01:20.640 --> 00:01:23.430
And with that, if we now save this,

32
00:01:23.430 --> 00:01:25.250
we can see it in action already.

33
00:01:25.250 --> 00:01:29.860
If we go back and we create a new request, a GET request,

34
00:01:29.860 --> 00:01:34.860
to http://localhost:3000/todos/

35
00:01:39.400 --> 00:01:41.410
and we send this,

36
00:01:41.410 --> 00:01:44.400
we get back an empty array, now why is that?

37
00:01:44.400 --> 00:01:46.750
Well, I said that the TODOS would be cleared

38
00:01:46.750 --> 00:01:48.010
whenever we changed the code

39
00:01:48.010 --> 00:01:49.750
and the server therefore restarts,

40
00:01:49.750 --> 00:01:51.470
so we should create a new TODO now

41
00:01:51.470 --> 00:01:54.110
without restarting the server in between now.

42
00:01:54.110 --> 00:01:57.360
And if we created that TODO and we now get our TODOS,

43
00:01:57.360 --> 00:02:01.770
we see that created TODO with the ID, serial 9811

44
00:02:01.770 --> 00:02:04.380
and so on, here as well.

45
00:02:04.380 --> 00:02:05.960
So that's already working.

46
00:02:05.960 --> 00:02:08.980
Now since we're on it, let's also work on patch and delete

47
00:02:08.980 --> 00:02:10.590
and of course feel free to come up

48
00:02:10.590 --> 00:02:12.680
with some logic there on your own.

49
00:02:12.680 --> 00:02:14.970
In the end, now you have all the building blocks

50
00:02:14.970 --> 00:02:16.130
you need for that.

51
00:02:16.130 --> 00:02:18.480
Of course we'll now also do it together though.

52
00:02:19.390 --> 00:02:21.570
So here now on the patch request,

53
00:02:21.570 --> 00:02:24.350
let's add a new controller function.

54
00:02:24.350 --> 00:02:29.350
export const updateTodo, which is of type RequestHandler

55
00:02:30.660 --> 00:02:34.680
and should hold a function in this format we already know.

56
00:02:34.680 --> 00:02:37.310
And in there, the goal is to extract data

57
00:02:37.310 --> 00:02:40.630
about the new TODO from the incoming request,

58
00:02:40.630 --> 00:02:44.140
and then update the TODO with that new data.

59
00:02:44.140 --> 00:02:47.240
Now, please note, that as part of our route here,

60
00:02:47.240 --> 00:02:48.900
we have a dynamic segment.

61
00:02:48.900 --> 00:02:51.140
We have this id segment.

62
00:02:51.140 --> 00:02:54.610
So that's something we will be able to extract from the URL,

63
00:02:54.610 --> 00:02:58.750
a concrete value for this dynamic segment can be extracted.

64
00:02:58.750 --> 00:03:02.147
So here on our incoming request, you can get the todoId,

65
00:03:03.172 --> 00:03:07.987
from our request params.id,

66
00:03:07.987 --> 00:03:11.660
.id, because that's the name I chose here.

67
00:03:11.660 --> 00:03:13.060
If you chose a different name here,

68
00:03:13.060 --> 00:03:15.810
you have to use a different name there.

69
00:03:15.810 --> 00:03:18.410
Now, we don't get types of support here, right?

70
00:03:18.410 --> 00:03:20.450
Params is of type any.

71
00:03:20.450 --> 00:03:23.400
Now because types can parse this String

72
00:03:23.400 --> 00:03:25.460
and understand what's in there.

73
00:03:25.460 --> 00:03:28.920
So to get better types of support, we can actually utilize

74
00:03:28.920 --> 00:03:32.880
that the RequestHandler here is a generic type

75
00:03:32.880 --> 00:03:35.880
and we can add angled brackets and basically tell TypeScript

76
00:03:35.880 --> 00:03:37.800
which parameters will have.

77
00:03:37.800 --> 00:03:39.300
We simply set this to an object

78
00:03:39.300 --> 00:03:42.180
and there we now have a key value map of all our parents

79
00:03:42.180 --> 00:03:43.830
we have in the URL.

80
00:03:43.830 --> 00:03:46.730
So for example, that we have an ID parameter,

81
00:03:46.730 --> 00:03:48.610
which in the end holds a String.

82
00:03:48.610 --> 00:03:50.230
That's something we can add here

83
00:03:50.230 --> 00:03:52.560
and now you'll see we get auto completion

84
00:03:52.560 --> 00:03:55.520
and TypeScript knows that this will be a String.

85
00:03:55.520 --> 00:03:58.640
So that's better, using this generic type.

86
00:03:58.640 --> 00:04:01.050
Now, we have the ID,

87
00:04:01.050 --> 00:04:03.560
we also need something from the request body,

88
00:04:03.560 --> 00:04:08.130
to be precise, we need the new text from the request body.

89
00:04:08.130 --> 00:04:11.700
So the updatedText can be retrieved from request body

90
00:04:11.700 --> 00:04:14.100
and now again, let's use typecasting here,

91
00:04:14.100 --> 00:04:16.910
to make it clear that there will be a text property

92
00:04:16.910 --> 00:04:19.750
in the body and that this will be of type String.

93
00:04:19.750 --> 00:04:22.373
And let's retrieve the text thereafter.

94
00:04:23.830 --> 00:04:27.720
And now we can update the TODO in our TODOS array up there.

95
00:04:27.720 --> 00:04:28.710
For that, let's find the index

96
00:04:28.710 --> 00:04:30.808
of the TODO we wanna update.

97
00:04:30.808 --> 00:04:33.760
todoIndex, by reaching out to TODOS,

98
00:04:33.760 --> 00:04:36.090
and with findIndex, we can run some logic

99
00:04:36.090 --> 00:04:38.060
on every item in the TODOS array.

100
00:04:38.060 --> 00:04:40.010
And there we're looking at every todo

101
00:04:40.010 --> 00:04:44.300
and if todo id is equal to the todoId we have here,

102
00:04:44.300 --> 00:04:47.140
we know that's the TODO we wanna update.

103
00:04:47.140 --> 00:04:50.550
Now if that for some reason should be minus one,

104
00:04:50.550 --> 00:04:52.610
it means we didn't find that TODO,

105
00:04:52.610 --> 00:04:56.960
so if that is smaller than zero essentially,

106
00:04:56.960 --> 00:04:59.630
we know something went wrong and in this case,

107
00:04:59.630 --> 00:05:03.633
I'll throw a new error where I say, Could not find todo!

108
00:05:04.760 --> 00:05:06.130
And that should then trigger

109
00:05:06.130 --> 00:05:08.633
our default error handling middleware here.

110
00:05:09.870 --> 00:05:12.450
Now if we do make it past this if check,

111
00:05:12.450 --> 00:05:15.040
we did find the TODO, and then we can simply

112
00:05:15.040 --> 00:05:18.960
update the todo at this index in our TODOS array

113
00:05:18.960 --> 00:05:23.270
to be a new TODO, where we keep the old id.

114
00:05:23.270 --> 00:05:27.030
So where we access TODOS, todoIndex.id,

115
00:05:27.030 --> 00:05:29.490
so we access the old ID and stored it,

116
00:05:29.490 --> 00:05:31.713
but the text here which I set,

117
00:05:32.870 --> 00:05:34.570
of course we don't assign it like this.

118
00:05:34.570 --> 00:05:38.750
But the text here which we set, is now the updatedText.

119
00:05:38.750 --> 00:05:41.340
This replaces the TODO here, and thereafter

120
00:05:41.340 --> 00:05:45.280
we can send back a response, with a message of,

121
00:05:45.280 --> 00:05:47.053
Updated, for example.

122
00:05:47.990 --> 00:05:51.470
And where we then also append the updatedTodo

123
00:05:51.470 --> 00:05:55.090
to the outgoing response, and set this equal to,

124
00:05:55.090 --> 00:05:59.090
well, TODOS todoIndex, which now holds the new value.

125
00:05:59.090 --> 00:06:02.430
This is something we call do here in our updating logic,

126
00:06:02.430 --> 00:06:03.960
of course, some dummy code

127
00:06:03.960 --> 00:06:07.150
because we're still working with this in memory TODOS array

128
00:06:07.150 --> 00:06:09.060
but it shows how we use TypeScript here,

129
00:06:09.060 --> 00:06:11.100
and that's the main thing.

130
00:06:11.100 --> 00:06:13.620
So let's try this update function now.

131
00:06:13.620 --> 00:06:16.260
For that we can go back to Postman, and in the end,

132
00:06:16.260 --> 00:06:19.960
now I wanna send a PATCH request, because in the routes,

133
00:06:19.960 --> 00:06:23.460
we're waiting for this patch request to this route.

134
00:06:23.460 --> 00:06:24.293
And speaking of,

135
00:06:24.293 --> 00:06:26.490
that we should maybe also connect this route

136
00:06:26.490 --> 00:06:28.850
to this controller function first.

137
00:06:28.850 --> 00:06:33.420
So, let's go to the routes file and import updateTodo

138
00:06:33.420 --> 00:06:35.590
and establish this connection here.

139
00:06:35.590 --> 00:06:38.570
And thereafter, we can proceed and send this request.

140
00:06:38.570 --> 00:06:41.890
So now back to Postman, PATCH is what we wanna send

141
00:06:41.890 --> 00:06:46.320
and then it's http://localhost:3000/todos

142
00:06:46.320 --> 00:06:49.430
and now the idea of the TODO which we wanna update

143
00:06:49.430 --> 00:06:50.573
as part of the URL.

144
00:06:51.500 --> 00:06:54.970
Now since we saved something, since we saved some changes,

145
00:06:54.970 --> 00:06:58.890
our server restarted, so all TODOS will be lost anyways.

146
00:06:58.890 --> 00:07:01.150
So let's first of all, resend that POST request

147
00:07:01.150 --> 00:07:02.450
to create a new TODO.

148
00:07:02.450 --> 00:07:05.170
And then here we got the ID of that TODO.

149
00:07:05.170 --> 00:07:08.800
Now we can add this id here to this URL.

150
00:07:08.800 --> 00:07:11.780
And I'll also add a body which should be of type JSON,

151
00:07:11.780 --> 00:07:15.560
where we set this new data we wanna send to the server.

152
00:07:15.560 --> 00:07:18.570
Now keep in mind in our update controller,

153
00:07:18.570 --> 00:07:20.970
I'm looking for a field named text,

154
00:07:20.970 --> 00:07:22.900
in the incoming request body.

155
00:07:22.900 --> 00:07:24.580
So we should again provide this here

156
00:07:24.580 --> 00:07:26.690
in the JSON data we're sending.

157
00:07:26.690 --> 00:07:29.440
Finish the course in one month,

158
00:07:29.440 --> 00:07:31.520
this may be our new text.

159
00:07:31.520 --> 00:07:35.210
If we now send this, we see it was updated.

160
00:07:35.210 --> 00:07:37.180
And if I now get all TODOS,

161
00:07:37.180 --> 00:07:39.430
we also see there's still only is one TODO,

162
00:07:39.430 --> 00:07:41.623
but there is simply changed the text.

163
00:07:42.950 --> 00:07:46.470
So now this is working, we're also able to update the TODO.

164
00:07:46.470 --> 00:07:48.780
Let's also check what happens if I have an id

165
00:07:48.780 --> 00:07:50.620
which does not exist, for example,

166
00:07:50.620 --> 00:07:53.430
by deleting the last digit here, then I get,

167
00:07:53.430 --> 00:07:57.670
Could not find todo in my error response of type 500.

168
00:07:57.670 --> 00:07:59.660
So this also is looking good.

169
00:07:59.660 --> 00:08:03.800
As a Last step, let's add a function to delete a TODO.

170
00:08:03.800 --> 00:08:07.210
So in the controllers folder, I'll export a constant named,

171
00:08:07.210 --> 00:08:11.460
deleteTodo, which is of type RequestHandler.

172
00:08:11.460 --> 00:08:14.040
And again, we get our request, our response,

173
00:08:14.040 --> 00:08:17.320
and then the next function here.

174
00:08:17.320 --> 00:08:20.270
And in here, now I want to find the TODO

175
00:08:20.270 --> 00:08:21.543
and simply remove it.

176
00:08:22.380 --> 00:08:25.090
For that, we can actually copy this code

177
00:08:25.090 --> 00:08:29.360
where we get the ID of the TODO and then the index.

178
00:08:29.360 --> 00:08:32.210
Just get rid of that line where we extract the updated text

179
00:08:32.210 --> 00:08:35.660
because for a DELETE request, there will be no request body,

180
00:08:35.660 --> 00:08:37.400
but we need the, id of the TODO

181
00:08:37.400 --> 00:08:40.340
which is part of our route of the URL.

182
00:08:40.340 --> 00:08:43.530
And then we find the index and once we got the index,

183
00:08:43.530 --> 00:08:47.350
we can go to the TODOs, call the splice method

184
00:08:47.350 --> 00:08:51.620
and remove the todo at the todoIndex, and only that todo.

185
00:08:51.620 --> 00:08:54.040
And thereafter we can send back a response

186
00:08:54.040 --> 00:08:58.490
where we say, Todo deleted!,

187
00:08:58.490 --> 00:08:59.380
just like that.

188
00:08:59.380 --> 00:09:01.760
This could be our deletion logic.

189
00:09:01.760 --> 00:09:04.560
Now it's time to connect this, so in the routes folder,

190
00:09:04.560 --> 00:09:07.440
let's import deleteTodo from controllers TODOs

191
00:09:08.340 --> 00:09:09.963
and connect it down there.

192
00:09:11.120 --> 00:09:14.370
And with this connected, if we now save this,

193
00:09:14.370 --> 00:09:16.720
again, we need to add a TODO because all TODOs

194
00:09:16.720 --> 00:09:20.550
are cleared with every server restart, so here it is.

195
00:09:20.550 --> 00:09:22.680
Copy that id.

196
00:09:22.680 --> 00:09:24.980
And let's now send that DELETE request.

197
00:09:24.980 --> 00:09:27.160
So a new DELETE request here,

198
00:09:27.160 --> 00:09:32.160
to http:/localhost:3000/todos/this id.

199
00:09:32.800 --> 00:09:34.880
No body needs to be added.

200
00:09:34.880 --> 00:09:37.180
Click Send and it works.

201
00:09:37.180 --> 00:09:39.950
If I send it again, we get the could not find error

202
00:09:39.950 --> 00:09:41.570
because we just deleted it.

203
00:09:41.570 --> 00:09:42.723
And if we get all TODOS,

204
00:09:42.723 --> 00:09:45.550
that should be an empty array and this.

205
00:09:45.550 --> 00:09:46.750
So this is now working

206
00:09:46.750 --> 00:09:49.550
and this is basically a CRUD functionality,

207
00:09:49.550 --> 00:09:50.990
added with TypeScript here

208
00:09:50.990 --> 00:09:52.940
in this simple Node and Express app.

209
00:09:52.940 --> 00:09:56.060
Now of course that's a fairly trivial application here,

210
00:09:56.060 --> 00:09:58.870
but it already shows us some usage of TypeScript.

211
00:09:58.870 --> 00:10:00.480
It shows us that we write code

212
00:10:00.480 --> 00:10:02.000
that should look familiar to you

213
00:10:02.000 --> 00:10:04.750
if you work your way through the rest of this course,

214
00:10:04.750 --> 00:10:07.610
and that we're using all the features you learned there.

215
00:10:07.610 --> 00:10:10.110
And just as in the React section, that's all is important.

216
00:10:10.110 --> 00:10:11.520
You can use anything you learned

217
00:10:11.520 --> 00:10:13.340
about TypeScript here as well,

218
00:10:13.340 --> 00:10:14.990
because it is getting compiled

219
00:10:14.990 --> 00:10:16.890
to regular JavaScript code in the end,

220
00:10:16.890 --> 00:10:18.063
which we then serve.

