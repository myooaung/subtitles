WEBVTT

1
00:00:02.260 --> 00:00:05.180
<v Instructor>Now if we come back to this interface here,</v>

2
00:00:05.180 --> 00:00:08.230
the question is why do we need this?

3
00:00:08.230 --> 00:00:10.160
Wouldn't we have the exact same thing

4
00:00:10.160 --> 00:00:13.420
if we would add a custom type here and there?

5
00:00:13.420 --> 00:00:15.580
The difference is just that we have to add an equal sign

6
00:00:15.580 --> 00:00:18.470
and then we're saying the Person type is an object

7
00:00:18.470 --> 00:00:19.940
which looks like this?

8
00:00:19.940 --> 00:00:21.490
And indeed, if we save that,

9
00:00:21.490 --> 00:00:23.220
it compiles without errors.

10
00:00:23.220 --> 00:00:26.740
So we could replace our interface with such type

11
00:00:26.740 --> 00:00:28.490
and it works as before.

12
00:00:28.490 --> 00:00:31.290
So why do we have an interface then?

13
00:00:31.290 --> 00:00:32.277
Well, an interface

14
00:00:32.277 --> 00:00:35.310
and a custom type are not exactly the same

15
00:00:35.310 --> 00:00:39.260
whilst often, you can use them interchangeably

16
00:00:39.260 --> 00:00:42.130
and you can use an interface instead of a custom type

17
00:00:42.130 --> 00:00:43.520
or the other way around.

18
00:00:43.520 --> 00:00:45.720
There also are some differences.

19
00:00:45.720 --> 00:00:47.400
Well, one nature difference is

20
00:00:47.400 --> 00:00:49.070
that interfaces can only be used

21
00:00:49.070 --> 00:00:51.470
to describe the structure of an object,

22
00:00:51.470 --> 00:00:53.780
you can use type for that as well,

23
00:00:53.780 --> 00:00:55.250
but instead of a custom type,

24
00:00:55.250 --> 00:00:56.800
you can also store other things

25
00:00:56.800 --> 00:01:00.350
like union types and so on what we did early in the course.

26
00:01:00.350 --> 00:01:03.740
That sounds like type is therefore more flexible,

27
00:01:03.740 --> 00:01:08.510
but the other side of the coin is that interface is clearer.

28
00:01:08.510 --> 00:01:10.870
When you define something as an interface,

29
00:01:10.870 --> 00:01:12.900
it's super clear that you want

30
00:01:12.900 --> 00:01:15.580
to define the structure of an object with that.

31
00:01:15.580 --> 00:01:18.360
And indeed when it comes to defining object types,

32
00:01:18.360 --> 00:01:21.630
you more often see interfaces out there in the wild.

33
00:01:21.630 --> 00:01:23.800
Then, you see custom types.

34
00:01:23.800 --> 00:01:26.410
Now, another thing you can do with interfaces

35
00:01:26.410 --> 00:01:27.530
but you would only be able

36
00:01:27.530 --> 00:01:30.090
to do with custom types is

37
00:01:30.090 --> 00:01:33.360
you can implement an interface in a class.

38
00:01:33.360 --> 00:01:34.820
What do we mean by that?

39
00:01:34.820 --> 00:01:38.360
The reason why you often work with interfaces is

40
00:01:38.360 --> 00:01:40.550
that an interface can be used

41
00:01:40.550 --> 00:01:43.750
as a contract a class can implement

42
00:01:43.750 --> 00:01:46.400
and a class then has to adhere to.

43
00:01:46.400 --> 00:01:48.150
What do we mean with that?

44
00:01:48.150 --> 00:01:52.390
Let's say our interface is not a Person interface

45
00:01:52.390 --> 00:01:53.970
with the name and the age,

46
00:01:53.970 --> 00:01:57.690
but instead we name it Greetable.

47
00:01:57.690 --> 00:01:59.270
Now this might look like a strange name

48
00:01:59.270 --> 00:02:01.090
but in the end this just says

49
00:02:01.090 --> 00:02:03.560
any object that should be treated

50
00:02:03.560 --> 00:02:06.310
as Greetable has to be object with a name

51
00:02:06.310 --> 00:02:09.251
and with a greet method.

52
00:02:09.251 --> 00:02:10.783
So now, we could say this here,

53
00:02:10.783 --> 00:02:14.630
this user1 variable should hold a Greetable object

54
00:02:14.630 --> 00:02:16.730
and of course now we get an error

55
00:02:16.730 --> 00:02:19.930
because we have more than just name and greet.

56
00:02:19.930 --> 00:02:22.000
But we could use this interface

57
00:02:22.000 --> 00:02:25.860
to share it amongst possibly multiple classes we have

58
00:02:25.860 --> 00:02:27.410
to ensure that every class

59
00:02:27.410 --> 00:02:30.860
that adheres to this interface has to have a name property

60
00:02:30.860 --> 00:02:33.410
and has to have a greet method.

61
00:02:33.410 --> 00:02:35.730
So here, we could now add a Person class,

62
00:02:35.730 --> 00:02:36.970
the name is available again

63
00:02:36.970 --> 00:02:38.540
because we renamed the interface.

64
00:02:38.540 --> 00:02:40.790
And now, tell typescript

65
00:02:40.790 --> 00:02:45.480
and this class should basically adhere to this interface.

66
00:02:45.480 --> 00:02:48.350
It should implement this interface.

67
00:02:48.350 --> 00:02:53.000
It should follow that contract setup by this interface.

68
00:02:53.000 --> 00:02:55.260
We do this by adding the implements keyword

69
00:02:55.260 --> 00:02:56.930
after the class name.

70
00:02:56.930 --> 00:02:59.280
And then, the name of our interface, Greetable.

71
00:03:00.420 --> 00:03:02.780
And you can implement more than one interface.

72
00:03:02.780 --> 00:03:04.710
That's a difference compared to inheritance.

73
00:03:04.710 --> 00:03:07.270
You can inherit only from one class,

74
00:03:07.270 --> 00:03:09.370
you can implement multiple interfaces

75
00:03:09.370 --> 00:03:12.730
by simply separating them with a comma,

76
00:03:12.730 --> 00:03:14.750
so there, we could have another interface

77
00:03:14.750 --> 00:03:16.000
if we had one.

78
00:03:16.000 --> 00:03:17.710
Here, I only have one though.

79
00:03:17.710 --> 00:03:20.350
And now, the implication of this is that

80
00:03:20.350 --> 00:03:21.740
we get an error here

81
00:03:21.740 --> 00:03:25.200
because our class incorrectly implements the interface.

82
00:03:25.200 --> 00:03:27.240
It does not have the name property,

83
00:03:27.240 --> 00:03:29.690
does not have the greet method.

84
00:03:29.690 --> 00:03:33.960
So now, we have to set this here in our class,

85
00:03:33.960 --> 00:03:35.610
maybe I'll set a constructor

86
00:03:35.610 --> 00:03:38.173
where we get a value for the name,

87
00:03:39.010 --> 00:03:41.260
and then set it up like this,

88
00:03:41.260 --> 00:03:44.380
and where we also add our greet method

89
00:03:44.380 --> 00:03:48.080
where we then might have this logic from out there.

90
00:03:48.080 --> 00:03:50.780
Now, in our class, we can have more that that.

91
00:03:50.780 --> 00:03:52.340
We can have more fields,

92
00:03:52.340 --> 00:03:53.920
we can have more methods,

93
00:03:53.920 --> 00:03:56.030
we can also extend this class,

94
00:03:56.030 --> 00:03:59.170
we can work with this class as we always can.

95
00:03:59.170 --> 00:04:02.640
But we're forced to implement this method correctly

96
00:04:02.640 --> 00:04:04.400
to have this name property

97
00:04:04.400 --> 00:04:07.040
because we're implementing this interface.

98
00:04:07.040 --> 00:04:09.740
And therefore, interfaces are often used

99
00:04:09.740 --> 00:04:13.870
to share functionality amongst different classes

100
00:04:13.870 --> 00:04:16.550
not regarding their concrete implementation.

101
00:04:16.550 --> 00:04:19.240
You can't have implementation or values

102
00:04:19.240 --> 00:04:22.450
inside of interfaces but regarding the structure,

103
00:04:22.450 --> 00:04:24.980
regarding the features a class should have.

104
00:04:24.980 --> 00:04:28.120
It's a bit like working with abstract classes,

105
00:04:28.120 --> 00:04:29.640
therefore, the difference being

106
00:04:29.640 --> 00:04:33.520
that an interface has no implementation details at all,

107
00:04:33.520 --> 00:04:37.160
whereas abstract classes can be a mixture of

108
00:04:37.160 --> 00:04:39.330
you have to overwrite these parts

109
00:04:39.330 --> 00:04:42.470
and I have a concrete implementation parts.

110
00:04:42.470 --> 00:04:43.730
That's an important difference

111
00:04:43.730 --> 00:04:46.860
between interfaces and abstract classes.

112
00:04:46.860 --> 00:04:47.850
Now with that however,

113
00:04:47.850 --> 00:04:49.790
we have our person class here.

114
00:04:49.790 --> 00:04:53.910
And now here, user1 can be created

115
00:04:53.910 --> 00:04:55.930
by using new Person

116
00:04:55.930 --> 00:04:58.090
and feeding in the name for example.

117
00:04:58.090 --> 00:04:59.730
And now, use see it's okay

118
00:04:59.730 --> 00:05:02.300
that we have this age here in user1

119
00:05:02.300 --> 00:05:05.870
because we boat user1 based on Person,

120
00:05:05.870 --> 00:05:07.540
Person implements Greetable,

121
00:05:07.540 --> 00:05:10.440
and you can add more than Greetable ones in a class

122
00:05:10.440 --> 00:05:14.010
but you have to satisfy the conditions setup

123
00:05:14.010 --> 00:05:15.120
by the interface.

124
00:05:15.120 --> 00:05:17.130
And therefore now, if we save everything,

125
00:05:17.130 --> 00:05:18.730
we have a valid code,

126
00:05:18.730 --> 00:05:23.040
and if we log our user1 down there with console.log,

127
00:05:23.040 --> 00:05:25.430
we see that it is a normal object

128
00:05:25.430 --> 00:05:27.590
with the age and the name in this case,

129
00:05:27.590 --> 00:05:30.950
but the key takeaway is that it is based on a class

130
00:05:30.950 --> 00:05:32.770
which implements the interface.

131
00:05:32.770 --> 00:05:35.550
And you can then all use the interface as a type.

132
00:05:35.550 --> 00:05:37.780
Of course, we could have set this to type Person,

133
00:05:37.780 --> 00:05:40.580
but as you see, using type Greetable here it works

134
00:05:40.580 --> 00:05:42.200
because the Person object

135
00:05:42.200 --> 00:05:45.090
which we store in the user1 class in the end is based

136
00:05:45.090 --> 00:05:46.300
on the Greetable interface.

137
00:05:46.300 --> 00:05:47.750
It implements this.

138
00:05:47.750 --> 00:05:49.820
So that's another powerful feature.

139
00:05:49.820 --> 00:05:53.690
You can use an interface as a type on some constant

140
00:05:53.690 --> 00:05:58.010
or variable which will then actually store another class

141
00:05:58.010 --> 00:06:02.330
of another type which in turn is based on the interface type

142
00:06:02.330 --> 00:06:03.950
because it implements it.

143
00:06:03.950 --> 00:06:06.530
So that's interfaces in a nutshell.

144
00:06:06.530 --> 00:06:08.643
Lot of powerful features included.

