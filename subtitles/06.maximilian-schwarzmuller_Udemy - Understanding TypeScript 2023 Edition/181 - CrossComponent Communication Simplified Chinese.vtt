WEBVTT

00:02.230 --> 00:07.960
讲师：现在我们要把输入的文本从NewTodo组件传输到app组件｡

00:07.960 --> 00:09.690
为什么要应用程序组件？

00:09.690 --> 00:11.160
因为这是我们的组件,

00:11.160 --> 00:16.340
它直接链接到NewTodo和TodoList组件｡

00:16.340 --> 00:19.320
这里我想添加一个新函数, 我将它命名为todoAddHandler,

00:20.800 --> 00:31.390
名字由你决定, 我只是想使用在函数的末尾加上handler的约定, 如果它是一个触发事件的函数.

00:31.390 --> 00:34.330
在这里我需要得到一个字符串形式的文本,

00:34.330 --> 00:37.970
这是我们的函数, 所以我们可以期待这个.

00:37.970 --> 00:40.720
然后我们想把这个作为待办事项加在这里｡ 

00:40.720 --> 00:42.270
当然, 既然您了解React,

00:42.270 --> 00:45.230
您就知道单独更新此数组不会奏效, 这不会重新呈现此组件,

00:45.230 --> 00:54.750
因此我们必须在此处使用一些状态管理来使其正常工作, 但在执行此操作之前, 我们至少要确保获得此函数的值｡

00:54.750 --> 01:00.133
因此, 让我们在这里记录文本, 然后我们可以将其状态管理部分作为第二步｡

01:01.000 --> 01:09.050
为了在这里实现它, 我们需要确保这个todoAddHandler函数可以从NewTodo组件内部调用,

01:09.050 --> 01:12.113
因为这是我们最后添加todo的地方｡

01:13.090 --> 01:17.860
现在, 我们如何使这个函数在这个组件内部可调用？

01:17.860 --> 01:22.300
我们在这个函数上传递一个指向该组件的指针｡ 

01:22.300 --> 01:25.640
这里我们可以添加一个属性名onAddTodo,

01:25.640 --> 01:28.560
你可以随意命名它, 我这样命名是因为这基本上会发生在一个事件上,

01:28.560 --> 01:34.600
当然这个事件是我们控制的, 但仍然是.

01:34.600 --> 01:38.030
这里我想转发todoAddHandler, 所以我在这个函数上传递了一个指针,

01:38.030 --> 01:44.620
我没有在这里执行它, 我只是传递了一个指向这个函数的指针, 到onAddTodo中, 这样就不用在props上调用NewTodo了,

01:44.620 --> 01:56.220
我们可以在这里得到, 我们可以调用这个, 这样我们就可以调用props｡

01:56.220 --> 01:56.220
onAddTodo并转发输入的文本,

01:56.220 --> 02:08.240
这就是我们的想法, 但是, 当然, TypeScript不喜欢这样, 因为它不知道在我们的props上会有一个onAddTodo属性, 以及这样的属性是什么样子的｡

02:08.240 --> 02:11.670
因此, 就像在TodoList中一样, 我们必须设置一个接口,

02:11.670 --> 02:14.540
或者只是一个props的类型定义｡

02:14.540 --> 02:18.200
让我们转到NewTodo, 再添加一个接口,

02:18.200 --> 02:23.060
你也可以添加一个类型, 当然, 我会在这里把它们混合起来｡

02:23.060 --> 02:27.660
我通常会选择接口, 但使用类型也可以｡

02:27.660 --> 02:30.493
要使用一个类型, 我们可以将其命名为NewTodoProps,

02:31.357 --> 02:36.830
该类型是一个对象类型, 我希望在其中有一个onAddTodo属性, 而这又是一个函数类型,

02:36.830 --> 02:40.753
它将指向一个函数.

02:41.720 --> 02:44.290
你将像这样定义函数类型, 正如你所学到的,

02:44.290 --> 02:46.760
它将是一个不返回任何东西的函数,

02:46.760 --> 02:51.410
但它需要一个周长, 这将是用户输入的文本｡

02:51.410 --> 02:57.123
字符串类型的Todo文本, 就是这个函数所需要的.

02:58.920 --> 03:03.103
现在, 让我们在这个泛型类型上设置它, 并指向NewTodoProps｡

03:04.510 --> 03:08.620
这样, 我们就可以调用onAddTodo并传入一个字符串｡ 

03:08.620 --> 03:11.470
如果它试图在这里传递一个数字, 例如,

03:11.470 --> 03:17.590
我们, 当然, 会得到一个错误, 因为我们清楚地定义了参数必须是一个字符串｡

03:17.590 --> 03:18.733
那么, 让我们还原一下｡ 

03:20.550 --> 03:24.630
这样, 如果我们再次输入一个新目标, 在一个月内完成它,

03:24.630 --> 03:27.150
我们会再次在这里看到一个日志,

03:27.150 --> 03:28.690
但现在它来自应用程序组件,

03:28.690 --> 03:34.170
您可以清楚地看到, 因为我们在这里添加了这个日志｡

03:34.170 --> 03:39.480
因此NewTodo组件和此处的app组件之间的通信可以正常工作｡

03:39.480 --> 03:42.750
接下来, 让我们在这里实现一些状态管理,

03:42.750 --> 03:44.160
同样, 如果你愿意,

03:44.160 --> 03:46.850
你也可以先自己尝试, 以确保我们在状态中呈现待办事项,

03:46.850 --> 03:54.460
这样每当我们更新待办事项时, 我们也会重新呈现这个组件｡

03:54.460 --> 03:56.263
我们下节课再讲.
