WEBVTT

00:02.320 --> 00:05.210
Istruttore: Per implementare questo, creerò prima

00:05.210 --> 00:08.217
di tutto un'interfaccia ValidatorConfig, in cui configurare

00:09.550 --> 00:12.680
lo storage con cui voglio lavorare.

00:12.680 --> 00:15.130
La mia idea è di avere un paio di proprietà e per

00:15.130 --> 00:17.653
questo uso questa notazione di tipo indice.

00:19.720 --> 00:21.450
Che sono fondamentalmente stringhe,

00:21.450 --> 00:23.440
dove il valore è un altro oggetto.

00:23.440 --> 00:26.380
Perché questo sarebbe fondamentalmente il nome della classe

00:26.380 --> 00:29.570
per la quale vogliamo registrare alcune proprietà convalidate.

00:29.570 --> 00:31.700
E poi nell'oggetto che memorizziamo,

00:31.700 --> 00:34.580
abbiamo le proprietà concrete della classe a

00:34.580 --> 00:37.010
cui sono collegati i validatori.

00:37.010 --> 00:40.610
Quindi abbiamo la proprietà validabile, se vogliamo

00:40.610 --> 00:42.240
chiamarla così, che sarà

00:42.240 --> 00:44.660
una chiave stringa.

00:44.660 --> 00:47.350
Il valore dovrebbe essere un array di

00:47.350 --> 00:50.010
stringhe, in cui sono presenti elementi

00:52.420 --> 00:55.490
come required, positive e così via.

00:55.490 --> 00:57.460
Quindi qualcosa del genere potrebbe essere

00:57.460 --> 00:59.323
aggiunto qui come elenco di validatori.

01:00.300 --> 01:05.300
Ora possiamo creare la configurazione di registeredValidators, che dovrebbe essere

01:05.790 --> 01:07.950
di tipo ValidatorConfig, inizialmente

01:07.950 --> 01:09.640
un oggetto vuoto.

01:09.640 --> 01:11.500
Perché inizialmente, all'avvio dell'applicazione,

01:11.500 --> 01:13.920
quando viene caricata la libreria di terze parti, non è ancora

01:13.920 --> 01:16.293
stato registrato alcun validatore.

01:17.640 --> 01:19.920
E poi qui, nei nostri direttori,

01:19.920 --> 01:23.490
vogliamo aggiungere qualcosa a quel registro.

01:23.490 --> 01:28.020
Si tenga presente che una funzione decoratore di proprietà riceve due

01:28.020 --> 01:31.010
argomenti: il target, che è il prototipo dell'oggetto

01:31.010 --> 01:33.910
su cui si trova la proprietà, o la funzione costruttore

01:33.910 --> 01:39.300
se si tratta di una proprietà statica, e il nome della proprietà.

01:39.300 --> 01:40.710
Questi sono i due argomenti

01:40.710 --> 01:44.370
che otteniamo qui, non otteniamo il descrittore delle proprietà.

01:44.370 --> 01:46.760
Ora possiamo andare ai nostri validatori registrati

01:46.760 --> 01:51.463
e aggiungere una nuova voce per l'obiettivo. costruttore.

01:52.730 --> 01:56.070
Il prototipo dell'istanza con cui stiamo lavorando

01:56.070 --> 01:58.430
avrà una chiave costruttore che punta

01:58.430 --> 02:02.610
alla funzione costruttore usata per creare il nostro oggetto.

02:02.610 --> 02:04.690
Pertanto, sarà fondamentalmente qualcosa

02:04.690 --> 02:06.120
di simile al corso qui, in modo

02:06.120 --> 02:08.460
che il nome della funzione del costruttore possa

02:08.460 --> 02:10.560
essere recuperato da quel costruttore.

02:10.560 --> 02:11.900
Poiché il costruttore è una

02:11.900 --> 02:13.400
funzione, possiamo usare la proprietà

02:13.400 --> 02:15.900
name, che esiste per qualsiasi funzione in JavaScript,

02:15.900 --> 02:18.310
per ottenere il nome della funzione e questo sarà

02:18.310 --> 02:20.620
il nome del corso, ad esempio.

02:20.620 --> 02:23.390
Quindi ora registriamo il nome della classe come chiave

02:23.390 --> 02:25.030
nei validatori registrati.

02:25.030 --> 02:28.130
Il valore di questo oggetto dovrebbe essere un altro oggetto.

02:28.130 --> 02:30.630
Quindi, lo imposto uguale a un altro oggetto qui.

02:30.630 --> 02:32.390
E in quell'oggetto ho anche una proprietà

02:32.390 --> 02:34.640
assegnata dinamicamente, dove uso il mio

02:34.640 --> 02:37.400
propName, quindi la proprietà per la quale voglio

02:37.400 --> 02:40.190
aggiungere un validatore come chiave.

02:40.190 --> 02:42.310
Ora il valore è un array di stringhe

02:42.310 --> 02:45.530
e qui aggiungerò required come stringa.

02:45.530 --> 02:47.920
Ovviamente si tratta di un validatore molto ingenuo.

02:47.920 --> 02:50.000
Se ci fossero già altri validatori registrati

02:50.000 --> 02:52.830
per questa proprietà, li sovrascriverei qui.

02:52.830 --> 02:54.900
Quindi sarebbe meglio recuperare prima

02:54.900 --> 02:58.360
tutti i validatori esistenti e poi copiarli in questo array e aggiungere

02:58.360 --> 03:01.320
solo quelli necessari all'array esistente.

03:01.320 --> 03:02.870
Anche in questo caso, per risparmiare

03:02.870 --> 03:04.740
tempo e per mostrare l'idea generale,

03:04.740 --> 03:06.873
adotterò un approccio più ingenuo.

03:07.980 --> 03:11.180
Ottenuta l'annotazione richiesta, lavoriamo

03:11.180 --> 03:14.690
ora sull'annotazione del numero positivo.

03:14.690 --> 03:16.730
E, naturalmente, è praticamente la stessa cosa.

03:16.730 --> 03:21.410
Copio il codice, ma lo imposto a positivo o a qualsiasi identificatore

03:21.410 --> 03:23.600
si voglia usare e, naturalmente,

03:23.600 --> 03:25.010
dobbiamo assicurarci

03:25.010 --> 03:27.650
di accettare gli argomenti giusti.

03:27.650 --> 03:30.990
Quindi, insieme a ciò che abbiamo aggiunto finora, registriamo

03:30.990 --> 03:34.420
queste proprietà e i loro validatori nella nostra configurazione

03:34.420 --> 03:38.640
globale, quando questa classe è definita.

03:38.640 --> 03:41.460
Ora dobbiamo solo lavorare sulla funzione di validazione.

03:41.460 --> 03:43.400
La funzione validate dovrebbe passare

03:43.400 --> 03:46.240
in rassegna tutti i validatori registrati e quindi

03:46.240 --> 03:50.340
eseguire una logica diversa in base ai validatori trovati.

03:50.340 --> 03:54.857
Quindi, prima di tutto, voglio recuperare la configurazione dell'oggetto

03:54.857 --> 03:57.600
concreto con cui abbiamo a che fare.

03:57.600 --> 04:00.390
Per questo, dobbiamo scoprire su quale funzione del costruttore

04:00.390 --> 04:04.277
si basa l'oggetto e poi ottenere la configurazione di validazione o le mappature

04:04.277 --> 04:07.040
del validatore di proprietà che abbiamo impostato per

04:07.040 --> 04:09.070
quell'oggetto.

04:09.070 --> 04:11.960
Quindi chiameremo questo oggetto validatori,

04:11.960 --> 04:14.520
o forse objValidatorConfig.

04:14.520 --> 04:17.110
E raggiungiamo i validatori registrati e accediamo a una

04:17.110 --> 04:22.110
proprietà che dovrebbe essere obj. costruttore. nome, la stessa logica di prima,

04:23.900 --> 04:27.060
accediamo alla proprietà del costruttore che esiste sul prototipo

04:27.060 --> 04:28.980
dell'oggetto e quindi possiamo accedervi

04:28.980 --> 04:31.720
direttamente sull'oggetto, grazie a come funziona

04:31.720 --> 04:33.340
JavaScript e grazie alla catena

04:33.340 --> 04:35.050
dei prototipi raggiungeremo il

04:35.050 --> 04:36.710
prototipo se non riusciamo a trovare

04:36.710 --> 04:38.920
la proprietà del costruttore sull'oggetto

04:38.920 --> 04:41.580
stesso, e funzionerà.

04:41.580 --> 04:43.840
Quindi ora abbiamo il nome del costruttore

04:43.840 --> 04:46.970
e scopriamo che, per esempio, questo Corso è basato

04:46.970 --> 04:49.050
sulla classe Corso.

04:49.050 --> 04:51.290
Quindi cerchiamo qualsiasi configurazione del validatore

04:51.290 --> 04:52.800
che abbiamo per la classe Corso.

04:52.800 --> 04:55.910
Ora stiamo guardando questo oggetto, in pratica.

04:55.910 --> 04:58.207
Ora si trova in objValidatorConfig.

04:59.310 --> 05:01.540
Naturalmente, questo potrebbe non essere trovato se

05:01.540 --> 05:03.270
stiamo cercando di convalidare un oggetto

05:03.270 --> 05:05.110
per il quale non è stato registrato nulla.

05:05.110 --> 05:08.270
Quindi, se non abbiamo alcun validatore di configurazione,

05:08.270 --> 05:11.640
se non troviamo nulla, voglio restituire true, perché allora

05:11.640 --> 05:14.010
questo è certamente valido, giusto?

05:14.010 --> 05:15.330
Non c'è nulla da convalidare,

05:15.330 --> 05:18.350
quindi l'oggetto è certamente valido.

05:18.350 --> 05:20.900
Altrimenti, se lo troviamo, voglio che si

05:20.900 --> 05:24.910
faccia un ciclo su questo oggetto interno con un ciclo for in.

05:24.910 --> 05:27.580
Quindi, con questo ciclo, si passa attraverso le

05:27.580 --> 05:29.560
proprietà per le quali sono stati registrati

05:29.560 --> 05:33.007
i validatori, con const prop in objValidatorConfig.

05:34.380 --> 05:36.950
Questo mi dà accesso a tutti i nomi delle proprietà

05:36.950 --> 05:39.630
per le quali potremmo avere dei validatori.

05:39.630 --> 05:41.180
Quindi ora, ovviamente, devo esaminare

05:41.180 --> 05:43.970
tutti i validatori che potremmo avere per una proprietà.

05:43.970 --> 05:45.230
Dovrebbe essere sempre un array,

05:45.230 --> 05:47.680
anche se è stato aggiunto un solo validatore.

05:47.680 --> 05:49.530
Possiamo quindi usare un ciclo

05:49.530 --> 05:53.040
for of e ottenere il validatore concreto, che abbiamo,

05:53.040 --> 05:56.930
per objValidatorConfig per questa proprietà.

05:56.930 --> 06:00.560
Quindi ora otteniamo cose come positive o required, che sono memorizzate

06:00.560 --> 06:02.963
nella costante del validatore.

06:04.080 --> 06:06.110
E poi potremmo avere un'istruzione switch qui,

06:06.110 --> 06:08.030
o naturalmente chiamare funzioni esterne

06:08.030 --> 06:09.810
in base al validatore trovato.

06:09.810 --> 06:12.130
Ma in questo caso utilizzerò un'istruzione switch incorporata,

06:12.130 --> 06:16.620
un'istruzione switch sul validatore e poi, fondamentalmente, avremo casi diversi.

06:16.620 --> 06:19.683
Ad esempio, il caso richiesto qui.

06:20.800 --> 06:22.163
Ops, come questo.

06:23.470 --> 06:27.900
Qui, voglio restituire true se la nostra proprietà, che stiamo

06:27.900 --> 06:28.950
guardando...

06:28.950 --> 06:33.260
Quindi questa proprietà di questo oggetto ha un valore non vuoto.

06:33.260 --> 06:38.260
Quindi restituirò true se l'oggetto prop è vero.

06:39.170 --> 06:42.010
Per convertire questo valore in un valore vero o falso, possiamo

06:42.010 --> 06:44.420
utilizzare l'operatore double bang.

06:44.420 --> 06:46.840
Ho sentito lamentele sul fatto che non sa se l'oggetto

06:46.840 --> 06:49.440
ha questa proprietà, quindi dovremmo cambiare questa

06:49.440 --> 06:51.220
proprietà in any, per ottenere una

06:51.220 --> 06:53.560
maggiore flessibilità.

06:53.560 --> 06:56.150
Naturalmente si può anche lavorare sulle tipologie qui presenti.

06:56.150 --> 07:00.480
Per esempio, trasformare gli identificatori in tipi chiaramente definiti,

07:00.480 --> 07:03.430
come gli Enum, con cui si lavora e magari migliorare

07:03.430 --> 07:05.490
la tipizzazione.

07:05.490 --> 07:07.420
Anche se, a dire il vero, dato che voglio che questo

07:07.420 --> 07:09.960
funzioni con qualsiasi oggetto, è difficile migliorarlo

07:09.960 --> 07:11.810
in modo che TypeScript lo apprezzi.

07:11.810 --> 07:13.330
Potremmo lavorare con

07:13.330 --> 07:16.800
tipi generici, ma in questo caso dovremmo limitare

07:16.800 --> 07:19.740
gli oggetti che i tipi generici dovrebbero

07:19.740 --> 07:22.110
estendere e quindi accettare.

07:22.110 --> 07:25.850
Quindi, qualsiasi potrebbe essere l'opzione migliore per essere davvero

07:25.850 --> 07:27.880
flessibili e accettare molti oggetti

07:27.880 --> 07:30.640
diversi in questa funzione di convalida.

07:30.640 --> 07:32.270
Ora torniamo al segmento switch,

07:32.270 --> 07:34.750
il caso richiesto è un caso possibile, ma abbiamo

07:34.750 --> 07:37.650
anche il caso positivo che vogliamo gestire.

07:37.650 --> 07:39.280
E qui voglio restituire

07:39.280 --> 07:43.770
true se la proprietà che stiamo osservando è maggiore di zero.

07:43.770 --> 07:47.260
Quindi, se l'oggetto prop è maggiore di zero, restituisce

07:47.260 --> 07:50.463
true, altrimenti restituisce false.

07:52.890 --> 07:55.730
Ora, se non riusciamo a entrare in questo blocco for

07:55.730 --> 07:57.970
o se in qualche modo abbiamo un ciclo che

07:57.970 --> 07:59.310
non attraversa nulla perché

07:59.310 --> 08:01.500
non abbiamo registrato alcun validatore,

08:01.500 --> 08:04.130
abbiamo passato un array vuoto o qualcosa del genere,

08:04.130 --> 08:06.350
quindi se superiamo questo ciclo for, restituirò

08:06.350 --> 08:10.280
anche true come valore predefinito.

08:10.280 --> 08:12.800
Ora restituiamo qualcosa in ogni circostanza e possiamo

08:12.800 --> 08:14.503
utilizzare la convalida.

08:15.450 --> 08:19.253
Vediamo se funziona, se ora salviamo e ricarichiamo l'applicazione

08:23.610 --> 08:26.330
e proviamo a inviarla, otterremo un errore:

08:26.330 --> 08:29.400
input non valido, riprovare.

08:29.400 --> 08:30.780
Se inserisco un testo qui:

08:30.780 --> 08:34.793
JavaScript The Complete Guide, ottengo comunque questo messaggio

08:35.940 --> 08:38.100
perché il mio numero è sbagliato.

08:38.100 --> 08:40.440
Se inserisco meno uno, otterremo anche questo,

08:40.440 --> 08:42.020
perché non è positivo.

08:42.020 --> 08:45.020
Tuttavia, se inserisco un numero positivo, funziona.

08:45.020 --> 08:48.230
Se ho un numero positivo ma il primo campo è vuoto, funziona

08:48.230 --> 08:49.860
anche questo, quindi è un aspetto

08:49.860 --> 08:52.190
su cui dovremo lavorare.

08:52.190 --> 08:54.600
Scopriamo quindi qual è il problema.

08:54.600 --> 08:57.380
Per scoprirlo, aggiungerò un piccolo log della

08:57.380 --> 08:59.830
console e registrerò la proprietà che stiamo

08:59.830 --> 09:00.720
guardando.

09:00.720 --> 09:02.340
Naturalmente si possono utilizzare anche i punti di interruzione

09:02.340 --> 09:03.513
e gli strumenti per gli sviluppatori.

09:04.820 --> 09:07.410
Se faccio clic su Salva, la prima cosa che

09:07.410 --> 09:09.250
viene convalidata è il prezzo

09:09.250 --> 09:10.623
e poi ci fermiamo.

09:11.530 --> 09:15.100
Quindi il prezzo è la prima proprietà che viene convalidata.

09:15.100 --> 09:16.980
E questo è l'aspetto interessante: il

09:16.980 --> 09:20.090
prezzo è in realtà l'unica proprietà che conta in questo caso,

09:20.090 --> 09:22.230
perché il ritorno avviene in modo valido.

09:22.230 --> 09:25.840
Ciò significa che la prima volta che troviamo un validatore che restituisce

09:25.840 --> 09:29.050
true o false, lo restituiamo immediatamente e non ci preoccupiamo

09:29.050 --> 09:31.480
degli altri validatori.

09:31.480 --> 09:33.320
Ora, nel caso falso questo va bene,

09:33.320 --> 09:35.360
perché se un elemento è falso, se una proprietà

09:35.360 --> 09:37.450
è falsa, non valida, allora siamo a posto

09:37.450 --> 09:40.140
e non guardiamo nemmeno le altre.

09:40.140 --> 09:42.590
Ma per il caso reale è un problema.

09:42.590 --> 09:44.970
Se la prima volta che un immobile soddisfa

09:44.970 --> 09:49.410
le nostre aspettative ritorna vero, abbiamo un problema.

09:49.410 --> 09:51.540
Quindi dovremmo migliorare questo aspetto

09:51.540 --> 09:55.130
con una proprietà isValid, che inizialmente è true.

09:55.130 --> 09:56.780
È una variabile valida, intendo.

09:56.780 --> 10:01.780
E poi qui impostiamo isValid uguale a isValid e questo qui,

10:03.857 --> 10:08.857
e lo stesso qui sotto, impostiamo questo uguale a questo.

10:09.570 --> 10:11.290
In modo da non ritornare immediatamente,

10:11.290 --> 10:14.750
ma aggiornare isValid e interrompere in seguito per non cadere

10:14.750 --> 10:16.700
nel vuoto.

10:16.700 --> 10:19.200
Il risultato è che alla fine, dopo tutti questi

10:19.200 --> 10:22.710
cicli, isValid è ancora vero, ma non appena uno di questi

10:22.710 --> 10:25.710
controlli è falso, grazie al funzionamento di JavaScript,

10:25.710 --> 10:27.530
il valore complessivo di isValid

10:27.530 --> 10:29.670
sarà falso, perché true combinato

10:29.670 --> 10:33.000
con false restituirà false.

10:33.000 --> 10:36.020
E poi in basso dovremmo restituire isValid.

10:36.020 --> 10:39.330
In questo modo ci assicuriamo che tutte le proprietà siano controllate

10:39.330 --> 10:42.433
e non solo la prima che JavaScript esamina.

10:43.320 --> 10:45.460
Questo, tuttavia, non sarà il nostro unico problema:

10:45.460 --> 10:47.750
abbiamo un problema anche quando diamo un'occhiata

10:47.750 --> 10:50.480
a come registriamo la logica del validatore.

10:50.480 --> 10:53.720
Sovrascrivo sempre i validatori registrati per

10:53.720 --> 10:57.130
un determinato nome di classe con un nuovo oggetto.

10:57.130 --> 11:00.050
Dovremmo invece aggiungere qui i validatori esistenti, in

11:00.050 --> 11:01.630
modo da evitare che ciò accada.

11:01.630 --> 11:04.140
Per esempio, abbiamo l'operatore spread per prendere

11:04.140 --> 11:08.130
tutte le coppie chiave-valore esistenti per quel nome di classe nei validatori

11:08.130 --> 11:10.870
registrati e aggiungerle per prime prima cosa prima

11:10.870 --> 11:14.413
di aggiungere la nostra, naturalmente anche qui sotto.

11:16.890 --> 11:18.733
Ora, se salviamo questo e torniamo

11:19.650 --> 11:21.980
alla nostra applicazione.

11:21.980 --> 11:24.150
Se sono entrambi vuoti, falliamo.

11:24.150 --> 11:26.280
Se inseriamo un prezzo valido ma abbiamo

11:26.280 --> 11:28.490
un titolo non valido, falliamo.

11:28.490 --> 11:31.510
Se entrambi sono validi, abbiamo successo.

11:31.510 --> 11:35.570
Se abbiamo un titolo valido ma non il prezzo, falliamo.

11:35.570 --> 11:37.230
Anche questo con un prezzo negativo.

11:37.230 --> 11:39.170
Perciò mi sembra che questo sia un buon risultato

11:39.170 --> 11:42.280
e che questa sia la nostra prima implementazione ingenua di come un validatore

11:42.280 --> 11:44.500
di questo tipo potrebbe funzionare con l'aiuto dei

11:44.500 --> 11:46.670
decoratori di TypeScript.

11:46.670 --> 11:49.150
E tenete presente che tutto questo, tutti i decoratori,

11:49.150 --> 11:52.310
la funzione di validazione e il registro, sarebbero nascosti

11:52.310 --> 11:53.590
all'utente.

11:53.590 --> 11:55.820
Potrebbe essere parte di una libreria di terze parti

11:55.820 --> 11:56.780
su cui state lavorando,

11:56.780 --> 11:59.250
naturalmente in modo più elaborato di quello che probabilmente

11:59.250 --> 12:01.300
condividete con i vostri utenti finali.

12:01.300 --> 12:04.160
L'utente finale dovrebbe importare queste cose, aggiungere

12:04.160 --> 12:06.800
questi decoratori e chiamare validate, ottenendo

12:06.800 --> 12:08.840
così un modo molto comodo per aggiungere

12:08.840 --> 12:11.763
la validazione alle proprie classi.
