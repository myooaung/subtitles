WEBVTT

00:02.140 --> 00:04.200
-: Ahora eso es todo para las clases.

00:04.200 --> 00:06.180
Aprendimos sobre las propias clases.

00:06.180 --> 00:08.260
Aprendimos sobre sus propiedades,

00:08.260 --> 00:09.850
los modificadores de ejes,

00:09.850 --> 00:12.110
private para ejes internos, protected

00:12.110 --> 00:15.990
para ejes internos también en clases heredadas, y public

00:15.990 --> 00:19.560
para ejes de todas partes.

00:19.560 --> 00:21.610
También hemos aprendido sobre los métodos que podemos añadir.

00:21.610 --> 00:23.520
Sobre los métodos y propiedades estáticas.

00:23.520 --> 00:25.520
Sobre los métodos abstractos y

00:25.520 --> 00:28.280
las clases abstractas, que es importante cuando

00:28.280 --> 00:31.350
hablamos de otro concepto importante, la herencia

00:31.350 --> 00:33.490
que podemos utilizar.

00:33.490 --> 00:36.360
Aquí, estamos heredando de 'Department' con la palabra

00:36.360 --> 00:37.660
clave 'extends'.

00:37.660 --> 00:40.440
Esto nos permite compartir funcionalidades,

00:40.440 --> 00:41.830
propiedades y métodos,

00:41.830 --> 00:45.100
de la clase 'Departamento' con esta clase heredera

00:45.100 --> 00:47.162
y añadir nuestras propias funcionalidades

00:47.162 --> 00:50.300
o anular las existentes.

00:50.300 --> 00:52.560
Ya sea porque tenemos que anular como en

00:52.560 --> 00:55.620
el caso de 'describir' que es un método abstracto.

00:55.620 --> 00:58.710
O porque queremos anular, como en el caso de 'addEmployee'

00:58.710 --> 01:01.640
aquí en el Departamento de Contabilidad.

01:01.640 --> 01:04.290
Este no es un método abstracto en la clase base,

01:04.290 --> 01:07.540
pero por supuesto podemos anularlo si queremos.

01:07.540 --> 01:10.370
También aprendimos sobre el patrón singleton y los

01:10.370 --> 01:13.150
"constructores privados" que también pueden ser

01:13.150 --> 01:14.180
útiles a veces.

01:14.180 --> 01:17.290
Y en general, ahora espero que tengas una buena idea de las

01:17.290 --> 01:20.290
clases y de lo que puedes hacer con ellas en TypeScript.

01:20.290 --> 01:22.760
En general, por supuesto, tendrías que saber qué

01:22.760 --> 01:26.030
son las clases y los objetos, y también un poco qué son los prototipos

01:26.030 --> 01:29.690
en Vanilla JavaScript, porque eso no es generalmente algo introducido

01:29.690 --> 01:31.870
por TypeScript, pero por supuesto es algo

01:31.870 --> 01:34.600
con lo que TypeScript está relacionado porque TypeScript

01:34.600 --> 01:37.800
se basa en estas características por defecto de JavaScript, y

01:37.800 --> 01:41.663
añade su propia magia encima de estas características.
