WEBVTT

00:02.170 --> 00:06.250
-: Neben Objekten gibt es in JavaScript auch Arrays, eine

00:06.250 --> 00:08.300
sehr wichtige Art von Daten.

00:08.300 --> 00:10.810
Wie Sie wissen, werden Arrays in JavaScript auf diese Weise erstellt,

00:10.810 --> 00:12.560
und Sie können darin beliebige Daten speichern:

00:12.560 --> 00:15.970
Zahlen, Zeichenketten, Boolesche Operatoren, Objekte, andere Arrays, schließlich

00:15.970 --> 00:17.970
können Sie verschachtelte Arrays haben, und Sie können

00:17.970 --> 00:19.380
auch Daten mischen.

00:19.380 --> 00:23.200
Sie können ein Array mit Strings und Zahlen gemischt haben.

00:23.200 --> 00:25.570
Und TypeScript unterstützt auch Arrays.

00:25.570 --> 00:29.260
Jedes JavaScript-Array wird unterstützt, und die Typen dieses

00:29.260 --> 00:32.140
Arrays können flexibel oder streng sein.

00:32.140 --> 00:35.200
Schauen wir uns das mal in TypeScript an.

00:35.200 --> 00:38.760
Für das hier in app. ts, nehmen wir an, unsere Person hat

00:38.760 --> 00:42.810
auch einen Schlüssel Hobbys, aber wir könnten natürlich auch eine Variable oder

00:42.810 --> 00:45.660
eine Konstante Hobbys außerhalb des Objekts haben.

00:45.660 --> 00:49.050
Die Verwendung von Arrays ist also innerhalb und außerhalb

00:49.050 --> 00:50.853
von Objekten genau gleich.

00:51.950 --> 00:54.780
Hier haben wir also Hobbys, und Hobbys

00:54.780 --> 00:58.140
können Sport und Kochen sein, sagen wir mal.

00:58.140 --> 01:01.150
Ich habe also zwei Elemente darin, und diese Elemente sind,

01:01.150 --> 01:03.620
wie Sie sehen können, Zeichenketten.

01:03.620 --> 01:07.570
Wenn wir jetzt mit dem Mauszeiger über hobbies fahren, hat TypeScript

01:07.570 --> 01:10.630
den Abstand des Typs string array korrekt erkannt.

01:10.630 --> 01:12.500
Das ist eine Syntax, die Sie noch nicht

01:12.500 --> 01:16.140
gesehen haben, aber so beschreibt TypeScript ein Array von Daten.

01:16.140 --> 01:18.510
Sie haben die eckigen Klammern und davor

01:18.510 --> 01:21.340
die Art der Daten, die dort gespeichert sind.

01:21.340 --> 01:23.530
Dies ist der Typ, die Gruppe des Typs ist abgeleitet.

01:23.530 --> 01:25.810
Es hat gesehen, dass wir hier ein Array haben und

01:25.810 --> 01:29.110
dass wir nur Strings darin haben, also hat es gefolgert, dass hobbies

01:29.110 --> 01:31.940
wahrscheinlich ein Array von Strings sein sollte.

01:31.940 --> 01:34.903
Und in der Tat, bei Hobbys ist das sehr sinnvoll.

01:36.210 --> 01:41.040
Natürlich können Sie den Typ der Variablen auch explizit festlegen.

01:41.040 --> 01:44.720
Wenn wir eine neue Variable "Lieblingsaktivitäten" hinzufügen,

01:45.580 --> 01:48.670
die zunächst leer sein sollte, sollten wir den Typ

01:48.670 --> 01:51.160
der darin gespeicherten Daten explizit

01:51.160 --> 01:53.140
festlegen.

01:53.140 --> 01:55.590
Sagen wir, es soll ein Array von Strings sein, dann können

01:55.590 --> 01:57.570
wir einfach wiederholen, was wir gerade gesehen

01:57.570 --> 02:00.330
haben; geben Sie string ein, und danach eckige Klammern, und das

02:00.330 --> 02:03.330
sagt TypeScript, dass das, was wir hier speichern, nicht nur ein einzelner

02:03.330 --> 02:05.990
String ist, sondern ein Array von Strings.

02:05.990 --> 02:09.550
Und tatsächlich, wenn ich versuche, dort nur Sport zu speichern, erhalte

02:09.550 --> 02:12.183
ich eine Fehlermeldung. Ich erhalte eine Fehlermeldung, weil

02:12.183 --> 02:15.650
es sich hier um eine einzelne Zeichenfolge und nicht um ein Array von Zeichenfolgen handelt.

02:15.650 --> 02:19.370
Ich erhalte natürlich keine Fehlermeldung, wenn ich dies in eckige

02:19.370 --> 02:22.610
Klammern einfasse und somit effektiv ein Array erstelle.

02:22.610 --> 02:25.870
Ich erhalte jedoch erneut einen Fehler, wenn ich eine Zahl

02:25.870 --> 02:29.220
hinzufüge, weil wir dies als Array von Strings definieren.

02:29.220 --> 02:31.290
Hier haben wir ein gemischtes Feld.

02:31.290 --> 02:34.920
Es handelt sich um ein Array von Strings und Zahlen, das funktioniert also

02:34.920 --> 02:37.180
nicht und wird hier nicht unterstützt.

02:37.180 --> 02:40.100
Wenn wir eine solche gemischte Anordnung unterstützen

02:40.100 --> 02:43.120
wollen, wäre eine Lösung, hier "any" zu verwenden.

02:43.120 --> 02:45.880
Der "any"-Typ ist ein spezieller Typ in TypeScript, den

02:45.880 --> 02:47.610
wir uns später genauer ansehen werden,

02:47.610 --> 02:50.530
und bedeutet im Grunde, dass man tun kann, was man will.

02:50.530 --> 02:53.020
Es ist natürlich ein Typ, den man nicht zu oft verwenden

02:53.020 --> 02:55.630
sollte, weil man dann die Vorteile von TypeScript verliert,

02:55.630 --> 02:58.170
und man ist wieder in der JavaScript-Welt, wo man auch jeden

02:58.170 --> 03:00.140
Wert überall verwenden kann.

03:00.140 --> 03:02.940
Any" ist also wirklich flexibel, aber die

03:02.940 --> 03:06.270
Flexibilität hat den Preis, dass man im Grunde alle

03:06.270 --> 03:08.710
Vorteile von TypeScript aufgibt.

03:08.710 --> 03:10.840
Hier werde ich also wieder zu string zurückkehren, weil

03:10.840 --> 03:12.530
ich wirklich keine Zahl darin haben möchte,

03:12.530 --> 03:14.933
und daher können wir die Zahl entfernen und sind fertig.

03:15.900 --> 03:18.830
Arrays sind auch ein großartiges Beispiel dafür,

03:18.830 --> 03:21.890
wie dynamisch die Typinferenz von TypeScript

03:21.890 --> 03:25.730
ist, genau wie Objekte und ihre Eigenschaften.

03:25.730 --> 03:28.750
Wenn wir hier unten eine "for"-Schleife einfügen und alle Hobbys

03:28.750 --> 03:31.570
der Person durchgehen wollen, können wir natürlich auch

03:31.570 --> 03:33.220
eine herkömmliche "for"-Schleife

03:33.220 --> 03:38.220
mit for const hobby der Person verwenden. Hobbys, also Zugriff auf die Hobbys-Eigenschaft

03:38.620 --> 03:41.130
und Durchlaufen aller Hobbys dort, Speichern

03:41.130 --> 03:42.793
jedes Hobbys für jede Iteration

03:43.690 --> 03:46.780
in dieser Konstante, und dann können wir log hobby

03:46.780 --> 03:50.090
hier konsultieren.

03:50.090 --> 03:52.000
Das ist nicht besonders ausgefallen, das ist etwas,

03:52.000 --> 03:53.710
das wir von JavaScript kennen, richtig.

03:53.710 --> 03:58.280
Wenn ich nun diese App kompiliere. ts-Datei dort unten, erhalten

03:58.280 --> 04:01.700
wir den Namen aus dieser Zeile, und danach die

04:01.700 --> 04:04.750
beiden Hobbys, die gedruckt werden.

04:04.750 --> 04:07.800
Aber das Interessante ist, dass wir bei hobby

04:07.800 --> 04:11.040
auf alles zugreifen können, auf jeden String.

04:11.040 --> 04:14.210
Zum Beispiel, um UpperCase, bekomme ich diese Autovervollständigung

04:14.210 --> 04:16.230
und TypeScript nicht beschweren.

04:16.230 --> 04:18.070
Warum beschwert sie sich nicht?

04:18.070 --> 04:21.930
Denn es weiß, dass Hobbys vom Typ String-Array ist,

04:21.930 --> 04:25.830
wenn ich also auf Person. hobbies, erkennt TypeScripts

04:25.830 --> 04:29.700
Inferenz, dass hobbies ein Array von Strings sein wird.

04:29.700 --> 04:33.450
So wird hobby korrekt als Zeichenkette identifiziert, denn

04:33.450 --> 04:36.000
da wir ein Array von Zeichenketten durchgehen,

04:36.000 --> 04:38.370
müssen auch die einzelnen Werte nur Zeichenketten

04:38.370 --> 04:40.510
sein.

04:40.510 --> 04:43.450
Und deshalb bietet types uns dort unten eine großartige Unterstützung

04:43.450 --> 04:46.490
und ermöglicht es uns, alles mit hobby zu tun, was mit einem String

04:46.490 --> 04:50.050
getan werden kann, weil es mit Sicherheit weiß, dass hobby aufgrund der types,

04:50.050 --> 04:53.810
die wir dort oben eingerichtet haben, ein String sein wird.

04:53.810 --> 04:56.300
Und das ist wirklich flexibel und natürlich eine

04:56.300 --> 04:59.030
großartige Funktion, die das Schreiben von Code viel

04:59.030 --> 05:01.360
einfacher, flexibler und sicherer macht.

05:01.360 --> 05:04.440
Zum Beispiel würden wir hier einen Fehler erhalten, wenn es versuchen

05:04.440 --> 05:08.570
würde, auf hobby zuzugreifen. Karte, wenn ich dachte, dass dies ein Array sein würde.

05:08.570 --> 05:12.060
Die Map-Methode ist für Arrays verfügbar, aber nicht für Strings.

05:12.060 --> 05:14.540
Und hier, korrekt, wieder eine Fehlermeldung, dass

05:14.540 --> 05:17.810
map nicht auf Typ string existiert, weil es nicht existiert.

05:17.810 --> 05:21.290
Hier bekommen wir also einen Fehler, und das ist gut

05:21.290 --> 05:24.510
so, denn das wäre falsch, und hier sehen wir, wie

05:24.510 --> 05:27.343
TypeScripts Inferenz wirklich glänzt.
