WEBVTT

00:02.280 --> 00:06.483
ผู้สอน: ประเภทที่เกี่ยวข้องกับสิ่งที่คุณเพิ่งเรียนรู้เกี่ยวกับตัวดัดแปลงการเข้าถึงคือตัวแก้ไขอีกตัว

00:07.572 --> 00:09.590
และนั่นคือตัวแก้ไขแบบอ่านอย่างเดียว

00:09.590 --> 00:11.310
สมมติว่าเรามีบางฟิลด์

00:11.310 --> 00:14.220
ซึ่งไม่ควรเป็นส่วนตัวหรือสาธารณะเท่านั้น

00:14.220 --> 00:18.130
แต่ไม่ควรเปลี่ยนแปลงหลังจากเริ่มต้น

00:18.130 --> 00:21.410
ตัวอย่างเช่น รหัสไม่ควรเปลี่ยนหลังจากนั้น

00:21.410 --> 00:25.670
เพื่อให้ชัดเจนว่าไม่ควรเปลี่ยนแปลง คุณสามารถเพิ่มแบบอ่านอย่างเดียวได้ที่นี่เช่นกัน

00:25.670 --> 00:27.890
และคุณสามารถบวกมันตรงนี้ได้เช่นกัน

00:27.890 --> 00:30.920
ดังนั้นที่นี่คุณจะต้องเขียนแบบอ่านอย่างเดียวแบบส่วนตัวด้วย

00:30.920 --> 00:33.990
ตอนนี้คำหลักแบบอ่านอย่างเดียว เช่นเดียวกับส่วนตัวและสาธารณะ

00:33.990 --> 00:35.710
ได้รับการแนะนำโดย TypeScript

00:35.710 --> 00:37.920
แต่ไม่มีอยู่ใน JavaScript

00:37.920 --> 00:39.910
ทำให้แน่ใจว่าหากคุณพยายามเขียนถึงคุณสมบัติของมันหลังจากนั้น

00:39.910 --> 00:43.180
คุณจะล้มเหลว

00:43.180 --> 00:45.690
คุณจึงใช้ได้เพียงครั้งเดียวในระหว่างการเริ่มต้น

00:45.690 --> 00:48.620
แต่หลังจากนั้น สมมติว่าสำหรับ addEmployee ฉันพยายามเปลี่ยน

00:48.620 --> 00:52.430
id เป็น d2 ด้วยเหตุผลใดก็ตาม คุณเห็นไหม เราได้รับข้อผิดพลาดที่นี่

00:52.430 --> 00:54.200
ซึ่งฉันไม่สามารถกำหนดให้กับ id

00:54.200 --> 00:57.790
ได้เนื่องจากเป็นแบบอ่านอย่างเดียว

00:57.790 --> 01:04.160
ดังนั้นสิ่งนี้จึงเพิ่มความปลอดภัยเป็นพิเศษเพื่อให้ชัดเจนว่าคุณสมบัติบางอย่างควรเริ่มต้นเพียงครั้งเดียวและไม่ควรเปลี่ยนแปลงหลังจากนั้น

01:04.160 --> 01:10.240
ซึ่งเป็นข้อกำหนดที่คุณมีค่อนข้างบ่อยสำหรับคุณสมบัติบางอย่างในออบเจ็กต์ของคุณ

01:10.240 --> 01:12.630
ดังนั้นสิ่งนี้จึงสามารถเพิ่มความปลอดภัยให้กับประเภทได้อีก

01:12.630 --> 01:14.910
และทำให้ความตั้งใจของคุณชัดเจนมาก

01:14.910 --> 01:16.320
แน่นอน คุณสามารถพูดได้เสมอว่า

01:16.320 --> 01:20.470
ฉันเป็นคนเขียนโค้ด ฉันจะไม่ทำอะไรที่ฉันไม่ต้องการ

01:20.470 --> 01:24.630
ก็ยังดีที่จะมีความชัดเจนเมื่อคุณกำหนดรหัสของคุณ

01:24.630 --> 01:31.280
เนื่องจาก a คุณอาจลืมสิ่งที่คุณต้องการทำหากคุณหยุดการทำงานโค้ดของคุณชั่วคราวเป็นเวลาสองสามสัปดาห์

01:31.280 --> 01:32.270
หรืออะไรก็ตาม และ

01:32.270 --> 01:36.550
b คุณอาจทำงานเป็นทีมหรือแบ่งปันโค้ดของคุณกับผู้อื่น

01:36.550 --> 01:42.460
และโดยทั่วไปเป็นความคิดที่ดีที่จะเขียนโค้ดที่ชัดเจนและชัดเจนซึ่งจะทำให้ความตั้งใจของคุณชัดเจนมาก

01:42.460 --> 01:44.280
และแบบอ่านอย่างเดียวสามารถช่วยคุณได้

01:44.280 --> 01:47.230
เพราะมันทำให้ชัดเจนว่าเป้าหมายของคุณคืออะไร

01:47.230 --> 01:49.570
ถ้าเราดูที่แอพ js ดังที่ฉันได้กล่าวไปแล้ว

01:49.570 --> 01:53.050
เราไม่เห็นทั้งแบบส่วนตัวและแบบสาธารณะ หรือเป็นแบบอ่านอย่างเดียว

01:53.050 --> 01:55.780
เนื่องจากทั้งหมดนี้มีอยู่ใน TypeScript เท่านั้น

01:55.780 --> 01:57.610
ไม่มีใน JavaScript

01:57.610 --> 02:01.420
นอกจากนี้เรายังเห็นสิ่งที่แตกต่างซึ่งน่าสนใจเช่นกัน

02:01.420 --> 02:06.490
วิธีการต่างๆ ถูกเพิ่มเข้าไปในต้นแบบของฟังก์ชันคอนสตรัคเตอร์ของเรา

02:06.490 --> 02:12.520
ในตอนนี้ คุณต้องรู้ว่าต้นแบบคืออะไร และการแนะนำสิ่งเหล่านั้นในหลักสูตรนี้อาจจะมากเกินไปหน่อย

02:12.520 --> 02:16.070
สิ่งที่แนบมาด้วย คุณจะพบทรัพยากรบางอย่างที่คุณสามารถดำดิ่งสู่ต้นแบบได้

02:16.070 --> 02:18.490
เป็นส่วนสำคัญของ JavaScript โดยเฉพาะอย่างยิ่ง

02:18.490 --> 02:24.670
JavaScript ก่อนที่เราจะมีคลาส และการเข้าใจต้นแบบก็ไม่ใช่เรื่องเสียหายหากคุณเป็นนักพัฒนา

02:24.670 --> 02:26.490
JavaScript

02:26.490 --> 02:29.030
ถึงกระนั้น ฉันจะไม่ลงลึกไปกว่านี้เพราะเป็นหัวข้อ

02:29.030 --> 02:31.160
JavaScript ล้วนๆ ไม่ใช่เฉพาะสำหรับ

02:31.160 --> 02:33.020
TypeScript

02:33.020 --> 02:34.150
จริงๆ แล้วใน TypeScript

02:34.150 --> 02:38.780
เรามักจะทำงานกับต้นแบบน้อยลง เพราะเราสามารถทำอะไรได้มากขึ้นกับคลาสต่างๆ

02:38.780 --> 02:42.560
และเกี่ยวเนื่องกับสิ่งนั้น เราได้แนวคิดเกี่ยวกับคลาสที่สำคัญอีกอย่างหนึ่ง

02:42.560 --> 02:43.503
นั่นคือการสืบทอด
