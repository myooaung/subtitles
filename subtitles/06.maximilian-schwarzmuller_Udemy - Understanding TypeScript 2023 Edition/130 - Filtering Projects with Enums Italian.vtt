WEBVTT

00:02.310 --> 00:03.940
Uomo: Quindi abbiamo due problemi,

00:03.940 --> 00:06.500
se così vogliamo chiamarli, da risolvere.

00:06.500 --> 00:07.820
Ora voglio iniziare con il problema

00:07.820 --> 00:10.960
che i progetti vengono visualizzati in entrambe le caselle.

00:10.960 --> 00:13.050
Voglio introdurre un po' di filtraggio

00:13.050 --> 00:15.980
e il posto migliore per filtrare è, ovviamente,

00:15.980 --> 00:18.930
la nostra funzione ascoltatore.

00:18.930 --> 00:22.743
Se andiamo nel punto in cui registriamo il nostro ascoltatore,

00:26.000 --> 00:29.170
qui nella clausola dell'elenco dei progetti.

00:29.170 --> 00:32.270
Poi, qui, abbiamo un elenco di progetti, giusto?

00:32.270 --> 00:36.170
L'elenco dei progetti comprende tutti i progetti.

00:36.170 --> 00:39.400
Ora, però, all'interno della clausola dell'elenco dei progetti,

00:39.400 --> 00:43.140
siamo interessati solo ai progetti attivi o conclusi.

00:43.140 --> 00:44.250
Ora, qui, a proposito,

00:44.250 --> 00:49.103
potremmo anche usare teoricamente il nostro enum ma, in realtà, ho bisogno

00:50.660 --> 00:53.160
dei valori concreti memorizzati nell'enum

00:53.160 --> 00:56.440
laggiù o nel tipo laggiù e, quindi, qui non voglio usare

00:56.440 --> 00:58.990
sempre un enum perché voglio mostrare i

00:58.990 --> 01:02.180
tipi letterali di stringa.

01:02.180 --> 01:06.190
Quindi, quello che faremo qui all'interno della nostra funzione ascoltatore

01:06.190 --> 01:08.690
è che, prima di memorizzare i progetti e renderli,

01:08.690 --> 01:10.470
vogliamo filtrarli.

01:10.470 --> 01:13.020
Quindi, qui abbiamo i nostri progetti rilevanti,

01:13.020 --> 01:16.660
si potrebbe dire, e questo è, naturalmente, progetti filtrati.

01:16.660 --> 01:19.070
Il metodo filtro è un metodo predefinito che

01:19.070 --> 01:21.460
esiste su qualsiasi array in JavaScript.

01:21.460 --> 01:23.690
Questo richiede una funzione che viene

01:23.690 --> 01:26.820
eseguita su ogni elemento dell'array di progetti e quando

01:26.820 --> 01:29.660
questa funzione restituisce true, l'elemento viene

01:29.660 --> 01:30.940
conservato in un nuovo

01:30.940 --> 01:33.530
array che viene poi memorizzato nei progetti

01:33.530 --> 01:35.040
pertinenti.

01:35.040 --> 01:38.130
Se questa funzione restituisce false, si elimina l'elemento,

01:38.130 --> 01:39.770
non dall'elenco originale, ma

01:39.770 --> 01:41.660
nel nuovo elenco generato e memorizzato

01:41.660 --> 01:44.230
nei progetti pertinenti.

01:44.230 --> 01:46.600
Quindi, qui dobbiamo restituire true o false, a seconda

01:46.600 --> 01:48.810
che si voglia mantenere o meno il progetto.

01:48.810 --> 01:52.430
E per questo, ovviamente, basta guardare lo stato di avanzamento.

01:52.430 --> 01:55.310
Lo stato del progetto è un enum e vogliamo

01:55.310 --> 01:59.070
verificare se lo stato del progetto è uguale a stato

01:59.070 --> 02:03.590
del progetto attivo se siamo in un elenco di progetti attivi,

02:03.590 --> 02:05.790
quindi se la proprietà type è

02:05.790 --> 02:07.940
attiva, oppure se lo stato del

02:07.940 --> 02:10.640
progetto è finito se siamo in un elenco

02:10.640 --> 02:12.270
finito.

02:12.270 --> 02:15.430
Quindi, qui scriverò un vero e proprio corpo di funzione

02:15.430 --> 02:17.250
avvolgendolo con le parentesi

02:17.250 --> 02:20.100
graffe, senza usare la scorciatoia della funzione

02:20.100 --> 02:23.480
freccia e poi potremo controllare, se questo tipo è uguale

02:23.480 --> 02:25.540
ad attivo, allora voglio restituire

02:26.800 --> 02:31.480
il risultato di questo controllo qui altrimenti e quindi, semplicemente

02:31.480 --> 02:34.130
dopo questa dichiarazione if, voglio restituire

02:34.130 --> 02:40.160
il confronto con lo stato del progetto finito.

02:40.160 --> 02:42.220
In questo modo si ottengono i progetti rilevanti

02:42.220 --> 02:43.520
che possono essere memorizzati

02:43.520 --> 02:45.490
qui, nei progetti assegnati.

02:45.490 --> 02:47.070
Vediamo quindi se funziona.

02:47.070 --> 02:48.053
Se ricarico

02:49.310 --> 02:51.570
e aggiungo un progetto qui,

02:51.570 --> 02:52.743
funziona?

02:54.950 --> 02:55.930
Funziona e, come

02:55.930 --> 02:58.050
vedete, viene aggiunto solo ai progetti

02:58.050 --> 03:00.020
attivi, non a quelli finiti.

03:00.020 --> 03:02.390
Tuttavia, se aggiungo un secondo progetto qui,

03:02.390 --> 03:04.740
abbiamo ancora questa duplicazione.

03:04.740 --> 03:08.720
Ora, questo è legato al modo in cui renderizziamo i nostri progetti.

03:08.720 --> 03:10.520
All'interno dei progetti di rendering,

03:10.520 --> 03:13.430
passiamo sempre in rassegna tutti gli elementi del progetto

03:13.430 --> 03:15.090
e li aggiungiamo all'elenco.

03:15.090 --> 03:16.640
Naturalmente, il problema

03:16.640 --> 03:19.900
è che potremmo già avere un elemento del progetto renderizzato

03:19.900 --> 03:21.950
sullo schermo.

03:21.950 --> 03:25.020
Ora, la migliore soluzione possibile sarebbe quella di eseguire

03:25.020 --> 03:27.450
una sorta di confronto per verificare ciò che

03:27.450 --> 03:30.170
è già stato renderizzato e ciò che è necessario renderizzare,

03:30.170 --> 03:31.730
per evitare di ripetere inutilmente

03:31.730 --> 03:34.110
il rendering.

03:34.110 --> 03:35.760
Tuttavia, anche l'esecuzione di questo

03:35.760 --> 03:38.440
confronto guardando al DOM reale comporta un notevole dispendio

03:38.440 --> 03:39.710
di prestazioni.

03:39.710 --> 03:43.100
Per questa applicazione, quindi, va benissimo prendere il nostro

03:43.100 --> 03:45.250
elemento elenco e cancellare tutto il suo

03:45.250 --> 03:48.720
contenuto impostando l'HTML interno a una stringa vuota, il che significa

03:48.720 --> 03:49.640
che ci liberiamo di

03:49.640 --> 03:53.710
tutti gli elementi dell'elenco e poi renderizziamo nuovamente.

03:53.710 --> 03:56.350
Ciò significa che ogni volta che aggiungiamo

03:56.350 --> 03:58.470
un nuovo progetto, renderizziamo tutti

03:58.470 --> 04:00.210
i progetti, ma per questo progetto,

04:00.210 --> 04:01.670
per questa applicazione,

04:01.670 --> 04:03.490
va benissimo.

04:03.490 --> 04:05.410
Quindi, se lo salviamo, facciamo

04:05.410 --> 04:06.987
un altro tentativo.

04:06.987 --> 04:10.540
"Funziona? " è il primo progetto e ora se

04:10.540 --> 04:12.960
aggiungo un altro progetto qui, viene

04:12.960 --> 04:14.530
aggiunto, ma l'altro progetto

04:14.530 --> 04:17.453
non viene aggiunto di nuovo.

04:18.430 --> 04:21.870
Ops e, ora, qui ho avuto un errore (borbottio) perché la descrizione

04:21.870 --> 04:23.540
non era abbastanza lunga.

04:23.540 --> 04:26.230
Quindi, ora tutto funziona, come si può vedere, e stiamo

04:26.230 --> 04:28.150
renderizzando questi progetti nel modo

04:28.150 --> 04:30.090
in cui dovrebbero essere renderizzati,

04:30.090 --> 04:32.170
il che, ovviamente, è corretto.

04:32.170 --> 04:35.050
E con questo, l'applicazione non sembra male.

04:35.050 --> 04:36.890
L'unica cosa che manca è una

04:36.890 --> 04:39.550
funzionalità di trascinamento o un modo

04:39.550 --> 04:44.040
per spostare i progetti da questo primo elenco al secondo.

04:44.040 --> 04:45.180
Inoltre, non stiamo producendo

04:45.180 --> 04:46.930
le altre informazioni ottenute, la descrizione

04:46.930 --> 04:48.900
e il numero di persone.

04:48.900 --> 04:50.750
Quindi, anche questo non è un granché.

04:50.750 --> 04:54.980
Inoltre, abbiamo un po' di codice duplicato quando guardiamo

04:54.980 --> 04:57.620
l'elenco dei progetti in questa clausola

04:57.620 --> 04:58.910
qui e nella clausola

04:58.910 --> 05:01.000
di input del progetto.

05:01.000 --> 05:04.270
In entrambi abbiamo un elemento template, un elemento host e

05:04.270 --> 05:06.970
un elemento e abbiamo un metodo attach e così via.

05:06.970 --> 05:09.180
Quindi, voglio migliorare il codice e riutilizzare

05:09.180 --> 05:11.800
un po' di codice usando l'ereditarietà e una clausola

05:11.800 --> 05:14.480
di base e, successivamente, voglio anche creare una

05:14.480 --> 05:16.850
clausola dedicata per ogni elemento del progetto,

05:16.850 --> 05:18.580
in cui istanziare la clausola dell'elemento

05:18.580 --> 05:23.725
del progetto all'interno dell'elenco dei progetti, invece di aggiungere manualmente un elemento

05:23.725 --> 05:27.050
dell'elenco, come in questo caso, e poi all'interno della clausola

05:27.050 --> 05:30.700
dell'elemento del progetto 'da creare', dovrebbe avvenire la parte di

05:30.700 --> 05:34.540
aggiunta e poi voglio anche fornire ulteriori informazioni sull'elemento

05:34.540 --> 05:40.540
del progetto, inclusa la sua descrizione e il numero di persone assegnate.

05:40.540 --> 05:42.080
Quindi, c'è ancora un po' di

05:42.080 --> 05:44.520
lavoro da fare e, prima di lavorare sull'elemento

05:44.520 --> 05:47.120
del progetto nella forma in cui lo voglio, assicuriamoci

05:47.120 --> 05:48.660
di aggiungere innanzitutto

05:48.660 --> 05:53.660
un po' di ereditarietà per rendere il nostro elenco di progetti e l'input del progetto,

05:53.800 --> 05:57.693
o alcune parti di esso, più riutilizzabili.
