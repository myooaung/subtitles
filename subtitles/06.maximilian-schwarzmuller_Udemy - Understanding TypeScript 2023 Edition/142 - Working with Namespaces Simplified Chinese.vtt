WEBVTT

00:02.190 --> 00:04.860
- ：我想从命名空间功能开始｡ 

00:04.860 --> 00:06.810
现在, 为了向您展示它是如何工作的,

00:06.810 --> 00:09.980
我将在这里使用这两个接口｡

00:09.980 --> 00:14.140
拖放界面, 将其从应用程序中剪切｡

00:14.140 --> 00:14.140
ts并添加一个新文件,

00:14.140 --> 00:19.140
拖放界面｡ 例如TS｡ 

00:21.270 --> 00:25.180
现在我们可以把它粘贴到这里, 现在要使用命名空间,

00:25.180 --> 00:29.140
我们所要做的就是添加关键字namespace,

00:31.645 --> 00:33.620
然后是花括号.

00:33.620 --> 00:35.880
现在, 我们还必须为该命名空间命名,

00:35.880 --> 00:39.590
在这里, 我将其命名为DD Interfaces, 以便进行拖放操作,

00:39.590 --> 00:41.660
但具体名称由您决定｡

00:41.660 --> 00:45.250
现在, 今年是TypeScript功能, 而不是JavaScript功能｡

00:45.250 --> 00:47.750
它没有被编译为Vanilla JavaScript,

00:47.750 --> 00:50.340
因为它没有直接的等价物｡

00:50.340 --> 00:55.693
相反, TypeScript基本上会将其编译为一个对象｡

00:55.693 --> 01:00.440
到一个对象, 其中您将放入命名空间的内容将存储在属性中,

01:00.440 --> 01:02.140
但您不必担心这一点,

01:02.140 --> 01:10.640
因为所有对这些属性的访问的解析以及所有工作都将由TypeScript负责｡

01:10.640 --> 01:13.940
现在我们可以将这些接口移到命名空间中,

01:13.940 --> 01:16.130
这样我们就差不多完成了｡

01:16.130 --> 01:18.040
然而, 现在我们有一个问题,

01:18.040 --> 01:22.280
这些接口现在只能在这个名称空间中使用｡

01:22.280 --> 01:23.113
顺便说一下,

01:23.113 --> 01:25.530
你不能只把接口放在一个命名空间里,

01:25.530 --> 01:28.057
你可以把任何东西放在里面, 类,

01:28.057 --> 01:30.780
常量, 任何你想要的东西｡

01:30.780 --> 01:33.900
你想要的任何东西都可以放在一个命名空间里｡ 

01:33.900 --> 01:37.150
所以基本上你可以用一个命名空间来包装你的任何代码｡

01:37.150 --> 01:39.830
但我们的问题是, 这些特性,

01:39.830 --> 01:44.800
这些接口现在只能在该命名空间内使用｡

01:44.800 --> 01:47.280
现在你也看到了, 我们没有其他东西了｡ 

01:47.280 --> 01:51.600
当然, 我们可以把依赖于它们的代码放回这个命名空间,

01:51.600 --> 01:53.370
但我们还是会这样做,

01:53.370 --> 01:58.940
因为我们有一个很长的类依赖于这些接口｡

01:58.940 --> 02:02.900
我们有项目列表类和项目项类｡ 

02:02.900 --> 02:08.922
它们依赖于这些接口, 因此我们必须向该名称空间添加很多内容｡

02:08.922 --> 02:10.205
因此, 您可以在接口前面添加export关键字,

02:10.205 --> 02:16.850
以便从名称空间导出特性｡

02:16.850 --> 02:19.680
这意味着现在这些接口不仅可以在命名空间内部使用,

02:19.680 --> 02:24.487
还可以在文件外部使用.

02:24.487 --> 02:26.100
我们马上就会看到它是如何工作的,

02:26.100 --> 02:30.710
但是我们用它来做这个接口或者我们要导出的任何东西｡

02:30.710 --> 02:32.815
这并不局限于这个文件之外的接口,

02:32.815 --> 02:41.140
如果我们导入或使用这个名称空间的话｡

02:41.140 --> 02:41.973
当然, 您不能只导出名称空间中的接口,

02:41.973 --> 02:45.636
而是导出任何内容｡

02:45.636 --> 02:52.410
现在, 问题是, 我们如何将此命名空间导入到应用程序中｡

02:52.410 --> 02:52.410
为此,

02:52.410 --> 02:56.210
TypeScript提供了您可以使用特殊语法｡

02:56.210 --> 02:57.867
让我们回到应用程序的顶部｡  现在你在这里加了三个正斜杠,

02:57.867 --> 03:03.690
重要的是三个, 而不仅仅是两个, 因为这实际上不是一个普通的注释, 我们现在创建的,

03:03.690 --> 03:15.500
这实际上是TypeScript提取的语法, 一个特殊的注释, 你可以说TypeScript理解它是否以三个斜杠开头｡

03:15.500 --> 03:19.301
在这里你写一个自结束XML标记,

03:19.301 --> 03:21.600
左尖括号, 然后是正斜杠右尖括号,

03:21.600 --> 03:32.370
在它们的引用路径中等于, 然后在这里是你要导入的文件的名称｡

03:32.370 --> 03:35.217
在我的例子中是拖放接口｡  ts.

03:39.330 --> 03:42.550
现在, TypeScript可以理解并使用它,

03:42.550 --> 03:45.220
因为正如我提到的三个斜杠, 这是一个特殊的语法,

03:45.220 --> 03:50.110
TypeScript理解它, 就像它理解这个引用一样｡

03:50.110 --> 03:51.960
这不是Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript没有注意到,

03:53.970 --> 03:58.480
这不是它编译后的样子｡

03:58.480 --> 04:00.430
那么, 这样做能达到什么目的呢？

04:00.430 --> 04:07.104
这实现了现在此命名空间DD接口在应用程序中可用｡

04:07.104 --> 04:07.104
ts.

04:07.104 --> 04:08.920
然而, 如果你向下滚动, 你会看到我的编辑仍然抱怨,

04:08.920 --> 04:14.300
如果我们试图保存它, 因为我们都做好编译错误｡

04:14.300 --> 04:16.410
所以, 它似乎是不可用的｡ 

04:16.410 --> 04:19.730
可拖动界面似乎在此处不可用｡ 

04:19.730 --> 04:22.386
名称空间有一个特别的地方｡ 

04:22.386 --> 04:25.840
您可以使用它们来拆分代码, 还记得我前面说过,

04:25.840 --> 04:32.557
名称空间中的内容可以从该名称空间中的任何位置使用｡

04:32.557 --> 04:34.157
事实证明, 您可以将名称空间拆分为多个文件,

04:34.157 --> 04:51.797
方法是导出名称空间中的内容, 然后使用这种特殊的导入语法, 但是您必须将希望使用该导入名称空间或导入文件中的内容的内容放入同一名称空间｡

04:51.797 --> 04:55.050
因此, DD Interfaces可能不是最佳名称｡ 

04:55.050 --> 04:58.010
也许我们只是命名为App｡ 

04:58.010 --> 05:01.670
现在, 如果我们在这里命名为app, 我们可以转到app｡

05:01.670 --> 05:01.670
ts并在此处创建一个同名的命名空间namespace

05:04.180 --> 05:05.630
App｡

05:05.630 --> 05:06.890
现在, 让我们把这里的所有内容都放到这个命名空间中,

05:06.890 --> 05:14.300
现在你会看到错误消失了, 右边没有红点｡

05:14.300 --> 05:15.513
但是, 如果我保存了它,

05:15.513 --> 05:17.850
这里仍然会出现错误｡

05:17.850 --> 05:22.850
例如, 不使用已完成的项目清单｡ 

05:25.010 --> 05:28.210
是的, 我没有用那个｡

05:28.210 --> 05:32.610
我也不需要它, 所以我们可以在这里简单地删除这些概念｡

05:32.610 --> 05:35.190
这样, 如果我们保存它,

05:35.190 --> 05:38.040
现在它编译没有错误｡

05:38.040 --> 05:41.920
问题是这个汇编的结果是什么？

05:41.920 --> 05:44.260
我们现在有一两份文件吗？

05:44.260 --> 05:46.170
让我们看一下光盘文件夹,

05:46.170 --> 05:50.780
您会看到有一个App JS文件, 这里有一些代码,

05:50.780 --> 05:53.980
还有一个拖放界面JS文件｡

05:53.980 --> 05:56.690
因此, 我们得到了两个文件｡ 

05:56.690 --> 06:00.830
现在dragon drop接口文件实际上是非常空的,

06:00.830 --> 06:04.360
因为您了解到接口基本上没有编译成任何东西｡

06:04.360 --> 06:07.300
界面没有JavaScript对等用法｡ 

06:07.300 --> 06:09.270
这是一个纯粹的TypeScript特性｡ 

06:09.270 --> 06:12.370
因此, 我们可以在这里使用TypeScript语法导入它,

06:12.370 --> 06:20.060
以使用它, 并获得我们学到的所有类型改进, 但在生产中, 它是否在单独的文件中并不重要｡

06:20.060 --> 06:21.840
当然, 问题是, 如果我们现在把生产中存在的东西,

06:21.840 --> 06:30.000
JavaScript中也存在的东西放在一个单独的文件中｡

06:30.000 --> 06:33.373
例如, 这里有enum和project类,

06:35.520 --> 06:36.470
我将获取两者,

06:36.470 --> 06:37.610
创建一个新文件,

06:37.610 --> 06:46.040
project dash model TS, 并将我的项目状态enum和project类放在那里｡

06:46.040 --> 06:47.420
现在, 就像之前一样,

06:47.420 --> 06:49.070
我们可以在这里添加一个命名空间,

06:49.070 --> 06:54.020
名称必须是App, 因此必须在我们也要使用它的命名空间中完成, 并且我们必须在那里导出这些功能,

06:54.020 --> 07:02.640
以便我们可以在同一命名空间中的其他文件中使用它们, 但也可以在其他文件中使用它们｡

07:02.640 --> 07:05.900
现在回到应用程序｡  我们必须导入第二个文件｡

07:05.900 --> 07:11.515
因此, 我将复制此导入和所有导入项目的破折号模型ts｡

07:11.515 --> 07:16.610
如果我保存了它, 现在编译它, 我们会看到一个项目模型JavaScript文件｡

07:16.610 --> 07:19.490
在那里, 我们看到一些代码｡

07:19.490 --> 07:22.770
问题是我们的应用程序现在能正常工作吗？

07:22.770 --> 07:24.620
为此, 让我们重新加载它,

07:25.480 --> 07:27.587
并尝试在此处添加一个项目, 您会看到,

07:27.587 --> 07:29.903
我们收到一个错误｡

07:29.903 --> 07:33.183
无法读取未定义的活动属性｡ 

07:34.120 --> 07:38.854
原因很简单, 因为我们的文件是独立编译的｡

07:38.854 --> 07:41.410
正如我所说的, 命名空间存在于TypeScript世界中,

07:41.410 --> 07:44.640
没有与之等价的JavaScript｡

07:44.640 --> 07:47.430
所以我们这里的问题是, 在TypeScript的世界里,

07:47.430 --> 07:51.610
一切都很好, 因为TypeScript能够找到我们需要的所有东西｡

07:51.610 --> 07:54.420
例如, 当我在这里提到项目时,

07:54.420 --> 07:59.310
当我在项目状态类上引用项目类型时, 这个项目类型､

07:59.310 --> 08:02.840
这个项目类在项目模型中定义｡

08:02.840 --> 08:06.020
现在TypeScript不会抱怨你的不完整,

08:06.020 --> 08:07.570
因为我们导入了那个模型,

08:07.570 --> 08:10.250
但是这里的导入实际上只是意味着我们告诉TypeScript在哪里可以找到那个类型,

08:10.250 --> 08:18.150
一旦它被编译成JavaScript, 断开连接基本上被破坏了｡

08:18.150 --> 08:20.840
所以在JavaScript代码中,

08:20.840 --> 08:25.130
当is执行时, 当我们试图通过实例化项目来创建一个新项目时,

08:25.130 --> 08:29.610
JavaScript找不到这个项目类或构造函数.

08:29.610 --> 08:32.980
所以我们必须确保我们延续断开｡ 

08:32.980 --> 08:35.420
为此, 我们可以转到TS（mumbles）,

08:35.420 --> 08:39.640
在那里设置此out file选项｡

08:39.640 --> 08:40.740
我们可以在中对此进行注释,

08:40.740 --> 08:48.620
out文件背后的想法是告诉TypeScript它应该连接命名空间｡

08:48.620 --> 08:56.970
因此, 这些引用在编译到一个JavaScript文件而不是编译多个JavaScript文件的过程中｡

08:56.970 --> 08:59.210
对于out file, 我们可以说我们希望在disc文件夹中有一个文件,

08:59.210 --> 09:04.770
我们将其命名为bundle｡

09:04.770 --> 09:04.770
如果我们这样做并保存它,

09:07.050 --> 09:08.700
我们会得到一个错误｡

09:09.650 --> 09:10.710
我们将得到一个错误,

09:12.300 --> 09:17.250
只有AMD和系统模块是支持与出文件｡

09:17.250 --> 09:19.540
现在, 我们不需要了解这里的所有内容｡

09:19.540 --> 09:26.120
由于历史原因, 基本上有不同的方法将不同的JavaScript文件加载或绑定到一个文件中,

09:26.120 --> 09:35.340
以及它是如何开发的｡ 如果您愿意, 您可以在附加的资源中了解有关这些不同的绑定类型的更多信息, 但您不需要这样做｡

09:35.340 --> 09:36.800
因此, 基本上我们需要做的是,

09:36.800 --> 09:38.120
我们需要设置模块,

09:38.120 --> 09:40.470
这已经突出显示为一个错误, 在这里,

09:40.470 --> 09:41.598
不是共同的JS,

09:41.598 --> 09:43.943
但AMD的例子｡

09:45.400 --> 09:47.700
如果我们这样做, 它编译没有问题,

09:47.700 --> 09:50.010
即使它仍然在这里抱怨, 但它没有拿起我改变了它,

09:50.010 --> 09:56.570
现在发生的实际上是, 有一个新的捆绑JS文件在dist｡

09:56.570 --> 10:00.310
如果我删除光盘文件夹中的所有JavaScript文件,

10:00.310 --> 10:08.600
并重新启动TSC dash, 我们将执行此过程, 因此编译器将只显示生成的捆绑包JS文件｡

10:08.600 --> 10:11.530
这个文件将保存编译和翻译版本中的所有代码,

10:11.530 --> 10:13.250
因此现在在索引HTML中,

10:13.250 --> 10:15.400
我们只需要在这里导入bundle

10:15.400 --> 10:20.300
JS而不是App JS｡

10:20.300 --> 10:25.830
如果我们这样做, 并在这里重新加载, 我们又有了一个工作的应用程序,

10:25.830 --> 10:30.410
我们可以使用拖放的一切, 因为现在它都在一个文件中,

10:30.410 --> 10:32.661
但只是在最终的结果｡

10:32.661 --> 10:36.260
在开发过程中, 我们在这里有这些名称空间,

10:36.260 --> 10:41.970
这是朝着正确方向迈出的一步, 因为它已经变得更易于管理了｡

10:41.970 --> 10:44.350
现在, 我们将其拆分为更多文件,

10:44.350 --> 10:48.283
然后再看平均拆分选项TS模块｡
