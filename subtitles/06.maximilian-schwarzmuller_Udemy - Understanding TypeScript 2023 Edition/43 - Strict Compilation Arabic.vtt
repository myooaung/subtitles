WEBVTT

00:02.120 --> 00:02.953
المدرب: كانت هذه

00:02.953 --> 00:04.960
مجموعة أولى مهمة من الخيارات.

00:04.960 --> 00:07.520
الآن دعنا نتعمق في هذه الخيارات الصارمة

00:07.520 --> 00:09.860
لأنها مثيرة جدًا للاهتمام.

00:09.860 --> 00:12.150
يوجد هذا الخيار الصحيح الصارم ، وما يفعله

00:12.150 --> 00:13.590
هذا في الواقع هو أنه يمكّن

00:13.590 --> 00:16.750
جميع خيارات التحقق الصارمة من النوع ، لذا قم بتعيين

00:16.750 --> 00:18.830
هذا الخيار بشكل فعال كما لو كنت قد

00:18.830 --> 00:22.110
قمت بتعيين كل هذه الخيارات بشكل منفصل.

00:22.110 --> 00:24.830
لذلك يمكنك إما تعيين كل هذه الخيارات واحدة تلو

00:24.830 --> 00:27.110
الأخرى ، أو مجرد تعيين هذا الخيار.

00:27.110 --> 00:29.510
بالطبع ، تريد تعيين الخيارات الفردية

00:29.510 --> 00:33.020
إذا كنت تريد تعيين بعض الخيارات على "خطأ".

00:33.020 --> 00:34.790
لأنه بخلاف ذلك تم ضبطهم جميعًا على الحقيقة.

00:34.790 --> 00:36.520
إذا كنت تريد ضبطها جميعًا على صحيح

00:36.520 --> 00:39.290
، فإن استخدام هذا الخيار فقط هو بالطبع أقصر بكثير.

00:39.290 --> 00:41.360
الآن ماذا تفعل هذه الخيارات بالرغم من ذلك؟

00:41.360 --> 00:43.213
لنبدأ بـ noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny هو خيار مثير للاهتمام للغاية يساعدنا في

00:47.410 --> 00:49.180
كتابة تعليمات برمجية أفضل.

00:49.180 --> 00:51.370
دعنا ننتقل إلى ملف التحليلات الخاص

00:51.370 --> 00:53.963
بنا هنا ، وهناك دعونا نضيف وظيفة ، sendAnalytics

00:55.270 --> 00:58.070
، تحصل على خيار بيانات دعنا نقول ، وهناك يمكننا

00:58.070 --> 01:01.010
إرسال هذا إلى خادم ولكن هنا أنا فقط وحدة التحكم

01:01.010 --> 01:03.430
في تسجيله.

01:03.430 --> 01:07.500
ثم أستدعي sendAnalytics مع البيانات ، لذلك

01:07.500 --> 01:08.920
مع السلسلة.

01:08.920 --> 01:11.080
الآن كما ترى ، يشكو IDE الخاص بي بالفعل

01:11.080 --> 01:13.160
هنا وكذلك TypeScript المترجم

01:13.160 --> 01:14.960
، لأن الاثنين بالطبع متصلان

01:14.960 --> 01:17.040
إذا حاولت تجميع هذا.

01:17.040 --> 01:20.070
بيانات المعلمة ضمنيًا لها أي نوع.

01:20.070 --> 01:21.350
لذلك يبدو أن هذا مرتبط

01:21.350 --> 01:23.940
بهذا الخيار noImplicitAny.

01:23.940 --> 01:27.150
في الواقع ، إذا قمت بضبط هذا على false ، لذلك إذا قمت بتعيين

01:27.150 --> 01:29.300
جميع الخيارات الصارمة على true ولكنني

01:29.300 --> 01:31.521
قمت بتعيين هذا الخيار على false ، وهو ما

01:31.521 --> 01:33.810
يمكنني فعله ، فسيختفي هذا الخطأ.

01:33.810 --> 01:37.140
سواء في IDE وعندما نقوم بتجميع الكود.

01:37.140 --> 01:38.730
إذن ماذا يفعل هذا الخيار؟

01:38.730 --> 01:41.440
إنه يضمن ، وسأعلق عليه مرة أخرى

01:41.440 --> 01:44.210
لتشغيله مرة أخرى بسبب الصواب الصارم

01:44.210 --> 01:47.050
، فهو يضمن أننا يجب أن نكون واضحين

01:47.050 --> 01:49.410
بشأن معاييرنا ، والقيم التي

01:49.410 --> 01:53.020
نعمل معها في الكود الخاص بنا.

01:53.020 --> 01:56.600
هنا لا نعطي TypeScript أي معلومات حول نوع البيانات

01:56.600 --> 01:59.930
التي سنحصل عليها كمعامل هنا.

01:59.930 --> 02:01.320
ويجب علينا.

02:01.320 --> 02:03.800
إذا كان TypeScript قادرًا على الاستدلال على

02:03.800 --> 02:05.360
ذلك ، فلا بأس بالطبع ، ولكن هنا

02:05.360 --> 02:08.770
كيف سيكون TypeScript قادرًا على الاستدلال عليه من هذا السطر

02:08.770 --> 02:11.470
، ضع في اعتبارك أنه يتم الإعلان عن هذه الوظيفة أولاً

02:11.470 --> 02:12.950
قبل تنفيذ هذا الملف.

02:12.950 --> 02:15.080
لذلك في الوقت الذي يتم فيه إنشاء الوظيفة

02:15.080 --> 02:18.380
، لا توجد فرصة لمعرفة ما سينتهي به الأمر هناك.

02:18.380 --> 02:20.100
لذلك يمكننا هنا إصلاح هذا الخطأ

02:20.100 --> 02:22.570
ببساطة عن طريق التصريح عن النوع والتوضيح بشأن

02:22.570 --> 02:24.253
النوع الذي نستخدمه هناك.

02:25.100 --> 02:29.530
الآن يرجى ملاحظة أنه إذا كان لديك متغير تم تسجيله ، حيث قمت بتعيين

02:29.530 --> 02:32.650
هذا على صحيح هنا ، فلن تحصل على خطأ بشأن هذا

02:32.650 --> 02:34.720
الإعلان على الرغم من أنه يحصل

02:34.720 --> 02:37.670
أيضًا على نوع افتراضي من أي.

02:37.670 --> 02:39.250
بالنسبة للمتغيرات ، هذا جيد.

02:39.250 --> 02:40.910
بالنسبة للمعلمات ، لا بأس بذلك.

02:40.910 --> 02:42.480
لماذا لا بأس بالمتغيرات؟

02:42.480 --> 02:44.370
لأن ما يفعله TypeScript للمتغيرات

02:44.370 --> 02:45.940
، وما هو ممكن للمتغيرات ، وما

02:45.940 --> 02:47.040
هو غير ممكن هنا لأن الوظيفة

02:47.040 --> 02:48.880
يتم إنشاؤها أولاً.

02:48.880 --> 02:52.490
هنا TypeScript قادر على تتبع القيم التي تقوم بتعيينها.

02:52.490 --> 02:54.650
كما ترى ، حسنًا ، لقد تم

02:54.650 --> 02:56.720
تسجيل الدخول هنا على

02:56.720 --> 02:58.573
هذا النحو ، والآن قمت

02:59.430 --> 03:08.030
بضبطه على صحيح ، لذلك ، بعد ذلك ، إذا قمت بالتحكم في السجل هنا ، فسيكون منطقيًا.

03:08.030 --> 03:10.300
لذا فإن TypeScript هنا قادر على فهم تدفق التعليمات

03:10.300 --> 03:11.893
البرمجية الخاصة بك ، وبالتالي

03:11.893 --> 03:14.320
، لا تحتاج إلى أن تكون دقيقًا فيما يتعلق بالنوع

03:14.320 --> 03:15.430
هنا.

03:15.430 --> 03:18.020
بالطبع ، تريد أن تكون دقيقًا إذا كنت تريد تجنب

03:18.020 --> 03:20.310
أنه يمكنك تعيين القيمة الجديدة بحرية ،

03:20.310 --> 03:22.940
وهو ما يمكنك القيام به هنا لأنه من النوع أي.

03:22.940 --> 03:25.700
لذلك ما زلت تريد تعيين نوع لتجنب ذلك ، لكن TypeScript

03:25.700 --> 03:27.680
قادر على الأقل على معرفة ما إذا كان

03:27.680 --> 03:29.490
الرمز الذي تطلبه يعمل مع النوع

03:29.490 --> 03:31.410
الذي يحمله حاليًا.

03:31.410 --> 03:32.410
هذا ليس هو الحال

03:32.410 --> 03:35.360
هنا لأنه يتم تحديد الوظيفة قبل تسميتها ، وبالتالي

03:35.360 --> 03:37.800
، لن يتغير TypeScript في معرفة ما إذا كان

03:37.800 --> 03:39.570
يمكن استخدام ما تقوم بتمريره

03:39.570 --> 03:41.393
داخل الوظيفة.

03:43.280 --> 03:46.020
لا يعدrictNullChecks خيارًا مهمًا أبدًا.

03:46.020 --> 03:48.520
إنه مرتبط بالفعل باختيار الزر لدينا

03:48.520 --> 03:49.410
هنا.

03:49.410 --> 03:51.820
تذكر أنه كان علي إضافة علامة التعجب هذه هنا

03:51.820 --> 03:52.670
لإنجاحها.

03:52.670 --> 03:54.380
خلاف ذلك ، سأحصل على خطأ.

03:54.380 --> 03:56.220
الآن يمكننا أيضًا التخلص

03:56.220 --> 03:58.430
من هذا الخطأ دون إضافة علامة التعجب

03:58.430 --> 04:02.090
عن طريق تعيينrictNullChecks إلى false.

04:02.090 --> 04:04.200
لذلك دعونا نفعل ذلك هنا ودعونا نحفظ هذا.

04:04.200 --> 04:07.860
وكما ترى فإن هذا الخطأ قد اختفى الآن هنا.

04:07.860 --> 04:10.120
ويمكنني تجميع كافة الملفات.

04:10.120 --> 04:12.340
الآن ما الذي تفعلهrictNullChecks؟

04:12.340 --> 04:16.160
إنهم يخبرون TypeScript بأن تكون جميلة ، صارمة

04:16.160 --> 04:19.410
جيدًا فيما يتعلق بكيفية الوصول والعمل مع

04:19.410 --> 04:22.530
القيم التي قد تحتوي على قيمة فارغة.

04:22.530 --> 04:24.850
والزر هنا قد يكون فارغًا.

04:24.850 --> 04:29.210
لا يشير دائمًا إلى عنصر زر.

04:29.210 --> 04:31.390
لا يشير دائمًا إلى مثل هذا العنصر لأنه

04:31.390 --> 04:34.220
على الرغم من وجود مثل هذا المحدد هنا ، فقد لا يوجد

04:34.220 --> 04:36.900
زر ببساطة في الصفحة التي يتم تشغيل هذا البرنامج

04:36.900 --> 04:38.490
النصي عليها.

04:38.490 --> 04:40.840
وبالتالي ، لا تستطيع TypeScript معرفة

04:40.840 --> 04:43.790
ذلك لأنها لا تتعمق في ملف html الخاص بك وتنظر

04:43.790 --> 04:44.900
في ذلك.

04:44.900 --> 04:48.240
لا يمكن معرفة ما إذا كان هذا سيكون ناجحًا أم لا.

04:48.240 --> 04:53.130
وإذا فشل هذا في إرجاع مؤشر وعقدة فارغة ، فسيعود فارغًا ، غير

04:53.130 --> 04:56.650
محدد جيدًا ليكون دقيقًا ، ولكن يتم التعامل

04:56.650 --> 04:59.090
معه على قدم المساواة هنا.

04:59.090 --> 05:01.610
لذلك ، قد يحتوي هذا الزر على قيمة فارغة ،

05:01.610 --> 05:03.530
وبالتالي قد يفشل هذا الرمز.

05:03.530 --> 05:06.610
في الواقع ، إذا قمت بالتعليق على هذا الزر هنا ، إذا قمت

05:06.610 --> 05:08.480
الآن بتجميع كل شيء يعمل لأنني قمت

05:08.480 --> 05:10.733
بتعطيل عمليات التحقق الفارغة.

05:12.000 --> 05:14.100
ولكن لدي الآن خطأ في وقت التشغيل لأنني

05:14.100 --> 05:16.210
لا أستطيع استدعاء مستمع الحدث ، addEventListener

05:16.210 --> 05:18.230
، على null.

05:18.230 --> 05:20.970
وأنا هنا لا شيء لأنه ليس لدي زر.

05:20.970 --> 05:23.110
الآن هذا خطأ يمكننا تجنبه

05:23.110 --> 05:26.760
من خلال ضبطrictNullChecks على true.

05:26.760 --> 05:30.340
ويتم تعيين ذلك تلقائيًا إذا كان لدينا مجموعة صارمة على صواب.

05:30.340 --> 05:34.450
حيث تتوقع TypeScript أن هذا قد يحدث ، وبالتالي

05:34.450 --> 05:38.600
، يجبرنا على التغلب على ذلك.

05:38.600 --> 05:40.640
الآن أحد الحلول الرخيصة

05:40.640 --> 05:42.820
هو مشغل علامة التعجب هنا.

05:42.820 --> 05:46.020
هذا يخبر TypeScript أنك ، المطور

05:46.020 --> 05:48.360
، تعرف أن هذا الزر موجود

05:48.360 --> 05:53.360
، أو أن هذه العملية ستنتج قيمة غير فارغة.

05:53.710 --> 05:55.830
الآن ربما تفعل ذلك ، بالتأكيد

05:55.830 --> 05:58.990
ستفعل إذا كنت تعلم أنك تعمل على كود HTML

05:58.990 --> 06:00.430
وأن هناك زرًا هنا

06:00.430 --> 06:03.310
، سيعمل هذا المحدد هنا.

06:03.310 --> 06:05.610
لذلك سيكون من الجيد استخدام علامة التعجب في

06:05.610 --> 06:06.623
هذا السيناريو.

06:07.600 --> 06:09.040
إذا كان لديك سيناريو

06:09.040 --> 06:11.120
آخر لا تعرف فيه على وجه اليقين

06:11.120 --> 06:13.050
ما إذا كان يعمل ويأمل فقط أن يعمل

06:13.050 --> 06:14.170
، فقد يكون من الأفضل

06:14.170 --> 06:18.210
ببساطة التفاف الكود الذي قد يفشل في فحص if ، والذي سيكون موجودًا

06:18.210 --> 06:21.570
في وقت التشغيل أيضًا ، بالطبع.

06:21.570 --> 06:24.960
يمكنك ببساطة التحقق مما إذا كان الزر صحيحًا هنا ، ولن

06:24.960 --> 06:27.510
يكون كذلك إذا كان فارغًا أو غير محدد.

06:27.510 --> 06:30.060
وانقل هذا الرمز إلى هذا إذا تحقق هنا.

06:30.060 --> 06:32.470
الآن حتى بدون علامة التعجب ،

06:32.470 --> 06:35.810
في وضع strictNullChecks ، لا نحصل على أي

06:35.810 --> 06:37.600
خطأ لأن TypeScript تدرك

06:37.600 --> 06:39.750
أن هذا الرمز موجود داخل عبارة

06:39.750 --> 06:41.991
if هذه وأن عبارة if هذه تتأكد

06:41.991 --> 06:46.310
من أن الزر ليس فارغًا وأن هذا لن يفشل.

06:46.310 --> 06:49.310
لذلك قد يكون هذا في الواقع هو الحل الأنظف.

06:49.310 --> 06:51.060
ومع ذلك ، بالطبع ، لحفظ الكود

06:51.060 --> 06:54.350
، إذا كنت تعرف على وجه اليقين أن شيئًا ما موجود بالفعل

06:54.350 --> 06:56.550
، فإن استخدام علامة التعجب يكون أقصر

06:56.550 --> 06:58.320
وخيارًا جيدًا تمامًا.

06:58.320 --> 07:00.450
هنا قلت كلا الأمرين حتى نرى كلا الأمرين

07:00.450 --> 07:02.450
، بالطبع تحتاج فقط إلى أحد الأمرين

07:02.450 --> 07:04.520
، إما علامة if أو علامة التعجب.

07:04.520 --> 07:07.680
إنrictFunctionTypes هنا عبارة عن إعداد أكثر

07:07.680 --> 07:12.010
تقدمًا قليلاً لالتقاط بعض الصناديق المتخصصة التي قد لا تكون

07:12.010 --> 07:14.830
لديك في العديد من التطبيقات.

07:14.830 --> 07:17.340
إنه مرتبط ، جيدًا ، بأنواع الوظائف التي قد

07:17.340 --> 07:18.380
تقوم بإعدادها.

07:18.380 --> 07:20.650
لذلك لا توجد أنواع داخل الوظائف ،

07:20.650 --> 07:23.690
ولكن إذا حددت كيف يجب أن تبدو الوظيفة فيما يتعلق

07:23.690 --> 07:26.220
بمعلماتها وقيمة الإرجاع ، وقمت بإنشاء

07:26.220 --> 07:27.840
نوع الوظيفة الذي تعرفت عليه

07:27.840 --> 07:29.990
في وحدة الأساسيات ، فهناك يمكنك

07:29.990 --> 07:32.650
تقديم مربع إذا كنت تعمل مع الطبقات والميراث

07:32.650 --> 07:39.683
، والتي لم نتعلم عنها بعد ، والتي لم نستخدمها بعد ، وبالتالي ، دعونا الآن نتجاهل هذا.

07:40.578 --> 07:43.630
rictBindCallApply ، يمكن أن يكون ذلك مفيدًا

07:43.630 --> 07:46.840
إذا كنت تعمل مع الربط أو الاتصال أو التقديم.

07:46.840 --> 07:49.680
لذلك ، دعنا نرى بسرعة مثالاً.

07:49.680 --> 07:52.040
هنا لدينا زرنا ووظيفتنا هناك.

07:52.040 --> 07:57.040
لنفترض الآن أن هذه ستكون دالة ، نحددها هنا باستخدام الكلمة

07:57.780 --> 08:01.100
الأساسية للدالة ، أو كدالة خطأ.

08:01.100 --> 08:03.650
لا يهم ، سأستخدم الكلمة الأساسية للوظيفة هنا.

08:04.731 --> 08:09.731
clickHandler ، وهناك أعزّي. تم النقر فوق السجل.

08:11.960 --> 08:13.810
والآن نشير هنا إلى clickHandler

08:13.810 --> 08:15.560
، ولسبب ما ، نريد التأكد من

08:15.560 --> 08:17.670
أنه عندما يتم تنفيذ ذلك ، فإننا

08:17.670 --> 08:19.330
نمرر في بعض الحجج أو نضع

08:19.330 --> 08:22.780
الكلمة الأساسية هناك على قيمة معينة.

08:22.780 --> 08:26.480
لنفترض الآن أننا نتوقع وسيطة رسالة ، والتي يجب

08:26.480 --> 08:28.110
أن تكون سلسلة نصية.

08:28.110 --> 08:32.110
ونريد إخراج هذا هنا أيضًا.

08:32.110 --> 08:34.400
الآن منذ أن تم تمرير clickHandler إلى

08:34.400 --> 08:36.010
addEventListener من هذا القبيل

08:36.010 --> 08:39.080
بحيث ينفذ المتصفح هذا بشكل أساسي لنا ، إذا أردنا تكوين

08:39.080 --> 08:41.070
الوسيطات التي سيتم تمريرها مسبقًا

08:41.070 --> 08:43.570
، فيمكننا استخدام الربط.

08:43.570 --> 08:47.000
و bind ، كوسيطة أولى ، يأخذ ما نريد ربط

08:47.000 --> 08:49.320
هذه الكلمة الأساسية به.

08:49.320 --> 08:51.650
وهنا يمكننا أن نقول أن هذا لا يهمنا

08:51.650 --> 08:53.580
لأننا لا نستخدم هذا في الدالة

08:53.580 --> 08:55.930
، لذلك نربطها بالصفر.

08:55.930 --> 08:57.700
الآن ترى هنا لدي خطأ.

08:57.700 --> 09:00.610
أحصل على خطأ يمكن تجنبه إذا قمت

09:00.610 --> 09:04.613
بضبطrictBindCallApply على خطأ.

09:07.040 --> 09:08.680
الآن ترى أن الخطأ قد اختفى.

09:08.680 --> 09:10.501
الآن ماذا يفعل هذا الخيار ، إذن؟

09:10.501 --> 09:14.180
إنه يتحقق بشكل أساسي من الوظيفة التي تستدعيها ربط

09:14.180 --> 09:16.020
أو استدعاء أو تطبيق.

09:16.020 --> 09:20.080
ويتحقق مما إذا كان ما تقوم بإعداده هنا منطقيًا.

09:20.080 --> 09:23.440
وهنا يرى TypeScript أننا نريد وسيطة ، نريد المعلمة

09:23.440 --> 09:25.450
في clickHandler.

09:25.450 --> 09:28.260
مع الربط ، نحن لا نقوم بتكوين ذلك بالرغم من ذلك.

09:28.260 --> 09:30.600
وبالتالي ، هنا لدينا خطأ.

09:30.600 --> 09:32.180
إذا أعدت هذا إلى true ، أو علقت

09:32.180 --> 09:34.000
عليه للتو لأنه ، بالطبع ، تم ضبطه

09:34.000 --> 09:36.230
على true بشكل افتراضي عن طريق ضبط صارم

09:36.230 --> 09:37.870
على true ، وبالتالي ، فإننا

09:37.870 --> 09:39.790
نحصل على الخطأ مرة أخرى.

09:39.790 --> 09:42.350
الآن إذا لم نتوقع وجود وسيطة هنا ، فسترى

09:42.350 --> 09:44.750
أن الخطأ سينتهي هناك إذا أزلنا الرسالة

09:44.750 --> 09:46.200
فقط ، لأن TypeScript يفهم

09:46.200 --> 09:48.140
الكود الخاص بنا ويرى أنك لا تقوم

09:48.140 --> 09:50.660
بتمرير أي وسيطات إلى هذه الطريقة أو إلى

09:50.660 --> 09:52.580
هذه الوظيفة لأن لا يأخذ أي شيء

09:52.580 --> 09:54.760
، لذا فلا بأس.

09:54.760 --> 09:57.420
لكن بالطبع ، هنا نريد واحدًا حتى نحصل على خطأ.

09:57.420 --> 10:00.880
الحل هو تقديم هذه الوسيطة الثانية هنا

10:00.880 --> 10:04.350
، وهي الحجة الأولى التي تريد تمريرها.

10:04.350 --> 10:06.290
الآن أصبح TypeScript ذكيًا حقًا هنا.

10:06.290 --> 10:08.120
وعلى سبيل المثال ، إذا مررت رقمًا

10:08.120 --> 10:10.310
، فسيظل يشتكي لأنه يفهم أنني بحاجة

10:10.310 --> 10:11.610
إلى سلسلة هنا.

10:12.500 --> 10:15.960
إذا مررت بسلسلة صحيحة ، كما لو كنت مرحبًا

10:15.960 --> 10:17.350
بك ، فلن تشتكي

10:17.350 --> 10:19.070
بعد الآن لأنها لا

10:19.070 --> 10:21.210
تفهم هذا وترى أن هذا يتطابق

10:21.210 --> 10:24.840
مع تعريف وظيفتي هنا.

10:24.840 --> 10:27.370
لذلك هذا سلوك مفيد للغاية يضمن لك عدم استخدام

10:27.370 --> 10:30.260
الربط أو الاتصال أو التقديم عن طريق الخطأ بطريقة لا

10:30.260 --> 10:32.743
تعمل مع التعليمات البرمجية الخاصة بك.

10:33.930 --> 10:36.600
الآن ، أصبح تطبيقrictPropertyInitialization أمرًا مهمًا بمجرد

10:36.600 --> 10:37.810
أن نعمل مع الفصول الدراسية.

10:37.810 --> 10:39.213
يمكننا تجاهله الآن.

10:39.213 --> 10:41.890
هذا أيضًا لا يهم الآن.

10:41.890 --> 10:43.650
يجب أن تفعل هذه الكلمة الرئيسية

10:43.650 --> 10:45.980
ويحاول TypeScript بشكل أساسي تحذيرك

10:45.980 --> 10:48.240
إذا كنت تستخدم هذه الكلمة الرئيسية

10:48.240 --> 10:51.020
في مكان لا يكون من الواضح ما تشير إليه.

10:51.020 --> 10:53.210
ودائمًا ما تتحكم دائمًا في أن ملفات

10:53.210 --> 10:55.560
جافا سكريبت التي يتم إنشاؤها تستخدم

10:55.560 --> 10:58.663
الوضع المتشدد بحيث تتم إضافته.

10:59.710 --> 11:02.383
مع ذلك ، غطينا كل هذه الخيارات الصارمة.
