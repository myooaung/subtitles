WEBVTT

00:02.300 --> 00:03.420
Tutor: Untuk memulai, di

00:03.420 --> 00:07.060
sini saya akan menjalankan npm start untuk memunculkan server pengembangan.

00:07.060 --> 00:09.384
Yang menyajikan file HTML dan tab menu,

00:09.384 --> 00:13.434
tsc-w untuk memulai jenis kompilasi dalam mode tontonan sehingga

00:13.434 --> 00:17.988
file JavaScript aplikasi kita terus menerus dibangun kembali dan kita

00:17.988 --> 00:21.740
dapat melihatnya di aplikasi yang sedang berjalan.

00:21.740 --> 00:24.480
Saat ini, tentu saja aplikasi kita tidak terlihat terlalu mewah.

00:24.480 --> 00:26.340
Ini adalah halaman kosong.

00:26.340 --> 00:27.850
Jadi untuk memulai, ada

00:27.850 --> 00:30.250
banyak cara untuk melakukan itu.

00:30.250 --> 00:35.040
Sekarang, saya ingin mulai dengan membuat formulir ini terlihat.

00:35.040 --> 00:36.660
Dan sekarang, ada banyak cara, saya akan

00:36.660 --> 00:38.790
benar-benar menulis aplikasi ini dalam pendekatan

00:38.790 --> 00:40.208
berorientasi objek.

00:40.208 --> 00:43.303
Yang mana 100% opsional, tetapi karena kita telah belajar tentang

00:43.303 --> 00:46.080
kelas dan sebagainya, saya ingin benar-benar menunjukkan

00:46.080 --> 00:48.083
bagaimana ini bekerja dan oleh karena

00:48.083 --> 00:51.140
itu saya akan menggunakan pendekatan ini.

00:51.140 --> 00:51.973
Jadi di kunci aplikasi,

00:51.973 --> 00:55.510
saya akan menambahkan kelas baru dan saya akan menamainya Project Input

00:55.510 --> 00:59.120
meskipun nama kelas tentu saja sepenuhnya terserah Anda.

00:59.120 --> 01:00.570
Sekarang di kelas ini, tujuan

01:00.570 --> 01:04.590
kita adalah, untuk mendapatkan akses ke templat ini dan ke formulir di

01:04.590 --> 01:08.220
dalamnya dan untuk mendapatkan akses ke div ini di sini, dan kemudian

01:08.220 --> 01:11.710
me-render templat kita di div itu pada akhirnya.

01:11.710 --> 01:15.160
Jadi isi templat, formulir di div itu.

01:15.160 --> 01:17.130
Itu harus menjadi tujuan kita.

01:17.130 --> 01:18.850
Sekarang untuk mencapai hal ini,

01:18.850 --> 01:20.588
di sini di Project Input, saya akan

01:20.588 --> 01:23.450
menambahkan konstruktor di mana saya pada akhirnya ingin

01:23.450 --> 01:25.920
mendapatkan akses ke templat saya dan ke tempat di

01:25.920 --> 01:27.970
mana templat itu harus dirender.

01:28.830 --> 01:33.310
Dan untuk ini di sini, saya akan menambahkan dua properti dengan

01:33.310 --> 01:37.460
cepat dengan ini, properti elemen templat dan kemudian

01:37.460 --> 01:40.180
juga properti elemen host.

01:40.180 --> 01:42.420
Nama-nama tersebut 100% terserah Anda.

01:42.420 --> 01:44.990
Pada akhirnya ide saya adalah elemen host, memegang

01:44.990 --> 01:46.970
referensi ke elemen di mana saya ingin

01:46.970 --> 01:49.650
merender konten template saya pada akhirnya dan juga,

01:49.650 --> 01:51.427
elemen template memberi saya akses

01:51.427 --> 01:54.050
ke template yang menyimpan konten ini.

01:54.050 --> 01:56.120
Sekarang untuk mendapatkan akses ke templat

01:56.120 --> 01:59.690
itu, mari kita lihat indeks html dan lihat bagaimana kita dapat mengidentifikasi

01:59.690 --> 02:01.870
templat yang menampung formulir.

02:01.870 --> 02:04.050
Nah, ia memiliki ID input proyek ini, jadi

02:04.050 --> 02:06.120
sepertinya itu strategi yang bagus.

02:06.120 --> 02:08.510
Jadi di sini kita bisa menggunakan dokumen

02:08.510 --> 02:11.022
getElementById project-input.

02:11.022 --> 02:15.410
Ini memberi kita akses ke elemen templat ini.

02:15.410 --> 02:17.820
Sekarang, beberapa hal penting.

02:17.820 --> 02:21.320
Di sini kita mendapatkan error bahwa elemen template adalah properti

02:21.320 --> 02:23.900
yang tidak ada pada project-input.

02:23.900 --> 02:28.140
Sekarang untuk menyingkirkan ini, kita sebenarnya harus menambahkannya

02:28.140 --> 02:31.610
sebagai bidang baru di sini secara langsung di dalam kelas.

02:31.610 --> 02:34.050
Kemudian kita bisa dengan aman menetapkannya.

02:34.050 --> 02:36.040
Sekarang di sini, saya juga ingin memperjelas tentang

02:36.040 --> 02:37.450
jenis yang akan disimpan di sana.

02:37.450 --> 02:41.070
Dan itu akan menjadi elemen template HTML.

02:41.070 --> 02:43.270
Jenis ini tersedia secara global

02:43.270 --> 02:47.380
karena dalam file tsconfig js, saya menambahkan DOM sebagai

02:47.380 --> 02:50.360
lib dan yang menambahkan semua jenis DOM ini,

02:50.360 --> 02:53.777
semua jenis elemen HTML ini sebagai jenis typescript

02:53.777 --> 02:55.493
ke seluruh proyek.

02:57.280 --> 03:00.400
Sekarang ini menanamkan kesalahan baru di sini, namun, Anda melihat

03:00.400 --> 03:03.110
bahwa pada akhirnya ini bisa jadi null ketika kita mendapatkan

03:03.110 --> 03:04.760
elemen berdasarkan ID, tentu saja

03:04.760 --> 03:08.510
kita tahu bahwa itu tidak akan gagal tetapi typescript tidak memiliki kesempatan

03:08.510 --> 03:09.850
untuk mengetahui hal ini karena

03:09.850 --> 03:12.757
tidak akan menganalisis file html kita.

03:12.757 --> 03:16.210
Jadi mungkin tidak ada elemen dengan ID ini yang ada dan oleh karena

03:16.210 --> 03:18.210
itu ini akan menghasilkan null.

03:18.210 --> 03:20.680
Sekarang di sini, kita katakan kita tidak menyimpan

03:20.680 --> 03:23.920
null di sana, kita hanya menyimpan elemen template HTML.

03:23.920 --> 03:25.800
Jadi, untuk menghilangkan bahaya ini,

03:25.800 --> 03:29.470
kita harus memberitahu typescript, bahwa ini tidak akan pernah null.

03:29.470 --> 03:31.290
Dan tahukah Anda bagaimana Anda bisa melakukan ini?

03:31.290 --> 03:33.580
Anda bisa menambahkan tanda seru di sini.

03:33.580 --> 03:35.020
Alternatifnya tentu saja,

03:35.020 --> 03:36.170
hanya untuk juga menunjukkan

03:36.170 --> 03:37.820
ini, jika Anda tidak yakin,

03:37.820 --> 03:41.640
adalah menyimpannya sebagai katakanlah dalam konstanta dan

03:41.640 --> 03:46.640
kemudian memeriksa apakah elemen template itu benar, jadi jika tidak nol dan kemudian

03:46.900 --> 03:48.600
menyimpannya di dalam pemeriksaan

03:48.600 --> 03:51.490
jika di sini.

03:51.490 --> 03:52.720
Sekarang, kita masih mendapatkan

03:52.720 --> 03:54.190
error, tetapi itu akan menjadi error yang

03:54.190 --> 03:55.840
berbeda, yang akan saya bahas nanti.

03:55.840 --> 03:58.060
Untuk saat ini, ini akan berhasil

03:58.060 --> 03:59.650
jika kita tidak yakin.

03:59.650 --> 04:01.930
Namun, sekarang di sini, saya yakin.

04:01.930 --> 04:02.763
Dan omong-omong, jika

04:02.763 --> 04:03.596
Anda tidak yakin, Anda

04:03.596 --> 04:06.000
harus menyediakan fallback dalam kasus lain tentunya.

04:06.000 --> 04:08.530
Tetapi di sini saya yakin bahwa kita akan mendapatkan elemen

04:08.530 --> 04:10.544
seperti itu dan oleh karena itu kita cukup menambahkan

04:10.544 --> 04:11.803
tanda seru setelahnya untuk memberi

04:11.803 --> 04:13.710
tahu typescript, "All good.

04:13.710 --> 04:17.300
Kita akan mendapatkan akses ke elemen dengan ID tersebut. Sekarang seperti yang saya sebutkan, kita masih memiliki kesalahan

04:17.300 --> 04:18.133
lain.

04:18.133 --> 04:20.220
Konten properti tidak ada dalam tipe elemen HTML.

04:20.220 --> 04:24.270
Masalahnya di sini adalah kita memberitahu typescript bahwa

04:24.270 --> 04:27.140
kita akan menyimpan elemen template yang

04:27.140 --> 04:29.550
bertipe elemen template html.

04:29.550 --> 04:32.160
Dan memang itulah yang akan terjadi.

04:32.160 --> 04:34.800
Sekarang tentu saja, getElementById tidak

04:34.800 --> 04:38.730
tahu elemen mana yang akan dikembalikan pada akhirnya.

04:38.730 --> 04:41.130
Ia hanya tahu bahwa itu akan menjadi beberapa

04:41.130 --> 04:43.920
elemen html tetapi bukan versi khusus yang mana.

04:43.920 --> 04:46.600
Jika itu div, paragraf, tombol atau seperti

04:46.600 --> 04:48.720
dalam kasus ini elemen template.

04:48.720 --> 04:51.387
getElementById tidak memiliki kesempatan untuk mengetahui hal itu.

04:51.387 --> 04:54.590
Jadi untuk memberi tahu typescript tentang jenis yang

04:54.590 --> 04:57.460
tentunya juga kita ketahui dengan pasti.

04:57.460 --> 05:00.660
Kita bisa menggunakan type casting.

05:00.660 --> 05:02.260
Anda juga belajar tentang hal ini.

05:02.260 --> 05:03.730
Ada dua sintaksis yang bisa Anda gunakan.

05:03.730 --> 05:05.950
Tanda kurung sudut di awal dan kemudian

05:05.950 --> 05:07.690
tipe yang ingin Anda cast ini

05:07.690 --> 05:10.130
dengan itu Anda mengatakan kepada typeScript,

05:10.130 --> 05:11.847
"Hey!

05:11.847 --> 05:12.700
Hal itu, ungkapan

05:12.700 --> 05:15.840
yang akan datang setelah ini di sini, ini akan menjadi jenis itu. atau sebagai alternatif, Anda menambahkan sebagai elemen templat HTML yang merupakan

05:15.840 --> 05:17.650
pendekatan yang akan saya gunakan.

05:17.650 --> 05:21.200
Dan dengan itu, Anda menjamin kepada typescript bahwa

05:21.200 --> 05:23.040
apa yang Anda ambil di sini tidak

05:23.040 --> 05:25.700
akan null dan akan bertipe ini.

05:25.700 --> 05:27.950
Banyak yang membicarakan tentang memilih ini, tetapi ini adalah tugas

05:30.027 --> 05:30.860
yang umum dan penting untuk

05:30.860 --> 05:32.016
melakukannya dengan benar.

05:32.016 --> 05:33.630
Sekarang mari kita lanjutkan dengan elemen tuan rumah.

05:33.630 --> 05:35.563
Di sini, kita juga harus menambahkan

05:36.890 --> 05:39.360
elemen host sebagai field dan kita tahu bahwa

05:39.360 --> 05:43.350
elemen host, ketika kita benar-benar ingin me-render project-input kita

05:43.350 --> 05:45.960
pada akhirnya akan menjadi div ini di sini.

05:45.960 --> 05:48.560
Di situlah saya ingin membuat formulir saya.

05:48.560 --> 05:51.410
Jadi, di sini kita bisa mengatakan elemen div HTML.

05:51.410 --> 05:54.000
Itulah jenis elemen yang akan kita tambahkan ini.

05:54.000 --> 05:57.730
Kita juga bisa sedikit kurang spesifik dan hanya mengatakan elemen

05:57.730 --> 06:00.260
HTML, karena di sini saya benar-benar tidak

06:00.260 --> 06:02.740
peduli apakah itu div atau bukan.

06:02.740 --> 06:04.970
Tetapi karena kita mengetahuinya

06:04.970 --> 06:08.400
dengan pasti, mengapa tidak menambahkannya?

06:08.400 --> 06:10.250
Sekarang, saya ingin mendapatkan akses ke

06:10.250 --> 06:11.263
div itu tentu saja di mana

06:12.110 --> 06:14.850
ini harus ditambahkan dan jika kita melihat indeksnya. html, kita melihat kita dapat mengidentifikasi

06:14.850 --> 06:16.530
div ini dengan ID lagi.

06:16.530 --> 06:18.970
ID aplikasi dalam hal ini.

06:18.970 --> 06:19.945
Jadi sekarang, kembali

06:19.945 --> 06:24.640
ke app ts, kita bisa menggunakan document getElementById sekali lagi dan menjangkau elemen dengan id app.

06:24.640 --> 06:28.780
Sekarang, kita memiliki masalah yang sama seperti sebelumnya,

06:28.780 --> 06:32.920
ini bisa jadi null, jadi kita harus menambahkan tanda seru karena

06:32.920 --> 06:35.112
sekali lagi, kita tahu dengan pasti

06:35.112 --> 06:39.620
bahwa itu tidak akan terjadi, dan getElementById tidak tahu bahwa ini

06:39.620 --> 06:42.283
akan menjadi elemen div HTML, jadi, kita harus

06:43.430 --> 06:46.030
melemparkan ini di sini juga.

06:46.030 --> 06:48.150
Dan dengan itu kita sekarang dapat menemukan bagaimana

06:48.150 --> 06:51.210
kita mendapatkan akses ke semua elemen yang kita perlukan.

06:51.210 --> 06:53.990
Nah, banyak sekali yang dibicarakan tentang itu.

06:53.990 --> 06:56.070
Dengan itu, sayangnya kami belum mencapai banyak hal.

06:56.070 --> 06:59.140
Kami memiliki akses ke elemen-elemen ini, tetapi

06:59.140 --> 07:01.970
kami tidak merender apa pun di sana.

07:01.970 --> 07:03.940
Jadi, mari kita lanjutkan dengan itu.

07:03.940 --> 07:05.790
Untuk itu, kita perlu mengimpor konten

07:05.790 --> 07:08.020
dari elemen templat ini, jadi pada dasarnya

07:08.020 --> 07:10.620
mengimpor apa yang ada di dalam tag templat dan merendernya

07:10.620 --> 07:11.760
ke DOM.

07:11.760 --> 07:15.520
Kita bisa melakukan ini di sini di konstruktor karena ide

07:15.520 --> 07:17.603
saya dan tentu saja, itu hanya ide

07:18.510 --> 07:20.270
saya, Anda bisa mengaturnya

07:20.270 --> 07:21.870
secara berbeda.

07:21.870 --> 07:22.940
Tetapi ide saya adalah ketika

07:22.940 --> 07:24.550
kita membuat instance baru dari kelas

07:24.550 --> 07:26.430
ini, saya langsung ingin merender form yang

07:26.430 --> 07:28.250
dimiliki instance ini.

07:28.250 --> 07:30.190
Jadi kita akan melakukannya dengan benar di konstruktor.

07:30.190 --> 07:31.770
Di sana kita bisa mendapatkan

07:31.770 --> 07:34.420
node yang diimpor atau konten HTML yang diimpor

07:34.420 --> 07:37.430
atau bagaimanapun Anda ingin menamainya, yang bisa

07:37.430 --> 07:40.627
kita dapatkan dengan dokumen importNode dan itu adalah

07:40.627 --> 07:44.917
metode yang disediakan pada objek dokumen global dan untuk importNode Anda

07:45.860 --> 07:49.260
meneruskan pointer pada elemen template Anda.

07:49.260 --> 07:52.650
Jadi elemen template ini pada akhirnya, atau tepatnya bukan elemennya

07:52.650 --> 07:54.410
tapi dot content di sana.

07:54.410 --> 07:57.010
Content adalah properti yang

07:57.010 --> 08:00.891
ada pada elemen template HTML dan hanya memberikan

08:00.891 --> 08:05.320
referensi ke konten template.

08:05.320 --> 08:07.480
Jadi untuk kode HTML di antara teks templat.

08:07.480 --> 08:09.520
ImportNode juga mengambil argumen

08:09.520 --> 08:13.306
kedua yang mendefinisikan apakah harus mengimpor ini dengan

08:13.306 --> 08:15.670
deep clone atau tidak.

08:15.670 --> 08:17.940
Jadi semua tingkat bersarang di dalam template dan saya pasti ingin melakukan

08:17.940 --> 08:19.630
itu jadi saya akan memberikan yang benar di sini.

08:19.630 --> 08:22.570
Sekarang, kita memiliki importedNode dan seperti yang

08:22.570 --> 08:26.340
akan Anda lihat, ini adalah tipe fragmen dokumen yang diasumsikan atau disimpulkan

08:26.340 --> 08:28.830
secara otomatis oleh typescript.

08:28.830 --> 08:30.770
Sekarang kita bisa menggunakan importedNode

08:30.770 --> 08:34.910
tersebut, dan tentu saja saya ingin menggunakannya untuk merender beberapa konten.

08:34.910 --> 08:36.960
Untuk itu saya akan menambahkan

08:36.960 --> 08:40.970
metode baru, metode privat yang akan saya beri nama attach.

08:40.970 --> 08:42.810
Anda tidak perlu melakukan itu, saya hanya

08:42.810 --> 08:45.150
ingin membagi logika pemilihan dan rendering saya.

08:45.150 --> 08:46.390
Di dalam attach, saya

08:46.390 --> 08:51.270
akan menjangkau elemen host, jadi tempat di mana saya ingin me-render konten

08:51.270 --> 08:52.820
saya dan memanggil insertAdjacentElement

08:52.820 --> 08:54.930
yang merupakan metode default yang

08:54.930 --> 08:57.840
disediakan oleh browser pada akhirnya dalam

08:57.840 --> 09:00.770
JavaScript.

09:00.770 --> 09:02.980
Untuk menyisipkan elemen HTML sebuah

09:02.980 --> 09:04.340
elemen yang berdekatan,

09:04.340 --> 09:08.778
pertama-tama dibutuhkan keterangan tempat untuk menyisipkannya, jadi di

09:08.778 --> 09:13.180
sana Anda dapat menyisipkannya setelah awal elemen yang Anda targetkan, jadi

09:13.180 --> 09:16.680
tepat setelah tag pembuka elemen host, sebelum awal atau sebelum

09:16.680 --> 09:17.850
tag pembuka, sebelum

09:17.850 --> 09:20.870
tag akhir atau setelah tag akhir.

09:20.870 --> 09:23.570
Dan di sini saya akan pergi untuk setelah

09:23.570 --> 09:27.020
mulai menyisipkannya tepat di awal tag pembuka.

09:27.020 --> 09:30.580
Dan kemudian hal yang ingin saya sisipkan adalah

09:30.580 --> 09:33.053
importedNode saya, namun, pertama-tama

09:34.900 --> 09:39.140
itu adalah konstanta yang hanya tersedia di konstruktor

09:39.140 --> 09:42.970
dan kedua, itu adalah fragmen dokumen.

09:42.970 --> 09:44.630
Kami tidak bisa memasukkannya seperti ini.

09:44.630 --> 09:46.896
Sebagai gantinya kita perlu mendapatkan akses ke elemen

09:46.896 --> 09:48.240
HTML konkret di sana, yang dapat kita

09:48.240 --> 09:49.800
simpan di elemen properti lain.

09:49.800 --> 09:52.770
Yang juga harus kita tambahkan sebagai field di atas

09:52.770 --> 09:55.560
sana yang bisa bertipe elemen HTML atau dalam

09:55.560 --> 09:58.270
kasus kita sebenarnya, kita tahu itu akan berada

09:58.270 --> 10:02.500
di dalam template di sini, jadi itu akan menjadi formulir.

10:02.500 --> 10:05.790
Itulah elemen pertama dalam templat.

10:05.790 --> 10:07.010
Jadi di sini kita bisa

10:07.010 --> 10:09.470
mengatakan ini akan menjadi elemen form HTML,

10:09.470 --> 10:10.960
dan kemudian di sini, elemen

10:10.960 --> 10:15.200
ini sama dengan importNode firstElementChild, sekarang kita hanya perlu

10:15.200 --> 10:20.106
memberi tahu typescript lagi, bahwa ini akan menjadi elemen form HTML.

10:20.106 --> 10:22.199
Sekarang elemen ini sekarang menjadi properti

10:22.199 --> 10:25.510
konkret yang menunjuk pada node yang ingin kita sisipkan.

10:25.510 --> 10:28.360
Jadi di bawah sana, di insertAdjacentElement,

10:28.360 --> 10:31.110
kita menyisipkan elemen ini di sini.

10:31.110 --> 10:33.690
Sekarang kita hanya perlu memastikan bahwa

10:33.690 --> 10:36.350
di sini di konstruktor, di bagian akhir kita

10:36.350 --> 10:38.460
memanggil attach, jadi metode attach

10:38.460 --> 10:39.950
privat ini, sehingga kode

10:39.950 --> 10:42.260
ini juga dieksekusi.

10:42.260 --> 10:44.290
Dan sekarang dengan semua pemformatan,

10:44.290 --> 10:46.620
beginilah tampilan kode saya.

10:46.620 --> 10:48.200
Sehingga sekarang adalah kelas

10:48.200 --> 10:51.460
input proyek, dan secara teoritis, ketika kita menginstansiasinya,

10:51.460 --> 10:53.950
itu harus merender formulir.

10:53.950 --> 10:56.920
Sekarang, mari kita mencobanya.

10:56.920 --> 10:59.440
Di bawah kelas, mari kita buat konstanta baru, prjInput

10:59.440 --> 11:01.120
misalnya, nama terserah Anda.

11:01.120 --> 11:05.415
Dan sebut Input proyek baru seperti ini.

11:05.415 --> 11:08.930
Dan jika kita sekarang menyimpannya, itu harus dikompilasi

11:08.930 --> 11:11.783
ulang dan dimuat ulang dan jika Anda kembali

11:11.783 --> 11:14.160
ke browser, memang Anda akan melihat

11:14.160 --> 11:16.050
formulir itu di sini.

11:16.050 --> 11:17.990
Jadi, itu cukup rapi, karena dengan itu,

11:17.990 --> 11:20.660
kami membuat langkah pertama yang sangat penting.

11:20.660 --> 11:22.450
Kami memiliki formulir yang

11:22.450 --> 11:26.930
diberikan dan meskipun banyak yang hilang, itu lebih baik daripada

11:26.930 --> 11:29.150
tidak sama sekali.

11:29.150 --> 11:31.630
Formulir ini, berasal dari file html indeks

11:31.630 --> 11:33.010
dan dirender dengan bantuan

11:33.010 --> 11:36.430
kode typescript berorientasi objek kita di atas sana.
