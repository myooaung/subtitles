WEBVTT

00:02.210 --> 00:03.450
Mężczyzna Instruktor: Teraz

00:03.450 --> 00:06.170
oprócz właściwości, możesz również dodać dekoratory do

00:06.170 --> 00:09.200
accessorów i tam utworzę nową funkcję dekoratora, ponieważ to

00:09.200 --> 00:11.660
będzie teraz otrzymywało wolne argumenty.

00:11.660 --> 00:16.430
Log2, uzyska również cel, który ponownie jest albo prototypem, jeśli mamy

00:16.430 --> 00:18.330
do czynienia z accessorem instancji,

00:18.330 --> 00:21.290
lub jeśli mamy do czynienia ze statycznym, będzie

00:21.290 --> 00:23.360
to funkcja konstruktora, więc nie

00:23.360 --> 00:24.960
wiemy, że będziemy mieć typ

00:24.960 --> 00:27.290
dowolny.

00:27.290 --> 00:32.290
Wtedy będziemy mieli nazwisko członka, z którym mamy do czynienia.

00:32.410 --> 00:35.030
Czyli nazwa accessora na końcu.

00:35.030 --> 00:38.683
I będziemy mieli tutaj również deskryptor właściwości, który

00:39.580 --> 00:42.030
będzie typu property descriptor.

00:42.030 --> 00:44.600
To jest typ wbudowany w TypeScript.

00:44.600 --> 00:49.600
Więc tam, niech loguje dekorator accessor, a następnie będę

00:50.030 --> 00:54.210
również logować konsolę cel tutaj, a następnie może

00:54.210 --> 00:56.470
nowe linie, aby były bardziej

00:56.470 --> 01:01.470
czytelne w wyjściu, nazwa, a także deskryptor.

01:01.720 --> 01:05.890
Teraz dodajmy log2 do setera tutaj w ten sposób i zobaczmy,

01:05.890 --> 01:07.350
co otrzymamy.

01:07.350 --> 01:10.733
Jeśli to zapiszemy, zobaczysz, że na dole masz dekorator

01:10.733 --> 01:14.090
accessora, który wykonuje się tutaj.

01:14.090 --> 01:19.090
Znów dostaliśmy nasz prototyp, taki sam jak buff na posesję.

01:19.320 --> 01:23.570
Następnie otrzymaliśmy nazwę naszego accessora, w tym przypadku price.

01:23.570 --> 01:24.900
Nie cena underscore, więc

01:24.900 --> 01:27.890
nie własność, z którą zajmuje się wewnętrznie.

01:27.890 --> 01:30.570
Zamiast tego naprawdę nazwa samego accessora.

01:30.570 --> 01:33.630
I mamy tutaj deskryptor właściwości, gdzie widzimy,

01:33.630 --> 01:36.240
że funkcja setter jest zdefiniowana dla

01:36.240 --> 01:37.600
przykładu, funkcja

01:37.600 --> 01:41.990
getter nie, bo dla ceny mam tylko setter, bez gettera.

01:41.990 --> 01:44.320
I widzimy, że nie jest to enumeratywne, ale

01:44.320 --> 01:45.680
że jest konfigurowalne.

01:45.680 --> 01:47.810
Tak, że możemy zmienić tę definicję

01:47.810 --> 01:51.000
tutaj na przykład, że możemy ją usunąć i tak dalej.

01:51.000 --> 01:54.520
To wszystko istnieje i jest to sposób, w jaki możemy dodać dekorator

01:54.520 --> 01:56.650
do accessora, a co następnie możemy uzyskać

01:56.650 --> 01:58.920
dostęp wewnątrz tego dekoratora.

01:58.920 --> 02:00.910
Teraz oprócz właściwości i accessorów

02:00.910 --> 02:04.350
mamy również metody i możemy dodawać dekoratory do metod.

02:04.350 --> 02:09.350
Więc tutaj dodam Log3, i dodam to do mojej metody na dole,

02:09.430 --> 02:11.970
aby uzyskać cenę z tekstem.

02:11.970 --> 02:13.220
I teraz oczywiście

02:13.220 --> 02:17.323
pytanie, jakie argumenty otrzymuje taki dekorator metod?

02:18.180 --> 02:22.230
Dekorator metody otrzymuje również wolne argumenty,

02:22.230 --> 02:25.520
cel ponownie, który, jeśli jest to metoda instancji,

02:25.520 --> 02:28.420
jest prototypem obiektu.

02:28.420 --> 02:31.150
Jeśli jest to metoda statyczna, funkcja

02:31.150 --> 02:34.993
konstruktora tak jak wcześniej, następnie nazwa metody

02:36.450 --> 02:39.380
tutaj, więc ciąg lub symbol faktycznie.

02:39.380 --> 02:44.380
A także deskryptor na końcu, deskryptor nieruchomości.

02:44.490 --> 02:46.140
Są to wolne argumenty, które otrzymujemy

02:46.140 --> 02:48.110
tutaj, i widzisz, że są to te same argumenty,

02:48.110 --> 02:49.410
co w naszym accessorze.

02:49.410 --> 02:51.630
Więc rzeczywiście moglibyśmy również

02:51.630 --> 02:54.340
ponownie wykorzystać to, ale stworzę nowy,

02:54.340 --> 02:57.483
aby tutaj móc wydrukować dekorator metody.

02:59.020 --> 03:00.840
Teraz z tym, jeśli zapisałem to, to wykonuje

03:01.980 --> 03:04.410
się i widzisz tutaj nasz dekorator metody wykonuje

03:04.410 --> 03:07.880
się, a następnie tutaj otrzymujemy nasz prototyp, ten sam obiekt,

03:07.880 --> 03:09.380
co wcześniej.

03:09.380 --> 03:11.310
Otrzymujemy nazwę metody tutaj

03:11.310 --> 03:14.700
i otrzymujemy ten deskryptor tej metody tutaj.

03:14.700 --> 03:17.440
Więc bardzo to samo zachowanie, co wcześniej w zasadzie,

03:17.440 --> 03:19.400
tylko deskryptor jest trochę inny, ponieważ

03:19.400 --> 03:20.950
jest to deskryptor metody, a nie

03:20.950 --> 03:22.550
deskryptor dostępu.

03:22.550 --> 03:25.720
Mamy tutaj wartość i właściwość do zapisu.

03:25.720 --> 03:27.750
Wcześniej na deskryptorze accessora

03:27.750 --> 03:28.860
mieliśmy get i set.

03:28.860 --> 03:30.910
Ale to tylko różnica między skryptami java,

03:30.910 --> 03:33.088
nic specyficznego dla TypeScript.

03:33.088 --> 03:38.088
Tak więc, mamy tutaj naszą trzecią funkcję dekoratora, którą teraz

03:38.150 --> 03:40.070
dodaliśmy do metody.

03:40.070 --> 03:43.390
Ostatnim dekoratorem, jaki możemy dodać, jest dekorator do parametru.

03:43.390 --> 03:45.260
Więc zróbmy to teraz.

03:45.260 --> 03:47.550
W tym celu stworzę jeszcze jedną funkcję

03:47.550 --> 03:51.269
tutaj, Log4 i chcę dodać Log4 do tego jednego parametru, który

03:51.269 --> 03:53.660
dostaję tutaj, tax i mógłbyś dodać jeden

03:53.660 --> 03:55.510
do każdego parametru, który dostajesz

03:55.510 --> 03:57.130
oczywiście.

03:57.130 --> 03:59.560
Nie musisz, ale możesz je dodać niezależnie

03:59.560 --> 04:02.990
do każdego parametru, do którego chcesz dodać dekorator.

04:02.990 --> 04:06.419
Teraz co dekorator parametrów dostaje jako argumenty?

04:06.419 --> 04:10.790
Cóż, dostaje cel taki sam jak wcześniej.

04:10.790 --> 04:12.520
Kolejnym argumentem, który otrzymujemy

04:12.520 --> 04:14.100
jest nazwa i to nie nazwa parametru,

04:14.100 --> 04:17.310
ale nazwa metody, w której użyliśmy tego parametru.

04:17.310 --> 04:20.530
Więc w zasadzie to samo, co w dotychczasowym dekoratorze metod.

04:20.530 --> 04:22.170
Ale ostatni argument jest inny.

04:22.170 --> 04:24.250
To teraz nie jest deskryptor właściwości,

04:24.250 --> 04:28.380
ale zamiast tego jest to pozycja tego argumentu, więc numer

04:28.380 --> 04:30.100
argumentu.

04:30.100 --> 04:32.763
Tutaj na przykład byłby to pierwszy argument.

04:35.310 --> 04:38.670
Więc teraz znowu skopiujmy to tutaj i

04:38.670 --> 04:43.550
umieśćmy to wszystko w dekoratorze parametrów Log4.

04:43.550 --> 04:45.410
I tu też wyjmijmy pozycję, żebyśmy

04:45.410 --> 04:47.170
mogli zobaczyć, co tam jest.

04:47.170 --> 04:50.960
Jeśli teraz zapisaliśmy to, widzimy nasz dekorator parametrów tam, nie ostatnie

04:50.960 --> 04:53.480
wyjście, ponieważ kolejność wykonywania jest inna,

04:53.480 --> 04:55.630
ale widzimy nasz dekorator parametrów tutaj,

04:55.630 --> 04:57.180
a następnie tutaj.

04:57.180 --> 04:59.530
Otrzymaliśmy prototyp jak poprzednio.

04:59.530 --> 05:00.860
Dostaliśmy nazwę metody,

05:00.860 --> 05:02.190
w której użyliśmy tego

05:02.190 --> 05:04.770
parametru, a następnie indeks tego argumentu,

05:04.770 --> 05:06.240
a to zaczyna się od zera,

05:06.240 --> 05:09.070
więc pierwszy argument ma tutaj numer zero, indeks

05:09.070 --> 05:10.360
zero i to jest nasz dekorator

05:10.360 --> 05:12.740
parametrów.

05:12.740 --> 05:14.920
Są to więc wszystkie miejsca, w których możemy

05:14.920 --> 05:16.370
dodać dekoratory i TypeScript,

05:16.370 --> 05:18.570
i możemy z nimi robić różne rzeczy.

05:18.570 --> 05:20.450
Teraz pokażę ci kilka przykładów

05:20.450 --> 05:21.660
w tym module tutaj,

05:21.660 --> 05:24.813
a także pokażę biblioteki lub frameworki, które

05:24.813 --> 05:28.380
mocno wykorzystują dekoratory.

05:28.380 --> 05:30.550
I pokażę ci, co robią z dekoratorami,

05:30.550 --> 05:34.583
aby dać ci wyobrażenie o mocy, jaką mogą mieć dekoratorzy.
