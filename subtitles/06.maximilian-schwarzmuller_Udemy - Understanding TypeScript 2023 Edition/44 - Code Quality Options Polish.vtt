WEBVTT

00:02.220 --> 00:03.053
Instruktor: Teraz,

00:03.053 --> 00:04.883
jeśli przejdziesz dalej, mamy więcej opcji,

00:04.883 --> 00:07.920
noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
To pomaga ci w jakości kodu, w zasadzie.

00:10.470 --> 00:13.110
TypeScript będzie narzekał, jeśli masz

00:13.110 --> 00:15.930
pewne nieużywane zmienne i tak dalej.

00:15.930 --> 00:20.930
Jeśli więc włączymy te trzy opcje, to na przykład ta opcja pomaga w przypadku

00:21.711 --> 00:24.230
instrukcji Switch, gdzie można zapomnieć

00:24.230 --> 00:26.270
o słowie kluczowym break.

00:26.270 --> 00:28.880
Ale jeśli włączymy te trzy opcje, to to, na co

00:28.880 --> 00:31.760
TypeScript będzie narzekał, to na przykład, jeśli

00:31.760 --> 00:33.600
miałeś zmienną username tutaj,

00:33.600 --> 00:36.730
lokalnie w tej funkcji, i nie używasz jej.

00:36.730 --> 00:39.490
Widzisz, to ma żółte kwadratowe linie, ponieważ

00:39.490 --> 00:41.500
nie jest to błąd, naprawdę.

00:41.500 --> 00:43.179
To raczej ostrzeżenie lub wskazówka.

00:43.179 --> 00:45.643
Więc jeśli skompiluję tutaj, zobaczysz

00:47.750 --> 00:49.500
teraz, jednak otrzymam błąd,

00:49.500 --> 00:51.900
ponieważ TypeScript zna tylko błędy.

00:51.900 --> 00:54.140
I tam widzimy, że nazwa użytkownika jest zadeklarowana,

00:54.140 --> 00:57.080
ale jej wartość nigdy nie jest odczytywana, ponieważ upewniliśmy

00:57.080 --> 01:00.550
się, że nie chcemy nieużywanych zmiennych lokalnych.

01:00.550 --> 01:02.483
Nieużywane zmienne globalne, więc

01:03.440 --> 01:06.340
gdybym miał coś takiego jak appId tutaj, są dozwolone,

01:06.340 --> 01:09.130
ponieważ TypeScript nie może wiedzieć, czy może

01:09.130 --> 01:12.370
potrzebujesz tej globalnie zdefiniowanej wartości w innym

01:12.370 --> 01:13.870
pliku skryptu.

01:13.870 --> 01:14.980
Więc dlatego jest to dozwolone,

01:14.980 --> 01:17.280
ale w funkcji, w której nie ma innego miejsca, w którym

01:17.280 --> 01:20.010
mógłbyś go potrzebować, TypeScript będzie teraz narzekał,

01:20.010 --> 01:22.020
jeśli masz nieużywany kod.

01:22.020 --> 01:23.540
I to jest generalnie dobry pomysł.

01:23.540 --> 01:26.021
Pozwala na usunięcie takiego nieużywanego kodu.

01:26.021 --> 01:28.510
To samo dotyczy niewykorzystanych parametrów.

01:28.510 --> 01:31.350
Jeśli wziąłbyś H tutaj, gdzie jeden, oczywiście,

01:31.350 --> 01:33.050
bind jest teraz zepsuty, ale

01:33.050 --> 01:35.970
nawet jeśli przekażemy to w tym działa, ale teraz,

01:35.970 --> 01:39.220
znowu, TypeScript i dlatego ID mówi nam, że to jest nieużywane

01:39.220 --> 01:41.780
i albo to, więc może powinieneś go usunąć lub

01:41.780 --> 01:44.293
zacząć używać.

01:45.238 --> 01:48.173
Tak więc to jest noUnusedParameters.

01:48.173 --> 01:51.365
A noImplicitReturns oznacza, że dostaniemy

01:51.365 --> 01:55.620
błąd, jeśli mamy funkcję, która czasem coś zwraca, a

01:55.620 --> 01:57.130
czasem nie.

01:57.130 --> 02:00.913
Powiedzmy, że mamy kolejną funkcję, add, gdzie otrzymujemy

02:01.912 --> 02:02.940
dwie liczby.

02:02.940 --> 02:05.906
Liczba i n2 jest liczbą.

02:05.906 --> 02:10.906
I oczywiście możemy zwrócić n1 plus n2.

02:14.030 --> 02:15.710
Ale powiedzmy, że z jakiegoś

02:15.710 --> 02:18.518
powodu sprawdzamy, czy n1 plus n2 jest większe

02:18.518 --> 02:21.800
od zera, ponieważ chcemy zwrócić tylko wtedy, gdy mamy

02:21.800 --> 02:23.700
wynik większy od zera.

02:23.700 --> 02:25.040
Następnie chcemy uzyskać wartość zwracaną.

02:25.040 --> 02:26.940
W przeciwnym razie chcemy nie zwracać nic.

02:26.940 --> 02:28.170
Nie chcemy powrotu.

02:28.170 --> 02:30.550
Cóż, wtedy otrzymujemy ostrzeżenie z powodu tego dodatkowego

02:30.550 --> 02:32.598
ustawienia z noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript wykrywa, że nie wszystkie gałęzie w tej funkcji prowadzą

02:36.401 --> 02:38.760
do deklaracji return, a z powodu naszego ustawienia

02:38.760 --> 02:40.650
jest to niedozwolone.

02:40.650 --> 02:44.150
Musimy przynajmniej celowo nie zwracać tutaj niczego, dodając

02:44.150 --> 02:45.790
słowo kluczowe return.

02:45.790 --> 02:48.260
Samo jego pominięcie jest tu niedopuszczalne.

02:48.260 --> 02:49.730
Jest to dozwolone, jeśli masz

02:49.730 --> 02:52.446
funkcję, która nie zwraca niczego, w żadnej gałęzi, ale

02:52.446 --> 02:54.520
jeśli masz co najmniej jeden przypadek,

02:54.520 --> 02:56.423
w którym twoja funkcja zwraca coś, to musisz

02:56.423 --> 02:59.933
upewnić się, że zwracasz coś we wszystkich przypadkach.

03:01.830 --> 03:03.130
I tym samym zbliżamy się do końca

03:03.130 --> 03:04.240
tego walkthrough configu.

03:04.240 --> 03:06.526
Możemy tutaj zignorować modułResolution.

03:06.526 --> 03:08.933
Wszystkie te opcje faktycznie są dość zaawansowane,

03:08.933 --> 03:10.830
które nie mają dla nas tutaj znaczenia,

03:10.830 --> 03:13.510
nie mają znaczenia dla Ciebie w wielu projektach.

03:13.510 --> 03:16.600
Opcje map źródłowych pozwalają na dostosowanie tych map źródłowych, którym

03:16.600 --> 03:18.180
przyjrzeliśmy się wcześniej.

03:18.180 --> 03:21.440
Czyli te pliki tłumaczące z JavaScript na TypeScript.

03:21.440 --> 03:23.720
Typowe ustawienia domyślne powinny być tutaj

03:23.720 --> 03:26.000
w porządku, więc jeśli nie wiesz, co zmieniasz

03:26.000 --> 03:27.010
i dlaczego to robisz,

03:27.010 --> 03:29.470
zazwyczaj nie musisz niczego tutaj zmieniać.

03:29.470 --> 03:31.512
A co do tych eksperymentalnych

03:31.512 --> 03:34.380
opcji, to przyjrzę się im, a konkretnie

03:34.380 --> 03:37.010
experimentalDecorators, później w

03:37.010 --> 03:38.910
module dekoratorów.

03:38.910 --> 03:41.810
To w zasadzie pozwala na użycie pewnych funkcji

03:41.810 --> 03:45.060
w TypeScript, które są naprawdę eksperymentalne, gdzie

03:45.060 --> 03:48.271
nie jest pewne, czy skończą się w JavaScript w pewnym

03:48.271 --> 03:50.270
momencie w przyszłości i gdzie nadal

03:50.270 --> 03:52.940
możesz chcieć z nimi pracować.

03:52.940 --> 03:55.220
Następnie wyraźnie musisz powiedzieć TypeScriptowi,

03:55.220 --> 03:57.070
że chcesz pracować z tymi funkcjami i możesz

03:57.070 --> 03:59.390
to zrobić za pomocą tej konfiguracji.

03:59.390 --> 04:01.880
Ale znów wrócę do tego tematu.

04:01.880 --> 04:04.170
I dlatego teraz przechodzimy przez ten plik, wiele

04:04.170 --> 04:05.870
opcji, które można tam ustawić.

04:05.870 --> 04:08.222
A wraz z rozwojem TypeScript, zazwyczaj dodaje

04:08.222 --> 04:10.612
się tutaj również coraz więcej opcji, dlatego

04:10.612 --> 04:13.837
oficjalne docs zawsze są świetnym miejscem, aby zanurkować

04:13.837 --> 04:16.160
głębiej i upewnić się, że nie przegapisz interesującej

04:16.160 --> 04:20.343
opcji, która może pomóc Ci w Twoim projekcie.
