WEBVTT

00:02.220 --> 00:03.053
-: Sigamos adelante.

00:03.053 --> 00:04.950
Tenemos la opción outFile aquí, ahora

00:04.950 --> 00:07.730
esta opción no nos importa en este momento, no funcionará

00:07.730 --> 00:09.440
en este momento.

00:09.440 --> 00:12.340
Más interesante para nosotros es outDIR y rootDir.

00:12.340 --> 00:14.720
Cuanto más grande sea tu proyecto,

00:14.720 --> 00:17.640
más querrás organizar tus archivos.

00:17.640 --> 00:19.690
Normalmente, no querrás tener

00:19.690 --> 00:21.770
tus archivos por aquí en tu carpeta

00:21.770 --> 00:24.120
de proyecto de nivel raíz.

00:24.120 --> 00:26.580
En su lugar, lo que a menudo verás en los proyectos

00:26.580 --> 00:28.080
es que tienes una carpeta de origen,

00:28.080 --> 00:29.790
y tienes una carpeta dist, siguiente,

00:29.790 --> 00:31.240
siguiente.

00:31.240 --> 00:35.690
Así, la carpeta dist tiene el trabajo de mantener toda la salida, por lo que todos los

00:35.690 --> 00:37.800
archivos de JavaScript, digamos.

00:37.800 --> 00:41.380
Y la carpeta de origen puede contener todos nuestros archivos TypeScript.

00:41.380 --> 00:44.643
Así que podemos mover los archivos de TypeScript a la carpeta

00:44.643 --> 00:47.430
de origen, y si ahora borro la carpeta de JavaScript,

00:47.430 --> 00:49.891
tenemos el problema de que si compilamos todo,

00:49.891 --> 00:53.167
estos archivos de TypeScript se compilan porque TypeScript,

00:53.167 --> 00:55.768
el compilador sí busca en las subcarpetas, pero

00:55.768 --> 01:00.050
la salida se encuentra junto a nuestros archivos de entrada.

01:00.050 --> 01:02.760
Y eso es algo que podemos controlar con el outDir,

01:02.760 --> 01:03.660
por ejemplo.

01:03.660 --> 01:07.117
Si establecemos outDir, podemos indicar a los tipos con

01:07.117 --> 01:10.900
el compilador dónde debe almacenarse el archivo creado.

01:10.900 --> 01:13.580
Podríamos ponerlo en dist.

01:13.580 --> 01:17.037
Ahora bien, si hacemos eso, entonces si ejecutas chia seed verás

01:17.037 --> 01:19.560
que los archivos JavaScript, efectivamente,

01:19.560 --> 01:21.500
no están colocados en la carpeta source,

01:21.500 --> 01:23.170
sino en la carpeta dist.

01:23.170 --> 01:26.340
Ahora sólo tenemos que ajustar nuestro índice. archivo html, y allí apuntar

01:26.340 --> 01:31.630
a dist/app. js y dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
o alternativamente mover el índice. html en la carpeta dist, pero

01:33.880 --> 01:36.172
entonces nuestro servidor def ya no funcionaría correctamente

01:36.172 --> 01:37.550
en este momento.

01:37.550 --> 01:39.875
Así que vamos a ajustar estas importaciones

01:39.875 --> 01:44.140
y con eso, tenemos una aplicación de trabajo todavía, como usted ve,

01:44.140 --> 01:45.270
pero ahora con una

01:45.270 --> 01:48.480
estructura de proyecto más limpio.

01:48.480 --> 01:49.650
Ahora lo bueno es que, si

01:49.650 --> 01:51.530
tuviéramos una subcarpeta aquí, una

01:51.530 --> 01:52.980
carpeta analytics, digamos,

01:52.980 --> 01:54.893
y tuviéramos nuestro archivo TypeScript

01:54.893 --> 01:57.350
ahí, entonces si volvemos a compilar, y no importa

01:57.350 --> 02:00.373
si lo haces con este comando o con el modo watch, esta estructura

02:00.373 --> 02:03.300
de carpetas que tienes la carpeta fuente se replicará toda

02:03.300 --> 02:05.640
en la carpeta dist, lo cual es, por supuesto, muy

02:05.640 --> 02:07.370
conveniente porque eso asegura que

02:07.370 --> 02:08.813
puedes importar los archivos

02:08.813 --> 02:14.110
básicamente como los importarías en la carpeta fuente, también, para que se mantenga la estructura que

02:14.110 --> 02:16.640
estableciste ahí.

02:16.640 --> 02:18.800
Ahora también puede establecer el directorio

02:18.800 --> 02:21.230
raíz y establecer esto específicamente en la

02:21.230 --> 02:23.800
carpeta donde se almacenan sus archivos, como en

02:23.800 --> 02:25.202
este ejemplo, la fuente, para

02:25.202 --> 02:28.560
asegurarse de que los tipos de compilador no busca en nuestras

02:28.560 --> 02:30.030
carpetas.

02:30.030 --> 02:31.530
Eso es algo que también puedes

02:31.530 --> 02:34.003
hacer con la opción de incluir ahí abajo, ¿no?

02:34.870 --> 02:36.007
Pero con el directorio

02:36.007 --> 02:38.781
raíz, los tipos de compiladores no sólo miran

02:38.781 --> 02:41.450
esa carpeta de origen, sino que también se aseguran

02:41.450 --> 02:45.680
de que la estructura del proyecto, que se establece allí, se mantiene

02:45.680 --> 02:47.880
en una carpeta dist.

02:47.880 --> 02:50.020
Ahora lo hizo por defecto antes, como has visto,

02:50.020 --> 02:51.820
pero ten en cuenta que antes habría incluido

02:51.820 --> 02:54.280
cualquier archivo TypeScript aquí, todo el inicio de

02:54.280 --> 02:55.699
la fuente, así que, por ejemplo,

02:55.699 --> 02:58.830
si comentas esto temporalmente si teníamos una carpeta de usuario aquí

02:58.830 --> 03:03.280
en el nivel superior con un usuario.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
donde tenemos un nombre de usuario de Max digamos,

03:06.170 --> 03:07.750
entonces si compilamos esto,

03:07.750 --> 03:09.752
todos verán esa carpeta de usuario

03:09.752 --> 03:11.420
en la carpeta dist.

03:11.420 --> 03:13.810
Y ahora la carpeta de fuentes se incluye también

03:13.810 --> 03:17.200
porque ahora tenemos un archivo typescript en un nivel superior y

03:17.200 --> 03:19.950
por lo tanto el compilador typescript piensa que todo

03:19.950 --> 03:21.780
nuestro proyecto de nuevo es la entrada

03:21.780 --> 03:24.920
y replica la estructura de carpetas que encuentra allí en la carpeta

03:24.920 --> 03:25.970
dist.

03:25.970 --> 03:28.960
Por supuesto, esto no es lo que queremos y ahí

03:28.960 --> 03:30.120
es donde la opción

03:30.976 --> 03:32.660
rootDir nos ayuda.

03:32.660 --> 03:34.020
Ahora bien, si establecemos

03:34.020 --> 03:35.950
esto como fuente, incluso si tuviéramos

03:35.950 --> 03:38.630
otras carpetas con archivos TypeScript allí en el nivel

03:38.630 --> 03:40.400
de la raíz, no se incluirían en la salida

03:40.400 --> 03:41.830
y la propia carpeta de origen no

03:41.830 --> 03:43.780
terminaría allí de repente.

03:43.780 --> 03:46.480
Así que a menudo se establece tanto rootDir como outDir para

03:46.480 --> 03:49.650
ser realmente claro en cuanto a donde viven los archivos de entrada

03:49.650 --> 03:52.040
y donde se generarán los archivos de salida.

03:52.040 --> 03:54.870
Si seguimos adelante, podemos ignorar los compuestos.

03:54.870 --> 03:57.010
Podemos echar un vistazo a removeComments.

03:57.010 --> 03:58.780
Debería ser bastante claro si

03:58.780 --> 04:00.850
usted establece esto, entonces cualquier

04:00.850 --> 04:04.450
comentario que pueda tener en sus archivos TypeScript, será

04:04.450 --> 04:08.000
eliminado en los archivos JavaScript compilados.

04:08.000 --> 04:11.200
Así que si comento esto y compilo mi código, verás una

04:11.200 --> 04:12.970
aplicación. ts, tengo un comentario.

04:12.970 --> 04:14.990
Una aplicación. js, no está ahí.

04:14.990 --> 04:18.330
Así que puedes hacer eso para que tus archivos sean más pequeños

04:18.330 --> 04:20.950
y el esfuerzo puede ser una buena opción.

04:20.950 --> 04:23.820
También puede establecer noEmit si no quiere generar

04:23.820 --> 04:25.600
ningún archivo JavaScript.

04:25.600 --> 04:27.130
Ahora bien, esto puede sonar extraño

04:27.130 --> 04:29.190
porque esa es la idea de TypeScript, pero si

04:29.190 --> 04:30.700
sólo quieres comprobar si tus archivos

04:30.700 --> 04:32.420
son correctos pero no quieres escribir

04:32.420 --> 04:35.030
todos estos archivos de salida, para ahorrar algo de tiempo,

04:35.030 --> 04:39.120
por ejemplo, en un proyecto más grande, entonces podrías establecer esto a "true"

04:39.120 --> 04:41.792
para que sólo los tipos de compiladores comprueben tus

04:41.792 --> 04:45.460
archivos e informen de cualquier error potencial sin crear realmente un archivo

04:45.460 --> 04:47.903
de salida.

04:47.903 --> 04:50.490
importHelpers no es realmente importante para nosotros,

04:50.490 --> 04:52.065
aquí podemos ignorar eso.

04:52.065 --> 04:54.570
downlevelIteration es una opción avanzada.

04:54.570 --> 04:57.150
Es interesante cuando compilas tu

04:57.150 --> 05:00.295
código a versiones antiguas de JavaScript

05:00.295 --> 05:02.690
y trabajas con cuatro bucles.

05:02.690 --> 05:05.798
Entonces, en algunos escenarios raros, podrías encontrarte con problemas

05:05.798 --> 05:08.378
en los que la compilación no funcione correctamente.

05:08.378 --> 05:10.440
Esta opción, si la activas, te dará una

05:10.440 --> 05:12.770
compilación más exacta, que funcionará en

05:12.770 --> 05:15.280
estos casos de nicho, por lo que podrías pensar

05:15.280 --> 05:17.210
que deberías activarla siempre, pero

05:17.210 --> 05:20.097
también la salida más donde esos códigos.

05:20.097 --> 05:21.880
Por lo tanto, sólo debe activar esta

05:21.880 --> 05:25.110
opción si tiene bucles y ve que el código generado se comporta de repente

05:25.110 --> 05:27.700
de forma diferente a como debería hacerlo con respecto

05:27.700 --> 05:29.023
a esos bucles.
