WEBVTT

00:02.210 --> 00:04.200
Instrutor: Então, temos este servidor dummy

00:04.200 --> 00:05.490
básico funcionando, mas este

00:05.490 --> 00:08.380
servidor não está fazendo nada de útil, é claro.

00:08.380 --> 00:11.430
Agora, eu disse que quero construir uma API de descanso muito

00:11.430 --> 00:13.110
simples, e para isso, eu realmente

00:13.110 --> 00:15.570
criarei uma nova subpasta na pasta de origem, que

00:15.570 --> 00:16.830
eu nomearei rotas.

00:16.830 --> 00:19.870
Ali, acrescentarei um arquivo que deverá tratar de um certo

00:19.870 --> 00:22.540
conjunto de rotas deste API de descanso, e agora cabe

00:22.540 --> 00:25.710
a você decidir que tipo de API você quer construir.

00:25.710 --> 00:28.520
Eu construirei uma API todo aqui, se você pegou a seção

00:28.520 --> 00:30.770
Reagir em TypeScript, isso soa familiar para

00:30.770 --> 00:32.140
você porque lá nós construímos

00:32.140 --> 00:34.530
um aplicativo todo também, isto é totalmente

00:34.530 --> 00:36.820
independente daquela seção, mas não funcionará

00:36.820 --> 00:38.710
junto com o Reagir, claro que você poderia

00:38.710 --> 00:41.250
conectá-lo por conta própria, mas aqui eu construirei

00:41.250 --> 00:43.870
uma API todo simples simplesmente para que possamos

00:43.870 --> 00:48.350
ver como o TypeScript funciona com o Node e o Express.

00:48.350 --> 00:51.400
A aplicação que estamos construindo não é muito complexa,

00:51.400 --> 00:54.760
mas conterá uma série de conceitos interessantes.

00:54.760 --> 00:57.080
Por isso, aqui, acrescentaremos todas as

00:57.080 --> 01:01.800
minhas rotas, acrescentando um todos. ts na pasta de rotas, e lá dentro, agora

01:01.800 --> 01:04.570
quero usar o Express. js para registrar

01:04.570 --> 01:06.630
algumas rotas.

01:06.630 --> 01:09.730
Para isso, vou importar algo do Express,

01:09.730 --> 01:13.700
e que agora algo é realmente o roteador.

01:13.700 --> 01:16.160
Agora a sintaxe comum do JS para isso normalmente

01:16.160 --> 01:20.950
é que você importa o Express usando o express, e então em uma nova linha, você

01:20.950 --> 01:23.550
frequentemente vê código onde nós fazemos

01:23.550 --> 01:25.673
isso aqui.

01:27.090 --> 01:28.180
Isso é algo que você pode

01:28.180 --> 01:30.130
fazer, mas aqui eu o importarei assim.

01:31.130 --> 01:34.120
Agora isto nos dá um roteador, e podemos simplesmente chamar

01:34.120 --> 01:36.750
o Router aqui como uma função, e isto nos permite registrar

01:36.750 --> 01:39.300
middleware, assim, no final, roteia pontos finais

01:39.300 --> 01:41.980
para solicitações de entrada, onde então executamos

01:41.980 --> 01:45.540
alguma lógica sobre estas solicitações.

01:45.540 --> 01:48.980
Agora para o aplicativo todo, eu quero registrar algumas rotas básicas,

01:48.980 --> 01:53.700
uma rota de correio em slash nada onde possamos adicionar um novo todo, então aqui vamos precisar

01:53.700 --> 01:55.760
de algum código, alguma função que depois

01:55.760 --> 01:58.860
adiciona um todo em algum lugar, por enquanto vou apenas especificar

01:58.860 --> 02:01.250
nenhum código, apenas configurar a rota em geral

02:01.250 --> 02:03.380
aqui.

02:03.380 --> 02:05.110
Então temos o pedido de postagem,

02:05.110 --> 02:08.770
depois um pedido de obter, obter todos, digamos, depois

02:08.770 --> 02:12.900
também um pedido de patch para atualizar um todo, e lá eu espero

02:12.900 --> 02:15.520
obter o id, um segmento dinâmico na URL,

02:15.520 --> 02:19.280
e depois aqui também um pedido de exclusão para excluir

02:19.280 --> 02:22.700
um todo por id.

02:22.700 --> 02:25.720
Estas são minhas rotas, e agora podemos exportar o roteador

02:25.720 --> 02:28.620
configurado como padrão neste arquivo.

02:28.620 --> 02:30.930
Agora não vai acontecer nada nessas rotas, certo?

02:30.930 --> 02:32.510
Não criei nenhuma função que possa

02:32.510 --> 02:35.830
ser executada quando um pedido chega a estes pontos finais, mas

02:35.830 --> 02:38.620
pelo menos agora sabemos que rotas queremos, acrescentaremos

02:38.620 --> 02:41.740
as funções em um segundo passo depois.

02:41.740 --> 02:44.100
Por enquanto, vamos apenas conectar o roteador aqui, as rotas configuradas

02:44.100 --> 02:48.320
ao nosso servidor em execução aqui no aplicativo. ts, e para fazer isso,

02:48.320 --> 02:53.211
apenas importamos nossos, digamos todoRoutes

02:53.211 --> 02:54.290
de . /rotas/todos.

02:56.040 --> 02:58.910
Portanto, estamos importando aquele roteador exportado

02:58.910 --> 03:01.610
em todos para a aplicação. ts, e agora aqui, precisamos

03:01.610 --> 03:03.390
conectá-la à nossa aplicação Express

03:03.390 --> 03:08.340
em execução, utilizando o app. e depois digamos que queremos encaminhar

03:08.340 --> 03:10.800
todas as solicitações que começam com

03:10.800 --> 03:14.600
/todos para nosso todoRoutes, de modo que as solicitações

03:14.600 --> 03:17.210
que visam um URL diferente não serão tratadas

03:17.210 --> 03:18.703
lá.

03:19.920 --> 03:23.730
Por falar em manuseio, na configuração do middleware Express que estamos usando

03:23.730 --> 03:25.983
aqui, também podemos configurar um middleware

03:25.983 --> 03:29.030
que irá lidar com os erros, de modo que quaisquer erros que possam

03:29.030 --> 03:31.660
ser jogados em qualquer lugar em nosso código, e fazemos

03:31.660 --> 03:33.610
isso com o app. e então montamos

03:33.610 --> 03:37.470
aqui uma função tão típica de middleware onde recebemos o pedido,

03:37.470 --> 03:40.640
a resposta e uma próxima função, e novamente, tudo isso

03:40.640 --> 03:45.430
exige que você conheça algum Express. js e conhecer

03:45.430 --> 03:48.330
o Nodo. js, não vou mergulhar exatamente

03:48.330 --> 03:51.160
em como funciona o middleware no Express e o que

03:51.160 --> 03:52.970
é middleware.

03:52.970 --> 03:54.960
Portanto, essa é uma função normal de middleware aqui, como

03:54.960 --> 03:57.150
você deve saber pela Express. js, e você provavelmente

03:57.150 --> 03:59.050
também sabe que existe uma alternativa

03:59.050 --> 04:02.310
a essa função, uma função que toma quatro parâmetros

04:02.310 --> 04:04.680
onde o primeiro parâmetro é um erro potencial,

04:04.680 --> 04:07.350
e agora esta é uma função de middleware de

04:07.350 --> 04:10.720
manipulação de erros, que será disparada automaticamente

04:10.720 --> 04:15.290
pela Express se em qualquer outro middleware anterior a este você tiver

04:15.290 --> 04:18.750
um erro.

04:18.750 --> 04:21.200
Portanto, esta é a minha função de middleware de tratamento

04:21.200 --> 04:23.380
de erros, e veja, temos aqui um monte de erros.

04:23.380 --> 04:26.260
Um monte de erros porque todos esses tipos são quaisquer

04:26.260 --> 04:29.030
e também não estamos usando todos esses valores,

04:29.030 --> 04:33.080
mas deixe-me esclarecer que tipo de tipos temos aqui.

04:33.080 --> 04:35.510
Isto será do tipo Erro, isto

04:35.510 --> 04:39.890
será do tipo expresso. Request, ou você simplesmente importa

04:39.890 --> 04:43.020
Request aqui como uma importação extra chamada de Express,

04:43.020 --> 04:45.540
isto também funciona se você tiver os tipos

04:45.540 --> 04:46.670
Express instalados

04:46.670 --> 04:49.310
que nós fazemos, então aqui também temos a Response,

04:49.310 --> 04:54.310
e uma NextFunction aqui, e então podemos ajustar nossos tipos aqui, isto é agora do

04:54.490 --> 04:56.310
tipo Request, isto é do tipo Response,

04:56.310 --> 05:03.650
e isto é esta NextFunction que podemos executar para deixar a solicitação continuar sua jornada para o próximo middleware

05:03.650 --> 05:06.680
em linha.

05:06.680 --> 05:08.590
Agora que é nosso middleware de tratamento

05:08.590 --> 05:10.820
de erros, ele disparará sempre que tivermos

05:10.820 --> 05:13.030
um erro em um de nossos outros middlewares,

05:13.030 --> 05:15.000
e aqui, poderíamos enviar de volta uma

05:15.000 --> 05:17.690
resposta com dados, digamos JSON, onde temos uma

05:17.690 --> 05:22.690
mensagem que é erro. mensagem, e onde talvez também nos coloquemos,

05:22.855 --> 05:24.630
erramos. mensagem, quero

05:24.630 --> 05:28.510
dizer, e onde talvez também definamos um código de status de 500, e é claro,

05:28.510 --> 05:29.610
você pode ter uma funcionalidade

05:29.610 --> 05:32.460
de tratamento de erros mais elaborada do que a que eu tenho

05:32.460 --> 05:35.020
aqui, mas com isso, adicionamos nossas rotas, adicionamos

05:35.020 --> 05:40.670
nosso middleware de tratamento de erros, por que não adicionamos alguma lógica a esta API agora na próxima

05:40.670 --> 05:43.103
palestra.
