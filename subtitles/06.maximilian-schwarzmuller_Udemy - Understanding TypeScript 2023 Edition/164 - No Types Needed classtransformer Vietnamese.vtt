WEBVTT

00:02.270 --> 00:04.040
Người hướng dẫn: Vì vậy, chúng tôi đã xem

00:04.040 --> 00:05.900
qua Lodash, một thư viện bên thứ ba được xây

00:05.900 --> 00:08.270
dựng bằng JavaScript dành cho JavaScript.

00:08.270 --> 00:11.730
Bạn cũng tìm thấy một số thư viện của bên thứ ba thực sự nắm

00:11.730 --> 00:13.287
bắt các tính năng của tập lệnh

00:13.287 --> 00:16.480
và kiểu tập lệnh, đồng thời cung cấp cho bạn một cách

00:16.480 --> 00:18.360
viết mã hoàn toàn mới hiệu quả vì

00:18.360 --> 00:21.230
bạn đang làm việc với tập lệnh kiểu.

00:21.230 --> 00:24.950
Một ví dụ là trình biến đổi lớp, một ví dụ tốt hơn nữa là trình

00:24.950 --> 00:28.067
xác thực lớp; chúng ta sẽ xem xét cả hai ở đây.

00:28.067 --> 00:31.360
Nhưng hãy bắt đầu với biến áp lớp.

00:31.360 --> 00:35.870
Giả sử trong dự án của chúng ta ở đây, tôi thực sự có một mô hình, một mô hình dữ liệu,

00:35.870 --> 00:38.150
hãy đặt tên cho nó là 'sản phẩm'.

00:38.150 --> 00:41.170
Bây giờ tôi sẽ đặt tên cho nó là sản phẩm. người mẫu. ts nhưng bạn có thể

00:41.170 --> 00:43.820
đặt tên cho tệp này bất cứ điều gì bạn muốn.

00:43.820 --> 00:48.820
Ý tưởng của tôi là trong tệp này, tôi định nghĩa một lớp cho sản phẩm.

00:49.420 --> 00:52.180
Vì vậy, tôi mô tả một sản phẩm sẽ trông như thế nào.

00:52.180 --> 00:55.550
Ví dụ: nó có tiêu đề là một chuỗi và giá

00:55.550 --> 00:59.070
là một số, sau đó tôi thêm một hàm tạo trong

00:59.070 --> 01:02.120
đó cả hai có thể được khởi tạo.

01:02.120 --> 01:07.120
Vì vậy, chuỗi, thêm giá và sau đó tôi nói tiêu đề này bằng 't'

01:07.210 --> 01:09.360
và giá này giá bằng 'p'.

01:09.360 --> 01:10.810
Và tất nhiên, chúng ta có thể

01:10.810 --> 01:12.980
đã sử dụng cách khởi tạo tắt khi chúng ta

01:12.980 --> 01:14.423
chỉ sử dụng hàm tạo.

01:16.150 --> 01:20.400
Sau đó, giả sử chúng ta luôn có một phương thức,

01:20.400 --> 01:25.400
lấy thông tin trong đó tôi trả về một mảng, giả sử phần tử

01:25.950 --> 01:30.850
đầu tiên là tiêu đề ở đâu và phần tử thứ hai thực sự là một

01:30.850 --> 01:35.770
chuỗi trong đó tôi có ký hiệu đô la và sau đó được thêm vào

01:35.770 --> 01:37.833
chuỗi này, giá này.

01:39.030 --> 01:43.030
Vì vậy, mô hình rất đơn giản ở đây, một lớp rất đơn giản.

01:43.030 --> 01:45.940
Và bây giờ tất nhiên chúng ta có thể sử dụng lớp này,

01:45.940 --> 01:49.590
nếu bạn muốn, trong app. ts nên tôi sẽ loại bỏ Lodash và thay

01:49.590 --> 01:54.590
vào đó nhập sản phẩm từ . /sản phẩm. model Bây giờ, bạn cần đảm

01:56.200 --> 01:58.920
bảo rằng trong mô hình sản phẩm, bạn thực

01:58.920 --> 02:01.010
sự xuất lớp này nếu không bạn không

02:01.010 --> 02:03.860
thể nhập nó và ở đây chúng tôi phải xuất sản

02:03.860 --> 02:05.800
phẩm như thế này vì tôi đang sử

02:05.800 --> 02:07.890
dụng xuất có tên ở đây bằng cách

02:07.890 --> 02:11.950
thêm từ khóa export ngay trong trước lớp.

02:11.950 --> 02:16.497
Vì vậy, tất nhiên bây giờ ở đây chúng ta có thể tạo ra một sản phẩm

02:18.150 --> 02:23.150
mới, một cuốn sách có giá 12 đô la. 99 và sau đó tôi console log p1 lấy

02:24.080 --> 02:28.190
thông tin và chúng ta thực sự nên log mảng này.

02:28.190 --> 02:31.390
Vì vậy, nếu bây giờ chúng ta chạy npm start here, nhà phát

02:31.390 --> 02:34.250
triển gói web của chúng ta sẽ khởi động và chúng ta

02:34.250 --> 02:37.340
sẽ thấy mảng đẹp này có thông tin về cuốn sách này.

02:37.340 --> 02:39.463
Vì vậy, nếu tôi tải lại ở đây, nó đây.

02:40.630 --> 02:43.170
Tất nhiên, điều đó không quá lạ mắt, nó hoạt động,

02:43.170 --> 02:44.930
nhưng điều đó không có gì mới.

02:44.930 --> 02:47.270
Hiện tại, một tình huống phổ biến trong

02:47.270 --> 02:49.610
các ứng dụng lớn hơn là bạn có thể đang tải

02:49.610 --> 02:52.150
xuống một số dữ liệu, giả sử từ máy chủ, bạn

02:52.150 --> 02:54.490
đang tìm nạp dữ liệu từ máy chủ phụ trợ và

02:54.490 --> 02:58.370
máy chủ đó sau đó trả lại cho bạn một số dữ liệu json mà bạn chuyển,

02:58.370 --> 03:01.560
sau đó có thể là một danh sách của sản phẩm.

03:01.560 --> 03:05.520
Vì vậy, ở đây chúng tôi có thể có các sản phẩm mà chúng tôi nhận được từ máy

03:05.520 --> 03:10.520
chủ nơi chúng tôi có tiêu đề, thảm và giá, 29. 99 và sau đó chúng tôi

03:13.047 --> 03:18.047
cũng có cuốn sách này, vì vậy tiêu đề, cuốn

03:18.120 --> 03:22.830
sách và giá là 10. 99, hãy nói.

03:22.830 --> 03:25.310
Vì vậy, đó là một mảng dữ liệu rất đơn giản mà

03:25.310 --> 03:27.730
sau đó chúng tôi nhận được từ phía sau.

03:27.730 --> 03:30.590
Tất nhiên, đây là các đối tượng JavaScript nhưng chúng

03:30.590 --> 03:33.730
không phải là phiên bản của mô hình sản phẩm của chúng tôi.

03:33.730 --> 03:37.220
Và đó là một tình huống điển hình trong đó bạn nhận được dữ liệu dưới

03:37.220 --> 03:40.990
dạng json, nó không có dữ liệu đính kèm giống như chức năng xây dựng mà bạn

03:40.990 --> 03:42.850
đã mã hóa phía trước thuộc về.

03:42.850 --> 03:46.770
Máy chủ của bạn biết điều đó và json cũng là một định dạng chỉ

03:46.770 --> 03:51.230
truyền dữ liệu cơ bản, bạn không có dữ liệu meta phong phú cho các

03:51.230 --> 03:53.540
đối tượng được đính kèm ở đó.

03:53.540 --> 03:56.300
Hoặc ít nhất bạn sẽ phải làm điều này bằng tay.

03:56.300 --> 04:00.120
Vì vậy, nói cách khác, các sản phẩm chúng tôi nhận được ở đây là

04:00.120 --> 04:03.310
các đối tượng không có phương thức lấy thông tin.

04:03.310 --> 04:08.230
Theo truyền thống, nếu bây giờ bạn muốn chuyển đổi điều này thành các phiên bản

04:08.230 --> 04:12.680
của mô hình của mình, bạn sẽ phải thực hiện việc đó theo cách thủ công.

04:12.680 --> 04:17.680
Bạn có thể có các sản phẩm đã tải của mình, sau đó, giả sử sử dụng các sản phẩm,

04:19.260 --> 04:22.770
gọi phương thức bản đồ và trên mọi sản phẩm trong mảng

04:22.770 --> 04:25.680
đó, sau đó chúng tôi trả lại sản phẩm mới cho

04:25.680 --> 04:30.680
sản phẩm. tiêu đề và sản phẩm. price và sau đó, chúng

04:34.330 --> 04:36.660
ta sẽ có một mảng chứa đầy các phiên

04:36.660 --> 04:40.230
bản hàm tạo sản phẩm thực và sau đó chúng ta thực

04:40.230 --> 04:43.163
sự có thể lặp qua đó, tải các sản phẩm và

04:44.330 --> 04:47.900
sau đó vào đó, chẳng hạn như nhật ký bảng điều khiển

04:47.900 --> 04:51.083
prod. lấy thông tin.

04:52.150 --> 04:56.010
Đây là cách chúng ta có thể chuyển đổi một mảng hoặc một đối tượng

04:56.010 --> 05:00.070
JavaScript Vanilla không tên theo cách thủ công thành một thể

05:00.070 --> 05:02.880
hiện của một hàm tạo cụ thể và do đó, chúng ta

05:02.880 --> 05:05.000
sẽ nhận được kết quả này.

05:05.000 --> 05:07.220
Bây giờ làm điều này một cách thủ công là cồng kềnh.

05:07.220 --> 05:09.590
Đó là một loạt các bước bổ sung ở đây,

05:09.590 --> 05:12.710
tất nhiên đây chỉ là một chuyển đổi đơn giản.

05:12.710 --> 05:16.690
Đó là nơi gói biến áp lớp có thể giúp chúng ta.

05:16.690 --> 05:19.330
Nó làm cho điều đó rất, rất đơn giản.

05:19.330 --> 05:22.390
Ở đó, chúng tôi cũng xác định một lớp trong tập lệnh kiểu

05:22.390 --> 05:25.010
trong trường hợp của chúng tôi ở đây, sau đó chúng

05:25.010 --> 05:29.340
tôi có thể lấy một số dữ liệu, giả sử từ một máy chủ và sau đó chúng tôi thực sự

05:29.340 --> 05:32.430
có thể gọi một phương thức tiện lợi đơn giản và nó sẽ tự

05:32.430 --> 05:36.893
động chuyển đổi dữ liệu của chúng tôi thành các mô hình phù hợp.

05:38.100 --> 05:40.030
Bây giờ, trước hết, hãy chạy

05:40.030 --> 05:44.840
một trình biến áp lớp cài đặt nmp--lưu, như thế này và sau khi điều

05:45.730 --> 05:47.820
này kết thúc, hãy chạy npm install

05:47.820 --> 05:50.350
phản ánh siêu dữ liệu--lưu gói A, gói

05:51.451 --> 05:54.470
này cuối cùng phụ thuộc vào.

05:54.470 --> 05:57.460
Vì vậy, ở đây chúng ta hãy nhập cái này và sau đó vì

05:57.460 --> 06:02.460
nó cũng hướng dẫn chúng ta ở đây trong hướng dẫn thiết lập ở đây, hãy nhập siêu dữ

06:02.890 --> 06:07.680
liệu phản ánh trong tệp mục nhập tuyến đường của bạn, trong trường hợp của

06:07.680 --> 06:11.410
tôi ở đây trong ứng dụng. ts Tôi nhập thư viện bên thứ ba này mà

06:11.410 --> 06:14.970
chúng tôi vừa cài đặt làm phần phụ thuộc vào thư viện của chúng tôi.

06:14.970 --> 06:17.210
Bây giờ điều đó thực sự không có bước js và do đó chúng

06:17.210 --> 06:18.610
ta có thể bỏ qua bước này.

06:18.610 --> 06:20.180
Trong trình duyệt, chúng

06:20.180 --> 06:24.780
tôi vẫn phải cài đặt các gói tương tự và việc thêm phần nhập này vào đây

06:24.780 --> 06:26.880
là tốt vì chúng tôi đang sử dụng gói

06:26.880 --> 06:30.090
web và do đó, bây giờ chúng tôi thực sự ổn.

06:30.090 --> 06:35.090
Và bây giờ chúng ta có thể nhập nội dung nào đó từ trình biến đổi lớp và

06:36.290 --> 06:40.210
sau đó nội dung đó là phương thức 'đơn giản cho lớp'.

06:40.210 --> 06:42.630
Gói này cũng có một vài phương pháp khác.

06:42.630 --> 06:45.200
Bạn có thể tìm hiểu thêm về chúng ở đây trong các tài liệu chính thức.

06:45.200 --> 06:49.060
Nhưng 'đồng bằng với lớp' là phương pháp chính.

06:49.060 --> 06:54.060
Bạn có thể sử dụng nó ở đây để đặt các sản phẩm đã tải của mình chẳng hạn.

06:55.150 --> 06:58.230
Thay vì thực hiện việc này theo cách thủ công ở đây như chúng ta đã

06:58.230 --> 07:01.480
làm trước đây, chúng ta có thể đặt các sản phẩm đã tải bằng đơn giản cho

07:01.480 --> 07:03.760
lớp và bây giờ chuyển cho nó hai đối số ở đây.

07:03.760 --> 07:08.070
Đối số đầu tiên là lớp mà chúng ta muốn chuyển đổi nó thành.

07:08.070 --> 07:10.190
Trong trường hợp của tôi ở đây, product.

07:10.190 --> 07:12.700
Và tôi không khởi tạo nó hay

07:12.700 --> 07:15.560
gọi nó, tôi chỉ trỏ vào lớp đó.

07:15.560 --> 07:19.460
Đối số thứ hai là dữ liệu chúng tôi muốn chuyển đổi.

07:19.460 --> 07:23.520
Vì vậy, trong trường hợp của tôi ở đây, đó là sản phẩm.

07:23.520 --> 07:25.840
Và bây giờ những gì gói này sẽ làm

07:25.840 --> 07:28.100
là nó sẽ đi qua mảng này để biến đổi

07:28.100 --> 07:31.034
mọi đối tượng JavaScript Vanilla đơn giản

07:31.034 --> 07:34.090
ở đây thành một thể hiện của lớp này.

07:34.090 --> 07:37.830
Vì vậy, nếu bây giờ chúng tôi lưu cái này và chạy lại npm start,

07:37.830 --> 07:40.330
thì trang web khởi động máy chủ sẽ khởi động

07:40.330 --> 07:43.270
lại và nó sẽ xây dựng dự án này mà không có lỗi.

07:43.270 --> 07:46.540
Nếu tôi tải lại trang, tôi nhận được kết quả giống như

07:46.540 --> 07:49.530
trước nhưng tất nhiên với ít mã hơn từ phía chúng

07:49.530 --> 07:51.870
tôi vì chúng tôi đang sử dụng gói này.

07:51.870 --> 07:53.403
Và điều tuyệt vời về gói

07:53.403 --> 07:57.070
này là nó hoạt động tốt ở đây vì nó được xây dựng dựa trên

07:57.070 --> 08:01.230
tập lệnh kiểu và sử dụng tập lệnh kiểu và tận dụng thực tế là chúng

08:01.230 --> 08:04.280
ta có một lớp ở đó mà chúng ta có thể chỉ ra.

08:04.280 --> 08:08.730
Nhưng cũng thành thật mà nói, gói này hoạt động đặc biệt tốt với tập lệnh kiểu

08:08.730 --> 08:10.900
nhưng nó không sử dụng một tính năng dành

08:10.900 --> 08:12.600
riêng cho tập lệnh kiểu.

08:12.600 --> 08:16.630
Các lớp chẳng hạn cũng tồn tại trong Vanilla JavaScript.

08:16.630 --> 08:20.170
Vì vậy, trong khi điều này được phát triển chủ yếu cho type script,

08:20.170 --> 08:23.610
nó thực sự cũng hoạt động trong Vanilla JavaScript.

08:23.610 --> 08:26.633
Tuy nhiên, điều đó sẽ không đúng với gói tiếp theo.
