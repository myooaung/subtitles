WEBVTT

00:02.150 --> 00:03.290
Instructor: También se

00:03.290 --> 00:05.890
puede implementar la herencia en las interfaces.

00:05.890 --> 00:10.890
Digamos que tenemos otra interfaz, Named, y esta es la interfaz

00:11.100 --> 00:13.600
que realmente se asegura de que

00:13.600 --> 00:16.420
tenemos una propiedad de nombre.

00:16.420 --> 00:18.510
Así que ahora, aquí en Persona, podríamos

00:18.510 --> 00:20.950
implementar Greetable y Named para estar obligados

00:20.950 --> 00:24.110
a tener tanto un método greet como un nombre.

00:24.110 --> 00:25.820
Eso es algo que podríamos hacer.

00:25.820 --> 00:30.200
O, si sabemos que Greetable piensa que los objetos greetable siempre necesitan

00:30.200 --> 00:31.810
tener un nombre, podríamos

00:31.810 --> 00:34.500
asegurarnos de que esta interfaz Greetable realmente

00:34.500 --> 00:36.970
extienda la interfaz Named, para que juntos,

00:36.970 --> 00:40.120
formen una nueva interfaz, que obligue a cada objeto

00:40.120 --> 00:43.460
basado en Greetable a tener un método greet, pero también

00:43.460 --> 00:46.150
a tener un nombre.

00:46.150 --> 00:48.840
Y para ello, podemos añadir extends

00:48.840 --> 00:52.700
aquí, en la interfaz también, y extendemos Named.

00:52.700 --> 00:55.760
Ahora bien, como he dicho, esto forma una nueva interfaz,

00:55.760 --> 00:58.330
que es al fin y al cabo, una interfaz que nos obliga

00:58.330 --> 01:00.760
a tener un método greet, pero no sólo eso, también

01:00.760 --> 01:03.140
nos obliga a tener todo lo que la interfaz Named

01:03.140 --> 01:04.910
define.

01:04.910 --> 01:07.150
En este caso, una propiedad de nombre.

01:07.150 --> 01:09.450
Así que si eliminara el nombre aquí, ya obtendría

01:09.450 --> 01:12.120
un error, porque esta clase ahora implementa

01:12.120 --> 01:14.860
incorrectamente la interfaz Greetable, porque

01:14.860 --> 01:17.600
falta el nombre de la propiedad.

01:17.600 --> 01:20.900
Así es también como podemos combinar interfaces.

01:20.900 --> 01:23.410
¿Por qué dividir una interfaz como ésta?

01:23.410 --> 01:25.600
Bueno, tal vez usted tiene una aplicación

01:25.600 --> 01:27.810
en la que en algunos objetos, sólo quiere obligarlos

01:27.810 --> 01:31.120
a tener un nombre, y no un método de saludo, mientras que en otros

01:31.120 --> 01:34.630
objetos, necesita tanto el saludo como el nombre.

01:34.630 --> 01:36.830
Con esta división, esto es posible.

01:36.830 --> 01:40.630
Algunos objetos, o algunas clases pueden implementar sólo Named,

01:40.630 --> 01:42.590
y otros pueden implementar Greetable

01:42.590 --> 01:45.990
y están obligados a tener tanto greet como un nombre.

01:45.990 --> 01:48.490
Así que la ampliación de las interfaces es posible.

01:48.490 --> 01:50.880
Y ahí también puedes ampliar más de uno.

01:50.880 --> 01:53.380
Así que puede fusionar varias interfaces

01:53.380 --> 01:55.060
en una sola.

01:55.060 --> 01:58.570
Podríamos fusionar otra interfaz si la tuviéramos.

01:58.570 --> 02:00.860
Simplemente separados con una coma.

02:00.860 --> 02:03.570
Recuerda que durante unas clases, esto no era posible.

02:03.570 --> 02:05.710
Cuando se utilizan clases en la herencia,

02:05.710 --> 02:07.920
sólo se puede heredar de una clase.

02:07.920 --> 02:10.600
No se puede heredar de varias clases.

02:10.600 --> 02:12.490
Para las interfaces es diferente.

02:12.490 --> 02:14.760
En el caso de las interfaces, sí se puede

02:14.760 --> 02:16.920
heredar de múltiples interfaces, porque

02:16.920 --> 02:18.920
al final todas se fusionan, y en esta

02:18.920 --> 02:21.430
función pura de TypeScript, que en realidad

02:21.430 --> 02:23.010
no se traduce a JavaScript

02:23.010 --> 02:24.800
como verás, podemos por tanto

02:24.800 --> 02:27.080
romper las reglas establecidas para las

02:27.080 --> 02:29.250
clases de JavaScript, y extender múltiples

02:29.250 --> 02:31.733
interfaces.
