WEBVTT

00:02.140 --> 00:08.100
- ：因此您可以使用类型作为函数参数和函数的返回值｡

00:08.100 --> 00:10.420
现在, 为了更进一步,

00:10.420 --> 00:14.820
如果它们本身也是一个函数类型呢？

00:14.820 --> 00:17.170
现在让我把我的意思说清楚｡ 

00:17.170 --> 00:19.333
假设我们有一个变量“combinevalues”,

00:21.360 --> 00:24.200
默认情况下, 该变量的类型为“any”｡ 正如您所了解到的, “any”并不是那么有用｡ 

00:24.200 --> 00:29.617
我最终要做的是, 我想把'combinevalues'设为'add'｡

00:29.617 --> 00:29.617
所以我想把'add'函数,

00:29.617 --> 00:32.600
一个指向'add'函数的指针, 存储在'combinevalues'中,

00:32.600 --> 00:41.580
这样最后, 我们就可以控制日志, 合并值, 并把'combinevalues'作为一个函数来执行, 它的值是8和8｡

00:41.580 --> 00:44.520
如果我保存它, 编译后执行它,

00:44.520 --> 00:47.480
我编译了这个文件, 然后让它重新加载,

00:47.480 --> 00:52.130
这里得到16.

00:52.130 --> 00:55.840
这是正常的JavaScript代码, 我们希望它能正常工作｡

00:55.840 --> 00:58.820
我们可以在一个函数中存储一个指针, 在一个数字变量中,

00:58.820 --> 01:03.350
然后offer把这个变量作为一个函数来执行,

01:03.350 --> 01:07.300
因为, 它指向了这个函数, 对吧？

01:07.300 --> 01:08.580
所以我们可以通过这个变量来执行这个函数｡ 

01:08.580 --> 01:09.910
从TypeScript的角度来看,

01:09.910 --> 01:15.900
我们在这里遇到的问题是'combinevalues'是any｡

01:15.900 --> 01:19.640
所以如果我在这里设置'combinevalues'为一个数字,

01:19.640 --> 01:20.670
当然, 我们不能编译它,

01:20.670 --> 01:24.520
不幸的是, 因为TypeScript没有机会检测到这是不需要的,

01:24.520 --> 01:27.910
或者这可能会导致问题｡

01:27.910 --> 01:30.543
但在运行时, 它会得到一个错误, 因为很明显,

01:30.543 --> 01:34.230
我们试图将'combinevalues'作为函数执行,

01:34.230 --> 01:36.220
而它实际上是一个数字｡

01:36.220 --> 01:42.080
现在我们想避免这种情况, 为此我们需要明确'combinevalues'将保存一个函数｡

01:42.080 --> 01:44.870
现在, 朝着这个方向迈出的第一步,

01:44.870 --> 01:48.650
是我们在这里设置类型, 使其具有功能｡

01:48.650 --> 01:50.550
Function是由TypeScript最终提供的类型,

01:50.550 --> 01:57.940
这清楚地表明我们在这里存储的任何东西都必须是函数｡

01:57.940 --> 02:00.870
因此, 我在这里得到了一个错误, 因为5是一个数字,

02:00.870 --> 02:02.230
而不是一个函数｡

02:02.230 --> 02:06.660
如果我注释掉它, 我们就可以编译它, 否则我们会在编译过程中得到一个错误,

02:06.660 --> 02:09.670
现在它又按预期运行了｡

02:09.670 --> 02:12.860
这很好, 但不是完美的, 因为我们现在说这应该是一个函数,

02:12.860 --> 02:17.940
但它也可以设置'combinevalues'等于'printResult',

02:17.940 --> 02:21.460
比如这里｡

02:21.460 --> 02:25.290
当然, TypeScript不会抱怨, 因为'printResult'是一个函数,

02:25.290 --> 02:29.600
但当然它不是一个接受两个参数的函数｡

02:29.600 --> 02:32.620
所以如果我再编译一次, TypeScript不会抱怨｡ 

02:32.620 --> 02:34.800
但是如果我们重新加载, 我们会在这里看到undefined和结果8｡ 

02:34.800 --> 02:42.470
所以我没有得到想要的结果, 因为我在里面存储了错误的函数｡

02:42.470 --> 02:47.350
同样, 如果TypeScript能告诉我们这一点就好了｡

02:47.350 --> 02:51.340
TypeScript不能通知我们这一点, 因为我们对TypeScript说的只是我们想在那里存储一个函数,

02:51.340 --> 02:54.410
而事实显然就是这样｡

02:54.410 --> 03:03.810
所以如果我们能更精确地定义函数应该是什么样子的, 那就更好了, 我们想把它存储在'combinevalues'中｡

03:03.810 --> 03:03.810
这就是函数类型发挥作用的地方｡ 

03:03.810 --> 03:11.900
函数类型是描述函数的参数和返回值的类型｡

03:11.900 --> 03:15.690
函数类型是使用JavaScript中的箭头函数符号创建的,

03:15.690 --> 03:19.870
或者至少与该符号相近｡

03:19.870 --> 03:25.530
这里不用加花括号, 因为我们不是在这里创建箭头函数,

03:25.530 --> 03:28.890
而是创建函数类型｡

03:28.890 --> 03:31.610
现在在这个箭头的右边, 你指定了函数的返回类型,

03:31.610 --> 03:35.450
你最终想把它存储在这里｡

03:35.450 --> 03:37.180
那应该是数字｡ 

03:37.180 --> 03:40.840
现在我们说, 'combinevalues'接受任何不带参数的函数,

03:40.840 --> 03:44.120
然后返回一个数字｡

03:44.120 --> 03:47.200
当然, 这并不完全是我们想要的｡ 

03:47.200 --> 03:54.180
我们要确保'combinevalues'接受一个函数, 或者能够存储接受2个数字并返回一个数字的函数｡

03:54.180 --> 04:01.400
为此, 我们可以在此向此函数类型添加参数｡

04:01.400 --> 04:02.400
我们不需要匹配上面的参数名称,

04:02.400 --> 04:05.040
只需匹配类型即可｡

04:05.040 --> 04:06.020
所以我们可以有a,

04:06.020 --> 04:09.060
它应该是数字类型, b, 它应该是数字类型｡

04:09.060 --> 04:10.510
现在我们要对TypeScript说的是,

04:10.510 --> 04:15.660
“combinevalues”应该接受任何接受两个参数的函数,

04:15.660 --> 04:22.930
其中每个参数都是一个数字, 并且整个函数返回一个数字｡

04:22.930 --> 04:24.350
这就是为什么TypeScript不会抱怨我们在组合值中存储'add',

04:24.350 --> 04:29.690
因为'add'是一个完全满足此类型定义的函数｡

04:29.690 --> 04:33.380
但它确实抱怨了'printResult',

04:33.380 --> 04:36.890
因为'printResult', 正如它告诉我们的,

04:36.890 --> 04:40.632
是一个类型为一个参数的函数, 参数是一个数字,

04:40.632 --> 04:44.360
没有返回任何东西, 而我们实际上期望得到一个有两个参数的函数,

04:44.360 --> 04:52.310
每个参数都是一个数字, 我们也返回一个数字｡

04:52.310 --> 04:55.810
这里有一个不匹配的地方, 如果我试图编译它,

04:55.810 --> 05:00.480
我们会在这里得到一个错误, 当然, 在编译器中,

05:00.480 --> 05:06.270
我们只能通过删除这行代码来修复这个错误｡

05:06.270 --> 05:07.110
现在 ,  我们 能够 重新 编译 它 而 不会 出错 ｡ 

05:07.110 --> 05:10.930
而现在这个运行如预期｡ 

05:10.930 --> 05:17.413
函数类型, 允许我们具体描述我们要在什么地方使用哪种类型的函数｡

05:18.290 --> 05:20.887
它是参数中一个期望值, 用于创建一个带有一些回调函数,

05:20.887 --> 05:25.420
或者像这里一样, 是一个变量｡
