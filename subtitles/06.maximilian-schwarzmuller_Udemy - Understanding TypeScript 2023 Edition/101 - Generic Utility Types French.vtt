WEBVTT

00:02.330 --> 00:04.870
Narrateur : En parlant de types plus génériques,

00:04.870 --> 00:06.970
comme un petit bonus, vous pourriez dire,

00:06.970 --> 00:11.410
je veux pointer votre direction vers un couple de types intégrés.

00:11.410 --> 00:15.740
Typescript est livré avec, qui utilisent des types génériques ou qui sont des

00:15.740 --> 00:17.240
types génériques, qui nous

00:17.240 --> 00:20.350
donnent certaines fonctionnalités utilitaires.

00:20.350 --> 00:22.050
Il s'agit donc d'un petit bonus,

00:22.050 --> 00:22.920
et de temps en temps,

00:22.920 --> 00:25.550
ces types spéciaux peuvent s'avérer utiles.

00:25.550 --> 00:26.840
Vous trouverez ci-joint un

00:26.840 --> 00:30.680
lien vers la documentation complète de tous les types d'utilitaires intégrés.

00:30.680 --> 00:33.810
Ici, je veux juste te donner quelques exemples.

00:33.810 --> 00:36.010
De même que tous ces types de choses, ces

00:36.010 --> 00:38.610
types n'existent que dans les types du monde

00:38.610 --> 00:41.300
et donc, seulement avant la compilation.

00:41.300 --> 00:43.460
Mais lors de cette étape de compilation, ils

00:43.460 --> 00:48.130
peuvent vous donner une sécurité de type supplémentaire ou une flexibilité supplémentaire.

00:48.130 --> 00:51.670
Par exemple, il existe le type partiel intégré.

00:51.670 --> 00:55.580
Disons que nous avons un nouveau type, et vous interface que nous allons trouver

00:55.580 --> 00:58.480
ou un type personnalisé n'a pas vraiment d'importance,

00:58.480 --> 00:59.493
CourseGoal.

01:00.660 --> 01:03.780
Le CourseGoal possède un titre, qui doit être une chaîne

01:03.780 --> 01:06.930
de caractères, et disons une description, qui doivent toutes

01:06.930 --> 01:09.040
être des chaînes de caractères.

01:09.040 --> 01:14.040
Peut-être avons-nous aussi la propriété completeUntil, qui est une date.

01:15.290 --> 01:17.961
Maintenant nous voulons avoir une fonction,

01:17.961 --> 01:21.500
disons, createCourseGoal, qui nous crée un tel objet.

01:21.500 --> 01:23.380
Bien sûr, nous aurions pu créer cette classe également.

01:23.380 --> 01:26.290
Mais nous avons une telle fonction parce que dans cette

01:26.290 --> 01:28.740
fonction, nous pourrions extraire des données

01:28.740 --> 01:30.590
d'une base de données, ou autre.

01:30.590 --> 01:32.110
Nous avons donc cette fonction.

01:32.110 --> 01:33.330
Et à la fin ici,

01:33.330 --> 01:37.890
je veux obtenir mon titre, qui est une chaîne, je pourrais

01:37.890 --> 01:42.320
obtenir ma description, qui est une chaîne, et j'espère

01:42.320 --> 01:47.150
obtenir ma date, qui est une date.

01:47.150 --> 01:49.680
Maintenant, dans cette fonction, bien sûr, nous pourrions retourner un objet,

01:49.680 --> 01:51.740
mais nous venons de mettre en place toutes ces choses.

01:51.740 --> 01:55.340
Ainsi, nous mettons le titre en titre, la description en description

01:55.340 --> 01:57.840
et completeUntil en date.

01:57.840 --> 02:00.760
Nous pourrions faire tout cela et si nous définissons

02:00.760 --> 02:03.890
ensuite que cette fonction renvoie toujours un CourseGoal,

02:03.890 --> 02:07.120
nous aurions une fonction correctement configurée.

02:07.120 --> 02:08.420
Maintenant, pour une raison quelconque,

02:08.420 --> 02:09.530
disons que nous ne le faisons pas

02:09.530 --> 02:11.623
comme ça, nous ne le faisons pas en une seule étape.

02:12.680 --> 02:13.870
Au lieu de cela, ce que

02:13.870 --> 02:17.340
je veux faire, c'est commencer par créer une variable ici, qui

02:17.340 --> 02:18.700
contient un objet vide.

02:18.700 --> 02:22.620
Et ensuite, étape par étape, je veux ajouter mon titre ici.

02:22.620 --> 02:26.420
Je veux ajouter ma description ici.

02:26.420 --> 02:31.303
Et je veux ajouter ma date ici.

02:33.640 --> 02:36.420
Maintenant, je reçois des erreurs parce que, bien sûr, je ne peux

02:36.420 --> 02:39.170
pas définir le titre this is not a property of this object.

02:39.170 --> 02:41.930
Et alors que cela fonctionne en JavaScript classique,

02:41.930 --> 02:45.410
TypeScript n'aime pas vraiment ce genre d'ajout à la volée.

02:45.410 --> 02:47.810
Donc nous pourrions dire que cela devrait être

02:47.810 --> 02:49.300
de type CourseGoal ici.

02:49.300 --> 02:51.040
Maintenant, TypeScript ne se plaint

02:51.040 --> 02:53.640
pas de cela, mais du fait qu'il s'agit d'un objet vide,

02:53.640 --> 02:56.223
qui ne correspond clairement pas à notre type ici.

02:57.070 --> 02:58.360
Donc à la fin, je veux le renvoyer

02:58.360 --> 03:01.000
et je veux ajouter toutes ces choses étape par étape,

03:01.000 --> 03:04.570
peut-être parce que nous avons une validation supplémentaire avant chaque

03:04.570 --> 03:07.590
étape, et donc une pour l'ajouter comme ceci.

03:07.590 --> 03:12.390
C'est ici que le type partiel peut s'avérer utile.

03:12.390 --> 03:17.390
Nous pourrions dire que le CourseGoal ici devrait être un type partiel, qui au final,

03:17.580 --> 03:18.413
grâce aux types

03:18.413 --> 03:21.600
génériques, contiendra un CourseGoal.

03:21.600 --> 03:24.200
Maintenant, ce que cela fait, c'est qu'il dit

03:24.200 --> 03:28.260
à TypeScript que, ceci est un objet qui, à la fin, sera un courseGoal.

03:28.260 --> 03:32.090
Mais au départ, le partiel enveloppe en quelque sorte notre propre

03:32.090 --> 03:36.620
type, et le transforme en un type où toutes ces propriétés sont facultatives.

03:36.620 --> 03:39.440
C'est ce que fait le partial, un de ces types intégrés, avec lequel

03:39.440 --> 03:40.670
Typescript est livré.

03:40.670 --> 03:44.270
Elle le transforme donc en un type, qui est aussi un type d'objet, où toutes les propriétés

03:44.270 --> 03:45.713
sont facultatives.

03:45.713 --> 03:49.290
Par conséquent, nous pouvons définir un objet vide au

03:49.290 --> 03:53.030
départ, et ajouter tous ces éléments étape par étape.

03:53.030 --> 03:54.880
Le seul problème, c'est qu'à la

03:54.880 --> 03:58.130
fin, nous ne pouvons pas renvoyer ce résultat, car il est

03:58.130 --> 04:02.130
toujours de type partial CourseGoal, et non de type CourseGoal.

04:02.130 --> 04:04.630
Nous pouvons résoudre ce problème en convertissant ce cours

04:04.630 --> 04:07.480
en CourseGoal par typage, car nous savons qu'à ce moment-là, nous aurons

04:07.480 --> 04:08.990
ajouté toutes les données.

04:08.990 --> 04:11.667
Il s'agira donc d'un véritable objectif de cours et non d'un objectif partiel.

04:11.667 --> 04:13.510
Et bien sûr, c'est un peu inventé.

04:13.510 --> 04:15.500
Mais vous pouvez avoir des scénarios

04:15.500 --> 04:18.220
comme celui-ci, où vous voulez changer temporairement

04:18.220 --> 04:19.650
un de vos types d'objets, une

04:19.650 --> 04:23.530
de vos interfaces pour qu'elle soit uniquement optionnelle.

04:23.530 --> 04:25.540
Pour s'assurer que toutes les propriétés qui s'y

04:25.540 --> 04:28.170
trouvent ne peuvent être optionnelles que temporairement.

04:28.170 --> 04:31.223
Et puis le type partiel vous permettrait de le faire.

04:32.370 --> 04:35.920
Et il n'y a jamais de type utilitaire intégré que vous

04:35.920 --> 04:40.170
avez, c'est le type en lecture seule qui peut être très utile.

04:40.170 --> 04:42.623
Disons que nous avons un tableau de noms.

04:43.460 --> 04:46.330
Et là-dedans, j'ai eu Max et Sports.

04:46.330 --> 04:47.420
Maintenant, TypeScript déduit

04:47.420 --> 04:49.860
correctement qu'il s'agit d'un tableau de chaînes.

04:49.860 --> 04:50.960
Que pouvons-nous faire maintenant ?

04:50.960 --> 04:52.690
Nous pouvons bien sûr pousser Manu

04:53.700 --> 04:55.400
là-dessus, et je devrais probablement

04:55.400 --> 04:58.340
changer cela pour qu'Anna ne fasse pas de sport pour avoir

04:58.340 --> 04:59.720
un nom là-dedans.

04:59.720 --> 05:00.553
Donc ça marche.

05:00.553 --> 05:01.386
Maintenant, disons

05:01.386 --> 05:04.230
que je veux m'assurer que c'est un tableau verrouillé.

05:04.230 --> 05:06.260
Nous ne pouvons pas en ajouter plus ici.

05:06.260 --> 05:07.870
Et on peut toujours en rajouter

05:07.870 --> 05:11.690
ici, mais au moins je veux que Typescript me crie dessus si j'essaie.

05:11.690 --> 05:13.730
Eh bien, c'est là que nous pouvons utiliser

05:13.730 --> 05:18.730
le type lecture seule, nous pourrions le définir comme étant un tableau de chaînes en lecture seule.

05:18.930 --> 05:20.510
Avec cela, nous disons à TypeScript, eh bien,

05:20.510 --> 05:23.030
ce que nous stockons ici est, c'est un tableau de chaînes.

05:23.030 --> 05:25.830
Mais c'est aussi un tableau de chaînes de caractères, qui est en lecture seule.

05:25.830 --> 05:28.210
Ainsi, lorsque nous essayons d'ajouter quelque

05:28.210 --> 05:31.600
chose avec push, ou si nous essayons de retirer quelque chose avec pop,

05:31.600 --> 05:32.760
nous obtenons des erreurs,

05:32.760 --> 05:34.810
car nous ne sommes pas autorisés à faire ces

05:34.810 --> 05:36.320
choses avec ce tableau.

05:36.320 --> 05:38.760
Et ceci n'est pas limité aux tableaux d'ailleurs,

05:38.760 --> 05:41.610
vous pouvez aussi utiliser la lecture seule sur un objet.

05:41.610 --> 05:43.990
Par exemple, pour commercialiser en lecture seule,

05:43.990 --> 05:46.860
de sorte que vous n'êtes pas autorisé à modifier les propriétés

05:46.860 --> 05:49.920
ou à ajouter de nouvelles propriétés à cet objet.

05:49.920 --> 05:52.240
Cela peut donc être très, très pratique

05:52.240 --> 05:56.510
et vous donner plus de flexibilité ou être plus précis sur ce que

05:56.510 --> 05:59.490
vous voulez faire dans votre code.

05:59.490 --> 06:01.380
Tout ceci n'est que des types utilitaires

06:01.380 --> 06:03.610
qui n'existent que dans le monde de TypeScript.

06:03.610 --> 06:05.881
Ils ne sont donc compilés à rien.

06:05.881 --> 06:09.400
Mais pendant la compilation, ils vous donnent une rigueur supplémentaire,

06:09.400 --> 06:12.410
ou des vérifications supplémentaires ou sautent certaines vérifications

06:12.410 --> 06:14.800
comme nous l'avons fait avec le partiel.

06:14.800 --> 06:17.170
Maintenant, vous avez plus que la lecture seule et partielle.

06:17.170 --> 06:19.730
Et comme je l'ai mentionné, vous trouverez ci-joint la documentation

06:19.730 --> 06:22.420
d'une liste complète de ces types d'utilitaires.

06:22.420 --> 06:25.580
Dans certains cas, ils peuvent s'avérer très utiles, et c'est pourquoi

06:25.580 --> 06:28.350
je ne voulais absolument pas vous les cacher.

06:28.350 --> 06:30.500
Mais au contraire, vous devez les connaître

06:30.500 --> 06:34.060
pour pouvoir les utiliser lorsque vous avez besoin de verrouiller quelque

06:34.060 --> 06:36.980
chose, ou comme dans le cas de l'ouverture partielle de quelque

06:36.980 --> 06:39.690
chose ou avec tous les autres que je n'ai pas abordés ici,

06:39.690 --> 06:42.570
si vous avez une autre opération qui peut être améliorée avec

06:42.570 --> 06:45.140
l'un de ces types d'utilitaires intégrés.

06:45.140 --> 06:47.670
Ces types utilitaires sont tous génériques,

06:47.670 --> 06:49.170
car ils prennent une autre

06:49.170 --> 06:52.580
valeur de n'importe quel type et en font quelque

06:52.580 --> 06:54.190
chose.

06:54.190 --> 06:57.970
Ils mettent tout en option, ils verrouillent tout, sans se soucier de

06:57.970 --> 07:01.330
savoir s'il s'agit d'un tableau ou d'un objet ou d'un tableau de

07:01.330 --> 07:04.430
chaînes de caractères, d'un tableau de chiffres, etc.

07:04.430 --> 07:06.000
C'est pourquoi ils sont génériques.

07:06.000 --> 07:09.520
Et avec les génériques intégrés supérieurs que nous avons vus précédemment

07:09.520 --> 07:10.790
et vos propres génériques.

07:10.790 --> 07:13.780
J'espère que cela vous aidera à comprendre pourquoi les génériques

07:13.780 --> 07:16.793
peuvent être utiles et pourquoi ils existent.
