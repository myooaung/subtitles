WEBVTT

00:02.260 --> 00:04.220
Nu we een goed begrip hebben van

00:04.220 --> 00:08.410
de basisfuncties van typescript en wat typescript toevoegt.

00:08.410 --> 00:10.070
En we begrijpen ook hoe de

00:10.070 --> 00:12.320
typescript compiler werkt.

00:12.320 --> 00:13.760
Laten we eens kijken wat typescript

00:13.760 --> 00:15.020
nog meer te bieden heeft,

00:15.020 --> 00:18.700
vooral als het gaat om moderne Javascript syntaxis.

00:18.700 --> 00:22.130
Nu, dit is een moeilijke, vrij vage term, maar wat ik er uiteindelijk

00:22.130 --> 00:23.360
mee bedoel, zijn Javascript

00:23.360 --> 00:28.410
functies die al een paar jaar bestaan en die goed ondersteund worden in moderne browsers,

00:28.410 --> 00:30.790
maar die niet noodzakelijkerwijs in alle,

00:30.790 --> 00:37.570
vooral in oudere browsers en daar, vooral in Internet Explorer, draaien.

00:37.570 --> 00:40.210
Ik heb het over dingen als Let, Cons, pijlfuncties,

00:40.210 --> 00:43.240
de-structurerende syntaxis, spread operator,

00:43.240 --> 00:45.350
enzovoort.

00:45.350 --> 00:48.220
Dus als dat iets is wat je absoluut weet, kun

00:48.220 --> 00:51.950
je deze module overslaan, omdat het ook de kennis over deze

00:51.950 --> 00:54.230
onderwerpen opfrist, maar ook uitlegt

00:54.230 --> 00:56.240
wat typescript doet met deze dingen,

00:56.240 --> 00:59.000
met deze syntaxis.

00:59.000 --> 01:01.450
Hoewel, het korte verhaal is, typoscript stelt

01:01.450 --> 01:02.980
het zo samen dat het werkt.

01:02.980 --> 01:04.510
Toch zullen we daar even naar kijken,

01:04.510 --> 01:05.940
maar je kunt deze module overslaan

01:05.940 --> 01:08.290
als dat alles is wat je al weet.

01:08.290 --> 01:10.130
Kijk maar eens in het curriculum

01:10.130 --> 01:12.400
of er in deze module nog een lezing is die

01:12.400 --> 01:14.260
voor jou interessant kan zijn,

01:14.260 --> 01:16.450
anders zie ik je na deze module.

01:16.450 --> 01:18.140
Als je niet zeker bent van deze mogelijkheden,

01:18.140 --> 01:20.500
als je Javascript kent, wat betreft Var en Zon,

01:20.500 --> 01:22.610
maar je weet niet wat het Let of Cons sleutelwoord

01:22.610 --> 01:24.810
echt betekent, dan moet je bij mij blijven

01:24.810 --> 01:27.820
en in deze module duiken.

01:27.820 --> 01:29.860
Daarvoor heb ik een gloednieuw project opgezet,

01:29.860 --> 01:31.450
je vindt het in de bijlage.

01:31.450 --> 01:35.613
En je moet altijd eerst NPM installeren in deze projecten.

01:35.613 --> 01:37.610
Vergeet dit niet om alle afhankelijkheden te

01:37.610 --> 01:39.530
installeren en daarna altijd NPM start om die

01:39.530 --> 01:41.390
ontwikkelingsserver op te starten.

01:41.390 --> 01:44.480
Dit is een project zoals we dat eerder hadden aan het

01:44.480 --> 01:46.280
eind van de vorige module.

01:46.280 --> 01:49.550
tsconfig bestand met een vrij strikte configuratie

01:50.470 --> 01:53.210
An app. ts bestand hier en deze map wordt

01:53.210 --> 01:54.740
automatisch gegenereerd.

01:54.740 --> 01:57.100
Overigens, hou deze ontwikkelingsserver natuurlijk

01:57.100 --> 01:58.360
draaiende zoals je eerder

01:58.360 --> 02:00.610
deed, en nu kunnen we onze code altijd compileren

02:00.610 --> 02:03.300
met het TSC commando hier.

02:03.300 --> 02:06.670
Of, en dat is wat ik hier zal doen, TSC streepje W om de wachtstand in

02:06.670 --> 02:09.160
te schakelen en ervoor te zorgen dat we hercompileren

02:09.160 --> 02:10.980
wanneer we iets veranderen.

02:10.980 --> 02:12.900
Dus dat is onze project setup en nu

02:12.900 --> 02:15.030
duiken we in enkele next-gen Javascript

02:15.030 --> 02:17.790
functies, welke typescript het ondersteunt en

02:17.790 --> 02:19.390
waar je op moet letten.
