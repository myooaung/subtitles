WEBVTT

00:02.190 --> 00:05.380
Instructor: Así que ahora vamos a llegar al final de

00:05.380 --> 00:09.590
este proyecto, y eso implica la posibilidad de arrastrar y soltar

00:09.590 --> 00:12.390
un proyecto que tenemos en una de las cajas, por

00:12.390 --> 00:15.170
ejemplo, en la caja de proyectos activos en

00:15.170 --> 00:16.410
la otra caja.

00:16.410 --> 00:19.310
Así que, básicamente, para cambiar el proyecto

00:19.310 --> 00:22.780
de ser un proyecto activo a ser un proyecto terminado.

00:22.780 --> 00:25.430
Por lo tanto, no se trata sólo de la actualización

00:25.430 --> 00:27.800
visual no se trata sólo de arrastrar y soltar

00:27.800 --> 00:31.050
y la actualización de la interfaz de usuario, también se trata

00:31.050 --> 00:35.470
de ajustar los datos detrás de las escenas en nuestra clase de gestión de estado el estado

00:35.470 --> 00:37.790
del proyecto en el que gestionamos una lista

00:37.790 --> 00:39.960
de proyectos en el final, tenga en cuenta

00:39.960 --> 00:42.990
que cada proyecto tiene una propiedad de estado y tendremos

00:42.990 --> 00:45.420
que actualizar eso también.

00:45.420 --> 00:48.610
Por lo tanto, dos cosas que tenemos que implementar: arrastrar

00:48.610 --> 00:51.800
y soltar y luego todo este estado detrás de las escenas y la actualización

00:51.800 --> 00:53.410
de datos.

00:53.410 --> 00:56.220
Ahora vamos a empezar con el arrastrar y soltar,

00:56.220 --> 00:59.870
y para ello vamos a implementar básicamente el arrastrar y soltar

00:59.870 --> 01:02.960
como lo haríamos en vanilla java script que, por ejemplo,

01:02.960 --> 01:04.790
puedes aprender en mi guía completa

01:04.790 --> 01:06.970
de java script.

01:06.970 --> 01:09.690
Básicamente, se trata de implementar un montón de escuchadores

01:09.690 --> 01:11.960
de eventos y, por supuesto, verás cómo funciona

01:11.960 --> 01:14.800
en este módulo en las próximas conferencias, pero lo implementaremos

01:14.800 --> 01:17.350
al estilo typescript, así que lo mejoraremos utilizando

01:17.350 --> 01:21.150
algunas características de typescript.

01:21.150 --> 01:24.240
Así pues, empecemos y ¿cómo quiero mejorarlo con las

01:24.240 --> 01:25.790
funciones de Typescript?

01:25.790 --> 01:28.423
Bueno, quiero reutilizar las interfaces aquí.

01:29.280 --> 01:32.120
Interfaces de arrastrar y soltar, pero no

01:32.120 --> 01:35.470
sólo para definir la estructura de algunos objetos

01:35.470 --> 01:39.060
como antes usábamos las interfaces, sino para establecer

01:39.060 --> 01:42.010
realmente un contrato que ciertas clases

01:42.010 --> 01:44.590
pueden firmar para obligar a estas clases

01:44.590 --> 01:46.970
a, básicamente, implementar ciertos

01:46.970 --> 01:51.980
métodos que nos ayuden a arrastrar y soltar.

01:51.980 --> 01:55.250
Para ser precisos, estoy pensando en dos interfaces, y por

01:55.250 --> 01:58.590
supuesto, el uso de estas interfaces será opcional, pero esto

01:58.590 --> 02:00.920
nos permitirá, bueno, básicamente proporcionar

02:00.920 --> 02:04.465
algún código que obligue a una clase a implementar todo lo que necesita

02:04.465 --> 02:06.340
para ser arrastrada o para ser un objetivo

02:06.340 --> 02:09.810
de caída válido, lo que si estuviéramos construyendo una aplicación

02:09.810 --> 02:15.160
más grande podría ayudarnos a escribir un código más limpio y más comprensible, especialmente

02:15.160 --> 02:19.080
cuando se trabaja en equipo.

02:19.080 --> 02:21.710
Entonces, ¿de qué interfaces estoy hablando?

02:21.710 --> 02:23.160
Quiero tener una interfaz,

02:23.160 --> 02:24.617
que llamaré draggable,

02:26.200 --> 02:28.660
y tendré una segunda interfaz que llamaré

02:28.660 --> 02:31.060
drag target.

02:31.060 --> 02:32.950
Mi idea aquí es que podemos añadir la

02:32.950 --> 02:35.710
interfaz draggable a cualquier clase que renderiza

02:35.710 --> 02:38.030
y elemento que puede ser draggable.

02:38.030 --> 02:41.810
En nuestro ejemplo, sería la clase de elemento del proyecto.

02:41.810 --> 02:44.170
La clase de elemento de proyecto es responsable

02:44.170 --> 02:46.600
de renderizar, bueno, estos elementos de proyecto

02:46.600 --> 02:49.230
y estos deberían ser las piezas arrastrables, y

02:49.230 --> 02:53.320
las cajas, proyectos activos y proyectos terminados, así que aquí nuestra

02:53.320 --> 02:57.880
clase de lista de proyectos debería ser objetivos de arrastre.

02:57.880 --> 03:02.100
Ahora bien, ¿qué es lo que obligan a implementar estas interfaces

03:02.100 --> 03:03.890
o a añadirlas a las clases?

03:03.890 --> 03:05.760
Empecemos con el arrastre.

03:05.760 --> 03:09.550
Aquí, básicamente necesitamos dos escuchadores de eventos y

03:09.550 --> 03:12.540
por lo tanto dos manejadores para estos eventos.

03:12.540 --> 03:17.070
Un manejador de inicio de arrastre, que será un método y un manejador de

03:17.070 --> 03:19.733
fin de arrastre, porque al implementar arrastrar

03:22.020 --> 03:24.180
y soltar la cosa que quieres arrastrar

03:24.180 --> 03:26.070
requerirá algún oyente que escuche

03:26.070 --> 03:29.840
el inicio de ese evento de arrastre y también, potencialmente

03:29.840 --> 03:32.330
un oyente que escuche el final del evento

03:32.330 --> 03:36.560
de arrastre para que pueda hacer cualquier tipo de actualizaciones

03:36.560 --> 03:40.440
allí que quieras hacer.

03:40.440 --> 03:42.580
Ahora, el manejador del evento de inicio

03:42.580 --> 03:44.225
de arrastre obtendrá un objeto

03:44.225 --> 03:47.370
de evento que habremos llamado evento de arrastre, que es

03:47.370 --> 03:51.010
un tipo incorporado, tipos con librerías de opciones, debido a nuestra

03:51.010 --> 03:53.210
configuración de conflicto de TS y las librerías

03:53.210 --> 03:55.330
que estamos añadiendo allí y no devolverá

03:55.330 --> 03:57.600
nada será un método que se ejecuta pero que

03:57.600 --> 03:59.882
luego sólo hace algo, configura el evento

03:59.882 --> 04:03.930
de arrastre por ejemplo, pero no devuelve.

04:03.930 --> 04:06.970
Ahora el manejador de fin de arrastre recibe un evento similar,

04:06.970 --> 04:10.730
también recibe un evento de arrastre y todo devuelve nada.

04:10.730 --> 04:13.130
Ahora, por supuesto, verás cómo los aplicamos

04:13.130 --> 04:15.810
en unos pocos segundos, así que aguanta conmigo.

04:15.810 --> 04:17.810
Ahora, ¿qué pasa con el objetivo de arrastre?

04:17.810 --> 04:20.530
Bueno, para el objetivo, por lo que la caja en

04:20.530 --> 04:22.620
la que podemos arrastrar algo hay

04:22.620 --> 04:26.280
tres controladores de eventos que quiero implementar.

04:26.280 --> 04:28.593
Un manipulador de arrastre, un

04:29.440 --> 04:31.800
manipulador de caída y un manipulador

04:31.800 --> 04:34.280
de arrastre de salida.

04:34.280 --> 04:36.470
Ahora, ¿qué hacen estas cosas?

04:36.470 --> 04:39.370
Ahora, necesitas implementar un controlador de arrastre

04:39.370 --> 04:41.960
cuando implementas arrastrar y soltar en java script

04:41.960 --> 04:45.140
para básicamente señalar al navegador en java script que la

04:45.140 --> 04:48.060
cosa sobre la que estás arrastrando algo es un objetivo

04:48.060 --> 04:50.160
de arrastre válido.

04:50.160 --> 04:53.840
Si no se hace lo correcto en el manejador de arrastre,

04:53.840 --> 04:56.410
no se podrá soltar.

04:56.410 --> 04:57.980
Necesitas el manejador de la

04:57.980 --> 05:00.760
caída para reaccionar a la caída real que ocurre,

05:00.760 --> 05:03.960
así que si el manejador de arrastre permitirá la caída con

05:03.960 --> 05:06.500
el manejador de la caída manejará la caída y entonces

05:06.500 --> 05:08.650
aquí podemos actualizar nuestros datos

05:08.650 --> 05:11.960
y UI por ejemplo y el manejador de la caída puede ser útil si

05:11.960 --> 05:14.500
estamos, por ejemplo, dando alguna retroalimentación

05:14.500 --> 05:16.940
visual al usuario cuando él o ella arrastra

05:16.940 --> 05:19.880
algo sobre la caja por ejemplo, cambiamos el color

05:19.880 --> 05:22.210
de fondo bien si no ocurre la caída y en su lugar

05:22.210 --> 05:25.790
se cancela o el usuario mueve el elemento lejos podemos usar el

05:25.790 --> 05:28.410
manejador de la caída para revertir nuestra actualización

05:28.410 --> 05:32.190
visual.

05:32.190 --> 05:36.250
Ahora, los tres manejadores reciben un evento de arrastre

05:36.250 --> 05:37.990
y no devuelven nada, así que

05:37.990 --> 05:41.473
vamos a actualizarlos apropiadamente así.

05:44.070 --> 05:47.250
Y también para este último manipulador aquí.

05:47.250 --> 05:49.810
Y ahora configuramos algunas interfaces

05:49.810 --> 05:52.840
que por sí solas no hacen mucho, pero ahora podemos

05:52.840 --> 05:55.710
usarlas y quiero empezar con el elemento del

05:55.710 --> 05:57.490
proyecto.

05:57.490 --> 06:00.380
Así que vamos a encontrar nuestra clase de elemento de proyecto

06:00.380 --> 06:02.710
para este aquí es el componente, aquí es el elemento

06:02.710 --> 06:05.100
de proyecto, y ahora usted puede recordar que una

06:05.100 --> 06:08.540
interfaz no sólo se puede utilizar para definir un tipo de objeto personalizado,

06:08.540 --> 06:12.290
pero que se puede utilizar como un contrato en una clase.

06:12.290 --> 06:15.760
Usted puede llamar a los implementos, o añadir implementos aquí después de

06:15.760 --> 06:16.750
su nombre de la clase y

06:16.750 --> 06:19.290
después de las posibles extensiones que está haciendo

06:19.290 --> 06:20.900
y luego implementar la interfaz.

06:20.900 --> 06:24.340
En este caso, la interfaz arrastrable.

06:24.340 --> 06:27.250
Ahora, cuando lo haces, y acabo de formatear esto para traerlo

06:27.250 --> 06:29.820
en una nueva línea para que sea más fácil de leer.

06:29.820 --> 06:31.393
Al hacerlo, ahora se obtiene

06:31.393 --> 06:34.460
un error de que la clase aquí implementa incorrectamente

06:34.460 --> 06:38.600
la interfaz porque esa interfaz de arrastre nos obliga a añadir dos métodos,

06:38.600 --> 06:40.763
si lo recuerdas.

06:42.840 --> 06:44.480
Así que vamos a añadirlos aquí.

06:44.480 --> 06:46.290
Quizás carguemos un constructor.

06:46.290 --> 06:49.550
Agreguemos un manejador de inicio de arrastre

06:49.550 --> 06:53.610
que reciba un evento de tipo arrastre y agreguemos también

06:53.610 --> 06:56.500
nuestro manejador de fin de arrastre que reciba

06:56.500 --> 06:59.143
nuestro evento de arrastre.

06:59.990 --> 07:02.010
Y ahora tenemos estos dos métodos añadidos.

07:02.010 --> 07:05.330
Ahora bien, eso por sí solo no permite arrastrar y soltar.

07:05.330 --> 07:08.900
Simplemente nos ayuda a escribir componentes arrastrables o clases

07:08.900 --> 07:11.880
arrastrables de una manera uniforme, así que si añadimos

07:11.880 --> 07:14.560
más y más clases que deben ser arrastrables, siempre

07:14.560 --> 07:18.210
tendremos estos métodos que simplemente hace más fácil razonar sobre

07:18.210 --> 07:20.700
nuestro código y trabajar nuestro código, especialmente

07:20.700 --> 07:22.870
cuando se trabaja en un equipo, porque todo

07:22.870 --> 07:25.520
el mundo sabe dónde poner el trabajo para el evento

07:25.520 --> 07:27.840
de inicio de arrastre.

07:27.840 --> 07:31.340
Ahora bien, lo que esto no hace, por supuesto, es escuchar un evento

07:31.340 --> 07:32.950
de inicio de arrastre.

07:32.950 --> 07:35.010
Eso es algo que podemos hacer en el método

07:35.010 --> 07:36.730
de configuración que ya tienes.

07:36.730 --> 07:38.980
Podemos llegar a nuestro elemento renderizado

07:38.980 --> 07:41.090
y agregarle un escuchador de eventos y allí,

07:41.090 --> 07:43.890
ese sería el evento de inicio de arrastre.

07:43.890 --> 07:45.780
El evento de inicio de arrastre es un evento,

07:45.780 --> 07:49.190
un evento dom del navegador por defecto que puedes escuchar y el manejador

07:49.190 --> 07:51.750
uniforme que queremos desencadenar, por supuesto,

07:51.750 --> 07:53.740
es el manejador de inicio de arrastre, al

07:55.320 --> 07:57.793
que podemos apuntar aquí.

07:59.080 --> 08:00.750
Ahora, también queremos estar seguros

08:00.750 --> 08:02.460
de que dentro del controlador de inicio

08:02.460 --> 08:04.870
de arrastre que esta palabra clave se refiere a nuestra

08:04.870 --> 08:06.560
clase y como se aprende con los oyentes

08:06.560 --> 08:08.530
de eventos que por defecto no sería el caso,

08:08.530 --> 08:11.810
por lo que podríamos utilizar bind aquí y bind esto que sería válido, pero

08:11.810 --> 08:14.750
tenemos una mejor manera en realidad.

08:14.750 --> 08:16.900
Hemos añadido nuestro decorador de auto vinculación,

08:16.900 --> 08:18.550
así que voy a añadir esto aquí al controlador

08:18.550 --> 08:20.303
de inicio de arrastre.

08:21.210 --> 08:26.070
Ahora, también podemos escuchar el evento de fin de arrastre aquí y apuntar

08:26.070 --> 08:28.530
al controlador de fin de arrastre.

08:28.530 --> 08:30.400
También puede añadir auto bind allí

08:30.400 --> 08:32.690
si usted planea en el uso de la palabra clave

08:32.690 --> 08:35.830
vis aquí por el momento sólo voy a registro de arrastre final

08:35.830 --> 08:37.730
aquí para que veamos que se activa porque

08:37.730 --> 08:40.520
aquí en realidad no tengo nada específico que quiero

08:40.520 --> 08:44.410
hacer con él y por lo tanto también en blanco este parámetro y, básicamente,

08:44.410 --> 08:47.310
decirle a typescript que no estoy usando.

08:47.310 --> 08:49.850
Aquí en el inicio de arrastre, vamos a utilizar el evento

08:49.850 --> 08:51.730
y por el momento, sólo voy a registrar el evento,

08:51.730 --> 08:53.720
cuando este evento se produce.

08:53.720 --> 08:55.610
Sin embargo, esto no es suficiente.

08:55.610 --> 08:57.000
Si guardas todo y añades

08:57.000 --> 08:59.230
algún proyecto aquí, verás que no puedes

08:59.230 --> 09:01.460
volver a arrastrarlo, ¿verdad?

09:01.460 --> 09:04.750
Si intentas arrastrarlo, no funcionará

09:04.750 --> 09:07.390
porque también tendrás que cambiar

09:07.390 --> 09:09.720
algo en tu archivo HTML.

09:09.720 --> 09:11.810
En este elemento de la lista, que se

09:11.810 --> 09:14.550
renderiza para cada proyecto, que es lo que

09:14.550 --> 09:18.380
quieres arrastrar, tienes que añadir el atributo draggable

09:18.380 --> 09:19.830
y ponerlo en true.

09:19.830 --> 09:21.040
Eso es importante.

09:21.040 --> 09:24.200
Esto le dice al navegador que esto será arrastrable.

09:24.200 --> 09:28.430
Con eso, si lo guardas, y vuelves a añadir un proyecto aquí, ves ahora,

09:28.430 --> 09:30.400
esto sí que es arrastrable, ahora

09:30.400 --> 09:32.070
está pegado a mi ratón y ahora

09:32.070 --> 09:35.720
sí que podemos moverlo por aquí perfectamente.

09:35.720 --> 09:38.530
También verás a la derecha que se disparó un evento de arrastre

09:38.530 --> 09:41.390
cuando empecé a arrastrar y si lo suelto, verás que también

09:41.390 --> 09:43.860
se dispara el evento de fin de arrastre.

09:43.860 --> 09:46.510
Así que nuestros oyentes están conectados y

09:46.510 --> 09:50.540
podemos arrastrar, ahora podemos trabajar en el objetivo de la gota

09:50.540 --> 09:53.200
por lo que en el cuadro en el que este debe ser draggable

09:53.200 --> 09:56.560
a, para luego añadir el proyecto a esa caja.

09:56.560 --> 09:58.660
Esto también lo haré rápidamente

09:58.660 --> 10:02.930
en las aplicaciones. archivo css, en los elementos de la lista,

10:02.930 --> 10:06.550
por lo que en los proyectos LI, voy a añadir un color de fondo de blanco

10:06.550 --> 10:09.810
simplemente para que podamos ver esto un poco mejor.

10:09.810 --> 10:12.350
Así que aquí, el proyecto LI, añadí el blanco para que

10:12.350 --> 10:15.800
cuando arrastramos alrededor del proyecto aquí, tenemos el fondo blanco

10:15.800 --> 10:17.370
aquí por lo que esto hace que sea

10:17.370 --> 10:19.150
un poco más fácil de ver.

10:19.150 --> 10:20.840
Sin embargo, eso no cambia nuestro siguiente paso.

10:20.840 --> 10:22.700
Queremos hacer su "dropabble".
