WEBVTT

1
00:00:02.270 --> 00:00:03.103
<v Instructor>For this I got a</v>

2
00:00:03.103 --> 00:00:04.620
little starting project for you.

3
00:00:04.620 --> 00:00:05.610
You find it attached.

4
00:00:05.610 --> 00:00:07.070
It's the same starting project

5
00:00:07.070 --> 00:00:08.810
we used over and over again.

6
00:00:08.810 --> 00:00:12.080
You start the development server with npm-start

7
00:00:12.080 --> 00:00:15.510
and then I started the TypeScript compilation in watch mode

8
00:00:15.510 --> 00:00:19.830
with tsc-w in a separate terminal.

9
00:00:19.830 --> 00:00:22.890
So here in my built-in terminal I got two tabs.

10
00:00:22.890 --> 00:00:24.390
One with the development server

11
00:00:24.390 --> 00:00:26.070
which you should keep up and running

12
00:00:26.070 --> 00:00:27.670
so that it watches for changes

13
00:00:27.670 --> 00:00:30.720
and reloads the page and keeps the server up and running

14
00:00:30.720 --> 00:00:32.820
and another tab where I have that

15
00:00:32.820 --> 00:00:35.530
running TypeScript compilation watcher.

16
00:00:35.530 --> 00:00:36.930
Now with that we can work in the

17
00:00:36.930 --> 00:00:39.400
app.ts file which is empty right now

18
00:00:39.400 --> 00:00:41.520
and start writing some code there

19
00:00:41.520 --> 00:00:42.990
and I want to start right away

20
00:00:42.990 --> 00:00:45.603
by defining a class which we can use.

21
00:00:46.490 --> 00:00:49.420
We do this by using the class keyword, just like that

22
00:00:49.420 --> 00:00:51.340
and then the name of the class

23
00:00:51.340 --> 00:00:54.030
and there let's say we're building an app,

24
00:00:54.030 --> 00:00:56.880
a web application, a user interface

25
00:00:56.880 --> 00:01:00.700
for some web tool that allows us to manage

26
00:01:00.700 --> 00:01:04.100
our different departments we might have in our company.

27
00:01:04.100 --> 00:01:05.770
Maybe we're building some kind of

28
00:01:05.770 --> 00:01:08.440
company internal tool whatever it is

29
00:01:08.440 --> 00:01:11.290
and we need to have multiple departments there.

30
00:01:11.290 --> 00:01:13.790
Now we could use objects to manage

31
00:01:13.790 --> 00:01:16.320
the data for the different departments

32
00:01:16.320 --> 00:01:19.960
and we might then also add methods there to each object

33
00:01:19.960 --> 00:01:21.980
so that we can render that department

34
00:01:21.980 --> 00:01:24.020
information on to the screen

35
00:01:24.020 --> 00:01:26.980
and to simplify the creation of these different

36
00:01:26.980 --> 00:01:30.430
department objects which will all look the same,

37
00:01:30.430 --> 00:01:33.000
is to create a department class.

38
00:01:33.000 --> 00:01:35.690
So we could name this class Department.

39
00:01:35.690 --> 00:01:36.830
The name is totally up to you.

40
00:01:36.830 --> 00:01:40.030
The convention is that it starts with an uppercase character

41
00:01:40.030 --> 00:01:42.720
to make it clear that this is a class.

42
00:01:42.720 --> 00:01:45.670
Now if you've been around to JavaScript development

43
00:01:45.670 --> 00:01:48.270
for a longer time you might know the idea

44
00:01:48.270 --> 00:01:50.090
of constructor functions by the way

45
00:01:50.090 --> 00:01:52.140
and classes in the end are syntactic

46
00:01:52.140 --> 00:01:53.920
sugar for that you could say,

47
00:01:53.920 --> 00:01:56.980
but we'll see that once we compile our code.

48
00:01:56.980 --> 00:01:59.220
So here we have our class Department

49
00:01:59.220 --> 00:02:02.080
and now in there we might have a name property.

50
00:02:02.080 --> 00:02:04.010
You can add it just like this,

51
00:02:04.010 --> 00:02:07.290
without any let or const in front of it

52
00:02:07.290 --> 00:02:09.840
just like this, directly in the class

53
00:02:09.840 --> 00:02:12.550
and then of course you can also assign a type to this.

54
00:02:12.550 --> 00:02:14.690
You do that by adding a colon here

55
00:02:14.690 --> 00:02:17.920
and then the type for example string and that's important.

56
00:02:17.920 --> 00:02:21.150
This might look like an object but it isn't an object.

57
00:02:21.150 --> 00:02:23.240
In an object you use key-value pairs

58
00:02:23.240 --> 00:02:25.520
with a colon to have a key name

59
00:02:25.520 --> 00:02:27.000
and then the value for the key.

60
00:02:27.000 --> 00:02:28.810
Here that's not the case.

61
00:02:28.810 --> 00:02:32.250
This is a so-called field of a class.

62
00:02:32.250 --> 00:02:34.680
You create a class with curly braces as well

63
00:02:34.680 --> 00:02:37.110
but here this is not a key-value pair,

64
00:02:37.110 --> 00:02:39.120
this just defines the name of a

65
00:02:39.120 --> 00:02:41.040
key you will have in the object

66
00:02:41.040 --> 00:02:43.530
which you will create based on the class

67
00:02:43.530 --> 00:02:48.530
and you define the value type that key will hold in the end.

68
00:02:48.550 --> 00:02:52.363
You can also set an initial value here with the = 'DEFAULT'

69
00:02:53.840 --> 00:02:55.920
but you don't need to do that.

70
00:02:55.920 --> 00:02:59.050
Instead another thing you commonly have in classes

71
00:02:59.050 --> 00:03:03.410
is a special function in there, a so-called method.

72
00:03:03.410 --> 00:03:06.780
Functions in objects are simply called methods,

73
00:03:06.780 --> 00:03:09.410
which is the constructor method.

74
00:03:09.410 --> 00:03:12.500
We can add it like this and this is a reserved word.

75
00:03:12.500 --> 00:03:16.170
Constructor is a reserved key word understood by TypeScript

76
00:03:16.170 --> 00:03:18.390
and by modern JavaScript as well

77
00:03:18.390 --> 00:03:22.480
and this is essentially a function tied to this class

78
00:03:22.480 --> 00:03:25.840
and tied to any object you create based on the class

79
00:03:25.840 --> 00:03:29.640
which is executed when the object is being created.

80
00:03:29.640 --> 00:03:33.500
So this allows you to basically do some initialization work

81
00:03:33.500 --> 00:03:35.700
for the object you're building.

82
00:03:35.700 --> 00:03:38.280
Now in there you could accept an argument.

83
00:03:38.280 --> 00:03:41.910
Let's name it n maybe which could also be of type string

84
00:03:41.910 --> 00:03:45.620
and then you wanna store that in your name field here

85
00:03:45.620 --> 00:03:47.000
or you can do this by reaching

86
00:03:47.000 --> 00:03:49.050
out to name with the this keyword

87
00:03:49.050 --> 00:03:51.200
and storing n in it.

88
00:03:51.200 --> 00:03:55.200
What this does is it sets the value of the name field,

89
00:03:55.200 --> 00:03:58.630
also called property so of the name property,

90
00:03:58.630 --> 00:04:01.180
to the value you're getting on n

91
00:04:01.180 --> 00:04:04.550
when a department object is created.

92
00:04:04.550 --> 00:04:07.030
Now how could we create such a department object?

93
00:04:07.030 --> 00:04:08.890
Nothing easier than that.

94
00:04:08.890 --> 00:04:13.110
Outside of the class you created by using the new keyword

95
00:04:13.110 --> 00:04:16.200
which is also built into TypeScript and JavaScript

96
00:04:16.200 --> 00:04:18.410
and then you repeat the name of the class,

97
00:04:18.410 --> 00:04:20.160
then you add parentheses

98
00:04:20.160 --> 00:04:22.440
and this would create a new department object

99
00:04:22.440 --> 00:04:26.240
but the constructor's called at this point of time

100
00:04:26.240 --> 00:04:29.620
when you execute this class like this with the new keyword

101
00:04:29.620 --> 00:04:33.440
and the constructor here takes an argument, a string.

102
00:04:33.440 --> 00:04:35.600
Now you pass constructor arguments

103
00:04:35.600 --> 00:04:39.800
to this department call here so between these parentheses.

104
00:04:39.800 --> 00:04:41.640
So here we could name this Accounting

105
00:04:41.640 --> 00:04:44.730
because maybe we're building the accounting department here.

106
00:04:44.730 --> 00:04:46.100
Now this will now create a new

107
00:04:46.100 --> 00:04:49.800
JavaScript object based on this blueprint.

108
00:04:49.800 --> 00:04:53.910
So now we can store this in a constant for example

109
00:04:53.910 --> 00:04:58.010
and then console.log.accounting here to see what we get.

110
00:04:58.010 --> 00:04:59.620
If we now save that

111
00:04:59.620 --> 00:05:02.020
and we then go back to our page here

112
00:05:02.020 --> 00:05:03.780
and have a look at the development

113
00:05:03.780 --> 00:05:05.660
console here in the def tools,

114
00:05:05.660 --> 00:05:07.930
we should our Department object here.

115
00:05:07.930 --> 00:05:10.000
It's a regular JavaScript object,

116
00:05:10.000 --> 00:05:13.770
just has this Department type attached to it you could say

117
00:05:13.770 --> 00:05:15.290
and in the end it's an object with

118
00:05:15.290 --> 00:05:18.140
one key-value pair, where the key is name

119
00:05:18.140 --> 00:05:20.270
because that's what we defined up there

120
00:05:20.270 --> 00:05:23.110
and the value is Accounting.

121
00:05:23.110 --> 00:05:25.530
We have this Accounting value here

122
00:05:25.530 --> 00:05:27.460
because we're passing this

123
00:05:27.460 --> 00:05:29.560
as an argument to the constructor.

124
00:05:29.560 --> 00:05:31.770
There we are accepting such a string,

125
00:05:31.770 --> 00:05:34.830
restoring the value in this field

126
00:05:34.830 --> 00:05:38.400
and fields are in the end just translated to properties,

127
00:05:38.400 --> 00:05:41.890
the object based on the class will have there after.

128
00:05:41.890 --> 00:05:44.480
So this is how we can create a simple class

129
00:05:44.480 --> 00:05:46.570
and what the general idea is.

130
00:05:46.570 --> 00:05:50.143
Now let's see what we actually get in JavaScript.

