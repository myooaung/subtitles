WEBVTT

00:02.180 --> 00:04.432
-ここで､ よくある混乱の原因として､

00:04.432 --> 00:09.030
ジェネリックとユニオン型の違いを明らかにしておきたいと思います｡

00:09.030 --> 00:11.950
なぜこの2つを混同してしまうのでしょうか？

00:11.950 --> 00:14.440
例えば､ ここにあるデータストレージですね｡ 

00:14.440 --> 00:19.240
この型をベースにGeneric型を受け付けるのであれば､

00:19.240 --> 00:21.157
「ここに文字列や数値､

00:21.157 --> 00:27.610
ブール値を格納したいんだよね」と書き換えることもできる｡

00:27.610 --> 00:27.610
だから､

00:27.610 --> 00:32.660
それを格納するか､ 正確には､ これを括弧でくくることで､ これらの型のいずれかを配列として言うことができるのです｡

00:32.660 --> 00:35.040
ここで､ 「アイテムを追加したときに得られるのは､

00:35.040 --> 00:37.017
文字列､ 数値､ ブール値のいずれかであり､

00:37.017 --> 00:41.120
削除しても同じである」とももちろん言えます｡

00:41.120 --> 00:41.120
さて､ この方法の何が問題なのでしょうか？

00:41.120 --> 00:43.007
一見すると､ 同じことを実現しているように見えますが､

00:44.424 --> 00:45.880
実はまったく違うことをやっているのです｡

00:45.880 --> 00:49.630
ここで言っているのは､ 文字列､ 数値､ ブール値の配列であれば､

00:49.630 --> 00:53.710
どんな種類のデータでもここに保存し､

00:53.710 --> 01:02.930
さらに文字列､ 数値､ ブール値のいずれかのデータをここに追加し､ 同じように削除しているということです｡

01:02.930 --> 01:04.670
もちろん､ もう一般的な方法でこれを初期化することはできないので､

01:04.670 --> 01:06.650
すでにいくつかのエラーが発生しています｡

01:06.650 --> 01:09.830
でも､ それ以外はうまくいっています｡ 

01:09.830 --> 01:12.520
しかし､ ここで問題なのは､ これが文字列の配列､ 数値の配列､

01:12.520 --> 01:18.260
ブール値の配列のいずれかであるとは言えないということです｡

01:18.260 --> 01:24.190
これは､ 文字列､ 数値､ ブール値を混在させることができる配列を持っていることを意味します｡

01:24.190 --> 01:26.290
ですから､ 文字列の配列や数値の配列と言いたい場合は､

01:26.290 --> 01:34.403
文字列配列､ 数値配列､ ブール配列と言わなければなりません｡

01:34.403 --> 01:36.020
まあ､ それはそれでいいのですが､ ここで問題が発生しました｡ 

01:36.020 --> 01:39.100
さて､ 文字列､ 数値､ ブール値を追加していますが､

01:39.100 --> 01:44.710
実際にこのデータ配列を何に設定したかによって､

01:44.710 --> 01:52.320
数値配列､ ブール値配列､ 文字列配列のいずれかを追加することは許されないのです｡

01:52.320 --> 01:55.870
これを文字列配列にすると､ ここに数値を追加することができません｡

01:55.870 --> 01:57.833
しかし､ ここでは､ 数値､ ブール値､ 文字列であれば､

01:57.833 --> 01:59.800
どのようなパラメータでも構わないと思っています｡

01:59.800 --> 02:02.850
で､ 問題はここのユニオンタイプ｡ 

02:02.850 --> 02:08.380
このメソッドが呼び出されるたびに､ これらの値のいずれかを受け取ります｡

02:08.380 --> 02:11.053
つまり､ 「このクラスで作業するときは､ 必ず一つの型に決めて､

02:11.053 --> 02:15.397
それにこだわれ」ということではなく､

02:15.397 --> 02:21.830
「このメソッドを呼び出すときは､ どの型も自由に使っていい」ということなんです｡

02:21.830 --> 02:23.440
それは､ まさに私たちがここで望んでいることではありません｡ 

02:23.440 --> 02:29.640
これをジェネリックタイプを使った以前の設定に戻すと､

02:29.640 --> 02:33.050
また違う設定になります｡

02:33.050 --> 02:43.950
ここでは､ どの種類のデータを保存するかを一度選択し､ そのデータのみを追加することが許されていると言います｡

02:43.950 --> 02:45.750
例えばここで数字を追加すると､

02:45.750 --> 02:48.523
それは文字列ではないのでエラーになり､

02:49.710 --> 02:56.170
一般的なタイプを設定すると､ ここでは文字列のみを管理したいことが示されます｡

02:56.170 --> 02:57.810
それが､ ユニオン型とジェネリック型の違いです｡ 

02:57.810 --> 03:06.920
ユニオン型は､ 呼び出すたびにこれらの型のいずれかを使って呼び出すことができる関数を用意したい場合に便利です｡

03:06.920 --> 03:11.570
ジェネリックタイプは､ ある特定のタイプを固定したい場合に最適です｡

03:11.570 --> 03:15.510
作成するクラスインスタンス全体で同じ型を使用します｡

03:15.510 --> 03:18.380
機能全体を通して同じタイプを使用する｡ 

03:18.380 --> 03:20.070
そこで､ ジェネリックタイプが欲しいところです｡ 

03:20.070 --> 03:23.300
メソッド呼び出しのたびに､ 関数呼び出しのたびに､

03:23.300 --> 03:25.850
異なる型を持つことができる柔軟性がある場合､

03:25.850 --> 03:28.120
ユニオン型が必要です｡

03:28.120 --> 03:30.810
そして､ ユニオン型が使えるようになります｡ 

03:30.810 --> 03:33.470
汎用タイプは､ 型をロックする｡ 
