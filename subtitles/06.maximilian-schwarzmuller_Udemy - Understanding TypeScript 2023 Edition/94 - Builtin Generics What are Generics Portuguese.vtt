WEBVTT

00:02.130 --> 00:02.963
Narrador: Para isso, novamente,

00:02.963 --> 00:05.260
estou de volta ao nosso Projeto de Configuração de Projeto de boneco,

00:05.260 --> 00:06.690
que usamos repetidas vezes.

00:06.690 --> 00:08.260
Ali, podemos rodar o NPM começa a trazer

00:08.260 --> 00:10.190
à tona aquele servidor de desenvolvimento.

00:10.190 --> 00:13.690
E então em uma nova janela de terminal com o servidor rodando em uma

00:13.690 --> 00:15.260
janela de terminal diferente,

00:15.260 --> 00:17.419
eu corro o traço W do TSC para iniciar meu

00:17.419 --> 00:21.540
processo de compilação do TypeScript e mantê-lo em funcionamento.

00:21.540 --> 00:23.470
Com isso, é claro, temos uma página vazia

00:23.470 --> 00:24.560
porque não há nada nela,

00:24.560 --> 00:27.060
mas agora podemos brincar no arquivo TS do aplicativo

00:27.060 --> 00:29.480
e começar com os genéricos.

00:29.480 --> 00:32.940
E acho que é mais fácil entender os genéricos se dermos

00:32.940 --> 00:35.450
uma olhada em um tipo padrão, que é embutido

00:35.450 --> 00:37.450
no TypeScript com o qual realmente

00:37.450 --> 00:39.610
trabalhamos muito, o que acaba

00:39.610 --> 00:41.890
se tornando um genérico e que seria

00:41.890 --> 00:44.410
uma matriz.

00:44.410 --> 00:46.900
Digamos que temos uma série de nomes.

00:46.900 --> 00:50.370
Max e Manual, digamos.

00:50.370 --> 00:51.620
Então, é claro que

00:51.620 --> 00:54.610
temos lá dois nomes, o tipo de constante

00:54.610 --> 00:57.210
do nome é um conjunto de cordas.

00:57.210 --> 00:59.610
Agora, na verdade, poderíamos pensar

00:59.610 --> 01:02.460
nisto como dois tipos sendo combinados.

01:02.460 --> 01:05.760
Assim como você pode ter um objeto com propriedades diferentes, onde

01:05.760 --> 01:07.700
em cada propriedade você pode estar armazenando

01:07.700 --> 01:09.310
um tipo diferente.

01:09.310 --> 01:13.750
Uma matriz sempre apenas uma coisa com dados diferentes,

01:13.750 --> 01:16.440
neste caso com cordas dentro.

01:16.440 --> 01:20.230
Então nós realmente temos o tipo de array, apenas um array e se eu

01:20.230 --> 01:22.770
removesse os nomes aqui e os cortasse, você

01:22.770 --> 01:25.010
veria que o TypeScript inferiria que

01:25.010 --> 01:29.140
este é um array de qualquer coisa com quaisquer dados ali dentro.

01:29.140 --> 01:32.690
De fato, o TypeScript conhece o tipo de matriz.

01:32.690 --> 01:35.280
Portanto, poderíamos dizer que isto aqui deveria

01:35.280 --> 01:37.600
ser um array, mas como você vê se eu especifiquei

01:37.600 --> 01:39.900
assim, recebemos um erro mesmo que eu possa lhe

01:39.900 --> 01:43.570
dizer que este tipo de array, como este existe para TypeScript.

01:43.570 --> 01:45.870
Mas vemos que é um tipo genérico

01:45.870 --> 01:48.710
e que requer um argumento de tipo.

01:48.710 --> 01:50.950
E agora, isso é algo que nunca tínhamos visto antes.

01:50.950 --> 01:53.870
Nunca ouvimos falar de tipos genéricos antes.

01:53.870 --> 01:55.750
Agora, esta estranha notação aqui,

01:55.750 --> 01:58.120
sempre que você vê algo assim no TypeScript,

01:58.120 --> 02:01.060
você está lidando com um tipo genérico.

02:01.060 --> 02:05.610
Um tipo genérico é um tipo que está meio conectado com

02:05.610 --> 02:08.890
algum outro tipo e é realmente flexível

02:08.890 --> 02:12.920
quanto ao tipo exato que esse outro tipo é.

02:12.920 --> 02:14.130
Parece difícil?

02:14.130 --> 02:16.820
Bem, voltemos ao exemplo dessa matriz.

02:16.820 --> 02:19.380
Sabemos que queremos armazenar uma matriz aqui.

02:19.380 --> 02:22.250
Portanto, uma matriz em si poderia ser um tipo,

02:22.250 --> 02:24.610
é uma lista de dados que por si só já constitui

02:24.610 --> 02:26.730
um tipo, pode-se dizer.

02:26.730 --> 02:29.770
Assim como um objeto é um tipo por si só, mesmo que ainda

02:29.770 --> 02:32.200
não saibamos quais dados irão para lá.

02:32.200 --> 02:34.490
Portanto, uma matriz é um tipo por si só.

02:34.490 --> 02:38.230
Mas uma série de dados de um certo tipo é armazenada

02:38.230 --> 02:39.860
ali.

02:39.860 --> 02:42.690
Agora o próprio tipo de matriz não se importa que

02:42.690 --> 02:44.810
tipo de dados é armazenado ali.

02:44.810 --> 02:48.150
O tipo de matriz não importa se você está armazenando

02:48.150 --> 02:50.540
uma lista de cordas, de números, de objetos,

02:50.540 --> 02:52.430
ou de dados mistos.

02:52.430 --> 02:54.500
O tipo de matriz realmente não se importa,

02:54.500 --> 02:58.640
mas se importa em obter pelo menos algumas informações, mesmo que você esteja

02:58.640 --> 03:01.200
dizendo que eu não sei, definindo isto para digitar

03:01.200 --> 03:02.960
qualquer matriz.

03:02.960 --> 03:05.870
É melhor do que não especificar nada.

03:05.870 --> 03:08.330
Agora, esta é uma maneira de definir um tipo de matriz,

03:08.330 --> 03:10.070
o tipo de dados que são armazenados ali

03:10.070 --> 03:11.430
e, em seguida, colchetes.

03:11.430 --> 03:14.620
A outra maneira, que criaria exatamente o mesmo tipo seria usar

03:14.620 --> 03:15.830
essa coisa de Array e depois

03:15.830 --> 03:17.630
esses ângulos de ângulo.

03:17.630 --> 03:20.030
E agora, entre estes ângulos, você

03:20.030 --> 03:22.340
especifica o tipo de dados, que devem

03:22.340 --> 03:24.140
ir para a matriz.

03:24.140 --> 03:26.330
Por exemplo, uma corda,

03:26.330 --> 03:31.330
e isto aqui é 100% o mesmo que definir este tipo aqui.

03:32.030 --> 03:34.950
Naturalmente, aqui você também poderia usar um tipo de sindicato

03:34.950 --> 03:37.730
para dizer, esta matriz armazena cordas ou números ou usar

03:37.730 --> 03:40.850
qualquer um se você não quiser dizer nada sobre o tipo ou como nós

03:40.850 --> 03:42.970
acabamos de ter uma corda.

03:42.970 --> 03:44.330
Portanto, este é um tipo genérico,

03:44.330 --> 03:46.900
um tipo genérico embutido no TypeScript.

03:46.900 --> 03:50.440
Um tipo que está conectado a um outro tipo, onde queremos

03:50.440 --> 03:53.980
saber qual é o nosso tipo que é assim para o TypeScript

03:53.980 --> 03:56.810
pode nos dar um melhor suporte.

03:56.810 --> 03:57.910
Porque aqui, por exemplo,

03:57.910 --> 04:01.510
se sabemos que o que armazenamos ali será uma corda, bem, então

04:01.510 --> 04:04.380
sabemos que sempre que eu acessar um elemento dessa

04:04.380 --> 04:06.143
matriz, eu posso fazer coisas

04:07.100 --> 04:09.410
de corda com ele.

04:09.410 --> 04:12.260
Posso chamar todos esses métodos de cordas,

04:12.260 --> 04:15.280
por exemplo, e o TypeScript não vai reclamar porque

04:15.280 --> 04:18.220
ele sabe, bem esta matriz contém cordas.

04:18.220 --> 04:20.410
Essa é a idéia dos tipos genéricos.

04:20.410 --> 04:23.230
Um certo tipo neste caso, o tipo de matriz pode

04:23.230 --> 04:26.780
simplesmente funcionar melhor ou funcionar melhor se

04:26.780 --> 04:29.040
você fornecer informações adicionais

04:29.040 --> 04:33.430
sobre um tipo de dado que é fornecido neste tipo de matriz e, é claro,

04:33.430 --> 04:36.590
o tipo de matriz é apenas um exemplo.

04:36.590 --> 04:39.840
Outro tipo genérico que está embutido no TypeScript

04:39.840 --> 04:42.130
é o tipo de promessa.

04:42.130 --> 04:45.470
Agora as promessas são um recurso JavaScript, certo?

04:45.470 --> 04:46.970
Não é um recurso de TypeScript.

04:46.970 --> 04:49.437
Você pode criar promessas em JavaScript e

04:49.437 --> 04:52.000
caso não tenha certeza do que são promessas,

04:52.000 --> 04:53.870
anexado você encontra o link.

04:53.870 --> 04:58.150
Uma promessa pode ser criada usando uma nova promessa.

04:58.150 --> 05:00.640
Mais uma vez, esta é uma função construtora, uma

05:00.640 --> 05:03.270
classe incorporada no JavaScript e a função construtora

05:03.270 --> 05:05.870
de promessa leva um argumento que, por sua vez, é uma

05:05.870 --> 05:07.640
função que, por sua vez, terá dois

05:07.640 --> 05:10.650
argumentos, eventualmente, uma função de resolução e uma

05:10.650 --> 05:12.580
função de rejeição.

05:12.580 --> 05:15.180
Agora estes serão passados automaticamente

05:15.180 --> 05:17.790
para nós por JavaScript no navegador.

05:17.790 --> 05:22.400
E então, em uma promessa podemos, por exemplo, definir um temporizador e então,

05:22.400 --> 05:25.640
nessa função de chamada de retorno desse temporizador,

05:25.640 --> 05:28.140
poderíamos resolver a promessa externa.

05:28.140 --> 05:30.140
Portanto, aqui nesta função de chamada

05:30.140 --> 05:34.823
de retorno, poderíamos chamar a determinação e dizer que isto está feito.

05:36.500 --> 05:41.020
Agora quando o fazemos, esta promessa aqui cria um novo objeto, um objeto de promessa

05:41.020 --> 05:43.860
que é armazenado na constante da promessa.

05:43.860 --> 05:47.700
Agora, esta constante de promessa tem na verdade um tipo específico.

05:47.700 --> 05:49.470
É do tipo promessa e, novamente,

05:49.470 --> 05:51.130
você vê estes parênteses

05:51.130 --> 05:56.130
angulares porque esta promessa eventualmente se resolverá a algo.

05:56.480 --> 05:58.930
Agora aqui diz desconhecido porque o TypeScript

05:58.930 --> 06:01.470
não é totalmente capaz de entender que nós realmente

06:01.470 --> 06:03.880
vamos resolver a um fio aqui.

06:03.880 --> 06:05.870
Mas, portanto, poderíamos dizer que se

06:05.870 --> 06:08.120
trata de uma promessa, que eventualmente irá

06:08.120 --> 06:11.450
render um fio e o fazemos novamente usando nosso tipo genérico.

06:11.450 --> 06:14.030
O tipo principal é a promessa, mas uma promessa

06:14.030 --> 06:16.120
como uma matriz, funciona em conjunto

06:16.120 --> 06:18.380
com outros tipos.

06:18.380 --> 06:22.000
Um array usou outros tipos porque seus dados armazenados nele, dados

06:22.000 --> 06:23.350
de certos tipos e a promessa

06:23.350 --> 06:25.640
funciona junto com outros tipos porque eventualmente

06:25.640 --> 06:31.140
retorna alguns dados de algum tipo e, neste caso, essa é uma promessa que eventualmente retorna uma

06:31.140 --> 06:32.940
cadeia.

06:32.940 --> 06:34.470
Agora novamente, por que isso é útil?

06:34.470 --> 06:37.550
Por que esta informação extra é útil?

06:37.550 --> 06:40.350
Bem, se tivéssemos apenas um tipo de promessa aqui e isso

06:40.350 --> 06:41.430
não seria permitido,

06:41.430 --> 06:44.770
mas se disséssemos promessa de tipo qualquer coisa, o que basicamente

06:44.770 --> 06:46.870
seria o mesmo que de tipos não conheceria tipos

06:46.870 --> 06:48.390
genéricos se não tivesse nenhuma

06:48.390 --> 06:51.280
informação sobre o que recebemos de volta.

06:51.280 --> 06:53.340
Então, nesta promessa, é claro, podemos

06:53.340 --> 06:55.750
usá-las como podemos fazer uma promessa e eventualmente

06:55.750 --> 06:57.770
obteremos alguns dados, mas não sabemos

06:57.770 --> 06:59.770
nada sobre esses dados.

06:59.770 --> 07:02.500
Não posso chamar um método de cordel, por exemplo.

07:02.500 --> 07:04.850
Bem, eu posso porque é qualquer um neste caso, mas não

07:04.850 --> 07:07.590
recebo nenhum tipo de suporte TypeScript em particular.

07:07.590 --> 07:11.313
Eu também poderia experimentar coisas nele, que definitivamente não funcionarão.

07:12.170 --> 07:13.800
Por exemplo, se virarmos isto e devolvermos

07:13.800 --> 07:15.220
um número aqui, eu ainda poderia

07:15.220 --> 07:17.320
chamar um método de string aqui porque o TypeScript

07:17.320 --> 07:19.390
não tem nenhuma informação sobre os dados que

07:19.390 --> 07:22.640
esta promessa eventualmente produzirá.

07:22.640 --> 07:24.070
Agora com tipos genéricos,

07:24.070 --> 07:26.280
nós damos essa informação ao TypeScript.

07:26.280 --> 07:28.160
Podemos dizer ao TypeScript que

07:28.160 --> 07:30.240
esta promessa eventualmente renderá

07:30.240 --> 07:32.840
um fio ou, neste caso, um número e então o TypeScript

07:32.840 --> 07:34.940
pode nos avisar aqui.

07:34.940 --> 07:37.390
Se eu tentar salvar isto, isso nos dará

07:37.390 --> 07:40.870
um erro, pois sabe que esta promessa acabará por render

07:40.870 --> 07:44.092
um número e você pode chamar a divisão sobre isso.

07:44.092 --> 07:48.010
Assim, obtemos melhor segurança de tipo com tipos genéricos.

07:48.010 --> 07:50.510
Portanto, você é realmente flexível com relação ao

07:50.510 --> 07:52.720
que faz com esse tipo genérico de informação.

07:52.720 --> 07:54.830
Uma matriz sabe quais dados armazena,

07:54.830 --> 07:57.140
uma promessa sabe quais dados retorna.

07:57.140 --> 07:59.840
Se você construir suas próprias classes ou funções genéricas,

07:59.840 --> 08:02.140
você pode fazer algo totalmente diferente do que lá.

08:02.140 --> 08:04.570
Mas no final, os tipos genéricos ajudam você

08:04.570 --> 08:06.970
a obter informações adicionais do tipo se você

08:06.970 --> 08:10.640
tiver uma classe mais complexa ou uma função mais complexa que faz

08:10.640 --> 08:14.240
algo com os dados que estão entrando, de uma forma que não se importa

08:14.240 --> 08:16.020
realmente com os dados de um tipo

08:16.020 --> 08:18.700
em particular, mas onde você quer armazenar as informações

08:18.700 --> 08:21.500
do tipo fora dos dados que estão entrando para obter

08:21.500 --> 08:24.850
um melhor suporte TypeScript sempre que você trabalha com

08:24.850 --> 08:27.590
seu tipo genérico.

08:27.590 --> 08:30.450
Portanto, sempre que você trabalha com essa promessa, ou matriz

08:30.450 --> 08:33.270
de dados, essa é basicamente a idéia dos genéricos.

08:33.270 --> 08:36.300
Portanto, tudo isso aqui foi construído em genéricos.

08:36.300 --> 08:37.460
Vamos comentar isso.

08:37.460 --> 08:40.450
Vamos agora construir nossa própria palavra de tipo genérico.

08:40.450 --> 08:42.653
Vamos usar nossos próprios tipos genéricos.
