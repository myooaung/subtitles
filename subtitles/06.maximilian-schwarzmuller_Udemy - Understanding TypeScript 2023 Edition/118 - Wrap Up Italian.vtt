WEBVTT

00:02.273 --> 00:05.100
Istruttore: Abbiamo dato un'occhiata a molti decoratori,

00:05.100 --> 00:06.190
a come si lavora con loro,

00:06.190 --> 00:07.340
a come si possono configurare,

00:07.340 --> 00:09.940
a come si può fare qualcosa con loro, a cosa si può fare

00:09.940 --> 00:11.367
con loro.

00:11.367 --> 00:15.260
Questo spero mostri la complessità ma anche la potenza dei decoratori

00:15.260 --> 00:17.340
e il modo in cui è possibile pensarli

00:17.340 --> 00:18.898
e utilizzarli.

00:18.898 --> 00:22.370
Non solo è possibile creare i propri decoratori, ma

00:22.370 --> 00:24.208
esiste anche un ricco ecosistema

00:24.208 --> 00:28.590
di pacchetti e framework che si basano sui decoratori.

00:28.590 --> 00:30.670
Ad esempio, la classe Validator.

00:30.670 --> 00:32.789
Se si cerca "ts class validator", si trova

00:32.789 --> 00:35.480
un pacchetto che fondamentalmente ha un'implementazione

00:35.480 --> 00:37.960
più elaborata della nostra logica di validazione

00:37.960 --> 00:41.680
personalizzata su cui abbiamo lavorato.

00:41.680 --> 00:44.140
Questo pacchetto può essere aggiunto a qualsiasi progetto

00:44.140 --> 00:45.960
su cui si sta lavorando e poi si può semplicemente

00:45.960 --> 00:48.030
importare un gruppo di decoratori o fabbriche

00:48.030 --> 00:49.930
di decoratori, come si può vedere, dato che

00:49.930 --> 00:51.660
li eseguiamo qui.

00:51.660 --> 00:53.350
Aggiungeteli alle vostre proprietà,

00:53.350 --> 00:55.650
con o senza qualche configurazione extra, a

00:55.650 --> 00:57.530
seconda del validatore che è, e dietro

00:57.530 --> 00:59.163
le quinte questo gestirà un registro,

00:59.163 --> 01:01.530
si potrebbe dire, come un oggetto di configurazione

01:01.530 --> 01:03.509
alla fine, che memorizza la configurazione

01:03.509 --> 01:08.950
del validatore per le diverse proprietà nelle vostre diverse classi.

01:08.950 --> 01:11.810
Poi, fornisce un metodo validate, anch'esso importato

01:11.810 --> 01:14.150
dal pacchetto, che si può eseguire e a cui

01:14.150 --> 01:16.656
passare l'oggetto, per applicare tutta

01:16.656 --> 01:19.020
la logica di validazione impostata nella

01:19.020 --> 01:20.540
classe.

01:20.540 --> 01:22.840
In pratica si tratta di fare quello che abbiamo

01:22.840 --> 01:26.000
appena fatto, solo con più validatori e con tutto il lavoro

01:26.000 --> 01:27.830
pesante fatto per voi.

01:27.830 --> 01:29.170
Ma naturalmente è utile capire

01:29.170 --> 01:30.630
come funziona in generale, visto

01:30.630 --> 01:32.370
che qui lo abbiamo costruito da soli,

01:32.370 --> 01:34.143
in una versione più ingenua.

01:35.010 --> 01:36.490
Oltre a questo pacchetto, ovviamente,

01:36.490 --> 01:38.370
abbiamo anche Angular, per esempio.

01:38.370 --> 01:39.541
Angular è un framework,

01:39.541 --> 01:41.502
di cui ho già parlato in precedenza,

01:41.502 --> 01:43.942
che si basa molto sui decoratori, come

01:43.942 --> 01:46.480
questo decoratore di componenti, che consente

01:46.480 --> 01:49.214
di assegnare del codice HTML dinamico, che

01:49.214 --> 01:51.301
attinge anche alle proprietà delle

01:51.301 --> 01:54.720
classi, con una sintassi speciale aggiunta da Angular,

01:54.720 --> 02:00.170
per poi rendere un contenuto dinamico sullo schermo.

02:00.170 --> 02:01.780
Quindi Angular non si limita a offrire

02:01.780 --> 02:03.360
questi decoratori, ma i decoratori

02:03.360 --> 02:06.250
sono una parte fondamentale di Angular.

02:06.250 --> 02:07.280
Infine, ma non meno

02:07.280 --> 02:10.130
importante, voglio mostrarvi anche NestJS.

02:10.130 --> 02:13.190
NestJS è un framework JavaScript lato server

02:13.190 --> 02:15.487
per Node. js, che utilizza in

02:15.487 --> 02:20.010
modo massiccio il typescript, e anche questo abbraccia i decoratori.

02:20.010 --> 02:23.270
Si usano i decoratori per definire i controllori e

02:23.270 --> 02:26.730
le rotte, i metodi che gli utenti devono usare nelle loro

02:26.730 --> 02:30.400
richieste HTTP, per attivare certe funzioni e anche molti

02:30.400 --> 02:32.687
altri decoratori che si possono usare

02:32.687 --> 02:35.660
per estrarre dati dalle richieste in arrivo e così

02:35.660 --> 02:36.890
via.

02:36.890 --> 02:39.150
Quindi questo framework offre di nuovo tutti

02:39.150 --> 02:41.370
questi decoratori, in modo che possiate

02:41.370 --> 02:44.640
aggiungerli alle vostre proprietà, ai vostri metodi, alle

02:44.640 --> 02:46.257
vostre classi e aggiungere funzionalità

02:46.257 --> 02:48.590
extra, che il framework a sua volta prende

02:48.590 --> 02:50.060
in considerazione quando

02:50.060 --> 02:52.828
esegue il vostro codice.

02:52.828 --> 02:55.417
Quindi, anche in questo caso, i decoratori sono

02:55.417 --> 02:59.070
usati per la metaprogrammazione, per aggiungere una configurazione

02:59.070 --> 03:02.977
extra, una logica extra, che poi viene presa in considerazione, in

03:02.977 --> 03:05.700
questo caso, dal codice del framework, che esegue

03:05.700 --> 03:07.580
il vostro codice o che lavora insieme

03:07.580 --> 03:09.886
al vostro codice.

03:09.886 --> 03:12.000
E questo è tutto per i decoratori.

03:12.000 --> 03:14.110
In questo modo si spera di avere una buona panoramica

03:14.110 --> 03:16.090
di ciò che si può fare con i decoratori, del perché

03:16.090 --> 03:17.830
possono essere molto utili e di come funzionano

03:17.830 --> 03:19.563
in generale.
