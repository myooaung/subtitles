WEBVTT

00:02.090 --> 00:05.740
Erzähler: Und das war's dann mit den Schnittstellen und Klassen.

00:05.740 --> 00:08.190
In diesem Modul haben wir einen detaillierten Blick auf Klassen

00:08.190 --> 00:09.630
geworfen und was wir dort tun können.

00:09.630 --> 00:11.390
Klassen und TypeScript bauen

00:11.390 --> 00:14.130
letztlich nur auf Klassen für JavaScript auf,

00:14.130 --> 00:17.180
und diese habe ich bereits weiter oben in diesem Modul

00:17.180 --> 00:18.720
zusammengefasst.

00:18.720 --> 00:20.710
Schnittstellen sind eine andere Sache.

00:20.710 --> 00:22.600
Sie existieren nur in TypeScript.

00:22.600 --> 00:24.670
Sie sind ein reines TypeScript-Feature,

00:24.670 --> 00:27.390
das Ihnen hilft, klaren, klar strukturierten und sehr

00:27.390 --> 00:29.450
eindeutigen Code zu schreiben.

00:29.450 --> 00:33.010
Mit ihrer Hilfe können Sie erzwingen, dass Klassen bestimmte Eigenschaften

00:33.010 --> 00:36.810
oder Objekte im Allgemeinen eine bestimmte Struktur haben.

00:36.810 --> 00:39.860
Sie können, wie Sie gelernt haben, als Funktionstyp verwendet werden.

00:39.860 --> 00:42.490
Sie erlauben optionale Eigenschaften und

00:42.490 --> 00:45.200
somit auch optionale Methoden, wenn Sie ein

00:45.200 --> 00:48.290
Fragezeichen hinter den Methodennamen setzen.

00:48.290 --> 00:50.190
Das ist also etwas, das Sie nutzen können.

00:50.190 --> 00:53.210
Und wie Sie gerade gesehen haben, wird beim Kompilieren, nachdem

00:53.210 --> 00:55.870
sie ihre Aufgabe erfüllt haben, TypeScript die Überprüfung

00:55.870 --> 00:57.680
Ihres Codes zu ermöglichen, nichts für

00:57.680 --> 01:00.410
diese Schnittstellen ausgelassen.

01:00.410 --> 01:02.300
Der Code wird einfach weggeworfen.

01:02.300 --> 01:05.080
Schnittstellen sind jedoch eine leistungsfähige

01:05.080 --> 01:07.420
Funktion, um Ihren Klassen oder Objekten

01:07.420 --> 01:09.140
eine bestimmte Struktur aufzuzwingen

01:09.140 --> 01:12.400
und Ihre Vorstellung davon, wie ein Objekt aussehen sollte,

01:12.400 --> 01:14.810
klar zu beschreiben.

01:14.810 --> 01:18.650
Wie Sie nun gelernt haben, können Sie diese meist durch benutzerdefinierte

01:18.650 --> 01:21.120
Typen ersetzen, wenn Sie dies möchten.

01:21.120 --> 01:23.580
Sie können auch benutzerdefinierte Typen implementieren,

01:23.580 --> 01:27.700
aber es ist einfach üblicher, dafür eine Schnittstelle zu verwenden, eine Schnittstelle zu

01:27.700 --> 01:30.360
verwenden, wenn Sie ein Objekt beschreiben wollen, als wenn

01:30.360 --> 01:32.180
Sie es implementieren wollen.

01:32.180 --> 01:33.980
Das alles hat historische Gründe, denn

01:33.980 --> 01:36.490
in den früheren Tagen von TypeScript konnten benutzerdefinierte

01:36.490 --> 01:38.980
Typen nicht wie Schnittstellen implementiert oder

01:38.980 --> 01:40.710
verwendet werden.

01:40.710 --> 01:42.610
Jetzt gibt es mehr Flexibilität, aber es ist immer

01:42.610 --> 01:45.150
noch empfehlenswert, sich für Schnittstellen zu entscheiden,

01:45.150 --> 01:46.420
wenn Sie mit Objekten arbeiten

01:46.420 --> 01:48.680
und deren Struktur beschreiben wollen.

01:48.680 --> 01:50.620
Wir werden sie auch in diesem Kurs

01:50.620 --> 01:51.883
immer wieder sehen.
