WEBVTT

00:02.230 --> 00:04.860
Kursleiter: Mit der Idee eines Tupels ist die

00:04.860 --> 00:09.760
Idee verbunden, einige spezifische Bezeichner zu haben, globale Konstanten, mit denen

00:09.760 --> 00:12.710
Sie in Ihrer Anwendung arbeiten, die Sie als Zahlen

00:12.710 --> 00:15.020
darstellen möchten, denen Sie aber eine

00:15.020 --> 00:18.530
für Menschen lesbare Bezeichnung zuweisen möchten.

00:18.530 --> 00:20.500
Und dafür gibt es den Typ Enum.

00:20.500 --> 00:23.800
Auch das gibt es in einigen höheren Programmiersprachen.

00:23.800 --> 00:25.780
JavaScript weiß das allerdings nicht.

00:25.780 --> 00:26.613
Das sieht folgendermaßen aus.

00:26.613 --> 00:28.110
So erstellen Sie eine Aufzählung.

00:28.110 --> 00:30.540
Sie verwenden das enum-Schlüsselwort, das es nur

00:30.540 --> 00:33.060
in der TypeScript-Welt, nicht aber in JavaScript

00:33.060 --> 00:34.840
gibt, und anschließend geschweifte

00:34.840 --> 00:36.810
Klammern und Ihre Bezeichner.

00:36.810 --> 00:39.141
Und dieser Typ, der von TypeScript hinzugefügt

00:39.141 --> 00:42.030
wird, liefert eine Aufzählungsliste.

00:42.030 --> 00:45.070
Diese Bezeichnungen werden also letztlich einfach in Zahlen übersetzt,

00:45.070 --> 00:48.580
die bei Null beginnen, so dass Sie menschenlesbare Bezeichnungen haben, mit denen

00:48.580 --> 00:50.133
Sie in Ihrem Code arbeiten können.

00:51.310 --> 00:53.500
Um Ihnen ein Beispiel zu geben, lassen Sie uns zu unserer

00:53.500 --> 00:55.620
Person mit ihrer Rolle zurückkehren.

00:55.620 --> 00:58.010
Ich kopiere diesen Code und kommentiere ihn dann aus,

00:58.010 --> 00:59.710
weil ich ihn ein wenig ändern werde.

00:59.710 --> 01:01.600
Und hier werde ich diese explizite Typenzuweisung

01:01.600 --> 01:05.380
loswerden und stattdessen zur Inferenz zurückkehren, denn ich werde jetzt

01:05.380 --> 01:07.150
die Rolle wechseln.

01:07.150 --> 01:10.330
Und jetzt sagen wir, wir wollen einen Administrator, einen Autor und vielleicht

01:10.330 --> 01:12.350
einen Nur-Lese-Benutzer haben.

01:12.350 --> 01:14.750
Der Administrator sollte eine ID von Null

01:14.750 --> 01:18.660
haben, der Nur-Lese-Benutzer eine, der Autor eine von zwei.

01:18.660 --> 01:21.160
Jetzt können wir das natürlich genau so mit diesen

01:21.160 --> 01:22.550
Zahlen speichern.

01:22.550 --> 01:24.830
Ein Nachteil ist, dass wir immer eine Zahl hinzufügen

01:24.830 --> 01:26.670
können, für die wir möglicherweise keine

01:26.670 --> 01:30.320
Rolle haben, und wenn wir dann später in unserem Code versuchen, die Rolle zu extrahieren

01:30.320 --> 01:33.392
und die if-Prüfung verwenden, kann dies zu Fehlern führen.

01:33.392 --> 01:37.160
Außerdem ist es für uns als Entwickler schwierig zu verstehen,

01:37.160 --> 01:39.690
welche Rolle dieser Benutzer hat.

01:39.690 --> 01:41.310
War es für den Autor?

01:41.310 --> 01:43.020
Oder war es die Anzeige des Benutzers?

01:43.020 --> 01:46.140
Bei längeren Pausen, bei der Arbeit in größeren

01:46.140 --> 01:48.810
Teams usw. vergisst man das vielleicht.

01:48.810 --> 01:50.540
Als Entwickler möchten

01:50.540 --> 01:54.310
Sie vielleicht von Menschen lesbare Bezeichnungen

01:54.310 --> 01:58.630
wie ADMIN und READ ONLY USER oder ähnliches.

01:58.630 --> 02:00.240
Natürlich könnten wir damit arbeiten,

02:00.240 --> 02:02.880
wir könnten mit solchen String-Werten arbeiten.

02:02.880 --> 02:06.100
Das Problem ist, wenn wir dann später eine if-Prüfung

02:06.100 --> 02:11.100
brauchen, prüfen wir, ob die Rolle der Person gleich ist, war es READ_ONLY_USER?

02:12.260 --> 02:13.500
Oder war es nur ein Wort?

02:13.500 --> 02:15.380
War es mit Unterstrichen?

02:15.380 --> 02:17.440
Wir müssen uns also merken, wie wir diese Zeichenfolgen

02:17.440 --> 02:19.020
geschrieben haben, welchen genauen

02:19.020 --> 02:20.970
Text wir darin haben.

02:20.970 --> 02:24.330
Denn diese Zeichenfolge mit den Bindestrichen zwischen den Wörtern

02:24.330 --> 02:27.430
ist natürlich nicht dasselbe wie diese Zeichenfolge.

02:27.430 --> 02:29.973
Hier würden wir es also nie schaffen, ist

02:31.150 --> 02:36.120
nur zu lesen, wenn man versucht, das zu kompilieren und zu drucken, weil, na

02:36.120 --> 02:39.170
ja, die Prüfung einfach nicht wahr ergibt.

02:39.170 --> 02:42.150
Wir haben das nicht als Rolle auf Person, daher bekommen wir die

02:42.150 --> 02:43.930
Ausgabe hier in der Konsole nicht.

02:43.930 --> 02:47.290
String-Identifikatoren haben also auch ihre Schattenseiten.

02:47.290 --> 02:50.340
Für solche Szenarien ist es in JavaScript durchaus üblich,

02:50.340 --> 02:52.340
globale Konstanten zu definieren.

02:52.340 --> 02:55.580
Zum Beispiel admin, die dann bestimmte Werte wie Zahlen

02:55.580 --> 02:58.053
oder Zeichenketten, beides wie möglich,

02:58.980 --> 03:00.060
enthalten.

03:00.060 --> 03:01.700
Zahlen können uns natürlich zusätzlichen

03:01.700 --> 03:04.370
Code und Bits im Speicher ersparen.

03:04.370 --> 03:09.370
Und dort könnten wir ADMIN, READ_ONLY und AUTHOR haben, und dort

03:09.390 --> 03:10.870
unten müssen wir dann

03:10.870 --> 03:13.750
einfach diese Rolle verwenden.

03:13.750 --> 03:16.460
Das hat den Vorteil, dass wir dies überall in unserem Code verwenden

03:16.460 --> 03:17.343
können.

03:18.230 --> 03:22.600
Wenn ich diesen Code ausführe, ihn kompiliere und dann neu lade,

03:22.600 --> 03:23.680
sehen wir hier als

03:25.260 --> 03:28.570
Admin, dass es funktioniert, und das ist ein gängiges

03:28.570 --> 03:31.520
Muster in JavaScript.

03:31.520 --> 03:34.190
Der Nachteil ist, dass die Rolle jetzt wieder nur eine Zahl

03:34.190 --> 03:37.290
ist, so dass wir dort jede beliebige Zahl speichern könnten, auch

03:37.290 --> 03:39.630
eine Zahl, die wir nicht unterstützen.

03:39.630 --> 03:42.450
Außerdem müssen wir all diese Konstanten definieren,

03:42.450 --> 03:44.060
wir müssen sie verwalten.

03:44.060 --> 03:45.920
Hier kann uns eine Aufzählung Arbeit ersparen.

03:45.920 --> 03:48.730
Das ist völlig in Ordnung, aber eine Aufzählung macht es einfacher.

03:48.730 --> 03:50.970
Wir erstellen ein enum mit dem enum-Schlüsselwort,

03:50.970 --> 03:54.250
wir können es Role nennen, die Konvention ist, mit einem Großbuchstaben

03:54.250 --> 03:55.550
zu beginnen, weil das enum

03:55.550 --> 03:58.620
auch ein benutzerdefinierter Typ ist.

03:58.620 --> 04:01.760
Das ist Ihr erster benutzerdefinierter Typ, wir werden in diesem Kurs noch

04:01.760 --> 04:03.860
viele weitere schreiben, dies ist der erste.

04:03.860 --> 04:06.560
Und dann fügen Sie nach dem Namen des Typs, den Sie dieser Aufzählung

04:06.560 --> 04:09.520
zuordnen wollen, geschweifte Klammern hinzu, einfach so, kein

04:09.520 --> 04:14.040
Doppelpunkt, kein Gleichheitszeichen, nur geschweifte Klammern nach dem Namen.

04:14.040 --> 04:15.800
Dann ein Semikolon.

04:15.800 --> 04:19.433
Hier können Sie nun Ihre Werte wie admin, read

04:20.650 --> 04:21.973
only und author

04:22.950 --> 04:24.300
zuweisen.

04:24.300 --> 04:28.180
Und hinter den Kulissen erhält dies hier die Nummer Null,

04:28.180 --> 04:31.780
dies hier die Nummer Eins, dies hier die Nummer Zwei.

04:31.780 --> 04:34.650
Und dann können Sie hier auf Role zugreifen. ADMIN, wie bei einem

04:34.650 --> 04:37.840
Objekt, greifen Sie auf Ihre Kennung zu.

04:37.840 --> 04:40.380
Hier können wir prüfen, ob die Rolle AUTOR

04:40.380 --> 04:43.890
ist, und dann den Autor ausgeben. Natürlich sollten

04:43.890 --> 04:46.710
wir das nicht sehen, wenn ich das jetzt ausführe,

04:46.710 --> 04:50.630
weil wir hier die Rolle ADMIN zugewiesen haben.

04:50.630 --> 04:53.333
Das Wichtigste ist jedoch, dass wir all dies mit Hilfe

04:53.333 --> 04:57.490
der Aufzählung getan haben, die den Zahlen Bezeichnungen zuweist.

04:57.490 --> 04:59.210
Schauen wir uns das in JavaScript an.

04:59.210 --> 05:02.830
Im kompilierten Code sehen wir also, wie er neu aufgebaut wird.

05:02.830 --> 05:05.080
Am Ende wird es hier mit einem "Wenn" wiederhergestellt.

05:05.080 --> 05:07.940
Also eine Funktion, die sich selbst ausführt.

05:07.940 --> 05:11.770
Und Role wird hier am Ende einfach als Objekt verwaltet, das eine Admin-Eigenschaft

05:11.770 --> 05:14.550
hat, eine Read-Only-Eigenschaft und eine AUTHOR-Eigenschaft,

05:14.550 --> 05:17.330
wo wir dann hier unsere Zahlenwerte speichern, könnte

05:17.330 --> 05:19.970
man sagen.

05:19.970 --> 05:21.960
Es ist also etwas komplexer als das, aber das

05:21.960 --> 05:24.210
ist es, was TypeScript hier letztendlich tut, um

05:24.210 --> 05:26.700
dieses Enum-Konstrukt in JavaScript-Code zu replizieren,

05:26.700 --> 05:28.560
wenn es den Code kompiliert.

05:28.560 --> 05:30.700
Als Entwickler haben wir hier einfach

05:30.700 --> 05:32.680
diese bequem erstellten Zahlen.

05:32.680 --> 05:34.290
Wenn Sie mit dem Mauszeiger darüber fahren,

05:34.290 --> 05:36.520
sehen Sie die Nummer, die wir dort speichern, und Sie können

05:36.520 --> 05:39.883
diese Nummern hier in einer für Menschen lesbaren Form verwenden.

05:40.750 --> 05:42.840
Bei Enums sind Sie auch nicht auf das Standardverhalten

05:42.840 --> 05:44.790
beschränkt.

05:44.790 --> 05:47.470
Angenommen, Sie möchten aus irgendeinem Grund nicht

05:47.470 --> 05:50.533
mit Null als Startzahl beginnen, dann können Sie hier nach Ihrem

05:50.533 --> 05:54.080
Bezeichner ein Gleichheitszeichen einfügen und eine beliebige andere

05:54.080 --> 05:56.610
Zahl eingeben, und jetzt wird admin der Zahl fünf zugewiesen,

05:56.610 --> 05:59.610
und die anderen Bezeichner nach dem Bezeichner, denen Sie

05:59.610 --> 06:02.150
den Wert zuweisen, greifen das auf und erhöhen einfach

06:02.150 --> 06:04.580
diesen Startwert.

06:04.580 --> 06:08.140
Jetzt haben wir also fein, sechs, sieben, statt null, eins, zwei.

06:08.140 --> 06:10.642
Natürlich können Sie all diesen Bezeichnern

06:10.642 --> 06:14.820
auch eigene Werte zuweisen, wenn Sie Ihre eigenen Zahlen benötigen.

06:14.820 --> 06:17.070
Sie sind auch nicht auf Zahlen beschränkt, Sie können

06:17.070 --> 06:19.390
hier auch Text verwenden oder es sogar mischen, wie

06:19.390 --> 06:21.950
ich es hier tue, alles ist möglich, aber oft ist die Standardeinstellung,

06:21.950 --> 06:24.900
dass Zahlen, die bei Null beginnen, inkrementiert werden, das,

06:24.900 --> 06:28.530
was Sie wollen, aber wenn Sie ein anderes Verhalten brauchen, wenn Sie hier eine

06:28.530 --> 06:31.530
Zeichenkette und hier eine Zahl verwenden wollen, und hier auch

06:31.530 --> 06:34.850
eine Zahl oder vielleicht eine Zeichenkette, dann können Sie das auf jeden

06:34.850 --> 06:37.890
Fall tun, der Vorteil ist, dass Sie es dort oben definieren, und danach

06:37.890 --> 06:40.880
beziehen Sie sich immer auf Ihren Rollentyp auf diesen benutzerdefinierten

06:40.880 --> 06:48.270
Typ, den Sie erstellt haben, auf diese benutzerdefinierte Enum, die Sie erstellt haben.

06:48.270 --> 06:50.320
Wenn Sie das in Ihren Wenn-Prüfungen und

06:50.320 --> 06:52.970
Ihren Typenzuweisungen verwenden, ist alles gut.

06:52.970 --> 06:56.090
Das ist die Stärke von enum, und es ist ein großartiges Konstrukt,

06:56.090 --> 06:59.420
wenn Sie Bezeichner benötigen, die für den Menschen lesbar sind

06:59.420 --> 07:03.173
und einen zugeordneten Wert hinter den Kulissen haben.
