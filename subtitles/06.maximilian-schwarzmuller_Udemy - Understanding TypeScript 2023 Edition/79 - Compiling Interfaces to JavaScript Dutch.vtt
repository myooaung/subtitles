WEBVTT

00:02.170 --> 00:03.290
Instructeur: Er is nu veel

00:03.290 --> 00:05.580
gesproken over interfaces en klassen.

00:05.580 --> 00:07.390
Laten we nu eens onder de

00:07.390 --> 00:11.650
motorkap kijken wat JavaScript eigenlijk produceert

00:11.650 --> 00:15.290
of biedt als alternatief voor interface.

00:15.290 --> 00:17.450
We hebben geleerd dat het voor klassecode uiteindelijk

00:17.450 --> 00:20.560
afhangt van de versie waarvoor we compileren.

00:20.560 --> 00:24.280
Als je hier compileert voor es6 in het ts conflict, dan zou onze

00:24.280 --> 00:27.160
uitvoer het klasse sleutelwoord gebruiken.

00:27.160 --> 00:29.330
Aangezien we hier voor es5 hebben gecompileerd,

00:29.330 --> 00:31.880
zien we in plaats daarvan deze workaround met construct

00:31.880 --> 00:33.420
of functies op het einde.

00:33.420 --> 00:36.670
Wat gebeurt er echter voor interfaces?

00:36.670 --> 00:38.720
Nou, laten we eens kijken naar de app. js bestand.

00:38.720 --> 00:41.780
En daar zie je niets.

00:41.780 --> 00:46.360
U ziet geen vertalingen voor onze interfaces.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Je vindt deze dingen nergens in de app. js.

00:52.970 --> 00:55.440
Je vindt onze functie hier, je vindt onze

00:55.440 --> 00:59.180
constructorfunctie voor het persoonsobject, dus eigenlijk

00:59.180 --> 01:02.320
die vertaling voor de persoonsklasse, en de andere

01:02.320 --> 01:03.500
code.

01:03.500 --> 01:06.680
Je vindt geen enkele verwijzing naar een interface.

01:06.680 --> 01:08.240
En daar is een goede reden voor.

01:08.240 --> 01:11.350
Er is geen vertaling voor interfaces.

01:11.350 --> 01:13.650
JavaScript kent deze functie niet.

01:13.650 --> 01:15.550
Het is een pure TypeScript-functie,

01:15.550 --> 01:18.830
alleen beschikbaar tijdens ontwikkeling en compilatie.

01:18.830 --> 01:21.640
Dus je kunt het gebruiken om je code te verbeteren.

01:21.640 --> 01:23.970
Er komt echter geen uitvoer daarvan terecht

01:23.970 --> 01:26.010
in uw JavaScript-bestanden, dus daarom

01:26.010 --> 01:28.390
is het een pure ontwikkelingsfunctie die u

01:28.390 --> 01:30.700
helpt betere code te schrijven, duidelijk

01:30.700 --> 01:34.100
gestructureerde code volgens duidelijke regels.

01:34.100 --> 01:38.720
Bij runtime zijn er geen sporen van deze interfaces.

01:38.720 --> 01:41.760
U ziet niets met betrekking tot de interfaces in uw

01:41.760 --> 01:44.710
code, alleen functies, klassen, en alle andere code

01:44.710 --> 01:47.130
wordt gecompileerd in de uitvoer.

01:47.130 --> 01:50.020
Interfaces worden gewoon gedumpt, zou je kunnen zeggen.

01:50.020 --> 01:53.170
Ze worden gebruikt tijdens het compileren om je code te controleren en daarna

01:53.170 --> 01:54.340
worden ze genegeerd.

01:54.340 --> 01:56.690
Er is niets dat output voor hen zou zijn.
