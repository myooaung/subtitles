WEBVTT

00:02.190 --> 00:03.570
-: Também temos aqui o módulo.

00:03.570 --> 00:06.050
Agora, o módulo é uma opção que eu vou pular por

00:06.050 --> 00:07.540
enquanto, porque realmente

00:07.540 --> 00:10.830
só faz sentido quando aprendemos sobre módulos em TypeScript

00:10.830 --> 00:13.400
e como podemos conectar vários arquivos.

00:13.400 --> 00:15.350
Portanto, vamos ignorar isso por enquanto.

00:15.350 --> 00:17.250
Mas a Lib é interessante.

00:17.250 --> 00:20.890
Lib é uma opção que lhe permite especificar quais

00:20.890 --> 00:25.650
objetos e características padrão o TypeScript conhece.

00:25.650 --> 00:28.580
Com isso quero dizer coisas como trabalhar com a cúpula.

00:28.580 --> 00:31.930
Digamos em índice. html temos um botão e neste botão

00:31.930 --> 00:33.700
dizemos: "Clique em mim". Agora, quando clicamos neste botão, queremos

00:33.700 --> 00:35.100
apenas imprimir a mensagem.

00:35.100 --> 00:36.610
Agora, em anexo. ts, podemos selecionar este botão.

00:36.610 --> 00:39.820
Podemos ter acesso a este

00:39.820 --> 00:41.420
botão com documento. querySelector.

00:43.808 --> 00:44.641
Por exemplo, selecionando o primeiro botão que encontramos.

00:44.641 --> 00:48.130
Agora, se fizermos isso, então isto funciona.

00:48.130 --> 00:51.580
Aqui não recebemos nenhum tipo de erro.

00:51.580 --> 00:53.000
Portanto, se eu for ao meu

00:53.000 --> 00:58.000
botão e adicionar um EventListener aqui, eu recebo um erro porque o TypeScript não sabe

00:58.390 --> 01:00.990
ao certo se encontramos um botão aqui.

01:00.990 --> 01:04.010
Por enquanto, podemos contornar isso com um ponto de

01:04.010 --> 01:07.310
exclamação, depois desta linha e eu voltarei ao que exatamente

01:07.310 --> 01:08.860
isto faz no futuro.

01:08.860 --> 01:11.320
Basicamente diz TypeScript, "Não se

01:11.320 --> 01:13.667
preocupe," tal botão existirá.

01:13.667 --> 01:15.097
"Vamos obter um valor aqui. Portanto, agora podemos adicionar um evento de clique aqui.

01:15.097 --> 01:17.360
E depois encontrar alguma função anônima

01:17.360 --> 01:19.470
talvez onde um console. log clicado.

01:19.470 --> 01:21.670
Agora, o interessante aqui não é tanto que eu tivesse

01:21.670 --> 01:24.920
que acrescentar o ponto de exclamação,

01:24.920 --> 01:26.450
como eu disse que voltaria a isso,

01:26.450 --> 01:29.310
mas que se eu executar tsc isto apenas compila.

01:29.310 --> 01:31.150
Agora, não deveria o TypeScript

01:31.150 --> 01:34.840
reclamar que o documento é desconhecido aqui?

01:34.840 --> 01:38.370
Como sabe que temos um documento desse tipo, constante ou variável

01:38.370 --> 01:39.690
disponível?

01:39.690 --> 01:43.290
Como ele sabe que, mesmo que tenhamos isso disponível,

01:43.290 --> 01:45.610
ele possui um objeto que tem nosso

01:45.610 --> 01:48.350
método querySelector?

01:48.350 --> 01:50.010
Como ele sabe que esse botão é algo que

01:50.010 --> 01:51.690
tem o método addEventListener?

01:51.690 --> 01:55.932
Como o TypeScript sabe tudo isso?

01:55.932 --> 01:57.120
Agora você poderia dizer: "É claro que sabe". Porque em Vanilla JavaScript

01:57.120 --> 01:59.290
este seria um código válido, mas tenha em mente que quando

01:59.290 --> 02:01.430
você escreve código TypeScript, você não necessariamente

02:01.430 --> 02:03.290
o escreve para o navegador.

02:03.290 --> 02:05.580
Você poderia estar escrevendo seu Nodo. aplicação js com TypeScript

02:05.580 --> 02:08.080
e aí, de fato, tudo isso

02:08.080 --> 02:11.310
não funcionaria.

02:11.310 --> 02:13.200
Portanto, a razão pela qual isto

02:13.200 --> 02:14.630
funciona é esta opção de liberdade e, como você

02:14.630 --> 02:18.280
vê, nem sequer está definida aqui, mas se não estiver definida, então alguns padrões são assumidos.

02:18.280 --> 02:21.940
Se não for definido os padrões dependem de seu alvo

02:21.940 --> 02:24.420
JavaScript aqui, e para o es6 ele,

02:24.420 --> 02:28.180
por padrão, inclui todas as características que

02:28.180 --> 02:31.536
estão disponíveis globalmente no es6.

02:31.536 --> 02:33.270
Por exemplo, o objeto do mapa que está disponível em es6.

02:33.270 --> 02:35.940
Portanto, não se queixaria se você usasse o Mapa.

02:35.940 --> 02:40.120
Portanto, assume todas as características do es6 que são

02:40.120 --> 02:45.120
disponibilizadas globalmente em JavaScript, que elas estão disponíveis

02:46.400 --> 02:48.700
também em TypeScript.

02:50.677 --> 02:51.780
E, além disso, assume

02:51.780 --> 02:54.530
que todos os DOM API's estão disponíveis.

02:54.530 --> 02:57.070
Você encontrará as descrições detalhadas sobre todas

02:57.070 --> 03:00.670
estas opções, a propósito, na caixa oficial que estão ligadas na palestra ao

03:00.670 --> 03:01.740
final deste módulo.

03:01.740 --> 03:04.550
Portanto, resumindo, se a opção lib não for definida alguns

03:04.550 --> 03:07.300
padrões são assumidos e estes são tipicamente os padrões

03:07.300 --> 03:09.490
que você precisa para que o TypeScript seja

03:09.490 --> 03:11.520
executado no navegador.

03:11.520 --> 03:13.760
Portanto, todos os DOM API's desapareceram.

03:13.760 --> 03:16.030
Se comentarmos isto e eu agora compilar

03:16.030 --> 03:19.014
tudo, eu definitivamente recebo um erro, porque

03:19.014 --> 03:20.670
agora eles estão comentando

03:20.670 --> 03:24.780
em nós não temos mais as configurações padrão.

03:24.780 --> 03:26.010
Em vez disso, agora dizemos: "Ei, por favor,

03:26.010 --> 03:28.050
inclua "algumas bibliotecas padrão", algumas definições do tipo

03:28.050 --> 03:30.370
padrão que você poderia dizer, que eu lhe darei nesta matriz.

03:30.370 --> 03:32.437
E, como você vê, não estou passando

03:32.437 --> 03:36.330
aqui nenhuma descrição, nenhum caminho, nenhum valor.

03:36.330 --> 03:39.470
E, portanto, o que estou dizendo agora ao TypeScript

03:39.470 --> 03:45.050
é: "Ei, em relação a todos os padrões, você sabe, "por favor leve isto em consideração.

03:45.050 --> 03:45.050
E, você sabe, nada.

03:45.050 --> 03:46.920
Portanto, somente se isso for comentado,

03:46.920 --> 03:50.037
ele funciona, porque então o TypeScript assumirá alguns padrões.

03:50.037 --> 03:51.770
Se eu definir o padrão explicitamente,

03:51.770 --> 03:53.580
bem, então o TypeScript, naturalmente,

03:53.580 --> 03:55.300
adere ao que estou definindo aqui.

03:55.300 --> 03:57.410
E aqui, por exemplo, não conhece documento,

03:57.410 --> 03:59.740
nem sequer conhece o console aqui.

03:59.740 --> 04:01.600
Portanto, queremos definir estes dois

04:01.600 --> 04:02.680
valores mais razoáveis

04:02.680 --> 04:05.410
e, novamente, se você atingir o espaço de controle, e aqui

04:05.410 --> 04:07.343
você obtém a conclusão automática.

04:08.900 --> 04:10.930
Por exemplo, ali poderíamos acrescentar dom.

04:10.930 --> 04:12.360
Esse é um identificador e há alguns identificadores

04:12.360 --> 04:13.800
pré-definidos, que a TypeScript entende, mais uma

04:13.800 --> 04:15.800
vez, você encontrará uma lista completa nos documentos oficiais.

04:15.800 --> 04:18.280
Os documentos para esta opção estão

04:18.280 --> 04:21.070
anexados a esta palestra também.

04:21.070 --> 04:22.840
Portanto, este é um identificador que o

04:22.840 --> 04:26.070
TypeScript entende e é um identificador que basicamente desbloqueia todas

04:26.070 --> 04:27.750
as APIs DOM no TypeScript, para que o TypeScript

04:27.750 --> 04:30.100
entenda o que você está fazendo aqui.

04:30.100 --> 04:32.680
Portanto, agora, você já vê que ele conhece console,

04:32.680 --> 04:35.150
conhece documento, e assim por diante.

04:35.150 --> 04:37.040
Portanto, agora que estamos trabalhando

04:37.040 --> 04:40.100
com o Next-Gen JavaScript, devemos também adicionar a opção

04:40.100 --> 04:42.550
es6, para que o TypeScript também entenda todas

04:42.550 --> 04:45.400
as opções es6 disponíveis globalmente.

04:45.400 --> 04:50.830
E também é uma boa idéia acrescentar dom. iterável e scripthost.

04:50.830 --> 04:54.130
Com isso aqui nós desbloqueamos todos os recursos centrais do JavaScript que

04:54.130 --> 04:56.540
você gostaria de trabalhar e esta, a propósito, é a configuração

04:56.540 --> 05:00.620
padrão exata que você obtém quando você define o

05:00.620 --> 05:02.530
alvo para es6, de qualquer forma.

05:02.530 --> 05:05.250
Portanto, se você comentar e configurar assim, você tem

05:05.250 --> 05:07.360
exatamente o mesmo comportamento como se

05:07.360 --> 05:09.980
não especificasse a liberdade de forma alguma.

05:09.980 --> 05:13.550
Agora, aqui comentarei que no entanto, e com

05:13.550 --> 05:15.860
isso, isto se compilará.

05:15.860 --> 05:17.959
Mais uma vez, porém, a configuração é um

05:17.959 --> 05:20.920
pouco redundante, apenas para explicar o que ela faz.
