WEBVTT

00:02.370 --> 00:05.290
Narrator: Tak więc, teraz, gdy jesteśmy w stanie pobrać dane

00:05.290 --> 00:08.630
wejściowe użytkownika i wszystkie zatwierdzone za pomocą naszego

00:08.630 --> 00:11.420
TypeScript, napędzana logika walidacji tutaj.

00:11.420 --> 00:13.810
Przejdźmy dalej i upewnijmy się, że zrobimy

00:13.810 --> 00:17.400
coś więcej z tym zebranym wejściem użytkownika niż tylko wypisanie

00:17.400 --> 00:18.420
go w konsoli.

00:18.420 --> 00:19.450
Bo w tej chwili jest

00:19.450 --> 00:21.330
oczywiście to, co robimy, prawda.

00:21.330 --> 00:24.670
W końcu drukuję tylko rzeczy deed informacje, które

00:24.670 --> 00:26.030
zebraliśmy, aby zrobić

00:26.030 --> 00:30.300
konsolę, a to nie jest nasz ostateczny cel w tej aplikacji.

00:30.300 --> 00:34.290
Zamiast tego, celem jest, powinno być, że my również renderowaliśmy

00:34.290 --> 00:37.770
tę listę projektów tutaj w oparciu o ten szablon, gdzie każda

00:37.770 --> 00:41.550
pozycja projektu jest oparta na tym szablonie tutaj.

00:41.550 --> 00:45.750
I wychodzimy z informacjami, które tu zgromadziliśmy.

00:45.750 --> 00:48.520
Więc to będzie następna rzecz, nad którą chcę pracować.

00:48.520 --> 00:52.970
Oprócz posiadania tutaj naszej klauzuli wejściowej projektu, która jest odpowiedzialna

00:52.970 --> 00:55.440
za renderowanie forum i zbieranie danych wejściowych

00:55.440 --> 00:57.350
użytkownika, chcę mieć klauzulę

00:57.350 --> 00:59.410
liczby, która jest odpowiedzialna

00:59.410 --> 01:03.230
za renderowanie listy projektów.

01:03.230 --> 01:06.100
I właściwie podzielimy to na dwie klauzule.

01:06.100 --> 01:07.650
Jedna klauzula dla listy

01:07.650 --> 01:11.000
i jedna klasa na pozycję projektu w liście.

01:11.000 --> 01:14.970
A następnie musimy znaleźć jakiś sposób na przekazanie tego zebranego

01:14.970 --> 01:18.500
wejścia tutaj w zasadzie do naszej listy projektów i dodać

01:18.500 --> 01:20.650
do niej nowy element.

01:20.650 --> 01:23.420
Więc zajmijmy się tym krok po kroku, powiedziałbym,

01:23.420 --> 01:26.880
i zacznijmy od dodania klasy listy projektów.

01:26.880 --> 01:29.380
Teraz w miejscu, gdzie dokładnie dodałeś, to już zależy od Ciebie.

01:29.380 --> 01:32.900
Kolejność nie ma znaczenia, ponieważ skrypt Java na końcu

01:32.900 --> 01:36.430
będzie parsował cały ten plik w całości, zanim go wykona.

01:36.430 --> 01:38.860
Będzie więc świadomy wszystkich klas.

01:38.860 --> 01:41.990
Mimo to dodam go tutaj ponad klauzulą wejściową projektu, ponieważ

01:41.990 --> 01:45.740
w pewnym sensie polegałbym na klauzuli listy projektów, którą zaraz zbuduję

01:45.740 --> 01:48.810
wewnątrz klasy wejściowej projektu, ale znowu ma to naprawdę

01:48.810 --> 01:50.500
znaczenie.

01:50.500 --> 01:55.500
Czyli tutaj będę miał swoją klauzulę project list, lista projektów, a idea

01:55.600 --> 01:59.230
tej klauzuli tutaj jest trochę związana z tym, co robiliśmy

01:59.230 --> 02:01.170
w project input.

02:01.170 --> 02:04.300
Chcę dotrzeć do mojego szablonu tutaj, a następnie wyrenderować

02:04.300 --> 02:06.930
go w określonym miejscu poza aplikacją.

02:06.930 --> 02:09.480
I dlatego, co możemy tutaj zrobić, to ponownie

02:09.480 --> 02:13.120
dodać konstruktor, możemy dodać pola, których potrzebujemy

02:13.120 --> 02:15.310
i będzie potrzebny element szablonu

02:15.310 --> 02:17.030
i element hosta na końcu,

02:17.030 --> 02:22.030
więc możemy dodać oba do naszej listy projektów.

02:22.440 --> 02:25.190
Będziemy też potrzebowali samego elementu,

02:25.190 --> 02:29.640
powiedziałbym tak konkretnego elementu, który się renderuje.

02:29.640 --> 02:31.800
A typy będą jednak różne.

02:31.800 --> 02:34.580
Element hosta nadal będzie divem, ponieważ

02:34.580 --> 02:38.330
chcę wyrenderować tę listę w tym divie również tutaj.

02:38.330 --> 02:40.970
Ale konkretny element, który oddajemy.

02:40.970 --> 02:43.960
Oczywiście nie jest to element formularza, ale jeśli spojrzymy

02:43.960 --> 02:46.180
na nasz szablon listy, zobaczymy, że wewnątrz

02:46.180 --> 02:48.520
niego znajduje się sekcja.

02:48.520 --> 02:51.010
Mamy więc element sekcji.

02:51.010 --> 02:54.420
Teraz okazuje się, że nie ma elementu i tych elementów sekcji, więc

02:54.420 --> 02:57.040
będziemy mieli po prostu zwykły element HTML, ponieważ

02:57.040 --> 03:00.490
każdy element ma ten typ tutaj dla jakiegoś podatku.

03:00.490 --> 03:03.060
Istnieją bardziej wyspecjalizowane typy,

03:03.060 --> 03:05.710
jeśli są, a my możemy po prostu użyć typu HTML.

03:05.710 --> 03:10.710
Więc teraz oczywiście musimy uzyskać dostęp do tych elementów.

03:10.970 --> 03:15.600
Więc możemy skopiować ten kod tutaj faktycznie z konstruktora

03:15.600 --> 03:20.250
wejścia projektu dodanego do konstruktora listy projektów

03:20.250 --> 03:22.260
i teraz dostosować niektóre

03:22.260 --> 03:24.730
rzeczy.

03:24.730 --> 03:27.630
Na przykład mój element szablonowy oczywiście teraz nie

03:27.630 --> 03:29.420
ma pojęcia o wejściu do projektu.

03:29.420 --> 03:32.150
To jest teraz lista projektów zamiast.

03:32.150 --> 03:36.660
Więc skopiujmy to i użyjmy tego tutaj, aby wybrać element.

03:36.660 --> 03:39.760
Nadal będę kosztować i nadal wiem z całą pewnością,

03:39.760 --> 03:42.710
że dostanę, więc dis się nie zmienia.

03:42.710 --> 03:45.520
Elementy hosta wciąż są do śmierci z aplikacją ID.

03:45.520 --> 03:47.820
Więc to się nie zmienia.

03:47.820 --> 03:52.070
Następnie importuję swoją zawartość, a potem ja, no cóż, sklep,

03:52.070 --> 03:53.530
pierwszy element.

03:53.530 --> 03:55.380
Poza importem, szablon.

03:55.380 --> 03:57.780
Więc zasadniczo pierwszy element w szablonie,

03:57.780 --> 04:01.590
który jest sekcją, zapisałem to we właściwości elementu tutaj.

04:01.590 --> 04:04.430
Nie jest to jednak element formularza HTML.

04:04.430 --> 04:07.210
Jest to po prostu element HTML w tym miejscu.

04:07.210 --> 04:11.710
Teraz możemy też przypisać tutaj ID i faktycznie tak było, powinno być dynamiczne,

04:11.710 --> 04:15.380
a nie hard-coded, bo będziemy mieli więcej niż jedną listę

04:15.380 --> 04:16.970
projektów.

04:16.970 --> 04:21.220
Chcę mieć listy narzędzi w aplikacji końcowej, jeden dla

04:21.220 --> 04:25.060
aktu projektów i jeden dla enact projektów, i oferują,

04:25.060 --> 04:29.895
chcę uzyskać dodatkowe informacje do konstruktora.

04:29.895 --> 04:35.703
Typ projektu, a ja będę używał statsów, skrót TypeScript.

04:35.703 --> 04:39.250
Dowiadujesz się, gdzie możesz dodać accessor przed parametrem,

04:39.250 --> 04:44.170
private lub public, aby automatycznie utworzyć właściwość o tej samej nazwie

04:44.170 --> 04:48.060
i przechowywać wartość, która jest przekazywana an na ten argument

04:48.060 --> 04:51.730
w tej równie nazwanej właściwości.

04:51.730 --> 04:55.040
Więc teraz ta klasa będzie miała również nazwę właściwości do typu.

04:55.040 --> 04:57.910
I teraz pytanie, jaki jest typ tego parametru

04:57.910 --> 04:58.790
typu?

04:58.790 --> 05:03.640
I to właściwie powinno być typem literalnym i typem związkowym.

05:03.640 --> 05:07.270
Jest albo aktywny, albo zakończony.

05:07.270 --> 05:11.050
Mamy nawet aktywne projekty lub zakończone projekty.

05:11.050 --> 05:14.270
Więc to jest argument, który spodziewam się uzyskać, gdy lista

05:14.270 --> 05:16.080
projektów jest instancjonowana.

05:16.080 --> 05:20.440
A z tatą musimy wpisać własność D ID powinien być wtedy

05:20.440 --> 05:21.870
oparty na tym.

05:21.870 --> 05:25.090
Powinno być, a dla taty używam szablonu dosłownego tutaj.

05:25.090 --> 05:30.090
Powinno być typu dash projects, więc albo aktywne dash projects, albo

05:31.240 --> 05:33.640
zakończone dash projects.

05:33.640 --> 05:35.070
To jest mój pomysł tutaj.

05:35.070 --> 05:37.540
Zawsze możesz użyć tego typu kropki, aby TypeScript

05:37.540 --> 05:40.380
zrozumiał, że używamy tej właściwości i że nie jest

05:40.380 --> 05:41.890
ona nieużywana.

05:41.890 --> 05:46.200
Tak więc dzięki temu uzyskujemy dostęp do wszystkich podstawowych elementów

05:46.200 --> 05:49.660
i dodajemy do sekcji identyfikator, który wydobywamy z naszego

05:49.660 --> 05:50.790
szablonu.

05:50.790 --> 05:53.650
Teraz, oczywiście, chcemy a, chcemy renderować to dobrze?

05:53.650 --> 05:58.600
To jest pomysł na to wszystko, znowu przy prywatnej metodzie.

05:58.600 --> 06:00.540
Dopisać sprawiedliwość.

06:00.540 --> 06:05.310
Mieliśmy to w wejściu do projektu i tam jest teraz kolejka

06:05.310 --> 06:06.310
celów.

06:06.310 --> 06:11.300
Cóż, dołącz to do Domu, aby teraz renderować listę

06:11.300 --> 06:12.750
taty do Domu.

06:12.750 --> 06:16.610
Więc zamiast załączać, właściwie zrobię to samo, co zrobiłem

06:16.610 --> 06:19.223
załącznik dla formularza projektu.

06:20.070 --> 06:24.230
Więc możemy skopiować tę linię tutaj i dołączyć posta.

06:24.230 --> 06:27.040
Mam swój element hosta i chcę wstawić element

06:27.040 --> 06:28.420
sąsiedni.

06:28.420 --> 06:30.240
Po początku i to powinien być ten element.

06:30.240 --> 06:33.300
Wyciągamy to z szablonu tutaj.

06:33.300 --> 06:36.990
Jednak w rzeczywistości nie chcę tego robić po początku,

06:36.990 --> 06:41.960
ale zamiast tego przed końcem, czyli przed zamknięciem, tack off element

06:41.960 --> 06:45.870
hosta, a następnie możemy wywołać attach tutaj w konstruktorze,

06:45.870 --> 06:49.940
oczywiście, aby dołączyć nasz utworzony element tutaj do

06:49.940 --> 06:51.763
Domu.

06:53.880 --> 06:56.370
Teraz jest jedna ważna różnica w porównaniu

06:56.370 --> 06:59.630
z wejściem projektu choć dla tej listy.

06:59.630 --> 07:03.220
Nie robi się tego z samym dodaniem listy do Dom.

07:03.220 --> 07:05.270
Wkład był skończony, prawda?

07:05.270 --> 07:07.130
Forma w tym miejscu była skończona.

07:07.130 --> 07:08.720
Mieliśmy tam wszystkie dane wejściowe.

07:08.720 --> 07:12.420
Jedyne co musieliśmy zrobić, to skonfigurować słuchacza zdarzeń.

07:12.420 --> 07:15.840
Teraz do listy tutaj, faktycznie nie mieliśmy jej

07:15.840 --> 07:16.673
z pustym.

07:16.673 --> 07:21.130
H to tech, na przykład, i chcę tam dodać kilka tekstów.

07:21.130 --> 07:22.990
Więc dodam numer.

07:22.990 --> 07:26.020
Nowa metoda do twojej prywatnej metody.

07:26.020 --> 07:29.120
Render lub content mógłby być pasującą nazwą.

07:29.120 --> 07:34.120
A moim pomysłem jest tutaj wypełnienie pustych miejsc w tym szablonie

07:34.230 --> 07:36.862
jakimś rokiem życia.

07:36.862 --> 07:37.780
Na to.

07:37.780 --> 07:40.040
Przejdźmy do martwej metody renderowania treści, a tam

07:40.040 --> 07:41.580
jest kilka rzeczy, które chcę zrobić.

07:41.580 --> 07:45.390
Jedna rzecz to stat dla martwej listy nieuporządkowanej, która jest częścią

07:45.390 --> 07:47.200
mojej listy projektów tutaj.

07:47.200 --> 07:48.640
Chcę dodać do niego identyfikator.

07:48.640 --> 07:50.860
Oczywiście nie musisz tego robić, ale chcę to zrobić,

07:50.860 --> 07:53.500
aby jeśli potrzebujemy go wybrać później, możemy to zrobić

07:53.500 --> 07:54.390
z tymi.

07:54.390 --> 07:58.220
Więc stworzę ID listy tutaj jest przechowywany w stałej,

07:58.220 --> 08:00.190
a to będzie literał szablonu,

08:00.190 --> 08:04.100
więc będzie to ciąg, w którym możemy wstrzyknąć dynamiczną

08:04.100 --> 08:09.100
treść, i chcę to oprzeć na typie otaczającej listy projektów, więc poza

08:09.370 --> 08:14.370
otaczającą sekcją, a następnie dodać listę projektów po niej.

08:15.220 --> 08:19.700
Teraz możemy sięgnąć do listy an order, którą otrzymujemy w naszym elemencie,

08:19.700 --> 08:23.820
czyli stat section year, right element is dead section.

08:23.820 --> 08:27.360
Aby więc uzyskać nieuporządkowaną listę w środku, możemy na przykład

08:27.360 --> 08:30.940
użyć selektora zapytania i wyszukać pierwszą, a w tym przypadku jedyną

08:30.940 --> 08:33.120
nieuporządkowaną listę.

08:33.120 --> 08:35.720
Wiemy, że dostaniemy jeden, bo wiemy, że będzie jeden, a następnie

08:35.720 --> 08:38.280
możemy dodać tutaj ID, które powinno być ID listy.

08:38.280 --> 08:40.280
To jedna rzecz, którą chcę zrobić.

08:40.280 --> 08:44.970
Chcę również ustawić zawartość tekstową poza tym wiekiem na tag

08:44.970 --> 08:50.200
tutaj i w tym celu możemy sięgnąć do tego elementu, query selector.

08:50.200 --> 08:53.020
Znajdź pierwszy i jedyny tag HQ.

08:53.020 --> 08:56.340
Wiemy, że taki znajdziemy, stąd wykrzyknik,

08:56.340 --> 09:01.340
aby wykluczyć martwy przypadek null i ustawić zawartość tekstu równą

09:02.940 --> 09:05.610
temu, aby wpisać na duże litery.

09:05.610 --> 09:08.130
Pamiętaj, że typ jest wiecznie aktywny.

09:08.130 --> 09:10.060
Skończyło się na dwóch przypadkach operowych.

09:10.060 --> 09:15.060
Zamieniamy to na all caps plus projekty, tak samo jest ze Stenem.

09:16.200 --> 09:19.853
Po prostu nagłówek do przodu to sekcja.

09:21.970 --> 09:25.220
I teraz z tym jesteśmy, generalnie skończyliśmy.

09:25.220 --> 09:27.580
Nie mamy jeszcze żadnych pozycji na tej liście.

09:27.580 --> 09:30.230
Później będziemy nad tym pracować, ale generalnie mamy to już za sobą.

09:30.230 --> 09:35.120
Możemy wywołać ten render a content lub po tym, jak dołączyliśmy

09:35.120 --> 09:37.210
go do Dom, np.

09:37.210 --> 09:39.210
Teraz miło byłoby zobaczyć te w akcji.

09:39.210 --> 09:42.600
Oczywiście znowu zabraknie elementów listy zakończonych

09:42.600 --> 09:45.523
na, ale miło by było zobaczyć coś w działaniu tutaj.

09:46.690 --> 09:49.620
Cóż, w tym celu przejdźmy do dolnej części pliku,

09:49.620 --> 09:53.310
gdzie instancjonujemy wejście projektu i tam nie zawsze możemy

09:53.310 --> 09:55.200
zainicjować nasze listy.

09:55.200 --> 09:59.200
Mamy aktywną listę projektów, którą instancjonujemy, ale wywołując

09:59.200 --> 10:01.230
nową listę projektów.

10:01.230 --> 10:04.220
I tam musimy przekazać ten argument typu, który jest tutaj

10:04.220 --> 10:06.040
aktywny albo zakończony.

10:06.040 --> 10:08.610
Skoro renderuję listę aktywną, to oczywiście

10:08.610 --> 10:09.950
zaliczam nieaktywną.

10:09.950 --> 10:13.140
A potem mamy tu listę projektów skończonych, gdzie oczywiście

10:13.140 --> 10:15.290
przekazuję skończone.

10:15.290 --> 10:18.673
Jeśli teraz bezpiecznie, że powinien skompilować bez błędów.

10:19.520 --> 10:23.090
I stąd to, co powinieneś zobaczyć, jeśli wrócisz, to

10:23.090 --> 10:27.770
te dwie puste sekcje tutaj z nagłówkami tutaj i dobrze, puste miejsce,

10:27.770 --> 10:32.460
w którym później elementy zostaną dodane, elementy projektu zostaną

10:32.460 --> 10:33.390
dodane.

10:33.390 --> 10:37.440
Teraz na razie nie mamy takich pozycji projektowych, śniegu.

10:37.440 --> 10:39.710
Więc jako następny krok, powinniśmy

10:39.710 --> 10:43.660
pracować nad jakimś sposobem, aby upewnić się, że

10:43.660 --> 10:49.420
kiedy klikamy dodaj projekt, że tworzymy nowy projekt w kodzie.

10:49.420 --> 10:53.730
Więc nowa struktura danych, która reprezentuje projekt, i

10:53.730 --> 10:58.047
że następnie przekazujemy tę informację o tym nowym projekcie

10:58.047 --> 10:59.870
do aktu projektów.

10:59.870 --> 11:03.850
Wymień tutaj do tej sekcji aktywny projekt, ponieważ każdy nowy

11:03.850 --> 11:06.500
projekt powinien być domyślnie aktywny.

11:06.500 --> 11:09.390
To będzie nasz kolejny cel i znów będzie wiele

11:09.390 --> 11:12.080
różnych sposobów na jego realizację.

11:12.080 --> 11:15.870
Zrobimy to razem z jednym sposobem, który wymyśliłem w następnym

11:15.870 --> 11:16.703
wykładzie.
