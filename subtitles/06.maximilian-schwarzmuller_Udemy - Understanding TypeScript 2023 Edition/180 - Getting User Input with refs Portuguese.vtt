WEBVTT

00:02.240 --> 00:04.870
Apresentador: Assim, temos nosso primeiro componente adicionado.

00:04.870 --> 00:06.090
Vamos acrescentar um segundo.

00:06.090 --> 00:09.970
NewTodo. tsx é um nome de arquivo.

00:09.970 --> 00:13.060
Lá, é claro, nós importamos a reação da reação.

00:13.060 --> 00:16.170
E você também poderia, é claro, construir componentes baseados em classes.

00:16.170 --> 00:18.270
Isto também é totalmente suportado,

00:18.270 --> 00:22.410
mas vou usar este estilo moderno de componentes funcionais apenas.

00:22.410 --> 00:24.070
Portanto, aqui novamente temos uma função

00:24.070 --> 00:26.180
que irá compor nosso componente mais tarde.

00:26.180 --> 00:29.258
E eu exportador NewTodo como meu padrão e vamos adicionar

00:29.258 --> 00:31.260
uma atribuição de tipo e vamos deixar

00:31.260 --> 00:33.021
claro que este será um componente

00:33.021 --> 00:34.410
de função de tipo.

00:34.410 --> 00:35.800
E, portanto, é claro que nos

00:35.800 --> 00:38.220
falta aqui algum código jsx devolvido.

00:38.220 --> 00:39.730
Portanto, aqui vou devolver um formulário

00:39.730 --> 00:42.030
onde quero adicionar todos os controles necessários para que

00:42.030 --> 00:43.780
o usuário possa adicionar novos todos.

00:45.060 --> 00:48.650
Agora vamos adicionar este novo componente todo no componente app.

00:48.650 --> 00:53.650
Portanto, aqui podemos importar NewTodo de . /componentes/NewTodo e simplesmente

00:55.130 --> 00:58.095
adicioná-lo aqui ao invés do comentário.

00:58.095 --> 01:00.520
NewTodo como um componente de auto-fechamento,

01:00.520 --> 01:02.790
porque neste momento não estamos passando

01:02.790 --> 01:04.750
nada entre as etiquetas de abertura e

01:04.750 --> 01:07.784
fechamento e também não temos nenhum aderente aqui, pelo

01:07.784 --> 01:09.263
menos no momento.

01:10.140 --> 01:11.540
Assim, em vez deste componente,

01:11.540 --> 01:13.330
podemos agora adicionar uma entrada

01:13.330 --> 01:16.190
e também, posteriormente, um botão.

01:16.190 --> 01:18.117
Portanto, acrescente aqui um

01:18.117 --> 01:20.020
div no qual eu quero ter um rótulo

01:20.020 --> 01:24.880
com htmlPara atributos a apontar para, digamos, "todo-texto".

01:24.880 --> 01:26.560
Tudo isso é apenas uma marcação

01:26.560 --> 01:31.250
aqui, onde eu digo "Todo o texto" e depois digito o elemento de entrada do tipo

01:31.250 --> 01:35.170
texto com uma identificação de "todo o texto", para que a etiqueta

01:35.170 --> 01:36.900
e a entrada sejam conectadas

01:36.900 --> 01:39.640
semanticamente de forma correta.

01:39.640 --> 01:41.440
E abaixo desse div aqui, em vez do formulário

01:41.440 --> 01:43.120
eu acrescentarei um botão onde eu

01:43.120 --> 01:44.437
digo, "ADD TODO", E esse botão

01:45.297 --> 01:47.970
deve ser do tipo submeter para que ele, bem, submeta

01:47.970 --> 01:49.670
o formulário.

01:49.670 --> 01:51.900
Esta é agora uma forma muito básica que podemos usar para

01:51.900 --> 01:53.143
adicionar um novo Todo.

01:54.580 --> 01:57.060
Agora, vamos nos certificar de que isto funcione

01:57.060 --> 01:59.660
e para isto temos realmente algumas etapas diferentes

01:59.660 --> 02:01.820
que precisamos aplicar.

02:01.820 --> 02:05.020
Precisamos obter o que quer que o usuário tenha entrado aqui

02:05.020 --> 02:08.550
e então precisamos encaminhar o que o usuário entra aqui para o componente

02:08.550 --> 02:09.810
do aplicativo, porque

02:09.810 --> 02:13.330
é lá que iremos gerenciar todos nós mais tarde.

02:13.330 --> 02:16.150
Portanto, antes de mais nada, vamos reagir talvez para a submissão de formulários.

02:16.150 --> 02:18.050
Podemos acrescentar uma nova função,

02:18.050 --> 02:20.300
portanto, uma função no componente funcional,

02:20.300 --> 02:22.720
mas essa será agora uma função regular, que

02:22.720 --> 02:27.720
nomearemos, "todoSubmitsHandler", qualquer nome que você queira.

02:28.210 --> 02:29.990
Esta é uma função que deve ser acionada sempre

02:29.990 --> 02:31.860
que este formulário for apresentado.

02:31.860 --> 02:35.571
Portanto, podemos vinculá-lo ao adereço onSubmitsHandler aqui no

02:35.571 --> 02:38.770
final, todoSubmitsHandler, não o execute, apenas aponte

02:38.770 --> 02:40.900
para ele, para que ele seja executado por

02:40.900 --> 02:43.810
nós sempre que este formulário for apresentado.

02:43.810 --> 02:46.270
Agora aqui temos um objeto de evento e o objeto

02:46.270 --> 02:49.507
de evento é do tipo reação. FormEvent.

02:51.290 --> 02:54.010
Agora lá eu quero chamar o evento para evitar

02:54.010 --> 02:55.780
esse padrão, que é enviar um pedido

02:55.780 --> 02:59.280
real para o servidor que serve este aplicativo.

02:59.280 --> 03:01.520
É claro que não é quando eu quero que isso aconteça.

03:01.520 --> 03:04.680
Quero tratar este pedido apenas aqui em JavaScript

03:04.680 --> 03:08.350
e, portanto, este padrão de navegador tem que ser evitado.

03:08.350 --> 03:09.770
Agora com isso impedido, podemos

03:09.770 --> 03:12.610
obter o que quer que o usuário tenha entrado na entrada e

03:12.610 --> 03:15.250
para isso temos duas maneiras diferentes.

03:15.250 --> 03:18.310
Podemos gerenciar o estado da entrada aqui, de

03:18.310 --> 03:20.970
duas maneiras, ou usar um ref, uma referência,

03:20.970 --> 03:23.170
para extrair o que o usuário entrou

03:23.170 --> 03:26.520
aqui quando o formulário é submetido.

03:26.520 --> 03:28.410
Irei para esta última abordagem porque

03:28.410 --> 03:30.420
veremos a gestão estatal em ação no componente

03:30.420 --> 03:33.470
de aplicação em um segundo de qualquer forma.

03:33.470 --> 03:37.340
Para configurar tal árbitro, importamos o gancho UseRef da

03:37.340 --> 03:40.580
reação, e os ganchos são funções especiais que você

03:40.580 --> 03:44.010
pode executar e funcionar componentes para adicionar

03:44.010 --> 03:45.290
certas funcionalidades

03:45.290 --> 03:48.101
ao componente e quando executamos o UseRef

03:48.101 --> 03:51.190
aqui, o que recebemos de volta é um objeto Ref, que

03:51.190 --> 03:53.730
podemos armazenar em uma constante e eu

03:53.730 --> 03:57.310
o nomearei, "textInputRef" na verdade.

03:57.310 --> 04:00.176
E podemos, por exemplo, usar tal referência para

04:00.176 --> 04:04.980
atribuí-la a um elemento dom e depois interagir com esse elemento dom de dentro de nosso

04:04.980 --> 04:06.500
código aqui em cima.

04:06.500 --> 04:08.800
Assim, por exemplo, quando esse formulário é apresentado.

04:09.680 --> 04:11.510
Estabelecemos tal conexão adicionando

04:11.510 --> 04:14.020
o suporte especial Ref a qualquer elemento

04:14.020 --> 04:16.580
html de sua escolha e apontando para aquele

04:16.580 --> 04:19.150
objeto que criamos aqui.

04:19.150 --> 04:21.530
Portanto, adicione textInputRef.

04:21.530 --> 04:23.540
Isto cria uma conexão aqui.

04:23.540 --> 04:27.380
No entanto, você já vê novamente que o TypeScript não gosta disso.

04:27.380 --> 04:30.110
Porque o uso do RefRef acaba sendo

04:30.110 --> 04:33.250
também uma função genérica.

04:33.250 --> 04:35.270
Agora, que tipo poderíamos passar para ele.

04:35.270 --> 04:37.340
O que seria interessante saber aqui?

04:37.340 --> 04:39.200
Bem, seria interessante saber que

04:39.200 --> 04:42.030
tipo de dados serão armazenados dentro do gráfico

04:42.030 --> 04:43.970
e como você aponta para o elemento de

04:43.970 --> 04:47.880
entrada, teremos um elemento de entrada em html armazenado ali.

04:47.880 --> 04:50.420
Agora todos nós teríamos que fornecer um valor padrão para

04:50.420 --> 04:51.840
o Ref quando ele estiver sendo configurado

04:51.840 --> 04:53.190
e lá nós forneceremos nulo, porque

04:53.190 --> 04:54.710
quando o componente for renderizado

04:54.710 --> 04:56.360
pela primeira vez, quando este código

04:56.360 --> 04:57.380
for executado, é claro que

04:57.380 --> 04:59.460
isto não foi renderizado lá embaixo, então isto

04:59.460 --> 05:01.590
não vai apontar para nada.

05:01.590 --> 05:03.350
Uma vez que isto tenha sido feito, entretanto,

05:03.350 --> 05:04.950
a conexão será estabelecida e então

05:04.950 --> 05:07.040
esta Ref funcionará.

05:07.040 --> 05:09.453
E agora aqui, no todoSubmitHandler, podemos

05:10.342 --> 05:15.342
obter o texto inserido usando o textInputRef. atual, isso é sempre algo que você

05:15.500 --> 05:17.973
precisa entrar quando trabalha

05:17.973 --> 05:21.440
com um árbitro, . valor, claro, aqui porque

05:21.440 --> 05:24.530
trabalhamos com o elemento de entrada html.

05:24.530 --> 05:27.940
No entanto, aqui o problema é que isto poderia ser nulo.

05:27.940 --> 05:29.630
É um problema que já conhecemos, tivemos

05:29.630 --> 05:31.790
isso também no início do curso quando selecionamos

05:31.790 --> 05:33.370
algo em um Dom e o temos aqui também,

05:33.370 --> 05:34.630
porque o TypeScript não pode

05:34.630 --> 05:38.800
saber com certeza que esta conexão está estabelecida.

05:38.800 --> 05:40.580
Nós o sabemos, nós escrevemos o código,

05:40.580 --> 05:43.050
mas o TypeScript infelizmente não entende que nós

05:43.050 --> 05:45.300
estabelecemos uma conexão lá embaixo.

05:46.310 --> 05:48.920
Então, para corrigir isto, podemos acrescentar aqui um ponto

05:48.920 --> 05:51.350
de exclamação, para dizer novamente ao TypeScript que

05:51.350 --> 05:54.350
isto será bom, que isto será ajustado, e que estamos bem.

05:54.350 --> 05:56.130
A propósito, o TypeScript está correto

05:56.130 --> 05:58.920
se chamarmos todoSubmitHandler aqui, isto seria chamado

05:58.920 --> 06:00.590
de forward, isto foi feito pela

06:00.590 --> 06:02.410
primeira vez e então, de fato, isto

06:02.410 --> 06:05.000
ainda não seria inicializado.

06:05.000 --> 06:07.910
Só sabemos que ele será inicializado com certeza, pois sabemos

06:07.910 --> 06:09.730
que isso só será chamado quando o formulário

06:09.730 --> 06:10.830
for apresentado e isso

06:10.830 --> 06:13.830
só poderá acontecer após a entrega do mesmo.

06:13.830 --> 06:16.120
Assim, conhecemos a forma como nosso código funciona.

06:16.120 --> 06:18.360
Isto nunca será nulo.

06:18.360 --> 06:20.810
Se houvesse alguma outra possibilidade, você

06:20.810 --> 06:22.780
teria que usar um if-check aqui para verificar

06:22.780 --> 06:26.030
se o textInputRef. corrente é nula e se for,

06:26.030 --> 06:27.620
faça algo mais.

06:27.620 --> 06:29.550
Mas aqui isto não pode acontecer.

06:29.550 --> 06:31.230
Com isso, estamos extraindo

06:31.230 --> 06:34.640
um valor e podemos consolar. registre isto aqui para ver se funciona.

06:34.640 --> 06:37.040
Mas, é claro que esta não é a última etapa.

06:37.040 --> 06:40.900
Então vamos salvar isto, vamos entrar aqui,

06:40.900 --> 06:44.590
terminá-lo em um mês e adicionar todo, e

06:44.590 --> 06:47.970
o vemos aqui nos logs do console.

06:47.970 --> 06:50.310
É assim que deve funcionar.

06:50.310 --> 06:51.910
E com ele funcionando da maneira que deveria,

06:51.910 --> 06:55.460
vamos agora nos certificar de obter esse valor para o componente de aplicação.

06:55.460 --> 06:58.820
Se você sabe que alguns reagem definitivamente, experimente primeiro por conta própria.

06:58.820 --> 07:00.963
Vamos fazer isso juntos na próxima palestra.
