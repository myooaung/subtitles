WEBVTT

1
00:00:02.100 --> 00:00:04.390
<v Instructor>Now of course, in bigger React applications,</v>

2
00:00:04.390 --> 00:00:08.640
you work with more than just useRef and useState.

3
00:00:08.640 --> 00:00:10.950
To understand how you use TypeScript there,

4
00:00:10.950 --> 00:00:13.460
it's really always helpful to simply hover

5
00:00:13.460 --> 00:00:15.180
over the functions you're calling,

6
00:00:15.180 --> 00:00:17.090
so the other hooks you're working with.

7
00:00:17.090 --> 00:00:20.010
For example, if you would need the useEffect tool here,

8
00:00:20.010 --> 00:00:22.660
in the NewTodo component, for whatever reason,

9
00:00:22.660 --> 00:00:26.330
then, you can call it and simply hover over it thereafter,

10
00:00:26.330 --> 00:00:29.010
to understand with which types it works.

11
00:00:29.010 --> 00:00:30.960
For example, that the first argument is

12
00:00:30.960 --> 00:00:33.720
an EffectCallback, which is a special function,

13
00:00:33.720 --> 00:00:37.100
where TypeScript will warn you if you set it up incorrectly,

14
00:00:37.100 --> 00:00:38.610
that the second argument is either

15
00:00:38.610 --> 00:00:41.480
nothing or an array of anything,

16
00:00:41.480 --> 00:00:42.997
things like that, this will always help you,

17
00:00:42.997 --> 00:00:45.930
you'll also learn that useEffect doesn't return anything,

18
00:00:45.930 --> 00:00:49.200
for example, and on useState, where I mentioned

19
00:00:49.200 --> 00:00:52.410
that you always get back an array with exactly two elements,

20
00:00:52.410 --> 00:00:56.310
well, you also see that here, useState returns an array,

21
00:00:56.310 --> 00:00:59.140
that's what we see here, opening and closing bracket,

22
00:00:59.140 --> 00:01:01.750
where the first element is of your generic type,

23
00:01:01.750 --> 00:01:05.220
so a list of Todos, because that is your state snapshot,

24
00:01:05.220 --> 00:01:08.600
the second element is a React.Dispatch function here

25
00:01:08.600 --> 00:01:11.370
in the end, that's what's happening here.

26
00:01:11.370 --> 00:01:12.690
So that can be useful.

27
00:01:12.690 --> 00:01:15.490
Maybe you're also working with Redux.

28
00:01:15.490 --> 00:01:19.660
Well, thankfully, if you dive into their documentation,

29
00:01:19.660 --> 00:01:21.360
you also will find instructions

30
00:01:21.360 --> 00:01:24.530
about using Redux with TypeScript.

31
00:01:24.530 --> 00:01:27.430
Here, under Recipes you find Usage with TypeScript,

32
00:01:27.430 --> 00:01:30.710
and there, you can learn how you can add types

33
00:01:30.710 --> 00:01:33.270
to your actions, and to your reducers,

34
00:01:33.270 --> 00:01:35.540
and to your state management with Redux.

35
00:01:35.540 --> 00:01:38.650
It's really straightforward, not complex at all,

36
00:01:38.650 --> 00:01:41.520
and adds a lot of type safety there.

37
00:01:41.520 --> 00:01:43.230
Maybe you're also using the

38
00:01:43.230 --> 00:01:47.110
React Router package, this package here.

39
00:01:47.110 --> 00:01:52.040
There, you don't find specific TypeScript notations there,

40
00:01:52.040 --> 00:01:54.020
well, of course you can install this

41
00:01:54.020 --> 00:01:55.340
into your project, as well, with

42
00:01:55.340 --> 00:01:58.770
npm install dash dash save react dash router dash dom,

43
00:01:58.770 --> 00:02:00.740
which is the command you would typically use

44
00:02:00.740 --> 00:02:03.720
to install this package into your React project.

45
00:02:03.720 --> 00:02:07.000
So this will add the react-router-dom package.

46
00:02:07.000 --> 00:02:10.250
But this package has no special

47
00:02:10.250 --> 00:02:12.430
type instructions on its page here,

48
00:02:12.430 --> 00:02:14.720
you don't find anything TypeScript-specific here,

49
00:02:14.720 --> 00:02:17.570
at least at the point of time I'm recording this.

50
00:02:17.570 --> 00:02:19.163
Nonetheless, of course we can use this

51
00:02:19.163 --> 00:02:21.250
in a TypeScript project as well,

52
00:02:21.250 --> 00:02:23.920
and can get good type support there.

53
00:02:23.920 --> 00:02:25.800
Now, with it installed, you will notice that

54
00:02:25.800 --> 00:02:29.360
if I import from react-router-dom,

55
00:02:29.360 --> 00:02:31.880
I don't really have great type support there.

56
00:02:31.880 --> 00:02:33.870
For example, if I try to import something here,

57
00:02:33.870 --> 00:02:36.870
I already get a warning, that could not find

58
00:02:36.870 --> 00:02:39.210
a declaration for module react-router-dom,

59
00:02:39.210 --> 00:02:42.730
so that it didn't find any type information here.

60
00:02:42.730 --> 00:02:45.420
To fix that, of course, we can do something we did before,

61
00:02:45.420 --> 00:02:48.450
npm install dash dash save dash dev,

62
00:02:48.450 --> 00:02:52.530
at types, slash react dash router dash dom,

63
00:02:52.530 --> 00:02:54.620
so we cancel the at search types here,

64
00:02:54.620 --> 00:02:56.860
and we're good again, this is a trick

65
00:02:56.860 --> 00:02:59.097
you already learned about, early in the course,

66
00:02:59.097 --> 00:03:02.010
but of course, there's no need to forget about it,

67
00:03:02.010 --> 00:03:03.920
just because we have a project where

68
00:03:03.920 --> 00:03:06.790
a lot already works with TypeScript out of the box.

69
00:03:06.790 --> 00:03:08.140
If we then add something which

70
00:03:08.140 --> 00:03:10.810
does not work with TypeScript, like this one,

71
00:03:10.810 --> 00:03:13.700
we can add it like this, and now it's aware of Route,

72
00:03:13.700 --> 00:03:15.380
it's aware of all the other features

73
00:03:15.380 --> 00:03:17.270
from this package as well.

74
00:03:17.270 --> 00:03:21.070
So this is how easy you can add support for this, as well.

75
00:03:21.070 --> 00:03:23.560
And that's how you should generally approach this,

76
00:03:23.560 --> 00:03:26.010
have a look at the official docs, check if you

77
00:03:26.010 --> 00:03:29.030
see instructions about usage with TypeScript there,

78
00:03:29.030 --> 00:03:31.590
if not, install it and see if it has built-in

79
00:03:31.590 --> 00:03:33.720
type support, so that you at least get

80
00:03:33.720 --> 00:03:37.350
good auto-completion and compilation support,

81
00:03:37.350 --> 00:03:39.090
and if that also does not exist,

82
00:03:39.090 --> 00:03:42.080
install a types package, as we did it here.

83
00:03:42.080 --> 00:03:43.980
And that really is it for this module,

84
00:03:43.980 --> 00:03:46.410
and this is how you can utilize TypeScript,

85
00:03:46.410 --> 00:03:49.920
and all its amazing features in a React app,

86
00:03:49.920 --> 00:03:52.450
and of course, everything you learn from this course,

87
00:03:52.450 --> 00:03:54.370
applies to a React app as well.

88
00:03:54.370 --> 00:03:56.380
You can use all the TypeScript features

89
00:03:56.380 --> 00:03:59.130
you learned about from this course, in a React project.

