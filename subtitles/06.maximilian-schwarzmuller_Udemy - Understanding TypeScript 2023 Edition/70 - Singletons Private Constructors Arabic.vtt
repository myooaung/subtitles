WEBVTT

00:02.260 --> 00:04.960
-: الآن هناك ميزة أخيرة مثيرة

00:04.960 --> 00:07.020
للاهتمام أريد أيضًا أن

00:07.020 --> 00:10.330
أقدمها ، وهي المُنشئون الخاصون.

00:10.330 --> 00:13.823
وما هو المُنشئ الخاص وأي استخدام له؟

00:14.870 --> 00:17.700
يوجد نمط في البرمجة الشيئية

00:17.700 --> 00:20.460
يسمى النمط المفرد.

00:20.460 --> 00:23.030
يتعلق النمط الفردي بضمان

00:23.030 --> 00:26.440
أن يكون لديك دائمًا مثيل واحد فقط

00:26.440 --> 00:28.030
من فئة معينة.

00:28.030 --> 00:30.558
يمكن أن يكون هذا مفيدًا في السيناريوهات

00:30.558 --> 00:33.000
التي لا يمكنك فيها بطريقة ما استخدام أساليب

00:33.000 --> 00:34.450
أو خصائص ثابتة أو لا تريد

00:34.450 --> 00:36.440
ذلك ، ولكن في نفس الوقت تريد التأكد

00:36.440 --> 00:40.730
من أنه لا يمكنك إنشاء كائنات متعددة بناءً على فئة ولكنك دائمًا ما

00:40.730 --> 00:44.630
يكون لديك كائن واحد بالضبط بناءً على فئة.

00:44.630 --> 00:47.660
دعنا نقول لقسم المحاسبة لدينا أننا نريد

00:47.660 --> 00:51.460
التأكد من أنه يمكننا فقط إنشاء كائن واحد فقط بناءً

00:51.460 --> 00:53.320
على هذه الفئة ، لأن لدينا

00:53.320 --> 00:56.010
قسم محاسبة واحد بالضبط في شركتنا

00:56.010 --> 00:57.840
بأكملها.

00:57.840 --> 01:00.260
قد يكون لدينا أكثر من قسم واحد لتكنولوجيا

01:00.260 --> 01:03.290
المعلومات ولكن لدينا قسم محاسبة واحد بالضبط.

01:03.290 --> 01:05.310
الآن لفرض هذا ولتجنب استدعاء

01:05.310 --> 01:09.020
قسم المحاسبة الجديد يدويًا عدة مرات ، يمكننا

01:09.020 --> 01:12.260
تحويل مُنشئ فئة AccountingDepartment

01:12.260 --> 01:14.320
إلى مُنشئ خاص عن طريق إضافة

01:14.320 --> 01:18.860
الكلمة الأساسية الخاصة أمامه.

01:18.860 --> 01:20.560
الآن ما يفعله هذا هو أنه يضمن

01:20.560 --> 01:23.480
أننا لا نستطيع الاتصال بالجديد على هذا.

01:23.480 --> 01:25.160
هنا ترى أنني أتلقى خطأ

01:25.160 --> 01:27.620
لأن المُنشئ خاص ، لذا لا يمكن الوصول

01:27.620 --> 01:30.600
إليه إلا من داخل الفصل ، وهو أمر يبدو غريبًا

01:30.600 --> 01:33.690
لأن كيف يمكننا الدخول إلى الفصل إذا لم نتمكن

01:33.690 --> 01:37.920
من إنشاء كائنات بناءً عليه بعد الآن.

01:37.920 --> 01:40.490
الجواب ، حسنًا ، طرق ثابتة.

01:40.490 --> 01:43.610
يمكن استدعاء طريقة ثابتة في الفصل نفسه

01:43.610 --> 01:46.250
حتى لا يكون لديك مثيل لذلك.

01:46.250 --> 01:49.460
لذلك يمكننا هنا إضافة طريقة ثابتة يمكننا تسميتها

01:49.460 --> 01:51.340
getInstance ، ولكن الاسم

01:51.340 --> 01:53.260
متروك لك تمامًا.

01:53.260 --> 01:56.930
الآن سيتحقق getInstance مما إذا كان لدينا بالفعل مثيل لهذه

01:56.930 --> 02:00.090
الفئة وإذا لم يكن كذلك ، فقم بإرجاع نسخة جديدة.

02:00.090 --> 02:04.300
لذلك يمكننا إضافة مثيل جديد للخاصية الثابتة ، خاصية

02:04.300 --> 02:06.350
ثابتة خاصة حتى تتمكن من وضع

02:06.350 --> 02:09.200
خاص أمام ثابت يسمى مثيل والذي سيكون من

02:09.200 --> 02:12.040
النوع AccountingDepartment.

02:12.040 --> 02:16.570
لذلك سنقوم بتخزين مثيل قسم المحاسبة.

02:16.570 --> 02:17.580
هذا ما أقوله هنا

02:17.580 --> 02:19.100
، لدي خاصية ثابتة يمكن

02:19.100 --> 02:21.410
الوصول إليها في الفصل نفسه ، ولكن

02:21.410 --> 02:23.310
فقط من داخل الفصل والقيمة

02:23.310 --> 02:25.960
التي نخزنها هناك ستكون من النوع AccountingDepartment

02:25.960 --> 02:30.140
، وكذلك الفئة نفسها.

02:30.140 --> 02:33.880
الآن يمكننا استخدام خاصية المثيل هذه هنا في getInstance

02:33.880 --> 02:38.880
والتحقق مما إذا كان هذا. تم تعيين المثيل هنا داخل static ،

02:39.260 --> 02:43.570
إذا استخدمنا هذا ، فسوف يشير إلى الفئة نفسها ومن ثم يمكننا

02:43.570 --> 02:47.610
الوصول إلى جميع الخصائص الثابتة الأخرى في ذلك.

02:47.610 --> 02:51.963
سيكون البديل عن ذلك هو استخدام اسم الفئة.

02:53.720 --> 03:01.600
والآن إذا تم تعيين هذا ، أريد إعادة هذا. مثيل ، أو مرة أخرى classname.

03:01.600 --> 03:01.600
المثال

03:01.600 --> 03:04.030
ولكن هذا داخل طريقة ثابتة يعمل ، فهو يتيح

03:04.030 --> 03:05.680
لنا الوصول إلى الفصل نفسه

03:05.680 --> 03:09.370
بعد ذلك ، على عكس هذا في طريقة غير ثابتة تتيح لنا الوصول إلى

03:09.370 --> 03:11.590
الحالة التي نحاول العمل بها ، وليس

03:11.590 --> 03:13.550
ما نفعله هنا .

03:13.550 --> 03:15.660
إذا لم نجعلها هنا ، فليس

03:15.660 --> 03:17.290
لدينا مثيل حتى الآن

03:17.290 --> 03:22.030
، ثم قمت بتعيين هذا. على سبيل المثال ، إذن هذه

03:22.030 --> 03:25.660
الخاصية الثابتة تساوي قسم المحاسبة

03:25.660 --> 03:28.630
الجديد ، يمكننا استخدام هذا من

03:28.630 --> 03:32.030
الداخل لأننا الآن داخل طريقة الفئة

03:32.030 --> 03:35.250
هذه ، لذلك يمكننا هنا الوصول إلى المُنشئ

03:35.250 --> 03:41.200
الخاص وتمرير معرفنا ، ومجموعة التقارير الخاصة بنا ثم إعادة

03:41.200 --> 03:44.830
هذا. المثال هنا.

03:44.830 --> 03:47.010
والآن ، إما أن نعيد المثال الوحيد الذي قد

03:47.010 --> 03:48.220
يكون لدينا بالفعل ، أو

03:48.220 --> 03:50.970
إذا لم يكن لدينا بعد ، فإننا ننشئ مثيلًا جديدًا.

03:50.970 --> 03:53.270
لكن هذا الكود ، الكود المحدد هنا ،

03:53.270 --> 03:56.377
يمكن تشغيله مرة واحدة فقط لأنه بمجرد أن يكون لدينا

03:56.377 --> 03:57.850
مثيل ، فإننا نجعله في كتلة

03:57.850 --> 04:00.370
if ونعيد المثيل الحالي.

04:00.370 --> 04:03.700
الآن إذا كنت تريد العمل مع قسم المحاسبة ، فبدلاً

04:03.700 --> 04:05.940
من إنشائه مثل هذا يمكننا أن نسميه

04:05.940 --> 04:10.153
، قسم المحاسبة للمحاسبة. getInstance ، وهذا يعيد

04:11.646 --> 04:13.190
لنا نسخة جديدة من

04:13.190 --> 04:14.850
قسم المحاسبة.

04:14.850 --> 04:18.190
ولكن إذا قمت بذلك مرة أخرى ، فسأحصل على نفس الحالة

04:18.190 --> 04:21.103
التي سترى ما إذا كنت أتحكم في محاسبة السجلات

04:22.020 --> 04:23.570
والمحاسبة 2 هنا.

04:23.570 --> 04:26.550
سترى أن الاثنين يجب أن يكونا متساويين تمامًا

04:26.550 --> 04:28.253
، إذا حفظنا ذلك وأعدنا التحميل

04:30.550 --> 04:34.110
، سترى أن هناك كائنين في قسم المحاسبة لديهما ، لهما

04:34.110 --> 04:36.690
نفس المعرف ، نفس الإعداد بالضبط ، هما

04:36.690 --> 04:39.720
نفس الكائن ، نفس المثال لأننا لديك مثيل واحد

04:39.720 --> 04:41.530
فقط مع هذا النمط الفردي الذي

04:41.530 --> 04:47.900
تم إنشاؤه بمساعدة الكلمة الأساسية الخاصة أمام المنشئ.

04:47.900 --> 04:51.000
الآن يمكن القول إن هذا نهج لن تستخدمه

04:51.000 --> 04:52.490
طوال الوقت.

04:52.490 --> 04:55.010
يمكن أن يكون النمط الفردي مفيدًا في بعض الأحيان

04:55.010 --> 04:56.530
، فأنت لست بحاجة إليه طوال

04:56.530 --> 04:58.700
الوقت ، ولكنه بالتأكيد يستحق أن تعرفه

04:58.700 --> 05:00.360
لأنه شيء مثير للاهتمام يمكنك

05:00.360 --> 05:03.290
تنفيذه بسهولة باستخدام TypeScript بفضل المنشئين

05:03.290 --> 05:04.923
الخاصين.
