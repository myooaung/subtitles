WEBVTT

00:02.310 --> 00:04.270
Instructor: Así que estamos usando módulos ES.

00:04.270 --> 00:06.470
Resulta que hay algunas variaciones de

00:06.470 --> 00:08.550
esa sintaxis de exportación e importación

00:08.550 --> 00:10.100
que debes conocer.

00:10.100 --> 00:12.276
Por ejemplo, puede agrupar las importaciones.

00:12.276 --> 00:14.300
Digamos que aquí en la entrada del proyecto,

00:14.300 --> 00:15.870
donde estoy importando dos cosas

00:15.870 --> 00:18.060
del archivo de validación aquí.

00:18.060 --> 00:22.030
Es posible que quieras agrupar todo eso en un objeto en el

00:22.030 --> 00:25.493
que luego puedas llamar a dot validatable y dot validate,

00:25.493 --> 00:29.170
para no tener que llamar a validate así.

00:29.170 --> 00:30.940
Tal vez quieras llamarlo así, pero

00:30.940 --> 00:33.510
si tuvieras, digamos, una función del mismo nombre

00:33.510 --> 00:35.210
y año o algo así y quieres evitar

00:35.210 --> 00:36.719
un choque de nombres o quieres

00:36.719 --> 00:38.250
dejar claro que esto pertenece

00:38.250 --> 00:42.069
a algún tipo de paquete, podrías agruparlo.

00:42.069 --> 00:45.090
Para agrupar las importaciones no las importas

00:45.090 --> 00:49.150
así con las llaves, sino que usas una estrella aquí que significa

00:49.150 --> 00:51.970
importar todo de ese archivo, como y luego

00:51.970 --> 00:55.080
cualquier alias de tu elección, por ejemplo,

00:55.080 --> 00:57.192
validación.

00:57.192 --> 00:59.280
Ahora tienes que ir a los lugares donde utilizas

00:59.280 --> 01:01.070
algo de ese archivo y utilizarlo como

01:01.070 --> 01:05.470
una validación de objetos. validable.

01:05.470 --> 01:07.920
Así que todo lo que se exporta en ese archivo que

01:07.920 --> 01:10.400
ahora se agrupa bajo este nombre aquí se accede

01:10.400 --> 01:12.341
a través de la notación de puntos.

01:12.341 --> 01:15.700
Así que la validación. validable todo el camino y luego también

01:15.700 --> 01:18.830
allí abajo donde tenemos la función de validación es, por supuesto,

01:18.830 --> 01:25.197
la validación. validar, validar. validar, y la validación.

01:25.197 --> 01:25.197
validada.

01:25.197 --> 01:29.604
Y con eso verás que bien funciona la validación.

01:29.604 --> 01:32.490
Así que la agrupación es una cosa que puedes hacer.

01:32.490 --> 01:34.960
Eso de los alias también es algo que

01:34.960 --> 01:36.890
se puede hacer en general.

01:36.890 --> 01:38.830
¿No te gusta el autobombo así, quieres

01:38.830 --> 01:41.270
tener un carácter mayúsculo al principio?

01:41.270 --> 01:45.360
Pues bien, aquí puede asignar simplemente un alias con la palabra clave as.

01:45.360 --> 01:48.150
Dentro de las llaves rizadas también se puede utilizar.

01:48.150 --> 01:50.431
Luego se renombra esta importación y sólo esta importación.

01:50.431 --> 01:54.350
Por supuesto, no se cambia el nombre en el archivo original.

01:54.350 --> 01:58.390
Sólo se importa con un nombre diferente en este archivo.

01:58.390 --> 02:01.280
Así que ahora en lugar de usar autobind con una a minúscula

02:01.280 --> 02:05.780
aquí tenemos que usar nuestro nombre de alias con la A mayúscula.

02:05.780 --> 02:09.150
Así que esa puede ser otra buena característica para evitar choques

02:09.150 --> 02:11.570
de nombres si tuvieras otra cosa llamada autobind

02:11.570 --> 02:14.543
con la a minúscula en el mismo archivo, por ejemplo.

02:16.180 --> 02:20.010
También puede trabajar con las exportaciones por defecto.

02:20.010 --> 02:22.926
Si tienes un archivo que sólo exporta una cosa,

02:22.926 --> 02:25.120
digamos el componente base.

02:25.120 --> 02:28.020
En realidad tenemos muchos archivos que sólo exportan una cosa.

02:28.020 --> 02:29.240
Pero digamos que aquí

02:29.240 --> 02:31.360
en este archivo no queremos exportarlo

02:31.360 --> 02:33.770
así, una llamada exportación con nombre,

02:33.770 --> 02:37.330
porque importamos por nombre aquí en las llaves.

02:37.330 --> 02:40.258
Tenemos que usar el nombre exacto que usamos aquí.

02:40.258 --> 02:42.170
Si no quieres hacerlo, simplemente

02:42.170 --> 02:45.140
añade otra palabra clave, por defecto.

02:45.140 --> 02:48.940
Y esto le dice a JavaScript que esta es la principal, bueno,

02:48.940 --> 02:52.064
la exportación por defecto de este archivo.

02:52.064 --> 02:55.929
Todavía podría tener otras exportaciones con nombre

02:55.929 --> 02:58.500
aquí que estarían permitidas.

02:58.500 --> 03:01.220
Ups, por ejemplo una constante aquí que estaría

03:01.220 --> 03:02.120
permitida.

03:02.120 --> 03:04.750
Puede tener exportaciones con nombre y por defecto mezcladas

03:04.750 --> 03:06.130
en el mismo archivo, pero si utiliza

03:06.130 --> 03:07.800
una exportación por defecto, sólo

03:07.800 --> 03:11.440
puede tener una exportación por defecto por archivo.

03:11.440 --> 03:14.210
Así que aquí tengo mi exportación por defecto y ahora en los

03:14.210 --> 03:16.926
archivos donde importé, no lo importas por nombre.

03:16.926 --> 03:19.900
Sólo se pueden importar exportaciones con nombre.

03:19.900 --> 03:22.639
Por ejemplo, que se añada algo constante.

03:22.639 --> 03:24.743
En su lugar, importará su valor por defecto

03:24.743 --> 03:28.600
simplemente eligiendo cualquier nombre de su elección ahora, que no tiene

03:28.600 --> 03:30.890
que coincidir con el nombre que utilizó en el

03:30.890 --> 03:32.400
archivo exportado.

03:32.400 --> 03:34.354
Así que no tienes que usar el componente ahora.

03:34.354 --> 03:37.037
Ahora podrías usar sólo Cmp por ejemplo aquí.

03:37.037 --> 03:40.700
E impórtalo así, sin llaves.

03:40.700 --> 03:44.127
Tampoco hay estrella, así que no estoy importando todo.

03:44.127 --> 03:46.827
Sólo estoy importando el valor por defecto.

03:46.827 --> 03:49.460
Por lo tanto, esto sólo está disponible si el archivo del

03:49.460 --> 03:52.210
que se está importando tiene una exportación por defecto.

03:52.210 --> 03:53.850
Porque esto le dice a JavaScript,

03:53.850 --> 03:58.010
hey, quiero usar la exportación por defecto de ese archivo.

03:58.010 --> 04:00.520
Entonces aquí puedo nombrar este Cmp, por supuesto.

04:00.520 --> 04:02.569
O, tengo que usar Cmp, por supuesto ahora.

04:02.569 --> 04:04.509
El componente ya no está permitido porque

04:04.509 --> 04:06.666
no lo estoy importando con ese nombre.

04:06.666 --> 04:09.710
Por supuesto, ahora también tenemos que ajustar esto en project-item

04:09.710 --> 04:10.675
y project-list.

04:10.675 --> 04:12.486
Utilizamos la exportación por defecto.

04:12.486 --> 04:14.515
Me ceñiré al componente aquí, pero no es

04:14.515 --> 04:16.540
necesario, como acabo de demostrar.

04:16.540 --> 04:18.300
Puedes usar cualquier nombre que

04:18.300 --> 04:21.900
quieras aquí, pero para simplificar, usaré componente aquí.

04:21.900 --> 04:24.075
Las exportaciones por defecto pueden estar bien

04:24.075 --> 04:25.740
si sólo tienes una cosa por archivo.

04:25.740 --> 04:29.080
Personalmente, prefiero las exportaciones con nombre,

04:29.080 --> 04:31.075
porque obtienes autocompletado,

04:31.075 --> 04:33.590
impones un patrón de nomenclatura claro, si

04:33.590 --> 04:37.290
otro desarrollador importa tu clase o tu cosa exportada, tiene

04:37.290 --> 04:40.460
que usar tu nombre, lo que normalmente es bueno porque

04:40.460 --> 04:41.870
te permite imponer ciertas

04:41.870 --> 04:43.290
convenciones de nomenclatura

04:43.290 --> 04:46.579
a través de un equipo u organización.

04:46.579 --> 04:49.840
Y por lo tanto, a mí personalmente me gustan las exportaciones con

04:49.840 --> 04:51.740
nombre, pero por supuesto debes conocer

04:51.740 --> 04:53.340
la exportación por defecto también,

04:53.340 --> 04:54.853
que puedes usar así.
