WEBVTT

00:02.230 --> 00:03.280
Giảng viên: Vì vậy, hy vọng

00:03.280 --> 00:04.930
chúng ta đã nắm được những kiến thức cơ bản

00:04.930 --> 00:07.150
về khái quát, bây giờ chúng ta hãy tìm hiểu sâu hơn một

00:07.150 --> 00:09.250
chút về các ràng buộc hoặc một loại ràng buộc cụ thể

00:09.250 --> 00:10.400
mà bạn có thể thêm vào.

00:10.400 --> 00:12.680
Để làm được điều đó, tôi sẽ đánh đổi một chức năng

00:12.680 --> 00:16.293
khác, một chức năng chung, mà tôi sẽ đặt tên là extractAndConvert.

00:18.700 --> 00:21.550
Ý tưởng của hàm này ở đây là chúng ta

00:21.550 --> 00:24.120
lấy một đối tượng làm đối số đầu

00:24.120 --> 00:26.340
tiên và tham số thứ hai cuối

00:26.340 --> 00:28.413
cùng là một khóa.

00:30.050 --> 00:32.570
Bây giờ tôi muốn trả lại giá trị cho khóa đó trong đối tượng, điều

00:32.570 --> 00:35.310
mà chúng ta có thể thực hiện với ký hiệu JavaScript mặc định này.

00:35.310 --> 00:36.310
Sử dụng dấu ngoặc vuông

00:36.310 --> 00:38.200
để exe làm thuộc tính trong một đối tượng,

00:38.200 --> 00:39.840
nhưng đó không phải là TypeScript

00:39.840 --> 00:42.010
cụ thể, đó lại là Vanilla JavaScript.

00:42.010 --> 00:43.000
Do đó, bây giờ ở đây chúng

00:43.000 --> 00:44.580
ta có thể nói rằng ở đây chúng ta muốn

00:44.580 --> 00:48.460
có một đối tượng và đối với khóa, chúng ta muốn có một chuỗi, giả sử như vậy.

00:48.460 --> 00:50.160
Tuy nhiên, ở đây tôi đang gặp một

00:50.160 --> 00:52.000
lỗi, bởi vì điều cuối cùng chúng ta

00:52.000 --> 00:54.500
không biết ở đây là liệu đối tượng mà chúng ta

00:54.500 --> 00:57.510
đang lấy ở đây có thực sự có chìa khóa đó hay không.

00:57.510 --> 00:59.410
Đó là kết thúc những gì TypeScript

00:59.410 --> 01:01.430
nói với chúng ta về lỗi lạ này.

01:01.430 --> 01:02.530
Ví dụ ở đây, tôi có

01:02.530 --> 01:05.700
thể điều khiển ghi nhật ký kết quả của việc gọi đối

01:05.700 --> 01:09.770
tượng này với giả sử, một đối tượng trống và sau đó đặt tên.

01:09.770 --> 01:12.600
Và ở đây, tôi đang gọi đây là extractAndConvert,

01:12.600 --> 01:16.025
bởi vì tôi muốn gọi nó mà không có nhật ký bảng điều khiển và

01:16.025 --> 01:18.600
chỉ cần nói Giá trị, dấu hai chấm, cộng.

01:18.600 --> 01:19.660
Nhưng đó chỉ là một lưu ý phụ.

01:19.660 --> 01:22.450
Cuối cùng, tôi sẽ trả lại cho chúng tôi những dữ liệu đã lấy được.

01:22.450 --> 01:23.840
Nhưng vấn đề chính ở đây là, tôi có thể

01:23.840 --> 01:25.160
gọi nó như thế này và nó sẽ truyền

01:26.091 --> 01:28.020
vào một đối tượng dưới dạng tham số đầu tiên, sau

01:28.020 --> 01:29.890
đó là một chuỗi dưới dạng tham số thứ hai.

01:29.890 --> 01:31.430
Nhưng chính xác, TypeScript nói với

01:31.430 --> 01:33.200
tôi rằng cuối cùng thì không đảm bảo rằng

01:33.200 --> 01:35.193
khóa này tồn tại trong đối tượng này.

01:36.420 --> 01:39.920
Bây giờ để đảm bảo điều này, chúng ta lại có thể sử dụng các kiểu chung ở đây.

01:39.920 --> 01:41.620
Có thể nói chúng ta có một loại T, và đó sẽ

01:41.620 --> 01:43.130
là đối tượng của chúng ta ở đây.

01:43.130 --> 01:46.550
Có thể nói, mở rộng đối tượng.

01:46.550 --> 01:48.363
Nhưng chúng ta cũng phải gõ U.

01:49.440 --> 01:52.850
Giả sử chìa khóa của chúng ta ở đây, cuối cùng, phải

01:52.850 --> 01:56.320
là chìa khóa thuộc loại chữ T của chúng ta.

01:56.320 --> 01:58.210
Vì vậy, đối với đối tượng này, chúng

01:58.210 --> 02:01.560
tôi muốn đảm bảo rằng những gì chúng tôi nhận được ở đây dưới dạng

02:01.560 --> 02:04.890
tham số thứ hai làm khóa là thuộc tính của loại đầu tiên đó.

02:04.890 --> 02:09.130
Và vì điều đó, chúng ta có thể nói khóa mở rộng của T.

02:11.550 --> 02:13.540
Và bây giờ bạn thấy lỗi đã biến mất ở

02:13.540 --> 02:15.370
đây, và thay vào đó tôi gặp lỗi ở dưới

02:15.370 --> 02:17.930
đó, bởi vì bây giờ tôi đang thông báo cho TypeScript

02:17.930 --> 02:21.800
ở đây, rằng tham số đầu tiên phải là bất kỳ loại đối tượng nào và tham

02:21.800 --> 02:23.610
số thứ hai phải là bất kỳ loại khóa

02:23.610 --> 02:25.870
nào trong đối tượng đó.

02:25.870 --> 02:28.480
Và ở đây, vâng, chúng tôi đang chuyển vào bất kỳ loại đối tượng nào,

02:28.480 --> 02:30.430
nhưng chúng tôi không có khóa tên trong đó.

02:30.430 --> 02:34.990
Lỗi này sẽ chỉ biến mất ngay sau khi tôi thêm khóa tên.

02:34.990 --> 02:37.990
Vì vậy, đây là lúc chúng ta có thể sử dụng các kiểu chung

02:37.990 --> 02:41.800
cho từ khóa keyoff này ở đây, để cho TypeScript biết rằng chúng ta muốn

02:41.800 --> 02:45.730
đảm bảo rằng chúng ta có cấu trúc chính xác này và tất nhiên điều đó thực

02:45.730 --> 02:47.460
sự hữu ích, vì nó cho phép chúng

02:47.460 --> 02:49.120
ta đảm bảo rằng chúng ta đừng phạm

02:49.120 --> 02:51.160
sai lầm ngớ ngẩn, khi chúng tôi cố gắng

02:51.160 --> 02:53.390
gọi chức năng này, mà cuối cùng, chúng tôi

02:53.390 --> 02:56.740
đã cố gắng exe như một thuộc tính không tồn tại.

02:56.740 --> 02:58.140
Vì vậy, điều này hoạt động.

02:58.140 --> 02:59.870
Nhưng nếu tôi cố gắng exe là 'tuổi'

02:59.870 --> 03:01.570
ở đây, chẳng hạn, tôi lại gặp lỗi.

03:02.890 --> 03:05.560
Vì vậy, hãy chuyển cái này trở lại thành 'tên'.
