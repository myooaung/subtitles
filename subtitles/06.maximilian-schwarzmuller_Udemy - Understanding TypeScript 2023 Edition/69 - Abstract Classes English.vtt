WEBVTT

1
00:00:02.060 --> 00:00:04.710
So with static properties out of the way,

2
00:00:04.710 --> 00:00:07.000
let's come back to inheritance

3
00:00:07.000 --> 00:00:08.743
and to a concept related to that.

4
00:00:08.743 --> 00:00:11.740
Another way of adding methods to classes,

5
00:00:11.740 --> 00:00:14.280
which you plan to inherit from.

6
00:00:14.280 --> 00:00:16.660
Here's our Department class and as you know,

7
00:00:16.660 --> 00:00:19.200
we're inheriting from it on the IT Department

8
00:00:19.200 --> 00:00:21.360
and the Accounting Department.

9
00:00:21.360 --> 00:00:23.470
Now, we do have that describe method

10
00:00:23.470 --> 00:00:26.160
here in our Department class,

11
00:00:26.160 --> 00:00:28.850
and therefore we can call this on any instance,

12
00:00:28.850 --> 00:00:31.850
based on IT Department and Accounting Department

13
00:00:31.850 --> 00:00:34.560
because these classes are based on Department,

14
00:00:34.560 --> 00:00:36.560
and they have access to all the properties

15
00:00:36.560 --> 00:00:39.523
and methods of that Department base class.

16
00:00:40.380 --> 00:00:43.850
Now, as you learned, you can override methods.

17
00:00:43.850 --> 00:00:46.550
So for example, here in the Accounting Department,

18
00:00:46.550 --> 00:00:50.030
we could add our own describe method version,

19
00:00:50.030 --> 00:00:51.900
where I want to do something different,

20
00:00:51.900 --> 00:00:56.880
where maybe when I say Accounting Department

21
00:00:56.880 --> 00:01:00.443
ID, and then Access Distort ID.

22
00:01:02.040 --> 00:01:03.140
Now, this would not work here,

23
00:01:03.140 --> 00:01:06.960
because ID is a private property of Department

24
00:01:06.960 --> 00:01:10.400
and therefore, we need to turn this into a protected one

25
00:01:10.400 --> 00:01:12.590
so that it's available in classes

26
00:01:12.590 --> 00:01:14.750
based on this class as well.

27
00:01:14.750 --> 00:01:16.210
But with that, it should work.

28
00:01:16.210 --> 00:01:19.080
And if I now call describe on accounting,

29
00:01:19.080 --> 00:01:20.540
which we can do, of course,

30
00:01:20.540 --> 00:01:23.650
let's maybe comment out these two lines, and instead,

31
00:01:23.650 --> 00:01:27.460
call accounting.describe down there,

32
00:01:27.460 --> 00:01:29.300
we should see that new output,

33
00:01:29.300 --> 00:01:33.340
and indeed, we see Accounting Department ID, d2.

34
00:01:33.340 --> 00:01:36.570
Now, of course, we could also override the describe method

35
00:01:36.570 --> 00:01:38.900
in the IT Department.

36
00:01:38.900 --> 00:01:43.240
But sometimes you don't just want to offer the option

37
00:01:43.240 --> 00:01:46.440
of overriding a method because that always exists.

38
00:01:46.440 --> 00:01:50.430
You instead want to force the developers working

39
00:01:50.430 --> 00:01:53.390
with a certain class or extending a certain class

40
00:01:53.390 --> 00:01:54.820
to implement a certain method

41
00:01:54.820 --> 00:01:56.840
or to override a certain method.

42
00:01:56.840 --> 00:01:58.360
When would you do that?

43
00:01:58.360 --> 00:02:01.690
Well, whenever you wanna ensure that a certain method

44
00:02:01.690 --> 00:02:05.670
is available in all classes based on some base class

45
00:02:05.670 --> 00:02:07.320
in this case Department.

46
00:02:07.320 --> 00:02:10.550
But when also know at the same time that the exact

47
00:02:10.550 --> 00:02:14.220
implementation will depend on the specific version,

48
00:02:14.220 --> 00:02:17.340
so when you can provide a general method,

49
00:02:17.340 --> 00:02:20.240
but you want to enforce that this method exists,

50
00:02:20.240 --> 00:02:22.410
but the inheriting classes will need

51
00:02:22.410 --> 00:02:24.270
to provide their own implementation

52
00:02:24.270 --> 00:02:27.180
because you can't provide a default implementation

53
00:02:27.180 --> 00:02:28.520
in the base class.

54
00:02:28.520 --> 00:02:30.150
So in such a situation,

55
00:02:30.150 --> 00:02:34.600
you might wanna have an empty method in your base class

56
00:02:34.600 --> 00:02:38.460
and now force all classes based on that class

57
00:02:38.460 --> 00:02:40.810
to add and override this method

58
00:02:40.810 --> 00:02:44.880
and you can do so by adding the abstract keyword here.

59
00:02:44.880 --> 00:02:46.630
If you add abstract here,

60
00:02:46.630 --> 00:02:49.840
you see we get an error that this is only available

61
00:02:49.840 --> 00:02:51.440
in an abstract class.

62
00:02:51.440 --> 00:02:54.220
So if you have one method or more with abstract

63
00:02:54.220 --> 00:02:57.390
in front of the method, you have to add abstract

64
00:02:57.390 --> 00:03:00.400
here in front of class as well and now,

65
00:03:00.400 --> 00:03:01.690
we're good regarding that,

66
00:03:01.690 --> 00:03:03.740
but now you see I have an error here.

67
00:03:03.740 --> 00:03:05.650
Describe cannot have an implementation

68
00:03:05.650 --> 00:03:07.850
because it is marked as abstract.

69
00:03:07.850 --> 00:03:10.340
You have to remove the curly braces,

70
00:03:10.340 --> 00:03:14.030
add a semicolon, and instead add the return type

71
00:03:14.030 --> 00:03:16.820
this should have, in this case white.

72
00:03:16.820 --> 00:03:18.400
So now, you're just defining

73
00:03:18.400 --> 00:03:21.970
how this method should look like what its structure is,

74
00:03:21.970 --> 00:03:25.230
but you're not saying anything else besides this.

75
00:03:25.230 --> 00:03:27.990
Now, however, we get an error in the IT Department

76
00:03:27.990 --> 00:03:31.120
because it does not implement the inherited

77
00:03:31.120 --> 00:03:33.640
abstract member describe, which means ,

78
00:03:33.640 --> 00:03:36.330
we don't offer the describe method here.

79
00:03:36.330 --> 00:03:38.410
And we do have to do that because we're based

80
00:03:38.410 --> 00:03:41.000
on the Department class, which is abstract,

81
00:03:41.000 --> 00:03:42.860
and which has such abstract method.

82
00:03:42.860 --> 00:03:45.220
Which means this method has to be implemented

83
00:03:45.220 --> 00:03:48.623
by any class based on this Department class.

84
00:03:49.620 --> 00:03:51.420
So now here in IT Department,

85
00:03:51.420 --> 00:03:53.820
we have to add a describe method.

86
00:03:53.820 --> 00:03:58.820
And in there, we can now console log IT Department,

87
00:03:59.040 --> 00:04:01.120
and then do whatever we want.

88
00:04:01.120 --> 00:04:03.070
This can be the same implementation

89
00:04:03.070 --> 00:04:04.900
as we have it in the Accounting Department,

90
00:04:04.900 --> 00:04:07.440
but it can also be a different one.

91
00:04:07.440 --> 00:04:10.040
So now with that, we can save this and it re-compiles,

92
00:04:10.040 --> 00:04:12.850
and we get the almost same output as before.

93
00:04:12.850 --> 00:04:15.240
But now we have two different implementations

94
00:04:15.240 --> 00:04:18.090
of the describe method in our different classes

95
00:04:18.090 --> 00:04:20.020
based on Department.

96
00:04:20.020 --> 00:04:23.600
Abstract can therefore be very useful if you wanna

97
00:04:23.600 --> 00:04:27.120
enforce that all classes based on some other class,

98
00:04:27.120 --> 00:04:30.260
share some common method or property,

99
00:04:30.260 --> 00:04:33.150
you can also have abstract properties.

100
00:04:33.150 --> 00:04:34.260
But at the same time,

101
00:04:34.260 --> 00:04:36.510
you wanna make sure that you don't have to provide

102
00:04:36.510 --> 00:04:39.170
the concrete value ,the concrete implementation

103
00:04:39.170 --> 00:04:41.000
in the base class, but instead,

104
00:04:41.000 --> 00:04:43.440
the inheriting class has to do that.

105
00:04:43.440 --> 00:04:45.970
Also important, abstract classes.

106
00:04:45.970 --> 00:04:49.200
So classes marked as abstract with this keyword

107
00:04:49.200 --> 00:04:51.420
can be instantiated themselves.

108
00:04:51.420 --> 00:04:54.240
So you can't instantiate Department now.

109
00:04:54.240 --> 00:04:57.440
It's basically just a class that stare to be inherited

110
00:04:57.440 --> 00:05:01.800
from so that the inheriting classes can be instantiated,

111
00:05:01.800 --> 00:05:05.230
and inheriting classes are forced to provide concrete

112
00:05:05.230 --> 00:05:09.040
implementations for in this case to describe method

113
00:05:09.040 --> 00:05:11.770
following the structure you laid out here.

114
00:05:11.770 --> 00:05:15.750
So with this keyword referring to a Department instance

115
00:05:15.750 --> 00:05:19.930
or instance, somehow based on Department including inherited

116
00:05:19.930 --> 00:05:21.530
classes that might be in between

117
00:05:21.530 --> 00:05:23.610
and that it doesn't return anything

