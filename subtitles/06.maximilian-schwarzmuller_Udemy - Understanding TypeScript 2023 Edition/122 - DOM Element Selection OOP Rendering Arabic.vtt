WEBVTT

00:02.300 --> 00:03.420
المعلم: للبدء ، سأقوم

00:03.420 --> 00:07.060
هنا بتشغيل npm start لإحضار خادم التطوير هذا.

00:07.060 --> 00:09.384
الذي يخدم ملف HTML وعلامة تبويب

00:09.384 --> 00:13.434
القائمة ، tsc-w لبدء أنواع التجميع في وضع الساعة بحيث

00:13.434 --> 00:17.988
يتم إعادة إنشاء ملف JavaScript للتطبيق الخاص بنا باستمرار

00:17.988 --> 00:21.740
ويمكننا عرضه في التطبيق قيد التشغيل.

00:21.740 --> 00:24.480
في الوقت الحالي ، بالطبع لا يبدو تطبيقنا خياليًا جدًا.

00:24.480 --> 00:26.340
إنها صفحة فارغة.

00:26.340 --> 00:27.850
لذا ، للبدء ، هناك العديد

00:27.850 --> 00:30.250
من الطرق للقيام بذلك.

00:30.250 --> 00:35.040
الآن ، أريد أن أبدأ بجعل هذا النموذج مرئيًا.

00:35.040 --> 00:36.660
والآن ، هناك العديد من الطرق

00:36.660 --> 00:38.790
، سأقوم بالفعل بكتابة هذا التطبيق في

00:38.790 --> 00:40.208
نهج موجه للكائنات.

00:40.208 --> 00:43.303
وهو أمر اختياري بنسبة 100٪ ولكن بما أننا تعلمنا

00:43.303 --> 00:46.080
عن الفصول الدراسية وما إلى ذلك ، فأنا أريد

00:46.080 --> 00:48.083
بالفعل أن أوضح كيف يعمل هذا

00:48.083 --> 00:51.140
، وبالتالي سأستخدم هذا النهج.

00:51.140 --> 00:51.973
لذا في مفتاح التطبيق

00:51.973 --> 00:55.510
، سأضيف فصلًا جديدًا وسأطلق عليه اسم Project Input على

00:55.510 --> 00:59.120
الرغم من أن اسم الفصل بالطبع متروك لك تمامًا.

00:59.120 --> 01:00.570
الآن في هذا الفصل ،

01:00.570 --> 01:04.590
يجب أن يكون هدفنا هو الوصول إلى هذا القالب والنموذج

01:04.590 --> 01:08.220
الموجود فيه والوصول إلى هذا القسم هنا ، ثم عرض القالب

01:08.220 --> 01:11.710
الخاص بنا في هذا القالب في النهاية.

01:11.710 --> 01:15.160
لذا فإن محتوى النموذج ، والنموذج في ذلك div.

01:15.160 --> 01:17.130
يجب أن يكون هدفنا.

01:17.130 --> 01:18.850
الآن لتحقيق ذلك ، هنا

01:18.850 --> 01:20.588
في إدخال المشروع ، سأضيف

01:20.588 --> 01:23.450
مُنشئًا حيث أريد في النهاية الوصول

01:23.450 --> 01:25.920
إلى القالب الخاص بي والمكان الذي

01:25.920 --> 01:27.970
يجب تقديمه فيه.

01:28.830 --> 01:33.310
ولهذا هنا ، سأضيف خاصيتين سريعًا مع

01:33.310 --> 01:37.460
هذا ، خاصية عنصر القالب ثم أيضًا

01:37.460 --> 01:40.180
خاصية عنصر المضيف.

01:40.180 --> 01:42.420
الأسماء متروكة لك بنسبة 100٪.

01:42.420 --> 01:44.990
في النهاية ، فكرتي هي ذلك العنصر المضيف ، وهو

01:44.990 --> 01:46.970
يحمل إشارة إلى العنصر حيث أريد عرض

01:46.970 --> 01:49.650
محتوى القالب الخاص بي في النهاية ، ويعطيني عنصر

01:49.650 --> 01:51.427
القالب إمكانية الوصول إلى القالب

01:51.427 --> 01:54.050
الذي يحتوي على هذا المحتوى.

01:54.050 --> 01:56.120
الآن للوصول إلى هذا القالب ،

01:56.120 --> 01:59.690
دعنا نلقي نظرة على فهرس html ونرى كيف يمكننا تحديد

01:59.690 --> 02:01.870
القالب الذي يحمل النموذج.

02:01.870 --> 02:04.050
حسنًا ، يحتوي على معرّف إدخال المشروع

02:04.050 --> 02:06.120
هذا ، لذا تبدو استراتيجية جيدة.

02:06.120 --> 02:08.510
هنا يمكننا استخدام مستند getElementById

02:08.510 --> 02:11.022
في إدخال المشروع.

02:11.022 --> 02:15.410
هذا يتيح لنا الوصول إلى عنصر القالب هذا.

02:15.410 --> 02:17.820
الآن ، بعض الأشياء المهمة.

02:17.820 --> 02:21.320
نحصل هنا على خطأ مفاده أن عنصر القالب هو خاصية

02:21.320 --> 02:23.900
غير موجودة في إدخال المشروع.

02:23.900 --> 02:28.140
الآن للتخلص من هذا ، يجب أن نضيفه كحقل

02:28.140 --> 02:31.610
جديد هنا مباشرة في الفصل.

02:31.610 --> 02:34.050
ثم يمكننا التنازل عنها بأمان.

02:34.050 --> 02:36.040
الآن هنا ، أريد أيضًا أن أكون واضحًا بشأن النوع

02:36.040 --> 02:37.450
الذي سيتم تخزينه هناك.

02:37.450 --> 02:41.070
وسيكون هذا عنصر قالب HTML.

02:41.070 --> 02:43.270
هذا النوع متاح عالميًا لأنني

02:43.270 --> 02:47.380
في ملف tsconfig js ، أضفت DOM باعتباره lib والذي

02:47.380 --> 02:50.360
يضيف جميع أنواع DOM هذه ، وجميع أنواع

02:50.360 --> 02:53.777
عناصر HTML هذه كأنواع مطبوعة إلى المشروع

02:53.777 --> 02:55.493
بأكمله.

02:57.280 --> 03:00.400
الآن يؤدي هذا إلى حدوث خطأ جديد هنا ، ومع ذلك ، ترى

03:00.400 --> 03:03.110
أنه في النهاية قد يكون هذا فارغًا عندما نحصل

03:03.110 --> 03:04.760
على العنصر حسب المعرف ، وبالطبع

03:04.760 --> 03:09.850
نعلم أنه لن يفشل ولكن الكتابة المطبوعة ليس لديها فرصة لمعرفة ذلك لأنه لن يحدث

03:09.850 --> 03:12.757
تحليل ملف html الخاص بنا.

03:12.757 --> 03:16.210
لذلك ربما لا يوجد عنصر بهذا المعرف ، وبالتالي فإن

03:16.210 --> 03:18.210
هذا قد ينتج عنه قيمة خالية.

03:18.210 --> 03:20.680
الآن هنا ، نقول إننا لا نخزن فارغًا

03:20.680 --> 03:23.920
هناك ، نحن فقط نخزن عنصر قالب HTML.

03:23.920 --> 03:25.800
لذا ، للقضاء على هذا الخطر ،

03:25.800 --> 03:29.470
علينا أن نقول مطبعيًا ، أن هذا لن يكون باطلًا أبدًا.

03:29.470 --> 03:31.290
وأنت تعرف كيف يمكنك فعل هذا؟

03:31.290 --> 03:33.580
يمكنك إضافة علامة تعجب هنا.

03:33.580 --> 03:35.020
بديل بالطبع ، فقط

03:35.020 --> 03:36.170
لإظهار هذا ،

03:36.170 --> 03:37.820
إذا لم تكن متأكدًا

03:37.820 --> 03:41.640
، هو تخزينه كما دعنا نقول بشكل ثابت ثم تحقق

03:41.640 --> 03:46.640
مما إذا كان عنصر القالب صحيحًا ، لذلك إذا لم يكن فارغًا

03:46.900 --> 03:48.600
ثم قم بتخزينه داخل

03:48.600 --> 03:51.490
ذلك إذا تحقق هنا.

03:51.490 --> 03:52.720
الآن ، ما زلنا نتلقى خطأ

03:52.720 --> 03:54.190
ولكن هذا سيكون خطأ مختلفًا

03:54.190 --> 03:55.840
، وسأعود إليه لاحقًا.

03:55.840 --> 03:58.060
في الوقت الحالي ، هذا سيفي بالغرض

03:58.060 --> 03:59.650
إذا لم نكن متأكدين.

03:59.650 --> 04:01.930
الآن هنا ، مع ذلك ، أنا متأكد.

04:01.930 --> 04:02.763
وبالمناسبة ، إذا

04:02.763 --> 04:03.596
لم تكن متأكدًا ، فيجب

04:03.596 --> 04:06.000
عليك توفير احتياطي في الحالة الأخرى بالطبع.

04:06.000 --> 04:08.530
ولكني هنا على يقين من أننا سنحصل على مثل هذا

04:08.530 --> 04:10.544
العنصر ، وبالتالي يمكننا ببساطة إضافة

04:10.544 --> 04:11.803
علامة تعجب بعد ذلك لنقول

04:11.803 --> 04:13.710
مطبعيًا ، "كل شيء جيد.

04:13.710 --> 04:17.300
سوف نتمكن من الوصول إلى عنصر بهذا المعرف. الآن كما ذكرت ، لا يزال لدينا خطأ

04:17.300 --> 04:18.133
آخر.

04:18.133 --> 04:20.220
محتوى الخاصية مفقود في عنصر HTML من النوع.

04:20.220 --> 04:24.270
تكمن المشكلة هنا في أننا نخبر الكتابة المطبوعة

04:24.270 --> 04:27.140
بأننا سنخزن عنصر قالب من نوع عنصر

04:27.140 --> 04:29.550
قالب html.

04:29.550 --> 04:32.160
وبالفعل سيكون هذا هو الحال.

04:32.160 --> 04:34.800
الآن بالطبع ، لا تعرف getElementById

04:34.800 --> 04:38.730
العنصر الذي ستعيده في النهاية.

04:38.730 --> 04:41.130
إنه يعرف فقط أنه سيكون بعض عناصر

04:41.130 --> 04:43.920
html ولكن ليس النسخة المتخصصة منه.

04:43.920 --> 04:46.600
إذا كانت div ، فقرة ، زر أو ما شابه

04:46.600 --> 04:48.720
في هذه الحالة عنصر قالب.

04:48.720 --> 04:51.387
getElementById ليس لديه فرصة لمعرفة ذلك.

04:51.387 --> 04:54.590
لذلك من أجل إخبار الكتابة المطبوعة عن النوع

04:54.590 --> 04:57.460
الذي نعرفه بالطبع على وجه اليقين.

04:57.460 --> 05:00.660
يمكننا استخدام نوع الصب.

05:00.660 --> 05:02.260
لقد تعلمت عن هذا أيضًا.

05:02.260 --> 05:03.730
هناك نوعان من بناء الجملة يمكنك استخدام.

05:03.730 --> 05:05.950
أقواس الزاوية في البداية ثم

05:05.950 --> 05:07.690
النوع الذي تريد إرسال

05:07.690 --> 05:10.130
هذا إليه والذي تقول لـ typeScript

05:10.130 --> 05:11.847
، "مرحبًا!

05:11.847 --> 05:12.700
الشيء ، التعبير

05:12.700 --> 05:15.840
الذي يأتي بعد هذا هنا ، سيكون من هذا النوع. أو بدلاً من ذلك ، يمكنك إضافة عنصر قالب HTML وهو

05:15.840 --> 05:17.650
الأسلوب الذي سأستخدمه.

05:17.650 --> 05:21.200
وبهذا ، فإنك تضمن للطباعة أن ما تجلبه

05:21.200 --> 05:23.040
هنا لن يكون فارغًا

05:23.040 --> 05:25.700
وسيكون من هذا النوع.

05:25.700 --> 05:27.950
الكثير من الحديث عن اختيار هذا ولكنه مهمة

05:30.027 --> 05:30.860
شائعة ومن المهم

05:30.860 --> 05:32.016
أن يكون هذا صحيحًا.

05:32.016 --> 05:33.630
الآن دعنا نواصل مع العنصر المضيف.

05:33.630 --> 05:35.563
هنا ، يجب أن نضيف أيضًا عنصر

05:36.890 --> 05:39.360
المضيف كحقل ونعلم أن العنصر المضيف

05:39.360 --> 05:43.350
، عندما نريد فعلاً تقديم مدخلات المشروع سيكون في

05:43.350 --> 05:45.960
النهاية هذا div هنا.

05:45.960 --> 05:48.560
هذا هو المكان الذي أريد تقديم شكلي فيه.

05:48.560 --> 05:51.410
لذلك ، يمكننا هنا أن نقول عنصر HTML div.

05:51.410 --> 05:54.000
هذا هو نوع العنصر الذي سنضيف إليه هذا.

05:54.000 --> 05:57.730
يمكننا أيضًا أن نكون أقل تحديدًا ونقول عنصر

05:57.730 --> 06:00.260
HTML فقط ، لأنني هنا لا أهتم حقًا

06:00.260 --> 06:02.740
ما إذا كان عنصر div أم لا.

06:02.740 --> 06:04.970
لكن بما أننا نعرفها على

06:04.970 --> 06:08.400
وجه اليقين ، فلماذا لا نضيفها؟

06:08.400 --> 06:10.250
الآن ، أريد الوصول إلى div بالطبع

06:10.250 --> 06:11.263
حيث يجب إضافة هذا

06:12.110 --> 06:14.850
وإذا ألقينا نظرة على الفهرس. html ، نرى أنه يمكننا تحديد div بواسطة

06:14.850 --> 06:16.530
المعرف مرة أخرى.

06:16.530 --> 06:18.970
معرف التطبيق في هذه الحالة.

06:18.970 --> 06:19.945
الآن ، بالعودة إلى التطبيق

06:19.945 --> 06:24.640
ts ، يمكننا استخدام المستند getElementById مرة أخرى والتواصل مع العنصر باستخدام تطبيق id.

06:24.640 --> 06:28.780
الآن ، لدينا نفس المشكلات كما كان من قبل ، يمكن

06:28.780 --> 06:32.920
أن يكون هذا فارغًا ، لذلك علينا إضافة علامة التعجب

06:32.920 --> 06:35.112
لأننا نعلم على وجه اليقين

06:35.112 --> 06:39.620
أنها لن تفعل ذلك ، ولا تعرف getElementById أن هذا سيكون

06:39.620 --> 06:42.283
عنصر HTML div لذا ، يجب أن نلقي

06:43.430 --> 06:46.030
هذا هنا أيضًا.

06:46.030 --> 06:48.150
وبهذا يمكننا الآن معرفة كيفية

06:48.150 --> 06:51.210
الوصول إلى جميع العناصر التي نحتاج إليها.

06:51.210 --> 06:53.990
حسنًا ، كان هذا كثيرًا من الحديث عن ذلك.

06:53.990 --> 06:56.070
مع ذلك للأسف لم نحقق الكثير.

06:56.070 --> 06:59.140
لدينا إمكانية الوصول إلى هذه العناصر

06:59.140 --> 07:01.970
ولكننا لا نقدم أي شيء هناك.

07:01.970 --> 07:03.940
لذلك دعونا نواصل ذلك.

07:03.940 --> 07:05.790
لذلك ، نحتاج إلى استيراد المحتوى

07:05.790 --> 07:08.020
من عنصر القالب هذا ، لذلك نقوم باستيراد

07:08.020 --> 07:11.760
ما بداخل علامات القالب وعرضه على DOM.

07:11.760 --> 07:15.520
يمكننا القيام بذلك هنا في المُنشئ لأن فكرتي

07:15.520 --> 07:17.603
وبالطبع هذه مجرد فكرتي

07:18.510 --> 07:20.270
، يمكنك إعداد هذا بشكل

07:20.270 --> 07:21.870
مختلف.

07:21.870 --> 07:22.940
لكن فكرتي هي أنه عندما

07:22.940 --> 07:24.550
ننشئ مثيلًا جديدًا لهذه الفئة

07:24.550 --> 07:26.430
، أريد فورًا تقديم نموذج ينتمي

07:26.430 --> 07:28.250
إلى هذه الحالة.

07:28.250 --> 07:30.190
لذلك سنفعل ذلك بشكل صحيح في المنشئ.

07:30.190 --> 07:31.770
هناك يمكننا الحصول على

07:31.770 --> 07:34.420
العقدة المستوردة أو محتوى HTML الذي

07:34.420 --> 07:37.430
تم استيراده أو على أي حال تريد تسميته ، وهو

07:37.430 --> 07:40.627
ما يمكننا الحصول عليه من خلال استيراد المستند

07:40.627 --> 07:44.917
وهي طريقة متوفرة في كائن المستند العام ولإستيراد العقدة تقوم

07:45.860 --> 07:49.260
بتمرير مؤشر في عنصر القالب الخاص بك.

07:49.260 --> 07:52.650
إذن عنصر القالب هذا في النهاية ، أو على وجه الدقة ليس العنصر

07:52.650 --> 07:54.410
ولكن المحتوى النقطي هناك.

07:54.410 --> 07:57.010
المحتوى عبارة عن خاصية

07:57.010 --> 08:00.891
موجودة في عناصر قالب HTML وتعطي

08:00.891 --> 08:05.320
ببساطة مرجعًا لمحتوى القالب.

08:05.320 --> 08:07.480
لذلك إلى كود HTML بين نص القالب.

08:07.480 --> 08:09.520
تأخذ ImportNode أيضًا وسيطة

08:09.520 --> 08:13.306
ثانية تحدد ما إذا كان يجب استيراد هذا باستخدام

08:13.306 --> 08:15.670
استنساخ عميق أم لا.

08:15.670 --> 08:17.940
لذا فإن جميع مستويات التداخل داخل القالب وأنا بالتأكيد

08:17.940 --> 08:19.630
أريد أن أفعل ذلك لذلك سأقدم ما هو صحيح هنا.

08:19.630 --> 08:22.570
الآن ، لدينا العقدة المستوردة وكما

08:22.570 --> 08:26.340
سترى ، هذا جزء من نوع المستند الذي يتم كتابته

08:26.340 --> 08:28.830
أو استنتاجه تلقائيًا.

08:28.830 --> 08:30.770
الآن يمكننا استخدام هذه العقدة

08:30.770 --> 08:34.910
المستوردة ، وبالطبع أريد استخدامها لعرض بعض المحتوى.

08:34.910 --> 08:36.960
لذلك سأضيف طريقة جديدة

08:36.960 --> 08:40.970
، طريقة خاصة سأذكرها مرفقة.

08:40.970 --> 08:42.810
لست بحاجة إلى القيام بذلك ، فأنا

08:42.810 --> 08:45.150
فقط أريد تقسيم اختياراتي وعرض المنطق.

08:45.150 --> 08:46.390
داخل المرفق ، سأصل

08:46.390 --> 08:51.270
إلى عنصر المضيف ، وبالتالي المكان الذي أريد فيه عرض المحتوى

08:51.270 --> 08:52.820
الخاص بي واستدعاء

08:52.820 --> 08:54.930
insertAdjacentElement

08:54.930 --> 08:57.840
وهي طريقة افتراضية يوفرها المتصفح

08:57.840 --> 09:00.770
في النهاية في JavaScript.

09:00.770 --> 09:02.980
لإدراج عنصر HTML ، أدخل عنصرًا

09:02.980 --> 09:04.340
مجاورًا ، أولاً وقبل

09:04.340 --> 09:08.778
كل شيء يأخذ وصفًا لمكان إدراجه ، لذلك يمكنك إدخاله بعد بداية

09:08.778 --> 09:13.180
العنصر الذي تستهدفه ، لذلك بعد العلامة الافتتاحية لعنصر

09:13.180 --> 09:16.680
المضيف مباشرةً ، قبل البداية أو قبل علامة الفتح

09:16.680 --> 09:17.850
، قبل علامة النهاية

09:17.850 --> 09:20.870
أو بعد علامة النهاية.

09:20.870 --> 09:23.570
وهنا سأبدأ بعد أن أبدأ في إدخاله

09:23.570 --> 09:27.020
مباشرة في بداية العلامة الافتتاحية.

09:27.020 --> 09:30.580
ثم الشيء الذي أريد إدراجه هو العقدة

09:30.580 --> 09:33.053
التي تم استيرادها ، ومع ذلك

09:34.900 --> 09:39.140
، أولاً وقبل كل شيء ، هذا ثابت متوفر فقط في المُنشئ

09:39.140 --> 09:42.970
وثانيًا ، جزء من المستند.

09:42.970 --> 09:44.630
لم نتمكن من إدخاله هكذا.

09:44.630 --> 09:46.896
بدلاً من ذلك ، نحتاج إلى الوصول إلى عنصر HTML

09:46.896 --> 09:48.240
الملموس هناك ، والذي يمكننا

09:48.240 --> 09:49.800
تخزينه في عنصر خاصية آخر.

09:49.800 --> 09:52.770
الذي يتعين علينا أيضًا إضافته كحقل

09:52.770 --> 09:55.560
هناك يمكن أن يكون من نوع عنصر HTML

09:55.560 --> 09:58.270
أو في حالتنا في الواقع ، نعلم أنه

09:58.270 --> 10:02.500
سيكون داخل القالب هنا ، لذلك سيكون نموذجًا.

10:02.500 --> 10:05.790
هذا هو العنصر الأول في النموذج.

10:05.790 --> 10:07.010
هنا يمكننا أن نقول

10:07.010 --> 10:09.470
أنه سيكون عنصر نموذج HTML ، ثم هنا

10:09.470 --> 10:10.960
، هذا العنصر يساوي importNode

10:10.960 --> 10:15.200
firstElementChild ، الآن علينا فقط إخبار الكتابة المطبوعة

10:15.200 --> 10:20.106
مرة أخرى ، أن هذا سيكون عنصر نموذج HTML.

10:20.106 --> 10:22.199
الآن هذا العنصر هو الخاصية الملموسة

10:22.199 --> 10:25.510
التي تشير إلى العقدة التي نريد إدراجها.

10:25.510 --> 10:28.360
لذا في الأسفل ، في insertAdjacentElement

10:28.360 --> 10:31.110
، نقوم بإدخال هذا العنصر هنا.

10:31.110 --> 10:33.690
الآن نحتاج فقط إلى التأكد من أنه هنا في

10:33.690 --> 10:36.350
المُنشئ ، في نهايته التي نطلق عليها اسم

10:36.350 --> 10:38.460
attach ، لذا فإن هذه الطريقة الخاصة

10:38.460 --> 10:39.950
للإرفاق ، بحيث يتم تنفيذ

10:39.950 --> 10:42.260
هذا الكود أيضًا.

10:42.260 --> 10:44.290
والآن مع كل التنسيقات ،

10:44.290 --> 10:46.620
هكذا تبدو الكود الخاص بي.

10:46.620 --> 10:48.200
هذه هي فئة مدخلات المشروع

10:48.200 --> 10:51.460
، ومن الناحية النظرية ، عندما نقوم بإنشاء مثيل

10:51.460 --> 10:53.950
لها ، يجب أن تقدم النموذج.

10:53.950 --> 10:56.920
الآن لنجربها.

10:56.920 --> 10:59.440
أسفل الفصل ، دعنا ببساطة ننشئ ثابتًا جديدًا ، prjInput

10:59.440 --> 11:01.120
على سبيل المثال ، الاسم متروك لك.

11:01.120 --> 11:05.415
وندعو إدخال مشروع جديد مثل هذا.

11:05.415 --> 11:08.930
وإذا حفظنا ذلك الآن ، فيجب إعادة تجميعه

11:08.930 --> 11:11.783
وإعادة تحميله ، وإذا عدت إلى المتصفح

11:11.783 --> 11:14.160
، فيجب أن ترى هذا النموذج

11:14.160 --> 11:16.050
هنا.

11:16.050 --> 11:17.990
لذلك هذا أمر رائع ، لأنه بذلك

11:17.990 --> 11:20.660
، اتخذنا أول خطوة مهمة للغاية.

11:20.660 --> 11:22.450
لقد تم تقديم النموذج

11:22.450 --> 11:26.930
الخاص بنا وعلى الرغم من نقص الكثير ، فهذا

11:26.930 --> 11:29.150
أفضل من لا شيء.

11:29.150 --> 11:31.630
هذا النموذج ، يأتي من ملف فهرس html

11:31.630 --> 11:33.010
ويتم تقديمه بمساعدة

11:33.010 --> 11:36.430
كود الكتابة المكتوبة بالكائن الموجود هناك.
