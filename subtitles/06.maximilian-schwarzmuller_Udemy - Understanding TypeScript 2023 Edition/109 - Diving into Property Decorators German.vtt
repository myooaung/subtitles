WEBVTT

00:02.250 --> 00:05.050
Kursleiter: Bevor wir nun weitere nützliche Anwendungsfälle

00:05.050 --> 00:07.811
oder Szenarien für einige Dekoratoren untersuchen.

00:07.811 --> 00:10.700
Ich möchte Ihnen kurz all die anderen Stellen zeigen, an denen

00:10.700 --> 00:12.550
Sie Dekoratoren hinzufügen können.

00:12.550 --> 00:15.670
Natürlich können wir Dekoratoren zu Klassen hinzufügen, aber es gibt noch mehr

00:15.670 --> 00:17.731
Stellen, an denen wir sie hinzufügen können.

00:17.731 --> 00:20.750
Dafür werde ich eine neue Klasse erstellen, denn wir brauchen eine

00:20.750 --> 00:22.460
Klasse für jeden Dekorator, den wir verwenden

00:22.460 --> 00:24.580
wollen, aber wir müssen nicht alle Dekoratoren

00:24.580 --> 00:26.420
direkt zur Klasse hinzufügen.

00:26.420 --> 00:28.480
Nehmen wir an, wir haben hier eine

00:28.480 --> 00:31.523
Produktklasse und in der Produktklasse haben wir

00:31.523 --> 00:34.540
vielleicht einen Titel, der ein String ist.

00:34.540 --> 00:37.070
Und wir können hier mit dem Konstruktor einen Wert zuweisen.

00:37.070 --> 00:39.600
Natürlich können wir auch die Abkürzung verwenden und alles in einem

00:39.600 --> 00:41.570
Schritt in einem Konstruktor erledigen, wie Sie bereits

00:41.570 --> 00:42.680
gelernt haben.

00:42.680 --> 00:44.451
Hier werde ich den längeren Weg nehmen.

00:44.451 --> 00:49.451
Wir können hier eine Methode haben, den Preis mit Steuer zu erhalten.

00:50.150 --> 00:53.442
Dafür erwarte ich einen Steuersatz, der eine Zahl ist, und damit

00:53.442 --> 00:57.150
das funktioniert, sollten wir hier auch einen Preis speichern.

00:57.150 --> 01:01.200
Preis-Eigenschaft, die wir auch als Teil des Konstruktors erhalten.

01:01.200 --> 01:04.060
Auch hier könnten wir die Abkürzung verwenden, aber

01:04.060 --> 01:05.340
ich werde es so machen.

01:05.340 --> 01:08.120
Und dann werde ich in dieser Methode

01:08.120 --> 01:13.120
zurückkehren, This. Preis mal eins plus Steuer.

01:13.200 --> 01:15.300
Wir haben also diese Utility-Methode, und

01:15.300 --> 01:17.610
wir können auch einen Getter und einen Setter hinzufügen,

01:17.610 --> 01:19.090
wenn Sie wollen.

01:19.090 --> 01:22.700
Zum Beispiel können wir hier einen Setter für den Preis hinzufügen, wo wir den

01:22.700 --> 01:25.850
Wert erhalten, der eine Zahl sein sollte, und wo wir kontrollieren,

01:25.850 --> 01:28.231
dass wir nur bestimmte Werte setzen können.

01:28.231 --> 01:32.090
Damit das funktioniert, werde ich den Preis hier oben umbenennen, um den Preis

01:32.090 --> 01:35.350
zu unterstreichen und ihn eigentlich privat zu machen, so dass wir

01:35.350 --> 01:37.540
ihn nicht direkt erreichen können.

01:37.540 --> 01:39.970
Und hier werde ich diesen Unterstrich Preis setzen und

01:39.970 --> 01:42.580
hier werde ich diesen Unterstrich Preis verwenden.

01:42.580 --> 01:44.800
Und mit diesen Änderungen in der Setter, können

01:44.800 --> 01:48.350
wir diese Unterstrich Preis gleich dem Wert, den wir erhalten.

01:48.350 --> 01:51.290
Zuvor können wir jedoch prüfen, ob der Wert größer

01:51.290 --> 01:52.770
als Null ist, so dass wir

01:52.770 --> 01:55.630
keine negativen Preise akzeptieren.

01:55.630 --> 01:57.220
Damit setzen wir den Preis nur,

01:57.220 --> 02:00.159
wenn er größer als Null ist, ansonsten tun wir nichts.

02:00.159 --> 02:04.330
Im anderen Fall könnte tatsächlich ein Fehler auftreten.

02:04.330 --> 02:08.389
Ungültiger Preis sollte positiv sein.

02:08.389 --> 02:11.350
Das ist also etwas, was wir tun können, jetzt haben wir

02:11.350 --> 02:14.020
eine Klasse mit zwei Eigenschaften, mit einem Accessor

02:14.020 --> 02:16.700
und auch mit einer Methode hier und diese Methode

02:16.700 --> 02:18.570
hat einen Parameter.

02:18.570 --> 02:21.180
Zu all diesen Dingen können wir nun noch Dekoratoren

02:21.180 --> 02:24.690
hinzufügen, und beginnen wir mit einem guten alten Freund, einem

02:24.690 --> 02:25.910
Holzdekorator.

02:25.910 --> 02:28.960
Hier werde ich ihn log nennen, um nicht mit logger da oben zu kollidieren,

02:28.960 --> 02:30.650
weil dieser log decorator nicht zu einer

02:30.650 --> 02:31.960
Klasse hinzugefügt wird und daher

02:31.960 --> 02:33.770
andere Argumente bekommt.

02:33.770 --> 02:35.671
Er erhält jedoch Argumente, und welche

02:35.671 --> 02:38.580
Argumente der Dekorator erhält, hängt davon ab, wo Sie

02:38.580 --> 02:40.030
ihn hinzufügen.

02:40.030 --> 02:41.960
Das ist der Grund, warum ich Logger nicht wiederverwenden

02:41.960 --> 02:45.700
kann, denn das wurde fein abgestimmt, um nur mit Klassen zu arbeiten.

02:45.700 --> 02:48.100
Hier habe ich eigentlich keine Decorator-Factory,

02:48.100 --> 02:49.980
ich muss nur eine Funktion wie diese dekorieren,

02:49.980 --> 02:53.510
aber welche Argumente diese Decorator-Funktion bekommt, hängt davon ab,

02:53.510 --> 02:55.230
wo wir sie verwenden.

02:55.230 --> 02:58.750
Wir können zum Beispiel einen Dekorator zu einer Eigenschaft hinzufügen.

02:58.750 --> 03:01.120
Hier kann ich ein Protokoll wie dieses hinzufügen und

03:01.120 --> 03:03.840
wenn Sie einen Dekorator zu einer Eigenschaft hinzufügen,

03:03.840 --> 03:05.759
erhält der Dekorator zwei Argumente.

03:05.759 --> 03:09.830
Das erste Argument ist das Ziel der Eigenschaft und für eine Instanzeigenschaft

03:09.830 --> 03:12.010
wie diese, die wir auf einer Instanz

03:12.010 --> 03:15.290
aufrufen, wenn Sie mit ihr arbeiten.

03:15.290 --> 03:19.490
Dies ist der Prototyp des erstellten Objekts.

03:19.490 --> 03:22.140
Wenn wir hier eine statische Eigenschaft hätten, würde sich

03:22.140 --> 03:24.850
target auf den Zustand der Konstruktorfunktion beziehen.

03:24.850 --> 03:27.770
Ich sage hier also "beliebig", weil ich nicht genau weiß,

03:27.770 --> 03:30.140
welche Struktur das Objekt haben wird.

03:30.140 --> 03:35.140
Das zweite Argument, das wir erhalten, ist einfach der Eigenschaftsname.

03:35.290 --> 03:37.682
Das könnte hier eine Zeichenkette sein,

03:37.682 --> 03:40.400
könnte natürlich auch ein Symbol sein.

03:40.400 --> 03:43.470
Wir wissen nicht, was wir als Eigenschaftskennzeichnung verwenden.

03:43.470 --> 03:48.037
Und dann hier werde ich log Eigenschaft Dekorator, so dass wir

03:49.130 --> 03:51.120
sehen können, wenn dies läuft

03:51.120 --> 03:55.980
und ich will eine Konsole. Protokollziel und auch Eigenschaftsname.

03:55.980 --> 03:57.780
Damit wir sehen, was in diesen beiden Werten steckt.

03:57.780 --> 04:01.280
Wenn wir das speichern, so dass es ohne Fehler kompiliert wird,

04:01.280 --> 04:03.080
und wenn wir auf unseren Server gehen,

04:03.080 --> 04:06.871
sehen wir, dass Property Decorator dort gedruckt wird.

04:06.871 --> 04:08.630
Und das ist unsere Ausgabe, die wir erhalten.

04:08.630 --> 04:13.220
Hier sehen wir, dass es sich um den Prototyp unseres Objekts handelt, da wir

04:13.220 --> 04:15.850
hier keinen Titel und keinen Preis sehen.

04:15.850 --> 04:18.160
Aber wir sehen, dass "get price with tax" und

04:18.160 --> 04:19.770
auch die Methoden auf dem Prototyp

04:19.770 --> 04:21.900
eines Objekts registriert sind.

04:21.900 --> 04:24.240
Das ist also der Prototyp unseres Objekts und

04:24.240 --> 04:26.640
wir sehen hier rechts den Titel, das ist der Name

04:26.640 --> 04:28.943
der Eigenschaft, mit der wir arbeiten.

04:29.800 --> 04:33.770
Wann genau wird dieser Logger nun aber ausgeführt?

04:33.770 --> 04:37.880
Nun, wie Sie sehen können, da ich niemals ein Produkt instanziiere,

04:37.880 --> 04:41.670
wird es grundsätzlich ausgeführt, wenn Ihre Klassendefinition

04:41.670 --> 04:43.980
von JavaScript registriert wird.

04:43.980 --> 04:47.660
Es wird also ausgeführt, wenn Sie diese Eigenschaft grundsätzlich

04:47.660 --> 04:49.140
in JavaScript definieren,

04:49.140 --> 04:50.960
als Teil Ihrer Klasse hier, als Teil

04:50.960 --> 04:52.970
dieser Konstruktorfunktion.

04:52.970 --> 04:54.610
Was hier letztendlich geschaffen wird.

04:54.610 --> 04:58.053
Dies ist der Zeitpunkt, zu dem dieser Eigenschaftsdekorator ausgeführt wird.
