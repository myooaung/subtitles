WEBVTT

00:02.130 --> 00:03.970
ผู้สอน: ก่อนอื่น เราสามารถเริ่มเซิร์ฟเวอร์การพัฒนาของเราที่นี่ด้วยการเริ่มต้น

00:03.970 --> 00:10.940
npm และนี่เป็นกระบวนการที่เราควรทำงานต่อไปเพราะสิ่งนี้จะเฝ้าดูไฟล์ของเราสำหรับการเปลี่ยนแปลง

00:10.940 --> 00:13.270
และหากมีการเปลี่ยนแปลง ดังนั้นหากคุณบันทึกการเปลี่ยนแปลงโดยเฉพาะ

00:13.270 --> 00:22.500
มันจะคอมไพล์ประเภทของโค้ดใหม่เป็น JavaScript คอมไพล์ JSX ใหม่เป็น JavaScript และในท้ายที่สุด จากนั้นสร้างแอปพลิเคชันตอบสนองของคุณและให้บริการบนโฮสต์ท้องถิ่น

00:22.500 --> 00:27.630
3000 ที่ไหน ขณะนี้คุณไม่เห็นมากนัก

00:27.630 --> 00:31.800
คุณสามารถดูได้ที่นี่ในคอนโซล Dev ซึ่งดูเหมือนว่าจะใช้งานได้เนื่องจากเอาต์พุตนั้นที่นี่

00:31.800 --> 00:36.700
แน่นอนว่าคุณไม่เห็นอะไรมากมายเพราะเราไม่ได้เรนเดอร์อะไรที่นี่ในแอพ

00:36.700 --> 00:36.700
tsx ในขณะนี้

00:36.700 --> 00:38.170
แน่นอนว่าจะมีการเปลี่ยนแปลง

00:38.170 --> 00:39.420
และดำเนินการต่อไป

00:39.420 --> 00:43.580
ตอนนี้เรามาเขียนโค้ดหรือวิเคราะห์สิ่งที่เราได้รับ

00:43.580 --> 00:46.750
ในดัชนี tsx เราไม่ได้มีอะไรพิเศษใช่มั้ย?

00:46.750 --> 00:49.060
นี่คือรหัส JavaScript ปกติ

00:49.060 --> 00:52.950
ในแอพ tsx เราเห็นการกำหนดประเภทนี้

00:52.950 --> 00:55.250
และตรงนั้น สิ่งที่เราเห็นคือเรากำหนดประเภทแปลกๆ

00:55.250 --> 00:57.980
นี้ให้กับแอป

00:57.980 --> 01:00.270
ทีนี้ ถ้าเราเพิกเฉยต่อประเภทนั้นสักวินาที

01:00.270 --> 01:02.480
อะไรที่เก็บอยู่ในแอพ

01:02.480 --> 01:07.290
ฟังก์ชัน ฟังก์ชันลูกศร แต่นั่นก็ยังเป็นฟังก์ชันปกติอยู่ดี

01:07.290 --> 01:12.570
เหตุใดประเภทนี้จึงไม่ทำงานหรือเหตุใดจึงไม่ใช่ประเภทฟังก์ชันที่เราได้เรียนรู้มา

01:12.570 --> 01:14.030
มันอยู่ภายใต้ประทุน

01:14.030 --> 01:16.450
แต่นี่เป็นประเภทที่จัดทำโดย react

01:16.450 --> 01:18.100
และตอนนี้ สิ่งที่สำคัญแน่นอนมีให้โดยแพ็คเกจ

01:18.100 --> 01:21.070
react types

01:21.070 --> 01:26.070
หากคุณเข้าไปในโหนดโมดูล เราจะเห็นโฟลเดอร์ @types ที่นี่และในนั้น เราจะเห็นประเภทต่างๆ

01:26.390 --> 01:30.670
มากมาย และเรายังเห็นประเภทการตอบสนองที่นี่ ประเภท react-dom

01:30.670 --> 01:32.600
ทั้งหมด

01:32.600 --> 01:35.840
และท้ายที่สุด ประเภทนี้จะถูกนำเข้าโดยอัตโนมัติโดยปริยายจากโฟลเดอร์ประเภทการตอบสนอง

01:35.840 --> 01:39.340
คุณสามารถพูดได้

01:39.340 --> 01:40.870
แล้วแบบนี้คืออะไร

01:40.870 --> 01:44.490
FC ย่อมาจากส่วนประกอบของฟังก์ชัน

01:44.490 --> 01:47.570
นอกจากนี้ยังมีรูปแบบที่ยาวกว่านี้ซึ่งคุณสามารถใช้แทนได้

01:47.570 --> 01:49.240
ชนิดเดียวกันเป๊ะๆ

01:49.240 --> 01:54.300
อีกอันหนึ่งเป็นเพียงทางลัดและสิ่งนี้กำหนดว่าสิ่งที่เราเก็บไว้ในแอพต้องเป็นฟังก์ชั่น

01:54.300 --> 02:00.550
แต่เป็นฟังก์ชั่นที่มีคุณสมบัติเป็นส่วนประกอบของฟังก์ชั่นในการตอบสนอง

02:00.550 --> 02:02.840
แน่นอนว่าคุณเขียนส่วนประกอบตามคลาสด้วย

02:02.840 --> 02:05.760
และด้วยเหตุนี้ คุณมีส่วนประกอบแบบคลาสสิกที่นี่เช่นกัน

02:05.760 --> 02:07.420
จากนั้นคุณจะต้องเก็บคลาสไว้ในนั้นแทนที่จะเป็นฟังก์ชัน

02:07.420 --> 02:09.480
แต่เราจะไปกับส่วนประกอบของฟังก์ชันที่นี่ในหลักสูตรนี้

02:09.480 --> 02:12.720
.

02:12.720 --> 02:14.670
นี่คือส่วนประกอบของฟังก์ชันเนื่องจากเป็นฟังก์ชันที่คืนค่า

02:14.670 --> 02:17.620
JSX และนั่นคือวิธีการสร้างส่วนประกอบของฟังก์ชันใน

02:17.620 --> 02:20.850
react

02:20.850 --> 02:24.180
หากฉันต้องการลบคำสั่งส่งคืนนี้ชั่วคราว เราอาจได้รับข้อผิดพลาดที่นี่

02:24.180 --> 02:28.800
หากฉันพยายามบันทึกและต้องการคอมไพล์

02:28.800 --> 02:32.440
เราจะได้รับข้อผิดพลาดเพราะตอนนี้ เราบอก TypeScript ว่าที่นี่

02:32.440 --> 02:34.960
เราต้องการจัดเก็บส่วนประกอบของฟังก์ชัน

02:34.960 --> 02:38.520
และทั้งหมดที่เราจัดเก็บคือฟังก์ชันปกติ ไม่ใช่ฟังก์ชันที่คืนค่า

02:38.520 --> 02:42.800
JSX หรือสิ่งอื่นใดที่มีคุณสมบัติเป็นองค์ประกอบตอบสนอง

02:42.800 --> 02:45.810
ดังนั้นสิ่งนี้จะไม่ถูกต้องและเราจะต้องแก้ไข

02:45.810 --> 02:50.360
ตรงนี้ เราสามารถเห็นแล้วว่า TypeScript ปรับปรุงโครงการของเราเล็กน้อยได้อย่างไร

02:50.360 --> 02:55.420
มันทำให้เรามีความปลอดภัยเป็นพิเศษและทำให้แน่ใจว่าเราไม่สามารถทำงานในสถานการณ์ที่เราสร้างส่วนประกอบที่ไม่ถูกต้อง

02:55.420 --> 02:58.353
ตัวอย่างเช่น เราสร้างส่วนประกอบที่ไม่ถูกต้อง

02:59.200 --> 03:03.230
โปรดทราบ หากดูเหมือนว่าคุณจะลืมคำสั่ง return นี้จนดูเหมือนไม่สมจริง

03:03.230 --> 03:07.970
ให้พิจารณาว่าคุณกำลังสร้างส่วนประกอบที่ใหญ่กว่าด้วยคำสั่ง if หลายรายการและคำสั่ง

03:07.970 --> 03:11.070
return ที่แตกต่างกัน

03:11.070 --> 03:14.370
คุณอาจลืมหนึ่งในสาขาหนึ่งของคำสั่ง if ของคุณ จากนั้น

03:14.370 --> 03:19.130
TypeScript สามารถช่วยคุณได้อย่างแน่นอนและแจ้งเตือนคุณเร็วกว่านั้นเล็กน้อย

03:19.130 --> 03:23.710
ระหว่างรันไทม์ ซึ่งมิฉะนั้นอาจเกิดปัญหาได้ในบางสถานการณ์

03:23.710 --> 03:25.620
นี่คือ TypeScript ที่ทำอะไรบางอย่าง

03:25.620 --> 03:27.740
แต่นั่นก็เพียงพอแล้วสำหรับการพูดคุย

03:27.740 --> 03:28.690
มาสร้างบางอย่างกันเถอะ

03:28.690 --> 03:31.670
และฉันต้องการสร้างแอปที่ค่อนข้างเรียบง่ายที่นี่

03:31.670 --> 03:36.370
แอปสิ่งที่ต้องทำ ค่อนข้างคลาสสิก แต่เป็นแอปที่ต้องทำซึ่งช่วยให้เราสามารถฝึกฝนแนวคิดหลักของการตอบสนองด้วย

03:36.370 --> 03:39.480
TypeScript

03:39.480 --> 03:41.270
ดังนั้น ในการบรรยายครั้งหน้า

03:41.270 --> 03:44.363
เรามาเริ่มส่วนประกอบแบบกำหนดเองชิ้นแรกกัน
