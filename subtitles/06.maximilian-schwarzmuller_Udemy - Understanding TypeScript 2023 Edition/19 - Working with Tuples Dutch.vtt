WEBVTT

00:02.460 --> 00:05.590
-: Dus arrays worden ondersteund en met getallen, strings,

00:05.590 --> 00:07.620
booleons, objecten en arrays.

00:07.620 --> 00:11.400
We hebben de kernwaarden of waarde types, JavaScript nos ondersteund

00:11.400 --> 00:15.100
in TypeScript, zoals u zult leren bij het voorbeeld van objecten

00:15.100 --> 00:17.884
in hun arrays, TypeScript biedt zelfs veel meer

00:17.884 --> 00:21.520
functionele het is er maar dat is een beetje meer geavanceerde,

00:21.520 --> 00:22.720
dat is waarom we een kijkje

00:22.720 --> 00:24.940
op dat later, maar zelfs deze kerntypes

00:24.940 --> 00:26.810
met wat je zult leren in de vorige

00:26.810 --> 00:30.140
lezingen worden ondersteund.

00:30.140 --> 00:33.540
Nu bevat TypeScript als een paar nieuwe concepten,

00:33.540 --> 00:37.840
nieuwe types, die we niet kennen uit vanille Java script bijvoorbeeld,

00:37.840 --> 00:40.300
het tuple type.

00:40.300 --> 00:44.360
Nu ken je tuples misschien uit andere programmeertalen,

00:44.360 --> 00:46.570
JavaScript heeft ze niet.

00:46.570 --> 00:49.570
Dit is bijvoorbeeld een tupel, en jij zou zeggen,

00:49.570 --> 00:52.290
nou dit is een array. Het is een array, maar

00:52.290 --> 00:54.520
het is een array van vaste lengte en

00:54.520 --> 00:58.650
eigenlijk niet alleen van vaste lengte maar ook van vast type.

00:58.650 --> 01:00.730
En waar kan dat handig zijn?

01:00.730 --> 01:03.350
Laten we zeggen dat we hier op onze

01:03.350 --> 01:07.830
persoon een aantal eigenschappen hebben, rol, die een array

01:07.830 --> 01:11.160
is met precies twee elementen, waarbij de

01:11.160 --> 01:14.184
eerste een numerieke identifier is zoals

01:14.184 --> 01:18.547
twee en de tweede een string identifier en een menselijk

01:18.547 --> 01:22.765
leesbare beschrijving zoals auteur.

01:22.765 --> 01:26.496
Dit moet altijd precies twee elementen hebben, want een

01:26.496 --> 01:30.100
gebruiker of een persoon in deze applicatie die we schrijven,

01:30.100 --> 01:32.720
kan maar één rol hebben en een rol bestaat

01:32.720 --> 01:35.185
maar uit twee elementen.

01:35.185 --> 01:37.400
Natuurlijk hadden we hier een optiek kunnen

01:37.400 --> 01:39.090
gebruiken, maar om een of andere reden

01:39.090 --> 01:41.744
willen we een array met precies twee elementen, waarbij

01:41.744 --> 01:43.118
het eerste element altijd de

01:43.118 --> 01:47.570
numerieke identifier is en het tweede element altijd de stringidentifier of beschrijving

01:47.570 --> 01:50.220
of hoe je het ook wilt noemen.

01:50.220 --> 01:52.420
Als we hier overheen gaan, leidt TypeScript

01:52.420 --> 01:55.730
dit vreemde type in dat we nog niet eerder hebben gezien.

01:55.730 --> 01:58.550
In feite begrijpt TypeScript dat we een array hebben

01:58.550 --> 02:01.250
die zelfs strings of getallen kan bevatten, dit

02:01.250 --> 02:03.440
is een union type en daar duiken we later

02:03.440 --> 02:06.710
in. Het belangrijkste is dat

02:06.710 --> 02:09.950
TypeScript begrijpt dat dit een array moet zijn

02:09.950 --> 02:11.668
met dit soort waarden.

02:11.668 --> 02:14.580
De downs die dood zijn We kunnen deze

02:14.580 --> 02:18.780
code wel uitvoeren, persoonsrol, push, admin.

02:18.780 --> 02:20.250
Voor onze toepassing heeft dit

02:20.250 --> 02:21.970
misschien geen zin, omdat we weten dat

02:21.970 --> 02:23.960
we maar twee elementen nodig hebben.

02:23.960 --> 02:25.790
Toch weet TypeScript niet dat we maar

02:25.790 --> 02:28.963
twee elementen willen. We zouden ook de persoonsrol,

02:28.963 --> 02:33.283
het tweede element met index één, kunnen veranderen in

02:33.283 --> 02:35.200
een nummer.

02:35.200 --> 02:38.010
Dit zou werken omdat TypeScript alleen weet dat rol

02:38.010 --> 02:42.360
van het type string of nummer array moet zijn, en daarom zou het toewijzen van

02:42.360 --> 02:44.700
een nummer hier aan het tweede element en dus

02:44.700 --> 02:46.870
het vervangen door een nummer toegestaan

02:46.870 --> 02:48.680
zijn omdat we gewoon iets zeggen

02:48.680 --> 02:50.886
over de types die we daar in het algemeen

02:50.886 --> 02:52.580
kunnen gebruiken.

02:52.580 --> 02:55.040
We weten dat we precies die structuur willen hebben.

02:55.040 --> 02:58.094
Twee elementen, eerste element nummer, tweede element string,

02:58.094 --> 03:01.770
maar TypeScript doet dat niet. Voor zo'n scenario zou

03:01.770 --> 03:05.865
een tupel perfect zijn. We kunnen TypeScript vertellen

03:05.865 --> 03:10.865
wat de rol moet zijn, door expliciet het type rol in te stellen.

03:11.010 --> 03:13.230
Dus hier hebben we ook een voorbeeld

03:13.230 --> 03:16.600
waar TypeScript niet fototypeert, maar we willen het expliciet

03:16.600 --> 03:19.927
overschrijven. Nu kunnen we hier dus een expliciet

03:19.927 --> 03:23.041
objecttype toevoegen door een dubbele punt toe te

03:23.041 --> 03:27.023
voegen na persoon, dan de accolades en dan moeten namen een string

03:27.023 --> 03:31.180
zijn, leeftijd een getal en hobby's een string-array.

03:31.180 --> 03:33.740
Dus alles zoals afgeleid door TypeScript.

03:33.740 --> 03:35.401
Dus voor dat, zouden we niet hebben vereist,

03:35.401 --> 03:36.827
deze expliciete opdracht en zoals

03:36.827 --> 03:38.789
je leert zou het slecht zijn geweest.

03:38.789 --> 03:40.470
Maar nu hebben we een scenario

03:40.470 --> 03:43.565
waarbij de inferentie niet werkt zoals we willen,

03:43.565 --> 03:47.510
en we willen de rol instellen als een tupel.

03:47.510 --> 03:49.730
Nu kunnen we, in plaats van een twee string array

03:49.730 --> 03:51.660
of een nummer array of hetzelfde type

03:51.660 --> 03:55.180
dat hier eerder geen derde was, een speciaal type gebruiken.

03:55.180 --> 03:56.810
We gebruiken weer vierkante

03:56.810 --> 04:01.710
haken, maar nu voegen we binnen de vierkante haken een getal toe, dan een komma

04:01.710 --> 04:03.637
en dan een tekenreeks.

04:03.637 --> 04:07.340
Dit markeert een tupel type hier.

04:07.340 --> 04:10.729
Een tupel is een speciale constructie, die TypeScript begrijpt,

04:10.729 --> 04:13.310
in Java zal gescript een normale array zijn, maar

04:13.310 --> 04:15.750
tijdens de ontwikkeling met TypeScript krijgen

04:15.750 --> 04:18.190
we fouten met code als deze hier.

04:18.190 --> 04:20.313
Wat doen tuples nu?

04:21.620 --> 04:23.564
Dit hier, vertelt TypeScript,

04:23.564 --> 04:27.195
ik wil een speciale array, met precies twee elementen, want

04:27.195 --> 04:30.160
ik heb er precies twee types in en het eerste element

04:30.160 --> 04:32.020
moet een getal zijn.

04:32.020 --> 04:35.436
Het tweede element moet een string zijn, dus,

04:35.436 --> 04:39.033
als we deze code hier compileren, krijg ik een

04:40.663 --> 04:45.000
foutmelding dat 10 niet toewijsbaar is als type hier,

04:45.000 --> 04:48.346
omdat we een string als tweede waarde willen

04:48.346 --> 04:50.822
hebben en als ik dan 10 toewijs als

04:50.822 --> 04:52.660
tweede waarde hier, dan

04:52.660 --> 04:56.544
volg ik duidelijk deze regel niet.

04:56.544 --> 05:01.544
Als je dit uitcommentarieert en we compileren, werkt dit.

05:02.240 --> 05:06.290
Dat is een beetje vreemd, want waarom werkt duwen hier, want

05:06.290 --> 05:08.610
we zeggen allemaal dat rol precies

05:08.610 --> 05:11.901
twee elementen moet hebben, dus waarom kunnen

05:11.901 --> 05:14.980
we hier admin op de rol-array duwen.

05:14.980 --> 05:19.300
Push is eigenlijk een uitzondering die is toegestaan in tuples.

05:19.300 --> 05:22.410
Dus helaas kan TypeScript deze fout niet opvangen, maar

05:22.410 --> 05:24.840
het zorgt er tenminste voor dat we hier geen

05:24.840 --> 05:28.570
verkeerde waarde toekennen, en buiten push krijgen we ook enige

05:28.570 --> 05:31.500
ondersteuning met betrekking tot de lengte.

05:31.500 --> 05:33.671
Als we persoon die rol op een nieuwe waarde zetten.

05:33.671 --> 05:36.420
Bijvoorbeeld, een lege array is niet toegestaan,

05:36.420 --> 05:39.710
een array met precies de structuur die we hierboven gedefinieerd

05:39.710 --> 05:43.510
hebben, is toegestaan, Als ik hier een extra element toevoeg.

05:43.510 --> 05:45.880
Dan krijgen we weer een foutmelding.

05:45.880 --> 05:49.300
Dus de lengte wordt afgedwongen als we hem zo toewijzen, maar niet voor

05:49.300 --> 05:50.720
een duwende enzovoort.

05:50.720 --> 05:52.840
Dit is iets waarvan je je bewust moet zijn,

05:52.840 --> 05:55.580
maar toch is het krijgen van deze ondersteuning

05:55.580 --> 05:57.899
en deze ondersteuning, best aardig en als

05:57.899 --> 06:02.240
je een scenario hebt waarbij je precies X aantal waarden nodig hebt in een array

06:02.240 --> 06:05.130
en je weet het type van elke waarde op voorhand, dan

06:05.130 --> 06:07.900
zou je een tupel kunnen overwegen in plaats van een

06:07.900 --> 06:11.313
array om nog meer striktheid in je app te krijgen om nog duidelijker

06:11.313 --> 06:15.230
te zijn over het type gegevens waarmee je werkt en het type gegevens dat

06:15.230 --> 06:17.543
je verwacht.
