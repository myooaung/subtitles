WEBVTT

00:02.120 --> 00:02.953
Instructor: Así que esa

00:02.953 --> 00:04.960
fue una importante primera serie de opciones.

00:04.960 --> 00:07.520
Ahora vamos a sumergirnos en estas opciones estrictas

00:07.520 --> 00:09.860
porque son bastante interesantes.

00:09.860 --> 00:12.150
Hay una opción estricta verdadera, y en realidad

00:12.150 --> 00:13.590
lo que hace es habilitar todas

00:13.590 --> 00:16.750
las opciones de comprobación estricta de tipos, por lo que efectivamente

00:16.750 --> 00:18.830
establecer esto es lo mismo que si hubieras

00:18.830 --> 00:22.110
establecido todas estas opciones por separado.

00:22.110 --> 00:24.830
Así que puedes establecer todas estas opciones una

00:24.830 --> 00:27.110
por una, o sólo establecer esta opción.

00:27.110 --> 00:29.510
Por supuesto, quieres configurar las opciones

00:29.510 --> 00:33.020
individuales si quieres tener algunas opciones en falso.

00:33.020 --> 00:34.790
Porque si no, están todos puestos en verdadero.

00:34.790 --> 00:36.520
Si quieres que todos sean verdaderos,

00:36.520 --> 00:39.290
entonces usar sólo esta opción es, por supuesto, más corto.

00:39.290 --> 00:41.360
Ahora bien, ¿qué hacen estas opciones?

00:41.360 --> 00:43.213
Empecemos con noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny es una opción bastante interesante que nos ayuda

00:47.410 --> 00:49.180
a escribir mejor el código.

00:49.180 --> 00:51.370
Vamos a nuestro archivo de análisis aquí,

00:51.370 --> 00:53.963
y allí vamos a añadir una función, sendAnalytics,

00:55.270 --> 00:58.070
que obtiene una opción de datos digamos, y allí podríamos

00:58.070 --> 01:01.010
enviar esto a un servidor, pero aquí sólo estoy registrando

01:01.010 --> 01:03.430
la consola.

01:03.430 --> 01:07.500
Luego llamo a sendAnalytics con los datos, así

01:07.500 --> 01:08.920
con la cadena.

01:08.920 --> 01:11.080
Ahora como ves mi IDE ya se queja aquí y también

01:11.080 --> 01:13.160
lo hace el compilador de TypeScript, porque

01:13.160 --> 01:14.960
los dos por supuesto están conectados

01:14.960 --> 01:17.040
si traté de compilar esto.

01:17.040 --> 01:20.070
Los datos de los parámetros tienen implícitamente un tipo cualquiera.

01:20.070 --> 01:21.350
Así que esto parece estar

01:21.350 --> 01:23.940
relacionado con esta opción noImplicitAny.

01:23.940 --> 01:27.150
Efectivamente, si pongo esto en falso, es decir, si pongo todas

01:27.150 --> 01:29.300
las opciones estrictas en verdadero pero

01:29.300 --> 01:31.521
pongo esta opción en falso, lo cual puedo hacer,

01:31.521 --> 01:33.810
entonces este error desaparece.

01:33.810 --> 01:37.140
Tanto en el IDE como cuando compilamos el código.

01:37.140 --> 01:38.730
¿Qué hace esta opción?

01:38.730 --> 01:41.440
Asegura, y lo comentaré de nuevo para activarlo

01:41.440 --> 01:44.210
de nuevo por estricto verdadero, asegura

01:44.210 --> 01:47.050
que tenemos que ser claros sobre nuestros parámetros,

01:47.050 --> 01:49.410
sobre los valores con los que estamos

01:49.410 --> 01:53.020
trabajando en nuestro código.

01:53.020 --> 01:56.600
Aquí no damos a TypeScript ninguna información sobre

01:56.600 --> 01:59.930
el tipo de datos que obtendremos como parámetro.

01:59.930 --> 02:01.320
Y deberíamos hacerlo.

02:01.320 --> 02:03.800
Si TypeScript es capaz de inferir esto, entonces por

02:03.800 --> 02:05.360
supuesto, está bien, pero aquí cómo

02:05.360 --> 02:08.770
podría TypeScript ser capaz de inferirlo a partir de esta línea, bueno ten

02:08.770 --> 02:11.470
en cuenta que esta función se declara primero antes de que

02:11.470 --> 02:12.950
este archivo se ejecute.

02:12.950 --> 02:15.080
Por lo tanto, en el momento en que se crea la función

02:15.080 --> 02:18.380
no hay ninguna posibilidad de saber lo que acabará en ella.

02:18.380 --> 02:20.100
Así que aquí podemos solucionar este

02:20.100 --> 02:22.570
error simplemente declarando el tipo y teniendo claro

02:22.570 --> 02:24.253
qué tipo utilizamos ahí.

02:25.100 --> 02:29.530
Ahora tenga en cuenta que si usted tenía una variable registrada, ya que se establece

02:29.530 --> 02:32.650
esto a la verdad aquí, usted no recibe un error acerca de esta

02:32.650 --> 02:34.720
declaración a pesar de que también obtener

02:34.720 --> 02:37.670
un tipo predeterminado de cualquier.

02:37.670 --> 02:39.250
Para las variables esto está bien.

02:39.250 --> 02:40.910
Para los parámetros no está bien.

02:40.910 --> 02:42.480
¿Por qué está bien para las variables?

02:42.480 --> 02:44.370
Porque lo que hace TypeScript para las variables,

02:44.370 --> 02:45.940
lo que es posible para las variables,

02:45.940 --> 02:47.040
lo que no es posible aquí porque

02:47.040 --> 02:48.880
la función se crea primero.

02:48.880 --> 02:52.490
Aquí TypeScript es capaz de rastrear los valores que usted asigna.

02:52.490 --> 02:54.650
Usted ve, de acuerdo, tengo

02:54.650 --> 02:56.720
registrado aquí como este,

02:56.720 --> 02:58.573
ahora lo puse a true, por

02:59.430 --> 03:08.030
lo tanto, a partir de entonces, si la consola de registro registrado aquí, es un booleano.

03:08.030 --> 03:10.300
Así que TypeScript es aquí capaz de entender

03:10.300 --> 03:11.893
el flujo de tu código, y por lo

03:11.893 --> 03:14.320
tanto, no necesitas ser preciso con respecto

03:14.320 --> 03:15.430
a un tipo aquí.

03:15.430 --> 03:18.020
Por supuesto, quieres ser preciso si quieres evitar

03:18.020 --> 03:20.310
que puedas asignar libremente el nuevo valor,

03:20.310 --> 03:22.940
lo que puedes hacer aquí porque es de tipo any.

03:22.940 --> 03:25.700
Así que todavía quieres asignar un tipo para evitar esto, pero

03:25.700 --> 03:27.680
TypeScript es al menos capaz de averiguar si

03:27.680 --> 03:29.490
el código que estás llamando funciona con

03:29.490 --> 03:31.410
el tipo que tiene actualmente.

03:31.410 --> 03:32.410
Ese no es el caso aquí

03:32.410 --> 03:35.360
porque allí la función se define antes de llamarla, y por

03:35.360 --> 03:37.800
lo tanto, TypeScript no tendría cambio de saber

03:37.800 --> 03:39.570
si lo que pasas ahí puede ser usado

03:39.570 --> 03:41.393
dentro de la función.

03:43.280 --> 03:46.020
strictNullChecks nunca es una opción importante.

03:46.020 --> 03:48.520
En realidad está relacionado con nuestra selección de botones

03:48.520 --> 03:49.410
que tenemos aquí.

03:49.410 --> 03:51.820
Recuerda que tuve que añadir este signo de exclamación aquí para

03:51.820 --> 03:52.670
que funcionara.

03:52.670 --> 03:54.380
De lo contrario, obtendría un error.

03:54.380 --> 03:56.220
Ahora también podemos deshacernos

03:56.220 --> 03:58.430
de ese error sin añadir el signo de exclamación

03:58.430 --> 04:02.090
estableciendo strictNullChecks a false.

04:02.090 --> 04:04.200
Así que hagamos eso aquí y guardemos esto.

04:04.200 --> 04:07.860
Y como veis este error ya ha desaparecido aquí.

04:07.860 --> 04:10.120
Y puedo compilar todos los archivos.

04:10.120 --> 04:12.340
¿Qué hacen ahora los strictNullChecks?

04:12.340 --> 04:16.160
Le dicen a TypeScript que sea bastante, bien estricto con

04:16.160 --> 04:19.410
respecto a cómo acceder y trabajar con valores que

04:19.410 --> 04:22.530
potencialmente podrían tener un valor nulo.

04:22.530 --> 04:24.850
Y el botón aquí puede ser nulo.

04:24.850 --> 04:29.210
No siempre apunta a un elemento de botón.

04:29.210 --> 04:31.390
No siempre está apuntando a tal elemento

04:31.390 --> 04:34.220
porque aunque tenga tal selector aquí, un botón podría

04:34.220 --> 04:36.900
simplemente no existir en la página en la que se ejecuta

04:36.900 --> 04:38.490
este script.

04:38.490 --> 04:40.840
Y por lo tanto, TypeScript no puede decirlo

04:40.840 --> 04:43.790
porque no está buceando en tu archivo html y mirando

04:43.790 --> 04:44.900
eso.

04:44.900 --> 04:48.240
No se puede saber si esto tendrá éxito o no.

04:48.240 --> 04:53.130
Y si esto no devuelve un puntero y un nodo nulo, entonces devolverá

04:53.130 --> 04:56.650
null, bueno undefined para ser precisos, pero

04:56.650 --> 04:59.090
eso se trata igualmente aquí.

04:59.090 --> 05:01.610
Por lo tanto, ese botón podría tener un valor nulo, y por

05:01.610 --> 05:03.530
lo tanto este código podría fallar.

05:03.530 --> 05:06.610
Efectivamente, si comento este botón de aquí, si ahora compilo

05:06.610 --> 05:08.480
todo funciona porque he desactivado

05:08.480 --> 05:10.733
las comprobaciones de nulos.

05:12.000 --> 05:14.100
Pero, por lo tanto, ahora tengo un error en tiempo

05:14.100 --> 05:16.210
de ejecución porque no puedo llamar al oyente de

05:16.210 --> 05:18.230
eventos, addEventListener, en null.

05:18.230 --> 05:20.970
Y tengo nulo aquí porque no tengo ningún botón.

05:20.970 --> 05:23.110
Ahora bien, este es un error que podríamos

05:23.110 --> 05:26.760
evitar estableciendo strictNullChecks a true.

05:26.760 --> 05:30.340
Y eso se establece automáticamente si tenemos estricto establecido en true.

05:30.340 --> 05:34.450
Donde TypeScript anticipa que esto puede suceder, y

05:34.450 --> 05:38.600
por lo tanto, nos obliga a trabajar alrededor de eso.

05:38.600 --> 05:40.640
Ahora una solución barata es este operador

05:40.640 --> 05:42.820
de signo de exclamación aquí.

05:42.820 --> 05:46.020
Esto le dice a TypeScript que usted, el desarrollador,

05:46.020 --> 05:48.360
sabe que este botón existe, o que

05:48.360 --> 05:53.360
esta operación producirá un valor no nulo.

05:53.710 --> 05:55.830
Ahora tal vez lo hagas, ciertamente

05:55.830 --> 05:58.990
lo haces si sabes que estás trabajando en el código

05:58.990 --> 06:00.430
HTML y que hay un botón aquí,

06:00.430 --> 06:03.310
que este selector aquí funcionará.

06:03.310 --> 06:05.610
Por lo tanto, estaría bien utilizar el signo de exclamación

06:05.610 --> 06:06.623
en este escenario.

06:07.600 --> 06:09.040
Si tienes otro escenario en

06:09.040 --> 06:11.120
el que no sabes con certeza si funciona

06:11.120 --> 06:13.050
y sólo esperas que funcione, entonces

06:13.050 --> 06:14.170
podría ser mejor simplemente

06:14.170 --> 06:18.210
envolver el código que podría fallar en una comprobación if, que también estará

06:18.210 --> 06:21.570
ahí en tiempo de ejecución, por supuesto.

06:21.570 --> 06:24.960
Podrías simplemente comprobar si el botón es verdadero aquí,

06:24.960 --> 06:27.510
lo que no será si es nulo o indefinido.

06:27.510 --> 06:30.060
Y mover ese código en este si comprobar aquí.

06:30.060 --> 06:32.470
Ahora, incluso sin el signo de exclamación,

06:32.470 --> 06:35.810
en el modo strictNullChecks no obtenemos ningún error

06:35.810 --> 06:37.600
porque TypeScript entiende

06:37.600 --> 06:39.750
que este código está dentro de esta

06:39.750 --> 06:41.991
sentencia if y que esta sentencia if

06:41.991 --> 06:46.310
se asegura de que el botón no es nulo y que esto no fallará.

06:46.310 --> 06:49.310
Así que esta podría ser la solución más limpia.

06:49.310 --> 06:51.060
Sin embargo, por supuesto, para

06:51.060 --> 06:54.350
ahorrar código, si se sabe con certeza que algo existe, usar el

06:54.350 --> 06:56.550
signo de exclamación es más corto y una opción

06:56.550 --> 06:58.320
absolutamente correcta.

06:58.320 --> 07:00.450
Aquí he dicho las dos cosas para que veamos las dos cosas,

07:00.450 --> 07:02.450
por supuesto solo hace falta una de las dos cosas,

07:02.450 --> 07:04.520
o el check de if, o el signo de exclamación.

07:04.520 --> 07:07.680
strictFunctionTypes aquí es una configuración

07:07.680 --> 07:12.010
un poco más avanzada que atrapa alguna caja de nicho que puede

07:12.010 --> 07:14.830
no tener en muchas aplicaciones.

07:14.830 --> 07:17.340
Está relacionado con, bueno, los tipos de funciones que

07:17.340 --> 07:18.380
se pueden configurar.

07:18.380 --> 07:20.650
Así que no los tipos dentro de las funciones,

07:20.650 --> 07:23.690
pero si defines cómo debe ser una función en cuanto a sus

07:23.690 --> 07:26.220
parámetros y valor de retorno, y creas ese tipo

07:26.220 --> 07:27.840
de función del que aprendiste

07:27.840 --> 07:29.990
en el módulo de fundamentos, entonces

07:29.990 --> 07:32.650
ahí puedes introducir caja si trabajas con clases

07:32.650 --> 07:35.560
y herencia, que aún no hemos aprendido, que aún no hemos

07:35.560 --> 07:36.950
usado, y por lo tanto, por

07:36.950 --> 07:39.683
ahora vamos a ignorar esto.

07:40.578 --> 07:43.630
strictBindCallApply, que puede ser útil

07:43.630 --> 07:46.840
si se trabaja con bind, call o apply.

07:46.840 --> 07:49.680
Para ello, veamos rápidamente un ejemplo.

07:49.680 --> 07:52.040
Aquí tenemos nuestro botón y nuestra función allí.

07:52.040 --> 07:57.040
Ahora digamos que esto sería una función, que definimos aquí con la palabra

07:57.780 --> 08:01.100
clave function, o como una función de error.

08:01.100 --> 08:03.650
No importa, usaré la palabra clave de la función aquí.

08:04.731 --> 08:09.731
clickHandler, y en ella consola. registro pulsado.

08:11.960 --> 08:13.810
Y ahora aquí apuntamos a clickHandler,

08:13.810 --> 08:15.560
y por alguna razón, queremos asegurarnos

08:15.560 --> 08:17.670
de que cuando esto se ejecuta, pasamos ciertos

08:17.670 --> 08:19.330
argumentos o establecemos la palabra

08:19.330 --> 08:22.780
clave this allí a un cierto valor.

08:22.780 --> 08:26.480
Ahora digamos que aquí sí esperamos un argumento de mensaje, que

08:26.480 --> 08:28.110
debería ser una cadena.

08:28.110 --> 08:32.110
Y también queremos dar salida a esto aquí.

08:32.110 --> 08:34.400
Ahora bien, como el clickHandler se pasa a

08:34.400 --> 08:36.010
addEventListener así para que

08:36.010 --> 08:39.080
el navegador básicamente ejecute esto por nosotros, si

08:39.080 --> 08:41.070
queremos preconfigurar los argumentos

08:41.070 --> 08:43.570
que se pasarán, podemos usar bind.

08:43.570 --> 08:47.000
Y bind, como primer argumento, toma aquello a lo que queremos

08:47.000 --> 08:49.320
vincular la palabra clave this.

08:49.320 --> 08:51.650
Y aquí podríamos decir que no nos importa

08:51.650 --> 08:53.580
porque no estamos usando esto en la

08:53.580 --> 08:55.930
función, así que lo vinculamos a null.

08:55.930 --> 08:57.700
Ahora ves que aquí me sale un error.

08:57.700 --> 09:00.610
Obtengo un error que se puede evitar

09:00.610 --> 09:04.613
si establezco strictBindCallApply en false.

09:07.040 --> 09:08.680
Ahora ves que el error ha desaparecido.

09:08.680 --> 09:10.501
Por lo tanto, ¿qué hace esta opción?

09:10.501 --> 09:14.180
Básicamente comprueba a qué función estás llamando

09:14.180 --> 09:16.020
bind, call o apply.

09:16.020 --> 09:20.080
Y comprueba si lo que estás configurando aquí tiene sentido.

09:20.080 --> 09:23.440
Y aquí TypeScript ve que queremos un argumento, queremos

09:23.440 --> 09:25.450
el parámetro en clickHandler.

09:25.450 --> 09:28.260
Sin embargo, con bind no estamos configurando eso.

09:28.260 --> 09:30.600
Y por lo tanto, aquí tenemos un error.

09:30.600 --> 09:32.180
Si vuelvo a ponerlo en true,

09:32.180 --> 09:34.000
o simplemente lo comento porque,

09:34.000 --> 09:36.230
por supuesto, está puesto en true por defecto

09:36.230 --> 09:37.870
al poner strict en true, volvemos

09:37.870 --> 09:39.790
a tener el error.

09:39.790 --> 09:42.350
Ahora bien, si no esperáramos un argumento aquí,

09:42.350 --> 09:44.750
ves que el error desaparecería ahí abajo si sólo

09:44.750 --> 09:46.200
quitáramos el mensaje, porque

09:46.200 --> 09:48.140
TypeScript entiende nuestro código

09:48.140 --> 09:50.660
y ve que no estás pasando ningún argumento a ese

09:50.660 --> 09:52.580
método o a esta función porque no toma

09:52.580 --> 09:54.760
ninguno, así que está bien.

09:54.760 --> 09:57.420
Pero claro, aquí queremos uno y nos da error.

09:57.420 --> 10:00.880
La solución es proporcionar este segundo argumento

10:00.880 --> 10:04.350
aquí, que es el primer argumento que quieres pasar.

10:04.350 --> 10:06.290
Ahora TypeScript es realmente inteligente aquí.

10:06.290 --> 10:08.120
Y por ejemplo, si le paso un número,

10:08.120 --> 10:10.310
igual se quejaría porque entiende que aquí

10:10.310 --> 10:11.610
necesito una cadena.

10:12.500 --> 10:15.960
Sin embargo, si paso una cadena correcta, como "you're

10:15.960 --> 10:17.350
welcome", entonces

10:17.350 --> 10:19.070
ya no se queja porque no entiende

10:19.070 --> 10:21.210
esto y ve que esto coincide con

10:21.210 --> 10:24.840
la definición de mi función aquí.

10:24.840 --> 10:27.370
Así que este es un comportamiento muy útil que se asegura

10:27.370 --> 10:30.260
de que usted no utiliza accidentalmente bind, call o apply

10:30.260 --> 10:32.743
de una manera que no funciona con su código.

10:33.930 --> 10:36.600
Ahora strictPropertyInitialization se vuelve importante una vez

10:36.600 --> 10:37.810
que trabajamos con clases.

10:37.810 --> 10:39.213
Podemos ignorarlo por ahora.

10:39.213 --> 10:41.890
noImplicitEsto tampoco importa ahora mismo.

10:41.890 --> 10:43.650
Tiene que ver con la palabra clave

10:43.650 --> 10:45.980
this y TypeScript básicamente trata de advertirte

10:45.980 --> 10:48.240
si usas la palabra clave this en un lugar donde

10:48.240 --> 10:51.020
no está claro a qué se refiere.

10:51.020 --> 10:53.210
Y alwaysStrict simplemente controla

10:53.210 --> 10:55.560
que los archivos JavaScript que se generen

10:55.560 --> 10:58.663
utilicen el modo estricto para que esto se añada.

10:59.710 --> 11:02.383
Con eso, cubrimos todas estas opciones estrictas.
