WEBVTT

00:02.340 --> 00:05.860
-: Als je nu werkt met union-types, zoals deze en

00:05.860 --> 00:06.970
deze, kan het omslachtig

00:06.970 --> 00:11.070
zijn om steeds het union-type te herhalen.

00:11.070 --> 00:13.070
Misschien wilt u een nieuw type verhandelen

00:13.070 --> 00:15.330
dat dit unie-type opnieuw installeert.

00:15.330 --> 00:18.540
En dat kun je doen met een andere coole typemogelijkheid,

00:18.540 --> 00:21.410
die van de type-aliassen.

00:21.410 --> 00:22.723
Zo'n alias maak je aan,

00:24.280 --> 00:25.670
meestal voordat je hem

00:25.670 --> 00:29.240
gebruikt, dus hier bovenaan het bestand in dit geval, met

00:29.240 --> 00:31.240
het sleutelwoord type.

00:31.240 --> 00:34.040
Nu is het type sleutelwoord niet ingebouwd in JavaScript,

00:34.040 --> 00:35.880
maar het wordt wel ondersteund

00:35.880 --> 00:40.450
in TypeScript, en na type voeg je de naam van je aangepaste type toe, of van je type

00:40.450 --> 00:42.860
alias, moet ik zeggen.

00:42.860 --> 00:44.980
Bijvoorbeeld combineerbaar.

00:44.980 --> 00:46.720
Maar de naam is echt aan jou.

00:46.720 --> 00:48.380
U kunt hier elke naam verzinnen

00:48.380 --> 00:50.520
die niet in JavaScript of TypeScript

00:50.520 --> 00:52.530
is ingebouwd als sleutelnaam.

00:52.530 --> 00:54.360
Dus iets als date zou niet zijn toegestaan

00:54.360 --> 00:56.250
omdat dat in JavaScript is ingebouwd, maar

00:56.250 --> 00:58.900
combinable is niet ingebouwd in JavaScript, niet ingebouwd

00:58.900 --> 01:01.170
in TypeScript, zodat we het kunnen gebruiken.

01:01.170 --> 01:04.550
En nu wijs je met het gelijkheidsteken het type

01:04.550 --> 01:08.320
toe dat je wilt coderen in je alias, zeg maar.

01:08.320 --> 01:10.300
Dus we kunnen hier een getal opslaan,

01:10.300 --> 01:12.790
en als we nu zeker willen weten dat iets een getal

01:12.790 --> 01:14.390
moet zijn, kunnen we in plaats

01:14.390 --> 01:16.400
daarvan combineerbaar gebruiken.

01:16.400 --> 01:18.570
Nu heeft dat niet zoveel zin, het zou

01:18.570 --> 01:21.630
onze code zelfs moeilijker leesbaar maken.

01:21.630 --> 01:25.500
Als ik daar beneden bijvoorbeeld combineerbaar gebruik, zou

01:25.500 --> 01:27.420
dit technisch werken, maar als

01:27.420 --> 01:29.550
we onze code even bekijken, is het niet

01:29.550 --> 01:33.180
duidelijk dat we hier een getal of een string willen.

01:33.180 --> 01:35.560
Nou, daarom gebruik je dat meestal in

01:35.560 --> 01:37.500
combinatie met union types.

01:37.500 --> 01:40.380
We kunnen dus een unie-type opslaan in ons aangepaste

01:40.380 --> 01:42.250
type, zogezegd in onze type alias,

01:42.250 --> 01:45.240
en nu gewoon verwijzen naar combineerbaar daar beneden

01:45.240 --> 01:48.170
in plaats van ons unie-type.

01:48.170 --> 01:51.060
We hebben dus precies dezelfde opzet als voorheen, alleen

01:51.060 --> 01:54.230
hebben we hier onze herbruikbare type alias die we in plaats daarvan

01:54.230 --> 01:55.580
kunnen gebruiken.

01:55.580 --> 01:57.660
En daarmee kunnen we wat extra code besparen

01:57.660 --> 01:59.200
en ervoor zorgen dat we altijd verwijzen

01:59.200 --> 02:04.200
naar dezelfde types of dezelfde type-opzet wanneer we combineerbaar gebruiken.

02:04.234 --> 02:06.600
En natuurlijk kunnen we dat niet alleen gebruiken

02:06.600 --> 02:08.970
voor getallen en tekenreeksen, we kunnen dat gebruiken

02:08.970 --> 02:11.140
voor elke typeopstelling die we in een alias willen

02:11.140 --> 02:14.810
opslaan, inclusief deze twee letterlijke types, bijvoorbeeld.

02:14.810 --> 02:18.210
Dus, voor deze twee types hier, voor dit unie-type,

02:18.210 --> 02:20.660
kunnen we ook het type alias, ConversionDescriptor,

02:20.660 --> 02:24.030
of hoe je het ook wilt noemen, inruilen en precies

02:24.030 --> 02:28.920
dit type in dit type alias opslaan.

02:28.920 --> 02:32.270
En nu kunnen we dit type alias daar beneden gebruiken.

02:32.270 --> 02:34.970
Dus type aliassen zijn echt, echt nuttig.

02:34.970 --> 02:37.490
U kunt complexere typedefinities coderen

02:37.490 --> 02:40.860
in uw eigen types, in uw eigen typenamen, om zo te zeggen,

02:40.860 --> 02:43.120
en dat overal in uw code hergebruiken

02:43.120 --> 02:45.920
waar u precies deze type-opzet nodig hebt.

02:45.920 --> 02:48.060
Zodat u daar beneden typefouten voorkomt

02:48.060 --> 02:51.000
en u eenvoudig code kunt opslaan, sneller code kunt schrijven,

02:51.000 --> 02:53.490
en altijd duidelijker bent over uw bedoelingen,

02:53.490 --> 02:56.010
bijvoorbeeld door daarboven beschrijvende type-aliasnamen

02:56.010 --> 02:57.653
te kiezen.
