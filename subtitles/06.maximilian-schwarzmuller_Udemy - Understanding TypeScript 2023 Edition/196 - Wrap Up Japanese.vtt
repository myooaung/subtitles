WEBVTT

00:02.320 --> 00:04.290
講師：では､ このモジュールはこれで終わりです｡ 

00:04.290 --> 00:05.660
node expressアプリケーションでtypescriptを使用する方法､

00:05.660 --> 00:16.320
express用やnode用の追加のタイプをインストールすることで､ ファイル内でtypescriptの素晴らしいサポートを得られることを学びました｡

00:16.320 --> 00:19.990
いつも書いているようなアプリケーションを書くということ｡

00:19.990 --> 00:23.720
しかし､ 例えば､ インポートとエクスポートの構文は異なりますし､

00:23.720 --> 00:29.300
もちろん型も使えますし､ その他に学んだtypescriptの機能も使えます｡

00:29.300 --> 00:31.080
インターフェイスやデコレーター､

00:31.080 --> 00:33.080
eNomやQPUllsなど､

00:33.080 --> 00:37.840
タイプスクリプト専用のものを使うこともできます｡

00:37.840 --> 00:39.310
ここでは､ 通常のtypescriptアプリケーションを書いていて､

00:39.310 --> 00:48.050
通常のtypescriptコンパイラでコンパイルされ､ 通常のJavascriptコードになるので､ これですべてうまくいきます｡

00:48.050 --> 00:52.750
Javascriptのコードをnode JSで実行します｡ 

00:52.750 --> 00:54.450
もし､ typescriptとnode

00:54.450 --> 00:57.720
expressの使い方の例をもっと知りたいなら､ もちろん､ node

00:57.720 --> 00:58.910
express typescriptでググれば､

00:58.910 --> 01:02.840
もっと多くの例を見つけることができますよ｡

01:02.840 --> 01:06.980
でも､ NestJSのチェックも強くお勧めできます｡

01:06.980 --> 01:10.390
ノードなんです｡  このモジュールで見たように､

01:10.390 --> 01:15.310
node expressをtypescriptで動作させることができる一方で､

01:15.310 --> 01:21.740
typescriptを受け入れるjsフレームワークもあります｡

01:21.740 --> 01:26.960
そして､ デコレーターなどのTypescriptの機能をすべて受け入れています｡

01:26.960 --> 01:30.910
NestJSを使用すると､ ノードWebアプリケーション､ レストAPIだけでなく､

01:30.910 --> 01:36.440
ビューやグラフQLAPをレンダリングするアプリケーションを構築することができます｡

01:36.440 --> 01:38.930
それをすべてnodeで構築することができるのです｡  このプロジェクトでは､

01:38.930 --> 01:46.950
デコレータやインターフェイスなどの機能を多用しています｡

01:46.950 --> 01:50.200
もし､ あなたがnodeとtypescriptでサービスサイドのWebアプリケーションを作りたいのであれば､

01:50.200 --> 01:53.580
ぜひNestJSをチェックしてみてください｡

01:53.580 --> 02:00.350
素晴らしいフレームワークで､ 使っていて本当に楽しいし､ typescriptが提供するクールな機能をすべて使うことができるんだ｡

02:00.350 --> 02:05.310
そのため､ カスタムタイプのインストールやワークアラウンドなどは必要ありません｡

02:05.310 --> 02:08.913
また､ タイプスクリプトのサポートも充実しています｡ 
