WEBVTT

00:02.200 --> 00:04.080
Instruktor: Czas na kolejny nowy plik.

00:04.080 --> 00:09.080
Zmienię nazwę aplikacji. ts tutaj, aby połączyć aliasy. ts, i dodać nową

00:11.100 --> 00:13.760
aplikację. ts plik, w którym możemy

00:13.760 --> 00:16.370
zacząć od nowa, zamykając inny plik.

00:16.370 --> 00:20.660
A teraz w tym miejscu chcę zanurkować nieco głębiej w funkcje.

00:20.660 --> 00:22.640
Teraz oczywiście z już wypracowanymi funkcjami.

00:22.640 --> 00:24.940
Na przykład tutaj w pliku union aliases

00:24.940 --> 00:26.340
z funkcją combine.

00:26.340 --> 00:29.260
I na przykład widziałeś, że dla funkcji możesz

00:29.260 --> 00:32.520
przypisać typy do parametrów funkcji.

00:32.520 --> 00:34.310
Cóż, okazuje się, że z funkcjami

00:34.310 --> 00:36.483
i typami można zrobić nieco więcej.

00:37.590 --> 00:40.430
W tym celu odtworzę moją funkcję add, która

00:40.430 --> 00:43.373
po prostu akceptuje liczby, a nie ciągi.

00:44.270 --> 00:48.340
Który robi jedną prostą rzecz, zwraca n jeden plus n dwa, więc nie jest zbyt

00:48.340 --> 00:49.513
skomplikowany.

00:51.004 --> 00:53.740
Jak wspomniałem, możemy przypisywać typy do parametrów,

00:53.740 --> 00:55.180
to nie jest nowość.

00:55.180 --> 00:57.030
Funkcja ogólna ma jednak

00:57.030 --> 01:01.050
jeden ważny inny typ, ma typ zwrotny.

01:01.050 --> 01:03.990
I tutaj typ zwrotu jest wnioskowany przez TypeScript.

01:03.990 --> 01:06.490
Możemy go zobaczyć, jeśli najedziemy na add.

01:06.490 --> 01:10.760
Tutaj na końcu, po dwukropku po liście parametrów,

01:10.760 --> 01:14.190
ten tutaj, opisuje typ zwrotny funkcji.

01:14.190 --> 01:16.800
Czyli typ zwracanej wartości.

01:16.800 --> 01:20.020
Tutaj zwracam dodanie n jeden i n dwa.

01:20.020 --> 01:23.050
A ponieważ oba te wejścia są liczbami, TypeScript jest

01:23.050 --> 01:24.930
w stanie wywnioskować, że wynikiem

01:24.930 --> 01:26.770
tego będzie liczba, a ponieważ zwracamy

01:26.770 --> 01:28.820
ją, że typem zwrotnym danych tej funkcji

01:28.820 --> 01:30.830
będzie liczba.

01:30.830 --> 01:33.320
Jeśli konkatenowałbyś je jako ciągi

01:33.320 --> 01:35.363
tutaj, na przykład za pomocą toString,

01:36.550 --> 01:39.030
wtedy TypeScript poprawnie wywnioskowałby,

01:39.030 --> 01:41.900
że zwracamy tutaj ciąg.

01:41.900 --> 01:44.350
Oczywiście zawsze możemy jawnie przypisać

01:44.350 --> 01:46.910
typ zwrotu, dodając dwukropek po liście parametrów,

01:46.910 --> 01:48.490
a następnie typ, który chcemy

01:48.490 --> 01:51.263
zwrócić, np. liczba.

01:52.850 --> 01:54.560
Byłby to ten sam typ, co inferencja.

01:54.560 --> 01:56.760
Gdybym na przykład ustawił to na ciąg,

01:56.760 --> 02:00.020
otrzymałbym tutaj błąd, ponieważ oczywiście moje obliczenia

02:00.020 --> 02:03.540
tutaj nie pasują do mojego opisanego typu zwrotu.

02:03.540 --> 02:06.480
Podobnie jak w przypadku zmiennych, dobrze jest pozwolić

02:06.480 --> 02:10.080
TypeScriptowi wykonać swoją pracę w zakresie wnioskowania o typie.

02:10.080 --> 02:12.610
A jeśli nie masz konkretnego powodu, aby

02:12.610 --> 02:14.810
jawnie ustawić typ, nie powinieneś

02:14.810 --> 02:17.090
więc ustawiać typu, a zamiast tego pozwolić

02:17.090 --> 02:20.470
TypeScriptowi na wnioskowanie o typie.

02:20.470 --> 02:22.660
Jeśli chodzi o typy zwracane, jest jeden interesujący

02:22.660 --> 02:25.910
typ, którego nie widzieliśmy wcześniej i który może być dla Ciebie

02:25.910 --> 02:27.530
zupełnie nowy, jeśli masz doświadczenie

02:27.530 --> 02:30.240
z innymi językami programowania.

02:30.240 --> 02:31.200
Ponieważ jest to typ, który

02:31.200 --> 02:33.250
tak naprawdę nie istnieje w JavaScript.

02:33.250 --> 02:35.180
Jest to typ pustki.

02:35.180 --> 02:38.160
Załóżmy, że mamy metodę printResult.

02:38.160 --> 02:41.190
Tam otrzymujemy argument liczby, który

02:41.190 --> 02:44.120
powinien być, no cóż, liczbą.

02:44.120 --> 02:47.510
A w nim chcę pocieszyć. log num.

02:47.510 --> 02:49.450
A ja chcę pocieszyć. zaloguj go jako

02:49.450 --> 02:52.150
część ciągu, gdzie mówię wynik plus num.

02:52.150 --> 02:53.670
Więc teraz to będzie konkatenowane

02:53.670 --> 02:56.090
do jednego długiego ciągu i zostanie wyprowadzone.

02:56.090 --> 02:57.777
I teraz mogę wywołać printResult.

02:57.777 --> 03:01.020
I na przykład przepuścić przez to wynik mojego

03:01.020 --> 03:05.010
wywołania funkcji add, z pięcioma plus, powiedzmy, 12.

03:05.010 --> 03:07.670
Więc wykonuję dodanie tutaj, z dwoma numerami.

03:07.670 --> 03:10.160
A wynik tego, czyli to co zwraca add, jest następnie

03:10.160 --> 03:13.130
przekazywane jako argument do printResult.

03:13.130 --> 03:15.780
I to powinno wydrukować to do konsoli.

03:15.780 --> 03:19.150
Jeśli teraz skompilujemy to, a następnie spojrzymy

03:19.150 --> 03:21.110
na to w naszej stronie lub na naszej

03:21.110 --> 03:24.280
stronie tutaj, widzimy wynik 17, co ma sens.

03:24.280 --> 03:25.660
Teraz interesującą rzeczą

03:25.660 --> 03:27.640
jest tutaj typ zwrotny printResult.

03:27.640 --> 03:30.353
Jak byś się domyślał, jaki jest tutaj typ zwrotu?

03:31.240 --> 03:33.240
Więc może myślisz, że to ciąg, ponieważ

03:33.240 --> 03:35.150
tworzę ciąg w tym miejscu.

03:35.150 --> 03:37.360
Ale pamiętaj, że my tego nie zwracamy.

03:37.360 --> 03:39.400
Nic tu nie zwracamy.

03:39.400 --> 03:42.010
I dlatego ta funkcja printResult

03:42.010 --> 03:44.990
tutaj ma specjalny typ zwrotu, void.

03:44.990 --> 03:47.910
Teraz możesz zauważyć void return type z innych

03:47.910 --> 03:49.830
języków programowania.

03:49.830 --> 03:52.230
Tam masz coś takiego.

03:52.230 --> 03:53.940
JavaScript tak naprawdę tego

03:53.940 --> 03:56.740
nie wie, albo nie ma nazwy dla tej sytuacji.

03:56.740 --> 03:58.590
TypeScript jednak to robi.

03:58.590 --> 04:01.840
Więc rzeczywiście, ta funkcja tutaj ma typ zwrotny void.

04:01.840 --> 04:04.065
I oczywiście nie trzeba go tutaj określać.

04:04.065 --> 04:06.440
Wnioskowanie w TypeScript wykonało swoje zadanie.

04:06.440 --> 04:07.630
Ale chcę naprawdę wyraźnie

04:07.630 --> 04:09.610
zaznaczyć, że ma to typ zwrotny void,

04:09.610 --> 04:13.730
dlatego dodaję go tutaj, dla celów demonstracyjnych.

04:13.730 --> 04:17.070
Teraz, void naprawdę oznacza tylko, że ta funkcja

04:17.070 --> 04:21.020
nie ma deklaracji return, nie zwraca niczego.

04:21.020 --> 04:24.540
Z powodzeniem kończy, wykonuje swoje zadanie.

04:24.540 --> 04:28.170
Wykonuje swój kod, nie daje błędu ani niczego

04:28.170 --> 04:32.550
takiego, ale następnie nie zwraca niczego.

04:32.550 --> 04:34.990
To jest typ zwrotny void.

04:34.990 --> 04:37.330
Teraz technicznie w JavaScript, oczywiście, gdybyśmy

04:37.330 --> 04:39.490
konsolowali. zaloguj wynik

04:39.490 --> 04:43.550
printResult tutaj i teraz kompiluję to, i widzimy, co

04:43.550 --> 04:46.270
dostaje wyjście tutaj na stronie.

04:46.270 --> 04:49.480
Widzimy, że undefined jest przez to zwracane.

04:49.480 --> 04:51.540
Więc technicznie, i to jest naprawdę

04:51.540 --> 04:56.450
interesujące, w JavaScript, jeśli używamy wartości zwrotnej funkcji, która

04:56.450 --> 05:00.830
nie zwraca niczego, otrzymujemy undefined jako wartość.

05:00.830 --> 05:03.730
I jak zapewne wiesz, undefined w JavaScript jest w rzeczywistości

05:03.730 --> 05:05.720
prawdziwą wartością.

05:05.720 --> 05:08.430
Wartość, którą na przykład otrzymujesz również, jeśli próbujesz

05:08.430 --> 05:11.880
uzyskać dostęp do właściwości na obiekcie, który nie istnieje.

05:11.880 --> 05:13.670
Więc tutaj otrzymujemy void,

05:13.670 --> 05:16.680
mimo że technicznie to zwraca undefined.

05:16.680 --> 05:19.020
A teraz, aby uczynić to jeszcze bardziej

05:19.020 --> 05:23.300
zagmatwanym, undefined faktycznie jest typem w TypeScript.

05:23.300 --> 05:25.640
Możesz mieć niezdefiniowane jako typ.

05:25.640 --> 05:29.570
I na przykład zupełnie nowa zmienna, someValue, może

05:30.770 --> 05:33.270
otrzymać undefined jako typ, i nie

05:33.270 --> 05:34.700
dostaniesz błędu.

05:34.700 --> 05:37.380
Ta zmienna będzie teraz po prostu na zawsze niezdefiniowana.

05:37.380 --> 05:39.970
Jak bardzo może to być przydatne, to już inna kwestia.

05:39.970 --> 05:43.720
Ale undefined jest poprawnym typem w TypeScript.

05:43.720 --> 05:46.600
Niemniej jednak, tutaj widać, że dostajemy błąd.

05:46.600 --> 05:48.010
I dostajemy błąd,

05:48.010 --> 05:51.690
ponieważ funkcja nie może zwrócić undefined.

05:51.690 --> 05:53.300
Technicznie oczywiście

05:53.300 --> 05:56.850
tak, ale TypeScript myśli o funkcjach nieco inaczej.

05:56.850 --> 06:00.200
Powinieneś użyć void tutaj, jeśli funkcja nie zwraca

06:00.200 --> 06:04.300
niczego, a nie niezdefiniowanego, ponieważ z void dajesz jasno do

06:04.300 --> 06:05.940
zrozumienia, że ta funkcja

06:05.940 --> 06:08.260
celowo nie ma deklaracji zwrotu.

06:08.260 --> 06:10.690
Jeśli powiedziałbyś tutaj undefined,

06:10.690 --> 06:13.460
to TypeScript oczekiwałby, że masz deklarację

06:13.460 --> 06:17.080
return, w której po prostu nie zwracasz wartości.

06:17.080 --> 06:18.660
To jest właśnie różnica techniczna.

06:18.660 --> 06:20.670
Teraz widzisz, że nie dostaję błędu.

06:20.670 --> 06:22.860
Z perspektywy JavaScript

06:22.860 --> 06:26.610
jest to w zasadzie to samo, co to.

06:26.610 --> 06:29.050
Ale TypeScript robi tutaj rozróżnienie,

06:29.050 --> 06:31.240
a zatem void jest typem, którego chcesz

06:31.240 --> 06:33.760
użyć, jeśli nie masz deklaracji zwrotu.

06:33.760 --> 06:37.200
Undefined, którego rzadko będziesz potrzebował, szczerze mówiąc,

06:37.200 --> 06:41.100
może być używany, jeśli zwracasz bez zwracania rzeczywistej wartości.

06:41.100 --> 06:45.750
Ale znowu, jest to rzadki przypadek użycia i mógłbyś użyć void z instrukcją

06:45.750 --> 06:47.560
return, jak to również.

06:47.560 --> 06:49.040
Nie otrzymałbyś błędu.

06:49.040 --> 06:50.610
I domyślnie, w rzeczywistości

06:50.610 --> 06:52.770
zawsze używałbyś void w tym scenariuszu.

06:52.770 --> 06:54.680
Chyba że naprawdę masz funkcję, która

06:54.680 --> 06:56.750
powinna produkować niezdefiniowane,

06:56.750 --> 06:58.620
i chcesz być jasny na ten temat.

06:58.620 --> 07:01.430
Ale znowu, rzadko będzie to miało miejsce.

07:01.430 --> 07:03.620
Chcę tylko upewnić się tutaj, że rozumiesz

07:03.620 --> 07:05.870
różnicę między void i undefined, że void

07:05.870 --> 07:08.160
jest standardem, którego użyjesz w całkiem

07:08.160 --> 07:10.930
sporej części scenariuszy, w których masz funkcję,

07:10.930 --> 07:13.450
która nie zwraca wartości, i że możesz ją przypisać

07:13.450 --> 07:15.770
jawnie.

07:15.770 --> 07:18.780
Ale oczywiście TypeScript również jest w stanie to wywnioskować, tak

07:18.780 --> 07:20.440
jak byłby w stanie również tutaj.

07:20.440 --> 07:23.083
Dodałem to tylko dla celów demonstracyjnych tutaj.
