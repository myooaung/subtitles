WEBVTT

00:02.802 --> 00:04.030
Instructeur : Maintenant que nous avons

00:04.030 --> 00:05.910
couvert les classes, regardons les interfaces.

00:05.910 --> 00:09.510
Nous allons renommer le fichier app ts en classes et ajouter

00:09.510 --> 00:11.230
un nouveau fichier app ts, qui

00:11.230 --> 00:13.730
sera par la suite compilé en app js.

00:13.730 --> 00:15.130
Et dans ce fichier app ts, nous allons

00:15.130 --> 00:17.026
maintenant nous plonger dans les interfaces.

00:17.026 --> 00:19.850
Qu'est-ce qu'une interface ?

00:19.850 --> 00:21.640
Eh bien, dans sa version la plus

00:21.640 --> 00:25.470
simple, une interface décrit la structure d'un objet.

00:25.470 --> 00:28.502
Nous pouvons l'utiliser pour décrire l'apparence d'un objet.

00:28.502 --> 00:29.856
Laissez-moi vous montrer un exemple.

00:29.856 --> 00:32.990
Nous créons une interface à l'aide du mot-clé interface,

00:32.990 --> 00:37.510
qui n'existe que dans le script, pas dans le JavaScript classique.

00:37.510 --> 00:39.600
Maintenant, donnons un nom à cette personne.

00:39.600 --> 00:41.140
Encore une fois, comme dans un

00:41.140 --> 00:43.150
cours, je commence par une majuscule, ce

00:43.150 --> 00:46.820
n'est pas une obligation mais une recommandation et une convention.

00:46.820 --> 00:47.910
Là, nous pouvons définir

00:47.910 --> 00:51.160
à quoi doit ressembler l'objet personne.

00:51.160 --> 00:52.480
Contrairement à une classe,

00:52.480 --> 00:54.930
nous ne l'utiliserons pas comme un modèle.

00:54.930 --> 00:57.543
Comme un type personnalisé, nous pourrions dire.

00:58.490 --> 01:00.690
Ici, on peut dire qu'une personne peut avoir

01:00.690 --> 01:01.860
un nom, qui est de type

01:01.860 --> 01:04.300
chaîne, et un âge qui est de type nombre.

01:04.300 --> 01:05.140
Comme vous pouvez

01:05.140 --> 01:08.020
le voir ici, j'ajoute des propriétés ou des définitions

01:08.020 --> 01:09.970
de champ, où j'indique les noms des propriétés

01:09.970 --> 01:13.440
et les types de valeurs qui seront stockées.

01:13.440 --> 01:16.560
Ce que nous n'avons pas ici, ce sont les valeurs concrètes.

01:16.560 --> 01:17.730
Donc nous n'avons pas ça.

01:17.730 --> 01:20.510
Et si nous essayions d'attribuer une valeur par défaut

01:20.510 --> 01:21.810
ici, nous obtiendrions une

01:21.810 --> 01:25.290
erreur, car une interface ne peut pas avoir d'initialisateur.

01:25.290 --> 01:27.540
Nous pouvons donc nous contenter de définir la structure,

01:27.540 --> 01:29.610
mais pas les valeurs concrètes.

01:29.610 --> 01:32.930
Nous pouvons également ajouter une méthode ici, comme par exemple la méthode greet.

01:32.930 --> 01:34.470
Maintenant, comme pour les

01:34.470 --> 01:37.440
propriétés, nous n'ajoutons pas la méthode réelle ici,

01:37.440 --> 01:39.610
mais juste la structure, la description

01:39.610 --> 01:41.020
pour ainsi dire.

01:41.020 --> 01:42.670
A quoi cela devrait ressembler.

01:42.670 --> 01:46.600
Et pour définir une méthode que doit avoir un objet personne, on ajoute

01:46.600 --> 01:49.470
le nom de la méthode, puis les parenthèses, puis

01:49.470 --> 01:50.920
le type de retour.

01:50.920 --> 01:52.210
Par exemple, blanc, et entre

01:52.210 --> 01:53.260
parenthèses, tu peux

01:53.260 --> 01:55.310
avoir tous les arguments que tu veux.

01:55.310 --> 01:57.740
Comme une phrase qui devrait être un type.

01:57.740 --> 02:01.920
Encore une fois, juste le nom de l'argument et ensuite le type.

02:01.920 --> 02:03.610
Ensuite, le type de retour de la méthode.

02:03.610 --> 02:06.450
Bien entendu, il n'est pas nécessaire d'ajouter des paramètres.

02:06.450 --> 02:09.080
Que pouvons-nous faire maintenant avec cette interface personne ?

02:09.080 --> 02:11.360
Quelle est l'idée derrière tout ça ?

02:11.360 --> 02:12.610
Nous pouvons maintenant l'utiliser

02:12.610 --> 02:14.810
pour vérifier le type d'un objet, par exemple.

02:14.810 --> 02:18.020
Nous pourrions avoir une variable, utilisateur 1, et disons

02:18.020 --> 02:19.130
que pour une raison quelconque

02:19.130 --> 02:22.620
nous ne l'initialisons pas immédiatement.

02:22.620 --> 02:25.660
Nous voulons juste éventuellement stocker un

02:25.660 --> 02:28.490
objet là-dedans, qui a cette structure.

02:28.490 --> 02:30.710
Ensuite, nous pouvons attribuer un type à l'utilisateur un,

02:30.710 --> 02:31.830
qui pourrait être personne.

02:31.830 --> 02:34.604
Nous pouvons utiliser notre interface comme un type.

02:34.604 --> 02:38.410
Et maintenant, lorsque j'attribue une valeur à l'utilisateur 1, il doit

02:38.410 --> 02:39.730
s'agir d'un objet car les

02:39.730 --> 02:42.780
interfaces sont utilisées pour définir des objets.

02:42.780 --> 02:45.560
Il doit s'agir d'un objet doté d'une propriété

02:45.560 --> 02:47.190
name, qui doit contenir une

02:47.190 --> 02:49.850
chaîne de caractères, d'une propriété age,

02:49.850 --> 02:53.102
qui doit contenir un nombre, et d'une méthode greet qui

02:53.102 --> 02:56.920
doit prendre un argument phrase et ne rien renvoyer non plus.

02:56.920 --> 02:57.830
Ici, dans cet objet,

02:57.830 --> 02:59.360
nous pouvons ajouter un nom.

02:59.360 --> 03:00.730
Max, par exemple.

03:00.730 --> 03:03.010
Maintenant, nous ajoutons la valeur

03:03.010 --> 03:06.310
concrète et elle doit être du type défini ici.

03:06.310 --> 03:08.160
Maintenant séparés par une virgule, et c'est

03:08.160 --> 03:11.110
une différence par rapport à notre définition de l'interface.

03:11.110 --> 03:16.110
Là, nous séparons nos clés et nos propriétés par des points-virgules.

03:16.470 --> 03:18.430
Mais en bas, quand nous créons notre objet, comme

03:18.430 --> 03:21.390
dans le JavaScript classique, nous utilisons une virgule.

03:21.390 --> 03:25.570
Puis un âge, et bien sûr, aussi la méthode d'accueil.

03:25.570 --> 03:27.550
Maintenant, la méthode greet, comme

03:27.550 --> 03:32.020
vous l'avez appris, doit être une méthode qui prend un paramètre, phrase, qui

03:32.020 --> 03:33.790
doit être une chaîne de caractères,

03:33.790 --> 03:36.134
et où je veux ensuite consigner la phrase

03:36.134 --> 03:41.134
plus un espace blanc plus ceci. nom.

03:41.210 --> 03:43.930
Il pourrait s'agir d'une mise en œuvre de la méthode greet.

03:43.930 --> 03:45.670
Maintenant, ce qu'il y a dedans n'a plus d'importance.

03:45.670 --> 03:48.210
Il est juste important que nous ayons ce seul paramètre,

03:48.210 --> 03:49.270
qui est une chaîne de caractères,

03:49.270 --> 03:51.290
et que nous ne retournions rien.

03:51.290 --> 03:54.090
Maintenant, ce serait un objet utilisateur un valide

03:54.090 --> 03:58.150
parce qu'il satisfait à cette définition de notre interface.

03:58.150 --> 03:59.040
Par conséquent,

03:59.040 --> 04:00.940
bien sûr, nous pouvons maintenant

04:00.940 --> 04:04.020
par exemple appeler greet et dire bonjour, je suis, et ensuite

04:04.020 --> 04:06.220
nous devrions imprimer le nom.

04:06.220 --> 04:08.300
Si vous sauvegardez et rechargez,

04:08.300 --> 04:10.330
vous verrez que je suis Max.

04:10.330 --> 04:12.840
Et ça vient de notre méthode d'accueil.

04:12.840 --> 04:14.090
Il s'agit d'une interface.

04:14.090 --> 04:18.280
Il nous permet de définir la structure d'un objet.

04:18.280 --> 04:21.140
Nous pouvons l'utiliser comme un contrôle de type

04:21.140 --> 04:24.453
à type pour les objets qui doivent avoir cette structure.
