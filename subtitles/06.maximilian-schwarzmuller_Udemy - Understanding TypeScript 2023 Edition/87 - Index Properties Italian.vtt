WEBVTT

00:02.110 --> 00:03.890
Istruttore: Quindi ora, dopo tutte

00:03.890 --> 00:07.820
queste funzioni in cui abbiamo lavorato con i tipi stessi, per così dire,

00:07.820 --> 00:10.340
in cui abbiamo lavorato sul controllo dei tipi,

00:10.340 --> 00:13.880
sul costo dei tipi, torniamo alle funzioni che ci aiutano a gestire

00:13.880 --> 00:16.110
un codice flessibile.

00:16.110 --> 00:17.930
Naturalmente, scrivete ancora i due tipi.

00:17.930 --> 00:20.150
È un dattiloscritto, dopotutto, ma non

00:20.150 --> 00:23.520
si concentra solo sui tipi, ora possiamo gestirli.

00:23.520 --> 00:25.830
Per questo, voglio iniziare con i tipi di indice,

00:25.830 --> 00:29.040
una caratteristica che ci permette di creare oggetti più flessibili

00:29.040 --> 00:31.150
per quanto riguarda le proprietà che possono

00:31.150 --> 00:33.010
contenere.

00:33.010 --> 00:34.485
Cosa intendo dire con questo?

00:34.485 --> 00:36.813
Supponiamo che si stia scrivendo un'applicazione

00:36.813 --> 00:39.680
per convalidare alcuni input dell'utente.

00:39.680 --> 00:41.810
Si hanno quindi più campi di input e, a

00:41.810 --> 00:44.603
seconda di ciò che l'utente inserisce e di quale campo

00:44.603 --> 00:46.682
si tratta, si potrebbero memorizzare

00:46.682 --> 00:50.490
ed eventualmente mostrare messaggi di errore diversi.

00:50.490 --> 00:52.520
Per esempio, se si tratta di un campo email,

00:52.520 --> 00:54.360
si vuole controllare chi è nell'email

00:54.360 --> 00:55.590
e se non lo è, si vuole aggiungere

00:55.590 --> 00:59.830
un messaggio di errore appropriato al contenitore degli errori.

00:59.830 --> 01:01.133
Quindi è con questo che inizierò.

01:01.133 --> 01:06.133
Avrò qui il mio contenitore di errori di interfaccia.

01:07.570 --> 01:09.530
Dovrebbe essere un oggetto, per questo

01:09.530 --> 01:11.400
uso un'interfaccia, ma dovrebbe essere

01:11.400 --> 01:14.090
flessibile riguardo a ciò che contiene.

01:14.090 --> 01:15.680
In definitiva, il mio obiettivo

01:15.680 --> 01:17.692
è quello di poter trattare gli oggetti in

01:17.692 --> 01:20.782
cui abbiamo un identificatore di errore, che potrebbe essere

01:20.782 --> 01:23.700
l'ideale se il campo di input a cui appartiene l'errore.

01:23.700 --> 01:26.581
Ad esempio, l'e-mail. E poi una stringa di

01:26.581 --> 01:31.581
errore, non un'email valida. E poi abbiamo un'altra proprietà.

01:32.130 --> 01:35.610
Diciamo nome utente e poi una stringa di errore

01:35.610 --> 01:37.150
potrebbe memorizzare

01:37.150 --> 01:39.280
quel campo di input se il campo

01:39.280 --> 01:41.611
di input non è corretto.

01:41.611 --> 01:45.770
Deve iniziare con un carattere.

01:45.770 --> 01:49.170
Qualcosa del genere dovrebbe essere memorizzato in quell'oggetto.

01:49.170 --> 01:51.992
Il problema è che non so in anticipo quali

01:51.992 --> 01:55.320
nomi esatti delle proprietà ci saranno.

01:55.320 --> 01:58.021
Si potrebbe dire: "Avremo l'e-mail e il nome utente",

01:58.021 --> 02:01.650
ma voglio che questo sia un contenitore flessibile.

02:01.650 --> 02:03.150
Voglio poterlo utilizzare in

02:03.150 --> 02:05.350
qualsiasi modulo della mia pagina web.

02:05.350 --> 02:07.560
E potrei avere diversi moduli con diversi

02:07.560 --> 02:10.157
input con diversi identificatori.

02:10.157 --> 02:12.741
Quindi non voglio limitarmi ai soli

02:12.741 --> 02:16.150
errori relativi all'e-mail e al nome utente.

02:16.150 --> 02:18.461
Inoltre, anche se abbiamo sempre inserito

02:18.461 --> 02:20.859
solo email e nome utente e vogliamo memorizzare

02:20.859 --> 02:23.291
gli errori per questi.

02:23.291 --> 02:27.461
Cosa fare se solo l'email non è valida e non il nome utente?

02:27.461 --> 02:30.912
Naturalmente in questo oggetto potremmo memorizzare null come

02:30.912 --> 02:34.421
valore per il nome utente, ma vorrei semplicemente ometterlo.

02:34.421 --> 02:37.232
Abbiamo quindi un oggetto che contiene solo proprietà

02:37.232 --> 02:40.419
per gli ingressi in cui si verifica un errore?

02:40.419 --> 02:42.960
Quindi possiamo anche eseguire un ciclo su questo oggetto

02:42.960 --> 02:46.260
con un ciclo di quattro in, per leggere tutti gli errori che abbiamo ottenuto,

02:46.260 --> 02:48.200
ad esempio, e non avere alcuna proprietà

02:48.200 --> 02:51.112
che non memorizzi effettivamente un errore.

02:51.112 --> 02:53.261
Per farla breve, ho bisogno di un oggetto

02:53.261 --> 02:56.861
in cui sia abbastanza chiaro il tipo di valore.

02:56.861 --> 03:00.260
Dovrebbe essere una stringa, ma non so quante

03:00.260 --> 03:02.190
proprietà avrò e quale

03:02.190 --> 03:05.320
nome avranno le proprietà.

03:05.320 --> 03:08.171
Per questo scenario possiamo utilizzare i tipi di indice.

03:08.171 --> 03:10.760
Si definisce un tipo di indice utilizzando le parentesi quadre.

03:10.760 --> 03:14.730
Ricordate che normalmente qui si scrive il nome della proprietà, ma ora si

03:14.730 --> 03:16.280
usano le parentesi quadre.

03:16.280 --> 03:21.280
Poi, un nome a scelta, ad esempio chiave o puntello.

03:23.581 --> 03:28.581
Poi, i due punti. E poi il tipo di valore della proprietà.

03:29.010 --> 03:30.010
E poi un oggetto.

03:30.010 --> 03:33.760
Non è possibile avere stringhe, numeri o simboli come proprietà.

03:33.760 --> 03:37.660
Ad esempio, non si può usare booleano qui. Non è consentito.

03:37.660 --> 03:40.504
Ma qui si può usare la stringa.

03:40.504 --> 03:43.190
Con questo sto semplicemente dicendo che qualsiasi

03:43.190 --> 03:46.330
oggetto che costruirò in seguito sulla base di questa interfaccia

03:46.330 --> 03:51.083
contenitore di errori deve avere delle proprietà, che sono stringhe.

03:52.120 --> 03:53.928
Il nome utente, ad esempio, sarebbe una stringa

03:53.928 --> 03:55.899
valida anche se non la inserisco tra virgolette.

03:55.899 --> 03:59.980
Poi, aggiungiamo i due punti. E poi il tipo di valore, che è

03:59.980 --> 04:01.629
stringa. Quindi sto dicendo

04:01.629 --> 04:04.320
che non conosco il nome esatto della proprietà.

04:04.320 --> 04:07.620
Inoltre non conosco il numero di proprietà.

04:07.620 --> 04:10.608
So solo che ogni proprietà aggiunta a questo oggetto, che

04:10.608 --> 04:13.459
si basa su un contenitore di errori, deve avere un nome

04:13.459 --> 04:16.959
di proprietà che può essere interpretato come una stringa e anche

04:16.959 --> 04:23.080
il valore della proprietà deve essere una stringa.

04:23.080 --> 04:23.080
Questo è ciò che sto dicendo qui.

04:23.080 --> 04:28.080
Ora, possiamo anche aggiungere proprietà predefinite,

04:29.560 --> 04:31.906
ma solo se sono dello stesso

04:31.906 --> 04:35.339
tipo di questa qui. Si può quindi aggiungere un ID, che è un tipo di stringa.

04:35.339 --> 04:39.760
Ogni oggetto costruito che aderisce a questa interfaccia deve avere una proprietà

04:39.760 --> 04:43.360
ID e può aggiungere tutte le altre proprietà che desidera, ma

04:43.360 --> 04:47.370
non possiamo impostare ID a un numero, per esempio, perché qui abbiamo

04:47.370 --> 04:49.277
un tipo di indice.

04:49.277 --> 04:53.033
Si tratta quindi di una restrizione che abbiamo se costruiamo un oggetto di questo tipo.

04:55.240 --> 04:56.550
E ora qual è la conseguenza?

04:56.550 --> 05:00.080
Ora possiamo creare un error bag, ad esempio, di tipo error

05:00.080 --> 05:02.390
container, che quindi è un oggetto e sarebbe

05:02.390 --> 05:05.150
valido in questo modo, perché non dobbiamo aggiungere

05:05.150 --> 05:07.440
alcuna proprietà.

05:07.440 --> 05:10.340
Questo è tutto ciò che è valido. Ma naturalmente ora possiamo aggiungerne alcuni.

05:10.340 --> 05:13.380
Ad esempio, l'e-mail non è un'e-mail valida.

05:13.380 --> 05:15.780
E questo va bene. Non andrebbe bene se invece

05:15.780 --> 05:17.093
assegnassi un numero, perché

05:17.093 --> 05:19.133
stiamo dicendo che ogni proprietà ha bisogno

05:19.133 --> 05:23.001
di un tipo di valore stringa. Quindi dobbiamo usare una stringa.

05:23.001 --> 05:25.940
Se utilizzassi un numero, funzionerebbe perché può

05:25.940 --> 05:28.610
essere interpretato anche come stringa.

05:28.610 --> 05:30.883
Quindi, se si vuole, si può usare anche un numero

05:30.883 --> 05:33.031
come tipo di chiave. Sono abbastanza libero

05:33.031 --> 05:35.981
riguardo a ciò che uso qui. Se si volesse cambiare

05:35.981 --> 05:40.981
il tipo di puntello in numero, lo si potrebbe fare e la cosa andrebbe

05:42.130 --> 05:44.810
bene. Ma non è così, perché

05:44.810 --> 05:46.470
l'e-mail non è un numero.

05:46.470 --> 05:48.170
Questo non può essere convertito in un numero.

05:48.170 --> 05:51.550
Può essere trattato come una stringa, ma non come un numero.

05:51.550 --> 05:54.870
È così che si controlla il tipo di proprietà o i nomi

05:54.870 --> 05:56.990
di proprietà consentiti.

05:56.990 --> 05:59.493
E qui ne ho fatto uno per consentire i nomi di stringhe di proprietà.

05:59.493 --> 06:02.264
Pertanto, qualsiasi cosa che possa essere convertita in una stringa

06:02.264 --> 06:04.740
è un nome di proprietà valido. Anche il valore deve

06:04.740 --> 06:06.413
essere una stringa.

06:06.413 --> 06:08.021
E, come ho detto, ora

06:08.021 --> 06:10.632
possiamo aggiungere più valori

06:10.632 --> 06:12.830
qui, più valori direi.

06:12.830 --> 06:17.263
Deve iniziare con un carattere maiuscolo.

06:18.170 --> 06:21.220
Quindi questo è un sacchetto di errori che possiamo costruire

06:21.220 --> 06:22.722
con l'aiuto del contenitore

06:22.722 --> 06:25.392
di errori, che ci dà questa ulteriore flessibilità,

06:25.392 --> 06:27.522
senza dover sapere in anticipo quali nomi

06:27.522 --> 06:30.740
di proprietà vogliamo usare e di quante proprietà abbiamo

06:30.740 --> 06:32.653
bisogno.
