WEBVTT

00:02.160 --> 00:05.373
- : Donc, de retour dans notre projet, si vous voulez utiliser webpack là, je

00:07.223 --> 00:09.948
vais tout d'abord quitter ma compilation et ce serveur de développement

00:09.948 --> 00:10.870
actuel, puis stat, assurez-vous

00:10.870 --> 00:13.440
que nous pouvons utiliser webpack là.

00:13.440 --> 00:16.420
Maintenant, puisque c'est déjà un fichier du fichier package

00:16.420 --> 00:19.462
dot json, nous pouvons utiliser NPM pour installer plus de dépendances

00:19.462 --> 00:21.050
dans ce projet.

00:21.050 --> 00:23.410
Donc, tout simplement, plus de bibliothèques tierces dont

00:23.410 --> 00:24.940
nous avons besoin dans ce projet.

00:24.940 --> 00:28.610
Et je ne parle pas ici des bibliothèques tierces qui fournissent certaines

00:28.610 --> 00:31.480
fonctionnalités en utilisant notre code, mais plutôt

00:31.480 --> 00:33.930
des bibliothèques tierces qui nous aident à mettre

00:33.930 --> 00:37.157
en place un flux de travail et une configuration de projet qui rendent

00:37.157 --> 00:40.430
le développement très efficace pour nous.

00:40.430 --> 00:45.110
Nous faisons cela avec NPM installé, dash dash safe dash dev

00:45.110 --> 00:48.600
pour indiquer qu'il s'agit d'une dépendance

00:48.600 --> 00:53.600
de développement uniquement, et ensuite webpack webpack dash

00:53.713 --> 00:58.713
CLI, webpack dash dev dash server typescript et ts loader.

01:01.030 --> 01:03.040
C'est donc un ensemble de paquets et je vous dirai

01:03.040 --> 01:04.800
ce qu'ils font dans une seconde.

01:04.800 --> 01:06.680
Donc, tout d'abord, appuyez sur Entrée et assurez-vous

01:06.680 --> 01:08.485
que tous ces paquets sont maintenant installés

01:08.485 --> 01:10.801
dans notre projet ici, et ensuite, nous allons jeter un

01:10.801 --> 01:14.100
coup d'oeil à chaque paquet et voir pourquoi nous l'avons installé, donc attendons

01:14.100 --> 01:16.290
que cela se termine.

01:16.290 --> 01:18.530
Il a donc fini de s'installer pour moi ici, et

01:18.530 --> 01:21.710
maintenant avec cela, analysons ce que nous avons installé.

01:21.710 --> 01:25.380
Dans package dot json, la section new dev dependencies, ou elle existait

01:25.380 --> 01:27.063
déjà, mais maintenant nous avons

01:27.063 --> 01:29.474
beaucoup de nouveaux paquets là je devrais dire,

01:29.474 --> 01:31.290
ces paquets ont été ajoutés.

01:31.290 --> 01:33.690
Maintenant, à quoi servent tous ces paquets ?

01:33.690 --> 01:35.460
Commençons par webpack.

01:35.460 --> 01:37.580
Webpack est l'outil dont je viens de parler,

01:37.580 --> 01:40.080
c'est le cœur de toute cette configuration que nous

01:40.080 --> 01:41.780
allons maintenant créer.

01:41.780 --> 01:43.980
C'est un outil qui nous permet de brancher

01:43.980 --> 01:47.150
certaines fonctionnalités pour regrouper notre code

01:47.150 --> 01:49.210
et aussi pour le transformer.

01:49.210 --> 01:52.470
Et cette transformation de notre partie code est importante,

01:52.470 --> 01:54.740
nous avons un projet de typecript ici, non ?

01:54.740 --> 01:56.620
Bien sûr, nous pourrions utiliser

01:56.620 --> 02:00.220
webpack pour regrouper toutes les sorties JavaScript, mais ce serait

02:00.220 --> 02:03.310
encore mieux si webpack pouvait faire les deux.

02:03.310 --> 02:06.250
Transformer notre code typecript en JavaScript,

02:06.250 --> 02:10.180
et ensuite émettre un fichier Javascript groupé, et webpack

02:10.180 --> 02:13.420
est capable de le faire heureusement.

02:13.420 --> 02:16.610
Nous avons besoin de la CLI webpack pour exécuter les commandes

02:16.610 --> 02:18.922
webpack dans notre projet, et du serveur de

02:18.922 --> 02:21.603
développement webpack pour avoir ce serveur de développement

02:21.603 --> 02:24.286
intégré, qui démarre webpack sous le capot, qui surveille

02:24.286 --> 02:27.056
les changements dans nos fichiers, qui déclenche automatiquement

02:27.056 --> 02:30.180
la recompilation de webpack lorsque quelque chose change,

02:30.180 --> 02:34.760
et qui sert automatiquement notre page.

02:34.760 --> 02:37.300
Et ensuite, nous avons typescript et typescript

02:37.300 --> 02:39.460
loader, le ts loader ici.

02:39.460 --> 02:42.850
Maintenant, nous avons déjà installé Typescript globalement sur notre

02:42.850 --> 02:46.208
machine, c'est pourquoi nous sommes capables d'exécuter tsc dash w.

02:46.208 --> 02:49.760
Maintenant, c'est une bonne pratique d'installer automatiquement

02:49.760 --> 02:53.450
une copie de typescript par projet, de sorte que pour ce projet, vous avez

02:53.450 --> 02:56.000
une version spécifique de typescript.

02:56.000 --> 02:58.320
L'avantage est que si vous changez la version globale

02:58.320 --> 03:01.624
de Typescript, vous ne casserez pas la version de votre projet, la

03:01.624 --> 03:05.170
configuration de votre projet si nous cassons les changements dans Typescript

03:05.170 --> 03:07.280
lui-même, donc nous pouvons verrouiller

03:07.280 --> 03:10.340
une version spécifique de Typescript pour un projet, c'est pourquoi

03:10.340 --> 03:13.880
nous l'avons installé séparément ici.

03:13.880 --> 03:16.440
Et le chargeur de ts est maintenant un paquet

03:16.440 --> 03:18.380
qui va fonctionner avec webpack.

03:18.380 --> 03:21.068
Le chargeur ts est un paquet qui indique à webpack

03:21.068 --> 03:24.396
comment convertir le code typescript en Javascript, de

03:24.396 --> 03:29.180
sorte que webpack est capable de faire les deux, compiler notre code, avec l'aide

03:29.180 --> 03:30.920
du chargeur typescript, qui

03:30.920 --> 03:33.370
à son tour utilise bien sûr le compilateur

03:33.370 --> 03:36.665
typescript sous le capot, et puis webpack est également

03:36.665 --> 03:41.580
capable de regrouper nos fichiers javascript émis dans un fichier js regroupé dans

03:41.580 --> 03:44.260
un fichier de code regroupé.

03:44.260 --> 03:47.440
Bien, et avec cela, commençons simplement et mettons en

03:47.440 --> 03:50.852
place un projet webpack afin que nous puissions utiliser webpack

03:50.852 --> 03:53.223
pour toutes ces belles choses.
