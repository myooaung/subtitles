WEBVTT

00:02.270 --> 00:04.040
Eğitmen: JavaScript için JavaScript

00:04.040 --> 00:05.900
ile oluşturulmuş üçüncü taraf bir kütüphane

00:05.900 --> 00:08.270
olan Lodash'a bir göz attık.

00:08.270 --> 00:11.730
Ayrıca, type script ve type script özelliklerini gerçekten

00:11.730 --> 00:13.287
benimseyen ve size type script

00:13.287 --> 00:16.480
ile çalıştığınız için çalışan yepyeni bir kod yazma

00:16.480 --> 00:18.360
yolu sunan bazı üçüncü taraf kütüphaneler

00:18.360 --> 00:21.230
de bulabilirsiniz.

00:21.230 --> 00:24.950
Bir örnek sınıf dönüştürücüdür, daha da iyi bir örnek sınıf doğrulayıcıdır;

00:24.950 --> 00:28.067
burada her ikisine de bir göz atacağız.

00:28.067 --> 00:31.360
Ama sınıf transformatörü ile başlayalım.

00:31.360 --> 00:35.870
Diyelim ki buradaki projemizde aslında bir modelim, bir veri modelim

00:35.870 --> 00:38.150
var, buna 'ürün' adını verelim.

00:38.150 --> 00:41.170
Şimdi ona ürün adını vereceğim. Model. ts ancak bu dosyaya

00:41.170 --> 00:43.820
istediğiniz adı verebilirsiniz.

00:43.820 --> 00:48.820
Benim fikrim, bu dosyada bir ürün için bir sınıf tanımlamak.

00:49.420 --> 00:52.180
Bu yüzden bir ürünün nasıl görünmesi gerektiğini tarif ediyorum.

00:52.180 --> 00:55.550
Örneğin, bir dize olan bir başlığa ve bir sayı olan bir

00:55.550 --> 00:59.070
fiyata sahip olduğunu ve ardından her ikisinin de başlatılabileceği

00:59.070 --> 01:02.120
bir kurucu işlevi ekliyorum.

01:02.120 --> 01:07.120
Yani dize, fiyat ekleyin ve sonra bu başlığın 't'ye ve bu fiyatın 'p'ye

01:07.210 --> 01:09.360
eşit olduğunu söyledim.

01:09.360 --> 01:10.810
Ve tabii ki sadece kurucuyu kullandığımız

01:10.810 --> 01:14.423
kısa yoldan başlatma yöntemini de kullanabilirdik.

01:16.150 --> 01:20.400
Diyelim ki her zaman bir metodumuz var, get information,

01:20.400 --> 01:25.400
burada bir dizi döndürüyorum, diyelim ki ilk eleman

01:25.950 --> 01:30.850
başlık ve ikinci eleman aslında dolar işareti olan

01:30.850 --> 01:37.833
ve daha sonra bu diziye enjekte edilen bir dize, bu fiyat.

01:39.030 --> 01:43.030
Burada çok basit bir model, çok basit bir sınıf var.

01:43.030 --> 01:45.940
Ve şimdi isterseniz bu sınıfı uygulamada

01:45.940 --> 01:49.590
kullanabiliriz. Bu yüzden Lodash'tan kurtulacağım

01:49.590 --> 01:54.590
ve bunun yerine ürünü . /ürün. model Şimdi bunun için ürün modelinde

01:56.200 --> 01:58.920
bu sınıfı gerçekten dışa aktardığınızdan emin olmanız

01:58.920 --> 02:01.010
gerekir, aksi takdirde içe aktaramazsınız

02:01.010 --> 02:03.860
ve burada ürünü bu şekilde dışa aktarmamız gerekiyor

02:03.860 --> 02:05.800
çünkü burada sınıfın hemen önüne export

02:05.800 --> 02:07.890
anahtar kelimesini ekleyerek adlandırılmış

02:07.890 --> 02:11.950
bir dışa aktarma kullanıyorum.

02:11.950 --> 02:16.497
Şimdi burada elbette yeni bir ürün yaratabiliriz,

02:18.150 --> 02:23.150
fiyatı 12 olan bir kitap. 99 ve sonrasında ben konsol log p1

02:24.080 --> 02:28.190
bilgi alıyorum ve aslında bu diziyi loglamalıyız.

02:28.190 --> 02:31.390
Şimdi burada npm start'ı çalıştırırsak, web paketi

02:31.390 --> 02:34.250
geliştiricimiz başlar ve bu kitap hakkında

02:34.250 --> 02:37.340
bilgi içeren bu güzel diziyi görmeliyiz.

02:37.340 --> 02:39.463
Burayı yeniden yüklersem, işte burada.

02:40.630 --> 02:43.170
Elbette bu çok süslü değil, işe yarıyor,

02:43.170 --> 02:44.930
ama bu yeni bir şey değil.

02:44.930 --> 02:47.270
Şimdi, daha büyük uygulamalarda yaygın

02:47.270 --> 02:49.610
bir senaryo, bir sunucudan bazı verileri

02:49.610 --> 02:52.150
indiriyor olabilirsiniz, diyelim ki bir

02:52.150 --> 02:54.490
arka uç sunucusundan veri alıyorsunuz

02:54.490 --> 02:58.370
ve bu sunucu daha sonra size ilettiğiniz bazı json verilerini döndürüyor,

02:58.370 --> 03:01.560
bu da bir ürün listesi olabilir.

03:01.560 --> 03:05.520
Yani burada sunucudan aldığımız ve daha sonra bir başlığa, bir halıya ve bir fiyata

03:05.520 --> 03:10.520
sahip olduğumuz ürünlerimiz olabilir, 29. 99 ve ayrıca bu kitabımız

03:13.047 --> 03:18.047
da var, yani başlık, kitap ve orada 10'luk

03:18.120 --> 03:22.830
bir fiyat var. 99 diyelim.

03:22.830 --> 03:25.310
Yani bu, daha sonra arka uçtan alacağımız

03:25.310 --> 03:27.730
çok basit bir veri dizisidir.

03:27.730 --> 03:30.590
Bunlar elbette JavaScript nesneleridir

03:30.590 --> 03:33.730
ancak ürün modelimizin örnekleri değildir.

03:33.730 --> 03:37.220
Ve bu, verileri json olarak aldığınız tipik bir senaryodur,

03:37.220 --> 03:40.990
ön kodladığınız yapıcı işlevin ait olduğu gibi ekli bir

03:40.990 --> 03:42.850
veri yoktur.

03:42.850 --> 03:46.770
Sunucunuz bunu biliyor ve json da sadece temel verileri

03:46.770 --> 03:51.230
ileten bir format, oraya eklenmiş nesneler için zengin meta

03:51.230 --> 03:53.540
verileriniz yok.

03:53.540 --> 03:56.300
Ya da en azından bunu manuel olarak yapmanız gerekir.

03:56.300 --> 04:00.120
Başka bir deyişle, burada elde ettiğimiz ürünler get

04:00.120 --> 04:03.310
information metodu olmayan nesnelerdir.

04:03.310 --> 04:08.230
Geleneksel olarak, şimdi bunu modelinizin örneklerine dönüştürmek

04:08.230 --> 04:12.680
isterseniz, bunu manuel olarak yapmanız gerekir.

04:12.680 --> 04:17.680
Yüklenmiş ürünleriniz olabilir, daha sonra diyelim ki ürünleri kullanır,

04:19.260 --> 04:22.770
map yöntemini çağırır ve bu dizideki her üründe prod

04:22.770 --> 04:30.680
için yeni ürün döndürürüz.

04:30.680 --> 04:30.680
başlık ve prod. fiyat

04:34.330 --> 04:36.660
ve daha sonra gerçek ürün kurucu işlev

04:36.660 --> 04:40.230
örnekleriyle dolu bir diziye sahip oluruz ve sonra aslında

04:40.230 --> 04:43.163
bunun içinde döngü yapabiliriz, yüklenen ürünler

04:44.330 --> 04:51.083
ve sonra orada örneğin konsol günlüğü prod.

04:51.083 --> 04:51.083
bilgi al.

04:52.150 --> 04:56.010
Bu şekilde bir diziyi ya da tek bir isimsiz Vanilla JavaScript

04:56.010 --> 05:00.070
nesnesini belirli bir kurucu fonksiyonun örneğine manuel

05:00.070 --> 05:02.880
olarak dönüştürebiliriz ve dolayısıyla

05:02.880 --> 05:05.000
bu çıktıyı elde ederiz.

05:05.000 --> 05:07.220
Şimdi bunu manuel olarak yapmak zahmetli.

05:07.220 --> 05:09.590
Burada bir sürü ekstra adım var,

05:09.590 --> 05:12.710
bu sadece basit bir dönüşüm elbette.

05:12.710 --> 05:16.690
İşte bu noktada sınıf dönüştürücü paketi bize yardımcı olabilir.

05:16.690 --> 05:19.330
Bunu çok ama çok basit hale getiriyor.

05:19.330 --> 05:22.390
Burada, bizim durumumuzda kod türünde bir sınıf

05:22.390 --> 05:25.010
da tanımlıyoruz, o zaman diyelim ki bir

05:25.010 --> 05:29.340
sunucudan bazı veriler alıyor olabiliriz ve sonra aslında basit

05:29.340 --> 05:32.430
bir kolaylık yöntemini çağırabiliriz ve verilerimizi

05:32.430 --> 05:36.893
otomatik olarak doğru modellere dönüştürecektir.

05:38.100 --> 05:40.030
Şimdi bunun için öncelikle

05:40.030 --> 05:44.840
nmp install class transformer--save komutunu çalıştıralım,

05:45.730 --> 05:47.820
bunun gibi ve bu bittikten sonra

05:47.820 --> 05:50.350
npm install reflect-metadata--save

05:51.451 --> 05:54.470
komutunu çalıştıralım.

05:54.470 --> 05:57.460
Şimdi bunu da içe aktaralım ve ardından buradaki

05:57.460 --> 06:02.460
kurulum talimatlarında da belirtildiği gibi, rota giriş dosyalarınızdaki meta

06:02.890 --> 06:11.410
verileri içe aktaralım, benim durumumda buradaki uygulamada.

06:11.410 --> 06:11.410
ts

06:11.410 --> 06:14.970
Yeni yüklediğimiz bu üçüncü taraf kütüphanesini kütüphanemizin bir bağımlılığı olarak içe aktarıyorum.

06:14.970 --> 06:17.210
Şimdi bu aslında js adımı yok olarak ifade edildi ve bu

06:17.210 --> 06:18.610
nedenle bunu atlayabiliriz.

06:18.610 --> 06:20.180
Tarayıcıda yine de aynı paketleri

06:20.180 --> 06:24.780
yüklememiz gerekiyor ve bu içe aktarmayı buraya eklemek sorun değil çünkü

06:24.780 --> 06:26.880
web paketini kullanıyoruz ve bu nedenle

06:26.880 --> 06:30.090
şimdi aslında gitmeye hazırız.

06:30.090 --> 06:35.090
Ve şimdi sınıf dönüştürücüsünden bir şey içe aktarabiliriz

06:36.290 --> 06:40.210
ve bu şey 'plain to class' yöntemidir.

06:40.210 --> 06:42.630
Bu paketin ayrıca birkaç yöntemi daha vardır.

06:42.630 --> 06:45.200
Resmi dokümanlarda bunlar hakkında daha fazla bilgi edinebilirsiniz.

06:45.200 --> 06:49.060
Ancak 'plain to class' ana yöntemdir.

06:49.060 --> 06:54.060
Örneğin yüklü ürünlerinizi ayarlamak için burada kullanabilirsiniz.

06:55.150 --> 06:58.230
Bunu daha önce yaptığımız gibi burada manuel olarak yapmak yerine,

06:58.230 --> 07:01.480
loaded products'ı plain to class'a eşit olarak ayarlayabilir ve şimdi

07:01.480 --> 07:03.760
burada iki argüman iletebiliriz.

07:03.760 --> 07:08.070
İlk argüman, dönüştürmek istediğimiz sınıftır.

07:08.070 --> 07:10.190
Benim durumumda, ürün.

07:10.190 --> 07:12.700
Ve onu örneklemiyorum ya da çağırmıyorum,

07:12.700 --> 07:15.560
sadece o sınıfa işaret ediyorum.

07:15.560 --> 07:19.460
İkinci bağımsız değişken, dönüştürmek istediğimiz veridir.

07:19.460 --> 07:23.520
Yani benim durumumda, bu ürünlerdir.

07:23.520 --> 07:25.840
Şimdi bu paketin yapacağı şey, bu dizinin

07:25.840 --> 07:28.100
üzerinden geçerek buradaki her düz

07:28.100 --> 07:31.034
Vanilla JavaScript nesnesini bu sınıfın bir

07:31.034 --> 07:34.090
örneğine dönüştürmek olacaktır.

07:34.090 --> 07:37.830
Şimdi bunu kaydedip npm start'ı tekrar çalıştırırsak, sunucuyu

07:37.830 --> 07:40.330
başlatan web sayfası tekrar açılır ve bu projeyi

07:40.330 --> 07:43.270
hatasız bir şekilde oluşturması gerekir.

07:43.270 --> 07:46.540
Sayfayı yeniden yüklersem, önceki ile aynı çıktıyı alıyorum

07:46.540 --> 07:49.530
ama tabii ki bu paketi kullandığımız için bizim tarafımızdan

07:49.530 --> 07:51.870
daha az kodla.

07:51.870 --> 07:53.403
Ve bu paketle ilgili şaşırtıcı

07:53.403 --> 07:57.070
olan şey, burada bu kadar iyi çalışmasıdır çünkü tip komut dosyası

07:57.070 --> 08:01.230
üzerine kurulur ve tip komut dosyasını kullanır ve orada işaret edebileceğimiz

08:01.230 --> 08:04.280
bir sınıfımız olduğu gerçeğini kullanır.

08:04.280 --> 08:08.730
Ancak dürüst olmak gerekirse, bu paket özellikle type script ile iyi

08:08.730 --> 08:10.900
çalışır, ancak type script'e özgü

08:10.900 --> 08:12.600
bir özellik kullanmaz.

08:12.600 --> 08:16.630
Örneğin sınıflar Vanilla JavaScript'te de mevcuttur.

08:16.630 --> 08:20.170
Dolayısıyla, bu öncelikle komut dosyası türü için geliştirilmiş

08:20.170 --> 08:23.610
olsa da, aslında Vanilla JavaScript'te de çalışır.

08:23.610 --> 08:26.633
Ancak bu durum bir sonraki paket için geçerli olmayacaktır.
