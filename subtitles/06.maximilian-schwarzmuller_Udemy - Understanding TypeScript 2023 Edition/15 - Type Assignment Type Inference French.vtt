WEBVTT

00:02.270 --> 00:03.850
Instructeur : Nous utilisons donc les

00:03.850 --> 00:07.450
types de base que sont les nombres, les booléens et les chaînes de caractères.

00:07.450 --> 00:10.840
Et ici, dans la liste des paramètres de cette fonction,

00:10.840 --> 00:13.970
nous attribuons toujours explicitement les types

00:13.970 --> 00:16.540
avec un deux-points après le nom du paramètre,

00:16.540 --> 00:18.410
puis le nom du type.

00:18.410 --> 00:21.350
Donc ici, les noms sont nombre, booléen, chaîne.

00:21.350 --> 00:23.100
Et au cas où vous vous poseriez la question,

00:23.100 --> 00:25.420
ce sont maintenant des identifiants spéciaux.

00:25.420 --> 00:28.530
Cet ensemble, ici, est une syntaxe spéciale qui est

00:28.530 --> 00:30.170
ajoutée par TypeScript.

00:30.170 --> 00:32.900
Il ne fait pas partie du code JavaScript compilé.

00:32.900 --> 00:35.040
Si nous vérifions ce code ici, ces affectations

00:35.040 --> 00:37.280
de type ont disparu, car JavaScript ne

00:37.280 --> 00:39.530
les prend pas en charge.

00:39.530 --> 00:42.390
Ce deux points après une variable, ou après

00:42.390 --> 00:43.920
un paramètre.

00:43.920 --> 00:46.320
Et puis les chiffres, les booléens et les chaînes de caractères.

00:46.320 --> 00:48.290
Ces mots-clés spéciaux.

00:48.290 --> 00:50.840
Ceci est introduit par TypeScript.

00:50.840 --> 00:53.500
Le compilateur TypeScript le comprend.

00:53.500 --> 00:55.480
L'IDE prend ici en charge TypeScript,

00:55.480 --> 00:58.580
et ne se plaint donc pas de ces mots-clés spéciaux.

00:58.580 --> 01:01.760
JavaScript ne comprend pas cette syntaxe.

01:01.760 --> 01:04.590
Il ne comprend pas les deux-points après un paramètre,

01:04.590 --> 01:06.560
ou les deux-points après une variable,

01:06.560 --> 01:09.190
puis le nombre spécial ou le mot-clé chaîne.

01:09.190 --> 01:11.540
JavaScript ne comprend pas cela et ne fait donc

01:11.540 --> 01:13.560
pas partie de la sortie JavaScript.

01:13.560 --> 01:15.920
Il n'est en fait utilisé que par le compilateur TypeScript.

01:15.920 --> 01:18.130
Et ensuite, eh bien, c'est un compilateur

01:18.130 --> 01:21.820
car il convertit ce code en code JavaScript.

01:21.820 --> 01:24.880
Remarque secondaire, on voit aussi qu'il change const pour var

01:24.880 --> 01:27.700
mais c'est un point sur lequel je reviendrai plus tard.

01:27.700 --> 01:30.590
Ainsi, nous avons nos affectations de type explicites ici

01:30.590 --> 01:33.060
et elles ne sont comprises que par TypeScript.

01:33.060 --> 01:35.763
Super, pourquoi on ne les a pas en bas ?

01:36.880 --> 01:39.890
Je n'ai pas d'affectation de type explicite ici.

01:39.890 --> 01:41.180
Et, à propos, pas non plus ici

01:41.180 --> 01:43.450
lorsque nous calculons le résultat, par exemple,

01:43.450 --> 01:45.530
parce que TypeScript a une fonctionnalité

01:45.530 --> 01:48.400
intégrée qui s'appelle l'inférence de type.

01:48.400 --> 01:51.000
Cela signifie que TypeScript fait de son

01:51.000 --> 01:53.010
mieux, et il fait un assez bon travail,

01:53.010 --> 01:56.400
pour comprendre quel type vous avez dans une certaine

01:56.400 --> 01:58.860
variable ou constante.

01:58.860 --> 02:02.300
Et ici, par exemple, il comprend que nombre1 sera

02:02.300 --> 02:05.780
toujours de type nombre à la fin, parce que vous l'initialisez

02:05.780 --> 02:08.020
avec un nombre.

02:08.020 --> 02:09.950
Maintenant, il s'agit en fait d'une constante,

02:09.950 --> 02:11.740
donc c'est encore plus spécifique que ça.

02:11.740 --> 02:15.350
Et le type qu'il identifie ici n'est pas n'importe quel

02:15.350 --> 02:17.490
nombre, c'est le nombre cinq.

02:17.490 --> 02:20.110
Parce que de toute façon, vous ne pourrez pas attribuer

02:20.110 --> 02:23.870
un nouveau nombre, ou une nouvelle valeur à une valeur constante.

02:23.870 --> 02:25.840
Si vous deviez changer cela en une variable,

02:25.840 --> 02:28.460
donc si vous utilisiez let à la place, alors bien sûr

02:28.460 --> 02:30.180
cela ne casserait rien.

02:30.180 --> 02:32.940
Nous pouvons utiliser une variable ici, ce n'est peut-être pas la meilleure

02:32.940 --> 02:34.540
pratique car cette valeur ne change jamais,

02:34.540 --> 02:36.210
mais ce n'est pas non plus horrible.

02:36.210 --> 02:38.260
Mais maintenant, si on passe la souris dessus,

02:38.260 --> 02:41.210
on voit que TypeScript ne dit pas, ok, ça doit être un cinq.

02:41.210 --> 02:45.510
Mais il détecte quand même que le type ici est un nombre.

02:45.510 --> 02:49.260
Maintenant, nous pourrions absolument écrire ce code ici par nous-mêmes.

02:49.260 --> 02:51.970
Nous pouvons ajouter un deux-points après le

02:51.970 --> 02:53.870
nom de la variable à gauche du signe

02:53.870 --> 02:55.590
égal, puis le nom du type.

02:55.590 --> 02:56.880
Donc, en gros, la même chose que

02:56.880 --> 02:59.470
nous avons fait dans les paramètres de cette fonction.

02:59.470 --> 03:01.860
Mais cela est redondant et n'est pas non

03:01.860 --> 03:04.620
plus considéré comme une bonne pratique.

03:04.620 --> 03:06.790
Parce que TypeScript est capable

03:06.790 --> 03:09.990
de déduire parfaitement ce type à partir de là.

03:09.990 --> 03:13.690
Donc, l'attribuer n'est pas une bonne idée.

03:13.690 --> 03:16.420
Cela ne change que si vous créez cette variable

03:16.420 --> 03:18.053
de manière non attribuée.

03:19.000 --> 03:22.130
Comme ça, si vous ne l'initialisez pas immédiatement.

03:22.130 --> 03:25.700
Ensuite, c'est une bonne pratique d'indiquer à TypeScript

03:25.700 --> 03:29.070
quelle valeur sera finalement stockée à cet endroit.

03:29.070 --> 03:32.590
Ainsi, lorsque vous lui attribuez une valeur par la suite, et bien sûr, c'est

03:32.590 --> 03:34.080
un peu redondant ici de le diviser

03:34.080 --> 03:35.320
en deux lignes.

03:35.320 --> 03:37.800
Je fais ça juste pour la démo.

03:37.800 --> 03:39.480
Mais maintenant, si je l'assigne

03:39.480 --> 03:42.460
ici, cela se casse parce que j'ai dit à TypeScript à l'avance

03:42.460 --> 03:44.630
que ce sera un type numéro.

03:44.630 --> 03:45.610
Vous n'êtes pas obligé de faire ça.

03:45.610 --> 03:47.420
Cela fonctionne aussi si vous ne le faites pas.

03:47.420 --> 03:50.330
Mais maintenant, vous pourriez aussi ajouter ce cinq et

03:50.330 --> 03:51.630
vous n'obtiendriez pas d'erreur

03:51.630 --> 03:53.470
parce que vous ne dites rien à TypeScript

03:53.470 --> 03:55.350
sur le type qui sera stocké dans cette

03:55.350 --> 03:56.975
variable et donc TypeScript autorise

03:56.975 --> 03:59.630
n'importe quel type.

03:59.630 --> 04:02.600
Si, au lieu de cela, vous ajoutez deux-points ici, vous

04:02.600 --> 04:05.417
dites à TypeScript : "Hé, éventuellement, "un nombre

04:05.417 --> 04:07.370
sera stocké là-dedans. Par conséquent, si vous y stockez quelque

04:07.370 --> 04:10.060
chose d'autre, comme dans ce cas où nous avons stocké une

04:10.060 --> 04:12.470
chaîne, vous obtiendrez une erreur ici dans l'IDE,

04:12.470 --> 04:15.170
et bien sûr aussi si vous avez compilé votre code.

04:15.170 --> 04:17.570
Nous obtiendrons l'erreur que nous avons déjà vue auparavant.

04:17.570 --> 04:20.253
C'est ainsi que vous pouvez attribuer des types.

04:22.300 --> 04:24.920
Maintenant, même si TypeScript vient d'inférer un type,

04:24.920 --> 04:27.830
et laissez-moi corriger cela, il vous criera dessus si vous

04:27.830 --> 04:29.310
brisez ce type inféré.

04:29.310 --> 04:32.720
En fait, c'est faux de dire même parce que bien sûr que

04:32.720 --> 04:35.670
c'est le cas, pourquoi ne le ferait-il pas ?

04:35.670 --> 04:37.000
L'inférence de type est là pour vous permettre

04:37.000 --> 04:39.750
d'économiser votre code, afin d'éviter que vous deviez manuellement attribuer un type.

04:39.750 --> 04:42.730
Bien sûr, TypeScript vous crie dessus si vous

04:42.730 --> 04:44.520
utilisez un mauvais type, un

04:44.520 --> 04:46.510
type qu'il n'a pas déduit.

04:46.510 --> 04:48.640
Par exemple, ici, si resultPhrase est

04:48.640 --> 04:52.460
créé avec let de sorte qu'il est variable, alors TypeScript infère

04:52.460 --> 04:54.000
ici que ce sera de type string

04:54.000 --> 04:57.670
parce que nous l'initialisons avec une chaîne.

04:57.670 --> 04:59.850
C'est donc l'équivalent de ne pas l'initialiser,

04:59.850 --> 05:03.060
de définir le type par nous-mêmes, puis d'assigner une

05:03.060 --> 05:04.970
valeur plus tard.

05:04.970 --> 05:07.410
Maintenant, si nous changeons resultPhrase

05:07.410 --> 05:12.310
en, disons, zéro ici, pour n'importe quelle raison que nous pourrions vouloir faire cela,

05:12.310 --> 05:15.660
eh bien nous obtenons une erreur ici que le type zéro n'est pas

05:15.660 --> 05:17.330
assignable de type string.

05:17.330 --> 05:21.210
Et c'est logique, non ?

05:21.210 --> 05:22.690
TypeScript a déduit que nous voulions

05:22.690 --> 05:25.430
stocker une chaîne, nous essayons maintenant de stocker un nombre,

05:25.430 --> 05:27.290
nous obtenons une erreur.

05:27.290 --> 05:28.530
C'est le travail, la tâche principale de TypeScript.

05:28.530 --> 05:33.000
Vérifier les types et nous crier dessus si nous les utilisons

05:33.000 --> 05:35.280
incorrectement.
