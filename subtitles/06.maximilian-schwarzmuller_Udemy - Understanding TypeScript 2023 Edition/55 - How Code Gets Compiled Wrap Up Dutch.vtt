WEBVTT

00:02.200 --> 00:03.970
Instructeur: Dit is het voor deze module.

00:03.970 --> 00:06.080
Uiteraard heeft modern JavaScript ook een aantal

00:06.080 --> 00:07.790
andere leuke mogelijkheden.

00:07.790 --> 00:09.810
Ik zal bijvoorbeeld klassen behandelen

00:09.810 --> 00:11.120
in de klassemodule en in het

00:11.120 --> 00:13.470
algemeen is dit geen JavaScript-cursus.

00:13.470 --> 00:16.540
Ik wil u niet vervelen met tonnen JavaScript-kennis

00:16.540 --> 00:20.140
die niet echt betrekking hebben op TypeScript.

00:20.140 --> 00:22.700
Ik wilde deze specifieke functies noemen omdat

00:22.700 --> 00:24.650
het goed is te weten dat TypeScript ons

00:24.650 --> 00:28.210
helpt deze functies te gebruiken op een manier die nog steeds werkt

00:28.210 --> 00:29.580
in oudere browsers.

00:29.580 --> 00:32.920
Want dat mag je nooit vergeten.

00:32.920 --> 00:35.600
Je code wordt gecompileerd.

00:35.600 --> 00:38.690
Momenteel heb ik het doel ingesteld op ES6 en daarom

00:38.690 --> 00:41.540
zien we, als we de dist-map controleren, constanten

00:41.540 --> 00:44.280
die ook allemaal beschikbaar zijn in het JS-bestand

00:44.280 --> 00:46.030
van de app.

00:46.030 --> 00:48.070
Object de structurering, er is een manier

00:48.070 --> 00:50.600
om dit leuk te vinden omdat al deze functies worden

00:50.600 --> 00:52.480
ondersteund in ES6.

00:52.480 --> 00:55.230
Als ik het doel op ES5 zou zetten en ik lib nu zou uitcommentariëren,

00:55.230 --> 00:56.590
zodat de juiste libs worden

00:56.590 --> 00:58.680
geïmporteerd voor het ES5-doel, wat

00:58.680 --> 01:00.930
standaard gebeurt, zul je zien dat de gegenereerde

01:00.930 --> 01:05.290
code er nu heel anders uitziet.

01:05.290 --> 01:08.140
Het is veel langer omdat we nu var gebruiken en TypeScript

01:08.140 --> 01:09.810
work arounds moest vinden voor

01:09.810 --> 01:12.960
bepaalde syntaxen die niet ondersteund worden in ES5

01:12.960 --> 01:14.730
JavaScript.

01:14.730 --> 01:18.240
Zo werd bijvoorbeeld de structurerende syntaxis verwijderd.

01:18.240 --> 01:21.140
Dus dat is belangrijk om altijd in gedachten te houden.

01:21.140 --> 01:23.490
TypeScript compileert uw code,

01:23.490 --> 01:26.440
niet alleen van alleen TypeScript naar

01:26.440 --> 01:29.210
gewoon JavaScript, maar allemaal van

01:29.210 --> 01:33.000
modern JavaScript naar oud JavaScript als u TypeScript

01:33.000 --> 01:35.433
dat opdraagt.
