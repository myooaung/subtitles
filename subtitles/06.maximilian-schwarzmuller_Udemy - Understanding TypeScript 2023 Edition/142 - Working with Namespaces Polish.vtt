WEBVTT

00:02.190 --> 00:04.860
-: Chcę zacząć od funkcji przestrzeni nazw.

00:04.860 --> 00:06.810
Teraz, aby pokazać, jak to

00:06.810 --> 00:09.980
działa, złapię te dwa interfejsy tutaj.

00:09.980 --> 00:11.480
Interfejsy drag and drop,

00:11.480 --> 00:14.140
wyciąć je z app. ts i dodać nowy plik,

00:14.140 --> 00:19.140
dragdropinterfaces. ts na przykład.

00:21.270 --> 00:25.180
Teraz możemy go tam wkleić i teraz, aby użyć przestrzeni nazw, wszystko

00:25.180 --> 00:29.140
co musimy zrobić, to dodać słowo kluczowe namespace, a następnie

00:31.645 --> 00:33.620
nawiasy klamrowe.

00:33.620 --> 00:35.880
Teraz musimy również nadać tej przestrzeni

00:35.880 --> 00:39.590
nazw nazwę i tutaj nazwę DD Interfaces dla drag and drop, nazwa

00:39.590 --> 00:41.660
zależy jednak od Ciebie.

00:41.660 --> 00:43.640
Teraz, w tym roku jest to funkcja TypeScript,

00:43.640 --> 00:45.250
a nie funkcja JavaScript.

00:45.250 --> 00:47.750
Nie jest skompilowany do Vanilla JavaScript, ponieważ

00:47.750 --> 00:50.340
nie ma bezpośredniego odpowiednika dla niego.

00:50.340 --> 00:54.860
Zamiast tego TypeScript zasadniczo skompiluje go do obiektu, który można

00:54.860 --> 00:55.693
powiedzieć.

00:55.693 --> 00:57.490
Do obiektu, w którym rzeczy, które

00:57.490 --> 01:00.440
umieścisz w przestrzeni nazw, następnie są przechowywane

01:00.440 --> 01:02.140
na właściwościach, ale nie będziesz

01:02.140 --> 01:06.960
musiał się o to martwić, ponieważ wszystkie rozwiązywanie dostępu do tych właściwości i że

01:06.960 --> 01:09.360
wszystko działa, zostanie załatwione przez

01:09.360 --> 01:10.640
TypeScript.

01:10.640 --> 01:13.940
Więc teraz możemy przenieść te interfejsy do przestrzeni

01:13.940 --> 01:16.130
nazw i z tym jesteśmy prawie gotowi.

01:16.130 --> 01:18.040
Teraz jednak mamy jeden problem,

01:18.040 --> 01:22.280
te interfejsy są teraz dostępne tylko w tej przestrzeni nazw.

01:22.280 --> 01:23.113
Przy okazji, nie

01:23.113 --> 01:25.530
możesz po prostu umieścić interfejsów w

01:25.530 --> 01:27.070
przestrzeni nazw możesz umieścić

01:27.070 --> 01:28.057
tam cokolwiek, klasy,

01:28.057 --> 01:30.780
stałe, cokolwiek chcesz.

01:30.780 --> 01:33.900
Cokolwiek chcesz, możesz umieścić w przestrzeni nazw.

01:33.900 --> 01:35.630
Więc w zasadzie możesz owinąć przestrzeń nazw

01:35.630 --> 01:37.150
wokół dowolnego kodu, który masz.

01:37.150 --> 01:39.830
Ale problem, który mamy, polega na tym, że te funkcje,

01:39.830 --> 01:41.140
te interfejsy tutaj są

01:41.140 --> 01:44.800
teraz dostępne tylko wewnątrz tej przestrzeni nazw.

01:44.800 --> 01:47.280
Teraz jak widzisz nie mamy tam nic więcej.

01:47.280 --> 01:49.010
Teraz oczywiście moglibyśmy sprowadzić

01:49.010 --> 01:51.600
kod, który zależy od nich z powrotem do tej przestrzeni

01:51.600 --> 01:53.370
nazw, ale wtedy znowu byśmy to rozdmuchali,

01:53.370 --> 01:58.940
ponieważ okazuje się, że mamy dość długą klasę, która zależy od tych interfejsów.

01:58.940 --> 02:02.900
Mamy klasę listy projektów i klasę pozycji projektu.

02:02.900 --> 02:05.260
Zależą one od tych interfejsów, więc byłoby

02:05.260 --> 02:08.922
wiele, które musielibyśmy dodać do tej przestrzeni nazw.

02:08.922 --> 02:10.205
Dlatego to, co możesz zrobić,

02:10.205 --> 02:14.210
to możesz dodać słowo kluczowe export przed interfejsem, aby wyeksportować

02:14.210 --> 02:16.850
funkcję z przestrzeni nazw.

02:16.850 --> 02:19.680
Teraz oznacza to, że teraz te interfejsy są

02:19.680 --> 02:22.110
dostępne wewnątrz tej przestrzeni

02:22.110 --> 02:24.487
nazw, ale także poza tym plikiem.

02:24.487 --> 02:26.100
I zobaczymy, jak to działa za

02:26.100 --> 02:28.510
chwilę, ale dzięki temu robimy ten interfejs

02:28.510 --> 02:30.710
lub cokolwiek eksportujemy.

02:30.710 --> 02:32.815
Nie jest to ograniczone do interfejsów

02:32.815 --> 02:36.610
oczywiście dostępnych poza tym plikiem, jak również jeśli następnie

02:36.610 --> 02:41.140
zasadniczo importujemy lub używamy tej przestrzeni nazw.

02:41.140 --> 02:41.973
I oczywiście znowu nie

02:41.973 --> 02:44.580
możesz po prostu wyeksportować interfejsów w przestrzeni nazw,

02:44.580 --> 02:45.636
ale cokolwiek.

02:45.636 --> 02:48.010
Teraz pytanie brzmi, jak zaimportować tę przestrzeń

02:48.010 --> 02:52.410
nazw z powrotem do aplikacji.

02:52.410 --> 02:52.410
ts

02:52.410 --> 02:56.210
i dla tego TypeScript ma specjalną składnię, której możesz użyć.

02:56.210 --> 02:57.867
Wróćmy na szczyt aplikacji. ts i teraz tutaj

02:57.867 --> 03:01.440
dodajemy trzy ukośniki do przodu, ważne trzy, nie tylko dwa,

03:01.440 --> 03:03.690
ponieważ to właściwie nie jest normalny

03:03.690 --> 03:06.150
komentarz, co tworzymy teraz to będzie faktycznie

03:06.150 --> 03:07.330
składnia odebrana przez

03:07.330 --> 03:10.280
TypeScript specjalny komentarz, można powiedzieć,

03:10.280 --> 03:13.110
że TypeScript rozumie, jeśli zaczyna się od trzech

03:13.110 --> 03:15.500
ukośników.

03:15.500 --> 03:19.301
Tam piszesz samozamykający się tag XML, więc otwierający

03:19.301 --> 03:21.600
nawias kątowy, potem forward

03:21.600 --> 03:24.530
slash zamykający nawias kątowy i w ich

03:24.530 --> 03:25.790
ścieżce referencyjnej

03:25.790 --> 03:29.220
równa się, a potem tutaj nazwa pliku, który chcesz

03:29.220 --> 03:32.370
zaimportować.

03:32.370 --> 03:35.217
W moim przypadku tutaj dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Teraz jest to rozumiane i odbierane przez TypeScript, ponieważ

03:42.550 --> 03:45.220
jak wspomniałem z trzema początkowymi ukośnikami, jest

03:45.220 --> 03:47.560
to specjalna składnia, którą TypeScript rozumie,

03:47.560 --> 03:50.110
tak jak rozumie tę rzecz referencyjną.

03:50.110 --> 03:51.960
To nie jest Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript nie zauważa

03:53.970 --> 03:58.480
i to nie jest to, jak będzie wyglądać po skompilowaniu.

03:58.480 --> 04:00.430
Co jednak osiąga?

04:00.430 --> 04:05.070
Dzięki temu uzyskujemy, że teraz ta przestrzeń nazw DD Interfaces jest dostępna

04:05.070 --> 04:07.104
w aplikacji. ts.

04:07.104 --> 04:08.920
Jeśli jednak przewiniesz w dół, zobaczysz,

04:08.920 --> 04:11.040
że moje edytory wciąż narzekają i jeśli próbowaliśmy

04:11.040 --> 04:12.250
zapisać go tak, jak wszyscy

04:12.250 --> 04:14.300
robimy dobre błędy kompilacji.

04:14.300 --> 04:16.410
Tak więc, wydaje się, że nie jest on dostępny.

04:16.410 --> 04:19.730
Wydaje się, że interfejs draggable nie jest tutaj dostępny.

04:19.730 --> 04:22.386
Otóż z przestrzeniami nazw wiąże się pewna szczególna rzecz.

04:22.386 --> 04:25.840
Możesz użyć ich do podzielenia swojego kodu i pamiętaj, kiedy

04:25.840 --> 04:27.930
powiedziałem wcześniej, że to, co masz

04:27.930 --> 04:29.610
w przestrzeni nazw, może być używane

04:29.610 --> 04:32.557
z dowolnego miejsca w tej przestrzeni nazw.

04:32.557 --> 04:34.157
Cóż, okazuje się, że możesz

04:34.157 --> 04:37.580
podzielić przestrzenie nazw na wiele plików, eksportując

04:37.580 --> 04:39.110
rzeczy w przestrzeni nazw,

04:39.110 --> 04:42.330
a następnie używając tej specjalnej składni importu, ale

04:42.330 --> 04:45.230
następnie musisz umieścić rzeczy, które chcą użyć

04:45.230 --> 04:48.250
czegoś z tej importowanej przestrzeni nazw lub z tego

04:48.250 --> 04:50.180
importowanego pliku w tej samej przestrzeni

04:50.180 --> 04:51.797
nazw.

04:51.797 --> 04:55.050
Stąd może DD Interfaces nie jest najlepszą nazwą.

04:55.050 --> 04:58.010
Może po prostu nazwiemy się App.

04:58.010 --> 04:59.740
Teraz, jeśli nazwaliśmy jako app tutaj, możemy

04:59.740 --> 05:01.670
przejść do app. ts i utworzyć tutaj

05:01.670 --> 05:04.180
przestrzeń nazw o tej samej nazwie, namespace

05:04.180 --> 05:05.630
App.

05:05.630 --> 05:06.890
A teraz na razie włóżmy

05:06.890 --> 05:10.750
wszystko tutaj do tej przestrzeni nazw i teraz widzisz, że błąd

05:10.750 --> 05:12.610
zniknął Nie ma czerwonych kropek

05:12.610 --> 05:14.300
po prawej stronie.

05:14.300 --> 05:15.513
Jednak jeśli zapisałem

05:15.513 --> 05:17.850
to, nadal będę otrzymywał błędy tutaj.

05:17.850 --> 05:22.850
Na przykład, że gotowa lista projektów nie jest używana.

05:25.010 --> 05:26.300
Cóż, to prawda,

05:26.300 --> 05:28.210
że nie używam tego.

05:28.210 --> 05:29.600
Mnie też nie jest to potrzebne,

05:29.600 --> 05:32.610
więc możemy po prostu usunąć te pojęcia tutaj.

05:32.610 --> 05:35.190
Z tym, jeśli zapisaliśmy to, teraz

05:35.190 --> 05:38.040
skompilowało się bez błędów.

05:38.040 --> 05:39.880
Pytanie tylko, co z tej

05:39.880 --> 05:41.920
kompilacji wynika?

05:41.920 --> 05:44.260
Czy mamy teraz jeden czy dwa pliki?

05:44.260 --> 05:46.170
Cóż, spójrzmy na folder dysku

05:46.170 --> 05:49.380
i tam widzisz, że masz plik App JS, a następnie

05:49.380 --> 05:50.780
trochę kodu tutaj i

05:50.780 --> 05:53.980
plik JS interfejsu drag and drop.

05:53.980 --> 05:56.690
W efekcie mamy więc dwa pliki.

05:56.690 --> 05:59.500
Teraz plik interfejsu smoczej kropli faktycznie jest

05:59.500 --> 06:00.830
dość pusty, ponieważ nauczyłeś

06:00.830 --> 06:04.360
się, że interfejsy w zasadzie nie są kompilowane do niczego.

06:04.360 --> 06:07.300
Nie istnieje odpowiednik JavaScript dla interfejsu.

06:07.300 --> 06:09.270
Jest to czysta funkcja TypeScript.

06:09.270 --> 06:12.370
Możemy więc zaimportować go za pomocą składni TypeScript tutaj,

06:12.370 --> 06:15.509
aby go użyć i uzyskać wszystkie ulepszenia typu, których się nauczyliśmy,

06:15.509 --> 06:17.300
ale w produkcji nie ma znaczenia, czy

06:17.300 --> 06:20.060
jest to w osobnym pliku, czy nie.

06:20.060 --> 06:21.840
Więc oczywiście pytanie

06:21.840 --> 06:26.380
brzmi, co jeśli teraz umieścimy coś, co istnieje w produkcji, co

06:26.380 --> 06:28.630
istnieje również w JavaScript w

06:28.630 --> 06:30.000
osobnym pliku.

06:30.000 --> 06:33.373
Na przykład robi enum i klasę projektu

06:35.520 --> 06:36.470
tutaj, złapię

06:36.470 --> 06:37.610
oba, utworzę

06:37.610 --> 06:41.410
nowy plik, model dash projektu TS i umieszczę

06:41.410 --> 06:46.040
tam mój enum stanu projektu i klasę projektu.

06:46.040 --> 06:47.420
Teraz tak samo jak wcześniej

06:47.420 --> 06:49.070
możemy dodać tutaj przestrzeń

06:49.070 --> 06:50.590
nazw, nazwa musi być App, więc

06:50.590 --> 06:51.790
musi być zrobiona przestrzeń

06:51.790 --> 06:54.020
nazw, w której następnie również chcemy ją

06:54.020 --> 06:57.340
wykorzystać i musimy wyeksportować te cechy tam, abyśmy mogli

06:57.340 --> 06:59.450
je wykorzystać w innych plikach w tej samej

06:59.450 --> 07:00.440
przestrzeni nazw,

07:00.440 --> 07:02.640
ale też innych plikach.

07:02.640 --> 07:03.980
Teraz wracam do aplikacji. ts, musimy

07:03.980 --> 07:05.900
zaimportować ten drugi plik.

07:05.900 --> 07:07.890
Więc zduplikuję ten import

07:07.890 --> 07:11.515
i wszystkie importowane projekty dash model ts.

07:11.515 --> 07:13.800
jeśli zapisałem to i teraz jest skompilowany

07:13.800 --> 07:16.610
i widzimy plik JavaScript z modelem projektu.

07:16.610 --> 07:18.184
A w nim widzimy

07:18.184 --> 07:19.490
jakiś kod.

07:19.490 --> 07:22.770
Pytanie, czy nasza aplikacja teraz działa?

07:22.770 --> 07:24.620
W tym celu przeładujmy go i

07:25.480 --> 07:27.587
spróbujmy dodać tutaj projekt

07:27.587 --> 07:29.070
i widzisz, otrzymujemy

07:29.070 --> 07:29.903
błąd.

07:29.903 --> 07:33.183
Nie można odczytać właściwości active of undefined.

07:34.120 --> 07:36.090
Powodem tego jest po prostu to, że

07:36.090 --> 07:38.854
nasze pliki są kompilowane autonomicznie.

07:38.854 --> 07:41.410
Przestrzenie nazw istnieją w świecie TypeScript,

07:41.410 --> 07:44.640
jak powiedziałem, nie ma dla niego odpowiednika JavaScript.

07:44.640 --> 07:47.430
Więc problem, który mamy tutaj, polega na tym, że w świecie TypeScript wszystko

07:47.430 --> 07:48.263
jest świetne, ponieważ

07:48.263 --> 07:51.610
TypeScript jest w stanie znaleźć wszystkie rzeczy, których potrzebujemy.

07:51.610 --> 07:52.800
Na przykład, kiedy mówię

07:52.800 --> 07:54.420
projekt tutaj, kiedy odniosłem

07:54.420 --> 07:56.310
się do typu projektu tutaj na klasie

07:56.310 --> 07:59.310
stanu projektu, ten typ projektu, ta klasa projektu

07:59.310 --> 08:00.610
jest zdefiniowana w modelu

08:00.610 --> 08:02.840
projektu.

08:02.840 --> 08:06.020
Teraz TypeScript nie narzeka na twoją niekompletność,

08:06.020 --> 08:07.570
ponieważ importujemy ten model,

08:07.570 --> 08:10.250
ale import tutaj naprawdę oznacza tylko, że mówimy

08:10.250 --> 08:13.960
TypeScriptowi, gdzie znaleźć ten typ, gdy zostanie skompilowany

08:13.960 --> 08:15.810
do JavaScript, rozłączenie jest

08:15.810 --> 08:18.150
w zasadzie zniszczone.

08:18.150 --> 08:20.840
Tak więc w kodzie JavaScript, kiedy jest wykonywany

08:20.840 --> 08:23.230
i kiedy następnie próbujemy stworzyć nowy

08:23.230 --> 08:25.130
projekt poprzez instancję projektu,

08:25.130 --> 08:27.430
JavaScript nie znajduje tej klasy projektu

08:27.430 --> 08:29.610
lub funkcji konstruktora.

08:29.610 --> 08:32.980
Musimy więc zadbać o przeniesienie rozłączenia.

08:32.980 --> 08:35.420
A w tym celu możemy wejść do

08:35.420 --> 08:39.640
TS (mumble) i tam ustawić tę opcję out file.

08:39.640 --> 08:40.740
Możemy to zakomentować,

08:40.740 --> 08:43.010
a ideą pliku out jest to, że mówisz

08:43.010 --> 08:45.540
TypeScriptowi, że powinien konkatenować

08:45.540 --> 08:48.620
przestrzenie nazw.

08:48.620 --> 08:49.670
Więc te odniesienia,

08:49.670 --> 08:51.740
które ma podczas kompilacji w jeden

08:51.740 --> 08:53.950
pojedynczy plik JavaScript zamiast

08:53.950 --> 08:56.970
kompilacji wielu plików JavaScript.

08:56.970 --> 08:59.210
Więc tutaj dla out file możemy powiedzieć,

08:59.210 --> 09:02.350
że chcemy mieć plik w folderze dysku, który nazwaliśmy

09:02.350 --> 09:04.770
może bundle. js A jeśli to zrobimy i

09:05.630 --> 09:07.050
zapiszemy to, to faktycznie

09:07.050 --> 09:08.700
dostaniemy tutaj błąd.

09:09.650 --> 09:10.710
Otrzymamy błąd,

09:12.300 --> 09:14.410
że obok pliku out obsługiwane

09:14.410 --> 09:17.250
są tylko moduły AMD i systemowe.

09:17.250 --> 09:19.540
Teraz nie musimy rozumieć wszystkiego tutaj

09:19.540 --> 09:23.160
Zasadniczo istnieją różne sposoby ładowania lub wiązania różnych

09:23.160 --> 09:26.120
plików JavaScript w jeden z powodów historycznych i

09:26.120 --> 09:28.770
jak to wszystko jest rozwijane i możesz dowiedzieć

09:28.770 --> 09:31.250
się więcej o tych różnych wiązanych typach w

09:31.250 --> 09:33.700
załączonym zasobie, jeśli chcesz, nie musisz

09:33.700 --> 09:35.340
jednak.

09:35.340 --> 09:36.800
Więc w zasadzie to, co musimy

09:36.800 --> 09:38.120
tutaj zrobić, to musimy

09:38.120 --> 09:40.470
ustawić moduł, który jest już tutaj podświetlony

09:40.470 --> 09:41.598
jako błąd, nie na zwykły

09:41.598 --> 09:43.943
JS, ale na przykład na AMD.

09:45.400 --> 09:47.700
Jeśli to zrobimy, skompiluje się bez

09:47.700 --> 09:50.010
problemów, mimo że nadal narzeka tutaj,

09:50.010 --> 09:52.140
ale nie wyłapał, że go zmieniłem i

09:52.140 --> 09:53.860
teraz to, co się dzieje, to właściwie

09:53.860 --> 09:56.570
nowy plik bundle JS w dist.

09:56.570 --> 10:00.310
Jeśli usunę wszystkie pliki JavaScript w folderze dysku

10:00.310 --> 10:04.680
i ponownie uruchomię moją kreskę TSC przetwarzamy tak kompilator

10:04.680 --> 10:05.580
zobaczysz tylko,

10:05.580 --> 10:08.600
że plik bundle JS jest generowany.

10:08.600 --> 10:11.530
Ten plik będzie trzymał cały nasz kod w wersji

10:11.530 --> 10:13.250
skompilowanej i przetłumaczonej,

10:13.250 --> 10:15.400
a więc teraz w indexie HTML, musimy

10:15.400 --> 10:20.300
tylko zaimportować tutaj bundle JS zamiast App JS.

10:20.300 --> 10:23.610
A jeśli to zrobimy i przeładujemy tutaj, to znowu mamy

10:23.610 --> 10:25.830
działającą aplikację, w której możemy

10:25.830 --> 10:28.260
używać drag and drop wszystko, bo teraz

10:28.260 --> 10:30.410
wszystko jest w jednym pliku, ale tylko

10:30.410 --> 10:32.661
w efekcie końcowym.

10:32.661 --> 10:34.230
Podczas rozwoju mamy tutaj

10:34.230 --> 10:36.260
te przestrzenie nazw, co jest jednym

10:36.260 --> 10:39.030
krokiem w dobrym kierunku, ponieważ jest to

10:39.030 --> 10:41.970
już jako trochę bardziej zarządzane.

10:41.970 --> 10:44.350
Teraz podzielmy to na jeszcze więcej plików,

10:44.350 --> 10:47.250
zanim następnie przyjrzymy się średniej opcji podziału

10:47.250 --> 10:48.283
modułów TS.
