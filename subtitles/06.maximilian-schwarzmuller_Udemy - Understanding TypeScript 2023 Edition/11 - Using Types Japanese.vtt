WEBVTT

00:02.060 --> 00:06.410
講師：Typescriptは､ JavaScriptに多くの型を提供します｡ 

00:06.410 --> 00:10.100
さて､ JavaScript 自身もいくつかのデータ型を知っていますし､

00:10.100 --> 00:12.230
このモジュールでもそのことに触れますが､

00:12.230 --> 00:14.950
Typescript はさらに多くの型を追加しており､

00:14.950 --> 00:17.380
このコースでも学習するように､ Typescript

00:17.380 --> 00:21.110
は独自の型を書くことも可能です｡

00:21.110 --> 00:24.320
では､ JavaScript が既に知っていて､ Typescript

00:24.320 --> 00:26.250
もサポートしている Core Types

00:26.250 --> 00:28.289
のいくつかから始めましょう｡ また､

00:28.289 --> 00:30.550
型を知る JavaScript と､ その型を使う

00:30.550 --> 00:36.800
Typescript の違いが何を意味するかも見ていきましょう｡

00:36.800 --> 00:38.287
JavaScriptやTypescriptで扱うコアな型の1つに､

00:38.287 --> 00:41.740
数値型があります｡

00:41.740 --> 00:45.220
さて､ JavaScriptでは､ そしてTypescriptでも同様ですが､

00:45.220 --> 00:47.290
数値の型は1つしかありません｡

00:47.290 --> 00:50.750
整数や浮動小数点に対応する特別な型はない｡ 

00:50.750 --> 00:55.520
その代わり､ ここにある数値はすべて数字になります｡ 

00:55.520 --> 00:58.180
1は､ 小数点以下の数字を除いた数字になります｡ 

00:58.180 --> 01:01.640
5. 3は明らかに小数点以下が1つであり､

01:01.640 --> 01:04.532
これらの値はすべてnumber型である｡

01:04.532 --> 01:08.180
他のプログラミング言語では､ 特殊な整数型やfloat型､

01:08.180 --> 01:10.480
double型があります｡

01:10.480 --> 01:11.980
JavaScriptにはそれがなく､

01:11.980 --> 01:14.120
Typescriptにもない｡

01:14.120 --> 01:16.070
JavaScript でおなじみの数値型も､

01:16.070 --> 01:19.810
Typescript では型として扱われます｡

01:19.810 --> 01:23.950
また､ 文字列データ型もあり､ これはテキストで､ シングルクォート､

01:23.950 --> 01:30.950
ダブルクォート､ バックスティックの3つの方法で定義することができる｡

01:30.950 --> 01:34.720
最後のバックティックによる表記は､ 最近の JavaScript

01:34.720 --> 01:42.440
や Typescript で提供されている特別な構文で､ いわゆるテンプレートリテラルを書くことができます｡ これは､

01:42.440 --> 01:47.520
通常の文字列に動的にデータを挿入することができるものです｡

01:47.520 --> 01:49.240
つまり､ 文字列は単なるテキストであり､

01:49.240 --> 01:53.000
JavaScriptは文字列の値の型について知っているのです｡

01:53.000 --> 01:55.000
Typescriptもそうです｡ 

01:55.000 --> 01:57.240
最後になりますが､ JavaScriptが知っていて､

01:57.240 --> 01:59.790
Typescriptもサポートしているコアなデータ型の1つが､

01:59.790 --> 02:02.250
Booleanデータ型です｡

02:02.250 --> 02:03.810
これはプログラミングでは非常に重要なことで､

02:03.810 --> 02:08.920
特にIF文で作業する場合はそうです｡

02:08.920 --> 02:10.970
JavaScriptでは､

02:10.970 --> 02:13.690
例えば数字のゼロは偽の値であるなど､

02:13.690 --> 02:22.190
真実の値と偽の値という考え方も知っているかもしれないからです｡

02:22.190 --> 02:25.510
IF条件の中で使用すると､ falseとして扱われます｡ 

02:25.510 --> 02:28.560
Booleanデータ型は､ 実際にはtrueかfalseの2つの値しか知りませんが､

02:28.560 --> 02:33.160
これはTypescriptだけでなく､ JavaScriptでも同じです｡

02:33.160 --> 02:35.532
データ型とは関係ない､ この真実味のある､

02:35.532 --> 02:38.280
ファルシーな概念､ 知っておくといいですよ｡

02:38.280 --> 02:40.840
それは裏方の仕事です｡ 

02:40.840 --> 02:43.030
JavaScriptは､ 特定の値やIF条件を見たときに､

02:43.030 --> 02:46.510
ランタイムを追加します｡

02:46.510 --> 02:50.060
つまり､ 数字､ 文字列､ ブール値で､ 核となるデータ型がいくつか得られるわけです｡

02:50.060 --> 02:51.450
もちろん､ すべてではなく､ オブジェクトなどもありますが､

02:51.450 --> 02:54.617
これらの型に焦点を当て､ Typescript がこれらの型で何をするのか､

02:54.617 --> 03:00.930
あるいは､ Typescript の助けを借りて､ これらの型で何ができるのかを見ていきましょう｡

03:00.930 --> 03:07.600
このために､ 最初のコースモジュールで見たプロジェクトに戻ります｡

03:07.600 --> 03:10.320
そこで､ ターミナルで npm

03:10.320 --> 03:12.280
start を実行し､

03:12.280 --> 03:24.890
このプロジェクトフォルダーに移動して､ ライブ開発サーバーを立ち上げる必要があることを示しました｡

03:24.890 --> 03:26.070
そうなんです､ まだファイルとしてアプリのトレイがないので､

03:26.070 --> 03:28.300
エラーになるんです｡

03:28.300 --> 03:30.380
もちろん､ このレクチャーに添付されているスタートプロジェクトは､

03:30.380 --> 03:34.400
アプリをコンパイルするとすぐに､ このようなアプリトレイをファイルとして取得し､ ここでインポートしようとしているindex

03:34.400 --> 03:42.050
htmlファイルに取り込みます｡

03:42.050 --> 03:42.050
tsをTypescriptからJavaScriptに変更し､

03:42.050 --> 03:51.117
ターミナルの新しいタブで､ このプロセスを実行したまま､ 代わりに新しいタブを開くように､ tsc appを実行するだけで､ それが可能になります｡

03:51.117 --> 03:51.117
そして､

03:53.920 --> 03:56.630
Typescript ファイルをコンパイルして JavaScript

03:56.630 --> 03:58.680
ファイルを生成し､ このページを再読み込みすると､

03:58.680 --> 04:05.520
Time が始まります｡

04:05.520 --> 04:05.520
の出力はこちら｡ 

04:05.520 --> 04:08.000
これで､ Typescriptのコードを書き､

04:08.000 --> 04:10.620
それをJavaScriptのコードにコンパイルして､

04:10.620 --> 04:14.650
それが何をするのか見ることができるようになりました｡

04:14.650 --> 04:18.870
さて､ このTypescriptファイルの内容を実際に削除してみましょう｡

04:18.870 --> 04:21.820
なぜなら､ 先ほどスライドに示したコアデータ型に飛び込んで､

04:21.820 --> 04:27.230
Typescriptでどのように扱うかを理解したいからです｡

04:27.230 --> 04:29.430
では､ ごくごく簡単なところから始めましょう｡ 

04:29.430 --> 04:32.240
例えば､ add という新しい関数があり､ そこに

04:32.240 --> 04:34.990
2 つの数値 n1 と add 2 を期待し､ n1 に n2

04:34.990 --> 04:38.610
を足したものを返すとします｡ このように､ 非常にシンプルな関数で､

04:38.610 --> 04:42.370
Typescript っぽさはありません｡

04:42.370 --> 04:46.080
さて､ 今回は2つの数字を扱います｡ 

04:46.080 --> 04:49.800
ここでいう1番とは､ 例えば5番であり､ また2番とは､

04:49.800 --> 04:57.060
多分2番である｡ 8でも何でもいい､ ここに2つの数字がある｡

04:57.060 --> 04:59.820
さて､ 当然といえば当然ですが､ add関数を呼び出して､

04:59.820 --> 05:07.320
この関数にnumber1とnumber2を引数として渡し､ その結果を新しい定数（たぶん）に格納して､ 画面上で何かを見るには､

05:07.320 --> 05:15.080
コンソールを使用します｡

05:15.080 --> 05:15.080
を記録してください｡ 

05:15.080 --> 05:20.080
そうして､ このファイルをtsc appで再コンパイルすると｡  tsであれば､ このページは自動的に再読み込みされるはずです､

05:20.270 --> 05:22.730
すでに｡

05:22.730 --> 05:24.350
そうでない場合は､ もちろん手動でリロードすれば､

05:24.350 --> 05:27.010
7が表示されるはずです｡ 8.

05:27.010 --> 05:30.250
今､ あなたは､ それはあまり特別なことではない､ と思うかもしれませんね｡ 

05:30.250 --> 05:33.650
これは非常にわかりやすいJavaScriptのスニペットで､

05:33.650 --> 05:37.330
実際､ Typescript的なことは何もしていません｡

05:37.330 --> 05:41.900
では､ そのスニペットを通常のJavaScriptでブレーキするようなことをしてみましょう｡

05:41.900 --> 05:45.100
例えば､ この入力は数字ではなく､ テキストで5とします｡

05:45.100 --> 05:59.530
これを保存して､ コンパイルコマンドを再実行すると､ このページがリロードされると､ 52と表示されることがわかります｡

05:59.530 --> 05:59.530
8を出力するものであり､

05:59.530 --> 06:02.200
今回の追加では明らかに正しい結果ではありません｡

06:02.200 --> 06:04.500
さて､ なぜ通常のJavaScriptでこのような出力が出るのか､

06:04.500 --> 06:08.670
最終的にここで実行しているのは何か､ お分かりでしょうか？

06:08.670 --> 06:10.150
この出力は数学的な足し算の結果ではありません

06:10.150 --> 06:14.710
代わりに文字列として連結しています 入力である5が文字列だからです JavaScriptは「よし､

06:14.710 --> 06:39.240
文字列ができた」と判断します 「この文字列に何かを足している」のです 確かに「この何か」も文字列に変換されるべきです 「最初の値が文字列だったから」全体として文字列になりました ですから JavaScriptは2を変換しているのです

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
を数字から文字列に変換し､ 5 と 2 から長い文字列を連結する｡ 8 となり､ 52

06:42.720 --> 06:46.700
となる｡ 8を文字列として､ それを返す｡ 

06:46.700 --> 06:49.490
つまり､ 数学的な扱いではなく､ 文字列として扱っているわけで､

06:49.490 --> 06:52.900
JavaScriptでは､ このようなことが起こり得るのです｡

06:52.900 --> 06:55.427
さて､ もちろん､ 「なぜそんなコードを書くのか」と思うかもしれません｡

06:55.427 --> 06:58.160
"開発者である私が､ なぜこんな失敗をするのだろう？ まあ､ このミスを犯しているのは､ あなたではないかもしれませんね｡ 

06:58.160 --> 07:01.230
たとえば､ ユーザー入力から取得したデータを変換する際に､

07:01.230 --> 07:04.180
コードにちょっとしたバグがあり､ 変換を忘れてしまったとか､

07:04.180 --> 07:14.740
チームで作業をしていて､ いくつかのスクリプトファイルを一緒に使っていて､ 他の開発者がこのようなエラーを発生させたとか｡

07:14.740 --> 07:17.270
そのようなミスをすることは不可能ではありませんが､

07:17.270 --> 07:20.110
それを突き止めるのは難しいことです｡

07:20.110 --> 07:22.340
もちろん､ ここでは基本的なスクリプトを使用しているので､

07:22.340 --> 07:24.010
何かが間違っていることは明らかですが､

07:24.010 --> 07:31.520
より大きなスクリプトでは､ ここで何かが間違っていることにすぐに気がつかないかもしれません｡

07:31.520 --> 07:36.390
この関数では､ パラメータに型付けを追加することができます｡

07:36.390 --> 07:38.820
Typescript に､ これら 2 つのパラメータは

07:38.820 --> 07:42.280
number 型であるべきで､ not 型であるべきだと伝えることができます｡

07:42.280 --> 07:45.340
どちらがデフォルトであるかは気にしません｡

07:45.340 --> 07:47.535
つまり､ この場合は､

07:47.535 --> 07:50.300
パラメータ名と型名の後に､

07:50.300 --> 07:52.890
コロンを追加することで､

07:52.890 --> 07:55.220
型を割り当てます｡

07:55.220 --> 07:57.140
例えば､ numberはサポートされている名前の1つである｡ 

07:57.140 --> 08:00.560
数値のほかに､ 文字列やブール値もありますが､

08:00.560 --> 08:03.480
それはまた今度にしましょう｡

08:03.480 --> 08:07.750
とりあえず､ 数字が必要なのは､ この最初のパラメータだけでなく､

08:07.750 --> 08:10.530
2番目のパラメータにも必要なのです｡

08:10.530 --> 08:18.367
ここでもコロンと数字を追加します｡

08:18.367 --> 08:25.530
ここでTypescriptに言っているのは､ 「おい､

08:25.530 --> 08:34.260
ここのパラメータは両方とも数字型であるべきだ｡

08:34.260 --> 08:34.260
ts,

08:34.260 --> 08:39.193
見ての通り､ エラーが発生します｡

08:40.040 --> 08:41.670
Argument of type '"5"

08:41.670 --> 08:42.697
is not assignable

08:42.697 --> 08:46.250
to parameter of type 'number'」というエラーが表示され､

08:46.250 --> 08:48.660
どこでこのエラーが発生したのかも表示され､ 行番号､

08:48.660 --> 08:54.430
8行目､ そして基本的にIDEが表示するのと同じものが表示されます｡

08:54.430 --> 08:58.707
つまり､ IDEで見落としていた場合に備えて､ コンパイルするとエラーが投げられるようになったわけですが､

08:58.707 --> 09:01.340
これがTypescriptの重要なところです｡

09:01.340 --> 09:03.284
コンパイル時にしか役に立ちません｡ 

09:03.284 --> 09:06.220
ブラウザにはTypescriptのサポートが組み込まれていないため､

09:06.220 --> 09:10.110
実行時にJavaScriptが異なる動作をするように変更することはありません｡

09:10.110 --> 09:21.520
開発中に役立つのは､ TypescriptのコードをJavaScriptにコンパイルする前だけですが､

09:21.520 --> 09:25.560
そこで非常に役に立ちます｡

09:25.560 --> 09:28.407
"これは文字列ではなく､ 数字であるべきだ

09:28.407 --> 09:31.660
"と､ これを修正すればいいのです｡

09:31.660 --> 09:34.210
これがTypescriptの役割です｡ 

09:34.210 --> 09:35.670
開発時に役立ちます｡ 

09:35.670 --> 09:37.390
ランタイムコードを変更するものではありません｡ 

09:37.390 --> 09:40.130
実際､ ここでは､ デフォルトの設定でも､ コンパイル中にエラーを検出したにもかかわらず､

09:40.130 --> 09:44.700
コンパイルしてしまい､ 間違った結果を引き起こすファイルを作成してしまいました｡ これは､

09:44.700 --> 09:50.690
デフォルトでは､ Typescript がここに介入してこないためです｡

09:50.690 --> 09:56.300
後で､ どうすれば確実に実行できるかを学びますが､ デフォルトではコンパイルさえブロックされません｡

09:56.300 --> 09:59.260
それでも､ この間違いを直せと怒鳴られ､

09:59.260 --> 10:04.850
指摘されることで､ ここでこのような間違いをしないようにするのです｡

10:04.850 --> 10:09.020
ちなみに､ アプリがないことを確認してください｡

10:09.020 --> 10:09.020
jsとapp. ツが同時に開く｡ 

10:09.020 --> 10:13.470
ここで､ IDEで関数の重複実装に関するエラーが発生する可能性があります｡

10:13.470 --> 10:15.830
JavaScriptファイルを閉じると直ります｡ 
