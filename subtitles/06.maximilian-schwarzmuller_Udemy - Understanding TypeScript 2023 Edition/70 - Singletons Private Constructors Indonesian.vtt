WEBVTT

00:02.260 --> 00:04.960
-: Sekarang ada satu fitur menarik terakhir

00:04.960 --> 00:07.020
yang juga ingin saya perkenalkan,

00:07.020 --> 00:10.330
yaitu konstruktor privat.

00:10.330 --> 00:13.823
Dan apa itu konstruktor privat dan apa kegunaannya?

00:14.870 --> 00:17.700
Ada sebuah pola dalam pemrograman berorientasi

00:17.700 --> 00:20.460
objek yang disebut pola singleton.

00:20.460 --> 00:23.030
Pola singleton adalah tentang memastikan

00:23.030 --> 00:26.440
bahwa Anda selalu hanya memiliki tepat satu instance

00:26.440 --> 00:28.030
dari kelas tertentu.

00:28.030 --> 00:30.558
Hal ini dapat berguna dalam skenario di mana Anda

00:30.558 --> 00:33.000
tidak dapat menggunakan metode atau properti statis

00:33.000 --> 00:34.450
atau Anda tidak menginginkannya,

00:34.450 --> 00:36.440
tetapi pada saat yang sama Anda ingin memastikan

00:36.440 --> 00:40.730
bahwa Anda tidak dapat membuat beberapa objek berdasarkan kelas tetapi Anda selalu

00:40.730 --> 00:44.630
memiliki tepat satu objek berdasarkan kelas.

00:44.630 --> 00:47.660
Katakanlah untuk AccountingDepartment kita, kita

00:47.660 --> 00:51.460
ingin memastikan bahwa kita hanya dapat membuat tepat satu objek

00:51.460 --> 00:53.320
berdasarkan kelas ini, karena kita

00:53.320 --> 00:56.010
memiliki tepat satu departemen akuntansi di seluruh

00:56.010 --> 00:57.840
perusahaan kita.

00:57.840 --> 01:00.260
Kita mungkin memiliki lebih dari satu departemen

01:00.260 --> 01:03.290
TI, tetapi kita memiliki tepat satu departemen akuntansi.

01:03.290 --> 01:05.310
Sekarang untuk menegakkan hal ini dan

01:05.310 --> 01:09.020
untuk menghindari bahwa kita secara manual memanggil New AccountingDepartment

01:09.020 --> 01:14.320
beberapa kali, kita dapat mengubah konstruktor kelas AccountingDepartment menjadi konstruktor

01:14.320 --> 01:18.860
privat dengan menambahkan kata kunci privat di depannya.

01:18.860 --> 01:20.560
Sekarang apa yang dilakukan ini adalah,

01:20.560 --> 01:23.480
memastikan bahwa kita tidak dapat memanggil baru dalam hal ini.

01:23.480 --> 01:25.160
Di sini Anda lihat saya mendapatkan

01:25.160 --> 01:27.620
error karena konstruktornya bersifat privat

01:27.620 --> 01:30.600
sehingga hanya dapat diakses dari dalam kelas, yang terdengar

01:30.600 --> 01:33.690
aneh karena bagaimana kita bisa masuk ke dalam kelas jika

01:33.690 --> 01:37.920
kita tidak dapat membuat objek berdasarkan kelas itu lagi.

01:37.920 --> 01:40.490
Jawabannya adalah, yah, metode statis.

01:40.490 --> 01:43.610
Metode statis dapat dipanggil pada kelas itu sendiri sehingga

01:43.610 --> 01:46.250
Anda tidak perlu menginstansiasi untuk itu.

01:46.250 --> 01:49.460
Jadi di sini kita bisa menambahkan metode statis yang

01:49.460 --> 01:51.340
bisa kita sebut getInstance,

01:51.340 --> 01:53.260
namanya terserah Anda.

01:53.260 --> 01:56.930
Sekarang getInstance akan memeriksa apakah kita sudah memiliki instance

01:56.930 --> 02:00.090
dari kelas ini dan jika belum, mengembalikan instance baru.

02:00.090 --> 02:04.300
Untuk itu kita dapat menambahkan instance properti statis baru, properti

02:04.300 --> 02:06.350
privat statis sehingga Anda dapat meletakkan

02:06.350 --> 02:09.200
privat di depan instance yang disebut statis yang

02:09.200 --> 02:12.040
akan bertipe AccountingDepartment.

02:12.040 --> 02:16.570
Jadi di sana kita akan menyimpan instance AccountingDepartment.

02:16.570 --> 02:17.580
Jadi itulah yang saya

02:17.580 --> 02:19.100
katakan di sini, saya memiliki

02:19.100 --> 02:21.410
properti statis yang dapat diakses pada kelas

02:21.410 --> 02:23.310
itu sendiri, tetapi hanya dari dalam

02:23.310 --> 02:25.960
kelas dan nilai yang kita simpan di sana akan bertipe

02:25.960 --> 02:30.140
AccountingDepartment, jadi dari kelas itu sendiri.

02:30.140 --> 02:33.880
Sekarang kita dapat menggunakan properti instance ini di sini

02:33.880 --> 02:38.880
di getInstance dan memeriksa apakah ini. instance diatur di sini di dalam static, jika

02:39.260 --> 02:43.570
kita menggunakan ini, ia akan merujuk ke kelas itu sendiri dan kemudian kita

02:43.570 --> 02:47.610
dapat mengakses semua properti statis lainnya pada kelas tersebut.

02:47.610 --> 02:51.963
Alternatif untuk itu adalah menggunakan nama kelas.

02:53.720 --> 02:58.450
Dan sekarang jika ini diatur, saya ingin mengembalikan ini. instance, atau lagi-lagi

02:58.450 --> 03:01.600
nama kelas. tetapi ini di dalam metode statis

03:01.600 --> 03:04.030
berfungsi, ini memberi kita akses ke kelas

03:04.030 --> 03:05.680
itu sendiri, tidak seperti ini

03:05.680 --> 03:09.370
dalam metode non statis yang memberi kita akses ke instance yang

03:09.370 --> 03:11.590
kita coba kerjakan, bukan apa yang kita

03:11.590 --> 03:13.550
lakukan di sini.

03:13.550 --> 03:15.660
Namun, jika kita tidak berhasil masuk

03:15.660 --> 03:17.290
ke sini, maka kita belum memiliki

03:17.290 --> 03:22.030
instance, maka saya mengatur ini. instance, jadi properti instance statis

03:22.030 --> 03:25.660
ini sama dengan new AccountingDepartment, kita dapat

03:25.660 --> 03:28.630
menggunakan ini dari dalam sini karena sekarang

03:28.630 --> 03:32.030
kita berada di dalam metode kelas ini, jadi di sini kita

03:32.030 --> 03:35.250
dapat mengakses konstruktor privat dan memasukkan

03:35.250 --> 03:37.423
ID kita, dan array laporan kita dan

03:39.630 --> 03:41.200
kemudian mengembalikan

03:41.200 --> 03:44.830
ini. contohnya di sini.

03:44.830 --> 03:47.010
Jadi sekarang kita mengembalikan satu instance yang

03:47.010 --> 03:48.220
mungkin sudah kita miliki, atau

03:48.220 --> 03:50.970
jika kita belum memilikinya, kita membuat yang baru.

03:50.970 --> 03:53.270
Tetapi kode ini, kode yang ditandai di sini, hanya

03:53.270 --> 03:56.377
dapat berjalan sekali karena begitu kita memiliki instance, kita

03:56.377 --> 03:57.850
membuatnya menjadi blok if ini

03:57.850 --> 04:00.370
dan kita mengembalikan instance yang ada.

04:00.370 --> 04:03.700
Jadi sekarang jika Anda ingin bekerja dengan AccountingDepartment, alih-alih

04:03.700 --> 04:05.940
membuatnya seperti ini kita bisa memanggil, const

04:05.940 --> 04:10.153
accounting AccountingDepartment. getInstance, dan ini mengembalikan

04:11.646 --> 04:14.850
instance baru dari AccountingDepartment.

04:14.850 --> 04:18.190
Tetapi jika saya melakukan ini lagi, saya akan mendapatkan instance yang

04:18.190 --> 04:21.103
sama seperti yang akan Anda lihat jika saya konsol log accounting,

04:22.020 --> 04:23.570
dan accounting2 di sini.

04:23.570 --> 04:26.550
Anda akan melihat bahwa keduanya harus sama persis, jika

04:26.550 --> 04:28.253
kita simpan dan memuat ulang, Anda

04:30.550 --> 04:34.110
lihat di bawah ada dua objek AccountingDepartment saya, mereka

04:34.110 --> 04:36.690
memiliki ID yang sama, pengaturan yang sama persis,

04:36.690 --> 04:39.720
mereka adalah objek yang sama, instance yang sama karena

04:39.720 --> 04:41.530
kita hanya memiliki satu instance

04:41.530 --> 04:44.340
dengan pola singleton ini yang dibuat dengan bantuan

04:44.340 --> 04:47.900
kata kunci private di depan konstruktor.

04:47.900 --> 04:51.000
Sekarang ini, bisa dibilang, pendekatan yang tidak akan Anda

04:51.000 --> 04:52.490
gunakan sepanjang waktu.

04:52.490 --> 04:55.010
Pola singleton terkadang dapat berguna, Anda tidak membutuhkannya

04:55.010 --> 04:56.530
sepanjang waktu, tetapi pasti layak

04:56.530 --> 04:58.700
untuk mengetahuinya karena ini adalah sesuatu

04:58.700 --> 05:00.360
yang menarik yang dapat Anda implementasikan

05:00.360 --> 05:04.923
dengan mudah dengan TypeScript berkat konstruktor pribadi.
