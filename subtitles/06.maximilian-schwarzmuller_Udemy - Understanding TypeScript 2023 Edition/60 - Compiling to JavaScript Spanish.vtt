WEBVTT

00:02.510 --> 00:04.490
Instructor: Con nuestra clase básica si ahora vamos a

00:04.490 --> 00:07.570
la carpeta dist e inspeccionamos la app. js, vemos lo que se genera

00:07.570 --> 00:10.110
en JavaScript, y ahí vemos que tenemos

00:10.110 --> 00:13.560
esencialmente el mismo código.

00:13.560 --> 00:17.870
Dos diferencias importantes son, que el campo nombre

00:17.870 --> 00:20.870
que tenemos aquí no existe así en la

00:20.870 --> 00:22.230
clase.

00:22.230 --> 00:25.460
En realidad, esto estaría soportado en el JavaScript moderno, pero

00:25.460 --> 00:27.910
depende de la versión de JavaScript para la que se

00:27.910 --> 00:29.130
esté construyendo.

00:29.130 --> 00:33.450
Así que sólo en ES6, no está soportado en realidad.

00:33.450 --> 00:35.430
Y, por supuesto, lo que es impresionante

00:35.430 --> 00:37.360
es ver la asignación de tipos.

00:37.360 --> 00:39.760
Sin embargo, tenemos nuestra lógica

00:39.760 --> 00:43.870
constructiva y, de hecho, así es como se añaden propiedades a

00:43.870 --> 00:48.150
los objetos que se van a crear en Vanilla JavaScript cuando no se utiliza

00:48.150 --> 00:51.570
la última versión de JavaScript, en la que también se

00:51.570 --> 00:54.470
admite esta sintaxis de campo.

00:54.470 --> 00:56.480
Así que esto es lo que tengo en JavaScript.

00:56.480 --> 00:58.710
Ahora se pone interesante sin embargo

00:58.710 --> 01:02.080
si vamos al tsconfig. json y cambiamos el objetivo

01:02.080 --> 01:05.970
de ES5 a ES6 y comentamos aquí la lib.

01:05.970 --> 01:08.190
Para que las bibliotecas correctas y recomendadas

01:08.190 --> 01:10.870
sean añadidas por TypeScript automáticamente.

01:10.870 --> 01:14.090
Si ahora guardas este archivo de configuración, y vuelves a la app. js ves algo totalmente

01:14.090 --> 01:16.350
diferente.

01:16.350 --> 01:18.810
Y es bastante interesante lo que vemos aquí.

01:18.810 --> 01:20.960
¿Qué tenemos aquí?

01:20.960 --> 01:23.290
Bueno, lo que al final tenemos aquí

01:23.290 --> 01:26.453
es la llamada función constructora.

01:27.299 --> 01:31.600
La función constructora es algo que está incorporado

01:31.600 --> 01:33.770
en JavaScript y que básicamente

01:33.770 --> 01:35.520
ha estado ahí desde siempre,

01:35.520 --> 01:40.230
podría decirse, y esta es la forma de Vanilla no moderna de JavaScript

01:40.230 --> 01:44.480
de crear planos de objetos.

01:44.480 --> 01:47.100
Es una función que se llama con la ayuda de la

01:47.100 --> 01:50.890
palabra clave new y de repente, mágicamente, esta función aunque

01:50.890 --> 01:53.640
no tiene declaración de retorno dentro de ella

01:53.640 --> 01:55.850
devuelve algo como ves cuando la llamamos

01:55.850 --> 01:57.540
aquí.

01:57.540 --> 01:59.730
Devuelve un objeto.

01:59.730 --> 02:03.110
Un nuevo objeto que tendrá una propiedad nombre.

02:03.110 --> 02:04.940
Así que este concepto no es nuevo,

02:04.940 --> 02:08.680
no es introducido por el JavaScript moderno o por TypeScript.

02:08.680 --> 02:12.500
La idea de tener planos para los objetos ha existido en

02:12.500 --> 02:15.180
JavaScript durante mucho tiempo.

02:15.180 --> 02:19.070
En el pasado, sin embargo, teníamos que utilizar funciones constructoras y

02:19.070 --> 02:21.870
esto podía resultar poco intuitivo, especialmente para

02:21.870 --> 02:24.520
los desarrolladores que hubieran trabajado con diferentes

02:24.520 --> 02:26.600
lenguajes de programación.

02:26.600 --> 02:30.510
El JavaScript moderno introdujo la idea de las clases de

02:30.510 --> 02:34.950
esta sintaxis más limpia, y TypeScript también lo soporta.

02:34.950 --> 02:38.180
Y debido a la poderosa compilación de TypeScript,

02:38.180 --> 02:40.830
puedes elegir a dónde quieres compilarlo,

02:40.830 --> 02:44.130
al estilo antiguo que por supuesto funciona en más navegadores

02:44.130 --> 02:48.280
o a este estilo más moderno de ES6 que vimos antes.

02:48.280 --> 02:51.700
Que se parece mucho a esto de aquí.

02:51.700 --> 02:54.500
La clave es que tenemos esta característica incorporada

02:54.500 --> 02:57.300
en JavaScript y apoyada por TypeScript que podemos

02:57.300 --> 03:00.163
definir planos de objetos.
