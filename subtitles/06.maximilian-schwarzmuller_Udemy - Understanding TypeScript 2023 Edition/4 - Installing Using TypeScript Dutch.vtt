WEBVTT

00:02.160 --> 00:04.930
Instructeur: Hier is hetzelfde voorbeeld

00:04.930 --> 00:06.440
in een echt project.

00:06.440 --> 00:08.550
U vindt dit eenvoudige project, het index

00:08.550 --> 00:11.270
HTML-bestand en dit JavaScript-bestand, als bijlage

00:11.270 --> 00:13.340
bij deze video in een subbestand.

00:13.340 --> 00:16.900
U kunt dit gewoon openen en dan het index HTML-bestand openen.

00:16.900 --> 00:18.610
U kunt de code ook openen in

00:18.610 --> 00:20.890
een tekstverwerker naar keuze.

00:20.890 --> 00:22.160
Hier gebruik ik VisualStudioCode,

00:22.160 --> 00:26.250
en ik kom later in deze module terug op mijn exacte opstelling.

00:26.250 --> 00:29.250
U kunt deze twee tekstbestanden nu gewoon openen met een

00:29.250 --> 00:31.180
willekeurige tekstverwerker.

00:31.180 --> 00:34.110
Wat je daar zult vinden is dit JavaScript bestand,

00:34.110 --> 00:37.000
dat interageert met dit index HTML bestand.

00:37.000 --> 00:38.830
En dan dat index HTML bestand, vind je

00:38.830 --> 00:41.050
twee ingangen en de knop en een eventueel JavaScript

00:41.050 --> 00:43.698
bestand dat hier geïmporteerd wordt.

00:43.698 --> 00:45.843
We reiken deze elementen in principe aan.

00:45.843 --> 00:47.968
Dan hebben we hier een functie en een event

00:47.968 --> 00:50.020
listener op de knop die de functie activeert

00:50.020 --> 00:53.830
en het resultaat van de functie hier in de console logt.

00:53.830 --> 00:56.750
Als we nu gewoon dat index HTML-bestand openen,

00:56.750 --> 01:00.701
door erop te dubbelklikken in de Windows Verkenner of de Mac

01:00.701 --> 01:03.220
Finder zodat het opent in een browser,

01:03.220 --> 01:05.150
zie je het volgende.

01:05.150 --> 01:07.250
De twee ingangen en de toevoegknop

01:07.250 --> 01:11.170
en hier heb ik ook de browser-ontwikkelaarstools geopend.

01:11.170 --> 01:13.760
Als u hier bijvoorbeeld 10 en 5 invoert,

01:13.760 --> 01:16.640
verwacht u 15 als resultaat aan de rechterkant,

01:16.640 --> 01:19.420
maar in plaats daarvan ziet u 105.

01:19.420 --> 01:23.460
En dit toont ons een zwakte van JavaScript hier.

01:23.460 --> 01:25.890
Dit is geen technische fout.

01:25.890 --> 01:28.050
Het is geen fout die gegooid wordt,

01:28.050 --> 01:31.640
maar het is een logische fout in onze applicatie.

01:31.640 --> 01:33.986
Maar waar komt deze fout vandaan?

01:33.986 --> 01:37.490
Nou hier in JavaScript, reik ik deze twee ingangen aan en wanneer

01:37.490 --> 01:39.612
de knop wordt aangeklikt, krijg ik uiteindelijk

01:39.612 --> 01:41.920
de waarden van de twee ingangselementen

01:41.920 --> 01:45.300
en ik geef ze hier door om toe te voegen.

01:45.300 --> 01:46.970
En hier is het belangrijk te weten

01:46.970 --> 01:50.100
dat wanneer je in JavaScript de waarde van een invoerelement

01:50.100 --> 01:53.130
benadert, het altijd een string is.

01:53.130 --> 01:55.790
Altijd, ongeacht welk type invoer dit is.

01:55.790 --> 01:59.633
Of dit nu van het type nummer is of niet, het is altijd een string.

02:00.645 --> 02:03.995
Dus ik geef twee strings door aan deze functie aan het einde, en

02:03.995 --> 02:05.890
als je twee strings toevoegt in JavaScript,

02:05.890 --> 02:09.570
worden ze samengevoegd in plaats van wiskundig opgeteld.

02:09.570 --> 02:14.210
Daarom zien we 105, 10 en vijf aaneengeschakeld.

02:14.210 --> 02:17.090
Dit is het probleem met JavaScript hier.

02:17.090 --> 02:19.980
En dit is iets waarbij TypeScript ons kan helpen.

02:19.980 --> 02:22.360
Zonder TypeScript zouden we hier natuurlijk

02:22.360 --> 02:24.380
een if check kunnen toevoegen en controleren

02:24.380 --> 02:28.048
of het type van num one gelijk is aan number.

02:28.048 --> 02:33.048
En als het type van num twee gelijk is aan getal, en als dat het geval

02:34.030 --> 02:37.390
is dan geef ik mijn berekening zo terug, anders

02:37.390 --> 02:40.588
kan ik een fout gooien of ik converteer tenminste

02:40.588 --> 02:43.304
beide naar getallen door een plus toe

02:43.304 --> 02:47.428
te voegen voor elke parameter hier.

02:47.428 --> 02:50.510
Dit is wat code die we zouden kunnen schrijven.

02:50.510 --> 02:53.023
Misschien iets verfijnder dan dit in JavaScript.

02:53.023 --> 02:57.130
En daarmee zorgen we ervoor dat we getallen of de input omzetten

02:57.130 --> 03:00.670
in getallen als het nog geen getallen zijn.

03:00.670 --> 03:02.430
Dus als ik dit opnieuw laad

03:02.430 --> 03:05.220
en herhaal, krijgen we nu 15 vanwege

03:05.220 --> 03:07.590
onze gewijzigde code.

03:07.590 --> 03:09.350
Dus natuurlijk kunnen we dit doen in JavaScript.

03:09.350 --> 03:10.970
En dit is vanilla JavaScript,

03:10.970 --> 03:13.440
niets TypeScript-achtigs.

03:13.440 --> 03:16.640
Maar we hebben wat extra code geschreven voor een fout die ik eigenlijk

03:16.640 --> 03:19.048
in de eerste plaats zou willen voorkomen.

03:19.048 --> 03:22.210
Ik wil niet dat dit gebeurt.

03:22.210 --> 03:26.260
Ik wil er zeker van zijn dat we hier geen strings kunnen doorgeven aan add,

03:26.260 --> 03:28.930
omdat add een functie moet zijn die alleen op getallen

03:29.890 --> 03:31.020
werkt.

03:31.020 --> 03:32.570
Zodat we niet hoeven te controleren

03:33.428 --> 03:35.650
of we een getal krijgen of niet.

03:35.650 --> 03:37.000
Dus ik wil deze functie houden in

03:37.000 --> 03:38.500
de staat waarin hij zich bevond.

03:38.500 --> 03:41.630
Ik wil deze functie hier, net als deze.

03:41.630 --> 03:44.003
En dat is waar TypeScript ons kan helpen.

03:45.088 --> 03:45.921
Dus TypeScript kan

03:45.921 --> 03:48.900
ons helpen in zulke situaties zoals ik net liet zien.

03:48.900 --> 03:52.690
Om nu te zien hoe het ons helpt, laten we het installeren.

03:52.690 --> 03:56.590
Dus op typescriptlang. org, kun je op downloaden klikken.

03:56.590 --> 03:58.540
En daar leer je hoe je het installeert.

03:58.540 --> 04:00.250
En we zullen het installeren

04:01.136 --> 04:02.880
met dit commando dat de NPM tool

04:02.880 --> 04:06.750
gebruikt en de NPM tool maakt deel uit van het Node JS pakket.

04:06.750 --> 04:10.210
Dus ook al gaan we hier geen Node JS code schrijven, toch moeten

04:10.210 --> 04:12.910
we Node JS installeren, gewoon omdat dat achter

04:12.910 --> 04:14.760
de schermen ook gebruikt zal worden

04:14.760 --> 04:17.770
door sommige tools die we gebruiken.

04:17.770 --> 04:21.780
En wanneer we Node JS installeren, installeren we ook NPM,

04:21.780 --> 04:24.956
de Node Package Manager, een tool waarmee we TypeScript

04:24.956 --> 04:29.200
wereldwijd op onze machine kunnen installeren.

04:29.200 --> 04:31.452
Dus bezoek gewoon nodejs. org en installeer

04:31.452 --> 04:34.220
daar de laatste versie die je hier vindt.

04:34.220 --> 04:35.723
Klik gewoon op deze knop.

04:36.586 --> 04:38.276
Het zal dan downloaden en installeren of u kunt dat installatieprogramma

04:38.276 --> 04:39.420
doorlopen.

04:39.420 --> 04:42.360
Het wordt ondersteund voor alle besturingssystemen.

04:42.360 --> 04:45.300
En zodra je Node JS hebt geïnstalleerd,

04:45.300 --> 04:47.936
kun je dit commando uitvoeren.

04:47.936 --> 04:51.440
Open gewoon uw normale terminal of opdrachtprompt

04:51.440 --> 04:54.800
en kopieer dat commando.

04:54.800 --> 04:57.223
Belangrijk, op Mac en Linux moet u hier misschien sudo

04:57.223 --> 04:59.412
voor zetten om de juiste rechten te krijgen.

04:59.412 --> 05:02.810
Op Windows is dit niet nodig.

05:02.810 --> 05:05.100
Zorg er dus gewoon voor dat u vervolgens TypeScript

05:05.100 --> 05:06.810
installeert met dit commando.

05:06.810 --> 05:09.372
Voer uw wachtwoord in voor het geval u daarom wordt gevraagd.

05:09.372 --> 05:12.176
En daarmee heb je TypeScript globaal geïnstalleerd

05:12.176 --> 05:15.430
op je machine, wat betekent dit nu?

05:15.430 --> 05:17.696
TypeScript geïnstalleerd.

05:17.696 --> 05:20.810
Vergeet niet dat TypeScript een programmeertaal is, maar

05:20.810 --> 05:22.750
het is enkel een programmeertaal die

05:22.750 --> 05:25.212
werkt omdat we ook deze compiler hebben, dit

05:25.212 --> 05:28.137
gereedschap dat compileert naar JavaScript.

05:28.137 --> 05:31.310
Dus uiteindelijk, wat we hier geïnstalleerd hebben,

05:31.310 --> 05:33.296
is de compiler en alles wat het

05:33.296 --> 05:36.116
moet weten om TypeScript code te begrijpen

05:36.116 --> 05:39.020
om het om te zetten naar JavaScript.

05:39.020 --> 05:41.036
Dus hiermee hebben we de compiler

05:41.036 --> 05:44.460
geïnstalleerd en kunnen we nu het TSC commando uitvoeren

05:44.460 --> 05:47.210
dat deze TypeScript compiler aanroept om een

05:47.210 --> 05:50.870
TypeScript bestand te compileren naar JavaScript.

05:50.870 --> 05:54.140
Dus om dit te zien in dit project waar we aan gewerkt hebben, laten we gewoon een nieuw

05:54.140 --> 05:56.563
bestand toevoegen met ts. ts bijvoorbeeld.

05:56.563 --> 05:58.677
Elke naam die u wilt, maar de extensie moet . ts wat

05:58.677 --> 06:03.677
staat voor TypeScript.

06:05.100 --> 06:07.651
Laten we nu die JavaScript-code kopiëren

06:07.651 --> 06:09.850
naar het TypeScript-bestand.

06:09.850 --> 06:13.100
Hier in VisualStudioCode krijg ik meteen een aantal fouten die

06:13.100 --> 06:14.280
we nu gaan oplossen.

06:14.280 --> 06:16.379
En dit is een groot voordeel van TypeScript.

06:16.379 --> 06:18.915
Als je de juiste IDE gebruikt, en mijn

06:18.915 --> 06:22.710
sterke aanbeveling is VisualStudioCode, en daar kom

06:22.710 --> 06:24.420
ik later op terug.

06:24.420 --> 06:27.810
Dan krijgt u al goede ondersteuning in de IDE bij het werken

06:27.810 --> 06:30.230
binnen TypeScript-bestanden.

06:30.230 --> 06:34.710
Hier laat het TypeScript in feite mijn code analyseren en enkele

06:34.710 --> 06:36.910
zwakke punten identificeren.

06:36.910 --> 06:39.720
Wat geweldig is, want dat is precies wat ik wil.

06:39.720 --> 06:42.110
Dus hier in dit voorbeeld, laat me het JavaScript

06:42.110 --> 06:44.003
alleen JS bestand verwijderen.

06:45.952 --> 06:48.360
En daarmee is een deel van de fouten verdwenen, omdat

06:48.360 --> 06:50.539
werd vastgesteld dat sommige constanten en dergelijke

06:50.539 --> 06:53.230
in meerdere bestanden werden gebruikt.

06:53.230 --> 06:55.787
Maar ik krijg nog steeds een foutmelding.

06:55.787 --> 06:57.700
En wat je bijvoorbeeld ziet, is dat het niet

06:57.700 --> 07:00.108
zeker is of er echt een waarde-eigenschap is.

07:00.108 --> 07:03.200
Nu is dat een fout die ik niet eens eerder overwoog

07:03.200 --> 07:05.720
in JavaScript, maar het is waar.

07:05.720 --> 07:08.350
Ik selecteer hier een element op ID.

07:08.350 --> 07:11.680
Nu kan TypeScript niet weten of dit echt zal werken.

07:11.680 --> 07:13.160
Misschien heb ik hier een typfout.

07:13.160 --> 07:15.940
In dit geval zou ik geen element kunnen selecteren.

07:15.940 --> 07:17.704
Dit element zou gewoon niet bestaan op de pagina.

07:17.704 --> 07:20.164
We hebben dus misschien een typfout en TypeScript analyseert

07:20.164 --> 07:22.472
uw HTML-code niet om uit te zoeken of dit werkt.

07:22.472 --> 07:24.468
Dus voor één, zou dit kunnen mislukken.

07:24.468 --> 07:28.740
Maar zelfs als het lukt en we daar een element selecteren, hoeft het

07:28.740 --> 07:30.910
geen invoerelement te zijn.

07:30.910 --> 07:34.720
Het zou elk ander element kunnen zijn en de meeste HTML-elementen hebben

07:34.720 --> 07:37.450
geen waarde-eigenschap waartoe je toegang hebt.

07:37.450 --> 07:38.630
En dit is al geweldig.

07:38.630 --> 07:41.372
TypeScript dwingt ons explicieter te zijn, duidelijker

07:41.372 --> 07:44.060
te zijn over onze bedoelingen en onze code dubbel

07:44.060 --> 07:46.130
te controleren.

07:46.130 --> 07:48.100
En bijvoorbeeld hier, en je hoeft al

07:48.100 --> 07:49.820
die syntax niet te begrijpen.

07:49.820 --> 07:52.172
We zullen het stap voor stap leren tijdens de cursus.

07:52.172 --> 07:55.660
Maar hier zouden we TypeScript bijvoorbeeld kunnen laten weten

07:55.660 --> 07:58.204
dat we zeker weten dat we een element krijgen door

07:58.204 --> 08:00.080
een uitroepteken toe te voegen.

08:00.080 --> 08:04.170
Dit vertelt TypeScript in feite dat dit nooit null zal opleveren.

08:04.170 --> 08:06.370
Dit zal altijd een element vinden.

08:06.370 --> 08:08.420
En als ontwikkelaar weet ik natuurlijk

08:08.420 --> 08:10.350
dat dit altijd een element zal vinden,

08:10.350 --> 08:11.920
want ik heb de ID dubbel gecontroleerd

08:11.920 --> 08:14.763
en ik zie ja, ik heb die ID hier.

08:15.610 --> 08:17.270
Nu weet ik ook dat het altijd

08:17.270 --> 08:19.500
een invoerelement zal zijn.

08:19.500 --> 08:22.408
We kunnen dus als HTML-invoerelement een syntaxis

08:22.408 --> 08:25.470
gebruiken die typecasting heet en die ik later ook nader

08:25.470 --> 08:27.746
zal toelichten, om TypeScript te laten

08:27.746 --> 08:30.327
weten welk type element dit zal zijn.

08:30.327 --> 08:32.926
We kunnen dit ook toepassen op het tweede element.

08:32.926 --> 08:35.650
Dus voor alle duidelijkheid, dit

08:35.650 --> 08:37.510
is TypeScript syntax.

08:37.510 --> 08:39.520
Ik kan dit uitroepteken hier gebruiken

08:39.520 --> 08:41.600
en ik kan dit typecasting hier gebruiken

08:41.600 --> 08:44.786
omdat we in een . ts bestand, zitten we in een TypeScript bestand.

08:44.786 --> 08:48.380
We zullen dit compileren naar JavaScript.

08:48.380 --> 08:51.050
Dit zou niet werken in het vanille JavaScript.

08:51.050 --> 08:53.427
Dit is er niet.

08:53.427 --> 08:56.300
Hierdoor worden we gedwongen duidelijker te zijn over onze

08:56.300 --> 08:58.460
bedoelingen en echt na te denken over onze code

08:58.460 --> 09:01.060
en deze dubbel te controleren, wat geweldig is.

09:01.060 --> 09:03.160
Maar dat is niet eens het grootste voordeel.

09:04.270 --> 09:06.820
Het grootste voordeel is de toevoeging van types.

09:06.820 --> 09:09.630
Daaraan dankt TypeScript tenslotte zijn naam.

09:09.630 --> 09:12.282
En hier zeg ik niets over de soorten gegevens waarop

09:12.282 --> 09:14.204
deze functie bewerkingen uitvoert.

09:14.204 --> 09:17.886
Als we met de muis over een van deze parameters

09:17.886 --> 09:20.126
gaan, zien we hier iets.

09:20.126 --> 09:22.828
En uiteindelijk zegt TypeScript tegen ons:

09:22.828 --> 09:24.880
"Ik weet niet wat er in zit. Het kan elk type waarde zijn.

09:24.880 --> 09:27.162
Nu kunnen we een explicieter type toevoegen in TypeScript-bestanden.

09:27.162 --> 09:31.960
Dus niet in JavaScript-bestanden maar in TypeScript-bestanden, door hier een dubbele punt toe

09:31.960 --> 09:33.806
te voegen en dan het type op te geven.

09:33.806 --> 09:38.580
Bijvoorbeeld, nummer.

09:38.580 --> 09:40.730
Dit hier doen en dit hier doen.

09:40.730 --> 09:43.300
Met deze extra syntax van TypeScript, die

09:43.300 --> 09:45.246
deze compiler begrijpt, vertellen

09:45.246 --> 09:47.928
we TypeScript dat dit hier van het type nummer

09:47.928 --> 09:50.960
zal zijn en dit van het type nummer.

09:50.960 --> 09:54.010
En daarom krijgen we nu weer een foutmelding.

09:54.010 --> 09:56.126
En we krijgen deze fout trouwens

09:56.126 --> 09:58.060
niet alleen in de IDE.

09:58.060 --> 09:59.370
We krijgen het ook als we deze

09:59.370 --> 10:01.940
code proberen te compileren, want dat is uiteindelijk

10:01.940 --> 10:03.820
wat we moeten doen, toch?

10:03.820 --> 10:05.326
Om dit nu te compileren, open ik een terminal.

10:05.326 --> 10:08.670
En hier open ik gewoon mijn terminal of opdrachtprompt

10:08.670 --> 10:10.760
die geïntegreerd is in deze IDE.

10:10.760 --> 10:13.683
Het is de gewone systeemopdrachtprompt.

10:14.947 --> 10:16.530
De gewone systeemterminal gebruikte

10:16.530 --> 10:18.110
ik ook hier, maar ik navigeerde

10:18.110 --> 10:19.533
al naar deze map.

10:20.510 --> 10:22.446
Dus als u geen ingebouwde IDE-terminal

10:22.446 --> 10:27.420
gebruikt, kunt u uw gewone terminal gebruiken, maar CD navigeer in

10:27.420 --> 10:30.265
die uitgepakte startmap waar u uw TypeScript-bestand

10:30.265 --> 10:33.960
hebt toegevoegd.

10:33.960 --> 10:36.300
En als u eenmaal in die map bent, kunt u TSC uitvoeren.

10:36.300 --> 10:38.888
Dat zal deze TypeScript compiler aanroepen

10:38.888 --> 10:42.980
die we eerder hebben geïnstalleerd met behulp van dash ts. ts.

10:42.980 --> 10:47.980
En als je dit uitvoert, krijg je een foutmelding.

10:47.990 --> 10:50.728
U krijgt nog steeds een JavaScript-bestand,

10:50.728 --> 10:53.267
omdat TypeScript het standaard compileert

10:53.267 --> 10:57.460
naar JavaScript, u leert later in die cursus ook hoe u dit kunt

10:57.460 --> 11:00.050
onderdrukken.

11:00.050 --> 11:02.900
Maar het geeft je een compiler fout terwijl je dat doet.

11:02.900 --> 11:05.904
Het vertelt u dat een argument van het type string niet kan

11:05.904 --> 11:09.070
worden toegewezen aan een parameter van het type number.

11:09.070 --> 11:13.128
Het probleem hier is dus dat TypeScript begrijpt dat wat

11:13.128 --> 11:16.550
we krijgen op de value property van ons input element

11:16.550 --> 11:18.930
een string zal zijn.

11:18.930 --> 11:23.130
Dat zien we ook hier in de IDE.

11:23.130 --> 11:24.786
En we kunnen dit niet doorgeven

11:24.786 --> 11:28.130
aan add, want daar willen we geen string, maar een getal.

11:28.130 --> 11:31.026
We moeten dit dus oplossen door bijvoorbeeld dit hier om

11:31.026 --> 11:33.600
te zetten in een getal door een plus toe te voegen.

11:33.600 --> 11:36.790
En zodra we dit doen, kunnen we deze code opnieuw

11:36.790 --> 11:39.708
compileren door dat commando te herhalen

11:39.708 --> 11:42.406
en nu compileert het zonder fouten.

11:42.406 --> 11:45.225
Het geeft ons dit met behulp van TypeScript. JavaScript bestand en nu toont het weer wat

11:45.225 --> 11:49.030
fouten omdat het niet begrijpt

11:49.030 --> 11:50.690
dat het hier nooit beide bestanden

11:50.690 --> 11:53.090
tegelijk zal gebruiken.

11:54.028 --> 11:55.373
Nogmaals, dit is allemaal iets wat later in de

11:56.466 --> 11:58.530
cursus beter zal worden als we dit eenmaal geconfigureerd hebben.

11:58.530 --> 12:00.428
We kunnen dit voorlopig negeren.

12:00.428 --> 12:01.261
Dus het geeft me dit bestand.

12:02.588 --> 12:04.348
En als we dit openen, zien we hier iets interessants.

12:04.348 --> 12:06.210
We zien dat daar natuurlijk onze types weg zijn.

12:06.210 --> 12:08.690
Deze casting hier is weg.

12:08.690 --> 12:11.280
We hebben weer vanille JavaScript.

12:11.280 --> 12:13.308
Dus als we hier naar ons TypeScript bestand

12:13.308 --> 12:16.250
kijken, zien we dat we daar al deze mooie toevoegingen hebben.

12:16.250 --> 12:18.786
Maar zoals ik al zei, dit zijn slechts TypeScript-functies.

12:18.786 --> 12:22.130
Wanneer je compileert naar JavaScript, worden ze gebruikt om je

12:22.130 --> 12:24.600
code te evalueren en mogelijke fouten op te sporen,

12:24.600 --> 12:26.770
maar daarna worden ze eruit gehaald en krijgen

12:26.770 --> 12:29.090
we gewoon JavaScript als uitvoer.

12:29.090 --> 12:33.960
Dus nu kunnen we naar ons index HTML-bestand

12:33.960 --> 12:37.010
gaan en importeren met ts. js en dat is belangrijk.

12:37.010 --> 12:41.230
Importeer altijd JavaScript-bestanden omdat

12:41.230 --> 12:43.550
de browser TypeScript niet kan uitvoeren.

12:43.550 --> 12:45.990
We moeten het resultaat van onze compilatie importeren.

12:45.990 --> 12:49.480
En nu, als we dit opnieuw laden, hebben we onze werkende

12:49.480 --> 12:52.108
code, omdat we nu goede JavaScript-code

12:52.108 --> 12:55.750
hebben waar we dit probleem hebben opgelost door onze invoer

12:55.750 --> 12:57.970
te casten voordat we hem doorgeven

12:59.410 --> 13:01.110
aan de functie.

13:01.110 --> 13:03.010
Maar we konden deze problemen oplossen

13:03.986 --> 13:06.087
dankzij onze type-annotaties hier.

13:06.087 --> 13:08.100
En zoals je zag, moesten we ook enkele

13:08.100 --> 13:10.720
andere delen van de code schoner schrijven.

13:10.720 --> 13:13.220
En daarom is TypeScript geweldig.

13:13.220 --> 13:15.400
Het dwingt ons betere, schonere en minder

13:15.400 --> 13:17.880
foutgevoelige code te schrijven.
