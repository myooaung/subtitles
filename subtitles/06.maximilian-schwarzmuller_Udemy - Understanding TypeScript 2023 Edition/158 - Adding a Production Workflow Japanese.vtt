WEBVTT

00:02.130 --> 00:04.110
講師：ここでは､ Webpackの開発ワークフローを準備しました｡

00:04.110 --> 00:06.137
Webpackの開発サーバーに設定し､

00:06.137 --> 00:16.570
モードをdevelopmentに設定し､ ソースマップを設定して､ デバッグの体験を向上させ､ より良いエラーメッセージなどを表示するように設定しました｡

00:16.570 --> 00:20.150
さて､ 本番環境では､ コードを準備してサーバーにアップロードし､

00:20.150 --> 00:23.260
エンドユーザーに提供することになりますが､

00:23.260 --> 00:27.070
通常､ 別のワークフローが必要です｡

00:27.070 --> 00:31.820
というわけで､ webpackという新しいconfigを追加します｡

00:31.820 --> 00:31.820
コンフィグ プロッドです｡  js.

00:31.820 --> 00:33.210
この名前は､ Webpackがデフォルトで探さないので､

00:33.210 --> 00:36.043
あなたが決めることではありません｡

00:36.880 --> 00:39.710
すぐに探すように指示しますが｡ 

00:39.710 --> 00:48.480
その前に､ 開発用の設定をすべてこのコンフィグにコピーしておきましょう｡

00:48.480 --> 00:48.480
prodファイルですが､ ここで微調整してみましょう｡ 

00:48.480 --> 00:51.150
例えば､ モードをプロダクションに設定することができます｡ 

00:51.150 --> 00:54.380
これは､ Webpackに最適化､

00:54.380 --> 00:59.220
コードの最小化などを指示するものです｡

00:59.220 --> 01:00.440
エントリーを残す｡ 

01:00.440 --> 01:02.910
出力では､ Webpackの開発サーバーに必要だったため､

01:02.910 --> 01:05.860
パブリックパスを取り除くことができません｡

01:05.860 --> 01:08.810
なぜなら､ 本番環境では､ Webpackスクリプトを実行し､

01:08.810 --> 01:10.430
ディスクに書き出した出力を生成し､

01:10.430 --> 01:16.900
ローカルで動作するサーバーに一時的に提供することはしたくないからです｡

01:16.900 --> 01:19.350
devtoolをnoneに設定することで､

01:19.350 --> 01:24.913
ソースマップを生成しないことができます｡

01:26.140 --> 01:30.160
あとは､ そのままでも良いのですが､ さらに追加していきます｡ 

01:30.160 --> 01:36.220
この一番下に､ pluginsという項目を追加して､ これを配列に設定したいと思います｡

01:36.220 --> 01:41.070
プラグインとは､ Webpackのワークフローに追加できる拡張機能､

01:41.070 --> 01:43.020
つまりプラグインのことで､

01:43.020 --> 01:47.820
基本的に出力全体､ プロジェクト全体に適用されるものです｡

01:47.820 --> 01:52.870
ルールやモジュールは､ ファイル単位で適用されます｡

01:52.870 --> 01:57.260
プラグインは一般的なワークフローに適用されます｡ 

01:57.260 --> 01:58.730
ここでは､ 新しい出力が書き込まれる前に､

01:58.730 --> 02:09.410
distフォルダ内のすべてを自動的に削除するプラグインを追加して､ distフォルダに常に最新の出力があるようにしたいと思います｡

02:09.410 --> 02:11.900
そのために､ -save-devで全く新しいパッケージをインストールすることにします｡

02:11.900 --> 02:16.900
それがclean-webpack-pluginです｡

02:19.090 --> 02:21.900
そして､ これはプロジェクトを再構築するたびに､

02:21.900 --> 02:26.360
distフォルダーをクリーンアップするのに役立ちます｡

02:26.360 --> 02:29.820
では､ それをインストールした上で､ この一番上にインポートしてみましょう｡ 

02:29.820 --> 02:32.090
CleanPluginという名前にして､ require

02:32.090 --> 02:36.400
clean-webpack-pluginでインポートして､ 一番下のplugins配列にインストールした状態で､

02:36.400 --> 02:44.073
new CleanPluginを呼び出すだけです｡

02:44.073 --> 02:44.073
CleanWebpackPlugin

02:45.422 --> 02:46.500
を作成し､ これをインスタンス化します｡

02:46.500 --> 02:49.660
これはコンストラクタ関数で､ 今度はこれをインスタンス化します｡ 

02:49.660 --> 02:53.260
これだけで､ Webpackが出力フォルダに何かを書き込む前に､

02:53.260 --> 02:58.593
その中にあるものをすべて消去することを伝えることができます｡

02:59.440 --> 03:02.020
これで､ 完成した制作ワークフローを手に入れました｡ 

03:02.020 --> 03:07.280
では､ それを使うために､ パッケージへ移動してみましょう｡  json を作成し､ そこでこのビルドスクリプトを調整しましょう｡

03:07.280 --> 03:10.510
ここでは､ Wepbackにprodファイル､ つまり本番用の設定ファイルを使用するように指示したいので､

03:10.510 --> 03:21.140
--configを追加して､ webpackで実行します｡

03:21.140 --> 03:21.140
コンフィグ プロッドです｡  jsはこちら｡ 

03:21.140 --> 03:29.730
これは､ あなたが選んだファイル名で､ デフォルトのWebpackの代わりにこの設定ファイルを使用するようにWebpackに指示します｡

03:29.730 --> 03:29.730
コンフィグ js

03:29.730 --> 03:32.030
ファイルを探します｡

03:32.030 --> 03:34.600
これで､ npn run buildを実行すると､

03:34.600 --> 03:39.950
アプリが本番用にビルドされ､ このように最適化された出力が得られます｡

03:39.950 --> 03:42.460
だから､ 待っていれば､ ここにバンドルされたのです｡  js ファイルを作成し､ これが実運用に最適化されたコードとなり､

03:42.460 --> 03:50.980
インデックスと一緒に作成されます｡

03:50.980 --> 03:50.980
html ファイルとアプリの cssファイルは､

03:50.980 --> 03:56.393
アプリケーションをデプロイする場合､ ここでサーバーに置くことになるものです｡

03:57.260 --> 04:00.440
また､ このモジュールはこれで終了となります｡ 

04:00.440 --> 04:02.140
では､ 学んだことをまとめてみます｡ 
