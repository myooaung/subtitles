WEBVTT

00:02.190 --> 00:04.480
Vì vậy, để bắt đầu với thuốc generic của riêng chúng tôi.

00:04.480 --> 00:06.820
Ở đây bên dưới mã nhận xét.

00:06.820 --> 00:09.210
Tôi sẽ bắt đầu với một chức năng chung.

00:09.210 --> 00:11.430
Bạn có thể xây dựng các lớp và hàm chung.

00:11.430 --> 00:15.350
Tôi sẽ chỉ ra cả hai và ở đây tôi sẽ bắt đầu với một hàm.

00:15.350 --> 00:17.490
Bây giờ giả sử chúng ta muốn có

00:17.490 --> 00:22.490
một hàm về cơ bản hợp nhất hai đối tượng và trả về một đối tượng mới.

00:23.660 --> 00:25.380
Vì vậy, ở đây chúng ta có thể đặt tên nó là "hợp nhất".

00:25.380 --> 00:28.803
Và chúng tôi muốn lấy đối tượng A và đối tượng B làm đầu vào.

00:30.010 --> 00:33.990
Tất nhiên bây giờ chúng ta có thể viết hàm này theo một cách nhất định.

00:33.990 --> 00:36.660
Chúng ta có thể nói đây là đối tượng

00:36.660 --> 00:39.033
kiểu và đây là đối tượng kiểu.

00:39.960 --> 00:41.760
Và chức năng này sẽ trả

00:41.760 --> 00:45.200
về kết quả của việc gán đối tượng.

00:45.200 --> 00:48.130
Nơi tôi nhận được đối tượng A và đối tượng B.

00:48.130 --> 00:50.230
Vì vậy, tất nhiên vì chúng tôi đã có phương thức gán

00:50.230 --> 00:53.000
đối tượng này đã được tích hợp sẵn trong javascript bình thường.

00:53.000 --> 00:55.820
Chúng tôi có thể tranh luận nếu chúng tôi thực sự cần chức năng hợp nhất

00:55.820 --> 00:58.140
nhưng tất nhiên bạn có thể thực hiện thêm công việc ở đây.

00:58.140 --> 01:00.480
Bạn có thể làm phong phú điều này với thông tin

01:00.480 --> 01:01.833
bổ sung, với các tùy chọn bổ

01:01.833 --> 01:04.730
sung và cuối cùng, đây chỉ là một bản demo, chỉ là ví dụ.

01:04.730 --> 01:07.510
Vì vậy, điều này sẽ hợp lệ, chúng ta có thể gọi hợp

01:07.510 --> 01:11.830
nhất tại đây và bảng điều khiển ghi lại kết quả của nó, như thế này.

01:11.830 --> 01:15.130
Và sau đó chuyển vào một đối tượng có khóa tên và đối tượng

01:15.130 --> 01:17.570
thứ hai có tuổi và nếu chúng tôi chạy đối tượng

01:17.570 --> 01:20.010
đó và chúng tôi sẽ lưu đối tượng này.

01:20.010 --> 01:22.780
Ở đây trong trình duyệt thực sự, chúng tôi nhận được đầu ra này.

01:22.780 --> 01:24.280
Vì vậy, chúng tôi nhận được đối tượng hợp nhất này.

01:24.280 --> 01:27.050
Bây giờ điều này hoạt động, vấn

01:27.050 --> 01:29.660
đề chúng tôi gặp phải là nếu

01:31.660 --> 01:33.300
chúng tôi cố gắng

01:33.300 --> 01:38.097
lưu trữ tên hợp nhất này tối đa và tuổi 30.

01:39.620 --> 01:44.620
Nếu chúng tôi cố lưu trữ cái này ở đây, tôi không thể truy cập tên trên kết quả, tôi không

01:45.770 --> 01:48.730
thể truy cập tuổi trên kết quả trên đối tượng được

01:48.730 --> 01:50.020
hợp nhất này.

01:50.020 --> 01:52.360
Mặc dù chúng tôi biết rằng cả hai sẽ tồn tại.

01:52.360 --> 01:54.830
Bởi vì TypeScript không biết điều này.

01:54.830 --> 01:57.100
Typescript không thể biết điều này.

01:57.100 --> 01:59.310
Bởi vì chúng tôi chỉ nói về nó, bạn đang nhận một đối

01:59.310 --> 02:02.370
tượng và cuối cùng nhập vào trước để chúng tôi trả về một đối tượng.

02:02.370 --> 02:04.790
Điều này đúng, nhưng không mang theo tất

02:04.790 --> 02:07.810
cả thông tin mà chúng tôi có thể sử dụng ở đây.

02:07.810 --> 02:09.970
Tất nhiên, bây giờ chúng ta luôn có thể thực hiện truyền

02:09.970 --> 02:12.080
kiểu, chúng ta có thể nói với TypeScript rằng những

02:12.080 --> 02:14.220
gì chúng ta nhận được là một đối tượng nơi chúng ta có

02:14.220 --> 02:15.960
khóa tên và nơi chúng ta có khóa tuổi.

02:15.960 --> 02:19.020
Nhưng điều đó thực sự rườm rà nếu chúng ta phải làm điều đó.

02:19.020 --> 02:21.420
Vì vậy, ở đây, thuốc generic có thể giúp chúng tôi.

02:21.420 --> 02:23.750
Chúng tôi biến hàm này thành một hàm chung bằng

02:23.750 --> 02:26.470
cách thêm các dấu ngoặc nhọn này sau tên hàm.

02:26.470 --> 02:29.740
Và sau đó chúng tôi xác định định danh Q.

02:29.740 --> 02:33.190
Thông thường bạn bắt đầu với T, cho loại.

02:33.190 --> 02:35.600
Nhưng bạn có thể sử dụng bất kỳ số nhận dạng nào

02:35.600 --> 02:37.730
ở đây, không nhất thiết phải là một ký tự

02:37.730 --> 02:39.860
nhưng quy ước là sử dụng một ký tự đơn và thông

02:39.860 --> 02:42.250
thường, nếu bạn chỉ có một loại chung, bạn đặt

02:42.250 --> 02:43.690
tên cho T này.

02:43.690 --> 02:46.640
Và sau đó bạn nói, loại chung này ở đây, loại này hiện

02:46.640 --> 02:48.510
có sẵn bên trong chức năng này.

02:48.510 --> 02:51.453
Vì vậy, chúng tôi có thể nói những gì chúng tôi nhận được ở đây là loại T.

02:53.090 --> 02:55.740
Có vẻ lạ, chúng ta sẽ đến đó mà không phải lo lắng.

02:55.740 --> 02:57.280
Bây giờ ở đây chúng ta có hai đối số mà chúng

02:57.280 --> 02:59.570
ta không biết chính xác chúng sẽ trông như thế nào.

02:59.570 --> 03:02.450
Vì vậy, tôi sẽ chấp nhận một loại chung chung thứ hai ở đây.

03:02.450 --> 03:04.340
Đơn giản bằng cách thêm dấu phẩy vào dấu ngoặc

03:04.340 --> 03:07.400
nhọn, Và sau đó chúng ta chỉ cần tiếp tục trong bảng chữ cái.

03:07.400 --> 03:10.490
Và do đó, tham số hoặc loại chung thứ hai

03:10.490 --> 03:15.490
mà bạn có thể đang sử dụng trong một hàm thường được đặt tên là U.

03:15.630 --> 03:18.560
Vì vậy, chúng tôi có thể nói đây là loại U.

03:18.560 --> 03:22.100
Được rồi, bây giờ điều này mang lại cho chúng ta điều gì?

03:22.100 --> 03:25.450
Trên thực tế, rất nhiều, như bạn thấy chỉ với

03:25.450 --> 03:28.620
điều này nếu bạn di chuột qua hợp nhất, bản

03:28.620 --> 03:33.230
đánh máy suy ra rằng hàm này trả về giao điểm của T và U.

03:33.230 --> 03:36.800
Và tất nhiên chúng ta cũng có thể đặt điều này một cách rõ ràng như

03:36.800 --> 03:38.040
thế này nhưng chúng ta

03:38.040 --> 03:42.010
thậm chí không cần phải làm điều đó vì đối tượng gán trả về một giao điểm

03:42.010 --> 03:44.150
và do đó chúng ta đã trả về kết quả của việc

03:44.150 --> 03:45.740
gán đối tượng, TypeScript tự

03:45.740 --> 03:48.390
động hiểu rằng hàm này trả về giao điểm.

03:48.390 --> 03:50.320
Vì vậy, làm thế nào là hữu ích sau đó?

03:50.320 --> 03:52.510
Chà, nếu bây giờ chúng ta di chuột qua đối tượng

03:52.510 --> 03:54.260
được hợp nhất, chúng ta sẽ thấy rằng

03:54.260 --> 03:56.450
bây giờ chỉ với bản thảo này hiểu rằng những gì

03:56.450 --> 03:59.230
chúng ta lưu trữ trong đối tượng được hợp nhất là giao điểm

03:59.230 --> 04:01.690
của hai loại đối tượng này, bởi vì nó thấy rằng chúng

04:01.690 --> 04:04.220
ta đang chuyển vào các đối tượng này, là của các đối tượng

04:04.220 --> 04:06.100
này các loại mà nó suy ra.

04:06.100 --> 04:08.840
Chuỗi tên và số tuổi.

04:08.840 --> 04:11.590
Và hàm của chúng tôi trả về giao điểm.

04:11.590 --> 04:13.630
Tại sao nó có thể suy luận điều này bây giờ

04:13.630 --> 04:16.313
mà không phải với đối tượng mà chúng ta đã có trước đó?

04:17.220 --> 04:19.560
Bởi vì đối tượng là loại rất không đặc hiệu.

04:19.560 --> 04:22.490
Chúng tôi nói bất kỳ đối tượng nào và vâng, vì vậy TypeScript

04:22.490 --> 04:24.530
có thể suy ra rằng chúng tôi trả về giao

04:24.530 --> 04:26.600
điểm của đối tượng và đối tượng.

04:26.600 --> 04:29.570
Nhưng giao điểm của hai đối tượng chưa biết chỉ

04:29.570 --> 04:32.270
là một đối tượng chưa biết mới không cung cấp

04:32.270 --> 04:35.420
bất kỳ thông tin loại bổ sung nào cho bản thảo.

04:35.420 --> 04:38.170
Với các loại chung chung, những gì chúng

04:38.170 --> 04:43.170
ta đang nói với TypeScript là, hai tham số này có thể và thường sẽ thuộc các

04:43.282 --> 04:47.100
loại khác nhau và do đó TypeScript có thể hiểu rằng chúng

04:47.100 --> 04:49.690
ta không chỉ làm việc với một số loại đối

04:49.690 --> 04:53.150
tượng ngẫu nhiên, mà chúng ta sẽ nhận được khác nhau

04:53.150 --> 04:55.250
gõ dữ liệu ở đây.

04:55.250 --> 04:56.940
Và chức năng này nói chung

04:56.940 --> 04:59.770
sẽ trả về giao điểm của dữ liệu đó.

04:59.770 --> 05:01.773
Và do đó, TypeScript có thể hiểu rằng

05:01.773 --> 05:04.390
những gì chúng ta lưu trữ ở đây trong đối tượng

05:04.390 --> 05:07.910
được hợp nhất là giao nhau giữa dữ liệu của hai đầu vào này.

05:07.910 --> 05:09.530
Bởi vì bây giờ chúng ta không

05:09.530 --> 05:14.423
chỉ xử lý một số đối tượng chưa biết ở đây mà còn với các loại rất cụ thể.

05:15.330 --> 05:20.150
Và bây giờ nếu tôi điều khiển nhật ký tuổi đối tượng đã hợp nhất ở đây, điều này sẽ

05:20.150 --> 05:22.980
hoạt động mà không có lỗi như bạn có thể nói.

05:22.980 --> 05:26.770
Ở đây tôi đang in 30 vì các loại chung chung.

05:26.770 --> 05:29.040
Chúng tôi đang cung cấp cho bản thảo thông tin bổ

05:29.040 --> 05:31.950
sung mà chúng tôi không biết chính xác các loại sẽ chắc chắn,

05:31.950 --> 05:34.780
sẽ có những đối tượng ở đây chúng tôi có thể nói điều đó.

05:34.780 --> 05:36.550
Nhưng chúng tôi không biết liệu nó có phải là một đối

05:36.550 --> 05:38.640
tượng có khóa tên, khóa tuổi, khóa sở thích hay không.

05:38.640 --> 05:41.130
Chúng tôi không biết và chúng tôi không quan tâm, chúng tôi

05:41.130 --> 05:43.360
không quan tâm đến đối tượng chính xác ở đây, chúng

05:43.360 --> 05:46.050
tôi không muốn xác định rằng cái này phải thuộc loại này.

05:46.050 --> 05:47.490
Bởi vì sau đó đột nhiên nếu

05:47.490 --> 05:50.520
tôi thêm sở thích vào đó, chúng tôi sẽ gặp vấn đề.

05:50.520 --> 05:52.540
Vì vậy, tôi không muốn bị hạn chế như vậy.

05:52.540 --> 05:54.480
Tôi chỉ muốn nói rằng đây là loại nào

05:54.480 --> 05:56.940
mà tôi không quan tâm nhưng rất có thể nó là một

05:56.940 --> 05:58.590
loại khác với loại này ở đây.

05:58.590 --> 06:00.860
Và nếu nó giống nhau thì cũng tốt thôi.

06:00.860 --> 06:03.030
Nhưng bản thảo hiểu rằng chúng tôi

06:03.030 --> 06:06.530
có các loại cụ thể ở đây cho hai tham số này và chúng tôi

06:06.530 --> 06:08.800
trả về giao điểm của chúng.

06:08.800 --> 06:12.660
Thay vì chỉ có bất kỳ đối tượng không xác định nào ở đây.

06:12.660 --> 06:14.770
Đặc biệt, điều kỳ diệu ở đây không chỉ là chúng

06:14.770 --> 06:16.210
tôi nói với bản đánh máy mà chúng

06:16.210 --> 06:18.410
tôi có hai loại khác nhau ở đây.

06:18.410 --> 06:20.740
Nhưng những loại này không được đặt cố định

06:20.740 --> 06:22.870
khi chúng ta xác định chức năng này, nhưng

06:22.870 --> 06:25.810
chúng được đặt động khi chúng ta gọi hàm.

06:25.810 --> 06:27.430
Vì vậy, ở đây chúng tôi đang

06:27.430 --> 06:30.560
gọi hàm và bản in sẽ suy ra các loại cho hai đối số.

06:30.560 --> 06:33.890
Đối với T, về cơ bản, nó điền vào một loại đối tượng với một

06:33.890 --> 06:36.677
đối tượng có thuộc tính name chứa một chuỗi và

06:36.677 --> 06:39.600
thuộc tính sở thích chứa một chuỗi các chuỗi.

06:39.600 --> 06:43.290
Và đối với U, nó điền vào một loại đối tượng

06:43.290 --> 06:47.990
loại có thuộc tính tuổi trong đó tuổi là số loại.

06:47.990 --> 06:51.030
Bây giờ khi chúng ta gọi hàm này một lần nữa trong

06:51.030 --> 06:53.890
một dòng khác và chúng ta chuyển vào các đối tượng

06:53.890 --> 06:57.090
khác nhau và tôi lưu trữ hàm này trong một hằng số mới

06:57.090 --> 06:59.920
với tên mới, thì tất nhiên, các loại khác nhau

06:59.920 --> 07:03.130
được điền cho T và U cho lệnh gọi hàm này.

07:03.130 --> 07:05.350
Bạn cũng có thể chỉ định cụ thể cho

07:05.350 --> 07:07.780
bản mô tả loại nó sẽ điền vào bằng cách

07:07.780 --> 07:09.110
thêm dấu ngoặc nhọn

07:09.110 --> 07:11.320
sau tên hàm khi bạn gọi nó và sau

07:11.320 --> 07:13.010
đó bạn sẽ điền các loại của

07:13.010 --> 07:15.200
riêng mình cho T và U.

07:15.200 --> 07:18.030
Chúng ta có thể nói với TypeScript rằng T phải là kiểu

07:18.030 --> 07:20.180
chuỗi cho lệnh gọi hàm này và U phải là Type

07:20.180 --> 07:22.710
Number nhưng sau đó tất nhiên TypeScript sẽ phàn

07:22.710 --> 07:23.950
nàn về các giá trị cụ thể

07:23.950 --> 07:25.940
mà chúng ta đang chuyển vào đây.

07:25.940 --> 07:28.270
Bởi vì đây rõ ràng không phải là một chuỗi

07:28.270 --> 07:30.190
và nếu chúng ta sửa lỗi này, thì rõ

07:30.190 --> 07:32.280
ràng đây sẽ không phải là kiểu số.

07:32.280 --> 07:34.650
Vì vậy, ở đây chúng ta có thể rất cụ

07:34.650 --> 07:38.620
thể và nói rõ, đối số đầu tiên hoặc loại T chính xác cho lệnh

07:38.620 --> 07:41.700
gọi hàm này ở đây sẽ là một loại đối tượng trong

07:41.700 --> 07:45.310
đó chúng ta có thuộc tính name thuộc loại chuỗi và thuộc

07:45.310 --> 07:48.850
tính sở thích thuộc loại mảng chuỗi.

07:48.850 --> 07:52.970
Và loại cụ thể cho U, đối với lệnh gọi hàm này sẽ là một

07:52.970 --> 07:55.800
đối tượng mà chúng ta có thuộc tính age

07:55.800 --> 07:57.320
thuộc loại số.

07:57.320 --> 08:00.220
Và bây giờ chúng tôi sẽ ổn và không còn lỗi

08:00.220 --> 08:02.730
nào nữa và điều này sẽ hoạt động.

08:02.730 --> 08:05.060
Nhưng điều này là dư thừa, bạn hoàn toàn có

08:05.060 --> 08:07.310
thể làm điều đó và điều quan trọng là phải

08:07.310 --> 08:10.070
hiểu rằng cuối cùng đây là tất cả những gì chung chung

08:10.070 --> 08:12.990
mà bạn có thể điền vào các loại cụ thể khác nhau cho các

08:12.990 --> 08:15.170
lệnh gọi hàm khác nhau.

08:15.170 --> 08:16.930
Nhưng chúng ta không cần phải làm điều

08:16.930 --> 08:20.110
đó ở đây vì TypeScript chỉ đơn giản là suy ra các loại giá trị mà chúng

08:20.110 --> 08:22.170
ta đang chuyển dưới dạng đối số ở đây.

08:22.170 --> 08:25.120
Và sau đó đặt vào các loại được suy

08:25.120 --> 08:28.240
ra cho T và U cho lệnh gọi hàm này.

08:28.240 --> 08:31.283
Cuối cùng, đó là cách thuốc generic hoạt động ở hậu trường.
