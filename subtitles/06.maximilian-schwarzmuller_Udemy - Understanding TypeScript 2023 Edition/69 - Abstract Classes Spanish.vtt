WEBVTT

00:02.060 --> 00:04.710
Así que con las propiedades estáticas fuera del

00:04.710 --> 00:07.000
camino, volvamos a la herencia y a un concepto

00:07.000 --> 00:08.743
relacionado con ella.

00:08.743 --> 00:11.740
Otra forma de añadir métodos a las clases

00:11.740 --> 00:14.280
de las que se piensa heredar.

00:14.280 --> 00:16.660
Aquí está nuestra clase Departamento y como sabes,

00:16.660 --> 00:19.200
estamos heredando de ella en el Departamento de TI

00:19.200 --> 00:21.360
y el Departamento de Contabilidad.

00:21.360 --> 00:23.470
Ahora, tenemos ese método describir aquí

00:23.470 --> 00:26.160
en nuestra clase Departamento, y por lo tanto podemos

00:26.160 --> 00:28.850
llamar a esto en cualquier instancia, basado en el

00:28.850 --> 00:31.850
Departamento de TI y el Departamento de Contabilidad,

00:31.850 --> 00:34.560
porque estas clases se basan en el Departamento, y

00:34.560 --> 00:36.560
tienen acceso a todas las propiedades

00:36.560 --> 00:39.523
y métodos de esa clase base Departamento.

00:40.380 --> 00:43.850
Ahora, como has aprendido, puedes anular métodos.

00:43.850 --> 00:46.550
Así que, por ejemplo, aquí en el Departamento

00:46.550 --> 00:50.030
de Contabilidad, podríamos añadir nuestra propia versión

00:50.030 --> 00:51.900
del método de descripción, donde

00:51.900 --> 00:56.880
quiero hacer algo diferente, donde tal vez cuando digo ID del Departamento de

00:56.880 --> 01:00.443
Contabilidad, y luego Access Distort ID.

01:02.040 --> 01:03.140
Ahora, esto no funcionaría

01:03.140 --> 01:06.960
aquí, porque el ID es una propiedad privada del Departamento y por

01:06.960 --> 01:10.400
lo tanto, necesitamos convertirlo en uno protegido para que

01:10.400 --> 01:12.590
esté disponible en las clases basadas

01:12.590 --> 01:14.750
en esta clase también.

01:14.750 --> 01:16.210
Pero con eso, debería funcionar.

01:16.210 --> 01:19.080
Y si ahora llamo a describir en la contabilidad, lo

01:19.080 --> 01:20.540
que podemos hacer, por supuesto,

01:20.540 --> 01:23.650
tal vez comentar estas dos líneas, y en su lugar, llamar

01:23.650 --> 01:27.460
a la contabilidad. describir allí abajo, deberíamos

01:27.460 --> 01:29.300
ver esa nueva salida, y efectivamente,

01:29.300 --> 01:33.340
vemos el ID del Departamento de Contabilidad, d2.

01:33.340 --> 01:36.570
Ahora, por supuesto, también podríamos anular el método de descripción

01:36.570 --> 01:38.900
en el Departamento de Informática.

01:38.900 --> 01:43.240
Pero a veces no sólo quieres ofrecer la opción de anular

01:43.240 --> 01:46.440
un método porque siempre existe.

01:46.440 --> 01:50.430
En cambio, quieres obligar a los desarrolladores que trabajan con una determinada

01:50.430 --> 01:53.390
clase o que extienden una determinada clase a implementar

01:53.390 --> 01:54.820
un determinado método o a anular

01:54.820 --> 01:56.840
un determinado método.

01:56.840 --> 01:58.360
¿Cuándo lo harías?

01:58.360 --> 02:01.690
Bueno, siempre que quieras asegurar que un determinado método

02:01.690 --> 02:05.670
esté disponible en todas las clases basadas en alguna clase base en este

02:05.670 --> 02:07.320
caso Departamento.

02:07.320 --> 02:10.550
Pero cuando también se sabe al mismo tiempo que la implementación

02:10.550 --> 02:14.220
exacta dependerá de la versión específica, por lo que cuando se puede

02:14.220 --> 02:17.340
proporcionar un método general, pero se quiere hacer cumplir

02:17.340 --> 02:20.240
que este método existe, pero las clases que heredan tendrán

02:20.240 --> 02:22.410
que proporcionar su propia implementación

02:22.410 --> 02:24.270
porque no se puede proporcionar una

02:24.270 --> 02:28.520
implementación por defecto en la clase base.

02:28.520 --> 02:30.150
Así que en tal situación,

02:30.150 --> 02:34.600
es posible que quieras tener un método vacío en tu clase base y ahora

02:34.600 --> 02:38.460
forzar a todas las clases basadas en esa clase a añadir

02:38.460 --> 02:40.810
y anular este método y puedes hacerlo

02:40.810 --> 02:44.880
añadiendo la palabra clave abstracta aquí.

02:44.880 --> 02:46.630
Si añades abstract aquí, verás

02:46.630 --> 02:49.840
que nos da un error de que esto sólo está disponible en

02:49.840 --> 02:51.440
una clase abstracta.

02:51.440 --> 02:54.220
Así que si tienes un método o más con abstract delante

02:54.220 --> 02:57.390
del método, tienes que añadir abstract aquí delante

02:57.390 --> 03:00.400
de class también y ahora, estamos bien con respecto

03:00.400 --> 03:01.690
a eso, pero ahora ves que

03:01.690 --> 03:03.740
tengo un error aquí.

03:03.740 --> 03:05.650
Describe no puede tener una implementación

03:05.650 --> 03:07.850
porque está marcado como abstracto.

03:07.850 --> 03:10.340
Tienes que quitar las llaves, añadir

03:10.340 --> 03:14.030
un punto y coma, y en su lugar añadir el tipo de retorno

03:14.030 --> 03:16.820
que debe tener, en este caso blanco.

03:16.820 --> 03:18.400
Así que ahora, sólo estás

03:18.400 --> 03:21.970
definiendo cómo debe ser este método y cuál es su estructura,

03:21.970 --> 03:25.230
pero no estás diciendo nada más que esto.

03:25.230 --> 03:27.990
Ahora, sin embargo, obtenemos un error en el Departamento

03:27.990 --> 03:31.120
de TI porque no implementa el miembro abstracto heredado

03:31.120 --> 03:33.640
describe, lo que significa que no ofrecemos

03:33.640 --> 03:36.330
el método describe aquí.

03:36.330 --> 03:38.410
Y tenemos que hacerlo porque nos basamos

03:38.410 --> 03:41.000
en la clase Departamento, que es abstracta, y que

03:41.000 --> 03:42.860
tiene ese método abstracto.

03:42.860 --> 03:45.220
Lo que significa que este método tiene que ser implementado

03:45.220 --> 03:48.623
por cualquier clase basada en esta clase de Departamento.

03:49.620 --> 03:51.420
Así que ahora, en el Departamento de TI,

03:51.420 --> 03:53.820
tenemos que añadir un método de descripción.

03:53.820 --> 03:58.820
Y allí, ahora podemos registrar en la consola el Departamento de TI, y

03:59.040 --> 04:01.120
luego hacer lo que queramos.

04:01.120 --> 04:03.070
Puede ser la misma implementación que

04:03.070 --> 04:04.900
tenemos en el Departamento de Contabilidad,

04:04.900 --> 04:07.440
pero también puede ser una diferente.

04:07.440 --> 04:10.040
Así que ahora con eso, podemos guardar esto y se vuelve

04:10.040 --> 04:12.850
a compilar, y obtenemos casi la misma salida que antes.

04:12.850 --> 04:15.240
Pero ahora tenemos dos implementaciones diferentes

04:15.240 --> 04:18.090
del método describir en nuestras diferentes clases basadas

04:18.090 --> 04:20.020
en el Departamento.

04:20.020 --> 04:23.600
Por lo tanto, la abstracción puede ser muy útil si quieres

04:23.600 --> 04:27.120
imponer que todas las clases basadas en alguna otra clase,

04:27.120 --> 04:30.260
compartan algún método o propiedad común, también

04:30.260 --> 04:33.150
puedes tener propiedades abstractas.

04:33.150 --> 04:34.260
Pero al mismo tiempo,

04:34.260 --> 04:36.510
quieres asegurarte de que no tienes que proporcionar

04:36.510 --> 04:39.170
el valor concreto, la implementación concreta en

04:39.170 --> 04:41.000
la clase base, sino que la clase heredera

04:41.000 --> 04:43.440
tiene que hacerlo.

04:43.440 --> 04:45.970
También son importantes las clases abstractas.

04:45.970 --> 04:49.200
Así que las clases marcadas como abstractas con esta palabra clave

04:49.200 --> 04:51.420
pueden ser instanciadas por sí mismas.

04:51.420 --> 04:54.240
Así que ahora no puedes instanciar el Departamento.

04:54.240 --> 04:57.440
Básicamente, es una clase que debe ser heredada para

04:57.440 --> 05:01.800
que las clases que heredan puedan ser instanciadas, y las clases que heredan

05:01.800 --> 05:05.230
están obligadas a proporcionar implementaciones concretas

05:05.230 --> 05:09.040
para, en este caso, describir el método siguiendo la estructura

05:09.040 --> 05:11.770
que has expuesto aquí.

05:11.770 --> 05:15.750
Así que con esta palabra clave que se refiere a una instancia o instancia de

05:15.750 --> 05:19.930
Departamento, de alguna manera basada en el Departamento incluyendo las clases

05:19.930 --> 05:21.530
heredadas que podrían estar en

05:21.530 --> 05:23.610
el medio y que no devuelve nada
