WEBVTT

00:02.140 --> 00:04.200
-: Şimdi dersler için bu kadar.

00:04.200 --> 00:06.180
Sınıfların kendileri hakkında bilgi edindik.

00:06.180 --> 00:08.260
Özellikleri, eksen değiştiricileri,

00:08.260 --> 00:09.850
dahili eksenler için private,

00:09.850 --> 00:12.110
miras alınan sınıflarda da dahili

00:12.110 --> 00:15.990
eksenler için protected ve her yerden eksenler için public

00:15.990 --> 00:19.560
hakkında bilgi edindik.

00:19.560 --> 00:21.610
Ayrıca ekleyebileceğimiz yöntemler hakkında da bilgi edindik.

00:21.610 --> 00:23.520
Statik yöntemler ve özellikler hakkında.

00:23.520 --> 00:25.520
Soyut yöntemler ve soyut sınıflar

00:25.520 --> 00:28.280
hakkında, bir başka önemli kavram olan

00:28.280 --> 00:31.350
kalıtımdan bahsederken kullanabileceğimiz

00:31.350 --> 00:33.490
önemli bir kavram.

00:33.490 --> 00:36.360
Burada, 'extends' anahtar sözcüğü ile 'Department'dan

00:36.360 --> 00:37.660
miras alıyoruz.

00:37.660 --> 00:40.440
Bu, 'Department' sınıfındaki işlevleri, özellikleri

00:40.440 --> 00:41.830
ve yöntemleri bu devralan

00:41.830 --> 00:45.100
sınıfla paylaşmamıza ve kendi işlevlerimizi eklememize

00:45.100 --> 00:47.162
veya mevcut işlevleri geçersiz kılmamıza

00:47.162 --> 00:50.300
olanak tanır.

00:50.300 --> 00:52.560
Ya soyut bir yöntem olan 'describe' örneğinde

00:52.560 --> 00:55.620
olduğu gibi geçersiz kılmak zorunda olduğumuz için.

00:55.620 --> 00:58.710
Ya da Muhasebe Departmanındaki 'addEmployee' örneğinde

00:58.710 --> 01:01.640
olduğu gibi geçersiz kılmak istediğimiz için.

01:01.640 --> 01:04.290
Bu, temel sınıfta soyut bir yöntem değildir,

01:04.290 --> 01:07.540
ancak elbette istersek bunu geçersiz kılabiliriz.

01:07.540 --> 01:10.370
Ayrıca singleton kalıbı ve bazen yararlı olabilen

01:10.370 --> 01:14.180
'private constructors' hakkında da bilgi edindik.

01:14.180 --> 01:17.290
Ve genel olarak, artık sınıflar ve TypeScript'te onlarla neler yapabileceğiniz

01:17.290 --> 01:20.290
hakkında iyi bir fikriniz olduğunu umuyoruz.

01:20.290 --> 01:22.760
Genel olarak, elbette, sınıfların ve nesnelerin

01:22.760 --> 01:26.030
ne olduğunu ve ayrıca Vanilla JavaScript'te prototiplerin

01:26.030 --> 01:29.690
ne olduğunu biraz bilmeniz gerekir, çünkü bu genellikle TypeScript

01:29.690 --> 01:31.870
tarafından sunulan bir şey değildir, ancak

01:31.870 --> 01:34.600
elbette TypeScript ile ilgili bir şeydir, çünkü TypeScript

01:34.600 --> 01:37.800
bu varsayılan JavaScript özelliklerini geliştirir ve bu

01:37.800 --> 01:41.663
özelliklerin üzerine kendi sihrini ekler.
