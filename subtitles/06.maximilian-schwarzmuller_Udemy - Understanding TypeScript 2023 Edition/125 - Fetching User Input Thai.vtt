WEBVTT

00:02.150 --> 00:06.180
ผู้สอน: ดังนั้นเราจึงสามารถรวบรวมค่าป้อนชื่อของเราและพิมพ์ไปยังคอนโซล

00:06.180 --> 00:10.160
แต่แน่นอนว่านั่นไม่ใช่แนวคิดในท้ายที่สุด

00:10.160 --> 00:15.420
แนวคิดคือเรารวบรวมค่าอินพุตทั้งหมดของเรา ตรวจสอบความถูกต้องอย่างรวดเร็ว

00:15.420 --> 00:17.890
แล้วทำบางสิ่งกับพวกเขา

00:17.890 --> 00:21.860
สำหรับสิ่งนั้น ฉันจะเพิ่มเมธอดใหม่อีกเมธอดส่วนตัวอีกเมธอด

00:21.860 --> 00:28.530
เพราะฉันจะเรียกมันจากในคลาสเท่านั้น และนั่นคือเมธอด

00:28.530 --> 00:30.460
ชื่อขึ้นอยู่กับคุณโดยสิ้นเชิง

00:30.460 --> 00:33.240
ความคิดของฉันคือวิธีนี้ถูกเรียกที่นี่

00:33.240 --> 00:35.230
หลังจากที่เราป้องกันค่าเริ่มต้นแล้ว

00:35.230 --> 00:40.870
โดยทั่วไปแล้วสิ่งนี้ควรเข้าถึงอินพุตทั้งหมดของเราที่นี่ รวบรวมอินพุตของผู้ใช้ที่นั่น ตรวจสอบความถูกต้อง

00:40.870 --> 00:43.060
แล้วส่งคืน

00:43.060 --> 00:45.950
ตรงนี้ ฉันได้รับ userInput ของฉัน

00:45.950 --> 00:50.090
ซึ่งอาจเป็นตัวทูเพิลที่มีชื่อ คำอธิบาย

00:50.090 --> 00:53.810
และผู้คน เป็นค่าทูเพิลฟรี

00:53.810 --> 00:55.510
ที่จริงฉันชอบความคิดนั้น

00:55.510 --> 00:57.800
ดังนั้นเรามากำหนดประเภทการคืนสินค้ากันที่นี่

00:57.800 --> 00:59.880
ประเภทผลตอบแทนคือทูเพิล

00:59.880 --> 01:02.620
ตอนนี้คุณจำวิธีการกำหนดทูเพิลได้หรือไม่?

01:02.620 --> 01:05.630
ประเภทของทูเพิลถูกกำหนดอย่างไร?

01:05.630 --> 01:08.620
ไม่ใช่สตริง วงเล็บเหลี่ยม

01:08.620 --> 01:12.260
นั่นหมายความว่าคุณกำลังส่งคืนอาร์เรย์ของสตริง

01:12.260 --> 01:18.160
ฉันต้องการจะบอกว่าฉันส่งคืนอาร์เรย์ขององค์ประกอบ

01:18.160 --> 01:21.510
X ของทั้งสามประเภทนี้

01:21.510 --> 01:23.650
และสำหรับสิ่งนั้น คุณตั้งค่าประเภทผลตอบแทนที่นี่

01:23.650 --> 01:27.160
วงเล็บเหลี่ยมสองอัน จากนั้นภายในวงเล็บเหลี่ยม คุณเพิ่มองค์ประกอบต่างๆ

01:27.160 --> 01:30.240
และประเภทองค์ประกอบ

01:30.240 --> 01:32.900
ตัวอย่างเช่น สตริง สตริง และตัวเลข

01:32.900 --> 01:37.130
คุณกำลังบอกว่าเมธอดนี้ส่งคืน tuple ซึ่งมีสามองค์ประกอบ

01:37.130 --> 01:38.510
โดยที่องค์ประกอบแรกเป็นสตริง

01:38.510 --> 01:40.300
องค์ประกอบที่สองเป็นสตริง

01:40.300 --> 01:44.080
และองค์ประกอบที่สามเป็นตัวเลข

01:44.080 --> 01:48.540
และตอนนี้เราสามารถเพิ่มตรรกะบางอย่างให้กับวิธีนี้เพื่อทำให้เป็นจริงได้

01:48.540 --> 01:57.210
ดังนั้นก่อนอื่น เรามาตั้งชื่อเรื่องที่ป้อนจากชื่อนี้InputElement

01:57.210 --> 01:57.210
ค่า.

01:57.210 --> 01:58.340
และเราสามารถทำซ้ำได้

01:58.340 --> 02:01.920
นอกจากนี้ เรายังต้องการคำอธิบายหลักสูตรที่ป้อนจาก DescriptionInputElement

02:01.920 --> 02:05.100
นี้ด้วย ค่า และจำนวน People

02:05.100 --> 02:09.510
ที่ป้อน หรือเพิ่งป้อน People จาก peopleInputElement

02:09.510 --> 02:12.440
นี้

02:12.440 --> 02:17.640
ตอนนี้ฉันเก็บไว้ในค่าคงที่เพื่อที่ฉันจะได้ไม่ต้องทำซ้ำนิพจน์ที่ยาวกว่านี้

02:17.640 --> 02:19.370
ตอนนี้เราสามารถตรวจสอบสิ่งนี้ได้

02:19.370 --> 02:21.500
การตรวจสอบเล็กน้อยจะเป็นการตรวจสอบว่า

02:21.500 --> 02:24.850
enterTitle หรือไม่ ตัดแต่ง เพื่อลบพื้นที่กว้างของ

02:24.850 --> 02:27.610
X ที่จุดเริ่มต้นและจุดสิ้นสุด

02:27.610 --> 02:35.350
ความยาวเท่ากับศูนย์ หรือหากป้อนคำอธิบาย

02:35.350 --> 02:35.350
ความยาวการตัดแต่งเท่ากับศูนย์หรือหากป้อนคน

02:41.520 --> 02:41.520
ความยาวการตัดแต่งเท่ากับศูนย์

02:44.380 --> 02:48.410
ซึ่งจะตรวจสอบว่าไม่มีอินพุตใดว่างเปล่า

02:48.410 --> 02:51.860
ตอนนี้มันไม่ได้ตรวจสอบทุกสิ่งที่เราอาจต้องการตรวจสอบ

02:51.860 --> 02:57.160
เราไม่ได้ตรวจสอบว่าคนที่ป้อนเป็นจำนวนบวกหรือไม่

02:57.160 --> 03:00.170
เราไม่สามารถกำหนดความยาวขั้นต่ำได้

03:00.170 --> 03:02.190
เราจะต้องเพิ่มเงื่อนไขมากขึ้นที่นี่

03:02.190 --> 03:06.820
และในขณะที่เราสามารถทำได้ นี่ไม่ใช่วิธีแก้ปัญหาที่ปรับขนาดได้จริงๆ

03:06.820 --> 03:11.550
หากเรามีส่วนของเราในแอปพลิเคชันที่เราต้องการตรวจสอบอินพุตของผู้ใช้ด้วย

03:11.550 --> 03:14.440
เราจะต้องทำซ้ำคำสั่ง long if เสมอ

03:14.440 --> 03:18.390
ดังนั้นฉันจะคิดหาโซลูชันการตรวจสอบที่ชาญฉลาดขึ้นหรือโซลูชันการตรวจสอบที่ปรับขนาดได้มากขึ้นในเร็วๆ

03:18.390 --> 03:21.960
นี้

03:21.960 --> 03:23.780
ตอนนี้ปล่อยไว้แบบนี้ก็ได้

03:23.780 --> 03:26.190
คุณสามารถคิดเกี่ยวกับเรื่องนี้ได้แล้ว

03:26.190 --> 03:28.520
และแน่นอนว่าหลังจากการบรรยายนี้แล้ว

03:28.520 --> 03:34.670
ให้หยุดและคิดว่าคุณจะจัดจ้างคนภายนอกให้เป็นฟังก์ชันการตรวจสอบแยกต่างหากซึ่งสามารถกำหนดค่าได้อย่างไร

03:34.670 --> 03:38.350
และประเภทต่างๆ จะช่วยคุณได้อย่างไร

03:38.350 --> 03:44.040
มีแนวทางที่เป็นไปได้มากมาย และฉันจะแบ่งปันแนวทางของฉันกับคุณในการบรรยายครั้งต่อไป

03:44.040 --> 03:45.620
แต่ก่อนที่เราจะไปถึงจุดนั้น

03:45.620 --> 03:52.130
เรามาใช้วิธีเล็กๆ น้อยๆ ตรงนี้และทำบางสิ่งหากตรงตามเงื่อนไขทั้งหมดเหล่านี้

03:52.130 --> 03:56.000
ตอนนี้ถ้าเราทำ if block นี้ เราจะรู้ว่าการตรวจสอบความถูกต้องอย่างน้อยหนึ่งครั้งล้มเหลว

03:56.000 --> 03:57.350
จากนั้นเราสามารถทำได้ในการแจ้งเตือน

03:57.350 --> 04:01.833
โดยที่เราบอกว่า Invalid input, please try again.

04:03.450 --> 04:04.910
มิฉะนั้น ถ้าเราไม่เข้าไปที่นั่น

04:04.910 --> 04:06.200
เรารู้ว่าเรามีอินพุตที่ถูกต้อง

04:06.200 --> 04:11.310
มิฉะนั้น ฉันต้องการคืนค่าทูเพิลของฉัน

04:11.310 --> 04:14.170
ในที่นี้ ฉันต้องการส่งคืนชื่อที่ป้อน

04:14.170 --> 04:19.660
คำอธิบายที่ป้อน และผู้คนที่ป้อนด้วย

04:19.660 --> 04:25.370
ตอนนี้คุณสามารถบอกได้ว่ากลุ่มประเภทไม่พอใจเพราะคนที่ป้อนควรเป็นตัวเลขไม่ใช่ข้อความ

04:25.370 --> 04:32.350
และที่จริงแล้ว ทุกสิ่งที่คุณดึงออกมาจากคุณสมบัติค่าขององค์ประกอบอินพุตจะเป็นข้อความตามค่าเริ่มต้น

04:32.350 --> 04:34.520
เพื่อเปลี่ยนให้เป็นตัวเลข

04:34.520 --> 04:40.610
เราสามารถเรียก parseFloat หรือเพียงแค่ใส่เครื่องหมายบวกข้างหน้า มันจะแปลงเป็นตัวเลข

04:40.610 --> 04:42.850
และยังคงพิมพ์ว่า group is not

04:42.850 --> 04:45.430
happy เพราะ อืม เราไม่ได้ return

04:45.430 --> 04:48.910
เสมอไป ทูเพิล

04:48.910 --> 04:50.830
แล้วส่วนนี้ล่ะ?

04:50.830 --> 04:52.310
ถ้าเราทำให้มันอยู่ในบล็อก

04:52.310 --> 04:53.510
if แสดงว่าเรากำลังแสดงการแจ้งเตือน

04:53.510 --> 04:55.820
แต่เราจะไม่ส่งคืนทูเพิล

04:55.820 --> 04:59.810
มีหลายสิ่งที่เราสามารถทำได้แทน

04:59.810 --> 05:03.460
เราไม่สามารถคืนอะไรได้เช่นนี้

05:03.460 --> 05:06.320
อีกทางหนึ่ง เราอาจส่งข้อผิดพลาด

05:06.320 --> 05:08.360
จากนั้นเราจะไม่ส่งคืนสิ่งใด

05:08.360 --> 05:11.100
แต่เราจะโยนข้อผิดพลาดในกรณีนั้น

05:11.100 --> 05:12.820
ตอนนี้ ฉันไม่ต้องการโยนข้อผิดพลาดที่นี่

05:12.820 --> 05:15.570
เพราะฉันไม่ต้องการใช้การจัดการข้อผิดพลาด ดังนั้นสิ่งที่ฉันจะทำคือ

05:15.570 --> 05:20.100
ฉันจะเพิ่มคำสั่ง return แต่แน่นอนว่านี่ไม่ใช่ทูเพิล

05:20.100 --> 05:23.110
ที่จริง return type ตรงนี้คือ

05:23.110 --> 05:25.923
tuple หรือไม่ได้กำหนด

05:27.320 --> 05:29.040
อย่างไรก็ตาม ดังที่คุณได้เรียนรู้แล้ว

05:29.040 --> 05:32.550
คุณไม่ควรใช้ undefined ที่นี่เป็นประเภทการคืนค่าในฟังก์ชัน

05:32.550 --> 05:34.040
ใช้โมฆะแทน

05:34.040 --> 05:35.410
มันเกือบจะเหมือนกัน

05:35.410 --> 05:37.040
แต่เฉพาะสำหรับฟังก์ชัน

05:37.040 --> 05:44.350
และสิ่งนี้บอก TypeScript ว่านี่คือฟังก์ชันที่มีอย่างน้อยหนึ่งสาขาซึ่งไม่ส่งคืนค่าใด

05:45.230 --> 05:46.930
ๆ เช่นนี้

05:46.930 --> 05:51.240
แน่นอนว่าเรายังใช้ประเภทสหภาพเพราะเรามีความเป็นไปได้ทั้งสองอย่าง

05:51.240 --> 05:53.170
เราอาจไม่คืนสิ่งใดเลย

05:53.170 --> 05:55.660
หรือเราคืนทูเพิลจริงๆ

05:55.660 --> 05:57.510
ตอนนี้เรามีการรวบรวม UserInput

05:57.510 --> 06:04.130
และ userInput ที่นั่นสำหรับทั้งหมดนั้นไม่ได้กำหนดในตอนท้ายหรือเป็นทูเพิลนั้น

06:04.130 --> 06:09.620
ดังนั้น ก่อนที่เราจะดำเนินการต่อและปรับปรุงการตรวจสอบ เรามาสร้างข้อมูลอินพุตของผู้ใช้นั้นกันก่อน

06:09.620 --> 06:12.480
เมื่อเรารวบรวม userInput ลงไป ตอนนี้เรามี userinput

06:12.480 --> 06:14.820
นั้นแล้ว และตอนนี้เราสามารถตรวจสอบได้ว่ามันเป็น

06:14.820 --> 06:17.050
tuple หรือไม่

06:17.050 --> 06:22.620
ตอนนี้ปัญหาอยู่ที่รันไทม์ เราไม่มีวิธีตรวจสอบว่าเป็นทูเพิลหรือไม่

06:22.620 --> 06:25.200
ไม่มีตัวอย่างใดที่เราสามารถใช้ได้

06:25.200 --> 06:28.560
ไม่มีประเภททูเพิลที่เราตรวจสอบได้

06:28.560 --> 06:31.020
เราไม่สามารถตรวจสอบว่า typof userInput

06:33.803 --> 06:36.053
เท่ากับ tuple หรือไม่ เนื่องจากไม่มีอยู่ใน

06:37.130 --> 06:40.050
Vanilla JavaScript

06:40.050 --> 06:41.850
ตัวอย่างเช่น มีสตริงอยู่

06:41.850 --> 06:44.950
แต่ทูเพิลไม่ใช่ประเภท JavaScript

06:44.950 --> 06:47.020
ดังนั้นเพื่อตรวจสอบว่าเป็นทูเพิลหรือไม่

06:47.020 --> 06:50.990
เราต้องจำไว้ว่าสุดท้ายทูเพิลจะถูกลบทิ้งไป

06:50.990 --> 06:52.750
พวกมันมีความพิเศษใน TypeScript

06:52.750 --> 06:54.860
แต่เมื่อเราอยู่ในดินแดน JavaScript

06:54.860 --> 07:02.000
พวกมันจะถูกลบเพราะแนวคิดของทูเพิลที่จำนวนขององค์ประกอบและประเภทขององค์ประกอบได้รับการแก้ไขนั้นมีอยู่จริงใน

07:02.000 --> 07:04.470
TypeScript เท่านั้น

07:04.470 --> 07:05.930
ดังนั้น ในระหว่างรันไทม์

07:05.930 --> 07:09.370
สิ่งที่เราต้องตรวจสอบก็คือว่ามันเป็นอาร์เรย์หรือไม่

07:09.370 --> 07:12.950
และสำหรับสิ่งนั้น เราสามารถใช้วัตถุอาร์เรย์ใน JavaScript

07:12.950 --> 07:15.180
และเมธอด isArray

07:15.180 --> 07:20.290
นั่นเป็นวิธีการที่สร้างขึ้นในวานิลลาจาวาสคริปต์ซึ่งช่วยให้เราสามารถตรวจสอบได้ว่านี่เป็นอาร์เรย์หรือไม่

07:20.290 --> 07:23.200
เรารู้ว่ามันไม่ได้กำหนดหรือทูเพิล

07:23.200 --> 07:26.000
ทูเพิลเป็นอาร์เรย์ ดังนั้นหากค่านี้คืนค่าจริง

07:26.000 --> 07:27.400
เราก็จะได้ทูเพิล

07:27.400 --> 07:31.010
จากนั้นที่นี่ เราสามารถใช้การจัดโครงสร้าง เช่น

07:31.010 --> 07:34.070
เพื่อรับชื่อ คำอธิบาย และผู้คนจากอินพุตของผู้ใช้

07:34.070 --> 07:37.720
จากนั้นทำบางสิ่งกับอินพุตนั้น

07:37.720 --> 07:42.623
ตัวอย่างเช่นตอนนี้คอนโซล

07:42.623 --> 07:42.623
ชื่อบันทึก คำอธิบาย และบุคคล

07:43.980 --> 07:46.060
ถ้าเราทำทั้งหมดนั้นและเราบันทึกทั้งหมด

07:46.060 --> 07:47.950
มันจะคอมไพล์โดยไม่มีข้อผิดพลาด และถ้าเราย้อนกลับไปที่นี่

07:47.950 --> 07:53.050
และฉันคลิกที่โปรเจ็กต์แบบนี้ ฉันได้รับอินพุตที่ไม่ถูกต้อง

07:53.050 --> 07:54.580
ถ้าใส่คำว่า Hello ก็ยังเข้าได้

07:54.580 --> 07:56.950
เพราะเราไม่มีคำอธิบาย

07:56.950 --> 07:58.890
นี่คือคำอธิบาย

07:58.890 --> 08:00.180
เรายังคงเข้าใจอยู่

08:00.180 --> 08:05.220
แต่ถ้าตอนนี้ฉันป้อนบางสิ่งในผู้คนด้วย มันได้ผลและเราพิมพ์สิ่งนี้ที่นี่

08:05.220 --> 08:09.330
แน่นอนว่าตอนนี้เป็นก้าวที่ดีในทิศทางที่ถูกต้อง

08:09.330 --> 08:10.990
เรายังไม่ได้ทั้งหมด

08:10.990 --> 08:13.330
ดังที่ฉันได้กล่าวไปแล้วว่าเราสามารถปรับปรุงการตรวจสอบความถูกต้องได้

08:13.330 --> 08:20.070
มีสิ่งหนึ่งที่ฉันต้องการทำทันทีก่อนที่จะทำ ฉันต้องการล้างข้อมูลที่ป้อนทั้งหมดหลังจากที่เราคลิกเพิ่มโครงการ

08:20.070 --> 08:22.440
ดังนั้นฉันต้องการล้างอินพุตทั้งหมดอีกครั้ง

08:22.440 --> 08:25.290
ตอนนี้เราสามารถเพิ่มวิธีการส่วนตัวใหม่ clearInput

08:25.290 --> 08:32.740
หรือ clearInputs และที่นั่น เราสามารถตั้งค่าชื่อนี้InputElement

08:32.740 --> 08:32.740
ค่าเท่ากับสตริงว่างและทำซ้ำสำหรับอินพุตอื่นๆ

08:36.200 --> 08:38.980
ด้วย

08:38.980 --> 08:41.960
ที่นี่ เรามี DescriptionInputElement และที่นี่

08:41.960 --> 08:44.250
เรามี peopleInputElement และตอนนี้

08:44.250 --> 08:51.730
ถ้าเราเรียกสิ่งนี้ clearInputs ที่นี่ เราควรตรวจสอบให้แน่ใจว่าฟอร์มถูกล้างเมื่อส่งแล้ว

08:51.730 --> 08:52.870
ดังนั้น หากเราลองอีกครั้ง

08:52.870 --> 08:57.740
ให้ป้อนบางอย่างที่นี่ คุณจะเห็นว่าพิมพ์ไว้ที่นี่ และแบบฟอร์มจะถูกล้าง

08:57.740 --> 09:00.720
ด้วยเหตุนี้ โดยทั่วไปแล้วฉันพอใจกับวิธีที่เราจัดการเรื่องนี้

09:00.720 --> 09:06.970
แต่ตอนนี้ฉันต้องการปรับปรุงการตรวจสอบความถูกต้องและเขียนสิ่งนี้ด้วยวิธีที่นำมาใช้ซ้ำและปรับขนาดได้

09:06.970 --> 09:07.840
อย่างที่ฉันได้กล่าวไปแล้ว

09:07.840 --> 09:10.320
อย่าลังเลที่จะทำสิ่งนี้ด้วยตัวคุณเองก่อน

09:10.320 --> 09:12.580
ในการบรรยายครั้งหน้าเราจะทำมันร่วมกัน
