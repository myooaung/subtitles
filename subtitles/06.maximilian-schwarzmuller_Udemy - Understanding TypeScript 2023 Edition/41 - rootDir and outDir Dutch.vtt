WEBVTT

00:02.220 --> 00:03.053
-Laten we verder gaan.

00:03.053 --> 00:04.950
We hebben de outFile optie hier,

00:04.950 --> 00:07.730
nu doet deze optie er voor ons nu niet toe,

00:07.730 --> 00:09.440
het werkt nu niet.

00:09.440 --> 00:12.340
Interessanter voor ons zijn outDIR en rootDir.

00:12.340 --> 00:14.720
Hoe groter uw project wordt, hoe

00:14.720 --> 00:17.640
meer u uw bestanden wilt organiseren.

00:17.640 --> 00:19.690
Normaal gesproken wil je niet dat

00:19.690 --> 00:21.770
je bestanden hier rondslingeren

00:21.770 --> 00:24.120
in je root level project folder.

00:24.120 --> 00:26.580
Wat je in plaats daarvan vaak ziet in projecten

00:26.580 --> 00:28.080
is dat je een bronmap hebt,

00:28.080 --> 00:31.240
en een dist map, volgende, volgende.

00:31.240 --> 00:35.690
Dus, de dist map heeft de taak om alle uitvoer te bewaren, dus alle JavaScript

00:35.690 --> 00:37.800
bestanden, laten we zeggen.

00:37.800 --> 00:41.380
En de bronmap kan al onze TypeScript-bestanden bevatten.

00:41.380 --> 00:44.643
Dus we kunnen de TypeScript bestanden verplaatsen naar

00:44.643 --> 00:47.430
de bronmap, en als ik nu de JavaScript map verwijder,

00:47.430 --> 00:49.891
hebben we het probleem dat als we alles compileren,

00:49.891 --> 00:53.167
deze TypeScript bestanden worden gecompileerd omdat

00:53.167 --> 00:55.768
TypeScript, de compiler wel in submappen kijkt,

00:55.768 --> 01:00.050
maar de uitvoer zit naast onze invoerbestanden.

01:00.050 --> 01:02.760
En dat kunnen we bijvoorbeeld regelen met

01:02.760 --> 01:03.660
de outDir.

01:03.660 --> 01:07.117
Als we outDir instellen, kunnen we de types met de compiler vertellen

01:07.117 --> 01:10.900
waar het aangemaakte bestand moet worden opgeslagen.

01:10.900 --> 01:13.580
We kunnen dit op afstand zetten.

01:13.580 --> 01:17.037
Als we dat doen, dan zul je zien dat de JavaScript-bestanden

01:17.037 --> 01:19.560
inderdaad niet in de bronmap staan,

01:19.560 --> 01:23.170
maar in de dist-map.

01:23.170 --> 01:26.340
Nu moeten we alleen nog onze index aanpassen. html bestand, en daar verwijzen

01:26.340 --> 01:31.630
naar dist/app. js en dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
of de index verplaatsen. html bestand in de dist

01:33.880 --> 01:36.172
map, maar dan zou onze def server nu niet

01:36.172 --> 01:37.550
meer goed werken.

01:37.550 --> 01:39.875
Dus laten we gewoon deze importen aanpassen

01:39.875 --> 01:44.140
en daarmee hebben we nog steeds een werkende applicatie, zoals

01:44.140 --> 01:45.270
je ziet, maar nu met

01:45.270 --> 01:48.480
een schonere projectstructuur.

01:48.480 --> 01:49.650
Het mooie is, dat als we

01:49.650 --> 01:51.530
hier een submap hebben, een analytics

01:51.530 --> 01:52.980
map, laten we zeggen, en we hebben

01:52.980 --> 01:54.893
daar ons TypeScript bestand in staan,

01:54.893 --> 01:57.350
als we dan opnieuw compileren, en het maakt niet

01:57.350 --> 01:59.540
uit of je dat doet met dit commando of met de

01:59.540 --> 02:00.373
watch mode, dan zal

02:00.373 --> 02:03.300
de mapstructuur die je hebt in de bronmap allemaal gerepliceerd

02:03.300 --> 02:05.640
worden in de dist map, wat natuurlijk erg handig

02:05.640 --> 02:08.813
is, want dat zorgt ervoor dat je de bestanden in principe kunt

02:08.813 --> 02:14.110
importeren zoals je ze ook in de bronmap zou importeren, zodat de structuur die je daar hebt opgezet behouden

02:14.110 --> 02:16.640
blijft.

02:16.640 --> 02:18.800
Nu kunt u ook de hoofdmap instellen

02:18.800 --> 02:21.230
en deze specifiek instellen op de map waarin

02:21.230 --> 02:23.800
uw bestanden zijn opgeslagen, zoals in dit

02:23.800 --> 02:25.202
voorbeeld bron, om ervoor

02:25.202 --> 02:30.030
te zorgen dat de types compiler niet in onze mappen kijken.

02:30.030 --> 02:31.530
Dat is ook iets wat je kunt doen

02:31.530 --> 02:34.003
met de include optie daar beneden, toch?

02:34.870 --> 02:36.007
Maar met de hoofdmap

02:36.007 --> 02:38.781
kijken de types compiler niet alleen naar

02:38.781 --> 02:41.450
die bronmap, ze zorgen er ook voor dat

02:41.450 --> 02:44.700
de projectstructuur, die je daar hebt opgezet,

02:44.700 --> 02:45.680
in een dist-map

02:45.680 --> 02:47.880
wordt bewaard.

02:47.880 --> 02:50.020
Nu deed het dat standaard eerder, zoals u zag, maar

02:50.020 --> 02:51.820
houd in gedachten dat het voorheen alle TypeScript

02:51.820 --> 02:54.280
bestanden hier zou hebben opgenomen, al het begin van de bron,

02:54.280 --> 02:55.699
dus, bijvoorbeeld, als u dit tijdelijk

02:55.699 --> 02:58.830
uitcommentarieert als we hier op het hoogste niveau een gebruikersmap

02:58.830 --> 03:03.280
hadden met een gebruiker.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
bestand waar we een gebruikersnaam hebben van Max laten we

03:06.170 --> 03:07.750
zeggen, dan zullen jullie, als

03:07.750 --> 03:09.752
we dit compileren, allemaal die gebruikersmap

03:09.752 --> 03:11.420
zien in de dist map.

03:11.420 --> 03:13.810
En nu is ook de bronmap opgenomen omdat we

03:13.810 --> 03:17.200
nu een typescript bestand hebben op een hoger niveau en daarom

03:17.200 --> 03:19.950
denkt de typescript compiler dat ons hele project

03:19.950 --> 03:21.780
weer de invoer is en hij repliceert

03:21.780 --> 03:25.970
de mapstructuur die hij daar vindt in de dist map.

03:25.970 --> 03:28.960
Nu is dat natuurlijk niet wat we willen en

03:28.960 --> 03:30.120
dat is waar de rootDir

03:30.976 --> 03:32.660
optie ons helpt.

03:32.660 --> 03:34.020
Als we dit nu op source zetten,

03:34.020 --> 03:35.950
zelfs als we daar andere mappen met TypeScript-bestanden

03:35.950 --> 03:38.630
in hadden op het rootniveau, zouden die niet worden meegenomen

03:38.630 --> 03:43.780
in de uitvoer en zou de bronmap zelf daar niet ineens terechtkomen.

03:43.780 --> 03:46.480
Vaak stelt u dus zowel rootDir als outDir in om echt duidelijk

03:46.480 --> 03:49.650
te zijn over waar uw invoerbestanden staan en waar uw uitvoerbestanden

03:49.650 --> 03:52.040
worden gegenereerd.

03:52.040 --> 03:54.870
Als we verder gaan, kunnen we compositie negeren.

03:54.870 --> 03:57.010
We kunnen kijken naar removeComments.

03:57.010 --> 03:58.780
Het zou vrij duidelijk moeten

03:58.780 --> 04:00.850
zijn als u dit instelt, dan wordt al

04:00.850 --> 04:04.450
het commentaar dat u in uw TypeScript-bestanden hebt, verwijderd

04:04.450 --> 04:08.000
in de gecompileerde JavaScript-bestanden.

04:08.000 --> 04:11.200
Dus als ik dit becommentarieer en mijn code compileer,

04:11.200 --> 04:12.970
zie je een app. ts, ik heb een opmerking.

04:12.970 --> 04:14.990
Een app. js, het is er niet.

04:14.990 --> 04:18.330
Je kunt dat dus doen om je bestanden

04:18.330 --> 04:20.950
kleiner te maken.

04:20.950 --> 04:23.820
U kunt ook noEmit instellen als u geen JavaScript-bestanden

04:23.820 --> 04:25.600
wilt genereren.

04:25.600 --> 04:27.130
Nu klinkt dit misschien vreemd,

04:27.130 --> 04:29.190
want dat is het idee van TypeScript, maar

04:29.190 --> 04:30.700
als u alleen wilt controleren

04:30.700 --> 04:32.420
of uw bestanden correct zijn, maar

04:32.420 --> 04:35.030
u wilt niet al die uitvoerbestanden schrijven, om

04:35.030 --> 04:37.680
bijvoorbeeld wat tijd te besparen in een groter project,

04:37.680 --> 04:39.120
dan kunt u dit op "true" zetten

04:39.120 --> 04:41.792
om de types compiler alleen uw bestanden te laten controleren

04:41.792 --> 04:45.460
en eventuele fouten te rapporteren zonder daadwerkelijk een uitvoerbestand

04:45.460 --> 04:47.903
te maken.

04:47.903 --> 04:50.490
importHelpers is niet echt belangrijk voor ons,

04:50.490 --> 04:52.065
hier kunnen we dat negeren.

04:52.065 --> 04:54.570
downlevelIteration is een geavanceerde optie.

04:54.570 --> 04:57.150
Het is interessant als je je code compileert

04:57.150 --> 05:00.295
naar oudere versies van JavaScript en je werkt

05:00.295 --> 05:02.690
met vier lussen.

05:02.690 --> 05:05.798
Dan zou je in sommige zeldzame scenario's problemen kunnen

05:05.798 --> 05:08.378
krijgen waarbij de compilatie niet goed werkt.

05:08.378 --> 05:10.440
Als u deze optie inschakelt, krijgt u een

05:10.440 --> 05:12.770
meer exacte compilatie, die zal werken in deze

05:12.770 --> 05:15.280
nichegevallen, dus daarom zou u kunnen denken dat

05:15.280 --> 05:17.210
u deze optie altijd moet inschakelen,

05:17.210 --> 05:20.097
maar het zal ook de uitvoer meer waar deze code.

05:20.097 --> 05:21.880
Je moet dit dus alleen aanzetten als

05:21.880 --> 05:25.110
je lussen hebt en je ziet dat je gegenereerde code zich plotseling

05:25.110 --> 05:27.700
anders gedraagt dan zou moeten met betrekking tot

05:27.700 --> 05:29.023
die lussen.
