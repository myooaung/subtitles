WEBVTT

00:02.190 --> 00:04.310
講師：では､ 代わりにどのように状態を更新すればいいのでしょうか｡ 

00:04.310 --> 00:06.970
ここでスプレッド演算子を使って､ 既存のTODOをすべてこの配列に分散させ､

00:06.970 --> 00:13.520
最後に新しいTODOを新しい項目として追加すればいいんです｡

00:13.520 --> 00:16.300
これは動作しますが､ 最もクリーンな更新方法とは言えません｡ 

00:16.300 --> 00:20.090
このアプリのすべてのシナリオで動作する可能性が高いですが､

00:20.090 --> 00:23.170
理論的には､ reactは状態の更新をスケジュールするので､

00:23.170 --> 00:30.710
ここでTODOsの値にあるものは､ 更新が実行されたときに必ずしも最新の状態であるとは限りません｡

00:30.710 --> 00:35.340
これを保証するために､ ここでこの状態更新関数に関数を渡すことができますが｡

00:35.340 --> 00:39.680
以前のTODOを取得し､ 新しい状態を返す関数です｡

00:39.680 --> 00:41.460
これを支えているのがreactです｡ 

00:41.460 --> 00:51.363
この関数はreactからも呼び出され､ この関数内のprevTodosが本当に最新の状態スナップショットであることを確認することができます｡

00:52.220 --> 00:57.080
これで､ 古いTODOと新しいTODOでTODOを更新し､

00:57.080 --> 01:01.860
新しいTODOを追加できる関数がここにできました｡

01:01.860 --> 01:03.800
この状態ですべて保存し､

01:03.800 --> 01:05.470
アプリケーションに戻り､

01:05.470 --> 01:10.260
コースを終了すると､ うまくいきます｡

01:10.260 --> 01:15.650
そして､ ここで1ヶ月で完成を入力すれば､ これも加算されます｡

01:15.650 --> 01:17.330
これですべてうまくいくわけです｡ 

01:17.330 --> 01:18.960
現在不足している機能は､

01:18.960 --> 01:21.180
削除もできることです｡

01:21.180 --> 01:22.790
これは次回の講義でやりますが､

01:22.790 --> 01:26.470
それよりも重要なのは､ reactとtypescriptで状態を管理する方法も学んだことで､

01:26.470 --> 01:31.693
これはもちろんprops以外にも､ もうひとつの核となる概念です｡
