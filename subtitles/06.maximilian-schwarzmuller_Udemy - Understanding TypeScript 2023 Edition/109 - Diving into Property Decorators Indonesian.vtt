WEBVTT

00:02.250 --> 00:05.050
Instruktur: Sekarang sebelum kita mengeksplorasi kasus penggunaan

00:05.050 --> 00:07.811
yang lebih berguna atau skenario untuk beberapa dekorator.

00:07.811 --> 00:10.700
Saya ingin menunjukkan secara singkat kepada Anda semua tempat lain

00:10.700 --> 00:12.550
di mana Anda bisa menambahkan dekorator.

00:12.550 --> 00:15.670
Jelas kita bisa menambahkan dekorator ke kelas, tetapi ada lebih banyak

00:15.670 --> 00:17.731
tempat di mana kita bisa menambahkannya.

00:17.731 --> 00:20.750
Untuk itu saya akan membuat kelas baru, karena kita membutuhkan kelas

00:20.750 --> 00:22.460
untuk setiap dekorator yang ingin kita

00:22.460 --> 00:24.580
gunakan, tetapi kita tidak harus menambahkan semua

00:24.580 --> 00:26.420
dekorator langsung ke kelas.

00:26.420 --> 00:28.480
Katakanlah kita memiliki kelas

00:28.480 --> 00:31.523
produk di sini dan di dalam kelas produk, kita mungkin

00:31.523 --> 00:34.540
memiliki judul, yang berupa string.

00:34.540 --> 00:37.070
Dan kita bisa menetapkan nilai di sini dengan konstruktor.

00:37.070 --> 00:39.600
Tentu saja kita selalu bisa menggunakan jalan pintas dan melakukan semuanya

00:39.600 --> 00:41.570
dalam satu langkah dalam konstruktor seperti yang Anda

00:41.570 --> 00:42.680
pelajari sebelumnya.

00:42.680 --> 00:44.451
Di sini saya akan mengambil rute yang lebih panjang.

00:44.451 --> 00:49.451
Kita bisa memiliki metode di sini, mendapatkan harga dengan pajak.

00:50.150 --> 00:53.442
Untuk itu saya berharap mendapatkan tarif pajak yang merupakan

00:53.442 --> 00:57.150
angka dan agar itu berfungsi, kita juga harus menyimpan harga di sini.

00:57.150 --> 01:01.200
Properti Price yang juga kita dapatkan sebagai bagian dari konstruktor.

01:01.200 --> 01:04.060
Sekali lagi kita bisa menggunakan jalan pintas di sini, tetapi saya akan

01:04.060 --> 01:05.340
melakukannya seperti ini.

01:05.340 --> 01:08.120
Dan kemudian dalam metode ini saya

01:08.120 --> 01:13.120
akan mengembalikan, Ini. harga dikalikan satu ditambah pajak.

01:13.200 --> 01:15.300
Jadi kita memiliki metode utilitas ini

01:15.300 --> 01:17.610
dan kita juga dapat menambahkan getter dan

01:17.610 --> 01:19.090
setter jika Anda mau.

01:19.090 --> 01:22.700
Sebagai contoh, kita bisa menambahkan setter untuk harga di sini, di mana kita mendapatkan

01:22.700 --> 01:25.850
nilai yang seharusnya berupa angka dan di mana kita mengontrol bahwa kita

01:25.850 --> 01:28.231
hanya bisa mengatur nilai tertentu.

01:28.231 --> 01:32.090
Sekarang untuk membuat ini berfungsi, saya akan menamai ulang harga di sini, untuk

01:32.090 --> 01:35.350
menggarisbawahi harga dan menjadikannya pribadi sebenarnya, sehingga

01:35.350 --> 01:37.540
kita tidak bisa langsung mencapainya.

01:37.540 --> 01:39.970
Dan di sini saya akan menetapkan harga garis bawah ini

01:39.970 --> 01:42.580
dan di sini saya akan menggunakan harga garis bawah ini.

01:42.580 --> 01:44.800
Dan dengan perubahan ini di setter, kita dapat

01:44.800 --> 01:48.350
mengatur harga garis bawah ini sama dengan nilai yang kita dapatkan.

01:48.350 --> 01:51.290
Tetapi sebelum kita melakukannya, kita bisa memeriksa apakah

01:51.290 --> 01:52.770
nilainya lebih besar dari nol,

01:52.770 --> 01:55.630
sehingga kita tidak menerima harga negatif.

01:55.630 --> 01:57.220
Jadi dengan itu, kita hanya menetapkan harga

01:57.220 --> 02:00.159
jika lebih besar dari nol, jika tidak, kita tidak melakukan apa pun.

02:00.159 --> 02:04.330
Memang kita bisa melempar kesalahan dalam kasus lain.

02:04.330 --> 02:08.389
Harga tidak valid harus positif.

02:08.389 --> 02:11.350
Jadi itu adalah sesuatu yang bisa kita lakukan, sekarang

02:11.350 --> 02:14.020
kita memiliki kelas dengan dua properti, dengan

02:14.020 --> 02:16.700
accessor dan juga dengan metode di sini dan metode

02:16.700 --> 02:18.570
ini memiliki parameter.

02:18.570 --> 02:21.180
Sekarang untuk semua hal ini kita bisa menambahkan

02:21.180 --> 02:24.690
dekorator dan mari kita mulai dengan teman lama yang baik, dekorator

02:24.690 --> 02:25.910
log.

02:25.910 --> 02:28.960
Disini saya akan menamainya log agar tidak berbenturan dengan logger di atas sana,

02:28.960 --> 02:30.650
karena dekorator log ini, tidak akan ditambahkan

02:30.650 --> 02:31.960
ke dalam kelas dan oleh karena itu akan

02:31.960 --> 02:33.770
mendapatkan argumen yang berbeda.

02:33.770 --> 02:35.671
Ini akan mendapatkan argumen, dan argumen

02:35.671 --> 02:38.580
mana yang didapat dekorator, tergantung di mana Anda

02:38.580 --> 02:40.030
menambahkannya.

02:40.030 --> 02:41.960
Itulah sebabnya saya tidak bisa menggunakan kembali

02:41.960 --> 02:45.700
logger, karena itu telah disetel dengan baik untuk hanya bekerja dengan kelas.

02:45.700 --> 02:48.100
Sekarang di sini saya tidak memiliki pabrik dekorator sebenarnya,

02:48.100 --> 02:49.980
saya hanya perlu menghias fungsi seperti ini,

02:49.980 --> 02:53.510
tetapi tetap saja, argumen mana yang didapat fungsi dekorator ini, tergantung di mana

02:53.510 --> 02:55.230
kita menggunakannya.

02:55.230 --> 02:58.750
Misalnya, kita bisa menambahkan dekorator ke properti.

02:58.750 --> 03:01.120
Di sini saya dapat menambahkan log seperti ini

03:01.120 --> 03:03.840
dan jika Anda menambahkan dekorator ke properti, dekorator

03:03.840 --> 03:05.759
menerima dua argumen.

03:05.759 --> 03:09.830
Argumen pertama, adalah target properti dan untuk properti instance

03:09.830 --> 03:12.010
seperti ini, yang kita panggil pada

03:12.010 --> 03:15.290
instance jika Anda bekerja dengannya.

03:15.290 --> 03:19.490
Ini akan menjadi prototipe dari objek yang dibuat.

03:19.490 --> 03:22.140
Jika kita memiliki properti statis di sini, target

03:22.140 --> 03:24.850
akan merujuk ke status fungsi konstruktor.

03:24.850 --> 03:27.770
Jadi di sini saya akan mengatakan apa saja karena saya tidak tahu

03:27.770 --> 03:30.140
persis struktur mana yang akan dimiliki objek.

03:30.140 --> 03:35.140
Argumen kedua yang kita dapatkan, adalah nama properti secara sederhana.

03:35.290 --> 03:37.682
Itu bisa berupa string di sini, tentu

03:37.682 --> 03:40.400
saja bisa juga berupa simbol.

03:40.400 --> 03:43.470
Kita tidak tahu apa yang kita gunakan sebagai pengidentifikasi properti.

03:43.470 --> 03:48.037
Dan kemudian di sini saya akan log property decorator, sehingga

03:49.130 --> 03:51.120
kita bisa melihat ketika ini

03:51.120 --> 03:55.980
berjalan dan saya ingin konsol. target log dan juga nama properti.

03:55.980 --> 03:57.780
Sehingga kita melihat apa yang ada di dalam kedua nilai ini.

03:57.780 --> 04:01.280
Dengan itu jika kita simpan sehingga terkompilasi tanpa kesalahan,

04:01.280 --> 04:03.080
dan jika kita pergi ke server kita,

04:03.080 --> 04:06.871
kita lihat, properti dekorator dicetak di sana.

04:06.871 --> 04:08.630
Dan inilah output yang kita dapatkan.

04:08.630 --> 04:13.220
Kita lihat di sini, itulah prototipe objek kita karena kita tidak

04:13.220 --> 04:15.850
melihat judul dan harga di sini.

04:15.850 --> 04:18.160
Tetapi kita melihat get price dengan pajak dan

04:18.160 --> 04:19.770
memang metode-metode yang terdaftar

04:19.770 --> 04:21.900
pada prototipe sebuah objek.

04:21.900 --> 04:24.240
Jadi itu adalah prototipe objek kita dan kita

04:24.240 --> 04:26.640
lihat judul di sebelah kanan, itu adalah nama

04:26.640 --> 04:28.943
properti yang sedang kita kerjakan.

04:29.800 --> 04:33.770
Sekarang, kapan tepatnya logger ini dieksekusi?

04:33.770 --> 04:37.880
Seperti yang Anda ketahui, karena saya tidak pernah menginstansiasi

04:37.880 --> 04:41.670
produk apa pun, ini pada dasarnya dijalankan ketika definisi kelas

04:41.670 --> 04:43.980
Anda didaftarkan oleh JavaScript.

04:43.980 --> 04:47.660
Jadi, ini dieksekusi ketika Anda mendefinisikan properti ini pada dasarnya

04:47.660 --> 04:49.140
untuk JavaScript, sebagai bagian

04:49.140 --> 04:50.960
dari kelas Anda di sini, sebagai bagian

04:50.960 --> 04:52.970
dari fungsi konstruktor ini.

04:52.970 --> 04:54.610
Yang pada akhirnya tercipta di sini.

04:54.610 --> 04:58.053
Ini adalah saat dekorator properti ini dijalankan.
