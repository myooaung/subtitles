WEBVTT

00:02.170 --> 00:06.250
- : Maintenant, en plus des objets, nous avons aussi des tableaux en JavaScript,

00:06.250 --> 00:08.300
un type de données très important.

00:08.300 --> 00:10.810
Les tableaux sont créés comme ça en JavaScript, comme vous le savez, et

00:10.810 --> 00:12.560
vous pouvez y stocker n'importe quelle donnée : des

00:12.560 --> 00:15.970
nombres, des chaînes de caractères, des booléens, des objets, d'autres tableaux, vous pouvez

00:15.970 --> 00:17.970
avoir des tableaux imbriqués, après tout, et vous pouvez

00:17.970 --> 00:19.380
aussi mélanger les données.

00:19.380 --> 00:23.200
Vous pouvez avoir un tableau avec des chaînes de caractères et des chiffres mélangés.

00:23.200 --> 00:25.570
Et TypeScript prend également en charge les tableaux.

00:25.570 --> 00:29.260
Tout tableau JavaScript est pris en charge et les types de ce

00:29.260 --> 00:32.140
tableau peuvent être flexibles ou stricts.

00:32.140 --> 00:35.200
Voyons maintenant ce qu'il en est en TypeScript.

00:35.200 --> 00:38.760
Pour cela, ici dans l'app. ts, disons que notre personne a également

00:38.760 --> 00:42.810
une clé hobbies, mais bien sûr nous pourrions aussi avoir une variable ou une

00:42.810 --> 00:45.660
constante hobbies en dehors de l'objet.

00:45.660 --> 00:49.050
Ainsi, l'utilisation des tableaux est exactement la même à l'intérieur

00:49.050 --> 00:50.853
et à l'extérieur des objets.

00:51.950 --> 00:54.780
Nous avons donc ici des hobbies, et les hobbies

00:54.780 --> 00:58.140
peuvent être le sport, et la cuisine, disons.

00:58.140 --> 01:01.150
J'ai donc deux éléments là-dedans, et ces éléments, comme vous

01:01.150 --> 01:03.620
pouvez le voir, sont des chaînes de caractères.

01:03.620 --> 01:07.570
Maintenant, si nous survolons les hobbies, TypeScript a correctement

01:07.570 --> 01:10.630
détecté la distance du type tableau de chaînes.

01:10.630 --> 01:12.500
C'est une syntaxe que vous n'avez jamais

01:12.500 --> 01:16.140
vue auparavant, mais c'est ainsi que TypeScript décrit un tableau de données.

01:16.140 --> 01:18.510
Vous avez les crochets, et en face de

01:18.510 --> 01:21.340
cela, le type de données qui est stocké là.

01:21.340 --> 01:23.530
Maintenant, c'est le type, le groupe du type déduit.

01:23.530 --> 01:25.810
Il a vu qu'ici nous avons un tableau et que nous n'avons

01:25.810 --> 01:29.110
que des chaînes de caractères, il en a donc déduit que les hobbies devraient

01:29.110 --> 01:31.940
probablement être un tableau de chaînes de caractères.

01:31.940 --> 01:34.903
Et en effet, pour les loisirs, cela a beaucoup de sens.

01:36.210 --> 01:41.040
Bien entendu, vous pouvez également définir explicitement le type de variable.

01:41.040 --> 01:44.720
Si nous ajoutons une nouvelle variable, les activités favorites,

01:45.580 --> 01:48.670
qui devrait initialement être vide, nous pourrions vouloir

01:48.670 --> 01:51.160
définir explicitement le type de données stockées

01:51.160 --> 01:53.140
dans cette variable.

01:53.140 --> 01:55.590
Maintenant, disons que cela devrait être un tableau de chaînes de

01:55.590 --> 01:57.570
caractères, eh bien, nous pouvons simplement répéter

01:57.570 --> 02:00.330
ce que nous venons de voir ; tapez string, et puis des crochets après, et cela

02:00.330 --> 02:03.330
indique à TypeScript que ce que nous stockons ici n'est pas seulement une chaîne

02:03.330 --> 02:05.990
de caractères unique, c'est un tableau de chaînes de caractères.

02:05.990 --> 02:09.550
Et en effet, si j'essaie d'y stocker uniquement les sports, j'obtiens

02:09.550 --> 02:12.183
une erreur. Je reçois une erreur parce

02:12.183 --> 02:15.650
qu'il s'agit d'une seule chaîne et non d'un tableau de chaînes.

02:15.650 --> 02:19.370
Je n'obtiens pas d'erreur, bien sûr, si je mets tout cela entre

02:19.370 --> 02:22.610
crochets et crée donc effectivement un tableau.

02:22.610 --> 02:25.870
Je reçois à nouveau une erreur si j'ajoute un nombre, disons, parce que nous

02:25.870 --> 02:29.220
avons défini ce tableau comme étant un tableau de chaînes de caractères.

02:29.220 --> 02:31.290
Maintenant, ici, nous avons un tableau mixte.

02:31.290 --> 02:34.920
Il s'agit d'un tableau de chaînes de caractères et de chiffres, ce qui ne fonctionne

02:34.920 --> 02:37.180
pas et n'est pas pris en charge ici.

02:37.180 --> 02:40.100
Si nous voulions prendre en charge un tel tableau

02:40.100 --> 02:43.120
mixte, une solution serait d'utiliser "any" ici.

02:43.120 --> 02:45.880
Le type "any" est un type spécial en TypeScript, que nous

02:45.880 --> 02:47.610
examinerons de plus près plus tard,

02:47.610 --> 02:50.530
qui signifie essentiellement, faites ce que vous voulez.

02:50.530 --> 02:53.020
Il s'agit bien sûr d'un type que vous ne voulez pas utiliser trop souvent

02:53.020 --> 02:55.630
car vous perdriez les avantages que TypeScript vous offre, vous êtes

02:55.630 --> 02:58.170
de retour dans le monde JavaScript, où vous pouvez également utiliser

02:58.170 --> 03:00.140
n'importe quelle valeur n'importe où.

03:00.140 --> 03:02.940
Ainsi, "n'importe quel" est vraiment flexible,

03:02.940 --> 03:06.270
mais cette flexibilité a pour prix l'abandon de tous les

03:06.270 --> 03:08.710
avantages offerts par TypeScript.

03:08.710 --> 03:10.840
Donc ici, je vais revenir à la chaîne, parce que je ne veux

03:10.840 --> 03:12.530
vraiment pas avoir un nombre là-dedans, et

03:12.530 --> 03:14.933
donc nous pouvons supprimer le nombre et nous sommes bons.

03:15.900 --> 03:18.830
Les tableaux nous donnent également un excellent

03:18.830 --> 03:21.890
exemple, en fait tout comme les objets et leurs propriétés,

03:21.890 --> 03:25.730
de la dynamique de l'inférence de type de TypeScript.

03:25.730 --> 03:28.750
Si nous ajoutons une boucle "for" ici en bas, et que nous voulons passer

03:28.750 --> 03:31.570
en revue tous les hobbies de la personne, nous pouvons bien sûr

03:31.570 --> 03:33.220
utiliser une boucle "for" traditionnelle

03:33.220 --> 03:38.220
avec pour chaque hobby de la personne. hobbies, donc accéder à la propriété hobbies

03:38.620 --> 03:41.130
et passer en revue tous les hobbies, stocker

03:41.130 --> 03:42.793
chaque hobby pour chaque itération

03:43.690 --> 03:46.780
dans cette constante, et ensuite nous pouvons consulter

03:46.780 --> 03:50.090
le log hobby ici.

03:50.090 --> 03:52.000
Maintenant, ce n'est pas trop fantaisiste, c'est quelque chose

03:52.000 --> 03:53.710
que nous connaissons de JavaScript, d'accord.

03:53.710 --> 03:58.280
Si je compile maintenant cette application. Nous récupérons le nom

03:58.280 --> 04:01.700
à partir de cette ligne, puis les deux

04:01.700 --> 04:04.750
passe-temps imprimés.

04:04.750 --> 04:07.800
Mais ce qui est intéressant ici, c'est que sur hobby, on peut

04:07.800 --> 04:11.040
accéder à tout, on peut accéder à n'importe quelle chaîne.

04:11.040 --> 04:14.210
Par exemple, pour UpperCase, j'obtiens cette complétion automatique

04:14.210 --> 04:16.230
et TypeScript ne se plaint pas.

04:16.230 --> 04:18.070
Pourquoi ne se plaint-il pas ?

04:18.070 --> 04:21.930
Parce qu'il sait que hobbies est de type string array, donc

04:21.930 --> 04:25.830
quand j'accède à person. hobbies, l'inférence de TypeScript

04:25.830 --> 04:29.700
détecte que les hobbies seront un tableau de chaînes.

04:29.700 --> 04:33.450
Ainsi, hobby, d'un autre côté, est correctement identifié comme étant une chaîne de

04:33.450 --> 04:36.000
caractères, car puisque nous traversons un tableau de chaînes

04:36.000 --> 04:38.370
de caractères, les valeurs individuelles ne peuvent

04:38.370 --> 04:40.510
être que des chaînes de caractères.

04:40.510 --> 04:43.450
Et donc, les types nous offrent un grand soutien là-bas,

04:43.450 --> 04:46.490
et nous permettent de faire avec le hobby tout ce qui peut être

04:46.490 --> 04:50.050
fait avec une chaîne, parce qu'il sait avec certitude que le hobby sera

04:50.050 --> 04:53.810
une chaîne en raison des types que nous avons mis en place là-bas.

04:53.810 --> 04:56.300
C'est très souple et, bien sûr, c'est une excellente

04:56.300 --> 04:59.030
fonctionnalité qui facilite l'écriture du code et

04:59.030 --> 05:01.360
la rend beaucoup plus souple et sûre.

05:01.360 --> 05:04.440
Par exemple, nous obtiendrions une erreur ici s'il

05:04.440 --> 05:08.570
essayait d'accéder à hobby. carte, si je pensais que ce serait un tableau.

05:08.570 --> 05:12.060
La méthode map est disponible sur les tableaux, mais pas sur les chaînes de caractères.

05:12.060 --> 05:14.540
Et ici, correctement, à nouveau, une erreur que

05:14.540 --> 05:17.810
map n'existe pas sur le type string parce qu'il n'existe pas.

05:17.810 --> 05:21.290
Nous obtenons donc une erreur, et c'est une bonne chose, parce

05:21.290 --> 05:24.510
que ce serait faux, et nous voyons ici que l'inférence de

05:24.510 --> 05:27.343
TypeScript est vraiment, vraiment brillante.
