WEBVTT

00:02.340 --> 00:04.100
Narrateur : Nous avons donc commencé avec les

00:04.100 --> 00:06.670
génériques et j'espère que ce que TypeScript fait ici est clair,

00:06.670 --> 00:10.240
nous passons quelques informations supplémentaires dans la fonction de fusion, afin que

00:10.240 --> 00:12.130
nous puissions travailler de manière plus efficace

00:12.130 --> 00:14.370
avec le résultat de la fonction de fusion.

00:14.370 --> 00:16.540
C'est typiquement à ça que servent les génériques.

00:16.540 --> 00:19.890
Ils vous permettent de continuer à travailler avec vos données

00:19.890 --> 00:21.960
de manière optimale avec TypeScript.

00:21.960 --> 00:23.820
Maintenant, dans ce cas, ici, cependant,

00:23.820 --> 00:25.810
nous aurions un problème si je passe

00:25.810 --> 00:28.570
dans, disons juste un numéro 30 ici.

00:28.570 --> 00:30.470
Bien sûr, TypeScript jette maintenant une erreur,

00:30.470 --> 00:32.010
car il a essayé d'accéder à l'âge, mais

00:32.010 --> 00:33.870
l'accès au nom fonctionnerait.

00:33.870 --> 00:37.100
Néanmoins, si nous sauvegardons cela, cela compile sans erreurs,

00:37.100 --> 00:39.710
et si j'imprime l'objet fusionné global, nous voyons

00:39.710 --> 00:41.610
que ce que j'obtiens en retour est juste

00:41.610 --> 00:43.910
hobbies et nom dans mon objet, ce qui est logique

00:43.910 --> 00:48.010
parce que 30 est un nombre, et quand nous avons passé cela comme second argument

00:48.010 --> 00:54.590
à object assign, ce que nous faisons ici, eh bien, cela échoue juste silencieusement.

00:54.590 --> 00:57.860
JavaScript ne lance pas d'erreur, il ne se plaint pas.

00:57.860 --> 01:00.460
Mais bien sûr, il ne fusionne pas non plus 30 dans

01:00.460 --> 01:02.270
l'objet nouvellement créé, vous

01:02.270 --> 01:04.690
voyez qu'il n'y a pas de 30 dans cet objet.

01:04.690 --> 01:06.540
Maintenant, comment JavaScript le ferait-il ?

01:06.540 --> 01:08.470
Parce que 30 n'est pas un objet, une

01:08.470 --> 01:12.150
affectation d'objet est seulement capable de fusionner différents

01:12.150 --> 01:14.090
objets entre eux.

01:14.090 --> 01:15.410
Alors qu'est-ce qu'on veut sauver au bout du compte ?

01:15.410 --> 01:17.600
Eh bien, nous ne nous soucions pas du type exact,

01:17.600 --> 01:20.040
nous ne nous soucions pas de la structure exacte

01:20.040 --> 01:22.980
de l'objet que vous fournissez ici pour U et T.

01:22.980 --> 01:26.600
Mais ce qui nous importe, c'est que les deux paramètres,

01:26.600 --> 01:31.370
les deux types T et U peuvent être n'importe quel type d'objet, mais ils

01:31.370 --> 01:34.420
doivent être un objet à tout moment.

01:34.420 --> 01:36.830
Et actuellement, nous ne disons pas cela.

01:36.830 --> 01:37.820
Actuellement, nous disons

01:37.820 --> 01:40.110
juste, ils peuvent être de n'importe quel type, je m'en fiche.

01:40.110 --> 01:41.750
Maintenant, souvent, ce n'est pas bien.

01:41.750 --> 01:45.060
Vous voulez restreindre les types de T et U ici, résoudre

01:45.060 --> 01:46.683
vos types génériques.

01:47.830 --> 01:51.540
Vous pouvez le faire avec des contraintes de type.

01:51.540 --> 01:55.170
Pour les types génériques, vous pouvez définir certaines contraintes

01:55.170 --> 01:58.280
concernant les types sur lesquels vos types génériques peuvent

01:58.280 --> 02:01.120
être basés et vous le faites avec le mot-clé étendu ici dans

02:01.120 --> 02:05.150
les parenthèses angulaires après le type que vous voulez contraindre.

02:05.150 --> 02:07.410
Donc ici nous pourrions dire extends

02:07.410 --> 02:09.020
object, et avec cela je dis,

02:09.020 --> 02:12.740
le type T peut être n'importe quel objet avec n'importe quelle

02:12.740 --> 02:15.340
structure, mais il doit être un objet.

02:15.340 --> 02:17.480
Nous pouvons faire de même pour vous.

02:17.480 --> 02:19.040
Et si je fais cela, vous voyez maintenant

02:19.040 --> 02:21.820
que j'ai déjà une erreur ici dans l'IDE.

02:21.820 --> 02:23.980
Et si j'essaie de sauvegarder cela,

02:23.980 --> 02:26.150
j'obtiens également une erreur dans

02:26.150 --> 02:28.640
le compilateur, car l'argument de type 30

02:28.640 --> 02:31.133
ici n'est pas assignable au type objet.

02:32.080 --> 02:34.480
C'est donc, bien sûr, le comportement que nous voulons ici.

02:34.480 --> 02:38.190
Maintenant, nous sommes obligés de passer dans un objet

02:38.190 --> 02:39.940
à nouveau, oups, comme ça.

02:39.940 --> 02:41.990
Maintenant, nous sommes obligés de le passer à nouveau,

02:41.990 --> 02:43.680
et donc nous améliorons cette fonction car maintenant

02:43.680 --> 02:45.290
elle fonctionne vraiment.

02:45.290 --> 02:48.980
Et nous savons que l'objet assigné veut deux objets.

02:48.980 --> 02:51.000
Au final, nous voulons garantir l'obtention

02:51.000 --> 02:52.820
de deux objets en fixant certaines

02:52.820 --> 02:56.370
contraintes sur nos types génériques.

02:56.370 --> 02:58.630
Et ces contraintes peuvent être n'importe quoi.

02:58.630 --> 03:01.290
Vous pouvez faire référence à des objets, à des chaînes de caractères,

03:01.290 --> 03:03.730
vous pouvez utiliser votre propre type si vous en avez un.

03:03.730 --> 03:06.700
Vous pouvez également utiliser des types d'union ici si vous le souhaitez,

03:06.700 --> 03:08.470
vous êtes vraiment flexible ici, vous pouvez

03:08.470 --> 03:10.510
définir toutes les contraintes que vous voulez.

03:10.510 --> 03:12.620
Et bien sûr, il n'est pas nécessaire de contraindre tous

03:12.620 --> 03:13.720
les types génériques.

03:13.720 --> 03:16.560
Si vous voulez juste contraindre U, vous pouvez le faire.

03:16.560 --> 03:19.620
Dans cet exemple, il est logique de contraindre les deux

03:19.620 --> 03:22.880
parce que l'objet assigné veut deux objets ici, mais vous

03:22.880 --> 03:24.640
êtes vraiment flexible là.

03:24.640 --> 03:26.620
Il est important d'être conscient de ce

03:26.620 --> 03:28.440
concept de contraintes, car il permet

03:28.440 --> 03:30.560
de travailler avec des types génériques

03:30.560 --> 03:32.640
de manière plus optimale, ce qui évite des

03:32.640 --> 03:34.810
erreurs inutiles ou des comportements étranges

03:34.810 --> 03:37.513
comme c'était le cas auparavant.
