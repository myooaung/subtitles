WEBVTT

00:02.130 --> 00:04.110
Eğitmen: Burada Webpack için geliştirme

00:04.110 --> 00:06.137
iş akışımızı hazırladık, Webpack dev

00:06.137 --> 00:08.490
sunucusu için yapılandırdık, modu geliştirme

00:08.490 --> 00:10.840
olarak ayarladık ve hata ayıklama deneyimimizi

00:10.840 --> 00:13.210
iyileştirmek, bize daha iyi hata mesajları vermek

00:13.210 --> 00:16.570
vb. için kaynak eşlemelerini ayarladık.

00:16.570 --> 00:20.150
Şimdi üretim için, yani kodumuzu daha sonra son kullanıcılarımıza

00:20.150 --> 00:23.260
sunulacağı bir sunucuya yüklemek üzere hazırlamak istediğimizde,

00:23.260 --> 00:27.070
genellikle farklı bir iş akışı isteriz.

00:27.070 --> 00:28.790
Bu nedenle webpack adında yeni bir yapılandırma

00:28.790 --> 00:31.820
ekleyeceğim. Yapılandır. Prod. js.

00:31.820 --> 00:33.210
Bu isim size bağlı değildir

00:33.210 --> 00:36.043
çünkü Webpack varsayılan olarak bunu aramayacaktır.

00:36.880 --> 00:39.710
Yine de bir saniye içinde aramasını söyleyeceğiz.

00:39.710 --> 00:41.920
Bunu söylemeden önce, aslında buradaki

00:41.920 --> 00:44.708
tüm geliştirme kurulumunu bu yapılandırmaya

00:44.708 --> 00:48.480
kopyalayalım. prod dosyası ama şimdi ince ayar yapalım.

00:48.480 --> 00:51.150
Örneğin modu üretim olarak ayarlayabiliriz.

00:51.150 --> 00:54.380
Bu, Webpack'e bu optimizasyonları yapmasını, kodumuzu küçültmesini

00:54.380 --> 00:56.550
vb. söyleyecektir, bu yüzden bunu kesinlikle

00:56.550 --> 00:59.220
burada ayarlamak istersiniz.

00:59.220 --> 01:00.440
Girişi bırakacağız.

01:00.440 --> 01:02.910
Çıktıda genel yoldan kurtulamıyoruz çünkü

01:02.910 --> 01:05.860
bu Webpack geliştirme sunucusu için gerekliydi.

01:05.860 --> 01:08.810
Şimdi bunu burada kullanmayacağız, çünkü üretim için

01:08.810 --> 01:10.430
Webpack komut dosyasını çalıştırmak

01:10.430 --> 01:12.940
ve çıktımızı diske yazmak ve yerel olarak çalışan

01:12.940 --> 01:16.900
bir sunucuda geçici olarak sunulmamak istiyoruz.

01:16.900 --> 01:19.350
Burada herhangi bir kaynak haritası oluşturmamak

01:19.350 --> 01:22.090
için devtool'u none olarak ayarlayabiliriz çünkü

01:22.090 --> 01:24.913
üretimde bunlara ihtiyacımız olmayabilir.

01:26.140 --> 01:30.160
Şimdi geri kalanı olduğu gibi kalabilir, ancak daha fazlasını ekleyeceğiz.

01:30.160 --> 01:34.620
Burada en altta, bir plugins girişi eklemek ve bunu bir dizi olarak

01:34.620 --> 01:36.220
ayarlamak istiyorum.

01:36.220 --> 01:41.070
Eklentiler, Webpack iş akışınıza ekleyebileceğiniz ve temelde

01:41.070 --> 01:43.020
tüm çıktıya, tüm projeye

01:43.020 --> 01:46.080
uygulanacak olan ekstra uzantılar veya

01:46.080 --> 01:47.820
eklentilerdir.

01:47.820 --> 01:50.190
Kurallar ve modül özellikle

01:50.190 --> 01:52.870
dosya bazında uygulanır.

01:52.870 --> 01:57.260
Eklentiler genel iş akışına uygulanır.

01:57.260 --> 01:58.730
Burada, yeni bir çıktı yazılmadan

01:58.730 --> 02:00.620
önce dist klasöründeki her şeyi

02:00.620 --> 02:04.370
otomatik olarak silen bir eklenti eklemek istiyorum, böylece

02:04.370 --> 02:06.540
dist klasöründe her zaman sadece en son,

02:06.540 --> 02:09.410
en yeni çıktıya sahip oluruz.

02:09.410 --> 02:11.900
Bunun için --save-dev ile yepyeni

02:11.900 --> 02:16.900
bir paket yükleyeceğim ve bu clean-webpack-plugin.

02:19.090 --> 02:21.900
Bu da bizim durumumuzda, projemizi her yeniden

02:21.900 --> 02:26.360
oluşturduğumuzda dist klasörünü temizlememize yardımcı olacaktır.

02:26.360 --> 02:29.820
Bunu yükledikten sonra, en üstte içe aktaralım.

02:29.820 --> 02:32.090
Buna CleanPlugin adını vereceğim

02:32.090 --> 02:36.400
ve require clean-webpack-plugin ile içe aktaracağım ve alttaki

02:36.400 --> 02:39.810
eklentiler dizisine yüklendiğinde, sadece new CleanPlugin'i

02:39.810 --> 02:44.073
çağıracağız. CleanWebpackPlugin ve bunu

02:45.422 --> 02:46.500
örnekleyin.

02:46.500 --> 02:49.660
Bu bir kurucu işlevdir ve şimdi onu örnekleyin.

02:49.660 --> 02:51.650
Burada yapmanız gereken tek şey bu

02:51.650 --> 02:53.260
ve sonuçta Webpack'e bu çıktı

02:53.260 --> 02:56.490
klasörüne bir şey yazmadan önce orada bulunan her şeyi

02:56.490 --> 02:58.593
temizleyeceğini söyleyecek.

02:59.440 --> 03:02.020
Şimdi elimizde bitmiş üretim iş akışı var.

03:02.020 --> 03:04.620
Şimdi bunu kullanmak için pakete gidelim. json ve orada bu derleme

03:04.620 --> 03:07.280
betiğini ayarlayalım.

03:07.280 --> 03:10.510
Burada Wepback'e bu prod dosyasını, bu üretim yapılandırma

03:10.510 --> 03:13.110
dosyasını kullanmasını söylemek istiyorum ve bunu

03:13.110 --> 03:15.160
--config ve ardından webpack ekleyerek

03:16.730 --> 03:21.140
yapıyoruz. Yapılandır. Prod. js burada.

03:21.140 --> 03:23.610
Burada, seçtiğiniz dosya adı olmalıdır ve bu, Webpack'e

03:23.610 --> 03:27.000
varsayılan Webpack yerine bu yapılandırma dosyasını kullanması talimatını

03:27.000 --> 03:29.730
verir. Yapılandır. js dosyasını

03:29.730 --> 03:32.030
normalde arar.

03:32.030 --> 03:34.600
Bununla birlikte, şimdi npn run build'i çalıştırırsanız,

03:34.600 --> 03:36.700
uygulamanızı üretim için oluşturacaktır, bu

03:36.700 --> 03:39.950
da size bu optimize edilmiş çıktıyı vereceği anlamına gelir.

03:39.950 --> 03:42.460
Eğer beklerseniz, burada bir paketimiz var. js dosyası ve bu artık

03:42.460 --> 03:45.110
gerçekten üretim için optimize edilmiş kod

03:45.110 --> 03:50.980
ve bu da dizininizle birlikte.

03:50.980 --> 03:50.980
html dosyası ve uygulama. css

03:50.980 --> 03:53.800
dosyası, uygulamanızı dağıtmak istiyorsanız burada

03:53.800 --> 03:56.393
bir sunucuya koyacağınız şeydir.

03:57.260 --> 04:00.440
Bu aynı zamanda bu modülün de sonudur.

04:00.440 --> 04:02.140
Şimdi öğrendiklerimizi özetleyeyim.
