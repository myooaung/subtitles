WEBVTT

00:02.450 --> 00:04.900
Instructor: Ahora bien, ¿qué haces si tienes

00:04.900 --> 00:07.090
una biblioteca en la que no puedes instalar

00:07.090 --> 00:10.470
tipos como lo hicimos para Lodash, por ejemplo?

00:10.470 --> 00:14.440
Para Lodash, afortunadamente tenemos un paquete de tipos, y como

00:14.440 --> 00:15.880
he mencionado, para la mayoría

00:15.880 --> 00:18.870
de las bibliotecas de terceros, tienes eso, pero no

00:18.870 --> 00:21.210
necesariamente para todos.

00:21.210 --> 00:25.320
O, qué pasa si tienes algún otro código JavaScript, digamos

00:25.320 --> 00:27.320
en tu índice. html, tiene algún

00:27.320 --> 00:29.800
otro código de script, que se ejecuta

00:29.800 --> 00:34.800
stare, donde se establece alguna variable global.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Algo así como que

00:38.450 --> 00:40.770
al final sabes que esto estará

00:40.770 --> 00:43.180
disponible globalmente.

00:43.180 --> 00:46.240
Como sabes, las variables añadidas de esta manera

00:46.240 --> 00:48.600
se añadirán al objeto global de la ventana,

00:48.600 --> 00:50.210
y querrás utilizarlas desde

00:50.210 --> 00:52.670
dentro de tu código TypeScript.

00:52.670 --> 00:53.503
Por ejemplo,

00:53.503 --> 00:57.770
aquí si quiero consolar. log(GLOBAL) así, obtengo

00:57.770 --> 00:59.990
un error aquí en mi IDE.

00:59.990 --> 01:04.299
Y si ejecuto tsc -w para iniciar la compilación, también

01:04.299 --> 01:06.340
obtengo un error aquí.

01:06.340 --> 01:09.470
Por lo tanto, no le gusta esa cosa global, a pesar

01:09.470 --> 01:11.530
de que sabemos que va a trabajar

01:11.530 --> 01:15.630
porque nuestro índice. html define esta variable global.

01:15.630 --> 01:18.010
Y, ya que hemos aplazado este script,

01:18.010 --> 01:19.493
este script se ejecutará

01:19.493 --> 01:22.170
después de este script de ahí abajo.

01:22.170 --> 01:23.780
En estos casos, tienes otra

01:23.780 --> 01:26.460
sintaxis disponible en TypeScript, y es

01:26.460 --> 01:29.460
el comando declare que puedes utilizar.

01:29.460 --> 01:32.110
Puedes declarar ciertas variables,

01:32.110 --> 01:34.150
por ejemplo, a TypeScript.

01:34.150 --> 01:36.730
Puedes decir declarar var GLOBAL y decirle

01:36.730 --> 01:38.640
a TypeScript que, por ejemplo,

01:38.640 --> 01:42.050
esto será una cadena, o que esto es cualquier cosa.

01:42.050 --> 01:43.687
Esto básicamente le dice

01:43.687 --> 01:45.910
a TypeScript, "No te preocupes, existirá",

01:45.910 --> 01:47.823
y alguna vez si guardamos esto,

01:49.090 --> 01:52.580
y salgo de este compilador y uso webpack en su lugar, vemos

01:52.580 --> 01:55.740
esta salida en nuestra página, porque técnicamente

01:55.740 --> 01:59.060
funciona, y con declare var, también le decimos a TypeScript

01:59.060 --> 02:02.270
que esto existe.

02:02.270 --> 02:04.420
Ahora voy a quitar este dmidecode aquí, pero

02:04.420 --> 02:06.770
ser consciente de declarar, de esta palabra clave,

02:06.770 --> 02:08.830
de este comando es importante.

02:08.830 --> 02:12.160
Te permite declarar características o variables de TypeScript

02:12.160 --> 02:14.590
donde sabes que existen o dejar que TypeScript

02:14.590 --> 02:17.210
conozca paquetes, variables globales en general,

02:17.210 --> 02:20.150
que Typescript no puede conocer, pero que tú como desarrollador

02:20.150 --> 02:23.373
sabes que estarán ahí.
