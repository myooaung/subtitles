WEBVTT

00:02.250 --> 00:05.050
Eğitmen: Şimdi daha kullanışlı kullanım durumlarını ya da

00:05.050 --> 00:07.811
bazı dekoratörler için senaryoları keşfetmeden önce.

00:07.811 --> 00:10.700
Size dekoratör ekleyebileceğiniz diğer tüm yerleri

00:10.700 --> 00:12.550
kısaca göstermek istiyorum.

00:12.550 --> 00:15.670
Elbette sınıflara dekoratörler ekleyebiliriz ancak bunları

00:15.670 --> 00:17.731
ekleyebileceğimiz daha fazla yer var.

00:17.731 --> 00:20.750
Bunun için yeni bir sınıf oluşturacağım, çünkü kullanmak istediğimiz

00:20.750 --> 00:22.460
her dekoratör için bir sınıfa ihtiyacımız

00:22.460 --> 00:24.580
var, ancak tüm dekoratörleri doğrudan sınıfa

00:24.580 --> 00:26.420
eklemek zorunda değiliz.

00:26.420 --> 00:28.480
Diyelim ki burada bir ürün

00:28.480 --> 00:31.523
sınıfımız var ve ürün sınıfında, belki

00:31.523 --> 00:34.540
bir dize olan bir başlığımız var.

00:34.540 --> 00:37.070
Ve buraya yapıcı ile bir değer atayabiliriz.

00:37.070 --> 00:39.600
Elbette her zaman kısayolu kullanabilir ve daha önce öğrendiğiniz

00:39.600 --> 00:42.680
gibi hepsini bir yapıcıda tek adımda yapabiliriz.

00:42.680 --> 00:44.451
Burada daha uzun bir yol izleyeceğim.

00:44.451 --> 00:49.451
Burada bir yöntemimiz olabilir, vergiyle birlikte fiyat alabiliriz.

00:50.150 --> 00:53.442
Bunun için bir sayı olan bir vergi oranı almayı bekliyorum

00:53.442 --> 00:57.150
ve bunun çalışması için burada bir fiyat da depolamalıyız.

00:57.150 --> 01:01.200
Kurucunun bir parçası olarak da aldığımız fiyat özelliği.

01:01.200 --> 01:04.060
Yine burada kısayolu kullanabiliriz, ancak ben bu

01:04.060 --> 01:05.340
şekilde yapacağım.

01:05.340 --> 01:08.120
Ve sonra bu yöntemde geri

01:08.120 --> 01:13.120
döneceğim, This. fiyat çarpı bir artı vergi.

01:13.200 --> 01:15.300
Yani bu yardımcı metoda sahibiz

01:15.300 --> 01:17.610
ve isterseniz bir getter ve setter

01:17.610 --> 01:19.090
da ekleyebiliriz.

01:19.090 --> 01:22.700
Örneğin, buraya fiyat için bir setter ekleyebiliriz, burada bir sayı olması

01:22.700 --> 01:25.850
gereken değeri alırız ve burada yalnızca belirli değerleri ayarlayabileceğimizi

01:25.850 --> 01:28.231
kontrol ederiz.

01:28.231 --> 01:32.090
Şimdi bu işi yapmak için, price'ı burada yeniden adlandıracağım, price'ın

01:32.090 --> 01:35.350
altını çizeceğim ve aslında onu özel yapacağım, böylece doğrudan

01:35.350 --> 01:37.540
ona ulaşamayacağız.

01:37.540 --> 01:39.970
Ve burada bu alt çizgi fiyatını ayarlayacağım

01:39.970 --> 01:42.580
ve burada bu alt çizgi fiyatını kullanacağım.

01:42.580 --> 01:44.800
Ve setter'daki bu değişikliklerle, bu alt çizgi

01:44.800 --> 01:48.350
fiyatını elde ettiğimiz değere eşit olarak ayarlayabiliriz.

01:48.350 --> 01:51.290
Ancak bunu yapmadan önce, değerin sıfırdan büyük olup

01:51.290 --> 01:52.770
olmadığını kontrol edebiliriz,

01:52.770 --> 01:55.630
böylece negatif fiyatları kabul etmeyiz.

01:55.630 --> 01:57.220
Böylece, fiyatı yalnızca sıfırdan

01:57.220 --> 02:00.159
büyükse belirleriz, aksi takdirde hiçbir şey yapmayız.

02:00.159 --> 02:04.330
Aslında diğer durumda bir hata verebiliriz.

02:04.330 --> 02:08.389
Geçersiz fiyat pozitif olmalıdır.

02:08.389 --> 02:11.350
Yani bu yapabileceğimiz bir şey, şimdi iki özelliği

02:11.350 --> 02:14.020
olan bir sınıfımız var, bir erişimcisi ve

02:14.020 --> 02:16.700
ayrıca burada bir metodu var ve bu metodun

02:16.700 --> 02:18.570
bir parametresi var.

02:18.570 --> 02:21.180
Şimdi tüm bu şeylere dekoratörler ekleyebiliriz

02:21.180 --> 02:25.910
ve eski bir dostla, kütük dekoratörüyle başlayalım.

02:25.910 --> 02:28.960
Burada, yukarıdaki logger ile çakışmaması için log adını vereceğim,

02:28.960 --> 02:30.650
çünkü bu log dekoratörü bir sınıfa eklenmeyecek

02:30.650 --> 02:31.960
ve bu nedenle farklı argümanlar

02:31.960 --> 02:33.770
alacaktır.

02:33.770 --> 02:35.671
Yine de argümanlar alacaktır ve dekoratörün

02:35.671 --> 02:38.580
hangi argümanları alacağı, onu nereye eklediğinize

02:38.580 --> 02:40.030
bağlıdır.

02:40.030 --> 02:41.960
Bu yüzden logger'ı tekrar kullanamıyorum,

02:41.960 --> 02:45.700
çünkü o sadece sınıflarla çalışmak üzere ince ayarlanmıştı.

02:45.700 --> 02:48.100
Şimdi burada aslında bir dekoratör fabrikam yok, sadece

02:48.100 --> 02:49.980
bunun gibi bir fonksiyonu dekore etmem gerekiyor,

02:49.980 --> 02:53.510
ancak yine de, bu dekoratör fonksiyonunun hangi argümanları alacağı, onu nerede

02:53.510 --> 02:55.230
kullandığımıza bağlıdır.

02:55.230 --> 02:58.750
Örneğin, bir özelliğe bir dekoratör ekleyebiliriz.

02:58.750 --> 03:01.120
Burada şu şekilde günlük ekleyebilirim

03:01.120 --> 03:03.840
ve bir özelliğe bir dekoratör eklerseniz, dekoratör

03:03.840 --> 03:05.759
iki argüman alır.

03:05.759 --> 03:09.830
İlk argüman, özelliğin hedefidir ve bunun gibi bir örnek

03:09.830 --> 03:12.010
özellik için, onunla çalışırsanız

03:12.010 --> 03:15.290
bir örnek üzerinde çağırırız.

03:15.290 --> 03:19.490
Bu, oluşturulan nesnenin prototipi olacaktır.

03:19.490 --> 03:22.140
Burada statik bir özelliğimiz olsaydı hedef,

03:22.140 --> 03:24.850
kurucu işlev durumuna atıfta bulunurdu.

03:24.850 --> 03:27.770
Bu yüzden burada herhangi biri diyeceğim çünkü nesnenin tam olarak

03:27.770 --> 03:30.140
hangi yapıya sahip olacağını bilmiyorum.

03:30.140 --> 03:35.140
Aldığımız ikinci argüman, basitçe özellik adıdır.

03:35.290 --> 03:37.682
Burada bir dize olabilir, elbette

03:37.682 --> 03:40.400
bir sembol de olabilir.

03:40.400 --> 03:43.470
Mülk tanımlayıcısı olarak ne kullanacağımızı bilmiyoruz.

03:43.470 --> 03:48.037
Ve sonra burada özellik dekoratörünü günlüğe kaydedeceğim, böylece

03:49.130 --> 03:51.120
bunun ne zaman çalıştığını görebiliriz

03:51.120 --> 03:55.980
ve bir konsol istiyorum. günlük hedefi ve ayrıca özellik adı.

03:55.980 --> 03:57.780
Böylece bu iki değerin içinde ne olduğunu görebiliriz.

03:57.780 --> 04:01.280
Bununla birlikte, hatasız derlenecek şekilde kaydedersek

04:01.280 --> 04:03.080
ve sunucumuza gidersek, özellik

04:03.080 --> 04:06.871
dekoratörünün oraya yazdırıldığını görürüz.

04:06.871 --> 04:08.630
Ve elde ettiğimiz çıktı budur.

04:08.630 --> 04:13.220
Burada nesnemizin prototipini görüyoruz çünkü burada

04:13.220 --> 04:15.850
unvan ve fiyatı görmüyoruz.

04:15.850 --> 04:18.160
Ancak get price with tax ve gerçekten de metotların

04:18.160 --> 04:19.770
bir nesnenin prototipine kaydedildiğini

04:19.770 --> 04:21.900
görüyoruz.

04:21.900 --> 04:24.240
Bu, nesnemizin prototipidir ve burada

04:24.240 --> 04:26.640
sağ tarafta başlığı görüyoruz, bu da üzerinde

04:26.640 --> 04:28.943
çalıştığımız özellik adıdır.

04:29.800 --> 04:33.770
Şimdi bu kaydedici tam olarak ne zaman çalışıyor?

04:33.770 --> 04:37.880
Sizin de anlayabileceğiniz gibi, hiçbir ürünü örneklemediğim

04:37.880 --> 04:41.670
için, temel olarak sınıf tanımınız JavaScript tarafından

04:41.670 --> 04:43.980
kaydedildiğinde çalışır.

04:43.980 --> 04:47.660
Dolayısıyla, bu özelliği temel olarak JavaScript'e, buradaki sınıfınızın

04:47.660 --> 04:49.140
bir parçası olarak, bu kurucu

04:49.140 --> 04:50.960
işlevin bir parçası olarak tanımladığınızda

04:50.960 --> 04:52.970
yürütülür.

04:52.970 --> 04:54.610
Sonunda burada yaratılan.

04:54.610 --> 04:58.053
Bu, bu özellik dekoratörünün yürütüldüğü zamandır.
