WEBVTT

00:02.220 --> 00:03.053
Instructor: Ahora

00:03.053 --> 00:04.883
si te mueves, tenemos más opciones, noUnusedLocals,

00:04.883 --> 00:07.920
noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Esto le ayuda con la calidad del código, básicamente.

00:10.470 --> 00:13.110
TypeScript se quejará si tiene ciertas

00:13.110 --> 00:15.930
variables no utilizadas, etc.

00:15.930 --> 00:20.930
Así que si activamos estas tres opciones, por ejemplo, esta opción te ayuda con

00:21.711 --> 00:24.230
las sentencias Switch, donde podrías olvidar

00:24.230 --> 00:26.270
la palabra clave break.

00:26.270 --> 00:28.880
Pero si activamos estas tres opciones, de lo

00:28.880 --> 00:31.760
que se quejará TypeScript es, por ejemplo, si tenías

00:31.760 --> 00:33.600
una variable de nombre de usuario

00:33.600 --> 00:36.730
aquí, localmente en esta función, y no la usas.

00:36.730 --> 00:39.490
Verás, esto tiene líneas amarillas garabateadas

00:39.490 --> 00:41.500
porque no es un error, en realidad.

00:41.500 --> 00:43.179
Es más bien una advertencia o una pista.

00:43.179 --> 00:45.643
Así que si compilo aquí, verás ahora, sin embargo,

00:47.750 --> 00:49.500
obtengo un error porque TypeScript

00:49.500 --> 00:51.900
sólo conoce los errores.

00:51.900 --> 00:54.140
Y ahí vemos que el nombre de usuario está

00:54.140 --> 00:57.080
declarado, pero su valor nunca se lee porque nos aseguramos

00:57.080 --> 01:00.550
de que no queremos variables locales sin usar.

01:00.550 --> 01:02.483
Las variables globales no utilizadas,

01:03.440 --> 01:06.340
así que si tuviera algo como appId aquí, están permitidas

01:06.340 --> 01:09.130
porque TypeScript no puede saber si tal vez necesitas

01:09.130 --> 01:13.870
ese valor definido globalmente en otro archivo de script.

01:13.870 --> 01:14.980
Por lo tanto, esto está permitido,

01:14.980 --> 01:17.280
pero en una función en la que no hay otro lugar en el

01:17.280 --> 01:20.010
que se podría necesitar, TypeScript se quejará ahora si

01:20.010 --> 01:22.020
tiene código no utilizado.

01:22.020 --> 01:23.540
Y eso es generalmente una buena idea.

01:23.540 --> 01:26.021
Permite eliminar el código no utilizado.

01:26.021 --> 01:28.510
Lo mismo ocurre con los parámetros no utilizados.

01:28.510 --> 01:31.350
Si usted tomaría un H aquí donde uno, por supuesto,

01:31.350 --> 01:33.050
bind está roto ahora, pero incluso

01:33.050 --> 01:35.970
si pasamos esto en esto funciona, pero ahora, de nuevo,

01:35.970 --> 01:39.220
TypeScript y por lo tanto el ID nos dice que esto no se utiliza

01:39.220 --> 01:41.780
y, o bien esto, así que tal vez usted debe eliminar

01:41.780 --> 01:44.293
o empezar a usarlo.

01:45.238 --> 01:48.173
Así que eso es noUnusedParameters.

01:48.173 --> 01:51.365
Y noImplicitReturns significa que obtendremos

01:51.365 --> 01:55.620
un error si tenemos una función que a veces devuelve algo

01:55.620 --> 01:57.130
y a veces no.

01:57.130 --> 02:00.913
Digamos que tenemos otra función, add, donde obtenemos

02:01.912 --> 02:02.940
dos números.

02:02.940 --> 02:05.906
Número y n2 es un número.

02:05.906 --> 02:10.906
Y, por supuesto, podemos devolver n1 más n2.

02:14.030 --> 02:15.710
Pero digamos que, por alguna

02:15.710 --> 02:18.518
razón, estamos comprobando si n1 más n2 es mayor

02:18.518 --> 02:21.800
que cero, porque sólo queremos devolver si tenemos un

02:21.800 --> 02:23.700
resultado mayor que cero.

02:23.700 --> 02:25.040
Entonces queremos un valor devuelto.

02:25.040 --> 02:26.940
De lo contrario, no queremos devolver nada.

02:26.940 --> 02:28.170
No queremos un retorno.

02:28.170 --> 02:30.550
Bueno, entonces recibimos una advertencia debido a esa

02:30.550 --> 02:32.598
configuración extra con noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript detecta que no todas las ramas de esta función conducen a una declaración

02:36.401 --> 02:38.760
de retorno y, debido a nuestra configuración,

02:38.760 --> 02:40.650
eso no está permitido.

02:40.650 --> 02:44.150
Al menos tenemos que deliberadamente no devolver nada aquí añadiendo

02:44.150 --> 02:45.790
la palabra clave return.

02:45.790 --> 02:48.260
Aquí no se permite omitirlo.

02:48.260 --> 02:49.730
Está permitido si tienes una

02:49.730 --> 02:52.446
función que no devuelve nada, en ninguna rama, pero

02:52.446 --> 02:54.520
si tienes al menos un caso en el que tu función

02:54.520 --> 02:56.423
sí devuelve algo, entonces tienes que

02:56.423 --> 02:58.770
asegurarte de que devuelve algo en todos los

02:58.770 --> 02:59.933
casos.

03:01.830 --> 03:03.130
Y con esto, nos acercamos al final de este

03:03.130 --> 03:04.240
recorrido de configuración.

03:04.240 --> 03:06.526
Aquí podemos ignorar la Resolución del módulo.

03:06.526 --> 03:08.933
Todas estas opciones en realidad son bastante

03:08.933 --> 03:10.830
avanzadas, que no nos importan aquí,

03:10.830 --> 03:13.510
no te importan en muchos proyectos.

03:13.510 --> 03:16.600
Las opciones de los mapas de origen le permiten ajustar estos mapas

03:16.600 --> 03:18.180
de origen que hemos visto antes.

03:18.180 --> 03:21.440
Así que estos archivos de traducción de JavaScript a TypeScript.

03:21.440 --> 03:23.720
Normalmente la configuración por defecto debería estar

03:23.720 --> 03:26.000
bien aquí, así que si no sabes lo que estás cambiando y

03:26.000 --> 03:27.010
por qué lo estás haciendo,

03:27.010 --> 03:29.470
normalmente no necesitas cambiar nada aquí.

03:29.470 --> 03:31.512
Y con respecto a estas opciones experimentales,

03:31.512 --> 03:34.380
les echaré un vistazo, concretamente a experimentalDecorators,

03:34.380 --> 03:38.910
más adelante en el módulo de decoradores.

03:38.910 --> 03:41.810
Esto básicamente permite usar ciertas características

03:41.810 --> 03:45.060
en TypeScript que son realmente experimentales, donde

03:45.060 --> 03:48.271
no es seguro que terminen en JavaScript en algún momento

03:48.271 --> 03:50.270
en el futuro y donde todavía podrías

03:50.270 --> 03:52.940
querer trabajar con ellas.

03:52.940 --> 03:55.220
Entonces tienes que decirle explícitamente a TypeScript

03:55.220 --> 03:57.070
que quieres trabajar con estas características

03:57.070 --> 03:59.390
y puedes hacerlo con esa configuración.

03:59.390 --> 04:01.880
Pero, de nuevo, volveré sobre ello.

04:01.880 --> 04:04.170
Y por lo tanto ahora, caminamos a través de este archivo, un montón

04:04.170 --> 04:05.870
de opciones que puede establecer allí.

04:05.870 --> 04:08.222
Y a medida que TypeScript crece, normalmente

04:08.222 --> 04:10.612
también se añaden más y más opciones aquí, por

04:10.612 --> 04:13.837
lo que los documentos oficiales siempre son un gran lugar para

04:13.837 --> 04:16.160
profundizar y asegurarse de que no te pierdes

04:16.160 --> 04:18.210
una opción interesante que podría ayudarte

04:18.210 --> 04:20.343
en tu proyecto.
