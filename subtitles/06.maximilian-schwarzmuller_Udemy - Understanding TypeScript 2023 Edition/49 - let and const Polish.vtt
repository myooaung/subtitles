WEBVTT

00:02.090 --> 00:04.730
Instruktor: Zanim jednak zanurzymy się w jakiekolwiek funkcje, w załączniku

00:04.730 --> 00:07.002
do tego wykładu znajdziesz link do tej strony.

00:07.002 --> 00:11.350
Ta strona w zasadzie wymienia wszystkie mniej lub bardziej nowoczesne

00:11.350 --> 00:13.610
funkcje JavaScript, które przeglądarki

00:13.610 --> 00:16.770
wspierają te funkcje, a także które kompilatory

00:16.770 --> 00:19.700
wspierają te funkcje.

00:19.700 --> 00:23.150
I tam też znajdziesz TypeScript, TypeScript

00:23.150 --> 00:25.310
połączony z core-js, który jest

00:25.310 --> 00:27.210
dostawcą polyfill.

00:27.210 --> 00:28.820
Ale ogólnie opisuje to,

00:28.820 --> 00:32.070
co TypeScript jest w stanie skompilować.

00:32.070 --> 00:34.110
Teraz zawsze możesz użyć tego zasobu, jeśli

00:34.110 --> 00:35.990
szukasz konkretnej funkcji, takiej jak,

00:35.990 --> 00:37.960
powiedzmy, słowo kluczowe const, Gdzie chcesz

00:37.960 --> 00:40.860
wiedzieć, czy TypeScript działa z tym, czy nie.

00:40.860 --> 00:43.340
Następnie możesz zobaczyć, jak to działa z tym

00:43.340 --> 00:46.580
i jakie są ograniczenia, które przeglądarki to obsługują.

00:46.580 --> 00:48.250
To również, przy okazji, daje ci wskazówkę

00:48.250 --> 00:51.090
dotyczącą tego, jakie przeglądarki możesz chcieć kierować,

00:51.090 --> 00:53.967
w odniesieniu do celu TypeScript i tak dalej.

00:53.967 --> 00:55.260
Jest to więc świetny zasób,

00:55.260 --> 00:58.600
który pozwala na przełączanie się między różnymi iteracjami

00:58.600 --> 01:01.940
JavaScriptu, a także funkcjami, które każda iteracja wprowadziła

01:01.940 --> 01:04.220
i jak te funkcje są obsługiwane.

01:04.220 --> 01:06.140
Więc zdecydowanie użyj tego jako zasobu,

01:06.140 --> 01:08.800
aby dowiedzieć się, czego możesz użyć, co możesz skompilować

01:08.800 --> 01:11.060
i jakie cele możesz potrzebować.

01:11.060 --> 01:14.060
I od tego zacznijmy jeden z najważniejszych i najbardziej

01:14.060 --> 01:17.030
oczywistych, a także często używanych wstępów - Next-Gen

01:17.030 --> 01:19.260
JavaScript added.

01:19.260 --> 01:21.780
Przy okazji, z Next-Gen JavaScript,

01:21.780 --> 01:24.700
mam na myśli ES6 lub nowszy.

01:24.700 --> 01:27.860
I to jest niech lub const, o czym mówię.

01:27.860 --> 01:32.750
Pozwala na zdefiniowanie stałych lub zmiennych.

01:32.750 --> 01:35.350
Różnica polega na tym, że stałe, a więc zmienne

01:35.350 --> 01:38.730
definiowane za pomocą słowa kluczowego const nie mogą być

01:38.730 --> 01:39.910
zmieniane.

01:39.910 --> 01:42.410
Jeśli próbowałbyś przypisać tutaj nową wartość,

01:42.410 --> 01:44.270
nawet jeśli ma ona prawidłowy typ,

01:44.270 --> 01:47.220
otrzymasz błąd, ponieważ jest to stała.

01:47.220 --> 01:48.280
Teraz, to jest przy okazji

01:48.280 --> 01:50.200
błąd, który jest tworzony przez TypeScript.

01:50.200 --> 01:53.340
W Vanilla JavaScript, dostałbyś błąd przez przeglądarkę, gdy

01:53.340 --> 01:55.100
uruchomisz swój kod tutaj, i to jest

01:55.100 --> 01:57.280
idea stojąca za TypeScript, jak się dowiedziałeś,

01:57.280 --> 02:00.410
dostajemy błąd już podczas pisania kodu, ponieważ to oczywiście

02:00.410 --> 02:02.990
jest lepsze dla nas jako dewelopera.

02:02.990 --> 02:04.930
Dzięki temu możemy naprawić ten kod

02:04.930 --> 02:07.820
wcześniej, zanim przetestujemy go w konsoli.

02:07.820 --> 02:11.330
Więc dlatego tutaj, jeśli usuniemy to lub skomentujemy tę

02:11.330 --> 02:12.830
linię, teraz rekompiluje

02:12.830 --> 02:14.400
się i dlatego nie otrzymujemy

02:14.400 --> 02:17.130
błędu w przeglądarce, jak również.

02:17.130 --> 02:20.860
Tak więc, to jest const. Let jest zmienną, którą można zmienić,

02:20.860 --> 02:23.620
a więc oczywiście jest podobna do var.

02:23.620 --> 02:27.260
Var również nadal istnieje, ponieważ JavaScript działa tak,

02:27.260 --> 02:29.550
że funkcje nie są nagle zabrane, ponieważ

02:29.550 --> 02:33.460
wtedy starsze przeglądarki i ich skrypty mogą się zepsuć.

02:33.460 --> 02:35.160
Ale nie powinieneś już używać var.

02:35.160 --> 02:37.860
A dlaczego nie powinieneś już używać var?

02:37.860 --> 02:39.670
Chodzi mi o to, że ma sens, że mamy const,

02:39.670 --> 02:42.520
ponieważ to naprawdę dodaje nową funkcję, stałe.

02:42.520 --> 02:43.380
Ale po co pozwalać?

02:43.380 --> 02:45.380
Dlaczego wprowadzili tu nowe słowo kluczowe?

02:45.380 --> 02:47.223
Dlaczego nie trzymali się var?

02:48.280 --> 02:51.460
Let i const mają jedną ważną różnicę w stosunku do var.

02:51.460 --> 02:53.300
Cóż, oczywistą różnicą dla const jest to,

02:53.300 --> 02:55.240
że wartość nie może być zmieniona, ale dla

02:55.240 --> 02:57.040
let, otrzymujemy również różnicę.

02:57.040 --> 03:00.930
I to jest zakres, w którym ta zmienna jest dostępna.

03:00.930 --> 03:04.363
Teraz powinieneś znać tę koncepcję zakresów w JavaScript.

03:05.609 --> 03:09.260
A z var masz zakres globalny i zakres funkcji.

03:09.260 --> 03:10.700
Oznacza to, że zmienne, które

03:10.700 --> 03:12.550
definiujesz poza funkcjami, są

03:12.550 --> 03:15.340
dostępne wszędzie w twoich skryptach.

03:15.340 --> 03:17.410
Zmienne zdefiniowane wewnątrz funkcji

03:17.410 --> 03:19.370
są dostępne tylko w tej funkcji.

03:19.370 --> 03:22.610
Na przykład tutaj. Gdybym miał funkcję

03:22.610 --> 03:27.610
dodaj, i tam może dostać dwie liczby, a i b.

03:27.670 --> 03:29.750
Następnie możemy dodać tam zmienną

03:29.750 --> 03:32.280
o nazwie var result, powiedzmy, i ustawiamy

03:32.280 --> 03:34.730
result = a + b then, a następnie zwracamy result,

03:34.730 --> 03:36.230
i oczywiście mogliśmy napisać

03:36.230 --> 03:38.430
to w krótszy sposób, ale chcę pokazać,

03:38.430 --> 03:40.570
co robi var.

03:40.570 --> 03:41.860
I to byłoby w porządku.

03:41.860 --> 03:43.012
A wynik byłby dostępny tylko

03:43.012 --> 03:44.188
wewnątrz tej funkcji.

03:44.188 --> 03:47.723
Jeśli spróbuję konsoli log wynik tutaj, że nie powiedzie

03:47.723 --> 03:49.470
się, ponieważ jest dostępny

03:49.470 --> 03:52.190
tylko w zakresie tej funkcji.

03:52.190 --> 03:53.970
Jeśli zdefiniuję go poza portem var wszystko

03:53.970 --> 03:56.610
działa, ponieważ teraz jest dostępny globalnie, dlatego tutaj

03:56.610 --> 03:58.180
mogę uzyskać do niego dostęp.

03:58.180 --> 04:00.220
A także sposób, w jaki działa JavaScript,

04:00.220 --> 04:03.580
możesz uzyskać dostęp do zmiennych na wyższym poziomie.

04:03.580 --> 04:05.210
Tak więc wewnątrz funkcji możesz

04:05.210 --> 04:08.260
pracować ze zmiennymi o zakresie do tej funkcji, ale wszystkie

04:08.260 --> 04:11.100
zmienne mające wyższy zakres, jak globalny zakres

04:11.100 --> 04:12.563
tutaj.

04:13.580 --> 04:14.980
Więc, to jest var.

04:14.980 --> 04:19.180
Teraz dla let, zachowanie jest ogólnie takie samo.

04:19.180 --> 04:21.580
To działa i to działa.

04:21.580 --> 04:23.800
Czyli generalnie to samo dla niech.

04:23.800 --> 04:27.180
Ale ważną różnicą jest to, że dla var, naprawdę

04:27.180 --> 04:30.860
masz tylko zakres globalny i funkcje.

04:30.860 --> 04:32.460
A co z oświadczeniami if?

04:32.460 --> 04:36.720
Jeśli sprawdzimy tutaj wiek > 20 lat, a następnie w tym miejscu

04:36.720 --> 04:38.889
stworzymy zmienną, isOld, i

04:38.889 --> 04:41.190
ustawimy to na true, to jeśli konsola

04:41.190 --> 04:46.270
zaloguje isOld tutaj dostaniemy błąd w TypeScript, ale właściwie

04:46.270 --> 04:50.090
nie dostalibyśmy go w JavaScript.

04:50.090 --> 04:53.620
Ten kod tutaj, jeśli złapiesz go tylko po to, aby zobaczyć, że działa, i przenieść

04:53.620 --> 04:56.280
się do narzędzi deweloperskich JavaScript tam w konsoli,

04:56.280 --> 04:57.190
a my wklejamy go tam

04:57.190 --> 04:59.120
i nacisnąć enter, widzisz true jest coraz

04:59.120 --> 05:00.970
drukowane tutaj.

05:01.830 --> 05:02.960
I rzeczywiście, jeśli spróbujesz

05:02.960 --> 05:05.040
uzyskać dostęp do isOld, otrzymasz true.

05:05.040 --> 05:08.380
Tak więc, ta zmienna isOld, jest zarejestrowana globalnie,

05:08.380 --> 05:10.530
a nie tylko wewnątrz instrukcji if.

05:10.530 --> 05:11.700
Ponieważ z var, JavaScript

05:11.700 --> 05:13.080
nie zna innych zakresów

05:13.080 --> 05:15.860
niż funkcje i globalne.

05:15.860 --> 05:17.400
I to się zmienia wraz z niech.

05:17.400 --> 05:19.690
Teraz, jak powiedziałem, TypeScript narzeka mimo wszystko,

05:19.690 --> 05:21.600
ponieważ nie jest to dobry kod do napisania, ale technicznie

05:21.600 --> 05:23.170
rzecz biorąc, działałby.

05:23.170 --> 05:25.100
Wraz z pozwoleniem, to się zmienia.

05:25.100 --> 05:26.350
Teraz z let, to naprawdę

05:26.350 --> 05:29.880
jest dostępne tylko wewnątrz tych nawiasów klamrowych.

05:29.880 --> 05:32.300
Ponieważ let i const wprowadziły nowe pojęcie

05:32.300 --> 05:33.540
zwane zakresem blokowym,

05:33.540 --> 05:36.550
co oznacza, że zmienna lub stała jest zawsze dostępna w bloku,

05:36.550 --> 05:40.420
w którym ją definiujesz, lub w dowolnych niższych blokach.

05:40.420 --> 05:43.060
A blok jest w zasadzie zawsze snippetem otoczonym

05:43.060 --> 05:44.900
nawiasami klamrowymi, jak masz

05:44.900 --> 05:46.710
to dla instrukcji if, w pętli for,

05:46.710 --> 05:48.760
w funkcji, a nawet, to jest możliwe,

05:48.760 --> 05:50.590
jeśli po prostu dodasz nawiasy

05:50.590 --> 05:52.670
klamrowe, jak to.

05:52.670 --> 05:54.230
Każda zmienna zdefiniowana w

05:54.230 --> 05:56.760
tym miejscu byłaby dostępna tylko w tym bloku.

05:56.760 --> 05:57.700
I to jest dobra rzecz,

05:57.700 --> 06:00.000
ponieważ zmusza cię do pisania czystszego

06:00.000 --> 06:02.470
kodu i unikania sytuacji takich jak ta.

06:02.470 --> 06:03.640
Więc po prostu, aby zaoferować

06:03.640 --> 06:05.530
dowód, że istnieje różnica w przeglądarce, jeśli

06:05.530 --> 06:09.750
skopiuję ten kod za pomocą let, i przeładuję moją stronę tutaj, a teraz wprowadzę to tutaj, widzisz,

06:09.750 --> 06:14.706
że dostaję błąd, że isOld nie jest zdefiniowany.

06:14.706 --> 06:14.706
Wcześniej nie dostaliśmy błędu.

06:14.706 --> 06:19.706
Rzeczywiście, jeśli próbowałem wyprowadzić isOld, otrzymuję ten błąd ponownie.

06:20.070 --> 06:21.060
Więc to jest ta różnica.

06:21.060 --> 06:23.370
I dlatego let i const jest lepszy, nie tylko dlatego,

06:23.370 --> 06:25.740
że otrzymujemy tę stałą funkcję, ale także dlatego,

06:25.740 --> 06:29.150
że jesteśmy zmuszeni do pisania czystszego kodu.

06:29.150 --> 06:30.130
Pozwólcie więc, że skomentuję

06:30.130 --> 06:31.230
to, by znów działało.
