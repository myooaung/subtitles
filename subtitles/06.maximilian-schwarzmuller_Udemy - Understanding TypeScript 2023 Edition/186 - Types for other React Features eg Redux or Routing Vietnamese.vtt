WEBVTT

00:02.100 --> 00:04.390
Giảng viên: Tất nhiên, bây giờ, trong các ứng

00:04.390 --> 00:08.640
dụng React lớn hơn, bạn làm việc với nhiều thứ hơn là chỉ useRef và useState.

00:08.640 --> 00:10.950
Để hiểu cách bạn sử dụng TypeScript ở đó, thực

00:10.950 --> 00:13.460
sự luôn hữu ích khi chỉ cần di chuột qua các chức

00:13.460 --> 00:15.180
năng bạn đang gọi, vì vậy các hook

00:15.180 --> 00:17.090
khác mà bạn đang làm việc cùng.

00:17.090 --> 00:20.010
Ví dụ: nếu bạn cần công cụ useEffect ở đây,

00:20.010 --> 00:22.660
trong thành phần NewTodo, vì bất kỳ lý

00:22.660 --> 00:26.330
do gì, thì bạn có thể gọi nó và chỉ cần di chuột qua nó sau

00:26.330 --> 00:29.010
đó, để hiểu loại nào nó hoạt động.

00:29.010 --> 00:30.960
Ví dụ: đối số đầu tiên là EffectCallback,

00:30.960 --> 00:33.720
là một chức năng đặc biệt, trong đó TypeScript sẽ

00:33.720 --> 00:37.100
cảnh báo bạn nếu bạn thiết lập nó không chính xác, rằng đối số

00:37.100 --> 00:38.610
thứ hai là không có gì hoặc là

00:38.610 --> 00:41.480
một mảng của bất kỳ thứ gì, đại loại như vậy, điều này

00:41.480 --> 00:42.997
sẽ luôn hữu ích bạn, bạn cũng

00:42.997 --> 00:45.930
sẽ biết rằng useEffect không trả về bất kỳ thứ gì, ví dụ,

00:45.930 --> 00:49.200
và trên useState, nơi tôi đã đề cập rằng bạn luôn nhận về một

00:49.200 --> 00:52.410
mảng có chính xác hai phần tử, bạn cũng thấy rằng ở đây, useState

00:52.410 --> 00:56.310
trả về một mảng, đó là những gì chúng ta thấy ở đây, mở và đóng khung, trong

00:56.310 --> 00:59.140
đó phần tử đầu tiên thuộc loại chung của bạn, vì vậy danh

00:59.140 --> 01:01.750
sách Todos, vì đó là ảnh chụp nhanh trạng thái của

01:01.750 --> 01:08.600
bạn, phần tử thứ hai là React.

01:08.600 --> 01:08.600
Chức

01:08.600 --> 01:11.370
năng điều phối cuối cùng ở đây, đó là những gì đang xảy ra ở đây.

01:11.370 --> 01:12.690
Vì vậy, điều đó có thể hữu ích.

01:12.690 --> 01:15.490
Có thể bạn cũng đang làm việc với Redux.

01:15.490 --> 01:19.660
Chà, rất may, nếu bạn đi sâu vào tài liệu của họ, bạn cũng

01:19.660 --> 01:21.360
sẽ tìm thấy hướng dẫn về

01:21.360 --> 01:24.530
cách sử dụng Redux với TypeScript.

01:24.530 --> 01:27.430
Tại đây, bên dưới Công thức bạn tìm thấy Cách sử dụng với

01:27.430 --> 01:30.710
TypeScript và ở đó, bạn có thể tìm hiểu cách bạn có thể thêm các

01:30.710 --> 01:33.270
loại vào hành động của mình, vào bộ giảm tốc và quản

01:33.270 --> 01:35.540
lý trạng thái của bạn bằng Redux.

01:35.540 --> 01:38.650
Nó thực sự đơn giản, không phức tạp chút nào

01:38.650 --> 01:41.520
và bổ sung rất nhiều loại an toàn ở đó.

01:41.520 --> 01:43.230
Có thể bạn cũng đang

01:43.230 --> 01:47.110
sử dụng gói React Router, gói này ở đây.

01:47.110 --> 01:52.040
Ở đó, bạn không tìm thấy các ký hiệu TypeScript cụ thể ở đó, tất nhiên, bạn cũng

01:52.040 --> 01:54.020
có thể cài đặt ký hiệu này vào dự

01:54.020 --> 01:55.340
án của mình, với npm install

01:55.340 --> 01:58.770
dash dash save react dash router dash dom, đây là lệnh

01:58.770 --> 02:00.740
bạn thường sử dụng để cài đặt ký

02:00.740 --> 02:03.720
hiệu này gói vào dự án React của bạn.

02:03.720 --> 02:07.000
Vì vậy, điều này sẽ thêm gói react-router-dom.

02:07.000 --> 02:10.250
Nhưng gói này không có hướng dẫn loại đặc biệt nào trên trang

02:10.250 --> 02:12.430
của nó ở đây, bạn không tìm thấy bất kỳ thứ

02:12.430 --> 02:14.720
gì dành riêng cho TypeScript ở đây, ít nhất

02:14.720 --> 02:17.570
là tại thời điểm tôi đang ghi lại điều này.

02:17.570 --> 02:19.163
Tuy nhiên, tất nhiên chúng ta cũng

02:19.163 --> 02:21.250
có thể sử dụng điều này trong một dự án TypeScript

02:21.250 --> 02:23.920
và có thể nhận được hỗ trợ kiểu tốt ở đó.

02:23.920 --> 02:25.800
Bây giờ, khi nó được cài đặt, bạn

02:25.800 --> 02:29.360
sẽ nhận thấy rằng nếu tôi nhập từ react-router-dom, tôi thực

02:29.360 --> 02:31.880
sự không có hỗ trợ kiểu tuyệt vời ở đó.

02:31.880 --> 02:33.870
Ví dụ: nếu tôi cố gắng nhập thứ gì đó

02:33.870 --> 02:36.870
ở đây, tôi đã nhận được cảnh báo, rằng không thể tìm thấy

02:36.870 --> 02:39.210
khai báo cho mô-đun react-router-dom,

02:39.210 --> 02:42.730
vì vậy nó không tìm thấy bất kỳ thông tin loại nào ở đây.

02:42.730 --> 02:45.420
Để khắc phục điều đó, tất nhiên, chúng ta có thể làm điều

02:45.420 --> 02:48.450
gì đó mà chúng ta đã làm trước đây, npm cài đặt dấu gạch ngang dấu

02:48.450 --> 02:52.530
gạch ngang lưu dấu gạch ngang dev, tại các loại, dấu gạch chéo phản ứng dấu gạch ngang

02:52.530 --> 02:54.620
bộ định tuyến dấu gạch ngang dom, vì vậy chúng

02:54.620 --> 02:56.860
tôi hủy các loại tìm kiếm tại đây và chúng tôi hoạt

02:56.860 --> 02:59.097
động tốt trở lại, điều này là một mẹo mà bạn đã học

02:59.097 --> 03:02.010
ngay từ đầu khóa học, nhưng tất nhiên, bạn không cần phải quên

03:02.010 --> 03:03.920
nó, chỉ vì chúng tôi có một dự án mà rất nhiều

03:03.920 --> 03:06.790
thứ đã hoạt động với TypeScript ngay từ đầu.

03:06.790 --> 03:08.140
Sau đó, nếu chúng tôi thêm thứ

03:08.140 --> 03:10.810
gì đó không hoạt động với TypeScript, chẳng hạn như cái

03:10.810 --> 03:13.700
này, chúng tôi có thể thêm nó như thế này và bây giờ nó biết về

03:13.700 --> 03:15.380
Tuyến đường, nó cũng biết tất cả các

03:15.380 --> 03:17.270
tính năng khác từ gói này.

03:17.270 --> 03:21.070
Vì vậy, đây là cách dễ dàng để bạn có thể thêm hỗ trợ cho việc này.

03:21.070 --> 03:23.560
Và đó là cách bạn thường nên tiếp cận vấn đề này,

03:23.560 --> 03:26.010
hãy xem các tài liệu chính thức, kiểm tra xem

03:26.010 --> 03:29.030
bạn có thấy hướng dẫn về cách sử dụng TypeScript ở đó không,

03:29.030 --> 03:31.590
nếu không, hãy cài đặt nó và xem liệu nó có hỗ trợ

03:31.590 --> 03:33.720
kiểu tích hợp hay không, để ít nhất bạn

03:33.720 --> 03:37.350
có được hỗ trợ biên dịch và tự động hoàn thành tốt và nếu điều đó cũng

03:37.350 --> 03:39.090
không tồn tại, hãy cài đặt gói loại,

03:39.090 --> 03:42.080
như chúng tôi đã làm ở đây.

03:42.080 --> 03:43.980
Và đó thực sự là dành cho mô-đun này,

03:43.980 --> 03:46.410
và đây là cách bạn có thể sử dụng TypeScript cũng

03:46.410 --> 03:49.920
như tất cả các tính năng tuyệt vời của nó trong ứng dụng React, và tất

03:49.920 --> 03:52.450
nhiên, mọi thứ bạn học được từ khóa học này cũng

03:52.450 --> 03:54.370
áp dụng cho ứng dụng React.

03:54.370 --> 03:56.380
Bạn có thể sử dụng tất cả các tính năng của TypeScript

03:56.380 --> 03:59.130
mà bạn đã học được từ khóa học này, trong một dự án React.
