WEBVTT

00:02.350 --> 00:04.170
Instruktor: Czym więc jest TypeScript?

00:04.170 --> 00:06.860
Na czym to polega, dlaczego mielibyśmy z tego korzystać?

00:06.860 --> 00:10.820
TypeScript jest supersetem JavaScript.

00:10.820 --> 00:12.190
Co to oznacza?

00:12.190 --> 00:14.250
Oznacza to, że TypeScript jest w końcu

00:14.250 --> 00:16.370
językiem, językiem programowania,

00:16.370 --> 00:18.710
zbudowanym na JavaScript.

00:18.710 --> 00:20.940
Nie jest to zupełnie nowy język,

00:20.940 --> 00:23.980
zamiast tego bierze język JavaScript

00:23.980 --> 00:27.450
i dodaje do niego nowe funkcje i zalety.

00:27.450 --> 00:31.720
Można powiedzieć, że ułatwia pisanie kodu JavaScript i zwiększa jego

00:31.720 --> 00:32.840
możliwości.

00:32.840 --> 00:35.624
Ale, mamy jedną ogromną wadę.

00:35.624 --> 00:39.786
TypeScript nie może być wykonywany przez środowiska JavaScript,

00:39.786 --> 00:41.760
takie jak przeglądarka.

00:41.760 --> 00:44.270
Przeglądarki nie mogą wykonywać TypeScript,

00:44.270 --> 00:48.486
a na przykład Node. js również nie może wykonać TypeScript,

00:48.486 --> 00:52.250
więc środowiska, w których możemy wykonać JavaScript, nie obsługują

00:52.250 --> 00:54.080
TypeScript.

00:54.080 --> 00:56.140
Jaka jest zatem idea TypeScript?

00:56.140 --> 01:00.760
To lepsza wersja JavaScriptu i nie możemy jej używać?

01:00.760 --> 01:02.130
No, nie całkiem.

01:02.130 --> 01:06.050
TypeScript to język programowania, ale to także narzędzie.

01:06.050 --> 01:10.049
Jest to potężny kompilator, który uruchamiasz nad swoim

01:10.049 --> 01:14.410
kodem, aby skompilować swój kod typescript do JavaScript.

01:14.410 --> 01:16.540
Tak więc to, co otrzymujesz jako wynik

01:16.540 --> 01:20.260
podczas pisania kodu w TypeScript, to JavaScript.

01:20.260 --> 01:22.870
Ale nie napisałeś tego kodu JavaScript,

01:22.870 --> 01:24.900
napisałeś kod TypeScript ze wszystkimi

01:24.900 --> 01:27.480
nowymi funkcjami i wszystkimi zaletami,

01:27.480 --> 01:30.670
a otrzymasz normalny kod JavaScript.

01:30.670 --> 01:33.810
Cóż, to oczywiście rodzi jedno ważne pytanie,

01:33.810 --> 01:36.710
jak TypeScript może dodać nowe funkcje, jeśli

01:36.710 --> 01:40.630
to, co otrzymujesz w końcu, to zwykły JavaScript?

01:40.630 --> 01:43.460
A odpowiedź brzmi: kompilator TypeScript

01:43.460 --> 01:47.710
kompiluje te nowe funkcje do obejść JavaScript, więc w końcu może

01:47.710 --> 01:50.670
dać ci ładniejszą składnię, łatwiejszy sposób

01:50.670 --> 01:52.890
robienia czegoś, a następnie skompiluje

01:52.890 --> 01:56.571
ten ładniejszy, łatwiejszy sposób do bardziej złożonego

01:56.571 --> 01:59.820
fragmentu JavaScript, który musiałbyś napisać

01:59.820 --> 02:02.060
inaczej.

02:02.060 --> 02:03.230
Więc to nie jest magia,

02:03.230 --> 02:06.790
oczywiście nie może dodać tego, co nie jest w ogóle możliwe

02:06.790 --> 02:08.610
w języku JavaScript, ale może

02:08.610 --> 02:11.150
dodać nowe funkcje, które po prostu są łatwiejsze

02:11.150 --> 02:15.020
w użyciu, ładniejsza składnia, rzeczy tego typu.

02:15.020 --> 02:17.470
Dodatkowo TypeScript robi oczywiście

02:17.470 --> 02:20.900
jedną ważną rzecz, którą sugeruje już sama nazwa.

02:20.900 --> 02:22.740
Dodaje typy, dodaje cechę

02:22.740 --> 02:26.230
do języka JavaScript, której przyjrzymy się za chwilę,

02:26.230 --> 02:28.750
co w rzeczywistości da ci jako deweloperowi

02:28.750 --> 02:31.541
możliwość zidentyfikowania błędów w twoim

02:31.541 --> 02:35.070
kodzie wcześniej, zanim twój skrypt zostanie uruchomiony

02:35.070 --> 02:41.350
i błąd pojawi się w czasie rzeczywistym w przeglądarce.

02:41.350 --> 02:44.320
Tak więc, nie tylko daje ci kilka nowych funkcji

02:44.320 --> 02:46.690
i ładniejsze sposoby robienia czegoś,

02:46.690 --> 02:50.240
ale także daje ci dodatkowe sprawdzanie błędów, gdzie błędy,

02:50.240 --> 02:54.153
które w przeciwnym razie dostałyby się jako błędy runtime, mogą

02:54.153 --> 02:58.370
być złapane i naprawione we wczesnym etapie rozwoju.

02:58.370 --> 03:00.600
Dlaczego więc mielibyśmy używać TypeScript?

03:00.600 --> 03:02.570
Rozważmy ten przykład, dość

03:02.570 --> 03:06.710
prostą funkcję JavaScript, która dodaje dwie liczby.

03:06.710 --> 03:08.760
Teraz, kiedy go wywołuję, proszę zauważyć,

03:08.760 --> 03:11.810
że przekazuję dwa ciągi zamiast dwóch liczb, a ja pokażę

03:11.810 --> 03:14.810
ci prawdziwy przykład, w którym coś takiego może się

03:14.810 --> 03:18.090
zdarzyć realistycznie w ciągu sekundy.

03:18.090 --> 03:20.270
Tak więc, wywołujemy tę funkcję z dwoma ciągami

03:20.270 --> 03:22.519
i w rezultacie to, co faktycznie otrzymałbyś

03:22.519 --> 03:25.260
tutaj, jest prawdopodobnie niepożądanym zachowaniem,

03:25.260 --> 03:27.240
ponieważ jeśli dodasz dwa ciągi, JavaScript

03:27.240 --> 03:29.596
będzie konkatenował ciągi zamiast wykonywać

03:29.596 --> 03:32.780
obliczenia matematyczne tutaj.

03:32.780 --> 03:36.310
Zatem wynikiem nie byłoby pięć, ale dwadzieścia trzy,

03:36.310 --> 03:38.980
czyli konkatenowany ciąg dwóch liczb.

03:38.980 --> 03:41.690
Jest to błąd, który możesz mieć w JavaScript,

03:41.690 --> 03:43.530
nie jest to błąd techniczny,

03:43.530 --> 03:46.720
prawdopodobnie nie dostaniesz błędu runtime,

03:46.720 --> 03:49.832
ale masz błąd logiczny w swoim kodzie.

03:49.832 --> 03:52.820
A to oczywiście może prowadzić do ogromnych problemów w aplikacjach

03:52.820 --> 03:55.870
internetowych, które piszesz za pomocą JavaScript.

03:55.870 --> 03:59.360
Teraz, oczywiście, w JavaScript mamy strategie łagodzenia, moglibyśmy

03:59.360 --> 04:02.541
dodać sprawdzenie if w funkcji, aby sprawdzić typy danych wejściowych

04:02.541 --> 04:05.440
w czasie wykonywania, moglibyśmy również zwalidować

04:05.440 --> 04:08.240
i sanityzować dane wejściowe użytkownika, i chociaż

04:08.240 --> 04:10.670
możemy chcieć zrobić to wszystko, byłoby również

04:10.670 --> 04:14.040
miło, gdybyśmy mogli złapać błędy takie jak ten podczas rozwoju

04:14.040 --> 04:15.840
już.

04:15.840 --> 04:19.220
I na szczęście jest to możliwe dzięki TypeScript, ponieważ

04:19.220 --> 04:21.810
deweloperzy mogą pisać tutaj niepoprawny kod

04:21.810 --> 04:23.970
i wprowadzać takie boty w JavaScript,

04:23.970 --> 04:26.160
a dzięki TypeScript mamy narzędzie, które

04:26.160 --> 04:30.060
pomaga nam pisać lepszy kod i unikać takich problemów.

04:30.060 --> 04:31.910
Przyjrzyjmy się więc temu bliżej.
