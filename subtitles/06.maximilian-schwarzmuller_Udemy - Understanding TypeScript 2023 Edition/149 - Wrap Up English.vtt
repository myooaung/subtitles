WEBVTT

1
00:00:02.350 --> 00:00:04.720
<v ->And that's it for modules.</v>

2
00:00:04.720 --> 00:00:08.850
Now using modules is a super useful, and important feature

3
00:00:08.850 --> 00:00:11.130
because it allows you to write more maintainable,

4
00:00:11.130 --> 00:00:14.550
and manageable code. Having it all in one file is a mess

5
00:00:14.550 --> 00:00:16.360
and really not an option

6
00:00:16.360 --> 00:00:19.360
for anything but really tiny projects.

7
00:00:19.360 --> 00:00:22.350
Using ever namespaces or ES modules

8
00:00:22.350 --> 00:00:24.710
is there for a way better alternative.

9
00:00:24.710 --> 00:00:27.620
Since it makes sure, that every file on its own

10
00:00:27.620 --> 00:00:30.780
is relatively small, and therefore stays manageable.

11
00:00:30.780 --> 00:00:33.470
And still, you end up with that entire,

12
00:00:33.470 --> 00:00:36.690
big application you want to have in the end.

13
00:00:36.690 --> 00:00:38.580
Now, when it comes to these two approaches,

14
00:00:38.580 --> 00:00:42.883
Namespaces and ES modules, the clear recommendation is

15
00:00:42.883 --> 00:00:46.520
ES modules, because you get that extra type safety,

16
00:00:46.520 --> 00:00:48.910
and you ensure that every file,

17
00:00:48.910 --> 00:00:52.210
has to clearly specify what it wants.

18
00:00:52.210 --> 00:00:54.270
With namespaces, it was enough

19
00:00:54.270 --> 00:00:56.280
if one file imported something,

20
00:00:56.280 --> 00:00:58.350
that another file also needs.

21
00:00:58.350 --> 00:00:59.970
The downs of this, if that one file,

22
00:00:59.970 --> 00:01:02.230
which imported the thing is removed

23
00:01:02.230 --> 00:01:05.640
that other file also breaks, without you noticing.

24
00:01:05.640 --> 00:01:08.774
At least, without you noticing before you run the code.

25
00:01:08.774 --> 00:01:11.340
So, therefore, use ES modules.

26
00:01:11.340 --> 00:01:14.250
Use namespaces in smaller projects,

27
00:01:14.250 --> 00:01:18.100
or if for some reason you can't use ES modules,

28
00:01:18.100 --> 00:01:19.970
And you can't use another bundler,

29
00:01:19.970 --> 00:01:24.290
which would translate such modules. To non module code,

30
00:01:24.290 --> 00:01:26.360
which all the works and all the browsers.

31
00:01:26.360 --> 00:01:30.070
But other than that use really use modules, ES modules.

32
00:01:30.070 --> 00:01:31.748
And what I just said is important.

33
00:01:31.748 --> 00:01:34.828
These modules here, right now the way we use them,

34
00:01:34.828 --> 00:01:37.620
only work in modern browsers.

35
00:01:37.620 --> 00:01:39.670
Because we rely on the browser,

36
00:01:39.670 --> 00:01:42.640
to basically import all these files. Right?

37
00:01:42.640 --> 00:01:44.675
Now, of course we want to build applications

38
00:01:44.675 --> 00:01:48.940
with typescript, that also run in all the browsers.

39
00:01:48.940 --> 00:01:52.090
Internet Explorer 9, for example.

40
00:01:52.090 --> 00:01:54.130
There this would not be supported.

41
00:01:54.130 --> 00:01:55.730
This Syntax, is not supported there.

42
00:01:55.730 --> 00:01:57.410
So, the app would not run there.

43
00:01:57.410 --> 00:01:59.160
We might also be using some other features

44
00:01:59.160 --> 00:02:01.280
that are not supported there, but mainly this here

45
00:02:01.280 --> 00:02:03.840
is not supported in all browsers.

46
00:02:03.840 --> 00:02:06.250
So, to make that work in all browsers,

47
00:02:06.250 --> 00:02:09.283
we can use a bundling tool. We can use Webpack for example.

48
00:02:09.283 --> 00:02:12.431
To bundle that together into one JavaScript file.

49
00:02:12.431 --> 00:02:15.810
So, that during development we have this multi file,

50
00:02:15.810 --> 00:02:19.060
strong typing experience, but when we ship our code

51
00:02:19.060 --> 00:02:21.310
we actually have one file only.

52
00:02:21.310 --> 00:02:23.600
And now were advantage of shipping one file

53
00:02:23.600 --> 00:02:25.676
instead of all these files we have here,

54
00:02:25.676 --> 00:02:28.177
is that we also insure that the browser

55
00:02:28.177 --> 00:02:31.181
doesn't have to download that many files.

56
00:02:31.181 --> 00:02:33.630
Because every file that has to be downloaded,

57
00:02:33.630 --> 00:02:37.010
is an extra roundtrip. In the network tab of the dev tools,

58
00:02:37.010 --> 00:02:38.510
you can actually see that.

59
00:02:38.510 --> 00:02:40.650
The area you see this waterfall chart,

60
00:02:40.650 --> 00:02:42.230
and you see this little white box

61
00:02:42.230 --> 00:02:44.520
at the beginning of ever block.

62
00:02:44.520 --> 00:02:46.380
This is basically the setup time

63
00:02:46.380 --> 00:02:48.506
it takes to setup the HDP request.

64
00:02:48.506 --> 00:02:51.807
So, even though the files we are downloading are very small

65
00:02:51.807 --> 00:02:54.700
as you can tell, this still takes some time

66
00:02:54.700 --> 00:02:56.900
because all the redundant extra setup,

67
00:02:56.900 --> 00:02:59.100
for every HDP request.

68
00:02:59.100 --> 00:03:02.330
So doing less requests is a good idea anyways,

69
00:03:02.330 --> 00:03:04.640
regardless of browser support.

70
00:03:04.640 --> 00:03:08.370
So, for these two reasons, browser support and less requests

71
00:03:08.370 --> 00:03:11.000
we'll have a look at bundling, with Webpack,

72
00:03:11.000 --> 00:03:12.453
in the next course section.

