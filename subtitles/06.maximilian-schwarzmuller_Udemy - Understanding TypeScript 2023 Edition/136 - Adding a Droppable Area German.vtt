WEBVTT

00:02.180 --> 00:04.910
Kursleiter: Visuell können wir zwar ziehen und ablegen,

00:04.910 --> 00:07.240
aber technisch gesehen hat unser Skript in JavaScript

00:07.240 --> 00:10.410
natürlich keine Ahnung, was da passiert.

00:10.410 --> 00:12.030
Aber für uns Menschen ist es natürlich

00:12.030 --> 00:14.810
klar, dass wir genau diesen Gegenstand hierher schleppen.

00:14.810 --> 00:16.300
Aber wenn wir einen Blick auf unseren

00:16.300 --> 00:20.320
Code werfen, woher soll JavaScript wissen, was wohin geschleppt wird?

00:20.320 --> 00:21.980
Wie würden wir unseren Status auf der Grundlage

00:21.980 --> 00:24.440
der uns derzeit vorliegenden Informationen aktualisieren?

00:24.440 --> 00:26.690
Das wäre nicht wirklich möglich.

00:26.690 --> 00:28.810
Damit das in JavaScript funktioniert, müssen

00:28.810 --> 00:30.840
wir auf die Klasse unseres verschiebbaren

00:30.840 --> 00:33.960
Elements, das Projektelement, zurückgreifen.

00:33.960 --> 00:36.710
Dort, im dragStartHandler, ist die Protokollierung

00:36.710 --> 00:38.250
des Ereignisses der Konsole nicht

00:38.250 --> 00:39.950
alles, was wir tun sollten.

00:39.950 --> 00:42.200
Eigentlich brauchen wir das gar nicht zu tun.

00:42.200 --> 00:45.070
Stattdessen verwenden wir hier unser Ereignisobjekt,

00:45.070 --> 00:48.210
das eine Eigenschaft zur Datenübertragung hat.

00:48.210 --> 00:50.440
Dies ist speziell für Drag-Events, dass Sie

00:50.440 --> 00:53.280
eine solche Datenübertragungseigenschaft haben.

00:53.280 --> 00:55.330
An diese Eigenschaft können Sie Daten

00:55.330 --> 00:57.530
an das Drag-Ereignis anhängen, die Sie

00:57.530 --> 00:59.520
später bei einem Drop extrahieren

00:59.520 --> 01:01.390
können. Der Browser speichert diese

01:01.390 --> 01:03.730
Daten in JavaScript hinter den Kulissen

01:03.730 --> 01:06.430
während des Drag-Vorgangs und stellt sicher,

01:06.430 --> 01:09.470
dass die Daten, die Sie beim Drop erhalten, dieselben

01:09.470 --> 01:12.020
sind, die Sie hier anhängen.

01:12.020 --> 01:15.520
Dazu können Sie setData bei der Datenübertragung aufrufen,

01:15.520 --> 01:18.910
aber die Datenübertragung könnte tatsächlich null sein.

01:18.910 --> 01:21.080
Wir müssen hier also ein Ausrufezeichen setzen, denn

01:21.080 --> 01:23.460
wir wissen natürlich, dass es hier nicht null sein wird.

01:23.460 --> 01:25.700
Sie werden sich vielleicht fragen, warum es nichtig sein kann?

01:25.700 --> 01:29.060
Nun, das Drag-Ereignis ist immer die gleiche Art von Ereignis,

01:29.060 --> 01:31.340
aber je nachdem, welcher Listener es auslöst

01:31.340 --> 01:34.190
oder auf welches Ereignis Sie genau hören, ist die

01:34.190 --> 01:37.520
Datenübertragung nicht unbedingt verfügbar.

01:37.520 --> 01:39.896
Nicht bei allen Ereignissen, die mit dem Ziehen zusammenhängen,

01:39.896 --> 01:42.640
erhalten Sie also ein Ereignisobjekt, das das Datenübertragungsobjekt

01:42.640 --> 01:44.073
enthält.

01:45.320 --> 01:46.620
Der dragStartHandler, der

01:46.620 --> 01:49.080
beim Start des Drag-Ereignisses ausgelöst wird,

01:49.080 --> 01:52.840
verfügt jedoch darüber, so dass wir hier setData sicher aufrufen können.

01:52.840 --> 01:56.330
Und jetzt nimmt setData hier zwei Argumente entgegen.

01:56.330 --> 01:59.900
Das erste Argument ist ein Bezeichner für das Format

01:59.900 --> 02:01.320
der Daten, und es stehen

02:01.320 --> 02:04.970
bestimmte mögliche Formate zur Verfügung.

02:04.970 --> 02:08.210
Im Anhang finden Sie einen ausführlichen Artikel über Drag &amp; Drop mit JavaScript,

02:08.210 --> 02:10.890
in dem Sie viel mehr darüber erfahren können.

02:10.890 --> 02:12.270
Mehr darüber erfahren Sie übrigens

02:12.270 --> 02:15.140
auch in meinem Kurs JavaScript Complete Guide.

02:15.140 --> 02:18.390
Hier brauchen wir das Format text/plain, was bedeutet,

02:18.390 --> 02:20.010
dass wir nur einige Daten

02:20.010 --> 02:24.190
im Klartext anhängen werden, die übertragen werden, und das ist

02:24.190 --> 02:25.430
wichtig.

02:25.430 --> 02:28.250
Wir werden unsere Objekte hier nicht anhängen, unser Projekt

02:28.250 --> 02:29.740
selbst, wir werden einfach weiter

02:29.740 --> 02:31.390
gefangen bleiben.

02:31.390 --> 02:34.340
Also nicht das komplette Projekt, das hier wiedergegeben werden kann.

02:34.340 --> 02:37.955
Stattdessen reicht es aus, die ID des Projekts

02:37.955 --> 02:41.645
anzuhängen, da wir so später das Projekt aus

02:41.645 --> 02:44.870
unserem Status abrufen können.

02:44.870 --> 02:47.320
Das Anbringen der ID ist also alles, was wir tun müssen.

02:47.320 --> 02:50.240
Wir wollen nur eine kleine Menge an Daten übertragen, damit wir

02:50.240 --> 02:52.053
auch etwas Speicherplatz sparen.

02:53.100 --> 02:56.300
Damit fügen wir nun Daten an das Drag-Ereignis an.

02:56.300 --> 02:58.330
Eine andere Sache, die ich tun möchte, ist,

02:58.330 --> 03:00.610
bei der Datenübertragung, wo wir wieder das Ausrufezeichen

03:00.610 --> 03:02.340
hinzufügen müssen, werde ich die Eigenschaft

03:02.340 --> 03:05.430
effectAllowed auf move setzen.

03:05.430 --> 03:08.610
Dies steuert im Wesentlichen, wie der Cursor aussehen

03:08.610 --> 03:12.440
wird, und teilt dem Browser ein wenig über unsere Absicht mit, dass

03:12.440 --> 03:15.200
wir planen, ein Element von A nach B zu bewegen.

03:15.200 --> 03:16.760
Eine Alternative wäre das Kopieren,

03:16.760 --> 03:19.230
bei dem man dann einen anderen Cursor erhält, der

03:19.230 --> 03:20.820
dem Benutzer anzeigt, dass man

03:20.820 --> 03:23.120
kopiert und nicht verschiebt, aber hier wollen

03:23.120 --> 03:25.140
wir das Element verschieben, was bedeutet,

03:25.140 --> 03:26.580
dass wir es bei einem Drop an

03:26.580 --> 03:28.810
seinem ursprünglichen Platz entfernen und

03:28.810 --> 03:31.360
am neuen Platz hinzufügen.

03:31.360 --> 03:34.940
Jetzt sind die Daten hier angehängt, und das ist Schritt Nummer eins.

03:34.940 --> 03:36.870
Kehren wir nun zu dem Ort zurück, an dem

03:36.870 --> 03:38.470
die Übergabe stattfinden soll,

03:38.470 --> 03:40.360
nämlich in der Projektliste.

03:40.360 --> 03:43.400
Dort beginnt er im dragLeaveHandler.

03:43.400 --> 03:46.370
In dieser Anwendung, in diesem Projekt hier,

03:46.370 --> 03:49.200
gibt es nur einen Drag&amp;Drop-Vorgang, und

03:49.200 --> 03:51.500
das ist unser Projekt hier.

03:51.500 --> 03:54.970
In größeren Anwendungen haben Sie vielleicht verschiedene Teile

03:54.970 --> 03:57.220
auf der Seite, die gezogen und abgelegt werden

03:57.220 --> 04:01.080
können, und Sie wollen nicht alles überall ablegen können.

04:01.080 --> 04:06.080
Deshalb möchte ich hier im dragOverHandler, der ausgelöst wird, wenn Sie mit

04:06.230 --> 04:09.580
einem an der Maus befestigten Element in einen ziehbaren

04:09.580 --> 04:11.860
Bereich eintreten, prüfen, ob ein

04:11.860 --> 04:14.970
Ziehen hier wirklich erlaubt ist.

04:14.970 --> 04:19.546
Dazu werde ich prüfen, ob event. dataTransfer, hier ist es auch

04:19.546 --> 04:21.060
verfügbar, so dass,

04:21.060 --> 04:22.950
wenn das verfügbar ist,

04:22.950 --> 04:25.500
und dann, wenn es verfügbar ist,

04:25.500 --> 04:29.140
die Datenübertragungstypen Eigenschaft hat

04:29.140 --> 04:34.140
einen ersten Wert, der gleich text/plain ist.

04:34.300 --> 04:39.280
Das bedeutet einfach, dass die Daten, die an unser Ziehereignis

04:39.280 --> 04:42.390
angehängt sind, dieses Format haben.

04:42.390 --> 04:43.360
Das ist es natürlich,

04:43.360 --> 04:45.030
denn das ist das Format, das wir hier

04:45.030 --> 04:47.320
im dragStartHandler eingestellt haben.

04:47.320 --> 04:50.490
In diesem Fall wäre es zum Beispiel nicht möglich, Bilder oder Ähnliches

04:50.490 --> 04:51.380
abzulegen, die ein

04:51.380 --> 04:53.180
anderes Datenformat haben.

04:53.180 --> 04:56.173
Ich habe nur das Fallenlassen von einfachem Text erlaubt.

04:57.170 --> 04:59.450
Natürlich muss ich jetzt auch wieder den Unterstrich

04:59.450 --> 05:01.020
durch ein Ereignis ersetzen, weil

05:01.020 --> 05:03.280
ich mich hier auf ihn beziehe.

05:03.280 --> 05:07.150
Wenn das der Fall ist, dann weiß ich, dass ich eine Übergabe zulassen will, und ich

05:07.150 --> 05:09.070
werde den Hintergrund aktualisieren.

05:09.070 --> 05:11.620
Und noch eine wichtige Sache, die wir tun müssen: Sie müssen die

05:11.620 --> 05:13.960
Veranstaltung anrufen. preventDefault.

05:13.960 --> 05:15.950
Aber warum müssen wir das anrufen?

05:15.950 --> 05:18.860
Denn in JavaScript funktioniert ein Drag and

05:18.860 --> 05:22.480
Drop so, dass ein Drop eigentlich nur erlaubt ist, also

05:22.480 --> 05:26.119
wird das Drop-Ereignis nur dann auf einem Element ausgelöst,

05:26.119 --> 05:29.649
wenn im Drag overHandler auf demselben Element preventDefault

05:29.649 --> 05:32.750
aufgerufen wurde.

05:32.750 --> 05:35.360
Sie können sich das folgendermaßen vorstellen.

05:35.360 --> 05:38.870
Die Standardeinstellung für JavaScript Drag-and-Drop-Ereignisse

05:38.870 --> 05:41.350
ist es, das Fallenlassen nicht zuzulassen. Sie

05:41.350 --> 05:44.889
müssen also die Standardeinstellung im Drag-overHandler verhindern,

05:44.889 --> 05:48.120
um JavaScript und dem Browser mitzuteilen, dass Sie für dieses

05:48.120 --> 05:49.670
Element, in diesem Fall für diesen

05:49.670 --> 05:52.980
Abschnitt für diese projektlose Klasse, ein Fallenlassen zulassen

05:52.980 --> 05:54.870
wollen.

05:54.870 --> 05:57.920
Also nur, wenn Sie dies tun, ist ein dragOverHandler das Drop-Ereignis

05:57.920 --> 06:00.020
tatsächlich auslösen, wenn der Benutzer

06:00.020 --> 06:01.220
loslassen.

06:01.220 --> 06:02.910
Andernfalls, wenn der Benutzer loslässt,

06:02.910 --> 06:05.060
wird das Drop-Ereignis nicht ausgelöst.

06:05.060 --> 06:07.090
Damit wird der Drop-Handler

06:07.090 --> 06:08.960
dann natürlich ausgeführt,

06:08.960 --> 06:12.620
weil wir das jetzt zulassen.

06:12.620 --> 06:16.440
Hier im Drop-Handler können wir nun das Ereignis annehmen, und für den Moment

06:16.440 --> 06:20.610
lassen wir einfach die Konsole laufen. protokollieren Sie das Ereignis wie

06:20.610 --> 06:23.003
folgt, um zu sehen, ob dies funktioniert.

06:23.940 --> 06:28.100
Jetzt speichern wir alles, fügen ein neues Element

06:28.100 --> 06:30.220
hinzu und ziehen dies.

06:30.220 --> 06:33.430
Wenn ich es hier in den fertigen Projekten ablege, sehen Sie,

06:33.430 --> 06:36.490
dass das Ereignis "Ziehen" hier ausgelöst wird.

06:36.490 --> 06:39.360
Und das kommt aus Zeile 236, die in

06:39.360 --> 06:43.050
der Tat diese Zeile im Drop-Handler ist.

06:43.050 --> 06:45.950
Wenn wir nun das Drag-Ereignis hier im Browser untersuchen, sehen

06:45.950 --> 06:47.447
Sie, dass wir hier eine Reihe von Daten

06:47.447 --> 06:50.830
haben, und wir haben auch die Eigenschaft der Datenübertragung.

06:50.830 --> 06:52.920
Und dort sehen Sie den Effekt, den

06:52.920 --> 06:54.320
wir zugelassen haben,

06:54.320 --> 06:57.930
nämlich Move, und Sie werden dort auch nichts sehen.

06:57.930 --> 07:01.600
Nun, nur weil die Daten bereits gelöscht wurden, nachdem

07:01.600 --> 07:04.510
sie in die Konsole eingegeben worden waren.

07:04.510 --> 07:06.100
Und da wir hier das Objekt einfügen und

07:06.100 --> 07:08.160
Objekte Referenztypen sind, sehen wir den letzten

07:08.160 --> 07:10.830
Schnappschuss, bei dem die Daten verloren gegangen sind.

07:10.830 --> 07:13.360
Zu dem Zeitpunkt, zu dem wir dies aufgeben, werden

07:13.360 --> 07:16.910
wir in der Lage sein, Daten aus der Datenübertragung zu extrahieren.

07:16.910 --> 07:18.360
Und das kann ich Ihnen beweisen.

07:18.360 --> 07:20.960
Natürlich können wir einfach auf die Datenübertragung

07:20.960 --> 07:23.210
zugreifen, und dort gibt es eine getData-Methode,

07:23.210 --> 07:26.580
und jetzt wollen wir die Daten mit diesem text/plain-Format erhalten,

07:26.580 --> 07:29.560
und das sollte die Projekt-ID sein, die wir unserem Datenübertragungspaket

07:29.560 --> 07:34.560
auf dem Projektelement beigefügt haben.

07:35.060 --> 07:37.179
Wenn wir nun speichern und das

07:37.179 --> 07:39.690
Projekt erneut hinzufügen und dies

07:39.690 --> 07:41.050
hierher ziehen, sehen

07:41.050 --> 07:46.050
Sie, dass dies tatsächlich die ID dieses Projektelements ist.

07:46.600 --> 07:47.920
Wir können das sehen,

07:47.920 --> 07:50.880
wenn wir es inspizieren, weil wir es hier auch

07:50.880 --> 07:55.124
als ID hinzufügen, 0. 2167, sieht für mich wie diese ID aus.

07:55.124 --> 07:59.170
Wir haben also die ID erfolgreich übertragen.

07:59.170 --> 08:00.490
Jetzt sind wir fast am Ziel.

08:00.490 --> 08:04.100
Jetzt müssen wir nur noch unseren Status hinter den Kulissen aktualisieren

08:04.100 --> 08:06.163
und dann DUI neu aufbereiten.
