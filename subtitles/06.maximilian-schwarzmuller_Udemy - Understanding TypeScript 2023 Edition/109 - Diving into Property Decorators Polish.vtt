WEBVTT

00:02.250 --> 00:05.050
Instruktor: Teraz zanim zbadamy bardziej przydatne przypadki

00:05.050 --> 00:07.811
użycia lub scenariusze dla niektórych dekoratorów.

00:07.811 --> 00:10.700
Chcę pokrótce pokazać wszystkie inne miejsca, w których

00:10.700 --> 00:12.550
można dodać dekoratory.

00:12.550 --> 00:15.670
Cóż, oczywiście możemy dodawać dekoratory do klas, ale jest więcej

00:15.670 --> 00:17.731
miejsc, w których możemy je dodawać.

00:17.731 --> 00:20.750
W tym celu stworzę nową klasę, ponieważ potrzebujemy klasy dla

00:20.750 --> 00:22.460
każdego dekoratora, którego chcemy

00:22.460 --> 00:24.580
użyć, ale nie musimy dodawać wszystkich dekoratorów

00:24.580 --> 00:26.420
bezpośrednio do klasy.

00:26.420 --> 00:28.480
Powiedzmy, że mamy tutaj klasę

00:28.480 --> 00:31.523
produktu i w klasie produktu mamy tytuł

00:31.523 --> 00:34.540
może, który jest ciągiem znaków.

00:34.540 --> 00:37.070
I możemy przypisać tutaj wartość za pomocą konstruktora.

00:37.070 --> 00:39.600
Oczywiście zawsze mogliśmy użyć skrótu i zrobić to wszystko

00:39.600 --> 00:41.570
w jednym kroku w konstruktorze, tak jak nauczyłeś

00:41.570 --> 00:42.680
się wcześniej.

00:42.680 --> 00:44.451
Tutaj wybiorę dłuższą trasę.

00:44.451 --> 00:49.451
Możemy mieć tutaj metodę, uzyskać cenę z podatkiem.

00:50.150 --> 00:53.442
W tym celu oczekuję, że otrzymam stawkę podatkową, która jest liczbą

00:53.442 --> 00:57.150
i aby to działało, powinniśmy również przechowywać tutaj cenę.

00:57.150 --> 01:01.200
Właściwość Price, którą również otrzymujemy w ramach konstruktora.

01:01.200 --> 01:04.060
Znowu moglibyśmy użyć tutaj skrótu, ale zrobię

01:04.060 --> 01:05.340
to w ten sposób.

01:05.340 --> 01:08.120
A potem w tej metodzie

01:08.120 --> 01:13.120
zwrócę, To. cena razy jeden plus podatek.

01:13.200 --> 01:15.300
Więc mamy tę metodę użytkową i

01:15.300 --> 01:17.610
możemy również dodać getter i setter,

01:17.610 --> 01:19.090
jeśli chcesz.

01:19.090 --> 01:22.700
Na przykład możemy dodać setter dla ceny tutaj, gdzie otrzymujemy wartość,

01:22.700 --> 01:25.850
która powinna być liczbą i gdzie kontrolujemy, że możemy ustawić

01:25.850 --> 01:28.231
tylko określone wartości.

01:28.231 --> 01:32.090
Teraz, aby to zadziałało, zmienię nazwę ceny tutaj, aby podkreślić

01:32.090 --> 01:35.350
cenę i uczynić ją prywatną, tak abyśmy nie mogli bezpośrednio

01:35.350 --> 01:37.540
do niej dotrzeć.

01:37.540 --> 01:39.970
I tutaj ustawię tę cenę podkreślenia

01:39.970 --> 01:42.580
i tutaj użyję tej ceny podkreślenia.

01:42.580 --> 01:44.800
I dzięki tym zmianom w seterze możemy ustawić

01:44.800 --> 01:48.350
tę cenę podkreślenia równą wartości, którą otrzymujemy.

01:48.350 --> 01:51.290
Ale zanim to zrobimy, możemy sprawdzić, czy

01:51.290 --> 01:52.770
wartość jest większa

01:52.770 --> 01:55.630
od zera, aby nie przyjąć ujemnych cen.

01:55.630 --> 01:57.220
Więc z tym, ustawiamy cenę tylko wtedy,

01:57.220 --> 02:00.159
gdy jest większa niż zero, w przeciwnym razie nie robimy nic.

02:00.159 --> 02:04.330
Rzeczywiście moglibyśmy rzucić błąd w drugim przypadku.

02:04.330 --> 02:08.389
Nieważna cena powinna być dodatnia.

02:08.389 --> 02:11.350
Więc to jest coś, co możemy zrobić, teraz

02:11.350 --> 02:14.020
mamy klasę z dwoma właściwościami, z

02:14.020 --> 02:16.700
accessorem i również z metodą tutaj i

02:16.700 --> 02:18.570
ta metoda ma parametr.

02:18.570 --> 02:21.180
Teraz do tych wszystkich rzeczy możemy dodać

02:21.180 --> 02:24.690
dekoratory i zacznijmy od starego dobrego przyjaciela, dekoratora

02:24.690 --> 02:25.910
kłód.

02:25.910 --> 02:28.960
Tutaj nazwę go log, aby nie zderzyć się z loggerem tam na górze,

02:28.960 --> 02:30.650
ponieważ ten dekorator log, nie będzie

02:30.650 --> 02:31.960
dodany do klasy i dlatego dostanie

02:31.960 --> 02:33.770
inne argumenty.

02:33.770 --> 02:35.671
Dostanie jednak argumenty, a to,

02:35.671 --> 02:38.580
jakie argumenty dostanie dekorator, zależy od tego,

02:38.580 --> 02:40.030
gdzie go dodasz.

02:40.030 --> 02:41.960
Co jest powodem, dla którego nie mogę ponownie

02:41.960 --> 02:45.700
użyć loggera, ponieważ to było dostrojone do pracy tylko z klasami.

02:45.700 --> 02:48.100
Teraz tutaj nie mam fabryki dekoratorów w rzeczywistości,

02:48.100 --> 02:49.980
po prostu muszę udekorować funkcję w ten

02:49.980 --> 02:53.510
sposób, ale nadal, które argumenty dostaje ta funkcja dekoratora, zależy

02:53.510 --> 02:55.230
od tego, gdzie go używamy.

02:55.230 --> 02:58.750
Na przykład, możemy dodać dekorator do właściwości.

02:58.750 --> 03:01.120
Tutaj mogę dodać dziennik w ten sposób, a

03:01.120 --> 03:03.840
jeśli dodasz dekorator do właściwości, dekorator

03:03.840 --> 03:05.759
otrzymuje dwa argumenty.

03:05.759 --> 03:09.830
Pierwszy argument, jest celem właściwości i dla właściwości

03:09.830 --> 03:12.010
instancji, takiej jak ta, którą wywołujemy

03:12.010 --> 03:15.290
na instancji, jeśli pracujesz z nią.

03:15.290 --> 03:19.490
Będzie to prototyp obiektu, który został utworzony.

03:19.490 --> 03:22.140
Gdybyśmy mieli tutaj statyczną właściwość, cel

03:22.140 --> 03:24.850
odnosiłby się do stanu funkcji konstruktora.

03:24.850 --> 03:27.770
Więc tutaj powiem, że dowolny, bo nie wiem dokładnie

03:27.770 --> 03:30.140
jaką strukturę będzie miał obiekt.

03:30.140 --> 03:35.140
Drugi argument, który otrzymujemy, to nazwa nieruchomości po prostu.

03:35.290 --> 03:37.682
To może być tutaj ciąg znaków,

03:37.682 --> 03:40.400
może być też oczywiście symbol.

03:40.400 --> 03:43.470
Nie wiemy, czego używamy jako identyfikatora nieruchomości.

03:43.470 --> 03:48.037
A następnie tutaj będę logować dekorator właściwości, abyśmy

03:49.130 --> 03:51.120
mogli zobaczyć, kiedy to

03:51.120 --> 03:55.980
działa i chcę konsoli. cel dziennika, a także nazwę właściwości.

03:55.980 --> 03:57.780
Żebyśmy widzieli, co jest w tych dwóch wartościach.

03:57.780 --> 04:01.280
Z tym, jeśli zapisujemy tak, że kompiluje się bez błędów, a jeśli

04:01.280 --> 04:03.080
przejdziemy do naszego serwera,

04:03.080 --> 04:06.871
widzimy, dekorator właściwości zostaje wydrukowany tam.

04:06.871 --> 04:08.630
I to jest nasze wyjście, które otrzymujemy.

04:08.630 --> 04:13.220
Widzimy tutaj, że to prototyp naszego obiektu, bo nie

04:13.220 --> 04:15.850
widzimy tutaj tytułu i ceny.

04:15.850 --> 04:18.160
Ale widzimy get price z podatkiem i rzeczywiście

04:18.160 --> 04:19.770
metody są rejestrowane na

04:19.770 --> 04:21.900
prototypie obiektu.

04:21.900 --> 04:24.240
Tak więc to jest prototyp naszego obiektu i

04:24.240 --> 04:26.640
widzimy tytuł tutaj po prawej stronie, to jest

04:26.640 --> 04:28.943
nazwa właściwości, z którą pracujemy.

04:29.800 --> 04:33.770
Kiedy dokładnie ten logger jest wykonywany?

04:33.770 --> 04:37.880
Cóż, jak możesz powiedzieć, ponieważ nigdy nie instaluję żadnego produktu,

04:37.880 --> 04:41.670
wykonuje się on zasadniczo, gdy twoja definicja klasy jest rejestrowana

04:41.670 --> 04:43.980
przez JavaScript.

04:43.980 --> 04:47.660
Więc wykonuje się, gdy definiujesz tę właściwość zasadniczo

04:47.660 --> 04:49.140
do JavaScript, jako część

04:49.140 --> 04:50.960
twojej klasy tutaj, jako część

04:50.960 --> 04:52.970
tej funkcji konstruktora.

04:52.970 --> 04:54.610
Która powstaje tu na końcu.

04:54.610 --> 04:58.053
To właśnie wtedy wykonuje się ten dekorator właściwości.
