WEBVTT

00:02.450 --> 00:05.030
Người hướng dẫn: Bây giờ chúng ta hãy tránh xa

00:05.030 --> 00:09.010
tình trạng quá tải hàm và để tôi giới thiệu một tính năng rất hay khác.

00:09.010 --> 00:13.350
Và đó là chuỗi tùy chọn.

00:13.350 --> 00:16.720
Giả sử bạn có một ứng dụng mà bạn đang lấy dữ liệu

00:16.720 --> 00:21.603
từ phần phụ trợ từ cơ sở dữ liệu hoặc từ bất kỳ nguồn nào mà bạn không

00:21.603 --> 00:26.350
biết chắc chắn liệu một thuộc tính nhất định có được xác định

00:26.350 --> 00:29.500
trong một đối tượng hay không.

00:29.500 --> 00:33.920
Giả sử chúng ta đã tìm nạpUserData và đã tìm nạpUserData có thể là một đối tượng

00:33.920 --> 00:36.380
về người dùng mà chúng ta đã tìm nạp.

00:36.380 --> 00:39.705
Ở đó, chúng tôi có thể có một ID, chúng tôi

00:39.705 --> 00:44.705
có thể có tên Max và chúng tôi cũng có thể mong đợi một công việc

00:45.730 --> 00:50.550
thuộc tính khác là một đối tượng có tiêu đề và sau đó cũng

00:50.550 --> 00:53.950
có mô tả, công ty của riêng tôi.

00:53.950 --> 00:56.900
Bây giờ nếu chúng tôi nhận được dữ liệu như thế này, tất nhiên chúng tôi có thể làm việc với nó.

00:56.900 --> 01:00.150
Bây giờ bạn có thể làm những việc phức tạp hơn nhưng ở

01:00.150 --> 01:03.940
đây để bắt đầu, hãy nói rằng tất cả những gì tôi đang làm là thực

01:03.940 --> 01:06.871
sự tôi đang tải chức danh công việc lên đây.

01:06.871 --> 01:09.940
Bây giờ nếu chúng tôi đã lưu nó với máy chủ phát triển của chúng

01:09.940 --> 01:12.880
tôi đang hoạt động và quá trình biên dịch chạy ở chế độ theo

01:12.880 --> 01:14.420
dõi, tôi sẽ gặp CEO ở đây.

01:14.420 --> 01:17.395
Bây giờ, điều đó không quá xa vời, tuy nhiên, nếu

01:17.395 --> 01:22.395
chúng tôi đang tìm nạp dữ liệu này từ một chương trình phụ trợ, vì bất kỳ lý do

01:23.080 --> 01:27.690
gì có thể chúng tôi không tìm nạp tất cả dữ liệu mình cần, có thể một số dữ

01:27.690 --> 01:30.490
liệu chưa được đặt vào thời điểm này.

01:30.490 --> 01:34.730
Trong các ứng dụng lớn hơn, phức tạp hơn, chắc chắn đôi khi bạn làm việc với

01:34.730 --> 01:39.240
cấu trúc có dữ liệu lồng nhau mà bạn không biết chắc chắn liệu một số thuộc tính

01:39.240 --> 01:42.650
trên một đối tượng có được đặt hay không hoặc liệu thuộc tính

01:42.650 --> 01:45.340
đó có thể không được xác định hay không.

01:45.340 --> 01:49.680
Vì vậy, ở đây giả sử công việc không tồn tại ở đây vì bất kỳ lý do gì mà chúng tôi

01:49.680 --> 01:53.180
không tìm nạp nó, tất nhiên ở đây tôi gặp lỗi khi TypeScript

01:53.180 --> 01:55.930
phàn nàn về điều này vì nó biết rằng hiện tại không

01:55.930 --> 01:57.843
có thuộc tính công việc.

01:57.843 --> 02:01.347
Vấn đề là nó biết dữ liệu này, nó sẽ không biết liệu đó có

02:01.347 --> 02:05.660
phải là dữ liệu chúng tôi đang tìm nạp từ một số tệp không được kiểm soát

02:05.660 --> 02:09.720
từ TypeScript hay như tôi vừa nói nếu chúng tôi có thể tìm nạp dữ

02:09.720 --> 02:12.530
liệu này từ phần phụ trợ và chúng tôi không biết

02:12.530 --> 02:15.550
chắc chắn dữ liệu nào sẽ được trả về.

02:15.550 --> 02:18.150
Bây giờ nếu bạn không biết liệu điều đó có được xác định hay không, những

02:18.150 --> 02:21.730
gì chúng tôi có thể làm trong JavaScript thông thường là chúng tôi có thể thử truy cập công việc

02:21.730 --> 02:25.098
và nếu điều đó hoạt động, chúng tôi sẽ tiếp tục và chúng tôi truy cập tiêu đề.

02:25.098 --> 02:29.450
Đây là cách JavaScript để kiểm tra xem có thứ gì đó tồn tại hay không trước

02:29.450 --> 02:33.520
khi chúng tôi tìm hiểu sâu hơn về đối tượng tiềm năng đó và nếu điều đó

02:33.520 --> 02:37.110
không được xác định, mã này sẽ không bao giờ chạy và do đó chúng

02:37.110 --> 02:39.400
tôi có lỗi thời gian chạy rộng hơn.

02:39.400 --> 02:42.410
Một lần nữa ở đây, TypeScript tất nhiên biết rằng công

02:42.410 --> 02:45.180
việc đó không tồn tại, nhưng nếu công việc này được

02:45.180 --> 02:48.470
tìm nạp từ một số nguồn mà TypeScript không thể coi đó là

02:48.470 --> 02:52.910
kết quả của một yêu cầu HTTP, thì đây sẽ là cách an toàn để tránh lỗi thời gian

02:52.910 --> 02:54.920
chạy trong JavaScript.

02:54.920 --> 02:58.110
Bây giờ nếu điều này tồn tại, chúng ta sẽ nhận được đầu ra giống như trước đây.

02:58.110 --> 03:01.400
Nếu nó không tồn tại, ít nhất chúng ta sẽ không gặp lỗi thời

03:01.400 --> 03:02.233
gian chạy.

03:02.233 --> 03:07.020
Với TypeScript, bạn thực sự có một cách hay hơn để làm điều đó.

03:07.020 --> 03:10.520
Bạn có toán tử xâu chuỗi tùy chọn.

03:10.520 --> 03:15.320
Bạn có thể thêm một dấu chấm hỏi sau điều mà bạn không chắc nó đã được

03:15.320 --> 03:16.880
xác định hay chưa.

03:16.880 --> 03:21.600
Ít nhất là nếu bạn đang sử dụng TypeScript phiên bản 3. 7 hoặc cao hơn.

03:21.600 --> 03:24.770
Ở đây IDE của tôi không thích điều này, nhưng đây là

03:24.770 --> 03:26.300
một cú pháp được hỗ trợ.

03:26.300 --> 03:30.370
Điều này cho TypeScript biết điều này có tồn tại không, nếu nó truy cập công

03:30.370 --> 03:33.450
việc và do đó ở đây chúng ta có thể thêm dấu chấm hỏi đó và do

03:33.450 --> 03:36.314
đó chỉ truy cập tiêu đề nếu công việc được xác định.

03:36.314 --> 03:39.300
Bây giờ nếu chúng tôi làm điều đó, tôi vẫn gặp lỗi ở đây

03:39.300 --> 03:42.490
nếu tôi cố gắng biên dịch nó vì TypeScript vẫn biết chắc chắn

03:42.490 --> 03:44.510
rằng công việc đó không tồn tại.

03:44.510 --> 03:47.370
Nhưng nếu nó không biết điều đó hoặc nếu tôi nhận xét điều

03:47.370 --> 03:51.840
này trong phần biên dịch này thì vẫn ổn và tất cả những thứ đó sẽ thực thi như trước đây.

03:51.840 --> 03:56.400
Vì vậy, toán tử chuỗi tùy chọn này ở đây giúp chúng tôi truy cập một cách an toàn các

03:56.400 --> 04:00.730
thuộc tính lồng nhau và các đối tượng lồng nhau trong dữ liệu đối tượng của chúng

04:00.730 --> 04:03.610
tôi và nếu đối tượng phía trước dấu chấm hỏi không được

04:03.610 --> 04:07.061
xác định thì nó sẽ không truy cập vào đối tượng đó sau đó và do

04:07.061 --> 04:10.910
đó sẽ không gây ra lỗi thời gian chạy mà thay vào đó, nó sẽ chỉ là không

04:10.910 --> 04:12.420
tiếp tục.

04:12.420 --> 04:15.210
Vì vậy, đằng sau hậu trường, điều này về cơ bản được biên dịch thành

04:15.210 --> 04:18.380
một kiểm tra if để kiểm tra xem điều đó có tồn tại hay không trước khi nó cố gắng

04:18.380 --> 04:19.213
truy cập điều này.
