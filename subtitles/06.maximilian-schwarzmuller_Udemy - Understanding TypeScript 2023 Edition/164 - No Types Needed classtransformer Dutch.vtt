WEBVTT

00:02.270 --> 00:04.040
Instructeur: We hebben dus gekeken naar

00:04.040 --> 00:05.900
Lodash, een bibliotheek van derden die

00:05.900 --> 00:08.270
gebouwd is met JavaScript voor JavaScript.

00:08.270 --> 00:11.730
Je vindt ook bepaalde bibliotheken van derden die type

00:11.730 --> 00:13.287
script en type script functies

00:13.287 --> 00:16.480
echt omarmen en je een gloednieuwe manier van code

00:16.480 --> 00:18.360
schrijven geven die werkt omdat

00:18.360 --> 00:21.230
je met type script werkt.

00:21.230 --> 00:24.950
Eén voorbeeld is class transformer, een nog beter voorbeeld is

00:24.950 --> 00:28.067
class validator; we zullen beide hier bekijken.

00:28.067 --> 00:31.360
Maar laten we beginnen met de klasse transformator.

00:31.360 --> 00:35.870
Laten we zeggen dat ik in ons project een model heb, een datamodel,

00:35.870 --> 00:38.150
laten we het 'product' noemen.

00:38.150 --> 00:41.170
Nu noem ik het product. model. maar u kunt dit

00:41.170 --> 00:43.820
bestand noemen zoals u wilt.

00:43.820 --> 00:48.820
Mijn idee is dat ik in dit bestand een klasse definieer voor een product.

00:49.420 --> 00:52.180
Dus ik beschrijf hoe een product eruit moet zien.

00:52.180 --> 00:55.550
Bijvoorbeeld dat het een titel heeft die een string is en een

00:55.550 --> 00:59.070
prijs die een getal is en dan voeg ik een constructorfunctie

00:59.070 --> 01:02.120
toe waar beide kunnen worden geïnitialiseerd.

01:02.120 --> 01:07.120
Dus string, prijs toevoegen en dan zei ik deze titel gelijk aan 't' en

01:07.210 --> 01:09.360
deze prijs gelijk aan 'p'.

01:09.360 --> 01:10.810
En natuurlijk hadden we ook de korte

01:10.810 --> 01:12.980
initialisatie kunnen gebruiken waarbij we alleen

01:12.980 --> 01:14.423
de constructor gebruiken.

01:16.150 --> 01:20.400
Laten we dan zeggen dat we altijd een methode hebben, get

01:20.400 --> 01:25.400
information waar ik een array retourneer, laten we zeggen waar het

01:25.950 --> 01:30.850
eerste element de titel is en het tweede element eigenlijk een string

01:30.850 --> 01:35.770
is waar ik een dollarteken heb en dan in deze string, deze prijs heb

01:35.770 --> 01:37.833
geïnjecteerd.

01:39.030 --> 01:43.030
Dus zeer eenvoudig model hier, een zeer eenvoudige klasse.

01:43.030 --> 01:45.940
En nu kunnen we deze klasse natuurlijk gebruiken,

01:45.940 --> 01:49.590
als je dat wilt, in app. ts dus daar zal ik me ontdoen van Lodash en in plaats

01:49.590 --> 01:54.590
daarvan product importeren van . /product. model Nu moet je ervoor zorgen

01:56.200 --> 01:58.920
dat je in het productmodel deze klasse exporteert,

01:58.920 --> 02:01.010
anders kun je hem niet importeren

02:01.010 --> 02:03.860
en hier moeten we het product zo exporteren

02:03.860 --> 02:05.800
omdat ik hier een export op naam

02:05.800 --> 02:07.890
gebruik door het sleutelwoord export

02:07.890 --> 02:11.950
vlak voor de klasse toe te voegen.

02:11.950 --> 02:16.497
Dus nu kunnen we natuurlijk een nieuw product maken,

02:18.150 --> 02:23.150
een boek dat 12 kost. 99 en daarna krijg ik console log p1

02:24.080 --> 02:28.190
informatie en moeten we eigenlijk deze array loggen.

02:28.190 --> 02:31.390
Dus als we nu npm start hier uitvoeren, start onze

02:31.390 --> 02:34.250
web pack dev op en zouden we deze mooie array

02:34.250 --> 02:37.340
met informatie over dit boek moeten zien.

02:37.340 --> 02:39.463
Dus als ik hier herlaad, is het hier.

02:40.630 --> 02:43.170
Nu is dat natuurlijk niet te gek, dat werkt,

02:43.170 --> 02:44.930
maar dat is niets nieuws.

02:44.930 --> 02:47.270
Een veel voorkomend scenario in grotere

02:47.270 --> 02:49.610
apps is dat je gegevens downloadt, laten

02:49.610 --> 02:52.150
we zeggen van een server, je haalt gegevens

02:52.150 --> 02:54.490
op van een back-end server en die server

02:54.490 --> 02:58.370
stuurt je dan wat json-gegevens die je doorgeeft en dat kan dan

02:58.370 --> 03:01.560
een lijst van producten zijn.

03:01.560 --> 03:05.520
Dus hier kunnen we producten hebben die we van de server krijgen, waar we dan

03:05.520 --> 03:10.520
een titel, een tapijt en een prijs hebben, 29. 99 en dan hebben we ook

03:13.047 --> 03:18.047
nog dit boek, dus titel, boek en daar een

03:18.120 --> 03:22.830
prijs van 10. 99, laten we zeggen.

03:22.830 --> 03:25.310
Dus dat is een heel eenvoudige array van gegevens

03:25.310 --> 03:27.730
die we dan van de achterkant krijgen.

03:27.730 --> 03:30.590
Nu zijn dit natuurlijk JavaScript-objecten, maar

03:30.590 --> 03:33.730
het zijn geen instanties van ons productmodel.

03:33.730 --> 03:37.220
En dat is een typisch scenario waar je gegevens krijgt als json het

03:37.220 --> 03:40.990
heeft geen bijgevoegde gegevens zoals tot welke constructor functie

03:40.990 --> 03:42.850
je bent gecodeerd behoort.

03:42.850 --> 03:46.770
Je server weet dat wel en json is ook een formaat dat alleen

03:46.770 --> 03:51.230
basisgegevens doorgeeft, je hebt geen rijke meta-gegevens

03:51.230 --> 03:53.540
aan je objecten hangen.

03:53.540 --> 03:56.300
Of in ieder geval zou je dit handmatig moeten doen.

03:56.300 --> 04:00.120
Dus, met andere woorden, de producten die we hier krijgen zijn

04:00.120 --> 04:03.310
objecten die geen get informatie methode hebben.

04:03.310 --> 04:08.230
Als u dit nu traditioneel zou willen omzetten in instanties

04:08.230 --> 04:12.680
van uw model, zou u dat handmatig moeten doen.

04:12.680 --> 04:17.680
Je zou je geladen producten kunnen hebben die dan, laten we zeggen producten

04:19.260 --> 04:22.770
gebruikt, de map methode aanroept en op elk product

04:22.770 --> 04:25.680
in die array geven we dan een nieuw product

04:25.680 --> 04:30.680
terug voor prod. titel en prod. prijs en daarna zouden we een

04:34.330 --> 04:36.660
array vol echte product constructor

04:36.660 --> 04:40.230
functie instanties hebben en dan zouden we eigenlijk daar

04:40.230 --> 04:43.163
doorheen kunnen lussen, geladen producten en

04:44.330 --> 04:51.083
dan in daar bijvoorbeeld console log prod.

04:51.083 --> 04:51.083
krijg informatie.

04:52.150 --> 04:56.010
Dit is hoe we handmatig een array of ook een enkel object zonder

04:56.010 --> 05:00.070
naam Vanilla JavaScript kunnen omzetten in een instantie van

05:00.070 --> 05:02.880
een specifieke constructorfunctie en dus

05:02.880 --> 05:05.000
deze uitvoer krijgen.

05:05.000 --> 05:07.220
Dit handmatig doen is omslachtig.

05:07.220 --> 05:09.590
Het zijn een hoop extra stappen hier, dit

05:09.590 --> 05:12.710
is natuurlijk maar een simpele transformatie.

05:12.710 --> 05:16.690
Dat is waar het klasse transformator pakket ons kan helpen.

05:16.690 --> 05:19.330
Het maakt dat heel, heel eenvoudig.

05:19.330 --> 05:22.390
Daar definiëren we ook een klasse in type script

05:22.390 --> 05:25.010
in ons geval hier, dan krijgen we misschien

05:25.010 --> 05:29.340
wat gegevens, laten we zeggen van een server en dan kunnen we eigenlijk

05:29.340 --> 05:32.430
een eenvoudige gemak methode aanroepen en het zal

05:32.430 --> 05:36.893
automatisch onze gegevens omzetten in de juiste modellen.

05:38.100 --> 05:40.030
Laten we daarvoor eerst een nmp

05:40.030 --> 05:44.840
install class transformer--save uitvoeren, zoals dit en zodra dit klaar is

05:45.730 --> 05:47.820
laten we npm install reflect-metadata--save

05:47.820 --> 05:50.350
uitvoeren Een pakket, waar dit pakket uiteindelijk

05:51.451 --> 05:54.470
van afhankelijk is.

05:54.470 --> 05:57.460
Dus laten we dit hier ook importeren en dan

05:57.460 --> 06:02.460
zoals het ons ook instrueert in de setup instructies hier, importeer

06:02.890 --> 06:07.680
reflecterende metadata in je route entry bestanden, in mijn geval

06:07.680 --> 06:11.410
hier in app. ts Ik importeer deze bibliotheek van derden

06:11.410 --> 06:14.970
die we net hebben geïnstalleerd als een afhankelijkheid van onze bibliotheek.

06:14.970 --> 06:17.210
Nu staat er eigenlijk geen js stappen en daarom

06:17.210 --> 06:18.610
kunnen we deze overslaan.

06:18.610 --> 06:20.180
In de browser moeten we echter

06:20.180 --> 06:24.780
nog steeds dezelfde pakketten installeren en deze import hier toevoegen

06:24.780 --> 06:26.880
is prima, want we gebruiken webpack

06:26.880 --> 06:30.090
en daarom kunnen we nu eigenlijk aan de slag.

06:30.090 --> 06:35.090
En nu kunnen we iets importeren van class transformer en

06:36.290 --> 06:40.210
dan is dat iets de 'plain to class' methode.

06:40.210 --> 06:42.630
Dit pakket heeft ook een paar andere methoden.

06:42.630 --> 06:45.200
U kunt er meer over te weten komen in de officiële documenten.

06:45.200 --> 06:49.060
Maar 'plain to class' is de belangrijkste methode.

06:49.060 --> 06:54.060
U kunt het hier gebruiken om bijvoorbeeld uw geladen producten in te stellen.

06:55.150 --> 06:58.230
In plaats van dit hier handmatig te doen zoals we eerder deden,

06:58.230 --> 07:01.480
kunnen we geladen producten gelijk stellen aan plain to class

07:01.480 --> 07:03.760
en nu hier twee argumenten doorgeven.

07:03.760 --> 07:08.070
Het eerste argument is de klasse waarnaar we het willen converteren.

07:08.070 --> 07:10.190
In mijn geval hier, product.

07:10.190 --> 07:12.700
En ik installeer het niet of roep het

07:12.700 --> 07:15.560
aan, ik wijs gewoon naar die klasse.

07:15.560 --> 07:19.460
Het tweede argument zijn de gegevens die we willen transformeren.

07:19.460 --> 07:23.520
Dus in mijn geval zijn dat producten.

07:23.520 --> 07:25.840
En wat dit pakket nu zal doen is deze

07:25.840 --> 07:28.100
array doorlopen en elk gewoon Vanilla

07:28.100 --> 07:31.034
JavaScript object hier omzetten in een

07:31.034 --> 07:34.090
instantie van deze klasse.

07:34.090 --> 07:37.830
Dus als we dit nu opslaan en npm start opnieuw uitvoeren, start

07:37.830 --> 07:40.330
de webpagina die server opnieuw op en zou

07:40.330 --> 07:43.270
het dit project zonder fouten moeten bouwen.

07:43.270 --> 07:46.540
Als ik de pagina opnieuw laad, krijg ik dezelfde uitvoer

07:46.540 --> 07:49.530
als voorheen, maar natuurlijk met minder code van onze

07:49.530 --> 07:51.870
kant omdat we dit pakket gebruiken.

07:51.870 --> 07:53.403
En het verbazingwekkende

07:53.403 --> 07:57.070
van dit pakket is dat het hier zo goed werkt omdat het voortbouwt

07:57.070 --> 08:01.230
op type script en gebruik maakt van het feit dat we daar een klasse

08:01.230 --> 08:04.280
hebben waarnaar we kunnen wijzen.

08:04.280 --> 08:08.730
Maar om ook eerlijk te zijn, dit pakket werkt bijzonder goed met type script, maar

08:08.730 --> 08:10.900
het maakt geen gebruik van een type script

08:10.900 --> 08:12.600
specifieke functie.

08:12.600 --> 08:16.630
Klassen bestaan bijvoorbeeld ook in Vanilla JavaScript.

08:16.630 --> 08:20.170
Dus hoewel dit primair is ontwikkeld voor type script,

08:20.170 --> 08:23.610
werkt het eigenlijk ook in Vanilla JavaScript.

08:23.610 --> 08:26.633
Dat geldt echter niet voor het volgende pakket.
