WEBVTT

00:02.300 --> 00:04.180
Instructeur : Nous avons donc commencé

00:04.180 --> 00:05.960
par des bases de noms, continuons sur cette

00:05.960 --> 00:08.460
voie, et divisons-les en plusieurs fichiers.

00:08.460 --> 00:11.090
Pour cela, la gestion de l'état du projet.

00:11.090 --> 00:13.610
Nous pourrions mettre cela dans un fichier séparé également.

00:13.610 --> 00:16.050
Donc je vais prendre tout, y compris

00:16.050 --> 00:20.600
cette création de l'instance de l'état du projet ici, et la couper

00:20.600 --> 00:24.250
de l'application. ts et créer un nouveau fichier,

00:24.250 --> 00:27.060
project-state. ts.

00:27.060 --> 00:29.685
Mettez-le là et comme avant, mettez-le

00:29.685 --> 00:32.070
dans un espace de nom.

00:32.070 --> 00:35.400
Namespace app, le nom est important, il doit être App car

00:35.400 --> 00:38.090
c'est là que se trouve le reste de notre code.

00:38.090 --> 00:40.440
Mettez tout là-dedans et maintenant important,

00:40.440 --> 00:43.560
exportez ce dont vous avez besoin en dehors de ce fichier aussi,

00:43.560 --> 00:46.120
qui dans ce cas est la classe projectstate, nous

00:46.120 --> 00:48.830
en avons besoin dans le reste de notre application,

00:48.830 --> 00:51.500
et aussi cette constante là-bas, nous avons besoin

00:51.500 --> 00:53.880
de l'exporter aussi.

00:53.880 --> 00:57.060
Vous n'avez pas besoin d'exporter le Listener ici, ni l'état,

00:57.060 --> 00:59.430
car ces deux éléments ne sont utilisés que dans

00:59.430 --> 01:01.480
ce fichier et n'ont donc pas besoin d'être

01:01.480 --> 01:02.823
exportés.

01:03.700 --> 01:06.860
Maintenant, nous devons importer notre état de projet. ts, donc dans

01:06.860 --> 01:09.540
App. ts, c'est l'heure d'une autre importation là-haut.

01:09.540 --> 01:13.290
Projet d'état d'urgence, juste comme ça.

01:13.290 --> 01:16.620
Si nous sauvegardons cela, il devrait compiler sans erreurs.

01:16.620 --> 01:19.480
Maintenant, je vais continuer et la partie validation ici

01:19.480 --> 01:21.460
pourrait aller dans un fichier séparé aussi,

01:21.460 --> 01:23.960
donc je vais prendre tout ça, créer un nouveau fichier,

01:23.960 --> 01:26.890
validation. ts, ajouter l'espace

01:26.890 --> 01:30.760
de nom App ici, mettre ma logique de validation là-dedans

01:30.760 --> 01:33.560
et exporter l'interface validatable et toute

01:33.560 --> 01:36.706
la fonction devalidate ici, bien sûr.

01:36.706 --> 01:39.566
Et puis, de retour dans l'App. ts, vous savez comment c'est, nous

01:39.566 --> 01:41.700
revenons ici en haut et ajoutons une importation

01:41.700 --> 01:43.513
à la validation. ts.

01:45.160 --> 01:49.823
Maintenant, le décorateur peut également être déplacé dans un fichier séparé.

01:49.823 --> 01:54.410
Décorateur de tiret autobind. ts, par exemple.

01:54.410 --> 01:58.863
Encore une fois, ajoutez l'espace de noms avec le nom App, mettez la fonction

01:58.863 --> 02:01.950
là-dedans et exportez-la, bien sûr, pour la rendre

02:01.950 --> 02:04.820
disponible en dehors de ce fichier aussi bien

02:04.820 --> 02:08.430
qu'ici dans App. ts, il est temps de procéder à une autre importation

02:08.430 --> 02:12.633
où j'importe le décorateur autobind dash. ts.

02:14.840 --> 02:16.484
Maintenant nous avons plus de choses à exporter,

02:16.484 --> 02:19.240
nous avons notre composant et ensuite toutes ces classes.

02:19.240 --> 02:21.205
Je veux avoir chaque classe dans un fichier

02:21.205 --> 02:25.440
séparé afin que chaque fichier soit relativement petit et facile à gérer.

02:25.440 --> 02:28.280
Maintenant, nous entrons dans un nouveau problème ici, cependant.

02:28.280 --> 02:30.385
Nous ajoutons de plus en plus de fichiers

02:30.385 --> 02:33.934
au même niveau et pour l'instant, j'utilise le tiret ici pour fournir

02:33.934 --> 02:37.800
un indice ou une aide sur ce que contient le fichier, autobind dash decorator

02:37.800 --> 02:42.330
nous montre qu'il y a probablement un décorateur là-dedans.

02:42.330 --> 02:44.300
Ici, nous avons probablement des interfaces.

02:44.300 --> 02:46.246
Ici, un modèle et ainsi de suite.

02:46.246 --> 02:49.070
Si vous n'avez que trois ou quatre fichiers, c'est

02:49.070 --> 02:52.010
parfait, mais si vous avez plus de fichiers, vous

02:52.010 --> 02:55.276
vous retrouvez avec une structure de dossiers très

02:55.276 --> 02:57.430
difficile à comprendre.

02:57.430 --> 03:00.056
Ce que j'aime faire, c'est créer des sous-dossiers.

03:00.056 --> 03:02.697
Je vais ajouter un sous-dossier decorators,

03:02.697 --> 03:05.830
y placer mon décorateur autobind et le renommer autobind,

03:05.830 --> 03:09.260
car il se trouve déjà dans le dossier decorators.

03:09.260 --> 03:11.720
Bien sûr, il y a un décorateur là-dedans.

03:11.720 --> 03:14.440
Ensuite, j'ajouterai mon dossier de modèles, et en fait, ici,

03:14.440 --> 03:17.523
je déplacerai à la fois les interfaces de glisser-déposer et le modèle

03:17.523 --> 03:19.355
de projet, simplement parce que je pense

03:19.355 --> 03:21.763
que les interfaces de glisser-déposer ne sont finalement

03:21.763 --> 03:24.187
que des définitions de la façon dont les classes glissantes

03:24.187 --> 03:27.263
et glissantes devraient ressembler.

03:27.263 --> 03:29.910
Tout comme le modèle de projet est la définition de la façon dont une

03:29.910 --> 03:31.630
classe de projet devrait ressembler ou comment

03:31.630 --> 03:33.655
notre objet de projet devrait ressembler.

03:33.655 --> 03:38.530
Je vais donc nommer ce glisser-déposer et le projet ici, puis

03:38.530 --> 03:42.610
je vais ajouter un dossier util pour l'utilitaire

03:42.610 --> 03:44.860
et y ajouter ma validation,

03:44.860 --> 03:49.690
puis un dossier d'état et y ajouter l'état du projet.

03:49.690 --> 03:52.400
Ici, je vais garder le nom project-state pour éviter toute

03:52.400 --> 03:55.300
confusion avec ce projet. Le fichier ts est ici.

03:55.300 --> 03:56.716
Techniquement, ce n'est pas un problème,

03:56.716 --> 03:59.216
mais je veux aussi que ce soit clair dans ce cours pour que vous

03:59.216 --> 04:00.990
puissiez voir plus facilement dans quel

04:00.990 --> 04:02.640
fichier je travaille.

04:02.640 --> 04:05.640
Vous pourriez certainement renommer cela en projet. ici si vous

04:05.640 --> 04:07.320
le vouliez.

04:07.320 --> 04:09.662
Maintenant, avec ce remaniement et ces sous-dossiers,

04:09.662 --> 04:12.069
nos importations ici sont bien sûr cassées, nous

04:12.069 --> 04:14.010
devons donc les corriger.

04:14.010 --> 04:17.366
Les interfaces de glisser-déposer se trouvent dans le dossier des modèles et s'appellent

04:17.366 --> 04:21.216
désormais simplement glisser-déposer. ts.

04:21.216 --> 04:25.630
Et le modèle de projet se trouve également dans le dossier des modèles et est maintenant

04:25.630 --> 04:28.560
simplement nommé projet. ts.

04:28.560 --> 04:31.100
L'état du projet se trouve dans le dossier state,

04:31.100 --> 04:34.040
la validation se trouve dans le dossier util, et le

04:34.040 --> 04:36.896
décorateur autobind se trouve dans les décorateurs

04:36.896 --> 04:39.860
et est simplement nommé autobind.

04:39.860 --> 04:42.547
Avec cela, si nous l'enregistrons, il compile sans erreur

04:42.547 --> 04:44.128
et nous avons maintenant une structure

04:44.128 --> 04:47.290
de dossiers plus facile à gérer et à lire, je dirais.

04:47.290 --> 04:50.500
Sur ce, continuons, nous n'avons pas fini.

04:50.500 --> 04:52.130
Nous avons notre composant

04:52.130 --> 04:54.813
ici, maintenant pour cela, je vais ajouter

04:54.813 --> 04:59.813
un sous-dossier de composants et là je veux avoir mon composant de base du tableau

05:00.210 --> 05:05.210
de bord, le fichier ts, puis le fichier ts de l'élément du projet, le fichier ts de

05:07.600 --> 05:12.110
la liste du projet et aussi le fichier ts de l'entrée du projet.

05:12.110 --> 05:14.430
Bien sûr, vous pouvez toujours organiser cela différemment,

05:14.430 --> 05:17.631
mais je pense que cela permet de garder les fichiers liés ensemble.

05:17.631 --> 05:22.253
Donc nous pouvons prendre cette classe de base de composant abstrait ici, la couper de

05:23.830 --> 05:27.023
l'application ts et la déplacer dans le composant de base.

05:29.610 --> 05:33.180
Comme ceci, et bien sûr, également comme précédemment,

05:33.180 --> 05:37.810
ajoutez-le dans un espace de noms avec le nom App.

05:37.810 --> 05:41.120
Et ensuite le déplacer dans cet espace de nom.

05:41.120 --> 05:43.890
Bien sûr, j'ajusterai cela avant de l'exporter pour

05:43.890 --> 05:46.171
pouvoir l'utiliser dans un autre fichier.

05:46.171 --> 05:49.800
Cet autre fichier, cependant, ne sera pas une application. ts parce que les fichiers ou

05:49.800 --> 05:53.044
les classes où j'ai utilisé le composant seront

05:53.044 --> 05:54.910
également déplacés.

05:54.910 --> 05:56.856
La classe de l'élément de projet ici, par exemple, je vais la

05:56.856 --> 06:00.164
saisir et la déplacer dans l'élément de projet. ts, pour être précis, j'y

06:00.164 --> 06:04.550
ajouterai également un namespace app et le déplacerai dans le

06:04.550 --> 06:06.680
namespace app, puis j'exporterai

06:06.680 --> 06:09.060
également cette classe.

06:09.060 --> 06:11.413
Maintenant, ce qui est important, c'est que cela repose sur le

06:12.310 --> 06:14.740
composant, et l'autre, si je sauvegardais maintenant cela, nous

06:14.740 --> 06:16.497
aurions une erreur que le composant n'est pas trouvé

06:16.497 --> 06:19.353
à la fin, donc ici encore, nous devons ajouter cet import où nous avons le chemin

06:19.353 --> 06:24.772
de référence equals et puis ici c'est base-component.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
Il s'agit toujours d'une importation relative ici,

06:27.330 --> 06:29.130
donc puisque c'est dans le même dossier,

06:29.130 --> 06:32.320
nous n'avons pas besoin de dire components slash ici, parce que

06:32.320 --> 06:34.608
nous n'avons pas besoin d'aller dans le dossier

06:34.608 --> 06:37.300
components d'abord ce fichier, le fichier d'élément

06:37.300 --> 06:38.729
de projet, est déjà dans le dossier

06:38.729 --> 06:40.617
components donc relativement à ce fichier

06:40.617 --> 06:44.913
le composant de base est importé juste en utilisant son nom ici.

06:46.060 --> 06:48.030
Donc maintenant le projet est là.

06:48.030 --> 06:51.963
Maintenant, bien sûr, dans l'application. ts, nous avons également obtenu la liste des projets.

06:55.940 --> 07:00.662
Prenons-le, déplaçons-le vers le fichier ts de la liste du projet ici et

07:00.662 --> 07:04.940
là dans un espace de nom App, et puis aussi ici à l'entrée du projet,

07:04.940 --> 07:07.050
prenons-le, coupons-le d'ici,

07:08.010 --> 07:14.480
de l'espace de nom App dans l'application.

07:14.480 --> 07:14.480
ts,

07:14.480 --> 07:17.097
et le déplacer dans le fichier ts d'entrée du projet

07:17.097 --> 07:19.857
et là dans un espace de noms d'application.

07:20.750 --> 07:24.350
Maintenant, il est important comme avant, d'exporter cette classe

07:24.350 --> 07:27.550
ici, l'élément de projet et aussi la liste de projet, bien sûr,

07:27.550 --> 07:30.200
tout doit être exporté, avec cela nous obtenons un

07:30.200 --> 07:31.580
tas d'erreurs parce que bien

07:31.580 --> 07:34.343
sûr, il y a encore des importations manquantes.

07:35.200 --> 07:39.930
Dans l'application. ts, nous devons importer tous ces composants maintenant, donc ici

07:39.930 --> 07:42.934
nous devons importer project-input. ts, liste

07:42.934 --> 07:47.380
de projets. ts, puis enregistrez-la.

07:47.380 --> 07:50.240
Maintenant, bien sûr, il se bloque toujours parce que nous avons

07:50.240 --> 07:51.087
plus de choses qui manquent,

07:51.087 --> 07:53.192
dans le projet d'entrée nous utilisons le composant

07:53.192 --> 07:55.541
juste comme nous le faisons dans la liste de projet,

07:55.541 --> 07:57.780
donc juste comme nous l'avons fait dans l'article

07:57.780 --> 08:00.091
de projet, nous devons ajouter cette importation de

08:00.091 --> 08:02.920
composant de base dans le projet d'entrée ts fichier et également

08:02.920 --> 08:05.790
dans la liste de projet ts fichier.

08:05.790 --> 08:08.665
Et avec cela, il compile sans erreurs et voyons

08:08.665 --> 08:10.880
si cela fonctionne aussi, si nous rechargeons

08:10.880 --> 08:15.118
ici et que j'ajoute ceci, c'est glissable et déposable, et tout cela

08:15.118 --> 08:16.540
semble fonctionner comme

08:16.540 --> 08:19.480
il se doit, et maintenant nous divisons ceci à travers

08:19.480 --> 08:22.340
plusieurs fichiers.

08:22.340 --> 08:23.978
Nous obtenons toujours un seul fichier à

08:23.978 --> 08:26.010
la fin, mais lorsque nous travaillons sur notre code,

08:26.010 --> 08:28.110
il est maintenant beaucoup plus facile à gérer.

08:28.110 --> 08:30.978
Parce que nous avons des fichiers plus petits et ciblés où nous pouvons

08:30.978 --> 08:33.829
trouver rapidement ce que nous cherchons et où nous n'avons pas

08:33.829 --> 08:36.358
besoin de faire défiler un énorme fichier pour trouver l'endroit

08:36.358 --> 08:39.363
sur lequel nous voulons travailler ensuite.
