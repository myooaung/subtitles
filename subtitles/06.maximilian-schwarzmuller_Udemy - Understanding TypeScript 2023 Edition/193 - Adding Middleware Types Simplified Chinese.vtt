WEBVTT

00:02.210 --> 00:05.490
教师：我们启动并运行了这台基本的虚拟服务器,

00:05.490 --> 00:08.380
但这台服务器当然没有做任何有用的事情｡

00:08.380 --> 00:11.430
现在, 我想构建一个非常简单的rest API,

00:11.430 --> 00:13.110
为此, 我将在源文件夹中创建一个新的子文件夹,

00:13.110 --> 00:16.830
并将其命名为routes｡

00:16.830 --> 00:19.870
在这里, 我将添加一个文件, 该文件应该处理这个rest

00:19.870 --> 00:25.710
API的某组路由, 现在由您决定要构建哪种API｡

00:25.710 --> 00:30.770
我将在这里构建一个待办事项API, 如果您在TypeScript部分中使用React,

00:30.770 --> 00:34.530
这听起来很熟悉, 因为我们也在那里构建了一个待办事项应用程序,

00:34.530 --> 00:38.710
但这与该部分完全分离, 它不会与React一起工作, 当然, 您可以自行连接它,

00:38.710 --> 00:41.250
但在这里我将构建一个简单的待办事项API,

00:41.250 --> 00:48.350
以便我们了解TypeScript如何与Node和Express一起工作｡

00:48.350 --> 00:51.400
我们正在构建的应用程序并不太复杂,

00:51.400 --> 00:54.760
但它将包含许多有趣的概念｡

00:54.760 --> 01:01.800
因此, 在这里, 我们将通过添加一个todos来添加我的todo路径｡

01:01.800 --> 01:01.800
ts文件,

01:01.800 --> 01:06.630
在那里, 我现在想使用Express｡ js来注册一些路由｡

01:06.630 --> 01:09.730
为此, 我将从Express中导入一些内容,

01:09.730 --> 01:13.700
现在这些内容实际上是路由器｡

01:13.700 --> 01:16.160
常见的JS语法通常是使用require

01:16.160 --> 01:25.673
express导入Express, 然后在新的一行中, 您经常会看到我们在此处执行此操作的代码｡

01:27.090 --> 01:28.180
这是你可以做的,

01:28.180 --> 01:30.130
但这里我将像这样导入｡

01:31.130 --> 01:36.750
现在, 这给了我们一个路由器, 我们可以简单地在这里调用Router作为一个函数,

01:36.750 --> 01:39.300
这允许我们注册中间件, 所以最后,

01:39.300 --> 01:45.540
为传入的请求路由端点, 然后我们在这些请求上执行一些逻辑｡

01:45.540 --> 01:48.980
现在对于todo应用程序, 我想注册一些基本的路径,

01:48.980 --> 01:53.700
一个在斜杠nothing处的post路径, 我们可以在这里添加一个新的todo,

01:53.700 --> 01:55.760
所以这里我们需要一些代码, 一些函数,

01:55.760 --> 02:03.380
然后在某个地方添加一个todo, 现在我将不指定任何代码, 只是在这里设置一般的路径｡

02:03.380 --> 02:05.110
我们有post请求,

02:05.110 --> 02:08.770
然后是get请求, 比如说, get all todos,

02:08.770 --> 02:15.520
再比如说patch请求来更新todos, 我希望在那里得到id, URL中的一个动态段,

02:15.520 --> 02:22.700
然后这里还有一个delete请求来按id删除todos｡

02:22.700 --> 02:28.620
这些是我的路由, 现在我们可以将配置的路由器作为默认值导出到该文件中｡

02:28.620 --> 02:30.930
现在这些路线上不会发生什么事, 对吧？

02:30.930 --> 02:32.510
我还没有设置任何在请求到达这些端点时执行的函数,

02:32.510 --> 02:35.830
但我们至少现在知道了我们需要哪些路由,

02:35.830 --> 02:41.740
我们将在后面的第二步中添加这些函数｡

02:41.740 --> 02:48.320
现在, 让我们在这里连接路由器, 在应用程序中配置路由到我们正在运行的服务器｡

02:48.320 --> 02:48.320
ts,

02:48.320 --> 02:54.290
为此, 我们只需导入我们的, 比如todoRoutes from｡

02:54.290 --> 02:54.290
/路由/待办事项｡ 

02:56.040 --> 03:01.610
因此, 我们将todos中导出的路由器导入到应用程序中｡

03:01.610 --> 03:01.610
ts,

03:01.610 --> 03:08.340
现在, 我们需要使用app将其连接到正在运行的Express应用程序｡

03:08.340 --> 03:08.340
使用,

03:08.340 --> 03:14.600
然后假设我们希望将所有以/todos开头的请求转发到我们的todoRoutes,

03:14.600 --> 03:18.703
因此将不会在那里处理以不同URL为目标的请求｡

03:19.920 --> 03:25.983
说到处理, 在我们正在使用的Express中间件设置中, 我们还可以设置一个中间件来处理错误,

03:25.983 --> 03:33.610
因此, 我们可以使用app来处理代码中任何可能抛出的错误｡

03:33.610 --> 03:33.610
使用,

03:33.610 --> 03:37.470
然后我们在这里设置了一个典型的中间件函数, 在这里我们可以获得请求､

03:37.470 --> 03:45.430
响应和下一个函数, 同样, 这一切都需要您了解一些Express｡

03:45.430 --> 03:45.430
js并知道节点｡

03:45.430 --> 03:52.970
js中, 我不会深入研究中间件在Express中是如何工作的以及中间件是什么｡

03:52.970 --> 03:57.150
这是一个常规的中间件函数, 您应该从Express中了解到它｡

03:57.150 --> 03:57.150
js,

03:57.150 --> 03:59.050
您可能还知道该函数的替代方法,

03:59.050 --> 04:07.350
该函数采用四个参数, 其中第一个参数是潜在错误, 现在这是一个错误处理中间件函数,

04:07.350 --> 04:18.750
如果在此之前的任何其他中间件中出现错误, Express将自动触发该函数｡

04:18.750 --> 04:21.200
这是我的错误处理中间件函数,

04:21.200 --> 04:23.380
你看, 这里有一堆错误｡

04:23.380 --> 04:26.260
有很多错误, 因为这些都是any类型,

04:26.260 --> 04:33.080
我们也没有使用所有这些值, 但是让我说清楚我们这里有哪种类型｡

04:33.080 --> 04:39.890
这将是Error类型, 这将是express类型｡

04:39.890 --> 04:39.890
Request,

04:39.890 --> 04:46.670
或者您只需在此处导入Request作为来自Express的额外命名导入, 如果您安装了Express类型（我们也安装了）,

04:46.670 --> 04:56.310
则此操作也有效, 然后在此处我们还安装了Response和NextFunction, 然后我们可以在此处调整类型, 这是Request类型, 这是Response类型,

04:56.310 --> 05:06.680
这就是我们可以执行的NextFunction, 它让请求继续它的行程, 到达队列中的下一个中间件｡

05:06.680 --> 05:08.590
这就是我们的错误处理中间件, 每当我们的其他中间件中有错误时,

05:08.590 --> 05:10.820
它就会触发, 在这里, 我们可以发送回一个响应,

05:10.820 --> 05:22.690
比如说JSON数据, 其中我们有一个错误消息｡

05:22.690 --> 05:22.690
消息,

05:22.855 --> 05:24.630
以及我们可能设置位置, 错误 我是指消息,

05:24.630 --> 05:32.460
我们还可以设置状态代码500, 当然, 您可以拥有比我这里提供的更详细的错误处理功能,

05:32.460 --> 05:35.020
但这样一来, 我们添加了路由,

05:35.020 --> 05:43.103
添加了错误处理中间件, 我们为什么不在下一节课中为该API添加一些逻辑呢？
