WEBVTT

00:02.090 --> 00:05.740
Narrator: I to jest to dla interfejsów i klas.

00:05.740 --> 00:08.190
W tym module przyjrzeliśmy się szczegółowo klasom i

00:08.190 --> 00:09.630
temu, co możemy w nich zrobić.

00:09.630 --> 00:11.390
Klasy i TypeScript, koniec

00:11.390 --> 00:14.130
końców, po prostu budują się na klasach dla

00:14.130 --> 00:17.180
JavaScript, a te już podsumowałem nieco wcześniej

00:17.180 --> 00:18.720
w tym module.

00:18.720 --> 00:20.710
Interfejsy to zupełnie inna sprawa.

00:20.710 --> 00:22.600
Istnieją one tylko w TypeScript.

00:22.600 --> 00:24.670
Są one czystą cechą TypeScript,

00:24.670 --> 00:27.390
pomagając ci pisać jasny, jasno ustrukturyzowany

00:27.390 --> 00:29.450
i bardzo wyraźny kod.

00:29.450 --> 00:33.010
Mogą pomóc ci zmusić klasy do posiadania pewnych cech lub

00:33.010 --> 00:36.810
obiektów w ogóle do posiadania określonej struktury.

00:36.810 --> 00:39.860
Mogą być używane jako typ funkcji, jak się nauczyłeś.

00:39.860 --> 00:42.490
Pozwalają na opcjonalne właściwości i wszystkie

00:42.490 --> 00:45.200
dlatego opcjonalne metody, przy okazji, jeśli

00:45.200 --> 00:48.290
dodasz znak zapytania po nazwie metody.

00:48.290 --> 00:50.190
Więc to jest coś, co można wykorzystać.

00:50.190 --> 00:53.210
I, jak właśnie zobaczyłeś, podczas kompilacji po spełnieniu

00:53.210 --> 00:55.870
ich roli polegającej na umożliwieniu TypeScriptowi

00:55.870 --> 00:57.680
sprawdzenia twojego kodu, nic nie

00:57.680 --> 01:00.410
jest pomijane dla tych interfejsów.

01:00.410 --> 01:02.300
Kod jest po prostu wyrzucany.

01:02.300 --> 01:05.080
Interfejsy, mimo wszystko, są potężną

01:05.080 --> 01:07.420
cechą, która pozwala wymusić na klasach

01:07.420 --> 01:09.140
lub obiektach pewną strukturę

01:09.140 --> 01:12.400
i jasno opisać swój pomysł na to, jak obiekt powinien

01:12.400 --> 01:14.810
wyglądać.

01:14.810 --> 01:18.650
Teraz, jak się dowiedziałeś, w większości przypadków możesz zastąpić je

01:18.650 --> 01:21.120
typami niestandardowymi, jeśli chciałeś.

01:21.120 --> 01:23.580
Możesz również zaimplementować typy niestandardowe,

01:23.580 --> 01:27.700
ale po prostu bardziej powszechne jest używanie interfejsu do tego, aby użyć interfejsu,

01:27.700 --> 01:32.180
jeśli chcesz opisać obiekt, niż jeśli chcesz go zaimplementować.

01:32.180 --> 01:33.980
Wszystko tam z powodów historycznych,

01:33.980 --> 01:36.490
ponieważ we wcześniejszych dniach TypeScript, typy

01:36.490 --> 01:38.980
niestandardowe nie mogły być implementowane lub

01:38.980 --> 01:40.710
używane jak interfejsy.

01:40.710 --> 01:42.610
Teraz jest więcej elastyczności, ale

01:42.610 --> 01:45.150
nadal zaleca się, aby przejść do interfejsów, jeśli

01:45.150 --> 01:46.420
pracujesz z obiektami i jeśli

01:46.420 --> 01:48.680
chcesz opisać ich strukturę.

01:48.680 --> 01:50.620
Będziemy je też widzieć w całym tym

01:50.620 --> 01:51.883
kursie raz po raz.
