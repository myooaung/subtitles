WEBVTT

00:02.200 --> 00:03.970
講師：さて､ このモジュールはここまでです｡ 

00:03.970 --> 00:07.790
もちろん､ 最新のJavaScriptには､ 他にもいくつかの優れた機能があります｡

00:07.790 --> 00:09.810
例えば､ クラスモジュールでクラスを取り上げますし､

00:09.810 --> 00:13.470
一般的にこれはJavaScriptのコースではありません｡

00:13.470 --> 00:20.140
TypeScriptとあまり関係のないJavaScriptの知識であなたを退屈させたくはないのです｡

00:20.140 --> 00:22.700
これらの具体的な機能について触れておきたいのは､

00:22.700 --> 00:29.580
TypeScriptがこれらの機能を古いブラウザでも動作するように使う手助けをしてくれるということがわかったからです｡

00:29.580 --> 00:32.920
それは､ 決して忘れてはならないことだからです｡ 

00:32.920 --> 00:35.600
あなたのコードはコンパイルされます｡ 

00:35.600 --> 00:38.690
現在､ ターゲットをES6に設定しているため､

00:38.690 --> 00:46.030
distフォルダをチェックすると､ アプリのJSファイルでも定数がすべて利用できることがわかります｡

00:46.030 --> 00:48.070
オブジェクトのデストラクチャリング､ これらの機能はすべてES6でサポートされているので､

00:48.070 --> 00:52.480
そこに好きなようにする方法があります｡

00:52.480 --> 00:55.230
ターゲットをES5に設定し､ libをコメントアウトして､

00:55.230 --> 01:05.290
ES5ターゲット用に正しいlibがインポートされるようにすると､ 生成されるコードがかなり違って見えることがわかると思います｡

01:05.290 --> 01:08.140
今はvarを使っているので､ TypeScriptはES5

01:08.140 --> 01:12.960
JavaScriptでサポートされていない特定の構文に対する回避策を見つけなければならなかったので､

01:12.960 --> 01:14.730
かなり長くなりました｡

01:14.730 --> 01:18.240
例えば､ デ・ストラクチュアリング構文が削除されました｡ 

01:18.240 --> 01:21.140
だから､ それは常に念頭に置いておきたい大切なことです｡ 

01:21.140 --> 01:26.440
TypeScriptは､ TypeScriptだけの機能から通常のJavaScriptにコンパイルするだけでなく､

01:26.440 --> 01:35.433
TypeScriptに指示すれば､ 最新のJavaScriptから古いJavaScriptまで､ すべてのコードをコンパイルします｡
