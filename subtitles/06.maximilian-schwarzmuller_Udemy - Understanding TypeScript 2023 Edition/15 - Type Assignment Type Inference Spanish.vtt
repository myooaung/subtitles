WEBVTT

00:02.270 --> 00:03.850
Instructor: Así que estamos

00:03.850 --> 00:07.450
usando los tipos básicos de número, booleano y cadena.

00:07.450 --> 00:10.840
Y aquí en la lista de parámetros de esta función, siempre

00:10.840 --> 00:13.970
estamos asignando explícitamente los tipos con dos

00:13.970 --> 00:16.540
puntos después del nombre del parámetro,

00:16.540 --> 00:18.410
y luego el nombre del tipo.

00:18.410 --> 00:21.350
Así que aquí, los nombres son número, booleano, cadena.

00:21.350 --> 00:23.100
Y en caso de que te lo preguntes, estos

00:23.100 --> 00:25.420
son ahora identificadores especiales.

00:25.420 --> 00:28.530
Este conjunto, aquí, es una sintaxis especial que es

00:28.530 --> 00:30.170
añadido por TypeScript.

00:30.170 --> 00:32.900
No forma parte del código JavaScript compilado.

00:32.900 --> 00:35.040
Si revisamos ese código aquí, estas asignaciones

00:35.040 --> 00:37.280
de tipo han desaparecido, porque JavaScript

00:37.280 --> 00:39.530
no las soporta.

00:39.530 --> 00:42.390
Esta cosa de dos puntos después de una variable, o

00:42.390 --> 00:43.920
después de un parámetro.

00:43.920 --> 00:46.320
Y luego número, booleano y cadena.

00:46.320 --> 00:48.290
Estas palabras clave especiales.

00:48.290 --> 00:50.840
Esto es introducido por TypeScript.

00:50.840 --> 00:53.500
El compilador de TypeScript lo entiende.

00:53.500 --> 00:55.480
El IDE aquí soporta TypeScript, y por

00:55.480 --> 00:58.580
lo tanto no se queja de estas palabras clave especiales.

00:58.580 --> 01:01.760
JavaScript no entiende esta sintaxis.

01:01.760 --> 01:04.590
No entiende los dos puntos después de un parámetro, o los

01:04.590 --> 01:06.560
dos puntos después de una variable, y luego

01:06.560 --> 01:09.190
la palabra clave especial número o cadena.

01:09.190 --> 01:11.540
JavaScript no entiende esto y por lo tanto esto

01:11.540 --> 01:13.560
no es parte de la salida de JavaScript.

01:13.560 --> 01:15.920
En realidad sólo lo utiliza el compilador de TypeScript.

01:15.920 --> 01:18.130
Y luego, bueno, es un compilador

01:18.130 --> 01:21.820
porque convierte este código en código JavaScript.

01:21.820 --> 01:24.880
Nota al margen, también se ve que cambia const por var pero

01:24.880 --> 01:27.700
eso es algo que volveré a tratar más adelante.

01:27.700 --> 01:30.590
Así que, tenemos nuestras asignaciones de tipo explícitas

01:30.590 --> 01:33.060
aquí y sólo es entendido por TypeScript.

01:33.060 --> 01:35.763
Genial, ¿por qué no los tenemos ahí abajo?

01:36.880 --> 01:39.890
No tengo asignaciones de tipo explícitas aquí.

01:39.890 --> 01:41.180
Y, por cierto, tampoco aquí

01:41.180 --> 01:43.450
cuando calculamos el resultado, por ejemplo,

01:43.450 --> 01:45.530
porque TypeScript tiene una característica

01:45.530 --> 01:48.400
incorporada que se llama inferencia de tipos.

01:48.400 --> 01:51.000
Esto significa que TypeScript hace todo

01:51.000 --> 01:53.010
lo posible, y lo hace bastante

01:53.010 --> 01:56.400
bien, para entender qué tipo tienes en una determinada

01:56.400 --> 01:58.860
variable o constante.

01:58.860 --> 02:02.300
Y aquí, por ejemplo, entiende que número1 siempre

02:02.300 --> 02:05.780
será de tipo número al final, porque lo inicializas

02:05.780 --> 02:08.020
con un número.

02:08.020 --> 02:09.950
Ahora, esto en realidad es una constante, por

02:09.950 --> 02:11.740
lo que es aún más específico que eso.

02:11.740 --> 02:15.350
Y el tipo que identifica aquí no es cualquier número,

02:15.350 --> 02:17.490
es el número cinco.

02:17.490 --> 02:20.110
Porque no podrás asignar un nuevo número,

02:20.110 --> 02:23.870
o un nuevo valor a un valor constante de todos modos.

02:23.870 --> 02:25.840
Si se cambiara esto por una variable,

02:25.840 --> 02:28.460
así que si se usara let en su lugar, entonces por supuesto

02:28.460 --> 02:30.180
esto no rompería nada.

02:30.180 --> 02:32.940
Podemos usar una variable allí, puede que no sea la mejor práctica

02:32.940 --> 02:34.540
porque este valor nunca cambia pero

02:34.540 --> 02:36.210
tampoco es horrible.

02:36.210 --> 02:38.260
Pero ahora si pasamos por encima de esto vemos

02:38.260 --> 02:41.210
que TypeScript no dice, vale, esto tiene que ser un cinco.

02:41.210 --> 02:45.510
Pero aún así detecta que el tipo aquí es un número.

02:45.510 --> 02:49.260
Ahora, absolutamente podríamos escribir este código aquí por nuestra cuenta.

02:49.260 --> 02:51.970
Podemos añadir dos puntos después del nombre de la

02:51.970 --> 02:53.870
variable a la izquierda del signo igual,

02:53.870 --> 02:55.590
y luego el nombre del tipo.

02:55.590 --> 02:56.880
Así que, básicamente lo mismo

02:56.880 --> 02:59.470
que hicimos en los parámetros de esta función.

02:59.470 --> 03:01.860
Pero, esto es redundante y de hecho tampoco

03:01.860 --> 03:04.620
se considera una buena práctica.

03:04.620 --> 03:06.790
Porque TypeScript es capaz de inferir

03:06.790 --> 03:09.990
perfectamente este tipo a partir de ahí.

03:09.990 --> 03:13.690
Por lo tanto, asignar esto no es una buena idea.

03:13.690 --> 03:16.420
Esto sólo cambia si se crea esta variable

03:16.420 --> 03:18.053
de forma no asignada.

03:19.000 --> 03:22.130
Así, si no se inicializa inmediatamente.

03:22.130 --> 03:25.700
Entonces, es una buena práctica decirle a TypeScript

03:25.700 --> 03:29.070
qué valor se almacenará finalmente allí.

03:29.070 --> 03:32.590
Para que cuando luego le asignes un valor, y por supuesto es un poco

03:32.590 --> 03:34.080
redundante aquí dividir esto

03:34.080 --> 03:35.320
en dos líneas.

03:35.320 --> 03:37.800
Sólo lo hago a modo de demostración.

03:37.800 --> 03:39.480
Pero ahora si asigno esto aquí,

03:39.480 --> 03:42.460
esto se rompe porque le dije a TypeScript por adelantado

03:42.460 --> 03:44.630
que esto será de tipo número.

03:44.630 --> 03:45.610
No tienes que hacer eso.

03:45.610 --> 03:47.420
También funciona si no lo haces.

03:47.420 --> 03:50.330
Pero ahora también podrías añadir este cinco y no obtendrías

03:50.330 --> 03:51.630
un error porque no le estás

03:51.630 --> 03:53.470
diciendo a TypeScript nada sobre

03:53.470 --> 03:55.350
el tipo que se almacenará en esta variable

03:55.350 --> 03:56.975
y por tanto TypeScript permite

03:56.975 --> 03:59.630
cualquier tipo.

03:59.630 --> 04:02.600
Si en vez de eso añades dos puntos número aquí, le estás

04:02.600 --> 04:05.417
diciendo a TypeScript, "Oye, eventualmente, "un

04:05.417 --> 04:07.370
número será almacenado ahí. Y por lo tanto, si más tarde almacena

04:07.370 --> 04:10.060
algo más allí, como en este caso donde almacenamos

04:10.060 --> 04:12.470
una cadena, obtendrá un error aquí en el IDE,

04:12.470 --> 04:15.170
y por supuesto también si compila su código.

04:15.170 --> 04:17.570
Obtendremos el error que ya vimos antes.

04:17.570 --> 04:20.253
Así es como se pueden asignar los tipos.

04:22.300 --> 04:24.920
Ahora, incluso si TypeScript acaba de inferir

04:24.920 --> 04:27.830
un tipo, y déjame arreglar esto, te gritará si rompes

04:27.830 --> 04:29.310
ese tipo inferido.

04:29.310 --> 04:32.720
En realidad, es un error decir incluso porque por

04:32.720 --> 04:35.670
supuesto que lo hace, ¿por qué no lo haría?

04:35.670 --> 04:37.000
La inferencia de tipos está ahí para ahorrarte

04:37.000 --> 04:39.750
código, para evitar que tengas que asignar manualmente un tipo.

04:39.750 --> 04:42.730
Por supuesto, TypeScript te grita si utilizas

04:42.730 --> 04:44.520
un tipo incorrecto, un tipo

04:44.520 --> 04:46.510
que no ha deducido.

04:46.510 --> 04:48.640
Por ejemplo, aquí si resultPhrase

04:48.640 --> 04:52.460
se crea con let para que sea variable, entonces TypeScript aquí

04:52.460 --> 04:54.000
infiere que esto será de tipo

04:54.000 --> 04:57.670
string porque lo inicializamos con una cadena.

04:57.670 --> 04:59.850
Así que esto es básicamente el equivalente

04:59.850 --> 05:03.060
a no inicializarlo, y establecer el tipo por nuestra cuenta, y

05:03.060 --> 05:04.970
luego asignar un valor más tarde.

05:04.970 --> 05:07.410
Ahora, si cambiamos resultPhrase a,

05:07.410 --> 05:12.310
digamos, cero aquí, por la razón que sea que queramos hacer eso, bueno entonces

05:12.310 --> 05:15.660
obtenemos un error aquí que el tipo cero no es asignable

05:15.660 --> 05:17.330
de tipo string.

05:17.330 --> 05:21.210
Y eso tiene sentido, ¿no?

05:21.210 --> 05:22.690
TypeScript dedujo que queríamos

05:22.690 --> 05:25.430
almacenar una cadena, ahora estamos intentando almacenar

05:25.430 --> 05:27.290
un número, obtenemos un error.

05:27.290 --> 05:28.530
Ese es el trabajo, la tarea principal de TypeScript.

05:28.530 --> 05:33.000
Comprobar los tipos y gritarnos si

05:33.000 --> 05:35.280
los usamos mal.
