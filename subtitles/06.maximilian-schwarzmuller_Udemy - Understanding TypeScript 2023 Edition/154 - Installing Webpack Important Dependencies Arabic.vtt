WEBVTT

00:02.160 --> 00:05.373
-: لذا بالعودة إلى مشروعنا ، إذا كنت ترغب في استخدام حزمة الويب هناك

00:07.223 --> 00:09.948
، فسوف أقوم أولاً بإنهاء التجميع الخاص بي وخادم التطوير

00:09.948 --> 00:10.870
الحالي ، ثم stat ، تأكد

00:10.870 --> 00:13.440
من أنه يمكننا استخدام حزمة الويب هناك.

00:13.440 --> 00:16.420
الآن بما أن هذا ملف بالفعل من ملف الحزمة dot json

00:16.420 --> 00:19.462
، يمكننا استخدام NPM لتثبيت المزيد من التبعيات

00:19.462 --> 00:21.050
في هذا المشروع.

00:21.050 --> 00:23.410
لذلك ببساطة ، نحتاج إلى المزيد من مكتبات الطرف

00:23.410 --> 00:24.940
الثالث في هذا المشروع.

00:24.940 --> 00:28.610
وهنا لا أقصد مكتبات الطرف الثالث التي توفر وظائف معينة

00:28.610 --> 00:31.480
باستخدام الكود الخاص بنا ، ولكن بدلاً من

00:31.480 --> 00:33.930
ذلك مكتبات الطرف الثالث التي تساعدنا

00:33.930 --> 00:37.157
في إعداد سير عمل وتكوين للمشروع يجعل التطوير

00:37.157 --> 00:40.430
فعالاً للغاية بالنسبة لنا.

00:40.430 --> 00:45.110
نقوم بذلك مع تثبيت NPM ، و dash dash safe dash

00:45.110 --> 00:48.600
dev للإشارة إلى أنها تبعية تطوير

00:48.600 --> 00:53.600
فقط ، ثم webpack webpack dash CLI ، webpack dash

00:53.713 --> 00:58.713
dev dash server typecript and ts loader.

01:01.030 --> 01:03.040
هذه مجموعة من الحزم وسأقول

01:03.040 --> 01:04.800
ما يفعلونه في ثانية.

01:04.800 --> 01:06.680
لذلك دعونا أولاً نضغط على Enter

01:06.680 --> 01:08.485
ونتأكد من أن كل هذه الأشياء قد

01:08.485 --> 01:10.801
تم تثبيتها الآن في مشروعنا هنا ، وبعد ذلك

01:10.801 --> 01:14.100
سنلقي نظرة على كل حزمة ونرى لماذا قمنا بتثبيتها ، لذلك

01:14.100 --> 01:16.290
دعونا ننتظر حتى ينتهي هذا.

01:16.290 --> 01:18.530
لذلك انتهى من التثبيت بالنسبة لي

01:18.530 --> 01:21.710
هنا ، والآن بعد ذلك ، دعنا نحلل ما قمنا بتثبيته.

01:21.710 --> 01:25.380
في الحزمة dot json ، قسم تبعيات dev الجديد ، أو كان موجودًا

01:25.380 --> 01:27.063
بالفعل ، ولكن لدينا الآن الكثير

01:27.063 --> 01:29.474
من الحزم الجديدة هناك ، يجب أن أقول ، تمت

01:29.474 --> 01:31.290
إضافة هذه الحزم.

01:31.290 --> 01:33.690
الآن ماذا تفعل كل هذه الحزم؟

01:33.690 --> 01:35.460
لنبدأ مع حزمة الويب.

01:35.460 --> 01:37.580
Webpack هي الأداة التي تحدثت عنها

01:37.580 --> 01:40.080
للتو ، إنها قلب هذا الإعداد بالكامل

01:40.080 --> 01:41.780
الذي سننشئه الآن.

01:41.780 --> 01:43.980
إنها أداة تسمح لنا بتوصيل وظائف

01:43.980 --> 01:47.150
معينة لتجميع الكود الخاص بنا وأيضًا لتحويل

01:47.150 --> 01:49.210
الكود الخاص بنا.

01:49.210 --> 01:52.470
وهذا تحويل جزء الكود مهم ، فنحن لدينا مشروع

01:52.470 --> 01:54.740
مطبوع هنا ، أليس كذلك؟

01:54.740 --> 01:56.620
الآن بالطبع يمكننا بالتأكيد استخدام

01:56.620 --> 02:00.220
حزمة الويب لتجميع كل مخرجات جافا سكريبت معًا ، ولكن سيكون من

02:00.220 --> 02:03.310
الأفضل أن تقوم حزمة الويب بالأمرين معًا.

02:03.310 --> 02:06.250
قم بتحويل شفرة الكتابة الخاصة بنا إلى JavaScript

02:06.250 --> 02:10.180
، ثم قم بالفعل بإصدار ملف Javascript مجمع ، ويمكن لـ webpack

02:10.180 --> 02:13.420
القيام بذلك لحسن الحظ.

02:13.420 --> 02:16.610
نحتاج إلى webpack CLI لتشغيل أوامر webpack

02:16.610 --> 02:18.922
في مشروعنا ، وخادم webpack dev

02:18.922 --> 02:21.603
للحصول على خادم التطوير المدمج ، والذي

02:21.603 --> 02:24.286
يبدأ webpack تحت الغطاء ، والذي يراقب

02:24.286 --> 02:27.056
ملفاتنا من أجل التغييرات ، ويطلق حزمة

02:27.056 --> 02:30.180
الويب تلقائيًا لإعادة الترجمة عندما يتغير

02:30.180 --> 02:34.760
شيء ما ، و أي السيارات يخدم صفحتنا.

02:34.760 --> 02:37.300
ومن ثم حصلنا على محمل مطبوع ومُحمل

02:37.300 --> 02:39.460
مطبوع ، مُحمل ts هنا.

02:39.460 --> 02:42.850
الآن قمنا بالفعل بتثبيت الكتابة المطبوعة على مستوى العالم على

02:42.850 --> 02:46.208
أجهزتنا ، وهذا هو السبب في أننا قادرون على تشغيل tsc dash w.

02:46.208 --> 02:49.760
الآن من الممارسات الجيدة التثبيت التلقائي لنسخة

02:49.760 --> 02:53.450
من الكتابة المطبوعة لكل مشروع ، بحيث تحصل لهذا المشروع

02:53.450 --> 02:56.000
على نسخة مطبوعة محددة.

02:56.000 --> 02:58.320
المزايا التي تتمثل في أنه إذا قمت بتغيير

02:58.320 --> 03:01.624
إصدار الكتابة المطبوعة العالمية ، فلن تكسر إصدار مشروعك

03:01.624 --> 03:05.170
، أو إعداد مشروعك إذا كانت هناك تغييرات فاصلة في الكتابة

03:05.170 --> 03:07.280
المطبوعة نفسها ، حتى نتمكن من تأمين

03:07.280 --> 03:10.340
إصدار معين من الكتابة المطبوعة لمشروع ما ، وهذا

03:10.340 --> 03:13.880
لماذا قمنا بتثبيته بشكل منفصل هنا.

03:13.880 --> 03:16.440
ومحمل ts الآن عبارة عن حزمة ستعمل

03:16.440 --> 03:18.380
مع حزمة الويب.

03:18.380 --> 03:21.068
أداة تحميل ts عبارة عن حزمة تخبر webpack

03:21.068 --> 03:24.396
بكيفية تحويل التعليمات البرمجية المطبوعة إلى Javascript

03:24.396 --> 03:29.180
، بحيث تكون حزمة الويب قادرة على القيام بالأمرين معًا ، وتجميع الكود الخاص

03:29.180 --> 03:30.920
بنا ، بمساعدة أداة تحميل الكتابة

03:30.920 --> 03:33.370
، والتي بدورها تستخدم برنامج التحويل

03:33.370 --> 03:36.665
البرمجي من نوع الكتابة أسفل الغطاء ، ثم webpack قادر

03:36.665 --> 03:41.580
أيضًا على تجميع ملفات javascript المنبعثة في ملف js مجمع في ملف كود واحد

03:41.580 --> 03:44.260
مجمع.

03:44.260 --> 03:47.440
حسنًا ، ومع ذلك ، دعنا نبدأ ببساطة ودعنا ننشئ

03:47.440 --> 03:50.852
مشروع webpack حتى نتمكن من استخدام webpack

03:50.852 --> 03:53.223
لكل هذه الأشياء الرائعة.
