WEBVTT

1
00:00:02.400 --> 00:00:04.390
<v Instructor>So we rendered our first form</v>

2
00:00:04.390 --> 00:00:07.240
but what you'll notice is that the styling is a bit off,

3
00:00:07.240 --> 00:00:09.200
I mean the form looks okay,

4
00:00:09.200 --> 00:00:11.910
but some distance between the edges of our screen

5
00:00:11.910 --> 00:00:13.870
and the form would be nice.

6
00:00:13.870 --> 00:00:15.830
If you dive into the app.css file

7
00:00:15.830 --> 00:00:18.360
you will actually detect that there we have

8
00:00:18.360 --> 00:00:21.050
a user input ID selector.

9
00:00:21.050 --> 00:00:23.330
Were we do add some margin paddings,

10
00:00:23.330 --> 00:00:25.630
that doesn't sound too bad,

11
00:00:25.630 --> 00:00:28.060
so actually what we can do is an app.ts

12
00:00:28.060 --> 00:00:31.740
when we create our element here or when we get access to it.

13
00:00:31.740 --> 00:00:34.520
We can reach out to the element and add an ID here

14
00:00:34.520 --> 00:00:36.840
which would be user-input.

15
00:00:36.840 --> 00:00:39.740
This will make sure that the rendered element has this ID

16
00:00:39.740 --> 00:00:42.800
in hence if this reloads this looks much nicer.

17
00:00:42.800 --> 00:00:45.100
If we inspect this in the browser depth we see

18
00:00:45.100 --> 00:00:49.320
the ID here and that's the reason for this better styling.

19
00:00:49.320 --> 00:00:51.940
With that we're already doing the next step,

20
00:00:51.940 --> 00:00:54.010
we're interacting with the element.

21
00:00:54.010 --> 00:00:56.980
Now this is not the only interaction I wanna do.

22
00:00:56.980 --> 00:00:58.770
Since we have a form here

23
00:00:58.770 --> 00:01:01.870
I wanna get access to the different form inputs we have here

24
00:01:01.870 --> 00:01:05.910
so that we can read the values when the form gets submitted,

25
00:01:05.910 --> 00:01:08.800
and that we also then set up a event listener here

26
00:01:08.800 --> 00:01:12.160
to the submission, and validate the user input.

27
00:01:12.160 --> 00:01:15.720
So we need access to the button or to the form overall

28
00:01:15.720 --> 00:01:19.180
to listen for the submission and to all the input elements

29
00:01:19.180 --> 00:01:21.273
to get the latest values from there.

30
00:01:22.360 --> 00:01:25.440
For that here, before we attach everything,

31
00:01:25.440 --> 00:01:28.500
but after I assign my ID to the element here,

32
00:01:28.500 --> 00:01:32.210
I wanna get access to the different inputs in that element

33
00:01:32.210 --> 00:01:35.980
in that form, and I wanna store them as properties

34
00:01:35.980 --> 00:01:39.820
of this class, so I'll add more fields up there

35
00:01:39.820 --> 00:01:44.570
and the first field could be a titleInputElement field.

36
00:01:44.570 --> 00:01:47.167
The type will be HTMLInputElement

37
00:01:48.060 --> 00:01:50.410
write this, and we will not just need it once

38
00:01:50.410 --> 00:01:52.770
we need two other similar fields.

39
00:01:52.770 --> 00:01:55.900
We a descriptionInputElement field

40
00:01:55.900 --> 00:01:57.550
which is a type HTMLInputElement,

41
00:01:58.520 --> 00:02:02.730
and we also need a peopleInputElement field.

42
00:02:02.730 --> 00:02:06.240
Now we can populate these fields here in the constructor,

43
00:02:06.240 --> 00:02:09.500
with this titleInputElement which is

44
00:02:09.500 --> 00:02:11.510
set equal to this.element,

45
00:02:11.510 --> 00:02:13.120
so to our form element,

46
00:02:13.120 --> 00:02:16.390
always keep in mind that's the form element here,

47
00:02:16.390 --> 00:02:21.350
query selector and then query for the title element.

48
00:02:21.350 --> 00:02:25.000
And if you again have a look at index.html we see in there

49
00:02:25.000 --> 00:02:28.410
we got the ID title on this element

50
00:02:28.410 --> 00:02:30.420
so we can query for that,

51
00:02:30.420 --> 00:02:33.323
so in app.ts here in the query selector we can use

52
00:02:33.323 --> 00:02:37.210
#title to select for the title ID element

53
00:02:37.210 --> 00:02:39.750
and store that in titleInputElement.

54
00:02:39.750 --> 00:02:44.070
Now as you know just as with document get element by ID,

55
00:02:44.070 --> 00:02:46.230
typescript has no chance of understanding

56
00:02:46.230 --> 00:02:49.090
that the query selector is going to return

57
00:02:49.090 --> 00:02:50.650
an input element here.

58
00:02:50.650 --> 00:02:53.780
So to tell typescript, I will again use casting,

59
00:02:53.780 --> 00:02:56.020
and cast this to an input element,

60
00:02:56.020 --> 00:02:58.270
and then we can repeat this step twice,

61
00:02:58.270 --> 00:03:00.672
and also sign the descriptionInputElement,

62
00:03:00.672 --> 00:03:03.240
and the peopleInputElement.

63
00:03:03.240 --> 00:03:06.600
Look up the appropriate IDs in the index.html file,

64
00:03:06.600 --> 00:03:10.390
which are surprisingly, I guess, description and people,

65
00:03:10.390 --> 00:03:12.190
and add them to typescript.

66
00:03:12.190 --> 00:03:16.120
So here we're searching for the description ID element,

67
00:03:16.120 --> 00:03:17.720
and here for people.

68
00:03:17.720 --> 00:03:19.510
And with that we got access to

69
00:03:19.510 --> 00:03:22.687
all these elements inside of our class here, or

70
00:03:22.687 --> 00:03:26.593
inside of every object that is created based on the class.

71
00:03:27.600 --> 00:03:29.870
Now we just need to add a listener

72
00:03:29.870 --> 00:03:33.330
to our element, to our form.

73
00:03:33.330 --> 00:03:38.330
For that I'll add another private method configure,

74
00:03:38.440 --> 00:03:39.790
which you don't have to add

75
00:03:39.790 --> 00:03:43.130
but again I wanna keep that separation where we basically

76
00:03:43.130 --> 00:03:47.900
do the selection and rough set up in the constructor.

77
00:03:47.900 --> 00:03:49.340
And then the insertion

78
00:03:49.340 --> 00:03:52.210
or the fine-tuning in separate methods.

79
00:03:52.210 --> 00:03:53.900
And in the configure method

80
00:03:53.900 --> 00:03:57.000
my idea is to set up an event listener,

81
00:03:57.000 --> 00:03:58.970
so here we can reach out to this element

82
00:03:58.970 --> 00:04:01.830
which is the form and add an event listener.

83
00:04:01.830 --> 00:04:04.570
Now since typescript knows that element is a

84
00:04:04.570 --> 00:04:08.580
HTML form element, it actually offers us auto-completion

85
00:04:08.580 --> 00:04:10.770
when we wanna listen to the submit event here

86
00:04:10.770 --> 00:04:12.250
which is great.

87
00:04:12.250 --> 00:04:15.520
Now we just need to bind this to a method

88
00:04:15.520 --> 00:04:17.840
and for that I'll add another private method,

89
00:04:17.840 --> 00:04:20.650
private because I'm never going to access this from

90
00:04:20.650 --> 00:04:23.460
outside of the class, only from inside.

91
00:04:23.460 --> 00:04:26.970
Which I'll name submitHandler, name is totally up to you.

92
00:04:26.970 --> 00:04:29.740
This should be a method which receives an event object,

93
00:04:29.740 --> 00:04:32.750
'tho because we'll bind it to this event listener.

94
00:04:32.750 --> 00:04:34.880
So here we can point at this...

95
00:04:36.460 --> 00:04:38.713
submit handler.

96
00:04:40.180 --> 00:04:42.080
Now we adjust it to make sure that

97
00:04:42.992 --> 00:04:45.040
before we attach all the call configure and

98
00:04:45.040 --> 00:04:46.730
execute this private method,

99
00:04:46.730 --> 00:04:49.330
again its private so from inside the class

100
00:04:49.330 --> 00:04:50.500
we can of course reach it,

101
00:04:50.500 --> 00:04:53.660
from outside you would get a typescript error,

102
00:04:53.660 --> 00:04:56.000
so now this method should trigger

103
00:04:56.000 --> 00:04:59.290
whenever the form is submitted.

104
00:04:59.290 --> 00:05:02.010
In the submit handler I there wanna

105
00:05:02.010 --> 00:05:05.520
get access to my different input values here,

106
00:05:05.520 --> 00:05:07.710
and validate them,

107
00:05:07.710 --> 00:05:10.310
and then of course do something with the inputs.

108
00:05:10.310 --> 00:05:12.700
Now we will worry about the do something part later,

109
00:05:12.700 --> 00:05:15.480
for now let's just get access to them.

110
00:05:15.480 --> 00:05:18.430
For this first of all I will call event.preventDefault

111
00:05:18.430 --> 00:05:20.620
to prevent the default form submission,

112
00:05:20.620 --> 00:05:23.890
which would trigger an HTTP request to be sent

113
00:05:23.890 --> 00:05:25.820
which I don't want here,

114
00:05:25.820 --> 00:05:28.270
and then just to see where this works,

115
00:05:28.270 --> 00:05:32.730
let's print console.log this title Element value,

116
00:05:32.730 --> 00:05:36.250
to print what's currently in the title input element.

117
00:05:36.250 --> 00:05:39.010
If we saved it you see it compiles with no errors,

118
00:05:39.010 --> 00:05:40.560
so that's looking good.

119
00:05:40.560 --> 00:05:44.670
And if we now go to the console here and enter "Hello!",

120
00:05:44.670 --> 00:05:49.440
and click add project, good is that it didn't get submitted,

121
00:05:49.440 --> 00:05:51.657
bad is that we get an error,

122
00:05:51.657 --> 00:05:54.620
"Cannot read property 'value' of undefined."

123
00:05:54.620 --> 00:05:56.173
Now what's going wrong here?

124
00:05:57.730 --> 00:06:02.230
The problem here is that, this here, that this keyword

125
00:06:02.230 --> 00:06:06.420
in submitHandler does not point at the class actually.

126
00:06:06.420 --> 00:06:07.760
Why?

127
00:06:07.760 --> 00:06:11.770
Well because of the way JavaScript and typescript works,

128
00:06:11.770 --> 00:06:14.680
we bind the method here to the event listener

129
00:06:14.680 --> 00:06:17.480
and when we bind something to an event

130
00:06:17.480 --> 00:06:19.740
or with the help of an event listener

131
00:06:19.740 --> 00:06:22.410
then that's something so that method,

132
00:06:22.410 --> 00:06:24.210
which is going to get executed,

133
00:06:24.210 --> 00:06:27.270
will have this bound to something else,

134
00:06:27.270 --> 00:06:31.060
in this case to the current target of the event.

135
00:06:31.060 --> 00:06:35.130
So this end of this method will not point at the class,

136
00:06:35.130 --> 00:06:38.150
when the method is triggered upon an event

137
00:06:38.150 --> 00:06:40.360
with an event listener.

138
00:06:40.360 --> 00:06:43.980
Now the work around or the solution is to actually

139
00:06:43.980 --> 00:06:46.949
call bind here on submitHandler to

140
00:06:46.949 --> 00:06:51.070
preconfigure how this function is going execute

141
00:06:51.070 --> 00:06:52.880
when it executes in the future,

142
00:06:52.880 --> 00:06:56.450
and the first argument we can pass to bind then

143
00:06:56.450 --> 00:06:59.760
is actually what the this keyword will refer to

144
00:06:59.760 --> 00:07:02.920
inside of the to be executed function.

145
00:07:02.920 --> 00:07:05.750
And here I pass this which means,

146
00:07:05.750 --> 00:07:10.030
this inside of submitHandler will refer to

147
00:07:10.030 --> 00:07:13.660
the same thing as this refers to in this context.

148
00:07:13.660 --> 00:07:17.500
And since we call it in the context of configure here,

149
00:07:17.500 --> 00:07:19.880
which we call with this configure,

150
00:07:19.880 --> 00:07:22.870
this ends out of configure will refer to the class,

151
00:07:22.870 --> 00:07:24.830
and thanks to bind, it will there for all,

152
00:07:24.830 --> 00:07:28.890
also refer to the class ends out of the submitHandler.

153
00:07:28.890 --> 00:07:30.743
So if you now save this here,

154
00:07:32.840 --> 00:07:33.673
and we reload,

155
00:07:33.673 --> 00:07:35.600
and enter "Hello!" here,

156
00:07:35.600 --> 00:07:37.510
you now see "Hello!" gets printed here

157
00:07:37.510 --> 00:07:38.770
when we submit the form.

158
00:07:38.770 --> 00:07:40.210
So now this is solved

159
00:07:40.210 --> 00:07:43.650
and now we're dealing with this properly.

160
00:07:43.650 --> 00:07:46.330
But maybe there is a better way,

161
00:07:46.330 --> 00:07:49.430
or an alternative way we've all have learned about.

162
00:07:49.430 --> 00:07:51.970
Maybe one using decorators,

163
00:07:51.970 --> 00:07:54.300
so here's your chance to again pause this

164
00:07:54.300 --> 00:07:57.900
and try solving this binding with decorators,

165
00:07:57.900 --> 00:07:59.770
because that's something we did learn about

166
00:07:59.770 --> 00:08:01.573
in the decorators section.

