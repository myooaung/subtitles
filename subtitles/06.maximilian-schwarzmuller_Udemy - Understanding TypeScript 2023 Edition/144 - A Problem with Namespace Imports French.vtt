WEBVTT

00:02.250 --> 00:04.380
- : Maintenant, une note importante, en passant,

00:04.380 --> 00:07.280
vous pourriez vous demander pourquoi autobind fonctionne

00:07.280 --> 00:09.960
ici dans ProjectList même si je n'ai pas ajouté un import

00:09.960 --> 00:11.840
au décorateur autobind.

00:11.840 --> 00:15.860
Eh bien, parce que dans l'application. ts, j'ai toutes ces importations.

00:15.860 --> 00:18.610
Maintenant, en fait, si j'enlève ces importations

00:18.610 --> 00:21.430
là, ce qui serait correct, parce qu'ici j'utilise techniquement

00:21.430 --> 00:26.253
seulement ProjectInput ProjectList est sur, nous aurons un problème.

00:27.260 --> 00:30.680
Vous voyez, si cela se recharge, nous avons une erreur ici, même si nous n'avons

00:30.680 --> 00:33.280
pas d'erreur de compilation malheureusement, mais nous

00:33.280 --> 00:35.010
avons une erreur d'exécution.

00:35.010 --> 00:37.470
Nous devons donc nous assurer d'importer tout ce que nous

00:37.470 --> 00:40.150
utilisons dans un fichier dans ce fichier pour être sûrs.

00:40.150 --> 00:42.890
Techniquement, nous pouvons tout importer dans l'application. ts, et puisque ProjectInput

00:42.890 --> 00:45.260
et ProjectList qui, par exemple, utilisent

00:45.260 --> 00:48.320
le décorateur autobind viennent plus tard, le décorateur

00:48.320 --> 00:51.750
autobind sera disponible quand ils en auront besoin.

00:51.750 --> 00:54.320
Mais ce n'est pas la manière la plus propre possible.

00:54.320 --> 00:56.740
Si, au lieu de cela, vous importez tout ce dont un fichier

00:56.740 --> 00:58.450
a besoin depuis l'intérieur de ce fichier,

00:58.450 --> 01:00.540
vous devez garantir que ce fichier l'aura à sa

01:00.540 --> 01:02.360
disposition lorsqu'il en aura besoin,

01:02.360 --> 01:04.400
et que vous ne dépendez pas d'un fichier global

01:04.400 --> 01:05.790
qui importe tout, où vous pourriez

01:05.790 --> 01:07.500
ensuite supprimer une importation

01:07.500 --> 01:09.570
et tout casser.

01:09.570 --> 01:11.390
Alors, quelle est la solution ?

01:11.390 --> 01:13.350
Eh bien, retournons aux fichiers et importons

01:13.350 --> 01:14.530
ce dont ils ont besoin.

01:14.530 --> 01:16.630
Par exemple, ProjectInput n'a pas seulement

01:16.630 --> 01:18.790
besoin du composant de base, mais aussi de la logique

01:18.790 --> 01:21.270
de validation et de la liaison automatique.

01:21.270 --> 01:23.630
Donc ici, je vais importer en remontant d'un

01:24.970 --> 01:27.110
niveau avec deux points, de decorators,

01:27.110 --> 01:35.366
le décorateur autobind, oups, comme ça, et de util, la validation.

01:35.366 --> 01:35.366
fichier ts.

01:35.366 --> 01:39.770
C'est vraiment nécessaire dans ce dossier ici.

01:39.770 --> 01:42.210
J'ai aussi besoin de l'état du projet ici.

01:42.210 --> 01:46.810
Je vais donc importer /state/project-state. ts.

01:46.810 --> 01:50.690
Et je vais prendre ces importations et aller à ProjectItem, et là je n'ai pas besoin

01:50.690 --> 01:53.210
de l'état du projet et de la validation, donc nous pouvons

01:53.210 --> 01:54.320
les enlever.

01:54.320 --> 01:56.560
Mais nous aurons besoin du décorateur autobind.

01:56.560 --> 02:00.580
Nous avons également besoin de l'interface draggable et du modèle de projet.

02:00.580 --> 02:04.040
Donc nous allons aussi aller dans le dossier des modèles ici,

02:04.040 --> 02:08.257
et importer le projet. ts et glisser-déposer. ts.

02:10.820 --> 02:14.720
Dans ProjectList, nous n'avons pas besoin de validation, mais

02:14.720 --> 02:17.520
j'ai besoin de ProjectState et d'autobind.

02:17.520 --> 02:21.100
Et en plus du dossier des modèles, j'ai besoin

02:21.100 --> 02:25.710
du projet. ts et le glisser-déposer. fichier ts.

02:25.710 --> 02:27.840
Avec cela, il suffit de sauvegarder et de compiler, et maintenant

02:27.840 --> 02:30.170
tout fonctionne à nouveau, comme vous le voyez, maintenant nous

02:30.170 --> 02:32.820
n'avons plus d'erreurs d'exécution, parce que maintenant nous avons

02:32.820 --> 02:35.520
récupéré toutes ces importations dans les fichiers.

02:35.520 --> 02:37.380
Ainsi, c'est la bonne façon de faire, chaque

02:37.380 --> 02:40.060
fichier spécifie ce dont il a besoin, et nous pouvons diviser

02:40.060 --> 02:41.500
notre code et toujours nous retrouver

02:41.500 --> 02:43.310
avec un seul fichier, donc nous obtenons

02:43.310 --> 02:45.940
le meilleur des deux mondes, pourrait-on dire.

02:45.940 --> 02:48.000
Pourtant, ce n'est pas nécessairement

02:48.000 --> 02:49.963
la meilleure façon de procéder.
