WEBVTT

00:02.310 --> 00:04.250
講師：1つのプロジェクトアイテムについて､

00:04.250 --> 00:10.480
より有用な情報を出力するために､ ProjectItemクラスに行きましょう､ そこでこれをレンダリングするのですから｡

00:10.480 --> 00:14.670
そして､ その中のh3タグの内容､ つまり人数を設定すると､

00:14.670 --> 00:24.047
例えば､ ここで出力している人数＋「assigned」に変更することができるのです｡

00:24.047 --> 00:24.047
だから､ 少なくとも､ これを表現するならば､ 「5人が割り当てられた」と言えるように｡  でも､ 「5つ割り当てられている」というのも､ あまりいい表現ではないですよね？

00:25.520 --> 00:30.160
もちろん､ 5人でもいいし､ 何人でもいい､

00:30.160 --> 00:35.010
「担当者」と言ってもいい｡ だから､ ここで「担当者」と言えば､ その方がいいのですが...｡ 

00:35.010 --> 00:37.230
おっと､ テストだ｡ 

00:37.230 --> 00:39.440
これは使えるのか？

00:39.440 --> 00:43.390
今､ これには「5名アサイン」と書いてありますから｡  まあ､ その方がいいのですが､ まだ最適とは言えません｡ 

00:44.420 --> 00:46.520
一人しかいないプロジェクトはどうする？

00:46.520 --> 00:48.063
まだ「persons」と書いてあって､

00:49.210 --> 00:52.000
あまり意味がないですね｡

00:52.000 --> 00:54.860
さて､ そこで役立ってくれるのがゲッターです｡ 

00:54.860 --> 00:57.740
だから､ ここでは「人」とか「人」と言わずに､

00:57.740 --> 01:08.120
プラス「割り当て」と言う｡ しかし､ 実はここで単に人数を出力したいわけではなく､ 代わりに適切な用語を返すゲッターを使いたいのです｡

01:08.120 --> 01:10.140
だから､ 基本的には右の文章｡ 

01:10.140 --> 01:11.650
そこで､ ここではゲッターを追加することにします｡ 

01:11.650 --> 01:16.030
必ずやらなければならないことではありませんが､ よく見かける慣習として､ 上部フィールドのすぐ下にゲッターとセッターを追加することがあります｡

01:16.030 --> 01:21.660
そこで､ コンストラクタの上にある私のフィールドの下に追加することにします｡

01:21.660 --> 01:23.033
今度は「persons」と名付けます｡  名前は完全におまかせです｡ 

01:24.464 --> 01:26.860
ここでは「persons」と名付けることにする｡ 

01:26.860 --> 01:30.580
そしてゲッターは基本的に関数のようなものです｡ 

01:30.580 --> 01:31.680
だから､ ここに括弧を付けて､

01:31.680 --> 01:34.350
中括弧を付けなければならない｡

01:34.350 --> 01:36.480
さて､ その中で､ ご覧のように､ 値を返す必要があります｡ 

01:36.480 --> 01:42.630
そしてここでは､ 基本的にこのプロジェクトに参加している人数に応じたテキストを返します｡

01:42.630 --> 01:46.150
そこで､ ここで､ このようなことがないかを確認します｡  プロジェクトに参加しています｡  の人は1に等しい｡

01:46.150 --> 01:49.400
その場合はここで「1人」とテキストで返しますが､ そうでない場合は1人以上か0人だとわかっているので､

01:49.400 --> 01:53.640
どちらの場合も「persons」と複数形で言うことにします｡

01:53.640 --> 02:03.390
実際にテンプレートリテラルを返すのは､ 単にテンプレートリテラルで注入された内容をテキストにするのが簡単だからです｡

02:03.390 --> 02:08.390
そして､ そこで私はこう言うのです｡  プロジェクトに参加しています｡  people「人」｡  では､ このシナリオで返すテキストはこれです｡ 

02:10.330 --> 02:17.350
あとは､ このゲッターを使って､ 正しい専門用語や正しいテキストを自動的に取得すればいいわけです｡

02:17.350 --> 02:24.120
だから下は､ これに手を差し伸べるのではなく

02:24.120 --> 02:24.120
プロジェクトに参加しています｡  人

02:24.120 --> 02:26.610
これだけは言っておきたい｡ 者である｡  を割り当てた｡ 

02:26.610 --> 02:30.860
そして､ 通常のプロパティのようにアクセスします｡

02:30.860 --> 02:36.060
つまり､ 括弧で囲んだ関数のように呼び出すのではなく､ このようにアクセスするのです｡

02:36.060 --> 02:41.390
しかし､ これは同じ名前であるため､ このゲッターをトリガーします｡

02:41.390 --> 02:43.840
つまり､ このゲッターをトリガーして､

02:43.840 --> 02:47.700
そこでロジックを実行し､ 適切なテキストを返します｡

02:47.700 --> 02:50.550
では､ 次にこれをもう一度やってみると｡ 

02:50.550 --> 02:53.560
テスト中です｡ 

02:53.560 --> 02:55.740
これは使えるのか？

02:55.740 --> 02:57.710
そして､ 5人を割り当てると､ 「5人割り当て」と表示されます｡  本当に効果があるのか？

02:57.710 --> 02:59.080
確かに？

02:59.080 --> 03:00.690
そして､ ここに1つ付け加えます｡ 

03:00.690 --> 03:04.390
1名割り当て」と表示される｡  これで思い通りに動くようになったわけです｡ 

03:04.390 --> 03:07.050
これで本当に正しく出力されるようになり､ ゲッターの良い使用例が示されました｡

03:07.050 --> 03:12.460
これは､ データを取得するときにデータを変換するのに役立つところ｡
