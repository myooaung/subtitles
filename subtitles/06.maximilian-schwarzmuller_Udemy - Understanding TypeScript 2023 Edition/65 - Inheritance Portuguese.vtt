WEBVTT

00:02.300 --> 00:03.830
Instrutor: Então trabalhamos bastante

00:03.830 --> 00:07.350
com nosso departamento aqui e eu criei meu departamento de contabilidade.

00:07.350 --> 00:09.610
Agora para a aplicação que estamos construindo,

00:09.610 --> 00:12.120
podemos precisar de departamentos, é claro, mas

00:12.120 --> 00:14.320
podemos precisar de mais informações para

00:14.320 --> 00:16.660
os tipos específicos de departamentos.

00:16.660 --> 00:18.830
Podemos ter um departamento de TI,

00:18.830 --> 00:22.680
que tem um ID, que tem um nome, que tem funcionários, mas que

00:22.680 --> 00:24.900
também tem administradores, algo

00:24.900 --> 00:28.180
que só o departamento de TI tem, por exemplo.

00:28.180 --> 00:30.340
Podemos ter o departamento de contabilidade

00:30.340 --> 00:34.280
que também pode ter uma identificação, um nome e funcionários, mas

00:34.280 --> 00:37.470
também pode ter, digamos, relatórios.

00:37.470 --> 00:41.030
Uma série de relatórios que gerou, e assim por diante.

00:41.030 --> 00:44.541
Portanto, você pode ter algumas propriedades básicas e também métodos

00:44.541 --> 00:46.970
que todos os departamentos devem ter, mas então podemos

00:46.970 --> 00:49.050
ter versões especializadas desses departamentos

00:49.050 --> 00:51.900
com suas próprias propriedades específicas e métodos que

00:51.900 --> 00:54.660
só esse departamento pode ter.

00:54.660 --> 00:58.100
Uma herança pode nos ajudar a implementar algo como isto.

00:58.100 --> 01:00.010
Então, como podemos utilizar a herança aqui?

01:00.010 --> 01:01.670
Bem, nós temos nosso departamento de classe.

01:01.670 --> 01:05.130
Agora vamos criar estes departamentos especializados.

01:05.130 --> 01:08.483
Portanto, aqui poderíamos ter um departamento de TI de classe.

01:09.610 --> 01:14.010
E nesta classe aqui, eu quero utilizar o nome e o ID e os funcionários

01:14.010 --> 01:17.270
do departamento geral, mas quero acrescentar minhas

01:17.270 --> 01:19.537
próprias características.

01:19.537 --> 01:21.970
Agora podemos herdar a classe de departamento

01:21.970 --> 01:24.270
usando a palavra-chave extends aqui e depois

01:24.270 --> 01:25.970
a classe que queremos herdar.

01:25.970 --> 01:27.530
Neste caso, esse é o departamento.

01:27.530 --> 01:30.600
Agora, importante é que você só pode herdar de uma classe,

01:30.600 --> 01:33.010
portanto não pode herdar de várias classes,

01:33.010 --> 01:34.660
se você precisar disso.

01:34.660 --> 01:38.070
Então agora, aqui, eu estou herdando do departamento e uma

01:38.070 --> 01:40.700
consequência é que se eu agora criar um departamento

01:40.700 --> 01:44.560
de TI aqui, eu realmente posso chamá-lo assim, com este tipo de construtor,

01:44.560 --> 01:46.640
mesmo que a classe do departamento

01:46.640 --> 01:49.400
de TI esteja vazia.

01:49.400 --> 01:52.830
Se salvarmos isso, de fato vemos que funciona como

01:52.830 --> 01:55.152
antes, porque quando herdamos de

01:55.152 --> 01:59.610
outra classe, a classe que herda automaticamente recebe tudo o

01:59.610 --> 02:02.870
que a classe base, departamento neste caso, tem,

02:02.870 --> 02:06.072
incluindo seu construtor, desde que não adicionemos

02:06.072 --> 02:11.072
um construtor dedicado para esta classe herdada, então para esta subclasse,

02:11.130 --> 02:14.760
o construtor da classe base, então este construtor

02:14.760 --> 02:17.830
é automaticamente usado quando instanciamos

02:17.830 --> 02:20.800
nossa subclasse.

02:20.800 --> 02:25.170
Por isso, no final, chamamos magicamente o construtor da classe base com os

02:25.170 --> 02:27.562
argumentos que estamos passando aqui.

02:27.562 --> 02:30.350
Agora podemos adicionar nosso próprio construtor,

02:30.350 --> 02:33.570
porém, adicionando construtor aqui no departamento de TI e agora

02:33.570 --> 02:35.800
você vê que estou recebendo erros.

02:35.800 --> 02:38.580
Por um lado, é claro que agora devemos aceitar os dados que

02:38.580 --> 02:40.850
estamos recebendo aqui, embora possamos argumentar

02:40.850 --> 02:44.120
que o nome não deve ser algo que precisamos passar aqui.

02:44.120 --> 02:46.430
E não deveria ser também contabilidade.

02:46.430 --> 02:49.110
Mas aqui, em vez disso, o nome do departamento,

02:49.110 --> 02:52.563
já que é a classe do departamento de TI, pode sempre ser TI.

02:53.700 --> 02:56.910
Mas ainda quero aceitar minha identificação,

02:56.910 --> 03:01.130
mas agora quero essencialmente encaminhá-la como

03:01.130 --> 03:06.420
o nome fixo IT, para o construtor do departamento.

03:06.420 --> 03:09.240
E para isso temos uma palavra-chave especial que podemos

03:09.240 --> 03:11.120
e, neste caso, temos que usar.

03:11.120 --> 03:13.210
E isso é ótimo.

03:13.210 --> 03:15.580
Sempre que você adicionar seu próprio construtor

03:15.580 --> 03:18.400
em uma classe que herda de outra classe, você tem

03:18.400 --> 03:21.200
que adicionar super na classe herdeira e você tem

03:21.200 --> 03:23.790
que executá-la como uma função.

03:23.790 --> 03:28.070
Super aqui chama o construtor da classe base, então construtor

03:28.070 --> 03:31.300
de departamento, neste caso.

03:31.300 --> 03:33.690
E agora, o outro super leva os argumentos

03:33.690 --> 03:37.630
do construtor da classe mãe, o ID, e o nome.

03:37.630 --> 03:41.060
Então aqui eu posso encaminhar a identificação, então a identificação

03:41.060 --> 03:44.360
que estou recebendo aqui é passada para super, e eu posso codificar

03:44.360 --> 03:46.860
um valor para o nome, como TI.

03:46.860 --> 03:48.840
Portanto, isto agora chamará

03:48.840 --> 03:52.500
o construtor da classe base de dentro da subclasse.

03:52.500 --> 03:55.310
Agora, importante, você tem que chamar o super primeiro

03:55.310 --> 03:58.220
em seu construtor antes de fazer qualquer coisa com a palavra-chave

03:58.220 --> 03:59.700
"esta".

03:59.700 --> 04:03.860
Portanto, se você planeja atribuir qualquer outra propriedade especial aqui,

04:03.860 --> 04:06.670
você tem que fazer isso depois de chamar o super.

04:06.670 --> 04:10.346
E, de fato, quero acrescentar aqui minhas próprias propriedades especiais.

04:10.346 --> 04:13.528
Poderíamos acrescentar nossos administradores aqui.

04:13.528 --> 04:17.800
Digamos que como privado, ou como público, na verdade.

04:17.800 --> 04:20.878
Como propriedade pública, os administradores,

04:20.878 --> 04:25.630
e isso deveria ser um conjunto de cordas, digamos.

04:25.630 --> 04:27.780
Bem, então eu não quero encaminhar

04:27.780 --> 04:31.460
isto para minha classe base porque a classe de departamento

04:31.460 --> 04:34.670
não quer nenhum dado de administrador.

04:34.670 --> 04:38.800
Em vez disso, quero armazenar isto em uma propriedade do departamento de

04:38.800 --> 04:42.150
TI para que aqui possamos então adicionar administradores

04:42.150 --> 04:44.922
como um campo que leva um par de administradores

04:44.922 --> 04:47.290
e armazenar administradores ali, ou porque

04:47.290 --> 04:49.070
estou usando público aqui, já estou

04:49.070 --> 04:52.020
usando aquele atalho onde uma propriedade do mesmo

04:52.020 --> 04:55.160
nome será criada e os dados que alimentamos neste argumento

04:55.160 --> 04:57.530
são armazenados naquela propriedade criada

04:57.530 --> 05:00.148
automaticamente.

05:00.148 --> 05:03.710
Ainda para deixar claro que o super tem que ser chamado primeiro,

05:03.710 --> 05:07.610
vou pegar o caminho mais longo, adicionar administradores aqui,

05:07.610 --> 05:12.610
assim, e depois aqui dizer, isto. admins = admins.

05:13.260 --> 05:15.160
Mais uma vez, o atalho seria mais curto.

05:15.160 --> 05:17.830
Estou fazendo isso aqui para mostrar e deixar bem

05:17.830 --> 05:21.020
claro que se você está usando algo que usa a palavra-chave

05:21.020 --> 05:24.480
"esta", você tem que fazer isso depois de chamar de super.

05:24.480 --> 05:27.640
E com isso, se salvarmos isso, vou receber um erro, porque não vou

05:27.640 --> 05:29.530
passar em nenhum administrador, então

05:29.530 --> 05:30.920
vamos fazer isso aqui.

05:30.920 --> 05:33.920
Max é o único administrador que estou passando aqui.

05:33.920 --> 05:36.950
Agora podemos salvar isso e compilá-lo sem erros e agora

05:36.950 --> 05:39.910
aqui, de fato, vemos nosso departamento aqui.

05:39.910 --> 05:41.840
Agora tem o nome IT.

05:41.840 --> 05:44.670
E se nós consolarmos todo o departamento,

05:44.670 --> 05:49.670
e talvez possamos renomear isto de contabilidade para TI e depois

05:50.220 --> 05:54.250
consolar. log IT aqui.

05:54.250 --> 05:57.570
Claro que a renomeação que era opcional, apenas faz mais sentido, uma vez

05:57.570 --> 06:00.160
que estamos construindo um departamento de TI aqui.

06:00.160 --> 06:02.510
Agora que eu consolei todo o departamento,

06:02.510 --> 06:06.110
nós realmente vemos que temos administradores, mas também temos

06:06.110 --> 06:11.110
funcionários e tudo o que eu instalei na minha classe de departamento aqui.

06:12.000 --> 06:13.990
Então isso é herança em ação, uma característica

06:13.990 --> 06:16.520
muito útil, porque agora, é claro, também podemos

06:16.520 --> 06:20.770
criar nosso departamento de contabilidade aqui, ampliando o departamento

06:20.770 --> 06:23.260
e ali podemos então acrescentar nossas coisas

06:23.260 --> 06:27.030
específicas de contabilidade.

06:27.030 --> 06:29.540
Assim, ainda podemos usar um construtor

06:29.540 --> 06:31.700
aqui, e agora talvez com o atalho,

06:31.700 --> 06:34.400
aceitar alguns relatórios aqui que podem

06:34.400 --> 06:36.170
ser uma propriedade privada

06:36.170 --> 06:40.950
e então temos o addReport que leva o texto, que deve ser uma string, e então

06:40.950 --> 06:45.360
chegamos aos relatórios aqui e empurramos o texto como um item no

06:45.360 --> 06:49.430
relatório e talvez também tenhamos o getReports aqui e ali nós

06:49.430 --> 06:56.990
apenas consolemos.

06:56.990 --> 06:56.990
log (isto. relatórios)

06:57.563 --> 07:00.860
ou nomeamos a impressãoReports, portanto, faz mais sentido.

07:00.860 --> 07:02.720
E agora teríamos uma versão muito especial

07:02.720 --> 07:04.890
de um departamento com dois métodos que o departamento

07:04.890 --> 07:06.740
da base não possui e com uma propriedade

07:06.740 --> 07:08.100
extra que o departamento da base

07:08.100 --> 07:09.840
não possui.

07:09.840 --> 07:13.000
E ainda assim, recebemos tudo do departamento de base.

07:13.000 --> 07:15.560
O nome, que vou definir aqui para a contabilidade,

07:15.560 --> 07:17.950
e a identificação, que também encaminhamos

07:17.950 --> 07:20.260
ao construtor do departamento de base.

07:20.260 --> 07:22.120
E com isso, lá embaixo, se criarmos

07:22.120 --> 07:24.770
nossa contabilidade aqui com o novo Departamento

07:24.770 --> 07:27.510
de Contabilidade, podemos alimentar em nossa

07:27.510 --> 07:31.750
identificação e depois nossos relatórios.

07:31.750 --> 07:34.340
Digamos que, inicialmente, isso é um conjunto vazio.

07:34.340 --> 07:39.340
Então podemos chamar addReport, algo deu errado, nunca tão bom, claro,

07:40.550 --> 07:43.446
na contabilidade, eu acho, e então também

07:43.446 --> 07:48.446
podemos imprimir nossos relatórios aqui assim e com tudo isso ele compila

07:50.070 --> 07:52.630
muito bem e nós recebemos o relatório

07:52.630 --> 07:55.710
aqui e vemos, o departamento de TI, por exemplo,

07:55.710 --> 07:58.890
não teria nenhum relatório.

07:58.890 --> 08:01.820
O departamento de contabilidade o faz por causa da herança, onde herdamos

08:01.820 --> 08:05.623
certas características e acrescentamos nossas próprias características.
