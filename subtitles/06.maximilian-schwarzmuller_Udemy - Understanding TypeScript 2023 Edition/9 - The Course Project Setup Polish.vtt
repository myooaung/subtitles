WEBVTT

00:02.490 --> 00:03.860
Mężczyzna Instruktor: Czyli ustawiamy

00:03.860 --> 00:04.860
IDE, co jest ważne.

00:04.860 --> 00:07.780
Teraz ustawmy też projekt startowy, z którego będziemy

00:07.780 --> 00:09.370
korzystać przez cały ten kurs

00:09.370 --> 00:11.250
w różnych modułach kursu.

00:11.250 --> 00:13.230
Czyli w zasadzie konfiguracja projektu,

00:13.230 --> 00:16.110
od którego możemy zacząć każdy moduł kursu, aby następnie

00:16.110 --> 00:18.339
napisać tam nasz kod.

00:18.339 --> 00:20.730
Teraz, jak zobaczysz w całym tym kursie, pisanie

00:20.730 --> 00:24.330
kodu nie wymaga skomplikowanej konfiguracji w ogóle.

00:24.330 --> 00:28.330
Ale tutaj chcę projektu, w którym możemy napisać kod, skompilować

00:28.330 --> 00:31.490
go, a następnie natychmiast zobaczyć wyjście tego

00:31.490 --> 00:33.530
kodu w przeglądarce.

00:33.530 --> 00:36.970
A w tym celu najpierw dodam nowy plik HTML z indeksem.

00:36.970 --> 00:39.520
I możesz dodać to w dowolnym pustym folderze,

00:39.520 --> 00:42.620
dwa inne pliki lub foldery, które widzisz tutaj, to tylko

00:42.620 --> 00:45.530
pliki konfiguracyjne dla git, w przypadku gdy używasz

00:45.530 --> 00:47.460
kontroli wersji i dla mojego edytora,

00:47.460 --> 00:50.200
który ustawia poziom powiększenia.

00:50.200 --> 00:51.670
Więc to wszystko, co tu mam.

00:51.670 --> 00:54.930
Ale w tym pliku index HTML, teraz zainicjalizuję go za

00:54.930 --> 00:56.750
pomocą szkieletu bazowego.

00:56.750 --> 00:58.390
I dla tych osób do zrobienia

00:58.390 --> 01:02.770
kodu, możesz po prostu wpisać HTML, wybrać tę opcję html:5, jeśli nie

01:02.770 --> 01:04.200
dostajesz tego menu, po

01:04.200 --> 01:06.820
prostu naciśnij control i spację.

01:06.820 --> 01:09.600
Wybierz opcję html:5 i naciśnij enter,

01:09.600 --> 01:11.740
a otrzymasz ten szkielet.

01:11.740 --> 01:14.670
Tam jako tytuł mogliśmy wpisać zrozumienie TypeScriptu,

01:14.670 --> 01:16.722
ale to nie ma zbyt dużego znaczenia.

01:16.722 --> 01:21.150
Ważniejsze jest to, że tutaj dodajesz tag script

01:21.150 --> 01:25.000
w sekcji head i dodajesz źródło i wskazujesz

01:25.000 --> 01:29.020
na app. js tutaj i dodaj atrybut defer.

01:29.020 --> 01:32.270
To próbuje zaimportować aplikację. js, który oczywiście

01:32.270 --> 01:34.520
w tej chwili nie istnieje.

01:34.520 --> 01:35.530
A potem oczywiście

01:35.530 --> 01:37.960
też wykona, jeśli go znajdzie.

01:37.960 --> 01:41.210
Dzięki temu możemy oglądać nasze zmiany, nasze zmiany

01:41.210 --> 01:44.790
kodu, bezpośrednio na ekranie w przeglądarce.

01:44.790 --> 01:47.410
Albo jeśli tylko logujemy coś do konsoli,

01:47.410 --> 01:49.560
w przeglądarce def tools.

01:49.560 --> 01:52.250
Następnie dodam aplikację. plik ts.

01:52.250 --> 01:54.170
To jest plik, plik TypeScript, w którym

01:54.170 --> 01:55.530
napiszemy jakiś kod.

01:55.530 --> 01:58.580
I tam, na przykład, możesz konsolowo zalogować

01:58.580 --> 02:01.580
swój kod idzie tutaj, lub cokolwiek chcesz.

02:01.580 --> 02:03.780
Możesz zalogować konsolę, co chcesz tutaj.

02:03.780 --> 02:06.870
A jeśli to zrobisz, możesz skompilować ten plik z TypeScript,

02:06.870 --> 02:09.280
który zainstalowaliśmy wcześniej, do tego

02:09.280 --> 02:10.880
możesz otworzyć terminal, zintegrować

02:10.880 --> 02:13.070
go z edytorem tutaj.

02:13.070 --> 02:16.580
I wystarczy napisać tsc app. ts.

02:16.580 --> 02:18.490
To kompiluje ten plik TypeScript i generuje

02:18.490 --> 02:20.610
aplikację. js, który jest plikiem,

02:20.610 --> 02:22.530
który tutaj importujemy.

02:22.530 --> 02:25.160
I jeśli teraz otworzysz ten indeks. Plik html, widzisz

02:25.160 --> 02:27.120
co się tutaj dzieje.

02:27.120 --> 02:29.800
Dobijasz się do logiki, którą tu napisałeś.

02:29.800 --> 02:32.340
I albo jest to logika, która manipuluje czymś na

02:32.340 --> 02:34.410
domenie, albo tak jak w tym przypadku jest

02:34.410 --> 02:37.870
to logika, która po prostu zostaje zablokowana na konsoli.

02:37.870 --> 02:41.700
Więc tutaj w tym przypadku otworzyłem ten plik HTML w przeglądarce.

02:41.700 --> 02:44.460
Możesz po prostu dwukrotnie kliknąć na niego poza IDE.

02:44.460 --> 02:47.960
Czyli w normalnym Eksploratorze Windows, albo w Mac Finderze.

02:47.960 --> 02:49.910
A potem może otworzyć swoje narzędzia deweloperskie,

02:49.910 --> 02:51.830
jeśli po prostu logujesz coś do konsoli, a

02:51.830 --> 02:54.010
zobaczysz swój dziennik tutaj.

02:54.010 --> 02:56.690
Teraz to jest fajne, ale za każdym razem, gdy

02:56.690 --> 03:00.470
zmieniamy coś tutaj w naszym kodzie, musimy ręcznie przekompilować,

03:00.470 --> 03:02.340
cóż, tak jest na razie.

03:02.340 --> 03:04.300
To się zmieni w dalszej części kursu.

03:04.300 --> 03:07.970
Ale musimy też ręcznie przeładować tę stronę tutaj.

03:07.970 --> 03:10.140
Aby to przyspieszyć i upewnić się, że

03:10.140 --> 03:11.940
nie musisz tego robić za każdym

03:11.940 --> 03:13.900
razem, gdy coś zmieniasz, dodamy

03:13.900 --> 03:16.540
również inne narzędzie do tego manekina, którego

03:16.540 --> 03:17.890
będziemy używać przez

03:17.890 --> 03:19.500
cały czas trwania kursu, aby

03:19.500 --> 03:22.360
działo się to automatycznie.

03:22.360 --> 03:23.720
Teraz, aby zainstalować

03:23.720 --> 03:26.430
takie narzędzie, uruchommy npm init tutaj.

03:26.430 --> 03:29.830
W tym folderze projektu dostępne jest polecenie npm,

03:29.830 --> 03:32.113
jeśli zainstalowałeś node JS.

03:32.960 --> 03:36.050
Upewnij się, że w tym celu odwiedzasz nodejs. org oraz pobrać i zainstalować

03:36.050 --> 03:39.690
najnowszą wersję, którą znajdziesz tutaj.

03:39.690 --> 03:43.040
Na razie nie będziemy pisać żadnego kodu node JS, ale node JS przychodzi

03:43.040 --> 03:45.960
razem z narzędziem NPM, którego można użyć do zainstalowania

03:45.960 --> 03:48.610
zależności firm trzecich lub przydatnych narzędzi,

03:48.610 --> 03:51.210
które przyspieszą nasz rozwój.

03:51.210 --> 03:53.840
I z tego powodu potrzebujemy go tutaj.

03:53.840 --> 03:55.970
Więc z tym zainstalowanym, możesz uruchomić

03:55.970 --> 03:57.800
npm init w tym folderze projektu.

03:57.800 --> 03:58.740
Po prostu naciśnij enter,

03:58.740 --> 04:00.560
a możesz odpowiedzieć na wszystkie te pytania

04:00.560 --> 04:03.570
tutaj z domyślnymi, po prostu naciskając enter przez cały czas.

04:03.570 --> 04:06.780
A gdy to się zakończy, daje ci pakiet. plik json, który wygląda

04:06.780 --> 04:08.150
coś takiego.

04:08.150 --> 04:12.500
A teraz możesz uruchomić npm install, aby zainstalować zależność, która jest

04:12.500 --> 04:14.410
wyłączna dla tego projektu.

04:14.410 --> 04:16.210
Tak więc, aby zainstalować narzędzie,

04:16.210 --> 04:17.730
można powiedzieć, które można

04:17.730 --> 04:22.520
użyć w tym projekcie, -: -save-dev, aby oznaczyć je jako zależność tylko dla rozwoju, więc

04:22.520 --> 04:24.580
narzędzie, które pomaga nam podczas rozwoju

04:24.580 --> 04:26.610
i nie zawiera żadnego kodu, który będzie

04:26.610 --> 04:29.930
wykonywany jako część naszego głównego kodu.

04:29.930 --> 04:33.470
A nazwa narzędzia to lite-server.

04:33.470 --> 04:37.103
Jeśli wciśniesz tutaj enter, to zainstaluje to dodatkowe narzędzie.

04:38.230 --> 04:42.000
A gdy to się skończy, po prostu wejdź do swojego pakietu. plik json i w części scripts

04:42.000 --> 04:44.390
dodaj przecinek i dodaj nowy skrypt,

04:44.390 --> 04:46.870
który nazwiesz start.

04:46.870 --> 04:49.029
A następnie jako wartość pomiędzy podwójnymi

04:49.029 --> 04:51.570
cudzysłowami wpisz lite-server.

04:51.570 --> 04:54.580
Czyli ta nazwa pakietu, który został tutaj dodany.

04:54.580 --> 04:57.550
Jeśli teraz uderzysz w enter, możesz uruchomić npm start tutaj,

04:57.550 --> 04:59.400
aby uruchomić ten skrypt startowy.

04:59.400 --> 05:02.530
A lite server to prosty serwer deweloperski, który zawsze

05:02.530 --> 05:05.430
serwuje indeks. plik html obok

05:05.430 --> 05:08.410
strony. json, więc ten plik.

05:08.410 --> 05:13.410
I służy twojej aplikacji na tym adresie URL, który widzisz tutaj,

05:13.620 --> 05:16.143
localhost:3000 domyślnie.

05:17.440 --> 05:19.690
I można wtedy po prostu odwiedzić tę lokalizację.

05:19.690 --> 05:23.090
Wystarczy wpisać w przeglądarce localhost:3000.

05:23.090 --> 05:24.860
A teraz twój kod działa tutaj.

05:24.860 --> 05:26.170
A dlaczego to jest lepsze?

05:26.170 --> 05:28.840
Cóż, to teraz automatycznie przeładuje stronę,

05:28.840 --> 05:32.180
gdy tylko zmieni się inny plik w tym katalogu.

05:32.180 --> 05:35.130
Więc jeśli, na przykład, dodam wykrzyknik tutaj

05:35.130 --> 05:38.180
i zapiszę to, a następnie skompiluję to ponownie za

05:38.180 --> 05:40.323
pomocą tsc app. TS, i wracasz do przeglądarki,

05:42.270 --> 05:43.580
natychmiast widzisz najnowsze

05:43.580 --> 05:45.340
wyjście, ponieważ automatycznie

05:45.340 --> 05:47.230
przeładował się.

05:47.230 --> 05:49.620
A to po prostu oszczędza nam dodatkowej pracy

05:49.620 --> 05:51.690
przy ręcznym przeładowywaniu.

05:51.690 --> 05:54.540
Teraz ważne o tym procesie npm start, zdecydowanie

05:54.540 --> 05:57.450
utrzymuj go w ruchu tak długo jak pracujesz nad swoim

05:57.450 --> 06:00.210
projektem, tak długo jak piszesz kod, który chcesz

06:00.210 --> 06:02.800
zobaczyć wykonany w przeglądarce.

06:02.800 --> 06:03.633
Kiedy skończysz,

06:03.633 --> 06:06.450
zawsze możesz zakończyć ten proces za pomocą control

06:06.450 --> 06:08.200
C, ale kiedy to zrobisz, twój projekt

06:08.200 --> 06:11.600
nie będzie już obsługiwany pod lokalnym hostem 3000.

06:11.600 --> 06:13.980
Więc utrzymuj go tak długo, jak długo piszesz

06:13.980 --> 06:15.650
kod i wprowadzasz zmiany.

06:15.650 --> 06:17.510
Z tym, że ja to zmienię z powrotem, ale to

06:17.510 --> 06:19.200
już całkowicie zależy od Ciebie.

06:19.200 --> 06:21.480
I to jest konfiguracja projektu, z której będę korzystał

06:21.480 --> 06:22.410
przez cały ten kurs.

06:22.410 --> 06:24.200
Znajdziecie go również w załączniku, oczywiście

06:24.200 --> 06:25.530
w gotowej formie.

06:25.530 --> 06:27.250
Tylko jedna ważna uwaga.

06:27.250 --> 06:30.330
Jeśli pobierzesz załączony projekt startowy, lub jakikolwiek

06:30.330 --> 06:32.500
inny snapshot kursu, jakikolwiek inny

06:32.500 --> 06:35.900
snapshot kodu, który znajdziesz gdziekolwiek w kursie, to

06:35.900 --> 06:38.920
otrzymasz plik do pobrania, który nie zawiera tego folderu

06:38.920 --> 06:41.070
modułów węzłów.

06:41.070 --> 06:42.590
Jest to ogromny folder, który

06:42.590 --> 06:45.250
w końcu przechowuje wszystkie pakiety stron trzecich

06:45.250 --> 06:46.970
i ich zależności.

06:46.970 --> 06:49.840
A ponieważ jest tak ogromny, zwykle go usuwam,

06:49.840 --> 06:52.260
ponieważ można go łatwo odtworzyć, uruchamiając

06:52.260 --> 06:54.080
npm install.

06:54.080 --> 06:56.640
Więc jeśli pobierzesz jeden z moich załączników,

06:56.640 --> 06:59.010
przejdź do wyodrębnionego folderu i w tym

06:59.010 --> 07:01.530
folderze uruchom npm install.

07:01.530 --> 07:03.341
I to zainstaluje wszystkie zależności

07:03.341 --> 07:06.110
i odtworzy ten folder modułów węzła.

07:06.110 --> 07:07.280
A kiedy już to zrobiłeś,

07:07.280 --> 07:08.610
możesz uruchomić npm start

07:08.610 --> 07:11.330
lub zrobić cokolwiek chcesz zrobić w tym projekcie.

07:11.330 --> 07:13.360
I w ten sposób mamy ten projekt, z którego będziemy

07:13.360 --> 07:14.750
korzystać przez cały kurs.

07:14.750 --> 07:16.810
Teraz nie traćmy już czasu i po prostu

07:16.810 --> 07:18.303
zacznijmy działać.
