WEBVTT

00:02.150 --> 00:03.290
Istruttore: È possibile

00:03.290 --> 00:05.890
implementare l'ereditarietà anche nelle interfacce.

00:05.890 --> 00:10.890
Diciamo che abbiamo un'altra interfaccia, Named, e questa

00:11.100 --> 00:13.600
è l'interfaccia che si assicura

00:13.600 --> 00:16.420
che ci sia una proprietà name.

00:16.420 --> 00:18.510
Quindi ora, in Person, potremmo implementare

00:18.510 --> 00:20.950
Greetable e Named per essere costretti ad

00:20.950 --> 00:24.110
avere sia un metodo di saluto che un nome.

00:24.110 --> 00:25.820
È una cosa che potremmo fare.

00:25.820 --> 00:30.200
Oppure, se sappiamo che Greetable pensa che gli oggetti greetable debbano sempre

00:30.200 --> 00:31.810
avere un nome, potremmo fare

00:31.810 --> 00:34.500
in modo che questa interfaccia Greetable estenda

00:34.500 --> 00:36.970
effettivamente l'interfaccia Named, in modo

00:36.970 --> 00:40.120
che insieme formino una nuova interfaccia, che costringe

00:40.120 --> 00:43.460
ogni oggetto basato su Greetable ad avere un metodo greet,

00:43.460 --> 00:46.150
ma anche ad avere un nome.

00:46.150 --> 00:48.840
Per farlo, possiamo aggiungere extends

00:48.840 --> 00:52.700
qui, anche sull'interfaccia, ed estendere Named.

00:52.700 --> 00:55.760
Come ho detto, questo forma una nuova interfaccia, che

00:55.760 --> 00:58.330
alla fine è un'interfaccia che ci obbliga ad

00:58.330 --> 01:00.760
avere un metodo greet, ma non solo, ci obbliga

01:00.760 --> 01:03.140
anche ad avere tutto ciò che l'interfaccia

01:03.140 --> 01:04.910
Named definisce.

01:04.910 --> 01:07.150
In questo caso, una proprietà di nome.

01:07.150 --> 01:09.450
Quindi, se rimuovessi name qui, otterrei

01:09.450 --> 01:12.120
già un errore, perché questa classe ora implementa

01:12.120 --> 01:14.860
in modo errato l'interfaccia Greetable, perché

01:14.860 --> 01:17.600
manca la proprietà name.

01:17.600 --> 01:20.900
È così che possiamo combinare le interfacce.

01:20.900 --> 01:23.410
Perché dividere un'interfaccia come questa?

01:23.410 --> 01:25.600
Forse si ha un'applicazione in cui

01:25.600 --> 01:27.810
per alcuni oggetti si vuole forzarli

01:27.810 --> 01:31.120
ad avere solo un nome e non un metodo greet, mentre per

01:31.120 --> 01:34.630
altri oggetti sono necessari sia greet che name.

01:34.630 --> 01:36.830
Con questa divisione, ciò è possibile.

01:36.830 --> 01:40.630
Alcuni oggetti, o alcune classi, possono implementare solo Named,

01:40.630 --> 01:42.590
mentre altri possono implementare

01:42.590 --> 01:45.990
Greetable e sono costretti ad avere sia greet che un nome.

01:45.990 --> 01:48.490
È quindi possibile estendere le interfacce.

01:48.490 --> 01:50.880
E qui è possibile estendere più di uno.

01:50.880 --> 01:53.380
È quindi possibile unire più interfacce

01:53.380 --> 01:55.060
in un'unica interfaccia.

01:55.060 --> 01:58.570
Potremmo unire un'altra interfaccia se l'avessimo.

01:58.570 --> 02:00.860
Semplicemente separati da una virgola.

02:00.860 --> 02:03.570
Ricordate che per una classe questo non era possibile.

02:03.570 --> 02:05.710
Quando si usano le classi nell'ereditarietà,

02:05.710 --> 02:07.920
si può ereditare solo da una classe.

02:07.920 --> 02:10.600
Non è possibile ereditare da più classi.

02:10.600 --> 02:12.490
Per le interfacce è diverso.

02:12.490 --> 02:14.760
Per quanto riguarda le interfacce, è possibile

02:14.760 --> 02:16.920
ereditare da più interfacce, perché

02:16.920 --> 02:18.920
alla fine vengono tutte fuse insieme,

02:18.920 --> 02:21.430
e in questa funzione di TypeScript puro, che

02:21.430 --> 02:23.010
in realtà non è tradotta in JavaScript

02:23.010 --> 02:24.800
come si vedrà, possiamo quindi

02:24.800 --> 02:27.080
infrangere le regole stabilite per le classi

02:27.080 --> 02:31.733
JavaScript ed estendere più interfacce.
