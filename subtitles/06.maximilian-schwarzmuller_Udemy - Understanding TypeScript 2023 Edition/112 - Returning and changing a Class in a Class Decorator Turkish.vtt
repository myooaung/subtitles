WEBVTT

00:02.090 --> 00:02.923
Anlatıcı: Dekoratörlerle

00:02.923 --> 00:04.750
daha gelişmiş şeyler yapmak için,

00:04.750 --> 00:07.340
bazı dekoratörlerin, örneğin sınıf dekoratörlerinin

00:07.340 --> 00:09.200
ve aynı zamanda metot dekoratörlerinin

00:09.200 --> 00:11.700
de aslında bir şeyler döndürebildiğini not etmeniz

00:11.700 --> 00:14.650
gerekecektir.

00:14.650 --> 00:16.570
Şimdi, hiçbir dekoratöre hiçbir şey

00:16.570 --> 00:17.510
iade etmiyorum.

00:17.510 --> 00:18.430
Dekoratör fabrikasında

00:18.430 --> 00:20.010
döndürülen dekoratör işlevinden

00:20.010 --> 00:22.460
bahsetmiyorum.

00:22.460 --> 00:23.701
Gerçekten dekoratör fonksiyonunun

00:23.701 --> 00:26.040
içinde bir geri dönüş değerini kastediyorum

00:26.040 --> 00:28.890
ve hiçbir yerde böyle bir değerimiz yok.

00:28.890 --> 00:31.559
Şimdi WithTemplate işlevinde, bu WithTemplate

00:31.559 --> 00:34.670
dekoratör işlevinde, böyle bir geri dönüş değeri ekleyebileceğimizi

00:34.670 --> 00:36.930
söylemeliyim.

00:36.930 --> 00:38.520
Ne döndürebileceğiniz ve TypeScript'in

00:38.520 --> 00:40.430
ne kullanabileceği, hangi tür dekoratörle

00:40.430 --> 00:43.660
çalıştığınıza bağlıdır.

00:43.660 --> 00:44.990
Burada, bir sınıfa eklenen

00:44.990 --> 00:47.270
bir dekoratör ile çalışıyoruz ve böyle

00:47.270 --> 00:48.750
bir dekoratör fonksiyonunda,

00:48.750 --> 00:51.677
eskisinin yerini alacak yeni bir kurucu fonksiyon

00:51.677 --> 00:53.800
döndürebilirsiniz.

00:53.800 --> 00:55.590
Yani dekoratöre eklediğiniz

00:55.590 --> 00:58.330
sınıfın yerini alacak olan diyebilirsiniz.

00:58.330 --> 01:01.073
Yani burada yeni bir fonksiyon, yeni bir kurucu

01:01.073 --> 01:02.490
fonksiyon ya da sadece

01:02.490 --> 01:06.370
yeni bir sınıf döndürebiliriz, çünkü bir sınıf, class anahtar

01:06.370 --> 01:08.280
sözcüğü, böyle bir kurucu fonksiyon

01:08.280 --> 01:11.150
oluşturmak için bu sözdizimsel şekeri kullanmamıza

01:11.150 --> 01:13.360
izin verir ve burada oluşturduğum

01:13.360 --> 01:17.463
sınıfın bir adı olması gerekmez, ancak burada elde ettiğimiz kurucuyu

01:17.463 --> 01:22.250
genişletebiliriz ve genişletmeliyiz.

01:22.250 --> 01:23.730
Şimdi burada yaptığım şey,

01:23.730 --> 01:25.848
buradaki dekoratör fonksiyonumda

01:25.848 --> 01:28.060
yeni bir sınıf döndürüyorum ve bunun

01:28.060 --> 01:29.270
sadece bir kurucu fonksiyon

01:29.270 --> 01:30.910
için sözdizimsel şeker olduğunu

01:30.910 --> 01:32.770
unutmayın, bu yüzden sonunda orijinal

01:32.770 --> 01:35.400
kurucu fonksiyona dayanan bir kurucu fonksiyon

01:35.400 --> 01:38.830
döndürüyorum, böylece orijinal sınıfımın, orijinal kurucu

01:38.830 --> 01:47.010
fonksiyonumun tüm özelliklerini koruyorum, bunu yapmak zorunda değiliz, ancak buradaki özelliklerimi kaybetmek istemiyorum, bu yüzden

01:47.010 --> 01:50.520
yapacağım.

01:50.520 --> 01:53.670
Ve sonra buraya yeni işlevler ekleyebiliriz.

01:53.670 --> 01:56.716
Örneğin, burada bazı isimleri değiştirmem gerekecek,

01:56.716 --> 02:00.340
buraya yeni bir kurucu fonksiyon ekleyebilirim ve karışıklığı önlemek

02:00.340 --> 02:01.500
için burada aldığım kurucuyu

02:01.500 --> 02:04.040
yeniden adlandıracağım.

02:04.040 --> 02:06.640
Bu dekoratörü eklediğim

02:06.640 --> 02:15.690
sınıfa originalConstructor adını vereceğim ve hepsini buraya kopyalayacağım.

02:15.690 --> 02:18.950
Ve şimdi, buradaki kurucu işlev yerine, bu orijinal

02:18.950 --> 02:20.853
kurucu işlevi içeriden çağırmak

02:20.853 --> 02:24.530
için super'i çağırmam gerekiyor, çünkü başka bir sınıfı

02:24.530 --> 02:25.430
genişleten bir

02:25.430 --> 02:27.410
sınıfa kurucu işlev eklerseniz,

02:27.410 --> 02:29.920
ki sonuçta burada yaptığımız şey budur,

02:29.920 --> 02:33.630
o zaman super'i çağırmanız gerekir.

02:33.630 --> 02:36.108
Ve şimdi burada istediğiniz mantığı yazabilirsiniz.

02:36.108 --> 02:40.040
Örneğin, buradaki şablon oluşturma mantığını

02:40.040 --> 02:42.782
dekoratör fonksiyonumuzdan çıkarıp

02:42.782 --> 02:45.620
burada döndürdüğümüz yeni kurucu

02:45.620 --> 02:49.020
fonksiyona taşıyabiliriz.

02:49.020 --> 02:50.960
Bu nedenle, burada bir sınıf oluşturduğumuzu

02:50.960 --> 02:52.550
ve sonuçta içinde bu mantığı barındıran

02:52.550 --> 02:53.383
bir kurucu fonksiyon

02:53.383 --> 02:55.833
yarattığımızı unutmayın.

02:56.670 --> 02:58.850
Şimdi yapmaya çalıştığım şey,

02:58.850 --> 03:01.367
sınıfı değiştirmeye çalışmak.

03:01.367 --> 03:04.298
Dekoratörümüzü yeni bir sınıfla, yeni bir

03:04.298 --> 03:07.550
kurucu işlevle eklediğimiz kurucu işlev, hala

03:07.550 --> 03:10.290
eski mantığı yürüttüğüm, ancak kendi

03:10.290 --> 03:12.920
yeni mantığımı da eklediğim yerdir

03:12.920 --> 03:14.670
ve bu nedenle, şimdi şablon

03:14.670 --> 03:17.450
aslında yalnızca nesnemi burada gerçekten

03:17.450 --> 03:21.340
örneklersem DOM'a işlenmelidir.

03:21.340 --> 03:22.890
Ve her zaman değil, bu dekoratör

03:22.890 --> 03:26.340
işlevi çalıştırıldığında, öğrendiğiniz gibi, sınıfı

03:26.340 --> 03:29.620
tanımladığımız anda gerçekleşir.

03:29.620 --> 03:31.010
Şimdi burada küçük bir değişiklik

03:31.010 --> 03:34.290
yapalım, artık orijinal yapıcımı burada çağırmıyorum, bunun yerine

03:34.290 --> 03:37.380
sadece buna erişebiliriz. oluşturduğumuz

03:37.380 --> 03:40.180
örneğin name özelliğinin değerini

03:40.180 --> 03:42.750
almak için name.

03:42.750 --> 03:45.120
Şimdi aşağıda tiplerin doğru olmadığına

03:45.120 --> 03:47.750
ilişkin küçük bir şikayet alıyoruz.

03:47.750 --> 03:51.330
Bunu düzeltmek için, dekoratör fonksiyonumuzu bir tip

03:51.330 --> 03:53.990
aldığımız ve bunu orijinal kurucunun tipi

03:53.990 --> 03:59.820
olarak ayarladığımız genel bir fonksiyona dönüştürebiliriz ve şimdi bunun aslında temelde

03:59.820 --> 04:01.668
bir kurucu fonksiyon olacağını

04:01.668 --> 04:04.410
açıkça belirtebiliriz ve bunu yeni bir özellik

04:04.410 --> 04:05.780
ayarladığımız özel bir

04:05.780 --> 04:09.260
tip, bir nesne tipi atayarak açıkça belirtebiliriz,

04:09.260 --> 04:13.290
bu elbette bir yedek isimdir, ancak TypeScript'e sonunda bunun

04:13.290 --> 04:17.760
yeni eklenebilen bir nesne olacağını söyler.

04:17.760 --> 04:19.690
Yani bu bir kurucu fonksiyon olacak, yeni

04:19.690 --> 04:22.170
bir nesne oluşturmak için new anahtar sözcüğüyle

04:22.170 --> 04:24.380
çağırabileceğimiz bir fonksiyon.

04:24.380 --> 04:27.410
Ve bu yeni fonksiyon, T nesnesinin sahip olacağı bu

04:27.410 --> 04:30.660
yeni yöntem, herhangi bir miktarda argüman alacaktır,

04:30.660 --> 04:33.520
bu yüzden burada istediğiniz kadar argüman kabul

04:33.520 --> 04:35.380
etmek için geri kalan parametreleri

04:35.380 --> 04:37.290
kullanıyorum, böylece değiştirmeye

04:37.290 --> 04:39.840
çalıştığımız sınıfın yapıcısına aktarılabilecek

04:39.840 --> 04:44.000
argümanlar konusunda gerçekten esnekler.

04:45.420 --> 04:46.430
Yeni fonksiyonu eklediğinizde,

04:46.430 --> 04:49.063
sonuçta buraya bir nesne dönecektir.

04:50.140 --> 04:53.500
Şimdi de rest parametresinin tanımını buradaki kurucuma

04:53.500 --> 04:55.680
kopyalamalıyım, böylece bu kurucu da

04:55.680 --> 04:57.640
alabileceğimiz tüm argümanları kabul

04:57.640 --> 05:00.260
edebilir, böylece temelde Person'ı buraya iletmek

05:00.260 --> 05:02.380
istediğiniz herhangi bir argümanla

05:02.380 --> 05:04.380
örnekleyebiliriz.

05:04.380 --> 05:06.610
Burada, orijinal kurucu işlevde de ihtiyaç

05:06.610 --> 05:09.279
duyabileceğimiz tüm argümanlarla birlikte.

05:09.279 --> 05:11.600
Bununla birlikte karşılaşacağımız tek sorun,

05:11.600 --> 05:14.021
böyle bir name özelliğinin var olup olmadığını

05:14.021 --> 05:16.250
bilmememiz ve doğru bir şekilde, bu WithTemplate

05:16.250 --> 05:19.639
dekoratörünü hangi sınıfa ekleyeceğimizi bilmememizdir, bu nedenle

05:19.639 --> 05:22.530
eklediğimiz sınıfta bir name özelliği olup olmayacağını

05:22.530 --> 05:23.951
bilmiyoruz.

05:23.951 --> 05:25.560
Ancak, TypeScript'e T nesnesinin

05:25.560 --> 05:27.140
temel alındığını söyleyerek

05:27.140 --> 05:30.200
bunu düzeltebiliriz, böylece orijinal kurucu

05:30.200 --> 05:32.773
işlevimiz herhangi bir nesne üretmekle

05:32.773 --> 05:35.530
kalmaz, aslında string türünde olacak bir

05:35.530 --> 05:37.460
name özelliğine sahip bir nesne

05:37.460 --> 05:41.140
üretir ve bu doğrudur.

05:41.140 --> 05:44.922
WithTemplate dekoratörümüz, name özelliğine sahip olacak

05:44.922 --> 05:46.250
bir sınıfa eklenir.

05:46.250 --> 05:47.300
Eğer bunu yorumlamazsam

05:47.300 --> 05:48.133
hata alırız, çünkü

05:48.133 --> 05:50.740
şimdi bu dekoratörü bu kriteri karşılamayan

05:50.740 --> 05:53.460
bir sınıfa eklemeye çalışacağız, ancak burada

05:53.460 --> 05:55.543
bu kriteri karşılıyor.

05:55.543 --> 05:58.790
Şimdi, bunu derlemeye çalıştığımda burada bir hata alıyorum, çünkü burada

05:58.790 --> 06:00.630
args kullanmıyorum, typescript'e bunu

06:00.630 --> 06:02.660
kullanmadığımızı bildiğimizi ve bunu yok saymak

06:02.660 --> 06:06.230
istediğimizi söylemek için bunu _ olarak değiştirebiliriz.

06:06.230 --> 06:08.050
Bu geçerli bir parametre adıdır,

06:08.050 --> 06:10.678
sadece typescript'in I get it, I need to accept

06:10.678 --> 06:13.220
it, but I won't use it parameter olarak aldığı

06:13.220 --> 06:15.260
özel bir addır.

06:15.260 --> 06:18.273
Ve bununla birlikte, hepsi derlenir ve yeniden

06:19.440 --> 06:22.420
yüklediğimizde, Max'i hala sayfada görürüz.

06:22.420 --> 06:23.910
İlginç olan şu ki, eğer

06:23.910 --> 06:25.480
Person'ı örneklediğimiz

06:25.480 --> 06:27.060
kodu kaldırırsak, eğer

06:27.060 --> 06:28.440
bunu yorumlayarak sadece

06:28.440 --> 06:30.740
bir Person sınıfı bulursam, ama onu

06:30.740 --> 06:33.550
hiçbir yerde örneklemezsem, yeniden yüklendiğinde

06:33.550 --> 06:36.890
ekranda Max'ı görmeyiz.

06:36.890 --> 06:39.467
Tüm dekoratörler çalışmaya devam ediyor,

06:39.467 --> 06:42.410
ancak artık ekrana hiçbir şey yansıtmıyoruz.

06:42.410 --> 06:43.243
Bunun nedeni,

06:43.243 --> 06:46.340
yeni bir değer ya da bu durumda yeni bir kurucu

06:46.340 --> 06:49.520
fonksiyon döndürebilme özelliğinden yararlanarak

06:49.520 --> 06:52.360
dekoratörümüzü daha da geliştirmiş

06:52.360 --> 06:55.350
olmamızdır.

06:55.350 --> 06:57.205
Sınıf dekoratörü söz konusu olduğunda.

06:57.205 --> 07:00.780
Bu yeni bir kurucu işlev ya da yeni bir sınıftır, açıkladığım

07:00.780 --> 07:04.300
gibi bu sadece kurucu işlev için sözdizimsel bir şekerdir

07:04.300 --> 07:06.750
ve bu nedenle bu kurucu işlev orijinal

07:06.750 --> 07:09.070
sınıfımızın, orijinal kurucu işlevimizin

07:09.070 --> 07:12.160
yerini alır.

07:12.160 --> 07:15.220
Şimdi, burada super dediğim için orijinal

07:15.220 --> 07:17.610
fonksiyonu kaydediyoruz.

07:17.610 --> 07:19.690
Orijinal sınıfı kaydediyoruz, burada

07:19.690 --> 07:22.540
başlattığımız her şey temelde hala gerçekleşiyor,

07:22.540 --> 07:25.530
çünkü bunu değiştiren kurucumda da yapıyorum ve orijinal

07:25.530 --> 07:27.480
sınıfı genişletiyorum.

07:27.480 --> 07:30.420
Bu yüzden orijinal sınıftaki her şeyi kaydediyoruz.

07:30.420 --> 07:31.550
Bunu yapmak zorunda değilsiniz

07:31.550 --> 07:32.670
ama ben burada yapıyorum

07:32.670 --> 07:35.560
çünkü orijinal verileri kaybetmek istemiyorum.

07:35.560 --> 07:36.850
Ancak, perde arkasında,

07:36.850 --> 07:39.770
sınıfı buradaki yeni özel sınıfımla değiştiriyorum

07:39.770 --> 07:42.370
ve bu, sınıf örneklendiğinde çalışması gereken

07:42.370 --> 07:45.600
ekstra mantık eklememize olanak tanıyor.

07:45.600 --> 07:49.090
Ve şimdi aniden, sınıf tanımlandığında değil,

07:49.090 --> 07:52.410
sınıf örneklendiğinde çalışan bir mantık

07:52.410 --> 07:54.660
ekleyebiliyoruz.

07:54.660 --> 07:57.150
Dolayısıyla bu, dekoratörlerle neler

07:57.150 --> 08:01.860
yapabileceğinizi gerçekten anladığınızda ortaya çıkarabileceğiniz tam

08:01.860 --> 08:04.480
gücün harika bir ilk örneği olmalıdır.

08:04.480 --> 08:06.800
Ve bunları sadece fonksiyon olarak tanımlayamazsınız

08:06.800 --> 08:09.970
ve sadece faktör fonksiyonları ile tanımlayamazsınız.

08:09.970 --> 08:12.600
Sınıf dekoratörü gibi bazı dekoratörlerde,

08:12.600 --> 08:14.400
dekoratörü eklediğiniz şeyi,

08:14.400 --> 08:17.650
bizim durumumuzda sınıfı, eski sınıfı uygulayabilen

08:17.650 --> 08:19.470
ancak aynı zamanda yeni özel mantığını

08:19.470 --> 08:23.000
ekleyebilen yeni bir sınıfla değiştirmek için bir şey de

08:23.000 --> 08:25.711
döndürebilirsiniz.

08:25.711 --> 08:28.004
Ve bununla birlikte, bunu tekrar yorumlarsak,

08:28.004 --> 08:30.240
Max'i ekrana eski sınıfın yerini alan

08:30.240 --> 08:31.570
veya onu genişleten ve

08:31.570 --> 08:35.793
değiştiren kendi sınıfımızla yeniden işleriz.
