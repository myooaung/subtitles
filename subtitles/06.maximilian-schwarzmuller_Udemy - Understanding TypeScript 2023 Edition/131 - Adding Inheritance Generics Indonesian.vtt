WEBVTT

00:02.410 --> 00:04.290
Instruktur: Jadi waktunya untuk

00:04.290 --> 00:06.370
pewarisan dan untuk kelas dasar.

00:06.370 --> 00:09.189
Saya ingin menambahkan kelas dasar, yang pada dasarnya memiliki

00:09.189 --> 00:12.090
templateElement, hostElement, sebuah elemen di dalamnya,

00:12.090 --> 00:15.430
yang melakukan pekerjaan memilih elemen di dom, yang memiliki metode

00:15.430 --> 00:16.810
attach, yang selalu kita butuhkan,

00:16.810 --> 00:18.520
dan seterusnya.

00:18.520 --> 00:22.540
Jadi yang pada dasarnya mengelola semua fungsi bersama ini,

00:22.540 --> 00:26.630
yang dimiliki oleh kelas-kelas kita yang benar-benar merender

00:26.630 --> 00:28.220
sesuatu ke dom.

00:28.220 --> 00:30.880
Jadi untuk itu, di atas ProjectInput saya,

00:30.880 --> 00:35.650
dan juga kelas ProjectList, jadi pada dasarnya di sini, saya akan menambahkan

00:35.650 --> 00:38.250
Component Base Class.

00:38.250 --> 00:41.540
Sekarang, namanya terserah Anda, tetapi saya akan menamainya Component,

00:41.540 --> 00:44.090
karena Anda mungkin tahu istilah ini dari React atau Angular,

00:44.090 --> 00:45.870
jika Anda bekerja dengan itu, dan bahkan

00:45.870 --> 00:47.590
jika Anda tidak bekerja dengan itu, Anda

00:47.590 --> 00:49.873
dapat menganggap kelas-kelas ini sebagai UI, komponen

00:50.770 --> 00:53.950
antarmuka pengguna, yang Anda render ke layar.

00:53.950 --> 00:57.950
Dan setiap komponen pada akhirnya adalah objek yang dapat dirender, yang memiliki

00:57.950 --> 00:59.970
beberapa fungsi yang memungkinkan kita

00:59.970 --> 01:01.370
untuk merendernya.

01:01.370 --> 01:05.260
Dan kemudian instance konkret, atau kelas yang diwariskan,

01:05.260 --> 01:10.260
menambahkan fungsionalitas ekstra yang dibutuhkan komponen spesifik ini.

01:10.300 --> 01:14.370
Jadi, apa yang masuk ke dalam kelas Komponen umum?

01:14.370 --> 01:17.590
Nah, saya akan mengatakan ketiga elemen ini dengan pasti.

01:17.590 --> 01:21.390
templateElement, hostElement, dan elemen.

01:21.390 --> 01:23.590
Namun, sekarang, kita memiliki masalah di

01:23.590 --> 01:25.470
sini, mengenai jenis-jenisnya.

01:25.470 --> 01:28.320
TemplateElement akan selalu berupa HTMLTemplateElement,

01:29.160 --> 01:31.980
tetapi hostElement tidak selalu harus berupa div, misalnya,

01:31.980 --> 01:35.410
ketika kita akan menambahkan kelas item proyek, kita akan merendernya

01:35.410 --> 01:37.160
dalam ProjectList, dan tidak langsung

01:37.160 --> 01:42.360
bahkan root div kita di sini, jadi itu tidak selalu berupa div.

01:42.360 --> 01:45.220
Dan ini di sini, yah, itu selalu merupakan HTMLElement,

01:45.220 --> 01:47.040
kita pasti bisa menyelesaikannya,

01:47.040 --> 01:50.540
tetapi, seperti dalam kasus kelas ProjectInput, kita sebenarnya

01:50.540 --> 01:52.560
tahu bahwa itu adalah suatu bentuk spesifiknya,

01:52.560 --> 01:55.230
itu adalah HTMLFormElement.

01:55.230 --> 01:57.540
Jadi, kita akan kehilangan informasi ekstra

01:57.540 --> 02:00.320
ini, jika kita membatasi diri kita untuk selalu memiliki

02:00.320 --> 02:02.130
HTMLElement di sana, tanpa menyimpan

02:02.130 --> 02:05.220
informasi yang lebih spesifik.

02:05.220 --> 02:07.690
Jadi, bagaimana kita bisa mengatasinya?

02:07.690 --> 02:10.050
Nah, dengan tidak hanya menggunakan pewarisan,

02:10.050 --> 02:12.920
tetapi dengan membuat kelas generik di sini, di mana ketika

02:12.920 --> 02:15.230
kita mewarisi dari kelas tersebut, kita bisa

02:15.230 --> 02:17.680
mengatur tipe-tipe konkretnya.

02:17.680 --> 02:20.940
Untuk itu, kita menambahkan tanda kurung sudut setelah nama

02:20.940 --> 02:23.550
kelas, dan kemudian, dua pengidentifikasi pilihan

02:23.550 --> 02:26.690
kita, seperti T dan U, yang akan menjadi pilihan umum.

02:26.690 --> 02:30.110
Dan sekarang, kita juga bisa menambahkan beberapa batasan

02:30.110 --> 02:34.820
di sini, dan mengatakan bahwa T pasti akan menjadi semacam HTMLElement.

02:34.820 --> 02:36.770
Ini bisa hanya berupa HTMLElement,

02:36.770 --> 02:38.970
atau versi yang lebih spesifik.

02:38.970 --> 02:41.870
Dan hal yang sama juga berlaku untuk U.

02:41.870 --> 02:44.780
Dan kemudian di sini, kita tahu hostElement akan bertipe

02:44.780 --> 02:46.690
T, dan elemennya akan bertipe U.

02:46.690 --> 02:48.660
Dan sekarang, kapanpun kita mewarisi dari kelas

02:48.660 --> 02:50.970
ini, kita bisa menentukan tipe-tipe konkritnya, sehingga

02:50.970 --> 02:52.930
kita bisa bekerja dengan tipe-tipe yang berbeda

02:52.930 --> 02:54.780
di berbagai tempat di mana kita mewarisi.

02:56.050 --> 02:58.053
Sekarang, mari kita tambahkan juga konstruktor di sini.

02:58.910 --> 03:01.080
Dalam konstruktor itu, kita akan memerlukan

03:01.080 --> 03:03.060
sedikit informasi.

03:03.060 --> 03:05.950
Kita perlu mengetahui ID template kita, sehingga

03:05.950 --> 03:08.030
kita tahu cara memilihnya, dan itu

03:08.030 --> 03:09.750
harus berupa string.

03:09.750 --> 03:11.590
Kita perlu mengetahui hostElementId,

03:11.590 --> 03:13.050
yang juga harus berupa string,

03:13.050 --> 03:15.833
sehingga kita tahu di mana merender komponen ini.

03:17.440 --> 03:20.505
Dan saya juga ingin mendapatkan newElementId, sehingga kita

03:20.505 --> 03:22.590
mendapatkan ID yang harus ditetapkan ke

03:22.590 --> 03:24.350
elemen yang baru dirender.

03:24.350 --> 03:26.020
Namun, ini bersifat opsional, yang

03:26.020 --> 03:28.210
saya tandai dengan menambahkan tanda tanya

03:28.210 --> 03:29.690
setelah parameter.

03:29.690 --> 03:31.940
Alternatifnya adalah juga menerima undefined

03:31.940 --> 03:34.050
di sini sebagai sebuah tipe, tetapi saya

03:34.050 --> 03:36.470
hanya akan menggunakan tanda tanya.

03:36.470 --> 03:38.510
Dan sekarang, dengan itu di konstruktor,

03:38.510 --> 03:39.793
pada dasarnya, kita bisa

03:40.640 --> 03:42.083
mendapatkan kode ini di sini,

03:43.810 --> 03:46.950
dan memasukkannya ke dalam konstruktor kelas Komponen, sehingga

03:46.950 --> 03:48.940
kita menyimpan templateElement, tetapi,

03:48.940 --> 03:52.060
tentu saja, sekarang ID, yang kita dapatkan di sini, adalah

03:52.060 --> 03:55.400
templateId, itulah sebabnya saya mendapatkan ini sebagai argumen

03:55.400 --> 03:57.450
di konstruktor.

03:57.450 --> 04:00.060
Dan untuk hostElement, ID di sini, tentu saja,

04:00.060 --> 04:02.733
adalah hostElementId kita, seperti ini.

04:04.790 --> 04:07.930
Yang juga penting, tentu saja, mengenai casting di sini, kita

04:07.930 --> 04:10.230
tahu ini akan bertipe T, karena T di sini adalah

04:10.230 --> 04:12.580
tipe generik ini, yang kita simpan atau yang kita

04:12.580 --> 04:15.420
gunakan untuk hostElement kita, jadi di sini kita sudah

04:15.420 --> 04:17.163
bisa melakukan cast.

04:18.160 --> 04:20.253
Dan dengan itu, kita memilih elemen.

04:21.130 --> 04:22.940
Kita juga bisa mengambil lebih banyak kode.

04:22.940 --> 04:26.650
Kode di sini, di mana kita mengimpor simpul dan seterusnya, dan

04:26.650 --> 04:30.130
di mana kita mengatur ID, kita bisa mengambil semua itu.

04:30.130 --> 04:32.520
Jadi mari kita salin itu di sini, dan tambahkan

04:32.520 --> 04:35.317
ini ke konstruktor kelas Component juga.

04:35.317 --> 04:37.640
importedNode, lalu kita set element,

04:37.640 --> 04:41.080
dan element di sini memiliki tipe generik U, jadi ketika

04:41.080 --> 04:43.000
kita cast ini di sini, kita tahu

04:43.000 --> 04:46.870
ini akan menjadi tipe U di sini, jadi kita harus cast ke U.

04:46.870 --> 04:49.090
Itu adalah penggunaan generik yang baik di sini, yang

04:49.090 --> 04:51.993
membuat kelas Component ini benar-benar dapat digunakan kembali.

04:53.060 --> 04:55.200
Sekarang, mengenai ID.

04:55.200 --> 04:58.200
Inilah yang kita dapatkan di sini, newElementId.

04:58.200 --> 05:00.590
Sekarang, tentu saja kita mungkin tidak selalu memiliki ini,

05:00.590 --> 05:02.150
karena ini opsional, jadi kita harus memeriksa

05:02.150 --> 05:03.870
apakah kita memilikinya.

05:03.870 --> 05:06.070
Jadi jika newElementId adalah sesuatu, dan hanya jika

05:06.070 --> 05:07.650
itu adalah sesuatu, baru saya akan mencoba

05:07.650 --> 05:09.710
menetapkannya, jika tidak, kita tidak mencobanya,

05:09.710 --> 05:10.543
karena dengan demikian

05:10.543 --> 05:13.023
kita tidak memiliki ID untuk ditetapkan.

05:14.420 --> 05:16.300
Nah, dengan itu, kita memiliki konstruktor.

05:16.300 --> 05:19.160
Sekarang mari kita gunakan fungsi attach di sini.

05:19.160 --> 05:21.970
Jadi mari kita salin metode attach dari salah

05:21.970 --> 05:25.470
satu kelas lain dan menambahkannya di sini, sebagai

05:25.470 --> 05:28.473
metode privat, di kelas Component.

05:32.690 --> 05:35.640
Kemudian, kita juga bisa menyebutnya. dilampirkan di akhir

05:35.640 --> 05:38.540
konstruktor kelas Component.

05:38.540 --> 05:39.960
Sekarang, di sini kita ingin menambahkan

05:39.960 --> 05:42.570
elemen, tetapi kita tidak tahu di mana elemen itu harus

05:42.570 --> 05:44.193
ditambahkan, jadi itu sebenarnya

05:44.193 --> 05:46.450
beberapa informasi tambahan yang harus kita ambil

05:46.450 --> 05:49.450
di sini, sebagai argumen keempat dalam kontruktor, masukkan

05:52.430 --> 05:54.200
Atstart bisa berupa nama, dan itu adalah

05:54.200 --> 05:56.680
boolean, katakanlah.

05:56.680 --> 06:00.190
Dan kita harus memindahkannya di depan parameter opsional kita.

06:00.190 --> 06:02.230
Parameter opsional harus selalu berada di urutan terakhir,

06:02.230 --> 06:03.980
karena orang mungkin menghilangkannya.

06:03.980 --> 06:06.680
Oleh karena itu, parameter wajib Anda, tidak bisa

06:06.680 --> 06:09.220
muncul setelah parameter opsional ini.

06:09.220 --> 06:13.533
Dan insertAtStart kemudian diteruskan ke attach, di sana, insertAtBeginning,

06:14.615 --> 06:18.740
Anda juga bisa menggunakan kembali insertAtStart, saya hanya menggunakan

06:18.740 --> 06:21.350
nama yang berbeda di sini untuk menghindari kebingungan,

06:21.350 --> 06:23.470
diterima sebagai boolean.

06:23.470 --> 06:28.040
Dan kemudian di sini, kita memeriksa apakah insertAtBeginning benar,

06:28.040 --> 06:32.920
jika benar, maka di sini, kita memiliki afterbegin, jika tidak, kita memiliki

06:32.920 --> 06:34.887
beforeend.

06:36.770 --> 06:39.653
Sekarang kita fleksibel mengenai bagaimana ini dimasukkan.

06:42.980 --> 06:46.570
Saya juga ingin menandai kelas ini sekarang sebagai kelas abstrak, karena

06:46.570 --> 06:49.600
orang tidak boleh langsung menginstansiasinya, sebaliknya,

06:49.600 --> 06:52.560
kelas ini harus selalu digunakan untuk pewarisan.

06:52.560 --> 06:56.090
Jadi di depan kelas, saya menambahkan kata kunci abstrak.

06:56.090 --> 06:58.750
Hal ini memastikan bahwa sekarang kita tidak bisa menginstansiasinya.

06:58.750 --> 07:01.963
Jika kita mencoba melakukannya, TypeScript akan meneriaki kita.

07:04.070 --> 07:06.490
Saya juga akan menambahkan dua metode

07:06.490 --> 07:08.410
lagi, yaitu metode configure,

07:08.410 --> 07:10.840
dan juga metode renderContent.

07:10.840 --> 07:13.430
Dan saya akan menambahkannya sebagai metode abstrak,

07:13.430 --> 07:16.463
yang berarti implementasi konkretnya tidak ada di sini,

07:18.000 --> 07:21.080
tetapi pada dasarnya, kita sekarang memaksa kelas mana pun

07:21.080 --> 07:22.670
yang mewarisi komponen, untuk

07:22.670 --> 07:25.980
menambahkan dua metode ini dan membuatnya tersedia.

07:25.980 --> 07:27.220
Saya hanya menambahkan ini

07:27.220 --> 07:29.390
di sini, sehingga jika orang lain melihat kode

07:29.390 --> 07:31.460
kita, dia bisa mendapatkan pemahaman yang

07:31.460 --> 07:34.150
baik tentang apa ide di balik kelas Component.

07:34.150 --> 07:36.340
Bahwa ia melakukan semua rendering umum,

07:36.340 --> 07:38.530
atau lampiran komponen, tetapi konten

07:38.530 --> 07:40.790
konkret dan konfigurasi kemudian perlu

07:40.790 --> 07:43.840
terjadi di tempat di mana kita mewarisi.

07:43.840 --> 07:47.670
Catatan tambahan, Anda tidak bisa memiliki metode abstrak yang privat.

07:47.670 --> 07:49.660
Jadi private harus dihilangkan di sini,

07:49.660 --> 07:52.000
yang tidak diperbolehkan oleh TypeScript.

07:52.000 --> 07:54.590
Nah, dan dengan ini, kita dapat memperluas Component

07:54.590 --> 07:56.480
di sini pada ProjectList, dan sekarang

07:56.480 --> 07:59.130
menyingkirkan ketiga properti ini.

07:59.130 --> 08:00.640
Kita menyimpan assignedProjects,

08:00.640 --> 08:03.520
karena itu spesifik untuk ProjectList.

08:03.520 --> 08:06.620
Kita juga sekarang ingin menentukan nilai konkret

08:06.620 --> 08:09.560
yang harus dimasukkan untuk tipe generik kita.

08:09.560 --> 08:12.410
Dan kita tahu, jika kita mengembalikan ini, kita

08:12.410 --> 08:16.540
tahu bahwa kita akan memiliki HTMLDivElement dan HTMLElement, jadi

08:16.540 --> 08:19.313
di sini saya akan mengoper HTMLDivElement, dan

08:20.410 --> 08:22.800
HTMLElement, seperti ini, dan kemudian

08:22.800 --> 08:25.830
menyingkirkan ketiga properti ini.

08:25.830 --> 08:29.510
Di dalam konstruktor, kita sekarang tidak memerlukannya di sini, tetapi

08:29.510 --> 08:32.550
kita perlu memanggil super di awal, untuk memanggil kontruktor

08:32.550 --> 08:35.130
kelas dasar, dan untuk itu, kita perlu melewatkan

08:35.130 --> 08:38.080
beberapa informasi ke kontruktor super, kita perlu melewatkan

08:38.080 --> 08:40.840
beberapa informasi.

08:40.840 --> 08:42.753
ID dari templateElement, hostElementId,

08:44.050 --> 08:45.850
apakah kita ingin menyisipkan

08:45.850 --> 08:47.870
ini di awal hostElement, dan, kemungkinan,

08:47.870 --> 08:51.920
ID yang harus ditetapkan ke elemen baru.

08:51.920 --> 08:54.038
Jadi inilah ID templat kita, dan

08:54.038 --> 08:57.811
dengan itu kita dapat menyingkirkan ini di sini.

08:57.811 --> 09:01.292
Kemudian di sini, hostElement, ID itu adalah aplikasi, jadi kita

09:01.292 --> 09:02.670
bisa menyingkirkan ini.

09:02.670 --> 09:04.260
Kita tetap mempertahankan assignedProjects,

09:04.260 --> 09:06.400
karena kita masih memerlukannya di sini.

09:06.400 --> 09:08.193
Kita singkirkan ini di sini,

09:10.150 --> 09:13.050
tetapi, mengenai ID untuk elemen baru, saya ingin

09:13.050 --> 09:16.850
mengopernya sebagai parameter keempat sebenarnya.

09:16.850 --> 09:19.040
Yang ketiga adalah di mana ini harus disisipkan,

09:19.040 --> 09:22.400
dan di sini, kita gunakan untuk menyisipkan ini sebelum akhir,

09:22.400 --> 09:25.890
jadi sebenarnya apa yang ingin saya sisipkan di sini sebagai parameter

09:25.890 --> 09:29.170
untuk nilai insertAtStart adalah false, karena seharusnya tidak

09:29.170 --> 09:32.283
disisipkan di awal, tetapi di akhir.

09:36.000 --> 09:38.940
Sekarang, saya tentu saja masih ingin menyiapkan pendengar saya di sini.

09:38.940 --> 09:40.730
Saya tidak perlu memanggil attach,

09:40.730 --> 09:44.410
itu akan terjadi di kelas dasar, di komponen dasar.

09:44.410 --> 09:46.253
Saya akan memanggil renderContent.

09:47.870 --> 09:50.010
Dan di sini kita tidak boleh menggunakan tipe ini,

09:50.010 --> 09:52.100
tetapi cukup ketik saja, karena kita tidak bisa menggunakan

09:52.100 --> 09:54.410
ini sebelum super selesai dijalankan.

09:54.410 --> 09:55.490
Namun itu tidak masalah,

09:55.490 --> 09:57.690
karena kami menerima tipe sebagai argumen.

09:57.690 --> 09:59.680
Sekarang, Anda lihat saya masih mendapatkan

09:59.680 --> 10:03.487
error di sini, karena kita memiliki metode attach di sini di ProjectList, dan

10:03.487 --> 10:05.410
itu berbenturan dengan metode attach yang

10:05.410 --> 10:07.330
kita miliki di kelas dasar.

10:07.330 --> 10:10.600
Jadi mari kita singkirkan metode attach ini di sini.

10:10.600 --> 10:14.024
Sekarang kita masih mendapatkan error, karena Anda lihat, renderContent

10:14.024 --> 10:16.060
adalah private di sini, tetapi kita menentukannya

10:16.060 --> 10:18.270
sebagai metode publik di sini, saya ingin sekali

10:18.270 --> 10:20.240
memilikinya sebagai metode private, tetapi

10:20.240 --> 10:22.860
metode abstrak private tidak didukung.

10:22.860 --> 10:25.680
Jadi saya akan menghapus kata kunci privat di sini, dan sekarang dengan

10:25.680 --> 10:28.170
itu, kita ditinggalkan dengan satu masalah di sini, bahwa kita

10:28.170 --> 10:30.510
tidak memiliki metode konfigurasi, yang saya janjikan

10:30.510 --> 10:31.990
akan kita miliki di sini.

10:31.990 --> 10:33.650
Nah, mari kita tambahkan.

10:33.650 --> 10:38.500
Jadi di sini, selain renderConfig, kita bisa menambahkan configure, meskipun saya

10:38.500 --> 10:40.510
tidak melakukan apa-apa di sini.

10:40.510 --> 10:42.950
Atau, Anda bisa mengubahnya di sini menjadi metode

10:42.950 --> 10:46.000
opsional dengan menambahkan tanda tanya, lalu, Anda tidak dipaksa

10:46.000 --> 10:47.520
untuk menambahkannya.

10:47.520 --> 10:50.380
Di sini, saya akan menambahkannya karena kita juga

10:50.380 --> 10:53.210
bisa berargumen bahwa kita, untuk ProjectList, meletakkan

10:53.210 --> 10:56.490
kode di mana kita mengatur listener kita di sini, sebenarnya

10:56.490 --> 10:58.530
ke dalam configure.

10:58.530 --> 11:00.810
Jadi kita bisa menjangkau untuk mengkonfigurasi,

11:00.810 --> 11:03.320
dan kemudian melakukan hal kita di sini, pengaturan

11:03.320 --> 11:05.220
pendengar itu.

11:05.220 --> 11:06.610
Dan sekarang, kita harus memastikan

11:06.610 --> 11:10.653
bahwa kita memanggil renderContent, tetapi juga mengkonfigurasi seperti ini.

11:12.730 --> 11:14.440
Jika Anda bertanya-tanya mengapa saya

11:14.440 --> 11:16.450
tidak memanggil configure dan renderContent

11:16.450 --> 11:18.560
di sini di kelas abstrak dalam contructor, well,

11:18.560 --> 11:19.993
kita bisa saja melakukan hal ini,

11:21.780 --> 11:23.720
tetapi kita mungkin memiliki masalah.

11:23.720 --> 11:26.760
Jika kita memanggil ini di kelas Component, maka,

11:26.760 --> 11:30.770
kita mungkin memanggil metode di kelas yang mewarisi, jadi di kelas

11:30.770 --> 11:33.240
yang memperluas Component, di mana renderContent

11:33.240 --> 11:36.810
atau configure bergantung pada sesuatu di mana kontraktor

11:36.810 --> 11:39.410
kelas yang mewarisi sebenarnya mungkin mengatur

11:39.410 --> 11:41.540
sesuatu, hanya setelah kontruktor

11:41.540 --> 11:44.710
kelas dasar selesai, yang diandalkan oleh renderContent

11:44.710 --> 11:48.100
dan atau configure.

11:48.100 --> 11:50.690
Itulah mengapa lebih aman untuk, pada dasarnya, memastikan

11:50.690 --> 11:52.410
bahwa kelas pewarisan harus memanggil

11:52.410 --> 11:55.410
metode-metode ini, bukannya kelas dasar yang memanggil metode-metode

11:55.410 --> 11:56.860
ini untuk kita.

11:57.980 --> 12:01.280
Jadi dengan itu, kita merestrukturisasi kelas ProjectList

12:01.280 --> 12:05.040
untuk memanfaatkan pewarisan dan logika bersama kita.

12:05.040 --> 12:07.730
Mari kita lakukan hal yang sama untuk ProjectInput sekarang.

12:07.730 --> 12:11.790
Di sana, kami juga ingin memperluas

12:11.790 --> 12:13.170
Component.

12:13.170 --> 12:14.900
Gunakan sifat generik itu,

12:14.900 --> 12:19.430
dan di sana, kita memiliki HTMLDivElement untuk hostElement,

12:19.430 --> 12:23.980
dan HTMLFormElement untuk elemen yang akan dirender.

12:23.980 --> 12:27.210
Dengan itu, kita bisa menyingkirkan ketiga properti ini di sini, jadi

12:27.210 --> 12:28.310
mari kita lakukan itu.

12:28.310 --> 12:30.090
Tentu saja, kita menyimpan ketiga properti

12:30.090 --> 12:32.140
ini, karena mereka spesifik untuk ProjectInput.

12:33.040 --> 12:35.310
Kita kemudian harus memanggil super

12:35.310 --> 12:38.320
di sini, dan ke super kita mengoper ID templat,

12:38.320 --> 12:39.900
yaitu ProjectInput, ID elemen

12:39.900 --> 12:41.970
host, yaitu app, insertBefore di

12:41.970 --> 12:45.270
sini adalah true, karena saya ingin menyisipkan elemen

12:45.270 --> 12:47.620
yang baru dibuat itu di awal di sini untuk

12:47.620 --> 12:50.510
kelas ProjectInput ini.

12:50.510 --> 12:53.110
Dan kemudian, newElementId, nah, yang ada di

12:53.110 --> 12:55.170
sini adalah input pengguna, jadi kita

12:55.170 --> 12:56.913
juga harus meneruskannya.

12:57.844 --> 12:59.400
Dengan ini, kita bisa menyingkirkan

12:59.400 --> 13:03.480
kode ini, kode ini, dan semua kode di sini sebenarnya.

13:03.480 --> 13:05.240
Tentu saja, simpan kode ini di sini.

13:05.240 --> 13:07.820
Namun, kita juga bisa berpendapat bahwa kita menempatkan

13:07.820 --> 13:09.860
ini ke dalam konfigurasi mungkin.

13:09.860 --> 13:12.100
Jadi mari kita turun ke metode configure, yang sudah

13:12.100 --> 13:13.660
kita miliki di sini, dan tambahkan

13:13.660 --> 13:17.683
pendengar kita di sini atau pengaturan properti kita di sini untuk dikonfigurasi.

13:18.880 --> 13:20.780
Tentu saja, mari kita singkirkan attach,

13:20.780 --> 13:24.450
karena itu sekarang sesuatu yang dilakukan kelas dasar untuk kita, dan mari

13:24.450 --> 13:26.980
kita periksa apa yang tidak disukai TypeScript, tentu

13:26.980 --> 13:29.690
saja kita harus menyingkirkan attach di sini.

13:29.690 --> 13:32.520
Dan ya, sebenarnya satu hal yang TypeScript tidak suka,

13:32.520 --> 13:35.090
sekarang mengeluh bahwa field-field ini tidak

13:35.090 --> 13:37.190
diinisialisasi di dalam contructor,

13:37.190 --> 13:40.380
karena tidak mengerti atau tidak memeriksa bahwa configure

13:40.380 --> 13:42.260
dipanggil di dalam contructor dan

13:42.260 --> 13:44.770
melakukan inisialisasi ini.

13:44.770 --> 13:47.500
Jadi untuk memuaskan TypeScript, saya sebenarnya

13:47.500 --> 13:50.550
akan memindahkan inisialisasi ini kembali dari configure

13:50.550 --> 13:52.170
ke dalam konstruktor.

13:52.170 --> 13:54.190
Secara teknis, hasilnya persis sama, tetapi sekarang

13:54.190 --> 13:55.953
TypeScript tidak akan mengeluh.

13:56.800 --> 13:59.240
Akan tetapi, ia akan mengeluh bahwa kita

14:00.440 --> 14:02.310
memiliki metode configure privat,

14:02.310 --> 14:05.910
jadi seperti sebelumnya, kita harus mengubahnya, dan mengubah

14:05.910 --> 14:08.940
configure menjadi metode publik.

14:08.940 --> 14:11.460
Sekarang, ini bukan suatu keharusan, tetapi ini semacam konvensi

14:11.460 --> 14:13.000
untuk memiliki metode publik Anda terlebih

14:13.000 --> 14:14.570
dahulu, itulah sebabnya saya akan memindahkannya

14:14.570 --> 14:17.240
ke atas di atas metode privat lainnya di sini.

14:17.240 --> 14:19.370
Dan, tentu saja, sekarang juga mengeluh bahwa

14:19.370 --> 14:21.990
kita tidak memiliki metode renderContent.

14:21.990 --> 14:25.020
Sekarang, saya akan menambahkan satu, hanya karena kita perlu.

14:25.020 --> 14:26.780
Di sini kita tidak melakukan apa pun di dalamnya,

14:26.780 --> 14:28.890
jadi secara teknis itu tidak diperlukan, tetapi

14:28.890 --> 14:31.053
sekarang kita memenuhi kelas dasar kita.

14:32.260 --> 14:34.603
Catatan tambahan, renderContent, dan configure,

14:35.550 --> 14:39.590
di kelas ProjectList, juga bisa dipindahkan di atas metode privat di

14:39.590 --> 14:43.230
sini untuk alasan yang sama persis, untuk konvensi yang baru saja

14:43.230 --> 14:45.123
saya sebutkan.

14:46.440 --> 14:49.870
Dan dengan itu, kami juga merestrukturisasi ProjectInput,

14:49.870 --> 14:51.780
untuk memanfaatkan pewarisan dan

14:51.780 --> 14:55.330
membiarkan kelas dasar melakukan banyak pekerjaan.

14:55.330 --> 14:57.670
Mari kita lihat, apakah sekarang semua itu berhasil.

14:57.670 --> 15:00.710
Jika kita menyimpannya, itu mengkompilasi tanpa kesalahan,

15:00.710 --> 15:02.740
tampaknya berjalan dengan baik, jadi

15:02.740 --> 15:05.870
apakah ini berfungsi adalah pertanyaannya.

15:05.870 --> 15:07.810
Dan itu terlihat cukup bagus.

15:07.810 --> 15:09.720
Cara kerjanya sama seperti sebelumnya,

15:09.720 --> 15:11.600
tetapi sekarang kita memiliki kode yang

15:11.600 --> 15:14.240
lebih bersih, di mana kita memanfaatkan penggunaan kembali

15:14.240 --> 15:15.850
kode, berkat pewarisan.

15:15.850 --> 15:18.540
Sekarang, ini bukan satu-satunya tempat di mana kita bisa mewarisi.

15:18.540 --> 15:20.610
Saya ingin menyimpulkan kuliah ini

15:20.610 --> 15:24.230
dengan juga melakukan refactoring state proyek kita.

15:24.230 --> 15:26.240
Secara teknis, di sana kita tidak memerlukan

15:26.240 --> 15:29.450
pewarisan, karena kita hanya memiliki satu state yang kita kelola di

15:29.450 --> 15:31.230
seluruh aplikasi ini, tetapi bayangkan

15:31.230 --> 15:33.130
aplikasi yang lebih besar, di mana Anda memiliki

15:33.130 --> 15:35.310
beberapa state yang berbeda.

15:35.310 --> 15:37.240
Satu untuk status pengguna, apakah

15:37.240 --> 15:39.290
pengguna login dan sebagainya,

15:39.290 --> 15:43.030
satu untuk proyek, satu untuk keranjang belanja.

15:43.030 --> 15:45.600
Sekarang, Anda akan melihat bahwa beberapa

15:45.600 --> 15:48.080
fitur kelas state Anda selalu sama.

15:48.080 --> 15:50.520
Khususnya, larik pendengar itu,

15:50.520 --> 15:52.780
dan metode addListener.

15:52.780 --> 15:54.730
Jadi, kita juga bisa menggunakan kelas dasar di sini.

15:55.650 --> 15:58.170
Kita bisa menggunakan kelas State di sini,

15:58.170 --> 16:01.230
dan kelas itu memiliki array pendengar, dan kelas

16:01.230 --> 16:04.640
itu juga memiliki metode addListeners, jadi kita akan

16:04.640 --> 16:07.120
memotong keduanya dari ProjectState, dan

16:07.120 --> 16:09.160
menambahkannya ke State.

16:09.160 --> 16:12.610
Nah, itu juga berarti bahwa kita, tentu saja, tidak tahu apakah

16:12.610 --> 16:14.700
listener kita akan benar-benar mengembalikan

16:14.700 --> 16:16.720
larik proyek.

16:16.720 --> 16:18.253
Jadi sebenarnya di sini,

16:19.110 --> 16:20.760
untuk tipe fungsi ini, saya

16:20.760 --> 16:24.740
juga ingin memiliki tipe generik sebenarnya.

16:24.740 --> 16:27.440
Sehingga kita bisa mengatur ini dari luar.

16:27.440 --> 16:28.483
Kita bisa melakukannya,

16:29.790 --> 16:31.623
kita bisa menulis tipe generik, seperti

16:32.680 --> 16:35.730
ini di sini, tipe kustom, yang generik, kita bisa menambahkan tanda

16:35.730 --> 16:38.410
kurung siku setelah nama tipe kita, menggunakan identifier

16:38.410 --> 16:40.150
pilihan kita, dan kemudian menggunakan

16:40.150 --> 16:42.460
kembali tipe itu di sini.

16:42.460 --> 16:44.960
Sekarang, kita bisa membuat State generik, kita bisa menggunakan

16:44.960 --> 16:46.320
identifier yang sama, karena ini

16:46.320 --> 16:49.530
adalah konstruksi yang berbeda dari tipe kustom kita.

16:49.530 --> 16:53.520
Dan kemudian di sini, ketika kita mengatakan bahwa kita ingin memiliki

16:53.520 --> 16:56.780
daftar pendengar, kita harus memberi tahu TypeScript tipe

16:56.780 --> 16:58.850
generik mana yang digunakan pendengar

16:58.850 --> 17:01.510
untuk objek State yang kita buat ini.

17:01.510 --> 17:03.850
Dan itu berarti kita bisa meneruskan

17:03.850 --> 17:06.490
tipe generik kita di sini, dan di sini.

17:06.490 --> 17:09.410
Jadi ketika kita sekarang memperluas state, kita harus

17:09.410 --> 17:12.630
menentukan jenis data yang akan digunakan state ini, dan alih-alih

17:12.630 --> 17:14.930
state, ini kemudian diteruskan ke tipe kustom

17:14.930 --> 17:17.680
pendengar kita, itulah idenya.

17:17.680 --> 17:19.580
Dan bagaimana kita menggunakan semua itu?

17:19.580 --> 17:21.950
Nah, di bawah sana, di kelas ProjectState,

17:21.950 --> 17:24.930
kita cukup memperpanjang kelas State, dan sekarang,

17:24.930 --> 17:27.900
memberikan nilai, nilai konkret untuk tempat

17:27.900 --> 17:30.040
umum itu, dan di sini, nilai konkret

17:30.040 --> 17:32.480
ini adalah Project, karena ProjectState

17:32.480 --> 17:36.510
ini adalah tentang mengelola tebak apa?

17:36.510 --> 17:37.393
Proyek.

17:38.970 --> 17:41.650
Sekarang, konstruktor privat di sini memiliki masalah,

17:41.650 --> 17:43.390
seperti yang Anda ketahui, karena

17:43.390 --> 17:45.160
kita tidak memanggil super.

17:45.160 --> 17:46.930
Nah, kita harus melakukan itu, mari kita

17:46.930 --> 17:48.350
panggil super di sini, itu saja yang

17:48.350 --> 17:49.800
harus kita lakukan di sana.

17:50.640 --> 17:53.490
Dan di sini, jika kita gulir ke bawah, di mana kita

17:53.490 --> 17:55.880
pergi melalui pendengar, kita melihat

17:55.880 --> 17:57.890
pendengar adalah privat, dan itu

17:57.890 --> 18:00.240
privat di kelas dasar kita.

18:00.240 --> 18:01.860
Sekarang, itu berarti kita hanya bisa

18:01.860 --> 18:03.580
mengaksesnya dari dalam kelas dasar.

18:03.580 --> 18:06.760
Tetapi Anda belajar tentang pengubah akses

18:06.760 --> 18:09.380
lain, yang mirip dengan private, tetapi

18:09.380 --> 18:12.900
juga memungkinkan akses dari kelas pewarisan, dan

18:12.900 --> 18:14.990
itu akan dilindungi.

18:14.990 --> 18:17.200
Protected berarti masih tidak dapat

18:17.200 --> 18:18.930
diakses dari luar kelas, tetapi

18:18.930 --> 18:23.030
dapat diakses dari kelas mana pun yang mewarisinya.

18:23.030 --> 18:24.740
Dengan itu, mari kita simpan semua itu, seharusnya

18:24.740 --> 18:26.650
kompilasi akan baik-baik saja.

18:26.650 --> 18:28.940
Dan mari kita uji ini dengan cepat, dan itu terlihat

18:28.940 --> 18:31.790
bagus, sehingga berfungsi seperti sebelumnya, tetapi sekarang,

18:31.790 --> 18:34.160
sekali lagi, dengan kode yang sedikit lebih bagus,

18:34.160 --> 18:36.420
menggunakan pewarisan dan generik juga untuk

18:36.420 --> 18:38.363
manajemen state kita.
