WEBVTT

00:02.050 --> 00:04.370
Instruktor: Nie możemy ignorować izolowanych modułów,

00:04.370 --> 00:05.880
ale jest jeszcze jedna opcja, która

00:05.880 --> 00:08.000
właściwie nawet nie jest tutaj wspomniana,

00:08.000 --> 00:10.810
o której jednak sam chcę jeszcze wspomnieć.

00:10.810 --> 00:14.680
I to jest właśnie opcja no emit on error.

00:14.680 --> 00:16.200
Możesz ustawić to na true

00:16.200 --> 00:18.820
lub false, a domyślnie jest to false.

00:18.820 --> 00:19.653
Co to robi?

00:19.653 --> 00:21.330
Jeśli ustawimy ją na false, pozwól, że

00:21.330 --> 00:23.050
pokażę ci, gdzie może to być problem.

00:23.050 --> 00:26.530
Jest to problem, jeśli wprowadzimy błąd lub może być

00:26.530 --> 00:27.590
to problem.

00:27.590 --> 00:30.690
Powiedzmy tutaj, że rzeczywiście mam swój przycisk

00:30.690 --> 00:32.410
i usuwam ten wykrzyknik.

00:32.410 --> 00:34.750
Teraz nawet jeśli nie do końca rozumiemy,

00:34.750 --> 00:38.030
co się dzieje, problem tutaj jest po prostu taki, że TypeScript

00:38.030 --> 00:40.610
nie wie, że na pewno mamy tutaj przycisk.

00:40.610 --> 00:42.790
Przecież przy zapytaniu o przycisk możemy

00:42.790 --> 00:45.990
go nie dostać, jeśli w DOM-ie nie ma elementu spełniającego

00:45.990 --> 00:47.540
ten selektor to zwróci się

00:47.540 --> 00:48.800
teraz.

00:48.800 --> 00:50.910
I to jest w zasadzie to, na co narzeka TypeScript.

00:50.910 --> 00:54.849
Tutaj uzyskujemy dostęp do czegoś na potencjalnym obiekcie

00:54.849 --> 00:57.200
null i to nie jest dobre.

00:57.200 --> 00:59.300
Teraz to jest błąd, który mamy tutaj.

00:59.300 --> 01:02.120
Jeśli skompilujemy nasz kod, otrzymamy

01:02.120 --> 01:04.770
również ten błąd tutaj w konsoli.

01:04.770 --> 01:08.210
Mimo to, plik jest tworzony.

01:08.210 --> 01:11.660
Więc nawet jeśli usunę aplikację. jsfile zostanie odtworzony.

01:11.660 --> 01:13.910
Więc nawet jeśli mamy błąd, TypeScript

01:13.910 --> 01:16.300
tworzy plik JavaScript.

01:16.300 --> 01:18.740
To może być chciane lub nie.

01:18.740 --> 01:21.360
Może masz błąd w swoim pliku TypeScript i nie bardzo

01:21.360 --> 01:22.980
wiesz, jak go obejść, ale wiesz,

01:22.980 --> 01:26.000
że nie będzie to problem w ostatecznej aplikacji.

01:26.000 --> 01:29.410
Tak jak tutaj, nawet jeśli nie wiemy o wykrzykniku.

01:29.410 --> 01:31.577
Cóż, jeśli nie wiemy o wykrzykniku,

01:31.577 --> 01:35.900
możemy nie wiedzieć, jak wyłączyć ten błąd, w zasadzie.

01:35.900 --> 01:39.630
Ale i tak wiemy, że to zadziała na naszej stronie tutaj.

01:39.630 --> 01:41.890
Więc możemy być w porządku z kompilacją tego

01:41.890 --> 01:43.630
pomimo posiadania błędu.

01:43.630 --> 01:45.570
Ale oczywiście w rzeczywistości powinieneś

01:45.570 --> 01:48.850
dążyć do projektów wolnych od błędów i raczej uczyć się, jak możesz

01:48.850 --> 01:51.720
obejść ten problem, niż go ignorować.

01:51.720 --> 01:54.590
Niemniej jednak, możesz ustawić to na false lub

01:54.590 --> 01:57.590
nie ustawiać go w ogóle, ponieważ false jest domyślny,

01:57.590 --> 02:00.687
jeśli jesteś w porządku z generowaniem plików JavaScript,

02:00.687 --> 02:02.590
jeśli masz błąd.

02:02.590 --> 02:04.240
Jeśli jednak ustawisz to na

02:04.240 --> 02:07.700
true, to co się stanie, to że problematyczne pliki nie

02:07.700 --> 02:09.100
będą generowane.

02:09.100 --> 02:10.910
Jeśli teraz powtórzę to...

02:12.440 --> 02:15.110
Widzisz, nic nie jest generowane tak naprawdę.

02:15.110 --> 02:18.180
Nawet analityka. Plik ts nie jest tam

02:18.180 --> 02:21.440
wyprowadzany, jeśli mamy tam jakąś zawartość

02:21.440 --> 02:26.440
oprócz konsoli. log, widać, że nie jest generowany.

02:26.550 --> 02:27.560
A powodem tego

02:27.560 --> 02:29.600
jest to, że mamy błąd w pliku.

02:29.600 --> 02:32.940
A jeśli jakiś plik nie skompiluje się, żadne pliki nie

02:32.940 --> 02:34.300
zostaną pominięte.

02:34.300 --> 02:35.810
Dlatego tutaj musimy się upewnić,

02:35.810 --> 02:38.850
że naprawimy ten błąd, zanim będziemy mogli ponownie skompilować

02:38.850 --> 02:40.890
pliki dla TypeScript.

02:40.890 --> 02:43.530
I dlatego jest to opcja, którą zazwyczaj lubię ustawić,

02:43.530 --> 02:46.830
ponieważ nie jestem zainteresowany otrzymywaniem plików JavaScript,

02:46.830 --> 02:49.703
jeśli nadal mam błędy w moich plikach TypeScript.
