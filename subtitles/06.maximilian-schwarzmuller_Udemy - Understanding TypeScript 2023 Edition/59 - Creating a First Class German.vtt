WEBVTT

00:02.270 --> 00:03.103
Kursleiter: Dazu habe

00:03.103 --> 00:04.620
ich ein kleines Startprojekt für euch.

00:04.620 --> 00:05.610
Sie finden es im Anhang.

00:05.610 --> 00:07.070
Es handelt sich um das gleiche Ausgangsprojekt,

00:07.070 --> 00:08.810
das wir immer wieder verwendet haben.

00:08.810 --> 00:12.080
Man startet den Entwicklungsserver mit npm-start

00:12.080 --> 00:15.510
und dann habe ich die TypeScript-Kompilierung im Watch-Modus

00:15.510 --> 00:19.830
mit tsc-w in einem separaten Terminal gestartet.

00:19.830 --> 00:22.890
Hier in meinem eingebauten Terminal habe ich also zwei Registerkarten.

00:22.890 --> 00:24.390
Eine mit dem Entwicklungsserver,

00:24.390 --> 00:26.070
den man am Laufen halten sollte, damit

00:26.070 --> 00:27.670
er auf Änderungen achtet und die

00:27.670 --> 00:30.720
Seite neu lädt und den Server am Laufen hält, und eine weitere

00:30.720 --> 00:32.820
Registerkarte, auf der ich den TypeScript

00:32.820 --> 00:35.530
Compilation Watcher laufen lasse.

00:35.530 --> 00:36.930
Damit können wir jetzt in

00:36.930 --> 00:39.400
der App arbeiten. ts-Datei, die im Moment leer

00:39.400 --> 00:41.520
ist, und fange an, dort etwas Code zu schreiben, und

00:41.520 --> 00:42.990
ich möchte gleich damit beginnen,

00:42.990 --> 00:45.603
eine Klasse zu definieren, die wir verwenden können.

00:46.490 --> 00:49.420
Wir tun dies, indem wir das Schlüsselwort class

00:49.420 --> 00:51.340
verwenden, einfach so, und dann

00:51.340 --> 00:54.030
den Namen der Klasse. Sagen wir, wir bauen eine

00:54.030 --> 00:56.880
App, eine Webanwendung, eine Benutzeroberfläche

00:56.880 --> 01:00.700
für ein Webtool, mit dem wir unsere verschiedenen Abteilungen

01:00.700 --> 01:04.100
in unserem Unternehmen verwalten können.

01:04.100 --> 01:05.770
Vielleicht bauen wir eine Art unternehmensinternes

01:05.770 --> 01:08.440
Tool auf, was auch immer es ist, und wir müssen mehrere

01:08.440 --> 01:11.290
Abteilungen dort haben.

01:11.290 --> 01:13.790
Wir könnten nun Objekte verwenden, um die Daten

01:13.790 --> 01:16.320
für die verschiedenen Abteilungen zu verwalten,

01:16.320 --> 01:19.960
und wir könnten dann auch Methoden zu jedem Objekt hinzufügen, so

01:19.960 --> 01:21.980
dass wir die Abteilungsinformationen

01:21.980 --> 01:24.020
auf dem Bildschirm darstellen können,

01:24.020 --> 01:26.980
und um die Erstellung dieser verschiedenen Abteilungsobjekte,

01:26.980 --> 01:30.430
die alle gleich aussehen, zu vereinfachen, erstellen wir eine

01:30.430 --> 01:33.000
Abteilungsklasse.

01:33.000 --> 01:35.690
Wir könnten diese Klasse also Abteilung nennen.

01:35.690 --> 01:36.830
Der Name ist ganz Ihnen überlassen.

01:36.830 --> 01:40.030
Die Konvention ist, dass sie mit einem Großbuchstaben beginnt, um

01:40.030 --> 01:42.720
zu verdeutlichen, dass es sich um eine Klasse handelt.

01:42.720 --> 01:45.670
Wenn Sie sich schon länger mit der Entwicklung von JavaScript

01:45.670 --> 01:48.270
beschäftigen, kennen Sie vielleicht die Idee von

01:48.270 --> 01:50.090
Konstruktorfunktionen, und Klassen

01:50.090 --> 01:52.140
sind letztendlich syntaktischer Zucker

01:52.140 --> 01:53.920
dafür, aber das werden wir sehen, sobald

01:53.920 --> 01:56.980
wir unseren Code kompiliert haben.

01:56.980 --> 01:59.220
Hier haben wir also unsere Klasse Department,

01:59.220 --> 02:02.080
und darin haben wir vielleicht eine Eigenschaft name.

02:02.080 --> 02:04.010
Sie können es einfach so hinzufügen,

02:04.010 --> 02:07.290
ohne ein let oder const davor, direkt in der Klasse,

02:07.290 --> 02:09.840
und dann können Sie natürlich auch einen

02:09.840 --> 02:12.550
Typ zuweisen.

02:12.550 --> 02:14.690
Dazu fügen Sie hier einen Doppelpunkt

02:14.690 --> 02:17.920
ein und dann den Typ, z. B. string, und das ist wichtig.

02:17.920 --> 02:21.150
Dies mag wie ein Objekt aussehen, ist aber kein Objekt.

02:21.150 --> 02:23.240
In einem Objekt verwenden Sie Schlüssel-Wert-Paare

02:23.240 --> 02:25.520
mit einem Doppelpunkt, um einen Schlüsselnamen und dann

02:25.520 --> 02:27.000
den Wert für den Schlüssel zu haben.

02:27.000 --> 02:28.810
Das ist hier nicht der Fall.

02:28.810 --> 02:32.250
Dies ist ein sogenanntes Feld einer Klasse.

02:32.250 --> 02:34.680
Sie erstellen auch eine Klasse mit geschweiften

02:34.680 --> 02:37.110
Klammern, aber hier handelt es sich nicht um ein Schlüssel-Wert-Paar,

02:37.110 --> 02:39.120
sondern nur um den Namen eines Schlüssels,

02:39.120 --> 02:41.040
den Sie in dem Objekt haben werden, das Sie

02:41.040 --> 02:43.530
auf der Grundlage der Klasse erstellen werden, und

02:43.530 --> 02:48.530
Sie definieren den Werttyp, den der Schlüssel am Ende enthalten wird.

02:48.550 --> 02:52.363
Sie können hier auch einen Anfangswert mit = 'DEFAULT' festlegen,

02:53.840 --> 02:55.920
aber das ist nicht notwendig.

02:55.920 --> 02:59.050
Eine andere Sache, die man häufig in Klassen

02:59.050 --> 03:03.410
hat, ist eine spezielle Funktion, eine sogenannte Methode.

03:03.410 --> 03:06.780
Funktionen in Objekten werden einfach als Methoden bezeichnet,

03:06.780 --> 03:09.410
was die Konstruktormethode ist.

03:09.410 --> 03:12.500
Wir können es so hinzufügen, und dies ist ein reserviertes Wort.

03:12.500 --> 03:16.170
Konstruktor ist ein reserviertes Schlüsselwort, das von TypeScript

03:16.170 --> 03:18.390
und auch von modernem JavaScript verstanden

03:18.390 --> 03:22.480
wird. Es handelt sich im Wesentlichen um eine Funktion, die an diese Klasse und

03:22.480 --> 03:25.840
an jedes Objekt gebunden ist, das Sie auf der Grundlage der Klasse

03:25.840 --> 03:29.640
erstellen und die ausgeführt wird, wenn das Objekt erstellt wird.

03:29.640 --> 03:33.500
Damit können Sie im Grunde genommen einige Initialisierungsarbeiten für das

03:33.500 --> 03:35.700
Objekt durchführen, das Sie erstellen.

03:35.700 --> 03:38.280
Darin könnten Sie ein Argument akzeptieren.

03:38.280 --> 03:41.910
Nennen wir es vielleicht n, das auch vom Typ String sein könnte,

03:41.910 --> 03:45.620
und speichern Sie es in Ihrem Namensfeld hier, oder Sie können

03:45.620 --> 03:47.000
dies tun, indem Sie name

03:47.000 --> 03:49.050
mit dem Schlüsselwort this aufrufen

03:49.050 --> 03:51.200
und n darin speichern.

03:51.200 --> 03:55.200
Dadurch wird der Wert des Namensfeldes, auch Eigenschaft

03:55.200 --> 03:58.630
so der Namenseigenschaft genannt, auf den Wert

03:58.630 --> 04:01.180
gesetzt, den Sie bei n erhalten, wenn

04:01.180 --> 04:04.550
ein Abteilungsobjekt erstellt wird.

04:04.550 --> 04:07.030
Wie könnten wir nun ein solches Abteilungsobjekt erstellen?

04:07.030 --> 04:08.890
Nichts leichter als das.

04:08.890 --> 04:13.110
Außerhalb der Klasse, die Sie mit dem neuen Schlüsselwort erstellt

04:13.110 --> 04:16.200
haben, das auch in TypeScript und JavaScript

04:16.200 --> 04:18.410
enthalten ist, wiederholen Sie

04:18.410 --> 04:20.160
den Namen der Klasse, fügen

04:20.160 --> 04:22.440
Klammern hinzu und erstellen ein

04:22.440 --> 04:26.240
neues Abteilungsobjekt, aber der Konstruktor wird zu

04:26.240 --> 04:29.620
diesem Zeitpunkt aufgerufen, wenn Sie die Klasse

04:29.620 --> 04:33.440
mit dem neuen Schlüsselwort ausführen.

04:33.440 --> 04:35.600
Jetzt übergeben Sie Konstruktorargumente

04:35.600 --> 04:39.800
an diesen Abteilungsaufruf hier, also zwischen diesen Klammern.

04:39.800 --> 04:41.640
Hier könnten wir also die Buchhaltung nennen,

04:41.640 --> 04:44.730
weil wir hier vielleicht die Buchhaltungsabteilung aufbauen wollen.

04:44.730 --> 04:46.100
Damit wird nun ein neues JavaScript-Objekt

04:46.100 --> 04:49.800
auf der Grundlage dieses Entwurfs erstellt.

04:49.800 --> 04:53.910
Jetzt können wir dies zum Beispiel in einer Konstante speichern und dann in

04:53.910 --> 04:58.010
die Konsole eingeben. Protokoll. Buchhaltung hier, um zu sehen, was wir bekommen.

04:58.010 --> 04:59.620
Wenn wir das jetzt speichern und

04:59.620 --> 05:02.020
dann zu unserer Seite hier zurückgehen und einen

05:02.020 --> 05:03.780
Blick auf die Entwicklungskonsole

05:03.780 --> 05:05.660
hier in den Def-Tools werfen, sollten

05:05.660 --> 05:07.930
wir unser Abteilungsobjekt hier sehen.

05:07.930 --> 05:10.000
Es handelt sich um ein normales JavaScript-Objekt,

05:10.000 --> 05:13.770
dem lediglich dieser Abteilungs-Typ angehängt ist, und letztendlich

05:13.770 --> 05:15.290
ist es ein Objekt mit einem Schlüssel-Wert-Paar,

05:15.290 --> 05:23.110
wobei der Schlüssel der Name ist, weil wir ihn dort oben definiert haben, und der Wert die Buchhaltung.

05:23.110 --> 05:25.530
Wir haben hier diesen Buchhaltungswert,

05:25.530 --> 05:27.460
weil wir ihn als Argument an den

05:27.460 --> 05:29.560
Konstruktor übergeben.

05:29.560 --> 05:31.770
Dort nehmen wir eine solche Zeichenkette

05:31.770 --> 05:34.830
an, die den Wert in diesem Feld wiederherstellt, und

05:34.830 --> 05:38.400
Felder werden am Ende nur in Eigenschaften übersetzt, die das

05:38.400 --> 05:41.890
Objekt auf der Grundlage der Klasse danach hat.

05:41.890 --> 05:44.480
So können wir also eine einfache Klasse erstellen

05:44.480 --> 05:46.570
und die allgemeine Idee ist.

05:46.570 --> 05:50.143
Schauen wir uns nun an, was wir in JavaScript tatsächlich erhalten.
