WEBVTT

00:02.340 --> 00:05.860
-: Bây giờ, khi làm việc với các kiểu kết hợp, như

00:05.860 --> 00:06.970
thế này và thế này,

00:06.970 --> 00:11.070
có thể rất phức tạp khi luôn lặp lại kiểu kết hợp.

00:11.070 --> 00:13.070
Bạn có thể muốn giao dịch một loại

00:13.070 --> 00:15.330
mới sẽ cài đặt lại loại liên kết này.

00:15.330 --> 00:18.540
Và bạn có thể làm điều đó với một tính năng loại

00:18.540 --> 00:21.410
thú vị khác, tính năng của bí danh loại.

00:21.410 --> 00:22.723
Bạn tạo bí danh như vậy,

00:24.280 --> 00:25.670
thường là trước khi bạn

00:25.670 --> 00:29.240
sử dụng nó, vì vậy ở đây ở đầu tệp trong trường hợp này ở

00:29.240 --> 00:31.240
đây, với từ khóa loại.

00:31.240 --> 00:34.040
Bây giờ, từ khóa loại không được tích hợp vào JavaScript,

00:34.040 --> 00:35.880
tuy nhiên, nó được hỗ trợ trong TypeScript

00:35.880 --> 00:40.450
và sau khi nhập, bạn thêm tên của loại tùy chỉnh hoặc bí danh loại của mình, tôi

00:40.450 --> 00:42.860
nên nói như vậy.

00:42.860 --> 00:44.980
Ví dụ có thể kết hợp.

00:44.980 --> 00:46.720
Nhưng tên thực sự là tùy thuộc vào bạn.

00:46.720 --> 00:48.380
Bạn có thể phát minh ra bất kỳ tên

00:48.380 --> 00:50.520
nào ở đây không được tích hợp trong JavaScript

00:50.520 --> 00:52.530
hoặc TypeScript làm tên khóa.

00:52.530 --> 00:54.360
Vì vậy, một cái gì đó như ngày tháng sẽ không được

00:54.360 --> 00:56.250
phép vì nó được tích hợp trong JavaScript, nhưng

00:56.250 --> 00:58.900
khả năng kết hợp không được tích hợp trong JavaScript, không được tích

00:58.900 --> 01:01.170
hợp trong TypeScript để chúng tôi có thể sử dụng nó.

01:01.170 --> 01:04.550
Và bây giờ với dấu bằng, bạn chỉ định loại bạn muốn

01:04.550 --> 01:08.320
mã hóa trong bí danh của mình, có thể nói như vậy.

01:08.320 --> 01:10.300
Vì vậy, chúng tôi có thể lưu trữ một số ở đây

01:10.300 --> 01:12.790
và bây giờ bất cứ khi nào chúng tôi muốn đảm bảo rằng

01:12.790 --> 01:14.390
một cái gì đó phải là một số, chúng

01:14.390 --> 01:16.400
tôi có thể sử dụng kết hợp để thay thế.

01:16.400 --> 01:18.570
Bây giờ, điều đó không có ý nghĩa gì nhiều,

01:18.570 --> 01:21.630
nó thậm chí còn có thể làm cho mã của chúng ta khó đọc hơn.

01:21.630 --> 01:25.500
Ví dụ, nếu tôi sử dụng có thể kết hợp ở dưới đó, điều này sẽ hoạt động

01:25.500 --> 01:27.420
về mặt kỹ thuật nhưng nếu chúng

01:27.420 --> 01:29.550
ta chỉ lướt qua mã của mình, thì không

01:29.550 --> 01:33.180
rõ ràng là ở đây chúng ta muốn một số hoặc một chuỗi.

01:33.180 --> 01:35.560
Chà, do đó, thông thường bạn sử dụng nó

01:35.560 --> 01:37.500
kết hợp với các loại công đoàn.

01:37.500 --> 01:40.380
Vì vậy, chúng tôi có thể lưu trữ một loại kết hợp trong loại

01:40.380 --> 01:42.250
tùy chỉnh của mình, có thể nói, trong

01:42.250 --> 01:45.240
bí danh loại của chúng tôi và bây giờ chỉ đề cập đến khả năng

01:45.240 --> 01:48.170
kết hợp ở dưới đó thay vì loại kết hợp của chúng tôi.

01:48.170 --> 01:51.060
Vì vậy, chúng tôi có thiết lập chính xác giống như trước đây,

01:51.060 --> 01:54.230
chúng tôi chỉ có bí danh loại có thể tái sử dụng ở đây mà chúng tôi

01:54.230 --> 01:55.580
có thể sử dụng thay thế.

01:55.580 --> 01:57.660
Và điều đó cho phép chúng tôi lưu một số

01:57.660 --> 01:59.200
mã bổ sung và đảm bảo rằng chúng

01:59.200 --> 02:04.200
tôi luôn đề cập đến cùng loại hoặc thiết lập cùng loại khi chúng tôi sử dụng có thể kết hợp.

02:04.234 --> 02:06.600
Và tất nhiên chúng ta không thể chỉ sử dụng nó

02:06.600 --> 02:08.970
cho số và chuỗi, chúng ta có thể sử dụng nó cho

02:08.970 --> 02:11.140
bất kỳ thiết lập kiểu nào mà chúng ta có thể

02:11.140 --> 02:14.810
muốn lưu trữ trong một bí danh, chẳng hạn như hai kiểu chữ này.

02:14.810 --> 02:18.210
Vì vậy, đối với hai loại này ở đây, đối với loại kết hợp

02:18.210 --> 02:20.660
này, chúng tôi cũng có thể trao đổi bí

02:20.660 --> 02:24.030
danh loại, Chuyển đổi Mô tả hoặc bất kỳ cách nào bạn

02:24.030 --> 02:28.920
muốn đặt tên cho nó và lưu trữ chính xác loại này trong bí danh loại này.

02:28.920 --> 02:32.270
Và bây giờ chúng ta có thể sử dụng bí danh loại này ở dưới đó.

02:32.270 --> 02:34.970
Vì vậy, gõ bí danh thực sự, thực sự hữu ích.

02:34.970 --> 02:37.490
Có thể nói, bạn có thể mã hóa các định nghĩa loại phức

02:37.490 --> 02:40.860
tạp hơn thành các loại của riêng mình, thành các tên loại của riêng

02:40.860 --> 02:43.120
bạn và sử dụng lại định nghĩa đó ở mọi nơi trong

02:43.120 --> 02:45.920
mã của bạn, nơi bạn cần thiết lập chính xác loại này.

02:45.920 --> 02:48.060
Vì vậy, bạn tránh lỗi chính tả ở dưới

02:48.060 --> 02:51.000
đó và bạn có thể chỉ cần lưu mã, viết mã nhanh hơn

02:51.000 --> 02:53.490
và luôn rõ ràng hơn về ý định của mình,

02:53.490 --> 02:56.010
chẳng hạn như bằng cách chọn tên bí danh

02:56.010 --> 02:57.653
loại mô tả ở đó.
