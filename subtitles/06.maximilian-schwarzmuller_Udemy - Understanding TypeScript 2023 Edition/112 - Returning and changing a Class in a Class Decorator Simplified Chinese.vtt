WEBVTT

00:02.090 --> 00:04.750
解说员：为了使用装饰器做更高级的事情,

00:04.750 --> 00:07.340
你必须注意到一些装饰器,

00:07.340 --> 00:14.650
例如, 类装饰器和方法装饰器, 实际上也能够返回一些东西｡

00:14.650 --> 00:17.510
现在, 我不会在任何装修店退任何东西｡

00:17.510 --> 00:20.010
我不是在谈论装饰器函数,

00:20.010 --> 00:22.460
它在装饰器工厂中返回｡

00:22.460 --> 00:26.040
我真正的意思是装饰器函数内部的返回值,

00:26.040 --> 00:28.890
我们在任何地方都没有这样的值｡

00:28.890 --> 00:31.559
现在在WithTemplate函数中, 在这个WithTemplate装饰器函数中,

00:31.559 --> 00:36.930
我应该说, 我们可以添加这样一个返回值｡

00:36.930 --> 00:40.430
您可以返回什么以及TypeScript可以使用什么,

00:40.430 --> 00:43.660
取决于您使用的装饰器类型｡

00:43.660 --> 00:44.990
在这里, 我们使用一个装饰器,

00:44.990 --> 00:53.800
它被添加到一个类中, 在这样一个装饰器函数中, 你可以返回一个新的构造函数, 它将替换旧的构造函数｡

00:53.800 --> 00:58.330
所以哪个会替换你添加到装饰器的类｡

00:58.330 --> 01:01.073
所以这里我们可以返回一个新函数,

01:01.073 --> 01:02.490
一个新的构造函数,

01:02.490 --> 01:06.370
或者简单地返回一个新类, 最后, 因为类,

01:06.370 --> 01:22.250
class关键字, 允许我们用这个语法糖来创建这样一个构造函数, 我在这里创建的类不需要有名字, 但是我们可以而且应该扩展我们在这里得到的构造函数｡

01:22.250 --> 01:25.848
所以我现在做的是在我的装饰器函数中,

01:25.848 --> 01:30.910
我返回一个新的类, 记住这只是构造函数的语法糖,

01:30.910 --> 01:32.770
所以我返回一个构造函数,

01:32.770 --> 01:35.400
最后, 它基于原始的构造函数,

01:35.400 --> 01:50.520
所以我保留了原始类的所有属性, 原始构造函数的所有属性, 我们不一定要这么做, 但我不想失去我在这里的财产所以我会这么做｡

01:50.520 --> 01:53.670
在这里, 我们可以添加新功能｡ 

01:53.670 --> 01:56.716
例如, 我必须在这里改变一些名字, 我可以在那里添加一个新的构造函数,

01:56.716 --> 02:04.040
为了避免混淆, 我将重命名我在这里得到的构造函数｡

02:04.040 --> 02:09.620
我在其中添加了装饰器的类, 我在这里命名为originalConstructor,

02:12.889 --> 02:15.690
然后复制到这里.

02:15.690 --> 02:20.853
现在, 我需要调用super来调用它内部的构造函数,

02:20.853 --> 02:27.410
而不是这个构造函数, 因为如果你在一个类中添加一个构造函数来扩展另一个类,

02:27.410 --> 02:33.630
这就是我们现在要做的, 然后你需要调用super.

02:33.630 --> 02:36.108
现在你可以在这里写任何你想写的逻辑｡ 

02:36.108 --> 02:45.620
例如, 在这里, 我们可以把这个模板渲染逻辑从装饰器函数中移到这个新的构造函数中,

02:45.620 --> 02:49.020
我们在这里返回｡

02:49.020 --> 02:50.960
再次提醒大家, 我们在这里创建了一个类,

02:50.960 --> 02:55.833
它最终会创建一个包含这个逻辑的构造函数.

02:56.670 --> 02:58.850
所以现在我想做的是,

02:58.850 --> 03:01.367
我试着替换这个类｡

03:01.367 --> 03:04.298
我们用一个新的类和一个新的构造函数添加了装饰器,

03:04.298 --> 03:14.670
在这里我仍然执行旧的逻辑, 但是我也添加了我自己的新逻辑, 因此, 如果我真的在这里实例化我的对象,

03:14.670 --> 03:21.340
那么模板实际上应该只呈现到DOM中｡

03:21.340 --> 03:22.890
并不是所有的时候,

03:22.890 --> 03:25.180
当这个装饰器函数被执行时,

03:25.180 --> 03:26.340
正如你所学到的,

03:26.340 --> 03:29.620
只要我们定义了类, 就会发生｡

03:29.620 --> 03:31.010
这里做个小调整, 我不再调用我的原始构造函数了,

03:31.010 --> 03:37.380
我们可以直接访问它｡

03:37.380 --> 03:37.380
name以获取正在创建的实例的name属性值｡

03:42.750 --> 03:47.750
现在我们收到了一个关于类型不正确的小投诉｡

03:47.750 --> 03:51.330
为了解决这个问题, 我们可以把装饰器函数变成一个泛型函数,

03:51.330 --> 03:57.113
我们在其中得到一个类型, 并将其设置为原始构造函数的类型, 现在要清楚的是,

03:58.090 --> 04:17.760
这实际上是一个构造函数, 我们可以通过分配一个特殊的类型, 一个对象类型, 在其中设置一个新的属性, 这当然是一个保留名称, 但它告诉TypeScript最终这将是一个可以更新的对象｡

04:17.760 --> 04:24.380
这是一个构造函数, 我们可以用new关键字调用这个函数来生成一个新的对象.

04:24.380 --> 04:27.410
这个新函数, 这个新方法, 对象T所基于的,

04:27.410 --> 04:35.380
将获得任意数量的参数, 所以我在这里使用了rest参数来接受任意数量的参数,

04:35.380 --> 04:44.000
这样它们就可以非常灵活地将参数传递给我们要修改的类的构造函数｡

04:45.420 --> 04:49.063
添加新函数后将在此处结束返回一个对象｡

04:50.140 --> 04:53.500
现在我还应该把rest参数的定义复制到我的构造函数中,

04:53.500 --> 04:57.640
这样这个构造函数就可以接受我们可能得到的所有参数,

04:57.640 --> 05:04.380
这样我们就可以用你想传入的任何参数来实例化Person｡

05:04.380 --> 05:09.279
在原始的构造函数中, 我们可能需要的任何参数｡

05:09.279 --> 05:14.021
这样我们面临的唯一问题是我们不知道这样一个name属性是否存在,

05:14.021 --> 05:19.639
正确的说, 我们不知道我们要把这个WithTemplate装饰器添加到哪个类,

05:19.639 --> 05:23.951
所以我们不知道在我们添加它的类上是否会有一个name属性｡

05:23.951 --> 05:30.200
但是, 我们可以通过简单地告诉TypeScript对象T是基于的来解决这个问题,

05:30.200 --> 05:32.773
所以我们最初的构造函数, 将不仅仅产生任何对象,

05:32.773 --> 05:37.460
而是实际上产生一个带有name属性的对象, 该属性将是字符串类型,

05:37.460 --> 05:41.140
这是正确的｡

05:41.140 --> 05:46.250
我们的WithTemplate装饰器被添加到一个类中, 该类将具有name属性｡

05:46.250 --> 05:47.300
如果我把这个注释掉,

05:47.300 --> 05:48.133
我们会得到一个错误,

05:48.133 --> 05:50.740
因为现在我们试图把这个装饰器添加到一个类中,

05:50.740 --> 05:55.543
这个类不满足这个条件, 但是在这里, 这个类满足了这个条件｡

05:55.543 --> 05:58.790
现在, 当我试图编译这个的时候, 我在这里得到了一个错误,

05:58.790 --> 06:00.630
因为我在这里没有使用参数, 我们可以把它改成一个_,

06:00.630 --> 06:06.230
告诉typescript我们知道我们没有使用它, 我们想忽略它｡

06:06.230 --> 06:08.050
这是一个有效的参数名, 它只是一个特殊的名字,

06:08.050 --> 06:10.678
typescript会把它当作一个我知道了,

06:10.678 --> 06:15.260
我需要接受它, 但我不会使用它参数｡

06:15.260 --> 06:18.273
这样, 它就编译好了, 如果我们重新加载, 你看,

06:19.440 --> 06:22.420
我们仍然可以在页面上看到Max｡

06:22.420 --> 06:25.480
有趣的是, 如果我们现在删除实例化Person的代码,

06:25.480 --> 06:28.440
如果我注释掉它, 这样我就找到了一个Person类,

06:28.440 --> 06:30.740
但我从来没有在任何地方实例化它,

06:30.740 --> 06:36.890
你会看到, 当它重新加载时, 我们在屏幕上看不到Max｡

06:36.890 --> 06:42.410
所有的装饰器仍然执行, 但是我们不再向屏幕呈现任何内容｡

06:42.410 --> 06:43.243
原因是,

06:43.243 --> 06:46.340
我们现在进一步增强了装饰器,

06:46.340 --> 06:49.520
利用它的特性, 我们可以返回一个新的值,

06:49.520 --> 06:55.350
在这里是一个新的构造函数.

06:55.350 --> 06:57.205
以类装饰器为例｡ 

06:57.205 --> 07:00.780
这是一个新的构造函数, 或者说一个新的类,

07:00.780 --> 07:04.300
正如我解释的, 它只是构造函数的语法糖,

07:04.300 --> 07:12.160
因此这个构造函数, 取代了我们原来的类, 原来的构造函数.

07:12.160 --> 07:15.220
现在 , 由于 我 在 这里 调用 了 super

07:15.220 --> 07:17.610
, 我们 保存 了 原始 函数 ｡

07:17.610 --> 07:22.540
我们保存了原来的类, 我们在这里初始化的所有东西基本上还是会发生的,

07:22.540 --> 07:27.480
因为我在替换构造函数中也是这样做的, 我扩展了原来的类.

07:27.480 --> 07:30.420
所以我们保存了原来类中的所有内容｡ 

07:30.420 --> 07:31.550
您不必这样做,

07:31.550 --> 07:32.670
但我在这里这样做,

07:32.670 --> 07:35.560
因为我不想丢失原始数据｡

07:35.560 --> 07:36.850
但是, 在幕后,

07:36.850 --> 07:39.770
我用我的新自定义类替换了这个类,

07:39.770 --> 07:45.600
这允许我们添加额外的逻辑, 当类被实例化时应该运行这些逻辑｡

07:45.600 --> 07:49.090
现在, 我们突然之间能够添加逻辑, 这些逻辑在类被定义时不运行,

07:49.090 --> 07:54.660
而是在类被实例化时运行｡

07:54.660 --> 07:57.150
因此, 这应该是一个伟大的第一个例子,

07:57.150 --> 08:04.480
你可以释放与装饰器的全部权力, 如果你真的知道你可以用他们做什么｡

08:04.480 --> 08:06.800
你不能只把它们定义为函数,

08:06.800 --> 08:09.970
也不能只把它们定义为因子函数.

08:09.970 --> 08:12.600
在一些装饰器中, 比如类装饰器,

08:12.600 --> 08:19.470
你也可以返回一些东西来替换你添加装饰器到的东西, 在我们的例子中是类, 用一个新的类来实现旧的类,

08:19.470 --> 08:25.711
但是也可以添加它的新的自定义逻辑｡

08:25.711 --> 08:28.004
这样, 如果我们把这个注释回来,

08:28.004 --> 08:31.570
我们会用我们自己的类把Max呈现到屏幕上,

08:31.570 --> 08:35.793
这个类会替换, 或者扩展并替换旧的类.
