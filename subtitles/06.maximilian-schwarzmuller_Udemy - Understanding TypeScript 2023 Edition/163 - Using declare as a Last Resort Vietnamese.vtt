WEBVTT

00:02.450 --> 00:04.900
Người hướng dẫn: Bây giờ bạn sẽ làm gì nếu bạn

00:04.900 --> 00:07.090
có một thư viện nơi bạn không thể cài đặt

00:07.090 --> 00:10.470
các kiểu như chúng tôi đã làm với Lodash chẳng hạn?

00:10.470 --> 00:14.440
Đối với Lodash, may mắn thay, chúng tôi có gói loại như vậy và như tôi

00:14.440 --> 00:15.880
đã đề cập, đối với hầu hết

00:15.880 --> 00:18.870
các thư viện của bên thứ ba, bạn có gói đó, nhưng không

00:18.870 --> 00:21.210
nhất thiết phải dành cho tất cả.

00:21.210 --> 00:25.320
Hoặc, nếu bạn có một số mã JavaScript khác, giả sử trong

00:25.320 --> 00:27.320
tệp index. html, bạn có

00:27.320 --> 00:29.800
một số mã tập lệnh khác, mã này

00:29.800 --> 00:34.800
thực thi nhìn chằm chằm, nơi bạn đặt một số biến toàn cầu.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Một cái gì đó như thế

00:38.450 --> 00:40.770
này mà cuối cùng bạn biết điều

00:40.770 --> 00:43.180
này sẽ có sẵn trên toàn cầu.

00:43.180 --> 00:46.240
Như bạn đã biết, các biến được thêm như thế này sẽ

00:46.240 --> 00:48.600
được thêm vào đối tượng cửa sổ chung và

00:48.600 --> 00:50.210
bạn muốn sử dụng chúng từ bên

00:50.210 --> 00:52.670
trong mã TypeScript của mình.

00:52.670 --> 00:53.503
Ví dụ, ở đây

00:53.503 --> 00:57.770
nếu tôi muốn console. log(GLOBAL) như thế này, tôi gặp

00:57.770 --> 00:59.990
lỗi ở đây trong IDE của mình.

00:59.990 --> 01:04.299
Và nếu tôi chạy tsc -w để bắt đầu biên dịch, tôi

01:04.299 --> 01:06.340
cũng gặp lỗi ở đây.

01:06.340 --> 01:09.470
Vì vậy, nó không thích thứ toàn cầu đó, mặc

01:09.470 --> 01:11.530
dù chúng tôi biết rằng nó sẽ

01:11.530 --> 01:15.630
hoạt động vì tệp index. html xác định biến toàn cầu này.

01:15.630 --> 01:18.010
Và, vì chúng tôi đã trì hoãn tập lệnh

01:18.010 --> 01:19.493
này, tập lệnh này sẽ được

01:19.493 --> 01:22.170
thực thi sau tập lệnh này ở dưới đó.

01:22.170 --> 01:23.780
Trong những trường hợp như

01:23.780 --> 01:26.460
vậy, bạn có sẵn một cú pháp khác trong TypeScript

01:26.460 --> 01:29.460
và đó là lệnh khai báo mà bạn có thể sử dụng.

01:29.460 --> 01:32.110
Bạn có thể khai báo một số biến nhất định,

01:32.110 --> 01:34.150
chẳng hạn như TypeScript.

01:34.150 --> 01:36.730
Bạn có thể nói khai báo var GLOBAL và nói

01:36.730 --> 01:38.640
với TypeScript rằng, chẳng

01:38.640 --> 01:42.050
hạn, đây sẽ là một chuỗi hoặc đây là bất kỳ thứ gì.

01:42.050 --> 01:43.687
Điều này về cơ bản nói với TypeScript,

01:43.687 --> 01:45.910
"Đừng lo lắng, nó sẽ tồn tại," và nếu chúng

01:45.910 --> 01:47.823
tôi lưu cái này, và tôi thoát khỏi

01:49.090 --> 01:52.580
trình biên dịch này và sử dụng gói web thay thế, chúng tôi sẽ thấy

01:52.580 --> 01:55.740
kết quả này trên trang của chúng tôi, bởi vì nó hoạt động

01:55.740 --> 01:57.650
về mặt kỹ thuật và với khai báo var,

01:57.650 --> 01:59.060
chúng tôi cũng cho TypeScript

01:59.060 --> 02:02.270
biết rằng điều này tồn tại.

02:02.270 --> 02:04.420
Bây giờ tôi sẽ xóa dmidecode này ở đây,

02:04.420 --> 02:06.770
nhưng nhận thức được từ khóa này, về tuyên

02:06.770 --> 02:08.830
bố, về lệnh này là rất quan trọng.

02:08.830 --> 02:12.160
Nó cho phép bạn khai báo các tính năng hoặc biến của TypeScript

02:12.160 --> 02:14.590
mà bạn biết rằng chúng tồn tại hoặc cho TypeScript

02:14.590 --> 02:17.210
biết về các gói, biến toàn cục nói chung, điều mà

02:17.210 --> 02:18.670
TypeScript không thể biết,

02:18.670 --> 02:20.150
nhưng trong khi bạn với tư cách

02:20.150 --> 02:22.080
là nhà phát triển thì biết rằng chúng

02:22.080 --> 02:23.373
sẽ ở đó.
