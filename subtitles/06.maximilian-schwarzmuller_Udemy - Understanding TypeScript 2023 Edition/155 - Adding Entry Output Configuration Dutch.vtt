WEBVTT

00:01.538 --> 00:03.725
Verteller: Laten we om te beginnen

00:03.725 --> 00:07.086
naar tsconfig gaan. json bestand omdat we daar moeten

00:07.086 --> 00:09.965
zorgen dat bepaalde dingen geconfigureerd zijn.

00:09.965 --> 00:12.780
Zorg ervoor dat dat doel hier op

00:12.780 --> 00:16.286
es5 of es6 staat, dat bepaal je zelf.

00:16.286 --> 00:19.423
Het hangt ervan af welke browsers u wilt ondersteunen.

00:19.423 --> 00:22.190
Want uiteindelijk zullen webpack en de types die

00:22.190 --> 00:24.050
loader gebruiken om te bepalen hoe

00:24.050 --> 00:26.543
uw code moet worden getransformeerd.

00:26.543 --> 00:28.960
Moet uw type code worden omgezet in Java

00:28.960 --> 00:32.480
script code die ook in oudere browsers draait?

00:32.480 --> 00:36.210
Of zoals bij es6 naar code die alleen in recentere

00:36.210 --> 00:37.811
browsers draait?

00:37.811 --> 00:42.640
Module moet dan worden ingesteld op es2015 of es6 dus die instelling

00:42.640 --> 00:44.110
is prima.

00:44.110 --> 00:49.110
En daarnaast wil je ook je outDir verifiëren.

00:50.560 --> 00:53.520
Ik hou het op dist, maar je zou dit kunnen veranderen als je je

00:53.520 --> 00:55.997
code in een andere directory wilt compileren.

00:55.997 --> 00:59.378
Je hebt echter geen root directory meer nodig, omdat

00:59.378 --> 01:02.260
webpack het daar overneemt, en webpack zal

01:02.260 --> 01:05.014
bepalen waar je root bestanden staan.

01:05.014 --> 01:07.660
Dus in het algemeen zouden deze instellingen goed moeten zijn.

01:07.660 --> 01:09.525
We kunnen ze later altijd nog aanpassen

01:09.525 --> 01:12.487
als iets niet werkt zoals we willen.

01:12.487 --> 01:15.220
Laten we daarmee een nieuw configuratiebestand toevoegen

01:15.220 --> 01:19.848
naast tsconfig. json en dat is de webpack. config. js bestand.

01:19.848 --> 01:22.368
En zorg ervoor dat je het echt zo noemt, want

01:22.368 --> 01:24.150
dit is het bestand waar webpack

01:24.150 --> 01:27.579
automatisch naar zal zoeken en dit zal webpack zelfs vertellen

01:27.579 --> 01:30.220
hoe het met ons project moet werken.

01:30.220 --> 01:32.840
Omdat webpack een tool is die geconfigureerd moet worden

01:32.840 --> 01:34.568
om hier correct te werken.

01:34.568 --> 01:37.568
Dus wat doen we in deze webpack. config bestand?

01:37.568 --> 01:40.338
Dit configuratiebestand gebruikt JavaScript en eigenlijk

01:40.338 --> 01:43.288
gebruikt het node. js functies.

01:43.288 --> 01:46.747
Dus we willen het knooppunt gebruiken. js export syntax, die er als volgt

01:46.747 --> 01:50.379
uitziet om dan een JavaScript-object te exporteren.

01:50.379 --> 01:53.538
Dat zal het configuratie-object zijn dat door webpack wordt opgepikt.

01:53.538 --> 01:55.585
Dus voor het geval je dat nog nooit gezien hebt, dit

01:55.585 --> 01:59.648
is hoe je dingen exporteert in een knooppunt. js omgeving.

01:59.648 --> 02:02.877
En hier exporteren we een JavaScript object.

02:02.877 --> 02:05.920
Nu heeft webpack een paar stukjes informatie nodig.

02:05.920 --> 02:09.840
Het belangrijkste is te weten met welk bestand

02:09.840 --> 02:14.585
je hele project begint; dus waar je ingangspunt is.

02:14.585 --> 02:17.370
In ons geval is dat de app. ts bestand.

02:17.370 --> 02:18.922
Dit bestand moet eerst worden

02:18.922 --> 02:20.981
uitgevoerd, en wat webpack dan zal doen

02:20.981 --> 02:24.013
is kijken naar de imports in dit bestand en naar deze bestanden

02:24.013 --> 02:25.461
gaan en kijken naar hun imports

02:25.461 --> 02:27.378
en de imports van de geïmporteerde

02:27.378 --> 02:30.219
bestanden enzovoort.

02:30.219 --> 02:33.461
Totdat het alle bestanden kent die je project uiteindelijk gebruikt.

02:33.461 --> 02:36.201
En dan gaat het door de inhoud van de bestanden

02:36.201 --> 02:38.740
zoals deze inhoud hier en alle inhoud

02:38.740 --> 02:41.690
in alle bestanden en compileert ze, met behulp

02:41.690 --> 02:44.290
van de ts. loader pakket dat ik noemde.

02:44.290 --> 02:46.960
Om webpack hier correct te laten werken moet

02:46.960 --> 02:50.421
je nu eigenlijk alle . js extensies in alle

02:50.421 --> 02:51.598
importen.

02:51.598 --> 02:54.400
Dat hadden we eerder nodig, toen we de ingebouwde

02:54.400 --> 02:57.885
browser van ts gebruikten. Module functionaliteit, maar

02:57.885 --> 03:01.130
met webpack heb je deze extensies niet nodig.

03:01.130 --> 03:03.664
Omdat webpack eigenlijk automatisch zal zoeken naar. js, en bepaalde andere extensiebestanden.

03:03.664 --> 03:06.501
Die voeg je hier dus niet toe en dat moet ook niet, anders

03:06.501 --> 03:09.270
zoekt webpack naar bestanden met een dubbele extensie,

03:09.270 --> 03:10.716
en dat wil je niet.

03:10.716 --> 03:13.655
Dus verwijder. js op al deze importen hier, en als je dat gedaan hebt

03:13.655 --> 03:18.441
sla je al deze bestanden op om er zeker van

03:18.441 --> 03:21.370
te zijn dat je wijzigingen zijn toegepast.

03:21.370 --> 03:24.043
Nu terug naar webpack. config. js, daar moet je nu een entry

03:24.043 --> 03:26.498
property

03:26.498 --> 03:31.320
toevoegen in dit geëxporteerde object.

03:31.320 --> 03:32.740
En wijs naar. /src/app. in ons voorbeeld.

03:32.740 --> 03:37.740
Dus in het hoofdbestand van je project.

03:38.680 --> 03:42.444
Voeg vervolgens hier een uitgangssleutel toe.

03:42.444 --> 03:45.880
Een uitgang is nu een object hier.

03:45.880 --> 03:48.051
Waar we allereerst de bestandsnaam opgeven.

03:48.051 --> 03:51.120
Dit is het enige JavaScript-bestand dat uiteindelijk

03:51.120 --> 03:52.998
wordt geproduceerd.

03:52.998 --> 03:55.440
En hier noemen we het bundel. js, maar je kunt het noemen zoals

03:55.440 --> 03:57.350
je wilt.

03:57.350 --> 03:58.788
App. js, of wat je maar wilt.

03:58.788 --> 04:01.709
U kunt hier ook dynamische

04:01.709 --> 04:05.171
onderdelen toevoegen, bijvoorbeeld content hash, om webpack

04:05.171 --> 04:08.971
te vertellen automatisch een unieke has aan te maken voor elke build,

04:08.971 --> 04:11.829
wat u kan helpen met caching in de browser.

04:11.829 --> 04:13.578
Maar ook daarover kun je meer leren in de webpack docs.

04:13.578 --> 04:16.229
Hier hebben we het niet nodig, dus noemen we het bestand gewoon bundel. js.

04:16.229 --> 04:19.779
Behalve de bestandsnaam moet u ook

04:19.779 --> 04:23.320
het pad opgeven waarnaar de uitvoer moet worden geschreven.

04:23.320 --> 04:26.131
En natuurlijk moet dat overeenkomen

04:26.131 --> 04:28.900
met het pad dat je in je ts hebt. config. js bestand om fouten te voorkomen.

04:28.900 --> 04:32.970
Dus naar deze map.

04:32.970 --> 04:34.189
Nu in tegenstelling tot de ts. config,js bestand, moet

04:34.189 --> 04:37.010
je niet schrijven . /dist hier.

04:37.010 --> 04:39.819
Webpack wil hier een absoluut pad.

04:39.819 --> 04:42.099
En om er een te bouwen kunnen we een knooppunt gebruiken. js module.

04:42.099 --> 04:45.669
Daarvoor kunnen we het knooppunt gebruiken. js import syntaxis, die het

04:45.669 --> 04:48.880
required keyword gebruikt,

04:48.880 --> 04:51.280
en importeer de path module.

04:51.280 --> 04:54.220
U hoeft dit niet te installeren als een bibliotheek,

04:54.220 --> 04:56.050
dit is een kernknooppunt. js module die je al hebt

04:56.050 --> 04:59.651
als je node hebt. js geïnstalleerd, wat je doet omdat we dat eerder

04:59.651 --> 05:02.149
in de cursus hebben gedaan.

05:02.149 --> 05:04.966
Nu kun je pad gebruiken om daar de methode

05:04.966 --> 05:08.552
resolve aan te roepen, waarmee je een absoluut pad

05:08.552 --> 05:11.280
naar een bepaalde map kunt maken.

05:11.280 --> 05:12.910
Daarvoor gebruiken we een speciale

05:12.910 --> 05:15.320
constante, de constante __dirname, die globaal

05:15.320 --> 05:17.236
beschikbaar is in een knooppunt. js omgeving.

05:17.236 --> 05:21.150
En webpack gebruikt, zoals ik al zei, node. js om uw bestanden uit te voeren.

05:21.150 --> 05:24.692
En dan als tweede argument dist,

05:24.692 --> 05:27.433
uiteindelijk construeert dist gewoon een absoluut

05:27.433 --> 05:30.661
pad naar de dist map die webpack dan gebruikt om uw out-put

05:30.661 --> 05:33.190
daarheen te schrijven.

05:33.190 --> 05:35.452
En daarmee heb je een entry point en een

05:35.452 --> 05:38.753
out-put point, maar je vertelt webpack niet wat te doen

05:38.753 --> 05:40.743
met je TypeScript bestanden.

05:40.743 --> 05:42.553
Want standaard weet webpack dat

05:42.553 --> 05:45.140
niet, standaard is het gewoon een bundelaar.

05:45.140 --> 05:46.884
Elke extra functionaliteit, zoals

05:46.884 --> 05:48.684
het compileren van TypeScript naar

05:48.684 --> 05:51.261
JavaScript moet aan webpack geleerd worden.

05:51.261 --> 05:53.452
Dat doen we in de volgende lezing.
