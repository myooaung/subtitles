WEBVTT

00:02.510 --> 00:04.490
Instrutor: Com nossa classe básica, se agora formos para

00:04.490 --> 00:07.570
a pasta dist e inspecionarmos o aplicativo. js, vemos o que é gerado

00:07.570 --> 00:10.110
em JavaScript, e aí você vê que temos

00:10.110 --> 00:13.560
essencialmente o mesmo código.

00:13.560 --> 00:17.870
Duas diferenças importantes são, que o campo do nome

00:17.870 --> 00:20.870
que temos aqui não existe como este aqui

00:20.870 --> 00:22.230
na classe.

00:22.230 --> 00:25.460
Na verdade, isto seria suportado em JavaScript moderno, mas

00:25.460 --> 00:27.910
depende da versão do JavaScript que você está

00:27.910 --> 00:29.130
construindo para.

00:29.130 --> 00:33.450
Portanto, só no ES6, não é suportado de fato.

00:33.450 --> 00:35.430
E, claro, o que é impressionante

00:35.430 --> 00:37.360
é ver o tipo de atribuição.

00:37.360 --> 00:39.760
Mas temos nossa lógica construtiva,

00:39.760 --> 00:43.870
e na verdade é assim que você adiciona propriedades aos objetos

00:43.870 --> 00:48.150
a serem criados em Vanilla JavaScript quando não usa a última

00:48.150 --> 00:51.570
versão do JavaScript onde esta sintaxe de campo

00:51.570 --> 00:54.470
também seria suportada.

00:54.470 --> 00:56.480
Então é isto que eu tenho em JavaScript.

00:56.480 --> 00:58.710
Agora, porém, fica interessante

00:58.710 --> 01:02.080
se formos ao tsconfig. json e trocamos o alvo

01:02.080 --> 01:05.970
de ES5 para ES6 e comentamos aqui a liberdade.

01:05.970 --> 01:08.190
Para que as bibliotecas corretas e recomendadas

01:08.190 --> 01:10.870
sejam adicionadas automaticamente pelo TypeScript.

01:10.870 --> 01:14.090
Se você agora salvar este arquivo de configuração, e voltar para a aplicação. js você vê algo totalmente

01:14.090 --> 01:16.350
diferente.

01:16.350 --> 01:18.810
E isso é muito interessante o que vemos aqui.

01:18.810 --> 01:20.960
O que temos aqui?

01:20.960 --> 01:23.290
Bem, o que no final temos aqui

01:23.290 --> 01:26.453
é a chamada função de construtor.

01:27.299 --> 01:31.600
A função construtora é algo que está embutido

01:31.600 --> 01:33.770
no JavaScript, que basicamente

01:33.770 --> 01:35.520
está lá desde sempre,

01:35.520 --> 01:40.230
e esta é a maneira do Vanilla JavaScript não-moderno

01:40.230 --> 01:44.480
de criar plantas de objetos.

01:44.480 --> 01:47.100
É uma função que é chamada com a ajuda da nova

01:47.100 --> 01:50.890
palavra-chave e, de repente, magicamente, esta função, embora

01:50.890 --> 01:53.640
não tenha declaração de retorno dentro dela,

01:53.640 --> 01:55.850
retorna algo como você vê quando a chamamos

01:55.850 --> 01:57.540
aqui.

01:57.540 --> 01:59.730
Ele devolve um objeto.

01:59.730 --> 02:03.110
Um novo objeto que terá um nome de propriedade.

02:03.110 --> 02:04.940
Portanto, este conceito não é novo,

02:04.940 --> 02:08.680
não é introduzido pelo moderno JavaScript ou pelo TypeScript.

02:08.680 --> 02:12.500
A idéia de ter plantas para objetos já existe

02:12.500 --> 02:15.180
há muito tempo em JavaScript.

02:15.180 --> 02:19.070
No passado, no entanto, tivemos que usar funções de construção e, como isto poderia

02:19.070 --> 02:21.870
ser um pouco pouco pouco pouco intuitivo, especialmente para

02:21.870 --> 02:24.520
desenvolvedores que poderiam ter trabalhado com diferentes

02:24.520 --> 02:26.600
linguagens de programação.

02:26.600 --> 02:30.510
O JavaScript moderno introduziu a idéia de classes desta

02:30.510 --> 02:34.950
sintaxe mais limpa, e o TypeScript também suporta isto.

02:34.950 --> 02:38.180
E devido à poderosa compilação do TypeScript, você pode

02:38.180 --> 02:40.830
escolher onde quiser compilá-lo, em um estilo

02:40.830 --> 02:44.130
mais antigo que, naturalmente, funciona em mais navegadores

02:44.130 --> 02:48.280
ou neste estilo ES6 mais moderno que vimos antes.

02:48.280 --> 02:51.700
O que se parece muito com isto aqui.

02:51.700 --> 02:54.500
A chave é que temos este recurso incorporado

02:54.500 --> 02:57.300
ao JavaScript e suportado pelo TypeScript que

02:57.300 --> 03:00.163
podemos definir as plantas dos objetos.
