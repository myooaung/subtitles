WEBVTT

00:02.170 --> 00:06.250
-: Agora além dos objetos, temos também matrizes em JavaScript, tipo

00:06.250 --> 00:08.300
de dados muito importantes.

00:08.300 --> 00:10.810
As arrays são criadas assim em JavaScript, como você sabe,

00:10.810 --> 00:12.560
e você pode armazenar qualquer dado:

00:12.560 --> 00:15.970
números, cordas, booleans, objetos, outras arrays, você pode ter arrays

00:15.970 --> 00:17.970
aninhados, afinal de contas, e você também

00:17.970 --> 00:19.380
pode misturar dados.

00:19.380 --> 00:23.200
Você pode ter uma matriz com cordas e números misturados.

00:23.200 --> 00:25.570
E o TypeScript também suporta matrizes.

00:25.570 --> 00:29.260
Qualquer matriz JavaScript é suportada e os tipos dessa

00:29.260 --> 00:32.140
matriz podem ser flexíveis, ou rígidos.

00:32.140 --> 00:35.200
Agora vamos dar uma olhada nisso em TypeScript.

00:35.200 --> 00:38.760
Para isso, aqui no aplicativo. ts, digamos que nossa pessoa também

00:38.760 --> 00:42.810
tem uma chave de hobbies, mas é claro que também poderíamos ter uma variável

00:42.810 --> 00:45.660
ou um hobby constante fora do objeto.

00:45.660 --> 00:49.050
Assim, utilizando matrizes como exatamente o mesmo

00:49.050 --> 00:50.853
dentro e fora dos objetos.

00:51.950 --> 00:54.780
Portanto, aqui temos hobbies, e os hobbies poderiam

00:54.780 --> 00:58.140
ser esportes, e cozinhar, digamos assim.

00:58.140 --> 01:01.150
Portanto, tenho dois elementos ali, e estes elementos,

01:01.150 --> 01:03.620
como você pode dizer, são cordas.

01:03.620 --> 01:07.570
Agora, se pairarmos sobre os hobbies, o TypeScript detectou corretamente

01:07.570 --> 01:10.630
a distância da matriz de caracteres do tipo.

01:10.630 --> 01:12.500
Essa é uma sintaxe que você nunca viu

01:12.500 --> 01:16.140
antes, mas é assim que o TypeScript descreve um conjunto de dados.

01:16.140 --> 01:18.510
Você tem os colchetes, e em frente a isso,

01:18.510 --> 01:21.340
o tipo de dados que são armazenados ali.

01:21.340 --> 01:23.530
Agora este é o tipo, o grupo do tipo inferido.

01:23.530 --> 01:25.810
Viu que aqui temos uma matriz e que só temos

01:25.810 --> 01:29.110
cordas ali, então inferiu que os hobbies provavelmente

01:29.110 --> 01:31.940
deveriam ser uma matriz de cordas.

01:31.940 --> 01:34.903
E de fato, para os hobbies, isso faz muito sentido.

01:36.210 --> 01:41.040
Naturalmente, você também pode definir explicitamente o tipo de variável.

01:41.040 --> 01:44.720
Se acrescentarmos uma nova variável, atividades favoritas,

01:45.580 --> 01:48.670
e que inicialmente deveria estar vazia, então talvez

01:48.670 --> 01:51.160
queiramos definir explicitamente o tipo

01:51.160 --> 01:53.140
de dados armazenados ali.

01:53.140 --> 01:55.590
Agora vamos dizer que isso deveria ser um conjunto

01:55.590 --> 01:57.570
de cordas, bem, então podemos apenas repetir

01:57.570 --> 02:00.330
o que acabamos de ver; digite uma corda, e depois colchetes,

02:00.330 --> 02:03.330
e isto diz ao TypeScript que o que armazenamos aqui não é apenas

02:03.330 --> 02:05.990
uma única corda, é um conjunto de cordas.

02:05.990 --> 02:09.550
E de fato, se eu tentar armazenar apenas esportes lá dentro,

02:09.550 --> 02:12.183
eu recebo um erro. Eu recebo um erro porque

02:12.183 --> 02:15.650
isso aqui é uma única corda, e não uma série de cordas.

02:15.650 --> 02:19.370
Eu não recebo um erro, é claro, se eu embrulhar isto em colchetes

02:19.370 --> 02:22.610
e, portanto, criar efetivamente uma matriz.

02:22.610 --> 02:25.870
Mas novamente recebo um erro, se eu acrescentar um número, digamos,

02:25.870 --> 02:29.220
porque definimos isto como sendo um conjunto de cordas.

02:29.220 --> 02:31.290
Agora aqui, temos um conjunto misto.

02:31.290 --> 02:34.920
É um conjunto de cordas e números, portanto isso não funciona

02:34.920 --> 02:37.180
e não é suportado aqui.

02:37.180 --> 02:40.100
Se quiséssemos apoiar um conjunto tão misto,

02:40.100 --> 02:43.120
uma solução seria usar "qualquer" aqui.

02:43.120 --> 02:45.880
O tipo "qualquer" é um tipo especial em TypeScript,

02:45.880 --> 02:47.610
que veremos mais adiante, o que

02:47.610 --> 02:50.530
basicamente significa, fazer o que você quiser.

02:50.530 --> 02:53.020
É claro que é um tipo que você não quer usar com muita freqüência

02:53.020 --> 02:55.630
porque você vai perder os benefícios que o TypeScript lhe dá,

02:55.630 --> 02:58.170
suas costas no mundo JavaScript, onde você também pode usar

02:58.170 --> 03:00.140
qualquer valor em qualquer lugar.

03:00.140 --> 03:02.940
Portanto, "qualquer" é realmente flexível, mas a

03:02.940 --> 03:06.270
flexibilidade vem ao preço de basicamente abrir mão de todos

03:06.270 --> 03:08.710
os benefícios que o TypeScript oferece.

03:08.710 --> 03:10.840
Portanto, aqui vou voltar ao string, porque realmente

03:10.840 --> 03:12.530
não quero ter um número lá dentro, e por

03:12.530 --> 03:14.933
isso podemos remover o número e estamos bem.

03:15.900 --> 03:18.830
Arrays também nos dão um grande exemplo,

03:18.830 --> 03:21.890
na verdade como objetos e suas propriedades,

03:21.890 --> 03:25.730
como é dinâmica a inferência do tipo TypeScript.

03:25.730 --> 03:28.750
Se acrescentarmos um loop "para" aqui no fundo, e quisermos

03:28.750 --> 03:31.570
ir para todos os passatempos da pessoa, é claro que podemos

03:31.570 --> 03:33.220
usar um loop tradicional "para"

03:33.220 --> 03:38.220
com para constante hobby da pessoa. hobbies, assim acessando a propriedade

03:38.620 --> 03:41.130
dos hobbies e passando por todos os hobbies

03:41.130 --> 03:42.793
ali, armazenando cada hobby

03:43.690 --> 03:46.780
para cada iteração nesta constante, e então podemos

03:46.780 --> 03:50.090
consultar o hobby de log aqui.

03:50.090 --> 03:52.000
Isso não é muito chique, isso é algo que

03:52.000 --> 03:53.710
sabemos pelo JavaScript, certo.

03:53.710 --> 03:58.280
Se eu agora compilar este aplicativo. ts arquivar lá embaixo, obtemos

03:58.280 --> 04:01.700
o nome desta linha, e depois os dois passatempos

04:01.700 --> 04:04.750
sendo impressos.

04:04.750 --> 04:07.800
Mas o que é realmente interessante aqui é que no hobby, podemos

04:07.800 --> 04:11.040
acessar qualquer coisa, podemos acessar em qualquer corda.

04:11.040 --> 04:14.210
Por exemplo, para o UpperCase, eu recebo este preenchimento automático

04:14.210 --> 04:16.230
e o TypeScript não reclama.

04:16.230 --> 04:18.070
Por que ele não reclama?

04:18.070 --> 04:21.930
Porque sabe que os passatempos são do tipo "cordel", portanto, quando

04:21.930 --> 04:25.830
tenho acesso a uma pessoa. hobbies, a inferência do TypeScript

04:25.830 --> 04:29.700
detecta que os hobbies serão um conjunto de cordas.

04:29.700 --> 04:33.450
Portanto, o hobby, por cima, é corretamente identificado como sendo

04:33.450 --> 04:36.000
uma corda, porque desde que passamos por um conjunto

04:36.000 --> 04:38.370
de cordas, bem, os valores individuais têm

04:38.370 --> 04:40.510
que ser apenas cordas.

04:40.510 --> 04:43.450
E, portanto, os tipos nos oferecem grande apoio lá

04:43.450 --> 04:46.490
embaixo, e nos permitem fazer qualquer coisa com um hobby

04:46.490 --> 04:50.050
que possa ser feito com uma corda, porque sabe com certeza que

04:50.050 --> 04:53.810
o hobby será uma corda por causa dos tipos que montamos lá.

04:53.810 --> 04:56.300
E isso é realmente flexível e, claro, uma grande

04:56.300 --> 04:59.030
característica que torna a escrita do código muito

04:59.030 --> 05:01.360
mais fácil e muito mais flexível e segura.

05:01.360 --> 05:04.440
Por exemplo, receberíamos aqui um erro se ele

05:04.440 --> 05:08.570
tentasse acessar o hobby. mapa, se eu pensasse que isto seria uma matriz.

05:08.570 --> 05:12.060
O método do mapa está disponível em arrays, mas não em cordas.

05:12.060 --> 05:14.540
E aqui, corretamente, mais uma vez, um erro

05:14.540 --> 05:17.810
que o mapa não existe no tipo string porque não existe.

05:17.810 --> 05:21.290
Portanto, aqui recebemos um erro, e isso é bom que o entendamos,

05:21.290 --> 05:24.510
porque isso seria errado, e aqui vemos a inferência do TypeScript

05:24.510 --> 05:27.343
realmente, realmente brilha.
