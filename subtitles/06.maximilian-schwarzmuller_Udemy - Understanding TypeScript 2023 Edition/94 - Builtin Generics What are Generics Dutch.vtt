WEBVTT

00:02.130 --> 00:02.963
Verteller: Daarvoor

00:02.963 --> 00:05.260
ben ik weer terug in onze dummy Project Setup, die we

00:05.260 --> 00:06.690
steeds opnieuw gebruikten.

00:06.690 --> 00:08.260
Daar kunnen we NPM starts uitvoeren

00:08.260 --> 00:10.190
om die ontwikkelingsserver op te starten.

00:10.190 --> 00:13.690
En dan in een nieuw terminalvenster met de server draaiend

00:13.690 --> 00:15.260
in een ander terminalvenster,

00:15.260 --> 00:17.419
draai ik TSC dash W om mijn TypeScript

00:17.419 --> 00:21.540
compilatieproces te starten en dat draaiende te houden.

00:21.540 --> 00:23.470
Daarmee hebben we natuurlijk een lege

00:23.470 --> 00:24.560
pagina omdat er niets

00:24.560 --> 00:27.060
op staat, maar nu kunnen we wat spelen in het app

00:27.060 --> 00:29.480
TS bestand en aan de slag met generics.

00:29.480 --> 00:32.940
En ik denk dat het het gemakkelijkst is om generics te begrijpen

00:32.940 --> 00:35.450
als we kijken naar een standaard type, dat

00:35.450 --> 00:37.450
in TypeScript is ingebouwd en waar

00:37.450 --> 00:39.610
we eigenlijk veel mee gewerkt hebben,

00:39.610 --> 00:41.890
dat een generiek blijkt te zijn en dat

00:41.890 --> 00:44.410
zou een array zijn.

00:44.410 --> 00:46.900
Laten we zeggen dat we een reeks namen hebben.

00:46.900 --> 00:50.370
Max en Manual laten we zeggen.

00:50.370 --> 00:51.620
Dus we krijgen er twee

00:51.620 --> 00:54.610
namen in en natuurlijk is het type van de naamconstante

00:54.610 --> 00:57.210
een array van strings.

00:57.210 --> 00:59.610
Nu kunnen we dit eigenlijk zien als

00:59.610 --> 01:02.460
een combinatie van twee soorten.

01:02.460 --> 01:05.760
Net zoals je een object kunt hebben met verschillende eigenschappen

01:05.760 --> 01:07.700
waarbij je in elke eigenschap een ander

01:07.700 --> 01:09.310
type kunt opslaan.

01:09.310 --> 01:13.750
Een array is altijd gewoon een ding met verschillende gegevens

01:13.750 --> 01:16.440
erin, in dit geval met strings erin.

01:16.440 --> 01:20.230
We hebben dus eigenlijk het array type, gewoon een array en als ik de namen

01:20.230 --> 01:22.770
hier zou verwijderen en doorknippen, zou je zien

01:22.770 --> 01:25.010
dat TypeScript hieruit afleidt dat het een

01:25.010 --> 01:29.140
array is van het type om het even wat met om het even welke gegevens erin.

01:29.140 --> 01:32.690
TypeScript kent inderdaad het type array.

01:32.690 --> 01:35.280
Dus we kunnen zeggen, dit hier zou een array moeten

01:35.280 --> 01:37.600
zijn, maar zoals je ziet als ik zo specificeer,

01:37.600 --> 01:39.900
krijgen we een foutmelding, ook al kan ik je

01:39.900 --> 01:43.570
vertellen dat dit array type, zo bestaat voor TypeScript.

01:43.570 --> 01:45.870
Maar we zien dat het een generiek type

01:45.870 --> 01:48.710
is en dat het één type-argument nodig heeft.

01:48.710 --> 01:50.950
En dat is iets wat we nog niet eerder hebben gezien.

01:50.950 --> 01:53.870
We hebben nog nooit van generieke types gehoord.

01:53.870 --> 01:55.750
Deze vreemde notatie hier,

01:55.750 --> 01:58.120
wanneer je zoiets ziet in TypeScript,

01:58.120 --> 02:01.060
heb je te maken met een generiek type.

02:01.060 --> 02:05.610
Een generiek type is een type dat min of meer verbonden is

02:05.610 --> 02:08.890
met een ander type en echt flexibel is wat

02:08.890 --> 02:12.920
betreft welk type dat andere type precies is.

02:12.920 --> 02:14.130
Klinkt dat moeilijk?

02:14.130 --> 02:16.820
Nou, laten we teruggaan naar dat array voorbeeld.

02:16.820 --> 02:19.380
We weten dat we hier een array willen opslaan.

02:19.380 --> 02:22.250
Dus een array zelf zou een type kunnen zijn, het is een

02:22.250 --> 02:24.610
lijst van gegevens die op zichzelf al een type

02:24.610 --> 02:26.730
vormt, zou je kunnen zeggen.

02:26.730 --> 02:29.770
Net zoals een object op zichzelf een type is, ook al weten we

02:29.770 --> 02:32.200
nog niet welke gegevens erin zullen komen.

02:32.200 --> 02:34.490
Dus een array is een type op zich.

02:34.490 --> 02:38.230
Maar in een array worden natuurlijk gegevens van een bepaald

02:38.230 --> 02:39.860
type opgeslagen.

02:39.860 --> 02:42.690
Nu maakt het array-type zelf niet uit welk type

02:42.690 --> 02:44.810
gegevens erin wordt opgeslagen.

02:44.810 --> 02:48.150
Het array-type maakt niet uit of je een lijst van strings,

02:48.150 --> 02:50.540
van getallen, van objecten of van gemengde

02:50.540 --> 02:52.430
gegevens opslaat.

02:52.430 --> 02:54.500
Het array-type interesseert niet echt,

02:54.500 --> 02:58.640
maar het geeft er wel om dat je tenminste enige informatie krijgt, zelfs als je het

02:58.640 --> 03:01.200
vertelt dat ik het niet weet, door dit in te stellen

03:01.200 --> 03:02.960
op een willekeurige array.

03:02.960 --> 03:05.870
Het is beter dan niets specificeren.

03:05.870 --> 03:08.330
Nu, dit is één manier om een array-type te definiëren, het

03:08.330 --> 03:10.070
type gegevens dat daarin wordt opgeslagen

03:10.070 --> 03:11.430
en dan vierkante haakjes.

03:11.430 --> 03:14.620
De andere manier, die precies hetzelfde type zou creëren, zou

03:14.620 --> 03:15.830
zijn om dat Array-ding te

03:15.830 --> 03:17.630
gebruiken en dan deze hoekhaken.

03:17.630 --> 03:20.030
En nu geef je tussen deze haakjes

03:20.030 --> 03:22.340
het type gegevens op, dat in de

03:22.340 --> 03:24.140
array moet komen.

03:24.140 --> 03:26.330
Bijvoorbeeld een string, en

03:26.330 --> 03:31.330
dit hier is 100% hetzelfde als het definiëren van dit type hier.

03:32.030 --> 03:34.950
Natuurlijk zou je hier ook een union type kunnen gebruiken

03:34.950 --> 03:37.730
om te zeggen, deze array slaat strings of getallen op,

03:37.730 --> 03:40.850
of gebruik een willekeurige als je niets wilt zeggen over het

03:40.850 --> 03:42.970
type of zoals we net hadden string.

03:42.970 --> 03:44.330
Dit is dus een generiek type,

03:44.330 --> 03:46.900
een generiek type ingebouwd in TypeScript.

03:46.900 --> 03:50.440
Een type dat verbonden is met een ander type, waarbij

03:50.440 --> 03:53.980
we willen weten welk ons type dat zo is aan TypeScript

03:53.980 --> 03:56.810
ons beter kan ondersteunen.

03:56.810 --> 03:57.910
Want hier bijvoorbeeld,

03:57.910 --> 04:01.510
als we weten dat wat we daarin opslaan een string zal zijn,

04:01.510 --> 04:04.380
dan weten we dat wanneer ik een element in die

04:04.380 --> 04:06.143
array benader, ik er stringdingen

04:07.100 --> 04:09.410
mee kan doen.

04:09.410 --> 04:12.260
Ik kan bijvoorbeeld al deze string-methodes

04:12.260 --> 04:15.280
aanroepen en TypeScript zal niet klagen omdat

04:15.280 --> 04:18.220
het weet dat deze array strings bevat.

04:18.220 --> 04:20.410
Dat is het idee van generieke types.

04:20.410 --> 04:23.230
Een bepaald type in dit geval het array-type

04:23.230 --> 04:26.780
kan gewoon beter werken of helemaal niet werken als u

04:26.780 --> 04:29.040
een extra informatie geeft over een

04:29.040 --> 04:33.430
type gegevens dat in dit array-type is opgenomen en natuurlijk is

04:33.430 --> 04:36.590
het array-type slechts een voorbeeld.

04:36.590 --> 04:39.840
Een ander generiek type dat in TypeScript is

04:39.840 --> 04:42.130
ingebouwd is het promise type.

04:42.130 --> 04:45.470
Nu zijn beloftes een JavaScript-functie, toch?

04:45.470 --> 04:46.970
Het is geen TypeScript-functie.

04:46.970 --> 04:49.437
Je kunt beloften maken in JavaScript en

04:49.437 --> 04:52.000
voor het geval je niet zeker weet wat beloften

04:52.000 --> 04:53.870
zijn, bijgaand de link.

04:53.870 --> 04:58.150
Een belofte kan worden gecreëerd door gebruik te maken van new promise.

04:58.150 --> 05:00.640
Nogmaals, dit is een constructorfunctie, een

05:00.640 --> 05:03.270
in JavaScript ingebouwde klasse en de constructorfunctie

05:03.270 --> 05:05.870
van de belofte neemt één argument dat zelf een functie

05:05.870 --> 05:07.640
is die dan op zijn beurt twee argumenten

05:07.640 --> 05:12.580
krijgt, uiteindelijk een resolve- en een reject-functie.

05:12.580 --> 05:15.180
Nu worden deze automatisch aan ons doorgegeven

05:15.180 --> 05:17.790
door JavaScript in de browser.

05:17.790 --> 05:22.400
En dan kunnen we in een belofte bijvoorbeeld een timer instellen

05:22.400 --> 05:25.640
en dan in die callback functie van die timer de

05:25.640 --> 05:28.140
buitenste belofte oplossen.

05:28.140 --> 05:30.140
Dus hier in deze callback functie,

05:30.140 --> 05:34.823
kunnen we de resolve aanroepen en zeggen dat dit klaar is.

05:36.500 --> 05:41.020
Wanneer we dat doen maakt deze belofte hier een nieuw object aan, een belofteobject

05:41.020 --> 05:43.860
dat wordt opgeslagen in de belofteconstante.

05:43.860 --> 05:47.700
Deze belofteconstante heeft een specifiek type.

05:47.700 --> 05:49.470
Het is van het type belofte

05:49.470 --> 05:51.130
en dan zie je weer die haakjes

05:51.130 --> 05:56.130
omdat deze belofte uiteindelijk ergens toe zal leiden.

05:56.480 --> 05:58.930
Nu staat hier onbekend omdat TypeScript niet

05:58.930 --> 06:01.470
volledig kan begrijpen dat we hier eigenlijk

06:01.470 --> 06:03.880
naar een string zullen oplossen.

06:03.880 --> 06:05.870
Maar daarom kunnen we zeggen dat dit een belofte

06:05.870 --> 06:08.120
is, die uiteindelijk een string oplevert, en

06:08.120 --> 06:11.450
dat doen we door opnieuw ons generieke type te gebruiken.

06:11.450 --> 06:14.030
Het belangrijkste type is belofte, maar een

06:14.030 --> 06:16.120
belofte werkt net als een array, soort

06:16.120 --> 06:18.380
van samen met andere types.

06:18.380 --> 06:22.000
Een array gebruikt andere types omdat er gegevens in zijn opgeslagen,

06:22.000 --> 06:23.350
gegevens van bepaalde types,

06:23.350 --> 06:25.640
en de belofte werkt samen met andere types omdat

06:25.640 --> 06:29.750
hij uiteindelijk gegevens van een bepaald type teruggeeft en in dit geval is dat

06:29.750 --> 06:31.140
een belofte die uiteindelijk

06:31.140 --> 06:32.940
een string teruggeeft.

06:32.940 --> 06:34.470
Nogmaals, waarom is dat nuttig?

06:34.470 --> 06:37.550
Waarom is deze extra type-informatie nuttig?

06:37.550 --> 06:40.350
Nou, als we hier gewoon een beloftetype hadden en dat zou

06:40.350 --> 06:41.430
niet toegestaan zijn,

06:41.430 --> 06:44.770
maar als we belofte van type iets zouden zeggen, wat in principe hetzelfde

06:44.770 --> 06:46.870
zou zijn als van types zou het geen generieke

06:46.870 --> 06:48.390
types kennen als het geen informatie

06:48.390 --> 06:51.280
heeft over wat we terugkrijgen.

06:51.280 --> 06:53.340
Nou dan kunnen we deze belofte natuurlijk

06:53.340 --> 06:55.750
gebruiken zoals we een alle beloftes kunnen doen

06:55.750 --> 06:57.770
en uiteindelijk krijgen we wat gegevens,

06:57.770 --> 06:59.770
maar we weten niets over die gegevens.

06:59.770 --> 07:02.500
Ik kan er bijvoorbeeld geen stringmethode op aanroepen.

07:02.500 --> 07:04.850
Nou ik kan omdat het in dit geval om het even is, maar

07:04.850 --> 07:07.590
ik krijg geen bijzondere TypeScript ondersteuning.

07:07.590 --> 07:11.313
Ik kan er ook dingen op proberen, wat zeker niet zal werken.

07:12.170 --> 07:13.800
Als we dit bijvoorbeeld omdraaien

07:13.800 --> 07:15.220
en hier een getal teruggeven, kan

07:15.220 --> 07:17.320
ik hier nog steeds een stringmethode aanroepen,

07:17.320 --> 07:19.390
omdat TypeScript geen informatie heeft over

07:19.390 --> 07:22.640
de gegevens die deze belofte uiteindelijk zal opleveren.

07:22.640 --> 07:24.070
Met generieke types geven

07:24.070 --> 07:26.280
we die informatie aan TypeScript.

07:26.280 --> 07:28.160
We kunnen TypeScript vertellen dat

07:28.160 --> 07:30.240
deze belofte uiteindelijk een string

07:30.240 --> 07:32.840
of in dit geval een getal zal opleveren en dan kan

07:32.840 --> 07:34.940
TypeScript ons hier waarschuwen.

07:34.940 --> 07:37.390
Als ik dit probeer op te slaan, geeft het een foutmelding

07:37.390 --> 07:40.870
omdat het weet dat deze belofte uiteindelijk een getal oplevert

07:40.870 --> 07:44.092
en dat je daarop splitsen kunt aanroepen.

07:44.092 --> 07:48.010
Dus krijgen we betere typeveiligheid met generieke types.

07:48.010 --> 07:50.510
Je bent dus echt flexibel in wat je doet

07:50.510 --> 07:52.720
met die generieke informatie.

07:52.720 --> 07:54.830
Een array weet welke gegevens hij opslaat, een

07:54.830 --> 07:57.140
belofte weet welke gegevens hij teruggeeft.

07:57.140 --> 07:59.840
Als u uw eigen generieke klassen of functies bouwt, doet

07:59.840 --> 08:02.140
u misschien iets totaal anders dan daar.

08:02.140 --> 08:04.570
Maar uiteindelijk helpen generieke types

08:04.570 --> 08:06.970
je om extra type-informatie te krijgen als

08:06.970 --> 08:10.640
je een meer complexe klasse of meer complexe functie hebt die iets

08:10.640 --> 08:14.240
doet met de gegevens die binnenkomen, op een manier waarbij het niet

08:14.240 --> 08:16.020
echt belangrijk is dat de gegevens

08:16.020 --> 08:18.700
van één bepaald type zijn, maar waarbij je de type-informatie

08:18.700 --> 08:21.500
van de binnenkomende gegevens wilt opslaan om betere

08:21.500 --> 08:24.850
TypeScript-ondersteuning te krijgen wanneer je met je generieke

08:24.850 --> 08:27.590
type werkt.

08:27.590 --> 08:30.450
Dus wanneer je werkt met die belofte, of data array,

08:30.450 --> 08:33.270
dat is eigenlijk het idee van generics.

08:33.270 --> 08:36.300
Dus dit hier, waren allemaal gebouwd in generieken.

08:36.300 --> 08:37.460
Laten we dat uitleggen.

08:37.460 --> 08:40.450
Laten we nu ons eigen generieke type woord bouwen.

08:40.450 --> 08:42.653
Laten we onze eigen generieke types gebruiken.
