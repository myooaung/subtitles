WEBVTT

00:02.100 --> 00:04.870
教师：让我们坚持数组和对象｡ 

00:04.870 --> 00:06.750
另一个重要的语法是数组和对象反结构化,

00:06.750 --> 00:13.133
您在现代JavaScript和Typescript项目中会看到很多这种语法｡

00:14.180 --> 00:15.013
它是如何工作的？

00:15.013 --> 00:17.220
我们先从我们的数组开始,

00:17.220 --> 00:20.220
有两个爱好的爱好数组.

00:20.220 --> 00:26.340
假设您希望提取这两个爱好并将它们存储在变量或常量中｡

00:26.340 --> 00:28.891
当然, 我们可以把hobby

00:28.891 --> 00:34.820
1和hobby 0等同起来, 这是第一个元素｡

00:34.820 --> 00:38.720
同样的, 爱好2也可能是索引1的爱好｡ 

00:38.720 --> 00:43.330
这将取出这两个元素并将它们存储在常量中｡

00:43.330 --> 00:44.720
它花了我们两行代码,

00:44.720 --> 00:48.493
你想检索的元素越多, 它花的代码就越多｡

00:49.340 --> 00:51.690
数组解构允许我们缩短它｡ 

00:51.690 --> 00:53.090
对于数组解构, 它也适用于let,

00:53.090 --> 00:56.250
而不仅仅是const, 你在等号的左边加上方括号,

00:56.250 --> 01:01.400
这是一个不寻常的地方｡

01:01.400 --> 01:02.900
以前没见过｡ 

01:02.900 --> 01:06.480
右边是数组, 你要解构它.

01:06.480 --> 01:10.470
解构实际上意味着从数组中取出元素｡

01:10.470 --> 01:13.570
在方括号的左边, 你把它们存储在常量中,

01:13.570 --> 01:15.040
或者如果你用let,

01:15.040 --> 01:17.250
就存储在变量中｡

01:17.250 --> 01:21.170
在这里, 我们可以有爱好一和爱好二｡ 

01:21.170 --> 01:23.000
这个语法的作用是, 遍历hobbits数组,

01:23.000 --> 01:26.920
取第一个元素, 并将其存储在一个常量中, 这个常量的名字是,

01:26.920 --> 01:32.320
取第二个元素, 并将其存储在一个常量中, 这个常量的名字是.

01:32.320 --> 01:35.490
你甚至可以在这里添加rest参数, 并在这里添加其余的hobbits,

01:35.490 --> 01:42.130
以防hobbits数组中的元素多于两个｡

01:42.130 --> 01:46.260
然后所有剩余的元素, 你没有拉出来的爱好一或爱好二,

01:46.260 --> 01:48.070
将存储在一个新的数组,

01:48.070 --> 01:51.290
称为剩余的爱好｡

01:51.290 --> 01:54.090
因此它们将合并在一起成为一个新的数组｡ 

01:54.090 --> 01:57.940
顺便说一下, 解构并不改变原始数组｡ 

01:57.940 --> 02:02.940
所以如果我们安慰一下｡  在这里记录业余爱好､ 业余爱好一和业余爱好二,

02:04.260 --> 02:06.840
您将看到业余爱好仍然是旧数组｡

02:06.840 --> 02:08.840
它不是空的或类似的东西｡ 

02:08.840 --> 02:14.870
所以我们用引号引出来的值实际上只是复制到新的常量或变量中,

02:14.870 --> 02:17.720
而不是从数组中删除｡

02:17.720 --> 02:18.980
这就是数组解构｡ 

02:18.980 --> 02:20.600
我们对对象也有同样的要求｡ 

02:20.600 --> 02:21.690
我们的人来了｡ 

02:21.690 --> 02:26.630
现在, 假设我们要将姓名和年龄存储在独立的常量或变量中｡

02:26.630 --> 02:31.840
就像数组解构一样, 对象解构也适用于const和let｡

02:31.840 --> 02:33.010
我选康斯特｡ 

02:33.010 --> 02:37.090
现在我们可以在等号的左边使用花括号｡

02:37.090 --> 02:38.883
虽然是新语法, 我猜｡ 

02:39.920 --> 02:44.890
让我们的对象, 或者变量指向右边的对象.

02:44.890 --> 02:46.110
顺便说一下, 请注意,

02:46.110 --> 02:48.770
这不是我在这里指定的对象类型｡

02:48.770 --> 02:51.200
我这里没有冒号｡ 

02:51.200 --> 02:54.080
它实际上就是左边这样的花括号,

02:54.080 --> 02:58.210
常量名后面没有冒号｡

02:58.210 --> 03:02.720
所以我没有给可以存储为常量的值赋值.

03:02.720 --> 03:05.470
我只是用了一种特殊的语法｡ 

03:05.470 --> 03:08.450
因为在这里, 我们现在还可以引用对象中的属性名,

03:08.450 --> 03:13.920
例如, name和age, 来从person中提取这些键的值,

03:13.920 --> 03:21.283
并将它们存储在同名的常量中｡

03:23.290 --> 03:27.820
现在我得到了错误因为在最上面我已经有了一个年龄变量.

03:27.820 --> 03:32.173
而name是一个全局可用的变量, 无论如何都是存在的｡

03:33.240 --> 03:34.940
因此, 这里的解决方法实际上只是使用一个不同的键名,

03:34.940 --> 03:41.920
例如firstName｡

03:41.920 --> 03:45.020
现在我们可以通过这里的键取出值｡ 

03:45.020 --> 03:46.900
这就是对象解构的工作原理｡ 

03:46.900 --> 03:50.110
这里重要的一点是, 对于数组反结构化,

03:50.110 --> 03:55.110
元素是按顺序取出的, 因为数组是一个有序列表｡

03:55.110 --> 03:58.110
在对象中, 顺序并不总是有保证的, 因此,

03:58.110 --> 04:02.070
我们不是通过位置而是通过键名来提取元素｡

04:02.070 --> 04:07.630
因此, 您在大括号之间指定的值或名称不是任意的｡

04:07.630 --> 04:09.700
你不能在这里起名字｡ 

04:09.700 --> 04:21.880
这些必须是你在对象中找到的属性名, 这样这些键的值才能从对象中提取出来然后它们被存储在同名的常量或变量中.

04:21.880 --> 04:25.970
如果您想覆盖该名称, 可以在此处使用冒号｡

04:25.970 --> 04:28.050
同样, 这里不是类型赋值｡ 

04:28.050 --> 04:29.680
它只是设置一个新名称｡ 

04:29.680 --> 04:31.970
所以这都是JavaScript语法,

04:31.970 --> 04:33.820
与Typescript无关｡

04:33.820 --> 04:38.750
例如, 这里我们可以将其存储在userName常量中｡

04:38.750 --> 04:39.840
因此, 此后,

04:39.840 --> 04:45.290
我们可以安慰｡ 记录userName和age, 但不记录firstName,

04:45.290 --> 04:47.870
因为它基本上覆盖了firstName, 将其命名为常量中的userName,

04:47.870 --> 04:52.790
该常量是我们在此处提取值时创建的｡

04:52.790 --> 04:55.880
年龄不会被覆盖, 所以我们可以这样使用它｡ 

04:55.880 --> 04:58.183
同样, 这里不是类型赋值｡ 

04:58.183 --> 05:00.210
这是JavaScript语法,

05:00.210 --> 05:05.500
我们用别名重命名从person中提取的属性｡

05:05.500 --> 05:07.430
同样, 就像之前用的那个数组一样,

05:07.430 --> 05:09.840
这个人的对象本身并没有改变｡

05:09.840 --> 05:13.380
我们实际上只是将这些值从对象中复制出来｡ 

05:13.380 --> 05:15.643
因此, 我们在这里得到这个输出｡ 
