WEBVTT

1
00:00:02.240 --> 00:00:04.870
<v Presenter>So, we got our first component added.</v>

2
00:00:04.870 --> 00:00:06.090
Let's add a second one.

3
00:00:06.090 --> 00:00:09.970
NewTodo.tsx is a file name.

4
00:00:09.970 --> 00:00:13.060
In there of course, we import react from react.

5
00:00:13.060 --> 00:00:16.170
And you could of course also build class-based components.

6
00:00:16.170 --> 00:00:18.270
This is also fully supported,

7
00:00:18.270 --> 00:00:22.410
but I will use this modern functional components only style.

8
00:00:22.410 --> 00:00:24.070
So here again we have a function

9
00:00:24.070 --> 00:00:26.180
which will make up our component later.

10
00:00:26.180 --> 00:00:29.258
And I export NewTodo as my default

11
00:00:29.258 --> 00:00:31.260
and let's add a type assignment

12
00:00:31.260 --> 00:00:33.021
and let's make it clear

13
00:00:33.021 --> 00:00:34.410
that this will be a type function component.

14
00:00:34.410 --> 00:00:35.800
And therefore of course here,

15
00:00:35.800 --> 00:00:38.220
we are missing some returned jsx code.

16
00:00:38.220 --> 00:00:39.730
So here I will return a form

17
00:00:39.730 --> 00:00:42.030
where I want to add all the controls I need

18
00:00:42.030 --> 00:00:43.780
to allow the user to add new todos.

19
00:00:45.060 --> 00:00:48.650
Now let's add this new todo component in the app component.

20
00:00:48.650 --> 00:00:53.650
So in here we can import NewTodo from ./components/NewTodo

21
00:00:55.130 --> 00:00:58.095
and simply add it here instead of the comment.

22
00:00:58.095 --> 00:01:00.520
NewTodo as a self-closing component,

23
00:01:00.520 --> 00:01:02.790
because right now we're not passing anything

24
00:01:02.790 --> 00:01:04.750
between the opening and closing tags

25
00:01:04.750 --> 00:01:07.784
and we also don't have any props here,

26
00:01:07.784 --> 00:01:09.263
at the moment at least.

27
00:01:10.140 --> 00:01:11.540
So instead of this component,

28
00:01:11.540 --> 00:01:13.330
we can now add an input

29
00:01:13.330 --> 00:01:16.190
and also thereafter a button.

30
00:01:16.190 --> 00:01:18.117
So add a div here actually

31
00:01:18.117 --> 00:01:20.020
in which I want to have a label

32
00:01:20.020 --> 00:01:24.880
with htmlFor attributes to point at let's say, "todo-text".

33
00:01:24.880 --> 00:01:26.560
This is all just markup here,

34
00:01:26.560 --> 00:01:31.250
where I say "Todo Text" and then input element

35
00:01:31.250 --> 00:01:35.170
of type text with an id of "todo text",

36
00:01:35.170 --> 00:01:36.900
so that the label and the input

37
00:01:36.900 --> 00:01:39.640
are connected correctly semantically.

38
00:01:39.640 --> 00:01:41.440
And below that div here,

39
00:01:41.440 --> 00:01:43.120
instead of the form I'll add a button

40
00:01:43.120 --> 00:01:44.437
where I say, "ADD TODO",

41
00:01:45.297 --> 00:01:47.970
And that button should be of type submit so that it, well,

42
00:01:47.970 --> 00:01:49.670
submits the form.

43
00:01:49.670 --> 00:01:51.900
This is now a very basic form which we can use

44
00:01:51.900 --> 00:01:53.143
to add a new Todo.

45
00:01:54.580 --> 00:01:57.060
Now, let's make sure that this works

46
00:01:57.060 --> 00:01:59.660
and for this we actually have a couple of different steps

47
00:01:59.660 --> 00:02:01.820
we need to apply.

48
00:02:01.820 --> 00:02:05.020
We need to get whatever the user entered here

49
00:02:05.020 --> 00:02:08.550
and we then need to forward what the user enters here

50
00:02:08.550 --> 00:02:09.810
to the app component

51
00:02:09.810 --> 00:02:13.330
because that is where we will manage our todos later.

52
00:02:13.330 --> 00:02:16.150
So first of all let's react to form submission maybe.

53
00:02:16.150 --> 00:02:18.050
We can add a new function,

54
00:02:18.050 --> 00:02:20.300
so a function in the functional component,

55
00:02:20.300 --> 00:02:22.720
but that will now be a regular function,

56
00:02:22.720 --> 00:02:27.720
which we'll name, "todoSubmitsHandler", any name you want.

57
00:02:28.210 --> 00:02:29.990
This is a function which should fire

58
00:02:29.990 --> 00:02:31.860
whenever this form is submitted.

59
00:02:31.860 --> 00:02:35.571
So we can bind it to the onSubmit prop here in the end,

60
00:02:35.571 --> 00:02:38.770
todoSubmitsHandler, don't execute it, just point at it,

61
00:02:38.770 --> 00:02:40.900
so that it's executed for us

62
00:02:40.900 --> 00:02:43.810
whenever this form is submitted.

63
00:02:43.810 --> 00:02:46.270
Now in here we get an event object

64
00:02:46.270 --> 00:02:49.507
and the event object is of type react.FormEvent.

65
00:02:51.290 --> 00:02:54.010
Now there I want to call event prevent default

66
00:02:54.010 --> 00:02:55.780
to prevent that default,

67
00:02:55.780 --> 00:02:58.300
which is to send a real request to the server

68
00:02:58.300 --> 00:02:59.280
that serving this app.

69
00:02:59.280 --> 00:03:01.520
That's of course not when I want to happen.

70
00:03:01.520 --> 00:03:04.680
I want to handle this request only here in JavaScript

71
00:03:04.680 --> 00:03:08.350
and therefore this browser default has to be prevented.

72
00:03:08.350 --> 00:03:09.770
Now with that prevented,

73
00:03:09.770 --> 00:03:12.610
we can get whatever the user entered into the input

74
00:03:12.610 --> 00:03:15.250
and for this we got two different ways.

75
00:03:15.250 --> 00:03:18.310
We can either manage the state of the input here,

76
00:03:18.310 --> 00:03:20.970
kind of with two way binding,

77
00:03:20.970 --> 00:03:23.170
or we use a ref, a reference,

78
00:03:23.170 --> 00:03:25.010
to extract what the user entered here

79
00:03:25.010 --> 00:03:26.520
when the form is submitted.

80
00:03:26.520 --> 00:03:28.410
I will go for the latter approach

81
00:03:28.410 --> 00:03:30.420
because we'll see state management in action

82
00:03:30.420 --> 00:03:33.470
in the app component in a second anyways.

83
00:03:33.470 --> 00:03:37.340
To set up such a ref, we import the useRef hook from react,

84
00:03:37.340 --> 00:03:40.580
and hooks are special functions which you can execute

85
00:03:40.580 --> 00:03:44.010
and function components to add certain functionalities

86
00:03:44.010 --> 00:03:45.290
to the component

87
00:03:45.290 --> 00:03:48.101
and when we execute useRef here,

88
00:03:48.101 --> 00:03:51.190
what we get back is a Ref object,

89
00:03:51.190 --> 00:03:53.730
which we can store in a constant

90
00:03:53.730 --> 00:03:57.310
and I'll name it, "textInputRef" actually.

91
00:03:57.310 --> 00:04:00.176
And we can, for example, use such a reference to assign it

92
00:04:00.176 --> 00:04:04.980
to a dom element and then interact with that dom element

93
00:04:04.980 --> 00:04:06.500
from inside our code up here.

94
00:04:06.500 --> 00:04:08.800
So for example, when that form gets submitted.

95
00:04:09.680 --> 00:04:11.510
We set up such a connection

96
00:04:11.510 --> 00:04:14.020
by adding the special Ref prop

97
00:04:14.020 --> 00:04:16.580
to any html element of your choice

98
00:04:16.580 --> 00:04:19.150
and point at that object we created up here.

99
00:04:19.150 --> 00:04:21.530
So add textInputRef.

100
00:04:21.530 --> 00:04:23.540
This creates a connection here.

101
00:04:23.540 --> 00:04:27.380
However, you see already again TypeScript doesn't like this.

102
00:04:27.380 --> 00:04:30.110
Because useRef turns out to be

103
00:04:30.110 --> 00:04:33.250
a generic function as well.

104
00:04:33.250 --> 00:04:35.270
Now which type could we pass to it.

105
00:04:35.270 --> 00:04:37.340
What would be interesting to know here?

106
00:04:37.340 --> 00:04:39.200
Well it would be interesting to know

107
00:04:39.200 --> 00:04:42.030
which kind of data will be stored inside of the graph

108
00:04:42.030 --> 00:04:43.970
and since you point at the input element,

109
00:04:43.970 --> 00:04:47.880
we'll have an html input element stored in there.

110
00:04:47.880 --> 00:04:50.420
Now we all would just have to provide a default value

111
00:04:50.420 --> 00:04:51.840
to the Ref when it's getting set up

112
00:04:51.840 --> 00:04:53.190
and there we'll provide null,

113
00:04:53.190 --> 00:04:54.710
because when the component

114
00:04:54.710 --> 00:04:56.360
gets rendered for the very first time,

115
00:04:56.360 --> 00:04:57.380
when this code executes,

116
00:04:57.380 --> 00:04:59.460
of course this hasn't been rendered down there,

117
00:04:59.460 --> 00:05:01.590
so then this will not point at anything.

118
00:05:01.590 --> 00:05:03.350
Once this has been rendered however,

119
00:05:03.350 --> 00:05:04.950
the connection will be established

120
00:05:04.950 --> 00:05:07.040
and then this Ref will work.

121
00:05:07.040 --> 00:05:09.453
And now here in the todoSubmitHandler,

122
00:05:10.342 --> 00:05:15.342
we can get the entered text by using textInputRef.current,

123
00:05:15.500 --> 00:05:17.973
that's always something you need to enter

124
00:05:17.973 --> 00:05:21.440
when you work with a Ref, .value of course here

125
00:05:21.440 --> 00:05:24.530
because we work with the html input element.

126
00:05:24.530 --> 00:05:27.940
However, here the problem is that this could be null.

127
00:05:27.940 --> 00:05:29.630
It's a problem we know already,

128
00:05:29.630 --> 00:05:31.790
we had this early in the course as well

129
00:05:31.790 --> 00:05:33.370
when we selected something in a Dom

130
00:05:33.370 --> 00:05:34.630
and we have it here as well,

131
00:05:34.630 --> 00:05:37.020
because TypeScript can't know with certainty

132
00:05:37.020 --> 00:05:38.800
that this connection is established.

133
00:05:38.800 --> 00:05:40.580
We know it, we wrote the code,

134
00:05:40.580 --> 00:05:43.050
but TypeScript unfortunately doesn't understand

135
00:05:43.050 --> 00:05:45.300
that we do establish a connection down there.

136
00:05:46.310 --> 00:05:48.920
So, to fix this we can add an exclamation mark here,

137
00:05:48.920 --> 00:05:51.350
to again tell TypeScript that this will be fine,

138
00:05:51.350 --> 00:05:54.350
that this will be set, and we're good.

139
00:05:54.350 --> 00:05:56.130
By the way TypeScript is correct

140
00:05:56.130 --> 00:05:58.920
if we would call todoSubmitHandler here,

141
00:05:58.920 --> 00:06:00.590
this would be called the forward,

142
00:06:00.590 --> 00:06:02.410
this was rendered for the first time

143
00:06:02.410 --> 00:06:05.000
and then indeed this wouldn't be initialized yet.

144
00:06:05.000 --> 00:06:07.910
We only know that it will be initialized with certainty

145
00:06:07.910 --> 00:06:09.730
because we know this will only be called

146
00:06:09.730 --> 00:06:10.830
when the form is submitted

147
00:06:10.830 --> 00:06:13.830
and that can only happen after this has been rendered.

148
00:06:13.830 --> 00:06:16.120
So we know the way our code works.

149
00:06:16.120 --> 00:06:18.360
This will never be null.

150
00:06:18.360 --> 00:06:20.810
If there would be some other possibility,

151
00:06:20.810 --> 00:06:22.780
you would have to use a if-check here

152
00:06:22.780 --> 00:06:26.030
to check if textInputRef.current is null

153
00:06:26.030 --> 00:06:27.620
and if it is, do something else.

154
00:06:27.620 --> 00:06:29.550
But here this can't happen.

155
00:06:29.550 --> 00:06:31.230
So with that we're extracting a value

156
00:06:31.230 --> 00:06:34.640
and we can console.log this here to see whether it works.

157
00:06:34.640 --> 00:06:37.040
But of course this is not the final set up then.

158
00:06:37.040 --> 00:06:40.900
So let's save this, let's enter here,

159
00:06:40.900 --> 00:06:44.590
finish it in one month

160
00:06:44.590 --> 00:06:47.970
and add todo, and we see it here in the console logs.

161
00:06:47.970 --> 00:06:50.310
That is working the way it should.

162
00:06:50.310 --> 00:06:51.910
And with it working the way it should,

163
00:06:51.910 --> 00:06:55.460
let's now make sure we get that value to the app component.

164
00:06:55.460 --> 00:06:58.820
If you know some react definitely try it on your own first.

165
00:06:58.820 --> 00:07:00.963
We'll do it together in the next lecture.

