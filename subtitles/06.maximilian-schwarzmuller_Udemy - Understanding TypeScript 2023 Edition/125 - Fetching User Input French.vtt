WEBVTT

00:02.150 --> 00:06.180
Instructeur : Nous sommes donc en mesure de rassembler la valeur de notre entrée titre

00:06.180 --> 00:07.420
et de l'imprimer sur la console,

00:07.420 --> 00:10.160
mais bien sûr, ce n'est pas l'idée finale.

00:10.160 --> 00:13.940
Au lieu de cela, l'idée est de rassembler toutes les valeurs d'entrée,

00:13.940 --> 00:15.420
de les valider rapidement,

00:15.420 --> 00:17.890
puis d'en faire quelque chose.

00:17.890 --> 00:20.598
Pour cela, je vais ajouter une nouvelle méthode,

00:20.598 --> 00:21.860
une autre méthode privée,

00:21.860 --> 00:25.700
car je ne l'appellerai que de l'intérieur de la classe, et c'est

00:25.700 --> 00:28.530
la méthode gatherUserInput.

00:28.530 --> 00:30.460
Le nom est totalement libre.

00:30.460 --> 00:33.240
Mon idée est que cette méthode soit appelée ici.

00:33.240 --> 00:35.230
Après avoir empêché la valeur par défaut,

00:35.230 --> 00:38.980
cela devrait essentiellement atteindre toutes nos entrées ici, recueillir

00:38.980 --> 00:40.870
l'entrée de l'utilisateur ici, la valider,

00:40.870 --> 00:43.060
puis la retourner.

00:43.060 --> 00:45.950
Donc, ici, j'ai mon userInput, qui pourrait

00:45.950 --> 00:50.090
être un tuple avec le titre, la description, et les personnes,

00:50.090 --> 00:53.810
comme les valeurs libres du tuple.

00:53.810 --> 00:55.510
En fait, j'aime cette idée.

00:55.510 --> 00:57.800
Donc, nous allons déjà définir un type de retour ici.

00:57.800 --> 00:59.880
Le type de retour est un tuple.

00:59.880 --> 01:02.620
Maintenant, vous vous souvenez comment un tuple est défini ?

01:02.620 --> 01:05.630
Comment est défini le type d'un tuple ?

01:05.630 --> 01:08.620
Ce n'est pas une chaîne, mais des crochets.

01:08.620 --> 01:12.260
Cela signifie que vous retournez un tableau de chaînes de caractères.

01:12.260 --> 01:14.550
Au lieu de cela, je veux dire

01:14.550 --> 01:18.160
que je retourne un tableau d'exactement

01:18.160 --> 01:21.510
X éléments de ces trois types.

01:21.510 --> 01:23.650
Et pour cela, vous définissez le type de

01:23.650 --> 01:27.160
retour ici, deux crochets, puis à l'intérieur des crochets, vous

01:27.160 --> 01:30.240
ajoutez les différents éléments et types d'éléments.

01:30.240 --> 01:32.900
Par exemple, chaîne, chaîne de caractères et nombre.

01:32.900 --> 01:37.130
Avec cela, vous dites que cette méthode renvoie un tuple, qui a trois éléments, où le premier

01:37.130 --> 01:38.510
élément est une chaîne de caractères,

01:38.510 --> 01:40.300
le deuxième élément est une chaîne de

01:40.300 --> 01:41.820
caractères, et le troisième élément

01:41.820 --> 01:44.080
est en fait un nombre.

01:44.080 --> 01:46.360
Et maintenant nous pouvons ajouter un peu de logique

01:46.360 --> 01:48.540
à cette méthode pour que cela devienne vrai.

01:48.540 --> 01:52.670
Pour cela, récupérons d'abord le titre saisi dans

01:52.670 --> 01:57.210
ce titleInputElement. valeur.

01:57.210 --> 01:58.340
Et nous pouvons répéter cela.

01:58.340 --> 02:05.100
Nous voulons aussi la description du cours saisie dans ce descriptionInputElement.

02:05.100 --> 02:05.100
et

02:05.100 --> 02:09.510
le montant enteredPeople, ou seulement enteredPeople

02:09.510 --> 02:12.440
de ce peopleInputElement.

02:12.440 --> 02:13.870
Maintenant, j'ai stocké cela dans

02:13.870 --> 02:15.490
des constantes pour ne pas avoir à toujours

02:15.490 --> 02:17.640
répéter ces longues expressions.

02:17.640 --> 02:19.370
Maintenant, nous pouvons valider cela.

02:19.370 --> 02:21.500
Une validation triviale consisterait

02:21.500 --> 02:24.850
à vérifier si enteredTitle. coupe, donc suppression

02:24.850 --> 02:27.610
de l'espace large du X au début et à la fin.

02:27.610 --> 02:35.350
Length est égal à zéro, ou si enteredDescription.

02:35.350 --> 02:35.350
trim

02:35.350 --> 02:37.570
length est égal à zéro, ou si

02:37.570 --> 02:41.520
enteredPeople. la longueur de la garniture

02:41.520 --> 02:44.380
est égale à zéro.

02:44.380 --> 02:48.410
Cela permettrait de vérifier qu'aucune entrée n'est vide.

02:48.410 --> 02:50.330
Maintenant, il ne vérifie pas tout ce que nous

02:50.330 --> 02:51.860
pourrions vouloir vérifier.

02:51.860 --> 02:54.770
Nous ne vérifions pas si les personnes inscrites

02:54.770 --> 02:57.160
sont, disons, un nombre positif.

02:57.160 --> 03:00.170
Nous ne sommes pas en mesure de fixer une longueur minimale.

03:00.170 --> 03:02.190
Nous devrions ajouter de plus en plus de conditions

03:02.190 --> 03:04.050
ici, et bien que nous puissions le faire,

03:04.050 --> 03:06.820
ce ne serait pas vraiment une solution évolutive.

03:06.820 --> 03:09.110
Si nous avons des parties de l'application où nous

03:09.110 --> 03:11.550
voulons également valider l'entrée de l'utilisateur,

03:11.550 --> 03:14.440
nous devons toujours répéter de longues instructions if.

03:14.440 --> 03:18.390
Je proposerai donc bientôt une solution de validation plus intelligente

03:18.390 --> 03:21.960
ou une solution de validation plus évolutive.

03:21.960 --> 03:23.780
Pour l'instant, nous pouvons le laisser comme ça.

03:23.780 --> 03:26.190
Vous pouvez d'ores et déjà y penser, et

03:26.190 --> 03:28.520
bien sûr, après ce cours, réfléchir à

03:28.520 --> 03:32.220
la manière dont vous pourriez externaliser cette fonction

03:32.220 --> 03:34.670
de validation séparée et configurable,

03:34.670 --> 03:38.350
et à la manière dont les types pourraient vous y aider.

03:38.350 --> 03:41.370
Il existe certainement de nombreuses approches possibles, et

03:41.370 --> 03:44.040
je vous ferai part de la mienne dans le prochain cours.

03:44.040 --> 03:45.620
Mais avant d'en arriver

03:45.620 --> 03:48.350
là, utilisons cette approche triviale et

03:48.350 --> 03:52.130
agissons si toutes ces conditions sont satisfaites.

03:52.130 --> 03:53.620
Maintenant, si nous arrivons

03:53.620 --> 03:56.000
dans ce bloc if, nous savons qu'au moins une validation

03:56.000 --> 03:57.350
a échoué, et nous pouvons alors

03:57.350 --> 04:01.833
passer par une alerte, où nous disons Entrée invalide, veuillez réessayer.

04:03.450 --> 04:04.910
Sinon, si nous n'y arrivons

04:04.910 --> 04:06.200
pas, nous savons que

04:06.200 --> 04:08.600
nous avons une entrée valide, sinon,

04:08.600 --> 04:11.310
je veux retourner mon tuple.

04:11.310 --> 04:14.170
Donc ici, je veux renvoyer le titre

04:14.170 --> 04:17.090
saisi, la description saisie et

04:17.090 --> 04:19.660
les personnes saisies.

04:19.660 --> 04:20.630
Mais comme vous pouvez le

04:20.630 --> 04:21.850
constater, le groupe des types

04:21.850 --> 04:24.210
n'est pas content, car les personnes inscrites doivent être

04:24.210 --> 04:25.370
un nombre, pas un texte.

04:25.370 --> 04:27.410
Et en fait, tout ce que vous extrayez

04:27.410 --> 04:28.720
de la propriété valeur

04:28.720 --> 04:32.350
d'un élément de saisie sera du texte par défaut.

04:32.350 --> 04:34.520
Pour le transformer en un nombre, nous

04:34.520 --> 04:38.060
pouvons appeler parseFloat, par exemple, ou simplement

04:38.060 --> 04:40.610
ajouter un plus devant, et cela le convertira

04:40.610 --> 04:42.850
en un nombre, et le groupe des types n'est

04:42.850 --> 04:45.430
toujours pas satisfait parce que, eh bien,

04:45.430 --> 04:48.910
nous ne retournons pas toujours un tuple.

04:48.910 --> 04:50.830
Et cette partie-là ?

04:50.830 --> 04:52.310
Si nous arrivons dans le bloc

04:52.310 --> 04:53.510
if, nous montrons une alerte,

04:53.510 --> 04:55.820
mais nous ne retournons pas un tuple.

04:55.820 --> 04:59.810
Eh bien, il y a plusieurs choses que nous pourrions faire à la place.

04:59.810 --> 05:03.460
Nous pouvons simplement ne rien retourner, comme ceci.

05:03.460 --> 05:06.320
Sinon, nous pourrions lancer une erreur.

05:06.320 --> 05:08.360
Dans ce cas, nous ne retournerons

05:08.360 --> 05:11.100
rien, mais nous lancerons une erreur.

05:11.100 --> 05:12.820
Maintenant, je ne veux pas lancer une erreur

05:12.820 --> 05:15.570
ici parce que je ne veux pas vraiment implémenter la gestion des erreurs,

05:15.570 --> 05:18.090
donc ce que je vais faire, c'est ajouter une déclaration de retour,

05:18.090 --> 05:20.100
mais bien sûr, ce n'est pas un tuple.

05:20.100 --> 05:23.110
Donc en fait, le type de retour ici est un

05:23.110 --> 05:25.923
tuple, ou c'est en fait indéfini.

05:27.320 --> 05:29.040
Cependant, comme vous l'avez appris, vous

05:29.040 --> 05:30.750
ne devez pas utiliser undefined ici comme

05:30.750 --> 05:32.550
type de retour sur les fonctions.

05:32.550 --> 05:34.040
Utilisez plutôt void.

05:34.040 --> 05:35.410
C'est presque la même

05:35.410 --> 05:37.040
chose, mais exclusif aux

05:37.040 --> 05:39.350
fonctions, et cela indique à TypeScript

05:39.350 --> 05:46.930
qu'il s'agit d'une fonction qui a au moins une branche qui ne renvoie aucune valeur comme celle-ci.

05:46.930 --> 05:49.160
Ici aussi, nous utilisons bien sûr un type d'union

05:49.160 --> 05:51.240
car nous avons les deux possibilités.

05:51.240 --> 05:53.170
Nous pouvons ne rien retourner,

05:53.170 --> 05:55.660
ou retourner un tuple.

05:55.660 --> 05:57.510
Donc maintenant, nous avons

05:57.510 --> 05:59.370
gatherUserInput et userInput

05:59.370 --> 06:01.670
là pour tout est soit indéfini à la

06:01.670 --> 06:04.130
fin, soit c'est ce tuple.

06:04.130 --> 06:07.640
Donc maintenant, avant d'aller plus loin et d'améliorer la validation,

06:07.640 --> 06:09.620
construisons sur cette userInput.

06:09.620 --> 06:12.480
Lorsque nous rassemblons le userInput ici, nous avons maintenant

06:12.480 --> 06:14.820
cette chose userInput, et maintenant nous pouvons

06:14.820 --> 06:17.050
vérifier si c'est un tuple.

06:17.050 --> 06:19.820
Le problème est qu'au moment de l'exécution, nous n'avons

06:19.820 --> 06:22.620
aucun moyen de vérifier s'il s'agit d'un tuple.

06:22.620 --> 06:25.200
Il n'y a pas d'instanceof que nous pourrions utiliser.

06:25.200 --> 06:28.560
Il n'y a pas de type Tuple que nous pourrions vérifier.

06:28.560 --> 06:31.020
Nous ne pouvons pas non plus vérifier si

06:33.803 --> 06:36.053
typof userInput est égal à tuple car

06:37.130 --> 06:40.050
cela n'existe pas dans Vanilla JavaScript.

06:40.050 --> 06:41.850
String existe par exemple,

06:41.850 --> 06:44.950
mais tuple n'est pas un type JavaScript.

06:44.950 --> 06:47.020
Ainsi, pour vérifier s'il s'agit d'un tuple,

06:47.020 --> 06:48.900
nous devons nous rappeler que les tuples,

06:48.900 --> 06:50.990
à la fin, sont simplement effacés.

06:50.990 --> 06:52.750
Ils sont spéciaux dans TypeScript,

06:52.750 --> 06:54.860
mais une fois que nous sommes au pays du JavaScript,

06:54.860 --> 06:55.940
ils sont tout simplement

06:55.940 --> 06:58.320
effacés parce que l'idée d'un tuple où le nombre

06:58.320 --> 06:59.950
d'éléments et les types d'éléments

06:59.950 --> 07:02.000
sont fixes n'existe vraiment que dans

07:02.000 --> 07:04.470
TypeScript.

07:04.470 --> 07:05.930
Ainsi, lors de l'exécution,

07:05.930 --> 07:09.370
tout ce que nous devons vérifier ici, c'est s'il s'agit d'un tableau,

07:09.370 --> 07:12.950
et pour cela, nous pouvons utiliser l'objet tableau en JavaScript,

07:12.950 --> 07:15.180
et là, la méthode isArray.

07:15.180 --> 07:17.500
C'est une méthode intégrée à Vanilla JavaScript

07:17.500 --> 07:20.290
qui nous permet de vérifier si ceci est un tableau.

07:20.290 --> 07:23.200
On sait que c'est soit indéfini, soit un tuple.

07:23.200 --> 07:24.630
Un tuple est un tableau, donc

07:24.630 --> 07:26.000
si cela retourne vrai, nous

07:26.000 --> 07:27.400
avons le tuple.

07:27.400 --> 07:31.010
Et puis ici, nous pouvons utiliser la structuration par exemple pour obtenir

07:31.010 --> 07:34.070
le titre, la description, et les personnes à partir de l'entrée

07:34.070 --> 07:35.560
de l'utilisateur, et ensuite faire

07:35.560 --> 07:37.720
quelque chose avec cette entrée.

07:37.720 --> 07:39.230
Par exemple pour l'instant,

07:39.230 --> 07:42.623
la console. titre du journal, description et personnes.

07:43.980 --> 07:46.060
Si nous faisons tout cela et que nous sauvegardons

07:46.060 --> 07:47.950
tout, il compile sans erreur, et si nous

07:47.950 --> 07:49.870
revenons ici, et que je clique sur le projet

07:49.870 --> 07:51.310
comme ceci, j'obtiens une entrée

07:51.310 --> 07:53.050
invalide.

07:53.050 --> 07:54.580
Si j'entre Hello, je l'obtiens

07:54.580 --> 07:56.950
quand même parce qu'on n'a pas de description.

07:56.950 --> 07:58.890
Il s'agit d'une description.

07:58.890 --> 08:00.180
Nous l'obtenons toujours bien

08:00.180 --> 08:02.940
sûr, mais si je saisis maintenant quelque chose dans les personnes,

08:02.940 --> 08:05.220
cela fonctionne et nous l'imprimons ici.

08:05.220 --> 08:09.330
C'est bien sûr un beau pas dans la bonne direction.

08:09.330 --> 08:10.990
Nous n'en sommes pas encore là.

08:10.990 --> 08:13.330
Comme je l'ai dit, nous pouvons améliorer la validation.

08:13.330 --> 08:16.230
Juste une chose que je veux faire tout de suite avant de faire

08:16.230 --> 08:20.070
ça, je veux effacer toutes les entrées après avoir cliqué sur ADD PROJECT.

08:20.070 --> 08:22.440
Donc je veux vider toutes les entrées à nouveau.

08:22.440 --> 08:25.290
Maintenant, pour cela, nous pouvons ajouter une nouvelle méthode

08:25.290 --> 08:27.043
privée, clearInput ou clearInputs, et là,

08:28.210 --> 08:32.740
nous pouvons définir ce titleInputElement. égale à une chaîne vide et répétez

08:32.740 --> 08:34.130
cela pour les autres

08:36.200 --> 08:38.980
entrées également.

08:38.980 --> 08:41.960
Donc ici, nous avons le descriptionInputElement, et ici,

08:41.960 --> 08:44.250
nous avons le peopleInputElement, et maintenant,

08:44.250 --> 08:48.190
si nous appelons ceci. clearInputs ici, nous devons nous assurer

08:48.190 --> 08:50.200
que le formulaire est effacé une fois

08:50.200 --> 08:51.730
qu'il est soumis.

08:51.730 --> 08:52.870
Donc si nous essayons à nouveau,

08:52.870 --> 08:54.380
en entrant quelque chose ici, vous

08:54.380 --> 08:56.230
voyez que c'est imprimé ici, et le formulaire

08:56.230 --> 08:57.740
est effacé.

08:57.740 --> 09:00.720
Avec cela, je suis généralement satisfait de la façon dont nous

09:00.720 --> 09:03.300
avons géré cela, mais maintenant je veux améliorer la

09:03.300 --> 09:06.970
validation et écrire cela d'une façon plus réutilisable et évolutive.

09:06.970 --> 09:07.840
Comme je l'ai dit, n'hésitez

09:07.840 --> 09:10.320
surtout pas à le faire vous-même d'abord.

09:10.320 --> 09:11.530
Dans le prochain cours, nous

09:11.530 --> 09:12.580
le ferons ensemble.
