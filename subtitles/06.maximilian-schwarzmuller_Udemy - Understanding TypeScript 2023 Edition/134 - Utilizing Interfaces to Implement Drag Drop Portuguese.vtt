WEBVTT

00:02.190 --> 00:05.380
Instrutor: Então vamos agora chegar ao final deste

00:05.380 --> 00:09.590
projeto, e isso envolve a possibilidade de arrastar e soltar um

00:09.590 --> 00:12.390
projeto que temos em uma das caixas, por exemplo,

00:12.390 --> 00:16.410
na caixa de projetos ativos para a outra caixa.

00:16.410 --> 00:19.310
Portanto, basicamente, mudar o projeto

00:19.310 --> 00:22.780
de um projeto ativo para um projeto concluído.

00:22.780 --> 00:25.430
Portanto, não se trata apenas da atualização

00:25.430 --> 00:27.800
visual, não se trata apenas de arrastá-la

00:27.800 --> 00:31.050
e soltá-la e atualizar a IU, trata-se também de ajustar

00:31.050 --> 00:35.470
os dados nos bastidores de nossa classe de gestão estadual o estado do projeto

00:35.470 --> 00:37.790
onde administramos uma lista de projetos

00:37.790 --> 00:39.960
no final, tenha em mente que cada projeto

00:39.960 --> 00:42.990
tem uma propriedade de status e precisaremos atualizar

00:42.990 --> 00:45.420
isso também.

00:45.420 --> 00:48.610
Portanto, duas coisas que precisamos implementar:

00:48.610 --> 00:51.800
arrastar e soltar e depois tudo isso nos bastidores

00:51.800 --> 00:53.410
e atualização de dados.

00:53.410 --> 00:56.220
Agora vamos começar com arrastar e largar, e para

00:56.220 --> 00:59.870
isso vamos basicamente implementar o arrastar e largar como

00:59.870 --> 01:02.960
o faríamos com o roteiro de baunilha java, que você, por

01:02.960 --> 01:04.790
exemplo, pode conhecer em meu guia

01:04.790 --> 01:06.970
completo de roteiro java.

01:06.970 --> 01:09.690
Basicamente, trata-se de implementar um monte de

01:09.690 --> 01:11.960
ouvintes de eventos e, claro, você verá como

01:11.960 --> 01:14.800
funciona neste módulo nas próximas palestras, mas vamos

01:14.800 --> 01:17.350
implementá-lo em estilo datilografado, então

01:17.350 --> 01:21.150
vamos melhorá-lo usando alguns recursos datilografados.

01:21.150 --> 01:24.240
Então, vamos começar e como eu quero melhorá-lo com

01:24.240 --> 01:25.790
recursos de digitação?

01:25.790 --> 01:28.423
Bem, quero reutilizar interfaces aqui.

01:29.280 --> 01:32.120
Interfaces de arrastar e soltar, mas não apenas

01:32.120 --> 01:35.470
para definir a estrutura de alguns objetos como anteriormente

01:35.470 --> 01:39.060
utilizávamos interfaces, mas para realmente configurar

01:39.060 --> 01:42.010
um contrato que certas classes podem assinar

01:42.010 --> 01:46.970
para forçar estas classes, para basicamente implementar certos métodos

01:46.970 --> 01:51.980
que nos ajudam com o arrastar e soltar.

01:51.980 --> 01:55.250
Para ser preciso, estou pensando em duas interfaces, e

01:55.250 --> 01:58.590
é claro, o uso destas interfaces será opcional, mas isto

01:58.590 --> 02:00.920
nos permitirá, bem, basicamente, fornecer

02:00.920 --> 02:04.465
algum código que força uma classe a implementar tudo o que ela

02:04.465 --> 02:06.340
precisa para ser arrastada ou para

02:06.340 --> 02:09.810
ser um alvo de queda válido que, se estivéssemos construindo

02:09.810 --> 02:12.960
uma aplicação maior, poderia nos ajudar a escrever código

02:12.960 --> 02:15.160
mais limpo e mais compreensível, especialmente

02:15.160 --> 02:19.080
quando se trabalha em equipe.

02:19.080 --> 02:21.710
Então, de quais interfaces estou falando?

02:21.710 --> 02:23.160
Eu quero ter uma interface,

02:23.160 --> 02:24.617
que eu nomearei arrastável,

02:26.200 --> 02:28.660
e terei uma segunda interface, que eu nomearei

02:28.660 --> 02:31.060
alvo de arrasto.

02:31.060 --> 02:32.950
Minha idéia aqui é que podemos adicionar

02:32.950 --> 02:35.710
a interface arrastável a qualquer classe que torne

02:35.710 --> 02:38.030
e elemento que possa ser arrastado.

02:38.030 --> 02:41.810
Em nosso exemplo, essa seria a classe do item do projeto.

02:41.810 --> 02:44.170
A classe de itens de projeto é responsável

02:44.170 --> 02:46.600
pela renderização, bem, estes itens de

02:46.600 --> 02:49.230
projeto e estes devem ser as peças arrastadas,

02:49.230 --> 02:53.320
e as caixas, projetos ativos e projetos concluídos, portanto, aqui

02:53.320 --> 02:57.880
nossa classe de lista de projetos deve ser alvos de arrasto.

02:57.880 --> 03:02.100
Agora, o que estas interfaces obrigam a ser implementadas ou a serem adicionadas

03:02.100 --> 03:03.890
às classes então?

03:03.890 --> 03:05.760
Vamos começar com o arrasto.

03:05.760 --> 03:09.550
Aqui, precisamos basicamente de dois ouvintes de eventos e, portanto,

03:09.550 --> 03:12.540
dois manipuladores para estes eventos.

03:12.540 --> 03:17.070
Um manipulador de arrasto inicial, que será um método e um manipulador

03:17.070 --> 03:19.733
de arrasto final, porque ao implementar

03:22.020 --> 03:24.180
arrastar e soltar a coisa que você

03:24.180 --> 03:26.070
quer arrastar exigirá algum

03:26.070 --> 03:29.840
ouvinte que escute o início daquele evento de arrasto e também,

03:29.840 --> 03:32.330
potencialmente, um ouvinte que escute

03:32.330 --> 03:34.540
o final do evento de arrasto para que

03:34.540 --> 03:36.560
possa fazer qualquer tipo de atualização

03:36.560 --> 03:40.440
lá que você queira fazer.

03:40.440 --> 03:42.580
Agora, o manipulador de eventos de arrasto

03:42.580 --> 03:44.225
receberá um objeto de evento

03:44.225 --> 03:47.370
que teremos chamado de evento de arrasto, que é um tipo

03:47.370 --> 03:51.010
embutido, tipos com opções libs, por causa de nossa configuração

03:51.010 --> 03:53.210
de conflito TS e as libs que estamos adicionando

03:53.210 --> 03:55.330
lá e não retornará nada, será um método

03:55.330 --> 03:57.600
que executa, mas que depois apenas faz

03:57.600 --> 04:03.930
algo, configura o evento de arrasto, por exemplo, mas não retorna.

04:03.930 --> 04:06.970
Agora o manipulador de arrasto recebe um evento semelhante,

04:06.970 --> 04:10.730
ele também recebe um evento de arrasto e tudo isso não retorna nada.

04:10.730 --> 04:13.130
Agora, é claro que você verá como aplicamos isso em apenas

04:13.130 --> 04:15.810
alguns segundos, portanto, fique a descoberto comigo.

04:15.810 --> 04:17.810
Agora, e quanto ao alvo de arrasto?

04:17.810 --> 04:20.530
Bem, para o alvo, para a caixa na qual podemos

04:20.530 --> 04:22.620
arrastar algo, há três manipuladores

04:22.620 --> 04:26.280
de eventos que eu quero implementar.

04:26.280 --> 04:28.593
Um manipulador de arrasto, um

04:29.440 --> 04:31.800
manipulador de gota e um manipulador

04:31.800 --> 04:34.280
de arrasto de esquerda.

04:34.280 --> 04:36.470
Agora, o que estas coisas fazem?

04:36.470 --> 04:39.370
Agora, você precisa implementar um arrastar sobre o

04:39.370 --> 04:41.960
manipulador ao implementar o arrastar e soltar

04:41.960 --> 04:45.140
em java script para basicamente sinalizar ao navegador em

04:45.140 --> 04:48.060
java script que a coisa que você está arrastando algo

04:48.060 --> 04:50.160
é um alvo de arrastamento válido.

04:50.160 --> 04:53.840
Se você não fizer o direito no manipulador de arrasto,

04:53.840 --> 04:56.410
não será possível fazer uma queda.

04:56.410 --> 04:57.980
Você precisa do manipulador

04:57.980 --> 05:00.760
de gota então para reagir à queda real que acontece,

05:00.760 --> 05:03.960
então se o manipulador de arrasto permitir a gota com

05:03.960 --> 05:06.500
o manipulador de gota irá lidar com a gota e

05:06.500 --> 05:08.650
então aqui podemos atualizar nossos

05:08.650 --> 05:11.960
dados e IU por exemplo e o manipulador de arrasto pode ser

05:11.960 --> 05:14.500
útil se estivermos, por exemplo, dando algum

05:14.500 --> 05:16.940
feedback visual ao usuário quando ele ou

05:16.940 --> 05:19.880
ela arrasta algo sobre a caixa por exemplo, mudamos

05:19.880 --> 05:22.210
bem a cor de fundo se nenhuma gota acontecer

05:22.210 --> 05:25.790
e em vez disso é cancelada ou o usuário afasta o elemento podemos

05:25.790 --> 05:28.410
usar o manipulador de arrasto para reverter

05:28.410 --> 05:32.190
nossa atualização visual.

05:32.190 --> 05:36.250
Agora, todos os três manipuladores recebem um evento de arrasto

05:36.250 --> 05:37.990
e não devolvem nada, então

05:37.990 --> 05:41.473
vamos atualizá-los adequadamente desta forma.

05:44.070 --> 05:47.250
E também para este último manipulador aqui.

05:47.250 --> 05:49.810
E agora configuramos algumas interfaces

05:49.810 --> 05:52.840
que por si só não fazem muito, mas agora podemos

05:52.840 --> 05:55.710
usá-las e eu quero começar com o item do

05:55.710 --> 05:57.490
projeto.

05:57.490 --> 06:00.380
Então vamos encontrar nossa classe de item de projeto para

06:00.380 --> 06:02.710
isto aqui está o componente, aqui está o item de

06:02.710 --> 06:05.100
projeto, e agora você pode se lembrar que uma interface

06:05.100 --> 06:08.540
não pode ser usada apenas para definir um tipo de objeto personalizado,

06:08.540 --> 06:12.290
mas que você pode usá-la como um contrato em uma classe.

06:12.290 --> 06:15.760
Você pode chamar os implementos, ou adicionar implementos aqui depois do

06:15.760 --> 06:16.750
nome de sua classe e depois

06:16.750 --> 06:19.290
de extensões potenciais que você está fazendo e então

06:19.290 --> 06:20.900
implementar a interface.

06:20.900 --> 06:24.340
Neste caso, a interface arrastável.

06:24.340 --> 06:27.250
Agora, quando você faz isso, e eu apenas formatei isto para trazê-lo

06:27.250 --> 06:29.820
em uma nova linha para facilitar a leitura.

06:29.820 --> 06:31.393
Quando você faz isso, você recebe

06:31.393 --> 06:34.460
um erro agora que a classe aqui implementa incorretamente

06:34.460 --> 06:38.600
a interface porque essa interface arrastável nos força a adicionar dois

06:38.600 --> 06:40.763
métodos, se você se lembra.

06:42.840 --> 06:44.480
Então, vamos adicioná-las aqui.

06:44.480 --> 06:46.290
Talvez carreguemos um construtor.

06:46.290 --> 06:49.550
Vamos adicionar um manipulador de arrasto que recebe

06:49.550 --> 06:53.610
um evento de arrasto do tipo "drag start" e vamos também adicionar

06:53.610 --> 06:56.500
nosso manipulador de arrasto final que recebe

06:56.500 --> 06:59.143
nosso evento de arrasto.

06:59.990 --> 07:02.010
E agora temos estes dois métodos acrescentados.

07:02.010 --> 07:05.330
Agora, isso por si só não permite arrastar e soltar.

07:05.330 --> 07:08.900
Ele apenas nos ajuda a escrever componentes ou classes arrastáveis

07:08.900 --> 07:11.880
de maneira uniforme, portanto, se adicionarmos cada vez

07:11.880 --> 07:14.560
mais classes que devem ser arrastáveis, teremos sempre

07:14.560 --> 07:18.210
estes métodos que simplesmente tornam mais fácil raciocinar sobre

07:18.210 --> 07:20.700
nosso código e trabalhar nosso código, especialmente

07:20.700 --> 07:22.870
quando se trabalha em equipe, porque todos

07:22.870 --> 07:25.520
sabem onde colocar em trabalho para o evento de início

07:25.520 --> 07:27.840
de arrasto.

07:27.840 --> 07:31.340
Agora o que isto não faz, é claro, é ouvir um evento

07:31.340 --> 07:32.950
de "drag start".

07:32.950 --> 07:35.010
Isso é algo que podemos fazer no método de configuração

07:35.010 --> 07:36.730
que você já tem, no entanto.

07:36.730 --> 07:38.980
Podemos alcançar nosso elemento renderizado

07:38.980 --> 07:41.090
e adicionar um ouvinte a ele e lá, esse

07:41.090 --> 07:43.890
seria o evento de início de arrasto.

07:43.890 --> 07:45.780
O evento de arrasto inicial é um evento,

07:45.780 --> 07:49.190
um evento padrão do navegador que você pode ouvir e o manipulador

07:49.190 --> 07:51.750
uniforme que queremos acionar, é claro, é o manipulador

07:51.750 --> 07:53.740
de arrasto inicial, no qual podemos

07:55.320 --> 07:57.793
apontar aqui.

07:59.080 --> 08:00.750
Agora, também queremos ter certeza

08:00.750 --> 08:02.460
de que dentro do manipulador de arrasto

08:02.460 --> 08:04.870
que esta palavra-chave se refere à nossa classe

08:04.870 --> 08:06.560
e como você aprende com os ouvintes

08:06.560 --> 08:08.530
de eventos que, por padrão, não seria o caso,

08:08.530 --> 08:11.810
então poderíamos usar amarrar aqui e amarrar isto que seria válido,

08:11.810 --> 08:14.750
mas temos uma maneira melhor na verdade.

08:14.750 --> 08:16.900
Acrescentamos o decorador de amarração automática,

08:16.900 --> 08:18.550
então vou apenas acrescentar isto aqui

08:18.550 --> 08:20.303
ao manipulador de arrasto.

08:21.210 --> 08:26.070
Agora, também podemos ouvir aqui o evento do drag end e apontar

08:26.070 --> 08:28.530
para o manipulador do drag end.

08:28.530 --> 08:30.400
Você também pode adicionar a ligação automática

08:30.400 --> 08:32.690
lá se você planeja usar a palavra-chave vis aqui

08:32.690 --> 08:35.830
no momento, eu apenas registrarei o fim de arrasto aqui para que

08:35.830 --> 08:37.730
possamos ver que isso é acionado porque

08:37.730 --> 08:40.520
aqui eu realmente não tenho nada específico que eu queira

08:40.520 --> 08:44.410
fazer com ele e, portanto, eu também vou apagar este parâmetro e basicamente dizer

08:44.410 --> 08:47.310
à máquina que não estou usando-o.

08:47.310 --> 08:49.850
Aqui no início do arrasto, usaremos o evento e,

08:49.850 --> 08:51.730
no momento, apenas registrarei o evento,

08:51.730 --> 08:53.720
quando este evento ocorrer.

08:53.720 --> 08:55.610
Mas isso, por si só, não vai fazer o truque.

08:55.610 --> 08:57.000
Se você salvar tudo e acrescentar

08:57.000 --> 08:59.230
algum projeto aqui, você verá que não pode

08:59.230 --> 09:01.460
arrastá-lo novamente, certo?

09:01.460 --> 09:04.750
Se você tentar arrastá-lo, isso não funcionará

09:04.750 --> 09:07.390
porque você também precisará mudar

09:07.390 --> 09:09.720
algo em seu arquivo HTML.

09:09.720 --> 09:11.810
Neste item da lista, que está sendo apresentado

09:11.810 --> 09:14.550
para cada projeto, que é o que você quer arrastar,

09:14.550 --> 09:19.830
você tem que adicionar o atributo de arrastar e definir isto como verdadeiro.

09:19.830 --> 09:21.040
Isso é importante.

09:21.040 --> 09:24.200
Isto diz ao navegador que isto será arrastado.

09:24.200 --> 09:28.430
Com isso, se você o salvou e readquiriu um projeto aqui, você vê agora,

09:28.430 --> 09:30.400
isto realmente é arrastável, agora

09:30.400 --> 09:32.070
está preso ao meu mouse e agora

09:32.070 --> 09:35.720
nós podemos realmente movê-lo por aqui muito bem.

09:35.720 --> 09:38.530
Você também verá à direita que um evento de arrastamento disparou

09:38.530 --> 09:41.390
quando eu comecei a arrastar e se eu soltar, você verá que o evento

09:41.390 --> 09:43.860
de arrastamento também dispara.

09:43.860 --> 09:46.510
Assim, nossos ouvintes estão conectados e

09:46.510 --> 09:50.540
podemos arrastar, agora podemos trabalhar no alvo de queda, assim

09:50.540 --> 09:53.200
como na caixa para onde esta deve ser arrastada,

09:53.200 --> 09:56.560
para então adicionar o projeto a essa caixa.

09:56.560 --> 09:58.660
Uma coisa que também farei muito rapidamente

09:58.660 --> 10:02.930
está nos aplicativos. css, nos itens da lista, então nos projetos

10:02.930 --> 10:06.550
LI, acrescentarei uma cor de fundo branco simplesmente para

10:06.550 --> 10:09.810
que possamos ver isto um pouco melhor.

10:09.810 --> 10:12.350
Portanto, aqui, projeto LI, acrescentei o branco

10:12.350 --> 10:15.800
para que quando arrastarmos o projeto aqui, tenhamos o fundo branco

10:15.800 --> 10:17.370
aqui, de modo que isto torne um

10:17.370 --> 10:19.150
pouco mais fácil de ver.

10:19.150 --> 10:20.840
Mas isso não muda nosso próximo passo.

10:20.840 --> 10:22.700
Queremos fazer seu dropabble.
