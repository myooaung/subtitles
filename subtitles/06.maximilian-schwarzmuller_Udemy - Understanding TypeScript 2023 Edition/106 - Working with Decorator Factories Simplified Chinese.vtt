WEBVTT

00:02.120 --> 00:04.420
教师：除了创建一个这样的装饰器,

00:04.420 --> 00:07.060
我们还可以定义一个装饰器工厂, 它基本上返回一个装饰器函数,

00:07.060 --> 00:15.440
但是当我们将它作为装饰器分配给某个东西时, 允许我们对其进行配置｡

00:15.440 --> 00:19.790
为了说明这一点, 让我们把这个函数转换成一个工厂｡

00:19.790 --> 00:23.220
为此, 我将获取这个构造函数参数并移除它,

00:23.220 --> 00:26.120
在这里我将返回一个新的匿名函数,

00:26.120 --> 00:28.000
它接受这个构造函数参数,

00:28.000 --> 00:29.920
然后保存我想在装饰器内部执行的日志记录,

00:29.920 --> 00:34.610
所以我把它移到那里.

00:34.610 --> 00:37.890
现在我们有一个函数返回一个新函数｡ 

00:37.890 --> 00:40.780
所以现在当我们想要应用这个装饰器的时候,

00:40.780 --> 00:43.350
我们必须把它作为一个函数来执行,

00:43.350 --> 00:45.740
这样我们就可以执行这个外部函数,

00:45.740 --> 00:47.670
并把返回值, 也就是这个内部函数,

00:47.670 --> 00:49.000
也就是我们的有效装饰器函数,

00:49.000 --> 00:53.430
作为一个装饰器, 附加到类上｡

00:53.430 --> 00:54.740
我们为什么要这么做？

00:54.740 --> 00:56.630
因为现在这里, 例如, 我们可以接受一个日志字符串,

00:56.630 --> 01:08.230
它是一个字符串, 你可以选择任何参数, 你想要多少参数都可以, 然后在“logging - person”中传递一个值, 并在装饰器函数中使用它, 这样,

01:08.230 --> 01:11.280
这里, 我们就显示了我们的日志字符串,

01:11.280 --> 01:16.300
而不是显示标准的日志文本｡

01:16.300 --> 01:25.000
因此, 现在我们可以自定义装饰器函数在使用工厂函数执行时使用的值｡

01:25.000 --> 01:27.410
我们现在在这里调用我们的装饰器,

01:27.410 --> 01:35.060
因为我们没有执行装饰器函数, 但是我们正在执行一个将返回这样一个装饰器函数的函数｡

01:35.060 --> 01:36.940
这样做的好处是,

01:36.940 --> 01:43.750
我们现在可以传入值, 这些值将被内部返回的装饰器函数使用｡

01:43.750 --> 01:47.050
因此, 如果我现在保存它, 我们会看到旧的输出,

01:47.050 --> 01:49.940
但这里有我们的自定义日志字符串｡

01:49.940 --> 01:59.973
因此, 使用装饰器工厂可以给我们更多的能力和更多的可能性来配置装饰器在内部做什么｡
