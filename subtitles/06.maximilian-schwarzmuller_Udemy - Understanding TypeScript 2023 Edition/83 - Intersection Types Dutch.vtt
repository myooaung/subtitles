WEBVTT

00:02.310 --> 00:03.143
Instructeur: Voor dit,

00:03.143 --> 00:05.860
ben ik terug in de algemene project opzet waar we eerder aan gewerkt hebben.

00:05.860 --> 00:09.180
Je vindt het in de index. html bestand en

00:09.180 --> 00:10.940
de app. ts bestand.

00:10.940 --> 00:15.410
En daarin wil ik meteen duiken met intersectie types.

00:15.410 --> 00:19.570
Met kruispunttypen kunnen we andere typen combineren.

00:19.570 --> 00:23.280
Laten we zeggen dat we een type admin hebben, wat een objecttype

00:23.280 --> 00:25.430
is, dus nogmaals, dit is niet het maken

00:25.430 --> 00:28.170
van een object hier, we definiëren een type,

00:28.170 --> 00:30.340
dus ik definieer gewoon een type definitie

00:31.200 --> 00:35.560
hier en admin moet een naam hebben, wat een string is, laten we zeggen,

00:35.560 --> 00:38.230
en een admin moet ook privileges hebben, en

00:39.910 --> 00:44.370
dat moet een string array zijn, bijvoorbeeld.

00:44.370 --> 00:47.010
Nu, we hadden dit kunnen maken met een

00:47.010 --> 00:48.950
interface, maar hier doe ik

00:49.810 --> 00:54.470
het met een type en nu heb ik een ander type, algemeen medewerker

00:54.470 --> 00:59.130
type, laten we zeggen, en daar heb ik ook een naam, string.

00:59.130 --> 01:02.890
Ik heb geen voorrecht, maar ik heb een startdatum.

01:02.890 --> 01:04.380
Dat kan van het type datum zijn.

01:04.380 --> 01:07.350
Dat hebben we nog niet eerder gezien, maar datum is een type dat

01:07.350 --> 01:10.340
door het script wordt ondersteund op basis van het data-object

01:10.340 --> 01:12.163
dat in JavaScript is gebouwd.

01:13.730 --> 01:17.580
Dus nu willen we hier een nieuw type creëren, een verhoogde

01:17.580 --> 01:21.120
werknemer, laten we zeggen, die de combinatie moet

01:21.120 --> 01:23.900
zijn van deze twee types.

01:23.900 --> 01:26.470
Natuurlijk zouden we het handmatig kunnen maken

01:26.470 --> 01:28.770
door gewoon een objecttype te definiëren,

01:28.770 --> 01:31.750
dat een naam heeft, dat een begindatum heeft, en dat privileges

01:31.750 --> 01:34.120
heeft, maar als we deze twee types al hebben,

01:34.120 --> 01:37.540
dan kunnen we dit ook gewoon combineren door te zeggen admin en,

01:37.540 --> 01:42.000
dus we gebruiken het ampersand symbool hier, medewerker.

01:42.000 --> 01:44.370
En nu is het resultaat een nieuw objecttype

01:44.370 --> 01:46.390
dat beide moet hebben.

01:46.390 --> 01:50.470
Dus als ik mijn werknemer heb, E één, die van het type verheven

01:50.470 --> 01:54.770
werknemer moet zijn, dan kan ik daarin een object opslaan dat

01:54.770 --> 01:57.440
een name property moet hebben, dat een

01:57.440 --> 02:00.113
privilege property moet hebben, create

02:02.510 --> 02:08.800
server, en dat ook een startdatum moet hebben met nieuwe gegevens.

02:08.800 --> 02:10.070
Creëert een nieuw data-object

02:10.070 --> 02:12.700
dat simpelweg de huidige tijdstempel is.

02:12.700 --> 02:15.610
Dus dit is nu een eenvoudige manier om twee types te combineren.

02:15.610 --> 02:17.740
Nu zal ik zeggen dat intersectietypes

02:17.740 --> 02:21.550
nauw verbonden zijn met interface-overerving,

02:21.550 --> 02:24.320
want natuurlijk hadden we hier hetzelfde

02:24.320 --> 02:28.590
kunnen bereiken door een interface admin en dan een interface

02:29.620 --> 02:32.420
employee te gebruiken, en dan zouden

02:32.420 --> 02:34.700
we ook een intersectietype op

02:34.700 --> 02:38.853
deze interfaces kunnen gebruiken of we maken een derde

02:40.100 --> 02:44.040
interface, verheven employee, die employee en admin

02:47.230 --> 02:50.653
uitbreidt.

02:52.700 --> 02:54.520
Dus als ik dit nu uitcommentaar, zouden

02:54.520 --> 02:56.830
we precies hetzelfde effect hebben.

02:56.830 --> 02:58.550
Dat is misschien wat meer code.

02:58.550 --> 03:01.750
Een reden waarom we hier misschien liever types zouden gebruiken

03:01.750 --> 03:04.280
in plaats van interfaces, maar de relatie ligt zeker

03:04.280 --> 03:06.300
heel dicht bij elkaar en je zou absoluut

03:06.300 --> 03:09.770
interfaces kunnen gebruiken voor dit voorbeeld.

03:09.770 --> 03:13.040
Het is echter vermeldenswaard dat intersectietypes weliswaar

03:13.040 --> 03:15.600
bijzonder nuttig kunnen zijn in combinatie

03:15.600 --> 03:18.240
met objecttypes, zoals wij hier doen, maar dat

03:18.240 --> 03:20.910
u ze met alle types kunt gebruiken.

03:20.910 --> 03:22.683
Dus als je een ander type had,

03:23.655 --> 03:28.450
combineerbaar, laten we zeggen, dat ofwel een string of een getal is, dus we hebben

03:28.450 --> 03:29.940
hier een union type met de

03:29.940 --> 03:32.380
string of getal basis types en dan hadden

03:32.380 --> 03:34.770
we een numeriek type hier, dat ofwel een

03:34.770 --> 03:38.660
getal of een boolean is, welnu, dan zouden we ons, laten we zeggen,

03:38.660 --> 03:43.660
universeel type hier kunnen hebben door combineerbaar te snijden met numeriek

03:43.730 --> 03:48.160
en op het einde, types zouden dan kunnen zien dat het universele natuurlijk

03:48.160 --> 03:49.800
van het type getal is omdat

03:49.800 --> 03:51.950
dat het enige snijpunt is dat we hier

03:51.950 --> 03:54.730
hebben, maar als je meer snijpunten had, dan zou

03:54.730 --> 03:56.520
dit het type zijn dat universeel

03:56.520 --> 03:59.830
wordt toegewezen, dus het zou ook een union type kunnen

03:59.830 --> 04:04.940
zijn, dat is het snijpunt van deze twee union types.

04:04.940 --> 04:07.800
De intersectie-operator kan dus worden

04:07.800 --> 04:11.790
gebruikt met alle types en bouwt dan gewoon het snijpunt

04:11.790 --> 04:12.980
van deze types.

04:12.980 --> 04:14.330
In het geval van een unietype

04:14.330 --> 04:17.300
zijn dat in feite de types die ze gemeen hebben.

04:17.300 --> 04:18.890
In het geval van objecttypen

04:18.890 --> 04:22.220
is het gewoon de combinatie van deze objecteigenschappen,

04:22.220 --> 04:23.510
zeg maar.

04:23.510 --> 04:25.960
Dus dit zijn kruispunttypes.

04:25.960 --> 04:27.360
Kan soms nuttig zijn.

04:27.360 --> 04:29.050
U zult ze niet altijd gebruiken,

04:29.050 --> 04:31.570
maar u kunt zeker situaties tegenkomen waarin

04:31.570 --> 04:35.010
u iets eenvoudiger of korter kunt uitdrukken door gebruik te

04:35.010 --> 04:37.230
maken van intersectietypes.

04:37.230 --> 04:39.520
Om te bewijzen dat dit allemaal werkt, open

04:39.520 --> 04:42.050
ik een nieuw tabblad in mijn terminal en voer ik

04:42.050 --> 04:45.390
TSC dash W uit om de watch mode te starten, zodat ik niet alleen

04:45.390 --> 04:47.770
naar de live server hoef te gaan, maar ook daadwerkelijk

04:47.770 --> 04:49.850
mijn code bouw.

04:49.850 --> 04:51.210
Als ik hier nu een keer herlaad,

04:51.210 --> 04:53.200
zien we dat dit zonder fouten loopt en

04:53.200 --> 04:55.443
ook zonder fouten compileert.
