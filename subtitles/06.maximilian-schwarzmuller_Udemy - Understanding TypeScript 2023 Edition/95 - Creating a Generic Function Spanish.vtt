WEBVTT

00:02.190 --> 00:04.480
Así que para empezar con nuestros propios genéricos.

00:04.480 --> 00:06.820
Aquí abajo el código comentado.

00:06.820 --> 00:09.210
Empezaré con una función genérica.

00:09.210 --> 00:11.430
Puedes construir clases y funciones genéricas,

00:11.430 --> 00:15.350
voy a mostrar ambas y aquí voy a empezar con una función.

00:15.350 --> 00:17.490
Ahora digamos que queremos tener

00:17.490 --> 00:22.490
una función que básicamente fusiona dos objetos y devuelve un nuevo objeto.

00:23.660 --> 00:25.380
Así que aquí podríamos llamarlo "fusión".

00:25.380 --> 00:28.803
Y queremos obtener el objeto A y el objeto B como entrada.

00:30.010 --> 00:33.990
Ahora, por supuesto, podríamos escribir esta función de una manera determinada.

00:33.990 --> 00:36.660
Podríamos decir que esto es de tipo objeto

00:36.660 --> 00:39.033
y esto es de tipo objeto.

00:39.960 --> 00:41.760
Y entonces lo que hace esta función

00:41.760 --> 00:45.200
es que devuelve el resultado de la asignación del objeto.

00:45.200 --> 00:48.130
Donde obtengo el objeto A y el objeto B.

00:48.130 --> 00:50.230
Así que, por supuesto, ya que tenemos este método

00:50.230 --> 00:53.000
de asignación de objetos ya construido en javascript normal.

00:53.000 --> 00:55.820
Podríamos discutir si realmente necesitamos una función de fusión pero, por

00:55.820 --> 00:58.140
supuesto, podría estar haciendo un trabajo adicional aquí.

00:58.140 --> 01:00.480
Podrías enriquecer esto con información

01:00.480 --> 01:01.833
extra, con opciones extra

01:01.833 --> 01:04.730
y al final esto es sólo una demo, sólo un ejemplo.

01:04.730 --> 01:07.510
Así que esto sería válido, podríamos llamar

01:07.510 --> 01:11.830
a la fusión aquí, y el registro de la consola de su resultado, así.

01:11.830 --> 01:15.130
Y luego pasamos un objeto que tiene una clave de nombre

01:15.130 --> 01:17.570
y un segundo objeto que tiene una edad y

01:17.570 --> 01:20.010
si ejecutamos eso y guardamos esto.

01:20.010 --> 01:22.780
Aquí, en el navegador, efectivamente, obtenemos esta salida.

01:22.780 --> 01:24.280
Así que obtenemos este objeto de fusión.

01:24.280 --> 01:27.050
Ahora bien, esto funciona, el

01:27.050 --> 01:29.660
problema que tenemos con eso

01:31.660 --> 01:33.300
es si tratamos de almacenar

01:33.300 --> 01:38.097
este nombre de fusión max, y la edad 30.

01:39.620 --> 01:44.620
Si intentamos almacenar esto aquí, no puedo acceder al nombre en el resultado, no

01:45.770 --> 01:48.730
puedo acceder a la edad en los resultados en este

01:48.730 --> 01:50.020
objeto fusionado.

01:50.020 --> 01:52.360
Aunque sabemos que ambos existirán.

01:52.360 --> 01:54.830
Porque la tipografía no lo sabe.

01:54.830 --> 01:57.100
La tipografía no puede saber esto.

01:57.100 --> 01:59.310
Porque sólo le estamos diciendo, que está recibiendo

01:59.310 --> 02:02.370
un objeto y al final tecleamos primero que devolvemos un objeto.

02:02.370 --> 02:04.790
Que es correcto, pero que no lleva toda

02:04.790 --> 02:07.810
la información que podríamos utilizar aquí.

02:07.810 --> 02:09.970
Ahora, por supuesto, siempre podemos hacer un casting

02:09.970 --> 02:12.080
de tipos, podemos decirle a typescript que lo que obtenemos

02:12.080 --> 02:14.220
es un objeto donde tenemos una clave de nombre y donde

02:14.220 --> 02:15.960
tenemos una clave de edad.

02:15.960 --> 02:19.020
Pero eso es realmente engorroso si tenemos que hacer eso.

02:19.020 --> 02:21.420
Así que aquí, los genéricos pueden ayudarnos.

02:21.420 --> 02:23.750
Lo convertimos en una función genérica añadiendo

02:23.750 --> 02:26.470
estos corchetes después del nombre de la función.

02:26.470 --> 02:29.740
Y luego definimos los identificadores Q.

02:29.740 --> 02:33.190
Normalmente se empieza por T, de tipo.

02:33.190 --> 02:35.600
Pero puedes usar cualquier identificador

02:35.600 --> 02:37.730
aquí, no tiene que ser un solo carácter

02:37.730 --> 02:39.860
pero la convención es usar un solo carácter

02:39.860 --> 02:42.250
y típicamente, si solo tienes un tipo genérico

02:42.250 --> 02:43.690
nombras este T.

02:43.690 --> 02:46.640
Y luego dices, bueno este tipo genérico aquí, esto está ahora

02:46.640 --> 02:48.510
disponible dentro de esta función.

02:48.510 --> 02:51.453
Así que podríamos decir que lo que obtenemos aquí es del tipo T.

02:53.090 --> 02:55.740
Parece extraño, llegaremos sin problemas.

02:55.740 --> 02:57.280
Aquí tenemos dos argumentos

02:57.280 --> 02:59.570
que no sabemos exactamente cómo serán.

02:59.570 --> 03:02.450
Así que aceptaré un segundo tipo genérico aquí.

03:02.450 --> 03:04.340
Simplemente añadiendo una coma en los

03:04.340 --> 03:07.400
paréntesis acodados, Y luego seguimos en el alfabeto.

03:07.400 --> 03:10.490
Y por lo tanto, el segundo parámetro genérico

03:10.490 --> 03:15.490
o tipo que se puede utilizar en una función normalmente se llama U.

03:15.630 --> 03:18.560
Así que podríamos decir que esto es del tipo U.

03:18.560 --> 03:22.100
Bien, ¿qué nos aporta esto?

03:22.100 --> 03:25.450
Bueno mucho en realidad, como se ve con esto solo

03:25.450 --> 03:28.620
si se pasa por encima de la fusión, typescript

03:28.620 --> 03:33.230
infiere que esta función devuelve la intersección de T y U.

03:33.230 --> 03:36.800
Y, por supuesto, también podríamos establecer esto explícitamente así,

03:36.800 --> 03:38.040
pero ni siquiera necesitamos

03:38.040 --> 03:42.010
hacerlo porque object assign devuelve una intersección y, por lo tanto, ya que devolvimos

03:42.010 --> 03:44.150
un resultado de object assign, typescript entiende

03:44.150 --> 03:45.740
automáticamente que esta función

03:45.740 --> 03:48.390
devuelve la intersección.

03:48.390 --> 03:50.320
Entonces, ¿de qué sirve esto?

03:50.320 --> 03:52.510
Bien, si ahora pasamos por encima del objeto

03:52.510 --> 03:54.260
fusionado vemos que ahora con este

03:54.260 --> 03:56.450
solo typescript entiende que lo que almacenamos

03:56.450 --> 03:59.230
en el objeto fusionado es la intersección de estos dos

03:59.230 --> 04:01.690
tipos de objetos, porque ve que estamos pasando

04:01.690 --> 04:04.220
estos objetos, que son de estos tipos de objetos

04:04.220 --> 04:06.100
que infiere.

04:06.100 --> 04:08.840
Cadena de nombre y número de edad.

04:08.840 --> 04:11.590
Y que nuestra función devuelve la intersección.

04:11.590 --> 04:13.630
¿Por qué es capaz de inferir esto ahora

04:13.630 --> 04:16.313
y no con el objeto que teníamos antes?

04:17.220 --> 04:19.560
Porque el objeto es un tipo muy inespecífico.

04:19.560 --> 04:22.490
Decimos cualquier objeto y sí por lo tanto typescript

04:22.490 --> 04:24.530
es capaz de inferir que devolvemos la

04:24.530 --> 04:26.600
intersección de objeto y objeto.

04:26.600 --> 04:29.570
Pero la intersección de dos objetos desconocidos es

04:29.570 --> 04:32.270
sólo un nuevo objeto desconocido que no ofrece ninguna

04:32.270 --> 04:35.420
información de tipo adicional a typescript.

04:35.420 --> 04:38.170
Con los tipos genéricos, lo que estamos diciendo

04:38.170 --> 04:43.170
a typescript es que, estos dos parámetros pueden y a menudo serán de diferentes

04:43.282 --> 04:47.100
tipos y por lo tanto typescript es capaz de entender que no

04:47.100 --> 04:49.690
estamos trabajando con algún tipo de objeto

04:49.690 --> 04:53.150
al azar, sino que obtendremos datos de diferentes tipos

04:53.150 --> 04:55.250
aquí.

04:55.250 --> 04:56.940
Y que esta función en general

04:56.940 --> 04:59.770
devolverá la intersección de esos datos.

04:59.770 --> 05:01.773
Y por lo tanto typescript es capaz de entender

05:01.773 --> 05:04.390
que lo que almacenamos aquí en el objeto fusionado

05:04.390 --> 05:07.910
es tal intersección de los datos de estas dos entradas.

05:07.910 --> 05:09.530
Porque ahora no se trata

05:09.530 --> 05:14.423
de objetos desconocidos, sino de tipos muy concretos.

05:15.330 --> 05:20.150
Y por lo tanto ahora si registro en la consola la edad del objeto fusionado aquí esto

05:20.150 --> 05:22.980
funciona sin errores como se puede decir.

05:22.980 --> 05:26.770
Aquí estoy imprimiendo 30 por los tipos genéricos.

05:26.770 --> 05:29.040
Estamos dando typescript la información

05:29.040 --> 05:31.950
extra que no sabemos exactamente los tipos será seguro,

05:31.950 --> 05:34.780
habrá objetos aquí podemos decir que.

05:34.780 --> 05:36.550
Pero no sabemos si es un objeto con clave de nombre,

05:36.550 --> 05:38.640
con clave de edad, con clave de aficiones.

05:38.640 --> 05:41.130
No sabemos y no nos importa, no nos importa

05:41.130 --> 05:43.360
el objeto exacto aquí, no queremos especificar

05:43.360 --> 05:46.050
que esto tiene que ser de este tipo.

05:46.050 --> 05:47.490
Porque entonces, de repente,

05:47.490 --> 05:50.520
si añado aficiones ahí, tendríamos un problema.

05:50.520 --> 05:52.540
Así que no quiero ser tan restrictivo.

05:52.540 --> 05:54.480
Sólo quiero decir que esto es de cualquier

05:54.480 --> 05:56.940
tipo que no me importa, pero es más probable que un tipo

05:56.940 --> 05:58.590
diferente entonces de este aquí.

05:58.590 --> 06:00.860
Y si fuera lo mismo también estaría bien.

06:00.860 --> 06:03.030
Pero typescript entiende que aquí tenemos

06:03.030 --> 06:06.530
tipos específicos para estos dos parámetros y que devolvemos

06:06.530 --> 06:08.800
la intersección de los mismos.

06:08.800 --> 06:12.660
En lugar de tener cualquier objeto inespecífico aquí.

06:12.660 --> 06:14.770
Ahora específicamente la magia aquí no es

06:14.770 --> 06:16.210
sólo que le decimos a typescript

06:16.210 --> 06:18.410
que tenemos dos tipos diferentes aquí.

06:18.410 --> 06:20.740
Pero que estos tipos no se fijan en piedra cuando

06:20.740 --> 06:22.870
definimos esta función, sino que se fijan

06:22.870 --> 06:25.810
dinámicamente cuando llamamos a la función.

06:25.810 --> 06:27.430
Así que aquí estamos llamando a la

06:27.430 --> 06:30.560
función y typescript infiere los tipos para los dos argumentos.

06:30.560 --> 06:33.890
Para T, básicamente rellena un tipo de objeto con una propiedad

06:33.890 --> 06:36.677
nombre que contiene una cadena y una propiedad aficiones

06:36.677 --> 06:39.600
que contiene una matriz de cadenas.

06:39.600 --> 06:43.290
Y para U rellena un tipo de objeto con la

06:43.290 --> 06:47.990
propiedad edad donde la edad es de tipo número.

06:47.990 --> 06:51.030
Ahora, cuando llamamos a esta función de nuevo en

06:51.030 --> 06:53.890
otra línea y pasamos diferentes objetos y almaceno

06:53.890 --> 06:57.090
esto en una nueva constante con un nuevo nombre, entonces,

06:57.090 --> 06:59.920
por supuesto, se rellenan diferentes tipos para

06:59.920 --> 07:03.130
T y U para esta llamada a la función.

07:03.130 --> 07:05.350
También puedes decirle específicamente

07:05.350 --> 07:07.780
a typescript qué tipos debe rellenar añadiendo

07:07.780 --> 07:09.110
paréntesis angulares después

07:09.110 --> 07:11.320
del nombre de la función cuando la llames

07:11.320 --> 07:13.010
y entonces rellenarías tus propios

07:13.010 --> 07:15.200
tipos para T y U.

07:15.200 --> 07:18.030
Podríamos decirle a typescript que T debe ser del tipo string

07:18.030 --> 07:20.180
para esta llamada a la función y U debe ser del tipo

07:20.180 --> 07:22.710
number, pero entonces, por supuesto, typescript se quejaría

07:22.710 --> 07:23.950
de los valores concretos que

07:23.950 --> 07:25.940
estamos pasando aquí.

07:25.940 --> 07:28.270
Porque esto claramente no es una cadena

07:28.270 --> 07:30.190
y si lo arregláramos, esto claramente

07:30.190 --> 07:32.280
no sería de tipo número.

07:32.280 --> 07:34.650
Así que aquí podríamos ser muy específicos

07:34.650 --> 07:38.620
y decir bueno, el primer argumento o el tipo T para ser precisos para

07:38.620 --> 07:41.700
esta llamada a la función aquí será un tipo de objeto

07:41.700 --> 07:45.310
donde tenemos una propiedad nombre que es de tipo cadena y una

07:45.310 --> 07:48.850
propiedad aficiones que es de tipo array de cadenas.

07:48.850 --> 07:52.970
Y el tipo concreto para U, para esta llamada a la función será un objeto

07:52.970 --> 07:55.800
donde tenemos una propiedad edad que debe ser

07:55.800 --> 07:57.320
de tipo número.

07:57.320 --> 08:00.220
Y ahora estaríamos bien y ya no habría

08:00.220 --> 08:02.730
errores y esto funcionaría.

08:02.730 --> 08:05.060
Pero esto es redundante, usted puede absolutamente

08:05.060 --> 08:07.310
hacer eso y es importante entender que esto

08:07.310 --> 08:10.070
es al final lo que los genéricos se trata de que usted

08:10.070 --> 08:12.990
puede llenar en diferentes tipos concretos para diferentes

08:12.990 --> 08:15.170
llamadas a la función.

08:15.170 --> 08:16.930
Pero no necesitamos hacer eso aquí porque

08:16.930 --> 08:20.110
typescript simplemente infiere los tipos de los valores que estamos

08:20.110 --> 08:22.170
pasando como argumentos aquí.

08:22.170 --> 08:25.120
Y luego coloca los tipos inferidos para

08:25.120 --> 08:28.240
T y U para esta llamada a la función.

08:28.240 --> 08:31.283
Así es como funcionan los genéricos entre bastidores al final.
