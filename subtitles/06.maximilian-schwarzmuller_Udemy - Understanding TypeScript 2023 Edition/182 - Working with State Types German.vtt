WEBVTT

00:02.260 --> 00:03.920
Explainer: Es ist Zeit für eine Zustandsverwaltung

00:03.920 --> 00:05.340
in der App-Komponente, denn wenn wir das

00:05.340 --> 00:07.240
Array auf diese Weise aktualisieren, wird die Komponente

00:07.240 --> 00:08.880
nicht neu gerendert.

00:08.880 --> 00:10.530
Das ist die Funktionsweise von React.

00:10.530 --> 00:12.590
In unserer Funktionskomponente können wir

00:12.590 --> 00:15.000
den Status mit dem useState-Hook verwalten.

00:15.000 --> 00:16.820
Und noch einmal: Wenn Sie das nicht wissen

00:16.820 --> 00:18.750
oder wenn Ihnen Zustands- oder Funktionskomponenten

00:18.750 --> 00:21.120
oder Hooks nichts sagen, sehen Sie sich auf jeden Fall

00:21.120 --> 00:23.810
einige spezielle React-Ressourcen an, wie z.B. meinen

00:23.810 --> 00:26.480
Kurs React, the complete guide.

00:26.480 --> 00:29.870
So, jetzt möchte ich meine Todos hier mit Status verwalten, und

00:29.870 --> 00:31.760
dafür werde ich das Dummy-Todo löschen,

00:31.760 --> 00:33.060
mit dem ich begonnen habe,

00:33.060 --> 00:36.430
und stattdessen den Status durch den Aufruf von useState initialisieren

00:36.430 --> 00:39.080
und dazu kann ich mein leeres Array als Startstatuswert

00:39.080 --> 00:41.210
übergeben, so dass mein Status anfangs

00:41.210 --> 00:44.510
ein leeres Array ist.

00:44.510 --> 00:47.100
Jetzt gibt useState immer ein Array mit

00:47.100 --> 00:49.370
genau zwei Elementen zurück.

00:49.370 --> 00:52.070
Das erste Element ist der letzte Status-Snapshot für

00:52.070 --> 00:53.630
diesen Rendering-Zyklus.

00:53.630 --> 00:55.070
Das zweite Argument, das zweite

00:55.070 --> 00:56.720
Element im Array, ist eine Funktion,

00:56.720 --> 00:58.860
mit der dieser Zustand aktualisiert und die

00:58.860 --> 01:01.110
Komponente neu dargestellt wird.

01:01.110 --> 01:02.660
Mit Hilfe der Array-Umstrukturierung,

01:02.660 --> 01:05.060
die wir bereits im Kurs gelernt haben, können wir diese

01:05.060 --> 01:07.060
beiden Elemente herausziehen und in separaten

01:07.060 --> 01:09.230
Konstanten speichern.

01:09.230 --> 01:10.900
Und dann haben wir hier die ToDos und

01:10.900 --> 01:13.103
sagen wir eine Funktion namens setTodos.

01:14.920 --> 01:16.820
Damit erhalten wir immer noch unsere

01:16.820 --> 01:19.530
todos Array und jetzt hier in der todoAddHandler,

01:19.530 --> 01:21.480
möchte ich setTodos aufrufen und meine

01:21.480 --> 01:24.430
todos Array zu einem neuen Array, das die neue todoText

01:24.430 --> 01:27.373
hinzugefügt hat, um es zu setzen.

01:28.240 --> 01:29.283
Dafür können wir natürlich

01:30.400 --> 01:32.130
ein neues Array übergeben und

01:32.130 --> 01:34.100
ein neues Objekt hinzufügen, sagen

01:34.100 --> 01:36.530
wir mit einer ID, wobei wir eine zufällige

01:36.530 --> 01:42.530
ID mit Math erstellen.

01:42.530 --> 01:42.530
random(). toString.

01:42.530 --> 01:44.830
Es ist nicht wirklich einzigartig, aber gut genug hier,

01:44.830 --> 01:46.620
und wo wir dann auch unseren Text haben, der

01:46.620 --> 01:48.760
dieser Textwert ist, den ich hier bekomme.

01:48.760 --> 01:51.910
Aber seltsamerweise erhalte ich hier eine Fehlermeldung.

01:51.910 --> 01:54.790
Der Fehler, den wir erhalten, ist, dass dieses

01:54.790 --> 01:56.860
Argument nicht zuweisbar ist.

01:56.860 --> 01:59.630
Nun, im Grunde in etwas, das erwartet,

01:59.630 --> 02:01.970
ein Array von nichts zu haben.

02:01.970 --> 02:03.590
Und das ist natürlich nicht das, was Sie hier wollen.

02:03.590 --> 02:06.010
Wir wollen nicht, dass unser Staat eine Ansammlung von Nichts ist.

02:06.010 --> 02:07.110
Warum ist das so?

02:07.950 --> 02:11.800
Wenn ich useState mit einem leeren Array initialisiere, folgert TypeScript,

02:11.800 --> 02:15.040
wie unser Zustand aussehen wird. Wenn ich dies mit einem String

02:15.040 --> 02:17.060
initialisiere, würde TypeScript folgern,

02:17.060 --> 02:20.130
dass mein Zustand ein String ist.

02:20.130 --> 02:23.010
Wenn ich dies also vorübergehend entferne und einen Text einfüge,

02:23.010 --> 02:24.123
wird er akzeptiert.

02:25.160 --> 02:26.137
Wenn ich es in einem Array

02:26.137 --> 02:28.260
übergebe, erwartet TypeScript, dass es ein Array

02:28.260 --> 02:30.080
ist, aber kein Array von irgendetwas, sondern

02:30.080 --> 02:32.000
im Grunde immer ein leeres Array.

02:32.000 --> 02:36.070
Also eine Reihe von nichts, was ich hier natürlich nicht will.

02:36.070 --> 02:38.050
Um dies zu beheben, müssen wir React mitteilen,

02:38.050 --> 02:40.460
wie unser Anwesen im Laufe der Zeit aussehen wird.

02:40.460 --> 02:42.920
Und dafür können wir wiederum verwenden, dass useState

02:42.920 --> 02:44.630
eine generische Funktion ist, weil

02:44.630 --> 02:48.080
wir die Struktur unseres Anwesens übergeben können.

02:48.080 --> 02:51.240
Also, welche Art von Daten unser Zustand ist, und dort können

02:51.240 --> 02:54.200
wir in, dass unser Zustand sollte ein Array von Objekten,

02:54.200 --> 02:56.253
um genau zu sein und Array von Objekten,

02:57.210 --> 02:59.570
wo wir eine ID-Eigenschaft, die eine Zeichenfolge

02:59.570 --> 03:02.750
ist, und eine Text-Eigenschaft, die eine Zeichenfolge

03:02.750 --> 03:04.860
ist.

03:04.860 --> 03:08.050
Und jetzt ist diese Statusaktualisierung erlaubt.

03:08.050 --> 03:10.100
Es ist natürlich in Ordnung, dies hier zu schreiben, aber da wir es

03:10.100 --> 03:12.410
an verschiedenen Stellen in der Anwendung benötigen, werde ich eine neue

03:12.410 --> 03:16.710
Datei erstellen und diese Todo nennen. Modell. ts.

03:16.710 --> 03:18.210
Der Dateiname ist Ihnen überlassen.

03:18.210 --> 03:19.940
Und hier möchte ich im Grunde eine Schnittstelle

03:19.940 --> 03:21.710
mit dem Namen Todo exportieren, in der ich

03:21.710 --> 03:24.080
einfach nur beschreiben möchte, wie unsere Todo-ID

03:24.080 --> 03:25.440
in meiner Anwendung aussehen soll,

03:25.440 --> 03:27.430
dass ich eine ID vom Typ String und eine Texteigenschaft

03:27.430 --> 03:30.190
vom Typ String haben möchte.

03:30.190 --> 03:34.420
Und wenn wir das hier in die App-Komponente exportiert haben, können

03:34.420 --> 03:35.900
wir das importieren, also

03:35.900 --> 03:42.543
hier können wir Todo aus .

03:42.543 --> 03:42.543
/todo. Modell.

03:43.900 --> 03:46.720
Und hier haben wir dann einfach ein Array von ToDos,

03:46.720 --> 03:49.550
das natürlich kürzer und einfacher zu lesen ist.

03:49.550 --> 03:51.480
Und jetzt funktioniert unsere Statusaktualisierung immer

03:51.480 --> 03:52.870
noch, aber sie ist ein bisschen sauberer.

03:52.870 --> 03:55.100
Und das ist, wie Sie sehen, wirklich wichtig,

03:55.100 --> 03:57.210
wenn Sie mit etwas wie einem Array arbeiten,

03:57.210 --> 03:59.170
in dem Inhaltstypen für die Art der Daten

03:59.170 --> 04:01.860
gespeichert werden sollen, wenn Sie es mit einem leeren

04:01.860 --> 04:04.270
Array initialisieren.

04:04.270 --> 04:06.250
Mit diesem aber funktioniert es.

04:06.250 --> 04:07.450
Der Nachteil ist natürlich,

04:07.450 --> 04:09.910
dass unsere Zustandsaktualisierungslogik hier

04:09.910 --> 04:13.670
nicht korrekt ist, denn im Moment überschreibe ich immer das bestehende Array

04:13.670 --> 04:17.400
von Todos mit einem neuen Array, das nur genau ein Element hat.

04:17.400 --> 04:20.110
Stattdessen möchte ich es mit einem neuen Array überschreiben,

04:20.110 --> 04:23.730
das alle alten Elemente sowie das neue Element enthält.

04:23.730 --> 04:26.583
Lassen Sie uns also diese Logik in der nächsten Vorlesung anpassen.
