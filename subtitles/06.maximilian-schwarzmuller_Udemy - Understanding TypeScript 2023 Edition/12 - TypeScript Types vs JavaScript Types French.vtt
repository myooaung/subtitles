WEBVTT

00:00.000 --> 00:02.410
(silence) - : Nous voyons donc déjà comment

00:02.410 --> 00:04.190
TypeScript peut nous aider pendant

00:04.190 --> 00:06.200
le développement.

00:06.200 --> 00:10.560
Maintenant, nous savons également qu'il existe un type de nombre en JavaScript.

00:10.560 --> 00:14.010
Et nous pouvons le voir avec le type d'opérateur intégré.

00:14.010 --> 00:15.781
Il ne s'agit pas d'une spécificité de

00:15.781 --> 00:17.560
TypeScript, mais d'un opérateur intégré

00:17.560 --> 00:20.420
et d'un mot-clé pris en charge par JavaScript.

00:20.420 --> 00:22.910
Nous pouvons l'utiliser pour obtenir le type d'une certaine valeur.

00:22.910 --> 00:27.050
Donc ici, nous pourrions consigner le type de serrure du numéro un.

00:27.050 --> 00:27.992
Et ce que nous verrons

00:27.992 --> 00:30.780
si nous faisons cela, c'est que dès que nous compilerons ceci,

00:30.780 --> 00:32.623
nous exécuterons le code mis à jour.

00:33.780 --> 00:37.040
Ici, nous imprimons le nombre dans la console.

00:37.040 --> 00:39.330
Maintenant nous faisons cela, grâce à cette sortie

00:39.330 --> 00:41.180
ici, et grâce au type d'opérateur et dans

00:41.180 --> 00:43.770
Vanilla JavaScript, sans TypeScript, nous pourrions utiliser

00:43.770 --> 00:46.710
cela pour toujours améliorer notre fonction ici.

00:46.710 --> 00:51.500
On peut vérifier si le type de nombre est égal au nombre.

00:51.500 --> 00:54.300
Excusez-moi, le type de n1, je veux dire, s'il

00:54.300 --> 00:56.350
est égal à un nombre, et nous pourrions

00:56.350 --> 01:00.710
également vérifier si le type de n2 est égal à un nombre.

01:00.710 --> 01:02.349
et n'effectuer notre opération

01:02.349 --> 01:05.220
ici que s'il s'agit d'une erreur autrement jetée

01:05.220 --> 01:07.860
ou faire le contraire et vérifier s'il n'est

01:07.860 --> 01:10.820
pas égal, ou si n2 n'est pas égal.

01:10.820 --> 01:13.230
Et si l'un des deux n'est pas un nombre, alors

01:13.230 --> 01:16.360
nous pourrions lancer une nouvelle erreur où nous dirions,

01:16.360 --> 01:19.690
entrée incorrecte. Il s'agit en fait d'un moyen

01:19.690 --> 01:22.300
non TypeScript de s'assurer que nous ne pouvons

01:22.300 --> 01:25.700
pas appeler cette fonction avec une chaîne ici.

01:25.700 --> 01:26.760
Si je fais cela maintenant,

01:26.760 --> 01:29.060
et que je recompile, nous obtenons notre erreur TypeScript,

01:29.060 --> 01:30.830
mais ignorons cela pour le moment.

01:30.830 --> 01:31.730
Si on réexécute ça,

01:31.730 --> 01:33.100
on obtient une entrée incorrecte,

01:33.100 --> 01:34.940
qu'on lance nous-mêmes.

01:34.940 --> 01:38.080
Nous avons donc renforcé le dysfonctionnement en JavaScript, il

01:38.080 --> 01:39.930
échoue au moment de l'exécution, mais l'échec

01:39.930 --> 01:41.970
peut être préférable à l'affichage d'une sortie

01:41.970 --> 01:44.950
incorrecte, comme c'était le cas auparavant.

01:44.950 --> 01:47.640
Il s'agit donc d'un moyen de vérifier les entrées

01:47.640 --> 01:48.715
en JavaScript.

01:48.715 --> 01:50.640
Vous n'avez pas besoin de TypeScript pour cela.

01:50.640 --> 01:53.200
C'est du code JavaScript normal.

01:53.200 --> 01:54.033
Mais bien sûr, cette approche

01:54.033 --> 01:55.160
a des inconvénients.

01:55.160 --> 01:57.160
Parfois, c'est la bonne chose à faire.

01:57.160 --> 02:01.440
Parfois, vous ne pouvez valider que certaines entrées au moment de l'exécution.

02:01.440 --> 02:03.150
Mais l'inconvénient est qu'ici,

02:03.150 --> 02:05.480
nous vérifions quelque chose que nous pouvons

02:05.480 --> 02:08.950
en fait éviter pendant le développement avec TypeScript.

02:08.950 --> 02:11.180
Donc oui, on jette une erreur.

02:11.180 --> 02:14.210
Et dans notre application, nous pourrions avoir intégré des mesures

02:14.210 --> 02:16.860
qui peuvent ensuite se rabattre sur un autre comportement

02:16.860 --> 02:19.080
pour sauver l'application en cours.

02:19.080 --> 02:20.750
Mais quand même, nous lançons une erreur,

02:20.750 --> 02:24.180
qui n'est pas vraiment nécessaire pour se produire en premier lieu.

02:24.180 --> 02:27.350
Nous aurions pu l'éviter avec TypeScript.

02:27.350 --> 02:28.830
Et ici, nous voyons vraiment la différence

02:28.830 --> 02:30.400
entre JavaScript et TypeScript, quand

02:30.400 --> 02:31.450
il s'agit de types.

02:31.450 --> 02:33.750
JavaScript est typée dynamiquement, ce qui signifie

02:33.750 --> 02:35.610
qu'il est tout à fait possible d'avoir

02:35.610 --> 02:36.880
une variable qui contient

02:36.880 --> 02:39.100
initialement un nombre et à laquelle on attribue

02:39.100 --> 02:41.600
ensuite une chaîne de caractères.

02:41.600 --> 02:44.500
C'est la raison pour laquelle nous avons besoin de l'opérateur

02:44.500 --> 02:48.024
type off afin de pouvoir vérifier le type actuel de quelque chose

02:48.024 --> 02:50.124
au moment de l'exécution si le code dépend

02:50.124 --> 02:52.267
d'un certain type.

02:52.267 --> 02:53.570
TypeScript, en revanche,

02:53.570 --> 02:55.094
est typée de manière statique,

02:55.094 --> 02:58.480
ce qui signifie que nous définissons les types de variables

02:58.480 --> 03:01.740
et de paramètres finis pendant le développement, ils ne changent

03:01.740 --> 03:04.980
pas soudainement pendant l'exécution.

03:04.980 --> 03:05.813
Maintenant, bien

03:05.813 --> 03:09.090
sûr, puisque TypeScript est compilé en JavaScript, ils pourraient

03:09.090 --> 03:10.660
théoriquement le faire.

03:10.660 --> 03:12.510
Mais si nous utilisons TypeScript, et que

03:12.510 --> 03:13.790
nous écrivons du code où nous

03:13.790 --> 03:17.530
assignons soudainement un nouveau type de données dans une variable, alors que

03:17.530 --> 03:18.810
nous avions précédemment dit

03:18.810 --> 03:19.840
que cela devait être un

03:19.840 --> 03:22.900
nombre, par exemple, et que maintenant nous assignons une chaîne

03:22.900 --> 03:25.810
de caractères, alors nous obtenons une erreur pendant le développement,

03:25.810 --> 03:27.480
de sorte que nous sommes obligés d'être

03:27.480 --> 03:29.670
clairs concernant les types, quelque chose peut

03:29.670 --> 03:32.120
ou ne peut pas contenir.

03:32.120 --> 03:33.710
C'est la différence ici.

03:33.710 --> 03:36.620
Nous ne voulons donc pas vraiment utiliser des implémentations

03:36.620 --> 03:38.330
ou des solutions de ce type, si nous

03:38.330 --> 03:40.810
pouvons l'éviter avec TypeScript.

03:40.810 --> 03:42.200
Pourtant, il est important

03:42.200 --> 03:43.890
de savoir que JavaScript connaît

03:43.890 --> 03:46.400
bien sûr le concept des types.

03:46.400 --> 03:48.740
Il connaît certains types comme les nombres, les

03:48.740 --> 03:50.640
chaînes de caractères et les booléens.

03:50.640 --> 03:52.300
Mais l'utiliser signifie toujours que

03:52.300 --> 03:53.540
nous ne pouvons échouer qu'au

03:53.540 --> 03:56.400
moment de l'exécution et non pendant le développement, ce qui est

03:56.400 --> 03:58.700
mieux pour nous en tant que développeur.

03:58.700 --> 04:01.550
Cela nous permet de corriger les bogues plus tôt.

04:01.550 --> 04:02.840
Et en plus, JavaScript

04:02.840 --> 04:05.410
ne connaît que quelques types.

04:05.410 --> 04:07.170
Comme vous l'apprendrez tout au long de ce cours.

04:07.170 --> 04:10.540
TypeScript connaît beaucoup plus de types que JavaScript.

04:10.540 --> 04:14.450
Ainsi, la vérification au moment de l'exécution n'est pas vraiment aussi flexible

04:14.450 --> 04:18.030
ou aussi puissante que ce que nous pouvons faire avec TypeScript.

04:18.030 --> 04:19.490
Et pour toutes ces raisons, cette

04:19.490 --> 04:20.660
approche n'est en fait pas

04:20.660 --> 04:22.550
celle que nous voulons utiliser ici.

04:22.550 --> 04:26.540
Parfois, il peut être utile d'obtenir le type au moment de l'exécution.

04:26.540 --> 04:28.790
Mais parfois, comme dans cet exemple, il est

04:28.790 --> 04:31.740
préférable de l'obtenir pendant le développement.

04:31.740 --> 04:34.280
La seule chose importante à reconnaître bien sûr, c'est

04:34.280 --> 04:36.070
juste qu'avec TypeScript, vous n'obtenez

04:36.070 --> 04:38.670
le soutien que pendant le développement, pas au moment de

04:38.670 --> 04:39.596
l'exécution, parce que

04:39.596 --> 04:41.610
ces fonctionnalités et contrôles TypeScript

04:41.610 --> 04:44.650
ne sont pas intégrés dans le moteur JavaScript de sorte que la logique

04:44.650 --> 04:47.590
ne peut pas s'exécuter dans le navigateur, elle ne peut s'exécuter

04:47.590 --> 04:49.416
que pendant le développement lorsque vous

04:49.416 --> 04:51.223
compilez votre code.
