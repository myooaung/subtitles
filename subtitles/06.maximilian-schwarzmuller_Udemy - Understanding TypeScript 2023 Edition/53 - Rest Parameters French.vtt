WEBVTT

00:02.060 --> 00:04.880
Homme : Les paramètres de repos sont en quelque sorte

00:04.880 --> 00:07.060
liés à l'opérateur de diffusion.

00:07.060 --> 00:10.374
Et pour cela, je vais à nouveau modifier ma fonction d'ajout.

00:10.374 --> 00:13.870
Donc je vais commenter tout ce code ici pour

00:13.870 --> 00:15.780
que rien ne soit cassé.

00:15.780 --> 00:20.520
Et réintroduisez ma fonction d'ajout avec la syntaxe que vous voulez, avec le mot-clé

00:20.520 --> 00:22.760
de fonction comme fonction de flèche, comme

00:22.760 --> 00:23.830
vous voulez.

00:23.830 --> 00:26.360
Mais maintenant, je veux avoir une fonction spéciale.

00:26.360 --> 00:29.100
Je ne veux pas le limiter à deux valeurs, je veux

00:29.100 --> 00:31.340
pouvoir ajouter autant de valeurs que

00:31.340 --> 00:33.290
l'utilisateur en saisit.

00:33.290 --> 00:37.700
Ainsi, nous pouvons essentiellement appeler l'addition comme ceci,

00:37.700 --> 00:42.700
cinq, dix, deux, trois point sept, et ainsi de suite, avec autant de valeurs que

00:42.880 --> 00:44.530
vous le souhaitez.

00:44.530 --> 00:46.691
Si vous souhaitez l'appeler avec 10 valeurs, cela devrait

00:46.691 --> 00:48.090
également être possible.

00:48.090 --> 00:51.160
Mais maintenant, bien sûr, ce n'est pas possible, comme vous

00:51.160 --> 00:52.600
pouvez le voir clairement.

00:52.600 --> 00:54.290
Typescript me donne une erreur,

00:54.290 --> 00:57.760
et à juste titre, car je n'accepte aucun argument ici.

00:57.760 --> 01:00.336
Maintenant, bien sûr, je pourrais accepter les arguments ici

01:00.336 --> 01:02.210
et attribuer les types corrects, mais que se

01:02.210 --> 01:04.300
passe-t-il si je l'appelle ensuite avec cinq.

01:04.300 --> 01:06.330
Comme je l'ai dit, je veux être flexible.

01:06.330 --> 01:08.850
C'est là que les paramètres de repos entrent en jeu.

01:08.850 --> 01:13.111
À l'endroit où vous attendez une liste de valeurs, donc pas à l'endroit où vous voulez

01:13.111 --> 01:15.270
la transmettre, mais à l'endroit où vous

01:15.270 --> 01:18.308
voulez l'accepter en tant que valeurs entrantes, vous pouvez

01:18.308 --> 01:20.360
également utiliser les trois points, puis

01:20.360 --> 01:24.043
n'importe quel nom de votre choix, comme des chiffres.

01:25.630 --> 01:27.430
Maintenant, ce que cela va

01:27.430 --> 01:31.470
faire, c'est de fusionner tous les paramètres entrants,

01:31.470 --> 01:34.920
ou généralement la liste des valeurs entrantes,

01:34.920 --> 01:39.350
liste de valeurs séparées par des virgules dans un tableau.

01:39.350 --> 01:40.940
Donc les nombres ici seront un tableau,

01:40.940 --> 01:44.460
mais bien sûr par défaut un type de valeurs quelconques, donc un tableau plein

01:44.460 --> 01:46.920
de valeurs quelconques, et ce n'est pas ce que nous devrions

01:46.920 --> 01:48.300
faire, nous devrions être plus

01:48.300 --> 01:49.680
explicites.

01:49.680 --> 01:53.200
Et ici, nous pourrions dire : "Ce sera un tableau de chiffres. Comme ça.

01:53.200 --> 01:54.430
Nous avons donc défini le bon type et pouvons

01:54.430 --> 01:56.420
maintenant travailler avec ce tableau de chiffres.

01:56.420 --> 01:58.710
On peut résumer cela de plusieurs manières différentes.

01:58.710 --> 02:01.880
Nous pouvons travailler avec une variable de résultat et ensuite une boucle

02:01.880 --> 02:04.110
de quatre parce que les nombres sont un tableau.

02:04.110 --> 02:06.863
Donc ici, nous pourrions boucler sur les nombres

02:06.863 --> 02:09.260
et les ajouter au résultat.

02:09.260 --> 02:11.519
Ou nous utilisons la méthode reduce qui est disponible sur les tableaux.

02:11.519 --> 02:15.620
La réduction fonctionne de telle sorte qu'elle effectue une opération

02:15.620 --> 02:19.030
sur chaque élément d'un tableau, renvoie un résultat, puis

02:19.030 --> 02:20.940
additionne ces résultats.

02:20.940 --> 02:24.310
Pour cela, vous fournissez une fonction à réduire et ensuite

02:24.310 --> 02:27.160
une valeur de départ qui, ici, est zéro.

02:27.160 --> 02:31.093
Et puis cette fonction que vous passez à la réduction elle-même

02:31.093 --> 02:33.430
prend deux arguments et c'est le résultat

02:33.430 --> 02:35.920
actuel, on pourrait dire.

02:35.920 --> 02:38.968
Et c'est la valeur actuelle que nous regardons,

02:38.968 --> 02:42.640
qui sera chaque valeur du tableau ones.

02:42.640 --> 02:45.350
Et puis ici vous pouvez retourner cuResult, qui pour

02:45.350 --> 02:48.290
la première exécution sera cette valeur initiale ici.

02:48.290 --> 02:51.497
Plus curValue.

02:51.497 --> 02:52.703
Et si vous faites cela, la réduction globale ici retournera un nombre.

02:53.859 --> 02:57.920
Donc, ici, nous pouvons renvoyer le résultat des nombres réduits

02:57.920 --> 03:01.160
et donc la variable add, ou constante ici, sera en

03:01.160 --> 03:04.790
fin de compte une fonction qui prend un couple de nombres,

03:04.790 --> 03:07.320
pas un tableau de nombres.

03:07.320 --> 03:10.650
Mais à cause du reste des paramètres, une liste de nombres,

03:10.650 --> 03:13.690
qui est ensuite fusionnée dans un tableau à l'intérieur

03:13.690 --> 03:16.510
de la fonction et qui renvoie le nombre à la fin.

03:16.510 --> 03:18.550
Donc, pour l'instant, si nous sauvegardons

03:18.550 --> 03:20.350
tout, tout devrait fonctionner et nous

03:20.350 --> 03:23.350
voyons le résultat, la somme de notre petite addition ici.

03:23.350 --> 03:26.250
Voilà donc les paramètres de repos, une fonctionnalité

03:26.250 --> 03:28.430
très utile pour accepter un nombre

03:28.430 --> 03:31.400
illimité d'arguments.

03:31.400 --> 03:34.210
Et quelques méthodes intégrées, comme la méthode "push",

03:34.210 --> 03:36.680
fonctionnent exactement de cette manière.

03:36.680 --> 03:38.540
Vous voyez, Push ici a cette étrange définition de paramètre.

03:38.540 --> 03:42.560
Et bien c'est exactement ce que nous venons d'apprendre.

03:42.560 --> 03:44.250
Push ici prend quelques éléments

03:44.250 --> 03:48.490
pour ce tableau, qui est un tableau rempli de chaînes de caractères.

03:48.490 --> 03:50.400
Il faut quelques cordes.

03:50.400 --> 03:51.730
Et cela ne signifie pas qu'il prend

03:51.730 --> 03:54.060
un tableau de chaînes de caractères, mais plutôt ici wit

03:54.060 --> 03:56.400
le reste des paramètres, une liste de chaînes de caractères

03:56.400 --> 03:58.580
séparées par des virgules, qui ins out of porch est ensuite

03:58.580 --> 04:01.260
fusionné dans un tableau et géré en interne.

04:01.260 --> 04:03.100
C'est le reste des paramètres syntaxiques.

04:03.100 --> 04:06.276
Vous pouvez même combiner cela avec des tuples, d'ailleurs.

04:06.276 --> 04:10.370
Si vous savez que vous voulez prendre en charge plusieurs arguments

04:10.370 --> 04:15.370
mais que vous savez combien il y en aura, donc si ce n'est pas une liste illimitée,

04:16.520 --> 04:18.420
alors vous pouvez aussi utiliser

04:18.420 --> 04:20.392
un type tuple.

04:20.392 --> 04:23.430
Et dites par exemple : "J'accepte mes numéros gratuits ici. Et ensuite je dois enlever le quatrième

04:23.430 --> 04:28.430
argument ici bien sûr quand j'appelle la fonction.

04:28.460 --> 04:30.910
Parce que maintenant, je suis assez clair sur le fait que je veux obtenir trois

04:30.910 --> 04:32.240
arguments, qui sont chacun des nombres.

04:32.240 --> 04:33.830
Bien sûr, nous aurions pu simplement

04:33.830 --> 04:36.980
ajouter trois paramètres autonomes ici, mais cette syntaxe pourrait être

04:36.980 --> 04:39.030
un peu plus courte ou plus facile à mettre en place

04:39.030 --> 04:40.720
que l'ajout des paramètres libres.

04:40.720 --> 04:43.090
Cela dépend vraiment de votre application et de vos besoins.

04:43.090 --> 04:46.919
Ici, je vais m'éloigner de cette configuration et être

04:46.919 --> 04:51.320
plus générique et accepter autant d'arguments que possible, car

04:51.320 --> 04:55.210
pour cette fonction, je suis en effet capable de gérer une

04:55.210 --> 04:57.864
quantité infinie d'arguments.
