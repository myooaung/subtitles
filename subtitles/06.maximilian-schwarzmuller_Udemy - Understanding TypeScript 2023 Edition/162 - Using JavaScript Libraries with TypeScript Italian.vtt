WEBVTT

00:02.120 --> 00:05.910
-: Ora inizieremo con una libreria di utilità molto popolare,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Quello che imparerete qui funge fondamentalmente da esempio

00:09.840 --> 00:13.250
per qualsiasi libreria JavaScript vogliate usare.

00:13.250 --> 00:17.430
Non importa se si tratta di Lodash, jQuery o altro.

00:17.430 --> 00:19.510
A questo punto, una piccola nota a margine:

00:19.510 --> 00:21.640
se siete interessati a lavorare con React e TypeScript

00:21.640 --> 00:26.718
o, diciamo, con Node.

00:26.718 --> 00:26.718
js. e

00:26.718 --> 00:31.350
Express e TypeScript, ho dei moduli dedicati a questo aspetto più avanti nel corso, perché

00:31.350 --> 00:33.760
lì imparerete qualcosa di più della semplice

00:33.760 --> 00:35.730
aggiunta con TypeScript.

00:35.730 --> 00:40.470
Ma per librerie più semplici, come Lodash, jQuery e altre, ecco

00:40.470 --> 00:43.010
un approccio che funzionerà.

00:43.010 --> 00:45.340
Vogliamo quindi utilizzare Lodash nel nostro progetto.

00:45.340 --> 00:48.460
Lodash è ovviamente una libreria JavaScript.

00:48.460 --> 00:50.800
Non abbiamo bisogno di TypeScript per usarlo,

00:50.800 --> 00:53.480
possiamo usarlo in qualsiasi progetto JavaScript

00:53.480 --> 00:56.770
e possiamo installarlo come si può apprendere dai documenti

00:56.770 --> 00:59.200
ufficiali di Lodash.

00:59.200 --> 01:01.400
Se si usa npm, come noi, si può eseguire

01:01.400 --> 01:06.477
npm i o npm install, che è solo una forma breve, "--save/lodash".

01:07.750 --> 01:10.820
Quindi, in questo progetto di esempio che utilizza webpack senza un

01:10.820 --> 01:12.640
flusso di lavoro di produzione, ma solo un

01:12.640 --> 01:14.180
flusso di lavoro di sviluppo.

01:14.180 --> 01:16.570
È possibile aggiungere questa libreria semplicemente

01:16.570 --> 01:18.607
eseguendo nmp install dash dash save Lodash.

01:18.607 --> 01:21.700
Questo lo installerà in questo progetto e, grazie alla

01:21.700 --> 01:23.500
nostra configurazione di webpack,

01:23.500 --> 01:26.250
potremo importarlo nei nostri file di codice e utilizzarlo

01:26.250 --> 01:27.517
lì.

01:27.517 --> 01:30.670
E questo sarebbe lo stesso in qualsiasi progetto JavaScript

01:30.670 --> 01:32.250
alimentato da webpack.

01:32.250 --> 01:34.990
Se non si usa webpack, ovviamente si può anche

01:34.990 --> 01:37.720
usare semplicemente il CDN e così via.

01:37.720 --> 01:40.630
Tuttavia, ciò che vi mostrerò nei prossimi passi, un

01:40.630 --> 01:42.390
po' più avanti in questo modulo,

01:42.390 --> 01:45.130
funzionerà solo in una configurazione webpack.

01:45.130 --> 01:47.730
Abbiamo quindi una configurazione di webpack, abbiamo installato

01:47.730 --> 01:49.320
Lodash e ora, se vogliamo usarlo, possiamo

01:49.320 --> 01:51.510
semplicemente importarlo qui.

01:51.510 --> 01:55.600
Possiamo importare, ad esempio, underscore da 'Lodash'.

01:55.600 --> 01:57.960
Questa è una sintassi che dovrebbe essere disponibile

01:57.960 --> 01:59.960
con Lodash installato.

01:59.960 --> 02:03.057
Tuttavia, questo dà già un errore.

02:03.057 --> 02:06.850
"Impossibile trovare un file di dichiarazione per il modulo Lodash".

02:06.850 --> 02:09.890
E avremo un altro problema: se si vuole usare Lodash,

02:09.890 --> 02:12.230
per esempio, per rimescolare un array,

02:12.230 --> 02:16.810
si potrebbe usare il log underscore shuffle e poi passare, diciamo, un

02:16.810 --> 02:20.430
semplice array a questo metodo shuffle.

02:20.430 --> 02:23.110
Il metodo shuffle è un metodo supportato da Lodash.

02:23.110 --> 02:25.790
Lo si può apprendere dalla documentazione ufficiale

02:25.790 --> 02:26.820
di Lodash.

02:26.820 --> 02:29.056
Se si cerca "shuffle", si scopre che

02:29.056 --> 02:32.370
è possibile mescolare un array con questo metodo.

02:32.370 --> 02:37.010
Quindi, in un certo senso dovrebbe funzionare, ma in realtà non funziona

02:37.010 --> 02:39.480
così, come si può notare.

02:39.480 --> 02:43.058
Se ora avvio il mio server webpack, vedremo

02:43.058 --> 02:45.890
che il CDN ci dà un errore.

02:45.890 --> 02:47.077
E di nuovo ci dice che "non

02:47.077 --> 02:50.940
riesce a trovare un file di dichiarazione per il modulo Lodash".

02:50.940 --> 02:54.720
Quindi, non funziona proprio come dovrebbe.

02:54.720 --> 02:57.610
Il problema è che Lodash è una semplice

02:57.610 --> 02:59.930
libreria JavaScript.

02:59.930 --> 03:02.250
È costruito con JavaScript vanilla

03:02.250 --> 03:05.150
ed è costruito per JavaScript vanilla.

03:05.150 --> 03:08.530
Possiamo verificarlo se andiamo in node modules, dove abbiamo

03:08.530 --> 03:10.280
molte dipendenze, perché abbiamo

03:10.280 --> 03:12.450
molte dipendenze da webpack e dalle sue

03:12.450 --> 03:14.220
dipendenze.

03:14.220 --> 03:17.010
Ma se cerchiamo Lodash, eccolo

03:17.010 --> 03:17.930
qui.

03:17.930 --> 03:21.330
Ed espandiamo, come vediamo, un mucchio di file JavaScript,

03:21.330 --> 03:22.750
giusto?

03:22.750 --> 03:26.380
E questo è presente in tutto il codice sorgente di Lodash.

03:26.380 --> 03:30.010
Un po' di codice JavaScript, ma certamente nessun codice TypeScript.

03:30.010 --> 03:31.750
Qual è il problema?

03:31.750 --> 03:35.550
Il problema è che TypeScript non capisce cosa c'è in

03:35.550 --> 03:37.070
questo pacchetto.

03:37.070 --> 03:41.020
Non capisce quali metodi Lodash esporta.

03:41.020 --> 03:43.480
Ora si vedrà che funziona effettivamente se

03:43.480 --> 03:45.500
si va in tsconfig. json.

03:45.500 --> 03:48.740
E ci assicuriamo di emettere un output in caso di errore.

03:48.740 --> 03:52.650
Quindi, se impostiamo "noEmitOnError" su "false", in modo

03:52.650 --> 03:55.770
da emettere nuovo output in caso di errore.

03:55.770 --> 03:57.600
Per ora, avviatelo di nuovo,

03:57.600 --> 04:00.230
alla fine ci darà lo stesso errore, quindi

04:00.230 --> 04:02.160
lo vedremo ancora.

04:02.160 --> 04:05.090
Ma se ricarico questa pagina, si otterrà

04:05.090 --> 04:07.120
un risultato qui.

04:07.120 --> 04:08.922
Si può ignorare l'errore in

04:08.922 --> 04:12.580
fondo, si vedrà un output che è l'array rimescolato.

04:12.580 --> 04:14.920
Vedete, l'aspetto è diverso ogni volta che ricarico.

04:14.920 --> 04:16.530
E questo è molto interessante.

04:16.530 --> 04:19.770
Dimostra che Lodash funziona, dimostra che questo

04:19.770 --> 04:21.280
codice è corretto.

04:21.280 --> 04:24.170
Ma sfortunatamente, TypeScript non lo capisce

04:24.170 --> 04:28.400
e non può farlo perché Lodash usa JavaScript, non TypeScript.

04:28.400 --> 04:31.220
Il problema è che non esiste una versione di Lodash

04:31.220 --> 04:34.080
in TypeScript, quindi dobbiamo conviverci.

04:34.080 --> 04:37.220
Ed è uno scenario che incontrerete spesso.

04:37.220 --> 04:39.365
Si vuole usare una certa libreria di terze

04:39.365 --> 04:42.270
parti, ma è costruita solo per JavaScript e quindi si ottengono

04:42.270 --> 04:44.210
errori di questo tipo.

04:44.210 --> 04:46.060
Questo è fastidioso perché in teoria

04:46.060 --> 04:47.430
possiamo usarlo.

04:47.430 --> 04:49.630
TypeScript si basa su JavaScript.

04:49.630 --> 04:53.160
Possiamo usare qualsiasi libreria JavaScript in un progetto

04:53.160 --> 04:56.150
TypeScript, dobbiamo solo tradurla in TypeScript.

04:56.150 --> 04:58.890
E questo, fortunatamente, è possibile.

04:58.890 --> 05:02.564
Quindi attiviamo questa impostazione, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Vi mostrerò come possiamo parlare a TypeScript

05:07.200 --> 05:10.053
di Lodash e di ciò che offre.

05:11.140 --> 05:13.662
È possibile installare i cosiddetti

05:13.662 --> 05:16.250
tipi di libreria di terze parti.

05:16.250 --> 05:20.050
Se si cercano i tipi di Lodash, si troverà un pacchetto

05:20.050 --> 05:24.140
npm che qui si chiama "@types/lodash".

05:24.140 --> 05:26.440
Qui si trova anche il comando install, che

05:26.440 --> 05:28.120
verrà eseguito in un secondo.

05:28.120 --> 05:30.580
Ma se si scende nei dettagli si trova anche un

05:30.580 --> 05:32.220
link al repository github.

05:32.220 --> 05:36.320
Si collega a DefinitelyTyped, che è un enorme repository con tonnellate

05:36.320 --> 05:39.260
di traduzioni per tutti i tipi di librerie di terze

05:39.260 --> 05:40.820
parti.

05:40.820 --> 05:43.120
Qui siamo nella cartella Lodash.

05:43.120 --> 05:46.590
E lì si trovano i cosiddetti . dts.

05:46.590 --> 05:50.180
Quindi non solo . ma . dts.

05:50.180 --> 05:53.460
Questi sono i cosiddetti file di dichiarazione, il che significa che non

05:53.460 --> 05:55.760
contengono alcuna logica effettiva, ma se diamo un'occhiata

05:55.760 --> 05:58.750
al file shuffle . dts, contengono

05:58.750 --> 06:01.848
istruzioni per TypeScript.

06:01.848 --> 06:05.200
In pratica dicono a TypeScript come funziona

06:05.200 --> 06:08.720
qualcosa e cosa è incluso in questo pacchetto.

06:08.720 --> 06:10.700
È possibile esplorare diversi

06:10.700 --> 06:14.280
file in diverse sottocartelle, per saperne di più.

06:14.280 --> 06:17.717
Quindi, alla fine, questi file forniscono semplicemente

06:17.717 --> 06:21.750
una traduzione da JavaScript semplice a TypeScript.

06:21.750 --> 06:23.860
Non contengono alcuna logica in esecuzione,

06:23.860 --> 06:26.950
ma definiscono i tipi con cui questa libreria lavora.

06:26.950 --> 06:30.010
Definiscono i tipi che si usano, i tipi che si ottengono

06:30.010 --> 06:32.490
quando si chiama un metodo e così via.

06:32.490 --> 06:35.410
È inoltre possibile scrivere tali . dts da soli, e i documenti

06:35.410 --> 06:38.510
ufficiali forniscono una guida in merito, se è

06:38.510 --> 06:40.470
questo che vi interessa.

06:40.470 --> 06:42.110
Ma per i vostri progetti non

06:42.110 --> 06:43.160
è necessario farlo,

06:43.160 --> 06:45.820
perché se state scrivendo codici TypeScript

06:45.820 --> 06:48.110
solo TypeScript lo capisce.

06:48.110 --> 06:50.310
Ma se si lavora con una libreria di

06:50.310 --> 06:53.840
terze parti scritta in JavaScript senza codice TypeScript

06:53.840 --> 06:56.860
o senza codice . dts, che alcune librerie

06:56.860 --> 06:59.950
di terze parti forniscono anche se sono

06:59.950 --> 07:02.240
scritte in JavaScript, ma Lodash

07:02.240 --> 07:03.960
non lo fa.

07:03.960 --> 07:06.890
Quindi, se si lavora con una libreria che non contiene

07:06.890 --> 07:08.330
file di traduzione integrati

07:08.330 --> 07:11.180
e che non è scritta nativamente in TypeScript,

07:11.180 --> 07:15.760
l'uso di questi pacchetti di tipi è la soluzione.

07:15.760 --> 07:20.760
Quindi eseguiamo "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
In realtà si può anche eseguire "save-dev", perché

07:24.600 --> 07:27.920
dev è una dipendenza necessaria solo durante lo sviluppo,

07:27.920 --> 07:29.230
in quanto il codice viene

07:29.230 --> 07:32.360
comunque compilato tramite JavaScript.

07:32.360 --> 07:36.130
E ora installa questa traduzione da TypeScript

07:36.130 --> 07:38.060
per comprenderla.

07:38.060 --> 07:40.630
E, come vedete, non appena viene installato,

07:40.630 --> 07:42.510
l'errore scompare.

07:42.510 --> 07:46.220
E se ora riavvio npm start, vedrete che l'errore

07:46.220 --> 07:48.270
non tornerà nemmeno qui.

07:48.270 --> 07:51.640
Ora funziona senza errori, sia nella

07:51.640 --> 07:55.190
compilazione che nel browser.

07:55.190 --> 07:57.270
Tecnicamente funzionava anche prima,

07:57.270 --> 07:59.160
ma ora con la traduzione possiamo

07:59.160 --> 08:01.580
utilizzare anche TypeScript.

08:01.580 --> 08:04.660
E per esempio ora abbiamo anche tutti i completamenti qui,

08:04.660 --> 08:05.493
nell'IDE.

08:05.493 --> 08:10.070
Se digito un punto qui, vedo i metodi Lodash che posso usare.

08:10.070 --> 08:13.930
Si tratta quindi di una conoscenza molto importante, di cui bisogna

08:13.930 --> 08:16.400
assolutamente essere consapevoli, che consente

08:16.400 --> 08:19.370
di utilizzare librerie JavaScript normali, normali,

08:19.370 --> 08:21.177
vanilla, in un progetto TypeScript,

08:21.177 --> 08:24.220
ottenendo comunque un ottimo supporto, un ottimo completamento

08:24.220 --> 08:28.490
automatico ed evitando errori.

08:28.490 --> 08:33.030
Con l'aiuto di questi pacchetti di tipi di traslazione, si

08:33.030 --> 08:33.990
può dire.

08:33.990 --> 08:38.990
E questi pacchetti, che si chiamano sempre "@types" e poi il nome del pacchetto,

08:39.290 --> 08:40.860
esistono fondamentalmente

08:40.860 --> 08:46.730
per qualsiasi libreria di terze parti che si possa trovare in giro.

08:46.730 --> 08:49.960
Si può sempre cercare il nome della libreria e poi i tipi,

08:49.960 --> 08:51.690
ad esempio i tipi di jQuery, e

08:51.690 --> 08:54.400
si dovrebbe trovare una voce simile.

08:54.400 --> 08:57.350
Ecco come si può lavorare con i tipi nelle librerie

08:57.350 --> 08:59.373
JavaScript vanilla.
