WEBVTT

00:02.200 --> 00:04.080
Istruttore: è tempo di un altro nuovo file.

00:04.080 --> 00:09.080
Rinominerò l'app. ts qui per unire gli alias. e aggiungere una nuova

00:11.100 --> 00:13.760
applicazione. ts da cui si può ripartire

00:13.760 --> 00:16.370
da zero, chiudendo l'altro file.

00:16.370 --> 00:20.660
E ora voglio immergermi un po' di più nelle funzioni.

00:20.660 --> 00:22.640
Ora, naturalmente, con le funzioni già utilizzate.

00:22.640 --> 00:24.940
Ad esempio, qui nel file degli alias union

00:24.940 --> 00:26.340
con la funzione combine.

00:26.340 --> 00:29.260
Ad esempio, si è visto che per le funzioni si possono

00:29.260 --> 00:32.520
assegnare tipi ai parametri delle funzioni.

00:32.520 --> 00:34.310
È emerso che si può fare di

00:34.310 --> 00:36.483
più con le funzioni e i tipi.

00:37.590 --> 00:40.430
Per questo ricreerò la mia funzione add, che accetta

00:40.430 --> 00:43.373
semplicemente numeri, non stringhe.

00:44.270 --> 00:48.340
Che fa una cosa semplice, restituisce n uno più n due, quindi non troppo

00:48.340 --> 00:49.513
complicato.

00:51.004 --> 00:53.740
Come ho già detto, possiamo assegnare tipi ai parametri,

00:53.740 --> 00:55.180
non è una novità.

00:55.180 --> 00:57.030
La funzione nel suo complesso,

00:57.030 --> 01:01.050
tuttavia, ha un altro tipo importante: ha un tipo di ritorno.

01:01.050 --> 01:03.990
E qui il tipo di ritorno è dedotto da TypeScript.

01:03.990 --> 01:06.490
Possiamo vederlo se passiamo il mouse su add.

01:06.490 --> 01:10.760
Qui alla fine, i due punti dopo l'elenco dei parametri, questo qui,

01:10.760 --> 01:14.190
descrivono il tipo di ritorno della funzione.

01:14.190 --> 01:16.800
Quindi il tipo del valore restituito.

01:16.800 --> 01:20.020
In questo caso, restituisco l'addizione di n uno e n due.

01:20.020 --> 01:23.050
E poiché entrambi gli input sono numeri, TypeScript è in grado

01:23.050 --> 01:24.930
di dedurre che il risultato di questa funzione

01:24.930 --> 01:26.770
sarà un numero e, poiché lo restituiamo,

01:26.770 --> 01:28.820
che il tipo di ritorno dei dati di questa funzione

01:28.820 --> 01:30.830
sarà un numero.

01:30.830 --> 01:33.320
Se li concatenassimo come stringhe,

01:33.320 --> 01:35.363
ad esempio con toString, TypeScript

01:36.550 --> 01:39.030
dedurrebbe correttamente che restituiamo

01:39.030 --> 01:41.900
una stringa.

01:41.900 --> 01:44.350
Naturalmente, possiamo sempre assegnare esplicitamente

01:44.350 --> 01:46.910
un tipo di ritorno, aggiungendo i due punti dopo l'elenco

01:46.910 --> 01:48.490
dei parametri e poi il tipo che vogliamo

01:48.490 --> 01:51.263
restituire, come ad esempio number.

01:52.850 --> 01:54.560
Si tratta dello stesso tipo di inferenza.

01:54.560 --> 01:56.760
Se, ad esempio, impostassi questo valore

01:56.760 --> 02:00.020
su stringa, otterrei un errore, perché ovviamente il mio

02:00.020 --> 02:03.540
calcolo non corrisponde al tipo di ritorno descritto.

02:03.540 --> 02:06.480
Come per le variabili, è bene lasciare che TypeScript

02:06.480 --> 02:10.080
faccia il suo lavoro di inferenza dei tipi.

02:10.080 --> 02:12.610
Se non si ha una ragione specifica per

02:12.610 --> 02:14.810
impostare esplicitamente il tipo,

02:14.810 --> 02:17.090
si dovrebbe quindi non impostare

02:17.090 --> 02:20.470
il tipo e lasciare che TypeScript lo deduca.

02:20.470 --> 02:22.660
Per quanto riguarda i tipi di ritorno, c'è un

02:22.660 --> 02:25.910
tipo interessante che non abbiamo mai visto prima e che potrebbe

02:25.910 --> 02:27.530
essere nuovo per voi se avete esperienza

02:27.530 --> 02:30.240
con altri linguaggi di programmazione.

02:30.240 --> 02:31.200
Perché è un tipo

02:31.200 --> 02:33.250
che non esiste in JavaScript.

02:33.250 --> 02:35.180
È il tipo di vuoto.

02:35.180 --> 02:38.160
Supponiamo di avere il metodo printResult.

02:38.160 --> 02:41.190
Si ottiene un argomento numerico,

02:41.190 --> 02:44.120
che dovrebbe essere un numero.

02:44.120 --> 02:47.510
E lì voglio consolare. log num.

02:47.510 --> 02:49.450
E voglio consolare. registrarlo come parte

02:49.450 --> 02:52.150
di una stringa, dove dico risultato più numero.

02:52.150 --> 02:53.670
Ora questo verrà concatenato

02:53.670 --> 02:56.090
in un'unica lunga stringa e verrà emesso.

02:56.090 --> 02:57.777
E ora posso chiamare printResult.

02:57.777 --> 03:01.020
E per esempio, passiamo attraverso di essa il risultato della

03:01.020 --> 03:05.010
mia chiamata alla funzione add, con cinque più, diciamo, dodici.

03:05.010 --> 03:07.670
Quindi sto eseguendo un'aggiunta qui, con due numeri.

03:07.670 --> 03:10.160
Il risultato, quindi ciò che add restituisce,

03:10.160 --> 03:13.130
viene passato come argomento a printResult.

03:13.130 --> 03:15.780
E questo dovrebbe stamparlo nella console.

03:15.780 --> 03:19.150
Se ora compiliamo questo e poi lo guardiamo nella nostra

03:19.150 --> 03:21.110
pagina, o nella nostra pagina

03:21.110 --> 03:24.280
qui, vediamo il risultato 17, che ha senso.

03:24.280 --> 03:25.660
La cosa interessante è il

03:25.660 --> 03:27.640
tipo di ritorno di printResult.

03:27.640 --> 03:30.353
Quale sarebbe il tipo di ritorno?

03:31.240 --> 03:33.240
Forse pensate che sia una stringa, perché

03:33.240 --> 03:35.150
sto creando una stringa qui.

03:35.150 --> 03:37.360
Ma tenete presente che non lo restituiremo.

03:37.360 --> 03:39.400
Non stiamo restituendo nulla.

03:39.400 --> 03:42.010
Pertanto, questa funzione printResult

03:42.010 --> 03:44.990
ha un tipo di ritorno speciale, void.

03:44.990 --> 03:47.910
Ora si potrebbe notare il tipo di ritorno void da altri

03:47.910 --> 03:49.830
linguaggi di programmazione.

03:49.830 --> 03:52.230
Ecco qualcosa di simile.

03:52.230 --> 03:53.940
JavaScript non lo sa o non

03:53.940 --> 03:56.740
ha un nome per questa situazione.

03:56.740 --> 03:58.590
TypeScript, invece, lo fa.

03:58.590 --> 04:01.840
Quindi, questa funzione ha un tipo di ritorno void.

04:01.840 --> 04:04.065
Naturalmente, non è necessario specificarlo qui.

04:04.065 --> 04:06.440
L'inferenza di TypeScript ha fatto il suo lavoro.

04:06.440 --> 04:07.630
Ma voglio che sia chiaro

04:07.630 --> 04:09.610
che il tipo di ritorno è void,

04:09.610 --> 04:13.730
per questo lo aggiungo qui, a scopo dimostrativo.

04:13.730 --> 04:17.070
Ora, void significa semplicemente che questa funzione

04:17.070 --> 04:21.020
non ha una dichiarazione di ritorno, non restituisce nulla.

04:21.020 --> 04:24.540
Si completa con successo, fa il suo lavoro.

04:24.540 --> 04:28.170
Esegue il codice, non produce un errore

04:28.170 --> 04:32.550
o altro, ma non restituisce nulla.

04:32.550 --> 04:34.990
È il tipo di ritorno void.

04:34.990 --> 04:37.330
Ora, tecnicamente, in JavaScript, ovviamente,

04:37.330 --> 04:39.490
se si usa la console. registriamo qui

04:39.490 --> 04:43.550
il risultato di printResult e ora compiliamo questo e vediamo

04:43.550 --> 04:46.270
cosa viene mostrato qui nella pagina.

04:46.270 --> 04:49.480
Vediamo che viene restituito undefined.

04:49.480 --> 04:51.540
Tecnicamente, e questo è davvero

04:51.540 --> 04:56.450
interessante, in JavaScript, se utilizziamo il valore di ritorno di una funzione

04:56.450 --> 05:00.830
che non restituisce nulla, otteniamo come valore undefined.

05:00.830 --> 05:03.730
E come probabilmente sapete, undefined in JavaScript

05:03.730 --> 05:05.720
è un valore reale.

05:05.720 --> 05:08.430
Un valore che, ad esempio, si ottiene anche se si cerca

05:08.430 --> 05:11.880
di accedere a una proprietà di un oggetto che non esiste.

05:11.880 --> 05:13.670
Quindi otteniamo void, anche

05:13.670 --> 05:16.680
se tecnicamente restituisce undefined.

05:16.680 --> 05:19.020
Per confondere ancora di più

05:19.020 --> 05:23.300
le idee, undefined è un tipo in TypeScript.

05:23.300 --> 05:25.640
È possibile avere undefined come tipo.

05:25.640 --> 05:29.570
Ad esempio, una variabile nuova di zecca, someValue, può ricevere

05:30.770 --> 05:33.270
undefined come tipo e non si otterrà alcun

05:33.270 --> 05:34.700
errore.

05:34.700 --> 05:37.380
Questa variabile rimarrà per sempre indefinita.

05:37.380 --> 05:39.970
Quanto possa essere utile è un'altra questione.

05:39.970 --> 05:43.720
Ma undefined è un tipo valido in TypeScript.

05:43.720 --> 05:46.600
Tuttavia, qui vediamo che si verifica un errore.

05:46.600 --> 05:48.010
E riceviamo un errore

05:48.010 --> 05:51.690
perché una funzione non può restituire undefined.

05:51.690 --> 05:53.300
Tecnicamente è così, ma TypeScript

05:53.300 --> 05:56.850
pensa alle funzioni in modo un po' diverso.

05:56.850 --> 06:00.200
Si dovrebbe usare void se una funzione non restituisce

06:00.200 --> 06:04.300
nulla, e non undefined, perché con void si chiarisce che questa funzione

06:04.300 --> 06:05.940
non ha deliberatamente una

06:05.940 --> 06:08.260
dichiarazione di ritorno.

06:08.260 --> 06:10.690
Se si dice undefined qui, TypeScript

06:10.690 --> 06:13.460
si aspetterebbe una dichiarazione di ritorno

06:13.460 --> 06:17.080
in cui non si restituisce alcun valore.

06:17.080 --> 06:18.660
Questa è la differenza tecnica.

06:18.660 --> 06:20.670
Ora non ricevo alcun errore.

06:20.670 --> 06:22.860
Dal punto di vista di JavaScript,

06:22.860 --> 06:26.610
è praticamente la stessa cosa.

06:26.610 --> 06:29.050
Ma TypeScript fa una differenziazione

06:29.050 --> 06:31.240
e quindi void è il tipo da usare se non

06:31.240 --> 06:33.760
si ha una dichiarazione di ritorno.

06:33.760 --> 06:37.200
Undefined, che a dire il vero servirà raramente, può essere

06:37.200 --> 06:41.100
usato se si restituisce senza restituire un valore effettivo.

06:41.100 --> 06:45.750
Ma ancora una volta, questo è un caso d'uso raro e si potrebbe usare void anche con una dichiarazione

06:45.750 --> 06:47.560
di ritorno come questa.

06:47.560 --> 06:49.040
Non si otterrebbe un errore.

06:49.040 --> 06:50.610
E per impostazione predefinita,

06:50.610 --> 06:52.770
in questo caso si usa sempre void.

06:52.770 --> 06:54.680
A meno che non si abbia una funzione che

06:54.680 --> 06:56.750
dovrebbe produrre undefined e si voglia

06:56.750 --> 06:58.620
essere chiari al riguardo.

06:58.620 --> 07:01.430
Ma, ancora una volta, questo sarà raramente il caso.

07:01.430 --> 07:03.620
Voglio solo assicurarmi che abbiate capito

07:03.620 --> 07:05.870
la differenza tra void e undefined, che

07:05.870 --> 07:08.160
void è lo standard che userete praticamente

07:08.160 --> 07:10.930
in tutti gli scenari in cui avete una funzione che

07:10.930 --> 07:13.450
non restituisce un valore e che potete assegnare

07:13.450 --> 07:15.770
esplicitamente.

07:15.770 --> 07:18.780
Ma naturalmente anche TypeScript è in grado di dedurlo, come potrebbe

07:18.780 --> 07:20.440
fare anche in questo caso.

07:20.440 --> 07:23.083
L'ho aggiunto solo a scopo dimostrativo.
