WEBVTT

00:02.190 --> 00:03.570
-: เรามีโมดูลที่นี่ด้วย

00:03.570 --> 00:06.050
ตอนนี้ โมดูลเป็นตัวเลือกที่ฉันจะข้ามไปก่อน

00:06.050 --> 00:07.540
เพราะมันสมเหตุสมผลเมื่อเราเรียนรู้เกี่ยวกับโมดูลใน

00:07.540 --> 00:13.400
TypeScript และวิธีที่เราสามารถเชื่อมต่อหลายไฟล์ได้

00:13.400 --> 00:15.350
ดังนั้นอย่าสนใจสิ่งนั้นในตอนนี้

00:15.350 --> 00:17.250
Lib เป็นสิ่งที่น่าสนใจ

00:17.250 --> 00:20.890
Lib เป็นตัวเลือกที่ให้คุณระบุว่าวัตถุและคุณสมบัติเริ่มต้นใดที่

00:20.890 --> 00:25.650
TypeScript รู้จัก

00:25.650 --> 00:28.580
โดยที่ฉันหมายถึงสิ่งต่าง ๆ เช่นการทำงานกับดอม

00:28.580 --> 00:31.930
สมมติว่าในดัชนี html เรามีปุ่ม และบนปุ่มนี้

00:31.930 --> 00:35.100
เราพูดว่า "คลิกฉัน เมื่อเราคลิกปุ่มนี้ เราก็แค่ต้องการพิมพ์ข้อความ

00:35.100 --> 00:36.610
ตอนนี้ในแอพ เราสามารถเลือกปุ่มนี้ได้

00:36.610 --> 00:41.420
เราสามารถเข้าถึงปุ่มนี้ด้วยเอกสาร

00:41.420 --> 00:41.420
ตัวเลือกแบบสอบถาม

00:43.808 --> 00:44.641
ตัวอย่างเช่น เลือกปุ่มแรกที่เราพบ

00:44.641 --> 00:48.130
ตอนนี้ถ้าเราทำอย่างนั้นก็ใช้ได้

00:48.130 --> 00:51.580
เราไม่พบข้อผิดพลาดประเภทใดที่นี่

00:51.580 --> 00:53.000
ดังนั้น ถ้าฉันไปที่ปุ่มของฉัน

00:53.000 --> 01:00.990
และเพิ่ม EventListener ที่นี่ ฉันได้รับข้อผิดพลาดที่นี่จริงๆ เพราะ TypeScript ไม่ทราบแน่ชัดว่าเราพบปุ่มที่นี่หรือไม่

01:00.990 --> 01:04.010
สำหรับตอนนี้ เราสามารถแก้ไขได้ด้วยเครื่องหมายอัศเจรีย์

01:04.010 --> 01:08.860
หลังจากบรรทัดนี้แล้ว ฉันจะกลับมาว่าสิ่งนี้ใช้ทำอะไรในอนาคต

01:08.860 --> 01:11.320
โดยทั่วไปจะบอก TypeScript ว่า "ไม่ต้องกังวล"

01:11.320 --> 01:13.667
จะมีปุ่มดังกล่าวอยู่

01:13.667 --> 01:15.097
“เราจะได้ค่าตรงนี้ ตอนนี้เราสามารถเพิ่มเหตุการณ์การคลิกที่นี่

01:15.097 --> 01:19.470
จากนั้นค้นหาฟังก์ชันนิรนามบางอย่างที่คอนโซล

01:19.470 --> 01:19.470
คลิกเข้าสู่ระบบ

01:19.470 --> 01:24.920
ตอนนี้ สิ่งที่น่าสนใจที่นี่ไม่มากที่ฉันต้องเพิ่มเครื่องหมายอัศเจรีย์

01:24.920 --> 01:26.450
อย่างที่ฉันบอกว่าฉันจะกลับมา

01:26.450 --> 01:29.310
แต่ถ้าฉันรัน tsc มันก็แค่คอมไพล์

01:29.310 --> 01:34.840
ตอนนี้ TypeScript ไม่ควรบ่นว่าไม่รู้จักเอกสารที่นี่ใช่ไหม

01:34.840 --> 01:38.370
มันรู้ได้อย่างไรว่าเรามีเอกสาร ค่าคงที่

01:38.370 --> 01:39.690
หรือตัวแปรอยู่

01:39.690 --> 01:43.290
จะรู้ได้อย่างไรว่าแม้ว่าเราจะมีสิ่งนั้นอยู่ก็ตาม

01:43.290 --> 01:45.610
มันยังเก็บวัตถุที่มีเมธอด querySelector

01:45.610 --> 01:48.350
ของเราอยู่

01:48.350 --> 01:50.010
มันรู้ได้อย่างไรว่าปุ่มนั้นเป็นสิ่งที่มีเมธอด

01:50.010 --> 01:51.690
addEventListener

01:51.690 --> 01:55.932
TypeScript รู้ทั้งหมดได้อย่างไร

01:55.932 --> 01:57.120
ตอนนี้คุณอาจพูดว่า "แน่นอน มันรู้ เนื่องจากในวานิลลา JavaScript นี่จะเป็นโค้ดที่ถูกต้อง

01:57.120 --> 02:03.290
แต่โปรดจำไว้ว่าเมื่อคุณเขียนโค้ด TypeScript คุณไม่จำเป็นต้องเขียนโค้ดสำหรับเบราว์เซอร์

02:03.290 --> 02:05.580
คุณสามารถเขียนโหนดของคุณได้ แอปพลิเคชัน js กับ

02:05.580 --> 02:11.310
TypeScript และแน่นอนว่าสิ่งนี้จะไม่ทำงาน

02:11.310 --> 02:13.200
ดังนั้นเหตุผลที่ใช้งานได้คือตัวเลือก

02:13.200 --> 02:14.630
lib นี้ และอย่างที่คุณเห็นว่าไม่ได้ตั้งค่าไว้ที่นี่ด้วยซ้ำ

02:14.630 --> 02:18.280
แต่ถ้าไม่ได้ตั้งค่าไว้ ก็จะถือว่าค่าเริ่มต้นบางส่วน

02:18.280 --> 02:21.940
หากไม่ได้ตั้งค่าเริ่มต้นขึ้นอยู่กับเป้าหมาย

02:21.940 --> 02:24.420
JavaScript ของคุณที่นี่ และสำหรับ

02:24.420 --> 02:28.180
es6 โดยค่าเริ่มต้น จะรวมคุณลักษณะทั้งหมดที่มีอยู่ทั่วโลกใน

02:28.180 --> 02:31.536
es6

02:31.536 --> 02:33.270
ตัวอย่างเช่น ออบเจกต์ Map ซึ่งมีอยู่ใน es6

02:33.270 --> 02:35.940
ดังนั้นมันจะไม่บ่นถ้าคุณใช้แผนที่

02:35.940 --> 02:40.120
ดังนั้นจึงสันนิษฐานว่าคุณสมบัติ es6 ทั้งหมดที่มีให้ใช้งานทั่วโลกใน

02:40.120 --> 02:48.700
JavaScript นั้นมีให้ใช้งานใน TypeScript เช่นกัน

02:50.677 --> 02:51.780
และนอกจากนี้ จะถือว่า

02:51.780 --> 02:54.530
DOM API ทั้งหมดพร้อมใช้งาน

02:54.530 --> 03:01.740
คุณจะพบคำอธิบายโดยละเอียดเกี่ยวกับตัวเลือกเหล่านี้ทั้งหมดในกล่องอย่างเป็นทางการซึ่งมีลิงก์อยู่ในการบรรยายที่ส่วนท้ายของโมดูลนี้

03:01.740 --> 03:04.550
ดังนั้น เรื่องสั้นสั้นๆ ถ้าตัวเลือก lib ไม่ได้ตั้งค่าดีฟอลต์บางตัวไว้ และค่าเหล่านี้เป็นค่าดีฟอลต์ที่คุณจำเป็นต้องมีเพื่อให้

03:04.550 --> 03:11.520
TypeScript ทำงานในเบราว์เซอร์

03:11.520 --> 03:13.760
ดังนั้น DOM API ทั้งหมดจึงหายไป

03:13.760 --> 03:16.030
ถ้าเราแสดงความคิดเห็นในนี้ และตอนนี้ฉันรวบรวมทุกอย่าง ฉันได้รับข้อผิดพลาดอย่างแน่นอน

03:16.030 --> 03:24.780
เพราะตอนนี้พวกเขากำลังแสดงความคิดเห็นว่าเราไม่มีการตั้งค่าเริ่มต้นอีกต่อไป

03:24.780 --> 03:26.010
แต่ตอนนี้เราพูดว่า "เฮ้ โปรดรวม "ไลบรารีเริ่มต้นบางไลบรารี"

03:26.010 --> 03:28.050
คำจำกัดความประเภทดีฟอลต์บางประเภทที่คุณสามารถพูดได้

03:28.050 --> 03:30.370
ซึ่งฉันจะให้คุณในอาร์เรย์นี้

03:30.370 --> 03:32.437
และอย่างที่คุณเห็น ฉันไม่ได้ส่งคำอธิบาย

03:32.437 --> 03:36.330
เส้นทางใดๆ ค่าใดๆ ตรงนี้

03:36.330 --> 03:39.470
ดังนั้น สิ่งที่ฉันพูดกับ TypeScript ในตอนนี้ก็คือ

03:39.470 --> 03:45.050
"เฮ้ เกี่ยวกับค่าดีฟอลต์ทั้งหมด คุณก็รู้" โปรดคำนึงถึงสิ่งนี้ด้วย

03:45.050 --> 03:45.050
และคุณรู้ไหมว่าไม่มีอะไร

03:45.050 --> 03:46.920
ดังนั้น เฉพาะในกรณีที่มีการใส่ความคิดเห็นเท่านั้นจึงจะใช้งานได้

03:46.920 --> 03:50.037
เนื่องจาก TypeScript จะถือว่าค่าเริ่มต้นบางอย่าง

03:50.037 --> 03:51.770
หากฉันตั้งค่าเริ่มต้นอย่างชัดเจน แน่นอนว่า TypeScript

03:51.770 --> 03:55.300
จะปฏิบัติตามสิ่งที่ฉันตั้งค่าไว้ที่นี่

03:55.300 --> 03:57.410
และตัวอย่างที่นี่ ไม่รู้จักเอกสาร

03:57.410 --> 03:59.740
ไม่รู้จักคอนโซลด้วยซ้ำ

03:59.740 --> 04:02.680
ดังนั้นเราจึงต้องการตั้งค่าสองค่านี้ให้สมเหตุสมผลมากขึ้น

04:02.680 --> 04:07.343
และอีกครั้ง ถ้าคุณกดที่พื้นที่ควบคุม และที่นี่คุณจะได้รับการเติมข้อความอัตโนมัติ

04:08.900 --> 04:10.930
ตัวอย่างเช่น เราสามารถเพิ่ม dom

04:10.930 --> 04:12.360
นั่นคือตัวระบุและมีตัวระบุที่กำหนดไว้ล่วงหน้าซึ่ง

04:12.360 --> 04:15.800
TypeScript เข้าใจ คุณจะพบรายการทั้งหมดในเอกสารอย่างเป็นทางการอีกครั้ง

04:15.800 --> 04:21.070
เอกสารสำหรับตัวเลือกนี้จะแนบมากับการบรรยายนี้ด้วย

04:21.070 --> 04:22.840
ดังนั้น นี่คือตัวระบุที่ TypeScript

04:22.840 --> 04:26.070
เข้าใจ และเป็นตัวระบุที่โดยทั่วไปจะปลดล็อก DOM API ทั้งหมดใน

04:26.070 --> 04:27.750
TypeScript เพื่อให้ TypeScript

04:27.750 --> 04:30.100
เข้าใจว่าคุณกำลังทำอะไรที่นี่

04:30.100 --> 04:32.680
ตอนนี้คุณเห็นแล้วว่ามันรู้จักคอนโซล

04:32.680 --> 04:35.150
รู้จักเอกสาร และอื่นๆ

04:35.150 --> 04:37.040
ดังนั้น เนื่องจากเรากำลังทำงานกับ

04:37.040 --> 04:40.100
Next-Gen JavaScript เราจึงควรเพิ่มตัวเลือก es6

04:40.100 --> 04:42.550
ด้วย เพื่อให้ TypeScript เข้าใจตัวเลือก

04:42.550 --> 04:45.400
es6 ทั้งหมดที่มีอยู่ทั่วโลก

04:45.400 --> 04:47.896
และเป็นความคิดที่ดีที่จะเพิ่ม dom iterable และ

04:47.896 --> 04:50.830
scripthost

04:50.830 --> 04:54.130
ด้วยสิ่งนี้ เราจะปลดล็อกคุณสมบัติหลักของ JavaScript ทั้งหมดที่คุณต้องการให้ใช้งาน

04:54.130 --> 05:00.620
และนี่คือการตั้งค่าเริ่มต้นที่แน่นอนที่คุณได้รับเมื่อคุณกำหนดเป้าหมายเป็น

05:00.620 --> 05:02.530
es6

05:02.530 --> 05:05.250
ดังนั้น หากคุณแสดงความคิดเห็นในสิ่งนี้และตั้งค่าแบบนี้

05:05.250 --> 05:07.360
คุณจะมีพฤติกรรมเหมือนกับว่าคุณไม่ได้ระบุ

05:07.360 --> 05:09.980
lib เลย

05:09.980 --> 05:15.860
ตอนนี้ที่นี่ฉันจะแสดงความคิดเห็นว่าในสิ่งนี้จะรวบรวม

05:15.860 --> 05:17.959
อีกครั้ง การตั้งค่านี้ซ้ำซ้อนเล็กน้อย

05:17.959 --> 05:20.920
แต่ต้องการอธิบายว่ามันทำอะไร
