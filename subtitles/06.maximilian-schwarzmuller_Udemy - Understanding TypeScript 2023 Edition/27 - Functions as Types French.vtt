WEBVTT

00:02.140 --> 00:04.980
- : Vous pouvez donc utiliser des types pour les paramètres

00:04.980 --> 00:06.750
de la fonction et pour la valeur de retour

00:06.750 --> 00:08.100
de la fonction.

00:08.100 --> 00:10.420
Maintenant, pour passer au niveau supérieur,

00:10.420 --> 00:14.820
que se passerait-il si elles étaient elles-mêmes un type de fonction ?

00:14.820 --> 00:17.170
Laissez-moi préciser ce que je veux dire.

00:17.170 --> 00:19.333
Disons que nous avons une variable 'combinevalues'

00:21.360 --> 00:24.200
et que cette variable a par défaut un type 'any'. Comme vous l'avez appris, "tout" n'est pas très utile.

00:24.200 --> 00:26.860
Ce que je veux faire en fin de compte, c'est

00:26.860 --> 00:29.617
de mettre "combinevalues" égal à "add". Je veux donc stocker cette fonction 'add', un pointeur

00:29.617 --> 00:32.600
sur cette fonction 'add', dans 'combinevalues' pour

00:32.600 --> 00:35.330
qu'à la fin, nous puissions consigner en console,

00:35.330 --> 00:39.160
combiner les valeurs et exécuter 'combinevalues' comme une fonction

00:39.160 --> 00:41.580
à laquelle il a 8 et 8.

00:41.580 --> 00:44.520
Maintenant si je sauvegarde cela, et que j'exécute

00:44.520 --> 00:47.480
ceci, après l'avoir compilé, donc j'ai compilé

00:47.480 --> 00:51.150
ce fichier et ensuite nous laissons recharger, nous obtenons

00:51.150 --> 00:52.130
16 ici.

00:52.130 --> 00:54.660
Donc, cela fonctionne, et nous nous attendons à ce que cela fonctionne parce que

00:54.660 --> 00:55.840
c'est du code JavaScript normal.

00:55.840 --> 00:58.820
Nous pouvons stocker un pointeur vers une fonction,

00:58.820 --> 01:00.880
dans une variable numérique, et ensuite

01:00.880 --> 01:03.350
l'offre exécute cette variable comme une fonction,

01:03.350 --> 01:05.440
parce que, eh bien, il pointe vers la fonction,

01:05.440 --> 01:07.300
non ?

01:07.300 --> 01:08.580
Donc nous pouvons exécuter cette fonction, à travers cette variable.

01:08.580 --> 01:09.910
Le problème que nous rencontrons

01:09.910 --> 01:13.250
avec cet extrait, du point de vue de TypeScript, est que 'combinevalues'

01:13.250 --> 01:15.900
est quelconque.

01:15.900 --> 01:19.640
Donc, si je donne à "combinevalues" la valeur d'un nombre ici, bien sûr,

01:19.640 --> 01:20.670
nous ne pouvons pas compiler

01:20.670 --> 01:24.520
ce fichier parce que TypeScript n'a aucune chance de détecter que ce n'est

01:24.520 --> 01:27.910
pas voulu ou que cela pourrait causer un problème.

01:27.910 --> 01:30.543
Mais au moment de l'exécution, il obtiendrait une erreur parce

01:30.543 --> 01:34.230
que nous avons manifestement essayé d'exécuter 'combinevalues' en tant que fonction,

01:34.230 --> 01:36.220
alors qu'il s'agit en fait d'un nombre.

01:36.220 --> 01:39.090
Nous voulons éviter cela, et pour cela nous devons être clairs

01:39.090 --> 01:42.080
sur le fait que 'combinevalues' contiendra une fonction.

01:42.080 --> 01:44.870
Le premier pas dans cette direction

01:44.870 --> 01:48.650
est de définir le type ici, en fonction.

01:48.650 --> 01:50.550
Function est un type fourni par

01:50.550 --> 01:54.770
TypeScript à la fin, et cela indique clairement que tout ce que

01:54.770 --> 01:57.940
nous stockons ici doit être une fonction.

01:57.940 --> 02:00.870
Par conséquent, j'obtiens ici une erreur, car 5 est un nombre

02:00.870 --> 02:02.230
et non une fonction.

02:02.230 --> 02:05.350
Et si je commente ceci, nous pouvons compiler ceci, autrement nous aurions

02:05.350 --> 02:06.660
une erreur pendant la compilation,

02:06.660 --> 02:09.670
et maintenant c'est de nouveau exécuté comme prévu.

02:09.670 --> 02:12.860
C'est bien, mais ce n'est pas parfait parce que maintenant

02:12.860 --> 02:15.380
nous disons que cela devrait être une fonction,

02:15.380 --> 02:17.940
mais elle pourrait aussi définir 'combinevalues'

02:17.940 --> 02:21.460
comme étant égal à 'printResult' par exemple ici.

02:21.460 --> 02:25.290
Et bien sûr, TypeScript ne se plaindrait pas parce que 'printResult' est

02:25.290 --> 02:27.150
une fonction, mais bien sûr, ce n'est

02:27.150 --> 02:29.600
pas une fonction qui prend deux arguments.

02:29.600 --> 02:32.620
Donc encore une fois, si je compile ceci, TypeScript ne se plaindra pas.

02:32.620 --> 02:34.800
Mais si nous rechargeons, nous voyons undefined ici et Resultat 8.

02:34.800 --> 02:38.720
Je n'obtiens donc pas le résultat souhaité parce

02:38.720 --> 02:42.470
que j'y ai stocké la mauvaise fonction.

02:42.470 --> 02:45.980
Encore une fois, ce serait bien que TypeScript

02:45.980 --> 02:47.350
nous en parle.

02:47.350 --> 02:49.980
TypeScript ne peut pas nous informer à ce sujet parce que tout ce

02:49.980 --> 02:51.340
que nous avons dit à TypeScript est

02:51.340 --> 02:54.410
que nous voulons stocker une fonction ici et c'est clairement le cas.

02:54.410 --> 02:58.040
Il serait donc bon que nous soyons plus précis quant

02:58.040 --> 03:00.550
à l'aspect de la fonction que nous voulons

03:00.550 --> 03:03.810
stocker dans 'combinevalues'. Et c'est là que les types de fonctions entrent en jeu.

03:03.810 --> 03:07.200
Les types de fonction sont des types qui décrivent une fonction

03:07.200 --> 03:08.380
concernant les paramètres

03:08.380 --> 03:11.900
et la valeur de retour de cette fonction.

03:11.900 --> 03:15.690
Un type de fonction est créé avec cette notation de fonction fléchée

03:15.690 --> 03:18.360
que vous connaissez de JavaScript ou du moins proche

03:18.360 --> 03:19.870
de cette notation.

03:19.870 --> 03:23.710
Vous n'ajoutez pas d'accolades ici parce que nous ne créons

03:23.710 --> 03:25.530
pas une fonction flèche ici,

03:25.530 --> 03:28.890
nous créons un type de fonction à la place.

03:28.890 --> 03:31.610
Maintenant, sur le côté droit de cette flèche, vous spécifiez le

03:31.610 --> 03:33.690
type de retour de la fonction que vous voulez éventuellement

03:33.690 --> 03:35.450
être en mesure de stocker ici.

03:35.450 --> 03:37.180
Ça devrait être le numéro.

03:37.180 --> 03:40.840
Avec cela, nous disons que 'combinevalues' accepte toute fonction

03:40.840 --> 03:42.640
qui ne prend pas de paramètres et

03:42.640 --> 03:44.120
renvoie un nombre.

03:44.120 --> 03:47.200
Bien sûr, ce n'est pas tout à fait ce que nous voulons.

03:47.200 --> 03:50.430
Nous voulons nous assurer que 'combinevalues' prend une fonction ou est

03:50.430 --> 03:51.840
capable de stocker des fonctions

03:51.840 --> 03:54.180
qui prennent 2 nombres et retournent un nombre.

03:54.180 --> 03:57.130
Et pour cela, nous pouvons ajouter

03:57.130 --> 04:01.400
des paramètres ici à ce type de fonction.

04:01.400 --> 04:02.400
Nous n'avons pas à faire correspondre

04:02.400 --> 04:05.040
les noms des paramètres de là-haut, juste les types.

04:05.040 --> 04:06.020
Ainsi, nous pourrions avoir

04:06.020 --> 04:09.060
a qui devrait être de type numéro et b qui devrait être de type numéro.

04:09.060 --> 04:10.510
Et maintenant, ce que nous

04:10.510 --> 04:14.070
disons à TypeScript, c'est que 'combinevalues' devrait

04:14.070 --> 04:15.660
accepter toute fonction qui

04:15.660 --> 04:18.322
prend deux paramètres où chaque paramètre

04:18.322 --> 04:22.930
est un nombre, et où la fonction dans son ensemble renvoie un nombre.

04:22.930 --> 04:24.350
Et c'est pourquoi TypeScript ne se plaint

04:24.350 --> 04:27.780
pas du fait que nous stockons 'add' dans les valeurs combinées, car 'add' est une fonction qui satisfait

04:27.780 --> 04:29.690
parfaitement à cette définition de type.

04:29.690 --> 04:33.380
Mais il se plaint de 'printResult' parce que 'printResult',

04:33.380 --> 04:36.890
comme il nous le dit ici, est une fonction de type

04:36.890 --> 04:40.632
un argument qui est un nombre, rien n'est retourné,

04:40.632 --> 04:44.360
alors que nous nous attendons à obtenir une fonction

04:44.360 --> 04:48.690
avec deux arguments où chaque argument est un nombre et nous

04:48.690 --> 04:52.310
retournons également un nombre.

04:52.310 --> 04:55.810
Nous avons donc un décalage ici, et si j'essayais de compiler

04:55.810 --> 04:58.700
ceci, nous obtiendrions donc une erreur ici,

04:58.700 --> 05:00.480
bien sûr, dans le compilateur,

05:00.480 --> 05:03.440
et nous pouvons seulement corriger cela en supprimant

05:03.440 --> 05:06.270
cette ligne de code.

05:06.270 --> 05:07.110
Maintenant nous sommes capables de recompiler sans erreurs.

05:07.110 --> 05:10.930
Et maintenant cela fonctionne comme prévu.

05:10.930 --> 05:12.060
Ainsi, les types de fonctions

05:12.060 --> 05:15.140
nous permettent de décrire le type de fonction spécifique que

05:15.140 --> 05:17.413
nous voulons utiliser quelque part.

05:18.290 --> 05:20.887
Que ce soit une valeur attendue dans un paramètre,

05:20.887 --> 05:23.890
pour créer une fonction avec un certain rappel, ou, comme

05:23.890 --> 05:25.420
ici, une variable.
