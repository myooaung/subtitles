WEBVTT

00:02.290 --> 00:04.300
Verteller: Dus u heeft TypeScript in

00:04.300 --> 00:06.700
actie gezien en het biedt grote voordelen.

00:06.700 --> 00:10.570
Het maakt het schrijven van schone code echt gemakkelijker.

00:10.570 --> 00:14.060
TypeScript voegt Types en data super belangrijk toe.

00:14.060 --> 00:16.810
Met Types moeten we veel explicieter zijn

00:16.810 --> 00:20.970
over hoe dingen werken en we kunnen veel onaanvaardbare en onnodige

00:20.970 --> 00:24.460
fouten vermijden door Types te gebruiken.

00:24.460 --> 00:27.640
Daarnaast kunnen we ook moderne IDE's gebruiken

00:27.640 --> 00:31.070
met ingebouwde ondersteuning voor Types, die deze

00:31.070 --> 00:33.130
types kunnen oppikken en ons betere

00:33.130 --> 00:36.940
auto completion en ingebouwde fouten geven, die worden

00:36.940 --> 00:39.570
getoond nog voor we de code compileren,

00:39.570 --> 00:43.050
omdat ze ook TypeScript begrijpen.

00:43.050 --> 00:46.870
Maar naast de Types en de enorme voordelen die we alleen al door het gebruik

00:46.870 --> 00:49.660
van Types krijgen, krijgen we ook andere mogelijkheden

00:49.660 --> 00:51.410
die TypeScript toevoegt.

00:51.410 --> 00:55.170
We kunnen bepaalde JavaScript-functies van de volgende generatie

00:55.170 --> 00:58.340
gebruiken die u kunt schrijven en gebruiken in onze TypeScript-bestanden,

00:58.340 --> 01:01.890
waarna ze worden gecompileerd tot JavaScript-code voor workarounds

01:01.890 --> 01:05.630
die zelfs in oudere browsers werken.

01:05.630 --> 01:08.170
Als je Bevel kent, dat is een tool waarmee we dat

01:08.170 --> 01:11.120
ook met Vanilla JavaScript kunnen doen, dan lijkt het

01:11.120 --> 01:14.680
daar een beetje op, alleen al ingebouwd in TypeScript.

01:14.680 --> 01:18.350
We kunnen moderne JavaScript-functies gebruiken en toch code

01:18.350 --> 01:21.773
produceren en leveren die ook in oudere browsers werkt.

01:22.610 --> 01:25.210
TypeScript voegt ook bepaalde functies toe

01:25.210 --> 01:26.930
die alleen TypeScript begrijpt,

01:26.930 --> 01:29.070
zoals Interfaces en Generics.

01:29.070 --> 01:32.560
Dit zijn functies die compileren naar JavaScript, maar

01:32.560 --> 01:35.360
dat hoeft niet omdat het functies zijn die ons

01:35.360 --> 01:39.610
tijdens de ontwikkeling helpen die ons duidelijker fouten geven en

01:39.610 --> 01:42.200
ons helpen nog meer fouten te vermijden.

01:42.200 --> 01:45.660
Dus het voegt zelfs meer functies toe op dat front

01:45.660 --> 01:47.950
naast de Types die we al kennen.

01:47.950 --> 01:50.900
Het geeft ons ook bepaalde Meta-programmeerfuncties

01:50.900 --> 01:53.700
zoals Decorators, waarover ik een hele module

01:53.700 --> 01:55.850
in deze cursus heb, waarin je zult begrijpen

01:55.850 --> 01:59.520
wat Decorators precies zijn, waarom ze zo meta zijn, en waarom

01:59.520 --> 02:01.790
ze geweldig zijn.

02:01.790 --> 02:04.230
TypeScript alls is zeer configureerbaar.

02:04.230 --> 02:06.390
We hebben het tot nu toe niet geconfigureerd,

02:06.390 --> 02:09.350
maar ik heb een hele module in de cursus waarin we alleen

02:09.350 --> 02:12.510
praten over de compiler en hoe die te configureren.

02:12.510 --> 02:15.700
En u kunt het echt afstemmen op uw eisen om

02:15.700 --> 02:18.960
het strenger of losser te maken en ervoor

02:18.960 --> 02:23.310
te zorgen dat het zich precies zo gedraagt als u wilt.

02:23.310 --> 02:26.790
En met Modern Tooling met moderne IDE's krijgt u zelfs

02:26.790 --> 02:30.610
ondersteuning in niet-TypeScript projecten.

02:30.610 --> 02:33.700
De IDE die u net zag, Visual Studio Code, geeft u zelfs

02:33.700 --> 02:37.740
betere ondersteuning in gewone JavaScript-bestanden, omdat het

02:37.740 --> 02:41.010
onder de motorkap een aantal TypeScript-functies kan

02:41.010 --> 02:44.710
gebruiken zonder dat u expliciet TypeScript gebruikt.

02:44.710 --> 02:47.640
Dus dat is een gratis winst die je krijgt als

02:47.640 --> 02:49.810
je je bewust bent van TypeScript

02:49.810 --> 02:52.020
en moderne tools gebruikt.

02:52.020 --> 02:54.830
Er zijn dus veel redenen om TypeScript te gebruiken en het is

02:54.830 --> 02:57.460
waarschijnlijk waarom u deze cursus hebt gevolgd.

02:57.460 --> 03:00.360
In deze cursus gaan we het nu stap voor stap leren en leren

03:00.360 --> 03:03.663
we alles over de geweldige functies die het toevoegt.
