WEBVTT

00:02.130 --> 00:03.630
ผู้บรรยาย: ดังนั้นเราจึงดูที่

00:03.630 --> 00:08.360
Lodash ซึ่งเป็นแพ็คเกจวานิลลา JavaScript ที่เราจำเป็นต้องติดตั้งการแปลบางส่วน

00:08.360 --> 00:10.310
และเราได้ดู class-transformer

00:10.310 --> 00:13.530
ซึ่งทำงานในวานิลลา JavaScript เช่นกัน แต่ก็ทำงานได้ดีเป็นพิเศษใน

00:13.530 --> 00:17.328
TypeScript

00:17.328 --> 00:20.330
ทีนี้มาดู class-validator กัน

00:20.330 --> 00:24.540
ตอนนี้เป็นแพ็คเกจที่ใช้ TypeScript จริงๆ

00:24.540 --> 00:28.300
มันสร้างขึ้นจากแนวคิดของ TypeScript decorator และทำให้เรามีวิธีการใหม่ในการทำงานกับพวกเขา

00:28.300 --> 00:34.330
หรืออย่างน้อยก็เกือบจะใหม่ทั้งหมด

00:34.330 --> 00:41.200
หากคุณติดตามโมดูลมัณฑนากรของฉันในหลักสูตรนี้ คุณจะเห็นบางอย่างที่นี่ในการบรรยายนี้

00:41.200 --> 00:44.150
ซึ่งเราสร้างขึ้นเองที่นั่นเช่นกัน

00:44.150 --> 00:49.330
อย่างไรก็ตาม ตอนนี้ ด้วยไลบรารีของบุคคลที่สามนี้ เราไม่ต้องประดิษฐ์วงล้อขึ้นมาใหม่ทั้งหมด

00:49.330 --> 00:51.193
เราไม่ต้องสร้างมันขึ้นมาเอง

00:51.193 --> 00:57.830
และไลบรารีนี้ก็เนื้อหาซับซ้อนกว่าโซลูชันของเราเล็กน้อยในโมดูลของมัณฑนากร

00:57.830 --> 01:00.026
ฉันกำลังพูดถึงการตรวจสอบความถูกต้อง

01:00.026 --> 01:02.870
นี่คือแพ็คเกจที่ช่วยให้เราสามารถเพิ่มกฎการตรวจสอบด้วยความช่วยเหลือของมัณฑนากรบางคน

01:02.870 --> 01:15.610
ภายในคลาส และเมื่อใดก็ตามที่เราสร้างอินสแตนซ์ของคลาสดังกล่าว เราจะตรวจสอบความถูกต้องของกฎที่เราตั้งขึ้นด้วยความช่วยเหลือจากมัณฑนากร

01:15.610 --> 01:18.960
ตอนนี้เพื่อเริ่มต้น เราเพียงแค่ต้องนำเข้าแพ็คเกจนี้ที่นี่

01:18.960 --> 01:26.130
ดังนั้น npm ติดตั้ง class-validator --save และหลังจากนั้นเราสามารถเริ่มได้ทันที

01:26.130 --> 01:30.600
ดังนั้น ให้ฉันรีสตาร์ท webpack-dev-server และเพื่อใช้แพ็คเกจนี้

01:30.600 --> 01:37.490
เราต้องเพิ่มตัวตกแต่งให้กับโมเดล ดังนั้นสำหรับคลาสที่เราต้องการตรวจสอบคุณสมบัติบางอย่าง

01:37.490 --> 01:39.730
ดังนั้นในกรณีของฉันที่นี่ในรุ่นผลิตภัณฑ์

01:39.730 --> 01:43.240
ฉันจะนำเข้าบางอย่างจากตัวตรวจสอบคลาส

01:43.240 --> 01:45.110
และอีกครั้ง ถ้าคุณทำตามโมดูลมัณฑนากรในหลักสูตรนี้

01:45.110 --> 01:52.870
นี่เป็นแนวคิดที่ฉันสร้างขึ้นตั้งแต่เริ่มต้นที่นั่นโดยไม่มีแพ็คเกจนี้

01:52.870 --> 01:56.270
แต่แน่นอนว่าเราสร้างขึ้นในเวอร์ชันที่เรียบง่ายและไร้เดียงสา

01:56.270 --> 02:01.200
ด้วยแพ็คเกจนี้ เราไม่ต้องสร้างด้วยตัวเองและยังซับซ้อนกว่าด้วย

02:01.200 --> 02:04.820
ตอนนี้จากตัวตรวจสอบคลาส เราสามารถนำเข้ามัณฑนากรบางตัวได้

02:04.820 --> 02:05.893
ตัวอย่างเช่น

02:07.139 --> 02:08.630
IsNotEmpty

02:08.630 --> 02:11.410
หรือ IsNumber

02:11.410 --> 02:13.500
เรายังสามารถนำเข้า IsPositive

02:15.940 --> 02:18.940
ตอนนี้เราสามารถเพิ่มลงในคุณสมบัติที่เราต้องการตรวจสอบได้

02:18.940 --> 02:20.900
ตัวอย่างเช่น ในชื่อเรื่อง

02:20.900 --> 02:24.220
เราสามารถเพิ่ม IsNotEmpty เป็นมัณฑนากรแบบนี้ได้

02:24.220 --> 02:26.390
และทั้งหมดนี้เป็นโรงงานมัณฑนากร

02:26.390 --> 02:29.610
ดังนั้นคุณต้องดำเนินการเสมอ

02:29.610 --> 02:31.318
และที่นี่

02:31.318 --> 02:33.485
IsNumber และ

02:34.472 --> 02:37.380
IsPositive

02:37.380 --> 02:38.763
มาดำเนินการกันเถอะ

02:40.250 --> 02:41.730
ตอนนี้หากต้องการใช้มัณฑนากรที่นี่

02:41.730 --> 02:49.550
คุณควรไปที่ tsconfig ด้วย js และตรวจสอบให้แน่ใจว่าคุณได้เปิดใช้งานตัวตกแต่งทดลองที่นั่น

02:49.550 --> 02:55.040
หลังจากนั้นให้บันทึกสิ่งนี้ และตอนนี้พื้นที่เหล่านี้ควรจะหายไปด้วย

02:55.040 --> 02:57.300
เรายังจำเป็นต้องรีสตาร์ทเซิร์ฟเวอร์

02:57.300 --> 03:00.840
dev เพื่อให้รับ tsconfig ใหม่ การแปลง js

03:00.840 --> 03:02.650
ตอนนี้เราได้เพิ่มกฎเหล่านี้

03:02.650 --> 03:04.768
กฎการตรวจสอบที่นี่

03:04.768 --> 03:07.710
เรากำลังบอกว่าชื่อเรื่องต้องไม่เป็นสตริงว่าง

03:07.710 --> 03:11.830
และตัวเลขควรเป็นจำนวนบวก

03:11.830 --> 03:15.119
ตอนนี้เราสร้างผลิตภัณฑ์ใหม่ได้ที่นี่

03:15.119 --> 03:19.078
สมมติว่ามี newProd ที่เราเรียกผลิตภัณฑ์ใหม่

03:19.078 --> 03:21.720
และฉันส่งสตริงว่างสำหรับชื่อเรื่อง

03:21.720 --> 03:25.210
แล้วลบ 5 99 ในสำหรับหมายเลข

03:25.210 --> 03:26.700
ถ้าฉันปลอบใจแล้ว เข้าสู่ระบบ

03:27.576 --> 03:29.920
newProd, getInformation

03:29.920 --> 03:31.730
และดำเนินการตามนี้

03:31.730 --> 03:34.830
มาดูกันว่ามันทำงานที่ไหน

03:34.830 --> 03:35.683
โอเค บันทึกไว้

03:37.840 --> 03:40.040
หึ มันได้ผล

03:40.040 --> 03:42.330
เรายังไม่ได้อยู่ที่นั่นทั้งหมด

03:42.330 --> 03:46.470
เราตั้งกฎกับมัณฑนากรของเรา

03:46.470 --> 03:49.560
แต่นักตกแต่งเหล่านี้ไม่ได้ทำอะไรมากนัก

03:49.560 --> 03:56.190
ตอนนี้เราต้องนำเข้าเมธอดตัวตรวจสอบความถูกต้องจากตัวตรวจสอบคลาสแทน

03:56.190 --> 03:57.300
ดังนั้นจากแพ็คเกจนี้

03:57.300 --> 04:05.750
เรานำเข้าการตรวจสอบ และเราต้องดำเนินการนี้กับตัวอย่างที่เป็นรูปธรรม นอกชั้นเรียนที่เราเพิ่มผู้ตกแต่งของเราเข้าไป

04:05.750 --> 04:07.300
ดังนั้น ในกรณีนี้ เราสามารถเรียกใช้การตรวจสอบความถูกต้องและส่ง

04:07.300 --> 04:12.020
newProd ไปให้

04:12.020 --> 04:19.150
จากนั้นการตรวจสอบจะส่งคืนสัญญาซึ่งอาจทำให้เกิดข้อผิดพลาดในการตรวจสอบความถูกต้อง

04:19.150 --> 04:21.440
จากนั้นเราก็บวกตรงนี้ ถ้าคุณอยู่ในฟังก์ชันการค่อยๆ

04:21.440 --> 04:25.680
เปลี่ยน คุณก็สามารถใช้น้ำหนักเดียวได้

04:25.680 --> 04:30.093
และที่นี่เราได้รับข้อผิดพลาดที่ฟังก์ชันตรวจสอบความถูกต้องพบ

04:30.980 --> 04:31.813
สิ่งสำคัญตอนนี้

04:31.813 --> 04:34.950
เรามักจะลงเอยด้วยข้อผิดพลาดนั้น แม้ว่าจะมีข้อผิดพลาด

04:34.950 --> 04:36.560
ดังนั้นหากมีข้อผิดพลาดในการตรวจสอบ

04:36.560 --> 04:41.120
เราจะไม่เข้าไปใน catch block เราจะเข้าไปในบล็อกนั้นเสมอ

04:41.120 --> 04:48.400
ตอนนี้เราสามารถตรวจสอบได้ว่าข้อผิดพลาดซึ่งเป็นอาร์เรย์มีความยาวจุดมากกว่าศูนย์หรือไม่

04:48.400 --> 04:51.300
ซึ่งหมายความว่ามีข้อผิดพลาดในการตรวจสอบ

04:51.300 --> 04:52.910
ในกรณีนี้ เราสามารถบันทึกข้อผิดพลาดในการตรวจสอบ

04:53.750 --> 04:59.200
และอาจแสดงข้อผิดพลาดที่เราพบด้วย

04:59.200 --> 05:01.820
ดังนั้นคอนโซล บันทึกข้อผิดพลาด

05:01.820 --> 05:05.290
และในกรณีของฉันที่นี่ ฉันจะบันทึกข้อมูล

05:05.290 --> 05:09.100
แน่นอนว่าตอนนี้ขึ้นอยู่กับแอปพลิเคชันที่คุณกำลังสร้างสิ่งที่คุณต้องการทำที่นี่

05:09.100 --> 05:10.860
คุณอาจต้องการแสดงการแจ้งเตือนแก่ผู้ใช้ในกรณีนี้ที่นี่

05:10.860 --> 05:13.790
หากมีข้อผิดพลาด

05:13.790 --> 05:16.520
คุณอาจต้องการรีเซ็ตอินพุต อะไรก็ได้ที่คุณต้องการ

05:16.520 --> 05:19.690
ที่นี่ฉันจะบันทึกบางอย่างลงในคอนโซล

05:19.690 --> 05:22.080
และถ้าเราบันทึกตอนนี้ คุณจะเห็นข้อผิดพลาดในการตรวจสอบ

05:22.080 --> 05:27.830
และนี่คืออาร์เรย์ของข้อผิดพลาดที่พบ

05:27.830 --> 05:31.890
ตัวอย่างเช่น ข้อผิดพลาดแรกอยู่ที่คุณสมบัติชื่อ

05:31.890 --> 05:34.770
ซึ่งไม่ควรว่างเปล่า

05:34.770 --> 05:38.290
และข้อผิดพลาดที่สองคือคุณสมบัติของราคา

05:38.290 --> 05:41.150
ซึ่งจะต้องเป็นจำนวนบวก

05:41.150 --> 05:50.170
และนี่คือวิธีง่าย ๆ ที่คุณสามารถเพิ่มการตรวจสอบที่มีประสิทธิภาพมากให้กับโครงการของคุณด้วยวิธีการที่ใช้มัณฑนากรนี้

05:50.170 --> 05:53.190
เกี่ยวข้องกับสิ่งที่เราทำก่อนหน้านี้ในหลักสูตร

05:53.190 --> 05:56.062
และโมดูลมัณฑนากร แต่อย่างที่ฉันได้กล่าวไปหลายครั้ง

05:56.062 --> 06:03.610
กฎที่มีอยู่มากมายซับซ้อนมากขึ้น และคุณสามารถเรียนรู้ทั้งหมดเกี่ยวกับสิ่งนั้นในเอกสารของแพ็คเกจนี้ และไม่ต้องมี

06:03.610 --> 06:06.350
คิดค้นล้อใหม่

06:06.350 --> 06:10.930
ดังนั้น class-Validator package จึงเป็นแพ็คเกจที่ทรงพลังที่คุณควรทราบ

06:10.930 --> 06:14.693
หากคุณกำลังสร้างโปรเจกต์ที่ใหญ่ขึ้นด้วย TypeScript
