WEBVTT

00:02.340 --> 00:05.740
En dit is het voor dit kleine demonstratieproject.

00:05.740 --> 00:08.590
Nu kun je natuurlijk altijd meer doen, maar

00:08.590 --> 00:12.070
hier gebruiken we al een aantal leuke functies waarover

00:12.070 --> 00:14.950
je in deze cursus hebt geleerd.

00:14.950 --> 00:18.220
En met dit project heb je hopelijk een beter idee van

00:18.220 --> 00:22.610
wanneer je welke functie gebruikt, waarom bepaalde functies zoals

00:22.610 --> 00:25.968
decorators en interfaces bestaan, hoe ze ons kunnen

00:25.968 --> 00:30.770
helpen, en hoe we type-veilige, schaalbare code kunnen schrijven.

00:30.770 --> 00:33.735
Nu, voel je vrij om verder te bouwen op dit project, zelf

00:33.735 --> 00:35.826
meer functies toe te voegen, te onderzoeken

00:35.826 --> 00:38.110
wat je daar zou kunnen veranderen, en gewoon

00:38.110 --> 00:40.870
te oefenen met het werken met typescript.

00:40.870 --> 00:44.344
Ik ben tevreden met de huidige staat en in de volgende module

00:44.344 --> 00:47.456
wil ik een voor de hand liggend probleem aanpakken.

00:47.456 --> 00:51.150
We hebben een supergroot bestand hier.

00:51.150 --> 00:55.030
Dus, dit opsplitsen in meerdere bestanden zou ons echt helpen bij

00:55.030 --> 00:56.953
het beheren van onze codebase.

00:56.953 --> 01:00.090
Want als we nu ergens iets willen veranderen, moeten we

01:00.090 --> 01:02.710
altijd door het hele bestand scrollen en de plaats

01:02.710 --> 01:05.340
vinden waar we iets willen veranderen.

01:05.340 --> 01:07.000
Dat is niet ideaal.

01:07.000 --> 01:09.030
Er is al vrij veel code, in nog grotere

01:09.030 --> 01:12.770
projecten zou het totaal onbeheersbaar worden.

01:12.770 --> 01:14.780
In de volgende module zullen we dus

01:14.780 --> 01:17.750
kijken naar de functies die het ons biedt om onze code

01:17.750 --> 01:20.423
over meerdere bestanden te verdelen.
