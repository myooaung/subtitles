WEBVTT

00:02.170 --> 00:03.860
Instruktor: Więc teraz, gdy zarejestrowaliśmy

00:03.860 --> 00:05.630
kilka tras, dodajmy trochę logiki dla tych tras.

00:05.630 --> 00:07.730
W tym celu dodam folder z kontrolerami.

00:07.730 --> 00:08.750
To nie jest konieczność,

00:08.750 --> 00:11.550
ale chcę podzielić moją logikę tutaj na kontrolery

00:11.550 --> 00:13.650
i trasy do folderu tras.

00:13.650 --> 00:16.740
A w kontrolerach dodam też todos. ts, który będzie teraz

00:16.740 --> 00:19.230
zawierał funkcje kontrolera, które

00:19.230 --> 00:21.990
chcemy wskazać z wnętrza naszych tras.

00:21.990 --> 00:25.120
Więc tutaj potrzebuję funkcji, którą wyeksportuję,

00:25.120 --> 00:27.220
i stworzę ją jako funkcję strzałkową,

00:27.220 --> 00:29.170
co jednak nie jest koniecznością,

00:29.170 --> 00:31.290
i nazwę to createTodo, i jest to funkcja,

00:32.420 --> 00:34.510
która otrzyma te typowe parametry,

00:34.510 --> 00:36.720
które otrzymujesz w każdej funkcji middleware

00:36.720 --> 00:38.830
w express, żądanie, odpowiedź, i następna

00:38.830 --> 00:41.297
funkcja.

00:41.297 --> 00:44.550
I właśnie zobaczyliśmy skąd możemy wziąć typy.

00:44.550 --> 00:47.190
Możemy zaimportować request,

00:47.190 --> 00:50.460
response i next function z express.

00:50.460 --> 00:52.800
To importuje nam te typy.

00:52.800 --> 00:54.910
Możemy je wtedy dodać tutaj.

00:54.910 --> 00:57.230
Teraz, zawsze dodając wszystkie te typy tutaj, jak zrobiliśmy

00:57.230 --> 00:59.980
to w oprogramowaniu pośrednim obsługi błędów, jak również, może

00:59.980 --> 01:01.300
być uciążliwe, choć.

01:01.300 --> 01:03.750
To działa, ale może być denerwujące.

01:03.750 --> 01:05.190
Więc jest skrót.

01:05.190 --> 01:08.220
Zamiast ustawiać typy na wszystkich tych parametrach,

01:08.220 --> 01:11.160
możemy również po prostu powiedzieć TypeScriptowi,

01:11.160 --> 01:14.610
jaki rodzaj funkcji chcemy przechowywać w tej stałej createTodo,

01:14.610 --> 01:16.260
a następnie możemy po prostu

01:16.260 --> 01:19.530
zaimportować typ RequestHandler z express, a następnie

01:19.530 --> 01:24.340
ustawić to tutaj, createTodo, do typu RequestHandler.

01:24.340 --> 01:28.780
I teraz widzisz, że TypeScript wie, że tutaj mamy żądanie, tutaj mamy odpowiedź,

01:28.780 --> 01:30.560
a tutaj mamy tę następną funkcję,

01:30.560 --> 01:32.590
ponieważ nasz RequestHandler jest

01:32.590 --> 01:35.730
zdefiniowany, aby wyglądać tak.

01:35.730 --> 01:38.080
Jest to funkcja z trzema parametrami,

01:38.080 --> 01:40.160
gdzie pierwszy parametr to żądanie,

01:40.160 --> 01:42.030
drugi parametr to odpowiedź,

01:42.030 --> 01:44.810
a trzeci to kolejna funkcja.

01:44.810 --> 01:47.313
Więc to może uprościć tę konfigurację tutaj.

01:48.195 --> 01:49.380
RequestHandler oczywiście

01:49.380 --> 01:51.360
zawsze jest dostępny, ponieważ zainstalowaliśmy

01:51.360 --> 01:52.570
typy dla ekspresu i dlatego

01:52.570 --> 01:55.270
możemy dodać ten import tutaj.

01:55.270 --> 01:57.940
Bądź świadomy, że ten import zawsze zniknie, gdy

01:57.940 --> 01:59.960
to skompiluje się do JavaScript, ponieważ

01:59.960 --> 02:02.300
po prostu importujemy tutaj typ.

02:02.300 --> 02:05.030
To nie jest importowanie żadnego kodu, który wykonałby się.

02:05.030 --> 02:06.930
Jest to po prostu importowanie typu.

02:06.930 --> 02:08.650
I dlatego podczas kompilacji

02:08.650 --> 02:11.290
zostanie usunięty, ponieważ nie dodaje

02:11.290 --> 02:15.860
niczego, co byłoby wymagane, gdy to działa w zwykłym JavaScript.

02:15.860 --> 02:16.693
Dzięki temu jednak

02:16.693 --> 02:18.900
dostałem funkcję createTodo, a teraz

02:18.900 --> 02:22.240
dlaczego nie dodamy tutaj tablicy TODOS, aby zarządzać

02:22.240 --> 02:25.530
jakimiś to dosami tylko w pamięci, oczywiście.

02:25.530 --> 02:28.310
To zniknie, gdy nasz serwer zrestartuje się,

02:28.310 --> 02:31.460
ponieważ jest to tylko stała w JavaScript w końcu.

02:31.460 --> 02:32.293
Można oczywiście

02:32.293 --> 02:34.770
wyobrazić sobie, że rozmawiamy tutaj również z

02:34.770 --> 02:36.360
bazą danych, ale chcę zachować

02:36.360 --> 02:38.630
prostotę, ponieważ chodzi o JavaScript i TypeScript,

02:38.630 --> 02:41.323
a nie tyle o połączenia z bazą danych.

02:42.390 --> 02:43.790
Więc tutaj mam to dos,

02:43.790 --> 02:47.600
a teraz tutaj chcę stworzyć nowy to do tutaj, kiedy mamy przychodzące

02:47.600 --> 02:49.320
żądanie, i to powinno być

02:49.320 --> 02:51.020
nowy obiekt, i dlaczego nie

02:51.020 --> 02:52.980
tworzymy blueprint dla tego

02:52.980 --> 02:55.420
obiektu, model.

02:55.420 --> 02:57.640
Dodam więc folder models,

02:57.640 --> 02:59.030
a w tym folderze

02:59.030 --> 03:04.030
models dodam todo. ts i wyeksportować tutaj klasę, którą nazwę

03:04.760 --> 03:06.250
Todo, gdzie definiuję jak

03:06.250 --> 03:08.210
powinno wyglądać to do.

03:08.210 --> 03:10.330
Tam możemy dodać konstruktor, a także

03:10.330 --> 03:13.129
użyć tego skrótu TypeScript, gdzie możemy dodać

03:13.129 --> 03:16.440
modyfikator dostępu, taki jak public, a następnie nazwę

03:16.440 --> 03:19.360
właściwości, taką jak ID, która jest typu string,

03:19.360 --> 03:21.250
powiedzmy, i tekst, który jest

03:21.250 --> 03:24.050
również typu string, a następnie TypeScript

03:24.050 --> 03:27.470
automatycznie doda pola, właściwości z równymi nazwami

03:27.470 --> 03:30.130
i przypisanymi wartościami, które przekazujemy

03:30.130 --> 03:32.750
do konstruktora do tych pól, gdy tylko instancjonujemy

03:32.750 --> 03:37.230
tę klasę do zrobienia.

03:37.230 --> 03:38.670
Więc użyję tej składni tutaj,

03:38.670 --> 03:40.060
a ty nauczyłeś się o tej składni

03:40.060 --> 03:41.810
wcześniej w kursie już.

03:41.810 --> 03:44.660
A teraz w todos. ts tutaj w kontrolerze,

03:44.660 --> 03:47.893
możemy oczywiście zaimportować Todo

03:49.020 --> 03:53.403
z, idąc o jeden poziom wyżej, models/todo, i użyć tego

03:54.530 --> 03:58.800
typu i klasy teraz tutaj w naszym pliku.

03:58.800 --> 04:01.320
I jest to zarówno typ, jak i klasa, ponieważ, cóż,

04:01.320 --> 04:02.800
oczywiście, jest to klasa, a

04:02.800 --> 04:05.750
każda klasa automatycznie działa również jako typ.

04:05.750 --> 04:08.550
To również widziałeś w całym tym kursie.

04:08.550 --> 04:09.750
Więc teraz tutaj możemy

04:09.750 --> 04:11.910
przede wszystkim powiedzieć, że TODOS tutaj

04:11.910 --> 04:13.550
będzie tablicą to dos.

04:13.550 --> 04:15.480
Ta dodatkowa adnotacja nie boli, abyśmy

04:15.480 --> 04:18.590
otrzymali odpowiednie wsparcie, gdy zaczniemy dodawać to

04:18.590 --> 04:21.410
dos lub zaczniemy pracować z to dos w tej tablicy.

04:21.410 --> 04:23.610
I tutaj, kiedy tworzę nowe to

04:23.610 --> 04:26.220
do, teraz tworzę je poprzez instancję

04:26.220 --> 04:28.370
tej klasy, i musimy przekazać

04:28.370 --> 04:32.030
ID, a tutaj stworzę losowy pseudo-unique ID z Math

04:32.030 --> 04:34.230
random toString.

04:34.230 --> 04:35.270
To nie jest naprawdę wyjątkowe,

04:35.270 --> 04:36.660
ale wystarczająco dobre tutaj.

04:36.660 --> 04:39.170
A teraz dla wartości tutaj, tam oczywiście

04:39.170 --> 04:41.670
chcę ustawić jakiś tekst, który spodziewam

04:41.670 --> 04:45.530
się dostać w moim ciele przychodzącego żądania.

04:45.530 --> 04:48.823
Spodziewam się więc, że dostanę tu swój tekst, w zasadzie

04:49.750 --> 04:53.270
na request body. tekst, tak że mogę następnie

04:53.270 --> 04:56.280
ustawić tekst jako wartość tutaj.

04:56.280 --> 04:57.113
Teraz to działa,

04:57.113 --> 04:59.640
ale proszę zauważyć, że to działa tylko dlatego,

04:59.640 --> 05:02.320
że TypeScript widzi, że to jest typu any.

05:02.320 --> 05:04.420
Nie wie, że jest to ciąg znaków.

05:04.420 --> 05:05.510
I nie może wiedzieć,

05:05.510 --> 05:08.390
bo skąd TypeScript miałby wiedzieć, które dane będą

05:08.390 --> 05:11.140
częścią naszych przychodzących żądań?

05:11.140 --> 05:12.430
Nie jest to dla niego jasne.

05:12.430 --> 05:14.260
Nigdzie nie podajemy, co

05:14.260 --> 05:17.620
będzie w środku otrzymanych wniosków.

05:17.620 --> 05:19.270
Jak to teraz poprawić?

05:19.270 --> 05:21.780
Otóż możemy zastosować na przykład typecasting.

05:21.780 --> 05:23.660
Typecasting jest zawsze świetnym

05:23.660 --> 05:26.090
rozwiązaniem, jeśli wiesz o konkretnym typie,

05:26.090 --> 05:27.360
ale TypeScript nie.

05:27.360 --> 05:30.440
Więc tutaj w ciele żądania, zanim uzyskamy dostęp do tekstu, możemy

05:30.440 --> 05:32.650
typecast to być obiekt, w którym mamy właściwość

05:32.650 --> 05:34.900
text, która jest ciągiem znaków.

05:34.900 --> 05:36.920
Ponieważ budujemy tę aplikację, wiemy,

05:36.920 --> 05:40.320
czego oczekujemy na naszych przychodzących żądaniach.

05:40.320 --> 05:42.750
Więc skoro wiemy, że na przychodzącym ciele żądania

05:42.750 --> 05:44.166
będzie właściwość text, możemy

05:44.166 --> 05:46.630
ją rzucić, aby była takim obiektem.

05:46.630 --> 05:51.480
A teraz tutaj dostajemy odpowiednie wsparcie TypeScript, a także IDE.

05:51.480 --> 05:53.560
Więc z tym, dodajemy nowy do zrobienia.

05:53.560 --> 05:55.470
Teraz możemy sięgnąć do TODOS

05:55.470 --> 05:58.280
i przepchnąć nowe to do na tę tablicę.

05:58.280 --> 05:59.330
I znowu, to oczywiście

05:59.330 --> 06:01.060
będzie przechowywane tylko tutaj

06:01.060 --> 06:02.750
jako stałe, a zatem tylko w pamięci,

06:02.750 --> 06:05.650
ponieważ praca z bazą danych nie jest tak naprawdę

06:05.650 --> 06:08.880
bezpośrednio związana z węzłem lub TypeScript, ale, cóż,

06:08.880 --> 06:11.170
z bazą danych.

06:11.170 --> 06:14.140
Więc z tym, mamy tutaj funkcję create Todo.

06:14.140 --> 06:16.400
Teraz przejdźmy do tras to do i zaimportujmy

06:16.400 --> 06:19.070
tę funkcję kontrolera.

06:19.070 --> 06:22.030
Więc zaimportuj z folderu kontrolerów

06:22.030 --> 06:24.000
z pliku todos tam, i zaimportuj

06:24.000 --> 06:26.660
funkcję create Todo i wskaż na tę

06:26.660 --> 06:30.100
funkcję tutaj na trasie postu, aby każde

06:30.100 --> 06:38.390
żądanie, które celuje w slash todos slash nic nie docierało do funkcji createTodo.

06:38.390 --> 06:39.580
Nie wykonuj go tutaj.

06:39.580 --> 06:40.650
Wystarczy wskazać na niego.

06:40.650 --> 06:43.890
Zostanie on wykonany dla ciebie przez węzeł i ekspresowo w twoim działającym

06:43.890 --> 06:45.883
serwerze internetowym później.

06:46.880 --> 06:49.630
Więc teraz mamy tutaj tę funkcję.

06:49.630 --> 06:50.900
Nie skończyliśmy jednak.

06:50.900 --> 06:52.290
W kontrolerze wszyscy po prostu

06:52.290 --> 06:54.360
powinniśmy zwrócić odpowiedź.

06:54.360 --> 06:56.720
więc tutaj możemy wysłać odpowiedź,

06:56.720 --> 06:59.420
na przykład w formacie JSON z metodą JSON,

06:59.420 --> 07:02.300
gdzie mówimy wiadomość utworzyła todo lub

07:02.300 --> 07:04.040
cokolwiek chcesz, i mamy klucz

07:04.040 --> 07:07.770
createdTodo, być może, gdzie przekazujemy nowe todo, które

07:07.770 --> 07:10.520
zostało dodane po stronie serwera, tak aby

07:10.520 --> 07:12.660
na kliencie, mogliśmy również użyć

07:12.660 --> 07:14.490
tego.

07:14.490 --> 07:17.750
I może również ustawić kod statusu 201 tutaj, aby wskazać,

07:17.750 --> 07:19.700
że odnieśliśmy sukces i że zasób

07:19.700 --> 07:21.793
został utworzony.

07:22.680 --> 07:24.640
Teraz musimy się tylko upewnić, że

07:24.640 --> 07:28.500
ciało, które próbujemy tu wyodrębnić, rzeczywiście istnieje.

07:28.500 --> 07:29.770
I za dane i za aplikację. ts, musimy

07:29.770 --> 07:33.130
parsować ciała przychodzących żądań.

07:33.130 --> 07:37.620
W tym celu możemy zaimportować z pakietu body-parser,

07:37.620 --> 07:39.220
który również zainstalowaliśmy,

07:39.220 --> 07:41.380
i z tego pakietu zaimportować

07:41.380 --> 07:46.380
metodę JSON w ten sposób.

07:46.410 --> 07:49.170
A potem tutaj możesz zarejestrować to

07:49.170 --> 07:51.310
wykonane jako middleware.

07:51.310 --> 07:54.480
Jest to więc oprogramowanie pośrednie dostarczane przez

07:54.480 --> 07:58.130
pakiet innej firmy, które będzie analizować ciała wszystkich przychodzących

07:58.130 --> 08:01.570
żądań i wyodrębniać wszelkie dane JSON, które znajdzie, aby

08:01.570 --> 08:05.990
następnie wypełnić klucz ciała na tym obiekcie żądania z tymi sparsowanymi danymi

08:05.990 --> 08:07.970
JSON.

08:07.970 --> 08:10.290
To właśnie robi ten JSON middleware

08:10.290 --> 08:12.503
z pakietu body-parser.

08:13.890 --> 08:16.520
A dzięki temu powinniśmy mieć serwer, który jest

08:16.520 --> 08:18.230
w stanie stworzyć new to dos.

08:18.230 --> 08:22.210
Zapisz wszystkie pliki i upewnij się, że rekompiluje się bez błędów.

08:22.210 --> 08:26.150
Upewnij się, że nodemon nadal obsługuje aplikację. plik js.

08:26.150 --> 08:28.560
A teraz musimy wysłać zapytanie o post.

08:28.560 --> 08:31.150
A w przypadku przeglądarki nie możemy tego zrobić,

08:31.150 --> 08:34.260
ale możemy użyć do tego narzędzia - Postmana.

08:34.260 --> 08:35.600
Możesz po prostu go wyszukać, a następnie

08:35.600 --> 08:38.160
zainstalować aplikację Postman w swoim systemie.

08:38.160 --> 08:39.283
Można z niego korzystać za darmo.

08:40.440 --> 08:41.570
Kiedy już go zainstalujesz, możesz

08:41.570 --> 08:43.390
go uruchomić i powinieneś zobaczyć ekran, który wygląda

08:43.390 --> 08:44.440
mniej więcej tak.

08:44.440 --> 08:46.460
Jeśli widzisz nakładkę modalną, możesz

08:46.460 --> 08:48.010
ją po prostu zamknąć.

08:48.010 --> 08:50.240
I tutaj możesz teraz stworzyć nowe żądanie,

08:50.240 --> 08:51.740
klikając na ten plus, wybierając

08:51.740 --> 08:53.040
typ żądania, w tym przypadku

08:53.040 --> 08:56.450
żądanie postu, wprowadzając adres URL.

08:56.450 --> 08:58.820
Tutaj jest to localhost 3000,

08:58.820 --> 09:01.660
3000 ponieważ taki port wybrałem.

09:01.660 --> 09:03.100
A następnie musimy

09:03.100 --> 09:06.320
wysłać żądanie do slash todos slash nic.

09:06.320 --> 09:10.000
Więc tutaj do slash todos slash nic.

09:10.000 --> 09:12.120
Chcemy dołączyć ciało do żądania,

09:12.120 --> 09:15.440
a to powinno być surowe ciało JSON tutaj, aby wysłać

09:15.440 --> 09:17.010
jakieś dane JSON.

09:17.010 --> 09:19.480
A teraz co musimy tu wysłać?

09:19.480 --> 09:21.840
Cóż, co wyodrębniamy w funkcji middleware, więc

09:21.840 --> 09:22.880
w tym przypadku powinniśmy

09:22.880 --> 09:24.570
mieć właściwość tekstową jako część

09:24.570 --> 09:27.410
naszych danych JSON, które wysyłamy.

09:27.410 --> 09:29.610
Więc tutaj dodajmy tekst jako nazwę,

09:29.610 --> 09:31.070
a następnie dowolny tekst

09:31.070 --> 09:33.230
do wyboru, jak np. zakończ kurs.

09:33.230 --> 09:36.960
A jeśli teraz klikniesz wyślij, to wysyła żądanie, a tutaj jest

09:36.960 --> 09:38.990
odpowiedź, a to wygląda dobrze.

09:38.990 --> 09:40.670
Dostaliśmy z powrotem create a to do.

09:40.670 --> 09:43.600
Widzimy ID, które zostało wygenerowane oraz tekst.

09:43.600 --> 09:45.870
Tak więc nasz backend wyraźnie działa tutaj.

09:45.870 --> 09:47.690
I napisaliśmy to wszystko za pomocą TypeScript,

09:47.690 --> 09:49.880
ale serwujemy to jako zwykły JavaScript.

09:49.880 --> 09:51.183
Na tym polega cała sztuczka.
