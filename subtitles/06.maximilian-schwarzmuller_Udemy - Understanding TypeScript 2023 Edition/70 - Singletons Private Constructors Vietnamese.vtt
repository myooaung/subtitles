WEBVTT

00:02.260 --> 00:04.960
-: Bây giờ có một tính năng thú vị cuối

00:04.960 --> 00:07.020
cùng mà tôi cũng muốn giới

00:07.020 --> 00:10.330
thiệu, đó là private constructor.

00:10.330 --> 00:13.823
Và một hàm tạo riêng là gì và nó có công dụng gì?

00:14.870 --> 00:17.700
Có một mẫu trong lập trình hướng

00:17.700 --> 00:20.460
đối tượng được gọi là mẫu đơn.

00:20.460 --> 00:23.030
Mẫu singleton nhằm đảm bảo rằng

00:23.030 --> 00:26.440
bạn luôn chỉ có chính xác một thể hiện của một

00:26.440 --> 00:28.030
lớp nhất định.

00:28.030 --> 00:30.558
Điều này có thể hữu ích trong các tình huống mà

00:30.558 --> 00:33.000
bạn bằng cách nào đó không thể sử dụng các phương

00:33.000 --> 00:34.450
thức hoặc thuộc tính tĩnh

00:34.450 --> 00:36.440
hoặc bạn không muốn, nhưng đồng thời

00:36.440 --> 00:39.600
bạn muốn đảm bảo rằng bạn không thể tạo nhiều đối tượng

00:39.600 --> 00:40.730
dựa trên một lớp nhưng

00:40.730 --> 00:44.630
bạn luôn có chính xác một đối tượng dựa trên một lớp.

00:44.630 --> 00:47.660
Giả sử đối với Phòng Kế toán, chúng tôi muốn đảm

00:47.660 --> 00:51.460
bảo rằng chúng tôi chỉ có thể tạo chính xác một đối tượng dựa

00:51.460 --> 00:53.320
trên lớp này, bởi vì chúng tôi

00:53.320 --> 00:56.010
có chính xác một phòng kế toán trong toàn

00:56.010 --> 00:57.840
bộ công ty của mình.

00:57.840 --> 01:00.260
Chúng tôi có thể có nhiều bộ phận CNTT nhưng

01:00.260 --> 01:03.290
chúng tôi có chính xác một bộ phận kế toán.

01:03.290 --> 01:05.310
Bây giờ để thực thi điều này và để tránh

01:05.310 --> 01:09.020
việc chúng ta gọi new Accounting Department nhiều lần theo cách

01:09.020 --> 01:12.260
thủ công, chúng ta có thể chuyển phương thức khởi tạo của

01:12.260 --> 01:14.320
lớp Accounting Department thành một

01:14.320 --> 01:17.360
phương thức khởi tạo riêng bằng cách thêm từ khóa private

01:17.360 --> 01:18.860
vào trước nó.

01:18.860 --> 01:20.560
Bây giờ điều này làm là, nó đảm

01:20.560 --> 01:23.480
bảo rằng chúng ta không thể gọi new cho điều này.

01:23.480 --> 01:25.160
Ở đây bạn thấy tôi đang gặp

01:25.160 --> 01:27.620
lỗi vì hàm tạo là riêng tư nên chỉ có thể

01:27.620 --> 01:30.600
truy cập từ bên trong lớp, điều này nghe có vẻ

01:30.600 --> 01:33.690
lạ vì làm sao chúng ta có thể vào bên trong lớp nếu

01:33.690 --> 01:37.920
chúng ta không thể tạo các đối tượng dựa trên nó nữa.

01:37.920 --> 01:40.490
Câu trả lời là các phương thức tĩnh.

01:40.490 --> 01:43.610
Một phương thức tĩnh có thể được gọi trên chính lớp đó

01:43.610 --> 01:46.250
để bạn không phải khởi tạo nó cho điều đó.

01:46.250 --> 01:49.460
Vì vậy, ở đây chúng ta có thể thêm một phương thức tĩnh mà chúng ta

01:49.460 --> 01:51.340
có thể gọi là getInstance, tuy nhiên

01:51.340 --> 01:53.260
cái tên hoàn toàn tùy thuộc vào bạn.

01:53.260 --> 01:56.930
Bây giờ getInstance sẽ kiểm tra xem chúng ta đã có một thể hiện của

01:56.930 --> 02:00.090
lớp này chưa và nếu chưa, hãy trả về một thể hiện mới.

02:00.090 --> 02:04.300
Để làm được điều đó, chúng ta có thể thêm một thể hiện thuộc tính tĩnh mới,

02:04.300 --> 02:06.350
một thuộc tính riêng tĩnh để bạn có

02:06.350 --> 02:09.200
thể đặt private trước thể hiện được gọi là tĩnh

02:09.200 --> 02:12.040
sẽ thuộc loại Accounting Department.

02:12.040 --> 02:16.570
Vì vậy, trong đó chúng ta sẽ lưu trữ một thể hiện của Phòng kế toán.

02:16.570 --> 02:17.580
Vì vậy, đó là những

02:17.580 --> 02:19.100
gì tôi đang nói ở đây, tôi

02:19.100 --> 02:21.410
có một thuộc tính tĩnh có thể truy cập được

02:21.410 --> 02:23.310
trên chính lớp đó, nhưng chỉ từ

02:23.310 --> 02:25.960
bên trong lớp và giá trị chúng tôi lưu trữ trong

02:25.960 --> 02:30.140
đó sẽ thuộc loại Bộ phận Kế toán, do đó, của chính lớp đó.

02:30.140 --> 02:33.880
Bây giờ chúng ta có thể sử dụng thuộc tính thể hiện này ở đây trong getInstance

02:33.880 --> 02:38.880
và kiểm tra xem điều này có đúng không. dụ được đặt ở đây bên trong tĩnh, nếu chúng

02:39.260 --> 02:43.570
ta sử dụng cái này, nó sẽ tham chiếu đến chính lớp đó và sau đó chúng

02:43.570 --> 02:47.610
ta có thể truy cập tất cả các thuộc tính tĩnh khác trên đó.

02:47.610 --> 02:51.963
Cách khác là sử dụng tên lớp.

02:53.720 --> 02:58.450
Và bây giờ nếu cái này được đặt, tôi muốn trả lại cái này. ví dụ, hoặc một lần nữa

02:58.450 --> 03:01.600
tên lớp. thể hiện nhưng điều này bên trong một

03:01.600 --> 03:04.030
phương thức tĩnh hoạt động, sau đó nó cho phép chúng ta

03:04.030 --> 03:05.680
truy cập vào chính lớp đó, không giống

03:05.680 --> 03:09.370
như điều này trong một phương thức không tĩnh cho phép chúng ta truy cập vào thể hiện

03:09.370 --> 03:11.590
mà chúng ta đang cố gắng làm việc, không phải những

03:11.590 --> 03:13.550
gì chúng ta đang làm ở đây .

03:13.550 --> 03:15.660
Tuy nhiên, nếu chúng tôi không đưa

03:15.660 --> 03:17.290
nó vào đây thì chúng tôi chưa

03:17.290 --> 03:22.030
có phiên bản nào, thì tôi đặt cái này. Ví dụ, vì vậy thuộc tính cá thể tĩnh

03:22.030 --> 03:25.660
này bằng với Kế toán mới, chúng ta có thể sử dụng nó

03:25.660 --> 03:28.630
từ bên trong đây vì bây giờ chúng ta đang

03:28.630 --> 03:32.030
ở bên trong phương thức lớp này, vì vậy, ở đây chúng

03:32.030 --> 03:35.250
ta có thể truy cập hàm tạo riêng và chuyển ID

03:35.250 --> 03:37.423
của chúng ta, mảng báo cáo của

03:39.630 --> 03:41.200
chúng ta và sau đó trả

03:41.200 --> 03:44.830
lại cái này. ví dụ ở đây.

03:44.830 --> 03:47.010
Vì vậy, bây giờ chúng tôi sẽ trả lại một phiên bản mà chúng

03:47.010 --> 03:48.220
tôi có thể đã có hoặc nếu chúng

03:48.220 --> 03:50.970
tôi chưa có phiên bản đó, chúng tôi sẽ tạo một phiên bản mới.

03:50.970 --> 03:53.270
Nhưng mã này, mã được đánh dấu ở đây, chỉ có

03:53.270 --> 03:56.377
thể chạy một lần bởi vì khi chúng tôi có một phiên bản, chúng

03:56.377 --> 03:57.850
tôi đưa nó vào khối if này và

03:57.850 --> 04:00.370
chúng tôi trả lại phiên bản hiện có.

04:00.370 --> 04:03.700
Vì vậy, bây giờ nếu bạn muốn làm việc với Phòng Kế toán, thay

04:03.700 --> 04:05.940
vì tạo nó như thế này, chúng ta có thể gọi,

04:05.940 --> 04:10.153
const Accounting Phòng Kế toán. getInstance và điều này trả về cho

04:11.646 --> 04:13.190
chúng tôi một phiên bản

04:13.190 --> 04:14.850
mới của Phòng kế toán.

04:14.850 --> 04:18.190
Nhưng nếu tôi làm điều này một lần nữa, tôi sẽ nhận được ví dụ tương

04:18.190 --> 04:21.103
tự như bạn sẽ thấy nếu tôi điều khiển kế toán nhật ký bảng điều

04:22.020 --> 04:23.570
khiển và kế toán2 tại đây.

04:23.570 --> 04:26.550
Bạn sẽ thấy rằng cả hai phải hoàn toàn bằng nhau,

04:26.550 --> 04:28.253
nếu chúng tôi lưu nó và tải

04:30.550 --> 04:34.110
lại, bạn sẽ thấy bên dưới có hai đối tượng Phòng kế toán

04:34.110 --> 04:36.690
của tôi, chúng có cùng một ID, cùng một thiết

04:36.690 --> 04:39.720
lập, chúng là cùng một đối tượng, cùng một thể hiện

04:39.720 --> 04:41.530
bởi vì chúng tôi chỉ có một phiên

04:41.530 --> 04:44.340
bản với mẫu đơn này được tạo với sự trợ giúp của

04:44.340 --> 04:47.900
từ khóa riêng phía trước hàm tạo.

04:47.900 --> 04:51.000
Có thể nói đây là một cách tiếp cận mà bạn sẽ không

04:51.000 --> 04:52.490
thường xuyên sử dụng.

04:52.490 --> 04:55.010
Mẫu singleton đôi khi có thể hữu ích, không

04:55.010 --> 04:56.530
phải lúc nào bạn cũng cần

04:56.530 --> 04:58.700
đến nó, nhưng chắc chắn bạn nên biết

04:58.700 --> 05:00.360
về nó vì nó là một điều thú vị

05:00.360 --> 05:03.290
mà bạn có thể dễ dàng triển khai với TypeScript nhờ

05:03.290 --> 05:04.923
các hàm tạo riêng.
