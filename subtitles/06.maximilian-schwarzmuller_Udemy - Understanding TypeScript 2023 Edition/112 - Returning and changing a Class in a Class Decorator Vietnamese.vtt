WEBVTT

00:02.090 --> 00:02.923
Trình tường thuật:

00:02.923 --> 00:04.750
Để thực hiện những việc nâng cao hơn với

00:04.750 --> 00:07.340
các trình trang trí, bạn sẽ phải lưu ý rằng một số trình

00:07.340 --> 00:09.200
trang trí chẳng hạn, trình trang trí

00:09.200 --> 00:11.700
lớp nhưng cũng có thể trang trí phương thức, chẳng

00:11.700 --> 00:14.650
hạn, thực sự cũng có khả năng trả về một cái gì đó.

00:14.650 --> 00:16.570
Bây giờ, tôi sẽ không trả lại bất cứ thứ gì tại bất

00:16.570 --> 00:17.510
kỳ nhà trang trí nào.

00:17.510 --> 00:18.430
Tôi không nói về

00:18.430 --> 00:20.010
chức năng trang trí, được

00:20.010 --> 00:22.460
trả lại trong nhà máy trang trí.

00:22.460 --> 00:23.701
Ý tôi thực sự là một giá

00:23.701 --> 00:26.040
trị trả về bên trong hàm trang trí và chúng

00:26.040 --> 00:28.890
tôi không có bất kỳ giá trị nào như vậy ở bất kỳ đâu.

00:28.890 --> 00:31.559
Bây giờ trong hàm WithTemplate, trong hàm trang

00:31.559 --> 00:34.670
trí WithTemplate này, tôi nên nói rằng, chúng ta có thể

00:34.670 --> 00:36.930
thêm một giá trị trả về như vậy.

00:36.930 --> 00:38.520
Và những gì bạn có thể trả lại và

00:38.520 --> 00:40.430
những gì TypeScript có thể sử dụng,

00:40.430 --> 00:43.660
tùy thuộc vào loại trình trang trí mà bạn đang làm việc.

00:43.660 --> 00:44.990
Ở đây, chúng ta đang làm

00:44.990 --> 00:47.270
việc với một trình trang trí được thêm

00:47.270 --> 00:48.750
vào một lớp, và trong một

00:48.750 --> 00:51.677
hàm trang trí như vậy, bạn có thể trả về một hàm tạo

00:51.677 --> 00:53.800
mới, hàm này sẽ thay thế hàm cũ.

00:53.800 --> 00:55.590
Vì vậy, bạn có thể nói cái nào

00:55.590 --> 00:58.330
sẽ thay thế lớp mà bạn đã thêm vào trang trí.

00:58.330 --> 01:01.073
Vì vậy, ở đây chúng ta có thể trả về một hàm

01:01.073 --> 01:02.490
mới, một hàm xây dựng

01:02.490 --> 01:06.370
mới hoặc đơn giản là trả về một lớp mới, cuối cùng, bởi

01:06.370 --> 01:08.280
vì một lớp, từ khóa lớp, cho

01:08.280 --> 01:11.150
phép chúng ta sử dụng đường cú pháp này để

01:11.150 --> 01:13.360
tạo một hàm xây dựng như vậy và lớp

01:13.360 --> 01:15.951
Tôi tạo ở đây không cần phải có tên, nhưng

01:15.951 --> 01:17.463
chúng ta có thể và chúng

01:17.463 --> 01:22.250
ta nên mở rộng hàm tạo mà chúng ta đang có ở đây.

01:22.250 --> 01:23.730
Vì vậy, những gì tôi đang

01:23.730 --> 01:25.848
làm ở đây bây giờ là trong chức năng

01:25.848 --> 01:28.060
trang trí của tôi ở đây, tôi đang trả

01:28.060 --> 01:29.270
lại một lớp mới, và một

01:29.270 --> 01:30.910
lần nữa hãy nhớ rằng đó chỉ

01:30.910 --> 01:32.770
là đường cú pháp cho một hàm xây

01:32.770 --> 01:35.400
dựng, vì vậy cuối cùng, tôi sẽ trả về một hàm

01:35.400 --> 01:38.830
xây dựng, dựa trên hàm khởi tạo ban đầu, để tôi giữ tất cả

01:38.830 --> 01:42.610
các thuộc tính của lớp ban đầu, của hàm khởi tạo ban đầu, chúng

01:42.610 --> 01:44.810
ta không nhất thiết phải làm điều đó,

01:44.810 --> 01:47.010
nhưng tôi không muốn mất các thuộc tính

01:47.010 --> 01:50.520
của mình ở đây, vì vậy Tôi sẽ làm nó.

01:50.520 --> 01:53.670
Và sau đó ở đây chúng ta có thể thêm chức năng mới.

01:53.670 --> 01:56.716
Ví dụ, và tôi sẽ phải thay đổi một số tên ở đây,

01:56.716 --> 02:00.340
tôi có thể thêm một hàm tạo mới vào đó, và để tránh nhầm

02:00.340 --> 02:01.500
lẫn, tôi sẽ đổi tên

02:01.500 --> 02:04.040
hàm tạo mà tôi đang sử dụng ở đây.

02:04.040 --> 02:06.640
Vì vậy, lớp mà tôi đã thêm công cụ trang

02:06.640 --> 02:09.620
trí này, tôi sẽ đặt tên cho nó ở đây, originalConstructor

02:12.889 --> 02:15.690
và sao chép tất cả ở đây.

02:15.690 --> 02:18.950
Và bây giờ, thay vì hàm tạo này ở đây, tôi phải

02:18.950 --> 02:20.853
gọi super để gọi hàm tạo ban

02:20.853 --> 02:24.530
đầu này từ bên trong nó, bởi vì nếu bạn thêm một hàm

02:24.530 --> 02:25.430
tạo trong một

02:25.430 --> 02:27.410
lớp mở rộng một lớp khác, thì

02:27.410 --> 02:29.920
cuối cùng, cái mà chúng ta đang làm

02:29.920 --> 02:33.630
ở đây, thì bạn phải gọi super.

02:33.630 --> 02:36.108
Và bây giờ ở đây bạn có thể viết bất kỳ logic nào bạn muốn.

02:36.108 --> 02:40.040
Và, ví dụ, ở đây, chúng ta có thể di chuyển logic

02:40.040 --> 02:42.782
hiển thị mẫu này ở đây, ra khỏi hàm

02:42.782 --> 02:45.620
trang trí của chúng ta sang hàm tạo

02:45.620 --> 02:47.730
mới này mà chúng ta đang quay

02:47.730 --> 02:49.020
lại đây.

02:49.020 --> 02:50.960
Vì vậy, một lần nữa, hãy thực sự nhớ rằng

02:50.960 --> 02:52.550
chúng ta đang tạo một lớp ở đây

02:52.550 --> 02:53.383
mà cuối cùng chỉ

02:53.383 --> 02:54.540
tạo một hàm tạo với logic

02:54.540 --> 02:55.833
này trong đó.

02:56.670 --> 02:58.850
Vì vậy, bây giờ những gì tôi đang cố gắng

02:58.850 --> 03:01.367
làm là, tôi cố gắng thay thế lớp học.

03:01.367 --> 03:04.298
Hàm tạo mà chúng tôi đã thêm trình trang

03:04.298 --> 03:07.550
trí của mình với một lớp mới, với một hàm tạo mới,

03:07.550 --> 03:10.290
trong đó tôi vẫn thực thi logic cũ, nhưng

03:10.290 --> 03:12.920
tôi cũng thêm logic mới của riêng mình

03:12.920 --> 03:14.670
và do đó, bây giờ mẫu thực

03:14.670 --> 03:17.450
sự chỉ được hiển thị cho DOM nếu tôi thực

03:17.450 --> 03:21.340
sự khởi tạo đối tượng của mình tại đây.

03:21.340 --> 03:22.890
Và không phải lúc nào chức

03:22.890 --> 03:25.180
năng trang trí này được thực thi,

03:25.180 --> 03:26.340
như bạn đã học, xảy

03:26.340 --> 03:29.620
ra ngay khi chúng ta định nghĩa lớp.

03:29.620 --> 03:31.010
Bây giờ, một chút chỉnh sửa ở đây,

03:31.010 --> 03:34.290
tôi không gọi hàm tạo ban đầu của mình ở đây nữa, thay vào đó chúng ta chỉ

03:34.290 --> 03:37.380
có thể truy cập cái này. name để lấy giá trị

03:37.380 --> 03:40.180
thuộc tính name của thể hiện

03:40.180 --> 03:42.750
mà chúng ta đang tạo.

03:42.750 --> 03:45.120
Bây giờ chúng tôi nhận được một chút

03:45.120 --> 03:47.750
phàn nàn về các loại không chính xác.

03:47.750 --> 03:51.330
Tuy nhiên, để khắc phục điều đó, chúng ta có thể biến hàm trang

03:51.330 --> 03:53.990
trí của mình thành một hàm chung nơi chúng

03:53.990 --> 03:57.113
ta có một loại và đặt loại này làm loại hàm tạo ban đầu,

03:58.090 --> 03:59.820
và bây giờ hãy làm rõ rằng đây

03:59.820 --> 04:01.668
thực sự sẽ là một hàm tạo và chúng

04:01.668 --> 04:04.410
ta có thể làm điều đó xóa bằng cách chỉ định một

04:04.410 --> 04:05.780
loại đặc biệt, một loại

04:05.780 --> 04:09.260
đối tượng, trong đó chúng tôi đặt một thuộc tính mới, tất

04:09.260 --> 04:15.953
nhiên đây là tên dự trữ, nhưng nó cho TypeScript biết rằng cuối cùng, đây sẽ là một đối tượng có thể được tạo

04:15.953 --> 04:17.760
mới.

04:17.760 --> 04:19.690
Vì vậy, đó sẽ là một hàm tạo, một

04:19.690 --> 04:22.170
hàm chúng ta có thể gọi bằng từ khóa mới

04:22.170 --> 04:24.380
để tạo một đối tượng mới.

04:24.380 --> 04:27.410
Và hàm mới này, phương thức mới này, mà đối tượng

04:27.410 --> 04:30.660
T dựa trên sẽ có, sẽ nhận bất kỳ số lượng đối số nào, vì

04:30.660 --> 04:33.520
vậy tôi đang sử dụng các tham số còn lại ở đây để

04:33.520 --> 04:35.380
chấp nhận bao nhiêu đối số tùy

04:35.380 --> 04:37.290
thích, để chúng thực sự linh hoạt

04:37.290 --> 04:39.840
liên quan đến các đối số có thể được chuyển

04:39.840 --> 04:42.200
đến hàm tạo của lớp mà chúng tôi đang cố

04:42.200 --> 04:44.000
gắng thay đổi.

04:45.420 --> 04:46.430
Thêm chức năng mới

04:46.430 --> 04:49.063
sau đó cuối cùng sẽ trả về một đối tượng ở đây.

04:50.140 --> 04:53.500
Bây giờ tôi cũng chỉ cần sao chép định nghĩa của tham số còn lại vào

04:53.500 --> 04:55.680
hàm tạo của mình ở đây, để hàm tạo này cũng

04:55.680 --> 04:57.640
có khả năng chấp nhận tất cả các đối số

04:57.640 --> 05:00.260
mà chúng ta có thể nhận được, để về cơ bản, chúng ta

05:00.260 --> 05:02.380
có thể khởi tạo Person với bất kỳ đối số nào

05:02.380 --> 05:04.380
bạn muốn truyền vào nơi đây.

05:04.380 --> 05:06.610
Với bất kỳ đối số nào chúng ta cũng

05:06.610 --> 05:09.279
có thể cần ở đây, trong hàm tạo ban đầu.

05:09.279 --> 05:11.600
Và cùng với đó, vấn đề duy nhất mà chúng ta sẽ gặp phải

05:11.600 --> 05:14.021
là chúng ta không biết rằng một thuộc tính tên như vậy

05:14.021 --> 05:16.250
tồn tại và chính xác là như vậy, chúng ta không

05:16.250 --> 05:19.639
biết mình sẽ thêm trình trang trí WithTemplate này vào lớp nào, vì vậy

05:19.639 --> 05:22.530
chúng ta không biết nếu có một thuộc tính tên trên lớp, chúng

05:22.530 --> 05:23.951
tôi sẽ thêm nó vào.

05:23.951 --> 05:25.560
Tuy nhiên, chúng ta có thể

05:25.560 --> 05:27.140
khắc phục điều này bằng cách

05:27.140 --> 05:30.200
chỉ cần nói với TypeScript rằng đối tượng T được dựa

05:30.200 --> 05:32.773
trên, vì vậy, hàm khởi tạo ban đầu của chúng

05:32.773 --> 05:35.530
ta sẽ không chỉ tạo ra bất kỳ đối tượng nào, mà

05:35.530 --> 05:37.460
thực sự sẽ tạo ra một đối tượng có

05:37.460 --> 05:39.670
thuộc tính tên thuộc loại chuỗi và đó

05:39.670 --> 05:41.140
là Chính xác.

05:41.140 --> 05:44.922
Trình trang trí WithTemplate của chúng tôi được thêm vào một lớp, lớp

05:44.922 --> 05:46.250
này sẽ có thuộc tính tên.

05:46.250 --> 05:47.300
Nếu tôi bình luận điều

05:47.300 --> 05:48.133
này, chúng tôi sẽ

05:48.133 --> 05:50.740
gặp lỗi, bởi vì bây giờ chúng tôi sẽ cố gắng thêm công cụ

05:50.740 --> 05:53.460
trang trí này vào một lớp không đáp ứng tiêu chí này nhưng

05:53.460 --> 05:55.543
ở đây, điều này đáp ứng tiêu chí đó.

05:55.543 --> 05:58.790
Bây giờ, tôi gặp lỗi ở đây khi tôi cố gắng biên dịch cái này, vì tôi không

05:58.790 --> 06:00.630
sử dụng args ở đây, chúng ta có thể thay đổi

06:00.630 --> 06:02.660
cái này thành _ để nói với TypeScript rằng chúng

06:02.660 --> 06:04.930
ta biết rằng chúng ta không sử dụng nó và chúng ta muốn

06:04.930 --> 06:06.230
bỏ qua điều này.

06:06.230 --> 06:08.050
Đây là một tên tham số hợp lệ, nó

06:08.050 --> 06:10.678
chỉ là một tên đặc biệt mà bản đánh máy lấy khi

06:10.678 --> 06:13.220
tôi nhận được nó, tôi cần chấp nhận nó, nhưng

06:13.220 --> 06:15.260
tôi sẽ không sử dụng tham số đó.

06:15.260 --> 06:18.273
Và với điều đó, tất cả sẽ biên dịch và nếu chúng tôi tải lại,

06:19.440 --> 06:22.420
bạn thấy đấy, chúng tôi vẫn thấy Max trên trang ở đây.

06:22.420 --> 06:23.910
Điều thú vị là, nếu bây giờ

06:23.910 --> 06:25.480
chúng ta xóa mã đó nơi chúng

06:25.480 --> 06:27.060
ta khởi tạo Person nếu tôi nhận

06:27.060 --> 06:28.440
xét điều này để tôi chỉ tìm

06:28.440 --> 06:30.740
thấy một lớp Person, nhưng tôi không bao

06:30.740 --> 06:33.550
giờ khởi tạo nó ở bất kỳ đâu, bạn sẽ thấy khi nó tải

06:33.550 --> 06:36.890
lại, chúng ta không thấy Max trên màn hình.

06:36.890 --> 06:39.467
Tất cả các trình trang trí vẫn thực thi, nhưng chúng

06:39.467 --> 06:42.410
tôi không hiển thị bất kỳ thứ gì lên màn hình nữa.

06:42.410 --> 06:43.243
Và lý do cho điều

06:43.243 --> 06:46.340
đó là vì giờ đây chúng ta đã tăng cường trình trang trí

06:46.340 --> 06:49.520
của mình ở đây hơn nữa, bằng cách tận dụng tính năng của

06:49.520 --> 06:52.360
nó, nơi chúng ta có thể trả về một giá trị mới hoặc

06:52.360 --> 06:55.350
trong trường hợp này là một hàm tạo mới.

06:55.350 --> 06:57.205
Trong trường hợp của người trang trí lớp học.

06:57.205 --> 07:00.780
Đây là một hàm tạo mới, hoặc một lớp mới, như

07:00.780 --> 07:03.040
tôi đã giải thích, chỉ là đường

07:03.040 --> 07:04.300
cú pháp cho hàm tạo,

07:04.300 --> 07:06.750
và hàm tạo này, do đó, thay thế

07:06.750 --> 07:09.070
lớp ban đầu của chúng ta, hàm

07:09.070 --> 07:12.160
tạo ban đầu của chúng ta.

07:12.160 --> 07:15.220
Bây giờ, vì tôi đã gọi super ở đây, chúng

07:15.220 --> 07:17.610
tôi lưu chức năng ban đầu.

07:17.610 --> 07:19.690
Chúng tôi lưu lớp ban đầu, mọi thứ chúng

07:19.690 --> 07:22.540
tôi khởi tạo ở đây về cơ bản vẫn diễn ra, bởi vì tôi

07:22.540 --> 07:25.530
cũng làm điều đó trong hàm tạo thay thế của mình và

07:25.530 --> 07:27.480
tôi mở rộng lớp ban đầu.

07:27.480 --> 07:30.420
Vì vậy, chúng tôi lưu mọi thứ trong lớp ban đầu.

07:30.420 --> 07:31.550
Bạn không cần phải làm

07:31.550 --> 07:32.670
điều đó, nhưng tôi đang

07:32.670 --> 07:35.560
làm điều đó ở đây, vì tôi không muốn mất dữ liệu gốc đó.

07:35.560 --> 07:36.850
Tuy nhiên, đằng sau hậu

07:36.850 --> 07:39.770
trường, tôi thay thế lớp này bằng lớp tùy chỉnh mới

07:39.770 --> 07:42.370
của mình ở đây và điều đó cho phép chúng tôi thêm

07:42.370 --> 07:45.600
logic bổ sung, lớp này sẽ chạy khi lớp được khởi tạo.

07:45.600 --> 07:49.090
Và bây giờ đột nhiên chúng ta có thể thêm logic

07:49.090 --> 07:52.410
không chạy khi lớp được định nghĩa, nhưng

07:52.410 --> 07:54.660
khi lớp được khởi tạo.

07:54.660 --> 07:57.150
Và do đó, đây sẽ là một ví dụ tuyệt vời đầu tiên

07:57.150 --> 08:01.860
về toàn bộ sức mạnh mà bạn có thể giải phóng với những người trang trí nếu bạn thực

08:01.860 --> 08:04.480
sự hiểu những gì bạn có thể làm với họ.

08:04.480 --> 08:06.800
Và bạn không thể chỉ định nghĩa chúng dưới dạng các

08:06.800 --> 08:09.970
hàm và bạn không thể chỉ định nghĩa chúng bằng các hàm nhân tố.

08:09.970 --> 08:12.600
Trong một số trình trang trí, chẳng hạn như trình

08:12.600 --> 08:14.400
trang trí lớp, bạn cũng có thể trả

08:14.400 --> 08:17.650
lại thứ gì đó để thay thế thứ mà bạn đã thêm trình trang trí

08:17.650 --> 08:19.470
vào trong trường hợp của chúng

08:19.470 --> 08:23.000
tôi là lớp, bằng một lớp mới có thể triển khai lớp cũ nhưng cũng

08:23.000 --> 08:25.711
thêm logic tùy chỉnh mới của nó.

08:25.711 --> 08:28.004
Và cùng với đó, nếu chúng tôi nhận xét

08:28.004 --> 08:30.240
lại điều này, chúng tôi sẽ hiển thị lại

08:30.240 --> 08:31.570
Max trên màn hình với lớp

08:31.570 --> 08:35.793
riêng của chúng tôi thay thế hoặc mở rộng và thay thế lớp cũ.
