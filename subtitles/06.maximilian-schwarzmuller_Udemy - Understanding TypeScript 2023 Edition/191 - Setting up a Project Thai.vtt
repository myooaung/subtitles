WEBVTT

00:02.290 --> 00:03.280
ผู้สอน: มาเริ่มกันเลยกับแอปพลิเคชัน

00:03.280 --> 00:06.110
Node typescript ของเรา

00:06.110 --> 00:08.750
ตอนนี้ คุณอาจคิดว่าเราต้องการการตั้งค่าที่ซับซ้อนกับ

00:08.750 --> 00:12.410
webpack และอื่นๆ แต่จริงๆ แล้วไม่ใช่

00:12.410 --> 00:16.270
เราจะใช้คำสั่ง tsc เพื่อคอมไพล์ไฟล์ของเรา

00:16.270 --> 00:18.160
จากนั้นเราสามารถใช้คำสั่ง node

00:18.160 --> 00:19.890
เพื่อรันไฟล์ที่คอมไพล์แล้ว

00:19.890 --> 00:21.700
นั่นคือทั้งหมดที่เราต้องการที่นี่

00:21.700 --> 00:28.810
ถึงกระนั้นฉันจะตั้งค่าโปรเจ็กต์ที่นี่ด้วย npm init เพื่อให้เราได้รับแพ็คเกจ

00:28.810 --> 00:28.810
json

00:28.810 --> 00:32.250
เนื่องจากเราจะสร้างแอปพลิเคชันโหนดปกติที่นี่ เราจะติดตั้งแพ็คเกจของบุคคลที่สามเช่น

00:32.250 --> 00:36.240
Express จ.

00:36.240 --> 00:40.950
และฉันยังต้องการติดตั้งเครื่องมือพิเศษหนึ่งตัวที่ทำให้กระบวนการพัฒนาของเราง่ายขึ้น

00:40.950 --> 00:44.630
ดังนั้นเรียกใช้ npm init ที่นี่ในโฟลเดอร์ว่างที่คุณเลือก

00:44.630 --> 00:50.540
คุณสามารถยืนยันการตั้งค่าเริ่มต้นทั้งหมดได้ที่นี่หากต้องการ และหลังจากนั้นคุณจะมีแพ็คเกจ

00:50.540 --> 00:50.540
json

00:50.540 --> 00:52.750
ซึ่งควรมีลักษณะดังนี้

00:52.750 --> 00:56.210
ตอนนี้เรียกใช้ tsc --init ที่นี่เพื่อเริ่มต้นโปรเจ็กต์นี้เป็นโปรเจ็กต์

00:56.210 --> 01:01.860
typescript เพื่อให้คุณได้รับ tsconfig นี้

01:01.860 --> 01:01.860
json

01:01.860 --> 01:04.313
ซึ่งตอนนี้คุณจะพบกับความต้องการของคุณ

01:05.770 --> 01:09.020
และที่นั่น ฉันได้รับการปรับค่าแรกที่ต้องการแล้ว

01:09.020 --> 01:13.300
เป้าหมายที่นี่สามารถตั้งค่าเป็น es2018 ได้อย่างง่ายดาย ตัวอย่างเช่น

01:13.300 --> 01:16.090
ขึ้นอยู่กับเวอร์ชันโหนดที่คุณใช้ แต่ถ้าคุณใช้เวอร์ชันล่าสุด

01:16.090 --> 01:21.380
ไวยากรณ์ JavaScript สมัยใหม่นี้ควรได้รับการสนับสนุนอย่างแน่นอน

01:21.380 --> 01:24.220
โมดูลสามารถอยู่ที่ Commonjs ได้ แต่ฉันต้องการเพิ่ม

01:24.220 --> 01:29.010
moduleResolution ที่นี่และตั้งค่านี้เป็นโหนด

01:29.010 --> 01:35.483
นี่เป็นเพียงการบอก typescript ว่าไฟล์และการนำเข้าต่างๆ ของคุณจะทำงานร่วมกันอย่างไร

01:36.410 --> 01:40.020
และเราต้องตั้งค่านี้เป็นโหนดเพื่อให้แน่ใจว่าทุกอย่างทำงานได้อย่างถูกต้อง

01:40.020 --> 01:42.470
ฉันจะตั้งค่า outDir ที่นี่ แสดงความคิดเห็นในนี้และตั้งค่าเป็น

01:42.470 --> 01:46.990
dist และ rootDir เป็น src เพราะฉันต้องการแยกซอร์สโค้ด typescript

01:46.990 --> 01:49.600
ของฉัน

01:49.600 --> 01:50.700
จากนั้นผลลัพธ์ซึ่งจะเป็นไฟล์

01:50.700 --> 01:55.733
JavaScript จริงที่เราสามารถดำเนินการได้ด้วยความช่วยเหลือของโหนด

01:56.820 --> 01:58.850
นอกเหนือจากนั้น ฉันสบายดีเมื่อใช้โหมดเข้มงวด

01:58.850 --> 02:03.030
แต่แน่นอน คุณสามารถปรับแต่งทั้งหมดนี้ได้ตามความต้องการและความชอบส่วนตัวของคุณ

02:03.030 --> 02:06.320
คุณได้เรียนรู้ทั้งหมดเกี่ยวกับเรื่องนี้ตลอดหลักสูตรนี้

02:06.320 --> 02:08.830
และด้วยเหตุนี้ เราสามารถบันทึกการกำหนดค่านี้ได้

02:08.830 --> 02:12.460
คุณจะพบการตั้งค่าเริ่มต้นขั้นพื้นฐานนี้ที่แนบมาด้วย

02:12.460 --> 02:14.120
คุณสามารถบันทึกการกำหนดค่านี้ได้

02:14.120 --> 02:18.130
และฉันจะสร้างโฟลเดอร์ src ที่เราจะเขียนซอร์สโค้ดของเรา

02:18.130 --> 02:20.230
ซอร์สโค้ด typescript ของเรา

02:20.230 --> 02:23.020
และนั่นคือส่วนที่ตอนนี้ฉันอยากจะดำลงไป

02:23.020 --> 02:26.370
เราจะสร้างแอปพลิเคชันของเราด้วย typescript

02:26.370 --> 02:27.960
ในโฟลเดอร์ src ทันที

02:27.960 --> 02:30.200
และเนื่องจากเราจะสร้างเว็บเซิร์ฟเวอร์อย่างง่าย

02:30.200 --> 02:36.120
และเราต้องการใช้ Express ด้วย js ที่นั่น ก่อนอื่นฉันจะติดตั้งการพึ่งพาบางอย่างที่นี่

02:36.120 --> 02:38.440
ด้วย npm install --save ฉันต้องการติดตั้ง

02:38.440 --> 02:41.040
express ที่นี่ซึ่งเป็นเฟรมเวิร์ก Express

02:41.040 --> 02:44.100
สำหรับ Node ซึ่งแน่นอนว่าคุณไม่จำเป็นต้องใช้เสมอไป

02:44.100 --> 02:45.680
แต่ที่นี่ ฉันต้องการสร้างแอปพลิเคชัน

02:45.680 --> 02:48.440
Node Express

02:48.440 --> 02:54.403
และจะติดตั้งแพ็คเกจ body-parser ซึ่งช่วยให้เราแยกวิเคราะห์เนื้อหาคำขอที่เข้ามา

02:55.290 --> 02:58.180
สำหรับตอนนี้ นั่นก็เกี่ยวกับการพึ่งพาการผลิตของฉัน

02:58.180 --> 03:00.110
เราอาจเพิ่มมากขึ้นในภายหลัง

03:00.110 --> 03:01.523
ลองกด Enter ที่นี่

03:02.960 --> 03:04.120
และเมื่อติดตั้งแล้ว

03:04.120 --> 03:07.540
เรามาดูการพึ่งพาการพัฒนากัน

03:07.540 --> 03:11.450
ฉันจะติดตั้งสิ่งเหล่านั้นด้วย npm install --save-dev และที่นั่น ฉันต้องการติดตั้ง

03:11.450 --> 03:22.690
modemon ซึ่งเป็นเครื่องมือที่ช่วยให้เราสามารถเรียกใช้ไฟล์ด้วย Node แต่จะคอยดูไฟล์และโฟลเดอร์ที่ไฟล์นั้นอยู่เช่นกัน เป็นโฟลเดอร์ย่อยทั้งหมดสำหรับการเปลี่ยนแปลง

03:22.690 --> 03:24.050
เมื่อใดก็ตามที่ไฟล์มีการเปลี่ยนแปลง

03:24.050 --> 03:26.030
มันจะรีสตาร์ทเซิร์ฟเวอร์โหนด

03:26.030 --> 03:33.500
สิ่งนี้จะช่วยเร่งการพัฒนาเพราะจะรีสตาร์ทเซิร์ฟเวอร์แอปพลิเคชันโหนดของเราโดยอัตโนมัติทุกครั้งที่เราเปลี่ยนซอร์สโค้ด

03:33.500 --> 03:36.180
เราจำเป็นต้องรีสตาร์ทเซิร์ฟเวอร์เมื่อโค้ดเปลี่ยนแปลง

03:36.180 --> 03:41.340
เพราะไม่เช่นนั้นเซิร์ฟเวอร์ของเรายังคงทำงานบนโค้ดเก่า แต่การรีสตาร์ทด้วยตนเองนั้นน่ารำคาญ

03:41.340 --> 03:44.190
ดังนั้นเราจึงเร่งความเร็วด้วย nodemon ไม่ได้

03:44.190 --> 03:47.323
และในขณะนี้ก็เป็นเช่นนั้นจริงๆ

03:49.290 --> 03:52.360
ลองกด Enter ที่นี่และติดตั้งการพึ่งพาการพัฒนานี้

03:52.360 --> 03:54.760
มันจะไม่ใช่สิ่งสุดท้ายที่เราต้องการในหลักสูตรนี้

03:54.760 --> 03:56.660
แต่สำหรับตอนนี้ เราสบายดี

03:56.660 --> 03:58.830
งั้นเรามารอกันให้เสร็จก่อนดีกว่า

03:58.830 --> 04:00.130
ดังนั้นการติดตั้งจึงเสร็จสิ้น

04:00.130 --> 04:01.450
และตอนนี้เรามาเริ่มเขียนและสร้างแอปพลิเคชัน

04:01.450 --> 04:04.773
Node Express แบบพื้นฐานกัน
