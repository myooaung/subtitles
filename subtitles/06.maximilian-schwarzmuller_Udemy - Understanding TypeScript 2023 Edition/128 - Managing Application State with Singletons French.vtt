WEBVTT

00:02.310 --> 00:04.580
Instructeur : Donc, obtenir des projets de A à B est

00:04.580 --> 00:06.000
maintenant notre objectif.

00:06.000 --> 00:09.750
Pour être précis, lorsque les utilisateurs créent un nouveau projet,

00:09.750 --> 00:11.850
lorsqu'ils entrent toutes les données,

00:11.850 --> 00:15.790
nous voulons créer un nouvel objet de projet à la fin, que nous sortons ensuite

00:15.790 --> 00:18.830
dans notre classe de liste de projets comme partie de la

00:18.830 --> 00:20.460
liste non ordonnée, qui est rendue

00:20.460 --> 00:21.990
là.

00:21.990 --> 00:23.299
C'est l'idée.

00:23.299 --> 00:26.350
Bien sûr, une façon triviale de mettre en œuvre cette méthode

00:26.350 --> 00:28.890
pourrait consister à se rendre simplement à l'endroit

00:28.890 --> 00:30.830
où l'utilisateur saisit ses données, puis

00:30.830 --> 00:34.513
à utiliser le document ici. getElementbyId, pour atteindre

00:36.100 --> 00:39.410
la liste non ordonnée que nous avons rendue dans le

00:39.410 --> 00:42.270
cadre de notre classe de liste de projets, qui

00:42.270 --> 00:44.470
a cet ID ici, donc liste de projets

00:44.470 --> 00:49.110
actifs ou liste de projets terminés, et ensuite simplement atteindre

00:49.110 --> 00:51.090
cette liste et y ajouter un nouvel

00:51.090 --> 00:52.760
élément.

00:52.760 --> 00:54.770
Mais ce n'est pas vraiment l'idée de comment

00:54.770 --> 00:57.250
je veux construire cette application.

00:57.250 --> 00:59.800
Je veux le construire d'une manière orientée

00:59.800 --> 01:02.530
objet où nous avons nos différentes classes qui

01:02.530 --> 01:06.500
travaillent ensemble d'une manière réactive où nous créons une nouvelle

01:06.500 --> 01:08.200
classe et ensuite quelque chose

01:08.200 --> 01:10.550
se passe dans le dom.

01:10.550 --> 01:12.730
Où l'on appelle une méthode d'une classe et ensuite

01:12.730 --> 01:14.650
cette classe fait quelque chose.

01:14.650 --> 01:16.980
C'est comme ça que je veux que ces choses fonctionnent.

01:16.980 --> 01:19.560
Maintenant, bien sûr, nous pourrions ajouter une

01:19.560 --> 01:21.550
méthode à la classe de liste de projets,

01:21.550 --> 01:24.120
disons que j'ajoute la méthode de projet.

01:24.120 --> 01:25.890
Cette méthode devrait ensuite être

01:25.890 --> 01:28.200
appelée lorsqu'un projet doit être ajouté

01:28.200 --> 01:30.700
et rendu, et nous devrions trouver un moyen de l'appeler

01:30.700 --> 01:32.940
depuis l'entrée du projet.

01:32.940 --> 01:34.820
Pour ce faire, nous pourrions nous assurer

01:34.820 --> 01:37.940
que nous passons des références à notre liste ici, au constructeur

01:37.940 --> 01:40.330
de l'entrée du projet, de sorte que de l'intérieur

01:40.330 --> 01:42.810
de la classe d'entrée du projet, nous pouvons travailler

01:42.810 --> 01:45.290
avec ces instances concrètes et appeler les méthodes

01:45.290 --> 01:47.570
sur ces instances.

01:47.570 --> 01:50.260
Parce que c'est ce que nous aurions à faire.

01:50.260 --> 01:52.050
Ce serait un moyen viable, une

01:52.050 --> 01:54.400
approche que vous pourriez adopter,

01:54.400 --> 01:58.680
mais je veux adopter une approche encore plus abstraite.

01:58.680 --> 02:01.393
Une approche encore plus intéressante à mon avis.

02:02.330 --> 02:06.210
Je vais construire une classe qui gère l'état de notre application,

02:06.210 --> 02:08.110
c'est-à-dire une classe qui gère

02:08.110 --> 02:11.187
nos projets, ou n'importe quel état que nous pourrions

02:11.187 --> 02:13.840
avoir besoin de gérer dans l'application, qui

02:13.840 --> 02:15.530
nous permet également de mettre

02:15.530 --> 02:18.660
en place des écouteurs dans les différentes parties de

02:18.660 --> 02:21.670
l'application qui sont intéressées.

02:21.670 --> 02:24.540
C'est un modèle qui peut vous sembler familier si vous

02:24.540 --> 02:27.050
avez travaillé avec des frameworks comme Angular

02:27.050 --> 02:29.820
ou des bibliothèques comme React et Redux.

02:29.820 --> 02:33.423
Vous avez un objet de gestion d'état global et vous écoutez

02:33.423 --> 02:35.443
simplement les changements.

02:35.443 --> 02:37.480
C'est ce que je veux mettre en œuvre ici.

02:37.480 --> 02:39.620
Bien sûr, ce n'est qu'une façon de faire, mais

02:39.620 --> 02:41.660
je pense que c'est une façon assez intéressante,

02:41.660 --> 02:43.680
c'est pourquoi je veux la montrer.

02:43.680 --> 02:45.908
Donc, au sommet du fichier ts de l'application,

02:45.908 --> 02:50.350
je vais ajouter une classe de gestion de l'état du projet.

02:50.350 --> 02:53.347
Et je vais simplement nommer ce projet "projectState"

02:54.820 --> 02:57.210
; cela me semble être un nom raisonnable.

02:57.210 --> 02:59.900
L'idée ici est que dans cette classe

02:59.900 --> 03:03.760
nous avons une propriété ou un champ, un champ

03:03.760 --> 03:06.570
privé, projects, qui contient un

03:06.570 --> 03:08.800
tableau de projets.

03:08.800 --> 03:12.000
Maintenant nous devons aussi définir à quoi doit ressembler un projet, nous

03:12.000 --> 03:13.360
le ferons dans la prochaine étape,

03:13.360 --> 03:15.830
pour l'instant je dirai juste que c'est un tableau de n'importe

03:15.830 --> 03:18.710
quoi, ce qui bien sûr n'est pas parfait, pas définitif, mais je veux

03:18.710 --> 03:22.240
me concentrer sur cette solution de gestion d'état pour l'instant.

03:22.240 --> 03:25.653
Nous avons donc cette liste de projets ici.

03:26.530 --> 03:30.163
Maintenant, mon but est d'ajouter un élément à cette liste

03:30.163 --> 03:35.163
chaque fois que nous, bien cliquer sur ce bouton ajouter un projet ici.

03:36.940 --> 03:39.970
Pour que cela fonctionne, à l'intérieur de la classe d'état du projet,

03:39.970 --> 03:43.460
je vais ajouter une méthode d'ajout de projet, une méthode publique.

03:43.460 --> 03:45.560
Et là, je m'attends à obtenir le titre, qui

03:45.560 --> 03:47.060
devrait être une chaîne de caractères,

03:47.060 --> 03:49.390
la description, qui devrait être une chaîne de

03:49.390 --> 03:53.250
caractères, et aussi le nombre de personnes travaillant sur le projet, qui

03:53.250 --> 03:55.220
devrait être un nombre.

03:55.220 --> 03:58.450
Puis, ici, nous pouvons créer un nouveau projet avec la notation

03:58.450 --> 04:00.950
littérale de l'objet pour le moment.

04:00.950 --> 04:03.950
Nous devrions avoir un identifiant pour chaque projet afin de pouvoir l'identifier

04:03.950 --> 04:06.050
de manière unique, et je vais générer un identifiant

04:06.050 --> 04:12.100
ici en utilisant les mathématiques.

04:12.100 --> 04:12.100
random(). toString.

04:12.100 --> 04:14.960
Un nombre aléatoire n'est pas vraiment un identifiant

04:14.960 --> 04:17.880
unique, vous pouvez générer le même nombre plus d'une fois,

04:17.880 --> 04:19.300
mais c'est très improbable,

04:19.300 --> 04:22.570
et pour notre démonstration, cela fera l'affaire.

04:22.570 --> 04:25.170
Maintenant, en plus de cela, chaque projet devrait avoir

04:25.170 --> 04:28.370
un titre et il y aura stocker cet argument de titre que nous obtenons.

04:28.370 --> 04:30.913
Idem pour la description, où je vais

04:31.960 --> 04:33.830
stocker la description.

04:33.830 --> 04:37.693
Et mon peuple où je vais stocker le nombre de personnes.

04:39.700 --> 04:43.440
C'est, pour l'instant, le projet que je veux stocker.

04:43.440 --> 04:45.000
Donc, une fois que nous l'avons créé

04:45.000 --> 04:48.020
ici, nous pouvons atteindre le tableau des projets dans l'état des

04:48.020 --> 04:48.853
projets, qui est privé,

04:48.853 --> 04:50.320
mais de l'intérieur de la classe,

04:50.320 --> 04:51.530
qui est cette méthode, nous

04:51.530 --> 04:53.340
pouvons y accéder bien sûr.

04:53.340 --> 04:55.900
Et là, je veux ajouter ce nouveau projet et pour

04:55.900 --> 05:00.380
cela nous pouvons simplement pousser notre nouveau projet vers lui.

05:00.380 --> 05:03.350
Maintenant, avec cela, nous sommes en mesure d'ajouter un projet.

05:03.350 --> 05:07.027
Mais nous avons encore, bien sûr, quelques questions peu claires.

05:07.027 --> 05:12.027
Comment appeler le projet d'ajout à partir de notre classe en bas où nous recueillons l'entrée de

05:12.750 --> 05:14.650
l'utilisateur à l'intérieur du gestionnaire

05:14.650 --> 05:15.990
de soumission ?

05:15.990 --> 05:17.940
Comment appeler un projet d'ajout ?

05:17.940 --> 05:21.730
Et comment passer cette liste de projets mise à jour chaque

05:21.730 --> 05:25.690
fois qu'elle est modifiée à la classe de liste de projets ?

05:25.690 --> 05:29.230
Ce sont les deux problèmes auxquels nous sommes bien sûr confrontés en ce moment.

05:29.230 --> 05:31.840
Eh bien, une chose que je vais faire

05:31.840 --> 05:36.499
ici, est de créer une instance de l'état du projet ici.

05:36.499 --> 05:39.720
Une instance globale, que nous pourrions utiliser depuis tout le

05:39.720 --> 05:42.760
fichier, et je le ferai juste après avoir créé cette classe.

05:42.760 --> 05:47.050
Donc ici j'ai ma constante d'état de projet où j'instancie

05:47.050 --> 05:50.370
l'état de projet comme ceci.

05:50.370 --> 05:52.400
De cette façon, il s'agit d'une constante

05:52.400 --> 05:54.620
globale qui peut être utilisée n'importe

05:54.620 --> 05:58.000
où dans le fichier, donc parler à cette classe est maintenant super

05:58.000 --> 06:01.660
simple, il suffit d'utiliser cette constante globale ici.

06:01.660 --> 06:04.850
Nous pouvons même utiliser une fonctionnalité que nous avons tous

06:04.850 --> 06:06.430
apprise, le constructeur privé,

06:06.430 --> 06:09.170
pour garantir qu'il s'agit d'une classe singleton.

06:09.170 --> 06:11.950
Nous pouvons créer un constructeur privé ici et ensuite

06:11.950 --> 06:14.300
nous avons une autre propriété privée ici,

06:14.300 --> 06:16.670
instance, qui est de type project state, donc

06:16.670 --> 06:18.933
du même type que cette classe.

06:20.640 --> 06:24.360
Et nous ajoutons ensuite une méthode d'instance get ici,

06:24.360 --> 06:26.390
une méthode statique en fait,

06:26.390 --> 06:30.050
où nous vérifions si ce . L'instance est une chose, et pour

06:30.050 --> 06:31.020
cela, il faut aussi

06:31.020 --> 06:33.970
que ce soit une instance statique, une propriété

06:33.970 --> 06:35.800
statique, je veux dire.

06:35.800 --> 06:37.100
Si c'est une chose, si c'en est

06:37.100 --> 06:39.550
une, nous retournons ceci . Nous retournons donc

06:39.550 --> 06:42.230
l'instance unique que nous avons obtenue,

06:42.230 --> 06:44.590
sinon nous en créons une nouvelle.

06:44.590 --> 06:45.423
Donc autrement,

06:45.423 --> 06:50.423
ce . sera égale au nouvel état du projet.

06:50.450 --> 06:52.963
Et puis nous retournons ceci . instance.

06:54.740 --> 06:57.913
Maintenant, avec cela, nous pouvons appeler obtenir l'instance là-bas, comme ceci,

06:59.370 --> 07:00.903
ProjectState. getInstance,

07:02.650 --> 07:04.390
et nous sommes assurés de toujours

07:04.390 --> 07:06.560
travailler avec exactement le même

07:06.560 --> 07:10.020
objet et de n'avoir qu'un seul objet de ce type dans toute

07:10.020 --> 07:11.700
l'application.

07:11.700 --> 07:12.840
Ce qui est l'idée ici,

07:12.840 --> 07:16.480
parce que je veux seulement avoir un objet de gestion d'état pour

07:16.480 --> 07:17.503
notre projet.

07:17.503 --> 07:19.570
C'est donc l'état du projet avec ce constructeur

07:19.570 --> 07:21.563
singleton maintenant.

07:22.730 --> 07:25.890
Donc maintenant nous avons notre projet d'état constant.

07:25.890 --> 07:28.040
Descendons dans la classe d'entrée du projet donc

07:28.040 --> 07:30.270
où nous recueillons l'entrée de l'utilisateur.

07:30.270 --> 07:33.950
Ici, nous pouvons maintenant appeler projectState. addProject et transmet le titre,

07:33.950 --> 07:37.830
la description et les personnes, nous obtenons le retour de la collecte

07:37.830 --> 07:40.960
des données de l'utilisateur à la fin.

07:40.960 --> 07:43.920
Donc maintenant ce projet devrait être créé.

07:43.920 --> 07:47.140
Maintenant, nous devons juste pousser l'information

07:47.140 --> 07:51.530
que nous avons un nouveau projet vers notre classe de liste de projets, parce

07:51.530 --> 07:53.840
que c'est la classe qui est responsable

07:53.840 --> 07:56.500
de la sortie de quelque chose à l'écran.

07:56.500 --> 07:59.450
Et pour ça, je veux mettre en place un modèle d'abonnement

07:59.450 --> 08:00.350
à la fin.

08:00.350 --> 08:03.020
Dans l'état de notre projet, nous gérons

08:03.020 --> 08:05.730
une liste d'écouteurs, c'est-à-dire une

08:05.730 --> 08:08.690
liste de fonctions qui doivent être appelées

08:08.690 --> 08:11.600
chaque fois que quelque chose change.

08:11.600 --> 08:12.433
Donc, pour cela,

08:12.433 --> 08:15.830
je vais ajouter une autre propriété privée ici, les auditeurs.

08:15.830 --> 08:18.810
Et listeners sera un tableau vide et pour l'instant,

08:18.810 --> 08:22.130
encore une fois, juste un tableau de n'importe quoi,

08:22.130 --> 08:25.543
nous le spécifierons plus en détail plus tard.

08:26.760 --> 08:31.382
Maintenant, je veux aussi avoir une méthode ici addListener

08:31.382 --> 08:35.590
où je reçois une fonction d'écouteur, donc cela devrait

08:35.590 --> 08:39.150
être une fonction à la fin ici.

08:39.150 --> 08:41.370
Et j'ajouterai ensuite ceci à mes auditeurs.

08:41.370 --> 08:43.970
Donc on pousse la fonction d'écoute ici,

08:43.970 --> 08:46.500
dans le tableau des auditeurs.

08:46.500 --> 08:49.580
Maintenant, quelle est l'idée d'avoir ce tableau d'auditeurs ?

08:49.580 --> 08:51.110
C'est un tableau de fonctions,

08:51.110 --> 08:53.070
de références de fonctions, non ?

08:53.070 --> 08:55.250
L'idée est que chaque fois que quelque chose change,

08:55.250 --> 08:57.310
comme ici lorsque nous ajoutons un nouveau projet,

08:57.310 --> 08:59.790
nous appelons toutes les fonctions des auditeurs.

08:59.790 --> 09:03.050
Nous bouclons donc à travers tous les écouteurs, de cet écouteur,

09:03.050 --> 09:04.720
donc à travers toutes les fonctions

09:04.720 --> 09:07.330
de l'écouteur, et puis puisque ce sont des références

09:07.330 --> 09:09.520
de fonction, nous pouvons exécuter ceci

09:09.520 --> 09:11.593
comme une fonction.

09:13.010 --> 09:14.630
Et à cette fonction, nous passons

09:14.630 --> 09:18.620
la chose qui est pertinente pour elle, basée sur l'état que nous gérons,

09:18.620 --> 09:20.130
qui est dans ce cas, dans cette

09:20.130 --> 09:23.280
classe bien sûr, notre liste de projets.

09:23.280 --> 09:27.983
C'est l'état dont cette classe est responsable.

09:29.100 --> 09:29.933
Donc ici, je fais

09:30.980 --> 09:33.050
suivre ce projet et je vais appeler

09:33.050 --> 09:35.170
slice dessus pour ne retourner qu'une

09:35.170 --> 09:39.100
copie de ce tableau et non le tableau original.

09:39.100 --> 09:41.880
Pour qu'il ne puisse pas être édité depuis l'endroit

09:41.880 --> 09:44.210
d'où provient la fonction d'écoute.

09:44.210 --> 09:45.760
Parce que les tableaux et les objets

09:45.760 --> 09:48.110
sont des valeurs de référence en Javascript, donc

09:48.110 --> 09:50.490
si vous passez le tableau original, nous pourrions

09:50.490 --> 09:52.600
l'éditer de l'extérieur et aussi de la même

09:52.600 --> 09:54.380
manière, si nous y poussons quelque

09:54.380 --> 09:57.020
chose de l'intérieur de cette classe, il changerait

09:57.020 --> 09:59.830
déjà partout ailleurs dans l'application, mais ces endroits

09:59.830 --> 10:03.540
ne remarqueraient pas vraiment qu'il a changé, donc cela pourrait introduire

10:03.540 --> 10:05.630
des bugs étranges si nous passons autour de

10:05.630 --> 10:08.270
la référence originale, c'est pourquoi je passe autour

10:08.270 --> 10:10.803
de la toute nouvelle copie, un tout nouveau tableau

10:10.803 --> 10:12.770
ici.

10:12.770 --> 10:15.390
Donc maintenant, chaque fonction d'écoute est

10:15.390 --> 10:19.400
exécutée et reçoit notre copie, notre toute nouvelle copie des projets.

10:19.400 --> 10:21.380
Maintenant nous devons juste aller aux

10:21.380 --> 10:23.800
endroits où nous voulons être informés des changements,

10:23.800 --> 10:26.560
dans notre cas, la classe de liste de projet ici, et configurer

10:26.560 --> 10:29.030
un tel écouteur.

10:29.030 --> 10:32.880
Donc ici, dans le constructeur de la classe de la liste de

10:32.880 --> 10:35.546
projets, avant d'attacher et de rendre

10:35.546 --> 10:38.010
le contenu, je vais atteindre projectState

10:38.010 --> 10:40.110
et appeler addListener ici pour

10:40.110 --> 10:43.720
enregistrer une fonction d'écoute ici.

10:43.720 --> 10:46.150
Maintenant, un écouteur, comme je l'ai dit, est une fonction,

10:46.150 --> 10:49.100
donc nous devons passer une fonction à addListener.

10:49.100 --> 10:51.210
Parce que les écouteurs que nous gérons ici dans

10:51.210 --> 10:52.610
l'état du projet, c'est juste une

10:52.610 --> 10:54.680
liste de fonctions, que nous allons éventuellement

10:54.680 --> 10:56.300
appeler quand quelque chose change,

10:56.300 --> 10:57.773
n'est-ce pas ?

10:58.840 --> 11:01.110
Je vais donc devoir passer

11:01.110 --> 11:04.990
une fonction à ma fonction addListener ici.

11:04.990 --> 11:07.520
Ici, je passe une fonction flèche anonyme.

11:07.520 --> 11:10.770
Et cette fonction obtiendra une liste de projets quand

11:10.770 --> 11:14.400
elle sera appelée depuis l'intérieur de projectState.

11:14.400 --> 11:17.430
Nous obtenons donc une liste de projets, nous savons qu'à l'intérieur

11:17.430 --> 11:19.160
de ce corps de fonction, nous pouvons

11:19.160 --> 11:21.560
ensuite utiliser cette liste de projets.

11:21.560 --> 11:26.046
Et ici, je vais ajouter un tout nouveau champ à la liste de projets, assignedProjects

11:26.046 --> 11:28.410
maybe, qui est de type any array, donc n'importe

11:28.410 --> 11:30.310
quoi dans un tableau, et un tableau

11:30.310 --> 11:37.630
de n'importe quelles valeurs, bien sûr je vais aussi le spécifier plus en détail plus tard.

11:37.630 --> 11:39.890
Alors ici nous pouvons dire que ce projet

11:39.890 --> 11:41.780
assigné est égal aux projets.

11:41.780 --> 11:44.240
Donc, pour les projets que nous recevons.

11:44.240 --> 11:45.870
Maintenant, pour se débarrasser

11:45.870 --> 11:47.280
de cette erreur de type implicite,

11:47.280 --> 11:49.900
je dois être clair sur le fait que ce sera en fait un tableau

11:49.900 --> 11:51.563
de n'importe quoi.

11:52.610 --> 11:55.020
Maintenant, j'ajoute les projets que je reçois

11:55.020 --> 11:57.660
parce que quelque chose a changé dans mon état.

11:57.660 --> 11:59.490
Ici, dans mes projets assignés,

11:59.490 --> 12:00.530
je ne l'ajoute pas,

12:00.530 --> 12:02.350
je remplace les projets assignés

12:02.350 --> 12:04.170
par les nouveaux projets.

12:04.170 --> 12:08.223
Et puis mon idée est de rendre tous ces projets.

12:09.080 --> 12:10.883
Pour cela, nous pouvons ajouter

12:11.951 --> 12:15.080
une nouvelle méthode ; renderPrjects, par exemple.

12:15.080 --> 12:16.920
Que je veux appeler d'ici,

12:16.920 --> 12:20.063
ce renderProjects, juste comme ça.

12:22.230 --> 12:24.120
Il se termine en dehors de renderProjects.

12:24.120 --> 12:27.480
J'atteindrai cette liste ici, d'accord, nous assignons

12:27.480 --> 12:30.150
cet ID quand nous rendons le contenu, ce que nous

12:30.150 --> 12:31.290
faisons ici.

12:31.290 --> 12:34.440
Il semble que nous fassions cela après l'appel de renderProjects, mais gardez

12:34.440 --> 12:36.640
à l'esprit que cela se termine par une fonction, qui ne

12:36.640 --> 12:38.470
sera éventuellement appelée que lorsque de

12:38.470 --> 12:40.230
nouveaux projets seront ajoutés.

12:40.230 --> 12:43.510
Donc, en fait, renderContent sera exécuté en premier.

12:43.510 --> 12:47.090
Et donc, dans renderProjects nous pouvons compter sur cet

12:47.090 --> 12:49.370
ID étant assigné à une liste non ordonnée,

12:49.370 --> 12:53.030
donc ici nous pouvons saisir ceci et obtenir notre élément

12:53.030 --> 12:58.030
de liste en utilisant document. getElementbyId et ensuite je passe simplement

12:58.469 --> 13:00.790
cet identifiant en utilisant le type de

13:00.790 --> 13:03.690
cette classe de liste de projets concrets.

13:03.690 --> 13:08.563
Et puis aussi en utilisant, eh bien le reste de cette identification que nous avons généré.

13:09.580 --> 13:11.130
Et sur cette liste ou dans cette

13:11.130 --> 13:14.170
liste, je veux rendre tous les projets que nous avons.

13:14.170 --> 13:17.670
Donc, je vais passer en revue tous les

13:17.670 --> 13:21.060
éléments de ce projet assigné ici.

13:21.060 --> 13:23.150
Et puis pour chaque élément, je veux ajouter quelque

13:23.150 --> 13:23.983
chose à la liste et nous

13:23.983 --> 13:25.380
affinerons cela plus tard.

13:25.380 --> 13:29.787
Pour le moment, je vais simplement appeler appendChild ici sur

13:30.890 --> 13:32.480
mon élément de liste.

13:32.480 --> 13:34.490
Au fait, nous devrions ajouter ici un point d'exclamation

13:34.490 --> 13:36.970
pour bien faire comprendre que ce ne sera pas nul.

13:36.970 --> 13:41.970
Nous pouvons également le convertir en un élément de liste HTML UL, donc en un élément

13:42.000 --> 13:43.560
de liste non ordonnée, car

13:43.560 --> 13:45.420
c'est ce qu'il sera.

13:45.420 --> 13:47.530
Nous pouvons ensuite ajouter l'enfant

13:47.530 --> 13:49.740
ici et cela devrait être un tout nouvel élément

13:49.740 --> 13:51.980
de liste ; nous pouvons donc créer notre élément

13:51.980 --> 13:56.160
de liste avec le document. createElement LI.

13:56.160 --> 13:58.350
Et sur cet élément de liste ici,

13:58.350 --> 14:02.500
je vais juste mettre le contenu du texte égal à l'élément de

14:02.500 --> 14:03.950
projet. titre.

14:03.950 --> 14:06.240
Chaque élément de projet sera un projet

14:06.240 --> 14:09.940
tel que nous le créons dans l'état de projet, il sera donc

14:09.940 --> 14:11.350
un tel objet, et il aura

14:11.350 --> 14:13.100
donc un titre.

14:14.210 --> 14:15.940
Maintenant, si nous descendons ici, nous

14:15.940 --> 14:18.880
avons notre élément de liste qui est maintenant ajouté ici.

14:18.880 --> 14:20.730
Et avec cela nous y sommes presque,

14:20.730 --> 14:22.340
restant des corrections ici,

14:22.340 --> 14:23.740
j'ai mis en place ce champ,

14:23.740 --> 14:27.080
mais dans le constructeur je ne l'ai jamais référencé.

14:27.080 --> 14:29.090
Seulement ici dans ma fonction d'écoute, mais

14:29.090 --> 14:31.230
comme mentionné, cela ne s'exécute pas immédiatement

14:31.230 --> 14:32.640
dans le constructeur.

14:32.640 --> 14:37.640
Donc, ce que je vais faire ici, c'est que je vais définir ces projets assignés comme étant égaux

14:38.970 --> 14:41.200
à un tableau vide ici initialement, afin

14:41.200 --> 14:44.450
que nous soyons tous heureux et que ce soit initialisé.

14:44.450 --> 14:45.510
Maintenant si nous sauvegardons

14:45.510 --> 14:47.780
ceci, il devrait compiler sans erreurs.

14:47.780 --> 14:50.400
Et maintenant, si on ajoute quelque chose ici,

14:50.400 --> 14:51.993
est-ce que ça marche ?

14:53.480 --> 14:56.270
Nous le voyons en effet apparaître dans nos listes.

14:56.270 --> 14:58.270
Dans les deux listes pour le moment parce que nous

14:58.270 --> 15:00.847
n'avons pas de logique de filtrage et ainsi de suite.

15:00.847 --> 15:03.210
Et c'est quelque chose que nous pourrons corriger

15:03.210 --> 15:04.710
plus tard, mais cela fonctionne,

15:04.710 --> 15:06.220
et c'est l'essentiel.

15:06.220 --> 15:08.390
Maintenant, vous voyez que nous avons également un bug ici cependant.

15:08.390 --> 15:10.260
Si j'ajoute un deuxième élément, nous dupliquons

15:10.260 --> 15:12.370
le dernier élément et ajoutons les nouveaux éléments,

15:12.370 --> 15:13.880
c'est donc quelque chose que nous devrons

15:13.880 --> 15:15.490
corriger.

15:15.490 --> 15:17.653
Et ce sont toutes des choses que nous allons

15:17.653 --> 15:21.270
aborder, mais maintenant au moins nous sommes capables de produire quelque

15:21.270 --> 15:24.450
chose avec ça, plongeons dans toutes les améliorations comme

15:24.450 --> 15:27.160
être plus clair sur les types que nous utilisons, éviter

15:27.160 --> 15:29.150
la sortie en double, et beaucoup d'autres

15:29.150 --> 15:30.733
choses aussi.
