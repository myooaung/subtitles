WEBVTT

00:02.220 --> 00:05.760
-: Sebagai langkah selanjutnya, saya ingin mengerjakan tipe-tipe

00:05.760 --> 00:09.900
ini di sini, tipe apa pun yang saya gunakan di sini untuk proyek yang ditugaskan,

00:09.900 --> 00:11.320
untuk pendengar di sini,

00:11.320 --> 00:14.980
dan juga untuk proyek dalam status proyek.

00:14.980 --> 00:19.030
Tentu saja, di sini, saya tidak ingin bekerja dengan apa pun, akan

00:19.030 --> 00:20.740
lebih masuk akal untuk memiliki

00:20.740 --> 00:25.660
kelas proyek atau jenis proyek khusus, yang dapat kita gunakan.

00:25.660 --> 00:27.760
Dan memang, saya akan membuat class

00:29.070 --> 00:29.903
untuk tipe project

00:31.390 --> 00:32.450
tersebut, cukup dengan

00:32.450 --> 00:34.890
menggunakan class project sehingga kita

00:34.890 --> 00:38.740
memiliki cara untuk membangun objek project, yang selalu memiliki

00:38.740 --> 00:41.570
struktur yang sama.

00:41.570 --> 00:44.760
Sekarang saya melakukannya di sana dengan notasi literal.

00:44.760 --> 00:47.920
Kelemahannya, tentu saja, kita harus ingat bahwa

00:47.920 --> 00:50.490
itu adalah deskripsi dan bukan Desc.

00:50.490 --> 00:52.410
bahwa kita memerlukan ID, yang merupakan sebuah

00:52.410 --> 00:53.470
string, dan seterusnya.

00:53.470 --> 00:56.440
Jadi di situlah tipe kustom dapat membantu kita

00:56.440 --> 00:59.750
dan saya akan membuat kelas dan bukan antarmuka atau

00:59.750 --> 01:02.300
tipe Kustom dengan kata kunci tipe karena

01:02.300 --> 01:05.470
saya ingin dapat menginstansiasinya.

01:05.470 --> 01:07.960
Jadi, bagaimana seharusnya kelas seperti

01:07.960 --> 01:10.700
itu atau tepatnya proyek seperti itu?

01:10.700 --> 01:12.320
Nah, saya akan menambahkan konstruktor

01:12.320 --> 01:17.280
dan kemudian menggunakan jalan pintas ini untuk menetapkan argumen atau parameter ke

01:17.280 --> 01:19.100
konstruktor, yang kemudian secara

01:19.100 --> 01:22.310
otomatis menjadi properti juga, dengan menambahkan pengakses

01:22.310 --> 01:25.650
di awal, Publik, dalam hal ini, dan kemudian nama argumen dan

01:25.650 --> 01:29.450
properti, dan kemudian jenisnya.

01:29.450 --> 01:33.100
Dan di sini setiap proyek harus memiliki ID.

01:33.100 --> 01:34.990
Setiap proyek harus memiliki judul,

01:34.990 --> 01:37.330
yang juga berupa string, sama seperti ID.

01:37.330 --> 01:38.690
Ini harus memiliki deskripsi,

01:38.690 --> 01:39.920
yang merupakan string,

01:39.920 --> 01:44.420
harus memiliki properti Orang, yang merupakan angka yang merupakan jumlah

01:44.420 --> 01:47.440
orang yang ditugaskan ke proyek.

01:47.440 --> 01:49.580
Dan satu hal yang juga ingin saya tambahkan,

01:49.580 --> 01:51.640
yang sejauh ini tidak kami miliki, sebenarnya

01:51.640 --> 01:53.580
adalah status proyek.

01:53.580 --> 01:56.920
Karena sekarang ini, apabila kita menambahkan proyek di sini, proyek

01:56.920 --> 01:58.680
itu muncul di kedua daftar.

01:58.680 --> 02:01.530
Sekarang, saya ingin menambahkan status ke proyek

02:01.530 --> 02:03.630
yang tentu saja dapat diubah sehingga

02:03.630 --> 02:07.470
kita benar-benar dapat memfilter proyek yang aktif di kotak pertama

02:07.470 --> 02:11.470
dan proyek yang sudah selesai di kotak kedua.

02:11.470 --> 02:15.000
Jadi hanya menampilkan proyek yang tepat di setiap kotak.

02:15.000 --> 02:19.890
Jadi untuk itu saya akan menambahkan properti publik lain di sini, status.

02:19.890 --> 02:21.280
Dan sekarang pertanyaannya

02:21.280 --> 02:23.985
tentu saja, status ini harus memiliki tipe yang mana?

02:23.985 --> 02:28.240
Sekarang kita bisa menggunakan tipe union dengan dua tipe literal Aktif dan

02:28.240 --> 02:31.170
Selesai apa yang sudah kita gunakan sebelumnya.

02:31.170 --> 02:33.280
Tetapi di sini, saya selalu ingin memperkenalkan

02:33.280 --> 02:36.890
atau memperkenalkan kembali tipe lain yang telah Anda pelajari, dan

02:36.890 --> 02:38.320
itu adalah Enum.

02:38.320 --> 02:41.890
Enum sempurna di sini karena kita memiliki tepat dua opsi.

02:41.890 --> 02:44.950
Dan di sini dalam konteks objek proyek ini, kita juga tidak memerlukan

02:44.950 --> 02:48.740
teks yang masuk akal bagi manusia, yang kita simpan sebagai nilai, tetapi

02:48.740 --> 02:50.270
kita benar-benar hanya membutuhkan

02:50.270 --> 02:52.341
beberapa pengenal.

02:52.341 --> 02:56.140
Jadi di sini saya akan menambahkan status proyek Enum baru.

02:56.140 --> 02:59.810
Dan saya ingin memiliki dua nilai di

02:59.810 --> 03:02.890
sana, Active dan Finished.

03:02.890 --> 03:05.440
Dan kemudian di sini, status ini akan

03:05.440 --> 03:08.610
menjadi tipe status proyek seperti itu.

03:08.610 --> 03:11.003
Sekarang ini adalah kelas proyek saya.

03:11.900 --> 03:14.220
Dengan itu di sini, kita bisa mengatakan bahwa

03:14.220 --> 03:17.820
ini adalah array proyek yang menggunakan kelas proyek itu.

03:17.820 --> 03:20.351
Dan tentu saja, ketika kita membuat proyek

03:20.351 --> 03:24.780
di sini, kita melakukannya dengan menggunakan new project project,

03:24.780 --> 03:25.613
bukan project

03:25.613 --> 03:26.620
state.

03:26.620 --> 03:30.310
Dan di sini untuk memproyeksikan kami meneruskan ID

03:30.310 --> 03:32.200
dalam hal ini, seperti yang

03:32.200 --> 03:35.370
disebutkan sebelumnya, nomor acak yang kami

03:35.370 --> 03:36.720
ubah menjadi string,

03:36.720 --> 03:38.210
lalu judul, lalu deskripsi,

03:38.210 --> 03:41.930
lalu NUM of People di sini, dan kemudian juga, tentu

03:41.930 --> 03:45.080
saja, itu status, benar.

03:45.080 --> 03:49.950
Dan satu hal yang ingin saya miliki di sini dalam aplikasi ini dalam proyek

03:49.950 --> 03:53.180
demo ini adalah bahwa setiap proyek baru secara

03:53.180 --> 03:54.830
default aktif.

03:54.830 --> 03:57.040
Jadi, ketika kita membuat proyek baru di sini, kita

03:57.040 --> 04:00.064
menetapkan status proyek. aktif di sini sebagai nilai

04:00.064 --> 04:02.990
untuk status dengan itu, kita harus memproyeksikan

04:02.990 --> 04:05.230
yang kita tambahkan.

04:05.230 --> 04:06.720
Dan sekarang ada satu tempat lain

04:06.720 --> 04:08.450
di mana kita memerlukan kelas proyek.

04:08.450 --> 04:11.220
Dan itu ada di sini di kelas Daftar proyek di sana, kita

04:11.220 --> 04:13.474
memiliki properti Assign projects.

04:13.474 --> 04:17.240
Dan tentu saja, itu harus selalu berupa serangkaian proyek.

04:17.240 --> 04:19.530
Sekarang dengan itu kita menggunakan pengetikan Beta.

04:19.530 --> 04:22.810
Dan salah satu keuntungannya adalah bahwa di sini dalam proyek render,

04:22.810 --> 04:26.360
kita sekarang juga mendapatkan penyelesaian otomatis di sini, misalnya.

04:26.360 --> 04:29.020
Dan kita juga akan mendapatkan error, kesalahan kompilasi

04:29.020 --> 04:31.300
jika kita mencoba untuk menyimpannya, karena

04:31.300 --> 04:33.100
sekarang TypeScript mengerti dengan

04:33.100 --> 04:35.360
tipe apa kita bekerja di sini.

04:35.360 --> 04:39.040
Jadi itulah Kelas proyek dan bagaimana kita bisa menggunakannya.

04:39.040 --> 04:41.760
Kelas Project bukan satu-satunya kelas Namun,

04:41.760 --> 04:44.230
kita juga memiliki Listener di sini.

04:44.230 --> 04:48.630
Dan untuk itu, saya akan menambahkan tipe kustom baru Listener.

04:48.630 --> 04:50.390
Namanya tentu saja terserah Anda.

04:50.390 --> 04:54.280
Dan saya hanya menggunakan tipe di sini karena pada dasarnya

04:54.280 --> 04:58.260
saya ingin mengkodekan tipe fungsi dengan satu kata.

04:58.260 --> 04:59.640
Jadi, apa yang kami maksudkan dengan itu?

04:59.640 --> 05:03.270
Nah, tentu saja, listener di sini dalam aplikasi kita hanyalah

05:03.270 --> 05:05.370
sebuah fungsi, bukan?

05:05.370 --> 05:07.160
Apa yang kita simpan dalam array pendengar

05:07.160 --> 05:08.960
hanyalah sekumpulan fungsi Add Listener

05:08.960 --> 05:11.060
mendorong fungsi baru, dan ketika sesuatu

05:11.060 --> 05:12.200
berubah, kita mengeksekusi

05:12.200 --> 05:14.190
fungsi itu.

05:14.190 --> 05:17.610
Jadi di sini, seorang pendengar benar-benar hanya sebuah fungsi.

05:17.610 --> 05:22.610
Tetapi ini adalah fungsi yang menerima item kita, item

05:22.870 --> 05:23.703
tertentu

05:23.703 --> 05:27.113
dalam kasus kita dan array proyek.

05:28.500 --> 05:30.410
Dan itu kemudian melakukan sesuatu dengannya.

05:30.410 --> 05:32.480
Sekarang untuk lebih tepatnya di sini, tentu saja, untuk

05:32.480 --> 05:33.550
mendefinisikan tipe fungsi,

05:33.550 --> 05:35.200
kita tidak memiliki tanda kurung kurawal

05:35.200 --> 05:37.440
di sini, tetapi sebagai gantinya seperti yang Anda pelajari

05:37.440 --> 05:38.780
tipe pengembaliannya, dan itu akan

05:38.780 --> 05:41.880
menjadi lebar, yang berarti kita tidak peduli tentang nilai apa pun yang mungkin

05:41.880 --> 05:44.090
dikembalikan oleh fungsi Listener.

05:44.090 --> 05:46.140
Di tempat di mana kita bekerja dengan para pendengar.

05:46.140 --> 05:47.940
Kita tidak memerlukan tipe pengembalian apa pun.

05:47.940 --> 05:49.810
Kita hanya ingin memastikan bahwa siapa

05:49.810 --> 05:51.880
pun yang lolos sebagai pendengar seperti itu

05:51.880 --> 05:55.870
mengharapkan untuk mendapatkan beberapa item ketika pendengarnya menyala.

05:55.870 --> 05:58.530
Dengan itu di sini, kita dapat mengatakan bahwa

05:58.530 --> 06:02.760
Listeners adalah array fungsi sumur pendengar pada akhirnya.

06:02.760 --> 06:05.670
Dan di sini, ketika saya mendorong fungsi listener,

06:05.670 --> 06:08.480
saya perlu memperjelas bahwa itu bukan sembarang fungsi,

06:08.480 --> 06:10.630
tetapi itu adalah jenis listener, maka

06:10.630 --> 06:12.350
semuanya berfungsi.

06:12.350 --> 06:14.530
Sekarang di tempat di mana kita menggunakan Add

06:14.530 --> 06:16.180
Listener, yang ada di bawah sana, kita

06:16.180 --> 06:17.650
sekarang juga, tentu saja, dapat

06:17.650 --> 06:19.869
meningkatkan pengetikan kita dan memperjelas

06:19.869 --> 06:23.440
bahwa di sini, kita sebenarnya akan mendapatkan banyak proyek.

06:23.440 --> 06:27.220
Jadi sekarang dengan itu, kita menyiapkan pendengar kita,

06:27.220 --> 06:32.210
kita menambahkan jenis proyek, dan itu tidak mengubah apa pun di sini.

06:32.210 --> 06:35.120
Jika sekarang kita menambahkan sesuatu yang berfungsi,

06:35.120 --> 06:36.900
dan jika saya menambahkan item kedua,

06:36.900 --> 06:38.880
itu masih ditambahkan selain item pertama

06:38.880 --> 06:40.530
yang ditambahkan lagi, juga, dan

06:40.530 --> 06:43.230
kami tidak melakukan pemfilteran apa pun di daftar

06:43.230 --> 06:45.260
mana pun sama sekali.

06:45.260 --> 06:48.600
Jadi sebelum kita melanjutkan mengerjakan bagian kita,

06:48.600 --> 06:50.570
mari kita pastikan kita tidak memiliki

06:50.570 --> 06:53.990
duplikasi di sini di dalam satu daftar, dan juga bukan duplikasi

06:53.990 --> 06:57.640
di kedua kotak di sini, tetapi sebagai gantinya, hanya proyek

06:57.640 --> 06:58.610
aktif yang muncul

06:58.610 --> 07:01.030
di sini dan hanya proyek yang sudah selesai

07:01.030 --> 07:02.940
dan oleh karena itu pada awalnya tidak

07:02.940 --> 07:08.010
ada proyek yang muncul di sini dalam proyek yang sudah selesai.

07:08.010 --> 07:09.623
Jadi mari kita perbaiki itu.
