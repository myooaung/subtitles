WEBVTT

00:02.270 --> 00:04.040
Istruttore: Abbiamo dato un'occhiata

00:04.040 --> 00:05.900
a Lodash, una libreria di terze parti

00:05.900 --> 00:08.270
costruita con JavaScript per JavaScript.

00:08.270 --> 00:11.730
Si trovano anche alcune librerie di terze parti che abbracciano

00:11.730 --> 00:13.287
davvero gli script di tipo

00:13.287 --> 00:16.480
e le loro caratteristiche, offrendo un modo nuovo di

00:16.480 --> 00:18.360
scrivere codice che funziona perché

00:18.360 --> 00:21.230
si lavora con gli script di tipo.

00:21.230 --> 00:24.950
Un esempio è il trasformatore di classi, un esempio ancora migliore

00:24.950 --> 00:28.067
è il validatore di classi; li analizzeremo entrambi.

00:28.067 --> 00:31.360
Ma iniziamo con il trasformatore di classe.

00:31.360 --> 00:35.870
Diciamo che nel nostro progetto ho un modello, un modello di dati,

00:35.870 --> 00:38.150
chiamiamolo 'prodotto'.

00:38.150 --> 00:41.170
Ora lo chiamerò prodotto. modello. ma è possibile dare

00:41.170 --> 00:43.820
a questo file il nome che si desidera.

00:43.820 --> 00:48.820
La mia idea è che in questo file definisco una classe per un prodotto.

00:49.420 --> 00:52.180
Quindi descrivo come dovrebbe apparire un prodotto.

00:52.180 --> 00:55.550
Ad esempio, ha un titolo che è una stringa e un prezzo che

00:55.550 --> 00:59.070
è un numero e poi aggiungo una funzione costruttore in cui

00:59.070 --> 01:02.120
entrambi possono essere inizializzati.

01:02.120 --> 01:07.120
Quindi stringa, aggiunta di prezzo e poi ho detto che questo titolo è uguale a 't'

01:07.210 --> 01:09.360
e questo prezzo è uguale a 'p'.

01:09.360 --> 01:10.810
E naturalmente avremmo potuto usare

01:10.810 --> 01:12.980
la scorciatoia dell'inizializzazione, che prevede

01:12.980 --> 01:14.423
l'uso del solo costruttore.

01:16.150 --> 01:20.400
Poi diciamo che abbiamo sempre un metodo, get information,

01:20.400 --> 01:25.400
in cui restituisco un array, diciamo, in cui il primo elemento

01:25.950 --> 01:30.850
è il titolo e il secondo elemento è in realtà una stringa in cui

01:30.850 --> 01:35.770
ho il segno del dollaro e poi iniettato in questa stringa, questo

01:35.770 --> 01:37.833
prezzo.

01:39.030 --> 01:43.030
Quindi un modello molto semplice, una classe molto semplice.

01:43.030 --> 01:45.940
E ora possiamo ovviamente utilizzare questa classe, se

01:45.940 --> 01:49.590
vogliamo, in un'applicazione. quindi mi sbarazzerò di Lodash e importerò

01:49.590 --> 01:54.590
invece il prodotto da . /prodotto. Ora, per questo bisogna assicurarsi

01:56.200 --> 01:58.920
che nel modello del prodotto si esporti effettivamente

01:58.920 --> 02:01.010
questa classe, altrimenti non è possibile

02:01.010 --> 02:03.860
importarla e qui dobbiamo esportare il prodotto in

02:03.860 --> 02:05.800
questo modo, perché sto usando un'esportazione

02:05.800 --> 02:07.890
con nome, aggiungendo la parola chiave

02:07.890 --> 02:11.950
export proprio davanti alla classe.

02:11.950 --> 02:16.497
Ora possiamo creare un nuovo prodotto, un libro

02:18.150 --> 02:23.150
che costa 12 euro. 99 e successivamente registro la console

02:24.080 --> 02:28.190
p1 per ottenere informazioni e dovremmo registrare questo array.

02:28.190 --> 02:31.390
Quindi, se ora eseguiamo npm start, il nostro web

02:31.390 --> 02:34.250
pack dev si avvia e dovremmo vedere questo bell'array

02:34.250 --> 02:37.340
con le informazioni su questo libro.

02:37.340 --> 02:39.463
Quindi, se ricarico qui, eccolo qui.

02:40.630 --> 02:43.170
Non si tratta di una soluzione troppo sofisticata,

02:43.170 --> 02:44.930
ma non è una novità.

02:44.930 --> 02:47.270
Ora, uno scenario comune nelle applicazioni

02:47.270 --> 02:49.610
più grandi è che si scaricano alcuni dati,

02:49.610 --> 02:52.150
ad esempio da un server, si recuperano i dati

02:52.150 --> 02:54.490
da un server back end e il server restituisce

02:54.490 --> 02:58.370
alcuni dati json che vengono passati, che potrebbero essere

02:58.370 --> 03:01.560
un elenco di prodotti.

03:01.560 --> 03:05.520
Quindi, potremmo avere dei prodotti che riceviamo dal server e di cui

03:05.520 --> 03:10.520
abbiamo un titolo, un tappeto e un prezzo. 99 e poi abbiamo anche

03:13.047 --> 03:18.047
questo libro, quindi titolo, libro e un

03:18.120 --> 03:22.830
prezzo di 10. 99, diciamo.

03:22.830 --> 03:25.310
Si tratta quindi di un array di dati molto semplice,

03:25.310 --> 03:27.730
che viene poi recuperato dal back-end.

03:27.730 --> 03:30.590
Naturalmente questi sono oggetti JavaScript,

03:30.590 --> 03:33.730
ma non sono istanze del nostro modello di prodotto.

03:33.730 --> 03:37.220
E questo è uno scenario tipico in cui si ottengono dati come

03:37.220 --> 03:40.990
json, ma non ha dati allegati, come ad esempio a quale funzione del

03:40.990 --> 03:42.850
costruttore si appartiene.

03:42.850 --> 03:46.770
Il server lo sa e anche json è un formato che trasmette

03:46.770 --> 03:51.230
solo dati di base, non ci sono meta-dati ricchi per gli

03:51.230 --> 03:53.540
oggetti allegati.

03:53.540 --> 03:56.300
O perlomeno si dovrebbe farlo manualmente.

03:56.300 --> 04:00.120
In altre parole, i prodotti che otteniamo sono oggetti

04:00.120 --> 04:03.310
che non hanno un metodo get information.

04:03.310 --> 04:08.230
Tradizionalmente, se si volesse convertire questi dati in istanze

04:08.230 --> 04:12.680
del modello, bisognerebbe farlo manualmente.

04:12.680 --> 04:17.680
Si potrebbe avere il caricamento dei prodotti che poi, diciamo che usa

04:19.260 --> 04:22.770
i prodotti, chiama il metodo map e su ogni prodotto

04:22.770 --> 04:25.680
in quell'array restituisce un nuovo prodotto

04:25.680 --> 04:30.680
per prod. titolo e prod. e poi avremmo un array pieno

04:34.330 --> 04:36.660
di istanze di funzioni del costruttore

04:36.660 --> 04:40.230
di prodotti reali e quindi potremmo effettivamente eseguire

04:40.230 --> 04:43.163
un ciclo su questi prodotti caricati e poi, ad

04:44.330 --> 04:51.083
esempio, nella console log prod.

04:51.083 --> 04:51.083
getinformation.

04:52.150 --> 04:56.010
In questo modo è possibile trasformare manualmente un array o

04:56.010 --> 05:00.070
anche un singolo oggetto Vanilla JavaScript senza nome in un'istanza

05:00.070 --> 05:02.880
di una specifica funzione costruttrice e quindi

05:02.880 --> 05:05.000
ottenere questo output.

05:05.000 --> 05:07.220
Ora, fare questo manualmente è complicato.

05:07.220 --> 05:09.590
Si tratta di un mucchio di passaggi extra,

05:09.590 --> 05:12.710
ma si tratta solo di una semplice trasformazione.

05:12.710 --> 05:16.690
È qui che il pacchetto trasformatore di classi può aiutarci.

05:16.690 --> 05:19.330
Lo rende molto, molto semplice.

05:19.330 --> 05:22.390
Nel nostro caso, definiamo anche una classe

05:22.390 --> 05:25.010
nel tipo di script, quindi potremmo ricevere

05:25.010 --> 05:29.340
dei dati, ad esempio da un server, e poi possiamo chiamare un semplice

05:29.340 --> 05:32.430
metodo di convenienza che convertirà automaticamente

05:32.430 --> 05:36.893
i nostri dati nei modelli giusti.

05:38.100 --> 05:40.030
Ora, per prima cosa eseguiamo

05:40.030 --> 05:44.840
nmp install class transformer--save, in questo modo e una volta terminato

05:45.730 --> 05:47.820
eseguiamo npm install reflect-metadata--save

05:47.820 --> 05:50.350
Un pacchetto, questo pacchetto alla

05:51.451 --> 05:54.470
fine dipende da.

05:54.470 --> 05:57.460
Quindi importiamo anche questo e poi, come

05:57.460 --> 06:02.460
indicato nelle istruzioni di configurazione, importiamo i metadati

06:02.890 --> 06:07.680
di riflessione nei file di inserimento del percorso, nel mio caso

06:07.680 --> 06:11.410
qui in app. Importo questa libreria di terze parti

06:11.410 --> 06:14.970
che abbiamo appena installato come dipendenza della nostra libreria.

06:14.970 --> 06:17.210
Ora, questa formulazione non prevede alcun passaggio di tipo "js" e quindi

06:17.210 --> 06:18.610
possiamo saltare questo passaggio.

06:18.610 --> 06:20.180
Nel browser dobbiamo comunque

06:20.180 --> 06:24.780
installare gli stessi pacchetti e l'aggiunta di questa importazione qui va bene

06:24.780 --> 06:26.880
perché stiamo usando il pacchetto web

06:26.880 --> 06:30.090
e quindi ora siamo effettivamente a posto.

06:30.090 --> 06:35.090
Ora possiamo importare qualcosa dal trasformatore di classi

06:36.290 --> 06:40.210
e quel qualcosa è il metodo 'plain to class'.

06:40.210 --> 06:42.630
Questo pacchetto ha anche un paio di altri metodi.

06:42.630 --> 06:45.200
Per saperne di più, consultate la documentazione ufficiale.

06:45.200 --> 06:49.060
Ma 'plain to class' è il metodo principale.

06:49.060 --> 06:54.060
È possibile utilizzarlo per impostare, ad esempio, i prodotti caricati.

06:55.150 --> 06:58.230
Invece di farlo manualmente come abbiamo fatto prima,

06:58.230 --> 07:01.480
possiamo impostare loaded products uguale a plain to

07:01.480 --> 07:03.760
class e passargli due argomenti.

07:03.760 --> 07:08.070
Il primo parametro è la classe in cui vogliamo convertirla.

07:08.070 --> 07:10.190
Nel mio caso, il prodotto.

07:10.190 --> 07:12.700
Non la istanzio e non la chiamo,

07:12.700 --> 07:15.560
ma punto solo a quella classe.

07:15.560 --> 07:19.460
Il secondo argomento è il dato che vogliamo trasformare.

07:19.460 --> 07:23.520
Quindi, nel mio caso, si tratta di prodotti.

07:23.520 --> 07:25.840
Ora, il pacchetto si occuperà

07:25.840 --> 07:28.100
di questo array, trasformando

07:28.100 --> 07:31.034
ogni oggetto Vanilla JavaScript in

07:31.034 --> 07:34.090
un'istanza di questa classe.

07:34.090 --> 07:37.830
Quindi, se ora salviamo e lanciamo di nuovo npm start, la pagina

07:37.830 --> 07:40.330
web che avvia il server si riavvia e dovrebbe

07:40.330 --> 07:43.270
costruire il progetto senza errori.

07:43.270 --> 07:46.540
Se ricarico la pagina, ottengo lo stesso risultato di prima,

07:46.540 --> 07:49.530
ma naturalmente con meno codice da parte nostra, perché

07:49.530 --> 07:51.870
stiamo usando questo pacchetto.

07:51.870 --> 07:53.403
L'aspetto sorprendente

07:53.403 --> 07:57.070
di questo pacchetto è che funziona così bene, perché si basa

07:57.070 --> 08:01.230
sul tipo di script e utilizza il tipo di script e il fatto che abbiamo

08:01.230 --> 08:04.280
una classe a cui possiamo puntare.

08:04.280 --> 08:08.730
Ma ad essere onesti, questo pacchetto funziona particolarmente bene con gli script

08:08.730 --> 08:10.900
di tipo, ma non utilizza una funzione specifica

08:10.900 --> 08:12.600
per gli script di tipo.

08:12.600 --> 08:16.630
Le classi, ad esempio, esistono anche in Vanilla JavaScript.

08:16.630 --> 08:20.170
Quindi, sebbene sia stato sviluppato principalmente per gli script

08:20.170 --> 08:23.610
di tipo, in realtà funziona anche con Vanilla JavaScript.

08:23.610 --> 08:26.633
Questo però non sarà vero per il prossimo pacchetto.
