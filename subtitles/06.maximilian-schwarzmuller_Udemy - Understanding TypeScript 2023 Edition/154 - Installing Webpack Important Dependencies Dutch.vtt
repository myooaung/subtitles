WEBVTT

00:02.160 --> 00:05.373
-: Dus terug in ons project, als je daar webpack wilt gebruiken, zal ik

00:07.223 --> 00:09.948
eerst mijn compilatie en die huidige ontwikkelingsserver

00:09.948 --> 00:10.870
stoppen, en dan stat,

00:10.870 --> 00:13.440
ervoor zorgen dat we daar webpack kunnen gebruiken.

00:13.440 --> 00:16.420
Nu dit al een bestand is van het package dot json bestand,

00:16.420 --> 00:19.462
kunnen we NPM gebruiken om meer afhankelijkheden in dit

00:19.462 --> 00:21.050
project te installeren.

00:21.050 --> 00:23.410
Dus gewoon, meer bibliotheken van derden hebben

00:23.410 --> 00:24.940
we nodig in dit project.

00:24.940 --> 00:28.610
En hier bedoel ik niet bibliotheken van derden die een bepaalde

00:28.610 --> 00:31.480
functionaliteit bieden met onze code, maar bibliotheken

00:31.480 --> 00:33.930
van derden die ons helpen een projectworkflow

00:33.930 --> 00:37.157
en configuratie op te zetten die de ontwikkeling voor

00:37.157 --> 00:40.430
ons zeer efficiënt maakt.

00:40.430 --> 00:45.110
We doen dit met NPM geïnstalleerd, dash dash safe dash

00:45.110 --> 00:48.600
dev om aan te geven dat het een development

00:48.600 --> 00:53.600
only dependency is, en dan webpack webpack dash CLI, webpack

00:53.713 --> 00:58.713
dash dev dash server typescript en ts loader.

01:01.030 --> 01:03.040
Dus dat zijn een heleboel pakketten

01:03.040 --> 01:04.800
en ik zal zo zeggen wat ze doen.

01:04.800 --> 01:06.680
Dus laten we eerst op enter drukken en ervoor

01:06.680 --> 01:08.485
zorgen dat deze nu allemaal geïnstalleerd

01:08.485 --> 01:10.801
worden in ons project hier, en daarna zullen we elk

01:10.801 --> 01:14.100
pakket bekijken en zien waarom we het geïnstalleerd hebben, dus laten

01:14.100 --> 01:16.290
we wachten tot dit klaar is.

01:16.290 --> 01:18.530
Dus voor mij is de installatie voltooid,

01:18.530 --> 01:21.710
en laten we nu analyseren wat we geïnstalleerd hebben.

01:21.710 --> 01:25.380
In package dot json, de nieuwe dev afhankelijkheden sectie, of het

01:25.380 --> 01:27.063
bestond al, maar nu hebben we veel

01:27.063 --> 01:29.474
nieuwe pakketten daar moet ik zeggen, deze pakketten

01:29.474 --> 01:31.290
werden toegevoegd.

01:31.290 --> 01:33.690
Wat doen al deze pakketten?

01:33.690 --> 01:35.460
Laten we beginnen met webpack.

01:35.460 --> 01:37.580
Webpack is de tool waar ik het net over

01:37.580 --> 01:40.080
had, het is het hart van deze hele opstelling

01:40.080 --> 01:41.780
die we nu gaan maken.

01:41.780 --> 01:43.980
Het is een hulpmiddel waarmee we bepaalde

01:43.980 --> 01:47.150
functionaliteiten kunnen inpluggen om onze code te bundelen

01:47.150 --> 01:49.210
en ook om onze code te transformeren.

01:49.210 --> 01:52.470
En dat transformeren van onze code is belangrijk, we hebben

01:52.470 --> 01:54.740
hier een typescript project toch?

01:54.740 --> 01:56.620
Nu kunnen we natuurlijk webpack

01:56.620 --> 02:00.220
gebruiken om alle JavaScript-uitvoer te bundelen, maar het

02:00.220 --> 02:03.310
zou nog mooier zijn als webpack beide zou doen.

02:03.310 --> 02:06.250
Onze typescript code omzetten naar JavaScript,

02:06.250 --> 02:10.180
en dan daadwerkelijk een gebundeld Javascript bestand uitzenden,

02:10.180 --> 02:13.420
en webpack kan dat gelukkig.

02:13.420 --> 02:16.610
We hebben de webpack CLI nodig om webpack-commando's uit

02:16.610 --> 02:18.922
te voeren in ons project, en de webpack dev

02:18.922 --> 02:21.603
server om die ingebouwde ontwikkelingsserver

02:21.603 --> 02:24.286
te hebben, die webpack start onder de motorkap,

02:24.286 --> 02:27.056
die onze bestanden bekijkt op wijzigingen, die

02:27.056 --> 02:30.180
webpack automatisch triggert om opnieuw te compileren

02:30.180 --> 02:34.760
als er iets verandert, en die onze pagina automatisch serveert.

02:34.760 --> 02:37.300
En dan hebben we typescript en typescript

02:37.300 --> 02:39.460
loader, de ts loader hier.

02:39.460 --> 02:42.850
Nu hebben we typescript al globaal op onze machine geïnstalleerd,

02:42.850 --> 02:46.208
daarom kunnen we tsc dash w uitvoeren.

02:46.208 --> 02:49.760
Nu is het een goede gewoonte om per project automatisch een kopie

02:49.760 --> 02:53.450
van typescript te installeren, zodat je voor dit project een specifieke

02:53.450 --> 02:56.000
typescript-versie hebt.

02:56.000 --> 02:58.320
Het voordeel is dat als je ooit je globale

02:58.320 --> 03:01.624
typescript versie verandert, je niet je project versie

03:01.624 --> 03:05.170
breekt, je project setup als we veranderingen in typescript

03:05.170 --> 03:07.280
zelf breken, dus we kunnen een specifieke

03:07.280 --> 03:10.340
versie van typescript voor een project vastzetten,

03:10.340 --> 03:13.880
daarom hebben we het hier apart geïnstalleerd.

03:13.880 --> 03:16.440
En de ts loader is nu een pakket dat zal

03:16.440 --> 03:18.380
samenwerken met webpack.

03:18.380 --> 03:21.068
De ts loader is een pakket dat webpack vertelt

03:21.068 --> 03:24.396
hoe het typescript code moet omzetten in Javascript, zodat

03:24.396 --> 03:29.180
webpack in staat is om beide te doen, onze code compileren, met behulp van de typescript

03:29.180 --> 03:30.920
loader, die op zijn beurt natuurlijk

03:30.920 --> 03:33.370
de typescript compiler onder de motorkap

03:33.370 --> 03:36.665
gebruikt, en dan is webpack ook in staat om onze geëmitteerde

03:36.665 --> 03:44.260
javascript bestanden te bundelen in een gebundeld js bestand in één gebundeld codebestand.

03:44.260 --> 03:47.440
Nou, en daarmee gaan we gewoon aan de slag en laten we

03:47.440 --> 03:50.852
een webpack project opzetten zodat we webpack kunnen gebruiken

03:50.852 --> 03:53.223
voor al deze leuke dingen.
