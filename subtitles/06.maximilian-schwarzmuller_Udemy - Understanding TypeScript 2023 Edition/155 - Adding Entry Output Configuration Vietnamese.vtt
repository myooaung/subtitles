WEBVTT

00:01.538 --> 00:03.725
Người kể chuyện: Để bắt đầu, trước

00:03.725 --> 00:07.086
hết hãy vào tsconfig. json vì ở đó chúng tôi cần đảm bảo

00:07.086 --> 00:09.965
rằng một số thứ nhất định đã được định cấu hình.

00:09.965 --> 00:12.780
Đảm bảo rằng mục tiêu ở đây, thực sự được đặt

00:12.780 --> 00:16.286
thành es5 hoặc es6, điều đó tùy thuộc vào bạn.

00:16.286 --> 00:19.423
Nó phụ thuộc vào trình duyệt bạn định hỗ trợ.

00:19.423 --> 00:22.190
Bởi vì cuối cùng webpack và các loại trình tải

00:22.190 --> 00:24.050
sẽ sử dụng mục tiêu này để xác định

00:24.050 --> 00:26.543
cách mã của bạn sẽ được chuyển đổi.

00:26.543 --> 00:28.960
Các loại mã của bạn có nên được chuyển đổi thành

00:28.960 --> 00:32.480
mã tập lệnh Java chạy trong các trình duyệt cũ hơn không?

00:32.480 --> 00:36.210
Hoặc như với es6 để mã chỉ chạy trong các trình

00:36.210 --> 00:37.811
duyệt gần đây hơn?

00:37.811 --> 00:42.640
Sau đó, mô-đun phải được đặt thành es2015 hoặc es6 để

00:42.640 --> 00:44.110
cài đặt đó ổn.

00:44.110 --> 00:49.110
Ngoài ra, bạn cũng muốn xác minh outDir của mình.

00:50.560 --> 00:53.520
Tôi sẽ giữ nó ở dist nhưng bạn có thể thay đổi điều này nếu bạn

00:53.520 --> 00:55.997
muốn biên dịch mã của mình sang một thư mục khác.

00:55.997 --> 00:59.378
Tuy nhiên, bạn không cần phải vào thư mục gốc nữa,

00:59.378 --> 01:02.260
vì webpack sẽ tiếp quản ở đó và webpack sẽ xác

01:02.260 --> 01:05.014
định vị trí của các tệp gốc của bạn.

01:05.014 --> 01:07.660
Vì vậy, nói chung các cài đặt này sẽ ổn.

01:07.660 --> 01:09.525
Chúng tôi luôn có thể chỉnh sửa chúng sau

01:09.525 --> 01:12.487
này nếu có gì đó không hoạt động theo cách chúng tôi muốn.

01:12.487 --> 01:15.220
Với điều đó, hãy thêm một tệp cấu hình mới bên

01:15.220 --> 01:19.848
cạnh tsconfig. json và đó là webpack. cấu hình. tập tin js.

01:19.848 --> 01:22.368
Và hãy chắc chắn rằng bạn thực sự đặt tên nó

01:22.368 --> 01:24.150
như thế này bởi vì đây là tệp webpack

01:24.150 --> 01:27.579
sẽ tự động tìm kiếm và điều này thậm chí sẽ cho webpack biết

01:27.579 --> 01:30.220
cách làm việc với dự án của chúng ta.

01:30.220 --> 01:32.840
Bởi vì webpack là một công cụ cần được cấu hình

01:32.840 --> 01:34.568
để hoạt động chính xác ở đây.

01:34.568 --> 01:37.568
Vậy chúng ta phải làm gì trong webpack. tập tin cấu hình?

01:37.568 --> 01:40.338
Tệp cấu hình này sử dụng JavaScript và thực

01:40.338 --> 01:43.288
tế nó sử dụng node. các tính năng của js.

01:43.288 --> 01:46.747
Vì vậy, chúng tôi muốn sử dụng node. js xuất cú pháp, giống như

01:46.747 --> 01:50.379
thế này để sau đó xuất một đối tượng JavaScript.

01:50.379 --> 01:53.538
Đó sẽ là đối tượng cấu hình được chọn bởi webpack.

01:53.538 --> 01:55.585
Vì vậy, trong trường hợp bạn chưa từng thấy điều đó trước

01:55.585 --> 01:59.648
đây, thì đây là cách bạn xuất mọi thứ trong một nút. môi trường js.

01:59.648 --> 02:02.877
Và ở đây chúng tôi đang xuất một đối tượng JavaScript.

02:02.877 --> 02:05.920
Bây giờ webpack cần một vài thông tin.

02:05.920 --> 02:09.840
Quan trọng nhất là nó cần biết toàn bộ dự án của

02:09.840 --> 02:14.585
bạn bắt đầu với tệp nào; vậy điểm vào của bạn ở đâu.

02:14.585 --> 02:17.370
Trong trường hợp của chúng tôi, đó là ứng dụng. tập tin ts.

02:17.370 --> 02:18.922
Tệp này phải được thực thi

02:18.922 --> 02:20.981
trước tiên và những gì webpack sau

02:20.981 --> 02:24.013
đó sẽ làm là nó sẽ xem xét các lần nhập trong tệp này và

02:24.013 --> 02:25.461
chuyển đến các tệp này và

02:25.461 --> 02:27.378
xem các lần nhập của chúng cũng như

02:27.378 --> 02:30.219
quá trình nhập của các tệp đã nhập, v.v.

02:30.219 --> 02:33.461
Cho đến khi nó biết tất cả các tệp mà dự án của bạn sử dụng cuối cùng.

02:33.461 --> 02:36.201
Và sau đó, nó sẽ duyệt qua các nội dung của tệp

02:36.201 --> 02:38.740
như nội dung này ở đây và tất cả nội dung trong

02:38.740 --> 02:41.690
tất cả các tệp và biên dịch chúng, với sự trợ giúp

02:41.690 --> 02:44.290
của ts. gói trình tải mà tôi đã đề cập.

02:44.290 --> 02:46.960
Bây giờ để làm cho webpack hoạt động chính xác ở đây, bây giờ

02:46.960 --> 02:50.421
bạn thực sự nên xóa tất cả các tệp . js trong tất cả các

02:50.421 --> 02:51.598
lần nhập.

02:51.598 --> 02:54.400
Chúng tôi cần điều đó trước đây, khi chúng tôi sử dụng trình

02:54.400 --> 02:57.885
duyệt gốc tích hợp trong ts. chức năng mô-đun, nhưng với

02:57.885 --> 03:01.130
webpack, bạn không cần các tiện ích mở rộng này.

03:01.130 --> 03:03.664
Bởi vì webpack thực sự sẽ tự động tìm kiếm. js và một số tệp mở rộng khác.

03:03.664 --> 03:06.501
Vì vậy, bạn không và không nên thêm chúng ở đây, nếu

03:06.501 --> 03:09.270
không webpack sẽ tìm kiếm các tệp có phần mở rộng

03:09.270 --> 03:10.716
kép mà bạn không muốn.

03:10.716 --> 03:13.655
Vì vậy, loại bỏ . js trên tất cả các lần nhập này tại đây và sau khi bạn

03:13.655 --> 03:18.441
thực hiện việc đó, hãy lưu tất cả các tệp này

03:18.441 --> 03:21.370
để đảm bảo các thay đổi của bạn được áp dụng.

03:21.370 --> 03:24.043
Bây giờ quay lại webpack. cấu hình. js, bây giờ bạn nên thêm

03:24.043 --> 03:26.498
thuộc tính

03:26.498 --> 03:31.320
mục nhập vào đối tượng đã xuất này.

03:31.320 --> 03:32.740
Và chỉ vào . /src/app. ts trong ví dụ của chúng tôi.

03:32.740 --> 03:37.740
Vì vậy, tại tệp nhập gốc của dự án của bạn.

03:38.680 --> 03:42.444
Tiếp theo thêm một khóa đầu ra ở đây.

03:42.444 --> 03:45.880
Một đầu ra bây giờ là một đối tượng ở đây.

03:45.880 --> 03:48.051
Trước hết chúng tôi chỉ định tên tệp.

03:48.051 --> 03:51.120
Đây sẽ là tệp JavaScript duy nhất sẽ

03:51.120 --> 03:52.998
được tạo cuối cùng.

03:52.998 --> 03:55.440
Và ở đây chúng ta sẽ đặt tên nó là bundle. js, nhưng bạn có thể đặt tên nó là gì

03:55.440 --> 03:57.350
tùy thích.

03:57.350 --> 03:58.788
Ứng dụng. js hoặc bất cứ thứ gì bạn muốn.

03:58.788 --> 04:01.709
Bạn cũng có thể thêm các phần

04:01.709 --> 04:05.171
động ở đây, chẳng hạn như hàm băm nội dung, để yêu cầu webpack

04:05.171 --> 04:08.971
tự động tạo một giá trị duy nhất cho mọi bản dựng có thể giúp bạn

04:08.971 --> 04:11.829
lưu vào bộ nhớ đệm trong trình duyệt.

04:11.829 --> 04:13.578
Nhưng một lần nữa, bạn có thể tìm hiểu thêm về điều đó trong tài liệu webpack.

04:13.578 --> 04:16.229
Ở đây chúng tôi không cần nó vì vậy chúng tôi sẽ chỉ đặt tên cho tệp là bundle. js.

04:16.229 --> 04:19.779
Ngoài tên tệp, bạn cũng cần

04:19.779 --> 04:23.320
chỉ định đường dẫn, nơi đầu ra sẽ được ghi vào.

04:23.320 --> 04:26.131
Và tất nhiên điều đó phải khớp với

04:26.131 --> 04:28.900
đường dẫn bạn có trong ts. cấu hình. js để tránh lỗi.

04:28.900 --> 04:32.970
Vì vậy, để thư mục này.

04:32.970 --> 04:34.189
Bây giờ không giống như trong ts. config,js, bạn

04:34.189 --> 04:37.010
không nên viết . /dist ở đây.

04:37.010 --> 04:39.819
Webpack muốn có một đường dẫn tuyệt đối ở đây.

04:39.819 --> 04:42.099
Và để xây dựng một cái, chúng ta có thể sử dụng một nút. mô-đun js.

04:42.099 --> 04:45.669
Để làm được điều đó, chúng ta có thể sử dụng node. js, sử dụng từ khóa

04:45.669 --> 04:48.880
bắt buộc và nhập

04:48.880 --> 04:51.280
mô-đun đường dẫn.

04:51.280 --> 04:54.220
Bạn không cần cài đặt cái này làm thư

04:54.220 --> 04:56.050
viện, đây là nút lõi. js mà bạn đã có nếu

04:56.050 --> 04:59.651
bạn có node. js mà bạn đã cài đặt vì chúng tôi đã cài đặt

04:59.651 --> 05:02.149
nó trước đó trong khóa học.

05:02.149 --> 05:04.966
Bây giờ bạn có thể sử dụng đường dẫn để gọi

05:04.966 --> 05:08.552
phương thức giải quyết ở đó cho phép bạn tạo đường dẫn

05:08.552 --> 05:11.280
tuyệt đối đến một thư mục nhất định.

05:11.280 --> 05:12.910
Để làm được điều đó, chúng tôi sử

05:12.910 --> 05:15.320
dụng một hằng số đặc biệt, hằng số __dirname,

05:15.320 --> 05:17.236
có sẵn trên toàn cầu trong một nút. môi trường js.

05:17.236 --> 05:21.150
Và webpack như tôi đã nói sử dụng node. js để thực thi các tệp của bạn.

05:21.150 --> 05:24.692
Và sau đó, với tư cách là đối số thứ

05:24.692 --> 05:27.433
hai dist, cuối cùng, dist chỉ xây dựng một đường

05:27.433 --> 05:30.661
dẫn tuyệt đối đến thư mục dist mà gói web sau đó sẽ sử dụng

05:30.661 --> 05:33.190
để ghi thông tin đầu ra của bạn vào đó.

05:33.190 --> 05:35.452
Và với điều đó, bạn có một điểm đầu vào và một

05:35.452 --> 05:38.753
điểm đầu ra, nhưng bạn không cho webpack biết phải làm gì với

05:38.753 --> 05:40.743
các tệp TypeScript của mình.

05:40.743 --> 05:42.553
Vì mặc định webpack không biết

05:42.553 --> 05:45.140
điều đó nên mặc định nó chỉ là một bundler.

05:45.140 --> 05:46.884
Bất kỳ chức năng bổ sung nào, như

05:46.884 --> 05:48.684
biên dịch TypeScript thành JavaScript

05:48.684 --> 05:51.261
đều phải được dạy cho webpack.

05:51.261 --> 05:53.452
Chúng ta sẽ làm điều đó trong bài giảng tiếp theo.
