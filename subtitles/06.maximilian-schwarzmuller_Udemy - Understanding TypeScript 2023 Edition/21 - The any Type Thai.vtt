WEBVTT

00:02.260 --> 00:04.920
ผู้สอน: จากนี้ เราเกือบจะเสร็จสิ้นกับประเภทหลักแล้ว

00:04.920 --> 00:09.390
ยังมีอีกประเภทหนึ่งซึ่งเราได้เห็นกันแล้วว่าเป็นประเภทใด

00:09.390 --> 00:11.480
ประเภทใดก็ได้คือประเภทที่ยืดหยุ่นที่สุดที่คุณสามารถกำหนดใน

00:11.480 --> 00:13.310
TypeScript

00:13.310 --> 00:16.710
ประเภทนี้ไม่ได้บอกอะไร TypeScript

00:16.710 --> 00:19.960
โดยทั่วไปหมายความว่าคุณสามารถเก็บมูลค่าประเภทใดก็ได้ไว้ในนั้น

00:19.960 --> 00:22.031
เราไม่ได้รับมอบหมายประเภทเฉพาะ

00:22.031 --> 00:27.040
โดยทั่วไปแล้ว TypeScript จะไม่ตะโกนใส่คุณเมื่อคุณใช้งานใดๆ

00:27.040 --> 00:28.030
กลับมาที่รหัสของเราที่นี่

00:28.030 --> 00:32.870
ถ้าฉันจะตั้งค่าประเภทของกิจกรรมโปรดเป็นใดๆ จะไม่ได้รับข้อผิดพลาด

00:32.870 --> 00:36.580
หากตั้งค่าเป็นอาร์เรย์ใดๆ อย่างน้อยฉันก็บอก TypeScript

00:36.580 --> 00:39.220
ว่ากิจกรรมโปรดเป็นอาร์เรย์ของบางสิ่ง

00:39.220 --> 00:41.460
ดังนั้น ถ้าฉันจะเก็บเพียงค่าเดียวที่ฉันอยู่ที่นั่น

00:41.460 --> 00:42.830
ฉันจะได้รับข้อผิดพลาด

00:42.830 --> 00:46.638
แต่ตราบใดที่มันเป็นอาร์เรย์ ฉันสามารถเก็บทุกอย่างที่ต้องการไว้ในนั้นได้

00:46.638 --> 00:49.840
ดังนั้นจึงมีความยืดหยุ่นจริงๆ

00:49.840 --> 00:52.070
และนี่อาจฟังดูดีแต่กำปั้นทุบดิน

00:52.070 --> 00:54.060
แต่จริงๆ แล้วมันเป็นข้อเสียอย่างใหญ่หลวง

00:54.060 --> 00:58.290
และคุณต้องการหลีกเลี่ยงอย่างยิ่งเมื่อทำได้

00:58.290 --> 01:00.170
เพราะโดยทั่วไปแล้วข้อดีทั้งหมดที่

01:00.170 --> 01:02.512
TypeScript มอบให้คุณ

01:02.512 --> 01:06.430
มันให้ประสบการณ์แบบเดียวกับที่คุณมีกับวานิลลาจาวาสคริปต์

01:06.430 --> 01:10.480
โดยที่คุณต้องทำทุกอย่างเพื่อพูดแบบนั้น

01:10.480 --> 01:13.820
โดยทั่วไปจะทำให้แน่ใจว่าคอมไพเลอร์ TypeScript

01:13.820 --> 01:19.180
ไม่สามารถตรวจสอบอะไรได้ เพราะหากคุณสมบัติหรือตัวแปรใด ๆ สามารถเก็บค่าใด

01:19.180 --> 01:23.687
ๆ ก็ไม่มีอะไรให้ตรวจสอบมากใช่ไหม

01:23.687 --> 01:27.130
คุณจึงสามารถใช้ข้อมูลใดๆ เป็นทางเลือกหากคุณมีค่า

01:27.130 --> 01:31.810
ข้อมูลบางประเภทที่คุณไม่สามารถรู้ได้จริงๆ ว่าข้อมูลประเภทใดจะถูกจัดเก็บไว้ในนั้น

01:31.810 --> 01:33.820
และตำแหน่งที่คุณอาจใช้การตรวจสอบรันไทม์บางอย่าง

01:33.820 --> 01:42.660
เช่นที่เราทำที่นี่ ที่รันไทม์เพื่อจำกัดสิ่งที่คุณต้องการทำสำหรับค่าบางอย่างให้แคบลง

01:42.660 --> 01:44.600
จากนั้นคุณจะไปกับใครก็ได้

01:44.600 --> 01:48.210
แต่ในกรณีอื่นๆ คุณต้องการหลีกเลี่ยงจริงๆ

01:48.210 --> 01:51.120
หากคุณมีโอกาสที่จะรู้ว่าคุณกำลังทำงานกับข้อมูลประเภทใด

01:51.120 --> 01:54.090
ให้ระบุให้ชัดเจน

01:54.090 --> 01:58.817
ปล่อยให้การอนุมาน TypeScript ทำงานหรือตั้งค่าประเภทของคุณเองอย่างชัดเจน

01:58.817 --> 02:01.783
อย่าถอยกลับถ้าไม่จำเป็น
