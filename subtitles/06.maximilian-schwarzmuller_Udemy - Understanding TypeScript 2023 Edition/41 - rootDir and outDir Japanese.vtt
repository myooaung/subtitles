WEBVTT

00:02.220 --> 00:03.053
-ーー：次に行きましょう｡ 

00:03.053 --> 00:04.950
ここでoutFileオプションを取得しましたが､

00:04.950 --> 00:09.440
このオプションは今すぐには関係ありません､ 今すぐには動作しません｡

00:09.440 --> 00:12.340
さらに興味深いのは､ outDIRとrootDirである｡ 

00:12.340 --> 00:14.720
プロジェクトが大きくなればなるほど､

00:14.720 --> 00:17.640
ファイルを整理したくなるかもしれません｡

00:17.640 --> 00:21.770
一般的に､ ルートレベルのプロジェクトフォルダにファイルを置いておくだけでは､

00:21.770 --> 00:24.120
このようなことはありません｡

00:24.120 --> 00:26.580
その代わり､ プロジェクトでよく見られるのは､ ソースフォルダがあって､

00:26.580 --> 00:31.240
ディストリビューションフォルダがあって､ 次､ 次､ というものです｡

00:31.240 --> 00:37.800
つまり､ distフォルダには､ すべての出力､ つまりすべてのJavaScriptファイル（例）を格納する役目があるのです｡

00:37.800 --> 00:41.380
そして､ sourceフォルダには､ すべてのTypeScriptファイルが格納されるかもしれません｡ 

00:41.380 --> 00:44.643
そこで､ TypeScriptファイルをソースフォルダに移動し､

00:44.643 --> 01:00.050
JavaScriptフォルダを削除すると､ すべてをコンパイルしたときに､ TypeScriptファイルはコンパイルされてしまうという問題が発生します｡

01:00.050 --> 01:03.660
そしてそれは､ 例えばoutDirでコントロールすることができるのです｡

01:03.660 --> 01:10.900
outDirを設定すれば､ 作成されたファイルをどこに格納すべきかをコンパイラで型に指示することができます｡

01:10.900 --> 01:13.580
これをdistに設定すればいいのです｡ 

01:13.580 --> 01:17.037
そうすると､ chia seedを実行すると､ JavaScriptのファイルが､

01:17.037 --> 01:23.170
確かに､ sourceフォルダではなく､ distフォルダに置かれていることがわかります｡

01:23.170 --> 01:28.540
あとは､ インデックスを調整するだけです｡  htmlファイルを作成し､ そこでdist/appを指定します｡

01:28.540 --> 01:28.540
jsとdist/analyticsがあります｡

01:28.540 --> 01:33.880
js､ またはインデックスを移動します｡

01:33.880 --> 01:33.880
htmlファイルをdistフォルダに入れたのですが､

01:33.880 --> 01:37.550
そうすると､ 今現在､ うちのdefサーバはもう正しく動作しないのです｡

01:37.550 --> 01:39.875
これらのインポートを調整することで､

01:39.875 --> 01:48.480
ご覧のようにアプリケーションは動作しますが､ プロジェクト構造はより明確になりました｡

01:48.480 --> 02:00.373
このコマンドでコンパイルしてもウォッチモードでコンパイルしても､

02:00.373 --> 02:16.640
ソースフォルダのフォルダ構造はすべてdistフォルダに再現されます｡

02:16.640 --> 02:18.800
今､ あなたはまた､ ルートディレクトリを設定し､

02:18.800 --> 02:25.202
この例のように､ ファイルが格納されているフォルダでこれを具体的に設定することができます､ ソース､ コンパイラの種類は､

02:25.202 --> 02:30.030
我々のフォルダに見ていないことを確認する｡

02:30.030 --> 02:34.003
それも､ 下のincludeオプションでできることですよね？

02:34.870 --> 02:36.007
しかし､ ルートディレクトリの場合､

02:36.007 --> 02:38.781
コンパイラはそのソースフォルダだけを見るのではなく､

02:38.781 --> 02:47.880
そこで設定したプロジェクト構造がdistフォルダに保存されていることを確認するのです｡

02:47.880 --> 02:50.020
先ほど見たように､ 以前はデフォルトでそうなっていましたが､

02:50.020 --> 02:55.699
以前はここにあるすべてのTypeScriptファイルをソースの最初から含めていたことを覚えておいてください｡ たとえば､ トップレベルにuserフォルダがあり､

02:55.699 --> 03:03.280
userがいる場合､ 一時的にこれをコメントアウトするとします｡

03:03.280 --> 03:03.280
このファイルをコンパイルすると､

03:03.280 --> 03:11.420
dist フォルダの中にある user フォルダが表示されるだけです｡

03:11.420 --> 03:13.810
そして､ 今度はソースフォルダも含まれるようになりました｡

03:13.810 --> 03:17.200
なぜなら､ より高いレベルのtypescriptファイルがあるため､

03:17.200 --> 03:25.970
typescriptコンパイラは､ プロジェクト全体が再び入力であると考え､ distフォルダにあるフォルダ構造を複製するからです｡

03:25.970 --> 03:28.960
もちろん､ これは望むところではありません｡

03:28.960 --> 03:32.660
そこで､ rootDirオプションが役に立ちます｡

03:32.660 --> 03:34.020
さて､ これをsourceに設定すると､

03:34.020 --> 03:38.630
ルートレベルでTypeScriptファイルの入った他のフォルダがあったとしても､ それらは出力に含まれず､

03:38.630 --> 03:43.780
sourceフォルダ自体もいきなりそこに入ってしまうことはない｡

03:43.780 --> 03:46.480
そのため､ 入力ファイルの保存場所と出力ファイルの生成場所を明確にするために､

03:46.480 --> 03:52.040
rootDirとoutDirの両方を設定することがよくあります｡

03:52.040 --> 03:54.870
先に進めば､ コンポジットは無視できる｡ 

03:54.870 --> 03:57.010
removeCommentsを見てもらうとわかる｡ 

03:57.010 --> 04:00.850
この設定をすると､ TypeScriptファイルに記述したコメントは､

04:00.850 --> 04:08.000
コンパイルされたJavaScriptファイルでは削除されることは明らかでしょう｡

04:08.000 --> 04:12.970
これをコメントして､ コードをコンパイルすると､ アプリが表示されるわけです｡

04:12.970 --> 04:12.970
tsさん､ コメントです｡ 

04:12.970 --> 04:14.990
アプリです｡  js､ ないんですよ｡ 

04:14.990 --> 04:18.330
だから､ ファイルを小さくするためにそうすることもできるし､

04:18.330 --> 04:20.950
その努力はいいオプションかもしれない｡

04:20.950 --> 04:25.600
また､ JavaScriptファイルを生成しない場合は､ noEmitを設定することができます｡

04:25.600 --> 04:29.190
しかし､ 例えば大きなプロジェクトで時間を節約するために､

04:29.190 --> 04:32.420
ファイルが正しいかどうかをチェックしたいだけで､

04:32.420 --> 04:35.030
出力ファイルをすべて書きたいわけではない場合､

04:35.030 --> 04:39.120
これを「true」に設定すると､ 実際に出力ファイルを作成せずに､

04:39.120 --> 04:41.792
コンパイラの種類によってファイルをチェックし､

04:41.792 --> 04:47.903
エラーの可能性を報告するだけにすることができるようになる｡

04:47.903 --> 04:50.490
importHelpersは､ 私たちにとってあまり重要ではないので､

04:50.490 --> 04:52.065
ここでは無視することができます｡

04:52.065 --> 04:54.570
downlevelIterationは上級者向けのオプションです｡ 

04:54.570 --> 04:57.150
古いバージョンのJavaScriptにコードをコンパイルして､

04:57.150 --> 05:02.690
4つのループで作業すると面白いです｡

05:02.690 --> 05:08.378
そうすると､ まれにコンパイルが正常に行われないという問題が発生することがあります｡

05:08.378 --> 05:10.440
このオプションをオンにすると､

05:10.440 --> 05:20.097
より正確なコンパイルが可能になり､ ニッチなケースでも動作するようになります｡

05:20.097 --> 05:25.110
したがって､ ループがあり､ 生成されたコードがそのループに関してあるべきものとは異なる動作をすることがわかる場合にのみ､

05:25.110 --> 05:29.023
この機能をオンにする必要があります｡
