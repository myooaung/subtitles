WEBVTT

00:02.110 --> 00:03.890
Eğitmen: Şimdi, türlerin kendileriyle

00:03.890 --> 00:07.820
çalıştığımız tüm bu özelliklerden sonra, deyim yerindeyse, türleri

00:07.820 --> 00:10.340
kontrol etme, türlere maliyet biçme üzerinde

00:10.340 --> 00:13.880
çalıştık, esnek kod kullanmamıza yardımcı olan özelliklere

00:13.880 --> 00:16.110
geri dönelim.

00:16.110 --> 00:17.930
Tabii ki, yine de iki türü yazın.

00:17.930 --> 00:20.150
Sonuçta bu bir typescript, ancak sadece

00:20.150 --> 00:23.520
tiplere odaklanmıyor, şimdi onları yönetebiliyoruz.

00:23.520 --> 00:25.830
Ve bunun için, tutabilecekleri özellikler

00:25.830 --> 00:29.040
açısından daha esnek nesneler oluşturmamıza olanak tanıyan

00:29.040 --> 00:31.150
bir özellik olan dizin türleriyle başlamak

00:31.150 --> 00:33.010
istiyorum.

00:33.010 --> 00:34.485
Bununla ne demek istiyorum?

00:34.485 --> 00:36.813
Diyelim ki bazı kullanıcı girdilerini

00:36.813 --> 00:39.680
doğruladığınız bir uygulama yazıyorsunuz.

00:39.680 --> 00:41.810
Yani birden fazla giriş alanınız var

00:41.810 --> 00:44.603
ve kullanıcının oraya ne girdiğine ve hangi alan

00:44.603 --> 00:46.682
olduğuna bağlı olarak, farklı hata mesajlarını

00:46.682 --> 00:50.490
saklamak ve sonunda göstermek isteyebilirsiniz.

00:50.490 --> 00:52.520
Örneğin, bir e-posta alanıysa,

00:52.520 --> 00:54.360
e-postada kim olduğunu kontrol

00:54.360 --> 00:55.590
etmek ve değilse hata

00:55.590 --> 00:59.830
konteynerine uygun bir hata mesajı eklemek istersiniz.

00:59.830 --> 01:01.133
Ben de bununla başlayacağım.

01:01.133 --> 01:06.133
Arayüz hata konteynerimi buraya koyacağım.

01:07.570 --> 01:09.530
Ve bu bir nesne olmalıdır, bu nedenle

01:09.530 --> 01:11.400
burada bir arayüz kullanıyorum,

01:11.400 --> 01:14.090
ancak ne tuttuğu konusunda esnek olmalıdır.

01:14.090 --> 01:15.680
Nihayetinde amacım, bununla,

01:15.680 --> 01:17.692
hatanın ait olduğu giriş alanının

01:17.692 --> 01:20.782
ideal olabileceği bir hata tanımlayıcısına sahip olduğumuz

01:20.782 --> 01:23.700
nesneleri ele alabilmemizdir.

01:23.700 --> 01:26.581
Örneğin, e-posta. Ve sonra bir hata dizesi,

01:26.581 --> 01:31.581
geçerli bir e-posta değil. Ve sonra başka bir mülkümüz daha var.

01:32.130 --> 01:35.610
Diyelim ki kullanıcı adı ve ardından giriş

01:35.610 --> 01:37.150
alanı yanlışsa bu giriş

01:37.150 --> 01:39.280
alanını depolayan bir hata

01:39.280 --> 01:41.611
dizesi olabilir.

01:41.611 --> 01:45.770
Bir karakterle başlamalıdır.

01:45.770 --> 01:49.170
Bunun gibi bir şey o nesnede saklanmalıdır.

01:49.170 --> 01:51.992
Bununla ilgili sorun şu ki, orada tam olarak hangi

01:51.992 --> 01:55.320
özellik adlarına sahip olacağımızı önceden bilmiyorum.

01:55.320 --> 01:58.021
E-posta ve kullanıcı adımız olacak diyebilirsiniz,

01:58.021 --> 02:01.650
ancak birincisi bunun esnek bir konteyner olmasını istiyorum.

02:01.650 --> 02:03.150
Web sayfamda sahip olduğum herhangi

02:03.150 --> 02:05.350
bir formda kullanabilmek istiyorum.

02:05.350 --> 02:07.560
Ve farklı tanımlayıcılara sahip farklı

02:07.560 --> 02:10.157
girdileri olan farklı formlarım olabilir.

02:10.157 --> 02:12.741
Bu yüzden kendimi sadece e-posta ve kullanıcı

02:12.741 --> 02:16.150
adı hatalarımızla sınırlamak istemiyorum.

02:16.150 --> 02:18.461
Ayrıca, her zaman sadece e-posta ve kullanıcı

02:18.461 --> 02:20.859
adı girdilerine sahip olsak ve sadece bunlar

02:20.859 --> 02:23.291
için hataları saklamak istesek bile.

02:23.291 --> 02:27.461
Kullanıcı adı değil de sadece e-posta geçersizse ne yapacağız?

02:27.461 --> 02:30.912
Elbette bu nesnede kullanıcı adı değeri olarak null

02:30.912 --> 02:34.421
saklayabiliriz, ancak ben bunu atlamak istiyorum.

02:34.421 --> 02:37.232
Peki sadece hata aldığımız girdilerin özelliklerini

02:37.232 --> 02:40.419
tutan bir nesnemiz var mıydı?

02:40.419 --> 02:42.960
Böylece, örneğin aldığımız tüm hataları okumak

02:42.960 --> 02:46.260
için bu nesne üzerinde dört in döngüsü ile döngü yapabiliriz

02:46.260 --> 02:48.200
ve orada aslında bir hata depolamayan

02:48.200 --> 02:51.112
herhangi bir özellik bulunmaz.

02:51.112 --> 02:53.261
Uzun lafın kısası, değer türü konusunda

02:53.261 --> 02:56.861
oldukça net olduğum bir nesneye ihtiyacım var.

02:56.861 --> 03:00.260
Bir dize olmalı, ancak kaç özelliğe sahip olacağımı

03:00.260 --> 03:02.190
ve özelliklerin hangi ada sahip

03:02.190 --> 03:05.320
olacağını önceden bilmediğim yerde.

03:05.320 --> 03:08.171
Ve böyle bir senaryo için indeks türlerini kullanabiliriz.

03:08.171 --> 03:10.760
Burada köşeli parantez kullanarak bir dizin türü tanımlarsınız.

03:10.760 --> 03:14.730
Normalde buraya bir özellik adı yazacağımızı hatırlayın, ancak şimdi köşeli

03:14.730 --> 03:16.280
parantez kullanıyoruz.

03:16.280 --> 03:21.280
Ardından, anahtar veya pervane gibi istediğiniz herhangi bir adı girin.

03:23.581 --> 03:28.581
Sonra, iki nokta üst üste. Ve sonra mülkün değer türü.

03:29.010 --> 03:30.010
Ve sonra bir nesne.

03:30.010 --> 03:33.760
Özellik olarak dizelere, sayılara veya sembollere sahip olamazsınız.

03:33.760 --> 03:37.660
Örneğin, burada boolean kullanamazsınız. Buna izin yok.

03:37.660 --> 03:40.504
Ancak burada string kullanabilirsiniz.

03:40.504 --> 03:43.190
Bununla basitçe, daha sonra bu hata konteyneri

03:43.190 --> 03:46.330
arayüzüne dayalı olarak oluşturacağım her nesnenin

03:46.330 --> 03:51.083
dizeler olan özelliklere sahip olması gerektiğini söylüyorum.

03:52.120 --> 03:53.928
Örneğin kullanıcı adı, tırnak içine almasam

03:53.928 --> 03:55.899
bile geçerli bir dize olacaktır.

03:55.899 --> 03:59.980
Sonra iki nokta üst üste ekleriz. Ve sonra string olan değer

03:59.980 --> 04:01.629
türü. Bu nedenle, mülkün

04:01.629 --> 04:04.320
tam adını bilmediğimi söylüyorum.

04:04.320 --> 04:07.620
Ayrıca mülk sayısını da bilmiyorum.

04:07.620 --> 04:10.608
Hata konteynerine dayanan bu nesneye eklenen

04:10.608 --> 04:13.459
her özelliğin bir dize olarak yorumlanabilen

04:13.459 --> 04:16.959
bir özellik adına sahip olması ve özelliğin değerinin

04:16.959 --> 04:23.080
de bir dize olması gerektiğini biliyorum.

04:23.080 --> 04:23.080
Ben de bunu söylüyorum.

04:23.080 --> 04:28.080
Şimdi, bununla birlikte önceden tanımlanmış özellikler de ekleyebiliriz,

04:29.560 --> 04:31.906
ancak bunlar yalnızca buradaki ile

04:31.906 --> 04:35.339
aynı türdeyse. Böylece bir dize türü olan bir ID ekleyebiliriz.

04:35.339 --> 04:39.760
Daha sonra bu arayüze bağlı kalarak oluşturduğumuz her nesne bir ID özelliğine

04:39.760 --> 04:43.360
sahip olmalıdır ve istediği kadar başka özellik ekleyebilir,

04:43.360 --> 04:47.370
ancak örneğin ID'yi burada bir sayı olarak ayarlayamayız, çünkü burada

04:47.370 --> 04:49.277
bir dizin türümüz var.

04:49.277 --> 04:53.033
Yani böyle bir nesne inşa edersek bu bir kısıtlamadır.

04:55.240 --> 04:56.550
Peki şimdi sonuç ne olacak?

04:56.550 --> 05:00.080
Şimdi örneğin hata konteyneri tipinde bir hata torbası oluşturabiliriz,

05:00.080 --> 05:02.390
dolayısıyla bu bir nesnedir ve bu şekilde

05:02.390 --> 05:05.150
geçerli olacaktır çünkü herhangi bir özellik eklememiz

05:05.150 --> 05:07.440
gerekmez.

05:07.440 --> 05:10.340
Hepsi bu kadar. Ama elbette şimdi biraz ekleyebiliriz.

05:10.340 --> 05:13.380
Örneğin, e-posta geçerli bir e-posta değil.

05:13.380 --> 05:15.780
Ve bu sorun değil. Bunun yerine buraya bir

05:15.780 --> 05:17.093
sayı atasaydım sorun olmazdı

05:17.093 --> 05:19.133
çünkü her özelliğin bir dize değeri türüne

05:19.133 --> 05:23.001
ihtiyacı olduğunu söylüyoruz. Bu yüzden burada bir dize kullanmalıyız.

05:23.001 --> 05:25.940
Burada bir sayı kullanırsam, bu işe yarayacaktır

05:25.940 --> 05:28.610
çünkü bu da bir dize olarak yorumlanabilir.

05:28.610 --> 05:30.883
İstersem burada anahtar türü olarak bir sayı

05:30.883 --> 05:33.031
da kullanabilirim. Burada ne kullandığım

05:33.031 --> 05:35.981
konusunda oldukça özgürüm. Buradaki pervane türünü

05:35.981 --> 05:40.981
sayı olarak değiştirirseniz, bunu yapabilirsiniz ve bu sorun

05:42.130 --> 05:44.810
olmaz. Ama bu olmaz çünkü e-posta

05:44.810 --> 05:46.470
bir sayı değildir.

05:46.470 --> 05:48.170
Bu bir sayıya dönüştürülemez.

05:48.170 --> 05:51.550
Bir dize olarak ele alınabilir, ancak bir sayı olarak ele alınamaz.

05:51.550 --> 05:54.870
Yani hangi tür özelliklere veya hangi özellik adlarına izin verdiğinizi

05:54.870 --> 05:56.990
bu şekilde kontrol edersiniz.

05:56.990 --> 05:59.493
Ve burada dize özellik adlarına izin vermek için bir tane yaptım.

05:59.493 --> 06:02.264
Dolayısıyla, dizeye dönüştürülebilen her şey geçerli

06:02.264 --> 06:04.740
bir özellik adıdır. Ve sonra değerin de

06:04.740 --> 06:06.413
bir dize olması gerekir.

06:06.413 --> 06:08.021
Ve elbette dediğim gibi, şimdi

06:08.021 --> 06:10.632
buraya birden fazla değer ekleyebiliriz,

06:10.632 --> 06:12.830
birden fazla değer demeliyim.

06:12.830 --> 06:17.263
Büyük bir karakterle başlamalıdır.

06:18.170 --> 06:21.220
Şimdi bu, bize hangi özellik adlarını kullanmak istediğimizi

06:21.220 --> 06:22.722
ve kaç özelliğe ihtiyacımız

06:22.722 --> 06:25.392
olduğunu önceden bilmemize gerek kalmadan

06:25.392 --> 06:27.522
bu ekstra esnekliği sağlayan hata konteyneri

06:27.522 --> 06:32.653
yardımıyla oluşturabileceğimiz bir hata torbasıdır.
