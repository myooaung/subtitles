WEBVTT

00:02.120 --> 00:05.910
-: Ahora empezaremos con una biblioteca de utilidades muy popular,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Ahora lo que aprenderás aquí básicamente actúa como un ejemplo

00:09.840 --> 00:13.250
de cualquier biblioteca de JavaScript que quieras usar.

00:13.250 --> 00:17.430
No importa si es Lodash, jQuery o cualquier otra cosa.

00:17.430 --> 00:19.510
Ahora una pequeña nota al margen en

00:19.510 --> 00:21.640
este punto, si estás interesado en

00:21.640 --> 00:24.150
cómo trabajar con React y TypeScript o digamos

00:24.150 --> 00:26.718
Node. js. y Express y TypeScript,

00:26.718 --> 00:31.350
tengo módulos dedicados a ello más adelante en el curso, porque allí

00:31.350 --> 00:33.760
aprenderás algo más que a añadirlos

00:33.760 --> 00:35.730
con TypeScript.

00:35.730 --> 00:40.470
Pero para una librería más simple, como Lodash, como jQuery y demás

00:40.470 --> 00:43.010
aquí hay un enfoque que funcionará.

00:43.010 --> 00:45.340
Así que queremos utilizar Lodash en nuestro proyecto.

00:45.340 --> 00:48.460
Lodash, por supuesto, es una biblioteca de JavaScript.

00:48.460 --> 00:50.800
No necesitamos TypeScript para usarlo,

00:50.800 --> 00:53.480
podemos usarlo en cualquier proyecto JavaScript

00:53.480 --> 00:56.770
y podemos instalarlo como básicamente se aprende aquí

00:56.770 --> 00:59.200
en los docs oficiales de Lodash.

00:59.200 --> 01:01.400
Si estás usando npm, que es lo que hacemos,

01:01.400 --> 01:06.477
puedes ejecutar npm i o npm install, que es sólo una forma corta, "--save/lodash".

01:07.750 --> 01:10.820
Así que aquí en este proyecto de ejemplo que utiliza webpack sin un flujo

01:10.820 --> 01:12.640
de trabajo de producción aunque sólo un flujo

01:12.640 --> 01:14.180
de trabajo de desarrollo.

01:14.180 --> 01:16.570
Ahí podemos añadir esta librería simplemente ejecutando

01:16.570 --> 01:18.607
nmp install dash save Lodash.

01:18.607 --> 01:21.700
Y esto lo instalará en este proyecto y gracias a nuestra configuración

01:21.700 --> 01:23.500
de webpack podemos simplemente importarlo

01:23.500 --> 01:27.517
en nuestros archivos de código y utilizarlo allí.

01:27.517 --> 01:30.670
Y eso sería lo mismo en cualquier proyecto de JavaScript

01:30.670 --> 01:32.250
impulsado por webpack.

01:32.250 --> 01:34.990
Si no estás usando webpack, entonces por supuesto

01:34.990 --> 01:37.720
también podrías simplemente usar el CDN y demás.

01:37.720 --> 01:40.630
Sin embargo, lo que te mostraré en los siguientes pasos un

01:40.630 --> 01:42.390
poco más adelante en este módulo, sólo

01:42.390 --> 01:45.130
funcionará en una configuración de webpack.

01:45.130 --> 01:47.730
Así que aquí tenemos una configuración de webpack, ahora instalamos

01:47.730 --> 01:49.320
Lodash, y ahora si queremos usarlo, podemos

01:49.320 --> 01:51.510
simplemente importarlo aquí.

01:51.510 --> 01:55.600
Podemos importar, digamos, el subrayado de 'Lodash'.

01:55.600 --> 01:57.960
Esta es una sintaxis que debería estar disponible

01:57.960 --> 01:59.960
con Lodash instalado.

01:59.960 --> 02:03.057
Sin embargo, esto ya nos da un error.

02:03.057 --> 02:06.850
"No se pudo encontrar un archivo de declaración para el módulo Lodash".

02:06.850 --> 02:09.890
Y tendremos otro problema, si quieres usar Lodash

02:09.890 --> 02:12.230
por ejemplo para barajar un array, pues

02:12.230 --> 02:16.810
podríamos consolidar el registro del subrayado shuffle y luego pasar

02:16.810 --> 02:19.000
digamos un array simple a este método

02:19.000 --> 02:20.430
shuffle.

02:20.430 --> 02:23.110
El método de barajar es un método que soporta Lodash.

02:23.110 --> 02:25.790
Podemos aprender esto en la documentación oficial

02:25.790 --> 02:26.820
de Lodash.

02:26.820 --> 02:29.056
Allí, si se busca "shuffle", se aprende

02:29.056 --> 02:32.370
que se puede barajar un array con este método.

02:32.370 --> 02:37.010
Así que, más o menos debería funcionar, pero realmente no funciona

02:37.010 --> 02:39.480
así, como puedes ver.

02:39.480 --> 02:43.058
Si ahora inicio mi servidor webpack aquí, veremos

02:43.058 --> 02:45.890
que el CDN nos da un error.

02:45.890 --> 02:47.077
Y de nuevo nos dice que "no

02:47.077 --> 02:50.940
puede encontrar un archivo de declaración para el módulo Lodash".

02:50.940 --> 02:54.720
Por lo tanto, esto no está funcionando realmente de la manera que debería.

02:54.720 --> 02:57.610
El problema es que Lodash es una simple

02:57.610 --> 02:59.930
biblioteca de JavaScript.

02:59.930 --> 03:02.250
Está construido con vanilla JavaScript,

03:02.250 --> 03:05.150
y está construido para vanilla JavaScript.

03:05.150 --> 03:08.530
Podemos comprobarlo si vamos a los módulos de node, donde tenemos

03:08.530 --> 03:10.280
un montón de dependencias, porque

03:10.280 --> 03:12.450
tenemos un montón de dependencias de webpack

03:12.450 --> 03:14.220
y sus dependencias allí.

03:14.220 --> 03:17.010
Pero aquí, si buscamos Lodash, aquí

03:17.010 --> 03:17.930
está.

03:17.930 --> 03:21.330
Y ampliamos como vemos que hay un montón de archivos de JavaScript

03:21.330 --> 03:22.750
allí, ¿verdad?

03:22.750 --> 03:26.380
Y eso está en todo el código fuente de Lodash.

03:26.380 --> 03:30.010
Un montón de código JavaScript pero ciertamente ningún código TypeScript.

03:30.010 --> 03:31.750
¿Cuál es el problema con eso?

03:31.750 --> 03:35.550
El problema es que TypeScript no entiende lo que hay

03:35.550 --> 03:37.070
en este paquete.

03:37.070 --> 03:41.020
No entiende qué métodos exporta Lodash.

03:41.020 --> 03:43.480
Ahora verás que realmente funciona si vamos

03:43.480 --> 03:45.500
al tsconfig. json.

03:45.500 --> 03:48.740
Y nos aseguramos de emitir una salida en caso de error.

03:48.740 --> 03:52.650
Así que si cambiamos "noEmitOnError" a "false" para que

03:52.650 --> 03:55.770
emitamos una nueva salida si algo falla.

03:55.770 --> 03:57.600
Por ahora, inicie esto de nuevo,

03:57.600 --> 04:00.230
al final nos dará ese mismo error, por lo que

04:00.230 --> 04:02.160
seguiremos viendo eso.

04:02.160 --> 04:05.090
Pero si vuelvo a cargar esta página aquí, en realidad

04:05.090 --> 04:07.120
obtendrá una salida aquí.

04:07.120 --> 04:08.922
Puedes ignorar el error en la parte

04:08.922 --> 04:12.580
inferior, verás una salida que es el array barajado.

04:12.580 --> 04:14.920
Verás, se ve diferente cada vez que recargo.

04:14.920 --> 04:16.530
Y eso es muy interesante.

04:16.530 --> 04:19.770
Prueba que Lodash funciona, prueba que este

04:19.770 --> 04:21.280
código es correcto.

04:21.280 --> 04:24.170
Pero desafortunadamente, TypeScript no lo entiende,

04:24.170 --> 04:28.400
y no puede porque Lodash usa JavaScript, no TypeScript.

04:28.400 --> 04:31.220
Ahora el problema es que no hay TypeScript la versión

04:31.220 --> 04:34.080
de Lodash, así que tenemos que vivir con eso.

04:34.080 --> 04:37.220
Y ese es un escenario con el que te vas a encontrar muy a menudo.

04:37.220 --> 04:39.365
Quieres usar una biblioteca de terceros,

04:39.365 --> 04:42.270
y sólo está construida para JavaScript, y por lo tanto

04:42.270 --> 04:44.210
obtienes errores como ese.

04:44.210 --> 04:46.060
Esto es molesto porque, en teoría,

04:46.060 --> 04:47.430
podemos utilizarlo.

04:47.430 --> 04:49.630
TypeScript se basa en JavaScript.

04:49.630 --> 04:53.160
Podemos utilizar cualquier biblioteca JavaScript en un proyecto

04:53.160 --> 04:56.150
TypeScript, sólo tenemos que traducirlo a TypeScript.

04:56.150 --> 04:58.890
Y eso, afortunadamente, en posible.

04:58.890 --> 05:02.564
Así que déjame activar esta configuración aquí, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Permítame mostrarle cómo podemos hablarle a TypeScript

05:07.200 --> 05:10.053
sobre Lodash y sobre lo que ofrece.

05:11.140 --> 05:13.662
Puede instalar los llamados tipos

05:13.662 --> 05:16.250
de una biblioteca de terceros.

05:16.250 --> 05:20.050
Si buscas Lodash types, encontrarás un paquete

05:20.050 --> 05:24.140
npm que aquí se llama "@types/lodash".

05:24.140 --> 05:26.440
Allí también se ve el comando de instalación,

05:26.440 --> 05:28.120
que se ejecutará en un segundo.

05:28.120 --> 05:30.580
Pero si bajas a los detalles también encuentras un

05:30.580 --> 05:32.220
enlace al repositorio de github.

05:32.220 --> 05:36.320
Enlaza con DefinitelyTyped, que es un enorme repositorio con toneladas

05:36.320 --> 05:39.260
de traducciones para todo tipo de bibliotecas

05:39.260 --> 05:40.820
de terceros.

05:40.820 --> 05:43.120
Aquí estamos en la carpeta Lodash.

05:43.120 --> 05:46.590
Y allí se encuentra el llamado . archivos dts.

05:46.590 --> 05:50.180
Así que no sólo . ts pero . dts.

05:50.180 --> 05:53.460
Estos son los llamados archivos de declaración, lo que significa que

05:53.460 --> 05:55.760
no contienen ninguna lógica real, pero si echamos

05:55.760 --> 05:58.750
un vistazo a la baraja . dts, contienen instrucciones

05:58.750 --> 06:01.848
para TypeScript.

06:01.848 --> 06:05.200
Básicamente le dicen a TypeScript cómo funciona

06:05.200 --> 06:08.720
algo y qué se incluye en este paquete.

06:08.720 --> 06:10.700
Y puedes explorar diferentes archivos

06:10.700 --> 06:14.280
aquí, todos en diferentes subcarpetas, para aprender más sobre eso.

06:14.280 --> 06:17.717
Así que al final estos archivos simplemente proporcionan

06:17.717 --> 06:21.750
una traducción de JavaScript plano a TypeScript.

06:21.750 --> 06:23.860
No contienen ninguna lógica que se ejecute,

06:23.860 --> 06:26.950
pero definen los tipos con los que trabaja esta biblioteca.

06:26.950 --> 06:30.010
Definen los tipos que se utilizan, los tipos que se devuelven

06:30.010 --> 06:32.490
cuando se llama a un método, etc.

06:32.490 --> 06:35.410
También puede escribir tales . dts por tu cuenta, y los tipos

06:35.410 --> 06:38.510
de documentos oficiales proporcionan una guía sobre

06:38.510 --> 06:40.470
eso si es lo que te interesa.

06:40.470 --> 06:42.110
Pero para tus propios tipos de proyectos

06:42.110 --> 06:43.160
no tienes que hacer eso,

06:43.160 --> 06:45.820
porque si estás escribiendo códigos TypeScript sólo TypeScript

06:45.820 --> 06:48.110
por supuesto entiende eso.

06:48.110 --> 06:50.310
Pero si estás trabajando con una librería

06:50.310 --> 06:53.840
de terceros escrita en JavaScript sin ningún código TypeScript,

06:53.840 --> 06:56.860
o sin el código . dts, que algunas librerías

06:56.860 --> 06:59.950
de terceros envían por cierto, incluso si están

06:59.950 --> 07:02.240
escritas en JavaScript, aunque Lodash

07:02.240 --> 07:03.960
no lo hace.

07:03.960 --> 07:06.890
Así que si estás trabajando con una biblioteca que no

07:06.890 --> 07:08.330
contiene archivos de traducción

07:08.330 --> 07:11.180
incorporados, y que no está escrita de forma nativa

07:11.180 --> 07:15.760
en TypeScript, entonces, el uso de tales paquetes de tipos es la solución.

07:15.760 --> 07:20.760
Así que aquí ejecutamos "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
En realidad, también puede ejecutar "save-dev", porque

07:24.600 --> 07:27.920
dev es una dependencia que en realidad sólo se requiere durante el desarrollo,

07:27.920 --> 07:29.230
porque entonces el código

07:29.230 --> 07:30.980
se cumple a través de JavaScript de todos

07:30.980 --> 07:32.360
modos.

07:32.360 --> 07:36.130
Y esto ahora instala esta traducción de TypeScript

07:36.130 --> 07:38.060
para entenderlo.

07:38.060 --> 07:40.630
Y ya ves, en cuanto se instala esto,

07:40.630 --> 07:42.510
este error desaparece.

07:42.510 --> 07:46.220
Y si ahora reinicio npm start, verás que el error tampoco

07:46.220 --> 07:48.270
vuelve a aparecer aquí.

07:48.270 --> 07:51.640
Así que ya ves que esto funciona sin ningún error,

07:51.640 --> 07:55.190
tanto en la compilación como en el navegador.

07:55.190 --> 07:57.270
Técnicamente también funcionaba antes,

07:57.270 --> 07:59.160
pero ahora con la traducción, también

07:59.160 --> 08:01.580
podemos utilizar TypeScript.

08:01.580 --> 08:04.660
Y, por ejemplo, ahora también tenemos toda la terminación

08:04.660 --> 08:05.493
aquí, en el IDE.

08:05.493 --> 08:10.070
Si escribo un punto aquí, veo los métodos Lodash que puedo utilizar.

08:10.070 --> 08:13.930
Por lo tanto, esto es una pieza muy importante de conocimiento,

08:13.930 --> 08:16.400
algo que definitivamente tiene que ser consciente

08:16.400 --> 08:19.370
de, que le permite utilizar regular, normal, vainilla

08:19.370 --> 08:21.177
bibliotecas de JavaScript, en

08:21.177 --> 08:24.220
un proyecto de TypeScript, y aún así obtener un gran

08:24.220 --> 08:28.490
apoyo, gran auto-completado, y evitar errores.

08:28.490 --> 08:33.030
Con la ayuda de estos paquetes de tipos de tranlasción, se podría

08:33.030 --> 08:33.990
decir.

08:33.990 --> 08:38.990
Y estos paquetes, que siempre se llaman "@types", y luego el nombre del paquete,

08:39.290 --> 08:40.860
existen básicamente para

08:40.860 --> 08:45.270
cualquier biblioteca popular de terceros que puedas encontrar

08:45.270 --> 08:46.730
por ahí.

08:46.730 --> 08:49.960
Siempre puede buscar el nombre de la biblioteca, y luego los tipos,

08:49.960 --> 08:51.690
por ejemplo, jQuery tipos, y usted

08:51.690 --> 08:54.400
debe encontrar una entrada de este tipo.

08:54.400 --> 08:57.350
Así es como se puede trabajar con los tipos en las bibliotecas

08:57.350 --> 08:59.373
vanilla de JavaScript.
