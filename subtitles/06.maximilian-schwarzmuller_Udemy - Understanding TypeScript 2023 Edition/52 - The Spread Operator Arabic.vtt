WEBVTT

00:02.250 --> 00:04.530
المدرب: لدينا أيضًا ميزات

00:04.530 --> 00:09.240
مفيدة تتعلق بمصفوفات كائنات وكيف يمكننا استرداد

00:09.240 --> 00:13.600
البيانات المخزنة في المصفوفات والعناصر.

00:13.600 --> 00:17.180
الآن ، من أجل ذلك ، دعنا نضيف مجموعة جديدة هنا ، دعنا نقول الهوايات

00:17.180 --> 00:19.880
والتي يمكن أن تكون مجموعة من الأوتار.

00:22.520 --> 00:26.700
مثل الرياضة والطبخ هنا ومن الواضح الآن أنه

00:26.700 --> 00:31.700
يمكننا استرداد العناصر بالفهرس هنا ، مثل هذا على سبيل

00:31.810 --> 00:33.030
المثال.

00:33.030 --> 00:36.150
لكن ، يجب أن تعرف أشياء JavaScript الأساسية هذه.

00:36.150 --> 00:40.310
الجيل التالي من JavaScript ، قدم ميزة لطيفة إذا أردنا

00:41.172 --> 00:43.910
استخراج جميع قيم المصفوفة.

00:43.910 --> 00:44.990
متى تريد ذلك؟

00:44.990 --> 00:48.670
حسنًا ، لنفترض أن لديك هوايات نشطة وهذه مجموعة

00:48.670 --> 00:53.670
حيث أمارس رياضة المشي لمسافات طويلة كهواية ، والآن أريد إضافة

00:54.200 --> 00:56.510
الرياضة والطهي.

00:56.510 --> 00:58.960
الآن يمكننا إضافة عنصر إلى الهوايات النشطة

00:58.960 --> 01:01.290
عن طريق استدعاء الدفع ، بالمناسبة إذا

01:01.290 --> 01:05.620
كنت تتساءل كيف يمكنني الدفع إلى ثابت ، ضع في اعتبارك أن المصفوفات هي كائنات

01:05.620 --> 01:08.130
والكائنات هي قيم مرجعية.

01:08.130 --> 01:11.010
عندما ندفع نقوم بتغيير الذاكرة وليس العنوان.

01:11.010 --> 01:14.150
إذا لم يخبرك هذا بأي شيء ، تحقق من الموارد الإضافية التي

01:14.150 --> 01:17.390
أرفقتها بهذه المحاضرة فيما يتعلق بهذا الموضوع ، لذا

01:17.390 --> 01:20.170
عد إلى هذا المثال بعد ذلك ، يمكننا الضغط هنا ، ولكن

01:20.170 --> 01:24.120
إذا دفعنا الهوايات ، فسنضيف الهوايات باعتبارها مصفوفة جديدة في

01:24.120 --> 01:27.540
المصفوفة ، بحيث تكون مصفوفات متداخلة جديدة.

01:27.540 --> 01:30.920
ما هي الأنواع التي ستكتشفها بالفعل ، فهي تخبرني أنه

01:30.920 --> 01:33.690
إذا كنت أرغب في إضافة مصفوفة سلسلة إلى مصفوفة

01:33.690 --> 01:36.143
من السلاسل ، فهذا ليس جيدًا.

01:37.110 --> 01:40.390
لذا بدلاً من ذلك ، يأخذ الدفع قيمًا مفردة حتى نتمكن

01:40.390 --> 01:44.450
من تجاوز الهوايات إلى الصفر ، وفي الواقع ، يأخذ الدفع حتى

01:44.450 --> 01:47.450
عددًا غير محدود من الحجج حتى نتمكن من دفع عناصر

01:47.450 --> 01:51.240
متعددة بالترتيب في وقت واحد بهذه الطريقة.

01:51.240 --> 01:54.013
ولكن هذا أمر مرهق بعض الشيء وهنا يأتي دور مشغل

01:54.013 --> 01:54.890
السبريد.

01:54.890 --> 01:57.700
يبدو هكذا ، إنها ثلاث نقاط ونعم يبدو هذا

01:57.700 --> 02:00.850
غريبًا لكن هذا عامل JavaScript صالح مدعوم

02:00.850 --> 02:04.770
من قبل [Hypescript؟ ] وبعد ذلك نحدد أو نشير

02:04.770 --> 02:09.547
إلى المصفوفة أو الكائن كما ستتعلم أيضًا ، أننا

02:09.547 --> 02:11.700
نريد الانتشار.

02:11.700 --> 02:15.160
إذن ما يفعله هذا هو أنه يخبر JavaScript في النهاية

02:15.160 --> 02:17.690
لأنه عامل تشغيل Vanilla JavaScript

02:17.690 --> 02:21.070
متاح في Modern JavaScript ، لذلك يخبر JavaScript

02:21.070 --> 02:25.500
بسحب جميع العناصر بعد المصفوفة وإضافتها بشكل أساسي كقائمة من

02:25.500 --> 02:28.530
القيم ، لذلك لا مصفوفة لكن قائمة بالقيم الفردية

02:28.530 --> 02:31.900
في المكان الذي استخدمت فيه عامل التشغيل ، لذلك هنا

02:31.900 --> 02:33.950
على سبيل المثال قائمة من الوسائط

02:33.950 --> 02:36.090
التي تم تمريرها للدفع والآن مكان

02:36.090 --> 02:39.180
يمكنك استخدامه فيه مباشرة عند إنشاء مصفوفة

02:39.180 --> 02:41.740
جديدة.

02:41.740 --> 02:46.220
هناك يمكنك أيضًا نشر مصفوفة موجودة في تلك المصفوفة.

02:46.220 --> 02:48.950
لذلك كلما احتجت إلى قائمة قيم مفصولة بفواصل

02:48.950 --> 02:51.460
، يمكنك استخدام عامل الانتشار مع مصفوفة

02:51.460 --> 02:54.360
للحصول على قائمة مفصولة بفاصلة.

02:54.360 --> 02:56.660
هذه هي فكرة عامل الانتشار وبالتالي

02:56.660 --> 03:00.663
فهي مفيدة حقًا لسحب عناصر المصفوفة.

03:01.860 --> 03:04.380
عامل الانتشار ، كل ما لا يوجد فقط على

03:04.380 --> 03:07.880
المصفوفات ، إنه موجود أيضًا على الكائنات.

03:07.880 --> 03:10.990
لنفترض أن لدينا شخصًا لديه مفتاح

03:10.990 --> 03:14.070
الاسم ، ومفتاح Max و h وهو 30 والآن

03:14.070 --> 03:16.640
نريد إنشاء شخص منسوخ.

03:16.640 --> 03:19.060
الآن إذا قمنا بتعيين شخص مثل هذا ، فإن

03:19.060 --> 03:22.680
ما نقوم به هو في الواقع أننا نقوم بنسخ المؤشر الموجود

03:22.680 --> 03:25.000
على كائن هذا الشخص في الذاكرة إلى

03:25.000 --> 03:27.050
ثابت نسخة الشخص هذه.

03:27.050 --> 03:30.470
ومرة أخرى ، تحقق من موارد القيمة المرجعية المرفقة

03:30.470 --> 03:32.360
إذا لم يخبرك ذلك كثيرًا.

03:32.360 --> 03:36.190
لذا ، فنحن لا ننشئ نسخة من هذا الكائن حقًا.

03:36.190 --> 03:38.610
الآن لإنشاء نسخة حقيقية ، يمكننا استخدام

03:38.610 --> 03:40.880
عامل الانتشار مع الكائنات.

03:40.880 --> 03:43.400
نقوم بإنشاء كائن جديد بأقواس مجعدة

03:43.400 --> 03:46.510
ثم نستخدم عامل الانتشار ، ثلاث نقاط مع

03:46.510 --> 03:49.630
الكائن الأول الذي تريد نسخه.

03:49.630 --> 03:52.970
ما يفعله هذا الآن هو أنه يسحب جميع العناصر ولكن

03:52.970 --> 03:56.310
بالطبع هنا العناصر هي أزواج قيم أساسية وليست

03:56.310 --> 03:58.630
قيمًا مفردة مثل المصفوفة.

03:58.630 --> 04:00.550
هنا لدينا أزواج القيمة الرئيسية.

04:00.550 --> 04:04.110
لذلك يتم سحب أزواج القيم الرئيسية هذه من هناك ومن

04:04.110 --> 04:08.010
ثم يمكن استخدامها في أي مكان حيث تحتاج إلى أزواج قيمة

04:08.010 --> 04:11.310
رئيسية ، والتي عادةً ما تكون كائنًا لا يمكن

04:11.310 --> 04:12.920
إضافتها إليه.

04:12.920 --> 04:15.447
لذلك ، إلى هذا الكائن الفارغ بخلاف ذلك

04:15.447 --> 04:19.100
، تتم الآن إضافة أزواج القيمة الأساسية للشخص ، وبما أننا

04:19.100 --> 04:21.240
أنشأنا كائنًا جديدًا هنا ، وأضفناه

04:21.240 --> 04:23.700
فقط إلى أزواج القيم الرئيسية ، فقد حصلنا

04:23.700 --> 04:27.310
على نسخة كاملة من الكائن الأصلي وليس فقط من المؤشر الذي

04:27.310 --> 04:30.803
يشير إلى الكائن في الذاكرة.
