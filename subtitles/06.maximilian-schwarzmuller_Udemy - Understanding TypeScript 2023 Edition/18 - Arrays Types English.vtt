WEBVTT

1
00:00:02.170 --> 00:00:06.250
<v ->Now besides objects, we also have arrays in JavaScript,</v>

2
00:00:06.250 --> 00:00:08.300
very important type of data.

3
00:00:08.300 --> 00:00:10.810
Arrays are created like this in JavaScript, as you know,

4
00:00:10.810 --> 00:00:12.560
and you can store any data in there:

5
00:00:12.560 --> 00:00:15.970
numbers, strings, booleans, objects, other arrays,

6
00:00:15.970 --> 00:00:17.970
you can have nested arrays, after all,

7
00:00:17.970 --> 00:00:19.380
and you can also mix data.

8
00:00:19.380 --> 00:00:23.200
You can have an array with strings and numbers mixed.

9
00:00:23.200 --> 00:00:25.570
And TypeScript also supports arrays.

10
00:00:25.570 --> 00:00:29.260
Any JavaScript array is supported and the types

11
00:00:29.260 --> 00:00:32.140
of that array can be flexible, or strict.

12
00:00:32.140 --> 00:00:35.200
Now let's have a look at that in TypeScript.

13
00:00:35.200 --> 00:00:38.760
For that here in app.ts, let's say our person also

14
00:00:38.760 --> 00:00:42.810
has a hobbies key, but of course we could also have a

15
00:00:42.810 --> 00:00:45.660
variable or a constant hobbies outside of the object.

16
00:00:45.660 --> 00:00:49.050
So, using arrays as exactly the same inside

17
00:00:49.050 --> 00:00:50.853
of objects and outside of them.

18
00:00:51.950 --> 00:00:54.780
So here we have hobbies, and hobbies

19
00:00:54.780 --> 00:00:58.140
could be sports, and cooking, let's say.

20
00:00:58.140 --> 00:01:01.150
So I have two elements in there, and these elements,

21
00:01:01.150 --> 00:01:03.620
as you can tell, are strings.

22
00:01:03.620 --> 00:01:07.570
Now if we hover over hobbies, TypeScript correctly detected

23
00:01:07.570 --> 00:01:10.630
the distance of type string array.

24
00:01:10.630 --> 00:01:12.500
Now that's a syntax you haven't seen before,

25
00:01:12.500 --> 00:01:16.140
but this is how TypeScript describes an array of data.

26
00:01:16.140 --> 00:01:18.510
You have the square brackets, and in front of that,

27
00:01:18.510 --> 00:01:21.340
the type of data which is stored in there.

28
00:01:21.340 --> 00:01:23.530
Now this is the type, type's group inferred.

29
00:01:23.530 --> 00:01:25.810
It saw that here we have an array and that we only

30
00:01:25.810 --> 00:01:29.110
have strings in there, so it inferred that hobbies

31
00:01:29.110 --> 00:01:31.940
probably should be an array of strings.

32
00:01:31.940 --> 00:01:34.903
And indeed, for hobbies, that makes a lot of sense.

33
00:01:36.210 --> 00:01:41.040
Of course, you can also explicitly set the type of variable.

34
00:01:41.040 --> 00:01:44.720
If we would add a new variable, favorite

35
00:01:45.580 --> 00:01:48.670
activities, and initially that should be empty,

36
00:01:48.670 --> 00:01:51.160
then we might wanna explicitly set

37
00:01:51.160 --> 00:01:53.140
the type of data stored in there.

38
00:01:53.140 --> 00:01:55.590
Now let's say that should be an array of strings, well then

39
00:01:55.590 --> 00:01:57.570
we can just repeat what we just saw;

40
00:01:57.570 --> 00:02:00.330
type string, and then square brackets there after,

41
00:02:00.330 --> 00:02:03.330
and this tells TypeScript what we store in here is not

42
00:02:03.330 --> 00:02:05.990
just a single string, it's an array of strings.

43
00:02:05.990 --> 00:02:09.550
And indeed if I try to store just sports in there,

44
00:02:09.550 --> 00:02:12.183
I get an error.
I get an error because

45
00:02:12.183 --> 00:02:15.650
that here is a single string, and not an array of strings.

46
00:02:15.650 --> 00:02:19.370
I don't get an error, of course, if I wrap this into square

47
00:02:19.370 --> 00:02:22.610
brackets and therefore effectively create an array.

48
00:02:22.610 --> 00:02:25.870
I again do get an error though, if I add a number,

49
00:02:25.870 --> 00:02:29.220
let's say, because we define this to be an array of strings.

50
00:02:29.220 --> 00:02:31.290
Now here, we have a mixed array.

51
00:02:31.290 --> 00:02:34.920
It's an array of strings and numbers, so that does

52
00:02:34.920 --> 00:02:37.180
not work and is not supported here.

53
00:02:37.180 --> 00:02:40.100
If we would want to support such a mixed array,

54
00:02:40.100 --> 00:02:43.120
one solution would be to use "any" here.

55
00:02:43.120 --> 00:02:45.880
The "any" type is a special type in TypeScript,

56
00:02:45.880 --> 00:02:47.610
which we'll have a closer look later,

57
00:02:47.610 --> 00:02:50.530
which basically means, do whatever you want.

58
00:02:50.530 --> 00:02:53.020
It's of course a type you don't wanna use too often

59
00:02:53.020 --> 00:02:55.630
because you'll lose the benefits TypeScript gives you,

60
00:02:55.630 --> 00:02:58.170
your back in JavaScript world, where you also

61
00:02:58.170 --> 00:03:00.140
can use any value anywhere.

62
00:03:00.140 --> 00:03:02.940
So "any" is really flexible, but the flexibility

63
00:03:02.940 --> 00:03:06.270
comes at the price of basically giving up

64
00:03:06.270 --> 00:03:08.710
all benefits TypeScript offers.

65
00:03:08.710 --> 00:03:10.840
So here I'm gonna go back to string, because I really

66
00:03:10.840 --> 00:03:12.530
don't wanna have a number in there, and hence

67
00:03:12.530 --> 00:03:14.933
we can remove the number and we're good.

68
00:03:15.900 --> 00:03:18.830
Arrays also give us a great example, actually

69
00:03:18.830 --> 00:03:21.890
just like objects and their properties,

70
00:03:21.890 --> 00:03:25.730
how dynamic TypeScript's type inference is.

71
00:03:25.730 --> 00:03:28.750
If we add a "for" loop here at the bottom, and we wanna

72
00:03:28.750 --> 00:03:31.570
go for all the hobbies of person, we can of course

73
00:03:31.570 --> 00:03:33.220
use a traditional "for" loop with

74
00:03:33.220 --> 00:03:38.220
for const hobby of person.hobbies,

75
00:03:38.620 --> 00:03:41.130
so accessing the hobbies property and going through

76
00:03:41.130 --> 00:03:42.793
all the hobbies there,

77
00:03:43.690 --> 00:03:46.780
storing each hobby for each iteration in this constant,

78
00:03:46.780 --> 00:03:50.090
and then we can consult log hobby here.

79
00:03:50.090 --> 00:03:52.000
Now that's not too fancy, that's something

80
00:03:52.000 --> 00:03:53.710
that we know from JavaScript, right.

81
00:03:53.710 --> 00:03:58.280
If I now compile this app.ts file down there,

82
00:03:58.280 --> 00:04:01.700
we get the name from this line,

83
00:04:01.700 --> 00:04:04.750
and thereafter the two hobbies being printed.

84
00:04:04.750 --> 00:04:07.800
But what's actually interesting here is that on hobby,

85
00:04:07.800 --> 00:04:11.040
we can access anything, we can access on any string.

86
00:04:11.040 --> 00:04:14.210
For example, to UpperCase, I get this auto completion

87
00:04:14.210 --> 00:04:16.230
and TypeScript does not complain.

88
00:04:16.230 --> 00:04:18.070
Why does it not complain?

89
00:04:18.070 --> 00:04:21.930
Because it knows that hobbies is of type string array,

90
00:04:21.930 --> 00:04:25.830
so when I access person.hobbies, TypeScript's inference

91
00:04:25.830 --> 00:04:29.700
detects that hobbies will be an array of strings.

92
00:04:29.700 --> 00:04:33.450
So hobby, on the upper hand, is correctly identified

93
00:04:33.450 --> 00:04:36.000
as being a string, because since we go through an array

94
00:04:36.000 --> 00:04:38.370
of strings, well the individual values

95
00:04:38.370 --> 00:04:40.510
have to be just strings.

96
00:04:40.510 --> 00:04:43.450
And therefore types offers us great support down there,

97
00:04:43.450 --> 00:04:46.490
and allows us to do anything with hobby that can be done

98
00:04:46.490 --> 00:04:50.050
with a string, because it knows with certainty that hobby

99
00:04:50.050 --> 00:04:53.810
will be a string because of the types we set up up there.

100
00:04:53.810 --> 00:04:56.300
And that's really flexible, and of course a great

101
00:04:56.300 --> 00:04:59.030
feature which makes writing code a lot easier

102
00:04:59.030 --> 00:05:01.360
and way more flexible and secure.

103
00:05:01.360 --> 00:05:04.440
For example, we would get an error here if it would try

104
00:05:04.440 --> 00:05:08.570
to access hobby.map, if I thought this would be an array.

105
00:05:08.570 --> 00:05:12.060
The map method is available on arrays, but not on strings.

106
00:05:12.060 --> 00:05:14.540
And here, correctly, again, an error that map

107
00:05:14.540 --> 00:05:17.810
does not exist on type string because it doesn't.

108
00:05:17.810 --> 00:05:21.290
So here we get an error, and that's good that we get it,

109
00:05:21.290 --> 00:05:24.510
because this would be wrong, and here we see

110
00:05:24.510 --> 00:05:27.343
TypeScript's inference really, really shine.

