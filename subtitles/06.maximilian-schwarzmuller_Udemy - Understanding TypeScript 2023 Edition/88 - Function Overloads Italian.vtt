WEBVTT

00:02.540 --> 00:05.610
Istruttore: Il prossimo passo sarà l'esplorazione

00:05.610 --> 00:08.050
degli overload di funzione, una caratteristica

00:08.050 --> 00:11.450
che ci permette di definire più firme di funzione, per così

00:11.450 --> 00:13.840
dire, per una stessa funzione.

00:13.840 --> 00:17.080
Ciò significa semplicemente che possiamo avere più modi possibili

00:17.080 --> 00:20.340
di chiamare una funzione con parametri diversi, per esempio,

00:20.340 --> 00:24.300
per poi fare qualcosa all'interno di quella funzione.

00:24.300 --> 00:26.540
Un buon esempio di come i sovraccarichi di funzioni

00:26.540 --> 00:29.060
possano aiutarci è visibile poco sopra.

00:29.060 --> 00:32.090
La funzione add che abbiamo scritto prima,

00:32.090 --> 00:35.940
prende due valori combinabili, cioè stringhe o numeri,

00:35.940 --> 00:37.960
e poi, come si può vedere, il

00:37.960 --> 00:39.830
tipo di ritorno che TypeScript

00:39.830 --> 00:43.450
infonde qui è tutto combinabile.

00:43.450 --> 00:45.370
Ciò significa semplicemente

00:45.370 --> 00:47.960
che TypeScript capisce che ciò che restituisce

00:47.960 --> 00:51.080
è una stringa o un numero, ma in realtà, se ci si pensa,

00:51.080 --> 00:52.880
non è così.

00:52.880 --> 00:55.280
Tecnicamente è vero, ma sappiamo che

00:55.280 --> 00:57.620
se inseriamo due numeri il tipo restituito

00:57.620 --> 00:59.400
sarà sempre number.

00:59.400 --> 01:01.940
Se si passa almeno una stringa, il tipo

01:01.940 --> 01:03.950
di ritorno sarà stringa.

01:03.950 --> 01:05.460
Perché questo potrebbe essere importante?

01:05.460 --> 01:08.225
Tenete presente che la funzione add è scritta in questo modo.

01:08.225 --> 01:11.060
E in realtà si può commentare tutto quello che

01:11.060 --> 01:15.390
c'è sotto e aggiungere del nuovo codice proprio sotto la funzione.

01:15.390 --> 01:18.670
Se ora ottengo il mio risultato chiamando add,

01:18.670 --> 01:21.870
passo uno e cinque, vedete che il risultato è di

01:21.870 --> 01:23.390
tipo combinabile.

01:23.390 --> 01:27.010
Una conseguenza di ciò è che TypeScript non sa

01:27.010 --> 01:30.390
se il risultato è un numero o una stringa.

01:30.390 --> 01:34.510
Questo potrebbe essere importante se si passa in stringhe.

01:34.510 --> 01:39.510
Se passo qui Max Schwarz, allora funziona, ma ottengo comunque un

01:39.700 --> 01:41.750
risultato combinabile.

01:41.750 --> 01:43.990
Di conseguenza non posso chiamare le

01:43.990 --> 01:46.120
funzioni stringa sul risultato,

01:46.120 --> 01:50.600
ad esempio non posso chiamare split per dividere gli spazi bianchi.

01:50.600 --> 01:52.870
So che funzionerà, perché so che quando

01:52.870 --> 01:55.270
chiamo la funzione in questo modo, la trasformerò

01:55.270 --> 01:57.200
in questo ramo if e otterrò una stringa,

01:57.200 --> 01:59.980
quindi so che i risultati conterranno una stringa,

01:59.980 --> 02:03.030
ma TypeScript sa solo che contiene una stringa o un

02:03.030 --> 02:05.620
numero.

02:05.620 --> 02:08.350
Naturalmente, possiamo usare il type casting e dire a

02:08.350 --> 02:11.340
TypeScript che ciò che ci viene restituito è una stringa.

02:11.340 --> 02:13.930
Possiamo farlo con la sintassi di fusione dei

02:13.930 --> 02:16.040
tipi che abbiamo imparato prima.

02:16.040 --> 02:18.840
Tuttavia, non è ottimale doverlo fare, perché dobbiamo

02:18.840 --> 02:21.800
scrivere altro codice, anche se ci aspettiamo che TypeScript

02:21.800 --> 02:24.560
capisca che quando chiamiamo questa funzione in questo

02:24.560 --> 02:26.070
modo, otteniamo sempre una

02:26.070 --> 02:27.740
stringa.

02:27.740 --> 02:30.890
Ma TypeScript non analizza abbastanza bene il nostro

02:30.890 --> 02:33.700
codice ed è qui che un sovraccarico di funzione

02:33.700 --> 02:35.000
può aiutarci.

02:35.000 --> 02:38.730
Un sovraccarico di funzione si scrive semplicemente scrivendo

02:38.730 --> 02:41.880
la funzione proprio sopra la funzione principale,

02:41.880 --> 02:46.683
per così dire, con lo stesso nome, quindi si ripete questa riga qui, in pratica,

02:47.880 --> 02:50.890
ma senza le parentesi graffe, senza parentesi

02:50.890 --> 02:54.080
graffe di apertura e chiusura, e ora qui si vogliono

02:54.080 --> 02:57.980
usare i tipi specifici numero e numero e poi il tipo di ritorno

02:57.980 --> 03:03.410
find per quando questo è il caso in cui si ottiene almeno un numero.

03:03.410 --> 03:06.643
E potremmo dire che il tipo di ritorno è number.

03:08.840 --> 03:10.980
Quindi ora stiamo dicendo a TypeScript: se

03:10.980 --> 03:14.980
chiamiamo questa funzione ed entrambi gli argomenti sono un numero, allora questa

03:14.980 --> 03:17.180
funzione restituisce un numero.

03:17.180 --> 03:19.430
Naturalmente questa non è una sintassi che

03:19.430 --> 03:22.480
funzionerebbe in JavaScript, ma verrà eliminata da TypeScript

03:22.480 --> 03:24.430
nel processo di compilazione.

03:24.430 --> 03:28.480
Ma TypeScript fonde insieme queste informazioni sulla funzione

03:28.480 --> 03:31.380
e questa dichiarazione di funzione e fondamentalmente

03:31.380 --> 03:33.640
combina la conoscenza di queste due

03:33.640 --> 03:35.550
righe.

03:35.550 --> 03:38.590
E ora sa che possiamo chiamare questa funzione

03:38.590 --> 03:41.490
sia con A e B di tipo combinabile sia con

03:41.490 --> 03:43.790
A e B di tipo numero.

03:43.790 --> 03:47.060
Tra l'altro, è possibile aggiungere più o meno parametri

03:47.060 --> 03:50.100
nei sovraccarichi, in modo davvero flessibile.

03:50.100 --> 03:53.640
Si può anche aggiungere la funzione add qui e aspettarsi

03:53.640 --> 03:57.620
solo un numero e restituire un numero, e questo funzionerebbe

03:57.620 --> 04:03.270
anche se rendessimo B opzionale anche negli altri sovraccarichi.

04:03.270 --> 04:05.254
Perché alla fine bisogna assicurarsi

04:05.254 --> 04:08.630
che il codice qui presente funzioni sempre e che alla fine si ricevano

04:08.630 --> 04:10.850
tutti gli argomenti necessari.

04:10.850 --> 04:13.610
Quindi la B sarebbe facoltativa qui e poi si vede che

04:13.610 --> 04:15.170
funziona, ma naturalmente dovremmo

04:15.170 --> 04:17.850
lavorare sul fatto che la B è potenzialmente facoltativa

04:17.850 --> 04:19.550
laggiù.

04:19.550 --> 04:21.390
Tuttavia, non ne ho bisogno, quindi

04:21.390 --> 04:24.460
lo eliminerò e lascerò questo, ma non volevo nemmeno un sovraccarico

04:24.460 --> 04:27.200
per quando lo chiamiamo con le stringhe.

04:27.200 --> 04:30.060
Aggiungerò quindi un altro sovraccarico della

04:30.060 --> 04:33.450
funzione add, dove A è una stringa e B è una stringa, e poi

04:33.450 --> 04:36.090
sono abbastanza chiaro sul fatto che ciò che

04:36.090 --> 04:38.460
restituiremo sarà una stringa.

04:38.460 --> 04:40.280
A proposito, è buona norma aggiungere

04:40.280 --> 04:43.660
un punto e virgola dopo queste linee di sovraccarico.

04:43.660 --> 04:46.560
Quindi, se chiamiamo questa funzione con due

04:46.560 --> 04:49.100
numeri, otteniamo sempre un numero.

04:49.100 --> 04:52.170
Se lo chiamiamo con due stringhe, otteniamo sempre una stringa.

04:52.170 --> 04:54.510
Se lo chiamiamo con una stringa e un numero, tecnicamente

04:54.510 --> 04:57.020
otterremo sempre una stringa, ma non voglio aggiungere

04:57.020 --> 04:57.853
tutte queste possibili

04:57.853 --> 04:59.410
combinazioni qui, naturalmente

04:59.410 --> 05:01.240
potrei aggiungerne altre e poi aggiungere

05:01.240 --> 05:03.173
anche il numero qui, o l'altra combinazione

05:04.040 --> 05:07.500
che potremmo avere, che è questa.

05:07.500 --> 05:10.060
Beh, credo di aver aggiunto tutte le combinazioni.

05:10.060 --> 05:12.540
Ora sto elencando tutte le potenziali combinazioni

05:12.540 --> 05:16.040
di valori e ciò che viene restituito in ogni caso.

05:16.040 --> 05:18.260
Ora l'errore non c'è più, perché ora TypeScript

05:18.260 --> 05:20.520
sa che i risultati saranno di tipo stringa

05:20.520 --> 05:25.623
se chiamiamo add con questi due valori, che sono entrambi stringhe.

05:25.623 --> 05:28.510
E se passo il mouse su add, vedo che sono disponibili

05:28.510 --> 05:31.100
altri tre sovraccarichi.

05:31.100 --> 05:32.980
Qui sto chiamando add con due stringhe,

05:32.980 --> 05:35.560
ma TypeScript sa che ci sono altri tre modi per

05:35.560 --> 05:36.630
chiamarlo.

05:36.630 --> 05:39.450
Ad esempio, con una stringa e un numero,

05:39.450 --> 05:41.340
nel qual caso ottengo una

05:41.340 --> 05:46.340
stringa, con un numero e una stringa, o con due numeri.

05:47.430 --> 05:48.630
Anche questo potrebbe funzionare.

05:48.630 --> 05:50.210
Ovviamente non posso chiamare split,

05:50.210 --> 05:52.650
perché TypeScript identifica correttamente che

05:52.650 --> 05:54.630
quando lo chiamo con due numeri, mi viene

05:54.630 --> 05:58.253
restituito un numero e su un numero non si può chiamare split.

05:59.260 --> 06:02.010
Si tratta di sovraccarichi di funzioni che possono aiutare

06:02.010 --> 06:04.060
in situazioni come questa, in cui TypeScript

06:04.060 --> 06:06.780
non sarebbe in grado di dedurre correttamente il tipo

06:06.780 --> 06:08.590
di ritorno da solo; in questo caso si

06:08.590 --> 06:11.660
può essere davvero chiari su cosa viene restituito per le diverse

06:11.660 --> 06:16.033
combinazioni che si possono supportare nella funzione.
