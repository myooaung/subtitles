WEBVTT

00:02.300 --> 00:04.800
Kursleiter: In loser Verbindung mit der optionalen Verkettung

00:04.800 --> 00:06.930
gibt es ein weiteres nettes Feature in TypeScript,

00:06.930 --> 00:09.550
das uns hilft, mit nullischen Daten umzugehen.

00:09.550 --> 00:12.820
Und dieses Merkmal wird als Nullish Coalescing bezeichnet.

00:12.820 --> 00:15.900
Stellen Sie sich nun vor, Sie haben einige Daten, eine Eingabe,

00:15.900 --> 00:17.530
von der Sie nicht mit Sicherheit

00:17.530 --> 00:19.830
wissen, ob sie null oder undefiniert ist oder

00:19.830 --> 00:23.320
ob es sich tatsächlich um ein gültiges Datenelement handelt.

00:23.320 --> 00:28.180
Beispielsweise könnte userInput null sein, sagen wir.

00:28.180 --> 00:31.040
Auch hier haben wir dies in TypeScript hart kodiert, daher

00:31.040 --> 00:33.580
weiß TypeScript, dass dies null ist, aber wenn Sie

00:33.580 --> 00:36.500
dies über eine DOM-API abrufen, wo Sie es nicht mit Sicherheit

00:36.500 --> 00:38.650
wissen, oder wenn Sie dies von einem Back-End

00:38.650 --> 00:41.320
erhalten, dann wissen Sie es vielleicht nicht im Voraus

00:41.320 --> 00:42.970
und TypeScript weiß vielleicht

00:42.970 --> 00:46.510
nicht, ob dies null ist oder nicht.

00:46.510 --> 00:50.650
Wenn Sie dies dann in einer anderen Konstanten oder Variablen wie StoredData

00:50.650 --> 00:52.803
speichern möchten, sollten Sie sicherstellen,

00:54.090 --> 00:56.150
dass Sie einen Ersatzwert speichern,

00:56.150 --> 00:58.760
wenn dieser Null ist.

00:58.760 --> 01:03.560
Jetzt kann man das mit dem logischen ODER-Operator tun, bei dem man eine Voreinstellung

01:03.560 --> 01:05.330
speichert, bei der der zweite

01:05.330 --> 01:06.740
Wert des ersten undefiniert

01:06.740 --> 01:08.940
oder null ist, wenn er falsch ist, um

01:08.940 --> 01:11.550
genau zu sein.

01:11.550 --> 01:13.690
Das Problem bei diesem Ansatz ist,

01:13.690 --> 01:17.110
dass, wenn dieser Wert nicht null oder undefiniert ist,

01:17.110 --> 01:18.960
sondern z. B. eine leere Zeichenkette,

01:18.960 --> 01:21.740
er als falscher Wert behandelt wird und daher

01:21.740 --> 01:25.600
der Standardwert zum Tragen kommt.

01:25.600 --> 01:28.850
Wenn ich also tröste. log storedData hier, werden

01:28.850 --> 01:31.700
Sie sehen, dass dies DEFAULT ausgibt.

01:31.700 --> 01:33.430
Vielleicht ist es das, was Sie wollen,

01:33.430 --> 01:36.540
und in diesem Fall ist dies eine sehr gute Lösung.

01:36.540 --> 01:38.800
Wenn Sie aber die Benutzereingabe oder die Daten,

01:38.800 --> 01:40.730
mit denen Sie arbeiten, beibehalten wollen,

01:40.730 --> 01:44.110
es sei denn, sie ist wirklich null oder undefiniert, dann brauchen Sie einen

01:44.110 --> 01:45.530
anderen Ansatz, denn hier würden

01:45.530 --> 01:48.970
wir dies als false behandeln und den Fallback verwenden.

01:48.970 --> 01:51.720
Aber vielleicht wollen Sie eine leere Eingabe behalten, nur

01:51.720 --> 01:54.370
null oder undefiniert sollte anders behandelt werden.

01:54.370 --> 01:56.390
Dafür gibt es in TypeScript auch einen

01:56.390 --> 01:58.780
Operator, den doppelten Fragezeichenoperator,

01:58.780 --> 02:02.210
der als nullish coalescing operator bezeichnet wird.

02:02.210 --> 02:05.250
Und es bedeutet, wenn dies null oder undefiniert ist,

02:05.250 --> 02:06.730
und wirklich nur das, keine

02:06.730 --> 02:09.180
leere Zeichenkette, nicht Null, wirklich

02:09.180 --> 02:11.540
nur null oder undefiniert, dann werden wir

02:11.540 --> 02:13.370
den Fallback verwenden.

02:13.370 --> 02:16.700
Wenn er nicht null oder undefiniert ist, wird dieser Wert verwendet.

02:16.700 --> 02:19.220
In diesem Szenario hier wird also kompiliert, und wie Sie

02:19.220 --> 02:21.400
sehen, haben wir die leere Zeichenkette gespeichert,

02:21.400 --> 02:23.060
daher gebe ich hier nichts aus, das ist

02:23.060 --> 02:24.720
die leere Zeichenkette.

02:24.720 --> 02:26.060
Wenn dies andererseits, sagen

02:26.060 --> 02:28.550
wir, hier undefiniert ist und ich dies speichere, sehen

02:28.550 --> 02:30.400
Sie, dass jetzt DEFAULT steht, weil wir

02:30.400 --> 02:32.980
dank dieses doppelten Fragezeichen-Operators auf diesen,

02:32.980 --> 02:35.500
nun ja, Fallback zurückgreifen und daher haben wir hier

02:35.500 --> 02:38.320
eine weitere sehr nützliche Funktion, die Ihnen helfen kann,

02:38.320 --> 02:40.580
mit nullischen oder undefinierten Werten mit

02:40.580 --> 02:42.773
Anmut umzugehen.
