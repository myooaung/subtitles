WEBVTT

00:02.170 --> 00:03.420
ผู้สอน: มาเริ่มกันเลย

00:03.420 --> 00:06.330
ดังที่ฉันได้กล่าวไว้ ที่นี่ฉันจะสร้าง REST API พื้นฐาน

00:06.330 --> 00:09.130
แต่แน่นอนว่าคุณสามารถสร้าง Node Application ใดก็ได้โดยมีหรือไม่มี

00:09.130 --> 00:10.810
Express และด้วยวิธีใดก็ได้ด้วย

00:10.810 --> 00:15.570
TypeScript ดังนั้นนี่เป็นเพียงตัวอย่างเท่านั้น

00:15.570 --> 00:18.990
คุณไม่ได้ถูกจำกัดเฉพาะแอปพลิเคชันนี้

00:18.990 --> 00:25.970
ในโฟลเดอร์ src ฉันจะเพิ่มแอป ts ซึ่งจะเป็นจุดเข้ารูทที่เราหมุนเซิร์ฟเวอร์นั้น

00:25.970 --> 00:29.530
และที่นั่นฉันต้องการนำเข้าบางสิ่งจาก Express จากเฟรมเวิร์ก

00:29.530 --> 00:31.203
Express นี้

00:32.970 --> 00:35.460
ตอนนี้คุณคงทราบแล้วว่าเราจะเพิ่ม Express ที่นี่และตั้งค่าเว็บเซิร์ฟเวอร์ด้วย

00:35.460 --> 00:37.890
Express ได้อย่างไร

00:37.890 --> 00:41.330
เรานำเข้า Express ด้วยไวยากรณ์นี้ที่นี่

00:41.330 --> 00:46.330
จากนั้นที่นี่เราสามารถเรียกใช้ Express เป็นฟังก์ชันได้

00:46.380 --> 00:53.750
เราได้รับวัตถุแอปดังกล่าวกลับมา ซึ่งเราสามารถเรียกการฟังเพื่อฟังบนพอร์ตหนึ่งสำหรับคำขอที่เข้ามา

00:53.750 --> 00:58.420
ตอนนี้สิ่งนี้จะทำงานใน JavaScript ปกติ แต่คุณเห็นแล้วว่าฉันได้รับข้อผิดพลาดที่นี่

00:59.540 --> 01:03.500
ตอนนี้ฉันยังได้รับคำแนะนำว่าเหตุใดฉันจึงอาจได้รับข้อผิดพลาดนี้

01:03.500 --> 01:10.100
เพราะจริงๆ แล้ว need เป็นฟังก์ชันที่มีอยู่ในโน้ต

01:10.100 --> 01:10.100
js แต่ไม่ใช่ในฝั่งเบราว์เซอร์

01:10.100 --> 01:12.540
ตอนนี้อยู่ใน tsconfig. ฉันไม่ได้ใช้ libs

01:12.540 --> 01:22.900
พิเศษใด ๆ ที่จะรองรับโหนด js ดังนั้นใน TypeScript เหล่านี้จึงไม่รู้จักฟังก์ชันทั่วไปที่มีอยู่ในโหนด

01:22.900 --> 01:22.900
js สภาพแวดล้อม

01:22.900 --> 01:27.140
ตอนนี้เพื่อให้ใช้งานได้ เราต้องติดตั้งประเภทพิเศษด้วย "npm install --save-dev" เราสามารถติดตั้ง

01:27.140 --> 01:36.291
"@types/node" เพื่อติดตั้งทุกประเภทที่เราต้องการเพื่อทำงานกับโหนด

01:36.291 --> 01:36.291
js

01:36.291 --> 01:39.460
ลองรันคำสั่งนี้ดูว่ามันช่วยเราได้ไหม

01:39.460 --> 01:42.320
ใช่ เสร็จแล้ว และข้อผิดพลาดนี้ก็หายไป

01:42.320 --> 01:46.680
แต่บางทีคุณอาจเห็นว่าในแอปฉันไม่ได้รับการเติมข้อความอัตโนมัติเลย

01:46.680 --> 01:50.190
นอกจากนี้ยังไม่ผิดพลาด แต่ถ้าเราวางเมาส์เหนือแอป เราจะเห็นว่า

01:50.190 --> 01:52.410
TypeScript ไม่รู้ว่ามีอะไรอยู่ในนั้น

01:52.410 --> 01:54.210
เป็นประเภท "อะไรก็ได้"

01:54.210 --> 01:56.530
ดังนั้น เราน่าจะติดตั้งประเภทต่างๆ

01:56.530 --> 02:02.410
มากขึ้น และติดตั้ง "@types/express" เพื่อติดตั้งประเภทด่วนโดยเฉพาะ

02:02.410 --> 02:04.320
และนั่นคือรูปแบบที่คุณรู้อยู่แล้ว

02:04.320 --> 02:08.350
เราได้ดูสิ่งนั้นในส่วนห้องสมุดบุคคลที่สามของหลักสูตร

02:08.350 --> 02:12.030
ที่นั่น ฉันยังแสดงวิธีติดตั้งแพ็กเกจประเภทต่างๆ เพื่อรับการสนับสนุนที่ดีขึ้นในสคริปต์

02:12.030 --> 02:15.220
TypeScript ของคุณ

02:15.220 --> 02:19.320
ดังนั้นเมื่อเพิ่มประเภทนี้เข้าไปโดยไม่มีการกำหนดค่าเพิ่มเติม

02:19.320 --> 02:22.030
ฮ่า มันยังใช้งานไม่ได้

02:22.030 --> 02:25.330
เหตุผลก็คือไวยากรณ์การนำเข้าที่เราใช้ที่นี่

02:25.330 --> 02:30.450
นี่เป็นเรื่องปกติทั่วไป js นำเข้าไวยากรณ์ซึ่งบันทึก

02:30.450 --> 02:30.450
js

02:30.450 --> 02:33.660
ใช้เป็นค่าเริ่มต้น แต่ที่นี่เราอยู่ในสภาพแวดล้อมใน TypeScript

02:33.660 --> 02:36.140
ที่เราสามารถใช้ไวยากรณ์การนำเข้าอื่นได้

02:36.140 --> 02:38.230
เราสามารถใช้ไวยากรณ์การนำเข้าแบบเดียวกับที่เรารู้จากโมดูล

02:38.230 --> 02:40.373
ES ในเบราว์เซอร์

02:41.240 --> 02:46.240
ดังนั้นเราจึงสามารถใช้ "import express จาก 'express'" เป็นต้น

02:46.710 --> 02:48.620
และถ้าเราทำเช่นนั้นแล้ววางเมาส์เหนือ "แอพ" คุณจะเห็นว่ามันเป็นประเภท

02:48.620 --> 02:49.910
'Express'

02:49.910 --> 02:53.040
ตอนนี้เราได้รับการสนับสนุน TypeScript แล้ว

02:53.040 --> 02:54.569
ตอนนี้บันทึกสำคัญอย่างหนึ่ง

02:54.569 --> 03:00.810
ในหมายเหตุ js ยังมีไวยากรณ์ที่คล้ายกับอันนี้

03:00.810 --> 03:06.190
ตอนนี้อยู่ภายใต้แฟล็กทดลอง และอยู่ภายใต้แฟล็กนั้นเป็นเวลานานมาก

03:06.190 --> 03:13.482
จึงใช้สามัญ js ในหมายเหตุ js เป็นค่าเริ่มต้นและวิธีทั่วไปในการเพิ่มการนำเข้าและส่งออก

03:13.482 --> 03:18.380
ไวยากรณ์ที่มีลักษณะเช่นนี้ได้รับการสนับสนุนหากคุณตั้งค่าสถานะการทดลองนี้

03:18.380 --> 03:24.012
แต่ในโค้ดนี้เราไม่ได้ใช้โหนดทดลองนี้

03:24.012 --> 03:24.012
js ไวยากรณ์

03:24.012 --> 03:26.209
เราใช้ TypeScript แทน

03:26.209 --> 03:29.859
เมื่อเราคอมไพล์เป็น JavaScript สิ่งนี้จะเปลี่ยนไป

03:29.859 --> 03:31.860
และผมสามารถแสดงสิ่งนี้ให้คุณดู

03:31.860 --> 03:34.060
เพื่อเราจะได้ดำเนินการตามนี้

03:34.060 --> 03:36.230
หากคุณเรียกใช้ "tsc" ที่นี่

03:36.230 --> 03:42.680
บางที "tsc-w" เพื่อเข้าสู่โหมดเฝ้าดู คุณจะเห็นสิ่งนี้เริ่มการคอมไพล์

03:42.680 --> 03:44.110
มันสร้างโฟลเดอร์ dist

03:44.110 --> 03:46.770
และตอนนี้เรามีแอพ js และในที่นี้

03:46.770 --> 03:50.040
ตอนนี้ดูแตกต่างออกไป

03:50.040 --> 03:55.710
คุณเห็นไหมว่าตอนนี้ไม่ได้ตั้งค่าให้นำเข้าอย่างที่เรามีที่นี่

03:55.710 --> 03:58.900
มันใช้ไวยากรณ์อื่นแทน

03:58.900 --> 04:02.350
นี่คือรหัสที่จะถูกดำเนินการจริง

04:02.350 --> 04:12.230
และเราสามารถดำเนินการกับ nodemon ด้วยเครื่องมือนี้ที่จะรีสตาร์ทเซิร์ฟเวอร์โดยอัตโนมัติหากรหัสของเราเปลี่ยนแปลงโดยการเปิดแท็บใหม่ที่นี่ในเทอร์มินัล

04:12.230 --> 04:13.620
เปิดอีกแท็บไว้เพราะนั่นคือกระบวนการคอมไพล์

04:13.620 --> 04:20.095
TypeScript ของเรา และในแท็บใหม่นั้น เราต้องการเริ่มเซิร์ฟเวอร์ของเราด้วยความช่วยเหลือของ nodemon

04:20.095 --> 04:22.990
เพื่อไปที่แพ็คเกจ json และเพิ่มสคริปต์ใหม่

04:22.990 --> 04:26.260
อาจเป็นสคริปต์เริ่มต้น โดยที่เราพูดว่า "nodemon

04:26.260 --> 04:30.900
dist/app.json" js" เพื่อให้ nodemon รันไฟล์นี้ในโฟลเดอร์

04:30.900 --> 04:36.360
dist และเริ่มเซิร์ฟเวอร์ของเราด้วยไฟล์นั้น

04:36.360 --> 04:39.430
และด้วยที่เพิ่มและแพ็คเกจ บันทึกไฟล์ json แล้ว เราสามารถเรียกใช้

04:39.430 --> 04:43.240
npmstart เพื่อหมุนเซิร์ฟเวอร์การพัฒนาของเรา

04:43.240 --> 04:47.710
และตอนนี้มันกำลังให้บริการแอพ dist นี้ js ตอนนี้เป็นการตั้งค่าทั่วไปที่เรามี

04:47.710 --> 04:49.230
และนั่นคือ TypeScript

04:49.230 --> 04:52.030
ที่ทำงานอยู่แล้วที่นี่

04:52.030 --> 04:53.940
เรายังมี TypeSupport

04:53.940 --> 04:57.756
และที่นี่คุณเห็นในแอป เราสามารถเขียนโค้ดที่ดูคุ้นเคยกับเรามากด้วยไวยากรณ์นำเข้า/ส่งออกที่เรารู้อยู่แล้ว

04:57.756 --> 05:07.000
แต่สิ่งที่เราได้รับจากเอาต์พุตนั้นอยู่ในโหนด JavaScript ทั่วไปในตอนท้าย

05:07.000 --> 05:07.000
js

05:07.000 --> 05:09.640
code และนั่นมีประโยชน์อย่างมาก

05:09.640 --> 05:15.003
จากนี้ มาทำสิ่งที่มีประโยชน์มากกว่าการเริ่มต้นเซิร์ฟเวอร์ที่ไม่ทำอะไรเลย
