WEBVTT

00:02.300 --> 00:04.800
Instructeur: Nu losjes gerelateerd aan optionele chaining,

00:04.800 --> 00:06.930
hebben we nog een leuke functie in TypeScript,

00:06.930 --> 00:09.550
die ons helpt om te gaan met nullish data.

00:09.550 --> 00:12.820
En dat kenmerk heet nullish coalescing.

00:12.820 --> 00:15.900
Stel je voor dat je gegevens hebt, input,

00:15.900 --> 00:17.530
waarvan je niet zeker

00:17.530 --> 00:19.830
weet of het null of ongedefinieerd

00:19.830 --> 00:23.320
is, of dat het een geldig gegeven is.

00:23.320 --> 00:28.180
UserInput zou bijvoorbeeld nul kunnen zijn, laten we zeggen.

00:28.180 --> 00:31.040
Ook hier hebben we dit hard gecodeerd in TypeScript,

00:31.040 --> 00:33.580
dus TypeScript weet dat dit null is, maar als

00:33.580 --> 00:36.500
je dit ophaalt via een DOM API, waar je het niet met

00:36.500 --> 00:38.650
zekerheid weet, of als je dit van een

00:38.650 --> 00:41.320
back-end krijgt, dan weet je het misschien niet

00:41.320 --> 00:42.970
op voorhand en weet TypeScript

00:42.970 --> 00:46.510
misschien niet of dit null is of niet.

00:46.510 --> 00:50.650
Als u dit vervolgens wilt opslaan in een andere constante of variabele

00:50.650 --> 00:52.803
zoals storedData, wilt u er misschien

00:54.090 --> 00:56.150
voor zorgen dat als het null is, u een

00:56.150 --> 00:58.760
fallback-waarde opslaat.

00:58.760 --> 01:03.560
Nu kun je dat doen met de logische OR-operator, waarbij je een default opslaat,

01:03.560 --> 01:05.330
waarbij je die tweede waarde

01:05.330 --> 01:06.740
krijgt als de eerste ongedefinieerd

01:06.740 --> 01:08.940
of nul is, als het onwaar is om precies

01:08.940 --> 01:11.550
te zijn.

01:11.550 --> 01:13.690
Het probleem met deze aanpak is, dat

01:13.690 --> 01:17.110
als dit eigenlijk niet null of ongedefinieerd is, maar

01:17.110 --> 01:18.960
laten we zeggen een lege string,

01:18.960 --> 01:21.740
het wordt behandeld als een valse waarde, en

01:21.740 --> 01:25.600
daarom zal die standaard, fallback waarde aanslaan.

01:25.600 --> 01:28.850
Dus als ik de console. log storedData hier,

01:28.850 --> 01:31.700
zult u zien dat dit DEFAULT afdrukt.

01:31.700 --> 01:33.430
Misschien is dat wat u wilt,

01:33.430 --> 01:36.540
en in dat geval is dit een prima oplossing.

01:36.540 --> 01:38.800
Maar als je die gebruikersinvoer, of welke gegevens

01:38.800 --> 01:40.730
dan ook waarmee je werkt, wilt behouden,

01:40.730 --> 01:44.110
tenzij het echt null of ongedefinieerd is, dan heb je een andere aanpak

01:44.110 --> 01:45.530
nodig, want hier zouden we dit

01:45.530 --> 01:48.970
als false behandelen en de fallback gebruiken.

01:48.970 --> 01:51.720
Maar misschien wil je een lege invoer gewoon null of undefined

01:51.720 --> 01:54.370
houden, dat moet anders behandeld worden.

01:54.370 --> 01:56.390
Daarvoor heeft TypeScript ook een

01:56.390 --> 01:58.780
operator, de dubbele vraagteken operator,

01:58.780 --> 02:02.210
dit heet de nullish coalescing operator.

02:02.210 --> 02:05.250
En het betekent als dit null of ongedefinieerd

02:05.250 --> 02:06.730
is, en echt alleen dat,

02:06.730 --> 02:09.180
geen lege string, geen nul, echt alleen

02:09.180 --> 02:11.540
null of ongedefinieerd, dan gebruiken

02:11.540 --> 02:13.370
we de fallback.

02:13.370 --> 02:16.700
Als het niet null of ongedefinieerd is, gebruiken we die waarde.

02:16.700 --> 02:19.220
Dus in dit scenario hier, compileert dit, en zie

02:19.220 --> 02:21.400
je, we hebben de lege string opgeslagen,

02:21.400 --> 02:23.060
vandaar dat ik hier niets afdruk,

02:23.060 --> 02:24.720
dit is de lege string.

02:24.720 --> 02:26.060
Als dit aan de andere kant,

02:26.060 --> 02:28.550
laten we zeggen, ongedefinieerd is, en ik sla

02:28.550 --> 02:30.400
dit op, zie je, nu staat er DEFAULT,

02:30.400 --> 02:32.980
want dankzij deze dubbele vraagteken-operator,

02:32.980 --> 02:35.500
vallen we terug op deze, nou ja, fallback en daarom

02:35.500 --> 02:38.320
hebben we hier nog een zeer nuttige functie die je kan

02:38.320 --> 02:40.580
helpen om genadig om te gaan met nullish of

02:40.580 --> 02:42.773
ongedefinieerde waarden.
