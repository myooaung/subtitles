WEBVTT

00:02.230 --> 00:04.860
Instructeur : L'idée d'un Tuple est vaguement liée à

00:04.860 --> 00:09.760
celle d'avoir quelques identifiants spécifiques, des constantes globales avec lesquelles vous

00:09.760 --> 00:12.710
pourriez travailler dans votre application, que vous voulez

00:12.710 --> 00:15.020
représenter sous forme de nombres, mais auxquelles

00:15.020 --> 00:18.530
vous voulez attribuer une étiquette lisible par l'homme.

00:18.530 --> 00:20.500
Et pour cela, vous avez le type Enum.

00:20.500 --> 00:23.800
Là encore, cela existe dans certains langages de programmation supérieurs.

00:23.800 --> 00:25.780
JavaScript ne le sait pas cependant.

00:25.780 --> 00:26.613
Ça ressemble à ça.

00:26.613 --> 00:28.110
C'est ainsi que l'on crée un enum.

00:28.110 --> 00:30.540
Vous utilisez le mot-clé enum, qui n'existe

00:30.540 --> 00:33.060
que dans le monde de TypeScript, pas en JavaScript,

00:33.060 --> 00:34.840
puis vous avez des accolades, et

00:34.840 --> 00:36.810
enfin vos identifiants.

00:36.810 --> 00:39.141
Et ce type, qui est ajouté par TypeScript,

00:39.141 --> 00:42.030
vous donne une liste énumérée.

00:42.030 --> 00:45.070
Au final, ces étiquettes sont simplement traduites en nombres commençant par

00:45.070 --> 00:48.580
zéro, ce qui vous permet d'obtenir des étiquettes lisibles par l'homme avec lesquelles vous

00:48.580 --> 00:50.133
pouvez travailler dans votre code.

00:51.310 --> 00:53.500
Pour vous montrer un exemple, revenons

00:53.500 --> 00:55.620
ici à notre personne avec son rôle.

00:55.620 --> 00:58.010
Je vais copier ce code et le commenter car

00:58.010 --> 00:59.710
je vais le modifier un peu.

00:59.710 --> 01:01.600
Et puis ici, je vais me débarrasser de

01:01.600 --> 01:05.380
cette affectation de type explicite et revenir à l'inférence, car je vais

01:05.380 --> 01:07.150
maintenant changer de rôle.

01:07.150 --> 01:10.330
Et maintenant, disons que nous voulons avoir un administrateur, un auteur

01:10.330 --> 01:12.350
et peut-être un utilisateur en lecture seule.

01:12.350 --> 01:14.750
L'administrateur doit avoir un ID de zéro,

01:14.750 --> 01:18.660
l'utilisateur en lecture seule en a un, l'auteur en a deux.

01:18.660 --> 01:21.160
Maintenant, bien sûr, nous pouvons stocker ça exactement

01:21.160 --> 01:22.550
comme ça avec ces chiffres.

01:22.550 --> 01:24.830
L'inconvénient est que nous pouvons toujours ajouter

01:24.830 --> 01:26.670
un nombre pour lequel nous n'avons pas de

01:26.670 --> 01:30.320
rôle et si nous essayons ensuite, plus tard dans notre code, d'extraire le rôle et

01:30.320 --> 01:33.392
d'utiliser le contrôle if, cela peut entraîner des erreurs.

01:33.392 --> 01:37.160
De plus, en tant que développeur, nous avons du mal à comprendre

01:37.160 --> 01:39.690
quel est le rôle de cet utilisateur.

01:39.690 --> 01:41.310
Était-ce pour l'auteur ?

01:41.310 --> 01:43.020
Ou était-ce la lecture sur l'utilisateur ?

01:43.020 --> 01:46.140
Vous pouvez l'oublier lorsque vous faites des pauses plus longues, lorsque

01:46.140 --> 01:48.810
vous travaillez dans des équipes plus importantes, etc.

01:48.810 --> 01:50.540
Ainsi, en tant que développeur,

01:50.540 --> 01:54.310
vous pourriez vouloir des identifiants lisibles par l'homme,

01:54.310 --> 01:58.630
quelque chose comme ADMIN, et READ ONLY USER, quelque chose comme ça.

01:58.630 --> 02:00.240
Maintenant, bien sûr, nous pourrions utiliser

02:00.240 --> 02:02.880
cela, nous pourrions travailler avec de telles valeurs de chaîne.

02:02.880 --> 02:06.100
Le problème est que si nous avons ensuite besoin d'un contrôle

02:06.100 --> 02:11.100
if, nous vérifions si le rôle de la personne est égal à, était-ce READ_ONLY_USER ?

02:12.260 --> 02:13.500
Ou c'était un seul mot ?

02:13.500 --> 02:15.380
C'était avec des traits de soulignement ?

02:15.380 --> 02:17.440
Vous voyez, nous devons alors nous rappeler comment

02:17.440 --> 02:19.020
nous avons écrit ces chaînes, quel

02:19.020 --> 02:20.970
texte exact nous avons là-dedans.

02:20.970 --> 02:24.330
Parce que cette chaîne avec les tirets entre les mots

02:24.330 --> 02:27.430
n'est bien sûr pas la même que cette chaîne.

02:27.430 --> 02:29.973
Donc ici, nous ne le ferions jamais là-dedans,

02:31.150 --> 02:36.120
c'est en lecture seule si vous essayez de compiler et d'imprimer cela, parce que, eh bien,

02:36.120 --> 02:39.170
la vérification ne donne tout simplement pas true.

02:39.170 --> 02:42.150
Nous n'avons pas ce rôle sur la personne, donc, nous n'obtenons

02:42.150 --> 02:43.930
pas la sortie ici dans la console.

02:43.930 --> 02:47.290
Les identificateurs de chaîne ont donc aussi des inconvénients.

02:47.290 --> 02:50.340
Pour de tels scénarios, il est assez courant en JavaScript

02:50.340 --> 02:52.340
de définir des constantes globales.

02:52.340 --> 02:55.580
Par exemple, admin, qui contient ensuite certaines valeurs comme

02:55.580 --> 02:58.053
des chiffres ou des chaînes de caractères, les deux

02:58.980 --> 03:00.060
étant possibles.

03:00.060 --> 03:01.700
Les nombres, bien sûr, peuvent nous faire

03:01.700 --> 03:04.370
économiser du code et des bits supplémentaires en mémoire.

03:04.370 --> 03:09.370
Et là, nous pourrions avoir ADMIN, READ_ONLY et AUTHOR comme

03:09.390 --> 03:10.870
ceci et là, nous devons

03:10.870 --> 03:13.750
juste utiliser ce rôle.

03:13.750 --> 03:16.460
L'avantage de cette méthode est que nous pouvons l'utiliser partout

03:16.460 --> 03:17.343
dans notre code.

03:18.230 --> 03:22.600
Et donc ici, par exemple, si j'exécute ce code, si je le compile et que je le laisse

03:22.600 --> 03:23.680
se recharger, nous

03:25.260 --> 03:28.570
voyons que l'administrateur ici, donc cela fonctionne

03:28.570 --> 03:31.520
et c'est un modèle commun en JavaScript.

03:31.520 --> 03:34.190
L'inconvénient est qu'à nouveau, le rôle est déduit comme étant

03:34.190 --> 03:37.290
juste un nombre, donc nous pourrions stocker n'importe quel nombre là-dedans,

03:37.290 --> 03:39.630
même un nombre que nous ne supportons pas.

03:39.630 --> 03:42.450
Et en plus, nous devons définir toutes ces constantes,

03:42.450 --> 03:44.060
nous devons les gérer.

03:44.060 --> 03:45.920
C'est là qu'un enum peut nous épargner du travail.

03:45.920 --> 03:48.730
C'est tout à fait normal, mais une énumération rend les choses plus faciles.

03:48.730 --> 03:50.970
Nous créons un enum avec le mot clé enum, nous

03:50.970 --> 03:54.250
pouvons le nommer Role, la convention est de commencer avec

03:54.250 --> 03:55.550
le caractère majuscule

03:55.550 --> 03:58.620
parce que l'enum est aussi un type personnalisé.

03:58.620 --> 04:01.760
Il s'agit de votre premier type personnalisé. Nous allons en écrire beaucoup d'autres

04:01.760 --> 04:03.860
dans ce cours, mais celui-ci est le premier.

04:03.860 --> 04:06.560
Ensuite, après le nom du type que vous voulez attribuer

04:06.560 --> 04:09.520
à cet enum, vous ajoutez des accolades, comme ça, pas

04:09.520 --> 04:14.040
de deux-points, pas de signe égal, juste des accolades après le nom.

04:14.040 --> 04:15.800
Puis un point-virgule.

04:15.800 --> 04:19.433
Et maintenant ici, vous pouvez attribuer vos valeurs

04:20.650 --> 04:21.973
comme admin, read only,

04:22.950 --> 04:24.300
et author.

04:24.300 --> 04:28.180
Et dans les coulisses, celui-ci reçoit le numéro zéro,

04:28.180 --> 04:31.780
celui-là le numéro un, celui-là le numéro deux.

04:31.780 --> 04:34.650
Et puis ici, vous pouvez accéder à Role. ADMIN, comme sur un

04:34.650 --> 04:37.840
objet, vous accédez à votre identifiant.

04:37.840 --> 04:40.380
Et vous pouvez l'utiliser n'importe où ailleurs dans votre

04:40.380 --> 04:43.890
code également, ici nous pouvons vérifier si le rôle est AUTHOR, et ensuite

04:43.890 --> 04:46.710
imprimer l'auteur et bien sûr, nous ne devrions pas voir cela

04:46.710 --> 04:50.630
si je l'exécute maintenant parce que nous avons assigné un rôle de ADMIN ici.

04:50.630 --> 04:53.333
Mais ce qu'il faut retenir, c'est que nous avons fait

04:53.333 --> 04:57.490
tout cela à l'aide de l'enum, qui attribue des étiquettes aux nombres.

04:57.490 --> 04:59.210
Si nous jetons un coup d'oeil à ça en JavaScript.

04:59.210 --> 05:02.830
Donc dans le code compilé, on voit que c'est comme ça qu'il est reconstruit.

05:02.830 --> 05:05.080
A la fin, c'est reconstruit avec un si ici.

05:05.080 --> 05:07.940
Donc fonction qui s'exécute elle-même.

05:07.940 --> 05:11.770
Et Role ici est simplement géré comme un objet à la fin, qui a la propriété

05:11.770 --> 05:14.550
admin, une propriété en lecture seule et la propriété

05:14.550 --> 05:17.330
AUTHOR, où nous stockons nos valeurs numériques

05:17.330 --> 05:19.970
ici, on pourrait dire.

05:19.970 --> 05:21.960
C'est donc un peu plus complexe que cela,

05:21.960 --> 05:24.210
mais c'est ce que TypeScript fait ici pour reproduire

05:24.210 --> 05:26.700
cette construction enum dans le code JavaScript,

05:26.700 --> 05:28.560
lorsqu'il compile le code.

05:28.560 --> 05:30.700
Ici, en tant que développeur, nous avons simplement

05:30.700 --> 05:32.680
ces chiffres créés de manière pratique.

05:32.680 --> 05:34.290
Si vous les survolez, vous verrez

05:34.290 --> 05:36.520
le numéro que nous stockons ici et vous pouvez

05:36.520 --> 05:39.883
utiliser ces numéros ici de manière lisible par l'homme.

05:40.750 --> 05:42.840
Pour les enums, vous n'êtes pas non plus

05:42.840 --> 05:44.790
limité au comportement par défaut.

05:44.790 --> 05:47.470
Supposons que, pour une raison quelconque, vous ne souhaitiez

05:47.470 --> 05:50.533
pas commencer par zéro, vous pouvez ajouter un signe égal après

05:50.533 --> 05:54.080
votre identificateur et entrer n'importe quel autre chiffre. L'administrateur

05:54.080 --> 05:56.610
est alors affecté au chiffre cinq et les autres identificateurs

05:56.610 --> 05:59.610
après l'identificateur où vous affectez la valeur, reprennent

05:59.610 --> 06:04.580
cela et incrémentent simplement cette valeur de départ.

06:04.580 --> 06:08.140
Donc maintenant nous avons bien, six, sept, au lieu de zéro, un, deux.

06:08.140 --> 06:10.642
Bien entendu, vous pouvez également attribuer vos propres

06:10.642 --> 06:14.820
valeurs à tous ces identifiants, si vous avez besoin de vos propres chiffres.

06:14.820 --> 06:17.070
Vous n'êtes pas non plus limité aux nombres, vous

06:17.070 --> 06:19.390
pouvez également utiliser du texte ici, ou même

06:19.390 --> 06:21.950
le mélanger comme je le fais ici, tout peut être utilisé

06:21.950 --> 06:24.900
ici, mais souvent le défaut d'incrémentation des nombres

06:24.900 --> 06:28.530
qui commencent à zéro est ce que vous voulez, mais si vous avez besoin d'un

06:28.530 --> 06:31.530
comportement différent, si vous voulez utiliser une chaîne

06:31.530 --> 06:34.850
ici, puis un nombre ici, et ici un nombre également ou peut-être une

06:34.850 --> 06:37.890
chaîne de nombres, alors vous pouvez absolument le faire, l'avantage

06:37.890 --> 06:40.880
est que vous le définissez ici, et ensuite, vous faites toujours

06:40.880 --> 06:44.700
référence à votre type de rôle à ce type personnalisé que vous avez créé, à cet

06:44.700 --> 06:48.270
enum personnalisé que vous avez créé.

06:48.270 --> 06:50.320
Et vous l'utilisez dans vos vérifications

06:50.320 --> 06:52.970
de type et vos affectations de type, et vous êtes bon.

06:52.970 --> 06:56.090
C'est la puissance de l'enum et c'est une excellente construction

06:56.090 --> 06:59.420
lorsque vous avez besoin d'identifiants qui sont lisibles par l'homme

06:59.420 --> 07:03.173
et qui ont une certaine valeur mappée dans les coulisses.
