WEBVTT

1
00:00:02.190 --> 00:00:05.900
<v Instructor>With all our inheritance work out of the way,</v>

2
00:00:05.900 --> 00:00:08.400
let's come back to rendering list items,

3
00:00:08.400 --> 00:00:10.590
let's render more details there.

4
00:00:10.590 --> 00:00:12.800
And as I mentioned, let's also make sure

5
00:00:12.800 --> 00:00:14.900
we render them differently.

6
00:00:14.900 --> 00:00:18.050
Thus far we followed an object oriented approach,

7
00:00:18.050 --> 00:00:22.440
and for example, for our project list we have a class

8
00:00:22.440 --> 00:00:25.130
and when we instantiate that class such a box

9
00:00:25.130 --> 00:00:26.560
gets rendered here.

10
00:00:26.560 --> 00:00:30.000
And the same for the input, we have a project input class,

11
00:00:30.000 --> 00:00:33.460
and when we instantiate that, this project input area here

12
00:00:33.460 --> 00:00:34.880
at the top gets rendered.

13
00:00:34.880 --> 00:00:38.330
Now why don't we do the same for our project item

14
00:00:38.330 --> 00:00:42.290
and then inside of project list in rendered projects

15
00:00:42.290 --> 00:00:45.030
instead of creating a list item like this,

16
00:00:45.030 --> 00:00:48.290
we would just instantiate our project item class

17
00:00:48.290 --> 00:00:52.230
and in the constructor of that project item class

18
00:00:52.230 --> 00:00:55.100
we would then do all the initialization and so on.

19
00:00:55.100 --> 00:00:57.240
That is my idea at least.

20
00:00:57.240 --> 00:00:59.850
Now as always, you can pause the video here

21
00:00:59.850 --> 00:01:01.680
and try this on your own first,

22
00:01:01.680 --> 00:01:04.610
but after a short break, which I give you to pause

23
00:01:04.610 --> 00:01:06.960
the video if you want to, we'll do it together.

24
00:01:09.080 --> 00:01:12.980
So let's do that together, and for that above the

25
00:01:12.980 --> 00:01:17.940
project list class, I will add the project item class,

26
00:01:17.940 --> 00:01:20.610
and this will be the class responsible for rendering

27
00:01:20.610 --> 00:01:22.920
a single project item.

28
00:01:22.920 --> 00:01:25.620
Now the project item class should always extend

29
00:01:25.620 --> 00:01:28.940
the component, because it will be a class that is

30
00:01:28.940 --> 00:01:31.600
responsible for rendering something on the screen,

31
00:01:31.600 --> 00:01:34.800
and that is what we have our component class for, right,

32
00:01:34.800 --> 00:01:36.410
that is what we build it for.

33
00:01:36.410 --> 00:01:40.100
So that we pass a template, a host element and so on.

34
00:01:40.100 --> 00:01:43.560
So in project item, we of course need a constructor,

35
00:01:43.560 --> 00:01:47.030
a constructor where we then also have to call super.

36
00:01:47.030 --> 00:01:50.650
And actually before we call super, let's set these generic

37
00:01:50.650 --> 00:01:53.610
types for the base class for inheriting.

38
00:01:53.610 --> 00:01:56.440
Keep in mind, the first type we pass in there

39
00:01:56.440 --> 00:02:00.410
is the host element, so where we wanna render something.

40
00:02:00.410 --> 00:02:02.760
The second generic type we pass in,

41
00:02:02.760 --> 00:02:04.800
is the element we do render.

42
00:02:04.800 --> 00:02:07.040
So in the case of the project item,

43
00:02:07.040 --> 00:02:10.550
that means that the first element we pass in is,

44
00:02:10.550 --> 00:02:13.570
since it's the place where we want to render something,

45
00:02:13.570 --> 00:02:15.587
is an HTML U List,

46
00:02:15.587 --> 00:02:17.370
an unordered list,

47
00:02:17.370 --> 00:02:20.440
because every project item will be rendered inside

48
00:02:20.440 --> 00:02:22.550
of our, well unordered list.

49
00:02:22.550 --> 00:02:26.160
And the second element will be a HTML LI Element,

50
00:02:26.160 --> 00:02:29.313
so the concrete list item element which will be created.

51
00:02:30.210 --> 00:02:35.210
Now choose super, we need to provide the Id of the element

52
00:02:35.280 --> 00:02:38.210
where the project item should be rendered in.

53
00:02:38.210 --> 00:02:41.410
And of course that Id

54
00:02:41.410 --> 00:02:43.030
is not fixed,

55
00:02:43.030 --> 00:02:45.040
because we have two lists

56
00:02:45.040 --> 00:02:47.480
where the item could be rendered to.

57
00:02:47.480 --> 00:02:51.760
So I expect to get that Id here in the constructor,

58
00:02:51.760 --> 00:02:55.400
there I wanna get the host Id,

59
00:02:55.400 --> 00:02:56.233
let's say,

60
00:02:56.233 --> 00:02:59.140
which should be a string, we can forward that to super.

61
00:02:59.140 --> 00:03:02.220
However the first thing we forward to super,

62
00:03:02.220 --> 00:03:05.520
is the template Id, for a single list item,

63
00:03:05.520 --> 00:03:07.410
and that is this template here.

64
00:03:07.410 --> 00:03:09.620
So we can just wrap that.

65
00:03:09.620 --> 00:03:11.580
Now of course that's a very simple template,

66
00:03:11.580 --> 00:03:13.580
you could argue whether you really need that,

67
00:03:13.580 --> 00:03:16.380
it's just a list item, we could create that in code

68
00:03:16.380 --> 00:03:18.920
with document create element as well,

69
00:03:18.920 --> 00:03:22.560
but in order to be able to reuse our component base clause

70
00:03:22.560 --> 00:03:26.240
which relies on templates, we will use this approach.

71
00:03:26.240 --> 00:03:29.680
So single project is the template Id, host Id,

72
00:03:29.680 --> 00:03:32.550
then it's the Id I wanna forward to the

73
00:03:32.550 --> 00:03:34.500
base clause constructor.

74
00:03:34.500 --> 00:03:37.150
Then to answer the question, whether this should be

75
00:03:37.150 --> 00:03:40.010
rendered at the beginning or at the end.

76
00:03:40.010 --> 00:03:43.020
Well, every new list item should actually be added to the

77
00:03:43.020 --> 00:03:45.630
end of the list, though that is totally up to you,

78
00:03:45.630 --> 00:03:48.450
you can also add it to the beginning if you want to,

79
00:03:48.450 --> 00:03:51.150
but here I'll go with the end and therefore

80
00:03:51.150 --> 00:03:53.423
I will pass false here.

81
00:03:54.410 --> 00:03:57.153
And then for the new element Id,

82
00:03:57.153 --> 00:03:59.330
sell the Id that should be assigned to the

83
00:03:59.330 --> 00:04:01.580
newly created element.

84
00:04:01.580 --> 00:04:03.760
I expect to get that from outside as well,

85
00:04:03.760 --> 00:04:06.860
because that will also differ for every project item,

86
00:04:06.860 --> 00:04:09.860
we will render multiple such items after all.

87
00:04:09.860 --> 00:04:12.240
So here I expect to get the Id which it all

88
00:04:12.240 --> 00:04:15.060
to be a string, in which I then just forward.

89
00:04:15.060 --> 00:04:17.820
So that's now the constructor.

90
00:04:17.820 --> 00:04:22.250
Now it would all make sense to store the project

91
00:04:23.500 --> 00:04:26.080
that belongs to this project item in this

92
00:04:26.080 --> 00:04:27.280
project item class.

93
00:04:27.280 --> 00:04:31.020
And with project I mean the project based on our

94
00:04:31.020 --> 00:04:33.770
project class, which we created up there.

95
00:04:33.770 --> 00:04:37.490
This is basically what we work with, the data we work with.

96
00:04:37.490 --> 00:04:40.440
And I wanna store the project which belongs to this

97
00:04:40.440 --> 00:04:44.000
rendered project item in that project item class.

98
00:04:44.000 --> 00:04:47.650
So therefore here we can add a private property project

99
00:04:47.650 --> 00:04:51.510
for example, but should be of type project like this.

100
00:04:51.510 --> 00:04:55.350
In the constructor we then do get the Id

101
00:04:55.350 --> 00:04:58.090
and we can simply change this to actually

102
00:04:58.090 --> 00:05:00.950
get the project here like this,

103
00:05:00.950 --> 00:05:04.340
and then simply say this project equal project,

104
00:05:04.340 --> 00:05:07.360
and here since every project has a Id property,

105
00:05:07.360 --> 00:05:09.440
we just forward project.id.

106
00:05:09.440 --> 00:05:12.330
I think that set-up makes a bit more sense.

107
00:05:12.330 --> 00:05:14.710
Now we always need to add a couple of methods,

108
00:05:14.710 --> 00:05:17.760
we need to add a configure method of course.

109
00:05:17.760 --> 00:05:22.300
We need to add render content method, that is required

110
00:05:22.300 --> 00:05:25.040
by our base class which we're extending.

111
00:05:25.040 --> 00:05:29.850
And it always call configure and render content here

112
00:05:29.850 --> 00:05:32.000
at the end of the constructor.

113
00:05:32.000 --> 00:05:34.890
Now regarding the configuration, there is nothing

114
00:05:34.890 --> 00:05:37.730
we need to do right now for the content we wanna render,

115
00:05:37.730 --> 00:05:40.050
there definitely is work to do.

116
00:05:40.050 --> 00:05:42.710
Now we have a very simple template here,

117
00:05:42.710 --> 00:05:44.520
and we could actually change this here

118
00:05:44.520 --> 00:05:47.650
in the index HTML file to be a bit more complex,

119
00:05:47.650 --> 00:05:50.850
so that every project has a h2 tag,

120
00:05:50.850 --> 00:05:54.250
has a h3 tag below that let's say,

121
00:05:54.250 --> 00:05:56.740
and also has a paragraph,

122
00:05:56.740 --> 00:05:59.170
so that we can output the title of the project,

123
00:05:59.170 --> 00:06:01.360
the number of persons assigned maybe,

124
00:06:01.360 --> 00:06:03.290
and then the description.

125
00:06:03.290 --> 00:06:05.720
And then here in app ts in render of content,

126
00:06:05.720 --> 00:06:09.050
we just need to reach out to these different elements

127
00:06:09.050 --> 00:06:10.130
in our element,

128
00:06:10.130 --> 00:06:12.090
so to the h2 tag and so on,

129
00:06:12.090 --> 00:06:14.440
and then insert some content.

130
00:06:14.440 --> 00:06:17.300
So there we can reach out to this element,

131
00:06:17.300 --> 00:06:19.360
which is our rendered element,

132
00:06:19.360 --> 00:06:21.750
so which is our rendered LI Element.

133
00:06:21.750 --> 00:06:24.970
And in there we now need to select these different things.

134
00:06:24.970 --> 00:06:27.270
So we can use query selector h2,

135
00:06:27.270 --> 00:06:28.930
and set the text content here.

136
00:06:28.930 --> 00:06:33.930
Let's say to this.project.title to render the title there.

137
00:06:34.350 --> 00:06:36.470
Of course we should add an exclamation mark here to

138
00:06:36.470 --> 00:06:39.010
make it clear that we'll always get this element

139
00:06:39.010 --> 00:06:40.700
which we know with certainty

140
00:06:40.700 --> 00:06:42.563
because it's part of our template.

141
00:06:43.980 --> 00:06:46.870
Well then actually, we can just repeat this,

142
00:06:46.870 --> 00:06:49.170
but now look for the h3 tag,

143
00:06:49.170 --> 00:06:52.990
and there I wanna output the number of persons,

144
00:06:52.990 --> 00:06:55.690
however where people is the property name,

145
00:06:55.690 --> 00:06:58.030
however I'll tweak this a little bit.

146
00:06:58.030 --> 00:07:00.300
Now for one this here, is a number,

147
00:07:00.300 --> 00:07:01.690
and this one's a string,

148
00:07:01.690 --> 00:07:04.110
so actually I'll call to string here.

149
00:07:04.110 --> 00:07:06.900
But that's not the main problem, actually I wanna tweak

150
00:07:06.900 --> 00:07:11.160
this so that it outputs more than just a number here,

151
00:07:11.160 --> 00:07:12.590
but I'll come back to that.

152
00:07:14.960 --> 00:07:17.260
First of all, let's repeat this one more time,

153
00:07:17.260 --> 00:07:19.600
and query for the paragraph here.

154
00:07:19.600 --> 00:07:22.623
And set this equal to this project.description.

155
00:07:23.810 --> 00:07:25.810
Now, again I will tweak this later,

156
00:07:25.810 --> 00:07:27.140
for now let's leave it as it is.

157
00:07:27.140 --> 00:07:28.870
And with that we have a project item

158
00:07:28.870 --> 00:07:29.880
that should be rendered,

159
00:07:29.880 --> 00:07:33.470
and that should then set out all it's content.

160
00:07:33.470 --> 00:07:35.460
So now we need to use the project item,

161
00:07:35.460 --> 00:07:37.880
and the place to use it is the project list,

162
00:07:37.880 --> 00:07:40.450
because that renders the list of projects.

163
00:07:40.450 --> 00:07:44.150
And there specifically in render projects,

164
00:07:44.150 --> 00:07:46.630
this is where we need to make sure that we render

165
00:07:46.630 --> 00:07:48.260
our project items.

166
00:07:48.260 --> 00:07:51.140
Here we do go through all the project items

167
00:07:51.140 --> 00:07:52.860
in assigned projects.

168
00:07:52.860 --> 00:07:55.870
And assigned projects is this property here,

169
00:07:55.870 --> 00:07:58.960
which has a list of or an array of projects.

170
00:07:58.960 --> 00:08:02.330
So now here in this loop, instead of creating

171
00:08:02.330 --> 00:08:04.720
a list item manually and so on,

172
00:08:04.720 --> 00:08:08.270
I will get rid of all of that and simply say

173
00:08:08.270 --> 00:08:11.870
new project item here,

174
00:08:11.870 --> 00:08:13.740
and now two project item.

175
00:08:13.740 --> 00:08:16.110
We need to pass the idea of the host,

176
00:08:16.110 --> 00:08:21.090
now that of course is the Id that was sat on our

177
00:08:21.090 --> 00:08:22.730
list item here.

178
00:08:22.730 --> 00:08:25.990
So basically this.element.id,

179
00:08:25.990 --> 00:08:27.800
that's the Id of the host element,

180
00:08:27.800 --> 00:08:29.980
because this element which is is the unordered list

181
00:08:29.980 --> 00:08:31.670
should be the host.

182
00:08:31.670 --> 00:08:34.210
Then second argument here,

183
00:08:34.210 --> 00:08:37.400
is the project and that's purged item here basically.

184
00:08:37.400 --> 00:08:40.950
So this constant which we get inside of the loop.

185
00:08:40.950 --> 00:08:42.790
And now the attachment will happen

186
00:08:42.790 --> 00:08:46.530
inside of project item or inside of the base clause

187
00:08:46.530 --> 00:08:49.770
of the component class, which project items extends.

188
00:08:49.770 --> 00:08:53.570
And instantiating project item should be all we need to do.

189
00:08:53.570 --> 00:08:58.380
So if we save that and we go back and we have this

190
00:08:58.380 --> 00:09:00.890
code here again, or we have this input again.

191
00:09:00.890 --> 00:09:04.140
You see, this gets rendered, and this doesn't look too bad.

192
00:09:04.140 --> 00:09:06.320
Now there are two things which I don't like,

193
00:09:06.320 --> 00:09:10.220
of course that bullet point here, not too fond of that.

194
00:09:10.220 --> 00:09:12.710
And just having the free here,

195
00:09:12.710 --> 00:09:15.590
all is not super happy about this.

196
00:09:15.590 --> 00:09:17.293
So how can we fix this now?

197
00:09:18.730 --> 00:09:21.380
To fix the bullet point, let's inspect our content.

198
00:09:21.380 --> 00:09:24.110
And what we see there is that the list item actually

199
00:09:24.110 --> 00:09:28.060
is rendered outside of the unordered list.

200
00:09:28.060 --> 00:09:29.600
So it's not inside of it.

201
00:09:29.600 --> 00:09:32.710
If it were inside, then it would work properly,

202
00:09:32.710 --> 00:09:35.530
but I can't drag it there.

203
00:09:35.530 --> 00:09:38.050
So we need to make sure it gets rendered inside

204
00:09:38.050 --> 00:09:39.000
of the unordered list.

205
00:09:39.000 --> 00:09:41.363
So let's find out why that's not the case.

206
00:09:42.220 --> 00:09:46.710
It's probably not the case because in project item,

207
00:09:46.710 --> 00:09:50.430
I pass false here, to the base clause constructor,

208
00:09:50.430 --> 00:09:53.660
and passing false here means it's not getting inserted

209
00:09:53.660 --> 00:09:57.640
at the start, and that in turn means that in attach

210
00:09:57.640 --> 00:10:00.590
we have before and as a value here,

211
00:10:00.590 --> 00:10:02.670
where it's getting inserted.

212
00:10:02.670 --> 00:10:05.660
This is however what we want to have happen,

213
00:10:05.660 --> 00:10:08.360
so that's probably not the problem.

214
00:10:08.360 --> 00:10:12.420
Well, the problem still is that of course we're

215
00:10:12.420 --> 00:10:14.970
inserting it in the host element.

216
00:10:14.970 --> 00:10:17.650
And now let's think again, what's the host element

217
00:10:17.650 --> 00:10:19.460
of project list?

218
00:10:19.460 --> 00:10:20.900
And that's in the end what matters here,

219
00:10:20.900 --> 00:10:23.850
because when we render our projects,

220
00:10:23.850 --> 00:10:25.620
we create a new project item,

221
00:10:25.620 --> 00:10:29.680
and I forward the Id of our element here,

222
00:10:29.680 --> 00:10:31.240
of the rendered element

223
00:10:31.240 --> 00:10:34.180
in the project list to project item.

224
00:10:34.180 --> 00:10:36.670
So that will then be the idea of the host element

225
00:10:36.670 --> 00:10:38.120
of a single project item.

226
00:10:38.120 --> 00:10:40.720
But what is this element here?

227
00:10:40.720 --> 00:10:43.770
This element here is not the unordered list

228
00:10:43.770 --> 00:10:44.900
we have in that box,

229
00:10:44.900 --> 00:10:47.350
it's the box itself it's our section.

230
00:10:47.350 --> 00:10:50.260
If we inspect the template we see, the section here

231
00:10:50.260 --> 00:10:53.810
is what actually gets rendered for our project list class.

232
00:10:53.810 --> 00:10:55.500
It's not just the list,

233
00:10:55.500 --> 00:10:58.300
it's the section which also includes a header.

234
00:10:58.300 --> 00:11:00.320
So we actually need to access to the list

235
00:11:00.320 --> 00:11:02.020
inside of our element here,

236
00:11:02.020 --> 00:11:05.070
and then get access to the idea of that list,

237
00:11:05.070 --> 00:11:08.710
because here, we do actually set an Id on that list,

238
00:11:08.710 --> 00:11:10.750
so there will be an Id, we just have to

239
00:11:10.750 --> 00:11:12.230
grab the right one.

240
00:11:12.230 --> 00:11:14.880
So getting the idea of the element itself

241
00:11:14.880 --> 00:11:16.790
is simply not correct.

242
00:11:16.790 --> 00:11:20.580
Instead here, we should get the idea

243
00:11:20.580 --> 00:11:23.580
of the unordered list in our element,

244
00:11:23.580 --> 00:11:25.310
and we know with certainty that there will be

245
00:11:25.310 --> 00:11:26.350
an unordered list,

246
00:11:26.350 --> 00:11:28.460
so we can skip the null check

247
00:11:28.460 --> 00:11:30.063
by adding the exclamation mark.

248
00:11:30.930 --> 00:11:34.463
Now with that added, if we add a new element here,

249
00:11:35.490 --> 00:11:37.680
this looks better, now the bullet point is gone,

250
00:11:37.680 --> 00:11:39.920
because now the proper styling is applied,

251
00:11:39.920 --> 00:11:43.100
since the LI, the list item is now really added

252
00:11:43.100 --> 00:11:46.320
inside of the unordered list as you can see.

253
00:11:46.320 --> 00:11:49.390
Now that's one thing, now let's move on to that five,

254
00:11:49.390 --> 00:11:51.180
because just out putting a five here

255
00:11:51.180 --> 00:11:52.990
is not really what I wanna do.

256
00:11:52.990 --> 00:11:56.143
How about outputting a bit more useful information.

