WEBVTT

00:02.190 --> 00:05.900
Instruktor: Mając już za sobą całą naszą pracę z dziedziczeniem,

00:05.900 --> 00:08.400
wróćmy do renderowania elementów listy, wyrenderujmy

00:08.400 --> 00:10.590
tam więcej szczegółów.

00:10.590 --> 00:12.800
I jak już wspomniałem, zadbajmy też

00:12.800 --> 00:14.900
o to, by renderować je inaczej.

00:14.900 --> 00:18.050
Do tej pory stosowaliśmy podejście obiektowe

00:18.050 --> 00:22.440
i np. dla naszej listy projektów mamy klasę i gdy instancjonujemy

00:22.440 --> 00:25.130
tę klasę to tutaj renderuje się takie

00:25.130 --> 00:26.560
pudełko.

00:26.560 --> 00:30.000
Podobnie jest z danymi wejściowymi, mamy klasę wejściową projektu,

00:30.000 --> 00:33.460
a kiedy ją utworzymy, obszar wejściowy projektu na górze zostanie

00:33.460 --> 00:34.880
wyrenderowany.

00:34.880 --> 00:38.330
Teraz dlaczego nie zrobimy tego samego dla naszego elementu

00:38.330 --> 00:42.290
projektu, a następnie wewnątrz listy projektów w renderowanych

00:42.290 --> 00:45.030
projektach zamiast tworzyć element listy w ten

00:45.030 --> 00:48.290
sposób, po prostu zainicjujemy naszą klasę elementu

00:48.290 --> 00:52.230
projektu i w konstruktorze tej klasy elementu projektu wykonamy

00:52.230 --> 00:55.100
wszystkie inicjalizacje i tak dalej.

00:55.100 --> 00:57.240
Taki jest przynajmniej mój pomysł.

00:57.240 --> 00:59.850
Teraz jak zawsze, możesz wstrzymać tutaj wideo i spróbować

00:59.850 --> 01:01.680
tego na własną rękę najpierw, ale po

01:01.680 --> 01:04.610
krótkiej przerwie, którą daję Ci na wstrzymanie wideo,

01:04.610 --> 01:06.960
jeśli chcesz, zrobimy to razem.

01:09.080 --> 01:12.980
Zróbmy więc to razem, a do tego nad klasą project

01:12.980 --> 01:17.940
list dodam klasę project item, a ta będzie klasą odpowiedzialną

01:17.940 --> 01:20.610
za renderowanie pojedynczego elementu

01:20.610 --> 01:22.920
projektu.

01:22.920 --> 01:25.620
Teraz klasa elementu projektu powinna zawsze

01:25.620 --> 01:28.940
rozszerzać komponent, ponieważ będzie to klasa odpowiedzialna

01:28.940 --> 01:31.600
za renderowanie czegoś na ekranie, a po to

01:31.600 --> 01:36.410
mamy naszą klasę komponentu, prawda, po to ją budujemy.

01:36.410 --> 01:40.100
Tak, że przekazujemy szablon, element hosta i tak dalej.

01:40.100 --> 01:43.560
Więc w projekcie item, oczywiście potrzebujemy konstruktora, konstruktora,

01:43.560 --> 01:47.030
w którym następnie musimy również wywołać super.

01:47.030 --> 01:50.650
I właściwie zanim wywołamy super, ustawmy te typy generyczne

01:50.650 --> 01:53.610
dla klasy bazowej do dziedziczenia.

01:53.610 --> 01:56.440
Pamiętajcie, że pierwszym typem, który tam przekazujemy

01:56.440 --> 02:00.410
jest element hosta, czyli miejsce, w którym chcemy coś wyrenderować.

02:00.410 --> 02:02.760
Drugi typ generyczny, który przekazujemy,

02:02.760 --> 02:04.800
to element, który robimy render.

02:04.800 --> 02:07.040
W przypadku elementu projektu oznacza

02:07.040 --> 02:10.550
to, że pierwszym elementem, który przekazujemy, ponieważ

02:10.550 --> 02:13.570
jest to miejsce, w którym chcemy coś wyrenderować,

02:13.570 --> 02:15.587
jest lista HTML U, lista nieuporządkowana,

02:15.587 --> 02:17.370
ponieważ każdy element projektu

02:17.370 --> 02:20.440
będzie renderowany wewnątrz naszej, no cóż, nieuporządkowanej

02:20.440 --> 02:22.550
listy.

02:22.550 --> 02:26.160
A drugim elementem będzie HTML LI Element, a więc konkretny

02:26.160 --> 02:29.313
element listy, który zostanie utworzony.

02:30.210 --> 02:35.210
Teraz wybierz super, musimy podać Id elementu, w którym ma być

02:35.280 --> 02:38.210
renderowany element projektu.

02:38.210 --> 02:41.410
I oczywiście to Id nie jest stałe, bo

02:41.410 --> 02:43.030
mamy dwie listy, do

02:43.030 --> 02:45.040
których można było wyrenderować

02:45.040 --> 02:47.480
element.

02:47.480 --> 02:51.760
Więc spodziewam się uzyskać to Id tutaj w konstruktorze,

02:51.760 --> 02:55.400
tam chcę uzyskać Id hosta, powiedzmy, który powinien

02:55.400 --> 02:56.233
być ciągiem,

02:56.233 --> 02:59.140
możemy przekazać to do super.

02:59.140 --> 03:02.220
Jednak pierwszą rzeczą, którą musimy zrobić, jest

03:02.220 --> 03:05.520
szablon Id dla pojedynczego elementu listy, a jest

03:05.520 --> 03:07.410
nim ten szablon tutaj.

03:07.410 --> 03:09.620
Więc możemy to po prostu zawinąć.

03:09.620 --> 03:11.580
Teraz oczywiście jest to bardzo prosty szablon,

03:11.580 --> 03:13.580
można by się spierać, czy naprawdę tego potrzebujemy,

03:13.580 --> 03:16.380
to tylko element listy, równie dobrze moglibyśmy go stworzyć

03:16.380 --> 03:18.920
w kodzie za pomocą elementu document create, ale aby

03:18.920 --> 03:22.560
móc ponownie wykorzystać naszą klauzulę bazy komponentów, która opiera

03:22.560 --> 03:26.240
się na szablonach, użyjemy tego podejścia.

03:26.240 --> 03:29.680
Więc pojedynczy projekt to szablon Id, host Id, następnie

03:29.680 --> 03:32.550
jest to Id, które chcę przekazać do konstruktora

03:32.550 --> 03:34.500
klauzuli bazowej.

03:34.500 --> 03:37.150
Następnie, aby odpowiedzieć na pytanie, czy

03:37.150 --> 03:40.010
powinno to być oddane na początku, czy na końcu.

03:40.010 --> 03:43.020
Cóż, każdy nowy element listy powinien być faktycznie

03:43.020 --> 03:45.630
dodany do końca listy, chociaż jest to całkowicie

03:45.630 --> 03:48.450
zależne od ciebie, możesz również dodać go do początku,

03:48.450 --> 03:51.150
jeśli chcesz, ale tutaj pójdę z końcem i dlatego

03:51.150 --> 03:53.423
przejdę false tutaj.

03:54.410 --> 03:57.153
A następnie dla nowego elementu Id, sprzedaj

03:57.153 --> 03:59.330
Id, które powinno być przypisane

03:59.330 --> 04:01.580
do nowo utworzonego elementu.

04:01.580 --> 04:03.760
Spodziewam się, że dostaniemy to również z

04:03.760 --> 04:06.860
zewnątrz, bo to też będzie różne dla każdej pozycji projektu,

04:06.860 --> 04:09.860
będziemy renderować wiele takich pozycji przecież.

04:09.860 --> 04:12.240
Więc tutaj spodziewam się uzyskać Id, które to wszystko

04:12.240 --> 04:15.060
ma być ciągiem, w którym następnie po prostu przekazuję.

04:15.060 --> 04:17.820
Więc to jest teraz konstruktor.

04:17.820 --> 04:22.250
Teraz wszystko miałoby sens, aby przechowywać projekt, który należy

04:23.500 --> 04:26.080
do tego elementu projektu, w tej klasie elementu

04:26.080 --> 04:27.280
projektu.

04:27.280 --> 04:31.020
A z projektem mam na myśli projekt oparty na naszej klasie projektowej,

04:31.020 --> 04:33.770
którą stworzyliśmy tam na górze.

04:33.770 --> 04:37.490
To jest w zasadzie to, na czym pracujemy, dane, z którymi pracujemy.

04:37.490 --> 04:40.440
I chcę przechowywać projekt, który należy do tego wyrenderowanego

04:40.440 --> 04:44.000
elementu projektu w tej klasie elementu projektu.

04:44.000 --> 04:47.650
W związku z tym tutaj możemy dodać np. projekt nieruchomości

04:47.650 --> 04:51.510
prywatnej, ale powinien być typu projekt tak.

04:51.510 --> 04:55.350
W konstruktorze otrzymujemy Id i możemy po prostu zmienić to, aby

04:55.350 --> 04:58.090
faktycznie otrzymać projekt, a następnie po

04:58.090 --> 05:00.950
prostu powiedzieć, że ten projekt jest równy projektowi,

05:00.950 --> 05:04.340
a tutaj, ponieważ każdy projekt ma właściwość Id, po prostu

05:04.340 --> 05:09.440
przekazujemy projekt.

05:09.440 --> 05:09.440
id.

05:09.440 --> 05:12.330
Myślę, że takie zestawienie ma trochę więcej sensu.

05:12.330 --> 05:14.710
Teraz zawsze musimy dodać kilka metod,

05:14.710 --> 05:17.760
musimy oczywiście dodać metodę configure.

05:17.760 --> 05:22.300
Musimy dodać metodę render content, która jest wymagana przez naszą

05:22.300 --> 05:25.040
klasę bazową, którą rozszerzamy.

05:25.040 --> 05:29.850
I zawsze wywołuje configure i render content tutaj na

05:29.850 --> 05:32.000
końcu konstruktora.

05:32.000 --> 05:34.890
Teraz odnośnie konfiguracji, nie musimy nic robić

05:34.890 --> 05:37.730
w tej chwili dla treści, którą chcemy renderować,

05:37.730 --> 05:40.050
na pewno jest praca do wykonania.

05:40.050 --> 05:42.710
Mamy tu bardzo prosty szablon, który

05:42.710 --> 05:44.520
moglibyśmy zmienić w pliku

05:44.520 --> 05:47.650
HTML indeksu, aby był nieco bardziej złożony,

05:47.650 --> 05:50.850
tak aby każdy projekt miał znacznik h2,

05:50.850 --> 05:54.250
poniżej niego znacznik h3, a także paragraf,

05:54.250 --> 05:59.170
tak abyśmy mogli podać tytuł projektu, liczbę przydzielonych

05:59.170 --> 06:03.290
osób, a następnie opis.

06:03.290 --> 06:05.720
I wtedy tutaj w app ts w renderowaniu treści,

06:05.720 --> 06:09.050
musimy po prostu sięgnąć do tych różnych elementów w naszym

06:09.050 --> 06:10.130
elemencie, czyli

06:10.130 --> 06:12.090
do tagu h2 i tak dalej, a następnie

06:12.090 --> 06:14.440
wstawić jakąś treść.

06:14.440 --> 06:17.300
Więc tam możemy sięgnąć do tego elementu, który jest naszym

06:17.300 --> 06:19.360
elementem renderowanym, więc który jest

06:19.360 --> 06:21.750
naszym elementem renderowanym LI Element.

06:21.750 --> 06:24.970
I tam teraz musimy wybrać te różne rzeczy.

06:24.970 --> 06:27.270
Możemy więc użyć selektora zapytania h2,

06:27.270 --> 06:28.930
i ustawić tutaj treść tekstu.

06:28.930 --> 06:33.930
Powiedzmy, że do tego. projekt. tytuł, aby wyrenderować tam tytuł.

06:34.350 --> 06:36.470
Oczywiście powinniśmy dodać tutaj wykrzyknik,

06:36.470 --> 06:39.010
aby dać do zrozumienia, że zawsze otrzymamy ten element,

06:39.010 --> 06:40.700
który znamy z całą pewnością, ponieważ

06:40.700 --> 06:42.563
jest on częścią naszego szablonu.

06:43.980 --> 06:46.870
No to właściwie możemy to powtórzyć,

06:46.870 --> 06:49.170
ale teraz poszukaj tagu h3 i tam

06:49.170 --> 06:52.990
chcę wyprowadzić liczbę osób, jednak gdzie osoby

06:52.990 --> 06:55.690
to nazwa właściwości, jednak trochę

06:55.690 --> 06:58.030
to podrasuję.

06:58.030 --> 07:00.300
Teraz dla jednego to tutaj, jest liczbą,

07:00.300 --> 07:01.690
a ten jest ciągiem, więc

07:01.690 --> 07:04.110
faktycznie wywołam tutaj string.

07:04.110 --> 07:06.900
Ale to nie jest główny problem, właściwie chciałbym

07:06.900 --> 07:11.160
to podrasować tak, aby wyprowadzało więcej niż tylko liczbę tutaj, ale

07:11.160 --> 07:12.590
wrócę do tego.

07:14.960 --> 07:17.260
Przede wszystkim powtórzmy to jeszcze

07:17.260 --> 07:19.600
raz, a zapytanie o akapit tutaj.

07:19.600 --> 07:22.623
I ustawić to równe temu projektowi. opis.

07:23.810 --> 07:25.810
Teraz znowu będę to podrasowywał później, na razie

07:25.810 --> 07:27.140
zostawmy to tak jak jest.

07:27.140 --> 07:28.870
I w ten sposób mamy element projektu,

07:28.870 --> 07:29.880
który powinien być wyrenderowany,

07:29.880 --> 07:33.470
a następnie powinien ustawić całą swoją zawartość.

07:33.470 --> 07:35.460
Więc teraz musimy użyć elementu projektu,

07:35.460 --> 07:37.880
a miejscem, w którym go użyjemy, jest lista projektów,

07:37.880 --> 07:40.450
ponieważ to renderuje listę projektów.

07:40.450 --> 07:44.150
I tam konkretnie w render projects, to jest miejsce, gdzie

07:44.150 --> 07:46.630
musimy się upewnić, że renderujemy nasze

07:46.630 --> 07:48.260
elementy projektu.

07:48.260 --> 07:51.140
Tutaj przechodzimy przez wszystkie pozycje projektu

07:51.140 --> 07:52.860
w przypisanych projektach.

07:52.860 --> 07:55.870
A przypisane projekty to ta właściwość tutaj,

07:55.870 --> 07:58.960
która ma listę lub tablicę projektów.

07:58.960 --> 08:02.330
Więc teraz tutaj w tej pętli, zamiast tworzyć

08:02.330 --> 08:04.720
ręcznie element listy i tak dalej,

08:04.720 --> 08:08.270
pozbędę się tego wszystkiego i po prostu powiem

08:08.270 --> 08:11.870
nowy element projektu tutaj, a teraz dwa elementy

08:11.870 --> 08:13.740
projektu.

08:13.740 --> 08:16.110
Musimy przekazać ideę hosta,

08:16.110 --> 08:21.090
teraz to oczywiście Id, które siedziało na naszym elemencie

08:21.090 --> 08:22.730
listy tutaj.

08:22.730 --> 08:25.990
Więc w zasadzie to. element. id, to jest Id elementu

08:25.990 --> 08:27.800
hosta, ponieważ ten element,

08:27.800 --> 08:29.980
który jest listą nieuporządkowaną,

08:29.980 --> 08:31.670
powinien być hostem.

08:31.670 --> 08:34.210
Następnie drugi argument tutaj, to jest projekt

08:34.210 --> 08:37.400
i to jest oczyszczona pozycja tutaj w zasadzie.

08:37.400 --> 08:40.950
Więc ta stała, którą otrzymujemy wewnątrz pętli.

08:40.950 --> 08:42.790
Teraz dołączenie nastąpi wewnątrz

08:42.790 --> 08:46.530
elementu projektu lub wewnątrz klauzuli bazowej klasy komponentu,

08:46.530 --> 08:49.770
którą rozszerza element projektu.

08:49.770 --> 08:53.570
I instantiating project item powinien być wszystkim, co musimy zrobić.

08:53.570 --> 08:58.380
Więc jeśli zapiszemy to i wrócimy i mamy ten kod tutaj ponownie,

08:58.380 --> 09:00.890
lub mamy to wejście ponownie.

09:00.890 --> 09:04.140
Widzisz, to się renderuje, a to nie wygląda źle.

09:04.140 --> 09:06.320
Teraz są dwie rzeczy, które mi się nie podobają,

09:06.320 --> 09:10.220
oczywiście ten wypunktowany punkt tutaj, nie za bardzo mi się podoba.

09:10.220 --> 09:12.710
I właśnie mając wolne tutaj, wszyscy

09:12.710 --> 09:15.590
nie są super szczęśliwi z tego powodu.

09:15.590 --> 09:17.293
Jak więc możemy to teraz naprawić?

09:18.730 --> 09:21.380
Aby naprawić wypunktowanie, skontrolujmy naszą zawartość.

09:21.380 --> 09:24.110
Widzimy, że element listy jest

09:24.110 --> 09:28.060
renderowany poza listą nieuporządkowaną.

09:28.060 --> 09:29.600
Więc to nie jest w środku.

09:29.600 --> 09:32.710
Gdyby to było w środku, wtedy działałoby poprawnie,

09:32.710 --> 09:35.530
ale nie mogę go tam przeciągnąć.

09:35.530 --> 09:38.050
Musimy więc upewnić się, że zostanie on wyrenderowany wewnątrz listy

09:38.050 --> 09:39.000
nieuporządkowanej.

09:39.000 --> 09:41.363
Dowiedzmy się więc, dlaczego tak nie jest.

09:42.220 --> 09:46.710
Prawdopodobnie nie jest tak, ponieważ w project item, przekazuję

09:46.710 --> 09:50.430
false tutaj, do konstruktora klauzuli bazowej, a

09:50.430 --> 09:53.660
przekazanie false tutaj oznacza, że nie jest

09:53.660 --> 09:57.640
wstawiany na początku, a to z kolei oznacza, że w attach

09:57.640 --> 10:00.590
mamy before i jako wartość tutaj, gdzie jest

10:00.590 --> 10:02.670
wstawiany.

10:02.670 --> 10:05.660
To jest jednak to, co chcemy mieć, aby się stało,

10:05.660 --> 10:08.360
więc prawdopodobnie nie jest to problem.

10:08.360 --> 10:12.420
No właśnie, problem nadal polega na tym, że oczywiście

10:12.420 --> 10:14.970
wstawiamy go do elementu hosta.

10:14.970 --> 10:17.650
A teraz zastanówmy się jeszcze raz, co jest elementem

10:17.650 --> 10:19.460
gospodarza listy projektów?

10:19.460 --> 10:20.900
I to w końcu ma tutaj znaczenie,

10:20.900 --> 10:23.850
bo kiedy renderujemy nasze projekty, tworzymy

10:23.850 --> 10:25.620
nowy element projektu, a ja

10:25.620 --> 10:31.240
przekazuję Id naszego elementu tutaj, wyrenderowanego elementu na liście projektów

10:31.240 --> 10:34.180
do elementu projektu.

10:34.180 --> 10:36.670
Więc to będzie wtedy idea elementu gospodarza pojedynczego

10:36.670 --> 10:38.120
elementu projektu.

10:38.120 --> 10:40.720
Ale czym jest ten element tutaj?

10:40.720 --> 10:43.770
Ten element tutaj to nie jest lista nieuporządkowana,

10:43.770 --> 10:44.900
którą mamy w tym pudełku,

10:44.900 --> 10:47.350
to samo pudełko to nasza sekcja.

10:47.350 --> 10:50.260
Jeśli sprawdzimy szablon, zobaczymy, że sekcja tutaj jest tym,

10:50.260 --> 10:53.810
co faktycznie zostanie wyrenderowane dla naszej klasy listy projektów.

10:53.810 --> 10:55.500
To nie jest tylko lista, to

10:55.500 --> 10:58.300
sekcja, która zawiera również nagłówek.

10:58.300 --> 11:00.320
Więc faktycznie musimy uzyskać dostęp

11:00.320 --> 11:02.020
do listy wewnątrz naszego elementu

11:02.020 --> 11:05.070
tutaj, a następnie uzyskać dostęp do idei tej listy,

11:05.070 --> 11:08.710
ponieważ tutaj, faktycznie ustawiamy Id na tej liście, więc

11:08.710 --> 11:12.230
będzie Id, musimy tylko złapać właściwy.

11:12.230 --> 11:14.880
Tak więc wpadanie na pomysł samego elementu

11:14.880 --> 11:16.790
jest po prostu niepoprawne.

11:16.790 --> 11:20.580
Zamiast tego tutaj powinniśmy uzyskać ideę listy nieuporządkowanej

11:20.580 --> 11:23.580
w naszym elemencie i wiemy z pewnością, że będzie

11:23.580 --> 11:26.350
lista nieuporządkowana, więc możemy pominąć

11:26.350 --> 11:30.063
sprawdzanie null, dodając wykrzyknik.

11:30.930 --> 11:34.463
Teraz z tym dodanym elementem, jeśli dodamy nowy element tutaj, wygląda

11:35.490 --> 11:37.680
to lepiej, teraz punkt kulisty zniknął, ponieważ

11:37.680 --> 11:39.920
teraz zastosowano odpowiednią stylizację,

11:39.920 --> 11:43.100
ponieważ LI, element listy jest teraz naprawdę dodany wewnątrz

11:43.100 --> 11:46.320
listy nieuporządkowanej, jak widać.

11:46.320 --> 11:49.390
Teraz to jedno, teraz przejdźmy do tej piątki, bo samo

11:49.390 --> 11:51.180
postawienie piątki tutaj nie

11:51.180 --> 11:52.990
jest tym, co chcę zrobić.

11:52.990 --> 11:56.143
A może by tak wyprowadzić trochę więcej przydatnych informacji.
