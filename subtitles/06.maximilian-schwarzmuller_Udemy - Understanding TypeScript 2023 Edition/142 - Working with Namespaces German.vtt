WEBVTT

00:02.190 --> 00:04.860
-: Ich möchte mit der Namespace-Funktion beginnen.

00:04.860 --> 00:06.810
Um Ihnen nun zu zeigen, wie es funktioniert,

00:06.810 --> 00:09.980
nehme ich diese beiden Schnittstellen hier.

00:09.980 --> 00:11.480
Die Drag-and-Drop-Schnittstellen,

00:11.480 --> 00:14.140
schneiden Sie sie aus app. ts und fügen Sie eine neue

00:14.140 --> 00:19.140
Datei hinzu, dragdropinterfaces. ts zum Beispiel.

00:21.270 --> 00:25.180
Jetzt können wir es dort einfügen, und um Namespaces zu verwenden,

00:25.180 --> 00:29.140
müssen wir nur noch das Schlüsselwort namespace und geschweifte

00:31.645 --> 00:33.620
Klammern hinzufügen.

00:33.620 --> 00:35.880
Jetzt müssen wir diesem Namensraum auch einen

00:35.880 --> 00:39.590
Namen geben, und hier nenne ich ihn DD Interfaces for a drag and drop, der

00:39.590 --> 00:41.660
Name ist jedoch Ihnen überlassen.

00:41.660 --> 00:43.640
Dieses Jahr ist eine TypeScript-Funktion,

00:43.640 --> 00:45.250
keine JavaScript-Funktion.

00:45.250 --> 00:47.750
Es wird nicht zu Vanilla JavaScript kompiliert,

00:47.750 --> 00:50.340
da es keine direkte Entsprechung dafür gibt.

00:50.340 --> 00:54.860
Stattdessen kompiliert TypeScript es grundsätzlich zu einem Objekt, wie man

00:54.860 --> 00:55.693
sagen könnte.

00:55.693 --> 00:57.490
Zu einem Objekt, in dem die Dinge, die

00:57.490 --> 01:00.440
Sie in den Namespace stellen, dann in Eigenschaften gespeichert

01:00.440 --> 01:02.140
werden, aber Sie müssen sich nicht

01:02.140 --> 01:06.960
darum kümmern, weil alle Auflösungen des Zugriffs auf diese Eigenschaften und dass alles

01:06.960 --> 01:10.640
funktioniert, von TypeScript übernommen werden.

01:10.640 --> 01:13.940
Jetzt können wir diese Schnittstellen in den Namespace verschieben

01:13.940 --> 01:16.130
und sind damit fast fertig.

01:16.130 --> 01:18.040
Nun haben wir aber ein Problem, diese

01:18.040 --> 01:22.280
Schnittstellen sind nur noch in diesem Namensraum verfügbar.

01:22.280 --> 01:23.113
Übrigens kann

01:23.113 --> 01:25.530
man nicht nur Schnittstellen in einen

01:25.530 --> 01:27.070
Namespace stellen, sondern

01:27.070 --> 01:28.057
alles, Klassen,

01:28.057 --> 01:29.720
Konstanten, was immer man

01:29.720 --> 01:30.780
will.

01:30.780 --> 01:33.900
Alles, was Sie wollen, kann in einem Namensraum untergebracht werden.

01:33.900 --> 01:35.630
Im Grunde können Sie also jeden beliebigen

01:35.630 --> 01:37.150
Code mit einem Namespace umhüllen.

01:37.150 --> 01:39.830
Das Problem ist jedoch, dass diese Funktionen,

01:39.830 --> 01:41.140
diese Schnittstellen,

01:41.140 --> 01:44.800
nur noch innerhalb dieses Namensraums verfügbar sind.

01:44.800 --> 01:47.280
Wie Sie sehen, haben wir dort nichts anderes drin.

01:47.280 --> 01:49.010
Nun könnten wir natürlich den Code, der

01:49.010 --> 01:51.600
von ihnen abhängt, wieder in diesen Namensraum bringen,

01:51.600 --> 01:53.370
aber dann würden wir wieder dazu blasen,

01:53.370 --> 01:56.960
weil sich herausstellt, dass wir ziemlich lange Klassen haben, die von diesen

01:56.960 --> 01:58.940
Schnittstellen abhängen.

01:58.940 --> 02:02.900
Wir haben die Klasse der Projektliste und die Klasse der Projektelemente.

02:02.900 --> 02:05.260
Sie hängen von diesen Schnittstellen ab,

02:05.260 --> 02:08.922
so dass wir eine Menge zu diesem Namensraum hinzufügen müssen.

02:08.922 --> 02:10.205
Daher können Sie das Schlüsselwort

02:10.205 --> 02:14.210
export vor einer Schnittstelle hinzufügen, um ein Feature aus einem

02:14.210 --> 02:16.850
Namensraum zu exportieren.

02:16.850 --> 02:19.680
Das bedeutet, dass diese Schnittstellen nun innerhalb

02:19.680 --> 02:22.110
dieses Namensraums, aber auch außerhalb

02:22.110 --> 02:24.487
dieser Datei verfügbar sind.

02:24.487 --> 02:26.100
Wir werden in einer Sekunde sehen, wie

02:26.100 --> 02:28.510
das funktioniert, aber damit machen wir diese Schnittstelle

02:28.510 --> 02:30.710
oder was auch immer wir exportieren wollen.

02:30.710 --> 02:32.815
Dies ist nicht auf Schnittstellen beschränkt,

02:32.815 --> 02:36.610
die natürlich auch außerhalb dieser Datei verfügbar sind, wenn wir

02:36.610 --> 02:41.140
diesen Namespace grundsätzlich importieren oder verwenden.

02:41.140 --> 02:41.973
Und natürlich kann man

02:41.973 --> 02:44.580
auch hier nicht nur Schnittstellen in einen Namensraum exportieren,

02:44.580 --> 02:45.636
sondern alles.

02:45.636 --> 02:48.010
Jetzt stellt sich nur noch die Frage, wie wir

02:48.010 --> 02:50.310
diesen Namespace jetzt wieder in die App

02:50.310 --> 02:52.410
importieren. ts und dafür hat TypeScript

02:52.410 --> 02:56.210
eine spezielle Syntax, die Sie verwenden können.

02:56.210 --> 02:57.867
Kehren wir zum Anfang der App zurück. ts und hier fügst

02:57.867 --> 03:01.440
du drei Schrägstriche hinzu, wichtig sind drei, nicht nur zwei, denn

03:01.440 --> 03:03.690
das ist eigentlich kein normaler Kommentar,

03:03.690 --> 03:06.150
was wir jetzt erstellen, das ist eigentlich eine

03:06.150 --> 03:07.330
Syntax, die von TypeScript

03:07.330 --> 03:10.280
aufgegriffen wird, ein spezieller Kommentar, man könnte

03:10.280 --> 03:13.110
sagen, TypeScript versteht, wenn er mit drei Schrägstrichen

03:13.110 --> 03:15.500
beginnt.

03:15.500 --> 03:19.301
Dort schreiben Sie ein selbstschließendes XML-Tag,

03:19.301 --> 03:21.600
also öffnende spitze Klammer, dann

03:21.600 --> 03:24.530
Schrägstrich schließende spitze Klammer

03:24.530 --> 03:25.790
und in deren Referenzpfad

03:25.790 --> 03:29.220
gleich und dann hier den Namen der Datei, die Sie

03:29.220 --> 03:32.370
importieren wollen.

03:32.370 --> 03:35.217
In meinem Fall hier dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Dies wird von TypeScript verstanden und übernommen, da es sich, wie bereits

03:42.550 --> 03:45.220
erwähnt, bei den drei beginnenden Schrägstrichen um eine

03:45.220 --> 03:47.560
spezielle Syntax handelt, die TypeScript versteht,

03:47.560 --> 03:50.110
genauso wie es diese Referenzsache versteht.

03:50.110 --> 03:51.960
Dies ist nicht Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript bemerkt das

03:53.970 --> 03:58.480
nicht und so wird es auch nicht aussehen, wenn es kompiliert ist.

03:58.480 --> 04:00.430
Aber was wird dadurch erreicht?

04:00.430 --> 04:05.070
Dadurch wird erreicht, dass nun dieser Namensraum DD Interfaces in der App

04:05.070 --> 04:07.104
verfügbar ist. ts.

04:07.104 --> 04:08.920
Wenn Sie jedoch nach unten scrollen, sehen Sie,

04:08.920 --> 04:11.040
dass meine Redakteure sich immer noch beschweren und wenn

04:11.040 --> 04:12.250
wir versuchen, es zu speichern,

04:12.250 --> 04:14.300
wie wir alle gute Kompilierungsfehler machen.

04:14.300 --> 04:16.410
Es scheint also nicht verfügbar zu sein.

04:16.410 --> 04:19.730
Die verschiebbare Schnittstelle scheint hier nicht verfügbar zu sein.

04:19.730 --> 04:22.386
Nun, es gibt eine Besonderheit bei den Namespaces.

04:22.386 --> 04:25.840
Sie können sie verwenden, um Ihren Code aufzuteilen, und erinnern Sie sich

04:25.840 --> 04:27.930
daran, dass ich vorhin gesagt habe, dass alles,

04:27.930 --> 04:29.610
was Sie in einem Namespace haben, von

04:29.610 --> 04:32.557
überall in diesem Namespace verwendet werden kann.

04:32.557 --> 04:34.157
Nun, es hat sich herausgestellt,

04:34.157 --> 04:37.580
dass man Namespaces auf mehrere Dateien aufteilen kann, indem

04:37.580 --> 04:39.110
man Dinge in einen Namespace

04:39.110 --> 04:42.330
exportiert und dann diese spezielle Importsyntax verwendet,

04:42.330 --> 04:45.230
aber man muss dann die Dinge, die etwas aus diesem Import-Namespace

04:45.230 --> 04:48.250
oder aus der importierten Datei verwenden wollen, in

04:48.250 --> 04:51.797
denselben Namespace legen.

04:51.797 --> 04:55.050
Daher ist DD Interfaces vielleicht nicht der beste Name.

04:55.050 --> 04:58.010
Vielleicht haben wir uns einfach als App.

04:58.010 --> 04:59.740
Wenn wir hier als App benannt haben, können

04:59.740 --> 05:01.670
wir zu App gehen. ts und erstellen

05:01.670 --> 05:04.180
Sie hier einen gleichnamigen Namespace,

05:04.180 --> 05:05.630
den Namespace App.

05:05.630 --> 05:06.890
Und jetzt fügen wir erst einmal

05:06.890 --> 05:10.750
alles in diesen Namensraum ein, und jetzt sehen Sie, dass der Fehler verschwunden

05:10.750 --> 05:12.610
ist Es gibt keine roten Punkte auf der

05:12.610 --> 05:14.300
rechten Seite.

05:14.300 --> 05:15.513
Wenn ich das aber gespeichert

05:15.513 --> 05:17.850
habe, bekomme ich hier immer noch Fehler.

05:17.850 --> 05:22.850
Zum Beispiel wird die Liste der abgeschlossenen Projekte nicht verwendet.

05:25.010 --> 05:26.300
Nun, das ist richtig,

05:26.300 --> 05:28.210
ich benutze das nicht.

05:28.210 --> 05:29.600
Ich brauche sie auch nicht,

05:29.600 --> 05:32.610
also können wir diese Begriffe hier einfach streichen.

05:32.610 --> 05:35.190
Wenn wir dies speichern, wird

05:35.190 --> 05:38.040
es ohne Fehler kompiliert.

05:38.040 --> 05:39.880
Die Frage ist nur: Was ist das Ergebnis

05:39.880 --> 05:41.920
dieser Zusammenstellung?

05:41.920 --> 05:44.260
Haben wir jetzt eine oder zwei Dateien?

05:44.260 --> 05:46.170
Werfen wir einen Blick auf den

05:46.170 --> 05:49.380
Disc-Ordner. Dort sehen Sie eine App-JS-Datei,

05:49.380 --> 05:50.780
etwas Code und eine JS-Datei

05:50.780 --> 05:53.980
für die Drag-and-Drop-Schnittstelle.

05:53.980 --> 05:56.690
Wir haben also zwei Dateien als Ergebnis.

05:56.690 --> 05:59.500
Die Schnittstellendatei von Dragon Drop ist eigentlich ziemlich

05:59.500 --> 06:00.830
leer, denn Sie haben gelernt,

06:00.830 --> 06:04.360
dass Schnittstellen im Grunde genommen zu nichts kompiliert werden.

06:04.360 --> 06:07.300
Es gibt keine JavaScript-Entsprechung für eine Schnittstelle.

06:07.300 --> 06:09.270
Es ist eine reine TypeScript-Funktion.

06:09.270 --> 06:12.370
Wir können es also mit der TypeScript-Syntax importieren, um es zu verwenden

06:12.370 --> 06:15.509
und alle Typverbesserungen zu erhalten, die wir gelernt haben, aber

06:15.509 --> 06:17.300
in der Produktion spielt es keine Rolle,

06:17.300 --> 06:20.060
ob es in einer separaten Datei ist oder nicht.

06:20.060 --> 06:21.840
Nun stellt sich natürlich die

06:21.840 --> 06:26.380
Frage, was passiert, wenn wir etwas, das in der Produktion vorhanden ist,

06:26.380 --> 06:28.630
auch in JavaScript in eine separate

06:28.630 --> 06:30.000
Datei stellen.

06:30.000 --> 06:33.373
Zum Beispiel, tut enum und die Projektklasse hier,

06:35.520 --> 06:36.470
ich werde beide

06:36.470 --> 06:37.610
greifen, erstellen

06:37.610 --> 06:41.410
Sie eine neue Datei, Projekt dash Modell TS und legen Sie

06:41.410 --> 06:46.040
meine Projektstatus enum und Projektklasse in dort.

06:46.040 --> 06:47.420
Jetzt können wir wie zuvor hier

06:47.420 --> 06:49.070
einen Namensraum hinzufügen, der

06:49.070 --> 06:50.590
Name muss App sein, also es muss

06:50.590 --> 06:51.790
ein Namensraum gemacht

06:51.790 --> 06:54.020
werden, wo wir es dann auch verwenden wollen

06:54.020 --> 06:57.340
und wir müssen diese Features dort hinein exportieren, damit wir

06:57.340 --> 06:59.450
sie in anderen Dateien im gleichen Namensraum,

06:59.450 --> 07:00.440
aber auch in anderen

07:00.440 --> 07:02.640
Dateien verwenden können.

07:02.640 --> 07:03.980
Jetzt zurück in der App. ts, müssen wir

07:03.980 --> 07:05.900
diese zweite Datei importieren.

07:05.900 --> 07:07.890
Ich dupliziere also diesen Import

07:07.890 --> 07:11.515
und das gesamte Importprojekt dash model ts.

07:11.515 --> 07:13.800
wenn ich das gespeichert habe und jetzt kompiliert

07:13.800 --> 07:16.610
wird und wir eine Projektmodell-JavaScript-Datei sehen.

07:16.610 --> 07:18.184
Und dort sehen wir

07:18.184 --> 07:19.490
einen Code.

07:19.490 --> 07:22.770
Die Frage ist, ob unsere Anwendung jetzt funktioniert.

07:22.770 --> 07:24.620
Dazu laden wir es neu und versuchen,

07:25.480 --> 07:27.587
ein Projekt hinzuzufügen, und Sie sehen,

07:27.587 --> 07:29.903
dass wir einen Fehler erhalten.

07:29.903 --> 07:33.183
Die Eigenschaft active von undefined kann nicht gelesen werden.

07:34.120 --> 07:36.090
Der Grund dafür ist einfach, dass unsere

07:36.090 --> 07:38.854
Dateien eigenständig kompiliert werden.

07:38.854 --> 07:41.410
Namespaces existieren in der TypeScript-Welt,

07:41.410 --> 07:44.640
wie gesagt, es gibt keine JavaScript-Äquivalenz dafür.

07:44.640 --> 07:47.430
Das Problem, das wir hier haben, ist, dass in der TypeScript-Welt

07:47.430 --> 07:48.263
alles großartig ist,

07:48.263 --> 07:51.610
weil TypeScript in der Lage ist, alle Dinge zu finden, die wir brauchen.

07:51.610 --> 07:52.800
Wenn ich zum Beispiel

07:52.800 --> 07:54.420
hier Projekt sage, wenn ich

07:54.420 --> 07:56.310
auf den Projekttyp hier in der Projektstatusklasse

07:56.310 --> 08:00.610
verweise, ist dieser Projekttyp, diese Projektklasse im Projektmodell

08:00.610 --> 08:02.840
definiert.

08:02.840 --> 08:06.020
TypeScript beschwert sich nicht über die Unvollständigkeit,

08:06.020 --> 08:07.570
weil wir das Modell importieren,

08:07.570 --> 08:10.250
aber importieren bedeutet hier wirklich

08:10.250 --> 08:15.810
nur, dass wir TypeScript sagen, wo der Typ zu finden ist, sobald er in JavaScript kompiliert

08:15.810 --> 08:18.150
ist.

08:18.150 --> 08:20.840
Wenn der JavaScript-Code ausgeführt wird und wir

08:20.840 --> 08:23.230
dann versuchen, ein neues Projekt zu erstellen,

08:23.230 --> 08:25.130
indem wir ein Projekt instanziieren,

08:25.130 --> 08:27.430
findet JavaScript diese Projektklasse oder

08:27.430 --> 08:29.610
Konstruktorfunktion nicht.

08:29.610 --> 08:32.980
Wir müssen also sicherstellen, dass wir die Unterbrechung der Verbindung weiterführen.

08:32.980 --> 08:35.420
Und dafür können wir in den TS gehen

08:35.420 --> 08:39.640
(murmelt) und dort diese Outfile-Option einstellen.

08:39.640 --> 08:40.740
Wir können dies auskommentieren

08:40.740 --> 08:43.010
und die Idee hinter der out-Datei ist,

08:43.010 --> 08:45.540
dass Sie TypeScript mitteilen, dass es

08:45.540 --> 08:48.620
Namespaces verketten soll.

08:48.620 --> 08:49.670
So werden diese Verweise,

08:49.670 --> 08:51.740
die es während der Kompilierung in eine

08:51.740 --> 08:53.950
einzige JavaScript-Datei hat, anstatt

08:53.950 --> 08:56.970
mehrere JavaScript-Dateien zu kompilieren.

08:56.970 --> 08:59.210
Hier können wir also für unsere Datei sagen,

08:59.210 --> 09:02.350
dass wir eine Datei im Disc-Ordner haben wollen, die wir vielleicht

09:02.350 --> 09:04.770
Bundle nennen. js Und wenn wir das tun

09:05.630 --> 09:07.050
und speichern, erhalten

09:07.050 --> 09:08.700
wir hier einen Fehler.

09:09.650 --> 09:10.710
Es wird eine Fehlermeldung

09:12.300 --> 09:14.410
angezeigt, dass nur AMD- und Systemmodule

09:14.410 --> 09:17.250
neben unserer Datei unterstützt werden.

09:17.250 --> 09:19.540
Wir müssen hier nicht alles verstehen.

09:19.540 --> 09:23.160
Im Grunde gibt es verschiedene Möglichkeiten,

09:23.160 --> 09:26.120
verschiedene JavaScript-Dateien aus

09:26.120 --> 09:28.770
historischen Gründen in eine einzige

09:28.770 --> 09:31.250
zu laden oder zu bündeln, und wie

09:31.250 --> 09:35.340
das alles entwickelt wird.

09:35.340 --> 09:36.800
Also im Grunde, was wir hier tun

09:36.800 --> 09:38.120
müssen, ist wir brauchen, um

09:38.120 --> 09:40.470
Modul, das bereits als ein Fehler hier hervorgehoben

09:40.470 --> 09:41.598
wird, nicht auf gemeinsame

09:41.598 --> 09:43.943
JS, sondern auf AMD zum Beispiel setzen.

09:45.400 --> 09:47.700
Wenn wir das tun, kompiliert er ohne Probleme,

09:47.700 --> 09:50.010
obwohl er sich hier immer noch beschwert, aber

09:50.010 --> 09:52.140
er hat nicht bemerkt, dass ich ihn geändert

09:52.140 --> 09:53.860
habe, und was jetzt passiert, ist,

09:53.860 --> 09:56.570
dass es eine neue JS-Bündel-Datei in dist gibt.

09:56.570 --> 10:00.310
Wenn ich alle JavaScript-Dateien im Disc-Ordner

10:00.310 --> 10:05.580
entferne und meinen TSC Dash neu starte, wird der Compiler nur die

10:05.580 --> 10:08.600
JS-Bündel-Datei erzeugen.

10:08.600 --> 10:11.530
Diese Datei enthält unseren gesamten Code in der

10:11.530 --> 10:13.250
kompilierten und übersetzten

10:13.250 --> 10:15.400
Version und daher jetzt in index HTML,

10:15.400 --> 10:20.300
wir müssen hier nur noch bundle JS anstelle von App JS importieren.

10:20.300 --> 10:23.610
Und wenn wir das tun und hier neu laden, haben wir wieder

10:23.610 --> 10:25.830
eine funktionierende Anwendung, in

10:25.830 --> 10:28.260
der wir alles per Drag &amp; Drop einfügen können,

10:28.260 --> 10:30.410
weil jetzt alles in einer Datei ist,

10:30.410 --> 10:32.661
aber nur im Endergebnis.

10:32.661 --> 10:34.230
Während der Entwicklung haben

10:34.230 --> 10:36.260
wir hier diese Namensräume, was ein

10:36.260 --> 10:39.030
Schritt in die richtige Richtung ist, weil es schon

10:39.030 --> 10:41.970
ein bisschen übersichtlicher ist.

10:41.970 --> 10:44.350
Lassen Sie uns dies nun in noch mehr Dateien aufteilen,

10:44.350 --> 10:47.250
bevor wir uns dann die durchschnittliche Aufteilungsoption TS-Module

10:47.250 --> 10:48.283
ansehen.
