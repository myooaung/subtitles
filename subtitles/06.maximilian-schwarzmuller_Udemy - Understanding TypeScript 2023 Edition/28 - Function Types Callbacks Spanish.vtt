WEBVTT

00:02.440 --> 00:05.170
Instructor: Ahora hablando de callbacks y tipos

00:05.170 --> 00:08.400
de funciones, ahí funciona más o menos de la misma manera.

00:08.400 --> 00:10.550
Digamos que tenemos una nueva

00:11.800 --> 00:14.990
función ahí arriba addAndHandle, digamos.

00:14.990 --> 00:18.420
Allí esperamos obtener dos números y luego también quiero obtener

00:19.740 --> 00:22.320
una función de devolución de llamada aquí.

00:22.320 --> 00:24.480
Así que una función que se pasa y es un argumento

00:24.480 --> 00:26.670
que debe hacer algo con el resultado, entonces

00:26.670 --> 00:29.930
aquí podríamos generar el resultado, por supuesto.

00:29.930 --> 00:31.060
Pero no sólo devolverlo,

00:31.060 --> 00:33.290
sino que quiero llamar a la función callback

00:33.290 --> 00:35.670
y pasar el resultado.

00:35.670 --> 00:36.990
Ahora para eso, quiero ser realmente

00:36.990 --> 00:39.270
claro que el callback debe ser una función.

00:39.270 --> 00:42.190
Así que, de nuevo, estoy usando esa definición

00:42.190 --> 00:45.640
de tipo de función que tal vez no devuelve nada, pero

00:45.640 --> 00:49.650
sí toma un número como argumento porque le estamos pasando

00:49.650 --> 00:51.280
un número aquí.

00:51.280 --> 00:52.740
Así que la función de devolución

00:52.740 --> 00:55.870
de llamada, la función que estamos pasando en esta función

00:55.870 --> 00:58.460
como un parámetro debe aceptar un número.

00:58.460 --> 01:01.890
Ahora abajo, llamaríamos a addAndHandle, pasaríamos

01:01.890 --> 01:05.240
10 y 20 y luego pasaríamos una función.

01:05.240 --> 01:07.570
Por ejemplo, una función anónima aquí.

01:07.570 --> 01:09.710
Así que ahora aquí, cuando llamamos a la función,

01:09.710 --> 01:11.470
esto es, por supuesto, no un tipo de función,

01:11.470 --> 01:13.620
sino un valor concreto que estamos pasando para

01:13.620 --> 01:15.150
este tercer argumento.

01:15.150 --> 01:18.870
Así que, esto ahora aquí es una función anónima creando

01:18.870 --> 01:22.300
aquí y allí sabemos que vamos a obtener un número.

01:22.300 --> 01:23.810
Tal vez nombrar el resultado aquí

01:23.810 --> 01:26.110
y luego podemos hacer con él lo que queramos.

01:26.110 --> 01:27.623
Y ahora si compilas esto,

01:28.570 --> 01:31.120
vemos este registro ahí abajo, 30, que es el

01:31.120 --> 01:33.540
resultado de nuestra función callback

01:33.540 --> 01:35.600
que pasamos a addAndHandle donde

01:35.600 --> 01:38.250
addAndHandle combina a dos números y luego

01:38.250 --> 01:39.850
llama al callback donde el

01:39.850 --> 01:43.200
callback tiene que cumplir esta condición aquí.

01:43.200 --> 01:45.870
La ventaja de que definamos la función de callback

01:45.870 --> 01:49.490
aquí es que dentro de la función que pasamos es un tipo de callback

01:49.490 --> 01:52.240
que es capaz de inferir que el resultado será un número

01:52.240 --> 01:54.000
y por lo tanto podríamos hacer cualquier

01:54.000 --> 01:56.620
cosa con el resultado aquí.

01:56.620 --> 01:58.090
Lo que podríamos hacer con

01:58.090 --> 02:00.990
un número sin indicar explícitamente el tipo aquí porque

02:00.990 --> 02:03.226
TypeScript sabe que el resultado será un

02:03.226 --> 02:04.970
número porque dejamos muy claro

02:04.970 --> 02:07.480
que el callback obtendrá un argumento que es un

02:07.480 --> 02:08.473
número.

02:09.310 --> 02:12.170
Por lo tanto, si esperáramos un segundo argumento aquí

02:12.170 --> 02:13.060
en el callback, obtendríamos

02:13.060 --> 02:15.460
un error porque sabemos bien, que el callback

02:15.460 --> 02:18.630
que esperamos en nuestra función addAndHandle sólo debe tener

02:18.630 --> 02:20.500
un argumento.

02:20.500 --> 02:22.420
Así que si luego pasamos una función de devolución

02:22.420 --> 02:23.950
de llamada que toma un segundo argumento,

02:23.950 --> 02:26.240
eso es claramente un error.

02:26.240 --> 02:28.250
Lo único que TypeScript no recoge

02:28.250 --> 02:30.280
es si devolvemos algo aquí.

02:30.280 --> 02:33.690
Si un resultado de retorno y la devolución de llamada sí devuelve

02:33.690 --> 02:34.767
algo, a pesar de que dejamos

02:34.767 --> 02:37.300
claro que no debería devolver nada.

02:37.300 --> 02:41.180
Sin embargo, esto no es un error o un fallo de TypeScript.

02:41.180 --> 02:43.150
En realidad ocurre a propósito.

02:43.150 --> 02:46.000
Al especificar void aquí en nuestro tipo de callback, esencialmente

02:46.000 --> 02:49.520
estamos diciendo que vamos a ignorar cualquier resultado que pueda estar

02:49.520 --> 02:50.910
devolviendo aquí.

02:50.910 --> 02:54.030
Así que básicamente estamos diciendo que en addAndHandle, donde

02:54.030 --> 02:56.020
obtenemos esa función callback, no haremos

02:56.020 --> 02:58.080
nada con el tipo de retorno.

02:58.080 --> 03:00.600
Por eso podrás devolver algo aquí sin

03:00.600 --> 03:03.550
castigo pero sabes, porque está claramente

03:03.550 --> 03:06.850
definido aquí en el tipo de callback, que el callback

03:06.850 --> 03:09.230
no hará nada con el valor que puedas

03:09.230 --> 03:10.870
devolver aquí.

03:10.870 --> 03:13.543
Así que ese addAndHandle dentro de la función

03:13.543 --> 03:15.680
no hará nada con ese valor que podría

03:15.680 --> 03:17.120
estar devolviendo.

03:17.120 --> 03:19.620
Y eso es, por supuesto, una información útil.

03:19.620 --> 03:21.270
Es de esperar que aquí hagamos

03:21.270 --> 03:25.710
algo con el valor devuelto por el callback, y al especificar

03:25.710 --> 03:29.000
este tipo aquí, dejamos muy claro que dentro

03:29.000 --> 03:31.520
de addAndHandle no nos interesa ningún

03:31.520 --> 03:33.920
valor de retorno.

03:33.920 --> 03:36.410
Así que esto no te obliga a pasar una devolución

03:36.410 --> 03:38.260
de llamada que no devuelve nada.

03:38.260 --> 03:40.830
Sólo le dice que todo lo que pueda devolver

03:40.830 --> 03:42.200
no se utilizará.

03:42.200 --> 03:44.070
Para los parámetros, por supuesto, es diferente.

03:44.070 --> 03:45.540
Allí esto se impone porque

03:45.540 --> 03:48.310
aquí realmente importa que sepas si estás pasando

03:48.310 --> 03:51.720
un callback que espera más parámetros.

03:51.720 --> 03:53.490
Entonces te dará un error o no

03:53.490 --> 03:55.350
obtendrás el resultado que quieres

03:55.350 --> 03:57.740
porque sólo te doy un resultado.

03:57.740 --> 04:01.290
Así que ahí no podemos ignorar lo que pueda querer como es el

04:01.290 --> 04:02.840
caso del tipo de retorno.

04:02.840 --> 04:05.506
Ignoramos eso aquí para pasar algo donde la

04:05.506 --> 04:08.750
función addAndHandle es responsable de eso porque

04:08.750 --> 04:10.920
ahí es donde se llama al callback.

04:10.920 --> 04:13.210
Esta es la razón por la que los parámetros son obligatorios

04:13.210 --> 04:15.060
y TypeScript es realmente estricto con respecto

04:15.060 --> 04:17.150
al número y tipo de parámetros de las funciones de

04:17.150 --> 04:19.508
devolución de llamada y por qué no le importa realmente

04:19.508 --> 04:21.253
el tipo de retorno.
