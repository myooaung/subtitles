WEBVTT

00:02.260 --> 00:03.920
Explicador: Ha llegado el momento de realizar

00:03.920 --> 00:05.340
una gestión de estados en el componente

00:05.340 --> 00:07.240
App, ya que cuando actualizamos el array de esta manera,

00:07.240 --> 00:08.880
el componente no se vuelve a renderizar.

00:08.880 --> 00:10.530
Así es como funciona React.

00:10.530 --> 00:12.590
En nuestro componente de función, podemos

00:12.590 --> 00:15.000
gestionar el Estado con el gancho useState.

00:15.000 --> 00:16.820
Y de nuevo, si no sabes esto o si los

00:16.820 --> 00:18.750
componentes de estado o función o

00:18.750 --> 00:21.120
los ganchos no te dicen nada, definitivamente

00:21.120 --> 00:23.810
revisa algunos recursos dedicados a React como

00:23.810 --> 00:26.480
mi curso React, la guía completa.

00:26.480 --> 00:29.870
Así que, ahora quiero gestionar mis todos aquí con el estado,

00:29.870 --> 00:31.760
y para eso voy a borrar ese todo ficticio

00:31.760 --> 00:33.060
con el que empecé, y en su

00:33.060 --> 00:36.430
lugar inicializar el estado llamando useState y a eso sin

00:36.430 --> 00:39.080
embargo, puedo pasar mi matriz vacía como un valor

00:39.080 --> 00:41.210
de estado inicial para que inicialmente

00:41.210 --> 00:44.510
mi estado sea una matriz vacía.

00:44.510 --> 00:47.100
Ahora useState siempre devuelve un array

00:47.100 --> 00:49.370
con exactamente dos elementos.

00:49.370 --> 00:52.070
El primer elemento es la última instantánea de estado para

00:52.070 --> 00:53.630
este ciclo de renderizado.

00:53.630 --> 00:55.070
Y el segundo argumento, el

00:55.070 --> 00:56.720
segundo elemento de la matriz

00:56.720 --> 00:58.860
es una función para actualizar ese estado

00:58.860 --> 01:01.110
y volver a renderizar el componente.

01:01.110 --> 01:02.660
Podemos utilizar la reestructuración

01:02.660 --> 01:05.060
de arrays, de la que hemos aprendido antes en el curso,

01:05.060 --> 01:07.060
para extraer estos dos elementos y almacenarlos

01:07.060 --> 01:09.230
en constantes separadas.

01:09.230 --> 01:10.900
Y aquí tenemos los todos y digamos

01:10.900 --> 01:13.103
una función llamada setTodos.

01:14.920 --> 01:16.820
Con eso, todavía tenemos nuestra

01:16.820 --> 01:19.530
matriz de todos y ahora aquí en el todoAddHandler,

01:19.530 --> 01:21.480
quiero llamar a setTodos y establecer

01:21.480 --> 01:24.430
mi matriz de todos a una nueva matriz, que tiene el

01:24.430 --> 01:27.373
nuevo todoText añadido a ella.

01:28.240 --> 01:29.283
Ahora para eso, podemos

01:30.400 --> 01:32.130
por supuesto, pasar un nuevo

01:32.130 --> 01:34.100
array y añadir un nuevo objeto,

01:34.100 --> 01:36.530
digamos con un ID, donde creamos un ID aleatorio

01:36.530 --> 01:42.530
con Math.

01:42.530 --> 01:42.530
aleatorio(). toString.

01:42.530 --> 01:44.830
No es realmente único, pero lo suficientemente bueno aquí,

01:44.830 --> 01:46.620
y donde luego también tenemos nuestro texto,

01:46.620 --> 01:48.760
que es ese valor de texto que estoy recibiendo aquí.

01:48.760 --> 01:51.910
Pero extrañamente, me da un error aquí.

01:51.910 --> 01:54.790
Y el error que obtenemos es que este argumento

01:54.790 --> 01:56.860
no es asignable.

01:56.860 --> 01:59.630
Pues básicamente en algo que espera

01:59.630 --> 02:01.970
tener una matriz de nada.

02:01.970 --> 02:03.590
Y eso, por supuesto, no es lo que quieres aquí.

02:03.590 --> 02:06.010
No queremos tener un conjunto de nada como nuestro estado.

02:06.010 --> 02:07.110
¿Por qué ocurre esto?

02:07.950 --> 02:11.800
Porque aquí cuando inicializo useState con un array vacío, TypeScript

02:11.800 --> 02:15.040
infiere cómo será nuestro estado, si lo inicializara

02:15.040 --> 02:17.060
con una cadena, TypeScript inferiría

02:17.060 --> 02:20.130
que mi estado es una cadena.

02:20.130 --> 02:23.010
Así que si quito esto temporalmente y paso algún texto,

02:23.010 --> 02:24.123
sería aceptado.

02:25.160 --> 02:26.137
Si lo paso en un array,

02:26.137 --> 02:28.260
el TypeScript espera que sea un array pero

02:28.260 --> 02:30.080
no un array de nada, sino siempre básicamente

02:30.080 --> 02:32.000
un array vacío.

02:32.000 --> 02:36.070
Así que una matriz de nada que por supuesto no quiero aquí.

02:36.070 --> 02:38.050
Para arreglar esto tenemos que decirle

02:38.050 --> 02:40.460
a React, cómo será nuestra finca con el tiempo.

02:40.460 --> 02:42.920
Y para ello podemos volver a utilizar que useState

02:42.920 --> 02:44.630
es una función genérica, porque

02:44.630 --> 02:48.080
podemos pasar la estructura de nuestro estado.

02:48.080 --> 02:51.240
Así que de qué tipo de datos es nuestro estado, y ahí

02:51.240 --> 02:54.200
podemos pasar que nuestro estado debe ser un array

02:54.200 --> 02:56.253
de objetos, para ser precisos y

02:57.210 --> 02:59.570
array de objetos donde tenemos una propiedad

02:59.570 --> 03:02.750
ID que es una cadena, y una propiedad text, que es

03:02.750 --> 03:04.860
una cadena.

03:04.860 --> 03:08.050
Y ahora se permite esta actualización del estado.

03:08.050 --> 03:10.100
Ahora, escribir esto aquí es, por supuesto, bien, pero ya que

03:10.100 --> 03:12.410
vamos a necesitar en diferentes lugares en la aplicación, voy a crear

03:12.410 --> 03:16.710
un nuevo archivo y el nombre de este todo. modelo. ts.

03:16.710 --> 03:18.210
El nombre del archivo depende de usted.

03:18.210 --> 03:19.940
Y aquí quiero exportar básicamente,

03:19.940 --> 03:21.710
un nombre de interfaz Todo donde sólo

03:21.710 --> 03:24.080
quiero describir cómo nuestro ID de Todo debe

03:24.080 --> 03:25.440
parecer en mi aplicación que

03:25.440 --> 03:27.430
quiero tener un ID de tipo cadena, y una

03:27.430 --> 03:30.190
propiedad de texto de tipo cadena.

03:30.190 --> 03:34.420
Y con esto exportado aquí en el componente de la aplicación,

03:34.420 --> 03:35.900
podemos importar esto

03:35.900 --> 03:38.210
así que aquí podemos importar Todo

03:39.080 --> 03:42.543
de . /todo. modelo.

03:43.900 --> 03:46.720
Y aquí simplemente tenemos un array de todos que

03:46.720 --> 03:49.550
es, por supuesto, más corto y más fácil de leer.

03:49.550 --> 03:51.480
Y ahora nuestra actualización de estado sigue funcionando,

03:51.480 --> 03:52.870
pero esto es un poco más limpio.

03:52.870 --> 03:55.100
Y esto como ves es realmente importante aquí

03:55.100 --> 03:57.210
cuando se trabaja con algo como un array

03:57.210 --> 03:59.170
donde los tipos de contenido para que

03:59.170 --> 04:01.860
el tipo de datos que desea almacenar que, finalmente,

04:01.860 --> 04:04.270
si se inicializa con una matriz vacía.

04:04.270 --> 04:06.250
Con esto sin embargo funciona.

04:06.250 --> 04:07.450
La desventaja, por supuesto,

04:07.450 --> 04:09.910
es que nuestra lógica de actualización del estado

04:09.910 --> 04:13.670
no es correcta, porque ahora mismo siempre sobrescribo el array existente

04:13.670 --> 04:17.400
de todos con un nuevo array que sólo tiene exactamente un elemento.

04:17.400 --> 04:20.110
Y en su lugar, quiero sobrescribirlo con un nuevo array

04:20.110 --> 04:23.730
que tenga todos los elementos antiguos así como el nuevo elemento.

04:23.730 --> 04:26.583
Así que vamos a ajustar esta lógica en la próxima conferencia.
