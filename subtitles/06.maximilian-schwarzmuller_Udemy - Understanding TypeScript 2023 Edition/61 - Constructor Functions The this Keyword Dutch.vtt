WEBVTT

00:02.160 --> 00:03.330
Presentator: Nu hebben

00:03.330 --> 00:06.080
klassen en alle constructorfuncties die al langer

00:06.080 --> 00:09.280
bestaan, niet alleen eigenschappen waarmee je de algemene

00:09.280 --> 00:12.780
structuur van het object kunt definiëren.

00:12.780 --> 00:14.770
U kunt ook methoden toevoegen.

00:14.770 --> 00:17.460
We hebben wel degelijk de constructormethode daar.

00:17.460 --> 00:19.620
Maar dat is slechts een nutsfunctie,

00:19.620 --> 00:22.940
die wordt aangeroepen als je de klasse installeert.

00:22.940 --> 00:25.584
Vergeet niet dat we in het verleden alleen constructeursfuncties

00:25.584 --> 00:28.100
hadden, nu hebben we die syntactische suiker, maar we hebben

00:28.100 --> 00:30.460
nog steeds de construct a-functie die we kunnen toevoegen

00:30.460 --> 00:33.300
om elke initialisatiecode uit te voeren.

00:33.300 --> 00:36.350
Misschien wil je ook een paar functies of methoden

00:36.350 --> 00:38.600
toevoegen die je dan op het gemaakte

00:38.600 --> 00:40.980
object kunt aanroepen.

00:40.980 --> 00:44.000
Bijvoorbeeld, een beschrijvingsmethode hier

00:44.000 --> 00:46.000
op onze afdelingsklasse.

00:46.000 --> 00:47.994
Nu wordt een methode zo toegevoegd,

00:47.994 --> 00:49.382
de naam van de methode,

00:49.382 --> 00:53.270
dan geen dubbele punt, geen gelijkheidsteken, haakjes

00:53.270 --> 00:56.090
en dan accolades.

00:56.090 --> 00:59.070
De haakjes nemen alle argumenten mee die je nodig hebt.

00:59.070 --> 01:00.780
Laten we zeggen dat we die hier niet nodig

01:00.780 --> 01:03.330
hebben, anders zou je parameters kunnen toevoegen zoals

01:03.330 --> 01:05.150
je dat in een gewone functie doet.

01:05.150 --> 01:07.280
En wat je typisch altijd nodig

01:07.280 --> 01:10.000
hebt, is een functie of een methode

01:10.000 --> 01:12.020
tussen de accolades.

01:12.020 --> 01:14.693
Hier definieert u nu de logica van uw methode.

01:15.580 --> 01:19.570
En daar willen we misschien de naam van de afdeling uitvoeren

01:19.570 --> 01:22.410
met wat extra informatie.

01:22.410 --> 01:26.230
We kunnen dit natuurlijk hier met de console doen. log, bijvoorbeeld,

01:26.230 --> 01:30.620
afdeling, dubbele punt en dan misschien naam.

01:30.620 --> 01:32.100
Dit zou echter niet werken.

01:32.100 --> 01:34.570
Dit zoekt naar een variabele naam, die

01:34.570 --> 01:37.710
moet bestaan binnen deze beschreven methode,

01:37.710 --> 01:40.860
of buiten de klasse als globale variabele.

01:40.860 --> 01:42.470
En zoals je ziet als het leeftijd

01:42.470 --> 01:44.433
koos, krijg ik een fout voor naam Ik doe dit

01:44.433 --> 01:46.540
niet, ik krijg dit niet omdat er eigenlijk

01:46.540 --> 01:50.100
een globale naam variabele is in de browser in het venster object.

01:50.100 --> 01:53.030
Dit zou echter niet verwijzen naar deze naamseigenschap

01:53.030 --> 01:57.130
hier, maar naar een of andere globale naamvariabele buiten deze klasse.

01:57.130 --> 01:59.599
Om vanuit de klasse naar een eigenschap of methode

01:59.599 --> 02:01.930
te verwijzen, moeten we het sleutelwoord

02:01.930 --> 02:03.590
this gebruiken, zoals we dat hier

02:03.590 --> 02:05.630
in de constructor doen.

02:05.630 --> 02:08.980
Dit verwijst dan typisch terug naar de concrete

02:08.980 --> 02:12.400
instantie van deze klasse die werd gecreëerd.

02:12.400 --> 02:14.240
En daar met de puntnotatie, hebben we

02:14.240 --> 02:16.600
toegang tot alle eigenschappen en methodes van

02:16.600 --> 02:17.650
deze instantie.

02:17.650 --> 02:19.555
In dit geval, dit. naam.

02:19.555 --> 02:24.555
Dus als ik nu, daar beneden, de boekhouding bel. zo beschrijven.

02:24.583 --> 02:28.110
Het sleutelwoord dit zal, wanneer dit wordt uitgevoerd,

02:28.110 --> 02:30.920
verwijzen naar dit concrete boekhoudobject

02:30.920 --> 02:33.730
dat is gebouwd op basis van deze klasse.

02:33.730 --> 02:35.530
Dus als ik dat nu opsla, en we herladen,

02:35.530 --> 02:38.570
zouden we deze uitvoer hier moeten zien, met natuurlijk

02:38.570 --> 02:40.420
een typfout, maar over het algemeen

02:40.420 --> 02:42.110
werkt het.

02:42.110 --> 02:43.944
Laten we nu de typfout hier herstellen.

02:43.944 --> 02:46.190
Dus zo kunnen we een methode toevoegen.

02:46.190 --> 02:48.166
Nu wat belangrijks over dit sleutelwoord.

02:48.166 --> 02:50.600
Zoals je waarschijnlijk weet, als je een beetje

02:50.600 --> 02:54.890
met JavaScript hebt gewerkt, kan het sleutelwoord dit lastig zijn.

02:54.890 --> 02:56.090
Bijvoorbeeld, als

02:56.090 --> 03:00.090
ik een ander object zou toevoegen hier boekhouding kopie

03:01.480 --> 03:03.350
en dit is ons object dat gewoon

03:03.350 --> 03:06.430
de beschrijf methode heeft en durf ik te wijzen

03:06.430 --> 03:11.270
naar boekhouding. beschrijven.

03:11.270 --> 03:15.470
Als ik dan accountingcopy oproep. beschrijven als een methode, wat denk

03:15.470 --> 03:17.150
je dat er zal gebeuren?

03:17.150 --> 03:19.200
Denk je dat we een fout krijgen?

03:19.200 --> 03:21.200
We krijgen zeker geen compilatiefout

03:21.200 --> 03:22.927
die prima compileert.

03:22.927 --> 03:26.360
Maar op runtime, zien we afdeling ongedefinieerd.

03:26.360 --> 03:28.780
En de reden daarvoor is dat ik een beschrijvingseigenschap

03:28.780 --> 03:32.010
toevoeg aan dit object dat is gemaakt met het object letterlijk,

03:32.010 --> 03:34.040
niet gebaseerd op deze klasse, maar

03:34.040 --> 03:37.888
gewoon als een dummy object niet gebaseerd op een specifieke klasse

03:37.888 --> 03:41.420
die je hebt gedefinieerd.

03:41.420 --> 03:44.360
En dan is de waarde van deze describe eigenschap

03:44.360 --> 03:49.000
een pointer naar de describe methode in mijn boekhoudobject.

03:49.000 --> 03:52.168
Dus ik wijs naar deze methode hier om dit

03:52.168 --> 03:54.690
concrete object te vinden.

03:54.690 --> 03:56.240
Ik voer het niet uit.

03:56.240 --> 03:57.723
Dus ik geef de waarde van deze functie-uitvoering

03:57.723 --> 04:00.410
niet door aan de beschrijving.

04:00.410 --> 04:04.090
Ik ga echt langs de functie zelf om hier te beschrijven.

04:04.090 --> 04:06.430
Dus wanneer ik hier beschrijven aanroep op

04:06.430 --> 04:08.950
de kopie, voert het inderdaad de methode uit

04:08.950 --> 04:10.440
en werkt alles correct.

04:10.440 --> 04:13.690
Het probleem is alleen, dat wanneer deze methode wordt uitgevoerd,

04:13.690 --> 04:17.040
dit niet zal verwijzen naar dit object waar deze methode oorspronkelijk

04:17.040 --> 04:19.170
deel van uitmaakte, dus niet naar het boekhoudkundig

04:19.170 --> 04:21.140
object.

04:21.140 --> 04:22.350
In plaats daarvan verwijst

04:22.350 --> 04:25.050
dit, en dat is een goede vuistregel die je kunt onthouden,

04:25.050 --> 04:27.900
typisch naar het ding dat verantwoordelijk is voor het aanroepen

04:27.900 --> 04:29.650
van een methode.

04:29.650 --> 04:32.190
En verantwoordelijk voor het aanroepen van de beschrijvingsmethode

04:32.190 --> 04:34.880
hier in dit geval, is boekhoudkundige kopie.

04:34.880 --> 04:39.160
Omdat we een boekhoudkundige kopie beschrijven.

04:39.160 --> 04:42.320
Dus dit verwijst naar het ding voor de punt hier, dat

04:42.320 --> 04:43.980
is boekhoudkundig Copy.

04:43.980 --> 04:47.530
Dat is echter een object dat geen naamseigenschap heeft.

04:47.530 --> 04:49.678
Dus als ik hier toegang toe krijg. naam, krijg ik

04:49.678 --> 04:53.968
een foutmelding omdat dit niet verwijst naar een object

04:53.968 --> 04:56.610
met een name eigenschap.

04:56.610 --> 04:59.220
Dus naam levert ons inderdaad ongedefinieerd op.

04:59.220 --> 05:02.260
En daarom krijg ik deze vreemde uitvoer.

05:02.260 --> 05:04.310
Dat is een ding waar je rekening mee moet houden,

05:04.310 --> 05:07.470
niet alleen in TypeScript, het is een JavaScript ding.

05:07.470 --> 05:09.540
En daarom kan het u natuurlijk ook

05:09.540 --> 05:11.500
overkomen in TypeScript.

05:11.500 --> 05:13.940
Nu, om dit, "dit" probleem te omzeilen,

05:13.940 --> 05:18.150
kun je een parameter toevoegen aan de beschrijvingsmethode,

05:18.150 --> 05:19.730
die dit heet.

05:19.730 --> 05:21.380
Dat is een speciale parameter,

05:21.380 --> 05:25.334
een speciale instructie die TypeScript begrijpt.

05:25.334 --> 05:28.430
Als je hier een parameter toevoegt met de naam dit,

05:28.430 --> 05:31.420
is het niet echt een parameter die verwacht wordt,

05:31.420 --> 05:36.010
je kunt nog steeds describe aanroepen zonder een waarde door te geven.

05:36.010 --> 05:38.476
In plaats daarvan wordt dit door TypeScript

05:38.476 --> 05:42.980
geïnterpreteerd als een hint waarnaar dit moet verwijzen.

05:42.980 --> 05:45.960
En nu is het belangrijk om hier een type aan toe te kennen.

05:45.960 --> 05:48.810
En het type hier, moet in dit geval ons

05:48.810 --> 05:51.780
klassetype zijn, dus afdeling.

05:51.780 --> 05:53.840
Wat ik hiermee wil zeggen is, dat

05:53.840 --> 05:56.250
wanneer describe wordt uitgevoerd,

05:56.250 --> 05:59.375
dit binnen describe, dus in dit geval hier, altijd

05:59.375 --> 06:02.550
moet verwijzen naar een instantie die gebaseerd

06:02.550 --> 06:05.040
is op de afdelingsklasse.

06:05.040 --> 06:09.160
Dus een object dat uiteindelijk van het type afdeling zou zijn.

06:09.160 --> 06:12.370
En daarom krijgen we nu eigenlijk een fout daar beneden,

06:12.370 --> 06:14.140
we krijgen een fout hier, want

06:14.140 --> 06:16.012
wat we hier hebben is dat wanneer

06:16.012 --> 06:19.800
we beschrijven hier op boekhoudkundige kopie aanroepen, we

06:19.800 --> 06:24.100
het niet aanroepen op een instantie van departement.

06:24.100 --> 06:26.350
Dus daarom wordt dit geschonden.

06:26.350 --> 06:29.540
Dit zal in dit geval niet verwijzen naar

06:29.540 --> 06:32.250
een object van het type afdeling.

06:32.250 --> 06:34.690
Dus hier voegen we wat extra typeveiligheid toe

06:34.690 --> 06:36.920
door deze dummy parameter toe te voegen, want

06:36.920 --> 06:39.450
als ik dit nu probeer op te slaan, krijg ik een foutmelding

06:39.450 --> 06:42.480
met betrekking tot deze regel hier.

06:42.480 --> 06:44.950
Want nu zouden we inderdaad code uitvoeren

06:44.950 --> 06:47.030
die niet werkt zoals verwacht.

06:47.030 --> 06:49.260
We moeten dit dus oplossen door bijvoorbeeld

06:49.260 --> 06:51.140
een name property toe te voegen

06:52.040 --> 06:55.290
om dit te laten werken, want nu ziet TypeScript Oké, het

06:55.290 --> 06:57.702
object waarop je describe aanroept, heeft

06:57.702 --> 07:02.702
nu een name property zoals dit verwacht dat het heeft omdat dit gebaseerd is op het

07:03.840 --> 07:05.803
department object, dat ook een name

07:05.803 --> 07:08.070
property heeft.

07:08.070 --> 07:10.790
Dus nu zou TypeScript blij zijn omdat we naam

07:10.790 --> 07:12.270
hebben toegevoegd.

07:12.270 --> 07:14.934
Als ik het verwijder, krijgen we de fout terug met

07:14.934 --> 07:17.277
naam hoe dit ook werkt, en vermijden we deze

07:17.277 --> 07:19.750
ongedefinieerde uitvoer van voorheen.

07:19.750 --> 07:22.770
Dus dat is belangrijk om te begrijpen.

07:22.770 --> 07:26.140
En het is belangrijk dat u zich bewust bent van deze verbetering

07:26.140 --> 07:28.410
die u aan uw code kunt toevoegen om er zeker

07:28.410 --> 07:31.190
van te zijn dat u ongewenst gedrag opvangt, zoals

07:31.190 --> 07:32.993
we dat eerder hadden.
