WEBVTT

00:02.170 --> 00:04.780
-: Jadi, tujuannya adalah untuk membangun komponen to-do list

00:04.780 --> 00:06.330
dan karenanya di sini di folder sumber,

00:06.330 --> 00:08.600
saya akan menambahkan sub folder baru, komponen, dan

00:08.600 --> 00:11.280
di sana ada "to-doList. tsx", yang akan menampung

00:11.280 --> 00:13.690
komponen daftar tugas saya.

00:13.690 --> 00:15.370
Sekarang, untuk membangun komponen

00:15.370 --> 00:17.030
react, kita perlu mengimpor React

00:17.030 --> 00:20.250
dari "react" jika tidak, JXS tidak akan bekerja di file ini.

00:20.250 --> 00:22.820
Kemudian saya membuat konstanta daftar tugas saya,

00:22.820 --> 00:24.530
yang menyimpan fungsi panah dan tentu

00:24.530 --> 00:26.990
saja ini tidak harus berupa fungsi panah, Anda juga

00:26.990 --> 00:30.320
bisa menggunakan fungsi dengan kata kunci fungsi.

00:30.320 --> 00:33.160
Sekarang kita akan mengekspor ini.

00:33.160 --> 00:36.500
Sekarang, mari kita gunakan fitur typescript ekstra kita sekarang, dan mari kita

00:36.500 --> 00:39.370
atur jenis ini menjadi react. fc untuk mengindikasikan

00:39.370 --> 00:42.010
bahwa ini seharusnya bukan fungsi biasa, tetapi

00:42.010 --> 00:43.950
komponen fungsional.

00:43.950 --> 00:46.920
Oleh karena itu, kita mendapatkan error karena kita tidak mengembalikan

00:46.920 --> 00:49.790
sesuatu yang memenuhi syarat sebagai elemen react.

00:49.790 --> 00:53.250
Jadi di sini, kita harus mengembalikan, katakanlah daftar yang tidak berurutan.

00:53.250 --> 00:54.850
Karena saya ingin me-render daftar di sini,

00:54.850 --> 00:58.000
mengembalikan daftar yang tidak berurutan untuk saat ini masuk akal.

00:58.000 --> 01:02.740
Sekarang, pada daftar yang tidak berurutan itu, saya ingin mengeluarkan item daftar.

01:02.740 --> 01:07.230
Jadi, di sini, kita bisa berharap untuk mendapatkan to-dos kita, dan itu adalah

01:07.230 --> 01:09.240
array, dan dalam array kita memiliki

01:09.240 --> 01:11.690
objek di mana setiap item memiliki ID.

01:11.690 --> 01:15.627
Katakanlah t1 untuk to-do satu dan teks seperti

01:15.627 --> 01:18.100
"Selesaikan kursus. Ini hanya satu item, tetapi tentu saja Anda bisa memiliki

01:18.100 --> 01:18.933
beberapa objek seperti

01:18.933 --> 01:20.800
itu dalam larik ini.

01:20.800 --> 01:22.010
Di sini, di dalam daftar kita, kita kemudian

01:22.010 --> 01:24.620
dapat secara dinamis mengeluarkan to-dos dan memetakannya ke dalam daftar item daftar.

01:24.620 --> 01:29.620
Jadi di sini, kami memeriksa semua to-do, ini adalah fungsi JavaScript

01:30.250 --> 01:32.930
bawaan, tentu saja, fungsi peta, dan kami

01:32.930 --> 01:35.070
mengembalikan item daftar untuk

01:35.070 --> 01:37.740
setiap elemen dalam larik ini dan dalam

01:37.740 --> 01:41.530
item daftar itu, saya menetapkan "to-do. text" sebagai konten pada item daftar dan menambahkan prop kunci

01:41.530 --> 01:45.570
khusus ini, yang sebenarnya diinginkan

01:45.570 --> 01:47.870
React pada elemen berulang yang duduk

01:47.870 --> 01:49.620
bersebelahan.

01:49.620 --> 01:51.980
Di sini, kita harus memilih sesuatu yang unik dan ID harus

01:51.980 --> 01:54.130
memenuhi syarat sebagai pengidentifikasi unik.

01:54.130 --> 01:57.710
Dengan itu, kita membuat daftar tugas yang harus dilakukan.

01:57.710 --> 02:00.470
Sekarang mari kita integrasikan komponen to-do list

02:00.470 --> 02:02.860
ke dalam komponen aplikasi dan untuk ini kita

02:02.860 --> 02:05.520
tentu saja dapat pergi ke komponen aplikasi, impor

02:05.520 --> 02:06.930
"TodoList" dari ". /components/TodoList"

02:06.930 --> 02:11.530
seperti ini, ". tsx" akan ditambahkan secara otomatis oleh alur kerja

02:11.530 --> 02:14.350
build yang kami gunakan di sini.

02:14.350 --> 02:17.160
Dan kemudian di sini, di dalam div kita, kita bisa me-render

02:17.160 --> 02:18.850
"TodoList" seperti itu.

02:18.850 --> 02:21.440
Jika sekarang kita menyimpan ini dan kita kembali ke halaman

02:21.440 --> 02:24.190
yang sedang berjalan, kita melihat to-do yang satu ini di sini.

02:24.190 --> 02:25.870
Penataannya buruk dan kita bisa menambahkan

02:25.870 --> 02:29.350
penataan yang lebih baik nanti, tetapi untuk saat ini, itu sudah cukup.

02:29.350 --> 02:31.680
Namun, hal ini tidak benar-benar realistis.

02:31.680 --> 02:35.620
Ketika kita membangun aplikasi to-do list ini, saya nantinya ingin dapat

02:35.620 --> 02:37.950
menambahkan to-do baru dengan komponen terpisah

02:37.950 --> 02:40.063
yang belum kita miliki.

02:40.063 --> 02:42.920
Dan kita mungkin akan mengelola to-dos di sini

02:42.920 --> 02:45.570
dalam komponen aplikasi ini karena di sini,

02:45.570 --> 02:48.810
di tempat ini, kita akan memiliki komponen yang menambahkan

02:48.810 --> 02:53.020
to-dos dan komponen itu akan dapat berbicara kembali ke komponen

02:53.020 --> 02:55.280
aplikasi ini.

02:55.280 --> 02:56.690
Di sini, kita kemudian mengelola

02:56.690 --> 02:59.650
larik to-dos dan kita menambahkan to-dos ke larik itu atau kita

02:59.650 --> 03:01.510
menghapus to-dos dari larik itu.

03:01.510 --> 03:04.220
Untuk to-do list, kita akan mengoper larik itu.

03:04.220 --> 03:06.930
Jadi, meskipun kita belum mengelolanya, kita mungkin

03:06.930 --> 03:09.270
akan memiliki array "todos" itu bukan di daftar

03:09.270 --> 03:11.660
tugas, tetapi di komponen aplikasi.

03:11.660 --> 03:15.010
Itu lebih realistis bahwa array ini nantinya akan berakhir di sini sehingga kita

03:15.010 --> 03:16.740
sudah bisa memindahkannya ke sini.

03:16.740 --> 03:20.093
Sekarang, kita perlu meneruskannya ke "TodoList. Untuk ini, tentu saja, kita bisa menggunakan alat peraga.

03:20.930 --> 03:23.600
Jadi pada to-do list, Anda bisa memiliki prop item, namanya

03:23.600 --> 03:25.640
tentu saja terserah kita karena kita mendefinisikan

03:25.640 --> 03:28.370
komponen ini, kita bisa mendefinisikan bagaimana prop-nya

03:28.370 --> 03:30.350
harus diberi nama.

03:30.350 --> 03:32.100
Kita bisa memasukkan array "todos" kita.

03:32.100 --> 03:35.010
Sekarang, kita sudah melihat bahwa IDE tidak menyukai ini dan jika saya mencoba

03:35.010 --> 03:37.820
untuk menyimpan ini, kita juga mendapat kesalahan kompilasi.

03:37.820 --> 03:40.650
Kita mendapat kesalahan kompilasi

03:40.650 --> 03:45.400
karena properti "items" tidak ada pada tipe whatever.

03:45.400 --> 03:47.830
Jadi pada dasarnya tidak ada pada tipe persimpangan

03:47.830 --> 03:50.440
di sini yang pada akhirnya mendefinisikan struktur props

03:50.440 --> 03:52.070
yang diterima oleh "TodoList. Karena ketika menggunakan typescript

03:52.070 --> 03:55.300
dengan React, Anda harus jelas tentang tipe yang Anda gunakan.

03:55.300 --> 03:59.470
Itu tidak hanya berarti bahwa Anda memberi tahu typescript bahwa ini adalah jenis

03:59.470 --> 04:02.110
fungsi khusus, tidak, itu juga berarti bahwa jika

04:02.110 --> 04:05.250
Anda mengandalkan props dalam beberapa komponen, Anda memberi

04:05.250 --> 04:08.360
tahu typescript bagaimana props ini harus terlihat seperti

04:08.360 --> 04:11.020
bagaimana mereka terstruktur.

04:11.020 --> 04:14.860
Jadi di komponen to-do list, kita menerima props

04:14.860 --> 04:17.420
di sini, kan, itu React biasa.

04:17.420 --> 04:19.400
Dan pada alat peraga kita mungkin memiliki properti barang kita.

04:19.400 --> 04:23.530
Jadi, kita memiliki prop bernama "items" dan

04:23.530 --> 04:26.200
itu memang yang saya katakan

04:26.200 --> 04:30.323
di sini: "Saya memiliki prop items ini. Masalahnya sekarang adalah ini secara teknis akan bekerja tetapi

04:31.420 --> 04:33.430
typescript belum membatalkan.

04:33.430 --> 04:35.067
Kita tidak benar-benar memberitahu typescript

04:35.067 --> 04:37.140
bahwa prop kita harus memiliki properti "items" di sini.

04:37.140 --> 04:39.503
Untuk memberitahukannya, kita bisa menggunakan

04:39.503 --> 04:41.950
fakta bahwa tipe komponen fungsi di sini

04:41.950 --> 04:45.063
sebenarnya adalah tipe generik.

04:45.063 --> 04:46.913
Tipe generik di mana kita bisa mendefinisikan semua

04:47.840 --> 04:50.510
props tambahan selain prop default dari children, yang dimiliki setiap

04:50.510 --> 04:52.170
komponen, yang kita harapkan di sini.

04:52.170 --> 04:54.250
Jadi kita dapat menambahkan tanda kurung

04:54.250 --> 04:58.132
siku di sini dan menambahkan objek kita yang menggambarkan struktur objek "props"

04:58.132 --> 05:00.710
yang kita dapatkan di sini atau, untuk menjaga kode kita

05:00.710 --> 05:03.670
lebih ramping, kita melakukan ini dalam antarmuka tambahan

05:03.670 --> 05:06.170
di sini dan itu benar-benar opsional.

05:06.170 --> 05:09.670
Jadi di sini kita bisa memiliki alat peraga daftar tugas dan ini menggambarkan

05:09.670 --> 05:12.350
bagaimana alat peraga kita terlihat.

05:12.350 --> 05:15.120
Dan di sini, saya berharap mendapatkan kunci "items",

05:15.120 --> 05:18.260
di mana kita memiliki array objek di mana setiap objek

05:18.260 --> 05:20.510
memiliki ID, yang merupakan string, dan

05:20.510 --> 05:23.380
memiliki teks, yang merupakan string.

05:23.380 --> 05:26.120
Itulah data yang kami kelola di sini.

05:26.120 --> 05:30.020
Kita memiliki array objek dengan string

05:30.020 --> 05:32.850
ID dan string teks.

05:32.850 --> 05:34.370
Itulah yang saya harapkan untuk didapatkan di sini

05:34.370 --> 05:36.070
adalah "props" sebuah array dari objek-objek seperti

05:36.070 --> 05:38.940
itu dan jika kita berada di sini, kita sekarang dapat menunjuk pada antarmuka props daftar

05:38.940 --> 05:40.700
tugas ini dan sekarang semuanya baik-baik saja. Sekarang typescript memahami

05:40.700 --> 05:42.670
bahwa di sini, kita akan mendapatkan

05:42.670 --> 05:45.040
props, di mana kita akan memiliki prop

05:45.040 --> 05:48.640
items dan prop items ini akan menjadi array di mana kita memiliki

05:48.640 --> 05:52.145
kunci ID dan kunci teks pada

05:52.145 --> 05:55.000
setiap elemen array.

05:55.000 --> 05:56.920
Jadi sekarang jika kita menyimpan ini, ia akan dikompilasi,

05:56.920 --> 05:58.870
dan kita mendapatkan output yang berfungsi lagi.

05:58.870 --> 05:59.850
Jadi sekali lagi, ini adalah typescript yang digunakan dengan React.

05:59.850 --> 06:02.390
Kita tidak hanya menggunakannya untuk memberi tahu React atau

06:02.390 --> 06:04.188
untuk memberi tahu typescript, bahwa ini adalah

06:04.188 --> 06:06.830
komponen fungsional, tetapi juga tentang props yang akhirnya didapat

06:06.830 --> 06:10.000
komponen ini dan ini sangat membantu kita dengan type safety.

06:10.000 --> 06:13.490
Ini menghindari bahwa saya di sini secara tidak sengaja berpikir

06:13.490 --> 06:15.130
bahwa itu bernama "todos. Tidak, ini tidak didukung, kami mendapatkan kesalahan.

06:15.130 --> 06:19.060
Ini adalah barang.

06:19.060 --> 06:21.165
Anda semua akan melihat mereka mendapatkan penyelesaian otomatis di sini.

06:21.165 --> 06:23.330
Jadi, pengkodean menjadi jauh lebih mudah ketika

06:23.330 --> 06:24.910
bekerja dengan typescript di sini. Dan itu tentu saja adalah seluruh keuntungan dari typescript: menyederhanakan

06:24.910 --> 06:27.160
coding, menghindari kesalahan yang tidak perlu dan seperti yang Anda lihat, itu juga melakukannya

06:27.160 --> 06:28.400
dalam aplikasi react.

06:28.400 --> 06:30.670
Tentu saja, kami belum selesai.

06:30.670 --> 06:34.420
Saat ini, to-dos kami di sini tidak pernah berubah

06:34.420 --> 06:36.640
dan saya ingin mengubahnya,

06:36.640 --> 06:39.930
saya ingin memiliki komponen yang memungkinkan

06:39.930 --> 06:44.120
kami untuk menambahkan to-dos baru.

06:44.120 --> 06:46.080
Jadi, mari kita kerjakan itu selanjutnya.
