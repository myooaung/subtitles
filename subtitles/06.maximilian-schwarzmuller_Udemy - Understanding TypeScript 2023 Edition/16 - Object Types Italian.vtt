WEBVTT

00:02.280 --> 00:03.780
Istruttore: Approfondiamo

00:03.780 --> 00:06.450
i tipi fondamentali supportati da TypeScript.

00:06.450 --> 00:09.800
Il prossimo tipo interessante è quello di oggetto.

00:09.800 --> 00:13.100
Ora, gli oggetti in JavaScript hanno questo aspetto.

00:13.100 --> 00:14.690
Ci sono le parentesi graffe e

00:14.690 --> 00:16.350
poi ci sono le coppie chiave-valore

00:16.350 --> 00:20.460
e tali valori sono trattati come tipi di oggetto in TypeScript, quindi qualsiasi

00:20.460 --> 00:23.620
oggetto JavaScript è di tipo oggetto.

00:23.620 --> 00:28.410
Anche se già si dice che ci sono versioni più specifiche di oggetti in TypeScript,

00:28.410 --> 00:30.030
in modo da poter dire che questo

00:30.030 --> 00:32.514
non è un oggetto qualsiasi, ma un oggetto

00:32.514 --> 00:35.108
che deve avere queste proprietà o che deve

00:35.108 --> 00:37.260
essere basato su questa o quella funzione

00:37.260 --> 00:39.490
costruttrice.

00:39.490 --> 00:41.322
Ma ci arriveremo passo dopo passo.

00:41.322 --> 00:45.110
Per immergerci negli oggetti, rinomineremo innanzitutto l'applicazione. e rinominerò questo sito

00:45.110 --> 00:49.770
in "Nozioni di base". qui.

00:49.770 --> 00:52.058
E aggiungere una nuova applicazione. ts, che andrà a sovrascrivere

00:52.058 --> 00:55.400
la vecchia applicazione. js una volta compilato,

00:55.400 --> 00:58.600
dove ora possiamo immergerci negli oggetti.

00:58.600 --> 01:01.110
Iniziamo creando un oggetto di base, diciamo

01:01.110 --> 01:03.902
una persona con le parentesi graffe.

01:03.902 --> 01:05.870
E gli diamo un nome.

01:05.870 --> 01:08.230
Qui scelgo Massimiliano perché

01:08.230 --> 01:10.700
è il mio nome e l'età è di 30 anni.

01:10.700 --> 01:14.930
Ora, naturalmente, possiamo consolare. e se lo facciamo e lo

01:14.930 --> 01:18.375
compiliamo, come è ovvio, dovremmo

01:18.375 --> 01:24.536
vedere l'oggetto stampato nella console.

01:24.536 --> 01:27.284
Ora, ciò che possiamo fare anche in JavaScript

01:27.284 --> 01:31.690
è cercare di accedere, per esempio, a nickname, una proprietà

01:31.690 --> 01:33.970
che qui non esiste.

01:33.970 --> 01:37.320
Ora si vede subito che TypeScript non è molto contento

01:37.320 --> 01:39.820
di questo, e quindi il mio IDE me lo dice.

01:39.820 --> 01:42.302
Mi dice che il nickname della proprietà

01:42.302 --> 01:44.050
non esiste su quel tipo.

01:44.050 --> 01:47.642
Quindi se lo salviamo e proviamo a compilarlo,

01:47.642 --> 01:49.907
otterremo lo stesso errore.

01:49.907 --> 01:52.210
Il compilatore TypeScript non gradisce

01:52.210 --> 01:54.401
e mi dice che non abbiamo una proprietà

01:54.401 --> 01:56.430
nickname su questo oggetto.

01:56.430 --> 01:59.813
Scopre che non abbiamo questa proprietà nickname perché, se

01:59.813 --> 02:02.936
passiamo il mouse su person che ha dedotto, possiamo vedere

02:02.936 --> 02:05.710
che c'è un due punti dopo person, quindi dopo il nome

02:05.710 --> 02:07.970
della variabile o della costante.

02:07.970 --> 02:12.110
Se ne deduce che questo è il tipo di dati memorizzati.

02:12.110 --> 02:14.181
Come si può notare, non si tratta di un semplice oggetto.

02:14.181 --> 02:16.349
È un oggetto concreto.

02:16.349 --> 02:18.920
Si tratta di un oggetto con una chiave di nome, il

02:18.920 --> 02:21.430
cui tipo, a sua volta, deve essere una stringa.

02:21.430 --> 02:24.700
E la chiave dell'età, dove il tipo deve essere un numero.

02:24.700 --> 02:27.116
E in effetti questo può creare confusione.

02:27.116 --> 02:31.100
Questo, qui, sembra ovviamente un oggetto JavaScript.

02:31.100 --> 02:33.980
Parentesi graffe, coppie chiave-valore.

02:33.980 --> 02:36.020
La prima cosa importante da notare è che

02:36.020 --> 02:38.520
abbiamo un punto e virgola dopo ogni riga.

02:38.520 --> 02:40.580
Questo non è possibile in un oggetto JavaScript.

02:40.580 --> 02:41.750
Qui c'è una virgola.

02:41.750 --> 02:44.160
Infatti, non si tratta di un oggetto JavaScript

02:44.160 --> 02:45.940
creato da qualche parte.

02:45.940 --> 02:50.600
Questo è il tipo di oggetto dedotto da TypeScript e i tipi di oggetto

02:50.600 --> 02:53.914
sono scritti quasi come gli oggetti, ma ovviamente

02:53.914 --> 02:57.106
non abbiamo coppie chiave-valore, ma coppie

02:57.106 --> 02:59.239
chiave-tipo.

02:59.239 --> 03:02.840
I tipi di oggetto servono a descrivere, beh, il tipo di

03:02.840 --> 03:06.064
oggetto che viene utilizzato da qualche parte.

03:06.064 --> 03:07.653
Potremmo essere più generici.

03:07.653 --> 03:10.420
Potrei assegnare esplicitamente

03:10.420 --> 03:13.640
un tipo alla costante dell'oggetto.

03:13.640 --> 03:16.100
Object è uno dei tipi incorporati, proprio

03:16.100 --> 03:17.460
come number e string,

03:17.460 --> 03:21.030
e ora se ci passo sopra vediamo persone di tipo object e

03:21.030 --> 03:24.000
ora TypeScript si preoccupa solo del fatto che

03:24.000 --> 03:26.430
questo è un tipo di oggetto.

03:26.430 --> 03:28.423
Ora, se compiliamo questo, otteniamo

03:28.423 --> 03:32.808
comunque quell'errore, perché TypeScript analizza il nostro codice

03:32.808 --> 03:35.490
e vede che cerchiamo di accedere a qualcosa

03:35.490 --> 03:36.666
che non esiste, ma è

03:36.666 --> 03:39.770
importante capire che tutto inizia con questo tipo

03:39.770 --> 03:42.140
di oggetto più generico.

03:42.140 --> 03:44.660
Ma spesso si vuole essere più specifici di così.

03:44.660 --> 03:47.623
Non si vuole lavorare solo con quel tipo di oggetto generico.

03:47.623 --> 03:50.284
Volete davvero ottenere un supporto completo.

03:50.284 --> 03:53.550
Ad esempio, se aggiungo un punto qui e do un'occhiata

03:53.550 --> 03:55.570
al mio completamento automatico,

03:55.570 --> 03:58.080
il mio IDE non mi aiuta affatto.

03:58.080 --> 04:00.303
Il motivo è che tutto ciò che diciamo

04:00.303 --> 04:04.230
all'IDE è che abbiamo un valore qui, in persona, che è di

04:04.230 --> 04:05.860
tipo oggetto.

04:05.860 --> 04:08.300
In effetti ora riceviamo anche un errore

04:08.300 --> 04:10.210
se provo ad accedere al nome.

04:10.210 --> 04:12.270
Il nome esiste qui, giusto?

04:12.270 --> 04:14.120
Ma quello che diciamo a TypeScript

04:14.120 --> 04:16.601
qui è che abbiamo solo un oggetto in cui non forniamo

04:16.601 --> 04:18.889
alcuna informazione a TypeScript.

04:18.889 --> 04:21.739
In realtà, TypeScript non supporta alcun

04:21.739 --> 04:24.750
tipo di proprietà, perché non gli diciamo nulla

04:24.750 --> 04:26.210
sull'oggetto.

04:26.210 --> 04:28.050
Quindi dovremmo essere più specifici.

04:28.050 --> 04:32.000
E siamo più specifici impostando un tipo di oggetto specifico.

04:32.000 --> 04:34.795
Cosa che anche TypeScript deduce automaticamente.

04:34.795 --> 04:38.548
Lo facciamo aggiungendo le parentesi graffe qui

04:38.548 --> 04:43.370
dopo i due punti, dopo il nome della nostra const o variabile.

04:43.370 --> 04:46.213
Quindi questo non crea un nuovo oggetto JavaScript.

04:46.213 --> 04:48.460
Questo verrà effettivamente eliminato dal

04:48.460 --> 04:50.310
codice JavaScript compilato.

04:50.310 --> 04:52.643
Si tratta invece della notazione di TypeScript

04:52.643 --> 04:55.855
di un tipo di oggetto specializzato, per così dire.

04:55.855 --> 04:59.422
Quindi di un tipo di oggetto in cui si forniscono alcune informazioni

04:59.422 --> 05:01.434
sulla struttura dell'oggetto.

05:01.434 --> 05:04.520
Ora, assegnando come tipo solo una coppia vuota di parentesi graffe,

05:04.520 --> 05:07.440
si fa essenzialmente la stessa cosa che si fa con gli oggetti.

05:07.440 --> 05:09.765
Diciamo a TypeScript che questo è un oggetto.

05:09.765 --> 05:12.740
Ora però possiamo essere più specifici.

05:12.740 --> 05:16.550
Qui si possono aggiungere voci di valore di chiave, ma non

05:16.550 --> 05:19.694
di valore di chiave, bensì di tipo di chiave.

05:19.694 --> 05:22.800
Quindi, potremmo dire che l'oggetto che deve

05:22.800 --> 05:25.091
essere memorizzato in person deve

05:25.091 --> 05:28.197
avere una proprietà name e il valore di tale proprietà

05:28.197 --> 05:31.140
deve essere di tipo string.

05:31.140 --> 05:33.795
Qui si descrive il tipo di valore che

05:33.795 --> 05:36.440
verrà memorizzato nel nome.

05:36.440 --> 05:39.320
A proposito, vedo che si verifica un errore.

05:39.320 --> 05:41.090
Perché ora sto dicendo a TypeScript

05:41.090 --> 05:43.489
che la mia persona dovrebbe avere un oggetto

05:43.489 --> 05:45.900
con esattamente una coppia chiave-valore, dove

05:45.900 --> 05:48.626
la chiave è nome e il valore della chiave è stringa,

05:48.626 --> 05:52.730
ma non abbiamo assegnato un oggetto con due coppie chiave-valore.

05:52.730 --> 05:55.020
Il nome, che contiene una stringa, va

05:55.020 --> 05:58.500
bene, ma l'età, che contiene un numero, non va bene.

05:58.500 --> 06:01.140
Quindi, dobbiamo aggiustare il tutto aggiungendo un punto

06:01.140 --> 06:03.520
e virgola e aggiungendo un'altra coppia chiave-valore

06:03.520 --> 06:06.300
in cui diciamo che l'età deve essere di tipo numero.

06:06.300 --> 06:09.670
Quindi non 30 qui, che in realtà sarebbe supportato in TypeScript,

06:09.670 --> 06:12.673
limitando il numero a un numero specifico, ma ci imbatteremo

06:12.673 --> 06:15.600
in problemi non appena lo cambieremo.

06:15.600 --> 06:19.060
Invece, qui voglio solo dire che l'età dovrebbe essere un numero.

06:19.060 --> 06:22.360
E ora stiamo assegnando esplicitamente lo stesso

06:22.360 --> 06:24.870
TypeScript dedotto in precedenza.

06:24.870 --> 06:26.900
Come avete imparato, questa non è una buona

06:26.900 --> 06:28.570
pratica, ma per capire i tipi di oggetto

06:28.570 --> 06:29.940
ho voluto farlo qui.

06:29.940 --> 06:32.315
Si tratta comunque di qualcosa che si può fare.

06:32.315 --> 06:37.010
È meglio lasciare che TypeScript lo deduca come abbiamo

06:37.010 --> 06:40.440
fatto in precedenza, in questo modo.

06:40.440 --> 06:42.351
Ora, per mostrare qualcosa di

06:42.351 --> 06:45.450
interessante, se ritorno a questo codice subottimale,

06:45.450 --> 06:47.970
in cui assegniamo esplicitamente un tipo

06:47.970 --> 06:49.920
che TypeScript sarebbe in grado

06:49.920 --> 06:54.920
di dedurre, se compiliamo questo codice, ovviamente funziona.

06:55.180 --> 06:56.900
Possiamo accedere alla proprietà name, ma se

06:56.900 --> 06:59.077
diamo un'occhiata ad app. js vediamo che questa

06:59.077 --> 07:01.220
assegnazione di tipo viene rimossa qui.

07:01.220 --> 07:03.417
E questo, ovviamente, dovrebbe essere qualcosa di scontato.

07:03.417 --> 07:06.290
Come ho detto, i tipi e le assegnazioni di tipo non

07:06.290 --> 07:08.120
fanno parte di JavaScript.

07:08.120 --> 07:09.460
Sono solo TypeScript.

07:09.460 --> 07:10.800
Volevo solo mostrarlo di nuovo

07:10.800 --> 07:12.840
per chiarire che questa sintassi non sta creando

07:12.840 --> 07:15.080
un oggetto JavaScript, che si trova da qualche parte

07:15.080 --> 07:16.485
nel nostro codice.

07:16.485 --> 07:21.263
È solo la rappresentazione di TypeScript di un tipo di oggetto

07:21.263 --> 07:24.570
che aiuta TypeScript a capire gli oggetti con

07:24.570 --> 07:25.900
cui si lavora.

07:25.900 --> 07:29.950
La sintassi migliore, ovviamente, è questa, come avete imparato.
