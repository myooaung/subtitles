WEBVTT

00:02.260 --> 00:05.180
Instructeur: Als we nu terugkomen op deze interface

00:05.180 --> 00:08.230
hier, is de vraag waarom we dit nodig hebben?

00:08.230 --> 00:10.160
Zouden we niet precies hetzelfde hebben

00:10.160 --> 00:13.420
als we hier en daar een aangepast type zouden toevoegen?

00:13.420 --> 00:15.580
Het verschil is alleen dat we een gelijkheidsteken

00:15.580 --> 00:18.470
moeten toevoegen en dan zeggen we dat het Persoonstype een object

00:18.470 --> 00:19.940
is dat er zo uitziet?

00:19.940 --> 00:21.490
En inderdaad, als we dat opslaan,

00:21.490 --> 00:23.220
compileert het zonder fouten.

00:23.220 --> 00:26.740
Dus we kunnen onze interface vervangen door zo'n type

00:26.740 --> 00:28.490
en het werkt als voorheen.

00:28.490 --> 00:31.290
Waarom hebben we dan een interface?

00:31.290 --> 00:32.277
Welnu, een interface

00:32.277 --> 00:35.310
en een custom type zijn niet precies hetzelfde terwijl

00:35.310 --> 00:39.260
je ze vaak door elkaar kunt gebruiken en je een interface kunt gebruiken

00:39.260 --> 00:43.520
in plaats van een custom type of andersom.

00:43.520 --> 00:45.720
Er zijn ook enkele verschillen.

00:45.720 --> 00:47.400
Nou, een natuurverschil is dat interfaces

00:47.400 --> 00:49.070
alleen kunnen worden gebruikt om

00:49.070 --> 00:51.470
de structuur van een object te beschrijven, daar

00:51.470 --> 00:53.780
kun je ook type voor gebruiken, maar in plaats van

00:53.780 --> 00:55.250
een aangepast type, kun je ook

00:55.250 --> 00:56.800
andere dingen opslaan, zoals union

00:56.800 --> 01:00.350
types en zo, wat we vroeg in de cursus hebben gedaan.

01:00.350 --> 01:03.740
Dat klinkt alsof type dus flexibeler is, maar

01:03.740 --> 01:08.510
de andere kant van de medaille is dat interface duidelijker is.

01:08.510 --> 01:10.870
Als je iets definieert als een interface,

01:10.870 --> 01:12.900
is het superduidelijk dat je daarmee

01:12.900 --> 01:15.580
de structuur van een object wilt definiëren.

01:15.580 --> 01:18.360
En inderdaad, als het gaat om het definiëren van

01:18.360 --> 01:21.630
objecttypen, zie je vaker interfaces in het wild.

01:21.630 --> 01:23.800
Dan zie je aangepaste types.

01:23.800 --> 01:26.410
Nu, een ander ding dat je kunt doen met interfaces,

01:26.410 --> 01:27.530
maar dat je alleen

01:27.530 --> 01:30.090
zou kunnen doen met aangepaste types, is een

01:30.090 --> 01:33.360
interface implementeren in een klasse.

01:33.360 --> 01:34.820
Wat bedoelen we daarmee?

01:34.820 --> 01:38.360
De reden waarom je vaak met interfaces werkt, is dat een

01:38.360 --> 01:40.550
interface kan worden gebruikt als

01:40.550 --> 01:43.750
een contract dat een klasse kan implementeren en waaraan

01:43.750 --> 01:46.400
een klasse zich dan moet houden.

01:46.400 --> 01:48.150
Wat bedoelen we daarmee?

01:48.150 --> 01:52.390
Laten we zeggen dat onze interface geen Person interface is met

01:52.390 --> 01:53.970
de naam en de leeftijd, maar

01:53.970 --> 01:57.690
dat we hem in plaats daarvan Greetable noemen.

01:57.690 --> 01:59.270
Nu lijkt dit misschien een

01:59.270 --> 02:01.090
vreemde naam, maar uiteindelijk

02:01.090 --> 02:03.560
zegt dit gewoon dat elk object dat als Greetable

02:03.560 --> 02:06.310
moet worden behandeld, een object moet zijn met

02:06.310 --> 02:09.251
een naam en met een groet-methode.

02:09.251 --> 02:10.783
Dus nu kunnen we hier zeggen

02:10.783 --> 02:14.630
dat deze variabele user1 een Greetable-object moet bevatten en natuurlijk

02:14.630 --> 02:16.730
krijgen we nu een foutmelding omdat

02:16.730 --> 02:19.930
we meer hebben dan alleen naam en groet.

02:19.930 --> 02:22.000
Maar we kunnen deze interface gebruiken

02:22.000 --> 02:25.860
om hem te delen met eventueel meerdere klassen, maar dan moeten

02:25.860 --> 02:27.410
we ervoor zorgen dat elke

02:27.410 --> 02:30.860
klasse die deze interface aanhangt een name property

02:30.860 --> 02:33.410
heeft en een greet method.

02:33.410 --> 02:35.730
Dus hier zouden we nu een Person klasse kunnen toevoegen,

02:35.730 --> 02:36.970
de naam is weer beschikbaar omdat

02:36.970 --> 02:38.540
we de interface hernoemd hebben.

02:38.540 --> 02:40.790
En nu, vertel typescript en deze

02:40.790 --> 02:45.480
klasse moeten zich in principe houden aan deze interface.

02:45.480 --> 02:48.350
Het moet deze interface implementeren.

02:48.350 --> 02:53.000
Het moet dat contract volgen dat door deze interface is ingesteld.

02:53.000 --> 02:55.260
We doen dit door het sleutelwoord implements toe

02:55.260 --> 02:56.930
te voegen na de naam van de klasse.

02:56.930 --> 02:59.280
En dan de naam van onze interface, Greetable.

03:00.420 --> 03:02.780
En je kunt meer dan één interface implementeren.

03:02.780 --> 03:04.710
Dat is een verschil met een erfenis.

03:04.710 --> 03:07.270
Je kunt slechts van één klasse

03:07.270 --> 03:09.370
erven, je kunt meerdere interfaces

03:09.370 --> 03:12.730
implementeren door ze eenvoudigweg te

03:12.730 --> 03:16.000
scheiden met een komma.

03:16.000 --> 03:17.710
Hier heb ik er maar één.

03:17.710 --> 03:20.350
En nu, de implicatie hiervan is dat we hier

03:20.350 --> 03:21.740
een fout krijgen omdat

03:21.740 --> 03:25.200
onze klasse de interface verkeerd implementeert.

03:25.200 --> 03:27.240
Het heeft niet de naam eigenschap,

03:27.240 --> 03:29.690
heeft niet de groet methode.

03:29.690 --> 03:33.960
Dus nu moeten we dit hier in onze klasse instellen, misschien

03:33.960 --> 03:35.610
zal ik een constructor

03:35.610 --> 03:38.173
instellen waar we een waarde krijgen

03:39.010 --> 03:41.260
voor de naam, en het dan zo instellen,

03:41.260 --> 03:44.380
en waar we ook onze groet methode toevoegen

03:44.380 --> 03:48.080
waar we dan deze logica uit kunnen halen.

03:48.080 --> 03:50.780
In onze klas kunnen we meer hebben.

03:50.780 --> 03:52.340
We kunnen meer velden hebben,

03:52.340 --> 03:53.920
we kunnen meer methoden hebben,

03:53.920 --> 03:56.030
we kunnen deze klasse ook uitbreiden, we

03:56.030 --> 03:59.170
kunnen met deze klasse werken zoals we altijd kunnen.

03:59.170 --> 04:02.640
Maar we moeten deze methode correct implementeren om deze

04:02.640 --> 04:04.400
name property te hebben, omdat

04:04.400 --> 04:07.040
we deze interface implementeren.

04:07.040 --> 04:09.740
En daarom worden interfaces vaak gebruikt om functionaliteit

04:09.740 --> 04:13.870
te delen tussen verschillende klassen, zonder rekening te houden met hun

04:13.870 --> 04:16.550
concrete implementatie.

04:16.550 --> 04:19.240
Binnen interfaces kun je geen implementatie

04:19.240 --> 04:22.450
of waarden hebben, maar wel over de structuur, over de eigenschappen

04:22.450 --> 04:24.980
die een klasse moet hebben.

04:24.980 --> 04:28.120
Het is dus een beetje als werken met abstracte klassen,

04:28.120 --> 04:29.640
met dit verschil dat een

04:29.640 --> 04:33.520
interface helemaal geen uitvoeringsdetails heeft, terwijl

04:33.520 --> 04:37.160
abstracte klassen een mengeling kunnen zijn van je moet

04:37.160 --> 04:39.330
deze delen overschrijven en ik heb

04:39.330 --> 04:42.470
een concrete uitvoeringsdelen.

04:42.470 --> 04:43.730
Dat is een belangrijk

04:43.730 --> 04:46.860
verschil tussen interfaces en abstracte klassen.

04:46.860 --> 04:47.850
Maar daarmee hebben

04:47.850 --> 04:49.790
we onze persoonsklasse hier.

04:49.790 --> 04:53.910
En nu kan user1 worden aangemaakt door new Person te

04:53.910 --> 04:55.930
gebruiken en bijvoorbeeld

04:55.930 --> 04:58.090
de naam in te voeren.

04:58.090 --> 04:59.730
En nu, gebruik zien dat het

04:59.730 --> 05:02.300
goed is dat we deze leeftijd hier hebben in

05:02.300 --> 05:05.870
user1 omdat we boot user1 gebaseerd op Person, Person implementeert

05:05.870 --> 05:07.540
Greetable, en je kunt meer dan

05:07.540 --> 05:10.440
Greetable toevoegen in een klasse, maar je moet

05:10.440 --> 05:15.120
voldoen aan de voorwaarden ingesteld door de interface.

05:15.120 --> 05:17.130
En daarom hebben we nu, als we alles opslaan,

05:17.130 --> 05:18.730
een geldige code, en als we onze user1

05:18.730 --> 05:23.040
daar beneden loggen met console. log, zien we dat het een normaal object

05:23.040 --> 05:25.430
is met de leeftijd en de naam in dit geval,

05:25.430 --> 05:27.590
maar de belangrijkste conclusie

05:27.590 --> 05:30.950
is dat het gebaseerd is op een klasse die de interface

05:30.950 --> 05:32.770
implementeert.

05:32.770 --> 05:35.550
En je kunt dan allemaal de interface als type gebruiken.

05:35.550 --> 05:37.780
We hadden dit natuurlijk ook op type Person kunnen

05:37.780 --> 05:40.580
zetten, maar zoals je ziet werkt het gebruik van type Greetable

05:40.580 --> 05:42.200
hier omdat het Person-object dat we

05:42.200 --> 05:46.300
uiteindelijk in de klasse user1 opslaan, gebaseerd is op de Greetable-interface.

05:46.300 --> 05:47.750
Het implementeert dit.

05:47.750 --> 05:49.820
Dus dat is nog een krachtige functie.

05:49.820 --> 05:53.690
Je kunt een interface gebruiken als type op een bepaalde constante

05:53.690 --> 05:58.010
of variabele, die dan in feite een andere klasse van een ander type opslaat,

05:58.010 --> 06:03.950
die op zijn beurt gebaseerd is op het interfacetype omdat het het implementeert.

06:03.950 --> 06:06.530
Dus dat zijn interfaces in een notendop.

06:06.530 --> 06:08.643
Veel krachtige functies inbegrepen.
