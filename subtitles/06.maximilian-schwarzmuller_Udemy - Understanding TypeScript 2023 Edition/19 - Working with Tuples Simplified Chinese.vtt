WEBVTT

00:02.460 --> 00:05.590
- ：因此支持数组, 并且支持数字､ 字符串､

00:05.590 --> 00:07.620
布尔值､ 对象和数组｡

00:07.620 --> 00:11.400
我们得到了核心值或者值类型, TypeScript中不支持JavaScript,

00:11.400 --> 00:17.884
你们会在数组中的对象的例子中学习到, TypeScript甚至提供了更多的功能, 它在那里,

00:17.884 --> 00:22.720
但这是更高级的, 这就是为什么我们稍后会看到它, 但即使是这些核心类型,

00:22.720 --> 00:30.140
你们会在前面的课程中学习到的, 也是支持的｡

00:30.140 --> 00:33.540
现在TypeScript包含了一些新的概念,

00:33.540 --> 00:37.840
新的类型, 我们从普通的Java脚本中不知道, 例如,

00:37.840 --> 00:40.300
元组类型｡

00:40.300 --> 00:46.570
现在你可能知道其他编程语言中的元组, JavaScript没有｡

00:46.570 --> 00:52.290
这是一个元组, 你会说, 这是一个数组｡

00:52.290 --> 00:52.290
它是一个数组,

00:52.290 --> 00:54.520
但它是一个固定长度的数组而且不仅是固定长度的,

00:54.520 --> 00:58.650
而且是固定类型的.

00:58.650 --> 01:00.730
这东西在哪里能派上用场？

01:00.730 --> 01:03.350
比如说在person上,

01:03.350 --> 01:07.830
我们实际上有一个属性role, 它是一个数组,

01:07.830 --> 01:22.765
只有两个元素, 第一个是数字标识符比如2第二个是字符串标识符和可读的描述比如author.

01:22.765 --> 01:26.496
这应该总是有两个元素, 因为在我们编写的这个应用程序中,

01:26.496 --> 01:35.185
一个用户或一个人只能有一个角色, 一个角色只能由两个元素组成｡

01:35.185 --> 01:37.400
当然, 我们可以在这里使用optic,

01:37.400 --> 01:41.744
但出于某种原因, 我们希望有一个正好包含两个元素的数组,

01:41.744 --> 01:43.118
其中第一个元素总是数字标识符,

01:43.118 --> 01:50.220
第二个元素总是字符串标识符或描述, 或者你想怎么称呼它｡

01:50.220 --> 01:52.420
现在, 如果我们将鼠标悬停在这个TypeScript上,

01:52.420 --> 01:55.730
实际上会推断出这个奇怪的类型, 我们以前从未见过, 事实上, 如果我们否认, 意味着TypeScript理解我们有一个数组,

01:55.730 --> 02:06.710
它可能包含偶数字符串或数字, 这是一个联合类型, 我们稍后会深入讨论这些类型｡

02:06.710 --> 02:06.710
关键点是TypeScript理解这应该是一个具有这些类型值的数组｡

02:11.668 --> 02:14.580
我们可以运行这个代码,

02:14.580 --> 02:18.780
人员角色, 推送, 管理.

02:18.780 --> 02:20.250
对于我们的应用程序,

02:20.250 --> 02:23.960
这可能没有意义, 因为我们知道只需要两个元素｡

02:23.960 --> 02:28.963
但是TypeScript并不知道我们只需要两个元素｡

02:28.963 --> 02:28.963
我们还可以切换person角色,

02:28.963 --> 02:35.200
索引为1的第二个元素也是一个数字｡

02:35.200 --> 02:38.010
这是可行的, 因为TypeScript只知道role应该是字符串或数字数组类型,

02:38.010 --> 02:52.580
因此, 在这里为第二个元素分配一个数字, 并因此将其替换为一个数字是允许的, 因为我们只是说了一些我们通常可以在那里使用的类型｡

02:52.580 --> 02:55.040
我们知道我们想要的正是这种结构｡ 

02:55.040 --> 03:01.770
两个元素, 第一个元素是数字, 第二个元素是字符串, 但TypeScript不这样做｡

03:01.770 --> 03:01.770
对于这样的场景,

03:01.770 --> 03:10.865
元组将是完美的｡ 我们可以通过显式设置角色的类型来告诉TypeScript应该是什么角色｡

03:11.010 --> 03:13.230
这里我们还有一个例子, TypeScript没有phototype,

03:13.230 --> 03:19.927
但是我们明确地想要覆盖它｡

03:19.927 --> 03:19.927
因此,

03:19.927 --> 03:23.041
现在我们可以通过在person后面添加冒号, 然后添加花括号,

03:23.041 --> 03:31.180
然后names应该是一个字符串, age应该是一个数字, hobtors应该是一个字符串数组来添加显式对象类型｡

03:31.180 --> 03:33.740
所以一切都是由TypeScript推断出来的｡ 

03:33.740 --> 03:35.401
因此, 我们就不需要, 这个显式赋值,

03:35.401 --> 03:38.789
正如你所知道的, 这是很糟糕的｡

03:38.789 --> 03:40.470
但是现在我们有一个场景,

03:40.470 --> 03:43.565
在这个场景中, 推理不按照我们想要的方式工作,

03:43.565 --> 03:47.510
并且, 我们想要将角色设置为元组｡

03:47.510 --> 03:49.730
现在我们不用设置一个双字符串数组或者数字数组,

03:49.730 --> 03:55.180
也不用使用之前第三种类型, 我们现在可以使用一个特殊的类型.

03:55.180 --> 03:56.810
我们再次使用方括号,

03:56.810 --> 04:03.637
但现在在方括号外添加数字, 然后添加逗号, 最后添加字符串｡

04:03.637 --> 04:07.340
现在这标记了一个元组类型｡ 

04:07.340 --> 04:10.729
元组是一个特殊的结构, TypeScript理解, 在Java脚本中将是一个正常的数组,

04:10.729 --> 04:18.190
但在使用TypeScript开发期间, 我们将得到类似于这里的代码错误｡

04:18.190 --> 04:20.313
元组有什么作用？

04:21.620 --> 04:23.564
这里告诉TypeScript,

04:23.564 --> 04:27.195
我想要一个特殊的数组, 正好有两个元素, 因为我正好有两个类型,

04:27.195 --> 04:32.020
第一个元素应该是数字.

04:32.020 --> 04:35.436
第二个元素应该是一个字符串, 因此,

04:35.436 --> 04:39.033
如果我们在这里编译这个代码, 我会得到一个错误,

04:40.663 --> 04:48.346
关于10在这里不能被赋值为一个类型, 因为我们想要一个字符串作为第二个值,

04:48.346 --> 04:56.544
如果我在这里赋值10作为第二个值, 那么我显然没有遵循这个规则｡

04:56.544 --> 05:01.544
如果您将其注释掉, 然后编译, 它就可以工作了｡ 

05:02.240 --> 05:06.290
这有点奇怪, 因为为什么pushing在这里有效,

05:06.290 --> 05:08.610
因为我们都说role应该正好有两个元素,

05:08.610 --> 05:14.980
那么为什么我们可以把admin推到role数组上.

05:14.980 --> 05:19.300
Push实际上是元组中允许的一个例外｡ 

05:19.300 --> 05:22.410
不幸的是, TypeScript不能捕捉这个错误,

05:22.410 --> 05:24.840
但至少它确保了我们没有在这里赋值错误,

05:24.840 --> 05:31.500
并且在push之外, 我们还得到了一些关于长度的支持｡

05:31.500 --> 05:33.671
如果我们将人员角色设置为新值｡ 

05:33.671 --> 05:39.710
例如, 一个空数组是不允许的, 一个与上面定义的结构完全相同的数组是允许的,

05:39.710 --> 05:43.510
如果我在这里加了一个额外的元素.

05:43.510 --> 05:45.880
然后我们会再次得到一个错误｡ 

05:45.880 --> 05:50.720
所以如果我们这样赋值, 长度是强制的, 但对于推等等不是｡

05:50.720 --> 05:52.840
这是你必须知道的, 但仍然得到这种支持,

05:52.840 --> 06:02.240
这种支持, 是相当不错的, 如果你有一个场景, 你需要正好X数量的值在一个数组中, 你知道每个值的类型,

06:02.240 --> 06:11.313
那么您可能需要考虑使用元组而不是数组, 以使应用程序更加严格, 从而更清楚地了解您要使用的数据类型｡

06:11.313 --> 06:17.543
以及您期望的数据类型｡
