WEBVTT

00:02.450 --> 00:05.030
Instruktor: Odejdźmy teraz od przeciążania funkcji

00:05.030 --> 00:09.010
i pozwólmy sobie przedstawić jeszcze jedną bardzo zgrabną funkcję.

00:09.010 --> 00:13.350
I to jest właśnie opcjonalne łańcuchowanie.

00:13.350 --> 00:16.720
Powiedzmy, że masz aplikację, w której

00:16.720 --> 00:21.603
otrzymujesz dane z backendu z bazy danych lub z dowolnego

00:21.603 --> 00:26.350
źródła, w którym nie wiesz z pewnością, czy w obiekcie zdefiniowana

00:26.350 --> 00:29.500
jest pewna właściwość.

00:29.500 --> 00:33.920
Powiedzmy, że mamy fetchedUserData i fetchedUserData może być obiektem

00:33.920 --> 00:36.380
o użytkowniku, który pobraliśmy.

00:36.380 --> 00:39.705
Tam możemy mieć ID możemy mieć nazwę Max

00:39.705 --> 00:44.705
i możemy również oczekiwać innej właściwości job, która

00:45.730 --> 00:50.550
jest obiektem, który ma tytuł i który następnie ma również

00:50.550 --> 00:53.950
opis, moja własna firma.

00:53.950 --> 00:56.900
Teraz jeśli otrzymamy takie dane oczywiście możemy z nimi pracować.

00:56.900 --> 01:00.150
Teraz możesz zrobić bardziej złożone rzeczy, ale tutaj

01:00.150 --> 01:03.940
na początek powiedzmy, że wszystko, co robię, to faktycznie

01:03.940 --> 01:06.871
ładuję nazwę stanowiska tutaj, prawda.

01:06.871 --> 01:09.940
Teraz, jeśli zapisaliśmy to z naszym serwerem deweloperskim

01:09.940 --> 01:12.880
uruchomionym i kompilacją uruchomioną w trybie zegarka,

01:12.880 --> 01:14.420
otrzymam CEO tutaj.

01:14.420 --> 01:17.395
To nie jest zbyt wymyślne, jednak jeśli pobieramy

01:17.395 --> 01:22.395
to z backendu, z jakiegokolwiek powodu może nie pobieramy wszystkich

01:23.080 --> 01:27.690
danych, których potrzebujemy, może niektóre dane nie są ustawione

01:27.690 --> 01:30.490
w tym momencie.

01:30.490 --> 01:34.730
W większych, bardziej złożonych aplikacjach z pewnością czasami

01:34.730 --> 01:39.240
pracujesz ze strukturami z zagnieżdżonymi danymi, gdzie nie wiesz z pewnością,

01:39.240 --> 01:42.650
czy jakaś właściwość na obiekcie jest ustawiona, czy

01:42.650 --> 01:45.340
może jest niezdefiniowana.

01:45.340 --> 01:49.680
Więc tutaj powiedzmy, że job nie istnieje tutaj z jakiegokolwiek powodu

01:49.680 --> 01:53.180
nie pobieramy go, tutaj oczywiście dostaję błąd teraz TypeScript

01:53.180 --> 01:55.930
narzeka na to, ponieważ wie, że nie ma właściwości

01:55.930 --> 01:57.843
job teraz.

01:57.843 --> 02:01.347
Problemem jest to, że wie, że dla tych danych nie wiedziałby,

02:01.347 --> 02:05.660
gdyby to były dane, które pobieramy z jakiegoś pliku, który nie jest kontrolowany

02:05.660 --> 02:09.720
przez TypeScript lub jak właśnie powiedziałem, jeśli być może pobieramy

02:09.720 --> 02:12.530
to z backendu i nie wiemy z pewnością, które dane

02:12.530 --> 02:15.550
zostaną zwrócone.

02:15.550 --> 02:18.150
Teraz, jeśli nie wiesz, czy jest to zdefiniowane, czy nie,

02:18.150 --> 02:21.730
to co możemy zrobić w zwykłym JavaScript, to spróbować uzyskać dostęp do pracy

02:21.730 --> 02:25.098
i jeśli to działa, kontynuujemy i uzyskujemy dostęp do tytułu.

02:25.098 --> 02:29.450
Jest to sposób JavaScriptu na sprawdzenie, czy coś istnieje, zanim

02:29.450 --> 02:33.520
zanurkujemy głębiej w ten potencjalny obiekt i jeśli jest to niezdefiniowane,

02:33.520 --> 02:37.110
ten kod nigdy się nie uruchamia i stąd mamy szerszy błąd czasu

02:37.110 --> 02:39.400
wykonania.

02:39.400 --> 02:42.410
Ponownie tutaj TypeScript oczywiście wie, że zadanie

02:42.410 --> 02:45.180
nie istnieje, ale jeśli byłoby to pobierane z jakiegoś

02:45.180 --> 02:48.470
źródła, do którego TypeScript nie może zajrzeć, jak wynik

02:48.470 --> 02:52.910
żądania HTTP, byłby to bezpieczny sposób na uniknięcie błędów run time w

02:52.910 --> 02:54.920
JavaScript.

02:54.920 --> 02:58.110
Teraz, jeśli to istnieje, otrzymujemy to samo wyjście, co wcześniej.

02:58.110 --> 03:01.400
Jeśli nie istnieje, nie otrzymujemy przynajmniej błędu

03:01.400 --> 03:02.233
run time.

03:02.233 --> 03:07.020
Z TypeScript, faktycznie masz ładniejszy sposób na zrobienie tego.

03:07.020 --> 03:10.520
Otrzymałeś opcjonalny operator łańcucha.

03:10.520 --> 03:15.320
Możesz dodać znak zapytania po rzeczy, której nie jesteś pewien, czy jest

03:15.320 --> 03:16.880
zdefiniowana, czy nie.

03:16.880 --> 03:21.600
Przynajmniej jeśli używasz TypeScript w wersji 3. 7 lub wyższej.

03:21.600 --> 03:24.770
Tutaj moje IDE nie lubi tego, ale jest to obsługiwana

03:24.770 --> 03:26.300
składnia wtedy.

03:26.300 --> 03:30.370
To mówi TypeScriptowi, czy to istnieje, jeśli tak, to dostęp do pracy i stąd

03:30.370 --> 03:33.450
możemy dodać ten znak zapytania, a więc dostęp do tytułu

03:33.450 --> 03:36.314
tylko wtedy, gdy praca jest zdefiniowana.

03:36.314 --> 03:39.300
Teraz, jeśli to zrobimy, nadal otrzymam błąd tutaj, jeśli

03:39.300 --> 03:42.490
spróbuję go skompilować, ponieważ TypeScript nadal wie z pewnością,

03:42.490 --> 03:44.510
że praca nie istnieje.

03:44.510 --> 03:47.370
Ale jeśli nie wiedziałby o tym lub jeśli skomentuję to

03:47.370 --> 03:51.840
w tym kompiluje się po prostu dobrze i wszystko wykonuje się tak jak wcześniej.

03:51.840 --> 03:56.400
Więc ten opcjonalny operator łańcuchowy tutaj pomaga nam bezpiecznie uzyskać

03:56.400 --> 04:00.730
dostęp do zagnieżdżonych właściwości i zagnieżdżonych obiektów w naszych

04:00.730 --> 04:03.610
danych obiektu i jeśli rzecz przed znakiem zapytania

04:03.610 --> 04:07.061
jest niezdefiniowana, nie uzyska dostępu do rzeczy po tym i

04:07.061 --> 04:10.910
dlatego nie rzuci błędu runtime, ale zamiast tego po prostu nie będzie

04:10.910 --> 04:12.420
kontynuowany.

04:12.420 --> 04:15.210
Więc za kulisami jest to w zasadzie skompilowane do sprawdzenia

04:15.210 --> 04:18.380
if, które sprawdza, czy to istnieje, zanim spróbuje uzyskać dostęp

04:18.380 --> 04:19.213
do tego.
