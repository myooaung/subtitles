WEBVTT

00:02.170 --> 00:06.250
-: Ahora, además de los objetos, también tenemos arrays en JavaScript,

00:06.250 --> 00:08.300
un tipo de datos muy importante.

00:08.300 --> 00:10.810
Los arrays se crean así en JavaScript, como sabes, y puedes

00:10.810 --> 00:12.560
almacenar cualquier dato en ellos: números,

00:12.560 --> 00:15.970
cadenas, booleanos, objetos, otros arrays, puedes tener arrays anidados,

00:15.970 --> 00:17.970
después de todo, y también puedes mezclar

00:17.970 --> 00:19.380
datos.

00:19.380 --> 00:23.200
Puedes tener un array con cadenas y números mezclados.

00:23.200 --> 00:25.570
Y TypeScript también soporta arrays.

00:25.570 --> 00:29.260
Se admite cualquier matriz de JavaScript y los tipos de esa

00:29.260 --> 00:32.140
matriz pueden ser flexibles, o estrictos.

00:32.140 --> 00:35.200
Ahora echemos un vistazo a eso en TypeScript.

00:35.200 --> 00:38.760
Para ello aquí en app. ts, digamos que nuestra persona también

00:38.760 --> 00:42.810
tiene una clave de aficiones, pero por supuesto también podríamos tener una variable

00:42.810 --> 00:45.660
o una constante aficiones fuera del objeto.

00:45.660 --> 00:49.050
Por lo tanto, el uso de matrices como exactamente lo mismo dentro

00:49.050 --> 00:50.853
de los objetos y fuera de ellos.

00:51.950 --> 00:54.780
Así que aquí tenemos aficiones, y las aficiones

00:54.780 --> 00:58.140
podrían ser los deportes, y la cocina, digamos.

00:58.140 --> 01:01.150
Así que tengo dos elementos allí, y estos elementos,

01:01.150 --> 01:03.620
como se puede decir, son cadenas.

01:03.620 --> 01:07.570
Ahora, si pasamos por encima de los pasatiempos, TypeScript detecta correctamente

01:07.570 --> 01:10.630
la distancia de la matriz de cadenas de tipo.

01:10.630 --> 01:12.500
Esta es una sintaxis que no has visto

01:12.500 --> 01:16.140
antes, pero así es como TypeScript describe un array de datos.

01:16.140 --> 01:18.510
Tienes los corchetes, y delante de eso,

01:18.510 --> 01:21.340
el tipo de datos que se almacena allí.

01:21.340 --> 01:23.530
Ahora este es el tipo, el grupo del tipo inferido.

01:23.530 --> 01:25.810
Vio que aquí tenemos un array y que sólo tenemos

01:25.810 --> 01:29.110
cadenas en él, por lo que dedujo que los hobbies probablemente

01:29.110 --> 01:31.940
deberían ser un array de cadenas.

01:31.940 --> 01:34.903
Y, efectivamente, para las aficiones, eso tiene mucho sentido.

01:36.210 --> 01:41.040
Por supuesto, también se puede establecer explícitamente el tipo de variable.

01:41.040 --> 01:44.720
Si añadimos una nueva variable, actividades favoritas, e inicialmente

01:45.580 --> 01:48.670
debería estar vacía, entonces podríamos querer establecer

01:48.670 --> 01:51.160
explícitamente el tipo de datos almacenados

01:51.160 --> 01:53.140
allí.

01:53.140 --> 01:55.590
Ahora digamos que debería ser un array de cadenas,

01:55.590 --> 01:57.570
bien, entonces podemos repetir lo que acabamos

01:57.570 --> 02:00.330
de ver; escribir cadena, y luego corchetes allí después,

02:00.330 --> 02:03.330
y esto le dice a TypeScript que lo que almacenamos aquí no es una

02:03.330 --> 02:05.990
sola cadena, es un array de cadenas.

02:05.990 --> 02:09.550
Y de hecho, si intento almacenar sólo los deportes allí,

02:09.550 --> 02:12.183
me da un error. Obtengo un error porque

02:12.183 --> 02:15.650
eso aquí es una sola cadena, y no una matriz de cadenas.

02:15.650 --> 02:19.370
No obtengo un error, por supuesto, si envuelvo esto entre corchetes

02:19.370 --> 02:22.610
y por lo tanto crear efectivamente una matriz.

02:22.610 --> 02:25.870
Sin embargo, si añado un número, por ejemplo, obtengo un

02:25.870 --> 02:29.220
error, ya que definimos esto como una matriz de cadenas.

02:29.220 --> 02:31.290
Aquí tenemos una matriz mixta.

02:31.290 --> 02:34.920
Es un array de cadenas y números, por lo que no funciona

02:34.920 --> 02:37.180
y no se admite aquí.

02:37.180 --> 02:40.100
Si quisiéramos admitir una matriz mixta de este

02:40.100 --> 02:43.120
tipo, una solución sería utilizar "any" aquí.

02:43.120 --> 02:45.880
El tipo "any" es un tipo especial en TypeScript,

02:45.880 --> 02:47.610
que veremos más adelante, que

02:47.610 --> 02:50.530
básicamente significa, haz lo que quieras.

02:50.530 --> 02:53.020
Por supuesto, es un tipo que no quieres usar muy a menudo

02:53.020 --> 02:55.630
porque perderás los beneficios que te da TypeScript, tu

02:55.630 --> 02:58.170
vuelta al mundo de JavaScript, donde también puedes usar

02:58.170 --> 03:00.140
cualquier valor en cualquier lugar.

03:00.140 --> 03:02.940
Así que "cualquiera" es realmente flexible, pero la

03:02.940 --> 03:06.270
flexibilidad tiene el precio de renunciar básicamente a todos

03:06.270 --> 03:08.710
los beneficios que ofrece TypeScript.

03:08.710 --> 03:10.840
Así que aquí voy a volver a la cadena, porque realmente

03:10.840 --> 03:12.530
no quiero tener un número allí, y por lo tanto

03:12.530 --> 03:14.933
podemos eliminar el número y estamos bien.

03:15.900 --> 03:18.830
Los arrays también nos dan un gran ejemplo, en realidad

03:18.830 --> 03:21.890
al igual que los objetos y sus propiedades, de lo dinámica

03:21.890 --> 03:25.730
que es la inferencia de tipos de TypeScript.

03:25.730 --> 03:28.750
Si añadimos un bucle "for" aquí en la parte inferior, y queremos

03:28.750 --> 03:31.570
ir por todas las aficiones de la persona, podemos por supuesto

03:31.570 --> 03:33.220
utilizar un bucle "for" tradicional

03:33.220 --> 03:38.220
con para const afición de la persona. hobbies, así que accediendo a la propiedad

03:38.620 --> 03:41.130
hobbies y recorriendo todos los hobbies

03:41.130 --> 03:42.793
allí, almacenando cada hobby

03:43.690 --> 03:46.780
para cada iteración en esta constante, y luego podemos

03:46.780 --> 03:50.090
consultar el log hobby aquí.

03:50.090 --> 03:52.000
Ahora que no es demasiado elegante, eso es algo

03:52.000 --> 03:53.710
que sabemos de JavaScript, derecho.

03:53.710 --> 03:58.280
Si ahora compilo esta aplicación. ts archivo ahí abajo, obtenemos

03:58.280 --> 04:01.700
el nombre de esta línea, y a partir de ahí las

04:01.700 --> 04:04.750
dos aficiones que se imprimen.

04:04.750 --> 04:07.800
Pero lo que es realmente interesante aquí es que en el pasatiempo, podemos

04:07.800 --> 04:11.040
acceder a cualquier cosa, podemos acceder a cualquier cadena.

04:11.040 --> 04:14.210
Por ejemplo, a UpperCase, me sale este autocompletado

04:14.210 --> 04:16.230
y TypeScript no se queja.

04:16.230 --> 04:18.070
¿Por qué no se queja?

04:18.070 --> 04:21.930
Porque sabe que hobbies es de tipo string array, así que

04:21.930 --> 04:25.830
cuando accedo a person. hobbies, la inferencia de TypeScript

04:25.830 --> 04:29.700
detecta que los hobbies serán una matriz de cadenas.

04:29.700 --> 04:33.450
Así que hobby, en la parte superior, se identifica correctamente como

04:33.450 --> 04:36.000
una cadena, porque ya que vamos a través de una matriz

04:36.000 --> 04:38.370
de cadenas, así que los valores individuales

04:38.370 --> 04:40.510
tienen que ser sólo cadenas.

04:40.510 --> 04:43.450
Y por lo tanto los tipos nos ofrecen un gran apoyo ahí abajo,

04:43.450 --> 04:46.490
y nos permiten hacer cualquier cosa con hobby que se pueda

04:46.490 --> 04:50.050
hacer con una cadena, porque sabe con certeza que hobby será una

04:50.050 --> 04:53.810
cadena debido a los tipos que configuramos ahí arriba.

04:53.810 --> 04:56.300
Y eso es realmente flexible, y por supuesto una gran

04:56.300 --> 04:59.030
característica que hace que escribir código sea mucho

04:59.030 --> 05:01.360
más fácil y mucho más flexible y seguro.

05:01.360 --> 05:04.440
Por ejemplo, aquí obtendríamos un error si se intentara

05:04.440 --> 05:08.570
acceder al pasatiempo. mapa, si pensaba que esto sería un array.

05:08.570 --> 05:12.060
El método map está disponible en arrays, pero no en cadenas.

05:12.060 --> 05:14.540
Y aquí, correctamente, de nuevo, un error

05:14.540 --> 05:17.810
de que map no existe en el tipo string porque no existe.

05:17.810 --> 05:21.290
Así que aquí obtenemos un error, y es bueno que lo obtengamos,

05:21.290 --> 05:24.510
porque esto estaría mal, y aquí vemos que la inferencia

05:24.510 --> 05:27.343
de TypeScript realmente, realmente brilla.
