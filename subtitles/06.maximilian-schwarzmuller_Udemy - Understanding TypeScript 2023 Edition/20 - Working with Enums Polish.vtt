WEBVTT

00:02.230 --> 00:04.860
Instruktor: Luźno związany z ideą Tuple jest

00:04.860 --> 00:09.760
pomysł posiadania kilku konkretnych identyfikatorów, globalnych stałych, z którymi

00:09.760 --> 00:12.710
możesz pracować w swojej aplikacji, które chcesz reprezentować

00:12.710 --> 00:15.020
jako liczby, ale do których chcesz przypisać

00:15.020 --> 00:18.530
czytelną dla człowieka etykietę.

00:18.530 --> 00:20.500
I do tego masz typ Enum.

00:20.500 --> 00:23.800
Ponownie, to istnieje w niektórych górnych językach programowania.

00:23.800 --> 00:25.780
JavaScript jednak o tym nie wie.

00:25.780 --> 00:26.613
Wygląda to tak.

00:26.613 --> 00:28.110
W ten sposób tworzy się enum.

00:28.110 --> 00:30.540
Używasz słowa kluczowego enum, które istnieje

00:30.540 --> 00:33.060
tylko w świecie TypeScript, a nie w JavaScript,

00:33.060 --> 00:34.840
tam po masz nawiasy klamrowe, a następnie

00:34.840 --> 00:36.810
twoje identyfikatory.

00:36.810 --> 00:39.141
I ten typ, który jest dodany przez

00:39.141 --> 00:42.030
TypeScript daje ci wyliczoną listę.

00:42.030 --> 00:45.070
Więc te etykiety są w końcu po prostu przetłumaczone na liczby zaczynające

00:45.070 --> 00:48.580
się od zera, gdzie masz czytelne dla człowieka etykiety, z którymi możesz pracować

00:48.580 --> 00:50.133
w swoim kodzie.

00:51.310 --> 00:53.500
Aby pokazać przykład, wróćmy tutaj

00:53.500 --> 00:55.620
do naszej osoby z jej rolą.

00:55.620 --> 00:58.010
Skopiuję ten kod, a następnie skomentuję go, ponieważ

00:58.010 --> 00:59.710
zamierzam go trochę zmienić.

00:59.710 --> 01:01.600
A potem tutaj pozbędę się tego jawnego

01:01.600 --> 01:05.380
przypisania typu i zamiast tego wrócę do wnioskowania, ponieważ

01:05.380 --> 01:07.150
teraz zmienię rolę.

01:07.150 --> 01:10.330
A teraz powiedzmy, że chcemy mieć admina, autora i może

01:10.330 --> 01:12.350
użytkownika tylko do odczytu.

01:12.350 --> 01:14.750
Admin powinien mieć ID równe zero,

01:14.750 --> 01:18.660
użytkownik read only ma jeden, autor ma dwa.

01:18.660 --> 01:21.160
Teraz oczywiście możemy przechowywać to dokładnie

01:21.160 --> 01:22.550
tak samo z tymi liczbami.

01:22.550 --> 01:24.830
Jednym z minusów jest to, że zawsze możemy dodać

01:24.830 --> 01:26.670
numer, dla którego możemy nie mieć roli,

01:26.670 --> 01:30.320
a jeśli następnie później w naszym kodzie, spróbuj wyodrębnić rolę i używając

01:30.320 --> 01:33.392
if check does może prowadzić do błędów.

01:33.392 --> 01:37.160
A dodatkowo my, jako developer mamy problem ze zrozumieniem,

01:37.160 --> 01:39.690
jaką rolę ma ten użytkownik.

01:39.690 --> 01:41.310
Czy to było do autora?

01:41.310 --> 01:43.020
A może to był odczyt na użytkowniku?

01:43.020 --> 01:46.140
Możesz o tym zapomnieć po robieniu dłuższych przerw,

01:46.140 --> 01:48.810
podczas pracy w większych zespołach itd.

01:48.810 --> 01:50.540
Więc jako deweloper, możesz

01:50.540 --> 01:54.310
chcieć identyfikatorów czytelnych dla człowieka,

01:54.310 --> 01:58.630
coś jak ADMIN, i READ ONLY USER, coś takiego.

01:58.630 --> 02:00.240
Teraz oczywiście moglibyśmy tego użyć,

02:00.240 --> 02:02.880
moglibyśmy pracować z takimi wartościami ciągów.

02:02.880 --> 02:06.100
Problem polega na tym, że jeśli później potrzebowaliśmy

02:06.100 --> 02:11.100
sprawdzenia if, sprawdzamy czy rola osoby jest równa, czy była READ_ONLY_USER?

02:12.260 --> 02:13.500
A może to było jedno słowo?

02:13.500 --> 02:15.380
Czy to było z podkreśleniami?

02:15.380 --> 02:17.440
Widzisz, wtedy musimy pamiętać jak

02:17.440 --> 02:19.020
napisaliśmy te ciągi, jaki

02:19.020 --> 02:20.970
dokładnie tekst tam mamy.

02:20.970 --> 02:24.330
Bo ten ciąg z kreskami między wyrazami to

02:24.330 --> 02:27.430
oczywiście nie to samo, co ten ciąg.

02:27.430 --> 02:29.973
Więc tutaj, nigdy nie zrobilibyśmy tego tam,

02:31.150 --> 02:36.120
jest tylko do odczytu, jeśli spróbujesz skompilować i wydrukować to, ponieważ,

02:36.120 --> 02:39.170
cóż, sprawdzenie po prostu nie daje prawdy.

02:39.170 --> 02:42.150
Nie mamy tego jako rolę na osobie, stąd nie otrzymujemy

02:42.150 --> 02:43.930
wyjścia tutaj w konsoli.

02:43.930 --> 02:47.290
Więc identyfikatory łańcuchowe, również mają minusy.

02:47.290 --> 02:50.340
Teraz dla takich scenariuszy jest dość powszechne w JavaScript,

02:50.340 --> 02:52.340
aby zdefiniować globalne stałe.

02:52.340 --> 02:55.580
Na przykład admin, który następnie trzyma pewne wartości,

02:55.580 --> 02:58.053
takie jak liczby lub ciągi, zarówno jak to

02:58.980 --> 03:00.060
możliwe.

03:00.060 --> 03:01.700
Liczby, oczywiście mogą nam zaoszczędzić

03:01.700 --> 03:04.370
trochę dodatkowego kodu i bitów w pamięci.

03:04.370 --> 03:09.370
I tam możemy mieć ADMIN, READ_ONLY i AUTHOR jak to i na

03:09.390 --> 03:10.870
dole, to potem musimy

03:10.870 --> 03:13.750
po prostu użyć tej roli.

03:13.750 --> 03:16.460
Teraz zaletą tego jest to, że możemy używać tego wszędzie

03:16.460 --> 03:17.343
w naszym kodzie.

03:18.230 --> 03:22.600
I dlatego tutaj na przykład, jeśli uruchomię ten kod, jeśli go skompiluję,

03:22.600 --> 03:23.680
a następnie pozwolimy

03:25.260 --> 03:28.570
temu przeładować, widzimy jako admin tutaj, więc to działa

03:28.570 --> 03:31.520
i jest to powszechny wzór w JavaScript.

03:31.520 --> 03:34.190
Minusem jest to, że teraz znowu rola jest wnioskowana

03:34.190 --> 03:37.290
jako tylko liczba, więc moglibyśmy przechowywać tam dowolną

03:37.290 --> 03:39.630
liczbę, nawet liczbę, której nie wspieramy.

03:39.630 --> 03:42.450
A dodatkowo musimy zdefiniować te wszystkie stałe,

03:42.450 --> 03:44.060
musimy nimi zarządzać.

03:44.060 --> 03:45.920
To jest miejsce, w którym enum może zaoszczędzić nam pracy.

03:45.920 --> 03:48.730
Jest to całkowicie w porządku, ale enum czyni to łatwiejszym.

03:48.730 --> 03:50.970
Tworzymy enum za pomocą słowa kluczowego

03:50.970 --> 03:54.250
enum, możemy nazwać go Role, konwencją jest rozpoczęcie

03:54.250 --> 03:55.550
od wielkiej litery, ponieważ

03:55.550 --> 03:58.620
enum również jest typem niestandardowym.

03:58.620 --> 04:01.760
To twój pierwszy typ niestandardowy, w tym kursie napiszemy jeszcze

04:01.760 --> 04:03.860
wiele innych, ten jest pierwszy.

04:03.860 --> 04:06.560
A następnie po nazwie typu, który chcesz przypisać

04:06.560 --> 04:09.520
do tego enum, dodajesz nawiasy klamrowe, tak po prostu,

04:09.520 --> 04:14.040
bez dwukropka, bez znaku równości, tylko nawiasy klamrowe po nazwie.

04:14.040 --> 04:15.800
Następnie średnik.

04:15.800 --> 04:19.433
I teraz w tym miejscu możesz przypisać swoje wartości

04:20.650 --> 04:21.973
takie jak admin, read

04:22.950 --> 04:24.300
only i author.

04:24.300 --> 04:28.180
A za kulisami ten tutaj otrzymuje numer zero, ten

04:28.180 --> 04:31.780
tutaj numer jeden, ten tutaj numer dwa.

04:31.780 --> 04:34.650
A następnie tutaj, można uzyskać dostęp do Roli. ADMIN, podobnie jak na obiekcie,

04:34.650 --> 04:37.840
uzyskujesz dostęp do swojego identyfikatora.

04:37.840 --> 04:40.380
I możesz użyć tego gdziekolwiek indziej w swoim kodzie,

04:40.380 --> 04:43.890
jak również, tutaj możemy sprawdzić, czy rola jest AUTHOR, a następnie

04:43.890 --> 04:46.710
wydrukować autora i oczywiście nie powinniśmy zobaczyć tego,

04:46.710 --> 04:50.630
jeśli uruchomię to teraz, ponieważ przypisaliśmy rolę ADMIN tutaj.

04:50.630 --> 04:53.333
Ale kluczowym wnioskiem jest to, że zrobiliśmy

04:53.333 --> 04:57.490
to wszystko z pomocą enum, które przypisuje etykiety do liczb.

04:57.490 --> 04:59.210
Jeśli przyjrzymy się temu w JavaScript.

04:59.210 --> 05:02.830
Więc w skompilowanym kodzie widzimy, że tak właśnie jest przebudowywany.

05:02.830 --> 05:05.080
W końcu jest przebudowany z if tutaj.

05:05.080 --> 05:07.940
Czyli funkcja, która wykonuje się sama.

05:07.940 --> 05:11.770
I Rola tutaj po prostu jest zarządzana jako obiekt w końcu, który ma

05:11.770 --> 05:14.550
admin property a read only property i AUTHOR property,

05:14.550 --> 05:17.330
gdzie następnie przechowujemy nasze wartości

05:17.330 --> 05:19.970
liczbowe tutaj, można powiedzieć.

05:19.970 --> 05:21.960
Więc jest to trochę bardziej złożone niż

05:21.960 --> 05:24.210
to, ale to jest to, co TypeScript w końcu robi tutaj,

05:24.210 --> 05:26.700
aby replikować tę konstrukcję enum w kodzie JavaScript,

05:26.700 --> 05:28.560
kiedy kompiluje kod.

05:28.560 --> 05:30.700
Tutaj jako deweloper mamy po prostu

05:30.700 --> 05:32.680
te wygodnie stworzone liczby.

05:32.680 --> 05:34.290
Jeśli najedziesz na nie, zobaczysz

05:34.290 --> 05:36.520
numer, który przechowamy tam i będziesz mógł

05:36.520 --> 05:39.883
użyć tych numerów tutaj w sposób czytelny dla człowieka.

05:40.750 --> 05:42.840
Teraz dla enums, nie jesteś również ograniczony

05:42.840 --> 05:44.790
do domyślnego zachowania.

05:44.790 --> 05:47.470
Powiedzmy, że z jakiegoś powodu nie chcesz zacząć

05:47.470 --> 05:50.533
od zera jako liczby początkowej, wtedy możesz dodać znak

05:50.533 --> 05:54.080
równości tutaj po swoim identyfikatorze i wprowadzić dowolną inną

05:54.080 --> 05:56.610
liczbę, a teraz admin jest przypisany do liczby

05:56.610 --> 05:59.610
pięć i inne identyfikatory po identyfikatorze, gdzie

05:59.610 --> 06:02.150
przypisujesz wartość, odbierz to i po prostu zwiększaj

06:02.150 --> 06:04.580
tę wartość początkową.

06:04.580 --> 06:08.140
Czyli teraz mamy grzywnę, szóstkę, siódemkę, zamiast zera, jedynki, dwójki.

06:08.140 --> 06:10.642
Oczywiście możesz również przypisać własne wartości

06:10.642 --> 06:14.820
do wszystkich tych identyfikatorów, jeśli potrzebujesz własnych liczb.

06:14.820 --> 06:17.070
Nie jesteś również ograniczony do liczb, możesz

06:17.070 --> 06:19.390
również iść z tekstem tutaj, a nawet mieszać

06:19.390 --> 06:21.950
je tak, jak robię to tutaj, wszystko idzie tam, ale

06:21.950 --> 06:24.900
często domyślne inkrementowanie liczb, które zaczynają

06:24.900 --> 06:28.530
się od zera, jest tym, czego chcesz, ale jeśli potrzebujesz innego zachowania,

06:28.530 --> 06:31.530
jeśli chcesz użyć łańcucha tutaj, a następnie liczby tutaj,

06:31.530 --> 06:34.850
a tutaj liczba, a także lub może ciąg liczbowy, wtedy możesz absolutnie

06:34.850 --> 06:37.890
to zrobić, zaletą jest to, że definiujesz go tam, a następnie

06:37.890 --> 06:40.880
zawsze po prostu odnosisz się do swojego typu Role do tego

06:40.880 --> 06:48.270
niestandardowego typu, który utworzyłeś, do tego niestandardowego enum, które utworzyłeś.

06:48.270 --> 06:50.320
I używasz tego w swoich sprawdzeniach

06:50.320 --> 06:52.970
if i przypisaniach typu, i jesteś dobry.

06:52.970 --> 06:56.090
To jest moc enum i jest to świetna konstrukcja, gdy

06:56.090 --> 06:59.420
potrzebujesz identyfikatorów, które są czytelne dla

06:59.420 --> 07:03.173
człowieka i mają jakąś odwzorowaną wartość za kulisami.
