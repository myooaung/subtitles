WEBVTT

00:02.310 --> 00:03.940
Mann: Wir haben also zwei Probleme,

00:03.940 --> 00:06.500
wenn wir sie so nennen wollen, zu lösen.

00:06.500 --> 00:07.820
Nun möchte ich mit dem Problem

00:07.820 --> 00:10.960
beginnen, dass Projekte in beiden Boxen auftauchen.

00:10.960 --> 00:13.050
Ich möchte eine Filterung einführen,

00:13.050 --> 00:15.980
und der beste Ort zum Filtern ist natürlich

00:15.980 --> 00:18.930
unsere Hörerfunktion.

00:18.930 --> 00:22.743
Wenn wir zu der Stelle gehen, an der wir unseren Hörer registrieren,

00:26.000 --> 00:29.170
hier in der Projektlistenklausel.

00:29.170 --> 00:32.270
Dann bekommen wir hier eine Liste von Projekten, richtig?

00:32.270 --> 00:36.170
Die Liste der Projekte umfasst nun alle Projekte.

00:36.170 --> 00:39.400
Innerhalb der Projektlistenklausel sind wir jedoch nur

00:39.400 --> 00:43.140
an aktiven oder abgeschlossenen Projekten interessiert.

00:43.140 --> 00:44.250
Hier könnten wir übrigens

00:44.250 --> 00:49.103
theoretisch auch unsere Aufzählung verwenden, aber eigentlich brauche ich die konkreten

00:50.660 --> 00:53.160
Werte, die in der Aufzählung da unten oder im Typ

00:53.160 --> 00:56.440
da unten gespeichert sind, und deshalb möchte ich hier nicht

00:56.440 --> 00:58.990
immer eine Aufzählung verwenden, weil ich die

00:58.990 --> 01:02.180
Stringliteraltypen anzeigen möchte.

01:02.180 --> 01:06.190
Bevor wir also die Projekte speichern und rendern, wollen

01:06.190 --> 01:08.690
wir sie in unserer Listener-Funktion

01:08.690 --> 01:10.470
filtern.

01:10.470 --> 01:13.020
Hier haben wir also unsere relevanten Projekte,

01:13.020 --> 01:16.660
könnte man sagen, und das sind natürlich die gefilterten Projekte.

01:16.660 --> 01:19.070
Die Filtermethode ist eine Standardmethode,

01:19.070 --> 01:21.460
die für jedes Array in JavaScript existiert.

01:21.460 --> 01:23.690
Dies nimmt eine Funktion, die dann auf jedes

01:23.690 --> 01:26.820
Element in dieser Projekte Array ausgeführt und wenn diese

01:26.820 --> 01:29.660
Funktion hier wahr zurückgibt, halten wir das Element

01:29.660 --> 01:30.940
in einem neu erstellten

01:30.940 --> 01:33.530
Array, das dann in relevanten Projekten gespeichert

01:33.530 --> 01:35.040
wird.

01:35.040 --> 01:38.130
Wenn diese Funktion den Wert false zurückgibt, wird das Element nicht aus

01:38.130 --> 01:39.770
der ursprünglichen Liste entfernt, sondern

01:39.770 --> 01:41.660
in die neu erstellte Liste aufgenommen, die in

01:41.660 --> 01:44.230
den entsprechenden Projekten gespeichert wird.

01:44.230 --> 01:46.600
Hier müssen wir also true oder false zurückgeben, je nachdem,

01:46.600 --> 01:48.810
ob wir das Projekt behalten wollen oder nicht.

01:48.810 --> 01:52.430
Und dafür müssen wir uns natürlich nur den Status ansehen.

01:52.430 --> 01:55.310
Der Projektstatus ist eine Aufzählung, und wir

01:55.310 --> 01:59.070
wollen prüfen, ob der Projektstatus gleich dem Projektstatus

01:59.070 --> 02:03.590
aktiv ist, wenn wir uns in einer aktiven Projektliste befinden, wenn also

02:03.590 --> 02:05.790
die Eigenschaft Typ aktiv ist, oder

02:05.790 --> 02:07.940
ob der Projektstatus abgeschlossen

02:07.940 --> 02:10.640
ist, wenn wir uns in einer abgeschlossenen Liste

02:10.640 --> 02:12.270
befinden.

02:12.270 --> 02:15.430
Hier schreibe ich also einen echten Funktionskörper,

02:15.430 --> 02:17.250
indem ich ihn mit geschweiften

02:17.250 --> 02:19.110
Klammern umschließe und nicht

02:19.110 --> 02:20.100
die Abkürzung Pfeilfunktion

02:20.100 --> 02:25.540
verwende, und dann können wir prüfen, ob dieser Typ gleich aktiv ist, dann möchte ich

02:26.800 --> 02:31.480
das Ergebnis dieser Prüfung hier zurückgeben, andernfalls, also einfach

02:31.480 --> 02:34.130
nach dieser if-Anweisung, möchte ich den

02:34.130 --> 02:40.160
Vergleich mit dem fertigen Projektstatus zurückgeben.

02:40.160 --> 02:42.220
Damit erhalten wir unsere relevanten Projekte,

02:42.220 --> 02:43.520
die wir nun hier, in den zugewiesenen

02:43.520 --> 02:45.490
Projekten, speichern können.

02:45.490 --> 02:47.070
Schauen wir also, ob es funktioniert.

02:47.070 --> 02:48.053
Wenn ich neu lade

02:49.310 --> 02:51.570
und hier ein Projekt hinzufüge, funktioniert

02:51.570 --> 02:52.743
das dann?

02:54.950 --> 02:55.930
Das funktioniert,

02:55.930 --> 02:58.050
und zwar nur bei aktiven Projekten, nicht

02:58.050 --> 03:00.020
bei abgeschlossenen Projekten.

03:00.020 --> 03:02.390
Wenn ich hier jedoch ein zweites Projekt hinzufüge,

03:02.390 --> 03:04.740
kommt es immer noch zu einer Verdoppelung.

03:04.740 --> 03:08.720
Das hängt damit zusammen, wie wir unsere Projekte rendern.

03:08.720 --> 03:10.520
Innerhalb von Rendering-Projekten

03:10.520 --> 03:13.430
gehen wir immer alle Projektelemente durch und fügen

03:13.430 --> 03:15.090
sie der Liste hinzu.

03:15.090 --> 03:16.640
Das Problem dabei ist natürlich,

03:16.640 --> 03:19.900
dass wir bereits ein Projektelement auf dem Bildschirm

03:19.900 --> 03:21.950
gerendert haben könnten.

03:21.950 --> 03:25.020
Die beste Lösung wäre hier, einen Vergleich durchzuführen,

03:25.020 --> 03:27.450
bei dem man prüft, was bereits gerendert

03:27.450 --> 03:30.170
wurde und was noch gerendert werden muss, um

03:30.170 --> 03:31.730
unnötiges erneutes Rendern

03:31.730 --> 03:34.110
zu vermeiden.

03:34.110 --> 03:35.760
Die Durchführung dieses Vergleichs

03:35.760 --> 03:38.440
anhand des echten DOM kostet jedoch auch einiges

03:38.440 --> 03:39.710
an Leistung.

03:39.710 --> 03:43.100
Für diese Anwendung hier ist es daher völlig in Ordnung, einfach unser

03:43.100 --> 03:45.250
Listenelement zu nehmen und seinen gesamten

03:45.250 --> 03:48.720
Inhalt zu löschen, indem wir den inneren HTML-Code auf eine leere Zeichenkette

03:48.720 --> 03:49.640
setzen, was bedeutet,

03:49.640 --> 03:53.710
dass wir alle Listenelemente loswerden und dann neu rendern.

03:53.710 --> 03:56.350
Das bedeutet, dass wir jedes Mal, wenn wir ein neues Projekt

03:56.350 --> 03:58.470
hinzufügen, alle Projekte neu rendern, aber

03:58.470 --> 04:00.210
für den Zweck dieses Projekts hier,

04:00.210 --> 04:01.670
für diese Anwendung hier, ist

04:01.670 --> 04:03.490
das absolut in Ordnung.

04:03.490 --> 04:05.410
Wenn wir das gespeichert haben, können

04:05.410 --> 04:06.987
wir es noch einmal versuchen.

04:06.987 --> 04:10.540
"Funktioniert das? "Wenn ich nun hier ein weiteres

04:10.540 --> 04:12.960
Projekt hinzufüge, wird es zwar hinzugefügt,

04:12.960 --> 04:14.530
aber das andere Projekt

04:14.530 --> 04:17.453
wird nicht mehr hinzugefügt.

04:18.430 --> 04:21.870
Ups und jetzt habe ich hier (murmelt) Fehler, weil die Beschreibung

04:21.870 --> 04:23.540
nicht lang genug war.

04:23.540 --> 04:26.230
Wie Sie sehen können, funktioniert jetzt alles,

04:26.230 --> 04:28.150
und wir rendern diese Projekte so,

04:28.150 --> 04:30.090
wie sie gerendert werden sollten,

04:30.090 --> 04:32.170
was natürlich richtig ist.

04:32.170 --> 04:35.050
Und damit sieht die Bewerbung gar nicht so schlecht aus.

04:35.050 --> 04:36.890
Das Einzige, was fehlt, ist eine

04:36.890 --> 04:39.550
Drag-and-Drop-Funktion oder eine Möglichkeit,

04:39.550 --> 04:44.040
Projekte von dieser ersten Liste in die zweite Liste zu übertragen.

04:44.040 --> 04:45.180
Wir geben auch die anderen Informationen,

04:45.180 --> 04:46.930
die wir erhalten haben, nämlich die Beschreibung und

04:46.930 --> 04:48.900
die Anzahl der Personen, nicht wirklich aus.

04:48.900 --> 04:50.750
Das ist also auch nicht so toll.

04:50.750 --> 04:54.980
Und wir haben auch ein bisschen Code-Duplizierung, wenn wir uns

04:54.980 --> 04:57.620
die Projektliste in dieser Klausel hier

04:57.620 --> 04:58.910
und in der Projekteingabeklausel

04:58.910 --> 05:01.000
ansehen.

05:01.000 --> 05:04.270
In beiden haben wir ein Template-Element, ein Host-Element und ein Element

05:04.270 --> 05:06.970
und wir haben eine Attach-Methode und so weiter.

05:06.970 --> 05:09.180
Ich möchte also den Code hier verbessern und

05:09.180 --> 05:11.800
etwas Code wiederverwenden, indem ich Vererbung

05:11.800 --> 05:14.480
und eine Basisklausel verwende, und danach möchte

05:14.480 --> 05:16.850
ich auch eine spezielle Klausel für jedes Projektelement

05:16.850 --> 05:18.580
erstellen, in der wir dann einfach

05:18.580 --> 05:20.340
diese Projektelementklausel innerhalb

05:20.340 --> 05:23.725
der Projektliste instanziieren, anstatt ein Listenelement manuell

05:23.725 --> 05:27.050
anzuhängen, so wie hier, und dann sollte innerhalb dieser "zu erstellenden"

05:27.050 --> 05:30.700
Projektelementklausel das Anhängen geschehen, und dann möchte ich auch

05:30.700 --> 05:40.540
mehr Informationen über das Projektelement ausgeben, einschließlich seiner Beschreibung und der Anzahl der zugewiesenen Personen.

05:40.540 --> 05:42.080
Es bleibt also noch einiges

05:42.080 --> 05:44.520
zu tun, und bevor wir das Projektelement in

05:44.520 --> 05:47.120
der Form bearbeiten, in der ich es haben möchte,

05:47.120 --> 05:48.660
sollten wir zunächst sicherstellen,

05:48.660 --> 05:53.660
dass wir etwas Vererbung hinzufügen, um unsere Projektliste und Projekteingabe oder

05:53.800 --> 05:57.693
bestimmte Teile davon wiederverwendbar zu machen.
