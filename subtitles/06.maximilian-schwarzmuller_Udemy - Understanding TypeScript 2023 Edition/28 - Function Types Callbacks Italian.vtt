WEBVTT

00:02.440 --> 00:05.170
Istruttore: Parlando di callback e tipi di

00:05.170 --> 00:08.400
funzione, funziona più o meno allo stesso modo.

00:08.400 --> 00:10.550
Diciamo che abbiamo una nuova

00:11.800 --> 00:14.990
funzione addAndHandle, diciamo.

00:14.990 --> 00:18.420
Ci aspettiamo di ottenere due numeri e poi voglio anche

00:19.740 --> 00:22.320
ottenere una funzione di callback.

00:22.320 --> 00:24.480
Quindi una funzione che viene passata e che è un

00:24.480 --> 00:26.670
argomento che deve fare qualcosa con il risultato,

00:26.670 --> 00:29.930
allora qui potremmo generare il risultato, naturalmente.

00:29.930 --> 00:31.060
Ma non solo per restituirlo,

00:31.060 --> 00:33.290
bensì per chiamare la funzione di callback

00:33.290 --> 00:35.670
e passare il risultato.

00:35.670 --> 00:36.990
Ora, voglio essere molto chiaro sul

00:36.990 --> 00:39.270
fatto che il callback dovrebbe essere una funzione.

00:39.270 --> 00:42.190
Quindi, ancora una volta, sto usando la definizione

00:42.190 --> 00:45.640
del tipo di funzione che forse non restituisce nulla,

00:45.640 --> 00:49.650
ma accetta un numero come argomento, perché gli stiamo passando

00:49.650 --> 00:51.280
un numero.

00:51.280 --> 00:52.740
Quindi la funzione di callback,

00:52.740 --> 00:55.870
la funzione che passiamo a questa funzione come parametro,

00:55.870 --> 00:58.460
deve accettare un numero.

00:58.460 --> 01:01.890
Ora, in basso, chiamiamo addAndHandle, inseriamo

01:01.890 --> 01:05.240
10 e 20 e poi inseriamo una funzione.

01:05.240 --> 01:07.570
Ad esempio, una funzione anonima qui.

01:07.570 --> 01:09.710
Ora, quando chiamiamo la funzione,

01:09.710 --> 01:11.470
questo non è un tipo di funzione,

01:11.470 --> 01:13.620
ma un valore concreto che passiamo come

01:13.620 --> 01:15.150
terzo argomento.

01:15.150 --> 01:18.870
Quindi, questa è una funzione anonima che crea

01:18.870 --> 01:22.300
qui e lì sappiamo che otterremo un numero.

01:22.300 --> 01:23.810
Magari chiamiamolo risultato

01:23.810 --> 01:26.110
qui e poi possiamo farne quello che vogliamo.

01:26.110 --> 01:27.623
Ora, se si compila, si vede

01:28.570 --> 01:31.120
questo log laggiù, 30, che è il risultato

01:31.120 --> 01:33.540
della nostra funzione di callback che

01:33.540 --> 01:35.600
abbiamo passato ad addAndHandle,

01:35.600 --> 01:38.250
dove addAndHandle combina due numeri e poi

01:38.250 --> 01:39.850
chiama la callback, che deve

01:39.850 --> 01:43.200
soddisfare questa condizione qui.

01:43.200 --> 01:45.870
Il vantaggio di definire qui la funzione di callback

01:45.870 --> 01:49.490
è che all'interno della funzione che passiamo c'è un tipo di callback

01:49.490 --> 01:52.240
in grado di dedurre che il risultato sarà un numero

01:52.240 --> 01:54.000
e quindi possiamo fare qualsiasi

01:54.000 --> 01:56.620
cosa con il risultato.

01:56.620 --> 01:58.090
Possiamo usare un numero

01:58.090 --> 02:00.990
senza dichiarare esplicitamente il tipo, perché

02:00.990 --> 02:03.226
TypeScript sa che il risultato sarà un

02:03.226 --> 02:04.970
numero, perché abbiamo chiarito

02:04.970 --> 02:07.480
che il callback riceverà un parametro, che

02:07.480 --> 02:08.473
è un numero.

02:09.310 --> 02:12.170
Pertanto, se ci aspettassimo un secondo parametro nella

02:12.170 --> 02:13.060
callback, otterremmo

02:13.060 --> 02:15.460
un errore, perché sappiamo bene che la callback

02:15.460 --> 02:18.630
che ci aspettiamo nella nostra funzione addAndHandle deve avere

02:18.630 --> 02:20.500
un solo parametro.

02:20.500 --> 02:22.420
Quindi, se si passa una funzione di callback

02:22.420 --> 02:23.950
che prende un secondo parametro,

02:23.950 --> 02:26.240
è chiaro che si tratta di un errore.

02:26.240 --> 02:28.250
L'unica cosa che TypeScript non rileva

02:28.250 --> 02:30.280
è se restituiamo qualcosa qui.

02:30.280 --> 02:33.690
Se un risultato viene restituito e la callback restituisce qualcosa,

02:33.690 --> 02:34.767
anche se abbiamo chiarito

02:34.767 --> 02:37.300
che non dovrebbe restituire nulla.

02:37.300 --> 02:41.180
Tuttavia, non si tratta di un errore o di un bug di TypeScript.

02:41.180 --> 02:43.150
In realtà succede di proposito.

02:43.150 --> 02:46.000
Specificando void nel nostro tipo di callback, stiamo

02:46.000 --> 02:49.520
essenzialmente dicendo che ignoreremo qualsiasi risultato

02:49.520 --> 02:50.910
restituito.

02:50.910 --> 02:54.030
In pratica stiamo dicendo che in addAndHandle, dove otteniamo

02:54.030 --> 02:56.020
la funzione di callback, non faremo

02:56.020 --> 02:58.080
nulla con il tipo di ritorno.

02:58.080 --> 03:00.600
Per questo motivo, si potrà restituire qualcosa

03:00.600 --> 03:03.550
senza essere puniti, ma si sa, perché è chiaramente

03:03.550 --> 03:06.850
definito qui sul tipo di callback, che il callback non farà

03:06.850 --> 03:09.230
nulla con il valore che si potrebbe restituire

03:09.230 --> 03:10.870
qui.

03:10.870 --> 03:13.543
Quindi addAndHandle all'interno della funzione

03:13.543 --> 03:15.680
non farà nulla con il valore che potrebbe

03:15.680 --> 03:17.120
essere restituito.

03:17.120 --> 03:19.620
E questa è ovviamente un'informazione utile.

03:19.620 --> 03:21.270
Ci si potrebbe aspettare che

03:21.270 --> 03:25.710
qui si faccia qualcosa con il valore restituito dal callback e, specificando

03:25.710 --> 03:29.000
questo tipo qui, rendiamo chiaro che all'interno di

03:29.000 --> 03:31.520
addAndHandle non siamo interessati a nessun

03:31.520 --> 03:33.920
valore di ritorno.

03:33.920 --> 03:36.410
In questo modo non si è costretti a passare un callback

03:36.410 --> 03:38.260
che non restituisce nulla.

03:38.260 --> 03:40.830
Vi dice solo che qualsiasi cosa possiate restituire

03:40.830 --> 03:42.200
non verrà utilizzata.

03:42.200 --> 03:44.070
Per i parametri è ovviamente diverso.

03:44.070 --> 03:45.540
Questo viene applicato perché

03:45.540 --> 03:48.310
qui è davvero importante sapere se si sta passando

03:48.310 --> 03:51.720
un callback che si aspetta altri parametri.

03:51.720 --> 03:53.490
Allora si otterrà un errore o non

03:53.490 --> 03:55.350
si otterrà il risultato desiderato,

03:55.350 --> 03:57.740
perché si ottiene un solo risultato.

03:57.740 --> 04:01.290
Quindi non si può ignorare ciò che si vuole, come nel caso

04:01.290 --> 04:02.840
del tipo di ritorno.

04:02.840 --> 04:05.506
Ignoriamo questo aspetto per il passaggio di qualcosa

04:05.506 --> 04:08.750
in cui la funzione addAndHandle è responsabile, perché è lì che

04:08.750 --> 04:10.920
viene richiamato il callback.

04:10.920 --> 04:13.210
Questo è il motivo per cui i parametri sono imposti

04:13.210 --> 04:15.060
e TypeScript è molto severo riguardo

04:15.060 --> 04:17.150
al numero e al tipo di parametri delle funzioni

04:17.150 --> 04:19.508
di callback e perché non si preoccupa del tipo

04:19.508 --> 04:21.253
di ritorno.
