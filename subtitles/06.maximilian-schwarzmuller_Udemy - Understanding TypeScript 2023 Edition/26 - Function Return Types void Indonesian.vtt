WEBVTT

00:02.200 --> 00:04.080
Instruktur: Saatnya untuk file baru lainnya.

00:04.080 --> 00:09.080
Saya akan mengganti nama aplikasi. ts di sini untuk menyatukan alias. ts, dan menambahkan

00:11.100 --> 00:13.760
aplikasi baru. ts di mana kita bisa mulai

00:13.760 --> 00:16.370
dari awal lagi, tutup file lainnya.

00:16.370 --> 00:20.660
Dan sekarang di sini saya ingin menyelam sedikit lebih dalam ke dalam fungsi.

00:20.660 --> 00:22.640
Sekarang, tentu saja, dengan sudah bekerja dengan fungsi.

00:22.640 --> 00:24.940
Misalnya, di sini di file union alias dengan

00:24.940 --> 00:26.340
fungsi combine.

00:26.340 --> 00:29.260
Dan misalnya, Anda melihat bahwa untuk fungsi,

00:29.260 --> 00:32.520
Anda dapat menetapkan jenis ke parameter fungsi.

00:32.520 --> 00:34.310
Nah, ternyata ada lebih banyak lagi yang

00:34.310 --> 00:36.483
bisa Anda lakukan dengan fungsi dan tipe.

00:37.590 --> 00:40.430
Untuk itu, saya akan membuat ulang fungsi add saya,

00:40.430 --> 00:43.373
yang hanya menerima angka, bukan string.

00:44.270 --> 00:48.340
Yang melakukan satu hal sederhana, mengembalikan n satu ditambah n dua, jadi

00:48.340 --> 00:49.513
tidak terlalu rumit.

00:51.004 --> 00:53.740
Seperti yang saya sebutkan, kita bisa menetapkan tipe ke parameter,

00:53.740 --> 00:55.180
itu bukan hal baru.

00:55.180 --> 00:57.030
Fungsi secara keseluruhan, bagaimanapun

00:57.030 --> 01:01.050
juga, memiliki satu jenis penting lainnya, yaitu memiliki jenis pengembalian.

01:01.050 --> 01:03.990
Dan di sini tipe pengembalian disimpulkan oleh TypeScript.

01:03.990 --> 01:06.490
Kita bisa melihatnya jika kita mengarahkan kursor ke add.

01:06.490 --> 01:10.760
Di sini, di bagian akhir, titik dua setelah daftar parameter,

01:10.760 --> 01:14.190
di sini, menjelaskan tipe pengembalian fungsi.

01:14.190 --> 01:16.800
Jadi, jenis nilai yang dikembalikan.

01:16.800 --> 01:20.020
Di sini, saya mengembalikan penjumlahan n satu dan n dua.

01:20.020 --> 01:23.050
Dan karena kedua input ini adalah angka, TypeScript dapat menyimpulkan

01:23.050 --> 01:24.930
bahwa hasil dari ini akan menjadi angka,

01:24.930 --> 01:26.770
dan karena kita mengembalikannya,

01:26.770 --> 01:28.820
bahwa tipe pengembalian data fungsi ini

01:28.820 --> 01:30.830
akan menjadi angka.

01:30.830 --> 01:33.320
Jika Anda akan menggabungkannya sebagai string

01:33.320 --> 01:35.363
di sini, dengan toString misalnya, maka

01:36.550 --> 01:39.030
TypeScript akan menyimpulkan dengan benar

01:39.030 --> 01:41.900
bahwa kita mengembalikan string di sini.

01:41.900 --> 01:44.350
Sekarang tentu saja, kita selalu dapat secara eksplisit

01:44.350 --> 01:46.910
menetapkan tipe pengembalian di sini dengan menambahkan titik

01:46.910 --> 01:48.490
dua setelah daftar parameter, dan kemudian

01:48.490 --> 01:51.263
tipe yang ingin Anda kembalikan, seperti angka.

01:52.850 --> 01:54.560
Ini akan menjadi jenis yang sama seperti yang disimpulkan.

01:54.560 --> 01:56.760
Jika saya, misalnya, mengatur ini ke string,

01:56.760 --> 02:00.020
saya akan mendapatkan kesalahan di sini, karena jelas perhitungan

02:00.020 --> 02:03.540
saya di sini tidak cocok dengan tipe pengembalian yang saya jelaskan.

02:03.540 --> 02:06.480
Sekarang seperti halnya dengan variabel, adalah ide yang baik

02:06.480 --> 02:10.080
untuk membiarkan TypeScript melakukan tugasnya mengenai inferensi tipe.

02:10.080 --> 02:12.610
Dan jika Anda tidak memiliki alasan khusus

02:12.610 --> 02:14.810
untuk mengatur tipe secara eksplisit,

02:14.810 --> 02:17.090
Anda sebaiknya tidak mengatur tipe,

02:17.090 --> 02:20.470
dan membiarkan TypeScript menyimpulkan tipe.

02:20.470 --> 02:22.660
Mengenai tipe pengembalian, ada satu tipe

02:22.660 --> 02:25.910
menarik yang belum pernah kita lihat sebelumnya, dan yang mungkin

02:25.910 --> 02:27.530
baru bagi Anda jika Anda memiliki

02:27.530 --> 02:30.240
pengalaman dengan bahasa pemrograman lain.

02:30.240 --> 02:31.200
Karena ini adalah tipe

02:31.200 --> 02:33.250
yang tidak benar-benar ada di JavaScript.

02:33.250 --> 02:35.180
Ini adalah tipe void.

02:35.180 --> 02:38.160
Katakanlah kita memiliki metode printResult.

02:38.160 --> 02:41.190
Di sana kita mendapatkan argumen angka,

02:41.190 --> 02:44.120
yang seharusnya berupa, yah, angka.

02:44.120 --> 02:47.510
Dan di sana, saya ingin menghibur. log num.

02:47.510 --> 02:49.450
Dan saya ingin menghibur. mencatatnya sebagai bagian

02:49.450 --> 02:52.150
dari string, di mana saya mengatakan hasil ditambah num.

02:52.150 --> 02:53.670
Jadi sekarang ini akan digabungkan

02:53.670 --> 02:56.090
menjadi satu string panjang, dan akan menjadi output.

02:56.090 --> 02:57.777
Dan sekarang saya bisa memanggil printResult.

02:57.777 --> 03:01.020
Dan sebagai contoh, melewatkan hasil dari pemanggilan

03:01.020 --> 03:05.010
fungsi tambah saya, dengan lima ditambah, katakanlah 12.

03:05.010 --> 03:07.670
Jadi saya mengeksekusi menambahkan di sini, dengan dua angka.

03:07.670 --> 03:10.160
Dan hasil dari itu, jadi apa yang dikembalikan oleh

03:10.160 --> 03:13.130
add, kemudian diteruskan sebagai argumen ke printResult.

03:13.130 --> 03:15.780
Dan itu akan mencetaknya ke konsol.

03:15.780 --> 03:19.150
Jika sekarang kita mengkompilasi ini dan kemudian melihatnya

03:19.150 --> 03:21.110
di halaman kita, atau di halaman kita

03:21.110 --> 03:24.280
di sini, kita melihat hasil 17, yang masuk akal.

03:24.280 --> 03:25.660
Sekarang hal yang menarik di sini

03:25.660 --> 03:27.640
adalah tipe pengembalian dari printResult.

03:27.640 --> 03:30.353
Apa yang akan Anda tebak sebagai tipe pengembalian di sini?

03:31.240 --> 03:33.240
Jadi mungkin Anda berpikir itu string,

03:33.240 --> 03:35.150
karena saya membuat string di sini.

03:35.150 --> 03:37.360
Namun perlu diingat, kami tidak mengembalikan ini.

03:37.360 --> 03:39.400
Kami tidak mengembalikan apa pun di sini.

03:39.400 --> 03:42.010
Dan oleh karena itu fungsi printResult di sini

03:42.010 --> 03:44.990
memiliki tipe pengembalian khusus, void.

03:44.990 --> 03:47.910
Sekarang Anda mungkin memperhatikan tipe pengembalian

03:47.910 --> 03:49.830
void dari bahasa pemrograman lain.

03:49.830 --> 03:52.230
Di sana Anda memiliki sesuatu seperti ini.

03:52.230 --> 03:53.940
JavaScript tidak benar-benar tahu itu,

03:53.940 --> 03:56.740
atau tidak benar-benar memiliki nama untuk situasi ini.

03:56.740 --> 03:58.590
TypeScript, bagaimanapun, tidak.

03:58.590 --> 04:01.840
Jadi memang, fungsi di sini memiliki tipe pengembalian void.

04:01.840 --> 04:04.065
Dan tentu saja, Anda tidak perlu menentukannya di sini.

04:04.065 --> 04:06.440
Inferensi TypeScript melakukan tugasnya.

04:06.440 --> 04:07.630
Tetapi saya ingin benar-benar

04:07.630 --> 04:09.610
memperjelas bahwa ini memiliki tipe pengembalian

04:09.610 --> 04:13.730
void, itulah sebabnya saya menambahkannya di sini, untuk tujuan demo.

04:13.730 --> 04:17.070
Sekarang, void sebenarnya hanya berarti fungsi ini tidak

04:17.070 --> 04:21.020
memiliki pernyataan kembali, tidak mengembalikan apa pun.

04:21.020 --> 04:24.540
Berhasil menyelesaikannya, ia melakukan tugasnya.

04:24.540 --> 04:28.170
Ia mengeksekusi kodenya, tidak menghasilkan error atau

04:28.170 --> 04:32.550
semacamnya, tetapi kemudian tidak mengembalikan apa pun.

04:32.550 --> 04:34.990
Itu adalah tipe pengembalian void.

04:34.990 --> 04:37.330
Sekarang secara teknis dalam JavaScript, tentu saja,

04:37.330 --> 04:39.490
jika kita akan konsol. catat hasil printResult

04:39.490 --> 04:43.550
di sini dan saya sekarang mengkompilasi ini, dan kita lihat apa yang akan

04:43.550 --> 04:46.270
dikeluarkan di sini pada halaman.

04:46.270 --> 04:49.480
Kita melihat bahwa undefined dikembalikan oleh itu.

04:49.480 --> 04:51.540
Jadi secara teknis, dan ini sangat

04:51.540 --> 04:56.450
menarik, dalam JavaScript, jika kita menggunakan nilai balik dari fungsi yang tidak

04:56.450 --> 05:00.830
mengembalikan apa pun, kita mendapatkan undefined sebagai nilai.

05:00.830 --> 05:03.730
Dan seperti yang mungkin Anda ketahui, undefined dalam JavaScript

05:03.730 --> 05:05.720
sebenarnya adalah nilai nyata.

05:05.720 --> 05:08.430
Nilai yang Anda, misalnya, juga dapatkan jika Anda

05:08.430 --> 05:11.880
mencoba mengakses properti pada objek yang tidak ada.

05:11.880 --> 05:13.670
Jadi di sini kita mendapatkan void,

05:13.670 --> 05:16.680
meskipun secara teknis ini mengembalikan undefined.

05:16.680 --> 05:19.020
Dan sekarang untuk membuatnya lebih membingungkan,

05:19.020 --> 05:23.300
undefined sebenarnya adalah sebuah tipe dalam TypeScript.

05:23.300 --> 05:25.640
Anda bisa memiliki undefined sebagai sebuah tipe.

05:25.640 --> 05:29.570
Dan sebagai contoh, variabel baru, someValue, dapat menerima undefined

05:30.770 --> 05:33.270
sebagai tipe, dan Anda tidak akan mendapatkan

05:33.270 --> 05:34.700
error.

05:34.700 --> 05:37.380
Variabel ini sekarang hanya akan selamanya tidak terdefinisi.

05:37.380 --> 05:39.970
Seberapa berguna hal itu, itu adalah pertanyaan yang berbeda.

05:39.970 --> 05:43.720
Tetapi undefined adalah tipe yang valid di TypeScript.

05:43.720 --> 05:46.600
Meskipun demikian, di sini Anda melihat kita mendapatkan error.

05:46.600 --> 05:48.010
Dan kita mendapatkan error

05:48.010 --> 05:51.690
karena fungsi tidak diperbolehkan untuk mengembalikan undefined.

05:51.690 --> 05:53.300
Secara teknis tentu saja demikian,

05:53.300 --> 05:56.850
tetapi TypeScript berpikir tentang fungsi-fungsi sedikit berbeda.

05:56.850 --> 06:00.200
Anda harus menggunakan void di sini jika fungsi tidak mengembalikan

06:00.200 --> 06:04.300
apa pun, dan tidak terdefinisi, karena dengan void Anda memperjelas bahwa

06:04.300 --> 06:05.940
fungsi ini sengaja tidak memiliki

06:05.940 --> 06:08.260
pernyataan kembali.

06:08.260 --> 06:10.690
Jika Anda akan mengatakan undefined di sini, maka

06:10.690 --> 06:13.460
TypeScript akan mengharapkan bahwa Anda memiliki pernyataan

06:13.460 --> 06:17.080
pengembalian di mana Anda tidak mengembalikan nilai.

06:17.080 --> 06:18.660
Itulah perbedaan teknisnya.

06:18.660 --> 06:20.670
Sekarang Anda lihat, saya tidak mendapatkan error.

06:20.670 --> 06:22.860
Dari perspektif JavaScript,

06:22.860 --> 06:26.610
ini pada dasarnya sama seperti ini.

06:26.610 --> 06:29.050
Tetapi TypeScript membuat diferensiasi di sini, dan

06:29.050 --> 06:31.240
oleh karena itu void adalah tipe yang ingin Anda gunakan

06:31.240 --> 06:33.760
jika Anda tidak memiliki pernyataan kembali.

06:33.760 --> 06:37.200
Undefined, yang sejujurnya jarang Anda perlukan, dapat digunakan

06:37.200 --> 06:41.100
jika Anda mengembalikan tanpa mengembalikan nilai aktual.

06:41.100 --> 06:45.750
Tetapi sekali lagi, ini adalah kasus penggunaan yang jarang terjadi, dan Anda juga bisa menggunakan void

06:45.750 --> 06:47.560
dengan pernyataan return seperti ini.

06:47.560 --> 06:49.040
Anda tidak akan mendapatkan error.

06:49.040 --> 06:50.610
Dan secara default, Anda sebenarnya

06:50.610 --> 06:52.770
akan selalu menggunakan void dalam skenario ini.

06:52.770 --> 06:54.680
Kecuali jika Anda benar-benar memiliki fungsi

06:54.680 --> 06:56.750
yang seharusnya menghasilkan undefined, dan

06:56.750 --> 06:58.620
Anda ingin memperjelas tentang itu.

06:58.620 --> 07:01.430
Tetapi sekali lagi, hal itu jarang terjadi.

07:01.430 --> 07:03.620
Saya hanya ingin memastikan di sini, bahwa

07:03.620 --> 07:05.870
Anda memahami perbedaan antara void dan undefined,

07:05.870 --> 07:08.160
bahwa void adalah standar yang akan Anda gunakan

07:08.160 --> 07:10.930
di hampir semua skenario di mana Anda memiliki fungsi yang

07:10.930 --> 07:13.450
tidak mengembalikan nilai, dan Anda dapat menetapkannya

07:13.450 --> 07:15.770
secara eksplisit.

07:15.770 --> 07:18.780
Tetapi tentu saja, TypeScript juga dapat menyimpulkannya, seperti yang

07:18.780 --> 07:20.440
akan dapat dilakukan di sini juga.

07:20.440 --> 07:23.083
Saya hanya menambahkan ini untuk tujuan demo di sini.
