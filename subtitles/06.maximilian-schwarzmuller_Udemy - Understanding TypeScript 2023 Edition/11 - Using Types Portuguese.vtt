WEBVTT

00:02.060 --> 00:06.410
Instrutor: Typescript fornece muitos tipos para JavaScript.

00:06.410 --> 00:10.100
Agora, o próprio JavaScript também conhece alguns tipos de dados,

00:10.100 --> 00:12.230
e eu voltarei a isso também neste módulo,

00:12.230 --> 00:14.950
mas Typescript acrescenta muitos outros tipos,

00:14.950 --> 00:17.380
e como você também aprenderá neste curso, Typescript

00:17.380 --> 00:21.110
também permite que você escreva seus próprios tipos.

00:21.110 --> 00:24.320
Agora, vamos começar com alguns dos Tipos Principais,

00:24.320 --> 00:26.250
que o JavaScript já conhece e que

00:26.250 --> 00:28.289
o Typescript também suporta, e também

00:28.289 --> 00:30.550
vamos dar uma olhada no que significa

00:30.550 --> 00:33.380
a diferença entre JavaScript, conhecendo o

00:33.380 --> 00:36.800
tipo, e Typescript, usando esse tipo.

00:36.800 --> 00:38.287
Um dos tipos centrais com os quais

00:38.287 --> 00:41.740
trabalhamos em JavaScript e Typescript, é o tipo de número.

00:41.740 --> 00:45.220
Agora, em JavaScript, e o mesmo se aplica ao Typescript,

00:45.220 --> 00:47.290
há apenas um tipo de número.

00:47.290 --> 00:50.750
Não há nenhum tipo especial para inteiros ou flutuadores.

00:50.750 --> 00:55.520
Ao invés disso, estes valores aqui, seriam todos números.

00:55.520 --> 00:58.180
Um seria um número sem a casa decimal.

00:58.180 --> 01:01.640
5. 3 é obviamente um com uma casa decimal

01:01.640 --> 01:04.532
e todos esses valores são do tipo número.

01:04.532 --> 01:08.180
Outras linguagens de programação têm tipos inteiros especiais

01:08.180 --> 01:10.480
e tipos flutuantes ou duplos.

01:10.480 --> 01:11.980
JavaScript não tem isso

01:11.980 --> 01:14.120
e Typescript também não o tem.

01:14.120 --> 01:16.070
Portanto, temos o tipo de número, que

01:16.070 --> 01:19.810
conhecemos do JavaScript, também como um tipo, em Typescript.

01:19.810 --> 01:23.950
Também temos o tipo de dados de cadeia, e isso seria texto, que você

01:23.950 --> 01:26.370
pode definir de uma destas três maneiras,

01:26.370 --> 01:28.285
com aspas simples, com aspas duplas,

01:28.285 --> 01:30.950
ou também com backticks.

01:30.950 --> 01:34.720
A última notação com backticks é uma sintaxe especial, fornecida

01:34.720 --> 01:38.640
em JavaScript moderno e também em Typescript, que nos permite

01:38.640 --> 01:42.440
escrever os chamados modelos literais, que são cordas normais

01:42.440 --> 01:44.550
onde é possível injetar dinamicamente

01:44.550 --> 01:47.520
alguns dados neles.

01:47.520 --> 01:49.240
Portanto, as cordas são simplesmente

01:49.240 --> 01:53.000
texto e o JavaScript conhece os tipos de valor das cordas.

01:53.000 --> 01:55.000
O Typescript também o faz.

01:55.000 --> 01:57.240
Por último, mas não menos importante, um dos principais

01:57.240 --> 01:59.790
tipos de dados, JavaScript sabe e Typescript também

01:59.790 --> 02:02.250
suporta, é o tipo de dados booleanos.

02:02.250 --> 02:03.810
Isso seria verdadeiro ou falso, e

02:03.810 --> 02:06.610
isso é super importante na programação, obviamente, especialmente

02:06.610 --> 02:08.920
quando se trabalha com declarações IF.

02:08.920 --> 02:10.970
Aqui, temos estes dois valores,

02:10.970 --> 02:13.690
e isso é importante, porque em JavaScript,

02:13.690 --> 02:17.520
você também pode conhecer esta idéia de valores verdadeiros

02:17.520 --> 02:22.190
e falsos, por exemplo, que zero, o número zero, é um valor falso.

02:22.190 --> 02:25.510
Se você usá-lo em uma condição IF, ele é tratado como falso.

02:25.510 --> 02:28.560
O tipo de dados booleanos, no entanto, realmente só conhece estes dois

02:28.560 --> 02:31.230
valores, verdadeiros ou falsos, e este não é apenas o caso do

02:31.230 --> 02:33.160
Typescript, mas também do JavaScript.

02:33.160 --> 02:35.532
Este conceito falso e verdadeiro, que você deve

02:35.532 --> 02:38.280
conhecer, não está relacionado a tipos de dados.

02:38.280 --> 02:40.840
Isso é trabalho nos bastidores.

02:40.840 --> 02:43.030
O JavaScript acrescenta tempo de

02:43.030 --> 02:46.510
execução, quando vê certos valores, e condições IF.

02:46.510 --> 02:48.530
Assim, com números, cordas e Booleans, obtemos

02:48.530 --> 02:50.060
um par de tipos de dados principais.

02:50.060 --> 02:51.450
Claro, não todos, temos objetos

02:51.450 --> 02:53.410
e assim por diante, também, mas vamos

02:53.410 --> 02:54.617
nos concentrar nestes

02:54.617 --> 02:57.330
tipos e ver o que o Typescript faz com eles, ou o que

02:57.330 --> 03:00.930
podemos fazer com eles, com a ajuda do Typescript.

03:00.930 --> 03:02.620
Para isto, estou de volta ao

03:02.620 --> 03:05.190
projeto, vimos no primeiro módulo de curso,

03:05.190 --> 03:07.600
e lá mostrei que tudo o que você precisa

03:07.600 --> 03:10.320
fazer, agora, é rodar npm start em um terminal,

03:10.320 --> 03:12.280
navegar nesta pasta do projeto,

03:12.280 --> 03:15.130
para girar este servidor de desenvolvimento

03:15.130 --> 03:18.110
ao vivo, que irá recarregar, sempre que mudarmos

03:18.110 --> 03:22.300
alguma coisa, e aqui, eu abri este endereço localhost:3000 na nova

03:22.300 --> 03:24.890
aba do meu navegador.

03:24.890 --> 03:26.070
Certo, estou recebendo um erro, porque

03:26.070 --> 03:28.300
ainda não tenho uma bandeja de aplicativos como arquivo.

03:28.300 --> 03:30.380
Naturalmente, você encontrará este projeto

03:30.380 --> 03:32.280
inicial, tudo anexado a esta palestra,

03:32.280 --> 03:34.400
obterá uma bandeja de aplicações como um arquivo,

03:34.400 --> 03:37.590
que estamos tentando importar aqui, em nosso arquivo html índice,

03:37.590 --> 03:42.050
assim que compilarmos a aplicação. ts do Typescript ao JavaScript e podemos fazer isso

03:42.050 --> 03:45.070
em uma nova aba do terminal, para que possamos manter este processo funcionando

03:45.070 --> 03:46.860
e abrir uma nova aba em seu lugar, simplesmente

03:46.860 --> 03:51.117
executando o aplicativo tsc. ts e o que isto faz é compilar o arquivo

03:53.920 --> 03:56.630
Typescript e cuspir um arquivo JavaScript,

03:56.630 --> 03:58.680
e uma vez que isso aconteça, podemos

03:58.680 --> 04:01.570
recarregar esta página e temos o Tempo para

04:01.570 --> 04:05.520
começar... saída aqui.

04:05.520 --> 04:08.000
Então, agora temos esta configuração aqui,

04:08.000 --> 04:10.620
onde podemos escrever algum código Typescript

04:10.620 --> 04:14.650
e depois compilá-lo em código JavaScript, para ver o que ele faz.

04:14.650 --> 04:17.000
Agora, com isso no arquivo Typescript, vou realmente

04:17.000 --> 04:18.870
me livrar do conteúdo lá, porque agora,

04:18.870 --> 04:21.820
quero mergulhar nestes tipos de dados centrais, que acabei

04:21.820 --> 04:23.720
de mostrar no slide, para que você entenda

04:23.720 --> 04:27.230
como trabalhar com eles no Typescript.

04:27.230 --> 04:29.430
Agora, vamos começar muito, muito simples.

04:29.430 --> 04:32.240
Digamos que temos uma nova função, adicionar,

04:32.240 --> 04:34.990
e aí esperamos dois números, n1 e adicionar

04:34.990 --> 04:38.610
dois, e que retornam n1 mais n2, assim mesmo, função muito

04:38.610 --> 04:42.370
simples, nada de Typescript-ish sobre isso.

04:42.370 --> 04:46.080
Agora, temos dois números com os quais queremos trabalhar.

04:46.080 --> 04:49.800
Isso poderia ser o número 1 aqui, que é, digamos, cinco

04:49.800 --> 04:54.680
e também o número 2, que é talvez 2. 8, o que você quiser,

04:54.680 --> 04:57.060
dois números aqui.

04:57.060 --> 04:59.820
Agora, obviamente e não muito surpreendentemente,

04:59.820 --> 05:02.950
podemos adicionar, ou chamar a função de adição e passar

05:02.950 --> 05:05.280
em número1 e número2 como argumentos para

05:05.280 --> 05:07.320
esta função, armazenar o resultado

05:07.320 --> 05:10.360
em uma nova constante talvez, e então, para ver algo na

05:10.360 --> 05:15.080
tela, podemos consolar.

05:15.080 --> 05:15.080
registrar o resultado.

05:15.080 --> 05:20.080
Se fizermos isso, e eu recompilar este arquivo com o tsc app. ts, então esta página deve ser automaticamente

05:20.270 --> 05:22.730
recarregada, já.

05:22.730 --> 05:24.350
Caso contrário, você pode recarregar manualmente,

05:24.350 --> 05:27.010
é claro, e você deve ver 7. 8.

05:27.010 --> 05:30.250
Agora, você pode pensar, isso não é muito especial, certo?

05:30.250 --> 05:33.650
Este é um trecho de JavaScript bastante direto e, de

05:33.650 --> 05:37.330
fato, não há nada que o Typescript-ish faça a respeito.

05:37.330 --> 05:39.450
Bem, vamos fazer algo que freie

05:39.450 --> 05:41.900
esse trecho em JavaScript normal.

05:41.900 --> 05:45.100
Digamos que esta entrada aqui não é na verdade um número,

05:45.100 --> 05:48.530
mas algum texto, um cinco em texto, e se nós agora salvarmos

05:48.530 --> 05:49.880
isso, e reexecutarmos

05:49.880 --> 05:53.380
nosso comando de compilação aqui, você verá que, uma vez

05:53.380 --> 05:56.110
que esta página for recarregada aqui, eu recebo

05:56.110 --> 05:59.530
52. 8 como um resultado e isso obviamente

05:59.530 --> 06:02.200
não é o resultado correto desta adição.

06:02.200 --> 06:04.500
Agora, você sabe porque estamos obtendo esta saída

06:04.500 --> 06:06.450
em JavaScript normal, que nós, no final

06:06.450 --> 06:08.670
das contas, estamos executando aqui.

06:08.670 --> 06:10.150
Bem, estamos obtendo esta saída,

06:10.150 --> 06:14.710
porque isto não é o resultado da adição matemática, mas, em vez disso, isto concatena

06:14.710 --> 06:17.760
isto como uma string, porque esta entrada, aqui, cinco,

06:17.760 --> 06:21.060
é uma string e então JavaScript vê, "Ok, eu tenho uma string, "Eu

06:21.060 --> 06:23.997
estou adicionando algo a esta string, enquanto certamente,

06:23.997 --> 06:27.667
"este algo também deve ser convertido em uma string, "de modo que, no

06:27.667 --> 06:30.467
geral, eu tenho uma string, "porque o primeiro valor

06:30.467 --> 06:32.097
era uma string," e, portanto,

06:32.097 --> 06:39.240
o que o JavaScript faz, é, ele converte 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
de um número a um fio, concatenando um fio mais longo de 5 e 2. 8, resultando

06:42.720 --> 06:46.700
em 52. 8, como um fio e retorna isso.

06:46.700 --> 06:49.490
Portanto, não é tratar isto de uma forma matemática,

06:49.490 --> 06:50.850
mas sim, como um fio, e com

06:50.850 --> 06:52.900
JavaScript, isto pode acontecer.

06:52.900 --> 06:54.037
Agora, claro, você pode pensar:

06:54.037 --> 06:55.427
"Por que eu escreveria tal código?

06:55.427 --> 06:58.160
"Eu sou o desenvolvedor, por que eu cometeria este erro? Bem, talvez você não seja o único, cometendo este erro.

06:58.160 --> 07:01.230
Talvez isto esteja sendo obtido de alguma entrada de usuário

07:01.230 --> 07:04.180
e você tenha introduzido um pequeno bug em seu código,

07:04.180 --> 07:06.690
onde você esqueceu de transformar isto, ou você

07:06.690 --> 07:09.350
está trabalhando em equipe e está tendo alguns arquivos

07:09.350 --> 07:12.460
de script, trabalhando juntos, e algum outro desenvolvedor

07:12.460 --> 07:14.740
introduziu tal erro.

07:14.740 --> 07:17.270
Não é impossível cometer tais erros,

07:17.270 --> 07:20.110
mas pode ser difícil rastreá-los.

07:20.110 --> 07:22.340
Aqui, claro, é bastante óbvio que algo deu errado,

07:22.340 --> 07:24.010
porque temos um roteiro básico, mas

07:24.010 --> 07:26.400
em um roteiro maior, você pode nem mesmo reconhecer

07:26.400 --> 07:28.320
imediatamente que algo deu errado aqui,

07:28.320 --> 07:31.520
e isso foi o Typescript que pode nos ajudar.

07:31.520 --> 07:33.720
Podemos adicionar atribuições de

07:33.720 --> 07:36.390
tipo nesta função, a nossos parâmetros.

07:36.390 --> 07:38.820
Podemos dizer ao Typescript que estes

07:38.820 --> 07:42.280
dois parâmetros devem ser do tipo número e não do tipo,

07:42.280 --> 07:45.340
não me importa qual seja o padrão.

07:45.340 --> 07:47.535
Então, fazemos isso, adicionando aqui dois

07:47.535 --> 07:50.300
pontos, depois do valor ao qual queremos atribuir

07:50.300 --> 07:52.890
um tipo, então, neste caso, depois do nome do parâmetro

07:52.890 --> 07:55.220
e, em seguida, o nome do tipo.

07:55.220 --> 07:57.140
Por exemplo, o número seria um dos nomes suportados.

07:57.140 --> 08:00.560
Além do número, você também tem fio, ou Boolean,

08:00.560 --> 08:03.480
mas nós voltaremos a esses.

08:03.480 --> 08:05.990
No momento, precisamos do número e não precisamos

08:05.990 --> 08:07.750
dele apenas no primeiro parâmetro

08:07.750 --> 08:10.530
aqui, mas também no segundo.

08:10.530 --> 08:12.010
Portanto, aqui também, podemos

08:12.010 --> 08:16.150
adicionar dois pontos, e depois número, e agora, o que estamos dizendo ao Typescript,

08:16.150 --> 08:18.367
é: "Ei, ambos os parâmetros aqui, devem ser

08:18.367 --> 08:22.147
do tipo número, "não é permitido passar em valores de um tipo diferente",

08:22.147 --> 08:25.530
e de fato, minha IDE já reclama aqui, porque o Visual Studio Code

08:25.530 --> 08:28.360
tem suporte a Typescript embutido, mas mesmo que nós

08:28.360 --> 08:32.510
ignorássemos isto, assim que eu recompilar isto, executando novamente o tsc

08:32.510 --> 08:34.260
app. ts, você vai ver,

08:34.260 --> 08:39.193
recebemos um erro.

08:40.040 --> 08:41.670
Recebemos um erro, que, "Argumento

08:41.670 --> 08:42.697
do tipo '"5" não é

08:42.697 --> 08:46.250
atribuível ao parâmetro do tipo 'número', e até nos mostra

08:46.250 --> 08:48.660
onde isto aconteceu e nos dá um número

08:48.660 --> 08:51.140
de linha, linha oito, e basicamente nos

08:51.140 --> 08:54.430
mostra o mesmo, a IDE mostra aqui.

08:54.430 --> 08:56.740
Portanto, no caso de não termos visto isso

08:56.740 --> 08:58.707
na IDE, compilando-a, agora joga um

08:58.707 --> 09:01.340
erro, e isso é o que importa no Typescript.

09:01.340 --> 09:03.284
Ela só nos ajuda durante a compilação.

09:03.284 --> 09:06.220
Ele não muda o JavaScript para funcionar de forma diferente em tempo

09:06.220 --> 09:10.110
de execução, porque os navegadores não têm suporte Typescript incorporado.

09:10.110 --> 09:13.510
Ele só pode nos ajudar durante o desenvolvimento, antes de

09:13.510 --> 09:15.700
compilarmos nosso código Typescript

09:15.700 --> 09:19.310
para JavaScript, mas lá, é extremamente útil, pois acrescenta

09:19.310 --> 09:21.520
um passo extra, uma verificação de sanidade

09:21.520 --> 09:25.560
extra, onde aqui, descobrimos: "Oh, cometemos um erro.

09:25.560 --> 09:28.407
"Aqui, isto não deveria ser um fio, isto deveria ser

09:28.407 --> 09:31.660
um número", e nós podemos consertar isto e estamos bem.

09:31.660 --> 09:34.210
Isto é o que o Typescript faz.

09:34.210 --> 09:35.670
Ele o ajuda durante o desenvolvimento.

09:35.670 --> 09:37.390
Ele não altera seu código de tempo de execução.

09:37.390 --> 09:40.130
De fato, aqui, mesmo com as configurações padrão,

09:40.130 --> 09:42.800
ele compilou nosso erro aqui, embora o tenha detectado

09:42.800 --> 09:44.700
durante a compilação, e criou um arquivo

09:44.700 --> 09:47.220
que causa o resultado incorreto, porque, por

09:47.220 --> 09:50.690
padrão, Typescript não entra, aqui.

09:50.690 --> 09:53.560
Mais tarde você aprenderá, como você pode ter certeza de que ele faz,

09:53.560 --> 09:56.300
mas por padrão, ele não bloqueia nem mesmo a compilação.

09:56.300 --> 09:59.260
Ainda assim, ele grita para você e aponta para este

09:59.260 --> 10:03.570
erro, para que você possa corrigi-lo, e para que você possa evitar tais

10:03.570 --> 10:04.850
erros aqui.

10:04.850 --> 10:07.450
A propósito, certifique-se de que você

10:07.450 --> 10:09.020
não tem aplicação. js e app. ts abrem ao mesmo tempo.

10:09.020 --> 10:11.950
Você pode obter erros aqui na IDE, com

10:11.950 --> 10:13.470
relação a implementações de funções duplicadas.

10:13.470 --> 10:15.830
O fechamento do arquivo JavaScript corrige isso.
