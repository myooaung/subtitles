WEBVTT

00:02.110 --> 00:03.890
Người hướng dẫn: Vì vậy, bây giờ,

00:03.890 --> 00:07.820
sau tất cả những tính năng mà chúng ta đã làm việc với chính các loại,

00:07.820 --> 00:10.340
có thể nói, chúng ta đã làm việc với việc kiểm

00:10.340 --> 00:13.880
tra các loại, các loại chi phí, hãy quay lại các tính năng giúp

00:13.880 --> 00:16.110
chúng ta sử dụng mã linh hoạt.

00:16.110 --> 00:17.930
Tất nhiên, vẫn viết hai loại.

00:17.930 --> 00:20.150
Rốt cuộc thì đó là bản đánh máy, nhưng không tập

00:20.150 --> 00:23.520
trung quá nhiều vào chỉ các loại, bây giờ chúng ta có thể quản lý chúng.

00:23.520 --> 00:25.830
Và để làm được điều đó, tôi muốn bắt đầu với

00:25.830 --> 00:29.040
các loại chỉ mục, một tính năng cho phép chúng ta tạo các

00:29.040 --> 00:31.150
đối tượng linh hoạt hơn về các thuộc tính

00:31.150 --> 00:33.010
mà chúng có thể nắm giữ.

00:33.010 --> 00:34.485
Bây giờ ý tôi là gì?

00:34.485 --> 00:36.813
Giả sử bạn đang viết một ứng dụng mà bạn

00:36.813 --> 00:39.680
đang xác thực một số đầu vào của người dùng.

00:39.680 --> 00:41.810
Vì vậy, bạn có nhiều trường đầu vào

00:41.810 --> 00:44.603
và tùy thuộc vào những gì người dùng nhập vào đó

00:44.603 --> 00:46.682
và đó là trường nào, bạn có thể muốn

00:46.682 --> 00:50.490
lưu trữ và cuối cùng hiển thị các thông báo lỗi khác nhau.

00:50.490 --> 00:52.520
Ví dụ: nếu đó là trường email, bạn

00:52.520 --> 00:54.360
muốn kiểm tra xem đó là ai trong

00:54.360 --> 00:55.590
email và nếu không phải

00:55.590 --> 00:59.830
thì bạn muốn thêm thông báo lỗi thích hợp vào vùng chứa lỗi.

00:59.830 --> 01:01.133
Vì vậy, đó là những gì tôi sẽ bắt đầu với.

01:01.133 --> 01:06.133
Tôi sẽ có thùng chứa lỗi giao diện của mình ở đây.

01:07.570 --> 01:09.530
Và đó phải là một đối tượng, do đó tôi

01:09.530 --> 01:11.400
sử dụng một giao diện ở đây, nhưng

01:11.400 --> 01:14.090
nó phải linh hoạt về những gì nó nắm giữ.

01:14.090 --> 01:15.680
Cuối cùng, mục tiêu của tôi là

01:15.680 --> 01:17.692
với điều đó chúng ta có thể xử lý các đối

01:17.692 --> 01:20.782
tượng mà chúng ta có một số mã định danh lỗi, điều này có

01:20.782 --> 01:23.700
thể là lý tưởng nếu trường đầu vào chứa lỗi.

01:23.700 --> 01:26.581
Ví dụ, thư điện tử. Và sau đó là một số chuỗi

01:26.581 --> 01:31.581
lỗi, không phải là một email hợp lệ. Và sau đó chúng tôi có một tài sản khác.

01:32.130 --> 01:35.610
Giả sử tên người dùng và sau đó một chuỗi lỗi

01:35.610 --> 01:37.150
có thể đang lưu trữ trường

01:37.150 --> 01:39.280
đầu vào đó nếu trường đầu vào

01:39.280 --> 01:41.611
không chính xác.

01:41.611 --> 01:45.770
Phải bắt đầu bằng một ký tự.

01:45.770 --> 01:49.170
Một cái gì đó như thế nên được lưu trữ trong đối tượng đó.

01:49.170 --> 01:51.992
Vấn đề với điều đó là, tôi không biết trước những

01:51.992 --> 01:55.320
tên bất động sản chính xác mà chúng ta sẽ có trong đó.

01:55.320 --> 01:58.021
Bạn có thể nói, chúng tôi sẽ có email và tên người

01:58.021 --> 02:01.650
dùng, nhưng đối với tôi, tôi muốn đây là một vùng chứa linh hoạt.

02:01.650 --> 02:03.150
Tôi muốn có thể sử dụng nó trên bất

02:03.150 --> 02:05.350
kỳ biểu mẫu nào tôi có trong trang web của mình.

02:05.350 --> 02:07.560
Và tôi có thể có các biểu mẫu khác nhau với các

02:07.560 --> 02:10.157
đầu vào khác nhau với các số nhận dạng khác nhau.

02:10.157 --> 02:12.741
Vì vậy, tôi không muốn giới hạn bản thân chỉ

02:12.741 --> 02:16.150
với các lỗi tên người dùng và email của chúng tôi.

02:16.150 --> 02:18.461
Ngoài ra, ngay cả khi chúng tôi luôn chỉ

02:18.461 --> 02:20.859
nhập email và tên người dùng và chúng tôi

02:20.859 --> 02:23.291
chỉ muốn lưu trữ lỗi cho những mục đó.

02:23.291 --> 02:27.461
Chúng tôi phải làm gì nếu chỉ email không hợp lệ chứ không phải tên người dùng?

02:27.461 --> 02:30.912
Sau đó, tất nhiên trong đối tượng này, chúng tôi có thể lưu trữ null

02:30.912 --> 02:34.421
dưới dạng giá trị cho tên người dùng, nhưng tôi chỉ muốn bỏ qua nó.

02:34.421 --> 02:37.232
Vì vậy, chúng ta có một đối tượng chỉ chứa các thuộc

02:37.232 --> 02:40.419
tính cho các đầu vào mà chúng ta gặp lỗi không?

02:40.419 --> 02:42.960
Vì vậy, chúng tôi cũng có thể lặp qua đối tượng này

02:42.960 --> 02:46.260
bằng một vòng lặp bốn vòng để đọc tất cả các lỗi mà chúng tôi gặp

02:46.260 --> 02:48.200
phải chẳng hạn và không có bất kỳ thuộc

02:48.200 --> 02:51.112
tính nào trong đó không thực sự lưu trữ lỗi.

02:51.112 --> 02:53.261
Tóm lại, tôi cần một đối tượng

02:53.261 --> 02:56.861
mà tôi khá rõ ràng về loại giá trị.

02:56.861 --> 03:00.260
Nó phải là một chuỗi, nhưng tôi không nói trước

03:00.260 --> 03:02.190
bao nhiêu thuộc tính mà tôi

03:02.190 --> 03:05.320
sẽ có và tên của các thuộc tính đó.

03:05.320 --> 03:08.171
Và đối với trường hợp như vậy, chúng ta có thể sử dụng các loại chỉ mục.

03:08.171 --> 03:10.760
Bạn xác định loại chỉ mục bằng cách sử dụng dấu ngoặc vuông ở đây.

03:10.760 --> 03:14.730
Hãy nhớ rằng bình thường chúng ta sẽ viết tên thuộc tính ở đây, nhưng bây giờ chúng

03:14.730 --> 03:16.280
ta sử dụng dấu ngoặc vuông.

03:16.280 --> 03:21.280
Sau đó, bất kỳ tên nào bạn chọn, chẳng hạn như key hoặc prop.

03:23.581 --> 03:28.581
Sau đó, một dấu hai chấm. Và sau đó là loại giá trị của tài sản.

03:29.010 --> 03:30.010
Và sau đó là một đối tượng.

03:30.010 --> 03:33.760
Bạn không thể có chuỗi, số hoặc ký hiệu làm thuộc tính.

03:33.760 --> 03:37.660
Ví dụ, bạn không thể sử dụng boolean ở đây. Điều đó không được phép.

03:37.660 --> 03:40.504
Nhưng bạn có thể sử dụng chuỗi ở đây.

03:40.504 --> 03:43.190
Với điều đó, tôi chỉ đơn giản nói rằng bất

03:43.190 --> 03:46.330
kỳ đối tượng nào tôi đang xây dựng dựa trên giao

03:46.330 --> 03:51.083
diện bộ chứa lỗi này sau này đều phải có các thuộc tính, đó là các chuỗi.

03:52.120 --> 03:53.928
Tên người dùng chẳng hạn sẽ là một chuỗi hợp lệ

03:53.928 --> 03:55.899
ngay cả khi tôi không đặt nó trong dấu ngoặc kép.

03:55.899 --> 03:59.980
Sau đó, chúng tôi thêm một dấu hai chấm. Và sau đó là loại giá trị, đó

03:59.980 --> 04:01.629
là chuỗi. Vì vậy, tôi đang

04:01.629 --> 04:04.320
nói rằng tôi không biết tên tài sản chính xác.

04:04.320 --> 04:07.620
Tôi cũng không biết số lượng tài sản.

04:07.620 --> 04:10.608
Tôi chỉ biết rằng mọi thuộc tính được thêm

04:10.608 --> 04:13.459
vào đối tượng này, dựa trên bộ chứa lỗi,

04:13.459 --> 04:16.959
phải có tên thuộc tính có thể được hiểu là một

04:16.959 --> 04:20.640
chuỗi và giá trị của thuộc tính cũng phải là một

04:20.640 --> 04:23.080
chuỗi. Đó là những gì tôi đang nói ở đây.

04:23.080 --> 04:28.080
Bây giờ, với điều đó, chúng ta vẫn có thể thêm các thuộc tính được xác định trước,

04:29.560 --> 04:31.906
tuy nhiên, chỉ khi chúng cùng loại với

04:31.906 --> 04:35.339
thuộc tính này ở đây. Vì vậy, chúng tôi có thể thêm một ID là một loại chuỗi.

04:35.339 --> 04:39.760
Và sau đó, bất kỳ đối tượng nào chúng tôi xây dựng tuân theo giao diện này phải có

04:39.760 --> 04:43.360
thuộc tính ID và có thể thêm bao nhiêu thuộc tính khác tùy thích,

04:43.360 --> 04:47.370
nhưng chúng tôi không thể đặt ID thành một số ở đây, chẳng hạn, vì chúng

04:47.370 --> 04:49.277
tôi có một loại chỉ mục ở đây.

04:49.277 --> 04:53.033
Vì vậy, đó là một hạn chế mà chúng tôi có nếu chúng tôi xây dựng một đối tượng như vậy.

04:55.240 --> 04:56.550
Vì vậy, bây giờ hậu quả là gì?

04:56.550 --> 05:00.080
Bây giờ chúng ta có thể tạo một túi lỗi chẳng hạn thuộc loại

05:00.080 --> 05:02.390
thùng chứa lỗi, do đó là một đối tượng

05:02.390 --> 05:05.150
và nó sẽ hợp lệ như thế này vì chúng ta không phải

05:05.150 --> 05:07.440
thêm bất kỳ thuộc tính nào.

05:07.440 --> 05:10.340
Đó là tất cả các hợp lệ. Nhưng tất nhiên bây giờ chúng ta có thể thêm một số.

05:10.340 --> 05:13.380
Ví dụ: email không phải là email hợp lệ.

05:13.380 --> 05:15.780
Và điều này là được. Sẽ không ổn nếu thay vào

05:15.780 --> 05:17.093
đó tôi chỉ định một số ở đây

05:17.093 --> 05:19.133
vì chúng tôi đang nói rằng mọi thuộc tính

05:19.133 --> 05:23.001
đều cần một loại giá trị chuỗi. Vì vậy, chúng ta phải sử dụng một chuỗi ở đây.

05:23.001 --> 05:25.940
Nếu tôi sử dụng một số ở đây, nó sẽ hoạt động vì

05:25.940 --> 05:28.610
nó cũng có thể được hiểu là một chuỗi.

05:28.610 --> 05:30.883
Vì vậy, tôi cũng có thể sử dụng một số làm loại khóa

05:30.883 --> 05:33.031
ở đây nếu tôi muốn. Tôi khá tự do về những

05:33.031 --> 05:35.981
gì tôi sử dụng ở đây. Nếu nó thay đổi loại

05:35.981 --> 05:40.981
chống đỡ ở đây thành số, thì bạn có thể làm điều đó và điều này

05:42.130 --> 05:44.810
sẽ ổn thôi. Nhưng điều này sẽ không xảy ra

05:44.810 --> 05:46.470
vì email không phải là một con số.

05:46.470 --> 05:48.170
Điều này không thể được chuyển đổi thành một số.

05:48.170 --> 05:51.550
Nó có thể được coi là một chuỗi, nhưng không phải là một số.

05:51.550 --> 05:54.870
Vì vậy, đây là cách bạn kiểm soát loại thuộc tính hoặc tên

05:54.870 --> 05:56.990
thuộc tính nào mà bạn cho phép.

05:56.990 --> 05:59.493
Và ở đây tôi đã làm một cái để cho phép tên thuộc tính chuỗi.

05:59.493 --> 06:02.264
Vì vậy, bất kỳ thứ gì có thể được chuyển đổi thành chuỗi đều

06:02.264 --> 06:04.740
là tên thuộc tính hợp lệ. Và sau đó giá trị cũng

06:04.740 --> 06:06.413
phải là một chuỗi.

06:06.413 --> 06:08.021
Và như tôi đã nói, tất nhiên

06:08.021 --> 06:10.632
bây giờ chúng ta có thể thêm nhiều giá trị

06:10.632 --> 06:12.830
ở đây, tôi nên nói nhiều giá trị.

06:12.830 --> 06:17.263
Phải bắt đầu bằng ký tự viết hoa.

06:18.170 --> 06:21.220
Vì vậy, đây hiện là một túi lỗi mà chúng tôi có thể

06:21.220 --> 06:22.722
xây dựng với sự trợ giúp của

06:22.722 --> 06:25.392
bộ chứa lỗi, giúp chúng tôi linh hoạt hơn mà

06:25.392 --> 06:27.522
chúng tôi không cần biết trước tên

06:27.522 --> 06:30.740
thuộc tính nào chúng tôi muốn sử dụng và số lượng thuộc

06:30.740 --> 06:32.653
tính chúng tôi cần.
