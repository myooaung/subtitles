WEBVTT

00:02.440 --> 00:04.260
-: Voordat we in meer voorbeelden duiken,

00:04.260 --> 00:05.433
laten we eerst begrijpen

00:05.433 --> 00:07.940
in welke volgorde decoratoren lopen.

00:07.940 --> 00:10.530
En hier is het belangrijk te begrijpen

00:10.530 --> 00:11.950
dat ze allemaal draaien

00:11.950 --> 00:13.710
zonder dat wij dit product

00:13.710 --> 00:15.396
instantiëren.

00:15.396 --> 00:16.600
Of, met andere woorden,

00:16.600 --> 00:18.300
als ik hier een product

00:18.300 --> 00:19.670
maak met, nieuw product,

00:19.670 --> 00:21.233
boek, voor $19, en ik

00:21.233 --> 00:24.563
maak hier een ander product, boek twee voor,

00:24.563 --> 00:26.660
$29.

00:26.660 --> 00:27.887
dit voldeed zonder

00:27.887 --> 00:29.970
fouten van mijn decorator code

00:29.970 --> 00:31.730
hier niet vaker.

00:31.730 --> 00:35.350
Het gaat dus niet om de instantiëring van deze klasse.

00:35.350 --> 00:36.680
Al deze decoratoren, ongeacht

00:36.680 --> 00:38.452
of het een property decorator, een

00:38.452 --> 00:41.810
method decorator, een accessor decorator, of een parameter

00:41.810 --> 00:43.620
decorator was, ze werden allemaal

00:43.620 --> 00:46.770
uitgevoerd toen u deze klasse definieerde, en dat is belangrijk

00:46.770 --> 00:48.930
om te begrijpen.

00:48.930 --> 00:50.960
Dit zijn geen decoratoren die tijdens het uitvoeren

00:50.960 --> 00:53.190
worden uitgevoerd wanneer u de methode aanroept of

00:53.190 --> 00:55.100
wanneer u met een eigenschap werkt.

00:55.100 --> 00:57.190
Dit is niet wat ze doen.

00:57.190 --> 00:59.360
In plaats daarvan kunt u met deze decoratoren

00:59.360 --> 01:01.875
extra instellingswerk achter de schermen doen

01:01.875 --> 01:04.397
wanneer een klasse wordt gedefinieerd.

01:04.397 --> 01:06.590
Terug naar dat metaprogrammeringsconcept

01:06.590 --> 01:08.070
dat ik eerder uitlegde.

01:08.070 --> 01:10.200
Dat is het idee achter decorators

01:10.200 --> 01:12.410
of hun kerngebruik.

01:12.410 --> 01:15.520
Het zijn geen event listeners die je aan iets toevoegt zodat je, wanneer

01:15.520 --> 01:17.100
je met een eigenschap werkt, wat code

01:17.100 --> 01:18.490
kunt uitvoeren.

01:18.490 --> 01:19.740
Je kunt zoiets laten

01:19.740 --> 01:21.069
werken met decorators,

01:21.069 --> 01:23.740
maar door iets achter de schermen te wijzigen,

01:23.740 --> 01:24.977
maar de decorator zelf

01:24.977 --> 01:26.756
is eigenlijk gewoon een functie

01:26.756 --> 01:29.710
die wordt uitgevoerd wanneer je klasse is gedefinieerd,

01:29.710 --> 01:35.010
wanneer je (mompelt) en je kunt de decorator dan gebruiken om wat werk achter de schermen

01:35.010 --> 01:39.890
te doen, om dan wat code in te stellen die moet worden uitgevoerd wanneer dit

01:39.890 --> 01:43.660
wordt aangeroepen.

01:43.660 --> 01:47.310
Om extra metagegevens toe te voegen of gegevens over een eigenschap ergens

01:47.310 --> 01:50.030
anders in uw project of in uw bibliotheek, die u aan het

01:50.030 --> 01:51.696
maken bent, op te slaan.

01:51.696 --> 01:54.075
Dit is waar je decorators voor kunt gebruiken,

01:54.075 --> 01:55.756
en dat is al het patroon dat je

01:55.756 --> 01:58.420
zult zien als ik je nu deze voorbeelden laat

01:58.420 --> 02:00.320
zien van wat je met decorators zou

02:00.320 --> 02:02.290
kunnen bouwen.

02:02.290 --> 02:04.740
Ze voegen achter de schermen extra functionaliteit

02:04.740 --> 02:06.200
toe die dan soms kan worden

02:06.200 --> 02:08.060
uitgevoerd wanneer je iets doet

02:08.060 --> 02:14.313
met je klasse of met je methode, maar die ook totaal andere dingen kan doen.

02:15.240 --> 02:17.860
Dat is allemaal belangrijk voor ons persoonsvoorbeeld

02:17.860 --> 02:21.320
van eerder met de template decorator.

02:21.320 --> 02:22.980
Dit voegt dit sjabloon niet toe wanneer

02:22.980 --> 02:25.160
we hier een persoon instantiëren.

02:25.160 --> 02:27.890
Het voegt het toe wanneer we deze klasse definiëren.

02:27.890 --> 02:29.820
We zouden extra logica moeten toevoegen

02:29.820 --> 02:31.650
in onze decoratorfunctie om dit gedrag

02:31.650 --> 02:33.140
te veranderen.

02:33.140 --> 02:35.980
En om dit sjabloon misschien gewoon op te slaan

02:35.980 --> 02:38.441
in een andere gegevensstructuur van ons

02:38.441 --> 02:41.380
project, waar we dan in tabben wanneer we hier een

02:41.380 --> 02:43.650
nieuwe persoon aanmaken.

02:43.650 --> 02:45.278
Dus dan stellen we dit in principe gewoon

02:45.278 --> 02:47.240
in wanneer we de klasse definiëren, maar dan

02:47.240 --> 02:48.400
slaan we het intern op achter

02:48.400 --> 02:49.890
de schermen en kunnen we het gebruiken

02:49.890 --> 02:52.350
wanneer we het willen gebruiken.

02:52.350 --> 02:54.160
Nu geven we dit altijd weer wanneer we deze

02:54.160 --> 02:55.380
klasse definiëren, niet wanneer

02:55.380 --> 02:57.610
je een nieuwe instantie aanmaakt.

02:57.610 --> 02:59.570
Dit is hoe decoratoren uitvoeren en

02:59.570 --> 03:00.403
zoals ik al zei,

03:00.403 --> 03:01.940
zal ik nu een paar voorbeelden

03:01.940 --> 03:04.504
laten zien waarin we gebruik maken van decoratoren

03:04.504 --> 03:06.900
in het algemeen en van hun uitvoeringstijd om

03:06.900 --> 03:08.883
er leuke dingen mee te doen.
