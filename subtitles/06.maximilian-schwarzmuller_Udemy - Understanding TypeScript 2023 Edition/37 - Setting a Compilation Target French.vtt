WEBVTT

00:02.450 --> 00:04.810
Instructeur : Maintenant que nous avons compris

00:04.810 --> 00:07.850
comment gérer nos fichiers avec le compilateur, plongeons dans

00:07.850 --> 00:09.870
les options du compilateur, car c'est vraiment

00:09.870 --> 00:11.300
intéressant.

00:11.300 --> 00:13.860
Cela nous permet de contrôler la façon dont

00:13.860 --> 00:16.620
notre code TypeScript est compilé, donc non seulement

00:16.620 --> 00:18.360
quels fichiers, mais aussi comment

00:18.360 --> 00:20.920
les fichiers qui sont compilés sont traités

00:20.920 --> 00:23.230
par TypeScript.

00:23.230 --> 00:26.760
Et là vous voyez que nous avons un tas d'options.

00:26.760 --> 00:29.560
Vous avez de courtes explications à côté de ces options.

00:29.560 --> 00:32.450
Certaines explications sont sans doute un peu cryptiques.

00:32.450 --> 00:34.210
D'autres sont très claires.

00:34.210 --> 00:36.450
Et je dirai que beaucoup de ces options, la plupart

00:36.450 --> 00:39.950
de ces options n'auront pas d'importance dans la plupart des projets.

00:39.950 --> 00:43.900
Ainsi, vous ne définirez pas toutes ces options, loin s'en faut.

00:43.900 --> 00:46.070
Vous pouvez généralement ignorer un grand nombre de ces options.

00:46.070 --> 00:48.765
Je reprendrai ici les options importantes tout au long de

00:48.765 --> 00:50.230
ce cours, car certaines options

00:50.230 --> 00:52.140
n'ont de sens que lorsque nous apprenons

00:52.140 --> 00:53.911
une certaine fonctionnalité.

00:53.911 --> 00:55.940
Et j'ai envie de me plonger dans certaines

00:55.940 --> 00:57.250
options dès maintenant.

00:57.250 --> 01:00.840
Et pour cela, parcourons le dossier de haut en bas et voyons

01:00.840 --> 01:02.340
ce que nous avons là.

01:02.340 --> 01:04.410
Commençons par l'option cible.

01:04.410 --> 01:07.230
Comme vous le voyez, cette option est en fait définie par défaut.

01:07.230 --> 01:08.750
Ce n'est pas commenté.

01:08.750 --> 01:10.780
Cette option permet d'indiquer

01:10.780 --> 01:15.530
à TypeScript pour quelle version JavaScript cible vous souhaitez compiler

01:15.530 --> 01:16.970
le code.

01:16.970 --> 01:18.850
En effet, TypeScript ne se contente

01:18.850 --> 01:21.600
pas de compiler de nouvelles fonctionnalités,

01:21.600 --> 01:23.500
comme les annotations de type qui

01:23.500 --> 01:26.960
n'existent pas en JavaScript, dans le code JavaScript.

01:26.960 --> 01:29.667
Il ne s'agit donc pas seulement

01:29.667 --> 01:33.270
de s'assurer que cela fonctionne.

01:33.270 --> 01:37.530
Il compile également le code en JavaScript qui fonctionne

01:37.530 --> 01:41.370
dans un certain nombre de navigateurs.

01:41.370 --> 01:43.798
Et vous définissez essentiellement les navigateurs qui

01:43.798 --> 01:46.980
prennent en charge le code de compilation en définissant la cible.

01:46.980 --> 01:49.520
La cible par défaut ici dans ce projet comme vous le voyez,

01:49.520 --> 01:52.430
la cible initiale qui est mise en place est es5, ce qui signifie

01:52.430 --> 01:55.517
que tous les types de code sont compilés vers le bas.

01:55.517 --> 01:57.550
On peut effectivement le voir.

01:57.550 --> 02:00.770
Si je lance TSC ici pour compiler tous mes fichiers, nous

02:00.770 --> 02:03.260
voyons dans app. ts J'utilise let et const,

02:03.260 --> 02:05.732
mais dans app. js, nous nous voyons.

02:05.732 --> 02:09.890
Et cela arrive parce que nous avons une cible d'es5 et dans

02:09.890 --> 02:13.816
le monde d'es5, nous n'avons pas de let et const.

02:13.816 --> 02:16.810
La bonne nouvelle, c'est que nous pouvons utiliser TypeScript

02:16.810 --> 02:20.650
pour générer du code qui fonctionne également dans les anciens navigateurs.

02:20.650 --> 02:22.930
Mais c'est à nous de décider si nous voulons le faire.

02:22.930 --> 02:25.550
Peut-être que nous ne voulons pas faire cela avec TypeScript,

02:25.550 --> 02:27.670
parce que nous avons peut-être un autre outil de construction

02:27.670 --> 02:30.560
qui s'occupera de la transpilation JavaScript et donc nous ne voulons

02:30.560 --> 02:33.290
pas que TypeScript le fasse, ou peut-être que nous voulons envoyer

02:33.290 --> 02:35.340
du code qui ne fonctionne que dans les navigateurs

02:35.340 --> 02:37.030
modernes parce que nous savons que notre

02:37.030 --> 02:41.170
application ne fonctionnera que dans les navigateurs modernes.

02:41.170 --> 02:44.160
Et donc, des options alternatives peuvent être vues ici

02:44.160 --> 02:46.070
si vous supprimez la valeur et ensuite

02:46.070 --> 02:48.080
ici dans vscode au moins, si vous appuyez

02:48.080 --> 02:51.300
sur Control + Space pour obtenir l'auto-complétion, vous

02:51.300 --> 02:54.180
voyez un tas de suggestions et vous voyez toutes les

02:54.180 --> 02:56.450
valeurs disponibles ici.

02:56.450 --> 02:58.700
Au fil du temps, cela changera bien sûr, car

02:58.700 --> 03:01.900
de nouvelles versions de JavaScript seront publiées.

03:01.900 --> 03:03.785
Vous avez vu que nous l'avons réglé sur es5 avant.

03:03.785 --> 03:06.150
Si vous ne spécifiez pas de cible du tout, alors

03:06.150 --> 03:09.520
à l'heure actuelle, TypeScript compile même en es3, et prend donc

03:09.520 --> 03:12.200
en charge une version encore plus ancienne.

03:12.200 --> 03:15.130
Mais vous pouvez aussi opter pour es6, qui est

03:15.130 --> 03:17.510
plus moderne, qui, par exemple, prend

03:17.510 --> 03:19.310
en charge const et prenons une

03:19.310 --> 03:24.310
version encore plus récente, es6 est équivalent à es2015, pour mémoire.

03:24.870 --> 03:27.480
Donc, si nous définissons ce paramètre à es6, par exemple,

03:27.480 --> 03:29.580
et que je relance la commande tsc après avoir

03:29.580 --> 03:32.460
modifié le tsconfig. json, vous le verrez maintenant

03:32.460 --> 03:35.440
dans l'application. js, nous avons obtenu let et

03:35.440 --> 03:38.130
const, parce que maintenant c'est supporté là.

03:38.130 --> 03:39.340
C'est donc à vous de décider.

03:39.340 --> 03:41.720
Bien entendu, plus la version de JavaScript

03:41.720 --> 03:43.641
que vous choisissez ici est moderne,

03:43.641 --> 03:47.450
plus le code généré est concis, car TypeScript doit compiler

03:47.450 --> 03:50.440
de moins en moins de code, ou doit contourner des

03:50.440 --> 03:54.010
fonctionnalités inexistantes dans moins de situations,

03:54.010 --> 03:57.820
et donc, le code compilé est généralement plus concis et plus

03:57.820 --> 03:59.560
court.

03:59.560 --> 04:01.150
C'est donc la cible.

04:01.150 --> 04:02.623
Qu'en est-il des autres options ?
