WEBVTT

00:02.270 --> 00:03.613
Người hướng dẫn: Vì vậy, chúng

00:03.613 --> 00:05.080
ta có thể trả về một thứ gì đó trên Bộ

00:05.080 --> 00:06.820
trang trí phương thức và thứ gì đó phải là

00:06.820 --> 00:08.920
một bộ mô tả, cho phép chúng ta thay đổi phương thức

00:08.920 --> 00:11.000
hoặc thay đổi cấu hình của phương thức.

00:11.000 --> 00:12.582
Và đây là điều tôi muốn làm ở đây.

00:12.582 --> 00:15.985
Trước đó, trước tiên tôi sẽ chuyển đến tệp HTML

00:15.985 --> 00:18.540
chỉ mục và ở đó, hãy thêm một nút.

00:18.540 --> 00:21.272
Nhấp vào Tôi, một nút rất đơn giản, trong

00:21.272 --> 00:24.720
ứng dụng của tôi. ts, bây giờ tôi muốn đảm bảo rằng

00:24.720 --> 00:26.104
khi chúng ta nhấp vào nút

00:26.104 --> 00:29.800
này, chúng ta sẽ thực thi một phương thức trên một đối tượng.

00:29.800 --> 00:32.120
Và để làm được điều đó, tôi sẽ chỉ cần thêm

00:32.120 --> 00:34.600
một lớp mới ở đây, trước hết là máy in.

00:34.600 --> 00:38.140
Và trong đó tôi muốn có một thông báo thuộc tính chỉ hoạt

00:38.140 --> 00:41.690
động này, vì vậy một chuỗi đơn giản được lưu trữ trong

00:41.690 --> 00:45.980
đó và sau đó tôi muốn có một phương thức thông báo hiển thị ở đó, nơi

00:45.980 --> 00:49.630
tôi chỉ cần điều khiển ghi lại thông báo này.

00:49.630 --> 00:51.770
Vì vậy, tất nhiên, đây là một loại lớp giả đơn giản nhưng không

00:51.770 --> 00:53.430
kém phần quan trọng, điều này cho phép tôi cho bạn

00:53.430 --> 00:54.860
thấy những gì tôi muốn cho bạn thấy.

00:54.860 --> 00:56.550
Hãy chọn nút mở cửa ngay

00:56.550 --> 01:00.860
bây giờ, với nút bộ chọn truy vấn tài liệu và hãy thêm một trình

01:00.860 --> 01:02.970
lắng nghe sự kiện vào đó.

01:02.970 --> 01:05.080
Bây giờ, trước hết, tôi sẽ thêm dấu chấm than

01:05.080 --> 01:07.800
của mình vào đây để TypeScript hiểu rõ rằng điều này tồn tại,

01:07.800 --> 01:08.806
rằng điều này sẽ không

01:08.806 --> 01:10.990
rỗng, và sau đó tôi sẽ thêm một trình xử lý sự kiện,

01:10.990 --> 01:14.210
một trình xử lý sự kiện nhấp chuột, và sau đó tôi muốn kích hoạt phương

01:14.210 --> 01:16.450
thức thông báo hiển thị này tại đây.

01:16.450 --> 01:20.350
Để làm được điều đó, tôi sẽ tạo một máy in mới ở đây, như thế này,

01:20.350 --> 01:23.120
và sau đó trỏ vào p. showMessage, đó là ý tưởng

01:23.120 --> 01:24.323
của tôi ở đây.

01:25.300 --> 01:27.103
Bây giờ, nếu chúng tôi lưu nó và chúng

01:28.153 --> 01:31.440
tôi quay lại trang của mình và tôi nhấp vào nút này, chúng tôi sẽ không

01:31.440 --> 01:33.320
xác định được ở đây, tuy nhiên, chúng tôi

01:33.320 --> 01:36.050
không nhận được thông báo của mình được hiển thị.

01:36.050 --> 01:38.860
Và lý do cho điều đó là với một trình lắng

01:38.860 --> 01:41.820
nghe sự kiện, nếu chúng ta chỉ vào một hàm

01:41.820 --> 01:44.240
sẽ được thực thi thì từ khóa this bên

01:44.240 --> 01:48.260
trong hàm đó sẽ không có cùng ngữ cảnh hoặc tham chiếu như

01:48.260 --> 01:52.193
nếu chúng ta chỉ gọi p. ShowMessage, trong trường

01:53.144 --> 01:56.450
hợp này, điều này sẽ đề cập đến máy in.

01:56.450 --> 02:00.200
Không, trong trường hợp ở đây chúng tôi sử dụng trình lắng nghe

02:00.200 --> 02:02.860
sự kiện, điều này sẽ đề cập đến mục tiêu của sự kiện,

02:02.860 --> 02:05.777
bởi vì addEventListener cuối cùng sẽ liên kết điều

02:05.777 --> 02:07.693
này trong hàm sẽ được thực thi với

02:07.693 --> 02:09.560
mục tiêu của sự kiện.

02:09.560 --> 02:11.360
Và tất nhiên, tôi không muốn điều này.

02:11.360 --> 02:12.570
Bây giờ, một cách giải

02:12.570 --> 02:14.170
quyết phổ biến ở đây sẽ là sử dụng

02:14.170 --> 02:19.170
phương thức liên kết và liên kết showMessage với p hoặc liên kết cái này trong showMessage

02:19.480 --> 02:22.860
với p để khi điều này thực thi, điều này không đề cập đến những

02:22.860 --> 02:25.420
gì addEventListener muốn nó đề cập đến mà thay

02:25.420 --> 02:28.040
vào đó là điều này bên trong showMessage sẽ đề

02:28.040 --> 02:31.770
cập đến p này, đối tượng này một lần nữa ở đây.

02:31.770 --> 02:33.300
Và nếu bây giờ, nếu chúng ta tải lại

02:33.300 --> 02:36.270
ở đây và tôi xóa nó một lần nữa, bây giờ chúng ta sẽ thấy nó hoạt động!

02:36.270 --> 02:39.240
Bây giờ, đó là tất cả JavaScript mặc định.

02:39.240 --> 02:40.790
Bây giờ, chúng ta sẽ xây dựng

02:40.790 --> 02:42.191
một trình trang trí, mà chúng

02:42.191 --> 02:47.191
ta có thể thêm vào phương thức này, nó sẽ tự động liên kết phương thức này với lớp xung quanh,

02:47.460 --> 02:50.130
do đó, phương thức này thuộc về đối tượng, mỗi

02:50.130 --> 02:53.440
khi nó được gọi, bất kể chúng ta gọi nó ở đâu.

02:53.440 --> 02:55.974
Vì vậy, phía trên máy in, tôi sẽ thêm một chức năng mới

02:55.974 --> 02:58.800
và tôi sẽ đặt tên nó là autobind vì cuối cùng, đó là những gì

02:58.800 --> 03:01.580
chúng tôi làm và đó sẽ là autobind trang trí của tôi.

03:01.580 --> 03:03.890
Tất nhiên, cũng có thể sử dụng ký tự bắt đầu viết hoa

03:03.890 --> 03:05.960
để phù hợp với các cách đặt tên khác của chúng tôi

03:05.960 --> 03:07.930
nhưng một lần nữa, bạn có thể sử dụng một trong

03:07.930 --> 03:10.122
hai ký tự khi bạn xác định hàm trang trí.

03:10.122 --> 03:13.300
Bây giờ đây sẽ là vật trang trí của tôi và trong

03:13.300 --> 03:15.269
đó chúng ta có một số đối số.

03:15.269 --> 03:17.940
Chúng tôi có được mục tiêu, như bạn sẽ học, và đó là bất kỳ mục tiêu nào.

03:17.940 --> 03:20.085
Nó có thể là nguyên mẫu của đối tượng

03:20.085 --> 03:22.533
mà chúng ta đang làm việc hoặc đó là hàm tạo

03:22.533 --> 03:25.730
nếu chúng ta thêm nó vào một phương thức tĩnh nhưng ở đây

03:25.730 --> 03:27.340
nó sẽ là nguyên mẫu vì chúng

03:27.340 --> 03:30.200
ta sẽ thêm nó vào một phương thức thể hiện.

03:30.200 --> 03:32.520
Sau đó, chúng ta có tên phương thức hoặc tên thuộc tính nhưng

03:32.520 --> 03:33.690
vì chúng ta thêm nó vào một phương

03:33.690 --> 03:36.330
thức nên chúng ta có thể gọi tên phương thức này, sẽ hợp lý hơn.

03:36.330 --> 03:38.600
Tất nhiên, nếu đây là một chuỗi hoặc một ký hiệu hoặc

03:38.600 --> 03:40.229
nó cũng có thể là một số, nhưng ở đây

03:40.229 --> 03:43.250
chúng ta biết rằng chúng ta thường sẽ làm việc với các chuỗi nên

03:43.250 --> 03:45.061
chúng ta cũng có thể chỉ cần sử dụng chuỗi

03:45.061 --> 03:48.470
ở đây, tùy thuộc vào nơi bạn định thêm trình trang trí này và cách thức chung

03:48.470 --> 03:50.170
chung nó phải như vậy và cuối cùng nhưng

03:50.170 --> 03:52.484
không kém phần quan trọng, chúng tôi nhận được bộ

03:52.484 --> 03:56.340
mô tả ở đây sẽ thuộc loại PropertyDescriptor làm cảnh báo.

03:56.340 --> 03:57.650
Vì vậy, bây giờ chúng tôi đã

03:57.650 --> 03:59.655
có ba đối số này mà tất cả chúng tôi đã sử

03:59.655 --> 04:03.540
dụng trên Log3, công cụ trang trí phương thức của chúng tôi trước đây.

04:03.540 --> 04:05.970
Bây giờ, trong autobind, và bây giờ tôi muốn

04:05.970 --> 04:08.994
đảm bảo rằng chúng tôi luôn đặt từ khóa this cho đối tượng

04:08.994 --> 04:11.973
này mà phương thức này thuộc về một lần nữa.

04:11.973 --> 04:14.240
Bây giờ làm thế nào chúng ta có thể đạt được điều này?

04:14.240 --> 04:15.797
Trước hết, tôi phải có quyền

04:15.797 --> 04:17.880
truy cập vào phương thức sẽ được gọi.

04:17.880 --> 04:20.661
Và điều này có thể thực hiện được với sự trợ giúp của bộ mô

04:20.661 --> 04:22.013
tả của chúng tôi, bởi vì nếu

04:22.013 --> 04:25.180
bạn tải lại ứng dụng và bạn xem bộ mô tả phương thức như vậy ở dưới

04:25.180 --> 04:27.330
đó, bạn sẽ thấy chúng tôi nhận được thuộc tính

04:27.330 --> 04:29.460
giá trị trong bộ mô tả và nó chỉ vào hàm.

04:29.460 --> 04:32.240
Bởi vì giá trị của thuộc tính này là một hàm, trong trường hợp

04:32.240 --> 04:33.930
này, một phương thức chỉ là một thuộc

04:33.930 --> 04:35.498
tính với một hàm là một giá trị.

04:35.498 --> 04:38.630
Vì vậy, khóa giá trị giữ chức năng ban đầu, do đó,

04:38.630 --> 04:42.980
ở đây, chúng ta có thể trích xuất phương thức ban đầu, nếu chúng ta muốn

04:42.980 --> 04:44.930
gọi nó như thế này bằng cách truy

04:44.930 --> 04:47.320
cập bộ mô tả. giá trị.

04:47.320 --> 04:50.563
Điều này sẽ cung cấp cho chúng tôi quyền truy cập vào phương thức ban đầu.

04:51.790 --> 04:55.450
Tiếp theo, tôi sẽ thiết lập một bộ mô tả được điều chỉnh mới,

04:55.450 --> 04:58.320
cuối cùng, đây sẽ là thứ chúng ta quay lại sau.

04:58.320 --> 05:00.030
Bây giờ đây sẽ là một đối

05:00.030 --> 05:03.620
tượng và nó sẽ là bộ mô tả thuộc tính kiểu.

05:03.620 --> 05:06.350
Bây giờ trong đối tượng này ở đây, chúng ta có thể thêm tất

05:06.350 --> 05:09.350
cả những thứ chúng ta có thể thêm vào một bộ mô tả thuộc tính.

05:09.350 --> 05:12.110
Và ví dụ, có thể đặt cái này thành có thể định cấu hình,

05:12.110 --> 05:14.962
đúng, đặt vô số thành sai, để cái này không hiển thị

05:14.962 --> 05:17.130
trong các vòng lặp nước ngoài, và bây giờ

05:17.130 --> 05:20.310
hãy thêm một trình thu thập ở đây, và đó là cái mới.

05:20.310 --> 05:23.400
Tôi thêm một getter ở đây, là một phương thức hoặc một

05:23.400 --> 05:26.150
thuộc tính chứa một hàm, giống nhau, để chúng

05:27.020 --> 05:29.628
tôi có thể thực thi một số logic bổ sung khi người

05:29.628 --> 05:32.260
dùng cố gắng truy cập thuộc tính này.

05:32.260 --> 05:35.170
Vì vậy, chúng ta không chỉ thực thi trực tiếp giá trị của

05:35.170 --> 05:36.633
thuộc tính này, hàm, mà chúng

05:36.633 --> 05:38.888
ta có thể can thiệp và thực hiện thêm một số công

05:38.888 --> 05:40.850
việc trước khi thực thi hàm.

05:40.850 --> 05:41.913
Đó là ý tưởng ở đây.

05:43.230 --> 05:46.290
Vì vậy, tôi không thêm thuộc tính giá trị vào bộ mô tả này ở đây,

05:46.290 --> 05:48.660
tôi chỉ có một trình thu thập và một lần nữa, về

05:48.660 --> 05:51.540
cơ bản, trình thu thập giống như có một thuộc tính giá trị

05:51.540 --> 05:54.777
với logic bổ sung chạy trước khi giá trị được trả về.

05:54.777 --> 05:59.777
Bây giờ, ở đây tôi muốn có chức năng liên kết của mình, nơi tôi có thể sử

05:59.900 --> 06:03.450
dụng phương thức ban đầu mà chúng tôi đã trích xuất

06:03.450 --> 06:07.100
ở đây và chúng tôi gọi liên kết và liên kết này.

06:07.100 --> 06:08.590
Và bây giờ di chúc, tất

06:08.590 --> 06:11.730
nhiên, điều này đề cập đến điều gì ở đây?

06:11.730 --> 06:13.720
Hãy nhớ rằng nó nằm bên trong phương thức

06:13.720 --> 06:17.700
getter này, vì vậy điều này sẽ đề cập đến bất kỳ thứ gì chịu trách nhiệm kích

06:17.700 --> 06:19.510
hoạt phương thức getter này.

06:19.510 --> 06:21.110
Và đó là mẹo bây giờ, phương

06:21.110 --> 06:23.700
thức getter sẽ được kích hoạt bởi đối tượng

06:23.700 --> 06:27.200
cụ thể mà nó thuộc về, vì vậy phần bên trong của phương

06:27.200 --> 06:29.190
thức getter này sẽ luôn tham chiếu

06:29.190 --> 06:33.610
đến đối tượng mà chúng ta đã xác định getter.

06:33.610 --> 06:36.800
Điều này sẽ không bị ghi đè bởi addEventListener vì

06:36.800 --> 06:38.965
getter giống như một lớp bổ sung giữa

06:38.965 --> 06:41.221
chức năng của chúng tôi đang được thực

06:41.221 --> 06:43.660
thi và đối tượng mà nó thuộc về và Trình xử

06:43.660 --> 06:44.976
lý sự kiện.

06:44.976 --> 06:47.683
Vì vậy, this ở đây sẽ đề cập đến đối tượng

06:47.683 --> 06:51.610
mà chúng ta đã xác định phương thức ban đầu.

06:51.610 --> 06:54.660
Vì vậy, chúng ta có thể ràng buộc điều này một cách an toàn cho

06:54.660 --> 06:57.495
phương thức ban đầu và đảm bảo rằng bây giờ điều này bên trong

06:57.495 --> 07:01.170
phương thức ban đầu cũng sẽ tham chiếu chính xác cùng một đối tượng.

07:01.170 --> 07:04.300
Bây giờ tôi sẽ trả về hàm liên kết ở đây và sau đó,

07:04.300 --> 07:06.760
bên ngoài bộ mô tả đã điều chỉnh này, hãy

07:06.760 --> 07:08.910
trả về bộ mô tả đã điều chỉnh.

07:08.910 --> 07:10.560
Vì vậy, đó là hàm trang trí của

07:10.560 --> 07:12.420
chúng ta, trả về một đối tượng mô

07:12.420 --> 07:14.103
tả mới và do đó, đối tượng mô

07:14.103 --> 07:16.960
tả này sẽ ghi đè lên bộ mô tả cũ, đó là những gì TypeScript

07:16.960 --> 07:18.710
sẽ làm với nó.

07:18.710 --> 07:21.500
TypeScript sau đó sẽ thay thế bộ mô tả phương

07:21.500 --> 07:23.215
thức cũ, do đó, cấu hình phương

07:23.215 --> 07:26.390
thức cũ bằng cấu hình mới này ở đây, cấu hình này đã thêm

07:26.390 --> 07:28.513
lớp getter bổ sung này.

07:29.460 --> 07:33.330
Bây giờ, tôi không quan tâm đến tên mục tiêu và phương thức ở đây,

07:33.330 --> 07:37.500
tất nhiên, vì vậy để tránh lỗi, tôi sẽ đặt tên cho dấu gạch dưới này và

07:37.500 --> 07:39.083
dấu gạch dưới hai ở đây.

07:40.260 --> 07:43.070
Một lần nữa, chỉ để nói với TypeScript rằng tôi không quan tâm

07:43.070 --> 07:45.480
đến những giá trị này nhưng tôi cần chấp nhận chúng.

07:45.480 --> 07:49.800
Và bây giờ hãy thêm autobind vào showMessage tại đây.

07:49.800 --> 07:52.203
Vì vậy, ở đây, tôi sẽ thêm vào Autobind

07:54.050 --> 07:56.490
và đảm bảo rằng bạn đã xóa liên kết ở đó trong

07:56.490 --> 07:59.236
trình xử lý sự kiện và lưu phần này.

07:59.236 --> 08:01.450
Và bây giờ chúng ta hãy xem xét điều đó,

08:01.450 --> 08:04.730
hãy nhấp vào Click Me, và bạn sẽ thấy This Works!

08:04.730 --> 08:06.678
Nếu tôi tải lại, điều này hoạt động.

08:06.678 --> 08:09.680
Bởi vì điều này bây giờ được ràng buộc chính xác.

08:09.680 --> 08:12.060
Và chỉ để xác minh rằng nó thực sự là công cụ trang trí

08:12.060 --> 08:13.520
của chúng tôi tạo ra sự khác biệt

08:13.520 --> 08:15.868
ở đây, nếu tôi xóa ràng buộc ở đây trong trình thu thập

08:15.868 --> 08:17.850
và công cụ trang trí của tôi và tôi lưu nó, bạn

08:17.850 --> 08:20.920
sẽ thấy rằng nếu nó hiện được tải lại và chúng tôi nhấp vào Nhấp vào

08:20.920 --> 08:23.626
tôi, chúng tôi sẽ thấy không xác định lại.

08:23.626 --> 08:26.320
Vì vậy, lớp getter bổ sung này thực sự hoạt

08:26.320 --> 08:27.389
động ở đây để đảm

08:27.389 --> 08:30.430
bảo rằng lớp này luôn được liên kết chính xác bất

08:30.430 --> 08:33.260
kể bạn gọi showMessage như thế nào.

08:33.260 --> 08:35.380
Nếu chúng ta gọi nó như thế này trực tiếp trên đối

08:35.380 --> 08:38.350
tượng thì nó sẽ hoạt động, nếu chúng ta gọi nó ở đây như thế này với

08:38.350 --> 08:40.760
một trình lắng nghe sự kiện, nó cũng hoạt động.

08:40.760 --> 08:42.260
Vì vậy, bạn thấy cái này hoạt

08:42.260 --> 08:45.070
động ở đây, cái cuối cùng đến từ cuộc gọi showMessage

08:45.070 --> 08:48.266
này và sau đó bạn cũng thấy nó hoạt động nếu tôi nhấp vào nút.

08:48.266 --> 08:49.918
Vì vậy, đây là một ví dụ thú vị về

08:49.918 --> 08:52.060
cách bạn có thể sử dụng các trình trang

08:52.060 --> 08:55.190
trí để xây dựng một chức năng khá tuyệt vời và giúp bạn không

08:55.190 --> 08:58.718
gặp rắc rối khi gọi liên kết theo cách thủ công ở mọi nơi.

08:58.718 --> 09:01.883
Thay vào đó, bạn chỉ cần ràng buộc nó như thế này.
