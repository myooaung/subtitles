WEBVTT

00:02.150 --> 00:03.930
Instructor: Así que añadimos nuestra primera

00:03.930 --> 00:06.120
petición POST, somos capaces de crear un TODO.

00:06.120 --> 00:07.250
Ahora tenemos más rutas.

00:07.250 --> 00:10.170
También conseguimos una ruta para servir a todos los TODOS que creamos.

00:10.170 --> 00:11.750
Ahora ten en cuenta que, tus TODOS

00:11.750 --> 00:14.160
se reiniciarán cada vez que cambies y guardes tu código

00:14.160 --> 00:16.630
porque eso reinicia tu servidor y eso pierde todo lo

00:16.630 --> 00:18.920
que estaba almacenado en la memoria y sólo estamos

00:18.920 --> 00:21.330
manejando nuestros TODOS en la memoria.

00:21.330 --> 00:23.560
Esto es simplemente algo que tenemos aquí en la aplicación

00:23.560 --> 00:24.930
ficticia, en una aplicación real,

00:24.930 --> 00:28.200
por supuesto, almacenarías esto en una base de datos real, lo obtendrías de

00:28.200 --> 00:30.280
allí y por lo tanto sobreviviría.

00:30.280 --> 00:35.060
Sin embargo aquí, podemos crear una nueva función, getTodos y esto será un

00:35.060 --> 00:38.030
RequestHandler aquí, por lo que no tiene que establecer

00:38.030 --> 00:39.740
los tipos en todos los parámetros

00:39.740 --> 00:42.330
individualmente.

00:42.330 --> 00:46.120
Y luego allí, simplemente quiero devolver una respuesta

00:46.120 --> 00:49.560
donde devuelvo algunos datos JSON donde tengo mis todos

00:49.560 --> 00:52.420
y allí, sólo quiero llegar a mi matriz TODOs

00:52.420 --> 00:54.330
y enviar eso de vuelta al cliente,

00:54.330 --> 00:56.530
y eso ya puede ser todo.

00:56.530 --> 00:57.810
Por supuesto, usted podría

00:57.810 --> 00:59.640
ajustar esto, tal vez usted quiere tener

00:59.640 --> 01:03.120
una lógica diferente, tal vez usted quiere ordenar el TODOS primero

01:03.120 --> 01:06.690
o algo así, pero esto en su forma más simple ya es todo lo que necesitamos

01:06.690 --> 01:10.530
aquí, devuelve nuestro TODOS, por lo que una función muy simple.

01:10.530 --> 01:13.240
En las rutas TODOS, ahora sólo tenemos que conectar esto.

01:13.240 --> 01:17.680
Así que vamos a importar getTodos de nuestro controlador también

01:17.680 --> 01:20.640
y conectarlo aquí con esta ruta.

01:20.640 --> 01:23.430
Y con eso, si ahora guardamos esto, ya podemos

01:23.430 --> 01:25.250
verlo en acción.

01:25.250 --> 01:29.860
Si volvemos y creamos una nueva solicitud, una solicitud

01:29.860 --> 01:34.860
GET, a http://localhost:3000/todos/ y enviamos esto,

01:39.400 --> 01:41.410
obtenemos una matriz vacía,

01:41.410 --> 01:44.400
ahora ¿por qué es eso?

01:44.400 --> 01:46.750
Bueno, dije que los TODOS se borrarían cada vez que

01:46.750 --> 01:48.010
cambiáramos el código y por

01:48.010 --> 01:49.750
lo tanto el servidor se reiniciara,

01:49.750 --> 01:51.470
por lo que ahora deberíamos crear un

01:51.470 --> 01:54.110
nuevo TODO sin reiniciar el servidor en el medio.

01:54.110 --> 01:57.360
Y si creamos ese TODO y ahora obtenemos

01:57.360 --> 02:01.770
nuestros TODOS, vemos ese TODO creado con el ID, serie

02:01.770 --> 02:04.380
9811 y demás, aquí también.

02:04.380 --> 02:05.960
Así que eso ya está funcionando.

02:05.960 --> 02:08.980
Ya que estamos en ello, trabajemos también en el parche y el borrado

02:08.980 --> 02:10.590
y, por supuesto, siéntete libre de

02:10.590 --> 02:12.680
aportar algo de lógica ahí por tu cuenta.

02:12.680 --> 02:14.970
Al final, ahora tienes todos los bloques de construcción

02:14.970 --> 02:16.130
que necesitas para ello.

02:16.130 --> 02:18.480
Aunque, por supuesto, ahora también lo haremos juntos.

02:19.390 --> 02:21.570
Así que aquí ahora en la solicitud de parche,

02:21.570 --> 02:24.350
vamos a añadir una nueva función de controlador.

02:24.350 --> 02:29.350
exportar const updateTodo, que es de tipo RequestHandler y debe contener

02:30.660 --> 02:34.680
una función en este formato que ya conocemos.

02:34.680 --> 02:37.310
Y ahí, el objetivo es extraer datos sobre

02:37.310 --> 02:40.630
el nuevo TODO de la solicitud entrante, y luego

02:40.630 --> 02:44.140
actualizar el TODO con esos nuevos datos.

02:44.140 --> 02:47.240
Ahora, por favor, tenga en cuenta que como parte de nuestra ruta aquí,

02:47.240 --> 02:48.900
tenemos un segmento dinámico.

02:48.900 --> 02:51.140
Tenemos este segmento de identificación.

02:51.140 --> 02:54.610
Así que eso es algo que podremos extraer de la URL, se puede

02:54.610 --> 02:58.750
extraer un valor concreto para este segmento dinámico.

02:58.750 --> 03:02.147
Así que aquí, en nuestra solicitud entrante, se puede obtener el todoId,

03:03.172 --> 03:07.987
a partir de nuestros parámetros de solicitud. id,. id, porque ese es el nombre que elegí aquí.

03:07.987 --> 03:11.660
Si eliges un nombre diferente aquí, tienes que usar un nombre

03:11.660 --> 03:13.060
diferente allí.

03:13.060 --> 03:15.810
Ahora, no tenemos tipos de apoyo aquí, ¿verdad?

03:15.810 --> 03:18.410
Params es de tipo any.

03:18.410 --> 03:20.450
Ahora porque los tipos pueden analizar

03:20.450 --> 03:23.400
esta cadena y entender lo que hay allí.

03:23.400 --> 03:25.460
Así que para conseguir mejores tipos

03:25.460 --> 03:28.920
de soporte, podemos utilizar que el RequestHandler aquí es

03:28.920 --> 03:32.880
un tipo genérico y podemos añadir paréntesis angulados y básicamente

03:32.880 --> 03:35.880
decirle a TypeScript que parámetros tendrá.

03:35.880 --> 03:37.800
Simplemente establecemos esto en un objeto

03:37.800 --> 03:39.300
y ya tenemos un mapa clave-valor

03:39.300 --> 03:42.180
de todos nuestros padres que tenemos en la URL.

03:42.180 --> 03:43.830
Así, por ejemplo, que tenemos

03:43.830 --> 03:46.730
un parámetro ID, que al final contiene un String.

03:46.730 --> 03:48.610
Eso es algo que podemos añadir aquí y ahora

03:48.610 --> 03:50.230
verás que tenemos autocompletado

03:50.230 --> 03:52.560
y TypeScript sabe que esto será un String.

03:52.560 --> 03:55.520
Así que es mejor, usando este tipo genérico.

03:55.520 --> 03:58.640
Ahora, tenemos el ID, también necesitamos algo del cuerpo

03:58.640 --> 04:01.050
de la solicitud, para ser precisos, necesitamos

04:01.050 --> 04:03.560
el nuevo texto del cuerpo de la solicitud.

04:03.560 --> 04:08.130
Así que el updatedText puede ser recuperado del cuerpo de la petición y ahora

04:08.130 --> 04:11.700
de nuevo, vamos a utilizar typecasting aquí, para dejar claro

04:11.700 --> 04:14.100
que habrá una propiedad de texto en el cuerpo

04:14.100 --> 04:16.910
y que esto será de tipo String.

04:16.910 --> 04:19.750
Y recuperemos el texto a partir de entonces.

04:19.750 --> 04:22.373
Y ahora podemos actualizar el TODO en nuestra matriz TODOS allí arriba.

04:23.830 --> 04:27.720
Para ello, vamos a buscar el índice del TODO que queremos

04:27.720 --> 04:28.710
actualizar.

04:28.710 --> 04:30.808
todoIndex, llegando a TODOS, y con

04:30.808 --> 04:33.760
findIndex, podemos ejecutar alguna lógica en

04:33.760 --> 04:36.090
cada elemento de la matriz TODOS.

04:36.090 --> 04:38.060
Y ahí estamos mirando cada TODO y

04:38.060 --> 04:40.010
si el id de todo es igual al todoId

04:40.010 --> 04:44.300
que tenemos aquí, sabemos que ese es el TODO que queremos actualizar.

04:44.300 --> 04:47.140
Ahora bien, si por alguna razón debe ser menos

04:47.140 --> 04:50.550
uno, significa que no encontramos ese TODO, así que si

04:50.550 --> 04:52.610
es menor que cero esencialmente,

04:52.610 --> 04:56.960
sabemos que algo salió mal y en este caso, lanzaré un nuevo error donde

04:56.960 --> 04:59.630
digo, ¡No se pudo encontrar el TODO!

04:59.630 --> 05:03.633
Y eso debería desencadenar nuestro middleware de manejo de errores

05:04.760 --> 05:06.130
por defecto aquí.

05:06.130 --> 05:08.633
Ahora bien, si conseguimos pasar esta comprobación

05:09.870 --> 05:12.450
if, hemos encontrado el TODO, y entonces podemos simplemente

05:12.450 --> 05:15.040
actualizar el TODO en este índice en nuestro array TODOS

05:15.040 --> 05:18.960
para que sea un nuevo TODO, donde mantenemos el antiguo id.

05:18.960 --> 05:23.270
Así que donde accedemos a TODOS, todoIndex. id, así que accedemos al antiguo ID y lo almacenamos,

05:23.270 --> 05:27.030
pero el texto aquí que

05:27.030 --> 05:29.490
puse, por supuesto no lo asignamos

05:29.490 --> 05:31.713
así.

05:32.870 --> 05:34.570
Pero el texto que hemos puesto aquí, es ahora el updatedText.

05:34.570 --> 05:38.750
Esto reemplaza el TODO aquí, y a partir de ahí podemos

05:38.750 --> 05:41.340
enviar una respuesta, con un mensaje

05:41.340 --> 05:45.280
de, Actualizado, por ejemplo.

05:45.280 --> 05:47.053
Y donde también añadimos el updatedTodo

05:47.990 --> 05:51.470
a la respuesta saliente, y lo hacemos igual a, bueno, TODOS

05:51.470 --> 05:55.090
todoIndex, que ahora contiene el nuevo valor.

05:55.090 --> 05:59.090
Esto es algo que llamamos hacer aquí en nuestra lógica de actualización,

05:59.090 --> 06:02.430
por supuesto, un poco de código ficticio porque todavía estamos

06:02.430 --> 06:03.960
trabajando con esta matriz

06:03.960 --> 06:07.150
en memoria TODOS pero muestra cómo usamos TypeScript aquí,

06:07.150 --> 06:09.060
y eso es lo principal.

06:09.060 --> 06:11.100
Así que vamos a probar esta función de actualización ahora.

06:11.100 --> 06:13.620
Para ello podemos volver a Postman, y al final,

06:13.620 --> 06:16.260
ahora quiero enviar una petición PATCH, porque en

06:16.260 --> 06:19.960
las rutas, estamos esperando esta petición de parche a esta ruta.

06:19.960 --> 06:23.460
Y hablando de eso, que tal vez también deberíamos conectar

06:23.460 --> 06:24.293
esta ruta a esta

06:24.293 --> 06:26.490
función de controlador primero.

06:26.490 --> 06:28.850
Por lo tanto, vamos a ir al archivo

06:28.850 --> 06:33.420
de rutas e importar updateTodo y establecer esta conexión aquí.

06:33.420 --> 06:35.590
Y a partir de ahí, podemos proceder y enviar esta solicitud.

06:35.590 --> 06:38.570
Así que ahora de vuelta a Postman, PATCH

06:38.570 --> 06:41.890
es lo que queremos enviar y luego es http://localhost:3000/todos

06:41.890 --> 06:46.320
y ahora la idea del TODO que queremos actualizar como parte

06:46.320 --> 06:49.430
de la URL.

06:49.430 --> 06:50.573
Ahora desde que guardamos algo, desde

06:51.500 --> 06:54.970
que guardamos algunos cambios, nuestro servidor se reinició, así que todos los TODOS se perderán de todos modos.

06:54.970 --> 06:58.890
Así que, en primer lugar, vamos a reenviar esa petición

06:58.890 --> 07:01.150
POST para crear un nuevo TODO.

07:01.150 --> 07:02.450
Y aquí tenemos el ID de ese TODO.

07:02.450 --> 07:05.170
Ahora podemos añadir este id aquí a esta URL.

07:05.170 --> 07:08.800
Y también voy a añadir un cuerpo que debe ser de tipo JSON, donde establecemos

07:08.800 --> 07:11.780
estos nuevos datos que queremos enviar al servidor.

07:11.780 --> 07:15.560
Ahora tenga en cuenta en nuestro controlador de actualización,

07:15.560 --> 07:18.570
estoy buscando un campo llamado texto, en el cuerpo

07:18.570 --> 07:20.970
de la solicitud entrante.

07:20.970 --> 07:22.900
Así que deberíamos volver a proporcionar esto aquí

07:22.900 --> 07:24.580
en los datos JSON que estamos enviando.

07:24.580 --> 07:26.690
Termina el curso en un mes, este

07:26.690 --> 07:29.440
puede ser nuestro nuevo texto.

07:29.440 --> 07:31.520
Si ahora enviamos esto, vemos que fue actualizado.

07:31.520 --> 07:35.210
Y si ahora obtengo todos los TODOS, también vemos que sigue

07:35.210 --> 07:37.180
habiendo un solo TODO, pero simplemente

07:37.180 --> 07:39.430
se ha cambiado el texto.

07:39.430 --> 07:41.623
Así que ahora que esto funciona, también podemos actualizar el TODO.

07:42.950 --> 07:46.470
Comprobemos también qué ocurre si tengo un id que no existe, por

07:46.470 --> 07:48.780
ejemplo, borrando el último dígito aquí,

07:48.780 --> 07:50.620
entonces obtengo, Could not find

07:50.620 --> 07:53.430
todo en mi respuesta de error de tipo 500.

07:53.430 --> 07:57.670
Así que esto también tiene buena pinta.

07:57.670 --> 07:59.660
Como último paso, vamos a añadir una función para eliminar un TODO.

07:59.660 --> 08:03.800
Así que en la carpeta de controladores, voy a exportar una constante

08:03.800 --> 08:07.210
llamada, deleteTodo, que es de tipo RequestHandler.

08:07.210 --> 08:11.460
Y de nuevo, obtenemos nuestra solicitud, nuestra respuesta,

08:11.460 --> 08:14.040
y luego la siguiente función aquí.

08:14.040 --> 08:17.320
Y aquí, ahora quiero encontrar el TODO

08:17.320 --> 08:20.270
y simplemente eliminarlo.

08:20.270 --> 08:21.543
Para ello, podemos copiar este

08:22.380 --> 08:25.090
código donde obtenemos el ID del TODO y luego el índice.

08:25.090 --> 08:29.360
Sólo hay que deshacerse de esa línea donde extraemos el texto actualizado

08:29.360 --> 08:32.210
porque para una petición DELETE, no habrá cuerpo

08:32.210 --> 08:35.660
de petición, pero necesitamos el, id del TODO que es parte de

08:35.660 --> 08:37.400
nuestra ruta de la URL.

08:37.400 --> 08:40.340
Y entonces encontramos el índice y una vez que tenemos

08:40.340 --> 08:43.530
el índice, podemos ir a los TODOs, llamar al método de empalme

08:43.530 --> 08:47.350
y eliminar el todo en el todoIndex, y sólo ese todo.

08:47.350 --> 08:51.620
Y a partir de ahí podemos enviar una respuesta en la que

08:51.620 --> 08:54.040
digamos: ¡Todo eliminado! así de fácil.

08:54.040 --> 08:58.490
Esta podría ser nuestra lógica de borrado.

08:58.490 --> 08:59.380
Ahora es el momento de conectar

08:59.380 --> 09:01.760
esto, así que en la carpeta de rutas, vamos a importar deleteTodo

09:01.760 --> 09:04.560
de los controladores TODOs y conectarlo ahí abajo.

09:04.560 --> 09:07.440
Y con esto conectado, si ahora guardamos esto, de nuevo, necesitamos

09:08.340 --> 09:09.963
añadir un TODO porque todos los TODOs

09:11.120 --> 09:14.370
se borran con cada reinicio del servidor, así que aquí está.

09:14.370 --> 09:16.720
Copia esa identificación.

09:16.720 --> 09:20.550
Y ahora enviemos esa petición DELETE.

09:20.550 --> 09:22.680
Así que una nueva solicitud DELETE aquí,

09:22.680 --> 09:24.980
a http:/localhost:3000/todos/este id.

09:24.980 --> 09:27.160
No es necesario añadir ningún cuerpo.

09:27.160 --> 09:32.160
Haga clic en "Enviar" y funcionará.

09:32.800 --> 09:34.880
Si lo vuelvo a enviar, nos sale el error de

09:34.880 --> 09:37.180
no encontrar porque lo acabamos de borrar.

09:37.180 --> 09:39.950
Y si obtenemos todos los TODOS, eso debería

09:39.950 --> 09:41.570
ser un array vacío y esto.

09:41.570 --> 09:42.723
Así que esto ya está funcionando

09:42.723 --> 09:45.550
y esto es básicamente una funcionalidad CRUD, añadida

09:45.550 --> 09:46.750
con TypeScript aquí en

09:46.750 --> 09:49.550
esta simple aplicación Node y Express.

09:49.550 --> 09:50.990
Ahora, por supuesto, es una aplicación bastante

09:50.990 --> 09:52.940
trivial, pero ya nos muestra algún uso de TypeScript.

09:52.940 --> 09:56.060
Nos muestra que escribimos un código que debería resultarte familiar

09:56.060 --> 09:58.870
si trabajas en el resto de este curso, y que estamos utilizando

09:58.870 --> 10:00.480
todas las características que aprendiste

10:00.480 --> 10:02.000
allí.

10:02.000 --> 10:04.750
Y al igual que en la sección React, eso es lo único importante.

10:04.750 --> 10:07.610
Puedes usar todo lo que aprendiste sobre TypeScript

10:07.610 --> 10:11.520
aquí también, porque al final se está

10:11.520 --> 10:13.340
compilando a código JavaScript regular,

10:13.340 --> 10:14.990
que luego servimos.
