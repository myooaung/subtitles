WEBVTT

00:02.251 --> 00:03.380
Instructor: Otra buena

00:03.380 --> 00:05.350
característica relacionada con las

00:05.350 --> 00:08.000
propiedades y métodos, que existe también en JavaScript

00:08.000 --> 00:10.010
cuando se utiliza ES6 o posterior, pero

00:10.010 --> 00:11.180
todos los typescripts

00:11.180 --> 00:14.010
son propiedades y métodos estáticos.

00:14.010 --> 00:17.520
Las propiedades y métodos estáticos le permiten añadir propiedades

00:17.520 --> 00:20.620
y métodos a las clases a los que no se accede en una instancia

00:20.620 --> 00:22.530
de la clase, por lo que no es necesario

00:22.530 --> 00:26.080
llamar primero al nuevo nombre de la clase, sino que se accede

00:26.080 --> 00:28.950
directamente en la clase.

00:28.950 --> 00:31.350
Esto se utiliza a menudo para las funciones

00:31.350 --> 00:35.922
de utilidad que desea agrupar o asignar a una clase lógicamente, o constantes

00:35.922 --> 00:40.860
globales que también desea almacenar en una clase.

00:40.860 --> 00:43.270
Un ejemplo incorporado en JavaScript,

00:43.270 --> 00:46.050
que no está definido por typescript y no está

00:46.050 --> 00:48.290
definido por ti, pero que forma parte

00:48.290 --> 00:51.170
de JavaScript en el navegador es la función constructora

00:51.170 --> 00:53.220
Math, o clase si quieres llamarla

00:53.220 --> 00:55.500
así, que está globalmente disponible

00:55.500 --> 01:01.400
en JavaScript, donde puedes acceder a pi como un valor constante para darte ese número pi, o

01:01.400 --> 01:05.050
funciones, o métodos para ser precisos, como pow para calcular

01:05.050 --> 01:08.610
la potencia de algo.

01:08.610 --> 01:10.530
Son métodos y propiedades a los

01:10.530 --> 01:13.370
que no se accede en la instancia de Math.

01:13.370 --> 01:16.310
No tienes que llamar primero a las nuevas matemáticas.

01:16.310 --> 01:19.830
Efectivamente eso no funcionará, pero se accede a estas propiedades

01:19.830 --> 01:22.360
en métodos directamente en la propia clase.

01:22.360 --> 01:25.340
Así que Math actúa más como un espacio de nombres como un

01:25.340 --> 01:27.370
mecanismo de agrupación aquí y eso es un

01:27.370 --> 01:28.640
caso de uso común para los

01:28.640 --> 01:30.480
métodos y propiedades estáticas y

01:30.480 --> 01:33.650
usted puede agregarlos a sus propias clases también.

01:33.650 --> 01:36.770
Digamos que en el Departamento queremos tener un método

01:36.770 --> 01:40.050
que nos ayude a crear empleados y eso es algo a lo que podríamos

01:40.050 --> 01:43.450
querer acceder sin instanciar el Departamento, porque

01:43.450 --> 01:46.890
típicamente instanciamos nuestras versiones más especializadas,

01:46.890 --> 01:51.290
el departamento de TI y el departamento de contabilidad y realmente no queremos

01:51.290 --> 01:54.710
instanciar el Departamento sólo para llamar a un método de

01:54.710 --> 01:58.490
utilidad y por lo tanto podemos añadir un método aquí, crear Empleado,

01:58.490 --> 02:07.621
digamos, donde queremos obtener el nombre, que es una cadena como argumento y ahí queremos devolver algo.

02:07.621 --> 02:10.230
Ahora para hacer que un método estático, que

02:10.230 --> 02:12.920
podemos acceder sin instanciar esta clase,

02:12.920 --> 02:16.250
añadimos la palabra clave estática delante de este método

02:16.250 --> 02:18.549
y luego aquí tal vez devolver un objeto

02:18.549 --> 02:23.549
donde tenemos la propiedad nombre asignada a este valor de nombre.

02:25.170 --> 02:27.010
Ahora, por supuesto, es un método muy

02:27.010 --> 02:28.690
simple, pero se entiende la idea.

02:28.690 --> 02:31.960
Ahora para usar eso podríamos ir allá abajo donde ejecutamos

02:31.960 --> 02:33.490
nuestro código y ahora digamos

02:33.490 --> 02:36.940
que queremos un nuevo empleado, empleado1.

02:39.300 --> 02:41.020
Bueno, entonces podemos conseguir

02:41.020 --> 02:46.020
esto con el Departamento. createEmployee y pasar en Max por ejemplo

02:46.920 --> 02:50.680
y si luego consola. log(empleado1) deberíamos

02:50.680 --> 02:53.170
ver un objeto con el nombre de Max.

02:53.170 --> 02:55.630
Así que si guardo eso, efectivamente aquí

02:55.630 --> 02:58.240
está el empleado que acabamos de crear.

02:58.240 --> 03:01.200
Así que este sería un ejemplo típico para un método estático.

03:01.200 --> 03:04.870
Lo llamamos directamente en la clase, sin la palabra clave new, y

03:04.870 --> 03:06.360
por lo tanto usamos la clase

03:06.360 --> 03:09.030
como un mecanismo de agrupación se podría decir

03:09.030 --> 03:11.630
y si quisieras añadir una propiedad estática,

03:11.630 --> 03:13.470
podrías hacerlo también.

03:13.470 --> 03:17.950
Si usted tiene algo como el fiscalYear aquí que actualmente desea utilizar

03:19.730 --> 03:22.040
en su empresa, usted podría establecer

03:22.040 --> 03:24.980
este a, digamos, 2020 y, a continuación, de nuevo para

03:24.980 --> 03:27.310
que esté disponible sin instanciar este

03:27.310 --> 03:28.560
usted podría añadir estática

03:28.560 --> 03:30.810
en frente de esta propiedad, o en frente

03:30.810 --> 03:33.950
de ese campo y ahora acceder a eso.

03:33.950 --> 03:36.560
Así que ahora abajo la consola. registro. (empleado creado por mí).

03:38.050 --> 03:42.420
Aquí también podemos acceder al Departamento. fiscal. Año así sin instanciarlo

03:43.900 --> 03:47.150
y si guardamos eso, como es lógico, veremos

03:47.150 --> 03:51.130
que se registra 2020 aquí.

03:51.130 --> 03:53.347
Así que estos son métodos y propiedades estáticas.

03:53.347 --> 03:55.250
Una palabra importante sobre ellos, o una

03:55.250 --> 03:56.947
cosa que debes tener en cuenta.

03:56.947 --> 03:59.067
Cuando los añades en una clase, no

03:59.067 --> 04:03.370
puedes acceder a ellos desde dentro de tus partes no estáticas.

04:03.370 --> 04:04.870
Así que si te apetece acceder

04:04.870 --> 04:08.150
al fiscalYear aquí en el constructor, y quieres la

04:08.150 --> 04:10.375
consola. regístrelo aquí,

04:10.375 --> 04:13.490
esto, como puede ver no funcionará.

04:13.490 --> 04:15.600
Me da error que la propiedad

04:15.600 --> 04:18.690
fiscalYear es un miembro estático.

04:18.690 --> 04:20.976
No podemos acceder a esto aquí porque el constructor

04:20.976 --> 04:24.290
y básicamente todo lo que hay ahí, todos los métodos también,

04:24.290 --> 04:26.530
que no están marcados con static, y no puedes

04:26.530 --> 04:29.427
marcar el constructor como estático, por cierto, no

04:29.427 --> 04:32.430
podrán acceder a las propiedades estáticas, porque

04:32.430 --> 04:34.770
esto se refiere a la instancia creada en base

04:34.770 --> 04:37.660
a la clase mientras que la propiedad estática no está

04:37.660 --> 04:41.450
disponible en la instancia porque toda la idea detrás de las propiedades

04:41.450 --> 04:44.150
estáticas y los métodos estáticos es que están separados

04:44.150 --> 04:47.780
de las instancias.

04:47.780 --> 04:50.930
Así que, por supuesto, no puedes acceder a ellos con la palabra clave this.

04:50.930 --> 04:53.940
Si quieres usar la propiedad o el método estático

04:53.940 --> 04:56.080
desde dentro de la clase, tendrás que

04:56.080 --> 04:59.380
usar el nombre de la clase aquí para acceder a ella.

04:59.380 --> 05:01.337
Esto le da acceso a las propiedades

05:01.337 --> 05:04.290
y métodos estáticos desde dentro de la clase.

05:04.290 --> 05:06.593
Eso es algo importante que hay que tener en cuenta.
