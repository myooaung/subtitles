WEBVTT

00:02.270 --> 00:03.613
Instruktor: Czyli możemy

00:03.613 --> 00:05.080
zwrócić coś na dekoratorach

00:05.080 --> 00:06.820
metod, a tym czymś powinien być deskryptor,

00:06.820 --> 00:08.920
który pozwala nam na zmianę metody lub zmianę

00:08.920 --> 00:11.000
konfiguracji metody.

00:11.000 --> 00:12.582
I to jest coś, co chcę tu zrobić.

00:12.582 --> 00:15.985
Zanim to nastąpi, najpierw przejdę do pliku index

00:15.985 --> 00:18.540
HTML i tam dodajmy przycisk.

00:18.540 --> 00:21.272
Click Me, bardzo prosty przycisk,

00:21.272 --> 00:24.720
w mojej aplikacji. ts, chcę teraz upewnić się,

00:24.720 --> 00:26.104
że po kliknięciu tego

00:26.104 --> 00:29.800
przycisku wykonamy metodę na obiekcie.

00:29.800 --> 00:32.120
I w tym celu po prostu dodam tutaj nową

00:32.120 --> 00:34.600
klasę, przede wszystkim drukarkę.

00:34.600 --> 00:38.140
I tam chcę mieć właściwość message, która jest po

00:38.140 --> 00:41.690
prostu tym dziełem, więc prosty ciąg przechowywany

00:41.690 --> 00:45.980
tam, a następnie chcę mieć metodę show message tam, gdzie

00:45.980 --> 00:49.630
po prostu konsola loguje tę wiadomość.

00:49.630 --> 00:51.770
Oczywiście jest to prosta klasa dummy,

00:51.770 --> 00:53.430
ale dzięki temu mogę pokazać

00:53.430 --> 00:54.860
to, co chcę pokazać.

00:54.860 --> 00:56.550
Wybierzmy teraz przycisk

00:56.550 --> 01:00.860
do drzwi, z przyciskiem document query selector i dodajmy do

01:00.860 --> 01:02.970
niego listenera zdarzeń.

01:02.970 --> 01:05.080
Teraz, po pierwsze, dodam mój wykrzyknik

01:05.080 --> 01:07.800
tutaj, aby dać jasność TypeScriptowi, że to istnieje,

01:07.800 --> 01:08.806
że to nie będzie null,

01:08.806 --> 01:10.990
a następnie dodam słuchacza zdarzeń, słuchacza

01:10.990 --> 01:14.210
zdarzeń kliknięcia, a następnie chcę uruchomić tę metodę show

01:14.210 --> 01:16.450
message tutaj.

01:16.450 --> 01:20.350
W tym celu stworzę tutaj nową drukarkę, tak jak w tym przypadku, a następnie

01:20.350 --> 01:23.120
tutaj wskażę na p. showMessage, to jest

01:23.120 --> 01:24.323
mój pomysł tutaj.

01:25.300 --> 01:27.103
Teraz, jeśli zapiszemy to i wrócimy

01:28.153 --> 01:31.440
do naszej strony i klikniemy na ten przycisk, otrzymamy tutaj

01:31.440 --> 01:33.320
undefined, jednak nie otrzymamy naszego

01:33.320 --> 01:36.050
komunikatu, który jest wyświetlany.

01:36.050 --> 01:38.860
Powodem tego jest to, że w przypadku słuchacza zdarzeń,

01:38.860 --> 01:41.820
jeśli wskażemy na funkcję, która powinna zostać wykonana,

01:41.820 --> 01:44.240
słowo kluczowe this wewnątrz tej funkcji nie

01:44.240 --> 01:48.260
będzie miało tego samego kontekstu lub odniesienia, które ma, jeśli wywołamy

01:48.260 --> 01:52.193
tylko p. ShowMessage, w tym przypadku

01:53.144 --> 01:56.450
odnosiłoby się to do drukarki.

01:56.450 --> 02:00.200
Nie, w scenariuszu tutaj, gdzie używamy słuchacza zdarzeń,

02:00.200 --> 02:02.860
będzie to odnosiło się do celu zdarzenia,

02:02.860 --> 02:05.777
ponieważ addEventListener w końcu wiąże to

02:05.777 --> 02:07.693
w funkcji, która ma być wykonana

02:07.693 --> 02:09.560
do celu zdarzenia.

02:09.560 --> 02:11.360
I oczywiście, że tego nie chcę.

02:11.360 --> 02:12.570
Teraz, powszechnym

02:12.570 --> 02:14.170
obejściem byłoby użycie metody

02:14.170 --> 02:19.170
bind i powiązanie showMessage z p, lub powiązanie tego w showMessage z p, tak, że kiedy

02:19.480 --> 02:22.860
to się wykonuje, to nie odnosi się do tego, do czego addEventListener

02:22.860 --> 02:25.420
chce się odnieść, ale zamiast tego wewnątrz

02:25.420 --> 02:28.040
showMessage będzie odnosić się do tego p, do

02:28.040 --> 02:31.770
tego obiektu tutaj ponownie.

02:31.770 --> 02:33.300
I jeśli teraz jesteśmy, jeśli przeładujemy

02:33.300 --> 02:36.270
tutaj i wyczyszczę to ponownie, teraz widzimy, że to działa!

02:36.270 --> 02:39.240
Teraz to wszystko jest domyślnym JavaScriptem.

02:39.240 --> 02:40.790
Teraz zbudujemy dekorator,

02:40.790 --> 02:42.191
który możemy dodać do tej metody,

02:42.191 --> 02:47.191
co spowoduje automatyczne wiązanie tego do klasy otaczającej, a więc do obiektu, do którego

02:47.460 --> 02:50.130
należy ta metoda, za każdym razem, gdy zostanie wywołana,

02:50.130 --> 02:53.440
bez względu na to, gdzie ją wywołamy.

02:53.440 --> 02:55.974
Więc w tym celu nad drukarką dodam nową funkcję

02:55.974 --> 02:58.800
i nazwę ją autobind, ponieważ to jest w końcu to, co

02:58.800 --> 03:01.580
robimy i to będzie mój dekorator autobind.

03:01.580 --> 03:03.890
Może również oczywiście użyć dużej litery początkowej,

03:03.890 --> 03:05.960
aby pozostać w zgodzie z naszymi innymi nazwami,

03:05.960 --> 03:07.930
ale ponownie, możesz użyć obu z nich, gdy definiujesz

03:07.930 --> 03:10.122
funkcję dekoratora.

03:10.122 --> 03:13.300
Teraz to tutaj będzie mój dekorator już i w nim dostajemy

03:13.300 --> 03:15.269
kilka argumentów.

03:15.269 --> 03:17.940
Otrzymujemy cel, jak się dowiesz, i to dowolny.

03:17.940 --> 03:20.085
Jest to albo prototyp obiektu, z którym

03:20.085 --> 03:22.533
pracujemy, albo jest to funkcja konstruktora,

03:22.533 --> 03:25.730
jeśli dodalibyśmy to do metody statycznej, ale tutaj

03:25.730 --> 03:27.340
będzie to prototyp, ponieważ

03:27.340 --> 03:30.200
dodamy to do metody instancji.

03:30.200 --> 03:32.520
Następnie mamy nazwę metody lub nazwę właściwości,

03:32.520 --> 03:33.690
ale ponieważ dodajemy ją do

03:33.690 --> 03:36.330
metody, możemy nazwać tę nazwę metody, ma więcej sensu.

03:36.330 --> 03:38.600
Jeśli jest to ciąg lub symbol lub może to być

03:38.600 --> 03:40.229
również liczba, oczywiście, ale

03:40.229 --> 03:43.250
tutaj wiemy, że będziemy typowo pracować z ciągami, więc

03:43.250 --> 03:45.061
możemy również po prostu iść z ciągiem

03:45.061 --> 03:48.470
tutaj, w zależności od tego, gdzie planujesz dodać ten dekorator

03:48.470 --> 03:50.170
i jak ogólny powinien być i ostatni,

03:50.170 --> 03:52.484
ale nie najmniej, dostajemy deskryptor tutaj,

03:52.484 --> 03:56.340
który będzie typu PropertyDescriptor jako alert.

03:56.340 --> 03:57.650
Więc teraz mamy te trzy

03:57.650 --> 03:59.655
argumenty, których wszyscy używaliśmy

03:59.655 --> 04:03.540
na Log3, który był naszym dekoratorem metody wcześniej.

04:03.540 --> 04:05.970
Teraz w autobind, a ja teraz chcę się upewnić,

04:05.970 --> 04:08.994
że zawsze ustawiamy to słowo kluczowe na ten obiekt,

04:08.994 --> 04:11.973
do którego ta metoda należy ponownie.

04:11.973 --> 04:14.240
Jak możemy to osiągnąć?

04:14.240 --> 04:15.797
Przede wszystkim muszę uzyskać dostęp

04:15.797 --> 04:17.880
do metody, która powinna zostać wywołana.

04:17.880 --> 04:20.661
I to będzie możliwe z pomocą naszego deskryptora, bo

04:20.661 --> 04:22.013
jak przeładujesz aplikację

04:22.013 --> 04:25.180
i zerkniesz na taki deskryptor metody na dole to widzisz, że

04:25.180 --> 04:27.330
dostajemy w deskryptorze właściwość value

04:27.330 --> 04:29.460
i to wskazuje na funkcję.

04:29.460 --> 04:32.240
Ponieważ wartość tej właściwości jest funkcją, w tym przypadku

04:32.240 --> 04:33.930
metoda jest po prostu właściwością

04:33.930 --> 04:35.498
z funkcją jako wartością.

04:35.498 --> 04:38.630
Tak więc klucz wartości przechowuje oryginalną funkcję,

04:38.630 --> 04:42.980
dlatego tutaj możemy wyodrębnić oryginalną metodę, jeśli chcemy ją wywołać w ten

04:42.980 --> 04:47.320
sposób poprzez dostęp do deskryptora.

04:47.320 --> 04:47.320
wartość.

04:47.320 --> 04:50.563
To da nam dostęp do, no cóż, oryginalnej metody.

04:51.790 --> 04:55.450
Następnie ustawię nowy dostosowany deskryptor, to

04:55.450 --> 04:58.320
będzie, w końcu, to, co wrócimy później.

04:58.320 --> 05:00.030
Teraz będzie to obiekt

05:00.030 --> 05:03.620
i będzie on typu property descriptor.

05:03.620 --> 05:06.350
Teraz w tym obiekcie tutaj możemy dodać wszystkie rzeczy,

05:06.350 --> 05:09.350
które możemy dodać do deskryptora właściwości.

05:09.350 --> 05:12.110
I na przykład może ustawić to na configurable,

05:12.110 --> 05:14.962
true, ustawić enumerable na false, aby to nie

05:14.962 --> 05:17.130
pokazywało się w obcych pętlach,

05:17.130 --> 05:20.310
a teraz dodać getter tutaj, i to jest nowe.

05:20.310 --> 05:23.400
Dodaję tutaj getter, który jest metodą lub właściwością, która

05:23.400 --> 05:26.150
przechowuje funkcję, która jest taka sama, abyśmy mogli

05:27.020 --> 05:29.628
wykonać jakąś dodatkową logikę, gdy użytkownicy próbują

05:29.628 --> 05:32.260
uzyskać dostęp do tej właściwości.

05:32.260 --> 05:35.170
Abyśmy nie wykonywali bezpośrednio wartości tej właściwości,

05:35.170 --> 05:36.633
czyli funkcji, ale abyśmy mogli

05:36.633 --> 05:38.888
wkroczyć i wykonać dodatkową pracę przed wykonaniem

05:38.888 --> 05:40.850
funkcji.

05:40.850 --> 05:41.913
O to właśnie chodzi.

05:43.230 --> 05:46.290
Więc nie dodaję właściwości wartości do tego deskryptora

05:46.290 --> 05:48.660
tutaj, mam tylko getter i znowu, getter w zasadzie

05:48.660 --> 05:51.540
jest jak posiadanie właściwości wartości z dodatkową

05:51.540 --> 05:54.777
logiką, która działa przed zwróceniem wartości.

05:54.777 --> 05:59.777
Teraz, w tym miejscu chcę mieć moją związaną funkcję, w której

05:59.900 --> 06:03.450
mogę użyć oryginalnej metody, którą wyodrębniliśmy

06:03.450 --> 06:07.100
tutaj i nazywamy bind i bind this.

06:07.100 --> 06:08.590
I teraz oczywiście

06:08.590 --> 06:11.730
zapis, do czego to się tutaj odnosi?

06:11.730 --> 06:13.720
Pamiętaj, że jest to wewnątrz tej metody

06:13.720 --> 06:17.700
gettera, więc będzie się to odnosić do tego, co jest odpowiedzialne za wywołanie

06:17.700 --> 06:19.510
tej metody gettera.

06:19.510 --> 06:21.110
I to jest teraz ta sztuczka,

06:21.110 --> 06:23.700
metoda gettera będzie wywoływana przez

06:23.700 --> 06:27.200
konkretny obiekt, do którego należy, więc to wnętrze

06:27.200 --> 06:29.190
metody gettera będzie zawsze odnosiło

06:29.190 --> 06:33.610
się do obiektu, na którym zdefiniowaliśmy gettera.

06:33.610 --> 06:36.800
Nie zostanie to nadpisane przez addEventListener, ponieważ

06:36.800 --> 06:38.965
getter jest jakby dodatkową warstwą pomiędzy

06:38.965 --> 06:41.221
naszą funkcją, która jest wykonywana i

06:41.221 --> 06:44.976
obiektem, do którego należy, a Event Listenerem.

06:44.976 --> 06:47.683
Dlatego też this in here będzie odnosić się

06:47.683 --> 06:51.610
do obiektu, na którym pierwotnie zdefiniowaliśmy metodę.

06:51.610 --> 06:54.660
Możemy więc bezpiecznie powiązać to dla oryginalnej metody

06:54.660 --> 06:57.495
i zapewnić, że teraz to wewnątrz oryginalnej metody

06:57.495 --> 07:01.170
będzie również odnosić się do dokładnie tego samego obiektu.

07:01.170 --> 07:04.300
Teraz zwrócę tutaj funkcję związaną, a następnie,

07:04.300 --> 07:06.760
poza tym dostosowanym deskryptorem, zwrócę

07:06.760 --> 07:08.910
dostosowany deskryptor.

07:08.910 --> 07:10.560
Więc to jest nasza funkcja dekoratora,

07:10.560 --> 07:12.420
zwracająca nowy obiekt deskryptora,

07:12.420 --> 07:14.103
a zatem ten obiekt deskryptora będzie

07:14.103 --> 07:16.960
nadpisywał stary deskryptor, czyli to, co TypeScript

07:16.960 --> 07:18.710
z nim zrobi.

07:18.710 --> 07:21.500
TypeScript następnie zastąpi stary deskryptor

07:21.500 --> 07:23.215
metod, więc starą konfigurację

07:23.215 --> 07:26.390
metod z tą nową konfiguracją tutaj, która dodała tę dodatkową

07:26.390 --> 07:28.513
warstwę gettera.

07:29.460 --> 07:33.330
Teraz oczywiście nie interesuje mnie tutaj nazwa celu

07:33.330 --> 07:37.500
i metody, więc aby uniknąć błędów nazwę to underscore i to tutaj

07:37.500 --> 07:39.083
underscore dwa.

07:40.260 --> 07:43.070
Ponownie, tylko po to, aby powiedzieć TypeScriptowi, że nie jestem zainteresowany

07:43.070 --> 07:45.480
tymi wartościami, ale muszę je zaakceptować.

07:45.480 --> 07:49.800
A teraz dodajmy tutaj autobind do showMessage.

07:49.800 --> 07:52.203
Więc tutaj, dodam w Autobind, i upewnij

07:54.050 --> 07:56.490
się, że usunąłeś bind w dół tam w słuchaczu

07:56.490 --> 07:59.236
zdarzeń, i zapisz to.

07:59.236 --> 08:01.450
A teraz spójrzmy na to, kliknijmy

08:01.450 --> 08:04.730
Click Me, i powinieneś zobaczyć This Works!

08:04.730 --> 08:06.678
Jeśli przeładuję, to działa.

08:06.678 --> 08:09.680
Ponieważ teraz jest to związane prawidłowo.

08:09.680 --> 08:12.060
I tylko po to, aby zweryfikować, że to naprawdę

08:12.060 --> 08:13.520
nasz dekorator robi różnicę

08:13.520 --> 08:15.868
tutaj, jeśli usunąłbym wiązanie tutaj w moim

08:15.868 --> 08:17.850
getterze i dekoratorze i zapisałbym

08:17.850 --> 08:20.920
to, widzisz, że jeśli jest teraz przeładowywany i klikamy

08:20.920 --> 08:23.626
Click me, widzimy undefined ponownie.

08:23.626 --> 08:26.320
Więc to naprawdę jest ta dodatkowa warstwa getter, która

08:26.320 --> 08:27.389
wykonuje swoją pracę

08:27.389 --> 08:30.430
tutaj, która zapewnia, że to jest zawsze związane poprawnie,

08:30.430 --> 08:33.260
niezależnie od tego, jak wywołasz showMessage.

08:33.260 --> 08:35.380
Jeśli wywołaliśmy go tak bezpośrednio na

08:35.380 --> 08:38.350
obiekcie, to zadziała, jeśli wywołamy go tutaj tak jak to

08:38.350 --> 08:40.760
z listenerem zdarzeń, to również działa.

08:40.760 --> 08:42.260
Więc widzisz, że to działa tutaj,

08:42.260 --> 08:45.070
co w końcu pochodzi z tego wywołania showMessage, a następnie

08:45.070 --> 08:48.266
widzisz również, że działa, jeśli kliknę przycisk.

08:48.266 --> 08:49.918
Jest to więc jeden schludny przykład

08:49.918 --> 08:52.060
tego, jak można wykorzystać dekoratory

08:52.060 --> 08:55.190
do zbudowania całkiem niesamowitej funkcjonalności i zaoszczędzić

08:55.190 --> 08:58.718
kłopotów z ręcznym wywoływaniem bind wszędzie.

08:58.718 --> 09:01.883
Zamiast tego, po prostu wiążesz go w ten sposób.
