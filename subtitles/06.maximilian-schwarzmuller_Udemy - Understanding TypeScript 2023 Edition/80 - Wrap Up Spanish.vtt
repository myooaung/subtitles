WEBVTT

00:02.090 --> 00:05.740
Narrador: Y eso es todo para las interfaces y las clases.

00:05.740 --> 00:08.190
En este módulo, hemos echado un vistazo detallado a las clases

00:08.190 --> 00:09.630
y a lo que podemos hacer en ellas.

00:09.630 --> 00:11.390
Las clases y TypeScript,

00:11.390 --> 00:14.130
al final, sólo se basan en las clases para

00:14.130 --> 00:17.180
JavaScript, y ya las he resumido un poco antes

00:17.180 --> 00:18.720
en este módulo.

00:18.720 --> 00:20.710
Las interfaces son una cosa diferente.

00:20.710 --> 00:22.600
Sólo existen en TypeScript.

00:22.600 --> 00:24.670
Son una característica pura de TypeScript,

00:24.670 --> 00:27.390
que te ayuda a escribir un código claro, claramente

00:27.390 --> 00:29.450
estructurado y muy explícito.

00:29.450 --> 00:33.010
Pueden ayudarte a forzar que las clases tengan ciertas características

00:33.010 --> 00:36.810
o que los objetos en general tengan una determinada estructura.

00:36.810 --> 00:39.860
Se pueden utilizar como un tipo de función, como has aprendido.

00:39.860 --> 00:42.490
Permiten propiedades opcionales y todos los métodos,

00:42.490 --> 00:45.200
por tanto, opcionales, por cierto, si se añade un signo

00:45.200 --> 00:48.290
de interrogación después del nombre del método.

00:48.290 --> 00:50.190
Así que eso es algo que puedes usar.

00:50.190 --> 00:53.210
Y, como acabas de ver, cuando se compila después

00:53.210 --> 00:55.870
de cumplir su función de permitir que TypeScript

00:55.870 --> 00:57.680
compruebe tu código, no se omite

00:57.680 --> 01:00.410
nada de estas interfaces.

01:00.410 --> 01:02.300
El código es simplemente volcado.

01:02.300 --> 01:05.080
Las interfaces, sin embargo, son una característica

01:05.080 --> 01:07.420
poderosa para forzar a tus clases u objetos

01:07.420 --> 01:09.140
a tener una cierta estructura

01:09.140 --> 01:12.400
y para describir claramente tu idea de cómo debe ser

01:12.400 --> 01:14.810
un objeto.

01:14.810 --> 01:18.650
Ahora bien, como has aprendido, puedes sustituirlos en su mayoría

01:18.650 --> 01:21.120
por tipos personalizados si así lo deseas.

01:21.120 --> 01:23.580
También puedes implementar tipos personalizados,

01:23.580 --> 01:27.700
pero simplemente es más común usar una interfaz para eso, usar una interfaz

01:27.700 --> 01:32.180
si quieres describir un objeto que si quieres implementarlo.

01:32.180 --> 01:33.980
Todo ello por razones históricas,

01:33.980 --> 01:36.490
ya que en los primeros días de TypeScript, los tipos

01:36.490 --> 01:38.980
personalizados no podían ser implementados o utilizados

01:38.980 --> 01:40.710
como interfaces.

01:40.710 --> 01:42.610
Ahora hay más flexibilidad, pero sigue

01:42.610 --> 01:45.150
siendo recomendable optar por las interfaces si

01:45.150 --> 01:46.420
se trabaja con objetos y si

01:46.420 --> 01:48.680
se quiere describir su estructura.

01:48.680 --> 01:50.620
También los veremos a lo largo de este

01:50.620 --> 01:51.883
curso una y otra vez.
