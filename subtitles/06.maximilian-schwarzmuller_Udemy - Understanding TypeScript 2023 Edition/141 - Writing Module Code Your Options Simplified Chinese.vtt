WEBVTT

00:02.160 --> 00:03.740
教师：那么, 当我们想将代码拆分成多个文件时,

00:03.740 --> 00:06.440
我们有什么选择呢？

00:06.440 --> 00:10.720
现在我们有三个选择｡ 

00:10.720 --> 00:12.680
第一种选择是简单地编写多个代码文件,

00:12.680 --> 00:16.110
即多个TypeScript文件｡

00:16.110 --> 00:20.710
然后TypeScript将自动编译源目录中的所有代码文件,

00:20.710 --> 00:25.000
并手动将编译后的Java脚本文件导入HTML｡

00:25.000 --> 00:26.220
这是一个选项, 对于某些项目,

00:26.220 --> 00:28.970
这可能是正确的, 但您将不得不手动管理所有这些导入,

00:28.970 --> 00:39.560
这可能是麻烦的和容易出错的, 当使用某些TypeScript功能时, 如果某个类型在文件A中定义, 您也放弃了类型支持, 您在文件B中使用它,

00:39.560 --> 00:46.030
而TypeScript不知道此连接｡

00:46.030 --> 00:49.290
这就是为什么对于更大的项目来说这不是一个很好的选择｡

00:49.290 --> 00:52.500
而对于更大的项目, 我们有两个主要的选择｡ 

00:52.500 --> 00:55.470
例如, 我们有名称空间和文件绑定｡ 

00:55.470 --> 00:59.410
命名空间是一个TypeScript特性,

00:59.410 --> 01:04.840
一个语法特性, 你可以在代码中添加特殊的代码来使用这个特性,

01:04.840 --> 01:08.650
它允许你基本上把代码分组在一个命名空间下,

01:08.650 --> 01:12.730
然后把命名空间导入到其他文件中｡

01:12.730 --> 01:16.020
例如, 每个文件都可以有一个命名空间｡ 

01:16.020 --> 01:18.790
将另一个文件导入到另一个文件中,

01:18.790 --> 01:21.930
然后从导入文件中进入另一个文件中的命名空间,

01:21.930 --> 01:28.030
我们将在实践中看到这一点, 以防不完全清楚｡

01:28.030 --> 01:30.020
TypeScript不仅支持这一点,

01:30.020 --> 01:39.560
它还将文件捆绑到一个文件中, 以便您最终在多个文件中编写代码, 这些文件经过编译, 然后相互导入,

01:39.560 --> 01:42.750
这样您需要管理的导入就更少了,

01:42.750 --> 01:50.030
并且您不需要手动管理HTML文件中的不同导入｡

01:50.030 --> 01:52.180
现在, 名称空间的一个替代方案,

01:52.180 --> 01:55.750
可以说是更重要和更现代的替代方案, 是使用ES6导入/导出,

01:55.750 --> 02:06.480
也称为ES6模块, 因为它与TypeScript完全分离, 现代Java脚本也有一个解决这个问题的方案, 因为这个问题不仅存在于TypeScript项目中,

02:06.480 --> 02:15.850
而且存在于任何更大的Java脚本项目中｡

02:15.850 --> 02:18.200
现代的Java脚本支持导入和导出语句,

02:18.200 --> 02:24.910
允许你声明哪个文件依赖于哪个文件, 然后你就有了所有这些单独的文件,

02:24.910 --> 02:33.770
但是你不需要手动管理导入, 而是浏览器, 现代的浏览器可以做到这一点｡

02:33.770 --> 02:38.800
他们理解它, 并自动下载和运行其他文件所依赖的文件｡

02:38.800 --> 02:43.470
您可以使用导入/导出语法来实现这一点, TypeScript也支持这一点｡

02:43.470 --> 02:46.870
因此, 你可以使用它TypeScript没有任何问题.

02:46.870 --> 02:48.700
您可以对每个文件进行编译,

02:48.700 --> 02:50.810
但只需要一次脚本导入,

02:50.810 --> 02:56.350
因为正如我刚才提到的, 现代浏览器知道如何获取所有其他依赖项,

02:56.350 --> 03:00.710
您也将在此处的核心部分中看到这一点｡

03:00.710 --> 03:02.320
这里有一个重要的注意事项,

03:02.320 --> 03:06.110
从技术上讲, 我们最终仍会有多个文件, 虽然我们不必手动管理导入,

03:06.110 --> 03:16.900
但脚本导入, 我们仍然有一些缺点, 因为每个文件, 你'这意味着需要更多的HTTP请求等等, 因此您可以将文件捆绑在一起, 以便在开发期间处理多个文件,

03:16.900 --> 03:39.500
但只提供一个文件用于生产, 但您需要第三方工具, 例如Webpack, 我将在单独的一节中向您展示它的工作原理, 在该节中, 我们将了解Webpack和TypeScript, 以及我们为什么使用它以及如何使用它｡

03:39.500 --> 03:43.900
因此, 现在让我们使用这两种方法的基本形式,

03:43.900 --> 03:48.853
看看如何通过将代码拆分到多个文件来改进代码｡
