WEBVTT

00:02.410 --> 00:04.290
Kursleiter: Es ist also Zeit für etwas

00:04.290 --> 00:06.370
Vererbung und für eine Basisklasse.

00:06.370 --> 00:09.189
Ich möchte eine Basisklasse hinzufügen, die im Grunde genommen

00:09.189 --> 00:12.090
templateElement, hostElement und ein Element enthält,

00:12.090 --> 00:15.430
das die Aufgabe hat, Elemente im Dom auszuwählen, das die attach-Methode

00:15.430 --> 00:16.810
hat, die wir immer brauchen,

00:16.810 --> 00:18.520
und so weiter.

00:18.520 --> 00:22.540
Die also im Grunde all diese gemeinsamen Funktionalitäten verwaltet,

00:22.540 --> 00:26.630
die unsere Klassen, die tatsächlich etwas auf dem Dom rendern, gemeinsam

00:26.630 --> 00:28.220
haben.

00:28.220 --> 00:30.880
Deshalb füge ich über meinem ProjectInput

00:30.880 --> 00:35.650
und auch der ProjectList-Klasse, also im Grunde hier, die Component

00:35.650 --> 00:38.250
Base Class hinzu.

00:38.250 --> 00:41.540
Der Name ist Ihnen überlassen, aber ich nenne sie Component, weil Sie diesen

00:41.540 --> 00:44.090
Begriff vielleicht von React oder Angular kennen, wenn

00:44.090 --> 00:45.870
Sie damit arbeiten, und selbst wenn Sie

00:45.870 --> 00:47.590
nicht damit arbeiten, können Sie sich

00:47.590 --> 00:49.873
diese Klassen als UI, Benutzeroberflächenkomponenten,

00:50.770 --> 00:53.950
vorstellen, die Sie auf dem Bildschirm darstellen.

00:53.950 --> 00:57.950
Und jede Komponente ist letztendlich ein renderbares Objekt, das über einige

00:57.950 --> 00:59.970
Funktionen verfügt, die es uns ermöglichen,

00:59.970 --> 01:01.370
es zu rendern.

01:01.370 --> 01:05.260
Und dann fügen die konkreten Instanzen oder die geerbten Klassen

01:05.260 --> 01:10.260
zusätzliche Funktionen hinzu, die diese spezielle Komponente benötigt.

01:10.300 --> 01:14.370
Was kommt dann in die allgemeine Komponentenklasse?

01:14.370 --> 01:17.590
Nun, ich würde sagen, diese drei Elemente auf jeden Fall.

01:17.590 --> 01:21.390
templateElement, hostElement und element.

01:21.390 --> 01:23.590
Wir haben hier allerdings ein

01:23.590 --> 01:25.470
Problem mit den Typen.

01:25.470 --> 01:28.320
Das templateElement wird immer ein HTMLTemplateElement

01:29.160 --> 01:31.980
sein, aber das hostElement muss nicht immer ein div sein,

01:31.980 --> 01:35.410
zum Beispiel, wenn wir eine Projektelementklasse hinzufügen,

01:35.410 --> 01:37.160
werden wir das in einer ProjectList

01:37.160 --> 01:40.550
rendern, und nicht direkt sogar unser root div hier, also ist das

01:40.550 --> 01:42.360
nicht immer ein div.

01:42.360 --> 01:45.220
Und das hier, nun, es ist immer ein HTMLElement, darauf

01:45.220 --> 01:47.040
können wir uns sicher einigen, aber,

01:47.040 --> 01:50.540
wie im Fall der ProjectInput-Klasse, wissen wir eigentlich, dass

01:50.540 --> 01:52.560
es irgendwo eine bestimmte Form davon

01:52.560 --> 01:55.230
ist, es ist ein HTMLFormElement.

01:55.230 --> 01:57.540
Wir würden also diese zusätzlichen Informationen

01:57.540 --> 02:00.320
verlieren, wenn wir uns darauf beschränken, dort immer

02:00.320 --> 02:02.130
nur ein HTMLElement zu haben, ohne weitere

02:02.130 --> 02:05.220
spezifische Informationen zu speichern.

02:05.220 --> 02:07.690
Wie können wir das also umgehen?

02:07.690 --> 02:10.050
Indem wir nicht nur die Vererbung nutzen,

02:10.050 --> 02:12.920
sondern hier eine generische Klasse erstellen,

02:12.920 --> 02:15.230
von der wir die konkreten Typen festlegen

02:15.230 --> 02:17.680
können, wenn wir von ihr erben.

02:17.680 --> 02:20.940
Dazu fügen wir spitze Klammern nach dem Klassennamen

02:20.940 --> 02:23.550
ein und dann zwei Bezeichner unserer Wahl,

02:23.550 --> 02:26.690
z. B. T und U, die häufig gewählt werden.

02:26.690 --> 02:30.110
Und jetzt können wir auch hier einige Einschränkungen

02:30.110 --> 02:34.820
hinzufügen und sagen, dass T sicherlich eine Art HTMLElement sein wird.

02:34.820 --> 02:36.770
Es kann einfach ein HTMLElement oder

02:36.770 --> 02:38.970
eine spezifischere Version davon sein.

02:38.970 --> 02:41.870
Und das Gleiche gilt für U.

02:41.870 --> 02:44.780
Und hier wissen wir, dass das hostElement vom Typ T und

02:44.780 --> 02:46.690
das Element vom Typ U sein wird.

02:46.690 --> 02:48.660
Wenn wir nun von dieser Klasse erben, können

02:48.660 --> 02:50.970
wir die konkreten Typen angeben, so dass wir mit verschiedenen

02:50.970 --> 02:52.930
Typen an verschiedenen Stellen arbeiten können,

02:52.930 --> 02:54.780
an denen wir erben.

02:56.050 --> 02:58.053
Fügen wir auch hier einen Konstruktor hinzu.

02:58.910 --> 03:01.080
In diesem Konstruktor benötigen

03:01.080 --> 03:03.060
wir ein paar Informationen.

03:03.060 --> 03:05.950
Wir müssen die ID unserer Vorlage kennen, damit wir wissen,

03:05.950 --> 03:08.030
wie wir sie auswählen können, und das sollte

03:08.030 --> 03:09.750
eine Zeichenkette sein.

03:09.750 --> 03:11.590
Wir müssen die hostElementId kennen, die ebenfalls

03:11.590 --> 03:13.050
eine Zeichenkette sein muss, damit

03:13.050 --> 03:15.833
wir wissen, wo wir diese Komponente darstellen müssen.

03:17.440 --> 03:20.505
Und ich möchte auch eine newElementId erhalten, so dass wir eine

03:20.505 --> 03:22.590
ID erhalten, die dem neu gerenderten Element

03:22.590 --> 03:24.350
zugewiesen werden muss.

03:24.350 --> 03:26.020
Dies ist jedoch optional, was

03:26.020 --> 03:28.210
ich durch ein Fragezeichen hinter dem Parameter

03:28.210 --> 03:29.690
signalisiere.

03:29.690 --> 03:31.940
Die Alternative wäre, hier auch undefiniert

03:31.940 --> 03:34.050
als Typ zu akzeptieren, aber ich verwende

03:34.050 --> 03:36.470
einfach das Fragezeichen.

03:36.470 --> 03:38.510
Und jetzt, mit dem im Konstruktor, können

03:38.510 --> 03:39.793
wir, im Grunde, diesen Code

03:40.640 --> 03:42.083
hier, und setzen Sie es in unserem

03:43.810 --> 03:46.950
Konstruktor der Component-Klasse, so dass wir das TemplateElement

03:46.950 --> 03:48.940
zu speichern, aber, natürlich, jetzt

03:48.940 --> 03:52.060
die ID, die wir hier bekommen, ist, dass templateId, das ist,

03:52.060 --> 03:57.450
warum ich bin immer diese als ein Argument in den Konstruktor.

03:57.450 --> 04:00.060
Und für das hostElement ist die ID hier natürlich

04:00.060 --> 04:02.733
unsere hostElementId, etwa so.

04:04.790 --> 04:07.930
Auch wichtig, natürlich, in Bezug auf das Casting hier, wir wissen,

04:07.930 --> 04:10.230
dass dies vom Typ T sein wird, weil T hier dieser

04:10.230 --> 04:12.580
generische Typ ist, den wir speichern oder den

04:12.580 --> 04:15.420
wir für unser hostElement verwenden, also hier können

04:15.420 --> 04:17.163
wir es bereits casten.

04:18.160 --> 04:20.253
Und damit wählen wir Elemente aus.

04:21.130 --> 04:22.940
Wir können auch mehr Code holen.

04:22.940 --> 04:26.650
Der Code hier, wo wir einen Knoten importieren und so weiter, und

04:26.650 --> 04:30.130
wo wir die ID festlegen, das können wir alles übernehmen.

04:30.130 --> 04:32.520
Kopieren wir das also hierher und fügen es auch

04:32.520 --> 04:35.317
dem Konstruktor der Klasse Component hinzu.

04:35.317 --> 04:37.640
importNode, dann setzen wir Element, und

04:37.640 --> 04:41.080
Element hier hat diesen generischen Typ U, so dass, wenn wir

04:41.080 --> 04:43.000
dies hier casten, wir wissen, dass

04:43.000 --> 04:46.870
es dieser U-Typ hier sein wird, also sollten wir es auf U casten.

04:46.870 --> 04:49.090
Das ist eine gute Verwendung von Generika, die diese

04:49.090 --> 04:51.993
Komponentenklasse wirklich wiederverwendbar macht.

04:53.060 --> 04:55.200
Nun zum Ausweis.

04:55.200 --> 04:58.200
Das erhalten wir hier, die newElementId.

04:58.200 --> 05:00.590
Natürlich kann es sein, dass dies nicht immer der Fall ist,

05:00.590 --> 05:02.150
da es optional ist, also sollten wir

05:02.150 --> 05:03.870
überprüfen, ob es vorhanden ist.

05:03.870 --> 05:06.070
Wenn newElementId also ein Ding ist, und

05:06.070 --> 05:07.650
nur dann, werde ich versuchen,

05:07.650 --> 05:09.710
es zuzuweisen, andernfalls versuchen

05:09.710 --> 05:10.543
wir es nicht, weil

05:10.543 --> 05:13.023
wir dann keine ID zuweisen können.

05:14.420 --> 05:16.300
Nun, damit haben wir den Konstruktor.

05:16.300 --> 05:19.160
Lassen Sie uns nun die Funktion "Anhängen" hier verwenden.

05:19.160 --> 05:21.970
Kopieren wir also die Attach-Methode aus einer

05:21.970 --> 05:25.470
unserer anderen Klassen und fügen sie hier als private

05:25.470 --> 05:28.473
Methode in die Klasse Component ein.

05:32.690 --> 05:35.640
Dies können wir dann auch aufrufen. am Ende des Konstruktors

05:35.640 --> 05:38.540
der Klasse Component anhängen.

05:38.540 --> 05:39.960
Nun, hier wollen wir ein Element

05:39.960 --> 05:42.570
hinzufügen, aber wir wissen nicht, wo es hinzugefügt

05:42.570 --> 05:44.193
werden soll, also ist das eigentlich

05:44.193 --> 05:46.450
eine zusätzliche Information, die wir hier

05:46.450 --> 05:49.450
holen sollten, als viertes Argument im Konstruktor, insert

05:52.430 --> 05:54.200
Atstart könnte ein Name sein, und das

05:54.200 --> 05:56.680
ist ein Boolean, sagen wir mal.

05:56.680 --> 06:00.190
Und das sollten wir vor unseren optionalen Parameter stellen.

06:00.190 --> 06:02.230
Optionale Parameter sollten immer an letzter Stelle

06:02.230 --> 06:03.980
stehen, weil man sie weglassen könnte.

06:03.980 --> 06:06.680
Ihre erforderlichen Parameter können daher nicht

06:06.680 --> 06:09.220
nach diesen optionalen Parametern stehen.

06:09.220 --> 06:12.700
Und insertAtStart wird dann an attach weitergeleitet, dort wird

06:12.700 --> 06:13.533
insertAtBeginning,

06:14.615 --> 06:18.740
man könnte auch insertAtStart wiederverwenden, ich verwende hier nur einen

06:18.740 --> 06:21.350
anderen Namen, um Verwirrung zu vermeiden, als

06:21.350 --> 06:23.470
Boolean empfangen.

06:23.470 --> 06:28.040
Und dann prüfen wir hier, ob insertAtBeginning wahr

06:28.040 --> 06:32.920
ist, wenn ja, dann haben wir hier afterbegin, sonst haben

06:32.920 --> 06:34.887
wir beforeend.

06:36.770 --> 06:39.653
Jetzt sind wir flexibel, was das Einfügen angeht.

06:42.980 --> 06:46.570
Außerdem möchte ich diese Klasse jetzt als abstrakte Klasse kennzeichnen,

06:46.570 --> 06:49.600
da sie niemals direkt instanziiert werden sollte, sondern

06:49.600 --> 06:52.560
immer zur Vererbung verwendet werden sollte.

06:52.560 --> 06:56.090
Daher füge ich vor class das Schlüsselwort abstract hinzu.

06:56.090 --> 06:58.750
Damit ist sichergestellt, dass wir sie nicht instanziieren können.

06:58.750 --> 07:01.963
Wenn wir das versuchen würden, würde TypeScript uns anschreien.

07:04.070 --> 07:06.490
Ich werde auch zwei weitere Methoden hinzufügen,

07:06.490 --> 07:08.410
und zwar die configure-Methode und

07:08.410 --> 07:10.840
auch die renderContent-Methode.

07:10.840 --> 07:13.430
Und ich werde sie als abstrakte Methode hinzufügen,

07:13.430 --> 07:16.463
was bedeutet, dass die konkrete Implementierung hier fehlt,

07:18.000 --> 07:21.080
aber wir zwingen jetzt im Grunde jede Klasse, die von component

07:21.080 --> 07:22.670
erbt, diese beiden Methoden hinzuzufügen

07:22.670 --> 07:25.980
und sie verfügbar zu haben.

07:25.980 --> 07:27.220
Ich füge das hier nur

07:27.220 --> 07:29.390
hinzu, damit jemand, der sich unseren

07:29.390 --> 07:31.460
Code ansieht, die Idee hinter der Komponentenklasse

07:31.460 --> 07:34.150
gut verstehen kann.

07:34.150 --> 07:36.340
Dass sie das gesamte allgemeine Rendering oder

07:36.340 --> 07:38.530
das Anbringen der Komponente übernimmt, aber

07:38.530 --> 07:40.790
dass der konkrete Inhalt und die Konfiguration

07:40.790 --> 07:43.840
dann an der Stelle geschehen muss, an der wir erben.

07:43.840 --> 07:47.670
Nebenbei bemerkt: Sie können keine privaten, abstrakten Methoden haben.

07:47.670 --> 07:49.660
Private muss hier also weggelassen werden,

07:49.660 --> 07:52.000
das ist in TypeScript nicht erlaubt.

07:52.000 --> 07:54.590
Nun, und damit können wir Component hier auf

07:54.590 --> 07:56.480
der ProjectList erweitern und diese

07:56.480 --> 07:59.130
drei Eigenschaften jetzt loswerden.

07:59.130 --> 08:00.640
Die zugewiesenen Projekte werden

08:00.640 --> 08:03.520
beibehalten, da sie spezifisch für die ProjectList sind.

08:03.520 --> 08:06.620
Wir wollen nun auch die konkreten Werte angeben, die für

08:06.620 --> 08:09.560
unsere generischen Typen eingefügt werden sollen.

08:09.560 --> 08:12.410
Und wir wissen, wenn wir das umkehren, wissen

08:12.410 --> 08:16.540
wir, dass wir ein HTMLDivElement und ein HTMLElement haben werden,

08:16.540 --> 08:19.313
also werde ich hier HTMLDivElement und HTMLElement

08:20.410 --> 08:22.800
übergeben, so wie hier, und dann diese

08:22.800 --> 08:25.830
drei Eigenschaften loswerden.

08:25.830 --> 08:29.510
Im Konstruktor brauchen wir das jetzt nicht, aber stattdessen müssen

08:29.510 --> 08:32.550
wir am Anfang super aufrufen, um den Konstruktor der Basisklasse

08:32.550 --> 08:35.130
aufzurufen, und dazu müssen wir einige Informationen

08:35.130 --> 08:38.080
an den Superkonstruktor übergeben, wir müssen einige

08:38.080 --> 08:40.840
Informationen übergeben.

08:40.840 --> 08:42.753
Die ID unseres templateElementes,

08:44.050 --> 08:45.850
die hostElementId, ob wir diese am

08:45.850 --> 08:47.870
Anfang des hostElementes einfügen wollen,

08:47.870 --> 08:50.140
und eventuell die ID, die dem neuen Element

08:50.140 --> 08:51.920
zugewiesen werden soll.

08:51.920 --> 08:54.038
Hier ist also unsere Vorlagen-ID,

08:54.038 --> 08:57.811
und damit können wir das hier loswerden.

08:57.811 --> 09:01.292
Dann hier, das hostElement, diese ID war app, also können

09:01.292 --> 09:02.670
wir das loswerden.

09:02.670 --> 09:04.260
Wir behalten die assignedProjects,

09:04.260 --> 09:06.400
weil wir sie hier noch brauchen.

09:06.400 --> 09:08.193
Wir werden das hier los, aber

09:10.150 --> 09:13.050
was die ID für das neue Element betrifft, so

09:13.050 --> 09:16.850
möchte ich das als vierten Parameter übergeben.

09:16.850 --> 09:19.040
Die dritte ist, wo dies eingefügt werden

09:19.040 --> 09:22.400
sollte, und hier, wir verwenden, um dies vor dem Ende einzufügen,

09:22.400 --> 09:25.890
so dass eigentlich, was ich hier als Parameter für die insertAtStart

09:25.890 --> 09:29.170
Wert einfügen möchten, ist false, weil es nicht am Anfang eingefügt

09:29.170 --> 09:32.283
werden sollte, aber am Ende.

09:36.000 --> 09:38.940
Jetzt möchte ich natürlich noch meinen Hörer hier aufstellen.

09:38.940 --> 09:40.730
Ich brauche attach aber nicht aufzurufen,

09:40.730 --> 09:44.410
das geschieht in der Basisklasse, in der Basiskomponente.

09:44.410 --> 09:46.253
Ich werde jedoch renderContent aufrufen.

09:47.870 --> 09:50.010
Und hier sollten wir nicht diesen Typ verwenden,

09:50.010 --> 09:52.100
sondern einfach tippen, weil wir das nicht verwenden

09:52.100 --> 09:54.410
können, bevor super fertig läuft.

09:54.410 --> 09:55.490
Das ist aber kein Problem,

09:55.490 --> 09:57.690
denn wir haben den Typ als Argument erhalten.

09:57.690 --> 09:59.680
Sie sehen, dass ich hier immer noch einen

09:59.680 --> 10:03.487
Fehler erhalte, weil wir hier in ProjectList eine Attach-Methode haben,

10:03.487 --> 10:05.410
die mit der Attach-Methode der Basisklasse

10:05.410 --> 10:07.330
kollidiert.

10:07.330 --> 10:10.600
Lassen Sie uns also diese Attachment-Methode hier loswerden.

10:10.600 --> 10:14.024
Jetzt bekommen wir immer noch einen Fehler, weil renderContent hier

10:14.024 --> 10:16.060
privat ist, aber wir geben es hier als öffentliche

10:16.060 --> 10:18.270
Methode an, ich würde es gerne als private Methode

10:18.270 --> 10:20.240
haben, aber private abstrakte Methoden

10:20.240 --> 10:22.860
werden nicht unterstützt.

10:22.860 --> 10:25.680
Ich werde also das private Schlüsselwort hier entfernen,

10:25.680 --> 10:28.170
und damit haben wir nur noch ein Problem, nämlich

10:28.170 --> 10:30.510
die fehlende configure-Methode, die ich hier

10:30.510 --> 10:31.990
versprochen habe.

10:31.990 --> 10:33.650
Nun, fügen wir es hinzu.

10:33.650 --> 10:38.500
Hier könnten wir also neben renderConfig auch configure hinzufügen, auch

10:38.500 --> 10:40.510
wenn ich hier nichts tue.

10:40.510 --> 10:42.950
Alternativ könnten Sie dies hier in eine optionale Methode

10:42.950 --> 10:46.000
umwandeln, indem Sie ein Fragezeichen hinzufügen, dann sind Sie nicht

10:46.000 --> 10:47.520
gezwungen, es hinzuzufügen.

10:47.520 --> 10:50.380
Hier füge ich es hinzu, weil wir auch argumentieren

10:50.380 --> 10:53.210
könnten, dass wir für die ProjectList den Code,

10:53.210 --> 10:56.490
in dem wir unseren Listener einrichten, tatsächlich

10:56.490 --> 10:58.530
in configure einfügen.

10:58.530 --> 11:00.810
So können wir die Konfiguration erreichen

11:00.810 --> 11:03.320
und dann unser Ding hier machen, diese

11:03.320 --> 11:05.220
Hörereinrichtung.

11:05.220 --> 11:06.610
Und jetzt sollten wir einfach

11:06.610 --> 11:10.653
sicherstellen, dass wir renderContent aufrufen, aber auch so konfigurieren.

11:12.730 --> 11:14.440
Falls Sie sich fragen, warum ich configure

11:14.440 --> 11:16.450
und renderContent nicht hier in der abstrakten

11:16.450 --> 11:18.560
Klasse im Konstruktor aufrufe, nun, das könnten

11:18.560 --> 11:19.993
wir tun, aber dann haben wir vielleicht

11:21.780 --> 11:23.720
ein Problem.

11:23.720 --> 11:26.760
Wenn wir dies in der Component-Klasse aufrufen, dann

11:26.760 --> 11:30.770
könnten wir eine Methode in der ererbenden Klasse aufrufen, also in einer

11:30.770 --> 11:33.240
Klasse, die Component erweitert, wo renderContent

11:33.240 --> 11:36.810
oder configure auf etwas beruht, wo der Konstruktor der ererbenden

11:36.810 --> 11:39.410
Klasse tatsächlich vielleicht etwas einrichtet,

11:39.410 --> 11:41.540
erst nachdem der Basisklassenkonstruktor

11:41.540 --> 11:44.710
fertig ist, worauf renderContent und oder configure angewiesen

11:44.710 --> 11:48.100
sind.

11:48.100 --> 11:50.690
Deshalb ist es im Grunde sicherer, dafür zu sorgen,

11:50.690 --> 11:52.410
dass die vererbende Klasse diese Methoden

11:52.410 --> 11:55.410
aufrufen muss, anstatt dass die Basisklasse diese Methoden

11:55.410 --> 11:56.860
für uns aufruft.

11:57.980 --> 12:01.280
Damit haben wir die ProjectList-Klasse umstrukturiert, um

12:01.280 --> 12:05.040
die Vorteile der Vererbung und unserer gemeinsamen Logik zu nutzen.

12:05.040 --> 12:07.730
Dasselbe machen wir jetzt für ProjectInput.

12:07.730 --> 12:13.170
Dort wollen wir auch Component erweitern.

12:13.170 --> 12:14.900
Verwenden Sie die generische

12:14.900 --> 12:19.430
Natur der, und dort, wir haben die HTMLDivElement für die hostElement,

12:19.430 --> 12:23.980
und die HTMLFormElement für das Element, das gerendert wird.

12:23.980 --> 12:27.210
Damit können wir diese drei Eigenschaften hier loswerden,

12:27.210 --> 12:28.310
also machen wir das.

12:28.310 --> 12:30.090
Wir behalten diese drei Eigenschaften natürlich

12:30.090 --> 12:32.140
bei, weil sie spezifisch für ProjectInput sind.

12:33.040 --> 12:35.310
Dann müssen wir hier super aufrufen,

12:35.310 --> 12:38.320
und an super übergeben wir die ID der Vorlage, nämlich

12:38.320 --> 12:39.900
ProjectInput, die ID des

12:39.900 --> 12:41.970
Host-Elements, nämlich app, insertBefore

12:41.970 --> 12:45.270
ist hier true, weil ich das neu erstellte Element hier

12:45.270 --> 12:47.620
am Anfang für diese ProjectInput-Klasse

12:47.620 --> 12:50.510
einfügen möchte.

12:50.510 --> 12:53.110
Und dann newElementId, das ist eine Benutzereingabe,

12:53.110 --> 12:56.913
also sollten wir auch das weiterleiten.

12:57.844 --> 12:59.400
Damit können wir diesen

12:59.400 --> 13:03.480
Code, diesen Code und diesen ganzen Code hier loswerden.

13:03.480 --> 13:05.240
Sie können diesen Code natürlich hier aufbewahren.

13:05.240 --> 13:07.820
Wir könnten jedoch auch argumentieren, dass wir dies vielleicht

13:07.820 --> 13:09.860
in die Konfiguration aufgenommen haben.

13:09.860 --> 13:12.100
Gehen wir also zur configure-Methode, die wir

13:12.100 --> 13:13.660
hier bereits haben, und fügen wir

13:13.660 --> 13:16.790
hier unsere Hörer oder unser Eigenschafts-Setup zur Konfiguration

13:16.790 --> 13:17.683
hinzu.

13:18.880 --> 13:20.780
Natürlich sollten wir attach loswerden,

13:20.780 --> 13:24.450
denn das ist jetzt etwas, was die Basisklasse für uns tut, und wir sollten

13:24.450 --> 13:26.980
prüfen, was TypeScript nicht mag, natürlich sollten

13:26.980 --> 13:29.690
wir attach hier loswerden.

13:29.690 --> 13:32.520
Und ja, eine Sache, die TypeScript nicht mag, ist, dass

13:32.520 --> 13:35.090
es sich jetzt beschwert, dass diese Felder nicht

13:35.090 --> 13:37.190
im Konstruktor initialisiert werden,

13:37.190 --> 13:40.380
weil es nicht versteht oder nicht überprüft, dass configure

13:40.380 --> 13:42.260
im Konstruktor aufgerufen wird und

13:42.260 --> 13:44.770
diese Initialisierung durchführt.

13:44.770 --> 13:47.500
Um also TypeScript gerecht zu werden, verschiebe

13:47.500 --> 13:50.550
ich diese Initialisierungen von configure zurück

13:50.550 --> 13:52.170
in den Konstruktor.

13:52.170 --> 13:54.190
Technisch gesehen ist das Ergebnis genau dasselbe, aber

13:54.190 --> 13:55.953
TypeScript beschwert sich jetzt nicht mehr.

13:56.800 --> 13:59.240
Es wird sich jedoch beschweren, dass wir

14:00.440 --> 14:02.310
eine private configure-Methode

14:02.310 --> 14:05.910
haben, also sollten wir diese ändern und configure in eine

14:05.910 --> 14:08.940
öffentliche Methode umwandeln.

14:08.940 --> 14:11.460
Es ist kein Muss, aber es ist eine Art Konvention, die

14:11.460 --> 14:13.000
öffentlichen Methoden zuerst

14:13.000 --> 14:14.570
zu haben, weshalb ich sie hier über

14:14.570 --> 14:17.240
die anderen privaten Methoden stellen werde.

14:17.240 --> 14:19.370
Und natürlich beschwert es sich jetzt auch,

14:19.370 --> 14:21.990
dass wir keine renderContent-Methode haben.

14:21.990 --> 14:25.020
Jetzt füge ich noch einen hinzu, einfach weil wir das müssen.

14:25.020 --> 14:26.780
Hier tun wir nichts, also ist es technisch

14:26.780 --> 14:28.890
gesehen nicht erforderlich, aber wir erfüllen

14:28.890 --> 14:31.053
jetzt unsere Basisklasse.

14:32.260 --> 14:34.603
Nebenbei bemerkt können renderContent

14:35.550 --> 14:39.590
und configure in der ProjectList-Klasse aus genau denselben Gründen

14:39.590 --> 14:43.230
wie die eben erwähnte Konvention auch über diese private Methode

14:43.230 --> 14:45.123
verschoben werden.

14:46.440 --> 14:49.870
Und damit haben wir auch ProjectInput umstrukturiert, um die Vorteile

14:49.870 --> 14:51.780
der Vererbung zu nutzen und die Basisklasse

14:51.780 --> 14:55.330
einen großen Teil der Arbeit erledigen zu lassen.

14:55.330 --> 14:57.670
Mal sehen, ob das jetzt alles funktioniert.

14:57.670 --> 15:00.710
Wenn wir das speichern, wird es

15:00.710 --> 15:02.740
ohne Fehler kompiliert

15:02.740 --> 15:05.870
und scheint gut zu laufen.

15:05.870 --> 15:07.810
Und das sieht ziemlich gut aus.

15:07.810 --> 15:09.720
Es funktioniert genauso wie vorher, aber

15:09.720 --> 15:11.600
jetzt haben wir einen saubereren Code,

15:11.600 --> 15:14.240
bei dem wir dank der Vererbung die Vorteile der Wiederverwendung

15:14.240 --> 15:15.850
von Code nutzen.

15:15.850 --> 15:18.540
Das ist aber nicht der einzige Ort, an dem wir erben können.

15:18.540 --> 15:20.610
Zum Abschluss dieses Vortrags möchte

15:20.610 --> 15:24.230
ich auch den Zustand unseres Projekts überarbeiten.

15:24.230 --> 15:26.240
Technisch gesehen brauchen wir hier keine

15:26.240 --> 15:29.450
Vererbung, weil wir nur diesen einen Zustand in der gesamten Anwendung

15:29.450 --> 15:31.230
verwalten, aber stellen Sie sich eine

15:31.230 --> 15:33.130
größere Anwendung vor, in der Sie mehrere

15:33.130 --> 15:35.310
verschiedene Zustände haben.

15:35.310 --> 15:37.240
Eine für den Benutzerstatus, ob

15:37.240 --> 15:39.290
der Benutzer eingeloggt ist und so

15:39.290 --> 15:43.030
weiter, eine für die Projekte, eine für einen Warenkorb.

15:43.030 --> 15:45.600
Nun werden Sie feststellen, dass einige Merkmale

15:45.600 --> 15:48.080
Ihrer Zustandsklasse immer gleich sind.

15:48.080 --> 15:50.520
Insbesondere das Array von Listenern

15:50.520 --> 15:52.780
und die Methode addListener.

15:52.780 --> 15:54.730
Wir könnten also auch hier eine Basisklasse verwenden.

15:55.650 --> 15:58.170
Wir könnten hier eine Klasse State verwenden,

15:58.170 --> 16:01.230
und diese Klasse hat ein Listeners-Array, und diese

16:01.230 --> 16:04.640
Klasse hat auch eine addListeners-Methode, also schneiden

16:04.640 --> 16:07.120
wir beides aus ProjectState aus und fügen

16:07.120 --> 16:09.160
es zu State hinzu.

16:09.160 --> 16:12.610
Das bedeutet natürlich auch, dass wir nicht wissen, ob unser

16:12.610 --> 16:14.700
Hörer tatsächlich ein Array von Projekten

16:14.700 --> 16:16.720
zurückgeben wird.

16:16.720 --> 16:18.253
Für diesen Funktionstyp

16:19.110 --> 16:20.760
möchte ich eigentlich

16:20.760 --> 16:24.740
auch einen generischen Typ haben.

16:24.740 --> 16:27.440
Damit wir das von außen einstellen können.

16:27.440 --> 16:28.483
Wir können das tun, wir können

16:29.790 --> 16:31.623
einen generischen Typ schreiben, wie diesen

16:32.680 --> 16:35.730
hier, einen benutzerdefinierten Typ, der generisch ist, wir können

16:35.730 --> 16:38.410
die spitzen Klammern nach unserem Typnamen hinzufügen, einen

16:38.410 --> 16:40.150
Bezeichner unserer Wahl verwenden und

16:40.150 --> 16:42.460
dann diesen Typ hier wiederverwenden.

16:42.460 --> 16:44.960
Jetzt können wir State generisch machen, wir können denselben

16:44.960 --> 16:46.320
Bezeichner verwenden, weil es

16:46.320 --> 16:49.530
ein anderes Konstrukt als unser benutzerdefinierter Typ ist.

16:49.530 --> 16:53.520
Und hier, wenn wir sagen, dass wir eine Liste von Zuhörern haben wollen,

16:53.520 --> 16:56.780
müssen wir TypeScript mitteilen, welchen generischen

16:56.780 --> 16:58.850
Typ die Zuhörer für dieses State-Objekt,

16:58.850 --> 17:01.510
das wir erstellen, verwenden.

17:01.510 --> 17:03.850
Und das bedeutet einfach, dass wir unseren generischen

17:03.850 --> 17:06.490
Typ hier und hier weiterleiten können.

17:06.490 --> 17:09.410
Wenn wir also jetzt den Zustand erweitern, müssen wir den Datentyp

17:09.410 --> 17:12.630
angeben, mit dem dieser Zustand arbeiten soll, und anstelle des Zustands

17:12.630 --> 17:14.930
wird dieser dann an unseren benutzerdefinierten

17:14.930 --> 17:17.680
Hörertyp weitergeleitet, das ist die Idee.

17:17.680 --> 17:19.580
Und wie können wir all das nutzen?

17:19.580 --> 17:21.950
Unten in der ProjectState-Klasse erweitern

17:21.950 --> 17:24.930
wir einfach die State-Klasse und stellen einen

17:24.930 --> 17:27.900
Wert, einen konkreten Wert für den generischen

17:27.900 --> 17:30.040
Platzhalter bereit, und hier ist

17:30.040 --> 17:32.480
dieser konkrete Wert Project, denn bei

17:32.480 --> 17:36.510
ProjectState geht es darum, was zu verwalten.

17:36.510 --> 17:37.393
Projekte.

17:38.970 --> 17:41.650
Der private Konstruktor hier hat ein Problem,

17:41.650 --> 17:43.390
wie Sie sehen können, weil wir

17:43.390 --> 17:45.160
nicht super aufrufen.

17:45.160 --> 17:46.930
Nun, das sollten wir auf jeden Fall tun, wir

17:46.930 --> 17:48.350
sollten hier Super anrufen, das ist

17:48.350 --> 17:49.800
alles, was wir dort tun müssen.

17:50.640 --> 17:53.490
Und hier, wenn wir nach unten scrollen, wo wir

17:53.490 --> 17:55.880
durch die Listener gehen, sehen wir, dass

17:55.880 --> 17:57.890
listeners privat ist, und es ist

17:57.890 --> 18:00.240
privat in unserer Basisklasse.

18:00.240 --> 18:01.860
Das bedeutet, dass wir nur innerhalb der

18:01.860 --> 18:03.580
Basisklasse darauf zugreifen können.

18:03.580 --> 18:06.760
Sie haben aber auch einen anderen Zugriffsmodifikator

18:06.760 --> 18:09.380
kennen gelernt, der ähnlich wie private ist,

18:09.380 --> 18:12.900
aber auch den Zugriff von vererbenden Klassen erlaubt,

18:12.900 --> 18:14.990
und das wäre protected.

18:14.990 --> 18:17.200
Geschützt bedeutet, dass von außerhalb der

18:17.200 --> 18:18.930
Klasse nicht darauf zugegriffen werden

18:18.930 --> 18:23.030
kann, aber von jeder Klasse, die erbt, kann darauf zugegriffen werden.

18:23.030 --> 18:24.740
Wenn wir das alles speichern, sollte

18:24.740 --> 18:26.650
es sich gut kompilieren lassen.

18:26.650 --> 18:28.940
Testen wir das schnell, und es sieht gut aus.

18:28.940 --> 18:31.790
Es funktioniert also wie vorher, aber jetzt wieder

18:31.790 --> 18:34.160
mit etwas schönerem Code, indem wir Vererbung

18:34.160 --> 18:36.420
und Generics auch für unsere Zustandsverwaltung

18:36.420 --> 18:38.363
verwenden.
