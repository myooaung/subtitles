WEBVTT

1
00:00:02.200 --> 00:00:03.210
<v Instructor>So let's get started</v>

2
00:00:03.210 --> 00:00:05.520
with TypeScript and Node.js

3
00:00:05.520 --> 00:00:08.660
and for that, I'm essentially in a empty new folder here,

4
00:00:08.660 --> 00:00:10.610
just some configuration files there,

5
00:00:10.610 --> 00:00:12.140
and let's start very simple.

6
00:00:12.140 --> 00:00:15.020
Let's add a app.ts file in here.

7
00:00:15.020 --> 00:00:17.370
You can name is however you want, of course.

8
00:00:17.370 --> 00:00:19.180
And in there, let's write some code

9
00:00:19.180 --> 00:00:22.220
which we wanna execute with Node.js,

10
00:00:22.220 --> 00:00:24.980
but where we want to use TypeScript.

11
00:00:24.980 --> 00:00:26.350
A simple script could be that we

12
00:00:26.350 --> 00:00:28.910
just console logged something.

13
00:00:28.910 --> 00:00:30.450
This works in the browser,

14
00:00:30.450 --> 00:00:33.350
but this also works with Node.js.

15
00:00:33.350 --> 00:00:35.840
Now make sure you got Node.js installed,

16
00:00:35.840 --> 00:00:37.220
which you definitely should have

17
00:00:37.220 --> 00:00:38.740
if you followed through that course

18
00:00:38.740 --> 00:00:42.077
because we used it in NPM with Webpack

19
00:00:42.077 --> 00:00:43.910
and with many other tools

20
00:00:43.910 --> 00:00:46.710
and libraries we installed with NPM already.

21
00:00:46.710 --> 00:00:48.480
So you should have Node.js installed.

22
00:00:48.480 --> 00:00:50.300
And if you got it installed,

23
00:00:50.300 --> 00:00:52.130
you could execute this file

24
00:00:52.130 --> 00:00:54.110
if you compile it to JavaScript.

25
00:00:54.110 --> 00:00:57.000
So if I run tsc app.ts,

26
00:00:57.000 --> 00:01:00.360
and I produce my app.js file therefore,

27
00:01:00.360 --> 00:01:02.890
I can execute this with node

28
00:01:02.890 --> 00:01:04.503
and I print something here.

29
00:01:06.550 --> 00:01:08.990
Now when I delete the app.js file

30
00:01:08.990 --> 00:01:11.890
and I try to execute app.ts with node,

31
00:01:11.890 --> 00:01:13.810
you'll see something strange.

32
00:01:13.810 --> 00:01:15.070
This also works.

33
00:01:15.070 --> 00:01:18.010
So if node capable of executing TypeScript?

34
00:01:18.010 --> 00:01:20.380
No it is not and that's really important.

35
00:01:20.380 --> 00:01:23.210
It just doesn't care about the file extension,

36
00:01:23.210 --> 00:01:25.260
but whatever it finds in the file

37
00:01:25.260 --> 00:01:27.420
it treats as a regular JavaScript

38
00:01:27.420 --> 00:01:30.180
and this here doesn't use any TypeScript features,

39
00:01:30.180 --> 00:01:31.370
so it works.

40
00:01:31.370 --> 00:01:34.340
That changes if we add different content here.

41
00:01:34.340 --> 00:01:36.400
Let's say instead we have an age variable,

42
00:01:36.400 --> 00:01:37.370
which is a number

43
00:01:37.370 --> 00:01:40.080
and then here I set this to 30,

44
00:01:40.080 --> 00:01:42.250
and then I console.log age here.

45
00:01:42.250 --> 00:01:44.840
This of course is a valid TypeScript code.

46
00:01:44.840 --> 00:01:46.790
But if we try to execute this with node,

47
00:01:46.790 --> 00:01:48.370
you will see we get an error.

48
00:01:48.370 --> 00:01:52.450
So node is not capable of parsing and compiling TypeScript,

49
00:01:52.450 --> 00:01:54.210
it just treats every file

50
00:01:54.210 --> 00:01:56.960
you execute with it as JavaScript.

51
00:01:56.960 --> 00:01:59.030
And if you're not using any TypeScript features

52
00:01:59.030 --> 00:02:01.100
in the file, yes then it does work.

53
00:02:01.100 --> 00:02:02.950
But if you do, it won't work.

54
00:02:02.950 --> 00:02:04.920
You always have to compile the file

55
00:02:04.920 --> 00:02:06.550
to JavaScript first then,

56
00:02:06.550 --> 00:02:08.960
in order to then execute the JavaScript file,

57
00:02:08.960 --> 00:02:11.350
which has only valid JavaScript code in it.

58
00:02:11.350 --> 00:02:13.030
That's really important to understand.

59
00:02:13.030 --> 00:02:15.890
Node does not execute TypeScript.

60
00:02:15.890 --> 00:02:20.710
Now you can actually install a package, ts-node,

61
00:02:20.710 --> 00:02:24.230
which in the end gives you that TypeScript compiler,

62
00:02:24.230 --> 00:02:27.880
combined with the node executable, you could say,

63
00:02:27.880 --> 00:02:30.320
so that you can install a tool globally,

64
00:02:30.320 --> 00:02:34.170
which you can use to run TypeScript files just like that.

65
00:02:34.170 --> 00:02:35.210
But behind the scenes

66
00:02:35.210 --> 00:02:37.620
it will then just do the compilation for you

67
00:02:37.620 --> 00:02:39.440
and execute the compile code.

68
00:02:39.440 --> 00:02:42.610
So it basically combines the tsc and the node step

69
00:02:42.610 --> 00:02:43.890
into one step.

70
00:02:43.890 --> 00:02:46.060
So, it is a package you could use

71
00:02:46.060 --> 00:02:49.150
but whilst this might be nice for development,

72
00:02:49.150 --> 00:02:52.330
for production, for really serving your files

73
00:02:52.330 --> 00:02:54.850
on some web server, on some web host,

74
00:02:54.850 --> 00:02:56.950
this is probably not ideal,

75
00:02:56.950 --> 00:02:59.910
because having this extra compilation step

76
00:02:59.910 --> 00:03:02.160
every time your code gets executed,

77
00:03:02.160 --> 00:03:04.370
simply adds a bit of extra overhead,

78
00:03:04.370 --> 00:03:06.110
which is fine during development,

79
00:03:06.110 --> 00:03:07.970
but which you probably don't want

80
00:03:07.970 --> 00:03:09.890
when your code is production ready

81
00:03:09.890 --> 00:03:12.090
and you really want to serve it somewhere.

82
00:03:12.090 --> 00:03:13.260
Therefore in this module,

83
00:03:13.260 --> 00:03:15.950
we'll not use ts-node and we'll not try to execute

84
00:03:15.950 --> 00:03:18.180
any TypeScript files with node.

85
00:03:18.180 --> 00:03:21.570
Instead I will show you a setup we can use

86
00:03:21.570 --> 00:03:24.520
to build a node express web application

87
00:03:24.520 --> 00:03:26.150
or rest API here,

88
00:03:26.150 --> 00:03:29.130
with just TypeScript and the TypeScript compiler

89
00:03:29.130 --> 00:03:31.343
and vanilla node.js.

