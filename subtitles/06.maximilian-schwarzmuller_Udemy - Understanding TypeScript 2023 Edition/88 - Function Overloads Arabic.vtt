WEBVTT

00:02.540 --> 00:05.610
المعلم: بعد ذلك ، أريد استكشاف الأحمال

00:05.610 --> 00:08.050
الزائدة للوظيفة ، وهي ميزة تسمح

00:08.050 --> 00:11.450
لنا بتحديد توقيعات متعددة للوظيفة ، إذا جاز

00:11.450 --> 00:13.840
التعبير ، للوظيفة نفسها.

00:13.840 --> 00:17.080
مما يعني ببساطة أنه يمكن أن يكون لدينا عدة طرق

00:17.080 --> 00:20.340
ممكنة لاستدعاء دالة ذات معلمات مختلفة ، على

00:20.340 --> 00:24.300
سبيل المثال ، للقيام بشيء ما داخل تلك الوظيفة.

00:24.300 --> 00:26.540
ومثال جيد حيث يمكن أن تساعدنا الأحمال الزائدة

00:26.540 --> 00:29.060
على الوظائف يمكن رؤيته قليلاً أعلاه.

00:29.060 --> 00:32.090
وظيفة الإضافة هذه التي كتبناها سابقًا ،

00:32.090 --> 00:35.940
ما تفعله هو أنها تأخذ قيمتين قابلتين للدمج ، مما يعني

00:35.940 --> 00:37.960
سلاسل أو أرقامًا ، وبعد ذلك

00:37.960 --> 00:39.830
كما ترون نوع الإرجاع المستنتج

00:39.830 --> 00:43.450
من TypeScript هنا ، كل شيء قابل للدمج.

00:43.450 --> 00:45.370
هذا يعني ببساطة أن TypeScript

00:45.370 --> 00:47.960
تدرك أن ما تقوم بإرجاعه هو إما سلسلة

00:47.960 --> 00:51.080
أو رقم ، ولكن في الواقع إذا فكرت في الأمر ، فهذا

00:51.080 --> 00:52.880
ليس صحيحًا حقًا.

00:52.880 --> 00:55.280
أعني ، هذا صحيح من الناحية الفنية ، لكننا

00:55.280 --> 00:57.620
نعلم أنه إذا مررنا رقمين ، فسيكون نوع

00:57.620 --> 00:59.400
الإرجاع دائمًا رقمًا.

00:59.400 --> 01:01.940
إذا مررنا سلسلة واحدة على الأقل ، فسيكون

01:01.940 --> 01:03.950
نوع الإرجاع عبارة عن سلسلة.

01:03.950 --> 01:05.460
الآن لماذا هذا مهم؟

01:05.460 --> 01:08.225
ضع في اعتبارك أن وظيفة الإضافة مكتوبة على هذا النحو.

01:08.225 --> 01:11.060
وفي الواقع يمكنك التعليق على كل شيء أدناه وإضافة

01:11.060 --> 01:15.390
بعض التعليمات البرمجية الجديدة هناك أسفل الوظيفة مباشرة.

01:15.390 --> 01:18.670
إذا حصلت الآن على نتيجتي هنا عن طريق استدعاء add

01:18.670 --> 01:21.870
، فأنا مررت في واحد وخمسة ، فسترى أن النتيجة من النوع

01:21.870 --> 01:23.390
القابل للدمج.

01:23.390 --> 01:27.010
والنتيجة هي أن TypeScript لا تعرف ما

01:27.010 --> 01:30.390
إذا كانت النتيجة رقمًا أم سلسلة.

01:30.390 --> 01:34.510
الآن قد يكون هذا مهمًا حقًا إذا كنا نمرر في سلاسل.

01:34.510 --> 01:39.510
إذا مررت في Max Schwarz هنا ، فهذا يعمل ولكني ما

01:39.700 --> 01:41.750
زلت أعود للجمع.

01:41.750 --> 01:43.990
الآن نتيجة لذلك لا يمكنني استدعاء

01:43.990 --> 01:46.120
وظائف السلسلة عند النتيجة ، لا يمكنني

01:46.120 --> 01:50.600
استدعاء الانقسام على سبيل المثال للتقسيم على مساحة بيضاء.

01:50.600 --> 01:52.870
أعلم أن هذا سينجح ، لأنني أعلم

01:52.870 --> 01:55.270
أنه عندما أستدعي الوظيفة مثل هذا

01:55.270 --> 01:57.200
، سأدخلها في هذا الفرع إذا

01:57.200 --> 01:59.980
سأستعيد سلسلة ، لذلك أعلم أن النتائج

01:59.980 --> 02:03.030
ستحمل السلسلة ، لكن TypeScript يعرف ذلك

02:03.030 --> 02:05.620
يحمل سلسلة أو رقمًا.

02:05.620 --> 02:08.350
الآن بالطبع ، يمكننا استخدام نوع الكتابة هنا

02:08.350 --> 02:11.340
وإخبار TypeScript أن ما نحصل عليه هو سلسلة.

02:11.340 --> 02:13.930
يمكننا القيام بذلك باستخدام بناء جملة

02:13.930 --> 02:16.040
صب النوع الذي تعلمته سابقًا.

02:16.040 --> 02:18.840
ومع ذلك ، فإنه ليس من الأفضل أن نفعل ذلك ، أود أن أزعم ، لأنه

02:18.840 --> 02:21.800
يتعين علينا كتابة المزيد من التعليمات البرمجية هنا على

02:21.800 --> 02:24.560
الرغم من أننا نتوقع أن يفهم TypeScript أنه عندما نسمي

02:24.560 --> 02:26.070
هذه الوظيفة مثل هذه ، فإننا نعود

02:26.070 --> 02:27.740
دائمًا إلى سلسلة.

02:27.740 --> 02:30.890
لكن TypeScript لا تقوم بالفعل بتحليل الكود الخاص بنا

02:30.890 --> 02:33.700
جيدًا بما يكفي هنا ، وهنا يمكن أن يساعدنا التحميل

02:33.700 --> 02:35.000
الزائد للوظيفة.

02:35.000 --> 02:38.730
تتم كتابة وظيفة التحميل الزائد ببساطة عن طريق كتابة

02:38.730 --> 02:41.880
الوظيفة مباشرة فوق وظيفتك الرئيسية ، على سبيل

02:41.880 --> 02:46.683
المثال ، بنفس الاسم ، لذلك تكرر هذا السطر هنا بشكل أساسي ، ولكن بدون الأقواس

02:47.880 --> 02:50.890
المتعرجة ، لا توجد أقواس متعرجة للفتح والإغلاق

02:50.890 --> 02:54.080
بعد ذلك ، والآن أنت هنا تريد استخدام أنواع محددة

02:54.080 --> 02:57.980
من الأرقام والرقم ثم نوع الإرجاع الذي تم العثور عليه عندما

02:57.980 --> 03:03.410
يكون هذا هو الحال عندما تحصل على رقم واحد على الأقل.

03:03.410 --> 03:06.643
وهناك يمكننا القول ، إذن نوع الإرجاع هو رقم.

03:08.840 --> 03:10.980
الآن مع ذلك نقول لـ TypeScript

03:10.980 --> 03:14.980
، إذا استدعينا هذه الوظيفة وكانت كلتا الوسيطتين رقمًا

03:14.980 --> 03:17.180
، فإن هذه الدالة ترجع رقمًا.

03:17.180 --> 03:19.430
الآن هذا بالطبع ليس بناء الجملة الذي

03:19.430 --> 03:22.480
سيعمل في JavaScript ، سيتم حذفه بواسطة TypeScript

03:22.480 --> 03:24.430
في عملية الترجمة.

03:24.430 --> 03:28.480
لكن TypeScript يدمج معلومات الوظيفة

03:28.480 --> 03:31.380
هذه وإعلان هذه الوظيفة معًا

03:31.380 --> 03:33.640
ويجمع أساسًا معرفة هذين

03:33.640 --> 03:35.550
السطرين هنا.

03:35.550 --> 03:38.590
والآن تعرف جيدًا ، يمكننا استدعاء هذه الوظيفة

03:38.590 --> 03:41.490
هنا إما مع A و B من النوع القابل للدمج أو

03:41.490 --> 03:43.790
مع A و B من النوع رقم.

03:43.790 --> 03:47.060
بالمناسبة ، يمكنك أيضًا إضافة المزيد أو أقل من المعلمات

03:47.060 --> 03:50.100
هنا في الأحمال الزائدة ، فأنت مرن حقًا هناك.

03:50.100 --> 03:53.640
يمكنك أيضًا إضافة دالة هنا وتتوقع رقمًا

03:53.640 --> 03:57.620
واحدًا وتعيد رقمًا ، وسيعمل هذا أيضًا إذا

03:57.620 --> 04:01.210
جعلنا B اختياريًا في الأحمال الزائدة

04:01.210 --> 04:03.270
الأخرى أيضًا.

04:03.270 --> 04:05.254
لأنه في النهاية ، تحتاج بالطبع إلى

04:05.254 --> 04:08.630
التأكد من أن الكود الخاص بك هنا يعمل دائمًا وأنك تتلقى جميع

04:08.630 --> 04:10.850
الحجج التي تحتاجها في النهاية.

04:10.850 --> 04:13.610
لذلك سيكون الخيار B اختياريًا هنا ،

04:13.610 --> 04:15.170
ثم ترى هذا يعمل ، الآن

04:15.170 --> 04:17.850
بالطبع علينا فقط العمل على أن يكون

04:17.850 --> 04:19.550
B اختياريًا هناك.

04:19.550 --> 04:21.390
ومع ذلك ، لا أحتاج إلى ذلك ، لذلك

04:21.390 --> 04:24.460
سأتخلص من ذلك وأترك هذا فقط ، لكنني أيضًا لم أرغب في

04:24.460 --> 04:27.200
زيادة الحمل عندما استدعينا هذا بالسلاسل.

04:27.200 --> 04:30.060
لذا سأضيف وظيفة إضافة أخرى هنا حيث A عبارة

04:30.060 --> 04:33.450
عن سلسلة و B عبارة عن سلسلة ، وبعد ذلك سأكون واضحًا

04:33.450 --> 04:36.090
تمامًا فيما يتعلق بحقيقة أن ما نعيده

04:36.090 --> 04:38.460
سيكون سلسلة نصية.

04:38.460 --> 04:40.280
بالمناسبة ، من الجيد إضافة

04:40.280 --> 04:43.660
فاصلة منقوطة بعد سطور التحميل الزائد هنا.

04:43.660 --> 04:46.560
والآن مع هذا أقول ، إذا كنا نسمي هذه الدالة

04:46.560 --> 04:49.100
برقمين ، فسنحصل دائمًا على رقم.

04:49.100 --> 04:52.170
إذا استدعيناها بسلسلتين ، فسنحصل دائمًا على سلسلة.

04:52.170 --> 04:54.510
إذا استدعيناها بسلسلة واحدة ورقم واحد

04:54.510 --> 04:57.020
، فنحن أيضًا من الناحية الفنية نحصل دائمًا

04:57.020 --> 04:57.853
على سلسلة ، لكنني

04:57.853 --> 04:59.410
لا أريد إضافة كل هذه المجموعات

04:59.410 --> 05:01.240
الممكنة هنا ، بالطبع يمكنني إضافة

05:01.240 --> 05:03.173
المزيد ثم أيضًا إضافة رقم هنا ، أو

05:04.040 --> 05:07.500
الآخر قد يكون لدينا ، وهو هذا واحد.

05:07.500 --> 05:10.060
حسنًا ، أعتقد الآن أنني قمت بإضافة جميع المجموعات.

05:10.060 --> 05:12.540
والآن أقوم بإدراج جميع مجموعات

05:12.540 --> 05:16.040
القيم المحتملة هنا وما نعود به في كل حالة.

05:16.040 --> 05:18.260
الآن مع ذلك ، ترى أن الخطأ قد اختفى لأن

05:18.260 --> 05:20.520
TypeScript يعرف الآن أن النتائج ستكون

05:20.520 --> 05:25.623
من نوع سلسلة إذا استدعينا إضافة مع هاتين القيمتين اللتين تشكلان كلا السلاسل.

05:25.623 --> 05:28.510
وإذا قمت بالمرور فوق إضافة ، فسترى أن هناك

05:28.510 --> 05:31.100
ثلاثة حمولات زائدة إضافية متاحة.

05:31.100 --> 05:32.980
أنا هنا أستدعي add مع سلسلتين ،

05:32.980 --> 05:35.560
لكن TypeScript يعرف أن هناك ثلاث طرق أخرى

05:35.560 --> 05:36.630
لاستدعاء هذا.

05:36.630 --> 05:39.450
على سبيل المثال ، مع سلسلة ورقم

05:39.450 --> 05:41.340
، وفي هذه الحالة أحصل

05:41.340 --> 05:46.340
على سلسلة ، برقم وبعض السلسلة ، أو برقمين.

05:47.430 --> 05:48.630
هذا من شأنه أيضا أن يعمل.

05:48.630 --> 05:50.210
ثم بالطبع لا يمكنني استدعاء

05:50.210 --> 05:52.650
Split لأن TypeScript يحدد بشكل صحيح

05:52.650 --> 05:54.630
أنه عندما أطلق على هذا رقمين ، أستعيد

05:54.630 --> 05:58.253
رقمًا ، وعلى رقم لا يمكنك الاتصال به منقسم.

05:59.260 --> 06:02.010
إذاً هذه هي الأحمال الزائدة للوظائف ويمكنها

06:02.010 --> 06:04.060
مساعدتك في مواقف مثل هذه هنا ، حيث

06:04.060 --> 06:06.780
لن يكون TypeScript قادرًا على استنتاج نوع

06:06.780 --> 06:08.590
الإرجاع بشكل صحيح من تلقاء

06:08.590 --> 06:11.660
نفسه ، هنا يمكنك أن تكون واضحًا حقًا بشأن ما يتم

06:11.660 --> 06:16.033
إرجاعه للمجموعات المختلفة التي قد تدعمها وظيفتك.
