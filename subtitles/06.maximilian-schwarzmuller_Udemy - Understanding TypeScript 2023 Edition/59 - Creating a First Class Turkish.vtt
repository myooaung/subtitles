WEBVTT

00:02.270 --> 00:03.103
Eğitmen: Bunun için sizin

00:03.103 --> 00:04.620
için küçük bir başlangıç projem var.

00:04.620 --> 00:05.610
Ekte bulabilirsiniz.

00:05.610 --> 00:07.070
Tekrar tekrar kullandığımız

00:07.070 --> 00:08.810
aynı başlangıç projesi.

00:08.810 --> 00:12.080
Geliştirme sunucusunu npm-start ile başlatıyorsunuz

00:12.080 --> 00:15.510
ve ardından TypeScript derlemesini ayrı bir terminalde

00:15.510 --> 00:19.830
tsc-w ile izleme modunda başlattım.

00:19.830 --> 00:22.890
Yerleşik terminalimde iki sekme var.

00:22.890 --> 00:24.390
Biri, değişiklikleri izlemesi,

00:24.390 --> 00:26.070
sayfayı yeniden yüklemesi ve sunucuyu

00:26.070 --> 00:27.670
çalışır durumda tutması için

00:27.670 --> 00:30.720
çalışır durumda tutmanız gereken geliştirme sunucusuyla

00:30.720 --> 00:32.820
ve TypeScript derleme izleyicisini çalıştırdığım

00:32.820 --> 00:35.530
başka bir sekmeyle.

00:35.530 --> 00:36.930
Şimdi bununla uygulamada

00:36.930 --> 00:39.400
çalışabiliriz. ts dosyası şu anda boş ve

00:39.400 --> 00:41.520
orada biraz kod yazmaya başlayın ve hemen

00:41.520 --> 00:42.990
kullanabileceğimiz bir sınıf

00:42.990 --> 00:45.603
tanımlayarak başlamak istiyorum.

00:46.490 --> 00:49.420
Bunu class anahtar kelimesini kullanarak yaparız,

00:49.420 --> 00:51.340
aynen bunun gibi ve sonra sınıfın

00:51.340 --> 00:54.030
adını ve orada diyelim ki bir uygulama, bir web

00:54.030 --> 00:56.880
uygulaması, şirketimizde sahip olabileceğimiz

00:56.880 --> 01:00.700
farklı departmanlarımızı yönetmemizi sağlayan bir web aracı

01:00.700 --> 01:04.100
için bir kullanıcı arayüzü oluşturuyoruz.

01:04.100 --> 01:05.770
Belki de her ne olursa olsun

01:05.770 --> 01:08.440
bir tür şirket içi araç geliştiriyoruz ve orada

01:08.440 --> 01:11.290
birden fazla departmana ihtiyacımız var.

01:11.290 --> 01:13.790
Şimdi farklı departmanların verilerini

01:13.790 --> 01:16.320
yönetmek için nesneler kullanabiliriz

01:16.320 --> 01:19.960
ve daha sonra bu departman bilgilerini ekrana yansıtabilmek

01:19.960 --> 01:21.980
için her nesneye metotlar ekleyebiliriz

01:21.980 --> 01:24.020
ve hepsi aynı görünecek olan bu

01:24.020 --> 01:26.980
farklı departman nesnelerinin oluşturulmasını

01:26.980 --> 01:33.000
basitleştirmek için bir departman sınıfı oluşturabiliriz.

01:33.000 --> 01:35.690
Bu yüzden bu sınıfa Departman adını verebiliriz.

01:35.690 --> 01:36.830
İsim tamamen size kalmış.

01:36.830 --> 01:40.030
Kural, bunun bir sınıf olduğunu açıkça belirtmek

01:40.030 --> 01:42.720
için büyük harfle başlamasıdır.

01:42.720 --> 01:45.670
Şimdi, JavaScript geliştirmeyle daha uzun süredir ilgileniyorsanız,

01:45.670 --> 01:48.270
bu arada kurucu işlevler fikrini biliyor olabilirsiniz

01:48.270 --> 01:53.920
ve sonuçta sınıfların bunun için sözdizimsel şeker olduğunu söyleyebilirsiniz, ancak kodumuzu derlediğimizde

01:53.920 --> 01:56.980
bunu göreceğiz.

01:56.980 --> 01:59.220
Burada Department sınıfımız var ve

01:59.220 --> 02:02.080
şimdi burada bir name özelliğimiz olabilir.

02:02.080 --> 02:04.010
Bu şekilde, önünde herhangi

02:04.010 --> 02:07.290
bir let veya const olmadan, doğrudan sınıfa

02:07.290 --> 02:09.840
ekleyebilir ve ardından elbette buna

02:09.840 --> 02:12.550
bir tür de atayabilirsiniz.

02:12.550 --> 02:14.690
Bunu, buraya iki nokta üst üste ve ardından

02:14.690 --> 02:17.920
örneğin string türünü ekleyerek yaparsınız ve bu önemlidir.

02:17.920 --> 02:21.150
Bu bir nesne gibi görünebilir ancak bir nesne değildir.

02:21.150 --> 02:23.240
Bir nesnede, bir anahtar adı ve ardından anahtarın

02:23.240 --> 02:25.520
değerine sahip olmak için iki nokta üst üste ile anahtar-değer

02:25.520 --> 02:27.000
çiftleri kullanırsınız.

02:27.000 --> 02:28.810
Burada durum böyle değil.

02:28.810 --> 02:32.250
Bu, bir sınıfın sözde alanıdır.

02:32.250 --> 02:34.680
Küme parantezleriyle de bir sınıf oluşturursunuz,

02:34.680 --> 02:37.110
ancak burada bu bir anahtar-değer çifti değildir,

02:37.110 --> 02:41.040
bu sadece sınıfa dayalı olarak oluşturacağınız nesnede sahip olacağınız

02:41.040 --> 02:43.530
bir anahtarın adını tanımlar ve sonunda bu

02:43.530 --> 02:48.530
anahtarın tutacağı değer türünü tanımlarsınız.

02:48.550 --> 02:52.363
Burada = 'DEFAULT' ile bir başlangıç değeri de ayarlayabilirsiniz,

02:53.840 --> 02:55.920
ancak bunu yapmanıza gerek yoktur.

02:55.920 --> 02:59.050
Bunun yerine, sınıflarda yaygın olarak sahip olduğunuz

02:59.050 --> 03:03.410
bir başka şey, orada yöntem olarak adlandırılan özel bir işlevdir.

03:03.410 --> 03:06.780
Nesnelerdeki işlevler basitçe yöntem olarak adlandırılır

03:06.780 --> 03:09.410
ve bu da yapıcı yöntemdir.

03:09.410 --> 03:12.500
Bu şekilde ekleyebiliriz ve bu ayrılmış bir kelimedir.

03:12.500 --> 03:16.170
Kurucu, TypeScript ve modern JavaScript tarafından da

03:16.170 --> 03:18.390
anlaşılan ayrılmış bir anahtar kelimedir

03:18.390 --> 03:22.480
ve esasen bu sınıfa bağlı olan ve sınıfa dayalı olarak oluşturduğunuz

03:22.480 --> 03:25.840
herhangi bir nesneye bağlı olan ve nesne oluşturulurken

03:25.840 --> 03:29.640
çalıştırılan bir işlevdir.

03:29.640 --> 03:33.500
Yani bu, temelde oluşturduğunuz nesne için bazı başlatma çalışmaları

03:33.500 --> 03:35.700
yapmanıza olanak tanır.

03:35.700 --> 03:38.280
Şimdi orada bir argümanı kabul edebilirsiniz.

03:38.280 --> 03:41.910
Buna n adını verelim, bu da string türünde olabilir ve sonra

03:41.910 --> 03:45.620
bunu buradaki name alanınızda saklamak istersiniz ya da bunu

03:45.620 --> 03:47.000
this anahtar sözcüğüyle

03:47.000 --> 03:49.050
name'e ulaşarak ve içinde n'yi saklayarak

03:49.050 --> 03:51.200
yapabilirsiniz.

03:51.200 --> 03:55.200
Bunun yaptığı şey, name özelliğinin so özelliği olarak

03:55.200 --> 03:58.630
da adlandırılan name alanının değerini, bir departman

03:58.630 --> 04:01.180
nesnesi oluşturulduğunda n'de aldığınız

04:01.180 --> 04:04.550
değere ayarlamaktır.

04:04.550 --> 04:07.030
Şimdi böyle bir departman nesnesini nasıl oluşturabiliriz?

04:07.030 --> 04:08.890
Bundan daha kolay bir şey yok.

04:08.890 --> 04:13.110
TypeScript ve JavaScript'te de yerleşik olarak bulunan new anahtar

04:13.110 --> 04:16.200
sözcüğünü kullanarak oluşturduğunuz sınıfın dışında,

04:16.200 --> 04:18.410
sınıfın adını tekrarlarsınız, ardından

04:18.410 --> 04:20.160
parantezler eklersiniz ve

04:20.160 --> 04:22.440
bu yeni bir departman nesnesi oluşturur,

04:22.440 --> 04:26.240
ancak bu sınıfı new anahtar sözcüğüyle bu şekilde çalıştırdığınızda

04:26.240 --> 04:29.620
yapıcı bu noktada çağrılır ve buradaki yapıcı bir argüman,

04:29.620 --> 04:33.440
bir dize alır.

04:33.440 --> 04:35.600
Şimdi bu bölüm çağrısına kurucu

04:35.600 --> 04:39.800
argümanlarını bu parantezlerin arasından geçiriyorsunuz.

04:39.800 --> 04:41.640
Buraya Muhasebe adını verebiliriz

04:41.640 --> 04:44.730
çünkü belki de burada muhasebe departmanını kuruyoruz.

04:44.730 --> 04:46.100
Şimdi bu, bu planı temel

04:46.100 --> 04:49.800
alan yeni bir JavaScript nesnesi oluşturacaktır.

04:49.800 --> 04:58.010
Şimdi bunu örneğin bir sabitte ve ardından konsolda saklayabiliriz.

04:58.010 --> 04:58.010
Log. ne elde ettiğimizi görmek için burayı muhasebeleştirin.

04:58.010 --> 04:59.620
Şimdi bunu kaydedip sayfamıza

04:59.620 --> 05:02.020
geri dönersek ve burada def araçlarında

05:02.020 --> 05:03.780
geliştirme konsoluna bakarsak,

05:03.780 --> 05:05.660
burada Departman nesnemiz

05:05.660 --> 05:07.930
olmalıdır.

05:07.930 --> 05:10.000
Bu normal bir JavaScript nesnesidir,

05:10.000 --> 05:13.770
sadece kendisine eklenmiş bir Departman tipi vardır ve sonuçta

05:13.770 --> 05:15.290
bir anahtar-değer çiftine

05:15.290 --> 05:18.140
sahip bir nesnedir, burada anahtar isimdir çünkü

05:18.140 --> 05:20.270
yukarıda tanımladığımız şey budur

05:20.270 --> 05:23.110
ve değer de Muhasebe'dir.

05:23.110 --> 05:25.530
Burada bu Muhasebe değerine sahibiz

05:25.530 --> 05:27.460
çünkü bunu yapıcıya bir argüman

05:27.460 --> 05:29.560
olarak aktarıyoruz.

05:29.560 --> 05:31.770
Orada böyle bir dizeyi kabul ediyoruz,

05:31.770 --> 05:34.830
bu alandaki değeri geri yüklüyoruz ve alanlar

05:34.830 --> 05:38.400
sonunda sadece özelliklere çevriliyor, sınıfa dayalı

05:38.400 --> 05:41.890
nesne bundan sonra orada olacak.

05:41.890 --> 05:44.480
Basit bir sınıfı nasıl oluşturabileceğimiz ve genel fikrin

05:44.480 --> 05:46.570
ne olduğu bu şekilde açıklanabilir.

05:46.570 --> 05:50.143
Şimdi JavaScript'te gerçekte ne elde ettiğimizi görelim.
