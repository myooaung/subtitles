WEBVTT

00:02.220 --> 00:03.760
Instructeur: Het laatste interessante

00:03.760 --> 00:07.490
type dat ik in deze module wil laten zien is het nooit type.

00:07.490 --> 00:10.660
Nu zagen we een functie die leegte teruggaf.

00:10.660 --> 00:13.058
Dus dat levert nooit iets op.

00:13.058 --> 00:17.380
Nooit is een ander type functies kan terugkeren.

00:17.380 --> 00:19.240
En dat klinkt misschien vreemd.

00:19.240 --> 00:21.110
Laten we eens kijken hoe het werkt.

00:21.110 --> 00:24.662
Laten we zeggen dat we een functie generateError hebben.

00:24.662 --> 00:28.280
Hier verwacht ik een bericht te krijgen, dat een string is,

00:28.280 --> 00:31.610
en misschien een foutcode, die een getal kan zijn.

00:31.610 --> 00:33.700
Laten we zeggen dat we in deze functies

00:33.700 --> 00:35.130
een fout gooien.

00:35.130 --> 00:37.760
Dit moet dus in wezen een nutsfunctie

00:37.760 --> 00:41.500
zijn die foutobjecten genereert en ze weggooit.

00:41.500 --> 00:42.990
Dus hier zouden we een object kunnen gooien,

00:42.990 --> 00:44.380
wat we kunnen doen in JavaScript.

00:44.380 --> 00:47.366
We kunnen elk object of elke waarde als fout gooien,

00:47.366 --> 00:49.930
en dat moet een message property hebben,

00:49.930 --> 00:53.990
waarin ik de waarde van mijn message argument hier opsla.

00:53.990 --> 00:56.390
En ik wil een foutcode eigenschap hebben,

00:56.390 --> 00:59.417
laten we zeggen wis het woord, het code argument in .

01:00.330 --> 01:02.390
Zo is het ook met de ongeldige

01:02.390 --> 01:06.600
functie, en die kunnen we bijvoorbeeld aanroepen met een

01:06.600 --> 01:09.640
opgetreden fout en een code van 500.

01:09.640 --> 01:12.213
Als we dat doen, en we compileren dit bestand

01:14.120 --> 01:17.080
hier, zien we dat zodra dit herlaadt we onze fout krijgen,

01:17.080 --> 01:19.150
nou ja als een fout hier.

01:19.150 --> 01:21.670
En dit klinkt misschien nogal abstract, maar dat

01:21.670 --> 01:22.850
is het eigenlijk niet.

01:22.850 --> 01:24.640
Zulke utiliteitsfuncties zouden

01:24.640 --> 01:27.850
vrij standaard zijn in grotere toepassingen waar je niet

01:27.850 --> 01:30.270
handmatig een fout wilt gooien op 10 verschillende

01:30.270 --> 01:32.540
plaatsen in je app, en waar je één handige

01:32.540 --> 01:35.380
functie wilt bereiken die het foutobject voor je

01:35.380 --> 01:37.450
bouwt en misschien ook meteen gooit,

01:37.450 --> 01:39.350
zodat je deze functie kunt aanroepen

01:39.350 --> 01:42.300
met verschillende ingangen, maar er altijd een fout

01:42.300 --> 01:44.690
wordt gegooid.

01:44.690 --> 01:47.010
Het interessante aan deze functie is dat hij

01:47.010 --> 01:49.048
niet zomaar een leegte teruggeeft.

01:49.048 --> 01:52.385
Ik kan eigenlijk wel aangeven dat het void retourneert,

01:52.385 --> 01:54.545
want natuurlijk retourneert het niets,

01:54.545 --> 01:58.030
maar eigenlijk retourneert het niet zomaar niets, als

01:58.030 --> 02:02.630
we helemaal eerlijk zijn, retourneert deze functie nooit.

02:02.630 --> 02:05.518
Deze functie produceert nooit een retourwaarde.

02:05.518 --> 02:08.860
Als ik zou proberen om de terugkeerwaarde hier te

02:08.860 --> 02:11.193
herstellen, in een console log resultaat,

02:12.040 --> 02:16.240
en ik compileer dan mijn code in deze execute, zien we dat er hier

02:16.240 --> 02:19.630
geen undefined wordt gelogd, want omdat er een fout

02:19.630 --> 02:22.220
wordt gegooid, crasht dit in wezen ons

02:22.220 --> 02:25.330
script, zou je kunnen zeggen.

02:25.330 --> 02:27.080
Het annuleert ons script.

02:27.080 --> 02:30.290
En dit zal altijd het geval zijn voor deze functie.

02:30.290 --> 02:32.210
Natuurlijk kunnen we het verpakken in try

02:32.210 --> 02:34.260
catch, zodat we toch verder kunnen in dit script,

02:34.260 --> 02:37.620
maar deze functie produceert in wezen nooit een waarde.

02:37.620 --> 02:41.060
Deze functie crasht altijd het script of

02:41.060 --> 02:42.910
dit deel van het script,

02:42.910 --> 02:44.720
als u try catch gebruikt,

02:44.720 --> 02:47.910
en geeft dus nooit iets terug.

02:47.910 --> 02:50.400
En daarom is het terugkeertype van deze

02:50.400 --> 02:54.483
functie eigenlijk niet alleen nietig, maar ook nooit.

02:55.710 --> 02:56.700
Het interessante is,

02:56.700 --> 02:59.060
dat als je er overheen gaat zonder nooit toe te

02:59.060 --> 03:01.680
wijzen, je ziet dat het afgeleide type leeg is.

03:01.680 --> 03:05.410
Alls omdat never een nieuwer type is, het bestaat al een tijdje,

03:05.410 --> 03:07.060
maar het was niet ingebouwd

03:07.060 --> 03:10.000
in de eerste versies van TypeScript, en daarom wordt

03:10.000 --> 03:12.620
void typisch aangenomen, en het is niet verschrikkelijk

03:12.620 --> 03:15.417
om het daarbij te laten.

03:15.417 --> 03:17.740
Maar u kunt heel duidelijk zijn en expliciet

03:17.740 --> 03:21.470
never als retourneertype instellen om echt duidelijk te

03:21.470 --> 03:24.490
maken dat dit nooit iets teruggeeft.

03:24.490 --> 03:26.770
Dus vanuit het oogpunt van code-kwaliteit

03:26.770 --> 03:29.560
kan dit duidelijker zijn over uw bedoelingen en het

03:29.560 --> 03:30.680
echt duidelijk maken

03:30.680 --> 03:32.330
aan onze ontwikkelaars die uw

03:32.330 --> 03:35.850
code lezen dat deze functie bedoeld is om nooit iets terug te geven,

03:35.850 --> 03:39.560
en in wezen uw script, of dat deel van het script, te laten crashen of

03:39.560 --> 03:40.954
breken.

03:40.954 --> 03:43.890
Een andere functie die nooit zou terugkeren,

03:43.890 --> 03:47.190
is trouwens een functie met een oneindige lus.

03:47.190 --> 03:49.370
Dus als we daar while (true) in hebben,

03:49.370 --> 03:51.060
creëert dat een oneindige lus,

03:51.060 --> 03:52.790
en dat zou dus ook een functie zijn

03:52.790 --> 03:54.410
die nooit terugkeert.

03:54.410 --> 03:56.070
De foutfunctie hier, of de functie

03:56.070 --> 03:58.852
die een bevroren fout genereert, is echter waarschijnlijk

03:58.852 --> 04:01.305
het meer gebruikelijke gebruik.

04:01.305 --> 04:04.500
Dus nooit, ook een interessant type, dat je kunt

04:04.500 --> 04:06.230
gebruiken op functies voor

04:06.230 --> 04:08.553
gevallen als deze hier.
