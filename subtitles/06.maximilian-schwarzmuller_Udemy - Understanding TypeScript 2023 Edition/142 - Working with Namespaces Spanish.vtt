WEBVTT

00:02.190 --> 00:04.860
-: Quiero empezar con la función de espacio de nombres.

00:04.860 --> 00:06.810
Ahora para mostrarte cómo funciona,

00:06.810 --> 00:09.980
voy a coger estas dos interfaces aquí.

00:09.980 --> 00:11.480
Las interfaces de arrastrar y soltar,

00:11.480 --> 00:14.140
cortarlas de la aplicación. ts y añadir un nuevo

00:14.140 --> 00:19.140
archivo, dragdropinterfaces. t por ejemplo.

00:21.270 --> 00:25.180
Ahora podemos pegarlo allí y ahora para usar espacios de nombres,

00:25.180 --> 00:29.140
todo lo que tenemos que hacer es añadir la palabra clave namespace

00:31.645 --> 00:33.620
y luego llaves.

00:33.620 --> 00:35.880
Ahora también tenemos que dar un nombre a este

00:35.880 --> 00:39.590
espacio de nombres y aquí lo llamaré Interfaces DD para un arrastre,

00:39.590 --> 00:41.660
aunque el nombre depende de ti.

00:41.660 --> 00:43.640
Ahora, este año es una característica de

00:43.640 --> 00:45.250
TypeScript, no de JavaScript.

00:45.250 --> 00:47.750
No se compila en Vanilla JavaScript porque

00:47.750 --> 00:50.340
no hay un equivalente directo para él.

00:50.340 --> 00:54.860
En su lugar, TypeScript básicamente lo compilará en un objeto que podríamos

00:54.860 --> 00:55.693
decir.

00:55.693 --> 00:57.490
A un objeto donde las cosas que

00:57.490 --> 01:00.440
pondrás en el espacio de nombres entonces se almacenan

01:00.440 --> 01:02.140
en propiedades, pero no tendrás

01:02.140 --> 01:06.960
que preocuparte de eso porque toda la resolución de acceso a estas propiedades

01:06.960 --> 01:10.640
y que todo funcione se encargará de TypeScript.

01:10.640 --> 01:13.940
Así que ahora podemos mover estas interfaces al espacio de nombres

01:13.940 --> 01:16.130
y con eso casi hemos terminado.

01:16.130 --> 01:18.040
Ahora tenemos un problema, sin embargo,

01:18.040 --> 01:22.280
estas interfaces sólo están disponibles en este espacio de nombres.

01:22.280 --> 01:23.113
Por cierto, no

01:23.113 --> 01:25.530
sólo puedes poner interfaces en un espacio

01:25.530 --> 01:27.070
de nombres, puedes poner cualquier

01:27.070 --> 01:28.057
cosa ahí, clases,

01:28.057 --> 01:30.780
constantes, lo que quieras.

01:30.780 --> 01:33.900
Todo lo que quieras puede ser puesto en un espacio de nombres.

01:33.900 --> 01:35.630
Así que básicamente puedes envolver un espacio de nombres

01:35.630 --> 01:37.150
alrededor de cualquier código que tengas.

01:37.150 --> 01:39.830
Pero el problema que tenemos es que estas características,

01:39.830 --> 01:41.140
estas interfaces aquí sólo

01:41.140 --> 01:44.800
están disponibles dentro de ese espacio de nombres.

01:44.800 --> 01:47.280
Ahora, como ves, no tenemos nada más allí.

01:47.280 --> 01:49.010
Ahora, por supuesto, podríamos traer

01:49.010 --> 01:51.600
el código que depende de ellos de nuevo en este espacio

01:51.600 --> 01:53.370
de nombres, pero entonces de nuevo nos

01:53.370 --> 01:56.960
soplaría a esto porque resulta que tenemos una clase bastante larga que

01:56.960 --> 01:58.940
depende de estas interfaces.

01:58.940 --> 02:02.900
Tenemos la clase de lista de proyectos y la clase de elementos de proyectos.

02:02.900 --> 02:05.260
Dependen de estas interfaces, por lo que

02:05.260 --> 02:08.922
tendríamos que añadir muchas cosas a ese espacio de nombres.

02:08.922 --> 02:10.205
Por lo tanto, lo que puedes

02:10.205 --> 02:14.210
hacer es añadir la palabra clave export delante de una interfaz para exportar

02:14.210 --> 02:16.850
una característica de un espacio de nombres.

02:16.850 --> 02:19.680
Lo que esto significa es que ahora estas interfaces están

02:19.680 --> 02:22.110
disponibles dentro de este espacio de nombres,

02:22.110 --> 02:24.487
pero también fuera de este archivo.

02:24.487 --> 02:26.100
Y veremos cómo funciona esto en

02:26.100 --> 02:28.510
un segundo, pero con eso hacemos esta interfaz

02:28.510 --> 02:30.710
o lo que sea que estemos exportando.

02:30.710 --> 02:32.815
Esto no se limita a las interfaces,

02:32.815 --> 02:36.610
por supuesto, disponibles fuera de este archivo también si

02:36.610 --> 02:41.140
entonces básicamente importar o utilizar ese espacio de nombres.

02:41.140 --> 02:41.973
Y, por supuesto, de nuevo

02:41.973 --> 02:44.580
no se puede exportar sólo interfaces en un espacio de nombres, sino

02:44.580 --> 02:45.636
cualquier cosa.

02:45.636 --> 02:48.010
Ahora con eso, la pregunta es, ¿cómo importamos

02:48.010 --> 02:50.310
este espacio de nombres ahora de nuevo en la

02:50.310 --> 02:52.410
aplicación. y para ello, TypeScript

02:52.410 --> 02:56.210
tiene una sintaxis especial que puedes utilizar.

02:56.210 --> 02:57.867
Volvamos a la parte superior de la aplicación. ts y ahora aquí añades

02:57.867 --> 03:01.440
tres barras inclinadas, importantes tres, no sólo dos porque

03:01.440 --> 03:03.690
esto no es en realidad un comentario normal

03:03.690 --> 03:06.150
lo que estamos creando ahora esto será en realidad

03:06.150 --> 03:07.330
la sintaxis recogida

03:07.330 --> 03:10.280
por TypeScript un comentario especial, se podría decir

03:10.280 --> 03:13.110
que TypeScript entiende si comienza con tres barras

03:13.110 --> 03:15.500
inclinadas.

03:15.500 --> 03:19.301
Allí se escribe una etiqueta XML de auto-cierre, por lo

03:19.301 --> 03:21.600
que la apertura de corchete angular,

03:21.600 --> 03:24.530
a continuación, barra diagonal de cierre

03:24.530 --> 03:25.790
corchete angular

03:25.790 --> 03:29.220
y en su ruta de referencia es igual y luego aquí el nombre

03:29.220 --> 03:32.370
del archivo que desea importar.

03:32.370 --> 03:35.217
En mi caso aquí dragdropinterfaces. ts.

03:39.330 --> 03:42.550
Ahora, esto es entendido y recogido por TypeScript porque como

03:42.550 --> 03:45.220
mencioné con las tres barras iniciales, es una sintaxis

03:45.220 --> 03:47.560
especial que TypeScript entiende al igual que

03:47.560 --> 03:50.110
entiende esto de las referencias.

03:50.110 --> 03:51.960
Esto no es Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript no se da

03:53.970 --> 03:58.480
cuenta y esto no es lo que se verá una vez que se compila.

03:58.480 --> 04:00.430
Ahora bien, ¿qué es lo que consigue?

04:00.430 --> 04:05.070
Con esto se consigue que ahora este espacio de nombres DD Interfaces esté disponible

04:05.070 --> 04:07.104
en la app. ts.

04:07.104 --> 04:08.920
Sin embargo, si se desplaza hacia abajo,

04:08.920 --> 04:11.040
se ve mi editores todavía se queja y si tratamos

04:11.040 --> 04:12.250
de guardarlo como todos lo

04:12.250 --> 04:14.300
hacemos buenos errores de compilación.

04:14.300 --> 04:16.410
Por lo tanto, no parece estar disponible.

04:16.410 --> 04:19.730
La interfaz de arrastre no parece estar disponible aquí.

04:19.730 --> 04:22.386
Bueno, hay una cosa especial sobre los espacios de nombres.

04:22.386 --> 04:25.840
Puedes usarlos para dividir tu código y recuerda cuando dije

04:25.840 --> 04:27.930
antes que lo que tienes en un espacio

04:27.930 --> 04:29.610
de nombres puede ser usado desde

04:29.610 --> 04:32.557
cualquier parte de ese espacio de nombres.

04:32.557 --> 04:34.157
Bueno, resulta que puedes dividir

04:34.157 --> 04:37.580
los espacios de nombres entre varios archivos exportando cosas

04:37.580 --> 04:39.110
en un espacio de nombres y luego

04:39.110 --> 04:42.330
usando esta sintaxis especial de importación, pero luego

04:42.330 --> 04:45.230
tienes que poner las cosas que quieren usar algo de ese

04:45.230 --> 04:48.250
espacio de nombres de importación o de ese archivo importado

04:48.250 --> 04:51.797
en el mismo espacio de nombres.

04:51.797 --> 04:55.050
De ahí que tal vez DD Interfaces no sea el mejor nombre.

04:55.050 --> 04:58.010
Tal vez sólo nombramos como App.

04:58.010 --> 04:59.740
Ahora, si nombramos como aplicación aquí, podemos

04:59.740 --> 05:01.670
ir a la aplicación. ts y crear un espacio

05:01.670 --> 05:04.180
de nombres del mismo nombre aquí, namespace

05:04.180 --> 05:05.630
App.

05:05.630 --> 05:06.890
Y ahora por el momento,

05:06.890 --> 05:10.750
vamos a poner todo aquí en ese espacio de nombres y ahora ves que

05:10.750 --> 05:12.610
el error se ha ido No hay puntos

05:12.610 --> 05:14.300
rojos a la derecha.

05:14.300 --> 05:15.513
Sin embargo, si guardo

05:15.513 --> 05:17.850
eso, seguiré teniendo errores aquí.

05:17.850 --> 05:22.850
Por ejemplo, esa lista de proyectos terminados no se utiliza.

05:25.010 --> 05:26.300
Bueno, eso es correcto

05:26.300 --> 05:28.210
no estoy usando eso.

05:28.210 --> 05:29.600
Yo tampoco lo necesito,

05:29.600 --> 05:32.610
así que podemos eliminar estos conceptos aquí.

05:32.610 --> 05:35.190
Con eso, si guardamos esto,

05:35.190 --> 05:38.040
ahora se compila sin errores.

05:38.040 --> 05:39.880
La pregunta es simplemente cuál es

05:39.880 --> 05:41.920
el resultado de esta compilación.

05:41.920 --> 05:44.260
¿Tenemos ahora uno o dos archivos?

05:44.260 --> 05:46.170
Bueno, vamos a echar un vistazo a la carpeta

05:46.170 --> 05:49.380
del disco y ahí ves que tienes un archivo JS de la aplicación y

05:49.380 --> 05:50.780
luego algo de código aquí y

05:50.780 --> 05:53.980
un archivo JS de la interfaz de arrastrar y soltar.

05:53.980 --> 05:56.690
Así que tenemos dos archivos como resultado.

05:56.690 --> 05:59.500
Ahora, el archivo de interfaz de Dragon Drop está bastante

05:59.500 --> 06:00.830
vacío porque has aprendido

06:00.830 --> 06:04.360
que las interfaces básicamente no se compilan en nada.

06:04.360 --> 06:07.300
No existe un equivalente en JavaScript para una interfaz.

06:07.300 --> 06:09.270
Es una característica pura de TypeScript.

06:09.270 --> 06:12.370
Así que podemos importarlo con la sintaxis de TypeScript

06:12.370 --> 06:15.509
aquí para usarlo y obtener todas las mejoras de tipo que

06:15.509 --> 06:17.300
aprendimos pero en producción no

06:17.300 --> 06:20.060
importa si está en un archivo separado o no.

06:20.060 --> 06:21.840
Así que, por supuesto, la pregunta

06:21.840 --> 06:26.380
es qué pasa si ahora ponemos algo que existe en producción, que existe

06:26.380 --> 06:28.630
en JavaScript también en un archivo

06:28.630 --> 06:30.000
separado.

06:30.000 --> 06:33.373
Por ejemplo, hace enum y la clase de proyecto aquí,

06:35.520 --> 06:36.470
voy a agarrar

06:36.470 --> 06:37.610
ambos, crear un

06:37.610 --> 06:41.410
nuevo archivo, proyecto de tablero modelo TS y poner

06:41.410 --> 06:46.040
mi estado de proyecto enum y clase de proyecto allí.

06:46.040 --> 06:47.420
Ahora, al igual que antes, podemos

06:47.420 --> 06:49.070
añadir un espacio de nombres aquí, el

06:49.070 --> 06:50.590
nombre tiene que ser App, por lo que

06:50.590 --> 06:51.790
tiene que ser hecho espacio

06:51.790 --> 06:54.020
de nombres donde luego también queremos utilizarlo

06:54.020 --> 06:57.340
y tenemos que exportar estas características en allí, para que podamos

06:57.340 --> 07:00.440
utilizarlos en otros archivos en el mismo espacio de nombres, pero

07:00.440 --> 07:02.640
un otros archivos también.

07:02.640 --> 07:03.980
Ahora de vuelta en la aplicación. ts, tenemos que

07:03.980 --> 07:05.900
importar ese segundo archivo.

07:05.900 --> 07:07.890
Así que voy a duplicar esta importación

07:07.890 --> 07:11.515
y todo el proyecto de importación dash modelo ts.

07:11.515 --> 07:13.800
si guardé eso y ahora se compila y vemos

07:13.800 --> 07:16.610
un modelo de proyecto de archivo JavaScript.

07:16.610 --> 07:18.184
Y ahí, vemos algo

07:18.184 --> 07:19.490
de código.

07:19.490 --> 07:22.770
La pregunta es: ¿funciona ahora nuestra aplicación?

07:22.770 --> 07:24.620
Para ello, vamos a recargarlo

07:25.480 --> 07:27.587
y vamos a intentar añadir un proyecto

07:27.587 --> 07:29.903
aquí y ya ves, nos da un error.

07:29.903 --> 07:33.183
No se puede leer la propiedad active de undefined.

07:34.120 --> 07:36.090
La razón es simplemente que nuestros

07:36.090 --> 07:38.854
archivos se compilan de forma independiente.

07:38.854 --> 07:41.410
Los espacios de nombres existen en el mundo de TypeScript

07:41.410 --> 07:44.640
como he dicho, no hay una equivalencia de JavaScript para ello.

07:44.640 --> 07:47.430
Así que el problema que tenemos aquí es que en el mundo de TypeScript,

07:47.430 --> 07:48.263
todo es genial porque

07:48.263 --> 07:51.610
TypeScript es capaz de encontrar todas las cosas que necesitamos.

07:51.610 --> 07:52.800
Por ejemplo, cuando digo

07:52.800 --> 07:54.420
proyecto aquí, cuando hice referencia

07:54.420 --> 07:56.310
al tipo de proyecto aquí en la clase

07:56.310 --> 07:58.130
de estado del proyecto, este tipo

07:58.130 --> 07:59.310
de proyecto, esta clase

07:59.310 --> 08:00.610
de proyecto se define en

08:00.610 --> 08:02.840
el modelo de proyecto.

08:02.840 --> 08:06.020
Ahora TypeScript no se queja de su incompletud porque

08:06.020 --> 08:07.570
importamos ese modelo, pero

08:07.570 --> 08:10.250
importar aquí realmente sólo significa que le

08:10.250 --> 08:13.960
decimos a TypeScript dónde encontrar ese tipo una vez que se compila

08:13.960 --> 08:15.810
a JavaScript, la desconexión es

08:15.810 --> 08:18.150
básicamente destruida.

08:18.150 --> 08:20.840
Así que en el código JavaScript cuando se ejecuta y

08:20.840 --> 08:23.230
cuando luego tratamos de crear un nuevo proyecto

08:23.230 --> 08:25.130
mediante la instanciación de proyecto,

08:25.130 --> 08:27.430
JavaScript no encuentra esta clase de proyecto

08:27.430 --> 08:29.610
o función constructora.

08:29.610 --> 08:32.980
Así que tenemos que asegurarnos de llevar a cabo la desconexión.

08:32.980 --> 08:35.420
Y para ello podemos ir al TS (murmullos)

08:35.420 --> 08:39.640
y allí establecer esta opción de archivo de salida.

08:39.640 --> 08:40.740
Podemos comentar

08:40.740 --> 08:43.010
esto y la idea detrás del archivo

08:43.010 --> 08:45.540
out es que le dices a TypeScript que debe

08:45.540 --> 08:48.620
concatenar los espacios de nombres.

08:48.620 --> 08:49.670
Así que estas referencias,

08:49.670 --> 08:51.740
que tiene durante la compilación en un

08:51.740 --> 08:53.950
solo archivo de JavaScript en lugar de compilar

08:53.950 --> 08:56.970
varios archivos de JavaScript.

08:56.970 --> 08:59.210
Así que aquí para el archivo de salida podemos decir

08:59.210 --> 09:02.350
que queremos tener un archivo en la carpeta del disco, que nombramos

09:02.350 --> 09:04.770
tal vez bundle. js Y si lo hacemos y

09:05.630 --> 09:07.050
lo guardamos, obtendremos

09:07.050 --> 09:08.700
un error aquí.

09:09.650 --> 09:10.710
Obtendremos un error

09:12.300 --> 09:14.410
de que sólo se admiten módulos de AMD

09:14.410 --> 09:17.250
y del sistema junto a nuestro archivo.

09:17.250 --> 09:19.540
Ahora, no necesitamos entender todo aquí

09:19.540 --> 09:23.160
Hay básicamente diferentes maneras de cargar o agrupar diferentes

09:23.160 --> 09:26.120
archivos JavaScript en uno por razones históricas y

09:26.120 --> 09:28.770
cómo se desarrolla todo y usted puede aprender más

09:28.770 --> 09:31.250
acerca de estos diferentes tipos de paquetes

09:31.250 --> 09:33.700
en un recurso adjunto si lo desea, no es necesario

09:33.700 --> 09:35.340
sin embargo.

09:35.340 --> 09:36.800
Así que básicamente lo que tenemos

09:36.800 --> 09:38.120
que hacer aquí es que tenemos

09:38.120 --> 09:40.470
que establecer el módulo que ya se destaca como

09:40.470 --> 09:41.598
un error aquí, no a JS común,

09:41.598 --> 09:43.943
pero a AMD, por ejemplo.

09:45.400 --> 09:47.700
Si hacemos eso, compila sin problemas

09:47.700 --> 09:50.010
aunque sigue quejándose aquí, pero

09:50.010 --> 09:52.140
no ha detectado que lo he cambiado

09:52.140 --> 09:53.860
y ahora lo que ocurre es que hay

09:53.860 --> 09:56.570
un nuevo archivo bundle JS en dist.

09:56.570 --> 10:00.310
Si elimino todos los archivos de JavaScript en la carpeta

10:00.310 --> 10:04.680
del disco y reinicio mi TSC dash procesamos por lo que el compilador

10:04.680 --> 10:05.580
verá sólo ese

10:05.580 --> 10:08.600
archivo JS paquete se genera.

10:08.600 --> 10:11.530
Este archivo contendrá todo nuestro código en

10:11.530 --> 10:13.250
la versión compilada y traducida

10:13.250 --> 10:15.400
y por lo tanto ahora en el HTML del índice,

10:15.400 --> 10:20.300
sólo tenemos que importar bundle JS aquí en lugar de App JS.

10:20.300 --> 10:23.610
Y si lo hacemos y recargamos aquí, volvemos a tener una aplicación

10:23.610 --> 10:25.830
que funciona y en la que podemos usar la

10:25.830 --> 10:28.260
función de arrastrar y soltar todo porque

10:28.260 --> 10:30.410
ahora está todo en un solo archivo, pero

10:30.410 --> 10:32.661
sólo en el resultado final.

10:32.661 --> 10:34.230
Durante el desarrollo, tenemos

10:34.230 --> 10:36.260
estos espacios de nombres aquí,

10:36.260 --> 10:39.030
que es un paso en la dirección correcta porque

10:39.030 --> 10:41.970
ya es como un poco más manejable.

10:41.970 --> 10:44.350
Ahora vamos a dividir esto en aún más archivos

10:44.350 --> 10:47.250
antes de echar un vistazo a la opción de división media

10:47.250 --> 10:48.283
módulos TS.
