WEBVTT

00:02.060 --> 00:04.880
Uomo: In qualche modo collegati all'operatore di diffusione

00:04.880 --> 00:07.060
sono i parametri di riposo.

00:07.060 --> 00:10.374
Per questo, modificherò nuovamente la mia funzione di aggiunta.

00:10.374 --> 00:13.870
Quindi commenterò tutto il codice qui sopra, in modo

00:13.870 --> 00:15.780
da non interrompere nulla.

00:15.780 --> 00:20.520
E aggiungere nuovamente la mia funzione add con la sintassi desiderata, con la parola del

00:20.520 --> 00:22.760
tasto funzione come funzione freccia, come

00:22.760 --> 00:23.830
si desidera.

00:23.830 --> 00:26.360
Ma ora voglio avere una funzione speciale.

00:26.360 --> 00:29.100
Non voglio limitarmi a due valori, ma voglio

00:29.100 --> 00:31.340
poter aggiungere tutti i valori che

00:31.340 --> 00:33.290
l'utente inserisce.

00:33.290 --> 00:37.700
In questo modo possiamo chiamare add in questo modo,

00:37.700 --> 00:42.700
cinque, dieci, due, tre punti sette e così via, con tutti i valori

00:42.880 --> 00:44.530
che vogliamo.

00:44.530 --> 00:46.691
Se si desidera chiamarlo con 10 valori, dovrebbe

00:46.691 --> 00:48.090
essere possibile.

00:48.090 --> 00:51.160
Naturalmente, però, in questo momento non è possibile, come

00:51.160 --> 00:52.600
si può chiaramente vedere.

00:52.600 --> 00:54.290
Typescript mi dà un errore, e correttamente,

00:54.290 --> 00:57.760
perché non sto accettando alcun argomento.

00:57.760 --> 01:00.336
Ovviamente potrei accettare gli argomenti e assegnare

01:00.336 --> 01:02.210
i tipi corretti, ma cosa succede se

01:02.210 --> 01:04.300
poi lo chiamo con cinque.

01:04.300 --> 01:06.330
Come ho detto, voglio essere flessibile.

01:06.330 --> 01:08.850
È qui che entrano in gioco i parametri di riposo.

01:08.850 --> 01:13.111
Nel punto in cui ci si aspetta un elenco di valori, quindi non

01:13.111 --> 01:15.270
dove si vuole passarlo, ma dove

01:15.270 --> 01:18.308
si vuole accettarlo come valore in arrivo,

01:18.308 --> 01:20.360
si possono anche usare i tre

01:20.360 --> 01:24.043
punti e poi un nome a scelta, come numeri.

01:25.630 --> 01:27.430
Ora, ciò che farà è

01:27.430 --> 01:31.470
unire tutti i parametri in entrata, o in

01:31.470 --> 01:34.920
generale l'elenco di valori in entrata,

01:34.920 --> 01:39.350
separati da virgole, in un array.

01:39.350 --> 01:40.940
Quindi i numeri qui saranno un array,

01:40.940 --> 01:44.460
ma ovviamente di default un tipo di valori qualsiasi, quindi un array

01:44.460 --> 01:46.920
pieno di valori qualsiasi, e non è quello che dovremmo

01:46.920 --> 01:49.680
fare, dovremmo essere più espliciti.

01:49.680 --> 01:53.200
E qui potremmo dire: "Sarà una matrice di numeri. Così.

01:53.200 --> 01:54.430
Ora abbiamo definito il tipo corretto

01:54.430 --> 01:56.420
e possiamo lavorare con l'array di numeri.

01:56.420 --> 01:58.710
Ora possiamo riassumere il tutto in un paio di modi diversi.

01:58.710 --> 02:01.880
Possiamo lavorare con una variabile risultato e poi con un ciclo

02:01.880 --> 02:04.110
a quattro, perché i numeri sono un array.

02:04.110 --> 02:06.863
Quindi si potrebbe eseguire un ciclo di numeri

02:06.863 --> 02:09.260
e aggiungerli al risultato.

02:09.260 --> 02:11.519
Oppure utilizziamo il metodo reduce, disponibile per gli array.

02:11.519 --> 02:15.620
Reduce funziona in modo tale da eseguire un'operazione su ogni

02:15.620 --> 02:19.030
elemento di un array, restituire un risultato e quindi

02:19.030 --> 02:20.940
sommare i risultati.

02:20.940 --> 02:24.310
Per questo si fornisce una funzione di riduzione e un valore

02:24.310 --> 02:27.160
di partenza, che in questo caso è zero.

02:27.160 --> 02:31.093
E poi questa funzione, che si passa a ridurre, prende due

02:31.093 --> 02:33.430
argomenti e questo è il risultato

02:33.430 --> 02:35.920
corrente, si potrebbe dire.

02:35.920 --> 02:38.968
È il valore corrente che stiamo osservando,

02:38.968 --> 02:42.640
che sarà ogni valore dell'array ones.

02:42.640 --> 02:45.350
E poi si può restituire cuResult, che per la

02:45.350 --> 02:48.290
prima esecuzione sarà il valore iniziale.

02:48.290 --> 02:51.497
Più curValue.

02:51.497 --> 02:52.703
E se lo si fa, la riduzione complessiva restituirà un numero.

02:53.859 --> 02:57.920
Quindi qui possiamo restituire il risultato di numeri ridotti

02:57.920 --> 03:01.160
e quindi la variabile add, o costante in questo caso,

03:01.160 --> 03:04.790
alla fine conterrà una funzione che prende una coppia di

03:04.790 --> 03:07.320
numeri, non un array di numeri.

03:07.320 --> 03:10.650
Ma a causa dei parametri restanti, un elenco di numeri, che

03:10.650 --> 03:13.690
viene poi unito in un array all'interno della funzione

03:13.690 --> 03:16.510
e che alla fine restituisce il numero.

03:16.510 --> 03:18.550
Quindi, per ora, se salviamo tutto, dovrebbe

03:18.550 --> 03:20.350
funzionare e vedremo il risultato,

03:20.350 --> 03:23.350
la somma della nostra piccola addizione.

03:23.350 --> 03:26.250
Ecco i parametri di riposo, una funzione

03:26.250 --> 03:28.430
davvero utile per accettare una

03:28.430 --> 03:31.400
quantità illimitata di argomenti.

03:31.400 --> 03:34.210
E un paio di metodi integrati, come il metodo push,

03:34.210 --> 03:36.680
funzionano esattamente in questo modo.

03:36.680 --> 03:38.540
Vedete, push ha questa strana definizione di parametro.

03:38.540 --> 03:42.560
È esattamente quello che abbiamo appena appreso.

03:42.560 --> 03:44.250
Push qui prende un paio di

03:44.250 --> 03:48.490
elementi per questo array, che è un array pieno di stringhe.

03:48.490 --> 03:50.400
Ci vogliono un paio di corde.

03:50.400 --> 03:51.730
E questo non significa che

03:51.730 --> 03:54.060
prende un array di stringhe, ma invece qui con

03:54.060 --> 03:56.400
i parametri restanti, un elenco di stringhe separate

03:56.400 --> 03:58.580
da virgole, che fuori dal portico viene poi

03:58.580 --> 04:01.260
unito in un array e gestito internamente.

04:01.260 --> 04:03.100
Questa è la sintassi dei parametri di riposo.

04:03.100 --> 04:06.276
A proposito, è possibile combinare questo metodo con le tuple.

04:06.276 --> 04:10.370
Se si sa di voler supportare più argomenti, ma si

04:10.370 --> 04:15.370
sa quanti saranno, quindi se non si tratta di un elenco illimitato,

04:16.520 --> 04:18.420
si può anche usare un tipo

04:18.420 --> 04:20.392
tupla.

04:20.392 --> 04:23.430
E per esempio dire: "Accetto i miei numeri gratuiti qui. E poi devo rimuovere il quarto

04:23.430 --> 04:28.430
argomento quando chiamo la funzione.

04:28.460 --> 04:30.910
Perché ora mi è abbastanza chiaro che voglio ottenere tre argomenti,

04:30.910 --> 04:32.240
ognuno dei quali è un numero.

04:32.240 --> 04:33.830
Ovviamente avremmo potuto aggiungere

04:33.830 --> 04:36.980
tre parametri indipendenti, ma questa sintassi potrebbe essere più breve

04:36.980 --> 04:39.030
o più facile da configurare rispetto all'aggiunta

04:39.030 --> 04:40.720
dei parametri liberi.

04:40.720 --> 04:43.090
Dipende dalla vostra applicazione e dai vostri requisiti.

04:43.090 --> 04:46.919
Qui mi allontanerò da questa impostazione e sarò più generico

04:46.919 --> 04:51.320
e accetterò tutti gli argomenti possibili, perché per questa funzione

04:51.320 --> 04:55.210
sono effettivamente in grado di gestire una quantità infinita

04:55.210 --> 04:57.864
di argomenti.
