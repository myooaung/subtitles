WEBVTT

00:02.100 --> 00:04.890
Instrutor: Para entender as aulas, vamos entender

00:04.890 --> 00:07.040
a programação orientada a objetos.

00:07.040 --> 00:10.050
Agora, dependendo de seu nível de conhecimento e se

00:10.050 --> 00:12.560
você trabalhou com JavaScript moderno e talvez

00:12.560 --> 00:15.340
também com algumas outras linguagens de programação,

00:15.340 --> 00:18.320
você pode estar ciente para que classes existem e para

00:18.320 --> 00:22.270
que serve a programação OOP orientada a objetos.

00:22.270 --> 00:24.570
Portanto, você também pode pular esta palestra para

00:24.570 --> 00:27.720
saltar logo em seguida para as partes onde escrevemos o código.

00:27.720 --> 00:29.330
De outra forma, definitivamente,

00:29.330 --> 00:32.200
fique comigo, porque é importante entender isto.

00:32.200 --> 00:35.240
A idéia por trás da programação orientada a objetos e

00:35.240 --> 00:38.550
classes será importante para isso, como você verá, é que você

00:38.550 --> 00:41.630
trabalhe com entidades da vida real em seu código que você

00:41.630 --> 00:43.110
poderia dizer.

00:43.110 --> 00:47.370
Para que você trabalhe com coisas em seu código com objetos que se assemelham

00:47.370 --> 00:52.110
tanto quanto possível a objetos da vida real, pelo menos para tornar mais fácil

00:52.110 --> 00:54.410
para você como um desenvolvedor raciocinar

00:54.410 --> 00:56.250
sobre seu código.

00:56.250 --> 00:59.150
Por exemplo, podemos estar construindo uma loja on-line

00:59.150 --> 01:01.270
e lá poderemos ter uma lista de produtos.

01:01.270 --> 01:05.190
Talvez queiramos trabalhar com um objeto de lista de produtos, que tem tudo o

01:05.190 --> 01:08.140
que precisamos para administrar uma lista de produtos.

01:08.140 --> 01:11.570
Um método para adicionar produtos aos produtos de

01:11.570 --> 01:13.370
chumbo, a própria lista.

01:13.370 --> 01:15.670
Assim, por exemplo, este pode ser um objeto

01:15.670 --> 01:18.360
responsável pela elaboração de uma lista de produtos

01:18.360 --> 01:19.540
e pela sua gestão, que

01:19.540 --> 01:22.840
foram buscados em um serviço ou em um banco de dados.

01:22.840 --> 01:25.530
Portanto, este produto contém toda a lógica de renderização

01:25.530 --> 01:27.260
e de busca e gestão.

01:27.260 --> 01:29.420
Isto é que é uma lista de produtos.

01:29.420 --> 01:32.510
No entanto, em nosso programa em nosso website que estamos construindo,

01:32.510 --> 01:33.870
talvez precisemos também trabalhar

01:33.870 --> 01:36.000
com o produto individual.

01:36.000 --> 01:39.540
Portanto, podemos querer também um objeto ou vários objetos; um

01:39.540 --> 01:40.960
para cada produto que seja

01:40.960 --> 01:43.930
responsável pelo gerenciamento do produto único.

01:43.930 --> 01:47.180
Ele pode segurar e render os detalhes sobre esse produto,

01:47.180 --> 01:49.830
talvez nos permita adicioná-lo a um carrinho,

01:49.830 --> 01:51.260
coisas assim.

01:51.260 --> 01:54.900
Portanto, quando queremos desenhar a interface do usuário para a tela, queremos

01:54.900 --> 01:57.010
gerenciar isso através do JavaScript e, portanto,

01:57.010 --> 01:58.740
através do TypeScript, então poderíamos

01:58.740 --> 02:00.550
implementar isso com uma lista de produtos

02:00.550 --> 02:02.970
e um objeto de produto que contenha a lógica para gerenciar

02:02.970 --> 02:05.370
os dados subjacentes, mas também para renderizar o

02:05.370 --> 02:07.760
conteúdo na tela.

02:07.760 --> 02:10.010
E é claro que, portanto, esses dois objetos

02:10.010 --> 02:11.940
estariam relacionados.

02:11.940 --> 02:14.790
Podemos também ter um objeto de carrinho de compras em nossa tela, que

02:14.790 --> 02:16.410
é responsável pela renderização e gerenciamento

02:16.410 --> 02:18.040
do cartão de compras.

02:18.040 --> 02:20.380
É claro que também está ligado ao produto.

02:20.380 --> 02:22.930
E, por isso, ela contém toda a lógica que precisamos para

02:22.930 --> 02:24.880
renderizar nosso cartão de compras, fazer

02:24.880 --> 02:27.240
pedidos e se comunicar com o servidor e assim por

02:27.240 --> 02:28.073
diante.

02:28.073 --> 02:31.190
Portanto, essa seria uma forma de pensarmos sobre a aplicação

02:31.190 --> 02:33.010
que estamos construindo.

02:33.010 --> 02:35.590
Como poderíamos dividi-lo em pedaços lógicos que

02:35.590 --> 02:37.670
fazem sentido para nós como humanos.

02:37.670 --> 02:40.320
E em código em TypeScript e JavaScript, na maioria

02:40.320 --> 02:42.920
das linguagens de programação modernas, isto

02:42.920 --> 02:46.750
é ativamente suportado porque temos objetos que são estruturas de

02:46.750 --> 02:48.900
dados mais complexas que possuem propriedades

02:48.900 --> 02:50.640
e métodos.

02:50.640 --> 02:53.340
E é claro que temos isso também em JavaScript.

02:53.340 --> 02:57.310
Mas também podemos ter aulas que nos ajudem com isso.

02:57.310 --> 02:59.100
Agora, qual é a idéia por trás das aulas?

02:59.100 --> 03:00.740
E quais são as instâncias?

03:00.740 --> 03:02.030
Quando obtemos estes

03:02.030 --> 03:04.690
objetos e quando seguimos esta abordagem orientada

03:04.690 --> 03:07.500
a objetos, poderíamos considerar dividir nossa

03:07.500 --> 03:11.130
aplicação ou nossa lógica de aplicação em tais objetos que gerenciam

03:11.130 --> 03:13.750
partes de nossa lógica.

03:13.750 --> 03:17.000
Agora conectado à idéia de usar esses objetos

03:17.000 --> 03:19.340
que, naturalmente, existem no JavaScript,

03:19.340 --> 03:23.910
podemos usar objetos lá como a idéia de ter aulas.

03:23.910 --> 03:27.470
Os objetos são as coisas concretas com as quais trabalhamos em nosso código.

03:27.470 --> 03:30.380
As estruturas de dados que usamos para armazenar dados

03:30.380 --> 03:33.450
para armazenar métodos de execução dos métodos.

03:33.450 --> 03:36.570
As classes são plantas para objetos.

03:36.570 --> 03:40.880
As classes nos permitem definir como os objetos devem ser; quais dados eles

03:40.880 --> 03:42.230
devem conter, quais métodos

03:42.230 --> 03:44.070
eles devem ter, para que possamos

03:44.070 --> 03:48.240
facilmente construir objetos com base nestas classes.

03:48.240 --> 03:51.830
E então chamamos isso de instâncias das classes.

03:51.830 --> 03:54.830
Portanto, um objeto é uma instância de classe se for

03:54.830 --> 03:56.850
baseado em tal classe, para que possamos

03:56.850 --> 03:59.900
replicar rapidamente vários objetos com a mesma estrutura,

03:59.900 --> 04:02.230
os mesmos métodos baseados nas mesmas

04:02.230 --> 04:04.090
classes.

04:04.090 --> 04:07.280
Assim, as aulas nos ajudam a definir como os objetos devem ser, quais

04:07.280 --> 04:10.170
propriedades e métodos eles têm e assim por diante.

04:10.170 --> 04:14.920
Assim, existem classes para acelerar a criação de objetos.

04:14.920 --> 04:16.160
E é simplesmente uma alternativa

04:16.160 --> 04:20.070
ao uso da notação literal do objeto que você já conhece.

04:20.070 --> 04:21.330
Elas simplesmente facilitam as coisas.

04:21.330 --> 04:24.620
As classes simplesmente facilitam a criação de múltiplos objetos

04:24.620 --> 04:26.900
que geralmente têm a mesma estrutura e os mesmos

04:26.900 --> 04:28.030
métodos, e que podem

04:28.030 --> 04:31.500
diferir apenas nos detalhes exatos dos dados que são armazenados

04:31.500 --> 04:32.780
ali.

04:32.780 --> 04:34.540
Digamos que temos várias pessoas

04:34.540 --> 04:36.670
que queremos representar com objetos.

04:36.670 --> 04:39.330
Bem, cada pessoa pode ter um nome e uma idade,

04:39.330 --> 04:40.830
os valores serão diferentes,

04:40.830 --> 04:43.310
a estrutura geral é a mesma.

04:43.310 --> 04:44.500
Então essa é a teoria.

04:44.500 --> 04:46.113
Vamos ver isso na prática.
