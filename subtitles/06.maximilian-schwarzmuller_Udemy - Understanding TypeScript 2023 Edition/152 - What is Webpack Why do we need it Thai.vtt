WEBVTT

00:02.050 --> 00:04.090
อาจารย์ : แล้วเรามีข้อเสียตรงไหน?

00:04.090 --> 00:06.030
นี่คือโครงการที่เราทำ

00:06.030 --> 00:08.020
โดยแบ่งออกเป็นหลายไฟล์โดยใช้การนำเข้าโมดูล

00:08.020 --> 00:12.390
ES6 เหล่านี้ที่นี่

00:12.390 --> 00:15.620
ตอนนี้ มาสร้างโปรเจกต์นี้กัน และสำหรับสิ่งนั้น

00:15.620 --> 00:18.400
เราเรียกใช้ npm-start เพื่อเรียกใช้ lite-server

00:18.400 --> 00:21.930
อย่างที่เราเคยทำก่อนหน้านี้

00:21.930 --> 00:24.710
และแน่นอนว่าสำคัญมากในแท็บใหม่ การรัน

00:24.710 --> 00:26.367
tsc-dash ทั้งหมดเพื่อเริ่มการคอมไพล์

00:27.820 --> 00:31.430
TypeScript ในโหมดเฝ้าดู

00:31.430 --> 00:35.590
สิ่งนี้ให้โครงการของเราแก่เรา และหากตอนนี้เราเปิดแท็บเครือข่ายในเครื่องมือสำหรับนักพัฒนาเบราว์เซอร์

00:35.590 --> 00:44.840
และเราโหลดไฟล์นี้ซ้ำ เราจะเห็นข้อเสียที่เรามีที่นี่หรือปัญหาที่เรามีกับการตั้งค่านี้

00:44.840 --> 00:47.490
เราเห็นคำขอ HTTP จำนวนมาก

00:47.490 --> 00:51.380
ตอนนี้คุณสามารถเพิกเฉยต่อสิ่งสุดท้ายที่นี่ซึ่งมาจากเซิร์ฟเวอร์การพัฒนาของเรา

00:51.380 --> 00:58.290
แต่คำขอทั้งหมดของเราที่นี่เพื่อแอป js, อินพุตโครงการ

00:58.290 --> 00:58.290
js รายการโครงการ js ส่วนประกอบฐาน js

00:58.290 --> 01:00.960
และนั่นคือปัญหา

01:00.960 --> 01:04.610
คุณจะสังเกตเห็นว่าไฟล์เหล่านี้มีขนาดไม่ใหญ่นัก

01:04.610 --> 01:06.320
มีขนาดค่อนข้างเล็ก

01:06.320 --> 01:07.590
แน่นอนว่าไม่เป็นไร

01:07.590 --> 01:11.010
แต่เรามีคำขอ HTTP จำนวนมากที่นี่

01:11.010 --> 01:12.600
ตอนนี้ปัญหาคืออะไร

01:12.600 --> 01:17.810
ปัญหานั้นสามารถเห็นได้หากเราดูน้ำตกนั้นทางด้านขวา

01:17.810 --> 01:22.470
แน่นอนว่าทุกคำขอ HTTP ที่ต้องทำต้องใช้เวลาเล็กน้อย

01:22.470 --> 01:24.480
ใช้เวลาในการดาวน์โหลดไฟล์ แต่เนื่องจากไฟล์ไม่ใหญ่นัก

01:24.480 --> 01:27.760
นั่นจึงไม่ใช่ปัญหา

01:27.760 --> 01:31.390
แต่ทุกๆ คำขอ HTTP จะมีค่าเหนือศีรษะพื้นฐาน

01:31.390 --> 01:34.540
ซึ่งต้องใช้ระยะเวลาพื้นฐานเสมอ

01:34.540 --> 01:38.570
กล่องเล็กๆ ที่คุณเห็นอยู่หน้ากราฟเหล่านี้

01:38.570 --> 01:43.910
ใกล้ถึงเวลาที่เบราว์เซอร์ต้องตั้งค่าคำขอนั้นและส่ง

01:43.910 --> 01:46.280
ดังนั้นในขณะที่การดาวน์โหลดไฟล์จริงอาจค่อนข้างรวดเร็ว

01:46.280 --> 01:55.310
การตั้งค่าคำขอ การทำงานบนเซิร์ฟเวอร์ซึ่งให้บริการไฟล์และทั้งหมดนี้ต้องใช้เวลาพอสมควร

01:55.310 --> 02:00.310
และตอนนี้เรามีการตั้งค่าที่รวดเร็วมาก เพราะทุกอย่างเกิดขึ้นในเครื่องของเรา

02:00.310 --> 02:03.020
เรามีเซิร์ฟเวอร์การพัฒนาในพื้นที่ทั้งหมด

02:03.020 --> 02:11.140
หากคุณปรับใช้กับเว็บ การมีคำขอจำนวนมากอาจทำให้เกิดเวลาแฝงมากและทำให้โครงการของคุณช้าลงเพียงเพราะคำขอ

02:11.140 --> 02:14.760
HTTP จำนวนมากที่สร้างขึ้น

02:14.760 --> 02:17.280
ดังนั้นหากเราสามารถหาวิธีลดจำนวนคำขอ

02:17.280 --> 02:21.370
HTTP ได้ นั่นคงจะยอดเยี่ยมมาก

02:21.370 --> 02:24.020
และนั่นคือที่มาของ webpack

02:24.020 --> 02:28.190
คุณสามารถไปที่ webpack จ. org เพื่อเรียนรู้เพิ่มเติมเกี่ยวกับเรื่องนี้

02:28.190 --> 02:33.750
ในตอนท้าย webpack เป็นเครื่องมือที่จะช่วยให้เรารวมไฟล์เข้าด้วยกัน

02:33.750 --> 02:39.980
และฉันสามารถแนะนำเอกสารที่กว้างขวางและครอบคลุมที่คุณพบในหน้าของพวกเขา

02:39.980 --> 02:42.300
หากคุณต้องการเรียนรู้ทั้งหมดเกี่ยวกับ webpack

02:42.300 --> 02:44.820
ในหลักสูตรนี้ เราจะใช้คุณสมบัติที่เลือกซึ่งช่วยเราเกี่ยวกับ

02:44.820 --> 02:46.563
TypeScript

02:47.560 --> 02:49.850
webpack คืออะไรกันแน่?

02:49.850 --> 02:53.850
เป็นชุดรวมและคุณสามารถพูดได้ว่าสร้างเครื่องมือการประสาน

02:53.850 --> 02:56.190
เป็นเครื่องมือที่ช่วยให้เราลดจำนวนคำขอ

02:56.190 --> 02:59.560
HTTP ด้วยการรวมโค้ดเข้าด้วยกัน

02:59.560 --> 03:03.010
เพื่อให้เราเขียนโค้ดแยกออกเป็นหลายๆ ไฟล์ แต่

03:03.010 --> 03:07.050
webpack จะนำไฟล์ทั้งหมดเหล่านี้มารวมเข้าด้วยกัน

03:07.050 --> 03:10.050
นอกจากนี้ webpack ยังสามารถทำอะไรได้อีกมาก

03:10.050 --> 03:13.920
นอกจากนี้ยังจะเพิ่มประสิทธิภาพโค้ดของเรา และยังช่วยให้เราสามารถเพิ่มขั้นตอนการสร้าง

03:13.920 --> 03:17.760
เครื่องมือสร้างเพิ่มเติม เช่น เพื่อช่วยเราเกี่ยวกับไฟล์ CSS

03:17.760 --> 03:20.410
เป็นต้น

03:20.410 --> 03:23.180
นั่นไม่ใช่สิ่งที่เราจะพิจารณาในโมดูลนี้ เพราะฉันต้องการมุ่งเน้นไปที่

03:23.180 --> 03:26.220
webpack และ TypeScript

03:26.220 --> 03:28.710
ก่อนอื่นมาดูการตั้งค่าปกติของเราที่เราไม่ได้ใช้

03:28.710 --> 03:30.700
webpack

03:30.700 --> 03:32.800
เรามีไฟล์ TypeScript หลายไฟล์

03:32.800 --> 03:34.870
แต่ถ้าเราใช้การนำเข้าเหล่านี้

03:34.870 --> 03:36.920
เราได้รับคำขอ HTTP หลายรายการ

03:36.920 --> 03:40.220
ซึ่งไม่ดีนักสำหรับเหตุผลที่ฉันกล่าวถึง

03:40.220 --> 03:43.450
นอกจากนี้ หัวข้อที่ฉันไม่เคยดูมาก่อนก็คือ เราน่าจะมีโค้ดที่ไม่ได้รับการเพิ่มประสิทธิภาพ

03:43.450 --> 03:51.290
ซึ่งหมายความว่ามันไม่ได้มีขนาดเล็กที่สุดเท่าที่จะเป็นไปได้

03:51.290 --> 03:55.750
เราสามารถเพิ่มประสิทธิภาพโค้ดได้มากขึ้นโดยการย่อชื่อฟังก์ชันให้สั้นลงและอื่นๆ

03:55.750 --> 03:58.690
และแน่นอน เราต้องการเครื่องมือที่ทำสิ่งนี้โดยอัตโนมัติ

03:58.690 --> 04:03.000
เพื่อไม่ให้เราต้องทำงานด้วยตนเองมากเกินไปกับโค้ดที่อ่านไม่ได้

04:03.000 --> 04:06.080
เราต้องการเขียนโค้ดที่อ่านได้อย่างสมบูรณ์แบบในฐานะนักพัฒนา

04:06.080 --> 04:10.740
แต่จะดีมากถ้าเรามีเครื่องมือที่ทำให้โค้ดนี้สั้นลงและทำให้เล็กที่สุดเท่าที่จะเป็นไปได้

04:10.740 --> 04:19.130
ใช้ชื่อตัวแปรและฟังก์ชันให้สั้นที่สุดเท่าที่จะเป็นไปได้ เพื่อให้เราจัดส่งโค้ดให้น้อยที่สุดเท่าที่จะเป็นไปได้

04:19.130 --> 04:22.940
เนื่องจากรหัสที่น้อยลงหมายความว่าผู้ใช้สามารถดาวน์โหลดได้เร็วขึ้น

04:22.940 --> 04:27.600
ซึ่งหมายความว่าแอปพลิเคชันของเราสามารถเริ่มทำงานได้เร็วขึ้นในเครื่องของเรา

04:27.600 --> 04:29.440
และนอกจากนี้ การตั้งค่าปัจจุบันของเรา

04:29.440 --> 04:32.860
เรามีเซิร์ฟเวอร์สำหรับการพัฒนาพิเศษนี้ เซิร์ฟเวอร์ lite

04:32.860 --> 04:36.860
ซึ่งเป็นแพ็คเกจเสริมที่ติดตั้ง ซึ่งเราต้องหมุนใหม่

04:36.860 --> 04:39.320
มันคงไม่ใช่โบนัสเล็กๆ น้อยๆ แต่เป็นโบนัสที่ดีหากเรามีคำสั่งเดียวและนั่นจะทำทุกอย่าง

04:39.320 --> 04:50.713
สร้างโครงการของเรา แต่ยังหมุนเซิร์ฟเวอร์ดังกล่าว ซึ่งจะโหลดเว็บไซต์ของเราใหม่โดยอัตโนมัติทุกครั้งที่เราเปลี่ยนไฟล์ในโครงการของเรา

04:51.550 --> 04:54.270
และนั่นคือสิ่งที่ webpack สามารถช่วยเราได้

04:54.270 --> 04:57.240
มันรวมรหัสของเราเพื่อให้เรานำเข้าน้อยลง

04:57.240 --> 05:00.670
แทนที่เรามีบางกลุ่มรหัสที่ดีที่เราจัดส่ง มันช่วยให้เราเพิ่มประสิทธิภาพรหัสของเรา

05:00.670 --> 05:10.130
ลดขนาดมันตามที่เรียก เพื่อให้เราส่งรหัสน้อยลงและผู้ใช้ของเรามีรหัสให้ดาวน์โหลดน้อยลง

05:10.130 --> 05:12.530
และเรายังสามารถเพิ่มขั้นตอนการสร้างเพิ่มเติมได้อย่างง่ายดายหากต้องการ

05:12.530 --> 05:15.750
เราสามารถเพิ่มเซิร์ฟเวอร์การพัฒนาดังกล่าวได้ แต่เรายังสามารถทำสิ่งอื่นๆ

05:15.750 --> 05:24.130
ได้อีกมากมายหากเราต้องการจริงๆ และเอกสาร webpack อย่างเป็นทางการคือที่ที่ควรไปหากคุณต้องการเรียนรู้ทั้งหมดเกี่ยวกับ มัน.

05:24.130 --> 05:27.880
จากนั้น มาดูตัวอย่างการตั้งค่าในโครงการของเรา และมาเรียนรู้ว่าเราจะใช้

05:27.880 --> 05:30.433
webpack ที่นั่นได้อย่างไร
