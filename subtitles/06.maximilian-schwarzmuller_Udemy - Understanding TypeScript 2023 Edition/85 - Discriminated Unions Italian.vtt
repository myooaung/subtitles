WEBVTT

00:02.210 --> 00:04.920
Ora, un tipo speciale di protezione di tipo, si potrebbe

00:04.920 --> 00:05.753
dire, o qualcosa

00:05.753 --> 00:07.940
che aiuta con le protezioni di tipo, è l'unione

00:07.940 --> 00:10.000
discriminata.

00:10.000 --> 00:11.300
Che cos'è?

00:11.300 --> 00:13.310
Si tratta di uno schema, che si può usare

00:13.310 --> 00:15.030
quando si lavora con i tipi union,

00:15.030 --> 00:18.900
che rende più semplice l'implementazione delle protezioni dei tipi.

00:18.900 --> 00:22.000
È disponibile quando si lavora con i tipi di oggetto.

00:22.000 --> 00:24.580
Vi mostro come funziona.

00:24.580 --> 00:26.850
Supponiamo di avere un paio di interfacce, che potrebbero

00:26.850 --> 00:28.450
essere anche classi, ma in questo caso

00:28.450 --> 00:29.950
sceglierò le interfacce per dimostrare

00:29.950 --> 00:32.193
che funzionano anche con quelle.

00:33.170 --> 00:34.803
E qui ho il mio uccello, che

00:36.480 --> 00:38.830
ha una velocità di volo, che dovrebbe

00:38.830 --> 00:40.973
essere di tipo numero, diciamo.

00:42.660 --> 00:45.890
E ho anche il mio cavallo, che ha una velocità

00:45.890 --> 00:50.310
al suolo o una velocità di corsa, che dovrebbe essere di

00:50.310 --> 00:51.913
tipo numerico.

00:53.130 --> 00:55.430
Abbiamo quindi queste due interfacce.

00:55.430 --> 00:58.800
Ora creiamo il nostro tipo di unione, animale,

00:58.800 --> 00:59.633
che può essere

01:00.750 --> 01:03.370
un uccello o un cavallo.

01:03.370 --> 01:05.743
E come prima, potremmo avere una funzione,

01:06.740 --> 01:08.480
move animal, che prende in ingresso

01:09.800 --> 01:13.040
un animale, di tipo animal, quindi utilizzando il nostro

01:13.040 --> 01:14.800
tipo union.

01:14.800 --> 01:19.800
Ora voglio dire che mi muovo con velocità e, naturalmente, devo

01:19.990 --> 01:21.050
accedere alla

01:21.050 --> 01:25.180
velocità di volo o alla velocità di corsa.

01:25.180 --> 01:27.730
Naturalmente, avremmo potuto chiamarla semplicemente velocità.

01:27.730 --> 01:30.840
Ma questo è solo un esempio semplificato di un caso d'uso

01:30.840 --> 01:33.900
reale che si potrebbe verificare, quando si hanno alcune

01:33.900 --> 01:37.390
interfacce o oggetti in generale, che sono in qualche modo correlati

01:37.390 --> 01:40.500
ma hanno proprietà o metodi diversi.

01:40.500 --> 01:42.050
In questo caso, si tratta della proprietà

01:42.050 --> 01:43.900
della velocità, che in realtà è diversa.

01:43.900 --> 01:46.780
Quindi non può accedere alla velocità di volo, perché ovviamente

01:46.780 --> 01:49.240
non tutti gli animali hanno una velocità di volo.

01:49.240 --> 01:51.210
Ora possiamo fare ciò che abbiamo imparato prima.

01:51.210 --> 01:56.063
Qui possiamo verificare se la velocità di volo è in animale.

01:58.240 --> 02:01.063
In questo caso, possiamo eseguire questo codice.

02:01.960 --> 02:04.470
Questo è un approccio che possiamo adottare,

02:04.470 --> 02:07.430
ma più animali potenziali ci sono, più cose dobbiamo

02:07.430 --> 02:09.233
controllare.

02:10.880 --> 02:14.100
Possiamo anche sbagliare a digitare qui in questa stringa.

02:14.100 --> 02:15.810
Possiamo dimenticare una E, ad

02:15.810 --> 02:18.460
esempio, e chiederci perché non funziona.

02:18.460 --> 02:20.410
Ora, non possiamo usare l'istanza di qui

02:20.410 --> 02:22.570
perché sto rompendo con le interfacce.

02:22.570 --> 02:27.490
Come ho spiegato, l'istanza animal di bird non funziona perché data

02:27.490 --> 02:29.680
è un'interfaccia, che non viene

02:29.680 --> 02:31.840
compilata in JavaScript.

02:31.840 --> 02:33.970
Pertanto, in fase di esecuzione, non sarà

02:33.970 --> 02:36.210
disponibile come funzione costruttore.

02:36.210 --> 02:37.690
Pertanto, questo non funziona.

02:37.690 --> 02:40.380
Ora possiamo costruire un'unione discriminata

02:40.380 --> 02:42.460
dando ogni interfaccia.

02:42.460 --> 02:45.380
Quindi ogni oggetto che dovrebbe far parte dell'Unione,

02:45.380 --> 02:47.130
e una proprietà extra.

02:47.130 --> 02:48.640
È possibile utilizzare il nome che si desidera.

02:48.640 --> 02:51.490
Spesso si usa kind o type in questo caso.

02:51.490 --> 02:55.090
Mi limiterò a scegliere il tipo e a dare un nome a questo uccello.

02:55.090 --> 02:57.480
È importante, qui stiamo scambiando un'interfaccia.

02:57.480 --> 03:02.480
Quindi questo non è un valore per la proprietà type.

03:02.650 --> 03:05.410
Questo invece è un tipo letterale, come si è appreso,

03:05.410 --> 03:09.110
dove il tipo deve contenere una stringa, che deve essere un uccello.

03:09.110 --> 03:10.880
Si tratta quindi di un'assegnazione

03:10.880 --> 03:15.000
di tipo, in cui si restringe il valore che può essere memorizzato nel tipo esattamente

03:15.000 --> 03:17.590
a questo valore di stringa.

03:17.590 --> 03:19.810
E poi fare lo stesso per il cavallo,

03:19.810 --> 03:22.283
ma con il cavallo come tipo letterale.

03:23.400 --> 03:25.060
Ora, nella nostra funzione,

03:25.060 --> 03:27.550
possiamo utilizzare un'istruzione

03:27.550 --> 03:29.840
switch e passare al tipo di punto

03:29.840 --> 03:32.280
animale.

03:32.280 --> 03:34.080
Ogni animale ha una proprietà type,

03:34.080 --> 03:36.330
perché l'abbiamo aggiunta a tutte le interfacce

03:36.330 --> 03:38.350
che compongono il nostro animale.

03:38.350 --> 03:40.730
E qui possiamo avere un paio di casi in cui

03:40.730 --> 03:42.330
si ottiene il completamento

03:42.330 --> 03:44.990
automatico, perché TypeScript e il nostro

03:44.990 --> 03:49.040
IDE capiscono che il tipo può essere solo uccello o cavallo.

03:49.040 --> 03:51.050
E se si tratta di un uccello, si

03:51.050 --> 03:55.003
può impostare una velocità variabile interna, ad esempio

03:55.900 --> 03:58.860
la velocità di volo di un punto animale, e poi

03:59.880 --> 04:02.250
interrompere il volo.

04:02.250 --> 04:05.183
Altrimenti, se si tratta di un cavallo, si

04:06.830 --> 04:11.753
imposta una velocità pari alla velocità di corsa del punto animale.

04:14.150 --> 04:17.490
E dopo possiamo registrare la console,

04:17.490 --> 04:20.843
muovendoci a velocità più alta.

04:22.490 --> 04:26.540
Se ora chiamo, muovi animale con un animale che ho creato al volo

04:26.540 --> 04:30.300
qui, dove ho impostato il tipo su uccello e permetto di usare

04:30.300 --> 04:32.810
solo uccello o cavallo, poi devo impostare

04:32.810 --> 04:34.930
la mia velocità di volo e tra l'altro,

04:36.140 --> 04:39.210
TypeScript riconosce anche che un concetto di

04:39.210 --> 04:42.050
velocità di esecuzione qui per provare a farlo

04:42.050 --> 04:44.220
e impostare questo a 10, si lamenta

04:44.220 --> 04:48.980
che questo non è disponibile per il tipo uccello.

04:48.980 --> 04:51.360
Se lo imposto sulla velocità di volo,

04:51.360 --> 04:55.120
comunque funziona, se lo salviamo, lo produce correttamente

04:55.120 --> 04:57.700
e compila anche senza errori.

04:57.700 --> 04:59.530
Ora, questa è un'unione discriminata,

04:59.530 --> 05:04.060
perché abbiamo una proprietà comune a ogni oggetto che compone la

05:04.060 --> 05:08.040
nostra unione, che descrive quell'oggetto, in modo da poter

05:08.040 --> 05:11.490
usare questa proprietà che descrive l'oggetto nel

05:11.490 --> 05:16.490
nostro controllo per avere una sicurezza di tipo al 100% e capire quali proprietà

05:16.770 --> 05:21.930
sono disponibili per tale oggetto e quali no.

05:21.930 --> 05:24.500
Si tratta quindi di un modello nuovo e utile, che

05:24.500 --> 05:28.060
si può usare quando si lavora con gli oggetti e con i tipi di unione.

05:28.060 --> 05:30.340
E funziona anche con le interfacce, perché

05:30.340 --> 05:33.630
questa interfaccia obbliga ogni oggetto costruito sulla

05:33.630 --> 05:37.050
base di questa interfaccia ad avere questo tipo.

05:37.050 --> 05:39.400
Quindi, invece di verificare l'esistenza

05:39.400 --> 05:41.200
di una determinata proprietà, o

05:41.200 --> 05:43.660
invece di usare l'istanza di, usiamo una proprietà

05:43.660 --> 05:46.310
che sappiamo esistere per verificare con quale

05:46.310 --> 05:49.020
tipo di oggetti stiamo lavorando.

05:49.020 --> 05:51.930
Eliminiamo anche il pericolo di errori di digitazione,

05:51.930 --> 05:54.730
perché TypeScript capisce che gli unici casi che possiamo

05:54.730 --> 05:58.480
avere qui, per il tipo animale, sono uccello e cavallo e quindi ci dà questa

05:58.480 --> 06:00.810
arte del completamento e se si introduce un errore

06:00.810 --> 06:02.770
di battitura, si ottiene immediatamente

06:02.770 --> 06:04.690
un errore.

06:04.690 --> 06:06.780
Si tratta quindi di uno schema molto utile

06:06.780 --> 06:09.333
quando si lavora con oggetti e tipi di unione.
