WEBVTT

00:02.260 --> 00:03.960
Daarmee zijn we bijna klaar met

00:03.960 --> 00:04.920
de kerntypes.

00:04.920 --> 00:07.470
Er is nog een type, dat we al zagen,

00:07.470 --> 00:09.390
en dat is het any type.

00:09.390 --> 00:11.480
Het any type is het meest flexibele type dat

00:11.480 --> 00:13.310
u kunt toekennen in TypeScript.

00:13.310 --> 00:16.710
Dit type vertelt TypeScript niets.

00:16.710 --> 00:19.960
Het betekent in feite dat je er elke soort waarde in kunt opslaan.

00:19.960 --> 00:22.031
We hebben geen specifieke opdracht.

00:22.031 --> 00:25.260
TypeScript zal in principe nooit tegen je schreeuwen

00:25.260 --> 00:27.040
als je iets gebruikt.

00:27.040 --> 00:28.030
Terug in onze code hier,

00:28.030 --> 00:31.360
als ik het type favoriete activiteiten zou instellen op eender welke,

00:31.360 --> 00:32.870
zou ik geen fout krijgen.

00:32.870 --> 00:36.580
Als het een willekeurige array is, vertel ik TypeScript tenminste dat

00:36.580 --> 00:39.220
favoriete activiteiten een array van iets is.

00:39.220 --> 00:41.460
Dus als ik daar slechts een enkele waarde zou opslaan,

00:41.460 --> 00:42.830
zou ik een foutmelding krijgen.

00:42.830 --> 00:44.500
Maar zolang het een matrix is,

00:44.500 --> 00:46.638
kan ik daarin opslaan wat ik wil.

00:46.638 --> 00:49.840
Dus elke is echt flexibel.

00:49.840 --> 00:52.070
En dit kan in eerste instantie geweldig

00:52.070 --> 00:54.060
klinken, maar eigenlijk is het een

00:54.060 --> 00:58.290
groot nadeel en je wilt het absoluut vermijden waar mogelijk.

00:58.290 --> 01:00.170
Want elk neemt eigenlijk alle

01:00.170 --> 01:02.512
voordelen van TypeScript weg.

01:02.512 --> 01:04.380
Het geeft je dezelfde ervaring

01:04.380 --> 01:06.430
die je hebt met vanilla JavaScript

01:06.430 --> 01:10.480
waar je ook alles moet typen om het zo maar te zeggen.

01:10.480 --> 01:13.820
Elke zorgt er eigenlijk voor dat de TypeScript-compiler

01:13.820 --> 01:16.020
niets kan controleren, want als

01:16.020 --> 01:19.180
elke eigenschap of variabele elke waarde kan

01:19.180 --> 01:20.818
opslaan, dan valt er niet

01:20.818 --> 01:23.687
veel te controleren, toch?

01:23.687 --> 01:27.130
U kunt dus elke waarde als noodoplossing gebruiken als u een

01:27.130 --> 01:30.270
waarde hebt, een soort gegevens waarvan u echt niet kunt

01:30.270 --> 01:31.810
weten welke soort gegevens

01:31.810 --> 01:33.820
daar zullen worden opgeslagen en

01:33.820 --> 01:37.050
waar u dan misschien wat runtime-controles gebruikt,

01:37.050 --> 01:40.440
zoals wij hier hebben gedaan, om te bepalen wat u wilt doen

01:40.440 --> 01:42.660
voor bepaalde waarden.

01:42.660 --> 01:44.600
Dan kun je eender welke nemen.

01:44.600 --> 01:48.210
Maar in andere gevallen wil je echt alles vermijden.

01:48.210 --> 01:51.120
Als u weet met welk soort gegevens u werkt,

01:51.120 --> 01:54.090
wees daar dan expliciet over.

01:54.090 --> 01:56.780
Laat TypeScript inference zijn werk doen of

01:56.780 --> 01:58.817
stel expliciet uw eigen types in.

01:58.817 --> 02:01.783
Val niet terug op iets als het niet nodig is.
