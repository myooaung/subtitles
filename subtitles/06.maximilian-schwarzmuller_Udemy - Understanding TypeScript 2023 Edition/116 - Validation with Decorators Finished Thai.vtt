WEBVTT

00:02.320 --> 00:05.210
ผู้สอน: ในการดำเนินการนี้ ก่อนอื่นฉันจะสร้างอินเทอร์เฟซ

00:05.210 --> 00:12.680
ValidatorConfig ซึ่งฉันต้องการกำหนดค่าที่เก็บข้อมูลที่ฉันต้องการใช้งาน

00:12.680 --> 00:15.130
ความคิดของฉันคือต้องมีคุณสมบัติสองสามอย่าง

00:15.130 --> 00:17.653
ดังนั้นฉันจึงใช้สัญกรณ์ประเภทดัชนีนี้ที่นี่

00:19.720 --> 00:21.450
ซึ่งโดยพื้นฐานแล้วจะเป็นสตริง

00:21.450 --> 00:23.440
โดยที่ค่าเป็นออบเจกต์อื่น

00:23.440 --> 00:29.570
เนื่องจากที่นี่จะเป็นชื่อคลาสที่เราต้องการลงทะเบียนคุณสมบัติที่ผ่านการตรวจสอบแล้ว

00:29.570 --> 00:31.700
จากนั้นในวัตถุที่เราเก็บไว้ที่นั่น

00:31.700 --> 00:37.010
เรามีคุณสมบัติที่เป็นรูปธรรมของคลาสที่มีตัวตรวจสอบความถูกต้องแนบมาด้วย

00:37.010 --> 00:42.240
ตรงนี้เรามีคุณสมบัติที่ตรวจสอบได้ ถ้าคุณอยากเรียกแบบนี้

00:42.240 --> 00:44.660
ซึ่งจะเป็นคีย์สตริงด้วย

00:44.660 --> 00:50.010
จากนั้นค่าสำหรับสิ่งนั้นควรเป็นอาร์เรย์ของสตริงโดยพื้นฐานแล้วเรามีบางอย่างเช่น

00:52.420 --> 00:55.490
จำเป็น บวก และอื่น ๆ

00:55.490 --> 00:59.323
ดังนั้นจึงสามารถเพิ่มสิ่งนี้ที่นี่เป็นรายการตัวตรวจสอบความถูกต้อง

01:00.300 --> 01:05.300
ตอนนี้เราสามารถสร้าง registerValidators config ที่นี่ ซึ่งควรเป็นประเภท

01:05.790 --> 01:09.640
ValidatorConfig ซึ่งในตอนแรกเป็นวัตถุว่าง

01:09.640 --> 01:11.500
เนื่องจากในขั้นต้นเมื่อแอปเริ่มทำงานเมื่อโหลดไลบรารีบุคคลที่สามของเรา

01:11.500 --> 01:16.293
ยังไม่มีการลงทะเบียนตัวตรวจสอบความถูกต้อง

01:17.640 --> 01:23.490
ทีนี้ในกรรมการของเราเราต้องการเพิ่มบางอย่างในรีจิสทรีนั้น

01:23.490 --> 01:28.020
ตอนนี้โปรดทราบว่าฟังก์ชันมัณฑนากรคุณสมบัติได้รับสองอาร์กิวเมนต์:

01:28.020 --> 01:31.010
เป้าหมายซึ่งเป็นต้นแบบของออบเจกต์ที่คุณสมบัตินั้นตั้งอยู่

01:31.010 --> 01:39.300
หรือฟังก์ชันคอนสตรัคเตอร์หากเป็นคุณสมบัติสแตติก และชื่อคุณสมบัติ

01:39.300 --> 01:40.710
นี่คือสองอาร์กิวเมนต์ที่เราได้รับที่นี่

01:40.710 --> 01:44.370
เราไม่ได้รับคำอธิบายสำหรับคุณสมบัติ

01:44.370 --> 01:46.760
ตอนนี้เราสามารถไปที่ตัวตรวจสอบความถูกต้องที่ลงทะเบียนแล้ว

01:46.760 --> 01:51.463
และฉันต้องการเพิ่มรายการใหม่สำหรับเป้าหมาย ตัวสร้าง

01:52.730 --> 02:02.610
ต้นแบบของอินสแตนซ์ที่เรากำลังทำงานด้วยจะมีคีย์ตัวสร้างซึ่งชี้ไปที่ฟังก์ชันตัวสร้างที่ใช้สร้างวัตถุของเรา

02:02.610 --> 02:04.690
และนั่นโดยพื้นฐานแล้วจะเหมือนกับหลักสูตรที่นี่

02:04.690 --> 02:10.560
ดังนั้นชื่อของฟังก์ชันคอนสตรัคเตอร์ในตอนท้ายจึงสามารถเรียกค้นจากคอนสตรัคเตอร์นั้นได้

02:10.560 --> 02:11.900
เนื่องจากตัวสร้างเป็นฟังก์ชัน

02:11.900 --> 02:13.400
เราสามารถใช้คุณสมบัติชื่อ

02:13.400 --> 02:15.900
ซึ่งมีอยู่ในฟังก์ชันใดๆ ใน JavaScript เพื่อรับชื่อฟังก์ชัน

02:15.900 --> 02:20.620
และนี่จะเป็นชื่อหลักสูตรที่นี่ เป็นต้น

02:20.620 --> 02:25.030
ตอนนี้เราลงทะเบียนชื่อคลาสเป็นคีย์ในตัวตรวจสอบความถูกต้องที่ลงทะเบียนแล้ว

02:25.030 --> 02:28.130
และค่าสำหรับสิ่งนั้นควรเป็นวัตถุอื่น

02:28.130 --> 02:30.630
ผมจึงตั้งค่าให้เท่ากับอีกวัตถุหนึ่งตรงนี้

02:30.630 --> 02:34.640
และในอ็อบเจกต์นั้น ฉันยังมีคุณสมบัติที่กำหนดแบบไดนามิกที่ฉันใช้

02:34.640 --> 02:40.190
propName ของฉัน ดังนั้นพร็อพเพอร์ตี้ที่ฉันต้องการเพิ่มตัวตรวจสอบความถูกต้องเป็นคีย์

02:40.190 --> 02:42.310
ตอนนี้ค่าที่นี่คืออาร์เรย์ของสตริง

02:42.310 --> 02:45.530
และที่นี่ฉันจะเพิ่มที่จำเป็นเป็นสตริง

02:45.530 --> 02:47.920
แน่นอนว่านี่เป็นตัวตรวจสอบที่ไร้เดียงสามาก

02:47.920 --> 02:50.000
หากเรามีตัวตรวจสอบความถูกต้องอื่นที่ลงทะเบียนสำหรับพร็อพเพอร์ตี้นี้แล้ว

02:50.000 --> 02:52.830
ตอนนี้ฉันจะเขียนทับที่นี่

02:52.830 --> 02:54.900
ดังนั้นจึงเป็นการดีกว่าที่จะดึงตัวตรวจสอบความถูกต้องที่มีอยู่ก่อน

02:54.900 --> 03:01.320
แล้วจึงคัดลอกลงในอาร์เรย์นี้ และเพิ่มเฉพาะที่จำเป็นในอาร์เรย์ที่มีอยู่นั้น

03:01.320 --> 03:02.870
อีกครั้ง เพื่อประหยัดเวลาที่นี่

03:02.870 --> 03:06.873
และเพื่อแสดงแนวคิดทั่วไป ฉันจะมีวิธีที่ไร้เดียงสามากกว่านี้ที่นี่

03:07.980 --> 03:11.180
เมื่อเราได้รับคำอธิบายประกอบที่จำเป็นแล้ว

03:11.180 --> 03:14.690
ตอนนี้เรามาทำงานกับคำอธิบายประกอบจำนวนบวกกัน

03:14.690 --> 03:16.730
และแน่นอนว่าโดยพื้นฐานแล้วเหมือนกัน

03:16.730 --> 03:21.410
ฉันคัดลอกโค้ดนั้น แต่ฉันตั้งค่าที่นี่เป็นค่าบวกหรือตัวระบุอะไรก็ตามที่คุณต้องการใช้

03:21.410 --> 03:27.650
และแน่นอนว่าเราต้องแน่ใจว่าเรายอมรับข้อโต้แย้งที่ถูกต้อง

03:27.650 --> 03:38.640
ด้วยเหตุนี้พร้อมกับสิ่งที่เราเพิ่มเข้ามา เราจึงลงทะเบียนคุณสมบัติเหล่านี้และตัวตรวจสอบความถูกต้องในการกำหนดค่าส่วนกลางของเราเมื่อกำหนดคลาสนี้

03:38.640 --> 03:41.460
ตอนนี้เราต้องทำงานกับฟังก์ชันตรวจสอบความถูกต้อง

03:41.460 --> 03:46.240
ฟังก์ชันตรวจสอบความถูกต้องควรผ่านตัวตรวจสอบความถูกต้องที่ลงทะเบียนไว้ทั้งหมด

03:46.240 --> 03:50.340
จากนั้นเรียกใช้ตรรกะที่แตกต่างกันตามตัวตรวจสอบที่พบ

03:50.340 --> 03:57.600
ก่อนอื่น ฉันต้องการเรียกคืนการกำหนดค่าสำหรับวัตถุคอนกรีตที่เรากำลังจัดการอยู่

03:57.600 --> 04:00.390
เพื่อที่เราจะต้องค้นหาว่าฟังก์ชันคอนสตรัคเตอร์ใดที่วัตถุใช้

04:00.390 --> 04:09.070
จากนั้นรับการกำหนดค่าการตรวจสอบความถูกต้องหรือการแมปตัวตรวจสอบคุณสมบัติที่เราตั้งค่าไว้สำหรับวัตถุนั้น

04:09.070 --> 04:11.960
ดังนั้นที่นี่ฉันจะตั้งชื่อตัวตรวจสอบความถูกต้องของวัตถุนี้หรืออาจเป็น

04:11.960 --> 04:14.520
objValidatorConfig

04:14.520 --> 04:22.110
และเราติดต่อผู้ตรวจสอบความถูกต้องที่ลงทะเบียนไว้ที่นี่และเข้าถึงทรัพย์สินซึ่งควรได้รับการคัดค้าน

04:22.110 --> 04:22.110
ตัวสร้าง ชื่อ

04:23.900 --> 04:28.980
ตรรกะเหมือนเดิม เราเข้าถึงคุณสมบัติคอนสตรัคเตอร์ซึ่งมีอยู่ในต้นแบบของออบเจกต์

04:28.980 --> 04:33.340
ดังนั้นเราสามารถเข้าถึงโดยตรงบนออบเจกต์ด้วยวิธีการทำงานของ JavaScript

04:33.340 --> 04:35.050
และต้องขอบคุณเชนต้นแบบ เราจะเข้าถึงต้นแบบถ้า

04:35.050 --> 04:41.580
เราไม่พบคุณสมบัติคอนสตรัคเตอร์ในตัววัตถุเอง และนั่นจะได้ผล

04:41.580 --> 04:43.840
และตอนนี้เราได้ชื่อคอนสตรัคเตอร์แล้ว

04:43.840 --> 04:49.050
และเราพบว่า ตัวอย่างเช่น หลักสูตรนี้อิงจากคลาสหลักสูตรนี้

04:49.050 --> 04:52.800
ดังนั้นเราจึงค้นหาการกำหนดค่าตัวตรวจสอบความถูกต้องที่เรามีสำหรับชั้นเรียนหลักสูตร

04:52.800 --> 04:55.910
ตอนนี้เรากำลังดูวัตถุนี้ โดยพื้นฐานแล้ว

04:55.910 --> 04:58.207
ตอนนี้อยู่ใน objValidatorConfig

04:59.310 --> 05:05.110
แน่นอนว่าเราอาจไม่พบสิ่งนี้หากเราพยายามตรวจสอบความถูกต้องของออบเจกต์ของเราซึ่งไม่ได้ลงทะเบียนไว้

05:05.110 --> 05:08.270
ดังนั้นหากเราไม่มีการกำหนดค่าตัวตรวจสอบความถูกต้อง

05:08.270 --> 05:11.640
หากเราไม่พบสิ่งใดในนั้น ฉันต้องการคืนค่าจริงเพราะสิ่งนี้ถูกต้องแน่นอน

05:11.640 --> 05:14.010
ใช่ไหม

05:14.010 --> 05:15.330
ไม่มีอะไรที่จะตรวจสอบได้

05:15.330 --> 05:18.350
ดังนั้นวัตถุนั้นถูกต้องอย่างแน่นอน

05:18.350 --> 05:20.900
มิฉะนั้น หากเราพบมัน ฉันต้องการให้วนซ้ำวัตถุภายในนี้ด้วย

05:20.900 --> 05:24.910
for in loop

05:24.910 --> 05:29.560
ด้วยเหตุนี้ฉันจึงวนซ้ำคุณสมบัติของฉันที่ฉันลงทะเบียนตัวตรวจสอบความถูกต้องด้วย

05:29.560 --> 05:33.007
const prop ใน objValidatorConfig

05:34.380 --> 05:39.630
สิ่งนี้ทำให้ฉันสามารถเข้าถึงชื่อคุณสมบัติทั้งหมดที่เราอาจมีตัวตรวจสอบความถูกต้อง

05:39.630 --> 05:43.970
แน่นอนว่าตอนนี้ฉันต้องผ่านตัวตรวจสอบทั้งหมดที่เราอาจมีสำหรับพร็อพเพอร์ตี้

05:43.970 --> 05:47.680
นี่ควรเป็นอาร์เรย์เสมอแม้ว่าเราจะเพิ่มตัวตรวจสอบความถูกต้องเพียงตัวเดียวก็ตาม

05:47.680 --> 05:49.530
ตอนนี้เราสามารถใช้ for of

05:49.530 --> 05:53.040
loop และรับตัวตรวจสอบความถูกต้องที่เรามีสำหรับ

05:53.040 --> 05:56.930
objValidatorConfig สำหรับคุณสมบัติที่กำหนดนี้

05:56.930 --> 06:02.963
ตอนนี้เราได้รับค่าบวกหรือค่าที่จำเป็น ซึ่งถูกเก็บไว้ในค่าคงที่ของตัวตรวจสอบความถูกต้อง

06:04.080 --> 06:06.110
จากนั้นเราอาจมีคำสั่ง switch ที่นี่

06:06.110 --> 06:09.810
หรือเรียกฟังก์ชันภายนอกตามตัวตรวจสอบความถูกต้องที่เราพบ

06:09.810 --> 06:12.130
แต่ที่นี่ฉันจะใช้คำสั่ง switch ในตัว

06:12.130 --> 06:16.620
เปิดตัวตรวจสอบความถูกต้อง และโดยพื้นฐานแล้วจะมีกรณีที่แตกต่างกัน

06:16.620 --> 06:19.683
ตัวอย่างเช่น กรณีที่จำเป็นที่นี่

06:20.800 --> 06:22.163
หึหึ แบบนี้

06:23.470 --> 06:28.950
ในที่นี้ ฉันต้องการคืนค่า true ถ้าทรัพย์สินของเรา ซึ่งเรากำลังดูอยู่...

06:28.950 --> 06:33.260
ดังนั้นคุณสมบัตินี้บนวัตถุนี้จึงมีค่าไม่ว่าง

06:33.260 --> 06:38.260
ดังนั้นฉันจะคืนค่าจริงหาก obj prop เป็นความจริง

06:39.170 --> 06:44.420
และเพื่อแปลงค่านี้เป็นค่าจริงหรือค่าเท็จ เราสามารถใช้ตัวดำเนินการดับเบิ้ลแบง

06:44.420 --> 06:46.840
ตอนนี้ฉันได้ยินคำบ่นประเภทที่ไม่รู้ว่าออบเจกต์มีคุณสมบัตินี้หรือไม่

06:46.840 --> 06:53.560
ดังนั้น เราควรเปลี่ยนสิ่งนี้เป็นใดๆ เพื่อให้มีความยืดหยุ่นมากขึ้นที่นี่

06:53.560 --> 06:56.150
แน่นอนคุณสามารถทำงานกับประเภทได้ที่นี่

06:56.150 --> 07:00.480
และตัวอย่างเช่น เปลี่ยนตัวระบุของคุณที่นี่เป็นประเภทที่กำหนดไว้อย่างชัดเจนซึ่ง

07:00.480 --> 07:05.490
Enums ที่คุณทำงานด้วย และอาจปรับปรุงการพิมพ์ที่นี่ด้วย

07:05.490 --> 07:07.420
แม้ว่าพูดตามตรงแล้ว เนื่องจากฉันต้องการให้สิ่งนี้ทำงานกับอ็อบเจกต์ใดๆ

07:07.420 --> 07:09.960
ก็ได้ มันจึงยากที่จะปรับปรุงสิ่งนี้ในแบบที่ TypeScript

07:09.960 --> 07:11.810
จะชอบ

07:11.810 --> 07:13.330
เราสามารถทำงานกับประเภททั่วไปได้

07:13.330 --> 07:22.110
แต่จากนั้นอีกครั้ง เราจำเป็นต้องจำกัดตัวเองว่าวัตถุใดประเภททั่วไปควรขยายและยอมรับดังนั้น

07:22.110 --> 07:27.880
ดังนั้นอาจเป็นตัวเลือกที่ดีที่สุดของเราที่นี่เพื่อให้มีความยืดหยุ่นและยอมรับวัตถุต่างๆ

07:27.880 --> 07:30.640
มากมายในฟังก์ชันตรวจสอบความถูกต้องนี้

07:30.640 --> 07:34.750
กลับไปที่ส่วนของสวิตช์ กรณีที่จำเป็นคือกรณีที่เป็นไปได้หนึ่งกรณี

07:34.750 --> 07:37.650
เรายังมีกรณีเชิงบวกที่เราต้องการจัดการ

07:37.650 --> 07:43.770
และฉันต้องการคืนค่าจริงหากคุณสมบัติที่เรากำลังดูมีค่ามากกว่าศูนย์

07:43.770 --> 07:47.260
ดังนั้น ถ้า object prop มากกว่า 0 ก็จะ return

07:47.260 --> 07:50.463
จริง มิฉะนั้น ก็จะ return เท็จ

07:52.890 --> 07:59.310
ทีนี้ถ้าเราไม่ทำให้มันอยู่ในบล็อกนี้ หรือถ้าเรามีลูปที่ไม่วนซ้ำอะไรเลยเพราะเรายังไม่ได้ลงทะเบียนตัวตรวจสอบความถูกต้อง

07:59.310 --> 08:10.280
เราก็ส่งอาร์เรย์ว่างตรงนี้หรือบางอย่าง ดังนั้นถ้าคุณผ่านมันไปได้ สิ่งนี้สำหรับการวนซ้ำฉันจะคืนค่าจริงเป็นค่าเริ่มต้นเช่นกัน

08:10.280 --> 08:14.503
และตอนนี้เราส่งคืนบางสิ่งในทุกสถานการณ์ และเราสามารถใช้การตรวจสอบได้

08:15.450 --> 08:19.253
มาดูกันว่ามันใช้ได้หรือไม่ หากตอนนี้เราบันทึกสิ่งนี้ และเราโหลดแอปของเราใหม่ที่นี่

08:23.610 --> 08:26.330
และฉันพยายามส่งสิ่งนี้ เราได้รับข้อผิดพลาด ข้อมูลไม่ถูกต้อง

08:26.330 --> 08:29.400
โปรดลองอีกครั้ง

08:29.400 --> 08:30.780
ถ้าฉันป้อนข้อความที่นี่:

08:30.780 --> 08:38.100
JavaScript The Complete Guide ฉันยังคงได้รับข้อความนี้เพราะหมายเลขของฉันผิด

08:38.100 --> 08:40.440
ถ้าผมใส่ลบหนึ่งตรงนี้ เราจะได้นี่ด้วย

08:40.440 --> 08:42.020
เพราะนั่นไม่ใช่ค่าบวก

08:42.020 --> 08:45.020
ถ้าฉันป้อนตัวเลขที่เป็นบวก มันก็ใช้ได้

08:45.020 --> 08:49.860
ถ้าฉันมีเลขบวกแต่ฟิลด์แรกว่างเปล่า วิธีนี้ก็ใช้ได้เช่นกัน

08:49.860 --> 08:52.190
นั่นคือสิ่งที่เราต้องแก้ไข

08:52.190 --> 08:54.600
มาดูกันว่าปัญหาคืออะไร

08:54.600 --> 08:57.380
และเพื่อให้ทราบว่าฉันจะเพิ่มบันทึกคอนโซลเล็กๆ

08:57.380 --> 09:00.720
น้อยๆ ที่นี่ และบันทึกคุณสมบัติที่เรากำลังดูอยู่

09:00.720 --> 09:03.513
แน่นอน เราสามารถใช้เบรกพอยต์และเครื่องมือสำหรับนักพัฒนาได้

09:04.820 --> 09:09.250
ตอนนี้ ถ้าฉันคลิกบันทึกที่นี่ คุณจะเห็นสิ่งแรกที่ได้รับการตรวจสอบที่นี่คือราคา

09:09.250 --> 09:10.623
และหลังจากนั้นเราจะหยุด

09:11.530 --> 09:15.100
ราคาจึงเป็นคุณสมบัติแรกที่ได้รับการตรวจสอบ

09:15.100 --> 09:16.980
และนั่นคือสิ่งที่น่าสนใจที่นี่ ราคาเป็นเพียงอสังหาริมทรัพย์เท่านั้นที่สำคัญที่นี่

09:16.980 --> 09:22.230
เพราะเราส่งคืนในการตรวจสอบความถูกต้อง

09:22.230 --> 09:25.840
นั่นหมายความว่าในครั้งแรกที่เราพบตัวตรวจสอบความถูกต้องที่คืนค่าจริงหรือเท็จ

09:25.840 --> 09:31.480
เราจะส่งคืนทันทีและเราไม่สนใจตัวตรวจสอบความถูกต้องอื่นๆ

09:31.480 --> 09:33.320
ในกรณีของ False นี้ไม่เป็นไรเพราะหากองค์ประกอบหนึ่งเป็นเท็จ

09:33.320 --> 09:40.140
หากคุณสมบัติหนึ่งเป็นเท็จ แสดงว่าไม่ถูกต้อง เราก็ไม่เป็นไรแม้แต่จะดูองค์ประกอบอื่นๆ

09:40.140 --> 09:42.590
แต่สำหรับกรณีที่แท้จริงแล้ว มันคือปัญหา

09:42.590 --> 09:44.970
หากเราคืนค่าจริงในครั้งแรกที่พร็อพเพอร์ตี้หนึ่งตรงกับความคาดหวังของเรา

09:44.970 --> 09:49.410
แสดงว่าเรามีปัญหา

09:49.410 --> 09:51.540
ดังนั้นเราควรปรับปรุงสิ่งนี้โดยมีคุณสมบัติ

09:51.540 --> 09:55.130
isValid ที่นี่ ซึ่งในตอนแรกเป็นจริง

09:55.130 --> 09:56.780
เป็นตัวแปรที่ถูกต้อง ฉันหมายถึง

09:56.780 --> 10:01.780
แล้วตรงนี้ เราตั้งค่า isValid เท่ากับ isValid และนี่ตรงนี้

10:03.857 --> 10:08.857
และเหมือนกันข้างล่างนี้ ตั้งค่านี่เท่ากับนี่

10:09.570 --> 10:11.290
เพื่อที่เราจะไม่กลับมาทันที

10:11.290 --> 10:16.700
แต่เราเพียงแค่อัปเดต isValid และเราหยุดหลังจากนั้นเพื่อไม่ให้ผ่าน

10:16.700 --> 10:19.200
ผลที่ได้คือในท้ายที่สุดหลังจากการวนรอบเหล่านี้ทั้งหมดแล้ว

10:19.200 --> 10:22.710
ถูกต้อง ยังคงเป็นจริง แต่ทันทีที่หนึ่งในการตรวจสอบเหล่านี้เป็นเท็จ

10:22.710 --> 10:33.000
ต้องขอบคุณวิธีการทำงานของ JavaScript ค่า isValid โดยรวมจะเป็นเท็จ เนื่องจากค่าจริงรวมกับค่าเท็จ กลับเป็นเท็จ

10:33.000 --> 10:36.020
จากนั้นเราควรคืนค่า isValid

10:36.020 --> 10:39.330
ตอนนี้เรามั่นใจว่าคุณสมบัติทั้งหมดได้รับการตรวจสอบแล้ว

10:39.330 --> 10:42.433
ไม่ใช่เฉพาะ JavaScript ตัวแรกที่มีการตรวจสอบ

10:43.320 --> 10:45.460
อย่างไรก็ตาม นี่จะไม่ใช่ปัญหาเดียวของเรา

10:45.460 --> 10:50.480
เรายังมีปัญหาที่นี่เมื่อเราดูวิธีที่เราลงทะเบียนตรรกะตัวตรวจสอบความถูกต้องของเรา

10:50.480 --> 10:57.130
ฉันมักจะเขียนทับตัวตรวจสอบความถูกต้องที่ลงทะเบียนสำหรับชื่อคลาสที่กำหนดด้วยวัตถุใหม่

10:57.130 --> 11:00.050
เราควรเพิ่มตัวตรวจสอบความถูกต้องที่มีอยู่ที่นี่แทน

11:00.050 --> 11:01.630
เพื่อไม่ให้เราทำเช่นนั้น

11:01.630 --> 11:08.130
ตัวอย่างเช่น เรามีตัวดำเนินการสเปรดเช่นนั้นเพื่อใช้คู่ค่าคีย์ที่มีอยู่สำหรับชื่อคลาสนั้นบนตัวตรวจสอบความถูกต้องที่ลงทะเบียน

11:08.130 --> 11:10.870
และเพิ่มสิ่งนั้นก่อนที่เราจะเพิ่มคู่ของเรา

11:10.870 --> 11:14.413
และแน่นอนลงไปที่นั่นด้วย

11:16.890 --> 11:21.980
และในตอนนี้ ถ้าเราบันทึกสิ่งนี้ และเรากลับไปที่แอปพลิเคชันของเราที่นี่

11:21.980 --> 11:24.150
ถ้าฉันว่างทั้งคู่ เราก็ล้มเหลว

11:24.150 --> 11:26.280
หากเราป้อนราคาที่ถูกต้อง แต่เรามีชื่อไม่ถูกต้อง

11:26.280 --> 11:28.490
เราจะล้มเหลว

11:28.490 --> 11:31.510
หากถูกต้องทั้งสองอย่าง เราก็ทำสำเร็จ

11:31.510 --> 11:35.570
ถ้าเรามีชื่อที่ถูกต้อง แต่ไม่มีราคา แสดงว่าเราล้มเหลว

11:35.570 --> 11:37.230
นอกจากนี้ยังมีราคาติดลบ

11:37.230 --> 11:44.500
ดังนั้นตอนนี้จึงดูดีสำหรับฉัน และนี่คือการใช้งานแบบไร้เดียงสาครั้งแรกของเราว่าตัวตรวจสอบดังกล่าวสามารถทำงานอย่างไรด้วยความช่วยเหลือจากตัวตกแต่ง

11:44.500 --> 11:46.670
TypeScript

11:46.670 --> 11:49.150
และโปรดจำไว้ว่าทั้งหมดนั้นที่นี่ ผู้ตกแต่งทั้งหมด

11:49.150 --> 11:53.590
ฟังก์ชันตรวจสอบความถูกต้อง และรีจิสตรี จะถูกซ่อนไว้ไม่ให้คุณเห็น

11:53.590 --> 11:56.780
นั่นอาจเป็นส่วนหนึ่งของไลบรารีของบุคคลที่สามที่คุณกำลังดำเนินการอยู่

11:56.780 --> 12:01.300
ซึ่งแน่นอนว่าเป็นวิธีที่ซับซ้อนกว่าที่คุณแชร์กับผู้ใช้ปลายทาง

12:01.300 --> 12:04.160
และคุณในฐานะผู้ใช้ จะเพียงแค่นำเข้าสิ่งเหล่านี้ เพิ่มตัวตกแต่งเหล่านี้

12:04.160 --> 12:11.763
และเรียกใช้การตรวจสอบความถูกต้อง และคุณจะมีวิธีที่สะดวกมากในการเพิ่มการตรวจสอบความถูกต้องให้กับชั้นเรียนของคุณ
