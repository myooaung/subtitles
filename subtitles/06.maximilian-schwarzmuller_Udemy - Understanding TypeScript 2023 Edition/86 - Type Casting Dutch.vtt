WEBVTT

00:02.260 --> 00:03.920
Dus, gediscrimineerde vakbonden.

00:03.920 --> 00:05.750
Echt, echt nuttig.

00:05.750 --> 00:09.060
Een andere zeer nuttige functie is type casting.

00:09.060 --> 00:12.640
Type casting helpt u TypeScript te vertellen dat een

00:12.640 --> 00:15.350
bepaalde waarde van een specifiek type

00:15.350 --> 00:19.240
is waarbij TypeScript dat zelf niet kan detecteren, maar

00:19.240 --> 00:22.660
u als ontwikkelaar weet dat het zo zal zijn.

00:22.660 --> 00:25.030
Een goed voorbeeld hiervan is als we

00:25.030 --> 00:27.120
X naar iets in de dom krijgen.

00:27.120 --> 00:29.560
Laten we zeggen dat we een paragraaf in de dom hebben,

00:29.560 --> 00:32.180
alleen een paragraaf, niets anders erin, en het is een

00:32.180 --> 00:33.390
lege paragraaf.

00:33.390 --> 00:35.190
Dus als we dat opslaan, zien

00:35.190 --> 00:37.150
we niets op het scherm.

00:37.150 --> 00:38.950
Nu hebben we toegang tot die paragraaf

00:38.950 --> 00:40.543
vanuit ons script hier.

00:43.160 --> 00:48.160
Const paragraaf met document query selector P, bijvoorbeeld.

00:49.180 --> 00:51.890
Als we query selector gebruiken en we geven P door

00:51.890 --> 00:54.500
als selector, zodat het selecteert door de P tag,

00:54.500 --> 00:57.070
dan kan TypeScript uitzoeken, zoals je kunt zien

00:57.070 --> 00:59.510
als ik er met de muis overheen ga, dat dit van

00:59.510 --> 01:02.480
het type paragraaf element of null is, omdat zo'n element

01:02.480 --> 01:07.050
misschien niet bestaat in de pagina, maar dat is iets anders.

01:07.050 --> 01:09.920
Laten we de of null case voor nu negeren.

01:09.920 --> 01:12.400
Het belangrijkste is dat TypeScript daadwerkelijk

01:12.400 --> 01:14.600
ontdekt dat dit een paragraaf-element is.

01:14.600 --> 01:16.800
Dit verandert als we selecteren op iets anders,

01:16.800 --> 01:18.460
bijvoorbeeld een ID.

01:18.460 --> 01:22.020
We noemen dit hier message-output, dus deze paragraaf heeft

01:22.020 --> 01:23.920
een ID van message-output.

01:23.920 --> 01:25.890
Nu weten wij als ontwikkelaar natuurlijk

01:25.890 --> 01:28.360
dat we deze ID aan deze paragraaf hebben toegekend, maar

01:28.360 --> 01:29.780
TypeScript weet dat niet.

01:29.780 --> 01:33.020
TypeScript duikt niet in onze HTML-bestanden en

01:33.020 --> 01:34.590
analyseert ze niet.

01:34.590 --> 01:37.360
Dus als we nu selecteren op die ID, bijvoorbeeld

01:37.360 --> 01:41.720
met getElementById, dan zien we dat TypeScript daaruit afleidt

01:41.720 --> 01:45.130
dat dit gewoon een HTML element of null is, het weet

01:45.130 --> 01:49.830
niet welk specifiek HTML element dat is.

01:49.830 --> 01:52.720
Voor een paragraaf maakt dat misschien niet zoveel

01:52.720 --> 01:54.830
uit, misschien willen we er gewoon dingen

01:54.830 --> 01:57.290
mee doen die we met elk HTML-element kunnen doen,

01:57.290 --> 01:59.990
bijvoorbeeld de tekstinhoud ervan openen of iets

01:59.990 --> 02:01.470
dergelijks.

02:01.470 --> 02:03.220
Maar wat als we hier een inbreng hadden?

02:03.220 --> 02:07.750
Wat als we eigenlijk een input type tekst hadden, en we willen de waarde krijgen

02:07.750 --> 02:10.430
die de gebruiker heeft ingevoerd, dus ik geef

02:10.430 --> 02:12.760
het een ID van user-input en nu selecteer

02:12.760 --> 02:15.500
ik dit in mijn TypeScript code.

02:15.500 --> 02:17.730
Dus hier selecteer ik op ID user-input,

02:17.730 --> 02:21.530
en het is niet langer een paragraaf, maar userInputElement.

02:21.530 --> 02:24.023
Nu weten wij als ontwikkelaar dat we hier dit invoerelement

02:24.909 --> 02:26.700
bereiken, maar zoals ik al zei, TypeScript

02:26.700 --> 02:28.530
weet dat niet.

02:28.530 --> 02:31.140
TypeScript leest onze HTML-code niet, dus TypeScript

02:31.140 --> 02:34.435
weet alleen dat het een of ander HTML-element is.

02:34.435 --> 02:37.860
Nu, als ik de waarde-eigenschap van dit dus zou

02:37.860 --> 02:40.902
willen instellen, en het zou proberen om

02:40.902 --> 02:45.000
userInputElement. waarde gelijk is, zie je dat ik eigenlijk

02:45.000 --> 02:47.050
een foutmelding krijg.

02:47.050 --> 02:48.960
Ik krijg een foutmelding omdat ten eerste,

02:48.960 --> 02:50.780
dit object mogelijk null is.

02:50.780 --> 02:54.220
We kunnen dit oplossen door hier een uitroepteken achter

02:54.220 --> 02:56.210
te zetten, en daar kom ik zo op terug,

02:56.210 --> 02:58.390
maar zelfs dan krijg ik nog steeds

02:58.390 --> 03:01.640
de foutmelding dat de waarde niet bestaat op het type

03:01.640 --> 03:03.890
HTML Element omdat dit generieke type,

03:03.890 --> 03:08.343
dat in principe elk HTML element als type heeft, geen eigenschappen

03:08.343 --> 03:11.630
ondersteunt die specifiek zijn voor, nou ja, specifieke

03:11.630 --> 03:14.510
HTML elementen.

03:14.510 --> 03:17.540
We moeten TypeScript dus vertellen dat

03:17.540 --> 03:20.860
wat we hier selecteren niet alleen niet null

03:20.860 --> 03:25.080
is, maar dat het ook van het type HTMLInputElement is.

03:25.080 --> 03:28.240
En dat is wat we kunnen doen met type casting.

03:28.240 --> 03:31.153
Nu zijn er twee manieren van type casting, twee syntaxen

03:31.153 --> 03:34.170
die we kunnen gebruiken, en ze zijn gelijkwaardig.

03:34.170 --> 03:36.971
Een daarvan is dat we iets toevoegen voor het ding

03:36.971 --> 03:41.920
dat we willen converteren, of waar we TypeScript willen vertellen te typen.

03:41.920 --> 03:44.170
We voegen hoekige haakjes toe die openen

03:44.170 --> 03:45.810
en sluiten en dan tussen deze

03:45.810 --> 03:49.480
haakjes, het type van het ding na de hoekige haakjes.

03:49.480 --> 03:51.223
In dit geval, HTMLInputElement.

03:53.110 --> 03:54.970
En dit type is wereldwijd beschikbaar

03:54.970 --> 03:57.963
omdat ik in mijn tsconfig bestand de dom lib opneem.

03:59.180 --> 04:00.810
Daarmee weet TypeScript

04:00.810 --> 04:03.830
dat wat we hier ook selecteren na de haakjes van

04:03.830 --> 04:06.530
het type HTMLInputElement zal zijn, en

04:06.530 --> 04:08.950
daarom klaagt het niet meer.

04:08.950 --> 04:10.330
Dus, dit is versie één.

04:10.330 --> 04:12.830
Laat me dat kopiëren en becommentariëren

04:12.830 --> 04:14.750
en u het alternatief tonen.

04:14.750 --> 04:18.000
Dit werkt absoluut prima en je kunt dit gebruiken.

04:18.000 --> 04:21.210
Nu, als je React kent, weet je echter dat je daar

04:21.210 --> 04:24.400
ook zo'n schuine haak syntaxis hebt binnen

04:24.400 --> 04:26.970
JavaScript of TypeScript als je dat

04:26.970 --> 04:29.200
gebruikt voor React bestanden,

04:29.200 --> 04:33.550
waar je JSX code schrijft in je React componenten.

04:33.550 --> 04:36.060
Als je React niet kent, zegt dat je misschien niet veel.

04:36.060 --> 04:40.800
Houd er rekening mee dat een soortgelijke syntaxis bestaat in React-projecten en daar

04:40.800 --> 04:43.320
worden de schuine haakjes niet gebruikt om informatie

04:43.320 --> 04:47.480
door te geven over de types die je gebruikt, maar in plaats daarvan worden ze

04:47.480 --> 04:50.390
geparsed door sommige build tools en door React, uiteindelijk,

04:50.390 --> 04:54.390
om te weten wat je op het scherm wilt weergeven.

04:54.390 --> 04:56.750
Dus helemaal los van TypeScript.

04:56.750 --> 04:59.880
Om niet te botsen met die JSX-syntaxis biedt het TypeScript-team

04:59.880 --> 05:01.900
een alternatief voor deze type casting

05:01.900 --> 05:04.350
met haakjes.

05:04.350 --> 05:06.450
U kunt ook iets toevoegen na het ding

05:06.450 --> 05:07.920
dat u wilt gieten, dus na

05:07.920 --> 05:09.960
deze selectie in dit geval, en dat

05:09.960 --> 05:12.600
ding is het als sleutelwoord.

05:12.600 --> 05:14.740
En dan voeg je hier weer het type toe

05:14.740 --> 05:16.750
waarnaar je dit wilt gieten.

05:16.750 --> 05:19.970
Dit vertelt TypeScript dus dat de uitdrukking

05:19.970 --> 05:23.730
ervoor, in dit geval deze uitdrukking hier, een waarde

05:23.730 --> 05:27.405
van het type HTMLInputElement zal opleveren.

05:27.405 --> 05:30.067
Daarom krijgen we opnieuw geen fout.

05:30.067 --> 05:31.650
Dus, dit is een alternatief,

05:31.650 --> 05:33.940
en u kunt een van de twee syntaxen gebruiken,

05:33.940 --> 05:36.350
wat u ook verkiest, u moet gewoon proberen

05:36.350 --> 05:38.990
consistent te zijn in uw hele project, zodat

05:38.990 --> 05:42.377
u deze twee syntaxen niet afwisselt.

05:42.377 --> 05:45.220
En daarmee kunt u deze waardevolle extra informatie

05:45.220 --> 05:47.480
doorgeven aan TypeScript en code als

05:47.480 --> 05:50.400
deze laten werken, ook al zou TypeScript zelf

05:50.400 --> 05:52.760
niet kunnen achterhalen dat dit hier

05:52.760 --> 05:56.000
een HTMLInputElement oplevert.

05:56.000 --> 05:57.940
Natuurlijk, aangezien je TypeScript dwingt

05:57.940 --> 06:00.420
dit type te gebruiken, is het jouw verantwoordelijkheid

06:00.420 --> 06:02.200
als ontwikkelaar om ervoor te zorgen

06:02.200 --> 06:05.620
dat wat deze expressie ook oplevert van dat type zal zijn.

06:05.620 --> 06:07.700
Anders zou u een fout kunnen krijgen of onverwacht

06:07.700 --> 06:09.920
gedrag bij het uitvoeren als u met dat element

06:09.920 --> 06:12.780
probeert te interageren op een manier die eigenlijk niet

06:12.780 --> 06:14.423
wordt ondersteund.

06:15.610 --> 06:18.060
Type casting is dus een krachtige functie.

06:18.060 --> 06:20.490
Dit uitroepteken hier ook.

06:20.490 --> 06:22.590
Ik heb dit al eerder in

06:22.590 --> 06:24.820
de cursus onderzocht.

06:24.820 --> 06:27.470
Met dit uitroepteken kunnen we TypeScript vertellen

06:27.470 --> 06:31.090
dat de uitdrukking ervoor nooit null zal opleveren.

06:31.090 --> 06:33.170
En dit is nodig voor sommige expressies,

06:33.170 --> 06:35.070
zoals deze hier, wanneer je iets uit

06:35.070 --> 06:38.010
de dom selecteert dat misschien null teruggeeft.

06:38.010 --> 06:40.980
Als we als ontwikkelaar weten dat dit nooit nul zal opleveren,

06:40.980 --> 06:43.690
dan kunnen we dit uitroepteken gebruiken.

06:43.690 --> 06:45.470
Anders, en dat heb je al geleerd,

06:45.470 --> 06:48.248
wil ik het nog eens herhalen.

06:48.248 --> 06:49.380
Anders, als je niet zeker

06:49.380 --> 06:52.600
bent dat dit niet null teruggeeft, kun je een if check gebruiken.

06:52.600 --> 06:56.070
Je zou dus kunnen controleren of userInputElement waar

06:56.070 --> 06:57.510
is, en dus niet null, en

06:57.510 --> 06:59.440
het dan daarin gebruiken.

06:59.440 --> 07:02.720
Nu moest ik in dit geval de type-casting verwijderen, want

07:02.720 --> 07:04.670
als we hier type-casten, vertellen

07:04.670 --> 07:07.170
we TypeScript ook dat dit niet null is, en omdat

07:07.170 --> 07:10.470
ik daar niet zeker van ben, kan ik hier niet casten.

07:10.470 --> 07:13.120
In plaats daarvan moet ik dat hier doen wanneer ik de waarde

07:13.120 --> 07:14.290
gebruik, en daarom wil ik

07:14.290 --> 07:16.600
dat doen voordat ik de waarde-eigenschap benader,

07:16.600 --> 07:19.820
door als HTMLInputElement toe te voegen zoals dit.

07:19.820 --> 07:21.530
Maar dat zou natuurlijk mislukken.

07:21.530 --> 07:24.060
Dit is ongeldige syntax, je zou proberen toegang

07:24.060 --> 07:28.030
te krijgen tot een waarde-eigenschap op een HTMLInputElement ding,

07:28.030 --> 07:30.280
en dit heeft zelfs geen zin.

07:30.280 --> 07:33.010
We moeten deze uitdrukking gewoon tussen haakjes zetten,

07:33.010 --> 07:35.670
dan zorgen dat deze eerst geëvalueerd wordt, en dan proberen

07:35.670 --> 07:37.590
we toegang te krijgen tot de waarde op het

07:37.590 --> 07:39.480
resultaat van deze uitdrukking.

07:39.480 --> 07:41.650
En nu hebben we een alternatief voor

07:41.650 --> 07:42.893
het uitroepteken.
