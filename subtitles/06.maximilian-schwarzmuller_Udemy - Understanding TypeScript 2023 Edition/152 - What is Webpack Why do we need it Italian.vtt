WEBVTT

00:02.050 --> 00:04.090
Istruttore: Quindi quale svantaggio abbiamo?

00:04.090 --> 00:06.030
Questo è il progetto su cui abbiamo

00:06.030 --> 00:08.020
lavorato, suddiviso in più file

00:08.020 --> 00:12.390
utilizzando queste importazioni di moduli ES6.

00:12.390 --> 00:15.620
Ora, costruiamo effettivamente questo progetto

00:15.620 --> 00:18.400
e, come abbiamo fatto in precedenza, possiamo

00:18.400 --> 00:21.930
eseguire npm-start per avviare il server lite.

00:21.930 --> 00:24.710
E naturalmente, cosa molto importante, in una nuova

00:24.710 --> 00:26.367
scheda, eseguite tsc-dash per

00:27.820 --> 00:31.430
avviare la compilazione di TypeScript in modalità watch.

00:31.430 --> 00:35.590
Questo ci dà il nostro progetto e se ora apriamo la scheda Rete negli

00:35.590 --> 00:39.570
strumenti di sviluppo del browser e ricarichiamo questo file,

00:39.570 --> 00:42.360
vedremo lo svantaggio o il problema che abbiamo

00:42.360 --> 00:44.840
con questa configurazione.

00:44.840 --> 00:47.490
Vediamo una serie di richieste HTTP.

00:47.490 --> 00:49.160
Ora potete ignorare gli ultimi, che

00:49.160 --> 00:51.380
provengono dal nostro server di sviluppo.

00:51.380 --> 00:58.290
Ma tutte queste sono le nostre richieste qui ad app. js, project-input.

00:58.290 --> 00:58.290
js, project-list. js, componente base. js

00:58.290 --> 01:00.960
e on questo è il problema.

01:00.960 --> 01:04.610
Noterete che tutti questi file non sono così grandi, ma

01:04.610 --> 01:06.320
relativamente piccoli.

01:06.320 --> 01:07.590
Questo naturalmente

01:07.590 --> 01:11.010
va bene, ma abbiamo molte richieste HTTP.

01:11.010 --> 01:12.600
Qual è il problema?

01:12.600 --> 01:15.070
Il problema è evidente se guardiamo

01:15.070 --> 01:17.810
la cascata qui a destra.

01:17.810 --> 01:20.330
Ogni richiesta HTTP che deve essere effettuata

01:20.330 --> 01:22.470
richiede ovviamente un po' di tempo.

01:22.470 --> 01:24.480
Ci vuole tempo per scaricare i file,

01:24.480 --> 01:27.760
ma dato che non sono molto grandi, non è un problema.

01:27.760 --> 01:31.390
Ma ogni richiesta HTTP ha una sorta di overhead di base,

01:31.390 --> 01:34.540
una durata di base che richiede sempre.

01:34.540 --> 01:38.570
Questo piccolo riquadro che vedete davanti a questi grafici qui.

01:38.570 --> 01:41.250
È quasi il tempo necessario al browser per

01:41.250 --> 01:43.910
impostare la richiesta e inviarla.

01:43.910 --> 01:46.280
Quindi, mentre il download effettivo del

01:46.280 --> 01:49.600
file può essere relativamente veloce, l'impostazione della

01:49.600 --> 01:52.860
richiesta, l'esecuzione del lavoro sul server che serve

01:52.860 --> 01:55.310
il file e tutto ciò richiede del tempo.

01:55.310 --> 01:57.890
Ora abbiamo una configurazione molto veloce, perché

01:57.890 --> 02:00.310
tutto avviene sulla nostra macchina.

02:00.310 --> 02:03.020
Abbiamo un server di sviluppo locale.

02:03.020 --> 02:06.160
Se si distribuisce sul web, un numero così elevato

02:06.160 --> 02:08.690
di richieste può introdurre una latenza

02:08.690 --> 02:11.140
elevata e rallentare il progetto a causa

02:11.140 --> 02:14.760
della quantità di richieste HTTP effettuate.

02:14.760 --> 02:17.280
Quindi, se riuscissimo a trovare una soluzione

02:17.280 --> 02:21.370
per ridurre la quantità di richieste HTTP, sarebbe fantastico.

02:21.370 --> 02:24.020
Ed è qui che entra in gioco webpack.

02:24.020 --> 02:28.190
Si può andare su webpack. js. org, per saperne di più.

02:28.190 --> 02:30.290
Alla fine webpack è uno strumento

02:30.290 --> 02:33.750
che ci aiuta a raggruppare i nostri file.

02:33.750 --> 02:36.530
E posso davvero raccomandare la loro ampia e completa

02:36.530 --> 02:39.980
documentazione che trovate sulla loro pagina.

02:39.980 --> 02:42.300
Se volete imparare tutto su webpack.

02:42.300 --> 02:44.820
In questo corso, utilizzeremo alcune funzioni selezionate

02:44.820 --> 02:46.563
che ci aiutano con TypeScript.

02:47.560 --> 02:49.850
Che cos'è esattamente webpack?

02:49.850 --> 02:53.850
È uno strumento di raggruppamento e si potrebbe dire di orchestrazione della costruzione.

02:53.850 --> 02:56.190
È uno strumento che ci aiuta a ridurre la

02:56.190 --> 02:59.560
quantità di richieste HTTP raggruppando il codice.

02:59.560 --> 03:03.010
In questo modo scriviamo codice suddiviso in più file,

03:03.010 --> 03:05.390
ma webpack prende tutti questi file e

03:05.390 --> 03:07.050
li raggruppa insieme.

03:07.050 --> 03:10.050
Inoltre webpack è in grado di fare di più.

03:10.050 --> 03:13.920
Inoltre, ottimizzerà il nostro codice e ci permetterà di aggiungere altri

03:13.920 --> 03:17.760
passaggi di compilazione, altri strumenti di compilazione, ad esempio,

03:17.760 --> 03:20.410
per aiutarci con i file CSS e così via.

03:20.410 --> 03:23.180
In questo modulo, però, non vedremo questo aspetto,

03:23.180 --> 03:26.220
perché voglio concentrarmi su webpack e TypeScript.

03:26.220 --> 03:28.710
Diamo prima di tutto un'occhiata alla nostra configurazione

03:28.710 --> 03:30.700
normale, in cui non usiamo webpack.

03:30.700 --> 03:32.800
Abbiamo più file TypeScript, ma se

03:32.800 --> 03:34.870
utilizziamo queste importazioni,

03:34.870 --> 03:36.920
otteniamo più richieste HTTP, il

03:36.920 --> 03:40.220
che non è il massimo per i motivi che ho menzionato.

03:40.220 --> 03:43.450
Inoltre, un argomento che non ho mai affrontato prima

03:43.450 --> 03:47.670
è che molto probabilmente abbiamo anche del codice non ottimizzato,

03:47.670 --> 03:51.290
il che significa che non è il più piccolo possibile.

03:51.290 --> 03:53.330
Possiamo certamente ottimizzare maggiormente

03:53.330 --> 03:55.750
il codice accorciando i nomi delle funzioni e così via.

03:55.750 --> 03:58.690
Naturalmente, vogliamo uno strumento che lo faccia automaticamente,

03:58.690 --> 04:01.030
in modo da non dover lavorare manualmente con

04:01.030 --> 04:03.000
codice illeggibile.

04:03.000 --> 04:06.080
Come sviluppatori vogliamo scrivere codice perfettamente leggibile.

04:06.080 --> 04:07.850
Ma sarebbe fantastico se avessimo

04:07.850 --> 04:10.740
uno strumento che accorciasse questo codice e lo

04:10.740 --> 04:14.960
rendesse il più piccolo possibile, usando nomi di variabili e funzioni

04:14.960 --> 04:17.170
il più corti possibile, in modo da spedire

04:17.170 --> 04:19.130
meno codice possibile.

04:19.130 --> 04:22.940
Perché meno codice significa che gli utenti possono scaricarlo più velocemente,

04:22.940 --> 04:25.530
il che significa che la nostra applicazione può avviarsi

04:25.530 --> 04:27.600
più velocemente sui nostri computer.

04:27.600 --> 04:29.440
Inoltre, nella nostra configurazione

04:29.440 --> 04:32.860
attuale, abbiamo un server di sviluppo aggiuntivo, lite-server,

04:32.860 --> 04:35.150
che è un pacchetto aggiuntivo installato,

04:35.150 --> 04:36.860
che dobbiamo avviare.

04:36.860 --> 04:39.320
Non sarebbe un piccolo bonus, un bel bonus se

04:39.320 --> 04:42.280
avessimo un solo comando che facesse tutto, costruire

04:42.280 --> 04:45.360
il nostro progetto, ma anche avviare un server che ricarichi

04:45.360 --> 04:48.170
automaticamente il nostro sito web ogni volta che cambiamo

04:48.170 --> 04:50.713
un file nel nostro progetto.

04:51.550 --> 04:54.270
Ed è qui che webpack può aiutarci.

04:54.270 --> 04:57.240
Accorpa il nostro codice in modo da avere meno importazioni,

04:57.240 --> 05:00.670
invece di avere alcuni, beh, pacchetti di codice che spediamo,

05:00.670 --> 05:05.100
ci aiuta a ottimizzare il nostro codice, a minificarlo, come viene chiamato, in

05:05.100 --> 05:06.717
modo da spedire meno codice e

05:06.717 --> 05:10.130
i nostri utenti hanno meno codice da scaricare.

05:10.130 --> 05:12.530
Possiamo anche aggiungere facilmente altri passaggi

05:12.530 --> 05:15.750
di compilazione, se lo desideriamo, possiamo aggiungere un server

05:15.750 --> 05:19.270
di sviluppo, ma possiamo anche fare molte altre cose se lo desideriamo davvero

05:19.270 --> 05:22.160
e i documenti ufficiali di webpack sono il posto giusto se volete

05:22.160 --> 05:24.130
imparare tutto su di esso.

05:24.130 --> 05:27.880
Vediamo quindi un esempio di configurazione nel nostro progetto

05:27.880 --> 05:30.433
e impariamo come utilizzare webpack.
