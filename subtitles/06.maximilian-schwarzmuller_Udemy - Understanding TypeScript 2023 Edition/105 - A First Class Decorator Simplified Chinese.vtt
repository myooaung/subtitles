WEBVTT

00:02.130 --> 00:05.620
- ：对于附件, 你会发现我们的好老启动项目,

00:05.620 --> 00:08.470
我已经启动了NPM启动服务器.

00:08.470 --> 00:12.320
以及使用TSC-W的TypeScript监视进程｡ 

00:12.320 --> 00:14.870
我们首先需要在tsconfig文件中进行配置,

00:14.870 --> 00:18.030
确保目标设置为es6, 然后,

00:18.030 --> 00:26.720
如果向下滚动, 确保在这里添加这个实验性的装饰器行｡

00:26.720 --> 00:28.380
在前面加一个逗号,

00:28.380 --> 00:31.700
然后你就可以自动套用格式了｡

00:31.700 --> 00:36.000
这一点很重要, 否则您将无法在项目中使用装饰器｡

00:36.000 --> 00:40.540
因此, 请确保调整tsconfig｡

00:40.540 --> 00:40.540
json文件｡ 

00:40.540 --> 00:46.980
有了这些, 我们就可以在应用程序中编写我们的第一个装饰器了｡

00:46.980 --> 00:46.980
ts文件中｡ 

00:46.980 --> 00:50.950
我想从一个可以添加到类中的装饰器开始｡ 

00:50.950 --> 00:54.530
装饰器通常都是关于类的, 但这是一个装饰器,

00:54.530 --> 00:58.220
我们将把它作为一个整体添加到类中｡

00:58.220 --> 01:00.730
为此, 假设我们有一个类, Person,

01:00.730 --> 01:04.360
一个非常简单的类, 我们有一个名字.

01:04.360 --> 01:07.530
可能使用Max值, 在此预先初始化｡ 

01:07.530 --> 01:10.520
这里有一个构造函数, 我只记录了Creating

01:10.520 --> 01:14.763
person对象, 这样我们就可以看到它被执行了.

01:15.880 --> 01:19.363
当然我们可以在这里创建一个新的人, 用一个新的关键字,

01:20.760 --> 01:22.910
就像这样｡

01:22.910 --> 01:26.490
如果我们愿意, 我们当然可以记录这个被创建的人｡

01:26.490 --> 01:28.330
这应该没有什么奇怪的,

01:28.330 --> 01:29.430
如果我们保存所有这些,

01:29.430 --> 01:32.090
它编译没有错误｡

01:32.090 --> 01:33.700
如果我们访问我们的页面, 然后在Localhost上：3000,

01:33.700 --> 01:41.140
在JavaScript控制台中, 我们看到来自构造函数的Creating person对象｡

01:41.140 --> 01:44.603
当然, 我们在这里都看到了人本身｡ 

01:45.810 --> 01:49.550
现在, 在这个例子中, 我们没有涉及到装饰器｡ 

01:49.550 --> 01:51.000
让我们改变一下｡ 

01:51.000 --> 01:53.370
在文件的顶部添加一个装饰器｡ 

01:53.370 --> 01:58.080
装饰器, 这一点很重要, 它最终只是一个函数｡

01:58.080 --> 02:01.280
一种应用于某事物的函数, 例如,

02:01.280 --> 02:03.530
以某种方式应用于类｡

02:03.530 --> 02:04.750
让我们在这里创建一个函数,

02:04.750 --> 02:09.523
用function关键字, 我将它命名为Logger｡

02:10.390 --> 02:13.290
这 是 一 个 函数 , 唯一 的 特殊 之 处

02:13.290 --> 02:15.570
是 我 以 大写 字母 开头 ｡

02:15.570 --> 02:16.492
顺便说一下,

02:16.492 --> 02:20.200
这不是必须的, 你不一定要用大写字母,

02:20.200 --> 02:22.470
你也可以用小写字母,

02:22.470 --> 02:25.610
你可以在库中看到很多装饰器,

02:25.610 --> 02:27.680
你可能会用大写字母,

02:27.680 --> 02:32.200
所以我在这里也这么做.

02:32.200 --> 02:39.330
这里的Logger函数是一个函数我们可以把它作为一个装饰器来使用.

02:39.330 --> 02:44.730
现在, 让我们在这里添加一个控制台日志, Logging, 这样我们就可以看到该函数何时运行｡

02:44.730 --> 02:47.300
因为我不会直接叫它｡ 

02:47.300 --> 02:50.330
我想把它作为装饰器添加到这个类中｡ 

02:50.330 --> 02:53.710
我们通过在类前面加上@符号,

02:53.710 --> 02:57.370
然后在函数前面加上.

02:57.370 --> 02:58.440
就像这样｡ 

02:58.440 --> 03:00.320
这里有几个特别的东西｡ 

03:00.320 --> 03:06.170
这里的@符号是TypeScript可以看到或识别的特殊标识符｡

03:06.170 --> 03:11.010
然后@符号后面的东西应该指向一个函数｡

03:11.010 --> 03:13.460
不是执行它, 而是指向它,

03:13.460 --> 03:15.800
它应该是你的装饰器｡

03:15.800 --> 03:17.400
现在您可以看到, Logger接受的参数太少,

03:17.400 --> 03:20.650
无法用作装饰器｡

03:20.650 --> 03:24.930
好的方面是, TypeScript知道我想在这里用它作为装饰器｡

03:24.930 --> 03:27.980
糟糕的是我们没有传递足够的参数｡ 

03:27.980 --> 03:31.000
事实上, 装饰器接收参数｡ 

03:31.000 --> 03:34.870
参数的多少取决于您在何处使用装饰器｡ 

03:34.870 --> 03:39.710
在这里, 对于一个装饰器, 我们添加到一个类, 我们得到一个参数｡ 

03:39.710 --> 03:42.910
这就是这个装饰器的目标,

03:42.910 --> 03:46.160
也就是我们的构造函数｡

03:46.160 --> 03:49.020
所以我们可以说我们得到了一个函数,

03:49.020 --> 03:51.240
作为最后的一个参数｡

03:51.240 --> 03:54.110
我们也可以将其命名为constructor,

03:54.110 --> 03:56.650
因为最后我们将得到这个类的构造函数,

03:56.650 --> 04:01.470
或者我们将这个装饰器作为参数添加到的任何类｡

04:01.470 --> 04:09.650
咱们也安慰安慰｡  这样我们就可以深入了解这个构造函数参数｡

04:09.650 --> 04:10.550
让我们来拯救这个｡ 

04:10.550 --> 04:12.750
如您所见, 它编译时没有错误｡ 

04:12.750 --> 04:14.750
如果我们现在看一下输出, 我们会看到之前的旧代码,

04:14.750 --> 04:20.810
但我们也会看到Logging输出, 以及这个被记录的构造函数｡

04:20.810 --> 04:22.760
实际上我们在这里看到了整个类,

04:22.760 --> 04:27.670
但类最终只是构造函数上的一些策略糖｡

04:27.670 --> 04:31.450
还请注意, 在我们看到创建person对象和Person对象之前,

04:31.450 --> 04:41.540
我们的装饰器输出, Logging和这个类或这个构造函数log首先被打印出来｡

04:41.540 --> 04:44.360
因为装饰器确实很重要,

04:44.360 --> 04:48.430
当类被定义时, 装饰器就会执行｡

04:48.430 --> 04:50.530
实例化时不会｡ 

04:50.530 --> 04:53.020
您根本不需要实例化类｡ 

04:53.020 --> 04:55.760
我们可以删除实例化类的代码,

04:55.760 --> 04:58.780
但仍然可以得到装饰器的输出｡

04:58.780 --> 05:02.210
因此, 当JavaScript找到类定义,

05:02.210 --> 05:05.660
即构造函数定义时, 装饰器就会运行｡

05:05.660 --> 05:10.070
当您使用该构造函数实例化对象时就不会｡

05:10.070 --> 05:13.280
这一点非常重要｡ 

05:13.280 --> 05:15.170
这是我们的第一个室内设计师

05:15.170 --> 05:19.063
但这并不是我们创建装饰器的唯一方法｡
