WEBVTT

00:02.350 --> 00:03.921
Instructeur : Donc, maintenant, nous avons des types de syndicats ici.

00:03.921 --> 00:07.440
Développons cette idée de types d'union et introduisons

00:07.440 --> 00:09.764
également les types littéraux.

00:09.764 --> 00:14.290
Les types littéraux sont des types pour lesquels vous ne vous contentez pas de dire qu'une

00:14.290 --> 00:16.436
certaine variable ou un paramètre doit contenir,

00:16.436 --> 00:19.700
par exemple, un nombre ou une chaîne de caractères, mais où vous

00:19.700 --> 00:21.230
êtes très clair sur la valeur

00:21.230 --> 00:23.800
exacte qu'il doit contenir.

00:23.800 --> 00:26.064
Nous l'avons vu très tôt déjà ici dans les bases.

00:26.064 --> 00:28.408
Constante numéro deux, par exemple.

00:28.408 --> 00:32.098
Là, si je passe la souris dessus, vous voyez que le type qui a été déduit

00:32.098 --> 00:35.680
n'est pas un nombre, c'est 2. 8.

00:35.680 --> 00:37.290
Et le groupe des types a déduit

00:37.290 --> 00:41.220
ce nombre concret comme un type ici parce que c'est une constante.

00:41.220 --> 00:43.810
Il ne changera jamais et, par conséquent, le groupe de types sait que la

00:43.810 --> 00:48.211
valeur que j'ai attribuée ici est le type exact que j'ai. Alors bien sûr, c'est un nombre,

00:48.211 --> 00:52.796
on pourrait dire 2. Le 8 est dérivé du nombre type mais c'est

00:52.796 --> 00:56.320
un nombre spécifique. Et cela n'existe pas seulement

00:56.320 --> 00:59.160
pour les chiffres, mais aussi pour les chaînes

00:59.160 --> 01:02.860
de caractères, etc. Et surtout pour les cordes, cela peut être très utile.

01:02.860 --> 01:07.420
Disons que dans notre fonction combinée, nous attendons des nombres ou des chaînes de caractères

01:07.420 --> 01:10.190
et nous les combinons différemment en fonction de ce que

01:10.190 --> 01:13.756
nous obtenons, mais nous voulons également permettre à l'appelant de la

01:13.756 --> 01:18.756
fonction de définir comment le résultat doit être renvoyé, de sorte que nous puissions forcer une conversion

01:18.880 --> 01:25.370
de nombre en chaîne de caractères ou l'inverse.

01:25.370 --> 01:25.370
Nous

01:25.370 --> 01:29.740
pourrions le faire avec le troisième paramètre et nous pourrions le nommer, disons, type de résultat

01:29.740 --> 01:33.208
ou conversion de résultat ou tout autre nom que vous voulez lui donner et je veux

01:33.208 --> 01:37.240
le décrire avec une chaîne. Donc, je vais mettre

01:37.240 --> 01:41.122
ce type de chaîne. Maintenant, mon idée est que

01:41.122 --> 01:45.625
je peux appeler combine ici avec deux chiffres et par exemple passer

01:45.625 --> 01:50.625
dans une chaîne de "as-number" et c'est totalement à vous de choisir l'identifiant

01:50.630 --> 01:55.630
que vous utilisez ici. En bas, nous pourrions avoir "as-text" mais nous

01:56.260 --> 01:59.357
pourrions avoir une autre combinaison ici CombinedStringAges

02:02.910 --> 02:07.310
où je passe deux chaînes de caractères mais je veux quand même sortir "as-number"

02:07.310 --> 02:10.030
et ce serait un cas où le troisième paramètre peut

02:10.030 --> 02:13.540
être utile pour forcer une conversion parce que si je passe deux

02:13.540 --> 02:17.050
chaînes de caractères ici, normalement nous devrions le faire

02:17.050 --> 02:19.950
dans cette branche else et les concaténer et je pourrais

02:19.950 --> 02:24.730
vouloir retourner cela comme un nombre à la place afin que je puisse aussi consigner en

02:24.730 --> 02:34.030
console les agents de chaînes de caractères combinés ici.

02:34.030 --> 02:34.030
Il

02:34.030 --> 02:37.512
ne nous reste donc plus qu'à prendre en compte ces identifiants dans notre fonction en incluant

02:37.512 --> 02:41.730
resultConversion dans nos vérifications if. Maintenant, la question est de savoir

02:41.730 --> 02:45.700
ce que nous voulons faire exactement ; voulons-nous nous assurer

02:45.700 --> 02:49.930
que nous pouvons forcer ces deux chaînes à être additionnées en tant que

02:49.930 --> 02:54.012
nombres ou voulons-nous forcer le résultat, peu importe s'il s'agit

02:54.012 --> 02:58.695
d'un calcul mathématique ou d'une concaténation de chaînes, à être converti

02:58.695 --> 03:03.039
en texte ou en nombre. Si nous voulons forcer une conversion,

03:03.039 --> 03:05.960
nous pourrions ajouter la vérification if

03:05.960 --> 03:10.382
ici et vérifier si la conversion du résultat est égale à "as-number"

03:10.382 --> 03:15.340
et si c'est le cas, je veux retourner le résultat avec un plus devant lui qui

03:15.340 --> 03:18.826
le convertit en un nombre, l'alternative serait parseFloat

03:18.826 --> 03:24.420
par exemple mais ici je vais juste aller pour le plus puisque c'est un peu plus court

03:24.420 --> 03:29.420
et sinon je veux retourner le résultat toString pour forcer une sortie comme

03:30.156 --> 03:33.593
une chaîne.

03:34.570 --> 03:38.883
Donc maintenant nous faisons le calcul basé sur le type réel que nous obtenons mais ensuite

03:38.883 --> 03:42.300
nous convertissons en résultat c'est une façon de le faire et si nous

03:42.300 --> 03:46.360
sauvegardons cela et que nous compilons ensuite ce fichier, nous voyons que c'est

03:47.470 --> 03:51.020
le résultat que j'obtiens et nous obtenons cette sortie par exemple pour

03:51.020 --> 03:54.759
notre combinaison de chaînes ici parce que comme je l'ai dit, la combinaison

03:54.759 --> 03:58.520
elle-même le calcul pour ainsi dire est effectué basé sur le type que nous

03:58.520 --> 04:02.530
entrons qui ici est chaîne de caractères donc nous les concaténons et ensuite

04:02.530 --> 04:05.860
nous convertissons juste en résultat.

04:05.860 --> 04:09.593
La logique alternative serait de vérifier le type

04:09.593 --> 04:14.320
ici et de faire une opération différente basée sur le type de retour

04:14.320 --> 04:19.180
que nous spécifions ici. Nous pourrions donc commenter cela et

04:19.180 --> 04:22.600
dire à la place que si le type de l'entrée un est un nombre

04:22.600 --> 04:26.230
et le type de l'entrée deux est un nombre, ou si resultConversion

04:27.890 --> 04:30.865
est égal à "as-number", alors je veux combiner

04:30.865 --> 04:35.865
les valeurs comme ceci et maintenant pour éviter cette erreur, ici je force la

04:35.930 --> 04:38.794
conversion en nombres en ajoutant un plus devant

04:38.794 --> 04:42.970
chaque entrée de sorte que chaque entrée soit convertie en nombre

04:42.970 --> 04:45.490
et soit garantie d'être un nombre avant

04:45.490 --> 04:48.490
que je les combine.

04:48.490 --> 04:51.130
Remarque : si vous passez des chaînes de caractères

04:51.130 --> 04:54.610
qui ne peuvent pas être converties en nombre, comme Max par

04:54.610 --> 04:58.800
exemple, vous obtiendrez un NaN (Not a Number) comme résultat.

04:58.800 --> 05:00.280
Dans le cas contraire,

05:00.280 --> 05:03.170
pour ne pas avoir de "as-number", ou simplement

05:03.170 --> 05:07.976
pour ne pas avoir d'entrées numériques, nous le plaçons dans ce bloc ici et

05:07.976 --> 05:12.390
maintenant, si je renvoie à nouveau le résultat ici, puis que nous sauvegardons

05:12.390 --> 05:16.230
et recompilons, nous verrons une sortie différente sur notre

05:16.230 --> 05:20.230
page. Maintenant, nous obtenons 56 dans ces deux lignes

05:20.230 --> 05:22.945
ici parce que maintenant nous ne convertissons pas le résultat,

05:22.945 --> 05:26.300
donc nous ne convertissons pas la chaîne concaténée pour cette ligne mais

05:26.300 --> 05:29.070
au lieu de cela nous faisons la conversion avant de combiner les

05:29.070 --> 05:31.970
deux valeurs. C'est donc à vous de choisir la logique

05:31.970 --> 05:34.760
que vous souhaitez mettre en œuvre. Je veux en fait examiner de

05:34.760 --> 05:37.551
plus près le concept de types littéraux que j'ai décrit

05:37.551 --> 05:41.180
au début de cette conférence. Je passe un "as-number" et un "as-text"

05:41.180 --> 05:44.157
et les inconvénients d'une entreprise qu'actuellement,

05:44.157 --> 05:47.600
en tant que développeur, nous devons mémoriser ces valeurs.

05:47.600 --> 05:50.450
Nous devons nous assurer que nous ne manquons pas de type ici.

05:50.450 --> 05:54.010
Maintenant, nous pourrions utiliser un e-num pour améliorer cela, mais si nous

05:54.010 --> 05:57.754
n'avons que deux valeurs ici, "as-text" ou "as-number", alors peut-être que toute

05:57.754 --> 06:00.940
la recherche d'un type littéral pourrait être une option.

06:00.940 --> 06:04.173
Nous pourrions dire "cela ne doit pas être une chaîne

06:04.173 --> 06:09.173
de caractères, cela doit être "as-number" ou "as-text"", nous utilisons

06:09.870 --> 06:12.090
donc un type union combiné à des types

06:12.090 --> 06:15.573
littéraux. Les types littéraux sont les types basés

06:15.573 --> 06:17.987
sur les types de base que sont les chaînes de caractères,

06:17.987 --> 06:20.933
les nombres et ainsi de suite, mais vous disposez ensuite d'une

06:20.933 --> 06:24.750
version spécifique du type. Donc ici, nous autorisons spécifiquement

06:24.750 --> 06:27.960
ces deux cordes, pas n'importe quelle corde, juste ces deux cordes.

06:27.960 --> 06:31.460
Nous voulons donc une chaîne pour la conversion du résultat, mais elle doit être

06:31.460 --> 06:34.207
l'une de ces deux valeurs. Toute autre valeur de chaîne de

06:34.207 --> 06:37.560
caractères ne sera pas autorisée, c'est donc l'idée derrière un type littéral

06:37.560 --> 06:40.747
et souvent vous l'utiliserez dans le contexte du type union parce que

06:40.747 --> 06:43.700
vous ne voulez pas seulement autoriser une valeur exacte, vous pourriez

06:43.700 --> 06:46.500
le coder en dur dans votre code si c'était le cas, mais vous voulez

06:46.500 --> 06:49.544
avoir deux ou plusieurs valeurs possibles.

06:49.544 --> 06:52.580
Dans ce cas, nous avons obtenu deux valeurs possibles.

06:52.580 --> 06:56.240
Donc maintenant nous sommes assurés d'obtenir une conversion

06:56.240 --> 07:00.288
de résultat qui est soit "as-number" soit "as-text" et par exemple

07:00.288 --> 07:03.800
ici, si j'essaie maintenant de comparer ceci à as-numbe parce

07:03.800 --> 07:07.256
que j'ai une faute de frappe ici, le groupe de types est capable

07:07.256 --> 07:10.360
de me le dire ici dans l'IDE et bien sûr tout ce que nous

07:10.360 --> 07:15.360
sauvegardons et compilons ici dans le terminal parce qu'il sait que as-numbe sans un

07:15.830 --> 07:18.940
r à la fin ne sera jamais une valeur valide pour resultConversion

07:18.940 --> 07:24.563
parce que j'ai défini ce type d'union avec ces types littéraux.

07:25.550 --> 07:27.593
Ainsi, nous avons à nouveau gagné une sécurité supplémentaire

07:27.593 --> 07:31.590
et nous nous assurons que nous ne pouvons pas l'utiliser de manière incorrecte.

07:31.590 --> 07:34.720
Il en va de même, bien sûr, pour la transmission d'une valeur. Si nous avons une faute de frappe

07:34.720 --> 07:38.747
ici, nous obtenons une erreur, mais si nous utilisons "as-number" ou "as-text",

07:38.747 --> 07:41.947
nous sommes autorisés à compiler ceci comme vous le voyez et maintenant

07:41.947 --> 07:45.470
compiler ceci, cela fonctionne et nous obtenons la même sortie que

07:45.470 --> 07:49.562
précédemment ici. Il s'agit donc de types littéraux particulièrement utiles

07:49.562 --> 07:52.193
lorsqu'ils sont utilisés en conjonction avec des types d'union.
