WEBVTT

00:02.540 --> 00:05.610
Instrutor: Em seguida quero explorar a sobrecarga

00:05.610 --> 00:08.050
de funções, uma característica que nos permite

00:08.050 --> 00:11.450
definir múltiplas assinaturas de funções, por assim dizer,

00:11.450 --> 00:13.840
para uma e a mesma função.

00:13.840 --> 00:17.080
O que significa simplesmente que podemos ter múltiplas

00:17.080 --> 00:20.340
formas possíveis de chamar uma função com parâmetros diferentes,

00:20.340 --> 00:24.300
por exemplo, para então fazer algo dentro dessa função.

00:24.300 --> 00:26.540
E um bom exemplo onde a sobrecarga de funções pode

00:26.540 --> 00:29.060
nos ajudar pode ser visto um pouco mais acima.

00:29.060 --> 00:32.090
Esta função de adição que escrevemos anteriormente,

00:32.090 --> 00:35.940
o que ela faz é que são necessários dois valores combináveis, o que

00:35.940 --> 00:37.960
significa strings ou números, e então,

00:37.960 --> 00:39.830
como você pode ver o tipo de retorno

00:39.830 --> 00:43.450
TypeScript infers aqui, tudo é combinável.

00:43.450 --> 00:45.370
Isso significa simplesmente que o TypeScript

00:45.370 --> 00:47.960
entende que o que ele retorna também é um fio ou um número,

00:47.960 --> 00:51.080
mas na verdade, se você pensar sobre isso, isso não é realmente

00:51.080 --> 00:52.880
verdade.

00:52.880 --> 00:55.280
Quer dizer, tecnicamente é verdade, mas sabemos

00:55.280 --> 00:57.620
que se passarmos em dois números, o tipo de retorno

00:57.620 --> 00:59.400
será sempre o número.

00:59.400 --> 01:01.940
Se passarmos em pelo menos um fio,

01:01.940 --> 01:03.950
o tipo de retorno será fio.

01:03.950 --> 01:05.460
Agora, por que isso poderia ser importante?

01:05.460 --> 01:08.225
Tenha em mente que a função de adição é escrita desta forma.

01:08.225 --> 01:11.060
E na verdade você pode comentar tudo abaixo

01:11.060 --> 01:15.390
e adicionar algum novo código logo abaixo da função.

01:15.390 --> 01:18.670
Se eu agora conseguir meu resultado aqui chamando

01:18.670 --> 01:21.870
add, eu passo em um e cinco, você vê que o resultado

01:21.870 --> 01:23.390
é do tipo combinável.

01:23.390 --> 01:27.010
Uma consequência disto é que o TypeScript não

01:27.010 --> 01:30.390
sabe se o resultado é um número ou string.

01:30.390 --> 01:34.510
Agora isto pode realmente importar se estamos passando em cordas.

01:34.510 --> 01:39.510
Se eu passar aqui em Max Schwarz, então isto funciona, mas ainda assim

01:39.700 --> 01:41.750
eu volto combinável.

01:41.750 --> 01:43.990
Agora, como conseqüência, não posso chamar

01:43.990 --> 01:46.120
funções de string sobre o resultado,

01:46.120 --> 01:50.600
não posso chamar split, por exemplo, para dividir no espaço branco.

01:50.600 --> 01:52.870
Eu sei que isto vai funcionar, porque

01:52.870 --> 01:55.270
sei que quando eu chamar a função assim,

01:55.270 --> 01:57.200
eu vou fazer isto se ramificar e

01:57.200 --> 01:59.980
recuperar uma corda, então eu sei que os resultados

01:59.980 --> 02:03.030
vão segurar a corda, mas o TypeScript só sabe que ela

02:03.030 --> 02:05.620
segura uma corda ou um número.

02:05.620 --> 02:08.350
Agora, é claro, podemos usar o tipo de fundição aqui e

02:08.350 --> 02:11.340
dizer ao TypeScript que o que recebemos de volta é um fio.

02:11.340 --> 02:13.930
Podemos fazer isso com o tipo de sintaxe de fundição

02:13.930 --> 02:16.040
sobre a qual você aprendeu antes.

02:16.040 --> 02:18.840
Ainda assim, não é ótimo que tenhamos que fazer isso, eu argumentaria,

02:18.840 --> 02:21.800
porque temos que escrever mais código aqui, mesmo esperando

02:21.800 --> 02:24.560
que o TypeScript entenda que quando chamamos esta função

02:24.560 --> 02:26.070
assim, sempre recebemos de volta

02:26.070 --> 02:27.740
uma string.

02:27.740 --> 02:30.890
Mas o TypeScript não está realmente analisando nosso código

02:30.890 --> 02:33.700
suficientemente bom aqui, e é aí que uma sobrecarga de funções

02:33.700 --> 02:35.000
pode nos ajudar.

02:35.000 --> 02:38.730
Uma sobrecarga de função é escrita simplesmente escrevendo a função

02:38.730 --> 02:41.880
logo acima de sua função principal, por assim dizer, com

02:41.880 --> 02:46.683
o mesmo nome, então você repete esta linha aqui basicamente, porém sem os suportes

02:47.880 --> 02:50.890
de encaracolamento, sem abrir e fechar suportes de

02:50.890 --> 02:54.080
encaracolamento depois disso, e agora aqui você quer usar

02:54.080 --> 02:57.980
um número e número de tipos específicos e depois o tipo de retorno de

02:57.980 --> 03:03.410
busca para quando este for o caso, quando você receber pelo menos um número.

03:03.410 --> 03:06.643
E aí poderíamos dizer, então o tipo de retorno é o número.

03:08.840 --> 03:10.980
Então agora com isso estamos dizendo para

03:10.980 --> 03:14.980
TypeScript, se chamamos esta função e ambos os argumentos são um número,

03:14.980 --> 03:17.180
então esta função retorna um número.

03:17.180 --> 03:19.430
Agora isso, é claro, não é uma sintaxe que funcionaria

03:19.430 --> 03:22.480
em JavaScript, ela será eliminada pelo TypeScript no processo

03:22.480 --> 03:24.430
de compilação.

03:24.430 --> 03:28.480
Mas o TypeScript funde esta informação de função e esta

03:28.480 --> 03:31.380
declaração de função aqui e basicamente

03:31.380 --> 03:33.640
combina o conhecimento destas

03:33.640 --> 03:35.550
duas linhas aqui.

03:35.550 --> 03:38.590
E agora já sabe ok, podemos chamar esta função

03:38.590 --> 03:41.490
aqui com A e B de tipo combinável ou com

03:41.490 --> 03:43.790
A e B de tipo numérico.

03:43.790 --> 03:47.060
A propósito, você também pode adicionar mais ou menos parâmetros

03:47.060 --> 03:50.100
aqui em suas sobrecargas, você é realmente flexível lá.

03:50.100 --> 03:53.640
Você também acrescenta funções aqui e espera apenas

03:53.640 --> 03:57.620
um número e retorna um número, e isto também funcionaria

03:57.620 --> 04:01.210
se fizéssemos B opcional em nossas outras sobrecargas

04:01.210 --> 04:03.270
também.

04:03.270 --> 04:05.254
Porque, em última análise, é claro que você

04:05.254 --> 04:08.630
precisa garantir que seu código aqui funcione sempre e que você receba

04:08.630 --> 04:10.850
todos os argumentos de que precisa no final.

04:10.850 --> 04:13.610
Então é B seria opcional aqui então você vê este trabalho,

04:13.610 --> 04:15.170
agora é claro que teríamos apenas

04:15.170 --> 04:17.850
que trabalhar em torno de B sendo potencialmente opcional

04:17.850 --> 04:19.550
lá embaixo.

04:19.550 --> 04:21.390
Mas eu não preciso disso, então vou

04:21.390 --> 04:24.460
me livrar disso e deixar isto, mas também não queria uma sobrecarga

04:24.460 --> 04:27.200
para quando chamássemos isto com cordas.

04:27.200 --> 04:30.060
Portanto, acrescentarei aqui outra sobrecarga

04:30.060 --> 04:33.450
de função de adição onde A é uma corda e B é uma corda e depois

04:33.450 --> 04:36.090
estou bem claro quanto ao fato de que o que retornamos

04:36.090 --> 04:38.460
será uma corda.

04:38.460 --> 04:40.280
A propósito, é uma boa prática acrescentar

04:40.280 --> 04:43.660
um ponto-e-vírgula após estas linhas de sobrecarga aqui.

04:43.660 --> 04:46.560
Portanto, agora com isso estou dizendo que se estamos chamando esta função

04:46.560 --> 04:49.100
com dois números, sempre recebemos de volta um número.

04:49.100 --> 04:52.170
Se o chamamos com duas cordas, sempre recebemos de volta uma corda.

04:52.170 --> 04:54.510
Se o chamarmos com uma corda e um número, tecnicamente

04:54.510 --> 04:57.020
também sempre recebemos de volta uma corda, mas não

04:57.020 --> 04:57.853
quero adicionar todas

04:57.853 --> 04:59.410
essas combinações possíveis aqui,

04:59.410 --> 05:01.240
é claro que eu poderia adicionar mais e

05:01.240 --> 05:03.173
depois também adicionar número aqui, ou

05:04.040 --> 05:07.500
a outra combinação que possamos ter, que é esta aqui.

05:07.500 --> 05:10.060
Bem, acho que agora eu adicionei todas as combinações.

05:10.060 --> 05:12.540
E agora estou listando aqui todas as combinações

05:12.540 --> 05:16.040
potenciais de valores e o que retornamos em cada caso.

05:16.040 --> 05:18.260
Agora com isso, você vê que o erro lá embaixo desapareceu

05:18.260 --> 05:20.520
porque agora o TypeScript sabe que os resultados

05:20.520 --> 05:25.623
serão do tipo string se chamarmos add com estes dois valores que são ambos strings.

05:25.623 --> 05:28.510
E, se eu pairar sobre a tela, você verá que há três

05:28.510 --> 05:31.100
sobrecargas adicionais disponíveis.

05:31.100 --> 05:32.980
Aqui estou chamando adicionar com duas

05:32.980 --> 05:35.560
cordas, mas o TypeScript sabe que há três outras formas

05:35.560 --> 05:36.630
de chamar isso.

05:36.630 --> 05:39.450
Por exemplo, com um cordel e um número,

05:39.450 --> 05:41.340
neste caso eu recebo de volta

05:41.340 --> 05:46.340
um cordel, com um número e algum cordel, ou com dois números.

05:47.430 --> 05:48.630
Isto também funcionaria.

05:48.630 --> 05:50.210
Então, é claro que não posso ligar para

05:50.210 --> 05:52.650
split porque o TypeScript identifica corretamente que

05:52.650 --> 05:54.630
quando ligo para este número com dois números,

05:54.630 --> 05:58.253
recebo de volta um número, e em um número que você não pode ligar para split.

05:59.260 --> 06:02.010
Portanto, estas são sobrecargas de funções e podem

06:02.010 --> 06:04.060
ajudá-lo em situações como esta aqui,

06:04.060 --> 06:06.780
onde o TypeScript não seria capaz de inferir corretamente

06:06.780 --> 06:08.590
o tipo de retorno por si só, aqui você

06:08.590 --> 06:11.660
pode ser realmente claro sobre o que está sendo retornado

06:11.660 --> 06:14.667
para as diferentes combinações que você pode suportar em

06:14.667 --> 06:16.033
sua função.
