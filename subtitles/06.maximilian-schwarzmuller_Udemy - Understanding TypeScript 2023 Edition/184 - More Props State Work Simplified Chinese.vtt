WEBVTT

00:02.110 --> 00:04.160
讲师：因此, 在这个小的虚拟应用程序中,

00:04.160 --> 00:14.220
我还想确保我们可以删除待办事项, 并实现这一点, 让我们确保在待办事项列表中, 在我们的列表项中, 我们不仅要处理文本,

00:14.220 --> 00:17.640
而且要在span中处理文本, 此外, 在同一列表项中,

00:17.640 --> 00:28.120
我们还要有一个按钮, 一个按钮, 我们在这里说删除, 就像这样, 当这个按钮被按下时, 我会想删除它, 这样做, 点击这里, 我想做一些事情,

00:28.120 --> 00:46.440
摆脱这个要做现在, 因为我们设法做的是在这里的应用程序组件, 这里我们需要一个新函数来执行删除处理程序, 该函数被触发, 然后从列表中清除要执行的操作｡

00:46.440 --> 00:47.700
这里作为我们的参数,

00:47.700 --> 00:50.690
我希望得到一个字符串的to do ID, 因为在我们的to

00:50.690 --> 00:53.340
do模型中ID是一个字符串, 然后在那里我们再次调用set

00:55.650 --> 01:01.260
to do's, 但是现在要删除一个to do｡

01:01.260 --> 01:03.200
对于这一切再次使用这个函数论坛,

01:03.200 --> 01:04.750
因为我们有一个状态更新,

01:04.750 --> 01:09.460
这取决于以前的状态, 在那里我将返回一个新的数组｡

01:09.460 --> 01:13.520
这基本上是我的旧数组, 但经过了过滤｡ 

01:13.520 --> 01:18.020
Filter是JavaScript中的一个内置方法,

01:18.020 --> 01:24.490
它返回一个新的数据数组, 这个新数组基本上是旧数组减去您过滤掉的任何内容｡

01:24.490 --> 01:28.590
Filter接受一个函数, 该函数对旧数组中的每一项执行,

01:28.590 --> 01:34.160
当传递该函数并返回true时, 该项将被保留并添加到新数组中｡ 如果返回false,

01:34.160 --> 01:37.330
则该项将被删除｡

01:37.330 --> 01:39.820
所以它将运行在所有我们已经拥有的待办事项上,

01:39.820 --> 01:45.330
现在我们需要一些逻辑, 如果我们正在查看的待办事项ID等于我们在这里得到的待办事项ID,

01:45.330 --> 01:48.120
则返回false｡

01:48.120 --> 01:52.100
因此, 如果待办事项相等, 则会将其丢弃｡ 

01:52.100 --> 01:53.570
所以我们这里需要false,

01:53.570 --> 01:55.560
而不是true, 所以我们在下一个中把它倒过来,

01:55.560 --> 01:57.430
加上一个感叹号｡

01:57.430 --> 02:00.620
这样我们就保留了所有的待办事项, 除了ID等于我们在这里得到的ID的待办事项,

02:00.620 --> 02:07.833
因为这是我们要删除的ID, 因为这是我们要删除的待办事项｡

02:08.710 --> 02:11.499
现在, 我们需要确保可以从待办事项列表内部调用待办事项删除处理程序,

02:11.499 --> 02:16.370
我们可以再次为此使用props, 并在此处添加on Delete to

02:16.370 --> 02:19.580
do props, 并指向待办事项删除处理程序,

02:19.580 --> 02:27.240
但当然TypeScript对此并不太满意, 因为在待办事项列表props中, 我们在此处没有说明有关on

02:27.240 --> 02:33.130
Delete to do props的任何内容｡

02:33.130 --> 02:34.350
让我们改变一下｡ 

02:34.350 --> 02:38.730
在待办事项列表TSX中, 我们添加一个属性delete to

02:38.730 --> 02:40.530
do, 它将指向一个函数,

02:40.530 --> 02:42.218
所以我们需要一个函数类型,

02:42.218 --> 02:45.380
一个最终不返回任何结果的函数｡

02:45.380 --> 02:51.380
所以void不过是其中一个参数得到的要被删除的想法而已｡

02:51.380 --> 02:54.230
现在, 应用程序组件中的错误已经消失,

02:54.230 --> 02:55.380
现在作为一项调整,

02:55.380 --> 03:00.320
我们需要确保在单击此按钮时调用此函数｡

03:00.320 --> 03:04.100
生产点在删除的道具上做, 而不是执行这个,

03:04.100 --> 03:06.990
而是只是指向它, 这样当我点击这个按钮时,

03:06.990 --> 03:12.930
我们在这个道具上收到的这个函数将被调用｡

03:12.930 --> 03:15.203
这种方法唯一的问题是,

03:15.203 --> 03:19.460
在这个函数中, 我们期望得到作为参数的to

03:19.460 --> 03:22.970
do ID｡

03:22.970 --> 03:26.620
现在为了确保它能正常工作, 我们可以简单地在这里使用bind,

03:26.620 --> 03:28.740
我不关心这个关键字在to中被调用的函数,

03:28.740 --> 03:32.010
或者设置它, 但是我们传递给bind的第二个参数,

03:32.010 --> 03:43.743
将是在on delete中接收到的第一个参数, 这应该是to do的想法｡

03:43.743 --> 03:43.743
身份证在这里｡ 

03:44.620 --> 03:47.440
有了它应该工作, 我们现在保存这个,

03:47.440 --> 03:52.440
我添加完成课程, 并在一个月内完成它｡

03:55.180 --> 03:57.940
如果我单击此处的“Delete”（删除）, 该内容将消失,

03:57.940 --> 03:59.700
该内容也将消失, 因此现在一切正常｡

03:59.700 --> 04:01.480
现在, 我只想对它进行润色,

04:01.480 --> 04:07.333
为其添加一点更好的样式, 然后我们就完成了这个基本的应用程序｡
