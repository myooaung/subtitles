WEBVTT

00:02.410 --> 00:04.290
Instructeur: Dus tijd voor wat overerving

00:04.290 --> 00:06.370
en voor een basisklasse.

00:06.370 --> 00:09.189
Ik wil een basisklasse toevoegen, die in principe templateElement,

00:09.189 --> 00:12.090
hostElement, een element in zich heeft, die dit werk van het

00:12.090 --> 00:15.430
selecteren van elementen in de dom doet, die de attach-methode heeft,

00:15.430 --> 00:16.810
die we altijd nodig hebben,

00:16.810 --> 00:18.520
enzovoort.

00:18.520 --> 00:22.540
Die beheert dus eigenlijk al deze gedeelde functionaliteiten,

00:22.540 --> 00:26.630
die onze klassen die daadwerkelijk iets aan de dom doorgeven

00:26.630 --> 00:28.220
gemeen hebben.

00:28.220 --> 00:30.880
Dus daarvoor, boven mijn ProjectInput,

00:30.880 --> 00:35.650
en ook de ProjectList klasse, dus eigenlijk hier, voeg ik de Component

00:35.650 --> 00:38.250
Base Class toe.

00:38.250 --> 00:41.540
Nu, de naam is aan jou, maar ik noem het Component, omdat je deze

00:41.540 --> 00:44.090
term misschien kent van React of Angular, als

00:44.090 --> 00:45.870
je daarmee werkt, en zelfs als je

00:45.870 --> 00:47.590
daar niet mee gewerkt hebt, kun

00:47.590 --> 00:49.873
je deze klassen zien als UI, user interface

00:50.770 --> 00:53.950
componenten, die je rendert naar het scherm.

00:53.950 --> 00:57.950
En elke component is uiteindelijk een renderable object, dat een aantal

00:57.950 --> 00:59.970
functionaliteiten heeft waarmee we

00:59.970 --> 01:01.370
het kunnen renderen.

01:01.370 --> 01:05.260
En dan voegen de concrete instanties, of de geërfde klassen,

01:05.260 --> 01:10.260
extra functionaliteit toe die deze specifieke component nodig heeft.

01:10.300 --> 01:14.370
Wat gaat er dan in de algemene Componentenklasse?

01:14.370 --> 01:17.590
Nou, ik zou zeggen deze drie elementen zeker.

01:17.590 --> 01:21.390
templateElement, hostElement en element.

01:21.390 --> 01:23.590
We hebben hier echter een probleem

01:23.590 --> 01:25.470
met de types.

01:25.470 --> 01:28.320
Het templateElement zal altijd een HTMLTemplateElement

01:29.160 --> 01:31.980
zijn, maar het hostElement hoeft niet altijd een div te

01:31.980 --> 01:35.410
zijn, bijvoorbeeld, wanneer we een project item klasse zullen toevoegen,

01:35.410 --> 01:37.160
zullen we dat renderen in een ProjectList,

01:37.160 --> 01:40.550
en niet direct zelfs onze root div hier, dus dat is niet altijd een

01:40.550 --> 01:42.360
div.

01:42.360 --> 01:45.220
En dit hier, wel, het is altijd een HTMLElement, daar

01:45.220 --> 01:47.040
kunnen we ons wel in vinden, maar,

01:47.040 --> 01:50.540
zoals in het geval van de ProjectInput klasse, weten we eigenlijk

01:50.540 --> 01:52.560
dat het ergens een specifieke vorm ervan

01:52.560 --> 01:55.230
is, het is een HTMLFormElement.

01:55.230 --> 01:57.540
We zouden dus deze extra informatie verliezen,

01:57.540 --> 02:00.320
als we ons zouden beperken tot altijd maar een

02:00.320 --> 02:02.130
HTMLElement, zonder meer specifieke

02:02.130 --> 02:05.220
informatie op te slaan.

02:05.220 --> 02:07.690
Dus hoe kunnen we daar omheen werken?

02:07.690 --> 02:10.050
Nou, door niet alleen overerving te gebruiken,

02:10.050 --> 02:12.920
maar door hier een generieke klasse te maken, waar

02:12.920 --> 02:15.230
we, als we ervan overerven, de concrete

02:15.230 --> 02:17.680
types kunnen instellen.

02:17.680 --> 02:20.940
Daarvoor voegen we haakjes toe na de klassenaam,

02:20.940 --> 02:23.550
en dan twee identificaties naar keuze,

02:23.550 --> 02:26.690
zoals T en U, wat gangbare keuzes zijn.

02:26.690 --> 02:30.110
En nu kunnen we hier ook wat beperkingen toevoegen,

02:30.110 --> 02:34.820
en zeggen dat T zeker een soort HTMLElement zal zijn.

02:34.820 --> 02:36.770
Het kan gewoon een HTMLElement zijn,

02:36.770 --> 02:38.970
of een meer specifieke versie ervan.

02:38.970 --> 02:41.870
En hetzelfde geldt voor U.

02:41.870 --> 02:44.780
En dan weten we hier dat het hostElement van het type T zal

02:44.780 --> 02:46.690
zijn, en het element van het type U.

02:46.690 --> 02:48.660
En wanneer we nu van deze klasse erven, kunnen

02:48.660 --> 02:50.970
we de concrete types specificeren, zodat we met verschillende

02:50.970 --> 02:52.930
types kunnen werken op verschillende plaatsen

02:52.930 --> 02:54.780
waar we erven.

02:56.050 --> 02:58.053
Laten we nu ook een constructeur toevoegen.

02:58.910 --> 03:01.080
In die constructor hebben we een

03:01.080 --> 03:03.060
beetje informatie nodig.

03:03.060 --> 03:05.950
We moeten de ID van ons sjabloon weten, zodat we weten

03:05.950 --> 03:08.030
hoe we het moeten selecteren, en dat

03:08.030 --> 03:09.750
moet een string zijn.

03:09.750 --> 03:11.590
We moeten de hostElementId weten, die

03:11.590 --> 03:13.050
ook een string moet zijn, zodat

03:13.050 --> 03:15.833
we weten waar deze component moet worden weergegeven.

03:17.440 --> 03:20.505
En ik wil ook een newElementId krijgen, zodat we een ID krijgen

03:20.505 --> 03:22.590
die moet worden toegewezen aan het nieuw

03:22.590 --> 03:24.350
weergegeven element.

03:24.350 --> 03:26.020
Dit is echter optioneel, wat ik

03:26.020 --> 03:28.210
aangeef door een vraagteken achter de

03:28.210 --> 03:29.690
parameter te plaatsen.

03:29.690 --> 03:31.940
Het alternatief zou zijn om ook hier ongedefinieerd

03:31.940 --> 03:34.050
als type te accepteren, maar ik gebruik

03:34.050 --> 03:36.470
alleen het vraagteken.

03:36.470 --> 03:38.510
En nu, met dat in de constructor, kunnen

03:38.510 --> 03:39.793
we, in principe, deze

03:40.640 --> 03:42.083
code hier krijgen, en het

03:43.810 --> 03:46.950
in onze constructor van de Component klasse zetten,

03:46.950 --> 03:48.940
zodat we het templateElement opslaan,

03:48.940 --> 03:52.060
maar, natuurlijk, nu is de ID, die we hier krijgen, die

03:52.060 --> 03:57.450
templateId, daarom krijg ik dit als argument in de constructor.

03:57.450 --> 04:00.060
En voor het hostElement is de ID hier natuurlijk

04:00.060 --> 04:02.733
onze hostElementId, zoals dit.

04:04.790 --> 04:07.930
Ook belangrijk, natuurlijk, wat betreft het casten hier,

04:07.930 --> 04:10.230
we weten dat dit van het type T zal zijn, omdat

04:10.230 --> 04:12.580
T hier dit generieke type is, dat we opslaan

04:12.580 --> 04:15.420
of dat we gebruiken voor ons hostElement, dus hier kunnen

04:15.420 --> 04:17.163
we het al casten.

04:18.160 --> 04:20.253
En daarmee selecteren we elementen.

04:21.130 --> 04:22.940
We kunnen ook meer code pakken.

04:22.940 --> 04:26.650
Die code hier, waar we een node importeren en zo, en waar

04:26.650 --> 04:30.130
we de ID instellen, dat kunnen we allemaal pakken.

04:30.130 --> 04:32.520
Dus laten we dat hier kopiëren, en dit ook toevoegen

04:32.520 --> 04:35.317
aan de constructor van de Component klasse.

04:35.317 --> 04:37.640
importedNode, dan stellen we element

04:37.640 --> 04:41.080
in, en element hier heeft dit generieke type U, dus als we

04:41.080 --> 04:43.000
dit hier casten, weten we dat het

04:43.000 --> 04:46.870
dat type U hier zal zijn, dus moeten we het casten naar U.

04:46.870 --> 04:49.090
Dat is een goed gebruik van generics hier,

04:49.090 --> 04:51.993
wat deze Component klasse echt herbruikbaar maakt.

04:53.060 --> 04:55.200
Nu, wat betreft de ID.

04:55.200 --> 04:58.200
Dit is wat we hier krijgen, de newElementId.

04:58.200 --> 05:00.590
Nu hebben we dit natuurlijk niet altijd, omdat het

05:00.590 --> 05:02.150
optioneel is, dus we moeten controleren

05:02.150 --> 05:03.870
of we het wel hebben.

05:03.870 --> 05:06.070
Dus als newElementId een ding is, en alleen

05:06.070 --> 05:07.650
als het een ding is, alleen dan

05:07.650 --> 05:09.710
probeer ik het toe te wijzen, anders proberen

05:09.710 --> 05:10.543
we het niet, want

05:10.543 --> 05:13.023
dan hebben we geen ID om toe te wijzen.

05:14.420 --> 05:16.300
Nou, daarmee hebben we de constructeur.

05:16.300 --> 05:19.160
Laten we nu de bevestigingsfunctie gebruiken.

05:19.160 --> 05:21.970
Laten we dus de attach methode kopiëren uit

05:21.970 --> 05:25.470
een van onze andere klassen en die hier toevoegen, als

05:25.470 --> 05:28.473
private methode, in de Component klasse.

05:32.690 --> 05:35.640
Dan kunnen we dit ook noemen. toevoegen aan het einde

05:35.640 --> 05:38.540
van de constructor van de Component-klasse.

05:38.540 --> 05:39.960
Nu, hier willen we een element

05:39.960 --> 05:42.570
toevoegen, maar we weten niet waar het moet worden

05:42.570 --> 05:44.193
toegevoegd, dus dat is eigenlijk

05:44.193 --> 05:46.450
wat extra informatie die we hier moeten ophalen,

05:46.450 --> 05:49.450
als vierde argument in de contructor, insert Atstart zou

05:52.430 --> 05:54.200
een naam kunnen zijn, en dat is een

05:54.200 --> 05:56.680
boolean, laten we zeggen.

05:56.680 --> 06:00.190
En dat moeten we voor onze optionele parameter zetten.

06:00.190 --> 06:02.230
Optionele parameters moeten altijd als laatste staan,

06:02.230 --> 06:03.980
omdat mensen ze zouden kunnen weglaten.

06:03.980 --> 06:06.680
Uw verplichte parameters kunnen dus niet

06:06.680 --> 06:09.220
na deze optionele parameters komen.

06:09.220 --> 06:12.700
En insertAtStart wordt dan doorgestuurd naar attach, daar wordt

06:12.700 --> 06:13.533
insertAtBeginning,

06:14.615 --> 06:18.740
je zou insertAtStart ook kunnen hergebruiken, ik gebruik hier gewoon een

06:18.740 --> 06:21.350
andere naam om verwarring te voorkomen, ontvangen

06:21.350 --> 06:23.470
als een boolean.

06:23.470 --> 06:28.040
En dan controleren we hier of insertAtBeginning waar

06:28.040 --> 06:32.920
is, zo ja, dan hebben we hier afterbegin, anders hebben

06:32.920 --> 06:34.887
we beforeend.

06:36.770 --> 06:39.653
Nu zijn we flexibel wat betreft de manier waarop dit wordt ingevoegd.

06:42.980 --> 06:46.570
Ik wil deze klasse nu ook markeren als een abstracte klasse, omdat mensen

06:46.570 --> 06:49.600
hem nooit direct mogen instantiëren, in plaats daarvan moet

06:49.600 --> 06:52.560
hij altijd worden gebruikt voor overerving.

06:52.560 --> 06:56.090
Dus voor klasse voeg ik het abstracte sleutelwoord toe.

06:56.090 --> 06:58.750
Dit zorgt ervoor dat we het nu niet kunnen instantiëren.

06:58.750 --> 07:01.963
Als we dat zouden proberen, zou TypeScript tegen ons schreeuwen.

07:04.070 --> 07:06.490
Ik voeg nog twee methoden toe, en dat

07:06.490 --> 07:08.410
is de configure methode, en

07:08.410 --> 07:10.840
ook de renderContent methode.

07:10.840 --> 07:13.430
En ik voeg het toe als een abstracte methode,

07:13.430 --> 07:16.463
wat betekent dat de concrete implementatie hier ontbreekt,

07:18.000 --> 07:21.080
maar we dwingen nu in principe elke klasse die erft van

07:21.080 --> 07:22.670
component, om deze twee methoden

07:22.670 --> 07:25.980
toe te voegen en beschikbaar te hebben.

07:25.980 --> 07:27.220
Ik voeg dit hier toe, zodat

07:27.220 --> 07:29.390
als iemand anders onze code bekijkt,

07:29.390 --> 07:31.460
hij of zij goed kan begrijpen wat het

07:31.460 --> 07:34.150
idee achter de Component klasse is.

07:34.150 --> 07:36.340
Dat het alle algemene rendering doet,

07:36.340 --> 07:38.530
of de bevestiging van de component, maar

07:38.530 --> 07:40.790
dat de concrete inhoud en configuratie

07:40.790 --> 07:43.840
dan moet gebeuren op de plaats waar wij erven.

07:43.840 --> 07:47.670
Kanttekening, je kunt geen private, abstracte methodes hebben.

07:47.670 --> 07:49.660
Dus private moet hier weggelaten

07:49.660 --> 07:52.000
worden, dat mag niet van TypeScript.

07:52.000 --> 07:54.590
Goed, en hiermee kunnen we Component uitbreiden

07:54.590 --> 07:56.480
hier op de ProjectLijst, en ons nu

07:56.480 --> 07:59.130
ontdoen van deze drie eigenschappen.

07:59.130 --> 08:00.640
We houden de assignedProjects,

08:00.640 --> 08:03.520
omdat die specifiek zijn voor de ProjectList.

08:03.520 --> 08:06.620
We willen nu ook de concrete waarden specificeren die moeten

08:06.620 --> 08:09.560
worden ingeplugd voor onze generieke types.

08:09.560 --> 08:12.410
En we weten, als we dit terugdraaien, dat

08:12.410 --> 08:16.540
we een HTMLDivElement en een HTMLElement zullen hebben,

08:16.540 --> 08:19.313
dus hier geef ik HTMLDivElement, en HTMLElement

08:20.410 --> 08:22.800
door, zoals dit, en ontdoe me dan van

08:22.800 --> 08:25.830
deze drie eigenschappen.

08:25.830 --> 08:29.510
In de constructor hebben we dat nu niet nodig, maar in plaats daarvan

08:29.510 --> 08:32.550
moeten we aan het begin super aanroepen, om de contructor

08:32.550 --> 08:35.130
van de basisklasse aan te roepen, en daarvoor moeten

08:35.130 --> 08:38.080
we wat informatie doorgeven aan de super contructor,

08:38.080 --> 08:40.840
we moeten wat informatie doorgeven.

08:40.840 --> 08:42.753
De ID van out templateElement, de hostElementId,

08:44.050 --> 08:45.850
of we deze aan het begin van het hostElement

08:45.850 --> 08:47.870
willen invoegen, en eventueel de ID die

08:47.870 --> 08:51.920
aan het nieuwe element moet worden toegekend.

08:51.920 --> 08:54.038
Dus hier is onze template

08:54.038 --> 08:57.811
ID, en daarmee kunnen we dit hier wegwerken.

08:57.811 --> 09:01.292
Dan hier, het hostElement, dat ID was app, dus daar

09:01.292 --> 09:02.670
kunnen we vanaf.

09:02.670 --> 09:04.260
We houden de assignedProjects,

09:04.260 --> 09:06.400
omdat we die hier nog nodig hebben.

09:06.400 --> 09:08.193
We raken dit hier kwijt, maar

09:10.150 --> 09:13.050
wat betreft de ID voor het nieuwe element, die

09:13.050 --> 09:16.850
wil ik eigenlijk als vierde parameter doorgeven.

09:16.850 --> 09:19.040
De derde is waar dit moet worden ingevoegd,

09:19.040 --> 09:22.400
en hier gebruiken we dit voor het einde, dus wat ik hier

09:22.400 --> 09:25.890
wil invoegen als parameter voor de insertAtStart waarde

09:25.890 --> 09:29.170
is false, omdat het niet aan het begin moet worden ingevoegd,

09:29.170 --> 09:32.283
maar aan het einde.

09:36.000 --> 09:38.940
Nu wil ik zeker nog mijn luisteraar hier opstellen.

09:38.940 --> 09:40.730
Maar ik hoef attach niet aan te roepen,

09:40.730 --> 09:44.410
dat gebeurt in de basisklasse, in de basiscomponent.

09:44.410 --> 09:46.253
Ik roep renderContent wel op.

09:47.870 --> 09:50.010
En hier moeten we dit

09:50.010 --> 09:52.100
type niet gebruiken,

09:52.100 --> 09:54.410
maar gewoon typen.

09:54.410 --> 09:55.490
Maar dat is geen probleem,

09:55.490 --> 09:57.690
want we kregen type als argument.

09:57.690 --> 09:59.680
Nu zie je dat ik hier nog steeds een fout

09:59.680 --> 10:03.487
krijg, omdat we een attach methode hebben in ProjectList, en die

10:03.487 --> 10:05.410
botst met de attach methode die we

10:05.410 --> 10:07.330
hebben in de basisklasse.

10:07.330 --> 10:10.600
Dus laten we ons ontdoen van deze bevestigingsmethode hier.

10:10.600 --> 10:14.024
Nu krijgen we nog steeds een fout, want renderContent is hier privaat,

10:14.024 --> 10:16.060
maar we specificeren het hier als een

10:16.060 --> 10:18.270
publieke methode, ik zou het graag als privaat

10:18.270 --> 10:20.240
hebben, maar private abstracte methoden

10:20.240 --> 10:22.860
worden niet ondersteund.

10:22.860 --> 10:25.680
Dus ik zal het private sleutelwoord hier verwijderen, en nu

10:25.680 --> 10:28.170
met dat, zitten we met één probleem hier, dat we niet

10:28.170 --> 10:30.510
die configureer methode hebben, die ik beloofde

10:30.510 --> 10:31.990
dat we hier zouden hebben.

10:31.990 --> 10:33.650
Nou, laten we het toevoegen.

10:33.650 --> 10:38.500
Dus hier, naast renderConfig, zouden we configure kunnen toevoegen,

10:38.500 --> 10:40.510
ook al doe ik hier niets.

10:40.510 --> 10:42.950
U kunt dit hier ook omzetten in een optionele methode

10:42.950 --> 10:46.000
door een vraagteken toe te voegen, dan bent u niet verplicht

10:46.000 --> 10:47.520
het toe te voegen.

10:47.520 --> 10:50.380
Hier, ik zal het toevoegen omdat we ook kunnen

10:50.380 --> 10:53.210
stellen dat we, voor de ProjectList, die code

10:53.210 --> 10:56.490
waar we onze luisteraar instellen hier, eigenlijk

10:56.490 --> 10:58.530
in configure zetten.

10:58.530 --> 11:00.810
Dus we kunnen ons bereiken om te configureren,

11:00.810 --> 11:03.320
en dan ons ding hier doen, die luisteraar

11:03.320 --> 11:05.220
instellen.

11:05.220 --> 11:06.610
En nu moeten we er gewoon voor

11:06.610 --> 11:10.653
zorgen dat we renderContent aanroepen, maar ook zo configureren.

11:12.730 --> 11:14.440
Mocht je je afvragen waarom ik configure

11:14.440 --> 11:16.450
en renderContent hier niet aanroep in de

11:16.450 --> 11:18.560
abstracte klasse in de contructor, wel, dat

11:18.560 --> 11:19.993
zou kunnen, maar dan hebben we

11:21.780 --> 11:23.720
misschien een probleem.

11:23.720 --> 11:26.760
Als we dit aanroepen in de Component klasse, dan zouden

11:26.760 --> 11:30.770
we een methode kunnen aanroepen in de overnemende klasse, dus in een

11:30.770 --> 11:33.240
klasse die Component uitbreidt, waar renderContent

11:33.240 --> 11:36.810
of configure afhankelijk is van iets waar de contructor van

11:36.810 --> 11:39.410
de overnemende klasse eigenlijk misschien

11:39.410 --> 11:41.540
iets instelt, pas nadat de contructor

11:41.540 --> 11:44.710
van de basisklasse klaar is, waar renderContent en of

11:44.710 --> 11:48.100
configure afhankelijk van zijn.

11:48.100 --> 11:50.690
Daarom is het veiliger om, in principe, ervoor te zorgen

11:50.690 --> 11:52.410
dat de overnemende klasse deze methoden

11:52.410 --> 11:55.410
moet aanroepen in plaats van dat de basisklasse deze methoden

11:55.410 --> 11:56.860
voor ons aanroept.

11:57.980 --> 12:01.280
Dus daarmee hebben we de ProjectLijst klasse geherstructureerd

12:01.280 --> 12:05.040
om te profiteren van overerving en van onze gedeelde logica.

12:05.040 --> 12:07.730
Laten we nu hetzelfde doen voor ProjectInput.

12:07.730 --> 12:13.170
Daar willen we Component ook uitbreiden.

12:13.170 --> 12:14.900
Gebruik het generieke karakter

12:14.900 --> 12:19.430
daarvan, en daar hebben we het HTMLDivElement voor het hostElement, en

12:19.430 --> 12:23.980
het HTMLFormElement voor het element dat wordt weergegeven.

12:23.980 --> 12:27.210
Daarmee kunnen we ons ontdoen van deze drie eigenschappen, dus

12:27.210 --> 12:28.310
laten we dat doen.

12:28.310 --> 12:30.090
We behouden deze drie eigenschappen natuurlijk,

12:30.090 --> 12:32.140
omdat ze specifiek zijn voor ProjectInput.

12:33.040 --> 12:35.310
Dan moeten we hier super aanroepen,

12:35.310 --> 12:38.320
en aan super geven we de ID van het sjabloon door,

12:38.320 --> 12:39.900
dat is ProjectInput, de ID

12:39.900 --> 12:41.970
van het host element, dat is app,

12:41.970 --> 12:45.270
insertBefore is hier true, omdat ik dat nieuw aangemaakte

12:45.270 --> 12:47.620
element aan het begin wil invoegen voor

12:47.620 --> 12:50.510
deze ProjectInput klasse.

12:50.510 --> 12:53.110
En dan, newElementId, wel, dat hier

12:53.110 --> 12:55.170
is user-input, dus dat moeten

12:55.170 --> 12:56.913
we ook doorsturen.

12:57.844 --> 12:59.400
Hiermee kunnen we ons ontdoen

12:59.400 --> 13:03.480
van deze code, van deze code, en van al deze code hier eigenlijk.

13:03.480 --> 13:05.240
Natuurlijk, hou deze code hier.

13:05.240 --> 13:07.820
Maar we kunnen ook aanvoeren dat we dit misschien

13:07.820 --> 13:09.860
in een configuratie zetten.

13:09.860 --> 13:12.100
Dus laten we naar de configureer methode gaan,

13:12.100 --> 13:13.660
die we hier al hebben, en onze luisteraars

13:13.660 --> 13:17.683
hier toevoegen of onze eigenschap setup hier om te configureren.

13:18.880 --> 13:20.780
Laten we natuurlijk af van attach,

13:20.780 --> 13:24.450
want dat is nu iets wat de basisklasse voor ons doet, en laten we

13:24.450 --> 13:26.980
eens kijken wat TypeScript niet bevalt, natuurlijk

13:26.980 --> 13:29.690
moeten we hier af van de attach.

13:29.690 --> 13:32.520
En ja, één ding vindt TypeScript niet leuk, het

13:32.520 --> 13:35.090
klaagt nu dat deze velden niet geïnitialiseerd

13:35.090 --> 13:37.190
worden in de contructor, omdat het

13:37.190 --> 13:40.380
niet begrijpt of niet controleert dat configure wordt

13:40.380 --> 13:42.260
aangeroepen in de contructor en

13:42.260 --> 13:44.770
deze initialisatie doet.

13:44.770 --> 13:47.500
Dus om aan TypeScript te voldoen, verplaats

13:47.500 --> 13:50.550
ik deze initialisaties terug van configure naar

13:50.550 --> 13:52.170
de constructor.

13:52.170 --> 13:54.190
Technisch gezien is het resultaat precies hetzelfde,

13:54.190 --> 13:55.953
maar nu zal TypeScript niet klagen.

13:56.800 --> 13:59.240
Het zal echter klagen dat we een private

14:00.440 --> 14:02.310
configure methode hebben,

14:02.310 --> 14:05.910
dus net als voorheen moeten we dit veranderen, en van

14:05.910 --> 14:08.940
configure een publieke methode maken.

14:08.940 --> 14:11.460
Nu, het is geen must, maar het is een soort conventie

14:11.460 --> 14:13.000
om je publieke methodes eerst

14:13.000 --> 14:14.570
te hebben, daarom zal ik het hier

14:14.570 --> 14:17.240
boven de andere private methodes zetten.

14:17.240 --> 14:19.370
En natuurlijk klaagt het nu ook dat

14:19.370 --> 14:21.990
we geen renderContent methode hebben.

14:21.990 --> 14:25.020
Nu zal ik er één toevoegen, gewoon omdat het nodig is.

14:25.020 --> 14:26.780
Hier doen we niets in, dus technisch

14:26.780 --> 14:28.890
gezien is het niet nodig, maar nu voldoen

14:28.890 --> 14:31.053
we aan onze basisklasse.

14:32.260 --> 14:34.603
Kanttekening, renderContent, en configure,

14:35.550 --> 14:39.590
in de ProjectList klasse, kunnen ook verplaatst worden boven die private

14:39.590 --> 14:43.230
methode hier om precies dezelfde redenen, voor deze conventie

14:43.230 --> 14:45.123
die ik net noemde.

14:46.440 --> 14:49.870
En daarmee hebben we ook ProjectInput geherstructureerd,

14:49.870 --> 14:51.780
om te profiteren van overerving

14:51.780 --> 14:55.330
en de basisklasse veel van het werk te laten doen.

14:55.330 --> 14:57.670
Eens kijken of dat nu allemaal werkt.

14:57.670 --> 15:00.710
Als we dat opslaan, compileert het zonder

15:00.710 --> 15:02.740
fouten, lijkt het prima te

15:02.740 --> 15:05.870
lopen, dus werkt dit is de vraag.

15:05.870 --> 15:07.810
En dat ziet er goed uit.

15:07.810 --> 15:09.720
Het werkt hetzelfde als voorheen,

15:09.720 --> 15:11.600
maar nu hebben we schonere code,

15:11.600 --> 15:14.240
waarbij we profiteren van hergebruik van code,

15:14.240 --> 15:15.850
dankzij overerving.

15:15.850 --> 15:18.540
Nu, het is niet de enige plaats waar we kunnen erven.

15:18.540 --> 15:20.610
Ik wil deze lezing afsluiten

15:20.610 --> 15:24.230
door ook de status van ons project te refactoren.

15:24.230 --> 15:26.240
Technisch gezien hebben we daar geen overerving

15:26.240 --> 15:29.450
nodig, omdat we maar één enkele toestand beheren in deze hele applicatie,

15:29.450 --> 15:31.230
maar stel je een grotere applicatie

15:31.230 --> 15:33.130
voor, waar je meerdere verschillende

15:33.130 --> 15:35.310
toestanden hebt.

15:35.310 --> 15:37.240
Eén voor de gebruikersstatus,

15:37.240 --> 15:39.290
of de gebruiker is ingelogd enzovoort,

15:39.290 --> 15:43.030
één voor de projecten, één voor een winkelwagentje.

15:43.030 --> 15:45.600
Nu zul je merken dat sommige kenmerken van je

15:45.600 --> 15:48.080
staatsklasse altijd hetzelfde zijn.

15:48.080 --> 15:50.520
Specifiek, die array van luisteraars,

15:50.520 --> 15:52.780
en de addListener methode.

15:52.780 --> 15:54.730
Dus we kunnen hier ook een basisklasse gebruiken.

15:55.650 --> 15:58.170
We kunnen hier een klasse State gebruiken,

15:58.170 --> 16:01.230
en die klasse heeft een listeners array, en die

16:01.230 --> 16:04.640
klasse heeft ook een addListeners methode, dus we knippen

16:04.640 --> 16:07.120
beide uit ProjectState, en voegen het

16:07.120 --> 16:09.160
toe aan State.

16:09.160 --> 16:12.610
Nu, dat betekent natuurlijk ook dat we niet weten of onze

16:12.610 --> 16:14.700
listener daadwerkelijk een array

16:14.700 --> 16:16.720
van projecten zal teruggeven.

16:16.720 --> 16:18.253
Dus eigenlijk wil

16:19.110 --> 16:20.760
ik hier, voor dit functietype,

16:20.760 --> 16:24.740
ook een generiek type hebben.

16:24.740 --> 16:27.440
Zodat we dit van buitenaf kunnen instellen.

16:27.440 --> 16:28.483
We kunnen dat doen, we

16:29.790 --> 16:31.623
kunnen een generiek type schrijven,

16:32.680 --> 16:35.730
zoals dit hier, een aangepast type, dat generiek is, we kunnen

16:35.730 --> 16:38.410
de haakjes na onze typenaam toevoegen, een identifier

16:38.410 --> 16:40.150
van onze keuze gebruiken, en dan dat

16:40.150 --> 16:42.460
type hier hergebruiken.

16:42.460 --> 16:44.960
Nu kunnen we State generiek maken, we kunnen dezelfde

16:44.960 --> 16:46.320
identifier gebruiken, omdat

16:46.320 --> 16:49.530
het een andere constructie is dan ons aangepaste type.

16:49.530 --> 16:53.520
En dan hier, wanneer we zeggen dat we een lijst van luisteraars willen

16:53.520 --> 16:56.780
hebben, moeten we TypeScript vertellen welk generiek

16:56.780 --> 16:58.850
type de luisteraars gebruiken voor

16:58.850 --> 17:01.510
dit State object dat we maken.

17:01.510 --> 17:03.850
En dat betekent gewoon dat we ons generieke

17:03.850 --> 17:06.490
type hier, en hier kunnen doorsturen.

17:06.490 --> 17:09.410
Dus wanneer we nu state uitbreiden, moeten we het type

17:09.410 --> 17:12.630
gegevens specificeren waarmee deze state zal werken, en in

17:12.630 --> 17:14.930
plaats van state, wordt dit dan doorgestuurd

17:14.930 --> 17:17.680
naar ons listener custom type, dat is het idee.

17:17.680 --> 17:19.580
En hoe gebruiken we dat allemaal?

17:19.580 --> 17:21.950
Nou, daar beneden, in de ProjectState

17:21.950 --> 17:24.930
klasse, breiden we gewoon de State klasse uit, en

17:24.930 --> 17:27.900
nu, geven we een waarde, een concrete waarde voor

17:27.900 --> 17:30.040
die generieke plaatshouder, en hier,

17:30.040 --> 17:32.480
deze concrete waarde is Project, omdat

17:32.480 --> 17:36.510
deze ProjectState gaat over het beheer van, wat denk je?

17:36.510 --> 17:37.393
Projecten.

17:38.970 --> 17:41.650
Nu, de private constructor hier heeft een probleem,

17:41.650 --> 17:43.390
zoals je kunt zien, omdat we super

17:43.390 --> 17:45.160
niet aanroepen.

17:45.160 --> 17:46.930
Nou, dat moeten we zeker doen, laten we

17:46.930 --> 17:48.350
super hierheen bellen, dat is alles

17:48.350 --> 17:49.800
wat we daar moeten doen.

17:50.640 --> 17:53.490
En hier, als we naar beneden scrollen, waar

17:53.490 --> 17:55.880
we door de luisteraars gaan, zien we

17:55.880 --> 17:57.890
dat luisteraars privé is, en het

17:57.890 --> 18:00.240
is privé in onze basisklasse.

18:00.240 --> 18:01.860
Dat betekent dat we er alleen toegang

18:01.860 --> 18:03.580
toe hebben vanuit de basisklasse.

18:03.580 --> 18:06.760
Maar je hebt geleerd over een andere toegangsmodificatie,

18:06.760 --> 18:09.380
die vergelijkbaar is met private, maar ook

18:09.380 --> 18:12.900
toegang toestaat vanuit overervende klassen, en dat zou

18:12.900 --> 18:14.990
protected zijn.

18:14.990 --> 18:17.200
Beschermd betekent dat het nog steeds

18:17.200 --> 18:18.930
niet toegankelijk is van buiten

18:18.930 --> 18:23.030
de klasse, maar wel vanuit elke klasse die erft.

18:23.030 --> 18:24.740
Met dat, laten we alles opslaan,

18:24.740 --> 18:26.650
het zou prima moeten compileren.

18:26.650 --> 18:28.940
En laten we dit snel testen, en dat ziet

18:28.940 --> 18:31.790
er goed uit, dus dat werkt als voorheen, maar nu,

18:31.790 --> 18:34.160
opnieuw, met een iets mooiere code, met

18:34.160 --> 18:36.420
gebruik van overerving en generiek voor

18:36.420 --> 18:38.363
ons toestandsbeheer.
