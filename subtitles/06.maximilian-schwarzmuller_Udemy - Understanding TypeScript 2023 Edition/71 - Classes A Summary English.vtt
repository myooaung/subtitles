WEBVTT

1
00:00:02.140 --> 00:00:04.200
<v ->Now that's it for classes.</v>

2
00:00:04.200 --> 00:00:06.180
We learned about classes themselves.

3
00:00:06.180 --> 00:00:08.260
We learned about their properties,

4
00:00:08.260 --> 00:00:09.850
the axis modifiers,

5
00:00:09.850 --> 00:00:12.110
private for internal axis,

6
00:00:12.110 --> 00:00:15.990
protected for internal axis also in inherited classes,

7
00:00:15.990 --> 00:00:19.560
and public for axis from everywhere.

8
00:00:19.560 --> 00:00:21.610
We also learned about methods which we can add.

9
00:00:21.610 --> 00:00:23.520
About static methods and properties.

10
00:00:23.520 --> 00:00:25.520
About abstract methods

11
00:00:25.520 --> 00:00:28.280
and abstract classes, which is important

12
00:00:28.280 --> 00:00:31.350
when we talk about another important concept,

13
00:00:31.350 --> 00:00:33.490
the inheritance which we can use.

14
00:00:33.490 --> 00:00:36.360
Here, we are inheriting from 'Department' with the

15
00:00:36.360 --> 00:00:37.660
'extends' keyword.

16
00:00:37.660 --> 00:00:40.440
This allows us to share functionalities,

17
00:00:40.440 --> 00:00:41.830
properties and methods,

18
00:00:41.830 --> 00:00:45.100
from the 'Department' class with this inheriting class

19
00:00:45.100 --> 00:00:47.162
and add our own functionalities

20
00:00:47.162 --> 00:00:50.300
or override existing functionalities.

21
00:00:50.300 --> 00:00:52.560
Either because we have to override

22
00:00:52.560 --> 00:00:55.620
as in the case of 'describe' which is a abstract method.

23
00:00:55.620 --> 00:00:58.710
Or because we want to override, like in the case of

24
00:00:58.710 --> 00:01:01.640
'addEmployee' here in the Accounting Department.

25
00:01:01.640 --> 00:01:04.290
That's not a abstract method in the base class,

26
00:01:04.290 --> 00:01:07.540
but of course we still can override it if we want to.

27
00:01:07.540 --> 00:01:10.370
We also learned about the singleton pattern

28
00:01:10.370 --> 00:01:13.150
and 'private constructors' which can also be

29
00:01:13.150 --> 00:01:14.180
useful sometimes.

30
00:01:14.180 --> 00:01:17.290
And then for overall, you now hopefully have a good idea of

31
00:01:17.290 --> 00:01:20.290
classes and what you can do with them in TypeScript.

32
00:01:20.290 --> 00:01:22.760
In general, of course, you would need to know what classes

33
00:01:22.760 --> 00:01:26.030
and objects, and also a bit what prototypes are about

34
00:01:26.030 --> 00:01:29.690
in Vanilla JavaScript because that's generally not

35
00:01:29.690 --> 00:01:31.870
something introduced by TypeScript,

36
00:01:31.870 --> 00:01:34.600
but of course something TypeScript is related to

37
00:01:34.600 --> 00:01:37.800
because TypeScript builds up on these default

38
00:01:37.800 --> 00:01:40.240
JavaScript features, and adds it's own magic

39
00:01:40.240 --> 00:01:41.663
on top of these features.

