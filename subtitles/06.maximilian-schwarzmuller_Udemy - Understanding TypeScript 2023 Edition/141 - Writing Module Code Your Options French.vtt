WEBVTT

00:02.160 --> 00:03.740
Instructeur : Alors quelles sont nos options

00:03.740 --> 00:06.440
lorsque nous voulons diviser le code en plusieurs fichiers ?

00:06.440 --> 00:10.720
En fait, nous avons trois options pour cela.

00:10.720 --> 00:12.680
La première option serait d'écrire simplement

00:12.680 --> 00:16.110
plusieurs fichiers de code, plusieurs fichiers TypeScript.

00:16.110 --> 00:17.460
TypeScript compilera alors

00:17.460 --> 00:20.710
automatiquement tous les fichiers de code dans le répertoire

00:20.710 --> 00:23.020
source et importera manuellement les fichiers

00:23.020 --> 00:25.000
Java script compilés en HTML.

00:25.000 --> 00:26.220
C'est une option qui peut

00:26.220 --> 00:28.970
convenir à certains projets, mais vous devrez gérer toutes

00:28.970 --> 00:31.780
ces importations manuellement, ce qui peut être fastidieux

00:31.780 --> 00:34.600
et source d'erreurs. De plus, lorsque vous utilisez certaines

00:34.600 --> 00:36.980
fonctionnalités de TypeScript, vous renoncez également

00:36.980 --> 00:39.560
à la prise en charge des types si un type est défini dans

00:39.560 --> 00:42.100
le fichier A et que vous l'utilisez dans le fichier B

00:42.100 --> 00:43.670
et que TypeScript ne connaît pas

00:43.670 --> 00:46.030
cette connexion.

00:46.030 --> 00:47.480
C'est pourquoi ce n'est pas vraiment

00:47.480 --> 00:49.290
une bonne option pour les grands projets.

00:49.290 --> 00:52.500
En revanche, pour les projets plus importants, nous avons deux options principales.

00:52.500 --> 00:55.470
Nous avons les espaces de noms et le regroupement de fichiers par exemple.

00:55.470 --> 00:59.410
Les espaces de noms sont une fonctionnalité de TypeScript, une fonctionnalité

00:59.410 --> 01:03.430
syntaxique, vous pouvez ajouter du code spécial à votre code pour utiliser

01:03.430 --> 01:04.840
cette fonctionnalité et

01:04.840 --> 01:08.650
elle vous permet de regrouper du code sous un espace de noms et d'importer

01:08.650 --> 01:12.730
des espaces de noms dans d'autres fichiers.

01:12.730 --> 01:16.020
Vous pouvez donc avoir un espace de nom par fichier par exemple.

01:16.020 --> 01:18.790
Importez un autre fichier dans un autre fichier encore

01:18.790 --> 01:21.930
et exploitez cet espace de noms qui se trouve dans un autre fichier

01:21.930 --> 01:24.650
à partir du fichier d'importation. Nous allons voir

01:24.650 --> 01:25.970
cela en pratique au cas où ce

01:25.970 --> 01:28.030
ne serait pas tout à fait clair.

01:28.030 --> 01:30.020
TypeScript ne se contente pas de prendre

01:30.020 --> 01:34.130
en charge cette fonction, il regroupe également les fichiers dans un seul fichier,

01:34.130 --> 01:37.230
de sorte qu'au final, vous écrivez du code dans plusieurs fichiers

01:37.230 --> 01:39.560
qui sont compilés, mais qui sont ensuite importés

01:39.560 --> 01:42.750
les uns dans les autres, de sorte que vous avez moins d'importations

01:42.750 --> 01:46.950
à gérer et que vous n'avez pas besoin de gérer manuellement différentes importations

01:46.950 --> 01:50.030
dans un fichier HTML.

01:50.030 --> 01:52.180
Maintenant, une alternative aux espaces

01:52.180 --> 01:55.750
de noms, et sans doute l'alternative la plus importante et la plus moderne,

01:55.750 --> 02:00.750
est d'utiliser les importations/exportations ES6, également connues sous le nom de modules

02:01.870 --> 02:06.480
ES6, car il s'avère que, totalement détaché de TypeScript, le script Java moderne a une

02:06.480 --> 02:09.940
solution pour ce problème également, car vous avez ce problème non

02:09.940 --> 02:11.440
seulement dans les projets TypeScript,

02:11.440 --> 02:13.140
mais dans tout projet Java script

02:13.140 --> 02:15.850
plus important.

02:15.850 --> 02:18.200
Le script Java moderne supporte d'emblée les

02:18.200 --> 02:21.150
déclarations d'importation et d'exportation, ce qui

02:21.150 --> 02:23.110
vous permet d'indiquer quel fichier

02:23.110 --> 02:24.910
dépend de quel autre fichier et vous

02:24.910 --> 02:27.920
avez donc tous ces fichiers individuels, mais vous n'avez

02:27.920 --> 02:30.560
pas besoin de gérer les importations manuellement,

02:30.560 --> 02:33.770
ce que font les navigateurs modernes.

02:33.770 --> 02:36.020
Ils le comprennent et téléchargent et exécutent automatiquement

02:36.020 --> 02:38.800
les fichiers dont un autre fichier dépend.

02:38.800 --> 02:41.370
Vous utilisez la syntaxe d'importation/exportation pour cela et TypeScript

02:41.370 --> 02:43.470
prend également en charge cette fonction.

02:43.470 --> 02:46.870
Vous pouvez donc l'utiliser en TypeScript sans aucun problème.

02:46.870 --> 02:48.700
Vous compilez par fichier, mais vous

02:48.700 --> 02:50.810
n'avez besoin que d'un seul script d'importation

02:50.810 --> 02:53.680
car, comme je viens de le mentionner, les navigateurs modernes

02:53.680 --> 02:56.350
savent comment récupérer toutes les autres dépendances,

02:56.350 --> 02:58.570
ce que vous verrez également en action dans la

02:58.570 --> 03:00.710
section principale.

03:00.710 --> 03:02.320
Une note importante ici, avec cela,

03:02.320 --> 03:03.830
nous nous retrouverons techniquement

03:03.830 --> 03:06.110
avec plusieurs fichiers et même si nous n'aurons pas

03:06.110 --> 03:09.140
à gérer les importations manuellement, les importations de script,

03:09.140 --> 03:11.550
nous avons encore quelques inconvénients à cause de

03:11.550 --> 03:13.730
cela parce que chaque fichier dont vous dépendez

03:13.730 --> 03:15.130
doit être téléchargé séparément,

03:15.130 --> 03:16.900
ce qui signifie plus de requêtes HTTP et

03:16.900 --> 03:19.460
ainsi de suite. Par conséquent, vous pouvez regrouper les

03:19.460 --> 03:22.210
fichiers ensemble pour travailler sur plusieurs fichiers pendant

03:22.210 --> 03:24.860
le développement, mais expédier un seul fichier pour la production,

03:24.860 --> 03:30.840
mais vous avez besoin d'outils tiers pour cela, par exemple Webpack, et je vais vous montrer comment cela fonctionne également, mais

03:30.840 --> 03:35.700
dans une section séparée où nous allons jeter un coup d'oeil à Webpack et TypeScript et pourquoi nous l'utilisons

03:35.700 --> 03:39.500
et comment nous l'utilisons.

03:39.500 --> 03:41.100
Pour l'instant, utilisons ces

03:41.100 --> 03:43.900
deux approches dans leur forme de base et voyons comment

03:43.900 --> 03:45.870
nous pouvons améliorer notre code en

03:45.870 --> 03:48.853
le répartissant sur plusieurs fichiers.
