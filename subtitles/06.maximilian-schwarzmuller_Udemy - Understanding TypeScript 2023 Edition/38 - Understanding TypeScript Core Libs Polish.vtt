WEBVTT

00:02.190 --> 00:03.570
-: My też mamy tu moduł.

00:03.570 --> 00:06.050
Teraz moduł jest opcją, którą pominę na

00:06.050 --> 00:07.540
razie, ponieważ naprawdę

00:07.540 --> 00:10.830
ma sens tylko wtedy, gdy poznamy moduły w TypeScript

00:10.830 --> 00:13.400
i jak możemy połączyć wiele plików.

00:13.400 --> 00:15.350
Więc zignorujmy to na razie.

00:15.350 --> 00:17.250
Lib jest jednak interesujący.

00:17.250 --> 00:20.890
Lib to opcja, która pozwala określić, jakie

00:20.890 --> 00:25.650
domyślne obiekty i funkcje zna TypeScript.

00:25.650 --> 00:28.580
Z tym mam na myśli takie rzeczy jak praca z domem.

00:28.580 --> 00:31.930
Powiedzmy w indeksie. html mamy przycisk i na tym przycisku

00:31.930 --> 00:33.700
mówimy: "Kliknij mnie. Teraz po kliknięciu tego przycisku chcemy

00:33.700 --> 00:35.100
po prostu wydrukować wiadomość.

00:35.100 --> 00:36.610
Teraz, w aplikacji. ts możemy wybrać ten przycisk.

00:36.610 --> 00:39.820
Dostęp do tego przycisku możemy

00:39.820 --> 00:41.420
uzyskać za pomocą dokumentu. querySelector.

00:43.808 --> 00:44.641
Na przykład wybierając pierwszy przycisk, który znajdziemy.

00:44.641 --> 00:48.130
Jeśli to zrobimy, to wtedy to zadziała.

00:48.130 --> 00:51.580
Nie otrzymujemy tutaj żadnych typów błędów.

00:51.580 --> 00:53.000
Więc jeśli przejdę do mojego

00:53.000 --> 00:58.000
przycisku i dodam EventListener tutaj, dostanę błąd tutaj faktycznie, ponieważ TypeScript nie

00:58.390 --> 01:00.990
wie na pewno, czy znajdujemy tutaj przycisk.

01:00.990 --> 01:04.010
Na razie możemy obejść to wykrzyknikiem,

01:04.010 --> 01:07.310
po tej linii i wrócę do tego, co dokładnie to robi

01:07.310 --> 01:08.860
w przyszłości.

01:08.860 --> 01:11.320
Zasadniczo mówi TypeScriptowi: "Nie martw

01:11.320 --> 01:13.667
się, "taki przycisk będzie istniał".

01:13.667 --> 01:15.097
"Uzyskamy tu wartość. Więc teraz możemy dodać tutaj zdarzenie kliknięcia.

01:15.097 --> 01:17.360
A potem znajdź jakąś anonimową funkcję

01:17.360 --> 01:19.470
może tam gdzie konsola. log kliknięty.

01:19.470 --> 01:21.670
Teraz interesującą rzeczą jest nie tyle to, że

01:21.670 --> 01:24.920
musiałem dodać wykrzyknik, jak powiedziałem,

01:24.920 --> 01:26.450
wrócę do tego, ale to, że jeśli uruchomię

01:26.450 --> 01:29.310
tsc to po prostu się skompiluje.

01:29.310 --> 01:31.150
Teraz, czy TypeScript nie powinien

01:31.150 --> 01:34.840
narzekać, że dokument jest tutaj nieznany?

01:34.840 --> 01:38.370
Skąd wie, że mamy dostępny taki dokument, stałą

01:38.370 --> 01:39.690
lub zmienną?

01:39.690 --> 01:43.290
Skąd wie, że nawet jeśli mamy to dostępne,

01:43.290 --> 01:45.610
że trzyma obiekt, który ma

01:45.610 --> 01:48.350
naszą metodę querySelector?

01:48.350 --> 01:50.010
Skąd wie, że przycisk jest czymś,

01:50.010 --> 01:51.690
co ma metodę addEventListener?

01:51.690 --> 01:55.932
Skąd TypeScript wie to wszystko?

01:55.932 --> 01:57.120
Teraz możecie powiedzieć: "Oczywiście, że wie. Ponieważ w Vanilla JavaScript

01:57.120 --> 01:59.290
byłby to poprawny kod, ale pamiętaj, że kiedy

01:59.290 --> 02:01.430
piszesz kod TypeScript, niekoniecznie piszesz

02:01.430 --> 02:03.290
go dla przeglądarki.

02:03.290 --> 02:05.580
Możesz napisać swój Node. js aplikacja z TypeScript

02:05.580 --> 02:08.080
i tam rzeczywiście to wszystko

02:08.080 --> 02:11.310
by nie działało.

02:11.310 --> 02:13.200
Powodem, dla którego to działa

02:13.200 --> 02:14.630
jest ta opcja lib i jak widzisz nie jest ona

02:14.630 --> 02:18.280
nawet ustawiona tutaj, ale jeśli nie jest ustawiona to pewne domyślne wartości są przyjmowane.

02:18.280 --> 02:21.940
Jeśli nie jest ustawiony, domyślne ustawienia

02:21.940 --> 02:24.420
zależą od twojego celu JavaScript

02:24.420 --> 02:28.180
tutaj, a dla es6 domyślnie zawiera wszystkie funkcje,

02:28.180 --> 02:31.536
które są globalnie dostępne w es6.

02:31.536 --> 02:33.270
Na przykład obiekt Map, który jest dostępny w es6.

02:33.270 --> 02:35.940
Dlatego nie będzie narzekać, jeśli użyjesz Mapy.

02:35.940 --> 02:40.120
Zakłada więc, że wszystkie funkcje es6, które są

02:40.120 --> 02:45.120
udostępniane globalnie w JavaScript, że są one dostępne

02:46.400 --> 02:48.700
również w TypeScript.

02:50.677 --> 02:51.780
A dodatkowo zakłada,

02:51.780 --> 02:54.530
że wszystkie API DOM są dostępne.

02:54.530 --> 02:57.070
Szczegółowe opisy dotyczące wszystkich tych opcji znajdziesz,

02:57.070 --> 03:00.670
nawiasem mówiąc, w oficjalnym pudełku, które są podlinkowane w wykładzie na końcu

03:00.670 --> 03:01.740
tego modułu.

03:01.740 --> 03:04.550
Tak więc, w skrócie, jeśli opcja lib nie jest ustawiona, przyjmowane

03:04.550 --> 03:07.300
są pewne domyślne wartości i są to zazwyczaj wartości domyślne,

03:07.300 --> 03:09.490
których potrzebujesz, aby TypeScript działał

03:09.490 --> 03:11.520
w przeglądarce.

03:11.520 --> 03:13.760
Tak więc, wszystkie API DOM są już nieaktualne.

03:13.760 --> 03:16.030
Jeśli skomentujemy to w i teraz

03:16.030 --> 03:19.014
skompiluję wszystko, zdecydowanie dostanę

03:19.014 --> 03:20.670
błąd, ponieważ teraz komentują

03:20.670 --> 03:24.780
to w nie mamy już ustawień domyślnych.

03:24.780 --> 03:26.010
Zamiast tego, teraz mówimy: "Hej, proszę

03:26.010 --> 03:28.050
dołączyć "niektóre domyślne biblioteki", niektóre domyślne definicje

03:28.050 --> 03:30.370
typów, które można powiedzieć, które dam ci w tej tablicy.

03:30.370 --> 03:32.437
I jak widzisz, nie przekazuję tutaj

03:32.437 --> 03:36.330
żadnego opisu, żadnych ścieżek, żadnych wartości.

03:36.330 --> 03:39.470
I dlatego to, co mówię teraz do TypeScript, to "Hej, w

03:39.470 --> 03:43.213
odniesieniu do wszystkich domyślnych, wiesz, "proszę, weź to

03:44.162 --> 03:45.050
pod uwagę". I, wiesz, nic.

03:45.050 --> 03:46.920
Więc tylko jeśli to jest wykomentowane, to

03:46.920 --> 03:50.037
działa, bo wtedy TypeScript przyjmie jakieś domyślne wartości.

03:50.037 --> 03:51.770
Jeśli ustawię domyślnie wyraźnie,

03:51.770 --> 03:53.580
cóż wtedy TypeScript oczywiście przylega

03:53.580 --> 03:55.300
do tego, co ustawiam tutaj.

03:55.300 --> 03:57.410
A tutaj na przykład nie zna dokumentu,

03:57.410 --> 03:59.740
Nie zna nawet konsoli tutaj.

03:59.740 --> 04:01.600
Więc dlatego chcemy ustawić to dwie bardziej

04:01.600 --> 04:02.680
rozsądne wartości i, ponownie,

04:02.680 --> 04:05.410
jeśli uderzysz w przestrzeń kontrolną, a tutaj dostaniesz

04:05.410 --> 04:07.343
autouzupełnianie.

04:08.900 --> 04:10.930
Na przykład tam moglibyśmy dodać dom.

04:10.930 --> 04:12.360
To jest identyfikator i istnieją pewne predefiniowane

04:12.360 --> 04:13.800
identyfikatory, które TypeScript rozumie, ponownie,

04:13.800 --> 04:15.800
znajdziesz pełną listę w oficjalnych dokumentach.

04:15.800 --> 04:18.280
Docs dla tej opcji również jest

04:18.280 --> 04:21.070
dołączony do tego wykładu.

04:21.070 --> 04:22.840
Tak więc jest to identyfikator, który TypeScript

04:22.840 --> 04:26.070
rozumie i jest to identyfikator, który zasadniczo odblokowuje wszystkie

04:26.070 --> 04:27.750
interfejsy API DOM w TypeScript, tak że

04:27.750 --> 04:30.100
TypeScript rozumie, co robisz tutaj.

04:30.100 --> 04:32.680
Więc teraz, już widzisz, że zna konsolę,

04:32.680 --> 04:35.150
zna dokument i tak dalej.

04:35.150 --> 04:37.040
Więc teraz, ponieważ pracujemy

04:37.040 --> 04:40.100
z Next-Gen JavaScript, powinniśmy również dodać opcję

04:40.100 --> 04:42.550
es6, aby TypeScript również rozumiał wszystkie

04:42.550 --> 04:45.400
globalnie dostępne opcje es6.

04:45.400 --> 04:50.830
Dobrym pomysłem jest też dodanie dom. iterable i scripthost.

04:50.830 --> 04:54.130
Z tym tutaj odblokowalibyśmy wszystkie podstawowe funkcje JavaScript, które

04:54.130 --> 04:56.540
chcielibyście pracować i to, przy okazji, jest dokładne

04:56.540 --> 05:00.620
domyślne ustawienie, które otrzymacie, gdy ustawicie

05:00.620 --> 05:02.530
cel na es6, w każdym razie.

05:02.530 --> 05:05.250
Więc jeśli skomentujesz to i ustawisz w ten sposób,

05:05.250 --> 05:07.360
masz dokładnie takie samo zachowanie,

05:07.360 --> 05:09.980
jak gdybyś w ogóle nie określił lib.

05:09.980 --> 05:13.550
Teraz tutaj skomentuję, że w chociaż i dzięki

05:13.550 --> 05:15.860
temu to się skompiluje.

05:15.860 --> 05:17.959
Ponownie, ustawienie tego jest trochę

05:17.959 --> 05:20.920
zbędne chociaż, po prostu chcę wyjaśnić, co to robi.
