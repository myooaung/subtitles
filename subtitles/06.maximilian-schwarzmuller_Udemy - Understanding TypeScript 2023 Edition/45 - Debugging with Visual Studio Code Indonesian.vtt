WEBVTT

00:02.170 --> 00:03.003
Instruktur: Jadi sekarang

00:03.003 --> 00:04.760
setelah kita memiliki proyek yang dikonfigurasi dengan

00:04.760 --> 00:08.130
benar, mari kita selami lebih dalam tentang bagaimana Anda dapat men-debug proyek Anda atau bagaimana

00:08.130 --> 00:10.500
Anda dapat memiliki alur pengembangan yang bagus.

00:10.500 --> 00:13.560
Saya menunjukkan kepada Anda pengaturan IDE dasar saya di

00:13.560 --> 00:14.575
awal kursus ini.

00:14.575 --> 00:17.750
Benar-benar pastikan Anda memasang ekstensi yang tepat.

00:17.750 --> 00:22.750
Di sana untuk TypeScript, itu turun ke ESLint yang dapat membantu

00:22.980 --> 00:26.410
Anda dengan linting kode TypeScript Anda.

00:26.410 --> 00:29.310
Jadi, dengan meningkatkan kualitas kode, Anda

00:29.310 --> 00:31.620
mungkin memerlukan konfigurasi tambahan

00:31.620 --> 00:33.900
agar ESLint memiliki efek.

00:33.900 --> 00:36.310
Ini dapat membantu Anda dalam proyek yang

00:37.220 --> 00:38.570
lebih maju masih lebih menarik

00:38.570 --> 00:40.818
dari itu, Anda ingin benar-benar menggunakan

00:40.818 --> 00:43.370
Prettier untuk secara otomatis memformat kode

00:43.370 --> 00:45.770
Anda dan memiliki kode yang diformat dengan

00:45.770 --> 00:49.870
baik dan Anda mungkin ingin mencoba Debugger untuk Chrome karena itu memungkinkan

00:49.870 --> 00:53.140
Anda untuk men-debug file TypeScript Anda bahkan dari dalam

00:53.140 --> 00:55.810
VS Code melalui Chrome tetapi tanpa menggunakan

00:55.810 --> 00:59.440
Chrome Dev Tools.

00:59.440 --> 01:01.820
Tentu saja, Anda bisa menggunakannya seperti yang

01:01.820 --> 01:02.653
Anda pelajari.

01:02.653 --> 01:05.154
Jika Anda mengaktifkan sourceMaps di sini, yang tentu saja

01:05.154 --> 01:07.160
selalu bisa Anda lakukan, Anda akan mendapatkan

01:07.160 --> 01:09.240
file-file yang diterjemahkan di sana, yang benar-benar

01:09.240 --> 01:10.429
bagus.

01:10.429 --> 01:14.170
Tetapi Anda juga dapat menggunakan VS Code.

01:14.170 --> 01:15.960
Anda dapat menempatkan breakpoints

01:15.960 --> 01:17.340
di sini, katakanlah di clickHandler

01:17.340 --> 01:19.842
dan sekarang untuk meluncurkan file Anda

01:19.842 --> 01:24.842
di sini melalui VS Code, Anda perlu mengaktifkan sourceMaps juga, tetapi kita masih

01:26.100 --> 01:28.690
dapat menggunakan VS Code daripada browser

01:28.690 --> 01:30.950
Dev Tools.

01:30.950 --> 01:34.570
Jadi aktifkan sourceMaps, tempatkan breakpoint

01:34.570 --> 01:38.930
Anda dan kemudian pergi ke Debug, Start Debugging.

01:38.930 --> 01:40.320
Sekarang, saat pertama kali Anda

01:40.320 --> 01:42.170
menjalankan ini, seharusnya Anda akan ditanyai

01:42.170 --> 01:45.350
lingkungan dan di sana dengan ekstensi Debugger for Chrome yang terpasang,

01:45.350 --> 01:47.850
Anda seharusnya dapat memilih Chrome.

01:47.850 --> 01:49.960
Sekarang akan pergi ke laucnh. json di mana Anda mengkonfigurasi

01:49.960 --> 01:53.200
bagaimana seharusnya meluncurkannya dan di sana Anda

01:53.200 --> 01:56.740
harus mengarahkannya ke localhost:3000 karena di situlah

01:56.740 --> 01:59.330
server pengembangan kita berjalan dan tentu

01:59.330 --> 02:04.220
saja, proses itu, sehingga proses mulai npm harus berjalan.

02:04.220 --> 02:06.910
Untuk menunjuk ke localhost:3000 di sana dan sebagai

02:06.910 --> 02:09.740
webRoot, Anda dapat meninggalkan placeholder itu di

02:09.740 --> 02:11.890
sini yang berarti folder proyek ini diasumsikan

02:11.890 --> 02:13.780
sebagai host file Anda yang merupakan

02:13.780 --> 02:17.120
kasusnya dan sekarang kompilasi kode Anda sehingga sourceMaps

02:17.120 --> 02:19.780
juga dihasilkan setelah mengatur konfigurasi sourceMaps

02:19.780 --> 02:22.470
ke true sehingga sekarang kita memiliki ini dalam

02:22.470 --> 02:25.290
kode JavaScript.

02:25.290 --> 02:26.870
Kemudian dengan breakpoint Anda ditambahkan di sini

02:26.870 --> 02:28.400
dan peluncuran Anda. json dikonfigurasi,

02:28.400 --> 02:30.400
mari kita jalankan debugging di sini.

02:30.400 --> 02:32.140
Mulai debugging sekarang secara nyata

02:32.140 --> 02:34.830
dan akan membuka tab baru sekarang secara otomatis.

02:34.830 --> 02:36.020
Tab ini akan ditutup setiap

02:36.020 --> 02:38.730
kali Anda keluar dari proses debugging atau jika

02:38.730 --> 02:41.940
Anda menutup tab, proses debugging akan berhenti.

02:41.940 --> 02:44.590
Jadi sekarang dengan itu, Anda memasuki tampilan

02:44.590 --> 02:46.790
debugging di sini di VS Code di mana Anda dapat

02:46.790 --> 02:48.230
melacak variabel, menonton

02:48.230 --> 02:50.120
ekspresi tertentu dan melihat tumpukan

02:50.120 --> 02:51.910
panggilan saat ini dan jika Anda sekarang

02:51.910 --> 02:54.120
mengklik Click Me, Anda harus dibawa kembali

02:54.120 --> 02:56.590
ke editor dan eksekusi kode berhenti di breakpoint

02:56.590 --> 03:01.410
Anda di file TypeScript dan sekarang Anda dapat berjalan melalui file-nya, memeriksa nilai

03:01.410 --> 03:07.120
lokal untuk kata kunci ini atau untuk variabel pesan, misalnya, variabel script-wide yang mungkin Anda

03:07.120 --> 03:09.750
miliki dan variabel global yang Anda dapatkan akses

03:09.750 --> 03:13.320
ke objek global.

03:13.320 --> 03:15.560
Anda dapat menonton ekspresi tertentu

03:15.560 --> 03:19.290
seperti pesan + beberapa tanda seru dan yah, maka Anda

03:19.290 --> 03:22.690
selalu dapat melacak nilai yang ada di sana di sini

03:22.690 --> 03:27.483
di jendela ini jika Anda mau sehingga itu akan berhasil.

03:27.483 --> 03:30.480
Dan Anda dapat melihat tumpukan panggilan fungsi saat ini,

03:30.480 --> 03:33.010
misalnya, yang akan terjadi di clickHandler dan sekarang

03:33.010 --> 03:34.710
Anda dapat melangkah melalui kode

03:34.710 --> 03:37.590
Anda dengan kontrol ini untuk melangkah ke langkah berikutnya,

03:37.590 --> 03:39.800
melompati panggilan fungsi berikutnya, melangkah

03:39.800 --> 03:41.500
ke dalam panggilan fungsi atau melangkah

03:41.500 --> 03:43.827
keluar dari panggilan fungsi saat ini dan tumpukan

03:43.827 --> 03:46.710
panggilan, tentu saja, di sini akan menyesuaikan sesuai

03:46.710 --> 03:49.280
dengan itu dan dengan itu, dapat mengabaikan hal browser

03:49.280 --> 03:51.920
ini di sini, dengan itu, Anda selalu dapat melanjutkan

03:51.920 --> 04:00.290
eksekusi kode dengan mengklik tombol putar dan hanya jeda kapan pun Anda mencapai breakpoint Anda di lain waktu.

04:00.290 --> 04:02.080
Jadi, beginilah cara Anda dapat men-debug kode.

04:02.080 --> 04:04.050
Anda bisa menghapus breakpoint dengan mengkliknya.

04:04.050 --> 04:05.910
Ini adalah bagaimana Anda dapat

04:05.910 --> 04:07.310
men-debug kode dari dalam

04:07.310 --> 04:09.728
VS Code dengan bantuan alat debugging bawaan,

04:09.728 --> 04:12.450
ekstensi Chrome Debugger, konfigurasi turunan,

04:12.450 --> 04:15.470
dan soureMaps yang diatur dalam konfigurasi TypeScript

04:15.470 --> 04:17.743
Anda.
