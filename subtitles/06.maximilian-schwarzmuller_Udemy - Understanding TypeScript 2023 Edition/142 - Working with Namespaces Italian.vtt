WEBVTT

00:02.190 --> 00:04.860
-: Voglio iniziare con la funzione degli spazi dei nomi.

00:04.860 --> 00:06.810
Ora, per mostrarvi come funziona,

00:06.810 --> 00:09.980
prenderò queste due interfacce.

00:09.980 --> 00:11.480
Le interfacce drag and drop,

00:11.480 --> 00:14.140
tagliate dall'app. ts e aggiungere un nuovo

00:14.140 --> 00:19.140
file, dragdropinterfaces. ad esempio.

00:21.270 --> 00:25.180
Ora possiamo incollarlo e per usare gli spazi dei nomi, tutto

00:25.180 --> 00:29.140
ciò che dobbiamo fare è aggiungere la parola chiave namespace

00:31.645 --> 00:33.620
e poi le parentesi graffe.

00:33.620 --> 00:35.880
Ora dobbiamo anche dare un nome a questo

00:35.880 --> 00:39.590
spazio dei nomi e qui lo chiamerò Interfacce DD per un drag and

00:39.590 --> 00:41.660
drop, ma il nome dipende da voi.

00:41.660 --> 00:43.640
Quest'anno si tratta di una caratteristica

00:43.640 --> 00:45.250
di TypeScript, non di JavaScript.

00:45.250 --> 00:47.750
Non viene compilato in Vanilla JavaScript

00:47.750 --> 00:50.340
perché non esiste un equivalente diretto.

00:50.340 --> 00:54.860
Invece TypeScript lo compila in un oggetto, per così

00:54.860 --> 00:55.693
dire.

00:55.693 --> 00:57.490
A un oggetto in cui le cose che si inseriscono

00:57.490 --> 01:00.440
nello spazio dei nomi sono memorizzate in proprietà,

01:00.440 --> 01:02.140
ma non ci si deve preoccupare di

01:02.140 --> 01:06.960
questo, perché tutta la risoluzione dell'accesso a queste proprietà e il funzionamento

01:06.960 --> 01:10.640
di ogni cosa sono gestiti da TypeScript.

01:10.640 --> 01:13.940
Ora possiamo spostare queste interfacce nello spazio dei nomi

01:13.940 --> 01:16.130
e con questo abbiamo quasi finito.

01:16.130 --> 01:18.040
Ora però abbiamo un problema: queste

01:18.040 --> 01:22.280
interfacce sono ora disponibili solo in questo spazio dei nomi.

01:22.280 --> 01:23.113
Tra l'altro, non

01:23.113 --> 01:25.530
è possibile inserire solo le interfacce in uno

01:25.530 --> 01:27.070
spazio dei nomi, ma si può inserire

01:27.070 --> 01:28.057
qualsiasi cosa, classi,

01:28.057 --> 01:30.780
costanti, qualsiasi cosa si voglia.

01:30.780 --> 01:33.900
Qualsiasi cosa si voglia può essere inserita in uno spazio dei nomi.

01:33.900 --> 01:35.630
In pratica, si può avvolgere uno spazio dei

01:35.630 --> 01:37.150
nomi attorno a qualsiasi codice.

01:37.150 --> 01:39.830
Ma il problema è che queste funzionalità, queste

01:39.830 --> 01:41.140
interfacce sono ora disponibili

01:41.140 --> 01:44.800
solo all'interno di questo spazio dei nomi.

01:44.800 --> 01:47.280
Ora, come vedete, non abbiamo nient'altro lì dentro.

01:47.280 --> 01:49.010
Naturalmente potremmo riportare

01:49.010 --> 01:51.600
il codice che dipende da queste interfacce in questo

01:51.600 --> 01:53.370
spazio dei nomi, ma in tal caso ci toccherebbe

01:53.370 --> 01:56.960
soffrire, perché è emerso che abbiamo una classe piuttosto lunga che dipende

01:56.960 --> 01:58.940
da queste interfacce.

01:58.940 --> 02:02.900
Abbiamo la classe dell'elenco di progetti e la classe dell'elemento di progetto.

02:02.900 --> 02:05.260
Dipendono da queste interfacce, quindi ci

02:05.260 --> 02:08.922
sarebbero molte cose da aggiungere a questo spazio dei nomi.

02:08.922 --> 02:10.205
Pertanto, è possibile

02:10.205 --> 02:14.210
aggiungere la parola chiave export davanti a un'interfaccia per esportare

02:14.210 --> 02:16.850
una funzione da uno spazio dei nomi.

02:16.850 --> 02:19.680
Ciò significa che ora queste interfacce sono disponibili

02:19.680 --> 02:22.110
all'interno di questo spazio dei nomi, ma anche

02:22.110 --> 02:24.487
al di fuori di questo file.

02:24.487 --> 02:26.100
Vedremo come funziona tra un secondo,

02:26.100 --> 02:28.510
ma con questo creiamo l'interfaccia o qualsiasi

02:28.510 --> 02:30.710
cosa stiamo esportando.

02:30.710 --> 02:32.815
Questo non è limitato alle interfacce,

02:32.815 --> 02:36.610
ovviamente disponibili anche al di fuori di questo file,

02:36.610 --> 02:41.140
se importiamo o usiamo quello spazio dei nomi.

02:41.140 --> 02:41.973
E naturalmente non

02:41.973 --> 02:44.580
si possono esportare solo le interfacce in uno spazio dei nomi,

02:44.580 --> 02:45.636
ma qualsiasi cosa.

02:45.636 --> 02:48.010
Ora, la domanda è: come importare questo

02:48.010 --> 02:52.410
spazio dei nomi nell'applicazione?

02:52.410 --> 02:52.410
e

02:52.410 --> 02:56.210
per questo, TypeScript ha una sintassi speciale che si può usare.

02:56.210 --> 02:57.867
Torniamo all'inizio dell'applicazione. ts e ora qui si

02:57.867 --> 03:01.440
aggiungono tre slash in avanti, importante tre, non solo

03:01.440 --> 03:03.690
due, perché questo non è un commento

03:03.690 --> 03:06.150
normale, quello che stiamo creando sarà

03:06.150 --> 03:07.330
una sintassi rilevata

03:07.330 --> 03:10.280
da TypeScript, un commento speciale, si potrebbe

03:10.280 --> 03:13.110
dire che TypeScript lo capisce se inizia con

03:13.110 --> 03:15.500
tre slash.

03:15.500 --> 03:19.301
Si scrive un tag XML autochiudente, quindi una parentesi

03:19.301 --> 03:21.600
angolare di apertura, poi una barra

03:21.600 --> 03:24.530
in avanti e una parentesi angolare di chiusura

03:24.530 --> 03:25.790
e nel loro percorso

03:25.790 --> 03:29.220
di riferimento è uguale e poi qui il nome del file

03:29.220 --> 03:32.370
che si desidera importare.

03:32.370 --> 03:35.217
Nel mio caso si tratta di interfacce di trascinamento. ts.

03:39.330 --> 03:42.550
Ora, questo viene compreso e recepito da TypeScript perché,

03:42.550 --> 03:45.220
come ho detto con le tre barre iniziali, è una sintassi

03:45.220 --> 03:47.560
speciale che TypeScript comprende, così come

03:47.560 --> 03:50.110
comprende questa cosa dei riferimenti.

03:50.110 --> 03:51.960
Questo non è Vanilla JavaScript

03:51.960 --> 03:53.970
Vanilla JavaScript non se ne

03:53.970 --> 03:58.480
accorge e non è quello che apparirà una volta compilato.

03:58.480 --> 04:00.430
Ma cosa si ottiene?

04:00.430 --> 04:07.104
In questo modo, lo spazio dei nomi Interfacce DD è ora disponibile nell'applicazione.

04:07.104 --> 04:07.104
ts.

04:07.104 --> 04:08.920
Tuttavia, se si scorre verso il basso, si vede

04:08.920 --> 04:11.040
che i miei editor si lamentano ancora e che se abbiamo

04:11.040 --> 04:12.250
provato a salvarlo come facciamo

04:12.250 --> 04:14.300
tutti, ci sono errori di compilazione.

04:14.300 --> 04:16.410
Quindi, non sembra essere disponibile.

04:16.410 --> 04:19.730
L'interfaccia trascinabile non sembra essere disponibile qui.

04:19.730 --> 04:22.386
C'è una particolarità negli spazi dei nomi.

04:22.386 --> 04:25.840
Potete usarli per dividere il vostro codice e ricordate quando

04:25.840 --> 04:27.930
ho detto prima che ciò che avete in uno

04:27.930 --> 04:29.610
spazio dei nomi può essere usato

04:29.610 --> 04:32.557
da qualsiasi punto di quello spazio dei nomi.

04:32.557 --> 04:34.157
Si è scoperto che si possono

04:34.157 --> 04:37.580
dividere gli spazi dei nomi tra più file esportando le cose

04:37.580 --> 04:39.110
in uno spazio dei nomi e poi

04:39.110 --> 04:42.330
usando questa speciale sintassi di importazione, ma

04:42.330 --> 04:45.230
poi bisogna mettere nello stesso spazio dei nomi

04:45.230 --> 04:48.250
le cose che vogliono usare qualcosa da quello spazio

04:48.250 --> 04:50.180
dei nomi di importazione o da quel

04:50.180 --> 04:51.797
file importato.

04:51.797 --> 04:55.050
Per questo forse DD Interfaces non è il nome migliore.

04:55.050 --> 04:58.010
Forse ci siamo limitati a nominare l'App.

04:58.010 --> 04:59.740
Ora, se abbiamo dato il nome di app qui, possiamo

04:59.740 --> 05:01.670
andare su app. ts e creare uno

05:01.670 --> 05:04.180
spazio dei nomi con lo stesso nome, lo

05:04.180 --> 05:05.630
spazio dei nomi App.

05:05.630 --> 05:06.890
E ora, per il momento,

05:06.890 --> 05:10.750
inseriamo tutto in questo spazio dei nomi e vediamo che l'errore

05:10.750 --> 05:12.610
è sparito Non ci sono punti rossi

05:12.610 --> 05:14.300
sulla destra.

05:14.300 --> 05:15.513
Tuttavia, se lo salvassi,

05:15.513 --> 05:17.850
otterrei comunque degli errori.

05:17.850 --> 05:22.850
Ad esempio, l'elenco dei progetti finiti non viene utilizzato.

05:25.010 --> 05:26.300
È vero, non

05:26.300 --> 05:28.210
lo sto usando.

05:28.210 --> 05:29.600
Nemmeno io ne ho bisogno, quindi

05:29.600 --> 05:32.610
possiamo semplicemente eliminare questi concetti.

05:32.610 --> 05:35.190
Se salviamo questo file, ora

05:35.190 --> 05:38.040
viene compilato senza errori.

05:38.040 --> 05:39.880
La domanda è: qual è il risultato

05:39.880 --> 05:41.920
di questa compilazione?

05:41.920 --> 05:44.260
Abbiamo uno o due file ora?

05:44.260 --> 05:46.170
Diamo un'occhiata alla cartella

05:46.170 --> 05:49.380
del disco e vediamo che c'è un file JS dell'app e poi

05:49.380 --> 05:50.780
del codice qui e un file

05:50.780 --> 05:53.980
JS dell'interfaccia drag and drop.

05:53.980 --> 05:56.690
Abbiamo quindi due file come risultato.

05:56.690 --> 05:59.500
Ora, il file di interfaccia di dragon drop è piuttosto

05:59.500 --> 06:00.830
vuoto, perché si è appreso

06:00.830 --> 06:04.360
che le interfacce non vengono compilate in alcun modo.

06:04.360 --> 06:07.300
Non esiste un equivalente JavaScript di un'interfaccia.

06:07.300 --> 06:09.270
È una funzione puramente TypeScript.

06:09.270 --> 06:12.370
Quindi possiamo importarlo con la sintassi di TypeScript

06:12.370 --> 06:15.509
per usarlo e ottenere tutti i miglioramenti dei tipi che

06:15.509 --> 06:17.300
abbiamo imparato, ma in produzione

06:17.300 --> 06:20.060
non importa se è in un file separato o meno.

06:20.060 --> 06:21.840
Quindi, ovviamente, la domanda

06:21.840 --> 06:26.380
è: cosa succede se ora mettiamo in un file separato qualcosa che esiste

06:26.380 --> 06:28.630
in produzione e che esiste anche in

06:28.630 --> 06:30.000
JavaScript?

06:30.000 --> 06:33.373
Per esempio, fa enum e la classe progetto qui,

06:35.520 --> 06:36.470
li prenderò

06:36.470 --> 06:37.610
entrambi, creerò

06:37.610 --> 06:41.410
un nuovo file, project dash model TS e vi inserirò

06:41.410 --> 06:46.040
l'enum stato progetto e la classe progetto.

06:46.040 --> 06:47.420
Ora, come prima, possiamo

06:47.420 --> 06:49.070
aggiungere uno spazio dei nomi

06:49.070 --> 06:50.590
qui, il nome deve essere App,

06:50.590 --> 06:51.790
quindi deve essere fatto

06:51.790 --> 06:54.020
lo spazio dei nomi in cui vogliamo usarlo

06:54.020 --> 06:57.340
e dobbiamo esportare queste caratteristiche lì, in modo da

06:57.340 --> 06:59.450
poterle usare in altri file nello stesso

06:59.450 --> 07:00.440
spazio dei nomi, ma

07:00.440 --> 07:02.640
anche in altri file.

07:02.640 --> 07:03.980
Ora è tornato all'applicazione. ts, dobbiamo

07:03.980 --> 07:05.900
importare il secondo file.

07:05.900 --> 07:07.890
Quindi duplicherò questa importazione

07:07.890 --> 07:11.515
e tutti i modelli dash ts del progetto di importazione.

07:11.515 --> 07:13.800
se lo salvo e ora viene compilato e vediamo

07:13.800 --> 07:16.610
un file JavaScript del modello di progetto.

07:16.610 --> 07:18.184
E lì vediamo del

07:18.184 --> 07:19.490
codice.

07:19.490 --> 07:22.770
La domanda è: la nostra applicazione ora funziona?

07:22.770 --> 07:24.620
Per questo, ricarichiamolo e proviamo

07:25.480 --> 07:27.587
ad aggiungere un progetto qui e, come

07:27.587 --> 07:29.903
vedete, otteniamo un errore.

07:29.903 --> 07:33.183
Impossibile leggere la proprietà attiva di undefined.

07:34.120 --> 07:36.090
Il motivo è che i nostri file

07:36.090 --> 07:38.854
sono compilati in modo autonomo.

07:38.854 --> 07:41.410
Gli spazi dei nomi esistono nel mondo di TypeScript,

07:41.410 --> 07:44.640
come ho detto, ma non esiste un'equivalenza con JavaScript.

07:44.640 --> 07:47.430
Il problema è che nel mondo di TypeScript tutto va bene,

07:47.430 --> 07:48.263
perché TypeScript

07:48.263 --> 07:51.610
è in grado di trovare tutte le cose di cui abbiamo bisogno.

07:51.610 --> 07:52.800
Per esempio, quando dico

07:52.800 --> 07:54.420
progetto qui, quando faccio riferimento

07:54.420 --> 07:56.310
al tipo di progetto qui nella classe

07:56.310 --> 07:58.130
di stato del progetto, questo tipo

07:58.130 --> 07:59.310
di progetto, questa classe

07:59.310 --> 08:00.610
di progetto è definita nel

08:00.610 --> 08:02.840
modello di progetto.

08:02.840 --> 08:06.020
Ora, TypeScript non si lamenta dell'incompletezza perché

08:06.020 --> 08:07.570
importiamo quel modello,

08:07.570 --> 08:10.250
ma l'importazione qui significa solo che diciamo

08:10.250 --> 08:13.960
a TypeScript dove trovare quel tipo una volta compilato in JavaScript,

08:13.960 --> 08:15.810
la disconnessione è praticamente

08:15.810 --> 08:18.150
distrutta.

08:18.150 --> 08:20.840
Quindi, quando il codice JavaScript viene eseguito

08:20.840 --> 08:23.230
e si cerca di creare un nuovo progetto istanziando

08:23.230 --> 08:25.130
il progetto, JavaScript non trova

08:25.130 --> 08:27.430
la classe del progetto o la funzione del

08:27.430 --> 08:29.610
costruttore.

08:29.610 --> 08:32.980
Dobbiamo quindi assicurarci di portare avanti la disconnessione.

08:32.980 --> 08:35.420
A questo scopo possiamo andare

08:35.420 --> 08:39.640
in TS e impostare l'opzione file out.

08:39.640 --> 08:40.740
Possiamo commentarlo

08:40.740 --> 08:43.010
e l'idea alla base del file out è

08:43.010 --> 08:45.540
quella di dire a TypeScript che deve

08:45.540 --> 08:48.620
concatenare gli spazi dei nomi.

08:48.620 --> 08:49.670
Quindi questi riferimenti,

08:49.670 --> 08:51.740
che ha durante la compilazione in

08:51.740 --> 08:53.950
un singolo file JavaScript, invece

08:53.950 --> 08:56.970
di compilare più file JavaScript.

08:56.970 --> 08:59.210
Quindi, per quanto riguarda il file di uscita, possiamo

08:59.210 --> 09:02.350
dire che vogliamo avere un file nella cartella del disco, che abbiamo chiamato

09:02.350 --> 09:04.770
forse bundle. js Se lo facciamo

09:05.630 --> 09:07.050
e lo salviamo, otterremo

09:07.050 --> 09:08.700
un errore.

09:09.650 --> 09:10.710
Si otterrà un errore

09:12.300 --> 09:14.410
che indica che solo i moduli AMD e di sistema

09:14.410 --> 09:17.250
sono supportati accanto al file out.

09:17.250 --> 09:19.540
Non c'è bisogno di capire tutto qui Ci sono

09:19.540 --> 09:23.160
fondamentalmente diversi modi di caricare o raggruppare diversi

09:23.160 --> 09:26.120
file JavaScript in un unico file per ragioni storiche

09:26.120 --> 09:28.770
e per il modo in cui viene sviluppato il tutto e si

09:28.770 --> 09:31.250
può imparare di più su questi diversi tipi di pacchetti

09:31.250 --> 09:33.700
in una risorsa allegata, se si vuole, ma non è

09:33.700 --> 09:35.340
necessario.

09:35.340 --> 09:36.800
Quindi, in sostanza,

09:36.800 --> 09:38.120
dobbiamo impostare

09:38.120 --> 09:40.470
il modulo che è già evidenziato come

09:40.470 --> 09:41.598
errore, non su JS

09:41.598 --> 09:43.943
comune, ma su AMD, ad esempio.

09:45.400 --> 09:47.700
Se lo facciamo, compila senza problemi,

09:47.700 --> 09:50.010
anche se si lamenta ancora qui, ma

09:50.010 --> 09:52.140
non ha capito che l'ho cambiato

09:52.140 --> 09:53.860
e ora succede che c'è un nuovo

09:53.860 --> 09:56.570
file JS del bundle in dist.

09:56.570 --> 10:00.310
Se rimuovo tutti i file JavaScript nella

10:00.310 --> 10:04.680
cartella del disco e riavvio il dash TSC, il compilatore

10:04.680 --> 10:05.580
genera solo

10:05.580 --> 10:08.600
il file JS del bundle.

10:08.600 --> 10:11.530
Questo file conterrà tutto il nostro codice nella

10:11.530 --> 10:13.250
versione compilata e tradotta

10:13.250 --> 10:15.400
e quindi ora nell'HTML dell'indice;

10:15.400 --> 10:20.300
dobbiamo solo importare il bundle JS qui invece dell'App JS.

10:20.300 --> 10:23.610
Se lo facciamo e lo ricarichiamo, abbiamo di nuovo

10:23.610 --> 10:25.830
un'applicazione funzionante in

10:25.830 --> 10:28.260
cui possiamo usare il drag and drop perché

10:28.260 --> 10:30.410
ora è tutto in un unico file, ma solo

10:30.410 --> 10:32.661
nel risultato finale.

10:32.661 --> 10:34.230
Durante lo sviluppo,

10:34.230 --> 10:36.260
abbiamo questi spazi dei nomi,

10:36.260 --> 10:39.030
il che è un passo nella giusta direzione

10:39.030 --> 10:41.970
perché è già un po' più gestibile.

10:41.970 --> 10:44.350
Ora dividiamo questo file in un numero ancora maggiore

10:44.350 --> 10:47.250
di file, prima di dare un'occhiata all'opzione di suddivisione

10:47.250 --> 10:48.283
media dei moduli TS.
