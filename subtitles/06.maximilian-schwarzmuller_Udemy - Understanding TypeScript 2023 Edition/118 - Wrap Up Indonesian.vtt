WEBVTT

00:02.273 --> 00:05.100
Instruktur: Kita telah melihat banyak dekorator, bagaimana Anda bekerja

00:05.100 --> 00:06.190
dengannya, bagaimana Anda

00:06.190 --> 00:07.340
bisa mengkonfigurasinya, bagaimana

00:07.340 --> 00:09.940
Anda bisa melakukan sesuatu dengannya, apa yang bisa Anda lakukan

00:09.940 --> 00:11.367
dengannya.

00:11.367 --> 00:15.260
Hal ini diharapkan dapat menunjukkan kepada Anda kerumitan tetapi juga kekuatan dekorator

00:15.260 --> 00:17.340
dan bagaimana Anda dapat memikirkannya, bagaimana

00:17.340 --> 00:18.898
Anda dapat menggunakannya.

00:18.898 --> 00:22.370
Anda tidak hanya dapat membuat dekorator Anda sendiri, ada juga

00:22.370 --> 00:24.208
ekosistem yang kaya di luar sana

00:24.208 --> 00:28.590
dari paket-paket dan kerangka kerja yang bergantung pada dekorator.

00:28.590 --> 00:30.670
Misalnya, kelas validator.

00:30.670 --> 00:32.789
Jika Anda mencari "ts class validator,"

00:32.789 --> 00:35.480
Anda akan menemukan paket yang pada dasarnya

00:35.480 --> 00:37.960
memiliki implementasi yang lebih rumit

00:37.960 --> 00:41.680
dari logika validasi kustom yang kami kerjakan.

00:41.680 --> 00:44.140
Paket ini dapat ditambahkan ke proyek apa pun yang sedang

00:44.140 --> 00:45.960
Anda kerjakan, dan kemudian Anda dapat dengan

00:45.960 --> 00:48.030
mudah mengimpor sekelompok dekorator atau pabrik

00:48.030 --> 00:49.930
dekorator, seperti yang Anda lihat, karena

00:49.930 --> 00:51.660
kami menjalankannya di sini.

00:51.660 --> 00:53.350
Tambahkan ke properti Anda, dengan

00:53.350 --> 00:55.650
atau tanpa beberapa konfigurasi tambahan,

00:55.650 --> 00:57.530
tergantung pada validatornya, dan di

00:57.530 --> 00:59.163
belakang layar ini akan mengelola

00:59.163 --> 01:01.530
registri seperti itu, bisa dikatakan, seperti

01:01.530 --> 01:03.509
objek konfigurasi pada akhirnya, menyimpan

01:03.509 --> 01:07.070
pengaturan validator Anda untuk properti yang berbeda di kelas Anda

01:07.070 --> 01:08.950
yang berbeda.

01:08.950 --> 01:11.810
Dan kemudian, memberi Anda metode validasi, yang

01:11.810 --> 01:14.150
juga Anda impor dari paket, yang dapat Anda

01:14.150 --> 01:16.656
jalankan dan meneruskan objek Anda, untuk

01:16.656 --> 01:19.020
menerapkan semua logika validasi yang Anda

01:19.020 --> 01:20.540
atur di kelas.

01:20.540 --> 01:22.840
Jadi, pada dasarnya melakukan apa yang baru saja kita

01:22.840 --> 01:26.000
lakukan, hanya dengan lebih banyak validator, dan dengan semua pekerjaan

01:26.000 --> 01:27.830
berat yang dilakukan untuk Anda.

01:27.830 --> 01:29.170
Tetapi tentu saja ini membantu untuk

01:29.170 --> 01:30.630
memahami bagaimana ini secara umum

01:30.630 --> 01:32.370
bekerja, karena kami membangunnya sendiri

01:32.370 --> 01:34.143
di sini, dalam versi yang lebih naif.

01:35.010 --> 01:36.490
Sekarang selain paket ini, tentu saja,

01:36.490 --> 01:38.370
kita juga memiliki Angular, misalnya.

01:38.370 --> 01:39.541
Angular adalah framework,

01:39.541 --> 01:41.502
yang sudah saya sebutkan sebelumnya,

01:41.502 --> 01:43.942
yang sangat bergantung pada dekorator, seperti

01:43.942 --> 01:46.480
dekorator komponen ini, yang memungkinkan

01:46.480 --> 01:49.214
Anda untuk menetapkan beberapa kode HTML dinamis,

01:49.214 --> 01:51.301
yang memanfaatkan properti kelas Anda

01:51.301 --> 01:54.720
juga, dengan sintaks khusus yang ditambahkan oleh Angular,

01:54.720 --> 02:00.170
untuk kemudian merender beberapa konten dinamis ke layar.

02:00.170 --> 02:01.780
Jadi di sini Angular tidak hanya

02:01.780 --> 02:03.360
menawarkan dekorator ini, tetapi

02:03.360 --> 02:06.250
dekorator adalah bagian inti dari Angular.

02:06.250 --> 02:07.280
Dan yang terakhir, tetapi tidak

02:07.280 --> 02:10.130
kalah pentingnya, saya juga ingin menunjukkan kepada Anda NestJS.

02:10.130 --> 02:13.190
NestJS adalah kerangka kerja JavaScript sisi server

02:13.190 --> 02:15.487
untuk Node. js, yang juga banyak

02:15.487 --> 02:20.010
menggunakan typescript, dan ini juga merangkul dekorator.

02:20.010 --> 02:23.270
Di sana Anda menggunakan dekorator untuk mendefinisikan pengontrol,

02:23.270 --> 02:26.730
dan rute, metode yang harus digunakan pengguna pada permintaan

02:26.730 --> 02:30.400
HTTP mereka, untuk memicu fungsi-fungsi tertentu, dan juga banyak

02:30.400 --> 02:32.687
dekorator lain yang dapat Anda gunakan untuk

02:32.687 --> 02:36.890
mengekstrak data dari permintaan yang masuk, dan sebagainya.

02:36.890 --> 02:39.150
Jadi di sini framework ini juga menawarkan

02:39.150 --> 02:41.370
semua dekorator ini untuk Anda, sehingga

02:41.370 --> 02:44.640
Anda dapat menambahkannya ke properti, metode, dan kelas

02:44.640 --> 02:46.257
Anda, dan menambahkan fungsionalitas

02:46.257 --> 02:50.060
ekstra, yang kemudian framework juga memperhitungkannya ketika

02:50.060 --> 02:52.828
mengeksekusi kode Anda.

02:52.828 --> 02:55.417
Jadi di sini sekali lagi, dekorator digunakan

02:55.417 --> 02:59.070
untuk metaprogramming untuk menambahkan konfigurasi ekstra,

02:59.070 --> 03:02.977
logika ekstra, yang kemudian diperhitungkan oleh, dalam hal ini,

03:02.977 --> 03:05.700
kode dari kerangka kerja, yang mengeksekusi

03:05.700 --> 03:07.580
kode Anda atau yang bekerja sama

03:07.580 --> 03:09.886
dengan kode Anda.

03:09.886 --> 03:12.000
Dan itu saja untuk dekorator.

03:12.000 --> 03:14.110
Mudah-mudahan ini memberi Anda gambaran umum yang bagus

03:14.110 --> 03:16.090
tentang apa yang bisa Anda lakukan dengan dekorator,

03:16.090 --> 03:17.830
mengapa dekorator bisa sangat membantu, dan bagaimana

03:17.830 --> 03:19.563
dekorator secara umum bekerja.
