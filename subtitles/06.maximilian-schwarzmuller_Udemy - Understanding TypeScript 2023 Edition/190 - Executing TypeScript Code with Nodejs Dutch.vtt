WEBVTT

00:02.200 --> 00:03.210
Instructeur: Laten we beginnen

00:03.210 --> 00:05.520
met TypeScript en Node. js en daarvoor ben ik

00:05.520 --> 00:08.660
in wezen in een lege nieuwe map hier, alleen wat configuratiebestanden

00:08.660 --> 00:12.140
daar, en laten we heel simpel beginnen.

00:12.140 --> 00:15.020
Laten we een app toevoegen. ts bestand hier in.

00:15.020 --> 00:17.370
Je kunt het noemen zoals je wilt, natuurlijk.

00:17.370 --> 00:19.180
En daarin schrijven we wat code die we

00:19.180 --> 00:22.220
willen uitvoeren met Node. js, maar waar we TypeScript

00:22.220 --> 00:24.980
willen gebruiken.

00:24.980 --> 00:26.350
Een eenvoudig script zou kunnen

00:26.350 --> 00:28.910
zijn dat we gewoon iets in de console loggen.

00:28.910 --> 00:30.450
Dit werkt in de browser, maar

00:30.450 --> 00:33.350
dit werkt ook met Node. js.

00:33.350 --> 00:35.840
Zorg er nu voor dat je Node. js geïnstalleerd, die

00:35.840 --> 00:37.220
je zeker zou moeten hebben

00:37.220 --> 00:38.740
als je die cursus hebt gevolgd,

00:38.740 --> 00:42.077
omdat we het in NPM gebruikten met Webpack en met vele andere

00:42.077 --> 00:43.910
tools en bibliotheken die we al

00:43.910 --> 00:46.710
met NPM hebben geïnstalleerd.

00:46.710 --> 00:48.480
Dus je zou Node. js geïnstalleerd.

00:48.480 --> 00:50.300
En als je het geïnstalleerd hebt,

00:50.300 --> 00:52.130
kun je dit bestand uitvoeren als je

00:52.130 --> 00:54.110
het compileert naar JavaScript.

00:54.110 --> 00:57.000
Dus als ik tsc app. en ik produceer

00:57.000 --> 01:00.360
mijn app. js bestand daarom kan

01:00.360 --> 01:02.890
ik dit uitvoeren met node en ik druk

01:02.890 --> 01:04.503
hier iets af.

01:06.550 --> 01:08.990
Als ik nu de app verwijder. js bestand en ik probeer

01:08.990 --> 01:11.890
app uit te voeren. ts met node, zul je

01:11.890 --> 01:13.810
iets vreemds zien.

01:13.810 --> 01:15.070
Dit werkt ook.

01:15.070 --> 01:18.010
Dus als node in staat is om TypeScript uit te voeren?

01:18.010 --> 01:20.380
Nee, en dat is echt belangrijk.

01:20.380 --> 01:23.210
Het geeft gewoon niet om de bestandsextensie, maar

01:23.210 --> 01:25.260
wat het ook vindt in het bestand, het

01:25.260 --> 01:27.420
behandelt het als een gewone JavaScript

01:27.420 --> 01:30.180
en dit hier gebruikt geen TypeScript functies,

01:30.180 --> 01:31.370
dus het werkt.

01:31.370 --> 01:34.340
Dat verandert als we hier andere inhoud toevoegen.

01:34.340 --> 01:36.400
Laten we zeggen dat we in plaats daarvan een

01:36.400 --> 01:37.370
leeftijdsvariabele

01:37.370 --> 01:40.080
hebben, wat een getal is en dan stel ik dit hier in op 30, en

01:40.080 --> 01:42.250
dan consoleer ik. log leeftijd hier.

01:42.250 --> 01:44.840
Dit is natuurlijk een geldige TypeScript-code.

01:44.840 --> 01:46.790
Maar als we dit proberen uit te voeren met node, zul

01:46.790 --> 01:48.370
je zien dat we een foutmelding krijgen.

01:48.370 --> 01:52.450
Dus node kan TypeScript niet parseren en compileren, het behandelt

01:52.450 --> 01:54.210
gewoon elk bestand dat je ermee

01:54.210 --> 01:56.960
uitvoert als JavaScript.

01:56.960 --> 01:59.030
En als je geen TypeScript functies gebruikt

01:59.030 --> 02:01.100
in het bestand, ja dan werkt het wel.

02:01.100 --> 02:02.950
Maar als je dat doet, werkt het niet.

02:02.950 --> 02:04.920
Je moet het bestand dan altijd eerst compileren

02:04.920 --> 02:06.550
naar JavaScript, om vervolgens

02:06.550 --> 02:08.960
het JavaScript-bestand uit te voeren, dat alleen

02:08.960 --> 02:11.350
geldige JavaScript-code bevat.

02:11.350 --> 02:13.030
Dat is echt belangrijk om te begrijpen.

02:13.030 --> 02:15.890
Node voert TypeScript niet uit.

02:15.890 --> 02:20.710
Nu kun je eigenlijk een pakket installeren, ts-node, dat je uiteindelijk

02:20.710 --> 02:24.230
die TypeScript compiler geeft, gecombineerd met de

02:24.230 --> 02:27.880
node executable, zou je kunnen zeggen, zodat je globaal

02:27.880 --> 02:30.320
een tool kunt installeren, waarmee

02:30.320 --> 02:34.170
je TypeScript bestanden gewoon kunt uitvoeren.

02:34.170 --> 02:35.210
Maar achter de schermen

02:35.210 --> 02:37.620
zal het dan gewoon de compilatie voor u doen en de

02:37.620 --> 02:39.440
compilatiecode uitvoeren.

02:39.440 --> 02:42.610
Het combineert dus eigenlijk de tsc en de node

02:42.610 --> 02:43.890
stap in één stap.

02:43.890 --> 02:46.060
Het is dus een pakket dat u zou kunnen gebruiken,

02:46.060 --> 02:49.150
maar hoewel dit misschien leuk is voor ontwikkeling, voor

02:49.150 --> 02:52.330
productie, om uw bestanden echt te serveren op een of andere

02:52.330 --> 02:54.850
webserver, op een of andere webhost, is dit waarschijnlijk

02:54.850 --> 02:56.950
niet ideaal, omdat deze extra compilatiestap

02:56.950 --> 03:06.110
elke keer dat uw code wordt uitgevoerd, gewoon wat extra overhead toevoegt, wat prima is tijdens de ontwikkeling, maar wat u waarschijnlijk niet wilt wanneer uw

03:06.110 --> 03:12.090
code productierijp is en u het echt ergens wilt serveren.

03:12.090 --> 03:13.260
Daarom gebruiken we in

03:13.260 --> 03:15.950
deze module geen ts-node en proberen we geen TypeScript-bestanden

03:15.950 --> 03:18.180
uit te voeren met node.

03:18.180 --> 03:21.570
In plaats daarvan laat ik hier een opstelling zien waarmee

03:21.570 --> 03:24.520
we een node express webapplicatie of rest API

03:24.520 --> 03:26.150
kunnen bouwen, met alleen

03:26.150 --> 03:29.130
TypeScript en de TypeScript compiler en vanilla

03:29.130 --> 03:31.343
node. js.
