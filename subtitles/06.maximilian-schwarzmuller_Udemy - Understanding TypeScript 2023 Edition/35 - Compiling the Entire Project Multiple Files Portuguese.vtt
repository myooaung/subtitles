WEBVTT

00:02.120 --> 00:04.590
Instrutor: Então, como mencionei na última palestra,

00:04.590 --> 00:06.080
o modo assistir é um ótimo começo,

00:06.080 --> 00:08.910
mas e se tivermos mais de um arquivo TypeScript?

00:08.910 --> 00:13.370
E se tivermos também uma análise. ts onde, hipoteticamente,

00:13.370 --> 00:18.370
enviamos dados analíticos para nosso servidor?

00:18.530 --> 00:21.430
Agora, aqui para ter qualquer coisa lá dentro, vou apenas

00:21.430 --> 00:24.240
colocar um console. mas, é claro, você poderia

00:24.240 --> 00:26.710
estar enviando pedidos HTTP para seu serviço

00:26.710 --> 00:29.180
de análise aqui, como eu disse.

00:29.180 --> 00:32.685
Portanto, digamos que também importamos este arquivo

00:32.685 --> 00:36.420
aqui em nosso índice. arquivo html.

00:36.420 --> 00:40.320
Se apontarmos para a analítica. js aqui que ainda não existe mas

00:40.320 --> 00:41.730
que existirá após a compilação,

00:41.730 --> 00:44.760
então poderíamos estar carregando esses dois

00:44.760 --> 00:46.660
arquivos e, é claro, queremos

00:46.660 --> 00:48.950
compilar os dois arquivos sempre que

00:48.950 --> 00:50.900
um deles mudar.

00:50.900 --> 00:52.490
Agora, para isso, seria bom

00:52.490 --> 00:55.320
se pudéssemos entrar em algum modo de relógio geral

00:55.320 --> 00:57.630
onde simplesmente executamos o tsc assim

00:57.630 --> 00:59.790
sem apontar para um arquivo e ele apenas

00:59.790 --> 01:02.480
observa toda nossa pasta de projeto e recompila

01:02.480 --> 01:05.823
qualquer arquivo TypeScript que possa mudar.

01:06.720 --> 01:08.960
Acontece que isso é possível.

01:08.960 --> 01:11.340
Para isso, basta dizer ao TypeScript

01:11.340 --> 01:15.020
que este é um projeto que deve ser gerenciado com

01:15.020 --> 01:16.750
o TypeScript e nós fazemos

01:16.750 --> 01:18.980
isso antes de tudo, e só precisamos

01:18.980 --> 01:20.700
fazer isso uma vez, executando

01:20.700 --> 01:23.710
o tsc --init.

01:23.710 --> 01:26.170
Portanto, não estou apontando para um arquivo específico

01:26.170 --> 01:29.540
aqui, eu apenas corro o tsc e depois --init aqui e novamente, isto só

01:29.540 --> 01:31.230
é necessário uma vez.

01:31.230 --> 01:33.530
Ele inicializará este projeto no qual você

01:33.530 --> 01:36.390
executará este comando como um projeto TypeScript.

01:36.390 --> 01:39.910
Isso significa que agora basicamente vai dizer ao TypeScript

01:39.910 --> 01:41.850
que tudo na pasta onde você executa

01:41.850 --> 01:44.160
este comando e, portanto, é importante que

01:44.160 --> 01:46.470
você navegou até a pasta correta antes de

01:46.470 --> 01:48.070
executar este comando com o terminal

01:48.070 --> 01:50.550
embutido aqui no Código VS.

01:50.550 --> 01:52.910
Estou automaticamente nesta pasta de projeto

01:52.910 --> 01:55.740
onde estão meus arquivos para que este projeto seja agora

01:55.740 --> 01:57.370
gerenciado pelo TypeScript.

01:57.370 --> 01:58.400
Então, vamos pressionar

01:58.400 --> 02:02.634
Enter e o que isto faz é criar este tsconfig. arquivo json.

02:02.634 --> 02:06.580
Este é basicamente o indicador para TypeScript de que o projeto

02:06.580 --> 02:09.950
no qual este arquivo se encontra e todas as sub pastas

02:09.950 --> 02:12.239
desta pasta devem ser gerenciadas

02:12.239 --> 02:14.710
pela TypeScript.

02:14.710 --> 02:16.080
Agora, se tivermos uma olhada neste

02:16.080 --> 02:17.860
arquivo, vemos lá um monte de opções, a maioria

02:17.860 --> 02:19.330
delas comentadas, elas estão lá apenas

02:19.330 --> 02:22.090
para que você veja que poderia defini-las e você tem uma breve explicação

02:22.090 --> 02:24.500
aqui também, mas não temos que nos preocupar com elas agora

02:24.500 --> 02:26.380
mesmo.

02:26.380 --> 02:29.040
Vamos mergulhar neles em um segundo.

02:29.040 --> 02:31.610
Por enquanto, vamos apenas fechar este

02:32.800 --> 02:35.100
arquivo aqui e ver o que isto nos dá,

02:35.100 --> 02:36.550
porque o que nos dá é que

02:36.550 --> 02:39.870
agora podemos executar um tsc como este sem apontar

02:39.870 --> 02:42.610
para um arquivo específico.

02:42.610 --> 02:45.550
E o que isto fará é dizer ao TypeScript para

02:45.550 --> 02:49.080
ir em frente e compilar todos os arquivos TypeScript

02:49.080 --> 02:53.090
para que todos . ts pode encontrar neste projeto, portanto,

02:53.090 --> 02:54.770
se eu clicar em Enter aqui, você

02:54.770 --> 02:56.830
vê, isto leva um tempo, e agora o que temos

02:56.830 --> 03:02.620
é esta analítica. arquivo js e este aplicativo.

03:02.620 --> 03:02.620
arquivo js.

03:02.620 --> 03:05.160
Agora, a analítica. O arquivo js acabou de ser

03:05.160 --> 03:08.010
criado pela TypeScript porque descobriu que temos

03:08.010 --> 03:10.060
a analítica. ts e, como eu disse,

03:10.060 --> 03:13.390
agora ele compilará todos os arquivos TypeScript

03:13.390 --> 03:14.730
do projeto.

03:14.730 --> 03:17.660
E, claro, isto também pode ser combinado com o modo relógio.

03:17.660 --> 03:20.630
Você pode executar tsc -w ou --watch como eu

03:20.630 --> 03:23.420
mostrei antes e isto agora entrará em modo

03:23.420 --> 03:26.970
de relógio para todos os arquivos TypeScript.

03:26.970 --> 03:29.590
Portanto, agora sempre que eu trocar um deles

03:29.590 --> 03:31.920
e eu o salvar, ele será recompilado.

03:31.920 --> 03:33.840
Ele irá recompilar aquele arquivo que

03:33.840 --> 03:36.100
mudou e, portanto, toda a mudança refletida

03:36.100 --> 03:37.800
no arquivo JavaScript.

03:37.800 --> 03:38.633
E agora está aqui.

03:38.633 --> 03:41.430
Se eu voltei à minha página, vemos o envio de dados também

03:41.430 --> 03:44.463
porque agora a análise. ts também foi compilado.
