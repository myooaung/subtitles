WEBVTT

00:02.270 --> 00:04.610
Instructeur: Dit is de code waarmee we

00:04.610 --> 00:08.580
eindigden aan het eind van het laatste kerngedeelte, ons oefenproject,

00:08.580 --> 00:11.050
veel code in één bestand, en dit is aantoonbaar

00:11.050 --> 00:14.050
geen supercomplex project.

00:14.050 --> 00:17.420
U kunt beslist veel uitgebreidere projecten en toepassingen

00:17.420 --> 00:20.380
schrijven, en u zou uiteindelijk veel meer code hebben,

00:20.380 --> 00:23.640
dus alles in één bestand stoppen is waarschijnlijk niet wat

00:23.640 --> 00:25.000
u wilt doen.

00:25.000 --> 00:26.390
Dus wat je in plaats daarvan

00:26.390 --> 00:28.740
wilt doen is modulaire code schrijven, wat

00:28.740 --> 00:31.120
simpelweg betekent dat je je code wilt verdelen

00:31.120 --> 00:34.010
over meerdere bestanden, zodat elk bestand op zichzelf

00:34.010 --> 00:37.157
beheersbaar en onderhoudbaar blijft, en je importeert en

00:37.157 --> 00:39.640
exporteert eenvoudigweg van en naar deze bestanden

00:39.640 --> 00:42.100
en zorgt ervoor dat al deze bestanden met elkaar

00:42.100 --> 00:44.740
verbonden zijn, maar ze zijn verbonden door Typescript

00:44.740 --> 00:47.990
of door de browser of door een bouwprogramma van derden en niet

00:47.990 --> 00:54.500
door jou door ze allemaal samen te voegen in één bestand tijdens de ontwikkeling.

00:54.500 --> 00:55.940
In deze module bekijken we

00:55.940 --> 00:59.910
twee belangrijke opties die ons helpen bij het organiseren van onze code

00:59.910 --> 01:02.160
in meerdere bestanden, en we leren ze niet

01:02.160 --> 01:04.930
alleen in theorie maar ook in de praktijk.

01:04.930 --> 01:07.320
We zullen natuurlijk deze verschillende benaderingen toepassen

01:07.320 --> 01:09.453
en kijken hoe we onze code kunnen splitsen.
