WEBVTT

00:02.540 --> 00:05.610
Instructor: A continuación quiero explorar las sobrecargas

00:05.610 --> 00:08.050
de funciones, una característica que nos

00:08.050 --> 00:11.450
permite definir múltiples firmas de funciones, por así decirlo,

00:11.450 --> 00:13.840
para una misma función.

00:13.840 --> 00:17.080
Lo que significa simplemente que podemos tener múltiples

00:17.080 --> 00:20.340
formas posibles de llamar a una función con diferentes parámetros,

00:20.340 --> 00:24.300
por ejemplo, para luego hacer algo dentro de esa función.

00:24.300 --> 00:26.540
Y un buen ejemplo en el que las sobrecargas de funciones

00:26.540 --> 00:29.060
pueden ayudarnos se puede ver un poco más arriba.

00:29.060 --> 00:32.090
Esta función de adición que escribimos antes,

00:32.090 --> 00:35.940
lo que hace es tomar dos valores combinables, lo que significa

00:35.940 --> 00:37.960
cadenas o números, y luego como

00:37.960 --> 00:39.830
puedes ver el tipo de retorno

00:39.830 --> 00:43.450
TypeScript infiere aquí todo es combinable.

00:43.450 --> 00:45.370
Esto simplemente significa que TypeScript

00:45.370 --> 00:47.960
entiende que lo que devuelve también es una cadena

00:47.960 --> 00:51.080
o un número, pero en realidad si lo piensas, eso no es realmente

00:51.080 --> 00:52.880
cierto.

00:52.880 --> 00:55.280
Es decir, técnicamente es cierto, pero sabemos

00:55.280 --> 00:57.620
que si pasamos dos números el tipo de retorno

00:57.620 --> 00:59.400
siempre será número.

00:59.400 --> 01:01.940
Si pasamos al menos una cadena el tipo

01:01.940 --> 01:03.950
de retorno será cadena.

01:03.950 --> 01:05.460
Ahora bien, ¿por qué puede importar esto?

01:05.460 --> 01:08.225
Ten en cuenta que la función add se escribe así.

01:08.225 --> 01:11.060
Y en realidad puedes comentar todo lo que hay

01:11.060 --> 01:15.390
debajo y añadir algo de código nuevo justo debajo de la función.

01:15.390 --> 01:18.670
Si ahora obtengo mi resultado aquí llamando a sumar,

01:18.670 --> 01:21.870
le paso uno y cinco, ves que el resultado es de tipo

01:21.870 --> 01:23.390
combinable.

01:23.390 --> 01:27.010
Una consecuencia de esto es que TypeScript no sabe

01:27.010 --> 01:30.390
si el resultado es un número o una cadena.

01:30.390 --> 01:34.510
Ahora bien, esto puede ser realmente importante si pasamos en cadenas.

01:34.510 --> 01:39.510
Si paso en Max Schwarz aquí, entonces esto funciona, pero todavía

01:39.700 --> 01:41.750
me devuelve combinable.

01:41.750 --> 01:43.990
Ahora como consecuencia no puedo llamar

01:43.990 --> 01:46.120
a funciones de cadena en el resultado,

01:46.120 --> 01:50.600
no puedo llamar a split por ejemplo para dividir en el espacio en blanco.

01:50.600 --> 01:52.870
Sé que esto funcionará, porque sé que

01:52.870 --> 01:55.270
cuando llame a la función así, lo haré en

01:55.270 --> 01:57.200
esta rama if y obtendré de vuelta

01:57.200 --> 01:59.980
una cadena, así que sé que los resultados mantendrán

01:59.980 --> 02:03.030
la cadena, pero TypeScript sólo sabe que mantiene

02:03.030 --> 02:05.620
una cadena o un número.

02:05.620 --> 02:08.350
Ahora, por supuesto, podemos utilizar el casting de tipos aquí

02:08.350 --> 02:11.340
y decirle a TypeScript que lo que obtenemos de vuelta es una cadena.

02:11.340 --> 02:13.930
Podemos hacerlo con la sintaxis de fundición

02:13.930 --> 02:16.040
de tipos que aprendiste antes.

02:16.040 --> 02:18.840
Aún así, no es óptimo que tengamos que hacer eso, diría

02:18.840 --> 02:21.800
yo, porque tenemos que escribir más código aquí aunque esperemos

02:21.800 --> 02:24.560
que TypeScript entienda que cuando llamamos a esta función

02:24.560 --> 02:26.070
así siempre obtenemos de vuelta

02:26.070 --> 02:27.740
una cadena.

02:27.740 --> 02:30.890
Pero TypeScript no está analizando nuestro código lo suficientemente

02:30.890 --> 02:33.700
bien aquí, y ahí es donde una sobrecarga de funciones puede

02:33.700 --> 02:35.000
ayudarnos.

02:35.000 --> 02:38.730
Una sobrecarga de la función se escribe simplemente escribiendo

02:38.730 --> 02:41.880
la función justo encima de su función principal, por

02:41.880 --> 02:46.683
así decirlo, con el mismo nombre, por lo que se repite esta línea aquí, básicamente,

02:47.880 --> 02:50.890
sin embargo, sin las llaves de apertura y cierre a

02:50.890 --> 02:54.080
partir de entonces, y ahora aquí se quiere utilizar tipos

02:54.080 --> 02:57.980
específicos número y número y luego el tipo de retorno de encontrar

02:57.980 --> 03:03.410
para cuando este es el caso cuando se obtiene al menos un número.

03:03.410 --> 03:06.643
Y ahí podríamos decir, entonces el tipo de retorno es número.

03:08.840 --> 03:10.980
Así que ahora con eso estamos diciendo a TypeScript,

03:10.980 --> 03:14.980
si llamamos a esta función y ambos argumentos son un número, entonces esta función

03:14.980 --> 03:17.180
devuelve un número.

03:17.180 --> 03:19.430
Ahora bien, esto por supuesto no es una sintaxis

03:19.430 --> 03:22.480
que funcione en JavaScript, será eliminada por TypeScript

03:22.480 --> 03:24.430
en el proceso de compilación.

03:24.430 --> 03:28.480
Pero TypeScript fusiona esta información de la función y esta

03:28.480 --> 03:31.380
declaración de la función aquí juntos y básicamente

03:31.380 --> 03:33.640
combina el conocimiento de estas dos

03:33.640 --> 03:35.550
líneas aquí.

03:35.550 --> 03:38.590
Y ahora sabe bien, podemos llamar a esta función

03:38.590 --> 03:41.490
aquí ya sea con A y B de tipo combinable o con

03:41.490 --> 03:43.790
A y B de tipo número.

03:43.790 --> 03:47.060
Por cierto, también puedes añadir más o menos parámetros aquí

03:47.060 --> 03:50.100
en tus sobrecargas, eres realmente flexible ahí.

03:50.100 --> 03:53.640
También se añade la función add aquí y sólo se espera

03:53.640 --> 03:57.620
un número y se devuelve un número, y esto también funcionaría

03:57.620 --> 04:01.210
si hacemos B opcional en nuestras otras sobrecargas

04:01.210 --> 04:03.270
también.

04:03.270 --> 04:05.254
Porque en última instancia, por supuesto,

04:05.254 --> 04:08.630
necesita asegurarse de que su código aquí siempre funciona y recibe todos

04:08.630 --> 04:10.850
los argumentos que necesita al final.

04:10.850 --> 04:13.610
Así que la B sería opcional aquí, entonces ves que esto funciona,

04:13.610 --> 04:15.170
ahora por supuesto tendríamos

04:15.170 --> 04:17.850
que trabajar alrededor de la B siendo potencialmente

04:17.850 --> 04:19.550
opcional ahí abajo.

04:19.550 --> 04:21.390
Sin embargo, no lo necesito, así que me

04:21.390 --> 04:24.460
desharé de eso y sólo dejaré esto, pero tampoco quería una sobrecarga

04:24.460 --> 04:27.200
para cuando llamáramos a esto con cadenas.

04:27.200 --> 04:30.060
Así que voy a añadir otra sobrecarga de la función

04:30.060 --> 04:33.450
add aquí donde A es una cadena y B es una cadena y entonces estoy

04:33.450 --> 04:36.090
bastante claro con respecto al hecho de que lo

04:36.090 --> 04:38.460
que devolvemos será una cadena.

04:38.460 --> 04:40.280
Por cierto, es una buena práctica añadir

04:40.280 --> 04:43.660
un punto y coma después de estas líneas de sobrecarga aquí.

04:43.660 --> 04:46.560
Así que ahora con eso estoy diciendo que si estamos llamando a esta función

04:46.560 --> 04:49.100
con dos números, siempre obtenemos de vuelta un número.

04:49.100 --> 04:52.170
Si lo llamamos con dos cadenas, siempre obtenemos de vuelta una cadena.

04:52.170 --> 04:54.510
Si lo llamamos con una cadena y un número, técnicamente

04:54.510 --> 04:57.020
también obtenemos siempre de vuelta una cadena, pero

04:57.020 --> 04:57.853
no quiero añadir

04:57.853 --> 04:59.410
todas estas posibles combinaciones

04:59.410 --> 05:01.240
aquí, por supuesto podría añadir más

05:01.240 --> 05:03.173
y luego también añadir número aquí, o la

05:04.040 --> 05:07.500
otra combinación que podríamos tener, que es esta.

05:07.500 --> 05:10.060
Bueno, creo que ahora sí he añadido todas las combinaciones.

05:10.060 --> 05:12.540
Y ahora estoy enumerando todas las posibles combinaciones

05:12.540 --> 05:16.040
de valores aquí y lo que devolvemos en cada caso.

05:16.040 --> 05:18.260
Ahora con eso, ves que el error de ahí abajo ha

05:18.260 --> 05:20.520
desaparecido porque ahora TypeScript sabe que

05:20.520 --> 05:24.790
los resultados serán de tipo string si llamamos a add con estos dos valores que son ambos

05:24.790 --> 05:25.623
strings.

05:25.623 --> 05:28.510
Y si paso por encima de la adición verás que hay tres

05:28.510 --> 05:31.100
sobrecargas adicionales disponibles.

05:31.100 --> 05:32.980
Aquí estoy llamando a add con dos cadenas,

05:32.980 --> 05:35.560
pero TypeScript sabe que hay otras tres formas de llamar

05:35.560 --> 05:36.630
a esto.

05:36.630 --> 05:39.450
Por ejemplo, con una cadena y un número,

05:39.450 --> 05:41.340
en cuyo caso me devuelve una

05:41.340 --> 05:46.340
cadena, con un número y alguna cadena, o con dos números.

05:47.430 --> 05:48.630
Esto también funcionaría.

05:48.630 --> 05:50.210
Entonces, por supuesto, no puedo

05:50.210 --> 05:52.650
llamar a split porque TypeScript identifica correctamente

05:52.650 --> 05:54.630
que cuando llamo a esto con dos números, me

05:54.630 --> 05:58.253
devuelve un número, y en un número no se puede llamar a split.

05:59.260 --> 06:02.010
Así que estas son sobrecargas de funciones y pueden

06:02.010 --> 06:04.060
ayudarte en situaciones como esta, donde

06:04.060 --> 06:06.780
TypeScript no sería capaz de inferir correctamente

06:06.780 --> 06:08.590
el tipo de retorno por sí mismo, aquí

06:08.590 --> 06:11.660
puedes ser realmente claro sobre lo que se devuelve para

06:11.660 --> 06:14.667
las diferentes combinaciones que podrías soportar en

06:14.667 --> 06:16.033
tu función.
