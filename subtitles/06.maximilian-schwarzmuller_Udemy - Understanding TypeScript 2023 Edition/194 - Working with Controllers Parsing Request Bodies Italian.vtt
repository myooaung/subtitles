WEBVTT

00:02.170 --> 00:03.860
Istruttore: Ora che abbiamo registrato alcune

00:03.860 --> 00:05.630
rotte, aggiungiamo la logica per queste rotte.

00:05.630 --> 00:07.730
Per questo aggiungerò una cartella dei controllori.

00:07.730 --> 00:08.750
Non è un obbligo, ma

00:08.750 --> 00:11.550
voglio dividere la mia logica nei controllori e le

00:11.550 --> 00:13.650
rotte nella cartella delle rotte.

00:13.650 --> 00:16.740
E nei controllori aggiungerò anche un todos. ts, che ora conterrà le

00:16.740 --> 00:19.230
funzioni del controllore a cui vogliamo

00:19.230 --> 00:21.990
puntare dalle nostre rotte.

00:21.990 --> 00:25.120
Quindi, ho bisogno di una funzione che esporterò e

00:25.120 --> 00:27.220
che creerò come funzione arrow, il

00:27.220 --> 00:29.170
che non è un obbligo, però, e la chiamerò

00:29.170 --> 00:31.290
createTodo; si tratta di una funzione

00:32.420 --> 00:34.510
che riceverà i parametri tipici di

00:34.510 --> 00:36.720
ogni funzione middleware in express,

00:36.720 --> 00:38.830
una richiesta, una risposta e la funzione

00:38.830 --> 00:41.297
successiva.

00:41.297 --> 00:44.550
E abbiamo appena visto da dove possiamo ottenere i tipi.

00:44.550 --> 00:47.190
Possiamo importare le funzioni

00:47.190 --> 00:50.460
request, response e next da express.

00:50.460 --> 00:52.800
Questo ci importa quei tipi.

00:52.800 --> 00:54.910
Possiamo quindi aggiungerli qui.

00:54.910 --> 00:57.230
Ora, aggiungere sempre tutti questi tipi qui, come

00:57.230 --> 00:59.980
abbiamo fatto anche nel middleware per la gestione degli errori,

00:59.980 --> 01:01.300
può essere complicato.

01:01.300 --> 01:03.750
Funziona, ma può essere fastidioso.

01:03.750 --> 01:05.190
Esiste quindi una scorciatoia.

01:05.190 --> 01:08.220
Invece di impostare i tipi di tutti questi parametri,

01:08.220 --> 01:11.160
possiamo anche dire a TypeScript quale tipo di

01:11.160 --> 01:14.610
funzione vogliamo memorizzare in questa costante createTodo

01:14.610 --> 01:16.260
e possiamo semplicemente

01:16.260 --> 01:19.530
importare il tipo RequestHandler da express e impostare

01:19.530 --> 01:24.340
questo tipo, createTodo, al tipo RequestHandler.

01:24.340 --> 01:28.780
E ora si vede che TypeScript sa che abbiamo una richiesta, una risposta

01:28.780 --> 01:30.560
e questa funzione successiva,

01:30.560 --> 01:32.590
perché il nostro RequestHandler

01:32.590 --> 01:35.730
è definito in questo modo.

01:35.730 --> 01:38.080
Si tratta di una funzione con tre parametri,

01:38.080 --> 01:40.160
di cui il primo è la richiesta, il

01:40.160 --> 01:42.030
secondo è la risposta e il terzo

01:42.030 --> 01:44.810
è la funzione successiva.

01:44.810 --> 01:47.313
In questo modo si può semplificare la configurazione.

01:48.195 --> 01:49.380
RequestHandler, ovviamente,

01:49.380 --> 01:51.360
è sempre disponibile perché abbiamo installato

01:51.360 --> 01:52.570
i tipi per express e quindi possiamo

01:52.570 --> 01:55.270
aggiungere questa importazione qui.

01:55.270 --> 01:57.940
Si tenga presente che questa importazione sarà sempre

01:57.940 --> 01:59.960
eliminata una volta compilata in JavaScript,

01:59.960 --> 02:02.300
perché stiamo solo importando un tipo.

02:02.300 --> 02:05.030
Non viene importato alcun codice da eseguire.

02:05.030 --> 02:06.930
Si tratta solo di importare un tipo.

02:06.930 --> 02:08.650
Pertanto, in fase di compilazione,

02:08.650 --> 02:11.290
verrà rimosso perché non aggiunge nulla che sarebbe

02:11.290 --> 02:15.860
necessario quando questo viene eseguito in un normale JavaScript.

02:15.860 --> 02:16.693
Con questo, però,

02:16.693 --> 02:18.900
ho ottenuto la funzione createTodo

02:18.900 --> 02:22.240
e ora perché non aggiungere un array TODOS per gestire

02:22.240 --> 02:25.530
alcuni to dos solo in memoria, naturalmente.

02:25.530 --> 02:28.310
Questo sarà eliminato al riavvio del server, perché

02:28.310 --> 02:31.460
alla fine si tratta solo di una costante in JavaScript.

02:31.460 --> 02:32.293
Naturalmente, si

02:32.293 --> 02:34.770
potrebbe anche immaginare di parlare con un database,

02:34.770 --> 02:36.360
ma voglio mantenerlo semplice

02:36.360 --> 02:38.630
perché si tratta di JavaScript e TypeScript

02:38.630 --> 02:41.323
e non tanto di connessioni a database.

02:42.390 --> 02:43.790
Quindi ho un to dos e ora

02:43.790 --> 02:47.600
voglio creare un nuovo to do quando abbiamo una richiesta

02:47.600 --> 02:49.320
in arrivo, che dovrebbe essere

02:49.320 --> 02:51.020
un nuovo oggetto e perché non

02:51.020 --> 02:52.980
creare un blueprint per questo

02:52.980 --> 02:55.420
oggetto, un modello.

02:55.420 --> 02:57.640
Aggiungerò quindi una cartella

02:57.640 --> 02:59.030
models e in quella cartella

02:59.030 --> 03:04.030
models aggiungerò un todo. ts ed esportare una classe qui, che chiamerò

03:04.760 --> 03:06.250
Todo, in cui definisco come

03:06.250 --> 03:08.210
dovrebbe apparire Todo.

03:08.210 --> 03:10.330
Possiamo aggiungere un costruttore

03:10.330 --> 03:13.129
e usare questa scorciatoia di TypeScript,

03:13.129 --> 03:16.440
in cui possiamo aggiungere un modificatore di accesso

03:16.440 --> 03:19.360
come public e poi un nome di proprietà come ID,

03:19.360 --> 03:21.250
che è di tipo stringa, diciamo,

03:21.250 --> 03:24.050
e text, che è anch'esso di tipo stringa, e poi

03:24.050 --> 03:27.470
TypeScript aggiungerà automaticamente campi, proprietà

03:27.470 --> 03:30.130
con nomi uguali e valori assegnati che passiamo

03:30.130 --> 03:32.750
al costruttore a questi campi ogni volta

03:32.750 --> 03:37.230
che istanziamo la classe.

03:37.230 --> 03:38.670
Utilizzerò quindi questa sintassi,

03:38.670 --> 03:40.060
che avete già imparato a conoscere

03:40.060 --> 03:41.810
in precedenza nel corso.

03:41.810 --> 03:44.660
E ora in todos. qui nel controllore,

03:44.660 --> 03:47.893
possiamo naturalmente importare Todo

03:49.020 --> 03:53.403
da, salendo di un livello, models/todo e usare questo

03:54.530 --> 03:58.800
tipo e questa classe qui nel nostro file.

03:58.800 --> 04:01.320
Ed è sia un tipo che una classe perché, ovviamente,

04:01.320 --> 04:02.800
è una classe e ogni classe

04:02.800 --> 04:05.750
agisce automaticamente anche come tipo.

04:05.750 --> 04:08.550
Questo è anche ciò che avete visto durante il corso.

04:08.550 --> 04:09.750
Quindi, per prima

04:09.750 --> 04:11.910
cosa possiamo dire che TODOS sarà

04:11.910 --> 04:13.550
un array di to dos.

04:13.550 --> 04:15.480
Questa annotazione aggiuntiva non guasta,

04:15.480 --> 04:18.590
in modo da ottenere un supporto adeguato quando si inizia ad aggiungere

04:18.590 --> 04:21.410
to dos o a lavorare con i to dos in questo array.

04:21.410 --> 04:23.610
E qui, quando creo un nuovo to

04:23.610 --> 04:26.220
do, lo creo istanziando questa classe;

04:26.220 --> 04:28.370
dobbiamo passare un ID e qui

04:28.370 --> 04:32.030
creerò un ID pseudo-unico casuale con Math random

04:32.030 --> 04:34.230
toString.

04:34.230 --> 04:35.270
Non si tratta di un prodotto

04:35.270 --> 04:36.660
unico, ma è sufficiente.

04:36.660 --> 04:39.170
E ora per il valore qui, naturalmente

04:39.170 --> 04:41.670
voglio impostare del testo, che mi aspetto

04:41.670 --> 04:45.530
di ricevere nel corpo della richiesta in arrivo.

04:45.530 --> 04:48.823
Quindi mi aspetto di ricevere il mio testo qui, fondamentalmente

04:49.750 --> 04:53.270
nel corpo della richiesta. in modo da poter impostare

04:53.270 --> 04:56.280
il testo come valore.

04:56.280 --> 04:57.113
Ora, questo funziona,

04:57.113 --> 04:59.640
ma si noti che funziona solo perché TypeScript

04:59.640 --> 05:02.320
vede che questo è di tipo any.

05:02.320 --> 05:04.420
Non sa che si tratta di una stringa.

05:04.420 --> 05:05.510
E non può saperlo, perché

05:05.510 --> 05:08.390
come fa TypeScript a sapere quali dati faranno parte

05:08.390 --> 05:11.140
delle nostre richieste in arrivo?

05:11.140 --> 05:12.430
Non è chiaro.

05:12.430 --> 05:14.260
Non dichiariamo mai da nessuna parte

05:14.260 --> 05:17.620
cosa ci sarà all'interno delle richieste che riceviamo.

05:17.620 --> 05:19.270
Come possiamo migliorare questo aspetto?

05:19.270 --> 05:21.780
Possiamo usare il typecasting, ad esempio.

05:21.780 --> 05:23.660
Il typecasting è sempre un'ottima soluzione

05:23.660 --> 05:26.090
se si conosce un tipo specifico, ma TypeScript non

05:26.090 --> 05:27.360
lo conosce.

05:27.360 --> 05:30.440
Quindi qui, nel corpo della richiesta, prima di accedere al testo,

05:30.440 --> 05:32.650
possiamo fare il typecast di un oggetto in cui abbiamo

05:32.650 --> 05:34.900
una proprietà text, che è una stringa.

05:34.900 --> 05:36.920
Poiché stiamo costruendo questa applicazione,

05:36.920 --> 05:40.320
sappiamo cosa ci aspettiamo dalle richieste in arrivo.

05:40.320 --> 05:42.750
Quindi, poiché sappiamo che ci sarà una proprietà text

05:42.750 --> 05:44.166
nel corpo della richiesta in arrivo,

05:44.166 --> 05:46.630
possiamo fare il cast di un oggetto di questo tipo.

05:46.630 --> 05:51.480
Ora abbiamo un supporto adeguato per TypeScript e anche per l'IDE.

05:51.480 --> 05:53.560
Quindi, aggiungiamo una nuova attività da svolgere.

05:53.560 --> 05:55.470
Ora possiamo raggiungere TODOS e inserire

05:55.470 --> 05:58.280
le nuove attività da svolgere in questo array.

05:58.280 --> 05:59.330
E ancora, questo,

05:59.330 --> 06:01.060
ovviamente, lo memorizzerà

06:01.060 --> 06:02.750
solo come costante e quindi

06:02.750 --> 06:05.650
solo in memoria, perché lavorare con un database

06:05.650 --> 06:08.880
non è direttamente collegato a node o a TypeScript,

06:08.880 --> 06:11.170
ma, beh, al database.

06:11.170 --> 06:14.140
Quindi, abbiamo la funzione Crea Todo.

06:14.140 --> 06:16.400
Ora andiamo nelle rotte da fare e importiamo

06:16.400 --> 06:19.070
questa funzione del controllore.

06:19.070 --> 06:22.030
Quindi, importare dalla cartella dei controllori

06:22.030 --> 06:24.000
il file todos, importare la

06:24.000 --> 06:26.660
funzione create Todo e puntare a questa

06:26.660 --> 06:30.100
funzione qui nella rotta post, in modo che qualsiasi

06:30.100 --> 06:38.390
richiesta che abbia come obiettivo slash todos slash nulla raggiunga la funzione createTodo.

06:38.390 --> 06:39.580
Non eseguitelo qui.

06:39.580 --> 06:40.650
Basta indicarlo.

06:40.650 --> 06:43.890
Verrà eseguito per voi da node ed espresso nel vostro server web

06:43.890 --> 06:45.883
in esecuzione in un secondo momento.

06:46.880 --> 06:49.630
Ora abbiamo questa funzione.

06:49.630 --> 06:50.900
Ma non abbiamo finito.

06:50.900 --> 06:52.290
Nel controllore, tutti dovrebbero

06:52.290 --> 06:54.360
restituire una risposta.

06:54.360 --> 06:56.720
quindi possiamo inviare una risposta,

06:56.720 --> 06:59.420
per esempio, in formato JSON con il metodo

06:59.420 --> 07:02.300
JSON, in cui diciamo che il messaggio ha creato

07:02.300 --> 07:04.040
il todo o quello che volete,

07:04.040 --> 07:07.770
e abbiamo la chiave createdTodo, forse, in cui inoltriamo

07:07.770 --> 07:10.520
il nuovo todo che è stato aggiunto sul lato server,

07:10.520 --> 07:12.660
in modo che anche sul client possiamo

07:12.660 --> 07:14.490
usarlo.

07:14.490 --> 07:17.750
E magari impostare anche un codice di stato 201, per indicare

07:17.750 --> 07:19.700
che la creazione di una risorsa è

07:19.700 --> 07:21.793
avvenuta con successo.

07:22.680 --> 07:24.640
Ora dobbiamo solo assicurarci

07:24.640 --> 07:28.500
che il corpo che stiamo cercando di estrarre esista davvero.

07:28.500 --> 07:29.770
E per i dati e le app. dobbiamo

07:29.770 --> 07:33.130
analizzare i corpi delle richieste in arrivo.

07:33.130 --> 07:37.620
Per questo, possiamo importare dal pacchetto body-parser

07:37.620 --> 07:39.220
che abbiamo installato

07:39.220 --> 07:41.380
e da questo pacchetto possiamo

07:41.380 --> 07:46.380
importare il metodo JSON in questo modo.

07:46.410 --> 07:49.170
E poi si può registrare questo eseguito

07:49.170 --> 07:51.310
come middleware.

07:51.310 --> 07:54.480
Si tratta quindi di un middleware fornito da un pacchetto

07:54.480 --> 07:58.130
di terze parti, che analizza i corpi di tutte le richieste

07:58.130 --> 08:01.570
in arrivo ed estrae tutti i dati JSON che vi trova, per

08:01.570 --> 08:05.990
poi popolare la chiave body di questo oggetto richiesta con i dati JSON

08:05.990 --> 08:07.970
analizzati.

08:07.970 --> 08:10.290
Questo è ciò che fa il middleware JSON

08:10.290 --> 08:12.503
del pacchetto body-parser.

08:13.890 --> 08:16.520
E con questo, dovremmo avere un server in grado

08:16.520 --> 08:18.230
di creare nuovi to dos.

08:18.230 --> 08:22.210
Salvate tutti i file e assicuratevi che la ricompilazione avvenga senza errori.

08:22.210 --> 08:26.150
Assicurarsi che nodemon stia ancora servendo l'applicazione. file js.

08:26.150 --> 08:28.560
Ora dobbiamo inviare una richiesta di invio.

08:28.560 --> 08:31.150
E con il browser non possiamo farlo, ma possiamo

08:31.150 --> 08:34.260
usare uno strumento per questo, Postman.

08:34.260 --> 08:35.600
È sufficiente cercarla e installare

08:35.600 --> 08:38.160
l'applicazione Postman sul sistema.

08:38.160 --> 08:39.283
L'utilizzo è gratuito.

08:40.440 --> 08:41.570
Una volta installato, è possibile

08:41.570 --> 08:43.390
avviarlo e dovrebbe apparire una schermata

08:43.390 --> 08:44.440
simile a questa.

08:44.440 --> 08:46.460
Se viene visualizzata una finestra modale,

08:46.460 --> 08:48.010
è sufficiente chiuderla.

08:48.010 --> 08:50.240
A questo punto è possibile creare una nuova richiesta

08:50.240 --> 08:51.740
facendo clic su quel più, scegliendo

08:51.740 --> 08:53.040
il tipo di richiesta, in questo

08:53.040 --> 08:56.450
caso una richiesta di post, inserendo l'URL.

08:56.450 --> 08:58.820
Qui è localhost 3000, 3000

08:58.820 --> 09:01.660
perché è la porta che ho scelto.

09:01.660 --> 09:03.100
E poi dobbiamo inviare

09:03.100 --> 09:06.320
la richiesta a slash todos slash nothing.

09:06.320 --> 09:10.000
Quindi, qui per tagliare i todos e tagliare il nulla.

09:10.000 --> 09:12.120
Vogliamo allegare un corpo alla richiesta,

09:12.120 --> 09:15.440
che dovrebbe essere un corpo grezzo JSON, per inviare alcuni

09:15.440 --> 09:17.010
dati JSON.

09:17.010 --> 09:19.480
E ora cosa dobbiamo inviare qui?

09:19.480 --> 09:21.840
Beh, ciò che estraiamo nella funzione middleware,

09:21.840 --> 09:22.880
quindi in questo caso,

09:22.880 --> 09:24.570
dovremmo avere una proprietà text

09:24.570 --> 09:27.410
come parte dei dati JSON che stiamo inviando.

09:27.410 --> 09:29.610
Aggiungiamo quindi un testo come nome

09:29.610 --> 09:31.070
e poi un testo a scelta, come

09:31.070 --> 09:33.230
ad esempio Terminare il corso.

09:33.230 --> 09:36.960
Se ora si fa clic su invia, viene inviata la richiesta ed ecco

09:36.960 --> 09:38.990
la risposta, che sembra buona.

09:38.990 --> 09:40.670
Abbiamo recuperato la creazione di un'attività da svolgere.

09:40.670 --> 09:43.600
Vediamo l'ID generato e il testo.

09:43.600 --> 09:45.870
Quindi il nostro backend funziona chiaramente qui.

09:45.870 --> 09:47.690
Abbiamo scritto tutto con TypeScript,

09:47.690 --> 09:49.880
ma lo serviamo come normale JavaScript.

09:49.880 --> 09:51.183
Il trucco è tutto qui.
