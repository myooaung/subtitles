WEBVTT

00:02.050 --> 00:04.370
Instruktur: Kita tidak bisa mengabaikan modul yang

00:04.370 --> 00:05.880
terisolasi, tetapi ada satu opsi

00:05.880 --> 00:08.000
lain, yang sebenarnya bahkan tidak disebutkan

00:08.000 --> 00:10.810
di sini, yang masih ingin saya sebutkan sendiri.

00:10.810 --> 00:14.680
Dan itu adalah opsi no emit on error.

00:14.680 --> 00:16.200
Anda bisa menetapkan ini ke

00:16.200 --> 00:18.820
true atau false dan defaultnya adalah false.

00:18.820 --> 00:19.653
Sekarang apa yang dilakukannya?

00:19.653 --> 00:21.330
Jika kita menetapkannya ke false, izinkan saya menunjukkan

00:21.330 --> 00:23.050
kepada Anda di mana hal ini mungkin menjadi masalah.

00:23.050 --> 00:26.530
Ini adalah masalah jika kita memperkenalkan kesalahan atau bisa

00:26.530 --> 00:27.590
menjadi masalah.

00:27.590 --> 00:30.690
Katakanlah di sini, saya memiliki tombol saya dan saya

00:30.690 --> 00:32.410
menghapus tanda seru ini.

00:32.410 --> 00:34.750
Sekarang meskipun kita tidak sepenuhnya memahami

00:34.750 --> 00:38.030
apa yang terjadi masalahnya di sini adalah bahwa TypeScript tidak

00:38.030 --> 00:40.610
tahu bahwa kita pasti memiliki tombol di sini.

00:40.610 --> 00:42.790
Lagi pula, ketika melakukan query untuk sebuah tombol,

00:42.790 --> 00:45.990
kita mungkin tidak mendapatkannya jika tidak ada elemen di DOM yang memenuhi

00:45.990 --> 00:47.540
selector ini, maka ini akan kembali

00:47.540 --> 00:48.800
sekarang.

00:48.800 --> 00:50.910
Dan pada dasarnya itulah yang dikeluhkan oleh TypeScript.

00:50.910 --> 00:54.849
Di sini kita mengakses sesuatu pada objek null yang

00:54.849 --> 00:57.200
potensial dan itu tidak baik.

00:57.200 --> 00:59.300
Nah, itulah kesalahan yang kita miliki di sini.

00:59.300 --> 01:02.120
Jika kita mengkompilasi kode kita, kita juga mendapatkan

01:02.120 --> 01:04.770
kesalahan ini di sini di konsol.

01:04.770 --> 01:08.210
Meskipun demikian, file tersebut dibuat.

01:08.210 --> 01:11.660
Jadi, bahkan jika saya menghapus aplikasi. jsfile itu akan dibuat ulang.

01:11.660 --> 01:13.910
Jadi, bahkan jika kita memiliki kesalahan,

01:13.910 --> 01:16.300
TypeScript membuat file JavaScript.

01:16.300 --> 01:18.740
Hal ini mungkin diinginkan atau tidak diinginkan.

01:18.740 --> 01:21.360
Mungkin Anda memiliki kesalahan dalam file TypeScript Anda dan Anda

01:21.360 --> 01:22.980
tidak benar-benar tahu bagaimana cara mengatasinya

01:22.980 --> 01:26.000
tetapi Anda tahu itu tidak akan menjadi masalah di aplikasi akhir.

01:26.000 --> 01:29.410
Seperti di sini, bahkan jika kita tidak tahu tentang tanda seru.

01:29.410 --> 01:31.577
Nah, jika kita tidak tahu tentang tanda seru,

01:31.577 --> 01:35.900
kita mungkin tidak tahu bagaimana cara menonaktifkan kesalahan ini, pada dasarnya.

01:35.900 --> 01:39.630
Tapi tetap saja kita tahu bahwa ini akan bekerja di halaman kita di sini.

01:39.630 --> 01:41.890
Jadi, kita mungkin baik-baik saja dengan mengkompilasi

01:41.890 --> 01:43.630
ini meskipun ada kesalahan.

01:43.630 --> 01:45.570
Tetapi, tentu saja, pada kenyataannya, Anda

01:45.570 --> 01:48.850
harus mengincar proyek yang bebas kesalahan dan lebih suka belajar bagaimana

01:48.850 --> 01:51.720
Anda bisa mengatasi masalah ini daripada mengabaikannya.

01:51.720 --> 01:54.590
Meskipun demikian, Anda dapat mengatur ini ke false atau

01:54.590 --> 01:57.590
tidak mengaturnya sama sekali, karena false adalah default,

01:57.590 --> 02:00.687
jika Anda tidak masalah dengan menghasilkan file JavaScript

02:00.687 --> 02:02.590
jika Anda mengalami kesalahan.

02:02.590 --> 02:04.240
Namun, jika Anda menetapkan ini

02:04.240 --> 02:07.700
ke true, yang akan terjadi adalah, file-file bermasalah tidak

02:07.700 --> 02:09.100
akan dihasilkan.

02:09.100 --> 02:10.910
Jika saya sekarang menjalankan kembali ini...

02:12.440 --> 02:15.110
Anda lihat, sebenarnya tidak ada yang dihasilkan.

02:15.110 --> 02:18.180
Bahkan analisisnya. ts tidak akan keluar

02:18.180 --> 02:21.440
di sana jika kita memiliki beberapa konten

02:21.440 --> 02:26.440
di sana selain konsol. log, Anda lihat itu tidak dihasilkan.

02:26.550 --> 02:27.560
Dan alasannya adalah karena

02:27.560 --> 02:29.600
kami memiliki kesalahan dalam file.

02:29.600 --> 02:32.940
Dan jika ada file yang gagal dikompilasi, tidak ada file yang

02:32.940 --> 02:34.300
akan dihilangkan.

02:34.300 --> 02:35.810
Jadi di sini, oleh karena itu, kita harus

02:35.810 --> 02:38.850
memastikan bahwa kita memperbaiki kesalahan ini sebelum kita bisa mendapatkan TypeScript

02:38.850 --> 02:40.890
untuk mengkompilasi file lagi untuk kita.

02:40.890 --> 02:43.530
Dan, oleh karena itu, ini adalah opsi yang biasanya ingin saya

02:43.530 --> 02:46.830
atur karena saya tidak tertarik untuk mendapatkan file JavaScript jika saya

02:46.830 --> 02:49.703
masih memiliki kesalahan dalam file TypeScript saya.
