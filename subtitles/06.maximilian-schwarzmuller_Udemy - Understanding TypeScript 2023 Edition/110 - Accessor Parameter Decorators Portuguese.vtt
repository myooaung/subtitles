WEBVTT

00:02.210 --> 00:03.450
Instrutor Masculino: Agora,

00:03.450 --> 00:06.170
além das propriedades, você também pode adicionar decoradores

00:06.170 --> 00:09.200
aos acessores e lá eu criarei uma nova função de decorador, pois este

00:09.200 --> 00:11.660
receberá agora argumentos gratuitos.

00:11.660 --> 00:16.430
Log2, ele também terá o alvo que novamente é ou o protótipo, se estivermos

00:16.430 --> 00:18.330
lidando com um acessório de

00:18.330 --> 00:21.290
instância, ou se estivermos lidando com um

00:21.290 --> 00:23.360
estático, será a função construtora,

00:23.360 --> 00:24.960
então não sabemos se seremos

00:24.960 --> 00:27.290
de algum tipo.

00:27.290 --> 00:32.290
Então teremos o nome do membro com o qual estamos lidando.

00:32.410 --> 00:35.030
Portanto, o nome do acessor no final.

00:35.030 --> 00:38.683
E também teremos aqui o descritor de propriedade, que será

00:39.580 --> 00:42.030
do tipo descritor de propriedade.

00:42.030 --> 00:44.600
Esse é o tipo incorporado ao TypeScript.

00:44.600 --> 00:49.600
Então, lá dentro, vamos logar o decorador acessor e depois

00:50.030 --> 00:54.210
eu também vou consolar o alvo aqui, depois talvez

00:54.210 --> 00:56.470
novas linhas para torná-los

00:56.470 --> 01:01.470
mais legíveis na saída, o nome e também o descritor.

01:01.720 --> 01:05.890
Agora vamos adicionar log2 ao setter aqui assim e vamos ver

01:05.890 --> 01:07.350
o que conseguimos.

01:07.350 --> 01:10.733
Se salvarmos isso, você vê lá embaixo o decorador

01:10.733 --> 01:14.090
de acessórios que executa aqui.

01:14.090 --> 01:19.090
Conseguimos nosso protótipo novamente, o mesmo que um buff para a propriedade.

01:19.320 --> 01:23.570
Depois conseguimos o nome de nosso acessor, preço neste caso.

01:23.570 --> 01:24.900
Não sublinhar o preço, portanto,

01:24.900 --> 01:27.890
não a propriedade com a qual lida internamente.

01:27.890 --> 01:30.570
Em vez disso, realmente o nome do próprio acessor.

01:30.570 --> 01:33.630
E temos aqui um descritor de propriedade onde vemos

01:33.630 --> 01:36.240
que uma função setter é definida, por exemplo,

01:36.240 --> 01:37.600
uma função getter não

01:37.600 --> 01:41.990
é, porque pelo preço eu só tenho um setter, não tenho getter.

01:41.990 --> 01:44.320
E vemos que não é enumerável, mas que

01:44.320 --> 01:45.680
é configurável.

01:45.680 --> 01:47.810
Para que possamos mudar esta definição aqui,

01:47.810 --> 01:51.000
por exemplo, para que possamos apagá-la e assim por diante.

01:51.000 --> 01:54.520
Tudo isto existe e é assim que podemos adicionar um decorador

01:54.520 --> 01:56.650
a um acessório, e o que depois podemos

01:56.650 --> 01:58.920
acessar dentro deste decorador.

01:58.920 --> 02:00.910
Agora, além de propriedades e acessórios,

02:00.910 --> 02:04.350
também temos métodos e podemos acrescentar decoradores aos métodos.

02:04.350 --> 02:09.350
Portanto, aqui vou adicionar o Log3, e acrescentar isso ao meu método lá

02:09.430 --> 02:11.970
embaixo para obter preço com texto.

02:11.970 --> 02:13.220
E agora a questão é, naturalmente,

02:13.220 --> 02:17.323
quais argumentos tal decorador de métodos recebe?

02:18.180 --> 02:22.230
Um decorador de métodos também recebe argumentos livres,

02:22.230 --> 02:25.520
o alvo novamente, que se for um método de instância,

02:25.520 --> 02:28.420
é o protótipo do objeto.

02:28.420 --> 02:31.150
Se é um método estático, o construtor

02:31.150 --> 02:34.993
funciona como antes, então o nome do método aqui, então

02:36.450 --> 02:39.380
um fio ou um símbolo realmente.

02:39.380 --> 02:44.380
E também o descritor no final, o descritor de propriedade.

02:44.490 --> 02:46.140
Estes são os argumentos livres que recebemos

02:46.140 --> 02:48.110
aqui, e você vê que estes são os mesmos argumentos

02:48.110 --> 02:49.410
que em nosso acessor.

02:49.410 --> 02:51.630
Portanto, também poderíamos reutilizar

02:51.630 --> 02:54.340
isto, mas vou criar um novo para que aqui eu

02:54.340 --> 02:57.483
possa imprimir decorador de métodos.

02:59.020 --> 03:00.840
Agora com isso, se eu salvei isto,

03:01.980 --> 03:04.410
isto executa e você vê aqui nosso decorador

03:04.410 --> 03:07.880
de métodos executa e então aqui nós obtemos nosso protótipo, o

03:07.880 --> 03:09.380
mesmo objeto que antes.

03:09.380 --> 03:11.310
Recebemos aqui o nome do método

03:11.310 --> 03:14.700
e temos aqui este descritor deste método.

03:14.700 --> 03:17.440
Portanto, o mesmo comportamento de antes basicamente,

03:17.440 --> 03:19.400
apenas um descritor é um pouco diferente,

03:19.400 --> 03:20.950
pois é um descritor de método e não

03:20.950 --> 03:22.550
um descritor de acessor.

03:22.550 --> 03:25.720
Temos aqui um valor e um bem gravável.

03:25.720 --> 03:27.750
Anteriormente, no descritor de acesso, tínhamos

03:27.750 --> 03:28.860
conseguido e definido.

03:28.860 --> 03:30.910
Mas isso é apenas uma diferença do java script,

03:30.910 --> 03:33.088
nada específico do TypeScript.

03:33.088 --> 03:38.088
Portanto, aqui temos nossa terceira função de decorador que agora

03:38.150 --> 03:40.070
adicionamos ao método.

03:40.070 --> 03:43.390
O último decorador que podemos acrescentar é a um parâmetro.

03:43.390 --> 03:45.260
Portanto, vamos fazer isso agora.

03:45.260 --> 03:47.550
Para isso, vou criar mais uma função aqui,

03:47.550 --> 03:51.269
Log4 e quero adicionar Log4 a este parâmetro que estou recebendo

03:51.269 --> 03:53.660
aqui, imposto e você poderia adicionar

03:53.660 --> 03:55.510
um a cada parâmetro que você receber,

03:55.510 --> 03:57.130
é claro.

03:57.130 --> 03:59.560
Não é necessário, mas você pode adicioná-los independentemente

03:59.560 --> 04:02.990
a qualquer parâmetro ao qual você queira adicionar um decorador.

04:02.990 --> 04:06.419
Agora, o que um decorador de parâmetros recebe como argumento?

04:06.419 --> 04:10.790
Bem, ele recebe o mesmo alvo de antes.

04:10.790 --> 04:12.520
O próximo argumento que obtemos

04:12.520 --> 04:14.100
é o nome, e não o nome do parâmetro,

04:14.100 --> 04:17.310
mas o nome do método em que utilizamos este parâmetro.

04:17.310 --> 04:20.530
Portanto, basicamente, o mesmo que no método decorador até agora.

04:20.530 --> 04:22.170
Mas o último argumento é diferente.

04:22.170 --> 04:24.250
Este não é agora o descritor da propriedade,

04:24.250 --> 04:30.100
mas esta é a posição deste argumento, portanto, o número do argumento.

04:30.100 --> 04:32.763
Aqui, por exemplo, este seria o primeiro argumento.

04:35.310 --> 04:38.670
Portanto, agora novamente, vamos copiar isso

04:38.670 --> 04:43.550
aqui e colocar tudo isso no decorador de parâmetros Log4.

04:43.550 --> 04:45.410
E vamos também dar posição aqui para que

04:45.410 --> 04:47.170
possamos ver o que está lá dentro.

04:47.170 --> 04:50.960
Se agora o salvamos, vemos nosso decorador de parâmetros lá em cima, não

04:50.960 --> 04:53.480
a última saída porque a ordem de execução é diferente,

04:53.480 --> 04:55.630
mas vemos nosso decorador de parâmetros

04:55.630 --> 04:57.180
aqui e depois aqui.

04:57.180 --> 04:59.530
Temos o protótipo como antes.

04:59.530 --> 05:00.860
Temos o nome do método onde

05:00.860 --> 05:02.190
usamos este parâmetro,

05:02.190 --> 05:04.770
e depois o índice desse argumento, e que começa

05:04.770 --> 05:06.240
em zero, então o primeiro

05:06.240 --> 05:09.070
argumento tem um número zero aqui, um índice de

05:09.070 --> 05:10.360
zero, e esse é o nosso decorador

05:10.360 --> 05:12.740
de parâmetros.

05:12.740 --> 05:14.920
Portanto, estes são todos os lugares onde podemos

05:14.920 --> 05:16.370
adicionar decoradores e TypeScript,

05:16.370 --> 05:18.570
e podemos fazer várias coisas com eles.

05:18.570 --> 05:20.450
Agora vou lhes mostrar alguns

05:20.450 --> 05:21.660
exemplos neste módulo

05:21.660 --> 05:24.813
aqui, e também vou lhes mostrar bibliotecas ou estruturas

05:24.813 --> 05:28.380
que fazem uso pesado de decoradores.

05:28.380 --> 05:30.550
E lhe mostrarei o que eles fazem com os decoradores

05:30.550 --> 05:34.583
para lhe dar uma idéia do poder que os decoradores podem ter.
