WEBVTT

00:02.100 --> 00:04.890
Instructeur: Om klassen te begrijpen, moeten we object

00:04.890 --> 00:07.040
georiënteerd programmeren begrijpen.

00:07.040 --> 00:10.050
Nu, afhankelijk van je kennisniveau en als je hebt

00:10.050 --> 00:12.560
gewerkt met modern JavaScript en misschien

00:12.560 --> 00:15.340
ook met enkele andere programmeertalen, weet

00:15.340 --> 00:18.320
je misschien waar klassen voor zijn en wat OOP

00:18.320 --> 00:22.270
objectgeoriënteerd programmeren inhoudt.

00:22.270 --> 00:24.570
U kunt deze lezing dus ook overslaan om meteen

00:24.570 --> 00:27.720
door te gaan naar de delen waar we code schrijven.

00:27.720 --> 00:29.330
Blijf anders zeker bij me

00:29.330 --> 00:32.200
want het is belangrijk om dit te begrijpen.

00:32.200 --> 00:35.240
Het idee achter objectgeoriënteerd programmeren

00:35.240 --> 00:38.550
en klassen zijn daarvoor belangrijk, zoals je zult

00:38.550 --> 00:41.630
zien, is dat je werkt met levensechte entiteiten

00:41.630 --> 00:43.110
in je code.

00:43.110 --> 00:47.370
Zodat je met dingen in je code werkt met objecten die zoveel mogelijk

00:47.370 --> 00:52.110
lijken op levensechte objecten, tenminste om het voor jou als ontwikkelaar

00:52.110 --> 00:54.410
makkelijker te maken om over je code

00:54.410 --> 00:56.250
te redeneren.

00:56.250 --> 00:59.150
We kunnen bijvoorbeeld een online winkel bouwen

00:59.150 --> 01:01.270
en daar een productlijst hebben.

01:01.270 --> 01:05.190
Daarom willen we misschien werken met een productlijstobject, dat alles heeft

01:05.190 --> 01:08.140
wat we nodig hebben om een productlijst te beheren.

01:08.140 --> 01:11.570
Een methode om producten toe te voegen aan de hoofdproducten,

01:11.570 --> 01:13.370
de lijst zelf.

01:13.370 --> 01:15.670
Dit kan dus bijvoorbeeld een object zijn dat

01:15.670 --> 01:18.360
verantwoordelijk is voor het weergeven en beheren

01:18.360 --> 01:19.540
van een lijst van producten,

01:19.540 --> 01:22.840
die zijn opgehaald uit een dienst of uit een database.

01:22.840 --> 01:25.530
Dus dit product bevat alle rendering en fetching

01:25.530 --> 01:27.260
en management logica.

01:27.260 --> 01:29.420
Dat is pas een productlijst.

01:29.420 --> 01:32.510
In ons programma naar website die we bouwen, moeten

01:32.510 --> 01:33.870
we misschien ook met het

01:33.870 --> 01:36.000
individuele product werken.

01:36.000 --> 01:39.540
Dus willen we misschien ook een object of meerdere objecten; één

01:39.540 --> 01:40.960
voor elk product dat verantwoordelijk

01:40.960 --> 01:43.930
is voor het beheer van dat ene product.

01:43.930 --> 01:47.180
Het kan de details over dat product bevatten en weergeven, ons misschien

01:47.180 --> 01:49.830
in staat stellen het aan een winkelwagentje toe te voegen,

01:49.830 --> 01:51.260
dat soort dingen.

01:51.260 --> 01:54.900
Dus als we de gebruikersinterface naar het scherm willen tekenen, willen

01:54.900 --> 01:57.010
we dat via JavaScript en dus via TypeScript

01:57.010 --> 01:58.740
regelen, dan zouden we dit kunnen implementeren

01:58.740 --> 02:00.550
met een productlijst en een productobject

02:00.550 --> 02:02.970
dat de logica bevat voor het beheer van de onderliggende

02:02.970 --> 02:05.370
gegevens, maar ook voor het weergeven van de inhoud

02:05.370 --> 02:07.760
op het scherm.

02:07.760 --> 02:10.010
En natuurlijk zouden deze twee objecten

02:10.010 --> 02:11.940
dus met elkaar in verband staan.

02:11.940 --> 02:14.790
We kunnen ook een winkelwagenobject op ons scherm hebben, dat

02:14.790 --> 02:16.410
verantwoordelijk is voor het renderen

02:16.410 --> 02:18.040
en beheren van de winkelwagen.

02:18.040 --> 02:20.380
Het hangt natuurlijk ook samen met het product.

02:20.380 --> 02:22.930
En daarom bevat het alle logica die we nodig hebben om

02:22.930 --> 02:24.880
onze winkelkaart te renderen, bestellingen

02:24.880 --> 02:28.073
te plaatsen en te communiceren met de server enzovoort.

02:28.073 --> 02:31.190
Dat is dus één manier om na te denken over de toepassing

02:31.190 --> 02:33.010
die we bouwen.

02:33.010 --> 02:35.590
Hoe we het in logische stukken kunnen verdelen

02:35.590 --> 02:37.670
die zinvol zijn voor ons als mensen.

02:37.670 --> 02:40.320
En in code in TypeScript en JavaScript, in de

02:40.320 --> 02:42.920
meeste moderne programmeertalen, wordt dit

02:42.920 --> 02:46.750
actief ondersteund omdat we objecten hebben die complexere datastructuren

02:46.750 --> 02:48.900
zijn die eigenschappen en methoden

02:48.900 --> 02:50.640
bevatten.

02:50.640 --> 02:53.340
En natuurlijk hebben we dat ook in JavaScript.

02:53.340 --> 02:57.310
Maar we hebben misschien ook klassen die ons daarbij helpen.

02:57.310 --> 02:59.100
Wat is het idee achter de lessen?

02:59.100 --> 03:00.740
En wat zijn instanties?

03:00.740 --> 03:02.030
Wanneer we deze objecten

03:02.030 --> 03:04.690
krijgen en deze objectgeoriënteerde aanpak

03:04.690 --> 03:07.500
volgen, kunnen we overwegen onze app of onze toepassingslogica

03:07.500 --> 03:11.130
op te splitsen in dergelijke objecten die delen van onze logica

03:11.130 --> 03:13.750
beheren.

03:13.750 --> 03:17.000
Nu verbonden met het idee van het gebruik van deze objecten,

03:17.000 --> 03:19.340
die natuurlijk bestaan in JavaScript, kunnen

03:19.340 --> 03:23.910
we daar objecten gebruiken als het idee van het hebben van klassen.

03:23.910 --> 03:27.470
Objecten zijn de concrete dingen waarmee we werken in onze code.

03:27.470 --> 03:30.380
De gegevensstructuren die we gebruiken om gegevens

03:30.380 --> 03:33.450
op te slaan om methoden op uit te voeren.

03:33.450 --> 03:36.570
Klassen zijn blauwdrukken voor objecten.

03:36.570 --> 03:40.880
Met klassen kunnen we definiëren hoe objecten eruit moeten zien; welke gegevens

03:40.880 --> 03:42.230
ze moeten bevatten, welke

03:42.230 --> 03:44.070
methoden ze moeten hebben, zodat

03:44.070 --> 03:48.240
we gemakkelijk objecten kunnen bouwen op basis van deze klassen.

03:48.240 --> 03:51.830
En dit noemen we dan instanties van de klassen.

03:51.830 --> 03:54.830
Dus een object is dan een instantie van een klasse als

03:54.830 --> 03:56.850
het gebaseerd is op zo'n klasse, zodat

03:56.850 --> 03:59.900
we snel meerdere objecten kunnen repliceren met dezelfde

03:59.900 --> 04:02.230
structuur dezelfde methoden gebaseerd

04:02.230 --> 04:04.090
op dezelfde klassen.

04:04.090 --> 04:07.280
Klassen helpen ons dus te definiëren hoe objecten eruit moeten zien,

04:07.280 --> 04:10.170
welke eigenschappen en methoden ze hebben, enzovoort.

04:10.170 --> 04:14.920
Klassen bestaan dus om het maken van objecten te versnellen.

04:14.920 --> 04:16.160
En het is gewoon een alternatief

04:16.160 --> 04:20.070
voor de objectletterlijke notatie die je al kent.

04:20.070 --> 04:21.330
Ze maken het gewoon makkelijker.

04:21.330 --> 04:24.620
Klassen maken het eenvoudigweg gemakkelijker om meerdere objecten

04:24.620 --> 04:26.900
te maken die over het algemeen dezelfde structuur

04:26.900 --> 04:28.030
en dezelfde methoden hebben,

04:28.030 --> 04:31.500
en die misschien alleen verschillen in de exacte gegevens die erin zijn

04:31.500 --> 04:32.780
opgeslagen.

04:32.780 --> 04:34.540
Laten we zeggen dat we meerdere personen

04:34.540 --> 04:36.670
willen voorstellen met objecten.

04:36.670 --> 04:39.330
Elke persoon mag dan een naam en een leeftijd hebben,

04:39.330 --> 04:40.830
de waarden zullen verschillen,

04:40.830 --> 04:43.310
de algemene structuur is hetzelfde.

04:43.310 --> 04:44.500
Dus dat is de theorie.

04:44.500 --> 04:46.113
Laten we het in de praktijk zien.
