WEBVTT

00:02.160 --> 00:06.060
Người hướng dẫn: Vậy, chúng ta có thể làm gì về xác nhận?

00:06.060 --> 00:10.450
Chà, có lẽ, hãy bắt đầu với kết quả cuối cùng mong muốn.

00:10.450 --> 00:14.850
Ý tưởng của tôi là sau này chúng ta có một số chức năng xác

00:14.850 --> 00:17.950
thực chưa tồn tại, nhưng sau này chúng

00:17.950 --> 00:21.230
ta có nó, mà tôi sẽ chuyển enterTitle hoặc

00:21.230 --> 00:25.360
thực sự là một đối tượng cấu hình mà tôi muốn nói ở đâu

00:25.360 --> 00:27.900
giá trị là đã nhậpTitle, vì vậy

00:27.900 --> 00:30.300
điều được xác nhận.

00:30.300 --> 00:33.260
Nhưng sau đó tôi cũng có các thuộc

00:33.260 --> 00:37.350
tính bổ sung cho hàm xác thực biết cách xác

00:37.350 --> 00:39.130
thực nó.

00:39.130 --> 00:43.210
Vì vậy, ví dụ: chúng tôi đã đặt yêu cầu thành đúng ở đây,

00:43.210 --> 00:47.009
độ dài tối thiểu được đặt thành năm để thực thi năm

00:47.009 --> 00:48.360
ký tự, v.v.

00:48.360 --> 00:50.040
Và sau đó chúng ta làm điều này

00:50.040 --> 00:51.540
ở đây cho cả ba đầu vào, và

00:51.540 --> 00:53.900
xác thực là một hàm trả về true nếu nó hợp

00:53.900 --> 00:56.620
lệ và sai nếu nó không hợp lệ, và cuối cùng, chúng

00:56.620 --> 00:59.580
ta có thể có một cái gì đó như thế này.

00:59.580 --> 01:04.580
Hoặc đã nhậpMô tả và đã nhậpMọi người, đó đại

01:04.790 --> 01:06.790
khái là ý tưởng.

01:06.790 --> 01:09.210
Tất nhiên, đó chỉ là một cách để thực hiện điều

01:09.210 --> 01:11.703
này, nhưng đó là cách mà tôi khá thích.

01:12.600 --> 01:15.320
Vì vậy, ở đầu tệp, tôi

01:15.320 --> 01:19.470
sẽ thêm một số logic xác thực.

01:19.470 --> 01:22.380
Và, một lần nữa, có nhiều cách để làm điều này.

01:22.380 --> 01:24.390
Trước hết tôi sẽ bắt đầu bằng cách xác

01:24.390 --> 01:27.840
định cấu trúc của một đối tượng có thể xác thực như vậy.

01:27.840 --> 01:31.280
Vì vậy, đối tượng này chúng ta chuyển đến hàm xác

01:31.280 --> 01:33.430
thực, vì tất nhiên, đối tượng

01:33.430 --> 01:37.820
này luôn cần có cấu trúc tương tự với một số thuộc tính nhất định

01:37.820 --> 01:40.100
có thể có ở đó và một số loại thuộc

01:40.100 --> 01:42.410
tính nhất định, để hàm xác thực

01:42.410 --> 01:44.950
thực sự biết nó đang làm việc với cái

01:44.950 --> 01:47.400
gì và có thể trích xuất chính xác các

01:47.400 --> 01:49.870
thuộc tính, v.v.

01:49.870 --> 01:52.850
Vì vậy, tôi sẽ bắt đầu bằng cách xác định một giao diện.

01:52.850 --> 01:55.380
Chúng tôi cũng có thể chọn loại tùy chỉnh, hoàn toàn

01:55.380 --> 01:56.550
tùy thuộc vào bạn.

01:56.550 --> 01:58.690
Vì tôi sẽ xác định cấu trúc của một

01:58.690 --> 02:02.793
đối tượng, nên tôi luôn thích xác định chỉ một giao diện.

02:03.810 --> 02:06.700
Tôi sẽ đặt tên nó là Có thể xác thực

02:06.700 --> 02:09.940
ở đây, vì nó mô tả một đối tượng có thể

02:09.940 --> 02:13.300
hợp lệ và nó sẽ có một giá trị phải là

02:13.300 --> 02:17.140
một chuỗi hoặc cũng là một số.

02:17.140 --> 02:18.980
Nó sẽ có một giá trị bắt buộc,

02:18.980 --> 02:21.240
giá trị này sẽ có giá trị Boolean,

02:21.240 --> 02:22.630
đúng hoặc sai.

02:22.630 --> 02:26.470
Và sau đó, giả sử chúng tôi hỗ trợ xác thực độ dài tối thiểu,

02:26.470 --> 02:28.212
phải là một số, maxLength

02:28.212 --> 02:30.220
phải là một số và cả trong trường

02:30.220 --> 02:32.510
hợp chúng tôi nhận được một số, giá

02:32.510 --> 02:35.240
trị tối thiểu và tối đa.

02:35.240 --> 02:37.417
Sự khác biệt giữa minLength và maxLength

02:37.417 --> 02:40.310
là điều này kiểm tra độ dài của chuỗi, đây là giá

02:40.310 --> 02:42.320
trị của số nếu nó ở trên một số nhất

02:42.320 --> 02:43.960
định hoặc dưới một mức tối

02:43.960 --> 02:46.010
đa nhất định.

02:46.010 --> 02:48.870
Đây là những tài sản tôi muốn hỗ trợ.

02:48.870 --> 02:50.470
Bây giờ bên cạnh giá trị,

02:50.470 --> 02:52.140
tất cả chúng phải là tùy

02:52.140 --> 02:54.410
chọn, chúng ta có thể thực thi điều

02:54.410 --> 02:57.650
này bằng cách thêm dấu chấm hỏi sau tên.

02:57.650 --> 03:00.070
Nhân tiện, cách thay thế cho việc sử dụng dấu

03:00.070 --> 03:02.720
chấm hỏi là cho phép các giá trị không xác định.

03:02.720 --> 03:04.880
Dấu chấm hỏi về cơ bản cũng giống như vậy.

03:04.880 --> 03:09.370
Nó nói rằng yêu cầu là Boolean hoặc không xác định.

03:09.370 --> 03:12.610
Vì vậy, bây giờ chúng ta có giao diện hợp lệ.

03:12.610 --> 03:13.893
Chúng ta có thể làm gì với điều đó?

03:14.930 --> 03:17.893
Chà, bây giờ với giao diện đã được tạo, chúng

03:18.830 --> 03:21.330
ta có thể tạo chức năng đó, chức năng

03:21.330 --> 03:24.220
xác thực mà tôi đang tìm kiếm.

03:24.220 --> 03:27.410
Điều đó sẽ nhận được một đối tượng hợp lệ như vậy.

03:27.410 --> 03:32.410
Vì vậy, ValidatableInput thuộc loại có thể xác thực.

03:32.410 --> 03:33.450
Đó là ý tưởng của tôi ở đây.

03:33.450 --> 03:36.400
Vì vậy, nó nhận được một đối tượng có cấu trúc này.

03:36.400 --> 03:38.270
Và bây giờ ở đó, chúng ta có

03:38.270 --> 03:41.670
thể kiểm tra sự tồn tại của tất cả các thuộc tính

03:41.670 --> 03:44.810
này và sau đó thực hiện xác nhận hợp lệ.

03:44.810 --> 03:46.150
Do đó, chính xác thì chúng

03:46.150 --> 03:48.200
ta phải làm gì trong chức năng xác thực?

03:48.200 --> 03:49.033
Chà, cuối cùng

03:49.033 --> 03:50.930
ở đây, tôi muốn tạo một biến, isValid,

03:50.930 --> 03:52.330
ban đầu là đúng.

03:52.330 --> 03:54.030
Vì vậy, giả định mặc định là những gì

03:54.030 --> 03:55.510
chúng ta nhận được là đúng.

03:55.510 --> 03:57.430
Nhưng chúng tôi sẽ đặt nó thành false

03:57.430 --> 04:01.330
ngay khi ít nhất một trong các lần kiểm tra của chúng tôi không thành công.

04:01.330 --> 04:03.480
Và bây giờ hãy bắt đầu với lần kiểm tra đầu tiên.

04:03.480 --> 04:06.410
Hãy xem liệu validatableInput ở đây, đối

04:06.410 --> 04:08.220
số này mà chúng ta đang nhận

04:08.220 --> 04:11.380
được, liệu nó có chỗ dựa bắt buộc không?

04:11.380 --> 04:13.260
Nếu đó không phải là không xác định.

04:13.260 --> 04:16.490
Nếu giá trị này được đặt và nếu giá trị này là đúng, thì

04:16.490 --> 04:18.630
điều này có nghĩa là giá trị này là bắt

04:18.630 --> 04:20.630
buộc và không được để trống.

04:20.630 --> 04:22.080
Vì vậy, bây giờ ở đây,

04:22.080 --> 04:26.160
chúng ta có thể đặt isValid bằng isValid và cách JavaScript

04:26.160 --> 04:27.700
hoạt động, điều này

04:27.700 --> 04:30.550
đảm bảo rằng giá trị mới của isValid

04:30.550 --> 04:34.330
sẽ là sai nếu điều sau và là sai.

04:34.330 --> 04:36.870
Bởi vì nếu ít nhất một trong hai điều là sai,

04:36.870 --> 04:38.660
giá trị tổng thể sẽ là sai.

04:38.660 --> 04:40.500
Bây giờ isValid ban đầu

04:40.500 --> 04:44.070
là đúng, nhưng nếu điều sau toán tử logic và là

04:44.070 --> 04:46.300
sai, thì isValid sẽ sai.

04:46.300 --> 04:48.700
Và cuối cùng tôi sẽ trả về isValid.

04:48.700 --> 04:50.040
Vì vậy, bây giờ chúng

04:50.040 --> 04:53.550
ta thêm gì sau hai ký hiệu dấu và do đó?

04:53.550 --> 04:57.290
Chà, tôi muốn kiểm tra xem validatableInput. giá trị, nếu đó là sản

04:57.290 --> 04:58.170
phẩm nào.

04:58.170 --> 05:00.530
Và để làm được điều đó, chúng ta có

05:00.530 --> 05:04.210
thể cắt nó và kiểm tra độ dài, hay chúng ta có thể?

05:04.210 --> 05:05.630
Chà, vấn đề là, chúng ta không biết

05:05.630 --> 05:07.510
giá trị có phải là một chuỗi hay không.

05:07.510 --> 05:09.090
Đó là một chuỗi hoặc một số.

05:09.090 --> 05:10.910
Vì vậy, nó không được đảm bảo là một chuỗi

05:10.910 --> 05:12.140
và do đó, phương thức cắt

05:12.140 --> 05:14.100
không phải lúc nào cũng khả dụng.

05:14.100 --> 05:17.570
Bây giờ có nhiều cách khác nhau để giải quyết vấn đề đó.

05:17.570 --> 05:19.600
Chúng tôi có thể thêm một loại bảo vệ, chúng tôi có

05:19.600 --> 05:23.390
thể kiểm tra xem typeof validatableInput. giá trị bằng chuỗi

05:25.250 --> 05:30.250
và chỉ thực hiện kiểm tra này nếu đúng như vậy.

05:30.920 --> 05:33.040
Nhưng thực ra điều đó sẽ hơi thừa.

05:33.040 --> 05:36.120
Những gì chúng ta có thể làm ở đây rất đơn giản.

05:36.120 --> 05:37.257
Chúng ta có thể chỉ cần nói

05:37.257 --> 05:39.140
"tốt, hãy chuyển đổi nó thành một chuỗi. Nếu nó là một con số, bây giờ nó lại là một chuỗi.

05:39.140 --> 05:41.370
Nếu đó là một chuỗi, không có gì thay đổi.

05:41.370 --> 05:44.170
Và với điều đó, chúng tôi đang làm điều này.

05:44.170 --> 05:45.900
Bây giờ tôi chỉ cần thêm séc của mình vào đây

05:45.900 --> 05:47.950
để kiểm tra xem đó có phải là số không hay không.

05:47.950 --> 05:50.360
Hay nói chính xác, nếu nó không bằng không.

05:50.360 --> 05:53.463
Vì vậy, nếu nó khác 0, thì điều

05:54.680 --> 05:56.810
này sẽ trả về true và isValid

05:56.810 --> 05:58.740
vẫn đúng.

05:58.740 --> 06:00.500
Nếu nó bằng 0, vì vậy nếu nó có độ dài

06:00.500 --> 06:02.760
bằng 0, nếu nó trống, điều này sẽ trả về false

06:02.760 --> 06:04.940
và do đó isValid sẽ trở thành false.

06:04.940 --> 06:06.890
Và chúng tôi chỉ kiểm tra điều này

06:06.890 --> 06:08.280
nếu kiểm tra bắt buộc được

06:08.280 --> 06:11.190
gắn cờ với cài đặt bắt buộc thành đúng.

06:11.190 --> 06:13.530
Đó là kiểm tra đầu tiên tôi muốn thực hiện ở đây.

06:13.530 --> 06:15.560
Nó không phải là duy nhất tất nhiên.

06:15.560 --> 06:17.660
Chúng ta có thể tiếp tục và kiểm tra xem

06:17.660 --> 06:18.950
validatableInput. minLength được đặt, nếu

06:18.950 --> 06:23.880
minLength được đặt, thì chuỗi này mà chúng

06:23.880 --> 06:25.190
ta nhận được phải có độ

06:25.190 --> 06:27.050
dài tối thiểu nhất định.

06:27.050 --> 06:28.780
Quan trọng, chuỗi phải có độ

06:28.780 --> 06:30.440
dài tối thiểu nhất định.

06:30.440 --> 06:31.620
Chúng tôi không quan tâm đến các con số

06:31.620 --> 06:33.600
ở đây, chúng tôi không kiểm tra giá trị tối thiểu của một số.

06:33.600 --> 06:37.060
Vì vậy, ở đây chúng ta thực sự có thể thêm một loại bảo vệ,

06:37.060 --> 06:40.390
chúng ta có thể kết hợp nó vào kiểm tra này và kiểm tra xem

06:40.390 --> 06:42.320
typeof validatableInput. giá trị bằng

06:42.320 --> 06:46.910
chuỗi.

06:46.910 --> 06:48.460
Nếu không, chúng ta không cần đi sâu vào vấn đề

06:48.460 --> 06:50.357
này nếu kiểm tra bởi vì sau đó không có gì để kiểm tra.

06:50.357 --> 06:52.570
Nếu giá trị của chúng tôi là một con số, chúng tôi không quan tâm đến điều này.

06:52.570 --> 06:55.330
Nếu chúng tôi đặt độ dài tối thiểu cho một số, về cơ

06:55.330 --> 06:57.710
bản, chúng tôi sẽ bỏ qua bước kiểm tra này vì

06:57.710 --> 06:59.330
nó không có nhiều ý nghĩa.

06:59.330 --> 07:01.890
Tuy nhiên, nếu chúng tôi có một chuỗi và

07:01.890 --> 07:03.420
minLength được đặt, thì

07:03.420 --> 07:05.663
tôi muốn đặt isValid bằng isValid

07:06.570 --> 07:10.053
và sau đó, một lần nữa, kiểm tra của chúng tôi.

07:11.181 --> 07:12.600
Và kiểm tra ở

07:12.600 --> 07:16.580
đây là liệu validatableInput. giá trị, mà chúng ta biết là một chuỗi tại thời

07:16.580 --> 07:20.810
điểm này ở đây, độ dài,

07:20.810 --> 07:24.070
lớn hơn giá trị hợp lệInput. Độ dài nhỏ nhất.

07:24.070 --> 07:28.520
Vì vậy, lớn hơn giá trị được xác định ở đây.

07:28.520 --> 07:31.660
Bây giờ chúng ta có một vấn đề tiềm ẩn ở đây, và bạn

07:31.660 --> 07:33.920
có thấy đó có thể là vấn đề gì không?

07:33.920 --> 07:36.163
Điều này thường hoạt động, nhưng nó sẽ thất bại

07:37.030 --> 07:38.630
nếu minLength được đặt thành 0.

07:38.630 --> 07:42.210
Ý định của nhà phát triển đặt nó thành 0 có lẽ không

07:42.210 --> 07:45.760
phải để bỏ qua bước kiểm tra này, mà để kiểm tra

07:45.760 --> 07:48.760
xem liệu chúng ta có độ dài tối thiểu bằng

07:48.760 --> 07:50.170
0 hay không.

07:50.170 --> 07:51.960
Chà, có thể cho rằng đó là một kiểm tra dư thừa,

07:51.960 --> 07:53.800
bởi vì về cơ bản, nó kiểm tra xem chúng tôi có

07:53.800 --> 07:55.850
bất kỳ thứ gì không, điều mà chúng tôi đã thực hiện

07:55.850 --> 07:57.260
với kiểm tra bắt buộc.

07:57.260 --> 07:59.300
Vì vậy, nó không phải là một vấn đề lớn.

07:59.300 --> 08:01.330
Tuy nhiên, nếu bạn muốn siêu an toàn

08:01.330 --> 08:05.470
ở đây, chúng ta thực sự nên kiểm tra xem validatableInput.

08:05.470 --> 08:05.470
minLength không bằng không xác định.

08:05.470 --> 08:10.470
Hoặc không bằng null, với một dấu

08:10.640 --> 08:14.910
bằng, điều này bao gồm null và không xác định, đó là cách

08:14.910 --> 08:17.130
JavaScript hoạt động.

08:17.130 --> 08:18.890
Điều này an toàn hơn một chút, bởi vì

08:18.890 --> 08:20.470
bây giờ chúng tôi đảm bảo rằng chúng

08:20.470 --> 08:23.010
tôi luôn chạy kiểm tra này ngay cả khi độ dài tối thiểu

08:23.010 --> 08:25.140
được đặt thành 0, đây là giá trị giả.

08:25.140 --> 08:27.222
Một lần nữa, bạn có thể tranh luận nếu nó

08:27.222 --> 08:29.740
hợp lý, bởi vì về cơ bản nó giống như kiểm tra ở trên

08:29.740 --> 08:32.270
đó, tuy nhiên, ở đây tôi muốn thực hiện nó.

08:32.270 --> 08:34.930
Vì vậy, đó là độ dài tối thiểu.

08:34.930 --> 08:36.790
Bây giờ tôi sẽ sao chép cái này và về cơ bản

08:36.790 --> 08:38.130
làm tương tự cho maxLength.

08:38.130 --> 08:40.720
Vì vậy, maxLength ở đây cũng được

08:40.720 --> 08:44.350
kiểm tra, cũng ở đây và cũng chỉ cho các chuỗi.

08:44.350 --> 08:46.870
Và tất nhiên ở đây chúng ta chỉ cần hoàn nguyên điều này.

08:46.870 --> 08:49.280
Chúng tôi muốn đảm bảo rằng độ dài của giá trị

08:49.280 --> 08:52.380
được cung cấp thấp hơn độ dài tối đa của chúng tôi.

08:52.380 --> 08:55.173
Chà, và bây giờ chúng tôi còn hai lần kiểm tra nữa cho

08:56.810 --> 08:58.760
giá trị tối thiểu và tối đa chỉ có ý nghĩa

08:58.760 --> 09:00.160
đối với một số.

09:00.160 --> 09:03.310
Vì vậy, ở đây tôi sẽ thêm một kiểm tra khác và kiểm tra

09:03.310 --> 09:05.150
xem validatableInput. min không bằng

09:05.150 --> 09:08.280
null.

09:09.720 --> 09:11.100
Một lần nữa, tôi không chỉ kiểm tra

09:11.100 --> 09:13.820
tính trung thực, bởi vì điều đó sẽ có vấn đề với giá trị bằng không.

09:13.820 --> 09:17.050
Và sau đó tôi sẽ kiểm tra xem loại validatableInput. giá trị bằng

09:17.050 --> 09:21.770
số.

09:21.770 --> 09:23.250
Bởi vì tôi thấy không có nhiều

09:23.250 --> 09:25.640
ý nghĩa khi kiểm tra điều này cho một chuỗi.

09:25.640 --> 09:26.760
Nếu bạn muốn kiểm tra nó để tìm một chuỗi,

09:26.760 --> 09:28.020
tất nhiên bạn có thể bỏ qua phần này.

09:28.020 --> 09:29.680
Sau đó, bạn chỉ cần đảm bảo rằng

09:29.680 --> 09:32.120
bạn chuyển đổi giá trị thành một số khi bạn sử dụng

09:32.120 --> 09:34.380
nó trong tấm séc mà chúng ta sắp viết.

09:34.380 --> 09:35.970
Một lần nữa, séc mà chúng ta sắp

09:35.970 --> 09:37.220
viết sử dụng giá trị cũ

09:37.220 --> 09:39.740
của isValid và kết hợp nó với một séc mới để sau

09:39.740 --> 09:41.500
đó lưu trữ lại vào isValid.

09:41.500 --> 09:44.000
Và kiểm tra mới bây giờ sẽ kết hợp tốt số

09:44.000 --> 09:47.210
của chúng tôi và kiểm tra xem nó có lớn hơn giá trị

09:47.210 --> 09:48.730
tối thiểu hay không.

09:48.730 --> 09:50.720
Vì vậy, ở đây tôi kiểm tra xem validatableInput. giá trị lớn hơn giá

09:50.720 --> 09:54.650
trị hợp lệ. tối thiểu

09:54.650 --> 09:58.690
Và bây giờ chúng ta có thể lặp lại điều

09:58.690 --> 10:02.010
này cho max, vì vậy ở đây chúng ta cần max và ở đây chúng ta cũng

10:02.010 --> 10:06.190
cần max và chúng ta cần thay đổi ký hiệu này ở đây thành ký hiệu nhỏ hơn.

10:06.190 --> 10:10.363
Cùng với đó, chúng tôi đang kiểm tra tất cả các kịch bản khác nhau mà

10:11.920 --> 10:13.230
bạn có thể có ở đây.

10:13.230 --> 10:16.930
Và chúng tôi đang trả về isValid.

10:16.930 --> 10:18.710
Bây giờ chúng ta chỉ cần tạo các đối

10:19.840 --> 10:21.600
tượng tuân theo giao diện này để

10:21.600 --> 10:23.630
gửi chúng đến chức năng xác thực.

10:23.630 --> 10:26.573
Để làm được điều đó, hãy đi xuống phần đầu vào

10:28.160 --> 10:31.360
của dự án, và ở đó trongcollectUserInput, tôi muốn

10:31.360 --> 10:34.000
xây dựng đối tượng hợp lệ của mình.

10:34.000 --> 10:36.360
Lưu ý bên lề, bên cạnh một giao diện, tất nhiên chúng

10:36.360 --> 10:38.420
ta cũng có thể tạo một lớp ở đây, sau đó chúng ta

10:38.420 --> 10:40.870
có thể khởi tạo nó bằng từ khóa mới, nhưng tất cả những

10:40.870 --> 10:43.570
điều đó nhằm mục đích thực hành và demo ở đây, tôi muốn chỉ ra

10:43.570 --> 10:46.070
cách thức hoạt động của nó với một giao diện.

10:46.070 --> 10:48.990
Vì vậy, ở đây chúng ta có tiêu đềValidatable,

10:48.990 --> 10:51.900
thuộc loại có thể xác thực.

10:52.850 --> 10:54.970
Và tất nhiên đó là một đối tượng cần

10:54.970 --> 10:56.830
phải có thuộc tính giá trị.

10:56.830 --> 10:58.930
Và đó là tiêu đề đã nhập của chúng tôi.

10:58.930 --> 11:01.020
Nó không cần bất kỳ thuộc tính nào khác

11:01.020 --> 11:03.550
nhưng tôi muốn kiểm tra xem nó có trống không,

11:03.550 --> 11:06.750
vì vậy chúng tôi sẽ đặt yêu cầu thành đúng.

11:06.750 --> 11:08.743
Và sau đó chúng ta có thể sao chép và

11:09.710 --> 11:12.430
lặp lại điều đó cho phần mô tả và cho mọi người.

11:12.430 --> 11:16.270
Và ở đây chúng tôi có mô tả, rất tiếc,

11:16.270 --> 11:19.250
ý tôi là mô tả đã nhập.

11:19.250 --> 11:21.880
Ở đây chúng tôi có những người nhập.

11:21.880 --> 11:24.260
Nói chính xác ở đây tôi muốn có một con số.

11:24.260 --> 11:26.230
Vì vậy, tôi chuyển đổi số này thành một số có ký hiệu dấu cộng.

11:26.230 --> 11:29.020
Tất cả phải được yêu cầu, nhưng sau đó, ở đây,

11:29.020 --> 11:30.810
giả sử mô tả phải có Độ dài tối

11:30.810 --> 11:32.890
thiểu là năm ký tự và đối với người,

11:32.890 --> 11:35.420
tối thiểu phải là một ký tự, để chúng tôi

11:35.420 --> 11:38.823
có ít nhất hai người được chỉ định.

11:39.820 --> 11:42.030
Nhân tiện, cách bạn triển khai điều này tùy thuộc vào bạn.

11:42.030 --> 11:44.020
Tất nhiên, trong logic xác

11:44.020 --> 11:47.200
thực của bạn, bạn cũng có thể kiểm tra bằng

11:47.200 --> 11:50.080
lớn hơn nhỏ hơn bằng nếu muốn.

11:50.080 --> 11:52.030
Tương tự cho chiều dài của khóa học.

11:52.030 --> 11:54.200
Lớn bằng, bé bằng.

11:54.200 --> 11:56.940
Điều đó cũng có thể.

11:56.940 --> 11:58.660
Trên thực tế, tôi sẽ giữ những thay đổi này.

11:58.660 --> 12:00.520
Vì vậy, bây giờ chúng tôi chỉ định tối thiểu

12:00.520 --> 12:01.920
một người và tối đa là năm người.

12:01.920 --> 12:05.253
Bây giờ chúng ta có ba đối tượng có thể xác thực

12:06.100 --> 12:08.500
này và bây giờ ở đây, với hàm xác

12:08.500 --> 12:11.680
thực, chúng ta chuyển titleValidatable,

12:11.680 --> 12:16.440
tới lệnh gọi hàm thứ hai, tôi chuyển mô tảValidatable và tới

12:16.440 --> 12:21.310
lệnh gọi hàm thứ ba, tôi chuyển peopleValidatable.

12:21.310 --> 12:24.460
Và bây giờ, tính hợp lệ sẽ trả về true nếu tất cả

12:24.460 --> 12:26.380
đều hợp lệ và sai nếu không.

12:26.380 --> 12:29.480
Vì vậy, bây giờ tôi muốn kiểm tra xem ít nhất một trong

12:29.480 --> 12:32.420
số chúng có bị lỗi hay không bằng cách kiểm tra

12:32.420 --> 12:36.580
xem tất cả những thứ này có sai không bằng cách thêm dấu chấm than

12:36.580 --> 12:38.970
vào trước nó, để kiểm tra xem cái này sai

12:38.970 --> 12:41.560
hay cái này sai hay cái này sai.

12:41.560 --> 12:42.740
Và nếu ít nhất một trong số chúng

12:42.740 --> 12:44.750
là sai, vì vậy nếu ít nhất một trong các lệnh gọi hàm

12:44.750 --> 12:45.730
xác thực trả về sai, chúng

12:45.730 --> 12:47.760
tôi sẽ đưa nó vào đó và hiển thị cảnh báo.

12:47.760 --> 12:49.860
Ngoài ra, để kiểm tra điều

12:51.930 --> 12:53.610
này, tôi sẽ truy cập

12:53.610 --> 12:54.860
index. html, bởi vì trên đầu

12:54.860 --> 12:56.270
vào cho mọi

12:56.270 --> 12:58.210
người, tôi thực sự cho phép tối

12:58.210 --> 13:00.410
đa là 10 và tối thiểu là 0.

13:00.410 --> 13:01.460
Vì vậy, trong đầu vào, về mặt kỹ thuật, chúng tôi có thể nhập các giá trị không hợp lệ.

13:01.460 --> 13:05.120
Tất nhiên, với mục đích, để chúng tôi có thể kiểm tra logic

13:05.120 --> 13:06.240
của mình.

13:06.240 --> 13:08.090
Và bây giờ chúng ta hãy lưu tất

13:08.090 --> 13:10.200
cả, biên dịch mà không có lỗi.

13:10.200 --> 13:11.750
Bây giờ chúng ta hãy thử xem.

13:11.750 --> 13:13.083
Nếu tôi nhấp vào

13:13.920 --> 13:16.000
thêm dự án, tôi gặp lỗi.

13:16.000 --> 13:17.430
Bây giờ hãy vào kiểm tra ở đây, vẫn gặp lỗi.

13:17.430 --> 13:21.370
Hãy nhập kiểm tra ở đây và năm ở đây

13:21.370 --> 13:24.180
và tôi vẫn gặp lỗi.

13:24.180 --> 13:25.390
Bởi vì mô tả của tôi là quá ngắn.

13:25.390 --> 13:26.870
Nếu tôi nhập thêm một ký tự,

13:26.870 --> 13:28.160
tôi có độ dài tối thiểu và

13:28.160 --> 13:29.500
tôi có thể tạo ký tự này.

13:29.500 --> 13:31.210
Vì vậy, bây giờ hãy nhập, giả

13:31.210 --> 13:32.640
sử, trừ đi một người và

13:32.640 --> 13:34.580
html không hỗ trợ điều này.

13:34.580 --> 13:37.940
Nhưng hãy nhập số 0 hoặc số 6 và chúng

13:37.940 --> 13:39.200
tôi gặp lỗi.

13:39.200 --> 13:42.040
Và chỉ khi tôi nhập thứ gì đó từ một đến năm

13:42.040 --> 13:43.840
thì nó mới hoạt động.

13:43.840 --> 13:46.100
Vì vậy, điều đó dường như hoạt

13:46.100 --> 13:49.260
động như bình thường, và điều đó khá tốt.

13:49.260 --> 13:50.240
Và tất nhiên đó chỉ là

13:50.240 --> 13:51.850
một cách để thực hiện xác thực.

13:51.850 --> 13:53.570
Nhưng một cách thực sự hiện có thể tái sử

13:53.570 --> 13:56.510
dụng khá nhiều, cũng có thể được sử dụng như thế này trong các phần

13:56.510 --> 13:59.170
khác nhau của ứng dụng và tất nhiên, nó tận dụng lợi thế của

13:59.170 --> 14:01.660
bản thảo và cung cấp cho chúng tôi sự hỗ trợ tuyệt vời cũng

14:01.660 --> 14:04.480
như kiểm tra loại để tránh những lỗi không cần thiết.
