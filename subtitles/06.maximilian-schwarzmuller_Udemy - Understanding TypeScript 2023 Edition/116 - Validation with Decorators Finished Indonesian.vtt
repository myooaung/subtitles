WEBVTT

00:02.320 --> 00:05.210
Instruktur: Untuk mengimplementasikan ini, pertama-tama

00:05.210 --> 00:08.217
saya akan membuat antarmuka ValidatorConfig, di mana saya ingin

00:09.550 --> 00:12.680
mengkonfigurasi penyimpanan yang ingin saya gunakan.

00:12.680 --> 00:15.130
Gagasan saya di sana adalah memiliki beberapa properti, dan

00:15.130 --> 00:17.653
karenanya saya menggunakan notasi tipe indeks di sini.

00:19.720 --> 00:21.450
Yang pada dasarnya adalah string,

00:21.450 --> 00:23.440
di mana nilainya adalah objek lain.

00:23.440 --> 00:26.380
Karena ini di sini pada dasarnya adalah nama kelas yang

00:26.380 --> 00:29.570
ingin kita daftarkan beberapa properti yang divalidasi.

00:29.570 --> 00:31.700
Dan kemudian dalam objek yang kita simpan

00:31.700 --> 00:34.580
di sana, kita memiliki properti konkret dari kelas yang

00:34.580 --> 00:37.010
memiliki validator yang melekat padanya.

00:37.010 --> 00:40.610
Jadi di sini kita memiliki properti yang dapat divalidasi, jika Anda

00:40.610 --> 00:42.240
ingin menyebutnya seperti ini,

00:42.240 --> 00:44.660
yang juga akan menjadi kunci string.

00:44.660 --> 00:47.350
Dan kemudian nilai untuk itu harus berupa array

00:47.350 --> 00:50.010
string di mana pada dasarnya kita memiliki sesuatu

00:52.420 --> 00:55.490
seperti required, positive, dan sebagainya.

00:55.490 --> 00:57.460
Jadi, sesuatu seperti itu bisa ditambahkan

00:57.460 --> 00:59.323
di sini sebagai daftar validator.

01:00.300 --> 01:05.300
Sekarang kita dapat membuat konfigurasi registeredValidators kita di sini, yang harus

01:05.790 --> 01:07.950
bertipe ValidatorConfig yang awalnya

01:07.950 --> 01:09.640
adalah objek kosong.

01:09.640 --> 01:11.500
Karena pada awalnya ketika aplikasi

01:11.500 --> 01:13.920
dimulai ketika library pihak ketiga kita dimuat,

01:13.920 --> 01:16.293
belum ada validator yang terdaftar.

01:17.640 --> 01:19.920
Nah, dan kemudian di sini, di direktur

01:19.920 --> 01:23.490
kami, kami ingin menambahkan sesuatu ke dalam daftar itu.

01:23.490 --> 01:28.020
Sekarang perlu diingat bahwa fungsi dekorator properti mendapatkan

01:28.020 --> 01:31.010
dua argumen: target, yang merupakan prototipe

01:31.010 --> 01:33.910
objek tempat properti berada, atau fungsi

01:33.910 --> 01:37.340
konstruktor jika itu adalah properti statis, dan

01:37.340 --> 01:39.300
nama properti.

01:39.300 --> 01:40.710
Ini adalah dua argumen yang kita

01:40.710 --> 01:44.370
dapatkan di sini, kita tidak mendapatkan deskriptor untuk properti.

01:44.370 --> 01:46.760
Sekarang kita bisa pergi ke validator terdaftar kita dan

01:46.760 --> 01:51.463
di sana saya ingin menambahkan entri baru untuk target. konstruktor.

01:52.730 --> 01:56.070
Prototipe instance yang sedang kita kerjakan akan memiliki

01:56.070 --> 01:58.430
kunci konstruktor yang menunjuk pada fungsi

01:58.430 --> 02:02.610
konstruktor yang digunakan untuk membuat objek kita.

02:02.610 --> 02:04.690
Dan itu, oleh karena itu, pada dasarnya akan menjadi

02:04.690 --> 02:06.120
sesuatu seperti kursus di sini,

02:06.120 --> 02:08.460
sehingga nama fungsi konstruktor itu pada akhirnya

02:08.460 --> 02:10.560
dapat diambil dari konstruktor itu.

02:10.560 --> 02:11.900
Karena konstruktor adalah fungsi,

02:11.900 --> 02:13.400
kita dapat menggunakan properti

02:13.400 --> 02:15.900
nama, yang ada pada fungsi apa pun dalam JavaScript untuk

02:15.900 --> 02:18.310
mendapatkan nama fungsi, dan ini kemudian akan menjadi

02:18.310 --> 02:20.620
nama kursus di sini misalnya.

02:20.620 --> 02:23.390
Jadi sekarang kita mendaftarkan nama kelas sebagai kunci

02:23.390 --> 02:25.030
dalam validator yang terdaftar.

02:25.030 --> 02:28.130
Dan nilai untuk itu kemudian harus menjadi objek lain.

02:28.130 --> 02:30.630
Jadi saya menetapkan ini sama dengan objek lain di sini.

02:30.630 --> 02:32.390
Dan dalam objek itu saya juga memiliki

02:32.390 --> 02:34.640
properti yang ditetapkan secara dinamis di

02:34.640 --> 02:37.400
mana saya menggunakan propName saya, jadi properti yang

02:37.400 --> 02:40.190
ingin saya tambahkan validator sebagai kunci.

02:40.190 --> 02:42.310
Sekarang nilai di sini adalah array string,

02:42.310 --> 02:45.530
dan di sini saya akan menambahkan required sebagai string.

02:45.530 --> 02:47.920
Sekarang tentu saja ini adalah validator yang sangat naif.

02:47.920 --> 02:50.000
Jika kita sudah memiliki validator lain yang sudah terdaftar

02:50.000 --> 02:52.830
untuk properti ini, sekarang saya akan menimpanya di sini.

02:52.830 --> 02:54.900
Jadi akan lebih baik untuk pertama-tama mengambil

02:54.900 --> 02:58.360
validator yang ada dan kemudian menyalinnya ke dalam larik ini dan hanya

02:58.360 --> 03:01.320
menambahkan yang diperlukan ke larik yang ada.

03:01.320 --> 03:02.870
Lagi-lagi, untuk menghemat waktu di sini,

03:02.870 --> 03:04.740
dan hanya untuk menunjukkan gagasan umumnya, saya

03:04.740 --> 03:06.873
akan melakukan pendekatan yang lebih naif di sini.

03:07.980 --> 03:11.180
Dengan itu kita sudah mendapatkan anotasi yang dibutuhkan,

03:11.180 --> 03:14.690
sekarang mari kita kerjakan anotasi bilangan positif.

03:14.690 --> 03:16.730
Dan tentu saja, pada dasarnya sama saja.

03:16.730 --> 03:21.410
Saya menyalin kode itu tetapi saya mengatur ini di sini menjadi positif atau pengidentifikasi

03:21.410 --> 03:23.600
apa pun yang ingin Anda gunakan dan tentu saja

03:23.600 --> 03:25.010
kita harus memastikan bahwa

03:25.010 --> 03:27.650
kita menerima argumen yang tepat.

03:27.650 --> 03:30.990
Jadi dengan itu bersama dengan apa yang kita tambahkan sejauh

03:30.990 --> 03:34.420
ini, kita mendaftarkan properti ini dan validatornya dalam

03:34.420 --> 03:38.640
konfigurasi global kita ketika kelas ini didefinisikan.

03:38.640 --> 03:41.460
Sekarang kita hanya perlu mengerjakan fungsi validasi.

03:41.460 --> 03:43.400
Fungsi validasi harus melalui semua validator

03:43.400 --> 03:46.240
yang terdaftar, dan kemudian pada dasarnya menjalankan

03:46.240 --> 03:50.340
logika yang berbeda berdasarkan validator mana yang ditemukannya.

03:50.340 --> 03:54.857
Jadi di sini pertama-tama saya ingin mengambil konfigurasi untuk

03:54.857 --> 03:57.600
objek konkret yang kita hadapi.

03:57.600 --> 04:00.390
Untuk itu kita perlu mencari tahu fungsi konstruktor

04:00.390 --> 04:04.277
mana yang menjadi dasar objek tersebut dan kemudian mendapatkan konfigurasi

04:04.277 --> 04:07.040
validasi atau pemetaan validator properti di sini yang

04:07.040 --> 04:09.070
kita atur untuk objek tersebut.

04:09.070 --> 04:11.960
Jadi di sini saya akan menamai objek ini validator,

04:11.960 --> 04:14.520
atau objValidatorConfig mungkin.

04:14.520 --> 04:17.110
Dan kita menjangkau validator yang terdaftar di sini dan mengakses

04:17.110 --> 04:22.110
properti yang seharusnya obj. konstruktor. namanya, logika yang sama seperti

04:23.900 --> 04:27.060
sebelumnya, kita mengakses properti konstruktor yang ada pada

04:27.060 --> 04:28.980
prototipe objek dan oleh karena itu kita

04:28.980 --> 04:31.720
dapat mengaksesnya langsung pada objek berkat cara kerja

04:31.720 --> 04:33.340
JavaScript dan berkat rantai prototipe,

04:33.340 --> 04:35.050
kita kemudian akan menjangkau prototipe

04:35.050 --> 04:36.710
jika kita tidak dapat menemukan properti

04:36.710 --> 04:38.920
konstruktor pada objek itu sendiri, dan itu

04:38.920 --> 04:41.580
akan berfungsi.

04:41.580 --> 04:43.840
Dan oleh karena itu sekarang kita mendapatkan nama

04:43.840 --> 04:46.970
konstruktornya dan kita mengetahui bahwa, misalnya, Course di sini

04:46.970 --> 04:49.050
didasarkan pada kelas Course ini.

04:49.050 --> 04:51.290
Jadi kita mencari konfigurasi validator yang kita

04:51.290 --> 04:52.800
miliki untuk kelas Course.

04:52.800 --> 04:55.910
Jadi sekarang kita melihat objek ini, pada dasarnya.

04:55.910 --> 04:58.207
Ini sekarang ada di objValidatorConfig.

04:59.310 --> 05:01.540
Sekarang tentu saja kita mungkin tidak menemukan

05:01.540 --> 05:03.270
ini jika kita mencoba memvalidasi objek

05:03.270 --> 05:05.110
kita yang tidak ada yang didaftarkan.

05:05.110 --> 05:08.270
Jadi jika kita tidak memiliki konfigurasi validator, jika

05:08.270 --> 05:11.640
kita tidak menemukan apa pun di sana, saya ingin mengembalikan

05:11.640 --> 05:14.010
true karena ini pasti valid, bukan?

05:14.010 --> 05:15.330
Tidak ada yang perlu

05:15.330 --> 05:18.350
divalidasi, jadi objeknya tentu saja valid.

05:18.350 --> 05:20.900
Jika tidak, jika kita menemukannya, saya ingin

05:20.900 --> 05:24.910
ia mengulang melalui objek dalam ini di sini dengan loop for in.

05:24.910 --> 05:27.580
Jadi dengan itu saya mengulang-ulang properti

05:27.580 --> 05:29.560
saya yang saya daftarkan validatornya,

05:29.560 --> 05:33.007
dengan const prop di objValidatorConfig.

05:34.380 --> 05:36.950
Ini memberi saya akses ke semua nama properti yang

05:36.950 --> 05:39.630
kemudian kita mungkin memiliki validator.

05:39.630 --> 05:41.180
Jadi sekarang tentu saja saya perlu memeriksa

05:41.180 --> 05:43.970
semua validator yang mungkin kita miliki untuk sebuah properti.

05:43.970 --> 05:45.230
Ini harus selalu berupa larik bahkan

05:45.230 --> 05:47.680
jika kita hanya memiliki satu validator yang ditambahkan.

05:47.680 --> 05:49.530
Jadi kita bisa menggunakan for of loop

05:49.530 --> 05:53.040
di sini sekarang dan mendapatkan validator konkret, yang kita miliki,

05:53.040 --> 05:56.930
untuk objValidatorConfig untuk properti yang diberikan ini.

05:56.930 --> 06:00.560
Jadi sekarang kita mendapatkan hal-hal seperti positif atau required, yang

06:00.560 --> 06:02.963
kemudian disimpan dalam konstanta validator.

06:04.080 --> 06:06.110
Dan kemudian kita bisa memiliki pernyataan switch di

06:06.110 --> 06:08.030
sini, atau tentu saja memanggil fungsi eksternal berdasarkan

06:08.030 --> 06:09.810
validator mana yang kita temukan.

06:09.810 --> 06:12.130
Tapi di sini saya akan menggunakan pernyataan sakelar

06:12.130 --> 06:16.620
bawaan, beralih pada validator dan kemudian pada dasarnya memiliki kasus yang berbeda.

06:16.620 --> 06:19.683
Misalnya, kasus yang diperlukan di sini.

06:20.800 --> 06:22.163
Ups, seperti ini.

06:23.470 --> 06:27.900
Di sini, saya ingin mengembalikan true jika properti kita, yang

06:27.900 --> 06:28.950
kita lihat...

06:28.950 --> 06:33.260
Jadi properti ini pada objek ini memiliki nilai yang tidak kosong.

06:33.260 --> 06:38.260
Jadi saya akan mengembalikan true jika obj prop adalah benar.

06:39.170 --> 06:42.010
Dan untuk mengubah ini menjadi nilai benar atau salah yang nyata,

06:42.010 --> 06:44.420
kita dapat menggunakan operator double bang.

06:44.420 --> 06:46.840
Sekarang saya mendengar jenis keluhan bahwa ia tidak tahu

06:46.840 --> 06:49.440
apakah objek memiliki properti ini, jadi di sini kita harus benar-benar

06:49.440 --> 06:51.220
mengubah ini menjadi apa saja untuk mendapatkan

06:51.220 --> 06:53.560
fleksibilitas ekstra di sini.

06:53.560 --> 06:56.150
Tentu saja Anda juga bisa mengerjakan jenis-jenisnya di sini.

06:56.150 --> 07:00.480
Dan misalnya, ubah juga pengidentifikasi Anda di sini menjadi tipe yang didefinisikan

07:00.480 --> 07:03.430
dengan jelas di mana Enum Anda bekerja dengan dan mungkin juga

07:03.430 --> 07:05.490
meningkatkan pengetikan di sini.

07:05.490 --> 07:07.420
Meskipun, sejujurnya, karena saya ingin ini

07:07.420 --> 07:09.960
bekerja dengan objek apa pun, sulit untuk meningkatkan ini

07:09.960 --> 07:11.810
dengan cara yang disukai TypeScript.

07:11.810 --> 07:13.330
Kita bisa bekerja dengan

07:13.330 --> 07:16.800
tipe generik, tetapi sekali lagi kita perlu membatasi diri

07:16.800 --> 07:19.740
kita sendiri untuk objek mana yang harus diperluas

07:19.740 --> 07:22.110
dan diterima oleh tipe generik.

07:22.110 --> 07:25.850
Jadi, apa pun mungkin menjadi pilihan terbaik kita di sini untuk menjadi

07:25.850 --> 07:27.880
sangat fleksibel dan menerima banyak

07:27.880 --> 07:30.640
objek berbeda dalam fungsi validasi ini.

07:30.640 --> 07:32.270
Sekarang kembali ke segmen switch,

07:32.270 --> 07:34.750
kasus yang diperlukan adalah satu kemungkinan kasus,

07:34.750 --> 07:37.650
kita juga punya kasus positif yang ingin kita tangani.

07:37.650 --> 07:39.280
Dan di sana saya ingin mengembalikan

07:39.280 --> 07:43.770
true jika properti yang kita lihat lebih besar dari nol.

07:43.770 --> 07:47.260
Jadi jika object prop lebih besar dari nol, maka ini mengembalikan

07:47.260 --> 07:50.463
true, jika tidak, ini akan mengembalikan false.

07:52.890 --> 07:55.730
Sekarang jika kita tidak berhasil masuk ke blok for ini

07:55.730 --> 07:57.970
atau jika kita entah bagaimana memiliki loop

07:57.970 --> 07:59.310
yang tidak mengulang apa pun

07:59.310 --> 08:01.500
karena kita belum mendaftarkan validator

08:01.500 --> 08:04.130
apa pun, kita melewatkan larik kosong di sini atau semacamnya,

08:04.130 --> 08:06.350
jadi jika Anda berhasil melewati loop for ini,

08:06.350 --> 08:10.280
saya akan mengembalikan true sebagai default juga.

08:10.280 --> 08:12.800
Dan sekarang kita mengembalikan sesuatu dalam semua keadaan

08:12.800 --> 08:14.503
dan kita dapat menggunakan validasi.

08:15.450 --> 08:19.253
Dengan itu mari kita lihat apakah berhasil, jika sekarang kita simpan ini, dan kita muat

08:23.610 --> 08:26.330
ulang aplikasi kita di sini dan saya mencoba mengirimkan ini, kita

08:26.330 --> 08:29.400
mendapatkan kesalahan, masukan tidak valid, silakan coba lagi.

08:29.400 --> 08:30.780
Jika saya memasukkan beberapa

08:30.780 --> 08:34.793
teks di sini: JavaScript Panduan Lengkap, saya masih mendapatkan ini

08:35.940 --> 08:38.100
karena nomor saya salah.

08:38.100 --> 08:40.440
Jika saya masukkan minus satu di sini kita juga mendapatkan

08:40.440 --> 08:42.020
ini karena itu tidak positif.

08:42.020 --> 08:45.020
Namun, jika saya memasukkan angka positif, maka akan berfungsi.

08:45.020 --> 08:48.230
Jika saya memiliki angka positif tetapi bidang pertama kosong,

08:48.230 --> 08:49.860
maka ini juga berfungsi, jadi itu

08:49.860 --> 08:52.190
adalah sesuatu yang harus kita kerjakan.

08:52.190 --> 08:54.600
Jadi, mari kita cari tahu apa masalahnya.

08:54.600 --> 08:57.380
Dan untuk mengetahuinya, saya sebenarnya akan menambahkan

08:57.380 --> 08:59.830
log konsol kecil di sini dan mencatat properti yang

08:59.830 --> 09:00.720
kita lihat.

09:00.720 --> 09:02.340
Tentu saja kita juga bisa menggunakan break point

09:02.340 --> 09:03.513
dan alat bantu pengembang.

09:04.820 --> 09:07.410
Sekarang jika saya klik save di sini, Anda lihat hal pertama

09:07.410 --> 09:09.250
yang divalidasi di sini adalah harga dan

09:09.250 --> 09:10.623
setelah itu kita berhenti.

09:11.530 --> 09:15.100
Jadi, harga adalah properti pertama yang divalidasi.

09:15.100 --> 09:16.980
Dan itulah hal yang menarik di sini,

09:16.980 --> 09:20.090
harga sebenarnya hanya properti yang penting di sini karena

09:20.090 --> 09:22.230
kita kembali dalam validasi.

09:22.230 --> 09:25.840
Itu berarti saat pertama kali kita menemukan validator yang mengembalikan

09:25.840 --> 09:29.050
true atau false, kita langsung mengembalikannya dan kita tidak

09:29.050 --> 09:31.480
peduli dengan validator lainnya.

09:31.480 --> 09:33.320
Sekarang dalam kasus yang salah ini tidak

09:33.320 --> 09:35.360
apa-apa karena jika satu elemen salah, jika

09:35.360 --> 09:37.450
satu properti salah, tidak valid, maka kita

09:37.450 --> 09:40.140
baik-baik saja bahkan tidak melihat yang lain.

09:40.140 --> 09:42.590
Tetapi untuk kasus yang sebenarnya, ini adalah masalah.

09:42.590 --> 09:44.970
Jika kita kembali benar saat pertama

09:44.970 --> 09:49.410
kali satu properti memenuhi harapan kita, kita memiliki masalah.

09:49.410 --> 09:51.540
Jadi kita harus menyempurnakan ini dengan

09:51.540 --> 09:55.130
memiliki properti isValid di sini, yang pada awalnya adalah benar.

09:55.130 --> 09:56.780
Adalah variabel yang valid, maksud saya.

09:56.780 --> 10:01.780
Dan kemudian di sini kita set isValid sama dengan isValid

10:03.857 --> 10:08.857
dan ini di sini, dan sama di sini, set ini sama dengan ini.

10:09.570 --> 10:11.290
Sehingga kita tidak langsung kembali,

10:11.290 --> 10:14.750
sebagai gantinya kita hanya memperbarui isValid dan kita break setelahnya

10:14.750 --> 10:16.700
agar tidak jatuh.

10:16.700 --> 10:19.200
Hasil dari itu adalah bahwa pada akhirnya setelah

10:19.200 --> 10:22.710
semua loop ini isValid masih benar, tetapi begitu salah satu

10:22.710 --> 10:25.710
pemeriksaan di sini salah, berkat cara kerja JavaScript,

10:25.710 --> 10:27.530
nilai isValid secara keseluruhan

10:27.530 --> 10:29.670
akan salah karena benar dikombinasikan

10:29.670 --> 10:33.000
dengan salah akan kembali salah.

10:33.000 --> 10:36.020
Dan kemudian di sana kita harus mengembalikan isValid.

10:36.020 --> 10:39.330
Jadi sekarang kita memastikan bahwa semua properti diperiksa dan

10:39.330 --> 10:42.433
bukan hanya properti pertama yang dilihat JavaScript.

10:43.320 --> 10:45.460
Namun ini bukan satu-satunya masalah kita, kita

10:45.460 --> 10:47.750
juga memiliki masalah di sini ketika kita melihat

10:47.750 --> 10:50.480
bagaimana kita mendaftarkan logika validator kita.

10:50.480 --> 10:53.720
Saya selalu menimpa validator yang terdaftar

10:53.720 --> 10:57.130
untuk nama kelas tertentu dengan objek baru.

10:57.130 --> 11:00.050
Sebaliknya kita harus menambahkan validator yang ada di sini sehingga

11:00.050 --> 11:01.630
kita tidak melakukan itu.

11:01.630 --> 11:04.140
Misalnya, kita memiliki operator spread seperti itu

11:04.140 --> 11:08.130
untuk mengambil pasangan nilai kunci yang ada untuk nama kelas itu pada validator

11:08.130 --> 11:10.870
yang terdaftar dan menambahkannya terlebih dahulu sebelum

11:10.870 --> 11:14.413
kita menambahkan yang kita miliki, juga di bawah sana tentunya.

11:16.890 --> 11:18.733
Dan sekarang dengan itu, jika kita menyimpan

11:19.650 --> 11:21.980
ini, dan kita kembali ke aplikasi kita di sini.

11:21.980 --> 11:24.150
Jika saya memiliki keduanya kosong, kita gagal.

11:24.150 --> 11:26.280
Jika kita memasukkan harga yang valid tetapi

11:26.280 --> 11:28.490
judulnya tidak valid, kita gagal.

11:28.490 --> 11:31.510
Jika keduanya valid, kita berhasil.

11:31.510 --> 11:35.570
Jika kita memiliki judul yang valid tetapi tidak memiliki harga, kita gagal.

11:35.570 --> 11:37.230
Juga dengan harga negatif.

11:37.230 --> 11:39.170
Dan oleh karena itu, ini sekarang terlihat bagus

11:39.170 --> 11:42.280
bagi saya dan ini sekarang adalah implementasi naif pertama kami tentang

11:42.280 --> 11:44.500
bagaimana validator seperti itu dapat bekerja dengan

11:44.500 --> 11:46.670
bantuan dekorator TypeScript.

11:46.670 --> 11:49.150
Dan perlu diingat bahwa semua yang ada di sini,

11:49.150 --> 11:52.310
semua dekorator, fungsi validasi dan registri, akan disembunyikan

11:52.310 --> 11:53.590
dari Anda.

11:53.590 --> 11:55.820
Itu bisa jadi merupakan bagian dari perpustakaan pihak ketiga

11:55.820 --> 11:56.780
yang sedang Anda kerjakan,

11:56.780 --> 11:59.250
tentu saja dengan cara yang lebih rumit daripada yang mungkin Anda

11:59.250 --> 12:01.300
bagikan dengan pengguna akhir Anda.

12:01.300 --> 12:04.160
Dan Anda, sebagai pengguna akhir, hanya akan mengimpor hal-hal

12:04.160 --> 12:06.800
ini, menambahkan dekorator ini, dan memanggil validasi,

12:06.800 --> 12:08.840
dan Anda akan memiliki cara yang sangat mudah

12:08.840 --> 12:11.763
untuk menambahkan validasi ke kelas Anda.
