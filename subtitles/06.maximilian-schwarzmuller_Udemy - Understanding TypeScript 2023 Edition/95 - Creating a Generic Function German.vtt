WEBVTT

00:02.190 --> 00:04.480
Um also mit unseren eigenen Generika zu beginnen.

00:04.480 --> 00:06.820
Nachfolgend der auskommentierte Code.

00:06.820 --> 00:09.210
Ich werde mit einer generischen Funktion beginnen.

00:09.210 --> 00:11.430
Sie können generische Klassen und Funktionen

00:11.430 --> 00:15.350
erstellen. Ich werde beides zeigen und hier mit einer Funktion beginnen.

00:15.350 --> 00:17.490
Nehmen wir an, wir wollen eine Funktion

00:17.490 --> 00:22.490
haben, die im Grunde zwei Objekte zusammenführt und ein neues Objekt zurückgibt.

00:23.660 --> 00:25.380
Hier könnten wir es also "Verschmelzung" nennen.

00:25.380 --> 00:28.803
Und wir wollen Objekt A und Objekt B als Eingabe erhalten.

00:30.010 --> 00:33.990
Nun könnten wir diese Funktion natürlich auch auf eine andere Weise schreiben.

00:33.990 --> 00:36.660
Wir könnten sagen, dies ist vom Typ Objekt

00:36.660 --> 00:39.033
und dies ist vom Typ Objekt.

00:39.960 --> 00:41.760
Diese Funktion gibt dann

00:41.760 --> 00:45.200
das Ergebnis der Objektzuweisung zurück.

00:45.200 --> 00:48.130
Wo ich Objekt A und Objekt B bekomme.

00:48.130 --> 00:50.230
Also natürlich, da wir dieses Objekt zuweisen

00:50.230 --> 00:53.000
Methode bereits in normalen Javascript gebaut.

00:53.000 --> 00:55.820
Wir könnten darüber streiten, ob wir wirklich eine Zusammenführungsfunktion brauchen,

00:55.820 --> 00:58.140
aber natürlich könnten Sie hier zusätzliche Arbeit leisten.

00:58.140 --> 01:00.480
Sie könnten dies mit zusätzlichen Informationen

01:00.480 --> 01:01.833
und Optionen anreichern, aber

01:01.833 --> 01:04.730
letztendlich ist dies nur eine Demo, nur ein Beispiel.

01:04.730 --> 01:07.510
Dies wäre also gültig, wir könnten merge hier

01:07.510 --> 01:11.830
aufrufen und das Ergebnis auf der Konsole protokollieren, etwa so.

01:11.830 --> 01:15.130
Dann geben wir ein Objekt mit einem Namensschlüssel und ein zweites Objekt

01:15.130 --> 01:17.570
mit einem Alterswert ein, und wenn wir das ausführen

01:17.570 --> 01:20.010
und speichern, wird das Ergebnis gespeichert.

01:20.010 --> 01:22.780
Hier im Browser erhalten wir tatsächlich diese Ausgabe.

01:22.780 --> 01:24.280
Wir erhalten also dieses Merge-Objekt.

01:24.280 --> 01:27.050
Das funktioniert, aber das Problem,

01:27.050 --> 01:29.660
das wir damit haben, ist, wenn wir

01:31.660 --> 01:33.300
versuchen, diesen Zusammenführungsnamen

01:33.300 --> 01:38.097
max und Alter 30 zu speichern.

01:39.620 --> 01:44.620
Wenn wir versuchen, dies hier zu speichern, kann ich weder auf den Namen noch auf das

01:45.770 --> 01:48.730
Alter der Ergebnisse dieses zusammengeführten

01:48.730 --> 01:50.020
Objekts zugreifen.

01:50.020 --> 01:52.360
Auch wenn wir wissen, dass es beides geben wird.

01:52.360 --> 01:54.830
Denn typescript kennt das nicht.

01:54.830 --> 01:57.100
Typescript kann das nicht wissen.

01:57.100 --> 01:59.310
Denn wir sagen nur, dass Sie ein Objekt erhalten, und

01:59.310 --> 02:02.370
am Ende haben wir zuerst eingegeben, dass wir ein Objekt zurückgeben.

02:02.370 --> 02:04.790
Das ist richtig, aber es enthält nicht alle

02:04.790 --> 02:07.810
Informationen, die wir hier brauchen könnten.

02:07.810 --> 02:09.970
Natürlich können wir jederzeit ein Type-Casting durchführen,

02:09.970 --> 02:12.080
d. h. wir können typescript mitteilen, dass wir ein

02:12.080 --> 02:14.220
Objekt mit einem Namensschlüssel und einem Altersschlüssel

02:14.220 --> 02:15.960
zurückbekommen.

02:15.960 --> 02:19.020
Aber das ist wirklich umständlich, wenn wir das tun müssen.

02:19.020 --> 02:21.420
Hier können uns die Generika also helfen.

02:21.420 --> 02:23.750
Wir verwandeln dies in eine allgemeine Funktion, indem wir

02:23.750 --> 02:26.470
diese spitzen Klammern nach dem Funktionsnamen hinzufügen.

02:26.470 --> 02:29.740
Und dann definieren wir Q-Bezeichner.

02:29.740 --> 02:33.190
Normalerweise beginnt man mit T, was für Typ steht.

02:33.190 --> 02:35.600
Aber Sie können hier jeden beliebigen Bezeichner verwenden,

02:35.600 --> 02:37.730
es muss nicht unbedingt ein einzelnes Zeichen sein,

02:37.730 --> 02:39.860
aber die Konvention ist, ein einzelnes Zeichen zu verwenden,

02:39.860 --> 02:42.250
und wenn Sie nur einen generischen Typ haben, nennen Sie diesen

02:42.250 --> 02:43.690
normalerweise T.

02:43.690 --> 02:46.640
Und dann sagen Sie, nun, dieser generische Typ hier, der ist jetzt

02:46.640 --> 02:48.510
innerhalb dieser Funktion verfügbar.

02:48.510 --> 02:51.453
Wir könnten also sagen, dass das, was wir hier bekommen, vom Typ T ist.

02:53.090 --> 02:55.740
Sieht seltsam aus, aber wir werden es schon schaffen, keine Sorge.

02:55.740 --> 02:57.280
Hier haben wir nun zwei Argumente, von

02:57.280 --> 02:59.570
denen wir nicht genau wissen, wie sie aussehen werden.

02:59.570 --> 03:02.450
Daher werde ich hier einen zweiten generischen Typ akzeptieren.

03:02.450 --> 03:04.340
Wir fügen einfach ein Komma in die eckigen

03:04.340 --> 03:07.400
Klammern ein, und dann geht es im Alphabet einfach weiter.

03:07.400 --> 03:10.490
Der zweite generische Parameter oder Typ,

03:10.490 --> 03:15.490
den Sie in einer Funktion verwenden, heißt daher normalerweise U.

03:15.630 --> 03:18.560
Wir könnten also sagen, dass dies vom Typ U ist.

03:18.560 --> 03:22.100
Und was bringt uns das jetzt?

03:22.100 --> 03:25.450
Nun, eigentlich eine ganze Menge, wie Sie hier sehen können,

03:25.450 --> 03:28.620
wenn Sie mit dem Mauszeiger über "merge" fahren, folgert

03:28.620 --> 03:33.230
typescript, dass diese Funktion den Schnittpunkt von T und U zurückgibt.

03:33.230 --> 03:36.800
Wir könnten dies natürlich auch explizit so festlegen, aber das ist

03:36.800 --> 03:38.040
gar nicht nötig, denn object

03:38.040 --> 03:42.010
assign gibt eine Schnittmenge zurück, und da wir ein Ergebnis von object assign

03:42.010 --> 03:44.150
zurückgegeben haben, versteht typescript

03:44.150 --> 03:45.740
automatisch, dass diese Funktion

03:45.740 --> 03:48.390
die Schnittmenge zurückgibt.

03:48.390 --> 03:50.320
Inwiefern ist dies also hilfreich?

03:50.320 --> 03:52.510
Wenn wir nun mit dem Mauszeiger über "merged

03:52.510 --> 03:54.260
object" fahren, sehen wir, dass typescript

03:54.260 --> 03:56.450
jetzt versteht, dass das, was wir in "merged

03:56.450 --> 03:59.230
object" speichern, die Schnittmenge dieser beiden Objekttypen

03:59.230 --> 04:01.690
ist, weil es sieht, dass wir diese Objekte übergeben,

04:01.690 --> 04:06.100
die zu diesen Objekttypen gehören, die es herleitet.

04:06.100 --> 04:08.840
Namenszeichenfolge und Altersangabe.

04:08.840 --> 04:11.590
Und dass unsere Funktion die Schnittmenge zurückgibt.

04:11.590 --> 04:13.630
Warum kann sie das jetzt ableiten und

04:13.630 --> 04:16.313
nicht mit dem Objekt, das wir vorher hatten?

04:17.220 --> 04:19.560
Denn das Objekt ist ein sehr unspezifischer Typ.

04:19.560 --> 04:22.490
Wir sagen "any object" und ja, daher kann typescript

04:22.490 --> 04:24.530
ableiten, dass wir die Schnittmenge

04:24.530 --> 04:26.600
von object und object zurückgeben.

04:26.600 --> 04:29.570
Die Schnittmenge zweier unbekannter Objekte ist jedoch

04:29.570 --> 04:32.270
nur ein neues unbekanntes Objekt, das typescript

04:32.270 --> 04:35.420
keine zusätzlichen Typinformationen liefert.

04:35.420 --> 04:38.170
Mit generischen Typen teilen wir typescript

04:38.170 --> 04:43.170
mit, dass diese beiden Parameter von unterschiedlichem Typ sein können und oft auch

04:43.282 --> 04:47.100
sein werden, und daher ist typescript in der Lage zu verstehen,

04:47.100 --> 04:49.690
dass wir nicht nur mit irgendeinem beliebigen

04:49.690 --> 04:53.150
Objekttyp arbeiten, sondern dass wir hier Daten unterschiedlichen

04:53.150 --> 04:55.250
Typs erhalten.

04:55.250 --> 04:56.940
Und dass diese Funktion insgesamt

04:56.940 --> 04:59.770
die Schnittmenge dieser Daten zurückgibt.

04:59.770 --> 05:01.773
Daher ist typescript in der Lage, zu verstehen,

05:01.773 --> 05:04.390
dass das, was wir hier im zusammengeführten Objekt speichern,

05:04.390 --> 05:07.910
eine solche Überschneidung der Daten dieser beiden Eingänge ist.

05:07.910 --> 05:09.530
Denn jetzt haben wir es nicht mehr

05:09.530 --> 05:14.423
nur mit irgendwelchen unbekannten Objekten zu tun, sondern mit ganz bestimmten Typen.

05:15.330 --> 05:20.150
Und daher jetzt, wenn ich Konsole Log zusammengeführt Objekt Alter hier funktioniert

05:20.150 --> 05:22.980
dies ohne Fehler, wie Sie sagen können.

05:22.980 --> 05:26.770
Hier drucke ich 30, weil es sich um generische Typen handelt.

05:26.770 --> 05:29.040
Wir geben typescript die zusätzliche Information,

05:29.040 --> 05:31.950
dass wir nicht genau wissen, die Typen werden sicher sein,

05:31.950 --> 05:34.780
es wird Objekte geben, die wir hier sagen können.

05:34.780 --> 05:36.550
Aber wir wissen nicht, ob es sich um ein Objekt mit einem Namensschlüssel,

05:36.550 --> 05:38.640
mit einem Altersschlüssel oder mit einem Hobbies-Schlüssel handelt.

05:38.640 --> 05:41.130
Wir wissen es nicht und es ist uns auch egal,

05:41.130 --> 05:43.360
wir wollen nicht festlegen, dass das

05:43.360 --> 05:46.050
Objekt von diesem Typ sein muss.

05:46.050 --> 05:47.490
Denn wenn ich da plötzlich

05:47.490 --> 05:50.520
Hobbys hinzufüge, dann haben wir ein Problem.

05:50.520 --> 05:52.540
Ich möchte also nicht so restriktiv sein.

05:52.540 --> 05:54.480
Ich möchte nur sagen, dass es sich um irgendeinen

05:54.480 --> 05:56.940
Typ handelt, der mir egal ist, aber es ist höchstwahrscheinlich

05:56.940 --> 05:58.590
ein anderer Typ als dieser hier.

05:58.590 --> 06:00.860
Und wenn es dasselbe wäre, wäre das auch in Ordnung.

06:00.860 --> 06:03.030
Aber typescript versteht, dass wir hier spezifische

06:03.030 --> 06:06.530
Typen für diese beiden Parameter haben und dass wir die Schnittmenge

06:06.530 --> 06:08.800
dieser Parameter zurückgeben.

06:08.800 --> 06:12.660
Anstatt ein beliebiges, unspezifisches Objekt zu verwenden.

06:12.660 --> 06:14.770
Der Clou dabei ist nicht nur, dass wir typescript

06:14.770 --> 06:16.210
mitteilen, dass wir hier zwei

06:16.210 --> 06:18.410
verschiedene Typen haben.

06:18.410 --> 06:20.740
Aber diese Typen sind nicht in Stein gemeißelt, wenn

06:20.740 --> 06:22.870
wir diese Funktion definieren, sondern sie werden

06:22.870 --> 06:25.810
dynamisch gesetzt, wenn wir die Funktion aufrufen.

06:25.810 --> 06:27.430
Hier rufen wir also die Funktion auf

06:27.430 --> 06:30.560
und typescript leitet die Typen für die beiden Argumente her.

06:30.560 --> 06:33.890
Für T wird im Grunde ein Objekttyp mit einem Objekt mit einer Eigenschaft name,

06:33.890 --> 06:36.677
die eine Zeichenkette enthält, und einer Eigenschaft hobbies,

06:36.677 --> 06:39.600
die ein Array von Zeichenketten enthält, ausgefüllt.

06:39.600 --> 06:43.290
Und für U wird ein Typ vom Typ Objekt mit der Eigenschaft

06:43.290 --> 06:47.990
Alter ausgefüllt, wobei Alter vom Typ Zahl ist.

06:47.990 --> 06:51.030
Wenn wir nun diese Funktion in einer anderen Zeile erneut

06:51.030 --> 06:53.890
aufrufen und verschiedene Objekte übergeben und ich

06:53.890 --> 06:57.090
diese in einer neuen Konstante mit einem neuen Namen speichere,

06:57.090 --> 06:59.920
dann werden natürlich verschiedene Typen für T und

06:59.920 --> 07:03.130
U für diesen Funktionsaufruf eingetragen.

07:03.130 --> 07:05.350
Sie können typescript auch gezielt mitteilen,

07:05.350 --> 07:07.780
welche Typen es ausfüllen soll, indem Sie beim

07:07.780 --> 07:09.110
Aufruf der Funktion spitze

07:09.110 --> 07:11.320
Klammern nach dem Funktionsnamen hinzufügen

07:11.320 --> 07:13.010
und dann Ihre eigenen Typen für

07:13.010 --> 07:15.200
T und U eintragen.

07:15.200 --> 07:18.030
Wir könnten typescript mitteilen, dass T für diesen Funktionsaufruf

07:18.030 --> 07:20.180
vom Typ string und U vom Typ number sein soll,

07:20.180 --> 07:22.710
aber dann würde sich typescript natürlich über die konkreten

07:22.710 --> 07:23.950
Werte beschweren, die wir

07:23.950 --> 07:25.940
hier übergeben.

07:25.940 --> 07:28.270
Denn dies ist eindeutig keine Zeichenkette,

07:28.270 --> 07:30.190
und wenn wir dies beheben würden, wäre

07:30.190 --> 07:32.280
dies eindeutig nicht vom Typ Zahl.

07:32.280 --> 07:34.650
Hier könnten wir also sehr spezifisch sein

07:34.650 --> 07:38.620
und sagen, dass das erste Argument oder der Typ T, um genau zu sein, für diesen

07:38.620 --> 07:41.700
Funktionsaufruf hier ein Objekttyp sein wird, bei dem

07:41.700 --> 07:45.310
wir eine Namenseigenschaft haben, die vom Typ String ist, und eine

07:45.310 --> 07:48.850
Hobbyeigenschaft, die vom Typ String-Array ist.

07:48.850 --> 07:52.970
Und der konkrete Typ für U, für diesen Funktionsaufruf wird ein Objekt

07:52.970 --> 07:55.800
sein, wo wir eine Alterseigenschaft haben, die vom

07:55.800 --> 07:57.320
Typ Zahl sein sollte.

07:57.320 --> 08:00.220
Und jetzt wäre alles gut, es gäbe keine Fehler

08:00.220 --> 08:02.730
mehr und es würde funktionieren.

08:02.730 --> 08:05.060
Aber das ist überflüssig, das kann man durchaus

08:05.060 --> 08:07.310
tun, und es ist wichtig zu verstehen, dass

08:07.310 --> 08:10.070
es letztlich darum geht, dass man verschiedene

08:10.070 --> 08:12.990
konkrete Typen für verschiedene Funktionsaufrufe

08:12.990 --> 08:15.170
einsetzen kann.

08:15.170 --> 08:16.930
Aber das ist hier nicht nötig, weil

08:16.930 --> 08:20.110
Typescript einfach die Typen der Werte herleitet, die wir

08:20.110 --> 08:22.170
hier als Argumente übergeben.

08:22.170 --> 08:25.120
Und setzt dann die abgeleiteten Typen für

08:25.120 --> 08:28.240
T und U für diesen Funktionsaufruf ein.

08:28.240 --> 08:31.283
So funktionieren die Generika letztlich hinter den Kulissen.
