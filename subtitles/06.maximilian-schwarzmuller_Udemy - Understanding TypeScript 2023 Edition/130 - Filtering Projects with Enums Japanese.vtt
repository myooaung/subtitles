WEBVTT

00:02.310 --> 00:06.500
男：ということは､ 2つの問題を解決することになりますね｡

00:06.500 --> 00:10.960
さて､ まずはプロジェクトが両方のボックスに表示される問題から｡

00:10.960 --> 00:13.050
フィルタリングを導入したいのですが､

00:13.050 --> 00:18.930
フィルタリングに最適な場所は､ もちろんリスナー関数です｡

00:18.930 --> 00:29.170
リスナーを登録する場所に行くと､ ここがプロジェクトリストの節になっています｡

00:29.170 --> 00:32.270
次に､ プロジェクトのリストがありますね｡ 

00:32.270 --> 00:36.170
さて､ そのプロジェクトのリストは､ すべてのプロジェクトで構成されています｡ 

00:36.170 --> 00:43.140
ただし､ プロジェクトリスト節内では､ アクティブなプロジェクトや終了したプロジェクトにしか興味がない｡

00:43.140 --> 00:44.250
ところで､ ここでは､

00:44.250 --> 00:53.160
理論的にはenumを使うこともできますが､ 実際には､ 下のenumまたは下の型に格納されている具体的な値が必要です｡

00:53.160 --> 01:02.180
したがって､ ここでは､ 文字列リテラルの型を表示したいので､ 常にenumは使用したくありません｡

01:02.180 --> 01:06.190
リスナー関数の内部で行うことは､ プロジェクトを保存してレンダリングする前に､

01:06.190 --> 01:10.470
フィルタリングを行うことです｡

01:10.470 --> 01:13.020
そこで､ ここに私たちの関連するプロジェクトがあると言えますが､

01:13.020 --> 01:16.660
それはもちろん､ プロジェクト・フィルタリングです｡

01:16.660 --> 01:21.460
filterメソッドは､ JavaScriptの任意の配列に存在するデフォルトのメソッドです｡

01:21.460 --> 01:23.690
この関数は､ projects配列の各項目に対して実行され､

01:23.690 --> 01:35.040
この関数がtrueを返すと､ その項目を新しく作成した配列に保持し､ 関連するprojectsに格納されます｡

01:35.040 --> 01:38.130
この関数が false を返した場合､ 元のリストからではなく､

01:38.130 --> 01:44.230
関連するプロジェクトに格納されている新しいリストに項目を削除します｡

01:44.230 --> 01:46.600
そこで､ ここでは､ プロジェクトを維持するかどうかによって､

01:46.600 --> 01:48.810
trueまたはfalseを返す必要があります｡

01:48.810 --> 01:52.430
そのためには､ もちろん､ ステータスを見ればいいわけです｡ 

01:52.430 --> 01:59.070
プロジェクト・ステータスは列挙型で､ アクティブなプロジェクト・リストにいる場合はプロジェクト・ステータスがアクティブと等しいかどうか､

01:59.070 --> 02:12.270
つまりtypeプロパティがアクティブであるかどうか､ 終了したリストにいる場合はプロジェクト・ステータスが終了したかどうかをチェックしたいのです｡

02:12.270 --> 02:20.100
そこで､ ここでは実際に中括弧で囲んで本当の関数本体を書き､

02:20.100 --> 02:40.160
もしこの型がactiveと等しければ､ このチェックの結果をここで返したいと思います｡

02:40.160 --> 02:42.220
これで､ 関連するプロジェクトを取得し､

02:42.220 --> 02:45.490
割り当てられたプロジェクトに格納できるようになりました｡

02:45.490 --> 02:47.070
では､ 次にそれがうまくいくかどうかを見てみましょう｡ 

02:47.070 --> 02:48.053
リロードして､

02:49.310 --> 02:51.570
ここにプロジェクトを追加したら､

02:51.570 --> 02:52.743
うまくいくか？

02:54.950 --> 02:55.930
これが功を奏して､ ご存知のように､

02:55.930 --> 03:00.020
アクティブなプロジェクトにのみ追加され､ 終了したプロジェクトには追加されないのです｡

03:00.020 --> 03:02.390
しかし､ ここに2つ目のプロジェクトを追加すると､

03:02.390 --> 03:04.740
まだ重複が続いています｡

03:04.740 --> 03:08.720
さて､ これはプロジェクトのレンダリング方法と関連しています｡ 

03:08.720 --> 03:10.520
レンダープロジェクトの内部では､

03:10.520 --> 03:15.090
常にすべてのプロジェクト項目を確認し､ リストに追加しています｡

03:15.090 --> 03:16.640
さて､ この場合の問題は､ もちろん､

03:16.640 --> 03:21.950
すでにプロジェクト・アイテムが画面にレンダリングされている可能性があることです｡

03:21.950 --> 03:30.170
ここで考えられる最善の解決策は､ すでにレンダリングされたものとレンダリングが必要なものを比較し､

03:30.170 --> 03:34.110
不要な再レンダリングを避けることです｡

03:34.110 --> 03:35.760
しかし､ この比較を実DOMを見て実行すると､

03:35.760 --> 03:39.710
かなりのパフォーマンスも犠牲になります｡

03:39.710 --> 03:43.100
このアプリケーションでは､ リスト要素の内容をすべて消去するために､

03:43.100 --> 03:45.250
内側の HTML を空文字列に設定して､

03:45.250 --> 03:53.710
すべてのリスト項目を削除してからレンダリングし直しても問題ありません｡

03:53.710 --> 03:58.470
つまり､ 新しいプロジェクトを追加するたびに､ すべてのプロジェクトをレンダリングすることになりますが､

03:58.470 --> 04:03.490
このプロジェクト､ このアプリケーションの目的には､ まったく問題ないのです｡

04:03.490 --> 04:05.410
では､ これで､ それを保存したら､

04:05.410 --> 04:06.987
もう一回やってみましょう｡

04:06.987 --> 04:10.540
"これは使えるのか？ 「は最初のプロジェクトで､ ここに別のプロジェクトを追加すると､

04:10.540 --> 04:17.453
ほら､ 追加されるけど､ もう一つのプロジェクトは再び追加されないんだ｡

04:18.430 --> 04:23.540
おっと､ ここで､ 説明文の長さが足りず､ （ブツブツ）エラーになりました｡

04:23.540 --> 04:32.170
これですべてがうまくいき､ プロジェクトをあるべき姿でレンダリングできるようになりました｡

04:32.170 --> 04:35.050
しかも､ それでいて､ アプリケーションの出来は悪くない｡ 

04:35.050 --> 04:36.890
1つだけ足りないのは､ ドラッグ＆ドロップ機能か､

04:36.890 --> 04:44.040
この最初のリストから2番目のリストへプロジェクトを移動させる方法です｡

04:44.040 --> 04:45.180
また､ その他に得た情報､

04:45.180 --> 04:48.900
説明文､ 人数もあまり出力していません｡

04:48.900 --> 04:50.750
だから､ それもイマイチなんです｡ 

04:50.750 --> 04:57.620
また､ プロジェクトリストのこの節とプロジェクト入力節を見ると､

04:57.620 --> 05:01.000
少しコードが重複しています｡

05:01.000 --> 05:04.270
どちらもテンプレート要素､ ホスト要素､ 要素があり､

05:04.270 --> 05:06.970
アタッチメソッドなどがあります｡

05:06.970 --> 05:09.180
そこで､ このコードを改良し､

05:09.180 --> 05:11.800
継承とベース句を使用してコードを再利用したいと思います｡

05:11.800 --> 05:40.540
さらに､ すべてのプロジェクト項目に専用の句を作成し､ このようにリスト項目を手動で追加する代わりに､ プロジェクトリストの中でそのプロジェクト項目句をインスタンス化し､ 「作成する」プロジェクト項目句の中で､ 追加部分を発生させ､ さらにプロジェクト項目の説明や割り当て人数などの詳細情報を出力するようにしたいと思います｡

05:40.540 --> 05:44.520
そこで､ やるべきことがいくつか残っているのですが､

05:44.520 --> 05:48.660
その前に､ まず､ プロジェクトリストとプロジェクト入力､

05:48.660 --> 05:57.693
またはその一部の再利用性を高めるために､ いくつかの継承を追加しておきましょう｡
