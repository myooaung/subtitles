WEBVTT

00:02.340 --> 00:04.100
Anlatıcı: Generics ile başladık ve

00:04.100 --> 00:06.670
umarım TypeScript'in burada ne yaptığı anlaşılmıştır,

00:06.670 --> 00:10.240
birleştirme fonksiyonuna bazı ekstra bilgiler aktarıyoruz, böylece birleştirme

00:10.240 --> 00:12.130
fonksiyonunun sonucuyla daha iyi bir şekilde

00:12.130 --> 00:14.370
çalışabiliyoruz.

00:14.370 --> 00:16.540
Jenerikler genellikle bunun için vardır.

00:16.540 --> 00:19.890
Verilerinizle TypeScript'e en uygun şekilde çalışmaya

00:19.890 --> 00:21.960
devam etmenizi sağlarlar.

00:21.960 --> 00:23.820
Şimdi, bu durumda, burada, ancak,

00:23.820 --> 00:25.810
diyelim ki burada sadece 30 numarayı

00:25.810 --> 00:28.570
geçersem bir sorunumuz olacaktır.

00:28.570 --> 00:30.470
Elbette, TypeScript şimdi bir hata atıyor,

00:30.470 --> 00:32.010
çünkü yaşa erişmeye çalıştı, ancak

00:32.010 --> 00:33.870
ada erişmek işe yarayacaktı.

00:33.870 --> 00:37.100
Bununla birlikte, bunu kaydedersek, hatasız derlenir

00:37.100 --> 00:39.710
ve birleştirilmiş nesnenin tamamını yazdırırsam,

00:39.710 --> 00:41.610
geri aldığım şeyin nesnemde sadece

00:41.610 --> 00:43.910
hobiler ve isim olduğunu görürüz, bu mantıklıdır

00:43.910 --> 00:48.010
çünkü 30 bir sayıdır ve bunu nesne atamasına ikinci bir argüman olarak

00:48.010 --> 00:50.080
aktardığımızda, ki sonuçta burada

00:50.080 --> 00:51.920
yapıyoruz, o zaman bu sessizce

00:51.920 --> 00:54.590
başarısız olur.

00:54.590 --> 00:57.860
JavaScript hata vermez, şikayet etmez.

00:57.860 --> 01:00.460
Ancak elbette 30'u yeni oluşturulan nesneyle

01:00.460 --> 01:02.270
birleştirmez, bu nesnede 30

01:02.270 --> 01:04.690
olmadığını görürsünüz.

01:04.690 --> 01:06.540
Peki JavaScript bunu nasıl yapacak?

01:06.540 --> 01:08.470
30 bir nesne olmadığından,

01:08.470 --> 01:12.150
bir nesne ataması yalnızca farklı nesneleri birbiriyle

01:12.150 --> 01:14.090
birleştirebilir.

01:14.090 --> 01:15.410
Peki sonuçta neyi kurtarmak istiyoruz?

01:15.410 --> 01:17.600
Burada U ve T için sağladığınız

01:17.600 --> 01:20.040
nesnenin tam türünü ve tam yapısını

01:20.040 --> 01:22.980
önemsemiyoruz.

01:22.980 --> 01:26.600
Ancak önemsediğimiz şey, her iki parametrenin de,

01:26.600 --> 01:31.370
hem T hem de U türlerinin herhangi bir nesne olması, ancak her zaman

01:31.370 --> 01:34.420
bir nesne olmaları gerektiğidir.

01:34.420 --> 01:36.830
Ve şu anda bunu söylemiyoruz.

01:36.830 --> 01:37.820
Şu anda sadece diyoruz ki,

01:37.820 --> 01:40.110
herhangi bir türde olabilirler, umurumda değil.

01:40.110 --> 01:41.750
Şimdi, çoğu zaman, bu iyi değil.

01:41.750 --> 01:45.060
Burada T ve U türlerini kısıtlamak, genel türlerinizi

01:45.060 --> 01:46.683
çözmek istiyorsunuz.

01:47.830 --> 01:51.540
Bunu tür kısıtlamaları ile yapabilirsiniz.

01:51.540 --> 01:55.170
Genel tipler için, genel tiplerinizin temel alabileceği tiplerle

01:55.170 --> 01:58.280
ilgili belirli kısıtlamalar belirleyebilirsiniz ve bunu

01:58.280 --> 02:01.120
kısıtlamak istediğiniz tipten sonra köşeli parantezler

02:01.120 --> 02:05.150
içinde genişletilmiş anahtar kelime ile yaparsınız.

02:05.150 --> 02:07.410
Yani burada extends object diyebiliriz

02:07.410 --> 02:09.020
ve bununla şunu söylüyorum,

02:09.020 --> 02:12.740
T tipi herhangi bir yapıya sahip herhangi bir nesne olabilir,

02:12.740 --> 02:15.340
ancak bir nesne olmak zorundadır.

02:15.340 --> 02:17.480
Biz de aynısını sizin için yapabiliriz.

02:17.480 --> 02:19.040
Ve bunu yaparsam, şimdi IDE'de

02:19.040 --> 02:21.820
zaten bir hata aldığımı görüyorsunuz.

02:21.820 --> 02:23.980
Bunu kaydetmeye çalıştığımda

02:23.980 --> 02:26.150
da derleyicide bir hata alıyorum

02:26.150 --> 02:28.640
çünkü buradaki type 30 argümanı object

02:28.640 --> 02:31.133
türüne atanamıyor.

02:32.080 --> 02:34.480
Elbette burada istediğimiz davranış budur.

02:34.480 --> 02:38.190
Şimdi tekrar bir nesne iletmek zorunda kalıyoruz,

02:38.190 --> 02:39.940
whoops, bu şekilde.

02:39.940 --> 02:41.990
Şimdi bunu tekrar içeri aktarmak zorunda kalıyoruz

02:41.990 --> 02:43.680
ve bu nedenle bu işlevi geliştiriyoruz çünkü

02:43.680 --> 02:45.290
artık gerçekten çalışıyor.

02:45.290 --> 02:48.980
Ve nesne atamanın iki nesne istediğini biliyoruz.

02:48.980 --> 02:51.000
Sonuçta, genel tiplerimiz üzerinde

02:51.000 --> 02:52.820
belirli kısıtlamalar koyarak

02:52.820 --> 02:56.370
burada iki nesne alacağımızı garanti etmek istiyoruz.

02:56.370 --> 02:58.630
Ve buradaki kısıtlamalar herhangi bir şey olabilir.

02:58.630 --> 03:01.290
Nesnelere, dizelere başvurabilirsiniz, eğer

03:01.290 --> 03:03.730
varsa kendi türünüzü kullanabilirsiniz.

03:03.730 --> 03:06.700
İsterseniz burada birlik türlerini de kullanabilirsiniz, burada

03:06.700 --> 03:08.470
gerçekten esneksiniz, istediğiniz kısıtlamaları

03:08.470 --> 03:10.510
ayarlayabilirsiniz.

03:10.510 --> 03:12.620
Ve elbette, tüm genel türleri kısıtlamak

03:12.620 --> 03:13.720
zorunda değilsiniz.

03:13.720 --> 03:16.560
Eğer sadece U'yu kısıtlamak istiyorsanız, bunu yapabilirsiniz.

03:16.560 --> 03:19.620
Bu örnekte, nesne atama burada iki nesne istediği

03:19.620 --> 03:22.880
için her ikisini de kısıtlamak mantıklıdır, ancak orada

03:22.880 --> 03:24.640
gerçekten esneksiniz.

03:24.640 --> 03:26.620
Yine de bu kısıtlama kavramının farkında

03:26.620 --> 03:28.440
olmak önemlidir, çünkü bu, jenerik

03:28.440 --> 03:30.560
tiplerle daha iyi bir şekilde çalışmanıza

03:30.560 --> 03:32.640
olanak tanır, bu da daha önce olduğu

03:32.640 --> 03:34.810
gibi gereksiz hataları veya garip davranışları

03:34.810 --> 03:37.513
önler.
