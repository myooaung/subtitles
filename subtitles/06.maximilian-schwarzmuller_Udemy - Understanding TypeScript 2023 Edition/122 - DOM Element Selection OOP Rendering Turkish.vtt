WEBVTT

00:02.300 --> 00:03.420
Eğitmen: Başlamak için,

00:03.420 --> 00:07.060
burada geliştirme sunucusunu getirmek için npm start'ı çalıştıracağım.

00:07.060 --> 00:09.384
HTML dosyasına ve menü sekmesine hizmet

00:09.384 --> 00:13.434
eden tsc-w, uygulama JavaScript dosyamızın sürekli olarak yeniden

00:13.434 --> 00:17.988
oluşturulması ve çalışan uygulamada görüntüleyebilmemiz için izleme

00:17.988 --> 00:21.740
modunda derleme türlerini başlatır.

00:21.740 --> 00:24.480
Şu anda, elbette uygulamamız çok süslü görünmüyor.

00:24.480 --> 00:26.340
Boş bir sayfa.

00:26.340 --> 00:27.850
Yani başlamak için bunu

00:27.850 --> 00:30.250
yapmanın birçok yolu var.

00:30.250 --> 00:35.040
Şimdi, bu formu görünür hale getirmekle başlamak istiyorum.

00:35.040 --> 00:36.660
Ve şimdi, birçok yol var, aslında

00:36.660 --> 00:38.790
bu uygulamayı nesne yönelimli bir yaklaşımla

00:38.790 --> 00:40.208
yazacağım.

00:40.208 --> 00:43.303
Bu %100 isteğe bağlıdır, ancak sınıflar ve benzeri

00:43.303 --> 00:46.080
şeyleri öğrendiğimiz için, bunun nasıl çalıştığını

00:46.080 --> 00:48.083
göstermek istiyorum ve bu nedenle

00:48.083 --> 00:51.140
bu yaklaşımı kullanacağım.

00:51.140 --> 00:51.973
Bu yüzden uygulama

00:51.973 --> 00:55.510
anahtarına yeni bir sınıf ekleyeceğim ve adını Project Input

00:55.510 --> 00:59.120
koyacağım, ancak sınıf adı elbette tamamen size kalmış.

00:59.120 --> 01:00.570
Şimdi bu sınıfta amacımız,

01:00.570 --> 01:04.590
bu şablona ve içindeki forma erişmek ve buradaki

01:04.590 --> 01:08.220
div'e erişmek ve sonunda şablonumuzu bu div'de

01:08.220 --> 01:11.710
oluşturmak olmalıdır.

01:11.710 --> 01:15.160
Yani şablonun içeriği, o div içindeki form.

01:15.160 --> 01:17.130
Hedefimiz bu olmalı.

01:17.130 --> 01:18.850
Şimdi bunu başarmak için,

01:18.850 --> 01:20.588
burada Proje Girdisi'nde,

01:20.588 --> 01:23.450
sonunda şablonuma ve işlenmesi gereken

01:23.450 --> 01:25.920
yere erişmek istediğim bir kurucu

01:25.920 --> 01:27.970
ekleyeceğim.

01:28.830 --> 01:33.310
Bunun için, şablon öğesi özelliği ve ardından

01:33.310 --> 01:37.460
da ana öğe özelliği olmak üzere iki özelliği

01:37.460 --> 01:40.180
anında ekleyeceğim.

01:40.180 --> 01:42.420
İsimler %100 size kalmış.

01:42.420 --> 01:44.990
Sonunda benim fikrim, host elementinin şablon

01:44.990 --> 01:46.970
içeriğimi oluşturmak istediğim

01:46.970 --> 01:49.650
elemente bir referans tutması ve template elementinin

01:49.650 --> 01:51.427
de bana bu içeriği tutan şablona

01:51.427 --> 01:54.050
erişim sağlamasıdır.

01:54.050 --> 01:56.120
Şimdi bu şablona erişmek için index

01:56.120 --> 01:59.690
html'e bir göz atalım ve formu tutan şablonu nasıl tanımlayabileceğimizi

01:59.690 --> 02:01.870
görelim.

02:01.870 --> 02:04.050
Bu proje giriş kimliğine sahip, bu yüzden

02:04.050 --> 02:06.120
bu iyi bir strateji gibi görünüyor.

02:06.120 --> 02:08.510
Yani burada document getElementById

02:08.510 --> 02:11.022
project-input kullanabiliriz.

02:11.022 --> 02:15.410
Bu bize bu şablon öğesine erişim sağlar.

02:15.410 --> 02:17.820
Şimdi, birkaç önemli şey var.

02:17.820 --> 02:21.320
Burada, şablon öğesinin proje girişinde bulunmayan bir

02:21.320 --> 02:23.900
özellik olduğuna dair bir hata alıyoruz.

02:23.900 --> 02:28.140
Şimdi bundan kurtulmak için, aslında bunu doğrudan sınıfın

02:28.140 --> 02:31.610
içine yeni bir alan olarak eklemeliyiz.

02:31.610 --> 02:34.050
O zaman ona güvenle atama yapabiliriz.

02:34.050 --> 02:36.040
Şimdi burada, orada depolanacak tür hakkında

02:36.040 --> 02:37.450
da net olmak istiyorum.

02:37.450 --> 02:41.070
Ve bu bir HTML şablon öğesi olacaktır.

02:41.070 --> 02:43.270
Bu tür global olarak kullanılabilir

02:43.270 --> 02:47.380
çünkü tsconfig js dosyasında DOM'u bir lib olarak ekledim

02:47.380 --> 02:50.360
ve bu da tüm bu DOM türlerini, tüm bu HTML öğe

02:50.360 --> 02:53.777
türlerini tüm projeye typescript türleri olarak

02:53.777 --> 02:55.493
ekler.

02:57.280 --> 03:00.400
Şimdi bu burada yeni bir hatayı ortaya çıkarıyor, ancak

03:00.400 --> 03:03.110
sonunda öğeyi ID ile aldığımızda bunun null olabileceğini

03:03.110 --> 03:04.760
görüyorsunuz, elbette başarısız

03:04.760 --> 03:09.850
olmayacağını biliyoruz, ancak typescript'in bunu bilme şansı yok çünkü html dosyamızı

03:09.850 --> 03:12.757
analiz etmeyecek.

03:12.757 --> 03:16.210
Belki de bu kimliğe sahip hiçbir öğe yoktur ve bu nedenle

03:16.210 --> 03:18.210
bu null sonucunu verecektir.

03:18.210 --> 03:20.680
Şimdi burada, orada null saklamadığımızı,

03:20.680 --> 03:23.920
sadece HTML şablon öğesini sakladığımızı söylüyoruz.

03:23.920 --> 03:25.800
Dolayısıyla, bu tehlikeyi ortadan kaldırmak

03:25.800 --> 03:29.470
için typescript'e bunun asla null olmayacağını söylemeliyiz.

03:29.470 --> 03:31.290
Bunu nasıl yapabileceğinizi biliyor musunuz?

03:31.290 --> 03:33.580
Buraya bir ünlem işareti ekleyebilirsiniz.

03:33.580 --> 03:35.020
Elbette, emin değilseniz

03:35.020 --> 03:36.170
bunu da göstermek

03:36.170 --> 03:37.820
için bir alternatif, diyelim

03:37.820 --> 03:41.640
ki bir sabit olarak saklamak ve ardından şablon öğesinin

03:41.640 --> 03:46.640
doğru olup olmadığını kontrol etmektir, yani null değilse ve ardından

03:46.900 --> 03:48.600
buradaki if kontrolünün

03:48.600 --> 03:51.490
içinde saklayın.

03:51.490 --> 03:52.720
Şimdi, hala bir hata alıyoruz

03:52.720 --> 03:54.190
ama bu farklı bir hata olacak, buna

03:54.190 --> 03:55.840
daha sonra geri döneceğim.

03:55.840 --> 03:58.060
Emin değilsek şimdilik bu işimizi

03:58.060 --> 03:59.650
görecektir.

03:59.650 --> 04:01.930
Ancak burada, eminim.

04:01.930 --> 04:02.763
Ve bu arada, emin değilseniz,

04:02.763 --> 04:03.596
elbette başka bir durumda

04:03.596 --> 04:06.000
bir geri dönüş sağlamalısınız.

04:06.000 --> 04:08.530
Ancak burada böyle bir unsur alacağımızdan eminim

04:08.530 --> 04:10.544
ve bu nedenle dizgiye "Her şey yolunda"

04:10.544 --> 04:11.803
demek için bir ünlem işareti

04:11.803 --> 04:13.710
ekleyebiliriz.

04:13.710 --> 04:17.300
Bu ID'ye sahip bir öğeye erişim elde edeceğiz. Bahsettiğim gibi, yine de başka bir hatamız

04:17.300 --> 04:18.133
var.

04:18.133 --> 04:20.220
HTML öğesi türünde özellik içeriği eksik.

04:20.220 --> 04:24.270
Buradaki sorun, typescript'e html şablon öğesi

04:24.270 --> 04:27.140
türünde bir şablon öğesi depolayacağımızı

04:27.140 --> 04:29.550
söylememizdir.

04:29.550 --> 04:32.160
Ve gerçekten de durum böyle olacaktır.

04:32.160 --> 04:34.800
Elbette getElementById eninde

04:34.800 --> 04:38.730
sonunda hangi öğeyi döndüreceğini bilmiyor.

04:38.730 --> 04:41.130
Sadece bunun bir html öğesi olacağını bilir

04:41.130 --> 04:43.920
ancak hangi özel versiyonu olduğunu bilmez.

04:43.920 --> 04:46.600
Eğer bir div, bir paragraf, bir düğme ya da bu durumda

04:46.600 --> 04:48.720
olduğu gibi bir şablon öğesi ise.

04:48.720 --> 04:51.387
getElementById öğesinin bunu bilme şansı yoktur.

04:51.387 --> 04:54.590
Bu nedenle, elbette bizim de kesin olarak bildiğimiz

04:54.590 --> 04:57.460
tür hakkında dizgiyi anlatmak için.

04:57.460 --> 05:00.660
Tip dökümünü kullanabiliriz.

05:00.660 --> 05:02.260
Bunu sen de öğrendin.

05:02.260 --> 05:03.730
Kullanabileceğiniz iki sözdizimi vardır.

05:03.730 --> 05:05.950
Baştaki köşeli parantezler ve ardından

05:05.950 --> 05:07.690
bunu atamak istediğiniz

05:07.690 --> 05:10.130
tür ile typeScript'e şunu söylüyorsunuz:

05:10.130 --> 05:11.847
"Hey!

05:11.847 --> 05:12.700
Burada bundan

05:12.700 --> 05:15.840
sonra gelecek olan şey, ifade, bu türden olacaktır. veya alternatif olarak, benim kullanacağım yaklaşım olan HTML

05:15.840 --> 05:17.650
şablon öğesi olarak eklersiniz.

05:17.650 --> 05:21.200
Ve bununla, burada getirdiğiniz şeyin null olmayacağını

05:21.200 --> 05:23.040
ve bu türde olacağını typescript'e

05:23.040 --> 05:25.700
garanti edersiniz.

05:25.700 --> 05:27.950
Bunun seçilmesi hakkında çok konuşuluyor ancak bu

05:30.027 --> 05:30.860
ortak bir görev ve bunu

05:30.860 --> 05:32.016
doğru yapmak önemli.

05:32.016 --> 05:33.630
Şimdi ev sahibi unsur ile devam edelim.

05:33.630 --> 05:35.563
Burada, host öğesini de bir alan

05:36.890 --> 05:39.360
olarak eklemeliyiz ve aslında proje girdimizi

05:39.360 --> 05:43.350
oluşturmak istediğimizde host öğesinin sonunda buradaki div

05:43.350 --> 05:45.960
olacağını biliyoruz.

05:45.960 --> 05:48.560
Formumu oluşturmak istediğim yer burası.

05:48.560 --> 05:51.410
Yani, burada HTML div elementi diyebiliriz.

05:51.410 --> 05:54.000
Bunu ekleyeceğimiz öğe türü budur.

05:54.000 --> 05:57.730
Biraz daha az spesifik olup sadece HTML öğesi de diyebiliriz,

05:57.730 --> 06:00.260
çünkü burada div olup olmaması gerçekten

06:00.260 --> 06:02.740
umurumda değil.

06:02.740 --> 06:04.970
Ama bunu kesin olarak bildiğimize

06:04.970 --> 06:08.400
göre, neden eklemeyelim?

06:08.400 --> 06:10.250
Şimdi, elbette bunun eklenmesi gereken

06:10.250 --> 06:11.263
div'e erişmek istiyorum

06:12.110 --> 06:14.850
ve eğer indekse bir göz atarsak. html dosyasında, bu div'i yine ID ile tanımlayabileceğimizi

06:14.850 --> 06:16.530
görüyoruz.

06:16.530 --> 06:18.970
Bu durumda uygulama kimliği.

06:18.970 --> 06:19.945
Şimdi, app ts'ye geri döndüğümüzde,

06:19.945 --> 06:24.640
document getElementById'yi bir kez daha kullanabilir ve app id'sine sahip öğeye ulaşabiliriz.

06:24.640 --> 06:28.780
Şimdi, daha önce olduğu gibi aynı sorunlarımız var, bu

06:28.780 --> 06:32.920
null olabilir, bu yüzden ünlem işaretini eklemeliyiz

06:32.920 --> 06:35.112
çünkü yine, olmayacağını kesin

06:35.112 --> 06:39.620
olarak biliyoruz ve getElementById bunun bir HTML div öğesi

06:39.620 --> 06:42.283
olacağını bilmiyor, bu yüzden bunu

06:43.430 --> 06:46.030
da buraya atmalıyız.

06:46.030 --> 06:48.150
Ve bununla birlikte artık ihtiyacımız olan

06:48.150 --> 06:51.210
tüm unsurlara nasıl erişebileceğimizi bulabiliriz.

06:51.210 --> 06:53.990
Bu konuda çok konuştuk.

06:53.990 --> 06:56.070
Bununla birlikte ne yazık ki pek bir şey başaramadık.

06:56.070 --> 06:59.140
Bu unsurlara erişimimiz var ancak orada

06:59.140 --> 07:01.970
hiçbir şey oluşturmuyoruz.

07:01.970 --> 07:03.940
Bununla devam edelim.

07:03.940 --> 07:05.790
Bunun için, içeriği bu şablon öğesinden

07:05.790 --> 07:08.020
içe aktarmamız gerekir, yani temel olarak şablon

07:08.020 --> 07:10.620
etiketlerinin içindekileri içe aktarın ve bunu DOM'a

07:10.620 --> 07:11.760
işleyin.

07:11.760 --> 07:15.520
Bunu tam burada kurucuda yapabiliriz çünkü benim fikrim

07:15.520 --> 07:17.603
ve tabii ki bu sadece benim fikrim,

07:18.510 --> 07:21.870
bunu farklı şekilde ayarlayabilirsiniz.

07:21.870 --> 07:22.940
Ancak benim fikrim,

07:22.940 --> 07:24.550
bu sınıfın yeni bir örneğini oluşturduğumuzda,

07:24.550 --> 07:26.430
hemen bu örneğe ait bir form oluşturmak

07:26.430 --> 07:28.250
istiyorum.

07:28.250 --> 07:30.190
Bu yüzden bunu doğrudan yapıcıda yapacağız.

07:30.190 --> 07:31.770
Burada içe aktarılan düğümümüzü

07:31.770 --> 07:34.420
ya da içe aktarılan HTML içeriğimizi ya

07:34.420 --> 07:37.430
da nasıl adlandırmak isterseniz, importNode

07:37.430 --> 07:40.627
belgesiyle alabiliriz ve bu, global belge nesnesinde

07:40.627 --> 07:44.917
sağlanan bir yöntemdir ve importNode'a şablon öğenizdeki bir

07:45.860 --> 07:49.260
işaretçiyi aktarırsınız.

07:49.260 --> 07:52.650
Yani sonunda bu şablon öğesi, daha doğrusu öğe değil

07:52.650 --> 07:54.410
ama nokta içeriği var.

07:54.410 --> 07:57.010
İçerik, HTML şablon öğelerinde

07:57.010 --> 08:00.891
bulunan bir özelliktir ve basitçe bir şablonun

08:00.891 --> 08:05.320
içeriğine referans verir.

08:05.320 --> 08:07.480
Yani şablon metni arasındaki HTML koduna.

08:07.480 --> 08:09.520
ImportNode ayrıca bunu derin

08:09.520 --> 08:13.306
bir klonla içe aktarması gerekip gerekmediğini tanımlayan

08:13.306 --> 08:15.670
ikinci bir argüman alır.

08:15.670 --> 08:17.940
Yani şablonun içindeki tüm iç içe geçme seviyeleri ve ben kesinlikle bunu yapmak

08:17.940 --> 08:19.630
istiyorum, bu yüzden burada true sağlayacağım.

08:19.630 --> 08:22.570
Şimdi, importedNode'umuz var ve göreceğiniz

08:22.570 --> 08:26.340
gibi, bu, typescript'in otomatik olarak varsaydığı veya çıkardığı

08:26.340 --> 08:28.830
belge parçası türündedir.

08:28.830 --> 08:30.770
Şimdi bu importedNode'u kullanabiliriz

08:30.770 --> 08:34.910
ve tabii ki onu bazı içerikleri işlemek için kullanmak istiyorum.

08:34.910 --> 08:36.960
Bunun için attach adını vereceğim

08:36.960 --> 08:40.970
yeni bir yöntem, özel bir yöntem ekleyeceğim.

08:40.970 --> 08:42.810
Bunu yapmanıza gerek yok, ben sadece seçimimi

08:42.810 --> 08:45.150
ve işleme mantığımı bölmek istiyorum.

08:45.150 --> 08:46.390
attach'in içinde,

08:46.390 --> 08:51.270
ana öğeye, yani içeriğimi oluşturmak istediğim yere ulaşacağım ve

08:51.270 --> 08:52.820
JavaScript'in sonunda

08:52.820 --> 08:54.930
tarayıcı tarafından sağlanan

08:54.930 --> 08:57.840
varsayılan bir yöntem olan insertAdjacentElement'i

08:57.840 --> 09:00.770
çağıracağım.

09:00.770 --> 09:02.980
HTML öğesini bitişik bir öğe eklemek

09:02.980 --> 09:04.340
için, öncelikle nereye

09:04.340 --> 09:08.778
ekleneceğine dair bir açıklama alır, böylece hedeflediğiniz öğenin başlangıcından

09:08.778 --> 09:13.180
sonra ekleyebilirsiniz, yani ana öğenin açılış etiketinden hemen sonra,

09:13.180 --> 09:17.850
başlangıçtan önce veya açılış etiketinden önce, bitiş etiketinden önce veya

09:17.850 --> 09:20.870
bitiş etiketinden sonra.

09:20.870 --> 09:23.570
Ve burada, açılış etiketinin hemen başına

09:23.570 --> 09:27.020
yerleştirmeye başladıktan sonra gideceğim.

09:27.020 --> 09:30.580
Ve sonra eklemek istediğim şey importedNode'umdur,

09:30.580 --> 09:33.053
ancak öncelikle bu yalnızca

09:34.900 --> 09:39.140
yapıcıda bulunan bir sabittir ve ikincisi, bu

09:39.140 --> 09:42.970
bir belge parçasıdır.

09:42.970 --> 09:44.630
Bu şekilde ekleyemezdik.

09:44.630 --> 09:46.896
Bunun yerine, başka bir özellik öğesinde saklayabileceğimiz

09:46.896 --> 09:48.240
somut HTML öğesine erişmemiz

09:48.240 --> 09:49.800
gerekir.

09:49.800 --> 09:52.770
Ayrıca HTML öğesi türünde olabilecek bir alan

09:52.770 --> 09:55.560
olarak eklememiz gerekiyor ya da bizim durumumuzda

09:55.560 --> 09:58.270
aslında buradaki şablonun içinde olacağını

09:58.270 --> 10:02.500
biliyoruz, bu yüzden bir form olacak.

10:02.500 --> 10:05.790
Bu, şablondaki ilk öğedir.

10:05.790 --> 10:07.010
Yani burada bunun bir

10:07.010 --> 10:09.470
HTML form öğesi olacağını söyleyebiliriz

10:09.470 --> 10:10.960
ve sonra burada, bu öğe importNode

10:10.960 --> 10:15.200
firstElementChild'a eşittir, şimdi typescript'e bunun bir HTML

10:15.200 --> 10:20.106
form öğesi olacağını tekrar söylememiz gerekiyor.

10:20.106 --> 10:22.199
Şimdi bu öğe, eklemek istediğimiz

10:22.199 --> 10:25.510
düğümü işaret eden somut özelliktir.

10:25.510 --> 10:28.360
Aşağıda, insertAdjacentElement içinde,

10:28.360 --> 10:31.110
bu öğeyi buraya ekliyoruz.

10:31.110 --> 10:33.690
Şimdi tek yapmamız gereken, burada kurucuda,

10:33.690 --> 10:36.350
sonunda attach, yani bu özel attach yöntemini

10:36.350 --> 10:38.460
çağırdığımızdan emin olmak, böylece

10:38.460 --> 10:39.950
bu kodun da çalışmasını

10:39.950 --> 10:42.260
sağlamaktır.

10:42.260 --> 10:44.290
Ve şimdi tüm biçimlendirmelerle

10:44.290 --> 10:46.620
birlikte kodum bu şekilde görünüyor.

10:46.620 --> 10:48.200
Bu artık proje girdi sınıfıdır

10:48.200 --> 10:51.460
ve teorik olarak onu örneklediğimizde formu

10:51.460 --> 10:53.950
oluşturması gerekir.

10:53.950 --> 10:56.920
Şimdi bir deneyelim.

10:56.920 --> 10:59.440
Sınıfın altında, basitçe yeni bir sabit oluşturalım,

10:59.440 --> 11:01.120
örneğin prjInput, adı size kalmış.

11:01.120 --> 11:05.415
Ve yeni proje girişini bu şekilde arayın.

11:05.415 --> 11:08.930
Ve şimdi bunu kaydedersek, yeniden derlenmeli ve

11:08.930 --> 11:11.783
yeniden yüklenmeli ve tarayıcıya geri

11:11.783 --> 11:14.160
dönerseniz, gerçekten de bu formu

11:14.160 --> 11:16.050
burada görmelisiniz.

11:16.050 --> 11:17.990
Bu oldukça güzel, çünkü bununla

11:17.990 --> 11:20.660
çok önemli ilk adımı atmış olduk.

11:20.660 --> 11:22.450
Formumuzu yakaladık

11:22.450 --> 11:26.930
ve birçok şey eksik olsa da bu hiç yoktan

11:26.930 --> 11:29.150
iyidir.

11:29.150 --> 11:31.630
Bu form, index html dosyasından geliyor

11:31.630 --> 11:33.010
ve yukarıdaki nesne yönelimli

11:33.010 --> 11:36.430
typescript kodumuzun yardımıyla işleniyor.
