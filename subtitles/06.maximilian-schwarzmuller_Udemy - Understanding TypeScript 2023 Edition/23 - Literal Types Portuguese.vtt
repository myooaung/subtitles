WEBVTT

00:02.350 --> 00:03.921
Instrutor: Então, agora, temos tipos de sindicatos aqui.

00:03.921 --> 00:07.440
Vamos desenvolver essa idéia de tipos de união e também

00:07.440 --> 00:09.764
introduzir os tipos literais.

00:09.764 --> 00:14.290
Os tipos literais são tipos em que você não diz apenas que uma determinada

00:14.290 --> 00:16.436
variável ou parâmetro deve conter,

00:16.436 --> 00:19.700
digamos um número ou uma string, mas onde você é muito

00:19.700 --> 00:21.230
claro sobre o valor exato

00:21.230 --> 00:23.800
que ele deve conter.

00:23.800 --> 00:26.064
Já vimos isso aqui no básico.

00:26.064 --> 00:28.408
Constante número dois, por exemplo.

00:28.408 --> 00:32.098
Ali, se eu pairar sobre o tipo que foi inferido

00:32.098 --> 00:35.680
não é o número, é 2. 8.

00:35.680 --> 00:37.290
E o grupo de tipos inferiu este

00:37.290 --> 00:41.220
número concreto como um tipo aqui porque é uma constante.

00:41.220 --> 00:43.810
Ele nunca mudará e, portanto, o grupo de tipos sabe que o valor

00:43.810 --> 00:48.211
que eu atribuí aqui é o tipo exato que tenho. Portanto, é claro que este é

00:48.211 --> 00:52.796
um número, pode-se dizer 2. 8 é derivado do tipo de número, mas

00:52.796 --> 00:56.320
é um número específico. E isto não existe apenas

00:56.320 --> 00:59.160
para os números, mas também para as cordas

00:59.160 --> 01:02.860
e assim por diante. E, especialmente para as cordas, pode ser muito útil.

01:02.860 --> 01:07.420
Digamos aqui em nossa função combinada, esperamos números ou strings e os combinamos

01:07.420 --> 01:10.190
de forma diferente com base no que recebemos, mas

01:10.190 --> 01:13.756
também queremos permitir que o chamador da função defina como

01:13.756 --> 01:18.756
o resultado deve ser retornado para que possamos basicamente forçar uma conversão

01:18.880 --> 01:25.370
de número para string ou o contrário.

01:25.370 --> 01:25.370
Poderíamos

01:25.370 --> 01:29.740
fazer isto com o terceiro parâmetro e poderíamos nomear aquele tipo de resultado ou

01:29.740 --> 01:33.208
conversão de resultados ou como você quiser nomear e eu quero descrever

01:33.208 --> 01:37.240
isto com uma cadeia. Por isso, vou definir isto

01:37.240 --> 01:41.122
para digitar o fio. Agora minha idéia é que eu posso

01:41.122 --> 01:45.625
ligar para combinar aqui com dois números e, por exemplo, passar

01:45.625 --> 01:50.625
em uma seqüência de "as-number" e depende totalmente de você qual identificador

01:50.630 --> 01:55.630
você usa aqui. Lá embaixo podemos ter "as-text", mas

01:56.260 --> 01:59.357
então podemos ter outra combinação aqui CombinedStringAges

02:02.910 --> 02:07.310
onde eu passo em duas cordas, mas ainda quero emitir este "as-number"

02:07.310 --> 02:10.030
e este seria um caso em que o terceiro parâmetro

02:10.030 --> 02:13.540
pode ser útil para forçar uma conversão, porque se eu passar

02:13.540 --> 02:19.950
em duas cordas aqui normalmente faríamos esta outra ramificação e a concatenaríamos e talvez eu

02:19.950 --> 02:24.730
queira devolver isto como um número, para que eu possa também consolar os

02:24.730 --> 02:34.030
agentes de cordas combinados aqui.

02:34.030 --> 02:34.030
Portanto,

02:34.030 --> 02:37.512
agora só temos que levar estes identificadores em conta em nossa função, incluindo a conversão

02:37.512 --> 02:41.730
de resultados em nossas verificações. Agora a questão é o que exatamente

02:41.730 --> 02:45.700
queremos fazer; queremos ter certeza de que podemos forçar

02:45.700 --> 02:49.930
a adição destas duas cordas como números ou queremos forçar o resultado,

02:49.930 --> 02:54.012
não importa se foi um cálculo matemático ou uma concatenação

02:54.012 --> 03:03.039
de cordas a ser convertida em um texto ou número.

03:03.039 --> 03:03.039
Se

03:03.039 --> 03:05.960
quisermos forçar uma conversão, podemos

03:05.960 --> 03:10.382
adicionar o if aqui e verificar se a conversão do resultado é igual

03:10.382 --> 03:15.340
a "as-number" e se esse for o caso, quero retornar o resultado com um plus

03:15.340 --> 03:18.826
que o converta para um número, a alternativa seria

03:18.826 --> 03:24.420
parseFloat, por exemplo, mas aqui vou apenas para o plus, já que este é um pouco mais

03:24.420 --> 03:29.420
curto e, caso contrário, quero retornar o resultado para String para forçar

03:30.156 --> 03:33.593
uma saída como uma string.

03:34.570 --> 03:38.883
Então agora fazemos o cálculo com base no tipo real que obtemos, mas depois

03:38.883 --> 03:42.300
convertemos para resultado que é uma maneira de fazer isso

03:42.300 --> 03:46.360
e se salvarmos isso e depois compilamos este arquivo, vemos que este

03:47.470 --> 03:51.020
é o resultado que obtemos e obtemos essa saída, por exemplo,

03:51.020 --> 03:54.759
para nossa combinação de string aqui, porque, como eu disse,

03:54.759 --> 03:58.520
a combinação em si o cálculo, por assim dizer, é feito com base no

03:58.520 --> 04:02.530
tipo em que alimentamos a string aqui, então a concatenamos e depois

04:02.530 --> 04:05.860
apenas convertemos para resultado.

04:05.860 --> 04:09.593
A lógica alternativa seria verificar o tipo aqui

04:09.593 --> 04:14.320
e fazer uma operação diferente com base no tipo de retorno que

04:14.320 --> 04:19.180
estamos especificando aqui. Portanto, poderíamos comentar isto

04:19.180 --> 04:22.600
e, em vez disso, dizer aqui se o tipo de entrada um é número

04:22.600 --> 04:26.230
e o tipo de entrada dois é número, ou se o resultadoConversão

04:27.890 --> 04:30.865
é igual a "as-number" então eu quero combinar

04:30.865 --> 04:35.865
valores como este e agora para evitar este erro, aqui eu forço a conversão para

04:35.930 --> 04:38.794
números, adicionando um mais de infrator de

04:38.794 --> 04:42.970
cada entrada, de modo que cada entrada seja convertida para um número

04:42.970 --> 04:45.490
e seja garantido que seja um número antes

04:45.490 --> 04:48.490
de eu combiná-los.

04:48.490 --> 04:51.130
Nota lateral: se você passar em cordas que não

04:51.130 --> 04:54.610
podem ser convertidas em um número, então algo como Max, por

04:54.610 --> 04:58.800
exemplo, então você receberá um NaN, e não um número como resultado.

04:58.800 --> 05:00.280
Bem, então no outro caso,

05:00.280 --> 05:03.170
para que não tenhamos "as-number", ou que simplesmente

05:03.170 --> 05:07.976
não tenhamos entradas numéricas, então entramos neste bloco aqui e agora

05:07.976 --> 05:12.390
com isso se eu retornar resultado novamente aqui, e então guardamos

05:12.390 --> 05:16.230
isto e recompilamos, veremos uma saída diferente em nossa

05:16.230 --> 05:20.230
página. Agora temos 56 nestas duas linhas aqui

05:20.230 --> 05:22.945
porque agora não estamos convertendo o resultado,

05:22.945 --> 05:26.300
então não estamos convertendo a corda concatenada para esta

05:26.300 --> 05:29.070
linha, mas sim fazendo a conversão antes de combinar

05:29.070 --> 05:31.970
os dois valores. Portanto, depende de você qual lógica

05:31.970 --> 05:34.760
você quer implementar. Na verdade, quero dar uma olhada

05:34.760 --> 05:37.551
de perto no conceito de tipos literais que descrevi

05:37.551 --> 05:41.180
no início desta palestra. Estou passando um "as-number" e um

05:41.180 --> 05:44.157
"as-text" e as desvantagens de um negócio que neste momento

05:44.157 --> 05:47.600
nós, como desenvolvedor, temos que memorizar estes valores.

05:47.600 --> 05:50.450
Temos que ter certeza de que não vamos perder o tipo aqui.

05:50.450 --> 05:54.010
Agora poderíamos usar um e-num para melhorar isso, mas se tivermos

05:54.010 --> 05:57.754
apenas dois valores aqui, "as-text" ou "as-number", então talvez todas

05:57.754 --> 06:00.940
as buscas de um tipo literal possam ser uma opção.

06:00.940 --> 06:04.173
Poderíamos dizer "isto não deveria ser nenhuma

06:04.173 --> 06:09.173
corda, deveria ser "as-number" ou "as-text", então usamos um tipo

06:09.870 --> 06:12.090
de sindicato combinado com tipos

06:12.090 --> 06:15.573
literais. Os tipos literais são os tipos

06:15.573 --> 06:17.987
que se baseiam em sua cadeia de tipos principais,

06:17.987 --> 06:20.933
número e assim por diante, mas então você tem uma versão

06:20.933 --> 06:24.750
específica do tipo. Portanto, aqui, permitimos especificamente

06:24.750 --> 06:27.960
estas duas cordas e não qualquer cordão, apenas estas duas cordas.

06:27.960 --> 06:31.460
Portanto, queremos um fio para a conversão de resultados, mas tem que ser

06:31.460 --> 06:34.207
um desses dois valores. Qualquer outro valor de string

06:34.207 --> 06:37.560
não será permitido, então essa é a idéia por trás de um tipo literal

06:37.560 --> 06:40.747
e muitas vezes você usará isso no contexto do tipo sindical, porque

06:40.747 --> 06:43.700
você não quer apenas permitir um valor exato que você poderia

06:43.700 --> 06:46.500
codificá-lo em seu código se esse fosse o caso, mas você

06:46.500 --> 06:49.544
quer ter dois ou mais valores possíveis.

06:49.544 --> 06:52.580
Neste caso, temos dois valores possíveis.

06:52.580 --> 06:56.240
Portanto, agora temos a garantia de obter uma conversão

06:56.240 --> 07:00.288
de resultados que é ou "as-number" ou "as-text" e, por exemplo,

07:00.288 --> 07:03.800
aqui, se eu agora tentar comparar isto com as-numbe porque

07:03.800 --> 07:07.256
tenho um erro de digitação aqui, o grupo de tipos é capaz

07:07.256 --> 07:10.360
de me dizer aqui na IDE e, claro, tudo o que guardamos

07:10.360 --> 07:15.360
e compilamos aqui no terminal porque sabe que as-numbe sem um r no final nunca

07:15.830 --> 07:18.940
será um valor válido para o resultadoConversão

07:18.940 --> 07:24.563
porque eu defino este tipo de união com estes tipos literais.

07:25.550 --> 07:27.593
Assim, agora ganhamos novamente algum tipo

07:27.593 --> 07:31.590
extra de segurança e garantimos que não podemos usar isto incorretamente.

07:31.590 --> 07:34.720
O mesmo vale para passar em um valor. Se tivermos um erro de digitação

07:34.720 --> 07:38.747
aqui, só recebemos um erro se usarmos "as-number" ou "as-text",

07:38.747 --> 07:41.947
temos permissão para compilar isto como você vê e

07:41.947 --> 07:45.470
agora compilar isto, isto funciona e obtemos a mesma saída

07:45.470 --> 07:49.562
que antes aqui. Portanto, estes são tipos literais especialmente

07:49.562 --> 07:52.193
úteis quando usados em conjunto com tipos de sindicatos.
