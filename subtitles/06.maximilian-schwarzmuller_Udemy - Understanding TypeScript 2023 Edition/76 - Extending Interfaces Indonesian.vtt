WEBVTT

00:02.150 --> 00:03.290
Instruktur: Anda juga bisa

00:03.290 --> 00:05.890
mengimplementasikan pewarisan dalam antarmuka.

00:05.890 --> 00:10.890
Katakanlah kita memiliki antarmuka lain, Named, dan ini adalah antarmuka

00:11.100 --> 00:13.600
yang benar-benar memastikan bahwa

00:13.600 --> 00:16.420
kita memiliki properti nama.

00:16.420 --> 00:18.510
Jadi sekarang, di sini, di Person, kita

00:18.510 --> 00:20.950
bisa mengimplementasikan Greetable dan Named

00:20.950 --> 00:24.110
untuk dipaksa memiliki metode greet dan name.

00:24.110 --> 00:25.820
Itu adalah sesuatu yang bisa kita lakukan.

00:25.820 --> 00:30.200
Atau, jika kita tahu bahwa Greetable berpikir objek yang dapat disapa selalu harus

00:30.200 --> 00:31.810
memiliki nama, kita bisa memastikan

00:31.810 --> 00:34.500
bahwa interface Greetable ini benar-benar memperluas

00:34.500 --> 00:36.970
interface Named, sehingga bersama-sama, mereka

00:36.970 --> 00:40.120
membentuk interface baru, yang memaksa setiap objek berdasarkan

00:40.120 --> 00:43.460
Greetable untuk memiliki metode greet, tetapi juga memiliki

00:43.460 --> 00:46.150
nama.

00:46.150 --> 00:48.840
Dan untuk melakukan itu, kita bisa menambahkan

00:48.840 --> 00:52.700
extends di sini, pada interface juga, dan kita extend Named.

00:52.700 --> 00:55.760
Sekarang karena itu seperti yang saya katakan, ini membentuk antarmuka

00:55.760 --> 00:58.330
baru, yang pada akhirnya, antarmuka yang memaksa kita untuk

00:58.330 --> 01:00.760
memiliki metode sapaan, tetapi tidak hanya itu, itu juga

01:00.760 --> 01:03.140
memaksa kita untuk memiliki semua yang didefinisikan

01:03.140 --> 01:04.910
oleh antarmuka Named.

01:04.910 --> 01:07.150
Dalam hal ini, properti nama.

01:07.150 --> 01:09.450
Jadi jika saya menghapus nama di sini, saya

01:09.450 --> 01:12.120
sudah mendapatkan error, karena kelas ini sekarang

01:12.120 --> 01:14.860
salah mengimplementasikan interface Greetable,

01:14.860 --> 01:17.600
karena nama properti tidak ada.

01:17.600 --> 01:20.900
Jadi, itu juga bagaimana kita bisa menggabungkan antarmuka.

01:20.900 --> 01:23.410
Mengapa kita membagi antarmuka seperti ini?

01:23.410 --> 01:25.600
Nah, mungkin Anda memiliki aplikasi di mana

01:25.600 --> 01:27.810
pada beberapa objek, Anda hanya ingin memaksa

01:27.810 --> 01:31.120
mereka untuk memiliki nama, dan bukan metode sapaan, sedangkan

01:31.120 --> 01:34.630
pada objek lain, Anda membutuhkan sapaan dan nama.

01:34.630 --> 01:36.830
Dengan pemisahan ini, hal ini dimungkinkan.

01:36.830 --> 01:40.630
Beberapa objek, atau beberapa kelas hanya bisa mengimplementasikan Named,

01:40.630 --> 01:42.590
dan yang lainnya bisa mengimplementasikan

01:42.590 --> 01:45.990
Greetable dan dipaksa untuk memiliki salam dan nama.

01:45.990 --> 01:48.490
Jadi, memperluas antarmuka adalah mungkin.

01:48.490 --> 01:50.880
Dan di sana Anda juga bisa memperpanjang lebih dari satu.

01:50.880 --> 01:53.380
Jadi, Anda bisa menggabungkan beberapa antarmuka

01:53.380 --> 01:55.060
ke dalam satu antarmuka tunggal.

01:55.060 --> 01:58.570
Kita bisa menggabungkan antarmuka lain jika kita memilikinya.

01:58.570 --> 02:00.860
Cukup dipisahkan dengan koma.

02:00.860 --> 02:03.570
Ingatlah bahwa untuk suatu kelas, hal ini tidak mungkin dilakukan.

02:03.570 --> 02:05.710
Bila Anda menggunakan kelas-kelas dalam pewarisan,

02:05.710 --> 02:07.920
Anda hanya bisa mewarisi dari satu kelas.

02:07.920 --> 02:10.600
Anda tidak bisa mewarisi dari beberapa kelas.

02:10.600 --> 02:12.490
Untuk antarmuka yang berbeda.

02:12.490 --> 02:14.760
Untuk antarmuka, Anda memang dapat mewarisi

02:14.760 --> 02:16.920
dari beberapa antarmuka, karena pada akhirnya

02:16.920 --> 02:18.920
semuanya hanya digabungkan bersama, dan

02:18.920 --> 02:21.430
dalam fitur TypeScript murni ini, yang sebenarnya

02:21.430 --> 02:23.010
tidak diterjemahkan ke JavaScript

02:23.010 --> 02:24.800
seperti yang akan Anda lihat, oleh karena

02:24.800 --> 02:27.080
itu kami dapat melanggar aturan yang ditetapkan

02:27.080 --> 02:29.250
untuk kelas JavaScript, dan memperluas beberapa

02:29.250 --> 02:31.733
antarmuka.
