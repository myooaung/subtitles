WEBVTT

00:02.210 --> 00:03.450
Instructor Masculino: Ahora

00:03.450 --> 00:06.170
además de las propiedades, también se pueden agregar decoradores

00:06.170 --> 00:09.200
a los accesores y ahí voy a crear una nueva función decoradora porque

00:09.200 --> 00:11.660
esta ahora va a recibir argumentos libres.

00:11.660 --> 00:16.430
Log2, también obtendrá el objetivo que, de nuevo, es el prototipo, si estamos

00:16.430 --> 00:18.330
tratando con un accesorio de instancia,

00:18.330 --> 00:21.290
o si estamos tratando con uno estático, será la

00:21.290 --> 00:23.360
función del constructor por lo que

00:23.360 --> 00:24.960
no sabemos que seremos de

00:24.960 --> 00:27.290
tipo cualquiera.

00:27.290 --> 00:32.290
Entonces tendremos el nombre del miembro con el que estamos tratando.

00:32.410 --> 00:35.030
Así que el nombre del accesorio al final.

00:35.030 --> 00:38.683
Y también tendremos el descriptor de la propiedad aquí, que será

00:39.580 --> 00:42.030
de tipo descriptor de la propiedad.

00:42.030 --> 00:44.600
Es el tipo incorporado en TypeScript.

00:44.600 --> 00:49.600
Así que ahí dentro, vamos a registrar el decorador del accesorio y luego

00:50.030 --> 00:54.210
también registraré por consola el objetivo aquí, luego quizás

00:54.210 --> 00:56.470
nuevas líneas para hacerlas más

00:56.470 --> 01:01.470
legibles en la salida, el nombre y también el descriptor.

01:01.720 --> 01:05.890
Ahora vamos a añadir log2 al setter aquí como este y vamos a ver

01:05.890 --> 01:07.350
lo que obtenemos.

01:07.350 --> 01:10.733
Si guardamos eso, ves ahí abajo que tienes el

01:10.733 --> 01:14.090
decorador accessor que se ejecuta aquí.

01:14.090 --> 01:19.090
Volvemos a tener nuestro prototipo, lo mismo que un buff para la propiedad.

01:19.320 --> 01:23.570
Luego tenemos el nombre de nuestro accesorio, precio en este caso.

01:23.570 --> 01:24.900
No subraya el precio, por

01:24.900 --> 01:27.890
lo que no la propiedad con la que se trata internamente.

01:27.890 --> 01:30.570
En lugar de eso, realmente el nombre del propio accesorio.

01:30.570 --> 01:33.630
Y tenemos un descriptor de propiedades aquí donde vemos

01:33.630 --> 01:36.240
que una función setter está definida por ejemplo,

01:36.240 --> 01:37.600
una función getter no,

01:37.600 --> 01:41.990
porque para el precio sólo tengo un setter, ningún getter.

01:41.990 --> 01:44.320
Y vemos que no es enumerable, pero

01:44.320 --> 01:45.680
sí configurable.

01:45.680 --> 01:47.810
Para que podamos cambiar esta definición

01:47.810 --> 01:51.000
aquí, por ejemplo, que podemos eliminar y así sucesivamente.

01:51.000 --> 01:54.520
Todo esto existe y así es como podemos añadir un decorador

01:54.520 --> 01:56.650
a un accesorio, y lo que luego podemos

01:56.650 --> 01:58.920
acceder dentro de este decorador.

01:58.920 --> 02:00.910
Ahora, además de las propiedades y los accesores,

02:00.910 --> 02:04.350
también tenemos métodos y podemos añadir decoradores a los métodos.

02:04.350 --> 02:09.350
Así que aquí voy a añadir Log3, y añadir que a mi método de abajo para

02:09.430 --> 02:11.970
obtener el precio con el texto.

02:11.970 --> 02:13.220
Y ahora la pregunta es, por

02:13.220 --> 02:17.323
supuesto, ¿qué argumentos recibe un decorador de métodos de este tipo?

02:18.180 --> 02:22.230
Un decorador de método también recibe argumentos libres,

02:22.230 --> 02:25.520
el objetivo de nuevo que si es un método de instancia,

02:25.520 --> 02:28.420
es el prototipo del objeto.

02:28.420 --> 02:31.150
Si es un método estático, la función del constructor

02:31.150 --> 02:34.993
igual que antes, entonces el nombre del método aquí, así que una

02:36.450 --> 02:39.380
cadena o un símbolo en realidad.

02:39.380 --> 02:44.380
Y también el descriptor al final, descriptor de la propiedad.

02:44.490 --> 02:46.140
Estos son los argumentos libres que obtenemos

02:46.140 --> 02:48.110
aquí, y ves que son los mismos argumentos que en

02:48.110 --> 02:49.410
nuestro accesorio.

02:49.410 --> 02:51.630
Así que de hecho también podríamos reutilizar

02:51.630 --> 02:54.340
esto, pero voy a crear uno nuevo para que aquí

02:54.340 --> 02:57.483
pueda imprimir el método decorador.

02:59.020 --> 03:00.840
Ahora con eso si guardé esto, esto

03:01.980 --> 03:04.410
se ejecuta y ves aquí nuestro método decorador

03:04.410 --> 03:07.880
se ejecuta y luego aquí obtenemos nuestro prototipo, el mismo

03:07.880 --> 03:09.380
objeto que antes.

03:09.380 --> 03:11.310
Obtenemos el nombre del método

03:11.310 --> 03:14.700
aquí y obtenemos este descriptor de este método aquí.

03:14.700 --> 03:17.440
Así que el mismo comportamiento que antes, básicamente,

03:17.440 --> 03:19.400
sólo un descriptor es un poco diferente,

03:19.400 --> 03:20.950
ya que es un descriptor de método

03:20.950 --> 03:22.550
y no un descriptor de acceso.

03:22.550 --> 03:25.720
Tenemos un valor y una propiedad escribible aquí.

03:25.720 --> 03:27.750
Anteriormente en el descriptor de accesos,

03:27.750 --> 03:28.860
teníamos get y set.

03:28.860 --> 03:30.910
Pero eso es sólo una diferencia de java script,

03:30.910 --> 03:33.088
nada específico de TypeScript.

03:33.088 --> 03:38.088
Así que aquí tenemos nuestra tercera función decoradora que ahora

03:38.150 --> 03:40.070
añadimos al método.

03:40.070 --> 03:43.390
El último decorador que podemos añadir es a un parámetro.

03:43.390 --> 03:45.260
Así que hagamos eso ahora.

03:45.260 --> 03:47.550
Para ello, voy a crear una función más aquí,

03:47.550 --> 03:51.269
Log4 y quiero añadir Log4 a este parámetro que estoy recibiendo

03:51.269 --> 03:53.660
aquí, impuesto y usted podría añadir uno

03:53.660 --> 03:55.510
a cada parámetro que se obtiene,

03:55.510 --> 03:57.130
por supuesto.

03:57.130 --> 03:59.560
No es necesario, pero puedes añadirlos independientemente

03:59.560 --> 04:02.990
a cualquier parámetro al que quieras añadir un decorador.

04:02.990 --> 04:06.419
Ahora bien, ¿qué recibe un decorador de parámetros como argumentos?

04:06.419 --> 04:10.790
Pues bien, el objetivo es el mismo que antes.

04:10.790 --> 04:12.520
El siguiente argumento que obtenemos es

04:12.520 --> 04:14.100
el nombre, y no el nombre del parámetro,

04:14.100 --> 04:17.310
sino el nombre del método en el que hemos utilizado este parámetro.

04:17.310 --> 04:20.530
Así que, básicamente, lo mismo que en el decorador de métodos hasta ahora.

04:20.530 --> 04:22.170
Pero el último argumento es diferente.

04:22.170 --> 04:24.250
Ahora no es el descriptor de la propiedad,

04:24.250 --> 04:28.380
sino que es la posición de este argumento, por lo que el número del

04:28.380 --> 04:30.100
argumento.

04:30.100 --> 04:32.763
Aquí, por ejemplo, éste sería el primer argumento.

04:35.310 --> 04:38.670
Así que ahora de nuevo, vamos a copiar eso

04:38.670 --> 04:43.550
aquí y poner todo eso en el decorador de parámetros Log4.

04:43.550 --> 04:45.410
Y vamos a salir de la posición aquí también

04:45.410 --> 04:47.170
para que podamos ver lo que hay allí.

04:47.170 --> 04:50.960
Si ahora lo guardamos, vemos nuestro decorador de parámetros ahí arriba, no

04:50.960 --> 04:53.480
la última salida porque el orden de ejecución es diferente

04:53.480 --> 04:55.630
pero vemos nuestro decorador de parámetros

04:55.630 --> 04:57.180
aquí y luego aquí.

04:57.180 --> 04:59.530
Tenemos el prototipo como antes.

04:59.530 --> 05:00.860
Tenemos el nombre del método

05:00.860 --> 05:02.190
donde usamos este parámetro,

05:02.190 --> 05:04.770
y luego el índice de ese argumento, y que comienza

05:04.770 --> 05:06.240
en cero, por lo que el primer

05:06.240 --> 05:09.070
argumento tiene un número de cero aquí, un índice de

05:09.070 --> 05:10.360
cero, y ese es nuestro parámetro

05:10.360 --> 05:12.740
decorador.

05:12.740 --> 05:14.920
Así que estos son todos los lugares donde podemos

05:14.920 --> 05:16.370
añadir decoradores y TypeScript,

05:16.370 --> 05:18.570
y podemos hacer varias cosas con ellos.

05:18.570 --> 05:20.450
Ahora te mostraré un par de ejemplos

05:20.450 --> 05:21.660
en este módulo, y también

05:21.660 --> 05:24.813
te mostraré bibliotecas o frameworks que hacen

05:24.813 --> 05:28.380
un uso intensivo de los decoradores.

05:28.380 --> 05:30.550
Y te voy a mostrar lo que hacen con los decoradores

05:30.550 --> 05:34.583
para que te hagas una idea del poder que pueden tener los decoradores.
