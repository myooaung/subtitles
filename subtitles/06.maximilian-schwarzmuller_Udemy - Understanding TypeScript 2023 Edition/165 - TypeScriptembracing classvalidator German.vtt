WEBVTT

00:02.130 --> 00:03.630
Erzähler: Wir haben uns also Lodash

00:03.630 --> 00:06.210
angeschaut, ein Vanilla-JavaScript-Paket, bei dem wir einige

00:06.210 --> 00:08.360
Übersetzungen installieren mussten.

00:08.360 --> 00:10.310
Und wir haben uns den Class-Transformer

00:10.310 --> 00:13.530
angesehen, der auch in Vanilla JavaScript funktioniert,

00:13.530 --> 00:17.328
aber auch in TypeScript besonders gut funktioniert.

00:17.328 --> 00:20.330
Werfen wir nun einen Blick auf class-validator.

00:20.330 --> 00:24.540
Dies ist nun ein Paket, das TypeScript wirklich nutzt.

00:24.540 --> 00:28.300
Es baut auf dem Konzept der TypeScript-Dekoratoren auf

00:28.300 --> 00:32.340
und gibt uns eine ganz neue Art, mit ihnen zu arbeiten, oder zumindest

00:32.340 --> 00:34.330
eine fast ganz neue.

00:34.330 --> 00:38.230
Wenn Sie mein Dekorator-Modul in diesem Kurs verfolgt haben,

00:38.230 --> 00:41.200
werden Sie hier in dieser Vorlesung etwas sehen,

00:41.200 --> 00:44.150
das wir dort auch selbst gebaut haben.

00:44.150 --> 00:47.100
Mit dieser Bibliothek eines Drittanbieters müssen wir

00:47.100 --> 00:49.330
das Rad nicht mehr neu erfinden, wir müssen

00:49.330 --> 00:51.193
es nicht mehr selbst entwickeln.

00:51.193 --> 00:53.320
Und diese Bibliothek ist wohl auch

00:53.320 --> 00:55.710
etwas aufwändiger als unsere Lösung

00:55.710 --> 00:57.830
im Modul des Dekorators.

00:57.830 --> 01:00.026
Ich spreche von Validierung.

01:00.026 --> 01:02.870
Dies ist ein Paket, das es uns ermöglicht, Validierungsregeln

01:02.870 --> 01:06.390
mit Hilfe einiger Dekoratoren innerhalb einer Klasse hinzuzufügen,

01:06.390 --> 01:08.590
und dann, wann immer wir eine solche Klasse instanziieren,

01:08.590 --> 01:09.920
können wir sie tatsächlich

01:09.920 --> 01:12.610
für die Regeln validieren, die wir dort mit Hilfe der Dekoratoren

01:12.610 --> 01:15.610
eingerichtet haben.

01:15.610 --> 01:18.960
Um loszulegen, müssen wir nur dieses Paket hier importieren.

01:18.960 --> 01:23.130
Also npm install class-validator --save, und danach

01:23.130 --> 01:26.130
können wir gleich loslegen.

01:26.130 --> 01:29.220
Lassen Sie mich also den webpack-dev-server neu starten, und um

01:29.220 --> 01:30.600
dieses Paket zu verwenden, müssen

01:30.600 --> 01:33.580
wir ein paar Dekoratoren zu den Modellen hinzufügen, also zu

01:33.580 --> 01:35.740
den Klassen, in denen wir bestimmte Eigenschaften

01:35.740 --> 01:37.490
validieren wollen.

01:37.490 --> 01:39.730
In meinem Fall, hier im Produktmodell,

01:39.730 --> 01:43.240
werde ich also etwas von class-validator importieren.

01:43.240 --> 01:45.110
Und nun wieder, wenn Sie das Dekorator-Modul

01:45.110 --> 01:47.360
in diesem Kurs verfolgt haben, ist dies

01:47.360 --> 01:49.640
ein Konzept, das ich auch schon von Grund

01:49.640 --> 01:52.870
auf ohne dieses Paket gebaut habe.

01:52.870 --> 01:56.270
Aber natürlich haben wir eine sehr naive und einfache Version eingebaut,

01:56.270 --> 01:57.840
mit diesem Paket müssen wir es

01:57.840 --> 02:01.200
nicht selbst bauen und es ist auch ausgefeilter.

02:01.200 --> 02:02.770
Von class-validator können wir

02:02.770 --> 02:04.820
nun bestimmte Dekoratoren importieren.

02:04.820 --> 02:05.893
Zum Beispiel

02:07.139 --> 02:08.630
IsNotEmpty,

02:08.630 --> 02:11.410
oder auch IsNumber.

02:11.410 --> 02:13.500
Wir können auch IsPositive importieren.

02:15.940 --> 02:18.940
Jetzt können wir sie zu den Eigenschaften hinzufügen, die wir validieren wollen.

02:18.940 --> 02:20.900
So können wir zum Beispiel hier

02:20.900 --> 02:24.220
auf dem Titel IsNotEmpty als Dekorator hinzufügen,

02:24.220 --> 02:26.390
und dies sind alles Dekorator-Fabriken,

02:26.390 --> 02:29.610
also müssen Sie sie immer ausführen.

02:29.610 --> 02:31.318
Und auch hier,

02:31.318 --> 02:33.485
IsNumber und

02:34.472 --> 02:37.380
IsPositive.

02:37.380 --> 02:38.763
Lassen Sie uns das ausführen.

02:40.250 --> 02:41.730
Um hier Dekoratoren zu verwenden, sollten

02:41.730 --> 02:44.730
Sie auch zu tsconfig gehen. js-Datei, und stellen

02:44.730 --> 02:49.550
Sie sicher, dass Sie dort die experimentellen Dekoratoren aktivieren.

02:49.550 --> 02:51.593
Danach speichern Sie dies, und nun sollten

02:52.750 --> 02:55.040
auch diese Bereiche hier verschwinden.

02:55.040 --> 02:57.300
Wir müssen allerdings auch den Dev-Server neu starten,

02:57.300 --> 03:00.840
damit er die neue tsconfig übernimmt. js-Konvertierung.

03:00.840 --> 03:02.650
Jetzt haben wir also diese Regeln, diese

03:02.650 --> 03:04.768
Validierungsregeln hier hinzugefügt.

03:04.768 --> 03:07.710
Das bedeutet, dass der Titel niemals eine leere Zeichenkette

03:07.710 --> 03:11.830
sein darf und die Zahlen eine positive Zahl sein müssen.

03:11.830 --> 03:13.980
Jetzt können wir hier ein neues Produkt

03:13.980 --> 03:15.119
erstellen, sagen wir

03:15.119 --> 03:16.870
dort, newProd, wo wir new product

03:16.870 --> 03:19.078
aufrufen und eine leere Zeichenkette

03:19.078 --> 03:25.210
für den Titel übergeben, und dann minus 5.

03:25.210 --> 03:25.210
99 in für die Nummer.

03:25.210 --> 03:26.700
Wenn ich dann tröste. log newProd,

03:27.576 --> 03:29.920
getInformation, und führen

03:29.920 --> 03:31.730
Sie dies aus, mal sehen,

03:31.730 --> 03:34.830
wo es funktioniert.

03:34.830 --> 03:35.683
Okay, speichern Sie das.

03:37.840 --> 03:40.040
Hm, es funktioniert.

03:40.040 --> 03:42.330
Nun, ganz so weit sind wir noch nicht.

03:42.330 --> 03:46.470
Mit unseren Dekorateuren legen wir die Regeln fest.

03:46.470 --> 03:49.560
Aber diese Dekorateure allein bewirken nicht viel.

03:49.560 --> 03:52.880
Stattdessen müssen wir nun auch die Validator-Methode

03:52.880 --> 03:56.190
von class-validator importieren.

03:56.190 --> 03:57.300
Aus diesem Paket importieren

03:57.300 --> 03:59.840
wir also validate und müssen dies auf einer konkreten

03:59.840 --> 04:02.260
Instanz der Klasse ausführen, der wir unsere

04:02.260 --> 04:05.750
Dekoratoren hinzugefügt haben.

04:05.750 --> 04:07.300
In diesem Fall können

04:07.300 --> 04:12.020
wir also validate ausführen und den newProd an ihn übergeben.

04:12.020 --> 04:14.670
Und validate gibt dann ein Versprechen

04:14.670 --> 04:19.150
zurück, das tatsächlich Validierungsfehler liefern könnte.

04:19.150 --> 04:21.440
So können wir dann hier hinzufügen, wenn Sie in einer

04:21.440 --> 04:23.080
Lockerungsfunktion wären, könnten

04:23.080 --> 04:25.680
Sie natürlich auch ein einzelnes Gewicht verwenden.

04:25.680 --> 04:27.920
Und hier erhalten wir die Fehler zurück, die

04:27.920 --> 04:30.093
diese Validierungsfunktion findet.

04:30.980 --> 04:31.813
Wichtig ist, dass

04:31.813 --> 04:34.950
wir immer im then-Block landen, auch wenn es Fehler gibt. Wenn

04:34.950 --> 04:36.560
es also Validierungsfehler gibt,

04:36.560 --> 04:38.420
kommen wir nicht in einen Catch-Block,

04:38.420 --> 04:41.120
sondern immer in den then-Block.

04:41.120 --> 04:44.360
Hier können wir nun prüfen, ob die Punktlänge

04:44.360 --> 04:45.980
von errors, einem Array,

04:45.980 --> 04:48.400
größer als Null ist.

04:48.400 --> 04:51.300
Das bedeutet, dass es Validierungsfehler gibt.

04:51.300 --> 04:52.910
In diesem Fall können wir Validierungsfehler

04:53.750 --> 04:56.700
protokollieren und vielleicht auch die gefundenen

04:56.700 --> 04:59.200
Fehler ausgeben.

04:59.200 --> 05:01.820
Also Konsole. Fehler protokollieren, und ansonsten

05:01.820 --> 05:03.700
in meinem Fall hier, werde ich die Informationen

05:03.700 --> 05:05.290
protokollieren.

05:05.290 --> 05:06.580
Nun hängt es natürlich von der

05:06.580 --> 05:09.100
Anwendung ab, die Sie erstellen, was Sie hier tun wollen.

05:09.100 --> 05:10.860
In diesem Fall sollten Sie dem Benutzer

05:10.860 --> 05:13.790
eine Warnung anzeigen, wenn Fehler auftreten.

05:13.790 --> 05:15.360
Sie sollten die Eingabe zurücksetzen, was

05:15.360 --> 05:16.520
auch immer Sie tun wollen.

05:16.520 --> 05:19.690
Hier werde ich einfach etwas auf der Konsole protokollieren.

05:19.690 --> 05:22.080
Und wenn wir das jetzt speichern,

05:22.080 --> 05:24.870
sehen Sie Validierungsfehler und hier

05:24.870 --> 05:27.830
ein Array der gefundenen Fehler.

05:27.830 --> 05:31.890
Der erste Fehler betrifft zum Beispiel die Eigenschaft

05:31.890 --> 05:34.770
title, die nicht leer sein darf.

05:34.770 --> 05:38.290
Der zweite Fehler liegt in der Eigenschaft des Preises,

05:38.290 --> 05:41.150
dass er eine positive Zahl sein muss.

05:41.150 --> 05:44.950
Und so einfach können Sie Ihren Projekten mit diesem auf Dekoratoren

05:44.950 --> 05:47.960
basierenden Ansatz eine ziemlich leistungsfähige

05:47.960 --> 05:50.170
Validierung hinzufügen.

05:50.170 --> 05:53.190
Verwandt mit dem, was wir früher im Kurs gemacht haben,

05:53.190 --> 05:54.530
und dem Decorators-Modul,

05:54.530 --> 05:56.062
aber wie ich schon mehrfach

05:56.062 --> 05:59.890
erwähnt habe, ausgefeilter mit einer Menge eingebauter Regeln, und

05:59.890 --> 06:01.190
Sie können alles darüber

06:01.190 --> 06:03.610
natürlich in den Dokumenten dieses Pakets lernen,

06:03.610 --> 06:06.350
und ohne das Rad neu zu erfinden.

06:06.350 --> 06:09.300
Das class-validator-Paket ist also wirklich ein mächtiges

06:09.300 --> 06:10.930
Paket, das man kennen sollte,

06:10.930 --> 06:14.693
wenn man größere Projekte mit TypeScript erstellt.
