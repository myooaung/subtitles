WEBVTT

00:02.090 --> 00:05.740
解说员：这就是接口和类｡ 

00:05.740 --> 00:09.630
在本模块中, 我们详细介绍了类以及我们可以在其中执行的操作｡

00:09.630 --> 00:14.130
最后, 类和TypeScript只是在JavaScript类的基础上构建的,

00:14.130 --> 00:18.720
我在本模块前面已经对它们进行了总结｡

00:18.720 --> 00:20.710
接口是另一回事｡ 

00:20.710 --> 00:22.600
它们只存在于TypeScript中｡ 

00:22.600 --> 00:24.670
它们是一个纯粹的TypeScript特性,

00:24.670 --> 00:29.450
可以帮助您编写清晰､ 结构清晰且非常明确的代码｡

00:29.450 --> 00:33.010
它们可以帮助您强制类具有某些特性,

00:33.010 --> 00:36.810
或者强制对象具有某种结构｡

00:36.810 --> 00:39.860
正如您所了解的, 它们可以用作函数类型｡ 

00:39.860 --> 00:42.490
它们允许使用可选属性, 因此也允许使用所有可选方法,

00:42.490 --> 00:48.290
顺便说一下, 如果在方法名后面添加问号的话｡

00:48.290 --> 00:50.190
所以这是你可以使用的东西｡ 

00:50.190 --> 00:57.680
而且, 正如您刚才看到的, 在完成允许TypeScript检查代码的角色之后进行编译时,

00:57.680 --> 01:00.410
这些接口不会遗漏任何内容｡

01:00.410 --> 01:02.300
代码被简单地转储｡ 

01:02.300 --> 01:05.080
然而, 接口是一个强大的特性,

01:05.080 --> 01:09.140
它可以强制类或对象具有特定的结构,

01:09.140 --> 01:14.810
并清楚地描述对象的外观｡

01:14.810 --> 01:21.120
现在, 正如您所了解的, 如果您愿意, 可以将它们替换为自定义类型｡

01:21.120 --> 01:23.580
您也可以实现自定义类型, 但更常见的做法是使用接口来实现自定义类型,

01:23.580 --> 01:32.180
如果您想描述一个对象, 而不是实现它, 则使用接口｡

01:32.180 --> 01:33.980
所有这些都是历史原因,

01:33.980 --> 01:36.490
因为在TypeScript的早期,

01:36.490 --> 01:40.710
自定义类型不能像接口一样实现或使用｡

01:40.710 --> 01:42.610
现在有了更大的灵活性,

01:42.610 --> 01:46.420
但是如果你使用对象, 并且你想描述它们的结构,

01:46.420 --> 01:48.680
仍然推荐使用接口｡

01:48.680 --> 01:51.883
我们也会在本课程中一遍又一遍地看到它们｡
