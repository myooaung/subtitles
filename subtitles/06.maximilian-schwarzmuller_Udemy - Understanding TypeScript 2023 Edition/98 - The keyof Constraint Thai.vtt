WEBVTT

00:02.230 --> 00:04.930
ผู้สอน: เราหวังว่าเราจะลดพื้นฐานเกี่ยวกับยาชื่อสามัญลง

00:04.930 --> 00:07.150
ตอนนี้เรามาเจาะลึกลงไปในข้อจำกัดหรือข้อจำกัดประเภทใดประเภทหนึ่งโดยเฉพาะ

00:07.150 --> 00:10.400
ซึ่งคุณสามารถเพิ่มได้

00:10.400 --> 00:12.680
เพื่อสิ่งนั้น ฉันจะแลกเปลี่ยนฟังก์ชันอื่น

00:12.680 --> 00:16.293
ซึ่งเป็นฟังก์ชันทั่วไป ซึ่งฉันจะตั้งชื่อว่า extractAndConvert

00:18.700 --> 00:24.120
แนวคิดของฟังก์ชันนี้คือเราได้รับวัตถุเป็นอาร์กิวเมนต์แรก

00:24.120 --> 00:28.413
และพารามิเตอร์ที่สองคือคีย์ในตอนท้าย

00:30.050 --> 00:32.570
ตอนนี้ฉันต้องการคืนค่าสำหรับคีย์นั้นในวัตถุ ซึ่งเราสามารถทำได้ด้วยสัญกรณ์

00:32.570 --> 00:35.310
JavaScript เริ่มต้นนี้

00:35.310 --> 00:36.310
ใช้วงเล็บเหลี่ยมเพื่อ

00:36.310 --> 00:38.200
exe เป็นคุณสมบัติในวัตถุ แต่นั่นไม่ใช่

00:38.200 --> 00:39.840
TypeScript เฉพาะนั่นคือ Vanilla

00:39.840 --> 00:42.010
JavaScript อีกครั้ง

00:42.010 --> 00:43.000
ดังนั้น ที่นี่ เราสามารถพูดได้ว่า

00:43.000 --> 00:44.580
ที่นี่ เราต้องการมีวัตถุ

00:44.580 --> 00:48.460
และสำหรับคีย์ เราต้องการมีสตริง สมมุติว่า

00:48.460 --> 00:50.160
ตอนนี้ฉันได้รับข้อผิดพลาด

00:50.160 --> 00:57.510
เนื่องจากสิ่งที่เราไม่รู้ในท้ายที่สุดก็คือว่าวัตถุที่เราได้รับที่นี่จะมีรหัสนั้นจริงหรือไม่

00:57.510 --> 00:59.410
นั่นคือจุดสิ้นสุดที่ TypeScript

00:59.410 --> 01:01.430
บอกเราด้วยข้อผิดพลาดแปลก ๆ นี้

01:01.430 --> 01:02.530
ตัวอย่างเช่น ที่นี่

01:02.530 --> 01:09.770
ฉันสามารถคอนโซลบันทึกผลลัพธ์ของการเรียกสิ่งนี้โดยสมมติว่าเป็นวัตถุว่างและชื่อ

01:09.770 --> 01:12.600
และนี่คือวิธีที่ฉันเรียกสิ่งนี้ว่า extractAndConvert

01:12.600 --> 01:16.025
เพราะฉันต้องการเรียกสิ่งนี้โดยไม่บันทึกคอนโซลและพูดง่ายๆว่า

01:16.025 --> 01:18.600
Value, โคลอน, บวก

01:18.600 --> 01:19.660
แต่นั่นเป็นเพียงข้อสังเกต

01:19.660 --> 01:22.450
ฉันกำลังส่งกลับเราหลงทางในตอนท้ายด้วยข้อมูลที่ดึงมา

01:22.450 --> 01:23.840
แต่ปัญหาหลักที่นี่คือ

01:23.840 --> 01:28.020
ผมเรียกมันแบบนี้ได้ และมันจะส่งผ่านวัตถุเป็นพารามิเตอร์ตัวแรก

01:28.020 --> 01:29.890
แล้วก็สตริงเป็นวินาที

01:29.890 --> 01:31.430
แต่ถูกต้อง TypeScript บอกฉันว่าท้ายที่สุดแล้ว

01:31.430 --> 01:35.193
มันไม่รับประกันว่าคีย์นี้มีอยู่ในวัตถุนี้

01:36.420 --> 01:39.920
ตอนนี้เพื่อรับประกันสิ่งนี้ เราสามารถใช้ประเภททั่วไปได้อีกครั้งที่นี่

01:39.920 --> 01:43.130
เราสามารถพูดได้ว่าเรามีแบบ T และนั่นจะเป็นวัตถุของเราที่นี่

01:43.130 --> 01:46.550
เราสามารถพูดได้ว่าขยายวัตถุ

01:46.550 --> 01:48.363
แต่เราต้องพิมพ์ U ด้วย

01:49.440 --> 01:52.850
สมมติว่าคีย์ของเราในที่นี้ ซึ่งสุดท้ายแล้วต้องเป็นคีย์ประเภท

01:52.850 --> 01:56.320
T ของเรา

01:56.320 --> 02:04.890
จากวัตถุนี้ เราต้องการรับประกันว่าสิ่งที่เราได้รับจากพารามิเตอร์ที่สองในฐานะคีย์เป็นคุณสมบัติของประเภทแรกนั้น

02:04.890 --> 02:09.130
และสำหรับสิ่งนั้นเราสามารถพูดได้ว่าขยายคีย์ของ T

02:11.550 --> 02:13.540
และตอนนี้คุณเห็นว่าข้อผิดพลาดหายไปแล้ว

02:13.540 --> 02:15.370
แต่ฉันกลับได้รับข้อผิดพลาดด้านล่าง

02:15.370 --> 02:23.610
เพราะตอนนี้ฉันแจ้ง TypeScript ที่นี่ว่าพารามิเตอร์ตัวแรกควรเป็นอ็อบเจกต์ชนิดใดก็ได้ และพารามิเตอร์ตัวที่สองควรเป็นคีย์ชนิดใดก็ได้ใน

02:23.610 --> 02:25.870
วัตถุนั้น

02:25.870 --> 02:28.480
และที่นี่ ใช่ เรากำลังผ่านวัตถุชนิดใดก็ได้

02:28.480 --> 02:30.430
แต่เราไม่มีรหัสชื่ออยู่ในนั้น

02:30.430 --> 02:34.990
ข้อผิดพลาดนี้จะหายไปทันทีที่ฉันเพิ่มคีย์ชื่อเท่านั้น

02:34.990 --> 02:37.990
ดังนั้นนี่คือทุกครั้งที่เราสามารถใช้ประเภททั่วไปสำหรับคำหลัก

02:37.990 --> 02:41.800
keyoff นี้ได้ที่นี่ เพื่อบอก TypeScript ว่าเราต้องการให้แน่ใจว่าเรามีโครงสร้างที่ถูกต้อง

02:41.800 --> 02:56.740
และแน่นอนว่ามีประโยชน์จริงๆ เพราะมันช่วยให้เรามั่นใจได้ว่าเรา อย่าทำผิดพลาดโง่ๆ ที่เราพยายามเรียกฟังก์ชันนี้ ซึ่งสุดท้ายแล้ว เราพยายามทำให้ exe เป็นคุณสมบัติที่ไม่มีอยู่จริง

02:56.740 --> 02:58.140
วิธีนี้ใช้ได้ผล

02:58.140 --> 02:59.870
แต่ถ้าฉันพยายามเรียกใช้เป็น 'อายุ' ที่นี่

02:59.870 --> 03:01.570
ฉันได้รับข้อผิดพลาดอีกครั้ง เช่น

03:02.890 --> 03:05.560
ดังนั้นเรามาเปลี่ยนกลับเป็น 'ชื่อ' กันเถอะ
