WEBVTT

00:02.150 --> 00:03.930
Instrutor: Então adicionamos nosso primeiro

00:03.930 --> 00:06.120
pedido POST, somos capazes de criar um TODO.

00:06.120 --> 00:07.250
Agora temos mais rotas.

00:07.250 --> 00:10.170
Também temos uma rota para servir a todos os TODOS que criamos.

00:10.170 --> 00:11.750
Agora, esteja ciente de que, seu TODOS

00:11.750 --> 00:14.160
será reinicializado toda vez que você mudar e salvar

00:14.160 --> 00:16.630
seu código, pois isso reinicia seu servidor e perde tudo

00:16.630 --> 00:18.920
o que estava armazenado na memória e nós só estamos

00:18.920 --> 00:21.330
gerenciando nosso TODOS na memória.

00:21.330 --> 00:23.560
Isso é simplesmente algo que temos aqui no aplicativo

00:23.560 --> 00:24.930
fictício, em um aplicativo real,

00:24.930 --> 00:28.200
você naturalmente armazenaria isso em um banco de dados real, buscaria de lá e

00:28.200 --> 00:30.280
assim por diante e, portanto, sobreviveria.

00:30.280 --> 00:35.060
No entanto, aqui podemos criar uma nova função, getTodos e este será um RequestHandler

00:35.060 --> 00:38.030
aqui, para que você não tenha que definir os tipos

00:38.030 --> 00:42.330
em todos os parâmetros individualmente.

00:42.330 --> 00:46.120
E então lá dentro, eu simplesmente quero retornar uma resposta

00:46.120 --> 00:49.560
onde eu devolvo alguns dados JSON onde eu tenho meus todos

00:49.560 --> 00:52.420
e lá, eu só quero alcançar minha matriz de TODOs

00:52.420 --> 00:54.330
e enviar isso de volta para o cliente,

00:54.330 --> 00:56.530
e isso já pode ser tudo.

00:56.530 --> 00:57.810
Claro, você poderia ajustar

00:57.810 --> 00:59.640
isto, talvez você queira ter uma lógica

00:59.640 --> 01:03.120
diferente, talvez você queira classificar o TODOS primeiro ou algo

01:03.120 --> 01:06.690
parecido, mas isto em sua forma mais simples já é tudo o que precisamos

01:06.690 --> 01:10.530
aqui, ele retorna nosso TODOS, então uma função muito simples.

01:10.530 --> 01:13.240
Nas rotas do TODOS, agora só precisamos conectar isto.

01:13.240 --> 01:17.680
Portanto, vamos importarTodos também de nosso controlador

01:17.680 --> 01:20.640
e conectá-lo aqui com esta rota.

01:20.640 --> 01:23.430
E com isso, se agora salvarmos isto, já

01:23.430 --> 01:25.250
podemos vê-lo em ação.

01:25.250 --> 01:29.860
Se voltarmos e criarmos um novo pedido, um pedido GET,

01:29.860 --> 01:34.860
para http://localhost:3000/todos/ e enviarmos isso, recebemos

01:39.400 --> 01:41.410
de volta uma matriz vazia,

01:41.410 --> 01:44.400
por que isso acontece?

01:44.400 --> 01:46.750
Bem, eu disse que o TODOS seria liberado sempre que

01:46.750 --> 01:48.010
mudássemos o código e, portanto,

01:48.010 --> 01:49.750
o servidor seria reiniciado, então

01:49.750 --> 01:51.470
devemos criar um novo TODO agora sem

01:51.470 --> 01:54.110
reiniciar o servidor no meio do tempo.

01:54.110 --> 01:57.360
E se nós criamos esse TODO e agora obtemos

01:57.360 --> 02:01.770
nosso TODOS, vemos que criou o TODO com o ID, série 9811 e

02:01.770 --> 02:04.380
assim por diante, aqui também.

02:04.380 --> 02:05.960
Então, isso já está funcionando.

02:05.960 --> 02:08.980
Agora, já que estamos nisso, vamos também trabalhar na correção e exclusão

02:08.980 --> 02:10.590
e, é claro, sinta-se à vontade para inventar

02:10.590 --> 02:12.680
alguma lógica por conta própria.

02:12.680 --> 02:14.970
No final das contas, agora você tem todos os blocos de construção

02:14.970 --> 02:16.130
necessários para isso.

02:16.130 --> 02:18.480
Mas é claro que agora também o faremos juntos.

02:19.390 --> 02:21.570
Portanto, aqui agora no pedido do patch,

02:21.570 --> 02:24.350
vamos adicionar uma nova função de controlador.

02:24.350 --> 02:29.350
exportação constant updateTodo, que é do tipo RequestHandler e deve

02:30.660 --> 02:34.680
ter uma função neste formato que já conhecemos.

02:34.680 --> 02:37.310
E ali, o objetivo é extrair dados

02:37.310 --> 02:40.630
sobre o novo TODO do pedido recebido, e então

02:40.630 --> 02:44.140
atualizar o TODO com esses novos dados.

02:44.140 --> 02:47.240
Agora, observe que, como parte de nossa rota aqui, temos

02:47.240 --> 02:48.900
um segmento dinâmico.

02:48.900 --> 02:51.140
Temos este segmento de identificação.

02:51.140 --> 02:54.610
Portanto, isso é algo que poderemos extrair da URL, um

02:54.610 --> 02:58.750
valor concreto para este segmento dinâmico pode ser extraído.

02:58.750 --> 03:02.147
Portanto, aqui em nossa solicitação de entrada, você pode obter o todoId,

03:03.172 --> 03:07.987
de nossos paramédicos de solicitação. id,. id, porque esse é o nome que escolhi aqui.

03:07.987 --> 03:11.660
Se você escolheu um nome diferente aqui, você tem que usar um

03:11.660 --> 03:13.060
nome diferente ali.

03:13.060 --> 03:15.810
Agora, nós não temos tipos de apoio aqui, certo?

03:15.810 --> 03:18.410
O Params é de qualquer tipo.

03:18.410 --> 03:20.450
Agora porque os tipos podem analisar

03:20.450 --> 03:23.400
esta corda e entender o que está lá dentro.

03:23.400 --> 03:25.460
Assim, para obter melhores tipos de suporte,

03:25.460 --> 03:28.920
podemos realmente utilizar que o RequestHandler aqui é um tipo

03:28.920 --> 03:32.880
genérico e podemos adicionar parênteses angulares e basicamente dizer

03:32.880 --> 03:35.880
ao TypeScript quais parâmetros terão.

03:35.880 --> 03:37.800
Nós simplesmente colocamos isto em um

03:37.800 --> 03:39.300
objeto e lá temos agora um mapa

03:39.300 --> 03:42.180
de valores chave de todos os nossos pais que temos no URL.

03:42.180 --> 03:43.830
Assim, por exemplo, que temos um parâmetro

03:43.830 --> 03:46.730
de identificação, que no final contém uma corda.

03:46.730 --> 03:48.610
Isso é algo que podemos acrescentar aqui e agora

03:48.610 --> 03:50.230
você verá que obtemos preenchimento automático

03:50.230 --> 03:52.560
e o TypeScript sabe que isto será uma String.

03:52.560 --> 03:55.520
Portanto, é melhor assim, usando este tipo genérico.

03:55.520 --> 03:58.640
Agora, temos a identificação, precisamos também de algo do órgão

03:58.640 --> 04:01.050
de solicitação, para ser mais preciso, precisamos

04:01.050 --> 04:03.560
do novo texto do órgão de solicitação.

04:03.560 --> 04:08.130
Assim, o texto atualizado pode ser recuperado do corpo do pedido e agora

04:08.130 --> 04:11.700
novamente, vamos usar a digitação aqui, para deixar claro

04:11.700 --> 04:14.100
que haverá uma propriedade de texto no

04:14.100 --> 04:16.910
corpo e que este será do tipo String.

04:16.910 --> 04:19.750
E vamos recuperar o texto a seguir.

04:19.750 --> 04:22.373
E agora podemos atualizar o TODO em nossa matriz TODOS lá em cima.

04:23.830 --> 04:27.720
Para isso, vamos encontrar o índice do TODO que queremos

04:27.720 --> 04:28.710
atualizar.

04:28.710 --> 04:30.808
Ao chegar ao TODOS, e com o findIndex,

04:30.808 --> 04:33.760
podemos executar alguma lógica em cada item

04:33.760 --> 04:36.090
da matriz do TODOS.

04:36.090 --> 04:38.060
E aí estamos olhando para cada

04:38.060 --> 04:40.010
todo e se todo id é igual ao todo

04:40.010 --> 04:44.300
que temos aqui, sabemos que esse é o TODO que queremos atualizar.

04:44.300 --> 04:47.140
Agora, se por alguma razão isso deveria ser menos

04:47.140 --> 04:50.550
um, significa que não encontramos esse TODO, então se isso

04:50.550 --> 04:52.610
for menor que zero essencialmente,

04:52.610 --> 04:56.960
sabemos que algo deu errado e, neste caso, vou jogar um novo erro onde eu digo,

04:56.960 --> 04:59.630
Não consegui encontrar todo!

04:59.630 --> 05:03.633
E isso deve então acionar nosso middleware padrão de tratamento

05:04.760 --> 05:06.130
de erros aqui.

05:06.130 --> 05:08.633
Agora, se conseguirmos ultrapassar isso, encontramos

05:09.870 --> 05:12.450
a TODO, e então podemos simplesmente atualizar

05:12.450 --> 05:15.040
o todo neste índice em nossa matriz TODOS para ser

05:15.040 --> 05:18.960
uma nova TODO, onde mantemos a antiga identificação.

05:18.960 --> 05:23.270
Então, onde acessamos TODOS, todoIndex. id, então acessamos o antigo ID e o armazenamos,

05:23.270 --> 05:27.030
mas o texto aqui que eu

05:27.030 --> 05:29.490
defini, é claro que não o atribuímos

05:29.490 --> 05:31.713
desta forma.

05:32.870 --> 05:34.570
Mas o texto aqui que definimos é agora o texto atualizado.

05:34.570 --> 05:38.750
Isto substitui o TODO aqui, e depois disso podemos

05:38.750 --> 05:41.340
enviar uma resposta, com uma

05:41.340 --> 05:45.280
mensagem de, por exemplo, Atualizado.

05:45.280 --> 05:47.053
E onde também anexamos o TODOS

05:47.990 --> 05:51.470
todoIndex atualizado à resposta de saída, e definimos isto

05:51.470 --> 05:55.090
igual a, bem, TODOS todoIndex, que agora detém o novo valor.

05:55.090 --> 05:59.090
Isto é algo que chamamos de fazer aqui em nossa lógica de atualização,

05:59.090 --> 06:02.430
claro, algum código falso porque ainda estamos trabalhando

06:02.430 --> 06:03.960
com isto na matriz TODOS de

06:03.960 --> 06:07.150
memória, mas isto mostra como usamos o TypeScript aqui,

06:07.150 --> 06:09.060
e isto é o principal.

06:09.060 --> 06:11.100
Portanto, vamos tentar esta função de atualização agora.

06:11.100 --> 06:13.620
Para isso podemos voltar ao carteiro, e no final,

06:13.620 --> 06:16.260
agora quero enviar um pedido de PATCH, porque nas

06:16.260 --> 06:19.960
rotas, estamos esperando por este pedido de Patch para esta rota.

06:19.960 --> 06:23.460
E por falar nisso, talvez devêssemos também conectar esta

06:23.460 --> 06:24.293
rota a esta função

06:24.293 --> 06:26.490
de controlador primeiro.

06:26.490 --> 06:28.850
Então, vamos ao arquivo de rotas e atualização

06:28.850 --> 06:33.420
de importaçãoTodo e estabeleçamos esta conexão aqui.

06:33.420 --> 06:35.590
E depois disso, podemos prosseguir e enviar este pedido.

06:35.590 --> 06:38.570
Então agora de volta ao carteiro, PATCH

06:38.570 --> 06:41.890
é o que queremos enviar e depois é http://localhost:3000/todos

06:41.890 --> 06:46.320
e agora a idéia do TODO que queremos atualizar como parte

06:46.320 --> 06:49.430
do URL.

06:49.430 --> 06:50.573
Agora, como salvamos algo, como salvamos

06:51.500 --> 06:54.970
algumas mudanças, nosso servidor foi reiniciado, portanto, todos os TODOS serão perdidos de qualquer forma.

06:54.970 --> 06:58.890
Portanto, antes de tudo, reenviemos esse pedido de

06:58.890 --> 07:01.150
PÓS para criar um novo TODO.

07:01.150 --> 07:02.450
E então aqui temos a identificação desse TODO.

07:02.450 --> 07:05.170
Agora podemos adicionar esta identificação aqui a esta URL.

07:05.170 --> 07:08.800
E também acrescentarei um corpo que deve ser do tipo JSON, onde definimos

07:08.800 --> 07:11.780
estes novos dados que queremos enviar para o servidor.

07:11.780 --> 07:15.560
Agora tenha em mente em nosso controlador de atualização,

07:15.560 --> 07:18.570
estou procurando por um campo chamado texto, no

07:18.570 --> 07:20.970
corpo de solicitação de entrada.

07:20.970 --> 07:22.900
Portanto, devemos fornecer isto novamente aqui

07:22.900 --> 07:24.580
nos dados do JSON que estamos enviando.

07:24.580 --> 07:26.690
Terminar o curso em um mês,

07:26.690 --> 07:29.440
este pode ser o nosso novo texto.

07:29.440 --> 07:31.520
Se agora enviarmos isto, vemos que foi atualizado.

07:31.520 --> 07:35.210
E se agora eu conseguir todos os TODOS, também vemos que

07:35.210 --> 07:37.180
ainda há apenas um TODO, mas simplesmente

07:37.180 --> 07:39.430
mudou o texto.

07:39.430 --> 07:41.623
Portanto, agora que isto está funcionando, também podemos atualizar o TODO.

07:42.950 --> 07:46.470
Vamos também verificar o que acontece se eu tiver uma identificação que

07:46.470 --> 07:48.780
não existe, por exemplo, apagando o último dígito

07:48.780 --> 07:50.620
aqui, então eu recebo, Não consegui encontrar

07:50.620 --> 07:53.430
tudo na minha resposta de erro do tipo 500.

07:53.430 --> 07:57.670
Portanto, isto também está com bom aspecto.

07:57.670 --> 07:59.660
Como último passo, vamos adicionar uma função para apagar uma TODO.

07:59.660 --> 08:03.800
Assim, na pasta dos controladores, vou exportar uma constante chamada,

08:03.800 --> 08:07.210
deleteTodo, que é do tipo RequestHandler.

08:07.210 --> 08:11.460
E mais uma vez, recebemos nosso pedido, nossa resposta,

08:11.460 --> 08:14.040
e então a próxima função aqui.

08:14.040 --> 08:17.320
E aqui, agora eu quero encontrar o TODO

08:17.320 --> 08:20.270
e simplesmente removê-lo.

08:20.270 --> 08:21.543
Para isso, podemos realmente copiar

08:22.380 --> 08:25.090
este código onde obtemos a identificação do TODO e, em seguida, o índice.

08:25.090 --> 08:29.360
Basta nos livrarmos daquela linha onde extraímos o texto atualizado,

08:29.360 --> 08:32.210
porque para um pedido de DELETE, não haverá corpo

08:32.210 --> 08:35.660
de pedido, mas precisamos da, id do TODO que faz parte da

08:35.660 --> 08:37.400
nossa rota do URL.

08:37.400 --> 08:40.340
E então encontramos o índice e, uma vez obtido

08:40.340 --> 08:43.530
o índice, podemos ir aos TODOs, chamar o método splice

08:43.530 --> 08:47.350
e remover o todo no todoIndex, e somente esse todo.

08:47.350 --> 08:51.620
E depois disso, podemos enviar uma resposta onde

08:51.620 --> 08:54.040
dizemos: Todo eliminado! assim sem mais nem menos.

08:54.040 --> 08:58.490
Esta poderia ser nossa lógica de eliminação.

08:58.490 --> 08:59.380
Agora é hora de conectar

08:59.380 --> 09:01.760
isto, então na pasta de rotas, vamos importar o DeleteTodo

09:01.760 --> 09:04.560
dos controladores TODOs e conectá-lo lá embaixo.

09:04.560 --> 09:07.440
E com isto conectado, se agora salvarmos isto, novamente, precisamos

09:08.340 --> 09:09.963
adicionar uma TODO porque todas as TODO

09:11.120 --> 09:14.370
são liberadas a cada reinício de servidor, então aqui está ela.

09:14.370 --> 09:16.720
Copie essa identificação.

09:16.720 --> 09:20.550
E agora vamos enviar esse pedido de DELETE.

09:20.550 --> 09:22.680
Portanto, um novo pedido DELETE aqui, para

09:22.680 --> 09:24.980
http:/localhost:3000/todos/this id.

09:24.980 --> 09:27.160
Nenhum corpo precisa ser adicionado.

09:27.160 --> 09:32.160
Clique em Enviar e funciona.

09:32.800 --> 09:34.880
Se eu o enviar novamente, não encontramos

09:34.880 --> 09:37.180
erro porque acabamos de apagá-lo.

09:37.180 --> 09:39.950
E se tivermos todos os TODOS, isso deve ser um

09:39.950 --> 09:41.570
conjunto vazio e isto.

09:41.570 --> 09:42.723
Então isto agora está funcionando

09:42.723 --> 09:45.550
e isto é basicamente uma funcionalidade CRUD, adicionada

09:45.550 --> 09:46.750
com TypeScript aqui neste

09:46.750 --> 09:49.550
simples Nodo e aplicativo Express.

09:49.550 --> 09:50.990
Agora, é claro que essa é uma aplicação bastante

09:50.990 --> 09:52.940
trivial aqui, mas já nos mostra algum uso do TypeScript.

09:52.940 --> 09:56.060
Ele nos mostra que escrevemos um código que deve lhe parecer familiar

09:56.060 --> 09:58.870
se você trabalhar no resto deste curso, e que estamos usando

09:58.870 --> 10:00.480
todas as características que você

10:00.480 --> 10:02.000
aprendeu lá.

10:02.000 --> 10:04.750
E assim como na seção Reagir, tudo isso é importante.

10:04.750 --> 10:07.610
Você pode usar tudo o que aprendeu sobre TypeScript

10:07.610 --> 10:10.110
aqui também, porque ele está sendo compilado

10:10.110 --> 10:11.520
para o código JavaScript

10:11.520 --> 10:13.340
regular no final, que nós então

10:13.340 --> 10:14.990
servimos.
