WEBVTT

1
00:00:02.260 --> 00:00:03.920
<v Instructor>So, discriminated unions.</v>

2
00:00:03.920 --> 00:00:05.750
Really, really useful.

3
00:00:05.750 --> 00:00:09.060
Another very useful feature is type casting.

4
00:00:09.060 --> 00:00:12.640
Type casting helps you tell TypeScript that

5
00:00:12.640 --> 00:00:15.350
some value is of a specific type

6
00:00:15.350 --> 00:00:19.240
where TypeScript is not able to detect it on it's own,

7
00:00:19.240 --> 00:00:22.660
but you as a developer know that it will be the case.

8
00:00:22.660 --> 00:00:25.030
A good example for this is if we get X to

9
00:00:25.030 --> 00:00:27.120
something in the dom.

10
00:00:27.120 --> 00:00:29.560
Let's say here we have a paragraph in the dom

11
00:00:29.560 --> 00:00:32.180
only a paragraph, nothing else in there,

12
00:00:32.180 --> 00:00:33.390
and it's an empty paragraph.

13
00:00:33.390 --> 00:00:35.190
So obviously if we save that,

14
00:00:35.190 --> 00:00:37.150
we don't see anything here, on the screen.

15
00:00:37.150 --> 00:00:38.950
Now we can get access to that paragraph

16
00:00:38.950 --> 00:00:40.543
from inside our script here.

17
00:00:43.160 --> 00:00:48.160
Const paragraph with document query selector P, for example.

18
00:00:49.180 --> 00:00:51.890
Now when we use query selector and we pass in P as a

19
00:00:51.890 --> 00:00:54.500
selector so it's selecting by the P tag,

20
00:00:54.500 --> 00:00:57.070
then TypeScript is actually able to find out,

21
00:00:57.070 --> 00:00:59.510
as you can see if I hover over it, that this

22
00:00:59.510 --> 00:01:02.480
will be of type paragraph element or null

23
00:01:02.480 --> 00:01:05.900
because maybe such an element doesn't exist in the page,

24
00:01:05.900 --> 00:01:07.050
but that's a different thing.

25
00:01:07.050 --> 00:01:09.920
Let's ignore the or null case for now.

26
00:01:09.920 --> 00:01:12.400
The important thing is that TypeScript actually finds out

27
00:01:12.400 --> 00:01:14.600
that this is a paragraph element.

28
00:01:14.600 --> 00:01:16.800
Now, this changes if we select by something else,

29
00:01:16.800 --> 00:01:18.460
let's say an ID.

30
00:01:18.460 --> 00:01:22.020
We name this here message-output, so this paragraph

31
00:01:22.020 --> 00:01:23.920
has an ID of message-output.

32
00:01:23.920 --> 00:01:25.890
Now we as the developer of course know that we

33
00:01:25.890 --> 00:01:28.360
assigned this ID to this paragraph,

34
00:01:28.360 --> 00:01:29.780
but TypeScript doesn't know that.

35
00:01:29.780 --> 00:01:33.020
TypeScript does not dive into our HTML files

36
00:01:33.020 --> 00:01:34.590
and analyze them.

37
00:01:34.590 --> 00:01:37.360
So if now we select by that ID here, for example,

38
00:01:37.360 --> 00:01:41.720
with getElementById, then we see what TypeScript infers

39
00:01:41.720 --> 00:01:45.130
is that this is just an HTML element or null,

40
00:01:45.130 --> 00:01:49.830
it doesn't know which specific HTML element that is.

41
00:01:49.830 --> 00:01:52.720
Now, for a paragraph, that might not matter too much,

42
00:01:52.720 --> 00:01:54.830
maybe we just want to do things with it

43
00:01:54.830 --> 00:01:57.290
that we could do with any HTML element,

44
00:01:57.290 --> 00:01:59.990
for example, access its text content

45
00:01:59.990 --> 00:02:01.470
or anything like that.

46
00:02:01.470 --> 00:02:03.220
But what if we had an input here?

47
00:02:03.220 --> 00:02:07.750
What if we actually had an input type text,

48
00:02:07.750 --> 00:02:10.430
and we want to get the value the user entered

49
00:02:10.430 --> 00:02:12.760
so I'll give it an ID of user-input

50
00:02:12.760 --> 00:02:15.500
and now I select this in my TypeScript code.

51
00:02:15.500 --> 00:02:17.730
So here I select by ID user-input,

52
00:02:17.730 --> 00:02:21.530
and it's no longer a paragraph, but userInputElement.

53
00:02:21.530 --> 00:02:24.023
Now we as a developer, we know that here,

54
00:02:24.909 --> 00:02:26.700
we reach out to this input element,

55
00:02:26.700 --> 00:02:28.530
but as I said, TypeScript doesn't know that.

56
00:02:28.530 --> 00:02:31.140
TypeScript doesn't read our HTML code,

57
00:02:31.140 --> 00:02:34.435
so TypeScript only knows that it's some HTML element.

58
00:02:34.435 --> 00:02:37.860
Now, if I would want to set the value property

59
00:02:37.860 --> 00:02:40.902
of this therefore, and it would try to do

60
00:02:40.902 --> 00:02:45.000
userInputElement.value equal hi there,

61
00:02:45.000 --> 00:02:47.050
you see that I actually get an error.

62
00:02:47.050 --> 00:02:48.960
I get an error because for one,

63
00:02:48.960 --> 00:02:50.780
this object is possibly null.

64
00:02:50.780 --> 00:02:54.220
We can fix this by adding an exclamation mark after this,

65
00:02:54.220 --> 00:02:56.210
and I'll come back to this in a second,

66
00:02:56.210 --> 00:02:58.390
but even then I still get an error that

67
00:02:58.390 --> 00:03:01.640
value does not exist on type HTML Element

68
00:03:01.640 --> 00:03:03.890
because this generic type,

69
00:03:03.890 --> 00:03:08.343
which basically any HTML element has as a type,

70
00:03:08.343 --> 00:03:11.630
does not support properties that are specific to,

71
00:03:11.630 --> 00:03:14.510
well, specific HTML elements.

72
00:03:14.510 --> 00:03:17.540
So, we would need to tell TypeScript that actually

73
00:03:17.540 --> 00:03:20.860
what we select here is not just not null,

74
00:03:20.860 --> 00:03:25.080
but that it's also of type HTMLInputElement.

75
00:03:25.080 --> 00:03:28.240
And that's what we can do with type casting.

76
00:03:28.240 --> 00:03:31.153
Now, there are two ways of type casting,

77
00:03:31.153 --> 00:03:34.170
two syntaxes we can use, and they are equivalent.

78
00:03:34.170 --> 00:03:36.971
One is that we add something in front of the thing

79
00:03:36.971 --> 00:03:41.920
we wanna convert, or where we wanna tell TypeScript to type.

80
00:03:41.920 --> 00:03:44.170
We add angled brackets opening and closing

81
00:03:44.170 --> 00:03:45.810
and then between these brackets,

82
00:03:45.810 --> 00:03:49.480
the type of the thing after the angled brackets.

83
00:03:49.480 --> 00:03:51.223
In this case, HTMLInputElement.

84
00:03:53.110 --> 00:03:54.970
And this type is globally available because

85
00:03:54.970 --> 00:03:57.963
in my tsconfig file, I am including the dom lib.

86
00:03:59.180 --> 00:04:00.810
With that, TypeScript knows that

87
00:04:00.810 --> 00:04:03.830
whatever we select here after the angled brackets

88
00:04:03.830 --> 00:04:06.530
will be of type HTMLInputElement,

89
00:04:06.530 --> 00:04:08.950
and therefore it doesn't complain anymore.

90
00:04:08.950 --> 00:04:10.330
So, this is version one.

91
00:04:10.330 --> 00:04:12.830
Let me copy that and comment it out

92
00:04:12.830 --> 00:04:14.750
and show you the alternative.

93
00:04:14.750 --> 00:04:18.000
This works absolutely fine and you can use this.

94
00:04:18.000 --> 00:04:21.210
Now, if you know React, however, you know that

95
00:04:21.210 --> 00:04:24.400
there, you also have such an angled bracket syntax

96
00:04:24.400 --> 00:04:26.970
inside of JavaScript or TypeScript

97
00:04:26.970 --> 00:04:29.200
if you use that for React files,

98
00:04:29.200 --> 00:04:33.550
where you write JSX code in your React components.

99
00:04:33.550 --> 00:04:36.060
Now, if you don't know React, that might not tell you much.

100
00:04:36.060 --> 00:04:40.800
Just be aware that a similar syntax exists in React projects

101
00:04:40.800 --> 00:04:43.320
and there the angled brackets are not used

102
00:04:43.320 --> 00:04:47.480
to pass any information regarding the types you're using,

103
00:04:47.480 --> 00:04:50.390
but instead they are parsed by some build tools

104
00:04:50.390 --> 00:04:53.200
and by React, ultimately, to know what you want to

105
00:04:53.200 --> 00:04:54.390
render on the screen.

106
00:04:54.390 --> 00:04:56.750
So, totally detached from TypeScript.

107
00:04:56.750 --> 00:04:59.880
To not clash with that JSX syntax,

108
00:04:59.880 --> 00:05:01.900
the TypeScript team provides an alternative

109
00:05:01.900 --> 00:05:04.350
to this angled bracket type casting.

110
00:05:04.350 --> 00:05:06.450
You can also add something after

111
00:05:06.450 --> 00:05:07.920
the thing you want to type cast,

112
00:05:07.920 --> 00:05:09.960
so after this selection in this case,

113
00:05:09.960 --> 00:05:12.600
and that thing is the as keyword.

114
00:05:12.600 --> 00:05:14.740
And then here you again add the type

115
00:05:14.740 --> 00:05:16.750
to which you wanna cast this.

116
00:05:16.750 --> 00:05:19.970
So, this now tells TypeScript that the expression

117
00:05:19.970 --> 00:05:23.730
in front of it, in this case, this expression here,

118
00:05:23.730 --> 00:05:27.405
will yield a value of type HTMLInputElement.

119
00:05:27.405 --> 00:05:30.067
Therefore, again, we get no error.

120
00:05:30.067 --> 00:05:31.650
So, this is an alternative,

121
00:05:31.650 --> 00:05:33.940
and you can use either of the two syntaxes,

122
00:05:33.940 --> 00:05:36.350
whatever you prefer, you just should try

123
00:05:36.350 --> 00:05:38.990
to be consistent throughout your project then

124
00:05:38.990 --> 00:05:42.377
so that you don't alternate between these two syntaxes.

125
00:05:42.377 --> 00:05:45.220
And with that, you can pass this valuable

126
00:05:45.220 --> 00:05:47.480
extra information to TypeScript

127
00:05:47.480 --> 00:05:50.400
and make code like this work, even though TypeScript

128
00:05:50.400 --> 00:05:52.760
on its own would not be able to find out

129
00:05:52.760 --> 00:05:56.000
that this here yields an HTMLInputElement.

130
00:05:56.000 --> 00:05:57.940
Of course, since you're forcing TypeScript

131
00:05:57.940 --> 00:06:00.420
to use this type, it's your responsibility

132
00:06:00.420 --> 00:06:02.200
as the developer to ensure that

133
00:06:02.200 --> 00:06:05.620
whatever this expression yields will be of that type.

134
00:06:05.620 --> 00:06:07.700
Otherwise, you might get a run time error

135
00:06:07.700 --> 00:06:09.920
or unexpected behavior at run time

136
00:06:09.920 --> 00:06:12.780
if you try to interact with that element in a way

137
00:06:12.780 --> 00:06:14.423
that actually is not supported.

138
00:06:15.610 --> 00:06:18.060
So, type casting is a powerful feature.

139
00:06:18.060 --> 00:06:20.490
So is this exclamation mark here.

140
00:06:20.490 --> 00:06:22.590
I actually did explore this a little bit

141
00:06:22.590 --> 00:06:24.820
earlier in the course already.

142
00:06:24.820 --> 00:06:27.470
This exclamation mark allows us to tell TypeScript

143
00:06:27.470 --> 00:06:31.090
that the expression in front of it will never yield null.

144
00:06:31.090 --> 00:06:33.170
And this is required for some expressions,

145
00:06:33.170 --> 00:06:35.070
like this here, when you select something

146
00:06:35.070 --> 00:06:38.010
from the dom that might return null.

147
00:06:38.010 --> 00:06:40.980
If we know as developer that this will never return null,

148
00:06:40.980 --> 00:06:43.690
then we can use this exclamation mark.

149
00:06:43.690 --> 00:06:45.470
Otherwise, and you learned that already,

150
00:06:45.470 --> 00:06:48.248
I just want to reiterate on that.

151
00:06:48.248 --> 00:06:49.380
Otherwise, if you're not sure that

152
00:06:49.380 --> 00:06:52.600
this will not return null, you can use an if check.

153
00:06:52.600 --> 00:06:56.070
So you could check if userInputElement is true,

154
00:06:56.070 --> 00:06:57.510
and therefore it is not null,

155
00:06:57.510 --> 00:06:59.440
and then use it in there.

156
00:06:59.440 --> 00:07:02.720
Now, I had to remove the type casting in this case

157
00:07:02.720 --> 00:07:04.670
because if we do type cast here,

158
00:07:04.670 --> 00:07:07.170
we also tell TypeScript that this will not be null,

159
00:07:07.170 --> 00:07:10.470
and since I'm not certain about that, I can't cast here.

160
00:07:10.470 --> 00:07:13.120
Instead, I have to do that here when I use the value,

161
00:07:13.120 --> 00:07:14.290
and therefore I want to do it

162
00:07:14.290 --> 00:07:16.600
before I access the value property,

163
00:07:16.600 --> 00:07:19.820
by adding as HTMLInputElement like this.

164
00:07:19.820 --> 00:07:21.530
Of course that, however, would fail.

165
00:07:21.530 --> 00:07:24.060
This is invalid syntax, you would try to

166
00:07:24.060 --> 00:07:28.030
access a value property on an HTMLInputElement thing,

167
00:07:28.030 --> 00:07:30.280
and this doesn't even make sense.

168
00:07:30.280 --> 00:07:33.010
We simply have to wrap this expression into parenthesis,

169
00:07:33.010 --> 00:07:35.670
then make sure that this is evaluated first,

170
00:07:35.670 --> 00:07:37.590
and then we try to access value

171
00:07:37.590 --> 00:07:39.480
on the result of this expression.

172
00:07:39.480 --> 00:07:41.650
And now we have an alternative to using

173
00:07:41.650 --> 00:07:42.893
the exclamation mark.

