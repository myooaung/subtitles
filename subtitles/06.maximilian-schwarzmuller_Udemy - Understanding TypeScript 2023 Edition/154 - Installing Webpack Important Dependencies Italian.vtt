WEBVTT

00:02.160 --> 00:05.373
-: Quindi, tornando al nostro progetto, se si vuole usare webpack lì, per prima

00:07.223 --> 00:09.948
cosa abbandonerò la compilazione e il server di sviluppo corrente

00:09.948 --> 00:10.870
e poi, statisticamente,

00:10.870 --> 00:13.440
mi assicurerò che si possa usare webpack lì.

00:13.440 --> 00:16.420
Ora, poiché questo è già un file del file package dot

00:16.420 --> 00:19.462
json, possiamo usare NPM per installare altre dipendenze

00:19.462 --> 00:21.050
in questo progetto.

00:21.050 --> 00:23.410
Quindi, semplicemente, abbiamo bisogno di più librerie

00:23.410 --> 00:24.940
di terze parti in questo progetto.

00:24.940 --> 00:28.610
E qui non intendo librerie di terze parti che forniscono determinate

00:28.610 --> 00:31.480
funzionalità utilizzando il nostro codice, ma piuttosto

00:31.480 --> 00:33.930
librerie di terze parti che ci aiutano a impostare

00:33.930 --> 00:37.157
un flusso di lavoro e una configurazione del progetto che rendono

00:37.157 --> 00:40.430
lo sviluppo molto efficiente per noi.

00:40.430 --> 00:45.110
Lo facciamo con NPM installato, dash dash safe dash

00:45.110 --> 00:48.600
dev per indicare che è una dipendenza

00:48.600 --> 00:53.600
solo di sviluppo, e poi webpack webpack dash CLI, webpack

00:53.713 --> 00:58.713
dash dev dash server typescript e ts loader.

01:01.030 --> 01:03.040
Si tratta di una serie di pacchetti, di cui

01:03.040 --> 01:04.800
dirò tra un attimo le funzioni.

01:04.800 --> 01:06.680
Quindi, per prima cosa, premiamo invio e

01:06.680 --> 01:08.485
assicuriamoci che tutti questi pacchetti

01:08.485 --> 01:10.801
vengano installati nel nostro progetto; in seguito,

01:10.801 --> 01:14.100
daremo un'occhiata a ogni pacchetto e vedremo perché lo abbiamo installato,

01:14.100 --> 01:16.290
quindi aspettiamo che finisca.

01:16.290 --> 01:18.530
Quindi ha terminato l'installazione

01:18.530 --> 01:21.710
per me e ora analizziamo ciò che abbiamo installato.

01:21.710 --> 01:25.380
In package dot json, la nuova sezione delle dipendenze di dev, o esisteva

01:25.380 --> 01:27.063
già, ma ora abbiamo molti nuovi

01:27.063 --> 01:29.474
pacchetti, dovrei dire, questi pacchetti

01:29.474 --> 01:31.290
sono stati aggiunti.

01:31.290 --> 01:33.690
A cosa servono tutti questi pacchetti?

01:33.690 --> 01:35.460
Iniziamo con webpack.

01:35.460 --> 01:37.580
Webpack è lo strumento di cui ho appena

01:37.580 --> 01:40.080
parlato, è il cuore dell'intera configurazione

01:40.080 --> 01:41.780
che stiamo per creare.

01:41.780 --> 01:43.980
È uno strumento che ci permette di inserire

01:43.980 --> 01:47.150
alcune funzionalità per raggruppare il nostro codice

01:47.150 --> 01:49.210
e anche per trasformarlo.

01:49.210 --> 01:52.470
E trasformare la nostra parte di codice è importante, abbiamo

01:52.470 --> 01:54.740
un progetto dattiloscritto qui, giusto?

01:54.740 --> 01:56.620
Naturalmente si potrebbe usare webpack

01:56.620 --> 02:00.220
per raggruppare tutti gli output JavaScript, ma sarebbe ancora

02:00.220 --> 02:03.310
più bello se webpack facesse entrambe le cose.

02:03.310 --> 02:06.250
Trasformare il nostro codice dattiloscritto in JavaScript

02:06.250 --> 02:10.180
e poi emettere effettivamente un file Javascript in bundle, e webpack

02:10.180 --> 02:13.420
è in grado di farlo, fortunatamente.

02:13.420 --> 02:16.610
Abbiamo bisogno della CLI di webpack per eseguire i comandi

02:16.610 --> 02:18.922
di webpack nel nostro progetto e del server

02:18.922 --> 02:21.603
dev di webpack per avere un server di sviluppo integrato,

02:21.603 --> 02:24.286
che avvia webpack sotto il cofano, che controlla

02:24.286 --> 02:27.056
i nostri file per le modifiche, che attiva automaticamente

02:27.056 --> 02:30.180
webpack per ricompilare quando qualcosa cambia e che

02:30.180 --> 02:34.760
serve automaticamente la nostra pagina.

02:34.760 --> 02:37.300
E poi abbiamo typescript e typescript

02:37.300 --> 02:39.460
loader, il loader ts qui.

02:39.460 --> 02:42.850
Ora abbiamo già installato typescript a livello globale sulla nostra macchina,

02:42.850 --> 02:46.208
e questo è il motivo per cui siamo in grado di eseguire tsc dash w.

02:46.208 --> 02:49.760
È buona norma installare automaticamente una copia di typescript

02:49.760 --> 02:53.450
per ogni progetto, in modo da avere una versione specifica di

02:53.450 --> 02:56.000
typescript per questo progetto.

02:56.000 --> 02:58.320
Il vantaggio è che se si cambia la versione

02:58.320 --> 03:01.624
globale di typescript, non si interrompe la versione del progetto,

03:01.624 --> 03:05.170
la sua configurazione se si interrompono le modifiche a typescript

03:05.170 --> 03:07.280
stesso, quindi possiamo bloccare una

03:07.280 --> 03:10.340
versione specifica di typescript per un progetto, ecco

03:10.340 --> 03:13.880
perché l'abbiamo installata separatamente.

03:13.880 --> 03:16.440
E il caricatore ts ora è un pacchetto che

03:16.440 --> 03:18.380
lavorerà insieme a webpack.

03:18.380 --> 03:21.068
Il caricatore ts è un pacchetto che indica a webpack

03:21.068 --> 03:24.396
come convertire il codice typescript in Javascript, in

03:24.396 --> 03:29.180
modo che webpack sia in grado di fare entrambe le cose: compilare il nostro codice,

03:29.180 --> 03:30.920
con l'aiuto del caricatore typescript,

03:30.920 --> 03:33.370
che a sua volta ovviamente usa il compilatore

03:33.370 --> 03:36.665
typescript sotto il cofano, e poi webpack è anche in grado

03:36.665 --> 03:44.260
di raggruppare i nostri file javascript emessi in un file js in un unico file di codice.

03:44.260 --> 03:47.440
Bene, e con questo iniziamo semplicemente a impostare

03:47.440 --> 03:50.852
un progetto webpack, in modo da poter usare webpack per

03:50.852 --> 03:53.223
tutte queste belle cose.
