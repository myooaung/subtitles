WEBVTT

00:02.140 --> 00:03.620
-: Öyleyse bu genel tiplerle

00:03.620 --> 00:06.220
çalışmaya devam edelim çünkü kafanızı sarmanın

00:06.220 --> 00:08.305
garip olabileceğini biliyorum; Sonunda

00:08.305 --> 00:09.970
gerçekten basitler.

00:09.970 --> 00:12.180
Ortalama bir genel fonksiyon oluşturalım,

00:12.180 --> 00:14.810
sayalım ve yazdıralım.

00:14.810 --> 00:19.810
Şimdi bu fonksiyon bazı argümanlar, bazı parametreler almalıdır.

00:20.330 --> 00:23.470
Buna element adını verelim, ancak jenerik bir türde

00:23.470 --> 00:26.530
olması gereken isim gerçekten size kalmış.

00:26.530 --> 00:28.340
Çünkü en azından belli açılardan,

00:28.340 --> 00:30.380
tipler gerçekten umurumda değil.

00:30.380 --> 00:33.400
Diyelim ki bu fonksiyonda bir jenerik tipimiz

00:33.400 --> 00:35.800
var ve parametremiz de bu tipte.

00:35.800 --> 00:38.350
Bu arada, genel tipler için tipik olan da budur.

00:38.350 --> 00:40.030
Genel bir işleviniz varsa, parametreniz

00:40.030 --> 00:42.180
genellikle bu türden olacaktır.

00:42.180 --> 00:43.890
Öyle olmak zorunda değildir, ancak onlarla

00:43.890 --> 00:45.890
daha fazla deneyim kazandıkça göreceğiniz

00:45.890 --> 00:46.920
gibi, genel işlevlerle

00:46.920 --> 00:49.080
genellikle bu şekilde çalışırsınız.

00:49.080 --> 00:50.670
Yani burada genel tipimizle

00:50.670 --> 00:52.350
count ve print var ve element

00:52.350 --> 00:54.430
de bu tipte.

00:54.430 --> 00:56.500
Şimdi burada döndürmek

00:56.500 --> 01:00.300
istediğim şey, ilk öğenin öğemin kendisi ve

01:00.300 --> 01:03.190
ikinci öğenin bir açıklama dizesi

01:03.190 --> 01:07.070
olması gereken iki öğeli nienda tuple.

01:07.070 --> 01:10.160
Belki bu nedenle sayım ve tanımlama olarak adlandırabiliriz.

01:10.160 --> 01:15.160
Burada açıklama metnim var ve burada değer yok diyeceğim

01:15.410 --> 01:19.890
ve uzunluğu olmayan bir öğe iletirsek bunu kullanmak

01:19.890 --> 01:22.620
istiyorum.

01:22.620 --> 01:25.570
Çünkü count ve describe ile benim düşüncem, bir dizi ya da karakter

01:25.570 --> 01:29.040
dizisi girebilmemiz ve bu karakter dizisi ya da karakter dizisindeki

01:29.040 --> 01:32.040
karakter ya da öğe sayısını geri alabilmemizdir.

01:32.040 --> 01:34.040
Yani boş bir dizemiz veya boş

01:34.040 --> 01:37.440
bir dizimiz varsa, got no değerini kullanmak istiyorum,

01:37.440 --> 01:42.440
ancak burada eleman nokta uzunluğunun sıfırdan büyük olduğunu kontrol

01:43.210 --> 01:46.170
edersem, açıklama metnini got artı eleman

01:47.430 --> 01:52.430
nokta uzunluğu artı elemanlar olarak ayarlamak istiyorum.

01:55.850 --> 01:58.100
Daha da spesifik olabilir ve burada

01:58.100 --> 02:03.100
uzunluğun bire eşit olup olmadığını kontrol edebilir ve ardından bir

02:06.590 --> 02:11.590
öğe var diyebilirsiniz, aksi takdirde öğe uzunluğu birden büyükse,

02:11.720 --> 02:13.750
açıklama metni eşittir got artı

02:13.750 --> 02:18.750
öğe uzunluğu öğelerine sahip oluruz, böylece çoğul formu doğru şekilde

02:18.990 --> 02:21.173
elde ederiz.

02:22.850 --> 02:25.220
Şimdi burada, ikinci öğe için açıklama metni var ve

02:25.220 --> 02:27.040
buraya geri dönün. Şimdi burada zaten uzunlukla

02:27.040 --> 02:29.480
ilgili şikayet türlerini görüyorsunuz.

02:29.480 --> 02:32.350
Çünkü o elemanın bir uzunluğu olduğu belli değil.

02:32.350 --> 02:34.770
Bu yüzden belki de bunu açıkça belirtmeliyiz.

02:34.770 --> 02:38.430
Bunu yeni bir arayüz ya da type anahtar sözcüğünü kullanarak özel

02:38.430 --> 02:41.060
bir tür oluşturarak yapabiliriz ve ben burada

02:41.060 --> 02:44.750
lengthy adını vereceğim bir arayüzü tercih edeceğim ve sonuçta

02:44.750 --> 02:47.440
bir sayı vermesi gereken length özelliğine sahip

02:47.440 --> 02:50.820
bir nesnemiz olacağını garanti edeceğim.

02:50.820 --> 02:52.870
Ve sonra burada bir kısıtlama koyabilir

02:52.870 --> 02:54.740
ve T'nin uzadığını söyleyebiliriz.

02:54.740 --> 02:57.710
Böylece ne elde edersek edelim, bir uzunluk özelliğine sahip olacağımızı

02:57.710 --> 03:01.053
ve bir dizi veya dizenin bir uzunluk özelliğine sahip olacağını biliyoruz.

03:02.030 --> 03:07.030
Şimdi burada, konsol günlüğü sayabilir, tanımlayabilir

03:07.500 --> 03:11.240
ve diyelim ki merhaba diyebilirim.

03:11.240 --> 03:14.280
Şimdi bu işe yarıyor çünkü bir dizenin uzunluk özelliği vardır.

03:14.280 --> 03:15.290
Bu bir nesne değil.

03:15.290 --> 03:17.310
Bu bir dizedir, ancak perde arkasında

03:17.310 --> 03:19.980
Javascript bunu anında bir nesneye dönüştürür ve

03:19.980 --> 03:21.720
ihtiyaç duyduğumuzda bir uzunluk

03:21.720 --> 03:23.940
özelliği ekler. Dolayısıyla bu şekilde

03:23.940 --> 03:26.960
rahatlıkla adlandırabiliriz. İlk olarak kod yazın, burada içinde

03:26.960 --> 03:33.580
bir dize veya T tipi eleman bulunan bir dizi döndürüyoruz.

03:33.580 --> 03:33.580
Şimdi

03:33.580 --> 03:36.060
bir tuple elde etmek istiyorum, bu yüzden burada daha spesifik

03:36.060 --> 03:39.110
olacağım ve dönüş tipini temel olarak ilk elemanı T tipinde ve ikinci elemanı

03:39.110 --> 03:41.330
string tipinde olacak şekilde tam olarak iki elemanlı

03:41.330 --> 03:43.850
bir dizi olarak ayarlayacağım.

03:43.850 --> 03:46.270
Şimdi burada, ilk öğenin genel türümüzün

03:46.270 --> 03:49.360
herhangi bir öğesi ve ikinci öğenin bir dize

03:49.360 --> 03:52.010
olacağı bir tuple döndürdüğümüzü

03:52.010 --> 03:54.110
söylüyorum.

03:54.110 --> 03:56.820
Şimdi, bunu kaydedersek, hatasız olarak yeniden

03:56.820 --> 04:00.330
derlenir ve merhaba, dokuz öğe var, çünkü orada dokuz karakterimiz

04:00.330 --> 04:02.330
var yazdırır.

04:04.320 --> 04:06.890
Bunu spor ve yemek pişirme öğelerinin

04:06.890 --> 04:09.530
bulunduğu bir diziyle de çağırabiliriz

04:09.530 --> 04:12.460
ve şimdi açıklama metni olarak iki öğemiz olduğunu

04:12.460 --> 04:15.990
göreceksiniz veya elbette boş bir diziyle, bu durumda,

04:15.990 --> 04:18.660
bunu kaydedersem hiçbir değer almayız,

04:18.660 --> 04:24.103
ancak bunu örneğin bir sayıyla çağıramayız çünkü bir sayının uzunluk özelliği

04:24.103 --> 04:28.090
yoktur ve bu nedenle bu çalışmaz.

04:28.090 --> 04:32.900
Böylece, burada da genel fonksiyonumuzu elde ettik.

04:32.900 --> 04:35.043
Fikir daha önceki fonksiyona benzer.

04:35.043 --> 04:38.680
Burada elde ettiğimiz verilerin türü konusunda biraz spesifik olmak

04:38.680 --> 04:40.540
istemiyoruz. Bunun bir dize, bir dizi

04:40.540 --> 04:43.180
ya da uzunluk özelliği olan başka bir şey olması gerçekten

04:43.180 --> 04:45.610
umurumuzda değil. Sadece bir uzunluk özelliğine

04:45.610 --> 04:47.930
sahip olmasıyla ilgileniyoruz ve sonra bununla bir şeyler

04:47.930 --> 04:49.980
yapmak istiyoruz çünkü kodumuzda uzunluk özelliğine

04:49.980 --> 04:51.970
güveniyoruz, bu yüzden bunu aldığımızı garanti

04:51.970 --> 04:53.540
etmemiz gerekiyor, ancak bunun dışında,

04:53.540 --> 04:55.370
burada hangi veri türünü aldığımızla gerçekten

04:55.370 --> 04:59.490
ilgilenmiyoruz.

04:59.490 --> 04:59.490
Bunu

04:59.490 --> 05:01.820
bir dizeye veya bir diziye kilitlemek istemiyorum ve

05:01.820 --> 05:04.220
olası tüm farklı türleri işlemek için bir sürü aşırı yük

05:04.220 --> 05:05.830
oluşturmak istemiyorum.

05:05.830 --> 05:08.124
Ayrıca burada çok uzun bir birlik türü oluşturmak

05:08.124 --> 05:10.970
istemiyorum çünkü uzunluk özelliği olan türleri

05:10.970 --> 05:13.610
unutabilirim ya da uzunluk özelliği olan kendi

05:13.610 --> 05:16.220
nesnemi oluşturursam, bunu burada string ya

05:16.220 --> 05:18.640
da array ya da bunun gibi bir türle kısıtlarsam

05:18.640 --> 05:21.580
buna izin vermeyebilirim.

05:21.580 --> 05:23.500
Bu nedenle, daha esnek olmak istiyorum

05:23.500 --> 05:25.380
ve jenerik tiplerle bunu yapabiliriz,

05:25.380 --> 05:27.550
tam tipi önemsemiyoruz.

05:27.550 --> 05:30.080
Burada, kısıtlama sayesinde, yalnızca uzunluk

05:30.080 --> 05:33.363
özelliğine sahip olmasıyla ilgileniyorum.
