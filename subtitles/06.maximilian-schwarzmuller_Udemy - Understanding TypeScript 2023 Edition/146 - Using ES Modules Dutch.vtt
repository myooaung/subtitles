WEBVTT

00:02.400 --> 00:04.350
Instructeur: Naamruimtes zijn

00:04.350 --> 00:07.240
aardig, maar ze zijn niet per se perfect.

00:07.240 --> 00:09.680
We zagen een probleem in het laatste college

00:09.680 --> 00:13.290
waar ik handmatig alle pendenties aan elk bestand toevoegde.

00:13.290 --> 00:15.620
Wanneer ik verwijder, sleep en neerzet uit projectlijst,

00:15.620 --> 00:17.340
ja bijvoorbeeld, compileert het nog

00:17.340 --> 00:18.900
steeds zonder fouten.

00:18.900 --> 00:20.350
Dit is niet ideaal.

00:20.350 --> 00:22.360
Nu kan het wel of niet werken, afhankelijk

00:22.360 --> 00:25.047
van de vraag of een ander bestand het drag-drop model importeert

00:25.047 --> 00:26.590
dat ik hier uiteindelijk nodig

00:26.590 --> 00:27.550
heb.

00:27.550 --> 00:29.100
Wat hier het geval zou zijn.

00:29.100 --> 00:31.533
Dus technisch gezien, zelfs na het verwijderen

00:31.533 --> 00:33.200
hiervan, werkt het hier.

00:33.200 --> 00:35.580
Maar dit is niet geweldig, dit is behoorlijk gevaarlijk.

00:35.580 --> 00:38.560
Als we erop vertrouwen dat een bestand het voor

00:38.560 --> 00:41.990
ons zal afhandelen, wel, als we dan dat bestand verwijderen

00:41.990 --> 00:44.830
of veranderen dat ons redde, veranderen we plots

00:44.830 --> 00:47.740
iets totaal ongerelateerds en stopt onze app

00:47.740 --> 00:49.240
met werken.

00:49.240 --> 00:51.420
Dat willen we zeker niet.

00:51.420 --> 00:53.900
Het zou dus mooi zijn als we import en export

00:53.900 --> 00:58.050
hadden die duidelijk aangeven wat we importeren uit welk bestand.

00:58.050 --> 00:59.660
En als we hier iets nodig hebben,

00:59.660 --> 01:01.120
Drag Target bijvoorbeeld,

01:01.120 --> 01:03.400
en we importeren het niet expliciet, krijgen

01:03.400 --> 01:04.840
we een foutmelding.

01:04.840 --> 01:06.450
Dat is eigenlijk wat we willen.

01:06.450 --> 01:10.235
En we krijgen dit gedrag met ES6-modules.

01:10.235 --> 01:12.930
Nu, ES6 modules bestaan ook buiten het type van

01:12.930 --> 01:14.800
de wereld, moderne browsers ondersteunen

01:14.800 --> 01:17.340
ze natively, waar de browser dan in principe

01:17.340 --> 01:19.630
alle pendencies van een bestand zal downloaden

01:19.630 --> 01:22.960
wanneer het wordt uitgevoerd.

01:22.960 --> 01:25.150
Maar types kunnen ze ook importeren en krijgen

01:25.150 --> 01:28.350
dan de initiële type-ondersteuning als we ze gebruiken.

01:28.350 --> 01:31.007
Hoe werken ES6-modules nu?

01:31.007 --> 01:33.600
Laten we opnieuw beginnen met slepen en neerzetten.

01:33.600 --> 01:35.240
Laten we dat naamruimte-ding verwijderen,

01:35.240 --> 01:37.360
dat is een pure typeconstructie.

01:37.360 --> 01:40.030
Maar laten we het sleutelwoord export houden.

01:40.030 --> 01:42.150
Het export sleutelwoord is niet alleen

01:42.150 --> 01:44.290
de daar om te werken met naamspaties, het

01:44.290 --> 01:46.980
is eigenlijk een standaard Java script syntaxis die

01:46.980 --> 01:49.800
allemaal even belangrijk is door typ script.

01:49.800 --> 01:52.360
Het betekent dat je deze interfase en deze

01:52.360 --> 01:53.600
hier ook exporteert

01:53.600 --> 01:56.870
uit dit bestand en dat je het dan kunt importeren in

01:56.870 --> 01:58.460
een ander bestand.

01:58.460 --> 02:01.290
In ons geval hebben we het nodig in de projectitem-

02:01.290 --> 02:02.980
en projectlijstbestanden.

02:02.980 --> 02:05.230
Laten we nu beginnen met het project item.

02:05.230 --> 02:09.030
Om iets van ES-module te importeren, dus met die ES-module

02:09.030 --> 02:11.450
synthax, specificeer je import bovenaan

02:11.450 --> 02:14.440
het bestand of bijna bovenaan het bestand voordat

02:14.440 --> 02:16.110
je begint met het schrijven

02:16.110 --> 02:18.970
van eigenlijke code.

02:18.970 --> 02:23.240
Importeren van en dan wijs je dat bestand aan met een relatief

02:23.240 --> 02:27.320
pad van het bestand waarop je importeert.

02:27.320 --> 02:29.340
Dus in dit geval moeten we I niveau omhoog met

02:29.340 --> 02:31.030
twee punten en een schuine streep.

02:31.030 --> 02:32.509
Zodat we in de bronmap zitten,

02:32.509 --> 02:35.550
en dan moeten we hier naar de map modules gaan en met

02:35.550 --> 02:37.450
slepen importeren.

02:37.450 --> 02:40.480
Nu belangrijk, voeg hier dot JS toe, want je

02:40.480 --> 02:43.480
moet importeren alsof dit al gecompileerd

02:43.480 --> 02:46.470
is, want dit wordt overgenomen in vanilla Java

02:46.470 --> 02:49.130
script en dan moet het daar zoeken naar

02:49.130 --> 02:50.860
Java script dus voor Java

02:50.860 --> 02:53.580
script bestanden dus dot JS moet toegevoegd

02:53.580 --> 02:55.010
worden.

02:55.010 --> 02:57.560
Nu importeer je daar iets uit en voor dan

02:57.560 --> 02:59.320
voeg je accolades toe waartussen

02:59.320 --> 03:01.500
je aangeeft wat je uit dat bestand

03:01.500 --> 03:03.150
wilt importeren.

03:03.150 --> 03:06.430
Daar krijg ik al auto completion ik wil

03:06.430 --> 03:08.480
draggable importeren.

03:08.480 --> 03:10.910
Nu is draggable hier beschikbaar en

03:10.910 --> 03:14.430
types ziet dat het niet beschikbaar is en is blij.

03:14.430 --> 03:16.860
Nu moeten we alles omzetten zodat het tijdens de uitvoering

03:16.860 --> 03:17.930
kan worden getoond.

03:17.930 --> 03:20.370
Dus laten we ook hier de naamruimte wegwerken.

03:20.370 --> 03:22.340
Nu moet ik ook de accolade sluiten.

03:22.340 --> 03:24.870
En nu bijvoorbeeld hier krijgen we wat we willen,

03:24.870 --> 03:27.540
we krijgen fouten, we krijgen component fout, project,

03:27.540 --> 03:29.650
dit ontbreekt allemaal.

03:29.650 --> 03:31.890
Dus laten we al deze dingen exporteren en importeren.

03:31.890 --> 03:33.220
Bijvoorbeeld in basiscomponent

03:33.220 --> 03:34.540
de naamruimte wegwerken, het export

03:34.540 --> 03:36.810
sleutelwoord behouden zoals je geleerd hebt.

03:36.810 --> 03:38.270
Verwijder de afsluitende

03:38.270 --> 03:40.810
accolade en formatteer en projectimport.

03:40.810 --> 03:43.380
We kunnen ons altijd ontdoen van de naamruimte.

03:43.380 --> 03:45.760
En alle referenties hier, kun je eigenlijk alle

03:45.760 --> 03:48.803
referentie-importen die je overal hebt verwijderen.

03:51.300 --> 03:53.593
Verwijder alle accolades met naamspaties.

03:55.010 --> 03:56.950
Projectlijst, verwijder alle naamruimte

03:56.950 --> 03:58.466
en verwijzingen, verwijder de

03:58.466 --> 04:00.690
afsluitende accolade daar beneden.

04:00.690 --> 04:03.320
En decorateurs, weg met de naamspatie

04:03.320 --> 04:05.330
en de afsluitende accolade en

04:05.330 --> 04:07.940
drag and drop, daar zijn we al vanaf.

04:07.940 --> 04:10.230
Project, verwijder de naamspatie en

04:10.230 --> 04:11.920
de afsluitende accolade.

04:11.920 --> 04:14.460
Project bleef niet verrassend de naamruimte

04:14.460 --> 04:16.223
en de afsluiting.

04:18.390 --> 04:22.620
Curly brace hier vertrouwden we eigenlijk op een project dat door een ander

04:22.620 --> 04:24.740
bestand werd geïmporteerd, ik had er

04:24.740 --> 04:26.620
hier geen verwijzingen naar.

04:26.620 --> 04:28.770
Dus dat was dat gevaarlijke gedrag waar

04:28.770 --> 04:29.880
ik het over had.

04:29.880 --> 04:31.871
Dit had kunnen mislukken als we niet zouden importeren

04:31.871 --> 04:35.120
of als we in een ander bestand niet naar ons projectonderdeel in de naamruimte

04:35.120 --> 04:36.710
zouden verwijzen.

04:36.710 --> 04:39.090
Dus dat was zeker niet ideaal.

04:39.090 --> 04:41.560
Maar daarmee gaan we verder met onze refactoring.

04:41.560 --> 04:44.430
In de validatie hier verwijder je de naamspatie

04:44.430 --> 04:46.050
en alle afsluitende accolades

04:46.050 --> 04:47.550
onderaan.

04:47.550 --> 04:49.150
En last but not least een app TS, ontdoe

04:49.150 --> 04:51.503
je van deze importen en van de naamruimte.

04:52.700 --> 04:55.350
Dus nu hebben we overal fouten, maar nu kunnen

04:55.350 --> 04:56.988
we opnieuw beginnen.

04:56.988 --> 04:59.560
Laten we nu misschien opnieuw beginnen in de basiscomponent.

04:59.560 --> 05:01.610
Dit ziet er goed uit, het klaagt niet

05:01.610 --> 05:03.700
lijkt alles te hebben wat het wil.

05:03.700 --> 05:06.250
Project import, wel, het is klagen.

05:06.250 --> 05:08.450
Bijvoorbeeld daar moeten we component.

05:08.450 --> 05:12.070
Dus laten we een import toevoegen bovenaan en laten we

05:12.070 --> 05:15.830
component importeren van dot slash basis component.

05:15.830 --> 05:18.410
Zo importeer je relatief als er iets in

05:18.410 --> 05:19.990
dezelfde map staat.

05:19.990 --> 05:22.370
Punt schuine streep aan het begin, dan de bestandsnaam

05:22.370 --> 05:24.490
en dan alles is belangrijk punt JS.

05:24.490 --> 05:26.753
Vergeet de punt JS niet aan het einde.

05:28.100 --> 05:30.250
Nu hebben we hier ook de valideerbare

05:31.170 --> 05:34.650
tussenfase nodig en de valideer methode, auto mind

05:34.650 --> 05:36.810
en project state.

05:36.810 --> 05:39.140
Dus laten we al deze dingen importeren

05:39.140 --> 05:44.080
laten we importeren van dot slash, of nee ga een niveau omhoog

05:44.080 --> 05:46.149
dan util dan validatie dot

05:46.149 --> 05:49.460
JS, laten we importeren van That File, validatable

05:49.460 --> 05:52.100
en de valideer functie en importeer

05:53.010 --> 05:56.250
auto bind van, ga een niveau omhoog decorators

05:56.250 --> 06:00.350
autobind JS.

06:00.350 --> 06:02.600
En last but not least de projectstaat

06:02.600 --> 06:05.220
laten we importeren van een niveau

06:05.220 --> 06:07.580
hoger projectstaat JS .

06:07.580 --> 06:11.000
Van daaruit kunnen we de projectstatusconstante importeren

06:11.000 --> 06:13.250
die we daar exporteren.

06:13.250 --> 06:15.390
Dit is alle invoer die we nodig hebben om dit

06:15.390 --> 06:16.773
bestand te laten werken.

06:18.190 --> 06:20.480
Dus laten we nu verder gaan met het project.

06:20.480 --> 06:23.270
Daar hebben we autobind nodig, component,

06:23.270 --> 06:24.853
projectmodel.

06:24.853 --> 06:26.700
Dus laten we al deze dingen toevoegen.

06:26.700 --> 06:30.520
Laten we bijvoorbeeld het projectmodel importeren

06:30.520 --> 06:34.523
van dot dot slash models project JS.

06:35.580 --> 06:38.080
Laten we ook component toevoegen die

06:39.340 --> 06:41.110
in dezelfde map staat.

06:41.110 --> 06:45.530
Dus importeer dot slash basiscomponent JS

06:45.530 --> 06:49.020
en auto bind, laten we auto bind importeren

06:50.790 --> 06:55.790
van dot slash decorators auto bind JS.

06:56.020 --> 06:59.383
En nu heeft dit bestand hier ook alles wat het nodig heeft.

07:01.260 --> 07:03.410
Laten we nu verder gaan met de projectenlijst.

07:03.410 --> 07:06.610
Hier in de projectlijst hebben we ook de

07:06.610 --> 07:10.250
component nodig, dus die kopiëren we van projectitem

07:10.250 --> 07:14.260
naar projectlijst TS, maar we hebben hier geen draggoble

07:14.260 --> 07:16.120
nodig, maar sleepdoel,

07:16.120 --> 07:19.420
dus dat importeren we.

07:19.420 --> 07:22.307
En daarnaast hebben we de projectstatus

07:22.307 --> 07:24.550
nodig.

07:24.550 --> 07:26.540
Ja, dit zijn de dingen die we nodig hebben.

07:26.540 --> 07:28.780
En ook de project item klasse.

07:28.780 --> 07:31.030
Vanuit het projectmodelbestand kunnen we dus

07:31.030 --> 07:32.720
ook de projectstatus importeren.

07:32.720 --> 07:35.340
U kunt meerdere geëxporteerde dingen uit eenzelfde

07:35.340 --> 07:36.840
bestand importeren door ze

07:36.840 --> 07:38.730
eenvoudig te scheiden met een komma

07:38.730 --> 07:41.740
tussen deze accolades, net zoals u het hier ziet.

07:41.740 --> 07:45.910
We importeren ook de projectstaatconstante uit

07:46.790 --> 07:48.790
de staatsmap, projectstaat

07:48.790 --> 07:52.470
JS en importeren ook als laatste, hier helemaal

07:52.470 --> 07:57.130
onderaan, de projectitemklasse.

07:57.130 --> 08:01.770
Dus importeer project item van dot slash project

08:01.770 --> 08:03.623
item dot JS.

08:06.810 --> 08:08.280
Dus laten we verder gaan.

08:08.280 --> 08:11.280
Autobind is prima, project status klagen daar hebben

08:11.280 --> 08:13.600
we het project model voor nodig.

08:13.600 --> 08:15.740
Dus bovenaan importeren

08:16.820 --> 08:20.300
we project van één niveau hoger modellen

08:20.300 --> 08:22.823
project dot JS.

08:24.450 --> 08:27.630
We gebruiken hier ook project status dus laten we dat

08:27.630 --> 08:29.573
importeren uit datzelfde bestand'

08:32.320 --> 08:33.960
En daarmee krijgen we als laatste

08:33.960 --> 08:35.660
het app TS bestand daar moeten

08:35.660 --> 08:38.810
we project input importeren.

08:38.810 --> 08:43.610
van dot slash componenten project invoer.

08:43.610 --> 08:48.030
JS en de projectlijst van projectlijst JS' Als we

08:49.290 --> 08:52.280
dit nu opslaan zou het zonder fouten

08:52.280 --> 08:54.330
moeten compileren en nu

08:54.330 --> 08:58.500
gebruiken we ES6-modules om onze import en export

08:58.500 --> 09:00.823
te organiseren.

09:02.640 --> 09:05.460
Maar als we naar de browser kijken, krijgen

09:05.460 --> 09:07.040
we een foutmelding.

09:07.040 --> 09:09.390
De reden daarvoor is dat als we de dist map controleren

09:09.390 --> 09:12.013
we ons bundel JS bestand goed hebben.

09:13.040 --> 09:15.900
Nu moeten we TS config opnieuw schakelen.

09:15.900 --> 09:19.070
Ten eerste moeten we nu geen AMD gebruiken,

09:19.070 --> 09:22.420
maar ES twenty fifteen.

09:22.420 --> 09:25.710
Dan is eigenlijk het codewoord voor ES6, de agma-scriptversie

09:25.710 --> 09:29.300
die ES-modules introduceerde.

09:29.300 --> 09:31.260
We zeggen dus eigenlijk tegen het type script

09:31.260 --> 09:34.480
dat we onze importen nergens naar moeten transformeren, maar ze

09:34.480 --> 09:36.240
moeten laten zoals ze zijn.

09:36.240 --> 09:39.250
Moderne browsers zullen het begrijpen.

09:39.250 --> 09:41.290
Dus dat is belangrijk, zorg er ook voor

09:41.290 --> 09:43.433
dat je hier een doel hebt van ES6 of hoger'

09:44.950 --> 09:47.530
Je moet nu ook het out-bestand weer uitcommentariëren,

09:47.530 --> 09:50.670
want dat wordt niet ondersteund met ES-modules.

09:50.670 --> 09:53.590
En daarmee krijg je in de dist map in feite

09:53.590 --> 09:56.610
een replicatie van je bronmap, maar met

09:56.610 --> 09:58.690
Java script bestanden.

09:58.690 --> 10:00.480
Dus nu moeten we ook terug naar het

10:00.480 --> 10:03.120
index HDML bestand en app JS opnieuw importeren,

10:03.120 --> 10:04.840
want we hebben nu een app JS bestand

10:04.840 --> 10:06.350
in de dist map.

10:06.350 --> 10:08.910
En ook in dit app JS bestand staan weer import statements,

10:08.910 --> 10:11.180
omdat, zoals ik al zei, dit wordt ondersteund

10:11.180 --> 10:13.830
door Java script, door moderne Java script engines

10:13.830 --> 10:15.900
en door moderne browsers.

10:15.900 --> 10:17.440
En de browser zal deze

10:17.440 --> 10:19.440
invoer dus voor u oplossen.

10:19.440 --> 10:22.430
Dus als we dit nu opnieuw laden, krijgen we nog

10:22.430 --> 10:24.240
steeds een foutmelding.

10:24.240 --> 10:27.310
Kan geen import statement gebruiken buiten een module.

10:27.310 --> 10:30.630
Moderne browsers ondersteunen deze sintex, maar je moet

10:30.630 --> 10:33.150
ze wel vertellen dat je het wilt gebruiken.

10:33.150 --> 10:37.470
En dat vertel je door de (mompelt) hier te verwijderen en in plaats daarvan

10:37.470 --> 10:39.670
op de script tag, waar je een bestand

10:39.670 --> 10:42.777
importeert dat deze import statements heeft.

10:42.777 --> 10:46.313
Je gebruikt type gelijk aan module.

10:47.300 --> 10:50.450
Als je dit nu veilig stelt, zie je dat dit werkt

10:50.450 --> 10:53.440
en als we nu hier iets toevoegen krijgen we

10:53.440 --> 10:56.120
weer een werkende applicatie.

10:56.120 --> 10:58.910
Als je nu het netwerk tabblad inspecteert zul

10:58.910 --> 11:01.680
je trouwens zien dat als je herlaadt, er een heleboel

11:01.680 --> 11:05.290
netwerk verzoeken gaande zijn, als ik een beetje uitzoom kunnen

11:05.290 --> 11:07.410
we het beter zien.

11:07.410 --> 11:10.340
Al onze Java script bestanden worden hier opgevraagd.

11:10.340 --> 11:12.810
Ze worden automatisch opgevraagd door de browser

11:12.810 --> 11:14.780
wanneer deze onze import tegenkomt.

11:14.780 --> 11:16.967
Dus het begint met app JS, dan ziet

11:16.967 --> 11:19.410
het de import naar project input JS.

11:19.410 --> 11:21.990
Hier en daarom gaat het volgende verzoek natuurlijk

11:21.990 --> 11:23.160
naar projectinput.

11:23.160 --> 11:25.410
Het doet ook hetzelfde voor de projectlijst.

11:25.410 --> 11:27.360
Nu zou het in projectinvoer bijvoorbeeld

11:27.360 --> 11:29.422
een invoer van basiscomponent JS zien

11:29.422 --> 11:31.450
en daarom importeert het ook prob basiscomponent

11:31.450 --> 11:33.400
JS.

11:33.400 --> 11:35.530
Dat wordt dus gedaan door de browser, en

11:35.530 --> 11:38.170
hier maken we gebruik van en nu hebben we een andere

11:38.170 --> 11:40.850
manier om onze bestanden op te splitsen, maar met

11:40.850 --> 11:43.750
het bijkomende voordeel dat we duidelijk aangeven

11:43.750 --> 11:45.850
wat we van elk bestand nodig hebben en als

11:45.850 --> 11:49.100
we een import overslaan, roept type-script ons toe, wat het

11:49.100 --> 11:51.127
niet deed met de vorige aanpak, waardoor

11:51.127 --> 11:53.400
deze aanpak eigenlijk mijn aanbeveling

11:53.400 --> 11:56.670
is en waarom het de defacto standaard manier van importeren

11:56.670 --> 11:58.870
en exporteren is.

11:58.870 --> 12:00.710
Nu, als je eerder hebt gewerkt met type

12:00.710 --> 12:03.850
script in andere projecten, laten we zeggen in een angular project,

12:03.850 --> 12:06.380
ben je misschien ook gewend dat je hier geen bestandsextensie

12:06.380 --> 12:09.270
hoeft op te geven Nou, we kunnen dat ook weglaten zodra we web

12:09.270 --> 12:12.210
pack en een bill tool toevoegen.

12:12.210 --> 12:14.580
Zolang we dat niet hebben en we vertrouwen op de

12:14.580 --> 12:16.870
browser om onze bestanden te importeren, moet

12:16.870 --> 12:18.833
je die extra extensie toevoegen.
