WEBVTT

00:02.300 --> 00:03.830
Istruttore: Qui lavoriamo molto

00:03.830 --> 00:07.350
con il nostro reparto e io ho creato il mio reparto di contabilità.

00:07.350 --> 00:09.610
Ora, per l'applicazione che stiamo costruendo,

00:09.610 --> 00:12.120
potremmo aver bisogno di dipartimenti, naturalmente,

00:12.120 --> 00:14.320
ma potremmo aver bisogno di ulteriori informazioni

00:14.320 --> 00:16.660
per i tipi specifici di dipartimenti.

00:16.660 --> 00:18.830
Potremmo avere un reparto IT,

00:18.830 --> 00:22.680
che ha un ID, un nome, dei dipendenti, ma anche degli

00:22.680 --> 00:24.900
amministratori, cosa di cui dispone

00:24.900 --> 00:28.180
solo il reparto IT, ad esempio.

00:28.180 --> 00:30.340
Potremmo avere il reparto contabilità,

00:30.340 --> 00:34.280
che potrebbe anche avere un ID, un nome e dei dipendenti, ma potrebbe

00:34.280 --> 00:37.470
anche avere, diciamo, dei rapporti.

00:37.470 --> 00:41.030
Una serie di rapporti generati e così via.

00:41.030 --> 00:44.541
Quindi si potrebbero avere alcune proprietà di base e anche metodi che

00:44.541 --> 00:46.970
tutti i dipartimenti dovrebbero avere, ma poi si

00:46.970 --> 00:49.050
potrebbero avere versioni specializzate

00:49.050 --> 00:51.900
di questi dipartimenti con le loro proprietà e metodi specifici

00:51.900 --> 00:54.660
che solo quel dipartimento potrebbe avere.

00:54.660 --> 00:58.100
Un'eredità può aiutarci a implementare qualcosa di simile.

00:58.100 --> 01:00.010
Come possiamo utilizzare l'ereditarietà in questo caso?

01:00.010 --> 01:01.670
Abbiamo il nostro dipartimento di classe.

01:01.670 --> 01:05.130
Ora creiamo questi reparti specializzati.

01:05.130 --> 01:08.483
Quindi qui potremmo avere un dipartimento IT di classe.

01:09.610 --> 01:14.010
In questa classe, voglio utilizzare il nome, l'ID e i dipendenti

01:14.010 --> 01:17.270
del dipartimento generale, ma voglio aggiungere

01:17.270 --> 01:19.537
le mie caratteristiche.

01:19.537 --> 01:21.970
Ora possiamo ereditare la classe del dipartimento,

01:21.970 --> 01:24.270
usando la parola chiave extends qui e poi la classe

01:24.270 --> 01:25.970
che vogliamo ereditare.

01:25.970 --> 01:27.530
In questo caso, si tratta di un dipartimento.

01:27.530 --> 01:30.600
Ora, è importante che si possa ereditare solo da una classe,

01:30.600 --> 01:33.010
quindi non è possibile ereditare da più classi,

01:33.010 --> 01:34.660
se ne avete bisogno.

01:34.660 --> 01:38.070
Quindi ora, qui, eredito da department e una conseguenza

01:38.070 --> 01:40.700
è che se ora creo un dipartimento IT qui,

01:40.700 --> 01:44.560
posso effettivamente chiamarlo così, con questo tipo

01:44.560 --> 01:46.640
di costruttore, anche se la classe

01:46.640 --> 01:49.400
IT department è vuota.

01:49.400 --> 01:52.830
Se lo salviamo, vediamo che funziona come prima, perché

01:52.830 --> 01:55.152
quando ereditiamo da un'altra classe,

01:55.152 --> 01:59.610
la classe che eredita riceve automaticamente tutto ciò che ha la classe

01:59.610 --> 02:02.870
base, il dipartimento in questo caso, compreso il suo

02:02.870 --> 02:06.072
costruttore, quindi finché non aggiungiamo un costruttore

02:06.072 --> 02:11.072
dedicato per questa classe ereditata, quindi per questa sottoclasse, il costruttore

02:11.130 --> 02:14.760
della classe base, quindi questo costruttore viene usato

02:14.760 --> 02:20.800
automaticamente quando istanziamo la nostra sottoclasse.

02:20.800 --> 02:25.170
Quindi alla fine chiamiamo magicamente il costruttore della classe base

02:25.170 --> 02:27.562
con gli argomenti che passiamo qui.

02:27.562 --> 02:30.350
Ora, però, possiamo aggiungere il nostro costruttore,

02:30.350 --> 02:33.570
aggiungendo il costruttore qui nel reparto IT e ora

02:33.570 --> 02:35.800
si vedono gli errori.

02:35.800 --> 02:38.580
Per prima cosa, dovremmo accettare i dati che riceviamo

02:38.580 --> 02:40.850
qui, anche se potremmo sostenere che il nome

02:40.850 --> 02:44.120
non dovrebbe essere qualcosa da inserire qui.

02:44.120 --> 02:46.430
E non dovrebbe essere anche la contabilità.

02:46.430 --> 02:49.110
Invece qui il nome del reparto, trattandosi

02:49.110 --> 02:52.563
della classe del reparto IT, può essere sempre IT.

02:53.700 --> 02:56.910
Tuttavia, voglio ancora accettare il mio

02:56.910 --> 03:01.130
ID, ma ora voglio essenzialmente inoltrarlo, proprio

03:01.130 --> 03:04.120
come il nome fisso IT, al costruttore

03:04.120 --> 03:06.420
del dipartimento.

03:06.420 --> 03:09.240
E per questo abbiamo una parola chiave speciale che possiamo,

03:09.240 --> 03:11.120
e in questo caso dobbiamo, utilizzare.

03:11.120 --> 03:13.210
E questo è super.

03:13.210 --> 03:15.580
Ogni volta che si aggiunge un proprio costruttore

03:15.580 --> 03:18.400
in una classe che eredita da un'altra classe, è necessario

03:18.400 --> 03:21.200
aggiungere super nella classe ereditante ed eseguirlo

03:21.200 --> 03:23.790
come una funzione.

03:23.790 --> 03:28.070
Super richiama il costruttore della classe base, quindi in questo

03:28.070 --> 03:31.300
caso il costruttore del dipartimento.

03:31.300 --> 03:33.690
Ora l'altra super prende gli argomenti

03:33.690 --> 03:37.630
del costruttore della classe genitore, l'ID e il nome.

03:37.630 --> 03:41.060
Qui posso inoltrare l'ID, quindi l'ID che sto ottenendo

03:41.060 --> 03:44.360
viene passato a super e posso codificare un valore

03:44.360 --> 03:46.860
per il nome, come IT.

03:46.860 --> 03:48.840
In questo modo si richiama il costruttore

03:48.840 --> 03:52.500
della classe base dall'interno della sottoclasse.

03:52.500 --> 03:55.310
Ora, è importante chiamare super nel costruttore

03:55.310 --> 03:58.220
prima di fare qualsiasi cosa con la parola chiave

03:58.220 --> 03:59.700
"this".

03:59.700 --> 04:03.860
Quindi, se si intende assegnare altre proprietà speciali, bisogna

04:03.860 --> 04:06.670
farlo dopo aver chiamato super.

04:06.670 --> 04:10.346
E infatti voglio aggiungere qui le mie proprietà speciali.

04:10.346 --> 04:13.528
Potremmo aggiungere qui i nostri amministratori.

04:13.528 --> 04:17.800
Diciamo come privato, o come pubblico, in realtà.

04:17.800 --> 04:20.878
Come proprietà pubblica, admins,

04:20.878 --> 04:25.630
che dovrebbe essere un array di stringhe, diciamo.

04:25.630 --> 04:27.780
Allora non voglio inoltrare questo

04:27.780 --> 04:31.460
dato alla mia classe base, perché la classe del dipartimento

04:31.460 --> 04:34.670
non vuole i dati dell'amministratore.

04:34.670 --> 04:38.800
Invece, voglio memorizzare questo dato in una proprietà del dipartimento

04:38.800 --> 04:42.150
IT, per cui possiamo aggiungere admins come campo, che prende

04:42.150 --> 04:44.922
un paio di amministratori, e memorizzare gli admins

04:44.922 --> 04:47.290
lì dentro, oppure, dato che sto usando public

04:47.290 --> 04:49.070
qui, sto già usando quella scorciatoia

04:49.070 --> 04:52.020
per cui verrà creata una proprietà con lo stesso nome

04:52.020 --> 04:55.160
e i dati che inseriamo in questo argomento verranno memorizzati

04:55.160 --> 05:00.148
in quella proprietà creata automaticamente.

05:00.148 --> 05:03.710
Sempre per chiarire che il super deve essere chiamato per primo,

05:03.710 --> 05:07.610
prenderò la strada più lunga, aggiungerò gli amministratori qui, in

05:07.610 --> 05:12.610
questo modo, e poi qui, in questo modo. admins = admins.

05:13.260 --> 05:15.160
Anche in questo caso, la scorciatoia sarebbe più breve.

05:15.160 --> 05:17.830
Lo faccio per mostrare e rendere chiaro che

05:17.830 --> 05:21.020
se si usa qualcosa che utilizza la parola chiave "this",

05:21.020 --> 05:24.480
bisogna farlo dopo aver chiamato super.

05:24.480 --> 05:27.640
E se lo salviamo, otterrò un errore, perché non sto inserendo

05:27.640 --> 05:29.530
nessun amministratore, quindi facciamolo

05:29.530 --> 05:30.920
qui.

05:30.920 --> 05:33.920
Max è l'unico amministratore che sto facendo passare qui dentro.

05:33.920 --> 05:36.950
Ora possiamo salvarlo e compilarlo senza errori e ora

05:36.950 --> 05:39.910
qui, in effetti, vediamo il nostro dipartimento.

05:39.910 --> 05:41.840
Ora ha il nome di IT.

05:41.840 --> 05:44.670
E se registriamo l'intero reparto

05:44.670 --> 05:49.670
con la console, potremmo rinominarlo da contabilità a

05:50.220 --> 05:54.250
IT e poi a console. registrarsi qui.

05:54.250 --> 05:57.570
Naturalmente la ridenominazione era facoltativa, ma aveva più senso,

05:57.570 --> 06:00.160
visto che qui stiamo costruendo un dipartimento IT.

06:00.160 --> 06:02.510
Ora che la console ha registrato l'intero

06:02.510 --> 06:06.110
reparto, vediamo che ci sono gli amministratori, ma anche

06:06.110 --> 06:11.110
i dipendenti e tutto ciò che ho impostato nella classe del reparto.

06:12.000 --> 06:13.990
Ecco quindi l'ereditarietà in azione,

06:13.990 --> 06:16.520
una funzione molto utile, perché ora, naturalmente,

06:16.520 --> 06:20.770
possiamo anche creare il nostro reparto di contabilità qui, estendendo

06:20.770 --> 06:23.260
il reparto, e lì possiamo aggiungere le nostre

06:23.260 --> 06:27.030
cose specifiche per la contabilità.

06:27.030 --> 06:29.540
Quindi possiamo ancora usare un costruttore

06:29.540 --> 06:31.700
qui, e ora forse con la scorciatoia,

06:31.700 --> 06:34.400
accettare un paio di report qui che potrebbero

06:34.400 --> 06:36.170
essere una proprietà privata

06:36.170 --> 06:40.950
e poi abbiamo addReport che prende il testo, che dovrebbe essere una stringa,

06:40.950 --> 06:45.360
e poi raggiungiamo i report qui e spingiamo il testo come elemento nel

06:45.360 --> 06:49.430
report e forse abbiamo anche getReports qui e lì abbiamo solo la

06:49.430 --> 06:56.990
console.

06:56.990 --> 06:56.990
log (this. report)

06:57.563 --> 07:00.860
o lo chiamiamo printReports, quindi ha più senso.

07:00.860 --> 07:02.720
Ora avremmo una versione molto speciale

07:02.720 --> 07:04.890
di un dipartimento, con due metodi che il dipartimento

07:04.890 --> 07:06.740
di base non ha e con una proprietà in più

07:06.740 --> 07:08.100
che il dipartimento di base

07:08.100 --> 07:09.840
non ha.

07:09.840 --> 07:13.000
E comunque, riceviamo tutto dal dipartimento di base.

07:13.000 --> 07:15.560
Il nome, che imposterò qui come accounting,

07:15.560 --> 07:17.950
e l'ID, che inoltreremo anche al costruttore

07:17.950 --> 07:20.260
del dipartimento di base.

07:20.260 --> 07:22.120
Quindi, se creiamo la

07:22.120 --> 07:24.770
nostra contabilità con nuovo

07:24.770 --> 07:27.510
AccountingDepartment, possiamo

07:27.510 --> 07:31.750
inserire il nostro ID e i nostri report.

07:31.750 --> 07:34.340
Diciamo che inizialmente è un array vuoto.

07:34.340 --> 07:39.340
Poi possiamo chiamare addReport, qualcosa è andato storto, non è mai

07:40.550 --> 07:43.446
andata così bene, credo, nella contabilità,

07:43.446 --> 07:48.446
e poi possiamo anche stampare i nostri rapporti qui e con tutto questo

07:50.070 --> 07:52.630
si compila bene e otteniamo il rapporto

07:52.630 --> 07:55.710
qui e vediamo, il reparto IT per esempio, non

07:55.710 --> 07:58.890
avrebbe alcun rapporto.

07:58.890 --> 08:01.820
Il reparto contabilità lo fa grazie all'ereditarietà,

08:01.820 --> 08:05.623
in cui ereditiamo alcune funzionalità e ne aggiungiamo di nostre.
