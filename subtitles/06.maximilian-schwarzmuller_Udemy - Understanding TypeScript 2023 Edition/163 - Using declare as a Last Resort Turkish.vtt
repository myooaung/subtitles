WEBVTT

00:02.450 --> 00:04.900
Eğitmen: Şimdi, örneğin Lodash için

00:04.900 --> 00:07.090
yaptığımız gibi türleri yükleyemediğiniz

00:07.090 --> 00:10.470
bir kütüphaneniz varsa ne yaparsınız?

00:10.470 --> 00:14.440
Lodash için, neyse ki böyle bir tür paketimiz var ve bahsettiğim

00:14.440 --> 00:15.880
gibi, çoğu üçüncü taraf

00:15.880 --> 00:18.870
kütüphanesi için buna sahipsiniz, ancak hepsi

00:18.870 --> 00:21.210
için zorunlu değil.

00:21.210 --> 00:25.320
Ya da, diyelim ki dizininizde başka bir JavaScript

00:25.320 --> 00:27.320
kodu varsa. html dosyasında,

00:27.320 --> 00:29.800
bazı global değişkenleri ayarladığınız

00:29.800 --> 00:34.800
yerde stare çalıştıran başka bir betik kodunuz var.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Bunun gibi bir şey, sonunda

00:38.450 --> 00:40.770
bunun küresel olarak kullanılabilir

00:40.770 --> 00:43.180
olacağını bilirsiniz.

00:43.180 --> 00:46.240
Bildiğiniz gibi, bu şekilde eklenen değişkenler

00:46.240 --> 00:48.600
global pencere nesnesine eklenir ve bunları

00:48.600 --> 00:50.210
TypeScript kodunuzun içinden

00:50.210 --> 00:52.670
kullanmak istersiniz.

00:52.670 --> 00:53.503
Örneğin, burada

00:53.503 --> 00:57.770
konsol yapmak istersem. log(GLOBAL) bu şekilde, IDE'de

00:57.770 --> 00:59.990
burada bir hata alıyorum.

00:59.990 --> 01:04.299
Derlemeyi başlatmak için tsc -w komutunu çalıştırdığımda da

01:04.299 --> 01:06.340
burada bir hata alıyorum.

01:06.340 --> 01:09.470
Yani, endeksimiz çalışacağını

01:09.470 --> 01:11.530
bilsek bile bu küresel

01:11.530 --> 01:15.630
şeyi sevmiyor. html dosyası bu global değişkeni tanımlar.

01:15.630 --> 01:18.010
Ve bu komut dosyasında erteleme yaptığımız için,

01:18.010 --> 01:19.493
bu komut dosyası aşağıdaki komut

01:19.493 --> 01:22.170
dosyasından sonra çalıştırılacaktır.

01:22.170 --> 01:23.780
Bu gibi durumlarda, TypeScript'te

01:23.780 --> 01:26.460
kullanabileceğiniz başka bir sözdizimine

01:26.460 --> 01:29.460
sahipsiniz ve bu da declare komutudur.

01:29.460 --> 01:32.110
Örneğin, TypeScript'e belirli değişkenleri

01:32.110 --> 01:34.150
bildirebilirsiniz.

01:34.150 --> 01:36.730
declare var GLOBAL diyebilir ve TypeScript'e

01:36.730 --> 01:38.640
örneğin bunun bir dize olacağını veya

01:38.640 --> 01:42.050
bunun herhangi bir şey olduğunu söyleyebilirsiniz.

01:42.050 --> 01:43.687
Bu temel olarak TypeScript'e

01:43.687 --> 01:45.910
"Endişelenme, bu var olacak" der

01:45.910 --> 01:47.823
ve bunu kaydedersek ve bu derleyiciden

01:49.090 --> 01:52.580
çıkıp bunun yerine webpack kullanırsam, teknik olarak

01:52.580 --> 01:59.060
çalıştığı için sayfamızda bu çıktıyı görürüz ve declare var ile TypeScript'e bunun var olduğunu

01:59.060 --> 02:02.270
da söyleriz.

02:02.270 --> 02:04.420
Şimdi bu dmidecode'u buradan kaldıracağım,

02:04.420 --> 02:06.770
ancak declare'in, bu anahtar kelimenin, bu komutun

02:06.770 --> 02:08.830
farkında olmak önemlidir.

02:08.830 --> 02:12.160
Var olduklarını bildiğiniz TypeScript özelliklerini veya değişkenlerini

02:12.160 --> 02:14.590
bildirmenize veya TypeScript'in genel olarak Typescript'in

02:14.590 --> 02:17.210
bilemediği ancak bir geliştirici olarak sizin orada olacaklarını

02:17.210 --> 02:20.150
bildiğiniz paketler, global değişkenler hakkında bilgi sahibi

02:20.150 --> 02:23.373
olmasını sağlamanıza olanak tanır.
