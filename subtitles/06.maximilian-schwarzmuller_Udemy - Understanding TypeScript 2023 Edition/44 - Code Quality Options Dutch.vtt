WEBVTT

00:02.220 --> 00:03.053
Instructeur: Als

00:03.053 --> 00:04.883
je nu verder gaat, hebben we meer opties,

00:04.883 --> 00:07.920
noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Dit helpt je met de kwaliteit van de code.

00:10.470 --> 00:13.110
TypeScript zal klagen als je bepaalde ongebruikte

00:13.110 --> 00:15.930
variabelen hebt enzovoort.

00:15.930 --> 00:20.930
Dus als we deze drie opties aanzetten, helpt deze optie je bijvoorbeeld met

00:21.711 --> 00:24.230
Switch statements, waar je het break keyword

00:24.230 --> 00:26.270
zou kunnen vergeten.

00:26.270 --> 00:28.880
Maar als we deze drie opties aanzetten, zal

00:28.880 --> 00:31.760
TypeScript bijvoorbeeld klagen als je hier een

00:31.760 --> 00:33.600
gebruikersnaam variabele had,

00:33.600 --> 00:36.730
lokaal in deze functie, en je gebruikt die niet.

00:36.730 --> 00:39.490
Zie je, dit heeft gele kronkelende lijnen omdat

00:39.490 --> 00:41.500
het niet echt een fout is.

00:41.500 --> 00:43.179
Het is meer een waarschuwing of een hint.

00:43.179 --> 00:45.643
Dus als ik hier compileer, zie je nu, krijg

00:47.750 --> 00:49.500
ik wel een foutmelding omdat

00:49.500 --> 00:51.900
TypeScript alleen fouten kent.

00:51.900 --> 00:54.140
En daar zien we dat de gebruikersnaam is gedeclareerd,

00:54.140 --> 00:57.080
maar dat de waarde ervan nooit wordt gelezen, omdat we ervoor hebben

00:57.080 --> 01:00.550
gezorgd dat we geen ongebruikte lokale variabelen willen.

01:00.550 --> 01:02.483
Ongebruikte globale variabelen,

01:03.440 --> 01:06.340
dus als ik hier iets had als appId, zijn wel toegestaan

01:06.340 --> 01:09.130
omdat TypeScript niet kan weten of je die globaal

01:09.130 --> 01:12.370
gedefinieerde waarde misschien nodig hebt in een ander

01:12.370 --> 01:13.870
scriptbestand.

01:13.870 --> 01:14.980
Dus daarom is dit toegestaan,

01:14.980 --> 01:17.280
maar in een functie waar er geen andere plaats is

01:17.280 --> 01:20.010
waar je het nodig zou kunnen hebben, zal TypeScript nu klagen

01:20.010 --> 01:22.020
als je ongebruikte code hebt.

01:22.020 --> 01:23.540
En dat is over het algemeen een goed idee.

01:23.540 --> 01:26.021
Hiermee kunt u dergelijke ongebruikte code wegstrepen.

01:26.021 --> 01:28.510
Hetzelfde geldt voor ongebruikte parameters.

01:28.510 --> 01:31.350
Als je hier een H zou nemen waar een, natuurlijk,

01:31.350 --> 01:33.050
bind is nu gebroken, maar zelfs

01:33.050 --> 01:35.970
als we dit doorgeven in dit werkt, maar nu, opnieuw,

01:35.970 --> 01:39.220
TypeScript en dus de ID vertelt ons dat dit ongebruikt

01:39.220 --> 01:41.780
is en ofwel dit, dus misschien moet je het verwijderen

01:41.780 --> 01:44.293
of gaan gebruiken.

01:45.238 --> 01:48.173
Dus dat is noUnusedParameters.

01:48.173 --> 01:51.365
En noImplicitReturns betekent dat we een fout

01:51.365 --> 01:55.620
krijgen als we een functie hebben die soms wel en soms niet iets

01:55.620 --> 01:57.130
teruggeeft.

01:57.130 --> 02:00.913
Laten we zeggen dat we een andere functie hebben, add, waarbij we twee getallen

02:01.912 --> 02:02.940
krijgen.

02:02.940 --> 02:05.906
Nummer en n2 is een nummer.

02:05.906 --> 02:10.906
En natuurlijk kunnen we n1 plus n2 teruggeven.

02:14.030 --> 02:15.710
Maar laten we zeggen dat we om een

02:15.710 --> 02:18.518
of andere reden controleren of n1 plus n2 groter is dan

02:18.518 --> 02:21.800
nul, omdat we alleen willen terugkeren als we een resultaat

02:21.800 --> 02:23.700
hebben dat groter is dan nul.

02:23.700 --> 02:25.040
Dan willen we een geretourneerde waarde.

02:25.040 --> 02:26.940
Anders willen we niets teruggeven.

02:26.940 --> 02:28.170
We willen niet terug.

02:28.170 --> 02:30.550
Nou, dan krijgen we een waarschuwing vanwege die extra

02:30.550 --> 02:32.598
instelling met noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript detecteert dat niet alle vertakkingen in deze functie leiden

02:36.401 --> 02:38.760
tot een return statement en door onze instelling

02:38.760 --> 02:40.650
is dat niet toegestaan.

02:40.650 --> 02:44.150
We moeten hier in ieder geval bewust niets teruggeven door het return

02:44.150 --> 02:45.790
keyword toe te voegen.

02:45.790 --> 02:48.260
Gewoon weglaten is hier niet toegestaan.

02:48.260 --> 02:49.730
Het is toegestaan als je een functie

02:49.730 --> 02:52.446
hebt die niets teruggeeft, in geen enkele vertakking,

02:52.446 --> 02:54.520
maar als je minstens één geval hebt waarin

02:54.520 --> 02:56.423
je functie wel iets teruggeeft, dan moet

02:56.423 --> 02:59.933
je ervoor zorgen dat je in alle gevallen iets teruggeeft.

03:01.830 --> 03:03.130
En daarmee naderen we het einde van deze

03:03.130 --> 03:04.240
configuratie-doorloop.

03:04.240 --> 03:06.526
We kunnen de moduleResolutie hier negeren.

03:06.526 --> 03:08.933
Al deze opties zijn eigenlijk behoorlijk geavanceerd,

03:08.933 --> 03:10.830
die er voor ons hier niet toe doen, doen

03:10.830 --> 03:13.510
er voor jou in veel projecten niet toe.

03:13.510 --> 03:16.600
Met Source Map Options kunt u de bronkaarten die we eerder

03:16.600 --> 03:18.180
hebben bekeken, aanpassen.

03:18.180 --> 03:21.440
Dus deze vertaalbestanden van JavaScript naar TypeScript.

03:21.440 --> 03:23.720
Meestal zijn de standaardinstellingen hier

03:23.720 --> 03:26.000
goed, dus als u niet weet wat u verandert en

03:26.000 --> 03:27.010
waarom u dat doet, hoeft

03:27.010 --> 03:29.470
u hier meestal niets te veranderen.

03:29.470 --> 03:31.512
En wat die experimentele opties

03:31.512 --> 03:34.380
betreft, daar zal ik later in de module decorateurs

03:34.380 --> 03:38.910
naar kijken, meer bepaald naar experimentalDecorators.

03:38.910 --> 03:41.810
Hiermee kunnen bepaalde functies in TypeScript

03:41.810 --> 03:45.060
worden gebruikt die echt experimenteel zijn, waarbij

03:45.060 --> 03:48.271
het niet zeker is of ze in de toekomst ook in JavaScript

03:48.271 --> 03:50.270
terecht zullen komen en waar u misschien

03:50.270 --> 03:52.940
toch mee wilt werken.

03:52.940 --> 03:55.220
Dan moet je TypeScript expliciet vertellen

03:55.220 --> 03:57.070
dat je met deze functies wilt werken

03:57.070 --> 03:59.390
en dat kan met die configuratie.

03:59.390 --> 04:01.880
Maar daar kom ik nog op terug.

04:01.880 --> 04:04.170
En daarom lopen we nu door dit bestand, veel opties

04:04.170 --> 04:05.870
die je daar kunt instellen.

04:05.870 --> 04:08.222
En naarmate TypeScript groeit, krijg je

04:08.222 --> 04:10.612
hier meestal ook steeds meer opties bij,

04:10.612 --> 04:13.837
daarom zijn de officiële docs altijd een goede plek om dieper

04:13.837 --> 04:16.160
te duiken en ervoor te zorgen dat je geen

04:16.160 --> 04:18.210
interessante optie mist die je in je

04:18.210 --> 04:20.343
project zou kunnen helpen.
