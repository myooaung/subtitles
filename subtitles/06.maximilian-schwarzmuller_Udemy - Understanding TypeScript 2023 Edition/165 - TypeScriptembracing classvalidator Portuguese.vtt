WEBVTT

00:02.130 --> 00:03.630
Narrador: Então demos uma olhada

00:03.630 --> 00:06.210
no Lodash, que é um pacote JavaScript de baunilha onde precisávamos

00:06.210 --> 00:08.360
instalar algumas traduções.

00:08.360 --> 00:10.310
E nós demos uma olhada no transferidor

00:10.310 --> 00:13.530
de classe, que também funciona em JavaScript de baunilha,

00:13.530 --> 00:17.328
mas também funciona particularmente bem em TypeScript.

00:17.328 --> 00:20.330
Agora vamos dar uma olhada no validador de classe.

00:20.330 --> 00:24.540
Este agora é um pacote que realmente utiliza o TypeScript.

00:24.540 --> 00:28.300
Ele se baseia no conceito de decoradores TypeScript,

00:28.300 --> 00:32.340
e nos dá uma forma totalmente nova de trabalhar com eles,

00:32.340 --> 00:34.330
ou pelo menos quase nova.

00:34.330 --> 00:38.230
Se você acompanhou meu módulo de decoração neste curso, você

00:38.230 --> 00:41.200
realmente verá algo aqui nesta palestra, que nós

00:41.200 --> 00:44.150
também construímos por conta própria lá.

00:44.150 --> 00:47.100
Agora, porém, com esta biblioteca de terceiros, não

00:47.100 --> 00:49.330
temos que reinventar a roda do zero, não temos

00:49.330 --> 00:51.193
que construí-la sozinhos.

00:51.193 --> 00:53.320
E esta biblioteca também, sem dúvida,

00:53.320 --> 00:55.710
é um pouco mais elaborada do que nossa solução

00:55.710 --> 00:57.830
no módulo do decorador.

00:57.830 --> 01:00.026
Estou falando de validação.

01:00.026 --> 01:02.870
Este é um pacote que nos permite adicionar regras

01:02.870 --> 01:06.390
de validação com a ajuda de alguns decoradores, dentro de uma

01:06.390 --> 01:08.590
classe e depois, sempre que instanciarmos

01:08.590 --> 01:09.920
tal classe, podemos realmente

01:09.920 --> 01:12.610
validá-la para as regras que lá estabelecemos

01:12.610 --> 01:15.610
com a ajuda de decoradores.

01:15.610 --> 01:18.960
Agora, para começar, só precisamos importar este pacote aqui.

01:18.960 --> 01:23.130
Portanto, npm instala o validador de classe -- guie, e a partir

01:23.130 --> 01:26.130
daí podemos começar imediatamente.

01:26.130 --> 01:29.220
Portanto, deixe-me reiniciar o webpack-dev-server,

01:29.220 --> 01:30.600
e para usar este pacote, temos

01:30.600 --> 01:33.580
que adicionar um par de decoradores aos modelos, assim

01:33.580 --> 01:35.740
como às classes onde queremos validar

01:35.740 --> 01:37.490
certas propriedades.

01:37.490 --> 01:39.730
Portanto, no meu caso aqui no modelo

01:39.730 --> 01:43.240
do produto, importarei algo do validador de classe.

01:43.240 --> 01:45.110
E agora novamente, se você seguiu

01:45.110 --> 01:47.360
através do módulo decorador neste

01:47.360 --> 01:49.640
curso, este é um conceito que eu também

01:49.640 --> 01:52.870
já construí do zero sem este pacote.

01:52.870 --> 01:56.270
Mas é claro que construímos em uma versão muito ingênua e básica,

01:56.270 --> 01:57.840
com este pacote não temos que

01:57.840 --> 02:01.200
construí-lo por conta própria e também é mais elaborado.

02:01.200 --> 02:02.770
Agora, a partir do validador de classe,

02:02.770 --> 02:04.820
podemos importar certos decoradores.

02:04.820 --> 02:05.893
Por exemplo,

02:07.139 --> 02:08.630
IsNotEmpty, ou

02:08.630 --> 02:11.410
também, IsNumber.

02:11.410 --> 02:13.500
Também podemos importar IsPositivo.

02:15.940 --> 02:18.940
Agora podemos adicioná-las às propriedades que queremos validar.

02:18.940 --> 02:20.900
Por exemplo, aqui no título, podemos

02:20.900 --> 02:24.220
acrescentar IsNotEmpty como um decorador como este, e todas

02:24.220 --> 02:26.390
estas são fábricas de decoradores, portanto

02:26.390 --> 02:29.610
você sempre tem que executá-las.

02:29.610 --> 02:31.318
E também aqui,

02:31.318 --> 02:37.380
IsNumber e IsPositive.

02:37.380 --> 02:38.763
Vamos executar isso.

02:40.250 --> 02:41.730
Agora, para usar decoradores aqui,

02:41.730 --> 02:44.730
você também deve ir à tsconfig. js, e certifique-se

02:44.730 --> 02:49.550
de ligar ali os decoradores experimentais.

02:49.550 --> 02:51.593
Depois disso, salve isto, e agora estas

02:52.750 --> 02:55.040
áreas aqui também devem desaparecer.

02:55.040 --> 02:57.300
Mas também precisamos reiniciar o dev server,

02:57.300 --> 03:00.840
para que ele pegue o novo tsconfig. conversão js.

03:00.840 --> 03:02.650
Portanto, agora acrescentamos estas

03:02.650 --> 03:04.768
regras, estas regras de validação aqui.

03:04.768 --> 03:07.710
Estamos basicamente dizendo que o título nunca deve

03:07.710 --> 03:11.830
ser uma seqüência vazia e os números devem ser um número positivo.

03:11.830 --> 03:13.980
Agora podemos criar um novo

03:13.980 --> 03:15.119
produto aqui,

03:15.119 --> 03:16.870
digamos lá, newProd, onde

03:16.870 --> 03:19.078
chamamos de novo produto e eu

03:19.078 --> 03:21.720
passo um fio vazio para o título, e

03:21.720 --> 03:25.210
depois menos 5. 99 para o número.

03:25.210 --> 03:26.700
Se eu então consolar. log newProd,

03:27.576 --> 03:29.920
getInformation, e execute

03:29.920 --> 03:34.830
isto, vamos ver onde funciona.

03:34.830 --> 03:35.683
Ok, salve isso.

03:37.840 --> 03:40.040
Funciona.

03:40.040 --> 03:42.330
Bem, ainda não estamos totalmente lá.

03:42.330 --> 03:46.470
Com nossos decoradores, estabelecemos as regras.

03:46.470 --> 03:49.560
Mas estes decoradores por si mesmos não fazem muito.

03:49.560 --> 03:52.880
Em vez disso, agora também temos que importar o método

03:52.880 --> 03:56.190
de validador a partir do validador de classe.

03:56.190 --> 03:57.300
Assim, a partir deste

03:57.300 --> 03:59.840
pacote, nós importamos validar e temos que

03:59.840 --> 04:02.260
executar isto em uma instância concreta,

04:02.260 --> 04:05.750
fora da classe em que adicionamos nossos decoradores.

04:05.750 --> 04:07.300
Portanto, neste caso

04:07.300 --> 04:12.020
aqui, podemos validar e passar o novo produto para ele.

04:12.020 --> 04:14.670
E validar, então, retornará uma promessa

04:14.670 --> 04:19.150
que, na verdade, pode gerar erros de validação.

04:19.150 --> 04:21.440
Portanto, podemos então acrescentar aqui, se você

04:21.440 --> 04:23.080
estivesse em uma função de facilitação,

04:23.080 --> 04:25.680
você também poderia usar um único peso, é claro.

04:25.680 --> 04:27.920
E aqui voltamos a receber os erros que

04:27.920 --> 04:30.093
esta função de validação encontra.

04:30.980 --> 04:31.813
Agora importante,

04:31.813 --> 04:34.950
sempre acabamos entrando mesmo que haja erros, então, se

04:34.950 --> 04:36.560
houver erros de validação, não

04:36.560 --> 04:38.420
entramos em algum bloco de captura,

04:38.420 --> 04:41.120
sempre entramos no bloco de então.

04:41.120 --> 04:44.360
Agora aqui dentro podemos verificar se os erros,

04:44.360 --> 04:45.980
que é um Array, o comprimento

04:45.980 --> 04:48.400
do ponto é maior que zero.

04:48.400 --> 04:51.300
O que significa que existem erros de validação.

04:51.300 --> 04:52.910
Neste caso, podemos registrar

04:53.750 --> 04:56.700
erros de validação, e talvez também emitir

04:56.700 --> 04:59.200
os erros que encontramos.

04:59.200 --> 05:01.820
Portanto, console. erros de registro, e caso

05:01.820 --> 05:03.700
contrário, no meu caso aqui, eu registrarei

05:03.700 --> 05:05.290
as informações.

05:05.290 --> 05:06.580
Agora, é claro, depende da aplicação

05:06.580 --> 05:09.100
que você está construindo o que você quer fazer aqui.

05:09.100 --> 05:10.860
Neste caso, talvez seja conveniente

05:10.860 --> 05:13.790
mostrar um alerta ao usuário neste caso, se houver erros.

05:13.790 --> 05:15.360
Talvez você queira redefinir a entrada, o que

05:15.360 --> 05:16.520
quer que você queira fazer.

05:16.520 --> 05:19.690
Aqui, eu vou apenas registrar algo no console.

05:19.690 --> 05:22.080
E se agora salvarmos isso, bem, você

05:22.080 --> 05:24.870
vê erros de validação, e então aqui uma série

05:24.870 --> 05:27.830
dos erros que foram encontrados.

05:27.830 --> 05:31.890
Por exemplo, o primeiro erro está na propriedade do

05:31.890 --> 05:34.770
título, que não deve estar vazio.

05:34.770 --> 05:38.290
E o segundo erro está no preço da propriedade,

05:38.290 --> 05:41.150
que deve ser um número positivo.

05:41.150 --> 05:44.950
E isto é como você pode facilmente acrescentar uma validação

05:44.950 --> 05:47.960
bastante poderosa a seus projetos com esta abordagem

05:47.960 --> 05:50.170
baseada em decoradores.

05:50.170 --> 05:53.190
Relacionado ao que fizemos anteriormente no curso,

05:53.190 --> 05:54.530
e ao módulo de decoradores,

05:54.530 --> 05:56.062
mas como mencionei várias

05:56.062 --> 05:59.890
vezes, mais elaborado com um monte de regras embutidas, e você

05:59.890 --> 06:01.190
pode aprender tudo sobre

06:01.190 --> 06:03.610
isso, claro, nos documentos deste pacote,

06:03.610 --> 06:06.350
e sem reinventar a roda.

06:06.350 --> 06:09.300
Portanto, o pacote class-validator é realmente um pacote

06:09.300 --> 06:10.930
poderoso que você deve estar ciente

06:10.930 --> 06:14.693
se você estiver construindo projetos maiores com TypeScript.
