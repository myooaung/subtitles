WEBVTT

00:02.270 --> 00:03.613
Instructor: Wir können also bei

00:03.613 --> 00:05.080
Method Decorators etwas zurückgeben,

00:05.080 --> 00:06.820
und dieses Etwas sollte ein Deskriptor

00:06.820 --> 00:08.920
sein, mit dem wir die Methode oder die Konfiguration

00:08.920 --> 00:11.000
der Methode ändern können.

00:11.000 --> 00:12.582
Und das ist etwas, was ich hier tun möchte.

00:12.582 --> 00:15.985
Zuvor gehe ich in die Index-HTML-Datei und füge

00:15.985 --> 00:18.540
dort eine Schaltfläche ein.

00:18.540 --> 00:21.272
Click Me, eine sehr einfache Schaltfläche,

00:21.272 --> 00:24.720
in meiner App. ts-Datei möchte ich nun dafür sorgen,

00:24.720 --> 00:26.104
dass beim Anklicken dieser

00:26.104 --> 00:29.800
Schaltfläche eine Methode für ein Objekt ausgeführt wird.

00:29.800 --> 00:32.120
Und dafür füge ich hier einfach eine neue

00:32.120 --> 00:34.600
Klasse hinzu, zunächst einmal Drucker.

00:34.600 --> 00:38.140
Und dort möchte ich eine Eigenschaft message haben, die einfach

00:38.140 --> 00:41.690
so funktioniert, also eine einfache Zeichenkette, die dort gespeichert

00:41.690 --> 00:45.980
ist, und dann möchte ich eine show message-Methode haben, in der ich einfach

00:45.980 --> 00:49.630
diese Nachricht auf der Konsole protokolliere.

00:49.630 --> 00:51.770
Dies ist natürlich eine einfache Dummy-Klasse, aber

00:51.770 --> 00:53.430
nichtsdestotrotz kann ich Ihnen damit zeigen,

00:53.430 --> 00:54.860
was ich Ihnen zeigen möchte.

00:54.860 --> 00:56.550
Wählen wir nun die Schaltfläche

00:56.550 --> 01:00.860
für die Tür mit dem Dokumentabfrage-Selektor aus und fügen wir ihr einen

01:00.860 --> 01:02.970
Ereignis-Listener hinzu.

01:02.970 --> 01:05.080
Zunächst füge ich hier ein Ausrufezeichen

01:05.080 --> 01:07.800
ein, um TypeScript klar zu machen, dass dies existiert

01:07.800 --> 01:08.806
und nicht null ist, und

01:08.806 --> 01:10.990
dann füge ich einen Ereignis-Listener hinzu,

01:10.990 --> 01:14.210
einen Klick-Ereignis-Listener, und dann möchte ich diese Show-Message-Methode

01:14.210 --> 01:16.450
hier auslösen.

01:16.450 --> 01:20.350
Dazu erstelle ich hier einen neuen Drucker, etwa so, und zeige

01:20.350 --> 01:23.120
dann hier auf p. showMessage, das ist

01:23.120 --> 01:24.323
meine Idee hier.

01:25.300 --> 01:27.103
Wenn wir das nun speichern und

01:28.153 --> 01:31.440
zu unserer Seite zurückkehren und auf diese Schaltfläche

01:31.440 --> 01:33.320
klicken, erhalten wir hier eine

01:33.320 --> 01:36.050
undefinierte Meldung.

01:36.050 --> 01:38.860
Der Grund dafür ist, dass bei einem Ereignis-Listener,

01:38.860 --> 01:41.820
wenn wir auf eine Funktion zeigen, die ausgeführt werden

01:41.820 --> 01:44.240
soll, das this-Schlüsselwort innerhalb

01:44.240 --> 01:48.260
dieser Funktion nicht denselben Kontext oder Verweis hat, wie wenn wir

01:48.260 --> 01:52.193
nur p aufrufen. ShowMessage, in diesem Fall

01:53.144 --> 01:56.450
würde sich dies auf den Drucker beziehen.

01:56.450 --> 02:00.200
Nein, in dem Szenario hier, in dem wir einen Ereignis-Listener verwenden,

02:00.200 --> 02:02.860
wird sich dies auf das Ziel des Ereignisses beziehen,

02:02.860 --> 02:05.777
da addEventListener am Ende dies in der Funktion, die ausgeführt

02:05.777 --> 02:07.693
werden soll, an das Ziel des Ereignisses

02:07.693 --> 02:09.560
bindet.

02:09.560 --> 02:11.360
Und natürlich will ich das nicht.

02:11.360 --> 02:12.570
Ein üblicher Workaround

02:12.570 --> 02:14.170
wäre hier, die bind-Methode

02:14.170 --> 02:19.170
zu verwenden und showMessage an p zu binden, oder dies in showMessage an p zu binden, so

02:19.480 --> 02:22.860
dass, wenn dies ausgeführt wird, dies nicht auf das verweist,

02:22.860 --> 02:25.420
worauf addEventListener verweisen will, sondern

02:25.420 --> 02:28.040
dies innerhalb von showMessage wieder auf dieses

02:28.040 --> 02:31.770
p, auf dieses Objekt hier verweist.

02:31.770 --> 02:33.300
Und wenn wir jetzt, wenn wir hier neu

02:33.300 --> 02:36.270
laden und ich dies wieder lösche, sehen wir, dass es funktioniert!

02:36.270 --> 02:39.240
Das ist alles Standard-JavaScript.

02:39.240 --> 02:40.790
Jetzt werden wir einen Dekorator

02:40.790 --> 02:42.191
erstellen, den wir dieser

02:42.191 --> 02:47.191
Methode hinzufügen können, der sie automatisch an die umgebende Klasse bindet, also an das

02:47.460 --> 02:50.130
Objekt, zu dem diese Methode gehört, jedes Mal, wenn

02:50.130 --> 02:53.440
sie aufgerufen wird, egal wo wir sie aufrufen.

02:53.440 --> 02:55.974
Dafür füge ich oberhalb des Druckers eine neue Funktion

02:55.974 --> 02:58.800
hinzu und nenne sie autobind, denn das ist es, was wir letztendlich

02:58.800 --> 03:01.580
tun, und das wird mein Dekorator autobind sein.

03:01.580 --> 03:03.890
Sie können natürlich auch einen großen Anfangsbuchstaben verwenden,

03:03.890 --> 03:05.960
um mit unseren anderen Bezeichnungen übereinzustimmen,

03:05.960 --> 03:07.930
aber auch hier können Sie eines der beiden Zeichen verwenden,

03:07.930 --> 03:10.122
wenn Sie eine Dekoratorfunktion definieren.

03:10.122 --> 03:13.300
Das hier ist bereits mein Dekorator und darin finden

03:13.300 --> 03:15.269
wir ein paar Argumente.

03:15.269 --> 03:17.940
Wir bekommen das Ziel, wie Sie erfahren werden, und das ist jedes.

03:17.940 --> 03:20.085
Es ist entweder der Prototyp des Objekts, mit

03:20.085 --> 03:22.533
dem wir arbeiten, oder es ist die Konstruktorfunktion,

03:22.533 --> 03:25.730
wenn wir dies zu einer statischen Methode hinzufügen würden, aber

03:25.730 --> 03:27.340
hier wird es der Prototyp sein, weil

03:27.340 --> 03:30.200
wir es zu einer Instanzmethode hinzufügen werden.

03:30.200 --> 03:32.520
Dann haben wir den Methodennamen oder den Eigenschaftsnamen, aber

03:32.520 --> 03:33.690
da wir ihn zu einer Methode hinzufügen,

03:33.690 --> 03:36.330
können wir diesen Methodennamen aufrufen, was mehr Sinn macht.

03:36.330 --> 03:38.600
Wenn dies ein String oder ein Symbol ist oder es

03:38.600 --> 03:40.229
könnte auch eine Zahl sein, natürlich,

03:40.229 --> 03:43.250
aber hier wissen wir das wir typischerweise mit Strings arbeiten

03:43.250 --> 03:45.061
werden, also können wir hier auch einfach

03:45.061 --> 03:48.470
mit String arbeiten, abhängig davon wo Sie planen diesen Dekorator hinzuzufügen

03:48.470 --> 03:50.170
und wie generisch er sein soll und zu

03:50.170 --> 03:52.484
guter Letzt bekommen wir hier den Deskriptor der

03:52.484 --> 03:56.340
vom Typ PropertyDescriptor als Alarm sein wird.

03:56.340 --> 03:57.650
Jetzt haben wir also diese

03:57.650 --> 03:59.655
drei Argumente, die wir alle bei Log3

03:59.655 --> 04:03.540
verwendet haben, das vorher unser Methodendekorator war.

04:03.540 --> 04:05.970
Jetzt, in autobind, und ich will jetzt sicherstellen,

04:05.970 --> 04:08.994
dass wir das this-Schlüsselwort immer auf dieses Objekt

04:08.994 --> 04:11.973
setzen, zu dem diese Methode wieder gehört.

04:11.973 --> 04:14.240
Wie können wir dies nun erreichen?

04:14.240 --> 04:15.797
Zunächst einmal muss ich Zugang zu der

04:15.797 --> 04:17.880
Methode erhalten, die aufgerufen werden soll.

04:17.880 --> 04:20.661
Und das wird mit Hilfe unseres Deskriptors möglich sein, denn

04:20.661 --> 04:22.013
wenn Sie die App neu laden und einen

04:22.013 --> 04:25.180
Blick auf einen solchen Methoden-Deskriptor werfen, sehen Sie, dass

04:25.180 --> 04:27.330
wir die Value-Eigenschaft im Deskriptor erhalten,

04:27.330 --> 04:29.460
und die zeigt auf die Funktion.

04:29.460 --> 04:32.240
Da der Wert dieser Eigenschaft eine Funktion ist, handelt es sich in diesem

04:32.240 --> 04:33.930
Fall bei einer Methode lediglich um eine Eigenschaft

04:33.930 --> 04:35.498
mit einer Funktion als Wert.

04:35.498 --> 04:38.630
Der Werteschlüssel enthält also die ursprüngliche Funktion,

04:38.630 --> 04:42.980
so dass wir hier die ursprüngliche Methode extrahieren können, wenn wir sie wie hier

04:42.980 --> 04:44.930
durch Zugriff auf den Deskriptor aufrufen

04:44.930 --> 04:47.320
wollen. Wert.

04:47.320 --> 04:50.563
Dadurch erhalten wir Zugang zu der, nun ja, ursprünglichen Methode.

04:51.790 --> 04:55.450
Als Nächstes werde ich einen neuen angepassten Deskriptor einrichten,

04:55.450 --> 04:58.320
den wir später zurückgeben werden.

04:58.320 --> 05:00.030
Dies wird nun ein Objekt

05:00.030 --> 05:03.620
vom Typ Property Descriptor sein.

05:03.620 --> 05:06.350
In diesem Objekt können wir nun alle Dinge hinzufügen,

05:06.350 --> 05:09.350
die wir einem Eigenschaftsdeskriptor hinzufügen können.

05:09.350 --> 05:12.110
Und zum Beispiel kann dies auf konfigurierbar,

05:12.110 --> 05:14.962
wahr, setzen enumerable auf false, so dass dies nicht

05:14.962 --> 05:17.130
in fremden Schleifen angezeigt, und jetzt

05:17.130 --> 05:20.310
fügen Sie einen Getter hier, und das ist neu.

05:20.310 --> 05:23.400
Ich füge hier einen Getter hinzu, der eine Methode oder eine Eigenschaft

05:23.400 --> 05:26.150
ist, die eine Funktion enthält, die die gleiche ist, so dass wir

05:27.020 --> 05:29.628
eine zusätzliche Logik ausführen können, wenn Benutzer

05:29.628 --> 05:32.260
versuchen, auf diese Eigenschaft zuzugreifen.

05:32.260 --> 05:35.170
Damit wir nicht nur direkt den Wert dieser Eigenschaft, also die Funktion,

05:35.170 --> 05:36.633
ausführen, sondern dass wir eingreifen

05:36.633 --> 05:38.888
und etwas zusätzliche Arbeit leisten können, bevor

05:38.888 --> 05:40.850
wir die Funktion ausführen.

05:40.850 --> 05:41.913
Das ist die Idee dahinter.

05:43.230 --> 05:46.290
Ich füge also keine Werteigenschaft zu diesem Deskriptor hier

05:46.290 --> 05:48.660
hinzu, sondern habe nur einen Getter, und der Getter

05:48.660 --> 05:51.540
ist im Grunde wie eine Werteigenschaft mit zusätzlicher Logik,

05:51.540 --> 05:54.777
die ausgeführt wird, bevor der Wert zurückgegeben wird.

05:54.777 --> 05:59.777
Jetzt möchte ich hier meine gebundene Funktion haben, bei der ich die ursprüngliche

05:59.900 --> 06:03.450
Methode verwenden kann, die wir hier oben extrahiert

06:03.450 --> 06:07.100
haben, und wir rufen bind auf und binden dies.

06:07.100 --> 06:08.590
Das Vermächtnis ist natürlich

06:08.590 --> 06:11.730
die Frage, worauf sich das hier bezieht.

06:11.730 --> 06:13.720
Denken Sie daran, es ist innerhalb dieser

06:13.720 --> 06:17.700
Getter-Methode, so dass dies zu verweisen, was für die Auslösung dieser Getter-Methode

06:17.700 --> 06:19.510
verantwortlich ist.

06:19.510 --> 06:21.110
Und das ist jetzt der Trick,

06:21.110 --> 06:23.700
die Getter-Methode wird durch das konkrete

06:23.700 --> 06:27.200
Objekt ausgelöst, zu dem sie gehört, so dass sich die

06:27.200 --> 06:29.190
Getter-Methode immer auf das

06:29.190 --> 06:32.160
Objekt bezieht, für das wir den Getter definiert

06:32.160 --> 06:33.610
haben.

06:33.610 --> 06:36.800
Dieser wird nicht von addEventListener überschrieben, da

06:36.800 --> 06:38.965
der Getter wie eine zusätzliche Schicht

06:38.965 --> 06:41.221
zwischen unserer Funktion, die ausgeführt

06:41.221 --> 06:43.660
wird, und dem Objekt, zu dem sie gehört, und dem

06:43.660 --> 06:44.976
Event Listener ist.

06:44.976 --> 06:47.683
Daher bezieht sich this hier auf das Objekt,

06:47.683 --> 06:51.610
für das wir die Methode ursprünglich definiert haben.

06:51.610 --> 06:54.660
So können wir dies sicher für die ursprüngliche Methode binden

06:54.660 --> 06:57.495
und sicherstellen, dass diese innerhalb der ursprünglichen

06:57.495 --> 07:01.170
Methode auch auf genau das gleiche Objekt verweist.

07:01.170 --> 07:04.300
Jetzt werde ich die gebundene Funktion hier zurückgeben und danach,

07:04.300 --> 07:06.760
außerhalb dieses angepassten Deskriptors, den angepassten

07:06.760 --> 07:08.910
Deskriptor zurückgeben.

07:08.910 --> 07:10.560
Das ist also unsere Decorator-Funktion,

07:10.560 --> 07:12.420
die ein neues Deskriptor-Objekt zurückgibt,

07:12.420 --> 07:14.103
und daher wird dieses Deskriptor-Objekt

07:14.103 --> 07:16.960
den alten Deskriptor überschreiben, das ist es, was TypeScript

07:16.960 --> 07:18.710
damit machen wird.

07:18.710 --> 07:21.500
TypeScript ersetzt dann den alten Methoden-Deskriptor,

07:21.500 --> 07:23.215
also die alte Methoden-Konfiguration

07:23.215 --> 07:26.390
durch diese neue Konfiguration hier, die diese zusätzliche Getter-Schicht

07:26.390 --> 07:28.513
hinzugefügt hat.

07:29.460 --> 07:33.330
Jetzt bin ich natürlich nicht an Ziel- und Methodennamen interessiert,

07:33.330 --> 07:37.500
also werde ich, um Fehler zu vermeiden, diesen Unterstrich und diesen hier Unterstrich

07:37.500 --> 07:39.083
zwei nennen.

07:40.260 --> 07:43.070
Wiederum nur, um TypeScript mitzuteilen, dass ich an diesen Werten

07:43.070 --> 07:45.480
nicht interessiert bin, sie aber akzeptieren muss.

07:45.480 --> 07:49.800
Und jetzt fügen wir autobind zu showMessage hier hinzu.

07:49.800 --> 07:52.203
Hier füge ich also Autobind hinzu und stelle sicher,

07:54.050 --> 07:56.490
dass Sie die Bindung dort unten im Ereignis-Listener

07:56.490 --> 07:59.236
entfernt haben, und speichere dies.

07:59.236 --> 08:01.450
Und jetzt schauen wir uns das mal an, klicken

08:01.450 --> 08:04.730
wir auf Click Me, und Sie sollten sehen This Works!

08:04.730 --> 08:06.678
Wenn ich neu lade, funktioniert das.

08:06.678 --> 08:09.680
Denn diese ist nun korrekt gebunden.

08:09.680 --> 08:12.060
Und nur um zu überprüfen, ob es wirklich unser Dekorator

08:12.060 --> 08:13.520
ist, der hier einen Unterschied

08:13.520 --> 08:15.868
macht, wenn ich die Bindung hier in meinem Getter

08:15.868 --> 08:17.850
und dem Dekorator entferne und das speichere,

08:17.850 --> 08:20.920
sehen Sie, dass wenn es jetzt neu geladen wird und wir auf Click me

08:20.920 --> 08:23.626
klicken, wir wieder undefiniert sehen.

08:23.626 --> 08:26.320
Es ist also wirklich diese zusätzliche Getter-Schicht,

08:26.320 --> 08:27.389
die hier ihre Arbeit

08:27.389 --> 08:30.430
macht und sicherstellt, dass diese immer korrekt gebunden

08:30.430 --> 08:33.260
ist, egal wie Sie showMessage aufrufen.

08:33.260 --> 08:35.380
Wenn wir es wie hier direkt auf dem Objekt aufrufen,

08:35.380 --> 08:38.350
funktioniert es, wenn wir es hier wie hier mit einem Ereignis-Listener

08:38.350 --> 08:40.760
aufrufen, funktioniert es auch.

08:40.760 --> 08:42.260
Sie sehen also, dass dies hier funktioniert,

08:42.260 --> 08:45.070
was letztendlich von diesem showMessage-Aufruf kommt, und Sie sehen

08:45.070 --> 08:48.266
auch, dass es funktioniert, wenn ich auf die Schaltfläche klicke.

08:48.266 --> 08:49.918
Dies ist also ein schönes Beispiel

08:49.918 --> 08:52.060
dafür, wie man Dekoratoren nutzen kann,

08:52.060 --> 08:55.190
um eine ganz erstaunliche Funktionalität zu bauen und sich

08:55.190 --> 08:58.718
den Ärger zu ersparen, bind überall manuell aufzurufen.

08:58.718 --> 09:01.883
Stattdessen binden Sie es einfach so.
