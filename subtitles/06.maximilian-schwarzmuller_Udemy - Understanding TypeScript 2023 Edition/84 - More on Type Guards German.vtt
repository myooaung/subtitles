WEBVTT

00:02.220 --> 00:04.080
-: Nun sind Kreuzungstypen eine Sache.

00:04.080 --> 00:05.470
Häufiger verwendet wird jedoch

00:05.470 --> 00:07.800
eine andere Funktion, und zwar die Typensicherung,

00:07.800 --> 00:10.590
die wir eigentlich schon ein wenig genutzt haben.

00:10.590 --> 00:12.400
Wir wollen hier Combinable verwenden.

00:12.400 --> 00:15.560
Es handelt sich um einen Union-Typ, bei dem wir entweder eine Zeichenkette

00:15.560 --> 00:18.020
oder eine Zahl haben, und Type Guards helfen uns

00:18.020 --> 00:21.050
bei Union-Typen, denn obwohl es schön ist, die Flexibilität

00:21.050 --> 00:23.610
zu haben, muss man oft wissen, welchen genauen Typ

00:23.610 --> 00:26.200
man jetzt zur Laufzeit bekommt.

00:26.200 --> 00:28.630
Nehmen wir an, wir haben hier unsere Additionsfunktion,

00:28.630 --> 00:33.070
bei der ich eine Zahl erhalte, die vom Typ Combinable sein muss, also eine Zeichenkette

00:33.070 --> 00:35.100
oder eine Zahl, und deshalb werde ich sie

00:35.100 --> 00:37.990
hier a nennen, und dann habe ich ein weiteres Argument, das

00:37.990 --> 00:39.520
ebenfalls Combinable sein muss,

00:39.520 --> 00:42.110
also eine Zahl oder eine Zeichenkette, und dann möchte

00:42.110 --> 00:44.640
ich a plus b zurückgeben.

00:44.640 --> 00:47.020
Nun haben wir in der Vergangenheit gesehen, dass dies nicht funktioniert.

00:47.020 --> 00:51.320
Stattdessen müssen wir nun prüfen, ob typeof a z. B.

00:51.320 --> 00:53.740
gleich string oder typeof b gleich

00:55.660 --> 00:59.780
string ist, und wenn das der Fall ist, geben wir a

00:59.780 --> 01:04.681
zurück.

01:04.681 --> 01:04.681
toString plus b. toString.

01:04.681 --> 01:06.750
Wir verketten also diese beiden Zeichenketten;

01:06.750 --> 01:09.570
andernfalls, wenn wir es nicht in diese if-Anweisung

01:09.570 --> 01:11.510
schaffen, geben wir a plus b so zurück,

01:11.510 --> 01:13.270
weil die Typengruppe jetzt weiß,

01:13.270 --> 01:15.620
dass a und b hier Zahlen sein müssen, denn wenn

01:15.620 --> 01:18.230
mindestens eine von ihnen keine Zahl wäre, wären wir

01:18.230 --> 01:19.710
hier drin.

01:19.710 --> 01:22.890
Dies hier wird Type Guard genannt, weil es uns

01:22.890 --> 01:25.280
erlaubt, die Flexibilität, die uns

01:25.280 --> 01:27.980
Union-Typen bieten, zu nutzen und trotzdem

01:27.980 --> 01:32.550
sicherzustellen, dass unser Code zur Laufzeit korrekt läuft,

01:32.550 --> 01:34.830
weil man oft Funktionen hat, die

01:34.830 --> 01:38.160
mit zwei oder drei verschiedenen Typen arbeiten,

01:38.160 --> 01:40.570
und daher ist ein Union-Typ perfekt,

01:40.570 --> 01:43.890
aber was genau man dann mit den Werten macht, hängt

01:43.890 --> 01:46.940
vom Typ ab, wie hier, wo wir entweder verketten

01:46.940 --> 01:51.670
oder mathematisch addieren.

01:51.670 --> 01:55.310
Dies ist nun ein Typschutz mit typeof.

01:55.310 --> 01:58.970
Sie können auch andere Arten von Type Guards schreiben.

01:58.970 --> 02:00.880
und dafür möchte ich auf meine Admin- und Angestelltentypen

02:00.880 --> 02:03.050
zurückkommen, die ich dort oben habe, wo ich Privilegien

02:03.050 --> 02:04.950
für den Admin und startDate für den Angestellten

02:04.950 --> 02:06.943
habe.

02:08.590 --> 02:11.810
Jetzt gibt es den ElevatedEmployee, der beides kombiniert.

02:11.810 --> 02:14.980
Legen Sie nun auch hier einen weiteren Typ an.

02:14.980 --> 02:16.330
Das ist der UnknownEmployee.

02:18.000 --> 02:21.940
Es handelt sich entweder um einen Angestellten oder einen Verwalter.

02:21.940 --> 02:25.540
Wir haben also einen Vereinigungstyp, der meine beiden benutzerdefinierten Objekttypen verwendet.

02:25.540 --> 02:28.173
Der unbekannte Arbeitnehmer ist also einer von beiden.

02:29.230 --> 02:32.003
Jetzt haben wir vielleicht eine Funktion, printEmployeeInformation,

02:34.620 --> 02:36.420
in der ich einen Mitarbeiter übergeben

02:36.420 --> 02:39.660
muss, und der sollte vom Typ unknown employee sein.

02:39.660 --> 02:41.610
Jetzt möchte ich Sie trösten. verschiedene Informationen

02:41.610 --> 02:44.030
über den Mitarbeiter protokollieren.

02:44.030 --> 02:47.210
Zum Beispiel kann der Name von emp. name, was ohne Probleme funktioniert,

02:47.210 --> 02:48.580
da beide Arten von Mitarbeitern

02:48.580 --> 02:52.140
eine Eigenschaft name haben.

02:52.140 --> 02:56.730
Aber dann möchte ich auch trösten. protokollieren Sie die Privilegien

02:58.160 --> 03:01.520
durch Zugriff auf emp. privileges, und hier bekomme

03:01.520 --> 03:04.350
ich schon Probleme bei der Autovervollständigung,

03:04.350 --> 03:07.100
weil TypeScript nicht bestätigen kann, dass dies

03:07.100 --> 03:09.890
immer auf dem Argument existiert, weil der UnknownEmployee

03:09.890 --> 03:13.540
ein normaler Mitarbeiter sein könnte, der keine privileges-Eigenschaft

03:13.540 --> 03:16.260
hat.

03:16.260 --> 03:18.330
Das kann nur der Administrator.

03:18.330 --> 03:20.100
Wir brauchen hier also einen Typenschutz.

03:20.100 --> 03:24.530
Das Problem ist nur, dass wir mit typeof nichts gewinnen werden.

03:24.530 --> 03:26.830
Wenn wir den Typ des Mitarbeiters überprüfen,

03:26.830 --> 03:29.470
wird dieser zur Laufzeit nur Objekt sein.

03:29.470 --> 03:31.380
Das sagt uns aber nicht, ob es diese Eigenschaft

03:31.380 --> 03:32.940
hat oder nicht.

03:32.940 --> 03:34.960
Wenn ich also den Code in dieser if-Prüfung verschiebe,

03:34.960 --> 03:37.430
ist TypeScript nicht glücklicher als vorher, denn ein

03:37.430 --> 03:39.750
Objekt ist, nun ja, einfach ein Objekt.

03:39.750 --> 03:41.920
Das sagt uns nichts über die Eigenschaften.

03:41.920 --> 03:44.980
Wir können nicht prüfen, ob es vom Typ Employee ist,

03:44.980 --> 03:48.130
weil das kein Typ ist, den JavaScript kennt, und bedenken

03:48.130 --> 03:49.840
Sie, dass diese Prüfung zur

03:49.840 --> 03:52.560
Laufzeit läuft und JavaScript verwendet,

03:52.560 --> 03:56.190
so dass wir nur den Typ typeof mit den Typen vergleichen können,

03:56.190 --> 03:58.010
die JavaScript kennt, und das

03:58.010 --> 04:01.920
wären Objekt, String, Zahl und Boolean, und unser benutzerdefinierter

04:01.920 --> 04:05.610
Typ ist nicht Teil davon.

04:05.610 --> 04:07.950
Das gibt es nur in der TypeScript-Welt,

04:07.950 --> 04:11.020
nicht in der kompilierten JavaScript-Welt.

04:11.020 --> 04:13.990
Das funktioniert also auch nicht.

04:13.990 --> 04:17.960
Hier besteht unsere Abhilfe darin, eine andere if-Prüfung zu verwenden.

04:17.960 --> 04:20.240
Wir wissen, dass wir auf die Berechtigungen

04:20.240 --> 04:25.240
zugreifen wollen, also könnten wir prüfen, ob es Mitarbeiterberechtigungen gibt.

04:26.400 --> 04:28.560
Das Problem ist nur, dass TypeScript es uns nicht

04:28.560 --> 04:30.690
erlaubt, überhaupt auf diese Eigenschaft

04:30.690 --> 04:33.550
zuzugreifen, nicht einmal, um sie so zu überprüfen, aber es

04:33.550 --> 04:36.200
gibt einen anderen Weg, um sie zu überprüfen.

04:36.200 --> 04:40.000
Wir können die in Schlüsselwörter verwenden, die in JavaScript eingebaut sind.

04:40.000 --> 04:43.120
Wir können prüfen, ob die Privilegien, die

04:43.120 --> 04:46.690
jetzt als String geschrieben sind, in emp.

04:46.690 --> 04:49.130
Dies ist JavaScript-Code, mit dem geprüft

04:49.130 --> 04:53.480
werden kann, ob dies als Eigenschaft des Mitarbeiters existiert,

04:53.480 --> 04:58.380
und wenn dies der Fall ist, erkennt TypeScript diese Prüfung hier und ermöglicht

04:58.380 --> 05:01.200
uns daher den Zugriff auf diese Eigenschaft

05:01.200 --> 05:04.543
innerhalb dieser if-Prüfung hier.

05:05.852 --> 05:08.380
Und wir können das für startDate

05:08.380 --> 05:12.240
wiederholen, also prüfen, ob startDate hier eine

05:12.240 --> 05:18.730
Eigenschaft ist, und wir können das auch in dieser if-Prüfung ausgeben.

05:18.730 --> 05:23.687
Wenn wir nun printEmployeeInformation aufrufen und den einen Angestellten,

05:24.650 --> 05:28.363
den wir erstellt haben, e1, übergeben, werden Sie sehen,

05:31.410 --> 05:34.860
dass dies ohne Fehler kompiliert wurde und tatsächlich

05:34.860 --> 05:37.430
die Berechtigungen ausgibt und, nun,

05:37.430 --> 05:40.730
auch hier sollten die Daten natürlich auch Startdatum

05:40.730 --> 05:42.530
sagen.

05:42.530 --> 05:45.820
Aber damit erhalten wir das Ergebnis, das wir erwarten würden.

05:45.820 --> 05:48.590
Und auf der anderen Seite, wenn wir einen Mitarbeiter

05:48.590 --> 05:50.950
übergeben, der nicht alle diese Felder hat, z.B.

05:50.950 --> 05:53.090
wenn wir einen spontan erstellen, der nur

05:53.090 --> 05:56.383
ein Startdatum hat, aber keine Privilegien, dann funktioniert

05:57.850 --> 06:00.370
alles und wird ohne Fehler kompiliert, und wir drucken

06:00.370 --> 06:03.160
einfach nichts über die Privilegien wegen dieser if-Prüfung,

06:03.160 --> 06:05.723
die wir dort haben.

06:07.650 --> 06:09.800
Wenn Sie mit Klassen arbeiten,

06:09.800 --> 06:13.070
können Sie auch eine andere Art von Typschutz verwenden,

06:13.070 --> 06:16.520
nämlich den Typschutz instanceof.

06:16.520 --> 06:21.460
Nehmen wir an, wir haben dort unten eine Klasse, Car, und die hat eine

06:21.460 --> 06:23.800
Drive-Methode, wo sie einfach nur

06:23.800 --> 06:26.523
console sagt. log Driving, und wir

06:28.480 --> 06:31.750
haben eine andere Klasse, Truck, die auch eine Drive-Methode

06:31.750 --> 06:34.623
hat, oder vielleicht sagen Sie Driving a truck,

06:35.840 --> 06:40.250
aber wir müssen den Methodennamen sagen.

06:40.250 --> 06:43.980
Und wo wir auch eine loadCargo-Methode haben, wo wir

06:43.980 --> 06:46.570
einen Betrag haben, der eine Zahl ist,

06:46.570 --> 06:49.040
und dann habe ich hier nur etwas Dummy-Code,

06:49.040 --> 06:53.570
wo ich sage, "Loading cargo plus amount. So etwas in der Art, hoppla, Betrag, so etwas in der Art.

06:53.570 --> 06:57.323
Wir haben jetzt also zwei Klassen, die sich natürlich ähneln,

06:58.170 --> 06:59.320
die Antriebsmethode,

06:59.320 --> 07:02.090
aber auch einen Unterschied haben.

07:02.090 --> 07:03.890
Auch hier können wir einen Vereinigungstyp

07:03.890 --> 07:08.200
erstellen, nämlich Fahrzeug, das entweder ein Auto oder ein Lkw

07:08.200 --> 07:13.030
ist, und nun, sagen wir, erstellen wir ein neues Fahrzeug, v1, das ein neues

07:13.030 --> 07:18.030
Auto ist, und ein weiteres, v2, das ein neuer Lkw ist.

07:18.050 --> 07:21.873
Jetzt habe ich eine Funktion, useVehicle, die einfach ein

07:23.890 --> 07:26.443
Fahrzeug erwartet, das vom Typ Fahrzeug

07:27.700 --> 07:29.780
sein sollte, also von diesem Union-Typ

07:29.780 --> 07:31.350
sein sollte.

07:31.350 --> 07:34.203
Hier bekommen wir also ein Fahrzeug, und unser Ziel

07:35.420 --> 07:37.490
ist es nun, alles zu tun, was wir mit Fahrzeugen

07:37.490 --> 07:40.040
tun können: fahren und laden.

07:40.040 --> 07:43.400
Also können wir natürlich ein Fahrzeug anrufen. Antrieb, denn den gibt es immer, aber für

07:43.400 --> 07:45.420
Fahrzeug. loadCargo, haben

07:45.420 --> 07:50.010
wir ein Problem, denn das hat nur ein Lkw.

07:50.010 --> 07:52.720
Ein Auto hat so etwas nicht, also wird es nicht funktionieren.

07:52.720 --> 07:56.440
Jetzt können wir natürlich wieder prüfen, ob loadCargo im Fahrzeug

07:56.440 --> 07:59.513
ist, und wenn das der Fall ist, können wir es verwenden.

08:00.760 --> 08:05.760
Zumindest wenn ich den Tippfehler hier korrigiere.

08:06.430 --> 08:09.480
Jetzt speichern wir das und rufen useVehicle auf

08:09.480 --> 08:13.230
und übergeben v1, dann rufen wir es wieder mit v2 auf, und

08:13.230 --> 08:17.400
ich speichere das alles, es kompiliert und funktioniert.

08:17.400 --> 08:21.680
Das ist eine Möglichkeit, dies zu tun.

08:21.680 --> 08:23.340
Ein alternativer Weg, der vielleicht

08:23.340 --> 08:26.580
etwas eleganter ist, weil er auch das Risiko ausschließt, dass Sie sich

08:26.580 --> 08:28.600
bei der Eingabe dieser Eigenschaftszeichenkette

08:28.600 --> 08:31.920
vertippen, besteht darin, dass Sie instanceof verwenden.

08:31.920 --> 08:34.080
Wir können prüfen, ob Fahrzeug eine Instanz von Truck ist.

08:34.080 --> 08:39.080
Wenn das der Fall ist, wissen wir, dass es eine loadCargo-Methode geben wird.

08:39.360 --> 08:42.510
Ein instanceof ist ein normaler Operator, der in Vanilla

08:42.510 --> 08:45.230
JavaScript eingebaut ist, es handelt sich also

08:45.230 --> 08:47.430
nicht um TypeScript-Code.

08:47.430 --> 08:49.280
Genau wie typeof ist dies Teil von

08:49.280 --> 08:52.250
JavaScript und wird zur Laufzeit ausgeführt.

08:52.250 --> 08:54.290
JavaScript kennt den Typ Truck nicht, aber

08:54.290 --> 08:56.780
es kennt Konstruktorfunktionen, und Klassen werden

08:56.780 --> 08:59.330
schließlich einfach in Konstruktorfunktionen übersetzt,

08:59.330 --> 09:01.490
und TypeScript kann dann herausfinden, ob

09:01.490 --> 09:03.400
ein Fahrzeug auf der Grundlage der Konstruktorfunktion

09:03.400 --> 09:06.580
Truck erstellt wurde.

09:06.580 --> 09:10.290
Da Klassen in etwas kompiliert werden, das JavaScript

09:10.290 --> 09:11.970
versteht, nämlich Konstruktorfunktionen,

09:11.970 --> 09:15.450
kann es diese verwenden.

09:15.450 --> 09:17.210
Wenn wir hier eine Schnittstelle anstelle

09:17.210 --> 09:20.390
einer Klasse verwenden würden, und deshalb könnten wir natürlich die Implementierung

09:20.390 --> 09:21.223
nicht hier drin haben,

09:21.223 --> 09:22.950
aber wir werden das tun, wenn wir ein Objekt

09:22.950 --> 09:25.130
mit der Objektliteralnotation erstellen, dann könnten

09:25.130 --> 09:27.300
wir instanceof nicht verwenden, weil Schnittstellen,

09:27.300 --> 09:30.940
wie Sie gelernt haben, nicht in JavaScript-Code kompiliert werden, und deshalb können

09:30.940 --> 09:34.370
wir sie zur Laufzeit nicht verwenden.

09:34.370 --> 09:37.160
Für Klassen können wir das tun, weil JavaScript Klassen

09:37.160 --> 09:40.010
und Konstruktorfunktionen unterstützt, und mit instanceof

09:40.010 --> 09:42.290
können Sie dann herausfinden, ob ein Objekt

09:42.290 --> 09:44.500
auf dieser Klasse basiert.

09:44.500 --> 09:47.660
Wenn wir wissen, ob dies der Fall ist, dann haben wir eine loadCargo-Funktion.

09:47.660 --> 09:51.850
Es handelt sich also um Typenschützer.

09:51.850 --> 09:53.480
Letztendlich ist Type Guards

09:53.480 --> 09:55.890
nur ein Begriff, der die Idee oder den Ansatz

09:55.890 --> 09:59.470
beschreibt, zu prüfen, ob eine bestimmte Eigenschaft oder

09:59.470 --> 10:02.980
Methode existiert, bevor man versucht, sie zu verwenden,

10:02.980 --> 10:06.310
oder ob man etwas mit dem Typ machen kann, bevor man versucht,

10:06.310 --> 10:08.470
ihn zu verwenden.

10:08.470 --> 10:10.220
Bei Objekten kann das mit instanceof

10:10.220 --> 10:15.113
oder mit in geschehen, bei anderen Typen können Sie typeof verwenden, und so haben Sie

10:16.140 --> 10:19.780
jetzt alle Möglichkeiten, die Flexibilität, die Ihnen Union-Typen

10:19.780 --> 10:22.280
bieten, zu nutzen und trotzdem Code zu schreiben,

10:22.280 --> 10:25.090
der dann das eine oder das andere tut, je nachdem,

10:25.090 --> 10:29.050
welchen genauen Typ Sie zur Laufzeit erhalten.
