WEBVTT

00:02.290 --> 00:03.280
Instructeur : Alors

00:03.280 --> 00:06.110
commençons avec notre application Node typescript.

00:06.110 --> 00:08.750
Vous pourriez penser que nous avons besoin d'une configuration

00:08.750 --> 00:11.170
complexe avec webpack et ainsi de suite, mais ce n'est

00:11.170 --> 00:12.410
pas le cas.

00:12.410 --> 00:16.270
Nous allons juste utiliser la commande tsc pour compiler nos fichiers.

00:16.270 --> 00:18.160
Et ensuite, nous pouvons utiliser la commande node

00:18.160 --> 00:19.890
pour exécuter nos fichiers compilés.

00:19.890 --> 00:21.700
C'est tout ce dont nous avons besoin ici.

00:21.700 --> 00:25.960
Je vais quand même configurer un projet ici avec npm init, simplement pour que nous

00:25.960 --> 00:28.810
obtenions un paquet. json parce que puisque nous allons

00:28.810 --> 00:32.250
créer une application Node normale ici, nous allons installer certains

00:32.250 --> 00:36.240
paquets tiers comme Express. js.

00:36.240 --> 00:38.470
Et je veux aussi installer un outil supplémentaire

00:38.470 --> 00:40.950
qui simplifie notre processus de développement.

00:40.950 --> 00:44.630
Exécutez donc npm init ici dans un dossier vide de votre choix.

00:44.630 --> 00:48.190
Vous pouvez confirmer tous les paramètres par défaut ici si vous le souhaitez, et ensuite,

00:48.190 --> 00:50.540
vous aurez un paquet. qui devrait ressembler

00:50.540 --> 00:52.750
à quelque chose comme ceci.

00:52.750 --> 00:56.210
Maintenant, lancez également tsc --init ici pour initialiser

00:56.210 --> 00:59.390
ce projet en tant que projet typescript afin d'obtenir

00:59.390 --> 01:01.860
ce tsconfig. json que vous pouvez maintenant

01:01.860 --> 01:04.313
retrouver dans vos besoins.

01:05.770 --> 01:09.020
Et là, j'ai déjà le premier ajustement que je veux faire.

01:09.020 --> 01:13.300
La cible ici peut facilement être définie sur es2018 par exemple, en fonction de

01:13.300 --> 01:16.090
la version de node que vous utilisez, mais si vous utilisez

01:16.090 --> 01:17.750
la dernière version, cette syntaxe

01:17.750 --> 01:19.630
JavaScript moderne devrait être prise

01:19.630 --> 01:21.380
en charge.

01:21.380 --> 01:24.220
Le module peut rester à commonjs, mais ensuite,

01:24.220 --> 01:27.460
je veux aussi ajouter moduleResolution ici et le

01:27.460 --> 01:29.010
mettre à node.

01:29.010 --> 01:33.350
Cela indique simplement à Typescript comment vos différents fichiers et importations

01:33.350 --> 01:35.483
vont fonctionner ensemble.

01:36.410 --> 01:37.640
Et nous devons le définir sur le

01:37.640 --> 01:40.020
nœud pour nous assurer que tout fonctionne correctement.

01:40.020 --> 01:42.470
Je vais également définir mon outDir ici,

01:42.470 --> 01:44.790
commentez-le et définissez-le à dist,

01:44.790 --> 01:46.990
et mon rootDir à src parce que je veux

01:46.990 --> 01:49.600
séparer mon code source typescript.

01:49.600 --> 01:50.700
Et ensuite la sortie

01:50.700 --> 01:53.170
qui sera les fichiers JavaScript réels que

01:53.170 --> 01:55.733
nous pouvons exécuter avec l'aide de node.

01:56.820 --> 01:58.850
En dehors de cela, le mode strict me convient,

01:58.850 --> 02:00.710
mais bien sûr, vous pouvez adapter tout

02:00.710 --> 02:03.030
cela à vos besoins et à vos goûts personnels.

02:03.030 --> 02:06.320
Vous avez appris tout cela tout au long de ce cours après tout.

02:06.320 --> 02:08.830
Et avec cela, nous pouvons sauvegarder cette configuration.

02:08.830 --> 02:11.070
Vous trouverez également en annexe cette configuration

02:11.070 --> 02:12.460
de départ très basique.

02:12.460 --> 02:14.120
Vous pouvez sauvegarder cette configuration.

02:14.120 --> 02:16.170
Et je vais aussi créer un dossier src

02:16.170 --> 02:18.130
où nous allons écrire notre code source,

02:18.130 --> 02:20.230
notre code source typecript.

02:20.230 --> 02:23.020
Et c'est la partie où je veux maintenant plonger.

02:23.020 --> 02:26.370
Nous allons maintenant construire notre application avec typescript

02:26.370 --> 02:27.960
dans le dossier src.

02:27.960 --> 02:30.200
Et comme nous allons construire un simple serveur web et que nous

02:30.200 --> 02:32.920
voulons aussi utiliser Express. js là, je vais, tout d'abord,

02:32.920 --> 02:36.120
installer quelques dépendances ici.

02:36.120 --> 02:38.440
Avec npm install --save, je veux installer

02:38.440 --> 02:41.040
express ici qui est le framework Express

02:41.040 --> 02:44.100
pour Node. js dont vous n'avez, bien sûr,

02:44.100 --> 02:45.680
pas toujours besoin mais ici,

02:45.680 --> 02:48.440
je veux construire une application Node Express.

02:48.440 --> 02:51.500
Et il installera le paquet body-parser qui nous aide

02:51.500 --> 02:54.403
à analyser les corps des requêtes entrantes.

02:55.290 --> 02:58.180
Pour l'instant, c'est tout ce qui concerne mes dépendances de production.

02:58.180 --> 03:00.110
Nous pourrions en ajouter d'autres plus tard.

03:00.110 --> 03:01.523
Donc on va appuyer sur la touche "entrée" ici.

03:02.960 --> 03:04.120
Et avec cette installation,

03:04.120 --> 03:07.540
regardons les dépendances de développement.

03:07.540 --> 03:11.450
Je vais les installer avec npm install --save-dev, et là, je veux installer

03:11.450 --> 03:13.330
modemon, un outil qui nous permet d'exécuter

03:13.330 --> 03:16.340
un fichier avec Node, mais qui ensuite surveille le fichier

03:16.340 --> 03:18.210
et le dossier dans lequel il se trouve,

03:18.210 --> 03:19.820
ainsi que tous les sous-dossiers

03:19.820 --> 03:22.690
pour des changements.

03:22.690 --> 03:24.050
Chaque fois qu'un fichier est

03:24.050 --> 03:26.030
modifié, le serveur Node est redémarré.

03:26.030 --> 03:27.620
Cela accélérera simplement le développement

03:27.620 --> 03:29.510
car il redémarrera automatiquement notre

03:29.510 --> 03:31.490
serveur d'application Node chaque fois que nous

03:31.490 --> 03:33.500
modifierons le code source.

03:33.500 --> 03:36.180
Nous devons redémarrer le serveur lorsque le code change,

03:36.180 --> 03:39.430
car sinon, notre serveur fonctionne toujours avec l'ancien code,

03:39.430 --> 03:41.340
mais le redémarrage manuel est ennuyeux

03:41.340 --> 03:44.190
et nous ne pouvons pas l'accélérer avec nodemon.

03:44.190 --> 03:47.323
Et pour le moment, c'est vraiment tout.

03:49.290 --> 03:50.340
Alors appuyons sur Entrée ici

03:50.340 --> 03:52.360
et installons cette dépendance de développement.

03:52.360 --> 03:54.760
Ce ne sera pas la dernière dont nous aurons besoin dans ce

03:54.760 --> 03:56.660
cours, mais pour l'instant, tout va bien.

03:56.660 --> 03:58.830
Alors attendons que ça se termine.

03:58.830 --> 04:00.130
L'installation est donc terminée

04:00.130 --> 04:01.450
et nous allons maintenant commencer

04:01.450 --> 04:04.773
à écrire et à créer une application Node Express très basique.
