WEBVTT

00:02.480 --> 00:06.780
Homem: Agora, com o conhecimento sobre funções de fábrica, ou decoradores

00:06.780 --> 00:10.523
de fábrica, podemos fazer coisas bastante interessantes.

00:11.570 --> 00:16.240
Poderíamos comercializar uma nova fábrica de decoradores com modelo,

00:16.240 --> 00:17.693
por exemplo.

00:19.400 --> 00:21.590
E aqui, espero obter um modelo,

00:21.590 --> 00:23.780
que deve ser algum fio.

00:23.780 --> 00:28.780
E um anzol, que também deveria ser um fio.

00:28.870 --> 00:32.050
Então aqui, eu devolvo minha função anônima, que é

00:32.050 --> 00:34.800
o próprio decorador, como você aprendeu.

00:34.800 --> 00:37.440
Porque novamente, tenho uma fábrica de decoradores.

00:37.440 --> 00:40.570
E ali, quero renderizar algum template, que

00:40.570 --> 00:42.530
deve ser algum código HTML,

00:42.530 --> 00:46.590
em algum lugar no dom, onde eu encontro este gancho.

00:46.590 --> 00:49.160
Portanto, agora podemos ir ao índice. html e acrescentar tal lugar

00:49.160 --> 00:51.250
para que possamos ver que isto funciona.

00:51.250 --> 00:54.483
Podemos acrescentar um mergulho aqui, com uma identificação de aplicação, talvez.

00:55.430 --> 00:59.560
E, em seguida, em aplicação. ts, em vez de logger, eu acrescento

00:59.560 --> 01:01.357
WithTemplate.

01:02.570 --> 01:05.130
Vamos passar um fio vazio como primeiro argumento, por enquanto,

01:05.130 --> 01:06.810
e a aplicação como segundo argumento.

01:06.810 --> 01:09.313
Portanto, esta identificação que atribuí ao div aqui.

01:10.170 --> 01:12.400
E agora dentro dessa função interna está

01:12.400 --> 01:13.830
o nosso decorador atual.

01:13.830 --> 01:16.540
Dentro desta função de decorador,

01:16.540 --> 01:19.500
quero chegar até o elemento.

01:19.500 --> 01:24.500
Para o elemento de gancho com documento. getElementById.

01:25.662 --> 01:29.390
Para o anzol, estamos chegando aqui como um argumento.

01:29.390 --> 01:33.480
E se o HookEl é uma coisa que existe, então eu quero acessar

01:34.330 --> 01:37.960
seu HTML interno, e definir isto como um template,

01:37.960 --> 01:39.920
digamos.

01:39.920 --> 01:41.440
Uma instalação muito simples,

01:41.440 --> 01:43.640
é claro, mas isto deve servir.

01:43.640 --> 01:45.460
Agora, eu não estou interessado no construtor.

01:45.460 --> 01:48.110
E para dizer àtilografia que não estou interessado aqui, posso

01:48.110 --> 01:50.370
acrescentar um sublinhado como nome, que basicamente

01:50.370 --> 01:52.007
sinaliza o datilografia: "Sim, eu sei

01:52.007 --> 01:54.580
que entendo este argumento, mas não preciso dele.

01:54.580 --> 01:56.170
Mas tenho que especificá-lo.

01:56.170 --> 01:58.920
Portanto, com este sublinhado, eu lhes digo que estou

01:58.920 --> 02:00.850
ciente disso, mas que não vou usá-lo. Porque, tudo o que quero fazer por enquanto,

02:00.850 --> 02:02.300
é render este ano.

02:02.300 --> 02:04.033
Por isso, agora quando adicionamos

02:05.580 --> 02:07.750
aqui ComTemplate, aqui poderíamos adicionar

02:07.750 --> 02:10.400
uma tag h1, My Person Object como esta.

02:10.400 --> 02:14.570
Além disso, feche-a.

02:14.570 --> 02:15.653
E se agora salvamos isso, ele se compila sem erros.

02:19.130 --> 02:22.380
E de fato, aqui você vê que isto foi apresentado na tela.

02:22.380 --> 02:26.350
E isto, esperamos, mostra-lhe o poder

02:26.350 --> 02:29.720
que você tem com os decoradores.

02:29.720 --> 02:31.720
Você pode construir decoradores realmente avançados

02:31.720 --> 02:34.780
como este, que de repente faz um pouco de magia nos bastidores.

02:34.780 --> 02:38.500
E é isso que quero dizer com a metaprogramação.

02:38.500 --> 02:41.260
Acrescentamos aqui alguma lógica, que poderíamos

02:41.260 --> 02:43.930
expor se esta fosse uma biblioteca de terceiros que

02:43.930 --> 02:46.190
compartilhamos com outros usuários.

02:46.190 --> 02:47.890
Poderíamos expor isto como parte

02:47.890 --> 02:50.350
da biblioteca, e qualquer um que use nossa biblioteca

02:50.350 --> 02:52.630
pode importar esta função de decorador e adicioná-la

02:52.630 --> 02:54.910
a uma classe para depois, de repente, tornar

02:54.910 --> 02:57.408
magicamente algum conteúdo.

02:57.408 --> 03:00.500
E claro, você está, você não está nem mesmo limitado a fazer isso.

03:00.500 --> 03:02.980
Se você quiser dar o nome que faz parte

03:02.980 --> 03:05.340
da classe quando ela se instanciar,

03:05.340 --> 03:07.850
você pode fazer isso também.

03:07.850 --> 03:09.570
Afinal de contas, temos nosso construtor: Função aqui.

03:09.570 --> 03:12.427
Agora o que podemos fazer com isso é criar uma nova pessoa

03:14.190 --> 03:16.010
aqui, chamando nosso construtor,

03:16.010 --> 03:18.660
porque esse é nosso construtor: Funcionar aqui,

03:18.660 --> 03:20.380
afinal de contas.

03:20.380 --> 03:23.820
Deixe-me converter isto em qualquer um, então o datilografia

03:23.820 --> 03:26.570
permite isto e não pensa que é uma função normal.

03:26.570 --> 03:29.240
E então poderíamos ir ao nosso elemento

03:29.240 --> 03:31.880
gancho, e perguntar por uma tag h1, que

03:31.880 --> 03:35.160
você, obviamente na prática, nem sempre terá.

03:35.160 --> 03:36.070
Mas, para fins de demonstração,

03:36.070 --> 03:37.330
presumo que sempre teremos uma aqui.

03:37.330 --> 03:39.820
Whoops, e eu deveria sempre fechar a etiqueta

03:39.820 --> 03:42.330
h1 lá embaixo, agora que a vejo.

03:42.330 --> 03:43.850
E então aqui, com um ponto de exclamação,

03:43.850 --> 03:46.750
novamente assumindo que sempre encontramos um elemento

03:46.750 --> 03:49.900
h1, podemos definir um textContent igual a p. nome.

03:49.900 --> 03:53.660
E se eu fizer isso e salvar

03:53.660 --> 03:56.010
isso, agora eu produzo o nome,

03:56.010 --> 03:59.400
que é parte do objeto aqui no modelo.

03:59.400 --> 04:01.540
Portanto, isto é algo que você pode fazer, e é claro

04:01.540 --> 04:03.420
que você pode escrever decoradores muito

04:03.420 --> 04:06.010
mais elaborados do que eu o estou fazendo aqui.

04:06.010 --> 04:07.840
Considere o Angular, uma estrutura muito

04:07.840 --> 04:09.550
popular que usa datilografia.

04:09.550 --> 04:12.270
Eles usam decoradores, como este componente

04:12.270 --> 04:15.740
decorador, para permitir que você passe em um objeto onde

04:15.740 --> 04:18.420
você especifica coisas como o modelo para

04:18.420 --> 04:21.020
o componente discomponente.

04:21.020 --> 04:21.930
E o seletor na cúpula

04:21.930 --> 04:23.950
onde este modelo deve ser apresentado.

04:23.950 --> 04:25.760
Isto está relativamente próximo do que definimos aqui.

04:25.760 --> 04:28.170
Um modelo, e depois um local onde ele deve ser apresentado.

04:28.170 --> 04:31.230
Agora é desnecessário dizer que os decoradores angulares

04:31.230 --> 04:33.760
são, naturalmente, muito mais avançados e elaborados

04:33.760 --> 04:36.550
do que nosso decorador básico aqui.

04:36.550 --> 04:38.740
No entanto, a idéia central é a mesma.

04:38.740 --> 04:41.660
Angular lhe dá os decoradores aqui, para que você

04:41.660 --> 04:43.900
possa especificar algum código HTML,

04:43.900 --> 04:46.700
que pode ser conectado à sua classe de componente

04:46.700 --> 04:49.470
que será renderizada à cúpula quando este componente

04:49.470 --> 04:51.760
for renderizado.

04:51.760 --> 04:53.830
Agora, caso você não saiba como funciona

04:53.830 --> 04:55.850
o Angular, isso não é um problema.

04:55.850 --> 04:57.060
Basta entender aqui, que

04:57.060 --> 04:58.700
ele funciona com aulas e decoradores,

04:58.700 --> 05:01.300
e então ele faz basicamente o que fizemos aqui.

05:01.300 --> 05:03.600
Portanto, essa é outra coisa que você pode fazer com decoradores,

05:03.600 --> 05:06.400
ou como especificamente aqui, com as fábricas de decoradores.

05:06.400 --> 05:09.220
Porque isso nos permite passar naquele

05:09.220 --> 05:12.210
conflito extra que precisamos aqui.

05:12.210 --> 05:13.610
E era também isso que eu queria dizer com a metaprogramação.

05:13.610 --> 05:16.590
Estamos criando coisas, estamos criando funções de

05:16.590 --> 05:21.130
decorador, o que você pode dizer que tem algum impacto sobre o usuário final.

05:21.130 --> 05:24.840
No NP dual render ou algo na tela, aqui.

05:24.840 --> 05:27.510
Mas fazemos isso com uma ferramenta que expomos

05:27.510 --> 05:29.090
a outros desenvolvedores.

05:29.090 --> 05:31.370
Porque esse decorador é uma ferramenta desse

05:31.370 --> 05:33.970
tipo, que outros desenvolvedores têm que usar adicionando-a

05:33.970 --> 05:36.000
a uma classe neste exemplo.

05:36.000 --> 05:38.580
Caso contrário, isto não faria nada.

05:38.580 --> 05:40.300
Assim, fornecemos utilidades extras

05:40.300 --> 05:43.490
aos desenvolvedores, que os outros desenvolvedores podem

05:43.490 --> 05:46.590
usar para, por exemplo, renderizar convenientemente algo

05:46.590 --> 05:49.050
na tela para uma classe de doação.

05:49.050 --> 05:50.590
Isso é a mesma coisa que a Angular faz

05:50.590 --> 05:52.940
aqui, de uma forma mais avançada, e é algo para o qual as

05:52.940 --> 05:54.220
niveladoras são perfeitas.
