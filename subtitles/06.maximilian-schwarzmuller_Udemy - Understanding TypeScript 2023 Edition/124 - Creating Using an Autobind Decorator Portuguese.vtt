WEBVTT

00:02.220 --> 00:04.550
-: Estou falando de um decorador, que podemos acrescentar

00:04.550 --> 00:07.350
que automaticamente vincula a palavra-chave "esta" para

00:07.350 --> 00:09.930
que não tenhamos que chamar de "bind" aqui.

00:09.930 --> 00:12.500
Agora, obviamente, chamar aqui de "bind" não é uma grande

00:12.500 --> 00:14.160
coisa se não houver nada de errado com

00:14.160 --> 00:16.460
isso, mas também queremos praticar o que aprendemos

00:16.460 --> 00:20.220
e se tivermos que fazer isso em muitos lugares em nossa aplicação tendo um decorador,

00:20.220 --> 00:22.730
o que podemos simplesmente acrescentar pode ser realmente

00:22.730 --> 00:24.970
mais fácil.

00:24.970 --> 00:27.100
Então, vamos nos livrar de amarrar isto aqui.

00:27.100 --> 00:30.010
E em vez disso, acima da classe aqui, vou adicionar o

00:30.010 --> 00:33.010
decorador de encadernação automática e estou apenas

00:33.010 --> 00:34.920
adicionando alguns comentários

00:34.920 --> 00:38.750
aqui para manter este arquivo organizado, pelo menos um pouco.

00:38.750 --> 00:40.490
ProjectInput Class

00:42.260 --> 00:44.790
Então, o que é um decorador?

00:44.790 --> 00:46.770
Um decorador é uma função, certo?

00:46.770 --> 00:48.130
E você pode encontrá-lo aqui

00:48.130 --> 00:51.383
com a decoração da função ou como uma expressão da função.

00:52.490 --> 00:54.780
Portanto, aqui vou usar uma decoração de

00:54.780 --> 00:57.780
função, e vou nomeá-la autobind, o nome é com você.

00:57.780 --> 01:01.670
E este decorador receberá argumentos gratuitos o alvo,

01:01.670 --> 01:03.173
o nome do método ao qual

01:04.430 --> 01:06.430
está vinculado, porque aqui

01:06.430 --> 01:09.083
vou criar um decorador de método.

01:09.980 --> 01:12.960
E também o descritor

01:12.960 --> 01:15.720
desse método.

01:15.720 --> 01:18.370
Uh, descritor de propriedade porque os métodos

01:18.370 --> 01:22.760
no final são apenas propriedades, propriedades que detêm funções.

01:22.760 --> 01:24.400
Agora, por que este é um decorador de método?

01:24.400 --> 01:29.210
Porque a idéia é que podemos acrescentá-la para submeterHandler

01:29.210 --> 01:32.210
desta forma, e ser feito com ela.

01:32.210 --> 01:33.680
Essa é a idéia.

01:33.680 --> 01:35.500
Agora, ainda não estamos totalmente

01:35.500 --> 01:38.143
lá, mas é assim que deve funcionar no final.

01:39.090 --> 01:42.950
Agora, para que funcione, vamos voltar à nossa função lá

01:42.950 --> 01:46.880
em cima e o que tem que ir para o corpo funcional então?

01:46.880 --> 01:49.490
Bem, lá dentro, eu quero antes de tudo

01:49.490 --> 01:51.950
ter acesso ao método original.

01:51.950 --> 01:56.593
Com descritor. valor para que possamos armazenar o método

01:56.593 --> 01:59.380
com o qual definimos originalmente.

01:59.380 --> 02:03.540
Então quero criar aqui meu descritor ajustado, que

02:03.540 --> 02:04.873
é um objeto.

02:06.650 --> 02:11.090
Vou digitar PropertyDescriptor, na verdade.

02:11.090 --> 02:13.880
Onde configurável deve ser definido como verdadeiro,

02:13.880 --> 02:15.910
para que possamos sempre mudá-lo.

02:15.910 --> 02:17.573
E onde depois precisamos de um getter.

02:18.510 --> 02:21.770
E nesse getter, aqui, que deve ser executado

02:21.770 --> 02:24.270
quando se tenta acessar a função.

02:24.270 --> 02:27.710
Vamos criar a função de encadernação aqui, usando o método

02:27.710 --> 02:29.220
original que estamos extraindo

02:29.220 --> 02:31.030
lá em cima.

02:31.030 --> 02:34.063
E a chamada amarrar isto nele.

02:35.370 --> 02:36.203
Então, quero

02:37.860 --> 02:40.170
devolver essa função vinculada, e

02:40.170 --> 02:41.603
isso deve ser tudo.

02:42.510 --> 02:44.190
E, em geral, é claro, portanto,

02:44.190 --> 02:46.620
vou devolver o descritor ajustado nesse

02:46.620 --> 02:48.653
método de decoração.

02:49.510 --> 02:52.880
Agora temos um erro com isso, no submitHandler.

02:52.880 --> 02:56.020
Isso, o suporte experimental para decoradores é uma característica

02:56.020 --> 02:57.960
que basicamente precisa ser habilitada.

02:57.960 --> 03:00.400
Portanto, devemos ir para o arquivo tsconfig

03:00.400 --> 03:02.320
e, lá, basta rolar para baixo.

03:02.320 --> 03:05.770
Você deve encontrar a opção "Decoradores experimentais",

03:05.770 --> 03:07.450
basta comentar isso em.

03:07.450 --> 03:09.980
E acrescente uma vírgula em frente a ela.

03:09.980 --> 03:14.183
Guarde isso e reinicie o processo de compilação dos tipos.

03:15.180 --> 03:17.700
Agora, ainda me mostra alguns erros aqui, se

03:17.700 --> 03:18.913
eu expandir isto, o métodoNome

03:20.212 --> 03:23.170
é declarado, mas seu valor nunca é lido.

03:23.170 --> 03:25.410
Em anexo. ts linha quatro.

03:25.410 --> 03:26.760
Refere-se a isto aqui, eu

03:26.760 --> 03:29.020
tenho este argumento, que recebi aqui e

03:29.020 --> 03:30.940
que na verdade nunca utilizei.

03:30.940 --> 03:34.370
O mesmo vale para o alvo, eu nunca usei isso.

03:34.370 --> 03:36.343
Agora, há duas maneiras de resolver isto.

03:37.200 --> 03:39.610
Uma maneira, é ir ao tsconfig, e

03:39.610 --> 03:42.813
afrouxar nossas regras de rigor, aqui.

03:44.160 --> 03:46.740
noUnusedParameters, se definirmos isto como falso, estamos

03:46.740 --> 03:49.090
realmente permitindo parâmetros não utilizados.

03:49.090 --> 03:50.670
Portanto, isto seria uma

03:50.670 --> 03:52.910
coisa, ou você usa nomes especiais

03:52.910 --> 03:54.053
sublinhados, e sublinhe

03:55.180 --> 03:56.653
dois.

03:57.770 --> 04:01.860
Isto é, na verdade, uma dica para datilografia e javascript que você está

04:01.860 --> 04:03.130
ciente de que não vai usar

04:03.130 --> 04:04.800
estes valores, mas você precisa

04:04.800 --> 04:05.930
aceitá-los porque precisa

04:05.930 --> 04:08.740
do argumento que eles procuram.

04:08.740 --> 04:11.810
Se você agora salvar isto, isto se compila sem erros

04:11.810 --> 04:14.700
e se nós voltarmos e entrarmos aqui e enviarmos

04:14.700 --> 04:17.040
isto, ainda funciona agora graças ao nosso

04:17.040 --> 04:20.060
decorador de encadernação automática.

04:20.060 --> 04:23.120
O que, esperamos, também mostra que este decorador pode

04:23.120 --> 04:24.950
ter alguma utilidade real.

04:24.950 --> 04:27.530
Agora, é claro, aqui na verdade, é um pouco mais de trabalho

04:27.530 --> 04:29.510
do que apenas chamar de "bind bind".

04:29.510 --> 04:32.120
Mas imagine isto sendo usado em cada vez mais métodos

04:32.120 --> 04:33.820
que todos têm que ser vinculados.

04:33.820 --> 04:36.140
Não ter que ligar para amarrar isto manualmente, pode,

04:36.140 --> 04:38.140
então, salvar novamente algum tempo, e também

04:38.140 --> 04:40.430
evitar alguns erros em potencial nos casos em que

04:40.430 --> 04:42.343
você simplesmente esqueceu.
