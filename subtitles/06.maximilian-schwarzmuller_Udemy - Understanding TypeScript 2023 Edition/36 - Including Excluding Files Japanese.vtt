WEBVTT

00:02.200 --> 00:06.290
講師：これで､ TypeScriptで複数のファイルを管理できるようになりましたね｡

00:06.290 --> 00:08.870
さて､ 複数のファイルを持つことについて一言｡

00:08.870 --> 00:11.500
ここでやっているように複数のファイルを扱う場合､

00:11.500 --> 00:31.040
モジュールを使って互いにインポートすることもできます｡ バニラJavaScriptでご存知かもしれませんが､ そこでもモジュールがあります｡

00:31.040 --> 00:31.040
htmlを使用しています｡ 

00:31.040 --> 00:32.990
さて､ これでプロジェクトとして管理できるようになり､

00:32.990 --> 00:39.060
複数のファイルをここでコンパイルできるようになったわけですが｡

00:39.060 --> 00:41.910
では､ tsconfigを見てみましょう｡  jsonファイルは､ このプロジェクトを管理する上で重要なファイルであり､

00:41.910 --> 00:51.290
基本的にTypeScriptがこれらのファイルをどのようにコンパイルすべきかを指示するものだからです｡

00:51.290 --> 00:56.470
コンパイラの動作を設定する compilerOptions

00:56.470 --> 00:59.620
に入る前に､ 閉じ中括弧の前､

00:59.620 --> 01:03.760
閉じ中括弧の後にスクロールダウンして､

01:03.760 --> 01:23.410
コンパイラやコンパイルステップの動作に影響しないオプション､ 代わりにコンパイラがこのプロジェクトでどのように動作するかを設定するオプションを見てみましょう｡

01:23.700 --> 01:26.770
ここでexcludeを追加すると配列になり､

01:26.770 --> 01:36.400
ここにプロジェクト全体でTSCを実行したときにコンパイルに含めないファイルのパスを入力できます｡

01:36.400 --> 01:38.010
例えば､ ここではアナリティクスを除外したい､

01:38.010 --> 01:41.137
と言うことができます｡ もちろん､ これはここではあまり意味がありませんが､

01:41.137 --> 01:45.300
どのように機能するかを示すために､ コンパイルからts｡

01:45.300 --> 01:51.600
そうしたら､ 今度はtscを再実行し､ まずanalyticsを削除します｡

01:51.600 --> 01:51.600
jsが再作成されたかどうかを確認できるように､

01:51.600 --> 01:59.810
今､ ウォッチモードでtscまたはtscを実行すると､ あなたは何の分析も表示されません｡

01:59.810 --> 01:59.810
jsファイルが作成されますが､

01:59.810 --> 02:02.060
その理由は､ そのファイルを除外しているからです｡

02:02.060 --> 02:03.340
もちろん､ このファイルについては､

02:03.340 --> 02:04.670
通常はインクルードしたいので､

02:04.670 --> 02:09.360
これはあまり意味がありませんが､ 何らかの理由でコンパイルすべきでないファイルがある場合は､

02:09.360 --> 02:12.440
このように除外することができます｡

02:12.440 --> 02:20.810
ワイルドカードを使った作業も可能で､ 例えば､ analyticsという名前のファイルがあったとします｡

02:20.810 --> 02:20.810
dev. をコンパイルするのではなく､

02:20.850 --> 02:25.770
dev.で終わるすべてのファイルをコンパイルすることができます｡

02:25.770 --> 02:25.770
これは基本的にワイルドカードであり､

02:25.770 --> 02:36.470
TypeScriptは.tsを持つすべてのファイルを無視します｡

02:36.470 --> 02:36.470
dev. tsが含まれています｡ 

02:36.470 --> 02:40.037
また､ ここにアスタリスク､ アスタリスク､ スラッシュを追加すれば､

02:40.037 --> 02:45.770
どのフォルダにあるそのパターンのファイルでも無視されることになる｡

02:45.770 --> 02:49.220
ここで設定できるのは､ node_modulesを除外することだけで､

02:49.220 --> 03:01.373
これはよく見かける設定ですが､ node_modulesの中にあるTypeScriptファイルをコンパイルしないようにするということです｡

03:02.449 --> 03:09.570
node_modulesは､ packageでインストールするすべての依存関係を保持するフォルダです｡

03:09.570 --> 03:09.570
もしこれらのライブラリのいずれかがTypeScriptのコードをシップするのであれば､

03:20.630 --> 03:29.200
それをコンパイルすることは絶対に避けなければなりません｡

03:29.200 --> 03:33.330
そのため､ ここでnode_modulesを除外するのが一般的ですが､

03:33.330 --> 03:36.510
excludeオプションを全く指定しない場合､

03:36.510 --> 03:55.670
デフォルトの設定としてnode_modulesは自動的に除外されるので､ ここにオプションを追加する必要はありません､ これがデフォルトになります｡

03:55.670 --> 03:58.500
しかし､ 追加する場合は､ node_modulesを設定する必要があります｡

03:58.500 --> 04:01.400
そうしないと､ それを除外することができないからです｡

04:01.400 --> 04:20.620
includeはその逆で､ コンパイル時にどのファイルをインクルードしたいかをTypeScriptに指定することができる｡

04:20.620 --> 04:20.620
ここで､

04:20.620 --> 04:25.570
tscを再実行すると､ アナリティクスが得られないことがわかります｡ tsファイル､ または解析なし｡

04:25.570 --> 04:25.570
jsファイル......と言うべきでしょうか｡ 

04:25.570 --> 04:26.403
なぜ？

04:26.403 --> 04:29.230
なぜなら､ アナリティクスだからです｡  jsはincludeに含まれないので､

04:29.230 --> 04:35.810
先ほど言ったように､ includeキーを設定した場合､ 本当にコンパイルしたいものはすべてincludeしなければならない｡

04:35.810 --> 04:40.080
もちろん､ ここにアナリティクスを追加することも可能です｡  をここに追加し､ それをコンパイルすることで､

04:40.080 --> 04:46.740
ご覧のような分析結果が得られます｡

04:46.740 --> 04:46.740
jsファイル､

04:46.740 --> 04:52.560
または別の方法として､ 通常コンパイルするファイルを格納するフォルダ全体をここで指定します｡

04:52.560 --> 04:57.160
ちなみに､ includeと一緒に設定すると､ includeを絞り込むことができます｡

04:57.160 --> 05:00.290
includeに含まれるフォルダーのサブフォルダーを除外すると､

05:00.290 --> 05:01.740
その除外したサブフォルダーも除外されるので､

05:01.740 --> 05:08.720
基本的には､ includeからexcludeを除いたものをコンパイルすることになります｡

05:08.720 --> 05:10.420
もちろん､ ここではincludeを設定するのではなく､

05:10.420 --> 05:12.520
すべてのTypeScriptファイルをコンパイルしたいので､

05:12.520 --> 05:22.423
その心配はなく､ node_modulesを除外すればよい｡ 説明したように､ 理論的には､ デフォルトで除外されるので､ 追加する必要すらないのだ｡

05:23.260 --> 05:27.560
ファイルオプションもあります｡

05:27.560 --> 05:30.870
これは個々のファイルを指定するもので､

05:30.870 --> 05:40.710
includeと少し似ていますが､ フォルダ全体を指定することはできず､

05:40.710 --> 05:51.340
コンパイルしたい個々のファイルを指定することになります｡

05:51.340 --> 05:55.740
実際には､ それほど頻繁にこの設定を必要としないかもしれませんが｡

05:55.740 --> 06:00.910
というわけで､ 基本的なコンパイルやプロジェクト管理のオプションはこれで終わりです｡

06:00.910 --> 06:03.900
もちろん､ コンパイラ自身やコンパイル時の動作など､

06:03.900 --> 06:10.793
もっともっと指定できることはあります｡
