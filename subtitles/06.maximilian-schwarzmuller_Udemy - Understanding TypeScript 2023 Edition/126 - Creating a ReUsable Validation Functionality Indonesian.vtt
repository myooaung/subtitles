WEBVTT

00:02.160 --> 00:06.060
Instruktur: Jadi, apa yang bisa kita tentang validasi?

00:06.060 --> 00:10.450
Nah, mungkin, mari kita mulai dari hasil akhir yang diinginkan.

00:10.450 --> 00:14.850
Ide saya adalah bahwa kita nanti memiliki beberapa fungsi validasi

00:14.850 --> 00:17.950
yang belum ada, tetapi kita nanti memilikinya,

00:17.950 --> 00:21.230
yang saya berikan enteredTitle, atau sebenarnya

00:21.230 --> 00:25.360
objek konfigurasi yang saya katakan di mana nilainya adalah

00:25.360 --> 00:30.300
enteredTitle, jadi hal yang akan divalidasi.

00:30.300 --> 00:33.260
Tetapi di mana saya kemudian juga memiliki

00:33.260 --> 00:37.350
properti tambahan yang memberi tahu fungsi validasi bagaimana

00:37.350 --> 00:39.130
memvalidasinya.

00:39.130 --> 00:43.210
Jadi misalnya, bahwa kita memiliki required yang disetel ke true di sini,

00:43.210 --> 00:47.009
minLength disetel ke lima untuk memberlakukan lima karakter, dan

00:47.009 --> 00:48.360
seterusnya.

00:48.360 --> 00:50.040
Dan kemudian kita melakukan ini

00:50.040 --> 00:51.540
di sini untuk ketiga input, dan

00:51.540 --> 00:53.900
validasi adalah fungsi yang mengembalikan true

00:53.900 --> 00:56.620
jika valid, dan false jika tidak valid, dan pada akhirnya,

00:56.620 --> 00:59.580
kita bisa memiliki sesuatu seperti ini.

00:59.580 --> 01:04.580
Atau enteredDescription dan enteredPeople, kira-kira seperti

01:04.790 --> 01:06.790
itulah idenya.

01:06.790 --> 01:09.210
Tentu saja, ini hanya salah satu cara untuk mengimplementasikannya,

01:09.210 --> 01:11.703
tetapi ini adalah cara yang sangat saya sukai.

01:12.600 --> 01:15.320
Untuk itu, di bagian atas file, saya

01:15.320 --> 01:19.470
akan menambahkan beberapa logika validasi.

01:19.470 --> 01:22.380
Dan, sekali lagi, ada banyak cara untuk melakukan ini.

01:22.380 --> 01:24.390
Pertama-tama saya akan mulai dengan mendefinisikan

01:24.390 --> 01:27.840
struktur objek yang dapat divalidasi tersebut.

01:27.840 --> 01:31.280
Jadi objek ini kita berikan ke fungsi validasi, karena

01:31.280 --> 01:33.430
tentu saja ini selalu perlu memiliki

01:33.430 --> 01:37.820
struktur yang serupa dengan sejumlah properti yang bisa ada di sana

01:37.820 --> 01:40.100
dan jenis properti tertentu, sehingga

01:40.100 --> 01:42.410
fungsi validasi benar-benar tahu

01:42.410 --> 01:44.950
apa yang sedang dikerjakannya dan dapat

01:44.950 --> 01:47.400
mengekstrak properti dengan benar dan

01:47.400 --> 01:49.870
sebagainya.

01:49.870 --> 01:52.850
Jadi, saya akan mulai dengan mendefinisikan antarmuka.

01:52.850 --> 01:55.380
Kita juga bisa memilih tipe khusus, sepenuhnya

01:55.380 --> 01:56.550
terserah Anda.

01:56.550 --> 01:58.690
Karena saya akan mendefinisikan struktur

01:58.690 --> 02:02.793
objek, saya selalu lebih suka mendefinisikan interface saja.

02:03.810 --> 02:06.700
Saya akan menamainya Validatable di

02:06.700 --> 02:09.940
sini, karena ini menggambarkan objek yang

02:09.940 --> 02:13.300
dapat divalidasi, dan akan memiliki nilai

02:13.300 --> 02:17.140
yang harus berupa string atau juga angka.

02:17.140 --> 02:18.980
Ini akan memiliki prop yang diperlukan,

02:18.980 --> 02:21.240
yang akan memiliki nilai Boolean, jadi benar

02:21.240 --> 02:22.630
atau salah.

02:22.630 --> 02:26.470
Dan kemudian katakanlah kita mendukung validasi minLength,

02:26.470 --> 02:28.212
yang seharusnya berupa angka,

02:28.212 --> 02:30.220
maxLength yang seharusnya berupa

02:30.220 --> 02:32.510
angka, dan juga jika kita mendapatkan

02:32.510 --> 02:35.240
angka, nilai min dan max.

02:35.240 --> 02:37.417
Perbedaannya dengan minLength dan

02:37.417 --> 02:40.310
maxLength adalah bahwa ini memeriksa panjang

02:40.310 --> 02:42.320
string, ini nilai angka jika di atas

02:42.320 --> 02:43.960
angka tertentu atau di bawah

02:43.960 --> 02:46.010
maksimum tertentu.

02:46.010 --> 02:48.870
Ini adalah properti yang ingin saya dukung.

02:48.870 --> 02:50.470
Sekarang selain nilai,

02:50.470 --> 02:52.140
semuanya harus opsional,

02:52.140 --> 02:54.410
yang dapat kita terapkan dengan

02:54.410 --> 02:57.650
menambahkan tanda tanya setelah nama.

02:57.650 --> 03:00.070
Ngomong-ngomong, alternatif untuk menggunakan tanda tanya

03:00.070 --> 03:02.720
adalah dengan mengizinkan nilai yang tidak terdefinisi.

03:02.720 --> 03:04.880
Tanda tanya pada dasarnya melakukan hal yang sama.

03:04.880 --> 03:09.370
Dikatakan bahwa required adalah Boolean atau undefined.

03:09.370 --> 03:12.610
Jadi sekarang kita memiliki antarmuka yang dapat divalidasi.

03:12.610 --> 03:13.893
Apa yang bisa kita lakukan dengan itu?

03:14.930 --> 03:17.893
Nah, sekarang dengan antarmuka yang dibuat,

03:18.830 --> 03:21.330
kita dapat membuat fungsi itu, fungsi

03:21.330 --> 03:24.220
validasi yang saya cari.

03:24.220 --> 03:27.410
Itu harus mendapatkan objek yang dapat divalidasi.

03:27.410 --> 03:32.410
Jadi ValidatableInput adalah tipe Validatable.

03:32.410 --> 03:33.450
Itulah ide saya di sini.

03:33.450 --> 03:36.400
Jadi, ia mendapatkan objek yang memiliki struktur ini.

03:36.400 --> 03:38.270
Dan sekarang di sana, kita

03:38.270 --> 03:41.670
bisa memeriksa semua properti ini ada dan kemudian

03:41.670 --> 03:44.810
melakukan validasi yang sesuai.

03:44.810 --> 03:46.150
Sekarang, apa sebenarnya yang

03:46.150 --> 03:48.200
kita lakukan dalam fungsi validasi?

03:48.200 --> 03:49.033
Nah, pada akhirnya di

03:49.033 --> 03:50.930
sini, saya ingin membuat variabel, isValid,

03:50.930 --> 03:52.330
yang pada awalnya adalah true.

03:52.330 --> 03:54.030
Jadi asumsi standarnya adalah apa yang

03:54.030 --> 03:55.510
kita dapatkan adalah benar.

03:55.510 --> 03:57.430
Tetapi kita akan menetapkannya ke

03:57.430 --> 04:01.330
false segera setelah setidaknya satu dari pemeriksaan kita gagal.

04:01.330 --> 04:03.480
Dan sekarang mari kita mulai dengan pemeriksaan pertama.

04:03.480 --> 04:06.410
Mari kita lihat apakah validatableInput di sini,

04:06.410 --> 04:08.220
argumen yang kita dapatkan,

04:08.220 --> 04:11.380
apakah itu memiliki prop yang diperlukan?

04:11.380 --> 04:13.260
Jika itu tidak terdefinisi.

04:13.260 --> 04:16.490
Jika ini disetel, dan jika benar, ini berarti

04:16.490 --> 04:18.630
bahwa nilai diperlukan dan

04:18.630 --> 04:20.630
tidak boleh kosong.

04:20.630 --> 04:22.080
Jadi sekarang di sini,

04:22.080 --> 04:26.160
kita dapat mengatur isValid sama dengan isValid dan cara

04:26.160 --> 04:27.700
JavaScript bekerja, ini

04:27.700 --> 04:30.550
memastikan bahwa nilai baru dari isValid

04:30.550 --> 04:34.330
akan salah jika hal setelah dan adalah salah.

04:34.330 --> 04:36.870
Karena jika setidaknya salah satu dari dua hal itu salah,

04:36.870 --> 04:38.660
nilai keseluruhannya akan salah.

04:38.660 --> 04:40.500
Sekarang isValid pada awalnya adalah

04:40.500 --> 04:44.070
benar, tetapi jika hal setelah operator logika dan adalah salah,

04:44.070 --> 04:46.300
isValid akan menjadi salah.

04:46.300 --> 04:48.700
Dan pada akhirnya saya akan mengembalikan isValid.

04:48.700 --> 04:50.040
Jadi, sekarang apa yang

04:50.040 --> 04:53.550
kita tambahkan setelah dua simbol ampersand?

04:53.550 --> 04:58.170
Nah saya ingin memeriksa apakah validatableInput. nilai, jika itu kosong.

04:58.170 --> 05:00.530
Dan untuk itu, kita bisa memangkasnya

05:00.530 --> 05:04.210
dan memeriksa panjangnya, atau bisakah kita?

05:04.210 --> 05:05.630
Nah, masalahnya adalah, kita tidak

05:05.630 --> 05:07.510
tahu apakah value adalah sebuah string.

05:07.510 --> 05:09.090
Ini adalah string atau angka.

05:09.090 --> 05:10.910
Jadi, tidak dijamin menjadi string,

05:10.910 --> 05:12.140
dan oleh karena itu metode

05:12.140 --> 05:14.100
trim tidak selalu tersedia.

05:14.100 --> 05:17.570
Sekarang, ada berbagai cara untuk mengatasi hal itu.

05:17.570 --> 05:19.600
Kita bisa menambahkan type guard, kita bisa memeriksa

05:19.600 --> 05:23.390
apakah typeof validatableInput. nilai sama dengan string,

05:25.250 --> 05:30.250
dan hanya melakukan pemeriksaan ini jika ya.

05:30.920 --> 05:33.040
Tetapi sebenarnya itu akan sedikit berlebihan.

05:33.040 --> 05:36.120
Apa yang bisa kita lakukan di sini sangat sederhana.

05:36.120 --> 05:37.257
Kita bisa dengan mudah mengatakan

05:37.257 --> 05:39.140
"baiklah, konversikan ke string. Jika tadinya berupa angka, sekarang menjadi string lagi.

05:39.140 --> 05:41.370
Jika itu adalah string, tidak ada yang berubah.

05:41.370 --> 05:44.170
Dan dengan itu, kami melakukan ini.

05:44.170 --> 05:45.900
Sekarang saya hanya perlu menambahkan cek

05:45.900 --> 05:47.950
saya di sini untuk memeriksa apakah itu nol.

05:47.950 --> 05:50.360
Atau lebih tepatnya, jika bukan nol.

05:50.360 --> 05:53.463
Jadi, jika bukan nol, maka ini akan mengembalikan

05:54.680 --> 05:56.810
true, dan isValid tetap

05:56.810 --> 05:58.740
true.

05:58.740 --> 06:00.500
Jika nol, jadi jika panjangnya nol, jika

06:00.500 --> 06:02.760
kosong, ini akan mengembalikan false dan oleh

06:02.760 --> 06:04.940
karena itu isValid akan menjadi false.

06:04.940 --> 06:06.890
Dan kita hanya memeriksa ini jika pemeriksaan

06:06.890 --> 06:08.280
yang diperlukan ditandai

06:08.280 --> 06:11.190
dengan pengaturan required ke true.

06:11.190 --> 06:13.530
Itulah pemeriksaan pertama yang ingin saya lakukan di sini.

06:13.530 --> 06:15.560
Tentu saja bukan satu-satunya.

06:15.560 --> 06:17.660
Kita bisa melanjutkan dan memeriksa apakah

06:17.660 --> 06:18.950
validatableInput. minLength diatur, jika

06:18.950 --> 06:23.880
minLength diatur, maka string yang kita dapatkan

06:23.880 --> 06:25.190
ini harus memiliki panjang

06:25.190 --> 06:27.050
minimum tertentu.

06:27.050 --> 06:28.780
Penting, string harus memiliki

06:28.780 --> 06:30.440
panjang minimum tertentu.

06:30.440 --> 06:31.620
Kita tidak peduli dengan angka di sini,

06:31.620 --> 06:33.600
kita tidak memeriksa nilai minimum dari sebuah angka.

06:33.600 --> 06:37.060
Jadi di sini kita sebenarnya bisa menambahkan type guard, kita

06:37.060 --> 06:40.390
bisa memasukkannya ke dalam pengecekan ini, dan mengecek apakah

06:40.390 --> 06:42.320
typeof validatableInput. nilai sama dengan

06:42.320 --> 06:46.910
string.

06:46.910 --> 06:48.460
Jika tidak, kita tidak perlu masuk ke dalam pemeriksaan

06:48.460 --> 06:50.357
jika ini karena tidak ada yang perlu diperiksa.

06:50.357 --> 06:52.570
Jika nilai kita adalah angka, kita tidak peduli tentang hal ini.

06:52.570 --> 06:55.330
Jika kita menetapkan panjang minimum untuk sebuah angka,

06:55.330 --> 06:57.710
pada dasarnya kita melewatkan pemeriksaan ini

06:57.710 --> 06:59.330
karena tidak masuk akal.

06:59.330 --> 07:01.890
Jika kita memiliki string, dan minLength

07:01.890 --> 07:03.420
ditetapkan, maka saya ingin

07:03.420 --> 07:05.663
mengatur isValid sama dengan isValid

07:06.570 --> 07:10.053
dan, dan sekali lagi, pemeriksaan kita.

07:11.181 --> 07:12.600
Dan pemeriksaan

07:12.600 --> 07:16.580
di sini adalah apakah validatableInput. nilai, yang kita tahu adalah string pada titik

07:16.580 --> 07:20.810
ini di sini, panjang, lebih

07:20.810 --> 07:24.070
besar dari validatableInput. minLength.

07:24.070 --> 07:28.520
Jadi lebih besar daripada nilai yang didefinisikan di sini.

07:28.520 --> 07:31.660
Sekarang kita memiliki satu masalah potensial di sini, dan apakah Anda

07:31.660 --> 07:33.920
melihat masalah yang mana yang mungkin terjadi?

07:33.920 --> 07:36.163
Ini secara umum seharusnya bekerja, tetapi akan

07:37.030 --> 07:38.630
gagal jika minLength diset ke nol.

07:38.630 --> 07:42.210
Maksud pengembang menetapkannya ke nol mungkin

07:42.210 --> 07:45.760
bukan untuk melewatkan pemeriksaan ini, tetapi

07:45.760 --> 07:48.760
untuk memeriksa apakah kita memiliki panjang

07:48.760 --> 07:50.170
minimum nol.

07:50.170 --> 07:51.960
Nah, bisa dibilang ini adalah pemeriksaan yang berlebihan,

07:51.960 --> 07:53.800
karena pada dasarnya memeriksa apakah kita memang

07:53.800 --> 07:55.850
memiliki sesuatu, yang sudah kita lakukan dengan pemeriksaan

07:55.850 --> 07:57.260
yang diperlukan.

07:57.260 --> 07:59.300
Jadi, ini bukan masalah besar.

07:59.300 --> 08:01.330
Namun, jika Anda ingin super aman di

08:01.330 --> 08:04.150
sini, kita harus benar-benar memeriksa apakah

08:04.150 --> 08:05.470
validatableInput. minLength tidak sama dengan undefined.

08:05.470 --> 08:10.470
Atau tidak sama dengan null, dengan

08:10.640 --> 08:14.910
satu tanda sama dengan, ini termasuk null dan undefined, begitulah

08:14.910 --> 08:17.130
cara kerja JavaScript.

08:17.130 --> 08:18.890
Ini sedikit lebih aman, karena sekarang

08:18.890 --> 08:20.470
kita memastikan bahwa kita selalu

08:20.470 --> 08:23.010
menjalankan pemeriksaan ini bahkan jika minLength diset

08:23.010 --> 08:25.140
ke nol, yang merupakan nilai yang falsy.

08:25.140 --> 08:27.222
Sekali lagi, Anda bisa berdebat apakah itu masuk akal,

08:27.222 --> 08:29.740
karena pada dasarnya pemeriksaan yang sama seperti di atas sana,

08:29.740 --> 08:32.270
tetapi tetap saja, di sini saya ingin melakukannya.

08:32.270 --> 08:34.930
Jadi itulah minLength.

08:34.930 --> 08:36.790
Sekarang saya akan menyalin ini, dan pada dasarnya melakukan

08:36.790 --> 08:38.130
hal yang sama untuk maxLength.

08:38.130 --> 08:40.720
Jadi maxLength di sini juga diperiksa,

08:40.720 --> 08:44.350
juga di sini dan juga hanya untuk string.

08:44.350 --> 08:46.870
Dan tentu saja di sini kita hanya perlu mengembalikan ini.

08:46.870 --> 08:49.280
Kita ingin memastikan bahwa panjang nilai yang

08:49.280 --> 08:52.380
disediakan berada di bawah panjang maksimal kita.

08:52.380 --> 08:55.173
Nah, dan sekarang kita mendapatkan dua pemeriksaan lagi yang

08:56.810 --> 08:58.760
tersisa untuk nilai min dan max yang hanya masuk

08:58.760 --> 09:00.160
akal untuk sebuah angka.

09:00.160 --> 09:03.310
Jadi di sini saya akan menambahkan pemeriksaan lain dan memeriksa

09:03.310 --> 09:05.150
apakah validatableInput. min tidak sama dengan

09:05.150 --> 09:08.280
null.

09:09.720 --> 09:11.100
Sekali lagi, saya tidak hanya memeriksa

09:11.100 --> 09:13.820
kebenaran, karena itu akan bermasalah dengan nilai nol.

09:13.820 --> 09:17.050
Dan kemudian saya akan memeriksa apakah tipe validatableInput. nilai sama dengan

09:17.050 --> 09:21.770
angka.

09:21.770 --> 09:23.250
Karena saya melihat tidak banyak

09:23.250 --> 09:25.640
akal dalam memeriksa ini untuk sebuah string.

09:25.640 --> 09:26.760
Jika Anda ingin memeriksanya untuk string,

09:26.760 --> 09:28.020
tentu saja Anda bisa menghilangkan ini.

09:28.020 --> 09:29.680
Kemudian Anda hanya perlu memastikan

09:29.680 --> 09:32.120
Anda mengonversi nilainya menjadi angka saat Anda menggunakannya

09:32.120 --> 09:34.380
dalam cek yang akan kita tulis.

09:34.380 --> 09:35.970
Pemeriksaan yang akan kita tulis, sekali

09:35.970 --> 09:37.220
lagi, menggunakan nilai lama dari

09:37.220 --> 09:39.740
isValid dan menggabungkannya dengan pemeriksaan baru untuk kemudian

09:39.740 --> 09:41.500
menyimpannya kembali di isValid.

09:41.500 --> 09:44.000
Dan pemeriksaan baru sekarang harus memasukkan

09:44.000 --> 09:47.210
nomor kita dengan baik dan memeriksa apakah itu lebih besar

09:47.210 --> 09:48.730
dari nilai min.

09:48.730 --> 09:54.650
Jadi di sini saya memeriksa apakah validatableInput. lebih besar dari validatableInput.

09:54.650 --> 09:54.650
min.

09:54.650 --> 09:58.690
Dan sekarang kita bisa mengulangi ini untuk

09:58.690 --> 10:02.010
max, jadi di sini kita membutuhkan max dan di sini kita juga membutuhkan

10:02.010 --> 10:06.190
max dan kita perlu mengubahnya di sini menjadi lebih kecil dari simbol.

10:06.190 --> 10:10.363
Dengan itu, kami memeriksa semua skenario berbeda yang bisa Anda

10:11.920 --> 10:13.230
miliki di sini.

10:13.230 --> 10:16.930
Dan kita mengembalikan isValid.

10:16.930 --> 10:18.710
Sekarang kita hanya perlu membuat objek-objek

10:19.840 --> 10:21.600
yang mematuhi antarmuka ini untuk kemudian

10:21.600 --> 10:23.630
mengirimkannya ke fungsi validasi.

10:23.630 --> 10:26.573
Untuk itu, mari kita pergi ke project input,

10:28.160 --> 10:31.360
dan di sana di gatherUserInput saya ingin membangun

10:31.360 --> 10:34.000
objek validatable saya.

10:34.000 --> 10:36.360
Catatan tambahan, selain antarmuka, tentu saja kita

10:36.360 --> 10:38.420
juga bisa membuat kelas di sini, lalu kita bisa

10:38.420 --> 10:40.870
menginstansiasinya dengan kata kunci baru, tetapi semua

10:40.870 --> 10:43.570
itu untuk tujuan latihan dan demo di sini saya ingin menunjukkan

10:43.570 --> 10:46.070
bagaimana ini bekerja dengan antarmuka.

10:46.070 --> 10:48.990
Jadi di sini kita memiliki titleValidatable,

10:48.990 --> 10:51.900
yang seharusnya bertipe Validatable.

10:52.850 --> 10:54.970
Dan itu tentu saja merupakan objek yang

10:54.970 --> 10:56.830
perlu memiliki properti nilai.

10:56.830 --> 10:58.930
Dan itu adalah EnteredTitle kita.

10:58.930 --> 11:01.020
Ini tidak membutuhkan properti lain

11:01.020 --> 11:03.550
tetapi saya ingin memeriksa apakah itu tidak

11:03.550 --> 11:06.750
kosong, jadi kita akan mengatur required ke true.

11:06.750 --> 11:08.743
Dan kemudian kita bisa menyalinnya dan mengulanginya

11:09.710 --> 11:12.430
untuk deskripsi dan untuk orang-orang.

11:12.430 --> 11:16.270
Dan di sini kita memiliki deskripsinya, whoops, deskripsi

11:16.270 --> 11:19.250
yang dimasukkan, maksud saya.

11:19.250 --> 11:21.880
Di sini kita memiliki orang-orang yang masuk.

11:21.880 --> 11:24.260
Untuk lebih tepatnya di sini, saya ingin memiliki angka.

11:24.260 --> 11:26.230
Jadi, saya mengonversikannya ke angka dengan simbol plus.

11:26.230 --> 11:29.020
Semua harus diwajibkan, tetapi kemudian juga di

11:29.020 --> 11:30.810
sini katakanlah deskripsi harus

11:30.810 --> 11:32.890
memiliki minLength lima karakter dan

11:32.890 --> 11:35.420
untuk orang, minimum harus satu, sehingga kita

11:35.420 --> 11:38.823
memiliki setidaknya dua orang yang ditugaskan.

11:39.820 --> 11:42.030
Ngomong-ngomong, terserah Anda bagaimana Anda menerapkan ini.

11:42.030 --> 11:44.020
Tentu saja, dalam logika validasi

11:44.020 --> 11:47.200
Anda, Anda juga bisa memeriksa lebih besar sama dengan

11:47.200 --> 11:50.080
lebih kecil sama dengan jika Anda mau.

11:50.080 --> 11:52.030
Sama untuk panjangnya tentu saja.

11:52.030 --> 11:54.200
Lebih besar sama, lebih kecil sama.

11:54.200 --> 11:56.940
Itu juga mungkin.

11:56.940 --> 11:58.660
Sebenarnya, saya akan mempertahankan perubahan ini.

11:58.660 --> 12:00.520
Jadi, sekarang kita memiliki minimal satu orang yang

12:00.520 --> 12:01.920
ditugaskan dan maksimal lima orang.

12:01.920 --> 12:05.253
Sekarang kita memiliki tiga objek yang dapat divalidasi

12:06.100 --> 12:08.500
ini dan sekarang di sini, ke fungsi validasi,

12:08.500 --> 12:11.680
kita mengoper titleValidatable kita, ke panggilan

12:11.680 --> 12:16.440
fungsi kedua saya mengoper descriptionValidatable, dan ke panggilan

12:16.440 --> 12:21.310
fungsi ketiga saya mengoper peopleValidatable.

12:21.310 --> 12:24.460
Dan sekarang validate harus mengembalikan true jika semuanya

12:24.460 --> 12:26.380
valid, dan false jika tidak.

12:26.380 --> 12:29.480
Jadi sekarang saya ingin memeriksa apakah setidaknya

12:29.480 --> 12:32.420
salah satunya gagal dengan memeriksa apakah

12:32.420 --> 12:36.580
ini semua salah dengan menambahkan tanda seru di depannya, untuk

12:36.580 --> 12:38.970
memeriksa apakah ini salah atau ini

12:38.970 --> 12:41.560
salah atau ini salah.

12:41.560 --> 12:42.740
Dan jika setidaknya salah satunya salah,

12:42.740 --> 12:44.750
jadi jika setidaknya salah satu panggilan fungsi validasi

12:44.750 --> 12:45.730
mengembalikan false, kita akan

12:45.730 --> 12:47.760
membuatnya di sana dan menampilkan peringatan.

12:47.760 --> 12:49.860
Dan dengan itu, untuk juga menguji

12:51.930 --> 12:53.610
ini, saya akan pergi ke

12:53.610 --> 12:54.860
index. html, karena di sana pada

12:54.860 --> 12:56.270
input untuk

12:56.270 --> 12:58.210
orang, saya sebenarnya mengizinkan

12:58.210 --> 13:00.410
maksimum 10 dan minimum nol.

13:00.410 --> 13:01.460
Jadi dalam input kita secara teknis dapat memasukkan nilai yang tidak valid.

13:01.460 --> 13:05.120
Tentu saja dengan sengaja, agar kita bisa menguji

13:05.120 --> 13:06.240
logika kita.

13:06.240 --> 13:08.090
Dan di sana untuk saat ini mari kita simpan

13:08.090 --> 13:10.200
semuanya, kompilasi tanpa kesalahan.

13:10.200 --> 13:11.750
Sekarang mari kita mencobanya.

13:11.750 --> 13:13.083
Jika saya klik add project,

13:13.920 --> 13:16.000
saya mendapatkan error yang bagus.

13:16.000 --> 13:17.430
Sekarang mari kita masukkan test disini, masih mendapatkan error.

13:17.430 --> 13:21.370
Mari kita masukkan test di sini dan lima di sini, dan

13:21.370 --> 13:24.180
saya masih mendapatkan error.

13:24.180 --> 13:25.390
Karena deskripsi saya terlalu pendek.

13:25.390 --> 13:26.870
Jika saya memasukkan satu karakter lagi,

13:26.870 --> 13:28.160
saya memiliki panjang minimum dan

13:28.160 --> 13:29.500
saya dapat membuat ini.

13:29.500 --> 13:31.210
Jadi sekarang mari kita masuk, katakanlah,

13:31.210 --> 13:32.640
minus satu orang, dan yah oke

13:32.640 --> 13:34.580
html tidak mendukung ini.

13:34.580 --> 13:37.940
Tetapi mari kita masukkan nol atau enam dan kita mendapatkan

13:37.940 --> 13:39.200
kesalahan.

13:39.200 --> 13:42.040
Dan hanya jika saya memasukkan sesuatu di antara satu

13:42.040 --> 13:43.840
dan lima, maka akan berfungsi.

13:43.840 --> 13:46.100
Jadi, tampaknya berfungsi sebagaimana

13:46.100 --> 13:49.260
mestinya, dan itu cukup bagus.

13:49.260 --> 13:50.240
Dan itu tentu saja hanya salah

13:50.240 --> 13:51.850
satu cara untuk mengimplementasikan validasi.

13:51.850 --> 13:53.570
Tetapi cara yang sebenarnya sekarang

13:53.570 --> 13:56.510
cukup dapat digunakan kembali, dapat digunakan seperti ini di berbagai

13:56.510 --> 13:59.170
bagian aplikasi juga dan tentu saja memanfaatkan typescript

13:59.170 --> 14:01.660
dan menawarkan dukungan yang hebat dan pemeriksaan jenis

14:01.660 --> 14:04.480
untuk menghindari kesalahan yang tidak perlu.
