WEBVTT

00:02.160 --> 00:06.060
Instructor: Entonces, ¿qué podríamos sobre la validación?

00:06.060 --> 00:10.450
Bueno, tal vez, empecemos por el resultado final deseado.

00:10.450 --> 00:14.850
Mi idea es que luego tengamos alguna función de validación

00:14.850 --> 00:17.950
que todavía no existe, pero que luego la tenemos,

00:17.950 --> 00:21.230
a la que le paso el enteredTitle, o en realidad

00:21.230 --> 00:25.360
un objeto de configuración diría yo donde el valor es el

00:25.360 --> 00:27.900
enteredTitle, así que lo que hay que

00:27.900 --> 00:30.300
validar.

00:30.300 --> 00:33.260
Pero donde luego también tengo propiedades

00:33.260 --> 00:37.350
adicionales que le dicen a la función de validación cómo

00:37.350 --> 00:39.130
validarlo.

00:39.130 --> 00:43.210
Así, por ejemplo, que tenemos requerido establecido en true aquí, minLength

00:43.210 --> 00:48.360
establecido en cinco para hacer cumplir cinco caracteres, y así sucesivamente.

00:48.360 --> 00:50.040
Y luego hacemos esto aquí para

00:50.040 --> 00:51.540
las tres entradas, y validar

00:51.540 --> 00:53.900
es una función que devuelve true si es

00:53.900 --> 00:56.620
válido, y false si no es válido, y al final,

00:56.620 --> 00:59.580
podríamos tener algo como esto.

00:59.580 --> 01:04.580
O enteredDescription y enteredPeople, esa sería

01:04.790 --> 01:06.790
más o menos la idea.

01:06.790 --> 01:09.210
Por supuesto, es sólo una forma de aplicar esto,

01:09.210 --> 01:11.703
pero es una forma que me gusta bastante.

01:12.600 --> 01:15.320
Para ello, en la parte superior del

01:15.320 --> 01:19.470
archivo, añadiré algo de lógica de validación.

01:19.470 --> 01:22.380
Y, de nuevo, hay muchas formas de hacerlo.

01:22.380 --> 01:24.390
En primer lugar, empezaré por

01:24.390 --> 01:27.840
definir la estructura de dicho objeto validable.

01:27.840 --> 01:31.280
Así que este objeto lo pasamos a la función de validación,

01:31.280 --> 01:33.430
porque por supuesto esto siempre tiene

01:33.430 --> 01:37.820
que tener una estructura similar con una cierta cantidad de propiedades

01:37.820 --> 01:40.100
que pueden estar ahí y ciertos tipos de

01:40.100 --> 01:42.410
propiedades, para que la función de validación

01:42.410 --> 01:44.950
realmente sepa con qué está trabajando y

01:44.950 --> 01:47.400
pueda extraer correctamente las propiedades

01:47.400 --> 01:49.870
y demás.

01:49.870 --> 01:52.850
Por lo tanto, voy a empezar por definir una interfaz.

01:52.850 --> 01:55.380
También podríamos optar por un tipo personalizado, totalmente

01:55.380 --> 01:56.550
a su elección.

01:56.550 --> 01:58.690
Como voy a definir la estructura de un

01:58.690 --> 02:02.793
objeto, siempre soy más partidario de definir sólo una interfaz.

02:03.810 --> 02:06.700
Lo llamaré Validatable aquí,

02:06.700 --> 02:09.940
porque describe un objeto validable,

02:09.940 --> 02:13.300
y tendrá un valor que debe ser una

02:13.300 --> 02:17.140
cadena o también un número.

02:17.140 --> 02:18.980
Tendrá una prop requerida, que

02:18.980 --> 02:21.240
tendrá un valor booleano, así que verdadero

02:21.240 --> 02:22.630
o falso.

02:22.630 --> 02:26.470
Y entonces digamos que soportamos la validación de minLength,

02:26.470 --> 02:28.212
que debería ser un número, maxLength

02:28.212 --> 02:30.220
que debería ser un número, y también

02:30.220 --> 02:32.510
en caso de que estemos obteniendo un número,

02:32.510 --> 02:35.240
un valor min y un valor max.

02:35.240 --> 02:37.417
La diferencia con minLength y maxLength

02:37.417 --> 02:40.310
es que este comprueba la longitud de la cadena, este el

02:40.310 --> 02:42.320
valor del número si está por encima de

02:42.320 --> 02:43.960
un determinado número o por debajo

02:43.960 --> 02:46.010
de un determinado máximo.

02:46.010 --> 02:48.870
Estas son las propiedades que quiero apoyar.

02:48.870 --> 02:50.470
Ahora, además del valor, todos

02:50.470 --> 02:52.140
deben ser opcionales, lo que

02:52.140 --> 02:54.410
podemos hacer cumplir añadiendo un signo

02:54.410 --> 02:57.650
de interrogación después de los nombres.

02:57.650 --> 03:00.070
Por cierto, la alternativa al uso de un signo de

03:00.070 --> 03:02.720
interrogación es permitir valores indefinidos.

03:02.720 --> 03:04.880
El signo de interrogación hace básicamente lo mismo.

03:04.880 --> 03:09.370
Dice que requerido es un booleano o indefinido.

03:09.370 --> 03:12.610
Así que ahora tenemos la interfaz validable.

03:12.610 --> 03:13.893
¿Qué podemos hacer con eso?

03:14.930 --> 03:17.893
Bien, ahora con esa interfaz creada, podemos

03:18.830 --> 03:21.330
crear esa función, esa función de

03:21.330 --> 03:24.220
validación que estoy buscando.

03:24.220 --> 03:27.410
Esto debería obtener un objeto validable de este tipo.

03:27.410 --> 03:32.410
Así que ValidatableInput es de tipo Validatable.

03:32.410 --> 03:33.450
Esa es mi idea.

03:33.450 --> 03:36.400
Así que obtiene un objeto que tiene esta estructura.

03:36.400 --> 03:38.270
Y ahora ahí, podemos comprobar

03:38.270 --> 03:41.670
que todas estas propiedades existen y luego hacer

03:41.670 --> 03:44.810
la validación correspondiente.

03:44.810 --> 03:46.150
Ahora bien, ¿qué hacemos exactamente

03:46.150 --> 03:48.200
en la función de validación, por tanto?

03:48.200 --> 03:49.033
Bueno, al final aquí,

03:49.033 --> 03:50.930
quiero crear una variable, isValid, que inicialmente

03:50.930 --> 03:52.330
es verdadera.

03:52.330 --> 03:54.030
Así que la suposición por defecto es

03:54.030 --> 03:55.510
que lo que obtenemos es cierto.

03:55.510 --> 03:57.430
Pero lo pondremos en falso en

03:57.430 --> 04:01.330
cuanto falle al menos una de nuestras comprobaciones.

04:01.330 --> 04:03.480
Y ahora empecemos con la primera comprobación.

04:03.480 --> 04:06.410
Veamos si el validatableInput aquí, este

04:06.410 --> 04:08.220
argumento que estamos recibiendo,

04:08.220 --> 04:11.380
si eso tiene un prop requerido?

04:11.380 --> 04:13.260
Si eso no es indefinido.

04:13.260 --> 04:16.490
Si se establece, y si por tanto es verdadero, significa

04:16.490 --> 04:18.630
que el valor es obligatorio y no

04:18.630 --> 04:20.630
debe estar vacío.

04:20.630 --> 04:22.080
Así que ahora aquí, podemos

04:22.080 --> 04:26.160
establecer isValid igual a isValid y la forma en que JavaScript

04:26.160 --> 04:27.700
funciona, esto asegura

04:27.700 --> 04:30.550
que el nuevo valor de isValid será falso

04:30.550 --> 04:34.330
si la cosa después de y es falsa.

04:34.330 --> 04:36.870
Porque si al menos una de las dos cosas es falsa,

04:36.870 --> 04:38.660
el valor global será falso.

04:38.660 --> 04:40.500
Ahora isValid inicialmente

04:40.500 --> 04:44.070
es verdadero, pero si lo que sigue al operador lógico

04:44.070 --> 04:46.300
y es falso, isValid será falso.

04:46.300 --> 04:48.700
Y al final devolveré isValid.

04:48.700 --> 04:50.040
Entonces, ¿qué añadimos

04:50.040 --> 04:53.550
ahora después de los dos símbolos de ampersand por lo tanto?

04:53.550 --> 04:58.170
Bueno, quiero comprobar si validatableInput. si está vacío.

04:58.170 --> 05:00.530
Y para ello, podemos recortarlo

05:00.530 --> 05:04.210
y comprobar la longitud, ¿o no?

05:04.210 --> 05:05.630
El problema es que no sabemos

05:05.630 --> 05:07.510
si el valor es una cadena.

05:07.510 --> 05:09.090
Es una cadena o un número.

05:09.090 --> 05:10.910
Así que no está garantizado que sea una cadena,

05:10.910 --> 05:12.140
y por lo tanto el método de recorte

05:12.140 --> 05:14.100
no está siempre disponible.

05:14.100 --> 05:17.570
Ahora bien, hay varias formas de evitarlo.

05:17.570 --> 05:19.600
Podríamos añadir una guardia de tipo, podríamos

05:19.600 --> 05:23.390
comprobar si typeof validatableInput. es igual a una cadena,

05:25.250 --> 05:30.250
y sólo realiza esta comprobación si lo es.

05:30.920 --> 05:33.040
Pero en realidad eso sería un poco redundante.

05:33.040 --> 05:36.120
Lo que podemos hacer aquí es muy sencillo.

05:36.120 --> 05:37.257
Podemos decir simplemente

05:37.257 --> 05:39.140
"bueno, conviértelo en una cadena". Si era un número, ahora vuelve a ser una cadena.

05:39.140 --> 05:41.370
Si fuera una cadena, no cambiaría nada.

05:41.370 --> 05:44.170
Y con eso, estamos haciendo esto.

05:44.170 --> 05:45.900
Ahora sólo tengo que añadir mi cheque

05:45.900 --> 05:47.950
aquí para comprobar si es cero.

05:47.950 --> 05:50.360
O para ser precisos, si no es cero.

05:50.360 --> 05:53.463
Así que si no es cero, entonces esto

05:54.680 --> 05:56.810
devolverá true, y isValid

05:56.810 --> 05:58.740
se queda en true.

05:58.740 --> 06:00.500
Si es cero, por lo que si es de longitud

06:00.500 --> 06:02.760
cero, si está vacío, esto devolverá false y por

06:02.760 --> 06:04.940
lo tanto isValid se convertirá en false.

06:04.940 --> 06:06.890
Y sólo estamos comprobando esto si

06:06.890 --> 06:08.280
la comprobación requerida

06:08.280 --> 06:11.190
está marcada con el ajuste requerido a true.

06:11.190 --> 06:13.530
Esa es la primera comprobación que quiero hacer aquí.

06:13.530 --> 06:15.560
No es el único, por supuesto.

06:15.560 --> 06:17.660
Podemos continuar y comprobar si

06:17.660 --> 06:18.950
validatableInput. minLength se establece,

06:18.950 --> 06:23.880
si minLength se establece, entonces esta cadena

06:23.880 --> 06:25.190
que obtenemos debe tener

06:25.190 --> 06:27.050
una cierta longitud mínima.

06:27.050 --> 06:28.780
Es importante que la cadena tenga

06:28.780 --> 06:30.440
una longitud mínima.

06:30.440 --> 06:31.620
Aquí no nos importan los números,

06:31.620 --> 06:33.600
no estamos comprobando el valor mínimo de un número.

06:33.600 --> 06:37.060
Así que aquí podemos añadir un protector de tipo, podemos

06:37.060 --> 06:40.390
incorporarlo a esta comprobación, y comprobar si typeof

06:40.390 --> 06:42.320
validatableInput. es igual a una

06:42.320 --> 06:46.910
cadena.

06:46.910 --> 06:48.460
Si no lo es, no necesitamos entrar en esta comprobación

06:48.460 --> 06:50.357
de si, porque entonces no hay nada que comprobar.

06:50.357 --> 06:52.570
Si nuestro valor es un número, esto no nos importa.

06:52.570 --> 06:55.330
Si establecemos una longitud mínima para un número, básicamente

06:55.330 --> 06:57.710
nos saltamos esta comprobación porque no tiene

06:57.710 --> 06:59.330
mucho sentido.

06:59.330 --> 07:01.890
Si tenemos una cadena, sin embargo, y minLength

07:01.890 --> 07:03.420
se establece, entonces quiero

07:03.420 --> 07:05.663
establecer isValid igual a isValid y,

07:06.570 --> 07:10.053
a continuación, de nuevo, nuestro cheque.

07:11.181 --> 07:12.600
Y la comprobación

07:12.600 --> 07:16.580
aquí es si validatableInput. valor, que sabemos que es una cadena en este

07:16.580 --> 07:20.810
punto aquí, la longitud,

07:20.810 --> 07:24.070
es mayor que validatableInput. minLength.

07:24.070 --> 07:28.520
Así que mayor que el valor que se definió aquí.

07:28.520 --> 07:31.660
Sin embargo, tenemos un problema potencial

07:31.660 --> 07:33.920
aquí, y ¿ves cuál podría ser?

07:33.920 --> 07:36.163
En general, esto debería funcionar, pero fallará

07:37.030 --> 07:38.630
si minLength se establece en cero.

07:38.630 --> 07:42.210
La intención del desarrollador al ponerlo a cero

07:42.210 --> 07:45.760
no es probablemente omitir esta comprobación,

07:45.760 --> 07:48.760
sino comprobar si tenemos la longitud mínima

07:48.760 --> 07:50.170
de cero.

07:50.170 --> 07:51.960
Bueno, podría decirse que es una comprobación

07:51.960 --> 07:53.800
redundante, porque básicamente está comprobando

07:53.800 --> 07:55.850
si tenemos algo, lo que ya hacemos con la comprobación

07:55.850 --> 07:57.260
obligatoria.

07:57.260 --> 07:59.300
Así que no es un gran problema.

07:59.300 --> 08:01.330
Aún así, si quieres ser súper seguro

08:01.330 --> 08:05.470
aquí, deberíamos comprobar si validatableInput.

08:05.470 --> 08:05.470
minLength no es igual a undefined.

08:05.470 --> 08:10.470
O no igual a null, con un signo de

08:10.640 --> 08:14.910
igualdad, esto incluye null e indefinido, así es como

08:14.910 --> 08:17.130
funciona JavaScript.

08:17.130 --> 08:18.890
Esto es un poco más seguro, porque ahora

08:18.890 --> 08:20.470
nos aseguramos de que siempre ejecutamos

08:20.470 --> 08:23.010
esta comprobación incluso si minLength se establece

08:23.010 --> 08:25.140
en cero, que es un valor falso.

08:25.140 --> 08:27.222
De nuevo, se podría discutir si tiene sentido,

08:27.222 --> 08:29.740
porque es básicamente la misma comprobación que allí

08:29.740 --> 08:32.270
arriba, pero aun así, aquí quiero realizarla.

08:32.270 --> 08:34.930
Así que esa es la longitud mínima.

08:34.930 --> 08:36.790
Ahora voy a copiar esto, y básicamente hacer

08:36.790 --> 08:38.130
lo mismo para maxLength.

08:38.130 --> 08:40.720
Así que maxLength aquí también se comprueba,

08:40.720 --> 08:44.350
también aquí y también sólo para las cadenas.

08:44.350 --> 08:46.870
Y, por supuesto, aquí sólo tenemos que revertir esto.

08:46.870 --> 08:49.280
Queremos asegurarnos de que la longitud del valor

08:49.280 --> 08:52.380
que se proporciona es inferior a nuestra longitud máxima.

08:52.380 --> 08:55.173
Bueno, y ahora nos quedan dos comprobaciones más para

08:56.810 --> 08:58.760
el valor mínimo y máximo que sólo tienen

08:58.760 --> 09:00.160
sentido para un número.

09:00.160 --> 09:03.310
Así que aquí voy a añadir otra comprobación y verificar

09:03.310 --> 09:05.150
si validatableInput. min no es igual

09:05.150 --> 09:08.280
a null.

09:09.720 --> 09:11.100
De nuevo, no estoy comprobando la

09:11.100 --> 09:13.820
veracidad, porque eso tendría problemas con un valor de cero.

09:13.820 --> 09:21.770
Y luego voy a comprobar si el tipo de validatableInput. es igual al número.

09:21.770 --> 09:23.250
Porque no le veo mucho sentido

09:23.250 --> 09:25.640
a comprobar esto por una cadena.

09:25.640 --> 09:26.760
Si quieres comprobar que es una cadena,

09:26.760 --> 09:28.020
por supuesto puedes omitir esto.

09:28.020 --> 09:29.680
Entonces sólo tienes que asegurarte

09:29.680 --> 09:32.120
de convertir el valor a un número cuando lo uses

09:32.120 --> 09:34.380
en el cheque que vamos a escribir.

09:34.380 --> 09:35.970
La comprobación que vamos a escribir,

09:35.970 --> 09:37.220
de nuevo, utiliza el valor antiguo

09:37.220 --> 09:39.740
de isValid y lo combina con una nueva comprobación para luego

09:39.740 --> 09:41.500
almacenarlo de nuevo en isValid.

09:41.500 --> 09:44.000
Y la nueva comprobación debería ahora incorporar

09:44.000 --> 09:47.210
bien nuestro número y comprobar si es mayor que el valor

09:47.210 --> 09:48.730
mínimo.

09:48.730 --> 09:54.650
Así que aquí compruebo si validatableInput. es mayor que validatableInput.

09:54.650 --> 09:54.650
min.

09:54.650 --> 09:58.690
Y ahora podemos repetir esto para max,

09:58.690 --> 10:02.010
así que aquí necesitamos max y aquí también necesitamos

10:02.010 --> 10:06.190
max y necesitamos cambiar esto aquí a un símbolo más pequeño que.

10:06.190 --> 10:10.363
Con eso, estamos revisando todos los diferentes escenarios que

10:11.920 --> 10:13.230
podría tener aquí.

10:13.230 --> 10:16.930
Y devolvemos isValid.

10:16.930 --> 10:18.710
Ahora sólo tenemos que crear objetos que

10:19.840 --> 10:21.600
se adhieran a esta interfaz para luego

10:21.600 --> 10:23.630
enviarlos a la función de validación.

10:23.630 --> 10:26.573
Para ello, vamos a bajar a la entrada del

10:28.160 --> 10:31.360
proyecto, y allí en gatherUserInput quiero

10:31.360 --> 10:34.000
construir mi objeto validable.

10:34.000 --> 10:36.360
Nota al margen, además de una interfaz, por supuesto

10:36.360 --> 10:38.420
que también podríamos haber creado una clase aquí,

10:38.420 --> 10:40.870
entonces podríamos instanciarla con la palabra clave

10:40.870 --> 10:43.570
new, pero todo eso para la práctica y la demostración aquí quiero

10:43.570 --> 10:46.070
mostrar cómo funciona esto con una interfaz.

10:46.070 --> 10:48.990
Así que aquí tenemos nuestro titleValidatable,

10:48.990 --> 10:51.900
que debe ser de tipo Validatable.

10:52.850 --> 10:54.970
Y eso, por supuesto, es un objeto que necesita

10:54.970 --> 10:56.830
tener una propiedad de valor.

10:56.830 --> 10:58.930
Y ese es nuestro título introducido.

10:58.930 --> 11:01.020
No necesita ninguna otra propiedad

11:01.020 --> 11:03.550
pero quiero comprobar si no está vacía,

11:03.550 --> 11:06.750
así que pondremos required a true.

11:06.750 --> 11:08.743
Y luego podemos copiar eso y repetirlo

11:09.710 --> 11:12.430
para la descripción y para la gente.

11:12.430 --> 11:16.270
Y aquí tenemos la descripción, perdón, la descripción

11:16.270 --> 11:19.250
introducida quiero decir.

11:19.250 --> 11:21.880
Aquí tenemos a las personas ingresadas.

11:21.880 --> 11:24.260
Para ser preciso aquí quiero tener un número.

11:24.260 --> 11:26.230
Así que lo convierto en un número con un símbolo de suma.

11:26.230 --> 11:29.020
Todos deben ser requeridos, pero entonces también

11:29.020 --> 11:30.810
aquí digamos que la descripción

11:30.810 --> 11:32.890
debe tener un minLength de cinco caracteres

11:32.890 --> 11:35.420
y para las personas, el mínimo debe ser uno, para

11:35.420 --> 11:38.823
que tengamos al menos dos personas asignadas.

11:39.820 --> 11:42.030
Por cierto, depende de ti cómo lo pongas en práctica.

11:42.030 --> 11:44.020
Por supuesto, en su lógica de

11:44.020 --> 11:47.200
validación, también podría comprobar si el

11:47.200 --> 11:50.080
mayor es igual al menor si así lo desea.

11:50.080 --> 11:52.030
Lo mismo para la longitud del curso.

11:52.030 --> 11:54.200
Mayor igual, menor igual.

11:54.200 --> 11:56.940
Eso también es posible.

11:56.940 --> 11:58.660
En realidad, mantendré estos cambios.

11:58.660 --> 12:00.520
Así que ahora tenemos el mínimo de una persona

12:00.520 --> 12:01.920
asignada y un máximo de cinco.

12:01.920 --> 12:05.253
Ahora tenemos estos tres objetos validables y

12:06.100 --> 12:08.500
ahora aquí, a la función validar,

12:08.500 --> 12:11.680
le pasamos nuestro titleValidatable, a la segunda

12:11.680 --> 12:16.440
llamada de la función le paso el descriptionValidatable, y a la tercera

12:16.440 --> 12:21.310
llamada de la función le paso el peopleValidatable.

12:21.310 --> 12:24.460
Y ahora validar debería devolver true si todos son válidos,

12:24.460 --> 12:26.380
y false en caso contrario.

12:26.380 --> 12:29.480
Así que ahora quiero comprobar si al

12:29.480 --> 12:32.420
menos uno de ellos falla, añadiendo

12:32.420 --> 12:36.580
un signo de exclamación delante, para comprobar

12:36.580 --> 12:38.970
si esto es falso o esto es falso

12:38.970 --> 12:41.560
o esto es falso.

12:41.560 --> 12:42.740
Y si al menos uno de ellos es falso,

12:42.740 --> 12:44.750
por lo que si al menos una de las llamadas a la función

12:44.750 --> 12:45.730
de validación devuelve falso,

12:45.730 --> 12:47.760
lo haremos ahí y mostraremos la alerta.

12:47.760 --> 12:49.860
Y con eso fuera del camino, para

12:51.930 --> 12:53.610
también probar esto, voy

12:53.610 --> 12:54.860
a ir al índice. html, porque ahí en la

12:54.860 --> 12:56.270
entrada de personas,

12:56.270 --> 12:58.210
en realidad permito un máximo de

12:58.210 --> 13:00.410
10 y un mínimo de cero.

13:00.410 --> 13:01.460
Así que en la entrada podemos introducir técnicamente valores no válidos.

13:01.460 --> 13:05.120
A propósito, por supuesto, para que podamos probar nuestra

13:05.120 --> 13:06.240
lógica.

13:06.240 --> 13:08.090
Y ya está, por ahora guardémoslo

13:08.090 --> 13:10.200
todo, compila sin errores.

13:10.200 --> 13:11.750
Vamos a probarlo.

13:11.750 --> 13:13.083
Si hago clic en añadir proyecto,

13:13.920 --> 13:16.000
me sale un error que es bueno.

13:16.000 --> 13:17.430
Ahora vamos a entrar en la prueba aquí, todavía obtener un error.

13:17.430 --> 13:21.370
Introduzcamos el test aquí y el cinco aquí,

13:21.370 --> 13:24.180
y todavía me da un error.

13:24.180 --> 13:25.390
Porque mi descripción es demasiado corta.

13:25.390 --> 13:26.870
Si introduzco un carácter más

13:26.870 --> 13:28.160
tengo la longitud mínima

13:28.160 --> 13:29.500
y puedo crear esto.

13:29.500 --> 13:31.210
Así que ahora vamos a entrar, digamos,

13:31.210 --> 13:32.640
menos uno personas, y bueno

13:32.640 --> 13:34.580
vale html no soporta esto.

13:34.580 --> 13:37.940
Pero introduzcamos el cero o el seis y obtendremos

13:37.940 --> 13:39.200
errores.

13:39.200 --> 13:42.040
Y sólo si introduzco algo entre el uno

13:42.040 --> 13:43.840
y el cinco funciona.

13:43.840 --> 13:46.100
Así que parece que funciona

13:46.100 --> 13:49.260
como debería, y eso es bastante bueno.

13:49.260 --> 13:50.240
Y, por supuesto, esa es sólo

13:50.240 --> 13:51.850
una forma de aplicar la validación.

13:51.850 --> 13:53.570
Pero una forma que ahora es bastante

13:53.570 --> 13:56.510
reutilizable, podría ser usada así en diferentes partes

13:56.510 --> 13:59.170
de la app también y por supuesto se aprovecha de typescript

13:59.170 --> 14:01.660
y nos ofrece un gran soporte y comprobación de tipos

14:01.660 --> 14:04.480
para evitar errores innecesarios.
