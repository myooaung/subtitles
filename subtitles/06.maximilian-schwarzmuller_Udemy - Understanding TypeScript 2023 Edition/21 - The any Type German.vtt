WEBVTT

00:02.260 --> 00:03.960
Kursleiter: Damit sind wir fast fertig

00:03.960 --> 00:04.920
mit den Grundtypen.

00:04.920 --> 00:07.470
Es gibt noch einen weiteren Typ, den wir bereits gesehen

00:07.470 --> 00:09.390
haben, und das ist der Typ any.

00:09.390 --> 00:11.480
Der Typ any ist der flexibelste Typ, den Sie

00:11.480 --> 00:13.310
in TypeScript zuweisen können.

00:13.310 --> 00:16.710
Dieser Typ teilt TypeScript nichts mit.

00:16.710 --> 00:19.960
Das bedeutet, dass Sie dort jede Art von Wert speichern können.

00:19.960 --> 00:22.031
Wir haben keine spezifische Typenzuweisung.

00:22.031 --> 00:25.260
TypeScript wird Sie im Grunde nie anschreien, wenn

00:25.260 --> 00:27.040
Sie etwas verwenden.

00:27.040 --> 00:28.030
Zurück in unserem Code

00:28.030 --> 00:31.360
hier, wenn ich den Typ der bevorzugten Aktivitäten auf any setzen würde, würde

00:31.360 --> 00:32.870
nicht ein Fehler erhalten.

00:32.870 --> 00:36.580
Wenn es auf ein beliebiges Array gesetzt wird, sage ich TypeScript zumindest,

00:36.580 --> 00:39.220
dass Lieblingsaktivitäten ein Array von etwas ist.

00:39.220 --> 00:41.460
Wenn ich also nur einen einzigen Wert dort speichern würde,

00:41.460 --> 00:42.830
würde ich einen Fehler erhalten.

00:42.830 --> 00:44.500
Aber solange es sich um ein Array handelt,

00:44.500 --> 00:46.638
kann ich dort speichern, was ich will.

00:46.638 --> 00:49.840
Man ist also wirklich flexibel.

00:49.840 --> 00:52.070
Das hört sich zunächst gut an, ist aber

00:52.070 --> 00:54.060
in Wirklichkeit ein großer Nachteil,

00:54.060 --> 00:58.290
den Sie unbedingt vermeiden sollten, wann immer es möglich ist.

00:58.290 --> 01:00.170
Denn jeder nimmt im Grunde alle

01:00.170 --> 01:02.512
Vorteile weg, die TypeScript bietet.

01:02.512 --> 01:04.380
Es gibt Ihnen die gleiche Erfahrung,

01:04.380 --> 01:06.430
die Sie mit Vanille-JavaScript haben,

01:06.430 --> 01:10.480
wo Sie auch zu jeder Art von Typ auf alles so zu sagen.

01:10.480 --> 01:13.820
Any stellt im Grunde sicher, dass der TypeScript-Compiler

01:13.820 --> 01:16.020
nichts überprüfen kann, denn wenn

01:16.020 --> 01:19.180
jede Eigenschaft oder jede Variable jeden Wert speichern

01:19.180 --> 01:20.818
kann, dann gibt es nicht viel

01:20.818 --> 01:23.687
zu überprüfen, richtig?

01:23.687 --> 01:27.130
Sie können also jede als Ausweichlösung verwenden, wenn Sie einen

01:27.130 --> 01:30.270
Wert oder eine Art von Daten haben, bei denen Sie nicht genau

01:30.270 --> 01:31.810
wissen können, welche Art von

01:31.810 --> 01:33.820
Daten dort gespeichert werden, und bei

01:33.820 --> 01:37.050
denen Sie dann vielleicht einige Laufzeitprüfungen verwenden,

01:37.050 --> 01:40.440
wie wir es hier getan haben, um zur Laufzeit einzugrenzen, was Sie

01:40.440 --> 01:42.660
für bestimmte Werte tun wollen.

01:42.660 --> 01:44.600
Dann können Sie mit jedem gehen.

01:44.600 --> 01:48.210
Aber in anderen Fällen sollte man wirklich alles vermeiden.

01:48.210 --> 01:51.120
Wenn Sie die Möglichkeit haben zu wissen, mit welcher Art von

01:51.120 --> 01:54.090
Daten Sie arbeiten, sollten Sie dies explizit angeben.

01:54.090 --> 01:56.780
Lassen Sie die TypeScript-Inferenz ihre Arbeit tun oder

01:56.780 --> 01:58.817
setzen Sie explizit Ihre eigenen Typen.

01:58.817 --> 02:01.783
Greifen Sie nicht auf irgendetwas zurück, wenn Sie es nicht brauchen.
