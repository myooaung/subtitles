WEBVTT

00:02.090 --> 00:02.923
Narratore: Per

00:02.923 --> 00:04.750
fare cose più avanzate con i decoratori,

00:04.750 --> 00:07.340
dovrete notare che alcuni decoratori, ad

00:07.340 --> 00:09.200
esempio quelli delle classi

00:09.200 --> 00:11.700
ma anche quelli dei metodi, sono in grado

00:11.700 --> 00:14.650
di restituire qualcosa.

00:14.650 --> 00:16.570
Ora, non restituisco nulla a nessun

00:16.570 --> 00:17.510
decoratore.

00:17.510 --> 00:18.430
Non sto parlando della

00:18.430 --> 00:20.010
funzione del decoratore, che viene

00:20.010 --> 00:22.460
restituita nel factory del decoratore.

00:22.460 --> 00:23.701
Intendo un valore di ritorno

00:23.701 --> 00:26.040
all'interno della funzione decoratore e non abbiamo

00:26.040 --> 00:28.890
alcun valore di questo tipo da nessuna parte.

00:28.890 --> 00:31.559
Ora, nella funzione WithTemplate, in questa

00:31.559 --> 00:34.670
funzione del decoratore WithTemplate, direi, potremmo

00:34.670 --> 00:36.930
aggiungere un valore di ritorno.

00:36.930 --> 00:38.520
Ciò che si può restituire e ciò

00:38.520 --> 00:40.430
che TypeScript è in grado di usare

00:40.430 --> 00:43.660
dipende dal tipo di decoratore con cui si lavora.

00:43.660 --> 00:44.990
In questo caso, stiamo lavorando

00:44.990 --> 00:47.270
con un decoratore che viene aggiunto a una classe

00:47.270 --> 00:48.750
e in una funzione di questo tipo

00:48.750 --> 00:51.677
è possibile restituire una nuova funzione costruttore, che

00:51.677 --> 00:53.800
sostituirà quella vecchia.

00:53.800 --> 00:55.590
Quindi, che sostituirà la classe a cui

00:55.590 --> 00:58.330
è stato aggiunto il decoratore, si potrebbe dire.

00:58.330 --> 01:01.073
Quindi possiamo restituire una nuova funzione,

01:01.073 --> 01:02.490
un nuovo costruttore

01:02.490 --> 01:06.370
o semplicemente una nuova classe, perché una classe, la parola

01:06.370 --> 01:08.280
chiave class, ci permette di

01:08.280 --> 01:11.150
usare questo zucchero sintattico per creare

01:11.150 --> 01:13.360
una funzione costruttore e la classe

01:13.360 --> 01:17.463
che creo non ha bisogno di avere un nome, ma possiamo e dobbiamo

01:17.463 --> 01:22.250
estendere il costruttore che otteniamo qui.

01:22.250 --> 01:23.730
Quindi, quello che sto facendo

01:23.730 --> 01:25.848
ora è che nella mia funzione decoratore

01:25.848 --> 01:28.060
restituisco una nuova classe, e tenete

01:28.060 --> 01:29.270
presente che è solo zucchero

01:29.270 --> 01:30.910
sintattico per una funzione costruttore,

01:30.910 --> 01:32.770
quindi restituisco una funzione

01:32.770 --> 01:35.400
costruttore, alla fine, che è basata sulla funzione

01:35.400 --> 01:38.830
costruttore originale, in modo da mantenere tutte le proprietà

01:38.830 --> 01:50.520
della mia classe originale, della mia funzione costruttore originale, non dobbiamo necessariamente farlo, ma non voglio perdere le mie proprietà qui, quindi lo farò.

01:50.520 --> 01:53.670
E poi qui possiamo aggiungere nuove funzionalità.

01:53.670 --> 01:56.716
Per esempio, e qui dovrò cambiare alcuni nomi, posso

01:56.716 --> 02:00.340
aggiungere una nuova funzione costruttore e, per evitare

02:00.340 --> 02:01.500
confusione, rinominare

02:01.500 --> 02:04.040
il costruttore che ho qui.

02:04.040 --> 02:06.640
Quindi la classe in cui ho aggiunto

02:06.640 --> 02:09.620
questo decoratore, la chiamerò originalConstructor

02:12.889 --> 02:15.690
e la copierò qui.

02:15.690 --> 02:18.950
E ora, invece di questa funzione costruttore qui, devo chiamare

02:18.950 --> 02:20.853
super per richiamare la funzione

02:20.853 --> 02:24.530
costruttore originale dall'interno, perché se si aggiunge una

02:24.530 --> 02:25.430
funzione costruttore

02:25.430 --> 02:27.410
in una classe che estende un'altra

02:27.410 --> 02:29.920
classe, che è, alla fine, ciò che stiamo facendo

02:29.920 --> 02:33.630
qui, allora bisogna chiamare super.

02:33.630 --> 02:36.108
E ora qui dentro potete scrivere qualsiasi logica vogliate.

02:36.108 --> 02:40.040
Per esempio, qui, potremmo spostare la logica di

02:40.040 --> 02:42.782
rendering del template dalla funzione

02:42.782 --> 02:45.620
decoratore alla nuova funzione costruttore

02:45.620 --> 02:49.020
che restituiamo qui.

02:49.020 --> 02:50.960
Quindi, ancora una volta, teniamo presente

02:50.960 --> 02:52.550
che stiamo creando una classe che

02:52.550 --> 02:53.383
alla fine crea solo

02:53.383 --> 02:54.540
una funzione costruttore

02:54.540 --> 02:55.833
con questa logica.

02:56.670 --> 02:58.850
Quindi, quello che sto cercando

02:58.850 --> 03:01.367
di fare è sostituire la classe.

03:01.367 --> 03:04.298
La funzione costruttore a cui abbiamo aggiunto il

03:04.298 --> 03:07.550
nostro decoratore con una nuova classe, con una nuova

03:07.550 --> 03:10.290
funzione costruttore, in cui eseguo ancora la

03:10.290 --> 03:12.920
vecchia logica, ma in cui aggiungo anche la

03:12.920 --> 03:14.670
mia nuova logica e quindi, ora,

03:14.670 --> 03:17.450
il template dovrebbe essere effettivamente

03:17.450 --> 03:21.340
reso nel DOM solo se istanzio davvero il mio oggetto qui.

03:21.340 --> 03:22.890
E non sempre, quando viene

03:22.890 --> 03:25.180
eseguita la funzione decoratore, che,

03:25.180 --> 03:26.340
come si è appreso,

03:26.340 --> 03:29.620
avviene non appena si definisce la classe.

03:29.620 --> 03:31.010
Ora, con una piccola modifica,

03:31.010 --> 03:34.290
non richiamo più il costruttore originale, ma accediamo

03:34.290 --> 03:37.380
a questo. per ottenere il valore

03:37.380 --> 03:40.180
della proprietà name dell'istanza

03:40.180 --> 03:42.750
che stiamo creando.

03:42.750 --> 03:45.120
Ora abbiamo una piccola lamentela in merito

03:45.120 --> 03:47.750
al fatto che i tipi non sono corretti.

03:47.750 --> 03:51.330
Per risolvere questo problema, possiamo trasformare la

03:51.330 --> 03:53.990
nostra funzione decoratore in una funzione

03:53.990 --> 03:57.113
generica, in cui otteniamo un tipo e lo impostiamo

03:58.090 --> 03:59.820
come tipo del costruttore originale,

03:59.820 --> 04:01.668
chiarendo che si tratta di una

04:01.668 --> 04:04.410
funzione costruttore e assegnando un tipo

04:04.410 --> 04:05.780
speciale, un tipo di oggetto,

04:05.780 --> 04:09.260
in cui impostiamo una nuova proprietà, che ovviamente

04:09.260 --> 04:17.760
è un nome di riserva, ma che indica a TypeScript che alla fine si tratta di un oggetto che può essere aggiunto.

04:17.760 --> 04:19.690
Si tratta quindi di una funzione costruttore,

04:19.690 --> 04:22.170
una funzione che possiamo chiamare con la parola chiave

04:22.170 --> 04:24.380
new per generare un nuovo oggetto.

04:24.380 --> 04:27.410
E questa nuova funzione, questo nuovo metodo, su cui si baserà

04:27.410 --> 04:30.660
l'oggetto T, riceverà una quantità qualsiasi di argomenti,

04:30.660 --> 04:33.520
quindi sto usando i parametri rest per accettare tutti

04:33.520 --> 04:35.380
gli argomenti che si vogliono, in modo

04:35.380 --> 04:37.290
da essere davvero flessibili riguardo

04:37.290 --> 04:39.840
agli argomenti che possono essere passati al costruttore

04:39.840 --> 04:44.000
della classe che stiamo cercando di modificare.

04:45.420 --> 04:46.430
Aggiungere la nuova

04:46.430 --> 04:49.063
funzione che alla fine restituirà un oggetto.

04:50.140 --> 04:53.500
Ora dovrei copiare la definizione del parametro rest nel mio costruttore,

04:53.500 --> 04:55.680
in modo che anche questo costruttore sia

04:55.680 --> 04:57.640
in grado di accettare tutti gli argomenti

04:57.640 --> 05:00.260
che potremmo ricevere, in modo da poter istanziare

05:00.260 --> 05:02.380
Person con qualsiasi argomento si voglia

05:02.380 --> 05:04.380
passare.

05:04.380 --> 05:06.610
Con tutti gli argomenti che potrebbero servire

05:06.610 --> 05:09.279
anche qui, nella funzione costruttore originale.

05:09.279 --> 05:11.600
L'unico problema è che non sappiamo se esiste

05:11.600 --> 05:14.021
una proprietà name e, correttamente, non

05:14.021 --> 05:16.250
sappiamo a quale classe aggiungeremo

05:16.250 --> 05:19.639
questo decoratore WithTemplate, quindi non sappiamo se

05:19.639 --> 05:23.951
ci sarà una proprietà name nella classe a cui lo aggiungeremo.

05:23.951 --> 05:25.560
Ma possiamo risolvere questo

05:25.560 --> 05:27.140
problema semplicemente dicendo

05:27.140 --> 05:30.200
a TypeScript che l'oggetto su cui si basa T, quindi la

05:30.200 --> 05:32.773
nostra funzione costruttore originale, non

05:32.773 --> 05:35.530
produrrà un oggetto qualsiasi, ma in realtà produrrà

05:35.530 --> 05:37.460
un oggetto con una proprietà name

05:37.460 --> 05:41.140
che sarà di tipo stringa e questo è corretto.

05:41.140 --> 05:44.922
Il nostro decoratore WithTemplate viene aggiunto a una classe, che avrà

05:44.922 --> 05:46.250
una proprietà name.

05:46.250 --> 05:47.300
Se lo commentassi, otterremmo

05:47.300 --> 05:48.133
un errore, perché

05:48.133 --> 05:50.740
ora cercheremmo di aggiungere questo decoratore

05:50.740 --> 05:53.460
a una classe che non soddisfa questo criterio, mentre

05:53.460 --> 05:55.543
qui lo soddisfa.

05:55.543 --> 05:58.790
Ora, ottengo un errore quando cerco di compilarlo, perché

05:58.790 --> 06:00.630
non sto usando gli args; possiamo

06:00.630 --> 06:02.660
cambiarlo con un _ per dire a typescript

06:02.660 --> 06:04.930
che sappiamo che non li usiamo e che vogliamo

06:04.930 --> 06:06.230
ignorarli.

06:06.230 --> 06:08.050
Questo è un nome di parametro

06:08.050 --> 06:10.678
valido, è solo un nome speciale che typescript

06:10.678 --> 06:13.220
prende come parametro Ho capito, devo accettarlo,

06:13.220 --> 06:15.260
ma non lo userò.

06:15.260 --> 06:18.273
E con questo, tutto viene compilato e se ricarichiamo,

06:19.440 --> 06:22.420
vediamo ancora Max sulla pagina.

06:22.420 --> 06:23.910
La cosa interessante è che

06:23.910 --> 06:25.480
se ora rimuoviamo il codice

06:25.480 --> 06:27.060
in cui istanziamo Person,

06:27.060 --> 06:28.440
se lo commento in modo da

06:28.440 --> 06:30.740
trovare una classe Person, ma senza istanziarla

06:30.740 --> 06:33.550
da nessuna parte, vedete che quando si ricarica

06:33.550 --> 06:36.890
non vediamo Max sullo schermo.

06:36.890 --> 06:39.467
Tutti i decoratori vengono eseguiti, ma non

06:39.467 --> 06:42.410
viene più visualizzato nulla sullo schermo.

06:42.410 --> 06:43.243
Il motivo è che

06:43.243 --> 06:46.340
ora abbiamo migliorato ulteriormente il nostro

06:46.340 --> 06:49.520
decoratore, sfruttando la sua caratteristica di

06:49.520 --> 06:52.360
restituire un nuovo valore o, in questo caso,

06:52.360 --> 06:55.350
una nuova funzione del costruttore.

06:55.350 --> 06:57.205
Nel caso del decoratore di classe.

06:57.205 --> 07:00.780
Si tratta di una nuova funzione costruttore o di una nuova classe che,

07:00.780 --> 07:03.040
come ho spiegato, è solo uno zucchero sintattico

07:03.040 --> 07:04.300
per la funzione costruttore

07:04.300 --> 07:06.750
e questa funzione costruttore, quindi, sostituisce

07:06.750 --> 07:09.070
la nostra classe originale, la nostra funzione

07:09.070 --> 07:12.160
costruttore originale.

07:12.160 --> 07:15.220
Ora, poiché ho chiamato super qui, salviamo

07:15.220 --> 07:17.610
la funzione originale.

07:17.610 --> 07:19.690
Salviamo la classe originale, tutto ciò

07:19.690 --> 07:22.540
che abbiamo inizializzato qui è ancora valido, perché

07:22.540 --> 07:25.530
lo faccio anche nel mio costruttore sostitutivo ed estendo

07:25.530 --> 07:27.480
la classe originale.

07:27.480 --> 07:30.420
Quindi salviamo tutto ciò che era presente nella classe originale.

07:30.420 --> 07:31.550
Non è necessario farlo,

07:31.550 --> 07:32.670
ma io lo faccio qui,

07:32.670 --> 07:35.560
perché non voglio perdere i dati originali.

07:35.560 --> 07:36.850
Ma, dietro le quinte, sostituisco

07:36.850 --> 07:39.770
la classe con la mia nuova classe personalizzata, che ci

07:39.770 --> 07:42.370
consente di aggiungere una logica aggiuntiva, da

07:42.370 --> 07:45.600
eseguire quando la classe viene istanziata.

07:45.600 --> 07:49.090
E ora, all'improvviso, siamo in grado di aggiungere una logica

07:49.090 --> 07:52.410
che non viene eseguita quando la classe è definita, ma quando

07:52.410 --> 07:54.660
la classe viene istanziata.

07:54.660 --> 07:57.150
Questo dovrebbe quindi essere un primo

07:57.150 --> 08:01.860
esempio di tutta la potenza che si può sprigionare con i decoratori, se si capisce

08:01.860 --> 08:04.480
davvero cosa si può fare con loro.

08:04.480 --> 08:06.800
Non è possibile definirli solo come funzioni

08:06.800 --> 08:09.970
e non è possibile definirli solo con funzioni fattore.

08:09.970 --> 08:12.600
In alcuni decoratori, come il decoratore di classi,

08:12.600 --> 08:14.400
si può anche restituire qualcosa

08:14.400 --> 08:17.650
per sostituire la cosa a cui si è aggiunto il decoratore, nel

08:17.650 --> 08:19.470
nostro caso la classe, con una nuova

08:19.470 --> 08:23.000
classe che può implementare la vecchia classe ma anche aggiungere

08:23.000 --> 08:25.711
la sua nuova logica personalizzata.

08:25.711 --> 08:28.004
E con questo, se lo commentiamo nuovamente,

08:28.004 --> 08:30.240
rendiamo Max sullo schermo con la nostra

08:30.240 --> 08:31.570
classe che sostituisce

08:31.570 --> 08:35.793
o estende e sostituisce la vecchia classe.
