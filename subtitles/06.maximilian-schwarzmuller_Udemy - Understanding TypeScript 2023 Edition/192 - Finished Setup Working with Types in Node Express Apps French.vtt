WEBVTT

00:02.170 --> 00:03.420
Instructeur : Alors, commençons.

00:03.420 --> 00:06.330
Comme je l'ai mentionné, je vais créer ici une API REST très basique,

00:06.330 --> 00:09.130
mais vous pouvez bien sûr construire n'importe quelle application

00:09.130 --> 00:10.810
Node avec ou sans express et de n'importe

00:10.810 --> 00:15.570
quelle manière avec TypeScript, il ne s'agit donc que d'un exemple.

00:15.570 --> 00:18.990
Vous n'êtes pas limité à cette application spécifique.

00:18.990 --> 00:21.560
Dans le dossier src, je vais ajouter une application. ts qui sera le point

00:21.560 --> 00:23.060
d'entrée racine où

00:23.060 --> 00:25.970
nous ferons tourner ce serveur.

00:25.970 --> 00:29.530
Et là, je veux importer quelque chose d'Express,

00:29.530 --> 00:31.203
de ce cadre Express.

00:32.970 --> 00:35.460
Maintenant, vous savez probablement comment nous pouvons ajouter

00:35.460 --> 00:37.890
Express ici et configurer un serveur web avec Express.

00:37.890 --> 00:41.330
Nous importons Express avec cette syntaxe ici

00:41.330 --> 00:46.330
et ensuite ici nous pouvons exécuter Express comme une fonction.

00:46.380 --> 00:50.170
Nous récupérons un tel objet app, sur lequel nous pouvons appeler listen

00:50.170 --> 00:53.750
pour écouter sur un certain port les demandes entrantes.

00:53.750 --> 00:56.120
Maintenant, cela fonctionnerait en JavaScript normal,

00:56.120 --> 00:58.420
mais vous voyez déjà que j'obtiens une erreur ici.

00:59.540 --> 01:01.600
J'ai aussi une idée de la raison pour

01:01.600 --> 01:03.500
laquelle je pourrais avoir cette

01:03.500 --> 01:06.290
erreur ici, car require est en fait une fonction

01:06.290 --> 01:10.100
qui existe dans note. js, mais pas du côté du navigateur.

01:10.100 --> 01:12.540
Maintenant dans le tsconfig. json, je n'utilise pas de librairies

01:12.540 --> 01:16.640
spéciales qui supporteraient node. js donc dans ces TypeScript il n'est

01:16.640 --> 01:18.120
pas conscient de cette

01:18.120 --> 01:20.150
fonction générale qui existe

01:20.150 --> 01:22.900
dans un nœud. environnement js.

01:22.900 --> 01:27.140
Maintenant pour que cela fonctionne, nous devons installer un type supplémentaire avec

01:27.140 --> 01:30.220
"npm install --save-dev" nous pouvons installer "@types/node"

01:30.220 --> 01:32.410
pour installer tous les types dont nous avons

01:32.410 --> 01:36.291
besoin pour travailler avec node. js Alors lançons cette

01:36.291 --> 01:39.460
commande et voyons si ça nous aide.

01:39.460 --> 01:42.320
Oui, c'est fait et cette erreur a disparu.

01:42.320 --> 01:44.390
Mais peut-être avez-vous aussi vu que sur l'application,

01:44.390 --> 01:46.680
je n'ai pas eu d'auto-complétion.

01:46.680 --> 01:50.190
Il n'y a pas non plus d'erreur, mais si nous survolons l'application, nous voyons

01:50.190 --> 01:52.410
que TypeScript ne sait pas ce qu'elle contient.

01:52.410 --> 01:54.210
Il est de type "any".

01:54.210 --> 01:56.530
Nous devrions donc probablement installer

01:56.530 --> 01:59.930
plus de types et également installer "@types/express" pour installer

01:59.930 --> 02:02.410
les types spécifiques à express.

02:02.410 --> 02:04.320
Et c'est un schéma que vous connaissez déjà.

02:04.320 --> 02:06.850
Nous y avons jeté un coup d'œil dans la section du cours consacrée

02:06.850 --> 02:08.350
à la bibliothèque des tiers.

02:08.350 --> 02:12.030
Je vous ai également montré comment installer les paquets de types pour

02:12.030 --> 02:15.220
obtenir un meilleur support dans vos scripts TypeScript.

02:15.220 --> 02:19.320
Donc avec ce type ajouté, sans aucune configuration supplémentaire,

02:19.320 --> 02:22.030
Hah, ça ne fonctionne toujours pas.

02:22.030 --> 02:23.140
La raison en est la syntaxe

02:23.140 --> 02:25.330
d'importation que nous utilisons ici.

02:25.330 --> 02:28.270
C'est l'ordinaire. js syntaxe d'importation

02:28.270 --> 02:30.450
qui note. js utilise par défaut, mais

02:30.450 --> 02:33.660
ici nous sommes en fait dans un environnement en TypeScript où nous pouvons

02:33.660 --> 02:36.140
utiliser une syntaxe d'importation différente.

02:36.140 --> 02:38.230
Nous pouvons utiliser la même syntaxe d'importation que celle

02:38.230 --> 02:40.373
que nous connaissons pour les modules ES dans le navigateur.

02:41.240 --> 02:46.240
Nous pouvons donc utiliser "import express from 'express'" par exemple.

02:46.710 --> 02:48.620
Et si nous faisons cela et que nous passons la souris sur "app", vous voyez

02:48.620 --> 02:49.910
qu'elle est maintenant de type "Express".

02:49.910 --> 02:53.040
Donc maintenant nous avons le support de TypeScript.

02:53.040 --> 02:54.569
Maintenant, une note importante.

02:54.569 --> 02:58.790
En note. js il existe aussi une syntaxe qui

02:58.790 --> 03:00.810
est similaire à celle-ci.

03:00.810 --> 03:03.420
Maintenant, c'est sous un drapeau expérimental,

03:03.420 --> 03:06.190
et c'est sous ce drapeau depuis très longtemps, donc utilisation

03:06.190 --> 03:10.010
courante. js en note. js est de loin la méthode par défaut

03:10.010 --> 03:13.482
et la plus courante pour ajouter des importations et des exportations.

03:13.482 --> 03:16.060
Une syntaxe comme celle-ci est prise en charge si

03:16.060 --> 03:18.380
vous définissez ce drapeau expérimental, mais

03:18.380 --> 03:19.990
ici, dans ce code, nous n'utilisons

03:19.990 --> 03:24.012
pas ce nœud expérimental. syntaxe js.

03:24.012 --> 03:26.209
Au lieu de cela, nous utilisons TypeScript.

03:26.209 --> 03:29.859
Une fois que nous l'aurons compilé en JavaScript, cela changera.

03:29.859 --> 03:31.860
Et je peux vous le montrer pour que

03:31.860 --> 03:34.060
nous puissions aussi l'exécuter.

03:34.060 --> 03:36.230
Si vous exécutez "tsc" ici, peut-être

03:36.230 --> 03:40.330
"tsc-w" pour entrer déjà en mode veille, vous voyez que cela

03:40.330 --> 03:42.680
démarre la compilation.

03:42.680 --> 03:44.110
Il crée un dossier dist, et là, nous avons

03:44.110 --> 03:46.770
maintenant une application. js, et ici, cela

03:46.770 --> 03:50.040
semble maintenant différent.

03:50.040 --> 03:54.500
Vous voyez, l'importation ne se fait pas de la même manière

03:54.500 --> 03:55.710
qu'ici.

03:55.710 --> 03:58.900
Il utilise plutôt une syntaxe différente.

03:58.900 --> 04:02.350
Donc ici, c'est le code qui va être exécuté.

04:02.350 --> 04:04.780
Et nous pouvons exécuter cela avec nodemon,

04:04.780 --> 04:07.640
cet outil qui redémarre automatiquement le serveur

04:07.640 --> 04:09.470
si notre code change, en ouvrant

04:09.470 --> 04:12.230
un nouvel onglet ici dans le terminal.

04:12.230 --> 04:13.620
Gardez l'autre onglet ouvert parce

04:13.620 --> 04:15.960
que c'est notre processus de compilation TypeScript,

04:15.960 --> 04:18.760
et dans ce nouvel onglet nous voulons démarrer notre serveur avec

04:18.760 --> 04:20.095
l'aide de nodemon.

04:20.095 --> 04:22.990
Pour cela, allons voir le paquet. json et ajouter un nouveau

04:22.990 --> 04:26.260
script, un script de démarrage peut-être, où nous

04:26.260 --> 04:30.900
disons "nodemon dist/app. js" pour que nodemon exécute

04:30.900 --> 04:34.200
ce fichier dans le dossier dist et démarre

04:34.200 --> 04:36.360
notre serveur avec cela.

04:36.360 --> 04:39.430
Et avec cela ajouté et le paquet. json enregistré, nous pouvons

04:39.430 --> 04:43.240
exécuter npmstart pour lancer notre serveur de développement.

04:43.240 --> 04:47.710
Et maintenant il sert cette application de dist. js Voilà la configuration générale

04:47.710 --> 04:49.230
que nous avons, et TypeScript

04:49.230 --> 04:52.030
est déjà en train de travailler ici.

04:52.030 --> 04:53.940
Nous avons également TypeSupport.

04:53.940 --> 04:55.360
Et ici vous voyez dans l'application. ts nous pouvons

04:55.360 --> 04:57.756
écrire du code qui nous semble très familier avec

04:57.756 --> 05:01.420
la syntaxe d'importation/exportation que nous connaissons déjà, mais ce

05:01.420 --> 05:03.640
que nous obtenons comme résultat est au final

05:03.640 --> 05:07.000
un nœud JavaScript ordinaire. js et c'est extrêmement

05:07.000 --> 05:09.640
utile.

05:09.640 --> 05:12.140
Maintenant avec cela, faisons des choses plus utiles

05:12.140 --> 05:15.003
que de simplement démarrer un serveur qui ne fait rien.
