WEBVTT

00:02.060 --> 00:04.880
Man: Jenis yang terkait dengan operator spread

00:04.880 --> 00:07.060
adalah parameter istirahat.

00:07.060 --> 00:10.374
Dan untuk itu, saya akan kembali mengubah fungsi add saya.

00:10.374 --> 00:13.870
Jadi saya akan mengomentari semua kode itu di sini sehingga

00:13.870 --> 00:15.780
tidak ada yang rusak.

00:15.780 --> 00:20.520
Dan tambahkan kembali fungsi add saya dengan sintaks apa pun yang Anda inginkan dengan kata

00:20.520 --> 00:22.760
kunci fungsi sebagai fungsi panah, apa pun yang

00:22.760 --> 00:23.830
Anda inginkan.

00:23.830 --> 00:26.360
Tetapi sekarang saya ingin memiliki fungsi khusus.

00:26.360 --> 00:29.100
Saya tidak ingin membatasinya pada dua nilai, saya

00:29.100 --> 00:31.340
ingin bisa menambahkan sebanyak mungkin

00:31.340 --> 00:33.290
nilai yang dioper pengguna.

00:33.290 --> 00:37.700
Sehingga pada dasarnya kita bisa memanggil add seperti ini, lima,

00:37.700 --> 00:42.700
sepuluh, dua, tiga titik tujuh, dan seterusnya, dengan nilai sebanyak yang

00:42.880 --> 00:44.530
Anda inginkan.

00:44.530 --> 00:46.691
Jika Anda ingin memanggilnya dengan 10 nilai,

00:46.691 --> 00:48.090
itu juga harus dimungkinkan.

00:48.090 --> 00:51.160
Namun, tentu saja, sekarang ini tidak mungkin, seperti yang bisa

00:51.160 --> 00:52.600
Anda lihat dengan jelas.

00:52.600 --> 00:54.290
Typescript memberi saya kesalahan,

00:54.290 --> 00:57.760
dan memang benar demikian, karena saya tidak menerima argumen di sini.

00:57.760 --> 01:00.336
Sekarang tentu saja saya bisa menerima argumen di sini dan menetapkan

01:00.336 --> 01:02.210
tipe yang benar, tetapi bagaimana jika saya

01:02.210 --> 01:04.300
kemudian memanggilnya dengan lima.

01:04.300 --> 01:06.330
Seperti yang saya katakan, saya ingin fleksibel.

01:06.330 --> 01:08.850
Di situlah parameter istirahat masuk.

01:08.850 --> 01:13.111
Di tempat di mana Anda mengharapkan daftar nilai, jadi bukan di mana Anda

01:13.111 --> 01:15.270
ingin melewatkannya, tetapi di mana

01:15.270 --> 01:18.308
Anda ingin menerimanya sebagai nilai yang masuk, Anda

01:18.308 --> 01:20.360
juga dapat menggunakan tiga titik

01:20.360 --> 01:24.043
dan kemudian nama apa pun pilihan Anda, seperti angka.

01:25.630 --> 01:27.430
Sekarang apa yang akan dilakukan

01:27.430 --> 01:31.470
adalah, itu akan menggabungkan semua parameter yang masuk,

01:31.470 --> 01:34.920
atau umumnya daftar nilai yang masuk, daftar nilai

01:34.920 --> 01:39.350
yang dipisahkan koma ke dalam array.

01:39.350 --> 01:40.940
Jadi angka di sini akan menjadi array,

01:40.940 --> 01:44.460
tetapi tentu saja secara default adalah tipe nilai apa pun, jadi array yang

01:44.460 --> 01:46.920
penuh dengan nilai apa pun, dan bukan itu yang harus

01:46.920 --> 01:48.300
kita lakukan, kita harus lebih

01:48.300 --> 01:49.680
eksplisit.

01:49.680 --> 01:53.200
Dan di sini kita bisa mengatakan, "Ini akan menjadi susunan angka. Seperti itu.

01:53.200 --> 01:54.430
Jadi sekarang kita mendefinisikan tipe

01:54.430 --> 01:56.420
yang benar dan sekarang bekerja dengan larik angka itu.

01:56.420 --> 01:58.710
Sekarang kita bisa menyimpulkannya dalam beberapa cara yang berbeda.

01:58.710 --> 02:01.880
Kita bisa bekerja dengan variabel hasil dan kemudian empat perulangan

02:01.880 --> 02:04.110
karena angka adalah sebuah larik.

02:04.110 --> 02:06.863
Jadi di sini kita bisa mengulang-ulang angka-angka

02:06.863 --> 02:09.260
dan menambahkannya ke hasilnya.

02:09.260 --> 02:11.519
Atau kita menggunakan metode reduce yang tersedia pada array.

02:11.519 --> 02:15.620
Reduce bekerja sedemikian rupa sehingga melakukan operasi pada setiap

02:15.620 --> 02:19.030
elemen dalam larik, mengembalikan hasil, dan kemudian menambahkan

02:19.030 --> 02:20.940
hasil ini bersama-sama.

02:20.940 --> 02:24.310
Untuk itu Anda menyediakan fungsi untuk mengurangi dan

02:24.310 --> 02:27.160
kemudian nilai awal yang di sini adalah nol.

02:27.160 --> 02:31.093
Dan kemudian fungsi yang Anda operasikan untuk mengurangi itu sendiri

02:31.093 --> 02:33.430
mengambil dua argumen dan itulah hasil

02:33.430 --> 02:35.920
saat ini yang bisa Anda katakan.

02:35.920 --> 02:38.968
Dan itu adalah nilai saat ini yang kita lihat,

02:38.968 --> 02:42.640
yang akan menjadi setiap nilai dari larik yang satu.

02:42.640 --> 02:45.350
Dan kemudian di sini Anda dapat mengembalikan cuResult, yang

02:45.350 --> 02:48.290
untuk menjalankan pertama kali akan menjadi nilai awal di sini.

02:48.290 --> 02:51.497
Ditambah curValue.

02:51.497 --> 02:52.703
Dan jika Anda melakukan itu mengurangi keseluruhan di sini akan mengembalikan angka.

02:53.859 --> 02:57.920
Jadi di sini kita bisa secara keseluruhan mengembalikan hasil angka

02:57.920 --> 03:01.160
yang dikurangi dan karenanya variabel add, atau konstanta

03:01.160 --> 03:04.790
di sini, pada akhirnya akan memegang fungsi yang mengambil beberapa

03:04.790 --> 03:07.320
angka, bukan larik angka.

03:07.320 --> 03:10.650
Tetapi karena parameter lainnya, daftar angka, yang kemudian

03:10.650 --> 03:13.690
digabungkan menjadi larik di dalam fungsi dan yang

03:13.690 --> 03:16.510
mengembalikan angka pada akhirnya.

03:16.510 --> 03:18.550
Jadi untuk saat ini jika kita menyimpan semuanya,

03:18.550 --> 03:20.350
semuanya harus bekerja dan kita melihat

03:20.350 --> 03:23.350
hasilnya, jumlah penambahan kecil kita di sini.

03:23.350 --> 03:26.250
Jadi itulah parameter istirahat, fitur yang

03:26.250 --> 03:28.430
sangat berguna untuk menerima

03:28.430 --> 03:31.400
jumlah argumen yang tidak terbatas.

03:31.400 --> 03:34.210
Dan beberapa metode bawaan seperti metode

03:34.210 --> 03:36.680
push bekerja persis seperti itu.

03:36.680 --> 03:38.540
Anda lihat, push di sini memiliki definisi parameter yang aneh.

03:38.540 --> 03:42.560
Nah, itulah yang baru saja kita pelajari.

03:42.560 --> 03:44.250
Push di sini mengambil beberapa

03:44.250 --> 03:48.490
item untuk larik ini, yang merupakan larik yang penuh dengan string.

03:48.490 --> 03:50.400
Dibutuhkan beberapa senar.

03:50.400 --> 03:51.730
Dan ini tidak berarti dibutuhkan

03:51.730 --> 03:54.060
array string, tetapi di sini dengan parameter lainnya,

03:54.060 --> 03:56.400
daftar string yang dipisahkan koma, yang keluar

03:56.400 --> 03:58.580
dari serambi kemudian digabungkan menjadi array

03:58.580 --> 04:01.260
dan ditangani secara internal.

04:01.260 --> 04:03.100
Itulah sintaksis parameter lainnya.

04:03.100 --> 04:06.276
Anda bahkan bisa menggabungkan ini dengan tupel.

04:06.276 --> 04:10.370
Jika Anda tahu Anda ingin mendukung banyak argumen tetapi Anda

04:10.370 --> 04:15.370
tahu berapa banyak argumennya, jadi jika itu bukan daftar yang tidak terbatas,

04:16.520 --> 04:18.420
maka Anda juga dapat menggunakan

04:18.420 --> 04:20.392
tipe tuple di sana.

04:20.392 --> 04:23.430
Dan misalnya mengatakan, "Saya menerima nomor gratis saya di sini. Dan kemudian saya harus menghapus argumen

04:23.430 --> 04:28.430
keempat di sini tentu saja saat memanggil fungsi.

04:28.460 --> 04:30.910
Karena sekarang saya cukup jelas bahwa saya ingin mendapatkan tiga argumen,

04:30.910 --> 04:32.240
yang masing-masing adalah angka.

04:32.240 --> 04:33.830
Jadi, tentu saja kita bisa saja menambahkan

04:33.830 --> 04:36.980
tiga parameter mandiri di sini, tetapi sintaks ini mungkin masih sedikit

04:36.980 --> 04:39.030
lebih pendek atau lebih mudah diatur daripada menambahkan

04:39.030 --> 04:40.720
parameter bebas.

04:40.720 --> 04:43.090
Ini benar-benar tergantung pada aplikasi dan kebutuhan Anda.

04:43.090 --> 04:46.919
Di sini saya akan menjauh dari pengaturan itu dan menjadi

04:46.919 --> 04:51.320
lebih generik dan menerima sebanyak mungkin argumen yang saya dapatkan

04:51.320 --> 04:55.210
karena untuk fungsi ini saya memang dapat menangani argumen

04:55.210 --> 04:57.864
dalam jumlah tak terbatas.
