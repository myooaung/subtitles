WEBVTT

00:02.170 --> 00:03.420
المدرب: لنبدأ.

00:03.420 --> 00:06.330
كما ذكرت ، سأقوم هنا بإنشاء واجهة برمجة تطبيقات

00:06.330 --> 00:09.130
REST أساسية جدًا ولكن بالطبع يمكنك إنشاء

00:09.130 --> 00:10.810
أي تطبيق Node مع أو بدون صريح

00:10.810 --> 00:13.780
وبأي نوع من الطرق باستخدام TypeScript ، لذلك

00:13.780 --> 00:15.570
هذا مجرد مثال.

00:15.570 --> 00:18.990
أنت لست مقيدًا بهذا التطبيق المحدد.

00:18.990 --> 00:21.560
في مجلد src ، سأضيف تطبيقًا. ts والذي سيكون

00:21.560 --> 00:23.060
نقطة إدخال الجذر

00:23.060 --> 00:25.970
حيث نقوم بتدوير ذلك الخادم.

00:25.970 --> 00:29.530
وهناك أريد استيراد شيء ما من Express ، من إطار

00:29.530 --> 00:31.203
عمل Express هذا.

00:32.970 --> 00:35.460
ربما تعرف الآن كيف يمكننا إضافة Express

00:35.460 --> 00:37.890
هنا وإعداد خادم ويب باستخدام Express.

00:37.890 --> 00:41.330
نقوم باستيراد Express باستخدام بناء

00:41.330 --> 00:46.330
الجملة هذا هنا ومن ثم هنا يمكننا تنفيذ Express كوظيفة.

00:46.380 --> 00:50.170
نحصل على كائن التطبيق هذا ، والذي يمكننا الاتصال

00:50.170 --> 00:53.750
به للاستماع إلى منفذ معين للطلبات الواردة.

00:53.750 --> 00:56.120
الآن سيعمل هذا في JavaScript العادي ،

00:56.120 --> 00:58.420
لكنك ترى بالفعل أنني أتلقى خطأ هنا.

00:59.540 --> 01:01.600
الآن أحصل أيضًا على اقتراح

01:01.600 --> 01:03.500
لماذا قد أتلقى هذا الخطأ

01:03.500 --> 01:06.290
هنا لأن الطلب هو في الواقع وظيفة موجودة

01:06.290 --> 01:10.100
في الملاحظة. js ، ولكن ليس في جانب المتصفح.

01:10.100 --> 01:12.540
الآن في tsconfig. json file ، فأنا لا أستخدم

01:12.540 --> 01:16.640
أي libs خاصة من شأنها دعم العقدة. js ، لذلك في TypeScript لا

01:16.640 --> 01:18.120
يكون على دراية بهذه

01:18.120 --> 01:20.150
الوظيفة العامة الموجودة

01:20.150 --> 01:22.900
في العقدة. شبيبة البيئة.

01:22.900 --> 01:27.140
الآن لإنجاز هذا العمل ، نحتاج إلى تثبيت نوع إضافي باستخدام "npm

01:27.140 --> 01:30.220
install --save-dev" يمكننا تثبيت "@ types /

01:30.220 --> 01:32.410
node" لتثبيت جميع الأنواع التي نحتاجها

01:32.410 --> 01:36.291
للعمل مع العقدة. js لذلك دعونا ننفذ هذا

01:36.291 --> 01:39.460
الأمر ونرى ما إذا كان ذلك يساعدنا.

01:39.460 --> 01:42.320
نعم ، لقد تم وذهب هذا الخطأ.

01:42.320 --> 01:44.390
ولكن ربما رأيت أيضًا أنه على التطبيق

01:44.390 --> 01:46.680
لم أحصل على أي إكمال تلقائي.

01:46.680 --> 01:50.190
لا يوجد خطأ أيضًا ، ولكن إذا مررنا فوق التطبيق ، فسنلاحظ أن TypeScript

01:50.190 --> 01:52.410
لا يعرف ما هو موجود هناك.

01:52.410 --> 01:54.210
إنه من النوع "أي".

01:54.210 --> 01:56.530
لذا ربما يتعين علينا تثبيت المزيد

01:56.530 --> 01:59.930
من الأنواع وكذلك تثبيت "@ types / express"

01:59.930 --> 02:02.410
لتثبيت أنواع خاصة.

02:02.410 --> 02:04.320
وهذا هو النمط الذي تعرفه بالفعل.

02:04.320 --> 02:06.850
لقد ألقينا نظرة على ذلك في قسم مكتبة الطرف

02:06.850 --> 02:08.350
الثالث من الدورة.

02:08.350 --> 02:12.030
هناك ، أوضحت لك أيضًا كيف يمكنك تثبيت حزم الأنواع للحصول على

02:12.030 --> 02:15.220
دعم أفضل في نصوص TypeScript النصية الخاصة بك.

02:15.220 --> 02:19.320
لذلك مع إضافة هذا النوع ، بدون أي تكوين إضافي

02:19.320 --> 02:22.030
، Hah ، ما زال لا يعمل.

02:22.030 --> 02:23.140
حسنًا ، السبب في ذلك هو

02:23.140 --> 02:25.330
بناء جملة الاستيراد الذي نستخدمه هنا.

02:25.330 --> 02:28.270
هذا هو الشائع العادي. شبيبة استيراد بناء الجملة

02:28.270 --> 02:30.450
أي ملاحظة. js بشكل افتراضي ،

02:30.450 --> 02:33.660
لكننا هنا في الواقع في بيئة في TypeScript حيث يمكننا

02:33.660 --> 02:36.140
استخدام صيغة استيراد مختلفة.

02:36.140 --> 02:38.230
يمكننا استخدام نفس صيغة الاستيراد

02:38.230 --> 02:40.373
التي نعرفها من وحدات ES في المتصفح.

02:41.240 --> 02:46.240
لذلك يمكننا استخدام "import express from" express "" على سبيل المثال.

02:46.710 --> 02:48.620
وإذا فعلنا ذلك ثم حركنا مؤشر الماوس فوق "التطبيق" ،

02:48.620 --> 02:49.910
سترى الآن أنه من النوع "Express".

02:49.910 --> 02:53.040
حتى الآن لدينا دعم TypeScript.

02:53.040 --> 02:54.569
الآن ، ملاحظة مهمة واحدة.

02:54.569 --> 02:58.790
في المذكرة. js هناك أيضًا بناء

02:58.790 --> 03:00.810
جملة مشابه لهذا.

03:00.810 --> 03:03.420
الآن هو تحت علم تجريبي ، وقد ظل تحت هذا

03:03.420 --> 03:06.190
العلم لفترة طويلة جدًا ، لذلك باستخدام

03:06.190 --> 03:10.010
المشترك. شبيبة في المذكرة. js هي الطريقة الافتراضية

03:10.010 --> 03:13.482
والأكثر شيوعًا لإضافة الواردات والصادرات.

03:13.482 --> 03:16.060
يتم دعم بناء الجملة الذي يبدو مثل هذا إذا قمت بتعيين

03:16.060 --> 03:18.380
هذه العلامة التجريبية ، ولكن هنا في هذه الشفرة

03:18.380 --> 03:19.990
، نحن في الواقع لا نستخدم هذه

03:19.990 --> 03:24.012
العقدة التجريبية. بناء الجملة شبيبة.

03:24.012 --> 03:26.209
بدلا من ذلك نحن نستخدم TypeScript.

03:26.209 --> 03:29.859
بمجرد أن نقوم بترجمة هذا إلى JavaScript ، سيتغير هذا.

03:29.859 --> 03:31.860
ويمكنني في الواقع أن أريكم هذا

03:31.860 --> 03:34.060
حتى نتمكن من تنفيذ ذلك أيضًا.

03:34.060 --> 03:36.230
إذا قمت بتشغيل "tsc" هنا ، فربما

03:36.230 --> 03:40.330
يكون "tsc-w" للدخول بالفعل إلى وضع الساعة ، فسترى

03:40.330 --> 03:42.680
أن هذا يبدأ التجميع.

03:42.680 --> 03:44.110
يقوم بإنشاء مجلد توزيع ، وهناك

03:44.110 --> 03:46.770
لدينا الآن تطبيق. js ، وهنا ،

03:46.770 --> 03:50.040
يبدو هذا الآن مختلفًا.

03:50.040 --> 03:54.500
كما ترى ، هناك الآن لم يتم إعداد هذا الاستيراد بالطريقة التي

03:54.500 --> 03:55.710
لدينا بها هنا.

03:55.710 --> 03:58.900
تستخدم صيغة مختلفة بدلا من ذلك.

03:58.900 --> 04:02.350
إذن هنا ، هذا هو الكود الذي سيتم تنفيذه بالفعل.

04:02.350 --> 04:04.780
ويمكننا تنفيذ ذلك باستخدام nodemon باستخدام

04:04.780 --> 04:07.640
هذه الأداة التي تعيد تشغيل الخادم تلقائيًا

04:07.640 --> 04:09.470
إذا تغير رمزنا عن طريق فتح علامة

04:09.470 --> 04:12.230
تبويب جديدة هنا في المحطة.

04:12.230 --> 04:13.620
احتفظ بعلامة التبويب الأخرى

04:13.620 --> 04:15.960
مفتوحة لأن هذه هي عملية تجميع TypeScript الخاصة

04:15.960 --> 04:18.760
بنا ، وفي علامة التبويب الجديدة تلك ، نريد أن نبدأ خادمنا

04:18.760 --> 04:20.095
بمساعدة nodemon.

04:20.095 --> 04:22.990
لذلك ، دعنا نذهب إلى الحزمة. json وإضافة برنامج

04:22.990 --> 04:26.260
نصي جديد ، ربما يبدأ نص برمجي ، حيث نقول

04:26.260 --> 04:30.900
"nodemon dist / app. js "حتى ينفذ nodemon

04:30.900 --> 04:34.200
هذا الملف في مجلد dist ويبدأ

04:34.200 --> 04:36.360
خادمنا بذلك.

04:36.360 --> 04:39.430
ومع ذلك أضيفت والحزمة. تم حفظ ملف json ، يمكننا

04:39.430 --> 04:43.240
تشغيل npmstart لتدوير خادم التطوير الخاص بنا.

04:43.240 --> 04:47.710
والآن تخدم هذا التطبيق dist. js الآن هذا هو الإعداد العام لدينا

04:47.710 --> 04:49.230
، وهذا هو TypeScript

04:49.230 --> 04:52.030
بالفعل يقوم ببعض الأعمال هنا.

04:52.030 --> 04:53.940
لدينا أيضًا دعم TypeSupport.

04:53.940 --> 04:55.360
وهنا ترى في التطبيق. يمكننا كتابة

04:55.360 --> 04:57.756
التعليمات البرمجية التي تبدو مألوفة جدًا

04:57.756 --> 05:01.420
بالنسبة لنا مع بناء جملة الاستيراد / التصدير الذي نعرفه بالفعل

05:01.420 --> 05:03.640
، ولكن ما نحصل عليه كإخراج هو في نهاية عقدة

05:03.640 --> 05:07.000
JavaScript العادية. js code وهذا

05:07.000 --> 05:09.640
مفيد للغاية.

05:09.640 --> 05:12.140
الآن مع ذلك ، لنقم بأشياء مفيدة أكثر

05:12.140 --> 05:15.003
من مجرد بدء تشغيل خادم لا يفعل شيئًا.
