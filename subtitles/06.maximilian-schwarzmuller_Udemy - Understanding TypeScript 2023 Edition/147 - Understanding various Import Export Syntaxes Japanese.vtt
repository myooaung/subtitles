WEBVTT

00:02.310 --> 00:04.270
講師：そこで､ ESモジュールを使っています｡ 

00:04.270 --> 00:06.470
このエクスポートとインポートの構文には､

00:06.470 --> 00:10.100
注意すべきいくつかのバリエーションがあることがわかりました｡

00:10.100 --> 00:12.276
例えば､ インポートをバンドルすることができます｡ 

00:12.276 --> 00:18.060
例えば､ プロジェクト入力で､ バリデーションファイルから2つのものをインポートするとします｡

00:18.060 --> 00:22.030
このようにvalidateを呼び出す必要がないように､ dot validatableとdot

00:22.030 --> 00:29.170
validateを呼び出すことができる1つのオブジェクトにすべてをグループ化したいと思うかもしれません｡

00:29.170 --> 00:30.940
このように呼びたいのかもしれませんが､

00:30.940 --> 00:38.250
例えば同じ名前と年の関数があったりして､ 名前の衝突を避けたい､ あるいはこれがある種のパッケージに属していることを明確にしたい場合､

00:38.250 --> 00:42.069
それをグループ化することができます｡

00:42.069 --> 00:45.090
インポートをグループ化するには､ このように中括弧で囲んでインポートするのではなく､

00:45.090 --> 00:49.150
ここで星印を使用します｡ これは､ そのファイルからすべてをインポートし､

00:49.150 --> 00:57.192
さらに任意のエイリアス､ たとえばvalidationをインポートすることを意味します｡

00:57.192 --> 00:59.280
あとは､ そのファイルから何かを使う場所に行って､

00:59.280 --> 01:05.470
オブジェクトの検証のような使い方をする｡

01:05.470 --> 01:05.470
をバリデートすることができます｡ 

01:05.470 --> 01:07.920
つまり､ この名前でグループ化されたファイルにエクスポートされたものはすべて､

01:07.920 --> 01:12.341
ドット表記でアクセスできるのです｡

01:12.341 --> 01:15.700
だからバリデーション｡  そして､ その下にあるvalidate関数では､

01:15.700 --> 01:22.786
もちろんバリデーションが行われます｡

01:22.786 --> 01:22.786
validate､ バリデーション｡  validate､

01:22.786 --> 01:25.197
バリデーション｡ を検証します｡ 

01:25.197 --> 01:29.604
そして､ それによって､ よく検証が機能することがわかるでしょう｡ 

01:29.604 --> 01:32.490
だから､ グループ分けは一つの手です｡ 

01:32.490 --> 01:34.960
ここでいうエイリアスというのも､

01:34.960 --> 01:36.890
一般的にできることです｡

01:36.890 --> 01:38.830
こんな感じでオートバインドが嫌なのか､

01:38.830 --> 01:41.270
最初に大文字が欲しいのか？

01:41.270 --> 01:45.360
まあ､ ここでasキーワードでエイリアスを割り当てればいいだけなんですけどね｡ 

01:45.360 --> 01:48.150
中括弧の中も同様に使用できます｡ 

01:48.150 --> 01:50.431
そして､ このインポートのみ､ 名前を変更します｡ 

01:50.431 --> 01:54.350
もちろん元のファイルでは名前を変えない｡ 

01:54.350 --> 01:58.390
こちらのファイルでは､ 別の名前でインポートされているだけです｡ 

01:58.390 --> 02:01.280
そこで､ 小文字のaを使ったautobindの代わりに､

02:01.280 --> 02:05.780
大文字のAを使ったalias名を使用することにします｡

02:05.780 --> 02:11.570
例えば､ 同じファイルに小文字のaを使ったautobindという名前の別のものがあった場合､

02:11.570 --> 02:14.543
名前の衝突を避けるために､ これも良い機能です｡

02:16.180 --> 02:20.010
また､ デフォルトの書き出しで作業することも可能です｡ 

02:20.010 --> 02:25.120
例えばbase-componentのような1つのものだけをエクスポートするファイルがあった場合｡

02:25.120 --> 02:28.020
実は私たちは､ 1つのものだけを書き出すファイルをたくさん持っているんです｡ 

02:28.020 --> 02:29.240
しかし､ このファイルでは､

02:29.240 --> 02:31.360
中括弧の中で名前を付けてインポートしたので､

02:31.360 --> 02:37.330
このようにエクスポートする､ いわゆる名前付きエクスポートはしたくないとします｡

02:37.330 --> 02:40.258
ここで使用した名前をそのまま使う必要があります｡ 

02:40.258 --> 02:45.140
それが嫌なら､ defaultという別のキーワードを追加すればいいだけです｡

02:45.140 --> 02:52.064
これは､ このファイルの主な､ まあ､ デフォルトのエクスポートであることをJavaScriptに教えています｡

02:52.064 --> 02:55.929
ここに他の名前の付いた輸出品があっても､

02:55.929 --> 02:58.500
それは許されるでしょう｡

02:58.500 --> 03:02.120
おっと､ 例えばここで許される定数は｡

03:02.120 --> 03:06.130
名前付きエクスポートとデフォルトのエクスポートを同じファイルに混在させることはできますが､

03:06.130 --> 03:07.800
デフォルトのエクスポートを使用する場合､

03:07.800 --> 03:11.440
1ファイルにつき1つのデフォルトのエクスポートしかできません｡

03:11.440 --> 03:14.210
ここで私はデフォルトのエクスポートを行い､ 今私がインポートしたファイルでは､

03:14.210 --> 03:16.926
名前を付けてインポートすることはありません｡

03:16.926 --> 03:19.900
名前付きエクスポートは､ 名前によるインポートしかできません｡ 

03:19.900 --> 03:22.639
例えば､ その何か定数が追加された｡ 

03:22.639 --> 03:24.743
その代わりに､ エクスポートしたファイルで使用した名前と一致する必要はなく､

03:24.743 --> 03:32.400
好きな名前を選択するだけでデフォルトをインポートできます｡

03:32.400 --> 03:34.354
だから､ 今はコンポーネントを使わなくてもいいんです｡ 

03:34.354 --> 03:37.037
今ここで例えばCmpだけ使ってもいいんですよ｡ 

03:37.037 --> 03:40.700
そして､ このように中括弧を付けずにインポートします｡ 

03:40.700 --> 03:44.127
また､ スターもないので､ すべてをインポートしているわけではありません｡ 

03:44.127 --> 03:46.827
デフォルトをインポートしているだけです｡ 

03:46.827 --> 03:52.210
したがって､ これはインポート元のファイルにデフォルトのエクスポートがある場合のみ利用可能です｡

03:52.210 --> 03:58.010
これはJavaScriptに､ 「このファイルのデフォルトのエクスポートを使いたいんだけど」と伝えるものだからです｡

03:58.010 --> 04:00.520
ではここで､ このCmpに名前を付けることができるかというと､ もちろんそうです｡ 

04:00.520 --> 04:02.569
あるいは､ 今はもちろんCmpを使わなければならない｡ 

04:02.569 --> 04:04.509
Componentは､ その名前でインポートしていないので､

04:04.509 --> 04:06.666
もうダメです｡

04:06.666 --> 04:10.675
もちろん､ project-itemとproject-listにも手を入れる必要があります｡

04:10.675 --> 04:12.486
デフォルトのエクスポートを使用します｡ 

04:12.486 --> 04:14.515
ここではコンポーネントにこだわりますが､ 先ほど示したように､

04:14.515 --> 04:16.540
こだわる必要はありません｡

04:16.540 --> 04:18.300
ここでは好きな名前を使うことができますが､

04:18.300 --> 04:21.900
簡単のためにコンポーネントを使うことにします｡

04:21.900 --> 04:25.740
デフォルトのエクスポートは､ 1つのファイルに1つのものしかない場合に便利です｡

04:25.740 --> 04:37.290
他の開発者があなたのクラスやエクスポートしたものをインポートする場合は､

04:37.290 --> 04:46.579
あなたの名前を使わなければなりません｡

04:46.579 --> 04:49.840
そのため､ 個人的には名前付きエクスポートが好きですが､

04:49.840 --> 04:51.740
もちろんデフォルトのエクスポートも意識して､

04:51.740 --> 04:54.853
そのような使い方をすることもできます｡
