WEBVTT

00:02.480 --> 00:06.780
Człowiek: Teraz, mając wiedzę o funkcjach fabrycznych, czy dekoratorach

00:06.780 --> 00:10.523
fabrycznych, możemy robić całkiem ciekawe rzeczy.

00:11.570 --> 00:16.240
Moglibyśmy handlować nową fabryką dekoratorów z szablonem,

00:16.240 --> 00:17.693
na przykład.

00:19.400 --> 00:21.590
I tutaj oczekuję, że otrzymam szablon, który

00:21.590 --> 00:23.780
powinien być jakimś ciągiem znaków.

00:23.780 --> 00:28.780
I hookId, który również powinien być ciągiem znaków.

00:28.870 --> 00:32.050
Następnie tutaj zwracam moją anonimową funkcję, która jest

00:32.050 --> 00:34.800
faktycznym dekoratorem, jak już się nauczyłeś.

00:34.800 --> 00:37.440
Bo znowu mam fabrykę dekoratorów.

00:37.440 --> 00:40.570
I tam chcę wyrenderować jakiś szablon, który

00:40.570 --> 00:42.530
powinien być jakimś kodem HTML,

00:42.530 --> 00:46.590
w jakieś miejsce w dom, gdzie znajdę ten hookId.

00:46.590 --> 00:49.160
Teraz więc możemy przejść do indeksu. html i dodać takie miejsce,

00:49.160 --> 00:51.250
abyśmy mogli zobaczyć, że to działa.

00:51.250 --> 00:54.483
Możemy dodać tutaj div, o id app, może.

00:55.430 --> 00:59.560
A potem w aplikacji. ts, zamiast loggera dodaję

00:59.560 --> 01:01.357
WithTemplate.

01:02.570 --> 01:05.130
Przekażmy na razie pusty ciąg jako pierwszy argument,

01:05.130 --> 01:06.810
a app jako drugi argument.

01:06.810 --> 01:09.313
Tak więc, ten identyfikator przypisałem do div tutaj.

01:10.170 --> 01:12.400
A teraz wewnątrz tej wewnętrznej funkcji znajduje

01:12.400 --> 01:13.830
się nasz właściwy dekorator.

01:13.830 --> 01:16.540
Wewnątrz tej funkcji dekoratora

01:16.540 --> 01:19.500
chcę sięgnąć do elementu.

01:19.500 --> 01:24.500
Do elementu haka z dokumentem. getElementById.

01:25.662 --> 01:29.390
Dla hookId, które otrzymujemy tutaj jako argument.

01:29.390 --> 01:33.480
A jeśli HookEl jest rzeczą, która istnieje, to chcę uzyskać

01:34.330 --> 01:37.960
dostęp do jego innerHTML i ustawić to równe szablonowi,

01:37.960 --> 01:39.920
powiedzmy.

01:39.920 --> 01:41.440
Oczywiście bardzo prosta konfiguracja,

01:41.440 --> 01:43.640
ale to powinno załatwić sprawę.

01:43.640 --> 01:45.460
Teraz nie interesuje mnie konstruktor.

01:45.460 --> 01:48.110
I aby powiedzieć typescriptowi, że nie jestem tu zainteresowany,

01:48.110 --> 01:50.370
mogę dodać podkreślenie jako nazwę, co w zasadzie sygnalizuje

01:50.370 --> 01:52.007
typescriptowi, "Tak, wiem, że dostaję

01:52.007 --> 01:54.580
ten argument, ale nie potrzebuję go.

01:54.580 --> 01:56.170
Muszę to jednak sprecyzować.

01:56.170 --> 01:58.920
Więc tym podkreśleniem informuję, że jestem świadomy,

01:58.920 --> 02:00.850
ale że nie będę z niego korzystał. Bo na razie chcę tylko

02:00.850 --> 02:02.300
oddać ten rok.

02:02.300 --> 02:04.033
Więc teraz kiedy dodamy tutaj

02:05.580 --> 02:07.750
WithTemplate, tutaj moglibyśmy dodać

02:07.750 --> 02:10.400
tag h1, My Person Object w taki sposób.

02:10.400 --> 02:14.570
Także, zamknij się.

02:14.570 --> 02:15.653
I jeśli teraz zapisaliśmy to, to kompiluje się bez błędów.

02:19.130 --> 02:22.380
I rzeczywiście, tutaj widać, że zostało to wyrenderowane na ekranie.

02:22.380 --> 02:26.350
I to, mam nadzieję, pokazuje moc,

02:26.350 --> 02:29.720
jaką masz z dekoratorami.

02:29.720 --> 02:31.720
Możesz zbudować naprawdę zaawansowane dekoratory,

02:31.720 --> 02:34.780
takie jak ten, który nagle robi jakąś magię za kulisami.

02:34.780 --> 02:38.500
I o to właśnie chodzi mi z metaprogramowaniem.

02:38.500 --> 02:41.260
Dodajemy tutaj trochę logiki, którą moglibyśmy wyeksponować,

02:41.260 --> 02:43.930
jeśli byłaby to biblioteka strony trzeciej, którą udostępniamy

02:43.930 --> 02:46.190
innym użytkownikom.

02:46.190 --> 02:47.890
Moglibyśmy wyeksponować to jako

02:47.890 --> 02:50.350
część biblioteki, a każdy, kto używa naszej biblioteki,

02:50.350 --> 02:52.630
może zaimportować tę funkcję dekoratora i

02:52.630 --> 02:54.910
dodać ją do klasy, aby następnie magicznie

02:54.910 --> 02:57.408
renderować jakąś treść nagle.

02:57.408 --> 03:00.500
I oczywiście jesteś, nie jesteś nawet ograniczony, aby to zrobić.

03:00.500 --> 03:02.980
Jeśli chciałbyś wyprowadzić nazwę, która

03:02.980 --> 03:05.340
jest częścią klasy, gdy zostanie zainicjowana,

03:05.340 --> 03:07.850
możesz to również zrobić.

03:07.850 --> 03:09.570
Otrzymujemy nasz konstruktor: Funkcja tutaj po wszystkim.

03:09.570 --> 03:12.427
Teraz to, co możemy z tym zrobić, to możemy stworzyć nową

03:14.190 --> 03:16.010
osobę tutaj, wywołując nasz konstruktor,

03:16.010 --> 03:18.660
ponieważ to jest nasz konstruktor: Funkcja tutaj,

03:18.660 --> 03:20.380
po wszystkim.

03:20.380 --> 03:23.820
Pozwól mi przekonwertować to na any, więc typescript pozwala

03:23.820 --> 03:26.570
na to i nie myśli, że jest to normalna funkcja.

03:26.570 --> 03:29.240
I wtedy moglibyśmy przejść do naszego elementu

03:29.240 --> 03:31.880
hook, i zapytać o tag h1, który oczywiście

03:31.880 --> 03:35.160
w praktyce nie zawsze będziesz miał.

03:35.160 --> 03:36.070
Ale dla celów demonstracyjnych zakładam,

03:36.070 --> 03:37.330
że zawsze będziemy mieli tu jednego.

03:37.330 --> 03:39.820
Whoops, i powinienem zawsze zamknąć

03:39.820 --> 03:42.330
tag h1 w dół tam teraz, gdy widzę to.

03:42.330 --> 03:43.850
A następnie tutaj, z wykrzyknikiem,

03:43.850 --> 03:46.750
ponownie zakładając, że zawsze znajdziemy element

03:46.750 --> 03:49.900
h1, możemy ustawić textContent równy p. nazwa.

03:49.900 --> 03:53.660
I Jeśli to zrobię i zapiszę

03:53.660 --> 03:56.010
to, teraz wyprowadzam nazwę, która

03:56.010 --> 03:59.400
jest częścią obiektu tutaj w szablonie.

03:59.400 --> 04:01.540
Jest to więc coś, co możesz zrobić, i oczywiście

04:01.540 --> 04:03.420
możesz napisać o wiele bardziej rozbudowane

04:03.420 --> 04:06.010
dekoratory, niż robię to tutaj.

04:06.010 --> 04:07.840
Rozważ Angular, bardzo popularny framework,

04:07.840 --> 04:09.550
który wykorzystuje typescript.

04:09.550 --> 04:12.270
Używają dekoratorów, takich jak ten dekorator

04:12.270 --> 04:15.740
komponentu, aby umożliwić przekazanie obiektu,

04:15.740 --> 04:18.420
w którym określasz rzeczy takie jak szablon

04:18.420 --> 04:21.020
dla discomponentu.

04:21.020 --> 04:21.930
I selektor w dom, gdzie

04:21.930 --> 04:23.950
ten szablon powinien być renderowany.

04:23.950 --> 04:25.760
Jest to stosunkowo bliskie temu, co zdefiniowaliśmy tutaj.

04:25.760 --> 04:28.170
Szablon, a następnie miejsce, w którym powinien być renderowany.

04:28.170 --> 04:31.230
Nie trzeba chyba dodawać, że dekoratory Angulara są oczywiście

04:31.230 --> 04:33.760
o wiele bardziej zaawansowane i rozbudowane

04:33.760 --> 04:36.550
niż nasz podstawowy dekorator tutaj.

04:36.550 --> 04:38.740
Niemniej jednak, zasadnicza idea jest taka sama.

04:38.740 --> 04:41.660
Angular daje ci dekoratory tutaj, abyś mógł określić

04:41.660 --> 04:43.900
jakiś kod HTML, który może być połączony

04:43.900 --> 04:46.700
z twoją klasą komponentu, która będzie renderowana

04:46.700 --> 04:51.760
do dom, gdy ten komponent zostanie wyrenderowany.

04:51.760 --> 04:53.830
Teraz w przypadku, gdy nie wiesz, jak działa

04:53.830 --> 04:55.850
Angular, to nie jest problem.

04:55.850 --> 04:57.060
Musisz tylko zrozumieć tutaj,

04:57.060 --> 04:58.700
że działa z klasami i dekoratorami, a

04:58.700 --> 05:01.300
następnie robi w zasadzie to, co zrobiliśmy tutaj.

05:01.300 --> 05:03.600
Więc to jest jeszcze jedna rzecz, którą można zrobić z dekoratorami,

05:03.600 --> 05:06.400
lub jak konkretnie tutaj, z fabrykami dekoratorów.

05:06.400 --> 05:09.220
Bo dzięki temu możemy przejść w tym dodatkowym

05:09.220 --> 05:12.210
konflikcie, który jest nam tutaj potrzebny.

05:12.210 --> 05:13.610
I o to też mi chodziło z metaprogramowaniem.

05:13.610 --> 05:16.590
Tworzymy rzeczy, tworzymy funkcje dekoratorów,

05:16.590 --> 05:21.130
które, można powiedzieć, mają jakiś wpływ na użytkownika końcowego.

05:21.130 --> 05:24.840
W NP dual render czy coś w tym miejscu na ekranie.

05:24.840 --> 05:27.510
Ale robimy to za pomocą narzędzia, które wystawiamy

05:27.510 --> 05:29.090
dla innych deweloperów.

05:29.090 --> 05:31.370
Ponieważ ten dekorator jest takim narzędziem,

05:31.370 --> 05:33.970
z którego inni programiści muszą korzystać, dodając

05:33.970 --> 05:36.000
go do klasy w tym przykładzie.

05:36.000 --> 05:38.580
W przeciwnym razie to by nic nie dało.

05:38.580 --> 05:40.300
Dostarczamy więc deweloperom

05:40.300 --> 05:43.490
dodatkowe narzędzia, z których inni deweloperzy mogą

05:43.490 --> 05:46.590
korzystać, aby na przykład wygodnie renderować coś

05:46.590 --> 05:49.050
na ekranie dla klasy dającej.

05:49.050 --> 05:50.590
To samo robi tutaj Angular, w bardziej

05:50.590 --> 05:52.940
zaawansowany sposób, i jest to coś, do czego doskonale

05:52.940 --> 05:54.220
nadają się gracze.
