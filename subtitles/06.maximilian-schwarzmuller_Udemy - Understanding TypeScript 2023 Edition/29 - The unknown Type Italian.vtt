WEBVTT

00:02.340 --> 00:04.020
Istruttore: Abbiamo quasi finito le nozioni

00:04.020 --> 00:06.240
di base su TypeScript e sui tipi fondamentali.

00:06.240 --> 00:10.130
Esistono altri due tipi di cui è bene essere consapevoli,

00:10.130 --> 00:13.170
perché di volta in volta sono importanti.

00:13.170 --> 00:16.603
Il primo tipo è quello sconosciuto.

00:17.860 --> 00:20.350
Per questo motivo, chiamerò questo file "Le vostre funzioni". ts e aggiungere una

00:20.350 --> 00:23.343
nuova applicazione. ts e lì, diciamo

00:24.290 --> 00:28.620
che abbiamo una nuova variabile, userInput,

00:28.620 --> 00:32.143
di tipo unknown.

00:32.143 --> 00:34.850
Non è di tipo any, che sarebbe quello predefinito,

00:34.850 --> 00:36.690
ma unknown, che è un tipo diverso

00:36.690 --> 00:38.500
introdotto da TypeScript.

00:38.500 --> 00:40.950
Potrebbe essere sconosciuto perché non si sa ancora

00:40.950 --> 00:42.950
cosa l'utente inserirà alla fine.

00:42.950 --> 00:45.593
Se è un numero, se è una stringa, non lo sappiamo.

00:46.770 --> 00:48.960
La cosa interessante del tipo unknown è che

00:48.960 --> 00:51.020
possiamo memorizzare qualsiasi valore

00:51.020 --> 00:54.630
senza ricevere errori, quindi tutto questo è consentito.

00:54.630 --> 00:57.660
Se ora compilo il mio file qui, non ottengo

00:57.660 --> 01:00.290
alcun errore di compilazione.

01:00.290 --> 01:01.910
Quindi, per ora, è come se non

01:01.910 --> 01:03.820
avessimo assegnato un tipo qui e quindi

01:03.820 --> 01:05.260
avessimo il tipo any o se avessimo

01:05.260 --> 01:08.610
impostato esplicitamente any come tipo.

01:08.610 --> 01:11.810
Ma comunque, l'ignoto è diverso da qualsiasi altro.

01:11.810 --> 01:15.430
Questo funziona, ma avremo dei problemi se abbiamo

01:15.430 --> 01:19.660
un'altra variabile, diciamo userName, che dovrebbe essere

01:19.660 --> 01:20.890
una stringa.

01:20.890 --> 01:22.860
E qui non è inizializzato,

01:22.860 --> 01:27.200
ma poi voglio impostare userName uguale a userInput.

01:27.200 --> 01:29.150
Ora vediamo che si verifica un errore.

01:29.150 --> 01:33.010
Il tipo unknown non è assegnabile al tipo string.

01:33.010 --> 01:34.590
Quindi, userName vuole una stringa

01:34.590 --> 01:37.990
e ovviamente unknown non è garantito che sia una stringa.

01:37.990 --> 01:41.620
Qui ne ho assegnato uno, ma è solo il caso di questa linea.

01:41.620 --> 01:44.460
userInput tecnicamente potrebbe contenere qualsiasi

01:44.460 --> 01:46.490
valore, perché è sconosciuto.

01:46.490 --> 01:47.640
Ora, la cosa interessante

01:47.640 --> 01:51.060
è che se passo unknown a any, l'errore scompare perché any è

01:51.060 --> 01:53.900
il tipo più flessibile in TypeScript e in pratica

01:53.900 --> 01:56.810
disabilita tutti i controlli di tipo e TypeScript

01:56.810 --> 02:00.950
dice semplicemente: "Mi arrendo, fate quello che volete". Sconosciuto è un po' più restrittivo di qualsiasi altro.

02:00.950 --> 02:05.510
Con unknown, dobbiamo innanzitutto verificare il tipo attualmente

02:05.510 --> 02:08.820
memorizzato in userInput prima di poterlo

02:08.820 --> 02:12.200
assegnare, ad esempio, a una variabile che vuole

02:12.200 --> 02:14.400
una stringa.

02:14.400 --> 02:16.180
Quindi, dato che qui si vuole una

02:16.180 --> 02:18.110
stringa, potremmo controllare se

02:18.110 --> 02:23.110
il tipo di userInput è uguale a stringa e TypeScript rileverà questo controllo e capirà che

02:23.650 --> 02:26.020
qui, ciò che è memorizzato in userName, perché

02:26.020 --> 02:29.790
termina con questa istruzione if, in cui controllo che userInput sia

02:29.790 --> 02:31.830
di tipo stringa, userInput è garantito

02:31.830 --> 02:34.680
essere una stringa e quindi posso tranquillamente

02:34.680 --> 02:36.920
assegnarlo a userName.

02:36.920 --> 02:39.990
Quindi, ho bisogno di un controllo di tipo

02:39.990 --> 02:42.670
aggiuntivo con unknown per poter assegnare

02:42.670 --> 02:47.560
un valore sconosciuto a un valore con un tipo fisso e quindi unknown

02:47.560 --> 02:50.530
è la scelta migliore rispetto a qualsiasi

02:50.530 --> 02:54.780
altro, se non posso dire esattamente che tipo di memoria c'è,

02:54.780 --> 02:56.930
potrebbe essere un numero, potrebbe

02:56.930 --> 02:59.450
essere una stringa, ma so cosa voglio

02:59.450 --> 03:02.910
fare con esso alla fine.

03:02.910 --> 03:05.470
Basta aggiungere un ulteriore controllo per assicurarsi

03:05.470 --> 03:07.440
che ciò che si vuole fare possa essere fatto,

03:07.440 --> 03:10.240
in modo che se si vuole lavorare con una stringa, si abbia una

03:10.240 --> 03:12.160
stringa e si sia a posto.

03:12.160 --> 03:14.690
E poi l'incognita è meglio di qualsiasi

03:14.690 --> 03:18.720
altra perché fa sì che non si possa fare tutto, ma che si abbia

03:18.720 --> 03:20.930
almeno un tipo di controllo.

03:20.930 --> 03:23.260
Naturalmente, se si ha la possibilità di sapere

03:23.260 --> 03:25.990
in anticipo che userInput è sempre una stringa, o sempre

03:25.990 --> 03:28.150
una stringa o un numero, allora si dovrebbe

03:28.150 --> 03:30.000
usare string o un tipo di unione simile

03:30.000 --> 03:31.680
invece di unknown.

03:31.680 --> 03:34.460
Quindi, il tipo sconosciuto è ancora un tipo che non si dovrebbe usare

03:34.460 --> 03:36.010
sempre, ma è migliore di qualsiasi altro

03:36.010 --> 03:37.460
per i motivi descritti.
