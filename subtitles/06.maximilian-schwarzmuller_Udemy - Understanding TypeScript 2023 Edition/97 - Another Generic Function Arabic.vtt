WEBVTT

00:02.140 --> 00:03.620
-: لذا دعنا نواصل التدرب

00:03.620 --> 00:06.220
على هذه الأنواع العامة لأنني أعلم أنه يمكن

00:06.220 --> 00:08.305
أن يكون من الغريب أن تلتف حولها ؛ في

00:08.305 --> 00:09.970
النهاية هم واضحون حقًا.

00:09.970 --> 00:12.180
لنقم بإنشاء دالة عامة

00:12.180 --> 00:14.810
متوسطة ، العد والطباعة.

00:14.810 --> 00:19.810
الآن يجب أن تأخذ هذه الوظيفة بعض الحجة ، بعض المعلمات.

00:20.330 --> 00:23.470
دعنا نسميه عنصرًا ، ولكن الاسم متروك لك

00:23.470 --> 00:26.530
حقًا والذي يجب أن يكون من النوع العام.

00:26.530 --> 00:28.340
لأنني حقًا لا أهتم بالنوع

00:28.340 --> 00:30.380
، على الأقل بطرق معينة.

00:30.380 --> 00:33.400
لنفترض أن لدينا نوعًا عامًا واحدًا في هذه الوظيفة

00:33.400 --> 00:35.800
والمعلمة الخاصة بنا من هذا النوع.

00:35.800 --> 00:38.350
هذا ، بالمناسبة ، كل ما هو نموذجي للأنواع العامة.

00:38.350 --> 00:40.030
إذا كانت لديك وظيفة عامة ، فغالبًا

00:40.030 --> 00:42.180
ما تكون المعلمة الخاصة بك من هذا النوع.

00:42.180 --> 00:43.890
لا يجب أن يكون كذلك ، ولكن غالبًا ما تكون

00:43.890 --> 00:45.890
هذه هي الطريقة التي تعمل بها مع الوظائف العامة

00:45.890 --> 00:46.920
، كما سترى ، حيث تحصل على

00:46.920 --> 00:49.080
المزيد والمزيد من الخبرة معها.

00:49.080 --> 00:50.670
لذلك قمنا بالعد والطباعة

00:50.670 --> 00:52.350
بالنوع العام هنا ، والعنصر

00:52.350 --> 00:54.430
من هذا النوع.

00:54.430 --> 00:56.500
الآن ما أريد إرجاعه هنا

00:56.500 --> 01:00.300
هو nienda tuple مع عنصرين حيث يجب أن يكون

01:00.300 --> 01:03.190
العنصر الأول هو العنصر نفسه والعنصر

01:03.190 --> 01:07.070
الثاني يجب أن يكون سلسلة وصف.

01:07.070 --> 01:10.160
ربما نسميها عد ونصفها ، لذلك.

01:10.160 --> 01:15.160
هنا حصلت على نص الوصف الخاص بي ، وهنا سأقول

01:15.410 --> 01:19.890
ليس له قيمة ، وأريد استخدام ذلك إذا مررنا

01:19.890 --> 01:22.620
في عنصر ليس له طول.

01:22.620 --> 01:25.570
لأن فكرتي مع العد والوصف هي أنه يمكننا

01:25.570 --> 01:29.040
تمرير مصفوفة أو سلسلة ، ونستعيد عدد الأحرف أو

01:29.040 --> 01:32.040
العناصر في تلك السلسلة أو المصفوفة.

01:32.040 --> 01:34.040
لذلك إذا حصلنا على سلسلة

01:34.040 --> 01:37.440
فارغة أو مصفوفة فارغة ، فأنا أريد أن لا أحصل

01:37.440 --> 01:42.440
على أي قيمة ، ولكن هنا إذا تحققت من أن طول نقطة العنصر أكبر من

01:43.210 --> 01:46.170
الصفر ، فأنا أرغب في تعيين نص الوصف

01:47.430 --> 01:52.430
ليحصل على عنصر زائد طول نقطة بالإضافة إلى العناصر.

01:55.850 --> 01:58.100
يمكنك أن تكون أكثر تحديدًا

01:58.100 --> 02:03.100
وتحقق مما إذا كان الطول يساوي واحدًا هنا ، ثم قل حصلنا

02:06.590 --> 02:11.590
على عنصر واحد ، وإلا إذا كان طول العنصر أكبر من واحد

02:11.720 --> 02:13.750
، فلدينا نص وصفي يساوي

02:13.750 --> 02:18.750
بالإضافة إلى عناصر طول العنصر حتى نحصل على صيغة الجمع

02:18.990 --> 02:21.173
حقا.

02:22.850 --> 02:25.220
الآن هنا ، يوجد نص الوصف للعنصر الثاني

02:25.220 --> 02:27.040
والعودة هنا. الآن ترى بالفعل

02:27.040 --> 02:29.480
أنواع الشكاوى حول الطول هنا.

02:29.480 --> 02:32.350
لأنه ليس من الواضح أن هذا العنصر له طول.

02:32.350 --> 02:34.770
لذا ربما يجب أن نوضح أنها كذلك.

02:34.770 --> 02:38.430
يمكننا القيام بذلك عن طريق إنشاء واجهة جديدة أو

02:38.430 --> 02:41.060
نوع مخصص مع نوع الكلمة الأساسية هنا

02:41.060 --> 02:44.750
وهنا سأذهب لواجهة سأسميها مطولة والتي في النهاية

02:44.750 --> 02:47.440
تضمن فقط أن لدينا كائنًا بخاصية length

02:47.440 --> 02:50.820
والتي يجب أن تسفر عن رقم في النهاية.

02:50.820 --> 02:52.870
وبعد ذلك يمكننا هنا وضع قيد ونقول

02:52.870 --> 02:54.740
إن T يمتد لفترة طويلة.

02:54.740 --> 02:57.710
لذا فنحن نعرف كل ما نحصل عليه ، سيكون لدينا خاصية

02:57.710 --> 03:01.053
طول وسيكون للمصفوفة أو السلسلة خاصية طول.

03:02.030 --> 03:07.030
الآن هنا ، يمكنني التحكم في عدد السجلات ووصفها وتمريرها

03:07.500 --> 03:11.240
، دعنا نقول ، مرحبًا هناك.

03:11.240 --> 03:14.280
يعمل هذا الآن لأن السلسلة لها خاصية طول.

03:14.280 --> 03:15.290
إنه ليس شيئًا.

03:15.290 --> 03:17.310
إنه عبارة عن سلسلة ، ولكن خلف الكواليس

03:17.310 --> 03:19.980
، تحول Javascript نوعًا ما إلى كائن سريع يمكنك

03:19.980 --> 03:21.720
قوله وتضيف خاصية length عندما

03:21.720 --> 03:23.940
نحتاج إليها. لذلك يمكننا أن نسميها

03:23.940 --> 03:26.960
بأمان على هذا النحو. اكتب البرنامج النصي

03:26.960 --> 03:31.370
في البداية حيث نعيد هنا مصفوفة تحتوي إما على سلسلة نصية أو اكتب

03:31.370 --> 03:33.580
عنصر T هناك. أريد الآن الحصول على

03:33.580 --> 03:36.060
tuple ، لذا سأكون أكثر تحديدًا هنا وأضبط نوع

03:36.060 --> 03:39.110
الإرجاع ليكون أساسًا مصفوفة تحتوي على عنصرين بالضبط

03:39.110 --> 03:41.330
حيث سيكون العنصر الأول من النوع T والعنصر

03:41.330 --> 03:43.850
الثاني سيكون من النوع string.

03:43.850 --> 03:46.270
والآن أقول إننا نعيد tuple هنا

03:46.270 --> 03:49.360
حيث سيكون العنصر الأول ، حسنًا ، أي عنصر

03:49.360 --> 03:52.010
من النوع العام لدينا ، والعنصر الثاني

03:52.010 --> 03:54.110
سيكون سلسلة نصية.

03:54.110 --> 03:56.820
الآن ، إذا حفظنا هذا ، يتم إعادة تجميعه بدون

03:56.820 --> 04:00.330
أخطاء ويطبع مرحبًا ، حصلنا على تسعة عناصر لأننا حصلنا

04:00.330 --> 04:02.330
على تسعة أحرف هناك.

04:04.320 --> 04:06.890
يمكننا أيضًا استدعاء هذا بمصفوفة

04:06.890 --> 04:09.530
حيث لدينا الرياضة والطهي ، والآن

04:09.530 --> 04:12.460
سترى أننا حصلنا على عنصرين كنص وصف

04:12.460 --> 04:15.990
، أو بمصفوفة فارغة بالطبع ، في هذه الحالة ،

04:15.990 --> 04:18.660
إذا قمت بحفظ ذلك لم نحصل على قيمة

04:18.660 --> 04:22.500
، لكننا لن نتمكن من استدعاء هذا ، على سبيل المثال

04:22.500 --> 04:24.103
، برقم لأن الرقم ليس

04:24.103 --> 04:26.333
له خاصية طول ، وبالتالي هذا

04:26.333 --> 04:28.090
لا يعمل.

04:28.090 --> 04:32.900
إذن ، هنا مرة أخرى ، حصلنا على وظيفتنا العامة.

04:32.900 --> 04:35.043
الفكرة مشابهة للوظيفة السابقة.

04:35.043 --> 04:38.680
نريد أن نكون غير محددين بعض الشيء بشأن نوع البيانات التي نحصل

04:38.680 --> 04:40.540
عليها هنا. لا يهمنا حقًا ما

04:40.540 --> 04:43.180
إذا كانت سلسلة نصية ، أو مصفوفة ، أو أي شيء آخر

04:43.180 --> 04:45.610
له خاصية length. كل ما يهمنا هو أنه يحتوي

04:45.610 --> 04:47.930
على خاصية length ومن ثم نريد أن نفعل شيئًا

04:47.930 --> 04:49.980
به لأننا نعتمد على خاصية length في الكود

04:49.980 --> 04:51.970
الخاص بنا ، لذلك نحتاج إلى ضمان حصولنا

04:51.970 --> 04:53.540
على ذلك ، ولكن بخلاف ذلك ، ليس

04:53.540 --> 04:55.370
لدينا حقًا الاهتمام بنوع البيانات

04:55.370 --> 04:59.490
التي نحصل عليها هنا.

04:59.490 --> 04:59.490
لا

04:59.490 --> 05:01.820
أريد قفل هذا على سلسلة أو مصفوفة ، ولا أريد إنشاء

05:01.820 --> 05:04.220
مجموعة من الأحمال الزائدة للتعامل مع جميع الأنواع

05:04.220 --> 05:05.830
المختلفة الممكنة.

05:05.830 --> 05:08.124
لا أرغب أيضًا في إنشاء نوع اتحاد طويل

05:08.124 --> 05:10.970
جدًا هنا لأنني قد أنسى الأنواع التي لها خاصية

05:10.970 --> 05:13.610
length ، أو إذا قمت بإنشاء كائن خاص بي بخاصية

05:13.610 --> 05:16.220
length ، فقد لا أسمح بذلك إذا قمت بتقييد هذا

05:16.220 --> 05:18.640
هنا ليكون كذلك من النوع أو السلسلة أو

05:18.640 --> 05:21.580
المصفوفة أو أي شيء من هذا القبيل.

05:21.580 --> 05:23.500
لذلك ، أريد أن أكون أكثر مرونة ومع

05:23.500 --> 05:25.380
الأنواع العامة يمكننا أن نكون

05:25.380 --> 05:27.550
كذلك ، لا نهتم بالنوع الدقيق.

05:27.550 --> 05:30.080
هنا ، بفضل القيد ، لا أهتم

05:30.080 --> 05:33.363
إلا بحقيقة أن لها خاصية الطول.
