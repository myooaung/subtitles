WEBVTT

1
00:00:02.310 --> 00:00:04.580
<v Instructor>So getting projects from A to B</v>

2
00:00:04.580 --> 00:00:06.000
is now our goal.

3
00:00:06.000 --> 00:00:09.750
To be precise, when users create a new project,

4
00:00:09.750 --> 00:00:11.850
when they enter all the data,

5
00:00:11.850 --> 00:00:15.790
we wanna create a new project object in the end,

6
00:00:15.790 --> 00:00:18.830
which we then output in our project list class

7
00:00:18.830 --> 00:00:20.460
as part of the unordered list,

8
00:00:20.460 --> 00:00:21.990
which is rendered there.

9
00:00:21.990 --> 00:00:23.299
That's the idea.

10
00:00:23.299 --> 00:00:26.350
Of course a trivial way of implementing this

11
00:00:26.350 --> 00:00:28.890
could be to simply go to the place

12
00:00:28.890 --> 00:00:30.830
where the user input is entered

13
00:00:30.830 --> 00:00:34.513
and then here use document.getElementbyId,

14
00:00:36.100 --> 00:00:39.410
to reach out for that unordered list

15
00:00:39.410 --> 00:00:42.270
we rendered as part of our project list class,

16
00:00:42.270 --> 00:00:44.470
which has this ID here,

17
00:00:44.470 --> 00:00:49.110
so active-projects list or finished-projects list,

18
00:00:49.110 --> 00:00:51.090
and then simply reach out to that

19
00:00:51.090 --> 00:00:52.760
and add a new item to it.

20
00:00:52.760 --> 00:00:54.770
But that's not really the idea

21
00:00:54.770 --> 00:00:57.250
of how I wanna build this application.

22
00:00:57.250 --> 00:00:59.800
I wanna build it in an object oriented way

23
00:00:59.800 --> 00:01:02.530
where we have our different classes

24
00:01:02.530 --> 00:01:06.500
that work together in a reactive way

25
00:01:06.500 --> 00:01:08.200
where we create a new class

26
00:01:08.200 --> 00:01:10.550
and then something happens in the dom.

27
00:01:10.550 --> 00:01:12.730
Where we call a method of a class

28
00:01:12.730 --> 00:01:14.650
and then this class does something.

29
00:01:14.650 --> 00:01:16.980
That's how I want these things to work.

30
00:01:16.980 --> 00:01:19.560
Now of course we could add a method

31
00:01:19.560 --> 00:01:21.550
to the project list class,

32
00:01:21.550 --> 00:01:24.120
let's say I add project method.

33
00:01:24.120 --> 00:01:25.890
That method should then be called

34
00:01:25.890 --> 00:01:28.200
when a project should be added and rendered,

35
00:01:28.200 --> 00:01:30.700
and we would have to find some way of calling it

36
00:01:30.700 --> 00:01:32.940
from inside the project input.

37
00:01:32.940 --> 00:01:34.820
To do that, we could make sure

38
00:01:34.820 --> 00:01:37.940
that we actually pass references to our list here,

39
00:01:37.940 --> 00:01:40.330
to the project input constructor,

40
00:01:40.330 --> 00:01:42.810
so that from inside the project input class,

41
00:01:42.810 --> 00:01:45.290
we can work with these concrete instances

42
00:01:45.290 --> 00:01:47.570
and call the methods on these instances.

43
00:01:47.570 --> 00:01:50.260
Because that is what we would have to do.

44
00:01:50.260 --> 00:01:52.050
That would be a viable way,

45
00:01:52.050 --> 00:01:54.400
definitely an approach you could take,

46
00:01:54.400 --> 00:01:58.680
but I wanna take an even more abstract approach.

47
00:01:58.680 --> 00:02:01.393
Even more interesting approach in my opinion.

48
00:02:02.330 --> 00:02:06.210
I will build a class which manages the state

49
00:02:06.210 --> 00:02:08.110
of our application, so to say,

50
00:02:08.110 --> 00:02:11.187
a class which manages our projects,

51
00:02:11.187 --> 00:02:13.840
or whichever state we might need to manage

52
00:02:13.840 --> 00:02:15.530
in the application,

53
00:02:15.530 --> 00:02:18.660
which also allows us to then set up listeners

54
00:02:18.660 --> 00:02:21.670
in the different parts of the app that are interested.

55
00:02:21.670 --> 00:02:24.540
This is a pattern that might sound familiar to you

56
00:02:24.540 --> 00:02:27.050
if you worked with frameworks like Angular

57
00:02:27.050 --> 00:02:29.820
or libraries like React and Redux.

58
00:02:29.820 --> 00:02:33.423
That you have a global state management object

59
00:02:33.423 --> 00:02:35.443
and you just listen to changes.

60
00:02:35.443 --> 00:02:37.480
That is what I wanna implement here.

61
00:02:37.480 --> 00:02:39.620
Of course it's just one way of doing this,

62
00:02:39.620 --> 00:02:41.660
but I think it's a quite interesting way,

63
00:02:41.660 --> 00:02:43.680
which is why I want to show it.

64
00:02:43.680 --> 00:02:45.908
So at the top of the app ts file,

65
00:02:45.908 --> 00:02:50.350
I'll add a project state management class.

66
00:02:50.350 --> 00:02:53.347
And I will simply name is projectState;

67
00:02:54.820 --> 00:02:57.210
sounds like a sensible name to me.

68
00:02:57.210 --> 00:02:59.900
Now the idea here is that in this class

69
00:02:59.900 --> 00:03:03.760
we have a property or a field,

70
00:03:03.760 --> 00:03:06.570
a private field, projects,

71
00:03:06.570 --> 00:03:08.800
which holds an array of projects.

72
00:03:08.800 --> 00:03:12.000
Now we also need to define how a project should look like,

73
00:03:12.000 --> 00:03:13.360
we'll do that in the next step,

74
00:03:13.360 --> 00:03:15.830
for now I'll just say it's an array of anything,

75
00:03:15.830 --> 00:03:18.710
which of course is not perfect, not final,

76
00:03:18.710 --> 00:03:22.240
but I wanna focus on that state management solution for now.

77
00:03:22.240 --> 00:03:25.653
So we have this list of projects here.

78
00:03:26.530 --> 00:03:30.163
Now my goal is that I wanna add an item to that list

79
00:03:30.163 --> 00:03:35.163
whenever we, well click that add project button here.

80
00:03:36.940 --> 00:03:39.970
To make that work, inside of the project state class,

81
00:03:39.970 --> 00:03:43.460
I'll add an add project method, a public one.

82
00:03:43.460 --> 00:03:45.560
And there I expect to get the title,

83
00:03:45.560 --> 00:03:47.060
which should be a string,

84
00:03:47.060 --> 00:03:49.390
the description, which should be a string,

85
00:03:49.390 --> 00:03:53.250
and also the number of people working on the project,

86
00:03:53.250 --> 00:03:55.220
which should be a number.

87
00:03:55.220 --> 00:03:58.450
Then in here, we can create a new project

88
00:03:58.450 --> 00:04:00.950
with the object literal notation for now.

89
00:04:00.950 --> 00:04:03.950
Where we should have some ID for every project

90
00:04:03.950 --> 00:04:06.050
so that we can uniquely identify it,

91
00:04:06.050 --> 00:04:09.510
and I'll generate an ID here by using

92
00:04:09.510 --> 00:04:12.100
math.random().toString.

93
00:04:12.100 --> 00:04:14.960
Now a random number is not really a unique ID,

94
00:04:14.960 --> 00:04:17.880
you can generate the same number more than once,

95
00:04:17.880 --> 00:04:19.300
but it's very unlikely,

96
00:04:19.300 --> 00:04:22.570
and for our demo purposes here it will do.

97
00:04:22.570 --> 00:04:25.170
Now besides that every project should have a title

98
00:04:25.170 --> 00:04:28.370
and there will store that title argument we're getting.

99
00:04:28.370 --> 00:04:30.913
Same for description,

100
00:04:31.960 --> 00:04:33.830
where I will store description.

101
00:04:33.830 --> 00:04:37.693
And my people where I will store the number of people.

102
00:04:39.700 --> 00:04:43.440
This, for now, is the project I wanna store.

103
00:04:43.440 --> 00:04:45.000
So once we created it here,

104
00:04:45.000 --> 00:04:48.020
we can reach out to the projects array in projects state,

105
00:04:48.020 --> 00:04:48.853
which is private,

106
00:04:48.853 --> 00:04:50.320
but from inside the class,

107
00:04:50.320 --> 00:04:51.530
which this method is,

108
00:04:51.530 --> 00:04:53.340
we can access it of course.

109
00:04:53.340 --> 00:04:55.900
And there I wanna add this new project

110
00:04:55.900 --> 00:05:00.380
and for that we can simply push our new project to it.

111
00:05:00.380 --> 00:05:03.350
Now with that, we are able to add a project.

112
00:05:03.350 --> 00:05:07.027
But we still, of course, have a couple of unclear questions.

113
00:05:07.027 --> 00:05:12.027
How do we call add project from inside our class down there

114
00:05:12.750 --> 00:05:14.650
where we gather the user input

115
00:05:14.650 --> 00:05:15.990
from inside the submit handler?

116
00:05:15.990 --> 00:05:17.940
How do we call add project?

117
00:05:17.940 --> 00:05:21.730
And how do we pass that updated list of projects

118
00:05:21.730 --> 00:05:25.690
whenever it changes to the project list class?

119
00:05:25.690 --> 00:05:29.230
These are the two issues we of course face at the moment.

120
00:05:29.230 --> 00:05:31.840
Well, one thing I will do here,

121
00:05:31.840 --> 00:05:36.499
is I will create an instance of project state here.

122
00:05:36.499 --> 00:05:39.720
A global instance, which we could use from the entire file,

123
00:05:39.720 --> 00:05:42.760
and I'll do it right after we create that class.

124
00:05:42.760 --> 00:05:47.050
So here I have my project state constant

125
00:05:47.050 --> 00:05:50.370
where I instantiate project state like this.

126
00:05:50.370 --> 00:05:52.400
This way this is a global constant

127
00:05:52.400 --> 00:05:54.620
that can be used any where in the file,

128
00:05:54.620 --> 00:05:58.000
so talking to that class is now super simple,

129
00:05:58.000 --> 00:06:01.660
you just have to use this global constant here.

130
00:06:01.660 --> 00:06:04.850
We can even use a feature we all learned about,

131
00:06:04.850 --> 00:06:06.430
the private constructor,

132
00:06:06.430 --> 00:06:09.170
to guarantee that this is a singleton class.

133
00:06:09.170 --> 00:06:11.950
We can create a private constructor here

134
00:06:11.950 --> 00:06:14.300
and then we have another private property here,

135
00:06:14.300 --> 00:06:16.670
instance, which is of type project state,

136
00:06:16.670 --> 00:06:18.933
so the same type this class is of.

137
00:06:20.640 --> 00:06:24.360
And we then add a get instance method here,

138
00:06:24.360 --> 00:06:26.390
a static method actually,

139
00:06:26.390 --> 00:06:30.050
where we check if this .instance is a thing,

140
00:06:30.050 --> 00:06:31.020
and for that,

141
00:06:31.020 --> 00:06:33.970
this actually also have to be a static instance,

142
00:06:33.970 --> 00:06:35.800
a static property, I mean.

143
00:06:35.800 --> 00:06:37.100
If this is a thing,

144
00:06:37.100 --> 00:06:39.550
if it is, we return this .instance,

145
00:06:39.550 --> 00:06:42.230
so we return out single instance we got,

146
00:06:42.230 --> 00:06:44.590
otherwise we create a new one.

147
00:06:44.590 --> 00:06:45.423
So otherwise,

148
00:06:45.423 --> 00:06:50.423
this .instance will be equal to new project state.

149
00:06:50.450 --> 00:06:52.963
And then we return this .instance.

150
00:06:54.740 --> 00:06:57.913
Now with that, we can call get instance down there,

151
00:06:59.370 --> 00:07:00.903
like this, ProjectState.getInstance,

152
00:07:02.650 --> 00:07:04.390
and we're guaranteed to always work

153
00:07:04.390 --> 00:07:06.560
with the exact same object

154
00:07:06.560 --> 00:07:10.020
and will always only have one object of the type

155
00:07:10.020 --> 00:07:11.700
in the entire application.

156
00:07:11.700 --> 00:07:12.840
Which is the idea here,

157
00:07:12.840 --> 00:07:16.480
because I only wanna have one state management object

158
00:07:16.480 --> 00:07:17.503
for our project.

159
00:07:17.503 --> 00:07:19.570
So that is this project state

160
00:07:19.570 --> 00:07:21.563
with this singleton constructor now.

161
00:07:22.730 --> 00:07:25.890
So now we have our project state constant.

162
00:07:25.890 --> 00:07:28.040
Let's go down to the project input class

163
00:07:28.040 --> 00:07:30.270
therefore where we gather the user input.

164
00:07:30.270 --> 00:07:33.950
Here, we can now call projectState.addProject

165
00:07:33.950 --> 00:07:37.830
and forward the title, the description and the people,

166
00:07:37.830 --> 00:07:40.960
we get back from gather user input in the end.

167
00:07:40.960 --> 00:07:43.920
So now this project should get created.

168
00:07:43.920 --> 00:07:47.140
Now we just need to push that information

169
00:07:47.140 --> 00:07:51.530
that we have a new project to our project list class,

170
00:07:51.530 --> 00:07:53.840
because that's the class which is responsible

171
00:07:53.840 --> 00:07:56.500
for outputting something to the screen.

172
00:07:56.500 --> 00:07:59.450
And for that I wanna set up a subscription pattern

173
00:07:59.450 --> 00:08:00.350
in the end.

174
00:08:00.350 --> 00:08:03.020
Where inside of our project state

175
00:08:03.020 --> 00:08:05.730
we manage a list of listeners,

176
00:08:05.730 --> 00:08:08.690
so a list of functions in the end,

177
00:08:08.690 --> 00:08:11.600
which should be called whenever something changes.

178
00:08:11.600 --> 00:08:12.433
So for that

179
00:08:12.433 --> 00:08:15.830
I'll add another private property here, listeners.

180
00:08:15.830 --> 00:08:18.810
And listeners will be an empty array

181
00:08:18.810 --> 00:08:22.130
and for now, again, just an array of anything

182
00:08:22.130 --> 00:08:25.543
we will specify this in greater detail later.

183
00:08:26.760 --> 00:08:31.382
Now I also want to have a method here

184
00:08:31.382 --> 00:08:35.590
addListener where I get a listener function,

185
00:08:35.590 --> 00:08:39.150
so this should be a function in the end here.

186
00:08:39.150 --> 00:08:41.370
And I will then add this to my listeners.

187
00:08:41.370 --> 00:08:43.970
So we push the listener function here

188
00:08:43.970 --> 00:08:46.500
to, well the listeners array.

189
00:08:46.500 --> 00:08:49.580
Now what's the idea of having that listeners array?

190
00:08:49.580 --> 00:08:51.110
It's an array of functions,

191
00:08:51.110 --> 00:08:53.070
of function references right?

192
00:08:53.070 --> 00:08:55.250
The idea is that whenever something changes,

193
00:08:55.250 --> 00:08:57.310
like here when we add a new project,

194
00:08:57.310 --> 00:08:59.790
we call all listener functions.

195
00:08:59.790 --> 00:09:03.050
So we loop through all listeners,

196
00:09:03.050 --> 00:09:04.720
of this listener,

197
00:09:04.720 --> 00:09:07.330
so through all listener functions,

198
00:09:07.330 --> 00:09:09.520
and then since these are function references,

199
00:09:09.520 --> 00:09:11.593
we can execute this as a function.

200
00:09:13.010 --> 00:09:14.630
And to that function,

201
00:09:14.630 --> 00:09:18.620
we pass the thing that's relevant for it,

202
00:09:18.620 --> 00:09:20.130
based on the state we're managing,

203
00:09:20.130 --> 00:09:22.020
which is in this case, in this class of course,

204
00:09:22.020 --> 00:09:23.280
is our projects list.

205
00:09:23.280 --> 00:09:27.983
This is the state this class is responsible for.

206
00:09:29.100 --> 00:09:29.933
So here,

207
00:09:30.980 --> 00:09:33.050
I forward this project

208
00:09:33.050 --> 00:09:35.170
and I will call slice on it

209
00:09:35.170 --> 00:09:37.550
to only return a copy of that array

210
00:09:37.550 --> 00:09:39.100
and not the original array.

211
00:09:39.100 --> 00:09:41.880
So that it can't be edited from the place

212
00:09:41.880 --> 00:09:44.210
where the listener function is coming from.

213
00:09:44.210 --> 00:09:45.760
Because arrays and objects

214
00:09:45.760 --> 00:09:48.110
are reference values in Javascript,

215
00:09:48.110 --> 00:09:50.490
so if you would pass the original array,

216
00:09:50.490 --> 00:09:52.600
we could edit it from outside

217
00:09:52.600 --> 00:09:54.380
and also on the same hand,

218
00:09:54.380 --> 00:09:57.020
if we push something to it from inside this class,

219
00:09:57.020 --> 00:09:59.830
it would already change every where else in the app,

220
00:09:59.830 --> 00:10:03.540
but these places would not really notice that it changed,

221
00:10:03.540 --> 00:10:05.630
so it could introduce strange bugs

222
00:10:05.630 --> 00:10:08.270
if we pass around the original reference,

223
00:10:08.270 --> 00:10:10.803
which is why I pass around the brand new copy,

224
00:10:10.803 --> 00:10:12.770
a brand new array here.

225
00:10:12.770 --> 00:10:15.390
So now every listener function is getting executed

226
00:10:15.390 --> 00:10:19.400
and gets our copy, our brand new copy of projects.

227
00:10:19.400 --> 00:10:21.380
Now we just need to go to the places

228
00:10:21.380 --> 00:10:23.800
where we want to be informed about changes,

229
00:10:23.800 --> 00:10:26.560
in our case, the project list class here,

230
00:10:26.560 --> 00:10:29.030
and set up such a listener.

231
00:10:29.030 --> 00:10:32.880
So here, in the constructor of the project list class,

232
00:10:32.880 --> 00:10:35.546
before we attach and render the content,

233
00:10:35.546 --> 00:10:38.010
I will reach out to projectState

234
00:10:38.010 --> 00:10:40.110
and call addListener here

235
00:10:40.110 --> 00:10:43.720
to basically register a listener function here.

236
00:10:43.720 --> 00:10:46.150
Now a listener, as I said, is a function,

237
00:10:46.150 --> 00:10:49.100
so we have to pass a function to addListener.

238
00:10:49.100 --> 00:10:51.210
Because the listeners we're managing here

239
00:10:51.210 --> 00:10:52.610
in the project state,

240
00:10:52.610 --> 00:10:54.680
that's just a list of functions,

241
00:10:54.680 --> 00:10:56.300
which we will eventually call

242
00:10:56.300 --> 00:10:57.773
when something changes right?

243
00:10:58.840 --> 00:11:01.110
So I will need to pass a function

244
00:11:01.110 --> 00:11:04.990
to my addListener function here.

245
00:11:04.990 --> 00:11:07.520
Here I'm passing an anonymous arrow function.

246
00:11:07.520 --> 00:11:10.770
And that function will get a list of projects

247
00:11:10.770 --> 00:11:14.400
when it's called from inside projectState.

248
00:11:14.400 --> 00:11:17.430
So we get a list of projects, we know that,

249
00:11:17.430 --> 00:11:19.160
inside of this function body,

250
00:11:19.160 --> 00:11:21.560
we can then use this list of projects.

251
00:11:21.560 --> 00:11:26.046
And here I will add a brand new field to the project list,

252
00:11:26.046 --> 00:11:28.410
assignedProjects maybe,

253
00:11:28.410 --> 00:11:30.310
which is of type any array,

254
00:11:30.310 --> 00:11:32.357
so anything in an array,

255
00:11:32.357 --> 00:11:34.010
and array of any values,

256
00:11:34.010 --> 00:11:36.050
well of course I'll also specify this

257
00:11:36.050 --> 00:11:37.630
in greater detail later.

258
00:11:37.630 --> 00:11:39.890
Then here we can say this assigned project

259
00:11:39.890 --> 00:11:41.780
is equal to projects.

260
00:11:41.780 --> 00:11:44.240
So to the projects we're getting.

261
00:11:44.240 --> 00:11:45.870
Now here to get rid of that

262
00:11:45.870 --> 00:11:47.280
implicit any type error,

263
00:11:47.280 --> 00:11:49.900
I have to be clear that this will actually be

264
00:11:49.900 --> 00:11:51.563
an array of anything here.

265
00:11:52.610 --> 00:11:55.020
So now I'm adding the projects

266
00:11:55.020 --> 00:11:57.660
which I get because something changed in my state.

267
00:11:57.660 --> 00:11:59.490
Here to my assigned projects

268
00:11:59.490 --> 00:12:00.530
where I'm not adding it,

269
00:12:00.530 --> 00:12:02.350
I'm overriding the assigned projects

270
00:12:02.350 --> 00:12:04.170
with the new projects.

271
00:12:04.170 --> 00:12:08.223
And then my idea is to render all these projects.

272
00:12:09.080 --> 00:12:10.883
For that we can add a new method;

273
00:12:11.951 --> 00:12:15.080
renderPrjects, for example.

274
00:12:15.080 --> 00:12:16.920
Which I wanna call from in here,

275
00:12:16.920 --> 00:12:20.063
this renderProjects, just like this.

276
00:12:22.230 --> 00:12:24.120
It ends out of renderProjects.

277
00:12:24.120 --> 00:12:27.480
I'll reach out to this list here,

278
00:12:27.480 --> 00:12:30.150
right, we assign that ID when we render the content,

279
00:12:30.150 --> 00:12:31.290
which we do here.

280
00:12:31.290 --> 00:12:34.440
It looks like we do this after renderProjects is called,

281
00:12:34.440 --> 00:12:36.640
but keep in mind, that ends out of a function,

282
00:12:36.640 --> 00:12:38.470
which will only eventually be called

283
00:12:38.470 --> 00:12:40.230
once new projects are added.

284
00:12:40.230 --> 00:12:43.510
So actually renderContent will run first.

285
00:12:43.510 --> 00:12:47.090
And therefore, in renderProjects we can rely on this ID

286
00:12:47.090 --> 00:12:49.370
being assigned to an unordered list,

287
00:12:49.370 --> 00:12:53.030
so here we can grab this

288
00:12:53.030 --> 00:12:58.030
and get our list element by using document.getElementbyId

289
00:12:58.469 --> 00:13:00.790
and then I just pass on this ID identifier

290
00:13:00.790 --> 00:13:03.690
using the type of this concrete project list class.

291
00:13:03.690 --> 00:13:08.563
And then also using, well the rest of this ID we generated.

292
00:13:09.580 --> 00:13:11.130
And to that list or in that list

293
00:13:11.130 --> 00:13:14.170
I wanna render all the projects we have.

294
00:13:14.170 --> 00:13:17.670
So, I will go through all the project items

295
00:13:17.670 --> 00:13:21.060
of this assigned projects here.

296
00:13:21.060 --> 00:13:23.150
And then for every item I wanna add something

297
00:13:23.150 --> 00:13:23.983
to the list

298
00:13:23.983 --> 00:13:25.380
and we'll refine this later.

299
00:13:25.380 --> 00:13:29.787
For the moment, I will just call appendChild here

300
00:13:30.890 --> 00:13:32.480
on my list element.

301
00:13:32.480 --> 00:13:34.490
By the way here we should add an exclamation mark

302
00:13:34.490 --> 00:13:36.970
to make it clear that this will not be null.

303
00:13:36.970 --> 00:13:41.970
We can also cast this to an HTML UL list element,

304
00:13:42.000 --> 00:13:43.560
so to an unordered list element

305
00:13:43.560 --> 00:13:45.420
because that is what it will be.

306
00:13:45.420 --> 00:13:47.530
And then we can append the child here

307
00:13:47.530 --> 00:13:49.740
and that should be a brand new list item;

308
00:13:49.740 --> 00:13:51.980
so here we can create our list item

309
00:13:51.980 --> 00:13:56.160
with document.createElement LI.

310
00:13:56.160 --> 00:13:58.350
And on that list item here,

311
00:13:58.350 --> 00:14:02.500
I just will set the text content equal to project

312
00:14:02.500 --> 00:14:03.950
Item.title.

313
00:14:03.950 --> 00:14:06.240
Every project item will be a project

314
00:14:06.240 --> 00:14:09.940
as we create it up there in the project state,

315
00:14:09.940 --> 00:14:11.350
so it will be such an object,

316
00:14:11.350 --> 00:14:13.100
and therefore it will have a title.

317
00:14:14.210 --> 00:14:15.940
Now with that if we go down there

318
00:14:15.940 --> 00:14:18.880
we have our list item which now is added here.

319
00:14:18.880 --> 00:14:20.730
And with that we're almost there,

320
00:14:20.730 --> 00:14:22.340
remaining fixes here,

321
00:14:22.340 --> 00:14:23.740
I set up that field,

322
00:14:23.740 --> 00:14:27.080
but in the constructor I then never reference it.

323
00:14:27.080 --> 00:14:29.090
Only here in my listener function,

324
00:14:29.090 --> 00:14:31.230
but as mentioned, this does not run immediately

325
00:14:31.230 --> 00:14:32.640
in the constructor.

326
00:14:32.640 --> 00:14:37.640
So what I'll do here is I will set this assigned projects

327
00:14:38.970 --> 00:14:41.200
equal to an empty array here initially,

328
00:14:41.200 --> 00:14:44.450
so that we're all happy and this is initialized.

329
00:14:44.450 --> 00:14:45.510
Now if we save this,

330
00:14:45.510 --> 00:14:47.780
it should compile without errors.

331
00:14:47.780 --> 00:14:50.400
And now if we add something here,

332
00:14:50.400 --> 00:14:51.993
does this work?

333
00:14:53.480 --> 00:14:56.270
We indeed see it show up in our lists.

334
00:14:56.270 --> 00:14:58.270
In both lists at the moment

335
00:14:58.270 --> 00:15:00.847
because we have no filtering logic and so on.

336
00:15:00.847 --> 00:15:03.210
And that is something we can fix later,

337
00:15:03.210 --> 00:15:04.710
but it does work,

338
00:15:04.710 --> 00:15:06.220
and that's the important thing.

339
00:15:06.220 --> 00:15:08.390
Now you see we also have a bug here however.

340
00:15:08.390 --> 00:15:10.260
If I add a second element,

341
00:15:10.260 --> 00:15:12.370
we duplicate the last element

342
00:15:12.370 --> 00:15:13.880
and add the new elements,

343
00:15:13.880 --> 00:15:15.490
so that's something we'll have to fix.

344
00:15:15.490 --> 00:15:17.653
And these are all things we will tackle,

345
00:15:17.653 --> 00:15:21.270
but now at least we're able to output something

346
00:15:21.270 --> 00:15:24.450
with that, let's dive into all the improvements

347
00:15:24.450 --> 00:15:27.160
like being clearer about the types we're using,

348
00:15:27.160 --> 00:15:29.150
avoiding the duplicate output,

349
00:15:29.150 --> 00:15:30.733
and many other things as well.

