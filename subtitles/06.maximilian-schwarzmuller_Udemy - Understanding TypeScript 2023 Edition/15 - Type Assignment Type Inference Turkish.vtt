WEBVTT

00:02.270 --> 00:03.850
Eğitmen: Temel sayı,

00:03.850 --> 00:07.450
boolean ve string türlerini kullanıyoruz.

00:07.450 --> 00:10.840
Ve burada, bu fonksiyonun parametreleri listesinde,

00:10.840 --> 00:13.970
türleri her zaman parametre adından sonra iki

00:13.970 --> 00:16.540
nokta üst üste ve ardından türün adı ile

00:16.540 --> 00:18.410
açıkça atıyoruz.

00:18.410 --> 00:21.350
Yani burada isimler sayı, boolean, string'tir.

00:21.350 --> 00:23.100
Merak ediyorsanız, bunlar

00:23.100 --> 00:25.420
artık özel tanımlayıcılar.

00:25.420 --> 00:28.530
Bu genel, burada, TypeScript tarafından eklenen

00:28.530 --> 00:30.170
özel bir sözdizimidir.

00:30.170 --> 00:32.900
Derlenmiş JavaScript kodunun bir parçası değildir.

00:32.900 --> 00:35.040
Buradaki kodu kontrol edersek, JavaScript

00:35.040 --> 00:37.280
bunları desteklemediği için bu tür atamalarının

00:37.280 --> 00:39.530
olmadığını görürüz.

00:39.530 --> 00:42.390
Bu iki nokta üst üste, bir değişkenden veya bir parametreden

00:42.390 --> 00:43.920
sonra gelir.

00:43.920 --> 00:46.320
Ve sonra sayı ve boolean ve string.

00:46.320 --> 00:48.290
Bu özel anahtar kelimeler.

00:48.290 --> 00:50.840
Bu, TypeScript tarafından tanıtılmıştır.

00:50.840 --> 00:53.500
TypeScript derleyicisi bunu anlar.

00:53.500 --> 00:55.480
Buradaki IDE TypeScript'i destekler

00:55.480 --> 00:58.580
ve bu nedenle bu özel anahtar kelimelerden şikayet etmez.

00:58.580 --> 01:01.760
JavaScript bu sözdizimini anlamaz.

01:01.760 --> 01:04.590
Bir parametreden sonra gelen iki nokta üst üste işaretini veya bir değişkenden

01:04.590 --> 01:06.560
sonra gelen iki nokta üst üste işaretini ve ardından

01:06.560 --> 01:09.190
özel sayı veya dize anahtar sözcüğünü anlamaz.

01:09.190 --> 01:11.540
JavaScript bunu anlamaz ve bu nedenle bu JavaScript

01:11.540 --> 01:13.560
çıktısının bir parçası değildir.

01:13.560 --> 01:15.920
Gerçekten sadece TypeScript derleyicisi tarafından kullanılır.

01:15.920 --> 01:18.130
Ve sonra, bu kodu JavaScript

01:18.130 --> 01:21.820
koduna dönüştürdüğü için bir derleyicidir.

01:21.820 --> 01:24.880
Yan not, var için const'ı değiştirdiğini de görüyorsunuz

01:24.880 --> 01:27.700
ama bu daha sonra geri döneceğim bir şey.

01:27.700 --> 01:30.590
Yani, burada açık tip atamalarımız var ve bu sadece

01:30.590 --> 01:33.060
TypeScript tarafından anlaşılıyor.

01:33.060 --> 01:35.763
Harika, neden onları orada tutmuyoruz?

01:36.880 --> 01:39.890
Burada açık tip atamalarım yok.

01:39.890 --> 01:41.180
Ve bu arada, örneğin sonucu

01:41.180 --> 01:43.450
hesapladığımızda da burada değil, çünkü

01:43.450 --> 01:45.530
TypeScript'in tip çıkarımı adı verilen

01:45.530 --> 01:48.400
yerleşik bir özelliği vardır.

01:48.400 --> 01:51.000
Bu, TypeScript'in belirli bir değişken veya

01:51.000 --> 01:53.010
sabitte hangi türe sahip olduğunuzu

01:53.010 --> 01:56.400
anlamak için elinden geleni yaptığı ve bu konuda oldukça

01:56.400 --> 01:58.860
iyi bir iş çıkardığı anlamına gelir.

01:58.860 --> 02:02.300
Ve burada, örneğin, number1'in sonunda her zaman

02:02.300 --> 02:05.780
number türünde olacağını anlar, çünkü onu bir number

02:05.780 --> 02:08.020
ile başlatırsınız.

02:08.020 --> 02:09.950
Şimdi, bu aslında bir sabittir, bu yüzden

02:09.950 --> 02:11.740
bundan daha da spesifiktir.

02:11.740 --> 02:15.350
Ve burada tanımladığı tür herhangi bir sayı

02:15.350 --> 02:17.490
değil, beş sayısıdır.

02:17.490 --> 02:20.110
Çünkü zaten const bir değere yeni

02:20.110 --> 02:23.870
bir sayı veya yeni bir değer atayamazsınız.

02:23.870 --> 02:25.840
Bunu bir değişken olarak değiştirirseniz,

02:25.840 --> 02:28.460
yani let yerine let kullanırsanız, elbette bu

02:28.460 --> 02:30.180
hiçbir şeyi bozmaz.

02:30.180 --> 02:32.940
Burada bir değişken kullanabiliriz, bu en iyi uygulama olmayabilir

02:32.940 --> 02:34.540
çünkü bu değer asla değişmez, ancak

02:34.540 --> 02:36.210
korkunç da değildir.

02:36.210 --> 02:38.260
Ancak şimdi bunun üzerine gelirsek TypeScript'in

02:38.260 --> 02:41.210
"Tamam, bu beş olmalı" demediğini görürüz.

02:41.210 --> 02:45.510
Ancak yine de buradaki türün bir sayı olduğunu algılar.

02:45.510 --> 02:49.260
Şimdi, bu kodu burada kesinlikle kendi başımıza yazabiliriz.

02:49.260 --> 02:51.970
Eşittir işaretinin sol tarafındaki değişken adından

02:51.970 --> 02:53.870
sonra iki nokta üst üste ve ardından türün

02:53.870 --> 02:55.590
adını ekleyebiliriz.

02:55.590 --> 02:56.880
Yani, temel olarak bu fonksiyonun

02:56.880 --> 02:59.470
parametrelerinde yaptığımızın aynısı.

02:59.470 --> 03:01.860
Ancak, bu gereksizdir ve aslında iyi

03:01.860 --> 03:04.620
bir uygulama olarak da görülmemektedir.

03:04.620 --> 03:06.790
Çünkü TypeScript bu türü oradan

03:06.790 --> 03:09.990
mükemmel bir şekilde çıkarabilir.

03:09.990 --> 03:13.690
Dolayısıyla, bunu atamak iyi bir fikir değildir.

03:13.690 --> 03:16.420
Bu, yalnızca bu değişkeni atanmamış bir şekilde oluşturmanız

03:16.420 --> 03:18.053
durumunda değişir.

03:19.000 --> 03:22.130
Bunun gibi, eğer hemen başlatmazsanız.

03:22.130 --> 03:25.700
Ardından, TypeScript'e hangi değerin en sonunda burada

03:25.700 --> 03:29.070
depolanacağını söylemek iyi bir uygulamadır.

03:29.070 --> 03:32.590
Böylece daha sonra buna bir değer atadığınızda ve tabii ki

03:32.590 --> 03:34.080
bunu iki satıra bölmek biraz

03:34.080 --> 03:35.320
gereksizdir.

03:35.320 --> 03:37.800
Bunu sadece demo amaçlı yapıyorum.

03:37.800 --> 03:39.480
Ancak şimdi bunu buraya atarsam,

03:39.480 --> 03:42.460
TypeScript'e önceden bunun sayı türünde olacağını

03:42.460 --> 03:44.630
söylediğim için bu bozulur.

03:44.630 --> 03:45.610
Bunu yapmak zorunda değilsin.

03:45.610 --> 03:47.420
Bunu yapmazsanız da işe yarar.

03:47.420 --> 03:50.330
Ancak şimdi bu beşliyi de ekleyebilirsiniz ve bir hata

03:50.330 --> 03:51.630
almazsınız çünkü TypeScript'e

03:51.630 --> 03:53.470
bu değişkende depolanacak tür hakkında

03:53.470 --> 03:55.350
hiçbir şey söylemiyorsunuz ve bu

03:55.350 --> 03:56.975
nedenle TypeScript herhangi

03:56.975 --> 03:59.630
bir türe izin verir.

03:59.630 --> 04:02.600
Bunun yerine buraya iki nokta üst üste sayı eklerseniz,

04:02.600 --> 04:05.417
TypeScript'e "Hey, eninde sonunda burada bir sayı

04:05.417 --> 04:07.370
depolanacak" demiş olursunuz. Dolayısıyla, daha sonra burada başka

04:07.370 --> 04:10.060
bir şey depolarsanız, bu durumda olduğu gibi bir string

04:10.060 --> 04:12.470
depoladığımızda, IDE'de bir hata alırsınız

04:12.470 --> 04:15.170
ve tabii ki kodunuzu derlediğinizde de.

04:15.170 --> 04:17.570
Daha önce gördüğümüz hatayı alacağız.

04:17.570 --> 04:20.253
İşte türleri bu şekilde atayabilirsiniz.

04:22.300 --> 04:24.920
Şimdi, TypeScript bir tür çıkarsamış olsa bile ve

04:24.920 --> 04:27.830
bunu düzeltmeme izin verin, bu çıkarsanan türü bozarsanız

04:27.830 --> 04:29.310
size bağıracaktır.

04:29.310 --> 04:32.720
Aslında bunu söylemek bile yanlış çünkü elbette

04:32.720 --> 04:35.670
yapıyor, neden yapmasın ki?

04:35.670 --> 04:37.000
Tip çıkarımı, manuel olarak bir tip

04:37.000 --> 04:39.750
atamanız gerekmesini önlemek için kodunuzu kaydetmeniz için vardır.

04:39.750 --> 04:42.730
Tabii ki TypeScript, yanlış bir tür kullanırsanız,

04:42.730 --> 04:44.520
çıkarım yapmadığı bir tür kullanırsanız

04:44.520 --> 04:46.510
size bağırır.

04:46.510 --> 04:48.640
Örneğin, burada resultPhrase değişken

04:48.640 --> 04:52.460
olması için let ile oluşturulursa, TypeScript burada bunun

04:52.460 --> 04:54.000
string türünde olacağını

04:54.000 --> 04:57.670
çıkarır çünkü bunu bir string ile başlatırız.

04:57.670 --> 04:59.850
Yani bu, temelde onu başlatmamak ve

04:59.850 --> 05:03.060
türü kendi başımıza ayarlamak ve daha sonra bir değer

05:03.060 --> 05:04.970
atamakla eşdeğerdir.

05:04.970 --> 05:07.410
Şimdi, resultPhrase öğesini diyelim ki

05:07.410 --> 05:12.310
sıfır olarak değiştirirsek, bunu yapmak istememizin nedeni ne olursa olsun,

05:12.310 --> 05:15.660
burada sıfır türünün string türüne atanamayacağına

05:15.660 --> 05:17.330
dair bir hata alırız.

05:17.330 --> 05:21.210
Ve bu mantıklı, değil mi?

05:21.210 --> 05:22.690
TypeScript bir dize depolamak

05:22.690 --> 05:25.430
istediğimiz sonucuna vardı, şimdi bir sayı depolamaya

05:25.430 --> 05:27.290
çalışıyoruz ve hata alıyoruz.

05:27.290 --> 05:28.530
TypeScript'in işi, temel görevi budur.

05:28.530 --> 05:33.000
Türleri kontrol ediyor ve yanlış kullanıyorsak

05:33.000 --> 05:35.280
bize bağırıyor.
