WEBVTT

00:02.220 --> 00:03.053
Instructor: Ahora,

00:03.053 --> 00:04.920
he mencionado que las interfaces se utilizan

00:04.920 --> 00:07.114
para definir la estructura de un objeto.

00:07.114 --> 00:09.690
Ahora, las interfaces también pueden utilizarse para

00:09.690 --> 00:11.750
definir la estructura de una función.

00:11.750 --> 00:14.330
Así que, básicamente, como reemplazo de los tipos de función

00:14.330 --> 00:15.578
que ya aprendiste.

00:15.578 --> 00:17.890
Sólo para refrescar, podemos definir

00:17.890 --> 00:20.090
el tipo de una función, por ejemplo, con

00:20.090 --> 00:23.305
un tipo personalizado con la palabra clave type.

00:23.305 --> 00:26.380
AddFn para la función de adición que entonces podría

00:26.380 --> 00:29.350
contener una definición de función como esta.

00:29.350 --> 00:30.830
Debe devolver un número

00:30.830 --> 00:32.370
y debe tomar dos argumentos

00:32.370 --> 00:35.970
donde cada argumento también es de tipo número.

00:35.970 --> 00:39.310
Ahora, podríamos crear una nueva función add aquí que

00:39.310 --> 00:42.860
es de tipo AddFn y cuando no la inicializamos sino que asignamos

00:42.860 --> 00:45.040
nuestra función más tarde, entonces

00:45.040 --> 00:46.580
por supuesto, tenemos que

00:46.580 --> 00:49.470
asegurarnos de que esta función toma dos argumentos

00:49.470 --> 00:51.300
que son de tipo número y que allí,

00:51.300 --> 00:55.170
también devolvemos un número.

00:55.170 --> 00:56.360
Esto es algo que podemos hacer.

00:56.360 --> 00:57.843
Esto es lo que ya has aprendido.

00:57.843 --> 01:01.760
Ahora, también puede utilizar una interfaz como alternativa a este

01:01.760 --> 01:03.077
tipo personalizado.

01:03.077 --> 01:06.860
Las interfaces están ahí para definir la estructura de un objeto como

01:06.860 --> 01:08.240
te enseñé pero al final, las

01:08.240 --> 01:10.220
funciones son sólo objetos y por lo

01:10.220 --> 01:12.720
tanto esto es una pequeña excepción.

01:12.720 --> 01:15.350
Se pueden crear tipos de función con interfaces.

01:15.350 --> 01:18.930
Para ello crea una interfaz, llámala AddFn para seguir

01:18.930 --> 01:20.930
manteniendo ese nombre aquí.

01:20.930 --> 01:23.720
Y ahora ahí, defines el trozo de función

01:23.720 --> 01:28.300
simplemente añadiendo paréntesis con tus argumentos, a: número,

01:28.300 --> 01:31.150
B:número, por ejemplo, y luego dos puntos,

01:31.150 --> 01:33.980
no una flecha sino dos puntos aquí con

01:33.980 --> 01:36.810
el tipo de retorno.

01:36.810 --> 01:39.780
Así que al final, como definirías un método como lo estamos

01:39.780 --> 01:41.630
haciendo aquí con greet, con la excepción

01:41.630 --> 01:45.710
de que ahora no estamos añadiendo un nombre de método.

01:45.710 --> 01:47.880
Así que tenemos una función anónima

01:47.880 --> 01:49.300
si quieres llamarla

01:49.300 --> 01:52.000
así en la interfaz AddFn y TypeScript

01:52.000 --> 01:55.250
entiende esta sintaxis especial de esta función

01:55.250 --> 01:57.800
anónima en su interfaz y entiende que

01:57.800 --> 02:02.070
quieres usar esta interfaz como un tipo de función y así es

02:02.070 --> 02:05.360
como debe ser tu función.

02:05.360 --> 02:07.650
Así que ahora podemos usar AddFn aquí y,

02:07.650 --> 02:10.440
de hecho, si tratara de aceptar una cadena aquí,

02:10.440 --> 02:11.640
obtendríamos un error

02:11.640 --> 02:13.786
porque esto no es asignable, necesitamos

02:13.786 --> 02:17.060
tener un número en lugar de una cadena.

02:17.060 --> 02:19.670
Así que es simplemente una alternativa a este tipo personalizado.

02:19.670 --> 02:23.010
Por supuesto, aquí yo argumentaría que usar el tipo personalizado

02:23.010 --> 02:25.020
es probablemente un poco más común, también

02:25.020 --> 02:26.470
es un poco más corto pero es una

02:26.470 --> 02:28.340
buena sintaxis alternativa a tener en

02:28.340 --> 02:30.870
cuenta, especialmente si te encuentras con esto en

02:30.870 --> 02:34.030
algún proyecto y estás perdido de lo que significa, este extraño

02:34.030 --> 02:35.265
método anónimo.

02:35.265 --> 02:38.993
Bueno, al final es sólo un tipo de función personalizada.
