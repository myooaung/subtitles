WEBVTT

00:02.310 --> 00:03.143
Instruktor: W tym celu wracam

00:03.143 --> 00:05.860
do ogólnej konfiguracji projektu, nad którą pracowaliśmy wcześniej.

00:05.860 --> 00:10.940
Znajdziecie ją załączoną w indeksie. plik html oraz aplikację.

00:10.940 --> 00:10.940
plik ts.

00:10.940 --> 00:15.410
A w nim chcę zanurzyć się od razu z typami skrzyżowań.

00:15.410 --> 00:19.570
Typy skrzyżowań pozwalają nam na łączenie innych typów.

00:19.570 --> 00:23.280
Powiedzmy, że mamy typ admin, który jest typem obiektu,

00:23.280 --> 00:25.430
więc znowu, to nie jest tworzenie

00:25.430 --> 00:28.170
obiektu tutaj, definiujemy typ, więc po

00:28.170 --> 00:30.340
prostu definiuję definicję typu

00:31.200 --> 00:35.560
tutaj i admin powinien mieć nazwę, która jest łańcuchem, powiedzmy,

00:35.560 --> 00:38.230
i admin powinien również mieć przywileje,

00:39.910 --> 00:44.370
a to powinno być tablicą łańcuchów, na przykład.

00:44.370 --> 00:47.010
Teraz mogliśmy to stworzyć za pomocą

00:47.010 --> 00:48.950
interfejsu, ale tutaj robię

00:49.810 --> 00:54.470
to za pomocą typu i teraz mam inny typ, ogólny typ pracownika,

00:54.470 --> 00:59.130
powiedzmy, i tam mam również nazwę, string.

00:59.130 --> 01:02.890
Nie mam przywilejów, ale mam datę rozpoczęcia.

01:02.890 --> 01:04.380
To może być typu data.

01:04.380 --> 01:07.350
Nie widzieliśmy tego wcześniej, ale data jest typem, który

01:07.350 --> 01:10.340
jest obsługiwany przez skrypt na podstawie obiektu danych,

01:10.340 --> 01:12.163
który jest zbudowany w JavaScript.

01:13.730 --> 01:17.580
Więc teraz chcemy stworzyć tutaj nowy typ, powiedzmy

01:17.580 --> 01:21.120
pracownik podwyższony, który powinien być połączeniem

01:21.120 --> 01:23.900
tych dwóch typów.

01:23.900 --> 01:26.470
Oczywiście moglibyśmy stworzyć go ręcznie,

01:26.470 --> 01:28.770
po prostu definiując typ obiektu, który

01:28.770 --> 01:31.750
ma nazwę, który ma datę rozpoczęcia i który ma uprawnienia,

01:31.750 --> 01:34.120
ale jeśli mamy już te dwa typy, to możemy

01:34.120 --> 01:37.540
też po prostu połączyć to mówiąc admin i, czyli używamy

01:37.540 --> 01:42.000
tutaj symbolu ampersand, pracownik.

01:42.000 --> 01:44.370
A teraz wynikiem jest nowy typ obiektu,

01:44.370 --> 01:46.390
który musi mieć oba.

01:46.390 --> 01:50.470
Więc jeśli mam mojego pracownika, E one, który powinien

01:50.470 --> 01:54.770
być typu elevated employee, to mogę przechowywać tam obiekt,

01:54.770 --> 01:57.440
który musi mieć właściwość name, który

01:57.440 --> 02:00.113
musi mieć właściwość privilege, create

02:02.510 --> 02:08.800
server, i który również musi mieć datę rozpoczęcia z nowymi danymi.

02:08.800 --> 02:10.070
Utwórz nowy obiekt danych,

02:10.070 --> 02:12.700
który po prostu jest bieżącym znacznikiem czasu.

02:12.700 --> 02:15.610
Jest to więc teraz prosty sposób na połączenie dwóch typów.

02:15.610 --> 02:17.740
Teraz powiem, że typy przecięcia

02:17.740 --> 02:21.550
są ściśle związane z dziedziczeniem interfejsów,

02:21.550 --> 02:24.320
ponieważ oczywiście mogliśmy osiągnąć

02:24.320 --> 02:28.590
to samo tutaj, używając interfejsu admin, a następnie

02:29.620 --> 02:34.700
interfejsu employee, a następnie mogliśmy również użyć typu przecięcia

02:34.700 --> 02:38.853
na tych interfejsach lub tworzymy trzeci interfejs,

02:40.100 --> 02:44.040
elevated employee, który rozszerza pracownika

02:47.230 --> 02:50.653
i admina.

02:52.700 --> 02:54.520
Dlatego gdybym teraz to skomentował,

02:54.520 --> 02:56.830
mielibyśmy dokładnie taki sam efekt.

02:56.830 --> 02:58.550
Teraz, prawdopodobnie, jest to trochę więcej kodu.

02:58.550 --> 03:01.750
Jeden z powodów, dla których być może wolelibyśmy używać

03:01.750 --> 03:04.280
typów tutaj zamiast interfejsów, ale relacja

03:04.280 --> 03:06.300
zdecydowanie jest bardzo bliska i mógłbyś

03:06.300 --> 03:09.770
absolutnie użyć interfejsów dla tego przykładu.

03:09.770 --> 03:13.040
Warto jednak zauważyć, że chociaż typy przecięcia mogą być

03:13.040 --> 03:15.600
szczególnie przydatne, gdy są używane w połączeniu

03:15.600 --> 03:18.240
z typami obiektów, tak jak robimy to tutaj, możesz

03:18.240 --> 03:20.910
używać ich z dowolnymi typami.

03:20.910 --> 03:22.683
Gdybyśmy więc mieli jakiś inny

03:23.655 --> 03:28.450
typ, powiedzmy combinable, który jest albo łańcuchem albo liczbą, więc mamy

03:28.450 --> 03:29.940
tutaj typ union z bazowymi

03:29.940 --> 03:32.380
typami string lub number, a następnie

03:32.380 --> 03:34.770
mieliśmy tutaj typ numeric, który jest

03:34.770 --> 03:38.660
albo liczbą albo boolean, cóż, moglibyśmy mieć nasz, powiedzmy,

03:38.660 --> 03:43.660
typ uniwersalny tutaj poprzez przecięcie combinable z numeric i w końcu, typy

03:43.730 --> 03:49.800
mogłyby wtedy zobaczyć, że universal oczywiście jest typu number, ponieważ jest to jedyne przecięcie,

03:49.800 --> 03:51.950
które mamy tutaj, ale gdybyśmy mieli

03:51.950 --> 03:56.520
więcej przecięć, wtedy byłby to typ, który jest przypisany do uniwersalnego,

03:56.520 --> 04:04.940
więc mógłby to być również typ union, który jest przecięciem tych dwóch typów union.

04:04.940 --> 04:07.800
Tak więc operator przecięcia może być używany

04:07.800 --> 04:11.790
z dowolnymi typami, a następnie po prostu buduje przecięcie

04:11.790 --> 04:12.980
tych typów.

04:12.980 --> 04:14.330
W przypadku typu związkowego

04:14.330 --> 04:17.300
jest to w zasadzie typy, które mają wspólne.

04:17.300 --> 04:18.890
W przypadku typów obiektów

04:18.890 --> 04:22.220
jest to po prostu kombinacja tych właściwości obiektów,

04:22.220 --> 04:23.510
że tak powiem.

04:23.510 --> 04:25.960
Są to więc typy skrzyżowań.

04:25.960 --> 04:27.360
Może być czasem przydatny.

04:27.360 --> 04:29.050
Nie będziesz ich używać przez

04:29.050 --> 04:31.570
cały czas, ale na pewno możesz napotkać sytuacje,

04:31.570 --> 04:35.010
w których możesz wyrazić coś w prostszy lub krótszy sposób,

04:35.010 --> 04:37.230
używając typów przecięcia.

04:37.230 --> 04:39.520
Teraz tylko, aby udowodnić, że to wszystko działa,

04:39.520 --> 04:42.050
pozwól mi otworzyć nową kartę tutaj w moim terminalu

04:42.050 --> 04:45.390
i uruchomić TSC dash W, aby uruchomić tryb zegarka, tak, że nie muszę

04:45.390 --> 04:47.770
tylko wejść do serwera na żywo, ale faktycznie

04:47.770 --> 04:49.850
również zbudować mój kod.

04:49.850 --> 04:51.210
Teraz, jeśli przeładuję raz

04:51.210 --> 04:53.200
tutaj, widzimy, że działa to bez błędów

04:53.200 --> 04:55.443
i również kompiluje się bez błędów.
