WEBVTT

00:02.200 --> 00:03.970
Instruktor: Teraz to już wszystko w tym module.

00:03.970 --> 00:06.080
Oczywiście nowoczesny JavaScript ma również

00:06.080 --> 00:07.790
kilka innych zgrabnych cech.

00:07.790 --> 00:09.810
Na przykład, w module klasy pokryję

00:09.810 --> 00:11.120
klasy i ogólnie nie

00:11.120 --> 00:13.470
jest to kurs JavaScript.

00:13.470 --> 00:16.540
Nie chcę cię zanudzać tonami wiedzy o JavaScript,

00:16.540 --> 00:20.140
które tak naprawdę nie odnoszą się do TypeScript.

00:20.140 --> 00:22.700
Chciałem wspomnieć o tych konkretnych funkcjach,

00:22.700 --> 00:24.650
ponieważ dobrze jest wiedzieć, że TypeScript

00:24.650 --> 00:28.210
pomaga nam używać tych funkcji w sposób, który nadal działa w starszych

00:28.210 --> 00:29.580
przeglądarkach.

00:29.580 --> 00:32.920
Bo to jest coś, czego nigdy nie wolno zapomnieć.

00:32.920 --> 00:35.600
Twój kod zostaje skompilowany.

00:35.600 --> 00:38.690
Obecnie mam cel ustawiony na ES6 i dlatego jeśli

00:38.690 --> 00:41.540
sprawdzimy folder dist, widzimy stałe

00:41.540 --> 00:44.280
na są wszystkie dostępne również w pliku

00:44.280 --> 00:46.030
JS aplikacji.

00:46.030 --> 00:48.070
Object de structuring, jest sposób

00:48.070 --> 00:50.600
na polubienie tego tam, ponieważ wszystkie

00:50.600 --> 00:52.480
te funkcje są obsługiwane w ES6.

00:52.480 --> 00:55.230
Jeśli ustawiłbym cel na ES5 i wykomentowałbym

00:55.230 --> 00:56.590
lib teraz, aby poprawne

00:56.590 --> 00:58.680
libs zostały zaimportowane dla celu

00:58.680 --> 01:00.930
ES5, co stanie się domyślnie, zobaczysz,

01:00.930 --> 01:05.290
że wygenerowany kod wygląda teraz całkiem inaczej.

01:05.290 --> 01:08.140
Jest o wiele dłuższy, ponieważ teraz używamy var

01:08.140 --> 01:09.810
i TypeScript musiał znaleźć

01:09.810 --> 01:12.960
obejścia dla niektórych składni, które nie są obsługiwane

01:12.960 --> 01:14.730
w ES5 JavaScript.

01:14.730 --> 01:18.240
Na przykład usunięto składnię de structuring.

01:18.240 --> 01:21.140
Jest to więc ważna rzecz, o której zawsze należy pamiętać.

01:21.140 --> 01:23.490
TypeScript kompiluje twój kod, nie

01:23.490 --> 01:26.440
tylko z funkcji tylko TypeScript do zwykłego

01:26.440 --> 01:29.210
JavaScript, ale wszystkie z nowoczesnego

01:29.210 --> 01:33.000
JavaScript do starego JavaScript, jeśli powiesz TypeScriptowi,

01:33.000 --> 01:35.433
aby to zrobił.
