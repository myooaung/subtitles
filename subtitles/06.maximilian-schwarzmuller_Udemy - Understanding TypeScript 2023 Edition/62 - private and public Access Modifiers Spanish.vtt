WEBVTT

00:02.040 --> 00:04.180
Profesor: Así que esa era una clase muy básica.

00:04.180 --> 00:05.930
Ahora bien, cuando se construyen

00:05.930 --> 00:08.400
clases, a menudo son más complejas que eso.

00:08.400 --> 00:10.800
Y es posible que quieras almacenar más datos allí.

00:10.800 --> 00:15.160
Digamos que un departamento debe tener todos los empleados.

00:15.160 --> 00:18.160
Podría ser un array, e inicialmente podría

00:18.160 --> 00:20.290
ser un array vacío.

00:20.290 --> 00:23.520
Y para ser también un poco más preciso sobre lo que quieres

00:23.520 --> 00:24.980
almacenar allí, podría ser

00:24.980 --> 00:28.800
un array de cadenas para mantenerlo relativamente simple.

00:28.800 --> 00:31.733
Ahora podríamos tener un método aquí addEmployee.

00:33.030 --> 00:36.880
Ahí queremos un empleado como argumento, que en nuestro ejemplo

00:36.880 --> 00:39.430
debería ser simplemente una cadena.

00:39.430 --> 00:42.650
Entonces podemos establecer esto. empleados. empuje.

00:42.650 --> 00:47.320
Así que empujar un nuevo empleado en nuestra matriz de los empleados con

00:47.320 --> 00:48.373
este código.

00:50.750 --> 00:52.683
Ahora también podemos añadir otro método,

00:53.666 --> 00:55.749
printEmployeeInformation.

01:00.508 --> 01:05.508
Y ahí quiero consolar. log(this. empleados. longitud) y también

01:07.766 --> 01:12.766
quiero consolar. log(this. empleados).

01:15.510 --> 01:18.480
Ahora bien, si bajamos aquí, ahora podemos comentar este

01:18.480 --> 01:20.560
código aquí, que se rompería de nuevo porque

01:20.560 --> 01:24.070
de nuevo no encajamos la descripción del departamento con nuestro

01:24.070 --> 01:25.870
objeto allí abajo.

01:25.870 --> 01:29.200
Y en cambio aquí, en este departamento de contabilidad,

01:29.200 --> 01:32.234
podemos añadir un empleado, digamos Max.

01:32.234 --> 01:35.400
Y otro empleado, digamos Manu.

01:35.400 --> 01:37.690
Y además de describirlo, también quiero

01:37.690 --> 01:41.520
poner la información de mis empleados ahí abajo.

01:41.520 --> 01:44.600
Si guardamos esto, deberíamos obtener esta

01:44.600 --> 01:47.830
salida, dos empleados y esta información.

01:47.830 --> 01:50.240
Eso sí que es bueno tenerlo todo.

01:50.240 --> 01:52.700
Un problema que tenemos con esta clase es que

01:52.700 --> 01:55.960
podríamos cambiar de empleado desde fuera, no sólo con

01:55.960 --> 01:58.160
add employee, sino accediendo directamente

01:58.160 --> 02:01.710
a la propiedad del empleado, al igual que podemos hacerlo para

02:01.710 --> 02:04.430
el nombre también, por cierto.

02:04.430 --> 02:07.630
Así que lo que quiero decir es que también podríamos

02:07.630 --> 02:10.560
ir a la contabilidad, y luego llegar a los empleados,

02:10.560 --> 02:13.870
y tal vez añadir otro empleado en el índice dos, y allí

02:13.870 --> 02:16.400
pasar un Anna, así.

02:16.400 --> 02:18.210
Si lo hacemos y nos lo ahorramos, tendremos

02:18.210 --> 02:20.290
tres empleados y nos llevaremos a Anna.

02:20.290 --> 02:22.710
Ahora podrías pensar, bueno, genial, tenemos otra forma.

02:22.710 --> 02:25.230
Sin embargo, cuando se construyen aplicaciones más

02:25.230 --> 02:27.980
complejas, normalmente se quiere evitar algo así.

02:27.980 --> 02:30.930
Quieres asegurarte de que hay un camino claro,

02:30.930 --> 02:34.870
una forma de usar tu clase, y que cosas como esa, formas alternativas

02:34.870 --> 02:38.530
de usarla, no están realmente soportadas.

02:38.530 --> 02:41.230
Porque si trabajas en un equipo más grande,

02:41.230 --> 02:42.920
entonces un colega va a usar

02:42.920 --> 02:45.700
este enfoque para agregar un empleado y otro

02:45.700 --> 02:48.050
colega podría usar este enfoque.

02:48.050 --> 02:49.280
Y tú no quieres esto.

02:49.280 --> 02:52.640
Se quiere tener una manera uniforme de hacer esto.

02:52.640 --> 02:55.960
Además, porque quizás en el método de añadir empleado,

02:55.960 --> 02:58.420
se hace algo más que añadirlo al array.

02:58.420 --> 02:59.770
Tal vez, en primer lugar,

02:59.770 --> 03:02.400
quieras tener alguna validación, etc., aquí.

03:02.400 --> 03:04.940
Así que puede que tengas código extra ahí,

03:04.940 --> 03:06.610
que simplemente no se ejecuta

03:06.610 --> 03:09.470
si asignas directamente un nuevo valor o añades

03:09.470 --> 03:12.970
un nuevo valor al array con esta línea de aquí.

03:12.970 --> 03:16.000
Así que no quieres permitir que los empleados

03:16.000 --> 03:19.884
sean accesibles así desde fuera de la clase.

03:19.884 --> 03:22.340
Y TypeScript te tiene cubierto.

03:22.340 --> 03:26.760
Puedes convertir a los empleados aquí en una propiedad privada,

03:26.760 --> 03:30.580
un campo privado añadiendo una palabra clave privada

03:30.580 --> 03:32.220
delante de él.

03:32.220 --> 03:34.303
Ahora lo que significa private es

03:34.303 --> 03:38.030
que los empleados son ahora una propiedad, que sólo es accesible

03:38.030 --> 03:41.210
desde el interior de la clase, por lo que desde el interior

03:41.210 --> 03:43.480
del objeto creativo.

03:43.480 --> 03:46.700
Así que cualquier método dentro de la clase departamento

03:46.700 --> 03:49.770
es capaz de seguir trabajando con los empleados.

03:49.770 --> 03:52.570
Pero ya no se puede acceder así.

03:52.570 --> 03:54.710
Aquí ves que ahora me sale un error.

03:54.710 --> 03:57.280
Si intento guardar esto, me da un error de compilación

03:57.280 --> 03:59.870
de que la propiedad 'empleados' es privada y

03:59.870 --> 04:03.550
sólo accesible dentro de la clase 'departamento'.

04:03.550 --> 04:07.100
Así que ahora forzamos que cuando los empleados deben

04:07.100 --> 04:09.370
ser añadidos a este departamento,

04:09.370 --> 04:12.690
la gente tiene que usar el método addEmployee.

04:12.690 --> 04:16.760
Porque reciben un error si escriben un código como este.

04:16.760 --> 04:20.460
Este es el llamado modificador aquí, la palabra clave privada.

04:20.460 --> 04:23.470
Y además de la privada, también tenemos la pública, que

04:23.470 --> 04:25.000
es la que viene por defecto.

04:25.000 --> 04:26.590
No es necesario añadir público.

04:26.590 --> 04:29.590
Por lo tanto, un nombre así es exactamente igual que

04:29.590 --> 04:31.650
un nombre con "public" delante.

04:31.650 --> 04:34.300
La diferencia es que las propiedades públicas

04:34.300 --> 04:36.350
son accesibles desde el exterior.

04:36.350 --> 04:40.350
Así que, por ejemplo, aquí también podría llegar a nombrar

04:40.350 --> 04:43.600
y asignar un nuevo nombre aquí si quisiera.

04:43.600 --> 04:45.260
Eso es posible.

04:45.260 --> 04:49.270
En el caso de las propiedades privadas, esto no es posible.

04:49.270 --> 04:51.580
Sólo podemos utilizarlos desde dentro.

04:51.580 --> 04:52.800
Técnicamente, por cierto,

04:52.800 --> 04:55.700
JavaScript no conoce lo público y lo privado.

04:55.700 --> 04:59.630
Sólo en versiones muy modernas añadidas recientemente

04:59.630 --> 05:01.320
existe tal cosa.

05:01.320 --> 05:03.650
En el pasado, JavaScript no conocía las propiedades

05:03.650 --> 05:05.690
privadas o públicas.

05:05.690 --> 05:08.520
Todas las propiedades siempre fueron públicas allí.

05:08.520 --> 05:10.630
TypeScript introduce esta característica,

05:10.630 --> 05:13.561
que por supuesto no funciona durante el tiempo de ejecución

05:13.561 --> 05:16.620
sin embargo, porque JavaScript hasta hace poco sólo conocía

05:16.620 --> 05:18.780
las propiedades públicas.

05:18.780 --> 05:21.290
Así que esta línea aquí, error congelado durante

05:21.290 --> 05:23.130
la compilación de TypeScript.

05:23.130 --> 05:27.000
Sin embargo, si lo compila en JavaScript, este código se ejecutará

05:27.000 --> 05:30.140
en tiempo de ejecución sin errores porque, de nuevo,

05:30.140 --> 05:32.800
JavaScript por sí mismo, hasta hace poco no

05:32.800 --> 05:34.900
conocía este concepto.

05:34.900 --> 05:37.350
Así que dependiendo de la versión para la que estés compilando,

05:37.350 --> 05:38.720
todavía no lo sabrá.

05:38.720 --> 05:40.770
Y por lo tanto, TypeScript sólo lo soporta

05:40.770 --> 05:42.980
porque lo comprueba durante la compilación,

05:42.980 --> 05:44.650
no en tiempo de ejecución.

05:44.650 --> 05:47.370
Sin embargo, con ella podemos evitar código como éste

05:47.370 --> 05:49.863
y obligar a todos a escribir un código más limpio.
