WEBVTT

00:02.300 --> 00:03.420
Tutor: Um zu beginnen,

00:03.420 --> 00:07.060
führe ich hier npm start aus, um den Entwicklungsserver zu starten.

00:07.060 --> 00:09.384
Das dient der HTML-Datei und der Registerkarte

00:09.384 --> 00:13.434
Menü, tsc-w, um Kompilierungsarten im Überwachungsmodus zu starten,

00:13.434 --> 00:17.988
so dass unsere App-JavaScript-Datei kontinuierlich neu erstellt wird und

00:17.988 --> 00:21.740
wir sie in der laufenden Anwendung sehen können.

00:21.740 --> 00:24.480
Im Moment sieht unsere Anwendung natürlich noch nicht besonders schick aus.

00:24.480 --> 00:26.340
Es ist eine leere Seite.

00:26.340 --> 00:27.850
Für den Anfang gibt es also

00:27.850 --> 00:30.250
viele Möglichkeiten, dies zu tun.

00:30.250 --> 00:35.040
Nun möchte ich damit beginnen, dieses Formular sichtbar zu machen.

00:35.040 --> 00:36.660
Und jetzt gibt es viele Möglichkeiten, ich

00:36.660 --> 00:38.790
werde diese Anwendung tatsächlich in einem objektorientierten

00:38.790 --> 00:40.208
Ansatz schreiben.

00:40.208 --> 00:43.303
Das ist zu 100 % optional, aber da wir etwas über Klassen

00:43.303 --> 00:46.080
und so weiter gelernt haben, möchte ich zeigen,

00:46.080 --> 00:48.083
wie das funktioniert, und deshalb

00:48.083 --> 00:51.140
werde ich diesen Ansatz verwenden.

00:51.140 --> 00:51.973
Im App-Key füge

00:51.973 --> 00:55.510
ich also eine neue Klasse hinzu und nenne sie Project Input, wobei

00:55.510 --> 00:59.120
der Name der Klasse natürlich ganz Ihnen überlassen bleibt.

00:59.120 --> 01:00.570
In dieser Klasse muss unser

01:00.570 --> 01:04.590
Ziel sein, Zugriff auf diese Vorlage und das Formular darin zu erhalten

01:04.590 --> 01:08.220
und Zugriff auf dieses div hier zu erhalten, um dann am Ende

01:08.220 --> 01:11.710
unsere Vorlage in diesem div darzustellen.

01:11.710 --> 01:15.160
Also der Inhalt der Vorlage, das Formular in diesem div.

01:15.160 --> 01:17.130
Das muss unser Ziel sein.

01:17.130 --> 01:18.850
Um dies zu erreichen, füge ich

01:18.850 --> 01:20.588
hier in Project Input einen Konstruktor

01:20.588 --> 01:23.450
hinzu, mit dem ich am Ende Zugriff auf meine Vorlage

01:23.450 --> 01:25.920
und den Ort, an dem sie gerendert werden soll,

01:25.920 --> 01:27.970
erhalten möchte.

01:28.830 --> 01:33.310
Und hier füge ich gleich zwei Eigenschaften hinzu: die

01:33.310 --> 01:37.460
Eigenschaft des Vorlagenelements und die Eigenschaft

01:37.460 --> 01:40.180
des Host-Elements.

01:40.180 --> 01:42.420
Die Namen sind zu 100 % Ihnen überlassen.

01:42.420 --> 01:44.990
Am Ende ist meine Idee, dass Host-Element, hält

01:44.990 --> 01:46.970
einen Verweis auf das Element, wo ich

01:46.970 --> 01:49.650
will meine Vorlage Inhalt am Ende und gut, Template-Element

01:49.650 --> 01:51.427
gibt mir Zugriff auf die Vorlage,

01:51.427 --> 01:54.050
die diesen Inhalt enthält.

01:54.050 --> 01:56.120
Um nun Zugang zu dieser Vorlage zu erhalten,

01:56.120 --> 01:59.690
schauen wir uns index html an und sehen, wie wir die Vorlage identifizieren

01:59.690 --> 02:01.870
können, die das Formular enthält.

02:01.870 --> 02:04.050
Nun, es hat diese Projekt-Input-ID, also sieht

02:04.050 --> 02:06.120
das nach einer guten Strategie aus.

02:06.120 --> 02:08.510
Hier können wir also das Dokument getElementById

02:08.510 --> 02:11.022
project-input verwenden.

02:11.022 --> 02:15.410
Dadurch erhalten wir Zugang zu diesem Vorlagenelement.

02:15.410 --> 02:17.820
Nun noch ein paar wichtige Dinge.

02:17.820 --> 02:21.320
Hier erhalten wir eine Fehlermeldung, die besagt, dass das Vorlagenelement eine Eigenschaft

02:21.320 --> 02:23.900
ist, die bei project-input nicht vorhanden ist.

02:23.900 --> 02:28.140
Um dies loszuwerden, sollten wir es als neues Feld

02:28.140 --> 02:31.610
direkt in der Klasse hinzufügen.

02:31.610 --> 02:34.050
Dann können wir sie sicher zuordnen.

02:34.050 --> 02:36.040
Hier möchte ich auch klarstellen, welche Art von Daten

02:36.040 --> 02:37.450
dort gespeichert werden soll.

02:37.450 --> 02:41.070
Und das wird ein HTML-Vorlagenelement sein.

02:41.070 --> 02:43.270
Dieser Typ ist global verfügbar,

02:43.270 --> 02:47.380
da ich in der Datei tsconfig js das DOM als Lib hinzugefügt habe,

02:47.380 --> 02:50.360
und das fügt alle diese DOM-Typen, alle diese

02:50.360 --> 02:53.777
HTML-Elementtypen als Typescript-Typen zum gesamten

02:53.777 --> 02:55.493
Projekt hinzu.

02:57.280 --> 03:00.400
Dies führt zu einem neuen Fehler, aber Sie sehen, dass dies

03:00.400 --> 03:03.110
am Ende null sein könnte, wenn wir das Element über

03:03.110 --> 03:04.760
die ID erhalten. Natürlich wissen

03:04.760 --> 03:08.510
wir, dass es nicht scheitern wird, aber Typescript hat keine Chance,

03:08.510 --> 03:09.850
dies zu wissen, weil es unsere

03:09.850 --> 03:12.757
HTML-Datei nicht analysieren wird.

03:12.757 --> 03:16.210
Möglicherweise gibt es also kein Element mit dieser ID, und deshalb

03:16.210 --> 03:18.210
würde das Ergebnis null sein.

03:18.210 --> 03:20.680
Hier sagen wir, dass wir dort keine Null speichern,

03:20.680 --> 03:23.920
sondern nur ein HTML-Vorlagenelement.

03:23.920 --> 03:25.800
Um diese Gefahr auszuschalten, müssen

03:25.800 --> 03:29.470
wir typescript mitteilen, dass dies niemals null sein wird.

03:29.470 --> 03:31.290
Und wissen Sie, wie Sie das machen können?

03:31.290 --> 03:33.580
Sie können hier ein Ausrufezeichen hinzufügen.

03:33.580 --> 03:35.020
Eine Alternative ist

03:35.020 --> 03:36.170
natürlich, um das

03:36.170 --> 03:37.820
auch zu zeigen, wenn man sich

03:37.820 --> 03:41.640
nicht sicher ist, es als, sagen wir, Konstante zu speichern

03:41.640 --> 03:48.600
und dann zu prüfen, ob das Template-Element wahr ist, also ob es nicht null ist, und es dann innerhalb dieser

03:48.600 --> 03:51.490
if-Prüfung hier zu speichern.

03:51.490 --> 03:52.720
Jetzt erhalten wir immer noch eine

03:52.720 --> 03:54.190
Fehlermeldung, aber das wird ein anderer

03:54.190 --> 03:55.840
Fehler sein, auf den ich später zurückkomme.

03:55.840 --> 03:58.060
Wenn wir uns nicht sicher sind, würde dies

03:58.060 --> 03:59.650
für den Moment genügen.

03:59.650 --> 04:01.930
Aber hier bin ich mir sicher.

04:01.930 --> 04:02.763
Übrigens, wenn Sie sich nicht

04:02.763 --> 04:03.596
sicher sind, sollten Sie für

04:03.596 --> 04:06.000
den anderen Fall natürlich eine Ausweichmöglichkeit vorsehen.

04:06.000 --> 04:08.530
Aber hier bin ich mir sicher, dass wir ein solches Element erhalten

04:08.530 --> 04:10.544
werden, und deshalb können wir einfach ein Ausrufezeichen

04:10.544 --> 04:11.803
anfügen, um der Schrift mitzuteilen:

04:11.803 --> 04:13.710
"Alles gut.

04:13.710 --> 04:17.300
Wir erhalten Zugriff auf ein Element mit dieser ID. Wie ich bereits erwähnt habe, gibt es aber noch einen weiteren

04:17.300 --> 04:18.133
Fehler.

04:18.133 --> 04:20.220
Im HTML-Element des Typs fehlt der Inhalt der Eigenschaft.

04:20.220 --> 04:24.270
Das Problem hier ist, dass wir typescript mitteilen, dass wir

04:24.270 --> 04:27.140
ein Template-Element speichern werden, das

04:27.140 --> 04:29.550
vom Typ html template element ist.

04:29.550 --> 04:32.160
Und das wird in der Tat der Fall sein.

04:32.160 --> 04:34.800
Jetzt weiß getElementById natürlich nicht,

04:34.800 --> 04:38.730
welches Element es letztendlich zurückgeben wird.

04:38.730 --> 04:41.130
Es weiß nur, dass es sich um ein Html-Element handelt,

04:41.130 --> 04:43.920
aber nicht, um welche spezielle Version es sich handelt.

04:43.920 --> 04:46.600
Ob es sich um ein div, einen Absatz, eine Schaltfläche oder wie

04:46.600 --> 04:48.720
in diesem Fall ein Template-Element handelt.

04:48.720 --> 04:51.387
getElementById hat keine Chance, das zu wissen.

04:51.387 --> 04:54.590
Also, um die Schrift über den Typ zu erzählen, den

04:54.590 --> 04:57.460
wir natürlich auch mit Sicherheit kennen.

04:57.460 --> 05:00.660
Wir können Type Casting verwenden.

05:00.660 --> 05:02.260
Sie haben auch davon erfahren.

05:02.260 --> 05:03.730
Es gibt zwei Syntaxen, die Sie verwenden können.

05:03.730 --> 05:05.950
Die spitzen Klammern am Anfang und

05:05.950 --> 05:07.690
dann der Typ, in den Sie dies

05:07.690 --> 05:10.130
umwandeln wollen, mit dem Sie typeScript

05:10.130 --> 05:11.847
mitteilen: "Hey!

05:11.847 --> 05:12.700
Die Sache, der Ausdruck,

05:12.700 --> 05:15.840
der hiernach kommt, wird von dieser Art sein. Oder Sie fügen es als HTML-Vorlagenelement ein, was ich

05:15.840 --> 05:17.650
in diesem Fall verwenden würde.

05:17.650 --> 05:21.200
Und damit garantieren Sie typescript, dass das,

05:21.200 --> 05:23.040
was Sie hier abrufen, nicht

05:23.040 --> 05:25.700
null ist und von diesem Typ ist.

05:25.700 --> 05:27.950
Es wird viel darüber geredet, aber es ist eine gewöhnliche Aufgabe,

05:30.027 --> 05:30.860
und es ist wichtig, dies

05:30.860 --> 05:32.016
richtig zu machen.

05:32.016 --> 05:33.630
Fahren wir nun mit dem Host-Element fort.

05:33.630 --> 05:35.563
Hier sollten wir auch das Host-Element

05:36.890 --> 05:39.360
als Feld hinzufügen, und wir wissen, dass

05:39.360 --> 05:43.350
das Host-Element, wenn wir unsere Projekteingabe rendern wollen,

05:43.350 --> 05:45.960
am Ende dieses div hier sein wird.

05:45.960 --> 05:48.560
Das ist der Ort, an dem ich mein Formular erstellen möchte.

05:48.560 --> 05:51.410
Hier können wir also sagen: HTML div-Element.

05:51.410 --> 05:54.000
Das ist die Art von Element, dem wir dies hinzufügen werden.

05:54.000 --> 05:57.730
Wir könnten auch etwas weniger spezifisch sein und einfach HTML-Element

05:57.730 --> 06:00.260
sagen, denn hier ist es mir wirklich egal,

06:00.260 --> 06:02.740
ob es ein div ist oder nicht.

06:02.740 --> 06:04.970
Aber da wir es mit Sicherheit wissen,

06:04.970 --> 06:08.400
warum sollten wir es nicht hinzufügen?

06:08.400 --> 06:10.250
Jetzt möchte ich natürlich Zugriff auf das Div

06:10.250 --> 06:11.263
bekommen, wo dies hinzugefügt

06:12.110 --> 06:14.850
werden soll, und wenn wir einen Blick auf den Index werfen. html-Datei sehen wir, dass wir dieses Div wieder über

06:14.850 --> 06:16.530
die ID identifizieren können.

06:16.530 --> 06:18.970
In diesem Fall die App-ID.

06:18.970 --> 06:19.945
Jetzt, zurück in app ts,

06:19.945 --> 06:24.640
können wir document getElementById ein weiteres Mal verwenden und das Element mit der id app ansteuern.

06:24.640 --> 06:28.780
Jetzt haben wir die gleichen Probleme wie zuvor, dies kann null

06:28.780 --> 06:32.920
sein, so müssen wir das Ausrufezeichen hinzufügen, weil wieder,

06:32.920 --> 06:35.112
wir wissen mit Sicherheit, dass

06:35.112 --> 06:39.620
es nicht, und getElementById nicht wissen, dass dies ein HTML-Div-Element

06:39.620 --> 06:42.283
sein wird, so, wir sollten dies hier als

06:43.430 --> 06:46.030
auch Cast.

06:46.030 --> 06:48.150
Und damit können wir jetzt herausfinden, wie

06:48.150 --> 06:51.210
wir Zugang zu allen Elementen bekommen, die wir brauchen.

06:51.210 --> 06:53.990
Nun, das war eine Menge Gerede darüber.

06:53.990 --> 06:56.070
Damit haben wir leider nicht viel erreicht.

06:56.070 --> 06:59.140
Wir haben Zugang zu diesen Elementen,

06:59.140 --> 07:01.970
aber wir geben dort nichts wieder.

07:01.970 --> 07:03.940
Lassen Sie uns also damit fortfahren.

07:03.940 --> 07:05.790
Dazu müssen wir den Inhalt aus diesem Template-Element

07:05.790 --> 07:08.020
importieren, also im Grunde importieren, was innerhalb

07:08.020 --> 07:11.760
der Template-Tags ist und dies in das DOM rendern.

07:11.760 --> 07:15.520
Wir können dies direkt hier im Konstruktor tun, denn meine

07:15.520 --> 07:17.603
Idee und natürlich ist das nur meine

07:18.510 --> 07:20.270
Idee, Sie könnten dies auch

07:20.270 --> 07:21.870
anders einrichten.

07:21.870 --> 07:22.940
Aber meine Idee ist, dass

07:22.940 --> 07:24.550
ich, wenn wir eine neue Instanz dieser

07:24.550 --> 07:26.430
Klasse erstellen, sofort ein Formular rendern

07:26.430 --> 07:28.250
möchte, das zu dieser Instanz gehört.

07:28.250 --> 07:30.190
Wir machen das also direkt im Konstruktor.

07:30.190 --> 07:31.770
Dort können wir unseren importierten

07:31.770 --> 07:34.420
Knoten oder importierten HTML-Inhalt oder wie

07:34.420 --> 07:37.430
auch immer Sie ihn nennen wollen, den wir mit document importNode

07:37.430 --> 07:40.627
erhalten können, und das ist eine Methode, die für das globale

07:40.627 --> 07:44.917
Dokumentobjekt bereitgestellt wird, und an importNode übergeben Sie einen

07:45.860 --> 07:49.260
Zeiger auf Ihr Vorlagenelement.

07:49.260 --> 07:52.650
Also dieses Template-Element am Ende, oder um genau zu sein nicht das Element,

07:52.650 --> 07:54.410
sondern Punktinhalt dort.

07:54.410 --> 07:57.010
Inhalt ist eine Eigenschaft, die bei

07:57.010 --> 08:00.891
HTML-Vorlagenelementen vorhanden ist und einfach

08:00.891 --> 08:05.320
einen Verweis auf den Inhalt einer Vorlage enthält.

08:05.320 --> 08:07.480
Also zum HTML-Code zwischen dem Vorlagentext.

08:07.480 --> 08:09.520
ImportNode nimmt auch ein zweites

08:09.520 --> 08:13.306
Argument entgegen, das angibt, ob es diesen Knoten mit einem tiefen

08:13.306 --> 08:15.670
Klon importieren soll oder nicht.

08:15.670 --> 08:17.940
Also alle Ebenen der Verschachtelung innerhalb der Vorlage, und das will ich

08:17.940 --> 08:19.630
auf jeden Fall machen, also werde ich hier true anbieten.

08:19.630 --> 08:22.570
Nun haben wir den importierten Knoten, und wie Sie sehen

08:22.570 --> 08:26.340
werden, ist dieser vom Typ Dokumentfragment, den typescript automatisch

08:26.340 --> 08:28.830
angenommen oder abgeleitet hat.

08:28.830 --> 08:30.770
Jetzt können wir diesen importierten Knoten

08:30.770 --> 08:34.910
verwenden, und natürlich möchte ich ihn zum Rendern von Inhalten verwenden.

08:34.910 --> 08:36.960
Dazu werde ich eine neue Methode hinzufügen,

08:36.960 --> 08:40.970
eine private Methode, die ich attach nennen werde.

08:40.970 --> 08:42.810
Das ist nicht nötig, ich möchte nur meine

08:42.810 --> 08:45.150
Auswahl- und Rendering-Logik aufteilen.

08:45.150 --> 08:46.390
Innerhalb von attach

08:46.390 --> 08:51.270
werde ich das Host-Element erreichen, also den Ort, an dem ich meinen Inhalt rendern

08:51.270 --> 08:52.820
möchte, und insertAdjacentElement

08:52.820 --> 08:54.930
aufrufen, was eine Standardmethode

08:54.930 --> 08:57.840
ist, die vom Browser am Ende in JavaScript bereitgestellt

08:57.840 --> 09:00.770
wird.

09:00.770 --> 09:02.980
Um das HTML-Element einzufügen, braucht

09:02.980 --> 09:04.340
man zunächst eine Beschreibung,

09:04.340 --> 09:08.778
wo es eingefügt werden soll. Man kann es also nach dem Anfang des Elements

09:08.778 --> 09:13.180
einfügen, auf das man abzielt, also direkt nach dem Eröffnungs-Tag des

09:13.180 --> 09:17.850
Host-Elements, vor dem Anfang oder vor dem Eröffnungs-Tag, vor dem End-Tag

09:17.850 --> 09:20.870
oder nach dem End-Tag.

09:20.870 --> 09:23.570
Und hier werde ich für nach beginnen, um

09:23.570 --> 09:27.020
es direkt am Anfang der Eröffnung Tag einfügen.

09:27.020 --> 09:30.580
Und dann ist das, was ich einfügen möchte, mein

09:30.580 --> 09:33.053
importedNode, aber erstens ist das

09:34.900 --> 09:39.140
eine Konstante, die nur im Konstruktor verfügbar ist, und

09:39.140 --> 09:42.970
zweitens ist das ein Dokumentenfragment.

09:42.970 --> 09:44.630
Wir konnten es so nicht einfügen.

09:44.630 --> 09:46.896
Stattdessen müssen wir Zugriff auf das konkrete HTML-Element

09:46.896 --> 09:48.240
erhalten, das wir in einem anderen Eigenschaftselement

09:48.240 --> 09:49.800
speichern können.

09:49.800 --> 09:52.770
Wir müssen auch ein Feld hinzufügen, das

09:52.770 --> 09:55.560
vom Typ HTML-Element sein kann, oder

09:55.560 --> 09:58.270
in unserem Fall wissen wir, dass es innerhalb

09:58.270 --> 10:02.500
der Vorlage liegt, also ein Formular ist.

10:02.500 --> 10:05.790
Das ist das erste Element der Vorlage.

10:05.790 --> 10:07.010
Hier können wir also sagen,

10:07.010 --> 10:09.470
dass es ein HTML-Formular-Element sein wird,

10:09.470 --> 10:10.960
und dann hier, dieses Element

10:10.960 --> 10:15.200
ist gleich importNode firstElementChild, jetzt müssen wir typescript

10:15.200 --> 10:20.106
nur wieder sagen, dass dies ein HTML-Formular-Element sein wird.

10:20.106 --> 10:22.199
Dieses Element ist nun die konkrete

10:22.199 --> 10:25.510
Eigenschaft, die auf den einzufügenden Knoten zeigt.

10:25.510 --> 10:28.360
In insertAdjacentElement fügen wir

10:28.360 --> 10:31.110
also dieses Element hier ein.

10:31.110 --> 10:33.690
Jetzt müssen wir nur noch sicherstellen,

10:33.690 --> 10:36.350
dass wir hier im Konstruktor am Ende attach,

10:36.350 --> 10:38.460
also diese private attach-Methode,

10:38.460 --> 10:39.950
aufrufen, damit dieser

10:39.950 --> 10:42.260
Code auch ausgeführt wird.

10:42.260 --> 10:44.290
Und so sieht mein Code mit

10:44.290 --> 10:46.620
allen Formatierungen aus.

10:46.620 --> 10:48.200
Das ist jetzt also die Projekteingabeklasse,

10:48.200 --> 10:51.460
und theoretisch sollte sie, wenn wir sie instanziieren, das

10:51.460 --> 10:53.950
Formular darstellen.

10:53.950 --> 10:56.920
Versuchen wir es jetzt.

10:56.920 --> 10:59.440
Unterhalb der Klasse legen wir einfach eine neue Konstante an, z. B.

10:59.440 --> 11:01.120
prjInput, den Namen können Sie frei wählen.

11:01.120 --> 11:05.415
Und rufen Sie das neue Projekt Input so auf.

11:05.415 --> 11:08.930
Wenn wir das nun speichern, sollte es neu kompiliert und

11:08.930 --> 11:11.783
geladen werden, und wenn Sie zum Browser zurückkehren,

11:11.783 --> 11:14.160
sollten Sie tatsächlich das Formular

11:14.160 --> 11:16.050
hier sehen.

11:16.050 --> 11:17.990
Das ist ziemlich toll, denn damit haben

11:17.990 --> 11:20.660
wir einen ersten sehr wichtigen Schritt getan.

11:20.660 --> 11:22.450
Wir haben unsere Form

11:22.450 --> 11:26.930
wiederhergestellt, und auch wenn noch viel fehlt, ist

11:26.930 --> 11:29.150
das besser als nichts.

11:29.150 --> 11:31.630
Dieses Formular stammt aus der Index-HTML-Datei

11:31.630 --> 11:33.010
und wird mit Hilfe unseres

11:33.010 --> 11:36.430
objektorientierten Typescript-Codes dort oben gerendert.
