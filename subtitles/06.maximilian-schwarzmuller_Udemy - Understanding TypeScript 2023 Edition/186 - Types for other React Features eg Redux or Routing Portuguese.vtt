WEBVTT

00:02.100 --> 00:04.390
Instrutor: Agora, claro, em aplicações

00:04.390 --> 00:08.640
React maiores, você trabalha com mais do que apenas usarRef e usarState.

00:08.640 --> 00:10.950
Para entender como você usa o TypeScript ali, é realmente

00:10.950 --> 00:13.460
sempre útil simplesmente pairar sobre as funções que você

00:13.460 --> 00:15.180
está chamando, assim os outros ganchos

00:15.180 --> 00:17.090
com os quais você está trabalhando.

00:17.090 --> 00:20.010
Por exemplo, se você precisar da ferramenta UseEffect

00:20.010 --> 00:22.660
aqui, no componente NewTodo, por qualquer razão,

00:22.660 --> 00:26.330
então, você pode chamá-la e simplesmente pairar sobre ela depois,

00:26.330 --> 00:29.010
para entender com que tipos ela funciona.

00:29.010 --> 00:30.960
Por exemplo, que o primeiro argumento

00:30.960 --> 00:33.720
é um EffectCallback, que é uma função especial, onde

00:33.720 --> 00:37.100
o TypeScript o advertirá se você o configurar incorretamente,

00:37.100 --> 00:38.610
que o segundo argumento não

00:38.610 --> 00:41.480
é nada ou um array de nada, coisas assim, isto sempre o

00:41.480 --> 00:42.997
ajudará, você também aprenderá

00:42.997 --> 00:45.930
que useEffect não retorna nada, por exemplo, e em useState,

00:45.930 --> 00:49.200
onde mencionei que você sempre retorna um array com exatamente

00:49.200 --> 00:52.410
dois elementos, bem, você também vê que aqui, useState retorna

00:52.410 --> 01:01.750
um array, é o que vemos aqui, abrindo e fechando parênteses, onde o primeiro elemento é do seu tipo genérico, então uma lista de Todos, porque este é o seu instantâneo de estado,

01:01.750 --> 01:08.600
o segundo elemento é um React.

01:08.600 --> 01:08.600
A

01:08.600 --> 01:11.370
função de despacho aqui no final, é o que está acontecendo aqui.

01:11.370 --> 01:12.690
Para que isso possa ser útil.

01:12.690 --> 01:15.490
Talvez você também esteja trabalhando com a Redux.

01:15.490 --> 01:19.660
Bem, felizmente, se você mergulhar na documentação deles, você

01:19.660 --> 01:21.360
também encontrará instruções

01:21.360 --> 01:24.530
sobre o uso do Redux com TypeScript.

01:24.530 --> 01:27.430
Aqui, em Receitas você encontra Usage com TypeScript,

01:27.430 --> 01:30.710
e lá, você pode aprender como adicionar tipos a suas ações,

01:30.710 --> 01:33.270
e a seus redutores, e à sua administração

01:33.270 --> 01:35.540
estadual com Redux.

01:35.540 --> 01:38.650
É realmente simples, nada complexo, e acrescenta

01:38.650 --> 01:41.520
muito tipo de segurança ali.

01:41.520 --> 01:43.230
Talvez você também esteja

01:43.230 --> 01:47.110
usando o pacote React Router, este pacote aqui.

01:47.110 --> 01:52.040
Lá, você não encontra notações TypeScript específicas, bem, é claro que você pode instalar

01:52.040 --> 01:54.020
isto em seu projeto, também, com npm

01:54.020 --> 01:55.340
install dash dash dash

01:55.340 --> 01:58.770
poupa dash dash dom do roteador de reações, que é o comando que

01:58.770 --> 02:00.740
você normalmente usaria para instalar

02:00.740 --> 02:03.720
este pacote em seu projeto React.

02:03.720 --> 02:07.000
Portanto, isto acrescentará o pacote de reata-router-dom.

02:07.000 --> 02:10.250
Mas este pacote não tem instruções de tipo especial em sua

02:10.250 --> 02:12.430
página aqui, você não encontra nada específico

02:12.430 --> 02:14.720
para TypeScript aqui, pelo menos no momento

02:14.720 --> 02:17.570
em que estou gravando isto.

02:17.570 --> 02:19.163
No entanto, é claro que também

02:19.163 --> 02:21.250
podemos usar isto em um projeto TypeScript,

02:21.250 --> 02:23.920
e podemos obter um bom suporte de tipo lá.

02:23.920 --> 02:25.800
Agora, com ele instalado, você notará

02:25.800 --> 02:29.360
que, se eu importar de um reator-router-dom, eu realmente não

02:29.360 --> 02:31.880
tenho um grande tipo de suporte lá.

02:31.880 --> 02:33.870
Por exemplo, se eu tentar importar algo

02:33.870 --> 02:36.870
aqui, eu já recebo um aviso, que não conseguiu encontrar uma

02:36.870 --> 02:39.210
declaração para o módulo de reata-router-dom,

02:39.210 --> 02:42.730
de modo que não encontrou nenhum tipo de informação aqui.

02:42.730 --> 02:45.420
Para consertar isso, é claro, podemos fazer algo

02:45.420 --> 02:48.450
que já fizemos antes, npm instalar dash dash dev salvar

02:48.450 --> 02:52.530
dash, em tipos, slash react dash router dash dom, então cancelamos os

02:52.530 --> 02:54.620
tipos de busca aqui, e estamos bem novamente,

02:54.620 --> 02:56.860
este é um truque que você já aprendeu, no

02:56.860 --> 02:59.097
início do curso, mas é claro, não há necessidade

02:59.097 --> 03:03.920
de esquecê-lo, só porque temos um projeto onde muito já funciona com TypeScript out

03:03.920 --> 03:06.790
of the box.

03:06.790 --> 03:08.140
Se depois adicionarmos algo

03:08.140 --> 03:10.810
que não funcione com TypeScript, como este, podemos

03:10.810 --> 03:13.700
adicioná-lo assim, e agora ele está ciente de Route, está

03:13.700 --> 03:15.380
ciente de todas as outras características

03:15.380 --> 03:17.270
deste pacote também.

03:17.270 --> 03:21.070
Portanto, é assim que é fácil acrescentar apoio também para isto.

03:21.070 --> 03:23.560
E é assim que você geralmente deve abordar isto,

03:23.560 --> 03:26.010
dar uma olhada nos documentos oficiais, verificar

03:26.010 --> 03:29.030
se você vê instruções de uso com TypeScript lá, se não,

03:29.030 --> 03:31.590
instalá-lo e ver se ele tem suporte de tipo embutido,

03:31.590 --> 03:33.720
para que você pelo menos tenha um bom suporte

03:33.720 --> 03:39.090
de auto-completar e compilação, e se isso também não existir, instalar um pacote de tipos, como

03:39.090 --> 03:42.080
fizemos aqui.

03:42.080 --> 03:43.980
E é realmente isso para este módulo, e

03:43.980 --> 03:46.410
é assim que você pode utilizar o TypeScript, e todas

03:46.410 --> 03:49.920
as suas incríveis características em um aplicativo React, e é claro,

03:49.920 --> 03:52.450
tudo o que você aprender com este curso, aplica-se

03:52.450 --> 03:54.370
também a um aplicativo React.

03:54.370 --> 03:56.380
Você pode usar todos os recursos do TypeScript

03:56.380 --> 03:59.130
que você aprendeu com este curso, em um projeto React.
