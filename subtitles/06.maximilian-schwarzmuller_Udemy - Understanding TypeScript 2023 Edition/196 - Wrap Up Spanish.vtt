WEBVTT

00:02.320 --> 00:04.290
Profesor: Así que eso es todo para este módulo.

00:04.290 --> 00:05.660
Has aprendido cómo puedes

00:05.660 --> 00:08.480
utilizar typescript en la aplicación node express,

00:08.480 --> 00:11.940
que puedes instalar tipos extra para express y para node por ejemplo,

00:11.940 --> 00:13.230
para conseguir un gran

00:13.230 --> 00:16.320
soporte de typescript en tus archivos.

00:16.320 --> 00:18.570
Que escriba la solicitud como

00:18.570 --> 00:19.990
lo haría siempre.

00:19.990 --> 00:21.790
Pero que, por ejemplo, su sintaxis de

00:21.790 --> 00:23.720
importación y exportación difiere y que,

00:23.720 --> 00:26.120
por supuesto, puede utilizar tipos, y también cualquier

00:26.120 --> 00:29.300
otra característica de typescript que aprenda.

00:29.300 --> 00:31.080
Podrías usar interfaces,

00:31.080 --> 00:33.080
podrías usar decoradores, podrías

00:33.080 --> 00:35.480
usar eNoms y QPUlls y todo lo que es exclusivo

00:35.480 --> 00:37.840
de typescript.

00:37.840 --> 00:39.310
Todo esto funciona aquí,

00:39.310 --> 00:42.650
porque estamos escribiendo una aplicación typescript regular

00:42.650 --> 00:46.070
aquí y se compila con el compilador typescript normal a código

00:46.070 --> 00:48.050
Javascript regular.

00:48.050 --> 00:52.750
Código Javascript que luego se ejecuta con el nodo JS.

00:52.750 --> 00:54.450
Ahora bien, si quieres tener más ejemplos

00:54.450 --> 00:57.720
de cómo trabajar con typescript y node express, puedes, por supuesto,

00:57.720 --> 00:58.910
simplemente buscar en google

00:58.910 --> 01:02.840
node express typescript para encontrar más ejemplos.

01:02.840 --> 01:04.600
Pero también puedo recomendarte

01:04.600 --> 01:06.980
encarecidamente que compruebes NestJS.

01:06.980 --> 01:10.390
Es un nodo. js que adopta typescript mientras

01:10.390 --> 01:13.270
que puedes hacer que node express funcione con typescript,

01:13.270 --> 01:15.310
como has visto a lo largo de este módulo,

01:15.310 --> 01:18.010
este es un marco que te da proyectos, proyectos de

01:18.010 --> 01:21.740
node, con soporte de typescript fuera de la caja.

01:21.740 --> 01:24.490
Y adopta todas estas características de typescript

01:24.490 --> 01:26.960
como los decoradores y demás.

01:26.960 --> 01:30.910
Con NestJS puedes construir aplicaciones web de nodos, API's

01:30.910 --> 01:34.390
de descanso pero también aplicaciones en las que renderizas

01:34.390 --> 01:36.440
vistas o API's graphQL.

01:36.440 --> 01:38.930
Todo eso se puede construir con el nodo. js sino también con

01:38.930 --> 01:41.110
typescript y este proyecto utiliza

01:41.110 --> 01:43.380
en gran medida características

01:43.380 --> 01:46.950
como decoradores, interfaces y demás.

01:46.950 --> 01:50.200
Así que definitivamente echa un vistazo a NestJS si quieres construir

01:50.200 --> 01:53.580
una aplicación web del lado del servicio con node y typescript.

01:53.580 --> 01:56.660
Es un gran framework, realmente divertido de usar y utiliza

01:56.660 --> 02:00.350
todas las características geniales que ofrece typescript.

02:00.350 --> 02:03.630
Por lo tanto, no es necesario instalar ningún tipo de dispositivo personalizado,

02:03.630 --> 02:05.310
ni hacer nada por el estilo.

02:05.310 --> 02:08.913
Aquí se obtiene un gran soporte de tipografía desde el primer momento.
