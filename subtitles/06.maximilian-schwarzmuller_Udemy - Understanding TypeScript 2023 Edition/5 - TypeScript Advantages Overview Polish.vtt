WEBVTT

00:02.290 --> 00:04.300
Narrator: Widziałeś więc TypeScript

00:04.300 --> 00:06.700
w akcji i oferuje on ogromne korzyści.

00:06.700 --> 00:10.570
Dzięki temu pisanie czystego kodu jest naprawdę łatwiejsze.

00:10.570 --> 00:14.060
TypeScript dodaje Typy i dane super ważne.

00:14.060 --> 00:16.810
Dzięki typom musimy być o wiele bardziej jednoznaczni

00:16.810 --> 00:20.970
w tym, jak rzeczy działają i możemy uniknąć wielu nieakceptowanych

00:20.970 --> 00:24.460
i niepotrzebnych błędów dzięki użyciu typów.

00:24.460 --> 00:27.640
Oprócz tego możemy również używać nowoczesnych

00:27.640 --> 00:31.070
IDE, które mają wbudowane wsparcie dla typów, które

00:31.070 --> 00:33.130
mogą wyłapać te typy i dać nam lepsze

00:33.130 --> 00:36.940
autouzupełnianie i wbudowane błędy, które pokazują, zanim

00:36.940 --> 00:39.570
jeszcze skompilujemy kod, ponieważ rozumieją

00:39.570 --> 00:43.050
one również TypeScript.

00:43.050 --> 00:46.870
Ale oprócz typów i ogromnych korzyści, które otrzymujemy sami używając

00:46.870 --> 00:49.660
typów, otrzymujemy również inne funkcje dodane

00:49.660 --> 00:51.410
przez TypeScript.

00:51.410 --> 00:55.170
Możemy użyć pewnych funkcji JavaScript nowej generacji, które

00:55.170 --> 00:58.340
można napisać i użyć w naszych plikach TypeScript, a następnie

00:58.340 --> 01:01.890
zostaną one skompilowane w dół do kodu JavaScript, aby obejść,

01:01.890 --> 01:05.630
które działają nawet w starszych przeglądarkach.

01:05.630 --> 01:08.170
Jeśli znasz Bevel, który jest narzędziem, które

01:08.170 --> 01:11.120
pozwala nam zrobić to również z Vanilla JavaScript, to

01:11.120 --> 01:14.680
jest to trochę podobne, tylko już wbudowane w TypeScript.

01:14.680 --> 01:18.350
Możemy używać nowoczesnych funkcji JavaScript i nadal produkować i

01:18.350 --> 01:21.773
wysyłać kod, który działa również w starszych przeglądarkach.

01:22.610 --> 01:25.210
TypeScript dodaje również pewne cechy, które

01:25.210 --> 01:26.930
tylko TypeScript rozumie,

01:26.930 --> 01:29.070
jak Interfejsy i Generics.

01:29.070 --> 01:32.560
Są to funkcje, które kompilują się do JavaScript, ale nie

01:32.560 --> 01:35.360
muszą, ponieważ są to funkcje, które pomagają

01:35.360 --> 01:39.610
nam podczas rozwoju, które dają nam wyraźniejsze błędy i pomagają

01:39.610 --> 01:42.200
nam uniknąć jeszcze więcej błędów.

01:42.200 --> 01:45.660
Więc nawet dodaje więcej funkcji na tym froncie oprócz

01:45.660 --> 01:47.950
Typów, które już poznaliśmy.

01:47.950 --> 01:50.900
Daje nam również pewne cechy metaprogramowania,

01:50.900 --> 01:53.700
takie jak Dekoratory, na których mam cały moduł

01:53.700 --> 01:55.850
w tym kursie, gdzie zrozumiesz, czym

01:55.850 --> 01:59.520
dokładnie są Dekoratory, dlaczego są tak meta i dlaczego

01:59.520 --> 02:01.790
są niesamowite.

02:01.790 --> 02:04.230
TypeScript alls jest wysoce konfigurowalny.

02:04.230 --> 02:06.390
Nie konfigurowaliśmy go do tej pory,

02:06.390 --> 02:09.350
ale mam cały moduł w kursie, w którym mówimy tylko

02:09.350 --> 02:12.510
o kompilatorze i jak go skonfigurować.

02:12.510 --> 02:15.700
I możesz naprawdę dostroić go do swoich wymagań,

02:15.700 --> 02:18.960
aby uczynić go bardziej ścisłym lub luźniejszym

02:18.960 --> 02:23.310
i zapewnić, że zachowuje się dokładnie tak, jak chcesz.

02:23.310 --> 02:26.790
A dzięki Modern Tooling z nowoczesnymi IDE dostajesz

02:26.790 --> 02:30.610
nawet wsparcie w projektach innych niż TypeScript.

02:30.610 --> 02:33.700
IDE, które właśnie zobaczyłeś, visual studio code,

02:33.700 --> 02:37.740
które nawet daje lepsze wsparcie w zwykłych plikach JavaScript,

02:37.740 --> 02:41.010
ponieważ jest w stanie użyć niektórych funkcji TypeScript

02:41.010 --> 02:44.710
pod maską bez wyraźnego użycia TypeScript.

02:44.710 --> 02:47.640
Więc to jest darmowy zysk, który dostajesz z pudełka,

02:47.640 --> 02:49.810
gdy jesteś świadomy TypeScript i gdy

02:49.810 --> 02:52.020
używasz nowoczesnych narzędzi.

02:52.020 --> 02:54.830
Tak więc istnieje wiele powodów, aby używać TypeScript

02:54.830 --> 02:57.460
i prawdopodobnie dlatego wziąłeś ten kurs.

02:57.460 --> 03:00.360
W tym kursie nauczymy się go teraz krok po kroku i poznamy

03:00.360 --> 03:03.663
wszystkie niesamowite funkcje, które dodaje.
