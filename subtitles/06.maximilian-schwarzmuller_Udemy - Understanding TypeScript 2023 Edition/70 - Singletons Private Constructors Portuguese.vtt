WEBVTT

00:02.260 --> 00:04.960
-: Agora há uma última característica interessante

00:04.960 --> 00:07.020
que eu também quero apresentar,

00:07.020 --> 00:10.330
e que seriam os construtores privados.

00:10.330 --> 00:13.823
E o que é um construtor privado e que uso ele tem?

00:14.870 --> 00:17.700
Há um padrão na programação orientada a objetos

00:17.700 --> 00:20.460
que é chamado de padrão singleton.

00:20.460 --> 00:23.030
O padrão de um botão é garantir que você

00:23.030 --> 00:26.440
tenha sempre apenas uma instância de uma determinada

00:26.440 --> 00:28.030
classe.

00:28.030 --> 00:30.558
Isto pode ser útil em cenários onde de alguma

00:30.558 --> 00:33.000
forma você não pode usar métodos ou propriedades

00:33.000 --> 00:34.450
estáticas ou não quer, mas

00:34.450 --> 00:36.440
ao mesmo tempo você quer ter certeza

00:36.440 --> 00:39.600
de que não pode criar vários objetos baseados em uma classe,

00:39.600 --> 00:40.730
mas que você sempre tem

00:40.730 --> 00:44.630
exatamente um objeto baseado em uma classe.

00:44.630 --> 00:47.660
Digamos que para nosso Departamento de Contabilidade

00:47.660 --> 00:51.460
queremos ter certeza de que só podemos criar exatamente um objeto

00:51.460 --> 00:53.320
com base nesta classe, pois temos

00:53.320 --> 00:56.010
exatamente um departamento de contabilidade

00:56.010 --> 00:57.840
em toda nossa empresa.

00:57.840 --> 01:00.260
Podemos ter mais de um departamento de TI, mas

01:00.260 --> 01:03.290
temos exatamente um departamento de contabilidade.

01:03.290 --> 01:05.310
Agora, para impor isto e evitar que

01:05.310 --> 01:09.020
chamemos manualmente o novo Departamento de Contabilidade

01:09.020 --> 01:12.260
várias vezes, podemos transformar o construtor da classe

01:12.260 --> 01:14.320
AccountingDepartment em um construtor

01:14.320 --> 01:17.360
privado, adicionando a palavra-chave privada à sua

01:17.360 --> 01:18.860
frente.

01:18.860 --> 01:20.560
Agora o que isto faz é garantir

01:20.560 --> 01:23.480
que não podemos chamar de novo sobre isto.

01:23.480 --> 01:25.160
Aqui você vê que estou recebendo

01:25.160 --> 01:27.620
um erro porque o construtor é privado,

01:27.620 --> 01:30.600
portanto só é acessível de dentro da classe, o

01:30.600 --> 01:33.690
que soa estranho porque como entramos dentro da

01:33.690 --> 01:37.920
classe se não podemos mais criar objetos baseados nela.

01:37.920 --> 01:40.490
A resposta é, bem, métodos estáticos.

01:40.490 --> 01:43.610
Um método estático pode ser chamado na própria classe para

01:43.610 --> 01:46.250
que você não tenha instanciado para isso.

01:46.250 --> 01:49.460
Portanto, aqui podemos acrescentar um método estático que poderíamos

01:49.460 --> 01:51.340
chamar de getInstance, mas o nome depende

01:51.340 --> 01:53.260
totalmente de você.

01:53.260 --> 01:56.930
Agora getInstance verificará se já temos uma instância

01:56.930 --> 02:00.090
desta classe e, se não, devolverá uma nova.

02:00.090 --> 02:04.300
Para isso podemos acrescentar uma nova instância de propriedade estática, uma propriedade

02:04.300 --> 02:06.350
privada estática para que você possa colocar

02:06.350 --> 02:09.200
privada em frente à instância estática chamada instância que

02:09.200 --> 02:12.040
será do tipo Departamento de Contabilidade.

02:12.040 --> 02:16.570
Por isso, ali vamos armazenar uma instância do Departamento de Contabilidade.

02:16.570 --> 02:17.580
Então é isso que estou

02:17.580 --> 02:19.100
dizendo aqui, tenho uma propriedade

02:19.100 --> 02:21.410
estática que é acessível na própria classe,

02:21.410 --> 02:23.310
mas somente de dentro da classe e o

02:23.310 --> 02:25.960
valor que armazenamos ali será do tipo ContabilidadeDepartamento,

02:25.960 --> 02:30.140
portanto da própria classe.

02:30.140 --> 02:33.880
Agora podemos usar esta propriedade aqui em getInstance

02:33.880 --> 02:38.880
e verificar se isto é verdade. A instância é colocada aqui dentro da estática,

02:39.260 --> 02:43.570
se a usarmos, ela se referirá à própria classe e então poderemos acessar

02:43.570 --> 02:47.610
todas as outras propriedades estáticas sobre ela.

02:47.610 --> 02:51.963
A alternativa a isso seria usar o nome da classe.

02:53.720 --> 02:58.450
E agora, se isto estiver definido, quero devolver isto. exemplo, ou novamente o

02:58.450 --> 03:01.600
nome da classe. mas isto dentro de um método

03:01.600 --> 03:04.030
estático funciona, então nos dá acesso à própria

03:04.030 --> 03:05.680
classe, ao contrário disto em

03:05.680 --> 03:09.370
um método não estático que nos dá acesso à instância com a qual estamos

03:09.370 --> 03:11.590
tentando trabalhar, não ao que estamos

03:11.590 --> 03:13.550
fazendo aqui.

03:13.550 --> 03:15.660
Se, no entanto, não conseguirmos entrar

03:15.660 --> 03:17.290
aqui, então ainda não temos

03:17.290 --> 03:22.030
instância, então eu defini isto. Por isso, esta propriedade estática

03:22.030 --> 03:25.660
de instância igual ao novo Departamento de Contabilidade,

03:25.660 --> 03:28.630
podemos usá-la aqui de dentro porque agora estamos

03:28.630 --> 03:32.030
dentro deste método de classe, de modo que aqui podemos

03:32.030 --> 03:35.250
acessar o construtor privado e passar em nosso ID,

03:35.250 --> 03:44.830
e nossa matriz de relatórios e depois devolver isto.

03:44.830 --> 03:44.830
exemplo aqui.

03:44.830 --> 03:47.010
Portanto, agora ou estamos devolvendo a única instância

03:47.010 --> 03:48.220
que talvez já tenhamos, ou se

03:48.220 --> 03:50.970
ainda não a tivermos, criamos uma nova instância.

03:50.970 --> 03:53.270
Mas este código, o código marcado aqui, só pode

03:53.270 --> 03:56.377
ser executado uma vez, porque uma vez que temos uma instância

03:56.377 --> 03:57.850
em que o fazemos, o fazemos se

03:57.850 --> 04:00.370
bloquear e devolvemos a instância existente.

04:00.370 --> 04:03.700
Portanto, agora se você quiser trabalhar com o Departamento de Contabilidade,

04:03.700 --> 04:05.940
em vez de criá-lo assim, poderíamos chamar de Const

04:05.940 --> 04:10.153
Accounting AccountingDepartment. getInstance, e isto nos devolve uma

04:11.646 --> 04:13.190
nova instância do Departamento

04:13.190 --> 04:14.850
de Contabilidade.

04:14.850 --> 04:18.190
Mas se eu fizer isso novamente, terei a mesma instância que

04:18.190 --> 04:21.103
você verá se eu consolei a contabilidade de log, e a

04:22.020 --> 04:23.570
contabilidade2 aqui.

04:23.570 --> 04:26.550
Você verá que os dois devem ser exatamente iguais, se salvarmos

04:26.550 --> 04:28.253
isso e recarregarmos, você verá

04:30.550 --> 04:34.110
que lá embaixo estão meus dois objetos do Departamento de Contabilidade,

04:34.110 --> 04:36.690
eles têm a mesma identificação, a mesma configuração,

04:36.690 --> 04:39.720
são o mesmo objeto, a mesma instância, porque temos apenas

04:39.720 --> 04:41.530
uma instância com este padrão de botão

04:41.530 --> 04:44.340
único que é criado com a ajuda da palavra-chave privada

04:44.340 --> 04:47.900
na frente do construtor.

04:47.900 --> 04:51.000
Agora esta é, sem dúvida, uma abordagem que você

04:51.000 --> 04:52.490
não usará o tempo todo.

04:52.490 --> 04:55.010
O padrão singleton às vezes pode ser útil, você não

04:55.010 --> 04:56.530
precisa dele o tempo todo, mas

04:56.530 --> 04:58.700
definitivamente vale a pena saber sobre ele

04:58.700 --> 05:00.360
porque é algo interessante que você

05:00.360 --> 05:03.290
pode facilmente implementar com TypeScript graças aos construtores

05:03.290 --> 05:04.923
privados.
