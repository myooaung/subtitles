WEBVTT

00:02.160 --> 00:03.740
Istruttore: Quali sono le opzioni

00:03.740 --> 00:06.440
quando vogliamo dividere il codice in più file?

00:06.440 --> 00:10.720
In realtà abbiamo tre opzioni per farlo.

00:10.720 --> 00:12.680
La prima opzione sarebbe quella di scrivere

00:12.680 --> 00:16.110
semplicemente più file di codice, più file TypeScript.

00:16.110 --> 00:17.460
TypeScript compila automaticamente

00:17.460 --> 00:20.710
tutti i file di codice nella cartella dei sorgenti e importa

00:20.710 --> 00:23.020
manualmente i file di script Java compilati

00:23.020 --> 00:25.000
nell'HTML.

00:25.000 --> 00:26.220
Questa è un'opzione e

00:26.220 --> 00:28.970
per alcuni progetti potrebbe essere giusta, ma bisognerebbe

00:28.970 --> 00:31.780
gestire manualmente tutte queste importazioni,

00:31.780 --> 00:34.600
il che può essere macchinoso e soggetto a errori; inoltre,

00:34.600 --> 00:36.980
quando si usano alcune funzioni di TypeScript,

00:36.980 --> 00:39.560
si rinuncia al supporto dei tipi, se un tipo è definito

00:39.560 --> 00:46.030
nel file A e lo si usa nel file B e TypeScript non sa di questa connessione.

00:46.030 --> 00:47.480
Per questo motivo non è un'opzione

00:47.480 --> 00:49.290
ideale per i progetti più grandi.

00:49.290 --> 00:52.500
Per i progetti più grandi, invece, abbiamo due opzioni principali.

00:52.500 --> 00:55.470
Ad esempio, abbiamo gli spazi dei nomi e il raggruppamento dei file.

00:55.470 --> 00:59.410
Gli spazi dei nomi sono una caratteristica di TypeScript, una caratteristica

00:59.410 --> 01:03.430
della sintassi, si può aggiungere del codice speciale al codice per

01:03.430 --> 01:04.840
usare questa caratteristica

01:04.840 --> 01:08.650
e permette di raggruppare il codice sotto uno spazio dei nomi e di

01:08.650 --> 01:12.730
importare gli spazi dei nomi in altri file.

01:12.730 --> 01:16.020
È quindi possibile avere uno spazio dei nomi per ogni file, ad esempio.

01:16.020 --> 01:18.790
Importare un altro file in un altro file ancora

01:18.790 --> 01:21.930
e attingere a quello spazio dei nomi che si trova in

01:21.930 --> 01:24.650
un altro file da quello importato e lo vedremo

01:24.650 --> 01:25.970
in pratica, nel caso non

01:25.970 --> 01:28.030
fosse del tutto chiaro.

01:28.030 --> 01:30.020
TypeScript non supporta solo

01:30.020 --> 01:34.130
questo, ma raggruppa anche i file in un unico file, in modo

01:34.130 --> 01:37.230
che alla fine si scriva codice in più file che

01:37.230 --> 01:39.560
vengono compilati, ma poi importati

01:39.560 --> 01:42.750
l'uno nell'altro, in modo da avere meno importazioni

01:42.750 --> 01:46.950
da gestire e non dover gestire manualmente le diverse importazioni

01:46.950 --> 01:50.030
in un file HTML.

01:50.030 --> 01:52.180
Ora, un'alternativa agli spazi dei

01:52.180 --> 01:55.750
nomi e probabilmente l'alternativa più importante e moderna,

01:55.750 --> 02:00.750
è quella di usare le importazioni/esportazioni ES6, note anche come moduli ES6, perché

02:01.870 --> 02:06.480
si è scoperto che, totalmente distaccato da TypeScript, il moderno Java script

02:06.480 --> 02:09.940
ha una soluzione anche per questo problema, che si presenta

02:09.940 --> 02:11.440
non solo nei progetti TypeScript,

02:11.440 --> 02:13.140
ma in qualsiasi progetto Java

02:13.140 --> 02:15.850
script più grande.

02:15.850 --> 02:18.200
I moderni script Java supportano le dichiarazioni

02:18.200 --> 02:21.150
di importazione ed esportazione, che consentono

02:21.150 --> 02:23.110
di indicare quale file dipende da

02:23.110 --> 02:24.910
quale altro file e quindi di avere

02:24.910 --> 02:27.920
tutti questi singoli file, ma non è necessario gestire

02:27.920 --> 02:30.560
le importazioni manualmente, invece i browser,

02:30.560 --> 02:33.770
i moderni browser, lo fanno.

02:33.770 --> 02:36.020
Lo capiscono e scaricano ed eseguono automaticamente

02:36.020 --> 02:38.800
i file da cui dipende un altro file.

02:38.800 --> 02:41.370
Si usa la sintassi di importazione/esportazione

02:41.370 --> 02:43.470
e anche TypeScript la supporta.

02:43.470 --> 02:46.870
Pertanto, è possibile utilizzare TypeScript senza alcun problema.

02:46.870 --> 02:48.700
Si compila per ogni file, ma è sufficiente

02:48.700 --> 02:50.810
importare uno script, perché, come

02:50.810 --> 02:53.680
ho appena detto, i browser moderni sanno come

02:53.680 --> 02:56.350
recuperare tutte le altre dipendenze e lo vedrete

02:56.350 --> 02:58.570
in azione anche in questa sezione del

02:58.570 --> 03:00.710
nucleo.

03:00.710 --> 03:02.320
Una nota importante: tecnicamente

03:02.320 --> 03:03.830
ci ritroveremo ancora con più

03:03.830 --> 03:06.110
file e, pur non dovendo gestire manualmente

03:06.110 --> 03:09.140
le importazioni, quelle degli script, avremo comunque

03:09.140 --> 03:11.550
degli svantaggi, perché ogni file da cui dipendiamo

03:11.550 --> 03:13.730
deve essere scaricato separatamente,

03:13.730 --> 03:15.130
il che significa un maggior

03:15.130 --> 03:16.900
numero di richieste HTTP e così via.

03:16.900 --> 03:19.460
Per questo motivo è possibile raggruppare i file

03:19.460 --> 03:22.210
per lavorare su più file durante lo sviluppo, ma spedire

03:22.210 --> 03:24.860
un singolo file per la produzione, ma per questo

03:24.860 --> 03:30.840
sono necessari strumenti di terze parti, per esempio Webpack, di cui vi mostrerò il funzionamento, ma in una

03:30.840 --> 03:39.500
sezione separata, in cui daremo un'occhiata a Webpack e a TypeScript e al motivo per cui lo usiamo e come lo usiamo.

03:39.500 --> 03:41.100
Per ora usiamo questi due

03:41.100 --> 03:43.900
approcci nella loro forma di base e vediamo

03:43.900 --> 03:45.870
come possiamo migliorare il nostro

03:45.870 --> 03:48.853
codice dividendolo in più file.
