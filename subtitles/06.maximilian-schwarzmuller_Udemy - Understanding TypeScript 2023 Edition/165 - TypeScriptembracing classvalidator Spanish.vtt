WEBVTT

00:02.130 --> 00:03.630
Narrador: Así que echamos un vistazo

00:03.630 --> 00:06.210
a Lodash, que es un paquete de JavaScript de vainilla en el que

00:06.210 --> 00:08.360
necesitábamos instalar algunas traducciones.

00:08.360 --> 00:10.310
Y echamos un vistazo a class-transformer,

00:10.310 --> 00:13.530
que también funciona en vanilla JavaScript, pero también

00:13.530 --> 00:17.328
funciona particularmente bien en TypeScript.

00:17.328 --> 00:20.330
Ahora echemos un vistazo al validador de clases.

00:20.330 --> 00:24.540
Este es ahora un paquete que realmente utiliza TypeScript.

00:24.540 --> 00:28.300
Se basa en el concepto de los decoradores de TypeScript,

00:28.300 --> 00:32.340
y nos da una nueva forma de trabajar con ellos, o al menos

00:32.340 --> 00:34.330
casi nueva.

00:34.330 --> 00:38.230
Si usted siguió a través de mi módulo de decorador en este curso, en realidad

00:38.230 --> 00:41.200
se ve algo aquí en esta conferencia, que tipo de construido

00:41.200 --> 00:44.150
por nuestra cuenta allí también.

00:44.150 --> 00:47.100
Ahora, sin embargo, con esta biblioteca de terceros, no tenemos

00:47.100 --> 00:49.330
que reinventar la rueda desde cero, no tenemos que

00:49.330 --> 00:51.193
construirla por nuestra cuenta.

00:51.193 --> 00:53.320
Y esta biblioteca también podría decirse

00:53.320 --> 00:55.710
que es un poco más elaborada que nuestra solución

00:55.710 --> 00:57.830
en el módulo del decorador.

00:57.830 --> 01:00.026
Me refiero a la validación.

01:00.026 --> 01:02.870
Este es un paquete que nos permite añadir reglas de

01:02.870 --> 01:06.390
validación con la ayuda de algunos decoradores, dentro de una

01:06.390 --> 01:08.590
clase y luego cada vez que instanciamos

01:08.590 --> 01:09.920
dicha clase, podemos realmente

01:09.920 --> 01:12.610
validarla para las reglas que establecemos allí

01:12.610 --> 01:15.610
con la ayuda de los decoradores.

01:15.610 --> 01:18.960
Ahora, para empezar, sólo tenemos que importar este paquete aquí.

01:18.960 --> 01:23.130
Así que npm install class-validator --save, y a partir

01:23.130 --> 01:26.130
de ahí podemos empezar de inmediato.

01:26.130 --> 01:29.220
Así que déjame reiniciar el servidor webpack-dev, y para

01:29.220 --> 01:30.600
usar este paquete, tenemos

01:30.600 --> 01:33.580
que añadir un par de decoradores a los modelos, así que

01:33.580 --> 01:35.740
a las clases donde queremos validar ciertas

01:35.740 --> 01:37.490
propiedades.

01:37.490 --> 01:39.730
Así que en mi caso aquí en el modelo de

01:39.730 --> 01:43.240
producto, voy a importar algo de class-validator.

01:43.240 --> 01:45.110
Y ahora de nuevo, si usted siguió

01:45.110 --> 01:47.360
a través del módulo de decorador en este

01:47.360 --> 01:49.640
curso, este es un concepto que ya también

01:49.640 --> 01:52.870
construido desde cero allí sin este paquete.

01:52.870 --> 01:56.270
Pero por supuesto construimos una versión muy ingenua y básica,

01:56.270 --> 01:57.840
con este paquete no tenemos que

01:57.840 --> 02:01.200
construirlo por nuestra cuenta y además es más elaborado.

02:01.200 --> 02:02.770
Ahora desde class-validator, podemos

02:02.770 --> 02:04.820
importar ciertos decoradores.

02:04.820 --> 02:05.893
Por ejemplo,

02:07.139 --> 02:08.630
IsNotEmpty, o

02:08.630 --> 02:11.410
también, IsNumber.

02:11.410 --> 02:13.500
También podemos importar IsPositive.

02:15.940 --> 02:18.940
Ahora podemos añadirlos a las propiedades que queremos validar.

02:18.940 --> 02:20.900
Así que aquí, por ejemplo, en el título,

02:20.900 --> 02:24.220
podemos añadir IsNotEmpty como un decorador como este, y

02:24.220 --> 02:26.390
estas son todas las fábricas de decoradores,

02:26.390 --> 02:29.610
por lo que siempre tiene que ejecutarlos.

02:29.610 --> 02:31.318
Y también

02:31.318 --> 02:37.380
aquí, IsNumber y IsPositive.

02:37.380 --> 02:38.763
Vamos a ejecutar eso.

02:40.250 --> 02:41.730
Ahora para usar los decoradores aquí,

02:41.730 --> 02:44.730
también debe ir a tsconfig. js, y asegúrate

02:44.730 --> 02:49.550
de activar los decoradores experimentales.

02:49.550 --> 02:51.593
A partir de entonces, guarde esto, y ahora

02:52.750 --> 02:55.040
estas áreas aquí también deben desaparecer.

02:55.040 --> 02:57.300
Sin embargo, también tenemos que reiniciar el servidor de desarrollo

02:57.300 --> 03:00.840
para que recoja el nuevo tsconfig. conversión js.

03:00.840 --> 03:02.650
Así que ahora añadimos estas reglas,

03:02.650 --> 03:04.768
estas reglas de validación aquí.

03:04.768 --> 03:07.710
Básicamente estamos diciendo que el título nunca

03:07.710 --> 03:11.830
debe ser una cadena vacía y los números deben ser un número positivo.

03:11.830 --> 03:13.980
Ahora podemos crear un nuevo

03:13.980 --> 03:15.119
producto aquí,

03:15.119 --> 03:16.870
digamos allí, newProd,

03:16.870 --> 03:19.078
donde llamamos nuevo producto

03:19.078 --> 03:21.720
y paso una cadena vacía para el título,

03:21.720 --> 03:25.210
y luego menos 5. 99 para el número.

03:25.210 --> 03:26.700
Si luego consuelo. Registrar

03:27.576 --> 03:29.920
newProd, getInformation,

03:29.920 --> 03:31.730
y ejecutar esto, vamos

03:31.730 --> 03:34.830
a ver donde funciona.

03:34.830 --> 03:35.683
Bien, guarda eso.

03:37.840 --> 03:40.040
Huh, funciona.

03:40.040 --> 03:42.330
Bueno, todavía no estamos del todo ahí.

03:42.330 --> 03:46.470
Con nuestros decoradores establecemos las reglas.

03:46.470 --> 03:49.560
Pero estos decoradores por sí solos no hacen mucho.

03:49.560 --> 03:52.880
En su lugar, ahora tenemos que importar también

03:52.880 --> 03:56.190
el método validador de class-validator.

03:56.190 --> 03:57.300
Así que desde este paquete,

03:57.300 --> 03:59.840
importamos validate y tenemos que ejecutar

03:59.840 --> 04:02.260
esto en una instancia concreta, fuera de la

04:02.260 --> 04:05.750
clase a la que hemos añadido nuestros decoradores.

04:05.750 --> 04:07.300
Así que en este caso

04:07.300 --> 04:12.020
aquí, podemos ejecutar validar y pasar el newProd a ella.

04:12.020 --> 04:14.670
Y validar devolverá entonces una promesa

04:14.670 --> 04:19.150
que en realidad podría dar errores de validación.

04:19.150 --> 04:21.440
Así que podemos añadir entonces aquí, si usted estuviera

04:21.440 --> 04:23.080
en una función de flexión, también

04:23.080 --> 04:25.680
podría utilizar un solo peso, por supuesto.

04:25.680 --> 04:27.920
Y aquí obtenemos los errores que encuentra

04:27.920 --> 04:30.093
esta función de validación.

04:30.980 --> 04:31.813
Ahora bien, es importante

04:31.813 --> 04:34.950
que siempre acabemos en then aunque haya errores, así que

04:34.950 --> 04:36.560
si hay errores de validación,

04:36.560 --> 04:38.420
no entramos en algún bloque catch,

04:38.420 --> 04:41.120
siempre entramos en el bloque then.

04:41.120 --> 04:44.360
Ahora aquí podemos comprobar si los errores,

04:44.360 --> 04:45.980
que es un Array, la longitud

04:45.980 --> 04:48.400
del punto es mayor que cero.

04:48.400 --> 04:51.300
Lo que significa que hay errores de validación.

04:51.300 --> 04:52.910
En este caso podemos registrar

04:53.750 --> 04:56.700
los errores de validación, y tal vez también la salida

04:56.700 --> 04:59.200
de los errores que encontramos.

04:59.200 --> 05:01.820
Así que consola. Registrar los errores,

05:01.820 --> 05:03.700
y si no, en mi caso aquí, registraré

05:03.700 --> 05:05.290
la información.

05:05.290 --> 05:06.580
Ahora, por supuesto, depende de la

05:06.580 --> 05:09.100
aplicación que estás construyendo lo que quieres hacer aquí.

05:09.100 --> 05:10.860
Es posible que quieras mostrar

05:10.860 --> 05:13.790
una alerta al usuario en este caso si hay errores.

05:13.790 --> 05:15.360
Puede que quieras reajustar la entrada,

05:15.360 --> 05:16.520
lo que sea que quieras hacer.

05:16.520 --> 05:19.690
Aquí, sólo voy a registrar algo en la consola.

05:19.690 --> 05:22.080
Y si ahora guardamos eso, pues ves los

05:22.080 --> 05:24.870
errores de validación, y luego aquí un array

05:24.870 --> 05:27.830
de los errores que se encontraron.

05:27.830 --> 05:31.890
Por ejemplo el primer error es en la propiedad

05:31.890 --> 05:34.770
title, que no debe estar vacía.

05:34.770 --> 05:38.290
Y el segundo error es sobre la propiedad del precio,

05:38.290 --> 05:41.150
que debe ser un número positivo.

05:41.150 --> 05:44.950
Y así de fácil puedes añadir una validación bastante

05:44.950 --> 05:47.960
potente a tus proyectos con este enfoque

05:47.960 --> 05:50.170
basado en decoradores.

05:50.170 --> 05:53.190
Relacionado con lo que hicimos anteriormente en el curso,

05:53.190 --> 05:54.530
y el módulo de decoradores,

05:54.530 --> 05:56.062
pero como he mencionado varias

05:56.062 --> 05:59.890
veces, más elaborado con un montón de reglas incorporadas, y usted puede

05:59.890 --> 06:01.190
aprender todo acerca de

06:01.190 --> 06:03.610
que, por supuesto, en los documentos de este

06:03.610 --> 06:06.350
paquete, y sin reinventar la rueda.

06:06.350 --> 06:09.300
Así que el paquete class-validator es realmente un poderoso

06:09.300 --> 06:10.930
paquete que deberías conocer si

06:10.930 --> 06:14.693
estás construyendo proyectos más grandes con TypeScript.
