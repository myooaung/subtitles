WEBVTT

00:02.170 --> 00:04.780
-: Así que, el objetivo es construir un componente de lista de tareas

00:04.780 --> 00:06.330
y por lo tanto aquí en la carpeta de origen,

00:06.330 --> 00:08.600
voy a añadir una nueva subcarpeta, componentes, y en ella

00:08.600 --> 00:11.280
un "to-doList. tsx", que contendría

00:11.280 --> 00:13.690
el componente de mi lista de tareas.

00:13.690 --> 00:15.370
Ahora, para construir un componente

00:15.370 --> 00:17.030
react, necesitamos importar React

00:17.030 --> 00:20.250
desde "react", de lo contrario JXS no funcionará en este archivo.

00:20.250 --> 00:22.820
Luego creo mi constante de la lista de tareas, que almacena

00:22.820 --> 00:24.530
una función de flecha y por supuesto

00:24.530 --> 00:26.990
esto no tiene que ser una función de flecha, también

00:26.990 --> 00:30.320
podrías usar una función con la palabra clave function.

00:30.320 --> 00:33.160
Ahora exportaremos esto.

00:33.160 --> 00:36.500
Ahora, usemos nuestras características extra de typescript, y establezcamos

00:36.500 --> 00:39.370
el tipo de esto a react. fc para indicar que no

00:39.370 --> 00:42.010
debe ser una función regular, sino un

00:42.010 --> 00:43.950
componente funcional.

00:43.950 --> 00:46.920
Por lo tanto, obtenemos un error porque no estamos devolviendo

00:46.920 --> 00:49.790
algo que califique como un elemento react.

00:49.790 --> 00:53.250
Así que aquí, deberíamos devolver, digamos una lista desordenada.

00:53.250 --> 00:54.850
Como quiero representar una lista

00:54.850 --> 00:58.000
aquí, devolver una lista desordenada por ahora tiene sentido.

00:58.000 --> 01:02.740
Ahora, en esa lista desordenada, quiero dar salida a los elementos de la lista.

01:02.740 --> 01:07.230
Así que, aquí, podríamos esperar obtener nuestras tareas pendientes, y eso

01:07.230 --> 01:09.240
es un array, y en un array tenemos un

01:09.240 --> 01:11.690
objeto donde cada elemento tiene un ID.

01:11.690 --> 01:15.627
Digamos t1 para la tarea uno y un texto como

01:15.627 --> 01:18.100
"Terminar el curso. Este es sólo un elemento, pero por supuesto, usted podría

01:18.100 --> 01:18.933
tener múltiples objetos

01:18.933 --> 01:20.800
de este tipo en esta matriz.

01:20.800 --> 01:22.010
Aquí, en nuestra lista, podemos entonces dar salida

01:22.010 --> 01:24.620
a las tareas pendientes de forma dinámica y asignarlas a una lista de elementos de la lista.

01:24.620 --> 01:29.620
Así que aquí, vamos a través de todos los to-dos, esta es una función incorporada

01:30.250 --> 01:32.930
de JavaScript, por supuesto, la función

01:32.930 --> 01:35.070
de mapa, y devolvemos un elemento

01:35.070 --> 01:37.740
de la lista para cada elemento en esta matriz

01:37.740 --> 01:41.530
y en ese elemento de la lista, puse "to-do. text" como contenido en el elemento de la lista y añadir este prop clave

01:41.530 --> 01:45.570
especial, que React realmente quiere

01:45.570 --> 01:47.870
en los elementos repetidos que se sientan

01:47.870 --> 01:49.620
al lado de la otra.

01:49.620 --> 01:51.980
Aquí, debemos elegir algo único y el ID

01:51.980 --> 01:54.130
debe ser un identificador único.

01:54.130 --> 01:57.710
Con eso, estamos haciendo una lista de tareas pendientes.

01:57.710 --> 02:00.470
Ahora vamos a integrar el componente de la lista de tareas

02:00.470 --> 02:02.860
en el componente de la aplicación y para ello podemos,

02:02.860 --> 02:05.520
por supuesto, ir al componente de la aplicación, importar

02:05.520 --> 02:06.930
"TodoList" de ". /componentes/Lista

02:06.930 --> 02:11.530
de tareas", así, el ". tsx" será añadida automáticamente por el flujo de trabajo de construcción

02:11.530 --> 02:14.350
que estamos utilizando aquí.

02:14.350 --> 02:17.160
Y luego aquí dentro de nuestro div, podemos renderizar

02:17.160 --> 02:18.850
"TodoList" así.

02:18.850 --> 02:21.440
Si ahora guardamos esto y volvemos a la página

02:21.440 --> 02:24.190
en funcionamiento, vemos esta tarea aquí.

02:24.190 --> 02:25.870
El estilo es horrible y podemos añadir

02:25.870 --> 02:29.350
un mejor estilo más adelante, pero por el momento, esto debería estar bien.

02:29.350 --> 02:31.680
Sin embargo, esto no es realmente realista.

02:31.680 --> 02:35.620
Cuando construyamos esta aplicación de lista de tareas, más adelante quiero

02:35.620 --> 02:37.950
ser capaz de añadir nuevas tareas con un componente

02:37.950 --> 02:40.063
separado que todavía no tenemos.

02:40.063 --> 02:42.920
Y probablemente manejaremos las tareas aquí

02:42.920 --> 02:45.570
en este componente de la aplicación porque

02:45.570 --> 02:48.810
aquí en este lugar, tendremos un componente que agrega

02:48.810 --> 02:53.020
tareas y ese componente será capaz de hablar con este componente

02:53.020 --> 02:55.280
de la aplicación.

02:55.280 --> 02:56.690
Aquí, gestionamos nuestra

02:56.690 --> 02:59.650
matriz de tareas y añadimos tareas a esa matriz o eliminamos

02:59.650 --> 03:01.510
tareas de esa matriz.

03:01.510 --> 03:04.220
A la lista de tareas pendientes le pasaremos ese array.

03:04.220 --> 03:06.930
Así que, aunque todavía no lo estemos gestionando, probablemente

03:06.930 --> 03:09.270
tendríamos ese array "todos" no en la lista de tareas,

03:09.270 --> 03:11.660
sino en el componente de la aplicación.

03:11.660 --> 03:15.010
Es más realista que este array acabe más tarde aquí, así que

03:15.010 --> 03:16.740
ya podemos moverlo aquí.

03:16.740 --> 03:20.093
Ahora, tenemos que pasarlo a "TodoList. Para ello, por supuesto, podemos utilizar accesorios.

03:20.930 --> 03:23.600
Así que en la lista de tareas, usted podría tener un elemento

03:23.600 --> 03:25.640
prop, el nombre es, por supuesto, a nosotros,

03:25.640 --> 03:28.370
porque estamos definiendo este componente, podemos definir

03:28.370 --> 03:30.350
cómo su prop debe ser nombrado.

03:30.350 --> 03:32.100
Podemos introducir nuestra matriz "todos".

03:32.100 --> 03:35.010
Ahora, ya vemos que al IDE no le gusta esto y si intento guardar

03:35.010 --> 03:37.820
esto, también tenemos un error de compilación.

03:37.820 --> 03:40.650
Obtenemos un error de compilación porque

03:40.650 --> 03:45.400
la propiedad "items" no existe en el tipo whatever.

03:45.400 --> 03:47.830
Así que básicamente no existe en este tipo de intersección

03:47.830 --> 03:50.440
aquí que al final define la estructura de los accesorios

03:50.440 --> 03:52.070
recibidos por "TodoList. Porque al usar typescript con React,

03:52.070 --> 03:55.300
tienes que tener claro los tipos con los que estás trabajando.

03:55.300 --> 03:59.470
Esto no sólo significa que le dices a typescript que esto es un tipo

03:59.470 --> 04:02.110
especial de función, no, también significa

04:02.110 --> 04:05.250
que si te basas en props en algún componente, le

04:05.250 --> 04:08.360
dices a typescript cómo deben ser estos props y

04:08.360 --> 04:11.020
cómo están estructurados.

04:11.020 --> 04:14.860
Así que en el componente de la lista de tareas, recibimos props

04:14.860 --> 04:17.420
aquí, correcto, eso es React regular.

04:17.420 --> 04:19.400
Y en el atrezzo probablemente tengamos la propiedad de nuestro artículo.

04:19.400 --> 04:23.530
Así que tenemos una proposición llamada "items"

04:23.530 --> 04:26.200
y eso es lo que dije aquí arriba:

04:26.200 --> 04:30.323
"Tengo esta proposición items". El problema ahora es que esto técnicamente funcionaría pero el typescript

04:31.420 --> 04:33.430
no aborta todavía.

04:33.430 --> 04:35.067
Realmente no le dijimos a typescript que nuestra

04:35.067 --> 04:37.140
prop debería tener una propiedad "items" aquí.

04:37.140 --> 04:39.503
Para decirlo, podemos utilizar el hecho

04:39.503 --> 04:41.950
de que este tipo de componente de función

04:41.950 --> 04:45.063
aquí es en realidad un tipo genérico.

04:45.063 --> 04:46.913
Un tipo genérico donde podemos definir todas

04:47.840 --> 04:50.510
las props extra además de la prop por defecto de los hijos, que todo

04:50.510 --> 04:52.170
componente tiene, que esperamos aquí.

04:52.170 --> 04:54.250
Así que podemos añadir paréntesis angulares

04:54.250 --> 04:58.132
aquí y añadir nuestro objeto que describe la estructura de este objeto "props"

04:58.132 --> 05:00.710
que estamos recibiendo aquí o, para mantener nuestro

05:00.710 --> 05:03.670
código más delgado, hacemos esto en una interfaz extra aquí

05:03.670 --> 05:06.170
y eso es totalmente opcional.

05:06.170 --> 05:09.670
Así que aquí podríamos tener nuestros accesorios de la lista de tareas

05:09.670 --> 05:12.350
y esto describe cómo son nuestros accesorios.

05:12.350 --> 05:15.120
Y aquí, espero obtener una clave "items",

05:15.120 --> 05:18.260
donde tenemos un array de objetos donde cada objeto

05:18.260 --> 05:20.510
tiene un ID, que es una cadena, y tiene

05:20.510 --> 05:23.380
un texto, que es una cadena.

05:23.380 --> 05:26.120
Esos son los datos que manejamos aquí.

05:26.120 --> 05:30.020
Tenemos un array de objetos con una cadena

05:30.020 --> 05:32.850
de ID y una cadena de texto.

05:32.850 --> 05:34.370
Esto es lo que espero obtener aquí es

05:34.370 --> 05:36.070
"props" un array de tales objetos y si estamos

05:36.070 --> 05:38.940
aquí, ahora podemos apuntar a esta interfaz de props de la lista de

05:38.940 --> 05:40.700
tareas y ahora todo está bien. Ahora typescript entiende

05:40.700 --> 05:42.670
que aquí, obtendremos props,

05:42.670 --> 05:45.040
donde tendremos un items prop y que

05:45.040 --> 05:48.640
este items prop será un array donde tenemos una clave

05:48.640 --> 05:52.145
de ID y una clave de texto en

05:52.145 --> 05:55.000
cada elemento del array.

05:55.000 --> 05:56.920
Así que ahora si guardamos esto, se compila,

05:56.920 --> 05:58.870
y obtenemos la salida de trabajo de nuevo.

05:58.870 --> 05:59.850
Así que de nuevo, esto es typescript siendo usado con React.

05:59.850 --> 06:02.390
No solo lo usamos para decirle a React o a typescript, que

06:02.390 --> 06:04.188
este es un componente funcional, sino

06:04.188 --> 06:06.830
también sobre los props que este componente eventualmente

06:06.830 --> 06:10.000
obtiene y esto nos ayuda mucho con la seguridad de tipos.

06:10.000 --> 06:13.490
Evita que yo aquí accidentalmente piense que

06:13.490 --> 06:15.130
se llama "todos". No, esto no es compatible, obtenemos un error.

06:15.130 --> 06:19.060
Son artículos.

06:19.060 --> 06:21.165
Todos verán que se autocompletan aquí.

06:21.165 --> 06:23.330
Así que la codificación se hace mucho más fácil cuando

06:23.330 --> 06:24.910
se trabaja con typescript aquí. Y esa es, por supuesto, toda la ventaja de typescript:

06:24.910 --> 06:27.160
simplifica la codificación, evita errores innecesarios y, como puedes ver,

06:27.160 --> 06:28.400
también lo hace en una aplicación react.

06:28.400 --> 06:30.670
Pero, por supuesto, no hemos terminado.

06:30.670 --> 06:34.420
Por el momento, nuestras tareas nunca cambian

06:34.420 --> 06:36.640
y quiero cambiar

06:36.640 --> 06:39.930
eso, quiero tener un componente que

06:39.930 --> 06:44.120
nos permita añadir nuevas tareas.

06:44.120 --> 06:46.080
Así que vamos a trabajar en eso a continuación.
