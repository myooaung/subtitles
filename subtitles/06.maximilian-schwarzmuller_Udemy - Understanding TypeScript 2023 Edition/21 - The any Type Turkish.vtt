WEBVTT

00:02.260 --> 00:03.960
Eğitmen: Bununla birlikte, çekirdek türlerle

00:03.960 --> 00:04.920
işimiz neredeyse bitti.

00:04.920 --> 00:07.470
Daha önce gördüğümüz bir tür daha vardır

00:07.470 --> 00:09.390
ve bu herhangi bir türdür.

00:09.390 --> 00:11.480
any türü, TypeScript'te atayabileceğiniz

00:11.480 --> 00:13.310
en esnek türdür.

00:13.310 --> 00:16.710
Bu tür TypeScript'e hiçbir şey söylemez.

00:16.710 --> 00:19.960
Temel olarak, orada her türlü değeri saklayabileceğiniz anlamına gelir.

00:19.960 --> 00:22.031
Belirli bir tip atamamız yok.

00:22.031 --> 00:25.260
TypeScript, herhangi birini kullandığınızda temelde

00:25.260 --> 00:27.040
size asla bağırmaz.

00:27.040 --> 00:28.030
Buradaki kodumuza geri

00:28.030 --> 00:31.360
dönersek, favori etkinliklerin türünü herhangi biri olarak ayarlarsam

00:31.360 --> 00:32.870
hata almayacağım.

00:32.870 --> 00:36.580
Herhangi bir diziye ayarlarsa, en azından TypeScript'e favori etkinliklerin

00:36.580 --> 00:39.220
bir şeyin dizisi olduğunu söylerim.

00:39.220 --> 00:41.460
Yani orada sadece tek bir değer depolayacak

00:41.460 --> 00:42.830
olsaydım, hata alırdım.

00:42.830 --> 00:44.500
Ancak bir dizi olduğu sürece, orada

00:44.500 --> 00:46.638
istediğim her şeyi saklayabilirim.

00:46.638 --> 00:49.840
Yani herhangi biri gerçekten esnektir.

00:49.840 --> 00:52.070
Ve bu ilk başta kulağa harika gelebilir,

00:52.070 --> 00:54.060
ancak aslında büyük bir dezavantajdır

00:54.060 --> 00:58.290
ve mümkün olduğunca kesinlikle kaçınmak istersiniz.

00:58.290 --> 01:00.170
Çünkü herhangi biri TypeScript'in size

01:00.170 --> 01:02.512
sağladığı tüm avantajları ortadan kaldırır.

01:02.512 --> 01:04.380
Size vanilya JavaScript ile yaşadığınız

01:04.380 --> 01:06.430
deneyimin aynısını yaşatır, burada

01:06.430 --> 01:10.480
da tabiri caizse her şeyi yazmanız gerekir.

01:10.480 --> 01:13.820
Temel olarak TypeScript derleyicisinin hiçbir şeyi kontrol

01:13.820 --> 01:16.020
edememesini sağlar, çünkü herhangi bir

01:16.020 --> 01:19.180
özellik veya herhangi bir değişken herhangi bir değeri

01:19.180 --> 01:20.818
saklayabiliyorsa, kontrol

01:20.818 --> 01:23.687
edilecek fazla bir şey yoktur, değil mi?

01:23.687 --> 01:27.130
Dolayısıyla, bir değeriniz varsa, orada hangi tür verilerin depolanacağını

01:27.130 --> 01:30.270
gerçekten bilemediğiniz ve daha sonra belirli değerler

01:30.270 --> 01:31.810
için ne yapmak istediğinizi

01:31.810 --> 01:33.820
daraltmak için çalışma zamanında burada

01:33.820 --> 01:37.050
yaptığımız gibi bazı çalışma zamanı kontrolleri kullandığınız

01:37.050 --> 01:42.660
bir tür veri varsa, herhangi birini yedek olarak kullanabilirsiniz.

01:42.660 --> 01:44.600
O zaman herhangi biriyle gidebilirsin.

01:44.600 --> 01:48.210
Ancak diğer durumlarda, gerçekten kaçınmak istersiniz.

01:48.210 --> 01:51.120
Hangi tür verilerle çalıştığınızı bilme

01:51.120 --> 01:54.090
şansınız varsa, bu konuda açık olun.

01:54.090 --> 01:56.780
TypeScript çıkarımının işini yapmasına izin verin veya

01:56.780 --> 01:58.817
kendi türlerinizi açıkça ayarlayın.

01:58.817 --> 02:01.783
İhtiyacınız yoksa hiçbirine geri dönmeyin.
