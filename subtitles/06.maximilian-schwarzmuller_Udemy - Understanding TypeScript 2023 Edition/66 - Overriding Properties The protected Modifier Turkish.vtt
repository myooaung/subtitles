WEBVTT

00:02.210 --> 00:04.400
Şimdi, mirasla ilgili temel bilgiler bunlar.

00:04.400 --> 00:06.900
Temel sınıfımızın yöntemlerini veya

00:06.900 --> 00:09.810
özelliklerini de geçersiz kılabiliriz.

00:09.810 --> 00:13.350
Diyelim ki muhasebede kendi addEmployee yöntemimi

00:13.350 --> 00:15.020
eklemek istiyorum.

00:15.020 --> 00:16.200
Bunu yapabiliriz.

00:16.200 --> 00:18.500
Buraya kendi yöntemimizi ekleyebilir ve

00:18.500 --> 00:20.120
adını buradan alabiliriz.

00:20.120 --> 00:21.330
Şöyle diyelim.

00:21.330 --> 00:22.550
Ve şimdi, burada, bunu eklemek için farklı

00:22.550 --> 00:23.860
bir mantığa sahip olmak istiyorum.

00:23.860 --> 00:27.610
Ekstra bir if kontrolü veya if kontrolü if name=Max, o zaman geri

00:27.610 --> 00:29.410
dönmek istiyorum ve Max'i bir

00:29.410 --> 00:31.930
çalışan olarak eklememek istiyorum, çünkü

00:31.930 --> 00:34.770
Max bunun için tamamen uygun değil.

00:34.770 --> 00:36.360
Aksi takdirde, isim Max değilse,

00:36.360 --> 00:38.050
çalışanı eklemek istiyorum.

00:38.050 --> 00:40.420
Ancak şimdi başka bir sorunla karşı karşıyayız.

00:40.420 --> 00:44.520
Bu iki çalışanı eklemeye çalışırsam, çalışanların bilinen

00:44.520 --> 00:47.500
bir özellik olmadığını görürüz.

00:47.500 --> 00:50.510
Bunun nedeni, çalışanların özel olmasıdır.

00:50.510 --> 00:51.890
İşte bu önemli.

00:51.890 --> 00:54.860
Özel özelliklere yalnızca tanımlandıkları

00:54.860 --> 00:57.360
sınıfın içinden erişilebilir, bu sınıftan

00:57.360 --> 01:00.670
miras alan sınıflardan erişilemez.

01:00.670 --> 01:03.530
Dolayısıyla, çalışanlar departman içinde mevcuttur, ancak

01:03.530 --> 01:06.100
departmana dayalı sınıflarda mevcut değildir.

01:06.100 --> 01:09.040
Dolayısıyla, muhasebe departmanının çalışanların

01:09.040 --> 01:11.320
mülklerine doğrudan erişimi yoktur.

01:11.320 --> 01:15.930
Bu erişimi vermek ve yine de dışarıdan değiştirilebilecek bir özellik

01:15.930 --> 01:19.840
olmadığından emin olmak istiyorsak, bunu korumalı olarak

01:19.840 --> 01:22.080
değiştirebiliriz.

01:22.080 --> 01:25.760
Protected, private gibidir, ancak private'dan farklı olarak,

01:25.760 --> 01:28.280
artık yalnızca bu sınıfta değil, bu sınıfı

01:28.280 --> 01:32.040
genişleten herhangi bir sınıfta da kullanılabilir.

01:32.040 --> 01:35.130
Böylece artık muhasebe departmanımızın içinden

01:35.130 --> 01:37.740
çalışanlara erişebiliyoruz.

01:37.740 --> 01:41.377
Burada, eğer Max değilse artık bir çalışan ekleyebilirim.

01:41.377 --> 01:43.980
Dolayısıyla, şimdi oraya gidip

01:43.980 --> 01:45.680
muhasebemde Max adında

01:45.680 --> 01:49.240
bir çalışan eklemek istiyorum.

01:49.240 --> 01:50.480
Bu işe yaramamalı.

01:50.480 --> 01:52.790
Manu'yu eklemeye çalışırsam, bu işe yaramalı.

01:52.790 --> 01:57.110
Şimdi bunu kaydedersek ve çalışan bilgilerini de buraya yazdırırsak

01:57.110 --> 01:59.196
ve sonra bunu kaydedersek, gerçekten

01:59.196 --> 02:00.840
de orada bir çalışanımız olduğunu

02:00.840 --> 02:03.120
görmeliyiz, bu Manu'dur, AddEmployee

02:03.120 --> 02:08.590
için kendi muhasebe yöntemi mantığım nedeniyle Max eklenmemiştir.

02:08.590 --> 02:10.017
Dolayısıyla, buradaki temel

02:10.017 --> 02:14.010
çıkarım, A) temel sınıfınızın yöntemlerini geçersiz kılabileceğinizdir.

02:14.010 --> 02:16.690
Kendi uygulamanızı ekleyebilirsiniz ve daha

02:16.690 --> 02:18.690
sonra temel sınıfın uygulaması

02:18.690 --> 02:21.023
yerine bu uygulama kullanılır.

02:21.023 --> 02:25.130
Ve B) korumalı mülklere erişimi de kontrol

02:25.130 --> 02:28.100
etmeniz gerekir.

02:28.100 --> 02:29.690
Çünkü private kullanırsanız,

02:29.690 --> 02:32.120
gerçekten bu sınıfla sınırlı kalırsınız,

02:32.120 --> 02:36.400
oysa protected hala dışarıdan erişilemez hale getirir, ancak temel sınıfı

02:36.400 --> 02:39.270
genişleten sınıfların içinden erişilebilir hale

02:39.270 --> 02:41.123
getirir.
