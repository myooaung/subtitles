WEBVTT

00:02.180 --> 00:05.590
講師：オブジェクトのインターフェースに話を戻しましょう｡ 

00:05.590 --> 00:14.100
また､ これから紹介するように､ インターフェースや､ クラスの中にもオプションのプロパティを定義することができます｡

00:14.100 --> 00:16.437
そのためには､ プロパティ名を追加します｡

00:16.437 --> 00:22.238
ここでは「outputName」とします｡ もちろん好きな名前にして､ 文字列にしてください｡

00:22.238 --> 00:27.630
Namedをベースにしたすべてのクラスに､ それを強制するつもりはありません｡

00:27.630 --> 00:31.120
持つか持たないかは任意であるべきです｡ 

00:31.120 --> 00:37.670
オプションのプロパティを指定するには､ プロパティ名の後にクエスチョンマークを付けます｡

00:37.670 --> 00:40.130
これにより､ Tivescriptは､ このプロパティがこのインターフェイスを実装するクラスに存在する可能性はあるが､

00:40.130 --> 00:45.680
存在する必要はないことを示します｡

00:45.680 --> 00:48.540
したがって､ 'Person'では､ オプションであるため､

00:48.540 --> 00:53.440
出力名プロパティを持っていないにもかかわらず､ ここではエラーが発生しないのです｡

00:53.440 --> 00:56.072
もちろん､ ここに出力名を追加して､ 何らかの値で初期化したり､

00:56.072 --> 00:59.130
他のプロパティのように使用したりすることもできますが､

00:59.130 --> 01:02.800
その必要はありません｡

01:02.800 --> 01:06.720
さて､ クラスにはオプションのプロパティを設定することもできます｡ 

01:06.720 --> 01:09.670
ここで同じ名前をオプションにしましょう｡ もしかしたら､

01:09.670 --> 01:13.840
ここでNの値を取得できないかもしれないからです｡

01:13.840 --> 01:17.460
私たちのクラスでは､ ここにもクエスチョンマークを付けることができます｡

01:17.460 --> 01:20.890
Namedでは､ これをオプションにする必要があります｡

01:20.890 --> 01:26.012
そうしないと､ 文字列にすることを強制するインターフェースに違反します｡

01:26.012 --> 01:29.000
今､ 私はこれはオプションでもいいと言っています｡ 

01:29.000 --> 01:30.510
ですから､ ここでは任意ではなく､

01:30.510 --> 01:32.750
これをNに等しく設定するときは､ Nが真実である場合､

01:32.750 --> 01:37.640
設定されている場合にのみ行いたいのです｡

01:37.640 --> 01:40.080
だから､ 例えば空文字列でない場合のみ｡ 

01:40.080 --> 01:43.340
そうでなければ､ nameは設定されません｡ 私は､

01:43.340 --> 01:49.853
このインターフェイスでもクラスでも､ nameをオプションのプロパティにしたので大丈夫です｡

01:50.790 --> 01:53.070
ここで､ 新しいオブジェクトを構築するときに､

01:53.070 --> 01:56.203
名前を渡さずにこれを行うことができます｡

01:57.060 --> 01:59.813
これを可能にするには､ コンストラクタでデフォルト値を指定するか､

01:59.813 --> 02:05.120
ここにクエスチョンマークを追加する必要があります｡

02:05.120 --> 02:06.260
これはすべて､ それを可能にするためです｡ 

02:06.260 --> 02:08.800
オプションのパラメータを追加する場合は､

02:08.800 --> 02:17.170
デフォルトのフォールバック値を指定するか､ クエスチョンマークを追加してデフォルト値を未定義にします｡

02:17.170 --> 02:22.446
そして､ オプションのパラメータがあるので､ 値なしでこのコンストラクタを呼び出すことができます｡

02:22.446 --> 02:27.930
また､ オプションのプロパティがあるので､ 初期化する必要はありません｡

02:27.930 --> 02:29.648
それゆえ､ もしあなたが挨拶をするならば､

02:29.648 --> 02:33.510
この名前はもちろん未定義になります｡

02:33.510 --> 02:35.640
ですから､ ここで名前があるかどうかも確認した方がいいでしょう｡

02:35.640 --> 02:39.100
名前があれば､ コンソールで表示します｡

02:39.100 --> 02:39.100
を記録しています｡ 

02:39.100 --> 02:42.970
エルセーヌ､ コンソールをする｡  ログ「こんにちは」は､ 名前がないので､

02:42.970 --> 02:45.200
何の言及もありません｡

02:45.200 --> 02:47.170
もし､ すべてがコンパイルされ､

02:47.170 --> 02:48.840
名前が提供されなかったので､

02:48.840 --> 02:51.520
ここにhiと表示されるだけだとしたら｡

02:51.520 --> 02:53.950
つまり､ クラスやインターフェイス､

02:53.950 --> 02:59.910
そしてコンストラクタのリストにあるオプションのプロパティになるわけです｡

02:59.910 --> 03:01.660
ここでもう一度はっきりさせておきたいのは､

03:01.660 --> 03:04.790
この3つはあくまで緩やかな関係であるということです｡

03:04.790 --> 03:11.910
インターフェースでオプションのプロパティを作成し､ クラスで非オプションのプロパティとして実装することができます｡

03:11.910 --> 03:14.550
この場合､ 常に初期化されるようなロジックにしないと､

03:14.550 --> 03:19.720
先ほど見たようなエラーが発生します｡

03:19.720 --> 03:22.180
あるいは､ インターフェースにオプションのプロパティがあり､

03:23.723 --> 03:31.630
クラスにオプションのプロパティがある場合､ ここですべてのケースで値を代入する必要はありません｡

03:31.630 --> 03:34.210
さらに､ ここではまったく関係ありませんが､

03:34.210 --> 03:40.300
関数やメソッド（コンストラクタを含む）にもオプションのパラメータを指定することができます｡

03:40.300 --> 03:43.810
オプションのパラメータは､ クエスチョンマークで定義され､

03:43.810 --> 03:51.690
設定されていない場合のデフォルト値は未定義であるか､ または単に以下のようにデフォルト値が割り当てられています｡

03:51.690 --> 03:53.785
それから､ 学習したように､ これもオプションで､

03:53.785 --> 03:58.750
より具体的な値を渡さなければ､ デフォルトの値が想定されます｡

03:58.750 --> 04:00.720
そのため､ クラスをどのように構成するか､

04:00.720 --> 04:02.950
また､ インターフェースについて話すとき､

04:02.950 --> 04:09.103
クラスが遵守する必要がある契約をどのように構成するかについて､ より柔軟性を持たせることができます｡
