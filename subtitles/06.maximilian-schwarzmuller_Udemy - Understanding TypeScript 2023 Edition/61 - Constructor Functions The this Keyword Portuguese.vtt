WEBVTT

00:02.160 --> 00:03.330
Apresentador: Agora

00:03.330 --> 00:06.080
as classes e todas as funções do construtor que

00:06.080 --> 00:09.280
existem há mais tempo não têm apenas propriedades que

00:09.280 --> 00:12.780
você pode usar para definir a estrutura geral do objeto.

00:12.780 --> 00:14.770
Você também pode acrescentar métodos.

00:14.770 --> 00:17.460
Na verdade, temos o método do construtor ali.

00:17.460 --> 00:19.620
Mas isso é apenas uma função utilitária,

00:19.620 --> 00:22.940
que é chamada, quando você faz instanciar a classe.

00:22.940 --> 00:25.584
Lembre-se, no passado, só tínhamos funções de construtor,

00:25.584 --> 00:28.100
agora temos esse açúcar sintático, mas ainda temos a

00:28.100 --> 00:30.460
construção de uma função que podemos acrescentar

00:30.460 --> 00:33.300
para executar qualquer código de inicialização.

00:33.300 --> 00:36.350
Você também pode querer acrescentar algumas funções

00:36.350 --> 00:38.600
ou métodos que depois são chamados, os quais

00:38.600 --> 00:40.980
você pode chamar no objeto criado.

00:40.980 --> 00:44.000
Por exemplo, um método de descrição aqui em nossa

00:44.000 --> 00:46.000
classe de departamento.

00:46.000 --> 00:47.994
Agora é adicionado um método como

00:47.994 --> 00:49.382
este, o nome do método,

00:49.382 --> 00:53.270
depois nenhum cólon, nenhum sinal de igual, parênteses e, em

00:53.270 --> 00:56.090
vez disso, aparelho encaracolado.

00:56.090 --> 00:59.070
Os parênteses aceitam qualquer argumento que você possa precisar.

00:59.070 --> 01:00.780
Agora digamos aqui, não precisamos de nenhum,

01:00.780 --> 01:03.330
caso contrário você poderia acrescentar parâmetros exatamente

01:03.330 --> 01:05.150
como o faz em uma função regular.

01:05.150 --> 01:07.280
E o que você normalmente precisa sempre

01:07.280 --> 01:10.000
é de um corpo funcional ou de um corpo de método entre

01:10.000 --> 01:12.020
os suportes encaracolados.

01:12.020 --> 01:14.693
Aqui você define agora a lógica de seu método.

01:15.580 --> 01:19.570
E lá talvez queiramos divulgar o nome do departamento

01:19.570 --> 01:22.410
com um pouco de informação extra.

01:22.410 --> 01:26.230
Podemos fazer isso, é claro, aqui com o console. log, por exemplo, departamento,

01:26.230 --> 01:30.620
cólon e depois talvez nome.

01:30.620 --> 01:32.100
No entanto, isto não funcionaria.

01:32.100 --> 01:34.570
Isto procuraria um nome de variável,

01:34.570 --> 01:37.710
que tem que existir dentro deste método descrito,

01:37.710 --> 01:40.860
ou fora da classe como uma variável global.

01:40.860 --> 01:42.470
E como você vê se escolheu a idade,

01:42.470 --> 01:44.433
recebo um erro de nome Não faço isso,

01:44.433 --> 01:46.540
não recebo isso porque na verdade há uma

01:46.540 --> 01:50.100
variável de nome global no navegador no objeto da janela.

01:50.100 --> 01:53.030
No entanto, isto não se referiria a esta propriedade

01:53.030 --> 01:57.130
de nome aqui, mas a alguma variável de nome global fora desta classe.

01:57.130 --> 01:59.599
Para nos referirmos a uma propriedade ou método

01:59.599 --> 02:01.930
de classe de dentro da classe, temos que usar

02:01.930 --> 02:03.590
esta palavra-chave como o fazemos

02:03.590 --> 02:05.630
aqui no construtor.

02:05.630 --> 02:08.980
Isto se refere então tipicamente à instância

02:08.980 --> 02:12.400
concreta desta classe que foi criada.

02:12.400 --> 02:14.240
E ali, com a notação de pontos, podemos

02:14.240 --> 02:16.600
acessar todas as propriedades e métodos fora desta

02:16.600 --> 02:17.650
instância.

02:17.650 --> 02:19.555
Neste caso, isto. nome.

02:19.555 --> 02:24.555
Portanto, se eu agora, lá embaixo, chamar a contabilidade. descrever assim.

02:24.583 --> 02:28.110
Esta palavra-chave, quando for executada, se referirá

02:28.110 --> 02:30.920
a este objeto concreto de contabilidade que

02:30.920 --> 02:33.730
foi construído com base nesta classe.

02:33.730 --> 02:35.530
Portanto, se eu agora salvar isso,

02:35.530 --> 02:38.570
e recarregarmos, devemos ver esta saída aqui, da qual

02:38.570 --> 02:40.420
é claro que tem uma gralha, mas geralmente

02:40.420 --> 02:42.110
funciona.

02:42.110 --> 02:43.944
Vamos agora consertar a gralha aqui.

02:43.944 --> 02:46.190
Assim, é assim que podemos acrescentar um método.

02:46.190 --> 02:48.166
Agora, que palavra importante sobre esta palavra-chave.

02:48.166 --> 02:50.600
Como você provavelmente sabe, se você trabalhou

02:50.600 --> 02:54.890
um pouco com JavaScript, esta palavra-chave pode ser complicada.

02:54.890 --> 02:56.090
Por exemplo, se

02:56.090 --> 03:00.090
eu acrescentasse outro objeto aqui cópia contábil

03:01.480 --> 03:03.350
e este é nosso objeto que

03:03.350 --> 03:06.430
tem apenas o método de descrição e ouso apontar

03:06.430 --> 03:11.270
para a contabilidade. descrever.

03:11.270 --> 03:15.470
Então, se eu chamar a contabilidade. descrever como um método, o que você

03:15.470 --> 03:17.150
acha que vai acontecer?

03:17.150 --> 03:19.200
Você acha que vamos cometer um erro?

03:19.200 --> 03:21.200
Certamente não recebemos nenhum erro de

03:21.200 --> 03:22.927
compilação que compila muito bem.

03:22.927 --> 03:26.360
Mas em tempo de execução, vemos o departamento indefinido.

03:26.360 --> 03:28.780
E a razão disso é que o que estou fazendo é

03:28.780 --> 03:32.010
adicionar uma propriedade descritiva a este objeto

03:32.010 --> 03:34.040
que é criado com o objeto literalmente,

03:34.040 --> 03:37.888
não baseado nesta classe, mas como um objeto fictício não baseado

03:37.888 --> 03:41.420
em nenhuma classe específica que você definiu.

03:41.420 --> 03:44.360
E então o valor para esta descrição de propriedade

03:44.360 --> 03:49.000
é um ponteiro no método de descrição no meu objeto contábil.

03:49.000 --> 03:52.168
Portanto, estou apontando para este método aqui para

03:52.168 --> 03:54.690
encontrar para este objeto concreto.

03:54.690 --> 03:56.240
Não vou executá-lo.

03:56.240 --> 03:57.723
Portanto, não estou passando

03:57.723 --> 04:00.410
o valor da execução desta função para descrever.

04:00.410 --> 04:04.090
Estou realmente passando a função em si para descrever aqui.

04:04.090 --> 04:06.430
Então, quando eu chamo para descrever aqui

04:06.430 --> 04:08.950
na cópia, ele de fato executa o método, tudo isso

04:08.950 --> 04:10.440
funciona corretamente.

04:10.440 --> 04:13.690
O problema é que, quando este método for executado,

04:13.690 --> 04:17.040
isto não se referirá a este objeto do qual este método

04:17.040 --> 04:19.170
fazia parte originalmente, portanto,

04:19.170 --> 04:21.140
não ao objeto contábil.

04:21.140 --> 04:22.350
Em vez disso, isto, e

04:22.350 --> 04:25.050
esta é uma boa regra de ouro que você pode memorizar,

04:25.050 --> 04:27.900
normalmente se refere à coisa que é responsável

04:27.900 --> 04:29.650
por chamar um método.

04:29.650 --> 04:32.190
E o responsável por chamar aqui o método de

04:32.190 --> 04:34.880
descrição, neste caso, é a cópia contábil.

04:34.880 --> 04:39.160
Porque chamamos a descrição na cópia da contabilidade.

04:39.160 --> 04:42.320
Portanto, isto se referirá à coisa na frente do ponto aqui,

04:42.320 --> 04:43.980
que é a cópia contábil.

04:43.980 --> 04:47.530
Isso, entretanto, é um objeto que não tem nome de propriedade.

04:47.530 --> 04:49.678
Portanto, quando eu tiver acesso a isto. nome, recebo

04:49.678 --> 04:53.968
um erro por causa disto não se referir a um objeto

04:53.968 --> 04:56.610
com um nome de propriedade.

04:56.610 --> 04:59.220
Portanto, o nome nos rende indefinidamente.

04:59.220 --> 05:02.260
E é por isso que estou obtendo este resultado estranho.

05:02.260 --> 05:04.310
Isso é uma coisa que você tem que ter em mente,

05:04.310 --> 05:07.470
não apenas em TypeScript, é uma coisa em JavaScript.

05:07.470 --> 05:09.540
E é claro, portanto, isso também pode

05:09.540 --> 05:11.500
acontecer com você em TypeScript.

05:11.500 --> 05:13.940
Agora, para contornar este, "este" problema,

05:13.940 --> 05:16.660
você pode adicionar um parâmetro ao método

05:16.660 --> 05:18.150
de descrição, que é chamado

05:18.150 --> 05:19.730
assim.

05:19.730 --> 05:21.380
Esse é um parâmetro especial,

05:21.380 --> 05:25.334
uma instrução especial entendida pelo TypeScript.

05:25.334 --> 05:28.430
Se você acrescentar um parâmetro chamado aqui,

05:28.430 --> 05:31.420
não é realmente um parâmetro que se espera,

05:31.420 --> 05:36.010
você ainda pode chamar a descrição sem passar em nenhum valor.

05:36.010 --> 05:38.476
Em vez disso, isto é interpretado pelo

05:38.476 --> 05:42.980
TypeScript, para ser uma dica a respeito do que deve ser referido.

05:42.980 --> 05:45.960
E agora é importante atribuir um tipo a isto.

05:45.960 --> 05:48.810
E o tipo aqui, neste caso, deveria ser nosso tipo

05:48.810 --> 05:51.780
de classe aqui, portanto, departamento.

05:51.780 --> 05:53.840
O que estou dizendo com isto é que,

05:53.840 --> 05:56.250
quando a descrição é executada dentro

05:56.250 --> 05:59.375
da descrição, então neste caso aqui, deve sempre

05:59.375 --> 06:02.550
se referir a uma instância que é baseada na classe

06:02.550 --> 06:05.040
do departamento.

06:05.040 --> 06:09.160
Portanto, um objeto que, no final, seria do tipo departamento.

06:09.160 --> 06:12.370
E, portanto, agora realmente recebemos um erro lá

06:12.370 --> 06:14.140
embaixo, recebemos um erro

06:14.140 --> 06:16.012
aqui, porque o que temos aqui é

06:16.012 --> 06:19.800
que quando chamamos de descrever aqui na cópia da contabilidade,

06:19.800 --> 06:24.100
não estamos chamando em uma instância do departamento.

06:24.100 --> 06:26.350
Portanto, isto será violado.

06:26.350 --> 06:29.540
Isto, neste caso, não se referirá a um

06:29.540 --> 06:32.250
objeto do tipo departamento.

06:32.250 --> 06:34.690
Portanto, aqui adicionamos algum tipo extra

06:34.690 --> 06:36.920
de segurança acrescentando este parâmetro

06:36.920 --> 06:39.450
falso, porque agora se eu tentar salvar isto,

06:39.450 --> 06:42.480
eu recebo um erro relacionado a esta linha aqui.

06:42.480 --> 06:44.950
Porque agora, de fato, executaríamos algum código

06:44.950 --> 06:47.030
que não funcionaria como esperado.

06:47.030 --> 06:49.260
Portanto, temos que consertar isso, por exemplo,

06:49.260 --> 06:51.140
adicionando aqui uma propriedade de

06:52.040 --> 06:55.290
nome para que isso funcione, porque agora o TypeScript vê Ok, o objeto

06:55.290 --> 06:57.702
sobre o qual você está chamando para descrever,

06:57.702 --> 07:02.702
agora tem uma propriedade de nome exatamente como esta espera que tenha, porque isto é baseado no

07:03.840 --> 07:05.803
objeto de departamento, que também tem

07:05.803 --> 07:08.070
uma propriedade de nome.

07:08.070 --> 07:10.790
Portanto, agora aqui, o TypeScript ficaria feliz porque

07:10.790 --> 07:12.270
acrescentamos o nome.

07:12.270 --> 07:14.934
Se eu o remover, recebemos o erro de volta com

07:14.934 --> 07:17.277
o nome como quer que isto funcione, e evitamos

07:17.277 --> 07:19.750
esta saída indefinida de antes.

07:19.750 --> 07:22.770
Por isso, é importante entender isso.

07:22.770 --> 07:26.140
E é importante estar ciente desta melhoria que você poderia acrescentar

07:26.140 --> 07:28.410
ao seu código para ter certeza de que você pegue

07:28.410 --> 07:31.190
comportamentos indesejados como os que tivemos lá

07:31.190 --> 07:32.993
embaixo antes.
