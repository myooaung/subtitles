WEBVTT

00:02.400 --> 00:04.350
Instruktor: Przestrzenie nazw

00:04.350 --> 00:07.240
są całkiem fajne, ale niekoniecznie idealne.

00:07.240 --> 00:09.680
Widzieliśmy jeden problem w ostatnim wykładzie,

00:09.680 --> 00:13.290
w którym ręcznie dodałem wszystkie pendencje do każdego pliku.

00:13.290 --> 00:15.620
Kiedy usuwam, przeciągam i upuszczam z listy

00:15.620 --> 00:17.340
projektów, tak na przykład, nadal

00:17.340 --> 00:18.900
kompiluje się bez błędów.

00:18.900 --> 00:20.350
To nie jest idealne rozwiązanie.

00:20.350 --> 00:22.360
Teraz może to działać lub nie, w zależności

00:22.360 --> 00:25.047
od tego, czy jakiś inny plik importuje model przeciągania,

00:25.047 --> 00:26.590
który ja, ostatecznie, potrzebuję

00:26.590 --> 00:27.550
tutaj.

00:27.550 --> 00:29.100
Co w tym przypadku miałoby miejsce.

00:29.100 --> 00:31.533
Więc technicznie, nawet po usunięciu

00:31.533 --> 00:33.200
tego, działa tutaj.

00:33.200 --> 00:35.580
Ale to nie jest wspaniałe, to jest dość niebezpieczne.

00:35.580 --> 00:38.560
Jeśli polegamy na tym, że jakiś plik załatwi to za

00:38.560 --> 00:41.990
nas, no to jeśli potem usuniemy lub zmienimy ten plik, który

00:41.990 --> 00:44.830
uratował nam tyłek, to nagle zmieniamy coś zupełnie

00:44.830 --> 00:49.240
niezwiązanego i nasza aplikacja przestaje działać.

00:49.240 --> 00:51.420
Zdecydowanie tego nie chcemy.

00:51.420 --> 00:53.900
Byłoby więc miło, gdybyśmy mieli import

00:53.900 --> 00:58.050
i eksport, które jasno określają, co importujemy z jakiego pliku.

00:58.050 --> 00:59.660
I jeśli potrzebujemy czegoś

00:59.660 --> 01:01.120
tutaj, Drag Target na przykład,

01:01.120 --> 01:03.400
i nie importujemy go jawnie, otrzymujemy

01:03.400 --> 01:04.840
błąd.

01:04.840 --> 01:06.450
To jest w zasadzie to, czego chcemy.

01:06.450 --> 01:10.235
I otrzymujemy to zachowanie z modułami ES6.

01:10.235 --> 01:12.930
Teraz moduły ES6 istnieją również poza typem

01:12.930 --> 01:14.800
świata, nowoczesne przeglądarki

01:14.800 --> 01:17.340
obsługują je natywnie, gdzie przeglądarka

01:17.340 --> 01:19.630
będzie wtedy zasadniczo pobierać wszystkie

01:19.630 --> 01:22.960
pendencje pliku podczas wykonywania.

01:22.960 --> 01:25.150
Ale typy mogłyby również importować je, a następnie

01:25.150 --> 01:28.350
dostaje początkowe wsparcie typu, gdy używamy ich.

01:28.350 --> 01:31.007
A teraz jak działają moduły ES6?

01:31.007 --> 01:33.600
Ponownie zacznijmy od przeciągania i upuszczania.

01:33.600 --> 01:35.240
Usuńmy tę rzecz przestrzeni nazw,

01:35.240 --> 01:37.360
która jest czystą confeature typów.

01:37.360 --> 01:40.030
Zachowajmy jednak słowo klucz w postaci eksportu.

01:40.030 --> 01:42.150
Słowo kluczowe eksportu nie jest po prostu

01:42.150 --> 01:44.290
tam, aby pracować z przestrzeniami nazw, jest

01:44.290 --> 01:46.980
to w rzeczywistości domyślna składnia skryptu Java, która

01:46.980 --> 01:49.800
jest wszystko tak samo ważne przez typ script.

01:49.800 --> 01:52.360
Oznacza to, że eksportujesz tę interfazę

01:52.360 --> 01:53.600
i tę tutaj również

01:53.600 --> 01:56.870
z tego pliku i możesz ją następnie zaimportować

01:56.870 --> 01:58.460
do innego pliku.

01:58.460 --> 02:01.290
W naszym przypadku tutaj potrzebujemy go w plikach pozycji

02:01.290 --> 02:02.980
projektu i listy projektu.

02:02.980 --> 02:05.230
Teraz zacznijmy od pozycji projektu.

02:05.230 --> 02:09.030
Aby zaimportować coś z modułu ES, więc z tym syntaktykiem

02:09.030 --> 02:11.450
modułu ES, określasz import na górze

02:11.450 --> 02:16.110
pliku lub w pobliżu góry pliku, zanim zaczniesz pisać jakikolwiek

02:16.110 --> 02:18.970
rzeczywisty kod.

02:18.970 --> 02:23.240
Importuj z i wtedy wskazujesz na ten plik ścieżką

02:23.240 --> 02:27.320
względną z pliku na którym importujesz.

02:27.320 --> 02:29.340
W tym przypadku musimy więc wejść na I poziom

02:29.340 --> 02:31.030
z dwoma kropkami i ukośnikiem.

02:31.030 --> 02:32.509
Tak, że jesteśmy w folderze źródłowym,

02:32.509 --> 02:35.550
a następnie musimy przejść tutaj do folderu modułów i zaimportować

02:35.550 --> 02:37.450
drag and drop.

02:37.450 --> 02:40.480
Teraz ważne, dodaj tutaj kropkę JS, bo musisz

02:40.480 --> 02:43.480
zaimportować tak jakby to już było skompilowane,

02:43.480 --> 02:46.470
bo to będzie przejęte do waniliowego Java

02:46.470 --> 02:49.130
script i wtedy powinno szukać tam Java

02:49.130 --> 02:50.860
script więc dla plików Java

02:50.860 --> 02:55.010
script więc kropka JS musi być dodana.

02:55.010 --> 02:57.560
Teraz importujesz coś stamtąd i dla than dodajesz

02:57.560 --> 02:59.320
nawiasy klamrowe pomiędzy którymi

02:59.320 --> 03:01.500
określasz co chcesz zaimportować z

03:01.500 --> 03:03.150
tego pliku.

03:03.150 --> 03:06.430
Tam już dostaję autouzupełnianie chcę zaimportować

03:06.430 --> 03:08.480
draggable.

03:08.480 --> 03:10.910
Teraz draggable jest dostępny tutaj,

03:10.910 --> 03:14.430
a typy widzą, że nie jest dostępny i są szczęśliwe.

03:14.430 --> 03:16.860
Teraz musimy przekonwertować wszystko tak, aby można było

03:16.860 --> 03:17.930
pokazać w czasie biegu.

03:17.930 --> 03:20.370
Pozbądźmy się więc i tutaj przestrzeni nazw.

03:20.370 --> 03:22.340
Teraz należy również zamknąć klamrę łukową.

03:22.340 --> 03:24.870
I na przykład teraz tutaj dostajemy to co chcemy,

03:24.870 --> 03:27.540
dostajemy błędy, dostajemy błąd komponentu, projektu,

03:27.540 --> 03:29.650
tego wszystkiego brakuje.

03:29.650 --> 03:31.890
Wyeksportujmy więc i zaimportujmy wszystkie te rzeczy.

03:31.890 --> 03:33.220
Na przykład w komponencie bazowym

03:33.220 --> 03:34.540
pozbądź się przestrzeni nazw, zachowaj

03:34.540 --> 03:36.810
słowo kluczowe eksportu, jak się nauczyłeś.

03:36.810 --> 03:38.270
Pozbądź się zamykającego nawiasu

03:38.270 --> 03:40.810
klamrowego i przeformatuj oraz zaimportuj projekt.

03:40.810 --> 03:43.380
Zawsze możemy pozbyć się przestrzeni nazw.

03:43.380 --> 03:45.760
I wszystkie odniesienia tutaj, możesz faktycznie usunąć

03:45.760 --> 03:48.803
wszystkie importy referencyjne, które masz w dowolnym miejscu.

03:51.300 --> 03:53.593
Pozbądź się wszystkich spacji nazwy nawiasów klamrowych.

03:55.010 --> 03:56.950
Lista projektów, pozbądź się całej przestrzeni

03:56.950 --> 03:58.466
nazw i referencji, pozbądź się zamykającego

03:58.466 --> 04:00.690
nawiasu klamrowego na dole.

04:00.690 --> 04:03.320
I dekoratory, pozbądź się przestrzeni nazw i

04:03.320 --> 04:05.330
zamykającego nawiasu klamrowego

04:05.330 --> 04:07.940
oraz drag and drop, już się tego pozbyliśmy.

04:07.940 --> 04:10.230
Projekt, pozbądź się przestrzeni nazw i zamykającego

04:10.230 --> 04:11.920
nawiasu klamrowego.

04:11.920 --> 04:14.460
Project stayed bez zaskoczenia pozbywa się przestrzeni

04:14.460 --> 04:16.223
nazw i zamknięcia.

04:18.390 --> 04:22.620
Curly brace tutaj faktycznie polegaliśmy na tym, że projekt był importowany

04:22.620 --> 04:24.740
przez jakiś inny plik, nie miałem tutaj

04:24.740 --> 04:26.620
referencji do niego.

04:26.620 --> 04:28.770
Więc to było to niebezpieczne zachowanie,

04:28.770 --> 04:29.880
o którym mówiłem.

04:29.880 --> 04:31.871
Mogłoby się to nie udać, gdybyśmy nie importowali

04:31.871 --> 04:35.120
lub gdybyśmy nie odwoływali się do naszej części projektu w przestrzeni

04:35.120 --> 04:36.710
nazw w jakimś innym pliku.

04:36.710 --> 04:39.090
Więc to definitywnie nie było idealne.

04:39.090 --> 04:41.560
Ale z tym kontynuujmy nasz refaktoring.

04:41.560 --> 04:44.430
W walidacji tutaj pozbądź się przestrzeni nazw

04:44.430 --> 04:46.050
i wszystkich zamykających

04:46.050 --> 04:47.550
klamerek na dole.

04:47.550 --> 04:49.150
I last but not least app TS, pozbądź

04:49.150 --> 04:51.503
się tych importów i przestrzeni nazw.

04:52.700 --> 04:55.350
Więc teraz mamy wszędzie błędy, ale teraz

04:55.350 --> 04:56.988
możemy zacząć od nowa.

04:56.988 --> 04:59.560
Teraz może zacznijmy od początku w komponencie bazowym.

04:59.560 --> 05:01.610
To się dobrze zapowiada, nie narzeka

05:01.610 --> 05:03.700
wydaje się, że ma wszystko co chce.

05:03.700 --> 05:06.250
Import projektu, no cóż, jest to narzekanie.

05:06.250 --> 05:08.450
Na przykład tam musimy komponować.

05:08.450 --> 05:12.070
Dodajmy więc na górze import i pozwólmy

05:12.070 --> 05:15.830
importować komponent z bazy dot slash.

05:15.830 --> 05:18.410
W ten sposób importujesz względnie, jeśli coś

05:18.410 --> 05:19.990
jest w tym samym folderze.

05:19.990 --> 05:22.370
Dot slash na początku, potem nazwa pliku

05:22.370 --> 05:24.490
i potem wszystko jest ważne dot JS.

05:24.490 --> 05:26.753
Nie zapomnij o kropce JS na końcu.

05:28.100 --> 05:30.250
Teraz potrzebujemy również interfazy

05:31.170 --> 05:34.650
validatable tutaj i metody validate, auto mind

05:34.650 --> 05:36.810
i stan projektu.

05:36.810 --> 05:39.140
Więc zaimportujmy te wszystkie

05:39.140 --> 05:44.080
rzeczy zaimportujmy z dot slash, lub no go up one level then

05:44.080 --> 05:46.149
util następnie validation

05:46.149 --> 05:49.460
dot JS, zaimportujmy z That File, validatable

05:49.460 --> 05:52.100
i funkcję validate oraz zaimportujmy

05:53.010 --> 05:56.250
auto bind z, idąc w górę o jeden poziom decorators

05:56.250 --> 06:00.350
autobind JS.

06:00.350 --> 06:02.600
I last but not least the project

06:02.600 --> 06:05.220
state let's import from going up one

06:05.220 --> 06:07.580
level state project state JS .

06:07.580 --> 06:11.000
Stamtąd możemy zaimportować wyeksportowaną

06:11.000 --> 06:13.250
tam stałą stanu projektu.

06:13.250 --> 06:15.390
Teraz są to wszystkie importy, których potrzebujemy,

06:15.390 --> 06:16.773
aby ten plik działał.

06:18.190 --> 06:20.480
Przejdźmy więc teraz do punktu projektu.

06:20.480 --> 06:23.270
Tam potrzebujemy autobinda, potrzebujemy komponentu,

06:23.270 --> 06:24.853
potrzebujemy modelu projektu.

06:24.853 --> 06:26.700
Dodajmy więc te wszystkie rzeczy.

06:26.700 --> 06:30.520
Przykładowo zaimportujmy model projektu

06:30.520 --> 06:34.523
z dot dot slash models project JS.

06:35.580 --> 06:38.080
Dodajmy również komponent, który mieszka

06:39.340 --> 06:41.110
w tym samym folderze .

06:41.110 --> 06:45.530
Zatem zaimportujmy z dot slash base component

06:45.530 --> 06:49.020
JS i auto bind, zaimportujmy z dot

06:50.790 --> 06:55.790
slash decorators auto bind JS.

06:56.020 --> 06:59.383
A teraz ten plik tutaj też ma wszystko, czego potrzebuje.

07:01.260 --> 07:03.410
Teraz przejdźmy do listy projektów.

07:03.410 --> 07:06.610
Tutaj w project list potrzebujemy również komponentu

07:06.610 --> 07:10.250
jako on, więc właściwie skopiujemy to tutaj z project

07:10.250 --> 07:14.260
item dodajemy to do project list TS, ale nie potrzebujemy draggoble

07:14.260 --> 07:16.120
tutaj ale drag target zamiast

07:16.120 --> 07:19.420
tego więc zaimportujmy to.

07:19.420 --> 07:22.307
A dodatkowo potrzebujemy

07:22.307 --> 07:24.550
stanu projektu.

07:24.550 --> 07:26.540
Tak, to są rzeczy, których potrzebujemy.

07:26.540 --> 07:28.780
A także klasa pozycji projektu.

07:28.780 --> 07:31.030
Z pliku modelu projektu możemy więc zaimportować

07:31.030 --> 07:32.720
również status projektu.

07:32.720 --> 07:35.340
Możesz zaimportować wiele wyeksportowanych rzeczy

07:35.340 --> 07:36.840
z jednego tego samego pliku, po

07:36.840 --> 07:38.730
prostu oddzielając je przecinkiem między

07:38.730 --> 07:41.740
tymi nawiasami klamrowymi, tak jak widzisz to tutaj.

07:41.740 --> 07:45.910
Importujemy również stałą stanu projektu z folderu

07:46.790 --> 07:48.790
state, project state JS

07:48.790 --> 07:52.470
i również importujemy last but not least, tutaj

07:52.470 --> 07:54.790
na samym dole potrzebujemy,

07:54.790 --> 07:57.130
klasę project item.

07:57.130 --> 08:01.770
Tak więc importuj element projektu z kropka slash project

08:01.770 --> 08:03.623
item kropka JS.

08:06.810 --> 08:08.280
Więc ruszajmy dalej.

08:08.280 --> 08:11.280
Autobind jest w porządku, status projektu narzekający

08:11.280 --> 08:13.600
tam potrzebujemy modelu projektu.

08:13.600 --> 08:15.740
Tak więc u góry zaimportujmy

08:16.820 --> 08:20.300
projekt z idących o jeden poziom wyżej modeli

08:20.300 --> 08:22.823
project dot JS.

08:24.450 --> 08:27.630
Używamy tutaj również statusu projektu, więc zaimportujmy

08:27.630 --> 08:29.573
go z tego samego pliku" I z tym,

08:32.320 --> 08:33.960
last but not least dostajemy

08:33.960 --> 08:35.660
plik app TS tam musimy zaimportować

08:35.660 --> 08:38.810
wejście projektu.

08:38.810 --> 08:43.610
z elementów projektu dot slash.

08:43.610 --> 08:48.030
JS i lista projektów z listy projektów JS' Jeśli teraz

08:49.290 --> 08:52.280
zapisaliśmy to powinno skompilować

08:52.280 --> 08:54.330
się bez błędów i teraz używamy

08:54.330 --> 09:00.823
modułów ES6 do organizacji naszego importu i eksportu.

09:02.640 --> 09:05.460
Jeśli jednak spojrzymy na przeglądarkę,

09:05.460 --> 09:07.040
otrzymamy błąd.

09:07.040 --> 09:09.390
Teraz powodem tego jest to, że jeśli sprawdzimy

09:09.390 --> 09:12.013
folder dist, to mamy nasz plik bundle JS prawidłowo.

09:13.040 --> 09:15.900
Teraz musimy ponownie przełączyć TS config.

09:15.900 --> 09:19.070
Dla jednego tutaj nie powinniśmy używać AMD teraz,

09:19.070 --> 09:22.420
ale zamiast tego ES dwadzieścia piętnaście.

09:22.420 --> 09:25.710
Than to w zasadzie słowo kodowe dla ES6, które było

09:25.710 --> 09:27.240
wersją skryptu agma, która

09:27.240 --> 09:29.300
wprowadziła moduły ES.

09:29.300 --> 09:31.260
Więc w zasadzie mówimy skryptowi

09:31.260 --> 09:34.480
typu nie przekształcaj naszego importu w nic, zachowaj

09:34.480 --> 09:36.240
go takim, jakim jest.

09:36.240 --> 09:39.250
Nowoczesne przeglądarki będą to rozumieć.

09:39.250 --> 09:41.290
Więc to jest ważne, również upewnij się,

09:41.290 --> 09:43.433
że masz cel ES6 lub wyższy tutaj' Teraz również

09:44.950 --> 09:47.530
powinieneś ponownie wykomentować plik out, ponieważ

09:47.530 --> 09:50.670
nie jest to obsługiwane przez moduły ES.

09:50.670 --> 09:53.590
A to, co otrzymasz w folderze dist, jest w zasadzie

09:53.590 --> 09:56.610
replikacją twojego folderu źródłowego, ale z

09:56.610 --> 09:58.690
plikami skryptów Java.

09:58.690 --> 10:00.480
Więc teraz musimy również wrócić

10:00.480 --> 10:03.120
do pliku index HDML i ponownie zaimportować app

10:03.120 --> 10:04.840
JS, ponieważ mamy teraz plik app

10:04.840 --> 10:06.350
JS w folderze dist.

10:06.350 --> 10:08.910
I znowu ten plik JS będzie miał twoje deklaracje importu,

10:08.910 --> 10:11.180
ponieważ, jak wspomniałem, jest to obsługiwane

10:11.180 --> 10:13.830
przez Java script, przez nowoczesne silniki Java script

10:13.830 --> 10:15.900
i przez nowoczesne przeglądarki.

10:15.900 --> 10:17.440
A przeglądarka rozwiąże

10:17.440 --> 10:19.440
za Ciebie te importy dlatego.

10:19.440 --> 10:22.430
Więc jeśli teraz przeładujemy to, huh

10:22.430 --> 10:24.240
nadal otrzymamy błąd.

10:24.240 --> 10:27.310
Nie można używać instrukcji importu poza modułem.

10:27.310 --> 10:30.630
Cóż, nowoczesne przeglądarki obsługują ten sintex, ale

10:30.630 --> 10:33.150
musisz powiedzieć im, że chcesz go użyć.

10:33.150 --> 10:37.470
I robisz je, usuwając (mumbles) tutaj i zamiast tego na tagu

10:37.470 --> 10:39.670
skryptu, gdzie importujesz plik,

10:39.670 --> 10:42.777
który ma te oświadczenia importu.

10:42.777 --> 10:46.313
Używasz modułu type equals.

10:47.300 --> 10:50.450
Jeśli teraz bezpiecznie to zobaczysz, że to działa

10:50.450 --> 10:53.440
i teraz jeśli dodamy coś tutaj to znowu otrzymamy

10:53.440 --> 10:56.120
działającą aplikację.

10:56.120 --> 10:58.910
Teraz, jeśli sprawdzisz kartę sieci przy okazji

10:58.910 --> 11:01.680
zobaczysz, że jeśli przeładujesz, jest kilka

11:01.680 --> 11:05.290
żądań sieciowych dzieje się, jeśli powiększam trochę możemy

11:05.290 --> 11:07.410
zobaczyć to lepiej.

11:07.410 --> 11:10.340
Wszystkie nasze pliki skryptów Java są wymagane tutaj.

11:10.340 --> 11:12.810
Są one wymagane automatycznie przez przeglądarkę,

11:12.810 --> 11:14.780
gdy napotyka ona nasz import.

11:14.780 --> 11:16.967
Więc zaczyna się od app JS, potem

11:16.967 --> 11:19.410
widzi import do projektu input JS.

11:19.410 --> 11:21.990
Tu i stąd oczywiście kolejny wniosek idzie na

11:21.990 --> 11:23.160
wejście projektu.

11:23.160 --> 11:25.410
To samo robi dla listy projektów.

11:25.410 --> 11:27.360
Teraz w wejściu projektu na przykład

11:27.360 --> 11:29.422
zobaczyłby wejście z komponentu bazowego

11:29.422 --> 11:31.450
JS, dlatego importuje również komponent

11:31.450 --> 11:33.400
probiznesowy JS.

11:33.400 --> 11:35.530
Więc to jest zrobione przez przeglądarkę

11:35.530 --> 11:38.170
tutaj wykorzystujemy to i teraz mamy inny sposób

11:38.170 --> 11:40.850
dzielenia naszych plików, ale z dodatkową zaletą,

11:40.850 --> 11:43.750
że jasno określamy, czego potrzebujemy z każdego pliku

11:43.750 --> 11:45.850
i jeśli pominiemy import, type-script

11:45.850 --> 11:49.100
krzyczy na nas, czego nie zrobił z poprzednim podejściem,

11:49.100 --> 11:51.127
co jest sposobem, w którym to podejście

11:51.127 --> 11:53.400
jest właściwie moją rekomendacją i dlaczego

11:53.400 --> 11:58.870
jest to defacto standardowy sposób importowania i eksportowania.

11:58.870 --> 12:00.710
Teraz, jeśli pracowałeś z type script wcześniej

12:00.710 --> 12:03.850
w innych projektach, powiedzmy w projekcie kątowym, możesz być również

12:03.850 --> 12:06.380
przyzwyczajony do tego, że nie musisz określać rozszerzenia

12:06.380 --> 12:09.270
pliku tutaj Cóż, będziemy mogli również pominąć to, gdy dodamy

12:09.270 --> 12:12.210
web pack i narzędzie rachunku.

12:12.210 --> 12:14.580
Dopóki tego nie mamy i polegamy na przeglądarce

12:14.580 --> 12:16.870
przy imporcie naszych plików trzeba dodać

12:16.870 --> 12:18.833
to dodatkowe rozszerzenie.
