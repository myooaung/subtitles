WEBVTT

00:02.130 --> 00:04.110
Istruttore: Abbiamo preparato il nostro

00:04.110 --> 00:06.137
flusso di sviluppo per Webpack, configurandolo

00:06.137 --> 00:08.490
per il server dev di Webpack, impostando la modalità

00:08.490 --> 00:10.840
di sviluppo e impostando le mappe dei sorgenti

00:10.840 --> 00:13.210
per migliorare la nostra esperienza di debug, per

00:13.210 --> 00:16.570
darci migliori messaggi di errore e così via.

00:16.570 --> 00:20.150
Per la produzione, quando vogliamo preparare il nostro codice

00:20.150 --> 00:23.260
per caricarlo su un server dove verrà poi servito ai nostri

00:23.260 --> 00:27.070
utenti finali, in genere vogliamo un flusso di lavoro diverso.

00:27.070 --> 00:28.790
Pertanto aggiungerò una nuova configurazione

00:28.790 --> 00:31.820
chiamata webpack. config. prod. js.

00:31.820 --> 00:33.210
Questo nome non dipende da voi, perché

00:33.210 --> 00:36.043
Webpack non lo cercherà per impostazione predefinita.

00:36.880 --> 00:39.710
Gli diremo di cercarlo tra un attimo.

00:39.710 --> 00:41.920
Prima di dirlo, copiamo tutte

00:41.920 --> 00:44.708
le impostazioni di sviluppo in questa

00:44.708 --> 00:48.480
configurazione. ma ora mettiamolo a punto.

00:48.480 --> 00:51.150
Possiamo impostare la modalità su produzione, ad esempio.

00:51.150 --> 00:54.380
Questo dirà a Webpack di fare queste ottimizzazioni,

00:54.380 --> 00:56.550
di minificare il nostro codice e così

00:56.550 --> 00:59.220
via, quindi è meglio impostarlo qui.

00:59.220 --> 01:00.440
Lasceremo l'ingresso.

01:00.440 --> 01:02.910
Nell'output non possiamo eliminare il percorso pubblico,

01:02.910 --> 01:05.860
perché era necessario per il server dev di Webpack.

01:05.860 --> 01:08.810
Ora non lo useremo qui, perché per la produzione vogliamo

01:08.810 --> 01:10.430
eseguire lo script Webpack e

01:10.430 --> 01:12.940
generare il nostro output scritto su disco e non

01:12.940 --> 01:16.900
servito temporaneamente su un server in esecuzione locale.

01:16.900 --> 01:19.350
Possiamo impostare devtool su none per

01:19.350 --> 01:22.090
non generare mappe dei sorgenti, perché in

01:22.090 --> 01:24.913
produzione potrebbero non servire.

01:26.140 --> 01:30.160
Ora il resto può rimanere così com'è, ma ne aggiungeremo dell'altro.

01:30.160 --> 01:34.620
In fondo, voglio aggiungere una voce plugins e impostarla

01:34.620 --> 01:36.220
su un array.

01:36.220 --> 01:41.070
I plugin sono estensioni extra o, beh, plugin che si possono aggiungere

01:41.070 --> 01:43.020
al flusso di lavoro di Webpack

01:43.020 --> 01:46.080
e che verranno applicati all'intero output,

01:46.080 --> 01:47.820
all'intero progetto.

01:47.820 --> 01:50.190
Le regole e i moduli specifici vengono

01:50.190 --> 01:52.870
applicati a livello di singolo file.

01:52.870 --> 01:57.260
I plugin vengono applicati al flusso di lavoro generale.

01:57.260 --> 01:58.730
Qui voglio aggiungere un plugin

01:58.730 --> 02:00.620
che cancelli automaticamente tutto

02:00.620 --> 02:04.370
ciò che si trova nella cartella dist prima che vi venga scritto un nuovo

02:04.370 --> 02:06.540
output, in modo da avere sempre e solo l'output

02:06.540 --> 02:09.410
più recente nella cartella dist.

02:09.410 --> 02:11.900
Per questo, installerò un pacchetto

02:11.900 --> 02:16.900
nuovo con --save-dev, che è il plugin clean-webpack-plugin.

02:19.090 --> 02:21.900
Questo ci aiuterà a ripulire la cartella dist,

02:21.900 --> 02:26.360
nel nostro caso, ogni volta che ricostruiremo il progetto.

02:26.360 --> 02:29.820
Quindi, una volta installato, importiamolo qui in alto.

02:29.820 --> 02:32.090
Lo chiameremo CleanPlugin e lo importeremo

02:32.090 --> 02:36.400
con require clean-webpack-plugin e, una volta installato

02:36.400 --> 02:39.810
nell'array dei plugin in basso, chiameremo new

02:39.810 --> 02:44.073
CleanPlugin. CleanWebpackPlugin e istanziare

02:45.422 --> 02:46.500
questo.

02:46.500 --> 02:49.660
Questa è una funzione costruttore e ora la istanziamo.

02:49.660 --> 02:51.650
Questo è tutto ciò che occorre fare e

02:51.650 --> 02:53.260
alla fine dirà a Webpack che prima

02:53.260 --> 02:56.490
di scrivere qualcosa in questa cartella di output, cancellerà

02:56.490 --> 02:58.593
tutto ciò che c'è dentro.

02:59.440 --> 03:02.020
Ora abbiamo il flusso di lavoro di produzione finito.

03:02.020 --> 03:04.620
Ora per utilizzarlo, passiamo al pacchetto. json e quindi regoliamo

03:04.620 --> 03:07.280
questo script di compilazione.

03:07.280 --> 03:10.510
Qui voglio dire a Wepback di usare questo file prod, questo file

03:10.510 --> 03:13.110
di configurazione di produzione e lo facciamo aggiungendo

03:13.110 --> 03:21.140
--config e poi webpack.

03:21.140 --> 03:21.140
config. prod. js qui.

03:21.140 --> 03:23.610
Questo dovrebbe essere il nome del file scelto e indica

03:23.610 --> 03:27.000
a Webpack di usare questo file di configurazione invece di quello predefinito

03:27.000 --> 03:29.730
di Webpack. config. js che normalmente

03:29.730 --> 03:32.030
cerca.

03:32.030 --> 03:34.600
Se ora si esegue npn run build, l'applicazione

03:34.600 --> 03:36.700
verrà creata per la produzione, il che

03:36.700 --> 03:39.950
significa che si otterrà un output ottimizzato.

03:39.950 --> 03:42.460
Quindi, se aspettate, qui abbiamo il pacchetto. js e questo è ora il codice

03:42.460 --> 03:45.110
ottimizzato costruito per la produzione,

03:45.110 --> 03:50.980
insieme all'indice.

03:50.980 --> 03:50.980
e l'applicazione. Il

03:50.980 --> 03:53.800
file css è quello che si mette su un server se si

03:53.800 --> 03:56.393
vuole distribuire l'applicazione.

03:57.260 --> 04:00.440
Questa è anche la fine di questo modulo.

04:00.440 --> 04:02.140
Ora vorrei riassumere ciò che abbiamo imparato.
