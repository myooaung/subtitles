WEBVTT

1
00:00:02.350 --> 00:00:03.921
<v Instructor>So, now, we got union types here.</v>

2
00:00:03.921 --> 00:00:07.440
Let's build up on that idea of union types

3
00:00:07.440 --> 00:00:09.764
and also introduce Literal types.

4
00:00:09.764 --> 00:00:14.290
Literal types are types where you don't just say

5
00:00:14.290 --> 00:00:16.436
that a certain variable or a parameter

6
00:00:16.436 --> 00:00:19.700
should hold, let's say a number or a string,

7
00:00:19.700 --> 00:00:21.230
but where you are very clear

8
00:00:21.230 --> 00:00:23.800
about the exact value it should hold.

9
00:00:23.800 --> 00:00:26.064
We saw that early already here in basics.

10
00:00:26.064 --> 00:00:28.408
Const number two, for example.

11
00:00:28.408 --> 00:00:32.098
There, if I hover over that you see the type which was

12
00:00:32.098 --> 00:00:35.680
inferred is not number it's 2.8.

13
00:00:35.680 --> 00:00:37.290
And types group did infer

14
00:00:37.290 --> 00:00:41.220
this concrete number as a type here because it's a constant.

15
00:00:41.220 --> 00:00:43.810
It will never change and therefore types group knows the

16
00:00:43.810 --> 00:00:48.211
value I assigned here is the exact type I have. So ofcourse

17
00:00:48.211 --> 00:00:52.796
this is a number, you could say 2.8 is derived from the

18
00:00:52.796 --> 00:00:56.320
number type but it's a specific number. And this

19
00:00:56.320 --> 00:00:59.160
does not just exist for numbers, but also for strings and

20
00:00:59.160 --> 00:01:02.860
so on. And especially for strings, it can be very useful.

21
00:01:02.860 --> 00:01:07.420
Let's say here in our combined function, we expect numbers

22
00:01:07.420 --> 00:01:10.190
or strings and we combine them differently based on what

23
00:01:10.190 --> 00:01:13.756
we get but we also want to allow the caller of the function

24
00:01:13.756 --> 00:01:18.756
to define how the result should be returned so that we can

25
00:01:18.880 --> 00:01:22.530
basically force a conversion from number to string or

26
00:01:22.530 --> 00:01:25.370
the other way around. We could do this with the third

27
00:01:25.370 --> 00:01:29.740
parameter and we could name that let's say result type or

28
00:01:29.740 --> 00:01:33.208
result conversion or however you want to name it and

29
00:01:33.208 --> 00:01:37.240
I want to describe this with a string. So I'll set this

30
00:01:37.240 --> 00:01:41.122
to type string. Now my idea is that I can call combine here

31
00:01:41.122 --> 00:01:45.625
with two numbers and for example pass in a string of

32
00:01:45.625 --> 00:01:50.625
"as-number" and it's totally up to you which identifier

33
00:01:50.630 --> 00:01:55.630
you use here. Down there we might have "as-text" but then

34
00:01:56.260 --> 00:01:59.357
we might have another combination here

35
00:02:02.910 --> 00:02:07.310
CombinedStringAges where I pass in two strings but

36
00:02:07.310 --> 00:02:10.030
I still want to output this "as-number" and this would

37
00:02:10.030 --> 00:02:13.540
be a case where the third parameter can be helpful to

38
00:02:13.540 --> 00:02:17.050
force a conversion because if I pass in two strings here

39
00:02:17.050 --> 00:02:19.950
normally we would make it into this else branch and

40
00:02:19.950 --> 00:02:24.730
concatenate it and I might want to return this as a number

41
00:02:24.730 --> 00:02:29.639
instead so that I can also console log combined string

42
00:02:29.639 --> 00:02:34.030
agents here. So now we just have to take these identifiers

43
00:02:34.030 --> 00:02:37.512
into account in our function by including resultConversion

44
00:02:37.512 --> 00:02:41.730
in our if checks. Now the question is what exactly do we

45
00:02:41.730 --> 00:02:45.700
want to do; do we want to make sure that we can force these

46
00:02:45.700 --> 00:02:49.930
two strings to be added as numbers or do we want to

47
00:02:49.930 --> 00:02:54.012
force the result no matter if it was a mathematical

48
00:02:54.012 --> 00:02:58.695
calculation or a string concatenation to be converted to

49
00:02:58.695 --> 00:03:03.039
a text or a number. If we want to force a conversion

50
00:03:03.039 --> 00:03:05.960
we could add the if check here and check if result

51
00:03:05.960 --> 00:03:10.382
conversion is equal to "as-number" and if that's the case

52
00:03:10.382 --> 00:03:15.340
I want to return result with a plus infront of it

53
00:03:15.340 --> 00:03:18.826
which converts it to a number, the alternative would be

54
00:03:18.826 --> 00:03:21.230
parseFloat for example

55
00:03:22.800 --> 00:03:24.420
but here I'll just go for the plus

56
00:03:24.420 --> 00:03:29.420
since this is a bit shorter and else I want to return result

57
00:03:30.156 --> 00:03:33.593
toString to force an output as a string.

58
00:03:34.570 --> 00:03:38.883
So now we do the calculation abased on the real type we get

59
00:03:38.883 --> 00:03:42.300
but then we convert to result that's one way of doing that

60
00:03:42.300 --> 00:03:46.360
and if we save that and we then compile this file, we see

61
00:03:47.470 --> 00:03:51.020
this is the result I get and we get that output for example

62
00:03:51.020 --> 00:03:54.759
for our string combination here because as I said,

63
00:03:54.759 --> 00:03:58.520
the combination itself the calculation so to say is

64
00:03:58.520 --> 00:04:02.530
performed based on the type we feed in which here is string

65
00:04:02.530 --> 00:04:05.860
so we concatenate it and then we just convert to result.

66
00:04:05.860 --> 00:04:09.593
The alternative logic would be to check the type here

67
00:04:09.593 --> 00:04:14.320
and do a different operation based on the return type we're

68
00:04:14.320 --> 00:04:19.180
specifying here. So we could comment this out and instead

69
00:04:19.180 --> 00:04:22.600
here say if the type of input one is number and the type

70
00:04:22.600 --> 00:04:26.230
of input two is number, or

71
00:04:27.890 --> 00:04:30.865
if resultConversion is equal to

72
00:04:30.865 --> 00:04:35.865
"as-number" then I want to combine values like this and

73
00:04:35.930 --> 00:04:38.794
now to avoid this error, here I force the conversion

74
00:04:38.794 --> 00:04:42.970
to numbers by adding a plus infront of each input

75
00:04:42.970 --> 00:04:45.490
so that each input is converted to a number and is

76
00:04:45.490 --> 00:04:48.490
guaranteed to be a number before I combine them.

77
00:04:48.490 --> 00:04:51.130
Side note: if you would pass in strings that can't be

78
00:04:51.130 --> 00:04:54.610
converted to a number, so something like Max for example,

79
00:04:54.610 --> 00:04:58.800
then you'll get an NaN, Not a Number as a result.

80
00:04:58.800 --> 00:05:00.280
Well then in the else case,

81
00:05:00.280 --> 00:05:03.170
so that we don't have "as-number", or that we simply

82
00:05:03.170 --> 00:05:07.976
don't have number inputs, then we make it into this block

83
00:05:07.976 --> 00:05:12.390
here and now with that if I return result again here,

84
00:05:12.390 --> 00:05:16.230
and then we then save this and recompile, we'll see

85
00:05:16.230 --> 00:05:20.230
a different output on our page. Now we get 56 in these

86
00:05:20.230 --> 00:05:22.945
two lines here because now we're not converting the result,

87
00:05:22.945 --> 00:05:26.300
so we're not converting the concatenated string for this

88
00:05:26.300 --> 00:05:29.070
line but instead we're doing the conversion before

89
00:05:29.070 --> 00:05:31.970
we combine the two values. So that's up to you which

90
00:05:31.970 --> 00:05:34.760
logic you want to implement. I actually want to have a

91
00:05:34.760 --> 00:05:37.551
closer look at the literal types concept which I described

92
00:05:37.551 --> 00:05:41.180
at the beginning of this lecture. I'm passing an "as-number"

93
00:05:41.180 --> 00:05:44.157
and "as-text" and the downs of a business that right now

94
00:05:44.157 --> 00:05:47.600
we as a developer have to memorize these values.

95
00:05:47.600 --> 00:05:50.450
We have to make sure that we don't miss type here.

96
00:05:50.450 --> 00:05:54.010
Now we could use a e-num to improve that but if we only

97
00:05:54.010 --> 00:05:57.754
have two values here, "as-text" or "as-number", then maybe

98
00:05:57.754 --> 00:06:00.940
all the search a literal type could be an option.

99
00:06:00.940 --> 00:06:04.173
We could say "this shouldn't be any string, it should be

100
00:06:04.173 --> 00:06:09.173
"as-number" or "as-text""

101
00:06:09.870 --> 00:06:12.090
so we use a union type combined

102
00:06:12.090 --> 00:06:15.573
with literal types. Literal types are the the types

103
00:06:15.573 --> 00:06:17.987
which are based on your core types string, number

104
00:06:17.987 --> 00:06:20.933
and so on but then you then have a specific version

105
00:06:20.933 --> 00:06:24.750
of the type. So here, we allow specifically these

106
00:06:24.750 --> 00:06:27.960
two strings not any string just these two strings.

107
00:06:27.960 --> 00:06:31.460
So we want a string for result conversion, but it has to

108
00:06:31.460 --> 00:06:34.207
be one of these two values. Any other string value

109
00:06:34.207 --> 00:06:37.560
will not be allowed, so that's the idea behind a literal

110
00:06:37.560 --> 00:06:40.747
type and often you will use this in the context of the union

111
00:06:40.747 --> 00:06:43.700
type because you don't just want to allow one exact value

112
00:06:43.700 --> 00:06:46.500
you could hard code it into your code if that would be

113
00:06:46.500 --> 00:06:49.544
the case but you want to have two or more possible values.

114
00:06:49.544 --> 00:06:52.580
In this case we got two possible values.

115
00:06:52.580 --> 00:06:56.240
So now we're guaranteed to get result conversion which is

116
00:06:56.240 --> 00:07:00.288
either "as-number" or "as-text" and for example here,

117
00:07:00.288 --> 00:07:03.800
If I now try to compare this to as-numbe because I have a

118
00:07:03.800 --> 00:07:07.256
typo here, types group is able to tell me here in the IDE

119
00:07:07.256 --> 00:07:10.360
and ofcourse all that we save it and compile it

120
00:07:10.360 --> 00:07:15.360
here in the terminal because it knows that as-numbe without

121
00:07:15.830 --> 00:07:18.940
an r at the end will never be a valid value for

122
00:07:18.940 --> 00:07:22.940
resultConversion because I set this union type with

123
00:07:22.940 --> 00:07:24.563
these literal types.

124
00:07:25.550 --> 00:07:27.593
So now we again gained some extra

125
00:07:27.593 --> 00:07:31.590
type safety and ensure we can't use this incorrectly.

126
00:07:31.590 --> 00:07:34.720
The same ofcourse for passing in a value. If we have a typo

127
00:07:34.720 --> 00:07:38.747
here, we get an error only if we use either "as-number" or

128
00:07:38.747 --> 00:07:41.947
"as-text" we're allowed to compile this as you see it

129
00:07:41.947 --> 00:07:45.470
and now compile this, this works and we get the same output

130
00:07:45.470 --> 00:07:49.562
as before here. So these are literal types especially useful

131
00:07:49.562 --> 00:07:52.193
when used in conjunction with union types.

