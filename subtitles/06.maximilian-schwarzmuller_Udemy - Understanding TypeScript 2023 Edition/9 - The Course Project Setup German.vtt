WEBVTT

00:02.490 --> 00:03.860
Männlicher Ausbilder: Wir haben also das IDE eingerichtet,

00:03.860 --> 00:04.860
was sehr wichtig ist.

00:04.860 --> 00:07.780
Lassen Sie uns nun auch ein Startprojekt einrichten, das wir im

00:07.780 --> 00:09.370
Laufe dieses Kurses in den verschiedenen

00:09.370 --> 00:11.250
Kursmodulen verwenden werden.

00:11.250 --> 00:13.230
Also im Grunde ein Projekt-Setup,

00:13.230 --> 00:16.110
mit dem wir jedes Kursmodul starten können, um dann

00:16.110 --> 00:18.339
dort unseren Code zu schreiben.

00:18.339 --> 00:20.730
Wie Sie im Laufe dieses Kurses sehen werden, ist für das

00:20.730 --> 00:24.330
Schreiben von Code im Allgemeinen keine komplexe Einrichtung erforderlich.

00:24.330 --> 00:28.330
Aber hier möchte ich ein Projekt, bei dem wir Code schreiben, ihn

00:28.330 --> 00:31.490
kompilieren und dann sofort die Ausgabe dieses Codes

00:31.490 --> 00:33.530
im Browser sehen können.

00:33.530 --> 00:36.970
Dazu füge ich zunächst eine neue Index-HTML-Datei ein.

00:36.970 --> 00:39.520
Die beiden anderen Dateien oder Ordner,

00:39.520 --> 00:42.620
die Sie hier sehen, sind nur Konfigurationsdateien

00:42.620 --> 00:45.530
für Git, falls Sie Versionskontrolle verwenden,

00:45.530 --> 00:47.460
und für meinen Editor, der die

00:47.460 --> 00:50.200
Zoomstufe einstellt.

00:50.200 --> 00:51.670
Das ist also alles, was ich hier habe.

00:51.670 --> 00:54.930
Aber in dieser Index-HTML-Datei werde ich sie nun mit einem

00:54.930 --> 00:56.750
Basisskelett initialisieren.

00:56.750 --> 00:58.390
Und für die Personen, die den Code eingeben

00:58.390 --> 01:02.770
wollen, können Sie einfach HTML eingeben und die Option html:5 wählen; wenn Sie dieses Menü

01:02.770 --> 01:04.200
nicht erhalten, drücken Sie einfach

01:04.200 --> 01:06.820
die Strg-Taste und die Leertaste.

01:06.820 --> 01:09.600
Wählen Sie die Option html:5 und drücken Sie die Eingabetaste,

01:09.600 --> 01:11.740
um dieses Gerüst zu erhalten.

01:11.740 --> 01:14.670
Da könnten wir das Verständnis von TypeScript hier als Titel

01:14.670 --> 01:16.722
eingeben, aber das ist nicht so wichtig.

01:16.722 --> 01:21.150
Wichtiger ist, dass Sie hier ein Skript-Tag in den Head-Abschnitt

01:21.150 --> 01:29.020
einfügen, eine Quelle angeben und auf app verweisen.

01:29.020 --> 01:29.020
js und fügen Sie das Attribut defer hinzu.

01:29.020 --> 01:32.270
Damit wird versucht, eine App zu importieren. js-Datei, die im Moment

01:32.270 --> 01:34.520
natürlich nicht existiert.

01:34.520 --> 01:35.530
Und dann wird er sie natürlich

01:35.530 --> 01:37.960
auch ausführen, wenn er sie findet.

01:37.960 --> 01:41.210
So können wir unsere Änderungen, unsere Code-Änderungen,

01:41.210 --> 01:44.790
direkt auf dem Bildschirm im Browser sehen.

01:44.790 --> 01:47.410
Oder wenn wir nur etwas auf der Konsole protokollieren,

01:47.410 --> 01:49.560
in den Browser-Def-Tools.

01:49.560 --> 01:52.250
Als nächstes werde ich eine App hinzufügen. ts-Datei.

01:52.250 --> 01:54.170
Das ist die Datei, eine TypeScript-Datei, in die

01:54.170 --> 01:55.530
wir etwas Code schreiben werden.

01:55.530 --> 01:58.580
Und dort können Sie zum Beispiel Ihren Code auf der Konsole

01:58.580 --> 02:01.580
protokollieren, oder was immer Sie wollen.

02:01.580 --> 02:03.780
Hier können Sie über die Konsole protokollieren, was Sie wollen.

02:03.780 --> 02:06.870
Und wenn Sie das tun, können Sie diese Datei mit TypeScript kompilieren,

02:06.870 --> 02:09.280
das wir vorhin installiert haben, dazu können Sie

02:09.280 --> 02:10.880
das Terminal öffnen und es hier in

02:10.880 --> 02:13.070
den Editor integrieren.

02:13.070 --> 02:16.580
Und schreiben Sie einfach tsc app. ts.

02:16.580 --> 02:18.490
Dadurch wird diese TypeScript-Datei kompiliert und

02:18.490 --> 02:20.610
eine Anwendung erzeugt. js-Datei, die

02:20.610 --> 02:22.530
wir hier importieren.

02:22.530 --> 02:25.160
Und wenn Sie jetzt diesen Index öffnen. html-Datei, sehen

02:25.160 --> 02:27.120
Sie, was hier passiert.

02:27.120 --> 02:29.800
Sie stoßen die Logik an, die Sie hier geschrieben haben.

02:29.800 --> 02:32.340
Und entweder ist das Logik, die etwas im Dom

02:32.340 --> 02:34.410
manipuliert, oder wie in diesem Fall

02:34.410 --> 02:37.870
ist es Logik, die einfach an die Konsole gebunden ist.

02:37.870 --> 02:41.700
In diesem Fall habe ich also diese HTML-Datei im Browser geöffnet.

02:41.700 --> 02:44.460
Sie können einfach außerhalb der IDE darauf doppelklicken.

02:44.460 --> 02:47.960
Also im normalen Windows-Explorer oder im Mac-Finder.

02:47.960 --> 02:49.910
Und dann öffnen Sie vielleicht Ihre Entwicklertools,

02:49.910 --> 02:51.830
wenn Sie nur etwas auf der Konsole protokollieren,

02:51.830 --> 02:54.010
und Sie werden Ihr Protokoll hier sehen.

02:54.010 --> 02:56.690
Das ist schön, aber immer, wenn wir hier etwas

02:56.690 --> 03:00.470
in unserem Code ändern, müssen wir manuell neu kompilieren, so

03:00.470 --> 03:02.340
ist das nun einmal im Moment.

03:02.340 --> 03:04.300
Das wird sich im Laufe des Kurses ändern.

03:04.300 --> 03:07.970
Aber auch hier müssen wir diese Seite manuell neu laden.

03:07.970 --> 03:10.140
Um dies zu beschleunigen und sicherzustellen,

03:10.140 --> 03:11.940
dass Sie dies nicht jedes Mal tun

03:11.940 --> 03:13.900
müssen, wenn Sie etwas ändern, fügen

03:13.900 --> 03:16.540
wir diesem Dummy-Setup, das wir im Laufe dieses

03:16.540 --> 03:17.890
Kurses verwenden werden,

03:17.890 --> 03:19.500
ein weiteres Werkzeug hinzu,

03:19.500 --> 03:22.360
damit dies automatisch geschieht.

03:22.360 --> 03:23.720
Um ein solches Tool zu installieren,

03:23.720 --> 03:26.430
führen wir hier npm init aus.

03:26.430 --> 03:29.830
In diesem Projektordner ist der Befehl npm verfügbar,

03:29.830 --> 03:32.113
wenn Sie node JS installiert haben.

03:32.960 --> 03:36.050
Stellen Sie sicher, dass Sie dafür nodejs besuchen. org und laden Sie die neueste

03:36.050 --> 03:39.690
Version, die Sie hier finden, herunter und installieren Sie sie.

03:39.690 --> 03:43.040
Im Moment werden wir keinen Node-JS-Code schreiben, aber Node-JS wird

03:43.040 --> 03:45.960
zusammen mit dem NPM-Tool geliefert, mit dem Sie Abhängigkeiten

03:45.960 --> 03:48.610
von Drittanbietern oder nützliche Tools installieren

03:48.610 --> 03:51.210
können, die unsere Entwicklung beschleunigen.

03:51.210 --> 03:53.840
Und aus diesem Grund brauchen wir sie hier.

03:53.840 --> 03:55.970
Wenn Sie das installiert haben, können Sie npm init

03:55.970 --> 03:57.800
in diesem Projektordner ausführen.

03:57.800 --> 03:58.740
Drücken Sie einfach die Eingabetaste,

03:58.740 --> 04:00.560
und Sie können all diese Fragen hier mit den Standardwerten

04:00.560 --> 04:03.570
beantworten, indem Sie einfach immer die Eingabetaste drücken.

04:03.570 --> 04:06.780
Und sobald dies abgeschlossen ist, erhalten Sie ein Paket. json-Datei, die in etwa

04:06.780 --> 04:08.150
wie folgt aussieht.

04:08.150 --> 04:12.500
Und jetzt können Sie npm install ausführen, um eine Abhängigkeit zu installieren,

04:12.500 --> 04:14.410
die nur für dieses Projekt gilt.

04:14.410 --> 04:16.210
Um also ein Tool zu installieren, könnte

04:16.210 --> 04:17.730
man sagen, was man in diesem Projekt

04:17.730 --> 04:22.520
verwenden könnte, -: -save-dev, um es als reine Entwicklungsabhängigkeit zu kennzeichnen,

04:22.520 --> 04:24.580
also ein Tool, das uns während der Entwicklung

04:24.580 --> 04:26.610
hilft und keinen Code enthält, der als Teil

04:26.610 --> 04:29.930
unseres Hauptcodes ausgeführt wird.

04:29.930 --> 04:33.470
Der Name des Tools ist lite-server.

04:33.470 --> 04:37.103
Wenn Sie hier die Eingabetaste drücken, wird dieses zusätzliche Tool installiert.

04:38.230 --> 04:42.000
Und wenn das erledigt ist, gehen Sie einfach in Ihr Paket. json-Datei und fügen Sie im Skript-Teil

04:42.000 --> 04:44.390
ein Komma ein und fügen Sie ein neues Skript

04:44.390 --> 04:46.870
hinzu, das Sie start nennen werden.

04:46.870 --> 04:49.029
Und dann geben Sie als Wert zwischen

04:49.029 --> 04:51.570
Anführungszeichen lite-server ein.

04:51.570 --> 04:54.580
Also der Name des Pakets, das hier hinzugefügt wurde.

04:54.580 --> 04:57.550
Wenn Sie nun die Eingabetaste drücken, können Sie hier npm start ausführen,

04:57.550 --> 04:59.400
um dieses Startskript zu starten.

04:59.400 --> 05:02.530
Und lite server ist ein einfacher Entwicklungsserver, der

05:02.530 --> 05:05.430
immer den Index bedient. html-Datei neben

05:05.430 --> 05:08.410
der Seite. json-Datei, also diese Datei.

05:08.410 --> 05:13.410
Die Anwendung wird unter dieser URL, die Sie hier sehen, standardmäßig

05:13.620 --> 05:16.143
localhost:3000, bereitgestellt.

05:17.440 --> 05:19.690
Und Sie können dann einfach diesen Ort besuchen.

05:19.690 --> 05:23.090
Geben Sie einfach localhost:3000 in den Browser ein.

05:23.090 --> 05:24.860
Und jetzt läuft Ihr Code hier.

05:24.860 --> 05:26.170
Und warum ist das besser?

05:26.170 --> 05:28.840
Damit wird die Seite nun automatisch neu geladen,

05:28.840 --> 05:32.180
sobald sich eine andere Datei in diesem Verzeichnis ändert.

05:32.180 --> 05:35.130
Wenn ich also zum Beispiel hier ein Ausrufezeichen

05:35.130 --> 05:38.180
hinzufüge, dies speichere und dann wieder mit tsc app

05:38.180 --> 05:40.323
kompiliere. TS, und Sie kehren zum

05:42.270 --> 05:43.580
Browser zurück, sehen Sie

05:43.580 --> 05:45.340
sofort die neueste Ausgabe, da sie

05:45.340 --> 05:47.230
automatisch neu geladen wird.

05:47.230 --> 05:49.620
Und das erspart uns einfach die zusätzliche

05:49.620 --> 05:51.690
Arbeit des manuellen Nachladens.

05:51.690 --> 05:54.540
Wichtig bei diesem npm-Startprozess ist, dass Sie

05:54.540 --> 05:57.450
ihn auf jeden Fall laufen lassen, solange Sie an Ihrem

05:57.450 --> 06:00.210
Projekt arbeiten, solange Sie Code schreiben, den

06:00.210 --> 06:02.800
Sie im Browser ausgeführt sehen wollen.

06:02.800 --> 06:03.633
Wenn Sie fertig sind,

06:03.633 --> 06:06.450
können Sie diesen Prozess jederzeit mit Control C beenden,

06:06.450 --> 06:08.200
aber sobald Sie das tun, wird Ihr Projekt

06:08.200 --> 06:11.600
nicht mehr unter dem lokalen Host 3000 bedient.

06:11.600 --> 06:13.980
Bleiben Sie also so lange am Ball, wie Sie Code schreiben

06:13.980 --> 06:15.650
und Änderungen vornehmen.

06:15.650 --> 06:17.510
Ich ändere es dann wieder zurück, aber

06:17.510 --> 06:19.200
das ist ganz Ihnen überlassen.

06:19.200 --> 06:21.480
Und das ist die Projektkonfiguration, die ich in diesem

06:21.480 --> 06:22.410
Kurs verwenden werde.

06:22.410 --> 06:24.200
Sie finden ihn natürlich auch in der

06:24.200 --> 06:25.530
fertigen Form beigefügt.

06:25.530 --> 06:27.250
Nur eine wichtige Anmerkung.

06:27.250 --> 06:30.330
Wenn Sie das beigefügte Startprojekt oder einen anderen

06:30.330 --> 06:32.500
Kurs-Snapshot oder einen anderen Code-Snapshot,

06:32.500 --> 06:35.900
den Sie irgendwo im Kurs finden, herunterladen, dann erhalten

06:35.900 --> 06:38.920
Sie einen Download, der diesen Knotenmodul-Ordner

06:38.920 --> 06:41.070
nicht enthält.

06:41.070 --> 06:42.590
Dies ist ein riesiger Ordner, in dem

06:42.590 --> 06:45.250
letztendlich alle Pakete von Drittanbietern und deren Abhängigkeiten

06:45.250 --> 06:46.970
gespeichert werden.

06:46.970 --> 06:49.840
Und da sie so riesig ist, lösche ich sie normalerweise,

06:49.840 --> 06:52.260
weil man sie mit npm install leicht neu

06:52.260 --> 06:54.080
erstellen kann.

06:54.080 --> 06:56.640
Wenn Sie also einen meiner Anhänge herunterladen,

06:56.640 --> 06:59.010
navigieren Sie in den extrahierten Ordner und

06:59.010 --> 07:01.530
führen Sie in diesem Ordner npm install aus.

07:01.530 --> 07:03.341
Dadurch werden alle Abhängigkeiten

07:03.341 --> 07:06.110
installiert und der Ordner node modules neu erstellt.

07:06.110 --> 07:07.280
Sobald Sie dies getan haben,

07:07.280 --> 07:08.610
können Sie npm start ausführen

07:08.610 --> 07:11.330
oder tun, was immer Sie in diesem Projekt tun wollen.

07:11.330 --> 07:13.360
Und damit haben wir dieses Projekt eingerichtet, das wir während

07:13.360 --> 07:14.750
des gesamten Kurses verwenden werden.

07:14.750 --> 07:16.810
Lassen Sie uns jetzt keine Zeit mehr verschwenden

07:16.810 --> 07:18.303
und einfach loslegen.
