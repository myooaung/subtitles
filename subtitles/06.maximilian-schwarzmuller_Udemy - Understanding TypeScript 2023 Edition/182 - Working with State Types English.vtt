WEBVTT

1
00:00:02.260 --> 00:00:03.920
<v Explainer>Time for some state management</v>

2
00:00:03.920 --> 00:00:05.340
in the App component,

3
00:00:05.340 --> 00:00:07.240
because when we update the array like this,

4
00:00:07.240 --> 00:00:08.880
the component wouldn't be re-rendered.

5
00:00:08.880 --> 00:00:10.530
That's how React works.

6
00:00:10.530 --> 00:00:12.590
In our function component, we can manage State

7
00:00:12.590 --> 00:00:15.000
with the useState hook.

8
00:00:15.000 --> 00:00:16.820
And again, if you don't know this

9
00:00:16.820 --> 00:00:18.750
or if state or function components

10
00:00:18.750 --> 00:00:21.120
or hooks doesn't tell you anything,

11
00:00:21.120 --> 00:00:23.810
definitely check out some dedicated React resources

12
00:00:23.810 --> 00:00:26.480
like my React, the complete guide course.

13
00:00:26.480 --> 00:00:29.870
So, now I want to manage my todos here with state,

14
00:00:29.870 --> 00:00:31.760
and for that I'll clear that dummy todo

15
00:00:31.760 --> 00:00:33.060
with which I started,

16
00:00:33.060 --> 00:00:36.430
and instead initialize the state by calling useState

17
00:00:36.430 --> 00:00:39.080
and to that however, I can pass my empty array

18
00:00:39.080 --> 00:00:41.210
as a starting state value

19
00:00:41.210 --> 00:00:44.510
so that initially my state is an empty array.

20
00:00:44.510 --> 00:00:47.100
Now useState always returns an array

21
00:00:47.100 --> 00:00:49.370
with exactly two elements.

22
00:00:49.370 --> 00:00:52.070
The first element is the latest state snapshot

23
00:00:52.070 --> 00:00:53.630
for this render cycle.

24
00:00:53.630 --> 00:00:55.070
And the second argument,

25
00:00:55.070 --> 00:00:56.720
the second element in the array

26
00:00:56.720 --> 00:00:58.860
is a function to update that state

27
00:00:58.860 --> 00:01:01.110
and re-render the component.

28
00:01:01.110 --> 00:01:02.660
We can use array re-structuring

29
00:01:02.660 --> 00:01:05.060
about which we learned earlier in the course,

30
00:01:05.060 --> 00:01:07.060
to pull out these two elements

31
00:01:07.060 --> 00:01:09.230
and store them in separate constants.

32
00:01:09.230 --> 00:01:10.900
And then here we have the todos

33
00:01:10.900 --> 00:01:13.103
and let's say a function named setTodos.

34
00:01:14.920 --> 00:01:16.820
With that, we still get our todos array

35
00:01:16.820 --> 00:01:19.530
and now in here in the todoAddHandler,

36
00:01:19.530 --> 00:01:21.480
I want to call setTodos

37
00:01:21.480 --> 00:01:24.430
and set my todos array to a new array,

38
00:01:24.430 --> 00:01:27.373
which has the new todoText added to it.

39
00:01:28.240 --> 00:01:29.283
Now for that,

40
00:01:30.400 --> 00:01:32.130
we can of course,

41
00:01:32.130 --> 00:01:34.100
pass in a new array

42
00:01:34.100 --> 00:01:36.530
and add a new object,

43
00:01:36.530 --> 00:01:38.540
let's say with an ID,

44
00:01:38.540 --> 00:01:42.530
where we create a random ID with Math.random().toString.

45
00:01:42.530 --> 00:01:44.830
It's not really unique, but good enough here,

46
00:01:44.830 --> 00:01:46.620
and where we then also have our text,

47
00:01:46.620 --> 00:01:48.760
which is that text value I'm getting here.

48
00:01:48.760 --> 00:01:51.910
But strangely enough, I'm getting an error here.

49
00:01:51.910 --> 00:01:54.790
And the error we're getting is that this argument

50
00:01:54.790 --> 00:01:56.860
is not assignable.

51
00:01:56.860 --> 00:01:59.630
Well basically into something which expects

52
00:01:59.630 --> 00:02:01.970
to have an array of nothing.

53
00:02:01.970 --> 00:02:03.590
And that's, of course not what you want here.

54
00:02:03.590 --> 00:02:06.010
We don't want to have an array of nothing as our state.

55
00:02:06.010 --> 00:02:07.110
Why is this happening?

56
00:02:07.950 --> 00:02:11.800
Because here when I initialize useState with an empty array,

57
00:02:11.800 --> 00:02:15.040
TypeScript infers how our state will look like,

58
00:02:15.040 --> 00:02:17.060
if I would initialize this to a string,

59
00:02:17.060 --> 00:02:20.130
TypeScript would would infer that my state is a string.

60
00:02:20.130 --> 00:02:23.010
So if I temporarily removed this and I pass in some text,

61
00:02:23.010 --> 00:02:24.123
it would be accepted.

62
00:02:25.160 --> 00:02:26.137
If I pass it in an array,

63
00:02:26.137 --> 00:02:28.260
the TypeScript expects that it's an array

64
00:02:28.260 --> 00:02:30.080
but not an array of anything,

65
00:02:30.080 --> 00:02:32.000
but always basically an empty array.

66
00:02:32.000 --> 00:02:36.070
So an array of nothing which of course I don't want here.

67
00:02:36.070 --> 00:02:38.050
To fix this we have to tell React,

68
00:02:38.050 --> 00:02:40.460
how our estate will look like over time.

69
00:02:40.460 --> 00:02:42.920
And for that we can again use that useState

70
00:02:42.920 --> 00:02:44.630
is a generic function,

71
00:02:44.630 --> 00:02:48.080
because we can pass in the structure of our estate.

72
00:02:48.080 --> 00:02:51.240
So which type of data our state is of,

73
00:02:51.240 --> 00:02:54.200
and there we can pass in that our state

74
00:02:54.200 --> 00:02:56.253
should be an array of objects,

75
00:02:57.210 --> 00:02:59.570
to be precise and array of objects

76
00:02:59.570 --> 00:03:02.750
where we have an ID property which is a string,

77
00:03:02.750 --> 00:03:04.860
and a text property, which is a string.

78
00:03:04.860 --> 00:03:08.050
And now this state update is allowed.

79
00:03:08.050 --> 00:03:10.100
Now writing this here is of course fine

80
00:03:10.100 --> 00:03:12.410
but since we'll need it in different places in the app,

81
00:03:12.410 --> 00:03:16.710
I'll actually create a new file and name this todo.model.ts.

82
00:03:16.710 --> 00:03:18.210
The file name is up to you.

83
00:03:18.210 --> 00:03:19.940
And here I want to export basically,

84
00:03:19.940 --> 00:03:21.710
an interface name Todo

85
00:03:21.710 --> 00:03:24.080
where I just want to describe how our Todo ID

86
00:03:24.080 --> 00:03:25.440
should look like in my app

87
00:03:25.440 --> 00:03:27.430
that I want to have an ID of type string,

88
00:03:27.430 --> 00:03:30.190
and a text property of type string.

89
00:03:30.190 --> 00:03:34.420
And with this exported here in the app component,

90
00:03:34.420 --> 00:03:35.900
we can import this

91
00:03:35.900 --> 00:03:38.210
so here we can import Todo

92
00:03:39.080 --> 00:03:42.543
from ./todo.model.

93
00:03:43.900 --> 00:03:46.720
And here we simply then have an array of todos

94
00:03:46.720 --> 00:03:49.550
which is of course shorter and easier to read.

95
00:03:49.550 --> 00:03:51.480
And now our state update still works,

96
00:03:51.480 --> 00:03:52.870
but this is a bit cleaner.

97
00:03:52.870 --> 00:03:55.100
And this as you see is really important here

98
00:03:55.100 --> 00:03:57.210
when working with something like an array

99
00:03:57.210 --> 00:03:59.170
where types of content for

100
00:03:59.170 --> 00:04:01.860
which type of data you want to store that eventually,

101
00:04:01.860 --> 00:04:04.270
if you initialize it with an empty array.

102
00:04:04.270 --> 00:04:06.250
With this however it works.

103
00:04:06.250 --> 00:04:07.450
The downside of course is that,

104
00:04:07.450 --> 00:04:09.910
our state updating logic here is not correct,

105
00:04:09.910 --> 00:04:13.670
because right now I always overwrite the existing array

106
00:04:13.670 --> 00:04:17.400
of todos with a new array that only has exactly one element.

107
00:04:17.400 --> 00:04:20.110
And instead, I want to overwrite it with a new array

108
00:04:20.110 --> 00:04:23.730
that has all the old elements as well as the new element.

109
00:04:23.730 --> 00:04:26.583
So let's adjust this logic in the next lecture.

