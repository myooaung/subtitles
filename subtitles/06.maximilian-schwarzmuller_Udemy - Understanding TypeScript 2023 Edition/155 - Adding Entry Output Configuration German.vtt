WEBVTT

00:01.538 --> 00:03.725
Erzähler: Um loszulegen, gehen wir

00:03.725 --> 00:07.086
zunächst zu tsconfig. json-Datei, weil wir dort sicherstellen

00:07.086 --> 00:09.965
müssen, dass bestimmte Dinge konfiguriert sind.

00:09.965 --> 00:12.780
Vergewissern Sie sich, dass das Ziel hier tatsächlich

00:12.780 --> 00:16.286
auf es5 oder es6 eingestellt ist, das bleibt Ihnen überlassen.

00:16.286 --> 00:19.423
Das hängt davon ab, welche Browser Sie unterstützen wollen.

00:19.423 --> 00:22.190
Denn am Ende werden Webpack und die Loader-Typen dieses

00:22.190 --> 00:24.050
Ziel verwenden, um zu bestimmen, wie

00:24.050 --> 00:26.543
Ihr Code transformiert werden soll.

00:26.543 --> 00:28.960
Sollten Ihre Codetypen in Java-Script-Code

00:28.960 --> 00:32.480
umgewandelt werden, der auch in älteren Browsern läuft?

00:32.480 --> 00:36.210
Oder wie bei es6 zu Code, der nur in neueren

00:36.210 --> 00:37.811
Browsern läuft?

00:37.811 --> 00:42.640
Das Modul sollte dann auf es2015 oder es6 eingestellt sein, so dass diese Einstellung

00:42.640 --> 00:44.110
in Ordnung ist.

00:44.110 --> 00:49.110
Darüber hinaus müssen Sie auch Ihr outDir verifizieren.

00:50.560 --> 00:53.520
Ich werde es bei dist belassen, aber Sie können dies ändern, wenn Sie Ihren

00:53.520 --> 00:55.997
Code in einem anderen Verzeichnis kompilieren wollen.

00:55.997 --> 00:59.378
Sie brauchen das Root-Verzeichnis nicht mehr,

00:59.378 --> 01:02.260
da Webpack es übernimmt und bestimmt, wo

01:02.260 --> 01:05.014
sich Ihre Root-Dateien befinden.

01:05.014 --> 01:07.660
Im Allgemeinen sollten diese Einstellungen also in Ordnung sein.

01:07.660 --> 01:09.525
Wir können sie später immer noch ändern,

01:09.525 --> 01:12.487
wenn etwas nicht so funktioniert, wie wir es uns wünschen.

01:12.487 --> 01:15.220
Damit fügen wir eine neue Konfigurationsdatei neben

01:15.220 --> 01:19.848
tsconfig hinzu. json und das ist das Webpack. Konfiguration. js-Datei.

01:19.848 --> 01:22.368
Und stellen Sie sicher, dass Sie sie wirklich so benennen,

01:22.368 --> 01:24.150
denn dies ist die Datei, nach der Webpack

01:24.150 --> 01:27.579
automatisch suchen wird, und sie wird Webpack sogar mitteilen, wie

01:27.579 --> 01:30.220
es mit unserem Projekt arbeiten soll.

01:30.220 --> 01:32.840
Denn Webpack ist ein Tool, das konfiguriert werden muss,

01:32.840 --> 01:34.568
um hier korrekt zu funktionieren.

01:34.568 --> 01:37.568
Was tun wir also in diesem Webpack. Konfigurationsdatei?

01:37.568 --> 01:40.338
Diese Konfigurationsdatei verwendet JavaScript

01:40.338 --> 01:43.288
und eigentlich auch Node. js-Merkmale.

01:43.288 --> 01:46.747
Wir wollen also den Knoten verwenden. js-Export-Syntax, die wie folgt

01:46.747 --> 01:50.379
aussieht, um ein JavaScript-Objekt zu exportieren.

01:50.379 --> 01:53.538
Dies ist das Konfigurationsobjekt, das von webpack übernommen wird.

01:53.538 --> 01:55.585
Falls Sie das noch nie gesehen haben: So exportieren

01:55.585 --> 01:59.648
Sie Dinge in einen Knoten. js-Umgebung.

01:59.648 --> 02:02.877
Und hier exportieren wir ein JavaScript-Objekt.

02:02.877 --> 02:05.920
Nun benötigt webpack einige Informationen.

02:05.920 --> 02:09.840
Vor allem muss es wissen, mit welcher Datei Ihr gesamtes

02:09.840 --> 02:14.585
Projekt beginnt, also wo Ihr Einstiegspunkt ist.

02:14.585 --> 02:17.370
In unserem Fall ist das die App. ts-Datei.

02:17.370 --> 02:18.922
Diese Datei sollte zuerst ausgeführt

02:18.922 --> 02:20.981
werden, und was webpack dann tun wird, ist,

02:20.981 --> 02:24.013
dass es sich die Importe in dieser Datei ansieht und zu diesen

02:24.013 --> 02:25.461
Dateien geht und sich deren

02:25.461 --> 02:27.378
Importe und die Importe der importierten

02:27.378 --> 02:30.219
Dateien ansieht und so weiter.

02:30.219 --> 02:33.461
Bis es alle Dateien kennt, die Ihr Projekt am Ende verwendet.

02:33.461 --> 02:36.201
Und dann wird es die Inhalte der Dateien durchgehen,

02:36.201 --> 02:38.740
wie diesen Inhalt hier und alle Inhalte in allen

02:38.740 --> 02:44.290
Dateien, und sie mit Hilfe der ts kompilieren.

02:44.290 --> 02:44.290
Loader-Paket, das ich erwähnt habe.

02:44.290 --> 02:46.960
Damit webpack hier richtig funktioniert, sollten

02:46.960 --> 02:50.421
Sie jetzt eigentlich alle . js-Erweiterungen in allen

02:50.421 --> 02:51.598
Importen.

02:51.598 --> 02:54.400
Das brauchten wir früher, als wir den in ts eingebauten nativen

02:54.400 --> 02:57.885
Browser verwendet haben. Modulfunktionalität, aber mit

02:57.885 --> 03:01.130
Webpack brauchen Sie diese Erweiterungen nicht.

03:01.130 --> 03:03.664
Denn Webpack sucht tatsächlich automatisch nach. js, und bestimmte andere Erweiterungsdateien.

03:03.664 --> 03:06.501
Man muss und sollte sie hier also nicht hinzufügen, da Webpack

03:06.501 --> 03:09.270
sonst nach Dateien mit einer doppelten Erweiterung sucht,

03:09.270 --> 03:10.716
was man nicht will.

03:10.716 --> 03:13.655
Also entfernen. js auf all diese Importe hier, und wenn Sie das getan haben,

03:13.655 --> 03:18.441
speichern Sie alle diese Dateien, um sicherzustellen,

03:18.441 --> 03:21.370
dass Ihre Änderungen übernommen werden.

03:21.370 --> 03:26.498
Nun zurück zu Webpack. Konfiguration. js, dort sollten Sie

03:26.498 --> 03:31.320
nun eine Eintragseigenschaft in diesem exportierten Objekt hinzufügen.

03:31.320 --> 03:32.740
Und zeigen Sie auf . /src/app. ts in unserem Beispiel.

03:32.740 --> 03:37.740
Also in der Root-Entry-Datei Ihres Projekts.

03:38.680 --> 03:42.444
Als nächstes fügen Sie hier einen Ausgabeschlüssel hinzu.

03:42.444 --> 03:45.880
Eine Ausgabe ist hier nun ein Objekt.

03:45.880 --> 03:48.051
Dabei geben wir zunächst den Dateinamen an.

03:48.051 --> 03:51.120
Dies wird die einzige JavaScript-Datei sein,

03:51.120 --> 03:52.998
die am Ende erzeugt wird.

03:52.998 --> 03:55.440
Und hier werden wir es Bündel nennen. js, aber Sie können es nennen, wie

03:55.440 --> 03:57.350
Sie wollen.

03:57.350 --> 03:58.788
Anwendung. js, oder was immer Sie wollen.

03:58.788 --> 04:01.709
Sie können hier auch dynamische

04:01.709 --> 04:05.171
Teile hinzufügen, z. B. einen Inhaltshash, um Webpack anzuweisen,

04:05.171 --> 04:08.971
automatisch einen eindeutigen Hash für jeden Build zu erstellen, was

04:08.971 --> 04:11.829
Ihnen beim Caching im Browser helfen kann.

04:11.829 --> 04:13.578
Aber auch darüber können Sie in den Webpack-Dokumenten mehr erfahren.

04:13.578 --> 04:16.229
Hier brauchen wir sie nicht, also nennen wir die Datei einfach "Bundle". js.

04:16.229 --> 04:19.779
Zusätzlich zum Dateinamen müssen Sie

04:19.779 --> 04:23.320
auch den Pfad angeben, in den die Ausgabe geschrieben werden soll.

04:23.320 --> 04:26.131
Und das sollte natürlich mit dem Pfad übereinstimmen,

04:26.131 --> 04:28.900
den Sie in Ihren ts. Konfiguration. js-Datei, um Fehler zu vermeiden.

04:28.900 --> 04:32.970
Also zu diesem Ordner.

04:32.970 --> 04:34.189
Anders als bei den ts. config,js-Datei, sollten

04:34.189 --> 04:37.010
Sie nicht schreiben . /dist hier.

04:37.010 --> 04:39.819
Webpack benötigt hier einen absoluten Pfad.

04:39.819 --> 04:42.099
Und um einen zu bauen, können wir einen Knoten verwenden. js-Modul.

04:42.099 --> 04:45.669
Hierfür können wir den Knoten verwenden. js-Import-Syntax, die das Schlüsselwort

04:45.669 --> 04:48.880
required verwendet, und importieren

04:48.880 --> 04:51.280
Sie das Pfadmodul.

04:51.280 --> 04:54.220
Sie brauchen dies nicht als Bibliothek zu installieren, da

04:54.220 --> 04:56.050
es sich um einen Kernknoten handelt. js-Modul, das Sie bereits haben,

04:56.050 --> 04:59.651
wenn Sie Node haben. js installiert haben, was Sie tun, weil wir es früher

04:59.651 --> 05:02.149
in diesem Kurs getan haben.

05:02.149 --> 05:04.966
Jetzt können Sie path verwenden, um dort die resolve-Methode

05:04.966 --> 05:08.552
aufzurufen, mit der Sie einen absoluten Pfad zu einem bestimmten

05:08.552 --> 05:11.280
Ordner erstellen können.

05:11.280 --> 05:12.910
Dafür verwenden wir eine spezielle

05:12.910 --> 05:15.320
Konstante, die __dirname-Konstante, die global

05:15.320 --> 05:17.236
in einem Knoten verfügbar ist. js-Umgebung.

05:17.236 --> 05:21.150
Und Webpack verwendet, wie gesagt, Node. js, um Ihre Dateien auszuführen.

05:21.150 --> 05:24.692
Und dann als zweites Argument dist,

05:24.692 --> 05:27.433
im Endeffekt konstruiert dist nur einen absoluten

05:27.433 --> 05:30.661
Pfad zum dist-Ordner, den webpack dann verwendet, um Ihre

05:30.661 --> 05:33.190
Ausgabe dorthin zu schreiben.

05:33.190 --> 05:35.452
Und damit hat man einen Einstiegspunkt und

05:35.452 --> 05:38.753
einen Ausgangspunkt, aber man sagt Webpack nicht, was es mit den

05:38.753 --> 05:40.743
TypeScript-Dateien machen soll.

05:40.743 --> 05:42.553
Denn standardmäßig weiß Webpack das

05:42.553 --> 05:45.140
nicht, standardmäßig ist es nur ein Bundler.

05:45.140 --> 05:46.884
Jede zusätzliche Funktionalität,

05:46.884 --> 05:48.684
wie das Kompilieren von TypeScript

05:48.684 --> 05:51.261
zu JavaScript, muss Webpack beigebracht werden.

05:51.261 --> 05:53.452
Wir werden das in der nächsten Vorlesung tun.
