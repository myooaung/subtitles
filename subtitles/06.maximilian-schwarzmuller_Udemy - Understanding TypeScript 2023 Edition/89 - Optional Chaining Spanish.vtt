WEBVTT

00:02.450 --> 00:05.030
Instructor: Dejemos de lado las sobrecargas de

00:05.030 --> 00:09.010
funciones y permíteme presentar otra característica muy interesante.

00:09.010 --> 00:13.350
Y eso es un encadenamiento opcional.

00:13.350 --> 00:16.720
Digamos que tienes una aplicación en la que estás

00:16.720 --> 00:21.603
obteniendo datos de un backend de una base de datos o de cualquier

00:21.603 --> 00:26.350
fuente en la que no sabes con certeza si en un objeto está definida

00:26.350 --> 00:29.500
una determinada propiedad.

00:29.500 --> 00:33.920
Digamos que tenemos fetchedUserData y fetchedUserData podría ser un objeto

00:33.920 --> 00:36.380
sobre un usuario que obtuvimos.

00:36.380 --> 00:39.705
Allí podríamos tener un ID podríamos tener

00:39.705 --> 00:44.705
un nombre Max y también podríamos esperar otro trabajo de propiedad

00:45.730 --> 00:50.550
que es un objeto que tiene un título y que luego también tiene una

00:50.550 --> 00:53.950
descripción, mi propia empresa.

00:53.950 --> 00:56.900
Ahora bien, si obtenemos datos como estos, por supuesto que podemos trabajar con ellos.

00:56.900 --> 01:00.150
Ahora usted puede hacer cosas más complejas, pero aquí

01:00.150 --> 01:03.940
para empezar digamos que todo lo que estoy haciendo es que estoy cargando

01:03.940 --> 01:06.871
el título del trabajo aquí, a la derecha.

01:06.871 --> 01:09.940
Ahora bien, si guardamos eso con nuestro servidor de desarrollo

01:09.940 --> 01:12.880
en funcionamiento y la compilación ejecutada en modo de vigilancia,

01:12.880 --> 01:14.420
obtengo el CEO aquí.

01:14.420 --> 01:17.395
Ahora que está lejos que no es demasiado elegante,

01:17.395 --> 01:22.395
sin embargo, si estamos obteniendo esto de un backend, por cualquier razón

01:23.080 --> 01:27.690
tal vez no obtenemos todos los datos que necesitamos, tal vez algunos

01:27.690 --> 01:30.490
datos no se establece en este punto.

01:30.490 --> 01:34.730
En aplicaciones más grandes y complejas, ciertamente a veces se

01:34.730 --> 01:39.240
trabaja con estructuras con datos anidados en las que no se sabe con

01:39.240 --> 01:42.650
certeza si alguna propiedad de un objeto está establecida

01:42.650 --> 01:45.340
o si tal vez está indefinida.

01:45.340 --> 01:49.680
Así que aquí digamos que el trabajo no existe aquí por la razón que sea no lo estamos

01:49.680 --> 01:53.180
obteniendo, aquí por supuesto obtengo un error ahora TypeScript

01:53.180 --> 01:55.930
se queja de esto porque sabe que no hay ninguna propiedad

01:55.930 --> 01:57.843
de trabajo ahora.

01:57.843 --> 02:01.347
El problema es que sabe que para estos datos no sabría si

02:01.347 --> 02:05.660
fueran datos que estamos obteniendo de algún archivo que no está controlado

02:05.660 --> 02:09.720
desde TypeScript o como acabo de decir si estamos tal vez obteniendo

02:09.720 --> 02:12.530
esto desde el backend y no sabemos con certeza

02:12.530 --> 02:15.550
qué datos serán devueltos.

02:15.550 --> 02:18.150
Ahora bien, si no se sabe si eso está definido o no,

02:18.150 --> 02:21.730
lo que podemos hacer en JavaScript normal es intentar acceder al

02:21.730 --> 02:25.098
trabajo y si eso funciona seguimos y accedemos al título.

02:25.098 --> 02:29.450
Esta es la forma en que JavaScript comprueba si algo existe antes de

02:29.450 --> 02:33.520
profundizar en ese objeto potencial y si es indefinido, este código

02:33.520 --> 02:37.110
nunca se ejecuta y por lo tanto tenemos un error de tiempo

02:37.110 --> 02:39.400
de ejecución más amplio.

02:39.400 --> 02:42.410
Nuevamente aquí TypeScript por supuesto sabe que el

02:42.410 --> 02:45.180
trabajo no existe, pero si esto fuera obtenido de

02:45.180 --> 02:48.470
alguna fuente donde TypeScript no puede mirar como el resultado

02:48.470 --> 02:52.910
de una petición HTTP, esta sería la forma segura de evitar errores en tiempo de

02:52.910 --> 02:54.920
ejecución en JavaScript.

02:54.920 --> 02:58.110
Ahora bien, si esto existe obtenemos la misma salida que antes.

02:58.110 --> 03:01.400
Si no existe, al menos no obtenemos un error en tiempo de

03:01.400 --> 03:02.233
ejecución.

03:02.233 --> 03:07.020
Con TypeScript, en realidad tienes una forma más agradable de hacerlo.

03:07.020 --> 03:10.520
Tienes el operador de encadenamiento opcional.

03:10.520 --> 03:15.320
Puedes añadir un signo de interrogación después de lo que no estás seguro de

03:15.320 --> 03:16.880
si está definido o no.

03:16.880 --> 03:21.600
Al menos si se utiliza la versión 3 de TypeScript. 7 o más.

03:21.600 --> 03:24.770
Aquí a mi IDE no le gusta esto, pero es una sintaxis

03:24.770 --> 03:26.300
soportada entonces.

03:26.300 --> 03:30.370
Esto le dice a TypeScript si esto existe, si lo hace accede al trabajo y por lo tanto

03:30.370 --> 03:33.450
aquí podemos añadir ese signo de interrogación y por lo tanto

03:33.450 --> 03:36.314
sólo acceder al título si el trabajo está definido.

03:36.314 --> 03:39.300
Ahora bien, si hacemos eso sigo obteniendo un error aquí

03:39.300 --> 03:42.490
si intento compilarlo porque TypeScript sigue sabiendo con

03:42.490 --> 03:44.510
certeza que el trabajo no existe.

03:44.510 --> 03:47.370
Pero si no lo supiera o si lo comento esto

03:47.370 --> 03:51.840
compila perfectamente y todo lo ejecuta como antes.

03:51.840 --> 03:56.400
Así que este operador de encadenamiento opcional nos ayuda a acceder de forma segura

03:56.400 --> 04:00.730
a las propiedades anidadas y a los objetos anidados en nuestros datos del objeto

04:00.730 --> 04:03.610
y si la cosa que está delante del signo de interrogación

04:03.610 --> 04:07.061
es indefinida no accederá a la cosa a partir de entonces y por lo

04:07.061 --> 04:10.910
tanto no lanzará un error en tiempo de ejecución sino que simplemente

04:10.910 --> 04:12.420
no continuará.

04:12.420 --> 04:15.210
Así que entre bastidores esto se compila básicamente con

04:15.210 --> 04:18.380
una comprobación if que verifica si eso existe antes de intentar

04:18.380 --> 04:19.213
acceder a esto.
