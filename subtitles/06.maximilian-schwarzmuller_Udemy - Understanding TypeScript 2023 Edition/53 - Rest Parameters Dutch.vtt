WEBVTT

00:02.060 --> 00:04.880
Man: Een beetje gerelateerd aan de spread

00:04.880 --> 00:07.060
operator zijn rust parameters.

00:07.060 --> 00:10.374
En daarvoor zal ik mijn add-functie weer aanpassen.

00:10.374 --> 00:13.870
Dus ik zal al die code hier uitcommentariëren

00:13.870 --> 00:15.780
zodat er niets breekt.

00:15.780 --> 00:20.520
En voeg mijn add-functie opnieuw toe met elke gewenste syntaxis met het functietoetswoord

00:20.520 --> 00:23.830
als pijlfunctie, wat je maar wilt.

00:23.830 --> 00:26.360
Maar nu wil ik een speciale functie.

00:26.360 --> 00:29.100
Ik wil het niet beperken tot twee waarden, ik

00:29.100 --> 00:31.340
wil zoveel waarden kunnen toevoegen

00:31.340 --> 00:33.290
als een gebruiker invoert.

00:33.290 --> 00:37.700
Zodat we in principe add kunnen noemen zoals dit, vijf,

00:37.700 --> 00:42.700
tien, twee, drie punt zeven, enzovoort, met zoveel waarden

00:42.880 --> 00:44.530
als je wilt.

00:44.530 --> 00:46.691
Als u het zou willen aanroepen met 10 waarden, zou

00:46.691 --> 00:48.090
dat ook mogelijk moeten zijn.

00:48.090 --> 00:51.160
Maar nu is het natuurlijk niet mogelijk, zoals je

00:51.160 --> 00:52.600
duidelijk kunt zien.

00:52.600 --> 00:54.290
Typescript geeft me een fout,

00:54.290 --> 00:57.760
en terecht, want ik accepteer hier geen argumenten.

00:57.760 --> 01:00.336
Nu kan ik hier natuurlijk voor argumenten aannemen

01:00.336 --> 01:02.210
en de juiste types toewijzen, maar

01:02.210 --> 01:04.300
wat als ik het dan aanroep met vijf.

01:04.300 --> 01:06.330
Zoals ik al zei, ik wil flexibel zijn.

01:06.330 --> 01:08.850
Dat is waar de rustparameters om de hoek komen kijken.

01:08.850 --> 01:13.111
Op de plaats waar u een lijst met waarden verwacht, dus niet waar

01:13.111 --> 01:15.270
u het wilt doorgeven, maar waar u

01:15.270 --> 01:18.308
het wilt accepteren als inkomende waarden,

01:18.308 --> 01:20.360
kunt u ook de drie puntjes gebruiken

01:20.360 --> 01:24.043
en dan een naam naar keuze, zoals getallen.

01:25.630 --> 01:27.430
Dit zal alle inkomende

01:27.430 --> 01:31.470
parameters, of in het algemeen de inkomende

01:31.470 --> 01:34.920
lijst van waarden, door komma's gescheiden,

01:34.920 --> 01:39.350
samenvoegen in een array.

01:39.350 --> 01:40.940
Dus getallen zal hier een array zijn,

01:40.940 --> 01:44.460
maar natuurlijk standaard een type van willekeurige waarden, dus een

01:44.460 --> 01:46.920
array vol met willekeurige waarden, en dat is niet

01:46.920 --> 01:48.300
wat we moeten doen, we moeten

01:48.300 --> 01:49.680
explicieter zijn.

01:49.680 --> 01:53.200
En hier kunnen we zeggen: "Het wordt een nummerreeks. Zoals dat.

01:53.200 --> 01:54.430
Dus nu definiëren we het juiste

01:54.430 --> 01:56.420
type en werken we met die getallen-array.

01:56.420 --> 01:58.710
We kunnen dat op verschillende manieren samenvatten.

01:58.710 --> 02:01.880
We kunnen werken met een resultaatvariabele en dan een

02:01.880 --> 02:04.110
vierlus omdat getallen een array is.

02:04.110 --> 02:06.863
Dus hier zouden we door getallen kunnen lussen

02:06.863 --> 02:09.260
en dat bij het resultaat optellen.

02:09.260 --> 02:11.519
Of we gebruiken de reduceermethode die beschikbaar is op arrays.

02:11.519 --> 02:15.620
Reduce werkt zo dat het een bewerking uitvoert op elk element in

02:15.620 --> 02:19.030
een matrix, een resultaat teruggeeft, en dan deze resultaten

02:19.030 --> 02:20.940
bij elkaar optelt.

02:20.940 --> 02:24.310
Daarvoor geef je een functie om te verkleinen

02:24.310 --> 02:27.160
en dan een beginwaarde die hier nul is.

02:27.160 --> 02:31.093
En dan neemt deze functie die je doorgeeft aan reduceren zelf

02:31.093 --> 02:33.430
twee argumenten en dat is het huidige

02:33.430 --> 02:35.920
resultaat zou je kunnen zeggen.

02:35.920 --> 02:38.968
En het is de huidige waarde waar we naar kijken,

02:38.968 --> 02:42.640
wat elke waarde van de array ones zal zijn.

02:42.640 --> 02:45.350
En dan kun je hier cuResult teruggeven, wat

02:45.350 --> 02:48.290
voor de eerste run die beginwaarde zal zijn.

02:48.290 --> 02:51.497
Plus curValue.

02:51.497 --> 02:52.703
En als je dat doet zal de totale vermindering hier een getal opleveren.

02:53.859 --> 02:57.920
Hier kunnen we dus globaal het resultaat van getallen gereduceerd

02:57.920 --> 03:01.160
teruggeven en dus zal de variabele add, of constante hier,

03:01.160 --> 03:04.790
uiteindelijk een functie bevatten die een paar getallen neemt,

03:04.790 --> 03:07.320
niet een array van getallen.

03:07.320 --> 03:10.650
Maar vanwege de overige parameters, een lijst met getallen,

03:10.650 --> 03:13.690
die dan binnen de functie wordt samengevoegd tot een array

03:13.690 --> 03:16.510
en die uiteindelijk het getal teruggeeft.

03:16.510 --> 03:18.550
Dus als we nu alles opslaan, zou het allemaal

03:18.550 --> 03:20.350
moeten werken en zien we het resultaat,

03:20.350 --> 03:23.350
de som van onze kleine optelling hier.

03:23.350 --> 03:26.250
Dus dat zijn restparameters, een echt nuttige

03:26.250 --> 03:28.430
functie om een onbeperkt aantal

03:28.430 --> 03:31.400
argumenten te accepteren.

03:31.400 --> 03:34.210
En een paar ingebouwde methoden zoals de

03:34.210 --> 03:36.680
push-methode werken precies zo.

03:36.680 --> 03:38.540
Zie je, push heeft een vreemde parameter definitie.

03:38.540 --> 03:42.560
Nou dat is precies wat we net geleerd hebben.

03:42.560 --> 03:44.250
Push neemt hier een paar

03:44.250 --> 03:48.490
items voor deze array, die een array vol strings is.

03:48.490 --> 03:50.400
Het heeft een paar snaren nodig.

03:50.400 --> 03:51.730
En dit betekent niet dat het een

03:51.730 --> 03:54.060
array van strings neemt, maar in plaats daarvan hier

03:54.060 --> 03:56.400
met de overige parameters, een door komma's gescheiden

03:56.400 --> 03:58.580
lijst van strings, die ins uit portiek wordt samengevoegd

03:58.580 --> 04:01.260
tot een array en intern wordt afgehandeld.

04:01.260 --> 04:03.100
Dat is de rest van de syntaxis.

04:03.100 --> 04:06.276
Je kunt dit trouwens zelfs combineren met tuples.

04:06.276 --> 04:10.370
Als je weet dat je meerdere argumenten wilt ondersteunen,

04:10.370 --> 04:15.370
maar je weet hoeveel het er zullen zijn, dus als het geen onbeperkte lijst

04:16.520 --> 04:18.420
is, dan kun je ook daar een tupeltype

04:18.420 --> 04:20.392
gebruiken.

04:20.392 --> 04:23.430
En zeg bijvoorbeeld, "Ik accepteer mijn gratis nummers hier. En dan moet ik hier natuurlijk het vierde

04:23.430 --> 04:28.430
argument verwijderen bij het aanroepen van de functie.

04:28.460 --> 04:30.910
Want het is me nu wel duidelijk dat ik drie argumenten

04:30.910 --> 04:32.240
wil, die elk een getal zijn.

04:32.240 --> 04:33.830
We hadden hier natuurlijk ook gewoon drie

04:33.830 --> 04:36.980
zelfstandige parameters kunnen toevoegen, maar deze syntaxis is misschien toch

04:36.980 --> 04:39.030
wat korter of gemakkelijker in te stellen dan het toevoegen

04:39.030 --> 04:40.720
van de vrije parameters.

04:40.720 --> 04:43.090
Het hangt echt af van uw toepassing en uw vereisten.

04:43.090 --> 04:46.919
Hier stap ik af van die opzet en zal ik generieker

04:46.919 --> 04:51.320
zijn en zoveel argumenten accepteren als ik krijg, want

04:51.320 --> 04:55.210
voor deze functie kan ik inderdaad een oneindige

04:55.210 --> 04:57.864
hoeveelheid argumenten aan.
