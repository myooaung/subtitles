WEBVTT

00:02.160 --> 00:04.860
Presentatore: Ora che abbiamo visto un altro bell'esempio

00:04.860 --> 00:06.440
di come lavorare con i decoratori,

00:06.440 --> 00:09.040
c'è un ultimo esempio che voglio approfondire.

00:09.040 --> 00:11.997
E questi sono i decoratori per la validazione.

00:11.997 --> 00:14.560
Per questo, in fondo al file, aggiungerò

00:14.560 --> 00:17.733
un'altra nuova classe.

00:18.780 --> 00:20.530
Potrebbe essere un corso.

00:20.530 --> 00:23.903
Ora un corso dovrebbe avere un titolo, che è una stringa.

00:25.430 --> 00:27.483
E forse un prezzo, che è un numero.

00:29.730 --> 00:32.640
Poi abbiamo un costruttore in cui otteniamo entrambi

00:32.640 --> 00:34.440
i valori e non sto deliberatamente

00:35.550 --> 00:37.780
usando la scorciatoia, in modo da poter aggiungere

00:37.780 --> 00:40.953
facilmente i decoratori di proprietà.

00:42.690 --> 00:44.560
Quindi, imposto il titolo

00:44.560 --> 00:46.653
a t e il prezzo a p.

00:47.990 --> 00:50.530
Naturalmente, quando vogliamo istanziare questo

00:50.530 --> 00:53.610
corso, dobbiamo inserire un titolo valido e un prezzo valido.

00:53.610 --> 00:56.730
Ma uno scenario comune che si può incontrare in alcune

00:56.730 --> 00:59.630
applicazioni è che si recuperano dati, ad esempio

00:59.630 --> 01:03.340
da una risorsa web, e si ottengono dati in cui si pensa di avere

01:03.340 --> 01:05.854
un paio di corsi, ad esempio, ma non lo si

01:05.854 --> 01:08.110
sa con certezza.

01:08.110 --> 01:12.839
Oppure, in un altro scenario possibile, si lascia che gli utenti inseriscano i dati e si

01:12.839 --> 01:15.490
vuole semplicemente assegnare quei dati e negoziare

01:15.490 --> 01:18.370
un nuovo corso con i dati inseriti dall'utente e si presume

01:18.370 --> 01:21.280
che siano corretti, ma non si ha la garanzia che lo siano

01:21.280 --> 01:22.500
e quindi si vuole convalidare

01:22.500 --> 01:24.210
l'input.

01:24.210 --> 01:26.380
Questo è lo scenario che voglio simulare.

01:26.380 --> 01:29.940
Diciamo che nel nostro file html di indice, abbiamo un semplice

01:30.894 --> 01:32.840
modulo qui e non lo stilizzerò,

01:32.840 --> 01:36.074
quindi ora sarà così bello, ma abbiamo un semplice modulo

01:36.074 --> 01:41.074
qui con l'input di tipo testo e un segnaposto di titolo, woops, corso, titolo e un

01:41.390 --> 01:44.620
id di diciamo titolo e sotto questo abbiamo un input

01:44.620 --> 01:46.870
di numero dove il tipo è tutto il testo,

01:46.870 --> 01:50.605
ma è il prezzo del corso e l'id è prezzo.

01:50.605 --> 01:55.030
E poi abbiamo il nostro pulsante per l'invio.

01:55.030 --> 02:00.030
Quindi il pulsante è di tipo submit.

02:00.040 --> 02:02.780
Si tratta quindi di un modulo molto semplice e, come ho detto, non

02:02.780 --> 02:04.280
è bellissimo se lo guardiamo qui, ma

02:04.280 --> 02:06.070
ha tutto ciò di cui abbiamo bisogno.

02:06.070 --> 02:08.763
Ora, colleghiamo un ascoltatore al modulo.

02:09.830 --> 02:14.780
Quindi ho il mio courseForm che posso ottenere con document, querySelector, form e

02:14.780 --> 02:18.840
aggiungo il punto esclamativo perché so che ne otterrò uno, quindi questo

02:18.840 --> 02:21.910
non sarà nullo, e poi sul form possiamo aggiungereEventListener,

02:21.910 --> 02:25.050
l'ascoltatore dell'evento submit e poi otteniamo l'oggetto

02:26.390 --> 02:32.360
evento passato nella funzione che ho assegnato automaticamente.

02:32.360 --> 02:35.450
Voglio chiamare l'evento preventDefault, in modo da non inviare

02:35.450 --> 02:38.030
il modulo e non inviare alcuna richiesta http.

02:38.030 --> 02:40.570
E poi vogliamo estrarre i dati per

02:40.570 --> 02:42.910
il titolo e per il prezzo.

02:42.910 --> 02:45.779
Quindi, il titolo può essere estratto raggiungendo

02:45.779 --> 02:49.700
document, querySelector, o in realtà, poiché abbiamo assegnato

02:49.700 --> 02:54.700
un id, getElementById, title e sappiamo che questo sarà un HTMLInputElement,

02:55.560 --> 03:01.700
quindi possiamo usare il typecasting per far sapere a typescript di questo, e il prezzo è document,

03:01.700 --> 03:09.672
getElementById, price e possiamo anche convertire questo in un InputElement.

03:09.672 --> 03:11.320
E in realtà questi sono gli elementi,

03:11.320 --> 03:14.520
quindi rinominiamo le costanti in titleEL e priceEl e per ottenere

03:14.520 --> 03:17.779
il titolo concreto possiamo ora andare su titleEl, accedere alla

03:17.779 --> 03:20.930
proprietà value e per ottenere il prezzo, possiamo fare lo stesso

03:20.930 --> 03:23.400
per il priceElement e ottenere il valore anche lì,

03:23.400 --> 03:26.840
e voglio che venga aggiunto come numero, quindi aggiungo il più davanti

03:26.840 --> 03:30.060
per convertirlo in numero.

03:30.060 --> 03:34.017
Questo è quanto, ma ora voglio creare un nuovo corso

03:34.017 --> 03:36.090
con queste informazioni.

03:36.090 --> 03:39.060
Quindi, qui abbiamo il corso creato in

03:39.060 --> 03:43.850
cui posso chiamare un nuovo corso e inserire titolo e prezzo.

03:43.850 --> 03:46.770
Ora il dattiloscritto lo accetta, perché il titolo sarà una stringa

03:46.770 --> 03:48.640
e poiché converto questo input in un numero,

03:48.640 --> 03:50.200
il prezzo sarà un numero.

03:50.200 --> 03:54.160
Quindi, se registro nella console il corso creato, possiamo verificare

03:54.160 --> 03:55.530
se funziona.

03:55.530 --> 03:58.693
Salviamo, ricarichiamo, magari cancelliamo la console in modo

03:58.693 --> 04:00.680
da vedere chiaramente l'output e poi aggiungiamo

04:00.680 --> 04:02.400
un nuovo corso.

04:02.400 --> 04:05.785
La guida completa di Javascript costa 199 dollari

04:05.785 --> 04:08.010
e sembra funzionare.

04:08.010 --> 04:11.010
Purtroppo questo funziona solo

04:11.010 --> 04:13.290
se non inserisco nulla.

04:13.290 --> 04:16.600
Se ora clicco su Salva, vediamo che il corso è stato creato.

04:16.600 --> 04:19.820
Ora, questo è tecnicamente un corso valido, ma ovviamente

04:19.820 --> 04:23.121
non lo è per la nostra applicazione.

04:23.121 --> 04:26.220
Probabilmente vogliamo avere un titolo che non sia

04:26.220 --> 04:28.620
vuoto e un prezzo maggiore di zero.

04:28.620 --> 04:30.660
Quindi vogliamo aggiungere la convalida.

04:30.660 --> 04:32.670
Naturalmente possiamo semplicemente

04:32.670 --> 04:37.130
aggiungere un controllo if qui e verificare se title, trim, length è maggiore di zero,

04:37.130 --> 04:38.830
il che significa che non è vuoto e

04:38.830 --> 04:41.100
dove convalidiamo anche il prezzo.

04:41.100 --> 04:43.870
Ma questo significa che ogni volta che creiamo un nuovo

04:43.870 --> 04:47.880
corso, dobbiamo aggiungere la logica di validazione prima di aggiungerlo.

04:47.880 --> 04:49.990
Non sarebbe bello se la logica di validazione

04:49.990 --> 04:51.910
fosse inclusa nella classe del corso,

04:51.910 --> 04:53.940
magari con l'aiuto di decoratori?

04:53.940 --> 04:56.770
Ed è esattamente quello che voglio fare qui.

04:56.770 --> 04:59.910
Ora vi fornirò solo un'idea di base di come potremmo

04:59.910 --> 05:01.447
implementare questo,

05:01.447 --> 05:04.861
nel prossimo modulo vi mostrerò un pacchetto di

05:04.861 --> 05:08.270
esempio che lo fa in modo molto più elaborato e che

05:08.270 --> 05:10.010
poi useremo tutti per giocarci

05:10.010 --> 05:12.080
un po'.

05:12.080 --> 05:14.530
Ora però voglio implementare questo

05:14.530 --> 05:16.300
con i miei decoratori e aggiungerò

05:16.300 --> 05:19.370
un decoratore richiesto qui e aggiungeremo un'altra

05:19.370 --> 05:24.433
funzione decoratore che chiamerò PositiveNumber.

05:26.710 --> 05:28.510
Quindi ho qui due decoratori.

05:28.510 --> 05:31.240
Ora la mia idea è che possiamo aggiungerli

05:31.240 --> 05:35.369
alle nostre proprietà, per esempio Required davanti a title

05:35.369 --> 05:40.369
e positiveNumber davanti a price e typescript li registra da qualche parte

05:41.740 --> 05:44.020
e poi abbiamo una terza funzione,

05:44.020 --> 05:49.020
validate, a cui possiamo passare un oggetto, quindi qualsiasi oggetto e

05:49.490 --> 05:54.490
typescript dà un'occhiata al progetto, trova qualsiasi validazione che

05:55.120 --> 05:58.780
abbiamo registrato in precedenza su questa classe per

05:58.780 --> 06:01.440
questo oggetto e applica la nostra logica

06:01.440 --> 06:03.410
di validazione.

06:03.410 --> 06:05.480
Questa è l'idea che ho qui.

06:05.480 --> 06:08.240
Quindi, questo potrebbe far parte di una libreria di terze parti,

06:08.240 --> 06:11.170
che noi esponiamo all'utente, e quindi basterebbe importare required

06:11.170 --> 06:14.620
positive number e validate per impostare prima i validatori e poi, a un certo

06:14.620 --> 06:16.750
punto, chiamare validate.

06:16.750 --> 06:18.634
Quindi, per esempio, quando

06:18.634 --> 06:22.462
abbiamo creato il corso, possiamo chiamare validate

06:22.462 --> 06:27.462
e passare il dato createdCourse e se questo non è vero, quindi diciamo

06:30.370 --> 06:31.660
che dovrebbe restituire

06:31.660 --> 06:35.040
true o false, se non è vero, allora lanciamo un errore

06:35.040 --> 06:42.960
o mostriamo un avviso, input non valido per favore riprova e solo altrimenti continuiamo.

06:42.960 --> 06:43.870
Questa è la mia idea.

06:43.870 --> 06:46.540
Si può chiamare validate, che restituisce true o false.

06:46.540 --> 06:48.793
Vero se è valido, falso se non è valido

06:48.793 --> 06:51.670
e quindi possiamo utilizzare il risultato.

06:51.670 --> 06:53.730
Pertanto, abbiamo un paio di cose da fare.

06:53.730 --> 06:56.290
Dobbiamo assicurarci che quando aggiungiamo un decoratore,

06:56.290 --> 06:59.350
questo sia in qualche modo memorizzato da qualche parte.

06:59.350 --> 07:00.970
Ancora una volta, teniamo presente

07:00.970 --> 07:02.950
che questo potrebbe far parte della nostra

07:02.950 --> 07:05.710
libreria di terze parti, quindi potremmo avere una sorta

07:05.710 --> 07:10.050
di memoria che memorizza che per questa classe e questa proprietà title, ad esempio,

07:10.050 --> 07:12.480
vogliamo che sia obbligatoria.

07:12.480 --> 07:15.630
E in validate, possiamo verificare se nello storage dell'oggetto

07:15.630 --> 07:19.026
ottenuto, per la classe su cui si basa l'oggetto, è stato registrato

07:19.026 --> 07:23.330
un validatore per il titolo, per il prezzo e così via.

07:23.330 --> 07:25.260
E poi eseguiamo la nostra logica di validazione.

07:25.260 --> 07:26.453
Questa è la mia idea.
