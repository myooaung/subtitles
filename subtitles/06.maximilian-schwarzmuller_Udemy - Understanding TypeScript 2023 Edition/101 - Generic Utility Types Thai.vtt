WEBVTT

00:02.330 --> 00:06.970
ผู้บรรยาย: เมื่อพูดถึงประเภททั่วไป คุณสามารถพูดเป็นโบนัสเล็กน้อยว่า

00:06.970 --> 00:11.410
ฉันต้องการชี้ทิศทางของคุณไปที่ประเภทที่มีมาให้สองสามประเภท

00:11.410 --> 00:20.350
Typescript มาพร้อมกับซึ่งใช้ประเภททั่วไปหรือประเภททั่วไปที่ให้ฟังก์ชันยูทิลิตี้บางอย่างแก่เรา

00:20.350 --> 00:22.050
ดังนั้นโบนัสเพียงเล็กน้อยที่นี่

00:22.050 --> 00:25.550
และในบางครั้งประเภทพิเศษเหล่านี้อาจมีประโยชน์

00:25.550 --> 00:30.680
ตอนนี้ คุณจะพบลิงก์ไปยังเอกสารฉบับเต็มของประเภทยูทิลิตี้ในตัวทั้งหมด

00:30.680 --> 00:33.810
ที่นี่ฉันแค่อยากจะยกตัวอย่างให้คุณฟัง

00:33.810 --> 00:38.610
เช่นเดียวกับสิ่งเหล่านี้ ประเภทเหล่านี้มีอยู่ในประเภทของโลกเท่านั้น

00:38.610 --> 00:41.300
ดังนั้นก่อนการรวบรวมเท่านั้น

00:41.300 --> 00:43.460
แต่ในระหว่างขั้นตอนการรวบรวมนี้

00:43.460 --> 00:48.130
พวกเขาสามารถให้ความปลอดภัยเพิ่มเติมหรือความยืดหยุ่นเป็นพิเศษแก่คุณ

00:48.130 --> 00:51.670
ตัวอย่างเช่น มีประเภทบางส่วนในตัว

00:51.670 --> 00:55.580
สมมติว่าเรามีประเภทใหม่ และคุณมีส่วนต่อประสานที่เราจะหาให้เจอ

00:55.580 --> 00:59.493
หรือประเภทแบบกำหนดเองก็ไม่สำคัญ CourseGoal

01:00.660 --> 01:03.780
CourseGoal มีชื่อเรื่อง ซึ่งควรเป็นสตริง

01:03.780 --> 01:09.040
และสมมติว่าเป็นคำอธิบาย ซึ่งทั้งหมดควรเป็นสตริง

01:09.040 --> 01:14.040
บางทีเราอาจมีคุณสมบัติ CompleteUntil ซึ่งเป็นวันที่

01:15.290 --> 01:17.961
ตอนนี้เราต้องการมีฟังก์ชั่น สมมุติว่า

01:17.961 --> 01:21.500
createCourseGoal ซึ่งสร้างวัตถุดังกล่าวขึ้นมา

01:21.500 --> 01:23.380
แน่นอน เราสามารถสร้างคลาสนั้นได้เช่นกัน

01:23.380 --> 01:26.290
แต่เรามีฟังก์ชันดังกล่าว เพราะในฟังก์ชันนั้น

01:26.290 --> 01:28.740
เราอาจดึงข้อมูลบางอย่างจากฐานข้อมูล

01:28.740 --> 01:30.590
หรืออะไรก็ตามที่เป็นอยู่

01:30.590 --> 01:32.110
ดังนั้นเราจึงมีฟังก์ชันนี้

01:32.110 --> 01:33.330
และท้ายที่สุด

01:33.330 --> 01:37.890
ฉันต้องการชื่อเรื่อง ซึ่งเป็นสตริง ฉันอาจได้รับคำอธิบายของฉัน

01:37.890 --> 01:42.320
ซึ่งเป็นสตริง และฉันหวังว่าจะได้วันที่ของฉัน

01:42.320 --> 01:47.150
ซึ่งเป็นวันที่

01:47.150 --> 01:49.680
แน่นอนว่าในฟังก์ชันนั้น เราสามารถส่งคืนวัตถุได้

01:49.680 --> 01:51.740
แต่เราเพิ่งตั้งค่าสิ่งเหล่านี้ทั้งหมด

01:51.740 --> 01:55.340
ดังนั้นเราจึงตั้งชื่อเรื่องเป็นชื่อเรื่อง คำอธิบายเป็นคำอธิบาย

01:55.340 --> 01:57.840
และดำเนินการจนเสร็จสิ้น

01:57.840 --> 02:00.760
เราสามารถทำได้ทั้งหมด และถ้าเรากำหนดว่าฟังก์ชันนี้จะส่งคืน

02:00.760 --> 02:07.120
CourseGoal เสมอ เราก็จะมีฟังก์ชันการตั้งค่าที่ถูกต้อง

02:07.120 --> 02:09.530
ด้วยเหตุผลบางอย่าง สมมติว่าเราไม่ได้ทำเช่นนี้

02:09.530 --> 02:11.623
แต่เราไม่ได้ทำทั้งหมดในขั้นตอนเดียว

02:12.680 --> 02:13.870
แต่สิ่งที่ผมอยากทำคือ

02:13.870 --> 02:18.700
ผมอยากเริ่มต้นด้วยการสร้างตัวแปรตรงนี้ ซึ่งมีวัตถุว่างอยู่

02:18.700 --> 02:22.620
จากนั้นทีละขั้นตอน ฉันต้องการเพิ่มชื่อของฉันที่นี่

02:22.620 --> 02:26.420
ฉันต้องการเพิ่มคำอธิบายของฉันที่นี่

02:26.420 --> 02:31.303
และฉันต้องการเพิ่มวันที่ของฉันที่นี่

02:33.640 --> 02:36.420
ตอนนี้ฉันได้รับข้อผิดพลาดเพราะแน่นอนว่าฉันไม่สามารถตั้งชื่อได้

02:36.420 --> 02:39.170
นี่ไม่ใช่คุณสมบัติของวัตถุนี้

02:39.170 --> 02:41.930
และในขณะที่สิ่งนี้ใช้ได้กับวานิลลา JavaScript

02:41.930 --> 02:45.410
แต่ TypeScript ไม่ชอบที่จะเพิ่มที่นี่ในทันที

02:45.410 --> 02:47.810
ดังนั้น เราอาจต้องการบอกว่าสิ่งนี้ควรเป็นประเภท

02:47.810 --> 02:49.300
CourseGoal ที่นี่

02:49.300 --> 02:51.040
ตอนนี้ TypeScript ไม่ได้บ่นเกี่ยวกับเรื่องนี้

02:51.040 --> 02:56.223
แต่เกี่ยวกับความจริงที่ว่านี่เป็นวัตถุว่างเปล่า ซึ่งเห็นได้ชัดว่าไม่เหมาะกับประเภทของเราที่นี่

02:57.070 --> 03:01.000
ในท้ายที่สุด ฉันต้องการส่งคืนและฉันต้องการเพิ่มสิ่งเหล่านี้ทีละขั้นตอน

03:01.000 --> 03:04.570
อาจเป็นเพราะเรามีการตรวจสอบความถูกต้องเพิ่มเติมก่อนแต่ละขั้นตอน

03:04.570 --> 03:07.590
ดังนั้นจึงต้องเพิ่มแบบนี้

03:07.590 --> 03:12.390
ตอนนี้นี่คือสิ่งที่ประเภทบางส่วนมีประโยชน์

03:12.390 --> 03:17.390
เราสามารถพูดได้ว่า CourseGoal ที่นี่ควรเป็นประเภทบางส่วน ซึ่งในท้ายที่สุด

03:17.580 --> 03:21.600
ต้องขอบคุณประเภททั่วไปที่จะเก็บเป้าหมายของหลักสูตร

03:21.600 --> 03:28.260
ตอนนี้สิ่งที่ทำคือบอก TypeScript ว่านี่คือวัตถุซึ่งในท้ายที่สุดจะเป็นเป้าหมายของหลักสูตร

03:28.260 --> 03:36.620
แต่เริ่มแรก ประเภทบางส่วนจะรวมประเภทของเราเอง และเปลี่ยนเป็นประเภทที่มีคุณสมบัติทั้งหมดเหล่านี้หรือไม่ก็ได้

03:36.620 --> 03:39.440
นั่นคือสิ่งที่บางส่วนสร้างขึ้นในประเภทเหล่านี้

03:39.440 --> 03:40.670
Typescript มาพร้อมกับ

03:40.670 --> 03:45.713
ดังนั้นมันจึงเปลี่ยนสิ่งนี้เป็นประเภท ซึ่งเป็นประเภทออบเจกต์ด้วย โดยที่คุณสมบัติทั้งหมดเป็นตัวเลือก

03:45.713 --> 03:49.290
ดังนั้นเราจึงสามารถตั้งค่านี้เป็นวัตถุว่างในขั้นต้น

03:49.290 --> 03:53.030
และยังเพิ่มสิ่งเหล่านี้ทีละขั้นตอน

03:53.030 --> 03:54.880
ปัญหาเดียวคือในท้ายที่สุด

03:54.880 --> 03:58.130
เราไม่สามารถส่งคืนสิ่งนี้ได้ เพราะตอนนี้มันยังคงเป็นประเภท

03:58.130 --> 04:02.130
CourseGoal บางส่วน ไม่ใช่ประเภท CourseGoal

04:02.130 --> 04:04.630
เราสามารถแก้ไขได้โดยแปลงเป็น courseGoal ด้วย

04:04.630 --> 04:08.990
typecasting เนื่องจากเราทราบดีว่า ณ จุดนี้ เราจะเพิ่มข้อมูลทั้งหมดแล้ว

04:08.990 --> 04:11.667
ดังนั้นมันจะเป็นเป้าหมายของหลักสูตรที่แท้จริงและไม่ใช่บางส่วน

04:11.667 --> 04:13.510
และแน่นอนว่านี่เป็นการแต่งขึ้นเล็กน้อย

04:13.510 --> 04:19.650
แต่คุณอาจมีสถานการณ์เช่นนี้ ซึ่งคุณต้องการสลับประเภทออบเจกต์ประเภทใดประเภทหนึ่งเป็นการชั่วคราว

04:19.650 --> 04:23.530
ซึ่งเป็นหนึ่งในอินเทอร์เฟซของคุณให้เป็นทางเลือกเท่านั้น

04:23.530 --> 04:28.170
เพื่อให้แน่ใจว่าคุณสมบัติทั้งหมดในนั้นสามารถเลือกได้ชั่วคราวเท่านั้น

04:28.170 --> 04:31.223
จากนั้นประเภทบางส่วนจะช่วยให้คุณทำเช่นนั้นได้

04:32.370 --> 04:40.170
และไม่เคยสร้างยูทิลิตี้ประเภทที่คุณมีเป็นประเภทอ่านอย่างเดียวที่มีประโยชน์มาก

04:40.170 --> 04:42.623
สมมติว่าเรามีอาร์เรย์ของชื่อ

04:43.460 --> 04:46.330
และในนั้นฉันได้ Max และ Sports

04:46.330 --> 04:49.860
ตอนนี้ TypeScript อนุมานได้อย่างถูกต้องว่านี่คืออาร์เรย์สตริง

04:49.860 --> 04:50.960
ตอนนี้เราทำอะไรได้บ้าง?

04:50.960 --> 04:52.690
แน่นอนว่าเราสามารถผลักดัน

04:53.700 --> 04:55.400
Manu ไปที่นั่นได้ และบางทีฉันน่าจะเปลี่ยนเป็น

04:55.400 --> 04:59.720
Anna ไม่ใช่กีฬาเพื่อให้มีชื่ออยู่ในนั้น

04:59.720 --> 05:00.553
วิธีนี้ใช้ได้ผล

05:00.553 --> 05:04.230
อย่างไรก็ตาม สมมติว่าฉันต้องการให้แน่ใจว่านี่เป็นอาร์เรย์ที่ถูกล็อก

05:04.230 --> 05:06.260
เราไม่สามารถเพิ่มที่นี่

05:06.260 --> 05:07.870
และเราสามารถเพิ่มที่นี่ได้ตลอดเวลา

05:07.870 --> 05:11.690
แต่อย่างน้อยฉันอยากให้ Typescript ตะโกนใส่ฉันถ้าฉันลอง

05:11.690 --> 05:13.730
นั่นคือที่ที่เราสามารถใช้ประเภทอ่านอย่างเดียว

05:13.730 --> 05:18.730
เราสามารถตั้งค่าให้อ่านอย่างเดียวสตริงอาร์เรย์

05:18.930 --> 05:23.030
จากที่เราบอก TypeScript สิ่งที่เราเก็บไว้นี่คืออาร์เรย์ของสตริง

05:23.030 --> 05:25.830
แต่ก็ยังเป็นอาร์เรย์ของสตริง ซึ่งอ่านได้อย่างเดียว

05:25.830 --> 05:28.210
ดังนั้น เมื่อเราพยายามเพิ่มบางอย่างด้วยการพุช

05:28.210 --> 05:31.600
หรือหากเราพยายามลบบางอย่างด้วยป๊อป เราจะได้รับข้อผิดพลาด

05:31.600 --> 05:36.320
เนื่องจากเราไม่ได้รับอนุญาตให้ทำสิ่งเหล่านี้กับอาร์เรย์นี้

05:36.320 --> 05:41.610
และนี่ไม่ได้จำกัดแค่อาร์เรย์เท่านั้น คุณยังสามารถใช้แบบอ่านอย่างเดียวกับวัตถุได้อีกด้วย

05:41.610 --> 05:43.990
ตัวอย่างเช่น เพื่อทำการตลาดเป็นแบบอ่านอย่างเดียว

05:43.990 --> 05:49.920
เพื่อไม่ให้คุณเปลี่ยนคุณสมบัติหรือเพิ่มคุณสมบัติใหม่ให้กับวัตถุนี้

05:49.920 --> 05:59.490
ดังนั้นสิ่งนี้จึงมีประโยชน์มากและให้ความยืดหยุ่นมากขึ้นหรือแม่นยำยิ่งขึ้นเกี่ยวกับสิ่งที่คุณตั้งใจจะทำในโค้ดของคุณ

05:59.490 --> 06:01.380
ตอนนี้ ทั้งหมดนี้เป็นเพียงประเภทยูทิลิตี้ที่มีอยู่ในโลกของ

06:01.380 --> 06:03.610
TypeScript เท่านั้น

06:03.610 --> 06:05.881
ดังนั้นพวกเขาจะไม่รวบรวมอะไรเลย

06:05.881 --> 06:09.400
แต่ในระหว่างการรวบรวม พวกเขาให้ความเข้มงวดเป็นพิเศษ

06:09.400 --> 06:14.800
หรือตรวจสอบเพิ่มเติม หรือข้ามการตรวจสอบบางอย่างเหมือนที่เราทำกับบางส่วน

06:14.800 --> 06:17.170
ตอนนี้คุณมีมากกว่าอ่านอย่างเดียวและบางส่วน

06:17.170 --> 06:22.420
และตามที่ฉันได้กล่าวถึงที่แนบมา คุณจะพบเอกสารประกอบรายการประเภทยูทิลิตี้เหล่านี้ทั้งหมด

06:22.420 --> 06:28.350
ในบางสถานการณ์ สิ่งเหล่านี้มีประโยชน์จริงๆ ดังนั้นฉันไม่ต้องการซ่อนสิ่งเหล่านี้จากคุณอย่างแน่นอน

06:28.350 --> 06:34.060
แต่คุณควรตระหนักถึงสิ่งเหล่านี้เพื่อที่คุณจะได้สามารถใช้มันเมื่อคุณต้องการล็อคบางอย่าง

06:34.060 --> 06:36.980
หรือในกรณีของการเปิดบางส่วนหรือกับสิ่งอื่น

06:36.980 --> 06:39.690
ๆ ทั้งหมดที่ฉันไม่ได้พูดถึงที่นี่ หากคุณ '

06:39.690 --> 06:45.140
มีการดำเนินการอื่น ๆ ซึ่งสามารถปรับปรุงได้ด้วยประเภทยูทิลิตี้ในตัวเหล่านี้

06:45.140 --> 06:47.670
และประเภทยูทิลิตี้เหล่านี้ล้วนเป็นประเภททั่วไป

06:47.670 --> 06:49.170
เพราะสิ่งที่พวกเขาทำคือ

06:49.170 --> 06:54.190
พวกเขาใช้ค่าอื่นที่เป็นประเภทใดก็ได้ และทำบางอย่างกับมัน

06:54.190 --> 06:57.970
พวกเขาตั้งค่าทุกอย่างให้เป็นตัวเลือก พวกเขาล็อคมันไว้

06:57.970 --> 07:01.330
ไม่สนใจว่านี่คืออาร์เรย์หรือวัตถุ หรืออาร์เรย์ของสตริง

07:01.330 --> 07:04.430
อาร์เรย์ของตัวเลข และอื่นๆ

07:04.430 --> 07:06.000
นั่นเป็นเหตุผลที่สิ่งเหล่านี้เป็นเรื่องทั่วไป

07:06.000 --> 07:10.790
และร่วมกับยาชื่อสามัญในตัวด้านบนที่เราเห็นก่อนหน้านี้และยาชื่อสามัญของคุณเอง

07:10.790 --> 07:16.793
หวังว่าทั้งหมดนี้จะช่วยให้คุณเข้าใจอีกครั้งว่าเหตุใดยาชื่อสามัญจึงมีประโยชน์ในสาเหตุที่ยานี้มีอยู่จริง
