WEBVTT

00:02.440 --> 00:05.170
Người hướng dẫn: Bây giờ nói về các cuộc gọi lại

00:05.170 --> 00:08.400
và các loại chức năng, nó hoạt động khá giống nhau.

00:08.400 --> 00:10.550
Giả sử chúng ta có một chức

00:11.800 --> 00:14.990
năng mới ở trên đó addAndHandle.

00:14.990 --> 00:18.420
Ở đó, chúng tôi mong đợi nhận được hai số và sau đó tôi cũng

00:19.740 --> 00:22.320
muốn nhận chức năng gọi lại tại đây.

00:22.320 --> 00:24.480
Vì vậy, một hàm được truyền và là một

00:24.480 --> 00:26.670
đối số sẽ thực hiện điều gì đó với kết quả,

00:26.670 --> 00:29.930
thì tất nhiên ở đây chúng ta có thể tạo ra kết quả.

00:29.930 --> 00:31.060
Nhưng không chỉ trả

00:31.060 --> 00:33.290
lại nó, mà thay vào đó tôi muốn gọi

00:33.290 --> 00:35.670
hàm gọi lại và chuyển kết quả.

00:35.670 --> 00:36.990
Bây giờ, tôi muốn thực sự

00:36.990 --> 00:39.270
rõ ràng rằng gọi lại phải là một chức năng.

00:39.270 --> 00:42.190
Vì vậy, một lần nữa, tôi đang sử dụng định

00:42.190 --> 00:45.640
nghĩa kiểu hàm đó có thể không trả về bất kỳ thứ gì

00:45.640 --> 00:49.650
nhưng nó lấy một số làm đối số vì chúng tôi đang chuyển một

00:49.650 --> 00:51.280
số cho nó ở đây.

00:51.280 --> 00:52.740
Vì vậy, hàm gọi lại,

00:52.740 --> 00:55.870
hàm mà chúng ta đang chuyển vào hàm này dưới

00:55.870 --> 00:58.460
dạng tham số sẽ chấp nhận một số.

00:58.460 --> 01:01.890
Bây giờ ở dưới đó, chúng ta sẽ gọi addAndHandle,

01:01.890 --> 01:05.240
chuyển vào 10 và 20 rồi chuyển vào một hàm.

01:05.240 --> 01:07.570
Ví dụ, một chức năng ẩn danh ở đây.

01:07.570 --> 01:09.710
Vì vậy, bây giờ ở đây, khi chúng ta gọi hàm, tất

01:09.710 --> 01:11.470
nhiên, đây không phải là một loại hàm

01:11.470 --> 01:13.620
mà là một giá trị cụ thể mà chúng ta đang chuyển

01:13.620 --> 01:15.150
vào cho đối số thứ ba này.

01:15.150 --> 01:18.870
Vì vậy, đây là một chức năng ẩn danh tạo ra ở đây và ở đó

01:18.870 --> 01:22.300
chúng tôi biết chúng tôi sẽ nhận được một số.

01:22.300 --> 01:23.810
Có thể đặt tên cho nó là kết quả ở đây và sau

01:23.810 --> 01:26.110
đó chúng ta có thể làm bất cứ điều gì chúng ta muốn với nó.

01:26.110 --> 01:27.623
Và bây giờ nếu bạn biên dịch

01:28.570 --> 01:31.120
cái này, chúng ta sẽ thấy nhật ký này ở dưới

01:31.120 --> 01:33.540
đó, 30, là kết quả của hàm gọi lại mà chúng

01:33.540 --> 01:35.600
ta đã chuyển đến addAndHandle trong

01:35.600 --> 01:38.250
đó addAndHandle kết hợp thành hai số và sau

01:38.250 --> 01:39.850
đó gọi hàm gọi lại trong đó

01:39.850 --> 01:43.200
hàm gọi lại phải đáp ứng điều kiện này ở đây.

01:43.200 --> 01:45.870
Lợi thế của việc chúng tôi xác định định nghĩa

01:45.870 --> 01:49.490
hàm gọi lại ở đây là bên trong hàm chúng tôi truyền vào đó là

01:49.490 --> 01:52.240
một loại gọi lại có thể suy ra kết quả đó sẽ là một

01:52.240 --> 01:54.000
số và do đó chúng tôi có thể làm

01:54.000 --> 01:56.620
bất cứ điều gì với kết quả ở đây.

01:56.620 --> 01:58.090
Chúng ta có thể làm gì

01:58.090 --> 02:00.990
với một số mà không nêu rõ loại ở đây vì TypeScript

02:00.990 --> 02:03.226
biết kết quả sẽ là một số vì chúng

02:03.226 --> 02:04.970
tôi đã làm rõ rằng cuộc gọi

02:04.970 --> 02:08.473
lại sẽ nhận một đối số là một số.

02:09.310 --> 02:12.170
Do đó, nếu chúng ta mong đợi một đối số thứ hai ở đây

02:12.170 --> 02:13.060
trong hàm gọi lại,

02:13.060 --> 02:15.460
thì chúng ta sẽ gặp lỗi vì chúng ta biết rõ,

02:15.460 --> 02:18.630
hàm gọi lại mà chúng ta mong đợi trong hàm addAndHandle

02:18.630 --> 02:20.500
chỉ nên có một đối số.

02:20.500 --> 02:22.420
Vì vậy, nếu sau đó chúng ta chuyển vào

02:22.420 --> 02:23.950
một hàm gọi lại nhận đối số thứ

02:23.950 --> 02:26.240
hai, thì đó rõ ràng là một sai lầm.

02:26.240 --> 02:28.250
Điều duy nhất mà TypeScript không nhận là liệu

02:28.250 --> 02:30.280
chúng tôi có trả lại thứ gì đó ở đây hay không.

02:30.280 --> 02:33.690
Nếu một kết quả trả về và lệnh gọi lại trả về một thứ gì đó, mặc

02:33.690 --> 02:34.767
dù chúng tôi đã nói

02:34.767 --> 02:37.300
rõ rằng nó sẽ không trả về bất cứ thứ gì.

02:37.300 --> 02:41.180
Tuy nhiên, đây không phải là lỗi hay lỗi trong TypeScript.

02:41.180 --> 02:43.150
Nó thực sự xảy ra trên mục đích.

02:43.150 --> 02:46.000
Bằng cách chỉ định khoảng trống ở đây trên loại gọi lại của

02:46.000 --> 02:49.520
chúng tôi, về cơ bản, chúng tôi nói rằng chúng tôi sẽ bỏ qua mọi kết quả mà

02:49.520 --> 02:50.910
bạn có thể trả lại ở đây.

02:50.910 --> 02:54.030
Vì vậy, về cơ bản, chúng tôi đang nói trong addAndHandle, nơi

02:54.030 --> 02:56.020
chúng tôi nhận chức năng gọi lại đó, chúng

02:56.020 --> 02:58.080
tôi sẽ không làm gì với kiểu trả về.

02:58.080 --> 03:00.600
Đó là lý do tại sao bạn có thể trả lại thứ gì đó

03:00.600 --> 03:03.550
ở đây mà không bị trừng phạt nhưng bạn biết đấy, bởi

03:03.550 --> 03:06.850
vì nó được xác định rõ ràng ở đây về loại gọi lại, rằng lệnh

03:06.850 --> 03:09.230
gọi lại sẽ không làm gì với giá trị mà bạn

03:09.230 --> 03:10.870
có thể trả lại ở đây.

03:10.870 --> 03:13.543
Vì vậy, addAndHandle bên trong hàm sẽ

03:13.543 --> 03:15.680
không làm gì với giá trị mà bạn có

03:15.680 --> 03:17.120
thể đang trả lại.

03:17.120 --> 03:19.620
Và đó tất nhiên là một phần thông tin hữu ích.

03:19.620 --> 03:21.270
Bạn có thể mong đợi rằng ở đây,

03:21.270 --> 03:25.710
chúng tôi đang làm điều gì đó với giá trị được trả về bởi lệnh gọi lại và bằng

03:25.710 --> 03:29.000
cách chỉ định loại này ở đây, chúng tôi làm rõ rằng bên trong

03:29.000 --> 03:31.520
addAndHandle, chúng tôi không quan tâm đến

03:31.520 --> 03:33.920
bất kỳ giá trị trả lại nào.

03:33.920 --> 03:36.410
Vì vậy, điều này không buộc bạn phải chuyển qua một cuộc

03:36.410 --> 03:38.260
gọi lại không trả lại bất kỳ thứ gì.

03:38.260 --> 03:40.830
Nó chỉ cho bạn biết rằng bất cứ thứ gì bạn có thể trả

03:40.830 --> 03:42.200
lại sẽ không được sử dụng.

03:42.200 --> 03:44.070
Đối với các thông số, tất nhiên là khác nhau.

03:44.070 --> 03:45.540
Ở đó, điều này được thực thi bởi

03:45.540 --> 03:48.310
vì ở đây, điều thực sự quan trọng là bạn phải biết liệu mình

03:48.310 --> 03:51.720
có đang chuyển một cuộc gọi lại mong đợi nhiều tham số hơn hay không.

03:51.720 --> 03:53.490
Chà, sau đó bạn sẽ gặp lỗi hoặc bạn

03:53.490 --> 03:55.350
sẽ không nhận được kết quả như mong

03:55.350 --> 03:57.740
muốn vì tôi chỉ cung cấp cho bạn một kết quả.

03:57.740 --> 04:01.290
Vì vậy, ở đó chúng tôi không thể bỏ qua những gì bạn có thể muốn vì đó là

04:01.290 --> 04:02.840
trường hợp của kiểu trả về.

04:02.840 --> 04:05.506
Chúng tôi bỏ qua điều đó ở đây để chuyển một cái gì

04:05.506 --> 04:08.750
đó vào nơi hàm addAndHandle chịu trách nhiệm cho điều đó bởi

04:08.750 --> 04:10.920
vì đó là nơi cuộc gọi lại được gọi.

04:10.920 --> 04:13.210
Đây là lý do tại sao các tham số được thực

04:13.210 --> 04:15.060
thi và TypeScript thực sự nghiêm

04:15.060 --> 04:17.150
ngặt về số lượng và loại tham số của các

04:17.150 --> 04:19.508
hàm gọi lại và tại sao nó không thực sự quan

04:19.508 --> 04:21.253
tâm đến kiểu trả về.
