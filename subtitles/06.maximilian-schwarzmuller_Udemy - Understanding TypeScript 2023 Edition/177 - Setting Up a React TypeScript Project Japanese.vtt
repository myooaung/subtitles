WEBVTT

00:02.150 --> 00:04.320
ナレーター：Typescript

00:04.320 --> 00:07.220
を使って React アプリを構築するとなると､

00:07.220 --> 00:13.730
もちろん､ React のコード､ たとえば JSX のようなものを処理し､

00:13.730 --> 00:25.320
React のコードをコンパイルして最適化することができるプロジェクトの設定が必要です｡

00:25.320 --> 00:28.750
このようなプロジェクトを自分たちで立ち上げるのはかなり難しいので､

00:28.750 --> 00:34.080
Reactチームが管理しているReactプロジェクトを作成するためのツール「Create React

00:34.080 --> 00:39.110
App」がTypeScriptに最初から対応しているのは良いことだと思います｡

00:39.110 --> 00:42.110
Create React App TypeScriptでググれば､

00:42.110 --> 00:47.000
Create React Appの公式ドキュメントにこのエントリが見つかるはずです｡

00:47.000 --> 00:51.540
ここでは､ 既存のプロジェクトにTypeScriptを追加する方法と､

00:51.540 --> 00:57.290
Create React App and TypeScriptで新しいプロジェクトを作成する方法､

00:57.290 --> 01:05.680
そしてTypeScriptもサポートした新しいReactプロジェクトを作成するためのコマンドを紹介します｡

01:05.680 --> 01:07.020
さて､ ここではこれを使いますが､

01:07.020 --> 01:11.110
ここではすでにフォルダの中に入っているので､ これを使いたいと思います｡

01:11.110 --> 01:14.790
これは単に､ このプロジェクトで使いたいプロジェクトフォルダです｡

01:14.790 --> 01:16.900
そして､ このコマンドを貼り付けるだけです｡ 

01:16.900 --> 01:17.740
この場合､ すでにあるフォルダを使用したいので､

01:17.740 --> 01:31.730
ターミナルでもプロジェクト名をドットに置き換えます｡ そうすれば､ 新しいサブフォルダを作成してその中にプロジェクトを作成するのではなく､ 代わりにこのフォルダを使用します｡

01:31.730 --> 01:33.720
もちろん､ これはオプションです｡ 

01:33.720 --> 01:38.070
また､ このコマンドが常に機能するわけではないことに気づいたことをお伝えしたいと思います｡

01:38.070 --> 01:41.390
通常のJavaScriptのプロジェクトが作成されることもあります｡ 

01:41.390 --> 01:42.590
これを解決するには､ Create

01:42.590 --> 01:46.343
React Appをお使いのマシンにグローバルにインストールします｡

01:47.340 --> 01:49.140
npm install -g create-react-appを実行することで簡単にできることですが､

01:49.140 --> 01:56.560
MacやLinuxではこの前にsudoを付ける必要があるかもしれません｡

01:56.560 --> 01:59.360
そして､ これをインストールしたマシンで､

01:59.360 --> 02:03.010
実際にこのコマンドを実行すると､ npxなしで､ このように､

02:03.010 --> 02:05.920
確実に動作するはずです｡

02:05.920 --> 02:07.270
しかし､ 通常は､ インストールしなくても､

02:07.270 --> 02:18.840
Nodeと一緒にインストールしたnpmツールの一部であるnpxツールだけで動作するはずです｡

02:18.840 --> 02:18.840
jsをコース序盤で紹介します｡ 

02:18.840 --> 02:23.250
このフォルダに新しいプロジェクトが作成されます｡ 

02:23.250 --> 02:31.070
そして､ そのプロジェクトの中で､ 私たちがすべてのコードをTypeScriptで書くことができるReactアプリケーションをセットアップします｡

02:31.070 --> 02:32.460
だから､ これが終わるのを待とう｡ 

02:32.460 --> 02:34.610
そして､ これが何をもたらすかを見てみましょう｡ 

02:34.610 --> 02:36.010
そして､ 完成したのです｡ 

02:36.010 --> 02:37.930
では､ どんなものができたのか､ 見てみましょう｡ 

02:37.930 --> 02:45.500
フォルダができましたが､ これは基本的にTypeScriptなしでReactアプリを作成したときと同じ構造であることはおわかりいただけると思います｡

02:45.500 --> 02:48.790
しかし､ すでにtsconfigを見ることができます｡  jsonファイルです｡ 

02:48.790 --> 02:52.940
ちなみに､ このファイルを編集して､ 自分の好みに合わせて微調整することも可能です｡

02:52.940 --> 02:55.250
この設定を調整する方法は､ 結局のところ､

02:55.250 --> 02:57.120
コースの前半で学びましたね｡

02:57.120 --> 02:58.460
しかし､ ほとんどのユースケースでは､

02:58.460 --> 03:01.160
デフォルトの設定で問題ないはずです｡

03:01.160 --> 03:02.950
ここで､ ソースコードを書く場所であるsrcフォルダを探ってみると､

03:02.950 --> 03:08.550
.NET Frameworkがたくさんあります｡

03:08.550 --> 03:08.550
tsxのファイルが入っています｡ 

03:08.550 --> 03:11.900
さて､ ここまでの講座では､ .NETを使った作業は行いませんでした｡  tsxファイルのみで､

03:11.900 --> 03:13.787
. tsファイルです｡  なぜなら､ これらのファイルには､

03:13.787 --> 03:17.800
TypeScriptのコードだけでなく､ JSXのコードもすべて書かれているからです｡

03:17.800 --> 03:22.000
これは､ Reactの特別なJavaScript構文で､ JavaScript､

03:22.000 --> 03:29.930
つまりこの場合はTypeScriptコードの中にHTMLマークアップが書かれています｡

03:29.930 --> 03:32.880
それが､ ここで得られるものです｡ 

03:32.880 --> 03:36.500
これらのファイルでは､ すでにいくつかのTypeScriptの構文を見ることができる｡

03:36.500 --> 03:45.780
例えば､ ここでは型の割り当てがあるが､ この型については後で詳しく見ることにして､ 今は､ 明らかにここでTypeScriptを使っていることがすぐにわかる｡

03:45.780 --> 03:52.730
それでは､ この開始フォルダ構造を少しきれいにして､ 非常にシンプルなReactアプリを一緒に作ってみましょう｡

03:52.730 --> 03:57.550
その間に､ ReactでTypeScriptを使う方法を探ってみましょう｡

03:57.550 --> 04:02.950
そこで､ まずはこのAppで､ クリーンアップに焦点をあててみましょう｡

04:02.950 --> 04:02.950
tsx､

04:02.950 --> 04:06.860
ロゴのインポートを削除し､ ここにある私のdivのコンテンツをすべて削除し､

04:06.860 --> 04:09.380
したがってそのdivだけを維持することにします｡

04:09.380 --> 04:15.530
また､ Appを削除します｡  cssのインポート､ Appの削除を行います｡

04:15.530 --> 04:15.530
css ファイルと App. をテストしています｡  ロゴと同様にtsxファイルです｡

04:15.530 --> 04:23.470
svgとserviceWorkerで構成されています｡  tsファイル､ それらをすべて削除してください｡

04:23.470 --> 04:25.500
インデックスに tsx､ このserviceWorkerのインポートを削除します｡

04:25.500 --> 04:29.060
ここでserviceWorkerを扱うつもりはないので､

04:29.060 --> 04:34.530
下のコードを削除し､ このセットアップで終わります｡

04:34.530 --> 04:34.530
css

04:34.530 --> 04:43.140
これをすべてクリアして､ HTMLスタイルでfont-familyをsans-serifに設定し､

04:43.140 --> 04:48.820
bodyスタイルでマージンをなくす､ このように非常にシンプルなスタイルにします｡

04:48.820 --> 04:54.540
これで､ 私がやりたいことのスタートラインに立つことができました｡

04:54.540 --> 04:55.840
もう一度言いますが､ もしこれで何もわからない､

04:55.840 --> 04:57.370
見たこともない構文だとしたら､

04:57.370 --> 05:02.200
まず間違いなくいくつかのReactのリソースに飛び込んでみてください｡

05:02.200 --> 05:08.130
このモジュールでは､ Reactを重点的に学習するわけではありません｡

05:08.130 --> 05:11.010
それでは､ すべての変更を保存して､ 次に進みましょう｡

05:11.010 --> 05:12.920
ReactとTyphonのコードを書き始めて､

05:12.920 --> 05:17.980
この2つがどのように連携しているかを学びましょう｡
