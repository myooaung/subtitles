WEBVTT

00:02.180 --> 00:03.710
-: Voor die bijlage vind je een

00:03.710 --> 00:06.590
startproject zoals je dat al meerdere keren in de cursus

00:06.590 --> 00:07.640
hebt gezien, een zeer

00:07.640 --> 00:09.140
triviaal project met een in principe

00:09.140 --> 00:12.030
lege index. html bestand en een

00:12.030 --> 00:14.400
lege app. ts bestand en hier

00:14.400 --> 00:17.140
gaan we een kleine demo applicatie

00:17.140 --> 00:20.350
bouwen, een klein project.

00:20.350 --> 00:24.705
Nu zal de app die we gaan bouwen niet al te complex zijn, maar het

00:24.705 --> 00:28.080
zal een mooie applicatie zijn waar we in wezen een

00:28.080 --> 00:31.480
aantal projecten kunnen beheren waarbij een project

00:31.480 --> 00:35.690
in wezen een doel is, zodat we lijsten met projecten hebben en

00:35.690 --> 00:37.582
we zullen twee lijsten met projecten

00:37.582 --> 00:43.270
hebben een actieve lijst en een lijst met voltooide projecten en we zullen items

00:43.270 --> 00:46.210
van de ene lijst naar de andere kunnen slepen

00:46.210 --> 00:49.530
en dat soort dingen.

00:49.530 --> 00:52.734
Nu zal de applicatie zelf natuurlijk leuk zijn, maar

00:52.734 --> 00:54.619
het belangrijkste is dat we daarmee

00:54.619 --> 00:56.570
veel van de dingen die we tot nu toe

00:56.570 --> 00:59.160
geleerd hebben kunnen oefenen en dat is natuurlijk

00:59.160 --> 01:02.240
het doel van deze module.

01:02.240 --> 01:04.210
Nu ook een belangrijke opmerking

01:04.210 --> 01:05.710
voor deze module, ik ga

01:05.710 --> 01:07.900
alle code in één enkel bestand schrijven

01:07.900 --> 01:12.010
in deze ene app. ts bestand en dit

01:12.010 --> 01:17.000
wordt dus een heel erg groot bestand.

01:17.000 --> 01:19.420
In de module na deze module zal ik in dat probleem

01:19.420 --> 01:21.400
duiken en laten zien hoe TypeSript

01:21.400 --> 01:24.660
ons in staat stelt dit bestand te splitsen, maar laten we

01:24.660 --> 01:27.030
ons voorlopig, omdat we dit nog niet weten

01:27.030 --> 01:29.680
en we tot nu toe geen problemen met de grootte hadden,

01:29.680 --> 01:32.930
concentreren op onze demo-applicatie.

01:32.930 --> 01:34.710
En daarvoor beginnen we eigenlijk

01:34.710 --> 01:37.420
met de index. html bestand.

01:37.420 --> 01:39.100
In de bijlage vindt u een nieuw

01:39.100 --> 01:42.430
bestand dat u downloadt en dat alle inhoud van deze startindex

01:42.430 --> 01:44.650
vervangt. html bestand met het

01:44.650 --> 01:46.314
gedownloade bestand en doe hetzelfde

01:46.314 --> 01:48.700
voor app. css hebben we nog

01:48.700 --> 01:50.360
geen bestand, voeg gewoon

01:50.360 --> 01:52.870
het bestand dat je bij deze lezing vindt

01:52.870 --> 01:54.410
toe aan je project naast

01:54.410 --> 01:57.010
index. html omdat we daar

01:57.010 --> 01:59.470
al geïmporteerd hebben.

01:59.470 --> 02:02.200
Dus wat gebeurt er in deze bestanden?

02:02.200 --> 02:04.560
In de index. html bestand importeren

02:04.560 --> 02:06.900
we de app. css bestand voor

02:06.900 --> 02:10.484
wat styling en de app. js bestand voor wat JavaScript logica

02:10.484 --> 02:12.240
natuurlijk gaan we zo geen JavaScript

02:12.240 --> 02:13.940
code schrijven we gaan code schrijven

02:13.940 --> 02:15.589
in app. maar dat wordt

02:15.589 --> 02:19.658
natuurlijk gecompileerd naar een JavaScript-bestand.

02:19.658 --> 02:23.320
In de body van dat html bestand staan

02:23.320 --> 02:25.890
een paar template tags.

02:25.890 --> 02:28.436
Template-tags zijn standaard html-tags die

02:28.436 --> 02:30.427
door moderne browsers worden ondersteund

02:30.427 --> 02:34.080
en waarmee we html-code kunnen specificeren die niet onmiddellijk

02:34.080 --> 02:36.060
wordt geladen en niet onmiddellijk

02:36.060 --> 02:37.870
zichtbaar is en niet onmiddellijk

02:37.870 --> 02:40.600
wordt weergegeven, maar die in plaats daarvan

02:40.600 --> 02:46.310
kan worden bereikt via JavaScript en dus ook via TypeScript om het vervolgens weer te geven wanneer

02:46.310 --> 02:51.911
we het willen weergeven om het te controleren met JavaScript en TypeScript en daar zie je dat ik

02:51.911 --> 02:54.830
een formulier heb met vrije ingangen, in principe

02:54.830 --> 02:57.500
een titel, een beschrijving en een menseninvoer

02:57.500 --> 03:00.500
waar we kunnen beslissen wat de titel van ons project

03:00.500 --> 03:05.550
is, wat de beschrijving van ons project is en hoeveel mensen eraan kunnen of moeten worden

03:05.550 --> 03:11.386
toegewezen en dan de knop Project toevoegen.

03:11.386 --> 03:13.320
Dan hebben we nog een sjabloon

03:13.320 --> 03:15.450
dat gewoon een lijst-item bevat dat

03:15.450 --> 03:18.440
zal worden gebruikt om een enkel project weer te

03:18.440 --> 03:20.100
geven in onze lijst van projecten,

03:20.100 --> 03:22.360
dat is dan dit sjabloon hier zie je dat

03:22.360 --> 03:25.176
ik een kop heb met een h2 sectie en dan een ongeordende

03:25.176 --> 03:27.280
lijst en inderdaad die ongeordende

03:27.280 --> 03:30.150
lijst zal later meerdere afzonderlijke projecten

03:30.150 --> 03:33.988
bevatten op basis van dit sjabloon dat de gegevens weergeeft

03:33.988 --> 03:42.357
die hier zijn ingevoerd via het formulier bovenaan en alles zal dan worden toegevoegd met de hulp van TypeScript aan deze div hier

03:42.357 --> 03:45.930
met het id "app".

03:45.930 --> 03:48.970
Nu, app. css bevat gewoon wat css stijlen

03:48.970 --> 03:50.790
die je natuurlijk kunt bekijken.

03:50.790 --> 03:52.130
Ik zal me hier niet op concentreren

03:52.130 --> 03:54.020
omdat het niets te maken heeft met

03:54.020 --> 03:56.960
TypeScript en nu is het onze taak om wat TypeScript code

03:56.960 --> 04:00.216
te schrijven die uiteindelijk ophaalt wat de gebruiker hier

04:00.216 --> 04:03.502
invoert, nou ja, eerst en vooral die dit formulier rendert

04:03.502 --> 04:06.400
dan ophaalt wat de gebruiker invoert valideert wat

04:06.400 --> 04:08.390
de gebruiker invoert zodat de titel,

04:08.390 --> 04:11.975
beschrijving en mensen geldige waarden hebben luistert naar

04:11.975 --> 04:15.030
een klik op deze knop of naar het indienen van het formulier

04:15.030 --> 04:18.440
om precies te zijn creëert dan een nieuw project dus een nieuw

04:18.440 --> 04:21.430
JavaScript object op het einde dat wordt opgeslagen

04:21.430 --> 04:26.490
in een of andere array waarschijnlijk waar deze array dan wordt gerenderd naar deze lijst

04:26.490 --> 04:36.790
en natuurlijk moet de hele lijst ook worden toegevoegd aan de dom dus dit zijn alle stappen en natuurlijk zijn dit nogal wat stappen.

04:36.790 --> 04:39.580
Als je je nu erg zelfverzekerd voelt moet je dit natuurlijk

04:39.580 --> 04:42.900
zeker als een kans zien om nu te pauzeren en dit zelf proberen

04:42.900 --> 04:45.080
te implementeren hoe het er uiteindelijk

04:45.080 --> 04:46.740
ook uitziet dat je gewoon een opzet

04:46.740 --> 04:48.141
hebt waar dit forum zichtbaar

04:48.141 --> 04:49.990
is waar gebruikers iets kunnen invoeren

04:49.990 --> 04:51.980
en waar voor elk project waar je iets

04:51.980 --> 04:54.295
invoert je een lijstitem rendert in deze lijst

04:54.295 --> 04:57.810
die ook zichtbaar moet zijn als je dat bereikt, dat is al geweldig

04:57.810 --> 05:09.037
maar natuurlijk zullen we dit ook stap voor stap samen implementeren en daarna als dit eenmaal geïmplementeerd is zullen we er ook voor zorgen dat we daadwerkelijk gereedschapslijsten renderen en

05:09.037 --> 05:15.440
dat we kunnen wisselen tussen deze lijsten met drag and drop enzovoort.

05:15.440 --> 05:17.993
Dus, laten we beginnen.
