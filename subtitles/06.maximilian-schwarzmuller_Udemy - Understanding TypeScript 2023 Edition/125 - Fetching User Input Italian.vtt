WEBVTT

00:02.150 --> 00:06.180
Istruttore: Così siamo in grado di raccogliere il valore dell'input del titolo

00:06.180 --> 00:07.420
e di stamparlo sulla console,

00:07.420 --> 00:10.160
ma naturalmente l'idea non è questa.

00:10.160 --> 00:13.940
L'idea è invece quella di raccogliere tutti i valori di

00:13.940 --> 00:15.420
input, convalidarli

00:15.420 --> 00:17.890
rapidamente e quindi utilizzarli.

00:17.890 --> 00:20.598
Per questo, aggiungerò un altro nuovo metodo,

00:20.598 --> 00:21.860
un altro metodo privato,

00:21.860 --> 00:25.700
perché lo chiamerò solo dall'interno della classe, ed è il

00:25.700 --> 00:28.530
metodo gatherUserInput.

00:28.530 --> 00:30.460
Il nome dipende totalmente da voi.

00:30.460 --> 00:33.240
La mia idea è che questo metodo venga chiamato qui.

00:33.240 --> 00:35.230
Dopo aver impedito il default, questo

00:35.230 --> 00:38.980
dovrebbe raggiungere tutti i nostri input qui, raccogliere

00:38.980 --> 00:40.870
l'input dell'utente, convalidarlo

00:40.870 --> 00:43.060
e quindi restituirlo.

00:43.060 --> 00:45.950
Quindi, qui ho il mio userInput, che potrebbe

00:45.950 --> 00:50.090
essere una tupla con il titolo, la descrizione e le persone,

00:50.090 --> 00:53.810
come valori liberi della tupla.

00:53.810 --> 00:55.510
In realtà, l'idea mi piace.

00:55.510 --> 00:57.800
Quindi, definiamo già un tipo di ritorno.

00:57.800 --> 00:59.880
Il tipo di ritorno è una tupla.

00:59.880 --> 01:02.620
Ricordate come viene definita una tupla?

01:02.620 --> 01:05.630
Come viene definito il tipo di una tupla?

01:05.630 --> 01:08.620
Non si tratta di stringhe, ma di parentesi quadre.

01:08.620 --> 01:12.260
Ciò significa che viene restituito un array di stringhe.

01:12.260 --> 01:14.550
Invece, voglio dire che

01:14.550 --> 01:18.160
restituisco un array di esattamente

01:18.160 --> 01:21.510
X elementi di questi tre tipi.

01:21.510 --> 01:23.650
Per questo, si imposta il tipo di ritorno

01:23.650 --> 01:27.160
qui, due parentesi quadre, e poi all'interno delle parentesi quadre

01:27.160 --> 01:30.240
si aggiungono i diversi elementi e tipi di elementi.

01:30.240 --> 01:32.900
Ad esempio, stringa, stringa e numero.

01:32.900 --> 01:37.130
In questo modo, si dice che questo metodo restituisce una tupla,

01:37.130 --> 01:38.510
che ha tre elementi, dove

01:38.510 --> 01:40.300
il primo elemento è una stringa,

01:40.300 --> 01:41.820
il secondo è una stringa

01:41.820 --> 01:44.080
e il terzo è un numero.

01:44.080 --> 01:46.360
E ora possiamo aggiungere un po' di logica a questo

01:46.360 --> 01:48.540
metodo per far sì che diventi vero.

01:48.540 --> 01:52.670
Quindi, per prima cosa, otteniamo il titolo inserito da

01:52.670 --> 01:57.210
questo titleInputElement. valore.

01:57.210 --> 01:58.340
E possiamo ripeterlo.

01:58.340 --> 02:01.920
Vogliamo anche la descrizione del corso inserita da questo elemento

02:01.920 --> 02:05.100
descriptionInputElement. e l'importo di enteredPeople,

02:05.100 --> 02:12.440
oppure solo enteredPeople di questo peopleInputElement.

02:12.440 --> 02:13.870
Ora ho memorizzato il tutto in costanti,

02:13.870 --> 02:15.490
in modo da non dover ripetere sempre

02:15.490 --> 02:17.640
queste espressioni più lunghe.

02:17.640 --> 02:19.370
Ora possiamo convalidare questo dato.

02:19.370 --> 02:21.500
Una validazione banale potrebbe essere quella

02:21.500 --> 02:24.850
di controllare se enteredTitle. trim, quindi rimuovendo l'ampio

02:24.850 --> 02:27.610
spazio della X all'inizio e alla fine.

02:27.610 --> 02:30.560
Lunghezza è uguale a zero, oppure

02:30.560 --> 02:35.350
se enteredDescription. è uguale a zero, oppure

02:35.350 --> 02:41.520
se enteredPeople.

02:41.520 --> 02:41.520
La

02:41.520 --> 02:44.380
lunghezza del trim è pari a zero.

02:44.380 --> 02:48.410
In questo modo si verificherebbe che nessun ingresso sia vuoto.

02:48.410 --> 02:50.330
Tuttavia, non controlla tutto ciò

02:50.330 --> 02:51.860
che vorremmo controllare.

02:51.860 --> 02:54.770
Non stiamo verificando se le persone inserite

02:54.770 --> 02:57.160
sono, diciamo, un numero positivo.

02:57.160 --> 03:00.170
Non siamo in grado di stabilire una lunghezza minima.

03:00.170 --> 03:02.190
Dovremmo aggiungere sempre più

03:02.190 --> 03:04.050
condizioni e, pur potendolo fare,

03:04.050 --> 03:06.820
non sarebbe una soluzione scalabile.

03:06.820 --> 03:09.110
Se nell'applicazione ci sono parti in cui vogliamo

03:09.110 --> 03:11.550
anche convalidare l'input dell'utente, dobbiamo

03:11.550 --> 03:14.440
sempre ripetere lunghe dichiarazioni if.

03:14.440 --> 03:18.390
Quindi presto proporrò una soluzione di validazione

03:18.390 --> 03:21.960
più intelligente o più scalabile.

03:21.960 --> 03:23.780
Per ora possiamo lasciarlo così.

03:23.780 --> 03:26.190
Si può già pensare a questo e, naturalmente,

03:26.190 --> 03:28.520
dopo questa lezione, ci si può soffermare

03:28.520 --> 03:32.220
su come esternalizzare questo aspetto in una funzione di

03:32.220 --> 03:34.670
convalida separata e configurabile

03:34.670 --> 03:38.350
e su come i tipi potrebbero aiutarci.

03:38.350 --> 03:41.370
Ci sono sicuramente molti approcci possibili e il mio lo

03:41.370 --> 03:44.040
condividerò con voi nella prossima lezione.

03:44.040 --> 03:45.620
Ma prima di arrivare a questo

03:45.620 --> 03:48.350
punto, usiamo questo approccio banale e facciamo

03:48.350 --> 03:52.130
qualcosa se tutte queste condizioni sono soddisfatte.

03:52.130 --> 03:53.620
Ora, se entriamo in questo blocco

03:53.620 --> 03:56.000
if, sappiamo che almeno una validazione non

03:56.000 --> 03:57.350
è andata a buon fine e quindi

03:57.350 --> 04:01.833
possiamo inserire un avviso, in cui diciamo Input non valido, riprovare.

04:03.450 --> 04:04.910
In caso contrario, se non

04:04.910 --> 04:06.200
ci arriviamo, sappiamo

04:06.200 --> 04:08.600
di avere un input valido; in caso contrario,

04:08.600 --> 04:11.310
voglio restituire la mia tupla.

04:11.310 --> 04:14.170
Quindi, qui voglio restituire il titolo

04:14.170 --> 04:17.090
inserito, la descrizione inserita e

04:17.090 --> 04:19.660
anche le persone inserite.

04:19.660 --> 04:20.630
Come si può intuire, però,

04:20.630 --> 04:21.850
il gruppo dei tipi non è contento,

04:21.850 --> 04:24.210
perché le persone iscritte dovrebbero essere un numero,

04:24.210 --> 04:25.370
non un testo.

04:25.370 --> 04:27.410
In realtà, tutto ciò che si estrae dalla

04:27.410 --> 04:28.720
proprietà value di un elemento

04:28.720 --> 04:32.350
di input sarà testo per impostazione predefinita.

04:32.350 --> 04:34.520
Quindi, per trasformarlo in un numero,

04:34.520 --> 04:38.060
possiamo chiamare parseFloat, per esempio, o semplicemente

04:38.060 --> 04:40.610
aggiungere un più davanti a esso e questo

04:40.610 --> 04:42.850
lo convertirà in un numero, ma il gruppo

04:42.850 --> 04:45.430
types non è ancora contento perché, beh,

04:45.430 --> 04:48.910
non restituiamo sempre una tupla.

04:48.910 --> 04:50.830
E questa parte qui?

04:50.830 --> 04:52.310
Se arriviamo al blocco if,

04:52.310 --> 04:53.510
mostriamo un avviso,

04:53.510 --> 04:55.820
ma non restituiamo una tupla.

04:55.820 --> 04:59.810
Ci sono diverse cose che potremmo fare al suo posto.

04:59.810 --> 05:03.460
Possiamo non restituire nulla, in questo modo.

05:03.460 --> 05:06.320
In alternativa, si potrebbe lanciare un errore.

05:06.320 --> 05:08.360
In tal caso, non restituiremmo

05:08.360 --> 05:11.100
nulla, ma lanceremmo un errore.

05:11.100 --> 05:12.820
Ora, non voglio lanciare un errore perché

05:12.820 --> 05:15.570
non voglio implementare la gestione degli errori, quindi

05:15.570 --> 05:18.090
aggiungerò una dichiarazione di ritorno, ma naturalmente

05:18.090 --> 05:20.100
non si tratta di una tupla.

05:20.100 --> 05:23.110
In realtà, il tipo di ritorno qui è una

05:23.110 --> 05:25.923
tupla, oppure è indefinito.

05:27.320 --> 05:29.040
Tuttavia, come si è appreso, non

05:29.040 --> 05:30.750
si dovrebbe usare undefined come

05:30.750 --> 05:32.550
tipo di ritorno nelle funzioni.

05:32.550 --> 05:34.040
Utilizzare invece void.

05:34.040 --> 05:35.410
È quasi la stessa cosa,

05:35.410 --> 05:37.040
ma esclusiva delle funzioni,

05:37.040 --> 05:39.350
e indica a TypeScript che si tratta

05:39.350 --> 05:44.350
di una funzione che ha almeno un ramo che non restituisce alcun valore come

05:45.230 --> 05:46.930
questo.

05:46.930 --> 05:49.160
Anche in questo caso, ovviamente, utilizziamo un tipo di

05:49.160 --> 05:51.240
unione, perché abbiamo entrambe le possibilità.

05:51.240 --> 05:53.170
Potremmo non restituire nulla,

05:53.170 --> 05:55.660
oppure restituire una tupla.

05:55.660 --> 05:57.510
Quindi ora abbiamo gatherUserInput

05:57.510 --> 06:01.670
e userInput e tutto è indefinito alla fine o è quella

06:01.670 --> 06:04.130
tupla.

06:04.130 --> 06:07.640
Quindi, prima di andare avanti e migliorare la validazione,

06:07.640 --> 06:09.620
costruiamo su questo userInput.

06:09.620 --> 06:12.480
Quando raccogliamo l'userInput laggiù, ora

06:12.480 --> 06:14.820
abbiamo questo userInput e possiamo

06:14.820 --> 06:17.050
verificare se è una tupla.

06:17.050 --> 06:19.820
Il problema è che in fase di esecuzione non abbiamo

06:19.820 --> 06:22.620
modo di verificare se si tratta di una tupla.

06:22.620 --> 06:25.200
Non c'è nessuna istanza che possiamo usare.

06:25.200 --> 06:28.560
Non esiste un tipo di tupla da controllare.

06:28.560 --> 06:31.020
Non possiamo nemmeno verificare se

06:33.803 --> 06:36.053
typof userInput è uguale a tupla,

06:37.130 --> 06:40.050
perché non esiste in Vanilla JavaScript.

06:40.050 --> 06:41.850
String esiste, ad esempio,

06:41.850 --> 06:44.950
ma tuple non è un tipo JavaScript.

06:44.950 --> 06:47.020
Quindi, per verificare se si tratta di una tupla,

06:47.020 --> 06:48.900
dobbiamo ricordare che le tuple alla fine

06:48.900 --> 06:50.990
vengono semplicemente cancellate.

06:50.990 --> 06:52.750
Sono speciali in TypeScript,

06:52.750 --> 06:54.860
ma una volta entrati nella terra di

06:54.860 --> 06:55.940
JavaScript vengono

06:55.940 --> 06:58.320
cancellati perché l'idea di una tupla

06:58.320 --> 06:59.950
in cui il numero di elementi

06:59.950 --> 07:02.000
e i tipi di elementi sono fissi esiste

07:02.000 --> 07:04.470
solo in TypeScript.

07:04.470 --> 07:05.930
Quindi, in fase di esecuzione,

07:05.930 --> 07:09.370
tutto ciò che dobbiamo verificare è se si tratta di un array

07:09.370 --> 07:12.950
e per questo possiamo usare l'oggetto array in JavaScript

07:12.950 --> 07:15.180
e il metodo isArray.

07:15.180 --> 07:17.500
Si tratta di un metodo integrato in Vanilla JavaScript

07:17.500 --> 07:20.290
che ci consente di verificare se questo è un array.

07:20.290 --> 07:23.200
Sappiamo che è indefinito o una tupla.

07:23.200 --> 07:24.630
Una tupla è un array, quindi

07:24.630 --> 07:26.000
se restituisce true, abbiamo

07:26.000 --> 07:27.400
la tupla.

07:27.400 --> 07:31.010
E poi, qui, possiamo usare la strutturazione, ad esempio per

07:31.010 --> 07:34.070
ottenere il titolo, la descrizione e le persone dall'input

07:34.070 --> 07:35.560
dell'utente e poi fare qualcosa

07:35.560 --> 07:37.720
con quell'input.

07:37.720 --> 07:39.230
Ad esempio, per

07:39.230 --> 07:42.623
ora, la console. titolo del registro, descrizione e persone.

07:43.980 --> 07:46.060
Se facciamo tutto questo e lo salviamo,

07:46.060 --> 07:47.950
la compilazione avviene senza errori,

07:47.950 --> 07:49.870
ma se torniamo qui e clicco su un progetto

07:49.870 --> 07:51.310
come questo, ottengo un input

07:51.310 --> 07:53.050
non valido.

07:53.050 --> 07:54.580
Se inserisco Hello, lo ricevo comunque

07:54.580 --> 07:56.950
perché non abbiamo una descrizione.

07:56.950 --> 07:58.890
Questa è una descrizione.

07:58.890 --> 08:00.180
Naturalmente lo riceviamo

08:00.180 --> 08:02.940
ancora, ma se ora inserisco anche qualcosa nelle persone,

08:02.940 --> 08:05.220
questo funziona e lo stampiamo qui.

08:05.220 --> 08:09.330
Questo è naturalmente un bel passo nella giusta direzione.

08:09.330 --> 08:10.990
Non ci siamo ancora arrivati del tutto.

08:10.990 --> 08:13.330
Come ho detto, possiamo migliorare la convalida.

08:13.330 --> 08:16.230
Prima di farlo, vorrei cancellare tutti

08:16.230 --> 08:20.070
gli input dopo aver fatto clic su AGGIUNGI PROGETTO.

08:20.070 --> 08:22.440
Quindi voglio svuotare di nuovo tutti gli ingressi.

08:22.440 --> 08:25.290
A questo punto, possiamo aggiungere un nuovo metodo privato,

08:25.290 --> 08:27.043
clearInput o clearInputs, e impostare

08:28.210 --> 08:32.740
questo titleInputElement. uguale a una stringa vuota e

08:32.740 --> 08:34.130
ripetere l'operazione

08:36.200 --> 08:38.980
anche per gli altri input.

08:38.980 --> 08:41.960
Quindi qui abbiamo l'elemento descriptionInputElement

08:41.960 --> 08:44.250
e qui abbiamo l'elemento peopleInputElement

08:44.250 --> 08:48.190
e ora, se chiamiamo questo. clearInputs qui, dobbiamo assicurarci

08:48.190 --> 08:50.200
che il modulo venga cancellato una

08:50.200 --> 08:51.730
volta inviato.

08:51.730 --> 08:52.870
Quindi, se proviamo di

08:52.870 --> 08:54.380
nuovo a inserire qualcosa qui,

08:54.380 --> 08:56.230
vedrete che verrà stampato qui e il modulo

08:56.230 --> 08:57.740
verrà cancellato.

08:57.740 --> 09:00.720
In generale sono soddisfatto di come abbiamo gestito questo

09:00.720 --> 09:03.300
aspetto, ma ora voglio migliorare la validazione

09:03.300 --> 09:06.970
e scrivere questo aspetto in modo più riutilizzabile e scalabile.

09:06.970 --> 09:07.840
Come ho già detto,

09:07.840 --> 09:10.320
sentitevi liberi di farlo prima da soli.

09:10.320 --> 09:11.530
Nella prossima lezione

09:11.530 --> 09:12.580
lo faremo insieme.
