WEBVTT

00:00.000 --> 00:02.410
(sessizlik) -: TypeScript'in geliştirme

00:02.410 --> 00:04.190
sırasında bize nasıl yardımcı

00:04.190 --> 00:06.200
olabileceğini zaten görüyoruz.

00:06.200 --> 00:10.560
Şimdi, JavaScript'te bir sayı türü olduğunu da biliyoruz.

00:10.560 --> 00:14.010
Ve bunu yerleşik operatör tipi ile görebiliriz.

00:14.010 --> 00:15.781
Bu artık TypeScript'e özgü değildir,

00:15.781 --> 00:17.560
JavaScript tarafından desteklenen

00:17.560 --> 00:20.420
yerleşik bir operatör ve anahtar sözcüktür.

00:20.420 --> 00:22.910
Belirli bir değerin türünü almak için kullanabiliriz.

00:22.910 --> 00:27.050
Yani burada, bir numaralı konsol kilit tipini kullanabiliriz.

00:27.050 --> 00:27.992
Ve bunu yaptığımızda

00:27.992 --> 00:30.780
göreceğimiz şey, bunu derlediğimiz anda güncellenmiş

00:30.780 --> 00:32.623
kodu çalıştırmamızdır.

00:33.780 --> 00:37.040
Burada, konsola sayı yazdırıyoruz.

00:37.040 --> 00:39.330
Şimdi bunu, buradaki çıktı sayesinde ve operatör

00:39.330 --> 00:41.180
türü sayesinde yapıyoruz ve Vanilla JavaScript'te,

00:41.180 --> 00:43.770
TypeScript olmadan, buradaki fonksiyonumuzu her zaman

00:43.770 --> 00:46.710
geliştirmek için kullanabiliriz.

00:46.710 --> 00:51.500
Sayı türünün sayıya eşit olup olmadığını kontrol edebiliriz.

00:51.500 --> 00:54.300
Affedersiniz, n1'in türü sayıya eşitse

00:54.300 --> 00:56.350
demek istiyorum ve n2'nin türünün

00:56.350 --> 01:00.710
sayıya eşit olup olmadığını da kontrol edebiliriz.

01:00.710 --> 01:02.349
ve burada işlemimizi yalnızca

01:02.349 --> 01:05.220
aksi takdirde atılan bir hataysa gerçekleştirin

01:05.220 --> 01:07.860
veya tam tersini yapın ve eşit olup olmadığını

01:07.860 --> 01:10.820
veya n2 eşit değilse kontrol edin.

01:10.820 --> 01:13.230
Ve eğer ikisinden biri sayı değilse,

01:13.230 --> 01:16.360
o zaman yanlış girdi dediğimiz yeni bir hata

01:16.360 --> 01:19.690
verebiliriz. Bu aslında, bu fonksiyonu

01:19.690 --> 01:22.300
burada bir dize ile çağıramayacağımızı

01:22.300 --> 01:25.700
sağlamanın TypeScript dışı bir yolu olacaktır.

01:25.700 --> 01:26.760
Bunu şimdi yaparsam ve yeniden

01:26.760 --> 01:29.060
derlersem, TypeScript hatamızı alırız, ancak bunu

01:29.060 --> 01:30.830
şimdilik görmezden gelelim.

01:30.830 --> 01:31.730
Bunu tekrar çalıştırırsak,

01:31.730 --> 01:33.100
kendimize attığımız yanlış

01:33.100 --> 01:34.940
girdiyi alırız.

01:34.940 --> 01:38.080
Şimdi JavaScript'te disfonksiyonu sertleştirdik, çalışma zamanında

01:38.080 --> 01:39.930
başarısız oluyor, ancak burada başarısız

01:39.930 --> 01:41.970
olmak, daha önce sahip olduğumuz yanlış bir

01:41.970 --> 01:44.950
çıktı göstermekten daha iyi olabilir.

01:44.950 --> 01:47.640
Yani bu, girdileri sadece JavaScript ile kontrol etmenin

01:47.640 --> 01:48.715
bir yolu olacaktır.

01:48.715 --> 01:50.640
Bunun için TypeScript'e ihtiyacınız yok.

01:50.640 --> 01:53.200
Bu normal JavaScript kodu.

01:53.200 --> 01:54.033
Ancak elbette bu yaklaşımın

01:54.033 --> 01:55.160
dezavantajları var.

01:55.160 --> 01:57.160
Bazen yapılacak en doğru şey budur.

01:57.160 --> 02:01.440
Bazen çalışma zamanında yalnızca belirli girdileri doğrulayabilirsiniz.

02:01.440 --> 02:03.150
Ancak buradaki dezavantaj, TypeScript

02:03.150 --> 02:05.480
ile geliştirme sırasında aslında kaçınabileceğimiz

02:05.480 --> 02:08.950
bir şeyi kontrol ediyor olmamızdır.

02:08.950 --> 02:11.180
Yani evet, bir hata alıyoruz.

02:11.180 --> 02:14.210
Ve uygulamamızda, çalışan uygulamayı kurtarmak

02:14.210 --> 02:16.860
için başka bir davranışa geri dönebilecek

02:16.860 --> 02:19.080
önlemler almış olabiliriz.

02:19.080 --> 02:20.750
Ancak yine de, ilk etapta gerçekleşmesi

02:20.750 --> 02:24.180
gerçekten gerekli olmayan bir hata atıyoruz.

02:24.180 --> 02:27.350
TypeScript ile bunu önleyebilirdik.

02:27.350 --> 02:28.830
Ve burada, tipler söz konusu olduğunda

02:28.830 --> 02:30.400
JavaScript ve TypeScript arasındaki farkı

02:30.400 --> 02:31.450
gerçekten görüyoruz.

02:31.450 --> 02:33.750
JavaScript dinamik olarak yazılır, bu da

02:33.750 --> 02:35.610
başlangıçta bir sayı tutabilecek

02:35.610 --> 02:36.880
bir değişkenimizin olması

02:36.880 --> 02:39.100
ve daha sonra ona bir dize atamamızın gayet

02:39.100 --> 02:41.600
iyi olduğu anlamına gelir.

02:41.600 --> 02:44.500
İşte bu nedenle, belirli bir türe bağlı olan bir

02:44.500 --> 02:48.024
kodumuz varsa, çalışma zamanında bir şeyin mevcut türünü

02:48.024 --> 02:50.124
kontrol edebilmemiz için type off

02:50.124 --> 02:52.267
operatörüne ihtiyacımız vardır.

02:52.267 --> 02:53.570
Öte yandan TypeScript

02:53.570 --> 02:55.094
statik olarak yazılır,

02:55.094 --> 02:58.480
yani değişkenlerin ve parametrelerin türlerini

02:58.480 --> 03:01.740
geliştirme sırasında tanımlarız, çalışma zamanı

03:01.740 --> 03:04.980
sırasında aniden değişmezler.

03:04.980 --> 03:05.813
Elbette TypeScript

03:05.813 --> 03:09.090
JavaScript'e derlendiği için teorik olarak bunu

03:09.090 --> 03:10.660
yapabilirler.

03:10.660 --> 03:12.510
Ancak TypeScript kullanırsak

03:12.510 --> 03:13.790
ve bir değişkene aniden

03:13.790 --> 03:17.530
yeni bir veri türü atadığımız bir kod yazarsak, örneğin daha

03:17.530 --> 03:19.840
önce bunun bir sayı olması gerektiğini

03:19.840 --> 03:22.900
söylemiştik ve şimdi bir dize atıyoruz, o zaman

03:22.900 --> 03:25.810
geliştirme sırasında bir hata alırız, böylece

03:25.810 --> 03:27.480
türler konusunda net olmak

03:27.480 --> 03:29.670
zorunda kalırız, bir şey tutabilir

03:29.670 --> 03:32.120
veya tutamaz.

03:32.120 --> 03:33.710
Aradaki fark bu.

03:33.710 --> 03:36.620
Bu yüzden TypeScript ile kaçınabiliyorsak,

03:36.620 --> 03:38.330
bu gibi uygulamaları veya

03:38.330 --> 03:40.810
çözümleri kullanmak istemiyoruz.

03:40.810 --> 03:42.200
Yine de, JavaScript'in

03:42.200 --> 03:43.890
elbette tür kavramını bildiğini

03:43.890 --> 03:46.400
bilmek önemlidir.

03:46.400 --> 03:48.740
Sayı, dize ve Boolean gibi

03:48.740 --> 03:50.640
bazı türleri bilir.

03:50.640 --> 03:52.300
Ancak bunu kullanmak her zaman geliştirme

03:52.300 --> 03:53.540
sırasında değil, yalnızca çalışma

03:53.540 --> 03:56.400
zamanında hata yapabileceğimiz anlamına gelir ki bu da bir geliştirici

03:56.400 --> 03:58.700
olarak bizim için daha iyi bir yerdir.

03:58.700 --> 04:01.550
Bu sayede hataları daha erken düzeltebiliyoruz.

04:01.550 --> 04:02.840
Ayrıca JavaScript yalnızca

04:02.840 --> 04:05.410
birkaç tür hakkında bilgi sahibidir.

04:05.410 --> 04:07.170
Bu kurs boyunca öğreneceğiniz gibi.

04:07.170 --> 04:10.540
TypeScript, JavaScript'ten çok daha fazla tür hakkında bilgi sahibidir.

04:10.540 --> 04:14.450
Dolayısıyla, çalışma zamanı denetimi gerçekten TypeScript

04:14.450 --> 04:18.030
ile yapabileceğimiz kadar esnek veya güçlü değildir.

04:18.030 --> 04:19.490
Ve tüm bu nedenlerden dolayı, bu yaklaşım

04:19.490 --> 04:20.660
aslında burada kullanmak istediğimiz

04:20.660 --> 04:22.550
yaklaşım değildir.

04:22.550 --> 04:26.540
Bazen türü çalışma zamanında almak faydalı olabilir.

04:26.540 --> 04:28.790
Ancak bazen, bu örnekte olduğu gibi, geliştirme

04:28.790 --> 04:31.740
sırasında bunu elde etmek çok daha iyidir.

04:31.740 --> 04:34.280
Elbette bilinmesi gereken tek önemli şey, TypeScript

04:34.280 --> 04:36.070
ile çalışma zamanında değil, yalnızca

04:36.070 --> 04:39.596
geliştirme sırasında destek alabileceğinizdir, çünkü bu TypeScript

04:39.596 --> 04:41.610
özellikleri ve kontrolleri JavaScript

04:41.610 --> 04:44.650
motorunda yerleşik değildir, bu nedenle mantık tarayıcıda

04:44.650 --> 04:51.223
yürütülemez, yalnızca kodunuzu derlediğinizde geliştirme sırasında yürütülebilir.
