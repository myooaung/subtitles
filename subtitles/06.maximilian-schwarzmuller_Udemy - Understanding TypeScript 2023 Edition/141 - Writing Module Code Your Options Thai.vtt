WEBVTT

00:02.160 --> 00:03.740
ผู้สอน: แล้วตัวเลือกของเราคืออะไรเมื่อเราต้องการแยกโค้ดออกเป็นหลายๆ

00:03.740 --> 00:06.440
ไฟล์

00:06.440 --> 00:10.720
ตอนนี้เรามีสามตัวเลือกสำหรับสิ่งนั้น

00:10.720 --> 00:12.680
ตัวเลือกแรกคือการเขียนไฟล์โค้ดหลายไฟล์

00:12.680 --> 00:16.110
ไฟล์ TypeScript หลายไฟล์

00:16.110 --> 00:20.710
TypeScript จะรวบรวมไฟล์โค้ดทั้งหมดในไดเร็กทอรีต้นทางโดยอัตโนมัติ

00:20.710 --> 00:23.020
และนำเข้าไฟล์สคริปต์ Java ที่คอมไพล์แล้วลงใน

00:23.020 --> 00:25.000
HTML ด้วยตนเอง

00:25.000 --> 00:26.220
นั่นเป็นตัวเลือกและสำหรับบางโปรเจกต์นี่อาจถูกต้อง

00:26.220 --> 00:34.600
แต่คุณจะต้องจัดการการนำเข้าทั้งหมดเหล่านี้ด้วยตนเอง ซึ่งอาจยุ่งยากและเกิดข้อผิดพลาดได้ง่าย และเมื่อใช้คุณสมบัติ TypeScript

00:34.600 --> 00:39.560
บางอย่าง คุณยังยกเลิกการรองรับประเภทหากมีการกำหนดประเภทบางประเภทในไฟล์ A และคุณใช้ในไฟล์

00:39.560 --> 00:46.030
B และ TypeScript ไม่ทราบเกี่ยวกับการเชื่อมต่อนี้

00:46.030 --> 00:49.290
นั่นเป็นเหตุผลที่นี่ไม่ใช่ตัวเลือกที่ยอดเยี่ยมสำหรับโครงการขนาดใหญ่

00:49.290 --> 00:52.500
สำหรับโครงการขนาดใหญ่ เรามีสองทางเลือกหลักแทน

00:52.500 --> 00:55.470
เรามีเนมสเปซและการรวมไฟล์

00:55.470 --> 00:59.410
ตอนนี้ เนมสเปซเป็นคุณลักษณะของ TypeScript ซึ่งเป็นคุณลักษณะทางไวยากรณ์

00:59.410 --> 01:08.650
คุณสามารถเพิ่มโค้ดพิเศษลงในโค้ดของคุณเพื่อใช้คุณลักษณะนี้ และโดยทั่วไปจะช่วยให้คุณสามารถจัดกลุ่มโค้ดไว้ด้วยกันใต้เนมสเปซ

01:08.650 --> 01:12.730
แล้วนำเข้าเนมสเปซไปยังไฟล์อื่นๆ

01:12.730 --> 01:16.020
ตัวอย่างเช่น คุณสามารถมีเนมสเปซต่อไฟล์ได้

01:16.020 --> 01:21.930
นำเข้าไฟล์อื่นไปยังอีกไฟล์หนึ่งและแตะที่เนมสเปซที่อยู่ในไฟล์อื่นจากไฟล์ที่นำเข้านั้น

01:21.930 --> 01:28.030
และเราจะเห็นว่าในทางปฏิบัติในกรณีที่ยังไม่ชัดเจนทั้งหมด

01:28.030 --> 01:30.020
TypeScript ไม่เพียงรองรับเท่านั้น

01:30.020 --> 01:34.130
แต่ยังรวมไฟล์เข้าด้วยกันเป็นไฟล์เดียว ดังนั้นคุณจึงเขียนโค้ดในไฟล์หลาย

01:34.130 --> 01:50.030
ๆ ไฟล์ที่คอมไพล์แล้วในตอนท้าย จากนั้นไฟล์เหล่านั้นจะถูกนำเข้าเข้าด้วยกัน เพื่อให้คุณจัดการการนำเข้าน้อยลง ไม่จำเป็นต้องจัดการการนำเข้าต่างๆ ในไฟล์ HTML ด้วยตนเอง

01:50.030 --> 01:55.750
ตอนนี้ทางเลือกแทนเนมสเปซและอาจเป็นทางเลือกที่สำคัญและทันสมัยกว่า

01:55.750 --> 02:06.480
คือการใช้ ES6 Imports/Exports หรือที่เรียกว่าโมดูล ES6 เพราะปรากฎว่าสคริปต์ Java สมัยใหม่ที่แยกออกจาก TypeScript โดยสิ้นเชิงมีวิธีแก้ปัญหานี้เช่นกัน

02:06.480 --> 02:15.850
เพราะคุณ มีปัญหานี้ไม่เฉพาะในโครงการ TypeScript แต่ในโครงการสคริปต์ Java ที่ใหญ่กว่า

02:15.850 --> 02:18.200
สคริปต์ Java สมัยใหม่ที่แกะกล่องรองรับคำสั่งนำเข้าและส่งออก

02:18.200 --> 02:27.920
ซึ่งช่วยให้คุณระบุว่าไฟล์ใดขึ้นอยู่กับไฟล์อื่น จากนั้นคุณมีไฟล์แต่ละไฟล์ทั้งหมด แต่คุณไม่จำเป็นต้องจัดการการนำเข้าด้วยตนเอง

02:27.920 --> 02:30.560
เบราว์เซอร์สมัยใหม่ทำแทนเบราว์เซอร์

02:30.560 --> 02:33.770
นั่น.

02:33.770 --> 02:38.800
พวกเขาเข้าใจและดาวน์โหลดและเรียกใช้ไฟล์ที่ไฟล์อื่นขึ้นอยู่กับโดยอัตโนมัติ

02:38.800 --> 02:41.370
คุณใช้ไวยากรณ์นำเข้า/ส่งออกสำหรับสิ่งนั้น

02:41.370 --> 02:43.470
และ TypeScript ยังรองรับสิ่งนี้ด้วย

02:43.470 --> 02:46.870
ดังนั้นคุณจึงสามารถใช้ TypeScript ได้โดยไม่มีปัญหาใดๆ

02:46.870 --> 02:50.810
คุณคอมไพล์ต่อไฟล์ แต่คุณต้องการการนำเข้าสคริปต์เพียงรายการเดียว

02:50.810 --> 02:56.350
เพราะอย่างที่ฉันเพิ่งพูดถึง เบราว์เซอร์สมัยใหม่รู้วิธีเรียกข้อมูลการอ้างอิงอื่นๆ

02:56.350 --> 03:00.710
ทั้งหมด และคุณยังจะเห็นการทำงานในส่วนหลักนี้ที่นี่ด้วย

03:00.710 --> 03:02.320
สิ่งสำคัญประการหนึ่งในที่นี้

03:02.320 --> 03:03.830
เนื่องจากในทางเทคนิคแล้ว

03:03.830 --> 03:09.140
เราจะยังคงมีไฟล์หลายไฟล์ และในขณะที่เราไม่ต้องจัดการการนำเข้าด้วยตนเอง การนำเข้าสคริปต์

03:09.140 --> 03:11.550
เรายังมีข้อเสียบางประการเพราะเหตุนี้

03:11.550 --> 03:16.900
เพราะทุกไฟล์ที่คุณใช้ ต้องดาวน์โหลดแยกต่างหาก ซึ่งหมายถึงคำขอ HTTP มากขึ้น และอื่นๆ

03:16.900 --> 03:22.210
ดังนั้นคุณจึงสามารถรวมไฟล์เข้าด้วยกันเพื่อทำงานกับไฟล์หลายไฟล์ในระหว่างการพัฒนา

03:22.210 --> 03:30.840
แต่จัดส่งไฟล์เดียวสำหรับการผลิต แต่คุณต้องมีเครื่องมือของบุคคลที่สามสำหรับสิ่งนั้น เช่น Webpack และ I จะแสดงวิธีการทำงานเช่นกัน

03:30.840 --> 03:39.500
แต่ในส่วนแยกต่างหากซึ่งเราจะดูที่ Webpack และ TypeScript และเหตุผลที่เราใช้งานและวิธีการใช้งาน

03:39.500 --> 03:41.100
ในตอนนี้ เรามาใช้วิธีทั้งสองนี้ในรูปแบบพื้นฐาน

03:41.100 --> 03:48.853
และมาดูกันว่าเราสามารถปรับปรุงโค้ดของเราโดยแยกออกเป็นหลายๆ ไฟล์ได้อย่างไร
