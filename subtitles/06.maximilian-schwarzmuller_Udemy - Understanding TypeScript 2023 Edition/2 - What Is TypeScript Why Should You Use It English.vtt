WEBVTT

1
00:00:02.350 --> 00:00:04.170
<v Instructor>So what is TypeScript?</v>

2
00:00:04.170 --> 00:00:06.860
What is it all about, why would we use it?

3
00:00:06.860 --> 00:00:10.820
TypeScript is a JavaScript Superset.

4
00:00:10.820 --> 00:00:12.190
Now, what does this mean?

5
00:00:12.190 --> 00:00:14.250
It means that TypeScript is in the end

6
00:00:14.250 --> 00:00:16.370
a language, a programming language,

7
00:00:16.370 --> 00:00:18.710
building up on JavaScript.

8
00:00:18.710 --> 00:00:20.940
It's not a brand new language,

9
00:00:20.940 --> 00:00:23.980
instead it takes the JavaScript language

10
00:00:23.980 --> 00:00:27.450
and adds new features and advantages to it.

11
00:00:27.450 --> 00:00:31.720
It makes writing JavaScript code easier and more powerful,

12
00:00:31.720 --> 00:00:32.840
you could say.

13
00:00:32.840 --> 00:00:35.624
But, we have one huge disadvantage.

14
00:00:35.624 --> 00:00:39.786
TypeScript can't be executed by JavaScript environments

15
00:00:39.786 --> 00:00:41.760
like the browser.

16
00:00:41.760 --> 00:00:44.270
Browsers can't execute TypeScript,

17
00:00:44.270 --> 00:00:48.486
and for example, Node.js also can't execute TypeScript,

18
00:00:48.486 --> 00:00:52.250
so the environments where we can execute JavaScript

19
00:00:52.250 --> 00:00:54.080
don't support TypeScript.

20
00:00:54.080 --> 00:00:56.140
What's the idea behind TypeScript then?

21
00:00:56.140 --> 00:01:00.760
It's a better version of JavaScript and we can't use it?

22
00:01:00.760 --> 00:01:02.130
Well, not quite.

23
00:01:02.130 --> 00:01:06.050
TypeScript is a programming language, but it's also a tool.

24
00:01:06.050 --> 00:01:10.049
It's a powerful compiler which you run over your code

25
00:01:10.049 --> 00:01:14.410
to compile your typescript code to JavaScript.

26
00:01:14.410 --> 00:01:16.540
So, what you get as a result

27
00:01:16.540 --> 00:01:20.260
when writing code in TypeScript is JavaScript.

28
00:01:20.260 --> 00:01:22.870
But you didn't write that JavaScript code,

29
00:01:22.870 --> 00:01:24.900
you wrote TypeScript code

30
00:01:24.900 --> 00:01:27.480
with all the new features and all the advantages,

31
00:01:27.480 --> 00:01:30.670
and you get normal JavaScript code.

32
00:01:30.670 --> 00:01:33.810
Well that of course brings up one important question,

33
00:01:33.810 --> 00:01:36.710
how can TypeScript add new features

34
00:01:36.710 --> 00:01:40.630
if what you get in the end is regular JavaScript?

35
00:01:40.630 --> 00:01:43.460
And the answer is, the TypeScript compiler

36
00:01:43.460 --> 00:01:47.710
compiles these new features to JavaScript workarounds,

37
00:01:47.710 --> 00:01:50.670
so in the end it might give you a nicer syntax,

38
00:01:50.670 --> 00:01:52.890
an easier way of doing something,

39
00:01:52.890 --> 00:01:56.571
and it will then compile that nicer, easier way

40
00:01:56.571 --> 00:01:59.820
to a more complex JavaScript snippet,

41
00:01:59.820 --> 00:02:02.060
which you would have to write otherwise.

42
00:02:02.060 --> 00:02:03.230
So it's not magic,

43
00:02:03.230 --> 00:02:06.790
of course it can't add what's not possible at all

44
00:02:06.790 --> 00:02:08.610
in the JavaScript language,

45
00:02:08.610 --> 00:02:11.150
but it can add new features that simply

46
00:02:11.150 --> 00:02:15.020
are easier to use, nicer syntax, things like this.

47
00:02:15.020 --> 00:02:17.470
In addition, TypeScript, of course,

48
00:02:17.470 --> 00:02:20.900
does one important thing, which the name already implies.

49
00:02:20.900 --> 00:02:22.740
It adds types,

50
00:02:22.740 --> 00:02:26.230
it adds a feature to the JavaScript language,

51
00:02:26.230 --> 00:02:28.750
at which we'll have a close look in a second,

52
00:02:28.750 --> 00:02:31.541
which will actually give you as a developer,

53
00:02:31.541 --> 00:02:35.070
an opportunity of identifying errors

54
00:02:35.070 --> 00:02:38.480
in your code earlier before your script runs

55
00:02:38.480 --> 00:02:41.350
and the error occurs at runtime in the browser.

56
00:02:41.350 --> 00:02:44.320
So, it does not only give you some new features

57
00:02:44.320 --> 00:02:46.690
and nicer ways of doing something,

58
00:02:46.690 --> 00:02:50.240
it also gives you extra error checking

59
00:02:50.240 --> 00:02:54.153
where errors which you would otherwise get as runtime errors

60
00:02:54.153 --> 00:02:58.370
can be caught and fixed early during development.

61
00:02:58.370 --> 00:03:00.600
So, why would we use TypeScript?

62
00:03:00.600 --> 00:03:02.570
Consider this example,

63
00:03:02.570 --> 00:03:06.710
a fairly simple JavaScript function which adds two numbers.

64
00:03:06.710 --> 00:03:08.760
Now when I call it, please notice

65
00:03:08.760 --> 00:03:11.810
that I'm passing in two strings instead of two numbers,

66
00:03:11.810 --> 00:03:14.810
and I'll show you a real example where something like this

67
00:03:14.810 --> 00:03:18.090
could happen realistically in just a second.

68
00:03:18.090 --> 00:03:20.270
So, we're calling this function with two strings

69
00:03:20.270 --> 00:03:22.519
and as a result what you would actually get here

70
00:03:22.519 --> 00:03:25.260
is probably an unwanted behavior,

71
00:03:25.260 --> 00:03:27.240
because if you add two strings,

72
00:03:27.240 --> 00:03:29.596
JavaScript will concatenate the strings

73
00:03:29.596 --> 00:03:32.780
instead of doing a mathematical calculation here.

74
00:03:32.780 --> 00:03:36.310
So, the result would not be five, but twenty-three,

75
00:03:36.310 --> 00:03:38.980
a concatenated string of the two numbers.

76
00:03:38.980 --> 00:03:41.690
This is an error you could have in JavaScript,

77
00:03:41.690 --> 00:03:43.530
it's not a technical error,

78
00:03:43.530 --> 00:03:46.720
you probably won't get a runtime error,

79
00:03:46.720 --> 00:03:49.832
but you have a logical mistake in your code.

80
00:03:49.832 --> 00:03:52.820
And that, of course, can lead to huge problems

81
00:03:52.820 --> 00:03:55.870
in the web applications you're writing with JavaScript.

82
00:03:55.870 --> 00:03:59.360
Now, of course, in JavaScript we have mitigation strategies,

83
00:03:59.360 --> 00:04:02.541
we could add an if check in the function to check the types

84
00:04:02.541 --> 00:04:05.440
of the inputs at runtime,

85
00:04:05.440 --> 00:04:08.240
we could also validate and sanitize user input,

86
00:04:08.240 --> 00:04:10.670
and whilst we might want to do all of that

87
00:04:10.670 --> 00:04:14.040
it would also be nice if we could catch errors like this

88
00:04:14.040 --> 00:04:15.840
during development already.

89
00:04:15.840 --> 00:04:19.220
And thankfully, this is possible with TypeScript,

90
00:04:19.220 --> 00:04:21.810
because developers can write invalid code here

91
00:04:21.810 --> 00:04:23.970
and introduce bots like this in JavaScript,

92
00:04:23.970 --> 00:04:26.160
and with TypeScript we have a tool

93
00:04:26.160 --> 00:04:30.060
that helps us write better code and avoid such problems.

94
00:04:30.060 --> 00:04:31.910
So, let's have a closer look at this.

