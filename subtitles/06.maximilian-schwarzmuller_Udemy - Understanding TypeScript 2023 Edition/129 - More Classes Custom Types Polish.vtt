WEBVTT

00:02.220 --> 00:05.760
-: Jako następny krok, chcę pracować nad tymi typami tutaj,

00:05.760 --> 00:09.900
dowolnym typem, którego używam tutaj dla moich przypisanych projektów,

00:09.900 --> 00:11.320
dla słuchaczy tutaj, a

00:11.320 --> 00:14.980
także dla projektów w stanie projektu.

00:14.980 --> 00:19.030
Oczywiście tutaj nie chcę pracować z żadnym, bardziej sensowne

00:19.030 --> 00:20.740
byłoby posiadanie dedykowanej

00:20.740 --> 00:25.660
klasy projektu lub typu projektu, z którego możemy korzystać.

00:25.660 --> 00:27.760
I rzeczywiście, stworzę klasę

00:29.070 --> 00:29.903
dla tego typu

00:31.390 --> 00:32.450
projektu, po prostu

00:32.450 --> 00:34.890
używając class project, dzięki czemu

00:34.890 --> 00:38.740
mamy sposób na budowanie obiektów projektu, które zawsze

00:38.740 --> 00:41.570
mają taką samą strukturę.

00:41.570 --> 00:44.760
W tej chwili robię to tam na dole z dosłownym zapisem.

00:44.760 --> 00:47.920
Minusem tego jest oczywiście to, że musimy

00:47.920 --> 00:50.490
pamiętać, że to opis, a nie Desc.

00:50.490 --> 00:52.410
że potrzebujemy identyfikatora, który jest ciągiem

00:52.410 --> 00:53.470
znaków, i tak dalej.

00:53.470 --> 00:56.440
Więc to jest to, gdzie typ niestandardowy może nam

00:56.440 --> 00:59.750
pomóc i stworzę klasę, a nie interfejs lub typ niestandardowy

00:59.750 --> 01:02.300
ze słowem kluczowym type, ponieważ chcę mieć

01:02.300 --> 01:05.470
możliwość jego instancjonowania.

01:05.470 --> 01:07.960
Jak więc powinny wyglądać takie zajęcia,

01:07.960 --> 01:10.700
a dokładnie taki projekt?

01:10.700 --> 01:12.320
Cóż, dodam konstruktor, a

01:12.320 --> 01:17.280
następnie użyję tego skrótu przypisywania argumentów lub parametrów do konstruktora,

01:17.280 --> 01:19.100
które następnie automatycznie

01:19.100 --> 01:22.310
stają się również właściwościami, dodając accessor

01:22.310 --> 01:25.650
na początku, Public, w tym przypadku, a następnie nazwę

01:25.650 --> 01:29.450
argumentu i właściwości, a następnie typ.

01:29.450 --> 01:33.100
I tutaj każdy projekt powinien mieć swój identyfikator.

01:33.100 --> 01:34.990
Każdy projekt powinien mieć tytuł, który

01:34.990 --> 01:37.330
również jest ciągiem znaków, tak jak ID.

01:37.330 --> 01:38.690
Powinien mieć opis, który

01:38.690 --> 01:39.920
jest ciągiem znaków,

01:39.920 --> 01:44.420
powinien mieć właściwość People, która jest liczbą, która jest liczbą

01:44.420 --> 01:47.440
osób przypisanych do projektu.

01:47.440 --> 01:49.580
I jedna rzecz, którą chcę dodać, a której

01:49.580 --> 01:51.640
do tej pory nie mieliśmy, to właściwie

01:51.640 --> 01:53.580
status projektu.

01:53.580 --> 01:56.920
Bo w tej chwili, gdy dodajemy tutaj projekt, pojawia

01:56.920 --> 01:58.680
się on w obu listach.

01:58.680 --> 02:01.530
Teraz chcę dodać status do projektu, który

02:01.530 --> 02:03.630
oczywiście można zmienić, abyśmy

02:03.630 --> 02:07.470
faktycznie mogli filtrować dla aktywnych projektów w pierwszym

02:07.470 --> 02:11.470
polu i zakończonych projektów w drugim polu.

02:11.470 --> 02:15.000
Tak więc, aby być tylko pokazać odpowiednie projekty na każdym polu.

02:15.000 --> 02:19.890
Więc dla tego dodam tutaj kolejną właściwość publiczną, status.

02:19.890 --> 02:21.280
I teraz oczywiście pytanie,

02:21.280 --> 02:23.985
jaki typ powinien mieć ten status?

02:23.985 --> 02:28.240
Teraz mogliśmy użyć typu union z dwoma typami literalnymi Active i

02:28.240 --> 02:31.170
Finished co już wcześniej wykorzystaliśmy.

02:31.170 --> 02:33.280
Ale tutaj zawsze chcę wprowadzić

02:33.280 --> 02:36.890
lub ponownie wprowadzić inny typ, o którym dowiedziałeś

02:36.890 --> 02:38.320
się, a to jest Enum.

02:38.320 --> 02:41.890
Enum idealny tutaj, ponieważ mamy dokładnie dwie opcje.

02:41.890 --> 02:44.950
I tutaj w kontekście tego obiektu projektu również nie potrzebujemy

02:44.950 --> 02:48.740
tekstu, który ma sens dla człowieka, który przechowujemy jako wartość, ale

02:48.740 --> 02:50.270
tak naprawdę potrzebujemy tylko

02:50.270 --> 02:52.341
jakiegoś identyfikatora.

02:52.341 --> 02:56.140
Więc tutaj dodam nowy status projektu Enum.

02:56.140 --> 02:59.810
I chcę mieć tam dwie wartości,

02:59.810 --> 03:02.890
Active i Finished.

03:02.890 --> 03:05.440
A potem tutaj ten status będzie

03:05.440 --> 03:08.610
typu status projektu tak po prostu.

03:08.610 --> 03:11.003
To jest teraz moja klasa projektowa.

03:11.900 --> 03:14.220
Mając to tutaj, możemy powiedzieć, że jest

03:14.220 --> 03:17.820
to tablica projektów używających tej klasy projektu.

03:17.820 --> 03:20.351
I oczywiście, gdy tworzymy tutaj

03:20.351 --> 03:24.780
projekt, robimy to za pomocą new project project, a nie

03:24.780 --> 03:26.620
project state.

03:26.620 --> 03:30.310
I tutaj do projektu przekazujemy ID w tym przypadku,

03:30.310 --> 03:32.200
tak jak wspomniałem wcześniej,

03:32.200 --> 03:35.370
liczbę losową, którą konwertujemy na ciąg znaków,

03:35.370 --> 03:38.210
następnie tytuł, następnie opis, następnie

03:38.210 --> 03:41.930
NUM of People tutaj, no i oczywiście również, to jest

03:41.930 --> 03:45.080
status, prawda.

03:45.080 --> 03:49.950
I jedna rzecz, którą chcę mieć tutaj w tej aplikacji w tym projekcie demonstracyjnym

03:49.950 --> 03:53.180
jest taka, że każdy nowy projekt domyślnie jest

03:53.180 --> 03:54.830
aktywny.

03:54.830 --> 03:57.040
Zatem gdy tworzymy tutaj nowy projekt, przypisujemy

03:57.040 --> 04:00.064
mu status projectstatus. aktywny tutaj jako

04:00.064 --> 04:02.990
wartość dla statusu z tym, musimy projektować,

04:02.990 --> 04:05.230
który dodajemy.

04:05.230 --> 04:06.720
I teraz jeszcze jedno miejsce, gdzie

04:06.720 --> 04:08.450
potrzebujemy klasy projektu.

04:08.450 --> 04:11.220
I to jest tutaj w klasie Project List tam mamy

04:11.220 --> 04:13.474
właściwość Assign projects.

04:13.474 --> 04:17.240
I oczywiście to zawsze powinien być wachlarz projektów.

04:17.240 --> 04:19.530
Teraz dzięki temu korzystamy z typowania Beta.

04:19.530 --> 04:22.810
A jednym z plusów jest to, że tutaj w projektach renderingu,

04:22.810 --> 04:26.360
teraz mamy też np. autouzupełnianie.

04:26.360 --> 04:29.020
I dostalibyśmy też błąd, błąd kompilacji,

04:29.020 --> 04:31.300
gdybyśmy próbowali to zapisać, bo

04:31.300 --> 04:33.100
teraz TypeScript rozumie,

04:33.100 --> 04:35.360
z jakimi typami tu pracujemy.

04:35.360 --> 04:39.040
Tak więc to jest projekt Klasa i jak możemy to wykorzystać.

04:39.040 --> 04:41.760
Klasa Project nie jest jedyną klasą Jednak

04:41.760 --> 04:44.230
mamy tutaj również Listener.

04:44.230 --> 04:48.630
I w tym celu dodam nowy niestandardowy typ Listener.

04:48.630 --> 04:50.390
Nazwa oczywiście zależy od Ciebie.

04:50.390 --> 04:54.280
I po prostu używam tutaj typu, ponieważ chcę zasadniczo

04:54.280 --> 04:58.260
zakodować typ funkcji za pomocą jednego słowa.

04:58.260 --> 04:59.640
Co więc mamy na myśli mówiąc o tym?

04:59.640 --> 05:03.270
No i oczywiście listener tutaj w naszej aplikacji to

05:03.270 --> 05:05.370
po prostu funkcja, prawda?

05:05.370 --> 05:07.160
To, co przechowywaliśmy w tablicy

05:07.160 --> 05:08.960
listeners, to po prostu garść funkcji

05:08.960 --> 05:11.060
Add Listener wypycha nową funkcję, a

05:11.060 --> 05:12.200
gdy coś się zmieni, wykonujemy

05:12.200 --> 05:14.190
tę funkcję.

05:14.190 --> 05:17.610
Więc tutaj słuchacz jest naprawdę tylko funkcją.

05:17.610 --> 05:22.610
Ale jest to funkcja, która otrzymuje nasze przedmioty, pewne

05:22.870 --> 05:23.703
przedmioty

05:23.703 --> 05:27.113
w naszym przypadku i tablicę projektów.

05:28.500 --> 05:30.410
I to wtedy coś z nim robi.

05:30.410 --> 05:32.480
Teraz, aby być precyzyjnym tutaj, oczywiście,

05:32.480 --> 05:33.550
aby zdefiniować typ funkcji,

05:33.550 --> 05:35.200
nie mamy tutaj nawiasów klamrowych,

05:35.200 --> 05:37.440
ale zamiast tego, jak się nauczyłeś, typ powrotu,

05:37.440 --> 05:38.780
a to będzie szerokie, co oznacza,

05:38.780 --> 05:41.880
że nie obchodzi nas żadna wartość, którą funkcja Listener może

05:41.880 --> 05:44.090
zwrócić.

05:44.090 --> 05:46.140
W miejscu, gdzie pracujemy ze słuchaczami.

05:46.140 --> 05:47.940
Nie potrzebujemy żadnego typu zwrotnego.

05:47.940 --> 05:49.810
Chcemy tylko zapewnić, że ktokolwiek

05:49.810 --> 05:51.880
przekazuje jako taki listener, oczekuje,

05:51.880 --> 05:55.870
że dostanie jakieś elementy, gdy listener wystrzeli.

05:55.870 --> 05:58.530
Z tym tutaj, możemy powiedzieć, że

05:58.530 --> 06:02.760
Listeners jest tablicą funkcji listener well w końcu.

06:02.760 --> 06:05.670
A tutaj jak wciskam funkcję listener, to muszę

06:05.670 --> 06:08.480
wyraźnie zaznaczyć, że to nie jest byle jaka

06:08.480 --> 06:10.630
funkcja, tylko że to typ listenera,

06:10.630 --> 06:12.350
wtedy wszystko działa.

06:12.350 --> 06:14.530
Teraz w miejscu, w którym używamy Add Listener,

06:14.530 --> 06:16.180
czyli na dole, teraz też oczywiście

06:16.180 --> 06:17.650
możemy wzmocnić nasze wpisywanie

06:17.650 --> 06:19.869
i dać do zrozumienia, że tutaj faktycznie

06:19.869 --> 06:23.440
dostaniemy garść projektów.

06:23.440 --> 06:27.220
Więc teraz z tym, ustawiliśmy naszego słuchacza,

06:27.220 --> 06:32.210
dodaliśmy typ projektu i to nie zmienia nic tutaj.

06:32.210 --> 06:35.120
Jeśli teraz dodamy coś, co działa, a jeśli dodam

06:35.120 --> 06:36.900
drugi element, to nadal zostanie

06:36.900 --> 06:38.880
dodany oprócz pierwszego elementu

06:38.880 --> 06:40.530
dodawanego ponownie, a my

06:40.530 --> 06:43.230
nie robimy żadnego filtrowania w żadnej z

06:43.230 --> 06:45.260
list w ogóle.

06:45.260 --> 06:48.600
Więc zanim będziemy kontynuować pracę nad naszymi częściami,

06:48.600 --> 06:50.570
upewnijmy się, że nie mamy tej duplikacji

06:50.570 --> 06:53.990
tutaj wewnątrz pojedynczej listy, a także nie duplikacji

06:53.990 --> 06:58.610
w obu polach tutaj, ale że zamiast tego, tylko aktywne projekty są Pokaż się

06:58.610 --> 07:02.940
tutaj i tylko zakończone projekty i dlatego początkowo żadne projekty

07:02.940 --> 07:08.010
nie pokazują się tutaj w zakończonych projektach.

07:08.010 --> 07:09.623
Więc naprawmy to.
