WEBVTT

00:02.400 --> 00:04.350
Instrutor: Os espaços de nomes são muito

00:04.350 --> 00:07.240
bonitos, mas não são necessariamente perfeitos.

00:07.240 --> 00:09.680
Vimos um problema na última palestra onde eu

00:09.680 --> 00:13.290
adicionei manualmente todas as pendências a cada arquivo.

00:13.290 --> 00:15.620
Quando eu removo, arrasto e solto da lista de

00:15.620 --> 00:17.340
projetos, sim, por exemplo, ela

00:17.340 --> 00:18.900
ainda se compila sem erros.

00:18.900 --> 00:20.350
Isto não é o ideal.

00:20.350 --> 00:22.360
Agora, pode ou não funcionar, dependendo

00:22.360 --> 00:25.047
se algum outro arquivo importa o modelo de arrastar

00:25.047 --> 00:26.590
e soltar que eu, no final, preciso

00:26.590 --> 00:27.550
aqui.

00:27.550 --> 00:29.100
O que aqui seria o caso.

00:29.100 --> 00:31.533
Portanto, tecnicamente, mesmo depois de removida,

00:31.533 --> 00:33.200
ela funciona aqui.

00:33.200 --> 00:35.580
Mas isto não é grande, isto é bastante perigoso.

00:35.580 --> 00:38.560
Se dependermos do fato de que algum arquivo vai tratar

00:38.560 --> 00:41.990
disso para nós, bem, se depois apagarmos ou alterarmos aquele

00:41.990 --> 00:44.830
arquivo que nos salvou, de repente mudamos algo

00:44.830 --> 00:49.240
totalmente alheio e nossa aplicação deixa de funcionar.

00:49.240 --> 00:51.420
Definitivamente, não queremos isso.

00:51.420 --> 00:53.900
Portanto, seria bom se tivéssemos importações

00:53.900 --> 00:58.050
e exportações que indicassem claramente o que importamos de qual arquivo.

00:58.050 --> 00:59.660
E se precisarmos de algo aqui,

00:59.660 --> 01:01.120
por exemplo, Drag Target,

01:01.120 --> 01:03.400
e não estivermos importando explicitamente,

01:03.400 --> 01:04.840
obtemos um erro.

01:04.840 --> 01:06.450
Isso é basicamente o que queremos.

01:06.450 --> 01:10.235
E obtemos este comportamento com os módulos ES6.

01:10.235 --> 01:12.930
Agora, os módulos ES6 também existem fora do tipo

01:12.930 --> 01:14.800
do mundo, os navegadores modernos

01:14.800 --> 01:17.340
os suportam nativamente, onde o navegador irá

01:17.340 --> 01:19.630
então basicamente baixar todas as pendências

01:19.630 --> 01:22.960
de um arquivo quando ele for executado.

01:22.960 --> 01:25.150
Mas os tipos também podem importá-los e depois

01:25.150 --> 01:28.350
obter o suporte inicial do tipo quando os utilizamos.

01:28.350 --> 01:31.007
Agora, como funcionam os módulos ES6?

01:31.007 --> 01:33.600
Vamos começar novamente com o arrastar e largar.

01:33.600 --> 01:35.240
Vamos remover aquela coisa do espaço de

01:35.240 --> 01:37.360
nomes que é uma característica de tipos puros.

01:37.360 --> 01:40.030
Mas vamos manter a palavra-chave para exportação.

01:40.030 --> 01:42.150
A palavra-chave de exportação não é apenas

01:42.150 --> 01:44.290
a palavra-chave para trabalhar com espaços

01:44.290 --> 01:46.980
de nome, é na verdade uma sintaxe padrão de script Java

01:46.980 --> 01:49.800
que é tão importante por digitação de script.

01:49.800 --> 01:52.360
Isso significa que você exporta esta

01:52.360 --> 01:53.600
interfase e esta aqui

01:53.600 --> 01:56.870
também deste arquivo e pode então importá-la para

01:56.870 --> 01:58.460
outro arquivo.

01:58.460 --> 02:01.290
Em nosso caso aqui, precisamos dele no item do projeto e nos

02:01.290 --> 02:02.980
arquivos da lista de projetos.

02:02.980 --> 02:05.230
Agora vamos começar com o item do projeto.

02:05.230 --> 02:09.030
Para importar algo do módulo ES de modo que com esse sintetizador

02:09.030 --> 02:11.450
do módulo ES, você especifica a importação

02:11.450 --> 02:14.440
na parte superior do arquivo ou perto da parte superior

02:14.440 --> 02:16.110
do arquivo antes de começar

02:16.110 --> 02:18.970
a escrever qualquer código real.

02:18.970 --> 02:23.240
Importe de e então você aponta para aquele arquivo com um caminho

02:23.240 --> 02:27.320
relativo do arquivo no qual você está importando.

02:27.320 --> 02:29.340
Portanto, neste caso, precisamos subir o

02:29.340 --> 02:31.030
nível I com dois pontos e uma barra.

02:31.030 --> 02:32.509
Para que estejamos na pasta

02:32.509 --> 02:35.550
de origem, e então precisamos ir aqui para a pasta de módulos

02:35.550 --> 02:37.450
e importar arrastar e soltar.

02:37.450 --> 02:40.480
Agora importante, adicione ponto JS aqui, porque

02:40.480 --> 02:43.480
você precisa importar como se isto já tivesse sido

02:43.480 --> 02:46.470
compilado, porque isto será levado para o script

02:46.470 --> 02:49.130
Java baunilha e então ele deve procurar o script

02:49.130 --> 02:50.860
Java lá, então para os arquivos

02:50.860 --> 02:55.010
de script Java, então ponto JS precisa ser adicionado.

02:55.010 --> 02:57.560
Agora você importa alguma coisa de lá e para isso você

02:57.560 --> 02:59.320
adiciona um aparelho de costura entre

02:59.320 --> 03:01.500
os quais você especifica o que você quer importar

03:01.500 --> 03:03.150
daquele arquivo.

03:03.150 --> 03:06.430
Lá eu já tenho a conclusão automática que quero

03:06.430 --> 03:08.480
importar arrastável.

03:08.480 --> 03:10.910
Agora, o arrastamento está disponível aqui

03:10.910 --> 03:14.430
e os tipos vêem que ele não está disponível e está feliz.

03:14.430 --> 03:16.860
Agora precisamos converter tudo para que ele possa aparecer

03:16.860 --> 03:17.930
em tempo de execução.

03:17.930 --> 03:20.370
Portanto, vamos nos livrar do espaço do nome também aqui.

03:20.370 --> 03:22.340
Agora também é preciso fechar a cinta encaracolada.

03:22.340 --> 03:24.870
E agora, por exemplo, aqui agora conseguimos o que queremos,

03:24.870 --> 03:27.540
recebemos erros, recebemos erros de componentes, projeto,

03:27.540 --> 03:29.650
tudo isso está faltando.

03:29.650 --> 03:31.890
Portanto, vamos exportar e importar todas essas coisas.

03:31.890 --> 03:33.220
Por exemplo, no componente de base,

03:33.220 --> 03:34.540
livre-se do espaço do nome, mantenha

03:34.540 --> 03:36.810
a palavra-chave de exportação como você aprendeu.

03:36.810 --> 03:38.270
Livrar-se da cinta de fechamento

03:38.270 --> 03:40.810
e reformatar e importar projetos.

03:40.810 --> 03:43.380
Podemos sempre nos livrar do espaço do nome.

03:43.380 --> 03:45.760
E todas as referências aqui, você pode realmente apagar

03:45.760 --> 03:48.803
todas as importações de referência que você tem em qualquer lugar.

03:51.300 --> 03:53.593
Livre-se de todo o nome de espaço de aparelhos de frisos.

03:55.010 --> 03:56.950
Lista de projetos, livrar-se de todo o espaço

03:56.950 --> 03:58.466
do nome e das referências, livrar-se

03:58.466 --> 04:00.690
da cinta de fechamento lá embaixo.

04:00.690 --> 04:03.320
E decoradores, livrem-se do espaço do nome e do fechamento

04:03.320 --> 04:05.330
do espaço do nome e da cinta encaracolada

04:05.330 --> 04:07.940
e arrastar e largar, já nos livramos dele.

04:07.940 --> 04:10.230
Projeto, livrar-se do espaço do nome

04:10.230 --> 04:11.920
e da cinta de fechamento.

04:11.920 --> 04:14.460
O projeto permaneceu sem surpresas, livrando-se

04:14.460 --> 04:16.223
do espaço do nome e do fechamento.

04:18.390 --> 04:22.620
Aqui nós estávamos contando que o projeto fosse importado por

04:22.620 --> 04:24.740
algum outro arquivo, eu não tinha

04:24.740 --> 04:26.620
referências a ele aqui.

04:26.620 --> 04:28.770
Então era sobre esse comportamento perigoso

04:28.770 --> 04:29.880
que eu estava falando.

04:29.880 --> 04:31.871
Isto poderia ter falhado se não tivéssemos

04:31.871 --> 04:35.120
importado ou se não referíssemos nossa parte do projeto no espaço do

04:35.120 --> 04:36.710
nome em algum outro arquivo.

04:36.710 --> 04:39.090
Portanto, isso definitivamente não foi o ideal.

04:39.090 --> 04:41.560
Mas com isso, vamos continuar nossa refatoração.

04:41.560 --> 04:44.430
Em validação aqui se livrar do espaço do nome aqui e de todo o fechamento

04:44.430 --> 04:46.050
de braceletes encaracolados aqui

04:46.050 --> 04:47.550
na parte inferior.

04:47.550 --> 04:49.150
E por último, mas não menos importante, um aplicativo

04:49.150 --> 04:51.503
TS, livrar-se dessas importações e do espaço do nome.

04:52.700 --> 04:55.350
Agora temos erros em todos os lugares, mas agora

04:55.350 --> 04:56.988
podemos começar de novo.

04:56.988 --> 04:59.560
Agora vamos talvez começar de novo no componente base.

04:59.560 --> 05:01.610
Isto tem bom aspecto, não é reclamar

05:01.610 --> 05:03.700
que parece ter tudo o que quer.

05:03.700 --> 05:06.250
Importação de projetos, bem, é uma reclamação.

05:06.250 --> 05:08.450
Por exemplo, lá, precisamos compor.

05:08.450 --> 05:12.070
Portanto, vamos adicionar uma importação na parte superior

05:12.070 --> 05:15.830
e deixar importar o componente de base de corte de ponto.

05:15.830 --> 05:18.410
É assim que você importa relativamente se

05:18.410 --> 05:19.990
algo está na mesma pasta.

05:19.990 --> 05:22.370
Ponto cortado no início, depois o nome do arquivo

05:22.370 --> 05:24.490
e depois tudo é ponto importante JS.

05:24.490 --> 05:26.753
Não se esqueça do ponto JS no final.

05:28.100 --> 05:30.250
Agora também precisamos da interfase

05:31.170 --> 05:34.650
validável aqui e do método de validação, da mente automática

05:34.650 --> 05:36.810
e do estado do projeto.

05:36.810 --> 05:39.140
Portanto, vamos importar todas

05:39.140 --> 05:44.080
estas coisas, vamos importar do ponto slash, ou não subir um

05:44.080 --> 05:46.149
nível e depois utilizar o

05:46.149 --> 05:49.460
ponto de validação JS, vamos importar daquele

05:49.460 --> 05:52.100
arquivo, validar e a função validar

05:53.010 --> 05:56.250
e importar autobind de, subindo um nível

05:56.250 --> 06:00.350
decoradores autobind JS.

06:00.350 --> 06:02.600
E por último, mas não menos importante,

06:02.600 --> 06:05.220
o estado do projeto, vamos importar de subir

06:05.220 --> 06:07.580
um nível de estado do projeto JS .

06:07.580 --> 06:11.000
De lá, podemos importar o estado constante do projeto

06:11.000 --> 06:13.250
que exportamos para lá.

06:13.250 --> 06:15.390
Agora estas são todas as importações que precisamos aqui

06:15.390 --> 06:16.773
para fazer este arquivo funcionar.

06:18.190 --> 06:20.480
Portanto, passemos agora ao item de projeto.

06:20.480 --> 06:23.270
Ali precisamos de autobind, precisamos de componentes, precisamos

06:23.270 --> 06:24.853
do modelo do projeto.

06:24.853 --> 06:26.700
Portanto, vamos acrescentar todas essas coisas.

06:26.700 --> 06:30.520
Vamos, por exemplo, importar o modelo do projeto

06:30.520 --> 06:34.523
a partir do projeto JS de modelos dot slash.

06:35.580 --> 06:38.080
Vamos também adicionar um componente

06:39.340 --> 06:41.110
que vive na mesma pasta .

06:41.110 --> 06:45.530
Portanto, importe o componente de base JS e

06:45.530 --> 06:49.020
auto bind, vamos importar o auto bind

06:50.790 --> 06:55.790
de decoradores de ponto a ponto auto bind JS.

06:56.020 --> 06:59.383
E agora este arquivo aqui também tem tudo o que precisa.

07:01.260 --> 07:03.410
Agora passemos à lista de projetos.

07:03.410 --> 07:06.610
Aqui na lista de projetos, também precisamos do componente

07:06.610 --> 07:10.250
como em outras coisas, então vamos realmente copiar isso aqui do

07:10.250 --> 07:14.260
item do projeto adicioná-lo à lista de projetos TS, mas não precisamos de

07:14.260 --> 07:16.120
arrastar o objeto aqui, mas de arrastar

07:16.120 --> 07:19.420
o alvo em vez disso, então vamos importar isso.

07:19.420 --> 07:22.307
E, além disso, precisamos que o projeto

07:22.307 --> 07:24.550
declare o status do projeto.

07:24.550 --> 07:26.540
Sim, estas são as coisas que precisamos.

07:26.540 --> 07:28.780
E também a classe do item do projeto.

07:28.780 --> 07:31.030
Assim, a partir do arquivo do modelo de projeto, também

07:31.030 --> 07:32.720
podemos importar o status do projeto.

07:32.720 --> 07:35.340
Você pode importar várias coisas exportadas de um mesmo

07:35.340 --> 07:36.840
arquivo simplesmente separando-as

07:36.840 --> 07:38.730
com uma vírgula entre estes suportes encaracolados,

07:38.730 --> 07:41.740
tal como você está vendo aqui.

07:41.740 --> 07:45.910
Também importamos a constante do estado do projeto da pasta do

07:46.790 --> 07:48.790
estado, do estado do projeto JS

07:48.790 --> 07:52.470
e também importamos por último, mas não menos importante,

07:52.470 --> 07:54.790
aqui no fundo precisamos dela, a classe

07:54.790 --> 07:57.130
do item do projeto.

07:57.130 --> 08:01.770
Portanto, importe o item do projeto do projeto dot

08:01.770 --> 08:03.623
slash item dot JS.

08:06.810 --> 08:08.280
Portanto, vamos em frente.

08:08.280 --> 08:11.280
Autobind está bem, status do projeto reclamando

08:11.280 --> 08:13.600
lá precisamos do modelo do projeto.

08:13.600 --> 08:15.740
Portanto, no topo, vamos

08:16.820 --> 08:20.300
importar o projeto de subir um nível modelos

08:20.300 --> 08:22.823
de projeto de ponto JS.

08:24.450 --> 08:27.630
Também estamos usando o status do projeto aqui, então vamos importar

08:27.630 --> 08:29.573
que desse mesmo arquivo" E com isso, por

08:32.320 --> 08:33.960
último, mas não menos importante,

08:33.960 --> 08:35.660
obtemos o arquivo TS do aplicativo

08:35.660 --> 08:38.810
lá, precisamos importar a entrada do projeto.

08:38.810 --> 08:43.610
de componentes de corte de pontos de entrada do projeto.

08:43.610 --> 08:48.030
JS e a lista de projetos da lista de projetos JS' Se agora

08:49.290 --> 08:52.280
salvamos esta lista deve ser compilada

08:52.280 --> 08:54.330
sem erros e agora estamos

08:54.330 --> 08:58.500
usando os módulos ES6 para organizar nossas importações

08:58.500 --> 09:00.823
e exportações.

09:02.640 --> 09:05.460
Se dermos uma olhada no navegador, embora tenhamos

09:05.460 --> 09:07.040
recebido um erro.

09:07.040 --> 09:09.390
Agora a razão para isso é que se verificarmos a pasta dist

09:09.390 --> 09:12.013
dist, conseguimos acertar nosso pacote de arquivos JS.

09:13.040 --> 09:15.900
Agora precisamos trocar a configuração TS novamente.

09:15.900 --> 09:19.070
Para um aqui, não devemos usar AMD

09:19.070 --> 09:22.420
agora, mas ES vinte e quinze.

09:22.420 --> 09:25.710
Então é basicamente a palavra de código para ES6 que

09:25.710 --> 09:27.240
foi a versão agma script

09:27.240 --> 09:29.300
que introduziu os módulos ES.

09:29.300 --> 09:31.260
Portanto, estamos basicamente dizendo

09:31.260 --> 09:34.480
que o script do tipo não transforma nossas importações em nada,

09:34.480 --> 09:36.240
mantenha-as como estão.

09:36.240 --> 09:39.250
Os navegadores modernos vão entender isso.

09:39.250 --> 09:41.290
Portanto, isso é importante, certifique-se

09:41.290 --> 09:43.433
também de ter um alvo de ES6 ou superior aqui'

09:44.950 --> 09:47.530
Você agora também deve comentar o arquivo de fora novamente,

09:47.530 --> 09:50.670
porque isso não é suportado com os módulos ES.

09:50.670 --> 09:53.590
E com isso o que você obtém na pasta dist é basicamente

09:53.590 --> 09:56.610
uma réplica de sua pasta de origem, mas com arquivos

09:56.610 --> 09:58.690
de script Java.

09:58.690 --> 10:00.480
Portanto, agora também precisamos voltar

10:00.480 --> 10:03.120
ao arquivo de índice HDML e importar novamente o aplicativo

10:03.120 --> 10:04.840
JS, porque agora temos um aplicativo

10:04.840 --> 10:06.350
JS na pasta dist.

10:06.350 --> 10:08.910
E mais uma vez este arquivo de aplicação JS terá lá declarações

10:08.910 --> 10:11.180
de importação, porque, como mencionei, isto é suportado

10:11.180 --> 10:13.830
por scripts Java, por modernos motores de scripts Java e por

10:13.830 --> 10:15.900
modernos navegadores.

10:15.900 --> 10:17.440
E o navegador irá resolver estas

10:17.440 --> 10:19.440
importações para você, portanto.

10:19.440 --> 10:22.430
Portanto, se agora recarregamos isto, ainda

10:22.430 --> 10:24.240
recebemos um erro.

10:24.240 --> 10:27.310
Não é possível utilizar a declaração de importação fora de um módulo.

10:27.310 --> 10:30.630
Os navegadores bem modernos suportam este sintex, mas

10:30.630 --> 10:33.150
é preciso dizer-lhes que se quer usá-lo.

10:33.150 --> 10:37.470
E você lhes diz removendo os (murmúrios) aqui e em vez disso na etiqueta

10:37.470 --> 10:39.670
do roteiro, onde você importa um arquivo

10:39.670 --> 10:42.777
que tem estas declarações de importação.

10:42.777 --> 10:46.313
Você usa o tipo igual ao módulo.

10:47.300 --> 10:50.450
Se você agora está seguro disto, você vê que isto funciona

10:50.450 --> 10:53.440
e agora, se acrescentarmos algo aqui, teremos a aplicação

10:53.440 --> 10:56.120
funcionando novamente.

10:56.120 --> 10:58.910
Agora, se você inspecionar a aba da rede pela forma

10:58.910 --> 11:01.680
como você verá que se você recarregar, há um monte

11:01.680 --> 11:05.290
de solicitações de rede acontecendo, se eu fizer um pouco de zoom,

11:05.290 --> 11:07.410
podemos vê-la melhor.

11:07.410 --> 11:10.340
Todos os nossos arquivos de script Java são solicitados aqui.

11:10.340 --> 11:12.810
Eles são solicitados automaticamente pelo navegador

11:12.810 --> 11:14.780
quando ele encontra nossa importação.

11:14.780 --> 11:16.967
Então ele começa com o app JS, depois vê

11:16.967 --> 11:19.410
a importação para projetar o input JS.

11:19.410 --> 11:21.990
Aqui e, portanto, é claro, o próximo pedido vai para

11:21.990 --> 11:23.160
a entrada do projeto.

11:23.160 --> 11:25.410
Também faz o mesmo para a lista de projetos.

11:25.410 --> 11:27.360
Agora, na entrada do projeto, por exemplo,

11:27.360 --> 11:29.422
ele veria uma entrada do componente base

11:29.422 --> 11:31.450
JS, razão pela qual ele também importa o

11:31.450 --> 11:33.400
componente base da sonda JS.

11:33.400 --> 11:35.530
Então isso é feito pelo navegador

11:35.530 --> 11:38.170
aqui nós aproveitamos e agora temos outra

11:38.170 --> 11:40.850
maneira de dividir nossos arquivos, mas com

11:40.850 --> 11:43.750
a vantagem adicional de afirmarmos claramente

11:43.750 --> 11:45.850
o que precisamos de cada arquivo e

11:45.850 --> 11:49.100
se omitirmos uma importação, o tipo de script grita

11:49.100 --> 11:51.127
para nós, o que não fazia com a abordagem

11:51.127 --> 11:53.400
anterior, que é de fato a minha recomendação

11:53.400 --> 11:58.870
e porque é a maneira padrão de fato de importar e exportar.

11:58.870 --> 12:00.710
Agora, se você já trabalhou com script de

12:00.710 --> 12:03.850
tipo antes em outros projetos, digamos em um projeto angular, você também

12:03.850 --> 12:06.380
pode estar acostumado a não ter que especificar uma extensão

12:06.380 --> 12:07.980
de arquivo aqui Bem, também poderemos

12:07.980 --> 12:09.270
omitir isso uma vez que adicionarmos

12:09.270 --> 12:12.210
um pacote web e uma ferramenta de conta.

12:12.210 --> 12:14.580
Enquanto não tivermos isso e contarmos com o navegador

12:14.580 --> 12:16.870
para importar nossos arquivos, você precisa adicionar

12:16.870 --> 12:18.833
essa extensão extra.
