WEBVTT

00:01.538 --> 00:03.725
ผู้บรรยาย: ในการเริ่มต้น ก่อนอื่นให้ไปที่

00:03.725 --> 00:09.965
tsconfig json เนื่องจากเราต้องแน่ใจว่ามีการกำหนดค่าบางอย่าง

00:09.965 --> 00:12.780
ตรวจสอบให้แน่ใจว่าเป้าหมายที่นี่ถูกตั้งค่าเป็น

00:12.780 --> 00:16.286
es5 หรือ es6 ซึ่งขึ้นอยู่กับคุณ

00:16.286 --> 00:19.423
ขึ้นอยู่กับเบราว์เซอร์ที่คุณวางแผนจะสนับสนุน

00:19.423 --> 00:26.543
เนื่องจากในตอนท้าย webpack และประเภทที่ตัวโหลดจะใช้เป้าหมายนี้เพื่อกำหนดว่าโค้ดของคุณควรแปลงอย่างไร

00:26.543 --> 00:28.960
ประเภทของโค้ดของคุณควรเปลี่ยนเป็นโค้ดสคริปต์

00:28.960 --> 00:32.480
Java ที่ทำงานในเบราว์เซอร์รุ่นเก่าด้วยหรือไม่

00:32.480 --> 00:37.811
หรือเหมือนกับ es6 เป็นรหัสที่ทำงานในเบราว์เซอร์รุ่นใหม่กว่าเท่านั้น

00:37.811 --> 00:44.110
โมดูลควรตั้งค่าเป็น es2015 หรือ es6 เพื่อให้การตั้งค่านั้นดี

00:44.110 --> 00:49.110
นอกจากนี้ คุณต้องการตรวจสอบ outDir ของคุณด้วย

00:50.560 --> 00:55.997
ฉันจะเก็บไว้เป็น dist แต่คุณสามารถเปลี่ยนสิ่งนี้ได้หากคุณต้องการคอมไพล์โค้ดของคุณไปยังไดเร็กทอรีอื่น

00:55.997 --> 00:59.378
คุณไม่จำเป็นต้องรูทไดเร็กทอรีอีกต่อไป เนื่องจาก

00:59.378 --> 01:02.260
webpack จะเข้าควบคุมที่นั่น และ webpack

01:02.260 --> 01:05.014
จะกำหนดตำแหน่งที่ไฟล์รูทของคุณ

01:05.014 --> 01:07.660
โดยทั่วไปแล้วการตั้งค่าเหล่านี้ควรจะใช้ได้

01:07.660 --> 01:12.487
เราสามารถปรับแต่งได้ในภายหลังหากมีบางอย่างไม่เป็นไปตามที่เราต้องการ

01:12.487 --> 01:15.220
จากนั้นให้เพิ่มไฟล์การกำหนดค่าใหม่ถัดจาก

01:15.220 --> 01:19.848
tsconfig json และนั่นคือ webpack การกำหนดค่า ไฟล์.js

01:19.848 --> 01:22.368
และให้แน่ใจว่าคุณตั้งชื่อมันแบบนี้จริงๆ

01:22.368 --> 01:24.150
เพราะนี่คือไฟล์ที่ webpack

01:24.150 --> 01:30.220
จะค้นหาโดยอัตโนมัติ และสิ่งนี้จะบอก webpack ถึงวิธีการทำงานกับโครงการของเรา

01:30.220 --> 01:34.568
เนื่องจาก webpack เป็นเครื่องมือที่ต้องกำหนดค่าเพื่อให้ทำงานได้อย่างถูกต้องที่นี่

01:34.568 --> 01:37.568
แล้วเราจะทำอย่างไรใน webpack นี้ ไฟล์คอนฟิก?

01:37.568 --> 01:40.338
ไฟล์การกำหนดค่านี้ใช้ JavaScript และจริง

01:40.338 --> 01:43.288
ๆ แล้วใช้โหนด คุณสมบัติ js

01:43.288 --> 01:46.747
ดังนั้นเราต้องการใช้โหนด js ส่งออกไวยากรณ์ซึ่งมีลักษณะเช่นนี้เพื่อส่งออกวัตถุ

01:46.747 --> 01:50.379
JavaScript

01:50.379 --> 01:53.538
ซึ่งจะเป็นวัตถุการกำหนดค่าที่ webpack เลือก

01:53.538 --> 01:55.585
ดังนั้นในกรณีที่คุณไม่เคยเห็นมาก่อน นี่คือวิธีที่คุณส่งออกสิ่งต่างๆ

01:55.585 --> 01:59.648
ในโหนด js สภาพแวดล้อม

01:59.648 --> 02:02.877
และที่นี่เรากำลังส่งออกวัตถุ JavaScript

02:02.877 --> 02:05.920
ตอนนี้ webpack ต้องการข้อมูลสองสามส่วน

02:05.920 --> 02:09.840
สิ่งสำคัญที่สุดคือต้องรู้ว่าโครงการทั้งหมดของคุณเริ่มต้นที่ไฟล์ใด

02:09.840 --> 02:14.585
ดังนั้นจุดเริ่มต้นของคุณอยู่ที่ไหน

02:14.585 --> 02:17.370
ในกรณีของเรานั่นคือแอป ไฟล์ ts.

02:17.370 --> 02:18.922
ไฟล์นี้ควรถูกเรียกใช้งานก่อน

02:18.922 --> 02:30.219
และสิ่งที่ webpack จะทำคือจะดูการนำเข้าในไฟล์นี้และไปที่ไฟล์เหล่านี้และดูการนำเข้าและการนำเข้าของไฟล์ที่นำเข้าและอื่นๆ

02:30.219 --> 02:33.461
จนกว่าจะรู้ไฟล์ทั้งหมดที่โครงการของคุณใช้ในตอนท้าย

02:33.461 --> 02:41.690
จากนั้นมันจะผ่านเนื้อหาไฟล์เช่นเนื้อหานี้ที่นี่และเนื้อหาทั้งหมดในไฟล์ทั้งหมดและรวบรวมด้วยความช่วยเหลือของ

02:41.690 --> 02:44.290
ts แพ็คเกจตัวโหลดที่ฉันพูดถึง

02:44.290 --> 02:46.960
ตอนนี้เพื่อให้ webpack ทำงานได้อย่างถูกต้องที่นี่

02:46.960 --> 02:51.598
คุณควรลบไฟล์ . js ในการนำเข้าทั้งหมด

02:51.598 --> 02:54.400
เราต้องการสิ่งนั้นมาก่อน เมื่อเราใช้เบราว์เซอร์เนทีฟในตัว

02:54.400 --> 02:57.885
ts การทำงานของโมดูล แต่ด้วย

02:57.885 --> 03:01.130
webpack คุณไม่จำเป็นต้องมีส่วนขยายเหล่านี้

03:01.130 --> 03:03.664
เนื่องจาก webpack จะค้นหาโดยอัตโนมัติ js และไฟล์นามสกุลอื่นๆ บางไฟล์

03:03.664 --> 03:06.501
ดังนั้นคุณไม่ควรเพิ่มที่นี่ มิฉะนั้น

03:06.501 --> 03:10.716
webpack จะค้นหาไฟล์ที่มีนามสกุลซ้ำซึ่งคุณไม่ต้องการ

03:10.716 --> 03:13.655
เลยถอด. js ในการนำเข้าทั้งหมดเหล่านี้ที่นี่ และเมื่อคุณทำเสร็จแล้ว

03:13.655 --> 03:21.370
ให้บันทึกไฟล์ทั้งหมดเหล่านี้เพื่อให้แน่ใจว่าการเปลี่ยนแปลงของคุณมีผล

03:21.370 --> 03:31.320
ตอนนี้กลับไปที่ webpack การกำหนดค่า js ตอนนี้คุณควรเพิ่มคุณสมบัติรายการในวัตถุที่ส่งออกนี้

03:31.320 --> 03:32.740
แล้วชี้ไปที่. /src/app. ts ในตัวอย่างของเรา

03:32.740 --> 03:37.740
ดังนั้นที่ไฟล์รายการรูทของโครงการของคุณ

03:38.680 --> 03:42.444
ถัดไปเพิ่มคีย์เอาต์พุตที่นี่

03:42.444 --> 03:45.880
เอาต์พุตตอนนี้เป็นวัตถุที่นี่

03:45.880 --> 03:48.051
โดยที่เราระบุชื่อไฟล์เป็นอันดับแรก

03:48.051 --> 03:52.998
นี่จะเป็นไฟล์ JavaScript ไฟล์เดียวที่จะถูกสร้างขึ้นในตอนท้าย

03:52.998 --> 03:57.350
และที่นี่เราจะตั้งชื่อมันว่าบันเดิล js แต่คุณสามารถตั้งชื่ออะไรก็ได้ที่คุณต้องการ

03:57.350 --> 03:58.788
แอป. js หรืออะไรก็ตามที่คุณต้องการ

03:58.788 --> 04:01.709
คุณยังสามารถเพิ่มส่วนไดนามิกได้ที่นี่

04:01.709 --> 04:11.829
เช่น แฮชเนื้อหา เพื่อบอกให้ webpack สร้างส่วนที่ไม่ซ้ำโดยอัตโนมัติสำหรับทุกบิลด์ ซึ่งจะช่วยคุณในการแคชในเบราว์เซอร์

04:11.829 --> 04:13.578
แต่อีกครั้งคุณสามารถเรียนรู้เพิ่มเติมเกี่ยวกับสิ่งนั้นได้ในเอกสาร webpack

04:13.578 --> 04:16.229
ที่นี่เราไม่ต้องการดังนั้นเราจะตั้งชื่อไฟล์บันเดิล จ.

04:16.229 --> 04:19.779
นอกจากชื่อไฟล์แล้ว คุณต้องระบุพาธด้วย

04:19.779 --> 04:23.320
ซึ่งควรเขียนเอาต์พุตไปที่ใด

04:23.320 --> 04:26.131
และแน่นอนว่าควรตรงกับเส้นทางที่คุณมีใน

04:26.131 --> 04:28.900
ts การกำหนดค่า js เพื่อหลีกเลี่ยงข้อผิดพลาด

04:28.900 --> 04:32.970
ดังนั้นไปยังโฟลเดอร์นี้

04:32.970 --> 04:34.189
ตอนนี้ไม่เหมือนใน ts config,js คุณไม่ควรเขียนไฟล์

04:34.189 --> 04:37.010
. /ห่างที่นี่.

04:37.010 --> 04:39.819
Webpack ต้องการเส้นทางที่สมบูรณ์ที่นี่

04:39.819 --> 04:42.099
และในการสร้างเราสามารถใช้โหนด js โมดูล

04:42.099 --> 04:48.880
เพื่อที่เราสามารถใช้โหนด js นำเข้าไวยากรณ์ ซึ่งใช้คำหลักที่ต้องการ

04:48.880 --> 04:51.280
และนำเข้าโมดูลพาธ

04:51.280 --> 04:54.220
คุณไม่จำเป็นต้องติดตั้งสิ่งนี้เป็นไลบรารี

04:54.220 --> 04:56.050
นี่คือโหนดหลัก js โมดูลที่คุณมีอยู่แล้วหากคุณมี

04:56.050 --> 05:02.149
node.js js ติดตั้ง ซึ่งคุณทำเพราะเราทำก่อนหน้านี้ในหลักสูตร

05:02.149 --> 05:04.966
ตอนนี้คุณสามารถใช้เส้นทางเพื่อเรียกวิธีการแก้ไขที่นั่น

05:04.966 --> 05:11.280
ซึ่งช่วยให้คุณสร้างเส้นทางที่แน่นอนไปยังโฟลเดอร์ที่ต้องการได้

05:11.280 --> 05:12.910
เพื่อที่เราจะใช้ค่าคงที่พิเศษ

05:12.910 --> 05:17.236
ค่าคงที่ __dirname ซึ่งมีอยู่ทั่วโลกในโหนด

05:17.236 --> 05:17.236
js สภาพแวดล้อม

05:17.236 --> 05:21.150
และ webpack อย่างที่ฉันบอกว่าใช้โหนด js เพื่อเรียกใช้งานไฟล์ของคุณ

05:21.150 --> 05:24.692
จากนั้นเป็นอาร์กิวเมนต์ dist

05:24.692 --> 05:27.433
ที่สองในตอนท้าย dist เพียงแค่สร้างเส้นทางที่แน่นอนไปยังโฟลเดอร์

05:27.433 --> 05:33.190
dist ซึ่ง webpack ใช้เพื่อเขียนเอาต์พุตของคุณที่นั่น

05:33.190 --> 05:35.452
และด้วยเหตุนี้คุณจึงมีจุดเริ่มต้นและจุดส่งออก

05:35.452 --> 05:38.753
แต่คุณไม่ได้บอก webpack ว่าจะทำอย่างไรกับไฟล์ TypeScript

05:38.753 --> 05:40.743
ของคุณ

05:40.743 --> 05:42.553
เนื่องจากโดยค่าเริ่มต้น webpack

05:42.553 --> 05:45.140
ไม่ทราบ โดยค่าเริ่มต้นเป็นเพียงบันเดิล

05:45.140 --> 05:46.884
ฟังก์ชันพิเศษใดๆ เช่น การคอมไพล์

05:46.884 --> 05:48.684
TypeScript เป็น JavaScript

05:48.684 --> 05:51.261
จะต้องสอนให้กับ webpack

05:51.261 --> 05:53.452
เราจะทำอย่างนั้นในการบรรยายครั้งต่อไป
