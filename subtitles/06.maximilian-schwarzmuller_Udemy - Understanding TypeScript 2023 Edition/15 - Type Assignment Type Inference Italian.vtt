WEBVTT

00:02.270 --> 00:03.850
Istruttore: Utilizziamo

00:03.850 --> 00:07.450
i tipi fondamentali di numero, booleano e stringa.

00:07.450 --> 00:10.840
Nell'elenco dei parametri di questa funzione,

00:10.840 --> 00:13.970
assegniamo sempre esplicitamente i tipi con

00:13.970 --> 00:16.540
i due punti dopo il nome del parametro

00:16.540 --> 00:18.410
e poi il nome del tipo.

00:18.410 --> 00:21.350
Qui i nomi sono numero, booleano, stringa.

00:21.350 --> 00:23.100
E nel caso ve lo steste chiedendo,

00:23.100 --> 00:25.420
questi sono ora identificatori speciali.

00:25.420 --> 00:28.530
Si tratta di una sintassi speciale aggiunta

00:28.530 --> 00:30.170
da TypeScript.

00:30.170 --> 00:32.900
Non fa parte del codice JavaScript compilato.

00:32.900 --> 00:35.040
Se controlliamo il codice qui, queste

00:35.040 --> 00:37.280
assegnazioni di tipo sono scomparse,

00:37.280 --> 00:39.530
perché JavaScript non le supporta.

00:39.530 --> 00:42.390
Questi due punti si trovano dopo una variabile

00:42.390 --> 00:43.920
o dopo un parametro.

00:43.920 --> 00:46.320
E poi numeri, booleani e stringhe.

00:46.320 --> 00:48.290
Queste parole chiave speciali.

00:48.290 --> 00:50.840
Questo è stato introdotto da TypeScript.

00:50.840 --> 00:53.500
Il compilatore TypeScript lo capisce.

00:53.500 --> 00:55.480
L'IDE qui supporta TypeScript e quindi

00:55.480 --> 00:58.580
non si lamenta di queste parole chiave speciali.

00:58.580 --> 01:01.760
JavaScript non comprende questa sintassi.

01:01.760 --> 01:04.590
Non capisce i due punti dopo un parametro o i due

01:04.590 --> 01:06.560
punti dopo una variabile e poi la

01:06.560 --> 01:09.190
parola chiave speciale numero o stringa.

01:09.190 --> 01:11.540
JavaScript non lo capisce e quindi non fa

01:11.540 --> 01:13.560
parte dell'output di JavaScript.

01:13.560 --> 01:15.920
In realtà è usato solo dal compilatore TypeScript.

01:15.920 --> 01:18.130
E poi, beh, è un compilatore perché

01:18.130 --> 01:21.820
converte questo codice in codice JavaScript.

01:21.820 --> 01:24.880
Nota a margine, si vede anche che commuta const per var,

01:24.880 --> 01:27.700
ma questo è un aspetto su cui tornerò più avanti.

01:27.700 --> 01:30.590
Quindi, abbiamo la nostra assegnazione di tipo esplicita

01:30.590 --> 01:33.060
e viene compresa solo da TypeScript.

01:33.060 --> 01:35.763
Ottimo, perché non li abbiamo laggiù?

01:36.880 --> 01:39.890
Non ho assegnazioni di tipo esplicito qui.

01:39.890 --> 01:41.180
E, tra l'altro, anche in questo

01:41.180 --> 01:43.450
caso non quando calcoliamo il risultato, ad

01:43.450 --> 01:45.530
esempio, perché TypeScript ha una funzione

01:45.530 --> 01:48.400
integrata che si chiama inferenza di tipo.

01:48.400 --> 01:51.000
Ciò significa che TypeScript fa

01:51.000 --> 01:53.010
del suo meglio, e fa un buon

01:53.010 --> 01:56.400
lavoro, per capire quale tipo di variabile

01:56.400 --> 01:58.860
o costante è presente.

01:58.860 --> 02:02.300
E qui, per esempio, capisce che numero1 sarà

02:02.300 --> 02:05.780
sempre di tipo numero alla fine, perché lo si

02:05.780 --> 02:08.020
inizializza con un numero.

02:08.020 --> 02:09.950
In realtà si tratta di una costante,

02:09.950 --> 02:11.740
quindi è ancora più specifica.

02:11.740 --> 02:15.350
E il tipo che identifica qui non è un numero qualsiasi,

02:15.350 --> 02:17.490
ma il numero cinque.

02:17.490 --> 02:20.110
Perché non sarà comunque possibile assegnare

02:20.110 --> 02:23.870
un nuovo numero o un nuovo valore a un valore costante.

02:23.870 --> 02:25.840
Se si cambiasse questa variabile in una

02:25.840 --> 02:28.460
variabile, quindi se si usasse let al suo posto, ovviamente

02:28.460 --> 02:30.180
non si romperebbe nulla.

02:30.180 --> 02:32.940
Possiamo usare una variabile, forse non è la migliore pratica

02:32.940 --> 02:34.540
perché questo valore non cambia mai,

02:34.540 --> 02:36.210
ma non è nemmeno orribile.

02:36.210 --> 02:38.260
Ma se ci passiamo sopra, vediamo che TypeScript

02:38.260 --> 02:41.210
non dice: "Ok, questo deve essere un cinque".

02:41.210 --> 02:45.510
Ma rileva comunque che il tipo è un numero.

02:45.510 --> 02:49.260
Ora, possiamo assolutamente scrivere questo codice da soli.

02:49.260 --> 02:51.970
Possiamo aggiungere i due punti dopo il nome della

02:51.970 --> 02:53.870
variabile, a sinistra del segno di

02:53.870 --> 02:55.590
uguale, e poi il nome del tipo.

02:55.590 --> 02:56.880
Quindi, in pratica, la stessa

02:56.880 --> 02:59.470
cosa che abbiamo fatto nei parametri di questa funzione.

02:59.470 --> 03:01.860
Ma questo è ridondante e non è

03:01.860 --> 03:04.620
considerato una buona pratica.

03:04.620 --> 03:06.790
Perché TypeScript è in grado di

03:06.790 --> 03:09.990
dedurre perfettamente questo tipo da lì.

03:09.990 --> 03:13.690
Quindi, assegnare questo non è una buona idea.

03:13.690 --> 03:16.420
Questo cambia solo se si crea questa variabile

03:16.420 --> 03:18.053
in modo non assegnato.

03:19.000 --> 03:22.130
In questo modo, se non viene inizializzato immediatamente.

03:22.130 --> 03:25.700
Quindi, è buona norma indicare a TypeScript quale

03:25.700 --> 03:29.070
valore sarà memorizzato lì dentro.

03:29.070 --> 03:32.590
In questo modo, quando in seguito si assegna un valore, e naturalmente

03:32.590 --> 03:34.080
è un po' ridondante dividere

03:34.080 --> 03:35.320
questo in due righe.

03:35.320 --> 03:37.800
Lo faccio solo a scopo dimostrativo.

03:37.800 --> 03:39.480
Ma ora, se assegno questo qui,

03:39.480 --> 03:42.460
si interrompe perché ho detto in anticipo a TypeScript

03:42.460 --> 03:44.630
che questo sarà di tipo number.

03:44.630 --> 03:45.610
Non è necessario farlo.

03:45.610 --> 03:47.420
Funziona anche se non lo fate.

03:47.420 --> 03:50.330
Ma ora si potrebbe anche aggiungere questo cinque e non

03:50.330 --> 03:51.630
si otterrebbe un errore,

03:51.630 --> 03:53.470
perché non si sta dicendo nulla a TypeScript

03:53.470 --> 03:55.350
sul tipo che sarà memorizzato in questa

03:55.350 --> 03:56.975
variabile e quindi TypeScript

03:56.975 --> 03:59.630
consente qualsiasi tipo.

03:59.630 --> 04:02.600
Se invece si aggiunge un numero di colon qui, si dice

04:02.600 --> 04:05.417
a TypeScript: "Ehi, alla fine "un numero sarà

04:05.417 --> 04:07.370
memorizzato lì dentro". Pertanto, se in seguito si memorizza qualcos'altro,

04:07.370 --> 04:10.060
come in questo caso in cui abbiamo memorizzato una stringa,

04:10.060 --> 04:12.470
si otterrà un errore nell'IDE e, naturalmente,

04:12.470 --> 04:15.170
anche se si compila il codice.

04:15.170 --> 04:17.570
Otterremo l'errore già visto in precedenza.

04:17.570 --> 04:20.253
Ecco come si possono assegnare i tipi.

04:22.300 --> 04:24.920
Ora, anche se TypeScript ha appena dedotto un tipo,

04:24.920 --> 04:27.830
e lasciatemi correggere questo, vi sgriderà se rompete

04:27.830 --> 04:29.310
il tipo dedotto.

04:29.310 --> 04:32.720
In realtà, è sbagliato dire anche perché è ovvio

04:32.720 --> 04:35.670
che lo fa, perché non dovrebbe farlo?

04:35.670 --> 04:37.000
L'inferenza di tipo serve a salvare

04:37.000 --> 04:39.750
il codice, per evitare di dover assegnare manualmente un tipo.

04:39.750 --> 04:42.730
Naturalmente, TypeScript vi sgrida se usate

04:42.730 --> 04:44.520
un tipo sbagliato, un tipo

04:44.520 --> 04:46.510
che non ha dedotto.

04:46.510 --> 04:48.640
Per esempio, se resultPhrase viene

04:48.640 --> 04:52.460
creato con let, in modo che sia una variabile, TypeScript infonde

04:52.460 --> 04:54.000
che sarà di tipo stringa,

04:54.000 --> 04:57.670
perché lo inizializziamo con una stringa.

04:57.670 --> 04:59.850
In pratica è l'equivalente di non inizializzarlo

04:59.850 --> 05:03.060
e di impostare il tipo per conto nostro, per poi assegnare un valore

05:03.060 --> 05:04.970
in un secondo momento.

05:04.970 --> 05:07.410
Ora, se cambiamo resultPhrase

05:07.410 --> 05:12.310
a, diciamo, zero, per qualsiasi motivo, otteniamo un errore:

05:12.310 --> 05:17.330
il tipo zero non è assegnabile al tipo stringa.

05:17.330 --> 05:21.210
E questo ha senso, no?

05:21.210 --> 05:22.690
TypeScript ha dedotto che volevamo

05:22.690 --> 05:25.430
memorizzare una stringa, ora stiamo cercando di memorizzare

05:25.430 --> 05:27.290
un numero e otteniamo un errore.

05:27.290 --> 05:28.530
Questo è il lavoro, il compito principale di TypeScript.

05:28.530 --> 05:33.000
Controllare i tipi e sgridarci se li usiamo

05:33.000 --> 05:35.280
in modo errato.
