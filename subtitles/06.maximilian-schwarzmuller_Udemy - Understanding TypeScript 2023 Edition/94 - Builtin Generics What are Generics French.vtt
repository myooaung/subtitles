WEBVTT

00:02.130 --> 00:02.963
Narrateur : Pour cela encore,

00:02.963 --> 00:05.260
je suis de retour dans notre configuration de projet fictive, que nous avons

00:05.260 --> 00:06.690
utilisée maintes et maintes fois.

00:06.690 --> 00:08.260
Là, nous pouvons exécuter NPM starts pour

00:08.260 --> 00:10.190
faire apparaître ce serveur de développement.

00:10.190 --> 00:13.690
Puis, dans une nouvelle fenêtre de terminal avec le serveur fonctionnant

00:13.690 --> 00:15.260
dans une autre fenêtre de terminal,

00:15.260 --> 00:17.419
j'exécute TSC dash W pour lancer mon processus

00:17.419 --> 00:21.540
de compilation TypeScript et le maintenir opérationnel.

00:21.540 --> 00:23.470
Avec cela, bien sûr, nous avons une page vide parce

00:23.470 --> 00:24.560
qu'il n'y a rien dessus, mais

00:24.560 --> 00:27.060
maintenant nous pouvons jouer dans le fichier TS de l'application

00:27.060 --> 00:29.480
et commencer à utiliser les génériques.

00:29.480 --> 00:32.940
Et je pense qu'il est plus facile de comprendre les génériques

00:32.940 --> 00:35.450
si nous regardons un type par défaut, qui

00:35.450 --> 00:37.450
est intégré dans TypeScript avec

00:37.450 --> 00:39.610
lequel nous avons beaucoup travaillé,

00:39.610 --> 00:41.890
qui s'avère être un générique et qui

00:41.890 --> 00:44.410
serait un tableau.

00:44.410 --> 00:46.900
Disons que nous avons un tableau de noms.

00:46.900 --> 00:50.370
Max et Manuel, disons.

00:50.370 --> 00:51.620
Nous avons donc deux noms

00:51.620 --> 00:54.610
là-dedans et bien sûr, le type de la constante du nom

00:54.610 --> 00:57.210
est un tableau de chaînes de caractères.

00:57.210 --> 00:59.610
En fait, on peut considérer qu'il

00:59.610 --> 01:02.460
s'agit de deux types combinés.

01:02.460 --> 01:05.760
Tout comme vous pouvez avoir un objet avec différentes propriétés

01:05.760 --> 01:07.700
où dans chaque propriété vous pouvez stocker

01:07.700 --> 01:09.310
un type différent.

01:09.310 --> 01:13.750
Un tableau est toujours un objet contenant différentes données,

01:13.750 --> 01:16.440
dans ce cas des chaînes de caractères.

01:16.440 --> 01:20.230
Donc, nous avons en fait le type de tableau, juste un tableau et si je supprime

01:20.230 --> 01:22.770
les noms ici et que je les coupe, vous verrez que TypeScript

01:22.770 --> 01:25.010
en déduira qu'il s'agit d'un tableau de type

01:25.010 --> 01:29.140
n'importe quoi avec n'importe quelle donnée à l'intérieur.

01:29.140 --> 01:32.690
En effet, TypeScript connaît le type de tableau.

01:32.690 --> 01:35.280
Nous pourrions donc dire, ceci devrait être un tableau

01:35.280 --> 01:37.600
mais comme vous le voyez, si je spécifie ceci,

01:37.600 --> 01:39.900
nous obtenons une erreur même si je peux vous

01:39.900 --> 01:43.570
dire que ce type de tableau, comme ceci, existe pour TypeScript.

01:43.570 --> 01:45.870
Mais nous voyons que c'est un type générique

01:45.870 --> 01:48.710
et qu'il nécessite un argument de type.

01:48.710 --> 01:50.950
Et maintenant, c'est quelque chose que nous n'avons jamais vu auparavant.

01:50.950 --> 01:53.870
Nous n'avions jamais entendu parler de types génériques auparavant.

01:53.870 --> 01:55.750
Maintenant, cette notation étrange ici,

01:55.750 --> 01:58.120
chaque fois que vous voyez quelque chose comme ça

01:58.120 --> 02:01.060
en TypeScript, vous avez affaire à un type générique.

02:01.060 --> 02:05.610
Un type générique est un type qui est en quelque sorte connecté

02:05.610 --> 02:08.890
à un autre type et qui est vraiment flexible

02:08.890 --> 02:12.920
quant au type exact de cet autre type.

02:12.920 --> 02:14.130
Cela vous semble difficile ?

02:14.130 --> 02:16.820
Revenons à l'exemple du tableau.

02:16.820 --> 02:19.380
Nous savons que nous voulons stocker un tableau ici.

02:19.380 --> 02:22.250
Ainsi, un tableau peut être un type, c'est une liste

02:22.250 --> 02:24.610
de données qui, à elle seule, constitue déjà

02:24.610 --> 02:26.730
un type, pourrait-on dire.

02:26.730 --> 02:29.770
De même qu'un objet est un type à part entière, même si nous ne savons

02:29.770 --> 02:32.200
pas encore quelles données y seront placées.

02:32.200 --> 02:34.490
Un tableau est donc un type à part entière.

02:34.490 --> 02:38.230
Mais un tableau stocke bien sûr des données d'un

02:38.230 --> 02:39.860
certain type.

02:39.860 --> 02:42.690
Le type de tableau lui-même ne se soucie pas du

02:42.690 --> 02:44.810
type de données qui y est stocké.

02:44.810 --> 02:48.150
Le type tableau ne se soucie pas de savoir si vous stockez une

02:48.150 --> 02:50.540
liste de chaînes de caractères, de nombres,

02:50.540 --> 02:52.430
d'objets ou de données mixtes.

02:52.430 --> 02:54.500
Le type de tableau n'a pas vraiment d'importance

02:54.500 --> 02:58.640
mais il a besoin d'obtenir au moins quelques informations, même si vous lui

02:58.640 --> 03:01.200
dites que je ne sais pas, en définissant le type

03:01.200 --> 03:02.960
de tableau.

03:02.960 --> 03:05.870
C'est mieux que de ne rien spécifier.

03:05.870 --> 03:08.330
C'est une façon de définir un type de tableau,

03:08.330 --> 03:10.070
le type de données qui y est stocké,

03:10.070 --> 03:11.430
puis des crochets.

03:11.430 --> 03:14.620
L'autre façon, qui créerait exactement le même type,

03:14.620 --> 03:15.830
serait d'utiliser ce

03:15.830 --> 03:17.630
tableau et ces crochets.

03:17.630 --> 03:20.030
Et maintenant, entre ces crochets, vous

03:20.030 --> 03:22.340
spécifiez le type de données qui doit

03:22.340 --> 03:24.140
aller dans le tableau.

03:24.140 --> 03:26.330
Par exemple, une chaîne de caractères,

03:26.330 --> 03:31.330
et ceci ici est 100% identique à la définition de ce type ici.

03:32.030 --> 03:34.950
Bien sûr, ici, vous pouvez également utiliser un type d'union pour dire

03:34.950 --> 03:37.730
que ce tableau stocke des chaînes de caractères ou des nombres ou utiliser

03:37.730 --> 03:40.850
n'importe quel type si vous ne voulez rien dire sur le type ou, comme nous venons

03:40.850 --> 03:42.970
de le faire, une chaîne de caractères.

03:42.970 --> 03:44.330
Il s'agit donc d'un type générique,

03:44.330 --> 03:46.900
un type générique intégré à TypeScript.

03:46.900 --> 03:50.440
Un type qui est connecté à un autre type, où nous voulons

03:50.440 --> 03:53.980
savoir lequel de nos types qui est ainsi à TypeScript

03:53.980 --> 03:56.810
peut nous donner un meilleur support.

03:56.810 --> 03:57.910
Parce qu'ici, par exemple,

03:57.910 --> 04:01.510
si nous savons que ce que nous stockons là sera une chaîne de caractères,

04:01.510 --> 04:04.380
eh bien, nous savons que chaque fois que j'accède à un élément

04:04.380 --> 04:06.143
de ce tableau, je peux faire des trucs

04:07.100 --> 04:09.410
de chaîne de caractères avec lui.

04:09.410 --> 04:12.260
Je peux appeler toutes ces méthodes de chaîne

04:12.260 --> 04:15.280
par exemple et TypeScript ne se plaindra pas car

04:15.280 --> 04:18.220
il sait que ce tableau contient des chaînes.

04:18.220 --> 04:20.410
C'est l'idée des types génériques.

04:20.410 --> 04:23.230
Un certain type, dans ce cas le type tableau, pourrait

04:23.230 --> 04:26.780
simplement mieux fonctionner ou fonctionner tout court si

04:26.780 --> 04:29.040
vous fournissez des informations supplémentaires

04:29.040 --> 04:33.430
sur un type de données qui est fourni dans ce type tableau et bien sûr, le type

04:33.430 --> 04:36.590
tableau n'est qu'un exemple.

04:36.590 --> 04:39.840
Un autre type générique intégré à TypeScript

04:39.840 --> 04:42.130
est le type promesse.

04:42.130 --> 04:45.470
Les promesses sont une fonctionnalité de JavaScript, non ?

04:45.470 --> 04:46.970
Il ne s'agit pas d'une fonctionnalité de TypeScript.

04:46.970 --> 04:49.437
Vous pouvez créer des promesses en JavaScript et au

04:49.437 --> 04:52.000
cas où vous ne seriez pas sûr de ce que sont les promesses,

04:52.000 --> 04:53.870
ci-joint vous trouverez le lien.

04:53.870 --> 04:58.150
Une promesse peut être créée en utilisant new promise.

04:58.150 --> 05:00.640
Encore une fois, il s'agit d'une fonction de construction,

05:00.640 --> 05:03.270
une classe intégrée à JavaScript et la fonction de construction

05:03.270 --> 05:05.870
de la promesse prend un argument qui est lui-même une

05:05.870 --> 05:07.640
fonction qui, à son tour, recevra deux

05:07.640 --> 05:12.580
arguments : une fonction de résolution et une fonction de rejet.

05:12.580 --> 05:15.180
Ils nous seront désormais transmis automatiquement

05:15.180 --> 05:17.790
par JavaScript dans le navigateur.

05:17.790 --> 05:22.400
Et ensuite, dans une promesse, nous pouvons par exemple définir une minuterie et

05:22.400 --> 05:25.640
ensuite, dans la fonction de rappel de cette minuterie, nous

05:25.640 --> 05:28.140
pouvons résoudre la promesse externe.

05:28.140 --> 05:30.140
Donc ici, dans cette fonction de

05:30.140 --> 05:34.823
rappel, nous pourrions appeler la résolution et dire que c'est fait.

05:36.500 --> 05:41.020
Maintenant, lorsque nous le faisons, cette promesse crée un nouvel objet, un objet promesse

05:41.020 --> 05:43.860
qui est stocké dans la constante promesse.

05:43.860 --> 05:47.700
Maintenant, cette constante de promesse a en fait un type spécifique.

05:47.700 --> 05:49.470
Il s'agit d'un type de promesse

05:49.470 --> 05:51.130
et là encore, vous voyez ces

05:51.130 --> 05:56.130
crochets parce que cette promesse finira par se résoudre à quelque chose.

05:56.480 --> 05:58.930
Maintenant, ici, il est dit inconnu parce que TypeScript

05:58.930 --> 06:01.470
n'est pas pleinement en mesure de comprendre que nous

06:01.470 --> 06:03.880
allons en fait résoudre à une chaîne ici.

06:03.880 --> 06:05.870
Mais nous pourrions donc dire qu'il s'agit d'une

06:05.870 --> 06:08.120
promesse, qui donnera finalement une chaîne de caractères

06:08.120 --> 06:11.450
et nous le faisons en utilisant à nouveau notre type générique.

06:11.450 --> 06:14.030
Le type principal est la promesse, mais une promesse,

06:14.030 --> 06:16.120
tout comme un tableau, fonctionne en quelque

06:16.120 --> 06:18.380
sorte avec d'autres types.

06:18.380 --> 06:22.000
Un tableau utilise d'autres types parce qu'il stocke des données, des

06:22.000 --> 06:23.350
données de certains types,

06:23.350 --> 06:25.640
et la promesse fonctionne avec d'autres types

06:25.640 --> 06:29.750
parce qu'elle renvoie finalement des données d'un certain type et dans ce cas,

06:29.750 --> 06:31.140
c'est une promesse qui renvoie

06:31.140 --> 06:32.940
finalement une chaîne.

06:32.940 --> 06:34.470
Encore une fois, en quoi cela est-il utile ?

06:34.470 --> 06:37.550
Pourquoi ces informations supplémentaires sur le type sont-elles utiles ?

06:37.550 --> 06:40.350
Eh bien, si nous avions juste un type de promesse ici et que cela ne

06:40.350 --> 06:41.430
serait pas autorisé, mais

06:41.430 --> 06:44.770
si nous disions promesse de type n'importe quoi, ce qui serait fondamentalement

06:44.770 --> 06:46.870
la même chose que de types ne connaîtrait pas les

06:46.870 --> 06:48.390
types génériques s'il n'aurait aucune

06:48.390 --> 06:51.280
information sur ce que nous obtenons en retour.

06:51.280 --> 06:53.340
Eh bien, sur cette promesse, bien sûr, nous pouvons

06:53.340 --> 06:55.750
les utiliser comme nous pouvons le faire sur toutes les promesses

06:55.750 --> 06:57.770
et finalement nous obtiendrons des données mais

06:57.770 --> 06:59.770
nous ne savons rien de ces données.

06:59.770 --> 07:02.500
Je ne peux pas y appeler une méthode de type chaîne, par exemple.

07:02.500 --> 07:04.850
Eh bien je peux parce que c'est n'importe quoi dans ce

07:04.850 --> 07:07.590
cas mais je n'ai pas de support particulier pour TypeScript.

07:07.590 --> 07:11.313
Je pourrais aussi essayer des trucs dessus, ce qui ne marchera certainement pas.

07:12.170 --> 07:13.800
Par exemple, si nous retournons un nombre

07:13.800 --> 07:15.220
ici, je peux toujours appeler une

07:15.220 --> 07:17.320
méthode de type chaîne de caractères ici, car

07:17.320 --> 07:19.390
TypeScript ne dispose d'aucune information

07:19.390 --> 07:22.640
sur les données que cette promesse va finalement produire.

07:22.640 --> 07:24.070
Maintenant, avec les types génériques,

07:24.070 --> 07:26.280
nous donnons ces informations à TypeScript.

07:26.280 --> 07:28.160
Nous pouvons dire à TypeScript que cette

07:28.160 --> 07:30.240
promesse produira éventuellement une chaîne

07:30.240 --> 07:32.840
de caractères ou dans ce cas, un nombre et alors TypeScript

07:32.840 --> 07:34.940
peut nous avertir ici.

07:34.940 --> 07:37.390
Si j'essaie de sauvegarder ceci, il va nous donner

07:37.390 --> 07:40.870
une erreur parce qu'il sait que cette promesse va finalement produire

07:40.870 --> 07:44.092
un nombre et que vous pouvez appeler split sur cela.

07:44.092 --> 07:48.010
Nous obtenons donc une meilleure sécurité des types avec les types génériques.

07:48.010 --> 07:50.510
Vous êtes donc très flexible quant à ce que vous faites

07:50.510 --> 07:52.720
avec ces informations de type générique.

07:52.720 --> 07:54.830
Un tableau connaît les données qu'il stocke, une

07:54.830 --> 07:57.140
promesse connaît les données qu'elle renvoie.

07:57.140 --> 07:59.840
Si vous construisez vos propres classes ou fonctions génériques, vous

07:59.840 --> 08:02.140
pouvez faire quelque chose de totalement différent.

08:02.140 --> 08:04.570
Mais en fin de compte, les types génériques vous

08:04.570 --> 08:06.970
aident à obtenir des informations de type supplémentaires

08:06.970 --> 08:10.640
si vous avez une classe ou une fonction plus complexe qui fait quelque chose

08:10.640 --> 08:14.240
avec les données entrantes, d'une manière qui ne se soucie pas vraiment

08:14.240 --> 08:16.020
que les données soient d'un type particulier,

08:16.020 --> 08:18.700
mais où vous voulez stocker les informations de type

08:18.700 --> 08:21.500
des données entrantes pour obtenir un meilleur support

08:21.500 --> 08:27.590
TypeScript chaque fois que vous travaillez avec votre type générique.

08:27.590 --> 08:30.450
Donc, chaque fois que vous travaillez avec cette promesse, ou tableau

08:30.450 --> 08:33.270
de données, c'est essentiellement l'idée de génériques.

08:33.270 --> 08:36.300
Donc ça, ici, tout a été construit en générique.

08:36.300 --> 08:37.460
Commentons cela.

08:37.460 --> 08:40.450
Construisons maintenant notre propre mot de type générique.

08:40.450 --> 08:42.653
Utilisons nos propres types génériques.
