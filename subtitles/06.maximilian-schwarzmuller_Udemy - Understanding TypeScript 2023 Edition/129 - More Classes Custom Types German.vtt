WEBVTT

00:02.220 --> 00:05.760
-: Als nächsten Schritt möchte ich diese Typen hier bearbeiten,

00:05.760 --> 00:09.900
den beliebigen Typ, den ich hier für meine zugewiesenen Projekte,

00:09.900 --> 00:11.320
für die Zuhörer hier und

00:11.320 --> 00:14.980
auch für die Projekte im Projektstatus verwende.

00:14.980 --> 00:19.030
Natürlich möchte ich hier nicht mit irgendeinem arbeiten, es wäre

00:19.030 --> 00:20.740
sinnvoller, eine eigene Projektklasse

00:20.740 --> 00:25.660
oder einen Projekttyp zu haben, den wir verwenden können.

00:25.660 --> 00:27.760
Und in der Tat werde ich eine Klasse für

00:29.070 --> 00:29.903
diesen Projekttyp

00:31.390 --> 00:32.450
erstellen, indem

00:32.450 --> 00:34.890
ich einfach die Klasse project verwende,

00:34.890 --> 00:38.740
damit wir eine Möglichkeit haben, Projektobjekte zu erstellen,

00:38.740 --> 00:41.570
die immer die gleiche Struktur haben.

00:41.570 --> 00:44.760
Im Moment mache ich es dort unten mit der wörtlichen Schreibweise.

00:44.760 --> 00:47.920
Der Nachteil dabei ist natürlich, dass wir daran denken müssen, dass es sich

00:47.920 --> 00:50.490
um eine Beschreibung handelt und nicht um einen Desc.

00:50.490 --> 00:52.410
dass wir eine ID benötigen, die eine Zeichenkette

00:52.410 --> 00:53.470
ist, und so weiter.

00:53.470 --> 00:56.440
Hier kann uns also ein benutzerdefinierter Typ helfen, und

00:56.440 --> 00:59.750
ich werde eine Klasse und keine Schnittstelle oder einen benutzerdefinierten

00:59.750 --> 01:02.300
Typ mit dem Schlüsselwort type erstellen, weil ich

01:02.300 --> 01:05.470
in der Lage sein möchte, ihn zu instanziieren.

01:05.470 --> 01:07.960
Wie sollte also eine solche Klasse bzw. ein

01:07.960 --> 01:10.700
solches Projekt aussehen, um genau zu sein?

01:10.700 --> 01:12.320
Nun, ich füge einen Konstruktor

01:12.320 --> 01:17.280
hinzu und verwende dann diese Abkürzung, um dem Konstruktor Argumente oder Parameter

01:17.280 --> 01:19.100
zuzuweisen, die dann automatisch

01:19.100 --> 01:22.310
auch zu Eigenschaften werden, indem ich den Accessor am

01:22.310 --> 01:24.460
Anfang hinzufüge, in diesem Fall Public,

01:24.460 --> 01:25.650
und dann den Namen des

01:25.650 --> 01:29.450
Arguments und der Eigenschaft, und dann den Typ.

01:29.450 --> 01:33.100
Und hier sollte jedes Projekt eine ID haben.

01:33.100 --> 01:34.990
Jedes Projekt sollte einen Titel haben,

01:34.990 --> 01:37.330
der ebenso wie die ID eine Zeichenkette ist.

01:37.330 --> 01:38.690
Es sollte eine Beschreibung

01:38.690 --> 01:39.920
haben, die eine Zeichenkette

01:39.920 --> 01:43.540
ist, es sollte eine Eigenschaft "Personen" haben, die eine Zahl ist, die

01:43.540 --> 01:44.420
die Anzahl der Personen

01:44.420 --> 01:47.440
angibt, die einem Projekt zugeordnet sind.

01:47.440 --> 01:49.580
Und was ich noch hinzufügen möchte,

01:49.580 --> 01:51.640
was wir bisher noch nicht hatten,

01:51.640 --> 01:53.580
ist ein Projektstatus.

01:53.580 --> 01:56.920
Denn wenn wir jetzt ein Projekt hinzufügen, erscheint

01:56.920 --> 01:58.680
es in beiden Listen.

01:58.680 --> 02:01.530
Jetzt möchte ich einem Projekt einen Status hinzufügen,

02:01.530 --> 02:03.630
der natürlich geändert werden kann,

02:03.630 --> 02:07.470
so dass wir in einem ersten Feld nach aktiven Projekten und in einem zweiten

02:07.470 --> 02:11.470
Feld nach abgeschlossenen Projekten filtern können.

02:11.470 --> 02:15.000
Also nur die richtigen Projekte an jeder Box zeigen.

02:15.000 --> 02:19.890
Deshalb füge ich hier eine weitere öffentliche Eigenschaft hinzu: Status.

02:19.890 --> 02:21.280
Und nun stellt sich natürlich

02:21.280 --> 02:23.985
die Frage, welchen Typ dieser Status haben soll.

02:23.985 --> 02:28.240
Jetzt könnten wir einen Union-Typ mit zwei literalen Typen Active und Finished

02:28.240 --> 02:31.170
verwenden, was wir zuvor bereits verwendet haben.

02:31.170 --> 02:33.280
Aber hier möchte ich immer einen anderen

02:33.280 --> 02:36.890
Typ einführen oder wieder einführen, den Sie kennen gelernt haben,

02:36.890 --> 02:38.320
und das ist die Enum.

02:38.320 --> 02:41.890
Die Enum ist hier perfekt, weil wir genau zwei Optionen haben.

02:41.890 --> 02:44.950
Und hier im Kontext dieses Projektobjekts brauchen wir

02:44.950 --> 02:48.740
auch keinen für Menschen sinnvollen Text, den wir als Wert speichern,

02:48.740 --> 02:50.270
sondern wir brauchen wirklich

02:50.270 --> 02:52.341
nur einen Bezeichner.

02:52.341 --> 02:56.140
Hier werde ich also einen neuen Enum-Projektstatus hinzufügen.

02:56.140 --> 02:59.810
Und ich möchte dort zwei Werte haben:

02:59.810 --> 03:02.890
Aktiv und Beendet.

03:02.890 --> 03:05.440
Und dann wird dieser Status vom Typ

03:05.440 --> 03:08.610
Projektstatus sein, genau wie dieser.

03:08.610 --> 03:11.003
Dies ist jetzt meine Projektklasse.

03:11.900 --> 03:14.220
Damit können wir sagen, dass dies eine Reihe

03:14.220 --> 03:17.820
von Projekten ist, die diese Projektklasse verwenden.

03:17.820 --> 03:20.351
Und wenn wir hier ein Projekt erstellen,

03:20.351 --> 03:26.620
tun wir das natürlich mit new project project, nicht mit project state.

03:26.620 --> 03:30.310
Und hier an das Projekt leiten wir eine ID weiter, in

03:30.310 --> 03:32.200
diesem Fall, wie bereits erwähnt,

03:32.200 --> 03:36.720
eine Zufallszahl, die wir in einen String umwandeln, dann den

03:36.720 --> 03:38.210
Titel, dann die Beschreibung,

03:38.210 --> 03:41.930
dann die NUM of People hier, und dann natürlich auch

03:41.930 --> 03:45.080
den Status, richtig.

03:45.080 --> 03:49.950
Und eine Sache, die ich hier in dieser Anwendung in diesem Demoprojekt

03:49.950 --> 03:53.180
haben möchte, ist, dass jedes neue Projekt standardmäßig

03:53.180 --> 03:54.830
aktiv ist.

03:54.830 --> 03:57.040
Wenn wir hier also ein neues Projekt erstellen, weisen

03:57.040 --> 04:00.064
wir den Projektstatus zu. aktiv hier als Wert für

04:00.064 --> 04:02.990
den Status mit, den wir projektieren müssen,

04:02.990 --> 04:05.230
den wir hinzufügen.

04:05.230 --> 04:06.720
Und nun gibt es noch eine Stelle, an

04:06.720 --> 04:08.450
der wir die Projektklasse benötigen.

04:08.450 --> 04:11.220
Und zwar haben wir hier in der Klasse Projektliste

04:11.220 --> 04:13.474
die Eigenschaft Projekte zuweisen.

04:13.474 --> 04:17.240
Und das sollte natürlich immer eine Reihe von Projekten sein.

04:17.240 --> 04:19.530
Damit verwenden wir jetzt die Beta-Typisierung.

04:19.530 --> 04:22.810
Und ein Vorteil ist, dass wir hier bei den Rendering-Projekten jetzt

04:22.810 --> 04:26.360
zum Beispiel auch eine automatische Vervollständigung bekommen.

04:26.360 --> 04:29.020
Und wir würden auch einen Fehler bekommen, einen Kompilierungsfehler,

04:29.020 --> 04:31.300
wenn wir versuchen, das zu speichern, weil TypeScript

04:31.300 --> 04:33.100
jetzt versteht, mit welchen Typen wir

04:33.100 --> 04:35.360
hier arbeiten.

04:35.360 --> 04:39.040
Das ist also das Projekt Klasse und wie wir es nutzen können.

04:39.040 --> 04:41.760
Die Projektklasse ist jedoch nicht die einzige

04:41.760 --> 04:44.230
Klasse, es gibt auch den Listener.

04:44.230 --> 04:48.630
Und dafür werde ich einen neuen benutzerdefinierten Typ Listener hinzufügen.

04:48.630 --> 04:50.390
Der Name bleibt natürlich Ihnen überlassen.

04:50.390 --> 04:54.280
Und ich verwende hier einfach einen Typ, weil ich im Grunde

04:54.280 --> 04:58.260
einen Funktionstyp mit einem Wort kodieren möchte.

04:58.260 --> 04:59.640
Was wollen wir damit sagen?

04:59.640 --> 05:03.270
Natürlich ist ein Hörer hier in unserer Anwendung

05:03.270 --> 05:05.370
nur eine Funktion, richtig?

05:05.370 --> 05:07.160
Was wir im Listener-Array gespeichert

05:07.160 --> 05:08.960
haben, ist nur eine Reihe von Funktionen

05:08.960 --> 05:11.060
Add Listener schiebt eine neue Funktion, und

05:11.060 --> 05:12.200
wenn sich etwas ändert,

05:12.200 --> 05:14.190
führen wir diese Funktion aus.

05:14.190 --> 05:17.610
Hier ist ein Hörer also eigentlich nur eine Funktion.

05:17.610 --> 05:22.610
Aber es ist eine Funktion, die unsere Elemente empfängt, bestimmte

05:22.870 --> 05:23.703
Elemente in

05:23.703 --> 05:27.113
unserem Fall und eine Reihe von Projekten.

05:28.500 --> 05:30.410
Und das macht dann etwas damit.

05:30.410 --> 05:32.480
Um genau zu sein, haben wir hier natürlich keine

05:32.480 --> 05:33.550
geschweiften Klammern,

05:33.550 --> 05:35.200
um einen Funktionstyp zu definieren,

05:35.200 --> 05:37.440
sondern, wie Sie gelernt haben, den Rückgabetyp,

05:37.440 --> 05:38.780
und der wird breit sein, was bedeutet,

05:38.780 --> 05:41.880
dass wir uns nicht um einen Wert kümmern, den die Listener-Funktion

05:41.880 --> 05:44.090
zurückgeben könnte.

05:44.090 --> 05:46.140
An dem Ort, an dem wir mit Hörern arbeiten.

05:46.140 --> 05:47.940
Wir brauchen keinen Rückgabetyp.

05:47.940 --> 05:49.810
Wir wollen nur sicherstellen, dass derjenige,

05:49.810 --> 05:51.880
der einen solchen Hörer übergibt, erwartet,

05:51.880 --> 05:55.870
dass er einige Elemente erhält, wenn der Hörer ausgelöst wird.

05:55.870 --> 05:58.530
Damit können wir sagen, dass Listeners

05:58.530 --> 06:02.760
letztlich ein Array von Listener-Well-Funktionen ist.

06:02.760 --> 06:05.670
Und hier, wenn ich die Hörerfunktion schiebe, muss ich

06:05.670 --> 06:08.480
klarstellen, dass es nicht irgendeine Funktion ist,

06:08.480 --> 06:10.630
sondern dass es ein Typ von Hörer ist, dann

06:10.630 --> 06:12.350
funktioniert alles.

06:12.350 --> 06:14.530
An der Stelle, an der wir Add Listener verwenden,

06:14.530 --> 06:16.180
also dort unten, können wir jetzt

06:16.180 --> 06:17.650
natürlich auch unsere Eingabe

06:17.650 --> 06:19.869
verbessern und deutlich machen, dass wir hier

06:19.869 --> 06:23.440
tatsächlich eine Reihe von Projekten bekommen.

06:23.440 --> 06:27.220
Damit haben wir also unseren Hörer eingerichtet,

06:27.220 --> 06:32.210
den Projekttyp hinzugefügt, und das ändert hier nichts.

06:32.210 --> 06:35.120
Wenn wir jetzt etwas hinzufügen, das funktioniert, und wenn

06:35.120 --> 06:36.900
ich ein zweites Element hinzufüge,

06:36.900 --> 06:38.880
wird das neben dem ersten Element, das wieder

06:38.880 --> 06:40.530
hinzugefügt wird, auch noch hinzugefügt,

06:40.530 --> 06:43.230
und wir machen überhaupt keine Filterung in irgendeiner

06:43.230 --> 06:45.260
der Listen.

06:45.260 --> 06:48.600
Bevor wir also mit der Arbeit an unseren Teilen fortfahren,

06:48.600 --> 06:50.570
sollten wir sicherstellen, dass wir

06:50.570 --> 06:53.990
hier keine Duplizierung innerhalb einer einzigen Liste haben,

06:53.990 --> 06:57.640
und auch nicht die Duplizierung über beide Boxen hier, sondern

06:57.640 --> 06:58.610
dass stattdessen

06:58.610 --> 07:01.030
nur aktive Projekte hier auftauchen und nur

07:01.030 --> 07:02.940
abgeschlossene Projekte und daher

07:02.940 --> 07:08.010
zunächst keine Projekte hier in abgeschlossene Projekte auftauchen.

07:08.010 --> 07:09.623
Bringen wir das also in Ordnung.
