WEBVTT

00:02.230 --> 00:04.860
ผู้สอน: เกี่ยวข้องอย่างหลวมๆ กับแนวคิดของ

00:04.860 --> 00:09.760
Tuple คือแนวคิดของการมีตัวระบุเฉพาะสองสามตัว ค่าคงที่ส่วนกลางที่คุณอาจใช้งานในแอปของคุณ

00:09.760 --> 00:15.020
ซึ่งคุณต้องการแสดงเป็นตัวเลข แต่คุณต้องการกำหนดให้มนุษย์สามารถอ่านได้

00:15.020 --> 00:18.530
ฉลาก.

00:18.530 --> 00:20.500
และสำหรับสิ่งนั้น คุณมีประเภท Enum

00:20.500 --> 00:23.800
อีกครั้งซึ่งมีอยู่ในภาษาโปรแกรมระดับสูงบางภาษา

00:23.800 --> 00:25.780
JavaScript ไม่รู้จักแม้ว่า

00:25.780 --> 00:26.613
ดูเหมือนว่านี้

00:26.613 --> 00:28.110
นี่คือวิธีที่คุณสร้าง enum

00:28.110 --> 00:30.540
คุณใช้คีย์เวิร์ด enum ซึ่งมีเฉพาะในโลกของ

00:30.540 --> 00:36.810
TypeScript ไม่ใช่ใน JavaScript หลังจากที่คุณมีวงเล็บปีกกาและตัวระบุของคุณแล้ว

00:36.810 --> 00:39.141
และประเภทนี้ซึ่งเพิ่มโดย TypeScript

00:39.141 --> 00:42.030
จะให้รายการที่แจกแจงแก่คุณ

00:42.030 --> 00:45.070
ดังนั้นป้ายกำกับเหล่านี้จึงอยู่ในตอนท้าย เพียงแค่แปลเป็นตัวเลขที่เริ่มต้นที่ศูนย์

00:45.070 --> 00:50.133
ซึ่งคุณจะมีป้ายกำกับที่มนุษย์อ่านได้ซึ่งทำงานในโค้ดของคุณ

00:51.310 --> 00:55.620
เพื่อแสดงตัวอย่างให้คุณกลับมาที่บุคคลของเราพร้อมบทบาทของมัน

00:55.620 --> 00:59.710
ฉันจะคัดลอกรหัสนั้นแล้วแสดงความคิดเห็นเพราะฉันจะเปลี่ยนแปลงเล็กน้อย

00:59.710 --> 01:01.600
จากนั้นที่นี่ ฉันจะเลิกกำหนดประเภทที่ชัดเจน

01:01.600 --> 01:07.150
และกลับไปใช้การอนุมานแทน เพราะตอนนี้ฉันจะเปลี่ยนบทบาท

01:07.150 --> 01:12.350
และตอนนี้ สมมติว่าเราต้องการมีผู้ดูแลระบบ ผู้เขียน และอาจเป็นผู้ใช้แบบอ่านอย่างเดียว

01:12.350 --> 01:14.750
ผู้ดูแลระบบควรมีรหัสเป็นศูนย์

01:14.750 --> 01:18.660
ผู้ใช้แบบอ่านอย่างเดียวมีหนึ่งคน ผู้เขียนมีสองคน

01:18.660 --> 01:22.550
แน่นอน เราสามารถเก็บมันแบบนี้กับตัวเลขเหล่านี้ได้

01:22.550 --> 01:26.670
ข้อเสียประการหนึ่งคือเราสามารถเพิ่มจำนวนที่เราอาจไม่มีบทบาทได้เสมอ

01:26.670 --> 01:30.320
และหากเราเขียนโค้ดในภายหลัง ให้ลองแยกบทบาทออกและใช้เครื่องหมาย

01:30.320 --> 01:33.392
if อาจทำให้เกิดข้อผิดพลาด

01:33.392 --> 01:39.690
นอกจากนี้ ในฐานะนักพัฒนา เราเข้าใจได้ยากว่าผู้ใช้รายนี้มีบทบาทใด

01:39.690 --> 01:41.310
เป็นผู้เขียน?

01:41.310 --> 01:43.020
หรือเป็นการอ่านของผู้ใช้?

01:43.020 --> 01:46.140
คุณอาจลืมสิ่งนี้หลังจากหยุดชั่วคราวนานขึ้น

01:46.140 --> 01:48.810
เมื่อทำงานในทีมที่ใหญ่ขึ้น และอื่นๆ

01:48.810 --> 01:54.310
ในฐานะนักพัฒนา คุณอาจต้องการตัวระบุที่มนุษย์สามารถอ่านได้

01:54.310 --> 01:58.630
เช่น ADMIN และ READ ONLY USER อะไรทำนองนั้น

01:58.630 --> 02:00.240
แน่นอนว่า เราสามารถใช้มันได้

02:00.240 --> 02:02.880
เราสามารถทำงานกับค่าสตริงดังกล่าวได้

02:02.880 --> 02:06.100
ปัญหาคือ ถ้าเราต้องการการตรวจสอบ if ในภายหลัง

02:06.100 --> 02:11.100
เราตรวจสอบว่าบทบาทของบุคคลเท่ากับ READ_ONLY_USER หรือไม่

02:12.260 --> 02:13.500
หรือเป็นเพียงคำเดียว?

02:13.500 --> 02:15.380
มีขีดล่างหรือไม่?

02:15.380 --> 02:19.020
คุณเห็นแล้วเราต้องจำว่าเราเขียนสตริงเหล่านี้อย่างไร

02:19.020 --> 02:20.970
เรามีข้อความแบบใดอยู่ในนั้น

02:20.970 --> 02:27.430
เนื่องจากสตริงที่มีเครื่องหมายขีดคั่นระหว่างคำนั้นแน่นอนว่าไม่เหมือนกับสตริงนี้

02:27.430 --> 02:29.973
ตรงนี้ เราจะไม่ทำให้มันอยู่ในนั้น

02:31.150 --> 02:36.120
เป็นแบบอ่านอย่างเดียวถ้าคุณพยายามคอมไพล์และพิมพ์ เพราะ

02:36.120 --> 02:39.170
เช็คไม่ได้ให้ผลจริง

02:39.170 --> 02:43.930
เราไม่มีบทบาทนั้นในบุคคล ดังนั้นเราจึงไม่ได้รับผลลัพธ์ที่นี่ในคอนโซล

02:43.930 --> 02:47.290
ดังนั้นตัวระบุสตริงจึงมีข้อเสียเช่นกัน

02:47.290 --> 02:50.340
ตอนนี้สำหรับสถานการณ์ดังกล่าว เป็นเรื่องปกติใน JavaScript

02:50.340 --> 02:52.340
ที่จะกำหนดค่าคงที่ส่วนกลาง

02:52.340 --> 02:55.580
ตัวอย่างเช่น ผู้ดูแลระบบ ซึ่งจะเก็บค่าบางอย่าง

02:55.580 --> 03:00.060
เช่น ตัวเลขหรือสตริง ทั้งสองอย่างเท่าที่จะเป็นไปได้

03:00.060 --> 03:04.370
แน่นอนว่าตัวเลขสามารถช่วยให้เราประหยัดรหัสและบิตพิเศษในหน่วยความจำได้

03:04.370 --> 03:09.370
และที่นั่นเราอาจมี ADMIN, READ_ONLY และ AUTHOR แบบนี้

03:09.390 --> 03:13.750
และด้านล่าง เราก็ต้องใช้บทบาทนั้น

03:13.750 --> 03:17.343
ตอนนี้ข้อดีของสิ่งนั้นคือเราสามารถใช้สิ่งนี้ได้ทุกที่ในโค้ดของเรา

03:18.230 --> 03:23.680
และด้วยเหตุนี้ ตัวอย่างเช่น ถ้าฉันเรียกใช้โค้ดนี้ ถ้าฉันคอมไพล์แล้วปล่อยให้โหลดซ้ำ

03:25.260 --> 03:28.570
เราจะเห็นเป็นผู้ดูแลระบบที่นี่ ดังนั้นจึงใช้ได้

03:28.570 --> 03:31.520
และนี่คือรูปแบบทั่วไปใน JavaScript

03:31.520 --> 03:34.190
ข้อเสียคือ ตอนนี้อีกครั้ง บทบาทถูกอนุมานว่าเป็นเพียงตัวเลข

03:34.190 --> 03:39.630
ดังนั้นเราจึงสามารถเก็บตัวเลขใดๆ ไว้ในนั้น แม้แต่ตัวเลขที่เราไม่สนับสนุน

03:39.630 --> 03:42.450
นอกจากนี้ เราต้องกำหนดค่าคงที่เหล่านี้ทั้งหมด

03:42.450 --> 03:44.060
เราต้องจัดการมัน

03:44.060 --> 03:45.920
นี่คือที่ที่ enum สามารถช่วยเราได้

03:45.920 --> 03:48.730
นี่เป็นเรื่องปกติ แต่ enum ทำให้ง่ายขึ้น

03:48.730 --> 03:50.970
เราสร้าง enum ด้วยคีย์เวิร์ด enum

03:50.970 --> 03:55.550
เราสามารถตั้งชื่อว่า Role หลักการคือการเริ่มต้นด้วยตัวพิมพ์ใหญ่เนื่องจาก

03:55.550 --> 03:58.620
enum เป็นประเภทที่กำหนดเอง

03:58.620 --> 04:01.760
นี่เป็นประเภทที่คุณกำหนดเองประเภทแรก เราจะเขียนอีกมากมายในหลักสูตรนี้

04:01.760 --> 04:03.860
นี่เป็นประเภทแรก

04:03.860 --> 04:06.560
จากนั้นหลังจากชื่อประเภทที่คุณต้องการกำหนดให้กับ

04:06.560 --> 04:09.520
enum นี้ คุณเพิ่มวงเล็บปีกกา แบบนั้น ไม่มีทวิภาค

04:09.520 --> 04:14.040
ไม่มีเครื่องหมายเท่ากับ แค่วงเล็บปีกกาหลังชื่อ

04:14.040 --> 04:15.800
จากนั้นเครื่องหมายอัฒภาค

04:15.800 --> 04:19.433
และในตอนนี้ คุณสามารถกำหนดค่าของคุณ เช่น

04:20.650 --> 04:24.300
ผู้ดูแลระบบ อ่านอย่างเดียว และผู้เขียน

04:24.300 --> 04:28.180
และเบื้องหลังนี่ตรงนี้ได้รับเลขศูนย์

04:28.180 --> 04:31.780
นี่ตรงนี้ที่หนึ่ง นี่นี่หมายเลขสอง

04:31.780 --> 04:34.650
จากนั้นที่นี่ คุณสามารถเข้าถึงบทบาท ADMIN เช่นเดียวกับวัตถุ

04:34.650 --> 04:37.840
คุณสามารถเข้าถึงตัวระบุของคุณ

04:37.840 --> 04:40.380
และคุณสามารถใช้ที่อื่นในโค้ดของคุณได้เช่นกัน

04:40.380 --> 04:43.890
ที่นี่เราสามารถตรวจสอบได้ว่าบทบาทนั้นเป็น AUTHOR หรือไม่ จากนั้นพิมพ์ผู้เขียน

04:43.890 --> 04:46.710
และแน่นอนว่า เราไม่ควรมองว่าถ้าฉันเรียกใช้ตอนนี้

04:46.710 --> 04:50.630
เพราะเรากำหนดบทบาทเป็น ADMIN ที่นี่ .

04:50.630 --> 04:53.333
แต่ประเด็นสำคัญคือเราทำทั้งหมดนี้ด้วยความช่วยเหลือของ

04:53.333 --> 04:57.490
enum ซึ่งกำหนดป้ายกำกับให้กับตัวเลข

04:57.490 --> 04:59.210
ถ้าเราดูสิ่งนั้นใน JavaScript

04:59.210 --> 05:02.830
ในโค้ดที่คอมไพล์แล้ว เราจะเห็นว่านี่คือวิธีสร้างใหม่

05:02.830 --> 05:05.080
สุดท้ายก็สร้างใหม่ด้วย if here

05:05.080 --> 05:07.940
ดังนั้นฟังก์ชันที่ดำเนินการเอง

05:07.940 --> 05:11.770
และบทบาทที่นี่ได้รับการจัดการเป็นวัตถุในตอนท้าย ซึ่งมีคุณสมบัติ

05:11.770 --> 05:14.550
admin คุณสมบัติอ่านอย่างเดียว และคุณสมบัติ

05:14.550 --> 05:17.330
AUTHOR ซึ่งเราจะเก็บค่าตัวเลขไว้ที่นี่

05:17.330 --> 05:19.970
คุณสามารถพูดได้

05:19.970 --> 05:21.960
ดังนั้นมันจึงซับซ้อนกว่านั้นเล็กน้อย

05:21.960 --> 05:24.210
แต่นั่นคือสิ่งที่ TypeScript ทำที่นี่เพื่อจำลองโครงสร้าง

05:24.210 --> 05:28.560
enum นี้ในโค้ด JavaScript เมื่อคอมไพล์โค้ด

05:28.560 --> 05:32.680
ที่นี่ในฐานะนักพัฒนา เรามีตัวเลขที่สร้างขึ้นอย่างสะดวกเหล่านี้

05:32.680 --> 05:34.290
หากคุณวางเมาส์เหนือตัวเลขเหล่านี้

05:34.290 --> 05:39.883
คุณจะเห็นหมายเลขที่เราจะจัดเก็บไว้ที่นั่น และคุณสามารถใช้ตัวเลขเหล่านี้ในลักษณะที่มนุษย์สามารถอ่านได้

05:40.750 --> 05:44.790
ตอนนี้สำหรับ enums คุณจะไม่ถูกจำกัดการทำงานตามค่าเริ่มต้น

05:44.790 --> 05:47.470
สมมติว่าด้วยเหตุผลบางอย่าง คุณไม่ต้องการเริ่มต้นด้วยศูนย์เป็นตัวเลขเริ่มต้น

05:47.470 --> 06:04.580
จากนั้นคุณสามารถเพิ่มเครื่องหมายเท่ากับที่นี่หลังจากตัวระบุของคุณ และป้อนหมายเลขอื่น ๆ และตอนนี้ผู้ดูแลระบบจะได้รับมอบหมายให้เป็นหมายเลขห้าและตัวระบุอื่น ๆ ตามหลัง ตัวระบุที่คุณกำหนดค่า เลือกตามนั้น และเพิ่มค่าเริ่มต้นนี้

06:04.580 --> 06:08.140
ตอนนี้เรามี หก เจ็ด แทนที่จะเป็นศูนย์ หนึ่ง สอง

06:08.140 --> 06:10.642
แน่นอน คุณยังสามารถกำหนดค่าของคุณเองให้กับตัวระบุเหล่านี้ทั้งหมดได้

06:10.642 --> 06:14.820
หากคุณต้องการตัวเลขของคุณเอง

06:14.820 --> 06:17.070
คุณไม่ได้จำกัดแค่ตัวเลข คุณยังสามารถใส่ข้อความที่นี่

06:17.070 --> 06:19.390
หรือแม้แต่ผสมมันเหมือนที่ฉันทำที่นี่

06:19.390 --> 06:24.900
อะไรก็ได้ แต่บ่อยครั้งค่าเริ่มต้นของการเพิ่มจำนวนที่เริ่มต้นที่ศูนย์เป็นสิ่งที่คุณต้องการ

06:24.900 --> 06:31.530
แต่ ถ้าคุณต้องการลักษณะการทำงานที่แตกต่างออกไป ถ้าคุณต้องการใช้สตริงในนี้ แล้วก็ตัวเลขตรงนี้ และตรงนี้เป็นตัวเลขด้วย

06:31.530 --> 06:48.270
หรืออาจจะเป็นสตริงตัวเลข คุณก็สามารถทำได้อย่างแน่นอน ข้อดีคือ คุณกำหนดมันขึ้นมา ที่นั่น และหลังจากนั้น คุณมักจะอ้างถึงประเภทบทบาทของคุณกับประเภทแบบกำหนดเองที่คุณสร้างขึ้น กับ enum แบบกำหนดเองที่คุณสร้างขึ้น

06:48.270 --> 06:50.320
และคุณใช้สิ่งนั้นในการตรวจสอบและการกำหนดประเภทของคุณ

06:50.320 --> 06:52.970
และคุณก็สบายดี

06:52.970 --> 07:03.173
นั่นคือพลังของ enum และมันเป็นโครงสร้างที่ยอดเยี่ยมเมื่อใดก็ตามที่คุณต้องการตัวระบุที่มนุษย์สามารถอ่านได้และมีค่าที่แมปอยู่เบื้องหลัง
