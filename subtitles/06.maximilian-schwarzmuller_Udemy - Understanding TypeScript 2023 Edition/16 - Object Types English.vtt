WEBVTT

1
00:00:02.280 --> 00:00:03.780
<v Instructor>Let's dig deeper into</v>

2
00:00:03.780 --> 00:00:06.450
the core types TypeScript supports.

3
00:00:06.450 --> 00:00:09.800
The next type that's interesting is the object type.

4
00:00:09.800 --> 00:00:13.100
Now, you know objects in JavaScript, they look like this.

5
00:00:13.100 --> 00:00:14.690
You have curly braces and then you have

6
00:00:14.690 --> 00:00:16.350
key value pairs in there

7
00:00:16.350 --> 00:00:20.460
and such values would also be treated as object types

8
00:00:20.460 --> 00:00:22.250
in TypeScript, so any JavaScript object

9
00:00:22.250 --> 00:00:23.620
is of type object.

10
00:00:23.620 --> 00:00:28.410
Though I will already say there are more specific versions

11
00:00:28.410 --> 00:00:30.030
of objects in TypeScript

12
00:00:30.030 --> 00:00:32.514
so that you can say this is not just any object,

13
00:00:32.514 --> 00:00:35.108
this is a object which has to has these properties

14
00:00:35.108 --> 00:00:37.260
or which has to be based on

15
00:00:37.260 --> 00:00:39.490
this or that constructor function.

16
00:00:39.490 --> 00:00:41.322
But we'll get there step by step.

17
00:00:41.322 --> 00:00:45.110
To dive into objects, I'll first of all rename app.ts here

18
00:00:45.110 --> 00:00:49.770
and I'll rename this to basics.ts here.

19
00:00:49.770 --> 00:00:52.058
And add a new app.ts file,

20
00:00:52.058 --> 00:00:55.400
which will then override the old app.js file

21
00:00:55.400 --> 00:00:58.600
once we compile it, where we can now dive into objects.

22
00:00:58.600 --> 00:01:01.110
And let's start by creating a basic object here,

23
00:01:01.110 --> 00:01:03.902
let's say a person with curly braces here.

24
00:01:03.902 --> 00:01:05.870
And we give this a name.

25
00:01:05.870 --> 00:01:08.230
Here I'll go with Maximilian because that is my name

26
00:01:08.230 --> 00:01:10.700
and a age of 30.

27
00:01:10.700 --> 00:01:14.930
Now, of course we can console.log person here

28
00:01:14.930 --> 00:01:18.375
and if we do so, and we compile this

29
00:01:18.375 --> 00:01:23.010
unsurprisingly, we should see that object being printed here

30
00:01:23.010 --> 00:01:24.536
in the console.

31
00:01:24.536 --> 00:01:27.284
Now, what we also can do in JavaScript

32
00:01:27.284 --> 00:01:31.690
is we can try to access, let's say, nickname,

33
00:01:31.690 --> 00:01:33.970
a property which does not exist here.

34
00:01:33.970 --> 00:01:37.320
Now you immediately see that TypeScript is not too happy

35
00:01:37.320 --> 00:01:39.820
about that, and hence my IDE tells me.

36
00:01:39.820 --> 00:01:42.302
It tells me that property nickname does not exist

37
00:01:42.302 --> 00:01:44.050
on that type.

38
00:01:44.050 --> 00:01:47.642
So if we save that and I try to compile that,

39
00:01:47.642 --> 00:01:49.907
we indeed get that same error down there.

40
00:01:49.907 --> 00:01:52.210
The TypeScript compiler does not like this

41
00:01:52.210 --> 00:01:54.401
and it tells me that we have no nickname property

42
00:01:54.401 --> 00:01:56.430
on this object.

43
00:01:56.430 --> 00:01:59.813
It finds out that we don't have this nickname property

44
00:01:59.813 --> 00:02:02.936
because if we hover over person it inferred,

45
00:02:02.936 --> 00:02:05.710
we can see there is a colon after person,

46
00:02:05.710 --> 00:02:07.970
so after the variable or constant name.

47
00:02:07.970 --> 00:02:11.030
It inferred that this is the type of data

48
00:02:11.030 --> 00:02:12.110
which is stored in there.

49
00:02:12.110 --> 00:02:14.181
Now that's not just object, as you can tell.

50
00:02:14.181 --> 00:02:16.349
That is a concrete object.

51
00:02:16.349 --> 00:02:18.920
It's a object with a name key,

52
00:02:18.920 --> 00:02:21.430
where then the type, in turn, has to be a string.

53
00:02:21.430 --> 00:02:24.700
And the age key, where the type has to be number.

54
00:02:24.700 --> 00:02:27.116
And actually, this can be confusing here.

55
00:02:27.116 --> 00:02:31.100
This, here, obviously looks like a JavaScript object.

56
00:02:31.100 --> 00:02:33.980
Curly braces, key value pairs.

57
00:02:33.980 --> 00:02:36.020
Well, the first important thing to see here

58
00:02:36.020 --> 00:02:38.520
is that we have a semicolon here after each line.

59
00:02:38.520 --> 00:02:40.580
We don't have that in a JavaScript object.

60
00:02:40.580 --> 00:02:41.750
We have a comma here.

61
00:02:41.750 --> 00:02:44.160
And indeed, this is not a JavaScript object here

62
00:02:44.160 --> 00:02:45.940
which is created somewhere.

63
00:02:45.940 --> 00:02:50.600
This is the object type inferred by TypeScript

64
00:02:50.600 --> 00:02:53.914
and object types are written almost like objects,

65
00:02:53.914 --> 00:02:57.106
but of course we don't have key value pairs there,

66
00:02:57.106 --> 00:02:59.239
but key type pairs.

67
00:02:59.239 --> 00:03:02.840
Object types are there to describe, well,

68
00:03:02.840 --> 00:03:06.064
the type of object that is getting used somewhere.

69
00:03:06.064 --> 00:03:07.653
We could be more generic.

70
00:03:07.653 --> 00:03:10.420
I could explicitly assign a type here

71
00:03:10.420 --> 00:03:13.640
to the constant of object.

72
00:03:13.640 --> 00:03:16.100
Object is one of the built-in types,

73
00:03:16.100 --> 00:03:17.460
just like number and string,

74
00:03:17.460 --> 00:03:21.030
and now if I hover over this we see persons of type object

75
00:03:21.030 --> 00:03:24.000
and now TypeScript really only cares about the fact

76
00:03:24.000 --> 00:03:26.430
that this is a object type.

77
00:03:26.430 --> 00:03:28.423
Now, still, is we compile this

78
00:03:28.423 --> 00:03:32.808
we get that error though, because TypeScript still analyzes

79
00:03:32.808 --> 00:03:35.490
our code and sees that we try to access something

80
00:03:35.490 --> 00:03:36.666
which doesn't exist there,

81
00:03:36.666 --> 00:03:39.770
but it's important to understand that it all starts

82
00:03:39.770 --> 00:03:42.140
with this most generic object type.

83
00:03:42.140 --> 00:03:44.660
But often you want to be more specific than that.

84
00:03:44.660 --> 00:03:47.623
You don't just want to work with that generic object type.

85
00:03:47.623 --> 00:03:50.284
You really want to get the full support.

86
00:03:50.284 --> 00:03:53.550
For example, right now, if I add a dot here

87
00:03:53.550 --> 00:03:55.570
and I have a look at my auto-completion,

88
00:03:55.570 --> 00:03:58.080
I get no help there at all by my IDE.

89
00:03:58.080 --> 00:04:00.303
Reason for that is that all we tell the IDE

90
00:04:00.303 --> 00:04:04.230
is that we have a value here, in person,

91
00:04:04.230 --> 00:04:05.860
which is of type object.

92
00:04:05.860 --> 00:04:08.300
Indeed now we actually also get an error

93
00:04:08.300 --> 00:04:10.210
if I try to access name.

94
00:04:10.210 --> 00:04:12.270
Name exists here, right?

95
00:04:12.270 --> 00:04:14.120
But what we tell TypeScript here

96
00:04:14.120 --> 00:04:16.601
is that we just have an object where we don't give

97
00:04:16.601 --> 00:04:18.889
any of our information to TypeScript.

98
00:04:18.889 --> 00:04:21.739
So actually, TypeScript doesn't support any type

99
00:04:21.739 --> 00:04:24.750
of property because we don't tell it anything

100
00:04:24.750 --> 00:04:26.210
about the object.

101
00:04:26.210 --> 00:04:28.050
So we should be more specific.

102
00:04:28.050 --> 00:04:32.000
And we are more specific by setting a specific object type.

103
00:04:32.000 --> 00:04:34.795
The thing which TypeScript also inferred automatically.

104
00:04:34.795 --> 00:04:38.548
We do this by adding curly braces here

105
00:04:38.548 --> 00:04:43.370
after the colon, after our const or variable name.

106
00:04:43.370 --> 00:04:46.213
So this here does not create a new JavaScript object.

107
00:04:46.213 --> 00:04:48.460
This will actually be stripped out

108
00:04:48.460 --> 00:04:50.310
of the compiled JavaScript code.

109
00:04:50.310 --> 00:04:52.643
Instead this is just TypeScript's notation

110
00:04:52.643 --> 00:04:55.855
of a specialized object type, so to say.

111
00:04:55.855 --> 00:04:59.422
So of a object type where we provide some information

112
00:04:59.422 --> 00:05:01.434
about the structure of the object.

113
00:05:01.434 --> 00:05:04.520
Now, by assigning just an empty pair of curly braces

114
00:05:04.520 --> 00:05:07.440
as a type, we essentially do the same as with object.

115
00:05:07.440 --> 00:05:09.765
We tell TypeScript that this is some object.

116
00:05:09.765 --> 00:05:12.740
Now we can be more specific though.

117
00:05:12.740 --> 00:05:16.550
We can add key value entries here,

118
00:05:16.550 --> 00:05:19.694
however not key value, but key type instead.

119
00:05:19.694 --> 00:05:22.800
So here we could say the object which should be stored

120
00:05:22.800 --> 00:05:25.091
in person should have a name property

121
00:05:25.091 --> 00:05:28.197
and the value of that name property

122
00:05:28.197 --> 00:05:31.140
should be of type string.

123
00:05:31.140 --> 00:05:33.795
So here we describe the type of value

124
00:05:33.795 --> 00:05:36.440
which will eventually be stored in name.

125
00:05:36.440 --> 00:05:39.320
Now, by the way, you see I'm getting an error here.

126
00:05:39.320 --> 00:05:41.090
Because what I'm telling TypeScript now

127
00:05:41.090 --> 00:05:43.489
is that my person should have an object

128
00:05:43.489 --> 00:05:45.900
with exactly one key value pair,

129
00:05:45.900 --> 00:05:48.626
where the key is name and the value of that key is string,

130
00:05:48.626 --> 00:05:52.730
but we didn't assign an object with two key value pairs.

131
00:05:52.730 --> 00:05:55.020
Name, which holds a string, that is fine,

132
00:05:55.020 --> 00:05:58.500
but age, which holds a number, and that would not be fine.

133
00:05:58.500 --> 00:06:01.140
So here we have to adjust this by adding a semicolon

134
00:06:01.140 --> 00:06:03.520
and then adding another key value pair here

135
00:06:03.520 --> 00:06:06.300
where we say age should be of type number.

136
00:06:06.300 --> 00:06:09.670
So not 30 here, that actually would be supported

137
00:06:09.670 --> 00:06:12.673
in TypeScript, that we restrict it to one specific number,

138
00:06:12.673 --> 00:06:15.600
but then we'll run into issues as soon as we change that.

139
00:06:15.600 --> 00:06:19.060
Instead, here I just want to say age should be some number.

140
00:06:19.060 --> 00:06:22.360
And now we basically are explicitly assigning

141
00:06:22.360 --> 00:06:24.870
the same TypeScript inferred before.

142
00:06:24.870 --> 00:06:26.900
As you learned, that's not a good practice,

143
00:06:26.900 --> 00:06:28.570
but to understand object types

144
00:06:28.570 --> 00:06:29.940
I wanted to do it here.

145
00:06:29.940 --> 00:06:32.315
Still this is something you can do.

146
00:06:32.315 --> 00:06:37.010
It's better to let TypeScript infer this

147
00:06:37.010 --> 00:06:40.440
as we did before, like this.

148
00:06:40.440 --> 00:06:42.351
Now, just to show something interesting,

149
00:06:42.351 --> 00:06:45.450
if I switch back to these sub-optimal code,

150
00:06:45.450 --> 00:06:47.970
where we explicitly assign a type TypeScript

151
00:06:47.970 --> 00:06:49.920
would be able to infer,

152
00:06:49.920 --> 00:06:54.920
if we compile this code, of course it works.

153
00:06:55.180 --> 00:06:56.900
We can access the name property,

154
00:06:56.900 --> 00:06:59.077
but if we then have a look at app.js we see

155
00:06:59.077 --> 00:07:01.220
this type assignment is removed here.

156
00:07:01.220 --> 00:07:03.417
And that, of course, should be something expected.

157
00:07:03.417 --> 00:07:06.290
As I mentioned, types and type assignments

158
00:07:06.290 --> 00:07:08.120
are not part of JavaScript.

159
00:07:08.120 --> 00:07:09.460
They're TypeScript only.

160
00:07:09.460 --> 00:07:10.800
I just wanted to show this again

161
00:07:10.800 --> 00:07:12.840
to make it really clear that this syntax here

162
00:07:12.840 --> 00:07:15.080
is not creating some JavaScript object,

163
00:07:15.080 --> 00:07:16.485
which is somewhere in our code.

164
00:07:16.485 --> 00:07:21.263
This is just TypeScript's representation of an object type

165
00:07:21.263 --> 00:07:24.570
that helps TypeScript understand the objects

166
00:07:24.570 --> 00:07:25.900
you're working with.

167
00:07:25.900 --> 00:07:29.950
Better syntax, of course, is this syntax, as you learned.

