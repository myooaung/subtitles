WEBVTT

00:02.150 --> 00:04.220
-: Agora, com isso, tivemos uma visão completa

00:04.220 --> 00:07.410
de todos os tipos centrais e das noções básicas de TypeScript.

00:07.410 --> 00:11.640
Esperamos agora entender como criamos e atribuímos tipos,

00:11.640 --> 00:14.427
como atribuímos tipos a variáveis e a

00:14.427 --> 00:17.510
parâmetros, e por que fazemos isso.

00:17.510 --> 00:20.740
Como as atribuições de tipos e tipos podem diferir do tipo

00:20.740 --> 00:24.770
JavaScript verifica se o JavaScript usa tipos de tempo de execução e

00:24.770 --> 00:27.310
o TypeScript usa tipos estáticos que importam

00:27.310 --> 00:29.400
durante o desenvolvimento.

00:29.400 --> 00:31.710
Que o código JavaScript construído, portanto,

00:31.710 --> 00:34.410
não inclui nenhum tipo de atribuição.

00:34.410 --> 00:36.550
Claro que inclui qualquer tipo de

00:36.550 --> 00:39.060
verificação, porque isso é código JavaScript

00:39.060 --> 00:41.730
normal, mas algo assim aqui...

00:43.050 --> 00:44.910
isto simplesmente não é permitido no JavaScript.

00:44.910 --> 00:46.280
Esta sintaxe não é suportada.

00:46.280 --> 00:47.960
Isso é apenas TypeScript.

00:47.960 --> 00:49.550
Portanto, esperemos que isso fique claro.

00:49.550 --> 00:52.740
E depois tivemos um olhar sobre números, cadeias, Booleans

00:52.740 --> 00:55.750
em tipos de funções e tipos de retorno de definições, tipos

00:55.750 --> 00:58.510
de argumentos, e também descrevendo o tipo de uma

00:58.510 --> 01:00.160
função geral que pode ser útil

01:00.160 --> 01:02.490
se você quiser ter uma variável que eventualmente

01:02.490 --> 01:04.780
contenha uma função.

01:04.780 --> 01:07.890
Demos uma olhada nos objetos e arrays e enums e como isso

01:07.890 --> 01:10.140
pode ser interessante e ajudar você.

01:10.140 --> 01:12.030
O mesmo se aplica aos tuplos.

01:12.030 --> 01:16.160
E agora também tivemos um olhar para pseudônimos, tipos de pseudônimos,

01:16.160 --> 01:18.605
onde você pode fundir tipos complexos em pseudônimos

01:18.605 --> 01:21.220
que você pode reutilizar.

01:21.220 --> 01:23.840
Demos uma olhada em tipos literais e tipos

01:23.840 --> 01:25.840
sindicais, que podem ser úteis

01:25.840 --> 01:29.550
para cenários onde se espera mais de um tipo possível.

01:29.550 --> 01:33.455
E agora, no final, também tivemos uma visão do desconhecido

01:33.455 --> 01:35.956
e do nunca, que são tipos de nicho, mas

01:35.956 --> 01:39.430
ainda em seu nicho podem ser muito úteis.

01:39.430 --> 01:40.970
Agora com estas bases vamos mergulhar

01:40.970 --> 01:43.180
mais profundamente em aspectos individuais

01:43.180 --> 01:45.630
e, é claro, também explorar outros tipos e construções

01:45.630 --> 01:49.163
JavaScript onde os tipos podem ser úteis.
