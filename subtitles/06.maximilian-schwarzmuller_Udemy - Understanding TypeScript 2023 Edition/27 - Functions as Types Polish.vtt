WEBVTT

00:02.140 --> 00:04.980
-: Więc możesz używać typów dla parametrów

00:04.980 --> 00:06.750
funkcji i dla wartości zwrotnej

00:06.750 --> 00:08.100
funkcji.

00:08.100 --> 00:10.420
Teraz, aby wziąć to na następny

00:10.420 --> 00:14.820
poziom, co jeśli ich również były typem funkcji sam.

00:14.820 --> 00:17.170
Teraz pozwolę sobie wyjaśnić, co mam na myśli.

00:17.170 --> 00:19.333
Powiedzmy, że mamy zmienną 'combinevalues'

00:21.360 --> 00:24.200
i ta zmienna domyślnie ma typ 'any'. Teraz, jak się dowiedziałeś, 'any' nie jest tak użyteczny.

00:24.200 --> 00:26.860
To co chcę zrobić ostatecznie to, chcę

00:26.860 --> 00:29.617
ustawić 'combinevalues' równe 'add. Więc chcę przechowywać tę funkcję 'add',

00:29.617 --> 00:32.600
wskaźnik na tę funkcję 'add', w 'combinevalues',

00:32.600 --> 00:35.330
tak aby na końcu można było zalogować się do

00:35.330 --> 00:37.430
konsoli, połączyć wartości i wykonać

00:37.430 --> 00:39.160
'combinevalues' jako funkcję,

00:39.160 --> 00:41.580
do której ma 8 i 8.

00:41.580 --> 00:44.520
Teraz, jeśli zapiszę to i wykonam to, po skompilowaniu,

00:44.520 --> 00:47.480
więc skompilowałem ten plik, a następnie

00:47.480 --> 00:52.130
pozwolimy temu przeładować, otrzymamy 16 tutaj.

00:52.130 --> 00:54.660
Tak więc, to działa i oczekiwalibyśmy, że będzie działać, ponieważ jest

00:54.660 --> 00:55.840
to normalny kod JavaScript.

00:55.840 --> 00:58.820
Możemy przechowywać wskaźnik na funkcję,

00:58.820 --> 01:00.880
w zmiennej liczbowej, a następnie

01:00.880 --> 01:03.350
oferta wykonuje tę zmienną jako funkcję,

01:03.350 --> 01:05.440
ponieważ, cóż, wskazuje na funkcję,

01:05.440 --> 01:07.300
prawda?

01:07.300 --> 01:08.580
Możemy więc wykonać tę funkcję, poprzez tę zmienną.

01:08.580 --> 01:09.910
Problem, który mamy z tym

01:09.910 --> 01:13.250
snippetem tutaj z perspektywy TypeScript, po prostu jest

01:13.250 --> 01:15.900
taki, że 'combinevalues' jest dowolny.

01:15.900 --> 01:19.640
Więc jeśli ustawię 'combinevalues' na liczbę tutaj dalej, to oczywiście

01:19.640 --> 01:20.670
nie możemy tego skompilować

01:20.670 --> 01:24.520
niestety, bo TypeScript nie ma szans wykryć, że to jest niepożądane

01:24.520 --> 01:27.910
albo że to może spowodować problem.

01:27.910 --> 01:30.543
Ale a run time, dostałby błąd, ponieważ oczywiście

01:30.543 --> 01:34.230
próbowaliśmy wykonać 'combinevalues' jako funkcję, kiedy faktycznie

01:34.230 --> 01:36.220
jest to liczba.

01:36.220 --> 01:39.090
Teraz chcemy tego uniknąć, a do tego musimy mieć jasność,

01:39.090 --> 01:42.080
że 'combinevalues' będzie trzymać funkcję.

01:42.080 --> 01:44.870
Teraz pierwszym krokiem w tym kierunku,

01:44.870 --> 01:48.650
jest to, że ustawiamy tutaj typ, na funkcję.

01:48.650 --> 01:50.550
Function jest typem dostarczanym

01:50.550 --> 01:54.770
przez TypeScript na końcu, a to sprawia, że jasne jest, że cokolwiek przechowujemy

01:54.770 --> 01:57.940
w tym miejscu, musi być funkcją.

01:57.940 --> 02:00.870
Dlatego tutaj dostaję błąd, ponieważ 5 jest liczbą,

02:00.870 --> 02:02.230
a nie funkcją.

02:02.230 --> 02:05.350
A jeśli skomentuję to, możemy skompilować to, w przeciwnym razie

02:05.350 --> 02:06.660
otrzymalibyśmy błąd podczas

02:06.660 --> 02:09.670
kompilacji, a teraz znowu działa zgodnie z oczekiwaniami.

02:09.670 --> 02:12.860
Więc to jest dobre, ale nie jest idealne, ponieważ

02:12.860 --> 02:15.380
teraz mówimy, że to powinna być funkcja,

02:15.380 --> 02:17.940
ale mogłaby również ustawić 'combinevalues'

02:17.940 --> 02:21.460
równe 'printResult' na przykład tutaj.

02:21.460 --> 02:25.290
I oczywiście TypeScript nie narzekałby, ponieważ "printResult" jest

02:25.290 --> 02:27.150
funkcją, ale oczywiście nie jest to

02:27.150 --> 02:29.600
funkcja, która przyjmuje dwa argumenty.

02:29.600 --> 02:32.620
Więc znowu jeśli skompiluję to, TypeScript nie będzie narzekał.

02:32.620 --> 02:34.800
Ale jeśli przeładujemy, widzimy undefined tutaj i Result 8.

02:34.800 --> 02:38.720
Więc nie otrzymuję wyniku, który chcę, ponieważ

02:38.720 --> 02:42.470
przechowywałem tam niewłaściwą funkcję.

02:42.470 --> 02:45.980
Ponownie, byłoby miło, gdyby TypeScript powiedział

02:45.980 --> 02:47.350
nam o tym.

02:47.350 --> 02:49.980
TypeScript nie może nas o tym poinformować, ponieważ wszystko,

02:49.980 --> 02:51.340
co powiedzieliśmy TypeScriptowi,

02:51.340 --> 02:54.410
to że chcemy przechowywać tam funkcję i to jest wyraźnie.

02:54.410 --> 02:58.040
Dobrze byłoby więc, gdybyśmy mogli bardziej precyzyjnie

02:58.040 --> 03:00.550
określić, jak powinna wyglądać funkcja,

03:00.550 --> 03:03.810
którą chcemy przechowywać w 'combinevalues'. I tu właśnie do gry wchodzą typy funkcji.

03:03.810 --> 03:07.200
Typy funkcji to typy opisujące funkcję dotyczące

03:07.200 --> 03:08.380
parametrów i wartości

03:08.380 --> 03:11.900
zwrotnej tej funkcji.

03:11.900 --> 03:15.690
Typ funkcji jest tworzony za pomocą tej notacji funkcji strzałkowej,

03:15.690 --> 03:18.360
którą znasz z JavaScript lub przynajmniej zbliżonej

03:18.360 --> 03:19.870
do tej notacji.

03:19.870 --> 03:23.710
Nie dodajesz tutaj nawiasów klamrowych, ponieważ nie

03:23.710 --> 03:25.530
tworzymy tutaj funkcji strzałkowej,

03:25.530 --> 03:28.890
zamiast tego tworzymy typ funkcji.

03:28.890 --> 03:31.610
Teraz po prawej stronie tej strzałki określasz typ zwrotny

03:31.610 --> 03:33.690
funkcji, którą ostatecznie chcesz móc przechowywać

03:33.690 --> 03:35.450
w tym miejscu.

03:35.450 --> 03:37.180
To powinien być numer.

03:37.180 --> 03:40.840
Teraz z tym mówimy, 'combinevalues' akceptuje dowolną funkcję, która

03:40.840 --> 03:42.640
nie przyjmuje żadnych parametrów,

03:42.640 --> 03:44.120
a następnie zwraca liczbę.

03:44.120 --> 03:47.200
Teraz oczywiście nie jest to do końca to, czego chcemy.

03:47.200 --> 03:50.430
Chcemy się upewnić, że 'combinevalues' przyjmuje funkcję lub jest

03:50.430 --> 03:51.840
w stanie przechowywać funkcje,

03:51.840 --> 03:54.180
które biorą 2 liczby i zwracają liczbę.

03:54.180 --> 03:57.130
I w tym celu możemy dodać tutaj

03:57.130 --> 04:01.400
parametry do tego typu funkcji.

04:01.400 --> 04:02.400
Nie musimy dopasowywać

04:02.400 --> 04:05.040
nazw parametrów z góry, tylko typy.

04:05.040 --> 04:06.020
Możemy więc mieć a, które

04:06.020 --> 04:09.060
powinno być typu number i b, które powinno być typu number.

04:09.060 --> 04:10.510
A teraz to, co mówimy TypeScriptowi,

04:10.510 --> 04:14.070
to to, że 'combinevalues' powinno akceptować dowolną funkcję,

04:14.070 --> 04:15.660
która przyjmuje dwa parametry,

04:15.660 --> 04:18.322
gdzie każdy parametr jest liczbą, i gdzie

04:18.322 --> 04:22.930
funkcja ogólna następnie zwraca liczbę.

04:22.930 --> 04:24.350
I właśnie dlatego TypeScript nie narzeka

04:24.350 --> 04:27.780
na to, że przechowujemy 'add' w wartościach combine, bo 'add' jest funkcją, która doskonale

04:27.780 --> 04:29.690
spełnia tę definicję typu.

04:29.690 --> 04:33.380
Ale narzeka na "printResult", ponieważ "printResult"

04:33.380 --> 04:36.890
jak nam mówi tutaj, jest funkcją typu jeden argument,

04:36.890 --> 04:40.632
który jest liczbą, nic nie jest zwracane, gdzie jak

04:40.632 --> 04:44.360
faktycznie oczekujemy, aby uzyskać funkcję z dwoma

04:44.360 --> 04:48.690
argumentami, gdzie każdy argument jest liczbą i zwracamy

04:48.690 --> 04:52.310
również liczbę.

04:52.310 --> 04:55.810
Mamy więc tutaj niedopasowanie, a jeśli próbowałbym

04:55.810 --> 04:58.700
skompilować to, dlatego otrzymalibyśmy

04:58.700 --> 05:00.480
błąd tutaj, oczywiście w kompilatorze,

05:00.480 --> 05:03.440
i możemy to naprawić tylko poprzez usunięcie

05:03.440 --> 05:06.270
tej linii kodu.

05:06.270 --> 05:07.110
Teraz jesteśmy w stanie przekompilować to bez błędów.

05:07.110 --> 05:10.930
A teraz to działa zgodnie z oczekiwaniami.

05:10.930 --> 05:12.060
Tak więc typy funkcji,

05:12.060 --> 05:15.140
pozwalają nam opisać jaki typ funkcji konkretnie

05:15.140 --> 05:17.413
chcemy gdzieś użyć.

05:18.290 --> 05:20.887
Czy to oczekiwana wartość w parametrze, do

05:20.887 --> 05:23.890
tworzenia funkcji z jakimś wywołaniem zwrotnym,

05:23.890 --> 05:25.420
czy jak tutaj, zmienna.
