WEBVTT

00:02.140 --> 00:04.980
-: Vì vậy, bạn có thể sử dụng các kiểu cho các

00:04.980 --> 00:06.750
tham số của hàm và cho giá trị

00:06.750 --> 00:08.100
trả về của hàm.

00:08.100 --> 00:10.420
Bây giờ, để đưa nó lên cấp độ tiếp theo,

00:10.420 --> 00:14.820
điều gì sẽ xảy ra nếu bản thân chúng cũng là một loại hàm.

00:14.820 --> 00:17.170
Bây giờ hãy để tôi làm rõ những gì tôi muốn nói.

00:17.170 --> 00:19.333
Giả sử chúng ta có một biến 'giá trị kết

00:21.360 --> 00:24.200
hợp' và biến này theo mặc định có kiểu 'bất kỳ. Bây giờ như bạn đã học, 'bất kỳ' không hữu ích.

00:24.200 --> 00:26.860
Điều tôi muốn làm cuối cùng là, tôi muốn

00:26.860 --> 00:29.617
đặt 'các giá trị kết hợp' bằng 'thêm'. Vì vậy, tôi muốn lưu trữ hàm 'thêm' đó, một

00:29.617 --> 00:32.600
con trỏ tại hàm 'thêm' này, trong 'giá trị kết

00:32.600 --> 00:35.330
hợp' để cuối cùng, chúng ta có thể điều khiển

00:35.330 --> 00:37.430
nhật ký, kết hợp các giá trị và thực

00:37.430 --> 00:39.160
thi 'giá trị kết hợp' như một

00:39.160 --> 00:41.580
hàm mà nó có 8 và 8.

00:41.580 --> 00:44.520
Bây giờ nếu tôi lưu tệp đó, và tôi thực hiện tệp này,

00:44.520 --> 00:47.480
sau khi biên dịch nó, vì vậy tôi đã biên dịch tệp

00:47.480 --> 00:51.150
này và sau đó chúng tôi để tệp này tải lại, chúng tôi nhận được

00:51.150 --> 00:52.130
16 ở đây.

00:52.130 --> 00:54.660
Vì vậy, nó hoạt động và chúng tôi hy vọng nó hoạt động vì đó là mã

00:54.660 --> 00:55.840
JavaScript bình thường.

00:55.840 --> 00:58.820
Chúng ta có thể lưu trữ một con trỏ tại một

00:58.820 --> 01:00.880
hàm, trong một biến số, và sau

01:00.880 --> 01:03.350
đó ưu đãi thực thi biến này như một

01:03.350 --> 01:05.440
hàm, bởi vì, vâng, nó trỏ vào

01:05.440 --> 01:07.300
hàm, phải không?

01:07.300 --> 01:08.580
Vì vậy, chúng ta có thể thực thi chức năng đó, thông qua biến đó.

01:08.580 --> 01:09.910
Vấn đề chúng tôi gặp

01:09.910 --> 01:13.250
phải với đoạn mã này ở đây từ góc độ TypeScript,

01:13.250 --> 01:15.900
chỉ là 'giá trị kết hợp' là bất kỳ.

01:15.900 --> 01:19.640
Vì vậy, nếu tôi đặt 'giá trị kết hợp' thành một số ở đây sau đó, tất nhiên,

01:19.640 --> 01:20.670
chúng tôi không thể

01:20.670 --> 01:24.520
biên dịch giá trị này vì TypeScript không có cơ hội phát hiện ra rằng điều

01:24.520 --> 01:27.910
này là không mong muốn hoặc điều này có thể gây ra sự cố.

01:27.910 --> 01:30.543
Nhưng trong một thời gian chạy, nó sẽ gặp lỗi

01:30.543 --> 01:34.230
vì rõ ràng chúng tôi đã cố thực thi 'giá trị kết hợp' dưới dạng hàm,

01:34.230 --> 01:36.220
trong khi nó thực sự là một số.

01:36.220 --> 01:39.090
Bây giờ chúng tôi muốn tránh điều này và để làm được điều đó, chúng

01:39.090 --> 01:42.080
tôi cần làm rõ rằng 'các giá trị kết hợp' sẽ có một chức năng.

01:42.080 --> 01:44.870
Bây giờ, bước đầu tiên theo hướng

01:44.870 --> 01:48.650
đó, là chúng ta đặt loại ở đây, để hoạt động.

01:48.650 --> 01:50.550
Rốt cuộc, hàm là một loại do

01:50.550 --> 01:54.770
TypeScript cung cấp và điều này làm rõ rằng bất cứ thứ gì chúng

01:54.770 --> 01:57.940
ta lưu trữ ở đây đều phải là một hàm.

01:57.940 --> 02:00.870
Do đó, ở đây tôi gặp lỗi, vì 5 là một số chứ

02:00.870 --> 02:02.230
không phải hàm.

02:02.230 --> 02:05.350
Và nếu tôi nhận xét điều này, chúng tôi có thể biên dịch nó, nếu không

02:05.350 --> 02:06.660
chúng tôi sẽ gặp lỗi trong quá

02:06.660 --> 02:09.670
trình biên dịch và bây giờ nó lại chạy như mong đợi.

02:09.670 --> 02:12.860
Vì vậy, điều này là tốt, nhưng nó không hoàn hảo

02:12.860 --> 02:15.380
bởi vì bây giờ chúng tôi nói đây phải là

02:15.380 --> 02:17.940
một hàm, nhưng nó cũng có thể đặt 'giá trị

02:17.940 --> 02:21.460
kết hợp' bằng 'printResult' chẳng hạn ở đây.

02:21.460 --> 02:25.290
Và tất nhiên TypeScript sẽ không phàn nàn vì 'printResult'

02:25.290 --> 02:27.150
là một hàm, nhưng tất nhiên đó

02:27.150 --> 02:29.600
không phải là hàm nhận hai đối số.

02:29.600 --> 02:32.620
Vì vậy, một lần nữa nếu tôi biên dịch cái này, TypeScript sẽ không phàn nàn.

02:32.620 --> 02:34.800
Nhưng nếu chúng tôi tải lại, chúng tôi sẽ thấy không xác định ở đây và Kết quả 8.

02:34.800 --> 02:38.720
Vì vậy, tôi không nhận được kết quả như mong muốn

02:38.720 --> 02:42.470
vì tôi đã lưu trữ sai chức năng trong đó.

02:42.470 --> 02:45.980
Một lần nữa, thật tuyệt nếu TypeScript cho chúng tôi

02:45.980 --> 02:47.350
biết về điều đó.

02:47.350 --> 02:49.980
TypeScript không thể thông báo cho chúng tôi về điều này bởi vì tất cả

02:49.980 --> 02:51.340
những gì chúng tôi đã nói với TypeScript

02:51.340 --> 02:54.410
là chúng tôi muốn lưu trữ một chức năng ở đó và đây rõ ràng là trường hợp.

02:54.410 --> 02:58.040
Vì vậy, sẽ rất tốt nếu chúng ta có thể chính xác hơn về

02:58.040 --> 03:00.550
cách chức năng sẽ trông như thế nào mà

03:00.550 --> 03:03.810
chúng ta muốn lưu trữ trong 'giá trị kết hợp. Và đó là lúc các loại chức năng phát huy tác dụng.

03:03.810 --> 03:07.200
Các kiểu hàm là các kiểu mô tả một hàm liên

03:07.200 --> 03:08.380
quan đến các tham

03:08.380 --> 03:11.900
số và giá trị trả về của hàm đó.

03:11.900 --> 03:15.690
Một loại hàm được tạo bằng ký hiệu hàm mũi tên này mà bạn

03:15.690 --> 03:18.360
biết từ JavaScript hoặc ít nhất là gần

03:18.360 --> 03:19.870
với ký hiệu đó.

03:19.870 --> 03:23.710
Bạn không thêm dấu ngoặc nhọn ở đây vì chúng tôi không

03:23.710 --> 03:25.530
tạo hàm mũi tên ở đây, thay

03:25.530 --> 03:28.890
vào đó, chúng tôi đang tạo một loại hàm.

03:28.890 --> 03:31.610
Bây giờ ở phía bên phải của mũi tên này, bạn chỉ

03:31.610 --> 03:33.690
định kiểu trả về của hàm mà cuối cùng

03:33.690 --> 03:35.450
bạn muốn có thể lưu trữ ở đây.

03:35.450 --> 03:37.180
Đó phải là số.

03:37.180 --> 03:40.840
Bây giờ chúng ta đang nói, 'giá trị kết hợp' chấp nhận bất

03:40.840 --> 03:42.640
kỳ hàm nào không nhận tham số

03:42.640 --> 03:44.120
và sau đó trả về một số.

03:44.120 --> 03:47.200
Bây giờ, đó tất nhiên không hoàn toàn là những gì chúng ta muốn.

03:47.200 --> 03:50.430
Chúng tôi muốn đảm bảo rằng 'giá trị kết hợp' nhận một

03:50.430 --> 03:51.840
hàm hoặc có thể lưu trữ

03:51.840 --> 03:54.180
các hàm nhận 2 số và trả về một số.

03:54.180 --> 03:57.130
Và để làm được điều đó, chúng ta có

03:57.130 --> 04:01.400
thể thêm các tham số ở đây vào loại chức năng này.

04:01.400 --> 04:02.400
Chúng ta không cần

04:02.400 --> 04:05.040
phải khớp các tên tham số từ đó, chỉ cần nhập.

04:05.040 --> 04:06.020
Vì vậy, chúng ta có

04:06.020 --> 04:09.060
thể có a which nên thuộc loại số và b nên thuộc loại số.

04:09.060 --> 04:10.510
Và bây giờ, điều chúng

04:10.510 --> 04:14.070
ta đang nói với TypeScript là 'các giá trị kết

04:14.070 --> 04:15.660
hợp' phải chấp nhận bất

04:15.660 --> 04:18.322
kỳ hàm nào nhận hai tham số trong đó

04:18.322 --> 04:22.930
mỗi tham số là một số và khi hàm tổng thể trả về một số.

04:22.930 --> 04:24.350
Và đó là lý do tại sao TypeScript không

04:24.350 --> 04:27.780
phàn nàn về việc chúng tôi lưu trữ 'thêm' trong các giá trị kết hợp, bởi vì 'thêm' là một

04:27.780 --> 04:29.690
hàm đáp ứng hoàn hảo định nghĩa kiểu này.

04:29.690 --> 04:33.380
Nhưng nó phàn nàn về 'printResult' bởi vì 'printResult'

04:33.380 --> 04:36.890
như nó cho chúng ta biết ở đây, là một hàm của

04:36.890 --> 04:40.632
một đối số loại là một số, không có gì được trả về,

04:40.632 --> 04:44.360
trong khi chúng ta thực sự mong đợi nhận được một

04:44.360 --> 04:48.690
hàm có hai đối số trong đó mỗi đối số là một số và chúng tôi

04:48.690 --> 04:52.310
cũng trả về một số.

04:52.310 --> 04:55.810
Vì vậy, chúng tôi có một sự không phù hợp ở đây và nếu

04:55.810 --> 04:58.700
tôi cố gắng biên dịch nó, do đó, chúng tôi sẽ

04:58.700 --> 05:00.480
gặp lỗi ở đây, tất nhiên, trong

05:00.480 --> 05:03.440
trình biên dịch và chúng tôi chỉ có thể sửa lỗi

05:03.440 --> 05:06.270
này bằng cách xóa dòng mã này.

05:06.270 --> 05:07.110
Bây giờ chúng tôi có thể biên dịch lại cái này mà không có lỗi.

05:07.110 --> 05:10.930
Và bây giờ điều này chạy như mong đợi.

05:10.930 --> 05:12.060
Vì vậy, các loại chức

05:12.060 --> 05:15.140
năng, cho phép chúng tôi mô tả loại chức năng cụ thể

05:15.140 --> 05:17.413
mà chúng tôi muốn sử dụng ở đâu đó.

05:18.290 --> 05:20.887
Đó là một giá trị dự kiến trong một tham

05:20.887 --> 05:23.890
số, để tạo một hàm với một số lệnh gọi lại hoặc,

05:23.890 --> 05:25.420
như ở đây, một biến.
