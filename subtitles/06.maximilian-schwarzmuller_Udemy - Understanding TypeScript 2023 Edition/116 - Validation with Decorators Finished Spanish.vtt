WEBVTT

00:02.320 --> 00:05.210
Instructor: Para implementar esto voy a crear primero

00:05.210 --> 00:08.217
una interfaz ValidatorConfig, donde quiero configurar

00:09.550 --> 00:12.680
el almacenamiento con el que quiero trabajar.

00:12.680 --> 00:15.130
Mi idea ahí es tener un par de propiedades, y por

00:15.130 --> 00:17.653
eso uso esta notación de tipo índice aquí.

00:19.720 --> 00:21.450
Que son básicamente cadenas,

00:21.450 --> 00:23.440
donde el valor es otro objeto.

00:23.440 --> 00:26.380
Porque esto aquí sería básicamente el nombre de la clase para

00:26.380 --> 00:29.570
la que queremos registrar algunas propiedades validadas.

00:29.570 --> 00:31.700
Y luego en el objeto que almacenamos

00:31.700 --> 00:34.580
allí, tenemos las propiedades concretas de la clase

00:34.580 --> 00:37.010
que tienen validadores adjuntos.

00:37.010 --> 00:40.610
Así que aquí tenemos la propiedad validable, si quieres

00:40.610 --> 00:42.240
llamarla así, que también

00:42.240 --> 00:44.660
será una clave de cadena.

00:44.660 --> 00:47.350
Y entonces el valor para eso debe ser un

00:47.350 --> 00:50.010
array de cadenas donde básicamente tenemos

00:52.420 --> 00:55.490
algo como requerido, positivo, etc.

00:55.490 --> 00:57.460
Así que algo así podría añadirse aquí

00:57.460 --> 00:59.323
como una lista de validadores.

01:00.300 --> 01:05.300
Ahora podemos crear nuestra configuración de registeredValidators aquí, que debe ser

01:05.790 --> 01:07.950
de tipo ValidatorConfig que inicialmente

01:07.950 --> 01:09.640
es un objeto vacío.

01:09.640 --> 01:11.500
Porque inicialmente, cuando la aplicación

01:11.500 --> 01:13.920
se inicia, cuando nuestra biblioteca de terceros se carga,

01:13.920 --> 01:16.293
no hay validadores registrados todavía.

01:17.640 --> 01:19.920
Bueno, y luego aquí en nuestros directores

01:19.920 --> 01:23.490
queremos añadir algo a ese registro.

01:23.490 --> 01:28.020
Ahora ten en cuenta que una función decoradora de propiedades recibe dos

01:28.020 --> 01:31.010
argumentos: el objetivo, que es el prototipo del

01:31.010 --> 01:33.910
objeto sobre el que se asienta la propiedad, o la

01:33.910 --> 01:37.340
función constructora si fuera una propiedad estática,

01:37.340 --> 01:39.300
y el nombre de la propiedad.

01:39.300 --> 01:40.710
Estos son los dos argumentos

01:40.710 --> 01:44.370
que obtenemos aquí, no obtenemos el descriptor de propiedades.

01:44.370 --> 01:46.760
Ahora podemos ir a nuestros validadores registrados y allí

01:46.760 --> 01:51.463
quiero añadir una nueva entrada para el objetivo. constructor.

01:52.730 --> 01:56.070
El prototipo de la instancia con la que estamos trabajando

01:56.070 --> 01:58.430
tendrá una clave de constructor que apunta

01:58.430 --> 02:02.610
a la función constructora que se utilizó para crear nuestro objeto.

02:02.610 --> 02:04.690
Y eso, por lo tanto, será básicamente algo

02:04.690 --> 02:06.120
como curso aquí, por lo que el

02:06.120 --> 02:08.460
nombre de esa función constructora en el final puede

02:08.460 --> 02:10.560
ser recuperado de ese constructor.

02:10.560 --> 02:11.900
Debido a que el constructor es

02:11.900 --> 02:13.400
una función podemos utilizar la propiedad

02:13.400 --> 02:15.900
name, que existe en cualquier función en JavaScript para

02:15.900 --> 02:18.310
obtener el nombre de la función, y esto entonces será el

02:18.310 --> 02:20.620
nombre del curso aquí por ejemplo.

02:20.620 --> 02:23.390
Así que ahora registramos el nombre de la clase como una clave

02:23.390 --> 02:25.030
en los validadores registrados.

02:25.030 --> 02:28.130
Y el valor para eso entonces debe ser otro objeto.

02:28.130 --> 02:30.630
Así que lo pongo igual a otro objeto aquí.

02:30.630 --> 02:32.390
Y en ese objeto también tengo una

02:32.390 --> 02:34.640
propiedad asignada dinámicamente donde

02:34.640 --> 02:37.400
uso mi propName, por lo que la propiedad para la que

02:37.400 --> 02:40.190
quiero añadir un validador como clave.

02:40.190 --> 02:42.310
Ahora el valor aquí es un array de cadenas,

02:42.310 --> 02:45.530
y aquí voy a añadir requerido como una cadena.

02:45.530 --> 02:47.920
Ahora, por supuesto, este es un validador muy ingenuo.

02:47.920 --> 02:50.000
Si ya tuviéramos otros validadores registrados

02:50.000 --> 02:52.830
para esta propiedad, ahora lo sobrescribiría aquí.

02:52.830 --> 02:54.900
Así que sería mejor recuperar primero

02:54.900 --> 02:58.360
cualquier validador existente y luego copiarlo en este array

02:58.360 --> 03:01.320
y sólo añadir lo necesario a ese array existente.

03:01.320 --> 03:02.870
Una vez más, para ahorrar algo de tiempo

03:02.870 --> 03:04.740
aquí, y para mostrar la idea general, voy

03:04.740 --> 03:06.873
a tener este enfoque más ingenuo aquí.

03:07.980 --> 03:11.180
Con esto tenemos la anotación requerida, sin embargo, ahora

03:11.180 --> 03:14.690
vamos a trabajar en la anotación de números positivos.

03:14.690 --> 03:16.730
Y por supuesto, eso es básicamente lo mismo.

03:16.730 --> 03:21.410
Copio ese código pero pongo esto aquí en positivo o el identificador que

03:21.410 --> 03:23.600
quieras usar y por supuesto tenemos

03:23.600 --> 03:25.010
que asegurarnos de aceptar

03:25.010 --> 03:27.650
los argumentos correctos.

03:27.650 --> 03:30.990
Así que junto con lo que hemos añadido hasta ahora,

03:30.990 --> 03:34.420
registramos estas propiedades y sus validadores en

03:34.420 --> 03:38.640
nuestra configuración global cuando se define esta clase.

03:38.640 --> 03:41.460
Ahora sólo tenemos que trabajar en la función de validación.

03:41.460 --> 03:43.400
La función de validación debe pasar por

03:43.400 --> 03:46.240
todos los validadores registrados, y luego básicamente

03:46.240 --> 03:50.340
ejecutar una lógica diferente basada en los validadores que encuentre.

03:50.340 --> 03:54.857
Así que aquí en primer lugar quiero recuperar la configuración para el

03:54.857 --> 03:57.600
objeto concreto que estamos tratando.

03:57.600 --> 04:00.390
Para ello tenemos que averiguar en qué función constructora

04:00.390 --> 04:04.277
se basa el objeto y luego obtener la configuración de validación o los mapeos

04:04.277 --> 04:07.040
del validador de propiedades que hemos establecido

04:07.040 --> 04:09.070
para ese objeto.

04:09.070 --> 04:11.960
Así que aquí voy a nombrar este objeto validadores,

04:11.960 --> 04:14.520
o objValidatorConfig tal vez.

04:14.520 --> 04:17.110
Y llegamos a los validadores registrados aquí y accedemos

04:17.110 --> 04:22.110
a una propiedad que debería ser obj. constructor. nombre, la misma lógica que antes,

04:23.900 --> 04:27.060
accedemos a la propiedad del constructor que existe en el prototipo

04:27.060 --> 04:28.980
del objeto y por lo tanto podemos acceder

04:28.980 --> 04:31.720
a ella directamente en el objeto gracias a cómo funciona

04:31.720 --> 04:33.340
JavaScript y gracias a la cadena

04:33.340 --> 04:35.050
de prototipos entonces llegaremos

04:35.050 --> 04:36.710
al prototipo si no podemos encontrar

04:36.710 --> 04:38.920
la propiedad del constructor en el propio objeto,

04:38.920 --> 04:41.580
y eso funcionará.

04:41.580 --> 04:43.840
Y por lo tanto ahora tenemos el nombre del

04:43.840 --> 04:46.970
constructor y descubrimos que, por ejemplo, este Curso

04:46.970 --> 04:49.050
aquí está basado en esta clase Curso.

04:49.050 --> 04:51.290
Así que buscamos cualquier configuración de validador

04:51.290 --> 04:52.800
que tengamos para la clase Curso.

04:52.800 --> 04:55.910
Así que ahora estamos viendo este objeto, básicamente.

04:55.910 --> 04:58.207
Esto está ahora en objValidatorConfig.

04:59.310 --> 05:01.540
Ahora, por supuesto, podríamos no encontrar esto

05:01.540 --> 05:03.270
si estamos tratando de validar nuestro

05:03.270 --> 05:05.110
objeto para el que no se registró nada.

05:05.110 --> 05:08.270
Así que si no tenemos ninguna configuración del validador,

05:08.270 --> 05:11.640
si no encontramos nada allí, quiero devolver true porque entonces

05:11.640 --> 05:14.010
esto ciertamente es válido, ¿verdad?

05:14.010 --> 05:15.330
No hay nada que validar,

05:15.330 --> 05:18.350
por lo que el objeto es ciertamente válido.

05:18.350 --> 05:20.900
De lo contrario, si lo encontramos quiero que

05:20.900 --> 05:24.910
haga un bucle a través de este objeto interno aquí con un bucle for in.

05:24.910 --> 05:27.580
Así que con eso hago un bucle a través de mis propiedades

05:27.580 --> 05:29.560
para las que registré validadores,

05:29.560 --> 05:33.007
con const prop en objValidatorConfig.

05:34.380 --> 05:36.950
Esto me da acceso a todos los nombres de las propiedades

05:36.950 --> 05:39.630
para las que podríamos tener validadores.

05:39.630 --> 05:41.180
Así que ahora, por supuesto, tengo que ir a

05:41.180 --> 05:43.970
través de todos los validadores que podríamos tener para una propiedad.

05:43.970 --> 05:45.230
Esto siempre debe ser un array

05:45.230 --> 05:47.680
aunque sólo tengamos un validador añadido.

05:47.680 --> 05:49.530
Así que podemos usar un bucle

05:49.530 --> 05:53.040
for of aquí y obtener el validador concreto, que tenemos,

05:53.040 --> 05:56.930
para el objValidatorConfig para esta propiedad dada.

05:56.930 --> 06:00.560
Así que ahora estamos recibiendo cosas como positivo o requerido, que se almacenan

06:00.560 --> 06:02.963
en la constante del validador entonces.

06:04.080 --> 06:06.110
Y entonces podríamos tener una sentencia switch aquí,

06:06.110 --> 06:08.030
o por supuesto llamar a funciones externas basadas

06:08.030 --> 06:09.810
en el validador que encontremos.

06:09.810 --> 06:12.130
Pero aquí voy a ir con una declaración de conmutación

06:12.130 --> 06:16.620
incorporada, cambiar en el validador y luego, básicamente, tener diferentes casos.

06:16.620 --> 06:19.683
Por ejemplo, el caso requerido aquí.

06:20.800 --> 06:22.163
Uy, así.

06:23.470 --> 06:27.900
Aquí, quiero devolver true si nuestra propiedad, que estamos

06:27.900 --> 06:28.950
viendo...

06:28.950 --> 06:33.260
Así que esta propiedad en este objeto tiene un valor no vacío.

06:33.260 --> 06:38.260
Así que devolveré true si obj prop es truthy.

06:39.170 --> 06:42.010
Y para convertir esto en un valor real verdadero o falso

06:42.010 --> 06:44.420
podemos utilizar el operador doble bang.

06:44.420 --> 06:46.840
Ahora escucho tipos de quejas que no sabe si el objeto

06:46.840 --> 06:49.440
tiene esta propiedad, por lo que aquí deberíamos cambiar

06:49.440 --> 06:51.220
esto a cualquier para obtener esta

06:51.220 --> 06:53.560
flexibilidad adicional aquí.

06:53.560 --> 06:56.150
Por supuesto, también puedes trabajar los tipos aquí.

06:56.150 --> 07:00.480
Y por ejemplo, también convertir sus identificadores aquí en tipos claramente

07:00.480 --> 07:03.430
definidos donde Enums usted trabaja y tal vez también

07:03.430 --> 07:05.490
mejorar la tipificación aquí.

07:05.490 --> 07:07.420
Aunque, para ser honesto, ya que quiero que esto

07:07.420 --> 07:09.960
funcione con cualquier objeto, es difícil mejorar esto de

07:09.960 --> 07:11.810
una manera que TypeScript le guste.

07:11.810 --> 07:13.330
Podríamos trabajar con

07:13.330 --> 07:16.800
tipos genéricos, pero entonces tendríamos que restringir

07:16.800 --> 07:19.740
los objetos que los tipos genéricos deberían

07:19.740 --> 07:22.110
extender y aceptar.

07:22.110 --> 07:25.850
Así que cualquiera podría ser nuestra mejor opción aquí para ser realmente

07:25.850 --> 07:27.880
flexible y aceptar un montón de diferentes

07:27.880 --> 07:30.640
objetos en esta función de validación.

07:30.640 --> 07:32.270
Ahora volvemos al segmento del interruptor,

07:32.270 --> 07:34.750
el caso requerido es un posible caso, también tenemos

07:34.750 --> 07:37.650
el caso positivo que queremos manejar.

07:37.650 --> 07:39.280
Y ahí quiero devolver

07:39.280 --> 07:43.770
true si la propiedad que estamos viendo es mayor que cero.

07:43.770 --> 07:47.260
Así que si el objeto prop es mayor que cero, entonces esto devuelve

07:47.260 --> 07:50.463
true, de lo contrario esto devolverá false.

07:52.890 --> 07:55.730
Ahora bien, si no llegamos a este bloque for

07:55.730 --> 07:57.970
o si de alguna manera tenemos un bucle

07:57.970 --> 07:59.310
que no recorre nada porque

07:59.310 --> 08:01.500
no hemos registrado ningún validador,

08:01.500 --> 08:04.130
pasamos un array vacío aquí o algo así,

08:04.130 --> 08:06.350
así que si pasas este bucle for, devolveré

08:06.350 --> 08:10.280
true por defecto también.

08:10.280 --> 08:12.800
Y ahora devolvemos algo en todas las circunstancias

08:12.800 --> 08:14.503
y podemos usar la validación.

08:15.450 --> 08:19.253
Con eso vamos a ver si funciona, si ahora guardamos esto, y recargamos nuestra

08:23.610 --> 08:26.330
aplicación aquí y trato de enviar esto obtenemos un error,

08:26.330 --> 08:29.400
entrada inválida por favor intente de nuevo.

08:29.400 --> 08:30.780
Si introduzco un texto

08:30.780 --> 08:34.793
aquí: JavaScript La Guía Completa, sigo recibiendo esto porque

08:35.940 --> 08:38.100
mi número es incorrecto.

08:38.100 --> 08:40.440
Si introduzco menos uno aquí también obtenemos

08:40.440 --> 08:42.020
esto porque no es positivo.

08:42.020 --> 08:45.020
Sin embargo, si introduzco un número positivo, funciona.

08:45.020 --> 08:48.230
Si tengo un número positivo pero el primer campo está vacío,

08:48.230 --> 08:49.860
esto también funciona, así que

08:49.860 --> 08:52.190
es algo en lo que tendremos que trabajar.

08:52.190 --> 08:54.600
Así que vamos a averiguar cuál es el problema.

08:54.600 --> 08:57.380
Y para averiguarlo voy a añadir un pequeño registro

08:57.380 --> 08:59.830
de consola aquí y registrar la propiedad que estamos

08:59.830 --> 09:00.720
viendo.

09:00.720 --> 09:02.340
Por supuesto, también podríamos utilizar puntos de ruptura

09:02.340 --> 09:03.513
y herramientas de desarrollo.

09:04.820 --> 09:07.410
Ahora, si hago clic en guardar aquí, ves que lo primero

09:07.410 --> 09:09.250
que se valida aquí es el precio y a partir

09:09.250 --> 09:10.623
de ahí nos detenemos.

09:11.530 --> 09:15.100
Así que el precio es la primera propiedad que se valida.

09:15.100 --> 09:16.980
Y eso es lo interesante aquí, el

09:16.980 --> 09:20.090
precio es en realidad la única propiedad que importa

09:20.090 --> 09:22.230
aquí porque volvemos en valido.

09:22.230 --> 09:25.840
Eso significa que la primera vez que encontremos algún validador que

09:25.840 --> 09:29.050
devuelva verdadero o falso, lo devolvemos inmediatamente

09:29.050 --> 09:31.480
y no nos importan los demás validadores.

09:31.480 --> 09:33.320
Ahora bien, en el caso falso esto está

09:33.320 --> 09:35.360
bien porque si un elemento es falso, si

09:35.360 --> 09:37.450
una propiedad es falsa, es inválida, entonces

09:37.450 --> 09:40.140
estamos bien sin mirar los otros.

09:40.140 --> 09:42.590
Pero para el caso real es un problema.

09:42.590 --> 09:44.970
Si devolvemos verdadero la primera vez

09:44.970 --> 09:49.410
que una propiedad cumple nuestras expectativas, tenemos un problema.

09:49.410 --> 09:51.540
Así que debemos mejorar esto teniendo

09:51.540 --> 09:55.130
una propiedad isValid aquí, que inicialmente es verdadera.

09:55.130 --> 09:56.780
Es una variable válida, quiero decir.

09:56.780 --> 10:01.780
Y luego aquí ponemos isValid igual a isValid y esto aquí,

10:03.857 --> 10:08.857
y lo mismo aquí abajo, ponemos esto igual a esto.

10:09.570 --> 10:11.290
Para que no volvamos inmediatamente,

10:11.290 --> 10:14.750
en su lugar sólo actualizamos isValid y rompemos a partir de

10:14.750 --> 10:16.700
entonces para no caer.

10:16.700 --> 10:19.200
El resultado de esto es que al final después de

10:19.200 --> 10:22.710
todos estos bucles isValid sigue siendo verdadero, pero en cuanto

10:22.710 --> 10:25.710
una de estas comprobaciones aquí es falsa, gracias a

10:25.710 --> 10:27.530
cómo funciona JavaScript, el valor

10:27.530 --> 10:29.670
global de isValid será falso porque verdadero

10:29.670 --> 10:33.000
combinado con falso devolverá falso.

10:33.000 --> 10:36.020
Y ahí abajo deberíamos devolver isValid.

10:36.020 --> 10:39.330
Así que ahora nos aseguramos de que se comprueban todas las propiedades

10:39.330 --> 10:42.433
y no sólo la primera a la que JavaScript echa un vistazo.

10:43.320 --> 10:45.460
Sin embargo, este no será nuestro único problema,

10:45.460 --> 10:47.750
también tenemos un problema aquí cuando echamos un

10:47.750 --> 10:50.480
vistazo a cómo registramos nuestra lógica del validador.

10:50.480 --> 10:53.720
Siempre sobrescribo los validadores registrados para

10:53.720 --> 10:57.130
un determinado nombre de clase con un nuevo objeto.

10:57.130 --> 11:00.050
En su lugar, deberíamos añadir los validadores existentes

11:00.050 --> 11:01.630
aquí para no hacer eso.

11:01.630 --> 11:04.140
Por ejemplo, tenemos el operador de propagación

11:04.140 --> 11:08.130
así para tomar cualquier par clave-valor existente para ese nombre de clase

11:08.130 --> 11:10.870
en los validadores registrados y añadir que primero

11:10.870 --> 11:14.413
antes de añadir nuestra, también allí abajo, por supuesto.

11:16.890 --> 11:18.733
Y ahora con eso, si guardamos esto,

11:19.650 --> 11:21.980
y volvemos a nuestra aplicación aquí.

11:21.980 --> 11:24.150
Si tengo los dos vacíos, fallamos.

11:24.150 --> 11:26.280
Si introducimos un precio válido pero

11:26.280 --> 11:28.490
tenemos un título no válido, fallamos.

11:28.490 --> 11:31.510
Si ambas cosas son válidas, tenemos éxito.

11:31.510 --> 11:35.570
Si tenemos un título válido pero no el precio, fallamos.

11:35.570 --> 11:37.230
También con un precio negativo.

11:37.230 --> 11:39.170
Y por lo tanto esto ahora me parece bien y

11:39.170 --> 11:42.280
esta es ahora nuestra primera implementación ingenua de cómo podría

11:42.280 --> 11:44.500
funcionar un validador de este tipo con la ayuda

11:44.500 --> 11:46.670
de los decoradores de TypeScript.

11:46.670 --> 11:49.150
Y ten en cuenta que todo eso aquí, todos los decoradores,

11:49.150 --> 11:52.310
la función de validación y el registro, estarían ocultos

11:52.310 --> 11:53.590
para ti.

11:53.590 --> 11:55.820
Eso podría ser parte de una biblioteca de terceros en

11:55.820 --> 11:56.780
la que estás trabajando,

11:56.780 --> 11:59.250
por supuesto de una manera más elaborada que la que probablemente

11:59.250 --> 12:01.300
compartes con tus usuarios finales.

12:01.300 --> 12:04.160
Y tú, como usuario final, sólo tendrías que importar estas

12:04.160 --> 12:06.800
cosas, añadir estos decoradores, y llamar a validar,

12:06.800 --> 12:08.840
y tendrías una forma muy conveniente de

12:08.840 --> 12:11.763
añadir validación a tus clases entonces.
