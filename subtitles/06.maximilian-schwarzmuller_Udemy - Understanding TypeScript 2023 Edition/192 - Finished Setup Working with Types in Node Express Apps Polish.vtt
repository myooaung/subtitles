WEBVTT

00:02.170 --> 00:03.420
Instruktor: No to zaczynajmy.

00:03.420 --> 00:06.330
Jak wspomniałem, tutaj stworzę bardzo podstawowe

00:06.330 --> 00:09.130
REST API, ale oczywiście mógłbyś zbudować dowolną

00:09.130 --> 00:10.810
aplikację Node z lub bez ekspresu

00:10.810 --> 00:15.570
i w dowolny sposób z TypeScript, więc to tylko przykład.

00:15.570 --> 00:18.990
Nie jesteś ograniczony do tego konkretnego zastosowania.

00:18.990 --> 00:21.560
W folderze src dodam app. ts, który będzie głównym

00:21.560 --> 00:23.060
punktem wejścia, w którym

00:23.060 --> 00:25.970
uruchomimy ten serwer.

00:25.970 --> 00:29.530
I tam chcę zaimportować coś z Expressu, z tego frameworka

00:29.530 --> 00:31.203
Express.

00:32.970 --> 00:35.460
Teraz już pewnie wiesz, jak możemy dodać tutaj Express

00:35.460 --> 00:37.890
i skonfigurować serwer WWW z Expressem.

00:37.890 --> 00:41.330
Importujemy Express z tą składnią tutaj,

00:41.330 --> 00:46.330
a następnie tutaj możemy wykonać Express jako funkcję.

00:46.380 --> 00:50.170
Otrzymujemy z powrotem taki obiekt app, na którym możemy wywołać listen,

00:50.170 --> 00:53.750
aby nasłuchiwał na określonym porcie na przychodzące żądania.

00:53.750 --> 00:56.120
Teraz to działałoby w normalnym JavaScript,

00:56.120 --> 00:58.420
ale już widzisz, że dostaję tutaj błąd.

00:59.540 --> 01:01.600
Teraz dostaję również sugestię, dlaczego

01:01.600 --> 01:03.500
mogę uzyskać ten błąd tutaj, ponieważ

01:03.500 --> 01:06.290
require faktycznie jest funkcją, która istnieje

01:06.290 --> 01:10.100
w notatce. js, ale nie po stronie przeglądarki.

01:10.100 --> 01:12.540
Teraz w tsconfig. plik json Nie używam żadnych specjalnych

01:12.540 --> 01:16.640
libów, które obsługiwałyby węzeł. js więc w tych TypeScript nie

01:16.640 --> 01:18.120
jest świadomy tej ogólnej

01:18.120 --> 01:20.150
funkcji, która istnieje w

01:20.150 --> 01:22.900
węźle. środowisko js.

01:22.900 --> 01:27.140
Teraz, aby to zadziałało, musimy zainstalować dodatkowy typ za pomocą "npm install

01:27.140 --> 01:30.220
--save-dev" możemy zainstalować "@types/node", aby zainstalować

01:30.220 --> 01:32.410
wszystkie typy, których potrzebujemy do

01:32.410 --> 01:36.291
pracy z node. js Więc uruchommy to polecenie

01:36.291 --> 01:39.460
i zobaczmy, czy to nam pomoże.

01:39.460 --> 01:42.320
Tak, udało się i ten błąd zniknął.

01:42.320 --> 01:44.390
Ale może widziałeś też, że na aplikacji

01:44.390 --> 01:46.680
nie dostałem żadnego autouzupełniania.

01:46.680 --> 01:50.190
Nie wywala też błędu, ale jeśli najedziemy na app zobaczymy,

01:50.190 --> 01:52.410
że TypeScript nie wie co tam jest.

01:52.410 --> 01:54.210
Jest on typu "any".

01:54.210 --> 01:56.530
Więc prawdopodobnie powinniśmy zainstalować

01:56.530 --> 01:59.930
więcej typów, a także zainstalować "@types/express", aby zainstalować

01:59.930 --> 02:02.410
typy specyficzne dla ekspresu.

02:02.410 --> 02:04.320
I to jest wzór, który już znasz.

02:04.320 --> 02:06.850
Przyjrzeliśmy się temu w części kursu dotyczącej

02:06.850 --> 02:08.350
biblioteki stron trzecich.

02:08.350 --> 02:12.030
Tam również pokazałem, jak możesz zainstalować pakiety typów, aby

02:12.030 --> 02:15.220
uzyskać lepsze wsparcie w swoich skryptach TypeScript.

02:15.220 --> 02:19.320
Więc z dodanym tym typem, bez dodatkowej konfiguracji,

02:19.320 --> 02:22.030
Hah, nadal nie działa.

02:22.030 --> 02:23.140
Cóż, powodem tego jest

02:23.140 --> 02:25.330
składnia importu, której tutaj używamy.

02:25.330 --> 02:28.270
To jest zwykły wspólny. js import syntax

02:28.270 --> 02:30.450
which note. js używa domyślnie,

02:30.450 --> 02:33.660
ale tutaj faktycznie jesteśmy w środowisku w TypeScript,

02:33.660 --> 02:36.140
gdzie możemy użyć innej składni importu.

02:36.140 --> 02:38.230
Możemy użyć tej samej składni importu, którą

02:38.230 --> 02:40.373
znamy z modułów ES w przeglądarce.

02:41.240 --> 02:46.240
Możemy więc użyć na przykład "import express from 'express'".

02:46.710 --> 02:48.620
I jeśli to zrobimy, a następnie najedziemy na "app", widzimy

02:48.620 --> 02:49.910
teraz, że jest typu "Express".

02:49.910 --> 02:53.040
Tak więc teraz mamy już wsparcie dla TypeScript.

02:53.040 --> 02:54.569
Teraz jedna ważna uwaga.

02:54.569 --> 02:58.790
W notce. js istnieje również składnia,

02:58.790 --> 03:00.810
która jest podobna do tej.

03:00.810 --> 03:03.420
Teraz jest pod eksperymentalną flagą i

03:03.420 --> 03:06.190
jest pod tą flagą od bardzo dawna, więc używanie

03:06.190 --> 03:10.010
wspólnego. js w notce. js jest zdecydowanie domyślnym

03:10.010 --> 03:13.482
i najczęstszym sposobem dodawania importu i eksportu.

03:13.482 --> 03:16.060
Składnia wyglądająca jak ta jest obsługiwana, jeśli

03:16.060 --> 03:18.380
ustawisz tę eksperymentalną flagę, ale tutaj

03:18.380 --> 03:19.990
w tym kodzie faktycznie nie używamy

03:19.990 --> 03:24.012
tego eksperymentalnego węzła. składnia js.

03:24.012 --> 03:26.209
Zamiast tego używamy TypeScript.

03:26.209 --> 03:29.859
Kiedy skompilujemy to do JavaScript, to się zmieni.

03:29.859 --> 03:31.860
I właściwie mogę to panu pokazać,

03:31.860 --> 03:34.060
żebyśmy też mogli to zrealizować.

03:34.060 --> 03:36.230
Jeśli uruchomisz "tsc" tutaj,

03:36.230 --> 03:40.330
może "tsc-w", aby już wejść w tryb zegarka, widzisz,

03:40.330 --> 03:42.680
że to zaczyna kompilację.

03:42.680 --> 03:44.110
Tworzy on folder dist, a w nim

03:44.110 --> 03:46.770
mamy teraz aplikację. Plik js, a w nim

03:46.770 --> 03:50.040
to, co teraz wygląda inaczej.

03:50.040 --> 03:54.500
Widzisz, tam teraz nie ustawia się tego importu w taki sposób, w jaki

03:54.500 --> 03:55.710
my go mamy tutaj.

03:55.710 --> 03:58.900
Zamiast tego używa innej składni.

03:58.900 --> 04:02.350
Więc tutaj, to jest kod, który faktycznie zostanie wykonany.

04:02.350 --> 04:04.780
I możemy wykonać to z nodemon z tym narzędziem,

04:04.780 --> 04:07.640
które automatycznie restartuje serwer, jeśli

04:07.640 --> 04:09.470
nasz kod się zmieni, otwierając

04:09.470 --> 04:12.230
nową kartę tutaj w terminalu.

04:12.230 --> 04:13.620
Pozostaw drugą zakładkę otwartą,

04:13.620 --> 04:15.960
bo to nasz proces kompilacji TypeScript, a w

04:15.960 --> 04:18.760
tej nowej zakładce chcemy uruchomić nasz serwer z pomocą

04:18.760 --> 04:20.095
nodemona.

04:20.095 --> 04:22.990
W tym celu przejdźmy do pakietu. json i dodajemy nowy

04:22.990 --> 04:26.260
skrypt, być może skrypt startowy, gdzie mówimy

04:26.260 --> 04:30.900
"nodemon dist/app. js", aby nodemon wykonał

04:30.900 --> 04:34.200
ten plik w folderze dist i uruchomił

04:34.200 --> 04:36.360
tym nasz serwer.

04:36.360 --> 04:39.430
I z tym dodanym i pakietem. zapisany plik json możemy

04:39.430 --> 04:43.240
uruchomić npmstart, aby uruchomić nasz serwer deweloperski.

04:43.240 --> 04:47.710
A teraz obsługuje tę aplikację dist. js Teraz mamy ogólną konfigurację,

04:47.710 --> 04:49.230
a TypeScript już wykonuje

04:49.230 --> 04:52.030
tutaj pracę.

04:52.030 --> 04:53.940
Mamy też TypeSupport.

04:53.940 --> 04:55.360
A tu widać w aplikacji. ts możemy napisać

04:55.360 --> 04:57.756
kod, który wygląda bardzo znajomo dzięki

04:57.756 --> 05:01.420
składni importu/eksportu, którą już znamy, ale to co otrzymujemy

05:01.420 --> 05:03.640
jako wyjście jest w końcu zwykłym węzłem

05:03.640 --> 05:07.000
JavaScript. Kod js i to jest niezwykle

05:07.000 --> 05:09.640
przydatne.

05:09.640 --> 05:12.140
Teraz dzięki temu róbmy bardziej pożyteczne rzeczy

05:12.140 --> 05:15.003
niż uruchamianie serwera, który nic nie robi.
