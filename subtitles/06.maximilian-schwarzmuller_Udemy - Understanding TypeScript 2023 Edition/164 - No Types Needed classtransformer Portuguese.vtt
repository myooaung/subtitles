WEBVTT

00:02.270 --> 00:04.040
Instrutor: Então demos uma olhada na

00:04.040 --> 00:05.900
Lodash, uma biblioteca de terceiros que

00:05.900 --> 00:08.270
é construída com JavaScript para JavaScript.

00:08.270 --> 00:11.730
Você também encontra certas bibliotecas de terceiros que realmente

00:11.730 --> 00:13.287
abraçam as características

00:13.287 --> 00:16.480
do tipo script e do tipo script e lhe dão uma nova forma de escrever

00:16.480 --> 00:18.360
código que funciona porque você está

00:18.360 --> 00:21.230
trabalhando com o tipo script.

00:21.230 --> 00:24.950
Um exemplo é o transformador de classe, um exemplo ainda melhor é o validador

00:24.950 --> 00:28.067
de classe; vamos dar uma olhada em ambos aqui.

00:28.067 --> 00:31.360
Mas vamos começar com o transformador de classe.

00:31.360 --> 00:35.870
Digamos que em nosso projeto aqui, eu realmente tenho um modelo, um modelo de

00:35.870 --> 00:38.150
dados, vamos chamá-lo de 'produto'.

00:38.150 --> 00:41.170
Agora vou dar-lhe o nome de produto. modelo. ts, mas você pode

00:41.170 --> 00:43.820
nomear este arquivo como quiser.

00:43.820 --> 00:48.820
Minha idéia é que neste arquivo eu defina uma classe para um produto.

00:49.420 --> 00:52.180
Assim, descrevo como deve ser um produto.

00:52.180 --> 00:55.550
Por exemplo, que tem um título que é um fio e um preço

00:55.550 --> 00:59.070
que é um número e então eu adiciono uma função construtora

00:59.070 --> 01:02.120
onde ambos podem ser inicializados.

01:02.120 --> 01:07.120
Então, string, acrescente preço e então eu disse que este título era igual a

01:07.210 --> 01:09.360
't' e este preço era igual a 'p'.

01:09.360 --> 01:10.810
E é claro que poderíamos ter

01:10.810 --> 01:12.980
usado a inicialização do atalho onde usamos

01:12.980 --> 01:14.423
apenas o construtor.

01:16.150 --> 01:20.400
Então digamos que sempre temos um método, obtenhamos

01:20.400 --> 01:25.400
informações onde eu devolvo uma matriz, digamos onde o primeiro

01:25.950 --> 01:30.850
elemento é o título e o segundo elemento na verdade é uma corda

01:30.850 --> 01:35.770
onde eu tenho um sinal de dólares e depois injetado nesta corda,

01:35.770 --> 01:37.833
este preço.

01:39.030 --> 01:43.030
Aqui um modelo muito simples, uma classe muito simples.

01:43.030 --> 01:45.940
E agora podemos, naturalmente, usar esta classe,

01:45.940 --> 01:49.590
se você quiser, em aplicação. Por isso, lá me livrarei de Lodash e, em vez

01:49.590 --> 01:54.590
disso, importarei produtos de . /produto. Agora para isso você precisa ter

01:56.200 --> 01:58.920
certeza de que no modelo de produto você realmente

01:58.920 --> 02:01.010
exporta esta classe, caso contrário você

02:01.010 --> 02:03.860
não pode importá-la e aqui temos que exportar um produto

02:03.860 --> 02:05.800
como este porque eu estou usando uma

02:05.800 --> 02:07.890
exportação nomeada aqui, adicionando

02:07.890 --> 02:11.950
a palavra-chave de exportação bem na frente da classe.

02:11.950 --> 02:16.497
Portanto, agora aqui, é claro, podemos criar um novo produto,

02:18.150 --> 02:23.150
um livro que custa 12. 99 e posteriormente eu console log p1 obter

02:24.080 --> 02:28.190
informações e nós devemos realmente registrar esta matriz.

02:28.190 --> 02:31.390
Por isso, se agora começamos aqui, nosso web pack

02:31.390 --> 02:34.250
dev começa e devemos ver este belo conjunto

02:34.250 --> 02:37.340
com informações sobre este livro.

02:37.340 --> 02:39.463
Portanto, se eu recarregar aqui, aqui está ele.

02:40.630 --> 02:43.170
Isso não é muito chique, é claro, funciona,

02:43.170 --> 02:44.930
mas isso não é novidade.

02:44.930 --> 02:47.270
Agora um cenário comum em aplicações maiores

02:47.270 --> 02:49.610
é que você pode estar baixando alguns dados,

02:49.610 --> 02:52.150
digamos de um servidor, você está pegando

02:52.150 --> 02:54.490
dados de um servidor back end e esse é o servidor

02:54.490 --> 02:58.370
que lhe devolve alguns dados json que você passa, que então pode

02:58.370 --> 03:01.560
ser uma lista de produtos.

03:01.560 --> 03:05.520
Portanto, aqui podemos ter produtos que recebemos do servidor onde temos

03:05.520 --> 03:10.520
então um título, um tapete e um preço, 29. 99 e depois temos também

03:13.047 --> 03:18.047
este livro, portanto, título, livro e aí

03:18.120 --> 03:22.830
um preço de 10. 99, digamos.

03:22.830 --> 03:25.310
Portanto, é um conjunto muito simples de dados

03:25.310 --> 03:27.730
que depois obtemos da parte de trás.

03:27.730 --> 03:30.590
Agora estes são objetos JavaScript, mas não

03:30.590 --> 03:33.730
são instâncias de nosso modelo de produto.

03:33.730 --> 03:37.220
E esse é um cenário típico onde você obtém dados como json,

03:37.220 --> 03:40.990
não tem dados anexados como a que função do construtor você está

03:40.990 --> 03:42.850
codificado na frente.

03:42.850 --> 03:46.770
Seu servidor sabe disso e a json também é um formato que apenas

03:46.770 --> 03:51.230
transmite dados básicos, você não tem meta dados ricos para seus

03:51.230 --> 03:53.540
objetos anexados ali.

03:53.540 --> 03:56.300
Ou pelo menos você teria que fazer isso manualmente.

03:56.300 --> 04:00.120
Portanto, em outras palavras, os produtos que recebemos aqui são objetos

04:00.120 --> 04:03.310
que não têm um método de obtenção de informações.

04:03.310 --> 04:08.230
Agora, tradicionalmente, se você agora quisesse converter isto em

04:08.230 --> 04:12.680
exemplos de seu modelo, teria que fazer isso manualmente.

04:12.680 --> 04:17.680
Você poderia ter seus produtos carregados que então, digamos que usam

04:19.260 --> 04:22.770
produtos, chamam o método do mapa e em cada produto

04:22.770 --> 04:25.680
dessa matriz nós então devolvemos um novo

04:25.680 --> 04:30.680
produto por produto. título e produto. e depois teríamos uma gama cheia

04:34.330 --> 04:36.660
de instâncias reais de funções de construção

04:36.660 --> 04:40.230
de produtos e então poderíamos realmente fazer um loop através

04:40.230 --> 04:43.163
disso, carregando produtos e depois lá dentro,

04:44.330 --> 04:51.083
por exemplo, o console log prod.

04:51.083 --> 04:51.083
obter informações.

04:52.150 --> 04:56.010
Assim poderíamos transformar manualmente um array ou também

04:56.010 --> 05:00.070
um único objeto sem nome Vanilla JavaScript em uma instância de

05:00.070 --> 05:02.880
uma função de construção específica e, portanto,

05:02.880 --> 05:05.000
obteríamos esta saída.

05:05.000 --> 05:07.220
Agora, fazer isto manualmente é incômodo.

05:07.220 --> 05:09.590
É um monte de passos extras aqui, esta

05:09.590 --> 05:12.710
é apenas uma simples transformação, é claro.

05:12.710 --> 05:16.690
É aí que o pacote de transformadores de classe pode nos ajudar.

05:16.690 --> 05:19.330
Torna isso muito, muito simples.

05:19.330 --> 05:22.390
Lá, nós também definimos uma classe no tipo script

05:22.390 --> 05:25.010
em nosso caso aqui, então podemos estar obtendo

05:25.010 --> 05:29.340
alguns dados, digamos de um servidor e então podemos realmente chamar

05:29.340 --> 05:32.430
um método simples de conveniência e ele converterá

05:32.430 --> 05:36.893
automaticamente nossos dados nos modelos certos.

05:38.100 --> 05:40.030
Agora para isso, vamos antes de

05:40.030 --> 05:44.840
tudo rodar um transformador de classe nmp install - salve, como este e uma vez

05:45.730 --> 05:47.820
que este terminar, vamos rodar npm

05:47.820 --> 05:50.350
install reflect-metadata-- salve um pacote,

05:51.451 --> 05:54.470
este pacote no final depende de.

05:54.470 --> 05:57.460
Portanto, aqui vamos importar isto também e,

05:57.460 --> 06:02.460
como também nos instrui aqui nas instruções de configuração aqui, a importação

06:02.890 --> 06:07.680
reflete metadados em seus arquivos de entrada de rota, no meu caso aqui

06:07.680 --> 06:11.410
no aplicativo. omporto esta biblioteca de terceiros

06:11.410 --> 06:14.970
que acabamos de instalar como uma dependência de nossa biblioteca.

06:14.970 --> 06:17.210
Agora que na verdade não há passos de js e, portanto,

06:17.210 --> 06:18.610
podemos pular este aqui.

06:18.610 --> 06:20.180
No entanto, no navegador ainda

06:20.180 --> 06:24.780
temos que instalar os mesmos pacotes e acrescentar esta importação aqui é bom porque

06:24.780 --> 06:26.880
estamos usando web pack e, portanto,

06:26.880 --> 06:30.090
agora estamos realmente prontos para ir.

06:30.090 --> 06:35.090
E agora podemos importar algo do transformador de classe

06:36.290 --> 06:40.210
e então que algo é o método 'plain to class'.

06:40.210 --> 06:42.630
Este pacote também tem alguns outros métodos.

06:42.630 --> 06:45.200
Você pode saber mais sobre eles aqui nos documentos oficiais.

06:45.200 --> 06:49.060
Mas o método principal é o "simples para a classe".

06:49.060 --> 06:54.060
Você pode usá-lo aqui para definir seus produtos carregados, por exemplo.

06:55.150 --> 06:58.230
Em vez de fazer isto manualmente aqui como fizemos antes, podemos

06:58.230 --> 07:01.480
colocar os produtos carregados em pé de igualdade com a classe e

07:01.480 --> 07:03.760
agora passar dois argumentos aqui.

07:03.760 --> 07:08.070
O primeiro argumento é a classe para a qual queremos convertê-la.

07:08.070 --> 07:10.190
No meu caso aqui, produto.

07:10.190 --> 07:12.700
E eu não o instanto nem o chamo,

07:12.700 --> 07:15.560
apenas aponto para essa classe.

07:15.560 --> 07:19.460
O segundo argumento são os dados que queremos transformar.

07:19.460 --> 07:23.520
Portanto, no meu caso aqui, isto é, produtos.

07:23.520 --> 07:25.840
E agora o que este pacote fará é passar

07:25.840 --> 07:28.100
por cima desta matriz transformando

07:28.100 --> 07:31.034
cada objeto Vanilla JavaScript simples aqui

07:31.034 --> 07:34.090
em uma instância desta classe.

07:34.090 --> 07:37.830
Portanto, se agora salvarmos isto e executarmos npm iniciar novamente,

07:37.830 --> 07:40.330
a página web que inicia o servidor iniciará novamente

07:40.330 --> 07:43.270
e deverá construir este projeto sem erros.

07:43.270 --> 07:46.540
Se eu recarregar a página, obtenho o mesmo resultado de

07:46.540 --> 07:49.530
antes, mas, claro, com menos código de nosso lado,

07:49.530 --> 07:51.870
porque estamos usando este pacote.

07:51.870 --> 07:53.403
E o surpreendente sobre

07:53.403 --> 07:57.070
este pacote é que ele funciona tão bem aqui porque

07:57.070 --> 08:01.230
ele se baseia no tipo script e utiliza o fato de termos uma

08:01.230 --> 08:04.280
classe lá na qual podemos apontar.

08:04.280 --> 08:08.730
Mas para ser honesto, este pacote funciona particularmente bem com o tipo script,

08:08.730 --> 08:10.900
mas não usa uma característica específica

08:10.900 --> 08:12.600
do tipo script.

08:12.600 --> 08:16.630
As aulas, por exemplo, também existem no Vanilla JavaScript.

08:16.630 --> 08:20.170
Portanto, embora isto seja desenvolvido principalmente para o tipo

08:20.170 --> 08:23.610
script, na verdade também funciona em Vanilla JavaScript.

08:23.610 --> 08:26.633
No entanto, isso não será verdade para o próximo pacote.
