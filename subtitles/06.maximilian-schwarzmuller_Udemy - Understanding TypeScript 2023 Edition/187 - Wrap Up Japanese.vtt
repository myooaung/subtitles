WEBVTT

00:02.240 --> 00:05.310
-：このモジュールでは､ reactとTypeScriptについて見てきました｡

00:05.310 --> 00:06.991
また､ TypeScriptは､

00:06.991 --> 00:16.020
明確でエラーのないコードを書くために､ たくさんの素晴らしい追加機能やチェックを追加することができます｡

00:16.020 --> 00:18.240
さて､ ここでいくつかの非常に重要なパターンと､

00:18.240 --> 00:20.290
PropsやStateといった非常に重要なReactの機能､

00:20.290 --> 00:26.350
そしてそれらをTypeScriptでどう使うかを紹介しました｡

00:26.350 --> 00:29.150
また､ このモジュールでは使用しませんでしたが､

00:29.150 --> 00:35.520
Reduxのような私たちの機能性を追加することをどのように考えるべきかを示しました｡

00:35.520 --> 00:36.810
また､ 最終講義の最後にも書きましたが､

00:36.810 --> 00:42.150
この講座で学んだ他のことも忘れないでください｡

00:42.150 --> 00:46.060
あなたが学んだすべての型､ そしてTypeScriptでできること｡

00:46.060 --> 00:48.640
ここにコンフィギュレーションを含めて｡ 

00:48.640 --> 00:53.600
学んだことはすべて､ このReactに加え､ TypeScriptのプロジェクトにも適用されます｡

00:53.600 --> 00:55.960
せっかくいいコンフィギュレーションができたのに､

00:55.960 --> 00:59.770
それをいじくれないということはないでしょう｡

00:59.770 --> 01:04.500
微調整もできますし､ このコースで学んだことはすべてこのプロジェクトで活かせます｡

01:04.500 --> 01:06.870
というのも､ 結局のところ､ Reactっぽいコードを書いていて､

01:06.870 --> 01:09.430
JSXを使うことができたとしても､ JavaScript､

01:09.430 --> 01:15.960
特にTypeScriptのコードを書いていることに変わりはないのです｡

01:15.960 --> 01:18.510
したがって､ コースで学んだことはすべて､

01:18.510 --> 01:20.310
ここでも有効です｡

01:20.310 --> 01:23.880
忘れがちなことなので､ いつも心に留めておいてください｡ 

01:23.880 --> 01:28.560
そして､ それを踏まえて､ 次のReactプロジェクトをTypeScriptで作ることを検討してください｡

01:28.560 --> 01:32.083
今､ あなたは確かに､ どのように始め､ どのように動作するかを知っています｡ 
