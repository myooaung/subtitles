WEBVTT

1
00:00:02.440 --> 00:00:04.260
<v ->Before we dive into more examples,</v>

2
00:00:04.260 --> 00:00:05.433
let's understand the order

3
00:00:05.433 --> 00:00:07.940
in which decorators run though.

4
00:00:07.940 --> 00:00:10.530
And here, it's important to understand

5
00:00:10.530 --> 00:00:11.950
that first of all,

6
00:00:11.950 --> 00:00:13.710
they're all running without us

7
00:00:13.710 --> 00:00:15.396
instantiating this product.

8
00:00:15.396 --> 00:00:16.600
Or, in other words,

9
00:00:16.600 --> 00:00:18.300
if I create a product here with,

10
00:00:18.300 --> 00:00:19.670
new product,

11
00:00:19.670 --> 00:00:21.233
book, for $19,

12
00:00:21.233 --> 00:00:23.730
and I create another product here,

13
00:00:23.730 --> 00:00:24.563
book two for,

14
00:00:24.563 --> 00:00:26.660
$29.

15
00:00:26.660 --> 00:00:27.887
this complied without errors

16
00:00:27.887 --> 00:00:29.970
of my decorator code here

17
00:00:29.970 --> 00:00:31.730
doesn't run more often.

18
00:00:31.730 --> 00:00:35.350
So it's not the instantiation of this class that matters.

19
00:00:35.350 --> 00:00:36.680
All these decorators,

20
00:00:36.680 --> 00:00:38.452
no matter if it was a property decorator,

21
00:00:38.452 --> 00:00:41.810
a method decorator, an accessor decorator,

22
00:00:41.810 --> 00:00:43.620
or a parameter decorator,

23
00:00:43.620 --> 00:00:46.770
they all executed when you defined this class,

24
00:00:46.770 --> 00:00:48.930
and that's important to understand.

25
00:00:48.930 --> 00:00:50.960
These are not decorators that run

26
00:00:50.960 --> 00:00:53.190
at run time when you call them method

27
00:00:53.190 --> 00:00:55.100
or when you work with a property.

28
00:00:55.100 --> 00:00:57.190
This is not what they do.

29
00:00:57.190 --> 00:00:59.360
Instead these decorators allow you to

30
00:00:59.360 --> 00:01:01.875
do additional behind the scenes set up work

31
00:01:01.875 --> 00:01:04.397
when a class is defined.

32
00:01:04.397 --> 00:01:06.590
Back to that metaprogramming concept

33
00:01:06.590 --> 00:01:08.070
I explained earlier, right.

34
00:01:08.070 --> 00:01:10.200
That's the idea behind decorators

35
00:01:10.200 --> 00:01:12.410
or that's their core use case.

36
00:01:12.410 --> 00:01:15.520
They're not event listeners you add to something

37
00:01:15.520 --> 00:01:17.100
so that when you work with a property

38
00:01:17.100 --> 00:01:18.490
you can run some code.

39
00:01:18.490 --> 00:01:19.740
You can make something like that

40
00:01:19.740 --> 00:01:21.069
work with decorators actually,

41
00:01:21.069 --> 00:01:23.740
but by tweaking and editing

42
00:01:23.740 --> 00:01:24.977
something behind the scenes,

43
00:01:24.977 --> 00:01:26.756
but the decorator itself

44
00:01:26.756 --> 00:01:29.710
really is just a function

45
00:01:29.710 --> 00:01:32.400
that executes when your class is defined,

46
00:01:32.400 --> 00:01:33.233
when your

47
00:01:33.233 --> 00:01:35.010
(mumbles)

48
00:01:35.010 --> 00:01:37.460
and you can then use the decorator

49
00:01:37.460 --> 00:01:39.890
to do some behind the scenes work,

50
00:01:39.890 --> 00:01:42.250
to then set up some code that should run

51
00:01:42.250 --> 00:01:43.660
whenever this is called.

52
00:01:43.660 --> 00:01:47.310
To add extra meta data or store some data

53
00:01:47.310 --> 00:01:50.030
about a property somewhere else in your project

54
00:01:50.030 --> 00:01:51.696
or in your library, which you're creating.

55
00:01:51.696 --> 00:01:54.075
This is what you can use decorators for,

56
00:01:54.075 --> 00:01:55.756
and that's all the pattern

57
00:01:55.756 --> 00:01:58.420
you'll kind of see when I now show you

58
00:01:58.420 --> 00:02:00.320
these examples of what you

59
00:02:00.320 --> 00:02:02.290
could build with decorators.

60
00:02:02.290 --> 00:02:04.740
They're adding extra functionality

61
00:02:04.740 --> 00:02:06.200
behind the scenes

62
00:02:06.200 --> 00:02:08.060
which then sometimes can execute

63
00:02:08.060 --> 00:02:10.530
when you do something with your class

64
00:02:10.530 --> 00:02:11.600
or with your method,

65
00:02:11.600 --> 00:02:12.740
but which can also do

66
00:02:12.740 --> 00:02:14.313
totally different things.

67
00:02:15.240 --> 00:02:17.860
That's all important for our person example

68
00:02:17.860 --> 00:02:21.320
from earlier with the template decorator.

69
00:02:21.320 --> 00:02:22.980
This does not add this template

70
00:02:22.980 --> 00:02:25.160
whenever we instantiate a person here.

71
00:02:25.160 --> 00:02:27.890
It does add it whenever we define this class.

72
00:02:27.890 --> 00:02:29.820
We would have to add extra logic

73
00:02:29.820 --> 00:02:31.650
inside of our decorator function

74
00:02:31.650 --> 00:02:33.140
to change this behavior.

75
00:02:33.140 --> 00:02:35.980
And to maybe just store this template

76
00:02:35.980 --> 00:02:38.441
in some other data structure of our project

77
00:02:38.441 --> 00:02:41.380
which we then tab into whenever

78
00:02:41.380 --> 00:02:43.650
we do create a new person here.

79
00:02:43.650 --> 00:02:45.278
So then we basically just set this up

80
00:02:45.278 --> 00:02:47.240
when we define the class,

81
00:02:47.240 --> 00:02:48.400
but then we just store it

82
00:02:48.400 --> 00:02:49.890
behind the scenes internally

83
00:02:49.890 --> 00:02:51.170
and we can then use it

84
00:02:51.170 --> 00:02:52.350
when we want to use it.

85
00:02:52.350 --> 00:02:54.160
Right now we always render this

86
00:02:54.160 --> 00:02:55.380
when we define this class,

87
00:02:55.380 --> 00:02:57.610
not when you create a new instance.

88
00:02:57.610 --> 00:02:59.570
This is how decorators execute

89
00:02:59.570 --> 00:03:00.403
and as I said,

90
00:03:00.403 --> 00:03:01.940
now I will show you a couple of examples

91
00:03:01.940 --> 00:03:04.504
where we take advantage of decorators in general

92
00:03:04.504 --> 00:03:06.900
and of their execution time

93
00:03:06.900 --> 00:03:08.883
to do some nice things with them.

