WEBVTT

00:02.190 --> 00:03.570
- : Nous avons aussi un module ici.

00:03.570 --> 00:06.050
Le module est une option que je vais ignorer pour l'instant,

00:06.050 --> 00:07.540
car elle n'a vraiment de sens qu'une

00:07.540 --> 00:10.830
fois que nous aurons appris ce que sont les modules dans TypeScript et comment

00:10.830 --> 00:13.400
nous pouvons connecter plusieurs fichiers.

00:13.400 --> 00:15.350
Alors ignorons ça pour l'instant.

00:15.350 --> 00:17.250
La Lib est intéressante.

00:17.250 --> 00:20.890
Lib est une option qui vous permet de spécifier quels

00:20.890 --> 00:25.650
objets et fonctionnalités par défaut TypeScript connaît.

00:25.650 --> 00:28.580
J'entends par là des choses comme travailler avec le dom.

00:28.580 --> 00:31.930
Disons en indice. html nous avons un bouton et sur ce bouton

00:31.930 --> 00:33.700
nous disons, "Cliquez sur moi. Maintenant, quand nous cliquons sur ce bouton, nous

00:33.700 --> 00:35.100
voulons juste imprimer le message.

00:35.100 --> 00:36.610
Maintenant, dans l'app. ts nous pouvons sélectionner ce bouton.

00:36.610 --> 00:39.820
Nous pouvons accéder à ce bouton

00:39.820 --> 00:41.420
avec le document. querySelector.

00:43.808 --> 00:44.641
Par exemple, en sélectionnant le premier bouton que nous trouvons.

00:44.641 --> 00:48.130
Maintenant, si on fait ça, alors ça marche.

00:48.130 --> 00:51.580
Nous n'avons aucun type d'erreur ici.

00:51.580 --> 00:53.000
Donc, si je vais sur mon bouton

00:53.000 --> 00:58.000
et que j'ajoute un EventListener ici, j'obtiens une erreur ici en fait parce que TypeScript ne sait pas

00:58.390 --> 01:00.990
avec certitude si nous trouvons un bouton ici.

01:00.990 --> 01:04.010
Pour l'instant, nous pouvons contourner ce problème en ajoutant

01:04.010 --> 01:07.310
un point d'exclamation après cette ligne et je reviendrai sur ce que cela

01:07.310 --> 01:08.860
fait exactement dans le futur.

01:08.860 --> 01:11.320
En gros, il dit à TypeScript : "Ne vous inquiétez

01:11.320 --> 01:13.667
pas, un tel bouton existera.

01:13.667 --> 01:15.097
"Nous allons obtenir une valeur ici. Donc maintenant nous pouvons ajouter un événement de clic ici.

01:15.097 --> 01:17.360
Et ensuite trouver une fonction anonyme

01:17.360 --> 01:19.470
peut-être où une console. le journal a cliqué.

01:19.470 --> 01:21.670
Maintenant, la chose intéressante ici n'est pas tant

01:21.670 --> 01:24.920
que j'ai dû ajouter le point d'exclamation,

01:24.920 --> 01:26.450
comme je l'ai dit, j'y reviendrai, mais

01:26.450 --> 01:29.310
que si je lance tsc, cela compile tout simplement.

01:29.310 --> 01:31.150
Maintenant, TypeScript ne devrait-il

01:31.150 --> 01:34.840
pas se plaindre que le document est inconnu ici ?

01:34.840 --> 01:38.370
Comment sait-il que nous disposons d'un tel document, d'une telle

01:38.370 --> 01:39.690
constante ou variable ?

01:39.690 --> 01:43.290
Comment sait-il que même si nous avons cette disponibilité,

01:43.290 --> 01:45.610
il contient un objet qui a notre méthode

01:45.610 --> 01:48.350
querySelector ?

01:48.350 --> 01:50.010
Comment sait-il que le bouton est quelque

01:50.010 --> 01:51.690
chose qui a la méthode addEventListener ?

01:51.690 --> 01:55.932
Comment TypeScript sait-il tout cela ?

01:55.932 --> 01:57.120
Maintenant vous pourriez dire, "Bien sûr qu'il sait. Parce que dans Vanilla JavaScript,

01:57.120 --> 01:59.290
ce serait un code valide, mais gardez à l'esprit que lorsque

01:59.290 --> 02:01.430
vous écrivez du code TypeScript, vous ne l'écrivez pas

02:01.430 --> 02:03.290
nécessairement pour le navigateur.

02:03.290 --> 02:05.580
Vous pourriez être en train d'écrire votre Node. js avec TypeScript et

02:05.580 --> 02:08.080
là effectivement tout cela

02:08.080 --> 02:11.310
ne fonctionnerait pas.

02:11.310 --> 02:13.200
Donc, la raison pour laquelle cela

02:13.200 --> 02:14.630
fonctionne est cette option lib et comme vous le

02:14.630 --> 02:18.280
voyez, elle n'est même pas définie ici, mais si elle n'est pas définie, certaines valeurs par défaut sont supposées.

02:18.280 --> 02:21.940
S'il n'est pas défini, les valeurs par défaut dépendent

02:21.940 --> 02:24.420
de votre cible JavaScript ici, et pour

02:24.420 --> 02:28.180
es6, il inclut par défaut toutes les fonctionnalités qui

02:28.180 --> 02:31.536
sont globalement disponibles dans es6.

02:31.536 --> 02:33.270
Par exemple, l'objet Map qui est disponible dans es6.

02:33.270 --> 02:35.940
Il ne se plaindra donc pas si vous utilisez Map.

02:35.940 --> 02:40.120
Cela suppose donc que toutes les fonctionnalités

02:40.120 --> 02:45.120
es6 qui sont disponibles globalement en JavaScript, le sont

02:46.400 --> 02:48.700
également en TypeScript.

02:50.677 --> 02:51.780
De plus, il suppose

02:51.780 --> 02:54.530
que toutes les API DOM sont disponibles.

02:54.530 --> 02:57.070
Vous trouverez les descriptions détaillées de toutes

02:57.070 --> 03:00.670
ces options dans la boîte officielle dont le lien figure dans le cours à la

03:00.670 --> 03:01.740
fin de ce module.

03:01.740 --> 03:04.550
Pour résumer, si l'option lib n'est pas définie, certaines valeurs

03:04.550 --> 03:07.300
par défaut sont prises en charge et ce sont généralement celles

03:07.300 --> 03:09.490
dont vous avez besoin pour faire fonctionner TypeScript

03:09.490 --> 03:11.520
dans le navigateur.

03:11.520 --> 03:13.760
Ainsi, toutes les API DOM ont disparu.

03:13.760 --> 03:16.030
Si nous ajoutons ce commentaire et

03:16.030 --> 03:19.014
que je compile tout, j'obtiens une erreur, parce

03:19.014 --> 03:20.670
que maintenant qu'ils l'ajoutent,

03:20.670 --> 03:24.780
nous n'avons plus les paramètres par défaut.

03:24.780 --> 03:26.010
Au lieu de cela, nous disons maintenant : "Hé, s'il

03:26.010 --> 03:28.050
vous plaît, incluez "quelques bibliothèques par défaut", quelques définitions

03:28.050 --> 03:30.370
de type par défaut pourrait-on dire, que je vais vous donner dans ce tableau.

03:30.370 --> 03:32.437
Et, comme vous le voyez, je ne passe

03:32.437 --> 03:36.330
aucune description, aucun chemin, aucune valeur ici.

03:36.330 --> 03:39.470
Et donc, ce que je dis à TypeScript maintenant, c'est : "Hey, en ce qui

03:39.470 --> 03:43.213
concerne toutes les valeurs par défaut, vous savez, "s'il vous plaît prenez ceci

03:44.162 --> 03:45.050
en compte. Et, tu sais, rien.

03:45.050 --> 03:46.920
Donc, cela ne fonctionne que si cet élément est

03:46.920 --> 03:50.037
commenté, car TypeScript prendra en compte certaines valeurs par défaut.

03:50.037 --> 03:51.770
Si je définis explicitement la valeur

03:51.770 --> 03:53.580
par défaut, alors TypeScript, bien sûr,

03:53.580 --> 03:55.300
adhère à ce que je définis ici.

03:55.300 --> 03:57.410
Et ici par exemple, il ne connaît pas le document,

03:57.410 --> 03:59.740
il ne connaît même pas la console ici.

03:59.740 --> 04:01.600
Donc, nous voulons définir deux valeurs plus

04:01.600 --> 04:02.680
raisonnables et, encore

04:02.680 --> 04:05.410
une fois, si vous appuyez sur l'espace de contrôle, et ici vous

04:05.410 --> 04:07.343
obtenez la complétion automatique.

04:08.900 --> 04:10.930
Par exemple, nous pourrions y ajouter dom.

04:10.930 --> 04:12.360
C'est un identifiant et il y a quelques identifiants

04:12.360 --> 04:13.800
prédéfinis, que TypeScript comprend, encore une

04:13.800 --> 04:15.800
fois, vous trouverez une liste complète dans les docs officiels.

04:15.800 --> 04:18.280
Les documents relatifs à cette option

04:18.280 --> 04:21.070
sont également joints à cette conférence.

04:21.070 --> 04:22.840
Il s'agit donc d'un identifiant que

04:22.840 --> 04:26.070
TypeScript comprend et qui déverrouille toutes les API DOM dans

04:26.070 --> 04:27.750
TypeScript, de sorte que TypeScript

04:27.750 --> 04:30.100
comprenne ce que vous faites ici.

04:30.100 --> 04:32.680
Donc maintenant, vous voyez déjà qu'il connaît la console,

04:32.680 --> 04:35.150
il connaît le document, et ainsi de suite.

04:35.150 --> 04:37.040
Maintenant que nous travaillons avec

04:37.040 --> 04:40.100
le Next-Gen JavaScript, nous devons également ajouter l'option

04:40.100 --> 04:42.550
es6, afin que TypeScript comprenne également toutes

04:42.550 --> 04:45.400
les options es6 globalement disponibles.

04:45.400 --> 04:47.896
Et c'est aussi une bonne idée d'ajouter du dom. itérable et

04:47.896 --> 04:50.830
scripteur.

04:50.830 --> 04:54.130
Avec cela, nous débloquerons toutes les fonctionnalités JavaScript de base que vous

04:54.130 --> 04:56.540
souhaitez utiliser et c'est, d'ailleurs, la configuration

04:56.540 --> 05:00.620
par défaut exacte que vous obtenez lorsque vous définissez

05:00.620 --> 05:02.530
la cible sur es6, de toute façon.

05:02.530 --> 05:05.250
Ainsi, si vous commentez et configurez cette option, vous

05:05.250 --> 05:07.360
obtenez exactement le même comportement que

05:07.360 --> 05:09.980
si vous ne spécifiez pas du tout la librairie.

05:09.980 --> 05:13.550
Maintenant, ici, je vais commenter que dans la pensée

05:13.550 --> 05:15.860
et avec cela ce sera compiler.

05:15.860 --> 05:17.959
Encore une fois, ce réglage est un peu redondant,

05:17.959 --> 05:20.920
mais je veux juste expliquer ce qu'il fait.
