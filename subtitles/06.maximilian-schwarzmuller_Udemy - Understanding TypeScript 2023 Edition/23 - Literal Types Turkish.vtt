WEBVTT

00:02.350 --> 00:03.921
Eğitmen: Şimdi, burada sendika tipleri var.

00:03.921 --> 00:07.440
Birlik türleri fikrini geliştirelim ve ayrıca

00:07.440 --> 00:09.764
Literal türleri tanıtalım.

00:09.764 --> 00:14.290
Gerçek tipler, belirli bir değişkenin veya parametrenin, diyelim

00:14.290 --> 00:16.436
ki bir sayı veya bir dize tutması

00:16.436 --> 00:19.700
gerektiğini söylemekle yetinmediğiniz, tutması

00:19.700 --> 00:21.230
gereken tam değer konusunda

00:21.230 --> 00:23.800
çok net olduğunuz tiplerdir.

00:23.800 --> 00:26.064
Bunu zaten burada, temel bilgilerde erkenden gördük.

00:26.064 --> 00:28.408
Örneğin iki numaralı konst.

00:28.408 --> 00:32.098
Orada, eğer bunun üzerine gelirsem, çıkarılan türün sayı değil

00:32.098 --> 00:35.680
2 olduğunu görürsünüz. 8.

00:35.680 --> 00:37.290
Ve türler grubu bu somut sayıyı

00:37.290 --> 00:41.220
burada bir tür olarak çıkarmıştır çünkü bu bir sabittir.

00:41.220 --> 00:43.810
Asla değişmeyecektir ve bu nedenle tipler grubu burada atadığım

00:43.810 --> 00:48.211
değerin tam olarak sahip olduğum tip olduğunu bilir. Yani tabii ki bu bir sayı,

00:48.211 --> 00:52.796
2 diyebilirsiniz. 8 sayı türünden türetilmiştir ancak

00:52.796 --> 00:56.320
belirli bir sayıdır. Ve bu sadece sayılar için

00:56.320 --> 00:59.160
değil, aynı zamanda dizeler vb. için

00:59.160 --> 01:02.860
de geçerlidir. Ve özellikle telli çalgılar için çok faydalı olabilir.

01:02.860 --> 01:07.420
Diyelim ki burada birleşik fonksiyonumuzda sayılar veya dizeler bekliyoruz ve bunları

01:07.420 --> 01:10.190
elde ettiğimiz şeye göre farklı şekilde birleştiriyoruz,

01:10.190 --> 01:13.756
ancak aynı zamanda fonksiyonu çağıranın sonucun nasıl döndürülmesi

01:13.756 --> 01:18.756
gerektiğini tanımlamasına izin vermek istiyoruz, böylece temelde sayıdan dizeye veya tam

01:18.880 --> 01:25.370
tersi bir dönüşümü zorlayabiliriz.

01:25.370 --> 01:25.370
Bunu

01:25.370 --> 01:29.740
üçüncü parametre ile yapabiliriz ve buna sonuç türü veya sonuç dönüşümü diyebiliriz

01:29.740 --> 01:33.208
veya nasıl adlandırmak isterseniz adlandırabiliriz ve bunu bir dize

01:33.208 --> 01:37.240
ile tanımlamak istiyorum. Bu yüzden bunu string olarak

01:37.240 --> 01:41.122
ayarlayacağım. Şimdi benim fikrim, combine'ı

01:41.122 --> 01:45.625
burada iki sayı ile çağırabilirim ve örneğin "as-number" dizesini

01:45.625 --> 01:50.625
geçirebilirim ve burada hangi tanımlayıcıyı kullanacağınız tamamen

01:50.630 --> 01:55.630
size kalmış. Aşağıda "as-text" olabilir, ancak burada

01:56.260 --> 01:59.357
CombinedStringAges şeklinde başka bir kombinasyonumuz

02:02.910 --> 02:07.310
da olabilir, burada iki dizgi geçiriyorum, ancak yine de bunu "as-number"

02:07.310 --> 02:10.030
olarak çıktılamak istiyorum ve bu, üçüncü parametrenin

02:10.030 --> 02:13.540
bir dönüşümü zorlamak için yararlı olabileceği bir durumdur,

02:13.540 --> 02:17.050
çünkü burada iki dizgi geçirirsem normalde bunu bu else dalına

02:17.050 --> 02:19.950
dönüştürür ve birleştiririz ve bunun yerine bunu

02:19.950 --> 02:24.730
bir sayı olarak döndürmek isteyebilirim, böylece burada birleşik dize aracılarını

02:24.730 --> 02:34.030
da konsol günlüğüne kaydedebilirim.

02:34.030 --> 02:34.030
Şimdi

02:34.030 --> 02:37.512
tek yapmamız gereken, if kontrollerimize resultConversion'ı dahil ederek bu tanımlayıcıları

02:37.512 --> 02:41.730
fonksiyonumuzda dikkate almak. Şimdi soru tam olarak ne yapmak

02:41.730 --> 02:45.700
istediğimizdir; bu iki dizeyi sayı olarak eklenmeye

02:45.700 --> 02:49.930
zorlayabileceğimizden emin olmak mı istiyoruz yoksa

02:49.930 --> 02:54.012
matematiksel bir hesaplama ya da bir dize birleştirme

02:54.012 --> 02:58.695
olsa da sonucu bir metne ya da sayıya dönüştürülmeye zorlamak

02:58.695 --> 03:03.039
mı istiyoruz? Eğer bir dönüşümü zorlamak istiyorsak,

03:03.039 --> 03:05.960
buraya if kontrolünü ekleyebilir ve sonuç

03:05.960 --> 03:10.382
dönüşümünün "as-number "a eşit olup olmadığını kontrol edebiliriz

03:10.382 --> 03:15.340
ve eğer durum buysa, sonucu bir sayıya dönüştüren önünde bir artı ile

03:15.340 --> 03:18.826
döndürmek istiyorum, alternatif örneğin parseFloat

03:18.826 --> 03:24.420
olabilirdi, ancak burada biraz daha kısa olduğu için sadece artıya gideceğim

03:24.420 --> 03:29.420
ve bir string olarak bir çıktıyı zorlamak için sonucu toString döndürmek

03:30.156 --> 03:33.593
istiyorum.

03:34.570 --> 03:38.883
Şimdi hesaplamayı elde ettiğimiz gerçek türe göre yapıyoruz, ancak

03:38.883 --> 03:42.300
daha sonra sonuca dönüştürüyoruz, bunu yapmanın bir

03:42.300 --> 03:46.360
yolu budur ve bunu kaydedip bu dosyayı derlersek, elde ettiğim

03:47.470 --> 03:51.020
sonucun bu olduğunu görürüz ve örneğin buradaki string

03:51.020 --> 03:54.759
kombinasyonumuz için bu çıktıyı alırız çünkü dediğim gibi,

03:54.759 --> 03:58.520
kombinasyonun kendisi, yani hesaplama, burada string olan

03:58.520 --> 04:02.530
beslediğimiz türe göre yapılır, bu yüzden onu birleştiririz

04:02.530 --> 04:05.860
ve sonra sadece sonuca dönüştürürüz.

04:05.860 --> 04:09.593
Alternatif mantık, buradaki türü kontrol etmek

04:09.593 --> 04:14.320
ve burada belirttiğimiz dönüş türüne göre farklı bir işlem

04:14.320 --> 04:19.180
yapmak olacaktır. Dolayısıyla bunu yorumlayabiliriz

04:19.180 --> 04:22.600
ve bunun yerine burada, birinci girdinin türü sayı

04:22.600 --> 04:26.230
ve ikinci girdinin türü sayı ise veya resultConversion

04:27.890 --> 04:30.865
"as-number" değerine eşitse, değerleri bu şekilde

04:30.865 --> 04:35.865
birleştirmek istiyorum diyebiliriz ve şimdi bu hatayı önlemek için, burada

04:35.930 --> 04:38.794
her girdinin önüne bir artı ekleyerek sayıya

04:38.794 --> 04:42.970
dönüştürmeyi zorluyorum, böylece her girdi bir sayıya dönüştürülüyor

04:42.970 --> 04:45.490
ve birleştirmeden önce sayı olması garanti

04:45.490 --> 04:48.490
ediliyor.

04:48.490 --> 04:51.130
Yan not: sayıya dönüştürülemeyen

04:51.130 --> 04:54.610
dizgileri, örneğin Max gibi bir şeyi iletirseniz,

04:54.610 --> 04:58.800
sonuç olarak bir NaN, Not a Number alırsınız.

04:58.800 --> 05:00.280
Peki o zaman, diğer durumda,

05:00.280 --> 05:03.170
"as-number" olmaması için veya sadece sayı

05:03.170 --> 05:07.976
girdilerimiz olmaması için, o zaman buradaki bu bloğa yaparız ve şimdi burada

05:07.976 --> 05:12.390
sonucu tekrar döndürürsem ve sonra bunu kaydedip yeniden derlersek,

05:12.390 --> 05:20.230
sayfamızda farklı bir çıktı göreceğiz.

05:20.230 --> 05:20.230
Şimdi

05:20.230 --> 05:22.945
bu iki satırda 56 değerini alıyoruz çünkü şimdi sonucu dönüştürmüyoruz,

05:22.945 --> 05:26.300
yani bu satır için birleştirilmiş dizeyi dönüştürmüyoruz, bunun yerine iki değeri

05:26.300 --> 05:31.970
birleştirmeden önce dönüştürme işlemini yapıyoruz.

05:31.970 --> 05:31.970
Yani

05:31.970 --> 05:34.760
hangi mantığı uygulamak istediğiniz size kalmış. Aslında bu dersin başında

05:34.760 --> 05:37.551
tanımladığım literal tipler kavramına daha yakından

05:37.551 --> 05:41.180
bakmak istiyorum. Bir "as-number" ve "as-text" ve

05:41.180 --> 05:44.157
şu anda bir geliştirici olarak bu değerleri ezberlemek

05:44.157 --> 05:47.600
zorunda olduğumuz bir işin düşüşlerini geçiyorum.

05:47.600 --> 05:50.450
Burada tip kaçırmadığımızdan emin olmalıyız.

05:50.450 --> 05:54.010
Şimdi bunu geliştirmek için bir e-num kullanabiliriz, ancak burada

05:54.010 --> 05:57.754
sadece iki değerimiz varsa, "as-text" veya "as-number", o zaman belki

05:57.754 --> 06:00.940
de tüm arama bir literal tip bir seçenek olabilir.

06:00.940 --> 06:04.173
"Bu herhangi bir string olmamalı, "as-number"

06:04.173 --> 06:09.173
veya "as-text" olmalı" diyebiliriz, bu yüzden literal tiplerle

06:09.870 --> 06:12.090
birleştirilmiş bir union tipi

06:12.090 --> 06:15.573
kullanırız. Literal tipler, temel tipleriniz

06:15.573 --> 06:17.987
olan string, number ve benzerlerini temel

06:17.987 --> 06:20.933
alan tiplerdir, ancak daha sonra tipin belirli bir versiyonuna

06:20.933 --> 06:24.750
sahip olursunuz. Yani burada, özellikle bu iki dizeye izin

06:24.750 --> 06:27.960
veriyoruz, herhangi bir dizeye değil, sadece bu iki dizeye.

06:27.960 --> 06:31.460
Yani sonuç dönüşümü için bir dize istiyoruz, ancak bu iki değerden

06:31.460 --> 06:34.207
biri olmak zorunda. Başka herhangi bir dize değerine

06:34.207 --> 06:37.560
izin verilmeyecektir, yani literal tipin arkasındaki fikir budur ve

06:37.560 --> 06:40.747
genellikle bunu union tipi bağlamında kullanırsınız çünkü sadece

06:40.747 --> 06:43.700
tek bir kesin değere izin vermek istemezsiniz, eğer durum buysa

06:43.700 --> 06:46.500
bunu kodunuza sabit olarak kodlayabilirsiniz, ancak iki

06:46.500 --> 06:49.544
veya daha fazla olası değere sahip olmak istersiniz.

06:49.544 --> 06:52.580
Bu durumda iki olası değer elde ederiz.

06:52.580 --> 06:56.240
Yani şimdi "as-number" ya da "as-text" olan sonuç dönüşümü

06:56.240 --> 07:00.288
almamız garanti ve örneğin burada, şimdi bunu as-numbe ile

07:00.288 --> 07:03.800
karşılaştırmaya çalışırsam çünkü burada bir yazım

07:03.800 --> 07:07.256
hatam var, types group bana burada IDE'de ve tabii

07:07.256 --> 07:10.360
ki kaydettiğimiz ve terminalde derlediğimiz

07:10.360 --> 07:15.360
her şeyi söyleyebilir çünkü sonunda r olmayan as-numbe'nin resultConversion

07:15.830 --> 07:18.940
için asla geçerli bir değer olmayacağını bilir

07:18.940 --> 07:24.563
çünkü bu union tipini bu literal tiplerle ayarladım.

07:25.550 --> 07:27.593
Şimdi yine bazı ekstra tip güvenliği

07:27.593 --> 07:31.590
kazandık ve bunu yanlış kullanamayacağımızdan emin olduk.

07:31.590 --> 07:34.720
Tabii ki bir değer iletmek için de aynı şey geçerlidir. Burada bir yazım hatası varsa,

07:34.720 --> 07:38.747
yalnızca "as-number" veya "as-text" kullanırsak hata alırız, bunu

07:38.747 --> 07:41.947
gördüğünüz gibi derlememize izin verilir ve şimdi bunu

07:41.947 --> 07:45.470
derleyin, bu çalışır ve burada daha önce olduğu gibi aynı

07:45.470 --> 07:49.562
çıktıyı alırız. Dolayısıyla, bunlar özellikle union tipleriyle

07:49.562 --> 07:52.193
birlikte kullanıldığında yararlı olan literal tiplerdir.
