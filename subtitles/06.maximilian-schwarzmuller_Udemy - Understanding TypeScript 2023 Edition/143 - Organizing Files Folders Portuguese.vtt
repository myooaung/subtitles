WEBVTT

00:02.300 --> 00:04.180
Instrutor: Então começamos com as bases

00:04.180 --> 00:05.960
de nomes, vamos continuar nessa rota,

00:05.960 --> 00:08.460
e vamos dividi-la em mais arquivos.

00:08.460 --> 00:11.090
Para isso aqui, a administração estatal do projeto.

00:11.090 --> 00:13.610
Poderíamos colocar isso também em um arquivo separado.

00:13.610 --> 00:16.050
Portanto, vou pegar tudo, inclusive

00:16.050 --> 00:20.600
esta criação da instância de estado do projeto aqui, cortá-la

00:20.600 --> 00:24.250
do aplicativo. ts arquivar e criar um novo arquivo,

00:24.250 --> 00:27.060
o projeto-estado. ts.

00:27.060 --> 00:29.685
Mova isso para lá e, como antes,

00:29.685 --> 00:32.070
coloque-o em um namespace.

00:32.070 --> 00:35.400
Namespace app, o nome é importante, tem que ser App porque

00:35.400 --> 00:38.090
é aí que está o resto de nosso código.

00:38.090 --> 00:40.440
Coloque tudo isso aí e agora importante,

00:40.440 --> 00:43.560
exporte também o que você precisa fora deste arquivo,

00:43.560 --> 00:46.120
que neste caso é a classe de estado do projeto,

00:46.120 --> 00:48.830
precisamos que no resto de nossa aplicação,

00:48.830 --> 00:51.500
e também esta constante lá embaixo, precisamos

00:51.500 --> 00:53.880
exportar isto também.

00:53.880 --> 00:57.060
Você não precisa exportar o Ouvinte aqui, e também não nesse

00:57.060 --> 00:59.430
estado, porque ambas as coisas só são usadas

00:59.430 --> 01:01.480
neste arquivo e, portanto, não precisam

01:01.480 --> 01:02.823
ser exportadas.

01:03.700 --> 01:06.860
Agora, temos que importar nossos projetos - Estado. ts, assim

01:06.860 --> 01:09.540
em App. ts, tempo para outra importação lá em cima.

01:09.540 --> 01:13.290
Estado de traço do projeto, exatamente assim.

01:13.290 --> 01:16.620
Se salvarmos isso, ele deverá compilar sem erros.

01:16.620 --> 01:19.480
Agora, vou continuar e a parte da validação aqui também

01:19.480 --> 01:21.460
poderia ir para um arquivo separado,

01:21.460 --> 01:23.960
então vou pegar tudo isso, criar um novo arquivo,

01:23.960 --> 01:26.890
validação. ts, adicionar o namespace

01:26.890 --> 01:30.760
App aqui, colocar minha lógica de validação ali e exportar

01:30.760 --> 01:33.560
a interface validável e toda a função

01:33.560 --> 01:36.706
desvalida aqui, é claro.

01:36.706 --> 01:39.566
E então, de volta ao App. ts, você sabe como é, voltamos

01:39.566 --> 01:41.700
aqui para o topo e adicionamos uma importação

01:41.700 --> 01:43.513
para validação. ts.

01:45.160 --> 01:49.823
Agora, o decorador também pode ser movido para um arquivo separado.

01:49.823 --> 01:54.410
Decorador de traço autobind. ts, por exemplo.

01:54.410 --> 01:58.863
Novamente, acrescente o namespace com o nome App a ele, coloque a

01:58.863 --> 02:01.950
função lá dentro e exporte-o, é claro, para torná-lo

02:01.950 --> 02:04.820
disponível também fora deste arquivo e depois

02:04.820 --> 02:08.430
aqui no app. ts, hora de outra importação onde eu

02:08.430 --> 02:12.633
importo o decorador de traço autobind. ts.

02:14.840 --> 02:16.484
Agora temos mais coisas para exportar,

02:16.484 --> 02:19.240
temos nosso componente e depois todas essas classes.

02:19.240 --> 02:21.205
Quero ter cada classe em um arquivo separado

02:21.205 --> 02:25.440
para que cada arquivo seja relativamente pequeno e fácil de gerenciar.

02:25.440 --> 02:28.280
Agora, porém, estamos entrando em um novo problema aqui.

02:28.280 --> 02:30.385
Adicionamos mais e mais arquivos no

02:30.385 --> 02:33.934
mesmo nível e, por enquanto, estou usando o traço aqui para fornecer

02:33.934 --> 02:37.800
alguma dica ou ajuda sobre o que está no arquivo, o decorador de traço

02:37.800 --> 02:42.330
autobind nos mostra que provavelmente há um decorador lá dentro.

02:42.330 --> 02:44.300
Aqui, provavelmente temos interfaces.

02:44.300 --> 02:46.246
Aqui, um modelo e assim por diante.

02:46.246 --> 02:49.070
Agora, se você tiver apenas três ou quatro arquivos,

02:49.070 --> 02:52.010
isso é perfeitamente bom, mas se você tiver mais arquivos,

02:52.010 --> 02:55.276
você acaba tendo uma estrutura de pastas muito difícil

02:55.276 --> 02:57.430
de entender aqui.

02:57.430 --> 03:00.056
Portanto, o que eu gosto de fazer é criar subpastas.

03:00.056 --> 03:02.697
Vou adicionar uma subpasta de decoradores, mover

03:02.697 --> 03:05.830
meu decorador autobind para lá, e renomeá-lo para apenas

03:05.830 --> 03:09.260
autobind, porque já está na pasta de decoradores.

03:09.260 --> 03:11.720
É claro que há um decorador lá dentro.

03:11.720 --> 03:14.440
Então, vou adicionar minha pasta de modelos, e na verdade,

03:14.440 --> 03:17.523
aqui, vou mover tanto as interfaces de arrastar e soltar quanto

03:17.523 --> 03:19.355
o modelo do projeto para lá, simplesmente

03:19.355 --> 03:21.763
porque eu acho que as interfaces de arrastar e

03:21.763 --> 03:24.187
soltar são apenas definições de como as classes

03:24.187 --> 03:27.263
de arrastar e soltar devem ser.

03:27.263 --> 03:29.910
Assim como o modelo de projeto é a definição de como

03:29.910 --> 03:31.630
deve ser uma classe de projeto ou como

03:31.630 --> 03:33.655
deve ser nosso objeto de projeto.

03:33.655 --> 03:38.530
Portanto, vou nomear este arrastar e soltar e este aqui apenas projetar

03:38.530 --> 03:42.610
e depois aqui vou adicionar uma pasta de utilidades e adicionar

03:42.610 --> 03:44.860
minha validação ali e depois uma

03:44.860 --> 03:49.690
pasta de estado e adicionar estado de projeto a isso.

03:49.690 --> 03:52.400
Aqui vou manter o nome projeto-estado apenas para evitar

03:52.400 --> 03:55.300
confusão com este projeto. ts arquivar aqui.

03:55.300 --> 03:56.716
Tecnicamente, isso não seria um problema,

03:56.716 --> 03:59.216
mas também quero deixar claro aqui neste curso para que você

03:59.216 --> 04:00.990
tenha um tempo mais fácil de ver em qual arquivo

04:00.990 --> 04:02.640
estou trabalhando.

04:02.640 --> 04:05.640
Definitivamente, você poderia renomear isto para apenas projetar. ts aqui, se você

04:05.640 --> 04:07.320
quiser.

04:07.320 --> 04:09.662
Agora, com essa refatoração e essas subpastas,

04:09.662 --> 04:12.069
é claro que nossas importações aqui estão quebradas,

04:12.069 --> 04:14.010
por isso devemos consertá-las.

04:14.010 --> 04:17.366
As interfaces de arrastar e soltar são encontradas na pasta de modelos e

04:17.366 --> 04:21.216
agora o nome é apenas arrastar e soltar. ts.

04:21.216 --> 04:25.630
E o modelo do projeto também é encontrado na pasta de modelos e agora é apenas

04:25.630 --> 04:28.560
nomeado projeto. ts.

04:28.560 --> 04:31.100
O estado do projeto é encontrado na pasta

04:31.100 --> 04:34.040
estadual, a validação é encontrada na pasta util,

04:34.040 --> 04:36.896
e o decorador autobind é encontrado nos decoradores

04:36.896 --> 04:39.860
e é apenas nomeado autobind.

04:39.860 --> 04:42.547
Com isso, se salvarmos isso, ele se compila sem erros

04:42.547 --> 04:44.128
e agora temos uma estrutura de

04:44.128 --> 04:47.290
pastas mais manejável e legível, eu argumentaria.

04:47.290 --> 04:50.500
Com isso, vamos continuar, ainda não terminamos.

04:50.500 --> 04:52.130
Temos nosso componente

04:52.130 --> 04:54.813
aqui, agora para isso, vou adicionar

04:54.813 --> 04:59.813
uma subpasta de componentes e lá quero ter meu arquivo de componentes

05:00.210 --> 05:05.210
básicos e depois meu arquivo de itens do projeto, minha lista de projetos

05:07.600 --> 05:12.110
e também o arquivo de entrada do projeto.

05:12.110 --> 05:14.430
É claro que você sempre pode organizar isto de forma

05:14.430 --> 05:17.631
diferente, mas acho que isto mantém os arquivos relacionados juntos.

05:17.631 --> 05:22.253
Assim, podemos pegar esta classe de base de componentes abstratos aqui, cortá-la

05:23.830 --> 05:27.023
das aplicações e movê-la para o componente base.

05:29.610 --> 05:33.180
Assim, e, claro, também como antes, adicioná-lo

05:33.180 --> 05:37.810
em um espaço de nomes com o nome App.

05:37.810 --> 05:41.120
E depois movê-lo para este espaço de nomes.

05:41.120 --> 05:43.890
É claro que ajustarei isto antes de precisarmos exportá-lo

05:43.890 --> 05:46.171
para que possamos utilizá-lo em outro arquivo.

05:46.171 --> 05:49.800
Esse outro arquivo, no entanto, não será app. ts porque os arquivos ou

05:49.800 --> 05:53.044
as classes onde eu usei o componente também

05:53.044 --> 05:54.910
serão movidos.

05:54.910 --> 05:56.856
A classe do item de projeto aqui, por exemplo, vou pegar

05:56.856 --> 06:00.164
isso e movê-lo para o item de projeto. ts, para ser mais preciso,

06:00.164 --> 06:04.550
ali também vou adicionar um namespace app e movê-lo para o namespace

06:04.550 --> 06:06.680
app ali dentro e depois exportar

06:06.680 --> 06:09.060
esta classe também.

06:09.060 --> 06:11.413
Agora, importante, isto depende do componente,

06:12.310 --> 06:14.740
e o outro, se eu agora salvasse isto, receberíamos

06:14.740 --> 06:16.497
um erro que não é encontrado no final,

06:16.497 --> 06:19.353
então aqui novamente, precisamos adicionar esta importação

06:19.353 --> 06:22.027
onde temos o caminho de referência igual e então aqui é o

06:22.027 --> 06:24.772
componente base. ts.

06:24.772 --> 06:27.330
Esta é sempre uma importação relativa aqui, então

06:27.330 --> 06:29.130
como esta está na mesma pasta, não

06:29.130 --> 06:32.320
precisamos dizer componentes cortados aqui, porque não

06:32.320 --> 06:34.608
precisamos ir para a pasta de componentes

06:34.608 --> 06:37.300
primeiro este arquivo, o arquivo item do projeto,

06:37.300 --> 06:38.729
já está na pasta de componentes,

06:38.729 --> 06:40.617
então relativo a partir deste arquivo

06:40.617 --> 06:44.913
base componente é importado apenas usando seu nome aqui.

06:46.060 --> 06:48.030
Portanto, agora o item do projeto está aqui.

06:48.030 --> 06:51.963
Agora, é claro, em aplicação. ts, também temos a lista de projetos.

06:55.940 --> 07:00.662
Vamos pegar isso, movê-lo para a lista de projetos e arquivá-lo aqui

07:00.662 --> 07:04.940
e ali em um namespace App, e então também aqui para projetar

07:04.940 --> 07:07.050
a entrada, vamos pegar isso, cortá-lo

07:08.010 --> 07:14.480
daqui, do namespace app no app.

07:14.480 --> 07:14.480
ts,

07:14.480 --> 07:17.097
e movê-lo para o arquivo ts de entrada do projeto

07:17.097 --> 07:19.857
e lá para um espaço de nome de aplicativo.

07:20.750 --> 07:24.350
Agora, importante como antes, exportar esta classe aqui,

07:24.350 --> 07:27.550
item de projeto e também lista de projetos, é claro, tudo

07:27.550 --> 07:30.200
precisa ser exportado, com isso recebemos um

07:30.200 --> 07:31.580
monte de erros porque,

07:31.580 --> 07:34.343
é claro, ainda faltam as importações.

07:35.200 --> 07:39.930
Em anexo. ts, devemos importar todos esses componentes agora, portanto, aqui

07:39.930 --> 07:42.934
devemos importar projeto-em-projeto. ts, lista

07:42.934 --> 07:47.380
de projetos. ts, e depois salvar isto.

07:47.380 --> 07:50.240
Agora, é claro, ele ainda falha porque temos mais coisas

07:50.240 --> 07:51.087
que estão faltando,

07:51.087 --> 07:53.192
na entrada do projeto estamos usando o componente

07:53.192 --> 07:55.541
assim como estamos na lista de projetos, assim

07:55.541 --> 07:57.780
como o fizemos no item de projeto, precisamos

07:57.780 --> 08:00.091
adicionar essa importação do componente base

08:00.091 --> 08:02.920
no arquivo de entrada do projeto e também no arquivo de entrada

08:02.920 --> 08:05.790
do projeto na lista de projetos.

08:05.790 --> 08:08.665
E com isso, ele compila sem erros e vamos

08:08.665 --> 08:10.880
ver se também funciona, se recarregamos

08:10.880 --> 08:15.118
aqui e eu acrescento isto, é arrastável e deixa-se cair,

08:15.118 --> 08:16.540
e tudo parece funcionar

08:16.540 --> 08:19.480
como deveria, e agora dividimos isto em

08:19.480 --> 08:22.340
vários arquivos.

08:22.340 --> 08:23.978
Ainda recebemos um arquivo no final,

08:23.978 --> 08:26.010
mas quando trabalhamos em nosso código,

08:26.010 --> 08:28.110
ele agora é muito mais manejável.

08:28.110 --> 08:30.978
Porque temos arquivos focados menores onde podemos encontrar

08:30.978 --> 08:33.829
rapidamente o que estamos procurando e onde não temos

08:33.829 --> 08:36.358
que percorrer um arquivo enorme para encontrar

08:36.358 --> 08:39.363
o lugar em que queremos trabalhar a seguir.
