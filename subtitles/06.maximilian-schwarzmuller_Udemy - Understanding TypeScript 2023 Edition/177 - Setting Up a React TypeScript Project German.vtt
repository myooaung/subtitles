WEBVTT

00:02.150 --> 00:04.320
Erzähler: Wenn es darum geht, eine React-App

00:04.320 --> 00:07.220
mit Typescript zu erstellen, brauchen wir natürlich

00:07.220 --> 00:10.800
ein Projekt-Setup, das sowohl in der Lage ist, unseren React-Code

00:10.800 --> 00:13.730
zu handhaben, also Dinge wie JSX zum Beispiel, und

00:13.730 --> 00:17.480
das unseren React-Code kompiliert und optimiert, und das gleichzeitig

00:17.480 --> 00:21.500
in der Lage ist, TypeScript zu verstehen und TypeScript zu JavaScript

00:21.500 --> 00:25.320
zu kompilieren.

00:25.320 --> 00:27.430
Ein solches Projekt auf eigene Faust zu

00:27.430 --> 00:28.750
erstellen, kann ziemlich

00:28.750 --> 00:31.940
schwierig sein. Daher ist es gut, dass Create React App, ein

00:31.940 --> 00:34.080
vom React-Team verwaltetes Tool, mit

00:34.080 --> 00:36.420
dem wir React-Projekte erstellen können,

00:36.420 --> 00:39.110
TypeScript von Haus aus unterstützt.

00:39.110 --> 00:42.110
Sie können einfach nach Create React App TypeScript googeln,

00:42.110 --> 00:44.590
und Sie sollten diesen Eintrag in der offiziellen

00:44.590 --> 00:47.000
Create React App Dokumentation finden.

00:47.000 --> 00:49.140
Dort erfahren Sie, wie Sie TypeScript entweder

00:49.140 --> 00:51.540
zu einem bestehenden Projekt hinzufügen können,

00:51.540 --> 00:54.850
hier, diese Schritte, oder wie Sie ein neues Projekt mit Create

00:54.850 --> 00:57.290
React App and TypeScript erstellen können, und

00:57.290 --> 01:00.400
hier sehen Sie einen Befehl, den Sie einfach kopieren können,

01:00.400 --> 01:03.030
um ein neues React-Projekt zu erstellen, das auch

01:03.030 --> 01:05.680
TypeScript unterstützt.

01:05.680 --> 01:07.020
Jetzt werde ich das hier verwenden,

01:07.020 --> 01:11.110
und hier bin ich schon in einem Ordner, den ich verwenden möchte.

01:11.110 --> 01:13.210
Dies ist einfach der Projektordner, den ich für

01:13.210 --> 01:14.790
dieses Projekt verwenden möchte.

01:14.790 --> 01:16.900
Und dann fügen wir einfach diesen Befehl ein.

01:16.900 --> 01:17.740
Und in diesem Fall,

01:17.740 --> 01:20.970
weil ich den Ordner, in dem ich mich bereits befinde, auch hier in meinem

01:20.970 --> 01:22.710
Terminal verwenden möchte, werde ich

01:22.710 --> 01:25.190
den Projektnamen durch einen Punkt ersetzen, so dass nicht

01:25.190 --> 01:27.590
ein neuer Unterordner erstellt wird und das Projekt

01:27.590 --> 01:29.550
in diesem angelegt wird, sondern dass stattdessen

01:29.550 --> 01:31.730
dieser Ordner verwendet wird.

01:31.730 --> 01:33.720
Dies ist natürlich fakultativ.

01:33.720 --> 01:35.850
Ich möchte auch sagen, dass ich festgestellt habe,

01:35.850 --> 01:38.070
dass dieser Befehl nicht immer funktioniert.

01:38.070 --> 01:41.390
Manchmal wird ein normales JavaScript-Projekt erstellt.

01:41.390 --> 01:42.590
Um das zu beheben, können

01:42.590 --> 01:46.343
Sie Create React App global auf Ihrem Rechner installieren.

01:47.340 --> 01:49.140
Etwas, das Sie einfach tun können,

01:49.140 --> 01:54.140
indem Sie npm install -g create-react-app ausführen, auf Mac und Linux müssen Sie eventuell

01:54.780 --> 01:56.560
ein sudo davor setzen.

01:56.560 --> 01:59.360
Wenn dies auf Ihrem Rechner installiert ist, können

01:59.360 --> 02:03.010
Sie diesen Befehl hier ausführen, aber ohne npx, einfach so, und

02:03.010 --> 02:05.920
dann sollte es definitiv funktionieren.

02:05.920 --> 02:07.270
Das ist es, was ich hier tun werde,

02:07.270 --> 02:09.320
aber normalerweise sollte es auch ohne Installation

02:09.320 --> 02:12.250
funktionieren, indem man einfach das npx-Tool verwendet,

02:12.250 --> 02:15.520
das Teil des npm-Tools ist, das wir bereits zusammen mit Node installiert

02:15.520 --> 02:18.840
haben. js zu Beginn des Kurses.

02:18.840 --> 02:23.250
Jetzt wird also ein neues Projekt in diesem Ordner hier angelegt.

02:23.250 --> 02:27.460
Und in diesem Projekt wird es eine React-Anwendung einrichten, in der

02:27.460 --> 02:31.070
wir alle unseren Code mit TypeScript schreiben können.

02:31.070 --> 02:32.460
Lassen Sie uns also warten, bis das hier zu Ende ist.

02:32.460 --> 02:34.610
Schauen wir mal, was dabei herauskommt.

02:34.610 --> 02:36.010
Und das war's.

02:36.010 --> 02:37.930
Schauen wir uns also an, was wir haben.

02:37.930 --> 02:41.000
Wir haben einen Ordner, der im Grunde die

02:41.000 --> 02:43.970
gleiche Struktur hat wie eine React-App

02:43.970 --> 02:45.500
ohne TypeScript.

02:45.500 --> 02:48.790
Aber wir können bereits die tsconfig sehen. json-Datei.

02:48.790 --> 02:51.020
Übrigens können Sie diese Datei auch bearbeiten

02:51.020 --> 02:52.940
und an Ihre Bedürfnisse anpassen.

02:52.940 --> 02:55.250
Sie haben ja bereits gelernt, wie Sie diese

02:55.250 --> 02:57.120
Konfiguration anpassen können.

02:57.120 --> 02:58.460
Die Standardkonfiguration sollte

02:58.460 --> 03:01.160
jedoch für die meisten Anwendungsfälle ausreichen.

03:01.160 --> 03:02.950
Wenn wir nun den src-Ordner untersuchen,

03:02.950 --> 03:05.230
in den wir unseren Quellcode schreiben werden, finden

03:05.230 --> 03:08.550
wir auch eine Reihe von . tsx-Dateien enthalten.

03:08.550 --> 03:11.900
Bisher haben wir in diesem Kurs nicht mit . tsx-Dateien, sondern

03:11.900 --> 03:13.787
nur mit . ts-Dateien. tsx wurde hier einfach

03:13.787 --> 03:17.800
gewählt, weil es sich um Dateien handelt, in denen man nicht nur TypeScript-Code

03:17.800 --> 03:20.530
schreiben kann, sondern den gesamten JSX-Code,

03:20.530 --> 03:22.000
also eine spezielle React-JavaScript-Syntax,

03:22.000 --> 03:25.570
bei der man HTML-Markup innerhalb seines JavaScript- oder in diesem

03:25.570 --> 03:29.930
Fall TypeScript-Codes schreibt.

03:29.930 --> 03:32.880
Das ist es, was wir hier bekommen.

03:32.880 --> 03:34.920
In diesen Dateien können wir bereits einige

03:34.920 --> 03:36.500
TypeScript-Syntaxen sehen, zum

03:36.500 --> 03:38.800
Beispiel haben wir hier eine Typzuweisung. Ich werde

03:38.800 --> 03:41.480
mir diesen Typ später genauer ansehen, aber jetzt können

03:41.480 --> 03:43.880
wir einfach sofort sehen, dass wir hier offensichtlich

03:43.880 --> 03:45.780
TypeScript verwenden.

03:45.780 --> 03:49.290
Lassen Sie mich nun die Ordnerstruktur ein wenig aufräumen, und dann lassen

03:49.290 --> 03:50.680
Sie uns gemeinsam eine sehr einfache

03:50.680 --> 03:52.730
React-App erstellen, und während wir das

03:52.730 --> 03:56.150
tun, lassen Sie uns erkunden, wie wir TypeScript mit React verwenden

03:56.150 --> 03:57.550
können.

03:57.550 --> 04:01.000
Konzentrieren wir uns also zunächst auf die Bereinigung,

04:01.000 --> 04:02.950
hier in App. tsx, ich werde den Logo-Import entfernen

04:02.950 --> 04:06.860
und den gesamten Inhalt in meinem div hier

04:06.860 --> 04:09.380
entfernen, und nur dieses div daher behalten.

04:09.380 --> 04:12.020
Ich werde auch die App entfernen. css-Import, die App

04:12.020 --> 04:15.530
loswerden. css-Datei und die App. Test. tsx-Datei sowie

04:15.530 --> 04:19.560
das Logo. svg und dem serviceWorker. ts-Dateien, entfernen

04:19.560 --> 04:23.470
Sie alle diese Dateien.

04:23.470 --> 04:25.500
Im Index. tsx, ich werde diesen serviceWorker-Import

04:25.500 --> 04:29.060
entfernen, weil wir hier nicht mit serviceWorkers

04:29.060 --> 04:32.100
arbeiten werden, diesen Code dort unten entfernen und mit diesem

04:32.100 --> 04:34.530
Setup und in index enden. css Ich werde das alles löschen und nur einen

04:34.530 --> 04:38.870
HTML-Stil einrichten, bei dem ich eine

04:38.870 --> 04:40.610
Schriftart (font-family) von

04:40.610 --> 04:43.140
sans-serif einstelle, und dann einen Body-Stil,

04:43.140 --> 04:48.820
bei dem ich den Rand loswerden möchte, genau so, ganz einfaches Styling.

04:48.820 --> 04:50.763
Und damit haben wir eine Ausgangsbasis,

04:52.790 --> 04:54.540
mit der ich arbeiten möchte.

04:54.540 --> 04:55.840
Nochmals, ich habe es erwähnt, aber

04:55.840 --> 04:57.370
wenn Ihnen das alles nichts sagt, wenn das

04:57.370 --> 04:59.710
eine Syntax ist, die Sie noch nie gesehen haben, dann sollten Sie

04:59.710 --> 05:02.200
auf jeden Fall zuerst einige React-Ressourcen studieren.

05:02.200 --> 05:05.610
Darauf werden wir uns in diesem Modul nicht konzentrieren, Sie

05:05.610 --> 05:08.130
werden React in diesem Modul nicht lernen.

05:08.130 --> 05:11.010
Aber damit speichern wir alle unsere Änderungen und machen

05:11.010 --> 05:12.920
jetzt weiter. Beginnen wir damit, etwas

05:12.920 --> 05:15.680
React- und Typhon-Code zu schreiben und zu lernen, wie diese

05:15.680 --> 05:17.980
beiden Dinge zusammen funktionieren.
