WEBVTT

00:02.130 --> 00:03.970
Instructeur : Tout d'abord, nous pouvons démarrer

00:03.970 --> 00:06.480
notre serveur de développement ici avec npm start, et c'est un processus

00:06.480 --> 00:08.440
que nous devrions continuer à exécuter parce qu'il

00:08.440 --> 00:10.940
va surveiller nos fichiers pour les changements.

00:10.940 --> 00:13.270
Et si quelque chose change, donc si vous enregistrez

00:13.270 --> 00:15.620
un changement spécifique, il recompilera

00:15.620 --> 00:17.776
les types de codes en JavaScript, recompilera

00:17.776 --> 00:20.090
JSX en JavaScript, et à la fin, vous construirez

00:20.090 --> 00:22.500
votre application react et la servira sur l'hôte

00:22.500 --> 00:27.630
local 3000, où, pour le moment, vous ne voyez pas grand-chose.

00:27.630 --> 00:29.430
Vous pouvez le voir ici dans la console Dev que

00:29.430 --> 00:31.800
cela semble fonctionner en raison de cette sortie ici.

00:31.800 --> 00:32.900
Vous ne voyez pas grand-chose,

00:32.900 --> 00:34.340
bien sûr, car nous ne rendons rien

00:34.340 --> 00:36.700
ici dans l'App. tsx en ce moment.

00:36.700 --> 00:38.170
Cela va bien sûr changer.

00:38.170 --> 00:39.420
Et avec cela en marche,

00:39.420 --> 00:41.130
écrivons maintenant un peu de

00:41.130 --> 00:43.580
code ou analysons ce que nous avons.

00:43.580 --> 00:46.750
Dans l'index. tsx nous n'avons rien de spécial, n'est-ce pas ?

00:46.750 --> 00:49.060
C'est du code JavaScript normal.

00:49.060 --> 00:52.950
Dans App. tsx, nous voyons cette affectation de

00:52.950 --> 00:55.250
type cependant et là, ce que nous pouvons voir,

00:55.250 --> 00:57.980
c'est que nous avons affecté ce type étrange à App.

00:57.980 --> 01:00.270
Maintenant, si on ignore ce type pendant une seconde,

01:00.270 --> 01:02.480
qu'est-ce qui est réellement stocké dans App ?

01:02.480 --> 01:04.840
Eh bien, une fonction, une fonction flèche, mais

01:04.840 --> 01:07.290
c'est toujours une fonction régulière, donc.

01:07.290 --> 01:09.960
Pourquoi ce type ne fonctionne-t-il pas ou pourquoi n'est-ce

01:09.960 --> 01:12.570
pas l'un des types de fonctions que nous avons appris ?

01:12.570 --> 01:14.030
Eh bien, c'est sous le capot,

01:14.030 --> 01:16.450
mais c'est un type fourni par react, et

01:16.450 --> 01:18.100
maintenant, important bien

01:18.100 --> 01:21.070
sûr fourni par le paquet react types.

01:21.070 --> 01:26.070
Si vous allez dans les modules de nœuds, nous voyons le dossier @types ici et là, nous

01:26.390 --> 01:28.470
voyons beaucoup de types, et nous

01:28.470 --> 01:30.670
voyons aussi les types react ici, tous

01:30.670 --> 01:32.600
les types react-dom.

01:32.600 --> 01:35.840
Et au final, ce type est implicitement importé automatiquement

01:35.840 --> 01:39.340
du dossier react types, pourrait-on dire.

01:39.340 --> 01:40.870
Maintenant, quel est ce type ?

01:40.870 --> 01:44.490
FC signifie simplement "composant de fonction".

01:44.490 --> 01:46.310
Il existe également une forme plus longue, que

01:46.310 --> 01:47.570
vous pouvez utiliser à la place.

01:47.570 --> 01:49.240
C'est exactement le même type.

01:49.240 --> 01:51.090
L'autre est juste un raccourci et

01:51.090 --> 01:54.300
cela définit simplement que ce que nous stockons ici dans

01:54.300 --> 01:57.750
App doit être une fonction, mais une fonction qui se qualifie

01:57.750 --> 02:00.550
comme composant de fonction dans react.

02:00.550 --> 02:02.840
Vous pouvez aussi, bien sûr, écrire des composants

02:02.840 --> 02:05.760
basés sur des classes, et donc, vous avez un composant classique

02:05.760 --> 02:07.420
ici aussi, mais vous devrez y stocker

02:07.420 --> 02:09.480
une classe au lieu d'une fonction, mais nous

02:09.480 --> 02:12.720
utiliserons des composants fonctionnels dans ce cours.

02:12.720 --> 02:14.670
Maintenant, il s'agit d'un composant

02:14.670 --> 02:17.620
de fonction parce que c'est une fonction qui renvoie JSX et

02:17.620 --> 02:20.850
c'est ainsi qu'un composant de fonction est créé dans react.

02:20.850 --> 02:24.180
Si je supprimais temporairement cette déclaration de retour, nous pourrions

02:24.180 --> 02:26.730
donc obtenir une erreur ici, si j'essayais de sauvegarder

02:26.730 --> 02:28.800
ceci et qu'il voulait le compiler.

02:28.800 --> 02:32.440
Nous obtiendrions une erreur parce que maintenant, nous disons à TypeScript

02:32.440 --> 02:34.960
qu'ici, nous voulons stocker un composant de fonction,

02:34.960 --> 02:38.520
et tout ce que nous stockons est une fonction normale, pas une fonction qui

02:38.520 --> 02:40.770
renvoie JSX ou quoi que ce soit d'autre qui se qualifie

02:40.770 --> 02:42.800
comme un élément react.

02:42.800 --> 02:44.440
Et donc, ce serait invalide et nous

02:44.440 --> 02:45.810
devrions le corriger.

02:45.810 --> 02:48.530
Donc ici, nous pouvons déjà voir comment TypeScript

02:48.530 --> 02:50.360
améliore un peu notre projet.

02:50.360 --> 02:52.500
Cela nous donne une sécurité de type supplémentaire

02:52.500 --> 02:55.420
et nous assure que nous ne pouvons pas nous retrouver dans une situation

02:55.420 --> 02:58.353
où, par exemple, nous construisons un composant invalide.

02:59.200 --> 03:03.230
Remarque : s'il vous semble irréaliste d'oublier cette instruction de

03:03.230 --> 03:05.370
retour, pensez que vous construisez un

03:05.370 --> 03:07.970
composant plus important avec plusieurs instructions

03:07.970 --> 03:11.070
if et différentes instructions de retour.

03:11.070 --> 03:14.370
Il se peut que vous en oubliiez une dans une branche de votre instruction

03:14.370 --> 03:17.010
if et TypeScript peut alors vous sauver la mise et vous

03:17.010 --> 03:19.130
avertir un peu plus tôt, plutôt que pendant

03:19.130 --> 03:21.500
l'exécution, où il pourrait autrement se planter

03:21.500 --> 03:23.710
dans certaines situations.

03:23.710 --> 03:25.620
Donc, c'est TypeScript qui fait quelque

03:25.620 --> 03:27.740
chose, mais avec ça, assez parlé.

03:27.740 --> 03:28.690
Construisons quelque

03:28.690 --> 03:31.670
chose et je veux construire une application relativement simple

03:31.670 --> 03:34.590
ici, une application à faire, assez classique, mais une application

03:34.590 --> 03:36.370
à faire qui nous permet donc de pratiquer

03:36.370 --> 03:39.480
quelques concepts de base de react avec TypeScript.

03:39.480 --> 03:41.270
C'est pourquoi, dans les prochains cours, nous

03:41.270 --> 03:44.363
allons commencer à utiliser nos premiers composants personnalisés.
