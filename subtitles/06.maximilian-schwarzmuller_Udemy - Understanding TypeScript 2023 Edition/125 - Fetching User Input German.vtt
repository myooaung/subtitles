WEBVTT

00:02.150 --> 00:06.180
Kursleiter: Wir sind also in der Lage, unseren Titel-Eingabewert zu erfassen und ihn

00:06.180 --> 00:07.420
auf der Konsole auszugeben,

00:07.420 --> 00:10.160
aber das ist natürlich nicht die eigentliche Idee.

00:10.160 --> 00:13.940
Stattdessen geht es darum, alle Eingabewerte zu sammeln, sie

00:13.940 --> 00:15.420
schnell zu validieren und

00:15.420 --> 00:17.890
dann etwas mit ihnen anzufangen.

00:17.890 --> 00:20.598
Dazu füge ich noch eine weitere neue Methode

00:20.598 --> 00:21.860
hinzu, eine private

00:21.860 --> 00:25.700
Methode, denn ich werde sie nur innerhalb der Klasse aufrufen,

00:25.700 --> 00:28.530
und das ist die Methode gatherUserInput.

00:28.530 --> 00:30.460
Der Name ist ganz Ihnen überlassen.

00:30.460 --> 00:33.240
Meine Idee ist, dass diese Methode hier aufgerufen wird.

00:33.240 --> 00:35.230
Nachdem wir die Voreinstellung verhindert

00:35.230 --> 00:38.980
haben, sollte dies im Grunde alle unsere Eingaben hier erreichen, die Benutzereingaben

00:38.980 --> 00:40.870
dort sammeln, sie validieren und dann

00:40.870 --> 00:43.060
zurückgeben.

00:43.060 --> 00:45.950
Hier habe ich also meinen userInput,

00:45.950 --> 00:50.090
der ein Tupel mit dem Titel, der Beschreibung und den

00:50.090 --> 00:53.810
Personen als freie Tupelwerte sein könnte.

00:53.810 --> 00:55.510
Eigentlich gefällt mir diese Idee.

00:55.510 --> 00:57.800
Definieren wir also bereits hier einen Rückgabetyp.

00:57.800 --> 00:59.880
Der Rückgabetyp ist ein Tupel.

00:59.880 --> 01:02.620
Erinnern Sie sich noch daran, wie ein Tupel definiert ist?

01:02.620 --> 01:05.630
Wie wird der Typ eines Tupels definiert?

01:05.630 --> 01:08.620
Es ist keine Zeichenkette, sondern eckige Klammern.

01:08.620 --> 01:12.260
Das bedeutet, dass Sie ein Array von Zeichenketten zurückgeben.

01:12.260 --> 01:14.550
Stattdessen möchte ich sagen,

01:14.550 --> 01:18.160
dass ich ein Array mit genau X Elementen von genau

01:18.160 --> 01:21.510
diesen drei Typen zurückgeben möchte.

01:21.510 --> 01:23.650
Dazu setzen Sie hier den Rückgabetyp, zwei

01:23.650 --> 01:27.160
eckige Klammern, und fügen dann innerhalb der eckigen Klammern die

01:27.160 --> 01:30.240
verschiedenen Elemente und Elementtypen hinzu.

01:30.240 --> 01:32.900
Zum Beispiel Zeichenfolge, Zeichenkette und Zahl.

01:32.900 --> 01:37.130
Damit sagen Sie, dass diese Methode hier ein Tupel zurückgibt, das drei Elemente

01:37.130 --> 01:38.510
hat, wobei das erste Element

01:38.510 --> 01:40.300
eine Zeichenkette ist, das zweite

01:40.300 --> 01:41.820
Element eine Zeichenkette ist

01:41.820 --> 01:44.080
und das dritte Element eine Zahl ist.

01:44.080 --> 01:46.360
Und jetzt können wir dieser Methode etwas Logik

01:46.360 --> 01:48.540
hinzufügen, um das wahr werden zu lassen.

01:48.540 --> 01:52.670
Holen wir uns also zunächst den eingegebenen Titel aus

01:52.670 --> 01:57.210
diesem titleInputElement. Wert.

01:57.210 --> 01:58.340
Und wir können das wiederholen.

01:58.340 --> 02:01.920
Wir wollen auch die eingegebene Beschreibung des Kurses aus diesem

02:01.920 --> 02:05.100
descriptionInputElement. Wert und die Anzahl der

02:05.100 --> 02:09.510
eingegebenen Personen oder nur die eingegebenen Personen

02:09.510 --> 02:12.440
aus diesem peopleInputElement.

02:12.440 --> 02:13.870
Jetzt habe ich das in Konstanten

02:13.870 --> 02:15.490
gespeichert, damit ich diese längeren

02:15.490 --> 02:17.640
Ausdrücke nicht immer wiederholen muss.

02:17.640 --> 02:19.370
Wir können dies nun überprüfen.

02:19.370 --> 02:21.500
Eine triviale Validierung wäre, zu

02:21.500 --> 02:24.850
prüfen, ob enteredTitle. trimmen, d.h. X's breiten

02:24.850 --> 02:27.610
Raum am Anfang und Ende entfernen.

02:27.610 --> 02:30.560
Länge gleich Null ist, oder wenn

02:30.560 --> 02:35.350
enteredDescription. trim length gleich Null ist,

02:35.350 --> 02:41.520
oder wenn enteredPeople.

02:41.520 --> 02:41.520
Die

02:41.520 --> 02:44.380
Länge des Beschnitts ist gleich Null.

02:44.380 --> 02:48.410
Damit wird überprüft, dass keine Eingabe leer ist.

02:48.410 --> 02:50.330
Es wird jedoch nicht alles überprüft,

02:50.330 --> 02:51.860
was wir überprüfen möchten.

02:51.860 --> 02:54.770
Wir prüfen nicht, ob die eingegebenen Personen,

02:54.770 --> 02:57.160
sagen wir, eine positive Zahl sind.

02:57.160 --> 03:00.170
Wir sind nicht in der Lage, eine Mindestlänge festzulegen.

03:00.170 --> 03:02.190
Wir müssten hier immer mehr Bedingungen

03:02.190 --> 03:04.050
hinzufügen, und obwohl wir dies tun können,

03:04.050 --> 03:06.820
wäre dies keine wirklich skalierbare Lösung.

03:06.820 --> 03:09.110
Wenn wir unsere Teile in der Anwendung haben, in denen

03:09.110 --> 03:11.550
wir auch Benutzereingaben validieren wollen, müssen

03:11.550 --> 03:14.440
wir immer wieder lange if-Anweisungen wiederholen.

03:14.440 --> 03:18.390
Ich werde also in Kürze eine intelligentere oder skalierbarere

03:18.390 --> 03:21.960
Validierungslösung entwickeln.

03:21.960 --> 03:23.780
Für den Moment können wir das so stehen lassen.

03:23.780 --> 03:26.190
Sie können aber schon darüber nachdenken,

03:26.190 --> 03:28.520
und natürlich nach diesem Vortrag hier,

03:28.520 --> 03:32.220
innehalten und überlegen, wie Sie dies in eine separate Validierungsfunktion

03:32.220 --> 03:34.670
auslagern könnten, die konfigurierbar ist,

03:34.670 --> 03:38.350
und wie Typen Ihnen dabei helfen könnten.

03:38.350 --> 03:41.370
Es gibt sicherlich viele mögliche Ansätze, und ich werde meinen

03:41.370 --> 03:44.040
in der nächsten Vorlesung mit Ihnen teilen.

03:44.040 --> 03:45.620
Aber bevor wir dorthin kommen,

03:45.620 --> 03:48.350
sollten wir diesen trivialen Ansatz nutzen und

03:48.350 --> 03:52.130
etwas tun, wenn alle diese Bedingungen erfüllt sind.

03:52.130 --> 03:53.620
Wenn wir es nun in diesen if-Block schaffen,

03:53.620 --> 03:56.000
wissen wir, dass mindestens eine Validierung fehlgeschlagen

03:56.000 --> 03:57.350
ist, und dann können wir eine Warnung

03:57.350 --> 04:01.833
einfügen, in der wir sagen: Ungültige Eingabe, bitte versuchen Sie es erneut.

04:03.450 --> 04:04.910
Wenn wir es nicht schaffen,

04:04.910 --> 04:06.200
wissen wir, dass wir

04:06.200 --> 04:08.600
eine gültige Eingabe haben, ansonsten

04:08.600 --> 04:11.310
möchte ich mein Tupel zurückgeben.

04:11.310 --> 04:14.170
Hier möchte ich also den eingegebenen Titel,

04:14.170 --> 04:17.090
die eingegebene Beschreibung und auch die eingegebenen

04:17.090 --> 04:19.660
Personen zurückgeben.

04:19.660 --> 04:20.630
Wie Sie sehen können, ist

04:20.630 --> 04:21.850
die Gruppe der Typen nicht glücklich,

04:21.850 --> 04:24.210
denn die Eingabe von Personen sollte eine Zahl sein,

04:24.210 --> 04:25.370
kein Text.

04:25.370 --> 04:27.410
Und tatsächlich ist alles, was Sie aus

04:27.410 --> 04:28.720
der Eigenschaft value

04:28.720 --> 04:32.350
eines Eingabeelements extrahieren, standardmäßig Text.

04:32.350 --> 04:34.520
Um dies in eine Zahl umzuwandeln,

04:34.520 --> 04:38.060
können wir zum Beispiel parseFloat aufrufen oder einfach

04:38.060 --> 04:40.610
ein Plus davor setzen, was es in eine Zahl

04:40.610 --> 04:42.850
umwandelt, und trotzdem ist types

04:42.850 --> 04:45.430
group nicht glücklich, weil wir nicht

04:45.430 --> 04:48.910
immer ein Tupel zurückgeben.

04:48.910 --> 04:50.830
Was ist mit diesem Teil hier?

04:50.830 --> 04:52.310
Wenn wir es in den if-Block schaffen,

04:52.310 --> 04:53.510
zeigen wir eine Warnung

04:53.510 --> 04:55.820
an, aber wir geben kein Tupel zurück.

04:55.820 --> 04:59.810
Nun, es gibt verschiedene Dinge, die wir stattdessen tun könnten.

04:59.810 --> 05:03.460
Wir können einfach nichts zurückgeben, etwa so.

05:03.460 --> 05:06.320
Alternativ könnten wir auch einen Fehler auslösen.

05:06.320 --> 05:08.360
Dann würden wir eigentlich gar nichts zurückgeben,

05:08.360 --> 05:11.100
aber wir werden in diesem Fall einen Fehler ausgeben.

05:11.100 --> 05:12.820
Ich möchte hier keinen Fehler auslösen,

05:12.820 --> 05:15.570
weil ich nicht wirklich eine Fehlerbehandlung implementieren

05:15.570 --> 05:18.090
möchte, also werde ich einfach eine Return-Anweisung hinzufügen,

05:18.090 --> 05:20.100
aber natürlich ist dies kein Tupel.

05:20.100 --> 05:23.110
Der Rückgabetyp hier oben ist also ein Tupel,

05:23.110 --> 05:25.923
oder er ist eigentlich undefiniert.

05:27.320 --> 05:29.040
Wie Sie jedoch gelernt haben, sollten

05:29.040 --> 05:30.750
Sie hier nicht "undefined" als Rückgabetyp

05:30.750 --> 05:32.550
für Funktionen verwenden.

05:32.550 --> 05:34.040
Verwenden Sie stattdessen void.

05:34.040 --> 05:35.410
Es ist fast dasselbe,

05:35.410 --> 05:37.040
aber exklusiv für Funktionen,

05:37.040 --> 05:39.350
und dies sagt TypeScript, dass dies

05:39.350 --> 05:44.350
eine Funktion ist, die mindestens einen Zweig hat, der keinen Wert zurückgibt,

05:45.230 --> 05:46.930
wie dieser.

05:46.930 --> 05:49.160
Auch hier verwenden wir natürlich einen Unionstyp,

05:49.160 --> 05:51.240
weil wir beide Möglichkeiten haben.

05:51.240 --> 05:53.170
Es kann sein, dass wir nichts zurückgeben,

05:53.170 --> 05:55.660
oder wir geben tatsächlich ein Tupel zurück.

05:55.660 --> 05:57.510
So, jetzt haben wir gatherUserInput

05:57.510 --> 05:59.370
und userInput dort für alle

05:59.370 --> 06:01.670
ist entweder undefiniert am Ende

06:01.670 --> 06:04.130
oder es ist, dass Tupel.

06:04.130 --> 06:07.640
Bevor wir also weitergehen und die Validierung verbessern, sollten

06:07.640 --> 06:09.620
wir auf der userInput aufbauen.

06:09.620 --> 06:12.480
Wenn wir den userInput dort unten sammeln, haben wir

06:12.480 --> 06:14.820
jetzt dieses userInput-Ding, und jetzt können

06:14.820 --> 06:17.050
wir prüfen, ob es ein Tupel ist.

06:17.050 --> 06:19.820
Das Problem ist nun, dass wir zur Laufzeit keine Möglichkeit

06:19.820 --> 06:22.620
haben zu überprüfen, ob es sich um ein Tupel handelt.

06:22.620 --> 06:25.200
Es gibt kein instanceof, das wir verwenden könnten.

06:25.200 --> 06:28.560
Es gibt keinen Tupel-Typ, den wir überprüfen könnten.

06:28.560 --> 06:31.020
Wir können auch nicht prüfen, ob typof

06:33.803 --> 06:36.053
userInput gleich tuple ist, weil

06:37.130 --> 06:40.050
es das in Vanilla JavaScript nicht gibt.

06:40.050 --> 06:41.850
String gibt es zum Beispiel,

06:41.850 --> 06:44.950
aber Tupel ist kein JavaScript-Typ.

06:44.950 --> 06:47.020
Um also zu prüfen, ob es sich um ein Tupel

06:47.020 --> 06:48.900
handelt, müssen wir bedenken, dass

06:48.900 --> 06:50.990
Tupel am Ende einfach gelöscht werden.

06:50.990 --> 06:52.750
Sie sind etwas Besonderes in TypeScript,

06:52.750 --> 06:54.860
aber sobald wir in JavaScript sind, werden

06:54.860 --> 06:55.940
sie einfach gelöscht,

06:55.940 --> 06:58.320
weil die Idee eines Tupels, bei dem die Anzahl

06:58.320 --> 06:59.950
der Elemente und die Typen der Elemente

06:59.950 --> 07:02.000
festgelegt sind, wirklich nur in TypeScript

07:02.000 --> 07:04.470
existiert.

07:04.470 --> 07:05.930
Zur Laufzeit müssen wir

07:05.930 --> 07:09.370
also nur prüfen, ob es sich um ein Array handelt, und dafür

07:09.370 --> 07:12.950
können wir das Array-Objekt in JavaScript und dort die Methode

07:12.950 --> 07:15.180
isArray verwenden.

07:15.180 --> 07:17.500
Das ist eine in Vanilla JavaScript eingebaute Methode,

07:17.500 --> 07:20.290
mit der wir prüfen können, ob dies hier ein Array ist.

07:20.290 --> 07:23.200
Wir wissen, dass es entweder undefiniert oder ein Tupel ist.

07:23.200 --> 07:24.630
Ein Tupel ist ein Array, wenn

07:24.630 --> 07:26.000
also true zurückgegeben wird,

07:26.000 --> 07:27.400
haben wir das Tupel.

07:27.400 --> 07:31.010
Und hier können wir die Strukturierung nutzen, um zum Beispiel den Titel,

07:31.010 --> 07:34.070
die Beschreibung und die Personen aus den Benutzereingaben

07:34.070 --> 07:35.560
zu erhalten und dann etwas mit

07:35.560 --> 07:37.720
diesen Eingaben zu machen.

07:37.720 --> 07:39.230
Zum Beispiel für

07:39.230 --> 07:42.623
jetzt, Konsole. Protokolltitel, Beschreibung und Personen.

07:43.980 --> 07:46.060
Wenn wir all das tun und alles speichern,

07:46.060 --> 07:47.950
wird es ohne Fehler kompiliert, und wenn

07:47.950 --> 07:49.870
wir hierher zurückgehen und auf das Projekt

07:49.870 --> 07:51.310
klicken, erhalte ich eine ungültige

07:51.310 --> 07:53.050
Eingabe.

07:53.050 --> 07:54.580
Wenn ich Hello eingebe, bekomme ich

07:54.580 --> 07:56.950
es trotzdem, weil wir keine Beschreibung haben.

07:56.950 --> 07:58.890
Dies ist eine Beschreibung.

07:58.890 --> 08:00.180
Wir bekommen es natürlich immer

08:00.180 --> 08:02.940
noch mit, aber wenn ich jetzt auch etwas in die Leute eingebe, funktioniert

08:02.940 --> 08:05.220
das und wir drucken das hier aus.

08:05.220 --> 08:09.330
Das ist natürlich ein guter Schritt in die richtige Richtung.

08:09.330 --> 08:10.990
Ganz so weit sind wir noch nicht.

08:10.990 --> 08:13.330
Wie ich bereits sagte, können wir die Validierung verbessern.

08:13.330 --> 08:16.230
Bevor wir das tun, möchte ich noch eine Sache tun: Ich möchte

08:16.230 --> 08:20.070
alle Eingaben löschen, nachdem wir auf PROJEKT HINZUFÜGEN geklickt haben.

08:20.070 --> 08:22.440
Ich möchte also alle Eingänge wieder leeren.

08:22.440 --> 08:25.290
Dafür können wir jetzt eine neue private Methode hinzufügen,

08:25.290 --> 08:27.043
clearInput oder clearInputs, und dort

08:28.210 --> 08:32.740
können wir dieses titleInputElement setzen. Wert gleich einer leeren Zeichenkette

08:32.740 --> 08:34.130
und wiederholen Sie dies

08:36.200 --> 08:38.980
auch für die anderen Eingaben.

08:38.980 --> 08:41.960
Hier haben wir also das descriptionInputElement, und

08:41.960 --> 08:44.250
hier haben wir das peopleInputElement, und

08:44.250 --> 08:48.190
jetzt, wenn wir dies aufrufen. clearInputs sollten wir sicherstellen,

08:48.190 --> 08:50.200
dass das Formular gelöscht wird, sobald

08:50.200 --> 08:51.730
es abgeschickt wurde.

08:51.730 --> 08:52.870
Wenn wir es also noch einmal

08:52.870 --> 08:54.380
versuchen und hier etwas eingeben,

08:54.380 --> 08:56.230
sehen Sie, dass es hier gedruckt wird, und

08:56.230 --> 08:57.740
das Formular wird gelöscht.

08:57.740 --> 09:00.720
Damit bin ich im Großen und Ganzen zufrieden damit, wie wir das gehandhabt

09:00.720 --> 09:03.300
haben, aber jetzt möchte ich die Validierung verbessern und

09:03.300 --> 09:06.970
das Ganze auf eine wiederverwendbare, skalierbare Weise schreiben.

09:06.970 --> 09:07.840
Wie ich bereits erwähnt

09:07.840 --> 09:10.320
habe, können Sie dies auf jeden Fall zuerst selbst tun.

09:10.320 --> 09:11.530
In der nächsten Vorlesung werden

09:11.530 --> 09:12.580
wir das gemeinsam tun.
