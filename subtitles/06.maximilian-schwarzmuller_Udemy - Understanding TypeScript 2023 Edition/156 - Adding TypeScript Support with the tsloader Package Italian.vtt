WEBVTT

00:02.290 --> 00:03.910
Istruttore: Per dire a Webpack cosa

00:03.910 --> 00:06.710
fare con i file TypeScript, dobbiamo aggiungere una nuova

00:06.710 --> 00:08.830
voce all'oggetto di configurazione.

00:08.830 --> 00:11.510
E questa è la proprietà del modulo.

00:11.510 --> 00:14.020
Il modulo prende anche un oggetto JavaScript

00:14.020 --> 00:15.470
per poi configurarlo.

00:15.470 --> 00:17.440
Un modulo alla fine è solo un file, quindi

00:17.440 --> 00:20.520
qui diciamo a Webpack come lavorare con i file che trova, come

00:20.520 --> 00:22.940
con l'applicazione. ts e poi, una volta compreso

00:22.940 --> 00:25.520
il file, come gestire tutte le importazioni

00:25.520 --> 00:27.290
presenti nel file.

00:27.290 --> 00:29.800
Come deve comportarsi Webpack con questi file?

00:29.800 --> 00:33.640
Si può dire a Webpack di aggiungere un array di regole qui, perché

00:33.640 --> 00:35.430
si possono impostare più regole

00:35.430 --> 00:37.300
da applicare a tutti i file.

00:37.300 --> 00:40.690
In questo caso ne serve solo una, ma in progetti più complessi,

00:40.690 --> 00:44.030
in cui si vuole usare Webpack anche per gestire file CSS,

00:44.030 --> 00:46.140
immagini o altro, si possono aggiungere

00:46.140 --> 00:49.220
più regole per diversi tipi di file.

00:49.220 --> 00:51.500
E come già detto, i documenti ufficiali sono un

00:51.500 --> 00:53.840
ottimo posto per imparare di più sui caricatori,

00:53.840 --> 00:55.730
che alla fine si usano per insegnare a Webpack

00:55.730 --> 00:57.980
a conoscere i diversi file e per imparare di più

00:57.980 --> 00:59.720
su Webpack in generale.

00:59.720 --> 01:02.560
Quindi aggiungeremo un caricatore di questo tipo.

01:02.560 --> 01:06.110
Un caricatore è semplicemente un pacchetto che dice a Webpack come

01:06.110 --> 01:07.780
gestire determinati file e, naturalmente,

01:07.780 --> 01:09.960
qui abbiamo il caricatore ts, che ci aiuta

01:09.960 --> 01:11.520
a dire a Webpack come gestire

01:11.520 --> 01:13.690
i file TypeScript.

01:13.690 --> 01:16.850
Aggiungiamo quindi una regola, che è semplicemente un oggetto JavaScript,

01:16.850 --> 01:19.720
in cui aggiungiamo innanzitutto una proprietà di test.

01:19.720 --> 01:22.950
Descrive un test che Webpack eseguirà su qualsiasi

01:22.950 --> 01:26.510
file che trova per scoprire se questa regola si applica

01:26.510 --> 01:28.550
o meno a quel file.

01:28.550 --> 01:31.080
Il test è un'espressione regolare.

01:31.080 --> 01:33.610
E voglio dire a Webpack che ogni file

01:33.610 --> 01:36.950
che finisce con . tuali dovrebbero essere utilizzati

01:36.950 --> 01:38.913
o gestiti da questa regola.

01:39.860 --> 01:42.940
Un'espressione regolare che controlla l'estensione del file può utilizzare

01:42.940 --> 01:46.260
una barra rovesciata e poi . e poi il segno del

01:46.260 --> 01:47.550
dollaro.

01:47.550 --> 01:50.840
Questa è la nostra espressione regolare che dice a Webpack di controllare

01:50.840 --> 01:54.593
i file che finiscono con . ts.

01:55.560 --> 01:58.810
Poi, bisogna anche specificare cosa Webpack deve

01:58.810 --> 02:02.590
fare con questi file, e lo si fa con la parola chiave use.

02:02.590 --> 02:05.290
Qui si specifica il caricatore che Webpack

02:05.290 --> 02:07.590
deve usare, nel mio caso ts-loader.

02:07.590 --> 02:10.600
Quindi diciamo a Webpack che ogni file TypeScript che

02:10.600 --> 02:12.720
trova deve essere gestito dal caricatore

02:12.720 --> 02:16.010
TypeScript, che a sua volta sa cosa fare con tale file.

02:16.010 --> 02:17.680
Il caricatore di ts prenderà automaticamente

02:17.680 --> 02:20.330
il tsconfig. json, quindi non è necessario

02:20.330 --> 02:23.430
specificare alcuna configurazione aggiuntiva.

02:23.430 --> 02:26.050
Una configurazione che non fa mai male,

02:26.050 --> 02:29.910
escludere i moduli dei nodi come espressione regolare,

02:29.910 --> 02:33.773
in modo che anche Webpack non cerchi i moduli dei nodi.

02:35.130 --> 02:38.400
Dobbiamo aggiungere un'ulteriore configurazione

02:38.400 --> 02:42.800
dopo quella del modulo, che è la chiave resolve.

02:42.800 --> 02:47.800
Qui si dice a Webpack quali estensioni di file aggiungere alle importazioni

02:47.820 --> 02:49.750
che trova.

02:49.750 --> 02:52.440
Ho detto che Webpack aggiungerà le estensioni da solo e, per impostazione

02:52.440 --> 02:56.160
predefinita, cercherà i file . file js.

02:56.160 --> 02:59.220
Ora vogliamo che Webpack cerchi i file . ts, e poi qui in resolve, possiamo

02:59.220 --> 03:01.280
aggiungere una proprietà extensions,

03:01.280 --> 03:05.390
impostata come uguale a un array, e dire a Webpack che deve cercare

03:05.390 --> 03:08.390
i file . ts e i file

03:08.390 --> 03:10.640
. file js.

03:10.640 --> 03:13.360
Quindi ora Webpack cercherà fondamentalmente questi

03:13.360 --> 03:16.900
file e poi raggrupperà tutti i file che hanno queste estensioni, che

03:16.900 --> 03:18.723
si stanno importando insieme.

03:19.760 --> 03:22.770
E questo è il nostro setup quasi finito per il momento, il nostro

03:22.770 --> 03:24.690
file di configurazione quasi finito

03:24.690 --> 03:26.150
almeno per il momento.

03:26.150 --> 03:28.730
Per questo dobbiamo andare anche in

03:28.730 --> 03:33.070
tsconfig e assicurarci di impostare sourceMap su true.

03:33.070 --> 03:35.210
Questo ci aiuterà a eseguire il debug del nostro

03:35.210 --> 03:37.130
codice e Webpack supporta anche questo.

03:37.130 --> 03:39.850
Ora dobbiamo aggiungere una voce, magari

03:39.850 --> 03:41.340
qui sotto l'output, e

03:41.340 --> 03:43.710
questa è una chiave devtool.

03:43.710 --> 03:47.210
E lì, il valore dovrebbe essere inline-source-map

03:47.210 --> 03:48.510
come stringa.

03:48.510 --> 03:51.620
Questo dice a Webpack che ci saranno già delle mappe

03:51.620 --> 03:53.700
sorgenti generate, che dovrà estrarre

03:53.700 --> 03:57.210
e collegare correttamente al bundle generato, in modo

03:57.210 --> 04:00.170
da ottenere un bundle di questo tipo, ma con un'ottima

04:00.170 --> 04:03.603
esperienza di sviluppo.

04:05.830 --> 04:08.360
Ora possiamo usare Webpack e la domanda

04:08.360 --> 04:09.823
è: come lo usiamo?

04:11.000 --> 04:14.720
Un modo semplice per utilizzarlo è quello di andare al pacchetto. json e aggiungiamo

04:14.720 --> 04:16.650
uno script.

04:16.650 --> 04:18.440
Ad esempio, costruire.

04:18.440 --> 04:19.810
Potete dargli il nome che volete

04:19.810 --> 04:21.620
qui nella sezione script.

04:21.620 --> 04:23.930
E lì, basta eseguire Webpack, digitando

04:23.930 --> 04:26.453
webpack in questo modo.

04:27.560 --> 04:29.880
Ora andiamo anche nella cartella dist

04:29.880 --> 04:32.993
e alla fine rimuoviamo tutto quello che c'è lì dentro;

04:34.000 --> 04:36.870
dopo aver salvato, eseguiamo npm run build e vediamo

04:36.870 --> 04:38.663
se funziona.

04:39.970 --> 04:43.000
E fallisce...

04:45.440 --> 04:47.800
Sì, ho semplicemente fatto un errore di

04:47.800 --> 04:51.440
battitura, non dovrebbe essere devtools, ma devtool qui.

04:51.440 --> 04:53.830
Cambiamo quindi questo in devtool nel file di configurazione

04:53.830 --> 04:56.143
e ora ripetiamo npm run build.

04:59.500 --> 05:02.620
E con questo potete ignorare l'avvertimento che ricevete qui.

05:02.620 --> 05:04.230
Si noterà che nel file dist

05:04.230 --> 05:06.410
è presente un file js in bundle.

05:06.410 --> 05:08.150
E quello che si vede qui

05:08.150 --> 05:09.960
dentro è già un codice illeggibile,

05:09.960 --> 05:14.060
perché la minificazione è in azione.

05:14.060 --> 05:18.680
Quindi questo è già un codice ottimizzato.

05:18.680 --> 05:21.410
Prima di vedere come lavorare con diverse configurazioni,

05:21.410 --> 05:26.120
passiamo all'indice.

05:26.120 --> 05:26.120
html

05:26.120 --> 05:27.510
e regolare le importazioni

05:27.510 --> 05:30.350
qui e il punto bundle. js e per il momento, visto

05:30.350 --> 05:32.220
che non stiamo usando Webpack

05:32.220 --> 05:35.140
Dev Server, eseguiamo npm start per visualizzare

05:35.140 --> 05:38.480
l'indice. file html.

05:38.480 --> 05:40.510
E se ora ricaricate

05:40.510 --> 05:44.890
questa pagina, vedrete che funziona!

05:44.890 --> 05:46.610
Se inseriamo qualcosa qui,

05:46.610 --> 05:49.230
il nostro progetto funziona come dovrebbe

05:49.230 --> 05:52.030
e importa il file js in bundle, quindi un

05:52.030 --> 05:56.200
solo file invece di tutti questi singoli file.

05:56.200 --> 05:59.020
E questo è già un miglioramento.

05:59.020 --> 06:01.640
Qui abbiamo già il codice in bundle che

06:01.640 --> 06:05.410
evita tutte queste richieste htp non necessarie.

06:05.410 --> 06:07.690
A proposito, se si va nella scheda sources e si vuole

06:07.690 --> 06:09.420
eseguire il debug del codice, si troverà

06:09.420 --> 06:11.250
questa cartella Webpack e, al suo interno,

06:11.250 --> 06:12.770
una cartella source, dove si possono

06:12.770 --> 06:15.300
trovare i file TypeScript.

06:15.300 --> 06:19.090
Ad esempio, qui, su project-input, è possibile impostare

06:19.090 --> 06:22.110
un punto di interruzione su gatherUserInput e,

06:22.110 --> 06:24.970
se si preme il pulsante, la pausa si interrompe

06:24.970 --> 06:26.190
e si può eseguire il

06:26.190 --> 06:27.680
debug del codice.

06:27.680 --> 06:29.650
E sono le mappe sorgente che arrivano, che

06:29.650 --> 06:31.200
ci aiutano davvero a sviluppare

06:31.200 --> 06:34.050
e che rendono la nostra vita di sviluppatori più facile.

06:34.050 --> 06:37.520
Abbiamo ottenuto questo codice ottimizzato, ma grazie alle mappe sorgenti

06:37.520 --> 06:40.750
possiamo eseguire il debug del nostro codice TypeScript originale.

06:40.750 --> 06:43.260
Quindi abbiamo già una configurazione

06:43.260 --> 06:46.280
piuttosto sorprendente, che ci offre già molte

06:46.280 --> 06:48.440
ottimizzazioni; ora completiamo

06:48.440 --> 06:52.050
il tutto e assicuriamoci di aver incluso il Webpack Dev

06:52.050 --> 06:54.440
Server, in modo da avere due flussi di

06:54.440 --> 06:58.443
lavoro, uno per la produzione e uno per lo sviluppo.
