WEBVTT

00:02.220 --> 00:04.080
-: Bây giờ các loại giao lộ là một chuyện.

00:04.080 --> 00:05.470
Tuy nhiên, được sử dụng thường

00:05.470 --> 00:07.800
xuyên hơn là một tính năng khác, và đó sẽ là loại bảo

00:07.800 --> 00:10.590
vệ, một tính năng mà chúng tôi thực sự đã sử dụng một chút.

00:10.590 --> 00:12.400
Hãy sử dụng Combinable tại đây.

00:12.400 --> 00:15.560
Đó là một kiểu kết hợp trong đó chúng ta có một chuỗi hoặc một

00:15.560 --> 00:18.020
số, và các trình bảo vệ kiểu giúp chúng ta với các

00:18.020 --> 00:21.050
kiểu kết hợp bởi vì mặc dù thật tuyệt khi có tính linh hoạt,

00:21.050 --> 00:23.610
nhưng thường thì bạn cần biết chính xác loại nào

00:23.610 --> 00:26.200
bạn đang nhận trong thời gian chạy.

00:26.200 --> 00:28.630
Giả sử ở đây chúng ta có hàm add, trong

00:28.630 --> 00:33.070
đó tôi nhận được một số cần thuộc loại Có thể kết hợp, do đó, một chuỗi

00:33.070 --> 00:35.100
hoặc một số, và do đó, tôi sẽ thực

00:35.100 --> 00:37.990
sự đặt tên cho nó là a ở đây, sau đó tôi có một đối

00:37.990 --> 00:39.520
số khác cũng cần có thể kết

00:39.520 --> 00:42.110
hợp, do đó, một số hoặc một chuỗi, sau đó

00:42.110 --> 00:44.640
tôi muốn trả về a cộng b.

00:44.640 --> 00:47.020
Bây giờ chúng ta đã thấy trong quá khứ rằng điều này không hoạt động.

00:47.020 --> 00:51.320
Thay vào đó, bây giờ chúng ta cần kiểm tra xem typeof

00:51.320 --> 00:53.740
a có bằng chuỗi hay không,

00:55.660 --> 00:59.780
hoặc typeof b bằng chuỗi và nếu đúng như vậy,

00:59.780 --> 01:01.000
chúng ta sẽ trả

01:01.000 --> 01:04.681
về a. toString cộng với b. toString.

01:04.681 --> 01:06.750
Vì vậy, chúng tôi nối hai chuỗi này;

01:06.750 --> 01:09.570
mặt khác, nếu không biến nó thành câu lệnh if này,

01:09.570 --> 01:11.510
chúng tôi trả về a cộng b như thế này

01:11.510 --> 01:13.270
vì bây giờ nhóm loại biết a và

01:13.270 --> 01:15.620
b phải là số ở đây, bởi vì nếu ít nhất một

01:15.620 --> 01:18.230
trong số chúng không phải là số, chúng tôi

01:18.230 --> 01:19.710
sẽ là ở đây.

01:19.710 --> 01:22.890
Bây giờ cái này ở đây được gọi là bảo vệ kiểu

01:22.890 --> 01:25.280
vì nó cho phép chúng ta sử dụng các

01:25.280 --> 01:27.980
kiểu kết hợp linh hoạt mang lại cho chúng

01:27.980 --> 01:32.550
ta và vẫn đảm bảo rằng mã của chúng ta chạy chính xác trong thời

01:32.550 --> 01:34.830
gian chạy, bởi vì bạn thường có

01:34.830 --> 01:38.160
các hàm hoạt động với hai hoặc ba kiểu khác nhau,

01:38.160 --> 01:40.570
và do đó, một kiểu kết hợp là hoàn

01:40.570 --> 01:43.890
hảo, nhưng chính xác những gì bạn làm với các

01:43.890 --> 01:46.940
giá trị sau đó sẽ phụ thuộc vào kiểu, như ở

01:46.940 --> 01:51.670
đây, nơi chúng ta nối hoặc cộng theo toán học.

01:51.670 --> 01:55.310
Bây giờ đây là một loại bảo vệ bằng cách sử dụng typeof.

01:55.310 --> 01:58.970
Bạn cũng có thể viết các loại bảo vệ kiểu khác.

01:58.970 --> 02:00.880
và để làm điều đó, hãy để tôi quay lại với các

02:00.880 --> 02:03.050
loại quản trị viên và nhân viên mà tôi đã có ở đó,

02:03.050 --> 02:04.950
nơi tôi có các đặc quyền đối với quản trị viên

02:04.950 --> 02:06.943
và startDate đối với nhân viên.

02:08.590 --> 02:11.810
Bây giờ chúng ta có ElevatedEmployee kết hợp cả hai.

02:11.810 --> 02:14.980
Bây giờ cũng tạo một loại khác ở đây.

02:14.980 --> 02:16.330
Đó là UnknownEmployee.

02:18.000 --> 02:21.940
Đây chỉ là một nhân viên hoặc một quản trị viên.

02:21.940 --> 02:25.540
Vì vậy, chúng tôi có một loại kết hợp bằng cách sử dụng hai loại đối tượng tùy chỉnh của tôi.

02:25.540 --> 02:28.173
Vì vậy, nhân viên chưa biết là một trong hai.

02:29.230 --> 02:32.003
Bây giờ chúng ta có thể có một hàm, printEmployeeInformation,

02:34.620 --> 02:36.420
nơi tôi cần chuyển vào một nhân viên

02:36.420 --> 02:39.660
và đó phải là loại nhân viên không xác định.

02:39.660 --> 02:41.610
Bây giờ ở đây, tôi muốn an ủi. đăng nhập các mẩu

02:41.610 --> 02:44.030
thông tin khác nhau về nhân viên.

02:44.030 --> 02:47.210
Ví dụ, tên từ emp. name, sẽ hoạt động mà

02:47.210 --> 02:48.580
không gặp sự cố vì cả

02:48.580 --> 02:52.140
hai loại nhân viên đều có thuộc tính name.

02:52.140 --> 02:56.730
Nhưng rồi tôi cũng muốn an ủi. đăng nhập các đặc quyền bằng

02:58.160 --> 03:01.520
cách truy cập emp. đặc quyền và ở đây tôi đã

03:01.520 --> 03:04.350
gặp sự cố khi tự động hoàn thành vì TypeScript

03:04.350 --> 03:07.100
không thể xác nhận rằng điều này luôn

03:07.100 --> 03:09.890
tồn tại trong đối số, vì UnknownEmployee

03:09.890 --> 03:13.540
có thể là một nhân viên bình thường không có thuộc

03:13.540 --> 03:16.260
tính đặc quyền.

03:16.260 --> 03:18.330
Chỉ có quản trị viên có điều đó.

03:18.330 --> 03:20.100
Vì vậy, bây giờ chúng ta cần một người bảo vệ loại ở đây.

03:20.100 --> 03:24.530
Vấn đề chỉ là với typeof, chúng tôi sẽ không giành được gì cả.

03:24.530 --> 03:26.830
Nếu chúng tôi kiểm tra loại nhân viên,

03:26.830 --> 03:29.470
đó sẽ chỉ là đối tượng trong thời gian chạy.

03:29.470 --> 03:31.380
Tuy nhiên, điều đó không cho chúng tôi biết liệu

03:31.380 --> 03:32.940
nó có thuộc tính này hay không.

03:32.940 --> 03:34.960
Do đó, nếu tôi di chuyển mã trong kiểm tra

03:34.960 --> 03:37.430
if này, TypeScript sẽ không vui hơn trước vì một

03:37.430 --> 03:39.750
đối tượng, tốt, chỉ là một đối tượng.

03:39.750 --> 03:41.920
Không cho chúng tôi biết bất cứ điều gì về các thuộc tính.

03:41.920 --> 03:44.980
Chúng tôi không thể kiểm tra xem đó có phải là loại Nhân

03:44.980 --> 03:48.130
viên hay không vì đó không phải là loại mà JavaScript biết

03:48.130 --> 03:49.840
và hãy nhớ rằng kiểm tra này chạy

03:49.840 --> 03:52.560
trong thời gian chạy và sử dụng JavaScript, vì

03:52.560 --> 03:56.190
vậy chúng tôi chỉ có thể so sánh loại typeof mang lại cho chúng

03:56.190 --> 03:58.010
tôi với các loại mà JavaScript

03:58.010 --> 04:01.920
biết và đó sẽ là đối tượng, chuỗi, số và boolean được bật và loại tùy

04:01.920 --> 04:05.610
chỉnh của chúng tôi không phải là một phần của nó.

04:05.610 --> 04:07.950
Điều đó chỉ tồn tại trong thế giới TypeScript,

04:07.950 --> 04:11.020
không tồn tại trong thế giới JavaScript đã biên dịch.

04:11.020 --> 04:13.990
Vì vậy, do đó, điều này cũng không hoạt động.

04:13.990 --> 04:17.960
Bây giờ ở đây, cách giải quyết của chúng ta là sử dụng một kiểm tra if khác.

04:17.960 --> 04:20.240
Chúng tôi biết rằng chúng tôi muốn truy cập các

04:20.240 --> 04:25.240
đặc quyền, vì vậy chúng tôi có thể kiểm tra xem các đặc quyền của nhân viên có phù hợp hay không.

04:26.400 --> 04:28.560
Vấn đề chỉ là TypeScript hoàn toàn không

04:28.560 --> 04:30.690
cho phép chúng tôi truy cập thuộc tính

04:30.690 --> 04:33.550
này, thậm chí không kiểm tra nó như thế này, nhưng

04:33.550 --> 04:36.200
có một cách khác để chúng tôi kiểm tra nó.

04:36.200 --> 04:40.000
Chúng ta có thể sử dụng từ khóa in được tích hợp trong JavaScript.

04:40.000 --> 04:43.120
Chúng tôi có thể kiểm tra xem các đặc quyền, hiện

04:43.120 --> 04:46.690
được viết dưới dạng một chuỗi, có trong emp hay không.

04:46.690 --> 04:49.130
Đây là mã JavaScript cho phép kiểm

04:49.130 --> 04:53.480
tra xem điều này có tồn tại dưới dạng thuộc tính của nhân viên hay

04:53.480 --> 04:58.380
không và nếu đúng như vậy, TypeScript sẽ phát hiện kiểm tra này tại đây

04:58.380 --> 05:01.200
và do đó, cho phép chúng tôi truy cập thuộc

05:01.200 --> 05:04.543
tính này bên trong nếu kiểm tra tại đây.

05:05.852 --> 05:08.380
Và chúng ta có thể lặp lại điều đó cho startDate,

05:08.380 --> 05:12.240
và do đó, kiểm tra xem startDate có phải là một thuộc tính ở đây

05:12.240 --> 05:15.710
hay không và do đó, chúng ta cũng có thể xuất giá trị này trong

05:16.970 --> 05:18.730
if check này.

05:18.730 --> 05:23.687
Vì vậy, bây giờ với điều đó, nếu chúng tôi gọi printEmployeeInformation

05:24.650 --> 05:28.363
và chúng tôi chuyển vào một nhân viên mà chúng tôi đã tạo,

05:31.410 --> 05:34.860
e1, bạn sẽ thấy rằng điều này được biên dịch mà không

05:34.860 --> 05:37.430
có lỗi và thực sự, xuất ra các đặc quyền

05:37.430 --> 05:40.730
và, ở đây, dữ liệu cũng chỉ nên nói Ngày bắt đầu ở đây,

05:40.730 --> 05:42.530
tất nhiên.

05:42.530 --> 05:45.820
Nhưng cùng với đó, nó mang lại cho chúng tôi đầu ra mà chúng tôi mong đợi.

05:45.820 --> 05:48.590
Và ở đầu bên kia, nếu chúng ta chuyển vào một nhân viên

05:48.590 --> 05:50.950
không có tất cả các trường này, chẳng hạn, nếu

05:50.950 --> 05:53.090
chúng ta tạo nhanh một nhân viên chỉ có ngày

05:53.090 --> 05:56.383
bắt đầu nhưng không có đặc quyền, thì tất cả công việc và được

05:57.850 --> 06:00.370
biên dịch không có lỗi, và chúng tôi chỉ đơn giản

06:00.370 --> 06:03.160
là không in bất cứ điều gì về các đặc quyền vì điều này

06:03.160 --> 06:05.723
nếu kiểm tra chúng tôi có trong đó.

06:07.650 --> 06:09.800
Khi làm việc với các lớp, bạn

06:09.800 --> 06:13.070
cũng có thể sử dụng một loại bảo vệ kiểu khác,

06:13.070 --> 06:16.520
và đó sẽ là bảo vệ kiểu instanceof.

06:16.520 --> 06:21.460
Giả sử ở dưới đó chúng ta có một lớp Xe hơi và lớp đó có một phương

06:21.460 --> 06:23.800
thức điều khiển mà nó chỉ nói

06:23.800 --> 06:26.523
console. log Lái xe, và chúng

06:28.480 --> 06:31.750
ta có một lớp khác, Xe tải, cũng có một phương

06:31.750 --> 06:34.623
thức lái xe, hoặc có thể bạn nói Lái xe

06:35.840 --> 06:38.280
tải, nhưng chúng ta phải nói tên

06:38.280 --> 06:40.250
phương thức.

06:40.250 --> 06:43.980
Và ở đó chúng ta cũng có một phương thức loadCargo,

06:43.980 --> 06:46.570
trong đó chúng ta có một số tiền, là

06:46.570 --> 06:49.040
một con số, và ở đây tôi chỉ có một số

06:49.040 --> 06:53.570
mã giả mà tôi nói, "Đang tải hàng hóa cộng với số lượng. Đại loại như thế, rất tiếc, số lượng, đại loại như vậy.

06:53.570 --> 06:57.323
Vì vậy, bây giờ chúng ta có hai lớp, tất nhiên, có một số điểm tương

06:58.170 --> 06:59.320
đồng, phương pháp

06:59.320 --> 07:02.090
điều khiển, nhưng cũng có sự khác biệt.

07:02.090 --> 07:03.890
Bây giờ, một lần nữa, chúng

07:03.890 --> 07:08.200
ta có thể tạo một loại liên kết ở đây, Xe, là Ô tô hoặc Xe

07:08.200 --> 07:13.030
tải, và bây giờ, giả sử, chúng ta tạo một phương tiện mới, v1,

07:13.030 --> 07:18.030
là Ô tô mới và một loại khác, v2, là là một Xe tải mới.

07:18.050 --> 07:21.873
Bây giờ tôi có một chức năng, useVehicle, chỉ mong nhận được một phương

07:23.890 --> 07:26.443
tiện, phương tiện này phải thuộc loại phương

07:27.700 --> 07:29.780
tiện, vì vậy phương tiện này phải thuộc

07:29.780 --> 07:31.350
loại liên kết này.

07:31.350 --> 07:34.203
Vì vậy, ở đây chúng ta có một phương tiện, và bây giờ, giả sử,

07:35.420 --> 07:37.490
mục tiêu của chúng ta ở đây là làm mọi thứ chúng

07:37.490 --> 07:40.040
ta có thể làm với phương tiện: lái và bốc hàng.

07:40.040 --> 07:43.400
Vì vậy, tất nhiên, chúng ta có thể gọi phương tiện. lái xe vì điều đó luôn tồn tại, nhưng đối với phương

07:43.400 --> 07:45.420
tiện. loadCargo, chúng tôi

07:45.420 --> 07:50.010
gặp sự cố vì chỉ có xe tải mới gặp vấn đề đó.

07:50.010 --> 07:52.720
Một chiếc xe không có nó, vì vậy điều này sẽ không hoạt động.

07:52.720 --> 07:56.440
Tất nhiên, bây giờ chúng ta có thể kiểm tra lại xem loadCargo có trong xe

07:56.440 --> 07:59.513
hay không và nếu đúng như vậy, chúng ta có thể sử dụng nó.

08:00.760 --> 08:05.760
Ít nhất là nếu tôi sửa lỗi đánh máy đó ở đây.

08:06.430 --> 08:09.480
Vì vậy, bây giờ chúng tôi lưu nó và sau đó chúng tôi

08:09.480 --> 08:13.230
gọi useVehicle và chuyển vào v1, sau đó chúng tôi gọi lại với

08:13.230 --> 08:17.400
v2 và tôi lưu tất cả những thứ đó, nó biên dịch và nó hoạt động.

08:17.400 --> 08:21.680
Bây giờ đó là một cách để làm điều đó.

08:21.680 --> 08:23.340
Một cách khác, có thể thanh

08:23.340 --> 08:26.580
lịch hơn một chút vì nó cũng loại bỏ nguy cơ bạn

08:26.580 --> 08:28.600
nhập sai chuỗi thuộc tính này

08:28.600 --> 08:31.920
ở đây, đó là bạn sử dụng instanceof.

08:31.920 --> 08:34.080
Chúng tôi có thể kiểm tra xem xe có phải là một thể hiện của Xe tải hay không.

08:34.080 --> 08:39.080
Nếu đúng như vậy, chúng tôi biết nó sẽ có phương thức loadCargo.

08:39.360 --> 08:42.510
Một instanceof là một toán tử bình thường được tích

08:42.510 --> 08:45.230
hợp trong vanilla JavaScript, vì vậy đây

08:45.230 --> 08:47.430
không phải là mã TypeScript.

08:47.430 --> 08:49.280
Giống như typeof, đây là một phần

08:49.280 --> 08:52.250
của JavaScript và nó thực thi trong thời gian chạy.

08:52.250 --> 08:54.290
JavaScript không biết loại Xe tải,

08:54.290 --> 08:56.780
nhưng nó biết các hàm xây dựng và các lớp cuối

08:56.780 --> 08:59.330
cùng chỉ được dịch sang các hàm xây dựng và

08:59.330 --> 09:01.490
TypeScript sau đó có thể tìm hiểu xem

09:01.490 --> 09:03.400
liệu phương tiện có được tạo dựa

09:03.400 --> 09:06.580
trên chức năng xây dựng Xe tải hay không.

09:06.580 --> 09:10.290
Vì vậy, vì các lớp được biên dịch thành thứ

09:10.290 --> 09:11.970
mà JavaScript hiểu

09:11.970 --> 09:15.450
được, hàm tạo, nên nó có thể sử dụng nó.

09:15.450 --> 09:17.210
Nếu chúng ta sẽ sử dụng một giao diện ở

09:17.210 --> 09:20.390
đây thay vì một lớp, và do đó, tất nhiên, chúng ta không thể triển khai

09:20.390 --> 09:21.223
ở đây, nhưng chúng

09:21.223 --> 09:22.950
ta sẽ làm điều đó khi chúng ta tạo một

09:22.950 --> 09:25.130
đối tượng với ký hiệu chữ đối tượng, thì chúng

09:25.130 --> 09:27.300
ta có thể không sử dụng instanceof vì các giao

09:27.300 --> 09:30.940
diện, như bạn đã học, không được biên dịch thành bất kỳ mã JavaScript nào và

09:30.940 --> 09:34.370
do đó, chúng tôi không thể sử dụng chúng trong thời gian chạy.

09:34.370 --> 09:37.160
Đối với các lớp, chúng ta có thể làm điều đó vì JavaScript

09:37.160 --> 09:40.010
hỗ trợ các lớp và hàm tạo, và với instanceof, sau đó

09:40.010 --> 09:42.290
bạn có thể tìm hiểu xem một số đối tượng có

09:42.290 --> 09:44.500
dựa trên lớp đó hay không.

09:44.500 --> 09:47.660
Nếu chúng ta biết nếu có, thì chúng ta sẽ có hàm loadCargo.

09:47.660 --> 09:51.850
Vì vậy, đây là những người bảo vệ loại.

09:51.850 --> 09:53.480
Cuối cùng, các bộ bảo vệ kiểu

09:53.480 --> 09:55.890
chỉ là một thuật ngữ mô tả ý tưởng hoặc

09:55.890 --> 09:59.470
cách tiếp cận kiểm tra xem một thuộc tính hoặc phương thức

09:59.470 --> 10:02.980
nhất định có tồn tại trước khi bạn thử sử dụng nó hay không

10:02.980 --> 10:06.310
hoặc liệu bạn có thể làm gì đó với kiểu trước khi thử

10:06.310 --> 10:08.470
sử dụng nó hay không.

10:08.470 --> 10:10.220
Đối với các đối tượng, điều đó

10:10.220 --> 10:15.113
có thể được thực hiện với instanceof hoặc với in, đối với các loại khác, bạn có thể

10:16.140 --> 10:19.780
sử dụng typeof, và do đó, giờ đây bạn có tất cả sự linh hoạt để sử

10:19.780 --> 10:22.280
dụng các loại kết hợp linh hoạt cung cấp cho

10:22.280 --> 10:25.090
bạn và vẫn viết mã sau đó thực hiện một việc hoặc

10:25.090 --> 10:29.050
cái khác dựa trên loại chính xác mà bạn nhận được khi chạy.
