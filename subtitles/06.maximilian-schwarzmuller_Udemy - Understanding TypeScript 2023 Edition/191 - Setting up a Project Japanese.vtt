WEBVTT

00:02.290 --> 00:06.110
講師：では､ さっそくNodeのtypescriptアプリケーションを作ってみましょう｡

00:06.110 --> 00:08.750
さて､ 今さらwebpackなどの複雑な設定が必要なのかと思われるかもしれませんが､

00:08.750 --> 00:12.410
実はそうではありません｡

00:12.410 --> 00:16.270
ここでは､ tscコマンドを使用してファイルをコンパイルすることにします｡ 

00:16.270 --> 00:19.890
そして､ コンパイルしたファイルをnodeコマンドで実行します｡

00:19.890 --> 00:21.700
ここで必要なのは､ それだけです｡ 

00:21.700 --> 00:28.810
それでも､ ここでnpm initで簡単にプロジェクトを立ち上げて､ パッケージを取得することにします｡

00:28.810 --> 00:28.810
なぜなら､

00:28.810 --> 00:36.240
ここでは通常のNodeアプリケーションを作成するので､ Expressのようなサードパーティパッケージをインストールすることになるからです｡

00:36.240 --> 00:36.240
js.

00:36.240 --> 00:40.950
さらに､ 開発プロセスを簡素化するためのツールを1つインストールしたいと思います｡

00:40.950 --> 00:44.630
そこで､ 任意の空のフォルダで､ ここでnpm initを実行します｡ 

00:44.630 --> 00:50.540
必要であれば､ ここですべての初期設定を確認し､ その後､ パッケージができあがります｡

00:50.540 --> 00:50.540
jsonファイルは以下のようなものです｡

00:52.750 --> 00:56.210
ここで､ tsc --initを実行して､ このプロジェクトをtypescriptプロジェクトとして初期化し､

00:56.210 --> 01:01.860
このtsconfigが得られるようにします｡

01:01.860 --> 01:01.860
json

01:01.860 --> 01:04.313
ファイルを作成し､ 必要事項を入力します｡

01:05.770 --> 01:09.020
そして､ そこですでに､ 最初の調整をしています｡ 

01:09.020 --> 01:13.300
ここでのターゲットは､ 使用しているnodeのバージョンによって､ 例えばes2018に設定することは容易ですが､

01:13.300 --> 01:21.380
最新のものを使用しているのであれば､ この最新のJavaScript構文は確実にサポートされるはずです｡

01:21.380 --> 01:24.220
Moduleはcommonjsのままでいいが､ ここにmoduleResolutionも追加して､

01:24.220 --> 01:29.010
これをnodeに設定したい｡

01:29.010 --> 01:35.483
これは単に､ typescriptにあなたの異なるファイルやインポートがどのように一緒に動作するかを伝えるものです｡

01:36.410 --> 01:37.640
そして､ すべてが正しく動作することを確認するために､

01:37.640 --> 01:40.020
これをnodeに設定する必要があります｡

01:40.020 --> 01:42.470
また､ outDirをコメントアウトしてdistに設定し､

01:42.470 --> 01:49.600
rootDirをsrcに設定して､ typescriptのソースコードを分離したいからです｡

01:49.600 --> 01:55.733
そして､ 出力は､ nodeの助けを借りて実行できる実際のJavaScriptファイルになります｡

01:56.820 --> 01:58.850
それ以外はストリクトモードで問題ありませんが､

01:58.850 --> 02:03.030
もちろん､ これはすべて自分のニーズや好みに合わせて微調整してください｡

02:03.030 --> 02:06.320
結局､ このコースを通してそのすべてを学びましたね｡ 

02:06.320 --> 02:08.830
そして､ これで､ この設定を保存することができます｡ 

02:08.830 --> 02:12.460
ちなみに､ このごく基本的なスタートアップも添付されています｡

02:12.460 --> 02:14.120
この設定を保存することができます｡ 

02:14.120 --> 02:20.230
そして､ ソースコード､ typescriptのソースコードを書き込むsrcフォルダも作成します｡

02:20.230 --> 02:23.020
そして､ ここが今､ 私が飛び込みたいところなのです｡ 

02:23.020 --> 02:27.960
これからsrcフォルダにtypescriptでアプリケーションを構築します｡

02:27.960 --> 02:32.920
また､ 簡単なWebサーバを構築し､ Expressも使用する予定です｡

02:32.920 --> 02:32.920
jsで､

02:32.920 --> 02:36.120
まず最初に､ ここにいくつかの依存関係をインストールします｡

02:36.120 --> 02:44.100
npm install -saveで､ Node用のExpressフレームワークであるexpressをインストールします｡

02:44.100 --> 02:44.100
もちろん､

02:44.100 --> 02:45.680
常に必要というわけではありませんが､ ここでは､

02:45.680 --> 02:48.440
Node Expressアプリケーションを構築することにします｡

02:48.440 --> 02:51.500
そして､ 受信したリクエストのボディを解析するのに役立つ body-parser

02:51.500 --> 02:54.403
パッケージがインストールされます｡

02:55.290 --> 02:58.180
とりあえず､ 私のプロダクションの依存関係については以上です｡ 

02:58.180 --> 03:00.110
後日､ 追加する可能性もあります｡ 

03:00.110 --> 03:01.523
では､ ここでエンターキーを押してみましょう｡ 

03:02.960 --> 03:04.120
そして､ それをインストールした上で､

03:04.120 --> 03:07.540
開発用の依存関係を見てみましょう｡

03:07.540 --> 03:11.450
npm install --save-dev でこれらをインストールし､ そこに modemon

03:11.450 --> 03:13.330
をインストールしたいと思います｡ modemon

03:13.330 --> 03:18.210
は､ Node でファイルを実行できるようにするツールですが､ ファイルやそのファイルがあるフォルダ､

03:18.210 --> 03:22.690
さらにすべてのサブフォルダに変更がないかどうかを監視するものです｡

03:22.690 --> 03:24.050
ファイルが変更されるたびに､

03:24.050 --> 03:26.030
Nodeサーバーを再起動します｡

03:26.030 --> 03:27.620
これは､ ソースコードを変更するたびに､

03:27.620 --> 03:29.510
Nodeアプリケーションサーバーを自動的に再起動するため､

03:29.510 --> 03:33.500
単純に開発速度を上げることができます｡

03:33.500 --> 03:36.180
コードが変わるとサーバーを再起動する必要があります｡

03:36.180 --> 03:39.430
そうしないと､ サーバーはまだ古いコードで動いているからです｡ しかし､

03:39.430 --> 03:44.190
手動で再起動するのは煩わしいので､ nodemonでこれを高速化することはできません｡

03:44.190 --> 03:47.323
そして今のところ､ 実はそれだけなのです｡ 

03:49.290 --> 03:50.340
では､ ここでエンターキーを押して､

03:50.340 --> 03:52.360
この開発用の依存関係をインストールしましょう｡

03:52.360 --> 03:54.760
このコースで最後に必要なのはこれではないでしょうが､

03:54.760 --> 03:56.660
とりあえずは大丈夫です｡

03:56.660 --> 03:58.830
だから､ これが終わるのを待とう｡ 

03:58.830 --> 04:00.130
さて､ インストールが完了したので､

04:00.130 --> 04:01.450
非常に基本的な Node Express

04:01.450 --> 04:04.773
アプリケーションの作成に取りかかりましょう｡
