WEBVTT

00:02.350 --> 00:03.921
Ausbilder: Also, wir haben hier Gewerkschaftstypen.

00:03.921 --> 00:07.440
Lassen Sie uns auf dieser Idee der Unionstypen aufbauen

00:07.440 --> 00:09.764
und auch Literal-Typen einführen.

00:09.764 --> 00:14.290
Literale Typen sind Typen, bei denen man nicht nur sagt, dass eine bestimmte Variable

00:14.290 --> 00:16.436
oder ein Parameter eine Zahl oder eine

00:16.436 --> 00:19.700
Zeichenkette enthalten soll, sondern bei denen man sich

00:19.700 --> 00:21.230
über den genauen Wert, den sie

00:21.230 --> 00:23.800
enthalten soll, sehr klar ist.

00:23.800 --> 00:26.064
Das haben wir schon bei den Grundlagen gesehen.

00:26.064 --> 00:28.408
Const Nummer zwei, zum Beispiel.

00:28.408 --> 00:32.098
Wenn ich mit dem Mauszeiger darüberfahre, sehen Sie, dass der Typ, der abgeleitet wurde,

00:32.098 --> 00:35.680
nicht die Zahl, sondern die 2 ist. 8.

00:35.680 --> 00:37.290
Und die Typengruppe hat diese

00:37.290 --> 00:41.220
konkrete Zahl hier als Typ abgeleitet, weil sie eine Konstante ist.

00:41.220 --> 00:43.810
Er wird sich nie ändern und daher weiß die Typengruppe, dass der Wert, den

00:43.810 --> 00:48.211
ich hier zugewiesen habe, genau der Typ ist, den ich habe. Das ist natürlich eine Zahl,

00:48.211 --> 00:52.796
man könnte sagen 2. 8 ist von der Zahlenart abgeleitet, aber

00:52.796 --> 00:56.320
es ist eine bestimmte Zahl. Und das gilt nicht nur für

00:56.320 --> 00:59.160
Zahlen, sondern auch für Zeichenketten

00:59.160 --> 01:02.860
und so weiter. Vor allem für Streicher kann dies sehr nützlich sein.

01:02.860 --> 01:07.420
Nehmen wir an, dass wir in unserer kombinierten Funktion Zahlen oder Zeichenketten erwarten

01:07.420 --> 01:10.190
und sie je nach Ergebnis unterschiedlich kombinieren,

01:10.190 --> 01:13.756
aber wir wollen auch dem Aufrufer der Funktion erlauben, zu definieren,

01:13.756 --> 01:18.756
wie das Ergebnis zurückgegeben werden soll, so dass wir im Grunde eine Konvertierung von Zahlen in

01:18.880 --> 01:25.370
Zeichenketten oder umgekehrt erzwingen können.

01:25.370 --> 01:25.370
Wir

01:25.370 --> 01:29.740
könnten dies mit dem dritten Parameter tun und diesen, sagen wir mal, Ergebnistyp oder Ergebniskonvertierung

01:29.740 --> 01:33.208
nennen oder wie auch immer Sie ihn nennen wollen, und ich möchte dies mit einem

01:33.208 --> 01:37.240
String beschreiben. Ich setze dies also auf

01:37.240 --> 01:41.122
den Typ string. Meine Idee ist nun, dass ich combine

01:41.122 --> 01:45.625
hier mit zwei Zahlen aufrufen kann und zum Beispiel eine Zeichenkette

01:45.625 --> 01:50.625
von "as-number" übergeben kann und es liegt ganz bei Ihnen, welchen Bezeichner

01:50.630 --> 01:55.630
Sie hier verwenden. Dort unten könnten wir "as-text" haben, aber dann

01:56.260 --> 01:59.357
könnten wir eine andere Kombination hier CombinedStringAges

02:02.910 --> 02:07.310
haben, wo ich in zwei Zeichenfolgen übergeben, aber ich will immer noch diese "as-number"

02:07.310 --> 02:10.030
ausgeben und dies wäre ein Fall, wo der dritte Parameter

02:10.030 --> 02:13.540
hilfreich sein kann, um eine Konvertierung zu erzwingen, weil,

02:13.540 --> 02:17.050
wenn ich in zwei Zeichenfolgen hier übergeben normalerweise würden

02:17.050 --> 02:19.950
wir es in diesem else-Zweig machen und verketten sie und

02:19.950 --> 02:24.730
ich könnte dies als eine Zahl stattdessen zurückgeben wollen, so dass ich auch Konsole

02:24.730 --> 02:34.030
log kombinierte Zeichenfolge Agenten hier.

02:34.030 --> 02:34.030
Jetzt

02:34.030 --> 02:37.512
müssen wir diese Bezeichner nur noch in unserer Funktion berücksichtigen, indem wir resultConversion

02:37.512 --> 02:41.730
in unsere if-Prüfungen aufnehmen. Die Frage ist nun, was genau wir tun

02:41.730 --> 02:45.700
wollen; wollen wir sicherstellen, dass wir diese beiden Strings

02:45.700 --> 02:49.930
als Zahlen addieren können, oder wollen wir das Ergebnis erzwingen,

02:49.930 --> 02:54.012
unabhängig davon, ob es eine mathematische Berechnung oder eine

02:54.012 --> 02:58.695
String-Verkettung war, die in einen Text oder eine Zahl umgewandelt werden

02:58.695 --> 03:03.039
soll. Wenn wir eine Konvertierung erzwingen

03:03.039 --> 03:05.960
wollen, könnten wir hier die if-Prüfung hinzufügen

03:05.960 --> 03:10.382
und prüfen, ob die Ergebniskonvertierung gleich "as-number" ist, und

03:10.382 --> 03:15.340
wenn das der Fall ist, möchte ich das Ergebnis mit einem Plus davor zurückgeben,

03:15.340 --> 03:18.826
das es in eine Zahl konvertiert, die Alternative wäre z.B.

03:18.826 --> 03:21.230
parseFloat, aber hier werde ich nur das

03:22.800 --> 03:24.420
Plus nehmen, da dies ein bisschen

03:24.420 --> 03:29.420
kürzer ist, und ansonsten möchte ich das Ergebnis toString zurückgeben, um eine

03:30.156 --> 03:33.593
Ausgabe als String zu erzwingen.

03:34.570 --> 03:38.883
Wenn wir das speichern und dann diese Datei kompilieren, sehen

03:38.883 --> 03:42.300
wir, dass dies das Ergebnis ist, das ich erhalte,

03:42.300 --> 03:46.360
und wir erhalten diese Ausgabe zum Beispiel für unsere String-Kombination

03:47.470 --> 03:51.020
hier, weil, wie ich sagte, die Kombination selbst

03:51.020 --> 03:54.759
die Berechnung sozusagen auf der Grundlage des Typs

03:54.759 --> 03:58.520
durchgeführt wird, den wir eingeben, der hier String

03:58.520 --> 04:02.530
ist, also verketten wir es und konvertieren dann einfach

04:02.530 --> 04:05.860
in das Ergebnis.

04:05.860 --> 04:09.593
Die alternative Logik wäre, den Typ hier zu überprüfen

04:09.593 --> 04:14.320
und eine andere Operation auf der Grundlage des Rückgabetyps, den wir

04:14.320 --> 04:19.180
hier angeben, durchzuführen. Wir könnten dies also auskommentieren

04:19.180 --> 04:22.600
und stattdessen hier sagen, wenn der Typ von Eingabe eins

04:22.600 --> 04:26.230
eine Zahl ist und der Typ von Eingabe zwei eine Zahl ist, oder

04:27.890 --> 04:30.865
wenn resultConversion gleich "as-number" ist,

04:30.865 --> 04:35.865
dann möchte ich Werte wie diese kombinieren, und um diesen Fehler zu vermeiden, erzwinge

04:35.930 --> 04:38.794
ich hier die Umwandlung in Zahlen, indem ich ein

04:38.794 --> 04:42.970
Plus vor jeder Eingabe hinzufüge, damit jede Eingabe in eine Zahl umgewandelt

04:42.970 --> 04:45.490
wird und garantiert eine Zahl ist, bevor

04:45.490 --> 04:48.490
ich sie kombiniere.

04:48.490 --> 04:51.130
Nebenbei bemerkt: Wenn Sie Zeichenketten übergeben,

04:51.130 --> 04:54.610
die nicht in eine Zahl umgewandelt werden können, also z. B. etwas

04:54.610 --> 04:58.800
wie Max, dann erhalten Sie ein NaN, Not a Number als Ergebnis.

04:58.800 --> 05:00.280
Nun, im anderen Fall, so

05:00.280 --> 05:03.170
dass wir nicht "as-number" haben, oder dass wir

05:03.170 --> 05:07.976
einfach keine Zahleneingaben haben, dann machen wir es in diesen Block hier und

05:07.976 --> 05:12.390
jetzt damit, wenn ich hier wieder Ergebnis zurückgebe, und dann speichern

05:12.390 --> 05:16.230
wir das und kompilieren neu, dann sehen wir eine andere Ausgabe

05:16.230 --> 05:20.230
auf unserer Seite. Jetzt erhalten wir 56 in diesen beiden Zeilen

05:20.230 --> 05:22.945
hier, weil wir das Ergebnis nicht konvertieren, also die

05:22.945 --> 05:26.300
verkettete Zeichenfolge für diese Zeile nicht konvertieren, sondern

05:26.300 --> 05:29.070
die Konvertierung vornehmen, bevor wir die beiden Werte

05:29.070 --> 05:31.970
kombinieren. Es bleibt also Ihnen überlassen, welche

05:31.970 --> 05:34.760
Logik Sie implementieren wollen. Ich möchte mir das Konzept der

05:34.760 --> 05:37.551
wörtlichen Typen, das ich zu Beginn dieses Vortrags beschrieben

05:37.551 --> 05:41.180
habe, genauer ansehen. Ich übergebe eine "as-number" und

05:41.180 --> 05:44.157
"as-text" und die Nachteile eines Unternehmens, dass

05:44.157 --> 05:47.600
wir als Entwickler diese Werte auswendig lernen müssen.

05:47.600 --> 05:50.450
Wir müssen darauf achten, dass wir hier nichts falsch machen.

05:50.450 --> 05:54.010
Jetzt könnten wir eine e-num verwenden, um das zu verbessern, aber wenn

05:54.010 --> 05:57.754
wir hier nur zwei Werte haben, "als-Text" oder "als-Zahl", dann vielleicht

05:57.754 --> 06:00.940
alle die Suche ein Literal-Typ könnte eine Option sein.

06:00.940 --> 06:04.173
Wir könnten sagen: "Dies sollte keine Zeichenkette

06:04.173 --> 06:09.173
sein, sondern "als Zahl" oder "als Text"", also verwenden wir einen Union-Typ

06:09.870 --> 06:15.573
in Kombination mit literalen Typen.

06:15.573 --> 06:15.573
Literaltypen

06:15.573 --> 06:17.987
sind die Typen, die auf den Kerntypen String,

06:17.987 --> 06:20.933
Zahl usw. basieren, aber dann haben Sie eine spezifische

06:20.933 --> 06:24.750
Version des Typs. Hier erlauben wir also speziell diese beiden

06:24.750 --> 06:27.960
Strings, nicht irgendeinen String, sondern nur diese beiden Strings.

06:27.960 --> 06:31.460
Wir wollen also eine Zeichenkette für die Ergebniskonvertierung, aber es muss einer

06:31.460 --> 06:34.207
dieser beiden Werte sein. Jeder andere String-Wert wird

06:34.207 --> 06:37.560
nicht zugelassen, das ist also die Idee hinter einem Literal-Typ und

06:37.560 --> 06:40.747
oft werden Sie dies im Zusammenhang mit dem Union-Typ verwenden,

06:40.747 --> 06:43.700
weil Sie nicht nur einen exakten Wert zulassen wollen, Sie könnten

06:43.700 --> 06:46.500
es in Ihrem Code hart codieren, wenn das der Fall wäre, aber

06:46.500 --> 06:49.544
Sie wollen zwei oder mehr mögliche Werte haben.

06:49.544 --> 06:52.580
In diesem Fall haben wir zwei mögliche Werte.

06:52.580 --> 06:56.240
Also jetzt sind wir garantiert, um Ergebniskonvertierung zu

06:56.240 --> 07:00.288
erhalten, die entweder "as-number" oder "as-text" ist und zum Beispiel

07:00.288 --> 07:03.800
hier, wenn ich jetzt versuche, dies mit as-numbe zu vergleichen,

07:03.800 --> 07:07.256
weil ich hier einen Tippfehler habe, ist types group in der

07:07.256 --> 07:10.360
Lage, mir hier in der IDE zu sagen und natürlich alles,

07:10.360 --> 07:15.360
was wir speichern und kompilieren es hier im Terminal, weil es weiß, dass as-numbe ohne

07:15.830 --> 07:18.940
ein r am Ende wird nie ein gültiger Wert für resultConversion

07:18.940 --> 07:24.563
sein, weil ich diese Union-Typ mit diesen literalen Typen festgelegt.

07:25.550 --> 07:27.593
Jetzt haben wir also wieder etwas zusätzliche Typensicherheit

07:27.593 --> 07:31.590
gewonnen und können sicherstellen, dass wir dies nicht falsch verwenden können.

07:31.590 --> 07:34.720
Dasselbe gilt natürlich auch für die Übergabe eines Wertes. Wenn wir hier einen Tippfehler

07:34.720 --> 07:38.747
haben, bekommen wir einen Fehler, nur wenn wir entweder "as-number" oder "as-text"

07:38.747 --> 07:41.947
verwenden, dürfen wir das so kompilieren, wie Sie es sehen, und

07:41.947 --> 07:45.470
jetzt kompilieren Sie das, das funktioniert und wir bekommen die gleiche

07:45.470 --> 07:49.562
Ausgabe wie vorher hier. Es handelt sich also um literale Typen, die besonders nützlich

07:49.562 --> 07:52.193
sind, wenn sie in Verbindung mit Union-Typen verwendet werden.
