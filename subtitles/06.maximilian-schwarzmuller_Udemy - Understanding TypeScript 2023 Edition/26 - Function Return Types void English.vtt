WEBVTT

1
00:00:02.200 --> 00:00:04.080
<v Instructor>Time for another new file.</v>

2
00:00:04.080 --> 00:00:09.080
I'll rename app.ts here to union aliases.ts,

3
00:00:11.100 --> 00:00:13.760
and add a new app.ts file where we can start

4
00:00:13.760 --> 00:00:16.370
from scratch again, close the other file.

5
00:00:16.370 --> 00:00:20.660
And now in here I wanna dive a bit deeper into functions.

6
00:00:20.660 --> 00:00:22.640
Now, of course, with already worked with functions.

7
00:00:22.640 --> 00:00:24.940
For example, here in the union aliases file

8
00:00:24.940 --> 00:00:26.340
with the combine function.

9
00:00:26.340 --> 00:00:29.260
And for example, you saw that for functions

10
00:00:29.260 --> 00:00:32.520
you can assign types to the parameters of functions.

11
00:00:32.520 --> 00:00:34.310
Well, turns out there's a bit more you can do

12
00:00:34.310 --> 00:00:36.483
with functions and types.

13
00:00:37.590 --> 00:00:40.430
For that I'll recreate my add function,

14
00:00:40.430 --> 00:00:43.373
which simply accepts numbers, not strings.

15
00:00:44.270 --> 00:00:48.340
Which does one simple thing, it returns n one plus n two,

16
00:00:48.340 --> 00:00:49.513
so not too tricky.

17
00:00:51.004 --> 00:00:53.740
As I mentioned, we can assign types to parameters,

18
00:00:53.740 --> 00:00:55.180
that's not new.

19
00:00:55.180 --> 00:00:57.030
The function overall, however,

20
00:00:57.030 --> 00:01:01.050
has one important other type, it has a return type.

21
00:01:01.050 --> 00:01:03.990
And here the return type is inferred by TypeScript.

22
00:01:03.990 --> 00:01:06.490
We can see it if we hover over add.

23
00:01:06.490 --> 00:01:10.760
Here at the end, the colon after the parameter list,

24
00:01:10.760 --> 00:01:14.190
this here, describes the return type of the function.

25
00:01:14.190 --> 00:01:16.800
So the type of the returned value.

26
00:01:16.800 --> 00:01:20.020
Here, I return the addition of n one and n two.

27
00:01:20.020 --> 00:01:23.050
And since both these inputs are numbers,

28
00:01:23.050 --> 00:01:24.930
TypeScript is able to infer

29
00:01:24.930 --> 00:01:26.770
that the result of this will be a number,

30
00:01:26.770 --> 00:01:28.820
and since we return it, that the return type

31
00:01:28.820 --> 00:01:30.830
of this function data will be a number.

32
00:01:30.830 --> 00:01:33.320
If you would concatenate them as strings here,

33
00:01:33.320 --> 00:01:35.363
with toString for example,

34
00:01:36.550 --> 00:01:39.030
then TypeScript would correctly infer

35
00:01:39.030 --> 00:01:41.900
that we return a string here.

36
00:01:41.900 --> 00:01:44.350
Now of course, we can always explicitly assign

37
00:01:44.350 --> 00:01:46.910
a return type here by adding a colon

38
00:01:46.910 --> 00:01:48.490
after the parameter list,

39
00:01:48.490 --> 00:01:51.263
and then the type you wanna return, like number.

40
00:01:52.850 --> 00:01:54.560
This would be the same type as inferred.

41
00:01:54.560 --> 00:01:56.760
If I, for example, set this to string,

42
00:01:56.760 --> 00:02:00.020
I would get an error here, because obviously my calculation

43
00:02:00.020 --> 00:02:03.540
here does not match my described return type.

44
00:02:03.540 --> 00:02:06.480
Now just as with variables, it's a good idea

45
00:02:06.480 --> 00:02:10.080
to let TypeScript do its job regarding type inference.

46
00:02:10.080 --> 00:02:12.610
And if you have no specific reason

47
00:02:12.610 --> 00:02:14.810
for explicitly setting the type,

48
00:02:14.810 --> 00:02:17.090
you should therefore not set the type,

49
00:02:17.090 --> 00:02:20.470
and instead let TypeScript infer the type.

50
00:02:20.470 --> 00:02:22.660
Regarding the return types though,

51
00:02:22.660 --> 00:02:25.910
there is one interesting type which we haven't seen before,

52
00:02:25.910 --> 00:02:27.530
and which might be brand-new to you

53
00:02:27.530 --> 00:02:30.240
if you have to experience with other programming languages.

54
00:02:30.240 --> 00:02:31.200
Because it is a type

55
00:02:31.200 --> 00:02:33.250
that doesn't really exist in JavaScript.

56
00:02:33.250 --> 00:02:35.180
It's the void type.

57
00:02:35.180 --> 00:02:38.160
Let's say we have the printResult method.

58
00:02:38.160 --> 00:02:41.190
There we get a number argument,

59
00:02:41.190 --> 00:02:44.120
which should be a, well, number.

60
00:02:44.120 --> 00:02:47.510
And in there, I want to console.log num.

61
00:02:47.510 --> 00:02:49.450
And I want to console.log it as a part of a string,

62
00:02:49.450 --> 00:02:52.150
where I say result plus num.

63
00:02:52.150 --> 00:02:53.670
So now this will be concatenated

64
00:02:53.670 --> 00:02:56.090
to one long string, and will be output.

65
00:02:56.090 --> 00:02:57.777
And now I can call printResult.

66
00:02:57.777 --> 00:03:01.020
And for example, pass through that the result

67
00:03:01.020 --> 00:03:05.010
of my add function call, with five plus, let's say 12.

68
00:03:05.010 --> 00:03:07.670
So I am executing add here, with two numbers.

69
00:03:07.670 --> 00:03:10.160
And the result of that, so what add returns,

70
00:03:10.160 --> 00:03:13.130
is then passed as an argument into printResult.

71
00:03:13.130 --> 00:03:15.780
And that should print it to the console.

72
00:03:15.780 --> 00:03:19.150
If we now compile this and then have a look at that

73
00:03:19.150 --> 00:03:21.110
in our page, or on our page here,

74
00:03:21.110 --> 00:03:24.280
we see result 17, which makes sense.

75
00:03:24.280 --> 00:03:25.660
Now the interesting thing here

76
00:03:25.660 --> 00:03:27.640
is the return type of printResult.

77
00:03:27.640 --> 00:03:30.353
What would you guess is the return type here?

78
00:03:31.240 --> 00:03:33.240
So maybe you think it's string,

79
00:03:33.240 --> 00:03:35.150
because I'm creating a string in here.

80
00:03:35.150 --> 00:03:37.360
But keep in mind, we're not returning this.

81
00:03:37.360 --> 00:03:39.400
We're not returning anything here.

82
00:03:39.400 --> 00:03:42.010
And therefore this printResult function here

83
00:03:42.010 --> 00:03:44.990
has a special return type, void.

84
00:03:44.990 --> 00:03:47.910
Now you might notice void return type

85
00:03:47.910 --> 00:03:49.830
from other programming languages.

86
00:03:49.830 --> 00:03:52.230
There you have something like this.

87
00:03:52.230 --> 00:03:53.940
JavaScript doesn't really know that,

88
00:03:53.940 --> 00:03:56.740
or doesn't really have a name for this situation.

89
00:03:56.740 --> 00:03:58.590
TypeScript, however, does.

90
00:03:58.590 --> 00:04:01.840
So indeed, this function here has a return type of void.

91
00:04:01.840 --> 00:04:04.065
And of course, you don't need to specify it here.

92
00:04:04.065 --> 00:04:06.440
TypeScript's inference did its job.

93
00:04:06.440 --> 00:04:07.630
But I want to really make it really clear

94
00:04:07.630 --> 00:04:09.610
that this has the void return type,

95
00:04:09.610 --> 00:04:13.730
which is why I am adding it here, for demo purposes.

96
00:04:13.730 --> 00:04:17.070
Now, void really just means this function doesn't have

97
00:04:17.070 --> 00:04:21.020
a return statement, it doesn't return anything.

98
00:04:21.020 --> 00:04:24.540
It successfully completes, it does its job.

99
00:04:24.540 --> 00:04:28.170
It executes its code, it does not yield an error

100
00:04:28.170 --> 00:04:32.550
or anything like that, but it then does not return anything.

101
00:04:32.550 --> 00:04:34.990
That's the void return type.

102
00:04:34.990 --> 00:04:37.330
Now technically in JavaScript, of course,

103
00:04:37.330 --> 00:04:39.490
if we would console.log the result

104
00:04:39.490 --> 00:04:43.550
of printResult here and I now compile this,

105
00:04:43.550 --> 00:04:46.270
and we see what gets output here on the page.

106
00:04:46.270 --> 00:04:49.480
We see that undefined is returned by that.

107
00:04:49.480 --> 00:04:51.540
So technically, and that's really interesting,

108
00:04:51.540 --> 00:04:56.450
in JavaScript, if we use the return value of a function

109
00:04:56.450 --> 00:05:00.830
that doesn't return anything, we get undefined as a value.

110
00:05:00.830 --> 00:05:03.730
And as you probably know, undefined in JavaScript

111
00:05:03.730 --> 00:05:05.720
is actually a real value.

112
00:05:05.720 --> 00:05:08.430
A value you, for example, also get if you try

113
00:05:08.430 --> 00:05:11.880
to access a property on an object which doesn't exist.

114
00:05:11.880 --> 00:05:13.670
So here we get void,

115
00:05:13.670 --> 00:05:16.680
even though technically this returns undefined.

116
00:05:16.680 --> 00:05:19.020
And now to make it even more confusing,

117
00:05:19.020 --> 00:05:23.300
undefined actually is a type in TypeScript.

118
00:05:23.300 --> 00:05:25.640
You can have undefined as a type.

119
00:05:25.640 --> 00:05:29.570
And for example, a brand-new variable, someValue,

120
00:05:30.770 --> 00:05:33.270
can receive undefined as a type,

121
00:05:33.270 --> 00:05:34.700
and you'll not get an error.

122
00:05:34.700 --> 00:05:37.380
This variable will now just be forever undefined.

123
00:05:37.380 --> 00:05:39.970
How useful that might be is a different question.

124
00:05:39.970 --> 00:05:43.720
But undefined is a valid type in TypeScript.

125
00:05:43.720 --> 00:05:46.600
Nonetheless, here you see we're getting an error.

126
00:05:46.600 --> 00:05:48.010
And we're getting an error

127
00:05:48.010 --> 00:05:51.690
because a function is not allowed to return undefined.

128
00:05:51.690 --> 00:05:53.300
Technically it of course does,

129
00:05:53.300 --> 00:05:56.850
but TypeScript thinks about functions a bit differently.

130
00:05:56.850 --> 00:06:00.200
You should use void here if a function returns nothing,

131
00:06:00.200 --> 00:06:04.300
and not undefined, because with void you make clear

132
00:06:04.300 --> 00:06:05.940
that this function deliberately

133
00:06:05.940 --> 00:06:08.260
does not have a return statement.

134
00:06:08.260 --> 00:06:10.690
If you would say undefined here,

135
00:06:10.690 --> 00:06:13.460
then TypeScript would expect that you have

136
00:06:13.460 --> 00:06:17.080
a return statement where you just don't return a value.

137
00:06:17.080 --> 00:06:18.660
That's the technical difference.

138
00:06:18.660 --> 00:06:20.670
Now you see I'm not getting an error.

139
00:06:20.670 --> 00:06:22.860
From a JavaScript perspective,

140
00:06:22.860 --> 00:06:26.610
this is basically the same as this.

141
00:06:26.610 --> 00:06:29.050
But TypeScript makes a differentiation here,

142
00:06:29.050 --> 00:06:31.240
and therefore void is the type you wanna use

143
00:06:31.240 --> 00:06:33.760
if you don't have a return statement.

144
00:06:33.760 --> 00:06:37.200
Undefined, which you will rarely need, to be honest,

145
00:06:37.200 --> 00:06:41.100
can be used if you return without returning an actual value.

146
00:06:41.100 --> 00:06:45.750
But again, this is a rare use case, and you could use void

147
00:06:45.750 --> 00:06:47.560
with a return statement like this as well.

148
00:06:47.560 --> 00:06:49.040
You would not get an error.

149
00:06:49.040 --> 00:06:50.610
And by default, you would actually

150
00:06:50.610 --> 00:06:52.770
always use void in this scenario.

151
00:06:52.770 --> 00:06:54.680
Unless you really have a function

152
00:06:54.680 --> 00:06:56.750
that should produce undefined,

153
00:06:56.750 --> 00:06:58.620
and you wanna be clear about that.

154
00:06:58.620 --> 00:07:01.430
But again, that will rarely be the case.

155
00:07:01.430 --> 00:07:03.620
I just want to make sure here, that you understand

156
00:07:03.620 --> 00:07:05.870
the difference between void and undefined,

157
00:07:05.870 --> 00:07:08.160
that void is the standard which you'll use

158
00:07:08.160 --> 00:07:10.930
in pretty much all scenarios where you have

159
00:07:10.930 --> 00:07:13.450
a function that does not return a value,

160
00:07:13.450 --> 00:07:15.770
and that you can assign it explicitly.

161
00:07:15.770 --> 00:07:18.780
But of course, TypeScript also is able to infer it,

162
00:07:18.780 --> 00:07:20.440
like it would be able here as well.

163
00:07:20.440 --> 00:07:23.083
I just added this for demo purposes here.

