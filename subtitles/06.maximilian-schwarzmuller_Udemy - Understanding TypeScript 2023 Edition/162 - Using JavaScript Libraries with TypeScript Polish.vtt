WEBVTT

00:02.120 --> 00:05.910
-: Teraz zaczniemy od bardzo popularnej biblioteki użytkowej,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
To, czego się tutaj nauczysz, w zasadzie działa jako przykład

00:09.840 --> 00:13.250
dowolnej biblioteki JavaScript, której chcesz użyć.

00:13.250 --> 00:17.430
Nieważne, czy jest to Lodash, jQuery, czy cokolwiek innego.

00:17.430 --> 00:19.510
Teraz mała uwaga boczna w tym momencie,

00:19.510 --> 00:21.640
jeśli jesteś zainteresowany tym, jak

00:21.640 --> 00:24.150
pracować z React i TypeScript lub powiedzmy

00:24.150 --> 00:26.718
Node. słoiki. i Express i TypeScript,

00:26.718 --> 00:31.350
mam dedykowane moduły na to w dalszej części kursu, ponieważ tam nauczysz się

00:31.350 --> 00:33.760
nieco więcej niż tylko dodawania ich za

00:33.760 --> 00:35.730
pomocą TypeScript.

00:35.730 --> 00:40.470
Ale dla prostszych bibliotek, takich jak Lodash, jak jQuery i dalej tutaj

00:40.470 --> 00:43.010
jest podejście, które będzie działać.

00:43.010 --> 00:45.340
Chcemy więc wykorzystać Lodash w naszym projekcie.

00:45.340 --> 00:48.460
Lodash oczywiście jest biblioteką JavaScript.

00:48.460 --> 00:50.800
Nie potrzebujemy TypeScript, aby z niego korzystać,

00:50.800 --> 00:53.480
możemy go użyć w dowolnym projekcie JavaScript i

00:53.480 --> 00:56.770
możemy go zainstalować, jak w zasadzie dowiesz się tutaj na

00:56.770 --> 00:59.200
oficjalnych docsach Lodash.

00:59.200 --> 01:01.400
Jeśli używasz npm, którym jesteśmy,

01:01.400 --> 01:06.477
możesz uruchomić npm i lub npm install, to tylko krótka forma, "--save/lodash".

01:07.750 --> 01:10.820
Więc tutaj w tym przykładowym projekcie, który używa webpacka bez przepływu

01:10.820 --> 01:12.640
pracy produkcyjnej chociaż tylko przepływu

01:12.640 --> 01:14.180
pracy deweloperskiej.

01:14.180 --> 01:16.570
Tam możemy dodać tę bibliotekę po prostu uruchamiając

01:16.570 --> 01:18.607
nmp install dash save Lodash.

01:18.607 --> 01:21.700
I to teraz zainstaluje go do tego projektu i dzięki naszej

01:21.700 --> 01:23.500
konfiguracji webpacka możemy po

01:23.500 --> 01:26.250
prostu zaimportować go do naszych plików kodu i wykorzystać

01:26.250 --> 01:27.517
go tam.

01:27.517 --> 01:30.670
I to byłoby takie samo w każdym projekcie JavaScript

01:30.670 --> 01:32.250
zasilanym przez webpack.

01:32.250 --> 01:34.990
Jeśli nie używasz webpacka, to oczywiście

01:34.990 --> 01:37.720
możesz też po prostu użyć CDN i tak dalej.

01:37.720 --> 01:40.630
Jednak to, co pokażę w kolejnych krokach nieco

01:40.630 --> 01:42.390
później w tym module, będzie

01:42.390 --> 01:45.130
działać tylko w konfiguracji webpacka.

01:45.130 --> 01:47.730
Więc tutaj mamy konfigurację webpacka, zainstalowaliśmy

01:47.730 --> 01:49.320
teraz Lodash, a teraz, jeśli chcemy go

01:49.320 --> 01:51.510
użyć, możemy po prostu zaimportować go tutaj.

01:51.510 --> 01:55.600
Możemy zaimportować, powiedzmy underscore z 'Lodash'.

01:55.600 --> 01:57.960
To jest składnia, która powinna być dostępna

01:57.960 --> 01:59.960
z zainstalowanym Lodash.

01:59.960 --> 02:03.057
Jednak już teraz daje nam to błąd.

02:03.057 --> 02:06.850
"Could not find a declaration file for module Lodash".

02:06.850 --> 02:09.890
I będziemy mieli kolejny problem, jeśli chcesz

02:09.890 --> 02:12.230
użyć Lodash na przykład do tasowania

02:12.230 --> 02:16.810
tablicy, cóż możemy consol log underscore shuffle, a następnie przekazać

02:16.810 --> 02:19.000
powiedzmy prostą tablicę do tej metody

02:19.000 --> 02:20.430
shuffle.

02:20.430 --> 02:23.110
Metoda shuffle jest metodą, którą obsługuje Lodash.

02:23.110 --> 02:25.790
Możemy się tego dowiedzieć w oficjalnej dokumentacji

02:25.790 --> 02:26.820
Lodash.

02:26.820 --> 02:29.056
Tam, jeśli wyszukujesz "shuffle", dowiadujesz

02:29.056 --> 02:32.370
się, że możesz tasować tablicę za pomocą tej metody.

02:32.370 --> 02:37.010
Tak więc, to rodzaj powinien działać, ale naprawdę nie działa w ten

02:37.010 --> 02:39.480
sposób, jak możesz powiedzieć.

02:39.480 --> 02:43.058
Jeśli teraz uruchomię mój serwer webpack tutaj,

02:43.058 --> 02:45.890
zobaczymy, że CDN daje nam błąd.

02:45.890 --> 02:47.077
I znowu mówi nam, że

02:47.077 --> 02:50.940
"nie może znaleźć pliku deklaracji dla modułu Lodash".

02:50.940 --> 02:54.720
Tak więc, to nie jest naprawdę działa w sposób, w jaki powinno.

02:54.720 --> 02:57.610
Teraz problem z tym jest taki, że Lodash jest

02:57.610 --> 02:59.930
prostą biblioteką JavaScript.

02:59.930 --> 03:02.250
Jest zbudowany z vanilla JavaScript,

03:02.250 --> 03:05.150
i jest zbudowany dla vanilla JavaScript.

03:05.150 --> 03:08.530
Możemy to zweryfikować, jeśli przejdziemy do modułów node,

03:08.530 --> 03:10.280
gdzie mamy wiele zależności, ponieważ

03:10.280 --> 03:12.450
mamy wiele zależności webpacka i jego

03:12.450 --> 03:14.220
zależności tam.

03:14.220 --> 03:17.010
Ale tutaj, jeśli wyszukujemy Lodash, to

03:17.010 --> 03:17.930
tutaj jest.

03:17.930 --> 03:21.330
I rozwijamy jak widzimy, że tam jest masa plików

03:21.330 --> 03:22.750
JavaScript, tak?

03:22.750 --> 03:26.380
I to jest tam w całym kodzie źródłowym Lodash.

03:26.380 --> 03:30.010
Garść kodu JavaScript, ale z pewnością brak kodu TypeScript.

03:30.010 --> 03:31.750
W czym tkwi problem?

03:31.750 --> 03:35.550
Problem polega na tym, że TypeScript nie rozumie, co

03:35.550 --> 03:37.070
jest w tym pakiecie.

03:37.070 --> 03:41.020
Nie rozumie, które metody Lodash eksportuje.

03:41.020 --> 03:43.480
Teraz zobaczysz, że to faktycznie działa, jeśli przejdziemy

03:43.480 --> 03:45.500
do tsconfig. plik json.

03:45.500 --> 03:48.740
I upewniamy się, że emitujemy wyjście po wystąpieniu błędu.

03:48.740 --> 03:52.650
Więc jeśli przełączymy "noEmitOnError" na "false", abyśmy

03:52.650 --> 03:55.770
emitowali nowe wyjście, jeśli coś się pomyli.

03:55.770 --> 03:57.600
Na razie uruchom to jeszcze

03:57.600 --> 04:00.230
raz, to w końcu da nam ten sam błąd, więc nadal

04:00.230 --> 04:02.160
będziemy to widzieć.

04:02.160 --> 04:05.090
Ale jeśli przeładuję tę stronę tutaj, faktycznie

04:05.090 --> 04:07.120
otrzymasz wyjście tutaj.

04:07.120 --> 04:08.922
Możesz zignorować błąd na dole

04:08.922 --> 04:12.580
tutaj, zobaczysz wyjście, które jest potasowaną tablicą.

04:12.580 --> 04:14.920
Widzisz, za każdym razem, gdy przeładowuję, wygląda to inaczej.

04:14.920 --> 04:16.530
I to jest bardzo ciekawe.

04:16.530 --> 04:19.770
Udowadnia, że Lodash działa, udowadnia, że ten

04:19.770 --> 04:21.280
kod jest poprawny.

04:21.280 --> 04:24.170
Ale niestety TypeScript tego nie rozumie i nie

04:24.170 --> 04:28.400
może, ponieważ Lodash używa JavaScript, a nie TypeScript.

04:28.400 --> 04:31.220
Teraz problem polega na tym, że nie ma TypeScript

04:31.220 --> 04:34.080
wersji Lodash, więc musimy z tym żyć.

04:34.080 --> 04:37.220
I to jest scenariusz, z którym spotkasz się dość często.

04:37.220 --> 04:39.365
Chcesz użyć pewnej biblioteki stron trzecich,

04:39.365 --> 04:42.270
a ona jest zbudowana tylko dla JavaScript, a więc otrzymujesz

04:42.270 --> 04:44.210
błędy takie jak ten.

04:44.210 --> 04:46.060
Jest to o tyle irytujące, że w teorii oczywiście

04:46.060 --> 04:47.430
możemy z niego korzystać.

04:47.430 --> 04:49.630
TypeScript opiera się na języku JavaScript.

04:49.630 --> 04:53.160
Możemy użyć dowolnej biblioteki JavaScript w projekcie TypeScript,

04:53.160 --> 04:56.150
musimy tylko przetłumaczyć ją na TypeScript.

04:56.150 --> 04:58.890
A to na szczęście jest możliwe.

04:58.890 --> 05:02.564
Pozwól mi więc włączyć to ustawienie tutaj, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Pozwól, że pokażę Ci, jak możemy powiedzieć TypeScriptowi

05:07.200 --> 05:10.053
o Lodashu i o tym, co oferuje.

05:11.140 --> 05:13.662
Możesz zainstalować tak zwane typy

05:13.662 --> 05:16.250
biblioteki stron trzecich.

05:16.250 --> 05:20.050
Jeśli wyszukujesz typy Lodash, znajdziesz pakiet

05:20.050 --> 05:24.140
npm, który tutaj nazywa się "@types/lodash".

05:24.140 --> 05:26.440
Tam też widać polecenie install, które za chwilę

05:26.440 --> 05:28.120
zostanie uruchomione.

05:28.120 --> 05:30.580
Ale jeśli zejdziesz do szczegółów, znajdziesz również

05:30.580 --> 05:32.220
link do repozytorium github.

05:32.220 --> 05:36.320
Łączy się z DefinitelyTyped, które jest ogromnym repozytorium z

05:36.320 --> 05:39.260
tonami tłumaczeń dla wszystkich rodzajów bibliotek

05:39.260 --> 05:40.820
stron trzecich.

05:40.820 --> 05:43.120
Tutaj znajdujemy się w folderze Lodash.

05:43.120 --> 05:46.590
A tam znajdziesz tzw . pliki dts.

05:46.590 --> 05:50.180
Więc nie tylko . ale . dts.

05:50.180 --> 05:53.460
Są to tak zwane pliki deklaracji, co oznacza, że nie zawierają

05:53.460 --> 05:55.760
żadnej rzeczywistej logiki, ale jeśli spojrzymy

05:55.760 --> 05:58.750
na shuffle . dts, zawierają

05:58.750 --> 06:01.848
instrukcje dla TypeScript.

06:01.848 --> 06:05.200
Zasadniczo mówią TypeScriptowi, jak coś

06:05.200 --> 06:08.720
działa i co jest zawarte w tym pakiecie.

06:08.720 --> 06:10.700
I możesz zbadać różne pliki tutaj wszystkie

06:10.700 --> 06:14.280
w różnych podfolderach, aby dowiedzieć się więcej o tym.

06:14.280 --> 06:17.717
Tak więc w końcu te pliki po prostu zapewniają

06:17.717 --> 06:21.750
tłumaczenie ze zwykłego JavaScript na TypeScript.

06:21.750 --> 06:23.860
Nie zawierają one żadnej logiki, która działa,

06:23.860 --> 06:26.950
ale definiują typy, z którymi ta biblioteka pracuje.

06:26.950 --> 06:30.010
Definiują typy, których używasz, typy, które otrzymujesz

06:30.010 --> 06:32.490
z powrotem, gdy wywołujesz metodę i tak dalej.

06:32.490 --> 06:35.410
Można też napisać takie . dts files on your own, and

06:35.410 --> 06:38.510
the official types of docs provide a guide on that if that's

06:38.510 --> 06:40.470
what you're interested in.

06:40.470 --> 06:42.110
Ale dla własnych typów projektów

06:42.110 --> 06:43.160
nie musisz tego robić,

06:43.160 --> 06:45.820
ponieważ jeśli piszesz kody TypeScript, tylko TypeScript

06:45.820 --> 06:48.110
oczywiście rozumie to.

06:48.110 --> 06:50.310
Ale jeśli pracujesz z biblioteką strony

06:50.310 --> 06:53.840
trzeciej napisaną w JavaScript bez żadnego kodu TypeScript

06:53.840 --> 06:56.860
lub bez wbudowanego . dts, które niektóre biblioteki

06:56.860 --> 06:59.950
stron trzecich wysyłają przy okazji, nawet jeśli

06:59.950 --> 07:02.240
są napisane w JavaScript, Lodash jednak

07:02.240 --> 07:03.960
nie.

07:03.960 --> 07:06.890
Więc jeśli pracujesz z biblioteką, która nie zawiera

07:06.890 --> 07:08.330
wbudowanych plików tłumaczeniowych,

07:08.330 --> 07:11.180
i która nie jest natywnie napisana w TypeScript,

07:11.180 --> 07:15.760
to, używanie takich pakietów typów jest rozwiązaniem.

07:15.760 --> 07:20.760
Tutaj więc uruchamiamy następnie "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
Możesz również uruchomić "save-dev", ponieważ

07:24.600 --> 07:27.920
dev jest zależnością, która jest naprawdę wymagana tylko podczas

07:27.920 --> 07:29.230
rozwoju, ponieważ wtedy

07:29.230 --> 07:30.980
kod jest i tak kompilowany przez

07:30.980 --> 07:32.360
JavaScript.

07:32.360 --> 07:36.130
I to teraz instaluje to tłumaczenie z TypeScript,

07:36.130 --> 07:38.060
aby je zrozumieć.

07:38.060 --> 07:40.630
I widzisz, że jak tylko to zostanie zainstalowane,

07:40.630 --> 07:42.510
to ten błąd zniknie.

07:42.510 --> 07:46.220
A jeśli teraz ponownie uruchomię npm start, zobaczysz, że

07:46.220 --> 07:48.270
błąd nie wróci również tutaj.

07:48.270 --> 07:51.640
Więc widzisz teraz to działa bez żadnych błędów,

07:51.640 --> 07:55.190
zarówno w kompilacji, jak i w przeglądarce.

07:55.190 --> 07:57.270
Technicznie działało to również wcześniej,

07:57.270 --> 07:59.160
ale teraz dzięki tłumaczeniu możemy

07:59.160 --> 08:01.580
również wykorzystać TypeScript.

08:01.580 --> 08:04.660
I na przykład teraz również otrzymujemy wszystkie uzupełnienia

08:04.660 --> 08:05.493
tutaj, w IDE.

08:05.493 --> 08:10.070
Jeśli wpiszę tutaj kropkę, widzę metody Lodash, których mogę użyć.

08:10.070 --> 08:13.930
Jest to zatem bardzo ważny kawałek wiedzy, coś, czego zdecydowanie

08:13.930 --> 08:16.400
musisz być świadomy, co pozwala ci używać

08:16.400 --> 08:19.370
zwykłych, normalnych, waniliowych bibliotek

08:19.370 --> 08:21.177
JavaScript, w projekcie TypeScript

08:21.177 --> 08:28.490
i nadal uzyskać świetne wsparcie, świetne autouzupełnianie i uniknąć błędów.

08:28.490 --> 08:33.990
Z pomocą tych pakietów typów transtacji można powiedzieć.

08:33.990 --> 08:38.990
I te pakiety, które zawsze są nazwane "@types", a następnie nazwa pakietu,

08:39.290 --> 08:40.860
te w zasadzie istnieją

08:40.860 --> 08:45.270
dla każdej popularnej biblioteki stron trzecich, którą można

08:45.270 --> 08:46.730
znaleźć tam.

08:46.730 --> 08:49.960
Zawsze możesz wyszukać nazwę biblioteki, a

08:49.960 --> 08:51.690
następnie typy np. jQuery

08:51.690 --> 08:54.400
i powinieneś znaleźć taki wpis.

08:54.400 --> 08:57.350
Tak więc w ten sposób można pracować z typami w waniliowych

08:57.350 --> 08:59.373
bibliotekach JavaScript.
