WEBVTT

1
00:00:02.270 --> 00:00:03.613
<v Instructor>So we can return something</v>

2
00:00:03.613 --> 00:00:05.080
on Method Decorators,

3
00:00:05.080 --> 00:00:06.820
and that something should be a descriptor,

4
00:00:06.820 --> 00:00:08.920
which allows us to change the method

5
00:00:08.920 --> 00:00:11.000
or change the configuration of the method.

6
00:00:11.000 --> 00:00:12.582
And this is something I wanna do here.

7
00:00:12.582 --> 00:00:15.985
Before that, I will first of all go to the index HTML file

8
00:00:15.985 --> 00:00:18.540
and there, let's add a button.

9
00:00:18.540 --> 00:00:21.272
Click Me, a very simple button,

10
00:00:21.272 --> 00:00:24.720
in my app.ts file, I now want to make sure

11
00:00:24.720 --> 00:00:26.104
that when we click this button

12
00:00:26.104 --> 00:00:29.800
we execute a method on an object.

13
00:00:29.800 --> 00:00:32.120
And for that, I will simply add a new class here,

14
00:00:32.120 --> 00:00:34.600
first of all, printer.

15
00:00:34.600 --> 00:00:38.140
And in there I wanna have a property message

16
00:00:38.140 --> 00:00:41.690
which is just this works, so a simple string stored in there

17
00:00:41.690 --> 00:00:45.980
and then I want to have a show message method in there

18
00:00:45.980 --> 00:00:49.630
where I simply console log this message.

19
00:00:49.630 --> 00:00:51.770
So, of course, this is kind of a simple dummy class

20
00:00:51.770 --> 00:00:53.430
but none the less, this allows me to show you

21
00:00:53.430 --> 00:00:54.860
what I want to show you.

22
00:00:54.860 --> 00:00:56.550
Let's select the button to door now,

23
00:00:56.550 --> 00:01:00.860
with document query selector button

24
00:01:00.860 --> 00:01:02.970
and let's add an event listener to it.

25
00:01:02.970 --> 00:01:05.080
Now, first of all, I'll add my exclamation mark here

26
00:01:05.080 --> 00:01:07.800
to make it clear to TypeScript that this exists,

27
00:01:07.800 --> 00:01:08.806
that this will not be null,

28
00:01:08.806 --> 00:01:10.990
and then I will add an event listener,

29
00:01:10.990 --> 00:01:14.210
a click event listener, and then I want to trigger

30
00:01:14.210 --> 00:01:16.450
this show message method here.

31
00:01:16.450 --> 00:01:20.350
For that, I will create a new printer here, like this,

32
00:01:20.350 --> 00:01:23.120
and then here point at p.showMessage,

33
00:01:23.120 --> 00:01:24.323
that's my idea here.

34
00:01:25.300 --> 00:01:27.103
Now, if we save that,

35
00:01:28.153 --> 00:01:31.440
and we go back to our page and I click on this button,

36
00:01:31.440 --> 00:01:33.320
we get undefined here, though,

37
00:01:33.320 --> 00:01:36.050
we don't get our message being shown.

38
00:01:36.050 --> 00:01:38.860
And the reason for that is that with an event listener,

39
00:01:38.860 --> 00:01:41.820
if we point at a function that should be executed

40
00:01:41.820 --> 00:01:44.240
the this keyword inside of that function

41
00:01:44.240 --> 00:01:48.260
will not have the same context or reference

42
00:01:48.260 --> 00:01:52.193
as it has if we call just p.ShowMessage,

43
00:01:53.144 --> 00:01:56.450
in this case, this would refer to the printer.

44
00:01:56.450 --> 00:02:00.200
No, in the scenario here where we use an event listener,

45
00:02:00.200 --> 00:02:02.860
this will refer to the target of the event,

46
00:02:02.860 --> 00:02:05.777
because addEventListener in the end binds this

47
00:02:05.777 --> 00:02:07.693
in the function which is to be executed

48
00:02:07.693 --> 00:02:09.560
to the target of the event.

49
00:02:09.560 --> 00:02:11.360
And of course, I don't want this.

50
00:02:11.360 --> 00:02:12.570
Now, a common workaround here

51
00:02:12.570 --> 00:02:14.170
would be to use the bind method

52
00:02:14.170 --> 00:02:19.170
and bind showMessage to p, or bind this in showMessage to p

53
00:02:19.480 --> 00:02:22.860
so that when this executes, this is not referring

54
00:02:22.860 --> 00:02:25.420
to what addEventListener wants it to refer to

55
00:02:25.420 --> 00:02:28.040
but instead this inside of showMessage

56
00:02:28.040 --> 00:02:31.770
will refer to this p, to this object here again.

57
00:02:31.770 --> 00:02:33.300
And if we're now, if we reload here

58
00:02:33.300 --> 00:02:36.270
and I clear this again, now we see this works!

59
00:02:36.270 --> 00:02:39.240
Now, that is all default JavaScript.

60
00:02:39.240 --> 00:02:40.790
Now, we'll build a decorator,

61
00:02:40.790 --> 00:02:42.191
which we can add to this method,

62
00:02:42.191 --> 00:02:47.191
which will automatically bind this to the surrounding class,

63
00:02:47.460 --> 00:02:50.130
so to the object this method belongs to,

64
00:02:50.130 --> 00:02:53.440
every time it's called, no matter where we call it.

65
00:02:53.440 --> 00:02:55.974
So for that, above the printer I'll add a new function

66
00:02:55.974 --> 00:02:58.800
and I will name it autobind because that is, in the end,

67
00:02:58.800 --> 00:03:01.580
what we do and that will be my decorator autobind.

68
00:03:01.580 --> 00:03:03.890
Can also of course use a capital starting character

69
00:03:03.890 --> 00:03:05.960
to stay in line with our other namings

70
00:03:05.960 --> 00:03:07.930
but again, you can use either of the two

71
00:03:07.930 --> 00:03:10.122
when you define a decorator function.

72
00:03:10.122 --> 00:03:13.300
Now this here will be my decorator already

73
00:03:13.300 --> 00:03:15.269
and in there we get a couple of arguments.

74
00:03:15.269 --> 00:03:17.940
We get the target, as you'll learn, and that is any.

75
00:03:17.940 --> 00:03:20.085
It is either the prototype of the object

76
00:03:20.085 --> 00:03:22.533
we're working with or it's the constructor function

77
00:03:22.533 --> 00:03:25.730
if we would be adding this to a static method

78
00:03:25.730 --> 00:03:27.340
but here it will be the prototype

79
00:03:27.340 --> 00:03:30.200
because we will add it to a instance method.

80
00:03:30.200 --> 00:03:32.520
Then we have the method name or the property name

81
00:03:32.520 --> 00:03:33.690
but since we add it to a method

82
00:03:33.690 --> 00:03:36.330
we can call this method name, makes more sense.

83
00:03:36.330 --> 00:03:38.600
If this is a string or a symbol

84
00:03:38.600 --> 00:03:40.229
or it could also be a number, of course,

85
00:03:40.229 --> 00:03:43.250
but here we know we will typically work with strings

86
00:03:43.250 --> 00:03:45.061
so we can also just go with string here,

87
00:03:45.061 --> 00:03:48.470
depending on where you plan on adding this decorator

88
00:03:48.470 --> 00:03:50.170
and how generic it should be

89
00:03:50.170 --> 00:03:52.484
and last but not least, we get the descriptor here

90
00:03:52.484 --> 00:03:56.340
which will be of type PropertyDescriptor as alert.

91
00:03:56.340 --> 00:03:57.650
So now we've got these three arguments

92
00:03:57.650 --> 00:03:59.655
which we all used on Log3

93
00:03:59.655 --> 00:04:03.540
which was our method decorator before.

94
00:04:03.540 --> 00:04:05.970
Now, in autobind, and I now want to make sure

95
00:04:05.970 --> 00:04:08.994
that we always set the this keyword

96
00:04:08.994 --> 00:04:11.973
to this object this method belongs to again.

97
00:04:11.973 --> 00:04:14.240
Now how can we achieve this?

98
00:04:14.240 --> 00:04:15.797
First of all, I have to get access

99
00:04:15.797 --> 00:04:17.880
to the method which should be called.

100
00:04:17.880 --> 00:04:20.661
And this will be possible with the help of our descriptor,

101
00:04:20.661 --> 00:04:22.013
because if you reload the app

102
00:04:22.013 --> 00:04:25.180
and you have a look at such a method descriptor down there

103
00:04:25.180 --> 00:04:27.330
you see we get the value property

104
00:04:27.330 --> 00:04:29.460
in the descriptor and that points at the function.

105
00:04:29.460 --> 00:04:32.240
Because the value of this property is a function,

106
00:04:32.240 --> 00:04:33.930
in this case, a method is just a property

107
00:04:33.930 --> 00:04:35.498
with a function as a value.

108
00:04:35.498 --> 00:04:38.630
So the value key holds the original function,

109
00:04:38.630 --> 00:04:42.980
therefore, here, we can extract the original method,

110
00:04:42.980 --> 00:04:44.930
if we wanna call it like this

111
00:04:44.930 --> 00:04:47.320
by accessing descriptor.value.

112
00:04:47.320 --> 00:04:50.563
This will give us access to the, well, original method.

113
00:04:51.790 --> 00:04:55.450
Next, I will set up a new adjusted descriptor,

114
00:04:55.450 --> 00:04:58.320
this will, in the end, be what we return later.

115
00:04:58.320 --> 00:05:00.030
Now this will be an object

116
00:05:00.030 --> 00:05:03.620
and it will be of type property descriptor.

117
00:05:03.620 --> 00:05:06.350
Now in this object here we can add all the things

118
00:05:06.350 --> 00:05:09.350
we can add to a property descriptor.

119
00:05:09.350 --> 00:05:12.110
And for example, can set this to configurable, true,

120
00:05:12.110 --> 00:05:14.962
set enumerable to false, so that this does not show up

121
00:05:14.962 --> 00:05:17.130
in foreign loops,

122
00:05:17.130 --> 00:05:20.310
and now add a getter here, and that's new.

123
00:05:20.310 --> 00:05:23.400
I add a getter here, which is a method,

124
00:05:23.400 --> 00:05:26.150
or a property that holds a function, which is the same,

125
00:05:27.020 --> 00:05:29.628
so that we can execute some extra logic

126
00:05:29.628 --> 00:05:32.260
when users try to access this property.

127
00:05:32.260 --> 00:05:35.170
So that we don't just directly execute the value

128
00:05:35.170 --> 00:05:36.633
of this property, so the function,

129
00:05:36.633 --> 00:05:38.888
but that we can step in and do some extra work

130
00:05:38.888 --> 00:05:40.850
before we execute the function.

131
00:05:40.850 --> 00:05:41.913
That's the idea here.

132
00:05:43.230 --> 00:05:46.290
So I don't add a value property to this descriptor here,

133
00:05:46.290 --> 00:05:48.660
I just have a getter and again,

134
00:05:48.660 --> 00:05:51.540
the getter basically is like having a value property

135
00:05:51.540 --> 00:05:54.777
with extra logic that runs before the value is returned.

136
00:05:54.777 --> 00:05:59.777
Now, in here I want to have my bound function

137
00:05:59.900 --> 00:06:03.450
where I can use the original method we extracted up here

138
00:06:03.450 --> 00:06:07.100
and we call bind and bind this.

139
00:06:07.100 --> 00:06:08.590
And now the bequest, of course,

140
00:06:08.590 --> 00:06:11.730
is what does this refer to in here?

141
00:06:11.730 --> 00:06:13.720
Keep in mind it's inside of this getter method

142
00:06:13.720 --> 00:06:17.700
so this will refer to whatever is responsible

143
00:06:17.700 --> 00:06:19.510
for triggering this getter method.

144
00:06:19.510 --> 00:06:21.110
And that's the trick now,

145
00:06:21.110 --> 00:06:23.700
the getter method will be triggered

146
00:06:23.700 --> 00:06:27.200
by the concrete object to which it belongs,

147
00:06:27.200 --> 00:06:29.190
so this inside of the getter method

148
00:06:29.190 --> 00:06:32.160
will always refer to the object

149
00:06:32.160 --> 00:06:33.610
on which we defined the getter.

150
00:06:33.610 --> 00:06:36.800
This will not be overwritten by addEventListener

151
00:06:36.800 --> 00:06:38.965
because the getter is like an extra layer

152
00:06:38.965 --> 00:06:41.221
between our function that's being executed

153
00:06:41.221 --> 00:06:43.660
and the object to which it belongs

154
00:06:43.660 --> 00:06:44.976
and the Event Listener.

155
00:06:44.976 --> 00:06:47.683
So therefore, this in here will refer

156
00:06:47.683 --> 00:06:51.610
to the object on which we originally defined the method.

157
00:06:51.610 --> 00:06:54.660
So we can safely bind this for the original method

158
00:06:54.660 --> 00:06:57.495
and ensure that now this inside of the original method

159
00:06:57.495 --> 00:07:01.170
will also refer to the exact same object.

160
00:07:01.170 --> 00:07:04.300
Now I will return the bound function here

161
00:07:04.300 --> 00:07:06.760
and thereafter, outside of this adjusted descriptor,

162
00:07:06.760 --> 00:07:08.910
return the adjusted descriptor.

163
00:07:08.910 --> 00:07:10.560
So that's our decorator function,

164
00:07:10.560 --> 00:07:12.420
returning a new descriptor object,

165
00:07:12.420 --> 00:07:14.103
and therefore this descriptor object

166
00:07:14.103 --> 00:07:16.960
will override the old descriptor,

167
00:07:16.960 --> 00:07:18.710
that is what TypeScript will do with it.

168
00:07:18.710 --> 00:07:21.500
TypeScript will then replace the old methods descriptor,

169
00:07:21.500 --> 00:07:23.215
so the old methods configuration

170
00:07:23.215 --> 00:07:26.390
with this new configuration here,

171
00:07:26.390 --> 00:07:28.513
which added this extra getter layer.

172
00:07:29.460 --> 00:07:33.330
Now, I'm not interested in target and method name here,

173
00:07:33.330 --> 00:07:37.500
of course, so to avoid errors I will name this underscore

174
00:07:37.500 --> 00:07:39.083
and this here underscore two.

175
00:07:40.260 --> 00:07:43.070
Again, just to tell TypeScript that I'm not interested

176
00:07:43.070 --> 00:07:45.480
in these values but I need to accept them.

177
00:07:45.480 --> 00:07:49.800
And now let's add autobind to showMessage here.

178
00:07:49.800 --> 00:07:52.203
So here, I will add at Autobind,

179
00:07:54.050 --> 00:07:56.490
and make sure that you removed bind down there

180
00:07:56.490 --> 00:07:59.236
in the event listener, and save this.

181
00:07:59.236 --> 00:08:01.450
And now let's have a look at that,

182
00:08:01.450 --> 00:08:04.730
let's click Click Me, and you should see This Works!

183
00:08:04.730 --> 00:08:06.678
If I reload, this works.

184
00:08:06.678 --> 00:08:09.680
Because this is now bound correctly.

185
00:08:09.680 --> 00:08:12.060
And just to verify that it's really our decorator

186
00:08:12.060 --> 00:08:13.520
that makes a difference here,

187
00:08:13.520 --> 00:08:15.868
if I would remove the binding here

188
00:08:15.868 --> 00:08:17.850
in my getter and the decorator

189
00:08:17.850 --> 00:08:20.920
and I save that, you see that if it is now reloads

190
00:08:20.920 --> 00:08:23.626
and we click Click me, we see undefined again.

191
00:08:23.626 --> 00:08:26.320
So it's really this extra getter layer

192
00:08:26.320 --> 00:08:27.389
which does its work here

193
00:08:27.389 --> 00:08:30.430
which ensures that this is always bound correctly

194
00:08:30.430 --> 00:08:33.260
no matter how you call showMessage.

195
00:08:33.260 --> 00:08:35.380
If we called it like this directly on the object

196
00:08:35.380 --> 00:08:38.350
it will work, if we call it here like this

197
00:08:38.350 --> 00:08:40.760
with an event listener, it also works.

198
00:08:40.760 --> 00:08:42.260
So you see this works here,

199
00:08:42.260 --> 00:08:45.070
which in the end is coming from this showMessage call

200
00:08:45.070 --> 00:08:48.266
and then you also see it works if I click on the button.

201
00:08:48.266 --> 00:08:49.918
So this is one neat example

202
00:08:49.918 --> 00:08:52.060
of how you can utilize decorators

203
00:08:52.060 --> 00:08:55.190
to build a quite amazing functionality

204
00:08:55.190 --> 00:08:58.718
and save you the hassle of manually calling bind everywhere.

205
00:08:58.718 --> 00:09:01.883
Instead, you just bind it like this.

