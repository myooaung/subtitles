WEBVTT

00:02.440 --> 00:04.260
- ：在深入研究更多示例之前,

00:04.260 --> 00:07.940
让我们先了解一下装饰器的运行顺序｡

00:07.940 --> 00:15.396
在这里, 首先要了解的是, 它们都是在我们没有实例化该产品的情况下运行的｡

00:15.396 --> 00:18.300
换句话说, 如果我在这里创建一个产品,

00:18.300 --> 00:19.670
新产品, 书,

00:19.670 --> 00:26.660
19美元, 我在这里创建另一个产品, 书2, 29美元｡

00:26.660 --> 00:29.970
我的装饰器代码没有错误地编译了这个代码,

00:29.970 --> 00:31.730
它不会经常运行｡

00:31.730 --> 00:35.350
所以这个类的实例化并不重要｡ 

00:35.350 --> 00:36.680
所有这些装饰器,

00:36.680 --> 00:38.452
无论是属性装饰器､

00:38.452 --> 00:48.930
方法装饰器､ 访问器装饰器还是参数装饰器, 它们都在定义该类时执行, 理解这些非常重要｡

00:48.930 --> 00:55.100
这些不是在运行时调用方法或使用属性时运行的装饰器｡

00:55.100 --> 00:57.190
这不是他们做的｡ 

00:57.190 --> 01:04.397
相反, 这些装饰器允许您在定义类时执行额外的后台设置工作｡

01:04.397 --> 01:08.070
回到我之前解释的元编程概念｡

01:08.070 --> 01:12.410
这就是装饰器背后的想法, 或者说这是它们的核心用例｡

01:12.410 --> 01:18.490
它们不是您添加到某个对象中以便在使用属性时可以运行某些代码的事件侦听器｡

01:18.490 --> 01:21.069
实际上你可以用装饰器来做类似的事情,

01:21.069 --> 01:29.710
但是要在幕后调整和编辑一些东西, 但是装饰器本身实际上只是一个函数, 当你的类被定义时,

01:29.710 --> 01:33.233
当你的（mumbles）, 你可以使用装饰器来做一些幕后的工作,

01:33.233 --> 01:43.660
然后设置一些代码, 当它被调用时, 它应该运行｡

01:43.660 --> 01:51.696
若要添加额外的元数据, 或将有关属性的某些数据储存在您正在创建的项目或资源库中的其他位置｡

01:51.696 --> 01:54.075
这就是你可以使用装饰器做的事情,

01:54.075 --> 01:55.756
这就是你可以看到的所有模式,

01:55.756 --> 02:02.290
当我现在向你展示这些你可以用装饰器构建的例子时｡

02:02.290 --> 02:04.740
他们在后台添加了额外的功能,

02:04.740 --> 02:14.313
当你用类或方法做一些事情时, 这些功能有时会执行, 但它们也可以做完全不同的事情｡

02:15.240 --> 02:21.320
这对于我们前面使用模板装饰器的person示例非常重要｡

02:21.320 --> 02:22.980
无论何时在这里实例化一个人,

02:22.980 --> 02:25.160
这都不会添加此模板｡

02:25.160 --> 02:27.890
每当我们定义这个类时, 它都会添加它｡ 

02:27.890 --> 02:33.140
我们必须在装饰器函数中添加额外的逻辑来改变这种行为｡

02:33.140 --> 02:35.980
也许可以将此模板存储在项目的其他数据结构中,

02:35.980 --> 02:38.441
然后每当我们在此创建一个新的人时,

02:38.441 --> 02:43.650
我们都会使用该数据结构｡

02:43.650 --> 02:45.278
我们在定义类的时候就设置好了,

02:45.278 --> 02:52.350
然后我们就把它存储在后台内部, 然后我们就可以在需要的时候使用它了.

02:52.350 --> 02:54.160
现在我们总是在定义这个类时呈现它,

02:54.160 --> 02:57.610
而不是在创建一个新实例时｡

02:57.610 --> 02:59.570
这就是装饰器的执行方式,

02:59.570 --> 03:00.403
正如我所说的,

03:00.403 --> 03:01.940
现在我将向您展示几个示例,

03:01.940 --> 03:08.883
我们在这些示例中利用了装饰器及其执行时间来做一些很好的事情｡
