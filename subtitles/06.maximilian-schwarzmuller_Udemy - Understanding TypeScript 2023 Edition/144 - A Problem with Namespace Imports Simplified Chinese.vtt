WEBVTT

00:02.250 --> 00:04.380
- ：顺便说一下, 现在有一个重要的注意事项,

00:04.380 --> 00:07.280
您可能想知道为什么autobind在ProjectList中工作,

00:07.280 --> 00:11.840
即使我没有向autobind装饰器添加导入｡

00:11.840 --> 00:15.860
嗯, 因为在应用程序｡  ts, 我有所有这些进口｡ 

00:15.860 --> 00:18.610
实际上, 如果我删除这些导入, 这是正确的,

00:18.610 --> 00:21.430
因为在这里我只使用ProjectInput,

00:21.430 --> 00:26.253
ProjectList是打开的, 我们会有一个问题｡

00:27.260 --> 00:30.680
你看, 如果这个重载, 我们这里有一个错误, 尽管我们没有得到编译错误,

00:30.680 --> 00:35.010
但是我们得到了一个运行时错误｡

00:35.010 --> 00:40.150
因此, 为了安全起见, 我们需要确保将文件中使用的所有内容都导入到该文件中｡

00:40.150 --> 00:45.260
从技术上讲, 我们可以导入应用程序中的所有内容｡  ts, 并且由于ProjectInput和ProjectList（例如,

00:45.260 --> 00:51.750
它们使用自动绑定装饰器）是稍后提供的, 因此自动绑定装饰器将在它们需要时可用｡

00:51.750 --> 00:54.320
但这不是最干净的方式｡ 

00:54.320 --> 00:56.740
如果您改为从文件内部导入文件所需的所有内容,

00:56.740 --> 01:05.790
则必须保证该文件在需要时可用, 而不是依赖于某个导入所有内容的全局文件, 然后您可能会删除导入内容, 突然之间,

01:05.790 --> 01:09.570
所有内容都中断｡

01:09.570 --> 01:11.390
那么, 解决方案是什么呢？

01:11.390 --> 01:14.530
好吧, 让我们回到文件并导入他们需要的内容｡

01:14.530 --> 01:18.790
例如, ProjectInput不仅需要基本组件,

01:18.790 --> 01:21.270
还需要验证逻辑和自动绑定｡

01:21.270 --> 01:23.630
所以在这里, 我将用两个点向上一级导入,

01:24.970 --> 01:27.110
从装饰器, autobind装饰器,

01:27.110 --> 01:35.366
哎呀, 就像这样, 从util, 验证｡

01:35.366 --> 01:35.366
ts文件中｡ 

01:35.366 --> 01:39.770
这个文件里肯定需要｡ 

01:39.770 --> 01:42.210
我还需要项目的状态在这里｡ 

01:42.210 --> 01:46.810
因此, 我将导入/state/project-state｡  ts.

01:46.810 --> 01:50.690
我将获取这些导入并转到ProjectItem, 在那里我不需要项目状态和验证,

01:50.690 --> 01:54.320
因此我们可以删除它｡

01:54.320 --> 01:56.560
但是我们需要autobind装饰器｡ 

01:56.560 --> 02:00.580
我们还需要可拖动的界面和项目模型｡ 

02:00.580 --> 02:04.040
因此, 我们还将转到此处的models文件夹,

02:04.040 --> 02:08.257
并导入项目｡ ts并拖放｡  ts.

02:10.820 --> 02:17.520
在ProjectList中, 我们不需要验证, 但我需要ProjectState和自动绑定｡

02:17.520 --> 02:25.710
另外, 从模型文件夹, 我需要的项目｡

02:25.710 --> 02:25.710
ts文件和拖放｡  ts文件中｡ 

02:25.710 --> 02:27.840
这样就可以保存和编译了, 现在一切都可以正常工作了,

02:27.840 --> 02:30.170
正如你所看到的, 现在我们没有运行时错误了,

02:30.170 --> 02:35.520
因为现在我们把所有这些导入都放回了文件中｡

02:35.520 --> 02:37.380
所以, 这是正确的方法, 每个文件都指定了它需要什么,

02:37.380 --> 02:45.940
我们可以拆分代码, 仍然得到一个文件, 所以我们可以说, 我们得到了两个世界的最佳结果｡

02:45.940 --> 02:49.963
然而, 这并不一定是最好的方法｡
