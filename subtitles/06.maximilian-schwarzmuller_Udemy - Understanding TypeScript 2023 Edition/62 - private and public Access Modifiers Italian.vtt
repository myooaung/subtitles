WEBVTT

00:02.040 --> 00:04.180
Insegnante: Quindi era una classe molto elementare.

00:04.180 --> 00:05.930
Ora, quando si costruiscono le

00:05.930 --> 00:08.400
classi, spesso sono più complesse di così.

00:08.400 --> 00:10.800
E si potrebbe voler memorizzare altri dati all'interno.

00:10.800 --> 00:15.160
Supponiamo che un reparto debba avere tutti dei dipendenti.

00:15.160 --> 00:18.160
Potrebbe essere un array e inizialmente potrebbe

00:18.160 --> 00:20.290
essere un array vuoto.

00:20.290 --> 00:23.520
E per essere un po' più precisi su ciò che si vuole memorizzare,

00:23.520 --> 00:24.980
potrebbe essere un array di

00:24.980 --> 00:28.800
stringhe, per mantenere il tutto relativamente semplice.

00:28.800 --> 00:31.733
Ora potremmo avere un metodo qui addEmployee.

00:33.030 --> 00:36.880
Qui vogliamo un dipendente come argomento, che nel nostro esempio

00:36.880 --> 00:39.430
dovrebbe essere solo una stringa.

00:39.430 --> 00:42.650
Quindi possiamo impostare questo. dipendenti. spinta.

00:42.650 --> 00:47.320
Quindi, con questo codice, inseriamo un nuovo dipendente nell'array dei

00:47.320 --> 00:48.373
dipendenti.

00:50.750 --> 00:52.683
Ora possiamo aggiungere un altro metodo,

00:53.666 --> 00:55.749
printEmployeeInformation.

01:00.508 --> 01:05.508
E lì voglio consolare. log(this. dipendenti. lunghezza) e voglio

01:07.766 --> 01:12.766
anche la console. log(this. dipendenti) stesso.

01:15.510 --> 01:18.480
Ora, se scendiamo qui, possiamo commentare questo

01:18.480 --> 01:20.560
codice, che si interromperebbe di

01:20.560 --> 01:24.070
nuovo perché non si adatta alla descrizione del reparto con

01:24.070 --> 01:25.870
il nostro oggetto laggiù.

01:25.870 --> 01:29.200
E invece qui, in questo reparto di contabilità, possiamo

01:29.200 --> 01:32.234
aggiungere un dipendente, diciamo Max.

01:32.234 --> 01:35.400
E un altro dipendente, diciamo Manu.

01:35.400 --> 01:37.690
E poi, oltre a descriverlo, voglio

01:37.690 --> 01:41.520
anche inserire le informazioni sui miei dipendenti.

01:41.520 --> 01:44.600
Se lo salviamo, dovremmo ottenere questo risultato,

01:44.600 --> 01:47.830
due dipendenti e alcune informazioni.

01:47.830 --> 01:50.240
È una cosa bella da avere.

01:50.240 --> 01:52.700
Un problema che abbiamo con questa classe

01:52.700 --> 01:55.960
è che potremmo cambiare i dipendenti dall'esterno, non

01:55.960 --> 01:58.160
solo con add employee, ma accedendo direttamente

01:58.160 --> 02:01.710
alla proprietà del dipendente, così come possiamo farlo anche

02:01.710 --> 02:04.430
per il nome, tra l'altro.

02:04.430 --> 02:07.630
Quindi potremmo anche rivolgerci alla contabilità

02:07.630 --> 02:10.560
e poi ai dipendenti, e magari aggiungere

02:10.560 --> 02:13.870
un altro dipendente all'indice due, e far passare

02:13.870 --> 02:16.400
un'Anna, così.

02:16.400 --> 02:18.210
Se lo facciamo e lo salviamo,

02:18.210 --> 02:20.290
avremo tre dipendenti e Anna.

02:20.290 --> 02:22.710
Ora si potrebbe pensare: "Bene, abbiamo un altro modo".

02:22.710 --> 02:25.230
Quando si costruiscono applicazioni più complesse,

02:25.230 --> 02:27.980
in genere si vuole evitare una cosa del genere.

02:27.980 --> 02:30.930
Si vuole essere sicuri che ci sia un percorso chiaro,

02:30.930 --> 02:34.870
un modo di usare la classe, e che cose del genere, modi alternativi

02:34.870 --> 02:38.530
di usarla, non siano realmente supportati.

02:38.530 --> 02:41.230
Perché se si lavora in un team più grande, un collega

02:41.230 --> 02:42.920
userà questo approccio per aggiungere

02:42.920 --> 02:45.700
un dipendente e un altro collega potrebbe usare

02:45.700 --> 02:48.050
questo approccio.

02:48.050 --> 02:49.280
E tu non vuoi questo.

02:49.280 --> 02:52.640
Si vuole avere un modo uniforme per farlo.

02:52.640 --> 02:55.960
Inoltre, perché forse nel metodo add employee si fa qualcosa di più

02:55.960 --> 02:58.420
che aggiungerlo semplicemente all'array.

02:58.420 --> 02:59.770
Forse, prima di tutto,

02:59.770 --> 03:02.400
vorresti avere un po' di convalida ecc. qui.

03:02.400 --> 03:04.940
Quindi potreste avere del codice in più, che

03:04.940 --> 03:06.610
semplicemente non viene eseguito

03:06.610 --> 03:09.470
se assegnate direttamente un nuovo valore o aggiungete

03:09.470 --> 03:12.970
un nuovo valore all'array con questa riga qui.

03:12.970 --> 03:16.000
Quindi non si vuole permettere che i dipendenti siano

03:16.000 --> 03:19.884
accessibili in questo modo dall'esterno della classe.

03:19.884 --> 03:22.340
E TypeScript vi copre.

03:22.340 --> 03:26.760
È possibile trasformare i dipendenti in una proprietà privata,

03:26.760 --> 03:30.580
un campo privato, aggiungendo la parola chiave private

03:30.580 --> 03:32.220
davanti ad esso.

03:32.220 --> 03:34.303
Ora, private significa che i dipendenti

03:34.303 --> 03:38.030
sono ora una proprietà accessibile solo dall'interno

03:38.030 --> 03:41.210
della classe, quindi dall'interno dell'oggetto

03:41.210 --> 03:43.480
creativo.

03:43.480 --> 03:46.700
In questo modo, qualsiasi metodo all'interno della classe del

03:46.700 --> 03:49.770
dipartimento è in grado di lavorare con i dipendenti.

03:49.770 --> 03:52.570
Ma non è più possibile accedere in questo modo.

03:52.570 --> 03:54.710
Qui vedete che ora ricevo un errore.

03:54.710 --> 03:57.280
Se provo a salvarlo, ottengo un errore di compilazione

03:57.280 --> 03:59.870
che indica che la proprietà 'employees' è privata

03:59.870 --> 04:03.550
e accessibile solo all'interno della classe 'department'.

04:03.550 --> 04:07.100
Quindi, ora si impone che quando i dipendenti devono

04:07.100 --> 04:09.370
essere aggiunti a questo reparto,

04:09.370 --> 04:12.690
si deve usare il metodo addEmployee.

04:12.690 --> 04:16.760
Perché ricevono un errore se scrivono codice come questo.

04:16.760 --> 04:20.460
Si tratta di un cosiddetto modificatore, la parola chiave privato.

04:20.460 --> 04:23.470
Oltre a quello privato, c'è anche quello pubblico, che

04:23.470 --> 04:25.000
però è quello predefinito.

04:25.000 --> 04:26.590
Non è necessario aggiungere pubblico.

04:26.590 --> 04:29.590
Quindi un nome come questo è esattamente uguale

04:29.590 --> 04:31.650
a un nome con la dicitura public.

04:31.650 --> 04:34.300
La differenza è che le proprietà pubbliche sono

04:34.300 --> 04:36.350
accessibili dall'esterno.

04:36.350 --> 04:40.350
Quindi, ad esempio, potrei anche contattare il nome e

04:40.350 --> 04:43.600
assegnare un nuovo nome qui, se lo volessi.

04:43.600 --> 04:45.260
È possibile.

04:45.260 --> 04:49.270
Per le proprietà private, questo non è possibile.

04:49.270 --> 04:51.580
Possiamo usarli solo dall'interno.

04:51.580 --> 04:52.800
Tecnicamente, comunque,

04:52.800 --> 04:55.700
JavaScript non conosce i concetti di pubblico e privato.

04:55.700 --> 04:59.630
Solo nelle versioni molto moderne aggiunte di recente esiste

04:59.630 --> 05:01.320
una cosa del genere.

05:01.320 --> 05:03.650
In passato, JavaScript non conosceva le

05:03.650 --> 05:05.690
proprietà private e pubbliche.

05:05.690 --> 05:08.520
Tutte le proprietà sono sempre state pubbliche.

05:08.520 --> 05:10.630
TypeScript introduce questa caratteristica,

05:10.630 --> 05:13.561
che ovviamente non funziona in fase di runtime, perché

05:13.561 --> 05:16.620
JavaScript fino a poco tempo fa conosceva solo le proprietà

05:16.620 --> 05:18.780
pubbliche.

05:18.780 --> 05:21.290
Quindi questa riga qui, errore congelato durante

05:21.290 --> 05:23.130
la compilazione di TypeScript.

05:23.130 --> 05:27.000
Se si compila comunque in JavaScript, questo codice verrà comunque

05:27.000 --> 05:30.140
eseguito a runtime senza errori perché, ancora una volta,

05:30.140 --> 05:32.800
JavaScript da solo, fino a poco tempo fa, non conosceva

05:32.800 --> 05:34.900
questo concetto.

05:34.900 --> 05:37.350
Quindi, a seconda della versione per cui si sta compilando,

05:37.350 --> 05:38.720
non lo saprà comunque.

05:38.720 --> 05:40.770
Pertanto, TypeScript lo supporta solo

05:40.770 --> 05:42.980
perché lo controlla in fase di compilazione,

05:42.980 --> 05:44.650
non in fase di esecuzione.

05:44.650 --> 05:47.370
Con esso, tuttavia, possiamo evitare codice come questo

05:47.370 --> 05:49.863
e costringere tutti a scrivere codice più pulito.
