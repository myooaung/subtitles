WEBVTT

00:02.090 --> 00:04.730
Kursleiter: Bevor wir uns mit den Funktionen beschäftigen, finden

00:04.730 --> 00:07.002
Sie im Anhang zu diesem Vortrag einen Link zu dieser Seite.

00:07.002 --> 00:11.350
Diese Seite listet grundsätzlich alle mehr oder weniger modernen JavaScript-Features

00:11.350 --> 00:13.610
auf, welche Browser diese Features

00:13.610 --> 00:16.770
unterstützen und auch welche Compiler diese Features

00:16.770 --> 00:19.700
unterstützen.

00:19.700 --> 00:23.150
Und dort finden Sie auch TypeScript, TypeScript

00:23.150 --> 00:25.310
kombiniert mit core-js, einem

00:25.310 --> 00:27.210
Polyfill-Anbieter.

00:27.210 --> 00:28.820
Aber im Allgemeinen beschreibt

00:28.820 --> 00:32.070
dies, was TypeScript kompilieren kann.

00:32.070 --> 00:34.110
Sie können diese Ressource immer verwenden,

00:34.110 --> 00:35.990
wenn Sie nach einem bestimmten Feature suchen,

00:35.990 --> 00:37.960
wie z.B. dem const-Schlüsselwort, und wissen

00:37.960 --> 00:40.860
wollen, ob TypeScript damit funktioniert oder nicht.

00:40.860 --> 00:43.340
Dann können Sie sehen, wie es damit funktioniert, und

00:43.340 --> 00:46.580
welche Einschränkungen es gibt, welche Browser dies unterstützen.

00:46.580 --> 00:48.250
Dies gibt Ihnen übrigens auch einen Hinweis

00:48.250 --> 00:51.090
darauf, welche Browser Sie möglicherweise anvisieren möchten,

00:51.090 --> 00:53.967
was das TypeScript-Ziel betrifft und so weiter.

00:53.967 --> 00:55.260
Dies ist also eine großartige

00:55.260 --> 00:58.600
Ressource, die es Ihnen ermöglicht, zwischen verschiedenen Iterationen

00:58.600 --> 01:01.940
von JavaScript zu wechseln, und die Funktionen jeder Iteration eingeführt,

01:01.940 --> 01:04.220
und wie diese Funktionen unterstützt werden.

01:04.220 --> 01:06.140
Nutzen Sie diese Informationen also auf jeden Fall,

01:06.140 --> 01:08.800
um herauszufinden, was Sie verwenden können, was Sie kompilieren können

01:08.800 --> 01:11.060
und welche Ziele Sie möglicherweise setzen müssen.

01:11.060 --> 01:14.060
Und damit beginnen wir mit einer der wichtigsten und

01:14.060 --> 01:17.030
offensichtlichsten und oft genutzten Einführungen,

01:17.030 --> 01:19.260
Next-Gen JavaScript hinzugefügt.

01:19.260 --> 01:21.780
Übrigens, mit Next-Gen JavaScript

01:21.780 --> 01:24.700
meine ich ES6 oder neuer.

01:24.700 --> 01:27.860
Und das ist es, wovon ich spreche.

01:27.860 --> 01:32.750
Damit können Sie Konstanten oder Variablen definieren.

01:32.750 --> 01:35.350
Der Unterschied besteht darin, dass Konstanten, also

01:35.350 --> 01:38.730
Variablen, die mit dem Schlüsselwort const definiert werden, nicht geändert

01:38.730 --> 01:39.910
werden können.

01:39.910 --> 01:42.410
Wenn Sie versuchen würden, hier einen neuen Wert zuzuweisen,

01:42.410 --> 01:44.270
auch wenn er den richtigen Typ hat, erhalten

01:44.270 --> 01:47.220
Sie einen Fehler, da es sich um eine Konstante handelt.

01:47.220 --> 01:48.280
Dies ist übrigens ein Fehler,

01:48.280 --> 01:50.200
der von TypeScript erzeugt wird.

01:50.200 --> 01:53.340
Bei Vanilla JavaScript würde der Browser eine Fehlermeldung ausgeben,

01:53.340 --> 01:55.100
wenn man seinen Code ausführt, und das ist

01:55.100 --> 01:57.280
die Idee hinter TypeScript, wie Sie gelernt haben,

01:57.280 --> 02:00.410
erhalten wir bereits beim Schreiben des Codes eine Fehlermeldung, denn

02:00.410 --> 02:02.990
das ist natürlich besser für uns als Entwickler.

02:02.990 --> 02:04.930
So können wir den Code früher korrigieren,

02:04.930 --> 02:07.820
bevor wir ihn in der Konsole testen.

02:07.820 --> 02:11.330
Wenn wir also diese Zeile entfernen oder auskommentieren,

02:11.330 --> 02:12.830
wird sie neu kompiliert

02:12.830 --> 02:14.400
und wir erhalten keinen

02:14.400 --> 02:17.130
Fehler im Browser.

02:17.130 --> 02:20.860
Das ist also eine Konstante. Let ist eine Variable, die geändert werden

02:20.860 --> 02:23.620
kann, und daher ist sie natürlich ähnlich wie var.

02:23.620 --> 02:27.260
Var gibt es auch deshalb noch, weil JavaScript so funktioniert, dass

02:27.260 --> 02:29.550
Funktionen nicht plötzlich wegfallen,

02:29.550 --> 02:33.460
denn dann könnten ältere Browser und ihre Skripte kaputt gehen.

02:33.460 --> 02:35.160
Aber Sie sollten var nicht mehr verwenden.

02:35.160 --> 02:37.860
Und warum sollten Sie var nicht mehr verwenden?

02:37.860 --> 02:39.670
Ich meine, es macht Sinn, dass wir const

02:39.670 --> 02:42.520
haben, weil das wirklich ein neues Feature ist, Konstanten.

02:42.520 --> 02:43.380
Aber warum zulassen?

02:43.380 --> 02:45.380
Warum haben sie hier ein neues Schlüsselwort eingeführt?

02:45.380 --> 02:47.223
Warum haben sie sich nicht an Var gehalten?

02:48.280 --> 02:51.460
Let und const haben einen wichtigen Unterschied zu var.

02:51.460 --> 02:53.300
Nun, der offensichtliche Unterschied bei const

02:53.300 --> 02:55.240
ist, dass der Wert nicht geändert werden kann, aber

02:55.240 --> 02:57.040
bei let gibt es auch einen Unterschied.

02:57.040 --> 03:00.930
Und das ist der Bereich, in dem diese Variable verfügbar ist.

03:00.930 --> 03:04.363
Jetzt sollten Sie das Konzept der Bereiche in JavaScript kennen.

03:05.609 --> 03:09.260
Und mit var haben Sie einen globalen und einen Funktionsbereich.

03:09.260 --> 03:10.700
Das bedeutet, dass Variablen,

03:10.700 --> 03:12.550
die Sie außerhalb von Funktionen definieren,

03:12.550 --> 03:15.340
überall in Ihren Skripten verfügbar sind.

03:15.340 --> 03:17.410
Innerhalb von Funktionen definierte Variablen

03:17.410 --> 03:19.370
sind nur in dieser Funktion verfügbar.

03:19.370 --> 03:22.610
Zum Beispiel hier. Wenn ich eine Funktion

03:22.610 --> 03:27.610
addiere und zwei Zahlen, a und b, erhalte.

03:27.670 --> 03:29.750
Dann können wir dort eine Variable mit

03:29.750 --> 03:32.280
var result hinzufügen, sagen wir, und wir setzen

03:32.280 --> 03:34.730
result = a + b, und dann geben wir result zurück,

03:34.730 --> 03:36.230
und natürlich hätten wir das

03:36.230 --> 03:38.430
auch kürzer schreiben können, aber ich

03:38.430 --> 03:40.570
möchte zeigen, was var tut.

03:40.570 --> 03:41.860
Und das wäre gut so.

03:41.860 --> 03:43.012
Und das Ergebnis würde nur innerhalb

03:43.012 --> 03:44.188
dieser Funktion verfügbar sein.

03:44.188 --> 03:47.723
Wenn ich versuche, Konsole log Ergebnis hier, die fehlschlagen

03:47.723 --> 03:49.470
würde, weil es nur im Rahmen

03:49.470 --> 03:52.190
dieser Funktion verfügbar ist.

03:52.190 --> 03:53.970
Wenn ich es außerhalb von var harbor definiere,

03:53.970 --> 03:56.610
funktioniert alles, weil es jetzt global verfügbar ist, also kann

03:56.610 --> 03:58.180
ich hier darauf zugreifen.

03:58.180 --> 04:00.220
Außerdem können Sie durch die Funktionsweise

04:00.220 --> 04:03.580
von JavaScript auf Variablen auf einer höheren Ebene zugreifen.

04:03.580 --> 04:05.210
Innerhalb einer Funktion können Sie

04:05.210 --> 04:08.260
also mit Variablen arbeiten, die für diese Funktion gelten, aber alle

04:08.260 --> 04:11.100
Variablen haben einen höheren Geltungsbereich, wie hier den globalen

04:11.100 --> 04:12.563
Geltungsbereich.

04:13.580 --> 04:14.980
So, das ist var.

04:14.980 --> 04:19.180
Bei der Vermietung ist das Verhalten im Allgemeinen gleich.

04:19.180 --> 04:21.580
Das funktioniert und das funktioniert.

04:21.580 --> 04:23.800
Es ist also im Allgemeinen dasselbe für uns.

04:23.800 --> 04:27.180
Ein wichtiger Unterschied besteht jedoch darin, dass es für

04:27.180 --> 04:30.860
var eigentlich nur den globalen und den Funktionsbereich gibt.

04:30.860 --> 04:32.460
Was ist mit if-Anweisungen?

04:32.460 --> 04:36.720
Wenn wir hier Alter > 20 prüfen und dann dort eine Variable isOld

04:36.720 --> 04:38.889
erstellen und diese auf true setzen,

04:38.889 --> 04:41.190
dann bekommen wir, wenn eine Konsole

04:41.190 --> 04:44.500
isOld hier protokolliert, einen Fehler in TypeScript,

04:44.500 --> 04:46.270
aber eigentlich würden wir

04:46.270 --> 04:50.090
keinen in JavaScript bekommen.

04:50.090 --> 04:53.620
Wenn Sie diesen Code hier nehmen, nur um zu sehen, dass er funktioniert, und

04:53.620 --> 04:56.280
zu den JavaScript-Entwicklertools in der Konsole wechseln,

04:56.280 --> 04:57.190
ihn dort einfügen und

04:57.190 --> 04:59.120
die Eingabetaste drücken, sehen Sie, dass

04:59.120 --> 05:00.970
hier true ausgegeben wird.

05:01.830 --> 05:02.960
Und tatsächlich, wenn Sie versuchen,

05:02.960 --> 05:05.040
auf isOld zuzugreifen, erhalten Sie true.

05:05.040 --> 05:08.380
Die Variable isOld wird also global registriert und nicht

05:08.380 --> 05:10.530
nur innerhalb der if-Anweisung.

05:10.530 --> 05:11.700
Denn mit var kennt JavaScript

05:11.700 --> 05:13.080
keine anderen Geltungsbereiche

05:13.080 --> 05:15.860
als Funktionen und global.

05:15.860 --> 05:17.400
Und das ändert sich mit der Vermietung.

05:17.400 --> 05:19.690
Wie gesagt, TypeScript beschwert sich trotzdem,

05:19.690 --> 05:21.600
weil das kein guter Code ist, aber technisch

05:21.600 --> 05:23.170
würde es funktionieren.

05:23.170 --> 05:25.100
Mit der Vermietung ändert sich das.

05:25.100 --> 05:26.350
Bei let ist dies wirklich

05:26.350 --> 05:29.880
nur innerhalb dieser geschweiften Klammern möglich.

05:29.880 --> 05:32.300
Denn mit let und const wurde ein neues Konzept eingeführt,

05:32.300 --> 05:33.540
das als Blockbereich bezeichnet

05:33.540 --> 05:36.550
wird. Das bedeutet, dass eine Variable oder Konstante immer in dem Block

05:36.550 --> 05:40.420
verfügbar ist, in dem Sie sie definieren, oder in allen darunter liegenden Blöcken.

05:40.420 --> 05:43.060
Und ein Block ist im Grunde immer ein Schnipsel, der von

05:43.060 --> 05:44.900
geschweiften Klammern umgeben ist, wie

05:44.900 --> 05:46.710
bei einer if-Anweisung, in einer for-Schleife,

05:46.710 --> 05:48.760
in einer Funktion, oder sogar, das ist möglich,

05:48.760 --> 05:50.590
wenn Sie einfach geschweifte Klammern

05:50.590 --> 05:52.670
wie diese hinzufügen.

05:52.670 --> 05:54.230
Jede hier definierte Variable

05:54.230 --> 05:56.760
wäre nur in diesem Block verfügbar.

05:56.760 --> 05:57.700
Und das ist auch gut so,

05:57.700 --> 06:00.000
denn es zwingt Sie dazu, saubereren Code zu schreiben

06:00.000 --> 06:02.470
und Situationen wie diese zu vermeiden.

06:02.470 --> 06:03.640
Um zu beweisen, dass es

06:03.640 --> 06:05.530
einen Unterschied im Browser gibt,

06:05.530 --> 06:09.750
kopiere ich diesen Code mit let, lade meine Seite neu und gebe ihn hier ein, erhalte

06:09.750 --> 06:12.440
ich eine Fehlermeldung, dass isOld nicht definiert

06:13.559 --> 06:14.706
ist. Wir haben vorher keinen Fehler erhalten.

06:14.706 --> 06:19.706
Wenn ich nämlich versuche, isOld auszugeben, erhalte ich wieder diesen Fehler.

06:20.070 --> 06:21.060
Das ist also der Unterschied.

06:21.060 --> 06:23.370
Und deshalb ist let und const besser, nicht nur

06:23.370 --> 06:25.740
weil wir diese konstante Funktion erhalten, sondern

06:25.740 --> 06:29.150
auch weil wir gezwungen sind, saubereren Code zu schreiben.

06:29.150 --> 06:30.130
Lassen Sie mich das also auskommentieren,

06:30.130 --> 06:31.230
damit es wieder funktioniert.
