WEBVTT

00:02.230 --> 00:03.280
Instructeur : Nous avons donc

00:03.280 --> 00:04.930
appris les bases des génériques, mais nous

00:04.930 --> 00:07.150
allons maintenant nous plonger un peu plus dans les contraintes,

00:07.150 --> 00:09.250
ou dans un type spécifique de contrainte, que vous pouvez

00:09.250 --> 00:10.400
ajouter.

00:10.400 --> 00:12.680
Pour cela, je vais échanger une autre fonction,

00:12.680 --> 00:16.293
une fonction générique, que je nommerai extractAndConvert.

00:18.700 --> 00:21.550
L'idée de cette fonction ici est que nous

00:21.550 --> 00:24.120
obtenons un objet comme premier argument,

00:24.120 --> 00:26.340
et le second paramètre est, au

00:26.340 --> 00:28.413
final, une clé.

00:30.050 --> 00:32.570
Maintenant, je veux retourner la valeur de cette clé dans l'objet,

00:32.570 --> 00:35.310
ce que nous pouvons faire avec cette notation JavaScript par défaut.

00:35.310 --> 00:36.310
L'utilisation des crochets

00:36.310 --> 00:38.200
pour exe comme propriété d'un objet, mais cela

00:38.200 --> 00:39.840
n'a rien de spécifique à TypeScript,

00:39.840 --> 00:42.010
c'est encore du JavaScript Vanilla.

00:42.010 --> 00:43.000
Nous pourrions donc

00:43.000 --> 00:44.580
dire qu'ici nous voulons avoir

00:44.580 --> 00:48.460
un objet, et pour la clé nous voulons avoir une chaîne, disons.

00:48.460 --> 00:50.160
Mais ici, j'obtiens une erreur,

00:50.160 --> 00:52.000
parce que ce que nous ne savons

00:52.000 --> 00:54.500
pas ici, au final, c'est si l'objet que nous

00:54.500 --> 00:57.510
obtenons ici aura vraiment cette clé.

00:57.510 --> 00:59.410
C'est la fin de ce que TypeScript nous

00:59.410 --> 01:01.430
dit avec cette étrange erreur.

01:01.430 --> 01:02.530
Par exemple, ici,

01:02.530 --> 01:05.700
je pourrais consigner en console le résultat de l'appel

01:05.700 --> 01:09.770
de cette fonction avec, disons, un objet vide, puis un nom.

01:09.770 --> 01:12.600
Et ici d'ailleurs j'appelle ça extractAndConvert,

01:12.600 --> 01:16.025
parce que je veux l'appeler sans le log de la console et dire

01:16.025 --> 01:18.600
simplement Value, deux points, plus.

01:18.600 --> 01:19.660
Mais c'est juste une remarque

01:19.660 --> 01:22.450
secondaire, je nous renvoie à la fin avec ces données récupérées.

01:22.450 --> 01:23.840
Mais le problème principal ici est

01:23.840 --> 01:25.160
que je pourrais l'appeler comme

01:26.091 --> 01:28.020
ça et il passerait un objet comme premier paramètre,

01:28.020 --> 01:29.890
puis une chaîne comme second.

01:29.890 --> 01:31.430
Mais correctement, TypeScript

01:31.430 --> 01:33.200
me dit qu'au final il n'est pas garanti

01:33.200 --> 01:35.193
que cette clé existe dans cet objet.

01:36.420 --> 01:39.920
Pour garantir cela, nous pouvons à nouveau utiliser des types génériques.

01:39.920 --> 01:41.620
Nous pourrions dire que nous avons un type

01:41.620 --> 01:43.130
T, et ce sera notre objet ici.

01:43.130 --> 01:46.550
On peut dire, étend l'objet.

01:46.550 --> 01:48.363
Mais on doit aussi taper U.

01:49.440 --> 01:52.850
Notre clé ici, disons, qui, en fin de compte,

01:52.850 --> 01:56.320
doit être une clé de notre type T, cependant.

01:56.320 --> 01:58.210
Donc, pour cet objet, nous voulons

01:58.210 --> 02:01.560
garantir que ce que nous obtenons ici comme second paramètre

02:01.560 --> 02:04.890
en tant que clé est une propriété de ce premier type.

02:04.890 --> 02:09.130
Et pour cela, nous pouvons dire que la clé de T s'étend.

02:11.550 --> 02:13.540
Et maintenant vous voyez que l'erreur

02:13.540 --> 02:15.370
a disparu ici, et à la place j'ai l'erreur

02:15.370 --> 02:17.930
en bas, parce que maintenant j'informe TypeScript

02:17.930 --> 02:21.800
ici, que le premier paramètre doit être un objet quelconque, et le second

02:21.800 --> 02:23.610
paramètre doit être une clé quelconque

02:23.610 --> 02:25.870
dans cet objet.

02:25.870 --> 02:28.480
Et ici, oui nous passons dans n'importe quel type d'objet, mais

02:28.480 --> 02:30.430
nous n'avons pas de clé de nom là-dedans.

02:30.430 --> 02:34.990
Cette erreur ne disparaît qu'à partir du moment où j'ajoute une clé de nom.

02:34.990 --> 02:37.990
C'est donc toutes les fois où nous pouvons utiliser des types

02:37.990 --> 02:41.800
génériques avec ce mot-clé keyoff ici aussi, pour dire à TypeScript que nous

02:41.800 --> 02:45.730
voulons nous assurer que nous avons cette structure correcte, et c'est bien sûr

02:45.730 --> 02:47.460
très utile, car cela nous permet de nous

02:47.460 --> 02:49.120
assurer que nous ne faisons pas d'erreurs

02:49.120 --> 02:51.160
stupides, où nous essayons d'appeler cette

02:51.160 --> 02:53.390
fonction, qui en fin de compte, nous avons essayé

02:53.390 --> 02:56.740
d'exe comme une propriété qui n'existe pas.

02:56.740 --> 02:58.140
Donc ça marche.

02:58.140 --> 02:59.870
Mais si j'essaie d'exe en tant que "age" ici, j'obtiens

02:59.870 --> 03:01.570
à nouveau une erreur, par exemple.

03:02.890 --> 03:05.560
Revenons donc au "nom".
