WEBVTT

00:02.130 --> 00:02.963
Anlatıcı: Bunun

00:02.963 --> 00:05.260
için tekrar tekrar kullandığımız kukla Proje

00:05.260 --> 00:06.690
Kurulumumuza geri döndüm.

00:06.690 --> 00:08.260
Orada, bu geliştirme sunucusunu getirmek

00:08.260 --> 00:10.190
için NPM başlatmayı çalıştırabiliriz.

00:10.190 --> 00:13.690
Ve sonra sunucunun farklı bir terminal penceresinde çalıştığı

00:13.690 --> 00:15.260
yeni bir terminal penceresinde,

00:15.260 --> 00:17.419
TypeScript derleme işlemimi başlatmak

00:17.419 --> 00:21.540
ve çalışır durumda tutmak için TSC dash W'yi çalıştırıyorum.

00:21.540 --> 00:23.470
Elbette bununla birlikte, boş bir sayfamız

00:23.470 --> 00:24.560
var çünkü üzerinde hiçbir

00:24.560 --> 00:27.060
şey yok ama şimdi app TS dosyasında oynayabilir ve

00:27.060 --> 00:29.480
jeneriklerle başlayabiliriz.

00:29.480 --> 00:32.940
Ve bence jenerikleri anlamanın en kolay yolu,

00:32.940 --> 00:35.450
TypeScript'te yerleşik olarak bulunan

00:35.450 --> 00:37.450
ve aslında bir jenerik olduğu

00:37.450 --> 00:39.610
ortaya çıkan ve bir dizi olan

00:39.610 --> 00:41.890
çok çalıştığımız varsayılan bir

00:41.890 --> 00:44.410
türe bakmaktır.

00:44.410 --> 00:46.900
Diyelim ki elimizde bir isim dizisi var.

00:46.900 --> 00:50.370
Max ve Manuel diyelim.

00:50.370 --> 00:51.620
Böylece orada iki

00:51.620 --> 00:54.610
isim elde ederiz ve tabii ki, ismin sabitinin

00:54.610 --> 00:57.210
türü bir dizi dizisidir.

00:57.210 --> 00:59.610
Aslında bunu iki türün birleştirilmesi

00:59.610 --> 01:02.460
olarak düşünebiliriz.

01:02.460 --> 01:05.760
Tıpkı farklı özelliklere sahip bir nesneniz olabileceği

01:05.760 --> 01:07.700
gibi, her özellikte farklı bir tür

01:07.700 --> 01:09.310
depoluyor olabilirsiniz.

01:09.310 --> 01:13.750
Bir dizi her zaman içinde farklı veriler olan bir şeydir,

01:13.750 --> 01:16.440
bu durumda içinde dizeler vardır.

01:16.440 --> 01:20.230
Yani aslında dizi türüne sahibiz, sadece bir dizi ve eğer buradaki

01:20.230 --> 01:22.770
isimleri kaldırıp kesersem, TypeScript'in

01:22.770 --> 01:25.010
bunun içinde herhangi bir veri olan herhangi

01:25.010 --> 01:29.140
bir türde bir dizi olduğu sonucunu çıkaracağını göreceksiniz.

01:29.140 --> 01:32.690
Aslında TypeScript dizi türünü bilir.

01:32.690 --> 01:35.280
Yani, bunun bir dizi olması gerektiğini söyleyebiliriz,

01:35.280 --> 01:37.600
ancak gördüğünüz gibi, bu şekilde belirttiğimde,

01:37.600 --> 01:39.900
bu dizi türünün TypeScript'te var olduğunu

01:39.900 --> 01:43.570
söyleyebilsem bile bir hata alırız.

01:43.570 --> 01:45.870
Ancak bunun genel bir tür olduğunu ve

01:45.870 --> 01:48.710
bir tür argümanı gerektirdiğini görüyoruz.

01:48.710 --> 01:50.950
Ve şimdi, bu daha önce görmediğimiz bir şey.

01:50.950 --> 01:53.870
Daha önce jenerik türleri hiç duymamıştık.

01:53.870 --> 01:55.750
Şimdi, buradaki bu garip gösterim,

01:55.750 --> 01:58.120
TypeScript'te böyle bir şey gördüğünüzde,

01:58.120 --> 02:01.060
genel bir türle uğraşıyorsunuz demektir.

02:01.060 --> 02:05.610
Genel bir tip, başka bir tiple bağlantılı olan ve diğer

02:05.610 --> 02:08.890
tipin tam olarak hangi tip olduğu konusunda

02:08.890 --> 02:12.920
gerçekten esnek olan bir tiptir.

02:12.920 --> 02:14.130
Kulağa zor mu geliyor?

02:14.130 --> 02:16.820
Peki, şu dizi örneğine geri dönelim.

02:16.820 --> 02:19.380
Burada bir dizi saklamak istediğimizi biliyoruz.

02:19.380 --> 02:22.250
Yani bir dizinin kendisi bir tür olabilir, kendi

02:22.250 --> 02:24.610
başına zaten bir tür oluşturan bir veri

02:24.610 --> 02:26.730
listesidir, diyebilirsiniz.

02:26.730 --> 02:29.770
Tıpkı bir nesnenin, içine hangi verilerin gireceğini henüz bilmesek

02:29.770 --> 02:32.200
bile, kendi başına bir tür olması gibi.

02:32.200 --> 02:34.490
Yani bir dizi kendi başına bir türdür.

02:34.490 --> 02:38.230
Ancak bir dizi elbette içinde belirli bir türde

02:38.230 --> 02:39.860
veri depolar.

02:39.860 --> 02:42.690
Artık dizi türünün kendisi, içinde hangi veri türünün

02:42.690 --> 02:44.810
depolandığıyla ilgilenmez.

02:44.810 --> 02:48.150
Dizi türü, dizelerden, sayılardan, nesnelerden veya karışık

02:48.150 --> 02:50.540
verilerden oluşan bir liste saklayıp saklamadığınızla

02:50.540 --> 02:52.430
ilgilenmez.

02:52.430 --> 02:54.500
Dizi türü gerçekten umurunda değildir,

02:54.500 --> 02:58.640
ancak bunu herhangi bir dizi türüne ayarlayarak ona bilmiyorum

02:58.640 --> 03:01.200
deseniz bile en azından bazı bilgileri

03:01.200 --> 03:02.960
almayı önemser.

03:02.960 --> 03:05.870
Hiçbir şey belirtmemekten daha iyidir.

03:05.870 --> 03:08.330
Şimdi, bu bir dizi türünü tanımlamanın bir yoludur,

03:08.330 --> 03:10.070
orada depolanan veri türü ve ardından

03:10.070 --> 03:11.430
köşeli parantezler.

03:11.430 --> 03:14.620
Tam olarak aynı türü oluşturacak diğer yol, Array şeyini ve

03:14.620 --> 03:15.830
ardından bu açılı parantezleri

03:15.830 --> 03:17.630
kullanmak olacaktır.

03:17.630 --> 03:20.030
Ve şimdi bu köşeli parantezler arasında,

03:20.030 --> 03:22.340
diziye girmesi gereken veri türünü

03:22.340 --> 03:24.140
belirtiyorsunuz.

03:24.140 --> 03:26.330
Örneğin bir dize ve buradaki

03:26.330 --> 03:31.330
bu, bu türü burada tanımlamakla %100 aynıdır.

03:32.030 --> 03:34.950
Elbette burada, bu dizi dizeleri veya sayıları depolar demek için

03:34.950 --> 03:37.730
bir birlik türü de kullanabilirsiniz veya tür hakkında herhangi

03:37.730 --> 03:40.850
bir şey söylemek istemiyorsanız herhangi birini kullanabilirsiniz

03:40.850 --> 03:42.970
veya az önce olduğu gibi dize.

03:42.970 --> 03:44.330
Yani bu genel bir türdür, TypeScript'te

03:44.330 --> 03:46.900
yerleşik olarak bulunan genel bir türdür.

03:46.900 --> 03:50.440
Başka bir türe bağlı olan bir tür, TypeScript'e

03:50.440 --> 03:53.980
olan türümüzün bize daha iyi destek verebileceğini

03:53.980 --> 03:56.810
bilmek istediğimiz yer.

03:56.810 --> 03:57.910
Çünkü burada, örneğin,

03:57.910 --> 04:01.510
orada sakladığımız şeyin bir string olacağını biliyorsak,

04:01.510 --> 04:04.380
o zaman bu dizideki bir öğeye eriştiğimde, onunla

04:04.380 --> 04:06.143
string şeyler yapabileceğimi

04:07.100 --> 04:09.410
biliriz.

04:09.410 --> 04:12.260
Örneğin tüm bu string metotlarını çağırabilirim

04:12.260 --> 04:15.280
ve TypeScript şikayet etmeyecektir çünkü bu dizinin

04:15.280 --> 04:18.220
stringleri tuttuğunu bilir.

04:18.220 --> 04:20.410
Genel tiplerin amacı budur.

04:20.410 --> 04:23.230
Belirli bir tür, bu durumda dizi türü,

04:23.230 --> 04:26.780
bu dizi türünde sağlanan bir veri türü hakkında

04:26.780 --> 04:29.040
ek bir bilgi sağlarsanız daha

04:29.040 --> 04:33.430
iyi çalışabilir veya hiç çalışmayabilir ve elbette dizi

04:33.430 --> 04:36.590
türü yalnızca bir örnektir.

04:36.590 --> 04:39.840
TypeScript'te yerleşik olarak bulunan bir başka

04:39.840 --> 04:42.130
genel tür de promise türüdür.

04:42.130 --> 04:45.470
Artık vaatler bir JavaScript özelliği, değil mi?

04:45.470 --> 04:46.970
Bu bir TypeScript özelliği değildir.

04:46.970 --> 04:49.437
JavaScript'te vaatler oluşturabilirsiniz

04:49.437 --> 04:52.000
ve vaatlerin ne olduğundan emin değilseniz, bağlantıyı

04:52.000 --> 04:53.870
ekte bulabilirsiniz.

04:53.870 --> 04:58.150
Bir söz new promise kullanılarak oluşturulabilir.

04:58.150 --> 05:00.640
Yine, bu bir kurucu işlevdir, JavaScript'te

05:00.640 --> 05:03.270
yerleşik bir sınıftır ve promise kurucu

05:03.270 --> 05:05.870
işlevi, kendisi de bir işlev olan bir argüman

05:05.870 --> 05:07.640
alır ve bu argüman da sonunda

05:07.640 --> 05:10.650
bir resolve ve bir reject işlevi olmak üzere iki

05:10.650 --> 05:12.580
argüman alır.

05:12.580 --> 05:15.180
Şimdi bunlar tarayıcıdaki JavaScript tarafından

05:15.180 --> 05:17.790
otomatik olarak bize aktarılacaktır.

05:17.790 --> 05:22.400
Ve sonra bir vaatte örneğin bir zamanlayıcı ayarlayabiliriz

05:22.400 --> 05:25.640
ve sonra bu zamanlayıcının geri arama işlevinde,

05:25.640 --> 05:28.140
dış vaadi çözebiliriz.

05:28.140 --> 05:30.140
Yani burada, bu geri arama işlevinde,

05:30.140 --> 05:34.823
çözümlemeyi çağırabilir ve bunun tamamlandığını söyleyebiliriz.

05:36.500 --> 05:41.020
Şimdi bunu yaptığımızda buradaki söz yeni bir nesne, söz sabitinde

05:41.020 --> 05:43.860
saklanan bir söz nesnesi oluşturur.

05:43.860 --> 05:47.700
Şimdi, bu söz sabitinin aslında belirli bir türü vardır.

05:47.700 --> 05:49.470
Söz tipindedir ve yine bu

05:49.470 --> 05:51.130
köşeli parantezleri görürsünüz

05:51.130 --> 05:56.130
çünkü bu söz eninde sonunda bir şeye çözümlenecektir.

05:56.480 --> 05:58.930
Şimdi burada bilinmeyen diyor çünkü TypeScript

05:58.930 --> 06:01.470
aslında burada bir dizeye çözümleme yapacağımızı

06:01.470 --> 06:03.880
tam olarak anlayamıyor.

06:03.880 --> 06:05.870
Ancak bu nedenle, bunun sonunda bir

06:05.870 --> 06:08.120
dize verecek olan bir söz olduğunu söyleyebiliriz

06:08.120 --> 06:11.450
ve bunu yine genel türümüzü kullanarak yaparız.

06:11.450 --> 06:14.030
Ana tür promise'dir, ancak bir promise

06:14.030 --> 06:16.120
tıpkı bir dizi gibi diğer türlerle

06:16.120 --> 06:18.380
birlikte çalışır.

06:18.380 --> 06:22.000
Bir dizi diğer türleri kullanır çünkü içinde belirli türlerde

06:22.000 --> 06:23.350
veri depolanır ve promise

06:23.350 --> 06:25.640
diğer türlerle birlikte çalışır çünkü

06:25.640 --> 06:29.750
sonunda bir türde veri döndürür ve bu durumda bu, sonunda bir dize

06:29.750 --> 06:32.940
döndüren bir promise'dir.

06:32.940 --> 06:34.470
Şimdi tekrar soruyorum, bu neden yararlı?

06:34.470 --> 06:37.550
Bu ekstra tür bilgisi neden yararlıdır?

06:37.550 --> 06:40.350
Peki, burada sadece bir promise tipimiz olsaydı ve buna

06:40.350 --> 06:41.430
izin verilmeyecekti,

06:41.430 --> 06:44.770
ancak promise of type anything deseydik, ki bu temelde of types ile

06:44.770 --> 06:46.870
aynı olacaktı, geri aldığımız şey hakkında

06:46.870 --> 06:48.390
herhangi bir bilgiye sahip olmayacaksa

06:48.390 --> 06:51.280
jenerik tipleri bilmeyecekti.

06:51.280 --> 06:53.340
O zaman bu vaatte elbette tüm vaatlerde

06:53.340 --> 06:55.750
olduğu gibi onları kullanabiliriz ve sonunda

06:55.750 --> 06:57.770
bazı veriler elde ederiz ancak bu veriler

06:57.770 --> 06:59.770
hakkında hiçbir şey bilmeyiz.

06:59.770 --> 07:02.500
Örneğin, üzerinde bir dize yöntemi çağıramıyorum.

07:02.500 --> 07:04.850
Yapabilirim çünkü bu durumda herhangi bir şey

07:04.850 --> 07:07.590
var ama belirli bir TypeScript desteği alamıyorum.

07:07.590 --> 07:11.313
Üzerinde bir şeyler de deneyebilirim ki bu kesinlikle işe yaramayacaktır.

07:12.170 --> 07:13.800
Örneğin, bunu tersine çevirirsek

07:13.800 --> 07:15.220
ve burada bir sayı döndürürsek,

07:15.220 --> 07:17.320
TypeScript'in bu vaadin sonunda vereceği

07:17.320 --> 07:19.390
veriler hakkında hiçbir bilgisi olmadığı

07:19.390 --> 07:22.640
için burada hala bir dize yöntemi çağırabilirim.

07:22.640 --> 07:24.070
Şimdi jenerik tiplerle bu

07:24.070 --> 07:26.280
bilgiyi TypeScript'e veriyoruz.

07:26.280 --> 07:28.160
TypeScript'e bu vaadin sonunda

07:28.160 --> 07:30.240
bir dize veya bu durumda bir sayı vereceğini

07:30.240 --> 07:32.840
söyleyebiliriz ve ardından TypeScript bizi

07:32.840 --> 07:34.940
burada uyarabilir.

07:34.940 --> 07:37.390
Bunu kaydetmeye çalışırsam, bize bir hata

07:37.390 --> 07:40.870
verecektir çünkü bu sözün sonunda bir sayı vereceğini ve

07:40.870 --> 07:44.092
bunun üzerine split diyebileceğinizi bilir.

07:44.092 --> 07:48.010
Böylece genel tiplerle daha iyi tip güvenliği elde ederiz.

07:48.010 --> 07:50.510
Yani bu jenerik tipteki bilgilerle ne yapacağınız

07:50.510 --> 07:52.720
konusunda gerçekten esneksiniz.

07:52.720 --> 07:54.830
Bir dizi hangi veriyi sakladığını, bir promise

07:54.830 --> 07:57.140
ise hangi veriyi döndürdüğünü bilir.

07:57.140 --> 07:59.840
Kendi genel sınıflarınızı veya işlevlerinizi oluşturuyorsanız,

07:59.840 --> 08:02.140
buradan tamamen farklı bir şey yapabilirsiniz.

08:02.140 --> 08:04.570
Ancak sonuçta genel türler, gelen verilerle

08:04.570 --> 08:06.970
bir şeyler yapan daha karmaşık bir sınıfınız

08:06.970 --> 08:10.640
veya daha karmaşık bir işleviniz varsa, verilerin belirli

08:10.640 --> 08:14.240
bir türde olmasını gerçekten önemsemediği, ancak genel

08:14.240 --> 08:16.020
türünüzle çalışırken daha

08:16.020 --> 08:18.700
iyi TypeScript desteği elde etmek için gelen

08:18.700 --> 08:21.500
verilerden tür bilgilerini depolamak istediğiniz

08:21.500 --> 08:27.590
bir şekilde ek tür bilgileri almanıza yardımcı olur.

08:27.590 --> 08:30.450
Yani bu vaat veya veri dizisi ile çalıştığınızda,

08:30.450 --> 08:33.270
temelde jenerik fikri budur.

08:33.270 --> 08:36.300
Yani buradaki, hepsi jenerik olarak inşa edildi.

08:36.300 --> 08:37.460
Bunu yorumlayalım.

08:37.460 --> 08:40.450
Şimdi kendi jenerik tip kelimemizi oluşturalım.

08:40.450 --> 08:42.653
Kendi jenerik tiplerimizi kullanalım.
