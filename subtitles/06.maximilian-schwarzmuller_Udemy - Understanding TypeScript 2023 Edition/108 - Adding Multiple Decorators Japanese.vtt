WEBVTT

00:02.270 --> 00:05.210
講師：では､ より便利なデコレーターを拝見しました｡ 

00:05.210 --> 00:08.750
デコレータの基本的な紹介の最後に､

00:08.750 --> 00:17.760
もうひとつ知っておくべき重要なことを説明します｡

00:17.760 --> 00:23.040
では､ ここにも例えばこんな感じでloggerのデコレーターを追加してみましょう｡

00:23.040 --> 00:29.030
これを保存すると､ エラーなしでコンパイルされ､ 実際にここでもログメッセージが表示されていることがわかります｡

00:29.030 --> 00:34.840
ここで一つ重要な疑問が残ります｡ これらのデコレーターはどのような順番で実行されるのでしょうか？

00:34.840 --> 00:38.880
そのためには､ ログメッセージを両方に投げてみよう｡

00:38.880 --> 00:41.340
Loggerにログメッセージがあるのは明らかですが､

00:41.340 --> 00:43.400
次にデコレーター関数に行きましょう｡

00:43.400 --> 00:46.350
そこで､ WithTemplateの内部関数に､

00:46.350 --> 00:49.900
例えば､ Rendering Templateと言います｡

00:49.900 --> 00:50.733
そして､ これらの関数がどの順番で実行され､

00:50.733 --> 00:56.820
どの順番でこれらのログ文が出力されるかを見てみましょう｡

00:56.820 --> 00:59.570
そして､ Rendering Templateが最初に実行され､

00:59.570 --> 01:02.540
次にLoggerの出力が得られることがわかります｡

01:02.540 --> 01:06.260
このことからわかるのは､ もちろんボトムアップで実行されているということです｡

01:06.260 --> 01:08.033
一番下のデコレータを先に､

01:08.033 --> 01:10.790
それ以降はその上のデコレータを先に｡

01:10.790 --> 01:14.230
まずWithTemplateが実行され､ 次にLoggerが実行されます｡ 

01:14.230 --> 01:15.270
そして重要なのは､

01:15.270 --> 01:18.920
実際のデコレーター機能の話です｡

01:18.920 --> 01:23.710
ここのデコレーターファクトリーは先に動いています｡ 

01:23.710 --> 01:26.790
ロガーファクトリーがあり､

01:26.790 --> 01:31.080
テンプレートファクトリーにも同じログがあり､

01:31.080 --> 01:39.930
ログの中にテンプレートファクトリーと書いてあります｡

01:39.930 --> 01:41.750
というのも､ 最終的にこの@の記号があっても､

01:41.750 --> 01:46.850
ここでは関数を実行していますし､ ここでも同じことをしているからです｡

01:46.850 --> 01:49.930
そしてもちろん､ ここでは通常のJavaScriptのルールが適用され､

01:49.930 --> 01:53.610
この関数の実行はこの関数の実行の前に行われます｡

01:53.610 --> 01:56.590
そのため､ テンプレートファクトリの前に､

01:56.590 --> 01:59.470
ロガーファクトリがあるのです｡

01:59.470 --> 02:07.280
つまり､ 実際のデコレータ関数の生成は､ これらのファクトリー関数を指定した順番に行われるのです｡

02:07.280 --> 02:12.700
しかし､ 実際のデコレータ関数の実行は､ その後にボトムアップで行われます｡

02:12.700 --> 02:17.300
つまり､ 一番下のデコレータが最初に実行されるので､ このデコレータ関数が実行され､

02:17.300 --> 02:23.250
その後､ その上のデコレータが実行されることになります｡

02:23.250 --> 02:25.163
知っておかなければならないことなのです｡ 

02:26.040 --> 02:29.620
これで､ デコレータについての基本的な知識を得ることができました｡

02:29.620 --> 02:32.240
また､ より高度なデコレータを見ることで､

02:32.240 --> 02:37.810
デコレータがなぜ便利なのか､ 特にAngularのようなフレームワークを考えている場合､

02:37.810 --> 02:41.970
その第一印象を得ることができると思います｡

02:41.970 --> 02:46.470
では､ クラス以外にどのような場所にデコレータを追加できるのか､

02:46.470 --> 02:50.363
そしてそこで何ができるのかを見てみましょう｡
