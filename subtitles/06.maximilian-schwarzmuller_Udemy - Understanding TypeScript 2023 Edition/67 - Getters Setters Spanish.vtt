WEBVTT

00:02.200 --> 00:04.920
Speaker: Así que eso es clases, propiedades

00:04.920 --> 00:07.510
y herencia con Typescript.

00:07.510 --> 00:08.343
Y como mencioné,

00:08.343 --> 00:10.260
estas características aunque generalmente

00:10.260 --> 00:12.490
son soportadas en Javascript, en el JavaScript

00:12.490 --> 00:14.230
moderno, por supuesto con la excepción

00:14.230 --> 00:16.940
de las asignaciones de tipo, y también con la excepción

00:16.940 --> 00:21.060
de protected private public.

00:21.060 --> 00:24.770
Estas palabras clave sólo están disponibles en Typescript.

00:24.770 --> 00:28.560
Sin embargo, no es todo lo que se puede hacer con las clases.

00:28.560 --> 00:29.940
Cuando se necesita una

00:29.940 --> 00:32.840
característica, que también se tiene en JavaScript

00:32.840 --> 00:35.670
vainilla, en la que también es compatible con

00:35.670 --> 00:38.610
Typescript, son getters y setters.

00:38.610 --> 00:42.050
Ahora veamos que aquí en el departamento de contabilidad

00:42.050 --> 00:43.390
por ejemplo, digamos

00:43.390 --> 00:47.450
que tenemos un último informe, propiedad.

00:47.450 --> 00:51.630
Que es una propiedad privada, y es una cadena de tipo,

00:51.630 --> 00:53.310
así que tenemos eso.

00:53.310 --> 00:56.480
Y luego aquí inicializamos esto, para ser nuestro

00:56.480 --> 01:01.480
argumento de órdenes de propiedad de informes que estamos recibiendo

01:02.270 --> 01:04.880
aquí y son el primer valor.

01:04.880 --> 01:07.877
Lo cual, por supuesto, es básicamente indefinido si pasamos

01:07.877 --> 01:09.890
una matriz de informes vacía.

01:09.890 --> 01:14.680
Ahora cuando añadimos un informe, entonces quiero establecer este

01:14.680 --> 01:17.010
último informe, igual a texto.

01:17.010 --> 01:20.440
Que es lo que añadimos a nuestra matriz de informes.

01:20.440 --> 01:23.890
Ahora el último informe es privado, por lo que podemos acceder

01:23.890 --> 01:26.250
a él desde dentro de este método, pero no

01:26.250 --> 01:28.590
podremos acceder a él desde fuera con la

01:28.590 --> 01:30.240
notación de puntos.

01:30.240 --> 01:33.440
Ahora podemos añadir un getter, para que siga siendo accesible.

01:33.440 --> 01:36.020
Un getter es básicamente una propiedad, donde

01:36.020 --> 01:38.670
se ejecuta una función o método, cuando se recupera

01:38.670 --> 01:40.910
un valor y que le permite como desarrollador

01:40.910 --> 01:42.380
para agregar una lógica más

01:42.380 --> 01:44.460
compleja.

01:44.460 --> 01:47.560
Aquí, usted crea un getter utilizando la palabra clave get, y luego

01:47.560 --> 01:49.250
cualquier nombre de su elección.

01:49.250 --> 01:51.810
Normalmente está estrechamente relacionado con la propiedad

01:51.810 --> 01:54.180
a la que se intenta controlar el acceso.

01:54.180 --> 01:58.180
Por ejemplo, aquí podríamos nombrar el informe más reciente.

01:58.180 --> 01:59.340
Algo así.

01:59.340 --> 02:01.630
Ahora bien, es importante que esto se defina como un método.

02:01.630 --> 02:04.260
Así que añades paréntesis y luego llaves.

02:04.260 --> 02:07.250
Y ahora aquí, tienes que devolver algo,

02:07.250 --> 02:11.990
eso es importante un método getter, tiene que devolver algo.

02:11.990 --> 02:14.610
Así que podría devolver este último informe,

02:14.610 --> 02:16.660
y luego encapsulamos esto, porque

02:16.660 --> 02:19.570
esto es de acceso público ahora.

02:19.570 --> 02:22.720
Pero a menudo se quiere tener una lógica más compleja aquí.

02:22.720 --> 02:26.240
Así que aquí podríamos comprobar si tenemos un valor aquí, así

02:26.240 --> 02:27.600
que si esto es verdad.

02:27.600 --> 02:28.960
Si no es undefined, entonces

02:28.960 --> 02:31.520
queremos devolver el último informe, de lo

02:31.520 --> 02:34.440
contrario podríamos querer devolver alguna lógica

02:34.440 --> 02:37.850
diferente, por ejemplo digamos que de lo contrario lanzamos

02:37.850 --> 02:42.650
un mensaje de error con throw new error, no reports found.

02:42.650 --> 02:46.650
Así que ahora hemos añadido más lógica, una lógica más compleja, a esta propiedad

02:46.650 --> 02:49.200
y cuando queremos recuperarla, no podemos recuperar

02:49.200 --> 02:51.500
directamente esta propiedad a través de la notación

02:51.500 --> 02:55.290
de puntos, pero podemos utilizar esto como una propiedad para el final de

02:55.290 --> 02:57.240
esta lógica.

02:57.240 --> 02:58.810
Entonces, ¿cómo funcionaría esto?

02:58.810 --> 03:02.170
Bien abajo, donde creo mi departamento de Contabilidad.

03:02.170 --> 03:08.693
Antes de añadir mi informe, si traté de registro de la consola, la contabilidad.

03:08.693 --> 03:08.693
informe

03:09.630 --> 03:11.010
más reciente, y ahora importante.

03:11.010 --> 03:13.902
Uy, la contabilidad. informe más reciente.

03:13.902 --> 03:16.890
Y ahora es importante que accedas a esto como una propiedad.

03:16.890 --> 03:18.690
Así que no hay paréntesis aquí.

03:18.690 --> 03:20.570
No se ejecuta esto como un método.

03:20.570 --> 03:23.030
Sólo tienes que acceder a ella como una propiedad

03:23.030 --> 03:24.460
normal, y detrás de las escenas,

03:24.460 --> 03:27.890
esto ejecutará este método allí arriba.

03:27.890 --> 03:31.670
Así que si he probado esto ahora antes de añadir nuestro informe,

03:31.670 --> 03:33.940
Veremos que esto reconstruido sin errores,

03:33.940 --> 03:35.440
recompilado sin errores,

03:35.440 --> 03:38.550
pero por supuesto aquí se lanza un error es nuestra costumbre

03:38.550 --> 03:40.820
no hay informe encontrado error, porque

03:40.820 --> 03:42.820
ningún informe fue añadido todavía,

03:42.820 --> 03:45.370
y desde el uso de este como un getter, accede

03:45.370 --> 03:48.310
a este método y lo ejecuta.

03:48.310 --> 03:51.560
Si no tenemos ningún informe no llegamos a esta comprobación

03:51.560 --> 03:52.830
IF, o a esta declaración

03:52.830 --> 03:55.693
IF, y por tanto esta línea de aquí, entra en acción.

03:56.590 --> 04:00.250
Como alternativa, si movemos eso hacia abajo, después de añadir

04:00.250 --> 04:02.210
un informe, entonces por supuesto

04:02.210 --> 04:04.100
que podemos guardar eso, y ya no obtenemos

04:04.100 --> 04:05.730
un error, pero en su lugar, la

04:05.730 --> 04:08.400
salida de este último informe.

04:08.400 --> 04:09.750
Así que eso es un conseguidor.

04:09.750 --> 04:12.190
Y también puedes añadir un setter.

04:12.190 --> 04:14.550
La adición de un setter se realiza casi de la misma manera.

04:14.550 --> 04:16.290
Se utiliza la palabra clave set, y luego

04:16.290 --> 04:18.630
otra vez cualquier nombre de su elección.

04:18.630 --> 04:21.940
típicamente un nombre relacionado con la propiedad que debe ser

04:21.940 --> 04:22.870
establecida.

04:22.870 --> 04:25.570
Así que aquí voy a reutilizar el informe más reciente.

04:25.570 --> 04:27.840
Para que podamos utilizarlo tanto para leer un valor

04:27.840 --> 04:29.150
como para establecerlo.

04:29.150 --> 04:30.090
Y además, definiste

04:30.090 --> 04:31.850
esto como un método.

04:31.850 --> 04:34.850
Pero ahora, esto necesita un argumento.

04:34.850 --> 04:38.630
El valor que el usuario habría introducido.

04:38.630 --> 04:40.940
Aquí debería haber un valor de cadena,

04:40.940 --> 04:44.110
y ahora aquí puedes ejecutar cualquier lógica que

04:44.110 --> 04:46.160
quieras para almacenar esto.

04:46.160 --> 04:48.530
Ahora bien, desde que pasamos un valor para

04:48.530 --> 04:51.890
el informe más reciente, al final quiero ejecutar añadir

04:51.890 --> 04:53.080
el informe.

04:53.080 --> 04:55.370
Así que aquí un setter podría ser simplemente una alternativa

04:55.370 --> 04:57.140
al método de añadir informe.

04:57.140 --> 05:01.280
Así que aquí podemos acceder a este informe de adición.

05:01.280 --> 05:03.760
Esto es necesario ya que estamos dentro de la clase.

05:03.760 --> 05:07.280
Nos referimos a la clase, y luego a este método de la clase aquí.

05:07.280 --> 05:10.380
Y ahora podemos reenviar el valor aquí.

05:10.380 --> 05:12.310
Ahora podríamos añadir una lógica

05:12.310 --> 05:16.130
más compleja, y también comprobar si el valor no está definido

05:16.130 --> 05:19.810
si es falso, y luego simplemente devolver o lanzar un nuevo

05:19.810 --> 05:24.020
error, donde decimos que por favor pase un valor válido.

05:24.020 --> 05:26.140
Eso es algo que también podríamos hacer.

05:26.140 --> 05:29.010
Y ahora estamos usando un setter aquí también.

05:29.010 --> 05:31.330
Con eso añadido podemos probarlo.

05:31.330 --> 05:33.193
Ahí abajo, podría añadir el informe

05:35.400 --> 05:36.570
más reciente.

05:36.570 --> 05:38.780
Podría acceder a esto en la contabilidad, y al

05:38.780 --> 05:40.770
igual que esto leeríamos de ella, pero ahora

05:40.770 --> 05:42.300
añadiendo un signo de igualdad,

05:42.300 --> 05:44.520
estamos tratando de establecer un valor a eso,

05:44.520 --> 05:47.150
y que va a desencadenar este método setter.

05:47.150 --> 05:50.090
De nuevo, antes no lo ejecutamos como un método, sino que simplemente

05:50.090 --> 05:52.383
accedemos a él como una propiedad.

05:53.220 --> 05:56.030
Ahora bien, si paso una cadena vacía, entonces

05:56.030 --> 05:58.770
técnicamente pasamos una cadena, pero una

05:58.770 --> 06:02.760
cadena vacía será tratada como falsa, ver aquí.

06:02.760 --> 06:04.950
Y por lo tanto, ahora deberíamos obtener un error.

06:04.950 --> 06:07.450
Así que si guardo esta línea de código, si guardo

06:07.450 --> 06:09.850
el código con esta línea de código añadida,

06:11.120 --> 06:14.530
recibimos este error por favor pase un valor válido.

06:14.530 --> 06:17.010
Sin embargo, si paso un valor

06:17.010 --> 06:22.010
válido, si digo informe de fin de año aquí por ejemplo, y ahora

06:22.250 --> 06:23.900
guardo esto.

06:23.900 --> 06:27.210
Ahora verás que todo esto funciona y que el informe de fin de año

06:27.210 --> 06:29.620
forma parte de nuestra lista de informes.

06:29.620 --> 06:31.150
Así que estos son getters y setters,

06:31.150 --> 06:33.620
que pueden ser grandes para la encapsulación de la lógica,

06:33.620 --> 06:35.390
y para la adición de la lógica adicional,

06:35.390 --> 06:38.050
que debe ejecutarse cuando se trata de leer una propiedad, o cuando

06:38.050 --> 06:40.243
se trata de establecer una propiedad.
