WEBVTT

00:02.060 --> 00:04.880
Człowiek: Rodzaj powiązania z operatorem spreadu

00:04.880 --> 00:07.060
to parametry odpoczynku.

00:07.060 --> 00:10.374
I w tym celu ponownie podrasuję moją funkcję add.

00:10.374 --> 00:13.870
Wykomentuję więc cały ten kod tutaj, żeby

00:13.870 --> 00:15.780
nic się nie popsuło.

00:15.780 --> 00:20.520
I ponownie dodaj moją funkcję dodawania z dowolną składnią, którą chcesz, ze słowem kluczowym

00:20.520 --> 00:22.760
funkcji jako funkcją strzałki, cokolwiek

00:22.760 --> 00:23.830
chcesz.

00:23.830 --> 00:26.360
Ale teraz chcę mieć specjalną funkcję.

00:26.360 --> 00:29.100
Nie chcę ograniczać go do dwóch wartości,

00:29.100 --> 00:31.340
chcę móc dodać tyle wartości, ile

00:31.340 --> 00:33.290
użytkownik przekaże.

00:33.290 --> 00:37.700
Tak, że możemy w zasadzie nazwać add jak to, pięć, dziesięć,

00:37.700 --> 00:42.700
dwa, trzy kropki siedem i tak dalej, z tyloma wartościami, ile

00:42.880 --> 00:44.530
chcesz.

00:44.530 --> 00:46.691
Jeśli chciałbyś wywołać go z 10 wartościami, powinno

00:46.691 --> 00:48.090
to być również możliwe.

00:48.090 --> 00:51.160
Teraz jednak oczywiście nie jest to możliwe,

00:51.160 --> 00:52.600
jak widać wyraźnie.

00:52.600 --> 00:54.290
Typescript daje mi błąd i prawidłowo,

00:54.290 --> 00:57.760
bo nie przyjmuję tu żadnych argumentów.

00:57.760 --> 01:00.336
Teraz oczywiście mógłbym przyjąć dla argumentów tutaj

01:00.336 --> 01:02.210
i przypisać odpowiednie typy, ale co jeśli

01:02.210 --> 01:04.300
następnie zadzwonię do niego z pięcioma.

01:04.300 --> 01:06.330
Jak już mówiłem, chcę być elastyczny.

01:06.330 --> 01:08.850
Tu z pomocą przychodzą parametry odpoczynku.

01:08.850 --> 01:13.111
W miejscu, w którym oczekujesz listy wartości, a więc nie tam, gdzie

01:13.111 --> 01:15.270
chcesz ją przekazać, ale gdzie chcesz

01:15.270 --> 01:18.308
ją przyjąć jako wartości przychodzące, możesz

01:18.308 --> 01:20.360
również użyć trzech kropek, a następnie

01:20.360 --> 01:24.043
dowolnej nazwy do wyboru, jak liczby.

01:25.630 --> 01:27.430
Teraz to, co to zrobi, to

01:27.430 --> 01:31.470
połączy wszystkie przychodzące parametry, lub

01:31.470 --> 01:34.920
ogólnie przychodzącą listę wartości, rozdzieloną

01:34.920 --> 01:39.350
przecinkami listę wartości w tablicę.

01:39.350 --> 01:40.940
Więc liczby tutaj będą tablicą,

01:40.940 --> 01:44.460
ale oczywiście domyślnie typem dowolnych wartości, więc tablicą

01:44.460 --> 01:46.920
pełną dowolnych wartości, a tego nie powinniśmy

01:46.920 --> 01:48.300
robić, powinniśmy być bardziej

01:48.300 --> 01:49.680
jednoznaczni.

01:49.680 --> 01:53.200
I tu moglibyśmy powiedzieć: "Będzie to tablica liczb. Jak to.

01:53.200 --> 01:54.430
Więc teraz definiujemy poprawny

01:54.430 --> 01:56.420
typ i teraz pracujemy z tą tablicą liczb.

01:56.420 --> 01:58.710
Teraz możemy to podsumować na kilka różnych sposobów.

01:58.710 --> 02:01.880
Możemy pracować ze zmienną wynikową, a następnie z czterema

02:01.880 --> 02:04.110
pętlami, ponieważ liczby to tablica.

02:04.110 --> 02:06.863
Więc tutaj moglibyśmy zapętlić

02:06.863 --> 02:09.260
liczby i dodać to do wyniku.

02:09.260 --> 02:11.519
Albo używamy metody reduce, która jest dostępna na tablicach.

02:11.519 --> 02:15.620
Reduce działa w ten sposób, że wykonuje operację na każdym

02:15.620 --> 02:19.030
elemencie tablicy, zwraca wynik, a następnie dodaje

02:19.030 --> 02:20.940
te wyniki razem.

02:20.940 --> 02:24.310
Do tego podajesz funkcję do redukcji, a następnie wartość

02:24.310 --> 02:27.160
początkową, która tutaj wynosi zero.

02:27.160 --> 02:31.093
I wtedy ta funkcja, którą przekazujesz do reduce sama przyjmuje

02:31.093 --> 02:33.430
dwa argumenty i to jest aktualny wynik

02:33.430 --> 02:35.920
można powiedzieć.

02:35.920 --> 02:38.968
I to właśnie bieżąca wartość, na którą patrzymy,

02:38.968 --> 02:42.640
będzie każdą wartością tablicy ones.

02:42.640 --> 02:45.350
A następnie tutaj możesz zwrócić cuResult, który dla pierwszego

02:45.350 --> 02:48.290
uruchomienia będzie tą początkową wartością tutaj.

02:48.290 --> 02:51.497
Plus curValue.

02:51.497 --> 02:52.703
I jeśli zrobisz to zredukuj ogólny tutaj zwróci liczbę.

02:53.859 --> 02:57.920
Czyli tutaj możemy ogólnie zwrócić wynik liczb pomniejszonych

02:57.920 --> 03:01.160
i stąd zmienna add, czyli stała tutaj, będzie

03:01.160 --> 03:04.790
w końcu trzymać funkcję, która przyjmuje parę liczb,

03:04.790 --> 03:07.320
a nie tablicę liczb.

03:07.320 --> 03:10.650
Ale z powodu parametrów reszty, lista liczb, która

03:10.650 --> 03:13.690
jest następnie łączona w tablicę wewnątrz funkcji

03:13.690 --> 03:16.510
i która zwraca liczbę na końcu.

03:16.510 --> 03:18.550
Więc na razie jeśli wszystko zapiszemy,

03:18.550 --> 03:20.350
to powinno wszystko działać i widzimy

03:20.350 --> 03:23.350
wynik, sumę naszego małego dodawania tutaj.

03:23.350 --> 03:26.250
Więc to są parametry odpoczynku, naprawdę

03:26.250 --> 03:28.430
przydatna funkcja do akceptowania

03:28.430 --> 03:31.400
nieograniczonej ilości argumentów.

03:31.400 --> 03:34.210
A kilka wbudowanych metod, takich jak metoda

03:34.210 --> 03:36.680
push, działa dokładnie w ten sposób.

03:36.680 --> 03:38.540
Widzisz, push tutaj ma tę dziwną definicję parametru.

03:38.540 --> 03:42.560
No właśnie tego się właśnie dowiedzieliśmy.

03:42.560 --> 03:44.250
Push tutaj pobiera kilka

03:44.250 --> 03:48.490
elementów do tej tablicy, która jest tablicą pełną ciągów.

03:48.490 --> 03:50.400
Potrzeba do tego kilku sznurków.

03:50.400 --> 03:51.730
I to nie znaczy, że bierze tablicę

03:51.730 --> 03:54.060
łańcuchów, ale zamiast tego tutaj witamy parametry

03:54.060 --> 03:56.400
reszty, rozdzieloną przecinkami listę łańcuchów,

03:56.400 --> 03:58.580
która ins out of porch jest następnie łączona

03:58.580 --> 04:01.260
w tablicę i obsługiwana wewnętrznie.

04:01.260 --> 04:03.100
To jest składnia parametrów reszty.

04:03.100 --> 04:06.276
Możesz nawet połączyć to z tuples przy okazji.

04:06.276 --> 04:10.370
Jeśli wiesz, że chcesz obsługiwać wiele argumentów,

04:10.370 --> 04:15.370
ale wiesz, ile to będzie, więc jeśli nie jest to nieograniczona

04:16.520 --> 04:18.420
lista, to możesz również

04:18.420 --> 04:20.392
użyć tam typu tuple.

04:20.392 --> 04:23.430
I na przykład powiedzieć: "Ja tu przyjmuję swoje darmowe numery. I wtedy muszę usunąć czwarty argument

04:23.430 --> 04:28.430
tutaj oczywiście przy wywołaniu funkcji.

04:28.460 --> 04:30.910
Ponieważ teraz jestem całkiem jasny, że chcę uzyskać trzy argumenty,

04:30.910 --> 04:32.240
z których każdy jest liczbą.

04:32.240 --> 04:33.830
Więc oczywiście mogliśmy po prostu

04:33.830 --> 04:36.980
dodać trzy samodzielne parametry tutaj, ale ta składnia może nadal być

04:36.980 --> 04:39.030
nieco krótsza lub łatwiejsza do skonfigurowania

04:39.030 --> 04:40.720
niż dodanie wolnych parametrów.

04:40.720 --> 04:43.090
To naprawdę zależy od twojej aplikacji i twoich wymagań.

04:43.090 --> 04:46.919
Tutaj odejdę od tej konfiguracji i będę bardziej ogólny

04:46.919 --> 04:51.320
i zaakceptuję tyle argumentów, ile dostanę, ponieważ dla tej

04:51.320 --> 04:55.210
funkcji rzeczywiście jestem w stanie obsłużyć nieskończoną

04:55.210 --> 04:57.864
ilość argumentów.
