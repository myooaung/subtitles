WEBVTT

00:02.200 --> 00:04.080
Instructor: Es hora de otro archivo nuevo.

00:04.080 --> 00:09.080
Voy a cambiar el nombre de la aplicación. nes de unión. ts, y añadir una nueva

00:11.100 --> 00:13.760
aplicación. ts donde podemos empezar

00:13.760 --> 00:16.370
de nuevo desde cero, cerrar el otro archivo.

00:16.370 --> 00:20.660
Y ahora aquí quiero profundizar un poco más en las funciones.

00:20.660 --> 00:22.640
Ahora, por supuesto, con las funciones ya trabajadas.

00:22.640 --> 00:24.940
Por ejemplo, aquí en el archivo de alias de unión

00:24.940 --> 00:26.340
con la función de combinar.

00:26.340 --> 00:29.260
Y por ejemplo, has visto que para las funciones puedes

00:29.260 --> 00:32.520
asignar tipos a los parámetros de las funciones.

00:32.520 --> 00:34.310
Pues bien, resulta que se puede hacer

00:34.310 --> 00:36.483
algo más con las funciones y los tipos.

00:37.590 --> 00:40.430
Para ello voy a recrear mi función add, que

00:40.430 --> 00:43.373
simplemente acepta números, no cadenas.

00:44.270 --> 00:48.340
Que hace una cosa sencilla, devuelve n uno más n dos, así que no es

00:48.340 --> 00:49.513
muy complicado.

00:51.004 --> 00:53.740
Como he mencionado, podemos asignar tipos a los parámetros,

00:53.740 --> 00:55.180
eso no es nuevo.

00:55.180 --> 00:57.030
La función en general, sin embargo,

00:57.030 --> 01:01.050
tiene otro tipo importante, tiene un tipo de retorno.

01:01.050 --> 01:03.990
Y aquí el tipo de retorno es inferido por TypeScript.

01:03.990 --> 01:06.490
Podemos verlo si pasamos el ratón por encima de la adición.

01:06.490 --> 01:10.760
Aquí al final, los dos puntos después de la lista de parámetros, esto

01:10.760 --> 01:14.190
aquí, describe el tipo de retorno de la función.

01:14.190 --> 01:16.800
Así que el tipo del valor devuelto.

01:16.800 --> 01:20.020
Aquí, devuelvo la suma de n uno y n dos.

01:20.020 --> 01:23.050
Y como ambas entradas son números, TypeScript es capaz

01:23.050 --> 01:24.930
de inferir que el resultado de esto

01:24.930 --> 01:26.770
será un número, y como lo devolvemos,

01:26.770 --> 01:28.820
que el tipo de retorno de los datos de esta

01:28.820 --> 01:30.830
función será un número.

01:30.830 --> 01:33.320
Si los concatenaras como cadenas aquí,

01:33.320 --> 01:35.363
con toString por ejemplo, entonces

01:36.550 --> 01:39.030
TypeScript inferiría correctamente

01:39.030 --> 01:41.900
que devolvemos una cadena aquí.

01:41.900 --> 01:44.350
Ahora, por supuesto, siempre podemos asignar explícitamente

01:44.350 --> 01:46.910
un tipo de retorno aquí añadiendo dos puntos después de

01:46.910 --> 01:48.490
la lista de parámetros, y luego el

01:48.490 --> 01:51.263
tipo que quieres devolver, como número.

01:52.850 --> 01:54.560
Este sería el mismo tipo que el inferido.

01:54.560 --> 01:56.760
Si yo, por ejemplo, estableciera esto

01:56.760 --> 02:00.020
como cadena, obtendría un error aquí, porque obviamente

02:00.020 --> 02:03.540
mi cálculo aquí no coincide con mi tipo de retorno descrito.

02:03.540 --> 02:06.480
Ahora, al igual que con las variables, es una buena idea dejar

02:06.480 --> 02:10.080
que TypeScript haga su trabajo con respecto a la inferencia de tipos.

02:10.080 --> 02:12.610
Y si no tienes ninguna razón específica para

02:12.610 --> 02:14.810
establecer explícitamente el tipo,

02:14.810 --> 02:17.090
no deberías establecer el tipo, y en su

02:17.090 --> 02:20.470
lugar dejar que TypeScript infiera el tipo.

02:20.470 --> 02:22.660
En cuanto a los tipos de retorno, hay un tipo

02:22.660 --> 02:25.910
interesante que no hemos visto antes, y que podría ser nuevo

02:25.910 --> 02:27.530
para ti si tienes experiencia

02:27.530 --> 02:30.240
con otros lenguajes de programación.

02:30.240 --> 02:31.200
Porque es un tipo que

02:31.200 --> 02:33.250
no existe realmente en JavaScript.

02:33.250 --> 02:35.180
Es el tipo de vacío.

02:35.180 --> 02:38.160
Digamos que tenemos el método printResult.

02:38.160 --> 02:41.190
Ahí tenemos un argumento numérico,

02:41.190 --> 02:44.120
que debería ser un, bueno, número.

02:44.120 --> 02:47.510
Y ahí, quiero consolar. log num.

02:47.510 --> 02:49.450
Y quiero consolar. registrarlo como parte

02:49.450 --> 02:52.150
de una cadena, donde digo resultado más num.

02:52.150 --> 02:53.670
Así que ahora esto será concatenado

02:53.670 --> 02:56.090
a una cadena larga, y será la salida.

02:56.090 --> 02:57.777
Y ahora puedo llamar a printResult.

02:57.777 --> 03:01.020
Y por ejemplo, pasar por ahí el resultado de mi

03:01.020 --> 03:05.010
llamada a la función sumar, con cinco más, digamos 12.

03:05.010 --> 03:07.670
Así que estoy ejecutando añadir aquí, con dos números.

03:07.670 --> 03:10.160
Y el resultado de eso, lo que devuelve

03:10.160 --> 03:13.130
add, se pasa como argumento a printResult.

03:13.130 --> 03:15.780
Y eso debería imprimirlo en la consola.

03:15.780 --> 03:19.150
Si ahora compilamos esto y luego echamos un vistazo a eso en

03:19.150 --> 03:21.110
nuestra página, o en nuestra página

03:21.110 --> 03:24.280
aquí, vemos el resultado 17, que tiene sentido.

03:24.280 --> 03:25.660
Ahora lo interesante aquí

03:25.660 --> 03:27.640
es el tipo de retorno de printResult.

03:27.640 --> 03:30.353
¿Cuál crees que es el tipo de retorno aquí?

03:31.240 --> 03:33.240
Así que tal vez pienses que es una cadena,

03:33.240 --> 03:35.150
porque estoy creando una cadena aquí.

03:35.150 --> 03:37.360
Pero ten en cuenta que no vamos a devolver esto.

03:37.360 --> 03:39.400
No vamos a devolver nada aquí.

03:39.400 --> 03:42.010
Y por lo tanto esta función printResult aquí

03:42.010 --> 03:44.990
tiene un tipo de retorno especial, void.

03:44.990 --> 03:47.910
Ahora puede notar el tipo de retorno void de otros

03:47.910 --> 03:49.830
lenguajes de programación.

03:49.830 --> 03:52.230
Ahí tienes algo así.

03:52.230 --> 03:53.940
JavaScript no lo sabe realmente,

03:53.940 --> 03:56.740
o no tiene un nombre para esta situación.

03:56.740 --> 03:58.590
Sin embargo, TypeScript sí lo hace.

03:58.590 --> 04:01.840
Así que, efectivamente, esta función aquí tiene un tipo de retorno de void.

04:01.840 --> 04:04.065
Y, por supuesto, no es necesario especificarlo aquí.

04:04.065 --> 04:06.440
La inferencia de TypeScript hizo su trabajo.

04:06.440 --> 04:07.630
Pero quiero dejar bien

04:07.630 --> 04:09.610
claro que esto tiene el tipo de retorno

04:09.610 --> 04:13.730
void, por lo que lo añado aquí, para fines de demostración.

04:13.730 --> 04:17.070
Ahora, void realmente significa que esta función

04:17.070 --> 04:21.020
no tiene una declaración de retorno, no devuelve nada.

04:21.020 --> 04:24.540
Se completa con éxito, hace su trabajo.

04:24.540 --> 04:28.170
Ejecuta su código, no da error ni nada

04:28.170 --> 04:32.550
parecido, pero luego no devuelve nada.

04:32.550 --> 04:34.990
Es el tipo de retorno void.

04:34.990 --> 04:37.330
Ahora técnicamente en JavaScript, por supuesto,

04:37.330 --> 04:39.490
si nos consola. Registrar el resultado

04:39.490 --> 04:43.550
de printResult aquí y ahora compilar esto, y vemos lo que obtiene

04:43.550 --> 04:46.270
la salida aquí en la página.

04:46.270 --> 04:49.480
Vemos que undefined es devuelto por eso.

04:49.480 --> 04:51.540
Así que técnicamente, y esto es

04:51.540 --> 04:56.450
realmente interesante, en JavaScript, si usamos el valor de retorno de una

04:56.450 --> 05:00.830
función que no devuelve nada, obtenemos undefined como valor.

05:00.830 --> 05:03.730
Y como probablemente sabes, undefined en JavaScript

05:03.730 --> 05:05.720
es en realidad un valor real.

05:05.720 --> 05:08.430
Un valor que, por ejemplo, también se obtiene si se

05:08.430 --> 05:11.880
intenta acceder a una propiedad de un objeto que no existe.

05:11.880 --> 05:13.670
Así que aquí obtenemos void,

05:13.670 --> 05:16.680
aunque técnicamente esto devuelve undefined.

05:16.680 --> 05:19.020
Y ahora para hacerlo aún más confuso,

05:19.020 --> 05:23.300
undefined es en realidad un tipo en TypeScript.

05:23.300 --> 05:25.640
Puede tener undefined como tipo.

05:25.640 --> 05:29.570
Y por ejemplo, una nueva variable, someValue, puede

05:30.770 --> 05:33.270
recibir undefined como tipo, y no

05:33.270 --> 05:34.700
obtendrá un error.

05:34.700 --> 05:37.380
Esta variable quedará ahora indefinida para siempre.

05:37.380 --> 05:39.970
La utilidad que pueda tener es otra cuestión.

05:39.970 --> 05:43.720
Pero undefined es un tipo válido en TypeScript.

05:43.720 --> 05:46.600
Sin embargo, aquí ves que nos da un error.

05:46.600 --> 05:48.010
Y obtenemos un error

05:48.010 --> 05:51.690
porque una función no puede devolver undefined.

05:51.690 --> 05:53.300
Técnicamente, por supuesto, lo hace,

05:53.300 --> 05:56.850
pero TypeScript piensa en las funciones de manera un poco diferente.

05:56.850 --> 06:00.200
Debería usar void aquí si una función no devuelve nada,

06:00.200 --> 06:04.300
y no undefined, porque con void deja claro que esta función deliberadamente

06:04.300 --> 06:05.940
no tiene una declaración

06:05.940 --> 06:08.260
de retorno.

06:08.260 --> 06:10.690
Si dijeras undefined aquí, entonces TypeScript

06:10.690 --> 06:13.460
esperaría que tuvieras una sentencia return

06:13.460 --> 06:17.080
donde simplemente no devuelves un valor.

06:17.080 --> 06:18.660
Esa es la diferencia técnica.

06:18.660 --> 06:20.670
Ahora ves que no me da error.

06:20.670 --> 06:22.860
Desde la perspectiva de JavaScript,

06:22.860 --> 06:26.610
esto es básicamente lo mismo que esto.

06:26.610 --> 06:29.050
Pero TypeScript hace una diferenciación aquí,

06:29.050 --> 06:31.240
y por lo tanto void es el tipo que quieres usar

06:31.240 --> 06:33.760
si no tienes una declaración de retorno.

06:33.760 --> 06:37.200
Undefined, que rara vez necesitará, para ser honesto,

06:37.200 --> 06:41.100
se puede utilizar si devuelve sin devolver un valor real.

06:41.100 --> 06:45.750
Pero, de nuevo, este es un caso de uso poco frecuente, y también podrías utilizar void con

06:45.750 --> 06:47.560
una sentencia return como esta.

06:47.560 --> 06:49.040
No obtendrá un error.

06:49.040 --> 06:50.610
Y por defecto, en realidad siempre

06:50.610 --> 06:52.770
se usaría void en este escenario.

06:52.770 --> 06:54.680
A menos que realmente tengas una

06:54.680 --> 06:56.750
función que deba producir undefined,

06:56.750 --> 06:58.620
y quieras tenerlo claro.

06:58.620 --> 07:01.430
Pero, de nuevo, ese será raramente el caso.

07:01.430 --> 07:03.620
Sólo quiero asegurarme aquí, de que entiendes

07:03.620 --> 07:05.870
la diferencia entre void e indefinido,

07:05.870 --> 07:08.160
que void es el estándar que usarás en casi

07:08.160 --> 07:10.930
todos los escenarios donde tienes una función

07:10.930 --> 07:13.450
que no devuelve un valor, y que puedes asignar

07:13.450 --> 07:15.770
explícitamente.

07:15.770 --> 07:18.780
Pero por supuesto, TypeScript también es capaz de inferirlo,

07:18.780 --> 07:20.440
como sería capaz aquí también.

07:20.440 --> 07:23.083
Sólo he añadido esto para fines de demostración aquí.
