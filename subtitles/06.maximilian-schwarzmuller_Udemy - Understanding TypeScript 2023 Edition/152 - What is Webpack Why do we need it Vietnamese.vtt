WEBVTT

00:02.050 --> 00:04.090
Người hướng dẫn: Vậy chúng ta có nhược điểm nào?

00:04.090 --> 00:06.030
Đây là dự án chúng tôi đã thực

00:06.030 --> 00:08.020
hiện, chia thành nhiều tệp

00:08.020 --> 00:12.390
bằng cách sử dụng các nhập mô-đun ES6 này tại đây.

00:12.390 --> 00:15.620
Bây giờ, hãy thực sự xây dựng dự án này và để thực hiện

00:15.620 --> 00:18.400
điều đó, như chúng ta đã làm trước đây, chúng

00:18.400 --> 00:21.930
ta có thể chạy npm-start để hiển thị máy chủ lite.

00:21.930 --> 00:24.710
Và tất nhiên, rất quan trọng trong một tab mới,

00:24.710 --> 00:26.367
tất cả hãy chạy tsc-dash để

00:27.820 --> 00:31.430
bắt đầu quá trình biên dịch TypeScript ở chế độ xem.

00:31.430 --> 00:35.590
Điều này mang lại cho chúng tôi dự án của chúng tôi và nếu bây giờ chúng tôi mở tab Mạng

00:35.590 --> 00:39.570
trong công cụ dành cho nhà phát triển trình duyệt và chúng tôi tải lại tệp này,

00:39.570 --> 00:42.360
chúng tôi sẽ thấy nhược điểm chúng tôi gặp phải ở đây hoặc

00:42.360 --> 00:44.840
sự cố chúng tôi gặp phải với thiết lập này.

00:44.840 --> 00:47.490
Chúng tôi thấy một loạt các yêu cầu HTTP.

00:47.490 --> 00:49.160
Bây giờ bạn có thể bỏ qua những cái cuối cùng ở

00:49.160 --> 00:51.380
đây, những cái này đến từ máy chủ phát triển của chúng tôi.

00:51.380 --> 00:54.720
Nhưng tất cả những yêu cầu của chúng tôi ở đây để ứng dụng. js, đầu vào dự

00:54.720 --> 00:58.290
án. js, danh sách dự án. js, thành phần cơ sở. js và

00:58.290 --> 01:00.960
đó là vấn đề.

01:00.960 --> 01:04.610
Bạn sẽ nhận thấy rằng tất cả các tệp này không quá lớn,

01:04.610 --> 01:06.320
chúng tương đối nhỏ.

01:06.320 --> 01:07.590
Vì vậy, tất nhiên là

01:07.590 --> 01:11.010
tốt nhưng chúng tôi có rất nhiều yêu cầu HTTP ở đây.

01:11.010 --> 01:12.600
Bây giờ vấn đề với điều đó là gì?

01:12.600 --> 01:15.070
Vấn đề với điều đó có thể được nhìn thấy nếu

01:15.070 --> 01:17.810
chúng ta nhìn vào thác nước ở đây, bên phải.

01:17.810 --> 01:20.330
Tất nhiên, mọi yêu cầu HTTP cần được thực

01:20.330 --> 01:22.470
hiện đều mất một ít thời gian.

01:22.470 --> 01:24.480
Phải mất thời gian để tải xuống các tệp

01:24.480 --> 01:27.760
nhưng vì chúng không quá lớn nên đó không phải là vấn đề.

01:27.760 --> 01:31.390
Nhưng mọi yêu cầu HTTP đều giống như một chi phí cơ bản,

01:31.390 --> 01:34.540
một khoảng thời gian cơ bản mà nó luôn cần.

01:34.540 --> 01:38.570
Cái hộp nhỏ mà bạn nhìn thấy phía trước những đồ thị này.

01:38.570 --> 01:41.250
Đó là lúc gần đến lúc nó yêu cầu trình duyệt

01:41.250 --> 01:43.910
thiết lập yêu cầu đó và gửi đi.

01:43.910 --> 01:46.280
Vì vậy, trong khi quá trình tải xuống tệp

01:46.280 --> 01:49.600
thực tế có thể tương đối nhanh, thì việc thiết lập yêu cầu,

01:49.600 --> 01:52.860
thực hiện công việc trên máy chủ, máy chủ phục vụ tệp và trên

01:52.860 --> 01:55.310
đó đều mất một khoảng thời gian.

01:55.310 --> 01:57.890
Và bây giờ ở đây, chúng tôi có một thiết lập rất nhanh

01:57.890 --> 02:00.310
vì tất cả đều diễn ra trên máy của chúng tôi.

02:00.310 --> 02:03.020
Chúng tôi thường có một máy chủ phát triển cục bộ.

02:03.020 --> 02:06.160
Nếu bạn triển khai điều đó lên web, việc có nhiều

02:06.160 --> 02:08.690
yêu cầu như vậy thực sự có thể gây ra nhiều

02:08.690 --> 02:11.140
độ trễ và làm chậm dự án của bạn chỉ vì

02:11.140 --> 02:14.760
số lượng yêu cầu HTTP khổng lồ được thực hiện.

02:14.760 --> 02:17.280
Vì vậy, nếu chúng tôi có thể tìm ra giải

02:17.280 --> 02:21.370
pháp để giảm số lượng yêu cầu HTTP đó, điều đó thật tuyệt vời.

02:21.370 --> 02:24.020
Và đó là nơi webpack phát huy tác dụng.

02:24.020 --> 02:28.190
Bạn có thể vào webpack. js. org, để tìm hiểu thêm về nó.

02:28.190 --> 02:30.290
Cuối cùng, webpack là một công cụ

02:30.290 --> 02:33.750
giúp chúng tôi nhóm các tệp của mình lại với nhau.

02:33.750 --> 02:36.530
Và tôi thực sự có thể giới thiệu tài liệu phong

02:36.530 --> 02:39.980
phú và toàn diện mà bạn tìm thấy trên trang của họ.

02:39.980 --> 02:42.300
Nếu bạn muốn tìm hiểu tất cả về webpack.

02:42.300 --> 02:44.820
Trong khóa học này, chúng tôi sẽ sử dụng một số tính năng đã

02:44.820 --> 02:46.563
chọn giúp chúng tôi với TypeScript.

02:47.560 --> 02:49.850
Vậy chính xác webpack là gì?

02:49.850 --> 02:53.850
Đó là một gói và bạn có thể nói là công cụ điều phối xây dựng.

02:53.850 --> 02:56.190
Đó là một công cụ giúp chúng tôi giảm số

02:56.190 --> 02:59.560
lượng yêu cầu HTTP bằng cách nhóm các mã lại với nhau.

02:59.560 --> 03:03.010
Vì vậy, chúng tôi viết mã được chia thành nhiều tệp nhưng

03:03.010 --> 03:05.390
webpack sau đó sẽ lấy tất cả các tệp này và

03:05.390 --> 03:07.050
nhóm chúng lại với nhau.

03:07.050 --> 03:10.050
Và ngoài ra webpack còn có khả năng làm được nhiều hơn thế.

03:10.050 --> 03:13.920
Nó cũng sẽ tối ưu hóa mã của chúng tôi và nó cũng cho phép chúng tôi thêm

03:13.920 --> 03:17.760
nhiều bước xây dựng hơn, nhiều công cụ xây dựng hơn, chẳng hạn như

03:17.760 --> 03:20.410
để giúp chúng tôi xử lý các tệp CSS, v.v.

03:20.410 --> 03:23.180
Tuy nhiên, đó không phải là điều chúng ta sẽ xem xét trong mô-đun

03:23.180 --> 03:26.220
này, bởi vì tôi muốn tập trung vào webpack và TypeScript.

03:26.220 --> 03:28.710
Vì vậy, trước hết hãy xem thiết lập bình thường của chúng

03:28.710 --> 03:30.700
tôi, nơi chúng tôi không sử dụng webpack.

03:30.700 --> 03:32.800
Ở đó, chúng tôi có nhiều tệp TypeScript nhưng

03:32.800 --> 03:34.870
nếu sau đó chúng tôi sử dụng các lần nhập

03:34.870 --> 03:36.920
này, chúng tôi sẽ nhận được nhiều yêu cầu

03:36.920 --> 03:40.220
HTTP, điều này không tốt lắm vì những lý do tôi đã đề cập.

03:40.220 --> 03:43.450
Ngoài ra, một chủ đề mà tôi chưa từng xem trước

03:43.450 --> 03:47.670
đây là rất có thể chúng tôi có mã chưa được tối ưu hóa, có

03:47.670 --> 03:51.290
nghĩa là mã không phải càng nhỏ càng tốt.

03:51.290 --> 03:53.330
Chúng tôi chắc chắn có thể tối ưu hóa mã

03:53.330 --> 03:55.750
nhiều hơn bằng cách rút ngắn tên hàm, v.v.

03:55.750 --> 03:58.690
Và tất nhiên, chúng tôi muốn có một công cụ tự động thực hiện

03:58.690 --> 04:01.030
việc này để chúng tôi không phải làm việc quá thủ

04:01.030 --> 04:03.000
công với mã không thể đọc được.

04:03.000 --> 04:06.080
Chúng tôi muốn viết mã hoàn toàn dễ đọc với tư cách là nhà phát triển.

04:06.080 --> 04:07.850
Nhưng sẽ thật tuyệt nếu

04:07.850 --> 04:10.740
chúng ta có một công cụ rút ngắn mã này và

04:10.740 --> 04:14.960
thực sự làm cho nó nhỏ nhất có thể, sử dụng tên biến và hàm càng

04:14.960 --> 04:17.170
ngắn càng tốt, để chúng ta gửi

04:17.170 --> 04:19.130
càng ít mã càng tốt.

04:19.130 --> 04:22.940
Bởi vì ít mã hơn có nghĩa là người dùng có thể tải xuống nhanh hơn, điều đó

04:22.940 --> 04:25.530
có nghĩa là ứng dụng của chúng tôi có thể khởi động

04:25.530 --> 04:27.600
nhanh hơn trên máy của chúng tôi.

04:27.600 --> 04:29.440
Và ngoài ra, thiết lập hiện tại của

04:29.440 --> 04:32.860
chúng tôi, chúng tôi có máy chủ phát triển bổ sung này, máy chủ

04:32.860 --> 04:35.150
lite, đây là một gói bổ sung được cài đặt mà

04:35.150 --> 04:36.860
chúng tôi phải hoàn thiện.

04:36.860 --> 04:39.320
Sẽ không phải là một phần thưởng nhỏ, một phần thưởng

04:39.320 --> 04:42.280
tuyệt vời nếu chúng tôi có một lệnh và lệnh đó sẽ làm mọi thứ, xây

04:42.280 --> 04:45.360
dựng dự án của chúng tôi, nhưng cũng tạo ra một máy chủ như vậy, máy

04:45.360 --> 04:48.170
chủ này sẽ tự động tải lại trang web của chúng tôi bất cứ khi nào

04:48.170 --> 04:50.713
chúng tôi thay đổi tệp trong dự án của mình.

04:51.550 --> 04:54.270
Chà, và đó là nơi webpack có thể giúp chúng tôi.

04:54.270 --> 04:57.240
Nó gộp mã của chúng tôi để chúng tôi có ít lần nhập

04:57.240 --> 05:00.670
hơn thay vào đó chúng tôi có một số gói mã tốt mà chúng tôi

05:00.670 --> 05:05.100
gửi, nó giúp chúng tôi tối ưu hóa mã của mình, thu nhỏ mã như nó được gọi,

05:05.100 --> 05:06.717
để chúng tôi gửi ít mã hơn và

05:06.717 --> 05:10.130
người dùng của chúng tôi có ít mã hơn để tải xuống.

05:10.130 --> 05:12.530
Và chúng tôi cũng có thể dễ dàng thêm nhiều bước

05:12.530 --> 05:15.750
xây dựng hơn nếu bạn muốn, chúng tôi có thể thêm một máy chủ phát

05:15.750 --> 05:19.270
triển như vậy nhưng chúng tôi cũng có thể làm nhiều việc khác nếu chúng

05:19.270 --> 05:22.160
tôi thực sự muốn và tài liệu webpack chính thức là nơi

05:22.160 --> 05:24.130
bạn muốn tìm hiểu về nó.

05:24.130 --> 05:27.880
Cùng với đó, hãy xem một thiết lập ví dụ trong dự án của chúng tôi và hãy tìm

05:27.880 --> 05:30.433
hiểu cách chúng tôi có thể sử dụng webpack ở đó.
