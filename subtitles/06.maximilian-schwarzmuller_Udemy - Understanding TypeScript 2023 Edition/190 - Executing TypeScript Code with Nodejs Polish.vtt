WEBVTT

00:02.200 --> 00:03.210
Instruktor: Zacznijmy

00:03.210 --> 00:05.520
więc od TypeScript i Node. js i dla tego jestem zasadniczo

00:05.520 --> 00:08.660
w pustym nowym folderze tutaj, tylko niektóre pliki konfiguracyjne

00:08.660 --> 00:12.140
tam, i zacznijmy bardzo prosto.

00:12.140 --> 00:15.020
Dodajmy do tego aplikację. ts w tym miejscu.

00:15.020 --> 00:17.370
Możesz go nazwać jakkolwiek chcesz, oczywiście.

00:17.370 --> 00:19.180
A w nim napiszmy jakiś kod, który chcemy

00:19.180 --> 00:22.220
wykonać za pomocą Node. js, ale tam gdzie

00:22.220 --> 00:24.980
chcemy użyć TypeScript.

00:24.980 --> 00:26.350
Prosty skrypt może polegać

00:26.350 --> 00:28.910
na tym, że po prostu konsolowo coś logujemy.

00:28.910 --> 00:30.450
Działa to w przeglądarce, ale

00:30.450 --> 00:33.350
działa to również w Node. słoiki.

00:33.350 --> 00:35.840
Teraz upewnij się, że masz Node. js zainstalowany, który

00:35.840 --> 00:37.220
zdecydowanie powinieneś

00:37.220 --> 00:38.740
mieć, jeśli przeszedłeś przez

00:38.740 --> 00:42.077
ten kurs, ponieważ używaliśmy go w NPM z Webpackiem i z wieloma

00:42.077 --> 00:43.910
innymi narzędziami i bibliotekami,

00:43.910 --> 00:46.710
które zainstalowaliśmy z NPM już.

00:46.710 --> 00:48.480
Więc powinieneś mieć Node. js zainstalowane.

00:48.480 --> 00:50.300
A jeśli masz go zainstalowanego,

00:50.300 --> 00:52.130
możesz wykonać ten plik, jeśli skompilujesz

00:52.130 --> 00:54.110
go do JavaScript.

00:54.110 --> 00:57.000
Więc jeśli uruchomię tsc app. ts, a ja produkuję

00:57.000 --> 01:00.360
swoją aplikację. Plik js dlatego mogę

01:00.360 --> 01:02.890
wykonać to za pomocą węzła i drukuję

01:02.890 --> 01:04.503
coś tutaj.

01:06.550 --> 01:08.990
Teraz gdy usuwam aplikację. js i próbuję wykonać

01:08.990 --> 01:11.890
aplikację. ts z node, zobaczysz

01:11.890 --> 01:13.810
coś dziwnego.

01:13.810 --> 01:15.070
To też działa.

01:15.070 --> 01:18.010
Więc jeśli node zdolny do wykonywania TypeScript?

01:18.010 --> 01:20.380
Nie jest i to jest naprawdę ważne.

01:20.380 --> 01:23.210
Po prostu nie dba o rozszerzenie pliku, ale cokolwiek

01:23.210 --> 01:25.260
znajdzie w pliku, traktuje jako

01:25.260 --> 01:27.420
zwykły JavaScript, a ten tutaj nie

01:27.420 --> 01:31.370
używa żadnych funkcji TypeScript, więc działa.

01:31.370 --> 01:34.340
To się zmienia, jeśli dodamy tu różne treści.

01:34.340 --> 01:36.400
Powiedzmy zamiast tego mamy zmienną

01:36.400 --> 01:37.370
wiek, która jest liczbą,

01:37.370 --> 01:40.080
a następnie tutaj ustawiam to na 30, a następnie

01:40.080 --> 01:42.250
konsolę. zaloguj się wiek tutaj.

01:42.250 --> 01:44.840
To oczywiście jest prawidłowy kod TypeScript.

01:44.840 --> 01:46.790
Ale jeśli spróbujemy wykonać to za pomocą węzła,

01:46.790 --> 01:48.370
zobaczysz, że otrzymamy błąd.

01:48.370 --> 01:52.450
Tak więc node nie jest w stanie parsować i kompilować TypeScript, po prostu

01:52.450 --> 01:54.210
traktuje każdy plik, który wykonujesz

01:54.210 --> 01:56.960
za jego pomocą jako JavaScript.

01:56.960 --> 01:59.030
A jeśli nie używasz żadnych funkcji TypeScript

01:59.030 --> 02:01.100
w pliku, tak wtedy działa.

02:01.100 --> 02:02.950
Ale jeśli to zrobisz, to nie będzie działać.

02:02.950 --> 02:04.920
Zawsze trzeba najpierw skompilować

02:04.920 --> 02:06.550
plik do JavaScript, aby następnie

02:06.550 --> 02:08.960
wykonać plik JavaScript, który ma w sobie tylko

02:08.960 --> 02:11.350
poprawny kod JavaScript.

02:11.350 --> 02:13.030
To naprawdę ważne, by to zrozumieć.

02:13.030 --> 02:15.890
Node nie wykonuje języka TypeScript.

02:15.890 --> 02:20.710
Teraz możesz zainstalować pakiet, ts-node, który w końcu daje ci kompilator

02:20.710 --> 02:24.230
TypeScript, połączony z executorem node, można powiedzieć,

02:24.230 --> 02:27.880
tak, że możesz zainstalować narzędzie globalnie, którego

02:27.880 --> 02:30.320
możesz użyć do uruchomienia plików TypeScript

02:30.320 --> 02:34.170
właśnie w ten sposób.

02:34.170 --> 02:35.210
Ale za kulisami będzie

02:35.210 --> 02:37.620
wtedy po prostu robić kompilację dla ciebie

02:37.620 --> 02:39.440
i wykonywać kod kompilacji.

02:39.440 --> 02:42.610
Więc w zasadzie łączy tsc i krok węzła

02:42.610 --> 02:43.890
w jeden krok.

02:43.890 --> 02:46.060
Tak więc, jest to pakiet, którego możesz użyć,

02:46.060 --> 02:49.150
ale chociaż może to być miłe dla rozwoju, dla produkcji, dla naprawdę

02:49.150 --> 02:52.330
serwowania plików na jakimś serwerze internetowym, na jakimś

02:52.330 --> 02:54.850
hostingu, to prawdopodobnie nie jest to idealne

02:54.850 --> 02:56.950
rozwiązanie, ponieważ posiadanie tego dodatkowego

02:56.950 --> 02:59.910
kroku kompilacji za każdym razem, gdy twój kod jest wykonywany,

02:59.910 --> 03:02.160
po prostu dodaje trochę dodatkowego narzutu,

03:02.160 --> 03:12.090
który jest w porządku podczas rozwoju, ale który prawdopodobnie nie chcesz, gdy twój kod jest gotowy do produkcji i naprawdę chcesz go gdzieś serwować.

03:12.090 --> 03:13.260
Dlatego w tym module nie będziemy

03:13.260 --> 03:15.950
używać ts-node i nie będziemy próbować wykonywać żadnych

03:15.950 --> 03:18.180
plików TypeScript za pomocą node.

03:18.180 --> 03:21.570
Zamiast tego pokażę ci konfigurację, której możemy użyć do zbudowania

03:21.570 --> 03:24.520
ekspresowej aplikacji internetowej lub rest API węzła tutaj,

03:24.520 --> 03:26.150
przy użyciu tylko TypeScript i kompilatora

03:26.150 --> 03:31.343
TypeScript oraz waniliowego węzła.

03:31.343 --> 03:31.343
słoiki.
