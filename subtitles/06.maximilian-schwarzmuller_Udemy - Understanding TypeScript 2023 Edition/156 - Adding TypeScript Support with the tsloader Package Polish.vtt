WEBVTT

00:02.290 --> 00:03.910
Instruktor: Aby więc powiedzieć Webpackowi,

00:03.910 --> 00:06.710
co ma robić z plikami TypeScript, musimy dodać nowy wpis do obiektu

00:06.710 --> 00:08.830
konfiguracyjnego tutaj.

00:08.830 --> 00:11.510
I to jest właśnie właściwość modułu.

00:11.510 --> 00:14.020
Moduł pobiera również obiekt JavaScript, aby następnie

00:14.020 --> 00:15.470
go skonfigurować.

00:15.470 --> 00:17.440
Moduł w końcu jest po prostu plikiem, więc tutaj

00:17.440 --> 00:20.520
mówimy Webpackowi, jak ma pracować z plikami, które znajdzie, tak jak

00:20.520 --> 00:22.940
w przypadku aplikacji. ts, a następnie, gdy

00:22.940 --> 00:25.520
zrozumie ten plik, jak poradzić sobie z wszystkimi

00:25.520 --> 00:27.290
importami w pliku.

00:27.290 --> 00:29.800
Jak więc Webpack powinien radzić sobie z tymi plikami?

00:29.800 --> 00:33.640
Cóż, mówimy Webpackowi, dodając tutaj tablicę reguł, ponieważ możesz ustawić

00:33.640 --> 00:35.430
wiele reguł, które powinny być stosowane

00:35.430 --> 00:37.300
do wszystkich plików.

00:37.300 --> 00:40.690
Tutaj potrzebujemy tylko jednego, ale w bardziej złożonych projektach,

00:40.690 --> 00:44.030
gdzie chcesz również użyć Webpacka do obsługi plików CSS, lub obrazów,

00:44.030 --> 00:46.140
lub czegokolwiek takiego, możesz dodać

00:46.140 --> 00:49.220
więcej reguł dla różnych typów plików.

00:49.220 --> 00:51.500
I jak wspomniano wcześniej, oficjalne docs są świetnym

00:51.500 --> 00:53.840
miejscem, aby dowiedzieć się więcej o loaderach,

00:53.840 --> 00:55.730
które w końcu używasz, aby nauczyć Webpacka

00:55.730 --> 00:57.980
więcej o różnych plikach i dowiedzieć się więcej

00:57.980 --> 00:59.720
o Webpacku w ogóle.

00:59.720 --> 01:02.560
Więc tutaj dodamy taki loader właściwie.

01:02.560 --> 01:06.110
Loader to po prostu pakiet, który mówi Webpackowi, jak radzić sobie

01:06.110 --> 01:07.780
z określonymi plikami, i oczywiście

01:07.780 --> 01:09.960
tutaj mamy ts loader, który pomaga nam powiedzieć

01:09.960 --> 01:11.520
Webpackowi, jak radzić sobie

01:11.520 --> 01:13.690
z plikami TypeScript.

01:13.690 --> 01:16.850
Dodajemy więc regułę, która jest po prostu obiektem JavaScript,

01:16.850 --> 01:19.720
gdzie przede wszystkim dodajemy właściwość testową.

01:19.720 --> 01:22.950
To opisuje test, który Webpack wykona na dowolnym pliku,

01:22.950 --> 01:26.510
który znajdzie, aby dowiedzieć się, czy ta reguła tutaj ma zastosowanie

01:26.510 --> 01:28.550
do tego pliku, czy nie.

01:28.550 --> 01:31.080
A testem jest tutaj wyrażenie regularne.

01:31.080 --> 01:33.610
I tam chcę powiedzieć Webpackowi, że każdy

01:33.610 --> 01:36.950
plik, który kończy się . ts powinny być używane lub powinny

01:36.950 --> 01:38.913
być obsługiwane przez tę regułę.

01:39.860 --> 01:42.940
Wyrażenie regularne, które sprawdza rozszerzenie pliku może użyć tutaj

01:42.940 --> 01:46.260
odwrotnego ukośnika, a następnie . a potem znak

01:46.260 --> 01:47.550
dolara.

01:47.550 --> 01:50.840
To jest nasze wyrażenie regularne, które mówi Webpackowi, że chcesz

01:50.840 --> 01:54.593
sprawdzić pliki kończące się na . ts.

01:55.560 --> 01:58.810
Następnie musisz również określić, co Webpack powinien zrobić

01:58.810 --> 02:02.590
z tymi plikami, a robisz to za pomocą słowa kluczowego use tutaj.

02:02.590 --> 02:05.290
I tam określasz loader, którego Webpack powinien

02:05.290 --> 02:07.590
użyć, w moim przypadku ts-loader.

02:07.590 --> 02:10.600
Mówimy więc Webpackowi, że każdy plik TypeScript, który znajdzie,

02:10.600 --> 02:12.720
powinien być obsługiwany przez loader TypeScript,

02:12.720 --> 02:16.010
który z kolei wie, co zrobić z takim plikiem.

02:16.010 --> 02:17.680
Ts-loader automatycznie

02:17.680 --> 02:20.330
pobierze tsconfig. json, więc nie musimy

02:20.330 --> 02:23.430
podawać tutaj żadnej dodatkowej konfiguracji.

02:23.430 --> 02:26.050
Tylko jedna konfiguracja, która nigdy nie

02:26.050 --> 02:29.910
boli, wykluczyć moduły węzłów jako wyrażenie regularne, aby

02:29.910 --> 02:33.773
Webpack również nie próbował zaglądać do modułów węzłów.

02:35.130 --> 02:38.400
Dzięki temu musimy dodać tutaj jedną dodatkową konfigurację

02:38.400 --> 02:42.800
po konfiguracji modułu, a jest nią klucz resolve.

02:42.800 --> 02:47.800
Tam mówimy Webpackowi, jakie rozszerzenia plików dodaje do znalezionych

02:47.820 --> 02:49.750
importów.

02:49.750 --> 02:52.440
Powiedziałem, że Webpack będzie dodawał rozszerzenia samodzielnie,

02:52.440 --> 02:56.160
a domyślnie będzie szukał . pliki js.

02:56.160 --> 02:59.220
Teraz tutaj chcemy, aby Webpack szukał . ts, a następnie dla tutaj

02:59.220 --> 03:01.280
w resolve, możemy dodać właściwość

03:01.280 --> 03:05.390
extensions, ustawioną jako równą tablicy, i powiedzieć Webpack,

03:05.390 --> 03:08.390
że powinien szukać . ts, jak również

03:08.390 --> 03:10.640
pliki . pliki js.

03:10.640 --> 03:13.360
Więc teraz Webpack będzie zasadniczo szukał takich

03:13.360 --> 03:16.900
plików, a następnie wiązał wszystkie pliki, które mają te rozszerzenia,

03:16.900 --> 03:18.723
które importujesz razem.

03:19.760 --> 03:22.770
I to jest nasz setup prawie skończony na chwilę, nasz plik

03:22.770 --> 03:24.690
konfiguracyjny prawie skończony na

03:24.690 --> 03:26.150
chwilę przynajmniej.

03:26.150 --> 03:28.730
Z tym powinniśmy przejść do tsconfig

03:28.730 --> 03:33.070
i tam upewnić się, że ustawiliśmy sourceMap na true.

03:33.070 --> 03:35.210
Pomoże nam to w debugowaniu naszego kodu,

03:35.210 --> 03:37.130
a Webpack również to wspiera.

03:37.130 --> 03:39.850
Tam teraz po prostu też musimy dodać wpis,

03:39.850 --> 03:41.340
może tutaj poniżej output,

03:41.340 --> 03:43.710
a to jest klucz devtool.

03:43.710 --> 03:47.210
I tam wartością powinno być inline-source-map

03:47.210 --> 03:48.510
jako string.

03:48.510 --> 03:51.620
To następnie mówi Webpackowi, że będą już wygenerowane

03:51.620 --> 03:53.700
mapy źródłowe, które powinien wyodrębnić

03:53.700 --> 03:57.210
i w zasadzie podłączyć poprawnie do bundle'a, który generuje,

03:57.210 --> 04:00.170
tak że chociaż otrzymujemy taki bundle, nadal mamy

04:00.170 --> 04:03.603
świetne doświadczenie deweloperskie.

04:05.830 --> 04:08.360
Teraz dzięki temu możemy użyć Webpacka, a pytanie

04:08.360 --> 04:09.823
brzmi jak go użyć?

04:11.000 --> 04:14.720
Prostym sposobem na jego wykorzystanie jest przejście do pakietu. json, i tam dodajmy

04:14.720 --> 04:16.650
skrypt.

04:16.650 --> 04:18.440
Na przykład budować.

04:18.440 --> 04:19.810
Możesz nadać mu dowolną nazwę,

04:19.810 --> 04:21.620
którą chcesz tutaj w sekcji skryptów.

04:21.620 --> 04:23.930
A tam po prostu uruchomić Webpacka,

04:23.930 --> 04:26.453
czyli wpisać webpack tak.

04:27.560 --> 04:29.880
Przejdźmy teraz również do folderu dist,

04:29.880 --> 04:32.993
a na koniec usuńmy wszystko, co się tam znajduje, i

04:34.000 --> 04:36.870
z tym zapisem uruchommy teraz npm run build i zobaczmy,

04:36.870 --> 04:38.663
czy to działa.

04:39.970 --> 04:43.000
I nie udaje się...

04:45.440 --> 04:47.800
Tak, po prostu dostałem literówkę,

04:47.800 --> 04:51.440
która nie powinna być devtools, ale devtool tutaj.

04:51.440 --> 04:53.830
Więc zmień to na devtool w pliku konfiguracyjnym,

04:53.830 --> 04:56.143
a teraz powtórzmy npm run build.

04:59.500 --> 05:02.620
I dzięki temu możesz zignorować ostrzeżenie, które tu dostajesz.

05:02.620 --> 05:04.230
Zobaczysz, że w pliku

05:04.230 --> 05:06.410
dist masz spięty plik js.

05:06.410 --> 05:08.150
I to, co tam widzisz, też

05:08.150 --> 05:09.960
już jest dość nieczytelnym

05:09.960 --> 05:14.060
kodem, bo mamy tu właściwie tę minifikację w akcji.

05:14.060 --> 05:18.680
Więc to właściwie już jest ten zoptymalizowany kod również.

05:18.680 --> 05:21.410
Teraz, zanim zobaczymy, jak możemy również pracować z

05:21.410 --> 05:23.490
różnymi konfiguracjami tutaj, faktycznie

05:23.490 --> 05:26.120
przejdźmy do indeksu. plik html, i dostosować

05:26.120 --> 05:27.510
nasz import tutaj i wiązkę

05:27.510 --> 05:30.350
punktów. js, a na razie, ponieważ

05:30.350 --> 05:32.220
nie używamy jeszcze Webpack

05:32.220 --> 05:35.140
Dev Server, uruchommy npm start, aby przywołać

05:35.140 --> 05:38.480
ten indeks. plik html ponownie.

05:38.480 --> 05:40.510
A jeśli teraz przeładujesz

05:40.510 --> 05:44.890
tę stronę, zobaczysz, że to działa!

05:44.890 --> 05:46.610
Jeśli wpiszemy coś tutaj,

05:46.610 --> 05:49.230
nasz projekt działa tak, jak powinien, i

05:49.230 --> 05:52.030
importuje plik js w pakiecie tutaj, więc tylko

05:52.030 --> 05:56.200
jeden plik zamiast tych wszystkich pojedynczych plików.

05:56.200 --> 05:59.020
A to już jest wzmocnienie.

05:59.020 --> 06:01.640
Tutaj mamy już spięty kod, który pozwala

06:01.640 --> 06:05.410
uniknąć tych wszystkich niepotrzebnych żądań htp.

06:05.410 --> 06:07.690
A jeśli przy okazji przejdziesz do zakładki sources

06:07.690 --> 06:09.420
i będziesz chciał debugować swój kod,

06:09.420 --> 06:11.250
to znajdziesz ten folder Webpack, a w

06:11.250 --> 06:12.770
nim folder source i tam możesz przejść

06:12.770 --> 06:15.300
do swoich plików TypeScript.

06:15.300 --> 06:19.090
I na przykład tutaj, na project-input, możesz również ustawić

06:19.090 --> 06:22.110
punkt przerwania tutaj na gatherUserInput, a

06:22.110 --> 06:24.970
jeśli teraz naciśniesz przycisk, to pauzuje

06:24.970 --> 06:26.190
tam i możesz debugować

06:26.190 --> 06:27.680
swój kod.

06:27.680 --> 06:29.650
I właśnie do tego dochodzą mapy źródłowe,

06:29.650 --> 06:31.200
które naprawdę pomagają nam się

06:31.200 --> 06:34.050
rozwijać i które ułatwiają nam życie jako deweloperowi.

06:34.050 --> 06:37.520
Otrzymaliśmy ten zoptymalizowany kod, ale dzięki mapom źródłowym

06:37.520 --> 06:40.750
możemy tutaj debugować nasz oryginalny kod TypeScript.

06:40.750 --> 06:43.260
Więc mamy już całkiem niesamowitą konfigurację,

06:43.260 --> 06:46.280
która daje nam wiele optymalizacji już teraz,

06:46.280 --> 06:48.440
teraz zakończmy to i upewnij się,

06:48.440 --> 06:52.050
że faktycznie mamy Webpack Dev Server włączony, a następnie

06:52.050 --> 06:54.440
faktycznie mamy dwa przepływy pracy,

06:54.440 --> 06:58.443
jeden dla produkcji i jeden dla rozwoju.
