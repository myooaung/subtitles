WEBVTT

00:02.450 --> 00:04.900
Kursleiter: Was tun Sie nun, wenn Sie eine Bibliothek

00:04.900 --> 00:07.090
haben, in der Sie keine Typen installieren

00:07.090 --> 00:10.470
können, wie wir es z. B. für Lodash getan haben?

00:10.470 --> 00:14.440
Für Lodash haben wir glücklicherweise ein solches Typenpaket, und wie

00:14.440 --> 00:15.880
ich bereits erwähnt habe,

00:15.880 --> 00:18.870
gibt es das für die meisten Bibliotheken von Drittanbietern,

00:18.870 --> 00:21.210
aber nicht unbedingt für alle.

00:21.210 --> 00:25.320
Oder was, wenn Sie einen anderen JavaScript-Code haben, sagen wir

00:25.320 --> 00:27.320
in Ihrem Index. html-Datei haben

00:27.320 --> 00:29.800
Sie einen anderen Skriptcode, der

00:29.800 --> 00:34.800
stare ausführt, wo Sie eine globale Variable setzen.

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET' Etwas in dieser Art,

00:38.450 --> 00:40.770
bei dem man am Ende weiß, dass es

00:40.770 --> 00:43.180
weltweit verfügbar sein wird.

00:43.180 --> 00:46.240
Wie Sie wissen, werden solche auf diese Weise hinzugefügten

00:46.240 --> 00:48.600
Variablen dem globalen Fensterobjekt hinzugefügt,

00:48.600 --> 00:50.210
und Sie möchten sie in Ihrem TypeScript-Code

00:50.210 --> 00:52.670
verwenden.

00:52.670 --> 00:53.503
Wenn ich zum Beispiel

00:53.503 --> 00:57.770
eine Konsole verwenden möchte. log(GLOBAL) wie hier, erhalte

00:57.770 --> 00:59.990
ich einen Fehler in meiner IDE.

00:59.990 --> 01:04.299
Und wenn ich tsc -w ausführe, um die Kompilierung zu starten, erhalte

01:04.299 --> 01:06.340
ich auch hier einen Fehler.

01:06.340 --> 01:09.470
Er mag also dieses globale Ding nicht, obwohl

01:09.470 --> 01:11.530
wir wissen, dass es funktionieren

01:11.530 --> 01:15.630
wird, weil unser Index. html-Datei definiert diese globale Variable.

01:15.630 --> 01:18.010
Und da wir dieses Skript aufgeschoben haben,

01:18.010 --> 01:19.493
wird dieses Skript nach diesem

01:19.493 --> 01:22.170
Skript dort unten ausgeführt.

01:22.170 --> 01:23.780
In solchen Fällen steht Ihnen

01:23.780 --> 01:26.460
in TypeScript eine andere Syntax zur Verfügung, nämlich

01:26.460 --> 01:29.460
der Befehl declare, den Sie verwenden können.

01:29.460 --> 01:32.110
Sie können bestimmte Variablen zum Beispiel

01:32.110 --> 01:34.150
in TypeScript deklarieren.

01:34.150 --> 01:36.730
Sie können sagen: declare var GLOBAL und TypeScript

01:36.730 --> 01:38.640
mitteilen, dass dies zum Beispiel eine

01:38.640 --> 01:42.050
Zeichenkette ist, oder dass dies irgendetwas ist.

01:42.050 --> 01:43.687
Dies sagt TypeScript im Grunde:

01:43.687 --> 01:45.910
"Keine Sorge, es wird existieren", und

01:45.910 --> 01:47.823
wenn wir dies speichern, und ich

01:49.090 --> 01:52.580
diesen Compiler verlasse und stattdessen Webpack verwende,

01:52.580 --> 01:55.740
sehen wir diese Ausgabe auf unserer Seite, weil es technisch

01:55.740 --> 01:59.060
funktioniert, und mit declare var sagen wir TypeScript

01:59.060 --> 02:02.270
auch, dass dies existiert.

02:02.270 --> 02:04.420
Jetzt werde ich diesen dmidecode hier entfernen,

02:04.420 --> 02:06.770
aber es ist wichtig, sich dieses Schlüsselwort,

02:06.770 --> 02:08.830
diesen Befehl zu merken.

02:08.830 --> 02:12.160
Es ermöglicht Ihnen, TypeScript-Features oder Variablen zu deklarieren,

02:12.160 --> 02:14.590
von denen Sie wissen, dass sie existieren, oder TypeScript

02:14.590 --> 02:17.210
über Pakete und globale Variablen im Allgemeinen zu informieren,

02:17.210 --> 02:18.670
die Typescript nicht kennen kann,

02:18.670 --> 02:20.150
von denen Sie als Entwickler aber

02:20.150 --> 02:23.373
wissen, dass sie vorhanden sein werden.
