WEBVTT

00:02.280 --> 00:03.780
Instructor: Vamos a profundizar

00:03.780 --> 00:06.450
en los tipos principales que soporta TypeScript.

00:06.450 --> 00:09.800
El siguiente tipo interesante es el de los objetos.

00:09.800 --> 00:13.100
Ahora, usted sabe que los objetos en JavaScript, se ven así.

00:13.100 --> 00:14.690
Tienes llaves y luego tienes pares

00:14.690 --> 00:16.350
clave-valor allí y tales valores

00:16.350 --> 00:20.460
también serían tratados como tipos de objetos en TypeScript, por lo que cualquier

00:20.460 --> 00:23.620
objeto de JavaScript es de tipo objeto.

00:23.620 --> 00:28.410
Aunque ya digo que hay versiones más específicas de los objetos en TypeScript

00:28.410 --> 00:30.030
para que puedas decir que esto

00:30.030 --> 00:32.514
no es un objeto cualquiera, esto es un objeto

00:32.514 --> 00:35.108
que tiene que tener estas propiedades o que

00:35.108 --> 00:37.260
tiene que estar basado en tal o cual

00:37.260 --> 00:39.490
función constructora.

00:39.490 --> 00:41.322
Pero lo conseguiremos paso a paso.

00:41.322 --> 00:45.110
Para sumergirse en los objetos, en primer lugar voy a cambiar el nombre de la aplicación. ts aquí y voy a cambiar el

00:45.110 --> 00:49.770
nombre de esto a lo básico. aquí.

00:49.770 --> 00:52.058
Y añade una nueva aplicación. ts, que sustituirá

00:52.058 --> 00:55.400
a la antigua aplicación. js una vez que lo compilemos,

00:55.400 --> 00:58.600
donde ahora podemos sumergirnos en los objetos.

00:58.600 --> 01:01.110
Y comencemos creando un objeto básico aquí,

01:01.110 --> 01:03.902
digamos una persona con llaves aquí.

01:03.902 --> 01:05.870
Y le damos un nombre a esto.

01:05.870 --> 01:08.230
Aquí voy a ir con Maximiliano porque

01:08.230 --> 01:10.700
es mi nombre y una edad de 30 años.

01:10.700 --> 01:14.930
Ahora, por supuesto, podemos consolarnos. log persona aquí y si lo

01:14.930 --> 01:18.375
hacemos, y compilamos esto sin sorpresa,

01:18.375 --> 01:23.010
deberíamos ver ese objeto que se imprime aquí en la

01:23.010 --> 01:24.536
consola.

01:24.536 --> 01:27.284
Ahora, lo que también podemos hacer en

01:27.284 --> 01:31.690
JavaScript es tratar de acceder, digamos, al apodo, una propiedad

01:31.690 --> 01:33.970
que no existe aquí.

01:33.970 --> 01:37.320
Ahora ves inmediatamente que TypeScript no está muy contento

01:37.320 --> 01:39.820
con eso, y por lo tanto mi IDE me lo dice.

01:39.820 --> 01:42.302
Me dice que el apodo de la propiedad

01:42.302 --> 01:44.050
no existe en ese tipo.

01:44.050 --> 01:47.642
Así que si guardamos eso y trato de compilarlo, efectivamente

01:47.642 --> 01:49.907
obtenemos ese mismo error ahí abajo.

01:49.907 --> 01:52.210
Al compilador de TypeScript no le gusta

01:52.210 --> 01:54.401
esto y me dice que no tenemos ninguna propiedad

01:54.401 --> 01:56.430
de apodo en este objeto.

01:56.430 --> 01:59.813
Descubre que no tenemos esta propiedad de apodo porque si pasamos

01:59.813 --> 02:02.936
el ratón por encima de persona que infiere, podemos ver que

02:02.936 --> 02:05.710
hay dos puntos después de persona, así que después del

02:05.710 --> 02:07.970
nombre de la variable o constante.

02:07.970 --> 02:11.030
Se deduce que este es el tipo de datos que se almacena

02:11.030 --> 02:12.110
allí.

02:12.110 --> 02:14.181
Ahora bien, eso no es sólo un objeto, como puedes comprobar.

02:14.181 --> 02:16.349
Es un objeto concreto.

02:16.349 --> 02:18.920
Es un objeto con una clave de nombre, donde luego

02:18.920 --> 02:21.430
el tipo, a su vez, tiene que ser una cadena.

02:21.430 --> 02:24.700
Y la clave de edad, donde el tipo tiene que ser número.

02:24.700 --> 02:27.116
Y en realidad, esto puede ser confuso aquí.

02:27.116 --> 02:31.100
Esto, aquí, obviamente parece un objeto de JavaScript.

02:31.100 --> 02:33.980
Relleno de llaves, pares de valores clave.

02:33.980 --> 02:36.020
Bien, la primera cosa importante que hay que ver

02:36.020 --> 02:38.520
aquí es que tenemos un punto y coma después de cada línea.

02:38.520 --> 02:40.580
No tenemos eso en un objeto de JavaScript.

02:40.580 --> 02:41.750
Aquí tenemos una coma.

02:41.750 --> 02:44.160
Y efectivamente, aquí no se trata de un objeto JavaScript

02:44.160 --> 02:45.940
que se crea en algún lugar.

02:45.940 --> 02:50.600
Este es el tipo de objeto inferido por TypeScript y los tipos de objeto

02:50.600 --> 02:53.914
se escriben casi como objetos, pero por supuesto

02:53.914 --> 02:57.106
no tenemos pares clave-valor allí, sino pares

02:57.106 --> 02:59.239
clave-tipo.

02:59.239 --> 03:02.840
Los tipos de objeto están ahí para describir, bueno, el tipo

03:02.840 --> 03:06.064
de objeto que se está utilizando en algún lugar.

03:06.064 --> 03:07.653
Podríamos ser más genéricos.

03:07.653 --> 03:10.420
Aquí podría asignar explícitamente

03:10.420 --> 03:13.640
un tipo a la constante de objeto.

03:13.640 --> 03:16.100
Object es uno de los tipos incorporados, al

03:16.100 --> 03:17.460
igual que number y string,

03:17.460 --> 03:21.030
y ahora si paso por encima de esto vemos personas de tipo object

03:21.030 --> 03:24.000
y ahora TypeScript realmente sólo se preocupa por el

03:24.000 --> 03:26.430
hecho de que este es un tipo object.

03:26.430 --> 03:28.423
Ahora bien, aún así, si compilamos

03:28.423 --> 03:32.808
esto obtenemos ese error, porque TypeScript sigue analizando nuestro

03:32.808 --> 03:35.490
código y ve que intentamos acceder a algo que

03:35.490 --> 03:36.666
no existe allí, pero

03:36.666 --> 03:39.770
es importante entender que todo comienza con este

03:39.770 --> 03:42.140
tipo de objeto más genérico.

03:42.140 --> 03:44.660
Pero a menudo se quiere ser más específico que eso.

03:44.660 --> 03:47.623
No sólo quieres trabajar con ese tipo de objeto genérico.

03:47.623 --> 03:50.284
Realmente quieres tener todo el apoyo.

03:50.284 --> 03:53.550
Por ejemplo, ahora mismo, si añado un punto aquí y

03:53.550 --> 03:55.570
echo un vistazo a mi autocompletado,

03:55.570 --> 03:58.080
mi IDE no me ayuda en absoluto.

03:58.080 --> 04:00.303
La razón es que todo lo que le decimos

04:00.303 --> 04:04.230
al IDE es que tenemos un valor aquí, en persona, que es

04:04.230 --> 04:05.860
de tipo objeto.

04:05.860 --> 04:08.300
De hecho, ahora también obtenemos un error

04:08.300 --> 04:10.210
si intento acceder al nombre.

04:10.210 --> 04:12.270
El nombre existe aquí, ¿verdad?

04:12.270 --> 04:14.120
Pero lo que le decimos a TypeScript aquí

04:14.120 --> 04:16.601
es que simplemente tenemos un objeto donde no le damos

04:16.601 --> 04:18.889
ninguna de nuestra información a TypeScript.

04:18.889 --> 04:21.739
Así que en realidad, TypeScript no soporta

04:21.739 --> 04:24.750
ningún tipo de propiedad porque no le decimos

04:24.750 --> 04:26.210
nada sobre el objeto.

04:26.210 --> 04:28.050
Así que deberíamos ser más específicos.

04:28.050 --> 04:32.000
Y somos más específicos al establecer un tipo de objeto específico.

04:32.000 --> 04:34.795
Lo que TypeScript también infiere automáticamente.

04:34.795 --> 04:38.548
Lo hacemos añadiendo llaves aquí después de los

04:38.548 --> 04:43.370
dos puntos, después de nuestra const o nombre de la variable.

04:43.370 --> 04:46.213
Así que aquí no se crea un nuevo objeto JavaScript.

04:46.213 --> 04:48.460
En realidad, esto se eliminará del código

04:48.460 --> 04:50.310
JavaScript compilado.

04:50.310 --> 04:52.643
En cambio, esto es sólo la notación de TypeScript

04:52.643 --> 04:55.855
de un tipo de objeto especializado, por así decirlo.

04:55.855 --> 04:59.422
Así que de un tipo de objeto donde proporcionamos alguna información

04:59.422 --> 05:01.434
sobre la estructura del objeto.

05:01.434 --> 05:04.520
Ahora, al asignar sólo un par de llaves vacías como tipo,

05:04.520 --> 05:07.440
esencialmente hacemos lo mismo que con object.

05:07.440 --> 05:09.765
Le decimos a TypeScript que se trata de un objeto.

05:09.765 --> 05:12.740
Sin embargo, ahora podemos ser más específicos.

05:12.740 --> 05:16.550
Aquí podemos añadir entradas de valor de clave, pero

05:16.550 --> 05:19.694
no de valor de clave, sino de tipo de clave.

05:19.694 --> 05:22.800
Así que aquí podríamos decir que el objeto que

05:22.800 --> 05:25.091
debe ser almacenado en persona debe

05:25.091 --> 05:28.197
tener una propiedad nombre y el valor de esa propiedad

05:28.197 --> 05:31.140
nombre debe ser de tipo cadena.

05:31.140 --> 05:33.795
Así que aquí describimos el tipo de valor que

05:33.795 --> 05:36.440
finalmente se almacenará en el nombre.

05:36.440 --> 05:39.320
Ahora, por cierto, ves que estoy recibiendo un error aquí.

05:39.320 --> 05:41.090
Porque lo que le estoy diciendo a

05:41.090 --> 05:43.489
TypeScript ahora es que mi persona debe tener

05:43.489 --> 05:45.900
un objeto con exactamente un par clave-valor,

05:45.900 --> 05:48.626
donde la clave es nombre y el valor de esa clave es cadena,

05:48.626 --> 05:52.730
pero no asignamos un objeto con dos pares clave-valor.

05:52.730 --> 05:55.020
El nombre, que contiene una cadena, está

05:55.020 --> 05:58.500
bien, pero la edad, que contiene un número, no estaría bien.

05:58.500 --> 06:01.140
Así que aquí tenemos que ajustar esto añadiendo un punto

06:01.140 --> 06:03.520
y coma y luego añadiendo otro par clave-valor aquí

06:03.520 --> 06:06.300
donde decimos que la edad debe ser de tipo número.

06:06.300 --> 06:09.670
Así que no 30 aquí, que en realidad sería apoyado en TypeScript, que

06:09.670 --> 06:12.673
lo restringimos a un número específico, pero luego nos encontramos

06:12.673 --> 06:15.600
con problemas tan pronto como cambiamos eso.

06:15.600 --> 06:19.060
En cambio, aquí sólo quiero decir que la edad debe ser algún número.

06:19.060 --> 06:22.360
Y ahora básicamente estamos asignando explícitamente

06:22.360 --> 06:24.870
el mismo TypeScript inferido antes.

06:24.870 --> 06:26.900
Como has aprendido, eso no es una buena práctica,

06:26.900 --> 06:28.570
pero para entender los tipos de objetos

06:28.570 --> 06:29.940
quería hacerlo aquí.

06:29.940 --> 06:32.315
Aun así, esto es algo que puedes hacer.

06:32.315 --> 06:37.010
Es mejor dejar que TypeScript infiera esto

06:37.010 --> 06:40.440
como lo hicimos antes, así.

06:40.440 --> 06:42.351
Ahora, sólo para mostrar algo

06:42.351 --> 06:45.450
interesante, si vuelvo a este código sub-óptimo,

06:45.450 --> 06:47.970
donde asignamos explícitamente un tipo

06:47.970 --> 06:49.920
TypeScript sería capaz de inferir,

06:49.920 --> 06:54.920
si compilamos este código, por supuesto que funciona.

06:55.180 --> 06:56.900
Podemos acceder a la propiedad name, pero si luego

06:56.900 --> 06:59.077
echamos un vistazo a app. js vemos que esta asignación

06:59.077 --> 07:01.220
de tipo se elimina aquí.

07:01.220 --> 07:03.417
Y eso, por supuesto, debería ser algo esperado.

07:03.417 --> 07:06.290
Como he mencionado, los tipos y las asignaciones de tipos

07:06.290 --> 07:08.120
no forman parte de JavaScript.

07:08.120 --> 07:09.460
Son sólo de TypeScript.

07:09.460 --> 07:10.800
Sólo quería mostrar esto de nuevo

07:10.800 --> 07:12.840
para dejar muy claro que esta sintaxis aquí no está

07:12.840 --> 07:15.080
creando algún objeto JavaScript, que está en algún

07:15.080 --> 07:16.485
lugar de nuestro código.

07:16.485 --> 07:21.263
Esto es sólo la representación de TypeScript de un tipo de objeto que ayuda

07:21.263 --> 07:24.570
a TypeScript a entender los objetos con los que está

07:24.570 --> 07:25.900
trabajando.

07:25.900 --> 07:29.950
La mejor sintaxis, por supuesto, es esta sintaxis, como has aprendido.
