WEBVTT

00:02.130 --> 00:02.963
Narrador: Para ello,

00:02.963 --> 00:05.260
vuelvo a nuestra configuración de proyecto ficticia,

00:05.260 --> 00:06.690
que utilizamos una y otra vez.

00:06.690 --> 00:08.260
Allí, podemos ejecutar NPM starts para

00:08.260 --> 00:10.190
que aparezca ese servidor de desarrollo.

00:10.190 --> 00:13.690
Y luego en una nueva ventana de terminal con el servidor que se ejecuta

00:13.690 --> 00:15.260
en una ventana de terminal diferente,

00:15.260 --> 00:17.419
yo ejecutando TSC dash W para iniciar mi proceso

00:17.419 --> 00:21.540
de compilación de TypeScript y mantenerlo en funcionamiento.

00:21.540 --> 00:23.470
Con esto, por supuesto, tenemos una página

00:23.470 --> 00:24.560
vacía porque no hay nada

00:24.560 --> 00:27.060
en ella, pero ahora podemos jugar en el archivo TS de

00:27.060 --> 00:29.480
la aplicación y empezar con los genéricos.

00:29.480 --> 00:32.940
Y creo que es más fácil entender los genéricos si echamos

00:32.940 --> 00:35.450
un vistazo a un tipo por defecto, que

00:35.450 --> 00:37.450
está incorporado en TypeScript

00:37.450 --> 00:39.610
con el que realmente trabajamos

00:39.610 --> 00:41.890
mucho que resulta ser un genérico

00:41.890 --> 00:44.410
y que sería un array.

00:44.410 --> 00:46.900
Digamos que tenemos un array de nombres.

00:46.900 --> 00:50.370
Digamos que Max y Manual.

00:50.370 --> 00:51.620
Así que tenemos dos nombres

00:51.620 --> 00:54.610
allí, entonces, por supuesto, el tipo de la constante

00:54.610 --> 00:57.210
del nombre es una matriz de cadenas.

00:57.210 --> 00:59.610
En realidad, podríamos pensar que

00:59.610 --> 01:02.460
se trata de dos tipos combinados.

01:02.460 --> 01:05.760
Al igual que se puede tener un objeto con diferentes propiedades donde

01:05.760 --> 01:07.700
en cada propiedad se puede estar almacenando

01:07.700 --> 01:09.310
un tipo diferente.

01:09.310 --> 01:13.750
Un array siempre es una cosa con diferentes datos en él,

01:13.750 --> 01:16.440
en este caso con cadenas en él.

01:16.440 --> 01:20.230
Así que en realidad tenemos el tipo de array, sólo un array y si

01:20.230 --> 01:22.770
quitara los nombres aquí y los cortara, verías

01:22.770 --> 01:25.010
que TypeScript inferiría que esto es

01:25.010 --> 01:29.140
un array de tipo cualquier cosa con cualquier dato allí.

01:29.140 --> 01:32.690
Efectivamente, TypeScript conoce el tipo de array.

01:32.690 --> 01:35.280
Así que podríamos decir, esto de aquí debería

01:35.280 --> 01:37.600
ser un array pero como ves si lo especifico

01:37.600 --> 01:39.900
así, obtenemos un error aunque puedo decirte

01:39.900 --> 01:43.570
que este tipo de array, así existe para TypeScript.

01:43.570 --> 01:45.870
Pero vemos que es un tipo genérico

01:45.870 --> 01:48.710
y que requiere un argumento de tipo.

01:48.710 --> 01:50.950
Y ahora, eso es algo que no hemos visto antes.

01:50.950 --> 01:53.870
Nunca habíamos oído hablar de los tipos genéricos.

01:53.870 --> 01:55.750
Ahora, esta extraña notación aquí,

01:55.750 --> 01:58.120
siempre que veas algo como esto en TypeScript,

01:58.120 --> 02:01.060
estás tratando con un tipo genérico.

02:01.060 --> 02:05.610
Un tipo genérico es un tipo que está conectado con algún

02:05.610 --> 02:08.890
otro tipo y es realmente flexible con respecto

02:08.890 --> 02:12.920
a qué tipo exacto es ese otro tipo.

02:12.920 --> 02:14.130
¿Suena difícil?

02:14.130 --> 02:16.820
Volvamos al ejemplo de la matriz.

02:16.820 --> 02:19.380
Sabemos que queremos almacenar un array aquí.

02:19.380 --> 02:22.250
Así que un array en sí mismo podría ser un tipo, es

02:22.250 --> 02:24.610
una lista de datos que por sí sola ya constituye

02:24.610 --> 02:26.730
un tipo, podríamos decir.

02:26.730 --> 02:29.770
Al igual que un objeto es un tipo en sí mismo, aunque

02:29.770 --> 02:32.200
no sepamos aún qué datos irán dentro.

02:32.200 --> 02:34.490
Así que un array es un tipo por sí mismo.

02:34.490 --> 02:38.230
Pero un array, por supuesto, almacena datos de un tipo

02:38.230 --> 02:39.860
determinado en él.

02:39.860 --> 02:42.690
Ahora bien, al tipo de matriz en sí no le importa qué

02:42.690 --> 02:44.810
tipo de datos se almacenan allí.

02:44.810 --> 02:48.150
Al tipo array no le importa si está almacenando una

02:48.150 --> 02:50.540
lista de cadenas, de números, de objetos

02:50.540 --> 02:52.430
o de datos mixtos.

02:52.430 --> 02:54.500
Al tipo de array realmente no le importa,

02:54.500 --> 02:58.640
pero sí le importa obtener al menos algo de información, incluso si le

02:58.640 --> 03:01.200
dices no sé, al establecer esto como tipo de

03:01.200 --> 03:02.960
array cualquiera.

03:02.960 --> 03:05.870
Es mejor que no especificar nada.

03:05.870 --> 03:08.330
Ahora, esta es una manera de definir un tipo de matriz,

03:08.330 --> 03:10.070
el tipo de datos que se almacena allí

03:10.070 --> 03:11.430
y luego corchetes.

03:11.430 --> 03:14.620
La otra forma, que crearía exactamente el mismo tipo sería usar

03:14.620 --> 03:15.830
esa cosa de Array y luego

03:15.830 --> 03:17.630
estos paréntesis angulares.

03:17.630 --> 03:20.030
Y ahora entre estos paréntesis angulares,

03:20.030 --> 03:22.340
se especifica el tipo de datos, que debe

03:22.340 --> 03:24.140
ir en la matriz.

03:24.140 --> 03:26.330
Por ejemplo una cadena,

03:26.330 --> 03:31.330
y esto aquí es 100% lo mismo que definir este tipo aquí.

03:32.030 --> 03:34.950
Por supuesto, aquí también podrías usar un tipo de unión

03:34.950 --> 03:37.730
para decir, este array almacena cadenas o números

03:37.730 --> 03:40.850
o usar cualquiera si no quieres decir nada sobre el tipo o

03:40.850 --> 03:42.970
como acabamos de tener cadena.

03:42.970 --> 03:44.330
Así que este es un tipo genérico,

03:44.330 --> 03:46.900
un tipo genérico incorporado en TypeScript.

03:46.900 --> 03:50.440
Un tipo que está conectado a otro tipo, donde queremos

03:50.440 --> 03:53.980
saber cuál es nuestro tipo que es así a TypeScript

03:53.980 --> 03:56.810
nos puede dar mejor soporte.

03:56.810 --> 03:57.910
Porque aquí, por ejemplo,

03:57.910 --> 04:01.510
si sabemos que lo que almacenamos ahí será una cadena, bueno,

04:01.510 --> 04:04.380
entonces sabemos que siempre que acceda a un elemento

04:04.380 --> 04:06.143
de ese array, puedo hacer cosas

04:07.100 --> 04:09.410
de cadena con él.

04:09.410 --> 04:12.260
Puedo llamar a todos estos métodos de cadena,

04:12.260 --> 04:15.280
por ejemplo, y TypeScript no se quejará porque

04:15.280 --> 04:18.220
sabe que este array contiene cadenas.

04:18.220 --> 04:20.410
Esa es la idea de los tipos genéricos.

04:20.410 --> 04:23.230
Un determinado tipo, en este caso el tipo de matriz,

04:23.230 --> 04:26.780
podría simplemente funcionar mejor o funcionar del todo si

04:26.780 --> 04:29.040
se proporciona una información adicional

04:29.040 --> 04:33.430
sobre un tipo de datos que se proporciona en este tipo de matriz y, por supuesto,

04:33.430 --> 04:36.590
el tipo de matriz es sólo un ejemplo.

04:36.590 --> 04:39.840
Otro tipo genérico que está incorporado en TypeScript

04:39.840 --> 04:42.130
es el tipo promesa.

04:42.130 --> 04:45.470
Las promesas son una característica de JavaScript, ¿verdad?

04:45.470 --> 04:46.970
No es una característica de TypeScript.

04:46.970 --> 04:49.437
Puedes crear promesas en JavaScript y en caso

04:49.437 --> 04:52.000
de que no estés seguro de lo que son las promesas,

04:52.000 --> 04:53.870
te adjunto el enlace.

04:53.870 --> 04:58.150
Se puede crear una promesa utilizando new promise.

04:58.150 --> 05:00.640
Una vez más, se trata de una función constructora,

05:00.640 --> 05:03.270
una clase incorporada en JavaScript y la función

05:03.270 --> 05:05.870
constructora de la promesa toma un argumento que

05:05.870 --> 05:07.640
a su vez es una función que a su vez obtendrá

05:07.640 --> 05:10.650
dos argumentos eventualmente una función de resolver y

05:10.650 --> 05:12.580
otra de rechazar.

05:12.580 --> 05:15.180
Ahora estos serán pasados automáticamente

05:15.180 --> 05:17.790
a nosotros por JavaScript en el navegador.

05:17.790 --> 05:22.400
Y luego en una promesa podemos por ejemplo establecer un temporizador y luego

05:22.400 --> 05:25.640
en esa función de callback de ese temporizador, podríamos

05:25.640 --> 05:28.140
resolver la promesa externa.

05:28.140 --> 05:30.140
Así que aquí en esta función de devolución

05:30.140 --> 05:34.823
de llamada, podríamos llamar a la resolución y decir que esto está hecho.

05:36.500 --> 05:41.020
Ahora, cuando lo hacemos, esta promesa crea un nuevo objeto, un objeto promesa

05:41.020 --> 05:43.860
que se almacena en la constante promesa.

05:43.860 --> 05:47.700
Ahora, esta constante de la promesa en realidad tiene un tipo específico.

05:47.700 --> 05:49.470
Es de tipo promesa y, de nuevo,

05:49.470 --> 05:51.130
ves estos paréntesis angulares

05:51.130 --> 05:56.130
porque esta promesa eventualmente se resolverá a algo.

05:56.480 --> 05:58.930
Ahora aquí dice desconocido porque TypeScript

05:58.930 --> 06:01.470
no es totalmente capaz de entender que realmente

06:01.470 --> 06:03.880
vamos a resolver a una cadena aquí.

06:03.880 --> 06:05.870
Pero, por lo tanto, podríamos decir que esto

06:05.870 --> 06:08.120
es una promesa, que eventualmente producirá una

06:08.120 --> 06:11.450
cadena y lo hacemos utilizando de nuevo nuestro tipo genérico.

06:11.450 --> 06:14.030
El tipo principal es promise, pero una

06:14.030 --> 06:16.120
promise al igual que un array, funciona

06:16.120 --> 06:18.380
junto con otros tipos.

06:18.380 --> 06:22.000
Un array utiliza otros tipos porque sus datos almacenados en él, datos

06:22.000 --> 06:23.350
de ciertos tipos, y la promesa

06:23.350 --> 06:25.640
trabaja junto con otros tipos porque eventualmente

06:25.640 --> 06:31.140
devuelve algunos datos de algún tipo y en este caso eso es una promesa que eventualmente devuelve una

06:31.140 --> 06:32.940
cadena.

06:32.940 --> 06:34.470
Ahora bien, ¿por qué es útil?

06:34.470 --> 06:37.550
¿Por qué es útil esta información adicional del tipo?

06:37.550 --> 06:40.350
Bueno, si solo tuviéramos un tipo de promesa aquí y eso

06:40.350 --> 06:41.430
no estaría permitido

06:41.430 --> 06:44.770
pero si dijéramos promesa de tipo cualquier cosa, que sería básicamente

06:44.770 --> 06:46.870
lo mismo que de tipos no sabría tipos genéricos

06:46.870 --> 06:48.390
si no tendría ninguna información

06:48.390 --> 06:51.280
sobre lo que obtenemos de vuelta.

06:51.280 --> 06:53.340
Bueno, entonces en esta promesa, por supuesto, podemos

06:53.340 --> 06:55.750
utilizarlos como podemos hacer una todas las promesas y,

06:55.750 --> 06:57.770
finalmente, vamos a obtener algunos datos, pero

06:57.770 --> 06:59.770
no sabemos nada acerca de esos datos.

06:59.770 --> 07:02.500
No puedo llamar a un método de cadena en él, por ejemplo.

07:02.500 --> 07:04.850
Bueno puedo porque es cualquiera en este caso pero

07:04.850 --> 07:07.590
no consigo ningún soporte particular de TypeScript.

07:07.590 --> 07:11.313
También podría probar cosas en él, que definitivamente no funcionarán.

07:12.170 --> 07:13.800
Por ejemplo, si le damos la vuelta

07:13.800 --> 07:15.220
a esto y devolvemos un número aquí,

07:15.220 --> 07:17.320
todavía podría llamar a un método de cadena

07:17.320 --> 07:19.390
aquí porque TypeScript no tiene información

07:19.390 --> 07:22.640
sobre los datos que esta promesa acabará produciendo.

07:22.640 --> 07:24.070
Ahora, con los tipos genéricos,

07:24.070 --> 07:26.280
damos esa información a TypeScript.

07:26.280 --> 07:28.160
Podemos decirle a TypeScript que

07:28.160 --> 07:30.240
esta promesa acabará produciendo una

07:30.240 --> 07:32.840
cadena o, en este caso, un número y entonces TypeScript

07:32.840 --> 07:34.940
puede avisarnos aquí.

07:34.940 --> 07:37.390
Si trato de guardar esto, nos dará un error

07:37.390 --> 07:40.870
porque sabe que esta promesa eventualmente producirá

07:40.870 --> 07:44.092
un número y puede llamar a la división en eso.

07:44.092 --> 07:48.010
Así, conseguimos una mejor seguridad de tipos con los tipos genéricos.

07:48.010 --> 07:50.510
Así que eres muy flexible en cuanto a lo que haces

07:50.510 --> 07:52.720
con esa información de tipo genérico.

07:52.720 --> 07:54.830
Un array sabe qué datos almacena, una

07:54.830 --> 07:57.140
promesa sabe qué datos devuelve.

07:57.140 --> 07:59.840
Si construyes tus propias clases o funciones genéricas, podrías

07:59.840 --> 08:02.140
hacer algo totalmente diferente a lo que hay.

08:02.140 --> 08:04.570
Pero al final los tipos genéricos te ayudan

08:04.570 --> 08:06.970
a obtener información de tipo adicional

08:06.970 --> 08:10.640
si tienes una clase más compleja o una función más compleja que

08:10.640 --> 08:14.240
hace algo con los datos que entran, de una manera en la que no le

08:14.240 --> 08:16.020
importa realmente que los datos

08:16.020 --> 08:18.700
sean de un tipo en particular, sino que quieres

08:18.700 --> 08:21.500
almacenar la información de tipo de los datos entrantes

08:21.500 --> 08:24.850
para obtener un mejor soporte de TypeScript cuando trabajes

08:24.850 --> 08:27.590
con tu tipo genérico.

08:27.590 --> 08:30.450
Así que cuando trabajas con esa promesa, o matriz de datos,

08:30.450 --> 08:33.270
esa es básicamente la idea de los genéricos.

08:33.270 --> 08:36.300
Así que esto de aquí, todos fueron construidos en genéricos.

08:36.300 --> 08:37.460
Comentémoslo.

08:37.460 --> 08:40.450
Construyamos ahora nuestra propia palabra de tipo genérico.

08:40.450 --> 08:42.653
Utilicemos nuestros propios tipos genéricos.
