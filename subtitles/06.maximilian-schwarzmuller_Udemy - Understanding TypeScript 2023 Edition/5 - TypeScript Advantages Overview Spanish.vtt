WEBVTT

00:02.290 --> 00:04.300
Narrador: Así que has visto TypeScript

00:04.300 --> 00:06.700
en acción y ofrece grandes ventajas.

00:06.700 --> 00:10.570
Hace que escribir un código limpio sea realmente más fácil.

00:10.570 --> 00:14.060
TypeScript añade tipos y datos super importantes.

00:14.060 --> 00:16.810
Con Types tenemos que ser mucho más explícitos

00:16.810 --> 00:20.970
sobre cómo funcionan las cosas y podemos evitar muchos errores inaceptables

00:20.970 --> 00:24.460
e innecesarios utilizando Types.

00:24.460 --> 00:27.640
Además de eso, también podemos utilizar IDEs modernos

00:27.640 --> 00:31.070
que han construido en los tipos de apoyo que puede recoger

00:31.070 --> 00:33.130
en estos tipos y nos dan una mejor

00:33.130 --> 00:36.940
finalización automática y construido en los errores que muestran

00:36.940 --> 00:39.570
incluso antes de compilar el código, ya que

00:39.570 --> 00:43.050
también entienden TypeScript.

00:43.050 --> 00:46.870
Pero además de los Types y de las enormes ventajas que obtenemos solo con

00:46.870 --> 00:49.660
el uso de Types también obtenemos otras características

00:49.660 --> 00:51.410
añadidas por TypeScript.

00:51.410 --> 00:55.170
Podemos utilizar ciertas características de JavaScript de próxima generación

00:55.170 --> 00:58.340
que se pueden escribir y utilizar en nuestros archivos TypeScript

00:58.340 --> 01:01.890
y luego se compilarán hasta el código JavaScript para solucionar problemas

01:01.890 --> 01:05.630
que incluso funcionan en los navegadores más antiguos.

01:05.630 --> 01:08.170
Si conoces Bevel, que es una herramienta que

01:08.170 --> 01:11.120
nos permite hacer eso con Vanilla JavaScript también,

01:11.120 --> 01:14.680
es un poco así, sólo que ya incorporado a TypeScript.

01:14.680 --> 01:18.350
Podemos utilizar funciones modernas de JavaScript y seguir produciendo

01:18.350 --> 01:21.773
y enviando código que funcione también en navegadores antiguos.

01:22.610 --> 01:25.210
TypeScript también añade ciertas características

01:25.210 --> 01:26.930
que sólo TypeScript entiende,

01:26.930 --> 01:29.070
como Interfaces y Genéricos.

01:29.070 --> 01:32.560
Estas son características que compilan a JavaScript pero

01:32.560 --> 01:35.360
no tienen que hacerlo porque son características

01:35.360 --> 01:39.610
que nos ayudan durante el desarrollo que nos dan errores más claros y nos

01:39.610 --> 01:42.200
ayudan a evitar aún más errores.

01:42.200 --> 01:45.660
Así que incluso añade más características en ese frente

01:45.660 --> 01:47.950
además de los Tipos que ya conocimos.

01:47.950 --> 01:50.900
También nos da ciertas características de Meta-programación

01:50.900 --> 01:53.700
como los Decoradores sobre los cuales tengo un módulo

01:53.700 --> 01:55.850
completo en este curso donde entenderás

01:55.850 --> 01:59.520
qué son exactamente los Decoradores, por qué son tan meta, y por qué

01:59.520 --> 02:01.790
son increíbles.

02:01.790 --> 02:04.230
TypeScript alls es altamente configurable.

02:04.230 --> 02:06.390
No lo hemos configurado hasta ahora

02:06.390 --> 02:09.350
pero tengo un módulo entero en el curso donde hablamos

02:09.350 --> 02:12.510
sólo del compilador y cómo configurarlo.

02:12.510 --> 02:15.700
Y puedes ajustarlo a tus necesidades para

02:15.700 --> 02:18.960
hacerlo más estricto o más flojo y asegurarte

02:18.960 --> 02:23.310
de que se comporta exactamente como tú quieres.

02:23.310 --> 02:26.790
Y con las herramientas modernas con los IDEs modernos se consigue

02:26.790 --> 02:30.610
incluso soporte en proyectos que no son TypeScript.

02:30.610 --> 02:33.700
El IDE que acabas de ver, visual studio code, que incluso

02:33.700 --> 02:37.740
te da un mejor soporte en los archivos de JavaScript plano porque es capaz

02:37.740 --> 02:41.010
de utilizar algunas características de TypeScript bajo

02:41.010 --> 02:44.710
el capó sin que explícitamente se utilice TypeScript.

02:44.710 --> 02:47.640
Así que esa es una ganancia gratuita que obtienes

02:47.640 --> 02:49.810
al estar al tanto de TypeScript y al

02:49.810 --> 02:52.020
usar herramientas modernas.

02:52.020 --> 02:54.830
Así que hay muchas razones para usar TypeScript y es probablemente

02:54.830 --> 02:57.460
la razón por la que tomaste este curso.

02:57.460 --> 03:00.360
En este curso vamos a aprenderlo paso a paso y conoceremos

03:00.360 --> 03:03.663
todas las increíbles funciones que añade.
