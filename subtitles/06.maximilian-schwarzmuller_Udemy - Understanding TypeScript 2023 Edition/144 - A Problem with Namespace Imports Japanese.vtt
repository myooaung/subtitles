WEBVTT

00:02.250 --> 00:04.380
-ところで､ autobindデコレーターにimportを追加していないのに､

00:04.380 --> 00:11.840
ProjectListでautobindが動作していることを不思議に思うかもしれません｡

00:11.840 --> 00:15.860
まあ､ だってアプリで｡  ts､ これだけの輸入品があるんです｡ 

00:15.860 --> 00:18.610
なぜなら､ ここでは技術的にProjectInput

00:18.610 --> 00:26.253
ProjectListがオンになっているものだけを使用しているからです｡

00:27.260 --> 00:30.680
コンパイルエラーは発生しませんが､

00:30.680 --> 00:35.010
ランタイムエラーが発生します｡

00:35.010 --> 00:40.150
だから､ 安全のために､ ファイルで使うものはすべてそのファイルにインポートしておく必要があるんだ｡

00:40.150 --> 00:42.890
技術的には､ appですべてをインポートすることができます｡  また､ autobind デコレータを使用する

00:42.890 --> 00:45.260
ProjectInput や ProjectList

00:45.260 --> 00:51.750
などは後発なので､ autobind デコレータが必要なときに利用できるようになります｡

00:51.750 --> 00:54.320
しかし､ これは一番クリーンな方法とは言えません｡ 

00:54.320 --> 01:02.360
その代わりに､ あるファイルが必要とするものすべてをそのファイルの内部からインポートするのであれば､

01:02.360 --> 01:09.570
そのファイルが必要とするときに利用可能であることを保証しなければなりません｡

01:09.570 --> 01:11.390
では､ ここでの解決策は？

01:11.390 --> 01:14.530
では､ ファイルに戻って､ 必要なものをインポートしてみましょう｡

01:14.530 --> 01:16.630
例えば､ ProjectInputはベースとなるコンポーネントだけでなく､

01:16.630 --> 01:21.270
バリデーションロジックやオートバインドも必要です｡

01:21.270 --> 01:27.110
デコレーターから､ オートバインド・デコレーター､ おっと､ このように､

01:27.110 --> 01:35.366
そして､ utilから､ バリデーションです｡

01:35.366 --> 01:35.366
tsファイルです｡ 

01:35.366 --> 01:39.770
それがここのファイルには絶対に必要なんです｡ 

01:39.770 --> 01:42.210
ここにプロジェクトの状態も必要です｡ 

01:42.210 --> 01:46.810
そこで､ /state/project-stateをインポートすることにします｡  ツ｡ 

01:46.810 --> 01:50.690
そして､ これらのインポートを取得してProjectItemに移動し､ そこでプロジェクトの状態と検証を必要としないので､

01:50.690 --> 01:54.320
それを削除することができます｡

01:54.320 --> 01:56.560
しかし､ autobind デコレータは必要です｡ 

01:56.560 --> 02:00.580
また､ ドラッグ可能なインターフェースとプロジェクトモデルも必要です｡ 

02:00.580 --> 02:08.257
また､ このモデルフォルダに移動して､ プロジェクトをインポートします｡

02:08.257 --> 02:08.257
ツとドラッグドロップで ツ｡ 

02:10.820 --> 02:17.520
ProjectListでは､ バリデーションは必要ありませんが､ ProjectStateとautobindは必要です｡

02:17.520 --> 02:25.710
そして､ modelsフォルダからさらに､ プロジェクトが必要です｡

02:25.710 --> 02:25.710
tsファイルとドラッグドロップする｡  tsファイルです｡ 

02:25.710 --> 02:30.170
これで保存してコンパイルするだけで､ ご覧のようにすべてが再び動作するようになりました｡

02:30.170 --> 02:35.520
ランタイムエラーが発生しなくなったのは､ ファイルにすべてのインポートが戻ってきたためです｡

02:35.520 --> 02:37.380
つまり､ これが適切な方法で､ すべてのファイルが必要なものを指定し､

02:37.380 --> 02:45.940
コードを分割しても最終的には1つのファイルになるので､ 両方の長所を得ることができる､ と言えるでしょう｡

02:45.940 --> 02:49.963
しかし､ これは必ずしもベストな方法とは言えません｡
