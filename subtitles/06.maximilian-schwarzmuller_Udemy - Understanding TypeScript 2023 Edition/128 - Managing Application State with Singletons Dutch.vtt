WEBVTT

00:02.310 --> 00:04.580
Dus projecten van A naar B krijgen

00:04.580 --> 00:06.000
is nu ons doel.

00:06.000 --> 00:09.750
Om precies te zijn, wanneer gebruikers een nieuw project aanmaken,

00:09.750 --> 00:11.850
wanneer ze alle gegevens invoeren, willen

00:11.850 --> 00:15.790
we uiteindelijk een nieuw projectobject aanmaken, dat we vervolgens uitvoeren

00:15.790 --> 00:18.830
in onze projectlijstklasse als onderdeel van de ongeordende

00:18.830 --> 00:21.990
lijst, die daar wordt weergegeven.

00:21.990 --> 00:23.299
Dat is het idee.

00:23.299 --> 00:26.350
Een triviale manier om dit te implementeren zou natuurlijk

00:26.350 --> 00:28.890
kunnen zijn om gewoon naar de plaats te gaan waar

00:28.890 --> 00:30.830
de gebruiker input invoert en dan hier

00:30.830 --> 00:34.513
document te gebruiken. getElementbyId, om die ongeordende

00:36.100 --> 00:39.410
lijst te bereiken die we hebben gemaakt als onderdeel

00:39.410 --> 00:42.270
van onze projectlijstklasse, die deze ID hier

00:42.270 --> 00:44.470
heeft, dus lijst met actieve projecten

00:44.470 --> 00:49.110
of lijst met voltooide projecten, en dan gewoon daarheen te gaan en er een

00:49.110 --> 00:52.760
nieuw item aan toe te voegen.

00:52.760 --> 00:54.770
Maar dat is niet echt het idee van

00:54.770 --> 00:57.250
hoe ik deze applicatie wil bouwen.

00:57.250 --> 00:59.800
Ik wil het op een objectgeoriënteerde manier

00:59.800 --> 01:02.530
bouwen, waarbij we verschillende klassen

01:02.530 --> 01:06.500
hebben die samenwerken op een reactieve manier, waarbij we een

01:06.500 --> 01:08.200
nieuwe klasse maken en dan

01:08.200 --> 01:10.550
gebeurt er iets in de dom.

01:10.550 --> 01:12.730
Waar we een methode van een klasse aanroepen

01:12.730 --> 01:14.650
en deze klasse dan iets doet.

01:14.650 --> 01:16.980
Zo wil ik dat deze dingen werken.

01:16.980 --> 01:19.560
Nu kunnen we natuurlijk een methode toevoegen

01:19.560 --> 01:21.550
aan de projectlijstklasse, laten

01:21.550 --> 01:24.120
we zeggen dat ik projectmethode toevoeg.

01:24.120 --> 01:25.890
Die methode zou dan moeten worden aangeroepen

01:25.890 --> 01:28.200
wanneer een project moet worden toegevoegd en gerenderd,

01:28.200 --> 01:30.700
en we zouden een manier moeten vinden om die aan te roepen

01:30.700 --> 01:32.940
vanuit de projectinvoer.

01:32.940 --> 01:34.820
Om dat te doen, kunnen we ervoor zorgen

01:34.820 --> 01:37.940
dat we hier verwijzingen naar onze lijst doorgeven aan de

01:37.940 --> 01:40.330
constructor van de projectinvoer, zodat we

01:40.330 --> 01:42.810
vanuit de projectinvoerklasse met deze concrete

01:42.810 --> 01:45.290
instanties kunnen werken en de methoden op deze

01:45.290 --> 01:47.570
instanties kunnen aanroepen.

01:47.570 --> 01:50.260
Want dat is wat we zouden moeten doen.

01:50.260 --> 01:52.050
Dat zou een haalbare manier

01:52.050 --> 01:54.400
zijn, zeker een benadering die je kunt

01:54.400 --> 01:58.680
volgen, maar ik wil een nog abstractere benadering volgen.

01:58.680 --> 02:01.393
Een nog interessantere aanpak volgens mij.

02:02.330 --> 02:06.210
Ik zal een klasse bouwen die de toestand van onze applicatie

02:06.210 --> 02:08.110
beheert, dus een klasse die

02:08.110 --> 02:11.187
onze projecten beheert, of welke toestand we

02:11.187 --> 02:13.840
ook moeten beheren in de applicatie, waarmee

02:13.840 --> 02:15.530
we ook luisteraars kunnen

02:15.530 --> 02:18.660
instellen in de verschillende delen van de app

02:18.660 --> 02:21.670
die geïnteresseerd zijn.

02:21.670 --> 02:24.540
Dit is een patroon dat je misschien bekend in de oren

02:24.540 --> 02:27.050
klinkt als je hebt gewerkt met frameworks als

02:27.050 --> 02:29.820
Angular of bibliotheken als React en Redux.

02:29.820 --> 02:33.423
Dat je een globaal state management object hebt en alleen

02:33.423 --> 02:35.443
luistert naar veranderingen.

02:35.443 --> 02:37.480
Dat is wat ik hier wil implementeren.

02:37.480 --> 02:39.620
Het is natuurlijk maar één manier om dit te doen,

02:39.620 --> 02:41.660
maar ik vind het een heel interessante manier,

02:41.660 --> 02:43.680
en daarom wil ik het laten zien.

02:43.680 --> 02:45.908
Dus bovenaan het app ts bestand

02:45.908 --> 02:50.350
voeg ik een project state management klasse toe.

02:50.350 --> 02:53.347
En ik zal het gewoon projectState noemen;

02:54.820 --> 02:57.210
lijkt me een verstandige naam.

02:57.210 --> 02:59.900
Nu is het idee hier dat we in deze klasse

02:59.900 --> 03:03.760
een eigenschap of een veld hebben, een privé-veld,

03:03.760 --> 03:06.570
projecten, dat een array van projecten

03:06.570 --> 03:08.800
bevat.

03:08.800 --> 03:12.000
Nu moeten we ook definiëren hoe een project eruit moet zien, dat doen

03:12.000 --> 03:13.360
we in de volgende stap, voor

03:13.360 --> 03:15.830
nu zeg ik gewoon dat het een array is van wat dan ook,

03:15.830 --> 03:18.710
wat natuurlijk niet perfect is, niet definitief, maar ik wil

03:18.710 --> 03:22.240
me voor nu concentreren op die oplossing voor toestandsbeheer.

03:22.240 --> 03:25.653
Dus we hebben deze lijst met projecten hier.

03:26.530 --> 03:30.163
Mijn doel is dat ik een item aan de lijst toevoeg

03:30.163 --> 03:35.163
wanneer we op de knop Project toevoegen klikken.

03:36.940 --> 03:39.970
Om dat te laten werken, voeg ik in de project state

03:39.970 --> 03:43.460
class een add project method toe, een publieke.

03:43.460 --> 03:45.560
En daar verwacht ik de titel, die

03:45.560 --> 03:47.060
een string moet zijn, de

03:47.060 --> 03:49.390
beschrijving, die een string moet

03:49.390 --> 03:53.250
zijn, en ook het aantal mensen dat aan het project werkt,

03:53.250 --> 03:55.220
wat een getal moet zijn.

03:55.220 --> 03:58.450
Dan kunnen we hier een nieuw project maken met de object

03:58.450 --> 04:00.950
letterlijke notatie voor nu.

04:00.950 --> 04:03.950
We moeten voor elk project een ID hebben, zodat we het uniek kunnen

04:03.950 --> 04:06.050
identificeren, en ik zal hier een ID genereren

04:06.050 --> 04:12.100
door wiskunde te gebruiken.

04:12.100 --> 04:12.100
random(). toString.

04:12.100 --> 04:14.960
Nu is een willekeurig getal niet echt een unieke ID,

04:14.960 --> 04:17.880
je kunt hetzelfde getal meer dan eens genereren, maar

04:17.880 --> 04:19.300
dat is erg onwaarschijnlijk,

04:19.300 --> 04:22.570
en voor onze demodoeleinden is het voldoende.

04:22.570 --> 04:25.170
Daarnaast moet elk project een titel hebben

04:25.170 --> 04:28.370
en daar zal dat titelargument worden opgeslagen.

04:28.370 --> 04:30.913
Hetzelfde voor beschrijving, waar ik

04:31.960 --> 04:33.830
beschrijving zal opslaan.

04:33.830 --> 04:37.693
En mijn volk waar ik het aantal mensen zal opslaan.

04:39.700 --> 04:43.440
Dit is voorlopig het project dat ik wil opslaan.

04:43.440 --> 04:45.000
Dus zodra we het hier hebben gemaakt,

04:45.000 --> 04:48.020
kunnen we de projecten array bereiken in projects state,

04:48.020 --> 04:48.853
die privé is, maar

04:48.853 --> 04:50.320
vanuit de klasse, wat deze methode

04:50.320 --> 04:51.530
is, hebben we er natuurlijk

04:51.530 --> 04:53.340
toegang toe.

04:53.340 --> 04:55.900
En daar wil ik dit nieuwe project toevoegen

04:55.900 --> 05:00.380
en daarvoor kunnen we gewoon ons nieuwe project erheen duwen.

05:00.380 --> 05:03.350
Nu kunnen we een project toevoegen.

05:03.350 --> 05:07.027
Maar we hebben natuurlijk nog een paar onduidelijke vragen.

05:07.027 --> 05:12.027
Hoe roepen we add project op vanuit onze klasse daar beneden, waar we de gebruikersinvoer

05:12.750 --> 05:15.990
verzamelen vanuit de submit handler?

05:15.990 --> 05:17.940
Hoe noemen we toevoegen project?

05:17.940 --> 05:21.730
En hoe geven we die bijgewerkte lijst van projecten

05:21.730 --> 05:25.690
telkens door aan de projectlijstklasse?

05:25.690 --> 05:29.230
Dit zijn de twee problemen waar we op dit moment mee te maken hebben.

05:29.230 --> 05:31.840
Wat ik hier ga doen, is een

05:31.840 --> 05:36.499
instantie van Project State creëren.

05:36.499 --> 05:39.720
Een globale instantie, die we uit het hele bestand kunnen gebruiken,

05:39.720 --> 05:42.760
en ik doe het meteen nadat we die klasse hebben gemaakt.

05:42.760 --> 05:47.050
Dus hier heb ik mijn project status constante waar

05:47.050 --> 05:50.370
ik de project status zo installeer.

05:50.370 --> 05:52.400
Op deze manier is dit een globale constante

05:52.400 --> 05:54.620
die overal in het bestand kan worden gebruikt,

05:54.620 --> 05:58.000
dus praten met die klasse is nu super eenvoudig, je hoeft alleen

05:58.000 --> 06:01.660
deze globale constante hier te gebruiken.

06:01.660 --> 06:04.850
We kunnen zelfs een eigenschap gebruiken waar we allemaal over geleerd

06:04.850 --> 06:06.430
hebben, de private constructor,

06:06.430 --> 06:09.170
om te garanderen dat dit een singleton klasse is.

06:09.170 --> 06:11.950
We kunnen hier een private constructor maken en dan

06:11.950 --> 06:14.300
hebben we hier nog een private property, instance,

06:14.300 --> 06:16.670
die van het type project state is, dus van hetzelfde

06:16.670 --> 06:18.933
type als deze klasse.

06:20.640 --> 06:24.360
En dan voegen we hier een get instance methode toe, een statische

06:24.360 --> 06:26.390
methode eigenlijk, waar we controleren

06:26.390 --> 06:30.050
of deze . instantie is een ding, en daarvoor

06:30.050 --> 06:31.020
moet dit eigenlijk

06:31.020 --> 06:33.970
ook een statische instantie zijn, een statische eigenschap,

06:33.970 --> 06:35.800
bedoel ik.

06:35.800 --> 06:37.100
Als dit een ding is, geven

06:37.100 --> 06:39.550
we dit terug. instantie, dus geven

06:39.550 --> 06:42.230
we de enkele instantie die we kregen terug,

06:42.230 --> 06:44.590
anders maken we een nieuwe aan.

06:44.590 --> 06:45.423
Dus anders,

06:45.423 --> 06:50.423
dit. zal gelijk zijn aan de nieuwe projectstatus.

06:50.450 --> 06:52.963
En dan sturen we dit terug. bijvoorbeeld.

06:54.740 --> 07:00.903
Daarmee kunnen we een instantie oproepen, zoals deze, ProjectState.

07:00.903 --> 07:00.903
getInstance,

07:02.650 --> 07:04.390
en we werken gegarandeerd altijd

07:04.390 --> 07:06.560
met exact hetzelfde object en hebben

07:06.560 --> 07:11.700
altijd maar één object van dat type in de hele toepassing.

07:11.700 --> 07:12.840
Dat is het idee hier,

07:12.840 --> 07:16.480
want ik wil maar één state management object hebben voor ons

07:16.480 --> 07:17.503
project.

07:17.503 --> 07:19.570
Dus dat is de status van dit project met

07:19.570 --> 07:21.563
deze singleton constructor nu.

07:22.730 --> 07:25.890
Dus nu hebben we onze project status constant.

07:25.890 --> 07:28.040
Laten we dus naar de projectinvoerklasse gaan

07:28.040 --> 07:30.270
waar we de gebruikersinvoer verzamelen.

07:30.270 --> 07:33.950
Hier kunnen we nu projectState oproepen. addProject en stuurt de titel,

07:33.950 --> 07:37.830
de beschrijving en de mensen door, die we uiteindelijk terugkrijgen

07:37.830 --> 07:40.960
van het verzamelen van gebruikersinput.

07:40.960 --> 07:43.920
Dus nu moet dit project gecreëerd worden.

07:43.920 --> 07:47.140
Nu moeten we alleen nog de informatie dat we een nieuw

07:47.140 --> 07:51.530
project hebben naar onze projectlijstklasse sturen, want dat is

07:51.530 --> 07:53.840
de klasse die verantwoordelijk is

07:53.840 --> 07:56.500
voor de uitvoer naar het scherm.

07:56.500 --> 07:59.450
En daarvoor wil ik uiteindelijk een abonnementspatroon

07:59.450 --> 08:00.350
opzetten.

08:00.350 --> 08:03.020
Waar we binnen onze projectstaat een lijst

08:03.020 --> 08:05.730
met listeners beheren, dus uiteindelijk

08:05.730 --> 08:08.690
een lijst met functies, die moeten worden aangeroepen

08:08.690 --> 08:11.600
als er iets verandert.

08:11.600 --> 08:12.433
Dus daarvoor

08:12.433 --> 08:15.830
voeg ik nog een privé-eigendom toe, luisteraars.

08:15.830 --> 08:18.810
En listeners wordt een lege array en voor

08:18.810 --> 08:22.130
nu, nogmaals, gewoon een array van alles wat

08:22.130 --> 08:25.543
we later nader zullen specificeren.

08:26.760 --> 08:31.382
Nu wil ik hier ook een methode addListener hebben

08:31.382 --> 08:35.590
waar ik een luisterfunctie krijg, dus dit moet

08:35.590 --> 08:39.150
een functie zijn aan het eind hier.

08:39.150 --> 08:41.370
En dan voeg ik dit toe aan mijn luisteraars.

08:41.370 --> 08:43.970
Dus we plaatsen de luisterfunctie

08:43.970 --> 08:46.500
hier in de luisteraars array.

08:46.500 --> 08:49.580
Wat is het idee van die luisteraars array?

08:49.580 --> 08:51.110
Het is een array van functies,

08:51.110 --> 08:53.070
van functieverwijzingen toch?

08:53.070 --> 08:55.250
Het idee is dat wanneer er iets verandert, zoals

08:55.250 --> 08:57.310
hier wanneer we een nieuw project toevoegen,

08:57.310 --> 08:59.790
we alle luisterfuncties aanroepen.

08:59.790 --> 09:03.050
Dus we lopen door alle luisteraars, van deze luisteraar,

09:03.050 --> 09:04.720
dus door alle luisteraarfuncties,

09:04.720 --> 09:07.330
en dan omdat dit functieverwijzingen zijn,

09:07.330 --> 09:11.593
kunnen we dit uitvoeren als een functie.

09:13.010 --> 09:14.630
En aan die functie geven we het

09:14.630 --> 09:18.620
ding door dat er relevant voor is, gebaseerd op de staat die we beheren,

09:18.620 --> 09:20.130
wat in dit geval, in deze klasse

09:20.130 --> 09:22.020
natuurlijk, onze projectenlijst

09:22.020 --> 09:23.280
is.

09:23.280 --> 09:27.983
Dit is de staat waar deze klasse verantwoordelijk voor is.

09:29.100 --> 09:29.933
Dus hier stuur

09:30.980 --> 09:33.050
ik dit project door en ik zal er slice

09:33.050 --> 09:35.170
op aanroepen om alleen een kopie van

09:35.170 --> 09:37.550
die matrix terug te geven en niet de oorspronkelijke

09:37.550 --> 09:39.100
matrix.

09:39.100 --> 09:41.880
Zodat het niet kan worden bewerkt vanaf de plaats

09:41.880 --> 09:44.210
waar de luisterfunctie vandaan komt.

09:44.210 --> 09:45.760
Omdat arrays en objecten referentiewaarden

09:45.760 --> 09:48.110
zijn in Javascript, dus als je de originele

09:48.110 --> 09:50.490
array zou doorgeven, zouden we die van buitenaf

09:50.490 --> 09:52.600
kunnen bewerken, en ook aan de andere

09:52.600 --> 09:54.380
kant, als we er iets in pushen vanuit

09:54.380 --> 09:57.020
deze klasse, zou het al overal elders in de app

09:57.020 --> 09:59.830
veranderen, maar die plaatsen zouden niet echt merken

09:59.830 --> 10:12.770
dat het veranderd is, dus het zou vreemde bugs kunnen introduceren als we de originele referentie doorgeven, daarom geef ik hier de gloednieuwe kopie door, een gloednieuwe array.

10:12.770 --> 10:15.390
Dus nu wordt elke luisterfunctie uitgevoerd

10:15.390 --> 10:19.400
en krijgt onze kopie, onze gloednieuwe kopie van projecten.

10:19.400 --> 10:21.380
Nu moeten we gewoon naar de plaatsen

10:21.380 --> 10:23.800
gaan waar we geïnformeerd willen worden over

10:23.800 --> 10:26.560
veranderingen, in ons geval de projectlijstklasse

10:26.560 --> 10:29.030
hier, en zo'n luisteraar instellen.

10:29.030 --> 10:32.880
Dus hier, in de constructor van de projectlijstklasse, voordat

10:32.880 --> 10:35.546
we de inhoud vastmaken en renderen, zal

10:35.546 --> 10:38.010
ik projectState bereiken en hier addListener

10:38.010 --> 10:40.110
aanroepen om in principe een luisteraarfunctie

10:40.110 --> 10:43.720
te registreren.

10:43.720 --> 10:46.150
Nu is een listener, zoals ik al zei, een functie,

10:46.150 --> 10:49.100
dus we moeten een functie doorgeven aan addListener.

10:49.100 --> 10:51.210
Want de luisteraars die we hier in de projectstaat

10:51.210 --> 10:52.610
beheren, dat is gewoon een lijst

10:52.610 --> 10:54.680
met functies, die we uiteindelijk zullen

10:54.680 --> 10:56.300
aanroepen als er iets verandert,

10:56.300 --> 10:57.773
toch?

10:58.840 --> 11:01.110
Dus moet ik hier een functie

11:01.110 --> 11:04.990
doorgeven aan mijn addListener-functie.

11:04.990 --> 11:07.520
Hier geef ik een anonieme pijlfunctie door.

11:07.520 --> 11:10.770
En die functie krijgt een lijst van projecten

11:10.770 --> 11:14.400
als hij wordt aangeroepen vanuit projectState.

11:14.400 --> 11:17.430
Dus we krijgen een lijst met projecten, we weten dat

11:17.430 --> 11:19.160
we in deze functie deze lijst

11:19.160 --> 11:21.560
met projecten kunnen gebruiken.

11:21.560 --> 11:26.046
En hier voeg ik een gloednieuw veld toe aan de projectlijst, assignedProjects

11:26.046 --> 11:28.410
misschien, dat van het type any array

11:28.410 --> 11:30.310
is, dus alles in een array, en

11:30.310 --> 11:32.357
array van willekeurige waarden,

11:32.357 --> 11:34.010
nou ja, natuurlijk zal ik

11:34.010 --> 11:37.630
dat later ook nader specificeren.

11:37.630 --> 11:39.890
Dan kunnen we hier zeggen dat dit toegewezen

11:39.890 --> 11:41.780
project gelijk is aan projecten.

11:41.780 --> 11:44.240
Dus op de projecten die we krijgen.

11:44.240 --> 11:45.870
Om die impliciete typefout

11:45.870 --> 11:47.280
kwijt te raken, moet

11:47.280 --> 11:49.900
ik duidelijk zijn dat dit een array van

11:49.900 --> 11:51.563
wat dan ook wordt.

11:52.610 --> 11:55.020
Dus nu voeg ik de projecten toe die ik krijg

11:55.020 --> 11:57.660
omdat er iets veranderd is in mijn staat.

11:57.660 --> 11:59.490
Hier aan mijn toegewezen projecten

11:59.490 --> 12:00.530
waar ik het niet toevoeg,

12:00.530 --> 12:02.350
overschrijf ik de toegewezen projecten

12:02.350 --> 12:04.170
met de nieuwe projecten.

12:04.170 --> 12:08.223
En dan is mijn idee om al deze projecten te renderen.

12:09.080 --> 12:10.883
Daarvoor kunnen we een nieuwe methode

12:11.951 --> 12:15.080
toevoegen; renderPrjects, bijvoorbeeld.

12:15.080 --> 12:16.920
Die ik van hieruit wil aanroepen,

12:16.920 --> 12:20.063
deze renderProjects, net als dit.

12:22.230 --> 12:24.120
Het eindigt uit renderProjects.

12:24.120 --> 12:27.480
Ik reik uit naar deze lijst hier, goed, we wijzen die

12:27.480 --> 12:30.150
ID toe wanneer we de inhoud renderen, wat

12:30.150 --> 12:31.290
we hier doen.

12:31.290 --> 12:34.440
Het lijkt erop dat we dit doen nadat renderProjects is aangeroepen, maar

12:34.440 --> 12:36.640
vergeet niet, dat eindigt uit een functie, die uiteindelijk

12:36.640 --> 12:38.470
pas wordt aangeroepen als er nieuwe projecten

12:38.470 --> 12:40.230
worden toegevoegd.

12:40.230 --> 12:43.510
Dus eigenlijk wordt renderContent eerst uitgevoerd.

12:43.510 --> 12:47.090
En daarom kunnen we er in renderProjects op vertrouwen

12:47.090 --> 12:49.370
dat dit ID is toegewezen aan een ongeordende

12:49.370 --> 12:53.030
lijst, dus hier kunnen we dit pakken en ons lijstelement

12:53.030 --> 12:58.030
krijgen door document. getElementbyId en dan geef ik gewoon deze

12:58.469 --> 13:00.790
ID-identifier door met het type van

13:00.790 --> 13:03.690
deze concrete projectlijstklasse.

13:03.690 --> 13:08.563
En dan ook nog met de rest van de ID die we gegenereerd hebben.

13:09.580 --> 13:11.130
En op die lijst of in die lijst

13:11.130 --> 13:14.170
wil ik alle projecten die we hebben weergeven.

13:14.170 --> 13:17.670
Dus, ik zal alle project items van deze toegewezen

13:17.670 --> 13:21.060
projecten hier doornemen.

13:21.060 --> 13:23.150
En dan wil ik voor elk item iets toevoegen aan

13:23.150 --> 13:23.983
de lijst en we zullen

13:23.983 --> 13:25.380
dit later verfijnen.

13:25.380 --> 13:29.787
Voorlopig roep ik hier alleen appendChild aan op mijn

13:30.890 --> 13:32.480
lijstelement.

13:32.480 --> 13:34.490
Overigens moeten we hier een uitroepteken

13:34.490 --> 13:36.970
toevoegen om duidelijk te maken dat dit niet nul is.

13:36.970 --> 13:41.970
We kunnen dit ook casten naar een HTML UL list element, dus naar een

13:42.000 --> 13:43.560
unordered list element

13:43.560 --> 13:45.420
want dat wordt het.

13:45.420 --> 13:47.530
En dan kunnen we het kind hier toevoegen

13:47.530 --> 13:49.740
en dat zou een gloednieuw lijstitem moeten

13:49.740 --> 13:51.980
zijn; dus hier kunnen we ons lijstitem

13:51.980 --> 13:56.160
maken met document. createElement LI.

13:56.160 --> 13:58.350
En op dat lijstitem hier, stel ik

13:58.350 --> 14:03.950
de tekstinhoud gelijk aan projectitem.

14:03.950 --> 14:03.950
titel.

14:03.950 --> 14:06.240
Elk projectonderdeel zal een project zijn

14:06.240 --> 14:09.940
zoals we het daarboven in de projectstatus aanmaken, dus het zal zo'n

14:09.940 --> 14:11.350
object zijn, en daarom zal

14:11.350 --> 14:13.100
het een titel hebben.

14:14.210 --> 14:15.940
Als we nu naar beneden gaan hebben

14:15.940 --> 14:18.880
we ons lijst item dat nu hier is toegevoegd.

14:18.880 --> 14:20.730
En daarmee zijn we er bijna, resterende

14:20.730 --> 14:22.340
fixes hier, ik stel dat veld

14:22.340 --> 14:23.740
in, maar in de constructor

14:23.740 --> 14:27.080
verwijs ik er dan nooit naar.

14:27.080 --> 14:29.090
Alleen hier in mijn listener functie,

14:29.090 --> 14:31.230
maar zoals gezegd, dit loopt niet meteen

14:31.230 --> 14:32.640
in de constructor.

14:32.640 --> 14:37.640
Dus wat ik hier ga doen is deze toegewezen projecten aanvankelijk gelijk stellen

14:38.970 --> 14:41.200
aan een lege array, zodat we allemaal

14:41.200 --> 14:44.450
tevreden zijn en dit geïnitialiseerd is.

14:44.450 --> 14:45.510
Als we dit nu opslaan,

14:45.510 --> 14:47.780
zou het zonder fouten moeten compileren.

14:47.780 --> 14:50.400
En als we nu hier iets toevoegen,

14:50.400 --> 14:51.993
werkt dit dan?

14:53.480 --> 14:56.270
We zien het inderdaad verschijnen in onze lijsten.

14:56.270 --> 14:58.270
In beide lijsten op dit moment, omdat

14:58.270 --> 15:00.847
we geen filterlogica en zo hebben.

15:00.847 --> 15:03.210
En dat kunnen we later herstellen, maar

15:03.210 --> 15:04.710
het werkt, en dat is het

15:04.710 --> 15:06.220
belangrijkste.

15:06.220 --> 15:08.390
Nu zie je echter dat we hier ook een bug hebben.

15:08.390 --> 15:10.260
Als ik een tweede element toevoeg,

15:10.260 --> 15:12.370
dupliceren we het laatste element

15:12.370 --> 15:13.880
en voegen we de nieuwe elementen

15:13.880 --> 15:15.490
toe.

15:15.490 --> 15:17.653
En dit zijn allemaal dingen die we zullen

15:17.653 --> 15:21.270
aanpakken, maar nu kunnen we er tenminste iets mee uitvoeren, laten

15:21.270 --> 15:24.450
we eens duiken in alle verbeteringen zoals duidelijker

15:24.450 --> 15:27.160
zijn over de types die we gebruiken, het vermijden

15:27.160 --> 15:29.150
van dubbele uitvoer, en nog vele andere

15:29.150 --> 15:30.733
dingen.
