WEBVTT

00:02.330 --> 00:04.870
Narrador: Hablando de tipos más genéricos,

00:04.870 --> 00:06.970
como un pequeño extra, podrías decir,

00:06.970 --> 00:11.410
quiero señalar tu dirección a un par de tipos incorporados.

00:11.410 --> 00:15.740
Typescript viene con, que utilizan tipos genéricos o que son tipos

00:15.740 --> 00:17.240
genéricos, que nos dan

00:17.240 --> 00:20.350
ciertas funcionalidades de utilidad.

00:20.350 --> 00:22.050
Así que sólo un pequeño bono aquí,

00:22.050 --> 00:22.920
y de vez en cuando

00:22.920 --> 00:25.550
estos tipos especiales pueden ser útiles.

00:25.550 --> 00:26.840
Ahora, adjunto encontrarás

00:26.840 --> 00:30.680
un enlace a la documentación completa de todos los tipos de utilidad incorporados.

00:30.680 --> 00:33.810
Aquí, sólo quiero dar algunos ejemplos.

00:33.810 --> 00:36.010
Ahora bien, al igual que todas estas cosas

00:36.010 --> 00:38.610
tipo, estos tipos sólo existen en los tipos del mundo

00:38.610 --> 00:41.300
y, por tanto, sólo antes de la compilación.

00:41.300 --> 00:43.460
Pero durante este paso de compilación,

00:43.460 --> 00:48.130
pueden darle seguridad de tipo adicional o flexibilidad extra.

00:48.130 --> 00:51.670
Por ejemplo, existe el tipo parcial incorporado.

00:51.670 --> 00:55.580
Digamos que tenemos un nuevo tipo, y la interfaz que vamos a encontrar

00:55.580 --> 00:59.493
o un tipo personalizado realmente no importa, CourseGoal.

01:00.660 --> 01:03.780
El CourseGoal tiene un título, que debe

01:03.780 --> 01:06.930
ser una cadena y digamos una descripción,

01:06.930 --> 01:09.040
que debe ser una cadena.

01:09.040 --> 01:14.040
Quizás también tengamos la propiedad completeUntil, que es una Fecha.

01:15.290 --> 01:17.961
Ahora queremos tener una función, digamos,

01:17.961 --> 01:21.500
createCourseGoal, que nos cree dicho objeto.

01:21.500 --> 01:23.380
Por supuesto, también podríamos haber creado esa clase.

01:23.380 --> 01:26.290
Pero tenemos una función de este tipo porque en esa función,

01:26.290 --> 01:28.740
podríamos estar sacando algunos datos de una

01:28.740 --> 01:30.590
base de datos, o lo que sea.

01:30.590 --> 01:32.110
Así que tenemos esta función.

01:32.110 --> 01:33.330
Y al final aquí,

01:33.330 --> 01:37.890
quiero obtener mi título, que es una cadena, podría

01:37.890 --> 01:42.320
obtener mi descripción, que es una cadena, y espero

01:42.320 --> 01:47.150
obtener mi fecha, que es una Fecha.

01:47.150 --> 01:49.680
Ahora en esa función, por supuesto, podríamos devolver un objeto,

01:49.680 --> 01:51.740
pero acabamos de establecer todas estas cosas.

01:51.740 --> 01:55.340
Así que donde ponemos title a título, description a descripción

01:55.340 --> 01:57.840
y completeUntil a fecha.

01:57.840 --> 02:00.760
Podríamos hacer todo eso y si luego definimos que

02:00.760 --> 02:03.890
esta función siempre devolverá un CourseGoal, tendríamos

02:03.890 --> 02:07.120
una función correctamente configurada.

02:07.120 --> 02:08.420
Ahora por alguna razón digamos

02:08.420 --> 02:09.530
que no lo hacemos así,

02:09.530 --> 02:11.623
no lo hacemos todo en un solo paso.

02:12.680 --> 02:13.870
En su lugar, lo que quiero

02:13.870 --> 02:17.340
hacer es, quiero empezar por crear una variable aquí, que contiene

02:17.340 --> 02:18.700
un objeto vacío.

02:18.700 --> 02:22.620
Y luego, paso a paso, quiero añadir mi título aquí.

02:22.620 --> 02:26.420
Quiero añadir mi descripción aquí.

02:26.420 --> 02:31.303
Y quiero añadir mi cita aquí.

02:33.640 --> 02:36.420
Ahora aquí estoy recibiendo errores porque por supuesto, no puedo

02:36.420 --> 02:39.170
establecer el título esto no es una propiedad de este objeto.

02:39.170 --> 02:41.930
Y mientras que esto funciona en JavaScript vainilla,

02:41.930 --> 02:45.410
TypeScript no le gusta mucho que sobre la marcha añadiendo aquí.

02:45.410 --> 02:47.810
Así que podríamos decir que esto debería ser

02:47.810 --> 02:49.300
del tipo CourseGoal aquí.

02:49.300 --> 02:51.040
Ahora, TypeScript no se queja de esto,

02:51.040 --> 02:53.640
sino del hecho de que se trata de un objeto vacío, que

02:53.640 --> 02:56.223
claramente no se ajusta a nuestro tipo aquí.

02:57.070 --> 02:58.360
Así que al final, quiero

02:58.360 --> 03:01.000
devolverlo y quiero añadir todas estas cosas

03:01.000 --> 03:04.570
paso a paso, tal vez porque tenemos la validación extra antes de

03:04.570 --> 03:07.590
cada paso, y por lo tanto uno para agregarlo así.

03:07.590 --> 03:12.390
Aquí es donde el tipo parcial puede ser útil.

03:12.390 --> 03:17.390
Podríamos decir que el CourseGoal aquí debería ser un tipo parcial, que al final,

03:17.580 --> 03:18.413
gracias a los

03:18.413 --> 03:21.600
tipos genéricos contendrá un courseGoal.

03:21.600 --> 03:24.200
Ahora lo que hace es decirle a TypeScript

03:24.200 --> 03:28.260
que, este es un objeto que al final será un courseGoal.

03:28.260 --> 03:32.090
Pero inicialmente, el tipo parcial envuelve nuestro propio tipo,

03:32.090 --> 03:36.620
y lo cambia a un tipo donde todas estas propiedades son opcionales.

03:36.620 --> 03:39.440
Eso es lo que hace parcialmente uno de estos tipos incorporados,

03:39.440 --> 03:40.670
Typescript viene con.

03:40.670 --> 03:44.270
Así que convierte esto en un tipo, que también es un tipo de objeto, donde todas las

03:44.270 --> 03:45.713
propiedades son opcionales.

03:45.713 --> 03:49.290
Por lo tanto, podemos establecer esto a un objeto vacío inicialmente,

03:49.290 --> 03:53.030
y todavía añadir todas estas cosas paso a paso.

03:53.030 --> 03:54.880
El único problema es que al final,

03:54.880 --> 03:58.130
no podemos devolver esto porque ahora sigue siendo

03:58.130 --> 04:02.130
de tipo parcial CourseGoal, y no de tipo CourseGoal.

04:02.130 --> 04:04.630
Podemos arreglar esto convirtiendo esto en courseGoal

04:04.630 --> 04:07.480
con typecasting, porque sabemos que en este momento, habremos

04:07.480 --> 04:08.990
añadido todos los datos.

04:08.990 --> 04:11.667
Así que será un curso real y no uno parcial.

04:11.667 --> 04:13.510
Y por supuesto, esto es un poco inventado.

04:13.510 --> 04:15.500
Pero podrías tener escenarios como

04:15.500 --> 04:18.220
este, donde quieres cambiar temporalmente

04:18.220 --> 04:19.650
uno de tus tipos de objetos,

04:19.650 --> 04:23.530
una de tus interfaces para que sea sólo opcional.

04:23.530 --> 04:25.540
Para asegurarse de que todas las propiedades

04:25.540 --> 04:28.170
que hay pueden ser opcionales sólo temporalmente.

04:28.170 --> 04:31.223
Y entonces el tipo parcial te permitiría hacer eso.

04:32.370 --> 04:35.920
Y nunca tipo de utilidad incorporada que tiene

04:35.920 --> 04:40.170
es el tipo de sólo lectura que todo puede ser muy útil.

04:40.170 --> 04:42.623
Digamos que tenemos un array de nombres.

04:43.460 --> 04:46.330
Y ahí dentro tengo a Max y a Sports.

04:46.330 --> 04:47.420
Ahora, correctamente TypeScript

04:47.420 --> 04:49.860
infiere que se trata de un array de cadenas.

04:49.860 --> 04:50.960
¿Qué podemos hacer ahora?

04:50.960 --> 04:52.690
Por supuesto, podemos empujar

04:53.700 --> 04:55.400
a Manu allí, y probablemente

04:55.400 --> 04:58.340
debería cambiar esto a Anna no deportes para tener

04:58.340 --> 04:59.720
un nombre allí.

04:59.720 --> 05:00.553
Así que esto funciona.

05:00.553 --> 05:01.386
Ahora digamos que, sin

05:01.386 --> 05:04.230
embargo, quiero asegurarme de que se trata de un array cerrado.

05:04.230 --> 05:06.260
No podemos añadir más aquí.

05:06.260 --> 05:07.870
Y siempre podemos añadir más

05:07.870 --> 05:11.690
aquí, pero al menos quiero que Typescript me grite si lo intento.

05:11.690 --> 05:13.730
Bueno, ahí es donde podemos usar el tipo

05:13.730 --> 05:18.730
de sólo lectura, podríamos establecer esto como un array de cadenas de sólo lectura.

05:18.930 --> 05:20.510
Con eso le decimos a TypeScript, bueno,

05:20.510 --> 05:23.030
lo que almacenamos aquí es, es un array de cadenas.

05:23.030 --> 05:25.830
Pero también es un array de cadenas, que es de sólo lectura.

05:25.830 --> 05:28.210
Así que cuando intentamos añadir algo

05:28.210 --> 05:31.600
con push, o si intentamos eliminar algo con pop, obtenemos

05:31.600 --> 05:32.760
errores, porque no

05:32.760 --> 05:34.810
se nos permite hacer estas cosas

05:34.810 --> 05:36.320
con este array.

05:36.320 --> 05:38.760
Y esto no se limita a las matrices, por cierto,

05:38.760 --> 05:41.610
también se puede utilizar sólo lectura en un objeto.

05:41.610 --> 05:43.990
Por ejemplo, para comercializar como sólo

05:43.990 --> 05:46.860
lectura, de modo que no se le permite cambiar las propiedades

05:46.860 --> 05:49.920
o añadir nuevas propiedades a este objeto.

05:49.920 --> 05:52.240
Así que esto también puede ser muy,

05:52.240 --> 05:56.510
muy útil y darle más flexibilidad o ser más preciso acerca de lo que

05:56.510 --> 05:59.490
usted está tratando de hacer en su código.

05:59.490 --> 06:01.380
Ahora, todos estos son sólo tipos de utilidad

06:01.380 --> 06:03.610
que sólo existen en el mundo de TypeScript.

06:03.610 --> 06:05.881
Así que no están compilados a nada.

06:05.881 --> 06:09.400
Pero durante la compilación, te dan un rigor extra, o comprobaciones

06:09.400 --> 06:12.410
adicionales o se saltan ciertas comprobaciones como

06:12.410 --> 06:14.800
hicimos con las parciales.

06:14.800 --> 06:17.170
Ahora tienes algo más que sólo lectura y parcial.

06:17.170 --> 06:19.730
Y como he mencionado adjunto se encuentra la documentación

06:19.730 --> 06:22.420
a una lista completa de estos tipos de utilidad.

06:22.420 --> 06:25.580
En algunos casos, pueden ser muy útiles y, por

06:25.580 --> 06:28.350
lo tanto, no quería ocultárselos.

06:28.350 --> 06:30.500
Pero en cambio, deberías conocerlas

06:30.500 --> 06:34.060
para poder utilizarlas cuando necesites bloquear algo, o como

06:34.060 --> 06:36.980
en el caso de abrir parcialmente algo o con todas las

06:36.980 --> 06:39.690
demás que no he discutido aquí, si tienes alguna

06:39.690 --> 06:42.570
otra operación que pueda ser mejorada con uno de estos

06:42.570 --> 06:45.140
tipos de utilidad incorporados.

06:45.140 --> 06:47.670
Y estos tipos de utilidad son todos genéricos,

06:47.670 --> 06:49.170
porque lo que hacen es tomar

06:49.170 --> 06:52.580
algún otro valor que es de cualquier tipo y hacer algo

06:52.580 --> 06:54.190
con él.

06:54.190 --> 06:57.970
Ponen todo como opcional, lo bloquean, sin importarles

06:57.970 --> 07:01.330
si se trata de un array o un objeto o un array de

07:01.330 --> 07:04.430
cadenas, array de números, etc.

07:04.430 --> 07:06.000
Por eso son genéricos.

07:06.000 --> 07:09.520
Y junto con los genéricos superiores incorporados que vimos antes y

07:09.520 --> 07:10.790
tus propios genéricos.

07:10.790 --> 07:13.780
Esperamos que todo esto le ayude a entender por qué

07:13.780 --> 07:16.793
los genéricos pueden ser útiles y por qué existen.
