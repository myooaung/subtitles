WEBVTT

1
00:00:02.320 --> 00:00:04.290
<v Lecturer>So that's it for this module.</v>

2
00:00:04.290 --> 00:00:05.660
You learned how you can use

3
00:00:05.660 --> 00:00:08.480
typescript in the node express application,

4
00:00:08.480 --> 00:00:11.940
that you can install extra types for express

5
00:00:11.940 --> 00:00:13.230
and for node for example,

6
00:00:13.230 --> 00:00:16.320
to get great typescript support in your files.

7
00:00:16.320 --> 00:00:18.570
That you write the application

8
00:00:18.570 --> 00:00:19.990
like you would always write it.

9
00:00:19.990 --> 00:00:21.790
But that, for example, your import

10
00:00:21.790 --> 00:00:23.720
and export syntax differs

11
00:00:23.720 --> 00:00:26.120
and that you can of course use types,

12
00:00:26.120 --> 00:00:29.300
and also any other typescript feature you learn about.

13
00:00:29.300 --> 00:00:31.080
You could use interfaces,

14
00:00:31.080 --> 00:00:33.080
you could use decorators,

15
00:00:33.080 --> 00:00:35.480
you could use eNoms and QPUlls

16
00:00:35.480 --> 00:00:37.840
and everything that's typescript exclusive.

17
00:00:37.840 --> 00:00:39.310
That all works here,

18
00:00:39.310 --> 00:00:42.650
because we're writing a regular typescript application here

19
00:00:42.650 --> 00:00:46.070
and it gets compiled with the normal typescript compiler

20
00:00:46.070 --> 00:00:48.050
to regular Javascript code.

21
00:00:48.050 --> 00:00:52.750
Javascript code which then is executed with node JS.

22
00:00:52.750 --> 00:00:54.450
Now if you wanna have more examples

23
00:00:54.450 --> 00:00:57.720
on how to work with typescript and node express,

24
00:00:57.720 --> 00:00:58.910
you can of course, for one,

25
00:00:58.910 --> 00:01:01.210
simply google for node express typescript

26
00:01:01.210 --> 00:01:02.840
to find more examples.

27
00:01:02.840 --> 00:01:04.600
But I can also strongly recommend

28
00:01:04.600 --> 00:01:06.980
that you check NestJS.

29
00:01:06.980 --> 00:01:10.390
It's a node.js framework which embraces typescript

30
00:01:10.390 --> 00:01:13.270
whilst you can make node express work with typescript,

31
00:01:13.270 --> 00:01:15.310
as you saw throughout this module,

32
00:01:15.310 --> 00:01:18.010
this is a framework which gives you projects,

33
00:01:18.010 --> 00:01:21.740
node projects, with typescript support out of the box.

34
00:01:21.740 --> 00:01:24.490
And it embraces all of these typescript features

35
00:01:24.490 --> 00:01:26.960
like decorators and so on.

36
00:01:26.960 --> 00:01:30.910
With NestJS you can build node web applications,

37
00:01:30.910 --> 00:01:34.390
rest API's but also applications where you render views

38
00:01:34.390 --> 00:01:36.440
or graphQL APIs.

39
00:01:36.440 --> 00:01:38.930
You can build that all with node.js

40
00:01:38.930 --> 00:01:41.110
but also with typescript

41
00:01:41.110 --> 00:01:43.380
and this project heavily uses

42
00:01:43.380 --> 00:01:46.950
features like decorators, interfaces and so on.

43
00:01:46.950 --> 00:01:50.200
So definitely check out NestJS if you wanna build

44
00:01:50.200 --> 00:01:53.580
service side web application with node and typescript.

45
00:01:53.580 --> 00:01:56.660
It's a great framework, really fun to use

46
00:01:56.660 --> 00:02:00.350
and uses all the cool features typescript has to offer.

47
00:02:00.350 --> 00:02:03.630
So no custom type installation, work arounds

48
00:02:03.630 --> 00:02:05.310
or anything like that is needed.

49
00:02:05.310 --> 00:02:08.913
Here you get great typescript support out of the box.

