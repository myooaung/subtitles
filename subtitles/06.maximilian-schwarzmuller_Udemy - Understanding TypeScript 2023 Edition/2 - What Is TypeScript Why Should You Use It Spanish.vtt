WEBVTT

00:02.350 --> 00:04.170
Instructor: ¿Qué es TypeScript?

00:04.170 --> 00:06.860
¿De qué se trata, por qué la utilizamos?

00:06.860 --> 00:10.820
TypeScript es un superconjunto de JavaScript.

00:10.820 --> 00:12.190
¿Qué significa esto?

00:12.190 --> 00:14.250
Significa que TypeScript es al final

00:14.250 --> 00:16.370
un lenguaje, un lenguaje de programación,

00:16.370 --> 00:18.710
que se construye sobre JavaScript.

00:18.710 --> 00:20.940
No es un lenguaje nuevo, sino

00:20.940 --> 00:23.980
que toma el lenguaje JavaScript y le añade

00:23.980 --> 00:27.450
nuevas características y ventajas.

00:27.450 --> 00:31.720
Se podría decir que hace que escribir código JavaScript sea más fácil

00:31.720 --> 00:32.840
y potente.

00:32.840 --> 00:35.624
Pero, tenemos una gran desventaja.

00:35.624 --> 00:39.786
TypeScript no puede ser ejecutado por entornos JavaScript

00:39.786 --> 00:41.760
como el navegador.

00:41.760 --> 00:44.270
Los navegadores no pueden ejecutar TypeScript,

00:44.270 --> 00:48.486
y por ejemplo, Node. js tampoco puede ejecutar TypeScript,

00:48.486 --> 00:52.250
por lo que los entornos donde podemos ejecutar JavaScript no

00:52.250 --> 00:54.080
soportan TypeScript.

00:54.080 --> 00:56.140
¿Cuál es la idea detrás de TypeScript entonces?

00:56.140 --> 01:00.760
¿Es una versión mejor de JavaScript y no podemos usarla?

01:00.760 --> 01:02.130
Bueno, no del todo.

01:02.130 --> 01:06.050
TypeScript es un lenguaje de programación, pero también es una herramienta.

01:06.050 --> 01:10.049
Es un potente compilador que se ejecuta sobre su código

01:10.049 --> 01:14.410
para compilar su código typescript a JavaScript.

01:14.410 --> 01:16.540
Por lo tanto, lo que se obtiene como

01:16.540 --> 01:20.260
resultado al escribir código en TypeScript es JavaScript.

01:20.260 --> 01:22.870
Pero no escribiste ese código JavaScript, escribiste

01:22.870 --> 01:24.900
código TypeScript con todas las nuevas

01:24.900 --> 01:27.480
características y todas las ventajas, y obtienes

01:27.480 --> 01:30.670
código JavaScript normal.

01:30.670 --> 01:33.810
Bueno, eso por supuesto trae una pregunta importante,

01:33.810 --> 01:36.710
¿cómo puede TypeScript añadir nuevas características

01:36.710 --> 01:40.630
si lo que se obtiene al final es un JavaScript normal?

01:40.630 --> 01:43.460
Y la respuesta es que el compilador de TypeScript

01:43.460 --> 01:47.710
compila estas nuevas características en soluciones de JavaScript,

01:47.710 --> 01:50.670
por lo que al final puede darte una sintaxis más agradable,

01:50.670 --> 01:52.890
una forma más fácil de hacer algo, y luego

01:52.890 --> 01:56.571
compilará esa forma más agradable y fácil en un fragmento de

01:56.571 --> 01:59.820
JavaScript más complejo, que tendrías que escribir

01:59.820 --> 02:02.060
de otra manera.

02:02.060 --> 02:03.230
Así que no es mágico, por

02:03.230 --> 02:06.790
supuesto no puede añadir lo que no es posible en absoluto en el lenguaje

02:06.790 --> 02:08.610
JavaScript, pero puede añadir nuevas

02:08.610 --> 02:11.150
características que simplemente son más fáciles

02:11.150 --> 02:15.020
de usar, una sintaxis más agradable, cosas así.

02:15.020 --> 02:17.470
Además, TypeScript, por supuesto, hace

02:17.470 --> 02:20.900
una cosa importante, que el nombre ya implica.

02:20.900 --> 02:22.740
Añade tipos, añade una característica

02:22.740 --> 02:26.230
al lenguaje JavaScript, a la que echaremos un vistazo

02:26.230 --> 02:28.750
en un segundo, que en realidad le dará,

02:28.750 --> 02:31.541
como desarrollador, una oportunidad de identificar

02:31.541 --> 02:35.070
errores en su código antes de que su script se ejecute

02:35.070 --> 02:41.350
y el error se produzca en tiempo de ejecución en el navegador.

02:41.350 --> 02:44.320
Por lo tanto, no sólo le da algunas nuevas características

02:44.320 --> 02:46.690
y formas más agradables de hacer algo, sino

02:46.690 --> 02:50.240
que también le da una comprobación de errores adicional donde los

02:50.240 --> 02:54.153
errores que de otro modo obtendría como errores de tiempo de ejecución pueden

02:54.153 --> 02:58.370
ser detectados y corregidos temprano durante el desarrollo.

02:58.370 --> 03:00.600
Entonces, ¿por qué utilizar TypeScript?

03:00.600 --> 03:02.570
Considere este ejemplo, una función

03:02.570 --> 03:06.710
JavaScript bastante sencilla que suma dos números.

03:06.710 --> 03:08.760
Ahora, cuando lo llame, por favor,

03:08.760 --> 03:11.810
fíjate en que estoy pasando dos cadenas en lugar de dos

03:11.810 --> 03:14.810
números, y te mostraré un ejemplo real en el que algo

03:14.810 --> 03:18.090
así podría ocurrir de forma realista en un segundo.

03:18.090 --> 03:20.270
Así que, estamos llamando a esta función

03:20.270 --> 03:22.519
con dos cadenas y como resultado lo que se

03:22.519 --> 03:25.260
obtendría aquí es probablemente un comportamiento

03:25.260 --> 03:27.240
no deseado, porque si se suman dos cadenas,

03:27.240 --> 03:29.596
JavaScript concatenará las cadenas en lugar

03:29.596 --> 03:32.780
de hacer un cálculo matemático aquí.

03:32.780 --> 03:36.310
Así, el resultado no sería cinco, sino veintitrés, una

03:36.310 --> 03:38.980
cadena concatenada de los dos números.

03:38.980 --> 03:41.690
Este es un error que podrías tener en JavaScript,

03:41.690 --> 03:43.530
no es un error técnico, probablemente

03:43.530 --> 03:46.720
no obtendrás un error de ejecución, pero tienes un

03:46.720 --> 03:49.832
error lógico en tu código.

03:49.832 --> 03:52.820
Y eso, por supuesto, puede llevar a grandes problemas en las

03:52.820 --> 03:55.870
aplicaciones web que estás escribiendo con JavaScript.

03:55.870 --> 03:59.360
Ahora, por supuesto, en JavaScript tenemos estrategias de mitigación,

03:59.360 --> 04:02.541
podríamos añadir una comprobación if en la función para comprobar

04:02.541 --> 04:05.440
los tipos de las entradas en tiempo de ejecución, también

04:05.440 --> 04:08.240
podríamos validar y sanear la entrada del usuario, y aunque

04:08.240 --> 04:10.670
podríamos querer hacer todo eso también sería

04:10.670 --> 04:15.840
bueno si pudiéramos detectar errores como este durante el desarrollo.

04:15.840 --> 04:19.220
Y por suerte, esto es posible con TypeScript, porque los desarrolladores

04:19.220 --> 04:21.810
pueden escribir código inválido aquí e introducir

04:21.810 --> 04:23.970
bots así en JavaScript, y con TypeScript

04:23.970 --> 04:26.160
tenemos una herramienta que nos ayuda a

04:26.160 --> 04:30.060
escribir mejor el código y evitar esos problemas.

04:30.060 --> 04:31.910
Así que vamos a ver esto más de cerca.
