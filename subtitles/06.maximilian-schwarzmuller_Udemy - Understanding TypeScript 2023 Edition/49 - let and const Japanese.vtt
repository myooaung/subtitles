WEBVTT

00:02.090 --> 00:07.002
講師：さて､ 機能を説明する前に､ この講義にはこのページへのリンクが貼られています｡

00:07.002 --> 00:11.350
このページは基本的に､ 多かれ少なかれ最新の JavaScript の機能をすべてリストアップし､

00:11.350 --> 00:13.610
どのブラウザがこれらの機能をサポートしているか､

00:13.610 --> 00:19.700
またどのコンパイラがこれらの機能をサポートしているかを示しています｡

00:19.700 --> 00:27.210
また､ そこにはTypeScript､ TypeScriptとcore-jsを組み合わせたポリフィルプロバイダーもあります｡

00:27.210 --> 00:32.070
しかし､ 一般的にこれは､ TypeScriptがコンパイルできる内容を記述している｡

00:32.070 --> 00:34.110
例えば､ constキーワードのような特定の機能を探している場合､

00:34.110 --> 00:40.860
TypeScriptがその機能で動作するかどうかを知りたい場合､ このリソースを常に使用することができる｡

00:40.860 --> 00:43.340
そうすると､ それでどう動くのか､ どんな制約があるのか､

00:43.340 --> 00:46.580
どのブラウザが対応しているのかが見えてきます｡

00:46.580 --> 00:48.250
ちなみに､ これは､ TypeScriptのターゲットに関して､

00:48.250 --> 00:53.967
どのブラウザをターゲットにするかなどのヒントにもなります｡

00:53.967 --> 00:55.260
つまり､ JavaScriptの異なるイテレーションを切り替えて､

00:55.260 --> 01:04.220
それぞれのイテレーションが導入した機能と､ その機能がどのようにサポートされているかを知ることができる､ 素晴らしい資料なのです｡

01:04.220 --> 01:06.140
そのため､ 何が使えるのか､ 何をコンパイルすればいいのか､

01:06.140 --> 01:08.800
どのようなターゲットが必要なのかを知るための資料として､

01:08.800 --> 01:11.060
ぜひご活用ください｡

01:11.060 --> 01:14.060
と､ いうことで､ まずは最も重要でわかりやすく､ よく使われる紹介の一つ､

01:14.060 --> 01:19.260
Next-Gen JavaScriptを追加してみました｡

01:19.260 --> 01:21.780
ちなみに､ Next-Gen JavaScriptとは､

01:21.780 --> 01:24.700
ES6以上の最近のものを指します｡

01:24.700 --> 01:27.860
そして､ それがレットかコンストか､ という話です｡ 

01:27.860 --> 01:32.750
定数や変数を定義することができます｡ 

01:32.750 --> 01:39.910
違いは､ 定数､ つまりconstキーワードで定義された変数は変更できないことです｡

01:39.910 --> 01:44.270
もし､ ここに正しい型であっても新しい値を代入しようとすると､

01:44.270 --> 01:47.220
定数なのでエラーになります｡

01:47.220 --> 01:50.200
さて､ ちなみにこれはTypeScriptで形成されるエラーです｡

01:50.200 --> 01:55.100
バニラJavaScriptでは､ ここでコードを実行するとブラウザがエラーを出しますが､

01:55.100 --> 01:57.280
TypeScriptでは､ 学んだように､

01:57.280 --> 02:02.990
コードを書いている最中にすでにエラーが出るようになっています｡

02:02.990 --> 02:04.930
これにより､ コンソールでテストする前に､

02:04.930 --> 02:07.820
このコードを早めに修正することができます｡

02:07.820 --> 02:11.330
そこで､ この行を削除するか､ コメントアウトすると､

02:11.330 --> 02:12.830
再コンパイルされ､ その結果､

02:12.830 --> 02:17.130
ブラウザでもエラーが発生しなくなります｡

02:17.130 --> 02:20.860
だから､ コンストなんです｡  Letは変更可能な変数ですから､

02:20.860 --> 02:23.620
もちろんvarと似ています｡

02:23.620 --> 02:27.260
また､ JavaScriptは､ 古いブラウザやそのスクリプトが壊れる可能性があるため､

02:27.260 --> 02:29.550
突然機能が削除されることがないような仕組みになっているため､

02:29.550 --> 02:33.460
Varもまだ存在しています｡

02:33.460 --> 02:35.160
でも､ もうvarは使わない方がいいですよ｡ 

02:35.160 --> 02:37.860
また､ なぜvarを使わなくなったのでしょうか？

02:37.860 --> 02:42.520
というのも､ 定数という新しい機能が追加されたからです｡

02:42.520 --> 02:43.380
しかし､ なぜそうさせるのか？

02:43.380 --> 02:45.380
なぜ､ ここで新たなキーワードを導入したのか｡ 

02:45.380 --> 02:47.223
なぜvarにこだわらなかったのか？

02:48.280 --> 02:51.460
Letとconstはvarと一つ重要な違いがあります｡ 

02:51.460 --> 02:53.300
さて､ constの場合は値が変更できないことが明らかな違いですが､

02:53.300 --> 02:57.040
letの場合も違いが出てきます｡

02:57.040 --> 03:00.930
そして､ この変数が利用可能な範囲です｡ 

03:00.930 --> 03:04.363
さて､ このJavaScriptのスコープという概念について知っておく必要があります｡ 

03:05.609 --> 03:09.260
また､ varの場合は､ グローバルスコープとファンクションスコープがあります｡ 

03:09.260 --> 03:10.700
つまり､ 関数の外で定義した変数は､

03:10.700 --> 03:15.340
スクリプトの中のどこでも利用できるのです｡

03:15.340 --> 03:19.370
関数内で定義された変数は､ その関数内でのみ使用可能です｡

03:19.370 --> 03:22.610
例えば､ ここ｡  関数addで､

03:22.610 --> 03:27.610
a,bの2つの数値が得られるとする｡

03:27.670 --> 03:29.750
そして､ そこにvar resultという変数を追加して､

03:29.750 --> 03:36.230
例えば､ result = a + b と設定し､ resultを返します｡ もちろん､ これをもっと短く書くこともできますが､

03:36.230 --> 03:40.570
varが何をするのかを示したいのです｡

03:40.570 --> 03:41.860
そして､ これなら大丈夫でしょう｡ 

03:41.860 --> 03:44.188
そして､ その結果は､ この関数の内部でのみ利用できるようになります｡

03:44.188 --> 03:47.723
もし､ ここにコンソールログの結果を書き込もうとすると､

03:47.723 --> 03:49.470
この関数のスコープでしか利用できないため､

03:49.470 --> 03:52.190
失敗します｡

03:52.190 --> 03:53.970
var harborの外側で定義すれば､

03:53.970 --> 03:58.180
グローバルに利用できるため､ すべてうまくいきます｡

03:58.180 --> 04:00.220
それと､ JavaScriptの仕組みとして､

04:00.220 --> 04:03.580
より高いレベルで変数にアクセスすることができます｡

04:03.580 --> 04:05.210
つまり､ 関数の内部では､ この関数をスコープとする変数を扱うことができますが､

04:05.210 --> 04:12.563
ここではグローバルスコープのような､ より高いスコープを持つすべての変数を扱うことができます｡

04:13.580 --> 04:14.980
というわけで､ varです｡ 

04:14.980 --> 04:19.180
さて､ letの場合､ 動作は概ね同じです｡ 

04:19.180 --> 04:21.580
これが効く､ これが効く｡ 

04:21.580 --> 04:23.800
だから､ レッツも概ね同じです｡ 

04:23.800 --> 04:30.860
しかし､ 重要な違いは､ varの場合､ グローバルスコープと関数スコープしかないことです｡

04:30.860 --> 04:32.460
if文の場合はどうでしょうか？

04:32.460 --> 04:36.720
ここで age > 20 をチェックして､ その中で isOld という変数を作ってこれを

04:36.720 --> 04:38.889
true にすると､ コンソールに

04:38.889 --> 04:41.190
isOld というログが出たときに

04:41.190 --> 04:44.500
TypeScript ではエラーになりますが､

04:44.500 --> 04:46.270
実は JavaScript

04:46.270 --> 04:50.090
ではエラーにならないのです｡

04:50.090 --> 04:53.620
このコードをコンソールのJavaScript開発者ツールに移動し､

04:53.620 --> 05:00.970
ペーストしてEnterキーを押すと､ Trueが表示されます｡

05:01.830 --> 05:02.960
そして実際､ isOldにアクセスしようとすると､

05:02.960 --> 05:05.040
trueが返ってきます｡

05:05.040 --> 05:08.380
つまり､ このisOldという変数は､ if文の中だけでなく､

05:08.380 --> 05:10.530
グローバルに登録されているのです｡

05:10.530 --> 05:11.700
なぜなら､ varの場合､

05:11.700 --> 05:15.860
JavaScriptは関数とglobal以外のスコープを知らないからです｡

05:15.860 --> 05:17.400
そしてそれは､ レットで変わる｡ 

05:17.400 --> 05:21.600
今言ったように､ これは良いコードではないので､ TypeScriptはそれでも文句を言いますが､

05:21.600 --> 05:23.170
技術的にはうまくいくでしょう｡

05:23.170 --> 05:25.100
Letで､ それが変わる｡ 

05:25.100 --> 05:26.350
さて､ letの場合､

05:26.350 --> 05:29.880
これは本当に中括弧の中だけでしか使えません｡

05:29.880 --> 05:33.540
なぜなら､ letとconstはブロックスコープという新しい概念を導入し､

05:33.540 --> 05:40.420
変数や定数は､ それを定義したブロックやそれより下位のブロックで常に利用できることを意味するからです｡

05:40.420 --> 05:44.900
ブロックは基本的に中括弧で囲まれたスニペットで､

05:44.900 --> 05:46.710
if文､ forループ､

05:46.710 --> 05:52.670
関数､ あるいはこのように中括弧を追加するだけでも可能です｡

05:52.670 --> 05:56.760
ここで定義された変数は､ そのブロックの中だけで利用できるようになります｡

05:56.760 --> 05:57.700
そしてそれは､ よりクリーンなコードを書かせ､

05:57.700 --> 06:02.470
このような状況を避けるという意味で､ 良いことだと思います｡

06:02.470 --> 06:03.640
ブラウザによって違いがあることを証明するために､

06:03.640 --> 06:05.530
このコードをletでコピーして､ ページをリロードして､

06:05.530 --> 06:14.706
ここに入力すると､ isOldが定義されていないというエラーが発生するのがわかると思います｡

06:14.706 --> 06:14.706
以前はエラーが出なかったんです｡ 

06:14.706 --> 06:19.706
確かに､ isOldを出力しようとすると､ またそのエラーが出ます｡ 

06:20.070 --> 06:21.060
そこが違うんですね｡ 

06:21.060 --> 06:23.370
したがって､ letやconstの方が､ この定数機能が得られるだけでなく､

06:23.370 --> 06:29.150
よりきれいなコードを書かざるを得ないという点でも優れているのです｡

06:29.150 --> 06:31.230
そこで､ もう一度使えるようにコメントアウトさせていただきます｡
