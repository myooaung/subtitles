WEBVTT

00:02.310 --> 00:04.580
Kursleiter: Unser Ziel ist es nun, die Projekte

00:04.580 --> 00:06.000
von A nach B zu bringen.

00:06.000 --> 00:09.750
Um genau zu sein, wenn Benutzer ein neues Projekt anlegen, wenn

00:09.750 --> 00:11.850
sie alle Daten eingeben, wollen wir

00:11.850 --> 00:15.790
am Ende ein neues Projektobjekt erstellen, das wir dann in unserer

00:15.790 --> 00:18.830
Projektlistenklasse als Teil der ungeordneten

00:18.830 --> 00:20.460
Liste ausgeben, die dort gerendert

00:20.460 --> 00:21.990
wird.

00:21.990 --> 00:23.299
Das ist die Idee.

00:23.299 --> 00:26.350
Natürlich könnte eine triviale Art der Implementierung darin

00:26.350 --> 00:28.890
bestehen, einfach zu der Stelle zu gehen, an der die

00:28.890 --> 00:30.830
Benutzereingabe eingegeben wird, und

00:30.830 --> 00:34.513
dann hier Dokument zu verwenden. getElementbyId, um nach der

00:36.100 --> 00:39.410
ungeordneten Liste zu suchen, die wir als Teil unserer

00:39.410 --> 00:42.270
Projektlistenklasse gerendert haben, die

00:42.270 --> 00:44.470
diese ID hier hat, also die Liste der

00:44.470 --> 00:49.110
aktiven Projekte oder die Liste der abgeschlossenen Projekte, und dann

00:49.110 --> 00:52.760
einfach ein neues Element hinzuzufügen.

00:52.760 --> 00:54.770
Aber das ist nicht wirklich die Idee,

00:54.770 --> 00:57.250
wie ich diese Anwendung aufbauen möchte.

00:57.250 --> 00:59.800
Ich möchte es objektorientiert aufbauen,

00:59.800 --> 01:02.530
d.h. wir haben verschiedene Klassen,

01:02.530 --> 01:06.500
die reaktiv zusammenarbeiten, indem wir eine neue Klasse

01:06.500 --> 01:08.200
erstellen und dann passiert

01:08.200 --> 01:10.550
etwas im Dom.

01:10.550 --> 01:12.730
Wir rufen eine Methode einer Klasse auf

01:12.730 --> 01:14.650
und diese Klasse tut dann etwas.

01:14.650 --> 01:16.980
So möchte ich, dass diese Dinge funktionieren.

01:16.980 --> 01:19.560
Natürlich könnten wir der Projektlistenklasse

01:19.560 --> 01:21.550
eine Methode hinzufügen, sagen wir,

01:21.550 --> 01:24.120
ich füge eine Projektmethode hinzu.

01:24.120 --> 01:25.890
Diese Methode sollte dann aufgerufen werden,

01:25.890 --> 01:28.200
wenn ein Projekt hinzugefügt und gerendert werden

01:28.200 --> 01:30.700
soll, und wir müssten eine Möglichkeit finden, sie aus

01:30.700 --> 01:32.940
der Projekteingabe heraus aufzurufen.

01:32.940 --> 01:34.820
Dazu könnten wir sicherstellen, dass

01:34.820 --> 01:37.940
wir Referenzen auf unsere Liste hier an den Projekteingabekonstruktor

01:37.940 --> 01:40.330
übergeben, so dass wir innerhalb der Projekteingabeklasse

01:40.330 --> 01:42.810
mit diesen konkreten Instanzen arbeiten und die

01:42.810 --> 01:47.570
Methoden für diese Instanzen aufrufen können.

01:47.570 --> 01:50.260
Denn das ist es, was wir zu tun hätten.

01:50.260 --> 01:52.050
Das wäre ein gangbarer Weg, auf

01:52.050 --> 01:54.400
jeden Fall ein Ansatz, den man wählen

01:54.400 --> 01:58.680
könnte, aber ich möchte einen noch abstrakteren Ansatz wählen.

01:58.680 --> 02:01.393
Meiner Meinung nach ein noch interessanterer Ansatz.

02:02.330 --> 02:06.210
Ich werde eine Klasse erstellen, die den Zustand unserer Anwendung

02:06.210 --> 02:08.110
verwaltet, sozusagen eine Klasse,

02:08.110 --> 02:11.187
die unsere Projekte verwaltet, oder welchen Zustand

02:11.187 --> 02:13.840
auch immer wir in der Anwendung verwalten müssen,

02:13.840 --> 02:15.530
die es uns auch ermöglicht, Listener

02:15.530 --> 02:18.660
in den verschiedenen Teilen der Anwendung einzurichten,

02:18.660 --> 02:21.670
die daran interessiert sind.

02:21.670 --> 02:24.540
Dieses Muster könnte Ihnen bekannt vorkommen, wenn

02:24.540 --> 02:27.050
Sie mit Frameworks wie Angular oder Bibliotheken

02:27.050 --> 02:29.820
wie React und Redux gearbeitet haben.

02:29.820 --> 02:33.423
Dass Sie ein globales Zustandsverwaltungsobjekt haben

02:33.423 --> 02:35.443
und nur auf Änderungen achten.

02:35.443 --> 02:37.480
Das ist es, was ich hier umsetzen möchte.

02:37.480 --> 02:39.620
Das ist natürlich nur eine Möglichkeit, aber

02:39.620 --> 02:41.660
ich denke, es ist eine sehr interessante,

02:41.660 --> 02:43.680
und deshalb möchte ich sie zeigen.

02:43.680 --> 02:45.908
Also füge ich am Anfang der app

02:45.908 --> 02:50.350
ts-Datei eine Projektstatusmanagementklasse hinzu.

02:50.350 --> 02:53.347
Und ich werde es einfach projectState nennen; das klingt

02:54.820 --> 02:57.210
für mich nach einem vernünftigen Namen.

02:57.210 --> 02:59.900
Die Idee dahinter ist, dass wir in dieser

02:59.900 --> 03:03.760
Klasse eine Eigenschaft oder ein Feld haben, ein privates

03:03.760 --> 03:06.570
Feld, Projekte, das ein Array von Projekten

03:06.570 --> 03:08.800
enthält.

03:08.800 --> 03:12.000
Jetzt müssen wir auch definieren, wie ein Projekt aussehen soll, das machen

03:12.000 --> 03:13.360
wir im nächsten Schritt, für den

03:13.360 --> 03:15.830
Moment sage ich einfach, dass es ein Array von irgendetwas

03:15.830 --> 03:18.710
ist, was natürlich nicht perfekt und nicht endgültig ist, aber ich

03:18.710 --> 03:22.240
möchte mich jetzt auf diese Zustandsmanagementlösung konzentrieren.

03:22.240 --> 03:25.653
Wir haben hier also eine Liste von Projekten.

03:26.530 --> 03:30.163
Mein Ziel ist es nun, ein Element zu dieser Liste hinzuzufügen,

03:30.163 --> 03:35.163
wenn wir auf die Schaltfläche "Projekt hinzufügen" klicken.

03:36.940 --> 03:39.970
Damit das funktioniert, füge ich innerhalb der Projektstatusklasse

03:39.970 --> 03:43.460
eine öffentliche Methode zum Hinzufügen von Projekten hinzu.

03:43.460 --> 03:45.560
Und dort erwarte ich den Titel, der eine

03:45.560 --> 03:47.060
Zeichenkette sein sollte,

03:47.060 --> 03:49.390
die Beschreibung, die eine Zeichenkette

03:49.390 --> 03:53.250
sein sollte, und auch die Anzahl der Personen, die an dem Projekt arbeiten,

03:53.250 --> 03:55.220
die eine Zahl sein sollte.

03:55.220 --> 03:58.450
Hier können wir nun ein neues Projekt mit der Objektliteralnotation

03:58.450 --> 04:00.950
erstellen.

04:00.950 --> 04:03.950
Wir sollten eine ID für jedes Projekt haben, damit wir es eindeutig

04:03.950 --> 04:06.050
identifizieren können, und ich werde hier eine

04:06.050 --> 04:12.100
ID mit Hilfe von Mathematik erzeugen.

04:12.100 --> 04:12.100
random(). toString.

04:12.100 --> 04:14.960
Eine Zufallszahl ist nicht wirklich eine eindeutige

04:14.960 --> 04:17.880
ID, man kann dieselbe Zahl mehrmals generieren, aber

04:17.880 --> 04:19.300
das ist sehr unwahrscheinlich,

04:19.300 --> 04:22.570
und für unsere Demozwecke hier reicht es.

04:22.570 --> 04:25.170
Außerdem sollte jedes Projekt einen Titel haben, und

04:25.170 --> 04:28.370
dort wird das Argument des Titels gespeichert, das wir bekommen.

04:28.370 --> 04:30.913
Dasselbe gilt für die Beschreibung, wo ich die

04:31.960 --> 04:33.830
Beschreibung speichern werde.

04:33.830 --> 04:37.693
Und mein Volk, wo ich die Zahl der Menschen speichern werde.

04:39.700 --> 04:43.440
Das ist jetzt das Projekt, das ich speichern möchte.

04:43.440 --> 04:45.000
Sobald wir sie hier erstellt haben,

04:45.000 --> 04:48.020
können wir auf das Array projects im Status projects zugreifen,

04:48.020 --> 04:48.853
das privat ist, aber

04:48.853 --> 04:50.320
von innerhalb der Klasse, die diese

04:50.320 --> 04:51.530
Methode ist, können wir natürlich

04:51.530 --> 04:53.340
darauf zugreifen.

04:53.340 --> 04:55.900
Und dort möchte ich dieses neue Projekt hinzufügen

04:55.900 --> 05:00.380
und dafür können wir einfach unser neues Projekt dazu schieben.

05:00.380 --> 05:03.350
Damit können wir nun ein Projekt hinzufügen.

05:03.350 --> 05:07.027
Aber wir haben natürlich noch ein paar unklare Fragen.

05:07.027 --> 05:12.027
Wie rufen wir add Projekt von innerhalb unserer Klasse dort unten, wo wir die Benutzereingabe

05:12.750 --> 05:14.650
von innerhalb der Submit-Handler

05:14.650 --> 05:15.990
sammeln?

05:15.990 --> 05:17.940
Wie nennen wir add project?

05:17.940 --> 05:21.730
Und wie übergeben wir die aktualisierte Projektliste

05:21.730 --> 05:25.690
bei jeder Änderung an die Projektlistenklasse?

05:25.690 --> 05:29.230
Das sind natürlich die beiden Probleme, mit denen wir derzeit konfrontiert sind.

05:29.230 --> 05:31.840
Nun, eine Sache, die ich hier tun werde,

05:31.840 --> 05:36.499
ist, dass ich hier eine Instanz des Projektstatus erstellen werde.

05:36.499 --> 05:39.720
Eine globale Instanz, die wir in der gesamten Datei verwenden können,

05:39.720 --> 05:42.760
und ich werde es gleich nach der Erstellung dieser Klasse tun.

05:42.760 --> 05:47.050
Hier habe ich also meine Projektstatuskonstante, in der ich

05:47.050 --> 05:50.370
den Projektstatus wie folgt instanziiere.

05:50.370 --> 05:52.400
Auf diese Weise ist dies eine globale Konstante,

05:52.400 --> 05:54.620
die überall in der Datei verwendet werden kann,

05:54.620 --> 05:58.000
so dass die Kommunikation mit dieser Klasse jetzt super einfach ist,

05:58.000 --> 06:01.660
Sie müssen nur diese globale Konstante hier verwenden.

06:01.660 --> 06:04.850
Wir können sogar eine Funktion nutzen, die wir alle kennen gelernt haben,

06:04.850 --> 06:06.430
den privaten Konstruktor, um zu garantieren,

06:06.430 --> 06:09.170
dass es sich um eine Singleton-Klasse handelt.

06:09.170 --> 06:11.950
Wir können hier einen privaten Konstruktor erstellen und

06:11.950 --> 06:14.300
dann haben wir hier eine weitere private Eigenschaft,

06:14.300 --> 06:16.670
instance, die vom Typ project state ist, also vom

06:16.670 --> 06:18.933
gleichen Typ wie diese Klasse.

06:20.640 --> 06:24.360
Und dann fügen wir hier eine get-Instanzmethode hinzu, eigentlich

06:24.360 --> 06:26.390
eine statische Methode, bei der wir

06:26.390 --> 06:30.050
prüfen, ob diese . Instanz ist ein Ding, und dafür

06:30.050 --> 06:31.020
muss das eigentlich

06:31.020 --> 06:33.970
auch eine statische Instanz sein, eine statische

06:33.970 --> 06:35.800
Eigenschaft, meine ich.

06:35.800 --> 06:37.100
Wenn dies ein Ding ist, dann

06:37.100 --> 06:39.550
geben wir dies zurück. Instanz, also geben wir

06:39.550 --> 06:42.230
eine einzelne Instanz zurück, die wir erhalten haben,

06:42.230 --> 06:44.590
ansonsten erstellen wir eine neue.

06:44.590 --> 06:45.423
Ansonsten

06:45.423 --> 06:50.423
ist das . Instanz ist gleich dem neuen Projektstatus.

06:50.450 --> 06:52.963
Und dann geben wir dies zurück. Instanz.

06:54.740 --> 07:00.903
Damit können wir die Instanz dort unten aufrufen, wie hier ProjectState.

07:00.903 --> 07:00.903
getInstance,

07:02.650 --> 07:04.390
und wir arbeiten garantiert

07:04.390 --> 07:06.560
immer mit genau demselben Objekt und

07:06.560 --> 07:11.700
haben immer nur ein Objekt dieses Typs in der gesamten Anwendung.

07:11.700 --> 07:12.840
Das ist die Idee hier,

07:12.840 --> 07:16.480
denn ich möchte nur ein einziges Zustandsverwaltungsobjekt für unser

07:16.480 --> 07:17.503
Projekt haben.

07:17.503 --> 07:19.570
Das ist also jetzt der Projektstatus mit

07:19.570 --> 07:21.563
diesem Singleton-Konstruktor.

07:22.730 --> 07:25.890
Jetzt haben wir also unseren Projektstatus konstant.

07:25.890 --> 07:28.040
Gehen wir also zur Projekteingabeklasse,

07:28.040 --> 07:30.270
wo wir die Benutzereingaben sammeln.

07:30.270 --> 07:33.950
Hier können wir nun projectState aufrufen. addProject und leiten den Titel,

07:33.950 --> 07:37.830
die Beschreibung und die Personen weiter, die wir am Ende vom Sammeln

07:37.830 --> 07:40.960
der Benutzereingaben zurückbekommen.

07:40.960 --> 07:43.920
Jetzt sollte dieses Projekt erstellt werden.

07:43.920 --> 07:47.140
Jetzt müssen wir nur noch die Information, dass wir ein

07:47.140 --> 07:51.530
neues Projekt haben, an unsere Projektlistenklasse weitergeben, denn

07:51.530 --> 07:53.840
das ist die Klasse, die für die Ausgabe

07:53.840 --> 07:56.500
auf dem Bildschirm verantwortlich ist.

07:56.500 --> 08:00.350
Und dafür möchte ich am Ende ein Abonnement einrichten.

08:00.350 --> 08:03.020
In unserem Projektstatus verwalten wir

08:03.020 --> 08:05.730
eine Liste von Listenern, also letztlich

08:05.730 --> 08:08.690
eine Liste von Funktionen, die aufgerufen werden

08:08.690 --> 08:11.600
sollen, wenn sich etwas ändert.

08:11.600 --> 08:12.433
Deshalb füge ich

08:12.433 --> 08:15.830
hier eine weitere private Immobilie hinzu, liebe Zuhörer.

08:15.830 --> 08:18.810
Und Hörer wird ein leeres Array und für jetzt,

08:18.810 --> 08:22.130
wieder, nur ein Array von irgendetwas werden

08:22.130 --> 08:25.543
wir dies im Detail später angeben.

08:26.760 --> 08:31.382
Jetzt möchte ich auch eine Methode hier addListener haben,

08:31.382 --> 08:35.590
wo ich eine Hörerfunktion bekomme, also sollte dies

08:35.590 --> 08:39.150
eine Funktion am Ende hier sein.

08:39.150 --> 08:41.370
Und das werde ich dann meinen Zuhörern hinzufügen.

08:41.370 --> 08:43.970
Also schieben wir die Hörerfunktion

08:43.970 --> 08:46.500
hier in das Hörer-Array.

08:46.500 --> 08:49.580
Was hat es nun mit diesem Hörerfeld auf sich?

08:49.580 --> 08:51.110
Es ist ein Array von Funktionen,

08:51.110 --> 08:53.070
von Funktionsreferenzen, richtig?

08:53.070 --> 08:55.250
Die Idee ist, dass wir, wenn sich etwas ändert,

08:55.250 --> 08:57.310
wie hier, wenn wir ein neues Projekt hinzufügen,

08:57.310 --> 08:59.790
alle Listener-Funktionen aufrufen.

08:59.790 --> 09:03.050
Wir gehen also in einer Schleife durch alle Hörer dieses

09:03.050 --> 09:04.720
Hörers, also durch alle Hörerfunktionen,

09:04.720 --> 09:07.330
und da es sich um Funktionsreferenzen handelt,

09:07.330 --> 09:11.593
können wir dies als Funktion ausführen.

09:13.010 --> 09:14.630
Und an diese Funktion übergeben

09:14.630 --> 09:18.620
wir das, was für sie relevant ist, basierend auf dem Zustand, den wir verwalten,

09:18.620 --> 09:20.130
was in diesem Fall, in dieser

09:20.130 --> 09:22.020
Klasse natürlich, unsere Projektliste

09:22.020 --> 09:23.280
ist.

09:23.280 --> 09:27.983
Dies ist der Zustand, für den diese Klasse zuständig ist.

09:29.100 --> 09:29.933
Hier leite ich

09:30.980 --> 09:33.050
also dieses Projekt weiter und rufe

09:33.050 --> 09:35.170
slice auf, um nur eine Kopie des Arrays

09:35.170 --> 09:39.100
und nicht das ursprüngliche Array zurückzugeben.

09:39.100 --> 09:41.880
Damit sie nicht von der Stelle aus bearbeitet werden

09:41.880 --> 09:44.210
kann, von der die Hörerfunktion ausgeht.

09:44.210 --> 09:45.760
Weil Arrays und Objekte sind Referenzwerte

09:45.760 --> 09:48.110
in Javascript, so dass, wenn Sie die ursprüngliche

09:48.110 --> 09:50.490
Array übergeben würde, könnten wir es von außen

09:50.490 --> 09:52.600
zu bearbeiten und auch auf der gleichen Hand,

09:52.600 --> 09:54.380
wenn wir etwas zu ihm von innerhalb

09:54.380 --> 09:57.020
dieser Klasse zu schieben, würde es bereits überall

09:57.020 --> 09:59.830
sonst in der App zu ändern, aber diese Orte würden nicht

09:59.830 --> 10:05.630
wirklich bemerken, dass es geändert, so könnte es seltsame Fehler einführen, wenn wir um die ursprüngliche

10:05.630 --> 10:08.270
Referenz übergeben, weshalb ich um die brandneue

10:08.270 --> 10:12.770
Kopie übergeben, eine brandneue Array hier.

10:12.770 --> 10:15.390
Jetzt wird also jede Zuhörerfunktion ausgeführt

10:15.390 --> 10:19.400
und erhält unsere Kopie, unsere brandneue Kopie der Projekte.

10:19.400 --> 10:21.380
Jetzt müssen wir nur noch zu den Stellen

10:21.380 --> 10:23.800
gehen, an denen wir über Änderungen informiert werden

10:23.800 --> 10:26.560
wollen, in unserem Fall die Projektlistenklasse hier,

10:26.560 --> 10:29.030
und einen solchen Listener einrichten.

10:29.030 --> 10:32.880
Also hier, im Konstruktor der Projektlistenklasse, bevor

10:32.880 --> 10:35.546
wir den Inhalt anhängen und rendern, werde

10:35.546 --> 10:38.010
ich projectState erreichen und addListener

10:38.010 --> 10:40.110
aufrufen, um hier eine Listener-Funktion

10:40.110 --> 10:43.720
zu registrieren.

10:43.720 --> 10:46.150
Ein Listener ist, wie gesagt, eine Funktion, also

10:46.150 --> 10:49.100
müssen wir eine Funktion an addListener übergeben.

10:49.100 --> 10:51.210
Denn die Listener, die wir hier im Projektstatus

10:51.210 --> 10:52.610
verwalten, das ist nur eine

10:52.610 --> 10:54.680
Liste von Funktionen, die wir irgendwann

10:54.680 --> 10:56.300
aufrufen, wenn sich etwas ändert,

10:56.300 --> 10:57.773
richtig?

10:58.840 --> 11:01.110
Ich muss also hier eine Funktion

11:01.110 --> 11:04.990
an meine addListener-Funktion übergeben.

11:04.990 --> 11:07.520
Hier übergebe ich eine anonyme Pfeilfunktion.

11:07.520 --> 11:10.770
Und diese Funktion erhält eine Liste von Projekten,

11:10.770 --> 11:14.400
wenn sie innerhalb von projectState aufgerufen wird.

11:14.400 --> 11:17.430
Wir erhalten also eine Liste von Projekten, und wir wissen, dass

11:17.430 --> 11:19.160
wir diese Liste von Projekten innerhalb

11:19.160 --> 11:21.560
dieses Funktionskörpers verwenden können.

11:21.560 --> 11:26.046
Und hier werde ich der Projektliste ein brandneues Feld hinzufügen, assignedProjects

11:26.046 --> 11:28.410
vielleicht, das vom Typ any array ist,

11:28.410 --> 11:30.310
also alles in einem Array, und

11:30.310 --> 11:32.357
Array mit beliebigen Werten, das

11:32.357 --> 11:34.010
werde ich natürlich später

11:34.010 --> 11:37.630
auch noch genauer spezifizieren.

11:37.630 --> 11:39.890
Dann können wir hier sagen, dass dieses zugewiesene Projekt

11:39.890 --> 11:41.780
gleichzusetzen ist mit Projekten.

11:41.780 --> 11:44.240
Also zu den Projekten, die wir bekommen.

11:44.240 --> 11:45.870
Jetzt hier, um loszuwerden, dass

11:45.870 --> 11:47.280
implizite jeder Typ Fehler,

11:47.280 --> 11:49.900
muss ich klar sein, dass dies tatsächlich ein Array von

11:49.900 --> 11:51.563
irgendetwas hier sein wird.

11:52.610 --> 11:55.020
Jetzt füge ich also die Projekte hinzu, die ich bekomme,

11:55.020 --> 11:57.660
weil sich in meinem Staat etwas geändert hat.

11:57.660 --> 11:59.490
Hier zu meinen zugewiesenen Projekten,

11:59.490 --> 12:00.530
wo ich sie nicht hinzufüge,

12:00.530 --> 12:02.350
überschreibe ich die zugewiesenen Projekte

12:02.350 --> 12:04.170
mit den neuen Projekten.

12:04.170 --> 12:08.223
Und dann habe ich die Idee, all diese Projekte zu rendern.

12:09.080 --> 12:10.883
Dazu können wir eine neue Methode

12:11.951 --> 12:15.080
hinzufügen, zum Beispiel renderPrjects.

12:15.080 --> 12:16.920
Die ich von hier aus aufrufen

12:16.920 --> 12:20.063
möchte, dieses renderProjects, genau so.

12:22.230 --> 12:24.120
Es endet außerhalb von renderProjects.

12:24.120 --> 12:27.480
Ich greife auf diese Liste hier zu, und wir weisen diese

12:27.480 --> 12:30.150
ID zu, wenn wir den Inhalt rendern, was wir

12:30.150 --> 12:31.290
hier tun.

12:31.290 --> 12:34.440
Es sieht so aus, als würden wir dies nach dem Aufruf von renderProjects tun, aber

12:34.440 --> 12:36.640
bedenken Sie, dass dies aus einer Funktion heraus geschieht,

12:36.640 --> 12:38.470
die erst dann aufgerufen wird, wenn neue Projekte

12:38.470 --> 12:40.230
hinzugefügt werden.

12:40.230 --> 12:43.510
Daher wird renderContent zuerst ausgeführt.

12:43.510 --> 12:47.090
Daher können wir uns in renderProjects darauf verlassen,

12:47.090 --> 12:49.370
dass diese ID einer ungeordneten Liste

12:49.370 --> 12:53.030
zugewiesen wird, so dass wir hier unser Listenelement

12:53.030 --> 12:58.030
mithilfe von document. getElementbyId und dann übergebe ich einfach

12:58.469 --> 13:00.790
diesen ID-Bezeichner unter Verwendung des

13:00.790 --> 13:03.690
Typs dieser konkreten Projektlistenklasse.

13:03.690 --> 13:08.563
Und dann auch mit dem Rest dieser ID, die wir generiert haben.

13:09.580 --> 13:11.130
Und auf dieser Liste oder in dieser

13:11.130 --> 13:14.170
Liste möchte ich alle Projekte darstellen, die wir haben.

13:14.170 --> 13:17.670
Ich werde also alle Projektelemente dieser

13:17.670 --> 13:21.060
zugewiesenen Projekte hier durchgehen.

13:21.060 --> 13:23.150
Und dann möchte ich für jeden Punkt etwas zur Liste

13:23.150 --> 13:23.983
hinzufügen, und wir

13:23.983 --> 13:25.380
werden das später verfeinern.

13:25.380 --> 13:29.787
Im Moment werde ich nur appendChild hier auf meinem Listenelement

13:30.890 --> 13:32.480
aufrufen.

13:32.480 --> 13:34.490
Übrigens sollten wir hier ein Ausrufezeichen

13:34.490 --> 13:36.970
hinzufügen, um klarzustellen, dass dies nicht null ist.

13:36.970 --> 13:41.970
Wir können dies auch in ein HTML UL-Listenelement umwandeln, also in ein ungeordnetes

13:42.000 --> 13:43.560
Listenelement, denn das ist

13:43.560 --> 13:45.420
es, was es sein wird.

13:45.420 --> 13:47.530
Und dann können wir das Kind hier anhängen

13:47.530 --> 13:49.740
und das sollte ein brandneues Listenelement

13:49.740 --> 13:51.980
sein; hier können wir also unser Listenelement

13:51.980 --> 13:56.160
mit Dokument erstellen. createElement LI.

13:56.160 --> 13:58.350
Und bei diesem Listenelement hier setze ich

13:58.350 --> 14:03.950
einfach den Textinhalt gleich Projekt Element.

14:03.950 --> 14:03.950
Titel.

14:03.950 --> 14:06.240
Jedes Projektelement wird ein Projekt sein,

14:06.240 --> 14:09.940
wenn wir es dort oben im Projektstatus erstellen, also wird es ein

14:09.940 --> 14:11.350
solches Objekt sein und daher

14:11.350 --> 14:13.100
einen Titel haben.

14:14.210 --> 14:15.940
Wenn wir nun nach unten gehen, haben

14:15.940 --> 14:18.880
wir unser Listenelement, das nun hier hinzugefügt wird.

14:18.880 --> 14:20.730
Und damit haben wir es fast geschafft,

14:20.730 --> 14:22.340
die restlichen Fixes hier,

14:22.340 --> 14:23.740
ich richte das Feld ein,

14:23.740 --> 14:27.080
aber im Konstruktor referenziere ich es dann nie.

14:27.080 --> 14:29.090
Nur hier in meiner Listener-Funktion,

14:29.090 --> 14:31.230
aber wie erwähnt, läuft diese nicht sofort

14:31.230 --> 14:32.640
im Konstruktor.

14:32.640 --> 14:37.640
Was ich also hier tun werde, ist, dass ich diese zugewiesenen Projekte zunächst auf ein

14:38.970 --> 14:41.200
leeres Array setzen werde, damit wir alle

14:41.200 --> 14:44.450
zufrieden sind und das Array initialisiert ist.

14:44.450 --> 14:45.510
Wenn wir dies nun speichern,

14:45.510 --> 14:47.780
sollte es ohne Fehler kompiliert werden.

14:47.780 --> 14:50.400
Und wenn wir jetzt hier etwas hinzufügen,

14:50.400 --> 14:51.993
funktioniert das dann?

14:53.480 --> 14:56.270
Wir sehen sie tatsächlich in unseren Listen.

14:56.270 --> 14:58.270
In beiden Listen, weil wir

14:58.270 --> 15:00.847
keine Filterlogik usw. haben.

15:00.847 --> 15:03.210
Und das ist etwas, das wir später beheben können,

15:03.210 --> 15:04.710
aber es funktioniert, und das

15:04.710 --> 15:06.220
ist das Wichtigste.

15:06.220 --> 15:08.390
Jetzt sehen Sie, dass wir auch hier einen Fehler haben.

15:08.390 --> 15:10.260
Wenn ich ein zweites Element hinzufüge, duplizieren

15:10.260 --> 15:12.370
wir das letzte Element und fügen die neuen Elemente

15:12.370 --> 15:13.880
hinzu, das ist also etwas, das wir

15:13.880 --> 15:15.490
beheben müssen.

15:15.490 --> 15:17.653
Und das sind alles Dinge, die wir in Angriff

15:17.653 --> 15:21.270
nehmen werden, aber jetzt sind wir zumindest in der Lage, etwas damit auszugeben,

15:21.270 --> 15:24.450
lassen Sie uns in all die Verbesserungen eintauchen, wie z.B.

15:24.450 --> 15:27.160
die Klarheit über die Typen, die wir verwenden, die Vermeidung

15:27.160 --> 15:29.150
der doppelten Ausgabe und viele andere

15:29.150 --> 15:30.733
Dinge.
