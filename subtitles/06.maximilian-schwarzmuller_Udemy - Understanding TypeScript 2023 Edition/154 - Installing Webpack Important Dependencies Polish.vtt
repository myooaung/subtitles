WEBVTT

00:02.160 --> 00:05.373
-: Więc z powrotem w naszym projekcie, jeśli chcesz użyć tam webpacka, najpierw

00:07.223 --> 00:09.948
zrezygnuję z mojej kompilacji i tego obecnego serwera deweloperskiego,

00:09.948 --> 00:10.870
a następnie stat, upewnij

00:10.870 --> 00:13.440
się, że możemy użyć tam webpacka.

00:13.440 --> 00:16.420
Teraz, ponieważ jest to już plik pakietu dot json,

00:16.420 --> 00:19.462
możemy użyć NPM, aby zainstalować więcej zależności

00:19.462 --> 00:21.050
w tym projekcie.

00:21.050 --> 00:23.410
Więc po prostu, więcej bibliotek stron trzecich, których

00:23.410 --> 00:24.940
potrzebujemy w tym projekcie.

00:24.940 --> 00:28.610
I nie mam tu na myśli bibliotek trzecich, które dostarczają pewne

00:28.610 --> 00:31.480
funkcjonalności za pomocą naszego kodu, ale zamiast

00:31.480 --> 00:33.930
tego biblioteki trzecie, które pomagają

00:33.930 --> 00:37.157
nam ustawić workflow projektu i konfigurację, która

00:37.157 --> 00:40.430
czyni rozwój bardzo wydajnym dla nas.

00:40.430 --> 00:45.110
Robimy to z zainstalowanym NPM, dash dash safe dash dev,

00:45.110 --> 00:48.600
aby wskazać, że jest to zależność tylko

00:48.600 --> 00:53.600
dla rozwoju, a następnie webpack webpack dash CLI, webpack

00:53.713 --> 00:58.713
dash dev dash serwer typescript i ts loader.

01:01.030 --> 01:03.040
Tak więc to jest garść pakietów i za

01:03.040 --> 01:04.800
chwilę powiem co one robią.

01:04.800 --> 01:06.680
Więc najpierw wciśnij enter i upewnij się,

01:06.680 --> 01:08.485
że wszystkie te pakiety są teraz instalowane

01:08.485 --> 01:10.801
w naszym projekcie, a następnie przyjrzymy się

01:10.801 --> 01:14.100
każdemu pakietowi i zobaczymy dlaczego go zainstalowaliśmy, więc

01:14.100 --> 01:16.290
poczekajmy aż to się skończy.

01:16.290 --> 01:18.530
Więc skończyło się to dla mnie instalacją tutaj,

01:18.530 --> 01:21.710
a teraz z tym, przeanalizujmy co zainstalowaliśmy.

01:21.710 --> 01:25.380
W package dot json, sekcja new dev dependencies, lub już istniała,

01:25.380 --> 01:27.063
ale teraz mamy tam wiele nowych

01:27.063 --> 01:29.474
pakietów powinienem powiedzieć, te pakiety

01:29.474 --> 01:31.290
zostały dodane.

01:31.290 --> 01:33.690
Co teraz robią te wszystkie pakiety?

01:33.690 --> 01:35.460
Na początek zajmijmy się webpackiem.

01:35.460 --> 01:37.580
Webpack to narzędzie, o którym przed

01:37.580 --> 01:40.080
chwilą mówiłem, to serce tego całego setupu,

01:40.080 --> 01:41.780
który teraz stworzymy.

01:41.780 --> 01:43.980
Jest to narzędzie, które pozwala nam podłączyć

01:43.980 --> 01:47.150
pewne funkcjonalności do wiązania naszego kodu, a także do

01:47.150 --> 01:49.210
przekształcania naszego kodu.

01:49.210 --> 01:52.470
I to przekształcenie naszej części kodu jest ważne, mamy

01:52.470 --> 01:54.740
tutaj projekt typescriptowy prawda?

01:54.740 --> 01:56.620
Oczywiście moglibyśmy użyć webpacka,

01:56.620 --> 02:00.220
aby połączyć wszystkie wyjścia JavaScript, ale byłoby jeszcze

02:00.220 --> 02:03.310
lepiej, gdyby webpack robił obie te rzeczy.

02:03.310 --> 02:06.250
Przekształć nasz kod typescript na JavaScript,

02:06.250 --> 02:10.180
a następnie faktycznie emituj spakowany plik Javascript, a

02:10.180 --> 02:13.420
webpack jest w stanie to zrobić na szczęście.

02:13.420 --> 02:16.610
Potrzebujemy webpack CLI, aby uruchamiać polecenia

02:16.610 --> 02:18.922
webpacka w naszym projekcie, oraz webpack

02:18.922 --> 02:21.603
dev server, aby mieć wbudowany serwer deweloperski,

02:21.603 --> 02:24.286
który uruchamia webpacka pod maską, który obserwuje

02:24.286 --> 02:27.056
nasze pliki pod kątem zmian, automatycznie wyzwala

02:27.056 --> 02:30.180
webpacka do rekompilacji, gdy coś się zmieni, i który

02:30.180 --> 02:34.760
automatycznie serwuje naszą stronę.

02:34.760 --> 02:37.300
A potem mamy typescript i typescript

02:37.300 --> 02:39.460
loader, ts loader tutaj.

02:39.460 --> 02:42.850
Teraz już zainstalowaliśmy typescript globalnie na naszej

02:42.850 --> 02:46.208
maszynie, dlatego jesteśmy w stanie uruchomić tsc dash w.

02:46.208 --> 02:49.760
Teraz dobrą praktyką jest automatyczne instalowanie kopii

02:49.760 --> 02:53.450
typescriptu na każdy projekt, więc dla tego projektu masz

02:53.450 --> 02:56.000
konkretną wersję typescriptu.

02:56.000 --> 02:58.320
Plusy, że jeżeli kiedykolwiek zmienimy

02:58.320 --> 03:01.624
globalną wersję typescriptu, to nie łamiemy wersji projektu,

03:01.624 --> 03:05.170
konfiguracji projektu, jeżeli tam łamiemy zmiany w samym

03:05.170 --> 03:07.280
typescripcie, więc możemy zablokować

03:07.280 --> 03:10.340
konkretną wersję typescriptu dla projektu, dlatego

03:10.340 --> 03:13.880
tutaj zainstalowaliśmy go osobno.

03:13.880 --> 03:16.440
A ts loader jest teraz pakietem, który będzie

03:16.440 --> 03:18.380
współpracował z webpackiem.

03:18.380 --> 03:21.068
Ts loader to pakiet, który mówi webpackowi

03:21.068 --> 03:24.396
jak konwertować kod typescript na Javascript, dzięki

03:24.396 --> 03:29.180
czemu webpack jest w stanie zrobić obie rzeczy, skompilować nasz kod, z pomocą

03:29.180 --> 03:30.920
typescript loadera, który

03:30.920 --> 03:33.370
z kolei oczywiście korzysta z kompilatora

03:33.370 --> 03:36.665
typescript pod maską, a następnie webpack jest również

03:36.665 --> 03:41.580
w stanie połączyć nasze emitowane pliki javascript w jeden plik js w jeden

03:41.580 --> 03:44.260
plik kodu.

03:44.260 --> 03:47.440
Cóż, i z tym, po prostu zacznijmy i skonfigurujmy

03:47.440 --> 03:50.852
projekt webpack, abyśmy mogli użyć webpacka do tych

03:50.852 --> 03:53.223
wszystkich miłych rzeczy.
