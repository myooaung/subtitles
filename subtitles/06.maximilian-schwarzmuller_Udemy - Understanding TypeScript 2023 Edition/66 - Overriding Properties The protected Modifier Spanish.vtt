WEBVTT

00:02.210 --> 00:04.400
Así que, ahora, eso es lo básico sobre la herencia.

00:04.400 --> 00:06.900
También podemos anular métodos

00:06.900 --> 00:09.810
o propiedades de nuestra clase base.

00:09.810 --> 00:13.350
Así que, digamos que en la contabilidad, quiero añadir mi propio

00:13.350 --> 00:15.020
método addEmployee.

00:15.020 --> 00:16.200
Podemos hacerlo.

00:16.200 --> 00:18.500
Podemos añadir nuestro propio método aquí,

00:18.500 --> 00:20.120
y obtener el nombre aquí.

00:20.120 --> 00:21.330
Digamos.

00:21.330 --> 00:22.550
Y ahora, aquí, quiero tener una lógica

00:22.550 --> 00:23.860
diferente para añadir eso.

00:23.860 --> 00:27.610
Una comprobación extra si o una comprobación si nombre=Max,

00:27.610 --> 00:29.410
bueno, entonces quiero volver,

00:29.410 --> 00:31.930
y no añadir a Max como empleado, porque Max

00:31.930 --> 00:34.770
es totalmente inadecuado para eso.

00:34.770 --> 00:36.360
De lo contrario, si el nombre no es

00:36.360 --> 00:38.050
Max, quiero añadir al empleado.

00:38.050 --> 00:40.420
Sin embargo, ahora nos enfrentamos a otro problema.

00:40.420 --> 00:44.520
Si intento añadir estos dos empleados, vemos que empleados

00:44.520 --> 00:47.500
no es una propiedad conocida.

00:47.500 --> 00:50.510
La razón es que los empleados son privados.

00:50.510 --> 00:51.890
Eso es importante.

00:51.890 --> 00:54.860
Las propiedades privadas sólo son accesibles

00:54.860 --> 00:57.360
desde la clase en la que están definidas,

00:57.360 --> 01:00.670
no desde las clases que heredan de esa clase.

01:00.670 --> 01:03.530
Por lo tanto, los empleados están disponibles dentro del departamento,

01:03.530 --> 01:06.100
pero no en las clases basadas en el departamento.

01:06.100 --> 01:09.040
Así, el departamento de contabilidad no tiene acceso directo

01:09.040 --> 01:11.320
a las propiedades de los empleados.

01:11.320 --> 01:15.930
Si queremos conceder ese acceso, y aún así asegurarnos de que no es

01:15.930 --> 01:19.840
una propiedad que pueda ser modificada desde fuera, podemos

01:19.840 --> 01:22.080
cambiarla a protegida.

01:22.080 --> 01:25.760
Protected es como private, pero a diferencia de private, ahora

01:25.760 --> 01:28.280
no sólo está disponible en esta clase, sino

01:28.280 --> 01:32.040
también en cualquier clase que extienda esta clase.

01:32.040 --> 01:35.130
Así, ahora podemos acceder a los empleados desde

01:35.130 --> 01:37.740
nuestro departamento de contabilidad.

01:37.740 --> 01:41.377
Aquí, ahora puedo añadir un empleado si no es Max.

01:41.377 --> 01:43.980
Por lo tanto, ahora, si voy allí,

01:43.980 --> 01:45.680
y en mi contabilidad,

01:45.680 --> 01:49.240
quiero añadir un empleado de nombre Max.

01:49.240 --> 01:50.480
Esto no debería funcionar.

01:50.480 --> 01:52.790
Si intento añadir a Manu, esto debería funcionar.

01:52.790 --> 01:57.110
Entonces, si ahora guardamos eso, y también imprimimos la información del

01:57.110 --> 01:59.196
empleado aquí, y luego guardamos eso,

01:59.196 --> 02:00.840
deberíamos ver que, efectivamente,

02:00.840 --> 02:03.120
tenemos un empleado allí, que es Manu, debido

02:03.120 --> 02:06.620
a mi propia lógica del método contable para AddEmployee, Max

02:06.620 --> 02:08.590
no fue agregado.

02:08.590 --> 02:10.017
Por lo tanto, la clave

02:10.017 --> 02:14.010
es que A) puedes anular los métodos de tu clase base.

02:14.010 --> 02:16.690
Puedes añadir tu propia implementación, y entonces

02:16.690 --> 02:18.690
esa implementación se utiliza, en lugar

02:18.690 --> 02:21.023
de la implementación de la clase base.

02:21.023 --> 02:25.130
Y B) también hay que controlar el acceso a las

02:25.130 --> 02:28.100
propiedades con protección.

02:28.100 --> 02:29.690
Porque si usas private, estás

02:29.690 --> 02:32.120
realmente restringido a esta clase, mientras

02:32.120 --> 02:36.400
que protected todavía lo hace inaccesible desde fuera, pero lo hace accesible

02:36.400 --> 02:39.270
desde dentro de las clases que extienden la clase

02:39.270 --> 02:41.123
base.
