WEBVTT

00:02.540 --> 00:05.610
Giảng viên: Tiếp theo, tôi muốn khám phá

00:05.610 --> 00:08.050
quá tải hàm, một tính năng cho phép

00:08.050 --> 00:11.450
chúng ta xác định nhiều chữ ký hàm, có thể nói

00:11.450 --> 00:13.840
là, cho một và cùng một hàm.

00:13.840 --> 00:17.080
Điều đó đơn giản có nghĩa là chúng ta có thể có nhiều

00:17.080 --> 00:20.340
cách khả thi để gọi một hàm với các tham số khác nhau,

00:20.340 --> 00:24.300
chẳng hạn, để sau đó thực hiện điều gì đó bên trong hàm đó.

00:24.300 --> 00:26.540
Và một ví dụ điển hình mà quá tải chức năng có thể giúp

00:26.540 --> 00:29.060
chúng ta có thể được nhìn thấy xa hơn một chút ở trên.

00:29.060 --> 00:32.090
Chức năng thêm này chúng ta đã viết trước đó, nhiệm

00:32.090 --> 00:35.940
vụ của nó là nhận hai giá trị có thể kết hợp, có nghĩa là các chuỗi

00:35.940 --> 00:37.960
hoặc số, và sau đó, như bạn có thể

00:37.960 --> 00:39.830
thấy kiểu trả về mà TypeScript

00:39.830 --> 00:43.450
suy ra ở đây, tất cả đều có thể kết hợp được.

00:43.450 --> 00:45.370
Điều này đơn giản có nghĩa là TypeScript

00:45.370 --> 00:47.960
hiểu rằng những gì nó trả về cũng là một chuỗi

00:47.960 --> 00:51.080
hoặc một số, nhưng thực tế nếu bạn nghĩ về nó, điều đó không

00:51.080 --> 00:52.880
thực sự đúng.

00:52.880 --> 00:55.280
Ý tôi là, về mặt kỹ thuật thì đúng, nhưng chúng

00:55.280 --> 00:57.620
tôi biết rằng nếu chúng tôi chuyển hai số thì

00:57.620 --> 00:59.400
kiểu trả về sẽ luôn là số.

00:59.400 --> 01:01.940
Nếu chúng ta truyền vào ít nhất một chuỗi

01:01.940 --> 01:03.950
thì kiểu trả về sẽ là chuỗi.

01:03.950 --> 01:05.460
Bây giờ tại sao điều này có thể quan trọng?

01:05.460 --> 01:08.225
Hãy nhớ rằng chức năng thêm được viết như thế này.

01:08.225 --> 01:11.060
Và trên thực tế, bạn có thể nhận xét mọi

01:11.060 --> 01:15.390
thứ bên dưới và thêm một số mã mới ngay bên dưới hàm.

01:15.390 --> 01:18.670
Nếu bây giờ tôi nhận được kết quả của mình ở đây bằng cách

01:18.670 --> 01:21.870
gọi add, tôi chuyển vào một và năm, bạn sẽ thấy kết quả thuộc

01:21.870 --> 01:23.390
loại có thể kết hợp.

01:23.390 --> 01:27.010
Hậu quả của việc này là TypeScript không biết

01:27.010 --> 01:30.390
liệu kết quả là một số hay một chuỗi.

01:30.390 --> 01:34.510
Bây giờ điều này có thể thực sự quan trọng nếu chúng ta chuyển vào chuỗi.

01:34.510 --> 01:39.510
Nếu tôi vượt qua Max Schwarz ở đây, thì điều này hoạt động nhưng tôi

01:39.700 --> 01:41.750
vẫn có thể kết hợp trở lại.

01:41.750 --> 01:43.990
Bây giờ, kết quả là tôi không thể

01:43.990 --> 01:46.120
gọi các hàm chuỗi trên kết quả,

01:46.120 --> 01:50.600
tôi không thể gọi ví dụ split để tách trên khoảng trắng.

01:50.600 --> 01:52.870
Tôi biết rằng điều này sẽ hiệu quả, vì tôi

01:52.870 --> 01:55.270
biết rằng khi tôi gọi hàm như thế này, tôi

01:55.270 --> 01:57.200
sẽ biến nó thành nhánh if này và tôi

01:57.200 --> 01:59.980
sẽ nhận lại một chuỗi, vì vậy tôi biết rằng kết

01:59.980 --> 02:03.030
quả sẽ giữ chuỗi đó, nhưng TypeScript chỉ biết điều

02:03.030 --> 02:05.620
đó nó chứa một chuỗi hoặc một số.

02:05.620 --> 02:08.350
Tất nhiên, bây giờ, chúng ta có thể sử dụng truyền kiểu ở đây và

02:08.350 --> 02:11.340
nói với TypeScript rằng những gì chúng ta nhận được là một chuỗi.

02:11.340 --> 02:13.930
Chúng ta có thể làm điều đó với cú pháp

02:13.930 --> 02:16.040
ép kiểu mà bạn đã học trước đó.

02:16.040 --> 02:18.840
Tuy nhiên, không phải là tối ưu khi chúng ta phải làm điều

02:18.840 --> 02:21.800
đó, tôi sẽ tranh luận, bởi vì chúng ta phải viết thêm mã ở đây

02:21.800 --> 02:24.560
mặc dù chúng ta mong đợi TypeScript hiểu rằng khi chúng

02:24.560 --> 02:26.070
ta gọi hàm này như thế này, chúng

02:26.070 --> 02:27.740
ta luôn nhận được một chuỗi.

02:27.740 --> 02:30.890
Nhưng TypeScript không thực sự phân tích mã của chúng

02:30.890 --> 02:33.700
ta đủ tốt ở đây, và đó là lúc quá tải hàm có thể giúp

02:33.700 --> 02:35.000
ích cho chúng ta.

02:35.000 --> 02:38.730
Quá tải hàm được viết đơn giản bằng cách viết hàm ngay

02:38.730 --> 02:41.880
phía trên hàm chính của bạn, có thể nói, cùng

02:41.880 --> 02:46.683
tên, vì vậy về cơ bản bạn lặp lại dòng này ở đây, tuy nhiên không có

02:47.880 --> 02:50.890
dấu ngoặc nhọn, không có dấu ngoặc nhọn mở

02:50.890 --> 02:54.080
và đóng sau đó, và bây giờ bạn ở đây muốn sử dụng

02:54.080 --> 02:57.980
các loại số và số cụ thể, sau đó là loại trả về tìm kiếm

02:57.980 --> 03:01.980
khi trường hợp này xảy ra khi bạn nhận được ít nhất một

03:01.980 --> 03:03.410
số.

03:03.410 --> 03:06.643
Và ở đó chúng ta có thể nói, kiểu trả về là số.

03:08.840 --> 03:10.980
Vì vậy, bây giờ chúng ta đang nói

03:10.980 --> 03:14.980
với TypeScript, nếu chúng ta gọi hàm này và cả hai đối số là một

03:14.980 --> 03:17.180
số, thì hàm này sẽ trả về một số.

03:17.180 --> 03:19.430
Tất nhiên, đây không phải là cú pháp sẽ

03:19.430 --> 03:22.480
hoạt động trong JavaScript, nó sẽ bị TypeScript loại

03:22.480 --> 03:24.430
bỏ trong quá trình biên dịch.

03:24.430 --> 03:28.480
Nhưng TypeScript hợp nhất thông tin chức năng này và

03:28.480 --> 03:31.380
khai báo chức năng này ở đây với nhau và

03:31.380 --> 03:33.640
về cơ bản kết hợp kiến thức của

03:33.640 --> 03:35.550
hai dòng này ở đây.

03:35.550 --> 03:38.590
Và bây giờ nó đã biết rồi, chúng ta có thể gọi hàm

03:38.590 --> 03:41.490
này ở đây với A và B thuộc loại có thể kết hợp

03:41.490 --> 03:43.790
hoặc với A và B thuộc loại số.

03:43.790 --> 03:47.060
Nhân tiện, bạn cũng có thể thêm nhiều hoặc ít tham số hơn ở đây

03:47.060 --> 03:50.100
trong phần quá tải của mình, bạn thực sự linh hoạt ở đó.

03:50.100 --> 03:53.640
Bạn cũng thêm chức năng add vào đây và chỉ mong

03:53.640 --> 03:57.620
đợi một số và trả về một số, và điều này cũng sẽ hoạt

03:57.620 --> 04:01.210
động nếu chúng ta cũng đặt B tùy chọn trong các

04:01.210 --> 04:03.270
quá tải khác của mình.

04:03.270 --> 04:05.254
Bởi vì cuối cùng, tất nhiên, bạn cần

04:05.254 --> 04:08.630
đảm bảo rằng mã của bạn ở đây luôn hoạt động và cuối cùng bạn

04:08.630 --> 04:10.850
nhận được tất cả các đối số bạn cần.

04:10.850 --> 04:13.610
Vì vậy, B sẽ là tùy chọn ở đây, sau đó bạn thấy điều này

04:13.610 --> 04:15.170
hoạt động, tất nhiên bây giờ

04:15.170 --> 04:17.850
chúng ta sẽ phải giải quyết xung quanh việc B có

04:17.850 --> 04:19.550
khả năng là tùy chọn ở đó.

04:19.550 --> 04:21.390
Tuy nhiên, tôi không cần điều đó, vì vậy

04:21.390 --> 04:24.460
tôi sẽ loại bỏ điều đó và chỉ để lại điều này, nhưng tôi cũng không

04:24.460 --> 04:27.200
muốn quá tải khi chúng tôi gọi điều này bằng chuỗi.

04:27.200 --> 04:30.060
Vì vậy, tôi sẽ thêm một hàm quá tải khác ở đây

04:30.060 --> 04:33.450
trong đó A là một chuỗi và B là một chuỗi và sau đó tôi

04:33.450 --> 04:36.090
khá rõ ràng về thực tế là những gì chúng

04:36.090 --> 04:38.460
ta trả về sẽ là một chuỗi.

04:38.460 --> 04:40.280
Nhân tiện, bạn nên thêm dấu

04:40.280 --> 04:43.660
chấm phẩy sau những dòng quá tải này ở đây.

04:43.660 --> 04:46.560
Vì vậy, bây giờ tôi đang nói rằng nếu chúng ta gọi hàm

04:46.560 --> 04:49.100
này với hai số, chúng ta luôn nhận lại một số.

04:49.100 --> 04:52.170
Nếu chúng ta gọi nó bằng hai chuỗi, chúng ta luôn nhận lại một chuỗi.

04:52.170 --> 04:54.510
Nếu chúng tôi gọi nó bằng một chuỗi và một số, về

04:54.510 --> 04:57.020
mặt kỹ thuật, chúng tôi cũng luôn nhận lại một chuỗi,

04:57.020 --> 04:57.853
nhưng tôi không

04:57.853 --> 04:59.410
muốn thêm tất cả các kết hợp có thể

04:59.410 --> 05:01.240
có này ở đây, tất nhiên tôi có thể thêm

05:01.240 --> 05:03.173
nhiều hơn và sau đó thêm số ở đây hoặc số

05:04.040 --> 05:06.470
khác sự kết hợp chúng ta có thể có, đó là sự kết hợp

05:06.470 --> 05:07.500
này.

05:07.500 --> 05:10.060
Tôi đoán bây giờ tôi đã thêm tất cả các kết hợp.

05:10.060 --> 05:12.540
Và bây giờ tôi đang liệt kê tất cả các kết hợp tiềm năng

05:12.540 --> 05:16.040
của các giá trị ở đây và những gì chúng tôi trả về trong từng trường hợp.

05:16.040 --> 05:18.260
Bây giờ với điều đó, bạn sẽ thấy lỗi ở dưới

05:18.260 --> 05:20.520
đó đã biến mất vì bây giờ TypeScript biết rằng

05:20.520 --> 05:24.790
kết quả sẽ là kiểu chuỗi nếu chúng ta gọi hàm add với hai giá trị này, cả hai đều là

05:24.790 --> 05:25.623
chuỗi.

05:25.623 --> 05:28.510
Và nếu tôi di chuột qua phần bổ sung, bạn sẽ thấy

05:28.510 --> 05:31.100
có sẵn ba tình trạng quá tải bổ sung.

05:31.100 --> 05:32.980
Ở đây tôi đang gọi add bằng hai

05:32.980 --> 05:35.560
chuỗi, nhưng TypeScript biết có ba cách

05:35.560 --> 05:36.630
gọi khác.

05:36.630 --> 05:39.450
Ví dụ, với một chuỗi và một số, trong

05:39.450 --> 05:41.340
trường hợp đó tôi nhận

05:41.340 --> 05:46.340
lại một chuỗi, một số và một số chuỗi hoặc hai số.

05:47.430 --> 05:48.630
Điều này cũng sẽ làm việc.

05:48.630 --> 05:50.210
Sau đó, tất nhiên tôi không thể

05:50.210 --> 05:52.650
gọi phân tách vì TypeScript xác định chính xác

05:52.650 --> 05:54.630
rằng khi tôi gọi số này bằng hai số, tôi

05:54.630 --> 05:58.253
sẽ nhận lại một số và trên một số bạn không thể gọi phân tách.

05:59.260 --> 06:02.010
Vì vậy, đây là những hàm quá tải và chúng có thể

06:02.010 --> 06:04.060
giúp bạn trong các tình huống như thế

06:04.060 --> 06:06.780
này ở đây, khi TypeScript không thể tự suy luận

06:06.780 --> 06:08.590
chính xác kiểu trả về, ở đây bạn

06:08.590 --> 06:11.660
có thể thực sự rõ ràng về những gì sẽ được trả về cho các

06:11.660 --> 06:14.667
kết hợp khác nhau mà bạn có thể hỗ trợ trong chức năng

06:14.667 --> 06:16.033
của bạn.
