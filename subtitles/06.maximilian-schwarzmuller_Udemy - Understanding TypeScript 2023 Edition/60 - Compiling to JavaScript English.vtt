WEBVTT

1
00:00:02.510 --> 00:00:04.490
<v Instructor>With our basic class if we now go to</v>

2
00:00:04.490 --> 00:00:07.570
the dist folder and we inspect the app.js file,

3
00:00:07.570 --> 00:00:10.110
we see what is generated in JavaScript,

4
00:00:10.110 --> 00:00:13.560
and there you see we have essentially the same code.

5
00:00:13.560 --> 00:00:17.870
Two important differences are, that the name field

6
00:00:17.870 --> 00:00:20.870
which we have here does not exist like this

7
00:00:20.870 --> 00:00:22.230
here in the class.

8
00:00:22.230 --> 00:00:25.460
This would actually be supported in modern JavaScript

9
00:00:25.460 --> 00:00:27.910
but it depends on the version of JavaScript

10
00:00:27.910 --> 00:00:29.130
you're building for.

11
00:00:29.130 --> 00:00:33.450
So in ES6 alone, it's not supported actually.

12
00:00:33.450 --> 00:00:35.430
And of course what's awesome is seeing

13
00:00:35.430 --> 00:00:37.360
is the type assignment.

14
00:00:37.360 --> 00:00:39.760
We do have our constructional logic though,

15
00:00:39.760 --> 00:00:43.870
and indeed this is how you do add properties

16
00:00:43.870 --> 00:00:48.150
to the to be created objects in Vanilla JavaScript

17
00:00:48.150 --> 00:00:51.570
when not using the latest version of JavaScript

18
00:00:51.570 --> 00:00:54.470
where this field syntax would also be supported.

19
00:00:54.470 --> 00:00:56.480
So this is what I have in JavaScript.

20
00:00:56.480 --> 00:00:58.710
Now it gets interesting however if we go to the

21
00:00:58.710 --> 00:01:02.080
tsconfig.json file and we switch the target from

22
00:01:02.080 --> 00:01:05.970
ES5 to ES6 and comment out lib here.

23
00:01:05.970 --> 00:01:08.190
So that the correct and recommended libraries

24
00:01:08.190 --> 00:01:10.870
are added by TypeScript automatically.

25
00:01:10.870 --> 00:01:14.090
If you now save this config file, and you go back to app.js

26
00:01:14.090 --> 00:01:16.350
you see something totally different.

27
00:01:16.350 --> 00:01:18.810
And that's pretty interesting what we see here.

28
00:01:18.810 --> 00:01:20.960
What do we have here?

29
00:01:20.960 --> 00:01:23.290
Well what we in the end have here is a

30
00:01:23.290 --> 00:01:26.453
so called constructor function.

31
00:01:27.299 --> 00:01:31.600
Constructor function is something which is built into

32
00:01:31.600 --> 00:01:33.770
JavaScript which has basically been there

33
00:01:33.770 --> 00:01:35.520
for ever you could say,

34
00:01:35.520 --> 00:01:40.230
and this is Vanilla non-modern JavaScript's

35
00:01:40.230 --> 00:01:44.480
way of creating object blueprints.

36
00:01:44.480 --> 00:01:47.100
It's a function which is called with the help

37
00:01:47.100 --> 00:01:50.890
of the new keyword and then all of a sudden, magically,

38
00:01:50.890 --> 00:01:53.640
this function even though it has no return statement

39
00:01:53.640 --> 00:01:55.850
inside of it does return something

40
00:01:55.850 --> 00:01:57.540
as you see when we call it here.

41
00:01:57.540 --> 00:01:59.730
It returns an object.

42
00:01:59.730 --> 00:02:03.110
A new object which will have a name property.

43
00:02:03.110 --> 00:02:04.940
So this concept is not new,

44
00:02:04.940 --> 00:02:08.680
it's not introduced by modern JavaScript or by TypeScript.

45
00:02:08.680 --> 00:02:12.500
The idea of having blueprints for objects has been around

46
00:02:12.500 --> 00:02:15.180
in JavaScript for a very long time.

47
00:02:15.180 --> 00:02:19.070
In the past however, we had to use constructor functions

48
00:02:19.070 --> 00:02:21.870
and since this could be a bit un-intuitive

49
00:02:21.870 --> 00:02:24.520
especially to developers who might have worked

50
00:02:24.520 --> 00:02:26.600
with different programming languages.

51
00:02:26.600 --> 00:02:30.510
Modern JavaScript introduced the idea of classes of

52
00:02:30.510 --> 00:02:34.950
this cleaner syntax, and TypeScript supports this as well.

53
00:02:34.950 --> 00:02:38.180
And because of TypeScript's powerful compilation,

54
00:02:38.180 --> 00:02:40.830
you can choose wherever you wanna compile it into,

55
00:02:40.830 --> 00:02:44.130
older style which of course works in more browsers

56
00:02:44.130 --> 00:02:48.280
or into this more modern ES6 style which we saw before.

57
00:02:48.280 --> 00:02:51.700
Which looks very much like this here.

58
00:02:51.700 --> 00:02:54.500
The key take away is that we have this feature built

59
00:02:54.500 --> 00:02:57.300
into JavaScript and supported by TypeScript

60
00:02:57.300 --> 00:03:00.163
that we can define object blueprints.

