WEBVTT

00:02.220 --> 00:03.053
Kursleiter: Ich habe

00:03.053 --> 00:04.920
bereits erwähnt, dass Schnittstellen verwendet

00:04.920 --> 00:07.114
werden, um die Struktur eines Objekts zu definieren.

00:07.114 --> 00:09.690
Nun können Schnittstellen auch dazu verwendet werden,

00:09.690 --> 00:11.750
die Struktur einer Funktion zu definieren.

00:11.750 --> 00:14.330
Also im Grunde als Ersatz für die Funktionstypen, die Sie bereits

00:14.330 --> 00:15.578
kennen gelernt haben.

00:15.578 --> 00:17.890
Nur zur Auffrischung: Wir können den Typ einer

00:17.890 --> 00:20.090
Funktion zum Beispiel mit einem benutzerdefinierten

00:20.090 --> 00:23.305
Typ mit dem Schlüsselwort type definieren.

00:23.305 --> 00:26.380
AddFn für die Funktion add, die dann eine Funktionsdefinition

00:26.380 --> 00:29.350
wie diese enthalten könnte.

00:29.350 --> 00:30.830
Sie sollte eine Zahl zurückgeben

00:30.830 --> 00:32.370
und zwei Argumente annehmen,

00:32.370 --> 00:35.970
wobei jedes Argument ebenfalls vom Typ Zahl ist.

00:35.970 --> 00:39.310
Nun könnten wir hier eine neue Funktion add erstellen,

00:39.310 --> 00:42.860
die vom Typ AddFn ist, und wenn wir sie nicht initialisieren,

00:42.860 --> 00:45.040
sondern unsere Funktion später zuweisen,

00:45.040 --> 00:46.580
dann müssen wir natürlich

00:46.580 --> 00:49.470
sicherstellen, dass diese Funktion zwei Argumente

00:49.470 --> 00:51.300
vom Typ Zahl annimmt und dass wir

00:51.300 --> 00:55.170
dort auch eine Zahl zurückgeben.

00:55.170 --> 00:56.360
Das ist etwas, das wir tun können.

00:56.360 --> 00:57.843
Das haben Sie bereits gelernt.

00:57.843 --> 01:01.760
Als Alternative zu diesem benutzerdefinierten Typ können Sie auch eine Schnittstelle

01:01.760 --> 01:03.077
verwenden.

01:03.077 --> 01:06.860
Schnittstellen sind dazu da, die Struktur eines Objekts zu definieren, wie ich

01:06.860 --> 01:08.240
es Ihnen beigebracht habe, aber

01:08.240 --> 01:10.220
letztendlich sind Funktionen auch nur Objekte

01:10.220 --> 01:12.720
und daher ist dies eine kleine Ausnahme.

01:12.720 --> 01:15.350
Sie können Funktionstypen mit Schnittstellen erstellen.

01:15.350 --> 01:18.930
Dazu erstellen Sie eine Schnittstelle, die Sie AddFn nennen, um

01:18.930 --> 01:20.930
diesen Namen hier beizubehalten.

01:20.930 --> 01:23.720
Darin definieren Sie die Funktion,

01:23.720 --> 01:28.300
indem Sie die Argumente in Klammern setzen, z. B. a:Zahl,

01:28.300 --> 01:31.150
B:Zahl, und dann einen Doppelpunkt,

01:31.150 --> 01:33.980
keinen Pfeil, sondern einen Doppelpunkt

01:33.980 --> 01:36.810
mit dem Rückgabetyp.

01:36.810 --> 01:39.780
Im Endeffekt definieren Sie also eine Methode, wie

01:39.780 --> 01:41.630
wir es hier mit greet tun, mit der

01:41.630 --> 01:45.710
Ausnahme, dass wir jetzt keinen Methodennamen hinzufügen.

01:45.710 --> 01:47.880
Wir haben also eine anonyme Funktion,

01:47.880 --> 01:49.300
wenn Sie sie so in der AddFn-Schnittstelle

01:49.300 --> 01:52.000
aufrufen wollen, und TypeScript versteht diese

01:52.000 --> 01:55.250
spezielle Syntax dieser anonymen Funktion in Ihrer

01:55.250 --> 01:57.800
Schnittstelle und versteht, dass Sie diese

01:57.800 --> 02:02.070
Schnittstelle als Funktionstyp verwenden wollen, und so sollte Ihre

02:02.070 --> 02:05.360
Funktion aussehen.

02:05.360 --> 02:07.650
Jetzt können wir also AddFn hier verwenden, und wenn

02:07.650 --> 02:10.440
ich versuchen würde, hier eine Zeichenkette zu akzeptieren,

02:10.440 --> 02:11.640
würden wir eine Fehlermeldung

02:11.640 --> 02:13.786
erhalten, weil dies nicht zuweisbar ist, wir müssen

02:13.786 --> 02:17.060
eine Zahl anstelle einer Zeichenkette verwenden.

02:17.060 --> 02:19.670
Es ist also einfach eine Alternative zu diesem benutzerdefinierten Typ.

02:19.670 --> 02:23.010
Natürlich würde ich hier argumentieren, dass die Verwendung des benutzerdefinierten

02:23.010 --> 02:25.020
Typs wahrscheinlich etwas üblicher ist, es ist

02:25.020 --> 02:26.470
auch etwas kürzer, aber es ist eine

02:26.470 --> 02:28.340
nette alternative Syntax, die man kennen sollte,

02:28.340 --> 02:30.870
vor allem, wenn man in irgendeinem Projekt darauf stößt und

02:30.870 --> 02:35.265
sonst nicht weiß, was das bedeutet, diese seltsame anonyme Methode.

02:35.265 --> 02:38.993
Nun, es handelt sich letztlich nur um einen benutzerdefinierten Funktionstyp.
