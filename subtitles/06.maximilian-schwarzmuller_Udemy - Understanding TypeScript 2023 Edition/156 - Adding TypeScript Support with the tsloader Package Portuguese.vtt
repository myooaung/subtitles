WEBVTT

00:02.290 --> 00:03.910
Instrutor: Então, para dizer ao Webpack

00:03.910 --> 00:06.710
o que fazer com os arquivos TypeScript, precisamos adicionar uma

00:06.710 --> 00:08.830
nova entrada ao objeto de configuração aqui.

00:08.830 --> 00:11.510
E essa é a propriedade do módulo.

00:11.510 --> 00:14.020
O módulo também leva um objeto JavaScript para

00:14.020 --> 00:15.470
depois configurá-lo.

00:15.470 --> 00:17.440
Um módulo no final é apenas um arquivo, então

00:17.440 --> 00:20.520
aqui dizemos ao Webpack como trabalhar com os arquivos que ele encontra,

00:20.520 --> 00:22.940
como com o aplicativo. ts, e também uma vez entendido

00:22.940 --> 00:25.520
esse arquivo, como lidar com todas as importações

00:25.520 --> 00:27.290
no arquivo.

00:27.290 --> 00:29.800
Então, como a Webpack deve lidar com esses arquivos?

00:29.800 --> 00:33.640
Bem, nós dizemos ao Webpack adicionando um conjunto de regras aqui, porque você pode

00:33.640 --> 00:35.430
estabelecer múltiplas regras que devem

00:35.430 --> 00:37.300
ser aplicadas a todos os arquivos.

00:37.300 --> 00:40.690
Aqui só precisamos de um, mas em projetos mais complexos, onde você

00:40.690 --> 00:44.030
também quer usar o Webpack para lidar com arquivos CSS, ou imagens,

00:44.030 --> 00:46.140
ou qualquer coisa parecida, você pode adicionar

00:46.140 --> 00:49.220
mais regras para diferentes tipos de arquivos.

00:49.220 --> 00:51.500
E como mencionado anteriormente, os documentos oficiais

00:51.500 --> 00:53.840
são um ótimo lugar para aprender mais sobre carregadores,

00:53.840 --> 00:55.730
que você no final usa para ensinar mais sobre

00:55.730 --> 00:57.980
Webpack sobre diferentes arquivos, e para aprender

00:57.980 --> 00:59.720
mais sobre Webpack em geral.

00:59.720 --> 01:02.560
Por isso, aqui, vamos acrescentar um carregador desse tipo na verdade.

01:02.560 --> 01:06.110
Um carregador é simplesmente um pacote que diz ao Webpack como

01:06.110 --> 01:07.780
lidar com certos arquivos, e,

01:07.780 --> 01:09.960
claro, aqui temos o carregador ts, que

01:09.960 --> 01:11.520
nos ajuda a dizer ao Webpack

01:11.520 --> 01:13.690
como lidar com arquivos TypeScript.

01:13.690 --> 01:16.850
Assim, adicionamos uma regra que é apenas um objeto JavaScript,

01:16.850 --> 01:19.720
onde antes de tudo adicionamos uma propriedade de teste.

01:19.720 --> 01:22.950
Isto descreve um teste que o Webpack fará em qualquer

01:22.950 --> 01:26.510
arquivo que encontrar para descobrir se esta regra aqui se

01:26.510 --> 01:28.550
aplica a esse arquivo ou não.

01:28.550 --> 01:31.080
E o teste aqui é uma expressão regular.

01:31.080 --> 01:33.610
E aí quero dizer à Webpack que qualquer

01:33.610 --> 01:36.950
arquivo que termine com . ts devem ser utilizados ou devem

01:36.950 --> 01:38.913
ser tratados por esta regra.

01:39.860 --> 01:42.940
Uma expressão regular que verifica a extensão do arquivo pode usar

01:42.940 --> 01:46.260
uma barra invertida aqui, e então . ts, e depois um sinal

01:46.260 --> 01:47.550
de dólar.

01:47.550 --> 01:50.840
Esta é nossa expressão regular que então diz ao Webpack que você quer

01:50.840 --> 01:54.593
verificar arquivos que terminam com . ts.

01:55.560 --> 01:58.810
Então, você também tem que especificar o que o Webpack deve fazer

01:58.810 --> 02:02.590
com esses arquivos, e você faz isso com a palavra-chave de uso aqui.

02:02.590 --> 02:05.290
E aí, você especifica que o Webpack do carregador

02:05.290 --> 02:07.590
deve usar, no meu caso, o ts-loader.

02:07.590 --> 02:10.600
Portanto, dizemos à Webpack que qualquer arquivo TypeScript que

02:10.600 --> 02:12.720
encontrar deve ser manuseado pelo carregador

02:12.720 --> 02:16.010
de TypeScript que, por sua vez, sabe o que fazer com tal arquivo.

02:16.010 --> 02:17.680
O ts-loader levará automaticamente

02:17.680 --> 02:20.330
o tsconfig. json em conta para não precisarmos

02:20.330 --> 02:23.430
especificar nenhuma configuração extra aqui.

02:23.430 --> 02:26.050
Apenas uma configuração que nunca dói,

02:26.050 --> 02:29.910
excluir módulos de nós como uma expressão regular para que

02:29.910 --> 02:33.773
o Webpack também não tente olhar os módulos de nós.

02:35.130 --> 02:38.400
Com isso, precisamos acrescentar aqui uma configuração

02:38.400 --> 02:42.800
extra após a configuração do módulo, e essa é a chave da resolução.

02:42.800 --> 02:47.800
Aí dizemos à Webpack quais extensões de arquivo ele acrescenta às importações

02:47.820 --> 02:49.750
que encontra.

02:49.750 --> 02:52.440
Eu disse que o Webpack adicionaria extensões por si só

02:52.440 --> 02:56.160
e, por padrão, ele procurará por . arquivos js.

02:56.160 --> 02:59.220
Agora aqui queremos que a Webpack procure por . ts, e então para aqui em resolução,

02:59.220 --> 03:01.280
podemos adicionar uma propriedade de

03:01.280 --> 03:05.390
extensão, definida como igual a uma matriz, e dizer ao Webpack que ele deve

03:05.390 --> 03:08.390
procurar por . ts, bem como os

03:08.390 --> 03:10.640
arquivos . arquivos js.

03:10.640 --> 03:13.360
Portanto, agora o Webpack procurará basicamente por tais

03:13.360 --> 03:16.900
arquivos e depois agrupará todos os arquivos que têm estas extensões, que

03:16.900 --> 03:18.723
você está importando juntos.

03:19.760 --> 03:22.770
E essa é nossa configuração quase terminada por enquanto, nosso arquivo

03:22.770 --> 03:24.690
de configuração quase terminado por enquanto,

03:24.690 --> 03:26.150
pelo menos por enquanto.

03:26.150 --> 03:28.730
Com isso, devemos ir à tsconfig também,

03:28.730 --> 03:33.070
e lá nos certificarmos de que a fonteMap seja verdadeira.

03:33.070 --> 03:35.210
Isto nos ajudará a depurar nosso código,

03:35.210 --> 03:37.130
e o Webpack também o suporta.

03:37.130 --> 03:39.850
Agora só temos que acrescentar uma entrada,

03:39.850 --> 03:41.340
talvez aqui abaixo da saída,

03:41.340 --> 03:43.710
e isso é uma chave de devtool.

03:43.710 --> 03:47.210
E aí, o valor deve ser o mapa de fonte inline-source

03:47.210 --> 03:48.510
como um fio.

03:48.510 --> 03:51.620
Isto então diz à Webpack que já haverá mapas de origem

03:51.620 --> 03:53.700
gerados, que devem ser extraídos e

03:53.700 --> 03:57.210
basicamente conectados corretamente ao pacote que gera,

03:57.210 --> 04:00.170
de modo que, enquanto obtemos tal pacote, ainda temos

04:00.170 --> 04:03.603
uma grande experiência de desenvolvimento.

04:05.830 --> 04:08.360
Agora com isso podemos usar o Webpack, e a

04:08.360 --> 04:09.823
questão é como usá-lo?

04:11.000 --> 04:14.720
Uma maneira simples de utilizá-lo é ir até a embalagem. json file, e lá vamos adicionar

04:14.720 --> 04:16.650
um roteiro.

04:16.650 --> 04:18.440
Por exemplo, construir.

04:18.440 --> 04:19.810
Você pode dar-lhe o nome que

04:19.810 --> 04:21.620
quiser aqui na seção de roteiros.

04:21.620 --> 04:23.930
E aí, basta rodar Webpack, então

04:23.930 --> 04:26.453
basta digitar Webpack como este.

04:27.560 --> 04:29.880
Vamos agora também para a pasta dist,

04:29.880 --> 04:32.993
e no final removemos tudo o que está lá dentro, e com

04:34.000 --> 04:36.870
essa economia, agora rodamos npm run build e vamos

04:36.870 --> 04:38.663
ver se isso funciona.

04:39.970 --> 04:43.000
E falha...

04:45.440 --> 04:47.800
Sim, eu simplesmente recebi uma gralha,

04:47.800 --> 04:51.440
que não deveria ser um devtool, mas um devtool aqui.

04:51.440 --> 04:53.830
Então mude isto para devtool no arquivo de configuração

04:53.830 --> 04:56.143
e agora vamos repetir npm run build.

04:59.500 --> 05:02.620
E, com isso, você pode ignorar o aviso que recebe aqui.

05:02.620 --> 05:04.230
Você verá que no arquivo dist,

05:04.230 --> 05:06.410
você tem um arquivo Js empacotado.

05:06.410 --> 05:08.150
E o que você vê ali também já

05:08.150 --> 05:09.960
é um código bastante ilegível,

05:09.960 --> 05:14.060
porque temos esta minificação em ação aqui na verdade.

05:14.060 --> 05:18.680
Portanto, na verdade este já é também este código otimizado.

05:18.680 --> 05:21.410
Agora, antes de vermos como também podemos trabalhar

05:21.410 --> 05:23.490
com diferentes configurações aqui, vamos

05:23.490 --> 05:26.120
realmente ao índice. html, e ajustar nossas

05:26.120 --> 05:27.510
importações aqui e o pacote

05:27.510 --> 05:30.350
de pontos. js, e no momento, como ainda

05:30.350 --> 05:32.220
não estamos usando o Webpack

05:32.220 --> 05:35.140
Dev Server, vamos correr npm começar a trazer

05:35.140 --> 05:38.480
esse índice à tona. arquivo html novamente.

05:38.480 --> 05:40.510
E se você agora recarregar

05:40.510 --> 05:44.890
esta página, você vê que isto funciona!

05:44.890 --> 05:46.610
Se entrarmos em algo aqui, nosso

05:46.610 --> 05:49.230
projeto funciona como deveria, e ele importa

05:49.230 --> 05:52.030
o arquivo Js empacotado aqui, então apenas um

05:52.030 --> 05:56.200
arquivo em vez de todos esses arquivos individuais.

05:56.200 --> 05:59.020
E isso já é uma melhoria.

05:59.020 --> 06:01.640
Aqui já temos o código agrupado que evita

06:01.640 --> 06:05.410
todos estes pedidos de htp desnecessários.

06:05.410 --> 06:07.690
E se você for para a guia fontes, e quiser

06:07.690 --> 06:09.420
depurar seu código, você encontrará

06:09.420 --> 06:11.250
esta pasta Webpack, e lá uma pasta

06:11.250 --> 06:12.770
de fontes, e lá você pode ir

06:12.770 --> 06:15.300
para seus arquivos TypeScript.

06:15.300 --> 06:19.090
E, por exemplo, aqui, na entrada do projeto, você também pode

06:19.090 --> 06:22.110
definir um ponto de parada aqui no CollectUserInput,

06:22.110 --> 06:24.970
e se você agora apertar o botão, ele pára lá, e

06:24.970 --> 06:26.190
você pode depurar seu

06:26.190 --> 06:27.680
código.

06:27.680 --> 06:29.650
E são os mapas de origem que estão chegando,

06:29.650 --> 06:31.200
que realmente nos ajudam a desenvolver

06:31.200 --> 06:34.050
e que facilitam nossa vida como desenvolvedores.

06:34.050 --> 06:37.520
Temos este código otimizado, mas graças aos mapas de origem podemos

06:37.520 --> 06:40.750
depurar nosso código TypeScript original aqui.

06:40.750 --> 06:43.260
Portanto, já temos uma configuração bastante

06:43.260 --> 06:46.280
surpreendente, o que já nos dá muitas otimizações,

06:46.280 --> 06:48.440
agora vamos terminar isto e nos certificar

06:48.440 --> 06:52.050
de que realmente temos o Webpack Dev Server incluído, e então

06:52.050 --> 06:54.440
realmente temos dois fluxos de trabalho,

06:54.440 --> 06:58.443
um para produção, e outro para desenvolvimento.
