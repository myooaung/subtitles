WEBVTT

00:02.120 --> 00:04.420
Instructeur: Naast het maken van een decorator

00:04.420 --> 00:07.060
als deze, kunnen we ook een decoratorfabriek definiÃ«ren,

00:07.060 --> 00:10.150
die in feite een decoratorfunctie teruggeeft, maar ons in

00:10.150 --> 00:13.120
staat stelt deze te configureren wanneer we hem als decorator

00:13.120 --> 00:15.440
aan iets toewijzen.

00:15.440 --> 00:18.210
Om dit te laten zien, laten we deze functie hier

00:18.210 --> 00:19.790
omzetten in een fabriek.

00:19.790 --> 00:22.260
Daarvoor pak ik dit constructor argument en verwijder

00:22.260 --> 00:24.170
het, en in plaats daarvan geef ik hier

00:24.170 --> 00:26.120
een nieuwe, anonieme functie terug

00:26.120 --> 00:28.000
die dat constructor argument neemt

00:28.000 --> 00:29.920
en die dan deze logging vasthoudt die

00:29.920 --> 00:33.070
ik wil uitvoeren binnen de decorator, dus die verplaats ik

00:33.070 --> 00:34.610
daarheen.

00:34.610 --> 00:37.890
Dus nu hebben we een functie die een nieuwe functie teruggeeft.

00:37.890 --> 00:40.780
Dus als we nu deze decorator willen toepassen, moeten

00:40.780 --> 00:43.350
we hem hier uitvoeren als een functie, zodat we

00:43.350 --> 00:45.740
deze buitenste functie uitvoeren en de retourwaarde,

00:45.740 --> 00:47.670
die deze binnenste functie is, die

00:47.670 --> 00:49.000
onze geldige decoratorfunctie

00:49.000 --> 00:53.430
is, als een decorator aan de klasse koppelen.

00:53.430 --> 00:54.740
Waarom zouden we dat doen?

00:54.740 --> 00:56.630
Want nu kunnen we hier bijvoorbeeld

00:56.630 --> 00:59.440
een logboekstring accepteren, wat een string

00:59.440 --> 01:00.390
is, een willekeurig

01:00.390 --> 01:01.790
argument naar keuze en

01:01.790 --> 01:03.750
zoveel argumenten als je wilt, en

01:03.750 --> 01:08.230
daar een waarde voor doorgeven in "logging - person" en dat gebruiken in

01:08.230 --> 01:11.280
onze decoratorfunctie zodat we hier, in plaats van

01:11.280 --> 01:14.470
de standaard logboektekst, onze logboekstring laten

01:14.470 --> 01:16.300
zien.

01:16.300 --> 01:18.540
Nu kunnen we dus de waarden aanpassen

01:18.540 --> 01:22.100
die de decoratiefunctie gebruikt wanneer hij wordt uitgevoerd

01:22.100 --> 01:25.000
met onze fabrieksfunctie.

01:25.000 --> 01:27.410
We noemen nu onze decorator hier, omdat

01:27.410 --> 01:30.710
we niet de decoratorfunctie uitvoeren, maar een

01:30.710 --> 01:33.290
functie uitvoeren die zo'n decoratorfunctie

01:33.290 --> 01:35.060
teruggeeft.

01:35.060 --> 01:36.940
En het voordeel hiervan is dat

01:36.940 --> 01:40.790
we nu waarden kunnen doorgeven die worden gebruikt door die binnenste

01:40.790 --> 01:43.750
geretourneerde decoratorfunctie.

01:43.750 --> 01:47.050
Dus, als ik dat nu opsla, zien we de oude uitvoer, maar

01:47.050 --> 01:49.940
met onze aangepaste logboekstring hier.

01:49.940 --> 01:53.010
Het gebruik van decoratorfabrieken kan ons

01:53.010 --> 01:55.730
dus meer macht geven en meer mogelijkheden

01:55.730 --> 01:59.973
om te configureren wat de decorator dan intern doet.
