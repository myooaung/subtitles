WEBVTT

00:02.210 --> 00:04.920
ผู้บรรยาย: ตอนนี้ ผู้พิทักษ์ประเภทพิเศษ คุณอาจพูดได้ว่า

00:04.920 --> 00:10.000
หรือบางอย่างที่ช่วยคุณในเรื่องผู้พิทักษ์ นั่นคือสหภาพที่ถูกเลือกปฏิบัติ

00:10.000 --> 00:11.300
ตอนนี้นั่นคืออะไร

00:11.300 --> 00:15.030
เป็นรูปแบบที่คุณสามารถใช้เมื่อทำงานกับประเภทสหภาพ

00:15.030 --> 00:18.900
ซึ่งทำให้การติดตั้งตัวป้องกันประเภทง่ายขึ้น

00:18.900 --> 00:22.000
พร้อมใช้งานเมื่อคุณทำงานกับประเภทวัตถุ

00:22.000 --> 00:24.580
ให้ฉันแสดงวิธีการทำงาน

00:24.580 --> 00:26.850
สมมติว่าเรามีอินเทอร์เฟซสองสามตัว และนี่อาจเป็นคลาสได้เช่นกัน

00:26.850 --> 00:32.193
แต่ที่นี่ฉันจะดูอินเทอร์เฟซเพื่อแสดงว่ามันใช้งานได้กับอินเทอร์เฟซเหล่านั้นเช่นกัน

00:33.170 --> 00:40.973
และที่นั่นฉันมีนกซึ่งมีความเร็วในการบินซึ่งควรเป็นหมายเลขประเภท

00:42.660 --> 00:45.890
และฉันก็มีม้าของฉันซึ่งมีความเร็วพื้นหรือความเร็ววิ่ง

00:45.890 --> 00:51.913
ซึ่งควรเป็นหมายเลขประเภท

00:53.130 --> 00:55.430
เราจึงมีอินเทอร์เฟซทั้งสองนี้ที่นี่

00:55.430 --> 01:03.370
ตอนนี้เราสร้างสหภาพประเภทสัตว์ซึ่งเป็นนกหรือม้า

01:03.370 --> 01:08.480
และเช่นเดิม เราอาจมีหน้าที่ เคลื่อนย้ายสัตว์ที่รับสัตว์เป็นอินพุต

01:09.800 --> 01:14.800
ซึ่งเป็นสัตว์ประเภทหนึ่ง ดังนั้นใช้ประเภทสหภาพของเรา

01:14.800 --> 01:25.180
และตอนนี้ฉันอยากจะบอกว่าเคลื่อนที่ด้วยความเร็ว และตอนนี้ฉันต้องเข้าถึงความเร็วบินหรือความเร็ววิ่ง

01:25.180 --> 01:27.730
แน่นอนว่าตอนนี้ เราอาจเรียกมันว่าความเร็วก็ได้

01:27.730 --> 01:30.840
แต่นี่เป็นเพียงตัวอย่างง่ายๆ ของกรณีการใช้งานจริงที่คุณอาจพบ

01:30.840 --> 01:40.500
ซึ่งโดยทั่วไปแล้วคุณมีอินเทอร์เฟซหรือวัตถุบางอย่างที่เกี่ยวข้องกัน แต่มีคุณสมบัติหรือวิธีการต่างกัน

01:40.500 --> 01:42.050
ตรงนี้ มันคือคุณสมบัติความเร็ว

01:42.050 --> 01:43.900
ซึ่งจริงๆ แล้วแตกต่างกัน

01:43.900 --> 01:49.240
ดังนั้นมันจึงไม่สามารถเข้าถึงความเร็วในการบินได้ เพราะแน่นอนว่าไม่ใช่สัตว์ทุกชนิดที่มีความเร็วในการบิน

01:49.240 --> 01:51.210
ตอนนี้เราสามารถทำสิ่งที่เราเรียนรู้มาก่อน

01:51.210 --> 01:56.063
เราสามารถตรวจสอบว่าความเร็วในการบินอยู่ในสัตว์หรือไม่

01:58.240 --> 02:01.063
และถ้าเป็นกรณีนี้ เราสามารถรันโค้ดนี้ได้

02:01.960 --> 02:04.470
นี่เป็นแนวทางที่เราสามารถทำได้ แต่ยิ่งเราไปถึงสัตว์ที่มีศักยภาพมากขึ้น

02:04.470 --> 02:09.233
เราก็ยิ่งต้องตรวจสอบสิ่งต่างๆ มากขึ้น

02:10.880 --> 02:14.100
เราสามารถพิมพ์ผิดที่นี่ในสตริงนี้

02:14.100 --> 02:18.460
เราสามารถลืม E ได้ และสงสัยว่าทำไมมันใช้ไม่ได้

02:18.460 --> 02:20.410
ตอนนี้ เราไม่สามารถใช้อินสแตนซ์ของที่นี่ได้

02:20.410 --> 02:22.570
เพราะฉันกำลังทำลายอินเตอร์เฟส

02:22.570 --> 02:27.490
อย่างที่ฉันอธิบาย อินสแตนซ์สัตว์ของนกจะไม่ทำงาน เนื่องจากข้อมูลเป็นอินเทอร์เฟซ

02:27.490 --> 02:31.840
ซึ่งไม่ได้คอมไพล์เป็น JavaScript

02:31.840 --> 02:36.210
ดังนั้น ณ รันไทม์ ฟังก์ชันนี้จะไม่สามารถใช้ได้ในฐานะฟังก์ชันคอนสตรัคเตอร์

02:36.210 --> 02:37.690
ดังนั้นจึงไม่ได้ผล

02:37.690 --> 02:42.460
ตอนนี้เราสามารถสร้างสหภาพที่แบ่งแยกที่นี่โดยให้ทุกส่วนต่อประสาน

02:42.460 --> 02:47.130
ดังนั้นทุกรายการที่ควรเป็นส่วนหนึ่งของสหภาพและทรัพย์สินเพิ่มเติม

02:47.130 --> 02:48.640
คุณสามารถใช้ชื่อใดก็ได้ที่คุณต้องการ

02:48.640 --> 02:51.490
บ่อยครั้งที่คุณใช้ kind หรือพิมพ์ที่นี่

02:51.490 --> 02:55.090
ฉันจะไปพิมพ์และตั้งชื่อนกตัวนี้

02:55.090 --> 02:57.480
สิ่งสำคัญตอนนี้ เรากำลังซื้อขายอินเทอร์เฟซที่นี่

02:57.480 --> 03:02.480
นี่จึงไม่ใช่ค่าสำหรับคุณสมบัติประเภท

03:02.650 --> 03:05.410
นี่เป็นประเภทตัวอักษรแทนที่คุณได้เรียนรู้

03:05.410 --> 03:09.110
โดยที่ประเภทต้องถือสาย ซึ่งต้องเป็นนก

03:09.110 --> 03:10.880
นี่คือการกำหนดประเภท

03:10.880 --> 03:17.590
ซึ่งเราจะจำกัดค่าที่อาจจัดเก็บในประเภทให้แคบลงให้เท่ากับค่าสตริงนี้

03:17.590 --> 03:19.810
จากนั้นทำเช่นเดียวกันกับม้า

03:19.810 --> 03:22.283
เพียงแค่ใช้ม้าเป็นตัวอักษร

03:23.400 --> 03:25.060
ในที่นี้ ในฟังก์ชันของเรา

03:25.060 --> 03:27.550
เราสามารถใช้คำสั่ง switch

03:27.550 --> 03:32.280
และเปิดสวิตช์ชนิดจุดสัตว์ได้

03:32.280 --> 03:38.350
สัตว์ทุกตัวมีคุณสมบัติประเภทเนื่องจากเราได้เพิ่มลงในอินเทอร์เฟซทั้งหมดที่ประกอบกันเป็นสัตว์ของเรา

03:38.350 --> 03:42.330
และที่นี่เราสามารถมีบางกรณีที่เราได้การเติมข้อความอัตโนมัติด้วยซ้ำ

03:42.330 --> 03:49.040
เนื่องจาก TypeScript และ IDE ของเราเข้าใจว่าประเภทนั้นสามารถเป็นนกหรือม้าเท่านั้น

03:49.040 --> 03:55.003
และถ้าเป็นนก เราก็สามารถตั้งค่าความเร็วตัวแปรภายในได้

03:55.900 --> 04:02.250
เช่น ความเร็วในการบินของจุดสัตว์ แล้วแตกหลังจากนั้น

04:02.250 --> 04:11.753
มิฉะนั้น ถ้ากรณีเป็นม้า เราจะตั้งค่าความเร็วเท่ากับความเร็วในการวิ่งของจุดสัตว์

04:14.150 --> 04:17.490
และหลังจากนั้นเราสามารถบันทึกบันทึกได้

04:17.490 --> 04:20.843
เคลื่อนที่ด้วยความเร็วบวกความเร็ว

04:22.490 --> 04:26.540
ถ้าตอนนี้ฉันเรียก เคลื่อนย้ายสัตว์ด้วยสัตว์ที่ฉันสร้างได้ทันทีที่นี่

04:26.540 --> 04:30.300
ซึ่งฉันตั้งค่าประเภทเป็นนกและอนุญาตให้ใช้เฉพาะนกหรือม้า

04:30.300 --> 04:34.930
จากนั้นฉันต้องตั้งค่าความเร็วในการบิน และอย่างไรก็ตาม TypeScript

04:36.140 --> 04:48.980
ยังจดจำได้ ที่แนวคิดความเร็วในการวิ่งที่นี่เพื่อพยายามทำสิ่งนั้นและตั้งค่านี้เป็น 10 มันบ่นว่าสิ่งนี้ไม่พร้อมใช้งานสำหรับนกประเภท

04:48.980 --> 04:51.360
ถ้าฉันตั้งค่าเป็นความเร็วในการบิน

04:51.360 --> 04:57.700
แต่มันก็ใช้งานได้ ถ้าเราบันทึกมัน มันจะแสดงผลอย่างถูกต้องและคอมไพล์โดยไม่มีข้อผิดพลาด

04:57.700 --> 05:04.060
ขณะนี้เป็นสหภาพที่เลือกปฏิบัติเนื่องจากเรามีคุณสมบัติทั่วไปอย่างหนึ่งในทุกอ็อบเจ็กต์ที่ประกอบกันเป็นยูเนียนของเรา

05:04.060 --> 05:11.490
ซึ่งอธิบายถึงอ็อบเจ็กต์นั้น เพื่อให้เราสามารถใช้คุณสมบัตินี้ที่อธิบายอ็อบเจ็กต์นี้ในเช็คของเราเพื่อให้มีประเภทความปลอดภัย

05:11.490 --> 05:21.930
100% และเข้าใจว่าคุณสมบัติใด พร้อมใช้งานสำหรับวัตถุดังกล่าวและคุณสมบัติใดที่ไม่มี

05:21.930 --> 05:28.060
นี่เป็นรูปแบบที่มีประโยชน์ที่แปลกใหม่ซึ่งคุณสามารถใช้เมื่อทำงานกับวัตถุและประเภทสหภาพ

05:28.060 --> 05:30.340
และยังใช้งานได้กับอินเทอร์เฟซ

05:30.340 --> 05:37.050
เนื่องจากอินเทอร์เฟซนี้บังคับให้ทุกออบเจกต์ที่คุณสร้างตามอินเทอร์เฟซนี้มีประเภทนี้

05:37.050 --> 05:39.400
ดังนั้น แทนที่จะตรวจสอบการมีอยู่ของพร็อพเพอร์ตี้หนึ่งๆ

05:39.400 --> 05:41.200
หรือแทนที่จะใช้อินสแตนซ์ของ

05:41.200 --> 05:49.020
เราจะใช้พร็อพเพอร์ตี้ที่เรารู้ว่ามีอยู่เพื่อตรวจสอบประเภทของอ็อบเจ็กต์ที่เรากำลังทำงานด้วย

05:49.020 --> 05:51.930
นอกจากนี้ เรายังขจัดอันตรายจากการพิมพ์ผิดเนื่องจาก

05:51.930 --> 05:54.730
TypeScript เข้าใจว่ากรณีประเภทสัตว์ที่เราสามารถทำได้ในที่นี้คือนกและม้าเท่านั้น

05:54.730 --> 06:04.690
และด้วยเหตุนี้จึงทำให้เรามีศิลปะที่สมบูรณ์ และหากคุณแนะนำการพิมพ์ผิด เราจะได้รับข้อผิดพลาดทันที .

06:04.690 --> 06:09.333
ดังนั้น นี่จึงเป็นรูปแบบที่มีประโยชน์มากเมื่อทำงานกับอ็อบเจกต์และประเภทยูเนี่ยน
