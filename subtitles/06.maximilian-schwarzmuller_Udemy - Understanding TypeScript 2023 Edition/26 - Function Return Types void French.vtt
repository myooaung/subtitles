WEBVTT

00:02.200 --> 00:04.080
Instructeur : Il est temps de créer un nouveau dossier.

00:04.080 --> 00:09.080
Je vais renommer l'application. ts ici pour les pseudonymes de l'union. ts, et ajoutez une nouvelle

00:11.100 --> 00:13.760
application. ts où nous pouvons recommencer

00:13.760 --> 00:16.370
à zéro, fermer l'autre fichier.

00:16.370 --> 00:20.660
Et maintenant, ici, je veux plonger un peu plus dans les fonctions.

00:20.660 --> 00:22.640
Maintenant, bien sûr, avec des fonctions déjà travaillées.

00:22.640 --> 00:24.940
Par exemple, ici dans le fichier des alias de l'union

00:24.940 --> 00:26.340
avec la fonction combine.

00:26.340 --> 00:29.260
Et par exemple, vous avez vu que pour les fonctions, vous

00:29.260 --> 00:32.520
pouvez affecter des types aux paramètres des fonctions.

00:32.520 --> 00:34.310
Eh bien, il s'avère qu'il y a un peu plus

00:34.310 --> 00:36.483
à faire avec les fonctions et les types.

00:37.590 --> 00:40.430
Pour cela, je vais recréer ma fonction add, qui accepte simplement

00:40.430 --> 00:43.373
des nombres, et non des chaînes de caractères.

00:44.270 --> 00:48.340
Ce qui fait une chose simple, il retourne n un plus n deux, donc pas

00:48.340 --> 00:49.513
trop compliqué.

00:51.004 --> 00:53.740
Comme je l'ai mentionné, nous pouvons attribuer des types aux paramètres,

00:53.740 --> 00:55.180
ce n'est pas nouveau.

00:55.180 --> 00:57.030
La fonction dans son ensemble

00:57.030 --> 01:01.050
a cependant un autre type important, elle a un type de retour.

01:01.050 --> 01:03.990
Et ici le type de retour est déduit par TypeScript.

01:03.990 --> 01:06.490
On peut le voir si on passe la souris sur add.

01:06.490 --> 01:10.760
Ici, à la fin, les deux points après la liste des paramètres,

01:10.760 --> 01:14.190
ce ici, décrit le type de retour de la fonction.

01:14.190 --> 01:16.800
Donc le type de la valeur retournée.

01:16.800 --> 01:20.020
Ici, je renvoie l'addition de n un et n deux.

01:20.020 --> 01:23.050
Et puisque ces deux entrées sont des nombres, TypeScript est

01:23.050 --> 01:24.930
capable de déduire que le résultat de cette

01:24.930 --> 01:26.770
fonction sera un nombre, et puisque nous

01:26.770 --> 01:28.820
le retournons, que le type de retour de cette

01:28.820 --> 01:30.830
fonction sera un nombre.

01:30.830 --> 01:33.320
Si vous les concaténiez en tant que chaînes

01:33.320 --> 01:35.363
ici, avec toString par exemple,

01:36.550 --> 01:39.030
TypeScript en déduirait correctement

01:39.030 --> 01:41.900
que nous renvoyons une chaîne ici.

01:41.900 --> 01:44.350
Bien entendu, nous pouvons toujours attribuer explicitement

01:44.350 --> 01:46.910
un type de retour ici en ajoutant deux points après la liste

01:46.910 --> 01:48.490
des paramètres, puis le type que vous

01:48.490 --> 01:51.263
voulez retourner, comme un nombre.

01:52.850 --> 01:54.560
Il s'agit du même type que celui de l'inférence.

01:54.560 --> 01:56.760
Si, par exemple, j'attribuais à ce paramètre

01:56.760 --> 02:00.020
la valeur string, j'obtiendrais une erreur, car mon calcul

02:00.020 --> 02:03.540
ne correspond manifestement pas au type de retour décrit.

02:03.540 --> 02:06.480
Maintenant, tout comme pour les variables, c'est une bonne idée de

02:06.480 --> 02:10.080
laisser TypeScript faire son travail en ce qui concerne l'inférence de type.

02:10.080 --> 02:12.610
Et si vous n'avez aucune raison spécifique

02:12.610 --> 02:14.810
de définir explicitement le type,

02:14.810 --> 02:17.090
vous ne devez donc pas définir le type,

02:17.090 --> 02:20.470
et laisser TypeScript déduire le type.

02:20.470 --> 02:22.660
En ce qui concerne les types de retour, il y a un type

02:22.660 --> 02:25.910
intéressant que nous n'avons pas vu auparavant, et qui pourrait être tout

02:25.910 --> 02:27.530
à fait nouveau pour vous si vous avez de

02:27.530 --> 02:30.240
l'expérience avec d'autres langages de programmation.

02:30.240 --> 02:31.200
Parce que c'est un type

02:31.200 --> 02:33.250
qui n'existe pas vraiment en JavaScript.

02:33.250 --> 02:35.180
C'est le type de vide.

02:35.180 --> 02:38.160
Disons que nous avons la méthode printResult.

02:38.160 --> 02:41.190
Là, nous obtenons un argument numérique,

02:41.190 --> 02:44.120
qui devrait être un, eh bien, un nombre.

02:44.120 --> 02:47.510
Et là-dedans, je veux consoler. log num.

02:47.510 --> 02:49.450
Et je veux consoler. l'enregistrer comme

02:49.450 --> 02:52.150
une partie d'une chaîne, où je dis résultat plus num.

02:52.150 --> 02:53.670
Donc maintenant, cela sera concaténé

02:53.670 --> 02:56.090
en une longue chaîne de caractères, et sera affiché.

02:56.090 --> 02:57.777
Et maintenant je peux appeler printResult.

02:57.777 --> 03:01.020
Et par exemple, faire passer à travers cela le résultat

03:01.020 --> 03:05.010
de mon appel à la fonction add, avec cinq plus, disons 12.

03:05.010 --> 03:07.670
J'exécute donc un ajout ici, avec deux numéros.

03:07.670 --> 03:10.160
Et le résultat de cette opération, c'est-à-dire ce que renvoie

03:10.160 --> 03:13.130
add, est ensuite passé comme argument dans printResult.

03:13.130 --> 03:15.780
Et ça devrait l'imprimer sur la console.

03:15.780 --> 03:19.150
Si nous compilons maintenant ce résultat et que nous le regardons

03:19.150 --> 03:21.110
dans notre page, ou sur notre page ici,

03:21.110 --> 03:24.280
nous voyons le résultat 17, ce qui est logique.

03:24.280 --> 03:25.660
La chose intéressante ici

03:25.660 --> 03:27.640
est le type de retour de printResult.

03:27.640 --> 03:30.353
Quel est, selon vous, le type de retour ici ?

03:31.240 --> 03:33.240
Alors peut-être que tu penses que c'est une

03:33.240 --> 03:35.150
chaîne, parce que je crée une chaîne ici.

03:35.150 --> 03:37.360
Mais gardez à l'esprit que nous ne rendons pas ça.

03:37.360 --> 03:39.400
Nous ne rendons rien ici.

03:39.400 --> 03:42.010
Et donc cette fonction printResult

03:42.010 --> 03:44.990
ici a un type de retour spécial, void.

03:44.990 --> 03:47.910
Vous avez peut-être remarqué le type de retour void dans d'autres

03:47.910 --> 03:49.830
langages de programmation.

03:49.830 --> 03:52.230
Vous avez quelque chose comme ça.

03:52.230 --> 03:53.940
JavaScript ne le sait pas vraiment,

03:53.940 --> 03:56.740
ou n'a pas vraiment de nom pour cette situation.

03:56.740 --> 03:58.590
TypeScript, en revanche, le fait.

03:58.590 --> 04:01.840
Donc, en effet, cette fonction ici a un type de retour de void.

04:01.840 --> 04:04.065
Et bien sûr, vous n'avez pas besoin de le préciser ici.

04:04.065 --> 04:06.440
L'inférence de TypeScript a fait son travail.

04:06.440 --> 04:07.630
Mais je veux qu'il soit

04:07.630 --> 04:09.610
vraiment clair que le type de retour

04:09.610 --> 04:13.730
est void, c'est pourquoi je l'ajoute ici, à des fins de démonstration.

04:13.730 --> 04:17.070
Maintenant, void signifie simplement que cette fonction

04:17.070 --> 04:21.020
n'a pas de déclaration de retour, elle ne renvoie rien.

04:21.020 --> 04:24.540
Il s'achève avec succès, il fait son travail.

04:24.540 --> 04:28.170
Il exécute son code, il ne produit pas d'erreur

04:28.170 --> 04:32.550
ou autre chose du genre, mais il ne renvoie ensuite rien.

04:32.550 --> 04:34.990
C'est le type de retour void.

04:34.990 --> 04:37.330
Maintenant, techniquement en JavaScript, bien sûr, si

04:37.330 --> 04:39.490
nous voulons console. enregistre le résultat

04:39.490 --> 04:43.550
de printResult ici et je compile maintenant ceci, et nous voyons

04:43.550 --> 04:46.270
ce qui est affiché ici sur la page.

04:46.270 --> 04:49.480
Nous voyons qu'undefined est retourné par cela.

04:49.480 --> 04:51.540
Techniquement, et c'est vraiment

04:51.540 --> 04:56.450
intéressant, en JavaScript, si nous utilisons la valeur de retour d'une fonction

04:56.450 --> 05:00.830
qui ne renvoie rien, nous obtenons une valeur indéfinie.

05:00.830 --> 05:03.730
Et comme vous le savez probablement, indéfini en JavaScript

05:03.730 --> 05:05.720
est en fait une valeur réelle.

05:05.720 --> 05:08.430
Une valeur que vous obtenez également, par exemple, si

05:08.430 --> 05:11.880
vous essayez d'accéder à une propriété sur un objet qui n'existe pas.

05:11.880 --> 05:13.670
Donc ici nous obtenons void,

05:13.670 --> 05:16.680
même si techniquement cela renvoie undefined.

05:16.680 --> 05:19.020
Et pour rendre les choses encore plus

05:19.020 --> 05:23.300
confuses, undefined est en fait un type en TypeScript.

05:23.300 --> 05:25.640
Vous pouvez avoir indéfini comme type.

05:25.640 --> 05:29.570
Et par exemple, une toute nouvelle variable, someValue, peut recevoir

05:30.770 --> 05:33.270
undefined comme type, et vous n'obtiendrez

05:33.270 --> 05:34.700
pas d'erreur.

05:34.700 --> 05:37.380
Cette variable sera désormais indéfinie à jamais.

05:37.380 --> 05:39.970
L'utilité d'une telle mesure est une autre question.

05:39.970 --> 05:43.720
Mais undefined est un type valide en TypeScript.

05:43.720 --> 05:46.600
Néanmoins, ici vous voyez que nous avons une erreur.

05:46.600 --> 05:48.010
Et on a une erreur parce qu'une

05:48.010 --> 05:51.690
fonction n'est pas autorisée à retourner undefined.

05:51.690 --> 05:53.300
Techniquement, c'est bien sûr le cas,

05:53.300 --> 05:56.850
mais TypeScript considère les fonctions de manière un peu différente.

05:56.850 --> 06:00.200
Vous devriez utiliser void ici si une fonction ne renvoie

06:00.200 --> 06:04.300
rien, et non pas undefined, car avec void vous indiquez clairement que

06:04.300 --> 06:05.940
cette fonction n'a délibérément

06:05.940 --> 06:08.260
pas de déclaration de retour.

06:08.260 --> 06:10.690
Si vous dites undefined ici, alors TypeScript

06:10.690 --> 06:13.460
s'attend à ce que vous ayez une déclaration

06:13.460 --> 06:17.080
de retour où vous ne retournez pas de valeur.

06:17.080 --> 06:18.660
C'est la différence technique.

06:18.660 --> 06:20.670
Maintenant vous voyez que je n'ai pas d'erreur.

06:20.670 --> 06:22.860
Du point de vue de JavaScript,

06:22.860 --> 06:26.610
c'est essentiellement la même chose que ceci.

06:26.610 --> 06:29.050
Mais TypeScript fait une différence ici, et donc

06:29.050 --> 06:31.240
void est le type que vous devez utiliser si

06:31.240 --> 06:33.760
vous n'avez pas de déclaration de retour.

06:33.760 --> 06:37.200
Undefined, dont vous aurez rarement besoin, pour être honnête,

06:37.200 --> 06:41.100
peut être utilisé si vous retournez sans retourner une valeur réelle.

06:41.100 --> 06:45.750
Mais là encore, il s'agit d'un cas d'utilisation rare, et vous pourriez également utiliser void avec une

06:45.750 --> 06:47.560
déclaration de retour comme celle-ci.

06:47.560 --> 06:49.040
Vous n'obtiendrez pas d'erreur.

06:49.040 --> 06:50.610
Et par défaut, vous utiliserez

06:50.610 --> 06:52.770
toujours void dans ce scénario.

06:52.770 --> 06:54.680
Sauf si vous avez vraiment une fonction

06:54.680 --> 06:56.750
qui doit produire de l'indéfini, et que vous

06:56.750 --> 06:58.620
voulez être clair à ce sujet.

06:58.620 --> 07:01.430
Mais là encore, ce sera rarement le cas.

07:01.430 --> 07:03.620
Je veux juste m'assurer ici que vous comprenez

07:03.620 --> 07:05.870
la différence entre void et undefined, que

07:05.870 --> 07:08.160
void est la norme que vous utiliserez dans pratiquement

07:08.160 --> 07:10.930
tous les scénarios où vous avez une fonction qui ne renvoie

07:10.930 --> 07:15.770
pas de valeur, et que vous pouvez l'assigner explicitement.

07:15.770 --> 07:18.780
Mais bien sûr, TypeScript est également capable de le déduire,

07:18.780 --> 07:20.440
comme il le ferait ici aussi.

07:20.440 --> 07:23.083
J'ai juste ajouté ceci à des fins de démonstration ici.
