WEBVTT

00:02.160 --> 00:09.948
-: ในโครงการของเรา ถ้าคุณต้องการใช้ webpack ที่นั่น ก่อนอื่นฉันจะออกจากการคอมไพล์ของฉันและเซิร์ฟเวอร์การพัฒนาปัจจุบันนั้น และจากนั้น

00:09.948 --> 00:10.870
stat ตรวจสอบให้แน่ใจว่าเราสามารถใช้

00:10.870 --> 00:13.440
webpack ที่นั่นได้

00:13.440 --> 00:16.420
เนื่องจากไฟล์นี้เป็นไฟล์ของไฟล์ package dot json อยู่แล้ว

00:16.420 --> 00:21.050
เราจึงสามารถใช้ NPM เพื่อติดตั้งการพึ่งพาเพิ่มเติมในโปรเจ็กต์นี้

00:21.050 --> 00:24.940
พูดง่ายๆ ก็คือเราต้องการไลบรารีของบุคคลที่สามเพิ่มเติมในโปรเจ็กต์นี้

00:24.940 --> 00:31.480
และในที่นี้ ฉันไม่ได้หมายถึงไลบรารีของบุคคลที่สามซึ่งมีฟังก์ชันการทำงานบางอย่างโดยใช้โค้ดของเรา

00:31.480 --> 00:40.430
แต่หมายถึงไลบรารีของบุคคลที่สามที่ช่วยเราตั้งค่าเวิร์กโฟลว์และการกำหนดค่าโครงการที่ทำให้การพัฒนามีประสิทธิภาพมากสำหรับเรา

00:40.430 --> 00:45.110
เราทำสิ่งนี้โดยติดตั้ง NPM, dash dash safe dash dev

00:45.110 --> 00:48.600
เพื่อระบุว่าเป็นการพึ่งพาการพัฒนาเท่านั้น

00:48.600 --> 00:53.600
จากนั้นจึงใช้ webpack webpack dash CLI, webpack dash

00:53.713 --> 00:58.713
dev dash server typescript และ ts loader

01:01.030 --> 01:04.800
นั่นคือแพ็คเกจมากมายและฉันจะบอกว่าพวกเขาทำอะไรในอีกไม่กี่วินาที

01:04.800 --> 01:10.801
ก่อนอื่นให้กด Enter และตรวจสอบให้แน่ใจว่าตอนนี้ทั้งหมดได้รับการติดตั้งในโครงการของเราที่นี่แล้ว

01:10.801 --> 01:14.100
หลังจากนั้นเราจะดูที่แต่ละแพ็คเกจและดูว่าทำไมเราจึงติดตั้ง

01:14.100 --> 01:16.290
ดังนั้นเรามารอให้เสร็จสิ้น

01:16.290 --> 01:18.530
ดังนั้นมันจึงเสร็จสิ้นการติดตั้งให้ฉันที่นี่

01:18.530 --> 01:21.710
และตอนนี้เรามาวิเคราะห์สิ่งที่เราติดตั้งกัน

01:21.710 --> 01:27.063
ในแพ็คเกจ dot json ส่วนการพึ่งพา dev ใหม่หรือมีอยู่แล้ว แต่ตอนนี้เรามีแพ็คเกจใหม่จำนวนมากที่นั่น

01:27.063 --> 01:31.290
ฉันควรจะพูดว่าแพ็คเกจเหล่านี้ถูกเพิ่มเข้ามา

01:31.290 --> 01:33.690
ตอนนี้แพ็คเกจเหล่านี้ทำอะไรได้บ้าง?

01:33.690 --> 01:35.460
เริ่มจากเว็บแพ็กกันก่อน

01:35.460 --> 01:37.580
Webpack เป็นเครื่องมือที่ฉันเพิ่งพูดถึง

01:37.580 --> 01:41.780
มันเป็นหัวใจของการตั้งค่าทั้งหมดที่เรากำลังจะสร้างขึ้น

01:41.780 --> 01:49.210
เป็นเครื่องมือที่ช่วยให้เราสามารถเสียบฟังก์ชันบางอย่างเพื่อรวมรหัสของเราและเพื่อแปลงรหัสของเรา

01:49.210 --> 01:52.470
และการแปลงส่วนรหัสของเรานั้นสำคัญ เรากำลังมีโครงการ

01:52.470 --> 01:54.740
typescript อยู่ใช่ไหม

01:54.740 --> 01:56.620
แน่นอนว่าตอนนี้เราสามารถใช้

01:56.620 --> 02:00.220
webpack เพื่อรวมเอาต์พุต JavaScript ทั้งหมดเข้าด้วยกันได้

02:00.220 --> 02:03.310
แต่จะดียิ่งขึ้นหาก webpack ทำทั้งสองอย่าง

02:03.310 --> 02:06.250
แปลงโค้ด typescript ของเราเป็น JavaScript

02:06.250 --> 02:10.180
แล้วปล่อยไฟล์ Javascript ที่รวมออกมาจริงๆ และ webpack

02:10.180 --> 02:13.420
สามารถทำได้ด้วยความยินดี

02:13.420 --> 02:16.610
เราต้องการ webpack CLI เพื่อเรียกใช้คำสั่ง webpack

02:16.610 --> 02:18.922
ในโครงการของเรา และเซิร์ฟเวอร์ webpack

02:18.922 --> 02:21.603
dev เพื่อให้มีเซิร์ฟเวอร์การพัฒนาในตัว ซึ่งเริ่มการทำงานของ

02:21.603 --> 02:27.056
webpack ภายใต้ประทุน ซึ่งจะเฝ้าดูไฟล์ของเราสำหรับการเปลี่ยนแปลง ทริกเกอร์ webpack

02:27.056 --> 02:30.180
เพื่อคอมไพล์ใหม่โดยอัตโนมัติเมื่อมีบางสิ่งเปลี่ยนแปลง

02:30.180 --> 02:34.760
และ รถที่ให้บริการเพจของเรา

02:34.760 --> 02:37.300
จากนั้นเราก็ได้ตัวโหลด typescript

02:37.300 --> 02:39.460
และตัวพิมพ์ ตัวโหลด ts ตรงนี้

02:39.460 --> 02:42.850
ตอนนี้เราได้ติดตั้ง typescript ทั่วโลกในเครื่องของเราแล้ว

02:42.850 --> 02:46.208
ซึ่งเป็นเหตุผลว่าทำไมเราจึงเรียกใช้ tsc dash w ได้

02:46.208 --> 02:49.760
แนวทางปฏิบัติที่ดีในการติดตั้งสำเนาของ typescript ต่อโปรเจ็กต์โดยอัตโนมัติคือแนวทางปฏิบัติที่ดี

02:49.760 --> 02:56.000
ดังนั้นสำหรับโปรเจ็กต์นี้ คุณจะได้เวอร์ชันของ typescript เฉพาะ

02:56.000 --> 02:58.320
ข้อดีที่ว่าถ้าคุณเคยเปลี่ยนเวอร์ชัน

02:58.320 --> 03:01.624
typescript ส่วนกลาง คุณจะไม่ทำลายเวอร์ชันโปรเจ็กต์

03:01.624 --> 03:05.170
การตั้งค่าโปรเจ็กต์ของคุณถ้าเราทำลายการเปลี่ยนแปลงใน

03:05.170 --> 03:07.280
typescript เอง เราจึงสามารถล็อกเวอร์ชันเฉพาะของ

03:07.280 --> 03:13.880
typescript สำหรับโปรเจ็กต์ได้ นั่นคือ ทำไมเราจึงติดตั้งแยกกันที่นี่

03:13.880 --> 03:16.440
และตัวโหลด ts ตอนนี้เป็นแพ็คเกจที่จะทำงานร่วมกับ

03:16.440 --> 03:18.380
webpack

03:18.380 --> 03:21.068
ts loader เป็นแพ็คเกจที่บอก webpack ถึงวิธีแปลงโค้ด

03:21.068 --> 03:24.396
typescript เป็น Javascript เพื่อให้ webpack สามารถทำทั้งสองอย่างได้

03:24.396 --> 03:36.665
คอมไพล์โค้ดของเราด้วยความช่วยเหลือของ typescript loader ซึ่งแน่นอนว่าใช้คอมไพเลอร์ typescript ภายใต้ประทุน จากนั้น webpack ยังสามารถรวมไฟล์จาวาสคริปต์ที่เราปล่อยออกมาเป็นไฟล์

03:36.665 --> 03:44.260
js ที่รวมเป็นไฟล์รหัสที่รวมเป็นไฟล์เดียว

03:44.260 --> 03:47.440
เอาล่ะ เรามาเริ่มต้นกันง่ายๆ และตั้งค่าโปรเจกต์

03:47.440 --> 03:50.852
webpack เพื่อให้เราสามารถใช้ webpack สำหรับสิ่งดีๆ

03:50.852 --> 03:53.223
เหล่านี้ได้
