WEBVTT

00:02.350 --> 00:04.720
-: Và đó là cho các mô-đun.

00:04.720 --> 00:08.850
Giờ đây, việc sử dụng các mô-đun là một tính năng cực kỳ hữu ích và

00:08.850 --> 00:11.130
quan trọng vì nó cho phép bạn viết mã

00:11.130 --> 00:14.550
dễ quản lý và bảo trì hơn. Có tất cả trong một tệp là một mớ hỗn

00:14.550 --> 00:16.360
độn và thực sự không phải là một lựa

00:16.360 --> 00:19.360
chọn cho bất kỳ thứ gì ngoại trừ các dự án thực sự nhỏ.

00:19.360 --> 00:22.350
Sử dụng các không gian tên hoặc mô-đun ES

00:22.350 --> 00:24.710
luôn có cách thay thế tốt hơn.

00:24.710 --> 00:27.620
Vì nó đảm bảo rằng mỗi tệp riêng của nó tương

00:27.620 --> 00:30.780
đối nhỏ và do đó vẫn có thể quản lý được.

00:30.780 --> 00:33.470
Tuy nhiên, cuối cùng bạn vẫn có được

00:33.470 --> 00:36.690
toàn bộ ứng dụng lớn mà bạn muốn có.

00:36.690 --> 00:38.580
Bây giờ, khi đề cập đến hai

00:38.580 --> 00:42.883
cách tiếp cận này, Không gian tên và mô-đun ES, đề xuất

00:42.883 --> 00:46.520
rõ ràng là mô-đun ES, vì bạn có thêm loại an toàn

00:46.520 --> 00:48.910
đó và bạn đảm bảo rằng mọi tệp phải

00:48.910 --> 00:52.210
chỉ định rõ ràng những gì nó muốn.

00:52.210 --> 00:54.270
Với các không gian tên, chỉ

00:54.270 --> 00:56.280
cần một tệp nhập thứ gì đó là

00:56.280 --> 00:58.350
đủ thì tệp khác cũng cần.

00:58.350 --> 00:59.970
Nhược điểm của điều này,

00:59.970 --> 01:02.230
nếu một tệp đó đã nhập nội dung bị xóa

01:02.230 --> 01:05.640
thì tệp khác cũng bị hỏng mà bạn không nhận thấy.

01:05.640 --> 01:08.774
Ít nhất, bạn không nhận thấy trước khi chạy mã.

01:08.774 --> 01:11.340
Vì vậy, do đó, hãy sử dụng các mô-đun ES.

01:11.340 --> 01:14.250
Sử dụng không gian tên trong các dự án nhỏ hơn hoặc

01:14.250 --> 01:18.100
nếu vì lý do nào đó bạn không thể sử dụng các mô-đun ES và bạn không

01:18.100 --> 01:19.970
thể sử dụng một trình đóng gói

01:19.970 --> 01:24.290
khác sẽ dịch các mô-đun đó. Đối với mã không mô-đun, tất cả đều hoạt

01:24.290 --> 01:26.360
động và tất cả các trình duyệt.

01:26.360 --> 01:30.070
Nhưng khác với việc sử dụng thực sự sử dụng các mô-đun, mô-đun ES.

01:30.070 --> 01:31.748
Và điều tôi vừa nói rất quan trọng.

01:31.748 --> 01:34.828
Các mô-đun này ở đây, ngay bây giờ theo cách chúng tôi sử dụng,

01:34.828 --> 01:37.620
chỉ hoạt động trong các trình duyệt hiện đại.

01:37.620 --> 01:39.670
Bởi vì chúng tôi dựa vào trình duyệt để nhập

01:39.670 --> 01:42.640
tất cả các tệp này về cơ bản. Đúng?

01:42.640 --> 01:44.675
Bây giờ, tất nhiên, chúng tôi muốn xây

01:44.675 --> 01:48.940
dựng các ứng dụng với bản thảo, cũng chạy trong tất cả các trình duyệt.

01:48.940 --> 01:52.090
Internet Explorer 9 chẳng hạn.

01:52.090 --> 01:54.130
Ở đó điều này sẽ không được hỗ trợ.

01:54.130 --> 01:55.730
Cú pháp này, không được hỗ trợ ở đó.

01:55.730 --> 01:57.410
Vì vậy, ứng dụng sẽ không chạy ở đó.

01:57.410 --> 01:59.160
Chúng tôi cũng có thể đang sử dụng một số tính

01:59.160 --> 02:01.280
năng khác không được hỗ trợ ở đó, nhưng chủ yếu là tính

02:01.280 --> 02:03.840
năng này ở đây không được hỗ trợ trong tất cả các trình duyệt.

02:03.840 --> 02:06.250
Vì vậy, để làm cho nó hoạt động trong tất cả các trình duyệt,

02:06.250 --> 02:09.283
chúng ta có thể sử dụng công cụ gói. Chúng ta có thể sử dụng Webpack chẳng hạn.

02:09.283 --> 02:12.431
Để gộp chúng lại với nhau thành một tệp JavaScript.

02:12.431 --> 02:15.810
Vì vậy, trong quá trình phát triển, chúng tôi có nhiều tệp

02:15.810 --> 02:19.060
này, trải nghiệm đánh máy mạnh mẽ, nhưng khi gửi mã của mình,

02:19.060 --> 02:21.310
chúng tôi thực sự chỉ có một tệp.

02:21.310 --> 02:23.600
Và bây giờ, lợi thế của việc vận chuyển

02:23.600 --> 02:25.676
một tệp thay vì tất cả các tệp chúng

02:25.676 --> 02:28.177
tôi có ở đây là chúng tôi cũng đảm bảo rằng

02:28.177 --> 02:31.181
trình duyệt không phải tải xuống nhiều tệp đó.

02:31.181 --> 02:33.630
Bởi vì mỗi tệp phải được tải xuống, là một

02:33.630 --> 02:37.010
hành trình khứ hồi bổ sung. Trong tab mạng của các công cụ dành cho nhà phát

02:37.010 --> 02:38.510
triển, bạn thực sự có thể thấy điều đó.

02:38.510 --> 02:40.650
Khu vực bạn nhìn thấy biểu đồ thác

02:40.650 --> 02:42.230
nước này và bạn thấy hộp

02:42.230 --> 02:44.520
nhỏ màu trắng này ở đầu mỗi khối.

02:44.520 --> 02:46.380
Về cơ bản, đây là thời gian thiết lập

02:46.380 --> 02:48.506
cần thiết để thiết lập yêu cầu HDP.

02:48.506 --> 02:51.807
Vì vậy, mặc dù các tệp chúng tôi đang tải xuống rất nhỏ

02:51.807 --> 02:54.700
như bạn có thể nói, nhưng việc này vẫn mất một chút

02:54.700 --> 02:56.900
thời gian vì tất cả các thiết lập bổ sung

02:56.900 --> 02:59.100
dư thừa, cho mọi yêu cầu HDP.

02:59.100 --> 03:02.330
Vì vậy, dù sao thì thực hiện ít yêu cầu hơn cũng là một ý tưởng hay,

03:02.330 --> 03:04.640
bất kể trình duyệt có hỗ trợ hay không.

03:04.640 --> 03:08.370
Vì vậy, vì hai lý do này, hỗ trợ trình duyệt và ít yêu cầu hơn, chúng

03:08.370 --> 03:11.000
ta sẽ xem xét gói, với Webpack, trong phần khóa

03:11.000 --> 03:12.453
học tiếp theo.
