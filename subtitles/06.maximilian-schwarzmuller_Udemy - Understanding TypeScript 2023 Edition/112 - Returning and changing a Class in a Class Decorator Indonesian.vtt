WEBVTT

00:02.090 --> 00:02.923
Narator: Untuk melakukan

00:02.923 --> 00:04.750
hal-hal yang lebih maju dengan dekorator,

00:04.750 --> 00:07.340
Anda harus memperhatikan bahwa beberapa dekorator

00:07.340 --> 00:09.200
misalnya, dekorator kelas tetapi juga

00:09.200 --> 00:11.700
dekorator metode, misalnya, sebenarnya juga mampu

00:11.700 --> 00:14.650
mengembalikan sesuatu.

00:14.650 --> 00:16.570
Sekarang, saya tidak mengembalikan apa pun pada

00:16.570 --> 00:17.510
dekorator mana pun.

00:17.510 --> 00:18.430
Saya tidak berbicara

00:18.430 --> 00:20.010
tentang fungsi dekorator, yang

00:20.010 --> 00:22.460
dikembalikan di pabrik dekorator.

00:22.460 --> 00:23.701
Yang saya maksudkan adalah

00:23.701 --> 00:26.040
nilai balik di dalam fungsi dekorator, dan kita

00:26.040 --> 00:28.890
tidak memiliki nilai seperti itu di mana pun.

00:28.890 --> 00:31.559
Sekarang dalam fungsi WithTemplate, dalam fungsi

00:31.559 --> 00:34.670
dekorator WithTemplate ini, harus saya katakan, kita bisa

00:34.670 --> 00:36.930
menambahkan nilai balik seperti itu.

00:36.930 --> 00:38.520
Dan apa yang dapat Anda kembalikan

00:38.520 --> 00:40.430
dan apa yang dapat digunakan TypeScript,

00:40.430 --> 00:43.660
tergantung pada jenis dekorator yang Anda gunakan.

00:43.660 --> 00:44.990
Di sini, kita bekerja dengan

00:44.990 --> 00:47.270
dekorator yang ditambahkan ke kelas, dan dalam

00:47.270 --> 00:48.750
fungsi dekorator seperti itu,

00:48.750 --> 00:51.677
Anda dapat mengembalikan fungsi konstruktor baru, yang akan

00:51.677 --> 00:53.800
menggantikan fungsi yang lama.

00:53.800 --> 00:55.590
Jadi yang akan menggantikan kelas yang

00:55.590 --> 00:58.330
Anda tambahkan ke dekorator yang bisa Anda katakan.

00:58.330 --> 01:01.073
Jadi di sini kita bisa mengembalikan fungsi baru,

01:01.073 --> 01:02.490
fungsi konstruktor baru,

01:02.490 --> 01:06.370
atau cukup mengembalikan kelas baru, pada akhirnya, karena kelas,

01:06.370 --> 01:08.280
kata kunci kelas, memungkinkan

01:08.280 --> 01:11.150
kita menggunakan gula sintaksis ini untuk membuat

01:11.150 --> 01:13.360
fungsi konstruktor seperti itu, dan kelas

01:13.360 --> 01:15.951
yang saya buat di sini tidak perlu memiliki nama,

01:15.951 --> 01:17.463
tetapi kita bisa dan kita harus

01:17.463 --> 01:22.250
memperluas konstruktor yang kita dapatkan di sini.

01:22.250 --> 01:23.730
Jadi apa yang saya lakukan di

01:23.730 --> 01:25.848
sini sekarang adalah dalam fungsi dekorator

01:25.848 --> 01:28.060
saya di sini, saya mengembalikan kelas baru,

01:28.060 --> 01:29.270
dan sekali lagi perlu diingat

01:29.270 --> 01:30.910
bahwa itu hanya gula sintaksis

01:30.910 --> 01:32.770
untuk fungsi konstruktor, jadi saya

01:32.770 --> 01:35.400
mengembalikan fungsi konstruktor, pada akhirnya,

01:35.400 --> 01:38.830
yang didasarkan pada fungsi konstruktor asli, sehingga saya menyimpan

01:38.830 --> 01:42.610
semua properti kelas asli saya, dari fungsi konstruktor asli saya, kita

01:42.610 --> 01:44.810
tidak harus melakukan itu, tetapi saya tidak

01:44.810 --> 01:47.010
ingin kehilangan properti saya di sini, jadi

01:47.010 --> 01:50.520
saya akan melakukannya.

01:50.520 --> 01:53.670
Dan kemudian di sini kita bisa menambahkan fungsionalitas baru.

01:53.670 --> 01:56.716
Sebagai contoh, dan saya harus mengubah beberapa nama di sini, saya

01:56.716 --> 02:00.340
dapat menambahkan fungsi konstruktor baru di sana, dan untuk menghindari kebingungan,

02:00.340 --> 02:01.500
saya akan mengganti nama

02:01.500 --> 02:04.040
konstruktor yang saya dapatkan di sini.

02:04.040 --> 02:06.640
Jadi kelas di mana saya menambahkan dekorator

02:06.640 --> 02:09.620
ini, saya akan menamainya di sini, originalConstructor

02:12.889 --> 02:15.690
dan menyalinnya di sini.

02:15.690 --> 02:18.950
Dan sekarang, alih-alih fungsi konstruktor ini di sini, saya

02:18.950 --> 02:20.853
harus memanggil super untuk memanggil

02:20.853 --> 02:25.430
fungsi konstruktor asli ini dari dalamnya, karena jika Anda menambahkan fungsi

02:25.430 --> 02:27.410
konstruktor di kelas yang memperluas

02:27.410 --> 02:29.920
kelas lain, yang pada akhirnya, apa yang kita

02:29.920 --> 02:32.020
lakukan di sini, maka Anda harus memanggil

02:32.020 --> 02:33.630
super.

02:33.630 --> 02:36.108
Dan sekarang di sini Anda bisa menulis logika apa pun yang Anda inginkan.

02:36.108 --> 02:40.040
Dan, misalnya, di sini, kita bisa memindahkan logika rendering

02:40.040 --> 02:42.782
templat ini di sini, keluar dari fungsi

02:42.782 --> 02:45.620
dekorator kita ke dalam fungsi konstruktor

02:45.620 --> 02:49.020
baru yang kita kembalikan di sini.

02:49.020 --> 02:50.960
Jadi sekali lagi, ingatlah bahwa kita sedang

02:50.960 --> 02:52.550
membuat kelas di sini yang pada akhirnya

02:52.550 --> 02:53.383
hanya menciptakan fungsi

02:53.383 --> 02:54.540
konstruktor dengan logika

02:54.540 --> 02:55.833
ini di dalamnya.

02:56.670 --> 02:58.850
Jadi sekarang apa yang saya coba lakukan

02:58.850 --> 03:01.367
adalah, saya mencoba untuk mengganti kelas.

03:01.367 --> 03:04.298
Fungsi konstruktor yang kita tambahkan dekorator kita

03:04.298 --> 03:07.550
dengan kelas baru, dengan fungsi konstruktor baru, di mana

03:07.550 --> 03:10.290
saya masih mengeksekusi logika lama, tetapi di mana

03:10.290 --> 03:12.920
saya juga menambahkan logika baru saya sendiri,

03:12.920 --> 03:14.670
dan oleh karena itu, sekarang templat

03:14.670 --> 03:17.450
sebenarnya hanya akan dirender ke DOM jika saya benar-benar

03:17.450 --> 03:21.340
menginstansiasi objek saya di sini.

03:21.340 --> 03:22.890
Dan tidak setiap saat, ketika

03:22.890 --> 03:25.180
fungsi dekorator ini dieksekusi, yang seperti

03:25.180 --> 03:26.340
yang Anda pelajari, terjadi

03:26.340 --> 03:29.620
segera setelah kita mendefinisikan kelas.

03:29.620 --> 03:31.010
Sekarang sedikit perubahan di

03:31.010 --> 03:34.290
sini, saya tidak memanggil konstruktor asli saya di sini lagi, sebagai gantinya

03:34.290 --> 03:37.380
kita bisa mengakses ini. name untuk mendapatkan

03:37.380 --> 03:40.180
nilai properti nama dari instance

03:40.180 --> 03:42.750
yang kita buat.

03:42.750 --> 03:45.120
Sekarang kita mendapatkan sedikit keluhan

03:45.120 --> 03:47.750
di sana mengenai jenis yang tidak benar.

03:47.750 --> 03:51.330
Untuk memperbaikinya, kita dapat mengubah fungsi dekorator kita

03:51.330 --> 03:53.990
menjadi fungsi generik di mana kita mendapatkan

03:53.990 --> 03:57.113
tipe, dan menetapkan ini sebagai tipe konstruktor asli,

03:58.090 --> 03:59.820
dan sekarang memperjelas bahwa

03:59.820 --> 04:01.668
ini sebenarnya pada dasarnya akan

04:01.668 --> 04:04.410
menjadi fungsi konstruktor, dan kita dapat memperjelasnya

04:04.410 --> 04:05.780
dengan menetapkan tipe khusus,

04:05.780 --> 04:09.260
tipe objek, di mana kita menetapkan properti baru, ini adalah nama

04:09.260 --> 04:17.760
cadangan tentu saja, tetapi ini memberi tahu TypeScript bahwa pada akhirnya ini akan menjadi objek yang dapat dibuat baru.

04:17.760 --> 04:19.690
Jadi itu akan menjadi fungsi konstruktor,

04:19.690 --> 04:22.170
fungsi yang bisa kita panggil dengan kata kunci

04:22.170 --> 04:24.380
new untuk menghasilkan objek baru.

04:24.380 --> 04:27.410
Dan fungsi baru ini, metode baru ini, yang akan dimiliki

04:27.410 --> 04:30.660
oleh objek T, akan mendapatkan sejumlah argumen, jadi

04:30.660 --> 04:33.520
saya menggunakan parameter sisa di sini untuk menerima

04:33.520 --> 04:35.380
argumen sebanyak yang Anda inginkan,

04:35.380 --> 04:37.290
sehingga benar-benar fleksibel

04:37.290 --> 04:39.840
mengenai argumen yang dapat diteruskan ke

04:39.840 --> 04:44.000
konstruktor kelas yang ingin kita ubah.

04:45.420 --> 04:46.430
Tambahkan fungsi baru

04:46.430 --> 04:49.063
kemudian pada akhirnya akan mengembalikan objek di sini.

04:50.140 --> 04:53.500
Sekarang saya juga harus menyalin definisi parameter lainnya ke konstruktor

04:53.500 --> 04:55.680
saya di sini, sehingga konstruktor ini juga mampu

04:55.680 --> 04:57.640
menerima semua argumen yang mungkin kita

04:57.640 --> 05:00.260
dapatkan, sehingga kita dapat, pada dasarnya menginstansiasi

05:00.260 --> 05:02.380
Person dengan argumen apa pun yang ingin Anda

05:02.380 --> 05:04.380
masukkan di sini.

05:04.380 --> 05:06.610
Dengan argumen apa pun yang mungkin juga kita

05:06.610 --> 05:09.279
perlukan di sini, dalam fungsi konstruktor asli.

05:09.279 --> 05:11.600
Dan dengan itu satu-satunya masalah yang akan

05:11.600 --> 05:14.021
kita hadapi adalah kita tidak tahu bahwa properti

05:14.021 --> 05:16.250
nama seperti itu ada, dan benar, kita tidak tahu

05:16.250 --> 05:19.639
ke kelas mana kita akan menambahkan dekorator WithTemplate ini, jadi

05:19.639 --> 05:22.530
kita tidak tahu apakah akan ada properti nama pada kelas yang

05:22.530 --> 05:23.951
kita tambahkan.

05:23.951 --> 05:25.560
Tetapi, kita dapat memperbaiki

05:25.560 --> 05:27.140
ini hanya dengan memberitahu

05:27.140 --> 05:30.200
TypeScript bahwa objek T didasarkan pada, sehingga fungsi

05:30.200 --> 05:32.773
konstruktor asli kita, tidak hanya akan menghasilkan

05:32.773 --> 05:35.530
objek apa pun, tetapi sebenarnya akan menghasilkan

05:35.530 --> 05:37.460
objek dengan properti nama yang akan

05:37.460 --> 05:41.140
bertipe string dan itu benar.

05:41.140 --> 05:44.922
Dekorator WithTemplate kita ditambahkan ke kelas, yang akan memiliki

05:44.922 --> 05:46.250
properti nama.

05:46.250 --> 05:47.300
Jika saya mengomentari

05:47.300 --> 05:48.133
ini, kita akan mendapatkan

05:48.133 --> 05:50.740
error, karena sekarang kita akan mencoba menambahkan decorator

05:50.740 --> 05:53.460
ini ke kelas yang tidak memenuhi kriteria ini, tetapi di sini,

05:53.460 --> 05:55.543
ini memenuhinya.

05:55.543 --> 05:58.790
Sekarang, saya mendapatkan error di sini ketika saya mencoba untuk mengkompilasi ini,

05:58.790 --> 06:00.630
karena saya tidak menggunakan args di sini, kita

06:00.630 --> 06:02.660
dapat mengubah ini menjadi _ untuk memberitahu typescript

06:02.660 --> 06:04.930
bahwa kita tahu kita tidak menggunakannya dan bahwa kita ingin

06:04.930 --> 06:06.230
mengabaikan ini.

06:06.230 --> 06:08.050
Ini adalah nama parameter yang

06:08.050 --> 06:10.678
valid, ini hanya nama khusus yang diambil typescript

06:10.678 --> 06:13.220
sebagai I get it, I need to accept it, but I won't

06:13.220 --> 06:15.260
use it parameter.

06:15.260 --> 06:18.273
Dan dengan itu, semuanya terkompilasi dan jika kita memuat ulang,

06:19.440 --> 06:22.420
Anda lihat, kita masih melihat Max di halaman di sini.

06:22.420 --> 06:23.910
Hal yang menarik adalah, jika

06:23.910 --> 06:25.480
kita sekarang menghapus kode di

06:25.480 --> 06:27.060
mana kita menginstansiasi Person

06:27.060 --> 06:28.440
jika saya mengomentari ini

06:28.440 --> 06:30.740
sehingga saya hanya menemukan kelas Person, tetapi

06:30.740 --> 06:33.550
saya tidak pernah menginstansiasi di mana pun, Anda lihat

06:33.550 --> 06:36.890
saat memuat ulang, kita tidak melihat Max di layar.

06:36.890 --> 06:39.467
Semua dekorator masih dieksekusi, tetapi

06:39.467 --> 06:42.410
kita tidak lagi merender apa pun ke layar.

06:42.410 --> 06:43.243
Dan alasan untuk

06:43.243 --> 06:46.340
itu, adalah bahwa kita sekarang meningkatkan decorator

06:46.340 --> 06:49.520
kita di sini lebih jauh lagi, dengan memanfaatkan fiturnya

06:49.520 --> 06:52.360
di mana kita dapat mengembalikan nilai baru atau

06:52.360 --> 06:55.350
dalam hal ini fungsi konstruktor baru.

06:55.350 --> 06:57.205
Dalam kasus dekorator kelas.

06:57.205 --> 07:00.780
Ini adalah fungsi konstruktor baru, atau kelas baru, yang,

07:00.780 --> 07:03.040
seperti yang saya jelaskan, hanyalah

07:03.040 --> 07:04.300
gula sintaksis untuk

07:04.300 --> 07:06.750
fungsi konstruktor, dan fungsi konstruktor

07:06.750 --> 07:09.070
ini, oleh karena itu, menggantikan kelas

07:09.070 --> 07:12.160
asli kita, fungsi konstruktor asli kita.

07:12.160 --> 07:15.220
Sekarang, karena saya memanggil super di sini,

07:15.220 --> 07:17.610
kita menyimpan fungsi aslinya.

07:17.610 --> 07:19.690
Kita menyimpan kelas aslinya, semua yang

07:19.690 --> 07:22.540
kita inisialisasi di sini pada dasarnya masih terjadi, karena

07:22.540 --> 07:25.530
saya melakukannya di konstruktor pengganti saya juga, dan

07:25.530 --> 07:27.480
saya memperluas kelas aslinya.

07:27.480 --> 07:30.420
Jadi, kita menyimpan segala sesuatu yang ada di kelas aslinya.

07:30.420 --> 07:31.550
Anda tidak harus melakukan

07:31.550 --> 07:32.670
itu, tetapi saya melakukannya

07:32.670 --> 07:35.560
di sini, karena saya tidak ingin kehilangan data asli itu.

07:35.560 --> 07:36.850
Tetapi, di belakang layar,

07:36.850 --> 07:39.770
saya mengganti kelas dengan kelas kustom baru saya di sini, dan

07:39.770 --> 07:42.370
itu memungkinkan kita untuk menambahkan logika ekstra,

07:42.370 --> 07:45.600
yang harus dijalankan ketika kelas tersebut diinstansiasi.

07:45.600 --> 07:49.090
Dan sekarang tiba-tiba kita bisa menambahkan logika yang

07:49.090 --> 07:52.410
tidak berjalan ketika kelas didefinisikan, tetapi

07:52.410 --> 07:54.660
ketika kelas diinstansiasi.

07:54.660 --> 07:57.150
Dan karena itu, ini seharusnya menjadi contoh pertama

07:57.150 --> 08:01.860
yang bagus tentang kekuatan penuh yang bisa Anda lepaskan dengan dekorator jika Anda benar-benar

08:01.860 --> 08:04.480
memahami apa yang bisa Anda lakukan dengannya.

08:04.480 --> 08:06.800
Dan Anda tidak bisa hanya mendefinisikannya sebagai fungsi,

08:06.800 --> 08:09.970
dan Anda tidak bisa hanya mendefinisikannya dengan fungsi faktor.

08:09.970 --> 08:12.600
Dalam beberapa dekorator, seperti dekorator kelas,

08:12.600 --> 08:14.400
Anda juga dapat mengembalikan sesuatu

08:14.400 --> 08:17.650
untuk menggantikan hal yang Anda tambahkan dekorator dalam

08:17.650 --> 08:19.470
kasus kami kelas, dengan kelas baru

08:19.470 --> 08:23.000
yang dapat mengimplementasikan kelas lama tetapi juga menambahkan

08:23.000 --> 08:25.711
logika kustom baru.

08:25.711 --> 08:28.004
Dan dengan itu, jika kita mengomentari ini

08:28.004 --> 08:30.240
kembali, kita kembali merender Max ke layar

08:30.240 --> 08:31.570
dengan kelas kita sendiri

08:31.570 --> 08:35.793
yang menggantikan, atau yang memperluas dan menggantikan kelas lama.
