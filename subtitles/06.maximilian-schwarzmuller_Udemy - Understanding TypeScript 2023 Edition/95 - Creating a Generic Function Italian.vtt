WEBVTT

00:02.190 --> 00:04.480
Quindi, per iniziare con i nostri generici.

00:04.480 --> 00:06.820
Di seguito il codice commentato.

00:06.820 --> 00:09.210
Inizierò con una funzione generica.

00:09.210 --> 00:11.430
È possibile costruire classi generiche

00:11.430 --> 00:15.350
e funzioni. Mostrerò entrambe e inizierò con una funzione.

00:15.350 --> 00:17.490
Ora diciamo che vogliamo avere una funzione

00:17.490 --> 00:22.490
che fondamentalmente unisca due oggetti e restituisca un nuovo oggetto.

00:23.660 --> 00:25.380
Quindi potremmo chiamarla "fusione".

00:25.380 --> 00:28.803
E vogliamo ottenere l'oggetto A e l'oggetto B come input.

00:30.010 --> 00:33.990
Naturalmente potremmo scrivere questa funzione in un certo modo.

00:33.990 --> 00:36.660
Potremmo dire che questo è di tipo oggetto

00:36.660 --> 00:39.033
e questo è di tipo oggetto.

00:39.960 --> 00:41.760
Questa funzione restituisce

00:41.760 --> 00:45.200
il risultato dell'assegnazione dell'oggetto.

00:45.200 --> 00:48.130
Dove ottengo l'oggetto A e l'oggetto B.

00:48.130 --> 00:50.230
Quindi, dato che il metodo di assegnazione degli

00:50.230 --> 00:53.000
oggetti è già incorporato nel normale JavaScript.

00:53.000 --> 00:55.820
Potremmo discutere se abbiamo davvero bisogno di una funzione di unione,

00:55.820 --> 00:58.140
ma ovviamente si potrebbe fare del lavoro aggiuntivo.

00:58.140 --> 01:00.480
Si potrebbe arricchire il tutto con ulteriori informazioni,

01:00.480 --> 01:01.833
con ulteriori opzioni e alla

01:01.833 --> 01:04.730
fine questa è solo una demo, solo un esempio.

01:04.730 --> 01:07.510
Quindi questo sarebbe valido, potremmo chiamare

01:07.510 --> 01:11.830
merge qui e registrare il risultato nella console, in questo modo.

01:11.830 --> 01:15.130
Poi passiamo un oggetto che ha una chiave nome

01:15.130 --> 01:17.570
e un secondo oggetto che ha un'età

01:17.570 --> 01:20.010
e se lo eseguiamo e lo salviamo.

01:20.010 --> 01:22.780
Nel browser otteniamo questo risultato.

01:22.780 --> 01:24.280
Quindi otteniamo questo oggetto merge.

01:24.280 --> 01:27.050
Ora questo funziona, ma il problema

01:27.050 --> 01:29.660
è che se proviamo a memorizzare

01:31.660 --> 01:33.300
questo nome di fusione,

01:33.300 --> 01:38.097
max, e l'età di 30 anni.

01:39.620 --> 01:44.620
Se proviamo a memorizzarlo qui, non posso accedere al nome del risultato,

01:45.770 --> 01:48.730
né all'età del risultato di questo oggetto

01:48.730 --> 01:50.020
unito.

01:50.020 --> 01:52.360
Anche se sappiamo che entrambi esisteranno.

01:52.360 --> 01:54.830
Perché il dattiloscritto non lo sa.

01:54.830 --> 01:57.100
Il dattiloscritto non può saperlo.

01:57.100 --> 01:59.310
Perché gli stiamo solo dicendo di ottenere un oggetto

01:59.310 --> 02:02.370
e alla fine abbiamo digitato prima che restituiamo un oggetto.

02:02.370 --> 02:04.790
Il che è corretto, ma non porta con sé tutte le

02:04.790 --> 02:07.810
informazioni che potremmo utilizzare in questo caso.

02:07.810 --> 02:09.970
Naturalmente possiamo sempre fare il type

02:09.970 --> 02:12.080
casting e dire a typescript che quello che

02:12.080 --> 02:14.220
ci viene restituito è un oggetto con una chiave

02:14.220 --> 02:15.960
nome e una chiave età.

02:15.960 --> 02:19.020
Ma è davvero macchinoso se dobbiamo farlo.

02:19.020 --> 02:21.420
In questo caso, i generici possono aiutarci.

02:21.420 --> 02:23.750
La trasformiamo in una funzione generica aggiungendo

02:23.750 --> 02:26.470
queste parentesi angolari dopo il nome della funzione.

02:26.470 --> 02:29.740
E poi definiamo gli identificatori Q.

02:29.740 --> 02:33.190
In genere si inizia con T, per tipo.

02:33.190 --> 02:35.600
Ma si può usare qualsiasi identificatore, non deve

02:35.600 --> 02:37.730
essere necessariamente un singolo carattere,

02:37.730 --> 02:39.860
ma la convenzione è quella di usare un singolo

02:39.860 --> 02:42.250
carattere e di solito, se si ha un solo tipo generico,

02:42.250 --> 02:43.690
lo si chiama T.

02:43.690 --> 02:46.640
E poi si dice: bene, questo tipo generico qui, ora è disponibile

02:46.640 --> 02:48.510
all'interno di questa funzione.

02:48.510 --> 02:51.453
Quindi potremmo dire che ciò che otteniamo è di tipo T.

02:53.090 --> 02:55.740
Sembra strano, ci arriveremo senza problemi.

02:55.740 --> 02:57.280
Si tratta di due argomenti di cui

02:57.280 --> 02:59.570
non conosciamo esattamente l'aspetto.

02:59.570 --> 03:02.450
Accetterò quindi un secondo tipo generico.

03:02.450 --> 03:04.340
Semplicemente aggiungendo una virgola

03:04.340 --> 03:07.400
tra le parentesi angolari, e poi proseguendo nell'alfabeto.

03:07.400 --> 03:10.490
Di conseguenza, il secondo parametro o tipo generico

03:10.490 --> 03:15.490
che si potrebbe utilizzare in una funzione si chiama tipicamente U.

03:15.630 --> 03:18.560
Quindi potremmo dire che questo è di tipo U.

03:18.560 --> 03:22.100
Ok, ora cosa ci porta questo?

03:22.100 --> 03:25.450
In realtà molto, come si può vedere solo in questo caso,

03:25.450 --> 03:28.620
se si passa il mouse su merge, il dattiloscritto

03:28.620 --> 03:33.230
deduce che questa funzione restituisce l'intersezione di T e U.

03:33.230 --> 03:36.800
Naturalmente potremmo anche impostarlo esplicitamente, ma non ce n'è bisogno,

03:36.800 --> 03:38.040
perché l'assegnazione degli

03:38.040 --> 03:42.010
oggetti restituisce un'intersezione e quindi, dato che abbiamo restituito un risultato

03:42.010 --> 03:44.150
dell'assegnazione degli oggetti, typescript

03:44.150 --> 03:45.740
capisce automaticamente che questa

03:45.740 --> 03:48.390
funzione restituisce l'intersezione.

03:48.390 --> 03:50.320
Come può essere utile, allora?

03:50.320 --> 03:52.510
Se ora passiamo sopra l'oggetto unito, vediamo

03:52.510 --> 03:54.260
che ora, solo con questo, il dattiloscritto

03:54.260 --> 03:56.450
capisce che ciò che memorizziamo nell'oggetto

03:56.450 --> 03:59.230
unito è l'intersezione di questi due tipi di oggetti,

03:59.230 --> 04:01.690
perché vede che stiamo passando questi oggetti,

04:01.690 --> 04:06.100
che sono di questi tipi di oggetti che infersice.

04:06.100 --> 04:08.840
Stringa di nome e numero di età.

04:08.840 --> 04:11.590
E che la nostra funzione restituisca l'intersezione.

04:11.590 --> 04:13.630
Perché è in grado di dedurlo ora

04:13.630 --> 04:16.313
e non con l'oggetto che avevamo prima?

04:17.220 --> 04:19.560
Perché l'oggetto è un tipo altamente aspecifico.

04:19.560 --> 04:22.490
Diciamo un oggetto qualsiasi e quindi typescript è in

04:22.490 --> 04:24.530
grado di dedurre che restituiamo l'intersezione

04:24.530 --> 04:26.600
di oggetto e oggetto.

04:26.600 --> 04:29.570
Ma l'intersezione di due oggetti sconosciuti è solo

04:29.570 --> 04:32.270
un nuovo oggetto sconosciuto che non offre alcuna

04:32.270 --> 04:35.420
informazione aggiuntiva sul tipo a typescript.

04:35.420 --> 04:38.170
Con i tipi generici, quello che stiamo

04:38.170 --> 04:43.170
dicendo a typescript è che questi due parametri possono e spesso saranno

04:43.282 --> 04:47.100
di tipi diversi e quindi typescript è in grado di capire

04:47.100 --> 04:49.690
che non stiamo lavorando con un tipo

04:49.690 --> 04:53.150
di oggetto a caso, ma che otterremo dati di tipo

04:53.150 --> 04:55.250
diverso.

04:55.250 --> 04:56.940
E che questa funzione restituirà

04:56.940 --> 04:59.770
l'intersezione di questi dati.

04:59.770 --> 05:01.773
E quindi il dattiloscritto è in grado

05:01.773 --> 05:04.390
di capire che ciò che memorizziamo qui nell'oggetto

05:04.390 --> 05:07.910
unito è tale da intersecare i dati di questi due input.

05:07.910 --> 05:09.530
Perché ora non abbiamo a

05:09.530 --> 05:14.423
che fare solo con oggetti sconosciuti, ma con tipi molto specifici.

05:15.330 --> 05:20.150
Pertanto, se registro l'età dell'oggetto unito nella console, questo funziona

05:20.150 --> 05:22.980
senza errori, come si può vedere.

05:22.980 --> 05:26.770
Qui ne stampo 30 a causa dei tipi generici.

05:26.770 --> 05:29.040
Stiamo dando al dattiloscritto l'informazione

05:29.040 --> 05:31.950
aggiuntiva che non sappiamo esattamente quali saranno i

05:31.950 --> 05:34.780
tipi, ci saranno degli oggetti e possiamo dirlo.

05:34.780 --> 05:36.550
Ma non sappiamo se si tratta di un oggetto con una

05:36.550 --> 05:38.640
chiave nome, con una chiave età, con una chiave hobby.

05:38.640 --> 05:41.130
Non sappiamo e non ci interessa, non ci interessa

05:41.130 --> 05:43.360
l'oggetto esatto, non vogliamo specificare

05:43.360 --> 05:46.050
che deve essere di questo tipo.

05:46.050 --> 05:47.490
Perché se all'improvviso

05:47.490 --> 05:50.520
aggiungessi anche gli hobby, ci sarebbe un problema.

05:50.520 --> 05:52.540
Quindi non voglio essere così restrittivo.

05:52.540 --> 05:54.480
Voglio solo dire che questo è di qualsiasi

05:54.480 --> 05:56.940
tipo, che non mi interessa, ma molto probabilmente è

05:56.940 --> 05:58.590
di un tipo diverso da questo qui.

05:58.590 --> 06:00.860
E se fosse lo stesso andrebbe bene anche quello.

06:00.860 --> 06:03.030
Ma il dattiloscritto capisce che abbiamo

06:03.030 --> 06:06.530
tipi specifici per questi due parametri e che restituiamo

06:06.530 --> 06:08.800
l'intersezione di essi.

06:08.800 --> 06:12.660
Invece di avere qui un oggetto qualsiasi non specifico.

06:12.660 --> 06:14.770
In particolare, la magia non è solo quella

06:14.770 --> 06:16.210
di dire al dattiloscritto

06:16.210 --> 06:18.410
che abbiamo due tipi diversi.

06:18.410 --> 06:20.740
Tuttavia, questi tipi non sono stati fissati in modo definitivo

06:20.740 --> 06:22.870
quando abbiamo definito la funzione, ma sono stati impostati

06:22.870 --> 06:25.810
dinamicamente quando abbiamo chiamato la funzione.

06:25.810 --> 06:27.430
Quindi, stiamo chiamando la funzione

06:27.430 --> 06:30.560
e typescript infonde i tipi per i due argomenti.

06:30.560 --> 06:33.890
Per quanto riguarda T, si tratta di un tipo di oggetto con una

06:33.890 --> 06:36.677
proprietà name che contiene una stringa e una proprietà

06:36.677 --> 06:39.600
hobbies che contiene un array di stringhe.

06:39.600 --> 06:43.290
E per U compila un tipo di oggetto con

06:43.290 --> 06:47.990
la proprietà age, dove age è di tipo number.

06:47.990 --> 06:51.030
Ora, quando richiamiamo questa funzione in un'altra

06:51.030 --> 06:53.890
riga e passiamo oggetti diversi e li memorizziamo

06:53.890 --> 06:57.090
in una nuova costante con un nuovo nome, ovviamente

06:57.090 --> 06:59.920
vengono inseriti tipi diversi per T e U per questa

06:59.920 --> 07:03.130
chiamata di funzione.

07:03.130 --> 07:05.350
È anche possibile indicare specificamente

07:05.350 --> 07:07.780
a typescript quali tipi deve compilare, aggiungendo

07:07.780 --> 07:09.110
delle parentesi angolari

07:09.110 --> 07:11.320
dopo il nome della funzione quando la si chiama;

07:11.320 --> 07:13.010
in questo modo si possono inserire

07:13.010 --> 07:15.200
i propri tipi per T e U.

07:15.200 --> 07:18.030
Potremmo dire a typescript che T deve essere di tipo stringa

07:18.030 --> 07:20.180
per questa chiamata di funzione e U deve essere

07:20.180 --> 07:22.710
di tipo numero, ma ovviamente typescript si lamenterebbe

07:22.710 --> 07:23.950
dei valori concreti che stiamo

07:23.950 --> 07:25.940
passando qui.

07:25.940 --> 07:28.270
Perché è chiaro che non si tratta di una

07:28.270 --> 07:30.190
stringa e che, se la risolvessimo,

07:30.190 --> 07:32.280
non sarebbe di tipo number.

07:32.280 --> 07:34.650
Quindi, potremmo essere molto specifici

07:34.650 --> 07:38.620
e dire che il primo argomento o il tipo T, per essere precisi, per

07:38.620 --> 07:41.700
questa chiamata di funzione sarà un tipo di oggetto

07:41.700 --> 07:45.310
in cui abbiamo una proprietà name di tipo string e una proprietà

07:45.310 --> 07:48.850
hobbies di tipo array string.

07:48.850 --> 07:52.970
E il tipo concreto per U, per questa chiamata di funzione, sarà un oggetto

07:52.970 --> 07:55.800
in cui abbiamo una proprietà age, che dovrebbe essere

07:55.800 --> 07:57.320
di tipo number.

07:57.320 --> 08:00.220
E ora saremmo a posto, non ci sarebbero più

08:00.220 --> 08:02.730
errori e tutto funzionerebbe.

08:02.730 --> 08:05.060
Ma questo è ridondante, si può assolutamente

08:05.060 --> 08:07.310
fare ed è importante capire che alla fine

08:07.310 --> 08:10.070
è proprio questo il senso dei generici: si possono

08:10.070 --> 08:12.990
inserire diversi tipi concreti per diverse chiamate

08:12.990 --> 08:15.170
di funzione.

08:15.170 --> 08:16.930
Ma non è necessario farlo in questo

08:16.930 --> 08:20.110
caso, perché typescript si limita a inferire i tipi dei valori

08:20.110 --> 08:22.170
che passiamo come argomenti.

08:22.170 --> 08:25.120
Quindi inserisce i tipi dedotti per

08:25.120 --> 08:28.240
T e U per questa chiamata di funzione.

08:28.240 --> 08:31.283
Alla fine è così che i generici funzionano dietro le quinte.
