WEBVTT

1
00:00:02.150 --> 00:00:03.290
<v Instructor>You can also implement</v>

2
00:00:03.290 --> 00:00:05.890
inheritance in interfaces.

3
00:00:05.890 --> 00:00:10.890
Let's say we have another interface, Named,

4
00:00:11.100 --> 00:00:13.600
and this is the interface which actually makes sure

5
00:00:13.600 --> 00:00:16.420
that we have a name property.

6
00:00:16.420 --> 00:00:18.510
So now, here in Person, we could implement

7
00:00:18.510 --> 00:00:20.950
Greetable and Named to be forced

8
00:00:20.950 --> 00:00:24.110
to have both a greet method and a name.

9
00:00:24.110 --> 00:00:25.820
That is something we could do.

10
00:00:25.820 --> 00:00:30.200
Or, if we know that Greetable thinks greetable objects

11
00:00:30.200 --> 00:00:31.810
always need to have a name,

12
00:00:31.810 --> 00:00:34.500
we could make sure that this Greetable interface

13
00:00:34.500 --> 00:00:36.970
actually extends the Named interface,

14
00:00:36.970 --> 00:00:40.120
so that together, they form a new interface,

15
00:00:40.120 --> 00:00:43.460
which forces every object based on Greetable

16
00:00:43.460 --> 00:00:46.150
to have a greet method, but also to have a name.

17
00:00:46.150 --> 00:00:48.840
And to do that, we can add extends here,

18
00:00:48.840 --> 00:00:52.700
on the interface as well, and we extend Named.

19
00:00:52.700 --> 00:00:55.760
Now therefore as I said, this forms a new interface,

20
00:00:55.760 --> 00:00:58.330
which is in the end, a interface that forces us

21
00:00:58.330 --> 00:01:00.760
to have a greet method, but not just that,

22
00:01:00.760 --> 00:01:03.140
it also forces us to have everything

23
00:01:03.140 --> 00:01:04.910
the Named interface defines.

24
00:01:04.910 --> 00:01:07.150
In this case, a name property.

25
00:01:07.150 --> 00:01:09.450
So if I would remove name here,

26
00:01:09.450 --> 00:01:12.120
I would already get an error, because this class

27
00:01:12.120 --> 00:01:14.860
now incorrectly implements the interface Greetable,

28
00:01:14.860 --> 00:01:17.600
because the property name is missing.

29
00:01:17.600 --> 00:01:20.900
So that's also how we can combine interfaces.

30
00:01:20.900 --> 00:01:23.410
Why would we split an interface like this?

31
00:01:23.410 --> 00:01:25.600
Well, maybe you have an application

32
00:01:25.600 --> 00:01:27.810
where on some objects, you only want

33
00:01:27.810 --> 00:01:31.120
to force them to have a name, and not a greet method,

34
00:01:31.120 --> 00:01:34.630
whereas on other objects, you need both greet and name.

35
00:01:34.630 --> 00:01:36.830
With this split, this is possible.

36
00:01:36.830 --> 00:01:40.630
Some objects, or some classes can just implement Named,

37
00:01:40.630 --> 00:01:42.590
and others can implement Greetable

38
00:01:42.590 --> 00:01:45.990
and are forced to have both greet and a name.

39
00:01:45.990 --> 00:01:48.490
So extending interfaces is possible.

40
00:01:48.490 --> 00:01:50.880
And there you can also extend more than one.

41
00:01:50.880 --> 00:01:53.380
So you can merge multiple interfaces

42
00:01:53.380 --> 00:01:55.060
into one single interface.

43
00:01:55.060 --> 00:01:58.570
We could merge another interface if we had it.

44
00:01:58.570 --> 00:02:00.860
Simply separated with a comma.

45
00:02:00.860 --> 00:02:03.570
Remember that for a classes, this was not possible.

46
00:02:03.570 --> 00:02:05.710
When you use classes in inheritance,

47
00:02:05.710 --> 00:02:07.920
you can only inherit from one class.

48
00:02:07.920 --> 00:02:10.600
You can't inherit from multiple classes.

49
00:02:10.600 --> 00:02:12.490
For interfaces that is different.

50
00:02:12.490 --> 00:02:14.760
For interfaces, you can indeed inherit

51
00:02:14.760 --> 00:02:16.920
from multiple interfaces, because in the end

52
00:02:16.920 --> 00:02:18.920
they're all just getting merged together,

53
00:02:18.920 --> 00:02:21.430
and in this pure TypeScript feature,

54
00:02:21.430 --> 00:02:23.010
which is actually not translated

55
00:02:23.010 --> 00:02:24.800
to JavaScript as you will see,

56
00:02:24.800 --> 00:02:27.080
we can therefore break the rules

57
00:02:27.080 --> 00:02:29.250
set up for JavaScript classes,

58
00:02:29.250 --> 00:02:31.733
and extend multiple interfaces.

