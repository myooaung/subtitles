WEBVTT

00:02.170 --> 00:03.290
Instrutor: Agora se

00:03.290 --> 00:05.580
falava muito em interfaces e aulas.

00:05.580 --> 00:07.390
Agora vamos olhar debaixo

00:07.390 --> 00:11.650
do capô e ver o que o JavaScript realmente produz ou oferece

00:11.650 --> 00:15.290
como uma alternativa à interface.

00:15.290 --> 00:17.450
Aprendemos que para o código de classe, no

00:17.450 --> 00:20.560
final depende da versão para a qual estamos compilando.

00:20.560 --> 00:24.280
Se você compilar para es6 aqui no conflito ts, então nossa

00:24.280 --> 00:27.160
produção usaria a palavra-chave classe.

00:27.160 --> 00:29.330
Como compilamos para o es5 aqui, em vez

00:29.330 --> 00:31.880
disso, vemos este trabalho de construção

00:31.880 --> 00:33.420
ou funções no final.

00:33.420 --> 00:36.670
O que, no entanto, acontece com as interfaces?

00:36.670 --> 00:38.720
Bem, vamos dar uma olhada no aplicativo. arquivo js.

00:38.720 --> 00:41.780
E aí você não vê nada.

00:41.780 --> 00:46.360
Você não verá nenhuma tradução para nossas interfaces.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Você não encontra estas coisas em nenhum lugar da aplicação. js.

00:52.970 --> 00:55.440
Você só encontra nossa função aqui, você

00:55.440 --> 00:59.180
encontra nossa função de construtor para o objeto pessoa, então

00:59.180 --> 01:02.320
basicamente essa tradução para a classe pessoa, e o

01:02.320 --> 01:03.500
outro código.

01:03.500 --> 01:06.680
Você não encontra nenhuma referência em nenhuma interface.

01:06.680 --> 01:08.240
E há uma boa razão para isso.

01:08.240 --> 01:11.350
Não há tradução para as interfaces.

01:11.350 --> 01:13.650
O JavaScript não conhece esta característica.

01:13.650 --> 01:15.550
É um recurso TypeScript puro, disponível

01:15.550 --> 01:18.830
somente durante o desenvolvimento e a compilação.

01:18.830 --> 01:21.640
Assim, você pode usá-lo para melhorar seu código.

01:21.640 --> 01:23.970
No entanto, nenhuma saída para isso acabará

01:23.970 --> 01:26.010
em seus arquivos JavaScript, portanto,

01:26.010 --> 01:28.390
é um recurso de desenvolvimento puro que o

01:28.390 --> 01:30.700
ajuda a escrever melhor código, código claramente

01:30.700 --> 01:34.100
estruturado seguindo regras claras.

01:34.100 --> 01:38.720
Em tempo de execução, nenhum vestígio será deixado dessas interfaces.

01:38.720 --> 01:41.760
Você não verá nada relacionado às interfaces em seu

01:41.760 --> 01:44.710
código, apenas funções, classes e todos os outros

01:44.710 --> 01:47.130
códigos são compilados na saída.

01:47.130 --> 01:50.020
As interfaces são simplesmente despejadas, pode-se dizer.

01:50.020 --> 01:53.170
Eles são usados durante a compilação para verificar seu código e

01:53.170 --> 01:54.340
depois são ignorados.

01:54.340 --> 01:56.690
Não há nada que possa ser produzido para eles.
