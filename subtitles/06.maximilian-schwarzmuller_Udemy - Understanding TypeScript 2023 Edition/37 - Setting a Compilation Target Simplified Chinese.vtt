WEBVTT

00:02.450 --> 00:04.810
教师：现在我们已经了解了如何使用编译器管理文件,

00:04.810 --> 00:11.300
下面我们将深入了解编译器选项, 因为这非常有趣｡

00:11.300 --> 00:13.860
这允许我们控制如何编译我们的TypeScript代码,

00:13.860 --> 00:23.230
因此不仅是哪些文件, 而且TypeScript如何处理正在编译的文件｡

00:23.230 --> 00:26.760
你可以看到我们有很多选择｡ 

00:26.760 --> 00:29.560
这些选项旁边有简短的说明｡ 

00:29.560 --> 00:32.450
一些解释可以说是一个很大的谜团｡ 

00:32.450 --> 00:34.210
其他人都很清楚｡ 

00:34.210 --> 00:36.450
我要说的是, 很多这样的选择,

00:36.450 --> 00:39.950
大多数这样的选择在大多数项目中都不重要｡

00:39.950 --> 00:43.900
因此, 您不会设置所有这些选项, 甚至不会接近｡ 

00:43.900 --> 00:46.070
您通常可以忽略其中的许多选项｡ 

00:46.070 --> 00:48.765
现在, 我将在本课程中介绍一些重要的选项,

00:48.765 --> 00:53.911
因为有些选项只有在我们了解某个功能时才有意义｡

00:53.911 --> 00:57.250
我现在就想深入探讨一些选择｡

00:57.250 --> 01:02.340
为此, 让我们从上到下浏览一下文件, 看看我们得到了什么｡

01:02.340 --> 01:04.410
让我们从目标选项开始｡ 

01:04.410 --> 01:07.230
正如您所看到的, 这实际上是默认设置的｡ 

01:07.230 --> 01:08.750
未注释掉｡ 

01:08.750 --> 01:16.970
使用此选项所做的就是告诉TypeScript要为哪个目标JavaScript版本编译代码｡

01:16.970 --> 01:26.960
因为TypeScript所做的不仅仅是将JavaScript中不存在的新特性（如类型注释）编译到JavaScript代码中｡

01:26.960 --> 01:33.270
所以它不仅仅是要注意这里的工作｡

01:33.270 --> 01:41.370
它还将代码编译为可在特定浏览器中运行的JavaScript｡

01:41.370 --> 01:46.980
您基本上可以通过设置目标来定义哪些浏览器支持编译代码｡

01:46.980 --> 01:49.520
正如您所看到的, 在这个项目中的默认目标是,

01:49.520 --> 01:55.517
正在设置的初始目标是es5, 这意味着所有类型的代码都将被编译｡

01:55.517 --> 01:57.550
我们可以看到｡ 

01:57.550 --> 02:03.260
如果我在这里运行TSC来编译我所有的文件, 我们会在应用程序中看到｡

02:03.260 --> 02:03.260
我用的是let和const,

02:03.260 --> 02:05.732
但是在app里｡ js, 我们看到了变化｡ 

02:05.732 --> 02:09.890
这是因为我们的目标是es5, 而在es5世界中,

02:09.890 --> 02:13.816
我们没有let和const｡

02:13.816 --> 02:20.650
因此, 这里的好处是我们可以使用TypeScript生成在旧浏览器中也能工作的代码｡

02:20.650 --> 02:22.930
但如果我们想这样做, 它完全取决于使用｡ 

02:22.930 --> 02:25.550
也许我们不想用TypeScript来做这件事,

02:25.550 --> 02:33.290
因为我们可能有其他一些构建工具来处理JavaScript移植, 因此我们不想让TypeScript来做这件事,

02:33.290 --> 02:41.170
或者我们想发布只在现代浏览器中工作的代码, 因为我们知道我们的应用程序只会在现代浏览器中运行｡

02:41.170 --> 02:44.160
因此, 如果您删除该值, 可以在这里看到替代选项,

02:44.160 --> 02:46.070
然后至少在vscode中,

02:46.070 --> 02:51.300
如果您按Ctrl+空格键以获得自动完成, 您将看到一系列建议,

02:51.300 --> 02:56.450
您将在这里看到所有可用的值｡

02:56.450 --> 02:58.700
随着时间的推移, 这种情况当然会改变,

02:58.700 --> 03:01.900
因为我们发布了新的JavaScript版本｡

03:01.900 --> 03:03.785
您看到我们之前将其设置为es5｡ 

03:03.785 --> 03:06.150
如果你根本不指定目标, 那么现在,

03:06.150 --> 03:12.200
TypeScript甚至编译到es3, 所以它支持一个更旧的版本｡

03:12.200 --> 03:15.130
但你也可以选择更现代的es6,

03:15.130 --> 03:17.510
比如说, 它支持const,

03:17.510 --> 03:19.310
或者取一个更新的版本,

03:19.310 --> 03:24.310
es6相当于es2015, 只是为了记录在案｡

03:24.870 --> 03:32.460
例如, 如果我们将其设置为es6, 并在更改tsconfig后重新运行tsc命令｡

03:32.460 --> 03:32.460
json文件,

03:32.460 --> 03:35.440
您现在可以在app. js, 我们得到了let和const,

03:35.440 --> 03:38.130
因为这里支持｡

03:38.130 --> 03:39.340
所以这取决于你｡ 

03:39.340 --> 03:43.641
当然, 您在这里选择的JavaScript版本越现代,

03:43.641 --> 03:50.440
生成的代码就越简洁, 因为TypeScript需要编译的代码越来越少,

03:50.440 --> 03:54.010
或者它需要在更少的情况下处理不存在的功能,

03:54.010 --> 03:59.560
因此, 编译的代码通常更简洁､ 更短｡

03:59.560 --> 04:01.150
这就是目标

04:01.150 --> 04:02.623
其他的选择呢？
