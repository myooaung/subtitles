WEBVTT

00:02.200 --> 00:04.080
Instructeur: Tijd voor een nieuw dossier.

00:04.080 --> 00:09.080
Ik hernoem de app. ts hier aan bond aliassen. ts, en voeg een nieuwe

00:11.100 --> 00:13.760
app toe. ts bestand waar we opnieuw

00:13.760 --> 00:16.370
kunnen beginnen, sluit het andere bestand.

00:16.370 --> 00:20.660
En nu wil ik hier wat dieper ingaan op functies.

00:20.660 --> 00:22.640
Nu, natuurlijk, met al werkende functies.

00:22.640 --> 00:24.940
Bijvoorbeeld, hier in het bestand union aliases

00:24.940 --> 00:26.340
met de combine functie.

00:26.340 --> 00:29.260
En je zag bijvoorbeeld dat je voor functies types

00:29.260 --> 00:32.520
kunt toekennen aan de parameters van functies.

00:32.520 --> 00:34.310
Nou, het blijkt dat je nog wat meer

00:34.310 --> 00:36.483
kunt doen met functies en types.

00:37.590 --> 00:40.430
Daarvoor maak ik mijn add-functie opnieuw, die

00:40.430 --> 00:43.373
gewoon getallen accepteert, geen strings.

00:44.270 --> 00:48.340
Dat doet een simpel ding, het geeft n één plus n twee, dus niet

00:48.340 --> 00:49.513
al te lastig.

00:51.004 --> 00:53.740
Zoals ik al zei, kunnen we types aan parameters toekennen,

00:53.740 --> 00:55.180
dat is niet nieuw.

00:55.180 --> 00:57.030
De functie als geheel heeft echter

00:57.030 --> 01:01.050
een belangrijk ander type, namelijk een terugkeertype.

01:01.050 --> 01:03.990
En hier wordt het terugkeertype afgeleid door TypeScript.

01:03.990 --> 01:06.490
We kunnen het zien als we met de muis over add gaan.

01:06.490 --> 01:10.760
Hier aan het eind, de dubbele punt na de parameterlijst, dit hier,

01:10.760 --> 01:14.190
beschrijft het terugkeertype van de functie.

01:14.190 --> 01:16.800
Dus het type van de geretourneerde waarde.

01:16.800 --> 01:20.020
Hier geef ik de optelling van n één en n twee terug.

01:20.020 --> 01:23.050
En aangezien beide ingangen getallen zijn, kan TypeScript afleiden

01:23.050 --> 01:24.930
dat het resultaat hiervan een getal zal

01:24.930 --> 01:26.770
zijn, en aangezien we het terugsturen,

01:26.770 --> 01:28.820
dat het terugkeertype van deze functiegegevens

01:28.820 --> 01:30.830
een getal zal zijn.

01:30.830 --> 01:33.320
Als je ze hier aan elkaar zou rijgen als

01:33.320 --> 01:35.363
strings, bijvoorbeeld met toString,

01:36.550 --> 01:39.030
dan zou TypeScript correct afleiden dat

01:39.030 --> 01:41.900
we hier een string teruggeven.

01:41.900 --> 01:44.350
Nu kunnen we natuurlijk altijd expliciet een retourneertype

01:44.350 --> 01:46.910
toewijzen door een dubbele punt toe te voegen na de parameterlijst,

01:46.910 --> 01:48.490
en dan het type dat je wilt retourneren,

01:48.490 --> 01:51.263
zoals een getal.

01:52.850 --> 01:54.560
Dit zou hetzelfde type zijn als afgeleid.

01:54.560 --> 01:56.760
Als ik dit bijvoorbeeld op string zou zetten,

01:56.760 --> 02:00.020
zou ik hier een fout krijgen, omdat mijn berekening hier duidelijk

02:00.020 --> 02:03.540
niet overeenkomt met mijn beschreven terugkeertype.

02:03.540 --> 02:06.480
Net als bij variabelen is het een goed idee om TypeScript

02:06.480 --> 02:10.080
zijn werk te laten doen wat betreft type-inferentie.

02:10.080 --> 02:12.610
En als u geen specifieke reden heeft om het

02:12.610 --> 02:14.810
type expliciet in te stellen, moet

02:14.810 --> 02:17.090
u het type dus niet instellen en in plaats

02:17.090 --> 02:20.470
daarvan TypeScript het type laten afleiden.

02:20.470 --> 02:22.660
Wat de retourneertypes betreft, is er echter

02:22.660 --> 02:25.910
één interessant type dat we nog niet eerder hebben gezien, en dat

02:25.910 --> 02:27.530
misschien gloednieuw is voor u als

02:27.530 --> 02:30.240
u ervaring hebt met andere programmeertalen.

02:30.240 --> 02:31.200
Omdat het een type is

02:31.200 --> 02:33.250
dat niet echt bestaat in JavaScript.

02:33.250 --> 02:35.180
Het is het lege type.

02:35.180 --> 02:38.160
Laten we zeggen dat we de methode printResult hebben.

02:38.160 --> 02:41.190
Daar krijgen we een getal als argument,

02:41.190 --> 02:44.120
wat een, nou ja, getal moet zijn.

02:44.120 --> 02:47.510
En daarin wil ik troosten. log num.

02:47.510 --> 02:49.450
En ik wil troosten. log het als een deel

02:49.450 --> 02:52.150
van een string, waar ik resultaat plus num zeg.

02:52.150 --> 02:53.670
Dus nu wordt dit samengevoegd tot

02:53.670 --> 02:56.090
één lange string, en wordt deze uitgevoerd.

02:56.090 --> 02:57.777
En nu kan ik printResult aanroepen.

02:57.777 --> 03:01.020
En bijvoorbeeld, geef het resultaat van mijn add

03:01.020 --> 03:05.010
functie aanroep door, met vijf plus, laten we zeggen 12.

03:05.010 --> 03:07.670
Dus ik voer hier uit, met twee nummers.

03:07.670 --> 03:10.160
En het resultaat daarvan, dus wat add oplevert,

03:10.160 --> 03:13.130
wordt dan als argument doorgegeven aan printResult.

03:13.130 --> 03:15.780
En dat zou het moeten afdrukken naar de console.

03:15.780 --> 03:19.150
Als we dit nu compileren en dan bekijken in onze

03:19.150 --> 03:21.110
pagina, of op onze pagina hier,

03:21.110 --> 03:24.280
zien we resultaat 17, wat logisch is.

03:24.280 --> 03:25.660
Het interessante hier is het

03:25.660 --> 03:27.640
terugkeertype van printResult.

03:27.640 --> 03:30.353
Wat denk je dat hier het terugkeertype is?

03:31.240 --> 03:33.240
Dus misschien denk je dat het een string

03:33.240 --> 03:35.150
is, omdat ik hier een string maak.

03:35.150 --> 03:37.360
Maar denk eraan, we sturen dit niet terug.

03:37.360 --> 03:39.400
We sturen niets terug.

03:39.400 --> 03:42.010
En daarom heeft deze printResult functie

03:42.010 --> 03:44.990
hier een speciaal terugkeertype, void.

03:44.990 --> 03:47.910
Nu merk je misschien void return type op uit

03:47.910 --> 03:49.830
andere programmeertalen.

03:49.830 --> 03:52.230
Daar heb je zoiets als dit.

03:52.230 --> 03:53.940
JavaScript weet dat niet echt,

03:53.940 --> 03:56.740
of heeft niet echt een naam voor deze situatie.

03:56.740 --> 03:58.590
TypeScript echter wel.

03:58.590 --> 04:01.840
Dus inderdaad, deze functie hier heeft een return type van void.

04:01.840 --> 04:04.065
En natuurlijk hoef je het hier niet te specificeren.

04:04.065 --> 04:06.440
TypeScript's inferentie deed zijn werk.

04:06.440 --> 04:07.630
Maar ik wil echt duidelijk

04:07.630 --> 04:09.610
maken dat dit het void return type

04:09.610 --> 04:13.730
heeft, daarom voeg ik het hier toe, voor demo doeleinden.

04:13.730 --> 04:17.070
Nu, void betekent eigenlijk dat deze functie

04:17.070 --> 04:21.020
geen return statement heeft, het geeft niets terug.

04:21.020 --> 04:24.540
Het lukt, het doet zijn werk.

04:24.540 --> 04:28.170
Het voert zijn code uit, het geeft geen foutmelding

04:28.170 --> 04:32.550
of iets dergelijks, maar het geeft vervolgens niets terug.

04:32.550 --> 04:34.990
Dat is het void return type.

04:34.990 --> 04:37.330
Nu technisch in JavaScript, natuurlijk,

04:37.330 --> 04:39.490
als we de console. log het resultaat

04:39.490 --> 04:43.550
van printResult hier en ik compileer dit nu, en we zien wat hier

04:43.550 --> 04:46.270
op de pagina wordt uitgevoerd.

04:46.270 --> 04:49.480
We zien dat daardoor undefined wordt teruggegeven.

04:49.480 --> 04:51.540
Dus technisch gezien, en dat is echt

04:51.540 --> 04:56.450
interessant, krijgen we in JavaScript, als we de terugkeerwaarde gebruiken van

04:56.450 --> 05:00.830
een functie die niets teruggeeft, ongedefinieerd als waarde.

05:00.830 --> 05:03.730
En zoals je waarschijnlijk weet, is undefined in JavaScript

05:03.730 --> 05:05.720
eigenlijk een echte waarde.

05:05.720 --> 05:08.430
Een waarde die je bijvoorbeeld ook krijgt als je probeert

05:08.430 --> 05:11.880
toegang te krijgen tot een eigenschap op een object dat niet bestaat.

05:11.880 --> 05:13.670
Dus hier krijgen we void, hoewel dit

05:13.670 --> 05:16.680
technisch gezien een ongedefinieerd resultaat oplevert.

05:16.680 --> 05:19.020
En om het nog verwarrender te maken:

05:19.020 --> 05:23.300
ongedefinieerd is eigenlijk een type in TypeScript.

05:23.300 --> 05:25.640
Je kunt undefined als type hebben.

05:25.640 --> 05:29.570
En bijvoorbeeld een gloednieuwe variabele, someValue, kan als

05:30.770 --> 05:33.270
type ongedefinieerd krijgen, en je krijgt

05:33.270 --> 05:34.700
geen foutmelding.

05:34.700 --> 05:37.380
Deze variabele zal nu gewoon voor altijd ongedefinieerd zijn.

05:37.380 --> 05:39.970
Hoe nuttig dat is, is een andere vraag.

05:39.970 --> 05:43.720
Maar undefined is een geldig type in TypeScript.

05:43.720 --> 05:46.600
Toch zie je hier een fout.

05:46.600 --> 05:48.010
En we krijgen een foutmelding

05:48.010 --> 05:51.690
omdat een functie niet ongedefinieerd mag teruggeven.

05:51.690 --> 05:53.300
Technisch gezien wel,

05:53.300 --> 05:56.850
maar TypeScript denkt anders over functies.

05:56.850 --> 06:00.200
Je moet hier void gebruiken als een functie niets teruggeeft,

06:00.200 --> 06:04.300
en niet ongedefinieerd, want met void maak je duidelijk dat deze

06:04.300 --> 06:05.940
functie bewust geen return

06:05.940 --> 06:08.260
statement heeft.

06:08.260 --> 06:10.690
Als je hier undefined zou zeggen, dan zou

06:10.690 --> 06:13.460
TypeScript verwachten dat je een return statement

06:13.460 --> 06:17.080
hebt waarbij je gewoon geen waarde teruggeeft.

06:17.080 --> 06:18.660
Dat is het technische verschil.

06:18.660 --> 06:20.670
Nu zie je dat ik geen foutmelding krijg.

06:20.670 --> 06:22.860
Vanuit het perspectief van

06:22.860 --> 06:26.610
JavaScript is dit in feite hetzelfde als dit.

06:26.610 --> 06:29.050
Maar TypeScript maakt hier een onderscheid,

06:29.050 --> 06:31.240
en daarom is void het type dat je wil gebruiken

06:31.240 --> 06:33.760
als je geen return statement hebt.

06:33.760 --> 06:37.200
Undefined, dat u eerlijk gezegd zelden nodig zult hebben, kan worden

06:37.200 --> 06:41.100
gebruikt als u terugkeert zonder een werkelijke waarde terug te geven.

06:41.100 --> 06:45.750
Maar nogmaals, dit is een zeldzaam geval, en u zou ook void kunnen gebruiken met

06:45.750 --> 06:47.560
een return statement als dit.

06:47.560 --> 06:49.040
Je zou geen foutmelding krijgen.

06:49.040 --> 06:50.610
En standaard zou je in dit scenario

06:50.610 --> 06:52.770
eigenlijk altijd void gebruiken.

06:52.770 --> 06:54.680
Tenzij je echt een functie hebt die

06:54.680 --> 06:56.750
ongedefinieerd moet produceren, en

06:56.750 --> 06:58.620
daar wil je duidelijk over zijn.

06:58.620 --> 07:01.430
Maar nogmaals, dat zal zelden het geval zijn.

07:01.430 --> 07:03.620
Ik wil er gewoon voor zorgen dat je het verschil

07:03.620 --> 07:05.870
begrijpt tussen void en undefined, dat

07:05.870 --> 07:08.160
void de standaard is die je zult gebruiken

07:08.160 --> 07:10.930
in vrijwel alle scenario's waar je een functie hebt

07:10.930 --> 07:13.450
die geen waarde teruggeeft, en die je expliciet

07:13.450 --> 07:15.770
kunt toewijzen.

07:15.770 --> 07:18.780
Maar natuurlijk kan TypeScript het ook afleiden, zoals

07:18.780 --> 07:20.440
het hier ook zou kunnen.

07:20.440 --> 07:23.083
Ik heb dit alleen toegevoegd voor demo doeleinden.
