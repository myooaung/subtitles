WEBVTT

00:02.230 --> 00:03.280
Istruttore: Abbiamo

00:03.280 --> 00:04.930
acquisito le nozioni di base sui generici,

00:04.930 --> 00:07.150
speriamo, ora approfondiamo un po' i vincoli,

00:07.150 --> 00:10.400
o un tipo specifico di vincolo, che si può aggiungere.

00:10.400 --> 00:12.680
A questo scopo, scambierò un'altra funzione,

00:12.680 --> 00:16.293
una funzione generica, che chiamerò extractAndConvert.

00:18.700 --> 00:21.550
L'idea di questa funzione è di ottenere

00:21.550 --> 00:24.120
un oggetto come primo parametro

00:24.120 --> 00:26.340
e il secondo parametro è, alla

00:26.340 --> 00:28.413
fine, una chiave.

00:30.050 --> 00:32.570
Ora voglio restituire il valore di quella chiave nell'oggetto, cosa

00:32.570 --> 00:35.310
che possiamo fare con questa notazione JavaScript predefinita.

00:35.310 --> 00:36.310
Usare le parentesi quadre

00:36.310 --> 00:38.200
per esporre una proprietà in un oggetto,

00:38.200 --> 00:39.840
ma questo non è specifico di TypeScript,

00:39.840 --> 00:42.010
è di nuovo Vanilla JavaScript.

00:42.010 --> 00:43.000
Ora, quindi, potremmo

00:43.000 --> 00:44.580
dire che qui vogliamo avere un

00:44.580 --> 00:48.460
oggetto e per la chiave vogliamo avere una stringa, diciamo.

00:48.460 --> 00:50.160
Ora, però, sto ricevendo

00:50.160 --> 00:52.000
un errore, perché alla fine

00:52.000 --> 00:54.500
non sappiamo se l'oggetto che stiamo

00:54.500 --> 00:57.510
ottenendo avrà davvero quella chiave.

00:57.510 --> 00:59.410
Ecco cosa ci dice TypeScript

00:59.410 --> 01:01.430
con questo strano errore.

01:01.430 --> 01:02.530
Ad esempio, potrei

01:02.530 --> 01:05.700
registrare nella console il risultato della

01:05.700 --> 01:09.770
chiamata con un oggetto vuoto e poi con un nome.

01:09.770 --> 01:12.600
A proposito, lo chiamo extractAndConvert,

01:12.600 --> 01:16.025
perché voglio chiamarlo senza il log della console e dire

01:16.025 --> 01:18.600
semplicemente Value, colon, plus.

01:18.600 --> 01:19.660
Ma questa è solo una nota

01:19.660 --> 01:22.450
a margine che ci restituisce alla fine con i dati recuperati.

01:22.450 --> 01:23.840
Ma il problema principale è che

01:23.840 --> 01:25.160
potrei chiamarlo in questo modo

01:26.091 --> 01:28.020
e passerebbe un oggetto come primo parametro

01:28.020 --> 01:29.890
e poi una stringa come secondo.

01:29.890 --> 01:31.430
Ma correttamente, TypeScript mi

01:31.430 --> 01:33.200
dice che alla fine non è garantito che questa

01:33.200 --> 01:35.193
chiave esista in questo oggetto.

01:36.420 --> 01:39.920
Per garantirlo, possiamo ancora una volta utilizzare tipi generici.

01:39.920 --> 01:41.620
Possiamo dire di avere un tipo T,

01:41.620 --> 01:43.130
che sarà il nostro oggetto.

01:43.130 --> 01:46.550
Possiamo dire che estende l'oggetto.

01:46.550 --> 01:48.363
Ma dobbiamo anche digitare U.

01:49.440 --> 01:52.850
La nostra chiave qui, diciamo, che alla fine deve

01:52.850 --> 01:56.320
essere una chiave del nostro tipo T, però.

01:56.320 --> 01:58.210
Quindi, di questo oggetto, vogliamo

01:58.210 --> 02:01.560
garantire che ciò che otteniamo come secondo parametro

02:01.560 --> 02:04.890
come chiave sia una proprietà del primo tipo.

02:04.890 --> 02:09.130
E per questo possiamo dire che si estende la chiave di T.

02:11.550 --> 02:13.540
E ora si vede che l'errore non c'è più

02:13.540 --> 02:15.370
e invece c'è l'errore qui sotto,

02:15.370 --> 02:17.930
perché ora sto informando TypeScript che il

02:17.930 --> 02:21.800
primo parametro deve essere un oggetto qualsiasi e il secondo parametro

02:21.800 --> 02:23.610
deve essere una chiave qualsiasi

02:23.610 --> 02:25.870
di quell'oggetto.

02:25.870 --> 02:28.480
E qui, sì, stiamo passando qualsiasi tipo di oggetto,

02:28.480 --> 02:30.430
ma non abbiamo una chiave di nome.

02:30.430 --> 02:34.990
L'errore scompare solo quando aggiungo una chiave del nome.

02:34.990 --> 02:37.990
Quindi, questo è il momento in cui possiamo usare i tipi generici

02:37.990 --> 02:41.800
con la parola chiave keyoff, per dire a TypeScript che vogliamo assicurarci

02:41.800 --> 02:45.730
di avere una struttura corretta, il che è naturalmente molto utile, perché

02:45.730 --> 02:47.460
ci permette di assicurarci di non

02:47.460 --> 02:49.120
commettere errori stupidi, quando

02:49.120 --> 02:51.160
cerchiamo di chiamare una funzione che,

02:51.160 --> 02:53.390
alla fine, abbiamo cercato di esporre come

02:53.390 --> 02:56.740
una proprietà che non esiste.

02:56.740 --> 02:58.140
Quindi funziona.

02:58.140 --> 02:59.870
Ma se provo a esportare come 'età' qui, ottengo

02:59.870 --> 03:01.570
di nuovo un errore, ad esempio.

03:02.890 --> 03:05.560
Torniamo quindi al "nome".
