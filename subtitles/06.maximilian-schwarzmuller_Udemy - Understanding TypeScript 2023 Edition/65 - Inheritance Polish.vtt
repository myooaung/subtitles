WEBVTT

00:02.300 --> 00:03.830
Instruktor: Więc pracujemy z

00:03.830 --> 00:07.350
naszym działem dość dużo tutaj i stworzyłem mój dział księgowości.

00:07.350 --> 00:09.610
Teraz dla aplikacji, którą budujemy,

00:09.610 --> 00:12.120
możemy oczywiście potrzebować działów, ale

00:12.120 --> 00:14.320
możemy potrzebować więcej informacji

00:14.320 --> 00:16.660
dla konkretnych typów działów.

00:16.660 --> 00:18.830
Możemy mieć dział IT, który

00:18.830 --> 00:22.680
ma ID, który ma nazwę, który ma pracowników, ale

00:22.680 --> 00:24.900
który ma też administratorów,

00:24.900 --> 00:28.180
coś co ma np. tylko dział IT.

00:28.180 --> 00:30.340
Możemy mieć dział księgowości,

00:30.340 --> 00:34.280
który również może mieć identyfikator, nazwę i pracowników,

00:34.280 --> 00:37.470
ale może też mieć, powiedzmy, raporty.

00:37.470 --> 00:41.030
Tablica raportów, które wygenerował, i tak dalej.

00:41.030 --> 00:44.541
Więc możesz mieć pewne właściwości bazowe, a także metody, które

00:44.541 --> 00:46.970
wszystkie działy powinny mieć, ale potem możemy

00:46.970 --> 00:49.050
mieć wyspecjalizowane wersje tych działów

00:49.050 --> 00:51.900
z ich własnymi specyficznymi właściwościami i metodami,

00:51.900 --> 00:54.660
które tylko ten dział może mieć.

00:54.660 --> 00:58.100
Dziedziczenie może pomóc nam zaimplementować coś takiego.

00:58.100 --> 01:00.010
Jak więc możemy wykorzystać tutaj dziedziczenie?

01:00.010 --> 01:01.670
Cóż, mamy nasz wydział klasowy.

01:01.670 --> 01:05.130
Teraz stwórzmy te wyspecjalizowane działy.

01:05.130 --> 01:08.483
Tak więc tutaj możemy mieć klasowy dział IT.

01:09.610 --> 01:14.010
I w tej klasie tutaj chcę wykorzystać nazwę i identyfikator

01:14.010 --> 01:17.270
oraz pracowników działu ogólnego, ale chcę

01:17.270 --> 01:19.537
dodać własne cechy.

01:19.537 --> 01:21.970
Teraz możemy dziedziczyć po klasie department, używając

01:21.970 --> 01:24.270
tutaj słowa kluczowego extends, a następnie klasy,

01:24.270 --> 01:25.970
którą chcemy odziedziczyć.

01:25.970 --> 01:27.530
W tym przypadku jest to dział.

01:27.530 --> 01:30.600
Teraz ważne, że możesz dziedziczyć tylko z jednej klasy,

01:30.600 --> 01:33.010
więc nie możesz dziedziczyć z wielu klas, jeśli

01:33.010 --> 01:34.660
potrzebowałbyś tego.

01:34.660 --> 01:38.070
Więc teraz, tutaj, dziedziczę po departamencie i jedną

01:38.070 --> 01:40.700
z konsekwencji jest to, że jeśli teraz stworzę

01:40.700 --> 01:44.560
tutaj dział IT, to rzeczywiście mogę go nazwać w ten sposób, z tego

01:44.560 --> 01:46.640
rodzaju konstruktorem, nawet jeśli

01:46.640 --> 01:49.400
klasa działu IT jest pusta.

01:49.400 --> 01:52.830
Jeśli to zapiszemy, to rzeczywiście widzimy, że działa

01:52.830 --> 01:55.152
to tak jak wcześniej, ponieważ kiedy

01:55.152 --> 01:59.610
dziedziczymy po innej klasie, klasa, która dziedziczy, automatycznie

01:59.610 --> 02:02.870
dostaje wszystko, co ma klasa bazowa, dział w tym przypadku,

02:02.870 --> 02:06.072
łącznie z jej konstruktorem, więc tak długo, jak nie

02:06.072 --> 02:11.072
dodamy dedykowanego konstruktora dla tej odziedziczonej klasy, tak dla tej podklasy,

02:11.130 --> 02:14.760
konstruktor klasy bazowej, więc ten konstruktor jest automatycznie

02:14.760 --> 02:20.800
używany, kiedy instancjonujemy naszą podklasę.

02:20.800 --> 02:25.170
Więc w końcu magicznie wywołujemy konstruktor klasy bazowej z argumentami,

02:25.170 --> 02:27.562
które przekazujemy tutaj.

02:27.562 --> 02:30.350
Teraz jednak możemy dodać własny konstruktor,

02:30.350 --> 02:33.570
dodając konstruktor tutaj w dziale IT i teraz widzisz,

02:33.570 --> 02:35.800
że dostaję błędy.

02:35.800 --> 02:38.580
Dla jednego, teraz oczywiście powinniśmy zaakceptować dane,

02:38.580 --> 02:40.850
które otrzymujemy tutaj, chociaż moglibyśmy argumentować,

02:40.850 --> 02:44.120
że nazwa nie powinna być czymś, co musimy przekazać tutaj.

02:44.120 --> 02:46.430
I nie powinna to być również księgowość.

02:46.430 --> 02:49.110
Ale zamiast tego tutaj nazwa działu, ponieważ

02:49.110 --> 02:52.563
jest to klasa działu IT, może być zawsze IT.

02:53.700 --> 02:56.910
Nadal chcę zaakceptować mój identyfikator

02:56.910 --> 03:01.130
chociaż, ale teraz chcę zasadniczo przekazać to

03:01.130 --> 03:04.120
tak jak stała nazwa IT, do konstruktora

03:04.120 --> 03:06.420
działu.

03:06.420 --> 03:09.240
A do tego mamy specjalne słowo kluczowe, którego możemy,

03:09.240 --> 03:11.120
a w tym przypadku musimy, użyć.

03:11.120 --> 03:13.210
I to jest super.

03:13.210 --> 03:15.580
Zawsze, gdy dodajesz własny konstruktor

03:15.580 --> 03:18.400
w klasie, która dziedziczy po innej klasie,

03:18.400 --> 03:21.200
musisz dodać super w klasie dziedziczącej

03:21.200 --> 03:23.790
i musisz wykonać go jak funkcję.

03:23.790 --> 03:28.070
Super tutaj wywołuje konstruktor klasy bazowej, więc

03:28.070 --> 03:31.300
konstruktor działu w tym przypadku.

03:31.300 --> 03:33.690
A teraz drugi super przyjmuje argumenty

03:33.690 --> 03:37.630
konstruktora klasy nadrzędnej, ID, i nazwę.

03:37.630 --> 03:41.060
Więc tutaj mogę przekazać ID, więc ID, które dostaję tutaj,

03:41.060 --> 03:44.360
jest po prostu przekazywane do super, i mogę twardo zakodować

03:44.360 --> 03:46.860
wartość dla nazwy, jak IT.

03:46.860 --> 03:48.840
Więc to teraz wywoła konstruktor

03:48.840 --> 03:52.500
klasy bazowej z wnętrza podklasy.

03:52.500 --> 03:55.310
Teraz, co ważne, musisz wywołać super najpierw w

03:55.310 --> 03:58.220
swoim konstruktorze, zanim zrobisz cokolwiek ze słowem

03:58.220 --> 03:59.700
kluczowym "this".

03:59.700 --> 04:03.860
Więc jeśli planujesz przypisać tutaj jakiekolwiek inne specjalne właściwości,

04:03.860 --> 04:06.670
musisz to zrobić po wywołaniu super.

04:06.670 --> 04:10.346
I rzeczywiście chcę tu dodać swoje specjalne właściwości.

04:10.346 --> 04:13.528
Moglibyśmy tutaj dodać naszych adminów.

04:13.528 --> 04:17.800
Powiedzmy, że jako prywatny, a właściwie jako publiczny.

04:17.800 --> 04:20.878
Jako właściwość publiczna, admins,

04:20.878 --> 04:25.630
a to powinno być tablicą ciągów, powiedzmy.

04:25.630 --> 04:27.780
Cóż, wtedy nie chcę przekazywać

04:27.780 --> 04:31.460
tego do mojej klasy bazowej, ponieważ klasa działu

04:31.460 --> 04:34.670
nie chce żadnych danych administratora.

04:34.670 --> 04:38.800
Zamiast tego chcę to przechowywać we właściwości działu IT, więc tutaj

04:38.800 --> 04:42.150
możemy następnie dodać admins jako pole, które przyjmuje

04:42.150 --> 04:44.922
parę administratorów i przechowywać tam admins,

04:44.922 --> 04:47.290
albo ponieważ używam tutaj public, to

04:47.290 --> 04:49.070
już korzystam z tego skrótu,

04:49.070 --> 04:52.020
gdzie zostanie utworzona właściwość o tej samej

04:52.020 --> 04:55.160
nazwie i dane, które podamy do tego argumentu, będą

04:55.160 --> 04:57.530
przechowywane w tej automatycznie utworzonej

04:57.530 --> 05:00.148
właściwości.

05:00.148 --> 05:03.710
Jeszcze żeby było jasne, że super musi być najpierw

05:03.710 --> 05:07.610
wywołany, to pójdę dłuższą drogą, dodam tu adminów,

05:07.610 --> 05:12.610
jak to, a potem tu powiedz to. admins = admins.

05:13.260 --> 05:15.160
Znowu skrót byłby krótszy.

05:15.160 --> 05:17.830
Robię to tutaj, aby pokazać i uczynić naprawdę

05:17.830 --> 05:21.020
jasnym, że jeśli używasz czegoś, co używa słowa kluczowego

05:21.020 --> 05:24.480
"this", musisz to zrobić po wywołaniu super.

05:24.480 --> 05:27.640
I z tym, jeśli zapiszemy to, dostanę błąd, ponieważ nie

05:27.640 --> 05:29.530
przekazuję żadnych adminów, więc

05:29.530 --> 05:30.920
zróbmy to tutaj.

05:30.920 --> 05:33.920
Max to jedyny admin, którego tu podaję.

05:33.920 --> 05:36.950
Teraz możemy to zapisać i skompilować bez błędów i teraz

05:36.950 --> 05:39.910
tutaj, rzeczywiście widzimy nasz dział tutaj.

05:39.910 --> 05:41.840
Obecnie nosi ona nazwę IT.

05:41.840 --> 05:44.670
I jeśli konsolowo zalogujemy cały

05:44.670 --> 05:49.670
dział, a może uda nam się zmienić nazwę tego z księgowości na

05:50.220 --> 05:54.250
IT, a potem konsolowo. zaloguj się tutaj.

05:54.250 --> 05:57.570
Oczywiście zmiana nazwy tego była opcjonalna, po prostu ma więcej sensu,

05:57.570 --> 06:00.160
biorąc pod uwagę, że budujemy tutaj dział IT.

06:00.160 --> 06:02.510
Teraz, gdy konsola zalogowała cały

06:02.510 --> 06:06.110
dział, rzeczywiście widzimy, że mamy adminów, ale mamy

06:06.110 --> 06:11.110
też pracowników i wszystko, co ustawiłem w mojej klasie działu tutaj.

06:12.000 --> 06:13.990
Więc to jest dziedziczenie w akcji,

06:13.990 --> 06:16.520
bardzo przydatna funkcja, bo teraz oczywiście

06:16.520 --> 06:20.770
możemy też stworzyć nasz dział księgowy tutaj poprzez rozszerzenie

06:20.770 --> 06:23.260
department i tam możemy potem dodać nasze

06:23.260 --> 06:27.030
rzeczy specyficzne dla księgowości.

06:27.030 --> 06:29.540
Więc nadal możemy użyć konstruktora tutaj,

06:29.540 --> 06:31.700
a teraz może ze skrótem, zaakceptować

06:31.700 --> 06:34.400
kilka raportów tutaj, które mogą być własnością

06:34.400 --> 06:36.170
prywatną, a następnie mamy addReport,

06:36.170 --> 06:40.950
który przyjmuje tekst, który powinien być ciągiem, a następnie sięgamy do raportów

06:40.950 --> 06:45.360
tutaj i wypychamy tekst jako element do raportu i może mamy również getReports

06:45.360 --> 06:56.990
tutaj i tam po prostu konsolę.

06:56.990 --> 06:56.990
log (this. reports)

06:57.563 --> 07:00.860
lub nadajemy mu nazwę printReports, dlatego ma to większy sens.

07:00.860 --> 07:02.720
I teraz mielibyśmy bardzo specjalną

07:02.720 --> 07:04.890
wersję działu z dwiema metodami, których

07:04.890 --> 07:06.740
nie ma dział bazowy i z dodatkową

07:06.740 --> 07:08.100
właściwością, której nie

07:08.100 --> 07:09.840
ma dział bazowy.

07:09.840 --> 07:13.000
A i tak wszystko dostajemy z działu bazowego.

07:13.000 --> 07:15.560
Nazwa, którą ustawię tutaj na księgowość,

07:15.560 --> 07:17.950
oraz ID, które również przekazujemy do

07:17.950 --> 07:20.260
konstruktora działu bazowego.

07:20.260 --> 07:22.120
I tak z tym, na dole, jeśli

07:22.120 --> 07:24.770
utworzymy naszą księgowość tutaj z

07:24.770 --> 07:27.510
nowym AccountingDepartment, możemy

07:27.510 --> 07:31.750
podać nasz identyfikator, a następnie nasze raporty.

07:31.750 --> 07:34.340
Powiedzmy, że początkowo jest to pusta tablica.

07:34.340 --> 07:39.340
Następnie możemy wywołać addReport, coś poszło nie tak, nigdy nie było tak

07:40.550 --> 07:43.446
dobrze oczywiście, w księgowości chyba, a

07:43.446 --> 07:48.446
następnie możemy również wydrukować nasze raporty tutaj tak i z tym wszystkim

07:50.070 --> 07:52.630
kompiluje się po prostu dobrze i dostajemy

07:52.630 --> 07:55.710
raport tutaj i widzimy, dział IT na przykład,

07:55.710 --> 07:58.890
nie miałby żadnych raportów.

07:58.890 --> 08:01.820
Dział księgowości robi ze względu na dziedziczenie,

08:01.820 --> 08:05.623
gdzie dziedziczymy pewne cechy i dodajemy własne cechy.
