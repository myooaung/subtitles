WEBVTT

00:02.230 --> 00:05.130
Conferenciante: Así que ahora queremos obtener nuestro texto introducido

00:05.130 --> 00:07.960
aquí desde el componente NewTodo al componente de la aplicación.

00:07.960 --> 00:09.690
¿Por qué al componente de la aplicación?

00:09.690 --> 00:11.160
Porque ese es nuestro componente

00:11.160 --> 00:13.610
que tiene un enlace directo tanto con el componente

00:13.610 --> 00:16.340
NewTodo como con el componente TodoList.

00:16.340 --> 00:19.320
Así que, aquí quiero añadir una nueva función y la

00:20.800 --> 00:24.560
llamaré todoAddHandler, el nombre depende de ti, simplemente

00:24.560 --> 00:25.393
me gusta usar

00:25.393 --> 00:27.990
esa convención de tener handler al final si

00:27.990 --> 00:31.390
es una función que se dispara ante un evento.

00:31.390 --> 00:34.330
Y aquí espero obtener el texto, como una cadena,

00:34.330 --> 00:37.970
es nuestra función por lo que podemos esperar esto.

00:37.970 --> 00:40.720
Y entonces queremos añadir esto como un todo aquí.

00:40.720 --> 00:42.270
Ahora, por supuesto, ya que conoces React

00:42.270 --> 00:45.230
sabes que actualizar este array por sí solo no hará el truco, esto no va a volver

00:45.230 --> 00:47.440
a renderizar este componente por lo que tendremos que

00:47.440 --> 00:49.360
usar algo de gestión de estado aquí para hacer que

00:49.360 --> 00:51.900
esto funcione, antes de hacer eso sin embargo, vamos a asegurarnos

00:51.900 --> 00:53.040
de que al menos obtenemos el valor

00:53.040 --> 00:54.750
de esta función.

00:54.750 --> 00:57.460
Así que vamos a registrar el texto aquí y luego podemos centrarnos

00:57.460 --> 01:00.133
en su parte de gestión de estado como un segundo paso.

01:01.000 --> 01:03.020
Para conseguirlo aquí tenemos que

01:03.020 --> 01:05.850
asegurarnos de que esta función todoAddHandler

01:05.850 --> 01:09.050
puede ser llamada desde dentro del componente NewTodo

01:09.050 --> 01:12.113
porque es ahí donde añadimos la tarea al final.

01:13.090 --> 01:15.370
Ahora, ¿cómo hacemos que esta función aquí se

01:15.370 --> 01:17.860
pueda llamar desde dentro de este componente?

01:17.860 --> 01:22.300
Pasamos un puntero a esta función a ese componente.

01:22.300 --> 01:25.640
Así que, aquí podríamos añadir un nombre de propiedad, onAddTodo,

01:25.640 --> 01:27.280
y puedes nombrarlo como quieras,

01:27.280 --> 01:28.560
yo sólo lo nombro así porque

01:28.560 --> 01:32.030
esto básicamente ocurrirá ante un evento, un evento que controlamos

01:32.030 --> 01:34.600
por supuesto, pero aún así.

01:34.600 --> 01:38.030
Y aquí quiero reenviar todoAddHandler así que paso un

01:38.030 --> 01:40.600
puntero a esta función, no la estoy ejecutando

01:40.600 --> 01:42.120
aquí, sólo paso un puntero

01:42.120 --> 01:44.620
a esta función, en onAddTodo para que en

01:44.620 --> 01:49.240
lugar de NewTodo en props, que podemos obtener aquí, podamos llamar a esto,

01:49.240 --> 01:56.220
para que podamos llamar a props.

01:56.220 --> 01:56.220
onAddTodo

01:56.220 --> 01:59.640
aquí y reenviar el texto introducido, esa es la idea, Pero,

01:59.640 --> 02:01.730
por supuesto, a TypeScript no le gusta

02:01.730 --> 02:03.440
esto porque no sabe que habrá

02:03.440 --> 02:06.180
un prop onAddTodo en nuestros props aquí y cómo

02:06.180 --> 02:08.240
sería tal prop.

02:08.240 --> 02:11.670
Así que, al igual que en TodoList, tenemos que establecer una interfaz

02:11.670 --> 02:14.540
o simplemente una definición de tipo de nuestros props.

02:14.540 --> 02:18.200
Así que, vamos a NewTodo y tal vez, de nuevo, añadir una interfaz,

02:18.200 --> 02:20.820
también podría añadir un tipo de curso y voy a hacer

02:20.820 --> 02:23.060
eso aquí para mezclar las cosas.

02:23.060 --> 02:25.380
Por lo general, siempre me decantaría por una interfaz,

02:25.380 --> 02:27.660
pero utilizar un tipo también está bien.

02:27.660 --> 02:30.493
Entonces, para usar un tipo aquí podemos llamarlo

02:31.357 --> 02:33.820
NewTodoProps y el tipo es un tipo de objeto

02:33.820 --> 02:36.830
donde quiero tener un onAddTodo prop y este, a su

02:36.830 --> 02:39.120
vez, será un tipo de función, apuntará

02:39.120 --> 02:40.753
a una función.

02:41.720 --> 02:44.290
Definirás tipos de funciones como esta, como

02:44.290 --> 02:46.760
aprendiste, será una función que no devuelve

02:46.760 --> 02:48.850
nada pero que espera un perímetro y ese

02:48.850 --> 02:51.410
será el texto que el usuario introdujo.

02:51.410 --> 02:54.023
Entonces, el texto Todo que es de tipo cadena,

02:55.120 --> 02:57.123
es lo que espera esta función.

02:58.920 --> 03:01.770
Ahora, vamos a establecer esto en este tipo genérico aquí

03:01.770 --> 03:03.103
y apuntar a NewTodoProps.

03:04.510 --> 03:08.620
Y con eso, podemos llamar a onAddTodo y pasar una cadena.

03:08.620 --> 03:11.470
Y si tratara de pasar un número aquí, por ejemplo, nosotros,

03:11.470 --> 03:14.730
por supuesto, obtendríamos un error porque definimos claramente

03:14.730 --> 03:17.590
que el argumento tiene que ser una cadena allí arriba.

03:17.590 --> 03:18.733
Así que, vamos a revertir esto.

03:20.550 --> 03:24.630
Con esto, si volvemos a introducir un nuevo objetivo, terminarlo en

03:24.630 --> 03:27.150
un mes, volvemos a ver un registro aquí pero

03:27.150 --> 03:28.690
ahora viene del componente

03:28.690 --> 03:30.750
de la aplicación, como puedes ver claramente,

03:30.750 --> 03:34.170
porque hemos añadido este registro aquí.

03:34.170 --> 03:37.380
Así que esta comunicación entre el componente NewTodo y el componente

03:37.380 --> 03:39.480
de la aplicación aquí funciona.

03:39.480 --> 03:42.750
Y con eso, vamos a implementar un poco de gestión de estado aquí y, de

03:42.750 --> 03:44.160
nuevo, esto es también algo que

03:44.160 --> 03:46.850
puedes probar por tu cuenta primero si quieres, para asegurarte

03:46.850 --> 03:49.670
de que renderizamos todos en estado para que cada vez que

03:49.670 --> 03:52.170
actualicemos nuestros todos también volvamos a renderizar

03:52.170 --> 03:54.460
este componente.

03:54.460 --> 03:56.263
Lo haremos en la próxima conferencia.
