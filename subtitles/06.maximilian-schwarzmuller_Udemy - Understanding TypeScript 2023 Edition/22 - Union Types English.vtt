WEBVTT

1
00:00:02.130 --> 00:00:02.963
<v Instructor>So we covered</v>

2
00:00:02.963 --> 00:00:05.180
a couple of the core types TypeScript knows.

3
00:00:05.180 --> 00:00:06.590
Now let's move on.

4
00:00:06.590 --> 00:00:09.140
For that, I'll rename app.ts here

5
00:00:09.140 --> 00:00:11.670
to objs-arrays-enums,

6
00:00:11.670 --> 00:00:12.750
or whatever you want to name it,

7
00:00:12.750 --> 00:00:15.080
basically so that we still have that file,

8
00:00:15.080 --> 00:00:17.130
but I'll create a brand new app.ts file

9
00:00:17.130 --> 00:00:18.860
so that we have an empty file again

10
00:00:18.860 --> 00:00:20.500
in which we can work.

11
00:00:20.500 --> 00:00:22.550
Now in this file, I want to dive into

12
00:00:22.550 --> 00:00:25.790
another interesting type that you'll find in TypeScript.

13
00:00:25.790 --> 00:00:28.640
And that's the union type.

14
00:00:28.640 --> 00:00:30.190
Now what's that?

15
00:00:30.190 --> 00:00:33.000
Let's come back to our add function,

16
00:00:33.000 --> 00:00:34.490
which we wrote earlier,

17
00:00:34.490 --> 00:00:37.270
I'll copy that and move them to app.ts.

18
00:00:37.270 --> 00:00:39.190
Get rid of that comment here,

19
00:00:39.190 --> 00:00:42.940
and here on add, let's close basics.ts

20
00:00:42.940 --> 00:00:44.170
so that we get rid of that error.

21
00:00:44.170 --> 00:00:47.970
Here in add, I now want to be more flexible

22
00:00:47.970 --> 00:00:49.920
regarding what we accept here.

23
00:00:49.920 --> 00:00:52.570
I will also get rid of showResult and phrase,

24
00:00:52.570 --> 00:00:54.370
I don't need that.

25
00:00:54.370 --> 00:00:55.690
And the only thing I want to do

26
00:00:55.690 --> 00:00:58.590
is I want to calculate a result and return it.

27
00:00:58.590 --> 00:01:01.960
But I want to be more flexible regarding the inputs.

28
00:01:01.960 --> 00:01:06.045
Previously, we made sure that we only work with numbers.

29
00:01:06.045 --> 00:01:09.357
Now let's say we actually name this combine

30
00:01:09.357 --> 00:01:13.190
and it should work with both numbers and strings.

31
00:01:13.190 --> 00:01:15.710
Because it turns out we can combine

32
00:01:15.710 --> 00:01:18.595
both numbers and strings with this plus operator,

33
00:01:18.595 --> 00:01:21.650
the only difference is that in one scenario,

34
00:01:21.650 --> 00:01:24.030
we get back a number as a result,

35
00:01:24.030 --> 00:01:27.120
in the other scenario we get a concatenated string,

36
00:01:27.120 --> 00:01:30.150
as we actually already saw early on this module.

37
00:01:30.150 --> 00:01:32.040
But now I want to allow this behavior,

38
00:01:32.040 --> 00:01:33.950
because you could have an application

39
00:01:33.950 --> 00:01:36.740
where you want to have a flexible combination function

40
00:01:36.740 --> 00:01:38.963
that does work with numbers and strings.

41
00:01:39.830 --> 00:01:42.360
Therefore I will also name this input1 here,

42
00:01:42.360 --> 00:01:47.340
and this input2, and combine these two now.

43
00:01:47.340 --> 00:01:49.740
But we will have one problem of course,

44
00:01:49.740 --> 00:01:53.180
right now we set both parameters to be numbers.

45
00:01:53.180 --> 00:01:56.050
This means that we can call this function,

46
00:01:56.050 --> 00:01:58.190
as long as we do want to work with numbers.

47
00:01:58.190 --> 00:01:59.130
Let's say down there,

48
00:01:59.130 --> 00:02:01.640
we're creating a new constant, combinedAges.

49
00:02:02.931 --> 00:02:04.690
And there I call combine

50
00:02:04.690 --> 00:02:09.602
and pass in 30 and 26 here as ages

51
00:02:09.602 --> 00:02:12.000
in whatever application we're building.

52
00:02:12.000 --> 00:02:15.014
Another after console log combinedAges,

53
00:02:15.014 --> 00:02:17.240
well it shouldn't be too surprising

54
00:02:17.240 --> 00:02:19.830
that if we now compile this file here,

55
00:02:19.830 --> 00:02:22.360
and we then reload this page, we get 56.

56
00:02:22.360 --> 00:02:24.690
So this works, we get this number.

57
00:02:24.690 --> 00:02:26.710
But of course, we have a problem

58
00:02:26.710 --> 00:02:28.838
if we try to create a string here.

59
00:02:28.838 --> 00:02:31.610
CombinedNames, for example.

60
00:02:31.610 --> 00:02:36.033
If I try to combine Max and Anna here,

61
00:02:37.230 --> 00:02:39.630
then well, we immediately get an error here

62
00:02:39.630 --> 00:02:42.320
that Max is not assignable to type number

63
00:02:42.320 --> 00:02:44.350
because this, of course, is a string.

64
00:02:44.350 --> 00:02:45.790
Now of course, we could change this

65
00:02:45.790 --> 00:02:47.750
to accept strings instead of numbers,

66
00:02:47.750 --> 00:02:50.130
but now the first function call would fail.

67
00:02:50.130 --> 00:02:52.750
And that is where union types can help us.

68
00:02:52.750 --> 00:02:55.692
If we have some place in our application,

69
00:02:55.692 --> 00:02:58.810
be that a parameter of a function

70
00:02:58.810 --> 00:03:01.700
or a constant or a variable we're using somewhere,

71
00:03:01.700 --> 00:03:05.030
where we accept two different kinds of values.

72
00:03:05.030 --> 00:03:07.410
Well then, a union type can help us.

73
00:03:07.410 --> 00:03:09.800
To tell TypeScript that we are fine

74
00:03:09.800 --> 00:03:12.690
with either a number or a string,

75
00:03:12.690 --> 00:03:14.220
we use number

76
00:03:14.220 --> 00:03:17.710
and then the pipe symbol here,

77
00:03:17.710 --> 00:03:20.660
and then the other type we also accept.

78
00:03:20.660 --> 00:03:22.340
And you can have more than two types,

79
00:03:22.340 --> 00:03:25.220
you can accept as many types here as you need.

80
00:03:25.220 --> 00:03:27.050
So here, I only need two though,

81
00:03:27.050 --> 00:03:28.880
and that's the afforded type assignment

82
00:03:28.880 --> 00:03:31.720
I will go with, number or string.

83
00:03:31.720 --> 00:03:33.690
Now I get an error here,

84
00:03:33.690 --> 00:03:35.930
that the plus operator cannot be applied

85
00:03:35.930 --> 00:03:39.120
to types string or number and string or number.

86
00:03:39.120 --> 00:03:41.500
That's actually not entirely correct,

87
00:03:41.500 --> 00:03:44.350
this should work, because we can use the plus operator

88
00:03:44.350 --> 00:03:46.670
with both numbers and with strings.

89
00:03:46.670 --> 00:03:49.600
But TypeScript only sees that we have a union type here,

90
00:03:49.600 --> 00:03:52.540
and it doesn't analyze what's in the union type,

91
00:03:52.540 --> 00:03:56.010
it just sees, "Okay, you're expecting multiple types.

92
00:03:56.010 --> 00:03:57.530
Maybe that includes types

93
00:03:57.530 --> 00:03:59.460
where I can't use the plus operator,

94
00:03:59.460 --> 00:04:01.640
hence I will complain here."

95
00:04:01.640 --> 00:04:05.410
Now thankfully, we can work around that issue though.

96
00:04:05.410 --> 00:04:07.910
We can add our runtime type check here

97
00:04:07.910 --> 00:04:11.240
and see if input1 typeof that

98
00:04:12.750 --> 00:04:15.170
is equal to number

99
00:04:16.530 --> 00:04:21.283
and if typeof input2 is equal to number,

100
00:04:24.100 --> 00:04:26.410
and then move this calculation in there,

101
00:04:26.410 --> 00:04:28.510
now just one improvement,

102
00:04:28.510 --> 00:04:32.210
let's create result as a variable outset of that if check,

103
00:04:32.210 --> 00:04:33.880
because of lock scoping,

104
00:04:33.880 --> 00:04:37.873
so that this is a variable available in the entire function,

105
00:04:37.873 --> 00:04:40.310
and then just assign a new value in there.

106
00:04:40.310 --> 00:04:42.818
So now here we check if we do have two numbers.

107
00:04:42.818 --> 00:04:45.890
And therefore TypeScript knows that in here,

108
00:04:45.890 --> 00:04:49.790
input1 and input2 both will be numbers.

109
00:04:49.790 --> 00:04:53.900
Now let's add a else check here.

110
00:04:53.900 --> 00:04:56.913
And there we can set result equal to input1.tostring,

111
00:04:58.550 --> 00:05:00.570
explicitly converting this to a string,

112
00:05:00.570 --> 00:05:02.880
and input2.tostring.

113
00:05:02.880 --> 00:05:04.160
And this will then also be fine

114
00:05:04.160 --> 00:05:05.700
for TypeScript and JavaScript,

115
00:05:05.700 --> 00:05:08.220
because we can concatenate two strings.

116
00:05:08.220 --> 00:05:10.800
So now we have almost the same calculation,

117
00:05:10.800 --> 00:05:12.110
but we made clear that here,

118
00:05:12.110 --> 00:05:13.590
we'll always work with numbers,

119
00:05:13.590 --> 00:05:15.730
here we'll always work with strings,

120
00:05:15.730 --> 00:05:17.490
and then we return the result.

121
00:05:17.490 --> 00:05:20.870
And now with that, if we console log

122
00:05:20.870 --> 00:05:25.350
the combined names down there,

123
00:05:25.350 --> 00:05:27.210
and we compile this file,

124
00:05:27.210 --> 00:05:29.278
we'll see that once we revisit our page,

125
00:05:29.278 --> 00:05:31.460
we got the combined numbers there,

126
00:05:31.460 --> 00:05:33.150
which were simply added together

127
00:05:33.150 --> 00:05:35.090
and hence we get a number as a result,

128
00:05:35.090 --> 00:05:36.850
and two combined names here.

129
00:05:36.850 --> 00:05:40.830
So this is how we can use union types to be more flexible

130
00:05:40.830 --> 00:05:43.770
regarding what we do in a function, for example,

131
00:05:43.770 --> 00:05:45.920
or anywhere else in our code.

132
00:05:45.920 --> 00:05:49.520
This extra runtime type check will not always be required

133
00:05:49.520 --> 00:05:51.230
when you work with union types,

134
00:05:51.230 --> 00:05:54.090
but often will be because with union types,

135
00:05:54.090 --> 00:05:56.350
you can be more flexible in, for example,

136
00:05:56.350 --> 00:05:58.170
the parameters you accept,

137
00:05:58.170 --> 00:06:00.940
but then you might have different logic in your function

138
00:06:00.940 --> 00:06:03.730
based on which exact type you are getting.

139
00:06:03.730 --> 00:06:05.640
So that your function is able to work

140
00:06:05.640 --> 00:06:07.810
with multiple types of values

141
00:06:07.810 --> 00:06:10.320
but that it then does slightly different things

142
00:06:10.320 --> 00:06:12.410
depending on the type you're getting.

143
00:06:12.410 --> 00:06:15.270
So often, you might need such a runtime check

144
00:06:15.270 --> 00:06:16.700
when working with union types,

145
00:06:16.700 --> 00:06:18.490
but you'll not always need it.

146
00:06:18.490 --> 00:06:20.900
You will certainly also encounter situations

147
00:06:20.900 --> 00:06:24.060
in TypeScript programs where you can use a union type

148
00:06:24.060 --> 00:06:25.870
without a runtime type check.

149
00:06:25.870 --> 00:06:28.663
It really depends on the logic you're writing.

