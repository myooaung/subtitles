WEBVTT

00:02.120 --> 00:05.300
Homme : Alors comment pouvons-nous afficher les coordonnées sur une carte maintenant ?

00:05.300 --> 00:08.180
Pour cela aussi, nous allons utiliser une API de Google.

00:08.180 --> 00:10.690
Si vous recherchez Google JavaScript Maps,

00:10.690 --> 00:13.810
ou Google JS Maps, vous trouverez les documents officiels

00:13.810 --> 00:16.970
de l'API Google Maps de Google JavaScript.

00:16.970 --> 00:19.660
Vous apprendrez ici comment utiliser Google Maps dans votre

00:19.660 --> 00:22.020
application Web pour obtenir un rendu de carte.

00:22.020 --> 00:24.720
Et c'est vraiment simple et direct.

00:24.720 --> 00:27.280
Tout d'abord, nous devons ajouter ce script

00:27.280 --> 00:31.720
ici, qui ajoutera ce SDK Google Maps à notre application.

00:31.720 --> 00:34.220
Il suffit donc de prendre ce script et de l'ajouter

00:34.220 --> 00:38.210
à votre fichier html index, au-dessus de votre script.

00:38.210 --> 00:40.670
Maintenant, il est important que nous n'installions

00:40.670 --> 00:42.920
pas ce NPM, car il n'est pas publié sur NPM,

00:42.920 --> 00:45.900
donc nous utilisons ce lien CDN, qui tire le script, directement

00:45.900 --> 00:48.140
des serveurs de Google.

00:48.140 --> 00:51.560
Et ici nous devons configurer notre API_KEY.

00:51.560 --> 00:54.390
Il s'agit bien sûr de la clé API_KEY que nous avons

00:54.390 --> 00:57.430
déjà dans le fichier typescript, nous pouvons donc

00:57.430 --> 01:02.170
la copier dans l'index html et remplacer VOTRE_API_KEY par celle-ci.

01:02.170 --> 01:06.120
Il faut aussi se débarrasser de ce "&amp;callback=initMap" à la

01:06.120 --> 01:07.150
fin, qui déclencherait

01:07.150 --> 01:10.240
une fonction dès que la carte serait chargée, ou

01:10.240 --> 01:13.430
que le SDK serait chargé, et ce n'est pas ce que je

01:13.430 --> 01:14.843
veux ici.

01:15.840 --> 01:19.760
Donc, avec cela, nous chargeons ce SDK, et maintenant nous

01:19.760 --> 01:22.820
pouvons l'utiliser, et c'est ici que nous aurons

01:22.820 --> 01:24.250
un problème.

01:24.250 --> 01:26.210
Je veux l'utiliser pour rendre une carte,

01:26.210 --> 01:28.710
et rendre une carte est en fait très simple.

01:28.710 --> 01:31.070
Dans les docs officiels, nous voyons qu'à la fin nous devons

01:31.070 --> 01:33.870
instancier ce google. cartes. Fonction constructrice

01:33.870 --> 01:38.960
de la carte, on lui passe un centre, qui est essentiellement...

01:38.960 --> 01:41.720
Cette paire de coordonnées que nous recevons de l'arrière,

01:41.720 --> 01:43.250
et ajouter un niveau de zoom.

01:43.250 --> 01:45.820
Nous pouvons donc simplement copier ceci, puis

01:45.820 --> 01:48.710
ici, une fois que nous avons les coordonnées, exécuter

01:48.710 --> 01:50.010
ce code, et peut-être stocker

01:50.010 --> 01:53.750
la carte ici dans une constante nommée "Map". Mais bien sûr, nous avons une erreur ici.

01:53.750 --> 01:55.117
"Cannot find name google",

01:55.117 --> 01:57.600
et c'est logique, ce ne sera pas disponible

01:57.600 --> 02:01.320
globalement, mais typescript ne le sait pas.

02:01.320 --> 02:03.380
Il sera disponible dans le monde entier,

02:03.380 --> 02:06.300
grâce à ce SDK JavaScript que nous importons.

02:06.300 --> 02:08.343
Mais bien sûr, le script ne le sait pas.

02:09.390 --> 02:12.270
Vous apprendrez ce que vous pouvez faire à

02:12.270 --> 02:14.200
cet endroit, vous pouvez bien

02:14.200 --> 02:19.200
sûr utiliser "declare var google," et lui attribuer la valeur "any".

02:19.990 --> 02:21.020
Avec ça, vous dites au script,

02:21.020 --> 02:22.887
"C'est bon, ça va exister, ne vous inquiétez pas. Nous pouvons le faire, et l'erreur disparaît.

02:22.887 --> 02:26.480
Maintenant, nous pouvons également utiliser nos coordonnées

02:26.480 --> 02:29.060
ici, au lieu de celles codées en dur, et si nous

02:29.060 --> 02:31.370
voulons également rendre un marqueur,

02:31.370 --> 02:33.480
c'est également possible.

02:33.480 --> 02:36.430
Dans la documentation officielle, cliquez simplement sur

02:36.430 --> 02:37.930
"Ajouter une carte avec un marqueur",

02:37.930 --> 02:39.517
nous apprenons que l'ajout d'un

02:39.517 --> 02:41.520
marqueur est très simple : il suffit d'utiliser

02:41.520 --> 02:44.600
la carte créée, de créer un marqueur avec cette commande et de

02:44.600 --> 02:47.223
pointer sur cette carte.

02:49.040 --> 02:50.950
Nous allons donc copier cet extrait

02:50.950 --> 02:52.980
de code ici, et de retour dans notre code,

02:52.980 --> 02:56.130
après avoir créé la carte, je crée mon marqueur comme ceci,

02:56.130 --> 02:59.160
et la position ici encore sont mes coordonnées.

02:59.160 --> 03:01.160
Cela va maintenant rendre

03:01.160 --> 03:04.173
une carte, et y placer un marqueur.

03:05.040 --> 03:06.600
La seule chose qui reste à faire

03:06.600 --> 03:08.580
est de s'assurer que cette carte est

03:08.580 --> 03:10.350
rendue au bon endroit.

03:10.350 --> 03:12.350
Par défaut, il recherche un élément avec un I. D. "carte" et c'est ce que

03:12.350 --> 03:14.010
nous avons ici.

03:14.010 --> 03:16.670
Mais si vous avez choisi un autre I. D. ici, assurez-vous de

03:16.670 --> 03:18.720
l'ajuster dans votre code typographique.

03:18.720 --> 03:20.470
Avec cela,

03:20.470 --> 03:23.473
si nous sauvegardons, il compile sans erreurs,

03:24.610 --> 03:26.890
et maintenant si j'entre une adresse

03:26.890 --> 03:30.640
ici, il devrait rendre ceci.

03:30.640 --> 03:33.450
Cela fonctionne donc, et nous pouvons ajuster le niveau de zoom

03:33.450 --> 03:35.320
ici, pour être un peu plus agrandi, par exemple

03:35.320 --> 03:38.650
en le changeant en 16, et maintenant si nous essayons ceci, nous pouvons le

03:38.650 --> 03:40.370
voir un peu plus clairement.

03:40.370 --> 03:42.910
Mais cela fonctionne, et c'est ce que nous pouvons dire.

03:42.910 --> 03:45.640
Nous pouvons nous déplacer et utiliser cette carte.

03:45.640 --> 03:47.480
Tout cela est bien joli, mais ce n'est pas optimal.

03:47.480 --> 03:50.420
Bien sûr, cela fonctionne, grâce à "declare var

03:50.420 --> 03:53.340
google", nous ne recevons aucune erreur.

03:53.340 --> 03:56.760
Mais nous ne recevons pas non plus de soutien de type.

03:56.760 --> 03:58.810
SI j'introduis une erreur,

03:58.810 --> 04:01.550
si je fais par exemple référence à ". map" au lieu de ". maps", il compile sans problème, et il ne se

04:01.550 --> 04:02.960
plante qu'en production

04:02.960 --> 04:06.730
par la suite.

04:06.730 --> 04:08.860
Si j'essaie de rendre une carte.

04:08.860 --> 04:11.280
Maintenant j'ai une erreur ici, prise par notre gestionnaire d'erreur.

04:11.280 --> 04:13.150
Ce n'est donc bien sûr pas ce que nous voulons.

04:13.150 --> 04:16.493
Nous voulons un support de type, nous voulons gérer les erreurs de décharge comme celle-ci,

04:17.470 --> 04:19.770
pendant le développement, et non au moment de l'exécution.

04:19.770 --> 04:22.880
Alors, comment faire en sorte que le script connaisse Google Maps ?

04:22.880 --> 04:27.380
Les types à la rescousse.

04:27.380 --> 04:31.080
Si vous recherchez "types google maps", vous trouverez différents paquets,

04:31.080 --> 04:32.470
qui ajoutent des types pour,

04:32.470 --> 04:34.160
eh bien, Google Maps.

04:34.160 --> 04:37.350
Nous n'avons pas installé le paquet Google Maps via NPM, mais

04:37.350 --> 04:38.800
nous pouvons toujours installer

04:38.800 --> 04:41.050
des types pour ce paquet via NPM.

04:41.050 --> 04:44.130
Et ici, je vais choisir le premier paquet, et l'installer

04:44.130 --> 04:46.160
simplement dans notre projet.

04:46.160 --> 04:48.790
Alors retournons, serveur de développement

04:48.790 --> 04:51.560
rapide, et exécutons "npm install --save-dev

04:51.560 --> 04:54.030
"@types/googlemaps," un mot.

04:54.030 --> 04:56.400
C'était le nom de ce paquet.

04:58.613 --> 05:01.560
Cela va maintenant installer les types globaux pour ce paquet.

05:01.560 --> 05:03.303
Maintenant, si je redémarre

05:04.200 --> 05:08.410
avec NPM start, voyons si nous avons une meilleure situation.

05:08.410 --> 05:11.500
Si j'enlève ce truc de "declare

05:11.500 --> 05:15.180
var" ici, ou si je le commente.

05:15.180 --> 05:18.090
Il compile toujours, maintenant ce truc de google maps ici est

05:18.090 --> 05:19.940
détecté, et si j'essaie d'accéder à ". map" ici, j'obtiens une erreur, j'obtiens

05:19.940 --> 05:23.290
également l'auto-complétion maintenant et il voit, "Oui, il

05:23.290 --> 05:27.010
y a une chose de cartes. Il me dit également que ce constructeur

05:27.010 --> 05:29.880
de carte a besoin d'un "Div" ou d'un "Element" où il doit

05:29.880 --> 05:32.410
rendre la carte comme premier argument, puis

05:32.410 --> 05:35.100
de quelques options pour la carte.

05:35.100 --> 05:38.660
Donc cela fonctionne maintenant ici, comme il se doit.

05:38.660 --> 05:40.270
Et c'est bien sûr un grand pas en avant,

05:40.270 --> 05:42.850
car nous avons maintenant notre application qui fonctionne,

05:42.850 --> 05:45.170
et elle fonctionnait aussi avant.

05:45.170 --> 05:47.600
Mais maintenant, il fonctionne également

05:47.600 --> 05:51.170
avec des types, et avec un support de type approprié.

05:51.170 --> 05:53.490
Et ce staffeur est une autre grande pratique, pour la façon

05:53.490 --> 05:56.050
dont vous construisez des applications avec le script de type

05:56.050 --> 05:58.500
et utilisez certains types de fonctionnalités, mais c'est

05:58.500 --> 06:00.690
surtout une grande pratique pour la façon dont vous

06:00.690 --> 06:03.700
pouvez travailler avec des bibliothèques tierces.

06:03.700 --> 06:06.250
Certains, comme "axios", apportent leurs propres types.

06:06.250 --> 06:08.470
D'autres ne sont même pas installés

06:08.470 --> 06:11.540
avec NPM, et pourtant vous pouvez ajouter des

06:11.540 --> 06:15.421
types avec un paquetage de types approprié.

06:15.421 --> 06:18.810
J'espère que ce module vous a été utile, pour comprendre ceci, et pour

06:18.810 --> 06:21.320
tous les projets futurs sur lesquels vous pourriez

06:21.320 --> 06:23.230
travailler, où il est fort probable que

06:23.230 --> 06:25.620
vous travailliez également avec certaines bibliothèques

06:25.620 --> 06:27.040
tierces.
