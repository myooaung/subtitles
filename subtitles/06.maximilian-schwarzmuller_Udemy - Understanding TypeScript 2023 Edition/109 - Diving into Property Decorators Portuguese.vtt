WEBVTT

00:02.250 --> 00:05.050
Instrutor: Agora antes de explorarmos casos de uso

00:05.050 --> 00:07.811
mais útil ou um cenário para alguns decoradores.

00:07.811 --> 00:10.700
Quero lhes mostrar brevemente todos os outros lugares onde

00:10.700 --> 00:12.550
é possível acrescentar decoradores.

00:12.550 --> 00:15.670
Obviamente podemos adicionar decoradores às aulas, mas há mais

00:15.670 --> 00:17.731
lugares onde podemos adicioná-los.

00:17.731 --> 00:20.750
Para isso vou criar uma nova classe, pois precisamos de uma classe

00:20.750 --> 00:22.460
para qualquer decorador que queiramos

00:22.460 --> 00:24.580
usar, mas não temos que adicionar todos os decoradores

00:24.580 --> 00:26.420
diretamente à classe.

00:26.420 --> 00:28.480
Digamos que temos uma classe

00:28.480 --> 00:31.523
de produto aqui e, na classe de produto,

00:31.523 --> 00:34.540
temos um título talvez, que é um fio.

00:34.540 --> 00:37.070
E podemos atribuir um valor aqui com o construtor.

00:37.070 --> 00:39.600
Claro que sempre poderíamos usar o atalho e fazer tudo isso

00:39.600 --> 00:41.570
em um único passo em uma construtora, como você

00:41.570 --> 00:42.680
aprendeu antes.

00:42.680 --> 00:44.451
Aqui vou pegar o caminho mais longo.

00:44.451 --> 00:49.451
Podemos ter um método aqui, obter preço com impostos.

00:50.150 --> 00:53.442
Para isso, espero obter uma taxa de imposto que é um número

00:53.442 --> 00:57.150
e para que isso funcione devemos também armazenar um preço aqui.

00:57.150 --> 01:01.200
Preço da propriedade que também recebemos como parte da construtora.

01:01.200 --> 01:04.060
Novamente poderíamos usar o atalho aqui, mas

01:04.060 --> 01:05.340
o farei desta forma.

01:05.340 --> 01:08.120
E então, neste método,

01:08.120 --> 01:13.120
eu voltarei, Isto. preço vezes um mais imposto.

01:13.200 --> 01:15.300
Portanto, temos este método de utilidade

01:15.300 --> 01:17.610
e também podemos adicionar um getter e um setter,

01:17.610 --> 01:19.090
se você quiser.

01:19.090 --> 01:22.700
Por exemplo, podemos adicionar um setter para o preço aqui, onde

01:22.700 --> 01:25.850
obtemos o valor que deve ser um número e onde controlamos

01:25.850 --> 01:28.231
que só podemos definir certos valores.

01:28.231 --> 01:32.090
Agora, para fazer este trabalho, vou re-nomear o preço aqui em cima, para

01:32.090 --> 01:35.350
sublinhar o preço e torná-lo privado de fato, para que não possamos

01:35.350 --> 01:37.540
alcançá-lo diretamente.

01:37.540 --> 01:39.970
E aqui vou definir este preço de sublinhado

01:39.970 --> 01:42.580
e aqui vou usar este preço de sublinhado.

01:42.580 --> 01:44.800
E com estas mudanças no setter, podemos

01:44.800 --> 01:48.350
definir este preço sublinhado igual ao valor que obtemos.

01:48.350 --> 01:51.290
Mas antes de fazê-lo, podemos verificar se

01:51.290 --> 01:52.770
o valor é maior que zero,

01:52.770 --> 01:55.630
para não aceitarmos preços negativos.

01:55.630 --> 01:57.220
Então, com isso, só fixamos o preço

01:57.220 --> 02:00.159
se for maior que zero, caso contrário, não fazemos nada.

02:00.159 --> 02:04.330
De fato, poderíamos cometer um erro no outro caso.

02:04.330 --> 02:08.389
O preço inválido deve ser positivo.

02:08.389 --> 02:11.350
Então isso é algo que podemos fazer, agora temos

02:11.350 --> 02:14.020
uma classe com duas propriedades, com um

02:14.020 --> 02:16.700
acessor e também com um método aqui e este

02:16.700 --> 02:18.570
método tem um parâmetro.

02:18.570 --> 02:21.180
Agora a tudo isso podemos acrescentar decoradores

02:21.180 --> 02:25.910
e vamos começar com um bom velho amigo, um decorador de troncos.

02:25.910 --> 02:28.960
Aqui vou nomeá-lo log para não entrar em conflito com o logger lá em cima,

02:28.960 --> 02:30.650
porque este decorador de log, não será

02:30.650 --> 02:31.960
adicionado a uma classe e, portanto,

02:31.960 --> 02:33.770
terá argumentos diferentes.

02:33.770 --> 02:35.671
No entanto, receberá argumentos,

02:35.671 --> 02:38.580
e quais argumentos o decorador recebe, depende de

02:38.580 --> 02:40.030
onde você os adiciona.

02:40.030 --> 02:41.960
É por isso que não posso reutilizar o madeireiro,

02:41.960 --> 02:45.700
porque isso foi afinado para trabalhar apenas com classes.

02:45.700 --> 02:48.100
Agora aqui eu não tenho uma fábrica de decoradores,

02:48.100 --> 02:49.980
na verdade, só tenho que decorar uma função

02:49.980 --> 02:53.510
como esta, mas ainda assim, quais argumentos esta função de decorador obtém,

02:53.510 --> 02:55.230
depende de onde a usamos.

02:55.230 --> 02:58.750
Por exemplo, podemos acrescentar um decorador a um imóvel.

02:58.750 --> 03:01.120
Aqui eu posso adicionar um registro como este

03:01.120 --> 03:03.840
e se você adicionar um decorador a um imóvel, o decorador

03:03.840 --> 03:05.759
recebe dois argumentos.

03:05.759 --> 03:09.830
O primeiro argumento, é o alvo do imóvel e, por exemplo,

03:09.830 --> 03:12.010
um imóvel como este, que chamamos

03:12.010 --> 03:15.290
de instância se você trabalhar com ele.

03:15.290 --> 03:19.490
Este será o protótipo do objeto que foi criado.

03:19.490 --> 03:22.140
Se tivéssemos uma propriedade estática aqui, o alvo

03:22.140 --> 03:24.850
se referiria ao estado da função do construtor.

03:24.850 --> 03:27.770
Portanto, aqui vou dizer qualquer coisa, porque não sei

03:27.770 --> 03:30.140
exatamente qual estrutura terá objeto.

03:30.140 --> 03:35.140
O segundo argumento que temos, é o nome da propriedade de forma simples.

03:35.290 --> 03:37.682
Isso poderia ser um fio aqui, poderia

03:37.682 --> 03:40.400
também, é claro, ser um símbolo.

03:40.400 --> 03:43.470
Não sabemos o que usamos como identificador de propriedade.

03:43.470 --> 03:48.037
E então aqui vou registrar o decorador de propriedades, para que

03:49.130 --> 03:51.120
possamos ver quando isto funcionar

03:51.120 --> 03:55.980
e eu quero um console. alvo de registro e também nome da propriedade.

03:55.980 --> 03:57.780
Para que possamos ver o que está nestes dois valores.

03:57.780 --> 04:01.280
Com isso, se economizarmos para que se compila sem erros,

04:01.280 --> 04:03.080
e se formos ao nosso servidor,

04:03.080 --> 04:06.871
vemos, o decorador de propriedades é impresso lá embaixo.

04:06.871 --> 04:08.630
E esta é a nossa produção que obtemos.

04:08.630 --> 04:13.220
Vemos aqui que é o protótipo de nosso objeto porque não estamos

04:13.220 --> 04:15.850
vendo aqui título e preço.

04:15.850 --> 04:18.160
Mas vemos que o preço é obtido com impostos

04:18.160 --> 04:19.770
e de fato os métodos são registrados

04:19.770 --> 04:21.900
no protótipo de um objeto.

04:21.900 --> 04:24.240
Então esse é o protótipo de nosso objeto e vemos

04:24.240 --> 04:26.640
o título aqui à direita, esse é o nome da propriedade

04:26.640 --> 04:28.943
com a qual estamos trabalhando.

04:29.800 --> 04:33.770
Mas quando exatamente este madeireiro executa?

04:33.770 --> 04:37.880
Bem, como você pode dizer, já que nunca instanto nenhum produto,

04:37.880 --> 04:41.670
ele é executado basicamente quando sua definição de classe

04:41.670 --> 04:43.980
é registrada por JavaScript.

04:43.980 --> 04:47.660
Portanto, ele executa quando você define esta propriedade basicamente

04:47.660 --> 04:49.140
para JavaScript, como parte

04:49.140 --> 04:50.960
de sua classe aqui, como parte desta

04:50.960 --> 04:52.970
função construtora.

04:52.970 --> 04:54.610
Que é criado aqui no final.

04:54.610 --> 04:58.053
É neste momento que este decorador de imóveis executa.
