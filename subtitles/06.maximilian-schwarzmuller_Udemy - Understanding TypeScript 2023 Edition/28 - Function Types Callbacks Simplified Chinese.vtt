WEBVTT

00:02.440 --> 00:05.170
教师：现在说到回调函数和函数类型,

00:05.170 --> 00:08.400
它们的工作方式差不多｡

00:08.400 --> 00:14.990
假设我们有一个新函数addAndHandle｡

00:14.990 --> 00:22.320
我们希望得到两个数字, 然后我还想得到一个回调函数.

00:22.320 --> 00:24.480
所以一个传递过来的函数,

00:24.480 --> 00:26.670
它是一个参数, 应该对结果做些什么,

00:26.670 --> 00:29.930
然后我们就可以生成结果了.

00:29.930 --> 00:31.060
但不仅仅是返回它,

00:31.060 --> 00:35.670
我还想调用回调函数并传入result｡

00:35.670 --> 00:36.990
现在, 我想明确的是,

00:36.990 --> 00:39.270
回调应该是一个函数｡

00:39.270 --> 00:42.190
同样, 我使用的函数类型定义可能不返回任何值,

00:42.190 --> 00:45.640
但它确实接受一个数字作为参数,

00:45.640 --> 00:51.280
因为我们在这里传递了一个数字｡

00:51.280 --> 00:52.740
所以回调函数,

00:52.740 --> 00:55.870
我们作为参数传递给这个函数的函数,

00:55.870 --> 00:58.460
应该接受一个数字｡

00:58.460 --> 01:01.890
下面, 我们调用addAndHandle,

01:01.890 --> 01:05.240
传入10和20, 然后传入一个函数.

01:05.240 --> 01:07.570
例如, 这里的匿名函数｡ 

01:07.570 --> 01:09.710
所以现在, 当我们调用函数时,

01:09.710 --> 01:11.470
这当然不是一个函数类型,

01:11.470 --> 01:15.150
而是一个具体的值, 我们传递给第三个参数｡

01:15.150 --> 01:18.870
这是一个匿名函数, 在这里和那里创建,

01:18.870 --> 01:22.300
我们知道我们会得到一个数字｡

01:22.300 --> 01:26.110
也许在这里命名为result然后我们就可以随心所欲地处理它了｡

01:26.110 --> 01:27.623
现在如果你编译它,

01:28.570 --> 01:35.600
我们会看到下面的日志, 30, 这是我们传递给addAndHandle的回调函数的结果,

01:35.600 --> 01:39.850
addAndHandle将两个数字组合在一起, 然后调用回调,

01:39.850 --> 01:43.200
回调必须满足这个条件｡

01:43.200 --> 01:45.870
我们在这里定义回调函数的好处是,

01:45.870 --> 01:52.240
在我们传递的函数内部, 它是一个回调类型, 能够推断result将是一个数字,

01:52.240 --> 01:56.620
因此我们可以在这里对result做任何事情｡

01:56.620 --> 02:04.970
我们可以对一个数字做些什么而不用在这里显式地声明类型因为TypeScript知道结果将是一个数字因为我们非常清楚地表明回调将得到一个参数,

02:04.970 --> 02:08.473
这是一个数字｡

02:09.310 --> 02:12.170
因此, 如果我们期望回调函数中有第二个参数,

02:12.170 --> 02:13.060
我们会得到一个错误,

02:13.060 --> 02:20.500
因为我们很清楚, 我们期望的addAndHandle函数中的回调函数应该只有一个参数｡

02:20.500 --> 02:22.420
因此, 如果我们随后传入一个回调函数,

02:22.420 --> 02:23.950
该函数接受第二个参数,

02:23.950 --> 02:26.240
这显然是一个错误｡

02:26.240 --> 02:30.280
TypeScript唯一不接受的是我们是否在这里返回了一些东西｡

02:30.280 --> 02:33.690
如果一个返回结果和回调确实返回了一些东西,

02:33.690 --> 02:37.300
即使我们明确表示它不应该返回任何东西｡

02:37.300 --> 02:41.180
然而, 这不是TypeScript中的错误或bug｡ 

02:41.180 --> 02:43.150
其实是故意的｡ 

02:43.150 --> 02:46.000
通过在回调类型上指定void,

02:46.000 --> 02:50.910
我们实际上是说我们将忽略可能在此处返回的任何结果｡

02:50.910 --> 02:54.030
所以我们基本上是说在addAndHandle中,

02:54.030 --> 02:58.080
我们得到回调函数, 我们不会对返回类型做任何事情｡

02:58.080 --> 03:00.600
这就是为什么你可以在这里返回一些东西,

03:00.600 --> 03:10.870
而不会受到惩罚, 但是你知道, 因为它在回调类型上有明确的定义, 回调不会对你在这里返回的值做任何事情｡

03:10.870 --> 03:17.120
因此函数内部的addAndHandle不会对您可能返回的值执行任何操作｡

03:17.120 --> 03:19.620
这当然是一条有用的信息｡ 

03:19.620 --> 03:21.270
你可能会认为, 在这里,

03:21.270 --> 03:25.710
我们对回调返回的值做了一些事情, 通过在这里指定这个类型,

03:25.710 --> 03:29.000
我们清楚地表明, 在addAndHandle中,

03:29.000 --> 03:33.920
我们对任何返回值都不感兴趣.

03:33.920 --> 03:38.260
因此, 这不会强制您传入不返回任何内容的回调｡

03:38.260 --> 03:42.200
它只是告诉你, 你可能返回的任何东西都不会被使用｡

03:42.200 --> 03:44.070
参数当然不同｡ 

03:44.070 --> 03:45.540
这是强制执行的, 因为在这里,

03:45.540 --> 03:51.720
你知道你是否传递了一个需要更多参数的回调函数是很重要的｡

03:51.720 --> 03:57.740
然后你会得到一个错误或者你不会得到你想要的结果因为我只给你一个结果.

03:57.740 --> 04:02.840
所以我们不能忽略你可能想要的, 因为它是返回类型的情况｡

04:02.840 --> 04:05.506
我们在这里忽略了它, 因为在addAndHandle函数负责的地方传递了一些东西,

04:05.506 --> 04:10.920
因为那是回调函数被调用的地方｡

04:10.920 --> 04:13.210
这就是为什么参数是强制的,

04:13.210 --> 04:17.150
TypeScript对回调函数的参数的数量和类型非常严格,

04:17.150 --> 04:21.253
而且它并不真正关心返回类型｡
