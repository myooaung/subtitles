WEBVTT

00:02.290 --> 00:03.910
Instruktur: Jadi untuk memberitahu Webpack

00:03.910 --> 00:06.710
apa yang harus dilakukan dengan file TypeScript, kita perlu menambahkan

00:06.710 --> 00:08.830
entri baru ke objek konfigurasi di sini.

00:08.830 --> 00:11.510
Dan itulah properti modul.

00:11.510 --> 00:14.020
Modul juga mengambil objek JavaScript untuk kemudian

00:14.020 --> 00:15.470
mengkonfigurasinya.

00:15.470 --> 00:17.440
Sebuah modul pada akhirnya hanyalah sebuah file, jadi

00:17.440 --> 00:20.520
di sini kita memberitahu Webpack bagaimana cara bekerja dengan file yang ditemukannya,

00:20.520 --> 00:22.940
seperti dengan aplikasi. ts, dan kemudian juga setelah

00:22.940 --> 00:25.520
memahami file itu, bagaimana menangani semua impor

00:25.520 --> 00:27.290
dalam file tersebut.

00:27.290 --> 00:29.800
Jadi, bagaimana seharusnya Webpack menangani berkas-berkas ini?

00:29.800 --> 00:33.640
Nah, kami memberi tahu Webpack dengan menambahkan array aturan di sini, karena

00:33.640 --> 00:35.430
Anda dapat mengatur beberapa aturan

00:35.430 --> 00:37.300
yang harus diterapkan ke semua file.

00:37.300 --> 00:40.690
Di sini kita hanya membutuhkan satu, tetapi dalam proyek yang lebih kompleks,

00:40.690 --> 00:44.030
di mana Anda juga ingin menggunakan Webpack untuk menangani file CSS, atau

00:44.030 --> 00:46.140
gambar, atau semacamnya, Anda dapat menambahkan

00:46.140 --> 00:49.220
lebih banyak aturan untuk berbagai jenis file.

00:49.220 --> 00:51.500
Dan seperti yang telah disebutkan sebelumnya, dokumen resmi adalah

00:51.500 --> 00:53.840
tempat yang bagus untuk mempelajari lebih lanjut tentang loader,

00:53.840 --> 00:55.730
yang pada akhirnya Anda gunakan untuk mengajari Webpack

00:55.730 --> 00:57.980
lebih banyak tentang file yang berbeda, dan untuk mempelajari lebih

00:57.980 --> 00:59.720
lanjut tentang Webpack secara umum.

00:59.720 --> 01:02.560
Jadi di sini, kita akan menambahkan loader seperti itu sebenarnya.

01:02.560 --> 01:06.110
Loader hanyalah sebuah paket yang memberitahu Webpack bagaimana cara menangani

01:06.110 --> 01:07.780
file tertentu, dan tentu saja di sini,

01:07.780 --> 01:09.960
kita punya ts loader, yang membantu kita memberitahu

01:09.960 --> 01:11.520
Webpack bagaimana cara menangani

01:11.520 --> 01:13.690
file TypeScript.

01:13.690 --> 01:16.850
Jadi kita menambahkan aturan yang hanya berupa objek JavaScript,

01:16.850 --> 01:19.720
di mana pertama-tama kita menambahkan properti tes.

01:19.720 --> 01:22.950
Ini menjelaskan tes yang akan dilakukan Webpack pada file apa

01:22.950 --> 01:26.510
pun yang ditemukannya untuk mengetahui apakah aturan ini di sini

01:26.510 --> 01:28.550
berlaku untuk file itu atau tidak.

01:28.550 --> 01:31.080
Dan tes di sini adalah ekspresi reguler.

01:31.080 --> 01:33.610
Dan di sana saya ingin memberi tahu Webpack bahwa file

01:33.610 --> 01:36.950
apa pun yang diakhiri dengan . ts harus digunakan atau harus

01:36.950 --> 01:38.913
ditangani oleh aturan ini.

01:39.860 --> 01:42.940
Ekspresi reguler yang memeriksa ekstensi file bisa menggunakan

01:42.940 --> 01:46.260
backslash di sini, dan kemudian . ts, dan kemudian tanda

01:46.260 --> 01:47.550
dolar.

01:47.550 --> 01:50.840
Ini adalah ekspresi reguler kita yang kemudian memberi tahu Webpack bahwa Anda

01:50.840 --> 01:54.593
ingin memeriksa file yang diakhiri dengan . ts.

01:55.560 --> 01:58.810
Kemudian, Anda juga harus menentukan apa yang harus dilakukan Webpack

01:58.810 --> 02:02.590
dengan file-file tersebut, dan Anda melakukannya dengan kata kunci use di sini.

02:02.590 --> 02:05.290
Dan di sana, Anda menentukan loader yang harus digunakan

02:05.290 --> 02:07.590
Webpack, dalam kasus saya, ts-loader.

02:07.590 --> 02:10.600
Jadi kita memberitahu Webpack bahwa setiap file TypeScript yang ditemukannya

02:10.600 --> 02:12.720
harus ditangani oleh TypeScript loader yang kemudian

02:12.720 --> 02:16.010
pada gilirannya tahu apa yang harus dilakukan dengan file tersebut.

02:16.010 --> 02:17.680
Ts-loader akan secara otomatis

02:17.680 --> 02:20.330
mengambil tsconfig. json ke dalam akun sehingga kita

02:20.330 --> 02:23.430
tidak perlu menentukan konfigurasi tambahan apa pun di sini.

02:23.430 --> 02:26.050
Hanya satu konfigurasi yang tidak ada salahnya,

02:26.050 --> 02:29.910
kecualikan modul node sebagai ekspresi reguler sehingga Webpack

02:29.910 --> 02:33.773
juga tidak mencoba untuk melihat ke dalam modul node.

02:35.130 --> 02:38.400
Dengan itu kita perlu menambahkan satu konfigurasi tambahan

02:38.400 --> 02:42.800
di sini setelah konfigurasi modul, dan itu adalah resolve key.

02:42.800 --> 02:47.800
Di sana kita memberi tahu Webpack ekstensi file mana yang ditambahkan ke

02:47.820 --> 02:49.750
impor yang ditemukannya.

02:49.750 --> 02:52.440
Saya mengatakan Webpack akan menambahkan ekstensi sendiri, dan secara

02:52.440 --> 02:56.160
default, Webpack akan mencari ekstensi . file js.

02:56.160 --> 02:59.220
Sekarang di sini kita ingin Webpack mencari . ts, dan kemudian untuk di sini

02:59.220 --> 03:01.280
di resolve, kita dapat menambahkan properti

03:01.280 --> 03:05.390
extensions, diset sama dengan array, dan memberi tahu Webpack bahwa ia harus

03:05.390 --> 03:08.390
mencari file . ts serta

03:08.390 --> 03:10.640
file . file js.

03:10.640 --> 03:13.360
Jadi sekarang Webpack pada dasarnya akan mencari file-file

03:13.360 --> 03:16.900
seperti itu dan kemudian membundel semua file yang memiliki ekstensi ini,

03:16.900 --> 03:18.723
yang Anda impor bersama-sama.

03:19.760 --> 03:22.770
Dan itulah pengaturan kita yang hampir selesai untuk saat ini,

03:22.770 --> 03:24.690
file konfigurasi kita hampir selesai untuk

03:24.690 --> 03:26.150
saat ini setidaknya.

03:26.150 --> 03:28.730
Dengan itu kita hanya harus pergi ke tsconfig

03:28.730 --> 03:33.070
juga, dan di sana pastikan bahwa Anda mengatur sourceMap ke true.

03:33.070 --> 03:35.210
Ini akan membantu kita men-debug kode kita,

03:35.210 --> 03:37.130
dan Webpack juga mendukung ini.

03:37.130 --> 03:39.850
Di sana sekarang kita juga harus menambahkan entri,

03:39.850 --> 03:41.340
mungkin di sini di bawah output,

03:41.340 --> 03:43.710
dan itu adalah kunci devtool.

03:43.710 --> 03:47.210
Dan di sana, nilainya harus berupa inline-source-map

03:47.210 --> 03:48.510
sebagai string.

03:48.510 --> 03:51.620
Ini kemudian memberi tahu Webpack bahwa akan ada peta sumber yang

03:51.620 --> 03:53.700
sudah dihasilkan, yang harus diekstrak dan

03:53.700 --> 03:57.210
pada dasarnya disambungkan dengan benar ke bundel yang dihasilkannya,

03:57.210 --> 04:00.170
sehingga sementara kita mendapatkan bundel seperti itu, kita

04:00.170 --> 04:03.603
masih memiliki pengalaman pengembangan yang hebat.

04:05.830 --> 04:08.360
Sekarang dengan itu kita bisa menggunakan Webpack, dan pertanyaannya

04:08.360 --> 04:09.823
adalah bagaimana kita menggunakannya?

04:11.000 --> 04:14.720
Cara sederhana untuk menggunakannya adalah dengan membuka paket. json, dan di sana mari kita

04:14.720 --> 04:16.650
tambahkan skrip.

04:16.650 --> 04:18.440
Misalnya, membangun.

04:18.440 --> 04:19.810
Anda bisa memberinya nama apa pun yang

04:19.810 --> 04:21.620
Anda inginkan di sini, di bagian skrip.

04:21.620 --> 04:23.930
Dan disana, cukup jalankan Webpack,

04:23.930 --> 04:26.453
jadi cukup ketik webpack seperti ini.

04:27.560 --> 04:29.880
Sekarang mari kita juga pergi ke folder dist,

04:29.880 --> 04:32.993
dan pada akhirnya hapus semua yang ada di sana, dan dengan menyimpan

04:34.000 --> 04:36.870
itu, sekarang jalankan npm run build dan mari kita lihat

04:36.870 --> 04:38.663
apakah itu berfungsi.

04:39.970 --> 04:43.000
Dan itu gagal...

04:45.440 --> 04:47.800
Ya, saya hanya salah ketik, yang seharusnya

04:47.800 --> 04:51.440
bukan devtools, tetapi devtool di sini.

04:51.440 --> 04:53.830
Jadi ubah ini menjadi devtool di file konfigurasi

04:53.830 --> 04:56.143
dan sekarang mari kita ulangi npm run build.

04:59.500 --> 05:02.620
Dan, dengan itu Anda bisa mengabaikan peringatan yang Anda dapatkan di sini.

05:02.620 --> 05:04.230
Anda akan melihat bahwa dalam file

05:04.230 --> 05:06.410
dist, Anda memiliki file js yang dibundel.

05:06.410 --> 05:08.150
Dan apa yang Anda lihat di sana juga sudah

05:08.150 --> 05:09.960
merupakan kode yang cukup tidak dapat

05:09.960 --> 05:14.060
dibaca, karena kita memiliki minifikasi ini dalam tindakan di sini sebenarnya.

05:14.060 --> 05:18.680
Jadi ini sebenarnya sudah merupakan kode yang dioptimalkan ini juga.

05:18.680 --> 05:21.410
Sekarang sebelum kita melihat bagaimana kita juga dapat bekerja

05:21.410 --> 05:23.490
dengan konfigurasi yang berbeda di sini, mari kita

05:23.490 --> 05:26.120
benar-benar pergi ke indeks. html, dan sesuaikan

05:26.120 --> 05:27.510
impor kita di sini dan

05:27.510 --> 05:30.350
tunjuk bundel. js, dan untuk saat ini, karena

05:30.350 --> 05:32.220
kita belum menggunakan Webpack Dev

05:32.220 --> 05:35.140
Server, mari kita jalankan npm start untuk memunculkan

05:35.140 --> 05:38.480
indeks tersebut. file html lagi.

05:38.480 --> 05:40.510
Dan jika Anda sekarang memuat

05:40.510 --> 05:44.890
ulang halaman ini, Anda akan melihat ini berhasil!

05:44.890 --> 05:46.610
Jika kita memasukkan sesuatu

05:46.610 --> 05:49.230
di sini, proyek kita bekerja sebagaimana mestinya,

05:49.230 --> 05:52.030
dan mengimpor file js yang dibundel di sini, jadi

05:52.030 --> 05:56.200
hanya satu file, bukan semua file individual ini.

05:56.200 --> 05:59.020
Dan itu sudah merupakan peningkatan.

05:59.020 --> 06:01.640
Di sini kita sudah memiliki kode yang dibundel

06:01.640 --> 06:05.410
yang menghindari semua permintaan htp yang tidak perlu ini.

06:05.410 --> 06:07.690
Dan jika Anda pergi ke tab sumber, dan Anda ingin

06:07.690 --> 06:09.420
men-debug kode Anda, Anda akan menemukan

06:09.420 --> 06:11.250
folder Webpack ini, dan di dalamnya ada

06:11.250 --> 06:12.770
folder sumber, dan di sana Anda

06:12.770 --> 06:15.300
dapat pergi ke file TypeScript Anda.

06:15.300 --> 06:19.090
Dan misalnya, di sini, pada project-input, Anda juga dapat mengatur

06:19.090 --> 06:22.110
break point di sini pada gatherUserInput, dan jika

06:22.110 --> 06:24.970
Anda sekarang menekan tombol, itu berhenti di sana,

06:24.970 --> 06:26.190
dan Anda dapat men-debug

06:26.190 --> 06:27.680
kode Anda.

06:27.680 --> 06:29.650
Dan itulah peta sumber yang masuk, yang benar-benar

06:29.650 --> 06:31.200
membantu kami mengembangkan dan yang

06:31.200 --> 06:34.050
membuat hidup kami sebagai pengembang lebih mudah.

06:34.050 --> 06:37.520
Kami mendapatkan kode yang dioptimalkan ini, tetapi berkat peta sumber

06:37.520 --> 06:40.750
kami dapat men-debug kode TypeScript asli kami di sini.

06:40.750 --> 06:43.260
Jadi kita sudah memiliki pengaturan yang cukup

06:43.260 --> 06:46.280
luar biasa, yang sudah memberi kita banyak pengoptimalan,

06:46.280 --> 06:48.440
sekarang mari kita selesaikan ini dan pastikan

06:48.440 --> 06:52.050
kita benar-benar memiliki Webpack Dev Server yang disertakan, dan

06:52.050 --> 06:54.440
kita kemudian benar-benar memiliki dua alur

06:54.440 --> 06:58.443
kerja, satu untuk produksi, dan satu untuk pengembangan.
