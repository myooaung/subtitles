WEBVTT

00:02.220 --> 00:03.053
-Mari kita lanjutkan.

00:03.053 --> 00:04.950
Kami punya opsi outFile di sini, sekarang

00:04.950 --> 00:07.730
opsi ini tidak penting bagi kami sekarang, itu tidak

00:07.730 --> 00:09.440
akan berfungsi sekarang.

00:09.440 --> 00:12.340
Yang lebih menarik bagi kita adalah outDIR dan rootDir.

00:12.340 --> 00:14.720
Semakin besar proyek Anda, semakin

00:14.720 --> 00:17.640
Anda mungkin ingin mengatur file Anda.

00:17.640 --> 00:19.690
Biasanya, Anda tidak hanya ingin file-file

00:19.690 --> 00:21.770
Anda berada di sekitar sini di folder

00:21.770 --> 00:24.120
proyek tingkat root Anda.

00:24.120 --> 00:26.580
Sebaliknya, apa yang sering Anda lihat dalam proyek adalah

00:26.580 --> 00:28.080
bahwa Anda memiliki folder sumber,

00:28.080 --> 00:29.790
dan Anda memiliki folder dist, berikutnya,

00:29.790 --> 00:31.240
berikutnya.

00:31.240 --> 00:35.690
Jadi, folder dist bertugas menampung semua output, jadi semua file

00:35.690 --> 00:37.800
JavaScript, katakanlah.

00:37.800 --> 00:41.380
Dan folder sumber mungkin menyimpan semua file TypeScript kita.

00:41.380 --> 00:44.643
Jadi kita dapat memindahkan file TypeScript ke dalam folder

00:44.643 --> 00:47.430
sumber, dan jika sekarang saya menghapus folder JavaScript,

00:47.430 --> 00:49.891
kita memiliki masalah bahwa jika kita mengkompilasi

00:49.891 --> 00:53.167
semuanya, file TypeScript ini dikompilasi karena TypeScript,

00:53.167 --> 00:55.768
kompiler memang melihat ke dalam sub-folder, tetapi

00:55.768 --> 01:00.050
outputnya berada di sebelah file input kita.

01:00.050 --> 01:02.760
Dan itu adalah sesuatu yang bisa kita kendalikan dengan outDir,

01:02.760 --> 01:03.660
misalnya.

01:03.660 --> 01:07.117
Jika kita mengatur outDir, kita dapat memberi tahu tipe-tipe

01:07.117 --> 01:10.900
dengan kompiler di mana file yang dibuat harus disimpan.

01:10.900 --> 01:13.580
Kita bisa mengatur ini ke dist.

01:13.580 --> 01:17.037
Sekarang jika kita melakukan itu, maka jika Anda menjalankan chia

01:17.037 --> 01:19.560
seed, Anda akan melihat bahwa file JavaScript, memang,

01:19.560 --> 01:21.500
tidak ditempatkan di folder sumber,

01:21.500 --> 01:23.170
tetapi di folder dist.

01:23.170 --> 01:26.340
Sekarang kita hanya perlu menyesuaikan indeks kita. html, dan di sana mengarah

01:26.340 --> 01:31.630
ke dist/app. js dan dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
atau sebagai alternatif memindahkan indeks. html ke dalam folder dist tetapi

01:33.880 --> 01:36.172
kemudian server def kami tidak akan berfungsi dengan

01:36.172 --> 01:37.550
benar lagi sekarang.

01:37.550 --> 01:39.875
Jadi mari kita sesuaikan impor ini dan dengan

01:39.875 --> 01:44.140
itu, kita masih mendapatkan aplikasi yang berfungsi, seperti yang Anda

01:44.140 --> 01:45.270
lihat, tetapi sekarang

01:45.270 --> 01:48.480
dengan struktur proyek yang lebih bersih.

01:48.480 --> 01:49.650
Sekarang hal yang baik adalah,

01:49.650 --> 01:51.530
jika kita memiliki sub-folder di sini,

01:51.530 --> 01:52.980
folder analitik, katakanlah,

01:52.980 --> 01:54.893
dan kita memiliki file TypeScript di sana,

01:54.893 --> 01:57.350
maka jika kita mengkompilasi ulang, dan tidak masalah

01:57.350 --> 02:00.373
jika Anda melakukannya dengan perintah ini atau mode tontonan,

02:00.373 --> 02:03.300
struktur folder yang Anda miliki di folder sumber ini semuanya

02:03.300 --> 02:05.640
akan direplikasi di folder dist yang, tentu saja,

02:05.640 --> 02:08.813
sangat nyaman karena memastikan bahwa Anda dapat mengimpor file

02:08.813 --> 02:14.110
pada dasarnya seperti yang Anda lakukan mengimpornya di folder sumber juga, sehingga struktur yang Anda atur

02:14.110 --> 02:16.640
di sana disimpan.

02:16.640 --> 02:18.800
Sekarang Anda juga dapat mengatur direktori

02:18.800 --> 02:21.230
root dan mengatur ini secara khusus di folder

02:21.230 --> 02:23.800
tempat file Anda disimpan, seperti dalam contoh

02:23.800 --> 02:25.202
ini, source, untuk memastikan

02:25.202 --> 02:30.030
bahwa jenis kompiler tidak melihat di folder kami.

02:30.030 --> 02:31.530
Itu juga sesuatu yang bisa Anda

02:31.530 --> 02:34.003
lakukan dengan opsi include di bawah sana, bukan?

02:34.870 --> 02:36.007
Tetapi dengan direktori

02:36.007 --> 02:38.781
root, jenis kompiler tidak hanya akan melihat

02:38.781 --> 02:41.450
hanya pada folder sumber itu, tetapi juga

02:41.450 --> 02:44.700
memastikan bahwa struktur proyek, yang Anda atur

02:44.700 --> 02:45.680
di sana, disimpan

02:45.680 --> 02:47.880
dalam folder dist.

02:47.880 --> 02:50.020
Sekarang ini dilakukan secara default sebelumnya, seperti

02:50.020 --> 02:51.820
yang Anda lihat, tetapi perlu diingat bahwa sebelumnya

02:51.820 --> 02:54.280
itu akan menyertakan file TypeScript apa pun di sini, semua permulaan

02:54.280 --> 02:55.699
sumber, jadi, misalnya, jika Anda mengomentari

02:55.699 --> 02:58.830
ini sementara jika kita memiliki folder pengguna di sini di tingkat atas dengan

02:58.830 --> 03:03.280
pengguna.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
di mana kita memiliki nama pengguna Max katakanlah, maka

03:06.170 --> 03:07.750
jika kita mengkompilasi ini, Anda

03:07.750 --> 03:09.752
semua hanya akan melihat folder pengguna

03:09.752 --> 03:11.420
itu di folder dist.

03:11.420 --> 03:13.810
Dan sekarang folder sumber juga disertakan karena

03:13.810 --> 03:17.200
sekarang kita memiliki file typescript pada tingkat yang lebih tinggi

03:17.200 --> 03:19.950
dan oleh karena itu kompiler typescript berpikir bahwa seluruh

03:19.950 --> 03:21.780
proyek kita lagi-lagi adalah input dan

03:21.780 --> 03:24.920
mereplikasi struktur folder yang ditemukannya di sana di folder

03:24.920 --> 03:25.970
dist.

03:25.970 --> 03:28.960
Sekarang, tentu saja, bukan itu yang kita inginkan

03:28.960 --> 03:30.120
dan di situlah opsi

03:30.976 --> 03:32.660
rootDir membantu kita.

03:32.660 --> 03:34.020
Sekarang jika kita mengatur ini

03:34.020 --> 03:35.950
ke source, bahkan jika kita memiliki folder

03:35.950 --> 03:38.630
lain dengan file TypeScript di sana pada tingkat root, mereka

03:38.630 --> 03:40.400
tidak akan dimasukkan dalam output dan

03:40.400 --> 03:41.830
folder sumber itu sendiri tidak

03:41.830 --> 03:43.780
akan tiba-tiba berakhir di sana.

03:43.780 --> 03:46.480
Jadi, sering kali Anda menetapkan rootDir dan outDir agar

03:46.480 --> 03:49.650
benar-benar jelas mengenai di mana file-file input Anda berada dan

03:49.650 --> 03:52.040
di mana file output Anda akan dihasilkan.

03:52.040 --> 03:54.870
Jika kita melanjutkan, kita bisa mengabaikan komposit.

03:54.870 --> 03:57.010
Kita bisa melihat removeComments.

03:57.010 --> 03:58.780
Seharusnya cukup jelas jika

03:58.780 --> 04:00.850
Anda mengatur ini, maka komentar

04:00.850 --> 04:04.450
apa pun yang mungkin Anda miliki di file TypeScript Anda,

04:04.450 --> 04:08.000
akan dihapus dalam file JavaScript yang dikompilasi.

04:08.000 --> 04:11.200
Jadi jika saya mengomentari ini dan saya mengkompilasi kode saya, Anda melihat

04:11.200 --> 04:12.970
sebuah aplikasi. ts, saya punya komentar.

04:12.970 --> 04:14.990
Sebuah aplikasi. js, itu tidak ada di sana.

04:14.990 --> 04:18.330
Jadi, Anda dapat melakukan itu untuk membuat file Anda lebih kecil dan

04:18.330 --> 04:20.950
upaya itu mungkin merupakan pilihan yang bagus.

04:20.950 --> 04:23.820
Anda juga dapat mengatur noEmit jika Anda tidak ingin menghasilkan

04:23.820 --> 04:25.600
file JavaScript apa pun.

04:25.600 --> 04:27.130
Sekarang ini mungkin terdengar

04:27.130 --> 04:29.190
aneh karena itulah ide dari TypeScript,

04:29.190 --> 04:30.700
tetapi jika Anda hanya ingin memeriksa

04:30.700 --> 04:32.420
apakah file Anda sudah benar tetapi

04:32.420 --> 04:35.030
Anda tidak ingin menulis semua file output ini, untuk

04:35.030 --> 04:37.680
menghemat waktu, misalnya, dalam proyek yang lebih

04:37.680 --> 04:39.120
besar, maka Anda dapat mengatur

04:39.120 --> 04:41.792
ini ke "true" untuk hanya memiliki jenis kompiler memeriksa

04:41.792 --> 04:45.460
file Anda dan melaporkan potensi kesalahan tanpa benar-benar membuat

04:45.460 --> 04:47.903
file output.

04:47.903 --> 04:50.490
importHelpers tidak terlalu penting bagi kita, di sini

04:50.490 --> 04:52.065
kita bisa mengabaikannya.

04:52.065 --> 04:54.570
downlevelIteration adalah opsi lanjutan.

04:54.570 --> 04:57.150
Sangat menarik ketika Anda mengkompilasi

04:57.150 --> 05:00.295
kode Anda ke versi JavaScript yang lebih lama dan

05:00.295 --> 05:02.690
Anda bekerja dengan empat loop.

05:02.690 --> 05:05.798
Kemudian, dalam beberapa skenario yang jarang terjadi, Anda bisa mengalami

05:05.798 --> 05:08.378
masalah di mana kompilasi tidak bekerja dengan benar.

05:08.378 --> 05:10.440
Opsi ini, jika Anda menyalakannya, memberi Anda

05:10.440 --> 05:12.770
kompilasi yang lebih tepat, yang akan bekerja dalam

05:12.770 --> 05:15.280
kasus-kasus khusus ini, jadi oleh karena itu Anda mungkin

05:15.280 --> 05:17.210
berpikir Anda harus selalu menyalakannya,

05:17.210 --> 05:20.097
tetapi itu juga akan menghasilkan lebih banyak kode.

05:20.097 --> 05:21.880
Jadi, Anda hanya harus mengaktifkan ini

05:21.880 --> 05:25.110
jika Anda memiliki loop dan Anda melihat bahwa kode yang Anda hasilkan

05:25.110 --> 05:27.700
tiba-tiba berperilaku berbeda dari yang seharusnya mengenai

05:27.700 --> 05:29.023
loop tersebut.
