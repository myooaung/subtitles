WEBVTT

00:02.160 --> 00:03.330
司会：現在､ クラスや､

00:03.330 --> 00:12.780
より古くからあるコンストラクタ関数は､ オブジェクトの一般的な構造を定義するために使用できるプロパティを持っているだけではありません｡

00:12.780 --> 00:14.770
また､ メソッドを追加することも可能です｡ 

00:14.770 --> 00:17.460
実際には､ コンストラクタ・メソッドは存在します｡ 

00:17.460 --> 00:19.620
しかし､ これは単なるユーティリティ関数で､

00:19.620 --> 00:22.940
クラスをインスタンス化するときに呼び出されます｡

00:22.940 --> 00:25.584
昔はコンストラクタ関数しかありませんでしたが､

00:25.584 --> 00:33.300
今は構文上の糖分がありますが､ それでも初期化コードを実行するためにコンストラクタ関数を追加できます｡

00:33.300 --> 00:40.980
また､ 作成したオブジェクトに対して呼び出すことのできる関数やメソッドをいくつか追加しておくとよいでしょう｡

00:40.980 --> 00:46.000
例えば､ ここの部署クラスでdescribeメソッドを使用します｡

00:46.000 --> 00:47.994
メソッドを追加する場合は､

00:47.994 --> 00:49.382
メソッド名､

00:49.382 --> 00:56.090
コロン､ 等号､ 括弧､ 中カッコの順に追加します｡

00:56.090 --> 00:59.070
括弧の中は､ 必要な引数を取ります｡ 

00:59.070 --> 01:00.780
ここで､ 何も必要ないとします｡ そうでなければ､

01:00.780 --> 01:05.150
通常の関数で行うのと同じようにパラメータを追加することができます｡

01:05.150 --> 01:12.020
また､ 中括弧の間には関数本体やメソッド本体が必要になることがほとんどです｡

01:12.020 --> 01:14.693
ここで､ メソッドのロジックを定義します｡ 

01:15.580 --> 01:22.410
そして､ そこに部門名を出力し､ さらに少し情報を追加したいかもしれません｡

01:22.410 --> 01:26.230
もちろんここでもコンソールでできます｡  のログは､ 例えば､

01:26.230 --> 01:30.620
部門､ コロン､ そして名前かもしれません｡

01:30.620 --> 01:32.100
しかし､ これではうまくいかない｡ 

01:32.100 --> 01:34.570
これは変数名を探すもので､ この記述されたメソッドの内部か､

01:34.570 --> 01:40.860
グローバル変数としてクラスの外部に存在する必要があります｡

01:40.860 --> 01:42.470
そして､ それが年齢を選択した場合､

01:42.470 --> 01:44.433
あなたが見るように､ 私は名前のためのエラーを取得します私はこれをしない､

01:44.433 --> 01:50.100
私は実際にブラウザでウィンドウオブジェクトのグローバルな名前の変数があるためです｡

01:50.100 --> 01:53.030
しかし､ この場合､ name プロパティを参照するのではなく､

01:53.030 --> 01:57.130
このクラスの外部にあるグローバルな名前変数を参照することになります｡

01:57.130 --> 01:59.599
クラスの内部からクラスのプロパティやメソッドを参照するには､

01:59.599 --> 02:05.630
ここでコンストラクタで行っているようにthisキーワードを使用する必要があります｡

02:05.630 --> 02:12.400
そして､ これは通常､ 作成されたこのクラスの具象インスタンスを参照する｡

02:12.400 --> 02:17.650
そして､ ドット記法を用いて､ このインスタンスのすべてのプロパティとメソッドにアクセスすることができるのです｡

02:17.650 --> 02:19.555
この場合､ これです｡  という名前を付けます｡ 

02:19.555 --> 02:24.555
だから､ もし私が今､ 下の方で経理に電話したら｡  はこのように表現します｡ 

02:24.583 --> 02:28.110
this キーワードは､ this が実行されたとき､

02:28.110 --> 02:33.730
このクラスに基づいて構築されたこの具体的な会計オブジェクトを参照します｡

02:33.730 --> 02:35.530
これを保存してリロードすると､

02:35.530 --> 02:42.110
このような出力が表示されます｡ もちろんタイプミスはありますが､ おおむね動作します｡

02:42.110 --> 02:43.944
では､ ここで誤植を修正しましょう｡ 

02:43.944 --> 02:46.190
つまり､ このようにメソッドを追加することができるのです｡ 

02:46.190 --> 02:48.166
さて､ このキーワードについて､ 重要な言葉を紹介しよう｡ 

02:48.166 --> 02:50.600
JavaScriptを少し扱ったことがある人ならわかると思いますが､

02:50.600 --> 02:54.890
このキーワードは厄介です｡

02:54.890 --> 02:56.090
例えば､ ここに別のオブジェクトを追加する場合､

02:56.090 --> 03:11.270
accounting copyと､ これは単にdescribeメソッドを持つオブジェクトで､ あえてaccountingを指します｡

03:11.270 --> 03:11.270
を記述します｡ 

03:11.270 --> 03:15.470
そして､ accountingcopyを呼び出すと｡  をメソッドとして記述すると､

03:15.470 --> 03:17.150
どうなると思いますか？

03:17.150 --> 03:19.200
エラーになるかな？

03:19.200 --> 03:22.927
確かに､ 正常にコンパイルできるコンパイルエラーは出ません｡

03:22.927 --> 03:26.360
しかし､ 実行時には､ 部門が未定義であることがわかる｡ 

03:26.360 --> 03:28.780
その理由は､ このオブジェクトに describe

03:28.780 --> 03:32.010
プロパティを追加しているからです｡ このオブジェクトは､

03:32.010 --> 03:34.040
このクラスに基づいて作成されたのではなく､

03:34.040 --> 03:41.420
定義した特定のクラスに基づいていないダミーオブジェクトとして､ オブジェクトリテラルで作成されています｡

03:41.420 --> 03:44.360
そして､ このdescribeプロパティの値は､

03:44.360 --> 03:49.000
私の会計オブジェクトのdescribeメソッドへのポインタとなります｡

03:49.000 --> 03:52.168
そこで､ この具体的なオブジェクトを探すために､

03:52.168 --> 03:54.690
このメソッドを指しているのです｡

03:54.690 --> 03:56.240
実行はしていない

03:56.240 --> 04:00.410
だから､ この関数実行の値を渡して記述することはしていない｡

04:00.410 --> 04:04.090
ここで説明するのは､ 本当に機能そのものを渡しているのです｡ 

04:04.090 --> 04:06.430
そこで､ このコピーに対してdescribeを呼び出すと､

04:06.430 --> 04:10.440
確かにメソッドが実行され､ すべてが正しく動作する｡

04:10.440 --> 04:17.040
ただ問題は､ このメソッドが実行されたとき､ このメソッドがもともと属していたこのオブジェクトを参照しないので､

04:17.040 --> 04:21.140
会計オブジェクトを参照しないことです｡

04:21.140 --> 04:22.350
代わりに､ これは､

04:22.350 --> 04:25.050
これは､ 暗記しても良い経験則ですが､

04:25.050 --> 04:29.650
一般的に､ メソッドの呼び出しを担当するものを指します｡

04:29.650 --> 04:32.190
そして､ この場合のdescribeメソッドの呼び出しを担当するのは､

04:32.190 --> 04:34.880
accounting copyです｡

04:34.880 --> 04:39.160
会計コピーに記載を求めるからです｡ 

04:39.160 --> 04:43.980
つまり､ このドットの前にあるもの､ つまり「会計コピー」を参照することになります｡

04:43.980 --> 04:47.530
しかし､ それはnameプロパティを持たないオブジェクトである｡ 

04:47.530 --> 04:49.678
だから､ これにアクセスすると を指定した場合､ This

04:49.678 --> 04:53.968
does not refer to object with name property

04:53.968 --> 04:56.610
というエラーが発生します｡

04:56.610 --> 04:59.220
つまり､ 名前は私たちを実に不定形にするのです｡ 

04:59.220 --> 05:02.260
だから､ こんな変な出力が出るんだ｡ 

05:02.260 --> 05:04.310
それはTypeScriptに限らず､ JavaScriptのことなので､

05:04.310 --> 05:07.470
気をつけなければならないことのひとつです｡

05:07.470 --> 05:11.500
そしてもちろん､ それゆえにTypeScriptでも同じことが起こりうるのです｡

05:11.500 --> 05:13.940
さて､ この､ 「this」の問題を回避するために､

05:13.940 --> 05:19.730
describeメソッドにthisというパラメータを追加します｡

05:19.730 --> 05:21.380
これは特殊なパラメータで､

05:21.380 --> 05:25.334
TypeScriptが理解できる特殊な命令です｡

05:25.334 --> 05:28.430
ここにthisというパラメータを追加しても､

05:28.430 --> 05:31.420
実際には期待されたパラメータではないので､

05:31.420 --> 05:36.010
何も値を渡さずにdescribeを呼び出すことができます｡

05:36.010 --> 05:38.476
その代わり､ TypeScriptでは､

05:38.476 --> 05:42.980
これが何を参照すべきかのヒントと解釈される｡

05:42.980 --> 05:45.960
そして､ 今度はこれに型を割り当てることが重要です｡ 

05:45.960 --> 05:48.810
そして､ ここのタイプは､ この場合､ 私たちのクラスのタイプであるべきなので､

05:48.810 --> 05:51.780
部門です｡

05:51.780 --> 05:56.250
つまり､ describeの内部でdescribeが実行された場合､

05:56.250 --> 06:05.040
この場合､ departmentクラスをベースにしたインスタンスを常に参照する必要があるということです｡

06:05.040 --> 06:09.160
つまり､ 最終的にdepartmentという型になるオブジェクトです｡ 

06:09.160 --> 06:16.012
というのも､ 会計コピーでdescribeを呼び出したとき､

06:16.012 --> 06:24.100
departmentのインスタンスで呼び出さなかったからです｡

06:24.100 --> 06:26.350
だから､ だからこれは違反になる｡ 

06:26.350 --> 06:32.250
この場合､ department 型のオブジェクトは参照されない｡

06:32.250 --> 06:36.920
そこで､ このダミー・パラメータを追加することで､

06:36.920 --> 06:42.480
型安全性を高めています｡

06:42.480 --> 06:47.030
なぜなら､ 今Indeedは､ 期待通りに動作しないコードを実行してしまうからです｡

06:47.030 --> 07:08.070
例えば､ describeを呼び出したオブジェクトがnameプロパティを持っていることをTypeScriptが認識するからだ｡

07:08.070 --> 07:12.270
これで､ TypeScriptは名前を追加したことになる｡

07:12.270 --> 07:14.934
これを削除すると､ エラーが名前付きで戻ってきますが､

07:14.934 --> 07:19.750
これはどのように動作するのでしょうか？

07:19.750 --> 07:22.770
だから､ これについては理解することが大切です｡ 

07:22.770 --> 07:26.140
そして､ この改良を意識してコードに追加することで､

07:26.140 --> 07:32.993
以前のような不要な動作を確実にキャッチできるようになることが重要です｡
