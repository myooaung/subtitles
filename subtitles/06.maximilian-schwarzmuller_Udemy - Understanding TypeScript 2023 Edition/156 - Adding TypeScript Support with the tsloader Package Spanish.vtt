WEBVTT

00:02.290 --> 00:03.910
Instructor: Así que para decirle a Webpack

00:03.910 --> 00:06.710
qué hacer con los archivos TypeScript, necesitamos añadir una nueva

00:06.710 --> 00:08.830
entrada al objeto de configuración aquí.

00:08.830 --> 00:11.510
Y esa es la propiedad del módulo.

00:11.510 --> 00:14.020
El módulo también toma un objeto JavaScript para

00:14.020 --> 00:15.470
luego configurarlo.

00:15.470 --> 00:17.440
Un módulo al final es sólo un archivo, así que

00:17.440 --> 00:20.520
aquí le decimos a Webpack cómo trabajar con los archivos que encuentra,

00:20.520 --> 00:22.940
como con la app. ts, y luego también una vez

00:22.940 --> 00:25.520
que entiende ese archivo, cómo tratar con todas las

00:25.520 --> 00:27.290
importaciones en el archivo.

00:27.290 --> 00:29.800
Entonces, ¿cómo debe tratar Webpack estos archivos?

00:29.800 --> 00:33.640
Bien, se lo decimos a Webpack añadiendo un array de reglas aquí, ya que se pueden

00:33.640 --> 00:35.430
establecer múltiples reglas que deben

00:35.430 --> 00:37.300
aplicarse a todos los archivos.

00:37.300 --> 00:40.690
Aquí sólo necesitamos una, pero en proyectos más complejos, en los

00:40.690 --> 00:44.030
que también quieras usar Webpack para manejar archivos CSS, o imágenes,

00:44.030 --> 00:46.140
o cualquier cosa por el estilo, puedes añadir

00:46.140 --> 00:49.220
más reglas para diferentes tipos de archivos.

00:49.220 --> 00:51.500
Y como se mencionó antes, los docs oficiales son un

00:51.500 --> 00:53.840
gran lugar para aprender más sobre los cargadores,

00:53.840 --> 00:55.730
que al final se utilizan para enseñar a Webpack

00:55.730 --> 00:57.980
más sobre los diferentes archivos, y para aprender

00:57.980 --> 00:59.720
más sobre Webpack en general.

00:59.720 --> 01:02.560
Así que aquí, vamos a añadir tal cargador en realidad.

01:02.560 --> 01:06.110
Un cargador es simplemente un paquete que le dice a Webpack cómo tratar

01:06.110 --> 01:07.780
con ciertos archivos, y por supuesto

01:07.780 --> 01:09.960
aquí, tenemos el cargador ts, que nos ayuda

01:09.960 --> 01:11.520
a decirle a Webpack cómo tratar

01:11.520 --> 01:13.690
con archivos TypeScript.

01:13.690 --> 01:16.850
Así que añadimos una regla que es sólo un objeto de JavaScript,

01:16.850 --> 01:19.720
donde en primer lugar añadimos una propiedad de prueba.

01:19.720 --> 01:22.950
Esto describe una prueba que Webpack realizará en cualquier

01:22.950 --> 01:26.510
archivo que encuentre para averiguar si esta regla aquí se

01:26.510 --> 01:28.550
aplica a ese archivo o no.

01:28.550 --> 01:31.080
Y la prueba aquí es una expresión regular.

01:31.080 --> 01:33.610
Y ahí quiero decirle a Webpack que cualquier

01:33.610 --> 01:36.950
archivo que termine con . nes deben ser utilizadas o deben

01:36.950 --> 01:38.913
ser manejadas por esta norma.

01:39.860 --> 01:42.940
Una expresión regular que compruebe la extensión del archivo puede utilizar

01:42.940 --> 01:46.260
una barra invertida aquí, y luego . ts, y luego un signo

01:46.260 --> 01:47.550
de dólar.

01:47.550 --> 01:50.840
Esta es nuestra expresión regular que le dice a Webpack que quiere

01:50.840 --> 01:54.593
buscar archivos que terminen con . ts.

01:55.560 --> 01:58.810
Luego, también tienes que especificar lo que Webpack debe

01:58.810 --> 02:02.590
hacer con esos archivos, y lo haces con la palabra clave use aquí.

02:02.590 --> 02:05.290
Y ahí se especifica el cargador que debe usar

02:05.290 --> 02:07.590
Webpack, en mi caso, ts-loader.

02:07.590 --> 02:10.600
Así que le decimos a Webpack que cualquier archivo TypeScript

02:10.600 --> 02:12.720
que encuentre debe ser manejado por el cargador

02:12.720 --> 02:16.010
de TypeScript, que a su vez sabe qué hacer con dicho archivo.

02:16.010 --> 02:17.680
El ts-loader tomará automáticamente

02:17.680 --> 02:20.330
el tsconfig. json, por lo que no es necesario

02:20.330 --> 02:23.430
especificar ninguna configuración adicional.

02:23.430 --> 02:26.050
Sólo una configuración que nunca está de

02:26.050 --> 02:29.910
más, excluir los módulos de nodo como expresión regular para

02:29.910 --> 02:33.773
que Webpack tampoco intente buscar en los módulos de nodo.

02:35.130 --> 02:38.400
Con eso necesitamos añadir una configuración extra aquí

02:38.400 --> 02:42.800
después de la configuración del módulo, y esa es la clave de resolución.

02:42.800 --> 02:47.800
Ahí le decimos a Webpack qué extensiones de archivo añade a las importaciones

02:47.820 --> 02:49.750
que encuentra.

02:49.750 --> 02:52.440
Dije que Webpack añadiría las extensiones por sí

02:52.440 --> 02:56.160
mismo, y por defecto, buscará . archivos js.

02:56.160 --> 02:59.220
Aquí queremos que Webpack busque los archivos . ts, y luego para aquí en resolve,

02:59.220 --> 03:01.280
podemos añadir una propiedad extensions,

03:01.280 --> 03:05.390
establecida como igual a un array, y decirle a Webpack que debe buscar los

03:05.390 --> 03:08.390
archivos . ts, así como los

03:08.390 --> 03:10.640
archivos . archivos js.

03:10.640 --> 03:13.360
Así que ahora Webpack básicamente buscará estos archivos

03:13.360 --> 03:16.900
y luego agrupará todos los archivos que tengan estas extensiones, que

03:16.900 --> 03:18.723
está importando juntos.

03:19.760 --> 03:22.770
Y esa es nuestra configuración casi terminada por el momento, nuestro

03:22.770 --> 03:24.690
archivo de configuración casi terminado

03:24.690 --> 03:26.150
por el momento al menos.

03:26.150 --> 03:28.730
Con eso sólo debemos ir a tsconfig también,

03:28.730 --> 03:33.070
y allí asegúrese de que usted establece sourceMap a true.

03:33.070 --> 03:35.210
Esto nos ayudará a depurar nuestro código,

03:35.210 --> 03:37.130
y Webpack también lo soporta.

03:37.130 --> 03:39.850
Ahora sólo tenemos que añadir una entrada, tal

03:39.850 --> 03:41.340
vez aquí por debajo de la

03:41.340 --> 03:43.710
salida, y eso es una clave devtool.

03:43.710 --> 03:47.210
Y allí, el valor debe ser inline-source-map como

03:47.210 --> 03:48.510
una cadena.

03:48.510 --> 03:51.620
Esto le dice a Webpack que ya habrá mapas fuente generados,

03:51.620 --> 03:53.700
que debe extraer y básicamente cablear

03:53.700 --> 03:57.210
correctamente al bundle que genera, de modo que mientras

03:57.210 --> 04:00.170
obtenemos dicho bundle, seguimos teniendo una

04:00.170 --> 04:03.603
gran experiencia de desarrollo.

04:05.830 --> 04:08.360
Ahora con eso podemos usar Webpack, y la pregunta

04:08.360 --> 04:09.823
es ¿cómo lo usamos?

04:11.000 --> 04:14.720
Una forma sencilla de utilizarlo es ir al paquete. json, y allí agreguemos

04:14.720 --> 04:16.650
un script.

04:16.650 --> 04:18.440
Por ejemplo, construir.

04:18.440 --> 04:19.810
Puedes darle el nombre que quieras

04:19.810 --> 04:21.620
aquí en la sección de scripts.

04:21.620 --> 04:23.930
Y ahí, simplemente ejecuta Webpack,

04:23.930 --> 04:26.453
así que sólo escribe webpack así.

04:27.560 --> 04:29.880
Vayamos ahora también a la carpeta dist,

04:29.880 --> 04:32.993
y al final eliminemos todo lo que hay ahí, y con eso

04:34.000 --> 04:36.870
guardamos, ahora ejecutamos npm run build y vemos

04:36.870 --> 04:38.663
si eso funciona.

04:39.970 --> 04:43.000
Y falla...

04:45.440 --> 04:47.800
Sí, simplemente tengo una errata,

04:47.800 --> 04:51.440
que no debería ser devtools, sino devtool aquí.

04:51.440 --> 04:53.830
Así que cambia esto por devtool en el archivo de configuración

04:53.830 --> 04:56.143
y ahora repitamos npm run build.

04:59.500 --> 05:02.620
Y, con eso, puedes ignorar la advertencia que te hacen aquí.

05:02.620 --> 05:04.230
Verás que en el archivo dist,

05:04.230 --> 05:06.410
tienes un archivo js empaquetado.

05:06.410 --> 05:08.150
Y lo que ves ahí también es un

05:08.150 --> 05:09.960
código bastante ilegible, porque

05:09.960 --> 05:14.060
tenemos esta minificación en acción aquí en realidad.

05:14.060 --> 05:18.680
Así que esto en realidad ya es este código optimizado también.

05:18.680 --> 05:21.410
Ahora, antes de ver cómo podemos trabajar con

05:21.410 --> 05:23.490
diferentes configuraciones aquí,

05:23.490 --> 05:26.120
vamos a ir al índice. html, y ajustar nuestras

05:26.120 --> 05:27.510
importaciones aquí y apuntar

05:27.510 --> 05:30.350
el paquete. js, y por el momento, ya

05:30.350 --> 05:32.220
que no estamos usando Webpack

05:32.220 --> 05:35.140
Dev Server todavía, vamos a ejecutar npm start

05:35.140 --> 05:38.480
para traer ese índice. archivo html de nuevo.

05:38.480 --> 05:40.510
Y si ahora recargas

05:40.510 --> 05:44.890
esta página, ¡verás que esto funciona!

05:44.890 --> 05:46.610
Si introducimos algo aquí, nuestro

05:46.610 --> 05:49.230
proyecto funciona como debería, e importa

05:49.230 --> 05:52.030
el archivo js empaquetado aquí, así que sólo un

05:52.030 --> 05:56.200
archivo en lugar de todos estos archivos individuales.

05:56.200 --> 05:59.020
Y eso ya es una mejora.

05:59.020 --> 06:01.640
Aquí ya tenemos el código empaquetado

06:01.640 --> 06:05.410
que evita todas estas peticiones htp innecesarias.

06:05.410 --> 06:07.690
Y si vas a la pestaña de fuentes por cierto, y

06:07.690 --> 06:09.420
quieres depurar tu código, encontrarás

06:09.420 --> 06:11.250
esta carpeta de Webpack, y allí una

06:11.250 --> 06:12.770
carpeta de fuentes, y allí puedes

06:12.770 --> 06:15.300
ir a tus archivos de TypeScript.

06:15.300 --> 06:19.090
Y por ejemplo, aquí, en el proyecto de entrada, también puede

06:19.090 --> 06:22.110
establecer un punto de ruptura aquí en gatherUserInput,

06:22.110 --> 06:24.970
y si ahora se pulsa el botón, se detiene allí, y

06:24.970 --> 06:26.190
usted puede depurar

06:26.190 --> 06:27.680
su código.

06:27.680 --> 06:29.650
Y así llegan los mapas de origen, que realmente

06:29.650 --> 06:31.200
nos ayudan a desarrollar y que

06:31.200 --> 06:34.050
nos facilitan la vida como desarrolladores.

06:34.050 --> 06:37.520
Tenemos este código optimizado, pero gracias a los mapas fuente

06:37.520 --> 06:40.750
podemos depurar nuestro código TypeScript original aquí.

06:40.750 --> 06:43.260
Así que ya tenemos una configuración bastante

06:43.260 --> 06:46.280
asombrosa, que nos da un montón de optimizaciones ya,

06:46.280 --> 06:48.440
ahora vamos a terminar esto y asegurarnos

06:48.440 --> 06:52.050
de que realmente tenemos el Webpack Dev Server incluido, y entonces

06:52.050 --> 06:54.440
realmente tenemos dos flujos de trabajo,

06:54.440 --> 06:58.443
uno para la producción, y otro para el desarrollo.
