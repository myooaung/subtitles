WEBVTT

00:02.260 --> 00:03.920
Açıklayıcı: App bileşeninde bazı durum

00:03.920 --> 00:05.340
yönetimlerinin zamanı geldi, çünkü

00:05.340 --> 00:07.240
diziyi bu şekilde güncellediğimizde bileşen

00:07.240 --> 00:08.880
yeniden oluşturulmayacaktır.

00:08.880 --> 00:10.530
React bu şekilde çalışır.

00:10.530 --> 00:12.590
Fonksiyon bileşenimizde, useState

00:12.590 --> 00:15.000
kancası ile State'i yönetebiliriz.

00:15.000 --> 00:16.820
Ve yine, bunu bilmiyorsanız veya

00:16.820 --> 00:18.750
state veya fonksiyon bileşenleri

00:18.750 --> 00:21.120
veya kancalar size bir şey söylemiyorsa,

00:21.120 --> 00:23.810
React, tam kılavuz kursum gibi bazı özel React

00:23.810 --> 00:26.480
kaynaklarına kesinlikle göz atın.

00:26.480 --> 00:29.870
Şimdi burada todo'larımı state ile yönetmek istiyorum ve

00:29.870 --> 00:31.760
bunun için başladığım kukla todo'yu

00:31.760 --> 00:33.060
temizleyeceğim ve bunun

00:33.060 --> 00:36.430
yerine useState'i çağırarak state'i başlatacağım ve bununla

00:36.430 --> 00:39.080
birlikte, başlangıç state değeri olarak boş

00:39.080 --> 00:41.210
dizimi geçirebilirim, böylece başlangıçta

00:41.210 --> 00:44.510
state'im boş bir dizi olur.

00:44.510 --> 00:47.100
Artık useState her zaman tam olarak iki

00:47.100 --> 00:49.370
elemanlı bir dizi döndürür.

00:49.370 --> 00:52.070
İlk öğe, bu render döngüsü için en son durum

00:52.070 --> 00:53.630
anlık görüntüsüdür.

00:53.630 --> 00:55.070
Ve ikinci argüman, dizideki

00:55.070 --> 00:56.720
ikinci eleman, bu durumu güncellemek

00:56.720 --> 00:58.860
ve bileşeni yeniden oluşturmak için

00:58.860 --> 01:01.110
bir işlevdir.

01:01.110 --> 01:02.660
Bu iki öğeyi çekip çıkarmak

01:02.660 --> 01:05.060
ve ayrı sabitlerde saklamak için kursta daha

01:05.060 --> 01:07.060
önce öğrendiğimiz dizi yeniden yapılandırmasını

01:07.060 --> 01:09.230
kullanabiliriz.

01:09.230 --> 01:10.900
Ve sonra burada todos ve diyelim ki

01:10.900 --> 01:13.103
setTodos adında bir fonksiyonumuz var.

01:14.920 --> 01:16.820
Bununla birlikte, todos dizimizi

01:16.820 --> 01:19.530
almaya devam ediyoruz ve şimdi burada todoAddHandler'da

01:19.530 --> 01:21.480
setTodos'u çağırmak ve todos dizimi

01:21.480 --> 01:24.430
yeni todoText'in eklendiği yeni bir diziye ayarlamak

01:24.430 --> 01:27.373
istiyorum.

01:28.240 --> 01:29.283
Şimdi bunun için,

01:30.400 --> 01:32.130
elbette yeni bir dizi geçebilir

01:32.130 --> 01:34.100
ve Math ile rastgele bir kimlik

01:34.100 --> 01:36.530
oluşturduğumuz bir kimlikle yeni bir

01:36.530 --> 01:42.530
nesne ekleyebiliriz.

01:42.530 --> 01:42.530
random(). toString.

01:42.530 --> 01:44.830
Gerçekten benzersiz değil, ancak burada yeterince

01:44.830 --> 01:46.620
iyi ve burada da metnimiz var, bu da

01:46.620 --> 01:48.760
burada aldığım metin değeri.

01:48.760 --> 01:51.910
Ancak garip bir şekilde burada bir hata alıyorum.

01:51.910 --> 01:54.790
Aldığımız hata ise bu argümanın

01:54.790 --> 01:56.860
atanabilir olmaması.

01:56.860 --> 01:59.630
Temel olarak hiçbir şey içermeyen bir diziye

01:59.630 --> 02:01.970
sahip olmayı bekleyen bir şeye.

02:01.970 --> 02:03.590
Ve tabii ki burada istediğiniz şey bu değil.

02:03.590 --> 02:06.010
Devletimiz olarak hiçbir şeyden oluşan bir diziye sahip olmak istemiyoruz.

02:06.010 --> 02:07.110
Bu neden oluyor?

02:07.950 --> 02:11.800
Çünkü burada useState öğesini boş bir diziyle başlattığımda, TypeScript

02:11.800 --> 02:15.040
durumumuzun nasıl görüneceğini çıkarır; bunu bir dizeyle

02:15.040 --> 02:17.060
başlatsaydım, TypeScript durumumun

02:17.060 --> 02:20.130
bir dize olduğu sonucunu çıkarırdı.

02:20.130 --> 02:23.010
Yani bunu geçici olarak kaldırırsam ve bir metin girersem,

02:23.010 --> 02:24.123
kabul edilecektir.

02:25.160 --> 02:26.137
Bunu bir dizi olarak iletirsem,

02:26.137 --> 02:28.260
TypeScript bunun bir dizi olmasını bekler, ancak herhangi

02:28.260 --> 02:30.080
bir şeyin dizisi değil, her zaman temelde boş

02:30.080 --> 02:32.000
bir dizi olmasını bekler.

02:32.000 --> 02:36.070
Yani elbette burada istemediğim hiçbir şey dizisi.

02:36.070 --> 02:38.050
Bunu düzeltmek için React'e, mülkümüzün

02:38.050 --> 02:40.460
zaman içinde nasıl görüneceğini söylemeliyiz.

02:40.460 --> 02:42.920
Ve bunun için yine useState'in genel bir

02:42.920 --> 02:44.630
fonksiyon olduğunu kullanabiliriz,

02:44.630 --> 02:48.080
çünkü mülkümüzün yapısını aktarabiliriz.

02:48.080 --> 02:51.240
Durumumuzun hangi veri türünde olduğunu ve durumumuzun

02:51.240 --> 02:54.200
bir nesne dizisi olması gerektiğini, daha doğrusu

02:54.200 --> 02:56.253
bir dize olan ID özelliğine ve bir

02:57.210 --> 02:59.570
dize olan metin özelliğine sahip olduğumuz

02:59.570 --> 03:04.860
bir nesne dizisi olması gerektiğini aktarabiliriz.

03:04.860 --> 03:08.050
Ve şimdi bu durum güncellemesine izin veriliyor.

03:08.050 --> 03:10.100
Şimdi bunu buraya yazmak elbette iyi ama uygulamada farklı

03:10.100 --> 03:12.410
yerlerde ihtiyacımız olacağından, aslında yeni bir dosya oluşturacağım

03:12.410 --> 03:16.710
ve buna todo adını vereceğim. Model. ts.

03:16.710 --> 03:18.210
Dosya adı size kalmış.

03:18.210 --> 03:19.940
Ve burada temel olarak Todo adında bir

03:19.940 --> 03:21.710
arayüz dışa aktarmak istiyorum, burada

03:21.710 --> 03:24.080
sadece Todo kimliğimizin uygulamamda nasıl görünmesi

03:24.080 --> 03:25.440
gerektiğini tanımlamak istiyorum,

03:25.440 --> 03:27.430
string türünde bir kimliğe ve string türünde

03:27.430 --> 03:30.190
bir metin özelliğine sahip olmak istiyorum.

03:30.190 --> 03:34.420
Ve bu uygulama bileşeninde dışa aktarıldığında, bunu

03:34.420 --> 03:35.900
içe aktarabiliriz,

03:35.900 --> 03:42.543
böylece burada Todo'yu .

03:42.543 --> 03:42.543
/todo. Model.

03:43.900 --> 03:46.720
Ve burada basitçe, elbette daha kısa ve okunması

03:46.720 --> 03:49.550
daha kolay olan bir todos dizisine sahip oluruz.

03:49.550 --> 03:51.480
Ve şimdi durum güncellememiz hala çalışıyor,

03:51.480 --> 03:52.870
ancak bu biraz daha temiz.

03:52.870 --> 03:55.100
Ve gördüğünüz gibi bu, boş bir diziyle

03:55.100 --> 03:57.210
başlatırsanız, sonunda hangi veri

03:57.210 --> 03:59.170
türü için içerik türlerini depolamak

03:59.170 --> 04:01.860
istediğiniz bir dizi gibi bir şeyle çalışırken

04:01.860 --> 04:04.270
burada gerçekten önemlidir.

04:04.270 --> 04:06.250
Bununla birlikte işe yarıyor.

04:06.250 --> 04:07.450
Tabii ki dezavantajı,

04:07.450 --> 04:09.910
buradaki durum güncelleme mantığımızın doğru

04:09.910 --> 04:13.670
olmamasıdır, çünkü şu anda her zaman mevcut todos dizisinin üzerine

04:13.670 --> 04:17.400
yalnızca tam olarak bir elemanı olan yeni bir dizi yazıyorum.

04:17.400 --> 04:20.110
Ve bunun yerine, tüm eski öğelerin yanı sıra yeni

04:20.110 --> 04:23.730
öğeyi de içeren yeni bir diziyle üzerine yazmak istiyorum.

04:23.730 --> 04:26.583
Bir sonraki derste bu mantığı yeniden düzenleyelim.
