WEBVTT

00:02.260 --> 00:03.920
Instructeur : Donc, des syndicats discriminés.

00:03.920 --> 00:05.750
Vraiment, vraiment utile.

00:05.750 --> 00:09.060
Une autre fonctionnalité très utile est le moulage de type.

00:09.060 --> 00:12.640
Le type casting vous permet d'indiquer à TypeScript qu'une

00:12.640 --> 00:15.350
valeur est d'un type spécifique lorsque TypeScript

00:15.350 --> 00:19.240
n'est pas capable de le détecter par lui-même, mais que vous, en tant

00:19.240 --> 00:22.660
que développeur, savez que ce sera le cas.

00:22.660 --> 00:25.030
Un bon exemple de ceci est si nous obtenons

00:25.030 --> 00:27.120
X à quelque chose dans le dom.

00:27.120 --> 00:29.560
Disons que nous avons un paragraphe dans le domaine,

00:29.560 --> 00:32.180
seulement un paragraphe, rien d'autre, et c'est un

00:32.180 --> 00:33.390
paragraphe vide.

00:33.390 --> 00:35.190
Donc, évidemment, si nous sauvegardons

00:35.190 --> 00:37.150
cela, nous ne voyons rien ici, sur l'écran.

00:37.150 --> 00:38.950
Maintenant nous pouvons accéder à ce paragraphe

00:38.950 --> 00:40.543
depuis notre script.

00:43.160 --> 00:48.160
Const paragraphe avec le sélecteur de requête de document P, par exemple.

00:49.180 --> 00:51.890
Maintenant, lorsque nous utilisons le sélecteur de requête

00:51.890 --> 00:54.500
et que nous passons dans P comme sélecteur, de sorte que

00:54.500 --> 00:57.070
la sélection se fait par la balise P, TypeScript est en

00:57.070 --> 00:59.510
mesure de découvrir, comme vous pouvez le voir si je

00:59.510 --> 01:02.480
le survole, que ce sera un élément de type paragraphe ou nul parce

01:02.480 --> 01:05.900
que peut-être qu'un tel élément n'existe pas dans la page, mais c'est une

01:05.900 --> 01:07.050
autre chose.

01:07.050 --> 01:09.920
Ignorons pour l'instant le cas du ou nul.

01:09.920 --> 01:12.400
L'important est que TypeScript découvre effectivement

01:12.400 --> 01:14.600
qu'il s'agit d'un élément de paragraphe.

01:14.600 --> 01:16.800
Maintenant, cela change si nous sélectionnons par

01:16.800 --> 01:18.460
quelque chose d'autre, disons un ID.

01:18.460 --> 01:22.020
Nous l'appelons ici message-output, donc ce paragraphe

01:22.020 --> 01:23.920
a un ID de message-output.

01:23.920 --> 01:25.890
En tant que développeur, nous savons bien

01:25.890 --> 01:28.360
sûr que nous avons attribué cet ID à ce paragraphe, mais

01:28.360 --> 01:29.780
TypeScript ne le sait pas.

01:29.780 --> 01:33.020
TypeScript ne plonge pas dans nos fichiers HTML

01:33.020 --> 01:34.590
pour les analyser.

01:34.590 --> 01:37.360
Donc si maintenant nous sélectionnons par

01:37.360 --> 01:41.720
cet ID ici, par exemple, avec getElementById, alors nous voyons que

01:41.720 --> 01:45.130
ce que TypeScript déduit est que c'est juste un élément

01:45.130 --> 01:49.830
HTML ou null, il ne sait pas quel élément HTML spécifique c'est.

01:49.830 --> 01:52.720
Maintenant, pour un paragraphe, cela n'a peut-être pas trop d'importance,

01:52.720 --> 01:54.830
peut-être que nous voulons juste faire des choses

01:54.830 --> 01:57.290
avec lui que nous pourrions faire avec n'importe quel élément

01:57.290 --> 01:59.990
HTML, par exemple, accéder à son contenu texte ou quelque chose

01:59.990 --> 02:01.470
comme ça.

02:01.470 --> 02:03.220
Mais si nous avions un apport ici ?

02:03.220 --> 02:07.750
Et si nous avions en fait une entrée de type texte, et que nous voulions obtenir la valeur

02:07.750 --> 02:10.430
que l'utilisateur a saisie, alors je vais lui donner

02:10.430 --> 02:12.760
un ID de user-input et maintenant je sélectionne

02:12.760 --> 02:15.500
ceci dans mon code TypeScript.

02:15.500 --> 02:17.730
Donc ici je sélectionne par ID user-input,

02:17.730 --> 02:21.530
et ce n'est plus un paragraphe, mais userInputElement.

02:21.530 --> 02:24.023
Maintenant, en tant que développeur, nous savons qu'ici, nous

02:24.909 --> 02:26.700
nous adressons à cet élément d'entrée, mais comme

02:26.700 --> 02:28.530
je l'ai dit, TypeScript ne le sait pas.

02:28.530 --> 02:31.140
TypeScript ne lit pas notre code HTML, donc

02:31.140 --> 02:34.435
TypeScript sait seulement que c'est un élément HTML.

02:34.435 --> 02:37.860
Maintenant, si je voulais définir la propriété

02:37.860 --> 02:40.902
de valeur de ce donc, et il essayerait de faire

02:40.902 --> 02:45.000
userInputElement. valeur égale bonjour, vous voyez

02:45.000 --> 02:47.050
que j'ai en fait une erreur.

02:47.050 --> 02:48.960
J'obtiens une erreur parce que, d'une

02:48.960 --> 02:50.780
part, cet objet est peut-être nul.

02:50.780 --> 02:54.220
Nous pouvons corriger cela en ajoutant un point d'exclamation

02:54.220 --> 02:56.210
après ceci, et j'y reviendrai dans

02:56.210 --> 02:58.390
une seconde, mais même dans ce cas, je

02:58.390 --> 03:01.640
reçois toujours une erreur indiquant que la valeur n'existe

03:01.640 --> 03:03.890
pas sur le type HTML Element parce que

03:03.890 --> 03:08.343
ce type générique, que tout élément HTML a comme type, ne supporte pas les

03:08.343 --> 03:11.630
propriétés qui sont spécifiques à, eh bien, des éléments

03:11.630 --> 03:14.510
HTML spécifiques.

03:14.510 --> 03:17.540
Nous devrions donc indiquer à TypeScript que ce que

03:17.540 --> 03:20.860
nous sélectionnons ici n'est pas seulement différent

03:20.860 --> 03:25.080
de null, mais qu'il est également de type HTMLInputElement.

03:25.080 --> 03:28.240
Et c'est ce que nous pouvons faire avec le moulage de type.

03:28.240 --> 03:31.153
Maintenant, il y a deux façons de faire du casting de type, deux syntaxes

03:31.153 --> 03:34.170
que nous pouvons utiliser, et elles sont équivalentes.

03:34.170 --> 03:36.971
La première consiste à ajouter quelque chose devant la

03:36.971 --> 03:41.920
chose que nous voulons convertir, ou devant laquelle nous voulons dire à TypeScript de taper.

03:41.920 --> 03:44.170
Nous ajoutons des parenthèses angulaires ouvrantes

03:44.170 --> 03:45.810
et fermantes, puis entre ces parenthèses,

03:45.810 --> 03:49.480
le type de la chose après les parenthèses angulaires.

03:49.480 --> 03:51.223
Dans ce cas, HTMLInputElement.

03:53.110 --> 03:54.970
Et ce type est globalement disponible

03:54.970 --> 03:57.963
car dans mon fichier tsconfig, j'inclus la librairie dom.

03:59.180 --> 04:00.810
Grâce à cela, TypeScript sait

04:00.810 --> 04:03.830
que tout ce que nous sélectionnons ici après les parenthèses

04:03.830 --> 04:06.530
angulaires sera de type HTMLInputElement, et

04:06.530 --> 04:08.950
il ne se plaint donc plus.

04:08.950 --> 04:10.330
Donc, c'est la version 1.

04:10.330 --> 04:12.830
Je vais le copier et le commenter pour vous

04:12.830 --> 04:14.750
montrer l'alternative.

04:14.750 --> 04:18.000
Cela fonctionne parfaitement et vous pouvez l'utiliser.

04:18.000 --> 04:21.210
Cependant, si vous connaissez React, vous savez que

04:21.210 --> 04:24.400
vous disposez également d'une telle syntaxe de parenthèse

04:24.400 --> 04:26.970
angulaire dans JavaScript ou TypeScript

04:26.970 --> 04:29.200
si vous l'utilisez pour les fichiers

04:29.200 --> 04:33.550
React, où vous écrivez du code JSX dans vos composants React.

04:33.550 --> 04:36.060
Si vous ne connaissez pas React, cela ne vous dit pas grand-chose.

04:36.060 --> 04:40.800
Sachez simplement qu'une syntaxe similaire existe dans les projets React et que là, les parenthèses

04:40.800 --> 04:43.320
angulaires ne sont pas utilisées pour transmettre

04:43.320 --> 04:47.480
des informations concernant les types que vous utilisez, mais elles sont analysées

04:47.480 --> 04:50.390
par certains outils de construction et par React, en fin

04:50.390 --> 04:54.390
de compte, pour savoir ce que vous voulez rendre à l'écran.

04:54.390 --> 04:56.750
Donc, totalement détaché de TypeScript.

04:56.750 --> 04:59.880
Afin de ne pas entrer en conflit avec la syntaxe JSX, l'équipe

04:59.880 --> 05:01.900
TypeScript propose une alternative

05:01.900 --> 05:04.350
à ce moulage de type entre crochets.

05:04.350 --> 05:06.450
Vous pouvez également ajouter quelque

05:06.450 --> 05:07.920
chose après la chose que vous

05:07.920 --> 05:09.960
voulez taper, donc après cette sélection

05:09.960 --> 05:12.600
dans ce cas, et cette chose est le mot-clé as.

05:12.600 --> 05:14.740
Et puis ici vous ajoutez encore le type

05:14.740 --> 05:16.750
auquel vous voulez le mouler.

05:16.750 --> 05:19.970
Cela indique donc à TypeScript que l'expression

05:19.970 --> 05:23.730
qui le précède, dans ce cas, cette expression ici, produira

05:23.730 --> 05:27.405
une valeur de type HTMLInputElement.

05:27.405 --> 05:30.067
Par conséquent, là encore, nous n'obtenons aucune erreur.

05:30.067 --> 05:31.650
Il s'agit donc d'une alternative,

05:31.650 --> 05:33.940
et vous pouvez utiliser l'une ou l'autre des deux

05:33.940 --> 05:36.350
syntaxes, quelle que soit votre préférence, vous

05:36.350 --> 05:38.990
devez simplement essayer d'être cohérent tout au long

05:38.990 --> 05:42.377
de votre projet afin de ne pas alterner entre ces deux syntaxes.

05:42.377 --> 05:45.220
Avec cela, vous pouvez transmettre ces précieuses

05:45.220 --> 05:47.480
informations supplémentaires à TypeScript

05:47.480 --> 05:50.400
et faire fonctionner un code comme celui-ci, même si

05:50.400 --> 05:52.760
TypeScript n'est pas en mesure de découvrir

05:52.760 --> 05:56.000
que cet élément produit un HTMLInputElement.

05:56.000 --> 05:57.940
Bien sûr, puisque vous forcez TypeScript

05:57.940 --> 06:00.420
à utiliser ce type, il est de votre responsabilité

06:00.420 --> 06:02.200
en tant que développeur de vous assurer

06:02.200 --> 06:05.620
que ce que cette expression produit sera de ce type.

06:05.620 --> 06:07.700
Sinon, vous risquez d'obtenir une erreur ou

06:07.700 --> 06:09.920
un comportement inattendu au moment de l'exécution

06:09.920 --> 06:12.780
si vous essayez d'interagir avec cet élément d'une manière qui

06:12.780 --> 06:14.423
n'est pas prise en charge.

06:15.610 --> 06:18.060
Le moulage par type est donc une fonctionnalité puissante.

06:18.060 --> 06:20.490
Tout comme ce point d'exclamation ici.

06:20.490 --> 06:22.590
En fait, j'ai déjà exploré cette question

06:22.590 --> 06:24.820
un peu plus tôt dans le cours.

06:24.820 --> 06:27.470
Ce point d'exclamation nous permet d'indiquer à TypeScript

06:27.470 --> 06:31.090
que l'expression qui le précède ne donnera jamais un résultat nul.

06:31.090 --> 06:33.170
Et ceci est nécessaire pour certaines expressions,

06:33.170 --> 06:35.070
comme ici, lorsque vous sélectionnez quelque

06:35.070 --> 06:38.010
chose dans le domaine qui pourrait retourner null.

06:38.010 --> 06:40.980
Si nous savons, en tant que développeur, que le résultat ne sera jamais

06:40.980 --> 06:43.690
nul, alors nous pouvons utiliser ce point d'exclamation.

06:43.690 --> 06:45.470
Sinon, et vous l'avez déjà

06:45.470 --> 06:48.248
appris, je veux juste le répéter.

06:48.248 --> 06:49.380
Sinon, si vous n'êtes pas sûr que

06:49.380 --> 06:52.600
cette opération ne retournera pas null, vous pouvez utiliser une vérification if.

06:52.600 --> 06:56.070
Vous pourriez donc vérifier si userInputElement est vrai,

06:56.070 --> 06:57.510
et donc s'il n'est pas nul,

06:57.510 --> 06:59.440
puis l'utiliser ici.

06:59.440 --> 07:02.720
Maintenant, j'ai dû supprimer le casting de type dans ce cas parce que si

07:02.720 --> 07:04.670
nous faisons le cast de type ici, nous disons

07:04.670 --> 07:07.170
également à TypeScript que ce ne sera pas null, et puisque

07:07.170 --> 07:10.470
je ne suis pas certain de cela, je ne peux pas faire le cast ici.

07:10.470 --> 07:13.120
Au lieu de cela, je dois le faire ici lorsque j'utilise

07:13.120 --> 07:14.290
la valeur, et je veux donc

07:14.290 --> 07:16.600
le faire avant d'accéder à la propriété valeur,

07:16.600 --> 07:19.820
en ajoutant un HTMLInputElement comme ceci.

07:19.820 --> 07:21.530
Mais bien sûr, cela échouerait.

07:21.530 --> 07:24.060
Il s'agit d'une syntaxe invalide. Vous essayeriez

07:24.060 --> 07:28.030
d'accéder à une propriété de valeur sur un élément HTMLInputElement,

07:28.030 --> 07:30.280
ce qui n'a aucun sens.

07:30.280 --> 07:33.010
Il suffit de mettre cette expression entre parenthèses,

07:33.010 --> 07:35.670
de s'assurer qu'elle est évaluée en premier, puis

07:35.670 --> 07:37.590
d'essayer d'accéder à la valeur du résultat

07:37.590 --> 07:39.480
de cette expression.

07:39.480 --> 07:41.650
Et maintenant, nous avons une alternative à l'utilisation

07:41.650 --> 07:42.893
du point d'exclamation.
