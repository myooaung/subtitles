WEBVTT

00:02.190 --> 00:04.480
Dus om te beginnen met onze eigen generieken.

00:04.480 --> 00:06.820
Hieronder de uitgecommentarieerde code.

00:06.820 --> 00:09.210
Ik begin met een algemene functie.

00:09.210 --> 00:11.430
Je kunt generieke klassen en functies

00:11.430 --> 00:15.350
bouwen, ik zal beide laten zien en hier begin ik met een functie.

00:15.350 --> 00:17.490
Laten we zeggen dat we een functie

00:17.490 --> 00:22.490
willen hebben die twee objecten samenvoegt en een nieuw object teruggeeft.

00:23.660 --> 00:25.380
Dus hier zouden we het "samenvoegen" kunnen noemen.

00:25.380 --> 00:28.803
En we willen object A en object B als invoer.

00:30.010 --> 00:33.990
Nu zouden we deze functie natuurlijk op een bepaalde manier kunnen schrijven.

00:33.990 --> 00:36.660
We kunnen zeggen dit is van het type object

00:36.660 --> 00:39.033
en dit is van het type object.

00:39.960 --> 00:41.760
En wat deze functie dan doet is,

00:41.760 --> 00:45.200
het geeft het resultaat van het object toewijzen.

00:45.200 --> 00:48.130
Waar ik object A en object B krijg.

00:48.130 --> 00:50.230
Dus omdat we deze object toewijzingsmethode

00:50.230 --> 00:53.000
al hebben ingebouwd in normale javascript.

00:53.000 --> 00:55.820
We kunnen erover discussiëren of we echt een samenvoegfunctie nodig hebben,

00:55.820 --> 00:58.140
maar natuurlijk zou je hier extra werk kunnen doen.

00:58.140 --> 01:00.480
Je zou dit kunnen verrijken met extra informatie,

01:00.480 --> 01:01.833
met extra opties en uiteindelijk

01:01.833 --> 01:04.730
is dit slechts een demo, slechts een voorbeeld.

01:04.730 --> 01:07.510
Dus dit zou geldig zijn, we kunnen hier

01:07.510 --> 01:11.830
samenvoegen, en de console logt het resultaat, zoals dit.

01:11.830 --> 01:15.130
En dan geven we een object door met een naamsleutel en

01:15.130 --> 01:17.570
een tweede object met een leeftijd en als

01:17.570 --> 01:20.010
we dat uitvoeren en we slaan dit op.

01:20.010 --> 01:22.780
Hier in de browser krijgen we inderdaad deze uitvoer.

01:22.780 --> 01:24.280
Dus we krijgen dit samenvoeg object.

01:24.280 --> 01:27.050
Nu werkt dit, het probleem dat

01:27.050 --> 01:29.660
we hiermee hebben is als we deze

01:31.660 --> 01:33.300
samenvoegingsnaam

01:33.300 --> 01:38.097
max, en leeftijd 30 proberen op te slaan.

01:39.620 --> 01:44.620
Als we dit hier proberen op te slaan, heb ik geen toegang tot de naam van het resultaat,

01:45.770 --> 01:48.730
niet tot de leeftijd van het resultaat van dit samengevoegde

01:48.730 --> 01:50.020
object.

01:50.020 --> 01:52.360
Ook al weten we dat beide zullen bestaan.

01:52.360 --> 01:54.830
Omdat typescript dit niet weet.

01:54.830 --> 01:57.100
Typescript kan dit niet weten.

01:57.100 --> 01:59.310
Omdat we het gewoon vertellen, dat je een object

01:59.310 --> 02:02.370
krijgt en op het einde eerst dat we een object teruggeven.

02:02.370 --> 02:04.790
Wat correct is, maar niet alle informatie

02:04.790 --> 02:07.810
bevat die we hier kunnen gebruiken.

02:07.810 --> 02:09.970
Nu kunnen we natuurlijk altijd type casting

02:09.970 --> 02:12.080
doen, we kunnen typescript vertellen dat

02:12.080 --> 02:14.220
we een object terugkrijgen met een naamsleutel

02:14.220 --> 02:15.960
en een leeftijdsleutel.

02:15.960 --> 02:19.020
Maar dat is echt omslachtig als we dat moeten doen.

02:19.020 --> 02:21.420
Dus hier kunnen generieken ons helpen.

02:21.420 --> 02:23.750
We veranderen dit in een generieke functie

02:23.750 --> 02:26.470
door deze haakjes na de functienaam toe te voegen.

02:26.470 --> 02:29.740
En dan definiëren we Q identifiers.

02:29.740 --> 02:33.190
Meestal begin je met T, voor type.

02:33.190 --> 02:35.600
Maar u kunt hier elke identificatie gebruiken,

02:35.600 --> 02:37.730
het hoeft geen enkel karakter te zijn, maar

02:37.730 --> 02:39.860
de conventie is om een enkel karakter te gebruiken

02:39.860 --> 02:42.250
en typisch, als u slechts één algemeen type heeft,

02:42.250 --> 02:43.690
noemt u dit T.

02:43.690 --> 02:46.640
En dan zeg je, dit generieke type hier, is nu beschikbaar

02:46.640 --> 02:48.510
in deze functie.

02:48.510 --> 02:51.453
We kunnen dus zeggen dat wat we hier krijgen van het type T is.

02:53.090 --> 02:55.740
Ziet er vreemd uit, we komen er wel, geen zorgen.

02:55.740 --> 02:57.280
Nu krijgen we twee argumenten waarvan

02:57.280 --> 02:59.570
we niet precies weten hoe ze eruit zullen zien.

02:59.570 --> 03:02.450
Dus accepteer ik hier een tweede generiek type.

03:02.450 --> 03:04.340
Gewoon door een komma toe te voegen in

03:04.340 --> 03:07.400
de haakjes, En dan gaan we gewoon verder in het alfabet.

03:07.400 --> 03:10.490
En daarom wordt de tweede generieke parameter

03:10.490 --> 03:15.490
of het tweede type dat u in een functie gebruikt, gewoonlijk U genoemd.

03:15.630 --> 03:18.560
We kunnen dus zeggen dat dit van het type U is.

03:18.560 --> 03:22.100
Oké, wat levert dit ons nu op?

03:22.100 --> 03:25.450
Wel veel eigenlijk, zoals je bij deze alleen al ziet

03:25.450 --> 03:28.620
als je met de muis over samenvoegen gaat, leidt typescript

03:28.620 --> 03:33.230
af dat deze functie het snijpunt van T en U teruggeeft.

03:33.230 --> 03:36.800
En we zouden dit natuurlijk ook expliciet kunnen instellen, maar

03:36.800 --> 03:38.040
dat hoeven we niet eens te

03:38.040 --> 03:42.010
doen omdat object assign een snijpunt teruggeeft en omdat we dus een resultaat

03:42.010 --> 03:44.150
van object assign teruggeven, begrijpt

03:44.150 --> 03:45.740
typescript automatisch dat deze

03:45.740 --> 03:48.390
functie het snijpunt teruggeeft.

03:48.390 --> 03:50.320
Hoe is dit dan nuttig?

03:50.320 --> 03:52.510
Als we nu met de muis over merged object

03:52.510 --> 03:54.260
gaan, zien we dat met dit alleen

03:54.260 --> 03:56.450
al typescript begrijpt dat wat we opslaan

03:56.450 --> 03:59.230
in merged object het snijpunt is van deze twee objecttypen,

03:59.230 --> 04:01.690
omdat het ziet dat we deze objecten doorgeven,

04:01.690 --> 04:06.100
die van deze objecttypen zijn die het induceert.

04:06.100 --> 04:08.840
Naamstring en leeftijdsnummer.

04:08.840 --> 04:11.590
En dat onze functie het snijpunt teruggeeft.

04:11.590 --> 04:13.630
Waarom kan het dit nu afleiden en

04:13.630 --> 04:16.313
niet met object dat we eerder hadden?

04:17.220 --> 04:19.560
Omdat object een zeer onspecifiek type is.

04:19.560 --> 04:22.490
We zeggen een willekeurig object en ja daarom kan typescript

04:22.490 --> 04:24.530
afleiden dat we het snijpunt van object

04:24.530 --> 04:26.600
en object teruggeven.

04:26.600 --> 04:29.570
Maar het snijpunt van twee onbekende objecten

04:29.570 --> 04:32.270
is gewoon een nieuw onbekend object dat geen

04:32.270 --> 04:35.420
extra type-informatie biedt aan typescript.

04:35.420 --> 04:38.170
Met generieke types vertellen we typescript

04:38.170 --> 04:43.170
dat deze twee parameters van verschillende types kunnen en vaak ook zullen

04:43.282 --> 04:47.100
zijn, zodat typescript kan begrijpen dat we niet zomaar

04:47.100 --> 04:49.690
werken met een willekeurig objecttype,

04:49.690 --> 04:53.150
maar dat we hier gegevens van verschillende types

04:53.150 --> 04:55.250
krijgen.

04:55.250 --> 04:56.940
En dat deze functie als geheel

04:56.940 --> 04:59.770
het snijpunt van die gegevens teruggeeft.

04:59.770 --> 05:01.773
En daarom begrijpt typescript dat

05:01.773 --> 05:04.390
wat we hier in het samengevoegde object opslaan,

05:04.390 --> 05:07.910
een kruising is van de gegevens van deze twee ingangen.

05:07.910 --> 05:09.530
Want nu hebben we niet zomaar

05:09.530 --> 05:14.423
te maken met onbekende objecten, maar met zeer specifieke types.

05:15.330 --> 05:20.150
En als ik nu de samengevoegde object leeftijd hier log, werkt dit

05:20.150 --> 05:22.980
zonder fouten, zoals je kunt zien.

05:22.980 --> 05:26.770
Hier druk ik 30 vanwege generieke types.

05:26.770 --> 05:29.040
We geven typescript de extra informatie dat

05:29.040 --> 05:31.950
we niet precies weten wat de types zullen zijn, er zullen

05:31.950 --> 05:34.780
hier objecten zijn die we kunnen vertellen.

05:34.780 --> 05:36.550
Maar we weten niet of het een object is met een naamsleutel,

05:36.550 --> 05:38.640
met een leeftijdsleutel, met een hobby sleutel.

05:38.640 --> 05:41.130
We weten het niet en het kan ons niet schelen, we geven

05:41.130 --> 05:43.360
niet om het exacte object hier, we willen niet

05:43.360 --> 05:46.050
specificeren dat dit van dit type moet zijn.

05:46.050 --> 05:47.490
Want als ik dan ineens

05:47.490 --> 05:50.520
hobby's toevoeg, hebben we een probleem.

05:50.520 --> 05:52.540
Dus ik wil niet zo beperkend zijn.

05:52.540 --> 05:54.480
Ik wil alleen maar zeggen dat dit van elk

05:54.480 --> 05:56.940
type is waar ik niet om geef, maar het is waarschijnlijk

05:56.940 --> 05:58.590
een ander type dan dit hier.

05:58.590 --> 06:00.860
En als het hetzelfde zou zijn, zou dat ook prima zijn.

06:00.860 --> 06:03.030
Maar typescript begrijpt dat we hier

06:03.030 --> 06:06.530
specifieke types hebben voor deze twee parameters en dat

06:06.530 --> 06:08.800
we het snijpunt ervan teruggeven.

06:08.800 --> 06:12.660
In plaats van een willekeurig object.

06:12.660 --> 06:14.770
De magie hier is niet alleen dat we typescript

06:14.770 --> 06:16.210
vertellen dat we twee verschillende

06:16.210 --> 06:18.410
types hebben.

06:18.410 --> 06:20.740
Maar dat deze types niet vastliggen wanneer we

06:20.740 --> 06:22.870
deze functie definiëren, maar dat ze dynamisch

06:22.870 --> 06:25.810
worden ingesteld wanneer we de functie aanroepen.

06:25.810 --> 06:27.430
Dus hier roepen we de functie aan

06:27.430 --> 06:30.560
en typescript leidt de types van de twee argumenten af.

06:30.560 --> 06:33.890
Voor T vult het in feite een objecttype in met een object met

06:33.890 --> 06:36.677
een name property die een string bevat en een hobbies

06:36.677 --> 06:39.600
property die een array van strings bevat.

06:39.600 --> 06:43.290
En voor U vult het een type object in met de eigenschap

06:43.290 --> 06:47.990
leeftijd waarbij leeftijd van het type getal is.

06:47.990 --> 06:51.030
Als we deze functie nu in een andere regel opnieuw aanroepen

06:51.030 --> 06:53.890
en we geven verschillende objecten door en ik sla

06:53.890 --> 06:57.090
dit op in een nieuwe constante met een nieuwe naam, dan

06:57.090 --> 06:59.920
worden er natuurlijk verschillende types ingevuld

06:59.920 --> 07:03.130
voor T en U voor deze functieaanroep.

07:03.130 --> 07:05.350
Je kunt typescript ook specifiek

07:05.350 --> 07:07.780
vertellen welke types het moet invullen

07:07.780 --> 07:09.110
door haakjes toe te voegen

07:09.110 --> 07:11.320
na de functienaam wanneer je die aanroept

07:11.320 --> 07:13.010
en dan vul je je eigen types

07:13.010 --> 07:15.200
in voor T en U.

07:15.200 --> 07:18.030
We zouden typescript kunnen vertellen dat T van het type string

07:18.030 --> 07:20.180
moet zijn voor deze functieaanroep en U van

07:20.180 --> 07:22.710
het type nummer, maar dan zou typescript natuurlijk

07:22.710 --> 07:23.950
klagen over de concrete waarden

07:23.950 --> 07:25.940
die we hier doorgeven.

07:25.940 --> 07:28.270
Omdat dit duidelijk geen string is en als we

07:28.270 --> 07:30.190
dit zouden oplossen, zou dit duidelijk

07:30.190 --> 07:32.280
niet van het type nummer zijn.

07:32.280 --> 07:34.650
Dus hier kunnen we heel specifiek zijn

07:34.650 --> 07:38.620
en zeggen, het eerste argument of het type T om precies te zijn voor

07:38.620 --> 07:41.700
deze functieaanroep hier zal een objecttype zijn

07:41.700 --> 07:45.310
waar we een name property hebben van het type string en een

07:45.310 --> 07:48.850
hobbies property van het type string array.

07:48.850 --> 07:52.970
En het concrete type voor U, voor deze functieaanroep zal een object

07:52.970 --> 07:55.800
zijn met een leeftijdseigenschap die van het type

07:55.800 --> 07:57.320
nummer moet zijn.

07:57.320 --> 08:00.220
En nu zouden we goed zijn en er zouden geen

08:00.220 --> 08:02.730
fouten meer zijn en dit zou werken.

08:02.730 --> 08:05.060
Maar dit is overbodig, je kunt dat absoluut doen

08:05.060 --> 08:07.310
en het is belangrijk te begrijpen dat dit uiteindelijk

08:07.310 --> 08:10.070
is waar het bij generieken om gaat, dat je verschillende

08:10.070 --> 08:15.170
concrete types kunt invullen voor verschillende functie-aanroepen.

08:15.170 --> 08:16.930
Maar dat hoeven we hier niet te doen

08:16.930 --> 08:20.110
omdat typescript gewoon de types afleidt van de waarden die

08:20.110 --> 08:22.170
we hier als argumenten doorgeven.

08:22.170 --> 08:25.120
En plaatst dan de afgeleide types voor

08:25.120 --> 08:28.240
T en U voor deze functieaanroep.

08:28.240 --> 08:31.283
Zo werken generieken uiteindelijk achter de schermen.
