WEBVTT

00:02.220 --> 00:04.080
-: I tipi di intersezione sono una cosa.

00:04.080 --> 00:05.470
Più spesso, tuttavia, viene utilizzata

00:05.470 --> 00:07.800
un'altra funzione, ovvero le protezioni dei tipi, una

00:07.800 --> 00:10.590
funzione che in realtà abbiamo già utilizzato un po'.

00:10.590 --> 00:12.400
Utilizziamo qui Combinable.

00:12.400 --> 00:15.560
È un tipo di unione in cui abbiamo una stringa o un numero e

00:15.560 --> 00:18.020
le protezioni di tipo ci aiutano con i tipi di

00:18.020 --> 00:21.050
unione perché, sebbene sia bello avere la flessibilità,

00:21.050 --> 00:23.610
spesso è necessario sapere quale tipo esatto

00:23.610 --> 00:26.200
si sta ottenendo in fase di esecuzione.

00:26.200 --> 00:28.630
Supponiamo di avere la nostra funzione

00:28.630 --> 00:33.070
add, con un numero che deve essere di tipo combinabile, quindi una stringa

00:33.070 --> 00:35.100
o un numero, e quindi lo chiamerò

00:35.100 --> 00:37.990
a, e poi ho un altro argomento che deve essere

00:37.990 --> 00:39.520
anch'esso combinabile,

00:39.520 --> 00:42.110
quindi un numero o una stringa, e quindi voglio

00:42.110 --> 00:44.640
restituire a più b.

00:44.640 --> 00:47.020
Abbiamo visto in passato che questo non funziona.

00:47.020 --> 00:51.320
Ora dobbiamo invece verificare se typeof a

00:51.320 --> 00:53.740
è uguale a stringa, ad esempio,

00:55.660 --> 00:59.780
o typeof b è uguale a stringa e, in tal caso,

00:59.780 --> 01:01.000
restituiremo

01:01.000 --> 01:04.681
a. toString più b. toString.

01:04.681 --> 01:06.750
Quindi concateniamo queste due stringhe;

01:06.750 --> 01:09.570
altrimenti, se non vengono inserite in questa istruzione

01:09.570 --> 01:11.510
if, restituiamo a più b in questo modo,

01:11.510 --> 01:13.270
perché ora il gruppo di tipi sa che

01:13.270 --> 01:15.620
a e b devono essere numeri, perché se almeno

01:15.620 --> 01:19.710
uno di essi non fosse un numero, saremmo qui.

01:19.710 --> 01:22.890
Questo è chiamato type guard, perché ci consente

01:22.890 --> 01:25.280
di utilizzare la flessibilità offerta

01:25.280 --> 01:27.980
dai tipi di unione e di assicurare che

01:27.980 --> 01:32.550
il nostro codice venga eseguito correttamente in fase di esecuzione,

01:32.550 --> 01:34.830
perché spesso si hanno funzioni

01:34.830 --> 01:38.160
che lavorano con due o tre tipi diversi e, quindi,

01:38.160 --> 01:40.570
un tipo di unione è perfetto, ma ciò

01:40.570 --> 01:43.890
che si fa esattamente con i valori dipende dal

01:43.890 --> 01:46.940
tipo, come in questo caso, dove concateniamo

01:46.940 --> 01:51.670
o aggiungiamo matematicamente.

01:51.670 --> 01:55.310
Si tratta di una protezione di tipo che utilizza typeof.

01:55.310 --> 01:58.970
È possibile scrivere anche altri tipi di protezioni di tipo.

01:58.970 --> 02:00.880
e per questo, torniamo ai tipi di amministratore

02:00.880 --> 02:03.050
e di dipendente che abbiamo qui, dove abbiamo

02:03.050 --> 02:04.950
privilegi per l'amministratore e data

02:04.950 --> 02:06.943
di inizio per il dipendente.

02:08.590 --> 02:11.810
Ora abbiamo l'ElevatedEmployee che combina entrambe le cose.

02:11.810 --> 02:14.980
Ora create anche un altro tipo qui.

02:14.980 --> 02:16.330
Questo è l'UnknownEmployee.

02:18.000 --> 02:21.940
Si tratta di un dipendente o di un amministratore.

02:21.940 --> 02:25.540
Quindi abbiamo un tipo di unione che utilizza i miei due tipi di oggetto personalizzati.

02:25.540 --> 02:28.173
Quindi il dipendente sconosciuto è uno dei due.

02:29.230 --> 02:32.003
Ora potremmo avere una funzione, printEmployeeInformation,

02:34.620 --> 02:36.420
in cui è necessario passare un dipendente,

02:36.420 --> 02:39.660
che dovrebbe essere di tipo unknown employee.

02:39.660 --> 02:41.610
Ora voglio consolare. registrare diverse

02:41.610 --> 02:44.030
informazioni sul dipendente.

02:44.030 --> 02:47.210
Ad esempio, il nome di emp. name, che funzionerà senza

02:47.210 --> 02:48.580
problemi perché entrambi

02:48.580 --> 02:52.140
i tipi di dipendenti hanno una proprietà name.

02:52.140 --> 02:56.730
Ma poi voglio anche consolare. registrare i privilegi

02:58.160 --> 03:01.520
accedendo a emp. privileges, e qui ho già problemi

03:01.520 --> 03:04.350
nel completamento automatico, perché TypeScript

03:04.350 --> 03:07.100
non può confermare che questo argomento

03:07.100 --> 03:09.890
esista sempre, perché UnknownEmployee potrebbe

03:09.890 --> 03:16.260
essere un normale dipendente che non ha una proprietà privileges.

03:16.260 --> 03:18.330
Solo l'amministratore ne dispone.

03:18.330 --> 03:20.100
Quindi ora abbiamo bisogno di una protezione di tipo qui.

03:20.100 --> 03:24.530
Il problema è che con typeof non si vince nulla.

03:24.530 --> 03:26.830
Se controlliamo il tipo di dipendente, questo

03:26.830 --> 03:29.470
sarà solo un oggetto in fase di esecuzione.

03:29.470 --> 03:31.380
Questo però non ci dice se ha questa

03:31.380 --> 03:32.940
proprietà o meno.

03:32.940 --> 03:34.960
Quindi, se sposto il codice in questo controllo

03:34.960 --> 03:37.430
if, TypeScript non è più felice di prima, perché

03:37.430 --> 03:39.750
un oggetto è, beh, solo un oggetto.

03:39.750 --> 03:41.920
Non ci dice nulla sulle proprietà.

03:41.920 --> 03:44.980
Non possiamo verificare se è di tipo Employee, perché

03:44.980 --> 03:48.130
non è un tipo conosciuto da JavaScript; teniamo presente

03:48.130 --> 03:49.840
che questo controllo viene

03:49.840 --> 03:52.560
eseguito a runtime e utilizza JavaScript,

03:52.560 --> 03:56.190
quindi possiamo solo confrontare il typeof con i tipi conosciuti

03:56.190 --> 03:58.010
da JavaScript, che sono oggetti,

03:58.010 --> 04:01.920
stringhe, numeri e booleani, mentre il nostro tipo personalizzato

04:01.920 --> 04:05.610
non ne fa parte.

04:05.610 --> 04:07.950
Questo esiste solo nel mondo TypeScript,

04:07.950 --> 04:11.020
non nel mondo JavaScript compilato.

04:11.020 --> 04:13.990
Quindi, anche questo non funziona.

04:13.990 --> 04:17.960
In questo caso, la soluzione consiste nell'utilizzare un controllo if diverso.

04:17.960 --> 04:20.240
Sappiamo che vogliamo accedere ai privilegi,

04:20.240 --> 04:25.240
quindi possiamo verificare se i privilegi dei dipendenti esistono.

04:26.400 --> 04:28.560
Il problema è che TypeScript non ci consente

04:28.560 --> 04:30.690
di accedere a questa proprietà, nemmeno

04:30.690 --> 04:33.550
di controllarla in questo modo, ma c'è un modo diverso

04:33.550 --> 04:36.200
per controllarla.

04:36.200 --> 04:40.000
Possiamo usare le parole chiave in che sono integrate in JavaScript.

04:40.000 --> 04:43.120
Possiamo verificare se i privilegi,

04:43.120 --> 04:46.690
ora scritti come stringa, sono in emp.

04:46.690 --> 04:49.130
Si tratta di codice JavaScript che consente

04:49.130 --> 04:53.480
di verificare se questa proprietà esiste sul dipendente e, in caso

04:53.480 --> 04:58.380
affermativo, TypeScript rileva questo controllo qui e, quindi, ci consente

04:58.380 --> 05:01.200
di accedere a questa proprietà all'interno

05:01.200 --> 05:04.543
di questo controllo if qui.

05:05.852 --> 05:08.380
E possiamo ripetere la stessa cosa per la

05:08.380 --> 05:12.240
data di inizio e, quindi, verificare se la data di inizio è una

05:12.240 --> 05:15.710
proprietà qui e, quindi, possiamo anche emetterla in

05:16.970 --> 05:18.730
questo controllo if.

05:18.730 --> 05:23.687
Quindi, se chiamiamo printEmployeeInformation e passiamo l'unico

05:24.650 --> 05:28.363
dipendente creato, e1, vedrete che la compilazione

05:31.410 --> 05:34.860
avviene senza errori e, in effetti, vengono emessi

05:34.860 --> 05:37.430
i privilegi e, beh, anche qui i dati

05:37.430 --> 05:42.530
dovrebbero dire Data di inizio, naturalmente.

05:42.530 --> 05:45.820
Ma con questo, ci fornisce l'output che ci aspetteremmo.

05:45.820 --> 05:48.590
E dall'altra parte, se passiamo un dipendente che

05:48.590 --> 05:50.950
non ha tutti questi campi, per esempio, se ne

05:50.950 --> 05:53.090
creiamo uno al volo che ha solo una data

05:53.090 --> 05:56.383
di inizio ma nessun privilegio, allora tutto funziona e viene

05:57.850 --> 06:00.370
compilato senza errori, e semplicemente non

06:00.370 --> 06:03.160
viene stampato nulla sui privilegi a causa di questo

06:03.160 --> 06:05.723
controllo if che abbiamo lì dentro.

06:07.650 --> 06:09.800
Quando si lavora con le classi,

06:09.800 --> 06:13.070
si può usare anche un altro tipo di protezione di

06:13.070 --> 06:16.520
tipo, che è la protezione di tipo instanceof.

06:16.520 --> 06:21.460
Supponiamo di avere una classe, Car, che ha un metodo di guida

06:21.460 --> 06:23.800
in cui dice semplicemente

06:23.800 --> 06:26.523
console. e abbiamo un'altra

06:28.480 --> 06:31.750
classe, Truck, che ha anch'essa un metodo

06:31.750 --> 06:34.623
di guida, o forse si dice Guidare un

06:35.840 --> 06:38.280
camion, ma dobbiamo dire il nome

06:38.280 --> 06:40.250
del metodo.

06:40.250 --> 06:43.980
E abbiamo anche un metodo loadCargo, dove abbiamo

06:43.980 --> 06:46.570
un importo, che è un numero, e poi qui

06:46.570 --> 06:49.040
ho solo un po' di codice fittizio

06:49.040 --> 06:53.570
in cui dico: "Caricare il carico più l'importo". Qualcosa del genere, oops, quantità, qualcosa del genere.

06:53.570 --> 06:57.323
Ora abbiamo due classi che, ovviamente, hanno una certa

06:58.170 --> 06:59.320
somiglianza, il metodo

06:59.320 --> 07:02.090
di guida, ma anche una differenza.

07:02.090 --> 07:03.890
Ora, ancora una volta,

07:03.890 --> 07:08.200
possiamo creare un tipo di unione qui, Vehicle, che è un'auto

07:08.200 --> 07:13.030
o un camion, e ora, diciamo, creiamo un nuovo veicolo, v1, che

07:13.030 --> 07:18.030
è una nuova auto, e un altro, v2, che è un nuovo camion.

07:18.050 --> 07:21.873
Ora ho una funzione, useVehicle, che si aspetta di

07:23.890 --> 07:26.443
ottenere un veicolo, che dovrebbe

07:27.700 --> 07:29.780
essere di tipo vehicle, quindi

07:29.780 --> 07:31.350
di tipo union.

07:31.350 --> 07:34.203
Quindi abbiamo un veicolo e ora, diciamo, il nostro obiettivo

07:35.420 --> 07:37.490
è quello di fare tutto ciò che possiamo fare

07:37.490 --> 07:40.040
con i veicoli: guidare e caricare un carico.

07:40.040 --> 07:45.420
Quindi, ovviamente, possiamo chiamare il veicolo. perché esiste sempre, ma per il veicolo.

07:45.420 --> 07:45.420
loadCargo,

07:45.420 --> 07:50.010
abbiamo un problema perché solo un camion lo ha.

07:50.010 --> 07:52.720
Un'auto non ce l'ha, quindi non funziona.

07:52.720 --> 07:56.440
Ora possiamo, ovviamente, verificare se loadCargo è

07:56.440 --> 07:59.513
nel veicolo e, in tal caso, possiamo usarlo.

08:00.760 --> 08:05.760
Almeno se correggo questo errore di battitura.

08:06.430 --> 08:09.480
Quindi lo salviamo e poi chiamiamo useVehicle

08:09.480 --> 08:13.230
e passiamo v1, quindi lo richiamiamo di nuovo con v2 e

08:13.230 --> 08:17.400
salviamo tutto questo, viene compilato e funziona.

08:17.400 --> 08:21.680
Questo è un modo per farlo.

08:21.680 --> 08:23.340
Un modo alternativo, che potrebbe

08:23.340 --> 08:26.580
essere un po' più elegante perché elimina anche il rischio

08:26.580 --> 08:28.600
di sbagliare a digitare questa stringa

08:28.600 --> 08:31.920
di proprietà, è quello di usare instanceof.

08:31.920 --> 08:34.080
Possiamo verificare se il veicolo è un'istanza di camion.

08:34.080 --> 08:39.080
Se è così, sappiamo che avrà un metodo loadCargo.

08:39.360 --> 08:42.510
L'instanceof è un normale operatore integrato

08:42.510 --> 08:45.230
in JavaScript, quindi non si tratta

08:45.230 --> 08:47.430
di codice TypeScript.

08:47.430 --> 08:49.280
Proprio come typeof, fa parte di

08:49.280 --> 08:52.250
JavaScript e viene eseguito in fase di esecuzione.

08:52.250 --> 08:54.290
JavaScript non conosce il tipo Truck,

08:54.290 --> 08:56.780
ma conosce le funzioni del costruttore e le classi

08:56.780 --> 08:59.330
alla fine vengono tradotte in funzioni del costruttore

08:59.330 --> 09:01.490
e TypeScript è in grado di scoprire se il

09:01.490 --> 09:03.400
veicolo è stato creato in base alla

09:03.400 --> 09:06.580
funzione del costruttore Truck.

09:06.580 --> 09:10.290
Quindi, poiché le classi sono compilate in qualcosa che

09:10.290 --> 09:11.970
JavaScript capisce, le funzioni

09:11.970 --> 09:15.450
del costruttore, è in grado di usarle.

09:15.450 --> 09:17.210
Se usassimo un'interfaccia invece

09:17.210 --> 09:20.390
di una classe e, quindi, ovviamente, non potremmo avere l'implementazione

09:20.390 --> 09:21.223
qui, ma lo faremo

09:21.223 --> 09:22.950
quando creeremo un oggetto con la notazione

09:22.950 --> 09:25.130
letterale dell'oggetto, allora non potremmo

09:25.130 --> 09:27.300
usare instanceof perché le interfacce, come

09:27.300 --> 09:30.940
avete imparato, non sono compilate in alcun codice JavaScript e, quindi,

09:30.940 --> 09:34.370
non possiamo usarle a runtime.

09:34.370 --> 09:37.160
Per le classi possiamo farlo perché JavaScript

09:37.160 --> 09:40.010
supporta le classi e le funzioni costruttore e, con

09:40.010 --> 09:42.290
instanceof, è possibile scoprire se un

09:42.290 --> 09:44.500
oggetto è basato su quella classe.

09:44.500 --> 09:47.660
Se sappiamo se lo è, allora avremo una funzione loadCargo.

09:47.660 --> 09:51.850
Si tratta quindi di guardie di tipo.

09:51.850 --> 09:53.480
Alla fine, type guards

09:53.480 --> 09:55.890
è solo un termine che descrive l'idea

09:55.890 --> 09:59.470
o l'approccio di controllare se una certa proprietà

09:59.470 --> 10:02.980
o metodo esiste prima di provare a usarlo, o se si

10:02.980 --> 10:06.310
può fare qualcosa con il tipo prima di provare

10:06.310 --> 10:08.470
a usarlo.

10:08.470 --> 10:10.220
Per gli oggetti, questo può

10:10.220 --> 10:15.113
essere fatto con instanceof o con in, per gli altri tipi, si può usare

10:16.140 --> 10:19.780
typeof e, quindi, ora si ha tutta la flessibilità necessaria

10:19.780 --> 10:22.280
per usare i tipi union e scrivere codice

10:22.280 --> 10:25.090
che faccia una cosa o l'altra in base al tipo

10:25.090 --> 10:29.050
esatto che si ottiene a runtime.
