WEBVTT

00:02.090 --> 00:05.740
E questo è tutto per le interfacce e le classi.

00:05.740 --> 00:08.190
In questo modulo abbiamo dato uno sguardo dettagliato alle classi e

00:08.190 --> 00:09.630
a ciò che possiamo fare al loro interno.

00:09.630 --> 00:11.390
Le classi e TypeScript, alla

00:11.390 --> 00:14.130
fine, si basano sulle classi per JavaScript,

00:14.130 --> 00:17.180
che ho già riassunto un po' prima in questo

00:17.180 --> 00:18.720
modulo.

00:18.720 --> 00:20.710
Le interfacce sono una cosa diversa.

00:20.710 --> 00:22.600
Esistono solo in TypeScript.

00:22.600 --> 00:24.670
Sono una caratteristica puramente TypeScript,

00:24.670 --> 00:27.390
che aiuta a scrivere codice chiaro, chiaramente strutturato

00:27.390 --> 00:29.450
e molto esplicito.

00:29.450 --> 00:33.010
Possono aiutare a forzare le classi ad avere certe caratteristiche

00:33.010 --> 00:36.810
o gli oggetti in generale ad avere una certa struttura.

00:36.810 --> 00:39.860
Possono essere utilizzati come tipo di funzione, come avete imparato.

00:39.860 --> 00:42.490
Consentono proprietà opzionali e quindi

00:42.490 --> 00:45.200
metodi opzionali, se si aggiunge un punto

00:45.200 --> 00:48.290
interrogativo dopo il nome del metodo.

00:48.290 --> 00:50.190
Quindi è qualcosa che si può usare.

00:50.190 --> 00:53.210
E, come si è appena visto, quando vengono compilate dopo

00:53.210 --> 00:55.870
aver svolto il loro ruolo di consentire a TypeScript

00:55.870 --> 00:57.680
di controllare il codice, non viene

00:57.680 --> 01:00.410
omesso nulla per queste interfacce.

01:00.410 --> 01:02.300
Il codice viene semplicemente scaricato.

01:02.300 --> 01:05.080
Le interfacce, tuttavia, sono una funzione potente

01:05.080 --> 01:07.420
per costringere le classi o gli oggetti

01:07.420 --> 01:09.140
ad avere una certa struttura

01:09.140 --> 01:12.400
e per descrivere chiaramente la propria idea di come un

01:12.400 --> 01:14.810
oggetto dovrebbe apparire.

01:14.810 --> 01:18.650
Ora, come si è appreso, è possibile sostituirli con tipi

01:18.650 --> 01:21.120
personalizzati, se lo si desidera.

01:21.120 --> 01:23.580
È anche possibile implementare tipi personalizzati,

01:23.580 --> 01:27.700
ma è semplicemente più comune usare un'interfaccia per questo, usare un'interfaccia

01:27.700 --> 01:32.180
se si vuole descrivere un oggetto piuttosto che implementarlo.

01:32.180 --> 01:33.980
Tutto questo per ragioni storiche,

01:33.980 --> 01:36.490
perché nei primi tempi di TypeScript, i tipi personalizzati

01:36.490 --> 01:38.980
non potevano essere implementati o usati come

01:38.980 --> 01:40.710
interfacce.

01:40.710 --> 01:42.610
Ora c'è una maggiore flessibilità, ma

01:42.610 --> 01:45.150
è ancora consigliabile scegliere le interfacce se

01:45.150 --> 01:46.420
si lavora con gli oggetti e

01:46.420 --> 01:48.680
se si vuole descrivere la loro struttura.

01:48.680 --> 01:50.620
Le vedremo anche nel corso di questo

01:50.620 --> 01:51.883
corso, più e più volte.
