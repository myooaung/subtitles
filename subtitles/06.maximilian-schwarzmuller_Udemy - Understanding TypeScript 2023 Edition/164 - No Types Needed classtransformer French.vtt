WEBVTT

00:02.270 --> 00:04.040
Instructeur : Nous avons donc jeté un coup

00:04.040 --> 00:05.900
d'œil à Lodash, une bibliothèque tierce qui

00:05.900 --> 00:08.270
est construite avec JavaScript pour JavaScript.

00:08.270 --> 00:11.730
Vous trouverez également certaines bibliothèques tierces qui adoptent

00:11.730 --> 00:13.287
réellement le script de type et

00:13.287 --> 00:16.480
ses fonctionnalités et vous offrent une toute nouvelle façon

00:16.480 --> 00:18.360
d'écrire du code qui fonctionne parce

00:18.360 --> 00:21.230
que vous travaillez avec le script de type.

00:21.230 --> 00:24.950
Un exemple est le transformateur de classe, un exemple encore meilleur est

00:24.950 --> 00:28.067
le validateur de classe ; nous allons examiner les deux ici.

00:28.067 --> 00:31.360
Mais commençons par le transformateur de classe.

00:31.360 --> 00:35.870
Disons que dans notre projet ici, j'ai un modèle, un modèle de données,

00:35.870 --> 00:38.150
appelons-le "produit".

00:38.150 --> 00:41.170
Maintenant, je vais le nommer produit. modèle. ts mais vous pouvez

00:41.170 --> 00:43.820
nommer ce fichier comme vous le souhaitez.

00:43.820 --> 00:48.820
Mon idée est que dans ce fichier, je définisse une classe pour un produit.

00:49.420 --> 00:52.180
Je décris donc à quoi doit ressembler un produit.

00:52.180 --> 00:55.550
Par exemple, il a un titre qui est une chaîne de caractères

00:55.550 --> 00:59.070
et un prix qui est un nombre, puis j'ajoute une fonction de construction

00:59.070 --> 01:02.120
où les deux peuvent être initialisés.

01:02.120 --> 01:07.120
Donc la chaîne, ajoutez le prix et ensuite j'ai dit que ce titre est égal

01:07.210 --> 01:09.360
à 't' et ce prix est égal à 'p'.

01:09.360 --> 01:10.810
Et bien sûr, nous aurions pu utiliser

01:10.810 --> 01:12.980
l'initialisation raccourcie où nous n'utilisons

01:12.980 --> 01:14.423
que le constructeur.

01:16.150 --> 01:20.400
Ensuite, disons que nous avons toujours une méthode,

01:20.400 --> 01:25.400
get information, où je renvoie un tableau, disons, où le premier

01:25.950 --> 01:30.850
élément est le titre et le deuxième élément est en fait une chaîne

01:30.850 --> 01:35.770
où j'ai le signe dollars et ensuite injecté dans cette chaîne,

01:35.770 --> 01:37.833
ce prix.

01:39.030 --> 01:43.030
Donc un modèle très simple ici, une classe très simple.

01:43.030 --> 01:45.940
Et maintenant, nous pouvons bien sûr utiliser cette classe, si vous

01:45.940 --> 01:49.590
le souhaitez, dans l'application. ts donc là, je vais me débarrasser de Lodash

01:49.590 --> 01:54.590
et importer le produit à partir de . /produit. Maintenant pour cela vous devez

01:56.200 --> 01:58.920
vous assurer que dans le modèle de produit vous exportez

01:58.920 --> 02:01.010
réellement cette classe sinon vous

02:01.010 --> 02:03.860
ne pouvez pas l'importer et ici nous devons exporter

02:03.860 --> 02:05.800
le produit comme ceci parce que j'utilise

02:05.800 --> 02:07.890
une exportation nommée ici en ajoutant

02:07.890 --> 02:11.950
le mot clé export juste devant la classe.

02:11.950 --> 02:16.497
Donc maintenant ici bien sûr nous pouvons créer un nouveau

02:18.150 --> 02:23.150
produit, un livre qui coûte 12. 99 et ensuite je console log p1 obtenir des

02:24.080 --> 02:28.190
informations et nous devrions effectivement log ce tableau.

02:28.190 --> 02:31.390
Donc, si nous exécutons maintenant npm start ici, notre

02:31.390 --> 02:34.250
pack web dev démarre et nous devrions voir ce joli

02:34.250 --> 02:37.340
tableau avec des informations sur ce livre.

02:37.340 --> 02:39.463
Donc si je recharge ici, c'est là.

02:40.630 --> 02:43.170
Maintenant, ce n'est pas trop fantaisiste bien sûr, cela

02:43.170 --> 02:44.930
fonctionne, mais ce n'est pas nouveau.

02:44.930 --> 02:47.270
Un scénario courant dans les grandes

02:47.270 --> 02:49.610
applications est que vous téléchargez

02:49.610 --> 02:52.150
des données, disons d'un serveur, vous récupérez

02:52.150 --> 02:54.490
des données d'un serveur dorsal et ce

02:54.490 --> 02:58.370
serveur vous renvoie des données json que vous passez et qui peuvent

02:58.370 --> 03:01.560
être une liste de produits.

03:01.560 --> 03:05.520
Ici, nous pouvons donc avoir des produits que nous obtenons du serveur et pour lesquels

03:05.520 --> 03:10.520
nous avons un titre, un tapis et un prix, 29. 99 et nous avons aussi

03:13.047 --> 03:18.047
ce livre, donc le titre, le livre et le

03:18.120 --> 03:22.830
prix est de 10. 99, disons.

03:22.830 --> 03:25.310
Il s'agit donc d'un tableau de données très simple

03:25.310 --> 03:27.730
que nous récupérons ensuite à l'arrière.

03:27.730 --> 03:30.590
Ce sont bien sûr des objets JavaScript, mais ce ne

03:30.590 --> 03:33.730
sont pas des instances de notre modèle de produit.

03:33.730 --> 03:37.220
Et c'est un scénario typique où vous obtenez des données sous forme de json,

03:37.220 --> 03:40.990
il n'y a pas de données attachées, comme par exemple à quelle fonction de constructeur

03:40.990 --> 03:42.850
appartient votre code frontal.

03:42.850 --> 03:46.770
Votre serveur le sait et json est également un format qui ne transmet

03:46.770 --> 03:51.230
que des données de base, vous n'avez pas de métadonnées riches pour les

03:51.230 --> 03:53.540
objets qui y sont attachés.

03:53.540 --> 03:56.300
Ou du moins, vous devrez le faire manuellement.

03:56.300 --> 04:00.120
Donc, en d'autres termes, les produits que nous obtenons ici sont

04:00.120 --> 04:03.310
des objets qui n'ont pas de méthode get information.

04:03.310 --> 04:08.230
Traditionnellement, si vous voulez maintenant convertir ces données

04:08.230 --> 04:12.680
en instances de votre modèle, vous devez le faire manuellement.

04:12.680 --> 04:17.680
Vous pouvez avoir vos produits chargés qui, disons, utilisent des produits,

04:19.260 --> 04:22.770
appellent la méthode map et pour chaque produit dans ce

04:22.770 --> 04:25.680
tableau, nous retournons un nouveau produit

04:25.680 --> 04:30.680
pour la production. titre et prod. et ensuite, nous aurions un

04:34.330 --> 04:36.660
tableau rempli d'instances de fonctions

04:36.660 --> 04:40.230
de construction de produits réels et nous pourrions alors

04:40.230 --> 04:43.163
boucler à travers cela, charger les produits

04:44.330 --> 04:47.900
et ensuite, dans cette console, par exemple, enregistrer

04:47.900 --> 04:51.083
prod. obtenir des informations.

04:52.150 --> 04:56.010
C'est ainsi que nous pouvons transformer manuellement un tableau

04:56.010 --> 05:00.070
ou un seul objet JavaScript sans nom Vanilla en une instance d'une

05:00.070 --> 05:02.880
fonction constructrice spécifique et ainsi

05:02.880 --> 05:05.000
obtenir ce résultat.

05:05.000 --> 05:07.220
Or, faire cela manuellement est fastidieux.

05:07.220 --> 05:09.590
C'est un tas d'étapes supplémentaires ici,

05:09.590 --> 05:12.710
ce n'est qu'une simple transformation bien sûr.

05:12.710 --> 05:16.690
C'est là que le paquet de transformateurs de classe peut nous aider.

05:16.690 --> 05:19.330
Il rend cela très, très simple.

05:19.330 --> 05:22.390
Là, nous définissons également une classe dans le

05:22.390 --> 05:25.010
type de script, dans notre cas ici, alors nous

05:25.010 --> 05:29.340
pourrions obtenir des données, disons d'un serveur et alors nous pouvons

05:29.340 --> 05:32.430
appeler une simple méthode de commodité et elle convertira

05:32.430 --> 05:36.893
automatiquement nos données dans les bons modèles.

05:38.100 --> 05:40.030
Maintenant pour cela, exécutons

05:40.030 --> 05:44.840
d'abord un nmp install class transformer--save, comme ceci et une fois

05:45.730 --> 05:47.820
que c'est terminé exécutons npm

05:47.820 --> 05:50.350
install reflect-metadata--save Un

05:51.451 --> 05:54.470
paquet, ce paquet à la fin dépend de.

05:54.470 --> 05:57.460
Importons-le également et, comme il est également

05:57.460 --> 06:02.460
indiqué dans les instructions de configuration, importons les métadonnées

06:02.890 --> 06:07.680
de réflexion dans les fichiers d'entrée de l'itinéraire, dans mon cas ici

06:07.680 --> 06:11.410
dans l'application. ts j'importe cette bibliothèque tierce

06:11.410 --> 06:14.970
que nous venons d'installer comme une dépendance de notre bibliothèque.

06:14.970 --> 06:17.210
Maintenant, il n'y a pas d'étapes de js et donc nous

06:17.210 --> 06:18.610
pouvons sauter celle-ci.

06:18.610 --> 06:20.180
Dans le navigateur, nous devons

06:20.180 --> 06:24.780
toujours installer les mêmes paquets, et l'ajout de cette importation ici est très

06:24.780 --> 06:26.880
bien parce que nous utilisons le pack web

06:26.880 --> 06:30.090
et donc maintenant nous sommes prêts à partir.

06:30.090 --> 06:35.090
Et maintenant, nous pouvons importer quelque chose du transformateur de classe

06:36.290 --> 06:40.210
et ce quelque chose est la méthode "plain to class".

06:40.210 --> 06:42.630
Ce paquet dispose également de quelques autres méthodes.

06:42.630 --> 06:45.200
Vous pouvez en apprendre davantage à leur sujet ici dans les documents officiels.

06:45.200 --> 06:49.060
Mais "plain to class" est la méthode principale.

06:49.060 --> 06:54.060
Vous pouvez l'utiliser ici pour définir vos produits chargés par exemple.

06:55.150 --> 06:58.230
Au lieu de le faire manuellement comme nous l'avons fait auparavant,

06:58.230 --> 07:01.480
nous pouvons définir des produits chargés égaux à plain to class

07:01.480 --> 07:03.760
et lui passer deux arguments ici.

07:03.760 --> 07:08.070
Le premier argument est la classe vers laquelle nous voulons le convertir.

07:08.070 --> 07:10.190
Dans mon cas ici, le produit.

07:10.190 --> 07:12.700
Et je ne l'instancie pas ou ne l'appelle

07:12.700 --> 07:15.560
pas, je pointe juste sur cette classe.

07:15.560 --> 07:19.460
Le second argument est la donnée que nous voulons transformer.

07:19.460 --> 07:23.520
Donc, dans mon cas ici, ce sont des produits.

07:23.520 --> 07:25.840
Et maintenant, ce que ce paquet va faire,

07:25.840 --> 07:28.100
c'est qu'il va parcourir ce tableau

07:28.100 --> 07:31.034
et transformer chaque objet JavaScript Vanilla

07:31.034 --> 07:34.090
en une instance de cette classe.

07:34.090 --> 07:37.830
Donc, si nous sauvegardons maintenant et exécutons à nouveau npm start,

07:37.830 --> 07:40.330
la page web qui démarre le serveur redémarre et

07:40.330 --> 07:43.270
devrait construire ce projet sans erreur.

07:43.270 --> 07:46.540
Si je recharge la page, j'obtiens le même résultat que précédemment,

07:46.540 --> 07:49.530
mais bien sûr avec moins de code de notre côté car nous

07:49.530 --> 07:51.870
utilisons ce paquet.

07:51.870 --> 07:53.403
Et ce qui est étonnant avec ce

07:53.403 --> 07:57.070
paquet, c'est qu'il fonctionne si bien ici parce qu'il se construit

07:57.070 --> 08:01.230
sur le script de type et utilise le script de type et utilise le fait que nous

08:01.230 --> 08:04.280
avons une classe là où nous pouvons pointer.

08:04.280 --> 08:08.730
Mais pour être également honnête, ce paquet fonctionne particulièrement bien avec le type

08:08.730 --> 08:10.900
script mais il n'utilise pas une fonctionnalité

08:10.900 --> 08:12.600
spécifique au type script.

08:12.600 --> 08:16.630
Les classes par exemple existent aussi dans Vanilla JavaScript.

08:16.630 --> 08:20.170
Ainsi, bien qu'il ait été développé principalement pour le script

08:20.170 --> 08:23.610
type, il fonctionne également avec Vanilla JavaScript.

08:23.610 --> 08:26.633
Mais ce ne sera pas le cas pour le prochain paquet.
