WEBVTT

00:02.100 --> 00:07.040
教师：要理解类, 让我们来理解面向对象编程｡

00:07.040 --> 00:12.560
现在, 根据你的知识水平, 如果你使用现代JavaScript,

00:12.560 --> 00:22.270
或者其他一些编程语言, 你可能知道什么是类, 什么是面向OOP对象的编程｡

00:22.270 --> 00:24.570
所以你们也可以跳过这节课,

00:24.570 --> 00:27.720
直接跳到我们写代码的部分｡

00:27.720 --> 00:29.330
否则一定要和我在一起,

00:29.330 --> 00:32.200
因为理解这一点很重要｡

00:32.200 --> 00:35.240
面向对象编程和类背后的思想非常重要,

00:35.240 --> 00:43.110
正如你所看到的, 就是你在代码中处理现实生活中的实体｡

00:43.110 --> 00:47.370
这样, 您就可以在代码中使用尽可能类似于现实生活中对象的对象,

00:47.370 --> 00:56.250
至少可以使作为开发人员的您更容易地对代码进行推理｡

00:56.250 --> 01:01.270
例如, 我们可能正在建立一个在线商店, 在那里我们可能有一个产品列表｡

01:01.270 --> 01:08.140
因此, 我们可能需要使用产品列表对象, 它包含管理产品列表所需的一切｡

01:08.140 --> 01:13.370
将产品添加到销售线索产品（列表本身）的方法｡

01:13.370 --> 01:18.360
例如, 这可能是一个负责呈现产品列表并对其进行管理的对象,

01:18.360 --> 01:22.840
这些产品是从服务或数据库中获取的｡

01:22.840 --> 01:25.530
因此, 该产品包含所有呈现､

01:25.530 --> 01:27.260
获取和管理逻辑｡

01:27.260 --> 01:29.420
这就是产品列表｡ 

01:29.420 --> 01:32.510
在我们的计划到网站我们正在建设,

01:32.510 --> 01:36.000
我们可能还需要与个别产品虽然工作｡

01:36.000 --> 01:40.960
因此我们可能也想要一个对象或多个对象;每个产品一个,

01:40.960 --> 01:43.930
负责管理单个产品｡

01:43.930 --> 01:49.830
它可能保存并呈现产品的详细信息, 可能允许我们将其添加到购物车中,

01:49.830 --> 01:51.260
诸如此类｡

01:51.260 --> 01:58.740
因此, 当我们要将用户界面绘制到屏幕上时, 我们希望通过JavaScript和TypeScript进行管理,

01:58.740 --> 02:07.760
然后我们可以使用产品列表和产品对象来实现这一点, 产品对象包含用于管理底层数据以及在屏幕上呈现内容的逻辑｡

02:07.760 --> 02:11.940
当然, 这两个物体是有联系的｡

02:11.940 --> 02:14.790
我们的屏幕上可能还有一个购物车对象,

02:14.790 --> 02:18.040
它负责呈现和管理购物卡｡

02:18.040 --> 02:20.380
当然, 它也与产品有关｡ 

02:20.380 --> 02:22.930
因此, 它包含了呈现购物卡､

02:22.930 --> 02:28.073
下订单以及与服务器通信等所需的所有逻辑｡

02:28.073 --> 02:33.010
因此, 这将是我们思考我们正在构建的应用程序的一种方式｡

02:33.010 --> 02:37.670
我们如何把它分成对我们人类有意义的逻辑碎片｡

02:37.670 --> 02:40.320
在TypeScript和JavaScript的代码中,

02:40.320 --> 02:42.920
在大多数现代编程语言中, 这是积极支持的,

02:42.920 --> 02:50.640
因为我们有更复杂的数据结构, 保存属性和方法的对象｡

02:50.640 --> 02:53.340
当然, JavaScript中也有｡ 

02:53.340 --> 02:57.310
但我们也可能有课程来帮助我们｡ 

02:57.310 --> 02:59.100
那么, 课程背后的理念是什么呢？

02:59.100 --> 03:00.740
什么是实例？

03:00.740 --> 03:04.690
当我们获得这些对象并遵循这种面向对象的方法时,

03:04.690 --> 03:13.750
我们可以考虑将我们的应用程序或应用程序逻辑拆分为管理部分逻辑的对象｡

03:13.750 --> 03:19.340
现在我们来看看使用这些对象的概念, 当然JavaScript中确实存在这些对象,

03:19.340 --> 03:23.910
我们可以使用对象作为类的概念｡

03:23.910 --> 03:27.470
对象是我们在代码中使用的具体事物｡ 

03:27.470 --> 03:30.380
我们用来存储数据的数据结构,

03:30.380 --> 03:33.450
用来存储执行方法的方法｡

03:33.450 --> 03:36.570
类是对象的蓝图｡ 

03:36.570 --> 03:40.880
类允许我们定义对象的外观;它们应该保存哪些数据,

03:40.880 --> 03:42.230
应该有哪些方法,

03:42.230 --> 03:48.240
这样我们就可以很容易地基于这些类构建对象｡

03:48.240 --> 03:51.830
然后我们称之为类的实例｡ 

03:51.830 --> 03:56.850
所以一个对象就是一个类的实例, 如果它是基于这样一个类的话,

03:56.850 --> 03:59.900
这样我们就可以快速复制多个对象, 这些对象有相同的结构,

03:59.900 --> 04:04.090
相同的方法, 基于相同的类｡

04:04.090 --> 04:07.280
所以类帮助我们定义对象应该是什么样子的,

04:07.280 --> 04:10.170
它们有哪些属性和方法等等｡

04:10.170 --> 04:14.920
因此, 类的存在是为了加速对象的创建｡ 

04:14.920 --> 04:20.070
它只是使用您已经知道的对象文字表示法的一种替代方法｡

04:20.070 --> 04:21.330
他们只是让它更容易｡ 

04:21.330 --> 04:28.030
类只是使创建多个对象变得更容易, 这些对象通常具有相同的结构和相同的方法,

04:28.030 --> 04:32.780
并且可能只是在存储在其中的确切数据细节上有所不同｡

04:32.780 --> 04:36.670
假设我们要用对象表示多个人｡

04:36.670 --> 04:39.330
每个人可能有一个名字和一个年龄,

04:39.330 --> 04:40.830
价值观会有所不同,

04:40.830 --> 04:43.310
但总体结构是一样的｡

04:43.310 --> 04:44.500
这就是理论｡ 

04:44.500 --> 04:46.113
让我们看看它在实践中｡ 
