WEBVTT

00:02.170 --> 00:04.760
教师：现在我们有了一个正确配置的项目,

00:04.760 --> 00:10.500
让我们更深入地了解如何调试项目或如何拥有一个良好的开发流程｡

00:10.500 --> 00:14.575
在本课程开始时, 我将向您展示我的基本IDE设置｡

00:14.575 --> 00:17.750
一定要确保你安装了正确的扩展｡ 

00:17.750 --> 00:26.410
对于TypeScript, 它可以归结为ESLint, 它可以帮助您编写TypeScript代码｡

00:26.410 --> 00:33.900
因此, 在提高代码质量时, 您可能需要额外的配置才能使ESLint发挥作用｡

00:33.900 --> 00:40.818
它可以帮助你在更高级的项目仍然比这更有趣, 你想真正使用Prettier自动格式化你的代码,

00:40.818 --> 00:45.770
并有一个很好的格式化代码, 你可能想给调试器的Chrome一试,

00:45.770 --> 00:49.870
因为它允许你调试你的TypeScript文件,

00:49.870 --> 00:59.440
甚至从内部VS代码通过Chrome, 但不使用Chrome开发工具｡

00:59.440 --> 01:02.653
当然, 你可以像你学过的那样使用它们｡

01:02.653 --> 01:05.154
如果你在这里启用了sourceMaps,

01:05.154 --> 01:10.429
当然你可以一直这样做, 你也可以在那里得到这些翻译的文件, 这真的很好｡

01:10.429 --> 01:14.170
但是您也可以使用VS Code｡ 

01:14.170 --> 01:15.960
你可以在这里放置断点,

01:15.960 --> 01:17.340
比如说在clickHandler中,

01:17.340 --> 01:19.842
现在要通过VS代码在这里启动你的文件,

01:19.842 --> 01:30.950
你还需要启用sourceMaps, 但是我们仍然可以使用VS代码而不是浏览器开发工具｡

01:30.950 --> 01:34.570
因此, 启用sourceMaps, 放置断点,

01:34.570 --> 01:38.930
然后转到“调试”､ “开始调试”｡

01:38.930 --> 01:40.320
第一次运行时, 它会询问您环境,

01:40.320 --> 01:42.170
安装了Chrome调试器扩展后,

01:42.170 --> 01:47.850
您应该能够选择Chrome｡

01:47.850 --> 01:49.960
它现在将去一个laucnh｡  json文件,

01:49.960 --> 01:56.740
您可以在其中配置它应该如何启动, 并且您应该将它指向localhost：3000,

01:56.740 --> 01:59.330
因为这是我们的开发服务器运行的位置,

01:59.330 --> 02:04.220
当然还有进程, 因此npm启动进程应该启动并运行｡

02:04.220 --> 02:06.910
要指向localhost：3000并将其作为webRoot,

02:06.910 --> 02:13.780
您可以在此处保留该占位符, 这意味着假定此项目文件夹是您的文件的主机（情况就是这样）, 现在编译您的代码,

02:13.780 --> 02:25.290
以便在将sourceMaps config设置为true后也生成sourceMaps, 以便我们现在在JavaScript代码中具有这些内容｡

02:25.290 --> 02:28.400
然后在此处添加断点并启动｡

02:28.400 --> 02:28.400
json已配置,

02:28.400 --> 02:30.400
让我们在此处运行调试｡

02:30.400 --> 02:32.140
现在开始真正的调试,

02:32.140 --> 02:34.830
它会自动打开一个新的标签｡

02:34.830 --> 02:36.020
每当您退出调试过程时,

02:36.020 --> 02:38.730
此选项卡将关闭, 或者如果关闭此选项卡,

02:38.730 --> 02:41.940
调试过程将退出｡

02:41.940 --> 02:44.590
现在, 您可以在VS代码中进入此调试视图,

02:44.590 --> 02:51.910
在此可以跟踪变量､ 观察某些表达式并查看当前调用堆栈｡ 如果您现在单击Click

02:51.910 --> 02:54.120
Me, 则应返回到编辑器,

02:54.120 --> 03:01.410
代码执行将在TypeScript文件中的断点处暂停｡ 现在, 您可以在此处遍历文件,

03:01.410 --> 03:13.320
检查此关键字或消息变量的本地值, 例如：脚本范围内的变量和可以访问全局对象的全局变量｡

03:13.320 --> 03:15.560
您可以查看某些表达式,

03:15.560 --> 03:22.690
如消息+多个感叹号和井, 然后您可以随时跟踪该窗口中的值,

03:22.690 --> 03:27.483
如果您希望这样做的话｡

03:27.483 --> 03:30.480
您可以看到当前的函数调用堆栈, 例如,

03:30.480 --> 03:34.710
在clickHandler中出现的函数调用堆栈,

03:34.710 --> 03:37.590
现在您可以使用这些控件单步执行代码以进入下一步,

03:37.590 --> 03:43.827
跳过下一个函数调用, 单步执行函数调用或单步执行当前的函数调用和调用堆栈,

03:43.827 --> 03:46.710
当然, 这里将根据该函数调用堆栈进行调整,

03:46.710 --> 04:00.290
使用该函数调用堆栈, 可以忽略这里的浏览器内容, 这样, 您就可以通过单击“播放”按钮来恢复代码执行, 并且仅在下次到达断点时暂停｡

04:00.290 --> 04:02.080
这就是调试代码的方法｡ 

04:02.080 --> 04:04.050
您可以按一下中断点来移除中断点｡ 

04:04.050 --> 04:05.910
这就是如何在内置调试工具､

04:05.910 --> 04:07.310
Chrome调试器扩展､

04:07.310 --> 04:12.450
派生配置和在TypeScript配置中设置的soureMaps的帮助下,

04:12.450 --> 04:17.743
从VS代码内部调试代码的方法｡
