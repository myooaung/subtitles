WEBVTT

00:02.270 --> 00:04.390
ผู้สอน: เอาล่ะ เพียงพอแล้วเกี่ยวกับฟังก์ชันทั่วไป

00:04.390 --> 00:08.150
เราจะใช้มันตลอดหลักสูตรนี้ทุกโครงการของหลักสูตร

00:08.150 --> 00:11.890
นั่นควรจะชัดเจนขึ้นเรื่อย ๆ ยิ่งเราทำงานกับมันมากเท่าไหร่

00:11.890 --> 00:14.823
หวังว่าความคิดทั่วไปจะชัดเจนในตอนนี้

00:15.660 --> 00:18.490
ฟังก์ชันทั่วไปไม่ใช่ทุกอย่างที่เราสามารถใช้ได้

00:18.490 --> 00:20.550
แต่เรายังมีคลาสทั่วไปด้วย ดังนั้น

00:20.550 --> 00:23.740
มาดูกันว่าเราจะสร้างคลาสทั่วไปเช่นนี้ได้อย่างไร

00:23.740 --> 00:25.170
และทำไมเราถึงทำเช่นนั้น

00:25.170 --> 00:27.760
ทำไมถึงมีประโยชน์สำหรับเรา

00:27.760 --> 00:31.950
เราสามารถสร้างชั้นเก็บข้อมูลที่นี่

00:31.950 --> 00:36.060
คลาสสมมติว่าซึ่งมีข้อมูลคุณสมบัติส่วนตัว

00:36.060 --> 00:38.850
ซึ่งในสุดจะเก็บอาร์เรย์ของข้อมูล

00:38.850 --> 00:40.940
จากนั้นจะมีวิธีการ addItem

00:40.940 --> 00:45.763
ซึ่งใช้รายการของเราและควรเพิ่มข้อมูลด้วยการพุช

00:48.570 --> 00:57.740
และเรามีเมธอด removeItem ซึ่งนำไอเท็มของเราไปไว้ที่ไหนก็ได้

00:57.740 --> 00:57.740
ข้อมูล. ประกบกัน

00:57.740 --> 01:02.910
จากนั้นเราต้องได้รับ indexOff(รายการ) ที่นี่และประกบหนึ่งองค์ประกอบ

01:02.910 --> 01:06.030
นี่คือวิธีที่เราสามารถลบองค์ประกอบออกจากอาร์เรย์

01:06.030 --> 01:13.120
และแน่นอน getItems ที่กลับมา สมมติว่าเป็นสำเนาของสิ่งนี้

01:13.120 --> 01:13.120
ข้อมูลเช่นเดียวกับตัวดำเนินการสเปรดที่คุณได้เรียนรู้

01:16.610 --> 01:17.443
ตอนนี้เราทำได้แล้ว

01:17.443 --> 01:19.450
และเราได้รับข้อผิดพลาดมากมายที่นี่

01:19.450 --> 01:20.500
เราได้รับข้อผิดพลาดมากมาย

01:20.500 --> 01:23.900
ตอนนี้หนึ่งเนื่องจากชื่อ Storage เป็นชื่อที่สงวนไว้ ดังนั้นเรามาตั้งชื่อว่า

01:23.900 --> 01:25.230
Datastorage

01:25.230 --> 01:26.620
เป็นเรื่องง่ายที่จะกำจัด

01:26.620 --> 01:27.920
ตอนนี้เรายังได้รับข้อผิดพลาดที่นี่

01:27.920 --> 01:30.880
เนื่องจากเราไม่ได้พูดอะไรเกี่ยวกับประเภทข้อมูลที่เรากำลังจัดเก็บ

01:30.880 --> 01:32.960
และรายการประเภทใดที่มีอยู่ที่นี่

01:32.960 --> 01:35.870
และนั่นคือจุดที่เราสามารถเปลี่ยนสิ่งนี้ให้เป็นคลาสทั่วไปได้

01:35.870 --> 01:38.860
เพราะคุณอาจไม่สนใจเกี่ยวกับประเภทของข้อมูล

01:38.860 --> 01:40.880
เราต้องการให้แน่ใจว่าข้อมูลนั้นเป็นข้อมูลที่เหมือนกัน

01:40.880 --> 01:42.410
ดังนั้นมันจึงเป็นเพียงสตริง หรือตัวเลข

01:42.410 --> 01:44.830
หรือเพียงแค่อ็อบเจกต์

01:44.830 --> 01:47.550
แต่นอกเหนือจากนั้น ฉันไม่สนใจมัน

01:47.550 --> 01:50.820
ตรงนี้เราสามารถเปลี่ยนสิ่งนี้ให้เป็นคลาสทั่วไป

01:50.820 --> 01:53.300
โดยเพิ่มวงเล็บเหลี่ยมหลังชื่อคลาส

01:53.300 --> 01:56.330
แล้วตามด้วย T, U อะไรก็ได้ที่คุณต้องการใช้เป็นตัวระบุ

01:56.330 --> 02:00.110
และเพิ่มที่นี่เป็นประเภททั่วไป

02:00.110 --> 02:01.083
ตอนนี้เราสามารถพูดได้ว่า

02:01.083 --> 02:07.413
นี่คืออาร์เรย์ประเภท T ดังนั้นมันจึงเก็บข้อมูลประเภททั่วไปนั้นไว้ในนั้น

02:07.413 --> 02:09.670
ดังนั้นเราจึงเพิ่มข้อมูลดังกล่าวที่นี่

02:09.670 --> 02:12.400
และเราพยายามลบข้อมูลดังกล่าวที่นี่

02:12.400 --> 02:18.490
ดังนั้นเราจึงได้รับรายการที่ถูกต้องเพื่อส่งคืนอาร์เรย์ของประเภททั่วไป

02:18.490 --> 02:20.860
และตอนนี้เราสามารถสร้างที่เก็บข้อมูลที่แตกต่างกัน

02:20.860 --> 02:24.690
เราสามารถมี sting หรือ textStorage ของเราได้ที่นี่ โดยเรียก

02:24.690 --> 02:31.250
DataStorage ใหม่ ตั้งค่าประเภททั่วไปนั้นให้พิมพ์สตริงที่นี่

02:31.250 --> 02:33.070
และที่นี่ใน textStorage ฉันสามารถเรียก

02:33.070 --> 02:34.340
addItem ได้ และถ้าฉันพยายามเพิ่มหมายเลข

02:34.340 --> 02:37.513
ฉันได้รับข้อผิดพลาดเพราะฉันกำลังบอกว่านี่จะเป็น DataStorage

02:37.513 --> 02:40.800
ที่เก็บเฉพาะ stings

02:40.800 --> 02:45.800
ดังนั้นฉันสามารถเก็บ Max ไว้ที่นี่ และอาจจะเก็บ Manu ด้วย

02:46.830 --> 02:55.073
แล้วเรียก textStorage removeItem('Max') จากนั้นคอนโซล

02:55.073 --> 02:55.073
บันทึก. ที่เก็บข้อความ รับรายการ

02:56.520 --> 03:00.300
และทั้งหมดนี้น่าจะใช้ได้ถ้าเราบันทึกเพราะมันเป็นประเภททั่วไป

03:00.300 --> 03:03.103
และท้ายที่สุดเราก็มี Manu อยู่ในนั้น

03:04.400 --> 03:08.240
นี่จะเป็นคลาสทั่วไปง่ายๆ คลาสหนึ่งที่เราสามารถสร้างได้

03:08.240 --> 03:10.500
ทีนี้ทำไมเราถึงสร้างคลาสทั่วไปเช่นนี้?

03:10.500 --> 03:11.770
ก็อย่างที่ฉันพูด

03:11.770 --> 03:14.220
เพราะบางทีเราไม่ต้องการแค่เก็บข้อความ

03:14.220 --> 03:18.950
ฉันอาจต้องการเก็บตัวเลขบางส่วนในที่เก็บข้อมูลอื่นด้วย

03:18.950 --> 03:26.250
ดังนั้นฉันจึงสามารถสร้าง DataStorage ดังกล่าวได้ และการตั้งค่านี้เป็นตัวเลขเพื่อให้แน่ใจว่าตอนนี้เราจะเพิ่มได้เฉพาะตัวเลขในที่เก็บข้อมูลนั้นเท่านั้น

03:26.250 --> 03:30.520
แน่นอน เรายังสามารถตั้งค่าที่เก็บข้อมูลที่เราอนุญาตทั้งสองได้โดยใช้ประเภทยูเนี่ยน

03:30.520 --> 03:32.550
ดังนั้นเราจึงมีความยืดหยุ่นอย่างเต็มที่

03:32.550 --> 03:41.450
แต่เราให้ข้อมูลเพิ่มเติมกับการพิมพ์ ซึ่งทำให้เป็นทั้งคลาสที่ยืดหยุ่นและยังคงพิมพ์ได้ดี

03:41.450 --> 03:43.470
เช่นเดียวกับที่เรามีกับฟังก์ชัน

03:43.470 --> 03:46.910
รองรับประเภทที่ยืดหยุ่นและยังคงสมบูรณ์แบบ

03:46.910 --> 03:49.900
นั่นคือแนวคิดทั้งหมดที่อยู่เบื้องหลังประเภททั่วไป

03:49.900 --> 03:52.680
ตรงนี้เราสามารถทำได้กับคลาส DataStorage โดยจัดเก็บสตริง

03:52.680 --> 03:53.750
หรือจัดเก็บตัวเลข

03:53.750 --> 03:56.513
หรืออะไรก็ตามที่เราต้องการ

03:57.790 --> 04:01.300
เราจะมีปัญหาอย่างหนึ่งเกี่ยวกับคลาส dataStorage ของเรา

04:01.300 --> 04:04.880
สมมติว่าที่นี่ฉันมีที่เก็บอ็อบเจกต์ ตอนนี้ฉันสามารถสร้าง

04:04.880 --> 04:07.090
DataStorage ใหม่และพูดว่าฉันต้องการเก็บอ็อบเจกต์ในนั้น

04:07.090 --> 04:17.270
ถูกต้อง ฉันต้องการจัดเก็บอ็อบเจกต์ และแน่นอนว่าเราสามารถไปที่ที่จัดเก็บอ็อบเจกต์และเพิ่มรายการได้

04:17.300 --> 04:20.460
สมมติว่าวัตถุที่ฉันมีชื่อ Max อยู่ในนั้น

04:20.460 --> 04:22.920
มาเก็บของอีกชิ้นกันเถอะ

04:22.920 --> 04:24.760
ที่ฉันเก็บมนูไว้

04:24.760 --> 04:26.770
จากนั้น สมมติว่าเรากำลังทำบางสิ่งในรหัสของเรา

04:26.770 --> 04:29.740
และในเวลาต่อมา ฉันต้องการลบรายการ ฉันต้องการลบรายการที่มีชื่อ:

04:29.740 --> 04:34.100
'Manu' ที่นี่

04:34.100 --> 04:37.863
เห็นแล้วอยากปลอบใจ บันทึก. objStorage. รับรายการ

04:39.450 --> 04:40.550
เช่นนั้น.

04:40.550 --> 04:41.883
ถ้าเราบันทึก เราจะเห็นว่าเรามีวัตถุอยู่ในนั้น

04:42.920 --> 04:45.840
นั่นคือแม็กซ์

04:45.840 --> 04:47.470
เพื่อให้ดูดีถูกต้อง

04:47.470 --> 04:49.140
ตอนนี้มันไม่ดีจริงๆ

04:49.140 --> 04:52.490
สมมติว่าตอนนี้ฉันต้องการลบ Max ดังนั้นตอนนี้เราควรเหลือ

04:52.490 --> 04:55.740
Manu ไว้ในที่เก็บข้อมูล

04:55.740 --> 04:59.653
ดังนั้น ถ้าฉันโหลดใหม่ บ่อน้ำก็ยังคงเป็น Max

05:00.550 --> 05:03.660
ตอนนี้ปัญหาคือเรากำลังทำงานกับออบเจกต์ที่นี่ อย่างที่คุณทราบ

05:03.660 --> 05:07.350
ออบเจ็กต์ใน JavaScript เป็นประเภทการอ้างอิง

05:07.350 --> 05:11.460
ตอนนี้แนบเพื่อค้นหาแหล่งข้อมูลเพิ่มเติมซึ่งช่วยให้คุณดำน้ำในการอ้างอิง

05:11.460 --> 05:14.650
ในขณะที่ค่าดั้งเดิม ในที่นี้ฉันถือว่าคุณทราบความแตกต่างเนื่องจากเป็น

05:14.650 --> 05:16.970
JavaScript หลัก ซึ่งไม่เกี่ยวข้องกับ typescript

05:16.970 --> 05:19.060
โดยสิ้นเชิง

05:19.060 --> 05:22.300
นี่คือปัญหา วิธีสร้างคลาสของเราด้วยตรรกะนี้ในการลบและระบุข้อมูล

05:22.300 --> 05:32.200
เราไม่ได้ทำงานที่ดีจริง ๆ เมื่อเราทำงานกับค่าที่ไม่ใช่ค่าดั้งเดิม

05:32.200 --> 05:35.130
ดังนั้น เมื่อเราทำงานกับออบเจกต์หรืออาร์เรย์ เนื่องจาก

05:35.130 --> 05:37.840
indexOf ถ้าเราส่งออบเจกต์ตรงนี้ มันจะไม่ทำงาน

05:37.840 --> 05:40.910
เพราะในทางเทคนิคแล้ว นี่คือออบเจกต์ใหม่

05:40.910 --> 05:48.290
อาจมีลักษณะเช่นนี้ แต่ใช้งานไม่ได้เนื่องจากทางเทคนิคแล้วเป็นวัตถุใหม่ในหน่วยความจำและมีที่อยู่อื่น

05:48.290 --> 05:52.110
และที่นี่ JavaScript จะค้นหาที่อยู่และไม่พบโดยทั่วไป

05:52.110 --> 05:54.930
ดังนั้นสิ่งที่ทำคือลบองค์ประกอบสุดท้ายในอาร์เรย์ที่นี่

05:54.930 --> 06:01.473
เพราะสุดท้ายแล้วค่านี้จะคืนค่า -1

06:02.419 --> 06:06.070
IndexOf คืนค่า -1 แม้ว่าจะไม่พบอะไรเลยก็ตาม

06:06.070 --> 06:07.990
ซึ่งหมายความว่าจะเริ่มที่ส่วนท้ายของอาร์เรย์

06:07.990 --> 06:11.921
ซึ่งเป็นพฤติกรรมปกติของ Javascript และลบองค์ประกอบสุดท้ายของอาร์เรย์

06:11.921 --> 06:14.190
นั่นเป็นเหตุผลที่มันใช้งานได้กับมนู

06:14.190 --> 06:16.810
มันไม่ได้ผลจริง ๆ มันทำงานโดยบังเอิญ แต่ทำไมมันใช้ไม่ได้กับ

06:16.810 --> 06:19.880
Max เรามักจะลบองค์ประกอบสุดท้ายของอาร์เรย์ออกในตอนนี้

06:19.880 --> 06:23.670
เนื่องจากเราไม่สามารถระบุได้

06:23.670 --> 06:29.140
ตอนนี้ วิธีแก้ไขอย่างน้อยวิธีหนึ่งคือการตรวจสอบว่าเราพบรายการของเราหรือไม่

06:29.140 --> 06:32.260
ดังนั้นเราสามารถตรวจสอบได้ว่ารหัสนี้ที่นี่หรือไม่

06:32.260 --> 06:36.260
หากมีค่าเท่ากับ -1 ซึ่งหมายความว่าเราไม่พบมัน

06:36.260 --> 06:40.780
จากนั้นเราสามารถส่งคืนและตรวจสอบให้แน่ใจว่าเราไม่ได้ลบรายการผิดโดยไม่ได้ตั้งใจ

06:40.780 --> 06:42.900
แต่แน่นอนว่าตอนนี้เราเพิ่งแก้ไขแถบนั้น

06:42.900 --> 06:46.580
แต่เรายังไม่มีสถานะภายในที่จะทำงานกับวัตถุ

06:46.580 --> 06:51.740
วิธีเดียวที่จะทำงานกับวัตถุได้คือถ้าเราส่งวัตถุเดียวกันอีกครั้ง

06:51.740 --> 06:55.700
ตรงนี้ถ้าผมเก็บวัตถุ max ไว้ในค่าคงที่แบบนี้

06:55.700 --> 06:58.840
และในนี้ผมส่งวัตถุ max

06:58.840 --> 07:02.050
และฉันก็ทำเช่นเดียวกันที่นี่ จากนั้นฉันก็ใช้สิ่งเดียวกัน

07:02.050 --> 07:06.540
วัตถุเดียวกัน วัตถุเดียวกันในหน่วยความจำ และตอนนี้มันก็ใช้ได้แล้ว

07:06.540 --> 07:08.930
นี่จะเป็นวิธีเดียวที่จะทำให้งานนี้

07:08.930 --> 07:16.150
ดังนั้น ในที่นี้ ความคิดที่ดีกว่าคือการทำให้แน่ใจว่าวิธีนี้ใช้ได้เฉพาะกับค่าดั้งเดิมเท่านั้น

07:16.150 --> 07:20.100
ดังนั้น เราสามารถพูดได้ว่า T ขยายสตริง ตัวเลข

07:20.100 --> 07:24.010
หรืออาจจะเป็นบูลีนทั้งหมดที่บวกกัน

07:24.010 --> 07:25.990
ตอนนี้เราพูดโดยพื้นฐานแล้วว่า DataStorage

07:25.990 --> 07:27.920
ควรใช้งานได้กับประเภทเหล่านี้เท่านั้น

07:27.920 --> 07:30.470
ดังนั้นจึงไม่อนุญาตให้ใช้วัตถุอีกต่อไป

07:30.470 --> 07:32.500
นี่อาจดีกว่าที่นี่เพราะเราต้องการ

07:32.500 --> 07:40.080
DataStorage ที่พิเศษกว่านี้ ซึ่งอาจใช้งานได้กับออบเจกต์เท่านั้น ไม่ใช่กับค่าดั้งเดิม

07:40.080 --> 07:42.430
เพื่อปรับแต่งตรรกะการดึงของเราที่นี่

07:42.430 --> 07:45.880
เพื่อตรวจสอบ iD บางอย่างในรายการที่ควรลบออก

07:45.880 --> 07:46.970
วิธีการทำงานที่นี่ใช้ได้กับประเภทดั้งเดิมเท่านั้น

07:46.970 --> 07:52.320
ดังนั้นการตั้งค่าข้อจำกัดดังกล่าวจึงเป็นความคิดที่ดีอย่างแน่นอน

07:52.320 --> 07:57.253
และถ้าเราบันทึกมันไว้ หลังจากแสดงความคิดเห็น มันก็กลับมาใช้งานได้อีกแน่นอน

07:58.810 --> 08:04.310
ตอนนี้ไม่จำเป็นต้องพูด หวังว่าแน่นอนว่าคุณสามารถมียาสามัญมากกว่าหนึ่งประเภทได้ที่นี่เช่นกัน

08:04.310 --> 08:07.600
คุณไม่จำกัดเพียงประเภทเดียวเมื่อคุณทำงานกับชั้นเรียน

08:07.600 --> 08:13.080
และคุณยังสามารถมีเมธอดซึ่งมีประเภททั่วไปของตัวเองแทนที่จะเป็นคลาส

08:13.080 --> 08:18.010
คุณจึงแนะนำประเภททั่วไปใหม่ในเมธอดของคลาสได้ ถ้าคุณมีประเภททั่วไปบางประเภท

08:18.010 --> 08:19.750
ซึ่งจำเป็นสำหรับบางเมธอดเท่านั้น

08:19.750 --> 08:21.580
ไม่ใช่ในคลาสทั้งหมด

08:21.580 --> 08:23.000
ดังนั้นคุณจึงมีความยืดหยุ่นมาก

08:23.000 --> 08:25.570
คุณสามารถใช้ข้อ จำกัด ได้ทุกที่และโดยทั่วไป

08:25.570 --> 08:36.010
มีประเภททั่วไปเพื่อทำให้ชีวิตของคุณง่ายขึ้นและให้การผสมผสานที่ลงตัวของความยืดหยุ่นอย่างเต็มที่

08:36.010 --> 08:39.310
เราสามารถใช้ค่าพื้นฐานใดก็ได้ที่คุณต้องการที่นี่และพิมพ์คำว่า

08:39.310 --> 08:42.820
safety เพราะเรารู้ดีว่าอะไรถูกเก็บไว้ใน DataStorage

08:42.820 --> 08:44.710
นี้และอะไรที่ถูกเก็บไว้ใน DataStorage

08:44.710 --> 08:46.770
นี้

08:46.770 --> 08:52.283
ดังนั้นการรวมกันนี้จึงเป็นสิ่งที่ยอดเยี่ยมประเภททั่วไปมอบให้เรา
