WEBVTT

00:02.330 --> 00:04.870
Verteller: Over meer algemene types gesproken,

00:04.870 --> 00:06.970
als kleine bonus zou je kunnen zeggen,

00:06.970 --> 00:11.410
ik wil je wijzen op een paar ingebouwde types.

00:11.410 --> 00:15.740
Typescript wordt geleverd met, die generieke types gebruiken

00:15.740 --> 00:17.240
of die generieke types

00:17.240 --> 00:20.350
zijn, die ons bepaalde nutsfuncties geven.

00:20.350 --> 00:22.050
Dus een kleine bonus hier, en

00:22.050 --> 00:22.920
van tijd tot tijd

00:22.920 --> 00:25.550
kunnen deze speciale types van pas komen.

00:25.550 --> 00:26.840
In de bijlage staat een link

00:26.840 --> 00:30.680
naar de volledige documentatie van alle ingebouwde hulpprogramma's.

00:30.680 --> 00:33.810
Ik wil je een paar voorbeelden geven.

00:33.810 --> 00:36.010
Nu net als al deze type dingen, bestaan

00:36.010 --> 00:38.610
deze typen alleen in typen van de wereld en dus

00:38.610 --> 00:41.300
alleen voorafgaand aan de compilatie.

00:41.300 --> 00:43.460
Maar tijdens deze compilatiestap

00:43.460 --> 00:48.130
kunnen zij u extra typeveiligheid of extra flexibiliteit bieden.

00:48.130 --> 00:51.670
Zo is er het ingebouwde partiële type.

00:51.670 --> 00:55.580
Laten we zeggen dat we een nieuw type hebben, en je interface die we zullen

00:55.580 --> 00:59.493
vinden of een aangepast type maakt echt niet uit, CourseGoal.

01:00.660 --> 01:03.780
Het CourseGoal heeft een titel, die een string moet

01:03.780 --> 01:06.930
zijn, en laten we zeggen een beschrijving, die allemaal

01:06.930 --> 01:09.040
een string moeten zijn.

01:09.040 --> 01:14.040
Misschien hebben we ook completeUntil property, wat een Date is.

01:15.290 --> 01:17.961
Nu willen we een functie hebben, laten we

01:17.961 --> 01:21.500
zeggen, createCourseGoal, die zo'n object maakt.

01:21.500 --> 01:23.380
Natuurlijk hadden we die klasse ook kunnen maken.

01:23.380 --> 01:26.290
Maar we hebben zo'n functie omdat we in die functie

01:26.290 --> 01:28.740
misschien wat gegevens uit een database

01:28.740 --> 01:30.590
halen, of wat dan ook.

01:30.590 --> 01:32.110
Dus we hebben deze functie.

01:32.110 --> 01:33.330
En op het einde

01:33.330 --> 01:37.890
hier, wil ik mijn titel krijgen, wat een string is, ik zou

01:37.890 --> 01:42.320
mijn beschrijving kunnen krijgen, wat een string is,

01:42.320 --> 01:47.150
en ik hoop dat ik mijn datum krijg, wat een Datum is.

01:47.150 --> 01:49.680
In die functie kunnen we natuurlijk een object teruggeven,

01:49.680 --> 01:51.740
maar we hebben al deze dingen ingesteld.

01:51.740 --> 01:55.340
Dus waar we title instellen op title, description op description

01:55.340 --> 01:57.840
en completeUntil op date.

01:57.840 --> 02:00.760
We zouden dat allemaal kunnen doen en als we dan definiëren

02:00.760 --> 02:03.890
dat deze functie altijd een CourseGoal teruggeeft,

02:03.890 --> 02:07.120
hebben we een correct ingestelde functie.

02:07.120 --> 02:08.420
Laten we zeggen dat

02:08.420 --> 02:09.530
we het niet zo doen,

02:09.530 --> 02:11.623
we doen het niet in één stap.

02:12.680 --> 02:13.870
Wat ik in plaats daarvan

02:13.870 --> 02:17.340
wil doen is, ik wil beginnen met het creëren van een variabele hier, die

02:17.340 --> 02:18.700
een leeg object bevat.

02:18.700 --> 02:22.620
En dan stap voor stap, wil ik mijn titel hier toevoegen.

02:22.620 --> 02:26.420
Ik wil mijn beschrijving hier toevoegen.

02:26.420 --> 02:31.303
En ik wil mijn datum hier toevoegen.

02:33.640 --> 02:36.420
Nu krijg ik hier fouten omdat ik natuurlijk geen titel

02:36.420 --> 02:39.170
kan instellen dit is geen eigenschap van dit object.

02:39.170 --> 02:41.930
En terwijl dit werkt in vanilla JavaScript, houdt

02:41.930 --> 02:45.410
TypeScript er niet echt van om dat hier on the fly toe te voegen.

02:45.410 --> 02:47.810
Dus we zouden kunnen zeggen dat dit hier van het

02:47.810 --> 02:49.300
type CourseGoal moet zijn.

02:49.300 --> 02:51.040
Nu klaagt TypeScript hier niet

02:51.040 --> 02:53.640
over, maar over het feit dat dit een leeg object

02:53.640 --> 02:56.223
is, dat duidelijk niet past bij ons type hier.

02:57.070 --> 02:58.360
Dus uiteindelijk wil ik

02:58.360 --> 03:01.000
het terug en wil ik al deze dingen stap voor stap

03:01.000 --> 03:04.570
toevoegen, misschien omdat we extra validatie hebben voor elke

03:04.570 --> 03:07.590
stap, en daarom een om het zo toe te voegen.

03:07.590 --> 03:12.390
Hier kan het deeltype van pas komen.

03:12.390 --> 03:17.390
We zouden kunnen zeggen dat het CourseGoal hier een partieel type moet zijn, dat uiteindelijk,

03:17.580 --> 03:18.413
dankzij generieke

03:18.413 --> 03:21.600
types, een CourseGoal zal bevatten.

03:21.600 --> 03:24.200
Dit vertelt TypeScript dat dit een

03:24.200 --> 03:28.260
object is dat uiteindelijk een courseGoal wordt.

03:28.260 --> 03:32.090
Maar in eerste instantie verpakt gedeeltelijk ons eigen type,

03:32.090 --> 03:35.740
en verandert het in een type waar al deze eigenschappen optioneel

03:35.740 --> 03:36.620
zijn.

03:36.620 --> 03:39.440
Dat is wat gedeeltelijk doet een van deze ingebouwde types, waarmee

03:39.440 --> 03:40.670
Typescript wordt geleverd.

03:40.670 --> 03:44.270
Dus het verandert dit in een type, dat ook een objecttype is, waarbij alle eigenschappen

03:44.270 --> 03:45.713
optioneel zijn.

03:45.713 --> 03:49.290
Daarom kunnen we dit aanvankelijk instellen op een leeg

03:49.290 --> 03:53.030
object, en toch stap voor stap al deze dingen toevoegen.

03:53.030 --> 03:54.880
Het enige probleem is dat we dit uiteindelijk

03:54.880 --> 03:58.130
niet kunnen teruggeven, omdat het nu nog steeds van het type

03:58.130 --> 04:02.130
partiële CourseGoal is, en niet van het type CourseGoal.

04:02.130 --> 04:04.630
We kunnen dit oplossen door dit te converteren naar courseGoal

04:04.630 --> 04:07.480
met typecasting, omdat we weten dat we op dit moment alle gegevens

04:07.480 --> 04:08.990
zullen hebben toegevoegd.

04:08.990 --> 04:11.667
Het wordt dus een echt koersdoel en geen gedeeltelijk koersdoel.

04:11.667 --> 04:13.510
En natuurlijk is dit een beetje verzonnen.

04:13.510 --> 04:15.500
Maar je zou scenario's als deze

04:15.500 --> 04:18.220
kunnen hebben, waar je tijdelijk een van

04:18.220 --> 04:19.650
je objecttypes, een

04:19.650 --> 04:23.530
van je interfaces alleen optioneel wilt maken.

04:23.530 --> 04:25.540
Om ervoor te zorgen dat alle eigenschappen

04:25.540 --> 04:28.170
daarin slechts tijdelijk optioneel kunnen zijn.

04:28.170 --> 04:31.223
En met het gedeeltelijke type zou je dat kunnen doen.

04:32.370 --> 04:35.920
En nooit het ingebouwde utility type dat je hebt

04:35.920 --> 04:40.170
is het read only type dat allemaal erg nuttig kan zijn.

04:40.170 --> 04:42.623
Laten we zeggen dat we een reeks namen hebben.

04:43.460 --> 04:46.330
En daarin heb ik Max en Sports.

04:46.330 --> 04:47.420
Nu leidt TypeScript

04:47.420 --> 04:49.860
correct af dat dit een string array is.

04:49.860 --> 04:50.960
Wat kunnen we nu doen?

04:50.960 --> 04:52.690
We kunnen natuurlijk Manu erop

04:53.700 --> 04:55.400
duwen, en waarschijnlijk moet

04:55.400 --> 04:58.340
ik dit veranderen in Anna sport niet om een naam erin

04:58.340 --> 04:59.720
te hebben.

04:59.720 --> 05:00.553
Dus dit werkt.

05:00.553 --> 05:01.386
Laten we zeggen dat

05:01.386 --> 05:04.230
ik er zeker van wil zijn dat dit een vergrendelde matrix is.

05:04.230 --> 05:06.260
Meer kunnen we hier niet aan toevoegen.

05:06.260 --> 05:07.870
En we kunnen altijd meer toevoegen,

05:07.870 --> 05:11.690
maar ik wil tenminste dat Typescript tegen me schreeuwt als ik het probeer.

05:11.690 --> 05:13.730
Nou, daar kunnen we het read only

05:13.730 --> 05:18.730
type gebruiken, we kunnen dit instellen op read only string array.

05:18.930 --> 05:20.510
Daarmee vertellen we TypeScript,

05:20.510 --> 05:23.030
wel, wat we hier opslaan is een array van strings.

05:23.030 --> 05:25.830
Maar het is ook een array van strings, die alleen te lezen is.

05:25.830 --> 05:28.210
Dus als we iets proberen toe te voegen met

05:28.210 --> 05:31.600
push, of als we iets proberen te verwijderen met pop, krijgen

05:31.600 --> 05:32.760
we fouten, omdat we

05:32.760 --> 05:34.810
deze dingen niet mogen doen met deze

05:34.810 --> 05:36.320
array.

05:36.320 --> 05:38.760
En dit is overigens niet beperkt tot arrays,

05:38.760 --> 05:41.610
je kunt ook read only gebruiken op een object.

05:41.610 --> 05:43.990
Bijvoorbeeld, om de markt als alleen-lezen af

05:43.990 --> 05:46.860
te zetten, zodat u de eigenschappen niet mag wijzigen

05:46.860 --> 05:49.920
of nieuwe eigenschappen mag toevoegen aan dit object.

05:49.920 --> 05:52.240
Dus dit kan ook heel, heel handig

05:52.240 --> 05:56.510
zijn en u meer flexibiliteit geven of preciezer zijn

05:56.510 --> 05:59.490
over wat u wilt doen in uw code.

05:59.490 --> 06:01.380
Nu, dit zijn allemaal gewoon utility types

06:01.380 --> 06:03.610
die alleen bestaan in de TypeScript wereld.

06:03.610 --> 06:05.881
Dus ze zijn nergens aan verbonden.

06:05.881 --> 06:09.400
Maar tijdens het compileren geven ze je extra strengheid, of

06:09.400 --> 06:12.410
extra controles, of slaan ze bepaalde controles over,

06:12.410 --> 06:14.800
zoals wij deden met gedeeltelijke.

06:14.800 --> 06:17.170
Nu heb je meer dan alleen lezen en gedeeltelijk.

06:17.170 --> 06:19.730
En zoals ik al zei vindt u in de bijlage de documentatie

06:19.730 --> 06:22.420
van een volledige lijst van deze hulpprogramma's.

06:22.420 --> 06:25.580
In bepaalde scenario's kunnen ze echt van pas komen, en

06:25.580 --> 06:27.460
daarom wilde ik ze zeker niet voor

06:27.460 --> 06:28.350
u verbergen.

06:28.350 --> 06:30.500
Maar in plaats daarvan moet u ze kennen,

06:30.500 --> 06:34.060
zodat u ze kunt gebruiken wanneer u iets moet vergrendelen, of zoals

06:34.060 --> 06:36.980
in het geval van iets gedeeltelijk openen of met alle

06:36.980 --> 06:39.690
andere die ik hier niet heb besproken, als u een andere

06:39.690 --> 06:42.570
bewerking hebt die kan worden verbeterd met een van deze

06:42.570 --> 06:45.140
ingebouwde hulpprogramma's.

06:45.140 --> 06:47.670
En deze utility types zijn allemaal generiek,

06:47.670 --> 06:49.170
want wat ze doen is een andere

06:49.170 --> 06:52.580
waarde van een willekeurig type nemen en er iets mee

06:52.580 --> 06:54.190
doen.

06:54.190 --> 06:57.970
Ze zetten alles op optioneel, ze vergrendelen het, zonder zich te

06:57.970 --> 07:01.330
bekommeren om de vraag of dit een array of object is of een array

07:01.330 --> 07:04.430
van strings, array van getallen, enzovoort.

07:04.430 --> 07:06.000
Daarom zijn deze generiek.

07:06.000 --> 07:09.520
En samen met de bovenste ingebouwde generieken die we eerder zagen

07:09.520 --> 07:10.790
en je eigen generieken.

07:10.790 --> 07:13.780
Dit alles helpt u hopelijk weer te begrijpen

07:13.780 --> 07:16.793
waarom generieken nuttig kunnen zijn.
