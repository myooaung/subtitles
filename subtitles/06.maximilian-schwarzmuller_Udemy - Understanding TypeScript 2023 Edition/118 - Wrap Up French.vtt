WEBVTT

00:02.273 --> 00:05.100
Instructeur : Nous avons examiné un grand nombre de décorateurs,

00:05.100 --> 00:06.190
comment on travaille avec

00:06.190 --> 00:07.340
eux, comment on peut les configurer,

00:07.340 --> 00:09.940
comment on peut faire des choses avec eux, ce qu'on peut faire

00:09.940 --> 00:11.367
avec eux.

00:11.367 --> 00:15.260
Cela vous montre, je l'espère, la complexité mais aussi la puissance des décorateurs

00:15.260 --> 00:17.340
et la façon dont vous pouvez y penser, comment

00:17.340 --> 00:18.898
vous pouvez les utiliser.

00:18.898 --> 00:22.370
Vous pouvez non seulement créer vos propres décorateurs, mais

00:22.370 --> 00:24.208
il existe également un riche écosystème

00:24.208 --> 00:28.590
de paquets et de frameworks qui reposent sur les décorateurs.

00:28.590 --> 00:30.670
Par exemple, la classe validator.

00:30.670 --> 00:32.789
Si vous recherchez "ts class validator", vous

00:32.789 --> 00:35.480
trouverez un paquet qui contient essentiellement une

00:35.480 --> 00:37.960
mise en œuvre plus élaborée de notre propre logique

00:37.960 --> 00:41.680
de validation personnalisée sur laquelle nous avons travaillé.

00:41.680 --> 00:44.140
Ce paquet peut être ajouté à tout projet sur lequel vous

00:44.140 --> 00:45.960
travaillez, et vous pouvez alors simplement

00:45.960 --> 00:48.030
importer un tas de décorateurs ou de fabriques

00:48.030 --> 00:49.930
de décorateurs, comme vous pouvez le voir,

00:49.930 --> 00:51.660
puisque nous les exécutons ici.

00:51.660 --> 00:53.350
Ajoutez-les à vos propriétés,

00:53.350 --> 00:55.650
avec ou sans configuration supplémentaire,

00:55.650 --> 00:57.530
en fonction du validateur utilisé.

00:57.530 --> 00:59.163
En coulisses, le système gérera

00:59.163 --> 01:01.530
un registre, ou plutôt un objet de configuration,

01:01.530 --> 01:03.509
qui stockera la configuration de votre

01:03.509 --> 01:07.070
validateur pour les différentes propriétés de vos différentes

01:07.070 --> 01:08.950
classes.

01:08.950 --> 01:11.810
Ensuite, nous vous donnons une méthode de validation, que vous

01:11.810 --> 01:14.150
importez également du paquet, que vous pouvez exécuter

01:14.150 --> 01:16.656
et à laquelle vous passez votre objet, pour appliquer

01:16.656 --> 01:19.020
toute la logique de validation que vous avez mise en

01:19.020 --> 01:20.540
place dans la classe.

01:20.540 --> 01:22.840
Il s'agit donc de faire ce que nous venons

01:22.840 --> 01:26.000
de faire, mais avec plus de validateurs, et en faisant

01:26.000 --> 01:27.830
le gros du travail pour vous.

01:27.830 --> 01:29.170
Mais bien sûr, il est utile de comprendre

01:29.170 --> 01:30.630
comment cela fonctionne généralement,

01:30.630 --> 01:32.370
puisque nous l'avons construit nous-mêmes

01:32.370 --> 01:34.143
ici, dans une version plus naïve.

01:35.010 --> 01:36.490
Maintenant, en plus de ce paquet, bien

01:36.490 --> 01:38.370
sûr, nous avons aussi Angular, par exemple.

01:38.370 --> 01:39.541
Angular est un framework,

01:39.541 --> 01:41.502
que j'ai déjà mentionné, qui repose

01:41.502 --> 01:43.942
fortement sur les décorateurs, comme

01:43.942 --> 01:46.480
ce décorateur de composant, qui vous permet

01:46.480 --> 01:49.214
d'assigner du code HTML dynamique, qui exploite

01:49.214 --> 01:51.301
également les propriétés de vos

01:51.301 --> 01:54.720
classes, avec une syntaxe spéciale ajoutée par Angular,

01:54.720 --> 02:00.170
pour ensuite rendre un contenu dynamique à l'écran.

02:00.170 --> 02:01.780
Ainsi, Angular ne se contente pas

02:01.780 --> 02:03.360
de proposer ces décorateurs, mais

02:03.360 --> 02:06.250
les décorateurs font partie intégrante d'Angular.

02:06.250 --> 02:07.280
Et enfin, mais pas

02:07.280 --> 02:10.130
des moindres, je veux aussi vous montrer NestJS.

02:10.130 --> 02:13.190
NestJS est un cadre JavaScript côté serveur

02:13.190 --> 02:15.487
pour Node. js, qui utilise aussi

02:15.487 --> 02:20.010
fortement le langage de typecript, et qui adopte également les décorateurs.

02:20.010 --> 02:23.270
Les décorateurs y sont utilisés pour définir les contrôleurs

02:23.270 --> 02:26.730
et les routes, les méthodes que les utilisateurs doivent utiliser

02:26.730 --> 02:30.400
sur leurs requêtes HTTP pour déclencher certaines fonctions, ainsi

02:30.400 --> 02:32.687
que de nombreux autres décorateurs que vous

02:32.687 --> 02:35.660
pouvez utiliser pour extraire des données des requêtes

02:35.660 --> 02:36.890
entrantes, etc.

02:36.890 --> 02:39.150
Donc, ici aussi, ce framework vous propose

02:39.150 --> 02:41.370
tous ces décorateurs, de sorte que vous pouvez

02:41.370 --> 02:44.640
simplement les ajouter à vos propriétés, à vos méthodes, à

02:44.640 --> 02:46.257
vos classes, et ajouter des fonctionnalités

02:46.257 --> 02:50.060
supplémentaires, que le framework prend ensuite en compte lorsqu'il

02:50.060 --> 02:52.828
exécute votre code.

02:52.828 --> 02:55.417
Donc, là encore, les décorateurs sont utilisés

02:55.417 --> 02:59.070
pour la métaprogrammation afin d'ajouter une configuration

02:59.070 --> 03:02.977
supplémentaire, une logique supplémentaire, qui est ensuite prise

03:02.977 --> 03:05.700
en compte par, dans ce cas, le code du framework,

03:05.700 --> 03:07.580
qui exécute votre code ou qui travaille

03:07.580 --> 03:09.886
avec votre code.

03:09.886 --> 03:12.000
Et c'est tout pour les décorateurs.

03:12.000 --> 03:14.110
Cela vous donne, je l'espère, une bonne vue d'ensemble

03:14.110 --> 03:16.090
de ce que vous pouvez faire avec les décorateurs,

03:16.090 --> 03:17.830
pourquoi ils peuvent être très utiles et comment

03:17.830 --> 03:19.563
ils fonctionnent généralement.
