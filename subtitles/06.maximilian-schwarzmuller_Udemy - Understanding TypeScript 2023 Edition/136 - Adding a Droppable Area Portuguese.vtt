WEBVTT

00:02.180 --> 00:04.910
Instrutor: Visualmente, somos capazes de arrastar

00:04.910 --> 00:07.240
e soltar, mas tecnicamente em JavaScript, é claro,

00:07.240 --> 00:10.410
nosso roteiro não tem idéia do que está acontecendo.

00:10.410 --> 00:12.030
Mas para nós, humanos, é claro,

00:12.030 --> 00:14.810
é claro que estamos arrastando este exato item aqui.

00:14.810 --> 00:16.300
Mas se dermos uma olhada em nosso

00:16.300 --> 00:20.320
código, como o JavaScript saberia o que está sendo arrastado para onde?

00:20.320 --> 00:21.980
Como atualizar nosso estado com

00:21.980 --> 00:24.440
base nas informações que temos neste momento?

00:24.440 --> 00:26.690
Isso não seria realmente possível.

00:26.690 --> 00:28.810
Portanto, para que isso funcione em

00:28.810 --> 00:30.840
JavaScript, temos que voltar à classe

00:30.840 --> 00:33.960
de nosso item arrastável, o item de projeto.

00:33.960 --> 00:36.710
Lá, no dragStartHandler, registrar o evento

00:36.710 --> 00:38.250
do console não é tudo o que

00:38.250 --> 00:39.950
devemos fazer.

00:39.950 --> 00:42.200
Na verdade, não precisamos fazer isso de forma alguma.

00:42.200 --> 00:45.070
Em vez disso, vamos agora usar aqui nosso objeto de evento

00:45.070 --> 00:48.210
porque ele tem uma propriedade de transferência de dados.

00:48.210 --> 00:50.440
Isto é especial para eventos de arrasto, que

00:50.440 --> 00:53.280
você tenha tal propriedade de transferência de dados.

00:53.280 --> 00:55.330
E nessa propriedade, você pode anexar

00:55.330 --> 00:57.530
dados ao evento de arrastamento e mais tarde

00:57.530 --> 00:59.520
poderá extrair esses dados em uma gota

00:59.520 --> 01:01.390
e o navegador em JavaScript nos bastidores,

01:01.390 --> 01:03.730
armazenará esses dados durante a operação

01:03.730 --> 01:06.430
de arrastamento e garantirá que os dados que você

01:06.430 --> 01:09.470
obtiver quando a gota acontecer sejam os mesmos dados que

01:09.470 --> 01:12.020
você anexou aqui.

01:12.020 --> 01:15.520
Para isso você pode chamar, setData, na transferência de dados,

01:15.520 --> 01:18.910
mas a transferência de dados pode na verdade ser nula.

01:18.910 --> 01:21.080
Portanto, temos que acrescentar aqui um ponto de exclamação,

01:21.080 --> 01:23.460
é claro que sabemos que não será nulo aqui.

01:23.460 --> 01:25.700
Você poderia se perguntar por que poderia ser nulo?

01:25.700 --> 01:29.060
Bem, o evento de arrasto é sempre o mesmo tipo de evento, mas

01:29.060 --> 01:31.340
com base em qual ouvinte o aciona ou qual

01:31.340 --> 01:34.190
evento exato você está ouvindo, a transferência

01:34.190 --> 01:37.520
de dados não está necessariamente disponível.

01:37.520 --> 01:39.896
Portanto, nem todos os eventos relacionados ao

01:39.896 --> 01:42.640
arrastamento lhe dão um objeto de evento que tem o objeto

01:42.640 --> 01:44.073
de transferência de dados.

01:45.320 --> 01:46.620
O dragStartHandler que dispara

01:46.620 --> 01:49.080
sobre o evento de partida de arrasto, no entanto,

01:49.080 --> 01:52.840
tem-no aqui para que possamos chamar com segurança setData.

01:52.840 --> 01:56.330
E agora setData leva dois argumentos aqui.

01:56.330 --> 01:59.900
O primeiro argumento é um identificador do formato

01:59.900 --> 02:01.320
dos dados, e aí você

02:01.320 --> 02:04.970
tem certos formatos possíveis disponíveis.

02:04.970 --> 02:08.210
Em anexo você encontrará um mergulho profundo no drag and drop com JavaScript

02:08.210 --> 02:10.890
onde você pode aprender muito mais sobre eles.

02:10.890 --> 02:12.270
A propósito, você também aprenderá

02:12.270 --> 02:15.140
mais sobre isso em meu curso Guia Completo JavaScript.

02:15.140 --> 02:18.390
Aqui precisamos do formato de texto/plano, o que significa

02:18.390 --> 02:20.010
que vamos apenas anexar alguns

02:20.010 --> 02:25.430
dados de texto simples solicitados que são transferidos, e isso é importante.

02:25.430 --> 02:28.250
Não vamos prender nossos objetos aqui, nosso projeto

02:28.250 --> 02:29.740
em si, vamos simplesmente continuar

02:29.740 --> 02:31.390
ficando presos.

02:31.390 --> 02:34.340
Portanto, não é o projeto completo que pode ser apresentado aqui.

02:34.340 --> 02:37.955
Em vez disso, é suficiente anexar a identificação

02:37.955 --> 02:41.645
do projeto porque isso nos permitirá, mais tarde,

02:41.645 --> 02:44.870
ir buscar o projeto em nosso estado.

02:44.870 --> 02:47.320
Portanto, anexar a identificação é tudo o que precisamos fazer.

02:47.320 --> 02:50.240
Queremos transferir apenas uma pequena quantidade de dados, isto

02:50.240 --> 02:52.053
também nos poupará alguma memória.

02:53.100 --> 02:56.300
Com isso, agora estamos anexando dados ao evento de arrasto.

02:56.300 --> 02:58.330
Uma outra coisa que quero fazer é, na transferência

02:58.330 --> 03:00.610
de dados onde novamente temos que adicionar

03:00.610 --> 03:02.340
o ponto de exclamação, eu vou definir

03:02.340 --> 03:05.430
o efeito de propriedade Allowed para mover.

03:05.430 --> 03:08.610
Isto basicamente controla a aparência do cursor,

03:08.610 --> 03:12.440
e diz ao navegador um pouco sobre nossa intenção, que planejamos

03:12.440 --> 03:15.200
mover um elemento de A para B.

03:15.200 --> 03:16.760
Uma alternativa poderia ser

03:16.760 --> 03:19.230
a cópia, onde você obtém um cursor diferente

03:19.230 --> 03:20.820
que indica ao usuário que você

03:20.820 --> 03:23.120
está copiando e não está se movendo, mas

03:23.120 --> 03:25.140
aqui queremos mover o elemento, o que

03:25.140 --> 03:26.580
significa que em uma gota,

03:26.580 --> 03:28.810
o removemos em seu lugar original e o adicionamos

03:28.810 --> 03:31.360
ao novo lugar.

03:31.360 --> 03:34.940
Portanto, agora os dados estão anexados aqui e esse é o passo número um.

03:34.940 --> 03:36.870
Vamos agora voltar ao lugar onde queremos

03:36.870 --> 03:38.470
que a entrega aconteça, que

03:38.470 --> 03:40.360
é a lista de projetos.

03:40.360 --> 03:43.400
Lá, começa no dragLeaveHandler.

03:43.400 --> 03:46.370
Agora, nesta aplicação, neste projeto aqui,

03:46.370 --> 03:49.200
temos apenas uma operação de arrastar e soltar

03:49.200 --> 03:51.500
e que são nossos projetos aqui.

03:51.500 --> 03:54.970
Em aplicações maiores você pode ter peças diferentes

03:54.970 --> 03:57.220
na página que podem ser arrastadas e

03:57.220 --> 04:01.080
largadas e você não quer fazer tudo cair em qualquer lugar.

04:01.080 --> 04:06.080
Portanto, aqui no dragOverHandler, que dispara quando você entra

04:06.230 --> 04:09.580
em uma área arrastável com um item preso ao mouse,

04:09.580 --> 04:11.860
eu quero verificar se realmente

04:11.860 --> 04:14.970
é permitido um arrastamento aqui.

04:14.970 --> 04:19.546
Para isso, verificarei se o evento foi realizado. dataTransfer, aqui ele também

04:19.546 --> 04:21.060
está disponível, portanto,

04:21.060 --> 04:22.950
se estiver disponível, e

04:22.950 --> 04:25.500
então, se estiver disponível, a propriedade

04:25.500 --> 04:29.140
dos tipos de transferência de dados tem um primeiro

04:29.140 --> 04:34.140
valor que é igual a texto/plano.

04:34.300 --> 04:39.280
Isso significa simplesmente que os dados estão anexados ao nosso

04:39.280 --> 04:42.390
evento de arrasto, é esse o formato?

04:42.390 --> 04:43.360
O que, é claro, é porque

04:43.360 --> 04:45.030
esse é o formato que estabelecemos

04:45.030 --> 04:47.320
aqui no dragStartHandler.

04:47.320 --> 04:50.490
Assim, por exemplo, aqui não seria permitida a queda de imagens ou

04:50.490 --> 04:51.380
algo parecido que teria

04:51.380 --> 04:53.180
um formato de dados diferente.

04:53.180 --> 04:56.173
Acabei de permitir o envio de texto simples.

04:57.170 --> 04:59.450
É claro que agora também preciso substituir o

04:59.450 --> 05:01.020
sublinhado por um evento novamente,

05:01.020 --> 05:03.280
porque estou me referindo a ele aqui.

05:03.280 --> 05:07.150
Agora, se esse for o caso, sei que quero permitir uma gota, então vou

05:07.150 --> 05:09.070
atualizar os antecedentes.

05:09.070 --> 05:11.620
E apenas mais uma coisa importante que temos que fazer, você

05:11.620 --> 05:13.960
tem que chamar de evento. previnem a inadimplência.

05:13.960 --> 05:15.950
Mas por que temos que chamar isso?

05:15.950 --> 05:18.860
Porque no JavaScript um arrastar e soltar

05:18.860 --> 05:22.480
funciona de tal forma que uma gota só é realmente permitida,

05:22.480 --> 05:26.119
então o evento de gota só acionará em um elemento, se no

05:26.119 --> 05:29.649
arrastar sobreHandler sobre esse mesmo elemento que

05:29.649 --> 05:32.750
você chamou de preventDefault.

05:32.750 --> 05:35.360
Você pode pensar nisto como o seguinte.

05:35.360 --> 05:38.870
O padrão para eventos de arrastar e soltar JavaScript

05:38.870 --> 05:41.350
é não permitir uma queda, então você tem

05:41.350 --> 05:44.889
que evitar o padrão no arrastar sobre o Handler para dizer

05:44.889 --> 05:48.120
ao JavaScript e ao navegador que para este elemento,

05:48.120 --> 05:49.670
neste caso para esta seção

05:49.670 --> 05:52.980
para esta classe sem projeto você quer permitir uma

05:52.980 --> 05:54.870
queda.

05:54.870 --> 05:57.920
Portanto, somente se você fizer isto é um dragOverHandler, o

05:57.920 --> 06:00.020
evento de queda será realmente acionado quando

06:00.020 --> 06:01.220
o usuário soltar.

06:01.220 --> 06:02.910
Caso contrário, se o usuário soltar,

06:02.910 --> 06:05.060
o evento de queda não irá disparar.

06:05.060 --> 06:07.090
Então, com isso, o manipulador de gotas

06:07.090 --> 06:08.960
eventualmente executará, é claro,

06:08.960 --> 06:12.620
porque agora estamos permitindo que isso aconteça.

06:12.620 --> 06:16.440
Por isso, aqui no manipulador de queda podemos agora aceitar o evento e,

06:16.440 --> 06:20.610
por enquanto, vamos apenas consolar. registre o evento aqui assim

06:20.610 --> 06:23.003
para ver se isso funciona.

06:23.940 --> 06:28.100
Agora salvamos tudo, acrescentamos um novo item

06:28.100 --> 06:30.220
aqui, e eu arrasto isto.

06:30.220 --> 06:33.430
Se eu o deixar cair aqui em projetos concluídos, você verá

06:33.430 --> 06:36.490
que este evento de arrasto está disparando aqui.

06:36.490 --> 06:39.360
E isso vem da linha 236 que de fato

06:39.360 --> 06:43.050
é esta linha no manipulador de gotas.

06:43.050 --> 06:45.950
Agora, se inspecionarmos o evento de arrastamento aqui no navegador,

06:45.950 --> 06:47.447
você verá que temos um monte de dados

06:47.447 --> 06:50.830
aqui dentro e também temos essa propriedade de transferência de dados.

06:50.830 --> 06:52.920
E ali você vê o efeito que permitimos,

06:52.920 --> 06:54.320
que é Move, e você também

06:54.320 --> 06:57.930
não verá nada ali dentro.

06:57.930 --> 07:01.600
Bem, somente porque os dados já estavam limpos depois que

07:01.600 --> 07:04.510
isto estava sendo colocado no console.

07:04.510 --> 07:06.100
E como colocamos o objeto aqui e os

07:06.100 --> 07:08.160
objetos são tipos de referência, bem, vemos

07:08.160 --> 07:10.830
o último instantâneo onde os dados se perderam.

07:10.830 --> 07:13.360
Na verdade, no momento em que estivermos deixando

07:13.360 --> 07:16.910
isso de lado, poderemos extrair dados da transferência de dados.

07:16.910 --> 07:18.360
E eu posso provar isso a você.

07:18.360 --> 07:20.960
É claro que podemos simplesmente acessar a

07:20.960 --> 07:23.210
transferência de dados e aí você tem um

07:23.210 --> 07:26.580
método getData, e agora queremos obter os dados com este

07:26.580 --> 07:29.560
formato de texto/plano e esse deve ser o ID do projeto

07:29.560 --> 07:34.560
que anexamos ao nosso pacote de transferência de dados no item do projeto.

07:35.060 --> 07:37.179
Portanto, se agora salvarmos isto

07:37.179 --> 07:39.690
e readicionarmos o projeto aqui, e arrastarmos

07:39.690 --> 07:41.050
isto aqui, você vê isto

07:41.050 --> 07:46.050
aqui de fato, é a identificação deste item do projeto.

07:46.600 --> 07:47.920
Podemos ver que se

07:47.920 --> 07:50.880
o inspecionamos porque também o acrescentamos

07:50.880 --> 07:55.124
aqui como um ID, 0. 2167, parece-me esta identificação.

07:55.124 --> 07:59.170
Portanto, estamos transferindo a identificação com sucesso.

07:59.170 --> 08:00.490
Agora estamos quase lá.

08:00.490 --> 08:04.100
Agora só temos que atualizar nosso estado nos bastidores

08:04.100 --> 08:06.163
e, em seguida, reatribuir DUI.
