WEBVTT

00:02.130 --> 00:02.963
Instructor: Así que cubrimos

00:02.963 --> 00:05.180
un par de tipos básicos que TypeScript conoce.

00:05.180 --> 00:06.590
Ahora sigamos adelante.

00:06.590 --> 00:09.140
Para ello, cambiaré el nombre de la aplicación. ts aquí a objs-arrays-enums,

00:09.140 --> 00:11.670
o como quieras llamarlo, básicamente para que sigamos

00:11.670 --> 00:12.750
teniendo ese archivo,

00:12.750 --> 00:17.130
pero crearé una nueva aplicación.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
para que tengamos de nuevo un archivo vacío

00:18.860 --> 00:20.500
en el que podamos trabajar.

00:20.500 --> 00:22.550
Ahora en este archivo, quiero sumergirme

00:22.550 --> 00:25.790
en otro tipo interesante que encontrarás en TypeScript.

00:25.790 --> 00:28.640
Y ese es el tipo de sindicato.

00:28.640 --> 00:30.190
¿Qué es eso?

00:30.190 --> 00:33.000
Volvamos a nuestra función de adición, que escribimos

00:33.000 --> 00:34.490
antes, voy a copiar eso y moverlos

00:34.490 --> 00:37.270
a la aplicación. ts.

00:37.270 --> 00:39.190
Deshazte de ese comentario aquí, y

00:39.190 --> 00:42.940
aquí en add, cerremos lo básico. ts para que nos libremos

00:42.940 --> 00:44.170
de ese error.

00:44.170 --> 00:47.970
Aquí en add, ahora quiero ser más flexible en cuanto

00:47.970 --> 00:49.920
a lo que aceptamos aquí.

00:49.920 --> 00:52.570
También me desharé de showResult y de

00:52.570 --> 00:54.370
la frase, no la necesito.

00:54.370 --> 00:55.690
Y lo único que quiero hacer

00:55.690 --> 00:58.590
es calcular un resultado y devolverlo.

00:58.590 --> 01:01.960
Pero quiero ser más flexible en cuanto a las entradas.

01:01.960 --> 01:06.045
Anteriormente, nos aseguramos de trabajar sólo con números.

01:06.045 --> 01:09.357
Ahora digamos que nombramos esta combinación y que

01:09.357 --> 01:13.190
debería funcionar tanto con números como con cadenas.

01:13.190 --> 01:15.710
Porque resulta que podemos combinar tanto

01:15.710 --> 01:18.595
números como cadenas con este operador más, la

01:18.595 --> 01:21.650
única diferencia es que en un escenario, obtenemos

01:21.650 --> 01:24.030
como resultado un número, en el otro escenario

01:24.030 --> 01:27.120
obtenemos una cadena concatenada, como de hecho ya

01:27.120 --> 01:30.150
vimos al principio de este módulo.

01:30.150 --> 01:32.040
Pero ahora quiero permitir este comportamiento,

01:32.040 --> 01:33.950
porque podrías tener una aplicación en la

01:33.950 --> 01:36.740
que quieras tener una función de combinación flexible que

01:36.740 --> 01:38.963
funcione con números y cadenas.

01:39.830 --> 01:42.360
Por lo tanto, también voy a nombrar

01:42.360 --> 01:47.340
esta entrada1 aquí, y esta entrada2, y combinar estos dos ahora.

01:47.340 --> 01:49.740
Pero tendremos un problema, por supuesto,

01:49.740 --> 01:53.180
ahora mismo ponemos ambos parámetros como números.

01:53.180 --> 01:56.050
Esto significa que podemos llamar a esta función, siempre

01:56.050 --> 01:58.190
y cuando queramos trabajar con números.

01:58.190 --> 01:59.130
Digamos que ahí abajo,

01:59.130 --> 02:01.640
estamos creando una nueva constante, combinedAges.

02:02.931 --> 02:04.690
Y ahí llamo combinar y

02:04.690 --> 02:09.602
pasar en 30 y 26 aquí como edades en cualquier aplicación que

02:09.602 --> 02:12.000
estemos construyendo.

02:12.000 --> 02:15.014
Otro después del registro de la consola combinadoAges,

02:15.014 --> 02:17.240
bien no debería ser demasiado sorprendente

02:17.240 --> 02:19.830
que si ahora compilamos este archivo aquí, y luego

02:19.830 --> 02:22.360
recargamos esta página, obtenemos 56.

02:22.360 --> 02:24.690
Así que esto funciona, obtenemos este número.

02:24.690 --> 02:26.710
Pero claro, tenemos un problema si

02:26.710 --> 02:28.838
intentamos crear una cadena aquí.

02:28.838 --> 02:31.610
CombinedNames, por ejemplo.

02:31.610 --> 02:36.033
Si trato de combinar Max y Anna aquí, entonces bueno, inmediatamente

02:37.230 --> 02:39.630
obtenemos un error aquí que Max no es

02:39.630 --> 02:42.320
asignable al tipo número porque esto, por

02:42.320 --> 02:44.350
supuesto, es una cadena.

02:44.350 --> 02:45.790
Ahora, por supuesto, podríamos cambiar

02:45.790 --> 02:47.750
esto para aceptar cadenas en lugar de números, pero

02:47.750 --> 02:50.130
ahora la primera llamada a la función fallaría.

02:50.130 --> 02:52.750
Y ahí es donde los sindicatos pueden ayudarnos.

02:52.750 --> 02:55.692
Si tenemos algún lugar en nuestra aplicación, ya

02:55.692 --> 02:58.810
sea un parámetro de una función o una constante o una

02:58.810 --> 03:01.700
variable que estamos utilizando en algún lugar,

03:01.700 --> 03:05.030
donde aceptamos dos tipos diferentes de valores.

03:05.030 --> 03:07.410
Pues bien, un tipo de sindicato puede ayudarnos.

03:07.410 --> 03:09.800
Para decirle a TypeScript que

03:09.800 --> 03:12.690
estamos bien con un número o una cadena,

03:12.690 --> 03:14.220
usamos número y luego

03:14.220 --> 03:17.710
el símbolo de la tubería aquí, y luego el otro

03:17.710 --> 03:20.660
tipo que también aceptamos.

03:20.660 --> 03:22.340
Y puedes tener más de dos tipos,

03:22.340 --> 03:25.220
puedes aceptar aquí tantos tipos como necesites.

03:25.220 --> 03:27.050
Así que aquí, sólo necesito dos, sin

03:27.050 --> 03:28.880
embargo, y esa es la asignación de

03:28.880 --> 03:31.720
tipo asequible que voy a ir con, número o cadena.

03:31.720 --> 03:33.690
Ahora me sale un error, que el

03:33.690 --> 03:35.930
operador plus no se puede aplicar

03:35.930 --> 03:39.120
a los tipos cadena o número y cadena o número.

03:39.120 --> 03:41.500
En realidad no es del todo correcto, esto debería

03:41.500 --> 03:44.350
funcionar, ya que podemos utilizar el operador plus

03:44.350 --> 03:46.670
tanto con números como con cadenas.

03:46.670 --> 03:49.600
Pero TypeScript sólo ve que tenemos un tipo de unión

03:49.600 --> 03:52.540
aquí, y no analiza lo que hay en el tipo de unión, sólo

03:52.540 --> 03:56.010
ve, "Vale, estás esperando múltiples tipos.

03:56.010 --> 03:57.530
Tal vez eso incluya tipos en

03:57.530 --> 03:59.460
los que no puedo utilizar el operador

03:59.460 --> 04:01.640
plus, de ahí que me queje aquí. Sin embargo, afortunadamente, podemos solucionar este problema.

04:01.640 --> 04:05.410
Podemos añadir nuestra comprobación de tipo en tiempo

04:05.410 --> 04:07.910
de ejecución aquí y ver si el tipo de entrada1

04:07.910 --> 04:11.240
es igual a un número y si el tipo de entrada2 es igual

04:12.750 --> 04:15.170
a un número, y luego mover este cálculo

04:16.530 --> 04:21.283
allí, ahora sólo una mejora, vamos a crear el resultado como una variable

04:24.100 --> 04:26.410
al principio de esa comprobación

04:26.410 --> 04:28.510
si, debido al ámbito de bloqueo,

04:28.510 --> 04:33.880
de modo que esta es una variable disponible en toda la función, y luego sólo asignar

04:33.880 --> 04:37.873
un nuevo valor allí.

04:37.873 --> 04:40.310
Así que aquí comprobamos si tenemos dos números.

04:40.310 --> 04:42.818
Y por lo tanto TypeScript sabe que aquí,

04:42.818 --> 04:45.890
input1 y input2 serán ambos números.

04:45.890 --> 04:49.790
Ahora vamos a añadir una comprobación más aquí.

04:49.790 --> 04:53.900
Y ahí podemos establecer el resultado igual a input1. tostring, convirtiendo esto explícitamente

04:53.900 --> 04:56.913
en una cadena,

04:58.550 --> 05:00.570
y input2. tostring.

05:00.570 --> 05:02.880
Y esto también estará bien para

05:02.880 --> 05:04.160
TypeScript y JavaScript, porque

05:04.160 --> 05:05.700
podemos concatenar dos cadenas.

05:05.700 --> 05:08.220
Así que ahora tenemos casi el mismo cálculo, pero

05:08.220 --> 05:10.800
aclaramos que aquí, siempre trabajaremos con

05:10.800 --> 05:12.110
números, aquí siempre trabajaremos

05:12.110 --> 05:13.590
con cadenas, y luego devolvemos

05:13.590 --> 05:15.730
el resultado.

05:15.730 --> 05:17.490
Y ahora con eso, si registramos

05:17.490 --> 05:20.870
por consola los nombres combinados ahí abajo, y compilamos

05:20.870 --> 05:25.350
este archivo, veremos que una vez que volvamos a visitar nuestra página,

05:25.350 --> 05:27.210
tenemos los números combinados

05:27.210 --> 05:29.278
ahí, que simplemente fueron sumados

05:29.278 --> 05:31.460
y por lo tanto obtenemos un número como

05:31.460 --> 05:33.150
resultado, y dos nombres combinados

05:33.150 --> 05:35.090
aquí.

05:35.090 --> 05:36.850
Así es como podemos utilizar los tipos

05:36.850 --> 05:40.830
de unión para ser más flexibles con respecto a lo que hacemos en una función, por

05:40.830 --> 05:43.770
ejemplo, o en cualquier otra parte de nuestro código.

05:43.770 --> 05:45.920
Esta comprobación extra de tipos en tiempo de

05:45.920 --> 05:49.520
ejecución no siempre será necesaria cuando se trabaje con tipos de unión,

05:49.520 --> 05:51.230
pero a menudo lo será porque con los

05:51.230 --> 05:54.090
tipos de unión se puede ser más flexible, por ejemplo, en los

05:54.090 --> 05:56.350
parámetros que se aceptan, pero entonces se podría

05:56.350 --> 05:58.170
tener una lógica diferente en la función

05:58.170 --> 06:00.940
basada en el tipo exacto que se obtiene.

06:00.940 --> 06:03.730
Para que su función sea capaz de trabajar con múltiples

06:03.730 --> 06:05.640
tipos de valores pero que luego haga

06:05.640 --> 06:07.810
cosas ligeramente diferentes dependiendo

06:07.810 --> 06:10.320
del tipo que esté recibiendo.

06:10.320 --> 06:12.410
Por lo tanto, es posible que necesite esta comprobación

06:12.410 --> 06:15.270
en tiempo de ejecución cuando trabaje con tipos de unión, pero no siempre

06:15.270 --> 06:16.700
la necesitará.

06:16.700 --> 06:18.490
Seguramente también te encontrarás con situaciones

06:18.490 --> 06:20.900
en los programas de TypeScript en las que puedes utilizar un

06:20.900 --> 06:24.060
tipo de unión sin una comprobación de tipo en tiempo de ejecución.

06:24.060 --> 06:25.870
En realidad, depende de la lógica con la que se escriba.
