WEBVTT

00:02.260 --> 00:03.920
Istruttore: Quindi, sindacati discriminati.

00:03.920 --> 00:05.750
Davvero molto utile.

00:05.750 --> 00:09.060
Un'altra funzione molto utile è il type casting.

00:09.060 --> 00:12.640
Il type casting aiuta a dire a TypeScript che

00:12.640 --> 00:15.350
un valore è di un tipo specifico, quando

00:15.350 --> 00:19.240
TypeScript non è in grado di rilevarlo da solo, ma

00:19.240 --> 00:22.660
lo sviluppatore sa che sarà così.

00:22.660 --> 00:25.030
Un buon esempio è rappresentato dal caso in cui

00:25.030 --> 00:27.120
si ottenga una X per qualcosa nella dom.

00:27.120 --> 00:29.560
Supponiamo di avere un paragrafo nella dom,

00:29.560 --> 00:32.180
solo un paragrafo, nient'altro, ed è un paragrafo

00:32.180 --> 00:33.390
vuoto.

00:33.390 --> 00:35.190
Quindi, se lo salviamo, non vediamo

00:35.190 --> 00:37.150
nulla qui, sullo schermo.

00:37.150 --> 00:38.950
Ora possiamo accedere a quel paragrafo

00:38.950 --> 00:40.543
dall'interno del nostro script.

00:43.160 --> 00:48.160
Const paragrafo con il selettore di query del documento P, ad esempio.

00:49.180 --> 00:51.890
Ora, quando usiamo il selettore di query e passiamo

00:51.890 --> 00:54.500
P come selettore, in modo da selezionare il tag P,

00:54.500 --> 00:57.070
TypeScript è in grado di scoprire, come si può vedere

00:57.070 --> 00:59.510
se ci passo sopra il mouse, che questo elemento

00:59.510 --> 01:02.480
sarà di tipo paragraph element o null, perché forse un elemento

01:02.480 --> 01:07.050
del genere non esiste nella pagina, ma questa è un'altra cosa.

01:07.050 --> 01:09.920
Ignoriamo per ora il caso o nullo.

01:09.920 --> 01:12.400
La cosa importante è che TypeScript scopra effettivamente

01:12.400 --> 01:14.600
che si tratta di un elemento paragrafo.

01:14.600 --> 01:16.800
Ora, la situazione cambia se si seleziona in base

01:16.800 --> 01:18.460
a qualcos'altro, ad esempio un ID.

01:18.460 --> 01:22.020
Diamo a questo paragrafo il nome di messaggio-uscita, quindi

01:22.020 --> 01:23.920
il suo ID è messaggio-uscita.

01:23.920 --> 01:25.890
Ora, noi sviluppatori sappiamo che abbiamo

01:25.890 --> 01:28.360
assegnato questo ID a questo paragrafo, ma TypeScript

01:28.360 --> 01:29.780
non lo sa.

01:29.780 --> 01:33.020
TypeScript non si immerge nei nostri file HTML

01:33.020 --> 01:34.590
per analizzarli.

01:34.590 --> 01:37.360
Quindi, se ora selezioniamo l'ID, ad

01:37.360 --> 01:41.720
esempio con getElementById, vediamo che TypeScript deduce

01:41.720 --> 01:45.130
che si tratta di un elemento HTML o di un null,

01:45.130 --> 01:49.830
senza sapere quale elemento HTML specifico sia.

01:49.830 --> 01:52.720
Ora, per un paragrafo, questo potrebbe non avere molta

01:52.720 --> 01:54.830
importanza, forse vogliamo solo fare le

01:54.830 --> 01:57.290
cose che potremmo fare con qualsiasi elemento

01:57.290 --> 01:59.990
HTML, per esempio accedere al suo contenuto testuale

01:59.990 --> 02:01.470
o cose del genere.

02:01.470 --> 02:03.220
Ma se avessimo un input qui?

02:03.220 --> 02:07.750
E se avessimo un input di tipo text e volessimo ottenere il valore

02:07.750 --> 02:10.430
inserito dall'utente, gli darei un ID

02:10.430 --> 02:12.760
di user-input e ora lo selezionerei

02:12.760 --> 02:15.500
nel mio codice TypeScript.

02:15.500 --> 02:17.730
Quindi seleziono per ID user-input

02:17.730 --> 02:21.530
e non è più un paragrafo, ma userInputElement.

02:21.530 --> 02:24.023
Ora, come sviluppatore, sappiamo che qui, raggiungiamo

02:24.909 --> 02:26.700
questo elemento di input, ma come ho

02:26.700 --> 02:28.530
detto, TypeScript non lo sa.

02:28.530 --> 02:31.140
TypeScript non legge il nostro codice HTML,

02:31.140 --> 02:34.435
quindi sa solo che si tratta di un elemento HTML.

02:34.435 --> 02:37.860
Ora, se volessi impostare la proprietà value di questo

02:37.860 --> 02:45.000
quindi, e provassi a fare userInputElement.

02:45.000 --> 02:45.000
valore

02:45.000 --> 02:47.050
uguale ciao, vedi che in realtà ottengo un errore.

02:47.050 --> 02:48.960
Ricevo un errore perché questo oggetto

02:48.960 --> 02:50.780
potrebbe essere nullo.

02:50.780 --> 02:54.220
Possiamo rimediare aggiungendo un punto esclamativo

02:54.220 --> 02:56.210
dopo questo, e ci tornerò tra un

02:56.210 --> 02:58.390
secondo, ma anche in questo caso

02:58.390 --> 03:01.640
ricevo un errore che il valore non esiste sul tipo

03:01.640 --> 03:03.890
HTML Element, perché questo tipo

03:03.890 --> 03:08.343
generico, che in pratica qualsiasi elemento HTML ha come tipo, non

03:08.343 --> 03:11.630
supporta proprietà che sono specifiche per, beh,

03:11.630 --> 03:14.510
elementi HTML specifici.

03:14.510 --> 03:17.540
Quindi, dobbiamo dire a TypeScript

03:17.540 --> 03:20.860
che ciò che selezioniamo non solo non è nullo,

03:20.860 --> 03:25.080
ma che è anche di tipo HTMLInputElement.

03:25.080 --> 03:28.240
E questo è ciò che possiamo fare con il type casting.

03:28.240 --> 03:31.153
Ora, ci sono due modi per effettuare il casting dei tipi,

03:31.153 --> 03:34.170
due sintassi che possiamo usare e che sono equivalenti.

03:34.170 --> 03:36.971
Uno è quello di aggiungere qualcosa davanti alla

03:36.971 --> 03:41.920
cosa che vogliamo convertire o dove vogliamo dire a TypeScript di digitare.

03:41.920 --> 03:44.170
Aggiungiamo parentesi angolari di apertura

03:44.170 --> 03:45.810
e chiusura e poi, tra queste parentesi,

03:45.810 --> 03:49.480
il tipo di cosa dopo le parentesi angolari.

03:49.480 --> 03:51.223
In questo caso, HTMLInputElement.

03:53.110 --> 03:54.970
Questo tipo è disponibile a livello globale

03:54.970 --> 03:57.963
perché nel mio file tsconfig ho incluso la libreria dom.

03:59.180 --> 04:00.810
In questo modo, TypeScript

04:00.810 --> 04:03.830
sa che qualsiasi cosa selezioniamo dopo le parentesi

04:03.830 --> 04:06.530
angolari sarà di tipo HTMLInputElement e

04:06.530 --> 04:08.950
quindi non si lamenta più.

04:08.950 --> 04:10.330
Questa è la prima versione.

04:10.330 --> 04:12.830
Permettetemi di copiarlo, commentarlo

04:12.830 --> 04:14.750
e mostrarvi l'alternativa.

04:14.750 --> 04:18.000
Funziona assolutamente bene e si può usare.

04:18.000 --> 04:21.210
Ora, se conoscete React, sapete che esiste anche

04:21.210 --> 04:24.400
una sintassi di parentesi angolare all'interno

04:24.400 --> 04:26.970
di JavaScript o TypeScript, se lo usate

04:26.970 --> 04:29.200
per i file React, dove scrivete

04:29.200 --> 04:33.550
codice JSX nei vostri componenti React.

04:33.550 --> 04:36.060
Ora, se non conoscete React, questo potrebbe non dirvi molto.

04:36.060 --> 04:40.800
Si tenga presente che una sintassi simile esiste nei progetti React e lì le parentesi

04:40.800 --> 04:43.320
angolari non sono usate per passare informazioni

04:43.320 --> 04:47.480
sui tipi che si stanno usando, ma vengono analizzate da alcuni strumenti

04:47.480 --> 04:50.390
di compilazione e da React, in ultima analisi, per

04:50.390 --> 04:54.390
sapere cosa si vuole rendere sullo schermo.

04:54.390 --> 04:56.750
Quindi, totalmente distaccato da TypeScript.

04:56.750 --> 04:59.880
Per non entrare in conflitto con la sintassi JSX, il team di

04:59.880 --> 05:01.900
TypeScript fornisce un'alternativa

05:01.900 --> 05:04.350
al casting dei tipi di parentesi angolari.

05:04.350 --> 05:06.450
Potete anche aggiungere qualcosa dopo

05:06.450 --> 05:07.920
la cosa che volete digitare,

05:07.920 --> 05:09.960
quindi dopo questa selezione in questo

05:09.960 --> 05:12.600
caso, e questa cosa è la parola chiave as.

05:12.600 --> 05:14.740
E poi si aggiunge di nuovo il tipo a cui

05:14.740 --> 05:16.750
si vuole lanciare questo oggetto.

05:16.750 --> 05:19.970
Quindi, questo ora dice a TypeScript che l'espressione

05:19.970 --> 05:23.730
davanti a lui, in questo caso, questa espressione qui, produrrà

05:23.730 --> 05:27.405
un valore di tipo HTMLInputElement.

05:27.405 --> 05:30.067
Pertanto, anche in questo caso, non si ottiene alcun errore.

05:30.067 --> 05:31.650
Quindi, questa è un'alternativa

05:31.650 --> 05:33.940
e si può usare una delle due sintassi,

05:33.940 --> 05:36.350
quella che si preferisce, ma bisogna cercare

05:36.350 --> 05:38.990
di essere coerenti in tutto il progetto, in

05:38.990 --> 05:42.377
modo da non alternare le due sintassi.

05:42.377 --> 05:45.220
In questo modo, è possibile passare queste preziose

05:45.220 --> 05:47.480
informazioni aggiuntive a TypeScript

05:47.480 --> 05:50.400
e far funzionare codice come questo, anche se TypeScript

05:50.400 --> 05:52.760
da solo non sarebbe in grado di scoprire che

05:52.760 --> 05:56.000
questo qui produce un HTMInputElement.

05:56.000 --> 05:57.940
Naturalmente, dal momento che si sta forzando

05:57.940 --> 06:00.420
TypeScript a usare questo tipo, è responsabilità dello

06:00.420 --> 06:02.200
sviluppatore assicurarsi che qualsiasi

06:02.200 --> 06:05.620
cosa venga prodotta da questa espressione sia di quel tipo.

06:05.620 --> 06:07.700
Altrimenti, si potrebbe ottenere un errore

06:07.700 --> 06:09.920
di esecuzione o un comportamento inatteso

06:09.920 --> 06:12.780
se si cerca di interagire con quell'elemento in un modo

06:12.780 --> 06:14.423
che non è supportato.

06:15.610 --> 06:18.060
Il type casting è quindi una funzione potente.

06:18.060 --> 06:20.490
Anche questo punto esclamativo è qui.

06:20.490 --> 06:22.590
In realtà l'ho già esplorato

06:22.590 --> 06:24.820
un po' prima nel corso.

06:24.820 --> 06:27.470
Questo punto esclamativo ci permette di dire a TypeScript

06:27.470 --> 06:31.090
che l'espressione che lo precede non darà mai come risultato null.

06:31.090 --> 06:33.170
Questo è necessario per alcune espressioni,

06:33.170 --> 06:35.070
come questa, quando si seleziona qualcosa

06:35.070 --> 06:38.010
dalla dom che potrebbe restituire null.

06:38.010 --> 06:40.980
Se lo sviluppatore sa che il risultato non sarà mai

06:40.980 --> 06:43.690
nullo, può usare il punto esclamativo.

06:43.690 --> 06:45.470
Altrimenti, e lo avete già

06:45.470 --> 06:48.248
imparato, voglio solo ribadirlo.

06:48.248 --> 06:49.380
Altrimenti, se non si è

06:49.380 --> 06:52.600
sicuri che non restituisca null, si può usare un controllo if.

06:52.600 --> 06:56.070
Si potrebbe quindi verificare se userInputElement

06:56.070 --> 06:57.510
è vero e quindi non è nullo,

06:57.510 --> 06:59.440
per poi utilizzarlo.

06:59.440 --> 07:02.720
In questo caso, ho dovuto rimuovere il casting del tipo, perché

07:02.720 --> 07:04.670
se facciamo il cast del tipo qui, diciamo

07:04.670 --> 07:07.170
anche a TypeScript che questo non sarà nullo e,

07:07.170 --> 07:10.470
poiché non ne sono certo, non posso fare il cast qui.

07:10.470 --> 07:13.120
Invece, devo farlo qui quando uso il valore e

07:13.120 --> 07:14.290
quindi voglio farlo

07:14.290 --> 07:16.600
prima di accedere alla proprietà value,

07:16.600 --> 07:19.820
aggiungendo un HTMLInputElement come questo.

07:19.820 --> 07:21.530
Ovviamente, però, questo fallirebbe.

07:21.530 --> 07:24.060
Questa è una sintassi non valida, si cerca

07:24.060 --> 07:28.030
di accedere a una proprietà value su un elemento HTMLInputElement

07:28.030 --> 07:30.280
e questo non ha nemmeno senso.

07:30.280 --> 07:33.010
Dobbiamo semplicemente racchiudere questa espressione

07:33.010 --> 07:35.670
tra parentesi, assicurarci che venga valutata per prima

07:35.670 --> 07:37.590
e poi cercare di accedere al valore del risultato

07:37.590 --> 07:39.480
di questa espressione.

07:39.480 --> 07:41.650
E ora abbiamo un'alternativa all'uso del

07:41.650 --> 07:42.893
punto esclamativo.
