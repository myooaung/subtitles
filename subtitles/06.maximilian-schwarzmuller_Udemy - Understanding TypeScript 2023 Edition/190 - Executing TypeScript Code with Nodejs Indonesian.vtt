WEBVTT

00:02.200 --> 00:03.210
Instruktur: Jadi mari kita mulai

00:03.210 --> 00:05.520
dengan TypeScript dan Node. js dan untuk itu, saya pada

00:05.520 --> 00:08.660
dasarnya berada di folder baru yang kosong di sini, hanya beberapa

00:08.660 --> 00:10.610
file konfigurasi di sana, dan mari kita mulai

00:10.610 --> 00:12.140
dengan sangat sederhana.

00:12.140 --> 00:15.020
Mari kita tambahkan aplikasi. ts di sini.

00:15.020 --> 00:17.370
Tentu saja Anda bisa menamainya sesuka Anda.

00:17.370 --> 00:19.180
Dan di sana, mari kita tulis beberapa kode yang

00:19.180 --> 00:22.220
ingin kita eksekusi dengan Node. js, tetapi di mana kita

00:22.220 --> 00:24.980
ingin menggunakan TypeScript.

00:24.980 --> 00:26.350
Skrip sederhana bisa jadi

00:26.350 --> 00:28.910
kita hanya melakukan console log sesuatu.

00:28.910 --> 00:30.450
Ini berfungsi di browser, tetapi ini

00:30.450 --> 00:33.350
juga berfungsi dengan Node. js.

00:33.350 --> 00:35.840
Sekarang pastikan Anda punya Node. js terinstal, yang pasti

00:35.840 --> 00:37.220
harus Anda miliki jika

00:37.220 --> 00:38.740
Anda mengikuti kursus itu

00:38.740 --> 00:42.077
karena kami menggunakannya di NPM dengan Webpack dan dengan

00:42.077 --> 00:43.910
banyak alat dan pustaka lain yang

00:43.910 --> 00:46.710
sudah kami instal dengan NPM.

00:46.710 --> 00:48.480
Jadi, Anda harus memiliki Node. js terpasang.

00:48.480 --> 00:50.300
Dan jika Anda sudah menginstalnya, Anda

00:50.300 --> 00:52.130
dapat mengeksekusi file ini jika Anda

00:52.130 --> 00:54.110
mengkompilasinya ke JavaScript.

00:54.110 --> 00:57.000
Jadi jika saya menjalankan aplikasi tsc. ts, dan saya memproduksi

00:57.000 --> 01:00.360
aplikasi saya. Oleh karena itu, saya dapat

01:00.360 --> 01:02.890
mengeksekusi ini dengan node dan saya mencetak

01:02.890 --> 01:04.503
sesuatu di sini.

01:06.550 --> 01:08.990
Sekarang ketika saya menghapus aplikasi. js dan saya mencoba menjalankan

01:08.990 --> 01:11.890
aplikasi. ts dengan node, Anda akan

01:11.890 --> 01:13.810
melihat sesuatu yang aneh.

01:13.810 --> 01:15.070
Ini juga berhasil.

01:15.070 --> 01:18.010
Jadi, apakah node mampu mengeksekusi TypeScript?

01:18.010 --> 01:20.380
Tidak, tidak dan itu sangat penting.

01:20.380 --> 01:23.210
Ia tidak peduli dengan ekstensi file, tetapi apa pun yang

01:23.210 --> 01:25.260
ditemukannya dalam file itu diperlakukannya

01:25.260 --> 01:27.420
sebagai JavaScript biasa dan ini di sini tidak

01:27.420 --> 01:31.370
menggunakan fitur TypeScript apa pun, sehingga berfungsi.

01:31.370 --> 01:34.340
Itu berubah jika kita menambahkan konten yang berbeda di sini.

01:34.340 --> 01:36.400
Katakanlah sebagai gantinya kita memiliki variabel

01:36.400 --> 01:37.370
usia, yang merupakan angka

01:37.370 --> 01:40.080
dan kemudian di sini saya mengatur ini menjadi 30, dan kemudian

01:40.080 --> 01:42.250
saya konsol. log usia di sini.

01:42.250 --> 01:44.840
Ini tentu saja adalah kode TypeScript yang valid.

01:44.840 --> 01:46.790
Tetapi jika kita mencoba mengeksekusi ini dengan node,

01:46.790 --> 01:48.370
Anda akan melihat kita mendapatkan error.

01:48.370 --> 01:52.450
Jadi node tidak mampu mengurai dan mengkompilasi TypeScript, node hanya

01:52.450 --> 01:54.210
memperlakukan setiap file yang

01:54.210 --> 01:56.960
Anda jalankan dengannya sebagai JavaScript.

01:56.960 --> 01:59.030
Dan jika Anda tidak menggunakan fitur TypeScript

01:59.030 --> 02:01.100
apa pun dalam file, ya maka itu berfungsi.

02:01.100 --> 02:02.950
Tetapi jika Anda melakukannya, itu tidak akan berhasil.

02:02.950 --> 02:04.920
Anda harus selalu mengkompilasi file ke JavaScript

02:04.920 --> 02:06.550
terlebih dahulu, untuk kemudian mengeksekusi

02:06.550 --> 02:08.960
file JavaScript, yang hanya memiliki kode JavaScript

02:08.960 --> 02:11.350
yang valid di dalamnya.

02:11.350 --> 02:13.030
Itu sangat penting untuk dipahami.

02:13.030 --> 02:15.890
Node tidak mengeksekusi TypeScript.

02:15.890 --> 02:20.710
Sekarang Anda sebenarnya dapat menginstal paket, ts-node, yang pada akhirnya memberi

02:20.710 --> 02:24.230
Anda kompiler TypeScript, dikombinasikan dengan node yang

02:24.230 --> 02:27.880
dapat dieksekusi, bisa dibilang, sehingga Anda dapat menginstal

02:27.880 --> 02:30.320
alat secara global, yang dapat Anda gunakan

02:30.320 --> 02:34.170
untuk menjalankan file TypeScript seperti itu.

02:34.170 --> 02:35.210
Tetapi di balik layar,

02:35.210 --> 02:37.620
ia akan melakukan kompilasi untuk Anda dan mengeksekusi

02:37.620 --> 02:39.440
kode kompilasi.

02:39.440 --> 02:42.610
Jadi, pada dasarnya ini menggabungkan langkah tsc dan langkah simpul

02:42.610 --> 02:43.890
ke dalam satu langkah.

02:43.890 --> 02:46.060
Jadi, ini adalah paket yang dapat Anda gunakan

02:46.060 --> 02:49.150
tetapi sementara ini mungkin bagus untuk pengembangan, untuk

02:49.150 --> 02:52.330
produksi, untuk benar-benar melayani file Anda di beberapa

02:52.330 --> 02:54.850
server web, di beberapa host web, ini mungkin tidak

02:54.850 --> 02:56.950
ideal, karena memiliki langkah kompilasi

02:56.950 --> 02:59.910
tambahan ini setiap kali kode Anda dieksekusi, hanya menambahkan

02:59.910 --> 03:02.160
sedikit overhead tambahan, yang baik-baik

03:02.160 --> 03:06.110
saja selama pengembangan, tetapi yang mungkin tidak Anda inginkan ketika

03:06.110 --> 03:09.890
kode Anda siap produksi dan Anda benar-benar ingin menyajikannya di suatu

03:09.890 --> 03:12.090
tempat.

03:12.090 --> 03:13.260
Oleh karena itu dalam modul ini,

03:13.260 --> 03:15.950
kita tidak akan menggunakan ts-node dan kita tidak akan mencoba mengeksekusi

03:15.950 --> 03:18.180
file TypeScript apapun dengan node.

03:18.180 --> 03:21.570
Sebagai gantinya saya akan menunjukkan kepada Anda pengaturan

03:21.570 --> 03:24.520
yang dapat kita gunakan untuk membangun aplikasi web node

03:24.520 --> 03:26.150
express atau rest API di sini, hanya

03:26.150 --> 03:29.130
dengan TypeScript dan kompiler TypeScript dan vanilla

03:29.130 --> 03:31.343
node. js.
