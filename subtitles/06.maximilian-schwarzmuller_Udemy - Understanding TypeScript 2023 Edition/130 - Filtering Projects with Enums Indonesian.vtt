WEBVTT

00:02.310 --> 00:03.940
Man: Jadi kita mendapatkan dua masalah,

00:03.940 --> 00:06.500
jika kita ingin menyebutnya seperti itu, untuk diperbaiki.

00:06.500 --> 00:07.820
Sekarang saya ingin memulai

00:07.820 --> 00:10.960
dengan masalah bahwa proyek muncul di kedua kotak.

00:10.960 --> 00:13.050
Saya ingin memperkenalkan beberapa

00:13.050 --> 00:15.980
pemfilteran dan tempat terbaik untuk memfilter,

00:15.980 --> 00:18.930
tentu saja, fungsi pendengar kita.

00:18.930 --> 00:22.743
Jika kita pergi ke tempat di mana kita mendaftarkan pendengar

00:26.000 --> 00:29.170
kita, di sini dalam klausa daftar proyek.

00:29.170 --> 00:32.270
Kemudian, di sini, kita mendapatkan - daftar proyek, bukan?

00:32.270 --> 00:36.170
Sekarang, daftar proyek itu terdiri atas semua proyek.

00:36.170 --> 00:39.400
Sekarang, di dalam klausa daftar proyek, bagaimanapun,

00:39.400 --> 00:43.140
kita hanya tertarik pada proyek yang aktif atau sudah selesai.

00:43.140 --> 00:44.250
Nah, di sini, ngomong-ngomong,

00:44.250 --> 00:49.103
secara teoritis kita juga bisa menggunakan enum kita tetapi, sebenarnya, saya membutuhkan

00:50.660 --> 00:53.160
nilai konkret yang disimpan di enum di sana atau

00:53.160 --> 00:56.440
di tipe di sana dan, oleh karena itu, di sini saya tidak ingin

00:56.440 --> 00:58.990
selalu menggunakan enum karena saya ingin menampilkan

00:58.990 --> 01:02.180
tipe literal string.

01:02.180 --> 01:06.190
Jadi, apa yang akan kita lakukan di sini di dalam fungsi listener kita adalah,

01:06.190 --> 01:08.690
sebelum kita menyimpan proyek dan merendernya,

01:08.690 --> 01:10.470
kita ingin memfilternya.

01:10.470 --> 01:13.020
Jadi, di sini kita memiliki proyek yang relevan,

01:13.020 --> 01:16.660
bisa dibilang, dan itu, tentu saja, proyek yang disaring.

01:16.660 --> 01:19.070
Metode filter adalah metode default yang

01:19.070 --> 01:21.460
ada pada array apa pun dalam JavaScript.

01:21.460 --> 01:23.690
Ini mengambil fungsi yang kemudian dijalankan

01:23.690 --> 01:26.820
pada setiap item dalam larik proyek dan ketika fungsi

01:26.820 --> 01:29.660
ini di sini kembali benar, kami menyimpan item dalam

01:29.660 --> 01:30.940
larik yang baru dibuat

01:30.940 --> 01:35.040
yang kemudian disimpan dalam proyek yang relevan.

01:35.040 --> 01:38.130
Jika fungsi ini mengembalikan false, kita membuang item tersebut,

01:38.130 --> 01:39.770
bukan dari daftar asli, tetapi dalam

01:39.770 --> 01:41.660
daftar baru yang dihasilkan dan yang

01:41.660 --> 01:44.230
disimpan dalam proyek yang relevan.

01:44.230 --> 01:46.600
Jadi, di sini, kita harus mengembalikan true atau false tergantung

01:46.600 --> 01:48.810
pada apakah kita ingin menyimpan proyek atau tidak.

01:48.810 --> 01:52.430
Dan untuk itu, tentu saja, kita hanya perlu melihat statusnya.

01:52.430 --> 01:55.310
Status proyek adalah enum dan kita ingin

01:55.310 --> 01:59.070
memeriksa apakah status proyek sama dengan status

01:59.070 --> 02:03.590
proyek aktif jika kita berada dalam daftar proyek aktif, jadi

02:03.590 --> 02:05.790
jika properti jenisnya aktif,

02:05.790 --> 02:07.940
atau jika status proyek selesai

02:07.940 --> 02:12.270
jika kita berada dalam daftar selesai.

02:12.270 --> 02:15.430
Jadi di sini saya benar-benar akan menulis a- badan fungsi

02:15.430 --> 02:17.250
nyata dengan membungkus ini dengan

02:17.250 --> 02:20.100
tanda kurung kurawal, tidak menggunakan pintasan

02:20.100 --> 02:23.480
fungsi panah dan kemudian kita dapat memeriksa, jika jenis

02:23.480 --> 02:25.540
ini sama dengan aktif, maka saya ingin

02:26.800 --> 02:31.480
mengembalikan hasil pemeriksaan ini di sini jika tidak dan oleh karena itu,

02:31.480 --> 02:34.130
cukup setelah pernyataan jika ini, saya ingin

02:34.130 --> 02:37.150
mengembalikan perbandingan ke status proyek yang

02:37.150 --> 02:40.160
sudah selesai.

02:40.160 --> 02:42.220
Dengan itu, kita mendapatkan proyek-proyek yang

02:42.220 --> 02:43.520
relevan yang sekarang bisa kita

02:43.520 --> 02:45.490
simpan di sini, dalam proyek yang ditugaskan.

02:45.490 --> 02:47.070
Jadi, sekarang mari kita lihat, apakah berhasil atau tidak.

02:47.070 --> 02:48.053
Jika saya memuat ulang,

02:49.310 --> 02:51.570
dan kita menambahkan proyek di sini, apakah

02:51.570 --> 02:52.743
ini berfungsi?

02:54.950 --> 02:55.930
Ini berfungsi dan, Anda

02:55.930 --> 02:58.050
lihat, ini hanya ditambahkan ke proyek aktif,

02:58.050 --> 03:00.020
bukan ke proyek yang sudah selesai.

03:00.020 --> 03:02.390
Namun, jika saya menambahkan proyek kedua di sini,

03:02.390 --> 03:04.740
kita masih memiliki duplikasi yang terjadi.

03:04.740 --> 03:08.720
Sekarang, itu terkait dengan cara kita merender proyek kita.

03:08.720 --> 03:10.520
Di dalam proyek render, kami

03:10.520 --> 03:13.430
selalu memeriksa semua item proyek kami dan menambahkannya

03:13.430 --> 03:15.090
ke daftar.

03:15.090 --> 03:16.640
Sekarang, masalahnya, tentu

03:16.640 --> 03:19.900
saja, adalah bahwa kita mungkin sudah memiliki item proyek

03:19.900 --> 03:21.950
yang dirender ke layar.

03:21.950 --> 03:25.020
Sekarang, solusi terbaik di sini adalah menjalankan

03:25.020 --> 03:27.450
beberapa perbandingan di mana Anda memeriksa

03:27.450 --> 03:30.170
apa yang sudah di-render dan apa yang perlu Anda

03:30.170 --> 03:31.730
render, untuk menghindari

03:31.730 --> 03:34.110
render ulang yang tidak perlu.

03:34.110 --> 03:35.760
Namun demikian, menjalankan perbandingan

03:35.760 --> 03:38.440
ini dengan melihat DOM yang sesungguhnya, juga menghabiskan cukup

03:38.440 --> 03:39.710
banyak performa.

03:39.710 --> 03:43.100
Untuk aplikasi ini di sini, oleh karena itu tidak masalah untuk hanya

03:43.100 --> 03:45.250
mengambil elemen daftar kita dan menghapus

03:45.250 --> 03:48.720
semua kontennya dengan mengatur HTML bagian dalam ke string kosong,

03:48.720 --> 03:49.640
yang berarti kita

03:49.640 --> 03:52.460
menyingkirkan semua item daftar dan kemudian merender

03:52.460 --> 03:53.710
ulang.

03:53.710 --> 03:56.350
Itu berarti bahwa setiap kali kita menambahkan proyek

03:56.350 --> 03:58.470
baru, kita merender ulang semua proyek tetapi,

03:58.470 --> 04:00.210
untuk tujuan proyek ini di sini, untuk

04:00.210 --> 04:01.670
aplikasi ini di sini, itu benar-benar

04:01.670 --> 04:03.490
baik-baik saja.

04:03.490 --> 04:05.410
Jadi, sekarang dengan itu, jika kita menyimpannya,

04:05.410 --> 04:06.987
mari kita coba lagi.

04:06.987 --> 04:10.540
"Apakah ini berhasil? " adalah proyek pertama dan sekarang

04:10.540 --> 04:12.960
jika saya menambahkan proyek lain di sini, Anda

04:12.960 --> 04:14.530
lihat, itu akan ditambahkan

04:14.530 --> 04:17.453
tetapi proyek lain tidak ditambahkan lagi.

04:18.430 --> 04:21.870
Ups dan, sekarang, di sini saya mendapat (bergumam) kesalahan karena deskripsinya

04:21.870 --> 04:23.540
tidak cukup panjang.

04:23.540 --> 04:26.230
Jadi, sekarang ini semua berfungsi, seperti yang

04:26.230 --> 04:28.150
Anda ketahui, dan kami merender proyek-proyek

04:28.150 --> 04:30.090
ini sebagaimana seharusnya dirender,

04:30.090 --> 04:32.170
yang tentu saja benar.

04:32.170 --> 04:35.050
Dan, dengan itu, aplikasi tidak terlihat terlalu buruk.

04:35.050 --> 04:36.890
Satu hal yang kurang adalah fungsionalitas

04:36.890 --> 04:39.550
seret dan lepas atau cara untuk mendapatkan

04:39.550 --> 04:44.040
proyek dari daftar pertama ini ke daftar kedua.

04:44.040 --> 04:45.180
Kami juga tidak benar-benar

04:45.180 --> 04:46.930
mengeluarkan informasi lain yang kami

04:46.930 --> 04:48.900
dapatkan, deskripsi dan jumlah orang.

04:48.900 --> 04:50.750
Jadi, itu juga tidak bagus.

04:50.750 --> 04:54.980
Dan, kita juga memiliki sedikit duplikasi kode ketika kita benar-benar

04:54.980 --> 04:57.620
melihat daftar proyek pada klausa ini

04:57.620 --> 04:58.910
di sini dan pada klausa

04:58.910 --> 05:01.000
input proyek.

05:01.000 --> 05:04.270
Di keduanya kita memiliki elemen template, elemen host dan elemen

05:04.270 --> 05:06.970
dan kita memiliki metode attach dan seterusnya.

05:06.970 --> 05:09.180
Jadi, saya ingin meningkatkan kode di sini

05:09.180 --> 05:11.800
dan menggunakan kembali beberapa kode dengan menggunakan

05:11.800 --> 05:14.480
pewarisan dan menggunakan klausa dasar dan, setelah

05:14.480 --> 05:16.850
itu, saya juga ingin membuat klausa khusus untuk

05:16.850 --> 05:18.580
setiap item proyek di mana kita kemudian

05:18.580 --> 05:20.340
hanya menginstansiasi klausa item

05:20.340 --> 05:23.725
proyek itu di dalam daftar proyek alih-alih menambahkan item daftar

05:23.725 --> 05:27.050
secara manual, seperti ini dan kemudian di dalam klausa item proyek

05:27.050 --> 05:30.700
'yang akan dibuat' itu, bagian penambahan itu harus terjadi dan kemudian

05:30.700 --> 05:40.540
saya juga ingin mengeluarkan lebih banyak informasi tentang item proyek, termasuk deskripsi dan jumlah orang yang ditugaskan.

05:40.540 --> 05:42.080
Jadi, ada beberapa pekerjaan yang

05:42.080 --> 05:44.520
harus dilakukan dan, sebelum kita mengerjakan item

05:44.520 --> 05:47.120
proyek dalam bentuk yang saya inginkan, mari kita benar-benar

05:47.120 --> 05:48.660
memastikan bahwa kita, pertama-tama

05:48.660 --> 05:53.660
menambahkan beberapa pewarisan untuk membuat daftar proyek dan input proyek kita, atau bagian tertentu

05:53.800 --> 05:57.693
darinya, lebih dapat digunakan kembali.
