WEBVTT

00:02.120 --> 00:04.590
Instructeur: Zoals ik in de vorige lezing al zei, is

00:04.590 --> 00:06.080
de watch mode een goed begin, maar

00:06.080 --> 00:08.910
wat als we meer dan één TypeScript bestand hebben?

00:08.910 --> 00:13.370
Wat als we ook een analyse hebben. ts bestand waarin we hypothetisch

00:13.370 --> 00:18.370
analytische gegevens naar onze server sturen?

00:18.530 --> 00:21.430
Nu, om er iets in te hebben, zet ik er gewoon

00:21.430 --> 00:24.240
een console in. log verklaring, maar natuurlijk

00:24.240 --> 00:26.710
zou je hier HTTP verzoeken naar je analytics

00:26.710 --> 00:29.180
dienst kunnen sturen zoals ik zei.

00:29.180 --> 00:32.685
Dus laten we zeggen dat we dit bestand ook geïmporteerd

00:32.685 --> 00:36.420
hebben in onze index. html bestand.

00:36.420 --> 00:40.320
Als we naar de analyse wijzen. js hier die nog niet bestaat, maar

00:40.320 --> 00:41.730
die zal bestaan na compilatie,

00:41.730 --> 00:44.760
dan kunnen we deze twee bestanden laden en natuurlijk

00:44.760 --> 00:46.660
willen we beide bestanden compileren

00:46.660 --> 00:50.900
wanneer een van hen verandert.

00:50.900 --> 00:52.490
Daarvoor zou het mooi zijn als

00:52.490 --> 00:55.320
we een algemene wachtstand konden instellen, waarbij

00:55.320 --> 00:57.630
we gewoon tsc uitvoeren, zonder een bestand

00:57.630 --> 00:59.790
aan te wijzen, en hij kijkt gewoon naar

00:59.790 --> 01:02.480
onze hele projectmap en hercompileert elk TypeScript-bestand

01:02.480 --> 01:05.823
dat zou kunnen veranderen.

01:06.720 --> 01:08.960
Nou, het blijkt dat dit mogelijk is.

01:08.960 --> 01:11.340
Daarvoor moeten we TypeScript vertellen

01:11.340 --> 01:15.020
dat dit hier een project is dat met TypeScript beheerd

01:15.020 --> 01:16.750
moet worden en dat doen we

01:16.750 --> 01:18.980
door allereerst, en dat hoeven

01:18.980 --> 01:20.700
we maar één keer te doen,

01:20.700 --> 01:23.710
tsc --init uit te voeren.

01:23.710 --> 01:26.170
Dus ik wijs hier niet naar een specifiek bestand,

01:26.170 --> 01:29.540
ik draai gewoon tsc en dan --init hier en nogmaals, dit is maar

01:29.540 --> 01:31.230
één keer nodig.

01:31.230 --> 01:33.530
Het initialiseert het project waarin u dit

01:33.530 --> 01:36.390
commando uitvoert als een TypeScript-project.

01:36.390 --> 01:39.910
Dat betekent dat het TypeScript nu zal vertellen dat alles

01:39.910 --> 01:41.850
in de map waar u dit commando uitvoert

01:41.850 --> 01:44.160
en daarom is het belangrijk dat u naar de

01:44.160 --> 01:46.470
juiste map navigeert voordat u dit commando

01:46.470 --> 01:48.070
uitvoert met de ingebouwde

01:48.070 --> 01:50.550
terminal hier in VS Code.

01:50.550 --> 01:52.910
Ik ben automatisch in deze projectmap waar

01:52.910 --> 01:55.740
mijn bestanden staan zodat dit project nu beheerd

01:55.740 --> 01:57.370
wordt door TypeScript.

01:57.370 --> 01:58.400
Dus laten we op Enter drukken

01:58.400 --> 02:02.634
en wat dit doet is het creëren van deze tsconfig. json bestand.

02:02.634 --> 02:06.580
Dit is eigenlijk de indicator voor TypeScript dat het

02:06.580 --> 02:09.950
project waarin dit bestand staat en alle submappen

02:09.950 --> 02:12.239
van deze map door TypeScript beheerd

02:12.239 --> 02:14.710
moeten worden.

02:14.710 --> 02:16.080
Nu, als we in dit bestand kijken,

02:16.080 --> 02:17.860
zien we een heleboel opties, de meeste

02:17.860 --> 02:19.330
uitgecommentarieerd, ze zijn

02:19.330 --> 02:22.090
er alleen zodat je kunt zien dat je ze kunt instellen en je hebt

02:22.090 --> 02:24.500
hier ook een korte uitleg, maar daar hoeven we ons nu

02:24.500 --> 02:26.380
geen zorgen over te maken.

02:26.380 --> 02:29.040
We duiken er zo in.

02:29.040 --> 02:31.610
Laten we voorlopig dit bestand hier sluiten

02:32.800 --> 02:35.100
en eens kijken wat dit ons oplevert,

02:35.100 --> 02:36.550
want wat het ons oplevert

02:36.550 --> 02:39.870
is dat we nu gewoon tsc kunnen uitvoeren zonder naar

02:39.870 --> 02:42.610
een specifiek bestand te wijzen.

02:42.610 --> 02:45.550
En wat dit zal doen is TypeScript vertellen

02:45.550 --> 02:49.080
om door te gaan en alle TypeScript bestanden te compileren

02:49.080 --> 02:53.090
zodat alle . ts bestanden die het kan vinden in

02:53.090 --> 02:54.770
dit project, dus als ik hier op

02:54.770 --> 02:56.830
Enter druk, zie je, dit duurt even,

02:56.830 --> 03:00.530
en nu hebben we deze analyse. js bestand en deze

03:00.530 --> 03:02.620
app. js bestand.

03:02.620 --> 03:05.160
Nu de analyse. js bestand werd net aangemaakt

03:05.160 --> 03:08.010
door TypeScript omdat het vond dat we de analytics

03:08.010 --> 03:10.060
hebben. ts bestand en zoals

03:10.060 --> 03:13.390
ik al zei, zal het nu alle TypeScript bestanden in het project

03:13.390 --> 03:14.730
compileren.

03:14.730 --> 03:17.660
En natuurlijk kan dit ook worden gecombineerd met de wachtstand.

03:17.660 --> 03:20.630
U kunt tsc -w of --watch uitvoeren zoals ik

03:20.630 --> 03:23.420
eerder liet zien en dit zal nu de watch mode

03:23.420 --> 03:26.970
inschakelen voor alle TypeScript bestanden.

03:26.970 --> 03:29.590
Dus als ik er een verander en ik sla het op, dan

03:29.590 --> 03:31.920
wordt het opnieuw gecompileerd.

03:31.920 --> 03:33.840
Het zal dat bestand dat veranderd is opnieuw

03:33.840 --> 03:36.100
compileren en dus ook alle gereflecteerde veranderingen

03:36.100 --> 03:37.800
in het JavaScript-bestand.

03:37.800 --> 03:38.633
En het is nu hier.

03:38.633 --> 03:41.430
Als ik terug ga naar mijn pagina, zien we ook het verzenden van

03:41.430 --> 03:44.463
gegevens omdat nu de analytics. ts bestand werd ook samengesteld.
