WEBVTT

00:02.210 --> 00:04.200
ผู้สอน: ดังนั้นเราจึงได้เซิร์ฟเวอร์จำลองพื้นฐานนี้และทำงาน

00:04.200 --> 00:08.380
แต่แน่นอนว่าเซิร์ฟเวอร์นี้ไม่ได้ทำอะไรที่เป็นประโยชน์

00:08.380 --> 00:11.430
ตอนนี้ ฉันบอกว่าฉันต้องการสร้างส่วนที่เหลือของ API ที่ง่ายมาก

00:11.430 --> 00:13.110
และสำหรับสิ่งนั้น ฉันจะสร้างโฟลเดอร์ย่อยใหม่ในโฟลเดอร์ต้นทาง

00:13.110 --> 00:16.830
ซึ่งฉันจะตั้งชื่อเส้นทาง

00:16.830 --> 00:19.870
ในนั้น ฉันจะเพิ่มไฟล์ที่ควรจัดการชุดของเส้นทางของ

00:19.870 --> 00:22.540
API ส่วนที่เหลือนี้ และตอนนี้ก็ขึ้นอยู่กับคุณว่าคุณต้องการสร้าง

00:22.540 --> 00:25.710
API ประเภทใด

00:25.710 --> 00:28.520
ฉันจะสร้าง todo API ที่นี่ ถ้าคุณใช้ส่วน

00:28.520 --> 00:32.140
React ใน TypeScript ฟังดูคุ้นๆ เพราะที่นั่นเราสร้างแอป

00:32.140 --> 00:34.530
todo ด้วย ซึ่งแยกออกจากส่วนนั้นโดยสิ้นเชิง

00:34.530 --> 00:38.710
แต่จะไม่ทำงานร่วมกับ React ของ แน่นอนคุณสามารถเชื่อมต่อได้ด้วยตัวเอง

00:38.710 --> 00:41.250
แต่ที่นี่ฉันจะสร้าง todo API แบบง่ายๆ

00:41.250 --> 00:48.350
เพื่อให้เราเห็นว่า TypeScript ทำงานร่วมกับ Node และ Express อย่างไร

00:48.350 --> 00:51.400
แอปพลิเคชันที่เรากำลังสร้างไม่ซับซ้อนเกินไป

00:51.400 --> 00:54.760
แต่จะมีแนวคิดที่น่าสนใจมากมาย

00:54.760 --> 01:01.800
ที่นี่ เราจะเพิ่มเส้นทางสิ่งที่ต้องทำของฉันโดยการเพิ่มสิ่งที่ต้องทำ

01:01.800 --> 01:01.800
ts

01:01.800 --> 01:06.630
ในโฟลเดอร์ route และในนั้น ตอนนี้ฉันต้องการใช้ Express js เพื่อลงทะเบียนบางเส้นทาง

01:06.630 --> 01:09.730
เพื่อสิ่งนั้น ฉันจะนำเข้าบางอย่างจาก

01:09.730 --> 01:13.700
Express และตอนนี้บางอย่างคือเราเตอร์

01:13.700 --> 01:16.160
ตอนนี้ไวยากรณ์ JS ทั่วไปสำหรับสิ่งนั้นโดยทั่วไปคือคุณนำเข้า

01:16.160 --> 01:25.673
Express โดยใช้ need express จากนั้นในบรรทัดใหม่ คุณมักจะเห็นโค้ดที่เราทำสิ่งนี้ที่นี่

01:27.090 --> 01:28.180
ตอนนี้เป็นสิ่งที่คุณสามารถทำได้

01:28.180 --> 01:30.130
แต่ที่นี่ฉันจะนำเข้าแบบนั้น

01:31.130 --> 01:34.120
ตอนนี้สิ่งนี้ให้เราเตอร์แก่เรา และเราสามารถเรียกเราเตอร์ได้ที่นี่ว่าเป็นฟังก์ชัน

01:34.120 --> 01:36.750
และสิ่งนี้ช่วยให้เราสามารถลงทะเบียนมิดเดิลแวร์ได้

01:36.750 --> 01:45.540
ดังนั้นในตอนท้าย กำหนดเส้นทางจุดสิ้นสุดสำหรับคำขอที่เข้ามา ซึ่งเราจะดำเนินการตามตรรกะบางอย่างตามคำขอเหล่านี้

01:45.540 --> 01:48.980
ตอนนี้สำหรับแอป todo ฉันต้องการลงทะเบียนเส้นทางพื้นฐานบางเส้นทาง

01:48.980 --> 01:55.760
โพสต์เส้นทางที่ slash ไม่มีอะไรที่เราจะเพิ่ม todo ใหม่ได้ ดังนั้นที่นี่เราต้องการโค้ดบางฟังก์ชัน ซึ่งจะเพิ่ม

01:55.760 --> 01:58.860
todo ที่ไหนสักแห่ง สำหรับตอนนี้ฉัน จะระบุเพียงรหัสใด

01:58.860 --> 02:03.380
ๆ เพียงตั้งค่าเส้นทางโดยทั่วไปที่นี่

02:03.380 --> 02:05.110
ดังนั้นเราจึงมีคำขอโพสต์

02:05.110 --> 02:08.770
จากนั้นได้รับคำขอ รับสิ่งที่ต้องทำทั้งหมด สมมุติว่า

02:08.770 --> 02:12.900
จากนั้นสมมติว่าคำขอแพตช์เพื่ออัปเดตสิ่งที่ต้องทำ

02:12.900 --> 02:15.520
และที่นั่นฉันคาดว่าจะได้รับ id ส่วนไดนามิกใน

02:15.520 --> 02:19.280
URL และจากนั้นที่นี่ยังมี คำขอลบเพื่อลบสิ่งที่ต้องทำโดย

02:19.280 --> 02:22.700
id

02:22.700 --> 02:28.620
นี่คือเส้นทางของฉัน และตอนนี้เราสามารถส่งออกเราเตอร์ที่กำหนดค่าไว้เป็นค่าเริ่มต้นในไฟล์นี้

02:28.620 --> 02:30.930
ตอนนี้จะไม่มีอะไรเกิดขึ้นบนเส้นทางเหล่านี้แล้วใช่ไหม?

02:30.930 --> 02:32.510
ฉันยังไม่ได้ตั้งค่าฟังก์ชันใดๆ

02:32.510 --> 02:38.620
ที่จะดำเนินการเมื่อคำขอไปถึงปลายทางเหล่านี้ แต่อย่างน้อยตอนนี้เราก็ทราบเส้นทางที่เราต้องการแล้ว

02:38.620 --> 02:41.740
เราจะเพิ่มฟังก์ชันในขั้นตอนที่สองในภายหลัง

02:41.740 --> 02:48.320
สำหรับตอนนี้ มาเชื่อมต่อเราเตอร์ที่นี่ เส้นทางที่กำหนดค่าไปยังเซิร์ฟเวอร์ที่กำลังทำงานอยู่ของเราที่นี่ในแอป

02:48.320 --> 02:48.320
ts

02:48.320 --> 02:53.211
และในการทำเช่นนั้น เราเพียงนำเข้าของเรา สมมุติว่า todoRoutes

02:53.211 --> 02:54.290
จาก . /เส้นทาง/สิ่งที่ต้องทำ

02:56.040 --> 03:01.610
ดังนั้นเราจึงนำเข้าเราเตอร์ที่ส่งออกในสิ่งที่ต้องทำไปยังแอป

03:01.610 --> 03:01.610
ts

03:01.610 --> 03:03.390
และตอนนี้เราต้องเชื่อมต่อกับแอปพลิเคชัน

03:03.390 --> 03:10.800
Express ที่กำลังทำงานอยู่ของเราโดยใช้แอพ ใช้ จากนั้นสมมติว่าเราต้องการส่งต่อคำขอทั้งหมดที่ขึ้นต้นด้วย

03:10.800 --> 03:14.600
/todos ไปยัง todoRoutes ของเรา ดังนั้นคำขอที่กำหนดเป้าหมายไปยัง

03:14.600 --> 03:18.703
URL อื่นจะไม่ถูกจัดการที่นั่น

03:19.920 --> 03:25.983
เมื่อพูดถึงการจัดการ ในการตั้งค่ามิดเดิลแวร์ Express ที่เรากำลังใช้อยู่นี้ เรายังสามารถตั้งค่ามิดเดิลแวร์ที่จะจัดการกับข้อผิดพลาด

03:25.983 --> 03:33.610
ดังนั้นข้อผิดพลาดใดๆ ที่อาจเกิดขึ้นในโค้ดของเรา และเราทำสิ่งนี้ด้วยแอป

03:33.610 --> 03:33.610
ใช้งาน

03:33.610 --> 03:37.470
จากนั้นเราตั้งค่าฟังก์ชันมิดเดิลแวร์ทั่วไปที่นี่ ซึ่งเราได้รับคำขอ การตอบกลับ

03:37.470 --> 03:40.640
และฟังก์ชันถัดไป และขอย้ำอีกครั้งว่า ทั้งหมดนี้ต้องการให้คุณรู้จัก

03:40.640 --> 03:48.330
Express บางอย่าง js และรู้จัก Node.js

03:48.330 --> 03:48.330
ฉันจะไม่ลงลึกถึงวิธีการทำงานของมิดเดิลแวร์ใน

03:51.160 --> 03:52.970
Express และมิดเดิลแวร์คืออะไร

03:52.970 --> 03:54.960
นั่นคือฟังก์ชันมิดเดิลแวร์ปกติที่นี่ ซึ่งคุณควรรู้จาก

03:54.960 --> 03:59.050
Express js และคุณอาจทราบด้วยว่ามีทางเลือกอื่นสำหรับฟังก์ชันนั้น

03:59.050 --> 04:18.750
ฟังก์ชันที่ใช้พารามิเตอร์สี่ตัวโดยที่พารามิเตอร์ตัวแรกเป็นข้อผิดพลาดที่อาจเกิดขึ้น และตอนนี้นี่คือข้อผิดพลาดในการจัดการฟังก์ชันมิดเดิลแวร์ ซึ่ง Express จะเริ่มทำงานโดยอัตโนมัติหากอยู่ใน มิดเดิลแวร์อื่น ๆ ก่อนหน้านี้คุณมีข้อผิดพลาด

04:18.750 --> 04:21.200
นี่คือข้อผิดพลาดของฉันในการจัดการกับฟังก์ชันมิดเดิลแวร์

04:21.200 --> 04:23.380
และคุณเห็นไหมว่า เรามีข้อผิดพลาดมากมายที่นี่

04:23.380 --> 04:26.260
ข้อผิดพลาดมากมายเพราะนี่คือประเภททั้งหมด

04:26.260 --> 04:29.030
และเราก็ไม่ได้ใช้ค่าเหล่านี้ทั้งหมดด้วย

04:29.030 --> 04:33.080
แต่ขอผมทำให้ชัดเจนว่าเรามีประเภทประเภทใดที่นี่

04:33.080 --> 04:39.890
นี่จะเป็นประเภท Error นี่จะเป็นประเภทด่วน

04:39.890 --> 04:39.890
คำขอ

04:39.890 --> 04:43.020
หรือคุณเพียงนำเข้าคำขอที่นี่เป็นการนำเข้าจากด่วนที่มีชื่อพิเศษ

04:43.020 --> 04:46.670
ซึ่งจะใช้งานได้เช่นกันหากคุณติดตั้งประเภท Express

04:46.670 --> 04:49.310
ซึ่งเราทำ จากนั้นที่นี่เรายังมีการตอบสนองและ

04:49.310 --> 05:06.680
NextFunction ที่นี่ จากนั้นเราสามารถปรับประเภทของเราได้ ที่นี่ ตอนนี้เป็นประเภทคำขอ นี่คือประเภทการตอบสนอง และนี่คือ NextFunction ซึ่งเราสามารถดำเนินการเพื่อให้คำขอเดินทางต่อไปยังมิดเดิลแวร์ถัดไปในบรรทัด

05:06.680 --> 05:08.590
ตอนนี้เป็นข้อผิดพลาดของเราในการจัดการมิดเดิลแวร์

05:08.590 --> 05:22.690
มันจะเริ่มทำงานเมื่อใดก็ตามที่เรามีข้อผิดพลาดในมิดเดิลแวร์ตัวใดตัวหนึ่งของเรา และในที่นี้ เราสามารถส่งการตอบกลับด้วยข้อมูล JSON ที่เรามีข้อความที่มีข้อผิดพลาด

05:22.690 --> 05:22.690
ข้อความและตำแหน่งที่เราอาจตั้งค่าผิดพลาด

05:22.855 --> 05:24.630
ฉันหมายถึงข้อความ

05:24.630 --> 05:32.460
และที่ซึ่งเราอาจตั้งรหัสสถานะเป็น 500 และแน่นอน คุณสามารถมีฟังก์ชันการจัดการข้อผิดพลาดที่ซับซ้อนกว่าที่ฉันมีที่นี่

05:32.460 --> 05:35.020
แต่ด้วยเหตุนี้ เราได้เพิ่มเส้นทางของเรา

05:35.020 --> 05:40.670
เราได้เพิ่มการจัดการข้อผิดพลาดของเรา มิดเดิลแวร์ ทำไมเราไม่เพิ่มตรรกะบางอย่างให้กับ

05:40.670 --> 05:43.103
API นี้ในการบรรยายครั้งต่อไป
