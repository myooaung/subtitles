WEBVTT

00:02.100 --> 00:04.390
Kursleiter: In größeren React-Anwendungen

00:04.390 --> 00:08.640
arbeitet man natürlich mit mehr als nur useRef und useState.

00:08.640 --> 00:10.950
Um zu verstehen, wie Sie TypeScript dort verwenden,

00:10.950 --> 00:13.460
ist es wirklich immer hilfreich, einfach über die Funktionen

00:13.460 --> 00:15.180
zu fahren, die Sie aufrufen, also die anderen

00:15.180 --> 00:17.090
Hooks, mit denen Sie arbeiten.

00:17.090 --> 00:20.010
Wenn Sie z. B. das Werkzeug useEffect hier in der Komponente

00:20.010 --> 00:22.660
NewTodo aus irgendeinem Grund benötigen, können Sie

00:22.660 --> 00:26.330
es aufrufen und danach einfach den Mauszeiger darüber bewegen, um zu verstehen,

00:26.330 --> 00:29.010
mit welchen Typen es funktioniert.

00:29.010 --> 00:30.960
Zum Beispiel, dass das erste Argument ein

00:30.960 --> 00:33.720
EffectCallback ist, was eine spezielle Funktion ist,

00:33.720 --> 00:37.100
bei der TypeScript dich warnt, wenn du sie falsch einrichtest, dass

00:37.100 --> 00:38.610
das zweite Argument entweder nichts

00:38.610 --> 00:41.480
oder ein Array von irgendetwas ist, solche Dinge, das wird

00:41.480 --> 00:42.997
dir immer helfen, du wirst auch

00:42.997 --> 00:45.930
lernen, dass useEffect zum Beispiel nichts zurückgibt, und

00:45.930 --> 00:49.200
bei useState, wo ich erwähnte, dass du immer ein Array mit genau zwei

00:49.200 --> 00:52.410
Elementen zurückbekommst, nun, das siehst du auch hier, useState

00:52.410 --> 00:56.310
gibt ein Array zurück, das ist, was wir hier sehen, öffnende und schließende Klammer,

00:56.310 --> 01:01.750
wo das erste Element dein generischer Typ ist, also eine Liste von Todos, weil das dein Status-Snapshot ist,

01:01.750 --> 01:08.600
das zweite Element ist ein React.

01:08.600 --> 01:08.600
Die

01:08.600 --> 01:11.370
Dispatch-Funktion ist das, was hier passiert.

01:11.370 --> 01:12.690
Das kann also nützlich sein.

01:12.690 --> 01:15.490
Vielleicht arbeiten Sie auch mit Redux.

01:15.490 --> 01:19.660
Nun, zum Glück, wenn Sie in ihrer Dokumentation tauchen, finden

01:19.660 --> 01:21.360
Sie auch Anweisungen über

01:21.360 --> 01:24.530
die Verwendung von Redux mit TypeScript.

01:24.530 --> 01:27.430
Hier unter Rezepte finden Sie Verwendung mit TypeScript,

01:27.430 --> 01:30.710
und dort können Sie lernen, wie Sie Typen zu Ihren Aktionen und

01:30.710 --> 01:33.270
Reduzierern und zu Ihrem Zustandsmanagement

01:33.270 --> 01:35.540
mit Redux hinzufügen können.

01:35.540 --> 01:38.650
Es ist wirklich einfach, überhaupt nicht komplex,

01:38.650 --> 01:41.520
und fügt eine Menge an Typsicherheit hinzu.

01:41.520 --> 01:43.230
Vielleicht verwenden Sie

01:43.230 --> 01:47.110
auch das React Router-Paket, dieses Paket hier.

01:47.110 --> 01:52.040
Dort finden Sie keine spezifischen TypeScript-Notationen, aber natürlich können Sie

01:52.040 --> 01:54.020
auch dieses Paket in Ihr Projekt installieren,

01:54.020 --> 01:55.340
und zwar mit npm install

01:55.340 --> 01:58.770
dash dash save react dash router dash dom, dem Befehl, mit dem Sie

01:58.770 --> 02:00.740
dieses Paket normalerweise in Ihr React-Projekt

02:00.740 --> 02:03.720
installieren würden.

02:03.720 --> 02:07.000
Dadurch wird das Paket react-router-dom hinzugefügt.

02:07.000 --> 02:10.250
Aber dieses Paket hat keine speziellen Typ-Anweisungen auf

02:10.250 --> 02:12.430
seiner Seite hier, Sie finden hier nichts

02:12.430 --> 02:14.720
TypeScript-spezifisches, zumindest zu

02:14.720 --> 02:17.570
dem Zeitpunkt, an dem ich dies aufzeichne.

02:17.570 --> 02:19.163
Nichtsdestotrotz können wir dies natürlich

02:19.163 --> 02:21.250
auch in einem TypeScript-Projekt verwenden und

02:21.250 --> 02:23.920
dort eine gute Typunterstützung erhalten.

02:23.920 --> 02:25.800
Jetzt, wo es installiert ist, werden

02:25.800 --> 02:29.360
Sie feststellen, dass ich beim Importieren von react-router-dom

02:29.360 --> 02:31.880
keine großartige Typunterstützung habe.

02:31.880 --> 02:33.870
Wenn ich z.B. versuche, hier etwas zu importieren,

02:33.870 --> 02:36.870
erhalte ich bereits eine Warnung, dass keine Deklaration für

02:36.870 --> 02:39.210
das Modul react-router-dom gefunden werden konnte,

02:39.210 --> 02:42.730
so dass es hier keine Typinformationen gefunden hat.

02:42.730 --> 02:45.420
Um das zu beheben, können wir natürlich etwas tun,

02:45.420 --> 02:48.450
was wir schon vorher getan haben, npm install dash dash save

02:48.450 --> 02:52.530
dash dev, at types, slash react dash router dash dom, also heben wir die at-Suchtypen

02:52.530 --> 02:54.620
hier auf, und wir sind wieder gut, das ist

02:54.620 --> 02:56.860
ein Trick, den Sie schon früh im Kurs gelernt

02:56.860 --> 02:59.097
haben, aber natürlich gibt es keinen Grund,

02:59.097 --> 03:02.010
ihn zu vergessen, nur weil wir ein Projekt haben, bei dem

03:02.010 --> 03:03.920
schon vieles mit TypeScript out of the

03:03.920 --> 03:06.790
box funktioniert.

03:06.790 --> 03:08.140
Wenn wir dann etwas hinzufügen,

03:08.140 --> 03:10.810
das nicht mit TypeScript funktioniert, wie dieses

03:10.810 --> 03:13.700
hier, können wir es so hinzufügen, und jetzt kennt es Route

03:13.700 --> 03:15.380
und auch alle anderen Funktionen

03:15.380 --> 03:17.270
aus diesem Paket.

03:17.270 --> 03:21.070
So einfach können Sie also auch hier Unterstützung hinzufügen.

03:21.070 --> 03:23.560
Und so sollte man generell an die Sache herangehen, einen

03:23.560 --> 03:26.010
Blick in die offiziellen Dokumente werfen, prüfen, ob

03:26.010 --> 03:29.030
dort Anweisungen zur Verwendung mit TypeScript zu finden sind, wenn

03:29.030 --> 03:31.590
nicht, es installieren und prüfen, ob es eingebaute Typunterstützung

03:31.590 --> 03:33.720
hat, so dass man zumindest gute Autovervollständigungs-

03:33.720 --> 03:39.090
und Kompilierungsunterstützung erhält, und wenn auch das nicht vorhanden ist, ein Typenpaket installieren, wie

03:39.090 --> 03:42.080
wir es hier getan haben.

03:42.080 --> 03:43.980
Und das war's dann auch schon mit diesem

03:43.980 --> 03:46.410
Modul. So können Sie TypeScript und all seine

03:46.410 --> 03:49.920
erstaunlichen Funktionen in einer React-App nutzen, und natürlich

03:49.920 --> 03:52.450
gilt alles, was Sie in diesem Kurs lernen, auch

03:52.450 --> 03:54.370
für eine React-App.

03:54.370 --> 03:56.380
Sie können alle TypeScript-Funktionen, die Sie in diesem

03:56.380 --> 03:59.130
Kurs kennen gelernt haben, in einem React-Projekt verwenden.
