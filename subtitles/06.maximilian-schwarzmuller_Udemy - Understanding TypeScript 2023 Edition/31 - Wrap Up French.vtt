WEBVTT

00:02.150 --> 00:04.220
- : Maintenant, avec cela, nous avons eu un aperçu

00:04.220 --> 00:07.410
complet de tous les types de base et les bases de TypeScript.

00:07.410 --> 00:11.640
Vous comprenez maintenant, je l'espère, comment nous créons et attribuons des

00:11.640 --> 00:14.427
types, comment nous attribuons des types aux variables

00:14.427 --> 00:17.510
et aux paramètres, et pourquoi nous le faisons.

00:17.510 --> 00:20.740
Comment les affectations de type et les types pourraient différer

00:20.740 --> 00:24.770
des contrôles de type JavaScript : JavaScript utilise des types d'exécution,

00:24.770 --> 00:27.310
et TypeScript utilise des types statiques qui comptent

00:27.310 --> 00:29.400
pendant le développement.

00:29.400 --> 00:31.710
Le code JavaScript construit ne comprend

00:31.710 --> 00:34.410
donc pas d'affectations de type.

00:34.410 --> 00:36.550
Cela inclut bien sûr toutes les vérifications

00:36.550 --> 00:39.060
de type, parce que c'est du code JavaScript normal,

00:39.060 --> 00:41.730
mais quelque chose comme ça ici...

00:43.050 --> 00:44.910
cela n'est tout simplement pas autorisé en JavaScript.

00:44.910 --> 00:46.280
Cette syntaxe n'est pas prise en charge.

00:46.280 --> 00:47.960
C'est seulement TypeScript.

00:47.960 --> 00:49.550
J'espère que c'est clair.

00:49.550 --> 00:52.740
Ensuite, nous nous sommes intéressés aux nombres, aux chaînes de caractères

00:52.740 --> 00:55.750
et aux booléens, aux types de fonctions et à la définition des types

00:55.750 --> 00:58.510
de retour, des types d'arguments, ainsi qu'à la description

00:58.510 --> 01:00.160
du type d'une fonction globale, ce qui

01:00.160 --> 01:02.490
peut être utile si vous voulez avoir une variable qui

01:02.490 --> 01:04.780
contient une fonction.

01:04.780 --> 01:07.890
Nous nous sommes penchés sur les objets, les tableaux et les enums et sur la manière

01:07.890 --> 01:10.140
dont ils peuvent être intéressants et utiles.

01:10.140 --> 01:12.030
Il en va de même pour les tuples.

01:12.030 --> 01:16.160
Et maintenant, nous avons également jeté un coup d'œil aux alias, aux alias

01:16.160 --> 01:18.605
de types, où vous pouvez fusionner des types complexes

01:18.605 --> 01:21.220
en alias que vous pouvez réutiliser.

01:21.220 --> 01:23.840
Nous avons examiné les types littéraux et les types

01:23.840 --> 01:25.840
d'union, qui peuvent être utiles pour

01:25.840 --> 01:29.550
les scénarios dans lesquels vous attendez plus d'un type possible.

01:29.550 --> 01:33.455
Et maintenant, à la fin, nous avons également jeté un coup d'œil à

01:33.455 --> 01:35.956
unknown et never, qui sont des types de niche

01:35.956 --> 01:39.430
mais qui, dans leur niche, peuvent être très utiles.

01:39.430 --> 01:40.970
À partir de ces bases, nous allons

01:40.970 --> 01:43.180
approfondir certains aspects et, bien sûr,

01:43.180 --> 01:45.630
explorer d'autres types et constructions JavaScript

01:45.630 --> 01:49.163
pour lesquels les types peuvent être utiles.
