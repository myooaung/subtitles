WEBVTT

00:02.180 --> 00:04.910
Instructeur: Visueel kunnen we slepen en neerzetten,

00:04.910 --> 00:07.240
maar technisch gezien heeft ons script in JavaScript

00:07.240 --> 00:10.410
natuurlijk geen idee van wat er gebeurt.

00:10.410 --> 00:12.030
Maar voor ons mensen is het duidelijk

00:12.030 --> 00:14.810
dat we precies dit item hierheen slepen.

00:14.810 --> 00:16.300
Maar als we naar onze code

00:16.300 --> 00:20.320
kijken, hoe zou JavaScript dan weten wat waarheen gesleept wordt?

00:20.320 --> 00:21.980
Hoe kunnen we onze staat bijwerken

00:21.980 --> 00:24.440
op basis van de informatie die we nu hebben?

00:24.440 --> 00:26.690
Het zou niet echt mogelijk zijn.

00:26.690 --> 00:28.810
Dus om dat te laten werken in JavaScript

00:28.810 --> 00:30.840
moeten we teruggaan naar de klasse

00:30.840 --> 00:33.960
van ons versleepbare item, het project item.

00:33.960 --> 00:36.710
Daar, in de dragStartHandler, is het loggen van de

00:36.710 --> 00:38.250
gebeurtenis van de console niet

00:38.250 --> 00:39.950
alles wat we moeten doen.

00:39.950 --> 00:42.200
Eigenlijk hoeven we dat helemaal niet te doen.

00:42.200 --> 00:45.070
In plaats daarvan gebruiken we nu ons gebeurtenisobject hier,

00:45.070 --> 00:48.210
want dat heeft een eigenschap voor gegevensoverdracht.

00:48.210 --> 00:50.440
Dit is speciaal voor drag events, dat

00:50.440 --> 00:53.280
je zo'n gegevensoverdracht eigenschap hebt.

00:53.280 --> 00:55.330
En op die eigenschap kun je gegevens koppelen

00:55.330 --> 00:57.530
aan de sleepgebeurtenis en later kun je

00:57.530 --> 00:59.520
die gegevens eruit halen bij een val

00:59.520 --> 01:01.390
en de browser zal in JavaScript achter

01:01.390 --> 01:03.730
de schermen die gegevens opslaan tijdens

01:03.730 --> 01:06.430
de sleepoperatie en ervoor zorgen dat de gegevens

01:06.430 --> 01:09.470
die je krijgt als de val plaatsvindt dezelfde gegevens

01:09.470 --> 01:12.020
zijn die je hier koppelt.

01:12.020 --> 01:15.520
Daarvoor kun je setData aanroepen bij de gegevensoverdracht,

01:15.520 --> 01:18.910
maar de gegevensoverdracht kan eigenlijk nul zijn.

01:18.910 --> 01:21.080
Dus we moeten hier een uitroepteken plaatsen,

01:21.080 --> 01:23.460
we weten natuurlijk dat het hier niet nul wordt.

01:23.460 --> 01:25.700
Je vraagt je misschien af waarom het een nul kan zijn?

01:25.700 --> 01:29.060
De sleepgebeurtenis is altijd dezelfde soort gebeurtenis,

01:29.060 --> 01:31.340
maar op basis van welke luisteraar het triggert

01:31.340 --> 01:34.190
of naar welke exacte gebeurtenis je luistert, is gegevensoverdracht

01:34.190 --> 01:37.520
niet noodzakelijk beschikbaar.

01:37.520 --> 01:39.896
Dus niet alle drag-gerelateerde gebeurtenissen

01:39.896 --> 01:42.640
geven je een event object dat het data transfer

01:42.640 --> 01:44.073
object heeft.

01:45.320 --> 01:46.620
De dragStartHandler die

01:46.620 --> 01:49.080
afgaat op de sleepstartgebeurtenis heeft

01:49.080 --> 01:52.840
het echter wel, dus hier kunnen we veilig setData aanroepen.

01:52.840 --> 01:56.330
En nu neemt setData hier twee argumenten.

01:56.330 --> 01:59.900
Het eerste argument is een identificatie van het formaat

01:59.900 --> 02:01.320
van de gegevens, en daar

02:01.320 --> 02:04.970
heb je bepaalde mogelijke formaten beschikbaar.

02:04.970 --> 02:08.210
In de bijlage vindt u een diepe duik in slepen en neerzetten met JavaScript

02:08.210 --> 02:10.890
waar u veel meer over te weten kunt komen.

02:10.890 --> 02:12.270
Je leert er trouwens ook meer

02:12.270 --> 02:15.140
over in mijn cursus JavaScript Complete Guide.

02:15.140 --> 02:18.390
Hier hebben we het text/plain formaat nodig, wat betekent

02:18.390 --> 02:20.010
dat we gewoon wat platte tekst

02:20.010 --> 02:25.430
gaan bijvoegen met gegevens die worden overgedragen, en dat is belangrijk.

02:25.430 --> 02:28.250
We gaan onze objecten hier niet vastmaken,

02:28.250 --> 02:29.740
ons project zelf, we blijven

02:29.740 --> 02:31.390
vastzitten.

02:31.390 --> 02:34.340
Dus niet het complete project dat hier kan worden weergegeven.

02:34.340 --> 02:37.955
In plaats daarvan volstaat het om de ID van het

02:37.955 --> 02:41.645
project toe te voegen, omdat we dan later dat project

02:41.645 --> 02:44.870
kunnen ophalen uit onze staat.

02:44.870 --> 02:47.320
Dus het vastmaken van de ID is alles wat we moeten doen.

02:47.320 --> 02:50.240
We willen slechts een kleine hoeveelheid gegevens overdragen,

02:50.240 --> 02:52.053
dit bespaart ons ook wat geheugen.

02:53.100 --> 02:56.300
Dus daarmee koppelen we gegevens aan de sleepgebeurtenis.

02:56.300 --> 02:58.330
Een ander ding dat ik wil doen is, bij de

02:58.330 --> 03:00.610
gegevensoverdracht waar we weer het uitroepteken

03:00.610 --> 03:02.340
moeten toevoegen, zet ik de eigenschap

03:02.340 --> 03:05.430
effect Toegestaan op verplaatsen.

03:05.430 --> 03:08.610
Dit bepaalt in feite hoe de cursor eruit zal zien, en vertelt

03:08.610 --> 03:12.440
de browser een beetje over onze bedoeling, dat we van plan zijn een

03:12.440 --> 03:15.200
element van A naar B te verplaatsen.

03:15.200 --> 03:16.760
Een alternatief zou kunnen zijn

03:16.760 --> 03:19.230
kopiëren, waarbij je dan een andere cursor krijgt

03:19.230 --> 03:20.820
die de gebruiker aangeeft dat je

03:20.820 --> 03:23.120
kopieert en niet verplaatst, maar hier willen

03:23.120 --> 03:25.140
we het element verplaatsen, wat betekent

03:25.140 --> 03:26.580
dat we bij een val het element

03:26.580 --> 03:28.810
op zijn oorspronkelijke plaats verwijderen

03:28.810 --> 03:31.360
en op de nieuwe plaats toevoegen.

03:31.360 --> 03:34.940
Dus nu zijn er gegevens bijgevoegd en dat is stap nummer één.

03:34.940 --> 03:36.870
Laten we nu teruggaan naar de plaats waar

03:36.870 --> 03:38.470
we de drop willen laten plaatsvinden,

03:38.470 --> 03:40.360
namelijk de projectlijst.

03:40.360 --> 03:43.400
Daar begint het in de dragLeaveHandler.

03:43.400 --> 03:46.370
In deze toepassing, in dit project hier,

03:46.370 --> 03:49.200
hebben we maar één sleepoperatie en dat

03:49.200 --> 03:51.500
zijn onze projecten hier.

03:51.500 --> 03:54.970
In grotere toepassingen heb je misschien verschillende

03:54.970 --> 03:57.220
stukken op de pagina die versleept kunnen

03:57.220 --> 04:01.080
worden en je wilt niet alles overal neerzetbaar maken.

04:01.080 --> 04:06.080
Dus daarom wil ik hier in de dragOverHandler, die afgaat wanneer je een versleepbaar

04:06.230 --> 04:09.580
gebied binnengaat met een item dat aan de muis is

04:09.580 --> 04:11.860
gekoppeld, controleren of verslepen

04:11.860 --> 04:14.970
hier echt is toegestaan.

04:14.970 --> 04:19.546
Voor dat, zal ik controleren of gebeurtenis. dataTransfer, hier is het

04:19.546 --> 04:21.060
ook beschikbaar,

04:21.060 --> 04:22.950
dus als dat beschikbaar

04:22.950 --> 04:25.500
is, en dan, als het beschikbaar

04:25.500 --> 04:29.140
is, heeft de data transfer types eigenschap

04:29.140 --> 04:34.140
een eerste waarde die gelijk is aan text/plain.

04:34.300 --> 04:39.280
Dat betekent gewoon, zijn de gegevens die aan onze sleepgebeurtenis

04:39.280 --> 04:42.390
hangen, van dat formaat?

04:42.390 --> 04:43.360
Wat natuurlijk zo is,

04:43.360 --> 04:45.030
want dat is het formaat dat we hier

04:45.030 --> 04:47.320
in de dragStartHandler hebben ingesteld.

04:47.320 --> 04:50.490
Dus hier zou het bijvoorbeeld niet mogelijk zijn om afbeeldingen of iets dergelijks

04:50.490 --> 04:51.380
te droppen, die een ander

04:51.380 --> 04:53.180
gegevensformaat zouden hebben.

04:53.180 --> 04:56.173
Ik heb alleen het laten vallen van platte tekst toegestaan.

04:57.170 --> 04:59.450
Natuurlijk moet ik nu ook weer underscore

04:59.450 --> 05:01.020
vervangen door een gebeurtenis

05:01.020 --> 05:03.280
omdat ik er hier naar verwijs.

05:03.280 --> 05:07.150
Als dat het geval is, dan weet ik dat ik een daling wil toestaan, dus dan

05:07.150 --> 05:09.070
zal ik de achtergrond bijwerken.

05:09.070 --> 05:11.620
En een ander belangrijk ding dat we moeten doen, je moet

05:11.620 --> 05:13.960
het evenement bellen. preventDefault.

05:13.960 --> 05:15.950
Maar waarom moeten we dat roepen?

05:15.950 --> 05:18.860
Omdat in JavaScript een drag and drop zo werkt

05:18.860 --> 05:22.480
dat een drop eigenlijk alleen is toegestaan, dus de

05:22.480 --> 05:26.119
drop event zal alleen triggeren op een element, als

05:26.119 --> 05:29.649
je in de drag overHandler op datzelfde element preventDefault

05:29.649 --> 05:32.750
hebt aangeroepen.

05:32.750 --> 05:35.360
U kunt dit als volgt opvatten.

05:35.360 --> 05:38.870
De standaard voor JavaScript drag and drop events is

05:38.870 --> 05:41.350
om vallen niet toe te staan, dus je moet

05:41.350 --> 05:44.889
standaard voorkomen in de drag overHandler om JavaScript

05:44.889 --> 05:48.120
en de browser te vertellen dat je voor dit element,

05:48.120 --> 05:49.670
in dit geval voor deze sectie

05:49.670 --> 05:54.870
voor deze projectloze klasse, een val wilt toestaan.

05:54.870 --> 05:57.920
Dus alleen als je dit doet is een dragOverHandler de drop event

05:57.920 --> 06:00.020
zal daadwerkelijk triggeren wanneer de gebruiker

06:00.020 --> 06:01.220
loslaat.

06:01.220 --> 06:02.910
Als de gebruiker anders loslaat,

06:02.910 --> 06:05.060
zal de drop event niet afgaan.

06:05.060 --> 06:07.090
Dus met dat, zal de drop handler

06:07.090 --> 06:08.960
uiteindelijk natuurlijk uitvoeren,

06:08.960 --> 06:12.620
omdat we nu toestaan dat dit gebeurt.

06:12.620 --> 06:16.440
Dus hier in de drop handler kunnen we nu de gebeurtenis accepteren, en voor

06:16.440 --> 06:20.610
het moment laten we gewoon console. log de gebeurtenis hier

06:20.610 --> 06:23.003
zo om te zien of dit werkt.

06:23.940 --> 06:28.100
We slaan nu alles op, we voegen hier een nieuw item

06:28.100 --> 06:30.220
toe, en ik sleep dit.

06:30.220 --> 06:33.430
Als ik het hier neerzet in afgewerkte projecten zie

06:33.430 --> 06:36.490
je dat deze sleep gebeurtenis hier afgaat.

06:36.490 --> 06:39.360
En dat komt van regel 236, wat inderdaad

06:39.360 --> 06:43.050
deze regel is in de drop handler.

06:43.050 --> 06:45.950
Als we nu het sleepgebeuren hier in de browser inspecteren,

06:45.950 --> 06:47.447
zie je dat we hier een hoop gegevens

06:47.447 --> 06:50.830
hebben en we hebben ook die gegevensoverdrachtseigenschap.

06:50.830 --> 06:52.920
En daarin zie je het effect dat

06:52.920 --> 06:54.320
we hebben toegestaan,

06:54.320 --> 06:57.930
namelijk Move, en daar zie je ook niets.

06:57.930 --> 07:01.600
Nou, alleen omdat de gegevens al waren gewist

07:01.600 --> 07:04.510
nadat dit in de console was gezet.

07:04.510 --> 07:06.100
En omdat we het object hier plaatsen en

07:06.100 --> 07:08.160
objecten referentietypes zijn, zien we de laatste

07:08.160 --> 07:10.830
momentopname waar de gegevens verloren zijn gegaan.

07:10.830 --> 07:13.360
Op het moment dat we dit laten vallen, zullen we

07:13.360 --> 07:16.910
in staat zijn om gegevens uit gegevensoverdracht te halen.

07:16.910 --> 07:18.360
En ik kan je dit bewijzen.

07:18.360 --> 07:20.960
Natuurlijk kunnen we gewoon toegang krijgen

07:20.960 --> 07:23.210
tot gegevensoverdracht en daar heb je een

07:23.210 --> 07:26.580
getData methode, en nu willen we de gegevens krijgen met dit

07:26.580 --> 07:29.560
text/plain formaat en dat zou de project ID moeten zijn

07:29.560 --> 07:34.560
die we hebben gekoppeld aan ons gegevensoverdracht pakket op het project item.

07:35.060 --> 07:37.179
Dus als we dit nu opslaan en het

07:37.179 --> 07:39.690
project opnieuw toevoegen, en dit

07:39.690 --> 07:41.050
hierheen slepen,

07:41.050 --> 07:46.050
zie je dat dit hier inderdaad de ID is van dit projectitem.

07:46.600 --> 07:47.920
Dat kunnen we zien

07:47.920 --> 07:50.880
als we het inspecteren, want we voegen het

07:50.880 --> 07:55.124
hier ook toe als een ID, 0. 2167, lijkt mij op deze ID.

07:55.124 --> 07:59.170
Dus we dragen de ID met succes over.

07:59.170 --> 08:00.490
Nu zijn we er bijna.

08:00.490 --> 08:04.100
Nu moeten we gewoon onze staat achter de schermen bijwerken

08:04.100 --> 08:06.163
en dan DUI opnieuw weergeven.
