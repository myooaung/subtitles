WEBVTT

00:02.220 --> 00:03.760
المعلم: آخر نوع مثير للاهتمام

00:03.760 --> 00:07.490
أريد أن أعرضه في هذه الوحدة هو النوع أبدًا.

00:07.490 --> 00:10.660
الآن رأينا دالة أعادت باطلة.

00:10.660 --> 00:13.058
لذلك هذا لا يعيد أي شيء.

00:13.058 --> 00:17.380
لا يمكن أبدًا إرجاع وظائف من نوع آخر.

00:17.380 --> 00:19.240
وقد يبدو ذلك غريباً.

00:19.240 --> 00:21.110
دعونا نلقي نظرة على كيفية عملها.

00:21.110 --> 00:24.662
لنفترض أن لدينا دالة إنشاء خطأ.

00:24.662 --> 00:28.280
أتوقع هنا أن أحصل على رسالة ، وهي سلسلة ، وربما

00:28.280 --> 00:31.610
بعض رموز الخطأ ، والتي قد تكون رقمًا.

00:31.610 --> 00:33.700
الآن داخل هذه الوظائف ، دعنا

00:33.700 --> 00:35.130
نقول ، لقد أخطأنا.

00:35.130 --> 00:37.760
لذلك يجب أن تكون هذه في الأساس

00:37.760 --> 00:41.500
وظيفة مساعدة تولد كائنات خطأ وتلقي بها.

00:41.500 --> 00:42.990
لذلك قد نقوم هنا برمي كائن ، وهو ما يمكننا

00:42.990 --> 00:44.380
القيام به في JavaScript.

00:44.380 --> 00:47.366
يمكننا إلقاء أي كائن أو أي قيمة كخطأ

00:47.366 --> 00:49.930
، ويجب أن يكون لذلك خاصية message

00:49.930 --> 00:53.990
، حيث أخزن قيمة وسيطة رسالتي هنا.

00:53.990 --> 00:56.390
وأريد الحصول على خاصية رمز الخطأ

00:56.390 --> 00:59.417
، دعنا نقول محو الكلمة ، وسيطة الكود في.

01:00.330 --> 01:02.390
إذن الأمر يتعلق بالدالة

01:02.390 --> 01:06.600
غير الصالحة ، ويمكننا استدعاء هذا مع حدوث خطأ

01:06.600 --> 01:09.640
، على سبيل المثال ، ورمز 500.

01:09.640 --> 01:12.213
إذا فعلنا ذلك ، وقمنا بتجميع هذا الملف هنا

01:14.120 --> 01:17.080
، فسنرى أنه بمجرد إعادة التحميل ، حصلنا على الخطأ

01:17.080 --> 01:19.150
، بالإضافة إلى خطأ هنا.

01:19.150 --> 01:21.670
وقد يبدو هذا مجرد فكرة مجردة ، لكنه في

01:21.670 --> 01:22.850
الواقع ليس كذلك.

01:22.850 --> 01:24.640
قد يكون وجود وظائف مساعدة

01:24.640 --> 01:27.850
مثل هذه أمرًا قياسيًا في التطبيقات الأكبر حيث

01:27.850 --> 01:30.270
لا تريد يدويًا إلقاء خطأ في 10 أماكن

01:30.270 --> 01:32.540
مختلفة من تطبيقك ، وحيث تريد الوصول

01:32.540 --> 01:35.380
إلى وظيفة واحدة ملائمة تنشئ كائن الخطأ

01:35.380 --> 01:37.450
لك و ربما يرميها أيضًا على الفور

01:37.450 --> 01:39.350
، بحيث يمكنك استدعاء هذه الوظيفة

01:39.350 --> 01:42.300
بمدخلات مختلفة ولكن دائمًا ما يكون لديك خطأ

01:42.300 --> 01:44.690
يتم طرحه.

01:44.690 --> 01:47.010
الشيء المثير للاهتمام في هذه الوظيفة

01:47.010 --> 01:49.048
هو أنها لا تعيد الفراغ فقط.

01:49.048 --> 01:52.385
يمكنني في الواقع أن أحدد أنه يعيد الفراغ

01:52.385 --> 01:54.545
، لأنه بالطبع لا يُرجع شيئًا

01:54.545 --> 01:58.030
، لكنه في الواقع لا يُرجع شيئًا فقط ، إذا كنا

01:58.030 --> 02:02.630
صادقين تمامًا ، فإن هذه الوظيفة لا تعود أبدًا.

02:02.630 --> 02:05.518
هذه الوظيفة لا تنتج قيمة معادة.

02:05.518 --> 02:08.860
إذا كنت سأحاول استعادة القيمة المرتجعة هنا

02:08.860 --> 02:11.193
، في نتيجة سجل وحدة التحكم ، وبعد

02:12.040 --> 02:16.240
ذلك قمت بتجميع الكود الخاص بي في هذا التنفيذ ، نرى أنه لا

02:16.240 --> 02:19.630
يوجد تسجيل غير محدد هنا ، لأنه منذ طرح خطأ ، يؤدي

02:19.630 --> 02:22.220
هذا بشكل أساسي إلى تعطل البرنامج النصي

02:22.220 --> 02:25.330
الخاص بنا ، بامكانك أن تقول.

02:25.330 --> 02:27.080
يلغي البرنامج النصي الخاص بنا.

02:27.080 --> 02:30.290
وسيكون هذا هو الحال دائمًا بالنسبة لهذه الوظيفة.

02:30.290 --> 02:32.210
بالطبع يمكننا أن نلفها في محاولة الالتقاط

02:32.210 --> 02:34.260
بحيث لا يزال بإمكاننا الاستمرار في هذا البرنامج

02:34.260 --> 02:37.620
النصي ، لكن هذه الوظيفة في الأساس لا تنتج أي قيمة أبدًا.

02:37.620 --> 02:41.060
تؤدي هذه الوظيفة دائمًا إلى تعطل البرنامج النصي

02:41.060 --> 02:42.910
أو هذا الجزء من البرنامج النصي

02:42.910 --> 02:44.720
، إذا كنت تستخدم try catch

02:44.720 --> 02:47.910
، وبالتالي لا تُرجع أي شيء أبدًا.

02:47.910 --> 02:50.400
ومن ثم فإن نوع الإرجاع لهذه الوظيفة

02:50.400 --> 02:54.483
في الواقع ليس باطلًا فقط ، ولكنه أيضًا ليس باطلاً.

02:55.710 --> 02:56.700
الشيء المثير للاهتمام

02:56.700 --> 02:59.060
الآن هو ، إذا قمت بالمرور فوقه دون تعيين مطلقًا

02:59.060 --> 03:01.680
، فسترى أن النوع المستنتج باطل.

03:01.680 --> 03:05.410
كل ذلك لأنه لم يكن أبدًا من النوع الأحدث ، فقد كان موجودًا

03:05.410 --> 03:07.060
لبعض الوقت الآن ، لكنه لم

03:07.060 --> 03:10.000
يتم تضمينه في الإصدارات الأولى من TypeScript

03:10.000 --> 03:12.620
، وبالتالي يُفترض عادةً أن يكون فارغًا

03:12.620 --> 03:15.417
، وليس من الرهيب تركه عند هذا الحد.

03:15.417 --> 03:17.740
ولكن يمكنك أن تكون واضحًا جدًا

03:17.740 --> 03:21.470
وأن لا تحدد أبدًا بشكل صريح كنوع الإرجاع لتوضيح

03:21.470 --> 03:24.490
أن هذا لا يُرجع أبدًا أي شيء.

03:24.490 --> 03:26.770
لذلك من منظور جودة الكود ، قد يكون

03:26.770 --> 03:29.560
هذا أكثر وضوحًا فيما يتعلق بنواياك

03:29.560 --> 03:30.680
ويوضح حقًا لمطورينا

03:30.680 --> 03:32.330
الذين يقرؤون الكود أن

03:32.330 --> 03:35.850
هذه الوظيفة تهدف إلى عدم إرجاع أي شيء أبدًا ، وتعطيل

03:35.850 --> 03:40.954
البرنامج النصي أو كسره ، أو هذا الجزء من النصي.

03:40.954 --> 03:43.890
وظيفة أخرى لن تعود أبدًا ، بالمناسبة

03:43.890 --> 03:47.190
، ستكون دالة ذات حلقة لا نهائية.

03:47.190 --> 03:49.370
لذلك إذا كان لدينا while (true) هناك

03:49.370 --> 03:51.060
، فإن ذلك يخلق حلقة لا نهائية

03:51.060 --> 03:52.790
، وبالتالي ستكون أيضًا وظيفة

03:52.790 --> 03:54.410
لا تعود أبدًا.

03:54.410 --> 03:56.070
من المحتمل أن تكون وظيفة الخطأ

03:56.070 --> 03:58.852
هنا ، أو الوظيفة التي تولد خطأ مجمّدًا هي حالة

03:58.852 --> 04:01.305
الاستخدام الأكثر شيوعًا.

04:01.305 --> 04:04.500
لذلك أبدًا ، نوع مثير للاهتمام أيضًا ، والذي

04:04.500 --> 04:06.230
يمكنك استخدامه في وظائف

04:06.230 --> 04:08.553
لحالات مثل هذه هنا.
