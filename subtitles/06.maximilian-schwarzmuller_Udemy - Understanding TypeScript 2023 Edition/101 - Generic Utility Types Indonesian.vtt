WEBVTT

00:02.330 --> 00:04.870
Narator: Berbicara tentang tipe yang lebih generik,

00:04.870 --> 00:06.970
sebagai sedikit bonus, Anda bisa mengatakan,

00:06.970 --> 00:11.410
saya ingin menunjukkan arah Anda pada beberapa tipe built-in.

00:11.410 --> 00:15.740
Typescript dikirimkan dengan, yang memanfaatkan tipe generik atau yang

00:15.740 --> 00:17.240
merupakan tipe generik,

00:17.240 --> 00:20.350
yang memberi kita fungsi utilitas tertentu.

00:20.350 --> 00:22.050
Jadi, hanya sedikit bonus di sini,

00:22.050 --> 00:22.920
dan dari waktu ke waktu,

00:22.920 --> 00:25.550
jenis-jenis khusus ini mungkin berguna.

00:25.550 --> 00:26.840
Sekarang, terlampir, Anda akan

00:26.840 --> 00:30.680
menemukan tautan ke dokumentasi lengkap dari semua jenis utilitas built-in.

00:30.680 --> 00:33.810
Di sini, saya hanya ingin memberi Anda beberapa contoh.

00:33.810 --> 00:36.010
Sekarang sama seperti semua hal jenis ini,

00:36.010 --> 00:38.610
jenis-jenis ini hanya ada dalam jenis-jenis dunia

00:38.610 --> 00:41.300
dan oleh karena itu, hanya sebelum kompilasi.

00:41.300 --> 00:43.460
Tetapi selama langkah kompilasi ini,

00:43.460 --> 00:48.130
mereka bisa memberi Anda keamanan tipe ekstra atau fleksibilitas ekstra.

00:48.130 --> 00:51.670
Misalnya, ada tipe parsial built-in.

00:51.670 --> 00:55.580
Katakanlah kita memiliki tipe baru, dan Anda antarmuka yang akan kita

00:55.580 --> 00:58.480
temukan atau tipe kustom benar-benar tidak masalah,

00:58.480 --> 00:59.493
CourseGoal.

01:00.660 --> 01:03.780
CourseGoal memang memiliki judul, yang seharusnya

01:03.780 --> 01:06.930
berupa string dan katakanlah deskripsi, yang semuanya

01:06.930 --> 01:09.040
harus berupa string.

01:09.040 --> 01:14.040
Mungkin kita juga memiliki properti completeUntil, yang merupakan sebuah Date.

01:15.290 --> 01:17.961
Sekarang kita ingin memiliki fungsi, katakanlah,

01:17.961 --> 01:21.500
createCourseGoal, yang menciptakan objek seperti itu.

01:21.500 --> 01:23.380
Tentu saja, kita juga bisa menciptakan kelas itu.

01:23.380 --> 01:26.290
Tetapi kita memiliki fungsi seperti itu karena dalam fungsi

01:26.290 --> 01:28.740
itu, kita mungkin mengambil beberapa data dari

01:28.740 --> 01:30.590
database, atau apa pun itu.

01:30.590 --> 01:32.110
Jadi kita memiliki fungsi ini.

01:32.110 --> 01:33.330
Dan pada akhirnya

01:33.330 --> 01:37.890
di sini, saya ingin mendapatkan judul saya, yang merupakan string,

01:37.890 --> 01:42.320
saya mungkin mendapatkan deskripsi saya, yang merupakan string,

01:42.320 --> 01:47.150
dan saya berharap mendapatkan tanggal saya, yang merupakan Date.

01:47.150 --> 01:49.680
Sekarang dalam fungsi itu, tentu saja, kita bisa mengembalikan

01:49.680 --> 01:51.740
objek tetapi kita baru saja mengatur semua hal ini.

01:51.740 --> 01:55.340
Jadi di mana kita mengatur judul ke judul, deskripsi ke deskripsi

01:55.340 --> 01:57.840
dan completeUntil ke tanggal.

01:57.840 --> 02:00.760
Kita bisa melakukan semua itu dan jika kita kemudian mendefinisikan

02:00.760 --> 02:03.890
bahwa fungsi ini akan selalu mengembalikan CourseGoal, kita

02:03.890 --> 02:07.120
akan memiliki fungsi pengaturan yang benar.

02:07.120 --> 02:08.420
Sekarang untuk beberapa alasan katakanlah

02:08.420 --> 02:09.530
kita tidak melakukannya seperti

02:09.530 --> 02:11.623
ini, kita tidak melakukan ini semua dalam satu langkah.

02:12.680 --> 02:13.870
Sebaliknya, apa yang ingin

02:13.870 --> 02:17.340
saya lakukan adalah, saya ingin memulai dengan membuat variabel di sini, yang

02:17.340 --> 02:18.700
menampung objek kosong.

02:18.700 --> 02:22.620
Dan kemudian langkah demi langkah, saya ingin menambahkan judul saya di sini.

02:22.620 --> 02:26.420
Saya ingin menambahkan deskripsi saya di sini.

02:26.420 --> 02:31.303
Dan saya ingin menambahkan tanggal saya di sini.

02:33.640 --> 02:36.420
Sekarang di sini saya mendapatkan error karena tentu saja, saya

02:36.420 --> 02:39.170
tidak bisa mengatur judul ini bukan properti dari objek ini.

02:39.170 --> 02:41.930
Dan sementara ini bekerja dalam JavaScript vanila, TypeScript

02:41.930 --> 02:45.410
tidak benar-benar seperti itu dengan cepat menambahkan di sini.

02:45.410 --> 02:47.810
Jadi kita mungkin ingin mengatakan bahwa ini harus

02:47.810 --> 02:49.300
bertipe CourseGoal di sini.

02:49.300 --> 02:51.040
Sekarang, TypeScript tidak mengeluh tentang

02:51.040 --> 02:53.640
hal ini, tetapi tentang fakta bahwa ini adalah objek kosong,

02:53.640 --> 02:56.223
yang jelas tidak sesuai dengan tipe kita di sini.

02:57.070 --> 02:58.360
Jadi pada akhirnya, saya ingin

02:58.360 --> 03:01.000
mengembalikannya dan saya ingin menambahkan semua hal ini selangkah

03:01.000 --> 03:04.570
demi selangkah, mungkin karena kita memiliki validasi tambahan sebelum setiap langkah,

03:04.570 --> 03:07.590
dan oleh karena itu seseorang menambahkannya seperti ini.

03:07.590 --> 03:12.390
Sekarang, di sinilah tipe parsial bisa berguna.

03:12.390 --> 03:17.390
Kita bisa mengatakan bahwa CourseGoal di sini haruslah tipe parsial, yang pada

03:17.580 --> 03:18.413
akhirnya, berkat

03:18.413 --> 03:21.600
tipe generik akan menampung courseGoal.

03:21.600 --> 03:24.200
Sekarang apa yang dilakukannya adalah memberi tahu

03:24.200 --> 03:28.260
TypeScript bahwa, ini adalah objek yang pada akhirnya akan menjadi courseGoal.

03:28.260 --> 03:32.090
Tetapi pada awalnya, sebagian jenis parsial membungkus tipe kita sendiri,

03:32.090 --> 03:36.620
dan mengubahnya menjadi tipe di mana semua properti ini bersifat opsional.

03:36.620 --> 03:39.440
Itulah yang dilakukan secara parsial oleh salah satu tipe bawaan ini, Typescript

03:39.440 --> 03:40.670
dikirimkan dengan.

03:40.670 --> 03:44.270
Jadi, ia mengubahnya menjadi sebuah tipe, yang juga merupakan tipe objek, di mana semua

03:44.270 --> 03:45.713
propertinya bersifat opsional.

03:45.713 --> 03:49.290
Oleh karena itu, kita bisa menetapkan ini ke objek kosong pada awalnya,

03:49.290 --> 03:53.030
dan masih menambahkan semua hal ini selangkah demi selangkah.

03:53.030 --> 03:54.880
Satu-satunya masalah adalah bahwa

03:54.880 --> 03:58.130
pada akhirnya, kita tidak bisa mengembalikan ini karena sekarang

03:58.130 --> 04:02.130
masih bertipe CourseGoal parsial, dan bukan tipe CourseGoal.

04:02.130 --> 04:04.630
Kita dapat memperbaikinya dengan mengubahnya menjadi courseGoal

04:04.630 --> 04:07.480
dengan typecasting, karena kita tahu pada saat ini, kita akan menambahkan

04:07.480 --> 04:08.990
semua data.

04:08.990 --> 04:11.667
Jadi, ini akan menjadi kursus yang nyataTujuan dan bukan yang parsial.

04:11.667 --> 04:13.510
Dan tentu saja, ini sedikit mengada-ada.

04:13.510 --> 04:15.500
Tetapi Anda bisa memiliki skenario

04:15.500 --> 04:18.220
seperti ini, di mana Anda ingin mengganti sementara

04:18.220 --> 04:19.650
salah satu jenis objek Anda,

04:19.650 --> 04:23.530
salah satu antarmuka Anda menjadi opsional saja.

04:23.530 --> 04:25.540
Untuk memastikan bahwa semua properti yang

04:25.540 --> 04:28.170
ada di sana bisa menjadi opsional hanya sementara.

04:28.170 --> 04:31.223
Dan kemudian tipe parsial akan memungkinkan Anda melakukan itu.

04:32.370 --> 04:35.920
Dan tidak pernah built-in utility type yang Anda miliki

04:35.920 --> 04:40.170
adalah tipe read only yang semuanya bisa sangat berguna.

04:40.170 --> 04:42.623
Katakanlah kita memiliki larik nama.

04:43.460 --> 04:46.330
Dan di sana saya mendapatkan Max dan Sports.

04:46.330 --> 04:47.420
Sekarang, dengan benar TypeScript

04:47.420 --> 04:49.860
menyimpulkan bahwa ini adalah string array.

04:49.860 --> 04:50.960
Sekarang apa yang bisa kita lakukan?

04:50.960 --> 04:52.690
Kita tentu saja bisa mendorong

04:53.700 --> 04:55.400
Manu ke sana, dan mungkin saya harus

04:55.400 --> 04:58.340
mengubahnya menjadi Anna bukan olahraga untuk memiliki

04:58.340 --> 04:59.720
nama di sana.

04:59.720 --> 05:00.553
Jadi ini berhasil.

05:00.553 --> 05:01.386
Sekarang katakanlah,

05:01.386 --> 05:04.230
bagaimanapun, saya ingin memastikan bahwa ini adalah larik yang terkunci.

05:04.230 --> 05:06.260
Kami tidak bisa menambahkan lebih banyak lagi di sini.

05:06.260 --> 05:07.870
Dan kita selalu bisa menambahkan lebih banyak

05:07.870 --> 05:11.690
lagi di sini, tetapi setidaknya saya ingin Typescript berteriak pada saya jika saya mencobanya.

05:11.690 --> 05:13.730
Nah, di situlah kita bisa menggunakan

05:13.730 --> 05:18.730
tipe read only, kita bisa mengatur ini menjadi array string read only.

05:18.930 --> 05:20.510
Dengan itu kita memberitahu TypeScript, well,

05:20.510 --> 05:23.030
apa yang kita simpan di sini adalah, ini adalah array string.

05:23.030 --> 05:25.830
Tetapi ini juga merupakan larik string, yang hanya bisa dibaca.

05:25.830 --> 05:28.210
Jadi, ketika kita mencoba menambahkan sesuatu dengan

05:28.210 --> 05:31.600
push, atau jika kita mencoba menghapus sesuatu dengan pop, kita mendapatkan

05:31.600 --> 05:32.760
error, karena kita tidak

05:32.760 --> 05:34.810
diizinkan untuk melakukan hal-hal ini dengan

05:34.810 --> 05:36.320
larik ini.

05:36.320 --> 05:38.760
Dan ini tidak terbatas pada array, Anda

05:38.760 --> 05:41.610
juga dapat menggunakan read only pada objek.

05:41.610 --> 05:43.990
Misalnya, untuk memasarkan sebagai read only,

05:43.990 --> 05:46.860
sehingga Anda tidak diizinkan untuk mengubah properti

05:46.860 --> 05:49.920
atau menambahkan properti baru ke objek ini.

05:49.920 --> 05:52.240
Jadi ini juga bisa sangat, sangat berguna

05:52.240 --> 05:56.510
dan memberi Anda lebih banyak fleksibilitas atau lebih tepat tentang

05:56.510 --> 05:59.490
apa yang ingin Anda lakukan dalam kode Anda.

05:59.490 --> 06:01.380
Sekarang, semua ini hanyalah tipe utilitas

06:01.380 --> 06:03.610
yang hanya ada di dunia TypeScript.

06:03.610 --> 06:05.881
Jadi, mereka tidak dikompilasi untuk apa pun.

06:05.881 --> 06:09.400
Tetapi selama kompilasi, mereka memberi Anda keketatan ekstra, atau

06:09.400 --> 06:12.410
pemeriksaan ekstra atau melewatkan pemeriksaan tertentu

06:12.410 --> 06:14.800
seperti yang kami lakukan dengan parsial.

06:14.800 --> 06:17.170
Sekarang Anda punya lebih dari sekadar hanya baca dan parsial.

06:17.170 --> 06:19.730
Dan seperti yang saya sebutkan terlampir, Anda bisa menemukan

06:19.730 --> 06:22.420
dokumentasi untuk daftar lengkap jenis utilitas ini.

06:22.420 --> 06:25.580
Dalam skenario tertentu, mereka bisa sangat berguna, dan oleh karena

06:25.580 --> 06:27.460
itu, saya pasti tidak ingin menyembunyikannya

06:27.460 --> 06:28.350
dari Anda.

06:28.350 --> 06:30.500
Tetapi sebaliknya, Anda harus menyadarinya

06:30.500 --> 06:34.060
sehingga Anda dapat menggunakannya ketika Anda perlu mengunci sesuatu,

06:34.060 --> 06:36.980
atau seperti dalam kasus membuka sebagian apa pun atau dengan

06:36.980 --> 06:39.690
yang lainnya yang tidak saya bahas di sini, jika Anda memiliki

06:39.690 --> 06:42.570
beberapa operasi lain yang dapat ditingkatkan dengan salah

06:42.570 --> 06:45.140
satu dari jenis utilitas bawaan ini.

06:45.140 --> 06:47.670
Dan semua jenis utilitas ini bersifat generik, karena

06:47.670 --> 06:49.170
apa yang mereka lakukan adalah

06:49.170 --> 06:52.580
mengambil beberapa nilai lain yang bertipe apa pun dan melakukan

06:52.580 --> 06:54.190
sesuatu dengannya.

06:54.190 --> 06:57.970
Mereka menetapkan segala sesuatu menjadi opsional, mereka menguncinya,

06:57.970 --> 07:01.330
tidak peduli apakah ini adalah larik atau objek atau larik

07:01.330 --> 07:04.430
string, larik angka, dan sebagainya.

07:04.430 --> 07:06.000
Itulah mengapa ini bersifat generik.

07:06.000 --> 07:09.520
Dan bersama dengan generik bawaan atas yang kita lihat sebelumnya dan

07:09.520 --> 07:10.790
generik Anda sendiri.

07:10.790 --> 07:13.780
Sekarang ini, semoga semua ini kembali membantu Anda memahami

07:13.780 --> 07:16.793
mengapa generik dapat berguna dalam mengapa mereka ada.
