WEBVTT

00:02.130 --> 00:02.963
Instruktor: Pokryliśmy

00:02.963 --> 00:05.180
więc kilka podstawowych typów, które zna TypeScript.

00:05.180 --> 00:06.590
A teraz przejdźmy dalej.

00:06.590 --> 00:09.140
W tym celu zmienię nazwę app. ts tutaj do objs-arrays-enums,

00:09.140 --> 00:11.670
lub jakkolwiek chcesz to nazwać, w zasadzie tak, że

00:11.670 --> 00:12.750
nadal mamy ten plik, ale

00:12.750 --> 00:17.130
stworzę zupełnie nową aplikację.

00:17.130 --> 00:17.130
ts,

00:17.130 --> 00:18.860
abyśmy mieli znów pusty plik, w

00:18.860 --> 00:20.500
którym możemy pracować.

00:20.500 --> 00:22.550
Teraz w tym pliku chcę zanurkować

00:22.550 --> 00:25.790
w inny ciekawy typ, który znajdziesz w TypeScript.

00:25.790 --> 00:28.640
I to jest właśnie typ związkowy.

00:28.640 --> 00:30.190
Co to jest?

00:30.190 --> 00:33.000
Wróćmy do naszej funkcji add, którą napisaliśmy

00:33.000 --> 00:34.490
wcześniej, skopiuję to i

00:34.490 --> 00:37.270
przeniosę do app. ts.

00:37.270 --> 00:39.190
Pozbądźcie się tego komentarza tutaj, a

00:39.190 --> 00:42.940
tutaj na dodatek zamknijmy podstawy. ts, dzięki czemu pozbędziemy

00:42.940 --> 00:44.170
się tego błędu.

00:44.170 --> 00:47.970
Tutaj w add, teraz chcę być bardziej elastyczny w odniesieniu

00:47.970 --> 00:49.920
do tego, co akceptujemy tutaj.

00:49.920 --> 00:52.570
Pozbędę się również showResult i zwrotu,

00:52.570 --> 00:54.370
nie potrzebuję tego.

00:54.370 --> 00:55.690
I jedyną rzeczą, którą chcę

00:55.690 --> 00:58.590
zrobić, jest to, że chcę obliczyć wynik i zwrócić go.

00:58.590 --> 01:01.960
Ale chcę być bardziej elastyczny w odniesieniu do danych wejściowych.

01:01.960 --> 01:06.045
Wcześniej upewniliśmy się, że pracujemy tylko z liczbami.

01:06.045 --> 01:09.357
Teraz powiedzmy, że faktycznie nazywamy ten kombajn

01:09.357 --> 01:13.190
i powinien on działać zarówno z liczbami, jak i ciągami.

01:13.190 --> 01:15.710
Ponieważ okazuje się, że możemy łączyć zarówno

01:15.710 --> 01:18.595
liczby, jak i ciągi za pomocą tego operatora plus, jedyną

01:18.595 --> 01:21.650
różnicą jest to, że w jednym scenariuszu otrzymujemy z

01:21.650 --> 01:24.030
powrotem liczbę jako wynik, w drugim scenariuszu

01:24.030 --> 01:27.120
otrzymujemy konkatenowany ciąg, jak właściwie już widzieliśmy

01:27.120 --> 01:30.150
wcześnie w tym module.

01:30.150 --> 01:32.040
Ale teraz chcę pozwolić na to zachowanie,

01:32.040 --> 01:33.950
ponieważ możesz mieć aplikację, w której

01:33.950 --> 01:36.740
chcesz mieć elastyczną funkcję łączenia, która robi

01:36.740 --> 01:38.963
pracę z liczbami i ciągami.

01:39.830 --> 01:42.360
Dlatego nazwę również to wejście1

01:42.360 --> 01:47.340
tutaj, a to wejście2, i połączę te dwa teraz.

01:47.340 --> 01:49.740
Ale oczywiście będziemy mieli jeden problem,

01:49.740 --> 01:53.180
w tej chwili ustawiamy oba parametry jako liczby.

01:53.180 --> 01:56.050
Oznacza to, że możemy wywołać tę funkcję, o ile rzeczywiście

01:56.050 --> 01:58.190
chcemy pracować z liczbami.

01:58.190 --> 01:59.130
Powiedzmy, że na

01:59.130 --> 02:01.640
dole tworzymy nową stałą, combinedAges.

02:02.931 --> 02:04.690
I tam nazywam łączenie

02:04.690 --> 02:09.602
i przekazywanie w 30 i 26 tutaj jako wieki w jakiejkolwiek aplikacji,

02:09.602 --> 02:12.000
którą budujemy.

02:12.000 --> 02:15.014
Kolejny po konsoli log combinedAges, cóż nie powinno

02:15.014 --> 02:17.240
być zbyt zaskakujące, że jeśli teraz skompilujemy

02:17.240 --> 02:19.830
ten plik tutaj, a następnie ponownie załadujemy

02:19.830 --> 02:22.360
tę stronę, otrzymamy 56.

02:22.360 --> 02:24.690
Więc to działa, otrzymujemy tę liczbę.

02:24.690 --> 02:26.710
Ale oczywiście mamy problem, jeśli spróbujemy

02:26.710 --> 02:28.838
stworzyć tutaj ciąg znaków.

02:28.838 --> 02:31.610
CombinedNames, na przykład.

02:31.610 --> 02:36.033
Jeżeli spróbuję tutaj połączyć Maxa i Annę, to cóż, od razu dostajemy

02:37.230 --> 02:39.630
tutaj błąd, że Max nie jest przypisywalny

02:39.630 --> 02:42.320
do typu liczba, bo to oczywiście jest ciąg

02:42.320 --> 02:44.350
znaków.

02:44.350 --> 02:45.790
Teraz oczywiście moglibyśmy zmienić to tak,

02:45.790 --> 02:47.750
aby akceptować ciągi znaków zamiast liczb, ale teraz pierwsze

02:47.750 --> 02:50.130
wywołanie funkcji zakończyłoby się niepowodzeniem.

02:50.130 --> 02:52.750
I tu właśnie mogą nam pomóc typy związkowe.

02:52.750 --> 02:55.692
Jeśli mamy jakieś miejsce w naszej aplikacji,

02:55.692 --> 02:58.810
czy to parametr funkcji, czy stała, czy zmienna,

02:58.810 --> 03:01.700
której gdzieś używamy, gdzie akceptujemy

03:01.700 --> 03:05.030
dwa różne rodzaje wartości.

03:05.030 --> 03:07.410
No to może nam pomóc typ związkowy.

03:07.410 --> 03:09.800
Aby powiedzieć TypeScriptowi, że

03:09.800 --> 03:12.690
dobrze nam jest albo z liczbą, albo z ciągiem,

03:12.690 --> 03:14.220
używamy liczby, a następnie

03:14.220 --> 03:17.710
symbolu pipe tutaj, a następnie drugiego typu, który

03:17.710 --> 03:20.660
również akceptujemy.

03:20.660 --> 03:22.340
I możesz mieć więcej niż dwa typy,

03:22.340 --> 03:25.220
możesz przyjąć tutaj tyle typów, ile potrzebujesz.

03:25.220 --> 03:27.050
Więc tutaj potrzebuję tylko dwóch

03:27.050 --> 03:28.880
chociaż, i to jest afforded przypisanie

03:28.880 --> 03:31.720
typu, z którym pójdę, liczba lub ciąg.

03:31.720 --> 03:33.690
Teraz dostaję tutaj błąd, że operator

03:33.690 --> 03:35.930
plus nie może być zastosowany do typów

03:35.930 --> 03:39.120
string lub number oraz string lub number.

03:39.120 --> 03:41.500
To faktycznie nie jest całkowicie poprawne,

03:41.500 --> 03:44.350
to powinno działać, ponieważ możemy używać operatora

03:44.350 --> 03:46.670
plusa zarówno z liczbami, jak i z ciągami.

03:46.670 --> 03:49.600
Ale TypeScript widzi tylko, że mamy tutaj typ

03:49.600 --> 03:52.540
unii i nie analizuje, co jest w typie unii, po

03:52.540 --> 03:56.010
prostu widzi, "Ok, oczekujesz wielu typów.

03:56.010 --> 03:57.530
Być może obejmuje to typy,

03:57.530 --> 03:59.460
w których nie mogę użyć operatora

03:59.460 --> 04:01.640
plusa, stąd będę narzekał tutaj. Teraz na szczęście możemy obejść ten problem chociaż.

04:01.640 --> 04:05.410
Możemy dodać nasze runtime type check tutaj i zobaczyć

04:05.410 --> 04:07.910
czy input1 typeof that jest równe

04:07.910 --> 04:11.240
liczbie i czy typeof input2 jest równe liczbie,

04:12.750 --> 04:15.170
a następnie przenieść to obliczenie

04:16.530 --> 04:21.283
tam, teraz tylko jedno ulepszenie, utwórzmy wynik jako zmienną

04:24.100 --> 04:28.510
na początku tego if check, ze względu na lock scoping, tak,

04:28.510 --> 04:33.880
że jest to zmienna dostępna w całej funkcji, a następnie po prostu przypisać

04:33.880 --> 04:37.873
nową wartość tam.

04:37.873 --> 04:40.310
Więc teraz tutaj sprawdzamy, czy rzeczywiście mamy dwie liczby.

04:40.310 --> 04:42.818
I dlatego TypeScript wie, że tutaj,

04:42.818 --> 04:45.890
input1 i input2 oba będą liczbami.

04:45.890 --> 04:49.790
Teraz dodajmy tutaj jeszcze sprawdzenie.

04:49.790 --> 04:53.900
I tam możemy ustawić wynik równy input1. tostring, jawnie konwertując to

04:53.900 --> 04:56.913
na ciąg znaków,

04:58.550 --> 05:00.570
oraz input2. tostring.

05:00.570 --> 05:02.880
I to będzie wtedy również w porządku

05:02.880 --> 05:04.160
dla TypeScript i JavaScript, ponieważ

05:04.160 --> 05:05.700
możemy konkatenować dwa ciągi.

05:05.700 --> 05:08.220
Więc teraz mamy prawie to samo obliczenie, ale

05:08.220 --> 05:10.800
wyjaśniliśmy, że tutaj zawsze będziemy pracować

05:10.800 --> 05:12.110
z liczbami, tutaj zawsze

05:12.110 --> 05:13.590
będziemy pracować z ciągami,

05:13.590 --> 05:15.730
a następnie zwrócimy wynik.

05:15.730 --> 05:17.490
I teraz z tym, jeśli konsola

05:17.490 --> 05:20.870
loguje połączone nazwy tam na dole, i skompilujemy

05:20.870 --> 05:25.350
ten plik, zobaczymy, że po ponownym odwiedzeniu naszej strony, dostaliśmy

05:25.350 --> 05:27.210
połączone liczby tam, które

05:27.210 --> 05:29.278
zostały po prostu dodane do siebie

05:29.278 --> 05:31.460
i stąd otrzymujemy liczbę jako wynik,

05:31.460 --> 05:35.090
i dwie połączone nazwy tutaj.

05:35.090 --> 05:36.850
Tak więc w ten sposób możemy używać typów

05:36.850 --> 05:40.830
unii, aby być bardziej elastycznym w odniesieniu do tego, co robimy w funkcji, na

05:40.830 --> 05:43.770
przykład, lub gdziekolwiek indziej w naszym kodzie.

05:43.770 --> 05:45.920
To dodatkowe sprawdzanie typu runtime nie

05:45.920 --> 05:49.520
zawsze będzie wymagane podczas pracy z typami unii, ale często będzie,

05:49.520 --> 05:51.230
ponieważ z typami unii możesz być

05:51.230 --> 05:54.090
bardziej elastyczny w, na przykład, parametrach, które

05:54.090 --> 05:56.350
akceptujesz, ale wtedy możesz mieć inną logikę

05:56.350 --> 05:58.170
w swojej funkcji w oparciu o to, który

05:58.170 --> 06:00.940
dokładny typ otrzymujesz.

06:00.940 --> 06:03.730
Tak, że twoja funkcja jest w stanie pracować z wieloma

06:03.730 --> 06:05.640
typami wartości, ale że następnie

06:05.640 --> 06:07.810
robi nieco inne rzeczy w zależności

06:07.810 --> 06:10.320
od typu, który otrzymujesz.

06:10.320 --> 06:12.410
Tak więc często możesz potrzebować takiej kontroli

06:12.410 --> 06:15.270
runtime podczas pracy z typami unii, ale nie zawsze będziesz

06:15.270 --> 06:16.700
tego potrzebować.

06:16.700 --> 06:18.490
Z pewnością napotkasz również sytuacje

06:18.490 --> 06:20.900
w programach TypeScript, w których możesz

06:20.900 --> 06:24.060
użyć typu unii bez sprawdzania typu runtime.

06:24.060 --> 06:25.870
To naprawdę zależy od logiki, którą piszesz.
