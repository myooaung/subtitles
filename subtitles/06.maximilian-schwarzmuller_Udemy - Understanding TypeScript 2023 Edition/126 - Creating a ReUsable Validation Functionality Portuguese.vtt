WEBVTT

00:02.160 --> 00:06.060
Instrutor: Então, o que poderíamos fazer em relação à validação?

00:06.060 --> 00:10.450
Bem, talvez, vamos começar pelo resultado final desejado.

00:10.450 --> 00:14.850
Minha idéia é que mais tarde tenhamos alguma função de validação

00:14.850 --> 00:17.950
que ainda não existe, mas que mais tarde a

00:17.950 --> 00:21.230
tenhamos, para a qual eu passo o enterTitle,

00:21.230 --> 00:25.360
ou na verdade um objeto de configuração eu diria onde o

00:25.360 --> 00:27.900
valor é o enterTitle, então a coisa

00:27.900 --> 00:30.300
a ser validada.

00:30.300 --> 00:33.260
Mas onde eu também tenho propriedades

00:33.260 --> 00:37.350
adicionais que dizem à função de validação como

00:37.350 --> 00:39.130
validá-la.

00:39.130 --> 00:43.210
Assim, por exemplo, que exigimos set to true aqui, minLength

00:43.210 --> 00:47.009
set to five para impor cinco caracteres, e assim por

00:47.009 --> 00:48.360
diante.

00:48.360 --> 00:50.040
E então fazemos isso aqui para

00:50.040 --> 00:51.540
as três entradas, e validar

00:51.540 --> 00:53.900
é uma função que retorna verdadeira se

00:53.900 --> 00:56.620
for válida, e falsa se não for válida, e no final,

00:56.620 --> 00:59.580
poderíamos ter algo como isto.

00:59.580 --> 01:04.580
Ou enterDescription e enterPeople, essa seria mais

01:04.790 --> 01:06.790
ou menos a idéia.

01:06.790 --> 01:09.210
É claro que é apenas uma maneira de implementar

01:09.210 --> 01:11.703
isto, mas é uma maneira que eu gosto muito.

01:12.600 --> 01:15.320
Para isso, na parte superior do arquivo,

01:15.320 --> 01:19.470
acrescentarei alguma lógica de validação.

01:19.470 --> 01:22.380
E, mais uma vez, há muitas maneiras de se fazer isso.

01:22.380 --> 01:24.390
Antes de mais nada, vou começar

01:24.390 --> 01:27.840
definindo a estrutura de tal objeto validável.

01:27.840 --> 01:31.280
Portanto, este objeto que passamos para a função de validação,

01:31.280 --> 01:33.430
pois é claro que esta sempre precisa

01:33.430 --> 01:37.820
ter uma estrutura semelhante com uma certa quantidade de propriedades

01:37.820 --> 01:40.100
que podem estar lá e certos tipos de propriedades,

01:40.100 --> 01:42.410
para que a função de validação realmente

01:42.410 --> 01:44.950
saiba com o que está trabalhando e possa extrair

01:44.950 --> 01:47.400
corretamente as propriedades e assim por

01:47.400 --> 01:49.870
diante.

01:49.870 --> 01:52.850
Portanto, começarei definindo uma interface.

01:52.850 --> 01:55.380
Podemos também optar por um tipo personalizado, totalmente

01:55.380 --> 01:56.550
sob sua responsabilidade.

01:56.550 --> 01:58.690
Como vou definir a estrutura de um objeto,

01:58.690 --> 02:02.793
sou sempre um grande fã de definir apenas uma interface.

02:03.810 --> 02:06.700
Vou nomeá-lo validável aqui,

02:06.700 --> 02:09.940
porque descreve um objeto validável,

02:09.940 --> 02:13.300
e terá um valor que deve ser um fio

02:13.300 --> 02:17.140
ou também um número.

02:17.140 --> 02:18.980
Ele terá um adereço necessário,

02:18.980 --> 02:21.240
que terá um valor booleano, tão verdadeiro

02:21.240 --> 02:22.630
ou falso.

02:22.630 --> 02:26.470
E então digamos que apoiamos a validação do comprimento mínimo, que

02:26.470 --> 02:28.212
deve ser um número, comprimento

02:28.212 --> 02:30.220
máximo que deve ser um número, e também

02:30.220 --> 02:32.510
no caso de estarmos recebendo um número,

02:32.510 --> 02:35.240
um valor mínimo e um valor máximo.

02:35.240 --> 02:37.417
A diferença para o comprimento mínimo

02:37.417 --> 02:40.310
e máximo é que isto verifica o comprimento da cadeia,

02:40.310 --> 02:42.320
este é o valor do número se estiver

02:42.320 --> 02:43.960
acima de um certo número ou abaixo

02:43.960 --> 02:46.010
de um certo máximo.

02:46.010 --> 02:48.870
Estas são as propriedades que eu quero apoiar.

02:48.870 --> 02:50.470
Agora, além do valor, todos

02:50.470 --> 02:52.140
eles devem ser opcionais,

02:52.140 --> 02:54.410
o que podemos aplicar adicionando

02:54.410 --> 02:57.650
um ponto de interrogação após os nomes.

02:57.650 --> 03:00.070
A propósito, a alternativa ao uso de um ponto de

03:00.070 --> 03:02.720
interrogação é permitir valores indefinidos.

03:02.720 --> 03:04.880
O ponto de interrogação basicamente faz o mesmo.

03:04.880 --> 03:09.370
Diz que é necessário ou um Booleano ou um indefinido.

03:09.370 --> 03:12.610
Portanto, agora temos a interface validável.

03:12.610 --> 03:13.893
O que podemos fazer com isso?

03:14.930 --> 03:17.893
Bem, agora com essa interface criada,

03:18.830 --> 03:21.330
podemos criar essa função, que valida

03:21.330 --> 03:24.220
a função que estou procurando.

03:24.220 --> 03:27.410
Isso deveria obter um objeto tão validável.

03:27.410 --> 03:32.410
Portanto, ValidatableInput é do tipo Validatable.

03:32.410 --> 03:33.450
Essa é a minha idéia aqui.

03:33.450 --> 03:36.400
Assim, ele recebe um objeto que tem esta estrutura.

03:36.400 --> 03:38.270
E agora, lá dentro, podemos

03:38.270 --> 03:41.670
verificar se todas essas propriedades existem

03:41.670 --> 03:44.810
e depois fazer a validação apropriada.

03:44.810 --> 03:46.150
Agora, o que exatamente

03:46.150 --> 03:48.200
fazemos na função de validação?

03:48.200 --> 03:49.033
Bem, no final, quero

03:49.033 --> 03:50.930
criar aqui uma variável, isValid, o que

03:50.930 --> 03:52.330
inicialmente é verdade.

03:52.330 --> 03:54.030
Portanto, a suposição padrão é que

03:54.030 --> 03:55.510
o que recebemos é verdade.

03:55.510 --> 03:57.430
Mas o colocaremos em erro

03:57.430 --> 04:01.330
assim que pelo menos um de nossos cheques falhar.

04:01.330 --> 04:03.480
E agora vamos começar com a primeira verificação.

04:03.480 --> 04:06.410
Vamos ver se o validatInput aqui, este argumento

04:06.410 --> 04:08.220
que estamos recebendo, se

04:08.220 --> 04:11.380
isso tem um adereço necessário?

04:11.380 --> 04:13.260
Se isso não for indefinido.

04:13.260 --> 04:16.490
Se isto for definido, e se for verdade, portanto,

04:16.490 --> 04:18.630
isto significa que o valor é necessário

04:18.630 --> 04:20.630
e não deve estar vazio.

04:20.630 --> 04:22.080
Portanto, agora aqui,

04:22.080 --> 04:26.160
podemos definir isValid igual a isValid e a forma como

04:26.160 --> 04:27.700
o JavaScript funciona,

04:27.700 --> 04:30.550
isto garante que o novo valor de isValid

04:30.550 --> 04:34.330
será falso se a coisa depois e for falsa.

04:34.330 --> 04:36.870
Porque se pelo menos uma das duas coisas for falsa,

04:36.870 --> 04:38.660
o valor total será falso.

04:38.660 --> 04:40.500
Agora o isValid inicialmente

04:40.500 --> 04:44.070
é verdadeiro, mas se a coisa depois da lógica e do operador

04:44.070 --> 04:46.300
for falsa, o isValid será falso.

04:46.300 --> 04:48.700
E no final eu retornarei isValid.

04:48.700 --> 04:50.040
Então, o que acrescentamos

04:50.040 --> 04:53.550
agora depois dos dois símbolos e amperes?

04:53.550 --> 04:57.290
Bem, eu quero verificar se a entrada é válida. valor, se este estiver

04:57.290 --> 04:58.170
vazio.

04:58.170 --> 05:00.530
E para isso, podemos apará-lo

05:00.530 --> 05:04.210
e verificar o comprimento, ou podemos?

05:04.210 --> 05:05.630
Bem, o problema é que não

05:05.630 --> 05:07.510
sabemos se o valor é um fio.

05:07.510 --> 05:09.090
É um fio ou um número.

05:09.090 --> 05:10.910
Portanto, não é garantido ser um fio,

05:10.910 --> 05:12.140
e, portanto, o método de acabamento

05:12.140 --> 05:14.100
nem sempre está disponível.

05:14.100 --> 05:17.570
Agora há várias maneiras de trabalhar em torno disso.

05:17.570 --> 05:19.600
Podemos adicionar um tipo de guarda, podemos

05:19.600 --> 05:23.390
verificar se o tipo de entrada validável. valor é igual a corda,

05:25.250 --> 05:30.250
e só execute esta verificação se for.

05:30.920 --> 05:33.040
Mas na verdade, isso seria um pouco redundante.

05:33.040 --> 05:36.120
O que podemos fazer aqui é muito simples.

05:36.120 --> 05:37.257
Podemos simplesmente dizer

05:37.257 --> 05:39.140
"bem, convertê-lo em uma corda". Se era um número, agora é novamente um fio.

05:39.140 --> 05:41.370
Se era um fio, nada mudou.

05:41.370 --> 05:44.170
E com isso, estamos fazendo isto.

05:44.170 --> 05:45.900
Agora só preciso acrescentar meu

05:45.900 --> 05:47.950
cheque aqui para verificar se é zero.

05:47.950 --> 05:50.360
Ou, para ser mais preciso, se não for zero.

05:50.360 --> 05:53.463
Portanto, se não for zero, então isto retornará

05:54.680 --> 05:56.810
verdadeiro, e isValid permanece

05:56.810 --> 05:58.740
verdadeiro.

05:58.740 --> 06:00.500
Se for zero, então se for de comprimento

06:00.500 --> 06:02.760
zero, se estiver vazio, isto retornará falso

06:02.760 --> 06:04.940
e, portanto, isValid se tornará falso.

06:04.940 --> 06:06.890
E só estamos verificando isso se a verificação

06:06.890 --> 06:08.280
exigida estiver marcada com

06:08.280 --> 06:11.190
a configuração necessária para ser verdadeira.

06:11.190 --> 06:13.530
Esse é o primeiro cheque que quero fazer aqui.

06:13.530 --> 06:15.560
Não é o único, é claro.

06:15.560 --> 06:17.660
Podemos continuar e verificar se a entrada

06:17.660 --> 06:18.950
pode ser validada. comprimento mínimo é definido,

06:18.950 --> 06:23.880
se o comprimento mínimo é definido, então esta corda

06:23.880 --> 06:25.190
que obtemos deve ter um certo

06:25.190 --> 06:27.050
comprimento mínimo.

06:27.050 --> 06:28.780
Importante, a corda deve ter um

06:28.780 --> 06:30.440
certo comprimento mínimo.

06:30.440 --> 06:31.620
Não nos importamos com números aqui,

06:31.620 --> 06:33.600
não estamos verificando um valor mínimo de um número.

06:33.600 --> 06:37.060
Portanto, aqui podemos realmente adicionar um tipo de guarda,

06:37.060 --> 06:40.390
podemos incorporá-lo a esta verificação, e verificar se

06:40.390 --> 06:42.320
o tipo de entrada validável. valor é igual

06:42.320 --> 06:46.910
a cordel.

06:46.910 --> 06:48.460
Se não for, não precisamos entrar nesse

06:48.460 --> 06:50.357
caso, porque então não há nada a verificar.

06:50.357 --> 06:52.570
Se nosso valor é um número, não nos importamos com isso.

06:52.570 --> 06:55.330
Se estabelecermos um comprimento mínimo para um número,

06:55.330 --> 06:57.710
basicamente saltamos esta verificação porque

06:57.710 --> 06:59.330
não faz muito sentido.

06:59.330 --> 07:01.890
Se tivermos uma corda, e o comprimento

07:01.890 --> 07:03.420
mínimo for definido, então

07:03.420 --> 07:05.663
quero definir isValid igual a isValid

07:06.570 --> 07:10.053
e, e então novamente, nosso cheque.

07:11.181 --> 07:12.600
E a verificação

07:12.600 --> 07:16.580
aqui é se a entrada pode ser validada. valor, que sabemos que é um fio neste ponto,

07:16.580 --> 07:20.810
comprimento, é maior

07:20.810 --> 07:24.070
do que a entrada validável. comprimento mínimo.

07:24.070 --> 07:28.520
Portanto, maior que o valor que foi definido aqui.

07:28.520 --> 07:31.660
Mas agora temos aqui um problema em potencial,

07:31.660 --> 07:33.920
e você vê qual poderia ser?

07:33.920 --> 07:36.163
Isto deve geralmente funcionar, mas falhará se o comprimento

07:37.030 --> 07:38.630
mínimo for fixado em zero.

07:38.630 --> 07:42.210
A intenção do desenvolvedor que a coloca em zero

07:42.210 --> 07:45.760
provavelmente não é pular esta verificação,

07:45.760 --> 07:48.760
mas verificar se temos o comprimento mínimo

07:48.760 --> 07:50.170
de zero.

07:50.170 --> 07:51.960
Bem, sem dúvida é um cheque redundante,

07:51.960 --> 07:53.800
porque é basicamente verificar se temos

07:53.800 --> 07:55.850
alguma coisa, o que já fazemos com o cheque

07:55.850 --> 07:57.260
requerido.

07:57.260 --> 07:59.300
Portanto, não é um grande problema.

07:59.300 --> 08:01.330
Mesmo assim, se você quiser estar super

08:01.330 --> 08:04.150
seguro aqui, devemos realmente verificar se a entrada

08:04.150 --> 08:05.470
pode ser validada. O comprimento mínimo não é igual a indefinido.

08:05.470 --> 08:10.470
Ou não igual a nulo, com um sinal

08:10.640 --> 08:14.910
igual, isto inclui nulo e indefinido, é assim que funciona

08:14.910 --> 08:17.130
o JavaScript.

08:17.130 --> 08:18.890
Isto é um pouco mais seguro, porque agora

08:18.890 --> 08:20.470
nos certificamos de sempre executar

08:20.470 --> 08:23.010
esta verificação, mesmo que o comprimento mínimo esteja

08:23.010 --> 08:25.140
ajustado a zero, o que é um valor falso.

08:25.140 --> 08:27.222
Mais uma vez, você poderia argumentar se faz

08:27.222 --> 08:29.740
sentido, porque é basicamente o mesmo cheque que lá em

08:29.740 --> 08:32.270
cima, mas ainda assim, aqui eu quero realizá-lo.

08:32.270 --> 08:34.930
Portanto, esse é o comprimento mínimo.

08:34.930 --> 08:36.790
Agora vou copiar isto, e basicamente fazer o mesmo

08:36.790 --> 08:38.130
para o comprimento máximo.

08:38.130 --> 08:40.720
Portanto, o comprimento máximo aqui também

08:40.720 --> 08:44.350
é verificado, também aqui e também apenas para cordas.

08:44.350 --> 08:46.870
E, claro, aqui só temos de reverter isto.

08:46.870 --> 08:49.280
Queremos ter certeza de que o comprimento do valor

08:49.280 --> 08:52.380
fornecido está abaixo do nosso comprimento máximo.

08:52.380 --> 08:55.173
Bem, e agora nos restam mais dois cheques de valor

08:56.810 --> 08:58.760
mínimo e máximo que só fazem sentido

08:58.760 --> 09:00.160
para um número.

09:00.160 --> 09:03.310
Portanto, aqui acrescentarei outro cheque e verificarei

09:03.310 --> 09:05.150
se a entrada pode ser validada. min não é igual

09:05.150 --> 09:08.280
a nulo.

09:09.720 --> 09:11.100
Mais uma vez, não estou apenas verificando

09:11.100 --> 09:13.820
a veracidade, pois isso teria problemas com um valor zero.

09:13.820 --> 09:17.050
E depois vou verificar se o tipo de entrada validável. valor é igual ao

09:17.050 --> 09:21.770
número.

09:21.770 --> 09:23.250
Porque não vejo muito sentido

09:23.250 --> 09:25.640
em verificar isto por um fio.

09:25.640 --> 09:26.760
Se você quiser verificar se há um fio,

09:26.760 --> 09:28.020
é claro que você pode omitir isto.

09:28.020 --> 09:29.680
Então você só tem que ter certeza

09:29.680 --> 09:32.120
de converter o valor para um número quando usá-lo

09:32.120 --> 09:34.380
no cheque que estamos prestes a passar.

09:34.380 --> 09:35.970
O cheque que estamos prestes a escrever,

09:35.970 --> 09:37.220
novamente, usa o valor antigo

09:37.220 --> 09:39.740
de isValid e o combina com um novo cheque para então armazená-lo

09:39.740 --> 09:41.500
de volta em isValid.

09:41.500 --> 09:44.000
E o novo cheque deve agora incorporar

09:44.000 --> 09:47.210
bem nosso número e verificar se é maior do que

09:47.210 --> 09:48.730
o valor mínimo.

09:48.730 --> 09:50.720
Portanto, aqui eu verifico se a entrada pode ser validada. valor é maior do que o valor

09:50.720 --> 09:54.650
validávelInput. min.

09:54.650 --> 09:58.690
E agora podemos repetir isto para max,

09:58.690 --> 10:02.010
então aqui precisamos de max e aqui também precisamos de max

10:02.010 --> 10:06.190
e precisamos mudar isto aqui para um símbolo menor que o símbolo.

10:06.190 --> 10:10.363
Com isso, estamos verificando todos os diferentes cenários que você

10:11.920 --> 10:13.230
poderia ter aqui.

10:13.230 --> 10:16.930
E nós estamos retornando éVálido.

10:16.930 --> 10:18.710
Agora só precisamos criar objetos que

10:19.840 --> 10:21.600
aderem a esta interface para depois

10:21.600 --> 10:23.630
enviá-los para a função de validação.

10:23.630 --> 10:26.573
Para isso, vamos descer para a entrada do

10:28.160 --> 10:31.360
projeto, e lá no collectUserInput eu quero

10:31.360 --> 10:34.000
construir meu objeto validável.

10:34.000 --> 10:36.360
Nota lateral, além de uma interface, claro que também

10:36.360 --> 10:38.420
poderíamos ter criado uma aula aqui, então poderíamos

10:38.420 --> 10:40.870
instanciá-la com a nova palavra-chave, mas tudo isso

10:40.870 --> 10:43.570
para fins de prática e demonstração aqui eu quero mostrar como

10:43.570 --> 10:46.070
isso funciona com uma interface.

10:46.070 --> 10:48.990
Portanto, aqui temos nosso títuloValidatable,

10:48.990 --> 10:51.900
que deve ser do tipo Validatable.

10:52.850 --> 10:54.970
E isso, é claro, é um objeto que precisa

10:54.970 --> 10:56.830
ter um bem de valor.

10:56.830 --> 10:58.930
E esse é o nosso título de entrada.

10:58.930 --> 11:01.020
Não precisa de nenhuma outra propriedade,

11:01.020 --> 11:03.550
mas quero verificar se não está vazia, por

11:03.550 --> 11:06.750
isso, vamos nos tornar verdadeiros.

11:06.750 --> 11:08.743
E então podemos copiar isso e repetir

11:09.710 --> 11:12.430
isso para a descrição e para as pessoas.

11:12.430 --> 11:16.270
E aqui temos a descrição, whoops, a descrição

11:16.270 --> 11:19.250
entrada, quero dizer.

11:19.250 --> 11:21.880
Aqui temos as pessoas inscritas.

11:21.880 --> 11:24.260
Para ser mais preciso, quero ter aqui um número.

11:24.260 --> 11:26.230
Portanto, converto isto para um número com um símbolo de mais.

11:26.230 --> 11:29.020
Todos devem ser exigidos, mas também aqui digamos

11:29.020 --> 11:30.810
que a descrição deve ter um comprimento

11:30.810 --> 11:32.890
mínimo de cinco caracteres e, para as

11:32.890 --> 11:35.420
pessoas, o mínimo deve ser um, para que tenhamos

11:35.420 --> 11:38.823
pelo menos duas pessoas designadas.

11:39.820 --> 11:42.030
A propósito, cabe a você como implementar isto.

11:42.030 --> 11:44.020
É claro que, em sua lógica de validação,

11:44.020 --> 11:47.200
você também poderia verificar se há um maior igual

11:47.200 --> 11:50.080
a um menor, se assim desejar.

11:50.080 --> 11:52.030
O mesmo para a duração do curso.

11:52.030 --> 11:54.200
Maior igual, menor igual.

11:54.200 --> 11:56.940
Isso também é possível.

11:56.940 --> 11:58.660
Na verdade, vou manter estas mudanças.

11:58.660 --> 12:00.520
Portanto, agora temos o mínimo de uma pessoa

12:00.520 --> 12:01.920
designada e um máximo de cinco.

12:01.920 --> 12:05.253
Agora temos estes três objetos validáveis e

12:06.100 --> 12:08.500
agora aqui, para a função validar,

12:08.500 --> 12:11.680
passamos nosso títuloValidável, para a segunda

12:11.680 --> 12:14.920
chamada de função eu passo a descriçãoValidável,

12:14.920 --> 12:16.440
e para a terceira chamada

12:16.440 --> 12:21.310
de função eu passo as pessoasValidável.

12:21.310 --> 12:24.460
E agora validar deve retornar verdadeiro se todos forem

12:24.460 --> 12:26.380
válidos, e falso caso contrário.

12:26.380 --> 12:29.480
Portanto, agora eu quero verificar se pelo menos

12:29.480 --> 12:32.420
um deles falha, verificando se todos eles

12:32.420 --> 12:36.580
são falsos, acrescentando um ponto de exclamação na frente

12:36.580 --> 12:38.970
dele, para verificar se isto é falso

12:38.970 --> 12:41.560
ou se é falso ou se é falso.

12:41.560 --> 12:42.740
E se pelo menos uma delas for falsa,

12:42.740 --> 12:44.750
então se pelo menos uma das chamadas de função validada

12:44.750 --> 12:45.730
retornar falsa, vamos conseguir

12:45.730 --> 12:47.760
entrar lá e mostrar o alerta.

12:47.760 --> 12:49.860
E com isso fora do caminho, para

12:51.930 --> 12:53.610
testar também isto, vou para

12:53.610 --> 12:54.860
a indexação. html, porque na entrada

12:54.860 --> 12:56.270
para as pessoas,

12:56.270 --> 12:58.210
eu realmente permito um máximo

12:58.210 --> 13:00.410
de 10 e um mínimo de zero.

13:00.410 --> 13:01.460
Assim, na entrada, tecnicamente, podemos inserir valores inválidos.

13:01.460 --> 13:05.120
De propósito, é claro, para que possamos testar

13:05.120 --> 13:06.240
nossa lógica.

13:06.240 --> 13:08.090
E aí, por enquanto, vamos salvar

13:08.090 --> 13:10.200
tudo, compila sem erros.

13:10.200 --> 13:11.750
Vamos agora tentar.

13:11.750 --> 13:13.083
Se eu clicar em adicionar

13:13.920 --> 13:16.000
projeto, eu recebo um erro que é bom.

13:16.000 --> 13:17.430
Agora, vamos entrar no teste aqui, ainda com um erro.

13:17.430 --> 13:21.370
Vamos entrar no teste aqui e cinco aqui,

13:21.370 --> 13:24.180
e ainda recebo um erro.

13:24.180 --> 13:25.390
Porque minha descrição é muito curta.

13:25.390 --> 13:26.870
Se eu inserir mais um personagem,

13:26.870 --> 13:28.160
eu tenho o comprimento mínimo

13:28.160 --> 13:29.500
e posso criar isto.

13:29.500 --> 13:31.210
Então agora vamos entrar, digamos,

13:31.210 --> 13:32.640
menos uma pessoa, e bem,

13:32.640 --> 13:34.580
html não suporta isto.

13:34.580 --> 13:37.940
Mas entremos zero ou seis e recebemos

13:37.940 --> 13:39.200
erros.

13:39.200 --> 13:42.040
E somente se eu entrar algo entre um e

13:42.040 --> 13:43.840
cinco, isso funciona.

13:43.840 --> 13:46.100
Assim parece funcionar

13:46.100 --> 13:49.260
como deveria, e isso é muito bom.

13:49.260 --> 13:50.240
E esta é, naturalmente, apenas

13:50.240 --> 13:51.850
uma forma de implementar a validação.

13:51.850 --> 13:53.570
Mas uma maneira que agora é realmente

13:53.570 --> 13:56.510
bastante reutilizável, poderia ser usada assim também em diferentes

13:56.510 --> 13:59.170
partes do aplicativo e, claro, aproveita o datilografia

13:59.170 --> 14:01.660
e nos oferece grande suporte e verificação de digitação

14:01.660 --> 14:04.480
para evitar erros desnecessários.
