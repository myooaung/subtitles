WEBVTT

00:02.060 --> 00:07.060
男：和扩展算子有关的是剩余参数｡

00:07.060 --> 00:10.374
为此, 我将再次调整add函数｡ 

00:10.374 --> 00:15.780
所以我会注释掉上面的所有代码, 这样就不会有任何问题了｡

00:15.780 --> 00:20.520
然后用你想要的任何语法重新添加我的add函数, 把函数关键字作为一个箭头函数,

00:20.520 --> 00:23.830
不管你想要什么｡

00:23.830 --> 00:26.360
但现在我想有一个特殊的功能｡ 

00:26.360 --> 00:33.290
我不想将其限制为两个值, 我希望能够添加用户传入的尽可能多的值｡

00:33.290 --> 00:37.700
所以我们基本上可以这样调用add,

00:37.700 --> 00:44.530
5, 10, 2, 3, 7, 等等, 你想要多少个值都行｡

00:44.530 --> 00:46.691
如果你想用10个值来调用它,

00:46.691 --> 00:48.090
那也是可能的｡

00:48.090 --> 00:51.160
当然, 现在, 你可以清楚地看到,

00:51.160 --> 00:52.600
这是不可能的｡

00:52.600 --> 00:54.290
Typescript给了我一个错误,

00:54.290 --> 00:57.760
这是正确的, 因为我在这里不接受任何参数｡

00:57.760 --> 01:00.336
当然我可以接受这里的参数并赋值给正确的类型,

01:00.336 --> 01:04.300
但是如果我用5来调用它呢｡

01:04.300 --> 01:06.330
就像我说的, 我想灵活一点｡ 

01:06.330 --> 01:08.850
这就是休息参数的作用所在｡ 

01:08.850 --> 01:13.111
在你期望得到一个值列表的地方, 不是你想传递它的地方,

01:13.111 --> 01:15.270
而是你想接受它作为传入值的地方,

01:15.270 --> 01:24.043
你也可以使用三个点, 然后是你选择的任何名字, 比如numbers｡

01:25.630 --> 01:27.430
它会把所有传入的参数,

01:27.430 --> 01:39.350
或者通常是传入的值列表, 逗号分隔的值列表, 合并到一个数组中.

01:39.350 --> 01:40.940
这里的数字是一个数组,

01:40.940 --> 01:44.460
当然默认情况下是一个任意值的类型, 一个充满任意值的数组,

01:44.460 --> 01:49.680
这不是我们应该做的, 我们应该更明确一些｡

01:49.680 --> 01:53.200
这里我们可以说, "这是一个数组. 就像这样

01:53.200 --> 01:54.430
现在我们定义了正确的类型,

01:54.430 --> 01:56.420
并使用了数字数组｡

01:56.420 --> 01:58.710
现在我们可以用几种不同的方式来总结｡ 

01:58.710 --> 02:01.880
我们可以使用一个result变量, 然后执行一个四循环,

02:01.880 --> 02:04.110
因为numbers是一个数组｡

02:04.110 --> 02:09.260
所以这里我们可以循环遍历数字并将其加到结果中｡

02:09.260 --> 02:11.519
或者我们使用reduce方法, 它在数组上可用｡ 

02:11.519 --> 02:15.620
Reduce的工作方式是对数组中的每个元素执行操作,

02:15.620 --> 02:20.940
返回结果, 然后将这些结果相加｡

02:20.940 --> 02:24.310
为此, 你提供了一个函数来减少, 然后一个起始值,

02:24.310 --> 02:27.160
这里是零｡

02:27.160 --> 02:35.920
然后这个传递给reduce本身的函数有两个参数这就是当前的结果.

02:35.920 --> 02:38.968
我们看到的是当前值,

02:38.968 --> 02:42.640
也就是数组1的每个值.

02:42.640 --> 02:45.350
然后在这里你可以返回cuResult,

02:45.350 --> 02:48.290
第一次运行时它就是这里的初始值｡

02:48.290 --> 02:51.497
加上curValue｡ 

02:51.497 --> 02:52.703
如果你这样做, 这里会返回一个数字｡ 

02:53.859 --> 02:57.920
所以这里我们可以返回数字化简后的结果,

02:57.920 --> 03:01.160
所以add变量, 或者这里的常量,

03:01.160 --> 03:04.790
最后会有一个函数, 它是一对数字,

03:04.790 --> 03:07.320
而不是一个数组｡

03:07.320 --> 03:10.650
但是因为rest参数, 一个数字列表,

03:10.650 --> 03:13.690
然后被合并到函数内部的一个数组中,

03:13.690 --> 03:16.510
最后返回数字.

03:16.510 --> 03:18.550
所以现在如果我们把所有的东西都存起来,

03:18.550 --> 03:20.350
它应该都能工作, 我们可以看到结果,

03:20.350 --> 03:23.350
我们在这里加的和｡

03:23.350 --> 03:26.250
这就是rest参数, 一个非常有用的特性,

03:26.250 --> 03:31.400
可以接受无限数量的参数｡

03:31.400 --> 03:34.210
一些内置的方法, 如push方法,

03:34.210 --> 03:36.680
就是这样工作的｡

03:36.680 --> 03:38.540
你看, 这里push有一个奇怪的参数定义｡ 

03:38.540 --> 03:42.560
这正是我们刚刚了解到的｡ 

03:42.560 --> 03:44.250
Push在这里取数组的几个项,

03:44.250 --> 03:48.490
这是一个充满字符串的数组｡

03:48.490 --> 03:50.400
需要几根绳子｡ 

03:50.400 --> 03:51.730
这并不意味着它需要一个字符串数组,

03:51.730 --> 04:01.260
而是在这里使用其余的参数, 一个逗号分隔的字符串列表, 然后将其合并到一个数组中, 并在内部处理｡

04:01.260 --> 04:03.100
这就是rest参数的语法｡ 

04:03.100 --> 04:06.276
顺便说一下, 您甚至可以将它与元组结合起来｡ 

04:06.276 --> 04:10.370
如果你知道你想支持多个参数, 但是你知道它的数量,

04:10.370 --> 04:20.392
如果它不是一个无限的列表, 那么你也可以在这里使用元组类型.

04:20.392 --> 04:23.430
比如说, “我在这里接受免费号码｡  然后在调用函数的时候,

04:23.430 --> 04:28.430
我必须去掉第四个参数.

04:28.460 --> 04:30.910
因为现在我很清楚我想要得到三个参数,

04:30.910 --> 04:32.240
每个参数都是数字｡

04:32.240 --> 04:33.830
当然, 我们可以在这里添加三个独立的参数,

04:33.830 --> 04:40.720
但与添加自由参数相比, 这种语法可能仍然更短或更容易设置｡

04:40.720 --> 04:43.090
这实际上取决于您的应用和要求｡ 

04:43.090 --> 04:46.919
在这里我将不再使用这种设置,

04:46.919 --> 04:51.320
而是更一般化, 接受尽可能多的参数,

04:51.320 --> 04:57.864
因为对于这个函数, 我确实能够处理无限多的参数｡
