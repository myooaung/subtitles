WEBVTT

00:02.160 --> 00:04.860
Penyaji: Jadi sekarang kita telah melihat contoh bagus lainnya tentang

00:04.860 --> 00:06.440
bagaimana kita bisa bekerja dengan dekorator,

00:06.440 --> 00:09.040
ada satu contoh terakhir yang ingin saya selami.

00:09.040 --> 00:11.997
Dan itu adalah dekorator untuk validasi.

00:11.997 --> 00:14.560
Untuk itu, di bagian bawah file, saya

00:14.560 --> 00:17.733
akan menambahkan kelas baru lagi di sini.

00:18.780 --> 00:20.530
Itu bisa menjadi kursus.

00:20.530 --> 00:23.903
Sekarang, sebuah kursus harus memiliki judul, yang merupakan sebuah string.

00:25.430 --> 00:27.483
Dan mungkin harga, yang merupakan angka.

00:29.730 --> 00:32.640
Kemudian di sini kita memiliki konstruktor di mana kita mendapatkan

00:32.640 --> 00:34.440
kedua nilai di sini dan saya sengaja tidak

00:35.550 --> 00:37.780
menggunakan shortcut di sini, sehingga saya dapat

00:37.780 --> 00:40.953
dengan mudah menambahkan dekorator properti.

00:42.690 --> 00:44.560
Kemudian, saya menetapkan judul ini sama

00:44.560 --> 00:46.653
dengan t, dan harga ini sama dengan p.

00:47.990 --> 00:50.530
Nah, tentu saja sekarang ketika kita ingin membuat kursus

00:50.530 --> 00:53.610
ini, kita harus memasukkan judul yang valid dan harga yang valid.

00:53.610 --> 00:56.730
Tetapi satu skenario umum yang mungkin Anda temui di beberapa

00:56.730 --> 00:59.630
aplikasi adalah Anda mengambil data, katakanlah dari

00:59.630 --> 01:03.340
sumber daya web dan Anda mendapatkan data di mana Anda menebak Anda

01:03.340 --> 01:05.854
memiliki beberapa kursus katakanlah, tetapi

01:05.854 --> 01:08.110
Anda tidak tahu pasti.

01:08.110 --> 01:12.839
Atau, skenario lain yang mungkin terjadi, Anda membiarkan pengguna memasukkan data dan Anda hanya

01:12.839 --> 01:15.490
ingin menetapkan data itu dan memperdagangkan kursus

01:15.490 --> 01:18.370
baru dengan data yang dimasukkan pengguna dan Anda berasumsi

01:18.370 --> 01:21.280
bahwa itu benar, tetapi Anda tidak dijamin bahwa itu benar dan

01:21.280 --> 01:22.500
oleh karena itu Anda ingin

01:22.500 --> 01:24.210
memvalidasi input.

01:24.210 --> 01:26.380
Itulah skenario yang ingin saya palsukan di sini.

01:26.380 --> 01:29.940
Katakanlah dalam file html indeks kita, kita mendapatkan formulir

01:30.894 --> 01:32.840
sederhana di sini dan saya tidak akan

01:32.840 --> 01:36.074
menatanya, jadi sekarang akan menjadi seindah itu, tetapi kita

01:36.074 --> 01:41.074
memiliki formulir sederhana di sini dengan input jenis teks dan placeholder judul, woops, tentu

01:41.390 --> 01:44.620
saja, judul dan id katakanlah judul dan di bawahnya kita memiliki

01:44.620 --> 01:46.870
input angka di mana jenisnya adalah semua teks,

01:46.870 --> 01:50.605
tetapi itu adalah harga kursus dan id adalah harga.

01:50.605 --> 01:55.030
Dan kemudian kita memiliki tombol di mana kita mengirimkan ini.

01:55.030 --> 02:00.030
Jadi tombolnya bertipe submit.

02:00.040 --> 02:02.780
Jadi bentuk yang sangat sederhana dan seperti yang saya katakan itu tidak

02:02.780 --> 02:04.280
terlalu indah jika kita melihatnya di sini,

02:04.280 --> 02:06.070
tetapi memiliki semua yang kita butuhkan.

02:06.070 --> 02:08.763
Sekarang, mari kita kaitkan pendengar ke formulir di sini.

02:09.830 --> 02:14.780
Jadi di sini saya mendapatkan courseForm saya yang bisa saya dapatkan dengan document, querySelector,

02:14.780 --> 02:18.840
form dan saya tambahkan tanda seru karena saya tahu saya akan mendapatkannya sehingga

02:18.840 --> 02:21.910
ini tidak akan null, dan kemudian pada form kita dapat menambahkanEventListener,

02:21.910 --> 02:25.050
pendengar acara submit dan kemudian kita mendapatkan objek acara

02:26.390 --> 02:29.300
yang diteruskan ke dalam fungsi yang saya tetapkan secara

02:29.300 --> 02:32.360
otomatis.

02:32.360 --> 02:35.450
Di sana saya ingin memanggil event preventDefault, sehingga kita tidak

02:35.450 --> 02:38.030
mengirimkan form dan tidak mengirimkan http request.

02:38.030 --> 02:40.570
Dan kemudian kami ingin mengekstrak

02:40.570 --> 02:42.910
data untuk judul dan harga.

02:42.910 --> 02:45.779
Jadi, judul dapat diekstraksi dengan menjangkau

02:45.779 --> 02:49.700
dokumen, querySelector, atau sebenarnya karena kami menetapkan

02:49.700 --> 02:54.700
id, getElementById, judul dan kami tahu bahwa ini akan menjadi HTMLInputElement

02:55.560 --> 02:59.760
sehingga kami dapat menggunakan typecasting untuk membiarkan typescript

02:59.760 --> 03:01.700
tahu tentang ini, dan harganya

03:01.700 --> 03:06.174
adalah dokumen, getElementById, harga dan kami juga dapat mengonversi

03:06.174 --> 03:09.672
ini menjadi InputElement.

03:09.672 --> 03:11.320
Dan saya sebenarnya di sana untuk ini adalah

03:11.320 --> 03:14.520
elemennya jadi kita akan mengganti nama konstanta menjadi titleEL dan priceEl

03:14.520 --> 03:17.779
dan untuk mendapatkan judul konkret kita sekarang dapat pergi ke titleEl,

03:17.779 --> 03:20.930
akses ke properti nilai dan untuk mendapatkan harga, kita dapat melakukan

03:20.930 --> 03:23.400
hal yang sama untuk priceElement dan mendapatkan nilainya

03:23.400 --> 03:25.260
di sana juga, dan saya ingin menambahkan sebagai

03:25.260 --> 03:26.840
angka, jadi saya menambahkan plus di

03:26.840 --> 03:30.060
depannya untuk mengubahnya menjadi angka.

03:30.060 --> 03:34.017
Nah, itu saja, tetapi sekarang saya ingin membuat kursus

03:34.017 --> 03:36.090
baru dengan informasi itu.

03:36.090 --> 03:39.060
Jadi, di sini kita memiliki kursus yang dibuat di

03:39.060 --> 03:43.850
mana saya dapat memanggil kursus baru dan saya memasukkan judul dan harga.

03:43.850 --> 03:46.770
Sekarang typescript menerima ini, karena judul akan menjadi string

03:46.770 --> 03:48.640
dan karena saya mengkonversi input ini ke angka,

03:48.640 --> 03:50.200
harga akan menjadi angka.

03:50.200 --> 03:54.160
Jadi, jika saya kemudian console log, kursus yang dibuat setelahnya, kita dapat memeriksa

03:54.160 --> 03:55.530
apakah ini berfungsi.

03:55.530 --> 03:58.693
Mari kita simpan itu, muat ulang, mungkin kosongkan konsol sehingga kita

03:58.693 --> 04:00.680
dapat melihat output dengan jelas, dan kemudian

04:00.680 --> 04:02.400
tambahkan kursus baru di sini.

04:02.400 --> 04:05.785
Javascript, panduan lengkapnya berharga $199

04:05.785 --> 04:08.010
dan ini tampaknya berhasil.

04:08.010 --> 04:11.010
Sekarang, sayangnya ini hanya berfungsi jika

04:11.010 --> 04:13.290
saya tidak memasukkan apa pun.

04:13.290 --> 04:16.600
Jika sekarang saya klik save, kita melihat kursus ini sudah dibuat.

04:16.600 --> 04:19.820
Sekarang, secara teknis ini adalah kursus yang valid tetapi

04:19.820 --> 04:23.121
tentu saja, itu tidak benar-benar valid untuk aplikasi kita.

04:23.121 --> 04:26.220
Kita mungkin ingin memiliki judul yang tidak kosong

04:26.220 --> 04:28.620
dan harga yang lebih besar dari nol.

04:28.620 --> 04:30.660
Jadi kita ingin menambahkan validasi.

04:30.660 --> 04:32.670
Tentu saja kita bisa menambahkan if

04:32.670 --> 04:37.130
check di sini dan memeriksa apakah title, trim, length lebih besar dari nol, yang

04:37.130 --> 04:38.830
berarti tidak kosong dan di mana

04:38.830 --> 04:41.100
kita juga memvalidasi harga.

04:41.100 --> 04:43.870
Tetapi itu berarti bahwa setiap kali kita membuat kursus baru,

04:43.870 --> 04:47.880
kita harus menambahkan logika validasi di sini sebelum kita menambahkannya.

04:47.880 --> 04:49.990
Bukankah lebih baik jika logika validasi

04:49.990 --> 04:51.910
dimasukkan ke dalam kelas kursus, dengan

04:51.910 --> 04:53.940
bantuan dekorator, mungkin?

04:53.940 --> 04:56.770
Dan itulah yang ingin saya lakukan di sini.

04:56.770 --> 04:59.910
Sekarang saya hanya akan memberikan ide dasar tentang bagaimana kita

04:59.910 --> 05:01.447
bisa mengimplementasikan ini, dalam

05:01.447 --> 05:04.861
modul berikutnya saya akan menunjukkan kepada Anda sebuah contoh paket yang

05:04.861 --> 05:08.270
melakukan ini dengan cara yang lebih rumit dan yang kemudian kita semua akan

05:08.270 --> 05:10.010
menggunakannya di sana untuk bermain-main

05:10.010 --> 05:12.080
dengan itu sedikit.

05:12.080 --> 05:14.530
Sekarang bagaimanapun di sini saya ingin mengimplementasikan

05:14.530 --> 05:16.300
ini dengan dekorator saya sendiri dan

05:16.300 --> 05:19.370
saya akan menambahkan dekorator yang diperlukan di sini dan kami

05:19.370 --> 05:21.890
akan menambahkan fungsi dekorator lain yang akan saya

05:21.890 --> 05:24.433
beri nama PositiveNumber.

05:26.710 --> 05:28.510
Jadi saya punya dua dekorator di sini.

05:28.510 --> 05:31.240
Dan sekarang ide saya adalah bahwa kita dapat

05:31.240 --> 05:35.369
menambahkannya di sini ke properti kita, misalnya Required di

05:35.369 --> 05:40.369
depan judul, dan positiveNumber di depan harga dan typescript semacam mendaftarkan

05:41.740 --> 05:44.020
ini di suatu tempat dan kemudian kita

05:44.020 --> 05:49.020
punya fungsi ketiga, validasi yang dapat kita lewati objek sehingga objek

05:49.490 --> 05:54.490
apa pun dan typescript kemudian melihat proyek, menemukan validasi apa pun

05:55.120 --> 05:58.780
yang kami daftarkan di kelas ini untuk objek ini sebelumnya

05:58.780 --> 06:03.410
dan menerapkan logika validasi kami.

06:03.410 --> 06:05.480
Itulah gagasan yang saya miliki di sini.

06:05.480 --> 06:08.240
Jadi, ini bisa menjadi bagian dari perpustakaan pihak ketiga yang

06:08.240 --> 06:11.170
kami paparkan kepada Anda dan kemudian Anda hanya mengimpor nomor positif

06:11.170 --> 06:14.620
yang diperlukan dan memvalidasi untuk pertama-tama mengatur validator dan kemudian

06:14.620 --> 06:16.750
pada titik tertentu memanggil validasi.

06:16.750 --> 06:18.634
Jadi misalnya di sini ketika

06:18.634 --> 06:22.462
kita membuat course, kita bisa memanggil validate dan mengoper

06:22.462 --> 06:27.462
createdCourse dan jika ini tidak benar, jadi katakanlah ini harus kembali

06:30.370 --> 06:31.660
benar atau salah, jika

06:31.660 --> 06:35.040
ini tidak benar, maka kita melempar kesalahan atau

06:35.040 --> 06:42.960
menampilkan peringatan, input tidak valid silakan coba lagi dan hanya jika tidak, kita lanjutkan.

06:42.960 --> 06:43.870
Jadi itulah ide saya.

06:43.870 --> 06:46.540
Yang bisa kita panggil validate, ini mengembalikan true atau false.

06:46.540 --> 06:48.793
Benar jika valid, salah jika tidak valid dan

06:48.793 --> 06:51.670
oleh karena itu kita dapat menggunakan hasilnya.

06:51.670 --> 06:53.730
Jadi, oleh karena itu kita mendapatkan beberapa hal yang harus dilakukan.

06:53.730 --> 06:56.290
Kita perlu memastikan bahwa ketika kita menambahkan dekorator

06:56.290 --> 06:59.350
di sini, ini entah bagaimana disimpan di suatu tempat.

06:59.350 --> 07:00.970
Sekali lagi, perlu diingat bahwa

07:00.970 --> 07:02.950
ini bisa menjadi bagian dari pustaka pihak

07:02.950 --> 07:05.710
ketiga kita sendiri, jadi di sana kita bisa memiliki

07:05.710 --> 07:10.050
semacam penyimpanan yang menyimpan bahwa untuk kelas ini dan properti judul ini misalnya,

07:10.050 --> 07:12.480
kita ingin itu diperlukan.

07:12.480 --> 07:15.630
Dan di validate, kita bisa mengecek apakah di dalam penyimpanan untuk

07:15.630 --> 07:19.026
objek yang kita dapatkan, untuk kelas yang menjadi dasar objek tersebut

07:19.026 --> 07:21.990
kita memiliki validator yang terdaftar untuk judul, untuk harga

07:21.990 --> 07:23.330
dan sebagainya.

07:23.330 --> 07:25.260
Dan kita kemudian menjalankan logika validasi kita.

07:25.260 --> 07:26.453
Itulah ide saya di sini.
