WEBVTT

00:02.350 --> 00:04.170
المدرب: إذن ما هو TypeScript؟

00:04.170 --> 00:06.860
ما هو كل هذا ، لماذا نستخدمه؟

00:06.860 --> 00:10.820
TypeScript هو مجموعة JavaScript Superset.

00:10.820 --> 00:12.190
الآن ماذا يعني هذا؟

00:12.190 --> 00:14.250
هذا يعني أن TypeScript هي

00:14.250 --> 00:16.370
في النهاية لغة ، لغة برمجة

00:16.370 --> 00:18.710
، مبنية على JavaScript.

00:18.710 --> 00:20.940
إنها ليست لغة جديدة تمامًا

00:20.940 --> 00:23.980
، ولكنها بدلاً من ذلك تأخذ لغة JavaScript

00:23.980 --> 00:27.450
وتضيف ميزات ومزايا جديدة إليها.

00:27.450 --> 00:31.720
يمكنك القول إنه يجعل كتابة كود JavaScript أسهل

00:31.720 --> 00:32.840
وأكثر قوة.

00:32.840 --> 00:35.624
لكن لدينا عيب كبير.

00:35.624 --> 00:39.786
لا يمكن تنفيذ TypeScript بواسطة بيئات JavaScript

00:39.786 --> 00:41.760
مثل المتصفح.

00:41.760 --> 00:44.270
لا يمكن للمتصفحات تنفيذ TypeScript

00:44.270 --> 00:48.486
، وعلى سبيل المثال ، Node. js أيضًا لا يمكنه تنفيذ TypeScript

00:48.486 --> 00:52.250
، لذا فإن البيئات التي يمكننا فيها تنفيذ JavaScript لا

00:52.250 --> 00:54.080
تدعم TypeScript.

00:54.080 --> 00:56.140
ما هي الفكرة وراء TypeScript إذن؟

00:56.140 --> 01:00.760
إنها نسخة أفضل من JavaScript ولا يمكننا استخدامها؟

01:00.760 --> 01:02.130
كذلك ليس تماما.

01:02.130 --> 01:06.050
TypeScript هي لغة برمجة ، لكنها أيضًا أداة.

01:06.050 --> 01:10.049
إنه مترجم قوي تقوم بتشغيله على التعليمات البرمجية الخاصة بك

01:10.049 --> 01:14.410
لتجميع التعليمات البرمجية المطبوعة الخاصة بك إلى JavaScript.

01:14.410 --> 01:16.540
لذا ، فإن ما تحصل عليه كنتيجة لكتابة

01:16.540 --> 01:20.260
التعليمات البرمجية في TypeScript هو JavaScript.

01:20.260 --> 01:22.870
لكنك لم تكتب كود JavaScript هذا ،

01:22.870 --> 01:24.900
لقد كتبت كود TypeScript مع

01:24.900 --> 01:27.480
جميع الميزات الجديدة وجميع المزايا

01:27.480 --> 01:30.670
، وتحصل على كود JavaScript عادي.

01:30.670 --> 01:33.810
حسنًا ، هذا بالطبع يثير سؤالًا مهمًا واحدًا

01:33.810 --> 01:36.710
، كيف يمكن لـ TypeScript إضافة ميزات جديدة

01:36.710 --> 01:40.630
إذا كان ما تحصل عليه في النهاية هو JavaScript عادي؟

01:40.630 --> 01:43.460
والإجابة هي أن برنامج التحويل البرمجي

01:43.460 --> 01:47.710
TypeScript يجمع هذه الميزات الجديدة إلى حلول JavaScript

01:47.710 --> 01:50.670
، لذلك في النهاية قد يمنحك بناء جملة أفضل

01:50.670 --> 01:52.890
، وطريقة أسهل للقيام بشيء ما ، ثم

01:52.890 --> 01:56.571
يقوم بتجميع تلك الطريقة الأسهل والأجمل إلى JavaScript

01:56.571 --> 01:59.820
أكثر تعقيدًا. المقتطف ، الذي سيتعين عليك كتابته

01:59.820 --> 02:02.060
بخلاف ذلك.

02:02.060 --> 02:03.230
لذا فهو ليس سحرًا

02:03.230 --> 02:06.790
، بالطبع لا يمكنه إضافة ما هو غير ممكن على الإطلاق

02:06.790 --> 02:08.610
في لغة JavaScript ، ولكن

02:08.610 --> 02:11.150
يمكنه إضافة ميزات جديدة أسهل في الاستخدام

02:11.150 --> 02:15.020
، وبناء جملة أجمل ، وأشياء من هذا القبيل.

02:15.020 --> 02:17.470
بالإضافة إلى ذلك ، فإن TypeScript ، بالطبع

02:17.470 --> 02:20.900
، تقوم بشيء واحد مهم ، والذي يشير إليه الاسم بالفعل.

02:20.900 --> 02:22.740
يضيف أنواعًا ، ويضيف ميزة

02:22.740 --> 02:26.230
إلى لغة JavaScript ، والتي سنلقي نظرة فاحصة

02:26.230 --> 02:28.750
عليها في ثانية ، والتي ستمنحك بالفعل

02:28.750 --> 02:31.541
كمطور ، فرصة لتحديد الأخطاء في التعليمات

02:31.541 --> 02:35.070
البرمجية الخاصة بك مسبقًا قبل تشغيل البرنامج

02:35.070 --> 02:41.350
النصي الخاص بك و حدث خطأ في وقت التشغيل في المتصفح.

02:41.350 --> 02:44.320
لذلك ، فهو لا يمنحك بعض الميزات الجديدة والطرق

02:44.320 --> 02:46.690
الأكثر روعة للقيام بشيء ما فحسب ، بل

02:46.690 --> 02:50.240
يمنحك أيضًا فحصًا إضافيًا للأخطاء حيث يمكن اكتشاف

02:50.240 --> 02:54.153
الأخطاء التي قد تحصل عليها بخلاف ذلك حيث يمكن اكتشاف أخطاء

02:54.153 --> 02:58.370
وقت التشغيل وإصلاحها في وقت مبكر أثناء التطوير.

02:58.370 --> 03:00.600
إذن ، لماذا نستخدم TypeScript؟

03:00.600 --> 03:02.570
ضع في اعتبارك هذا المثال

03:02.570 --> 03:06.710
، دالة JavaScript بسيطة إلى حد ما تضيف رقمين.

03:06.710 --> 03:08.760
الآن عندما أسميها ، يرجى ملاحظة

03:08.760 --> 03:11.810
أنني أمرر سلسلتين بدلاً من رقمين ، وسأريكم

03:11.810 --> 03:14.810
مثالًا حقيقيًا حيث يمكن أن يحدث شيء كهذا

03:14.810 --> 03:18.090
بشكل واقعي في غضون ثانية فقط.

03:18.090 --> 03:20.270
لذلك ، نحن نسمي هذه الدالة بسلسلتين

03:20.270 --> 03:22.519
ونتيجة لذلك فإن ما ستحصل عليه هنا

03:22.519 --> 03:25.260
هو على الأرجح سلوك غير مرغوب فيه ، لأنك

03:25.260 --> 03:27.240
إذا أضفت سلسلتين ، فإن JavaScript

03:27.240 --> 03:29.596
سوف يربط السلاسل بدلاً من القيام

03:29.596 --> 03:32.780
بحسابات رياضية هنا.

03:32.780 --> 03:36.310
إذن ، لن تكون النتيجة خمسة ، بل ثلاثة وعشرون

03:36.310 --> 03:38.980
، سلسلة متسلسلة من العددين.

03:38.980 --> 03:41.690
قد يكون هذا خطأ في JavaScript ، وهو ليس

03:41.690 --> 03:43.530
خطأ تقنيًا ، وربما لن تحصل

03:43.530 --> 03:46.720
على خطأ في وقت التشغيل ، ولكن لديك خطأ منطقي

03:46.720 --> 03:49.832
في التعليمات البرمجية الخاصة بك.

03:49.832 --> 03:52.820
وهذا بالطبع يمكن أن يؤدي إلى مشاكل كبيرة في تطبيقات

03:52.820 --> 03:55.870
الويب التي تكتبها باستخدام JavaScript.

03:55.870 --> 03:59.360
الآن ، بالطبع ، في JavaScript لدينا استراتيجيات التخفيف

03:59.360 --> 04:02.541
، يمكننا إضافة تحقق في الوظيفة للتحقق من أنواع المدخلات

04:02.541 --> 04:05.440
في وقت التشغيل ، يمكننا أيضًا التحقق من صحة

04:05.440 --> 04:08.240
إدخال المستخدم وتعقيمه ، وبينما قد نرغب في

04:08.240 --> 04:10.670
القيام بكل ذلك سيكون من الجيد أيضًا أن

04:10.670 --> 04:15.840
نتمكن من اكتشاف مثل هذه الأخطاء أثناء التطوير بالفعل.

04:15.840 --> 04:19.220
ولحسن الحظ ، هذا ممكن مع TypeScript ، لأن المطورين يمكنهم

04:19.220 --> 04:21.810
كتابة تعليمات برمجية غير صالحة هنا وتقديم

04:21.810 --> 04:23.970
روبوتات مثل هذه في JavaScript ، وباستخدام

04:23.970 --> 04:26.160
TypeScript لدينا أداة تساعدنا في

04:26.160 --> 04:30.060
كتابة كود أفضل وتجنب مثل هذه المشاكل.

04:30.060 --> 04:31.910
لذا ، دعونا نلقي نظرة فاحصة على هذا.
