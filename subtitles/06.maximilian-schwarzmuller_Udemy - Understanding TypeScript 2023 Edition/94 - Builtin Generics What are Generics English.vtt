WEBVTT

1
00:00:02.130 --> 00:00:02.963
<v Narrator>For that again,</v>

2
00:00:02.963 --> 00:00:05.260
I'm back in our dummy Project Setup,

3
00:00:05.260 --> 00:00:06.690
which we used over and over again.

4
00:00:06.690 --> 00:00:08.260
In there, we can run NPM starts

5
00:00:08.260 --> 00:00:10.190
to bring up that development server.

6
00:00:10.190 --> 00:00:13.690
And then in a new terminal window with the server running

7
00:00:13.690 --> 00:00:15.260
in a different terminal window,

8
00:00:15.260 --> 00:00:17.419
I running TSC dash W to start my

9
00:00:17.419 --> 00:00:21.540
TypeScript compilation process and keep that up and running.

10
00:00:21.540 --> 00:00:23.470
With that of course, we got an empty page

11
00:00:23.470 --> 00:00:24.560
because there's nothing on it

12
00:00:24.560 --> 00:00:27.060
but now we can play around in the app TS file

13
00:00:27.060 --> 00:00:29.480
and get started with generics.

14
00:00:29.480 --> 00:00:32.940
And I think it's easiest to understand generics

15
00:00:32.940 --> 00:00:35.450
if we have a look at a default type,

16
00:00:35.450 --> 00:00:37.450
which is built into TypeScript

17
00:00:37.450 --> 00:00:39.610
with which we actually worked a lot

18
00:00:39.610 --> 00:00:41.890
which turns out to be a generic

19
00:00:41.890 --> 00:00:44.410
and that would be an array.

20
00:00:44.410 --> 00:00:46.900
Let's say we have an array of names.

21
00:00:46.900 --> 00:00:50.370
Max and Manual let's say.

22
00:00:50.370 --> 00:00:51.620
So we get two names in there

23
00:00:51.620 --> 00:00:54.610
then of course, the type of the name's constant

24
00:00:54.610 --> 00:00:57.210
is an array of strings.

25
00:00:57.210 --> 00:00:59.610
Now actually, we could think of this

26
00:00:59.610 --> 00:01:02.460
as two types being combined.

27
00:01:02.460 --> 00:01:05.760
Just as you can have an object with different properties

28
00:01:05.760 --> 00:01:07.700
where in every property you might be

29
00:01:07.700 --> 00:01:09.310
storing a different type.

30
00:01:09.310 --> 00:01:13.750
An array always just a thing with different data in it,

31
00:01:13.750 --> 00:01:16.440
in this case with strings in it.

32
00:01:16.440 --> 00:01:20.230
So we actually have the array type, just an array

33
00:01:20.230 --> 00:01:22.770
and if I would remove the names here and cut them,

34
00:01:22.770 --> 00:01:25.010
you would see that TypeScript would infer this

35
00:01:25.010 --> 00:01:29.140
to be an array of type anything with any data in there.

36
00:01:29.140 --> 00:01:32.690
Indeed TypeScript knows the array type.

37
00:01:32.690 --> 00:01:35.280
So we could say, this here should be an array

38
00:01:35.280 --> 00:01:37.600
but as you see if I specified like this,

39
00:01:37.600 --> 00:01:39.900
we get an error even though I can tell you that

40
00:01:39.900 --> 00:01:43.570
this array type, like this exists to TypeScript.

41
00:01:43.570 --> 00:01:45.870
But we see that it's a generic type

42
00:01:45.870 --> 00:01:48.710
and that it requires one type argument.

43
00:01:48.710 --> 00:01:50.950
And now, that's something we haven't seen before.

44
00:01:50.950 --> 00:01:53.870
We never heard about generic types before.

45
00:01:53.870 --> 00:01:55.750
Now, this strange notation here,

46
00:01:55.750 --> 00:01:58.120
whenever you see something like this in TypeScript,

47
00:01:58.120 --> 00:02:01.060
you're dealing with a generic type.

48
00:02:01.060 --> 00:02:05.610
A generic type is a type which is kind of connected

49
00:02:05.610 --> 00:02:08.890
with some other type and is really flexible regarding

50
00:02:08.890 --> 00:02:12.920
which exact type that other type is.

51
00:02:12.920 --> 00:02:14.130
Sounds difficult?

52
00:02:14.130 --> 00:02:16.820
Well, let's go back to that array example.

53
00:02:16.820 --> 00:02:19.380
We know that we want to store an array here.

54
00:02:19.380 --> 00:02:22.250
So an array itself could be a type,

55
00:02:22.250 --> 00:02:24.610
it's a list of data that on its own

56
00:02:24.610 --> 00:02:26.730
already makes up a type, you could say.

57
00:02:26.730 --> 00:02:29.770
Just like an object is a type on its own,

58
00:02:29.770 --> 00:02:32.200
even if we don't know yet which data will go in there.

59
00:02:32.200 --> 00:02:34.490
So an array is a type on its own.

60
00:02:34.490 --> 00:02:38.230
But an array of course stores data

61
00:02:38.230 --> 00:02:39.860
of a certain type in there.

62
00:02:39.860 --> 00:02:42.690
Now the array type itself does not care

63
00:02:42.690 --> 00:02:44.810
which type of data is stored in there.

64
00:02:44.810 --> 00:02:48.150
The array type does not care whether you're storing a list

65
00:02:48.150 --> 00:02:50.540
of strings, of numbers, of objects,

66
00:02:50.540 --> 00:02:52.430
or of mixed data.

67
00:02:52.430 --> 00:02:54.500
The array type really doesn't care

68
00:02:54.500 --> 00:02:58.640
but it does care about getting at least some information,

69
00:02:58.640 --> 00:03:01.200
Even if you're telling it I don't know,

70
00:03:01.200 --> 00:03:02.960
by setting this to type any array.

71
00:03:02.960 --> 00:03:05.870
It's better than not specifying anything.

72
00:03:05.870 --> 00:03:08.330
Now, this is one way of defining an array type,

73
00:03:08.330 --> 00:03:10.070
the type of data which is stored in there

74
00:03:10.070 --> 00:03:11.430
and then square brackets.

75
00:03:11.430 --> 00:03:14.620
The other way, which would create exactly the same type

76
00:03:14.620 --> 00:03:15.830
would be to use that Array thing

77
00:03:15.830 --> 00:03:17.630
and then these angle brackets.

78
00:03:17.630 --> 00:03:20.030
And now between these angle brackets,

79
00:03:20.030 --> 00:03:22.340
you specify the type of data,

80
00:03:22.340 --> 00:03:24.140
which should go into the array.

81
00:03:24.140 --> 00:03:26.330
For example a string,

82
00:03:26.330 --> 00:03:31.330
and this here is 100% the same as defining this type here.

83
00:03:32.030 --> 00:03:34.950
Of course, here you could also use a union type to say,

84
00:03:34.950 --> 00:03:37.730
this array stores strings or numbers

85
00:03:37.730 --> 00:03:40.850
or use any if you don't want to say anything about the type

86
00:03:40.850 --> 00:03:42.970
or as we just had it string.

87
00:03:42.970 --> 00:03:44.330
So this is a generic type,

88
00:03:44.330 --> 00:03:46.900
a generic type built into TypeScript.

89
00:03:46.900 --> 00:03:50.440
A type which is connected to a another type,

90
00:03:50.440 --> 00:03:53.980
where we want to know which our type that is

91
00:03:53.980 --> 00:03:56.810
so to TypeScript can give us better support.

92
00:03:56.810 --> 00:03:57.910
Because here for example,

93
00:03:57.910 --> 00:04:01.510
if we know that what we store in there will be a string,

94
00:04:01.510 --> 00:04:04.380
well, then we know whenever I access

95
00:04:04.380 --> 00:04:06.143
an element in that array,

96
00:04:07.100 --> 00:04:09.410
I can do string stuff with it.

97
00:04:09.410 --> 00:04:12.260
I can call all these string methods for example

98
00:04:12.260 --> 00:04:15.280
and TypeScript will not complain because it knows,

99
00:04:15.280 --> 00:04:18.220
well this array hold strings.

100
00:04:18.220 --> 00:04:20.410
That's the idea of generic types.

101
00:04:20.410 --> 00:04:23.230
A certain type in this case the array type

102
00:04:23.230 --> 00:04:26.780
might simply work better or work at all

103
00:04:26.780 --> 00:04:29.040
if you provide an additional information

104
00:04:29.040 --> 00:04:33.430
about a type of data that's provided in this array type

105
00:04:33.430 --> 00:04:36.590
and of course, the array type is just one example.

106
00:04:36.590 --> 00:04:39.840
Another generic type which is built into TypeScript

107
00:04:39.840 --> 00:04:42.130
is the promise type.

108
00:04:42.130 --> 00:04:45.470
Now promises are a JavaScript feature, right?

109
00:04:45.470 --> 00:04:46.970
It's not a TypeScript feature.

110
00:04:46.970 --> 00:04:49.437
You can create promises in JavaScript

111
00:04:49.437 --> 00:04:52.000
and in case you're not sure what promises are,

112
00:04:52.000 --> 00:04:53.870
attached you find the link.

113
00:04:53.870 --> 00:04:58.150
A promise can be created by using new promise.

114
00:04:58.150 --> 00:05:00.640
Again, this is a constructor function,

115
00:05:00.640 --> 00:05:03.270
a class built into JavaScript

116
00:05:03.270 --> 00:05:05.870
and the promise constructor function takes one argument

117
00:05:05.870 --> 00:05:07.640
which itself is a function

118
00:05:07.640 --> 00:05:10.650
which then in turn will get two arguments eventually

119
00:05:10.650 --> 00:05:12.580
a resolve and a reject function.

120
00:05:12.580 --> 00:05:15.180
Now these will be passed on automatically

121
00:05:15.180 --> 00:05:17.790
to us by JavaScript in the browser.

122
00:05:17.790 --> 00:05:22.400
And then in a promise we can for example set a timer

123
00:05:22.400 --> 00:05:25.640
and then in that callback function of that timer,

124
00:05:25.640 --> 00:05:28.140
we could resolve the outer promise.

125
00:05:28.140 --> 00:05:30.140
So in here in this callback function,

126
00:05:30.140 --> 00:05:34.823
we could call the resolve and say this is done.

127
00:05:36.500 --> 00:05:41.020
Now when we do so this promise here creates a new object,

128
00:05:41.020 --> 00:05:43.860
a promise object which is stored in the promise constant.

129
00:05:43.860 --> 00:05:47.700
Now, this promise constant actually has a specific type.

130
00:05:47.700 --> 00:05:49.470
It's of type promise and then again,

131
00:05:49.470 --> 00:05:51.130
you see these angle brackets

132
00:05:51.130 --> 00:05:56.130
because this promise eventually will resolve to something.

133
00:05:56.480 --> 00:05:58.930
Now here it says unknown

134
00:05:58.930 --> 00:06:01.470
because TypeScript is not fully able to understand

135
00:06:01.470 --> 00:06:03.880
that we actually will resolve to a string here.

136
00:06:03.880 --> 00:06:05.870
But therefore we could say this is a promise,

137
00:06:05.870 --> 00:06:08.120
which eventually will yield a string

138
00:06:08.120 --> 00:06:11.450
and we do so by again using our generic type.

139
00:06:11.450 --> 00:06:14.030
The main type is promise,

140
00:06:14.030 --> 00:06:16.120
but a promise just like an array,

141
00:06:16.120 --> 00:06:18.380
kind of works together with other types.

142
00:06:18.380 --> 00:06:22.000
An array used other types because its stored data in it,

143
00:06:22.000 --> 00:06:23.350
data of certain types,

144
00:06:23.350 --> 00:06:25.640
and the promise works together with other types

145
00:06:25.640 --> 00:06:29.750
because eventually it kind of returns some data of some type

146
00:06:29.750 --> 00:06:31.140
and in this case that's a promise

147
00:06:31.140 --> 00:06:32.940
which eventually returns a string.

148
00:06:32.940 --> 00:06:34.470
Now again, why is that useful?

149
00:06:34.470 --> 00:06:37.550
Why is this extra type information useful?

150
00:06:37.550 --> 00:06:40.350
Well, if we just had a promise type here

151
00:06:40.350 --> 00:06:41.430
and that would not be allowed

152
00:06:41.430 --> 00:06:44.770
but if we said promise of type anything,

153
00:06:44.770 --> 00:06:46.870
which would basically the same as of types

154
00:06:46.870 --> 00:06:48.390
wouldn't know generic types

155
00:06:48.390 --> 00:06:51.280
if it wouldn't have any information about what we get back.

156
00:06:51.280 --> 00:06:53.340
Well then on this promise of course,

157
00:06:53.340 --> 00:06:55.750
we can use them as we can do an all promises

158
00:06:55.750 --> 00:06:57.770
and eventually we'll get some data

159
00:06:57.770 --> 00:06:59.770
but we know nothing about that data.

160
00:06:59.770 --> 00:07:02.500
I can't call a string method on it, for example.

161
00:07:02.500 --> 00:07:04.850
Well I can because it's any in this case

162
00:07:04.850 --> 00:07:07.590
but I don't get any particular TypeScript support.

163
00:07:07.590 --> 00:07:11.313
I could also try stuff on it, which definitely won't work.

164
00:07:12.170 --> 00:07:13.800
For example, if we turn this around

165
00:07:13.800 --> 00:07:15.220
and we return a number here,

166
00:07:15.220 --> 00:07:17.320
I could still call a string method here

167
00:07:17.320 --> 00:07:19.390
because TypeScript has no information

168
00:07:19.390 --> 00:07:22.640
about the data this promise will eventually yield.

169
00:07:22.640 --> 00:07:24.070
Now with generic types,

170
00:07:24.070 --> 00:07:26.280
we give that information to TypeScript.

171
00:07:26.280 --> 00:07:28.160
We can tell TypeScript that this promise

172
00:07:28.160 --> 00:07:30.240
will eventually yield a string

173
00:07:30.240 --> 00:07:32.840
or in this case, a number

174
00:07:32.840 --> 00:07:34.940
and then TypeScript can warn us here.

175
00:07:34.940 --> 00:07:37.390
If I try to save this, it will give us an error

176
00:07:37.390 --> 00:07:40.870
because it knows hey this promise eventually

177
00:07:40.870 --> 00:07:44.092
will yield a number and you can call split on that.

178
00:07:44.092 --> 00:07:48.010
So we get better type safety with generic types.

179
00:07:48.010 --> 00:07:50.510
So you're really flexible regarding what you do

180
00:07:50.510 --> 00:07:52.720
with that generic type information.

181
00:07:52.720 --> 00:07:54.830
An array knows which data it stores,

182
00:07:54.830 --> 00:07:57.140
a promise knows which data it returns.

183
00:07:57.140 --> 00:07:59.840
If you build your own generic classes or functions,

184
00:07:59.840 --> 00:08:02.140
you might do something totally different than there.

185
00:08:02.140 --> 00:08:04.570
But in the end generic types help you

186
00:08:04.570 --> 00:08:06.970
to get additional type information if you've got

187
00:08:06.970 --> 00:08:10.640
a more complex class or more complex function

188
00:08:10.640 --> 00:08:14.240
that does something with the data that's coming in,

189
00:08:14.240 --> 00:08:16.020
in a way where it doesn't really care

190
00:08:16.020 --> 00:08:18.700
about the data being of one particular type,

191
00:08:18.700 --> 00:08:21.500
but where you want to store the type information

192
00:08:21.500 --> 00:08:24.850
off the incoming data to get better TypeScript support

193
00:08:24.850 --> 00:08:27.590
whenever you work with your generic type.

194
00:08:27.590 --> 00:08:30.450
So whenever you work with that promise, or data array,

195
00:08:30.450 --> 00:08:33.270
that's basically the idea of generics.

196
00:08:33.270 --> 00:08:36.300
So this here, all were built in generics.

197
00:08:36.300 --> 00:08:37.460
Let's comment that out.

198
00:08:37.460 --> 00:08:40.450
Let's now build our own generic type word.

199
00:08:40.450 --> 00:08:42.653
Let's use our own generic types.

