WEBVTT

1
00:00:02.130 --> 00:00:03.970
<v Instructor>First of all, we can start</v>

2
00:00:03.970 --> 00:00:06.480
our development server here with npm start,

3
00:00:06.480 --> 00:00:08.440
and this a process we should keep on running

4
00:00:08.440 --> 00:00:10.940
because this will watch our files for changes.

5
00:00:10.940 --> 00:00:13.270
And if something changes, so if you save

6
00:00:13.270 --> 00:00:15.620
a change specifically, it will recompile

7
00:00:15.620 --> 00:00:17.776
the types of codes to JavaScript,

8
00:00:17.776 --> 00:00:20.090
recompile JSX to JavaScript,

9
00:00:20.090 --> 00:00:22.500
and in the end, then build you your react application

10
00:00:22.500 --> 00:00:25.750
and serve it on local host 3000,

11
00:00:25.750 --> 00:00:27.630
where, at the moment, you don't see much.

12
00:00:27.630 --> 00:00:29.430
You just can see it here in the Dev console

13
00:00:29.430 --> 00:00:31.800
that it seems to work because of that output here.

14
00:00:31.800 --> 00:00:32.900
You don't see much of course

15
00:00:32.900 --> 00:00:34.340
because we're not rendering anything

16
00:00:34.340 --> 00:00:36.700
here in App.tsx at the moment.

17
00:00:36.700 --> 00:00:38.170
That of course will change.

18
00:00:38.170 --> 00:00:39.420
And with that up

19
00:00:39.420 --> 00:00:41.130
and running, let's now write some code

20
00:00:41.130 --> 00:00:43.580
or let's analyze what we got.

21
00:00:43.580 --> 00:00:46.750
In index.tsx we don't have anything special, right?

22
00:00:46.750 --> 00:00:49.060
This is regular JavaScript code.

23
00:00:49.060 --> 00:00:52.950
In App.tsx, we see this type assignment though

24
00:00:52.950 --> 00:00:55.250
and there, what we can see is that

25
00:00:55.250 --> 00:00:57.980
we assigned this strange type to App.

26
00:00:57.980 --> 00:01:00.270
Now, if we ignore that type for a second,

27
00:01:00.270 --> 00:01:02.480
what's actually stored in App?

28
00:01:02.480 --> 00:01:04.840
Well, a function, an arrow function,

29
00:01:04.840 --> 00:01:07.290
but that's still a regular function, therefore.

30
00:01:07.290 --> 00:01:09.960
Why does this type here not function or why is this not

31
00:01:09.960 --> 00:01:12.570
one of our function types we learned about?

32
00:01:12.570 --> 00:01:14.030
Well, it is under the hood,

33
00:01:14.030 --> 00:01:16.450
but this is a type provided by react,

34
00:01:16.450 --> 00:01:18.100
and now, important of course

35
00:01:18.100 --> 00:01:21.070
provided by the react types package.

36
00:01:21.070 --> 00:01:26.070
If you go into node modules we see the @types folder here

37
00:01:26.390 --> 00:01:28.470
and in there, we see a lot of types,

38
00:01:28.470 --> 00:01:30.670
and we also see the react types here,

39
00:01:30.670 --> 00:01:32.600
all the react-dom types.

40
00:01:32.600 --> 00:01:35.840
And in the end, this type is implicitly automatically

41
00:01:35.840 --> 00:01:39.340
imported from the react types folder, you could say.

42
00:01:39.340 --> 00:01:40.870
Now, what is this type?

43
00:01:40.870 --> 00:01:44.490
FC simply stands for function component.

44
00:01:44.490 --> 00:01:46.310
There also is a longer form of this,

45
00:01:46.310 --> 00:01:47.570
which you could use instead.

46
00:01:47.570 --> 00:01:49.240
That's exactly the same type.

47
00:01:49.240 --> 00:01:51.090
The other one is just a shortcut

48
00:01:51.090 --> 00:01:54.300
and this simply defines that what we store here in App

49
00:01:54.300 --> 00:01:57.750
has to be function, but a function that qualifies

50
00:01:57.750 --> 00:02:00.550
as function component in react.

51
00:02:00.550 --> 00:02:02.840
You also kinda of course write class-based components,

52
00:02:02.840 --> 00:02:05.760
and hence, you have a classic component here as well

53
00:02:05.760 --> 00:02:07.420
and then, you would have to store a class

54
00:02:07.420 --> 00:02:09.480
in there instead of a function,

55
00:02:09.480 --> 00:02:12.720
but we will go with function components here in this course.

56
00:02:12.720 --> 00:02:14.670
Now, this is a function component

57
00:02:14.670 --> 00:02:17.620
because it is a function that returns JSX

58
00:02:17.620 --> 00:02:20.850
and that is how a function component is created in react.

59
00:02:20.850 --> 00:02:24.180
If I were to remove this return statement temporarily,

60
00:02:24.180 --> 00:02:26.730
we hence could get an error here, all if I tried

61
00:02:26.730 --> 00:02:28.800
to save this and it wants to compile it.

62
00:02:28.800 --> 00:02:32.440
We would get an error because now, we tell TypeScript

63
00:02:32.440 --> 00:02:34.960
that here, we wanna store a function component,

64
00:02:34.960 --> 00:02:38.520
and all we store is a normal function, not a function

65
00:02:38.520 --> 00:02:40.770
that returns JSX or anything else

66
00:02:40.770 --> 00:02:42.800
that qualifies as a react element.

67
00:02:42.800 --> 00:02:44.440
And therefore, this would be invalid

68
00:02:44.440 --> 00:02:45.810
and we would have to fix it.

69
00:02:45.810 --> 00:02:48.530
So here, we can already see how TypeScript

70
00:02:48.530 --> 00:02:50.360
improves our project a little bit.

71
00:02:50.360 --> 00:02:52.500
It gives us extra type safety

72
00:02:52.500 --> 00:02:55.420
and makes sure we can't run in a situation

73
00:02:55.420 --> 00:02:58.353
where we, for example, we build a invalid component.

74
00:02:59.200 --> 00:03:03.230
Side note, if it might seem unrealistic that you would

75
00:03:03.230 --> 00:03:05.370
ever forget this return statement,

76
00:03:05.370 --> 00:03:07.970
consider that you're building a bigger component

77
00:03:07.970 --> 00:03:11.070
with multiple if statements and different return statements.

78
00:03:11.070 --> 00:03:14.370
You might forget one in one branch of your if statement

79
00:03:14.370 --> 00:03:17.010
and then TypeScript can definitely save your ass

80
00:03:17.010 --> 00:03:19.130
and give you that warning a little bit earlier,

81
00:03:19.130 --> 00:03:21.500
than during runtime, where it otherwise

82
00:03:21.500 --> 00:03:23.710
might crash in some situations.

83
00:03:23.710 --> 00:03:25.620
So this is TypeScript doing something,

84
00:03:25.620 --> 00:03:27.740
but with that, enough about the talking.

85
00:03:27.740 --> 00:03:28.690
Let's build something

86
00:03:28.690 --> 00:03:31.670
and I wanna build a relatively simple app here,

87
00:03:31.670 --> 00:03:34.590
a to-do app, pretty classic, but a to-do app

88
00:03:34.590 --> 00:03:36.370
which allows us to therefore practice

89
00:03:36.370 --> 00:03:39.480
some core concepts of react with TypeScript.

90
00:03:39.480 --> 00:03:41.270
And therefore, in the next lectures,

91
00:03:41.270 --> 00:03:44.363
let's actually start our first custom components.

