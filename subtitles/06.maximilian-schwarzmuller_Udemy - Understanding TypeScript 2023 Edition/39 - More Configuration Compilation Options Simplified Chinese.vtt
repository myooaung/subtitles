WEBVTT

00:01.639 --> 00:05.320
教师：现在, 所有有趣的是allowJ｡

00:05.320 --> 00:07.590
使用allowJs和checkJs,

00:07.590 --> 00:11.620
您可以在编译中包含JavaScript文件｡

00:11.620 --> 00:13.747
现在使用allowJs, JavaScript文件将按类型脚本编译,

00:13.747 --> 00:19.813
因此即使不以结尾｡

00:19.813 --> 00:19.813
ts,

00:19.813 --> 00:22.266
type脚本将使用checkJs编译它,

00:22.266 --> 00:26.079
它不会编译它, 但仍将检查其中的语法并报告潜在的错误｡

00:26.079 --> 00:28.212
如果你不想使用类型脚本,

00:28.212 --> 00:29.934
但想利用它的一些特性,

00:29.934 --> 00:33.095
这可能是很好的, 只要类型脚本可以帮助你使用任何类型,

00:33.095 --> 00:38.487
这是你在JavaScript中有效的, 如果你启用这些选项,

00:38.487 --> 00:42.540
它会这样做｡

00:42.540 --> 00:44.170
现在, 我们不需要它在这个项目,

00:44.170 --> 00:48.745
对于这个项目, 我们希望确保我们没有双重编译这些JavaScript文件,

00:48.745 --> 00:50.833
这些文件确实来自类型脚本文件,

00:50.833 --> 00:54.782
所以我们将不得不调整包含和排除设置一点, 但你可以在项目中使用它,

00:54.782 --> 00:57.218
你不'我根本不想使用类型脚本, 或者出于某种原因,

00:57.218 --> 01:09.393
在类型脚本文件旁边有一些vanilla JavaScript文件, 而您想检查vanilla JavaScript文件也是如此｡

01:10.530 --> 01:12.923
现在让我们快进一点, jsx是一个选项,

01:12.923 --> 01:21.550
可以帮助您使用react js, 这对我们来说并不重要, 声明和declarationMap在这里也不重要｡

01:21.550 --> 01:27.022
Dts文件是一个先进的概念, 如果你把你的项目作为一个库发送给其他人,

01:27.022 --> 01:30.044
你需要一个描述你项目中所有类型的清单文件,

01:30.044 --> 01:36.022
这对你很重要｡

01:36.022 --> 01:36.022
d.其他 ts文件中｡ 

01:36.022 --> 01:39.403
源地图是一个有趣的虽然｡ 
