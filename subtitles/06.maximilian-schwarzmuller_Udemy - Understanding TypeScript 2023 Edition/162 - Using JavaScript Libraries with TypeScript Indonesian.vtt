WEBVTT

00:02.120 --> 00:05.910
-: Sekarang kita akan mulai dengan pustaka utilitas yang sangat populer,

00:05.910 --> 00:06.770
Lodash.

00:06.770 --> 00:09.840
Sekarang apa yang akan Anda pelajari di sini pada dasarnya bertindak

00:09.840 --> 00:13.250
sebagai contoh pustaka JavaScript apa pun yang ingin Anda gunakan.

00:13.250 --> 00:17.430
Tidak peduli apakah itu Lodash, jQuery, atau apa pun.

00:17.430 --> 00:19.510
Sekarang sedikit catatan tambahan pada

00:19.510 --> 00:21.640
titik ini, jika Anda tertarik dengan cara

00:21.640 --> 00:24.150
bekerja dengan React dan TypeScript atau katakanlah

00:24.150 --> 00:26.718
Node. js. dan Express dan TypeScript,

00:26.718 --> 00:31.350
saya telah mendedikasikan modul tentang hal itu nanti dalam kursus ini, karena di sana Anda akan belajar

00:31.350 --> 00:33.760
sedikit lebih banyak daripada hanya menambahkannya

00:33.760 --> 00:35.730
dengan TypeScript.

00:35.730 --> 00:40.470
Tetapi untuk pustaka yang lebih sederhana, seperti Lodash, seperti jQuery dan di sini

00:40.470 --> 00:43.010
adalah pendekatan yang akan berhasil.

00:43.010 --> 00:45.340
Jadi kita ingin menggunakan Lodash dalam proyek kita.

00:45.340 --> 00:48.460
Lodash tentu saja adalah perpustakaan JavaScript.

00:48.460 --> 00:50.800
Kita tidak memerlukan TypeScript untuk menggunakannya,

00:50.800 --> 00:53.480
kita dapat menggunakannya dalam proyek JavaScript apa

00:53.480 --> 00:56.770
pun dan kita dapat menginstalnya seperti yang pada dasarnya Anda pelajari

00:56.770 --> 00:59.200
di sini pada dokumen resmi Lodash.

00:59.200 --> 01:01.400
Jika Anda menggunakan npm, yang mana kita menggunakan

01:01.400 --> 01:06.477
npm, Anda dapat menjalankan npm i atau npm install, itu hanya bentuk singkatnya, "--save/lodash".

01:07.750 --> 01:10.820
Jadi di sini dalam contoh proyek ini yang menggunakan webpack tanpa

01:10.820 --> 01:12.640
alur kerja produksi meskipun hanya alur

01:12.640 --> 01:14.180
kerja pengembangan.

01:14.180 --> 01:16.570
Disana kita bisa menambahkan library ini dengan hanya menjalankan

01:16.570 --> 01:18.607
nmp install dash dash save Lodash.

01:18.607 --> 01:21.700
Dan ini sekarang akan menginstalnya ke dalam proyek ini dan berkat

01:21.700 --> 01:23.500
pengaturan webpack kami, kami hanya

01:23.500 --> 01:26.250
dapat mengimpornya ke dalam file kode kami dan memanfaatkannya

01:26.250 --> 01:27.517
di sana.

01:27.517 --> 01:30.670
Dan itu akan sama di setiap Proyek JavaScript yang

01:30.670 --> 01:32.250
didukung webpack.

01:32.250 --> 01:34.990
Jika Anda tidak menggunakan webpack, maka tentu saja

01:34.990 --> 01:37.720
Anda juga bisa menggunakan CDN dan sebagainya.

01:37.720 --> 01:40.630
Namun, apa yang akan saya tunjukkan pada Anda dalam langkah-langkah

01:40.630 --> 01:42.390
selanjutnya sedikit kemudian dalam modul

01:42.390 --> 01:45.130
ini, hanya akan bekerja dalam pengaturan webpack.

01:45.130 --> 01:47.730
Jadi di sini kita punya setup webpack, kita sekarang sudah menginstall

01:47.730 --> 01:49.320
Lodash, dan sekarang jika kita ingin menggunakannya,

01:49.320 --> 01:51.510
kita cukup mengimpornya di sini.

01:51.510 --> 01:55.600
Kita bisa mengimpor, katakanlah underscore dari 'Lodash'.

01:55.600 --> 01:57.960
Itu adalah sintaks yang seharusnya tersedia

01:57.960 --> 01:59.960
dengan Lodash yang terinstal.

01:59.960 --> 02:03.057
Namun demikian, ini sekarang sudah memberi kita kesalahan.

02:03.057 --> 02:06.850
"Tidak dapat menemukan file deklarasi untuk modul Lodash".

02:06.850 --> 02:09.890
Dan kita akan memiliki masalah lain, jika Anda ingin menggunakan

02:09.890 --> 02:12.230
Lodash misalnya untuk mengacak sebuah array,

02:12.230 --> 02:16.810
nah kita bisa mengkonsol log underscore shuffle dan kemudian mengoper katakanlah

02:16.810 --> 02:20.430
array sederhana ke metode shuffle ini.

02:20.430 --> 02:23.110
Metode shuffle adalah metode yang didukung Lodash.

02:23.110 --> 02:25.790
Kita bisa mempelajari hal ini dalam dokumentasi

02:25.790 --> 02:26.820
resmi Lodash.

02:26.820 --> 02:29.056
Di sana, jika anda mencari "shuffle", anda akan

02:29.056 --> 02:32.370
mengetahui bahwa anda bisa mengacak sebuah array dengan metode ini.

02:32.370 --> 02:37.010
Jadi, ini seharusnya berfungsi, tetapi sebenarnya tidak berfungsi dengan

02:37.010 --> 02:39.480
cara ini, seperti yang Anda ketahui.

02:39.480 --> 02:43.058
Jika sekarang saya memulai server webpack saya di sini, kita

02:43.058 --> 02:45.890
akan melihat bahwa CDN memberi kita kesalahan.

02:45.890 --> 02:47.077
Dan lagi-lagi ia memberitahu

02:47.077 --> 02:50.940
kita bahwa ia "tidak dapat menemukan file deklarasi untuk modul Lodash".

02:50.940 --> 02:54.720
Jadi, ini tidak benar-benar berfungsi sebagaimana mestinya.

02:54.720 --> 02:57.610
Sekarang masalahnya adalah, bahwa Lodash adalah

02:57.610 --> 02:59.930
pustaka JavaScript sederhana.

02:59.930 --> 03:02.250
Ini dibangun dengan JavaScript vanila,

03:02.250 --> 03:05.150
dan dibangun untuk JavaScript vanila.

03:05.150 --> 03:08.530
Kita dapat memverifikasi ini jika kita pergi ke modul node, di mana

03:08.530 --> 03:10.280
kita memiliki banyak dependensi,

03:10.280 --> 03:12.450
karena kita memiliki banyak dependensi webpack

03:12.450 --> 03:14.220
dan dependensi di sana.

03:14.220 --> 03:17.010
Tapi di sini, jika kita mencari Lodash,

03:17.010 --> 03:17.930
ini dia.

03:17.930 --> 03:21.330
Dan kita perluas seperti yang kita lihat ada banyak file JavaScript

03:21.330 --> 03:22.750
di sana, bukan?

03:22.750 --> 03:26.380
Dan itu ada di semua kode sumber Lodash.

03:26.380 --> 03:30.010
Sekelompok kode JavaScript tetapi tentu saja tidak ada kode TypeScript.

03:30.010 --> 03:31.750
Sekarang apa masalahnya dengan itu?

03:31.750 --> 03:35.550
Masalahnya adalah TypeScript tidak mengerti apa yang ada

03:35.550 --> 03:37.070
di dalam paket ini.

03:37.070 --> 03:41.020
Ia tidak mengerti metode mana yang diekspor Lodash.

03:41.020 --> 03:43.480
Sekarang Anda akan melihat bahwa itu benar-benar berfungsi jika

03:43.480 --> 03:45.500
kita pergi ke tsconfig. file json.

03:45.500 --> 03:48.740
Dan kita pastikan bahwa kita memancarkan output pada saat terjadi kesalahan.

03:48.740 --> 03:52.650
Jadi, jika kita mengganti "noEmitOnError" menjadi "false" sehingga kita

03:52.650 --> 03:55.770
memancarkan output baru jika ada sesuatu yang error.

03:55.770 --> 03:57.600
Untuk saat ini, mulai ini lagi, pada

03:57.600 --> 04:00.230
akhirnya akan memberi kita kesalahan yang sama,

04:00.230 --> 04:02.160
jadi kita masih akan melihatnya.

04:02.160 --> 04:05.090
Tetapi jika saya memuat ulang halaman ini di sini, Anda sebenarnya

04:05.090 --> 04:07.120
akan mendapatkan output di sini.

04:07.120 --> 04:08.922
Anda dapat mengabaikan error di bagian bawah

04:08.922 --> 04:12.580
di sini, Anda akan melihat output yang merupakan array yang telah diacak.

04:12.580 --> 04:14.920
Anda lihat, tampilannya berbeda setiap kali saya memuat ulang.

04:14.920 --> 04:16.530
Dan itu sangat menarik.

04:16.530 --> 04:19.770
Ini membuktikan bahwa Lodash berfungsi, ini membuktikan

04:19.770 --> 04:21.280
bahwa kode ini benar.

04:21.280 --> 04:24.170
Namun sayangnya, TypeScript tidak memahaminya, dan

04:24.170 --> 04:28.400
tidak bisa karena Lodash menggunakan JavaScript, bukan TypeScript.

04:28.400 --> 04:31.220
Sekarang masalahnya adalah tidak ada TypeScript

04:31.220 --> 04:34.080
versi Lodash, jadi kita harus hidup dengan itu.

04:34.080 --> 04:37.220
Dan itu adalah skenario yang akan sering Anda temui.

04:37.220 --> 04:39.365
Anda ingin menggunakan pustaka pihak ketiga tertentu,

04:39.365 --> 04:42.270
dan itu hanya dibuat untuk JavaScript, dan karenanya Anda mendapatkan

04:42.270 --> 04:44.210
kesalahan seperti itu.

04:44.210 --> 04:46.060
Hal ini menjengkelkan karena secara teori, kita

04:46.060 --> 04:47.430
tentu saja bisa menggunakannya.

04:47.430 --> 04:49.630
TypeScript dibangun di atas JavaScript.

04:49.630 --> 04:53.160
Kita dapat menggunakan Library JavaScript apapun dalam proyek TypeScript,

04:53.160 --> 04:56.150
kita hanya perlu menerjemahkannya ke TypeScript.

04:56.150 --> 04:58.890
Dan untungnya, hal itu mungkin saja terjadi.

04:58.890 --> 05:02.564
Jadi, izinkan saya mengaktifkan pengaturan ini di sini,

05:02.564 --> 05:04.220
"noEmitOnError true".

05:04.220 --> 05:07.200
Izinkan saya menunjukkan kepada Anda bagaimana kita dapat memberi tahu

05:07.200 --> 05:10.053
TypeScript tentang Lodash dan tentang apa yang ditawarkannya.

05:11.140 --> 05:13.662
Anda dapat menginstal apa yang disebut

05:13.662 --> 05:16.250
jenis perpustakaan pihak ketiga.

05:16.250 --> 05:20.050
Jika Anda mencari Lodash types, Anda akan menemukan

05:20.050 --> 05:24.140
paket npm yang di sini disebut "@types/lodash".

05:24.140 --> 05:26.440
Di sana Anda juga melihat perintah install, yang

05:26.440 --> 05:28.120
akan berjalan sebentar lagi.

05:28.120 --> 05:30.580
Tetapi jika Anda turun ke detail, Anda juga menemukan

05:30.580 --> 05:32.220
tautan ke repositori github.

05:32.220 --> 05:36.320
Ini terhubung ke DefinitelyTyped, yang merupakan repositori besar

05:36.320 --> 05:39.260
dengan banyak sekali terjemahan untuk semua jenis

05:39.260 --> 05:40.820
pustaka pihak ketiga.

05:40.820 --> 05:43.120
Di sini kita berada di folder Lodash.

05:43.120 --> 05:46.590
Dan di sana Anda menemukan apa yang disebut . file dts.

05:46.590 --> 05:50.180
Jadi bukan hanya . tetapi . dts.

05:50.180 --> 05:53.460
Ini adalah apa yang disebut file deklarasi yang berarti file-file ini tidak

05:53.460 --> 05:55.760
mengandung logika aktual apa pun, tetapi jika kita

05:55.760 --> 05:58.750
melihat pada file shuffle . dts, mereka berisi

05:58.750 --> 06:01.848
instruksi untuk TypeScript.

06:01.848 --> 06:05.200
Mereka pada dasarnya memberi tahu TypeScript bagaimana

06:05.200 --> 06:08.720
sesuatu bekerja dan apa yang termasuk dalam paket ini.

06:08.720 --> 06:10.700
Dan Anda bisa menjelajahi berbagai file di sini,

06:10.700 --> 06:14.280
semuanya dalam sub-folder yang berbeda, untuk mempelajari lebih lanjut tentang itu.

06:14.280 --> 06:17.717
Jadi pada akhirnya file-file ini hanya menyediakan

06:17.717 --> 06:21.750
terjemahan dari JavaScript biasa ke TypeScript.

06:21.750 --> 06:23.860
Mereka tidak mengandung logika apa pun yang berjalan,

06:23.860 --> 06:26.950
tetapi mereka mendefinisikan tipe-tipe yang bekerja dengan pustaka ini.

06:26.950 --> 06:30.010
Mereka mendefinisikan tipe-tipe yang Anda gunakan, tipe-tipe yang Anda dapatkan

06:30.010 --> 06:32.490
kembali ketika Anda memanggil sebuah metode, dan seterusnya.

06:32.490 --> 06:35.410
Anda juga bisa menulis seperti . dts sendiri, dan jenis

06:35.410 --> 06:38.510
dokumen resmi menyediakan panduan tentang itu

06:38.510 --> 06:40.470
jika itu yang Anda minati.

06:40.470 --> 06:42.110
Tetapi untuk jenis proyek Anda sendiri,

06:42.110 --> 06:43.160
Anda tidak perlu melakukan

06:43.160 --> 06:45.820
itu, karena jika Anda menulis kode TypeScript hanya TypeScript

06:45.820 --> 06:48.110
yang tentu saja memahami itu.

06:48.110 --> 06:50.310
Tetapi jika Anda bekerja dengan pustaka

06:50.310 --> 06:53.840
pihak ketiga yang ditulis dalam JavaScript tanpa kode TypeScript,

06:53.840 --> 06:56.860
atau tanpa kode . dts, yang dikirimkan oleh

06:56.860 --> 06:59.950
beberapa perpustakaan pihak ketiga, bahkan jika

06:59.950 --> 07:02.240
mereka ditulis dalam JavaScript, Lodash

07:02.240 --> 07:03.960
tidak melakukannya.

07:03.960 --> 07:06.890
Jadi, jika Anda bekerja dengan pustaka yang tidak

07:06.890 --> 07:08.330
mengandung file terjemahan

07:08.330 --> 07:11.180
bawaan, dan yang tidak ditulis secara asli dalam

07:11.180 --> 07:15.760
TypeScript, maka, menggunakan paket tipe seperti itu adalah solusinya.

07:15.760 --> 07:20.760
Jadi di sini kita kemudian menjalankan "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
Anda sebenarnya juga dapat menjalankan "save-dev",

07:24.600 --> 07:27.920
karena dev adalah dependensi yang benar-benar hanya diperlukan

07:27.920 --> 07:29.230
selama pengembangan, karena

07:29.230 --> 07:30.980
kode tersebut akan di-complied melalui

07:30.980 --> 07:32.360
JavaScript.

07:32.360 --> 07:36.130
Dan ini sekarang menginstal terjemahan ini dari TypeScript

07:36.130 --> 07:38.060
untuk memahaminya.

07:38.060 --> 07:40.630
Dan Anda lihat, segera setelah ini diinstal,

07:40.630 --> 07:42.510
kesalahan ini hilang.

07:42.510 --> 07:46.220
Dan jika sekarang saya memulai ulang npm start, Anda akan melihat kesalahan

07:46.220 --> 07:48.270
tidak akan kembali ke sini juga.

07:48.270 --> 07:51.640
Jadi Anda lihat sekarang ini berfungsi tanpa kesalahan

07:51.640 --> 07:55.190
apa pun, baik dalam kompilasi maupun di browser.

07:55.190 --> 07:57.270
Secara teknis ini juga berfungsi sebelumnya,

07:57.270 --> 07:59.160
tetapi sekarang dengan terjemahan, kita

07:59.160 --> 08:01.580
juga dapat memanfaatkan TypeScript.

08:01.580 --> 08:04.660
Dan misalnya sekarang kita juga mendapatkan semua penyelesaian

08:04.660 --> 08:05.493
di sini, di IDE.

08:05.493 --> 08:10.070
Jika saya mengetik titik di sini, saya melihat metode Lodash yang bisa saya gunakan.

08:10.070 --> 08:13.930
Oleh karena itu, ini adalah bagian yang sangat penting dari pengetahuan,

08:13.930 --> 08:16.400
sesuatu yang pasti harus Anda sadari, yang memungkinkan

08:16.400 --> 08:19.370
Anda untuk menggunakan pustaka JavaScript biasa, normal,

08:19.370 --> 08:21.177
vanilla, dalam proyek TypeScript,

08:21.177 --> 08:24.220
dan masih mendapatkan dukungan yang hebat, pelengkapan

08:24.220 --> 08:28.490
otomatis yang hebat, dan menghindari kesalahan.

08:28.490 --> 08:33.030
Dengan bantuan paket-paket jenis tranlastion ini, bisa

08:33.030 --> 08:33.990
dibilang.

08:33.990 --> 08:38.990
Dan paket-paket ini, yang selalu dinamai "@types", dan kemudian nama paketnya,

08:39.290 --> 08:40.860
pada dasarnya ada untuk

08:40.860 --> 08:45.270
semua pustaka pihak ketiga populer yang dapat Anda temukan di luar

08:45.270 --> 08:46.730
sana.

08:46.730 --> 08:49.960
Anda selalu dapat mencari nama pustaka, dan kemudian mengetik

08:49.960 --> 08:51.690
misalnya jenis jQuery, dan Anda

08:51.690 --> 08:54.400
akan menemukan entri seperti itu.

08:54.400 --> 08:57.350
Jadi begitulah cara Anda dapat bekerja dengan tipe

08:57.350 --> 08:59.373
di pustaka JavaScript vanilla.
