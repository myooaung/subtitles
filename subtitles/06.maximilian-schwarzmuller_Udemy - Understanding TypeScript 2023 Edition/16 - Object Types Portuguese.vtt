WEBVTT

00:02.280 --> 00:03.780
Instrutor: Vamos aprofundar

00:03.780 --> 00:06.450
os tipos principais de suporte TypeScript.

00:06.450 --> 00:09.800
O próximo tipo que é interessante é o tipo de objeto.

00:09.800 --> 00:13.100
Agora, você conhece os objetos em JavaScript, eles são parecidos com isto.

00:13.100 --> 00:14.690
Você tem um par de valores chave e,

00:14.690 --> 00:16.350
em seguida, você tem pares de valores

00:16.350 --> 00:20.460
chave e tais valores também seriam tratados como tipos de objetos em TypeScript,

00:20.460 --> 00:22.250
portanto, qualquer objeto JavaScript

00:22.250 --> 00:23.620
é do tipo objeto.

00:23.620 --> 00:28.410
Embora eu já diga que existem versões mais específicas de objetos em TypeScript

00:28.410 --> 00:30.030
para que você possa dizer que

00:30.030 --> 00:32.514
este não é um objeto qualquer, este é um objeto

00:32.514 --> 00:35.108
que tem que ter estas propriedades ou que tem

00:35.108 --> 00:37.260
que se basear nesta ou naquela função

00:37.260 --> 00:39.490
construtora.

00:39.490 --> 00:41.322
Mas vamos chegar lá passo a passo.

00:41.322 --> 00:45.110
Para mergulhar em objetos, vou antes de tudo renomear app. ts aqui e vou renomear

00:45.110 --> 00:49.770
isto para o básico. ts aqui.

00:49.770 --> 00:52.058
E acrescente um novo aplicativo. ts, que então anulará

00:52.058 --> 00:55.400
o antigo aplicativo. js uma vez que o compilamos,

00:55.400 --> 00:58.600
onde agora podemos mergulhar em objetos.

00:58.600 --> 01:01.110
E comecemos criando aqui um objeto básico, digamos,

01:01.110 --> 01:03.902
uma pessoa com aparelho encaracolado aqui.

01:03.902 --> 01:05.870
E nós damos um nome a isto.

01:05.870 --> 01:08.230
Aqui eu vou com Maximilian porque esse

01:08.230 --> 01:10.700
é meu nome e uma idade de 30 anos.

01:10.700 --> 01:14.930
Agora, é claro, podemos consolar. pessoa de registro aqui

01:14.930 --> 01:18.375
e se o fizermos, e compilarmos isso sem surpresas,

01:18.375 --> 01:24.536
devemos ver esse objeto sendo impresso aqui no console.

01:24.536 --> 01:27.284
Agora, o que também podemos fazer em JavaScript

01:27.284 --> 01:31.690
é tentar acessar, digamos, um nickname, uma propriedade que

01:31.690 --> 01:33.970
não existe aqui.

01:33.970 --> 01:37.320
Agora você vê imediatamente que o TypeScript não está muito

01:37.320 --> 01:39.820
feliz com isso, e por isso minha IDE me diz.

01:39.820 --> 01:42.302
Ele me diz que o apelido de propriedade

01:42.302 --> 01:44.050
não existe nesse tipo.

01:44.050 --> 01:47.642
Portanto, se salvarmos isso e eu tentar compilar isso, de fato

01:47.642 --> 01:49.907
obtemos esse mesmo erro lá embaixo.

01:49.907 --> 01:52.210
O compilador TypeScript não gosta disso

01:52.210 --> 01:54.401
e me diz que não temos nenhuma propriedade

01:54.401 --> 01:56.430
de apelido neste objeto.

01:56.430 --> 01:59.813
Ele descobre que não temos esta propriedade de apelido porque

01:59.813 --> 02:02.936
se pairarmos sobre a pessoa que ela inferiu, podemos

02:02.936 --> 02:05.710
ver que há um cólon após pessoa, portanto, após

02:05.710 --> 02:07.970
a variável ou nome constante.

02:07.970 --> 02:11.030
Deduziu que este é o tipo de dados que são armazenados

02:11.030 --> 02:12.110
ali.

02:12.110 --> 02:14.181
Isso não é apenas um objeto, como você pode dizer.

02:14.181 --> 02:16.349
Esse é um objeto concreto.

02:16.349 --> 02:18.920
É um objeto com uma chave de nome, onde então

02:18.920 --> 02:21.430
o tipo, por sua vez, tem que ser um fio.

02:21.430 --> 02:24.700
E a chave de idade, onde o tipo tem que ser o número.

02:24.700 --> 02:27.116
E, na verdade, isto pode ser confuso aqui.

02:27.116 --> 02:31.100
Isto, aqui, obviamente se parece com um objeto JavaScript.

02:31.100 --> 02:33.980
Aparelhos de alongamento, pares de valores chave.

02:33.980 --> 02:36.020
Bem, a primeira coisa importante a ver aqui é que

02:36.020 --> 02:38.520
temos aqui um ponto-e-vírgula depois de cada linha.

02:38.520 --> 02:40.580
Nós não temos isso em um objeto JavaScript.

02:40.580 --> 02:41.750
Temos aqui uma vírgula.

02:41.750 --> 02:44.160
E de fato, este não é um objeto JavaScript aqui

02:44.160 --> 02:45.940
que é criado em algum lugar.

02:45.940 --> 02:50.600
Este é o tipo de objeto inferido pelo TypeScript e os tipos de objetos

02:50.600 --> 02:53.914
são escritos quase como objetos, mas é claro

02:53.914 --> 02:57.106
que não temos pares de valores chave lá, mas

02:57.106 --> 02:59.239
pares de tipos chave.

02:59.239 --> 03:02.840
Os tipos de objetos estão lá para descrever, bem, o tipo

03:02.840 --> 03:06.064
de objeto que está sendo usado em algum lugar.

03:06.064 --> 03:07.653
Poderíamos ser mais genéricos.

03:07.653 --> 03:10.420
Eu poderia designar explicitamente

03:10.420 --> 03:13.640
um tipo aqui para a constante de objeto.

03:13.640 --> 03:16.100
Objeto é um dos tipos incorporados, assim

03:16.100 --> 03:17.460
como número e string, e

03:17.460 --> 03:21.030
agora se eu pairar sobre isso, vemos pessoas do tipo objeto

03:21.030 --> 03:24.000
e agora o TypeScript realmente só se importa com o

03:24.000 --> 03:26.430
fato de que este é um tipo de objeto.

03:26.430 --> 03:28.423
Agora, ainda assim, é compilando

03:28.423 --> 03:32.808
isto que obtemos esse erro, porque o TypeScript ainda analisa nosso

03:32.808 --> 03:35.490
código e vê que tentamos acessar algo que

03:35.490 --> 03:36.666
não existe lá, mas

03:36.666 --> 03:39.770
é importante entender que tudo começa com este tipo

03:39.770 --> 03:42.140
de objeto mais genérico.

03:42.140 --> 03:44.660
Mas muitas vezes você quer ser mais específico do que isso.

03:44.660 --> 03:47.623
Você não quer apenas trabalhar com esse tipo de objeto genérico.

03:47.623 --> 03:50.284
Você realmente quer ter o apoio total.

03:50.284 --> 03:53.550
Por exemplo, neste momento, se eu acrescentar um ponto aqui e der

03:53.550 --> 03:55.570
uma olhada no meu auto-completamento,

03:55.570 --> 03:58.080
não recebo nenhuma ajuda lá por minha IDE.

03:58.080 --> 04:00.303
A razão disso é que tudo o que dizemos

04:00.303 --> 04:04.230
à IDE é que temos um valor aqui, em pessoa, que é do tipo

04:04.230 --> 04:05.860
objeto.

04:05.860 --> 04:08.300
Na verdade, agora também recebemos um erro

04:08.300 --> 04:10.210
se eu tentar acessar o nome.

04:10.210 --> 04:12.270
O nome existe aqui, certo?

04:12.270 --> 04:14.120
Mas o que dizemos aqui ao TypeScript

04:14.120 --> 04:16.601
é que temos apenas um objeto onde não damos nenhuma

04:16.601 --> 04:18.889
de nossas informações ao TypeScript.

04:18.889 --> 04:21.739
Portanto, na verdade, o TypeScript não suporta

04:21.739 --> 04:24.750
nenhum tipo de propriedade porque não lhe dizemos

04:24.750 --> 04:26.210
nada sobre o objeto.

04:26.210 --> 04:28.050
Portanto, devemos ser mais específicos.

04:28.050 --> 04:32.000
E somos mais específicos ao definirmos um tipo de objeto específico.

04:32.000 --> 04:34.795
A coisa que o TypeScript também inferiu automaticamente.

04:34.795 --> 04:38.548
Fazemos isto acrescentando aqui o aparelho de atadura

04:38.548 --> 04:43.370
de cólon, depois de nosso nome constante ou variável.

04:43.370 --> 04:46.213
Portanto, isto aqui não cria um novo objeto JavaScript.

04:46.213 --> 04:48.460
Na verdade, isto será removido do código

04:48.460 --> 04:50.310
JavaScript compilado.

04:50.310 --> 04:52.643
Em vez disso, esta é apenas a notação TypeScript

04:52.643 --> 04:55.855
de um tipo de objeto especializado, por assim dizer.

04:55.855 --> 04:59.422
Portanto, de um tipo de objeto onde fornecemos algumas informações

04:59.422 --> 05:01.434
sobre a estrutura do objeto.

05:01.434 --> 05:04.520
Agora, atribuindo apenas um par vazio de suportes encaracolados como

05:04.520 --> 05:07.440
um tipo, nós fazemos essencialmente o mesmo que com objeto.

05:07.440 --> 05:09.765
Dizemos ao TypeScript que este é algum objeto.

05:09.765 --> 05:12.740
Agora, porém, podemos ser mais específicos.

05:12.740 --> 05:16.550
Podemos acrescentar aqui entradas de valor chave,

05:16.550 --> 05:19.694
porém não valor chave, mas tipo de chave.

05:19.694 --> 05:22.800
Portanto, aqui poderíamos dizer que o objeto que

05:22.800 --> 05:25.091
deve ser armazenado pessoalmente deve

05:25.091 --> 05:28.197
ter um nome de propriedade e o valor desse nome de

05:28.197 --> 05:31.140
propriedade deve ser do tipo string.

05:31.140 --> 05:33.795
Portanto, aqui descrevemos o tipo de valor que

05:33.795 --> 05:36.440
eventualmente será armazenado no nome.

05:36.440 --> 05:39.320
Agora, a propósito, você vê que estou recebendo um erro aqui.

05:39.320 --> 05:41.090
Porque o que estou dizendo agora

05:41.090 --> 05:43.489
ao TypeScript é que minha pessoa deve ter um

05:43.489 --> 05:45.900
objeto com exatamente um par de valores chave,

05:45.900 --> 05:48.626
onde a chave é nome e o valor dessa chave é string,

05:48.626 --> 05:52.730
mas não atribuímos um objeto com dois pares de valores chave.

05:52.730 --> 05:55.020
Nome, que contém um fio, isso é bom,

05:55.020 --> 05:58.500
mas idade, que contém um número, e isso não seria bom.

05:58.500 --> 06:01.140
Portanto, aqui temos que ajustar isto adicionando um ponto-e-vírgula

06:01.140 --> 06:03.520
e depois adicionar outro par de valores chave aqui onde

06:03.520 --> 06:06.300
dizemos que a idade deve ser do tipo número.

06:06.300 --> 06:09.670
Portanto, não 30 aqui, que na verdade seria suportado em TypeScript,

06:09.670 --> 06:12.673
que nós restringimos a um número específico, mas então nos

06:12.673 --> 06:15.600
depararemos com problemas assim que mudarmos isso.

06:15.600 --> 06:19.060
Em vez disso, aqui eu só quero dizer que a idade deve ser um número qualquer.

06:19.060 --> 06:22.360
E agora estamos basicamente atribuindo explicitamente o

06:22.360 --> 06:24.870
mesmo TypeScript inferido anteriormente.

06:24.870 --> 06:26.900
Como você aprendeu, isso não é uma boa prática,

06:26.900 --> 06:28.570
mas para entender os tipos de objetos

06:28.570 --> 06:29.940
eu queria fazer isso aqui.

06:29.940 --> 06:32.315
Ainda assim, isto é algo que você pode fazer.

06:32.315 --> 06:37.010
É melhor deixar o TypeScript inferir isto

06:37.010 --> 06:40.440
como fizemos antes, assim.

06:40.440 --> 06:42.351
Agora, só para mostrar algo interessante,

06:42.351 --> 06:45.450
se eu mudar de volta para este código sub-ótimo, onde

06:45.450 --> 06:47.970
nós explicitamente atribuímos um tipo

06:47.970 --> 06:49.920
TypeScript seria capaz de inferir,

06:49.920 --> 06:54.920
se compilamos este código, é claro que ele funciona.

06:55.180 --> 06:56.900
Podemos ter acesso ao nome da propriedade, mas se depois

06:56.900 --> 06:59.077
tivermos uma olhada no app. js vemos que este tipo

06:59.077 --> 07:01.220
de atribuição é removido aqui.

07:01.220 --> 07:03.417
E isso, é claro, deveria ser algo esperado.

07:03.417 --> 07:06.290
Como mencionei, os tipos e atribuições de tipos não

07:06.290 --> 07:08.120
fazem parte do JavaScript.

07:08.120 --> 07:09.460
Eles são apenas TypeScript.

07:09.460 --> 07:10.800
Só queria mostrar isto novamente

07:10.800 --> 07:12.840
para deixar realmente claro que esta sintaxe aqui

07:12.840 --> 07:15.080
não está criando algum objeto JavaScript, que está em

07:15.080 --> 07:16.485
algum lugar em nosso código.

07:16.485 --> 07:21.263
Esta é apenas a representação do TypeScript de um tipo de objeto que ajuda

07:21.263 --> 07:24.570
a TypeScript a entender os objetos com os quais você

07:24.570 --> 07:25.900
está trabalhando.

07:25.900 --> 07:29.950
Melhor sintaxe, é claro, é esta sintaxe, como você aprendeu.
