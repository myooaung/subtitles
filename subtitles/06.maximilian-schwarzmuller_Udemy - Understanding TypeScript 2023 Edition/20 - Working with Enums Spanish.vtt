WEBVTT

00:02.230 --> 00:04.860
Instructor: Relacionada con la idea de una tupla

00:04.860 --> 00:09.760
está la idea de tener un par de identificadores específicos, constantes globales con las

00:09.760 --> 00:12.710
que podrías estar trabajando en tu aplicación, que quieres

00:12.710 --> 00:15.020
representar como números, pero a los que quieres

00:15.020 --> 00:18.530
asignar una etiqueta legible para los humanos.

00:18.530 --> 00:20.500
Y para ello, tienes el tipo Enum.

00:20.500 --> 00:23.800
De nuevo, esto existe en algunos lenguajes de programación superiores.

00:23.800 --> 00:25.780
Sin embargo, JavaScript no lo sabe.

00:25.780 --> 00:26.613
Se ve así.

00:26.613 --> 00:28.110
Así se crea un enum.

00:28.110 --> 00:30.540
Usas la palabra clave enum, que sólo existe

00:30.540 --> 00:33.060
en el mundo de TypeScript, no en JavaScript,

00:33.060 --> 00:34.840
allí después tienes llaves y luego

00:34.840 --> 00:36.810
tus identificadores.

00:36.810 --> 00:39.141
Y este tipo, que es añadido por TypeScript

00:39.141 --> 00:42.030
le da una lista enumerada.

00:42.030 --> 00:45.070
Así que estas etiquetas son al final, sólo traducido a los números

00:45.070 --> 00:48.580
a partir de cero, donde usted tiene etiquetas legibles por los humanos que

00:48.580 --> 00:50.133
puede trabajar en su código.

00:51.310 --> 00:53.500
Para mostrarte un ejemplo, volvamos

00:53.500 --> 00:55.620
aquí a nuestra persona con su rol.

00:55.620 --> 00:58.010
Voy a copiar ese código y luego lo voy a comentar

00:58.010 --> 00:59.710
porque lo voy a cambiar un poco.

00:59.710 --> 01:01.600
Y entonces aquí, me desharé de esa

01:01.600 --> 01:05.380
asignación de tipo explícita y en su lugar volveré a la inferencia,

01:05.380 --> 01:07.150
porque ahora cambiaré de rol.

01:07.150 --> 01:10.330
Y ahora digamos que queremos tener un administrador, un autor

01:10.330 --> 01:12.350
y quizás un usuario de sólo lectura.

01:12.350 --> 01:14.750
El administrador debe tener un ID de cero,

01:14.750 --> 01:18.660
el usuario de sólo lectura tiene uno, el autor tiene dos.

01:18.660 --> 01:21.160
Ahora, por supuesto, podemos almacenar eso exactamente

01:21.160 --> 01:22.550
así con estos números.

01:22.550 --> 01:24.830
Una de las desventajas es que siempre podemos

01:24.830 --> 01:26.670
añadir un número para el que puede que

01:26.670 --> 01:30.320
no tengamos un rol y si luego, en nuestro código, intentamos extraer el rol

01:30.320 --> 01:33.392
y usar la comprobación if hace podría dar lugar a errores.

01:33.392 --> 01:37.160
Y además, a nosotros, como desarrolladores, nos cuesta entender

01:37.160 --> 01:39.690
qué papel tiene este usuario.

01:39.690 --> 01:41.310
¿Fue al autor?

01:41.310 --> 01:43.020
¿O fue la lectura del usuario?

01:43.020 --> 01:46.140
Es posible que lo olvide al hacer pausas más largas,

01:46.140 --> 01:48.810
al trabajar en equipos más grandes, etc.

01:48.810 --> 01:50.540
Así que, como desarrollador,

01:50.540 --> 01:54.310
podrías querer identificadores legibles por humanos,

01:54.310 --> 01:58.630
algo así como ADMIN, y READ ONLY USER, algo así.

01:58.630 --> 02:00.240
Ahora, por supuesto, podríamos usar

02:00.240 --> 02:02.880
eso, podríamos trabajar con tales valores de cadena.

02:02.880 --> 02:06.100
El problema es que si luego necesitamos una comprobación

02:06.100 --> 02:11.100
if, comprobamos si el rol de la persona es igual a, ¿era READ_ONLY_USER?

02:12.260 --> 02:13.500
¿O era una sola palabra?

02:13.500 --> 02:15.380
¿Fue con guiones bajos?

02:15.380 --> 02:17.440
Verás, entonces tenemos que recordar

02:17.440 --> 02:19.020
cómo escribimos estas cadenas,

02:19.020 --> 02:20.970
qué texto exacto tenemos ahí.

02:20.970 --> 02:24.330
Porque esta cadena con los guiones entre las palabras

02:24.330 --> 02:27.430
no es, por supuesto, la misma que esta cadena.

02:27.430 --> 02:29.973
Así que aquí, nunca lo haríamos en allí,

02:31.150 --> 02:36.120
es leer sólo si se trata de compilar e imprimir que, porque, bueno, la comprobación

02:36.120 --> 02:39.170
simplemente no produce verdadera.

02:39.170 --> 02:42.150
No tenemos eso como un rol en la persona, por lo tanto, no obtenemos

02:42.150 --> 02:43.930
la salida aquí en la consola.

02:43.930 --> 02:47.290
Así que los identificadores de cadena, también tienen inconvenientes.

02:47.290 --> 02:50.340
Ahora, para estos escenarios, es bastante común en JavaScript

02:50.340 --> 02:52.340
definir constantes globales.

02:52.340 --> 02:55.580
Por ejemplo, admin, que a su vez mantiene ciertos

02:55.580 --> 03:00.060
valores como números o cadenas, tanto como sea posible.

03:00.060 --> 03:01.700
Los números, por supuesto pueden

03:01.700 --> 03:04.370
ahorrarnos algo de código y bits extra en la memoria.

03:04.370 --> 03:09.370
Y allí podríamos tener ADMIN, READ_ONLY y AUTHOR así y

03:09.390 --> 03:10.870
abajo, entonces

03:10.870 --> 03:13.750
sólo tenemos que usar ese rol.

03:13.750 --> 03:16.460
La ventaja de esto es que podemos utilizarlo en cualquier parte

03:16.460 --> 03:17.343
de nuestro código.

03:18.230 --> 03:22.600
Y por lo tanto aquí por ejemplo, si ejecuto este código, si lo compilo y luego

03:22.600 --> 03:23.680
dejamos que esto se

03:25.260 --> 03:28.570
recargue, vemos como admin aquí, por lo que esto funciona

03:28.570 --> 03:31.520
y esto es un patrón común en JavaScript.

03:31.520 --> 03:34.190
La desventaja es que ahora, de nuevo, se infiere que el papel

03:34.190 --> 03:37.290
es sólo un número, por lo que podríamos almacenar cualquier número

03:37.290 --> 03:39.630
allí, incluso un número que no apoyamos.

03:39.630 --> 03:42.450
Y además, tenemos que definir todas estas constantes,

03:42.450 --> 03:44.060
tenemos que gestionarlas.

03:44.060 --> 03:45.920
Aquí es donde un enum puede ahorrarnos trabajo.

03:45.920 --> 03:48.730
Esto está totalmente bien, pero un enum lo hace más fácil.

03:48.730 --> 03:50.970
Creamos un enum con la palabra clave enum,

03:50.970 --> 03:54.250
podemos nombrarlo Rol, la convención es empezar con el carácter

03:54.250 --> 03:55.550
en mayúscula porque el

03:55.550 --> 03:58.620
enum también es un tipo personalizado.

03:58.620 --> 04:01.760
Es tu primer tipo personalizado, vamos a escribir muchos

04:01.760 --> 04:03.860
más en este curso, este es el primero.

04:03.860 --> 04:06.560
Y luego después del nombre del tipo que quieres

04:06.560 --> 04:09.520
asignar a este enum, añades llaves, así, sin dos

04:09.520 --> 04:14.040
puntos, sin signo de igualdad, sólo llaves después del nombre.

04:14.040 --> 04:15.800
Luego un punto y coma.

04:15.800 --> 04:19.433
Y ahora aquí, puedes asignar tus valores como

04:20.650 --> 04:21.973
admin, solo lectura

04:22.950 --> 04:24.300
y autor.

04:24.300 --> 04:28.180
Y entre bambalinas esto recibe el número cero,

04:28.180 --> 04:31.780
esto el número uno, esto el número dos.

04:31.780 --> 04:34.650
Y luego aquí, puedes acceder a Role. ADMIN, como en un objeto,

04:34.650 --> 04:37.840
se accede a su identificador.

04:37.840 --> 04:40.380
Y puedes usar eso en cualquier otra parte de tu

04:40.380 --> 04:43.890
código también, aquí podemos comprobar si el rol es AUTOR, y luego

04:43.890 --> 04:46.710
imprimir autor y por supuesto, no deberíamos ver eso

04:46.710 --> 04:50.630
si ejecuto eso ahora porque asignamos un rol de ADMIN aquí.

04:50.630 --> 04:53.333
Pero lo más importante es que hemos hecho todo

04:53.333 --> 04:57.490
eso con la ayuda del enum, que asigna etiquetas a los números.

04:57.490 --> 04:59.210
Si echamos un vistazo a eso en JavaScript.

04:59.210 --> 05:02.830
Así que en el código compilado, vemos que se reconstruye así.

05:02.830 --> 05:05.080
Al final, se reconstruye con un si aquí.

05:05.080 --> 05:07.940
Así que la función que se ejecuta a sí misma.

05:07.940 --> 05:11.770
Y Role aquí simplemente se maneja como un objeto al final, que tiene la

05:11.770 --> 05:14.550
propiedad admin una propiedad de sólo lectura y la

05:14.550 --> 05:17.330
propiedad AUTHOR, donde luego almacenamos nuestros

05:17.330 --> 05:19.970
valores numéricos aquí, se podría decir.

05:19.970 --> 05:21.960
Así que es un poco más complejo que eso, pero

05:21.960 --> 05:24.210
eso es lo que TypeScript al final hace aquí para

05:24.210 --> 05:26.700
replicar esta construcción enum en el código JavaScript,

05:26.700 --> 05:28.560
cuando compila el código.

05:28.560 --> 05:30.700
Aquí, como desarrollador, simplemente tenemos

05:30.700 --> 05:32.680
estos números convenientemente creados.

05:32.680 --> 05:34.290
Si pasas por encima de ellos, verás

05:34.290 --> 05:36.520
el número que almacenaremos ahí y podrás usar

05:36.520 --> 05:39.883
estos números aquí de forma legible para el ser humano.

05:40.750 --> 05:42.840
Ahora, en el caso de los enums, tampoco estás restringido

05:42.840 --> 05:44.790
al comportamiento por defecto.

05:44.790 --> 05:47.470
Digamos que por alguna razón, no quieres empezar con

05:47.470 --> 05:50.533
cero como número inicial, entonces puedes añadir un signo

05:50.533 --> 05:54.080
igual aquí después de tu identificador e introducir cualquier otro

05:54.080 --> 05:56.610
número y ahora admin se asigna al número cinco y

05:56.610 --> 05:59.610
los otros identificadores después del identificador donde

05:59.610 --> 06:02.150
asignas el valor, lo recogen y simplemente incrementan

06:02.150 --> 06:04.580
este valor inicial.

06:04.580 --> 06:08.140
Así que ahora tenemos fino, seis, siete, en lugar de cero, uno, dos.

06:08.140 --> 06:10.642
Por supuesto, también puede asignar sus propios

06:10.642 --> 06:14.820
valores a todos estos identificadores, si necesita sus propios números.

06:14.820 --> 06:17.070
Usted también no está restringido a los números,

06:17.070 --> 06:19.390
también puede ir con el texto aquí, o incluso mezclar

06:19.390 --> 06:21.950
como lo estoy haciendo aquí, cualquier cosa va allí,

06:21.950 --> 06:24.900
pero a menudo el valor por defecto de los números de incremento

06:24.900 --> 06:28.530
que comienzan en cero es lo que quieres, pero si usted necesita un comportamiento

06:28.530 --> 06:31.530
diferente, si desea utilizar una cadena de aquí, y luego un número

06:31.530 --> 06:34.850
aquí, y aquí un número, así o tal vez una cadena de números, entonces

06:34.850 --> 06:37.890
usted puede absolutamente hacer eso, la ventaja es, que se definen

06:37.890 --> 06:40.880
hasta allí, y luego a partir de entonces, siempre se refieren

06:40.880 --> 06:48.270
a su tipo de rol a este tipo personalizado que ha creado, a este enum personalizado que ha creado.

06:48.270 --> 06:50.320
Y lo utilizas en tus comprobaciones de

06:50.320 --> 06:52.970
tipo y en tus asignaciones de tipo, y ya está.

06:52.970 --> 06:56.090
Ese es el poder del enum y es una gran construcción siempre

06:56.090 --> 06:59.420
que necesites identificadores que sean legibles por los humanos

06:59.420 --> 07:03.173
y que tengan algún valor mapeado detrás de las escenas.
