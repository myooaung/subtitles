WEBVTT

00:02.320 --> 00:04.290
อาจารย์: สำหรับโมดูลนี้

00:04.290 --> 00:05.660
คุณได้เรียนรู้วิธีการใช้

00:05.660 --> 00:08.480
typescript ในแอปพลิเคชัน node express ซึ่งคุณสามารถติดตั้งชนิดพิเศษสำหรับ

00:08.480 --> 00:16.320
express และสำหรับโหนดได้ เช่น เพื่อรับการสนับสนุน typescript ที่ยอดเยี่ยมในไฟล์ของคุณ

00:16.320 --> 00:19.990
ที่คุณเขียนใบสมัครเหมือนที่คุณเขียนอยู่เสมอ

00:19.990 --> 00:23.720
แต่นั่น ตัวอย่างเช่น ไวยากรณ์การนำเข้าและส่งออกของคุณแตกต่างกัน

00:23.720 --> 00:26.120
และแน่นอนว่าคุณสามารถใช้ Types และคุณสมบัติ

00:26.120 --> 00:29.300
Typescript อื่นๆ ที่คุณเรียนรู้ได้

00:29.300 --> 00:31.080
คุณสามารถใช้อินเทอร์เฟซ

00:31.080 --> 00:33.080
คุณสามารถใช้ตัวตกแต่ง คุณสามารถใช้

00:33.080 --> 00:35.480
eNoms และ QPUlls และทุกอย่างที่เป็นเอกสิทธิ์ของ

00:35.480 --> 00:37.840
typescript

00:37.840 --> 00:39.310
ทั้งหมดนี้ใช้ได้ผลที่นี่

00:39.310 --> 00:42.650
เพราะเรากำลังเขียนแอปพลิเคชัน typescript ปกติที่นี่

00:42.650 --> 00:46.070
และมันถูกคอมไพล์ด้วยคอมไพเลอร์ typescript ปกติเป็นโค้ด

00:46.070 --> 00:48.050
Javascript ปกติ

00:48.050 --> 00:52.750
รหัส Javascript ซึ่งดำเนินการกับโหนด JS

00:52.750 --> 00:54.450
ตอนนี้ ถ้าคุณต้องการมีตัวอย่างเพิ่มเติมเกี่ยวกับวิธีทำงานกับ

00:54.450 --> 00:58.910
typescript และ node express คุณสามารถทำได้ เพียง google สำหรับ node express typescript

00:58.910 --> 01:02.840
เพื่อค้นหาตัวอย่างเพิ่มเติม

01:02.840 --> 01:04.600
แต่ฉันขอแนะนำอย่างยิ่งให้คุณตรวจสอบ

01:04.600 --> 01:06.980
NestJS

01:06.980 --> 01:10.390
มันเป็นโหนด js framework ที่รวบรวม typescript

01:10.390 --> 01:13.270
ในขณะที่คุณสามารถทำให้ node express ทำงานกับ

01:13.270 --> 01:15.310
typescript ได้ อย่างที่คุณเห็นในโมดูลนี้

01:15.310 --> 01:18.010
นี่คือเฟรมเวิร์กที่ให้โปรเจ็กต์ node โปรเจ็กต์

01:18.010 --> 01:21.740
พร้อมการรองรับ typescript นอกกรอบ

01:21.740 --> 01:24.490
และรวมเอาคุณสมบัติตัวพิมพ์ทั้งหมดเหล่านี้ไว้

01:24.490 --> 01:26.960
เช่น มัณฑนากร และอื่นๆ

01:26.960 --> 01:30.910
ด้วย NestJS คุณสามารถสร้างโหนดเว็บแอปพลิเคชัน พัก

01:30.910 --> 01:34.390
API แต่ยังรวมถึงแอปพลิเคชันที่คุณแสดงมุมมองหรือ

01:34.390 --> 01:36.440
API ของ GraphQL

01:36.440 --> 01:38.930
คุณสามารถสร้างได้ทั้งหมดด้วยโหนด js แต่ยังรวมถึง

01:38.930 --> 01:43.380
typescript และโปรเจกต์นี้ใช้คุณสมบัติอย่างมาก

01:43.380 --> 01:46.950
เช่น ตัวตกแต่ง อินเทอร์เฟซ และอื่นๆ

01:46.950 --> 01:50.200
ดังนั้นลองดู NestJS ถ้าคุณต้องการสร้างเว็บแอปพลิเคชันด้านบริการด้วยโหนดและ

01:50.200 --> 01:53.580
typescript

01:53.580 --> 01:56.660
เป็นเฟรมเวิร์กที่ยอดเยี่ยม ใช้งานได้สนุกจริงๆ

01:56.660 --> 02:00.350
และใช้คุณสมบัติเจ๋งๆ ทั้งหมดที่ typescript มีให้

02:00.350 --> 02:03.630
ดังนั้นจึงไม่จำเป็นต้องติดตั้งประเภทแบบกำหนดเอง

02:03.630 --> 02:05.310
แก้ไขหรืออะไรทำนองนั้น

02:05.310 --> 02:08.913
ที่นี่คุณจะได้รับการสนับสนุน typescript ที่ยอดเยี่ยมทันที
