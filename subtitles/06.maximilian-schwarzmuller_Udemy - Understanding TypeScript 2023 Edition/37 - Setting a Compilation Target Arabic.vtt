WEBVTT

00:02.450 --> 00:04.810
المعلم: الآن بعد أن أصبح لدينا فهم لكيفية

00:04.810 --> 00:07.850
إدارة ملفاتنا باستخدام المترجم ، دعنا نتعمق في

00:07.850 --> 00:09.870
خيارات المترجم ، لأن هذا مثير للاهتمام

00:09.870 --> 00:11.300
حقًا.

00:11.300 --> 00:13.860
هذا يسمح لنا بالتحكم في كيفية تجميع شفرة

00:13.860 --> 00:16.620
TypeScript الخاصة بنا ، لذلك ليس فقط الملفات

00:16.620 --> 00:18.360
التي يتم تجميعها ، ولكن أيضًا

00:18.360 --> 00:20.920
كيفية معالجة الملفات التي يتم تجميعها

00:20.920 --> 00:23.230
بواسطة TypeScript.

00:23.230 --> 00:26.760
وهناك ترى أن لدينا مجموعة من الخيارات.

00:26.760 --> 00:29.560
لديك تفسيرات موجزة بجانب هذه الخيارات.

00:29.560 --> 00:32.450
يمكن القول إن بعض التفسيرات غامضة بشكل كبير.

00:32.450 --> 00:34.210
البعض الآخر واضح تمامًا.

00:34.210 --> 00:36.450
وسأقول أن الكثير من هذه الخيارات

00:36.450 --> 00:39.950
، معظم هذه الخيارات لن تكون مهمة في معظم المشاريع.

00:39.950 --> 00:43.900
لذلك ، لن تقوم بتعيين كل هذه الخيارات ، ولا حتى إغلاقها.

00:43.900 --> 00:46.070
يمكنك عادةً تجاهل الكثير من هذه الخيارات.

00:46.070 --> 00:48.765
الآن سألتقط الخيارات المهمة هنا طوال هذه

00:48.765 --> 00:50.230
الدورة ، لأن بعض الخيارات

00:50.230 --> 00:52.140
تكون منطقية فقط عندما نتعرف

00:52.140 --> 00:53.911
على ميزة معينة.

00:53.911 --> 00:55.940
وأريد الغوص في بعض الخيارات

00:55.940 --> 00:57.250
الآن بالفعل.

00:57.250 --> 01:00.840
ومن أجل ذلك ، دعنا ننتقل إلى الملف من أعلى إلى أسفل ونرى

01:00.840 --> 01:02.340
ما وصلنا إليه هناك.

01:02.340 --> 01:04.410
لنبدأ بالخيار الهدف.

01:04.410 --> 01:07.230
كما ترى ، يتم تعيين هذا في الواقع افتراضيًا.

01:07.230 --> 01:08.750
لم يتم التعليق عليها.

01:08.750 --> 01:10.780
وما تفعله بهذا الخيار هو

01:10.780 --> 01:15.530
إخبار TypeScript لإصدار JavaScript المستهدف الذي تريد

01:15.530 --> 01:16.970
تجميع الكود.

01:16.970 --> 01:18.850
لأن ما يفعله TypeScript هو أنه

01:18.850 --> 01:21.600
لا يقوم فقط بتجميع ميزات جديدة مثل التعليقات

01:21.600 --> 01:23.500
التوضيحية للنوع غير الموجودة

01:23.500 --> 01:26.960
في JavaScript إلى تعليمات JavaScript البرمجية.

01:26.960 --> 01:29.667
لذلك لا يجب الحرص فقط

01:29.667 --> 01:33.270
على أن هذا يعمل هنا.

01:33.270 --> 01:37.530
يقوم أيضًا بترجمة التعليمات البرمجية إلى JavaScript

01:37.530 --> 01:41.370
التي يتم تشغيلها في مجموعة معينة من المتصفحات.

01:41.370 --> 01:43.798
وأنت تحدد بشكل أساسي المتصفحات التي

01:43.798 --> 01:46.980
تدعم كود الترجمة عن طريق تحديد الهدف.

01:46.980 --> 01:49.520
الهدف الافتراضي هنا في هذا المشروع كما

01:49.520 --> 01:52.430
ترى ، الهدف الأولي الذي يتم إعداده هو es5 ،

01:52.430 --> 01:55.517
مما يعني أنه يتم تجميع جميع أنواع الكود.

01:55.517 --> 01:57.550
يمكننا بالفعل رؤية ذلك.

01:57.550 --> 02:00.770
إذا قمت بتشغيل TSC هنا لتجميع جميع ملفاتي ، فسنرى

02:00.770 --> 02:03.260
في التطبيق. أنا أستخدم let and const

02:03.260 --> 02:05.732
، ولكن في التطبيق. js ، نحن حد ذاته var.

02:05.732 --> 02:09.890
وهذا يحدث لأننا حصلنا على هدف es5

02:09.890 --> 02:13.816
وفي عالم es5 ، لم نتركه ونثبت.

02:13.816 --> 02:16.810
لذا فإن الشيء الجيد هنا هو أنه يمكننا استخدام

02:16.810 --> 02:20.650
TypeScript لإنشاء رمز يعمل في المتصفحات القديمة أيضًا.

02:20.650 --> 02:22.930
لكن الأمر متروك تمامًا للاستخدام إذا أردنا القيام بذلك.

02:22.930 --> 02:25.550
ربما لا نرغب في القيام بذلك باستخدام TypeScript

02:25.550 --> 02:27.670
، لأننا ربما حصلنا على بعض أدوات البناء

02:27.670 --> 02:30.560
الأخرى التي ستهتم بعد ذلك بترجمة JavaScript

02:30.560 --> 02:33.290
، وبالتالي لا نريد أن يقوم TypeScript بذلك

02:33.290 --> 02:35.340
، أو ربما نريد شحن رمز ذلك فقط يعمل

02:35.340 --> 02:37.030
في المتصفحات الحديثة لأننا

02:37.030 --> 02:41.170
نعلم أن تطبيقنا يعمل فقط في المتصفحات الحديثة.

02:41.170 --> 02:44.160
وبالتالي ، يمكن رؤية الخيارات البديلة هنا

02:44.160 --> 02:46.070
إذا قمت بحذف القيمة ثم هنا في

02:46.070 --> 02:48.080
vscode على الأقل ، إذا قمت بالضغط

02:48.080 --> 02:51.300
على Control + Space للحصول على الإكمال التلقائي

02:51.300 --> 02:54.180
، فسترى مجموعة من الاقتراحات وسترى جميع

02:54.180 --> 02:56.450
القيم المتاحة هنا.

02:56.450 --> 02:58.700
الآن بمرور الوقت ، سيتغير هذا بالطبع

02:58.700 --> 03:01.900
لأننا أطلقنا إصدارات JavaScript جديدة.

03:01.900 --> 03:03.785
رأيت أننا قمنا بتعيين هذا على es5 من قبل.

03:03.785 --> 03:06.150
إذا لم تحدد الهدف على الإطلاق ، ففي

03:06.150 --> 03:09.520
الوقت الحالي ، يقوم TypeScript بالتجميع إلى es3

03:09.520 --> 03:12.200
حتى ، لذا فهو يدعم إصدارًا أقدم.

03:12.200 --> 03:15.130
ولكن يمكنك أيضًا استخدام es6 ، وهو أكثر

03:15.130 --> 03:17.510
حداثة ، والذي ، على سبيل المثال

03:17.510 --> 03:19.310
، يدعم const ويسمح أو يأخذ

03:19.310 --> 03:24.310
إصدارًا أكثر حداثة ، es6 يعادل es2015 ، فقط للتسجيل.

03:24.870 --> 03:27.480
لذلك إذا قمنا بتعيين هذا على es6 ، على سبيل المثال

03:27.480 --> 03:29.580
، وقمت بإعادة تشغيل الأمر tsc بعد تغيير

03:29.580 --> 03:32.460
tsconfig. json ، فسترى ذلك الآن

03:32.460 --> 03:35.440
في التطبيق. js ، حصلنا على السماح

03:35.440 --> 03:38.130
والتثبيت ، لأنه الآن مدعوم هناك.

03:38.130 --> 03:39.340
لذلك هذا عائد لك.

03:39.340 --> 03:41.720
بالطبع ، كلما زادت حداثة إصدار JavaScript

03:41.720 --> 03:43.641
الذي تختاره هنا ، كلما كانت الشفرة

03:43.641 --> 03:47.450
التي تم إنشاؤها أكثر إيجازًا لأن TypeScript يجب أن تقوم بتجميع

03:47.450 --> 03:50.440
أقل وأقل من التعليمات البرمجية ، أو يجب أن تعمل

03:50.440 --> 03:54.010
حول الميزات غير الموجودة في مواقف أقل ، وبالتالي ، عادةً

03:54.010 --> 03:59.560
ما يتم إجراء التعليمات البرمجية بشكل أكثر إيجازًا وأقصر.

03:59.560 --> 04:01.150
إذن هذا هو الهدف.

04:01.150 --> 04:02.623
ماذا عن الخيارات الأخرى؟
