WEBVTT

00:02.130 --> 00:03.630
Narrateur : Nous avons donc jeté un

00:03.630 --> 00:06.210
coup d'oeil à Lodash, qui est un paquet JavaScript vanille où

00:06.210 --> 00:08.360
nous avons dû installer quelques traductions.

00:08.360 --> 00:10.310
Et nous avons jeté un coup d'œil à class-transformer,

00:10.310 --> 00:13.530
qui fonctionne également dans vanilla JavaScript, mais qui fonctionne

00:13.530 --> 00:17.328
aussi particulièrement bien dans TypeScript.

00:17.328 --> 00:20.330
Voyons maintenant le class-validator.

00:20.330 --> 00:24.540
Voici maintenant un paquet qui utilise vraiment TypeScript.

00:24.540 --> 00:28.300
Il s'appuie sur le concept des décorateurs TypeScript

00:28.300 --> 00:32.340
et nous offre une toute nouvelle façon de travailler avec

00:32.340 --> 00:34.330
eux, ou du moins presque.

00:34.330 --> 00:38.230
Si vous avez suivi mon module sur les décorateurs dans ce cours, vous verrez

00:38.230 --> 00:41.200
quelque chose ici dans cette conférence, que nous avons

00:41.200 --> 00:44.150
en quelque sorte construit nous-mêmes.

00:44.150 --> 00:47.100
Toutefois, grâce à cette bibliothèque tierce, nous ne devons pas

00:47.100 --> 00:49.330
réinventer la roue en partant de zéro, nous ne devons

00:49.330 --> 00:51.193
pas la construire nous-mêmes.

00:51.193 --> 00:53.320
Et cette bibliothèque est sans doute

00:53.320 --> 00:55.710
un peu plus élaborée que notre solution

00:55.710 --> 00:57.830
dans le module du décorateur.

00:57.830 --> 01:00.026
Je parle de la validation.

01:00.026 --> 01:02.870
Il s'agit d'un paquet qui nous permet d'ajouter des règles

01:02.870 --> 01:06.390
de validation à l'aide de certains décorateurs, à l'intérieur d'une

01:06.390 --> 01:08.590
classe, et ensuite, chaque fois que nous instancions

01:08.590 --> 01:09.920
une telle classe, nous pouvons

01:09.920 --> 01:12.610
effectivement la valider pour les règles que nous y avons

01:12.610 --> 01:15.610
établies à l'aide des décorateurs.

01:15.610 --> 01:18.960
Maintenant, pour commencer, nous devons juste importer ce paquet ici.

01:18.960 --> 01:23.130
Donc npm install class-validator --save, et ensuite

01:23.130 --> 01:26.130
nous pouvons commencer tout de suite.

01:26.130 --> 01:29.220
Donc, laissez-moi redémarrer le serveur webpack-dev, et

01:29.220 --> 01:30.600
pour utiliser ce paquet, nous

01:30.600 --> 01:33.580
devons ajouter un couple de décorateurs aux modèles, donc

01:33.580 --> 01:35.740
aux classes où nous voulons valider certaines

01:35.740 --> 01:37.490
propriétés.

01:37.490 --> 01:39.730
Donc dans mon cas, ici dans le modèle de produit,

01:39.730 --> 01:43.240
je vais importer quelque chose de class-validator.

01:43.240 --> 01:45.110
Et encore une fois, si vous avez

01:45.110 --> 01:47.360
suivi le module décorateur dans ce cours,

01:47.360 --> 01:49.640
il s'agit d'un concept que j'ai déjà construit

01:49.640 --> 01:52.870
à partir de rien, sans ce paquet.

01:52.870 --> 01:56.270
Mais bien sûr, nous avons construit une version très naïve et basique,

01:56.270 --> 01:57.840
avec ce paquet nous n'avons pas

01:57.840 --> 02:01.200
à le construire nous-mêmes et il est aussi plus élaboré.

02:01.200 --> 02:02.770
Maintenant, à partir de class-validator,

02:02.770 --> 02:04.820
nous pouvons importer certains décorateurs.

02:04.820 --> 02:05.893
Par exemple,

02:07.139 --> 02:08.630
IsNotEmpty,

02:08.630 --> 02:11.410
ou encore IsNumber.

02:11.410 --> 02:13.500
Nous pouvons également importer IsPositive.

02:15.940 --> 02:18.940
Maintenant nous pouvons les ajouter aux propriétés que nous voulons valider.

02:18.940 --> 02:20.900
Ainsi, ici par exemple, sur le titre,

02:20.900 --> 02:24.220
nous pouvons ajouter IsNotEmpty comme décorateur comme

02:24.220 --> 02:26.390
ceci, et ce sont toutes des usines de décorateurs,

02:26.390 --> 02:29.610
donc vous devez toujours les exécuter.

02:29.610 --> 02:31.318
Et aussi ici,

02:31.318 --> 02:37.380
IsNumber et IsPositive.

02:37.380 --> 02:38.763
Exécutons ça.

02:40.250 --> 02:41.730
Maintenant pour utiliser les décorateurs

02:41.730 --> 02:44.730
ici, vous devez aussi aller dans tsconfig. js, et assurez-vous

02:44.730 --> 02:49.550
d'y activer les décorateurs expérimentaux.

02:49.550 --> 02:51.593
Par la suite, sauvegardez ceci, et maintenant

02:52.750 --> 02:55.040
ces zones ici devraient aussi disparaître.

02:55.040 --> 02:57.300
Nous devons également redémarrer le serveur de développement pour

02:57.300 --> 03:00.840
qu'il prenne en compte la nouvelle tsconfig. conversion js.

03:00.840 --> 03:02.650
Donc maintenant nous avons ajouté ces

03:02.650 --> 03:04.768
règles, ces règles de validation ici.

03:04.768 --> 03:07.710
En gros, nous disons que le titre ne doit jamais être

03:07.710 --> 03:11.830
une chaîne vide et que les chiffres doivent être un nombre positif.

03:11.830 --> 03:13.980
Maintenant nous pouvons créer

03:13.980 --> 03:15.119
un nouveau produit

03:15.119 --> 03:16.870
ici, disons là, newProd,

03:16.870 --> 03:19.078
où nous appelons new product et

03:19.078 --> 03:21.720
je passe une chaîne vide pour le titre,

03:21.720 --> 03:25.210
et ensuite moins 5. 99 dans pour le numéro.

03:25.210 --> 03:26.700
Si je console alors. log newProd,

03:27.576 --> 03:29.920
getInformation, et

03:29.920 --> 03:34.830
exécutez ceci, voyons où ça marche.

03:34.830 --> 03:35.683
Ok, garde ça.

03:37.840 --> 03:40.040
Huh, ça marche.

03:40.040 --> 03:42.330
Eh bien, nous ne sommes pas encore tout à fait là.

03:42.330 --> 03:46.470
Avec nos décorateurs, nous établissons les règles.

03:46.470 --> 03:49.560
Mais ces décorateurs, à eux seuls, ne font pas grand-chose.

03:49.560 --> 03:52.880
Au lieu de cela, nous devons maintenant également importer

03:52.880 --> 03:56.190
la méthode validator de class-validator.

03:56.190 --> 03:57.300
Donc, à partir de ce paquet,

03:57.300 --> 03:59.840
nous importons validate et nous devons l'exécuter

03:59.840 --> 04:02.260
sur une instance concrète, de la classe à laquelle

04:02.260 --> 04:05.750
nous avons ajouté nos décorateurs.

04:05.750 --> 04:07.300
Donc, dans ce cas, nous

04:07.300 --> 04:12.020
pouvons exécuter validate et lui passer le newProd.

04:12.020 --> 04:14.670
Et validate renverra alors une promesse

04:14.670 --> 04:19.150
qui pourrait en fait produire des erreurs de validation.

04:19.150 --> 04:21.440
Nous pouvons donc ajouter ici, si vous êtes dans

04:21.440 --> 04:23.080
une fonction d'assouplissement,

04:23.080 --> 04:25.680
vous pouvez aussi utiliser un seul poids bien sûr.

04:25.680 --> 04:27.920
Et ici nous récupérons les erreurs que cette

04:27.920 --> 04:30.093
fonction de validation trouve.

04:30.980 --> 04:31.813
Ce qui est important,

04:31.813 --> 04:34.950
c'est que nous finissons toujours par le bloc then, même s'il y a des erreurs,

04:34.950 --> 04:36.560
donc s'il y a des erreurs de validation,

04:36.560 --> 04:38.420
nous ne nous retrouvons pas dans un bloc catch,

04:38.420 --> 04:41.120
nous allons toujours dans le bloc then.

04:41.120 --> 04:44.360
Maintenant, ici, nous pouvons vérifier si les erreurs,

04:44.360 --> 04:45.980
qui est un tableau, la longueur

04:45.980 --> 04:48.400
du point est supérieure à zéro.

04:48.400 --> 04:51.300
Ce qui signifie qu'il y a des erreurs de validation.

04:51.300 --> 04:52.910
Dans ce cas, nous pouvons consigner

04:53.750 --> 04:56.700
les erreurs de validation, et peut-être aussi afficher

04:56.700 --> 04:59.200
les erreurs que nous avons trouvées.

04:59.200 --> 05:01.820
Alors console. enregistrer les erreurs,

05:01.820 --> 05:03.700
et sinon dans mon cas ici, je vais enregistrer

05:03.700 --> 05:05.290
l'information.

05:05.290 --> 05:06.580
Maintenant, bien sûr, cela dépend de

05:06.580 --> 05:09.100
l'application que vous construisez et de ce que vous voulez faire ici.

05:09.100 --> 05:10.860
Vous pourriez vouloir montrer une alerte

05:10.860 --> 05:13.790
à l'utilisateur dans ce cas ici s'il y a des erreurs.

05:13.790 --> 05:15.360
Tu pourrais vouloir réinitialiser l'entrée,

05:15.360 --> 05:16.520
quoi que tu veuilles faire.

05:16.520 --> 05:19.690
Ici, je vais juste écrire quelque chose sur la console.

05:19.690 --> 05:22.080
Et si nous sauvegardons maintenant, vous

05:22.080 --> 05:24.870
voyez les erreurs de validation, et puis ici un

05:24.870 --> 05:27.830
tableau des erreurs qui ont été trouvées.

05:27.830 --> 05:31.890
Par exemple, la première erreur concerne la propriété

05:31.890 --> 05:34.770
title, qui ne doit pas être vide.

05:34.770 --> 05:38.290
Et la deuxième erreur concerne la propriété du prix,

05:38.290 --> 05:41.150
qui doit être un nombre positif.

05:41.150 --> 05:44.950
Et voilà comment vous pouvez facilement ajouter une validation

05:44.950 --> 05:47.960
assez puissante à vos projets avec cette approche

05:47.960 --> 05:50.170
basée sur les décorateurs.

05:50.170 --> 05:53.190
Il est lié à ce que nous avons fait plus tôt dans le cours,

05:53.190 --> 05:54.530
et au module décorateurs,

05:54.530 --> 05:56.062
mais comme je l'ai mentionné

05:56.062 --> 05:59.890
à plusieurs reprises, il est plus élaboré avec un tas de règles intégrées,

05:59.890 --> 06:01.190
et vous pouvez apprendre

06:01.190 --> 06:03.610
tout cela bien sûr dans la documentation de ce

06:03.610 --> 06:06.350
paquet, et sans réinventer la roue.

06:06.350 --> 06:09.300
Le package class-validator est donc un package puissant

06:09.300 --> 06:10.930
que vous devez connaître si

06:10.930 --> 06:14.693
vous construisez de grands projets avec TypeScript.
