WEBVTT

00:01.538 --> 00:03.725
Per iniziare andiamo prima di

00:03.725 --> 00:07.086
tutto su tsconfig. json, perché dobbiamo assicurarci

00:07.086 --> 00:09.965
che alcune cose siano configurate.

00:09.965 --> 00:12.780
Assicuratevi che l'obiettivo sia

00:12.780 --> 00:16.286
impostato su es5 o es6, dipende da voi.

00:16.286 --> 00:19.423
Dipende da quali browser si intende supportare.

00:19.423 --> 00:22.190
Perché alla fine webpack e i tipi di caricatore useranno

00:22.190 --> 00:24.050
questo obiettivo per determinare

00:24.050 --> 00:26.543
come il codice deve essere trasformato.

00:26.543 --> 00:28.960
I vostri tipi di codice devono essere trasformati

00:28.960 --> 00:32.480
in codice Java script che funziona anche nei browser più vecchi?

00:32.480 --> 00:36.210
O, come nel caso di es6, al codice che funziona solo nei

00:36.210 --> 00:37.811
browser più recenti?

00:37.811 --> 00:42.640
Il modulo dovrebbe essere impostato su es2015 o es6, quindi questa impostazione

00:42.640 --> 00:44.110
va bene.

00:44.110 --> 00:49.110
Inoltre, è necessario verificare anche la cartella outDir.

00:50.560 --> 00:53.520
Lo terrò come dist, ma si può cambiare se si vuole compilare

00:53.520 --> 00:55.997
il codice in una cartella diversa.

00:55.997 --> 00:59.378
Non è più necessario avere una directory principale, perché

00:59.378 --> 01:02.260
sarà webpack ad occuparsene e sarà lui a determinare

01:02.260 --> 01:05.014
dove si trovano i file principali.

01:05.014 --> 01:07.660
Quindi, in generale, queste impostazioni dovrebbero andare bene.

01:07.660 --> 01:09.525
Possiamo sempre modificarli in

01:09.525 --> 01:12.487
seguito se qualcosa non funziona come vogliamo.

01:12.487 --> 01:15.220
Aggiungiamo quindi un nuovo file di configurazione

01:15.220 --> 01:19.848
accanto a tsconfig. json e questo è il webpack. config. file js.

01:19.848 --> 01:22.368
E assicuratevi di nominarlo davvero così,

01:22.368 --> 01:24.150
perché questo è il file che webpack

01:24.150 --> 01:27.579
cercherà automaticamente e che indicherà a webpack come

01:27.579 --> 01:30.220
lavorare con il nostro progetto.

01:30.220 --> 01:32.840
Perché webpack è uno strumento che deve essere configurato

01:32.840 --> 01:34.568
per funzionare correttamente.

01:34.568 --> 01:37.568
Quindi cosa facciamo in questo webpack. file di configurazione?

01:37.568 --> 01:40.338
Questo file di configurazione usa JavaScript

01:40.338 --> 01:43.288
e in realtà usa node. Caratteristiche js.

01:43.288 --> 01:46.747
Vogliamo quindi utilizzare il nodo. js per esportare

01:46.747 --> 01:50.379
un oggetto JavaScript.

01:50.379 --> 01:53.538
Che sarà l'oggetto di configurazione prelevato da webpack.

01:53.538 --> 01:55.585
Nel caso in cui non l'abbiate mai visto, questo

01:55.585 --> 01:59.648
è il modo in cui si esportano le cose in un nodo. ambiente js.

01:59.648 --> 02:02.877
E qui stiamo esportando un oggetto JavaScript.

02:02.877 --> 02:05.920
Ora webpack ha bisogno di un paio di informazioni.

02:05.920 --> 02:09.840
La cosa più importante è sapere con quale file inizia

02:09.840 --> 02:14.585
l'intero progetto, quindi dove si trova il punto di ingresso.

02:14.585 --> 02:17.370
Nel nostro caso si tratta dell'applicazione. file ts.

02:17.370 --> 02:18.922
Questo file deve essere

02:18.922 --> 02:20.981
eseguito per primo e webpack

02:20.981 --> 02:24.013
controllerà le importazioni in questo file

02:24.013 --> 02:25.461
e andrà a vedere i file

02:25.461 --> 02:27.378
importati e le importazioni

02:27.378 --> 02:30.219
dei file importati e così via.

02:30.219 --> 02:33.461
Finché non conosce tutti i file utilizzati dal progetto.

02:33.461 --> 02:36.201
Quindi esaminerà i contenuti dei file,

02:36.201 --> 02:38.740
come questo contenuto qui e tutti i contenuti

02:38.740 --> 02:41.690
di tutti i file e li compilerà, con l'aiuto

02:41.690 --> 02:44.290
di ts. pacchetto loader che ho menzionato.

02:44.290 --> 02:46.960
Ora, per far funzionare correttamente webpack, è necessario

02:46.960 --> 02:51.598
rimuovere tutti i file . js in tutte le importazioni.

02:51.598 --> 02:54.400
Ne avevamo bisogno prima, quando usavamo il browser

02:54.400 --> 02:57.885
nativo integrato in ts. ma con webpack non sono

02:57.885 --> 03:01.130
necessarie queste estensioni.

03:01.130 --> 03:03.664
Perché webpack cercherà automaticamente. js e alcuni altri file di estensione.

03:03.664 --> 03:06.501
Quindi non si devono e non si devono aggiungere qui, altrimenti

03:06.501 --> 03:09.270
webpack cercherà i file con una doppia estensione, cosa

03:09.270 --> 03:10.716
che non si vuole.

03:10.716 --> 03:13.655
Quindi rimuovete . js su tutte queste importazioni e, una volta

03:13.655 --> 03:18.441
fatto, salvate tutti i file per assicurarvi

03:18.441 --> 03:21.370
che le modifiche siano applicate.

03:21.370 --> 03:24.043
Ora torniamo a webpack. config. js, si deve aggiungere una

03:24.043 --> 03:26.498
proprietà

03:26.498 --> 03:31.320
entry in questo oggetto esportato.

03:31.320 --> 03:32.740
E punta a . /src/app. nel nostro esempio.

03:32.740 --> 03:37.740
Quindi, nel file di ingresso principale del progetto.

03:38.680 --> 03:42.444
Aggiungete quindi una chiave di uscita.

03:42.444 --> 03:45.880
Un'uscita ora è un oggetto qui.

03:45.880 --> 03:48.051
Dove si specifica innanzitutto il nome del file.

03:48.051 --> 03:51.120
Questo sarà il singolo file JavaScript che

03:51.120 --> 03:52.998
verrà prodotto alla fine.

03:52.998 --> 03:55.440
E qui lo chiameremo bundle. js, ma si può dare il nome che

03:55.440 --> 03:57.350
si vuole.

03:57.350 --> 03:58.788
App. js, o quello che volete.

03:58.788 --> 04:01.709
Si possono anche aggiungere

04:01.709 --> 04:05.171
parti dinamiche, come ad esempio l'hash del contenuto, per dire

04:05.171 --> 04:08.971
a webpack di creare automaticamente un hash unico per ogni build, che

04:08.971 --> 04:11.829
può essere utile per la cache nel browser.

04:11.829 --> 04:13.578
Ma anche in questo caso è possibile saperne di più nei documenti di webpack.

04:13.578 --> 04:16.229
Qui non ne abbiamo bisogno, quindi chiameremo il file bundle. js.

04:16.229 --> 04:19.779
Oltre al nome del file, è necessario

04:19.779 --> 04:23.320
specificare anche il percorso in cui deve essere scritto l'output.

04:23.320 --> 04:26.131
E naturalmente dovrebbe corrispondere

04:26.131 --> 04:28.900
al percorso che avete nel vostro ts. config. js per evitare errori.

04:28.900 --> 04:32.970
Quindi a questa cartella.

04:32.970 --> 04:34.189
Ora, a differenza della ts. config,js, non si

04:34.189 --> 04:37.010
dovrebbe scrivere . /dist qui.

04:37.010 --> 04:39.819
Webpack vuole un percorso assoluto.

04:39.819 --> 04:42.099
E per costruirne uno possiamo usare un nodo. modulo js.

04:42.099 --> 04:45.669
A tal fine possiamo utilizzare il nodo. js, che utilizza la parola

04:45.669 --> 04:48.880
chiave required, e importare

04:48.880 --> 04:51.280
il modulo path.

04:51.280 --> 04:54.220
Non è necessario installarlo come libreria,

04:54.220 --> 04:56.050
è un nodo centrale. js, che avete già

04:56.050 --> 04:59.651
se avete node. js installato, cosa che si fa perché l'abbiamo

04:59.651 --> 05:02.149
fatto prima nel corso.

05:02.149 --> 05:04.966
Ora si può usare path per chiamare il metodo

05:04.966 --> 05:08.552
resolve, che consente di creare un percorso assoluto

05:08.552 --> 05:11.280
a una determinata cartella.

05:11.280 --> 05:12.910
Per questo si usa una costante speciale,

05:12.910 --> 05:15.320
la costante __dirname, che è disponibile a livello

05:15.320 --> 05:17.236
globale in un nodo. ambiente js.

05:17.236 --> 05:21.150
E webpack, come ho detto, usa node. js per eseguire i file.

05:21.150 --> 05:24.692
E poi come secondo parametro

05:24.692 --> 05:27.433
dist, alla fine dist costruisce solo un

05:27.433 --> 05:30.661
percorso assoluto alla cartella dist che webpack

05:30.661 --> 05:33.190
usa per scriverci l'output.

05:33.190 --> 05:35.452
In questo modo si ottiene un punto di ingresso

05:35.452 --> 05:38.753
e un punto di uscita, ma non si dice a webpack cosa fare con

05:38.753 --> 05:40.743
i file TypeScript.

05:40.743 --> 05:42.553
Perché di default webpack non

05:42.553 --> 05:45.140
lo sa, di default è solo un bundler.

05:45.140 --> 05:46.884
Qualsiasi funzionalità aggiuntiva,

05:46.884 --> 05:48.684
come la compilazione di TypeScript in

05:48.684 --> 05:51.261
JavaScript, deve essere insegnata a webpack.

05:51.261 --> 05:53.452
Lo faremo nella prossima lezione.
