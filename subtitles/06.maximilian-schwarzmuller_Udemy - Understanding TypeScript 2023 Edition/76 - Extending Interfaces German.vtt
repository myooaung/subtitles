WEBVTT

00:02.150 --> 00:03.290
Ausbilder: Sie können die

00:03.290 --> 00:05.890
Vererbung auch in Schnittstellen implementieren.

00:05.890 --> 00:10.890
Nehmen wir an, wir haben eine andere Schnittstelle, Named, und dies ist die Schnittstelle,

00:11.100 --> 00:13.600
die tatsächlich sicherstellt, dass wir

00:13.600 --> 00:16.420
eine Named-Eigenschaft haben.

00:16.420 --> 00:18.510
Hier in Person könnten wir also Greetable

00:18.510 --> 00:20.950
und Named implementieren, um gezwungen zu sein,

00:20.950 --> 00:24.110
sowohl eine Begrüßungsmethode als auch einen Namen zu haben.

00:24.110 --> 00:25.820
Das ist etwas, was wir tun könnten.

00:25.820 --> 00:30.200
Oder, wenn wir wissen, dass Greetable der Meinung ist, dass greetable-Objekte immer

00:30.200 --> 00:31.810
einen Namen haben müssen, könnten

00:31.810 --> 00:34.500
wir sicherstellen, dass diese Greetable-Schnittstelle

00:34.500 --> 00:36.970
tatsächlich die Named-Schnittstelle erweitert,

00:36.970 --> 00:40.120
so dass sie zusammen eine neue Schnittstelle bilden, die jedes

00:40.120 --> 00:43.460
auf Greetable basierende Objekt dazu zwingt, eine greet-Methode,

00:43.460 --> 00:46.150
aber auch einen Namen zu haben.

00:46.150 --> 00:48.840
Und um das zu tun, können wir hier auch auf der

00:48.840 --> 00:52.700
Schnittstelle extends hinzufügen, und wir erweitern Named.

00:52.700 --> 00:55.760
Wie ich bereits sagte, bildet dies eine neue Schnittstelle, die

00:55.760 --> 00:58.330
letztendlich eine Schnittstelle ist, die uns zwingt,

00:58.330 --> 01:00.760
eine Begrüßungsmethode zu haben, aber nicht nur das,

01:00.760 --> 01:03.140
sie zwingt uns auch, alles zu haben, was die Benannte

01:03.140 --> 01:04.910
Schnittstelle definiert.

01:04.910 --> 01:07.150
In diesem Fall handelt es sich um eine Namenseigenschaft.

01:07.150 --> 01:09.450
Wenn ich also hier name entfernen würde, würde

01:09.450 --> 01:12.120
ich schon einen Fehler bekommen, denn diese Klasse implementiert

01:12.120 --> 01:14.860
nun fälschlicherweise die Schnittstelle Greetable,

01:14.860 --> 01:17.600
weil die Eigenschaft name fehlt.

01:17.600 --> 01:20.900
Auf diese Weise können wir also auch Schnittstellen kombinieren.

01:20.900 --> 01:23.410
Warum sollten wir eine Schnittstelle auf diese Weise aufteilen?

01:23.410 --> 01:25.600
Nun, vielleicht haben Sie eine Anwendung,

01:25.600 --> 01:27.810
bei der Sie bei einigen Objekten nur einen Namen

01:27.810 --> 01:31.120
und keine Begrüßungsmethode erzwingen wollen, während Sie bei

01:31.120 --> 01:34.630
anderen Objekten sowohl Begrüßung als auch Name benötigen.

01:34.630 --> 01:36.830
Mit dieser Aufteilung ist dies möglich.

01:36.830 --> 01:40.630
Einige Objekte oder Klassen können nur Named implementieren, andere

01:40.630 --> 01:42.590
können Greetable implementieren und

01:42.590 --> 01:45.990
sind gezwungen, sowohl Greet als auch einen Namen zu haben.

01:45.990 --> 01:48.490
Eine Erweiterung der Schnittstellen ist also möglich.

01:48.490 --> 01:50.880
Und dort kann man auch mehr als einen verlängern.

01:50.880 --> 01:53.380
So können Sie mehrere Schnittstellen zu einer einzigen

01:53.380 --> 01:55.060
Schnittstelle zusammenfassen.

01:55.060 --> 01:58.570
Wir könnten eine weitere Schnittstelle zusammenführen, wenn wir sie hätten.

01:58.570 --> 02:00.860
Einfach durch ein Komma getrennt.

02:00.860 --> 02:03.570
Denken Sie daran, dass dies für eine Schulklasse nicht möglich war.

02:03.570 --> 02:05.710
Wenn Sie Klassen in der Vererbung verwenden,

02:05.710 --> 02:07.920
können Sie nur von einer Klasse erben.

02:07.920 --> 02:10.600
Sie können nicht von mehreren Klassen erben.

02:10.600 --> 02:12.490
Bei Schnittstellen ist das anders.

02:12.490 --> 02:14.760
Bei Schnittstellen kann man in der Tat von

02:14.760 --> 02:16.920
mehreren Schnittstellen erben, weil sie

02:16.920 --> 02:18.920
am Ende einfach zusammengeführt werden,

02:18.920 --> 02:21.430
und in diesem reinen TypeScript-Feature, das,

02:21.430 --> 02:23.010
wie Sie sehen werden, nicht in

02:23.010 --> 02:24.800
JavaScript übersetzt wird, können

02:24.800 --> 02:27.080
wir daher die für JavaScript-Klassen aufgestellten

02:27.080 --> 02:29.250
Regeln brechen und mehrere Schnittstellen

02:29.250 --> 02:31.733
erweitern.
