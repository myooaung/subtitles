WEBVTT

00:02.100 --> 00:07.040
ผู้สอน: เพื่อทำความเข้าใจคลาส มาทำความเข้าใจการเขียนโปรแกรมเชิงวัตถุกัน

00:07.040 --> 00:10.050
ตอนนี้ขึ้นอยู่กับระดับความรู้ของคุณและหากคุณทำงานกับ

00:10.050 --> 00:18.320
JavaScript สมัยใหม่และอาจรวมถึงภาษาโปรแกรมอื่น ๆ คุณอาจทราบว่ามีคลาสใดบ้างและการเขียนโปรแกรมเชิงวัตถุ

00:18.320 --> 00:22.270
OOP นั้นเกี่ยวกับอะไร

00:22.270 --> 00:27.720
ดังนั้น คุณยังสามารถข้ามการบรรยายนี้เพื่อข้ามไปยังส่วนที่เราเขียนโค้ดได้ทันที

00:27.720 --> 00:32.200
มิฉะนั้นติดกับฉันอย่างแน่นอนเพราะสิ่งสำคัญคือต้องเข้าใจสิ่งนี้

00:32.200 --> 00:35.240
แนวคิดเบื้องหลังการเขียนโปรแกรมเชิงวัตถุและคลาสจะมีความสำคัญต่อสิ่งนั้น

00:35.240 --> 00:43.110
ดังที่คุณจะเห็น คือการที่คุณทำงานกับเอนทิตีในชีวิตจริงในโค้ดของคุณ

00:43.110 --> 00:47.370
เพื่อให้คุณทำงานกับสิ่งต่าง ๆ ในรหัสของคุณด้วยวัตถุที่คล้ายกับวัตถุในชีวิตจริงให้มากที่สุดเท่าที่จะเป็นไปได้

00:47.370 --> 00:56.250
อย่างน้อยก็เพื่อให้คุณในฐานะนักพัฒนาสามารถให้เหตุผลเกี่ยวกับรหัสของคุณได้ง่ายขึ้น

00:56.250 --> 01:01.270
ตัวอย่างเช่น เราอาจสร้างร้านค้าออนไลน์และที่นั่นเราอาจมีรายการสินค้า

01:01.270 --> 01:08.140
เราอาจต้องการทำงานกับวัตถุรายการผลิตภัณฑ์ ซึ่งมีทุกอย่างที่เราต้องการในการจัดการรายการผลิตภัณฑ์

01:08.140 --> 01:11.570
วิธีการเพิ่มผลิตภัณฑ์ไปยังผลิตภัณฑ์ตัวนำ

01:11.570 --> 01:13.370
รายการเอง

01:13.370 --> 01:19.540
ตัวอย่างเช่น นี่อาจเป็นวัตถุที่รับผิดชอบในการแสดงรายการผลิตภัณฑ์และจัดการรายการนั้น

01:19.540 --> 01:22.840
ซึ่งดึงมาจากบริการหรือจากฐานข้อมูล

01:22.840 --> 01:25.530
ดังนั้นผลิตภัณฑ์นี้จึงมีลอจิกการเรนเดอร์ การดึงข้อมูล

01:25.530 --> 01:27.260
และการจัดการทั้งหมด

01:27.260 --> 01:29.420
ตอนนี้เป็นรายการผลิตภัณฑ์

01:29.420 --> 01:32.510
ในโปรแกรมของเราในเว็บไซต์ที่เรากำลังสร้าง

01:32.510 --> 01:36.000
เราอาจจำเป็นต้องทำงานกับผลิตภัณฑ์แต่ละตัวด้วย

01:36.000 --> 01:43.930
ดังนั้นเราอาจต้องการวัตถุหนึ่งหรือหลายวัตถุ หนึ่งผลิตภัณฑ์สำหรับแต่ละผลิตภัณฑ์ที่รับผิดชอบในการจัดการผลิตภัณฑ์เดียว

01:43.930 --> 01:47.180
อาจเก็บและแสดงรายละเอียดเกี่ยวกับผลิตภัณฑ์นั้น

01:47.180 --> 01:51.260
อาจช่วยให้เราเพิ่มลงในรถเข็นได้ อะไรทำนองนั้น

01:51.260 --> 01:54.900
ดังนั้นเมื่อเราต้องการดึงส่วนต่อประสานผู้ใช้ไปที่หน้าจอ เราต้องการจัดการผ่าน

01:54.900 --> 02:05.370
JavaScript และด้วยเหตุนี้จึงผ่าน TypeScript จากนั้นเราสามารถใช้สิ่งนี้กับรายการผลิตภัณฑ์และวัตถุผลิตภัณฑ์ซึ่งมีตรรกะสำหรับการจัดการข้อมูลพื้นฐาน แต่ยังสำหรับการแสดงผล

02:05.370 --> 02:07.760
เนื้อหาบนหน้าจอ

02:07.760 --> 02:11.940
และแน่นอนว่าวัตถุทั้งสองนี้จะสัมพันธ์กัน

02:11.940 --> 02:14.790
เรายังอาจมีวัตถุตะกร้าสินค้าบนหน้าจอของเรา

02:14.790 --> 02:18.040
ซึ่งมีหน้าที่ในการแสดงผลและจัดการบัตรช้อปปิ้ง

02:18.040 --> 02:20.380
แน่นอนว่ามันเชื่อมโยงกับผลิตภัณฑ์ด้วย

02:20.380 --> 02:22.930
ดังนั้นจึงเก็บตรรกะทั้งหมดที่เราต้องการในการแสดงผลบัตรช้อปปิ้ง

02:22.930 --> 02:28.073
การสั่งซื้อ และการสื่อสารกับเซิร์ฟเวอร์และอื่นๆ

02:28.073 --> 02:33.010
นั่นจะเป็นวิธีหนึ่งในการคิดเกี่ยวกับแอปพลิเคชันที่เรากำลังสร้าง

02:33.010 --> 02:37.670
วิธีที่เราจะแยกมันออกเป็นชิ้นๆ ที่สมเหตุสมผลสำหรับเราในฐานะมนุษย์

02:37.670 --> 02:40.320
และในโค้ดใน TypeScript และ JavaScript ในภาษาโปรแกรมสมัยใหม่ส่วนใหญ่

02:40.320 --> 02:50.640
สิ่งนี้ได้รับการสนับสนุนอย่างแข็งขัน เนื่องจากเรามีออบเจกต์ซึ่งเป็นโครงสร้างข้อมูลที่ซับซ้อนกว่าซึ่งมีคุณสมบัติและเมธอด

02:50.640 --> 02:53.340
และแน่นอนว่าเรามีสิ่งนั้นใน JavaScript เช่นกัน

02:53.340 --> 02:57.310
แต่เราอาจมีชั้นเรียนที่ช่วยเราได้

02:57.310 --> 02:59.100
ตอนนี้แนวคิดเบื้องหลังชั้นเรียนคืออะไร

02:59.100 --> 03:00.740
และอินสแตนซ์คืออะไร?

03:00.740 --> 03:04.690
เมื่อเราได้รับออบเจกต์เหล่านี้และเมื่อทำตามวิธีการเชิงออบเจกต์นี้

03:04.690 --> 03:11.130
เราสามารถพิจารณาแยกแอปหรือตรรกะแอปพลิเคชันของเราออกเป็นออบเจกต์ดังกล่าวซึ่งจัดการส่วนต่างๆ

03:11.130 --> 03:13.750
ของตรรกะของเรา

03:13.750 --> 03:17.000
ตอนนี้เชื่อมโยงกับแนวคิดของการใช้วัตถุเหล่านี้ซึ่งแน่นอนว่ามีอยู่ใน

03:17.000 --> 03:23.910
JavaScript เราสามารถใช้วัตถุที่นั่นเพื่อเป็นแนวคิดในการมีคลาส

03:23.910 --> 03:27.470
ออบเจกต์เป็นสิ่งที่เป็นรูปธรรมที่เราทำงานในรหัสของเรา

03:27.470 --> 03:33.450
โครงสร้างข้อมูลที่เราใช้ในการจัดเก็บข้อมูลเพื่อจัดเก็บวิธีการดำเนินการกับวิธีการ

03:33.450 --> 03:36.570
ชั้นเรียนเป็นแบบพิมพ์เขียวสำหรับวัตถุ

03:36.570 --> 03:42.230
คลาสช่วยให้เราสามารถกำหนดได้ว่าวัตถุควรมีลักษณะอย่างไร ข้อมูลใดที่พวกเขาควรเก็บไว้

03:42.230 --> 03:48.240
วิธีการใดที่พวกเขาควรมี เพื่อให้เราสามารถสร้างวัตถุตามคลาสเหล่านี้ได้อย่างง่ายดาย

03:48.240 --> 03:51.830
จากนั้นเราเรียกอินสแตนซ์ของคลาสนี้ว่า

03:51.830 --> 03:54.830
ดังนั้นออบเจกต์จึงเป็นอินสแตนซ์ของคลาสหากอิงตามคลาสดังกล่าว

03:54.830 --> 03:59.900
เพื่อให้เราสามารถจำลองออบเจกต์หลายรายการได้อย่างรวดเร็วด้วยโครงสร้างเดียวกัน

03:59.900 --> 04:04.090
วิธีการเดียวกันตามคลาสเดียวกัน

04:04.090 --> 04:07.280
ดังนั้นคลาสจึงช่วยเรากำหนดว่าออบเจกต์ควรมีลักษณะอย่างไร

04:07.280 --> 04:10.170
คุณสมบัติและวิธีการที่ออบเจ็กต์มี และอื่นๆ

04:10.170 --> 04:14.920
ดังนั้นจึงมีคลาสเพื่อเพิ่มความเร็วในการสร้างวัตถุ

04:14.920 --> 04:20.070
และเป็นเพียงทางเลือกแทนการใช้สัญกรณ์เชิงวัตถุที่คุณทราบอยู่แล้ว

04:20.070 --> 04:21.330
พวกเขาทำให้ง่ายขึ้น

04:21.330 --> 04:26.900
คลาสทำให้ง่ายต่อการสร้างวัตถุหลายชิ้น ซึ่งโดยทั่วไปมีโครงสร้างเดียวกันและวิธีการเดียวกัน

04:26.900 --> 04:32.780
และอาจแตกต่างกันเฉพาะรายละเอียดข้อมูลที่แน่นอนซึ่งจัดเก็บไว้ในนั้น

04:32.780 --> 04:36.670
สมมติว่าเรามีบุคคลหลายคนที่เราต้องการแสดงด้วยวัตถุ

04:36.670 --> 04:39.330
แต่ละคนอาจมีชื่อและอายุ ค่านิยมจะต่างกัน

04:39.330 --> 04:43.310
โครงสร้างทั่วไปเหมือนกัน

04:43.310 --> 04:44.500
นั่นคือทฤษฎี

04:44.500 --> 04:46.113
มาดูกันในทางปฏิบัติ
