WEBVTT

00:02.260 --> 00:05.180
Kursleiter: Wenn wir nun auf diese Schnittstelle zurückkommen,

00:05.180 --> 00:08.230
stellt sich die Frage, warum wir sie brauchen.

00:08.230 --> 00:10.160
Würden wir nicht genau das Gleiche haben, wenn

00:10.160 --> 00:13.420
wir hier und da einen benutzerdefinierten Typ hinzufügen würden?

00:13.420 --> 00:15.580
Der Unterschied besteht lediglich darin, dass wir ein Gleichheitszeichen

00:15.580 --> 00:18.470
hinzufügen müssen und dann sagen, dass der Typ Person ein Objekt ist, das wie

00:18.470 --> 00:19.940
folgt aussieht?

00:19.940 --> 00:21.490
Und tatsächlich, wenn wir das speichern,

00:21.490 --> 00:23.220
wird es ohne Fehler kompiliert.

00:23.220 --> 00:26.740
Wir können also unsere Schnittstelle durch einen solchen Typ ersetzen

00:26.740 --> 00:28.490
und es funktioniert wie zuvor.

00:28.490 --> 00:31.290
Warum haben wir dann eine Schnittstelle?

00:31.290 --> 00:32.277
Nun, eine Schnittstelle

00:32.277 --> 00:35.310
und ein benutzerdefinierter Typ sind nicht genau dasselbe,

00:35.310 --> 00:39.260
obwohl man sie oft austauschbar verwenden kann, und man kann eine Schnittstelle

00:39.260 --> 00:42.130
anstelle eines benutzerdefinierten Typs verwenden oder

00:42.130 --> 00:43.520
umgekehrt.

00:43.520 --> 00:45.720
Es gibt auch einige Unterschiede.

00:45.720 --> 00:47.400
Nun, ein wesentlicher Unterschied besteht

00:47.400 --> 00:49.070
darin, dass Schnittstellen nur dazu verwendet

00:49.070 --> 00:51.470
werden können, die Struktur eines Objekts zu beschreiben,

00:51.470 --> 00:53.780
man kann auch Typen dafür verwenden, aber anstelle eines

00:53.780 --> 00:55.250
benutzerdefinierten Typs kann man

00:55.250 --> 00:56.800
auch andere Dinge wie Unionstypen und

00:56.800 --> 01:00.350
so weiter speichern, was wir zu Beginn des Kurses getan haben.

01:00.350 --> 01:03.740
Das hört sich an, als ob die Schrift dadurch flexibler ist,

01:03.740 --> 01:08.510
aber die andere Seite der Medaille ist, dass die Schnittstelle klarer ist.

01:08.510 --> 01:10.870
Wenn man etwas als Schnittstelle definiert,

01:10.870 --> 01:12.900
ist es ganz klar, dass man damit die

01:12.900 --> 01:15.580
Struktur eines Objekts festlegen will.

01:15.580 --> 01:18.360
Und wenn es um die Definition von Objekttypen geht,

01:18.360 --> 01:21.630
sieht man häufiger Schnittstellen in freier Wildbahn.

01:21.630 --> 01:23.800
Dann sehen Sie benutzerdefinierte Typen.

01:23.800 --> 01:26.410
Eine weitere Möglichkeit, die Sie mit Schnittstellen

01:26.410 --> 01:27.530
nutzen können, die aber

01:27.530 --> 01:30.090
nur bei benutzerdefinierten Typen möglich ist, ist

01:30.090 --> 01:33.360
die Implementierung einer Schnittstelle in einer Klasse.

01:33.360 --> 01:34.820
Was meinen wir damit?

01:34.820 --> 01:38.360
Der Grund, warum man oft mit Schnittstellen arbeitet, ist, dass

01:38.360 --> 01:40.550
eine Schnittstelle als Vertrag verwendet

01:40.550 --> 01:43.750
werden kann, den eine Klasse implementieren kann und an

01:43.750 --> 01:46.400
den sich eine Klasse dann halten muss.

01:46.400 --> 01:48.150
Was meinen wir damit?

01:48.150 --> 01:52.390
Nehmen wir an, unsere Schnittstelle ist keine Person-Schnittstelle

01:52.390 --> 01:53.970
mit dem Namen und dem Alter,

01:53.970 --> 01:57.690
sondern wir nennen sie Greetable.

01:57.690 --> 01:59.270
Das sieht vielleicht nach einem

01:59.270 --> 02:01.090
seltsamen Namen aus, aber im Endeffekt

02:01.090 --> 02:03.560
bedeutet das nur, dass jedes Objekt, das als Greetable

02:03.560 --> 02:06.310
behandelt werden soll, ein Objekt mit einem Namen und

02:06.310 --> 02:09.251
einer greet-Methode sein muss.

02:09.251 --> 02:10.783
Jetzt könnten wir also sagen,

02:10.783 --> 02:14.630
dass diese user1-Variable ein Greetable-Objekt enthalten sollte,

02:14.630 --> 02:16.730
und natürlich bekommen wir jetzt einen

02:16.730 --> 02:19.930
Fehler, weil wir mehr als nur name und greet haben.

02:19.930 --> 02:22.000
Aber wir könnten diese Schnittstelle

02:22.000 --> 02:25.860
verwenden, um sie auf mehrere Klassen aufzuteilen. Wir müssen sicherstellen,

02:25.860 --> 02:27.410
dass jede Klasse, die sich an

02:27.410 --> 02:30.860
diese Schnittstelle hält, eine name-Eigenschaft und eine greet-Methode

02:30.860 --> 02:33.410
haben muss.

02:33.410 --> 02:35.730
Hier könnten wir jetzt also eine Person-Klasse hinzufügen, der

02:35.730 --> 02:36.970
Name ist wieder verfügbar, weil wir

02:36.970 --> 02:38.540
die Schnittstelle umbenannt haben.

02:38.540 --> 02:40.790
Und jetzt, tell typescript und diese

02:40.790 --> 02:45.480
Klasse sollte sich grundsätzlich an diese Schnittstelle halten.

02:45.480 --> 02:48.350
Sie sollte diese Schnittstelle implementieren.

02:48.350 --> 02:53.000
Es sollte dem Vertrag folgen, der über diese Schnittstelle eingerichtet wurde.

02:53.000 --> 02:55.260
Dies geschieht durch Hinzufügen des Schlüsselworts

02:55.260 --> 02:56.930
implements nach dem Klassennamen.

02:56.930 --> 02:59.280
Und dann der Name unserer Schnittstelle: Greetable.

03:00.420 --> 03:02.780
Und Sie können mehr als eine Schnittstelle implementieren.

03:02.780 --> 03:04.710
Das ist ein Unterschied zur Vererbung.

03:04.710 --> 03:07.270
Man kann nur von einer Klasse erben, man kann mehrere

03:07.270 --> 03:09.370
Schnittstellen implementieren, indem

03:09.370 --> 03:12.730
man sie einfach mit einem Komma trennt, also könnten wir eine weitere

03:12.730 --> 03:16.000
Schnittstelle haben, wenn wir eine hätten.

03:16.000 --> 03:17.710
Hier habe ich allerdings nur einen.

03:17.710 --> 03:20.350
Dies hat zur Folge, dass wir hier einen Fehler

03:20.350 --> 03:21.740
erhalten, weil unsere Klasse

03:21.740 --> 03:25.200
die Schnittstelle nicht korrekt implementiert.

03:25.200 --> 03:27.240
Es verfügt nicht über die Eigenschaft

03:27.240 --> 03:29.690
name und nicht über die Methode greet.

03:29.690 --> 03:33.960
Jetzt müssen wir das hier in unserer Klasse einstellen, vielleicht

03:33.960 --> 03:35.610
setze ich einen Konstruktor,

03:35.610 --> 03:38.173
wo wir einen Wert für den Namen bekommen,

03:39.010 --> 03:41.260
und dann richten wir es so ein, und wo

03:41.260 --> 03:44.380
wir auch unsere Begrüßungsmethode hinzufügen,

03:44.380 --> 03:48.080
wo wir dann diese Logik von draußen haben könnten.

03:48.080 --> 03:50.780
Jetzt, in unserer Klasse, können wir mehr als das haben.

03:50.780 --> 03:52.340
Wir können mehr Felder haben, wir

03:52.340 --> 03:53.920
können mehr Methoden haben, wir

03:53.920 --> 03:56.030
können diese Klasse auch erweitern, wir können

03:56.030 --> 03:59.170
mit dieser Klasse arbeiten, wie wir es immer können.

03:59.170 --> 04:02.640
Aber wir sind gezwungen, diese Methode korrekt zu implementieren,

04:02.640 --> 04:04.400
um diese Namenseigenschaft zu haben,

04:04.400 --> 04:07.040
weil wir diese Schnittstelle implementieren.

04:07.040 --> 04:09.740
Daher werden Schnittstellen häufig verwendet, um

04:09.740 --> 04:13.870
die Funktionalität zwischen verschiedenen Klassen zu teilen, ohne deren konkrete

04:13.870 --> 04:16.550
Implementierung zu berücksichtigen.

04:16.550 --> 04:19.240
Man kann keine Implementierung oder Werte innerhalb von

04:19.240 --> 04:22.450
Schnittstellen haben, aber in Bezug auf die Struktur, in Bezug auf

04:22.450 --> 04:24.980
die Eigenschaften, die eine Klasse haben sollte.

04:24.980 --> 04:28.120
Es ist also ein bisschen wie bei der Arbeit mit abstrakten

04:28.120 --> 04:29.640
Klassen, mit dem Unterschied,

04:29.640 --> 04:33.520
dass eine Schnittstelle überhaupt keine Implementierungsdetails

04:33.520 --> 04:37.160
hat, während abstrakte Klassen eine Mischung aus Sie müssen diese

04:37.160 --> 04:39.330
Teile überschreiben und ich habe eine

04:39.330 --> 04:42.470
konkrete Implementierung Teile sein kann.

04:42.470 --> 04:43.730
Das ist ein wichtiger Unterschied

04:43.730 --> 04:46.860
zwischen Schnittstellen und abstrakten Klassen.

04:46.860 --> 04:47.850
Damit haben wir nun

04:47.850 --> 04:49.790
aber unsere Personenklasse hier.

04:49.790 --> 04:53.910
Und hier kann nun user1 erstellt werden, indem man

04:53.910 --> 04:55.930
new Person verwendet und

04:55.930 --> 04:58.090
z.B. den Namen eingibt.

04:58.090 --> 04:59.730
Und jetzt sehen wir, dass es in Ordnung

04:59.730 --> 05:02.300
ist, dass wir dieses Alter hier in user1 haben, weil

05:02.300 --> 05:05.870
wir user1 basierend auf Person booten, Person implementiert Greetable,

05:05.870 --> 05:07.540
und Sie können mehr als Greetable

05:07.540 --> 05:10.440
in einer Klasse hinzufügen, aber Sie müssen die Bedingungen

05:10.440 --> 05:15.120
erfüllen, die durch die Schnittstelle festgelegt sind.

05:15.120 --> 05:17.130
Wenn wir also jetzt alles speichern, haben

05:17.130 --> 05:18.730
wir einen gültigen Code, und wenn

05:18.730 --> 05:23.040
wir unseren user1 dort unten mit console. Log sehen wir, dass es sich in diesem

05:23.040 --> 05:25.430
Fall um ein normales Objekt mit dem Alter

05:25.430 --> 05:27.590
und dem Namen handelt, aber das Wichtigste

05:27.590 --> 05:30.950
ist, dass es auf einer Klasse basiert, die die Schnittstelle

05:30.950 --> 05:32.770
implementiert.

05:32.770 --> 05:35.550
Und Sie können dann alle die Schnittstelle als Typ verwenden.

05:35.550 --> 05:37.780
Natürlich hätten wir dies auch auf den Typ Person setzen

05:37.780 --> 05:40.580
können, aber wie Sie sehen, funktioniert die Verwendung des Typs

05:40.580 --> 05:42.200
Greetable hier, weil das Person-Objekt,

05:42.200 --> 05:45.090
das wir am Ende in der Klasse user1 speichern, auf der Schnittstelle

05:45.090 --> 05:46.300
Greetable basiert.

05:46.300 --> 05:47.750
Sie setzt dies um.

05:47.750 --> 05:49.820
Das ist also eine weitere leistungsstarke Funktion.

05:49.820 --> 05:53.690
Sie können eine Schnittstelle als Typ für eine Konstante oder Variable

05:53.690 --> 05:58.010
verwenden, die dann tatsächlich eine andere Klasse eines anderen Typs

05:58.010 --> 06:02.330
speichert, die wiederum auf dem Schnittstellentyp basiert, weil sie ihn

06:02.330 --> 06:03.950
implementiert.

06:03.950 --> 06:06.530
Das sind die Schnittstellen in Kurzform.

06:06.530 --> 06:08.643
Viele leistungsstarke Funktionen enthalten.
