WEBVTT

00:02.270 --> 00:04.390
Instructeur : Ok, assez parlé des fonctions génériques.

00:04.390 --> 00:06.490
Nous les utiliserons toujours tout au long de

00:06.490 --> 00:08.150
ce cours, tout le projet du cours.

00:08.150 --> 00:10.390
Cela devrait donc devenir de plus en plus clair, au fur et

00:10.390 --> 00:11.890
à mesure que nous travaillons avec.

00:11.890 --> 00:14.823
J'espère que l'idée générale est déjà claire.

00:15.660 --> 00:18.490
Les fonctions génériques ne sont pas tout ce que nous pouvons

00:18.490 --> 00:20.550
utiliser, nous avons aussi des classes génériques.

00:20.550 --> 00:21.560
Voyons donc comment

00:21.560 --> 00:23.740
créer une telle classe générique et pourquoi

00:23.740 --> 00:25.170
nous pouvons le faire, pourquoi

00:25.170 --> 00:27.760
cela peut nous être utile.

00:27.760 --> 00:31.950
Nous pourrions créer une classe de stockage ici.

00:31.950 --> 00:36.060
Une classe, disons, qui a une propriété privée data.

00:36.060 --> 00:38.850
qui, au final, contiendra un tableau de données.

00:38.850 --> 00:40.940
Ensuite, il a une méthode addItem, qui

00:40.940 --> 00:44.200
prend notre élément et qui doit être ajouté aux données

00:44.200 --> 00:45.763
avec le push, disons.

00:48.570 --> 00:50.830
Et nous avons une méthode removeItem, qui

00:50.830 --> 00:52.173
prend notre élément, où

00:53.010 --> 00:57.740
nous pourrions dire ceci. données. splice et ensuite nous avons

00:57.740 --> 01:01.730
juste besoin de récupérer l'indexOff(item) ici et splice un

01:01.730 --> 01:02.910
élément.

01:02.910 --> 01:06.030
C'est ainsi que l'on peut supprimer un élément d'un tableau.

01:06.030 --> 01:07.873
Et bien sûr, getItems, qui renvoie,

01:09.750 --> 01:13.120
disons, une copie de ceci. des données, comme avec l'opérateur

01:13.120 --> 01:15.770
d'étalement que vous avez appris.

01:16.610 --> 01:17.443
Maintenant nous pouvons

01:17.443 --> 01:19.450
le faire et nous obtenons un tas d'erreurs ici.

01:19.450 --> 01:20.500
Nous obtenons un tas d'erreurs,

01:20.500 --> 01:23.900
notamment parce que le nom Storage est un nom réservé, alors nommons-le

01:23.900 --> 01:25.230
Datastorage.

01:25.230 --> 01:26.620
C'est facile de s'en débarrasser.

01:26.620 --> 01:27.920
Maintenant, nous obtenons également

01:27.920 --> 01:29.400
une erreur ici parce que nous ne disons

01:29.400 --> 01:30.880
rien sur le type de données que nous stockons,

01:30.880 --> 01:32.960
et quel type d'élément a ici.

01:32.960 --> 01:35.870
Et c'est exactement là que nous pouvons transformer cette classe en classe

01:35.870 --> 01:38.860
générique parce que vous pouvez ne pas vous soucier du type de données.

01:38.860 --> 01:40.880
Nous voulons nous assurer que les données sont uniformes,

01:40.880 --> 01:42.410
c'est-à-dire qu'il s'agit soit de chaînes

01:42.410 --> 01:44.830
de caractères, soit de chiffres, soit d'objets.

01:44.830 --> 01:47.550
Mais à part ça, ça ne m'intéresse pas.

01:47.550 --> 01:50.820
Nous pourrions donc la transformer en classe générique,

01:50.820 --> 01:53.300
en ajoutant des crochets après le nom de la classe,

01:53.300 --> 01:56.330
puis T, U, ou tout autre identifiant que vous souhaitez

01:56.330 --> 02:00.110
utiliser, et l'ajouter ici en tant que type générique.

02:00.110 --> 02:01.083
Maintenant, nous

02:01.083 --> 02:04.490
pouvons dire que c'est un tableau de type T, et qu'il

02:04.490 --> 02:07.413
stocke des données de ce type générique.

02:07.413 --> 02:09.670
Par conséquent, nous ajoutons ici de telles

02:09.670 --> 02:12.400
données, et nous essayons de les supprimer ici.

02:12.400 --> 02:15.140
Et donc, ici, nous obtenons correctement des éléments

02:15.140 --> 02:18.490
qui sont inférés pour retourner un tableau de types génériques.

02:18.490 --> 02:20.860
Et maintenant nous pouvons créer différents

02:20.860 --> 02:24.690
stockages, nous pouvons avoir notre sting ou notre textStorage

02:24.690 --> 02:29.500
ici, en appelant new DataStorage, en définissant le type générique à type

02:29.500 --> 02:31.250
string ici.

02:31.250 --> 02:33.070
Puis, ici, dans textStorage, je peux

02:33.070 --> 02:34.340
appeler addItem, et si j'essaie

02:34.340 --> 02:36.410
d'ajouter un nombre, j'obtiens une erreur

02:36.410 --> 02:37.513
parce que je dis que ce

02:37.513 --> 02:40.800
sera un DataStorage qui ne stocke que des stings.

02:40.800 --> 02:45.800
Donc, je peux effectivement stocker Max ici, et peut-être aussi stocker Manu,

02:46.830 --> 02:51.450
et ensuite appeler textStorage. removeItem('Max') et ensuite

02:51.450 --> 02:55.073
console. log. stockage du texte. getItems.

02:56.520 --> 02:58.870
Et tout cela devrait fonctionner si nous sauvegardons

02:58.870 --> 03:00.300
cela parce que c'est un type générique,

03:00.300 --> 03:03.103
et en effet à la fin nous avons juste Manu là-dedans.

03:04.400 --> 03:08.240
Il s'agit donc d'une classe générique simple que nous pouvons créer.

03:08.240 --> 03:10.500
Maintenant, pourquoi construirions-nous une classe aussi générique ?

03:10.500 --> 03:11.770
Eh bien, comme je l'ai dit, parce

03:11.770 --> 03:14.220
que peut-être que nous ne voulons pas seulement stocker

03:14.220 --> 03:17.110
des textes, je pourrais aussi vouloir stocker des chiffres dans

03:17.110 --> 03:18.950
un stockage de données différent.

03:18.950 --> 03:21.510
Je pourrais donc créer un tel DataStorage, et en lui attribuant

03:21.510 --> 03:23.810
la valeur "nombre", je m'assurerais que nous ne pourrons

03:23.810 --> 03:26.250
ajouter que des nombres à ce stockage.

03:26.250 --> 03:28.330
Bien sûr, nous pourrions également mettre en place un stockage

03:28.330 --> 03:30.520
où nous autorisons les deux en utilisant un type d'union.

03:30.520 --> 03:32.550
Ainsi, nous avons une flexibilité

03:32.550 --> 03:36.470
totale, mais nous donnons au type quelques informations supplémentaires,

03:36.470 --> 03:38.490
ce qui en fait une classe à la fois

03:38.490 --> 03:41.450
flexible et fortement typée.

03:41.450 --> 03:43.470
Comme nous l'avions fait avec les fonctions.

03:43.470 --> 03:46.910
Vraiment flexible et toujours un support de type parfait.

03:46.910 --> 03:49.900
C'est l'idée même des types génériques.

03:49.900 --> 03:52.680
Donc, ici, nous pouvons le faire avec la classe DataStorage en stockant

03:52.680 --> 03:53.750
des chaînes de caractères,

03:53.750 --> 03:55.130
ou en stockant des nombres, ou ce

03:55.130 --> 03:56.513
que nous voulons.

03:57.790 --> 04:01.300
Nous aurons cependant un problème avec notre classe dataStorage.

04:01.300 --> 04:04.880
Disons que j'ai ici mon stockage d'objets, maintenant

04:04.880 --> 04:07.090
je peux créer un nouveau DataStorage

04:07.090 --> 04:10.490
et dire que je veux y stocker des objets, d'accord, je

04:10.490 --> 04:12.270
veux stocker des objets et bien

04:12.270 --> 04:17.270
sûr nous pouvons aller au stockage d'objets et ajouter un élément.

04:17.300 --> 04:20.460
Disons qu'un objet que j'ai nommé Max est là.

04:20.460 --> 04:22.920
Stockons aussi un autre objet,

04:22.920 --> 04:24.760
où je stocke Manu.

04:24.760 --> 04:26.770
Ensuite, disons que nous faisons des choses

04:26.770 --> 04:28.310
dans notre code et qu'à un moment

04:28.310 --> 04:29.740
ultérieur ici, je veux supprimer

04:29.740 --> 04:34.100
l'élément, je veux supprimer l'élément avec le nom : 'Manu' ici.

04:34.100 --> 04:37.863
Et puis, je veux consoler. log. objStorage. getItems.

04:39.450 --> 04:40.550
Comme ça.

04:40.550 --> 04:41.883
Si on enregistre ça, on voit

04:42.920 --> 04:45.840
qu'on a un objet là-dedans qui s'appelle Max.

04:45.840 --> 04:47.470
Donc ça a l'air bien.

04:47.470 --> 04:49.140
Maintenant, ce n'est pas vraiment bon.

04:49.140 --> 04:52.490
Disons qu'ici, je veux supprimer Max maintenant, donc maintenant

04:52.490 --> 04:55.740
il devrait rester Manu dans le stockage de données.

04:55.740 --> 04:59.653
Donc, si je recharge, un puits, c'est toujours Max.

05:00.550 --> 05:03.660
Le problème est que nous travaillons ici avec des objets. Comme

05:03.660 --> 05:07.350
vous le savez, les objets en JavaScript sont des types de référence.

05:07.350 --> 05:09.440
Maintenant, attachez-vous à trouver une ressource supplémentaire,

05:09.440 --> 05:11.460
qui vous permet de vous plonger dans la référence.

05:11.460 --> 05:12.730
Alors que les valeurs primitives,

05:12.730 --> 05:14.650
je suppose que vous connaissez la différence

05:14.650 --> 05:16.970
car il s'agit d'un élément central de JavaScript, sans

05:16.970 --> 05:19.060
aucun rapport avec le script de type.

05:19.060 --> 05:20.600
Le problème est que la façon dont

05:20.600 --> 05:22.300
notre classe est construite avec cette

05:22.300 --> 05:26.243
logique sur la façon dont les données sont retirées et identifiées, nous ne faisons

05:27.080 --> 05:29.580
pas vraiment un bon travail lorsque nous travaillons

05:29.580 --> 05:32.200
avec des valeurs non primitives.

05:32.200 --> 05:35.130
Ainsi, lorsque nous travaillons avec des objets ou des tableaux,

05:35.130 --> 05:37.840
parce que indexOf, si nous passons un objet ici, cela ne fonctionnera

05:37.840 --> 05:40.910
pas parce que techniquement c'est un nouvel objet.

05:40.910 --> 05:43.800
Il pourrait ressembler à celui-ci, mais cela ne fonctionne pas

05:43.800 --> 05:46.520
car il s'agit techniquement d'un tout nouvel objet en mémoire

05:46.520 --> 05:48.290
et il a une adresse différente.

05:48.290 --> 05:52.110
Et en effet ici, JavaScript va chercher l'adresse et ne la trouvera

05:52.110 --> 05:54.930
pas, donc ce qu'il fait alors c'est qu'il supprime

05:54.930 --> 05:58.453
le dernier élément du tableau ici, parce qu'à la fin il

05:59.510 --> 06:01.473
renvoie -1.

06:02.419 --> 06:06.070
IndexOf renvoie -1 même s'il ne trouve rien.

06:06.070 --> 06:07.990
Ce qui signifie qu'il commence à la fin du tableau,

06:07.990 --> 06:09.770
c'est le comportement normal de Javascript

06:09.770 --> 06:11.921
et supprime le dernier élément du tableau.

06:11.921 --> 06:14.190
C'est pourquoi ça a marché pour Manu, ça n'a pas

06:14.190 --> 06:16.810
vraiment marché, ça a accidentellement marché, mais

06:16.810 --> 06:19.020
pourquoi ça ne marche pas pour Max, on enlève toujours

06:19.020 --> 06:19.880
le dernier élément

06:19.880 --> 06:21.760
du tableau pour l'instant, puisqu'on

06:21.760 --> 06:23.670
ne peut pas l'identifier.

06:23.670 --> 06:25.890
Maintenant, une façon de contourner

06:25.890 --> 06:29.140
ce problème est de vérifier si nous trouvons notre élément,

06:29.140 --> 06:32.260
donc nous pouvons vérifier si ce code ici, s'il est égal

06:32.260 --> 06:36.260
à -1, ce qui signifie que nous ne l'avons pas trouvé.

06:36.260 --> 06:37.360
Nous pourrons alors revenir

06:37.360 --> 06:40.780
et nous assurer que nous n'avons pas accidentellement retiré le mauvais article.

06:40.780 --> 06:42.900
Mais bien sûr, nous venons de corriger cette barre,

06:42.900 --> 06:44.850
mais nous n'avons toujours pas cet état interne

06:44.850 --> 06:46.580
où cela fonctionnerait avec des objets.

06:46.580 --> 06:48.890
Le seul moyen pour que ça marche avec des objets,

06:48.890 --> 06:51.740
c'est de repasser exactement le même objet.

06:51.740 --> 06:55.700
Donc ici, si j'avais mon objet max stocké dans une constante,

06:55.700 --> 06:58.840
comme ceci, et ici je passe l'objet max.

06:58.840 --> 07:02.050
Et si je fais la même chose ici, alors j'utilise vraiment le même,

07:02.050 --> 07:05.330
l'exact même objet, l'exact même objet en mémoire, et donc, maintenant

07:05.330 --> 07:06.540
ça marcherait.

07:06.540 --> 07:08.930
Ce serait la seule façon de faire fonctionner ce système.

07:08.930 --> 07:12.340
Par conséquent, ici, la meilleure idée serait de s'assurer que

07:12.340 --> 07:16.150
cela ne fonctionne réellement qu'avec des valeurs primitives.

07:16.150 --> 07:20.100
Ainsi, nous pourrions dire que T étend les chaînes de caractères,

07:20.100 --> 07:24.010
les nombres, et peut-être tous les booléens.

07:24.010 --> 07:25.990
Nous pouvons donc dire que le DataStorage

07:25.990 --> 07:27.920
ne doit fonctionner qu'avec ces types.

07:27.920 --> 07:30.470
Les objets ne sont donc plus autorisés.

07:30.470 --> 07:32.500
Cela pourrait être mieux ici, car nous aurions

07:32.500 --> 07:35.220
besoin d'un DataStorage plus spécialisé, qui ne fonctionnerait

07:35.220 --> 07:38.290
alors probablement qu'avec des objets à son tour, et non avec des

07:38.290 --> 07:40.080
valeurs primitives.

07:40.080 --> 07:42.430
Pour affiner notre logique de récupération ici, pour

07:42.430 --> 07:44.800
peut-être vérifier s'il y a des DPI dans l'élément qui

07:44.800 --> 07:45.880
doit être retiré.

07:45.880 --> 07:46.970
De la manière dont cela fonctionne

07:46.970 --> 07:48.910
ici, cela ne fonctionne vraiment que pour les types

07:48.910 --> 07:52.320
primitifs, donc définir une telle contrainte est définitivement une bonne idée.

07:52.320 --> 07:55.610
Et avec cela, si nous l'avons sauvegardé, après l'avoir commenté, cela

07:55.610 --> 07:57.253
fonctionne à nouveau, bien sûr.

07:58.810 --> 08:00.540
Inutile de dire, si tout va bien,

08:00.540 --> 08:02.620
qu'il est possible d'avoir plus d'un

08:02.620 --> 08:04.310
type générique ici aussi.

08:04.310 --> 08:05.910
Vous n'êtes pas limité à un seul type lorsque

08:05.910 --> 08:07.600
vous travaillez avec des classes.

08:07.600 --> 08:09.610
Et vous pouvez également avoir des méthodes,

08:09.610 --> 08:13.080
qui ont leurs propres types génériques au lieu des classes.

08:13.080 --> 08:16.630
Vous pouvez donc introduire de nouveaux types génériques dans les méthodes de la classe,

08:16.630 --> 08:18.010
si vous disposez d'un type générique

08:18.010 --> 08:19.750
qui n'est nécessaire que dans une certaine

08:19.750 --> 08:21.580
méthode, et non dans la classe entière.

08:21.580 --> 08:23.000
Vous êtes donc très flexible.

08:23.000 --> 08:25.570
Vous pouvez utiliser les contraintes

08:25.570 --> 08:28.100
partout et, en général, les types génériques

08:28.100 --> 08:30.240
sont là pour vous faciliter la vie

08:30.240 --> 08:33.900
et vous donner cette combinaison parfaite de flexibilité

08:33.900 --> 08:36.010
totale.

08:36.010 --> 08:39.310
Nous pouvons utiliser ici n'importe quelle valeur primitive

08:39.310 --> 08:40.900
et la sécurité de type, car nous

08:40.900 --> 08:42.820
savons parfaitement ce qui est stocké

08:42.820 --> 08:44.710
dans ce DataStorage et ce qui est stocké

08:44.710 --> 08:46.770
dans ce DataStorage.

08:46.770 --> 08:50.660
Cette combinaison est donc la chose géniale que les types génériques

08:50.660 --> 08:52.283
nous donnent.
