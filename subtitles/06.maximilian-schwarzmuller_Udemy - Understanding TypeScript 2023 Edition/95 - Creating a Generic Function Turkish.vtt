WEBVTT

00:02.190 --> 00:04.480
Kendi jeneriklerimizle başlayalım.

00:04.480 --> 00:06.820
Yorumlanmış kod aşağıda verilmiştir.

00:06.820 --> 00:09.210
Genel bir fonksiyonla başlayacağım.

00:09.210 --> 00:11.430
Genel sınıflar ve fonksiyonlar oluşturabilirsiniz,

00:11.430 --> 00:15.350
her ikisini de göstereceğim ve burada bir fonksiyonla başlayacağım.

00:15.350 --> 00:17.490
Diyelim ki temel olarak iki nesneyi

00:17.490 --> 00:22.490
birleştiren ve yeni bir nesne döndüren bir fonksiyona sahip olmak istiyoruz.

00:23.660 --> 00:25.380
Yani burada buna "birleştirme" adını verebiliriz.

00:25.380 --> 00:28.803
Ve A nesnesini ve B nesnesini girdi olarak almak istiyoruz.

00:30.010 --> 00:33.990
Şimdi elbette bu fonksiyonu belli bir şekilde yazabiliriz.

00:33.990 --> 00:36.660
Bunun nesne türünde olduğunu ve bunun da nesne

00:36.660 --> 00:39.033
türünde olduğunu söyleyebiliriz.

00:39.960 --> 00:41.760
Ve sonra bu fonksiyonun yaptığı

00:41.760 --> 00:45.200
şey, nesne atamasının sonucunu döndürmektir.

00:45.200 --> 00:48.130
A nesnesini ve B nesnesini aldığım yer.

00:48.130 --> 00:50.230
Tabii ki bu nesne atama yöntemi zaten normal

00:50.230 --> 00:53.000
javascript'te yerleşik olarak bulunduğundan.

00:53.000 --> 00:55.820
Gerçekten bir birleştirme işlevine ihtiyacımız olup olmadığını tartışabiliriz,

00:55.820 --> 00:58.140
ancak elbette burada ek iş yapıyor olabilirsiniz.

00:58.140 --> 01:00.480
Bunu ekstra bilgilerle, ekstra seçeneklerle

01:00.480 --> 01:01.833
zenginleştirebilirsiniz

01:01.833 --> 01:04.730
ve sonuçta bu sadece bir demo, sadece bir örnek.

01:04.730 --> 01:07.510
Yani bu geçerli olacaktır, burada birleştirme çağrısı

01:07.510 --> 01:11.830
yapabiliriz ve sonucunu konsolda şu şekilde günlüğe kaydedebiliriz.

01:11.830 --> 01:15.130
Ve sonra bir isim anahtarı olan bir nesne ve bir yaşı

01:15.130 --> 01:17.570
olan ikinci bir nesne iletir ve bunu çalıştırırsak

01:17.570 --> 01:20.010
ve bunu kaydedersek.

01:20.010 --> 01:22.780
Burada tarayıcıda gerçekten de bu çıktıyı alıyoruz.

01:22.780 --> 01:24.280
Böylece bu birleştirme nesnesini elde ederiz.

01:24.280 --> 01:27.050
Şimdi bu çalışıyor, bununla

01:27.050 --> 01:29.660
ilgili sorunumuz, bu birleştirme

01:31.660 --> 01:33.300
adını max ve yaş 30

01:33.300 --> 01:38.097
olarak saklamaya çalışırsak.

01:39.620 --> 01:44.620
Bunu burada saklamaya çalışırsak, sonuçtaki isme erişemem, bu birleştirilmiş

01:45.770 --> 01:50.020
nesne üzerindeki sonuçlardaki yaşa erişemem.

01:50.020 --> 01:52.360
Her ikisinin de var olacağını bilmemize rağmen.

01:52.360 --> 01:54.830
Çünkü dizgi bunu bilmiyor.

01:54.830 --> 01:57.100
Typescript bunu bilemez.

01:57.100 --> 01:59.310
Çünkü ona sadece bir nesne alacağını söylüyoruz

01:59.310 --> 02:02.370
ve sonunda ilk olarak bir nesne döndürdüğümüzü yazıyoruz.

02:02.370 --> 02:04.790
Bu doğru, ancak burada kullanabileceğimiz

02:04.790 --> 02:07.810
tüm bilgileri taşımıyor.

02:07.810 --> 02:09.970
Şimdi elbette her zaman tip dökümü yapabiliriz,

02:09.970 --> 02:12.080
typescript'e geri aldığımız şeyin bir isim anahtarımız

02:12.080 --> 02:14.220
ve bir yaş anahtarımız olan bir nesne olduğunu

02:14.220 --> 02:15.960
söyleyebiliriz.

02:15.960 --> 02:19.020
Ancak bunu yapmak zorunda kalırsak bu gerçekten zahmetli olur.

02:19.020 --> 02:21.420
Yani burada jenerikler bize yardımcı olabilir.

02:21.420 --> 02:23.750
Fonksiyon adından sonra bu köşeli parantezleri

02:23.750 --> 02:26.470
ekleyerek bunu genel bir fonksiyona dönüştürüyoruz.

02:26.470 --> 02:29.740
Ve sonra Q tanımlayıcılarını tanımlarız.

02:29.740 --> 02:33.190
Tipik olarak tip için T ile başlarsınız.

02:33.190 --> 02:35.600
Ancak burada herhangi bir tanımlayıcı kullanabilirsiniz,

02:35.600 --> 02:37.730
tek bir karakter olmak zorunda değildir, ancak

02:37.730 --> 02:39.860
gelenek tek bir karakter kullanmaktır ve tipik

02:39.860 --> 02:42.250
olarak, yalnızca bir genel türünüz varsa, buna T adını

02:42.250 --> 02:43.690
verirsiniz.

02:43.690 --> 02:46.640
Ve sonra diyorsunuz ki, işte bu genel tip, artık bu fonksiyonun

02:46.640 --> 02:48.510
içinde kullanılabilir.

02:48.510 --> 02:51.453
Yani burada elde ettiğimiz şeyin T tipi olduğunu söyleyebiliriz.

02:53.090 --> 02:55.740
Garip görünüyor, endişelenme oraya varacağız.

02:55.740 --> 02:57.280
Şimdi burada tam olarak nasıl görüneceklerini

02:57.280 --> 02:59.570
bilmediğimiz iki argümanımız var.

02:59.570 --> 03:02.450
Bu yüzden burada ikinci bir genel türü kabul edeceğim.

03:02.450 --> 03:04.340
Açılı parantezlerin içine bir virgül

03:04.340 --> 03:07.400
ekleyerek, Ve sonra sadece alfabede devam ediyoruz.

03:07.400 --> 03:10.490
Bu nedenle, bir işlevde kullanabileceğiniz

03:10.490 --> 03:15.490
ikinci genel parametre veya tür tipik olarak U olarak adlandırılır.

03:15.630 --> 03:18.560
Bu yüzden bunun U tipi olduğunu söyleyebiliriz.

03:18.560 --> 03:22.100
Tamam, şimdi bu bize ne kazandıracak?

03:22.100 --> 03:25.450
Aslında çok fazla, sadece bununla gördüğünüz gibi,

03:25.450 --> 03:28.620
merge'in üzerine gelirseniz, typescript bu

03:28.620 --> 03:33.230
fonksiyonun T ve U'nun kesişimini döndürdüğünü çıkarır.

03:33.230 --> 03:36.800
Ve elbette bunu bu şekilde açıkça da ayarlayabilirdik, ancak bunu

03:36.800 --> 03:38.040
yapmamıza bile gerek yok

03:38.040 --> 03:42.010
çünkü nesne ataması bir kesişim döndürür ve bu nedenle nesne atamasının

03:42.010 --> 03:44.150
bir sonucunu döndürdüğümüz için, typescript

03:44.150 --> 03:45.740
otomatik olarak bu işlevin kesişimi

03:45.740 --> 03:48.390
döndürdüğünü anlar.

03:48.390 --> 03:50.320
Peki bu nasıl yardımcı olacak?

03:50.320 --> 03:52.510
Şimdi birleştirilmiş nesnenin üzerine

03:52.510 --> 03:54.260
gelirsek, şimdi bu tek başına

03:54.260 --> 03:56.450
typescript'in birleştirilmiş nesnede

03:56.450 --> 03:59.230
sakladığımız şeyin bu iki nesne türünün kesişimi

03:59.230 --> 04:01.690
olduğunu anladığını görürüz, çünkü bu nesne

04:01.690 --> 04:04.220
türlerinden olan bu nesneleri aktardığımızı

04:04.220 --> 04:06.100
görür.

04:06.100 --> 04:08.840
İsim dizesi ve yaş numarası.

04:08.840 --> 04:11.590
Ve fonksiyonumuz kesişimi döndürür.

04:11.590 --> 04:13.630
Bunu neden daha önce sahip olduğumuz

04:13.630 --> 04:16.313
nesne ile değil de şimdi çıkarabiliyoruz?

04:17.220 --> 04:19.560
Çünkü nesne oldukça spesifik olmayan bir türdür.

04:19.560 --> 04:22.490
Herhangi bir nesne diyoruz ve evet, bu nedenle typescript

04:22.490 --> 04:24.530
nesne ve nesnenin kesişimini döndürdüğümüz

04:24.530 --> 04:26.600
sonucunu çıkarabiliyor.

04:26.600 --> 04:29.570
Ancak iki bilinmeyen nesnenin kesişimi, typescript'e

04:29.570 --> 04:32.270
herhangi bir ek tür bilgisi sunmayan yeni

04:32.270 --> 04:35.420
bir bilinmeyen nesnedir.

04:35.420 --> 04:38.170
Genel tipler ile typescript'e söylediğimiz

04:38.170 --> 04:43.170
şey, bu iki parametrenin farklı tiplerde olabileceği ve genellikle

04:43.282 --> 04:47.100
olacağıdır ve bu nedenle typescript sadece rastgele

04:47.100 --> 04:49.690
bir nesne tipiyle çalışmadığımızı,

04:49.690 --> 04:55.250
burada farklı tipte veriler alacağımızı anlayabilir.

04:55.250 --> 04:56.940
Ve bu fonksiyon genel olarak

04:56.940 --> 04:59.770
bu verilerin kesişimini döndürecektir.

04:59.770 --> 05:01.773
Bu nedenle typescript, burada birleştirilmiş

05:01.773 --> 05:04.390
nesnede sakladığımız şeyin bu iki girdinin verilerinin

05:04.390 --> 05:07.910
kesişmesi olduğunu anlayabilir.

05:07.910 --> 05:09.530
Çünkü artık burada sadece

05:09.530 --> 05:14.423
bilinmeyen bazı nesnelerle değil, çok özel türlerle uğraşıyoruz.

05:15.330 --> 05:20.150
Ve bu nedenle şimdi burada birleştirilmiş nesne yaşını konsol günlüğüne kaydedersem, bu

05:20.150 --> 05:22.980
sizin de söyleyebileceğiniz gibi hatasız çalışır.

05:22.980 --> 05:26.770
Burada jenerik tipler nedeniyle 30 yazdırıyorum.

05:26.770 --> 05:29.040
Typescript'e türlerini tam olarak bilmediğimiz

05:29.040 --> 05:31.950
ekstra bilgiler veriyoruz, burada bunu söyleyebileceğimiz

05:31.950 --> 05:34.780
nesneler olacak.

05:34.780 --> 05:36.550
Ancak bu nesnenin bir isim anahtarına mı, yaş anahtarına

05:36.550 --> 05:38.640
mı, hobiler anahtarına mı sahip olduğunu bilmiyoruz.

05:38.640 --> 05:41.130
Bilmiyoruz ve umurumuzda da değil, buradaki nesnenin

05:41.130 --> 05:43.360
tam olarak ne olduğu umurumuzda değil, bunun şu

05:43.360 --> 05:46.050
türden olması gerektiğini belirtmek istemiyoruz.

05:46.050 --> 05:47.490
Çünkü birdenbire oraya

05:47.490 --> 05:50.520
hobilerimi de eklersem bir sorunumuz olur.

05:50.520 --> 05:52.540
O yüzden bu kadar kısıtlayıcı olmak istemiyorum.

05:52.540 --> 05:54.480
Sadece bunun umurumda olmayan herhangi bir

05:54.480 --> 05:56.940
türden olduğunu söylemek istiyorum ama büyük olasılıkla

05:56.940 --> 05:58.590
buradakinden farklı bir tür.

05:58.590 --> 06:00.860
Ve eğer aynı olacaksa bu da iyi olur.

06:00.860 --> 06:03.030
Ancak typescript, burada bu iki parametre

06:03.030 --> 06:06.530
için belirli türlere sahip olduğumuzu ve bunların kesişimini

06:06.530 --> 06:08.800
döndürdüğümüzü anlar.

06:08.800 --> 06:12.660
Burada belirli olmayan herhangi bir nesneye sahip olmak yerine.

06:12.660 --> 06:14.770
Şimdi özellikle buradaki sihir sadece typescript'e

06:14.770 --> 06:16.210
burada iki farklı tipimiz olduğunu

06:16.210 --> 06:18.410
söylememiz değildir.

06:18.410 --> 06:20.740
Ancak bu türler, bu işlevi tanımladığımızda

06:20.740 --> 06:22.870
sabit olarak belirlenmez, ancak işlevi

06:22.870 --> 06:25.810
çağırdığımızda dinamik olarak belirlenir.

06:25.810 --> 06:27.430
Burada fonksiyonu çağırıyoruz

06:27.430 --> 06:30.560
ve typescript iki argüman için tipleri çıkarıyor.

06:30.560 --> 06:33.890
T için, temel olarak bir dizeyi tutan bir name özelliği

06:33.890 --> 06:36.677
ve bir dizi dizeyi tutan bir hobbies özelliği

06:36.677 --> 06:39.600
olan bir nesne ile bir nesne türünü doldurur.

06:39.600 --> 06:43.290
Ve U için, age'nin sayı türünde olduğu age

06:43.290 --> 06:47.990
özelliğine sahip nesne türünde bir tür doldurur.

06:47.990 --> 06:51.030
Şimdi bu fonksiyonu başka bir satırda tekrar

06:51.030 --> 06:53.890
çağırdığımızda ve farklı nesneler aktardığımızda

06:53.890 --> 06:57.090
ve bunu yeni bir isimle yeni bir sabitte sakladığımda,

06:57.090 --> 06:59.920
elbette bu fonksiyon çağrısı için T ve U için

06:59.920 --> 07:03.130
farklı tipler doldurulur.

07:03.130 --> 07:05.350
Ayrıca typescript'e, çağırdığınız fonksiyonun

07:05.350 --> 07:07.780
adından sonra köşeli parantezler ekleyerek

07:07.780 --> 07:09.110
hangi tipleri doldurması

07:09.110 --> 07:11.320
gerektiğini özellikle söyleyebilir ve ardından

07:11.320 --> 07:15.200
T ve U için kendi tiplerinizi doldurabilirsiniz.

07:15.200 --> 07:18.030
Typecript'e bu fonksiyon çağrısı için T'nin string tipinde olması

07:18.030 --> 07:20.180
gerektiğini ve U'nun da number tipinde olması gerektiğini

07:20.180 --> 07:22.710
söyleyebiliriz, ancak o zaman tabii ki typecript burada

07:22.710 --> 07:23.950
aktardığımız somut değerlerden

07:23.950 --> 07:25.940
şikayet edecektir.

07:25.940 --> 07:28.270
Çünkü bu açıkça bir dize değildir ve eğer

07:28.270 --> 07:30.190
bunu düzeltirsek, bu açıkça sayı

07:30.190 --> 07:32.280
türünde olmayacaktır.

07:32.280 --> 07:34.650
Dolayısıyla, burada çok spesifik olabiliriz

07:34.650 --> 07:38.620
ve diyebiliriz ki, bu fonksiyon çağrısı için ilk argüman veya

07:38.620 --> 07:41.700
T tipi, string tipinde bir name özelliğine ve

07:41.700 --> 07:45.310
string dizisi tipinde bir hobbies özelliğine sahip olduğumuz

07:45.310 --> 07:48.850
bir nesne tipi olacaktır.

07:48.850 --> 07:52.970
Ve bu fonksiyon çağrısı için U'nun somut tipi, sayı tipinde olması

07:52.970 --> 07:55.800
gereken bir yaş özelliğine sahip olduğumuz bir

07:55.800 --> 07:57.320
nesne olacaktır.

07:57.320 --> 08:00.220
Ve şimdi iyi olacaktık ve artık hiçbir hata

08:00.220 --> 08:02.730
olmayacaktı ve bu işe yarayacaktı.

08:02.730 --> 08:05.060
Ancak bu gereksizdir, bunu kesinlikle

08:05.060 --> 08:07.310
yapabilirsiniz ve sonuçta jeneriklerin

08:07.310 --> 08:10.070
farklı işlev çağrıları için farklı somut türleri

08:10.070 --> 08:12.990
doldurabilmenizle ilgili olduğunu anlamak

08:12.990 --> 08:15.170
önemlidir.

08:15.170 --> 08:16.930
Ancak burada bunu yapmamıza gerek

08:16.930 --> 08:20.110
yok çünkü typescript burada argüman olarak aktardığımız değerlerin

08:20.110 --> 08:22.170
türlerini basitçe çıkarır.

08:22.170 --> 08:25.120
Ve sonra bu işlev çağrısı için T ve U için

08:25.120 --> 08:28.240
çıkarılan türleri yerleştirir.

08:28.240 --> 08:31.283
Sonuçta jenerikler perde arkasında bu şekilde çalışır.
