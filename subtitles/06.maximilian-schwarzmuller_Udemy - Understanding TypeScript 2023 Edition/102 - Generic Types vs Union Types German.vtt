WEBVTT

00:02.180 --> 00:04.432
-: Eine häufige Quelle der Verwirrung, die

00:04.432 --> 00:06.300
ich hier klären möchte, ist der Unterschied

00:06.300 --> 00:09.030
zwischen Generics und Union-Typen.

00:09.030 --> 00:11.950
Wie kann man diese beiden Dinge verwechseln?

00:11.950 --> 00:14.440
Nun, zum Beispiel unsere Datenspeicherung hier.

00:14.440 --> 00:16.260
Wenn wir generische Typen akzeptieren,

00:16.260 --> 00:19.240
die auf diesen Typen basieren, könnten wir das auch

00:19.240 --> 00:21.157
so umschreiben, dass wir einfach

00:21.157 --> 00:23.750
sagen: "Nun, wir wollen hier Zeichenketten,

00:23.750 --> 00:27.610
Zahlen oder Boolesche Werte speichern, richtig? Wir könnten das also speichern oder, um genau zu sein, es in Klammern

00:27.610 --> 00:30.470
einschließen, so dass wir jeden dieser Typen

00:30.470 --> 00:32.660
als Array bezeichnen.

00:32.660 --> 00:35.040
Hier könnten wir natürlich auch sagen: "Wenn wir ein Element

00:35.040 --> 00:37.017
hinzufügen, erhalten wir entweder eine Zeichenkette,

00:37.017 --> 00:38.420
eine Zahl oder einen Booleschen Wert,

00:38.420 --> 00:41.120
wenn wir es entfernen, ist es dasselbe.

00:41.120 --> 00:41.120
Wo liegt nun das Problem bei diesem Ansatz?

00:41.120 --> 00:43.007
Auf den ersten Blick mag es so aussehen, als würde es das Gleiche erreichen,

00:44.424 --> 00:45.880
aber in Wirklichkeit bewirkt es etwas völlig anderes.

00:45.880 --> 00:49.630
Was wir hier sagen, ist, dass wir dort jede Art von Daten speichern, solange

00:49.630 --> 00:52.310
es sich entweder um ein Array von Strings, Zahlen

00:52.310 --> 00:53.710
oder Booleschen Werten handelt,

00:53.710 --> 00:55.690
und wir fügen hier auch jede Art von Daten

00:55.690 --> 00:57.220
hinzu, entweder einen String,

00:57.220 --> 00:59.730
eine Zahl oder einen Booleschen Wert, und dasselbe

00:59.730 --> 01:02.930
gilt für das Entfernen.

01:02.930 --> 01:04.670
Jetzt haben wir natürlich schon einige Fehler da unten,

01:04.670 --> 01:06.650
weil ich das nicht mehr generisch initialisieren kann.

01:06.650 --> 01:09.830
Aber ansonsten funktioniert es.

01:09.830 --> 01:12.520
Das Problem ist jedoch, dass wir hier oben nicht

01:12.520 --> 01:14.420
sagen, dass es sich um ein Array von

01:14.420 --> 01:15.890
Strings, ein Array von Zahlen

01:15.890 --> 01:18.260
oder ein Array von Booleans handelt.

01:18.260 --> 01:20.630
Das heißt, wir haben ein Array, das Strings,

01:20.630 --> 01:24.190
Zahlen und Booleans gemischt enthalten kann.

01:24.190 --> 01:26.290
Wenn Sie also entweder ein Array

01:26.290 --> 01:30.190
von Strings oder ein Array von Zahlen sagen wollen, müssen

01:30.190 --> 01:32.100
wir String-Array, Number-Array

01:32.100 --> 01:34.403
oder Boolean-Array sagen.

01:34.403 --> 01:36.020
Nun, das können wir tun, aber jetzt haben wir hier ein Problem.

01:36.020 --> 01:39.100
Jetzt fügen wir eine Zeichenkette, eine Zahl oder einen booleschen

01:39.100 --> 01:41.660
Wert hinzu, aber je nachdem, was wir für dieses Datenarray

01:41.660 --> 01:44.710
festgelegt haben, entweder ein Zahlenarray, ein boolesches

01:44.710 --> 01:46.750
Array oder ein Zeichenfolgenarray, dürfen

01:46.750 --> 01:52.320
wir keine Zahl, keinen booleschen Wert oder keine Zeichenkette hinzufügen.

01:52.320 --> 01:54.140
Wenn wir dies auf ein String-Array festlegen,

01:54.140 --> 01:55.870
können wir hier keine Zahl hinzufügen.

01:55.870 --> 01:57.833
Doch hier bin ich mit jedem Parameter einverstanden, solange es sich

01:57.833 --> 01:59.800
um eine Zahl, einen Booleschen Wert oder eine Zeichenfolge handelt.

01:59.800 --> 02:02.850
Das Problem liegt hier also bei den Unionstypen.

02:02.850 --> 02:05.670
Jedes Mal, wenn diese Methode aufgerufen wird, akzeptieren

02:05.670 --> 02:08.380
wir einen dieser Werte oder diese Methode.

02:08.380 --> 02:11.053
Wir sagen also nicht: "Hey, immer wenn wir mit

02:11.053 --> 02:14.250
dieser Klasse arbeiten, musst du dich für einen Typ entscheiden

02:14.250 --> 02:15.397
und dich daran halten,

02:15.397 --> 02:18.150
sondern wir sagen, wenn du diese Methode aufrufst,

02:18.150 --> 02:21.830
kannst du jeden dieser Typen verwenden.

02:21.830 --> 02:23.440
Das ist genau das, was wir hier nicht wollen.

02:23.440 --> 02:26.150
Wenn ich dies auf das vorherige Setup zurückführe,

02:26.150 --> 02:29.640
bei dem wir generische Typen verwendet haben, dann

02:29.640 --> 02:33.050
haben wir ein anderes Setup.

02:33.050 --> 02:34.810
Hier sagen wir, dass Sie einmal auswählen

02:37.580 --> 02:39.450
müssen, welche Art von Daten Sie speichern

02:39.450 --> 02:42.060
wollen, und dann dürfen Sie nur genau diese Art von

02:42.060 --> 02:43.950
Daten hinzufügen.

02:43.950 --> 02:45.750
Wenn ich hier zum Beispiel eine Zahl hinzufüge,

02:45.750 --> 02:48.523
erhalte ich eine Fehlermeldung, weil das keine Zeichenkette

02:49.710 --> 02:52.623
ist, und es zeigt, dass ich hier nur Zeichenketten verwalten möchte,

02:53.830 --> 02:54.730
wenn ich den generischen

02:54.730 --> 02:56.170
Typ einstelle.

02:56.170 --> 02:57.810
Das ist der Unterschied zwischen Unionstypen und generischen Typen.

02:57.810 --> 03:01.250
Union-Typen können sehr nützlich sein, wenn Sie eine Funktion

03:01.250 --> 03:05.040
haben möchten, die Sie bei jedem Aufruf mit einem dieser Typen

03:05.040 --> 03:06.920
aufrufen können.

03:06.920 --> 03:08.690
Generische Typen sind gut geeignet,

03:08.690 --> 03:11.570
wenn Sie einen bestimmten Typ festlegen wollen.

03:11.570 --> 03:13.460
Verwenden Sie für die gesamte von Ihnen erstellte

03:13.460 --> 03:15.510
Klasseninstanz denselben Typ.

03:15.510 --> 03:18.380
Verwenden Sie für die gesamte Funktion denselben Typ.

03:18.380 --> 03:20.070
Das ist die Stelle, an der Sie den generischen Typ brauchen.

03:20.070 --> 03:23.300
Wenn Sie flexibel sind und bei jedem Methoden- oder Funktionsaufruf

03:23.300 --> 03:25.850
einen anderen Typ verwenden möchten, sollten

03:25.850 --> 03:28.120
Sie Union-Typen verwenden.

03:28.120 --> 03:30.810
Dann können Sie Union-Typen verwenden.

03:30.810 --> 03:33.470
Generische Typen sperren einen Typ ein.
