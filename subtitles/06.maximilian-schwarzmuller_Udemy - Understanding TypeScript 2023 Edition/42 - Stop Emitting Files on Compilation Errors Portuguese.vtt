WEBVTT

00:02.050 --> 00:04.370
Instrutor: Não podemos ignorar módulos isolados,

00:04.370 --> 00:05.880
mas existe uma outra opção,

00:05.880 --> 00:08.000
que na verdade nem sequer é mencionada aqui,

00:08.000 --> 00:10.810
que eu mesmo ainda quero mencionar.

00:10.810 --> 00:14.680
E essa é a opção de não emitir em erro.

00:14.680 --> 00:16.200
Você pode definir isto como

00:16.200 --> 00:18.820
verdadeiro ou falso e o padrão é falso.

00:18.820 --> 00:19.653
O que isso faz agora?

00:19.653 --> 00:21.330
Se o colocarmos em erro, deixe-me mostrar-lhe

00:21.330 --> 00:23.050
onde isto pode ser um problema.

00:23.050 --> 00:26.530
É um problema se introduzirmos um erro ou pode ser

00:26.530 --> 00:27.590
um problema.

00:27.590 --> 00:30.690
Digamos aqui, eu tenho meu botão e removo este

00:30.690 --> 00:32.410
ponto de exclamação.

00:32.410 --> 00:34.750
Agora, apesar de não compreendermos completamente

00:34.750 --> 00:38.030
o que está acontecendo aqui é simplesmente que o TypeScript não

00:38.030 --> 00:40.610
sabe que certamente temos um botão aqui.

00:40.610 --> 00:42.790
Afinal de contas, ao procurar por um botão, podemos

00:42.790 --> 00:45.990
não conseguir um se não houver nenhum elemento nos DOMs que satisfaça

00:45.990 --> 00:47.540
este seletor, então isto retornará

00:47.540 --> 00:48.800
agora.

00:48.800 --> 00:50.910
E é basicamente disso que o TypeScript reclama.

00:50.910 --> 00:54.849
Aqui temos acesso a algo sobre um objeto nulo em

00:54.849 --> 00:57.200
potencial e isso não é bom.

00:57.200 --> 00:59.300
Este é um erro que temos aqui.

00:59.300 --> 01:02.120
Se compilarmos nosso código, também

01:02.120 --> 01:04.770
obtemos este erro aqui no console.

01:04.770 --> 01:08.210
No entanto, o arquivo é criado.

01:08.210 --> 01:11.660
Portanto, mesmo que eu apague o aplicativo. jsfile será recriado.

01:11.660 --> 01:13.910
Portanto, mesmo que tenhamos um erro, o

01:13.910 --> 01:16.300
TypeScript cria um arquivo JavaScript.

01:16.300 --> 01:18.740
Isto pode ou não ser desejado.

01:18.740 --> 01:21.360
Talvez você tenha um erro em seu arquivo TypeScript e não

01:21.360 --> 01:22.980
saiba realmente como contorná-lo,

01:22.980 --> 01:26.000
mas você sabe que isso não será um problema na aplicação final.

01:26.000 --> 01:29.410
Como aqui, mesmo que não saibamos sobre o ponto de exclamação.

01:29.410 --> 01:31.577
Bem, se não soubermos sobre o ponto de

01:31.577 --> 01:35.900
exclamação, podemos não saber como desativar este erro, basicamente.

01:35.900 --> 01:39.630
Mas ainda sabemos que isto funcionará em nossa página aqui.

01:39.630 --> 01:41.890
Portanto, podemos estar bem em compilar

01:41.890 --> 01:43.630
isto apesar de termos um erro.

01:43.630 --> 01:45.570
Mas, é claro, na realidade, você deve

01:45.570 --> 01:48.850
visar projetos livres de erros e, ao invés de ignorá-los, aprender

01:48.850 --> 01:51.720
como trabalhar em torno desta questão.

01:51.720 --> 01:54.590
No entanto, você pode definir isto como falso

01:54.590 --> 01:57.590
ou não definir nada, porque falso é o padrão,

01:57.590 --> 02:00.687
se você estiver bem em gerar arquivos JavaScript

02:00.687 --> 02:02.590
se você tiver um erro.

02:02.590 --> 02:04.240
No entanto, se isto for definido

02:04.240 --> 02:07.700
como verdadeiro, o que acontecerá é que os arquivos problemáticos

02:07.700 --> 02:09.100
não serão gerados.

02:09.100 --> 02:10.910
Se eu agora reanuncio isto...

02:12.440 --> 02:15.110
Na verdade, nada é gerado.

02:15.110 --> 02:18.180
Até mesmo os analíticos. ts não é emitido

02:18.180 --> 02:21.440
lá se tivermos algum conteúdo

02:21.440 --> 02:26.440
além do console. log, você vê que ele não está sendo gerado.

02:26.550 --> 02:27.560
E a razão para isso

02:27.560 --> 02:29.600
é que temos um erro no arquivo.

02:29.600 --> 02:32.940
E se algum arquivo falhar na compilação, nenhum arquivo

02:32.940 --> 02:34.300
será omitido.

02:34.300 --> 02:35.810
Portanto, aqui, portanto, temos que nos

02:35.810 --> 02:38.850
certificar de corrigir este erro antes de conseguirmos obter o TypeScript

02:38.850 --> 02:40.890
para compilar novamente os arquivos para nós.

02:40.890 --> 02:43.530
E, portanto, é uma opção que eu normalmente gosto de

02:43.530 --> 02:46.830
definir porque não estou interessado em obter arquivos JavaScript

02:46.830 --> 02:49.703
se ainda tiver erros em meus arquivos TypeScript.
