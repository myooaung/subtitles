WEBVTT

00:02.180 --> 00:04.432
-: Een veel voorkomende bron van verwarring,

00:04.432 --> 00:06.300
die ik hier wil verduidelijken, is

00:06.300 --> 00:09.030
het verschil tussen Generics en Union types.

00:09.030 --> 00:11.950
Waarom zou je die twee door elkaar halen?

00:11.950 --> 00:14.440
Nou, bijvoorbeeld onze gegevensopslag hier.

00:14.440 --> 00:16.260
Als we Generieke types accepteren

00:16.260 --> 00:19.240
op basis van deze types, zouden we dat ook kunnen

00:19.240 --> 00:21.157
herschrijven om gewoon te zeggen,

00:21.157 --> 00:23.750
"Nou, we willen hier strings, of getallen,

00:23.750 --> 00:27.610
of Booleans opslaan, toch? Dus, we kunnen dat opslaan of om precies te zijn, dit tussen

00:27.610 --> 00:30.470
haakjes zetten zodat we zeggen een van deze

00:30.470 --> 00:32.660
types als een array.

00:32.660 --> 00:35.040
Dan kunnen we hier natuurlijk ook zeggen, "Nou, wat

00:35.040 --> 00:37.017
we hier krijgen als we een item toevoegen is

00:37.017 --> 00:38.420
ofwel een string, een getal, of

00:38.420 --> 00:39.740
een Boolean, als we het verwijderen

00:39.740 --> 00:41.120
is het hetzelfde. Wat is het probleem met deze aanpak?

00:41.120 --> 00:43.007
Op het eerste gezicht lijkt het misschien alsof het hetzelfde bereikt,

00:44.424 --> 00:45.880
maar in feite doet het iets totaal anders.

00:45.880 --> 00:49.630
Wat we hier zeggen is dat we elke soort gegevens opslaan

00:49.630 --> 00:52.310
zolang het een array is van strings, nummers

00:52.310 --> 00:53.710
of Booleans, en we voegen

00:53.710 --> 00:55.690
hier ook elke soort gegevens

00:55.690 --> 00:57.220
toe, hetzij een string,

00:57.220 --> 00:59.730
nummer of Boolean, en hetzelfde geldt

00:59.730 --> 01:02.930
voor het verwijderen.

01:02.930 --> 01:04.670
Nu hebben we natuurlijk al wat fouten daar beneden,

01:04.670 --> 01:06.650
omdat ik dit niet meer generiek kan initialiseren.

01:06.650 --> 01:09.830
Maar verder werkt het.

01:09.830 --> 01:12.520
Het probleem is echter dat we niet zeggen

01:12.520 --> 01:14.420
dat dit een array van strings

01:14.420 --> 01:15.890
is, of een array van getallen,

01:15.890 --> 01:18.260
of een array van Booleans.

01:18.260 --> 01:20.630
Dit zegt dat we een array hebben die

01:20.630 --> 01:24.190
strings, getallen en Booleans kan bevatten.

01:24.190 --> 01:26.290
Dus als je wilt zeggen een matrix

01:26.290 --> 01:30.190
van tekenreeksen, of een matrix van getallen, moeten we

01:30.190 --> 01:32.100
zeggen string matrix, getal

01:32.100 --> 01:34.403
matrix, of Boolean matrix.

01:34.403 --> 01:36.020
Dat kunnen we doen, maar nu hebben we een probleem.

01:36.020 --> 01:39.100
Nu voegen we een string, een getal of een Boolean

01:39.100 --> 01:41.660
toe, maar afhankelijk van wat we in deze

01:41.660 --> 01:44.710
gegevensarray hebben ingesteld, een getallenarray,

01:44.710 --> 01:46.750
een Boolean array of een string

01:46.750 --> 01:52.320
array, mogen we geen getal, Boolean of string toevoegen.

01:52.320 --> 01:54.140
Als we dit instellen als een string array dan

01:54.140 --> 01:55.870
kunnen we hier geen nummer toevoegen.

01:55.870 --> 01:57.833
Toch kan ik hier met elke parameter uit de voeten, zolang

01:57.833 --> 01:59.800
het maar een getal, een Boolean of een string is.

01:59.800 --> 02:02.850
Dus, het probleem is hier met Union types.

02:02.850 --> 02:05.670
Telkens wanneer deze methode wordt aangeroepen,

02:05.670 --> 02:08.380
accepteren we een van deze waarden.

02:08.380 --> 02:11.053
We zeggen dus niet: "Hé, wanneer we met deze

02:11.053 --> 02:14.250
klasse werken, moet je één type kiezen en je daaraan

02:14.250 --> 02:15.397
houden, maar we zeggen:

02:15.397 --> 02:18.150
wanneer je deze methode aanroept, ben je

02:18.150 --> 02:21.830
vrij om elk van deze types te gebruiken.

02:21.830 --> 02:23.440
Dat is precies niet wat we hier willen.

02:23.440 --> 02:26.150
Als ik dit terugbreng naar de vorige

02:26.150 --> 02:29.640
opzet waarbij we generieke types gebruikten,

02:29.640 --> 02:33.050
krijgen we een andere opzet.

02:33.050 --> 02:34.810
Hier zeggen we dat je één keer moet

02:37.580 --> 02:39.450
kiezen welk soort gegevens je wilt

02:39.450 --> 02:42.060
opslaan en dan mag je alleen dat exacte type

02:42.060 --> 02:43.950
gegevens toevoegen.

02:43.950 --> 02:45.750
Dus als ik hier bijvoorbeeld een getal

02:45.750 --> 02:48.523
toevoeg, krijg ik een foutmelding omdat dat geen string

02:49.710 --> 02:52.623
is en het laat zien dat ik hier alleen strings wil beheren

02:53.830 --> 02:54.730
als ik het generieke

02:54.730 --> 02:56.170
type instel.

02:56.170 --> 02:57.810
Dat is het verschil tussen union-types en generieke types.

02:57.810 --> 03:01.250
Union-types kunnen geweldig zijn als je een functie

03:01.250 --> 03:05.040
wilt hebben die je elke keer dat je hem aanroept met zo'n

03:05.040 --> 03:06.920
type kunt aanroepen.

03:06.920 --> 03:08.690
Generieke types zijn geweldig

03:08.690 --> 03:11.570
als je een bepaald type wilt vastleggen.

03:11.570 --> 03:13.460
Gebruik hetzelfde type in de hele

03:13.460 --> 03:15.510
klasse-instantie die je maakt.

03:15.510 --> 03:18.380
Gebruik hetzelfde type in de hele functie.

03:18.380 --> 03:20.070
Daar wil je het generieke type.

03:20.070 --> 03:23.300
Je wilt union-types als je flexibel bent om bij elke

03:23.300 --> 03:25.850
methode-aanroep, bij elke functie-aanroep

03:25.850 --> 03:28.120
een ander type te hebben.

03:28.120 --> 03:30.810
Dan kun je union types gebruiken.

03:30.810 --> 03:33.470
Generieke types vergrendelen een type.
