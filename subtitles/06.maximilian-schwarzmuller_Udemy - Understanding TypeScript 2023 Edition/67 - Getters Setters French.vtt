WEBVTT

00:02.200 --> 00:04.920
Intervenant : Voilà donc les classes, les propriétés

00:04.920 --> 00:07.510
et l'héritage avec Typescript.

00:07.510 --> 00:08.343
Et comme je l'ai

00:08.343 --> 00:10.260
mentionné, ces caractéristiques,

00:10.260 --> 00:12.490
bien qu'elles soient généralement prises

00:12.490 --> 00:14.230
en charge en JavaScript, en JavaScript

00:14.230 --> 00:16.940
moderne, bien sûr à l'exception des affectations

00:16.940 --> 00:21.060
de type, et aussi à l'exception de protected private public.

00:21.060 --> 00:24.770
Ces mots-clés ne sont réellement disponibles que dans Typescript.

00:24.770 --> 00:28.560
Mais ce n'est pas tout ce que vous pouvez faire avec les classes.

00:28.560 --> 00:29.940
Chaque fois que vous avez besoin

00:29.940 --> 00:32.840
d'une fonctionnalité, que vous avez également dans le JavaScript

00:32.840 --> 00:35.670
classique, et qui est également prise en charge dans Typescript,

00:35.670 --> 00:38.610
ce sont les getters et setters.

00:38.610 --> 00:42.050
Maintenant, voyons qu'ici sur le département de la comptabilité

00:42.050 --> 00:43.390
par exemple, disons que

00:43.390 --> 00:47.450
nous avons un dernier rapport, la propriété.

00:47.450 --> 00:51.630
qui est une propriété privée, et c'est un type de chaîne,

00:51.630 --> 00:53.310
donc nous avons cela.

00:53.310 --> 00:56.480
Et puis ici nous initialisons ceci, pour être

00:56.480 --> 01:01.480
notre argument de commandes de propriété de rapports que nous obtenons

01:02.270 --> 01:04.880
ici et ils sont la première valeur.

01:04.880 --> 01:07.877
Ce qui, bien sûr, est fondamentalement indéfini si nous

01:07.877 --> 01:09.890
passons un tableau de rapports vide.

01:09.890 --> 01:14.680
Maintenant, quand nous ajoutons un rapport, alors je veux mettre ce

01:14.680 --> 01:17.010
dernier rapport, égal au texte.

01:17.010 --> 01:20.440
C'est ce que nous ajoutons à notre tableau de rapports.

01:20.440 --> 01:23.890
Maintenant, le dernier rapport est privé, donc nous pouvons y accéder

01:23.890 --> 01:26.250
depuis l'intérieur de cette méthode, mais nous

01:26.250 --> 01:28.590
ne pourrons pas y accéder depuis l'extérieur

01:28.590 --> 01:30.240
avec la notation du point.

01:30.240 --> 01:33.440
Maintenant nous pouvons ajouter un getter, pour le rendre encore accessible.

01:33.440 --> 01:36.020
Un getter est essentiellement une propriété, où

01:36.020 --> 01:38.670
vous exécutez une fonction ou une méthode, lorsque

01:38.670 --> 01:40.910
vous récupérez une valeur et cela vous permet

01:40.910 --> 01:42.380
en tant que développeur d'ajouter

01:42.380 --> 01:44.460
une logique plus complexe.

01:44.460 --> 01:47.560
Ici, vous créez un getter en utilisant le mot clé get,

01:47.560 --> 01:49.250
puis le nom de votre choix.

01:49.250 --> 01:51.810
Généralement, ils sont étroitement liés à la propriété

01:51.810 --> 01:54.180
dont vous essayez de contrôler l'accès.

01:54.180 --> 01:58.180
Par exemple, nous pourrions l'appeler le rapport le plus récent.

01:58.180 --> 01:59.340
Quelque chose comme ça.

01:59.340 --> 02:01.630
Maintenant, il est important que cela soit défini comme une méthode.

02:01.630 --> 02:04.260
Vous ajoutez donc des parenthèses, puis des accolades.

02:04.260 --> 02:07.250
Et maintenant ici, vous devez retourner quelque

02:07.250 --> 02:11.990
chose, c'est important une méthode getter, doit retourner quelque chose.

02:11.990 --> 02:14.610
Vous pouvez donc renvoyer ce dernier rapport,

02:14.610 --> 02:16.660
puis nous l'encapsulons en quelque sorte,

02:16.660 --> 02:19.570
car il est désormais accessible au public.

02:19.570 --> 02:22.720
Mais souvent, vous voulez avoir une logique plus complexe ici.

02:22.720 --> 02:26.240
Donc ici nous pourrions vérifier si nous avons une valeur ici,

02:26.240 --> 02:27.600
donc si c'est la vérité.

02:27.600 --> 02:28.960
Si ce n'est pas indéfini,

02:28.960 --> 02:31.520
alors nous voulons renvoyer le dernier rapport,

02:31.520 --> 02:34.440
sinon nous pourrions vouloir renvoyer une logique

02:34.440 --> 02:37.850
différente, par exemple disons que sinon nous lançons

02:37.850 --> 02:42.650
un message d'erreur avec throw new error, no reports found.

02:42.650 --> 02:46.650
Nous avons donc ajouté une logique plus complexe à cette propriété et

02:46.650 --> 02:49.200
lorsque nous voulons la récupérer, nous ne pouvons

02:49.200 --> 02:51.500
pas le faire directement par la notation

02:51.500 --> 02:55.290
du point, mais nous pouvons l'utiliser comme une propriété à la fin

02:55.290 --> 02:57.240
de cette logique.

02:57.240 --> 02:58.810
Alors, comment cela fonctionnerait-il ?

02:58.810 --> 03:02.170
Eh bien en bas, là où je crée mon département de comptabilité.

03:02.170 --> 03:08.693
Avant d'ajouter mon rapport, si j'essaie d'ouvrir le journal de la console, la comptabilité.

03:08.693 --> 03:08.693
le

03:09.630 --> 03:11.010
plus récent rapport, et maintenant important.

03:11.010 --> 03:13.902
Oups, la comptabilité. le plus récent rapport.

03:13.902 --> 03:16.890
Et maintenant, il est important que vous y accédiez comme à une propriété.

03:16.890 --> 03:18.690
Donc pas de parenthèse ici.

03:18.690 --> 03:20.570
On ne l'exécute pas comme une méthode.

03:20.570 --> 03:23.030
Il suffit d'y accéder comme à une propriété

03:23.030 --> 03:24.460
normale et, en coulisse,

03:24.460 --> 03:27.890
cette méthode sera exécutée.

03:27.890 --> 03:31.670
Donc, si j'essaie maintenant avant d'ajouter notre rapport, nous verrons

03:31.670 --> 03:33.940
que cela a été reconstruit sans erreurs,

03:33.940 --> 03:35.440
recompilé sans erreurs, mais

03:35.440 --> 03:38.550
bien sûr ici une erreur est jetée, c'est notre erreur personnalisée

03:38.550 --> 03:40.820
no report found, parce qu'aucun rapport

03:40.820 --> 03:42.820
n'a été ajouté encore, et depuis l'utilisation

03:42.820 --> 03:45.370
de ceci comme un getter, accède à cette méthode

03:45.370 --> 03:48.310
et l'exécute.

03:48.310 --> 03:51.560
Si nous n'avons pas de rapport, nous n'arrivons pas à ce contrôle

03:51.560 --> 03:52.830
IF, ou à cette déclaration

03:52.830 --> 03:55.693
IF, et donc cette ligne ici, entre en jeu.

03:56.590 --> 04:00.250
Comme alternative, si nous déplaçons cela vers le bas, après avoir ajouté

04:00.250 --> 04:02.210
un rapport, alors bien sûr nous pouvons

04:02.210 --> 04:04.100
sauvegarder cela, et nous n'obtenons

04:04.100 --> 04:05.730
plus d'erreur, mais au lieu de cela

04:05.730 --> 04:08.400
nous sortons ce dernier rapport.

04:08.400 --> 04:09.750
Donc, c'est un "getter".

04:09.750 --> 04:12.190
Et vous pouvez également ajouter un setter.

04:12.190 --> 04:14.550
Un setter est ajouté presque de la même manière.

04:14.550 --> 04:16.290
Vous utilisez le mot-clé défini,

04:16.290 --> 04:18.630
puis à nouveau le nom de votre choix.

04:18.630 --> 04:21.940
généralement un nom lié à la propriété qui doit être

04:21.940 --> 04:22.870
définie.

04:22.870 --> 04:25.570
Je vais donc réutiliser ici le rapport le plus récent.

04:25.570 --> 04:27.840
Ainsi, nous pouvons l'utiliser à la fois pour lire une valeur

04:27.840 --> 04:29.150
et pour définir une valeur.

04:29.150 --> 04:30.090
Et encore, vous avez

04:30.090 --> 04:31.850
défini cela comme une méthode.

04:31.850 --> 04:34.850
Mais maintenant, cela doit prendre un argument.

04:34.850 --> 04:38.630
La valeur que l'utilisateur aurait introduite.

04:38.630 --> 04:40.940
Ici, il devrait y avoir une valeur de chaîne, et

04:40.940 --> 04:44.110
maintenant ici, vous pouvez exécuter n'importe quelle logique

04:44.110 --> 04:46.160
que vous voulez pour stocker ceci.

04:46.160 --> 04:48.530
Maintenant, puisque nous avons transmis une valeur

04:48.530 --> 04:51.890
pour le rapport le plus récent, je veux finalement exécuter le rapport

04:51.890 --> 04:53.080
d'ajout.

04:53.080 --> 04:55.370
Ainsi, ici, un setter pourrait simplement être une

04:55.370 --> 04:57.140
alternative à la méthode add report.

04:57.140 --> 05:01.280
Donc ici, nous pouvons accéder à ce rapport d'ajout.

05:01.280 --> 05:03.760
Ceci est nécessaire puisque nous sommes à l'intérieur de la classe.

05:03.760 --> 05:07.280
Nous faisons référence à la classe, puis à cette méthode de classe ici.

05:07.280 --> 05:10.380
Et maintenant nous pouvons juste faire suivre la valeur ici.

05:10.380 --> 05:12.310
Maintenant, nous pourrions ajouter une

05:12.310 --> 05:16.130
logique plus complexe, et également vérifier si la valeur n'est peut-être

05:16.130 --> 05:19.810
pas définie, si elle est fausse, et ensuite juste retourner ou lancer une

05:19.810 --> 05:24.020
nouvelle erreur, où nous disons s'il vous plaît passer dans une valeur valide.

05:24.020 --> 05:26.140
C'est quelque chose que nous pourrions également faire.

05:26.140 --> 05:29.010
Et maintenant, nous utilisons un setter ici aussi.

05:29.010 --> 05:31.330
Avec cet ajout, nous pouvons le tester.

05:31.330 --> 05:33.193
En bas, je pourrais ajouter le rapport

05:35.400 --> 05:36.570
le plus récent.

05:36.570 --> 05:38.780
Je pourrais y accéder par le biais de la comptabilité

05:38.780 --> 05:40.770
et, de la même manière, nous pourrions le lire,

05:40.770 --> 05:42.300
mais maintenant, en ajoutant un signe

05:42.300 --> 05:44.520
égal, nous essayons de lui attribuer une valeur,

05:44.520 --> 05:47.150
ce qui déclenchera cette méthode setter.

05:47.150 --> 05:50.090
Encore une fois, juste avant, nous ne l'exécutons pas comme une méthode,

05:50.090 --> 05:52.383
mais nous y accédons simplement comme une propriété.

05:53.220 --> 05:56.030
Maintenant, si je passe dans une chaîne vide,

05:56.030 --> 05:58.770
alors techniquement nous passons dans une chaîne,

05:58.770 --> 06:02.760
mais une chaîne vide sera traitée comme fausse, voir ici.

06:02.760 --> 06:04.950
Et donc, nous devrions maintenant obtenir une erreur.

06:04.950 --> 06:07.450
Donc, si je sauvegarde cette ligne de code, si je

06:07.450 --> 06:09.850
sauvegarde le code avec cette ligne de code ajoutée,

06:11.120 --> 06:14.530
nous obtenons cette erreur please pass in a valid value.

06:14.530 --> 06:17.010
Cependant, si je passe une valeur valide,

06:17.010 --> 06:22.010
si je dis "rapport de fin d'année" ici par exemple, et que j'enregistre maintenant

06:22.250 --> 06:23.900
ceci.

06:23.900 --> 06:27.210
Maintenant vous verrez que tout cela fonctionne et que le rapport de fin

06:27.210 --> 06:29.620
d'année fait partie de notre liste de rapports.

06:29.620 --> 06:31.150
Il s'agit donc de getters et setters,

06:31.150 --> 06:33.620
qui peuvent être très utiles pour encapsuler la logique, et

06:33.620 --> 06:35.390
pour ajouter une logique supplémentaire,

06:35.390 --> 06:38.050
qui doit s'exécuter lorsque vous essayez de lire une propriété,

06:38.050 --> 06:40.243
ou lorsque vous essayez de définir une propriété.
