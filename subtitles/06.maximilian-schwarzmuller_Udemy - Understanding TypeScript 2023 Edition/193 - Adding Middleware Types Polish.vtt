WEBVTT

00:02.210 --> 00:04.200
Instruktor: Mamy więc ten podstawowy dummy

00:04.200 --> 00:05.490
serwer uruchomiony i działający,

00:05.490 --> 00:08.380
ale ten serwer nie robi oczywiście nic pożytecznego.

00:08.380 --> 00:11.430
Teraz powiedziałem, że chcę zbudować bardzo prosty rest

00:11.430 --> 00:13.110
API, a w tym celu faktycznie stworzę

00:13.110 --> 00:15.570
nowy podfolder w folderze źródłowym, który

00:15.570 --> 00:16.830
nazwę routes.

00:16.830 --> 00:19.870
W nim dodam plik, który powinien obsługiwać pewien

00:19.870 --> 00:22.540
zestaw tras tego rest API, a teraz od Ciebie

00:22.540 --> 00:25.710
zależy, jakie API chcesz zbudować.

00:25.710 --> 00:28.520
Zbuduję tutaj API todo, jeśli wziąłeś sekcję React

00:28.520 --> 00:30.770
in TypeScript, to brzmi to dla Ciebie znajomo,

00:30.770 --> 00:32.140
ponieważ tam również zbudowaliśmy

00:32.140 --> 00:34.530
aplikację todo, to jest jednak całkowicie

00:34.530 --> 00:36.820
oderwane od tej sekcji, nie będzie działać

00:36.820 --> 00:38.710
razem z Reactem, oczywiście mógłbyś

00:38.710 --> 00:41.250
go podłączyć choć na własną rękę, ale tutaj zbuduję

00:41.250 --> 00:43.870
takie proste API todo po prostu po to, abyśmy zobaczyli

00:43.870 --> 00:48.350
jak TypeScript działa z Node i Express.

00:48.350 --> 00:51.400
Aplikacja, którą budujemy nie jest zbyt skomplikowana,

00:51.400 --> 00:54.760
ale będzie zawierała wiele ciekawych koncepcji.

00:54.760 --> 00:57.080
Więc tutaj dodamy moje trasy

00:57.080 --> 01:01.800
todo, dodając todos. ts plik w folderze routes, a w nim teraz

01:01.800 --> 01:04.570
chcę użyć Express. js, aby zarejestrować

01:04.570 --> 01:06.630
niektóre trasy.

01:06.630 --> 01:09.730
W tym celu zaimportuję coś z Expressu,

01:09.730 --> 01:13.700
a tym czymś jest teraz właściwie router.

01:13.700 --> 01:16.160
Teraz wspólna składnia JS dla tego typowo

01:16.160 --> 01:20.950
jest to, że importujesz Express używając require express, a następnie

01:20.950 --> 01:23.550
w nowej linii, często widzisz kod, w którym

01:23.550 --> 01:25.673
robimy to tutaj.

01:27.090 --> 01:28.180
Teraz to jest coś, co możesz zrobić,

01:28.180 --> 01:30.130
ale tutaj po prostu zaimportuję to w ten sposób.

01:31.130 --> 01:34.120
Teraz to daje nam router, i możemy po prostu wywołać Router

01:34.120 --> 01:36.750
tutaj jako funkcję, i to pozwala nam zarejestrować

01:36.750 --> 01:39.300
middleware, więc w końcu, trasy punktów końcowych

01:39.300 --> 01:41.980
dla przychodzących żądań, gdzie następnie wykonujemy

01:41.980 --> 01:45.540
jakąś logikę na tych żądaniach.

01:45.540 --> 01:48.980
Teraz dla aplikacji todo, chcę zarejestrować kilka podstawowych

01:48.980 --> 01:53.700
tras, trasę post na slash nothing, gdzie możemy dodać nowe todo, więc tutaj będziemy

01:53.700 --> 01:55.760
potrzebować jakiegoś kodu, jakiejś

01:55.760 --> 01:58.860
funkcji, która następnie doda todo gdzieś, na razie nie

01:58.860 --> 02:01.250
będę podawał żadnego kodu, po prostu skonfiguruj

02:01.250 --> 02:03.380
trasę w ogóle tutaj.

02:03.380 --> 02:05.110
Mamy więc żądanie postu,

02:05.110 --> 02:08.770
następnie żądanie get, get all todos powiedzmy, następnie

02:08.770 --> 02:12.900
również powiedzmy patch żądanie aktualizacji todo, a tam

02:12.900 --> 02:15.520
spodziewam się uzyskać id, dynamiczny

02:15.520 --> 02:19.280
segment w adresie URL, a następnie tutaj również żądanie

02:19.280 --> 02:22.700
usunięcia todo przez id.

02:22.700 --> 02:25.720
To są moje trasy, a teraz możemy wyeksportować skonfigurowany

02:25.720 --> 02:28.620
router jako domyślny w tym pliku.

02:28.620 --> 02:30.930
Teraz na tych trasach nic się nie stanie, prawda?

02:30.930 --> 02:32.510
Nie ustawiłem jeszcze żadnej

02:32.510 --> 02:35.830
funkcji, która wykonywałaby się, gdy żądanie dotrze do tych punktów

02:35.830 --> 02:38.620
końcowych, ale przynajmniej teraz wiemy, które trasy

02:38.620 --> 02:41.740
chcemy, dodamy funkcje w drugim kroku później.

02:41.740 --> 02:44.100
Na razie po prostu podłączmy router tutaj, skonfigurowane trasy

02:44.100 --> 02:48.320
do naszego działającego serwera tutaj w aplikacji. ts, i aby to zrobić, po

02:48.320 --> 02:53.211
prostu importujemy nasze, powiedzmy, todoRoutes

02:53.211 --> 02:54.290
z . /routy/todos.

02:56.040 --> 02:58.910
Czyli importujemy ten wyeksportowany router

02:58.910 --> 03:01.610
w todos do app. ts, a teraz tutaj musimy

03:01.610 --> 03:03.390
połączyć go z naszą działającą

03:03.390 --> 03:08.340
aplikacją Express za pomocą app. użyć, a następnie powiedzmy, że chcemy

03:08.340 --> 03:10.800
przekazać wszystkie żądania, które

03:10.800 --> 03:14.600
zaczynają się od /todos do naszego todoRoutes, więc żądania

03:14.600 --> 03:17.210
skierowane na inny adres URL nie będą tam

03:17.210 --> 03:18.703
obsługiwane.

03:19.920 --> 03:23.730
Mówiąc o obsłudze, w konfiguracji Express middleware, którego używamy, możemy również

03:23.730 --> 03:25.983
ustawić middleware, który będzie obsługiwał błędy,

03:25.983 --> 03:29.030
więc wszelkie błędy, które mogą zostać rzucone gdziekolwiek w naszym

03:29.030 --> 03:33.610
kodzie, i robimy to za pomocą app.

03:33.610 --> 03:33.610
użycie,

03:33.610 --> 03:37.470
a następnie ustawiamy tutaj taką typową funkcję middleware, gdzie dostajemy żądanie,

03:37.470 --> 03:40.640
odpowiedź i następną funkcję, i znowu to wszystko wymaga od ciebie

03:40.640 --> 03:45.430
znajomości jakiegoś Expressu. js oraz znać

03:45.430 --> 03:48.330
Node. js, nie będę nurkował dokładnie

03:48.330 --> 03:51.160
w to, jak działa middleware w Expressie i czym

03:51.160 --> 03:52.970
jest middleware.

03:52.970 --> 03:54.960
Więc to jest zwykła funkcja middleware tutaj, jak powinieneś

03:54.960 --> 03:57.150
znać to z Express. js, i pewnie wiesz

03:57.150 --> 03:59.050
też, że istnieje alternatywa

03:59.050 --> 04:02.310
dla tej funkcji, funkcja, która przyjmuje cztery parametry,

04:02.310 --> 04:04.680
gdzie pierwszym parametrem jest potencjalny

04:04.680 --> 04:07.350
błąd, a teraz jest to funkcja middleware'u

04:07.350 --> 04:10.720
obsługującego błędy, która zostanie odpalona automatycznie

04:10.720 --> 04:15.290
przez Express, jeśli w jakimkolwiek innym middleware'ie poprzedzającym

04:15.290 --> 04:18.750
ten masz błąd.

04:18.750 --> 04:21.200
Więc to jest moja funkcja middleware obsługi błędów

04:21.200 --> 04:23.380
i widzisz, że mamy tutaj garść błędów.

04:23.380 --> 04:26.260
Garść błędów, bo to wszystko typu any i

04:26.260 --> 04:29.030
też nie używamy wszystkich tych wartości,

04:29.030 --> 04:33.080
ale pozwól, że wyjaśnię, jakie mamy tu typy.

04:33.080 --> 04:35.510
To będzie typu Error, to

04:35.510 --> 04:39.890
będzie typu express. Request, lub po prostu zaimportować

04:39.890 --> 04:43.020
Request tutaj jako dodatkowy nazwany import z express,

04:43.020 --> 04:45.540
to również działa, jeśli masz zainstalowane

04:45.540 --> 04:46.670
typy Express, które

04:46.670 --> 04:49.310
mamy, wtedy tutaj mamy również Response,

04:49.310 --> 04:54.310
i NextFunction tutaj, a następnie możemy dostosować nasze typy tutaj, to jest

04:54.490 --> 04:56.310
teraz typu Request, to jest typu

04:56.310 --> 04:59.230
Response, a to jest NextFunction, który możemy

04:59.230 --> 05:01.420
wykonać, aby pozwolić żądaniu kontynuować

05:01.420 --> 05:03.650
swoją podróż do następnego middleware

05:03.650 --> 05:06.680
w kolejce.

05:06.680 --> 05:08.590
Teraz to jest nasz middleware do obsługi

05:08.590 --> 05:10.820
błędów, będzie on odpalany za każdym razem

05:10.820 --> 05:13.030
gdy będziemy mieli błąd w jednym z naszych

05:13.030 --> 05:15.000
innych middleware, a tutaj możemy odesłać

05:15.000 --> 05:17.690
odpowiedź z powiedzmy danymi JSON gdzie mamy wiadomość,

05:17.690 --> 05:22.690
która jest błędem. i gdzie możemy również ustawić,

05:22.855 --> 05:24.630
err. i gdzie być może

05:24.630 --> 05:28.510
ustawimy kod statusu 500, i oczywiście można mieć bardziej

05:28.510 --> 05:29.610
rozbudowaną funkcjonalność

05:29.610 --> 05:32.460
obsługi błędów niż ja mam tutaj, ale z tym, dodaliśmy

05:32.460 --> 05:35.020
nasze trasy, dodaliśmy nasze middleware

05:35.020 --> 05:43.103
obsługi błędów, dlaczego nie dodamy trochę logiki do tego API teraz w następnym wykładzie.
