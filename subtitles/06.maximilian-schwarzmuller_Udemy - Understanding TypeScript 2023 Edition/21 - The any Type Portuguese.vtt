WEBVTT

00:02.260 --> 00:03.960
Instrutor: Com isso, estamos quase terminando

00:03.960 --> 00:04.920
com os tipos de núcleo.

00:04.920 --> 00:07.470
Há mais um tipo, que já vimos, e esse

00:07.470 --> 00:09.390
é o de qualquer tipo.

00:09.390 --> 00:11.480
Qualquer tipo é o tipo mais flexível que você

00:11.480 --> 00:13.310
pode designar no TypeScript.

00:13.310 --> 00:16.710
Este tipo não diz nada ao TypeScript.

00:16.710 --> 00:19.960
Basicamente, significa que você pode armazenar qualquer tipo de valor ali.

00:19.960 --> 00:22.031
Não temos nenhuma atribuição de tipo específico.

00:22.031 --> 00:25.260
Basicamente, o TypeScript nunca gritará com você

00:25.260 --> 00:27.040
quando você usar algum.

00:27.040 --> 00:28.030
De volta ao nosso código

00:28.030 --> 00:31.360
aqui, se eu definisse o tipo de atividades favoritas para qualquer uma,

00:31.360 --> 00:32.870
não receberia um erro.

00:32.870 --> 00:36.580
Se ele definir qualquer tipo de conjunto, eu pelo menos digo ao TypeScript

00:36.580 --> 00:39.220
que as atividades favoritas são um conjunto de algo.

00:39.220 --> 00:41.460
Portanto, se eu armazenasse apenas um único valor,

00:41.460 --> 00:42.830
eu receberia um erro.

00:42.830 --> 00:44.500
Mas desde que seja uma matriz,

00:44.500 --> 00:46.638
posso armazenar ali o que eu quiser.

00:46.638 --> 00:49.840
Portanto, qualquer um é realmente flexível.

00:49.840 --> 00:52.070
E isto pode parecer ótimo em primeira mão,

00:52.070 --> 00:54.060
mas na verdade é uma grande desvantagem

00:54.060 --> 00:58.290
e você quer absolutamente evitar qualquer uma sempre que possível.

00:58.290 --> 01:00.170
Porque qualquer um tira basicamente todas

01:00.170 --> 01:02.512
as vantagens que o TypeScript lhe oferece.

01:02.512 --> 01:04.380
Ele lhe dá a mesma experiência que

01:04.380 --> 01:06.430
você tem com o JavaScript de baunilha,

01:06.430 --> 01:10.480
onde você também tem que fazer qualquer tipo em tudo, por assim dizer.

01:10.480 --> 01:13.820
Qualquer um basicamente garante que o compilador TypeScript

01:13.820 --> 01:16.020
não pode verificar nada, porque se qualquer

01:16.020 --> 01:19.180
propriedade ou qualquer variável pode armazenar qualquer

01:19.180 --> 01:20.818
valor, bem, então não há muito

01:20.818 --> 01:23.687
a verificar, certo?

01:23.687 --> 01:27.130
Portanto, você pode usar qualquer um como um recurso se você tiver

01:27.130 --> 01:30.270
algum valor, algum tipo de dado onde você realmente não pode

01:30.270 --> 01:31.810
saber que tipo de dados serão

01:31.810 --> 01:33.820
armazenados ali e onde você então talvez

01:33.820 --> 01:37.050
esteja usando algumas verificações de tempo de execução, como

01:37.050 --> 01:40.440
fizemos aqui, em tempo de execução para reduzir o que você quer

01:40.440 --> 01:42.660
fazer para certos valores.

01:42.660 --> 01:44.600
Então você poderia ir com qualquer um.

01:44.600 --> 01:48.210
Mas em outros casos, você realmente quer evitar qualquer um.

01:48.210 --> 01:51.120
Se você tiver uma chance de saber com que tipo de dados

01:51.120 --> 01:54.090
você está trabalhando, seja explícito sobre isso.

01:54.090 --> 01:56.780
Deixe o TypeScript inference fazer seu trabalho ou definir

01:56.780 --> 01:58.817
explicitamente seus próprios tipos.

01:58.817 --> 02:01.783
Não volte a nenhum se você não precisar.
