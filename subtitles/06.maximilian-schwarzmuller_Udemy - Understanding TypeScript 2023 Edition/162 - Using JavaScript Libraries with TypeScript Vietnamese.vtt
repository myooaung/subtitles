WEBVTT

00:02.120 --> 00:05.910
-: Bây giờ chúng ta sẽ bắt đầu với một thư viện tiện ích rất nổi tiếng

00:05.910 --> 00:06.770
là Lodash.

00:06.770 --> 00:09.840
Bây giờ, những gì bạn sẽ học ở đây về cơ bản đóng vai trò như

00:09.840 --> 00:13.250
một ví dụ về bất kỳ thư viện JavaScript nào bạn muốn sử dụng.

00:13.250 --> 00:17.430
Bất kể đó là Lodash, jQuery hay bất kỳ thứ gì khác.

00:17.430 --> 00:19.510
Bây giờ, một lưu ý nhỏ vào thời điểm

00:19.510 --> 00:21.640
này, nếu bạn quan tâm đến cách làm

00:21.640 --> 00:24.150
việc với React và TypeScript hoặc giả

00:24.150 --> 00:26.718
sử Node. js. và Express và TypeScript,

00:26.718 --> 00:31.350
tôi có các mô-đun dành riêng cho vấn đề đó ở phần sau của khóa học, bởi vì ở đó bạn sẽ

00:31.350 --> 00:33.760
học được nhiều điều hơn là chỉ thêm chúng

00:33.760 --> 00:35.730
bằng TypeScript.

00:35.730 --> 00:40.470
Nhưng đối với các thư viện đơn giản hơn, như Lodash, như jQuery, v.v.,

00:40.470 --> 00:43.010
đây là một cách tiếp cận sẽ hiệu quả.

00:43.010 --> 00:45.340
Vì vậy, chúng tôi muốn sử dụng Lodash trong dự án của mình.

00:45.340 --> 00:48.460
Lodash tất nhiên là một thư viện JavaScript.

00:48.460 --> 00:50.800
Chúng tôi không cần TypeScript để sử dụng nó,

00:50.800 --> 00:53.480
chúng tôi có thể sử dụng nó trong bất kỳ dự án JavaScript

00:53.480 --> 00:56.770
nào và chúng tôi có thể cài đặt nó khi bạn tìm hiểu cơ bản tại đây trên

00:56.770 --> 00:59.200
các tài liệu chính thức của Lodash.

00:59.200 --> 01:01.400
Nếu bạn đang sử dụng npm, giống như chúng

01:01.400 --> 01:06.477
tôi, bạn có thể chạy npm i hoặc npm install, đó chỉ là một dạng ngắn gọn, "--save/lodash".

01:07.750 --> 01:10.820
Vì vậy, ở đây trong dự án ví dụ này sử dụng webpack mà không

01:10.820 --> 01:12.640
có quy trình sản xuất mặc dù chỉ là

01:12.640 --> 01:14.180
quy trình phát triển.

01:14.180 --> 01:16.570
Ở đó, chúng ta có thể thêm thư viện này bằng cách chạy

01:16.570 --> 01:18.607
nmp install dash dash save Lodash.

01:18.607 --> 01:21.700
Và điều này bây giờ sẽ cài đặt nó vào dự án này và nhờ thiết

01:21.700 --> 01:23.500
lập webpack của chúng tôi, chúng

01:23.500 --> 01:26.250
tôi có thể chỉ cần nhập nó vào các tệp mã của mình và

01:26.250 --> 01:27.517
sử dụng nó ở đó.

01:27.517 --> 01:30.670
Và điều đó sẽ giống nhau trong bất kỳ Dự án JavaScript

01:30.670 --> 01:32.250
hỗ trợ webpack nào.

01:32.250 --> 01:34.990
Nếu bạn không sử dụng webpack, thì tất nhiên

01:34.990 --> 01:37.720
bạn cũng có thể chỉ cần sử dụng CDN, v.v.

01:37.720 --> 01:40.630
Tuy nhiên, những gì tôi sẽ chỉ cho bạn trong các bước tiếp

01:40.630 --> 01:42.390
theo một lát sau trong mô-đun này,

01:42.390 --> 01:45.130
sẽ chỉ hoạt động trong thiết lập webpack.

01:45.130 --> 01:47.730
Vì vậy, ở đây chúng tôi có một thiết lập webpack, chúng tôi hiện

01:47.730 --> 01:49.320
đã cài đặt Lodash và bây giờ nếu chúng tôi

01:49.320 --> 01:51.510
muốn sử dụng nó, chúng tôi chỉ cần nhập nó vào đây.

01:51.510 --> 01:55.600
Chúng tôi có thể nhập, giả sử gạch dưới từ 'Lodash'.

01:55.600 --> 01:57.960
Đó là một cú pháp sẽ có sẵn

01:57.960 --> 01:59.960
khi cài đặt Lodash.

01:59.960 --> 02:03.057
Tuy nhiên, điều này hiện đã gây ra lỗi cho chúng tôi.

02:03.057 --> 02:06.850
"Không thể tìm thấy tệp khai báo cho mô-đun Lodash".

02:06.850 --> 02:09.890
Và chúng ta sẽ gặp một vấn đề khác, nếu bạn muốn sử dụng

02:09.890 --> 02:12.230
Lodash chẳng hạn để xáo trộn một mảng,

02:12.230 --> 02:16.810
thì chúng ta có thể an tâm đăng nhập xáo trộn dấu gạch dưới và sau đó chuyển giả

02:16.810 --> 02:19.000
sử một mảng đơn giản cho phương thức

02:19.000 --> 02:20.430
xáo trộn này.

02:20.430 --> 02:23.110
Phương thức xáo trộn là một phương thức mà Lodash hỗ trợ.

02:23.110 --> 02:25.790
Chúng ta có thể tìm hiểu điều này trong tài liệu chính

02:25.790 --> 02:26.820
thức của Lodash.

02:26.820 --> 02:29.056
Ở đó, nếu bạn tìm kiếm "xáo trộn", bạn sẽ biết

02:29.056 --> 02:32.370
rằng bạn có thể xáo trộn một mảng bằng phương pháp này.

02:32.370 --> 02:37.010
Vì vậy, nó nên hoạt động, nhưng nó thực sự không hoạt động theo

02:37.010 --> 02:39.480
cách này, như bạn có thể nói.

02:39.480 --> 02:43.058
Nếu bây giờ tôi khởi động máy chủ webpack của mình tại đây,

02:43.058 --> 02:45.890
chúng tôi sẽ thấy CDN báo lỗi cho chúng tôi.

02:45.890 --> 02:47.077
Và một lần nữa, nó cho chúng

02:47.077 --> 02:50.940
tôi biết rằng nó "không thể tìm thấy tệp khai báo cho mô-đun Lodash".

02:50.940 --> 02:54.720
Vì vậy, điều này không thực sự hoạt động theo cách nó nên làm.

02:54.720 --> 02:57.610
Bây giờ vấn đề với điều đó là, Lodash là một

02:57.610 --> 02:59.930
thư viện JavaScript đơn giản.

02:59.930 --> 03:02.250
Nó được xây dựng với vanilla JavaScript

03:02.250 --> 03:05.150
và nó được xây dựng cho vanilla JavaScript.

03:05.150 --> 03:08.530
Chúng tôi có thể xác minh điều này nếu chúng tôi chuyển đến các mô-đun

03:08.530 --> 03:10.280
nút, nơi chúng tôi có rất nhiều phụ thuộc,

03:10.280 --> 03:12.450
bởi vì chúng tôi có rất nhiều phụ thuộc của webpack

03:12.450 --> 03:14.220
và nó phụ thuộc ở đó.

03:14.220 --> 03:17.010
Nhưng ở đây, nếu chúng ta tìm kiếm Lodash,

03:17.010 --> 03:17.930
nó ở đây.

03:17.930 --> 03:21.330
Và chúng tôi mở rộng khi thấy có rất nhiều tệp JavaScript

03:21.330 --> 03:22.750
trong đó, phải không?

03:22.750 --> 03:26.380
Và đó là trong tất cả các mã nguồn Lodash.

03:26.380 --> 03:30.010
Một loạt mã JavaScript nhưng chắc chắn không có mã TypeScript.

03:30.010 --> 03:31.750
Bây giờ có vấn đề gì với điều đó?

03:31.750 --> 03:35.550
Vấn đề là TypeScript không hiểu gói

03:35.550 --> 03:37.070
này có gì.

03:37.070 --> 03:41.020
Nó không hiểu Lodash xuất phương thức nào.

03:41.020 --> 03:43.480
Bây giờ bạn sẽ thấy rằng nó thực sự hoạt động nếu chúng

03:43.480 --> 03:45.500
ta vào tsconfig. tập tin json.

03:45.500 --> 03:48.740
Và chúng tôi đảm bảo rằng chúng tôi phát ra đầu ra khi có lỗi.

03:48.740 --> 03:52.650
Vì vậy, nếu chúng tôi chuyển "noEmitOnError" thành "false"

03:52.650 --> 03:55.770
để chúng tôi phát ra đầu ra mới nếu có lỗi xảy ra.

03:55.770 --> 03:57.600
Bây giờ, hãy bắt đầu lại điều này,

03:57.600 --> 04:00.230
cuối cùng nó sẽ báo cho chúng tôi lỗi tương tự, vì

04:00.230 --> 04:02.160
vậy chúng tôi vẫn sẽ thấy điều đó.

04:02.160 --> 04:05.090
Nhưng nếu tôi tải lại trang này ở đây, bạn thực

04:05.090 --> 04:07.120
sự sẽ nhận được kết quả ở đây.

04:07.120 --> 04:08.922
Bạn có thể bỏ qua lỗi ở dưới

04:08.922 --> 04:12.580
cùng ở đây, bạn sẽ thấy đầu ra là mảng đã xáo trộn.

04:12.580 --> 04:14.920
Bạn thấy đấy, nó trông khác đi mỗi khi tôi tải lại.

04:14.920 --> 04:16.530
Và điều đó rất thú vị.

04:16.530 --> 04:19.770
Nó chứng minh rằng Lodash hoạt động, nó chứng minh rằng

04:19.770 --> 04:21.280
mã này là chính xác.

04:21.280 --> 04:24.170
Nhưng thật không may, TypeScript không hiểu nó

04:24.170 --> 04:28.400
và không thể vì Lodash sử dụng JavaScript chứ không phải TypeScript.

04:28.400 --> 04:31.220
Bây giờ vấn đề là không có TypeScript phiên bản của Lodash,

04:31.220 --> 04:34.080
vì vậy chúng tôi phải chung sống với điều đó.

04:34.080 --> 04:37.220
Và đó là một kịch bản bạn sẽ gặp khá nhiều.

04:37.220 --> 04:39.365
Bạn muốn sử dụng một thư viện bên thứ ba

04:39.365 --> 04:42.270
nhất định và thư viện đó chỉ được tạo cho JavaScript

04:42.270 --> 04:44.210
và do đó bạn gặp lỗi như vậy.

04:44.210 --> 04:46.060
Điều này thật khó chịu vì về lý thuyết, tất nhiên

04:46.060 --> 04:47.430
chúng ta có thể sử dụng nó.

04:47.430 --> 04:49.630
TypeScript xây dựng trên JavaScript.

04:49.630 --> 04:53.160
Chúng tôi có thể sử dụng bất kỳ Thư viện JavaScript nào trong dự án TypeScript,

04:53.160 --> 04:56.150
chúng tôi chỉ cần dịch nó sang TypeScript.

04:56.150 --> 04:58.890
Và điều đó rất may là có thể.

04:58.890 --> 05:02.564
Vì vậy, hãy để tôi bật cài đặt này ở đây, "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
Để tôi chỉ cho bạn cách chúng tôi có thể nói với TypeScript

05:07.200 --> 05:10.053
về Lodash và về những gì nó cung cấp.

05:11.140 --> 05:13.662
Bạn có thể cài đặt cái gọi là loại

05:13.662 --> 05:16.250
thư viện của bên thứ ba.

05:16.250 --> 05:20.050
Nếu bạn tìm kiếm các loại Lodash, bạn sẽ tìm thấy

05:20.050 --> 05:24.140
gói npm ở đây được gọi là "@types/lodash".

05:24.140 --> 05:26.440
Ở đó bạn cũng thấy lệnh cài đặt, lệnh

05:26.440 --> 05:28.120
này sẽ chạy sau giây lát.

05:28.120 --> 05:30.580
Nhưng nếu bạn đi xuống chi tiết, bạn cũng tìm thấy một

05:30.580 --> 05:32.220
liên kết đến kho lưu trữ github.

05:32.220 --> 05:36.320
Nó liên kết đến DefiniteTyped, một kho lưu trữ khổng lồ với

05:36.320 --> 05:39.260
rất nhiều bản dịch cho tất cả các loại thư viện

05:39.260 --> 05:40.820
của bên thứ ba.

05:40.820 --> 05:43.120
Ở đây chúng tôi đang ở trong thư mục Lodash.

05:43.120 --> 05:46.590
Và ở đó bạn tìm thấy cái gọi là . tập tin dts.

05:46.590 --> 05:50.180
Vì vậy, không chỉ . ts nhưng . dts.

05:50.180 --> 05:53.460
Đây được gọi là các tệp khai báo, có nghĩa là chúng không chứa

05:53.460 --> 05:55.760
bất kỳ logic thực tế nào, nhưng nếu chúng

05:55.760 --> 05:58.750
ta xem tệp shuffle . dts, chúng chứa

05:58.750 --> 06:01.848
các hướng dẫn về TypeScript.

06:01.848 --> 06:05.200
Về cơ bản, chúng cho TypeScript biết một thứ gì đó hoạt

06:05.200 --> 06:08.720
động như thế nào và những gì được bao gồm trong gói này.

06:08.720 --> 06:10.700
Và bạn có thể khám phá các tệp khác nhau ở

06:10.700 --> 06:14.280
đây, tất cả trong các thư mục con khác nhau, để tìm hiểu thêm về điều đó.

06:14.280 --> 06:17.717
Vì vậy, cuối cùng, các tệp này chỉ cung cấp bản

06:17.717 --> 06:21.750
dịch từ JavaScript đơn giản sang TypeScript.

06:21.750 --> 06:23.860
Chúng không chứa bất kỳ logic nào chạy,

06:23.860 --> 06:26.950
nhưng chúng xác định các kiểu mà thư viện này hoạt động.

06:26.950 --> 06:30.010
Chúng xác định các loại bạn sử dụng, các loại bạn

06:30.010 --> 06:32.490
nhận lại khi gọi một phương thức, v.v.

06:32.490 --> 06:35.410
Bạn cũng có thể viết như vậy. dts của riêng bạn và các

06:35.410 --> 06:38.510
loại tài liệu chính thức cung cấp hướng dẫn về điều

06:38.510 --> 06:40.470
đó nếu đó là điều bạn quan tâm.

06:40.470 --> 06:42.110
Nhưng đối với các loại dự án của riêng

06:42.110 --> 06:43.160
bạn, bạn không cần phải

06:43.160 --> 06:45.820
làm điều đó, bởi vì nếu bạn đang viết mã TypeScript thì tất

06:45.820 --> 06:48.110
nhiên chỉ có TypeScript hiểu điều đó.

06:48.110 --> 06:50.310
Nhưng nếu bạn đang làm việc với thư viện của

06:50.310 --> 06:53.840
bên thứ ba được viết bằng JavaScript mà không có bất kỳ mã TypeScript

06:53.840 --> 06:56.860
nào hoặc không có . dts, mà một số thư viện

06:56.860 --> 06:59.950
bên thứ ba vận chuyển bằng cách này, ngay cả khi

06:59.950 --> 07:02.240
chúng được viết bằng JavaScript,

07:02.240 --> 07:03.960
Lodash thì không.

07:03.960 --> 07:06.890
Vì vậy, nếu bạn đang làm việc với một thư viện

07:06.890 --> 07:08.330
không chứa các tệp dịch

07:08.330 --> 07:11.180
tích hợp sẵn và không được viết bằng TypeScript,

07:11.180 --> 07:15.760
thì sử dụng các gói loại như vậy là giải pháp.

07:15.760 --> 07:20.760
Vì vậy, ở đây chúng tôi chạy "npm install --save@types/Lodash".

07:21.860 --> 07:24.600
Bạn thực sự cũng có thể chạy "save-dev", bởi vì

07:24.600 --> 07:27.920
dev là một phần phụ thuộc thực sự chỉ cần thiết trong quá trình

07:27.920 --> 07:29.230
phát triển, bởi vì sau

07:29.230 --> 07:30.980
đó mã vẫn được tuân thủ thông qua

07:30.980 --> 07:32.360
JavaScript.

07:32.360 --> 07:36.130
Và điều này bây giờ cài đặt bản dịch này từ TypeScript

07:36.130 --> 07:38.060
để hiểu nó.

07:38.060 --> 07:40.630
Và bạn thấy đấy, ngay sau khi cài đặt,

07:40.630 --> 07:42.510
lỗi này đã biến mất.

07:42.510 --> 07:46.220
Và nếu bây giờ tôi khởi động lại npm start, bạn sẽ thấy

07:46.220 --> 07:48.270
lỗi won't come back ở đây.

07:48.270 --> 07:51.640
Vì vậy, bây giờ bạn thấy điều này hoạt động mà không có bất kỳ lỗi

07:51.640 --> 07:55.190
nào, cả trong quá trình biên dịch cũng như trong trình duyệt.

07:55.190 --> 07:57.270
Về mặt kỹ thuật, trước đây nó cũng hoạt

07:57.270 --> 07:59.160
động, nhưng bây giờ với bản dịch, chúng

07:59.160 --> 08:01.580
tôi cũng có thể sử dụng TypeScript.

08:01.580 --> 08:04.660
Và ví dụ, bây giờ chúng tôi cũng nhận được tất cả các phần hoàn thành

08:04.660 --> 08:05.493
ở đây, trong IDE.

08:05.493 --> 08:10.070
Nếu tôi gõ một dấu chấm ở đây, tôi sẽ thấy các phương pháp Lodash mà tôi có thể sử dụng.

08:10.070 --> 08:13.930
Do đó, đây là một phần kiến thức rất quan trọng, điều mà bạn

08:13.930 --> 08:16.400
nhất định phải biết, nó cho phép bạn sử

08:16.400 --> 08:19.370
dụng các thư viện JavaScript cơ bản, bình thường,

08:19.370 --> 08:21.177
thông thường, trong một dự

08:21.177 --> 08:24.220
án TypeScript mà vẫn nhận được sự hỗ trợ tuyệt vời,

08:24.220 --> 08:26.880
tính năng tự động hoàn thành tuyệt vời và

08:26.880 --> 08:28.490
tránh lỗi.

08:28.490 --> 08:33.030
Bạn có thể nói với sự trợ giúp của các gói loại bản

08:33.030 --> 08:33.990
dịch này.

08:33.990 --> 08:38.990
Và những gói này, luôn được đặt tên là "@types", và sau đó là tên gói,

08:39.290 --> 08:40.860
về cơ bản chúng tồn tại

08:40.860 --> 08:45.270
cho bất kỳ thư viện phổ biến nào của bên thứ ba mà bạn có thể tìm

08:45.270 --> 08:46.730
thấy ở đó.

08:46.730 --> 08:49.960
Bạn luôn có thể tìm kiếm tên thư viện, sau đó nhập

08:49.960 --> 08:51.690
các loại jQuery chẳng hạn

08:51.690 --> 08:54.400
và bạn sẽ tìm thấy một mục nhập như vậy.

08:54.400 --> 08:57.350
Vì vậy, đó là cách bạn có thể làm việc với các loại trong

08:57.350 --> 08:59.373
thư viện vanilla JavaScript.
