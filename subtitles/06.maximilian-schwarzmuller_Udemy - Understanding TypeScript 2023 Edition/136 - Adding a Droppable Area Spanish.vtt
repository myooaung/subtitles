WEBVTT

00:02.180 --> 00:04.910
Instructor: Visualmente, somos capaces de arrastrar y

00:04.910 --> 00:07.240
soltar pero técnicamente en JavaScript por supuesto,

00:07.240 --> 00:10.410
nuestro script no tiene idea de lo que está sucediendo.

00:10.410 --> 00:12.030
Pero para nosotros los humanos, por supuesto,

00:12.030 --> 00:14.810
está claro que estamos arrastrando este elemento exacto aquí.

00:14.810 --> 00:16.300
Pero si echamos un vistazo a

00:16.300 --> 00:20.320
nuestro código, ¿cómo puede saber JavaScript qué se arrastra a dónde?

00:20.320 --> 00:21.980
¿Cómo actualizaríamos nuestro estado

00:21.980 --> 00:24.440
basándonos en la información que tenemos ahora?

00:24.440 --> 00:26.690
Realmente no sería posible.

00:26.690 --> 00:28.810
Así que para hacer que esto funcione en JavaScript

00:28.810 --> 00:30.840
tenemos que volver a la clase de nuestro

00:30.840 --> 00:33.960
elemento arrastrable, el elemento del proyecto.

00:33.960 --> 00:36.710
Allí, en el dragStartHandler, registrar el

00:36.710 --> 00:38.250
evento de la consola no es

00:38.250 --> 00:39.950
todo lo que debemos hacer.

00:39.950 --> 00:42.200
En realidad, no necesitamos hacer eso en absoluto.

00:42.200 --> 00:45.070
En su lugar, vamos a utilizar nuestro objeto de evento aquí

00:45.070 --> 00:48.210
porque eso tiene una propiedad de transferencia de datos.

00:48.210 --> 00:50.440
Esto es especial para los eventos de arrastre, que

00:50.440 --> 00:53.280
tiene una propiedad de transferencia de datos de este tipo.

00:53.280 --> 00:55.330
Y en esa propiedad, puede adjuntar datos

00:55.330 --> 00:57.530
al evento de arrastre y más tarde será capaz

00:57.530 --> 00:59.520
de extraer esos datos en una caída y

00:59.520 --> 01:01.390
el navegador en JavaScript detrás

01:01.390 --> 01:03.730
de las escenas, almacenará esos datos durante

01:03.730 --> 01:06.430
la operación de arrastre y asegurar que los datos

01:06.430 --> 01:09.470
que se obtiene cuando la caída se produce es el mismo dato

01:09.470 --> 01:12.020
que adjunta aquí.

01:12.020 --> 01:15.520
Para ello se puede llamar, setData, en la transferencia de datos,

01:15.520 --> 01:18.910
pero la transferencia de datos en realidad podría ser nula.

01:18.910 --> 01:21.080
Así que tenemos que añadir un signo de exclamación

01:21.080 --> 01:23.460
aquí, por supuesto sabemos que no será nulo aquí.

01:23.460 --> 01:25.700
Se preguntará por qué podría ser nulo.

01:25.700 --> 01:29.060
Bueno, el evento de arrastre es siempre el mismo tipo de evento,

01:29.060 --> 01:31.340
pero según el oyente que lo active o el evento

01:31.340 --> 01:34.190
exacto que esté escuchando, la transferencia de

01:34.190 --> 01:37.520
datos no está necesariamente disponible.

01:37.520 --> 01:39.896
Así que no todos los eventos relacionados con el

01:39.896 --> 01:42.640
arrastre le dan un objeto de evento que tiene el objeto de

01:42.640 --> 01:44.073
transferencia de datos.

01:45.320 --> 01:46.620
El dragStartHandler que se

01:46.620 --> 01:49.080
dispara en el evento de inicio del arrastre, sin embargo,

01:49.080 --> 01:52.840
sí lo tiene, así que aquí podemos llamar con seguridad a setData.

01:52.840 --> 01:56.330
Y ahora setData toma dos argumentos aquí.

01:56.330 --> 01:59.900
El primer argumento es un identificador del formato

01:59.900 --> 02:01.320
de los datos, y ahí tienes

02:01.320 --> 02:04.970
ciertos formatos posibles disponibles.

02:04.970 --> 02:08.210
Adjunto encontrarás una inmersión profunda en la función de arrastrar y soltar

02:08.210 --> 02:10.890
con JavaScript donde podrás aprender mucho más sobre ellas.

02:10.890 --> 02:12.270
Por cierto, también aprenderás

02:12.270 --> 02:15.140
más sobre esto en mi curso de la Guía Completa de JavaScript.

02:15.140 --> 02:18.390
Aquí necesitamos el formato text/plain, lo que

02:18.390 --> 02:20.010
significa que sólo vamos

02:20.010 --> 02:24.190
a adjuntar un texto plano pidió datos que se transfieren, y eso

02:24.190 --> 02:25.430
es importante.

02:25.430 --> 02:28.250
No vamos a adjuntar nuestros objetos aquí, nuestro

02:28.250 --> 02:29.740
proyecto en sí, vamos a seguir

02:29.740 --> 02:31.390
atrapados.

02:31.390 --> 02:34.340
Así que no es el proyecto completo el que se puede renderizar aquí.

02:34.340 --> 02:37.955
En su lugar, basta con adjuntar el ID del proyecto,

02:37.955 --> 02:41.645
ya que esto nos permitirá más tarde recuperar ese

02:41.645 --> 02:44.870
proyecto desde nuestro estado.

02:44.870 --> 02:47.320
Así que adjuntar la identificación es todo lo que tenemos que hacer.

02:47.320 --> 02:50.240
Queremos transferir sólo una pequeña cantidad de datos, esto

02:50.240 --> 02:52.053
también nos ahorrará algo de memoria.

02:53.100 --> 02:56.300
Así que ahora con eso, estamos adjuntando datos al evento de arrastre.

02:56.300 --> 02:58.330
Otra cosa que quiero hacer es, en la transferencia

02:58.330 --> 03:00.610
de datos donde de nuevo, tenemos que añadir el

03:00.610 --> 03:02.340
signo de exclamación, voy a establecer

03:02.340 --> 03:05.430
la propiedad effectAllowed para mover.

03:05.430 --> 03:08.610
Esto básicamente controla cómo se verá el cursor,

03:08.610 --> 03:12.440
y le dice al navegador un poco sobre nuestra intención, que

03:12.440 --> 03:15.200
planeamos mover un elemento de A a B.

03:15.200 --> 03:16.760
Una alternativa podría ser

03:16.760 --> 03:19.230
copiar, donde se obtiene un cursor diferente

03:19.230 --> 03:20.820
que indica al usuario que está

03:20.820 --> 03:23.120
copiando y no moviendo, pero aquí queremos

03:23.120 --> 03:25.140
mover el elemento lo que significa

03:25.140 --> 03:26.580
que al soltarlo, lo quitamos

03:26.580 --> 03:28.810
en su lugar original y lo añadimos al

03:28.810 --> 03:31.360
nuevo lugar.

03:31.360 --> 03:34.940
Así que ahora los datos se adjuntan aquí y ese es el paso número uno.

03:34.940 --> 03:36.870
Volvamos ahora al lugar donde queremos

03:36.870 --> 03:38.470
que se produzca la caída, que

03:38.470 --> 03:40.360
es la lista de proyectos.

03:40.360 --> 03:43.400
Allí, comienza en el dragLeaveHandler.

03:43.400 --> 03:46.370
Ahora en esta aplicación, en este proyecto aquí,

03:46.370 --> 03:49.200
sólo tenemos una operación de arrastrar y soltar

03:49.200 --> 03:51.500
y eso es nuestros proyectos aquí.

03:51.500 --> 03:54.970
En aplicaciones más grandes puede que tengas diferentes piezas

03:54.970 --> 03:57.220
en la página que pueden ser arrastradas y soltadas

03:57.220 --> 04:01.080
y no quieres hacer que todo se pueda soltar en todas partes.

04:01.080 --> 04:06.080
Por lo tanto, aquí en el dragOverHandler, que se dispara cuando se entra

04:06.230 --> 04:09.580
en un área arrastrable con un elemento unido al

04:09.580 --> 04:11.860
ratón, quiero comprobar si realmente

04:11.860 --> 04:14.970
se permite un arrastre aquí.

04:14.970 --> 04:19.546
Para ello, voy a comprobar si el evento. dataTransfer, aquí también

04:19.546 --> 04:21.060
está disponible, así

04:21.060 --> 04:22.950
que si eso está disponible,

04:22.950 --> 04:25.500
y entonces, si está disponible,

04:25.500 --> 04:29.140
la propiedad de tipos de transferencia de datos

04:29.140 --> 04:34.140
tiene un primer valor que es igual a text/plain.

04:34.300 --> 04:39.280
Eso significa simplemente que los datos adjuntos a nuestro evento

04:39.280 --> 04:42.390
de arrastre, ¿son de ese formato?

04:42.390 --> 04:43.360
Que por supuesto lo

04:43.360 --> 04:45.030
es porque ese es el formato que configuramos

04:45.030 --> 04:47.320
en el dragStartHandler aquí.

04:47.320 --> 04:50.490
Así que, por ejemplo, aquí no permitiría soltar imágenes o algo

04:50.490 --> 04:51.380
así que tendría un

04:51.380 --> 04:53.180
formato de datos diferente.

04:53.180 --> 04:56.173
Acabo de permitir que se deje caer el texto sin formato.

04:57.170 --> 04:59.450
Por supuesto, ahora también tengo que sustituir

04:59.450 --> 05:01.020
el guión bajo por un evento de

05:01.020 --> 05:03.280
nuevo porque me refiero a él.

05:03.280 --> 05:07.150
Ahora bien, si ese es el caso, sé que quiero permitir una caída, así que

05:07.150 --> 05:09.070
entonces actualizaré el fondo.

05:09.070 --> 05:11.620
Y otra cosa importante que tenemos que hacer, tienes

05:11.620 --> 05:13.960
que llamar al evento. preventDefault.

05:13.960 --> 05:15.950
Pero, ¿por qué tenemos que llamar a eso?

05:15.950 --> 05:18.860
Porque en JavaScript un arrastrar y soltar funciona

05:18.860 --> 05:22.480
de tal manera que en realidad sólo se permite soltar, por

05:22.480 --> 05:26.119
lo que el evento de soltar sólo se disparará en un elemento,

05:26.119 --> 05:29.649
si en el overHandler de arrastrar en ese mismo elemento

05:29.649 --> 05:32.750
se llamó a preventDefault.

05:32.750 --> 05:35.360
Se puede pensar en lo siguiente.

05:35.360 --> 05:38.870
El valor por defecto para los eventos de arrastrar y soltar

05:38.870 --> 05:41.350
de JavaScript es no permitir la caída, por

05:41.350 --> 05:44.889
lo que tienes que evitar el valor por defecto en el drag overHandler

05:44.889 --> 05:48.120
para decirle a JavaScript y al navegador que para este

05:48.120 --> 05:49.670
elemento, en este caso para

05:49.670 --> 05:52.980
esta sección para esta clase sin proyecto quieres permitir

05:52.980 --> 05:54.870
una caída.

05:54.870 --> 05:57.920
Así que sólo si haces esto es un dragOverHandler el evento

05:57.920 --> 06:00.020
de caída realmente se disparará cuando

06:00.020 --> 06:01.220
el usuario lo suelte.

06:01.220 --> 06:02.910
De lo contrario, si el usuario se suelta,

06:02.910 --> 06:05.060
el evento de caída no se disparará.

06:05.060 --> 06:07.090
Así que con eso, el manejador de la caída

06:07.090 --> 06:08.960
se ejecutará finalmente, por supuesto,

06:08.960 --> 06:12.620
porque ahora estamos permitiendo que esto suceda.

06:12.620 --> 06:16.440
Así que aquí en el manejador de la caída ahora podemos aceptar el evento,

06:16.440 --> 06:20.610
y por el momento vamos a la consola. registre el evento aquí así

06:20.610 --> 06:23.003
para ver si esto funciona.

06:23.940 --> 06:28.100
Ahora guardamos todo, añadimos un nuevo elemento

06:28.100 --> 06:30.220
aquí, y arrastro esto.

06:30.220 --> 06:33.430
Si lo suelto aquí en proyectos terminados ves que

06:33.430 --> 06:36.490
este evento de arrastre se dispara aquí.

06:36.490 --> 06:39.360
Y eso viene de la línea 236 que efectivamente

06:39.360 --> 06:43.050
es esta línea en el manejador de la caída.

06:43.050 --> 06:45.950
Ahora si inspeccionamos el evento de arrastre aquí en el navegador,

06:45.950 --> 06:47.447
ves que tenemos un montón de datos

06:47.447 --> 06:50.830
aquí y también tenemos esa propiedad de transferencia de datos.

06:50.830 --> 06:52.920
Y ahí verás el efecto que permitimos,

06:52.920 --> 06:54.320
que es Mover, y también

06:54.320 --> 06:57.930
verás que no hay nada ahí.

06:57.930 --> 07:01.600
Bueno, sólo porque los datos ya fueron borrados después

07:01.600 --> 07:04.510
de que esto se pusiera en la consola.

07:04.510 --> 07:06.100
Y como aquí ponemos el objeto y los

07:06.100 --> 07:08.160
objetos son tipos de referencia, pues vemos

07:08.160 --> 07:10.830
la última instantánea donde se han perdido los datos.

07:10.830 --> 07:13.360
En realidad, en el momento en que dejemos esto,

07:13.360 --> 07:16.910
podremos extraer datos de la transferencia de datos.

07:16.910 --> 07:18.360
Y puedo demostrarlo.

07:18.360 --> 07:20.960
Por supuesto, podemos simplemente acceder a la

07:20.960 --> 07:23.210
transferencia de datos y ahí tienes un método

07:23.210 --> 07:26.580
getData, y ahora queremos obtener los datos con este formato

07:26.580 --> 07:29.560
text/plain y que debería ser el ID del proyecto que adjuntamos

07:29.560 --> 07:34.560
a nuestro paquete de transferencia de datos en el elemento del proyecto.

07:35.060 --> 07:37.179
Así que si ahora guardamos esto

07:37.179 --> 07:39.690
y volvemos a añadir el proyecto aquí,

07:39.690 --> 07:41.050
y arrastramos esto aquí,

07:41.050 --> 07:46.050
se ve esto aquí en efecto, es el ID de este elemento del proyecto.

07:46.600 --> 07:47.920
Podemos verlo si

07:47.920 --> 07:50.880
lo inspeccionamos porque también lo

07:50.880 --> 07:55.124
añadimos aquí como ID, 0. 2167, se parece a esta identificación para mí.

07:55.124 --> 07:59.170
Así que estamos transfiriendo con éxito el ID.

07:59.170 --> 08:00.490
Ya casi hemos llegado.

08:00.490 --> 08:04.100
Ahora sólo tenemos que actualizar nuestro estado entre bastidores

08:04.100 --> 08:06.163
y luego volver a renderizar la DUI.
