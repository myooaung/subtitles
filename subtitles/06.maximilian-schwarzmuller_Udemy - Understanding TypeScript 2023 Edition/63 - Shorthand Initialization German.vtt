WEBVTT

00:02.320 --> 00:04.500
Kursleiter: Jetzt, wo wir etwas über privat und öffentlich

00:04.500 --> 00:07.650
gelernt haben, möchte ich auch den Namen in eine private Eigenschaft verwandeln.

00:07.650 --> 00:09.700
Und jetzt haben wir hier ein kleines Problem,

00:09.700 --> 00:10.730
nicht wirklich ein Problem,

00:10.730 --> 00:12.730
aber eine kleine Unannehmlichkeit.

00:12.730 --> 00:14.540
Wir haben das Namensfeld hier, dann

00:14.540 --> 00:16.810
bekommen wir einen Wert dafür hier im Konstruktor,

00:16.810 --> 00:19.350
und dann speichern wir diesen Wert für dieses Feld

00:19.350 --> 00:21.920
hier im Konstruktor, im Feld.

00:21.920 --> 00:22.900
Wir können das tun,

00:22.900 --> 00:25.820
und es ist sicherlich sehr klar, was wir hier tun.

00:25.820 --> 00:29.690
Aber in vielen Anwendungsfällen werden Sie viele Klassen haben, in denen

00:29.690 --> 00:31.810
alle Eigenschaften, alle Felder, die

00:31.810 --> 00:33.210
Sie haben, im Konstruktor

00:33.210 --> 00:35.010
initialisiert werden.

00:35.010 --> 00:36.520
Daher kann es vorkommen,

00:36.520 --> 00:39.870
dass man ein paar Eigenschaften, ein paar Felder

00:39.870 --> 00:42.090
wie dieses oben schreibt - egal,

00:42.090 --> 00:44.270
ob sie privat oder öffentlich sind

00:44.270 --> 00:47.993
- und das alles dann unten im Konstruktor wiederholt,

00:49.030 --> 00:55.110
um diese Werte hier in der Konstruktorfunktion zu initialisieren.

00:55.110 --> 00:57.080
Das müssen Sie nicht tun.

00:57.080 --> 01:01.690
Anstatt diesen doppelten Initialisierungscode hier zu machen, können

01:01.690 --> 01:05.220
Sie Ihre Felddefinitionen dort oben loswerden.

01:05.220 --> 01:07.150
Und jetzt werden Sie sehen, dass Sie einen Fehler erhalten werden.

01:07.150 --> 01:09.040
Sie können dies aber auch weglassen

01:09.040 --> 01:12.970
und stattdessen einfach den Zugriffsmodifikator vor den

01:12.970 --> 01:15.130
Parameter setzen.

01:15.130 --> 01:17.950
Wenn es also öffentlich sein soll, fügen Sie öffentlich hinzu.

01:17.950 --> 01:20.290
Nehmen wir an, der Name bleibt jetzt öffentlich.

01:20.290 --> 01:23.530
Wenn es privat sein soll, fügen Sie privat hinzu.

01:23.530 --> 01:25.250
Hier müssen Sie public hinzufügen,

01:25.250 --> 01:30.250
denn das ist jetzt eine explizite Anweisung für typescript, die typescript mitteilt,

01:30.370 --> 01:32.880
dass Sie nicht nur diese Argumente hier im

01:32.880 --> 01:36.450
Konstruktor bekommen wollen, sondern dass Sie Eigenschaften

01:36.450 --> 01:41.950
für diese Klasse mit genau denselben Namen erstellen wollen.

01:41.950 --> 01:45.350
Und deshalb sollten wir auch hier n in name umbenennen.

01:45.350 --> 01:47.600
Damit die Eigenschaft name in der Creator-Klasse

01:47.600 --> 01:49.250
erstellt wird.

01:49.250 --> 01:51.250
Dies ist also einfach eine Abkürzung

01:51.250 --> 01:54.270
für den Code der doppelten Initialisierung hier.

01:54.270 --> 01:56.340
Früher mussten Sie Ihre Felder suchen und

01:56.340 --> 01:57.930
dann den Wert speichern, jetzt

01:57.930 --> 02:00.110
machen wir das alles in einem Rutsch.

02:00.110 --> 02:02.690
Wir legen fest, welche Argumente der Konstruktor

02:02.690 --> 02:04.430
annimmt, und dann wird für jedes Argument,

02:04.430 --> 02:07.290
dem ein solcher Zugriffsmodifikator vorangestellt ist,

02:07.290 --> 02:09.630
eine gleichnamige Eigenschaft erstellt, und

02:09.630 --> 02:11.480
der Wert für das Argument wird in dieser

02:11.480 --> 02:14.420
erstellten Eigenschaft gespeichert.

02:14.420 --> 02:17.750
Jetzt müssen wir nur noch unsere Abteilungserstellung hier korrigieren und

02:17.750 --> 02:20.780
eine ID hinzufügen, weil ich dieses neue Argument hinzugefügt habe.

02:20.780 --> 02:22.230
Und jetzt werden Sie sehen,

02:22.230 --> 02:25.640
dass, wenn wir dort unten beschreiben aufrufen, und das tue ich

02:25.640 --> 02:28.113
tatsächlich, werde ich auch die ID dort einfügen,

02:29.130 --> 02:32.640
vielleicht indem ich diese Abteilungs-Benutzerzeichenfolge,

02:32.640 --> 02:38.890
wörtlich hier, Abteilung dies ändere.

02:38.890 --> 02:38.890
id

02:40.205 --> 02:42.450
und dann das hier. Namen, werden Sie

02:42.450 --> 02:45.380
sehen, dass das alles noch funktioniert.

02:45.380 --> 02:47.360
Hier wird er ohne Fehler kompiliert.

02:47.360 --> 02:49.980
Und hier erhalten wir die Ausgabe mit unserer

02:49.980 --> 02:51.710
ID und mit unserem Namen.

02:51.710 --> 02:53.480
Durch diese kleine Abkürzung konnten

02:53.480 --> 02:55.563
wir auch etwas Code für all das einsparen.
