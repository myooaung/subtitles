WEBVTT

00:02.450 --> 00:04.810
講師：では､ コンパイラでファイルを管理する方法を理解したところで､

00:04.810 --> 00:11.300
コンパイラのオプションに飛び込んでみましょう｡

00:11.300 --> 00:13.860
これにより､ TypeScriptのコードがどのようにコンパイルされるかを制御できるようになり､

00:13.860 --> 00:23.230
どのファイルかだけでなく､ コンパイルされるファイルがTypeScriptによってどのように扱われるかも制御できるようになるのだ｡

00:23.230 --> 00:26.760
そして､ そこにはたくさんのオプションがあることがおわかりいただけると思います｡ 

00:26.760 --> 00:29.560
これらの選択肢の横には､ 短い説明が表示されています｡ 

00:29.560 --> 00:32.450
説明の中には､ 大きな暗号のようなものもあります｡ 

00:32.450 --> 00:34.210
その他は､ かなりはっきりしています｡ 

00:34.210 --> 00:36.450
そして､ これらのオプションの多くは､

00:36.450 --> 00:39.950
ほとんどのプロジェクトで重要視されないと断言します｡

00:39.950 --> 00:43.900
だから､ これらのオプションをすべて設定することは､ まずないでしょう｡ 

00:43.900 --> 00:46.070
通常､ これらのオプションの多くを無視することができます｡ 

00:46.070 --> 00:48.765
ここで､ このコースを通して重要なオプションをピックアップしておきます｡

00:48.765 --> 00:53.911
あるオプションは､ ある機能について学ぶときにだけ意味を持つからです｡

00:53.911 --> 00:57.250
そして､ もう今すぐにでもいくつかの選択肢に飛び込みたいのですが｡

00:57.250 --> 01:02.340
そのために､ ファイルを上から下まで見て､ そこで得たものを確認しましょう｡

01:02.340 --> 01:04.410
まず､ ターゲットオプションから見てみましょう｡ 

01:04.410 --> 01:07.230
ご覧のように､ 実はこれ､ デフォルトで設定されています｡ 

01:07.230 --> 01:08.750
コメントアウトされていない｡ 

01:08.750 --> 01:16.970
そしてこのオプションで行うことは､ どのターゲットのJavaScriptバージョンでコードをコンパイルしたいかをTypeScriptに伝えることである｡

01:16.970 --> 01:18.850
なぜなら､ TypeScriptが行うのは､

01:18.850 --> 01:21.600
JavaScriptに存在しないタイプアノテーションのような新しい機能を､

01:21.600 --> 01:26.960
単にJavaScriptのコードにコンパイルするだけではないからです｡

01:26.960 --> 01:33.270
だから､ ただ単にここが動くように配慮しているわけではないのです｡

01:33.270 --> 01:41.370
また､ そのコードを特定のブラウザで動作するJavaScriptにコンパイルします｡

01:41.370 --> 01:46.980
そして､ 基本的にはターゲットを設定することで､ どのブラウザがコンパイルコードをサポートしているかを定義します｡

01:46.980 --> 01:49.520
このプロジェクトのデフォルトターゲットは､

01:49.520 --> 01:55.517
ご覧の通りes5で､ すべてのタイプのコードがコンパイルされます｡

01:55.517 --> 01:57.550
実際に見ることができます｡ 

01:57.550 --> 02:00.770
ここでTSCを実行して､ すべてのファイルをコンパイルすると､

02:00.770 --> 02:03.260
app. ts letとconstを使っているのですが､

02:03.260 --> 02:05.732
appで｡ js, we se var.

02:05.732 --> 02:09.890
これはES5をターゲットにしているからで､ ES5の世界では､

02:09.890 --> 02:13.816
letやconstはありません｡

02:13.816 --> 02:20.650
つまり､ ここで良いのは､ TypeScriptを使って古いブラウザでも動作するコードを生成できることです｡

02:20.650 --> 02:22.930
でも､ それをやるかどうかは､ まったくもって使い方次第です｡ 

02:22.930 --> 02:33.290
なぜなら､ 他のビルドツールがJavaScriptの変換を引き受けてくれるかもしれないので､

02:33.290 --> 02:41.170
TypeScriptにそれをさせたくはないのです｡

02:41.170 --> 02:44.160
そのため､ 値を削除すると代替案が表示され､

02:44.160 --> 02:46.070
vscodeでは少なくともControl

02:46.070 --> 02:51.300
+ Spaceキーを押してオートコンプリートにすると､ 候補がたくさん表示され､

02:51.300 --> 02:56.450
利用可能なすべての値が表示されます｡

02:56.450 --> 02:58.700
もちろん､ 新しいバージョンのJavaScriptがリリースされるたびに､

02:58.700 --> 03:01.900
この状況は変化していきます｡

03:01.900 --> 03:03.785
以前､ es5に設定したのを見ましたね｡ 

03:03.785 --> 03:06.150
targetを全く指定しない場合は､ 今現在､

03:06.150 --> 03:12.200
TypeScriptはes3までコンパイルしているので､ さらに古いバージョンに対応することになる｡

03:12.200 --> 03:15.130
しかし､ よりモダンなes6にすることも可能で､

03:15.130 --> 03:19.310
例えばconstをサポートし､ さらに最新のバージョンをlet or

03:19.310 --> 03:24.310
takeすると､ es6はes2015と同等となります､ 念のため｡

03:24.870 --> 03:32.460
そこで､ 例えばこれをes6に設定し､ tsconfigを変更した後にtscコマンドを再実行した場合｡

03:32.460 --> 03:32.460
json

03:32.460 --> 03:38.130
ファイルを開くと､ app にそれが表示されます｡ jsは､ letとconstがサポートされるようになりましたから｡

03:38.130 --> 03:39.340
だから､ それはあなた次第なのです｡ 

03:39.340 --> 03:43.641
もちろん､ ここで最新のJavaScriptのバージョンを選べば選ぶほど､

03:43.641 --> 03:47.450
TypeScriptはより少ないコードをコンパイルしなければならない､

03:47.450 --> 03:59.560
あるいは存在しない機能を回避しなければならない状況が少なくなるので､ 一般的にコンパイルされたコードはより簡潔で短く仕上がっている｡

03:59.560 --> 04:01.150
それがターゲットなんですね｡ 

04:01.150 --> 04:02.623
他の選択肢はどうでしょうか？
