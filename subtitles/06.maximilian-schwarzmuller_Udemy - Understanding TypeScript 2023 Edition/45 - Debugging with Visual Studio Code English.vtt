WEBVTT

1
00:00:02.170 --> 00:00:03.003
<v Instructor>So now that we have</v>

2
00:00:03.003 --> 00:00:04.760
a properly configured project,

3
00:00:04.760 --> 00:00:08.130
let's dive a bit deeper into how you can debug your project

4
00:00:08.130 --> 00:00:10.500
or how you can have a great development flow.

5
00:00:10.500 --> 00:00:13.560
I show you my basic IDE set up at the beginning

6
00:00:13.560 --> 00:00:14.575
of this course.

7
00:00:14.575 --> 00:00:17.750
Really make sure you got the right extensions installed.

8
00:00:17.750 --> 00:00:22.750
There for TypeScript, it comes down to ESLint

9
00:00:22.980 --> 00:00:26.410
which can help you with linting your TypeScript code.

10
00:00:26.410 --> 00:00:29.310
So with improving the code quality

11
00:00:29.310 --> 00:00:31.620
though you might need additional configuration

12
00:00:31.620 --> 00:00:33.900
for ESLint to have an effect.

13
00:00:33.900 --> 00:00:36.310
It can help you in more advanced projects still

14
00:00:37.220 --> 00:00:38.570
more interesting than that,

15
00:00:38.570 --> 00:00:40.818
you wanna really use Prettier

16
00:00:40.818 --> 00:00:43.370
to automatically format your code

17
00:00:43.370 --> 00:00:45.770
and have a nicely formatted code

18
00:00:45.770 --> 00:00:49.870
and you might wanna give Debugger for Chrome a try

19
00:00:49.870 --> 00:00:53.140
because that allows you to debug your TypeScript files

20
00:00:53.140 --> 00:00:55.810
even from inside VS Code

21
00:00:55.810 --> 00:00:59.440
through Chrome but without using the Chrome Dev Tools.

22
00:00:59.440 --> 00:01:01.820
Of course, you can use those as well

23
00:01:01.820 --> 00:01:02.653
as you learned.

24
00:01:02.653 --> 00:01:05.154
If you do enable sourceMaps here,

25
00:01:05.154 --> 00:01:07.160
which you can of course, always do,

26
00:01:07.160 --> 00:01:09.240
you get these translated files there as well

27
00:01:09.240 --> 00:01:10.429
which is really nice.

28
00:01:10.429 --> 00:01:14.170
But you can also use VS Code.

29
00:01:14.170 --> 00:01:15.960
You can place breakpoints here,

30
00:01:15.960 --> 00:01:17.340
let's say in the clickHandler

31
00:01:17.340 --> 00:01:19.842
and now to launch your files here

32
00:01:19.842 --> 00:01:24.842
through VS Code, you need to enable sourceMaps as well

33
00:01:26.100 --> 00:01:28.690
but we still will be able to use VS Code

34
00:01:28.690 --> 00:01:30.950
instead of the browser Dev Tools.

35
00:01:30.950 --> 00:01:34.570
So enable sourceMaps, place your breakpoint

36
00:01:34.570 --> 00:01:38.930
and then go to Debug, Start Debugging.

37
00:01:38.930 --> 00:01:40.320
Now, the first time you run this,

38
00:01:40.320 --> 00:01:42.170
it should ask you for the environment

39
00:01:42.170 --> 00:01:45.350
and there with that Debugger for Chrome extension installed,

40
00:01:45.350 --> 00:01:47.850
you should be able to choose Chrome.

41
00:01:47.850 --> 00:01:49.960
It will now go to a laucnh.json file

42
00:01:49.960 --> 00:01:53.200
where you configure how it should launch that

43
00:01:53.200 --> 00:01:56.740
and there you should point it at localhost:3000

44
00:01:56.740 --> 00:01:59.330
because that's where our development server is running

45
00:01:59.330 --> 00:02:02.710
and of course, that process, so the npm start process

46
00:02:02.710 --> 00:02:04.220
should be up and running.

47
00:02:04.220 --> 00:02:06.910
To point at localhost:3000 there

48
00:02:06.910 --> 00:02:09.740
and as a webRoot, you can leave that placeholder here

49
00:02:09.740 --> 00:02:11.890
which means this project folder

50
00:02:11.890 --> 00:02:13.780
is assumed to be the host of your files

51
00:02:13.780 --> 00:02:17.120
which is the case and now compile your code

52
00:02:17.120 --> 00:02:19.780
so that the sourceMaps also are generated

53
00:02:19.780 --> 00:02:22.470
after setting the sourceMaps config to true

54
00:02:22.470 --> 00:02:25.290
so that we now have these in the JavaScript code.

55
00:02:25.290 --> 00:02:26.870
Then with your breakpoint added here

56
00:02:26.870 --> 00:02:28.400
and your launch.json configured,

57
00:02:28.400 --> 00:02:30.400
let's run debugging here.

58
00:02:30.400 --> 00:02:32.140
Start debugging now for real

59
00:02:32.140 --> 00:02:34.830
and it will open up a new tab now automatically.

60
00:02:34.830 --> 00:02:36.020
This tab will be closed

61
00:02:36.020 --> 00:02:38.730
whenever you quit the debugging process

62
00:02:38.730 --> 00:02:41.940
or if you close the tab, the debugging process will quit.

63
00:02:41.940 --> 00:02:44.590
So now with that, you enter this debugging view here

64
00:02:44.590 --> 00:02:46.790
in VS Code where you can track variables,

65
00:02:46.790 --> 00:02:48.230
watch certain expressions

66
00:02:48.230 --> 00:02:50.120
and see the current call stack

67
00:02:50.120 --> 00:02:51.910
and if you now click on Click Me,

68
00:02:51.910 --> 00:02:54.120
you should be taken back into the editor

69
00:02:54.120 --> 00:02:56.590
and code execution pauses

70
00:02:56.590 --> 00:02:59.630
at your breakpoint in the TypeScript file

71
00:02:59.630 --> 00:03:01.410
and now you can walk through the file her,

72
00:03:01.410 --> 00:03:04.540
inspect local values for this keyword

73
00:03:04.540 --> 00:03:07.120
or for the message variable, for example,

74
00:03:07.120 --> 00:03:09.750
script-wide variables you might have

75
00:03:09.750 --> 00:03:13.320
and global variables you got access to global objects.

76
00:03:13.320 --> 00:03:15.560
You can watch certain expressions

77
00:03:15.560 --> 00:03:19.290
like message + multiple exclamation marks

78
00:03:19.290 --> 00:03:22.690
and well, then you can always track the value

79
00:03:22.690 --> 00:03:26.180
which is in there here in this window if you wanted to

80
00:03:26.180 --> 00:03:27.483
so that would work.

81
00:03:27.483 --> 00:03:30.480
And you can see the current function call stack,

82
00:03:30.480 --> 00:03:33.010
for example, that would occur in the clickHandler

83
00:03:33.010 --> 00:03:34.710
and now you can step through your code

84
00:03:34.710 --> 00:03:37.590
with these controls to step to the next step,

85
00:03:37.590 --> 00:03:39.800
skipping over the next function call,

86
00:03:39.800 --> 00:03:41.500
stepping into the function call

87
00:03:41.500 --> 00:03:43.827
or stepping out of the current function call

88
00:03:43.827 --> 00:03:46.710
and the call stack, of course, here will adjust according

89
00:03:46.710 --> 00:03:49.280
to that and with that,

90
00:03:49.280 --> 00:03:51.920
can ignore this browser thing here,

91
00:03:51.920 --> 00:03:54.770
with that, you can always resume code execution

92
00:03:54.770 --> 00:03:56.210
by clicking the play button

93
00:03:56.210 --> 00:03:58.150
and only pause whenever you reach

94
00:03:58.150 --> 00:04:00.290
your breakpoint the next time.

95
00:04:00.290 --> 00:04:02.080
So this is how you can debug code.

96
00:04:02.080 --> 00:04:04.050
You can remove a breakpoint by clicking on it.

97
00:04:04.050 --> 00:04:05.910
This is how you can debug code

98
00:04:05.910 --> 00:04:07.310
from inside VS Code

99
00:04:07.310 --> 00:04:09.728
with the help of the built-in debugging tools,

100
00:04:09.728 --> 00:04:12.450
the Chrome Debugger extension,

101
00:04:12.450 --> 00:04:15.470
derived configuration and soureMaps

102
00:04:15.470 --> 00:04:17.743
which are set up in your TypeScript config.

