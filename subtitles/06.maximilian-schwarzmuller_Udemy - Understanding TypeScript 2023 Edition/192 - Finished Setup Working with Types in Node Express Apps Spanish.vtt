WEBVTT

00:02.170 --> 00:03.420
Instructor: Así que vamos a empezar.

00:03.420 --> 00:06.330
Como mencioné, aquí crearé una API REST muy básica

00:06.330 --> 00:09.130
pero por supuesto podrías construir cualquier

00:09.130 --> 00:10.810
aplicación Node con o sin express

00:10.810 --> 00:13.780
y de cualquier manera con TypeScript así que esto

00:13.780 --> 00:15.570
es solo un ejemplo.

00:15.570 --> 00:18.990
No está limitado a esta aplicación específica.

00:18.990 --> 00:21.560
En la carpeta src añadiré una aplicación. ts, que será el punto

00:21.560 --> 00:23.060
de entrada de la raíz

00:23.060 --> 00:25.970
en el que se hace girar el servidor.

00:25.970 --> 00:29.530
Y ahí quiero importar algo de Express, de este framework

00:29.530 --> 00:31.203
de Express.

00:32.970 --> 00:35.460
Ahora probablemente sabes cómo podemos añadir Express

00:35.460 --> 00:37.890
aquí y configurar un servidor web con Express.

00:37.890 --> 00:41.330
Importamos Express con esta sintaxis aquí

00:41.330 --> 00:46.330
y luego aquí podemos ejecutar Express como una función.

00:46.380 --> 00:50.170
Obtenemos de vuelta un objeto de aplicación de este tipo, en el que podemos llamar

00:50.170 --> 00:53.750
a listen para escuchar en un determinado puerto las peticiones entrantes.

00:53.750 --> 00:56.120
Ahora bien, esto funcionaría en un JavaScript

00:56.120 --> 00:58.420
normal, pero ya ves que me da un error aquí.

00:59.540 --> 01:01.600
Ahora también me sugieren por qué

01:01.600 --> 01:03.500
podría estar recibiendo este error

01:03.500 --> 01:06.290
aquí porque requieren en realidad es una función

01:06.290 --> 01:10.100
que existe en la nota. js, pero no en el lado del navegador.

01:10.100 --> 01:12.540
Ahora en el tsconfig. json no estoy usando ninguna

01:12.540 --> 01:16.640
librería especial que soporte node. js por lo que en estos TypeScript

01:16.640 --> 01:18.120
no es consciente de esta

01:18.120 --> 01:20.150
función general que existe en

01:20.150 --> 01:22.900
un nodo. js environment.

01:22.900 --> 01:27.140
Ahora para que esto funcione, necesitamos instalar un tipo extra con "npm

01:27.140 --> 01:30.220
install --save-dev" podemos instalar "@types/node"

01:30.220 --> 01:32.410
para instalar todos los tipos que necesitamos

01:32.410 --> 01:36.291
para trabajar con node. js Así que vamos a ejecutar

01:36.291 --> 01:39.460
este comando y ver si eso nos ayuda.

01:39.460 --> 01:42.320
Sí, ya está hecho y este error ha desaparecido.

01:42.320 --> 01:44.390
Pero tal vez también has visto que en la aplicación

01:44.390 --> 01:46.680
no me ha salido ningún autocompletado.

01:46.680 --> 01:50.190
Tampoco da error, pero si pasamos por encima de la aplicación vemos

01:50.190 --> 01:52.410
que TypeScript no sabe lo que hay ahí.

01:52.410 --> 01:54.210
Es del tipo "cualquiera".

01:54.210 --> 01:56.530
Así que probablemente deberíamos instalar

01:56.530 --> 01:59.930
más tipos y también instalar "@types/express" para instalar

01:59.930 --> 02:02.410
tipos específicos de express.

02:02.410 --> 02:04.320
Y ese es un patrón que ya conoces.

02:04.320 --> 02:06.850
Lo vimos en la sección de la biblioteca de

02:06.850 --> 02:08.350
terceros del curso.

02:08.350 --> 02:12.030
Allí, también te mostré cómo puedes instalar paquetes de tipos para

02:12.030 --> 02:15.220
obtener un mejor soporte en tus scripts de TypeScript.

02:15.220 --> 02:19.320
Así que con este tipo añadido, sin ninguna configuración

02:19.320 --> 02:22.030
extra, Hah, sigue sin funcionar.

02:22.030 --> 02:23.140
Bueno, la razón es la sintaxis

02:23.140 --> 02:25.330
de importación que estamos usando aquí.

02:25.330 --> 02:28.270
Esto es lo común. js sintaxis de importación

02:28.270 --> 02:30.450
que nota. js utiliza por defecto,

02:30.450 --> 02:33.660
pero aquí estamos realmente en un entorno en TypeScript donde podemos

02:33.660 --> 02:36.140
utilizar una sintaxis de importación diferente.

02:36.140 --> 02:38.230
Podemos utilizar la misma sintaxis de importación

02:38.230 --> 02:40.373
que conocemos de los módulos ES en el navegador.

02:41.240 --> 02:46.240
Así, por ejemplo, podemos utilizar "import express from 'express'".

02:46.710 --> 02:48.620
Y si hacemos eso y luego pasamos el ratón por encima de "app",

02:48.620 --> 02:49.910
verás que ahora es de tipo 'Express'.

02:49.910 --> 02:53.040
Así que ahora tenemos soporte para TypeScript.

02:53.040 --> 02:54.569
Ahora, una nota importante.

02:54.569 --> 02:58.790
En la nota. js también existe una sintaxis

02:58.790 --> 03:00.810
similar a ésta.

03:00.810 --> 03:03.420
Ahora está bajo una bandera experimental, y ha

03:03.420 --> 03:06.190
estado bajo esa bandera durante mucho tiempo, por

03:06.190 --> 03:10.010
lo que el uso común. js en la nota. js es, con mucho, la forma

03:10.010 --> 03:13.482
por defecto y más común de añadir importaciones y exportaciones.

03:13.482 --> 03:16.060
La sintaxis que se ve como esta es soportada si se establece

03:16.060 --> 03:18.380
esta bandera experimental, pero aquí en este

03:18.380 --> 03:19.990
código en realidad no estamos usando

03:19.990 --> 03:24.012
este nodo experimental. js sintaxis.

03:24.012 --> 03:26.209
En su lugar, estamos utilizando TypeScript.

03:26.209 --> 03:29.859
Una vez que compilemos esto a JavaScript esto cambiará.

03:29.859 --> 03:31.860
Y puedo mostrarte esto para que

03:31.860 --> 03:34.060
también podamos ejecutarlo.

03:34.060 --> 03:36.230
Si ejecuta "tsc" aquí, tal vez

03:36.230 --> 03:40.330
"tsc-w" para entrar ya en el modo de vigilancia, verá que

03:40.330 --> 03:42.680
esto inicia la compilación.

03:42.680 --> 03:44.110
Crea una carpeta dist, y allí

03:44.110 --> 03:46.770
tenemos una aplicación. js, y aquí, esto

03:46.770 --> 03:50.040
ahora se ve diferente.

03:50.040 --> 03:54.500
Verás, allí ahora no se configura esa importación como la

03:54.500 --> 03:55.710
tenemos aquí.

03:55.710 --> 03:58.900
En cambio, utiliza una sintaxis diferente.

03:58.900 --> 04:02.350
Así que aquí, este es el código que realmente se ejecutará.

04:02.350 --> 04:04.780
Y podemos ejecutar esto con nodemon con esta

04:04.780 --> 04:07.640
herramienta que reinicia automáticamente el servidor

04:07.640 --> 04:09.470
si nuestro código cambia abriendo

04:09.470 --> 04:12.230
una nueva pestaña aquí en la terminal.

04:12.230 --> 04:13.620
Mantén la otra pestaña abierta

04:13.620 --> 04:15.960
porque ese es nuestro proceso de compilación de TypeScript,

04:15.960 --> 04:18.760
y en esa nueva pestaña queremos iniciar nuestro servidor con la

04:18.760 --> 04:20.095
ayuda de nodemon.

04:20.095 --> 04:22.990
Para ello, vamos al paquete. json y añadir un nuevo

04:22.990 --> 04:26.260
script, un script de inicio tal vez, donde decimos

04:26.260 --> 04:30.900
"nodemon dist/app. js" para que nodemon ejecute este

04:30.900 --> 04:34.200
archivo en la carpeta dist y arranque nuestro

04:34.200 --> 04:36.360
servidor con eso.

04:36.360 --> 04:39.430
Y con eso añadido y el paquete. json guardado podemos ejecutar

04:39.430 --> 04:43.240
npmstart para poner en marcha nuestro servidor de desarrollo.

04:43.240 --> 04:47.710
Y ahora está sirviendo esta aplicación dist. js Ahora esa es la configuración general

04:47.710 --> 04:49.230
que tenemos, y eso es TypeScript

04:49.230 --> 04:52.030
ya haciendo algo de trabajo aquí.

04:52.030 --> 04:53.940
También tenemos TypeSupport.

04:53.940 --> 04:55.360
Y aquí se ve en la aplicación. n este caso podemos

04:55.360 --> 04:57.756
escribir un código que nos resulte muy familiar

04:57.756 --> 05:01.420
con la sintaxis de importación/exportación que ya conocemos, pero lo

05:01.420 --> 05:03.640
que obtenemos como salida es al final un nodo

05:03.640 --> 05:07.000
JavaScript normal. js y que es extremadamente

05:07.000 --> 05:09.640
útil.

05:09.640 --> 05:12.140
Ahora con eso, vamos a hacer cosas más útiles que

05:12.140 --> 05:15.003
simplemente arrancar un servidor que no hace nada.
