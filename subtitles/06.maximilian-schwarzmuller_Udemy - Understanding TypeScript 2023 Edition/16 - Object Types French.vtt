WEBVTT

00:02.280 --> 00:03.780
Instructeur : Creusons plus profondément

00:03.780 --> 00:06.450
dans les types de base que TypeScript supporte.

00:06.450 --> 00:09.800
Le type suivant qui est intéressant est le type objet.

00:09.800 --> 00:13.100
Maintenant, vous connaissez les objets en JavaScript, ils ressemblent à ça.

00:13.100 --> 00:14.690
Vous avez des accolades, puis

00:14.690 --> 00:16.350
des paires clé-valeur, et ces

00:16.350 --> 00:20.460
valeurs sont également traitées comme des types d'objets en TypeScript,

00:20.460 --> 00:22.250
de sorte que tout objet JavaScript

00:22.250 --> 00:23.620
est de type objet.

00:23.620 --> 00:28.410
Bien que je dirai déjà qu'il existe des versions plus spécifiques des objets en TypeScript

00:28.410 --> 00:30.030
afin que vous puissiez dire

00:30.030 --> 00:32.514
que ce n'est pas n'importe quel objet, c'est

00:32.514 --> 00:35.108
un objet qui doit avoir ces propriétés ou qui

00:35.108 --> 00:37.260
doit être basé sur telle ou telle fonction

00:37.260 --> 00:39.490
de construction.

00:39.490 --> 00:41.322
Mais nous y arriverons étape par étape.

00:41.322 --> 00:45.110
Pour plonger dans les objets, je vais tout d'abord renommer l'application. ici et je vais renommer

00:45.110 --> 00:49.770
ça en base. ts ici.

00:49.770 --> 00:52.058
Et ajoutez une nouvelle application. ts, qui remplacera alors

00:52.058 --> 00:55.400
l'ancienne application. js une fois que nous l'avons compilé,

00:55.400 --> 00:58.600
où nous pouvons maintenant nous plonger dans les objets.

00:58.600 --> 01:01.110
Commençons par créer un objet de base ici,

01:01.110 --> 01:03.902
disons une personne avec des accolades ici.

01:03.902 --> 01:05.870
Et nous lui donnons un nom.

01:05.870 --> 01:08.230
Ici, je vais choisir Maximilien parce

01:08.230 --> 01:10.700
que c'est mon nom et que j'ai 30 ans.

01:10.700 --> 01:14.930
Maintenant, bien sûr, nous pouvons consoler. log person ici et si nous le

01:14.930 --> 01:18.375
faisons, et que nous compilons ceci sans surprise,

01:18.375 --> 01:24.536
nous devrions voir cet objet être imprimé ici dans la console.

01:24.536 --> 01:27.284
Maintenant, ce que nous pouvons également

01:27.284 --> 01:31.690
faire en JavaScript est d'essayer d'accéder, disons, au pseudo, une

01:31.690 --> 01:33.970
propriété qui n'existe pas ici.

01:33.970 --> 01:37.320
Vous voyez immédiatement que TypeScript n'est pas très

01:37.320 --> 01:39.820
heureux de cela, et donc mon IDE me le dit.

01:39.820 --> 01:42.302
Il me dit que le surnom de propriété n'existe

01:42.302 --> 01:44.050
pas sur ce type.

01:44.050 --> 01:47.642
Donc, si nous sauvegardons cela et que j'essaie de le compiler, nous

01:47.642 --> 01:49.907
obtenons effectivement la même erreur.

01:49.907 --> 01:52.210
Le compilateur TypeScript n'aime pas cela

01:52.210 --> 01:54.401
et il me dit que nous n'avons pas de propriété

01:54.401 --> 01:56.430
nickname sur cet objet.

01:56.430 --> 01:59.813
Il découvre que nous n'avons pas cette propriété nickname parce

01:59.813 --> 02:02.936
que si nous survolons person qu'il a déduit, nous pouvons voir

02:02.936 --> 02:05.710
qu'il y a un deux-points après person, donc après le nom

02:05.710 --> 02:07.970
de la variable ou de la constante.

02:07.970 --> 02:11.030
Il en a déduit que c'est le type de données qui

02:11.030 --> 02:12.110
y est stocké.

02:12.110 --> 02:14.181
Maintenant, ce n'est pas seulement un objet, comme vous pouvez le voir.

02:14.181 --> 02:16.349
C'est un objet concret.

02:16.349 --> 02:18.920
C'est un objet avec une clé de nom, où le type,

02:18.920 --> 02:21.430
à son tour, doit être une chaîne.

02:21.430 --> 02:24.700
Et la clé de l'âge, où le type doit être un nombre.

02:24.700 --> 02:27.116
Et en fait, ça peut être déroutant ici.

02:27.116 --> 02:31.100
Ceci, ici, ressemble évidemment à un objet JavaScript.

02:31.100 --> 02:33.980
Accolades, paires clé-valeur.

02:33.980 --> 02:36.020
La première chose importante à voir ici est

02:36.020 --> 02:38.520
que nous avons un point-virgule après chaque ligne.

02:38.520 --> 02:40.580
Nous n'avons pas cela dans un objet JavaScript.

02:40.580 --> 02:41.750
Nous avons une virgule ici.

02:41.750 --> 02:44.160
Et en effet, il ne s'agit pas ici d'un objet JavaScript

02:44.160 --> 02:45.940
qui est créé quelque part.

02:45.940 --> 02:50.600
Il s'agit du type d'objet déduit par TypeScript et les types d'objets

02:50.600 --> 02:53.914
sont écrits presque comme des objets, mais bien

02:53.914 --> 02:57.106
sûr, nous n'avons pas de paires clé-valeur, mais

02:57.106 --> 02:59.239
des paires clé-type.

02:59.239 --> 03:02.840
Les types d'objets sont là pour décrire, eh bien, le

03:02.840 --> 03:06.064
type d'objet qui est utilisé quelque part.

03:06.064 --> 03:07.653
Nous pourrions être plus génériques.

03:07.653 --> 03:10.420
Je pourrais explicitement attribuer

03:10.420 --> 03:13.640
un type ici à la constante de l'objet.

03:13.640 --> 03:16.100
Object est l'un des types intégrés, tout comme le

03:16.100 --> 03:17.460
nombre et la chaîne de caractères,

03:17.460 --> 03:21.030
et maintenant, si je passe la souris sur ce type, nous voyons des personnes

03:21.030 --> 03:24.000
de type object et maintenant TypeScript ne se soucie que du

03:24.000 --> 03:26.430
fait que c'est un type object.

03:26.430 --> 03:28.423
Maintenant, même si nous compilons

03:28.423 --> 03:32.808
ce code, nous obtenons cette erreur, car TypeScript analyse toujours notre code

03:32.808 --> 03:35.490
et voit que nous essayons d'accéder à quelque chose

03:35.490 --> 03:36.666
qui n'existe pas, mais

03:36.666 --> 03:39.770
il est important de comprendre que tout commence avec ce

03:39.770 --> 03:42.140
type d'objet le plus générique.

03:42.140 --> 03:44.660
Mais souvent, il faut être plus précis que cela.

03:44.660 --> 03:47.623
Vous ne voulez pas seulement travailler avec ce type d'objet générique.

03:47.623 --> 03:50.284
Vous voulez vraiment bénéficier d'un soutien total.

03:50.284 --> 03:53.550
Par exemple, actuellement, si j'ajoute un point ici et que

03:53.550 --> 03:55.570
je jette un coup d'œil à mon autocomplétion,

03:55.570 --> 03:58.080
mon IDE ne m'aide pas du tout.

03:58.080 --> 04:00.303
La raison en est que tout ce que nous

04:00.303 --> 04:04.230
disons à l'IDE est que nous avons une valeur ici, en personne,

04:04.230 --> 04:05.860
qui est de type objet.

04:05.860 --> 04:08.300
En effet, maintenant nous obtenons également une

04:08.300 --> 04:10.210
erreur si j'essaie d'accéder au nom.

04:10.210 --> 04:12.270
Le nom existe ici, non ?

04:12.270 --> 04:14.120
Mais ce que nous disons à TypeScript ici

04:14.120 --> 04:16.601
est que nous avons juste un objet où nous ne donnons

04:16.601 --> 04:18.889
aucune de nos informations à TypeScript.

04:18.889 --> 04:21.739
Donc, en fait, TypeScript ne supporte aucun

04:21.739 --> 04:24.750
type de propriété parce que nous ne lui disons

04:24.750 --> 04:26.210
rien sur l'objet.

04:26.210 --> 04:28.050
Nous devrions donc être plus précis.

04:28.050 --> 04:32.000
Et nous sommes plus précis en définissant un type d'objet spécifique.

04:32.000 --> 04:34.795
Ce que TypeScript a également déduit automatiquement.

04:34.795 --> 04:38.548
Pour ce faire, nous ajoutons des accolades après

04:38.548 --> 04:43.370
les deux-points, après notre nom de const ou de variable.

04:43.370 --> 04:46.213
Donc, ici, on ne crée pas un nouvel objet JavaScript.

04:46.213 --> 04:48.460
Cela sera en fait supprimé du code

04:48.460 --> 04:50.310
JavaScript compilé.

04:50.310 --> 04:52.643
Il s'agit simplement de la notation TypeScript

04:52.643 --> 04:55.855
d'un type d'objet spécialisé, pour ainsi dire.

04:55.855 --> 04:59.422
Donc d'un type d'objet où nous fournissons quelques informations

04:59.422 --> 05:01.434
sur la structure de l'objet.

05:01.434 --> 05:04.520
Maintenant, en assignant une paire d'accolades vide comme type,

05:04.520 --> 05:07.440
nous faisons essentiellement la même chose qu'avec object.

05:07.440 --> 05:09.765
Nous disons à TypeScript que c'est un objet quelconque.

05:09.765 --> 05:12.740
Maintenant, nous pouvons être plus précis.

05:12.740 --> 05:16.550
Nous pouvons ajouter des entrées de valeur de clé ici, cependant

05:16.550 --> 05:19.694
pas de valeur de clé, mais plutôt de type de clé.

05:19.694 --> 05:22.800
Donc ici, nous pourrions dire que l'objet qui

05:22.800 --> 05:25.091
doit être stocké dans person doit avoir

05:25.091 --> 05:28.197
une propriété de nom et la valeur de cette propriété

05:28.197 --> 05:31.140
de nom doit être de type string.

05:31.140 --> 05:33.795
Nous décrivons donc ici le type de valeur qui

05:33.795 --> 05:36.440
sera éventuellement stocké dans le nom.

05:36.440 --> 05:39.320
Au fait, vous voyez que j'ai une erreur ici.

05:39.320 --> 05:41.090
Parce que ce que je dis à TypeScript

05:41.090 --> 05:43.489
maintenant est que ma personne devrait avoir

05:43.489 --> 05:45.900
un objet avec exactement une paire clé-valeur,

05:45.900 --> 05:48.626
où la clé est le nom et la valeur de cette clé est une chaîne,

05:48.626 --> 05:52.730
mais nous n'avons pas assigné un objet avec deux paires clé-valeur.

05:52.730 --> 05:55.020
Le nom, qui contient une chaîne de caractères,

05:55.020 --> 05:58.500
est acceptable, mais l'âge, qui contient un nombre, ne l'est pas.

05:58.500 --> 06:01.140
Nous devons donc l'ajuster en ajoutant un point-virgule

06:01.140 --> 06:03.520
et en ajoutant une autre paire clé-valeur ici où

06:03.520 --> 06:06.300
nous disons que l'âge doit être de type nombre.

06:06.300 --> 06:09.670
Donc, pas 30 ici, ce qui serait en fait pris en charge dans TypeScript,

06:09.670 --> 06:12.673
que nous limitons à un nombre spécifique, mais alors nous allons

06:12.673 --> 06:15.600
rencontrer des problèmes dès que nous changeons cela.

06:15.600 --> 06:19.060
Au lieu de cela, ici je veux juste dire que l'âge devrait être un certain nombre.

06:19.060 --> 06:22.360
Et maintenant nous assignons explicitement le même

06:22.360 --> 06:24.870
TypeScript déduit auparavant.

06:24.870 --> 06:26.900
Comme vous l'avez appris, ce n'est pas une bonne pratique,

06:26.900 --> 06:28.570
mais pour comprendre les types d'objets,

06:28.570 --> 06:29.940
je voulais le faire ici.

06:29.940 --> 06:32.315
C'est quand même quelque chose que vous pouvez faire.

06:32.315 --> 06:37.010
Il est préférable de laisser TypeScript déduire ceci comme

06:37.010 --> 06:40.440
nous le faisions auparavant, comme ceci.

06:40.440 --> 06:42.351
Maintenant, juste pour montrer

06:42.351 --> 06:45.450
quelque chose d'intéressant, si je retourne à ce code

06:45.450 --> 06:47.970
sous-optimal, où nous assignons explicitement

06:47.970 --> 06:49.920
un type que TypeScript serait capable

06:49.920 --> 06:54.920
de déduire, si nous compilons ce code, bien sûr il fonctionne.

06:55.180 --> 06:56.900
Nous pouvons accéder à la propriété name, mais si nous jetons

06:56.900 --> 06:59.077
ensuite un coup d'œil à app. js nous voyons que ce

06:59.077 --> 07:01.220
type d'affectation est supprimé ici.

07:01.220 --> 07:03.417
Et cela, bien sûr, devrait être quelque chose d'attendu.

07:03.417 --> 07:06.290
Comme je l'ai mentionné, les types et les affectations de type

07:06.290 --> 07:08.120
ne font pas partie de JavaScript.

07:08.120 --> 07:09.460
Ils sont uniquement en TypeScript.

07:09.460 --> 07:10.800
Je voulais juste le montrer à nouveau

07:10.800 --> 07:12.840
pour qu'il soit bien clair que cette syntaxe ne

07:12.840 --> 07:15.080
crée pas un objet JavaScript, qui se trouve quelque

07:15.080 --> 07:16.485
part dans notre code.

07:16.485 --> 07:21.263
Il s'agit simplement de la représentation TypeScript d'un type d'objet qui

07:21.263 --> 07:24.570
aide TypeScript à comprendre les objets avec lesquels

07:24.570 --> 07:25.900
vous travaillez.

07:25.900 --> 07:29.950
La meilleure syntaxe, bien sûr, est celle-ci, comme vous l'avez appris.
