WEBVTT

00:01.850 --> 00:03.270
Eğitmen: Artık TypeScript'in

00:03.270 --> 00:06.760
temellerini ve JavaScript'ten ne kadar farklı olduğunu

00:06.760 --> 00:09.661
bildiğimize göre, TypeScript'in bildiği farklı

00:09.661 --> 00:11.410
çekirdek türlerini biraz daha

00:11.410 --> 00:14.148
derinlemesine inceleyelim.

00:14.148 --> 00:17.490
Burada gördüğümüz sayı türüdür ve açıkladığım gibi, buradaki beş gibi

00:17.490 --> 00:18.500
tam sayılar ile diğer

00:18.500 --> 00:22.050
programlama dillerinde adlandırıldığı gibi kayan sayılar veya çiftler

00:22.050 --> 00:25.640
arasında 2 gibi bir fark yoktur.

00:25.640 --> 00:25.640
8 burada.

00:25.640 --> 00:28.440
Aslında, JavaScript'te ve aynı şey TypeScript'te de geçerlidir,

00:28.440 --> 00:30.810
tüm sayılar varsayılan olarak float'tır.

00:30.810 --> 00:33.270
Bu nedenle, JavaScript için ve dolayısıyla TypeScript

00:33.270 --> 00:35.171
için, bunun gibi beş ile bunun gibi beş arasında

00:35.171 --> 00:36.770
hiçbir fark yoktur.

00:36.770 --> 00:38.640
Aslında aynı sayı.

00:38.640 --> 00:42.720
Şimdi, sayıların yanı sıra başka çekirdek türlerimiz de var.

00:42.720 --> 00:46.350
Bu da dizeler, yani metin ve boolean'lar olacaktır.

00:46.350 --> 00:47.800
Bunlara da bir göz atalım.

00:47.800 --> 00:50.650
Aslında bunların hepsini burada, biraz gereksiz olduğunu

00:50.650 --> 00:53.291
öğrendiğimiz bu if ifadesinde gördük.

00:53.291 --> 00:55.971
Yine de, bu bir dizi olabilir.

00:55.971 --> 00:57.720
Ayrıca, elbette, tırnak işaretli

00:57.720 --> 01:00.389
beş, metin olduğu için bir dize olacaktır.

01:00.389 --> 01:03.851
Ve örneğin buradaki karşılaştırmanın sonucu bir boolean

01:03.851 --> 01:05.170
olacaktır.

01:05.170 --> 01:08.090
Bu operatör, üçlü eşittir işareti veya

01:08.090 --> 01:10.950
burada olumsuzlanmış eşitlik operatörü,

01:10.950 --> 01:13.640
doğru veya yanlış üretir.

01:13.640 --> 01:14.720
Ve elbette, dinamik

01:14.720 --> 01:17.340
olarak bir içRef kontrolü üretebiliriz, ki bunu

01:17.340 --> 01:18.850
sıklıkla yaparız.

01:18.850 --> 01:22.340
Ya da bir değişkeni doğru veya yanlış bir değerle başlatırız, bu yüzden burada her

01:22.340 --> 01:23.379
ikisini de yapalım.

01:23.379 --> 01:27.509
Burada, "printResult" adında yeni bir sabit ekleyebiliriz.

01:27.509 --> 01:29.990
Ve bunu örneğin true olarak ayarlayın.

01:29.990 --> 01:31.320
Ve gerçekten açıklığa kavuşturmak

01:31.320 --> 01:33.130
için, bu da bir değişken olabilir.

01:33.130 --> 01:34.460
Sabit olmak zorunda değil.

01:34.460 --> 01:36.030
JavaScript'te let ile oluşturacağınız

01:36.030 --> 01:37.730
bir değişken olabilir.

01:37.730 --> 01:39.870
Ancak burada değiştirmeyi planlamadığım için sabit bir şekilde

01:39.870 --> 01:40.703
devam edeceğim.

01:40.703 --> 01:43.670
Ve bunu burada üçüncü bir parametre olarak aktarabiliriz.

01:43.670 --> 01:46.960
Diyelim ki burada geçerli olan "printResult" ifadesini geçtik.

01:46.960 --> 01:49.720
Şimdi hemen bir hata alıyoruz, çünkü add fonksiyonumuz

01:49.720 --> 01:53.160
üçüncü bir argümanı desteklemiyor.

01:53.160 --> 01:55.560
"İki argüman bekliyorduk ama üç argüman aldık".

01:55.560 --> 01:57.260
Dolayısıyla, üçüncü bir argümanı desteklediğimizden

01:57.260 --> 01:58.920
emin olmalıyız.

01:58.920 --> 02:03.920
Ve oraya bir "showResult" parametresi ekleyebiliriz.

02:03.940 --> 02:05.920
Burada "printResult" olarak da adlandırabilirsiniz.

02:05.920 --> 02:07.910
İsimlendirme ile ilgili karışıklığı önlemek

02:07.910 --> 02:11.340
için "showResult" ile devam ediyorum, ancak teknik olarak bu iki isim

02:11.340 --> 02:12.930
çakışmayacaktır.

02:12.930 --> 02:14.320
Bu yüzden, burada buna "showResult" adını vereceğim.

02:14.320 --> 02:17.580
Ve bunu boolean olarak ayarlayarak bunun boolean türünde olduğundan

02:17.580 --> 02:19.500
emin olmak istiyorum.

02:19.500 --> 02:22.109
Yine, burada parametreden sonra iki nokta üst

02:22.109 --> 02:25.120
üste ekleyerek ve ardından türün adını ekleyerek.

02:25.120 --> 02:28.100
Şimdi bu fonksiyon bunu kabul eder ve şimdi yapabileceğimiz

02:28.100 --> 02:31.787
şey buraya bir if kontrolü ekleyip "if showResult" kontrolünü yapmaktır,

02:31.787 --> 02:36.480
eğer bu doğruysa, elbette bunu true ile karşılaştırabiliriz.

02:36.480 --> 02:37.628
Ancak JavaScript'te

02:37.628 --> 02:41.990
bildiğiniz gibi, burada truthy veya falsy değerini de geçebilirsiniz.

02:41.990 --> 02:43.970
Ve JavaScript bunu değerlendirecek ve eğer

02:43.970 --> 02:47.389
bu bir şekilde doğru ya da genel olarak doğru bir değer verirse, o zaman bunu

02:47.389 --> 02:48.989
if bloğuna dönüştüreceğiz.

02:48.989 --> 02:50.011
Aksi takdirde, yapmayız.

02:50.011 --> 02:52.900
Diyelim ki buraya girebildik, o zaman ben de "konsol"

02:52.900 --> 02:55.429
istiyorum. log n1 artı n2".

02:55.429 --> 02:58.581
Aksi takdirde, başka bir durumda, oraya giremezsek, o

02:58.581 --> 03:00.549
zaman bunu döndürmek istiyorum.

03:00.549 --> 03:02.300
Şimdi bu, bazen bir değer

03:02.300 --> 03:04.760
döndüren ve bazen de bir değer döndürmeyen,

03:04.760 --> 03:08.309
ancak hemen çıktı veren bir işlevdir.

03:08.309 --> 03:11.550
Şimdi, eğer böyle bir fonksiyon yazmak istiyorsanız, bunun

03:11.550 --> 03:14.310
öngörülemez olduğunu veya buraya bir true değeri geçerseniz

03:14.310 --> 03:16.651
beklenmedik şekilde davranabileceğini iddia

03:16.651 --> 03:18.349
edebilirsiniz.

03:18.349 --> 03:19.990
Ama burada, bunu yapıyoruz.

03:19.990 --> 03:22.090
Dolayısıyla bu işlev yalnızca bazen geri döner.

03:22.090 --> 03:24.869
Bazen de geri dönmez, bunun yerine

03:24.869 --> 03:27.830
konsola bir şeyler kaydeder.

03:27.830 --> 03:31.120
Şimdi burada, aslında add'i bu şekilde çağırabiliriz

03:31.120 --> 03:33.640
ve bunu sonuçta saklamamız ve konsola

03:33.640 --> 03:37.570
göndermemiz gerekmez. log sonucu çünkü "printResult" true olarak

03:37.570 --> 03:39.550
ayarlandığında kendini ekler.

03:39.550 --> 03:41.869
Böylece fonksiyonun kendisi sonucu yazdıracaktır.

03:41.869 --> 03:43.640
Dolayısıyla, şimdi bunu kaydedersek

03:43.640 --> 03:47.880
ve uygulamamızı yeniden derlersek. ts dosyasını tsc komutu ile buraya yükleyin.

03:47.880 --> 03:50.830
Bu işlem tamamlandıktan sonra sayfa yeniden yüklenir ve burada

03:50.830 --> 03:52.600
çıktımızı görmeye devam ederiz.

03:52.600 --> 03:54.677
Ama şimdi altıncı hattan geliyor.

03:54.677 --> 03:57.690
Ve eğer bir göz atarsak, altıncı satırın gerçekten de fonksiyonun

03:57.690 --> 03:58.980
içinde olduğunu görürüz.

03:58.980 --> 03:59.891
Yani bu bir boolean.

03:59.891 --> 04:02.429
Şimdi diyelim ki çıktıyı özelleştirmek istiyoruz.

04:02.429 --> 04:06.190
Buradaki if'te, "Result is" iki nokta üst üste ve ardından biraz

04:06.190 --> 04:10.181
beyaz boşluk dediğimiz bir "resultPhrase" sabitimiz var.

04:10.181 --> 04:14.205
Ve bunu da burada "resultPhrase" ile iletiyoruz.

04:14.205 --> 04:17.410
O zaman bunu burada da bir argüman olarak bekleyebiliriz.

04:17.410 --> 04:20.750
İfade, iki nokta üst üste ekleyerek boru dizesi verir.

04:20.750 --> 04:22.291
Ve sonra string türün adıdır

04:22.291 --> 04:26.469
ve şimdi sonucu doğrudan fonksiyonun içinde yazdırıyorsak, bu ifadeyi

04:26.469 --> 04:31.193
sonuç çıktımızın bir parçası olarak çıktı vermek için kullanabiliriz.

04:31.193 --> 04:34.789
O halde, burada "ifade artı n1 artı n2" olabilir.

04:34.789 --> 04:37.440
Bunu yapar ve bu komutu tekrarlayarak yeniden

04:37.440 --> 04:39.040
derlersek, bu ifadenin sonucun

04:39.040 --> 04:41.720
bir parçası olduğunu görürüz.

04:41.720 --> 04:44.861
Ancak şimdi eski hatayı da yeniden ortaya çıkardık çünkü

04:44.861 --> 04:48.141
elimde iki sayıyla birleştirdiğim bir dize var.

04:48.141 --> 04:52.000
Burada her şey bir dizeye dönüştürülüyor ve benim istediğim

04:52.000 --> 04:53.240
bu değil.

04:53.240 --> 04:55.930
Bunu önlemek için, bu fonksiyonda buraya bir sonuç

04:55.930 --> 04:57.708
değişkeni ekleyebiliriz.

04:57.708 --> 05:02.027
Veya bir sonuç sabiti ve sonucumuzu burada saklayın.

05:02.027 --> 05:04.530
Bu şimdi matematiksel bir şekilde ele alınacaktır

05:04.530 --> 05:07.990
çünkü sadece sayılar söz konusudur ve daha sonra burada bunu ifade

05:07.990 --> 05:11.430
ile birleştirebilir veya sadece geri döndürebiliriz.

05:11.430 --> 05:15.160
Ve şimdi, bu hiçbir zaman doğrudan bir dizeyle birlikte hesaplanmadığından,

05:15.160 --> 05:17.029
bu her zaman bir sayı olacaktır.

05:17.029 --> 05:19.350
Ve evet, o zaman burada, bu sayı bu dizeyle birleştirilerek

05:19.350 --> 05:21.140
bir dizeye dönüştürülecektir.

05:21.140 --> 05:24.360
Ancak matematiksel hesaplama bundan önce bittiğinden, doğru

05:24.360 --> 05:25.548
sonucu elde edeceğiz.

05:25.548 --> 05:28.520
Şimdi bunu tekrarlar ve yeniden derlersek doğru

05:28.520 --> 05:30.181
çıktıyı elde ederiz.

05:30.181 --> 05:33.050
İşte şimdi temel veri türleri iş başında.

05:33.050 --> 05:35.541
Şimdi türlerin nasıl atandığını ve ayrıca

05:35.541 --> 05:38.061
türleri neden orada açıkça atamadığımızı

05:38.061 --> 05:41.343
tam olarak anladığımızdan emin olalım.
