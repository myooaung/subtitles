WEBVTT

00:02.300 --> 00:03.420
Tutor: Per iniziare,

00:03.420 --> 00:07.060
lancerò npm start per far apparire il server di sviluppo.

00:07.060 --> 00:09.384
Che serve il file HTML e la scheda menu, tsc-w

00:09.384 --> 00:13.434
per avviare i tipi di compilazione in modalità watch, in modo che il file

00:13.434 --> 00:17.988
JavaScript della nostra applicazione venga continuamente ricostruito e sia possibile

00:17.988 --> 00:21.740
visualizzarlo nell'applicazione in esecuzione.

00:21.740 --> 00:24.480
In questo momento, ovviamente, la nostra applicazione non ha un aspetto troppo sofisticato.

00:24.480 --> 00:26.340
È una pagina vuota.

00:26.340 --> 00:27.850
Quindi, per iniziare,

00:27.850 --> 00:30.250
ci sono molti modi per farlo.

00:30.250 --> 00:35.040
Ora, voglio iniziare a rendere visibile questo modulo.

00:35.040 --> 00:36.660
E ora, ci sono molti modi, scriverò

00:36.660 --> 00:38.790
questa applicazione con un approccio orientato

00:38.790 --> 00:40.208
agli oggetti.

00:40.208 --> 00:43.303
Il che è facoltativo al 100%, ma dato che abbiamo

00:43.303 --> 00:46.080
imparato a conoscere le classi e così via,

00:46.080 --> 00:48.083
voglio mostrare come funziona

00:48.083 --> 00:51.140
e quindi userò questo approccio.

00:51.140 --> 00:51.973
Quindi, nella chiave

00:51.973 --> 00:55.510
dell'applicazione, aggiungerò una nuova classe e la chiamerò Project

00:55.510 --> 00:59.120
Input, anche se il nome della classe dipende interamente da voi.

00:59.120 --> 01:00.570
Ora, in questa classe, il nostro

01:00.570 --> 01:04.590
obiettivo deve essere quello di ottenere l'accesso a questo template e al

01:04.590 --> 01:08.220
form in esso contenuto e di ottenere l'accesso a questo div qui, per

01:08.220 --> 01:11.710
poi rendere il nostro template in quel div alla fine.

01:11.710 --> 01:15.160
Quindi il contenuto del modello, il modulo in quel div.

01:15.160 --> 01:17.130
Questo deve essere il nostro obiettivo.

01:17.130 --> 01:18.850
Per ottenere questo risultato,

01:18.850 --> 01:20.588
qui in Project Input, aggiungerò

01:20.588 --> 01:23.450
un costruttore in cui alla fine voglio ottenere

01:23.450 --> 01:25.920
l'accesso al mio template e al luogo in cui

01:25.920 --> 01:27.970
deve essere reso.

01:28.830 --> 01:33.310
Per questo, aggiungerò due proprietà al volo, la

01:33.310 --> 01:37.460
proprietà dell'elemento modello e la proprietà

01:37.460 --> 01:40.180
dell'elemento host.

01:40.180 --> 01:42.420
I nomi dipendono al 100% da voi.

01:42.420 --> 01:44.990
Alla fine la mia idea è che l'elemento host contenga

01:44.990 --> 01:46.970
un riferimento all'elemento in cui voglio

01:46.970 --> 01:49.650
rendere il contenuto del mio template e che l'elemento

01:49.650 --> 01:51.427
template mi dia accesso al template

01:51.427 --> 01:54.050
che contiene questo contenuto.

01:54.050 --> 01:56.120
Per accedere a questo modello, diamo

01:56.120 --> 01:59.690
un'occhiata all'indice html e vediamo come identificare il

01:59.690 --> 02:01.870
modello che contiene il modulo.

02:01.870 --> 02:04.050
Ha questo ID di ingresso al progetto, quindi

02:04.050 --> 02:06.120
sembra una buona strategia.

02:06.120 --> 02:08.510
Quindi possiamo usare il documento

02:08.510 --> 02:11.022
getElementById project-input.

02:11.022 --> 02:15.410
In questo modo si accede a questo elemento del modello.

02:15.410 --> 02:17.820
Ora, un paio di cose importanti.

02:17.820 --> 02:21.320
Qui si ottiene un errore che indica che l'elemento template è una

02:21.320 --> 02:23.900
proprietà che non esiste in project-input.

02:23.900 --> 02:28.140
Per sbarazzarci di questo, dovremmo aggiungerlo come

02:28.140 --> 02:31.610
nuovo campo direttamente nella classe.

02:31.610 --> 02:34.050
Allora possiamo assegnarglielo con sicurezza.

02:34.050 --> 02:36.040
Ora, vorrei che fosse chiaro anche il tipo che

02:36.040 --> 02:37.450
verrà memorizzato lì dentro.

02:37.450 --> 02:41.070
E questo sarà un elemento template HTML.

02:41.070 --> 02:43.270
Questo tipo è disponibile a livello

02:43.270 --> 02:47.380
globale, perché nel file tsconfig js ho aggiunto il DOM come lib

02:47.380 --> 02:50.360
e questo aggiunge tutti questi tipi di DOM, tutti

02:50.360 --> 02:53.777
questi tipi di elementi HTML come tipi di codice all'intero

02:53.777 --> 02:55.493
progetto.

02:57.280 --> 03:00.400
Ora, però, questo infonde un nuovo errore: si vede che

03:00.400 --> 03:03.110
alla fine potrebbe essere nullo quando si ottiene

03:03.110 --> 03:04.760
l'elemento in base all'ID, ovviamente

03:04.760 --> 03:08.510
sappiamo che non fallirà, ma typescript non ha alcuna possibilità

03:08.510 --> 03:09.850
di saperlo perché non analizzerà

03:09.850 --> 03:12.757
il nostro file html.

03:12.757 --> 03:16.210
Quindi forse non esiste alcun elemento con questo ID e quindi

03:16.210 --> 03:18.210
il risultato sarebbe nullo.

03:18.210 --> 03:20.680
Qui diciamo che non memorizziamo

03:20.680 --> 03:23.920
null, ma solo l'elemento template HTML.

03:23.920 --> 03:25.800
Quindi, per eliminare questo pericolo,

03:25.800 --> 03:29.470
dobbiamo dire a typescript che questo non sarà mai nullo.

03:29.470 --> 03:31.290
E sapete come potete farlo?

03:31.290 --> 03:33.580
È possibile aggiungere un punto esclamativo qui.

03:33.580 --> 03:35.020
Un'alternativa, naturalmente,

03:35.020 --> 03:36.170
per mostrare anche

03:36.170 --> 03:37.820
questo, se non si è sicuri,

03:37.820 --> 03:41.640
è quella di memorizzarlo, diciamo, in una costante e poi

03:41.640 --> 03:48.600
controllare se l'elemento template è vero, quindi se non è nullo e poi memorizzarlo all'interno di questo

03:48.600 --> 03:51.490
controllo if.

03:51.490 --> 03:52.720
Ora, riceviamo ancora un errore,

03:52.720 --> 03:54.190
ma si tratta di un errore diverso,

03:54.190 --> 03:55.840
su cui tornerò più avanti.

03:55.840 --> 03:58.060
Per il momento, se non siamo sicuri, questa

03:58.060 --> 03:59.650
soluzione è sufficiente.

03:59.650 --> 04:01.930
Ora, però, sono sicuro.

04:01.930 --> 04:02.763
E comunque, se non

04:02.763 --> 04:03.596
si è sicuri, si dovrebbe

04:03.596 --> 04:06.000
prevedere un ripiego nel caso contrario.

04:06.000 --> 04:08.530
Ma qui sono sicuro che otterremo tale elemento e quindi

04:08.530 --> 04:10.544
possiamo semplicemente aggiungere un punto

04:10.544 --> 04:11.803
esclamativo per dire al dattiloscritto:

04:11.803 --> 04:13.710
"Tutto bene".

04:13.710 --> 04:17.300
Otterremo l'accesso a un elemento con quell'ID. Ora, come ho detto, abbiamo ancora un altro

04:17.300 --> 04:18.133
errore.

04:18.133 --> 04:20.220
Manca il contenuto della proprietà nell'elemento HTML di tipo.

04:20.220 --> 04:24.270
Il problema è che stiamo dicendo a typescript che stiamo

04:24.270 --> 04:27.140
per memorizzare un elemento template di

04:27.140 --> 04:29.550
tipo html template element.

04:29.550 --> 04:32.160
E in effetti sarà così.

04:32.160 --> 04:34.800
Naturalmente, getElementById

04:34.800 --> 04:38.730
non sa quale elemento restituirà alla fine.

04:38.730 --> 04:41.130
Sa solo che si tratta di un elemento html, ma

04:41.130 --> 04:43.920
non di quale versione specializzata di esso.

04:43.920 --> 04:46.600
Se si tratta di un div, di un paragrafo, di un pulsante o, come

04:46.600 --> 04:48.720
in questo caso, di un elemento modello.

04:48.720 --> 04:51.387
getElementById non ha alcuna possibilità di saperlo.

04:51.387 --> 04:54.590
Quindi, per dire al dattiloscritto del tipo che,

04:54.590 --> 04:57.460
ovviamente, conosciamo con certezza.

04:57.460 --> 05:00.660
Possiamo usare il type casting.

05:00.660 --> 05:02.260
Anche lei ha imparato a conoscere questo aspetto.

05:02.260 --> 05:03.730
È possibile utilizzare due sintassi.

05:03.730 --> 05:05.950
Le parentesi angolari all'inizio

05:05.950 --> 05:07.690
e poi il tipo a cui si vuole

05:07.690 --> 05:10.130
fare il cast con cui si dice a TypeScript:

05:10.130 --> 05:11.847
"Ehi!

05:11.847 --> 05:12.700
La cosa, l'espressione

05:12.700 --> 05:15.840
che viene dopo questo qui, sarà di questo tipo. o in alternativa, aggiungere un elemento del template HTML, che

05:15.840 --> 05:17.650
è l'approccio che utilizzerei io.

05:17.650 --> 05:21.200
Con questo, si garantisce al dattiloscritto che

05:21.200 --> 05:23.040
ciò che viene recuperato non

05:23.040 --> 05:25.700
sarà nullo e sarà di questo tipo.

05:25.700 --> 05:27.950
Si parla molto di questa selezione, ma è un compito

05:30.027 --> 05:30.860
comune ed è importante

05:30.860 --> 05:32.016
farlo bene.

05:32.016 --> 05:33.630
Ora continuiamo con l'elemento ospite.

05:33.630 --> 05:35.563
Qui dovremmo aggiungere anche

05:36.890 --> 05:39.360
l'elemento host come campo e sappiamo che

05:39.360 --> 05:43.350
l'elemento host, quando vogliamo rendere il nostro progetto-ingresso,

05:43.350 --> 05:45.960
sarà alla fine questo div.

05:45.960 --> 05:48.560
È qui che voglio rendere il mio modulo.

05:48.560 --> 05:51.410
Quindi, possiamo dire che l'elemento HTML div.

05:51.410 --> 05:54.000
Questo è il tipo di elemento a cui lo aggiungeremo.

05:54.000 --> 05:57.730
Potremmo anche essere un po' meno specifici e dire semplicemente

05:57.730 --> 06:00.260
elemento HTML, perché qui non mi interessa

06:00.260 --> 06:02.740
se è un div o meno.

06:02.740 --> 06:04.970
Ma visto che lo sappiamo con

06:04.970 --> 06:08.400
certezza, perché non aggiungerlo?

06:08.400 --> 06:10.250
Ora, voglio accedere a quel div, dove

06:10.250 --> 06:11.263
questo dovrebbe essere

06:12.110 --> 06:14.850
aggiunto e se diamo un'occhiata all'indice. vediamo che possiamo identificare questo div

06:14.850 --> 06:16.530
ancora una volta con l'ID.

06:16.530 --> 06:18.970
In questo caso, l'ID dell'applicazione.

06:18.970 --> 06:19.945
Ora, nell'app ts, possiamo

06:19.945 --> 06:24.640
usare ancora una volta document getElementById e raggiungere l'elemento con l'id app.

06:24.640 --> 06:28.780
Ora, abbiamo gli stessi problemi di prima, questo può essere

06:28.780 --> 06:32.920
nullo, quindi dobbiamo aggiungere il punto esclamativo perché,

06:32.920 --> 06:35.112
ancora una volta, sappiamo con certezza

06:35.112 --> 06:39.620
che non lo sarà, e getElementById non sa che questo sarà un elemento

06:39.620 --> 06:42.283
HTML div, quindi, dovremmo lanciare anche

06:43.430 --> 06:46.030
questo qui.

06:46.030 --> 06:48.150
E con questo possiamo ora scoprire come

06:48.150 --> 06:51.210
accedere a tutti gli elementi di cui abbiamo bisogno.

06:51.210 --> 06:53.990
Beh, se ne è parlato molto.

06:53.990 --> 06:56.070
Con questo purtroppo non abbiamo ottenuto molto.

06:56.070 --> 06:59.140
Abbiamo accesso a questi elementi,

06:59.140 --> 07:01.970
ma non vi rendiamo nulla.

07:01.970 --> 07:03.940
Quindi continuiamo con questo.

07:03.940 --> 07:05.790
Per questo, dobbiamo importare il contenuto

07:05.790 --> 07:08.020
di questo elemento template, quindi importare

07:08.020 --> 07:10.620
ciò che è all'interno dei tag template e renderlo nel

07:10.620 --> 07:11.760
DOM.

07:11.760 --> 07:15.520
Possiamo farlo proprio qui, nel costruttore, perché la mia

07:15.520 --> 07:17.603
idea, e naturalmente è solo una mia

07:18.510 --> 07:20.270
idea, potrebbe essere impostata

07:20.270 --> 07:21.870
in modo diverso.

07:21.870 --> 07:22.940
Ma la mia idea è che quando

07:22.940 --> 07:24.550
creiamo una nuova istanza di questa classe,

07:24.550 --> 07:26.430
voglio immediatamente rendere un modulo che

07:26.430 --> 07:28.250
appartiene a questa istanza.

07:28.250 --> 07:30.190
Quindi lo faremo direttamente nel costruttore.

07:30.190 --> 07:31.770
Qui possiamo ottenere il

07:31.770 --> 07:34.420
nostro nodo importato o il contenuto HTML

07:34.420 --> 07:37.430
importato o comunque lo si voglia chiamare, che

07:37.430 --> 07:40.627
possiamo ottenere con document importNode, un metodo

07:40.627 --> 07:44.917
fornito sull'oggetto globale document e a importNode si passa un

07:45.860 --> 07:49.260
puntatore all'elemento del modello.

07:49.260 --> 07:52.650
Quindi questo elemento modello alla fine, o per essere precisi non l'elemento

07:52.650 --> 07:54.410
ma il contenuto del punto lì.

07:54.410 --> 07:57.010
Content è una proprietà che esiste

07:57.010 --> 08:00.891
sugli elementi dei template HTML e fornisce semplicemente

08:00.891 --> 08:05.320
un riferimento al contenuto di un template.

08:05.320 --> 08:07.480
Quindi al codice HTML tra il testo del modello.

08:07.480 --> 08:09.520
ImportNode accetta anche un secondo

08:09.520 --> 08:13.306
parametro, che definisce se importare o meno questo elemento

08:13.306 --> 08:15.670
con un clone profondo.

08:15.670 --> 08:17.940
Quindi tutti i livelli di nidificazione all'interno del modello e voglio

08:17.940 --> 08:19.630
assolutamente farlo, quindi fornirò il vero qui.

08:19.630 --> 08:22.570
Ora, abbiamo l'importedNode e, come si vedrà,

08:22.570 --> 08:26.340
questo è di tipo document fragment, che typescript ha assunto

08:26.340 --> 08:28.830
o dedotto automaticamente.

08:28.830 --> 08:30.770
Ora possiamo usare questo importedNode

08:30.770 --> 08:34.910
e, ovviamente, vogliamo usarlo per rendere un po' di contenuto.

08:34.910 --> 08:36.960
Per questo aggiungerò un nuovo

08:36.960 --> 08:40.970
metodo, un metodo privato che chiamerò attach.

08:40.970 --> 08:42.810
Non è necessario farlo, voglio solo dividere

08:42.810 --> 08:45.150
la mia selezione e la logica di rendering.

08:45.150 --> 08:46.390
All'interno di attach,

08:46.390 --> 08:51.270
raggiungerò l'elemento host, quindi il luogo in cui voglio rendere il

08:51.270 --> 08:52.820
mio contenuto e chiamerò

08:52.820 --> 08:54.930
insertAdjacentElement, che

08:54.930 --> 08:57.840
è un metodo predefinito fornito dal browser

08:57.840 --> 09:00.770
alla fine in JavaScript.

09:00.770 --> 09:02.980
Per inserire l'elemento HTML un elemento

09:02.980 --> 09:04.340
adiacente, prima di tutto

09:04.340 --> 09:08.778
prende una descrizione del punto in cui inserirlo, quindi è possibile inserirlo

09:08.778 --> 09:13.180
dopo l'inizio dell'elemento a cui si mira, quindi subito dopo il tag di apertura

09:13.180 --> 09:17.850
dell'elemento host, prima dell'inizio o prima del tag di apertura, prima del tag

09:17.850 --> 09:20.870
di fine o dopo il tag di fine.

09:20.870 --> 09:23.570
E qui andrò per dopo iniziare a inserirlo

09:23.570 --> 09:27.020
proprio all'inizio del tag di apertura.

09:27.020 --> 09:30.580
E poi la cosa che voglio inserire è il mio

09:30.580 --> 09:33.053
importedNode, ma prima di tutto

09:34.900 --> 09:39.140
è una costante disponibile solo nel costruttore

09:39.140 --> 09:42.970
e poi è un frammento di documento.

09:42.970 --> 09:44.630
Non potevamo inserirlo così.

09:44.630 --> 09:46.896
Dobbiamo invece ottenere l'accesso all'elemento HTML

09:46.896 --> 09:48.240
concreto, che possiamo memorizzare

09:48.240 --> 09:49.800
in un altro elemento di proprietà.

09:49.800 --> 09:52.770
Dobbiamo anche aggiungere un campo lassù,

09:52.770 --> 09:55.560
che può essere di tipo elemento HTML o

09:55.560 --> 09:58.270
nel nostro caso, sappiamo che sarà all'interno

09:58.270 --> 10:02.500
del modello, quindi sarà un modulo.

10:02.500 --> 10:05.790
Questo è il primo elemento del modello.

10:05.790 --> 10:07.010
Quindi qui possiamo

10:07.010 --> 10:09.470
dire che sarà un elemento del modulo HTML

10:09.470 --> 10:10.960
e poi qui, questo elemento

10:10.960 --> 10:15.200
è uguale a importNode firstElementChild, ora dobbiamo solo dire

10:15.200 --> 10:20.106
di nuovo a typescript che questo sarà un elemento del modulo HTML.

10:20.106 --> 10:22.199
Ora questo elemento è la proprietà

10:22.199 --> 10:25.510
concreta che punta al nodo che vogliamo inserire.

10:25.510 --> 10:28.360
Quindi laggiù, in insertAdjacentElement,

10:28.360 --> 10:31.110
inseriamo questo elemento qui.

10:31.110 --> 10:33.690
Ora dobbiamo solo assicurarci che qui nel

10:33.690 --> 10:36.350
costruttore, alla fine, venga chiamato attach,

10:36.350 --> 10:38.460
quindi questo metodo privato attach,

10:38.460 --> 10:39.950
in modo che anche questo

10:39.950 --> 10:42.260
codice venga eseguito.

10:42.260 --> 10:44.290
E ora, con tutta la formattazione,

10:44.290 --> 10:46.620
ecco come appare il mio codice.

10:46.620 --> 10:48.200
Questa è la classe input

10:48.200 --> 10:51.460
del progetto e teoricamente, quando la istanziamo,

10:51.460 --> 10:53.950
dovrebbe rendere il form.

10:53.950 --> 10:56.920
Ora proviamo.

10:56.920 --> 10:59.440
Sotto la classe, creiamo semplicemente una nuova costante, ad esempio

10:59.440 --> 11:01.120
prjInput, il cui nome dipende da voi.

11:01.120 --> 11:05.415
E chiamare il nuovo progetto Input in questo modo.

11:05.415 --> 11:08.930
E se ora lo salviamo, dovrebbe ricompilarsi

11:08.930 --> 11:11.783
e ricaricarsi e se si torna al browser,

11:11.783 --> 11:14.160
si dovrebbe vedere il modulo

11:14.160 --> 11:16.050
qui.

11:16.050 --> 11:17.990
È una cosa molto bella, perché con questo

11:17.990 --> 11:20.660
abbiamo fatto il primo passo molto importante.

11:20.660 --> 11:22.450
Abbiamo il nostro

11:22.450 --> 11:26.930
modulo reso e anche se manca molto, è meglio

11:26.930 --> 11:29.150
di niente.

11:29.150 --> 11:31.630
Questo modulo proviene dal file html dell'indice

11:31.630 --> 11:33.010
ed è reso con l'aiuto del

11:33.010 --> 11:36.430
nostro codice typescript orientato agli oggetti.
