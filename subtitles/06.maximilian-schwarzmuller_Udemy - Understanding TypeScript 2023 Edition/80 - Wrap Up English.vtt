WEBVTT

1
00:00:02.090 --> 00:00:05.740
<v Narrator>And that is it for interfaces and classes.</v>

2
00:00:05.740 --> 00:00:08.190
In this module, we had a detailed look at classes

3
00:00:08.190 --> 00:00:09.630
and what we can do there.

4
00:00:09.630 --> 00:00:11.390
Classes and TypeScript, in the end,

5
00:00:11.390 --> 00:00:14.130
just build up on classes for JavaScript,

6
00:00:14.130 --> 00:00:17.180
and I already summarized those a little bit earlier

7
00:00:17.180 --> 00:00:18.720
in this module.

8
00:00:18.720 --> 00:00:20.710
Interfaces are a different thing.

9
00:00:20.710 --> 00:00:22.600
They only exist in TypeScript.

10
00:00:22.600 --> 00:00:24.670
They're a pure TypeScript feature,

11
00:00:24.670 --> 00:00:27.390
helping you to write clear, clearly structured,

12
00:00:27.390 --> 00:00:29.450
and very explicit code.

13
00:00:29.450 --> 00:00:33.010
They can help you to force classes to have certain features

14
00:00:33.010 --> 00:00:36.810
or objects in general to have a certain structure.

15
00:00:36.810 --> 00:00:39.860
They can be used as a function type, as you learned.

16
00:00:39.860 --> 00:00:42.490
They allow for optional properties

17
00:00:42.490 --> 00:00:45.200
and all therefore optional methods, by the way,

18
00:00:45.200 --> 00:00:48.290
if you add a question mark after the method name.

19
00:00:48.290 --> 00:00:50.190
So that is something you can use.

20
00:00:50.190 --> 00:00:53.210
And, as you just saw, when being compiled

21
00:00:53.210 --> 00:00:55.870
after fulfilling their role of allowing

22
00:00:55.870 --> 00:00:57.680
TypeScript to check your code,

23
00:00:57.680 --> 00:01:00.410
nothing is omitted for these interfaces.

24
00:01:00.410 --> 00:01:02.300
The code is simply dumped.

25
00:01:02.300 --> 00:01:05.080
Interfaces, nonetheless, are a powerful feature

26
00:01:05.080 --> 00:01:07.420
to force your classes or you objects

27
00:01:07.420 --> 00:01:09.140
to have a certain structure

28
00:01:09.140 --> 00:01:12.400
and to clearly describe your idea

29
00:01:12.400 --> 00:01:14.810
of how an object should look like.

30
00:01:14.810 --> 00:01:18.650
Now as you learned, you mostly can replace them

31
00:01:18.650 --> 00:01:21.120
with custom types if you wanted to.

32
00:01:21.120 --> 00:01:23.580
You can also implement custom types,

33
00:01:23.580 --> 00:01:27.700
but it simply more common to use an interface for that,

34
00:01:27.700 --> 00:01:30.360
to use an interface if you want to describe an object

35
00:01:30.360 --> 00:01:32.180
than if you want to implement it.

36
00:01:32.180 --> 00:01:33.980
All there for historic reasons,

37
00:01:33.980 --> 00:01:36.490
because in the earlier days of TypeScript,

38
00:01:36.490 --> 00:01:38.980
custom types couldn't be implemented

39
00:01:38.980 --> 00:01:40.710
or used like interfaces.

40
00:01:40.710 --> 00:01:42.610
Now there is more flexibility,

41
00:01:42.610 --> 00:01:45.150
but it's still recommended to go for interfaces

42
00:01:45.150 --> 00:01:46.420
if you work with objects

43
00:01:46.420 --> 00:01:48.680
and if you want to describe their structure.

44
00:01:48.680 --> 00:01:50.620
We'll also see them throughout this course

45
00:01:50.620 --> 00:01:51.883
over and over again.

