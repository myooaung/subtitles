WEBVTT

00:02.220 --> 00:04.080
-: Ahora los tipos de intersección son una cosa.

00:04.080 --> 00:05.470
Sin embargo, se utiliza más a menudo

00:05.470 --> 00:07.800
otra característica, que sería la de los guardias de tipo,

00:07.800 --> 00:10.590
una característica que en realidad ya utilizamos un poco.

00:10.590 --> 00:12.400
Utilicemos aquí Combinable.

00:12.400 --> 00:15.560
Es un tipo de unión en el que tenemos o bien una cadena o bien un número,

00:15.560 --> 00:18.020
y los guardias de tipo nos ayudan con los tipos de

00:18.020 --> 00:21.050
unión porque aunque es agradable tener la flexibilidad, a

00:21.050 --> 00:23.610
menudo necesitas saber qué tipo exacto estás obteniendo

00:23.610 --> 00:26.200
ahora en tiempo de ejecución.

00:26.200 --> 00:28.630
Digamos que aquí tenemos nuestra función

00:28.630 --> 00:33.070
de adición donde tengo un número que necesita ser de tipo Combinable, por lo

00:33.070 --> 00:35.100
que una cadena o un número, y, por lo

00:35.100 --> 00:37.990
tanto, voy a nombrar aquí a, y luego tengo otro argumento

00:37.990 --> 00:39.520
que también tiene que ser Combinable,

00:39.520 --> 00:42.110
por lo que un número o una cadena, y luego quiero

00:42.110 --> 00:44.640
devolver a más b.

00:44.640 --> 00:47.020
Ya hemos visto en el pasado que esto no funciona.

00:47.020 --> 00:51.320
En su lugar, ahora tenemos que comprobar si typeof

00:51.320 --> 00:53.740
a es igual a string, por ejemplo,

00:55.660 --> 00:59.780
o typeof b es igual a string, y si ese es el caso, devolvemos

00:59.780 --> 01:04.681
a.

01:04.681 --> 01:04.681
toString más b. toString.

01:04.681 --> 01:06.750
Así que concatenamos estas dos cadenas;

01:06.750 --> 01:09.570
de lo contrario, si no lo hacen en esta sentencia

01:09.570 --> 01:11.510
if, devolvemos a más b así porque ahora

01:11.510 --> 01:13.270
el grupo de tipos sabe que a y b tienen

01:13.270 --> 01:15.620
que ser números aquí, porque si al menos

01:15.620 --> 01:19.710
uno de ellos no fuera un número, estaríamos aquí.

01:19.710 --> 01:22.890
Ahora bien, esto aquí se llama una guardia de tipo

01:22.890 --> 01:25.280
porque nos permite utilizar la flexibilidad

01:25.280 --> 01:27.980
que nos dan los tipos de unión y aún así asegurar

01:27.980 --> 01:32.550
que nuestro código se ejecuta correctamente en tiempo de ejecución,

01:32.550 --> 01:34.830
porque a menudo tienes funciones

01:34.830 --> 01:38.160
que trabajan con dos o tres tipos diferentes, y, por

01:38.160 --> 01:40.570
lo tanto, un tipo de unión es perfecto,

01:40.570 --> 01:43.890
pero lo que haces exactamente con los valores entonces

01:43.890 --> 01:46.940
sí depende del tipo, como aquí, donde concatenamos

01:46.940 --> 01:51.670
o sumamos matemáticamente.

01:51.670 --> 01:55.310
Ahora bien, este es un protector de tipo que utiliza typeof.

01:55.310 --> 01:58.970
También puede escribir otros tipos de guardias de tipo.

01:58.970 --> 02:00.880
y para eso, déjame volver a mis tipos

02:00.880 --> 02:03.050
de admin y employee que tengo ahí arriba,

02:03.050 --> 02:04.950
donde tengo privilegios en el admin

02:04.950 --> 02:06.943
y startDate en el employee.

02:08.590 --> 02:11.810
Ahora tenemos el ElevatedEmployee que combina ambos.

02:11.810 --> 02:14.980
Ahora crea también otro tipo aquí.

02:14.980 --> 02:16.330
Es el Empleado Desconocido.

02:18.000 --> 02:21.940
Se trata de un empleado o de un administrador.

02:21.940 --> 02:25.540
Así que tenemos un tipo de unión utilizando mis dos tipos de objetos personalizados.

02:25.540 --> 02:28.173
Así que el empleado desconocido es cualquiera de los dos.

02:29.230 --> 02:32.003
Ahora podríamos tener una función, printEmployeeInformation,

02:34.620 --> 02:36.420
donde necesito pasar un empleado,

02:36.420 --> 02:39.660
y que debería ser del tipo empleado desconocido.

02:39.660 --> 02:41.610
Ahora aquí, quiero consolar. registrar varios

02:41.610 --> 02:44.030
datos sobre el empleado.

02:44.030 --> 02:47.210
Por ejemplo, el nombre de emp. name, que funcionará sin

02:47.210 --> 02:48.580
problemas porque ambos

02:48.580 --> 02:52.140
tipos de empleados tienen una propiedad name.

02:52.140 --> 02:56.730
Pero también quiero consolar. registrar los privilegios

02:58.160 --> 03:01.520
accediendo a emp. privilegios, y aquí ya tengo

03:01.520 --> 03:04.350
problemas en el autocompletado porque TypeScript

03:04.350 --> 03:07.100
no puede confirmar que esto exista siempre

03:07.100 --> 03:09.890
en el argumento, porque el UnknownEmployee

03:09.890 --> 03:13.540
podría ser un empleado normal que no tiene una propiedad

03:13.540 --> 03:16.260
de privilegios.

03:16.260 --> 03:18.330
Eso sólo lo tiene el administrador.

03:18.330 --> 03:20.100
Así que ahora necesitamos un guardia de tipo aquí.

03:20.100 --> 03:24.530
El problema es que con el typeof no ganaremos nada.

03:24.530 --> 03:26.830
Si comprobamos el tipo de empleado, que

03:26.830 --> 03:29.470
sólo será objeto en tiempo de ejecución.

03:29.470 --> 03:31.380
Sin embargo, eso no nos dice si tiene

03:31.380 --> 03:32.940
esta propiedad o no.

03:32.940 --> 03:34.960
Por lo tanto, si muevo el código en esta comprobación

03:34.960 --> 03:37.430
if, TypeScript no es más feliz que antes porque un

03:37.430 --> 03:39.750
objeto es, bueno, sólo un objeto.

03:39.750 --> 03:41.920
No nos dice nada sobre las propiedades.

03:41.920 --> 03:44.980
No podemos comprobar si es de tipo Empleado porque ese

03:44.980 --> 03:48.130
no es un tipo que JavaScript conozca, y hay que tener en

03:48.130 --> 03:49.840
cuenta que esta comprobación

03:49.840 --> 03:52.560
se ejecuta en tiempo de ejecución y utiliza JavaScript,

03:52.560 --> 03:56.190
por lo que sólo podemos comparar el tipo que nos da typeof con los

03:56.190 --> 03:58.010
tipos que conoce JavaScript, y

03:58.010 --> 04:01.920
esos serían objeto, cadena, número y booleano que es, y nuestro tipo

04:01.920 --> 04:05.610
personalizado no forma parte de él.

04:05.610 --> 04:07.950
Eso sólo existe en el mundo de TypeScript,

04:07.950 --> 04:11.020
no en el de JavaScript compilado.

04:11.020 --> 04:13.990
Por lo tanto, esto tampoco funciona.

04:13.990 --> 04:17.960
En este caso, nuestra solución es utilizar una comprobación if diferente.

04:17.960 --> 04:20.240
Sabemos que queremos acceder a los privilegios,

04:20.240 --> 04:25.240
así que podríamos comprobar si los privilegios de los empleados es una cosa.

04:26.400 --> 04:28.560
El problema es que TypeScript no nos permite

04:28.560 --> 04:30.690
acceder a esta propiedad en absoluto,

04:30.690 --> 04:33.550
ni siquiera comprobarla de esta manera, pero hay una

04:33.550 --> 04:36.200
forma diferente de comprobarla.

04:36.200 --> 04:40.000
Podemos usar las palabras clave in que están incorporadas en JavaScript.

04:40.000 --> 04:43.120
Podemos comprobar si los privilegios, ahora

04:43.120 --> 04:46.690
escritos como una cadena, están en emp.

04:46.690 --> 04:49.130
Este es un código JavaScript que permite

04:49.130 --> 04:53.480
comprobar si esto existe como propiedad en el empleado, y si

04:53.480 --> 04:58.380
es así, TypeScript detecta esta comprobación aquí, y, por tanto, nos

04:58.380 --> 05:01.200
permite acceder a esta propiedad dentro

05:01.200 --> 05:04.543
de esta comprobación if aquí.

05:05.852 --> 05:08.380
Y podemos repetir eso para el startDate,

05:08.380 --> 05:12.240
y, por lo tanto, comprobar si startDate es una propiedad aquí,

05:12.240 --> 05:15.710
y podemos, por lo tanto, también la salida de este en este

05:16.970 --> 05:18.730
si de verificación.

05:18.730 --> 05:23.687
Así que ahora con eso, si llamamos a printEmployeeInformation, y le pasamos

05:24.650 --> 05:28.363
ese único empleado que creamos, e1, verás que esto compiló

05:31.410 --> 05:34.860
sin errores y, efectivamente, da salida a los privilegios

05:34.860 --> 05:37.430
y, bueno, también aquí los datos deberían

05:37.430 --> 05:42.530
decir también Fecha de inicio aquí, por supuesto.

05:42.530 --> 05:45.820
Pero con eso, nos da la salida que esperaríamos.

05:45.820 --> 05:48.590
Y en el otro extremo, si pasamos un empleado que no tiene

05:48.590 --> 05:50.950
todos estos campos, por ejemplo, si creamos

05:50.950 --> 05:53.090
uno sobre la marcha que sólo tiene startDate

05:53.090 --> 05:56.383
pero no tiene privilegios, entonces está todo el trabajo y compilado

05:57.850 --> 06:00.370
sin errores, y simplemente no imprimimos nada

06:00.370 --> 06:03.160
sobre los privilegios debido a esta comprobación

06:03.160 --> 06:05.723
if que tenemos ahí.

06:07.650 --> 06:09.800
Cuando se trabaja con clases, también

06:09.800 --> 06:13.070
se puede utilizar otro tipo de guarda de tipo, y

06:13.070 --> 06:16.520
eso sería la guarda de tipo instanceof.

06:16.520 --> 06:21.460
Digamos que ahí abajo tenemos una clase, Coche, y que tiene un método

06:21.460 --> 06:23.800
de conducción en el que sólo dice

06:23.800 --> 06:26.523
consola. log Driving, y tenemos

06:28.480 --> 06:31.750
otra clase, Truck, que también tiene un método

06:31.750 --> 06:34.623
drive, o tal vez diga Driving a truck,

06:35.840 --> 06:38.280
pero tenemos que decir el nombre

06:38.280 --> 06:40.250
del método.

06:40.250 --> 06:43.980
Y donde también tenemos un método loadCargo, donde tenemos

06:43.980 --> 06:46.570
una cantidad, que es un número, y luego

06:46.570 --> 06:49.040
aquí estoy teniendo un poco de código

06:49.040 --> 06:53.570
ficticio donde digo, "Cargando la carga más la cantidad. Algo así, oops, cantidad, algo así.

06:53.570 --> 06:57.323
Así que ahora tenemos dos clases, que, por supuesto, tienen cierta similitud,

06:58.170 --> 06:59.320
el método de conducción,

06:59.320 --> 07:02.090
pero también tienen una diferencia.

07:02.090 --> 07:03.890
Ahora, de nuevo, podemos

07:03.890 --> 07:08.200
crear un tipo de unión aquí, Vehículo, que es un coche

07:08.200 --> 07:13.030
o un camión, y ahora, digamos, creamos un nuevo vehículo, v1,

07:13.030 --> 07:18.030
que es un nuevo coche, y otro, v2, que es un nuevo camión.

07:18.050 --> 07:21.873
Ahora tengo una función, useVehicle, que sólo espera obtener

07:23.890 --> 07:26.443
un vehículo, que debe ser de tipo vehículo,

07:27.700 --> 07:29.780
por lo que debe ser de este tipo de

07:29.780 --> 07:31.350
unión.

07:31.350 --> 07:34.203
Así que aquí tenemos un vehículo, y ahora, digamos, nuestro

07:35.420 --> 07:37.490
objetivo aquí es hacer todo lo que podemos hacer

07:37.490 --> 07:40.040
con los vehículos: conducir y cargarCarga.

07:40.040 --> 07:43.400
Así que, por supuesto, podemos llamar al vehículo. conducir porque eso siempre existe, pero para

07:43.400 --> 07:45.420
el vehículo. loadCargo, tenemos

07:45.420 --> 07:50.010
un problema porque sólo un camión tiene eso.

07:50.010 --> 07:52.720
Un coche no lo tiene, así que esto no funcionará.

07:52.720 --> 07:56.440
Ahora podemos, por supuesto, de nuevo, comprobar si loadCargo está

07:56.440 --> 07:59.513
en el vehículo, y si ese es el caso, podemos usarlo.

08:00.760 --> 08:05.760
Al menos, si corrijo ese error tipográfico aquí.

08:06.430 --> 08:09.480
Así que ahora guardamos eso y luego llamamos

08:09.480 --> 08:13.230
a useVehicle y le pasamos v1, y luego lo llamamos de nuevo

08:13.230 --> 08:17.400
con v2, y guardo todo eso, se compila, y funciona.

08:17.400 --> 08:21.680
Esa es una forma de hacerlo.

08:21.680 --> 08:23.340
Una forma alternativa, que podría

08:23.340 --> 08:26.580
ser un poco más elegante, ya que también elimina el riesgo

08:26.580 --> 08:28.600
de que se escriba mal en esta cadena de

08:28.600 --> 08:31.920
propiedad aquí, es que usted utiliza instanceof.

08:31.920 --> 08:34.080
Podemos comprobar si el vehículo es una instancia de Camión.

08:34.080 --> 08:39.080
Si ese es el caso, sabemos que tendrá un método loadCargo.

08:39.360 --> 08:42.510
Un instanceof es un operador normal incorporado

08:42.510 --> 08:45.230
en vanilla JavaScript, así que esto no

08:45.230 --> 08:47.430
es código TypeScript.

08:47.430 --> 08:49.280
Al igual que typeof, esto es parte

08:49.280 --> 08:52.250
de JavaScript y se ejecuta en tiempo de ejecución.

08:52.250 --> 08:54.290
JavaScript no conoce el tipo Camión, pero

08:54.290 --> 08:56.780
conoce las funciones constructoras, y las clases

08:56.780 --> 08:59.330
al final son simplemente traducidas a funciones

08:59.330 --> 09:01.490
constructoras, y TypeScript es entonces

09:01.490 --> 09:03.400
capaz de averiguar si el vehículo fue

09:03.400 --> 09:06.580
creado basado en la función constructora Camión.

09:06.580 --> 09:10.290
Así que desde que las clases son compiladas a algo que

09:10.290 --> 09:11.970
JavaScript entiende, funciones

09:11.970 --> 09:15.450
de constructor, es capaz de usar eso.

09:15.450 --> 09:17.210
Si estuviéramos usando una interfaz

09:17.210 --> 09:20.390
aquí en lugar de una clase, y, por lo tanto, por supuesto, no podríamos

09:20.390 --> 09:21.223
tener la implementación

09:21.223 --> 09:22.950
aquí, pero lo haremos cuando creemos

09:22.950 --> 09:25.130
un objeto con la notación literal de objeto, entonces

09:25.130 --> 09:27.300
no podríamos usar instanceof porque las interfaces,

09:27.300 --> 09:30.940
como aprendiste, no se compilan en ningún código JavaScript, y, por lo tanto,

09:30.940 --> 09:34.370
no podemos usarlas en tiempo de ejecución.

09:34.370 --> 09:37.160
En el caso de las clases, podemos hacerlo porque JavaScript

09:37.160 --> 09:40.010
admite clases y funciones constructoras, y con instanceof

09:40.010 --> 09:42.290
se puede averiguar si algún objeto está basado

09:42.290 --> 09:44.500
en esa clase.

09:44.500 --> 09:47.660
Si sabemos que lo es, entonces tendremos una función de carga.

09:47.660 --> 09:51.850
Así que estos son guardias de tipo.

09:51.850 --> 09:53.480
Al final, los guardias de

09:53.480 --> 09:55.890
tipo son sólo un término que describe

09:55.890 --> 09:59.470
la idea o el enfoque de comprobar si una determinada

09:59.470 --> 10:02.980
propiedad o método existe antes de intentar utilizarlo,

10:02.980 --> 10:06.310
o si se puede hacer algo con el tipo antes de intentar

10:06.310 --> 10:08.470
utilizarlo.

10:08.470 --> 10:10.220
Para los objetos, eso se puede

10:10.220 --> 10:15.113
hacer con instanceof o con in, para otros tipos, puedes usar typeof, y, por lo tanto,

10:16.140 --> 10:19.780
ahora tienes toda la flexibilidad para usar la flexibilidad que

10:19.780 --> 10:22.280
te dan los tipos de unión y seguir escribiendo

10:22.280 --> 10:25.090
código que luego hace una cosa u otra basada en el

10:25.090 --> 10:29.050
tipo exacto que estás obteniendo en tiempo de ejecución.
