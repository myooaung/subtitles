WEBVTT

00:02.200 --> 00:03.210
ผู้สอน: มาเริ่มกันเลยกับ

00:03.210 --> 00:05.520
TypeScript และ Node js และสำหรับเรื่องนั้น

00:05.520 --> 00:10.610
ฉันอยู่ในโฟลเดอร์ใหม่เปล่าๆ ที่นี่ มีแค่ไฟล์คอนฟิกูเรชันบางไฟล์ที่นั่น และมาเริ่มง่ายๆ

00:10.610 --> 00:12.140
กัน

00:12.140 --> 00:15.020
มาเพิ่มแอพกันเถอะ ts ไฟล์ที่นี่

00:15.020 --> 00:17.370
คุณสามารถตั้งชื่อได้ตามที่คุณต้องการแน่นอน

00:17.370 --> 00:22.220
และในนั้นมาเขียนโค้ดที่เราต้องการดำเนินการกับโหนด

00:22.220 --> 00:22.220
js

00:22.220 --> 00:24.980
แต่ที่เราต้องการใช้ TypeScript

00:24.980 --> 00:28.910
สคริปต์ง่าย ๆ อาจเป็นไปได้ว่าเราเพียงแค่คอนโซลบันทึกบางอย่าง

00:28.910 --> 00:30.450
ใช้งานได้ในเบราว์เซอร์

00:30.450 --> 00:33.350
แต่ใช้งานได้กับ Node จ.

00:33.350 --> 00:38.740
ตรวจสอบให้แน่ใจว่าคุณมี Node ติดตั้ง js แล้ว ซึ่งคุณควรมีแน่นอนหากคุณทำตามหลักสูตรนั้น

00:38.740 --> 00:43.910
เพราะเราใช้ใน NPM กับ Webpack และกับเครื่องมือและไลบรารีอื่นๆ อีกมากมายที่เราติดตั้งด้วย

00:43.910 --> 00:46.710
NPM แล้ว

00:46.710 --> 00:48.480
ดังนั้นคุณควรมีโหนด ติดตั้ง js แล้ว

00:48.480 --> 00:52.130
และถ้าคุณติดตั้งแล้ว คุณสามารถเรียกใช้งานไฟล์นี้ได้หากคุณคอมไพล์เป็น

00:52.130 --> 00:54.110
JavaScript

00:54.110 --> 01:00.360
ดังนั้นหากฉันเรียกใช้แอพ tsc ts และฉันสร้างแอปของฉัน

01:00.360 --> 01:00.360
js

01:00.360 --> 01:04.503
ดังนั้นฉันสามารถดำเนินการกับโหนดและฉันพิมพ์บางอย่างที่นี่

01:06.550 --> 01:11.890
ตอนนี้เมื่อฉันลบแอพ js และฉันพยายามเรียกใช้แอป

01:11.890 --> 01:11.890
ทดสอบกับ

01:11.890 --> 01:13.810
node คุณจะเห็นอะไรแปลกๆ

01:13.810 --> 01:15.070
นอกจากนี้ยังใช้งานได้

01:15.070 --> 01:18.010
ดังนั้นหากโหนดสามารถเรียกใช้ TypeScript ได้

01:18.010 --> 01:20.380
ไม่มันไม่ใช่และนั่นสำคัญมาก

01:20.380 --> 01:25.260
มันไม่สนใจเกี่ยวกับนามสกุลไฟล์ แต่สิ่งที่พบในไฟล์นั้นจะถือว่าเป็น

01:25.260 --> 01:27.420
JavaScript ปกติและที่นี่ไม่ได้ใช้คุณสมบัติ

01:27.420 --> 01:31.370
TypeScript ดังนั้นจึงใช้งานได้

01:31.370 --> 01:34.340
ซึ่งจะเปลี่ยนไปหากเราเพิ่มเนื้อหาอื่นที่นี่

01:34.340 --> 01:36.400
สมมุติว่าเรามีตัวแปรอายุ ซึ่งเป็นตัวเลข

01:36.400 --> 01:37.370
แล้วตรงนี้ผมตั้งค่าเป็น

01:37.370 --> 01:42.250
30 แล้วก็ปลอบใจ

01:42.250 --> 01:42.250
บันทึกอายุที่นี่

01:42.250 --> 01:44.840
แน่นอนว่านี่เป็นรหัส TypeScript ที่ถูกต้อง

01:44.840 --> 01:48.370
แต่ถ้าเราพยายามดำเนินการกับโหนด คุณจะเห็นว่าเราได้รับข้อผิดพลาด

01:48.370 --> 01:52.450
ดังนั้นโหนดจึงไม่สามารถแยกวิเคราะห์และคอมไพล์ TypeScript

01:52.450 --> 01:54.210
ได้ แต่จะถือว่าทุกไฟล์ที่คุณเรียกใช้งานเป็น

01:54.210 --> 01:56.960
JavaScript

01:56.960 --> 01:59.030
และถ้าคุณไม่ได้ใช้ฟีเจอร์ TypeScript

01:59.030 --> 02:01.100
ในไฟล์ แสดงว่าใช้งานได้

02:01.100 --> 02:02.950
แต่ถ้าทำก็ไม่สำเร็จ

02:02.950 --> 02:04.920
คุณต้องคอมไพล์ไฟล์เป็น JavaScript

02:04.920 --> 02:06.550
ก่อนเสมอ จึงจะเรียกใช้งานไฟล์

02:06.550 --> 02:08.960
JavaScript ซึ่งมีเฉพาะโค้ด JavaScript

02:08.960 --> 02:11.350
ที่ถูกต้องอยู่ในนั้น

02:11.350 --> 02:13.030
นั่นเป็นสิ่งสำคัญมากที่จะต้องเข้าใจ

02:13.030 --> 02:15.890
โหนดไม่เรียกใช้งาน TypeScript

02:15.890 --> 02:20.710
ตอนนี้คุณสามารถติดตั้งแพ็คเกจ ts-node ซึ่งในตอนท้ายจะให้คอมไพเลอร์

02:20.710 --> 02:24.230
TypeScript นั้นรวมกับโหนดปฏิบัติการ คุณสามารถพูดได้

02:24.230 --> 02:27.880
เพื่อให้คุณสามารถติดตั้งเครื่องมือได้ทั่วโลก

02:27.880 --> 02:30.320
ซึ่งคุณสามารถใช้เพื่อเรียกใช้ไฟล์

02:30.320 --> 02:34.170
TypeScript ได้ เช่นนั้น.

02:34.170 --> 02:39.440
แต่เบื้องหลังมันจะทำการคอมไพล์ให้คุณและรันโค้ดคอมไพล์

02:39.440 --> 02:43.890
ดังนั้นโดยทั่วไปจึงรวมขั้นตอน tsc และโหนดเป็นขั้นตอนเดียว

02:43.890 --> 02:46.060
ดังนั้นจึงเป็นแพ็คเกจที่คุณสามารถใช้ได้

02:46.060 --> 02:49.150
แต่ในขณะที่มันอาจดีสำหรับการพัฒนา, สำหรับการผลิต,

02:49.150 --> 02:52.330
สำหรับการให้บริการไฟล์ของคุณบนเว็บเซิร์ฟเวอร์, บนโฮสต์เว็บบางแห่ง,

02:52.330 --> 03:04.370
สิ่งนี้อาจไม่เหมาะ เพราะการมีขั้นตอนการคอมไพล์เพิ่มเติมทุกครั้ง โค้ดของคุณได้รับการดำเนินการ เพียงแค่เพิ่มโอเวอร์เฮดเพิ่มเติมเล็กน้อย ซึ่งเป็นเรื่องปกติในระหว่างการพัฒนา แต่คุณอาจไม่ต้องการเมื่อโค้ดของคุณพร้อมสำหรับการผลิต

03:04.370 --> 03:12.090
และคุณต้องการให้บริการที่ใดที่หนึ่งจริงๆ

03:12.090 --> 03:13.260
ดังนั้นในโมดูลนี้

03:13.260 --> 03:15.950
เราจะไม่ใช้ ts-node และเราจะไม่พยายามเรียกใช้ไฟล์

03:15.950 --> 03:18.180
TypeScript ด้วยโหนด

03:18.180 --> 03:21.570
แต่ฉันจะแสดงการตั้งค่าที่เราสามารถใช้เพื่อสร้างโหนด

03:21.570 --> 03:24.520
Express Web Application หรือส่วนที่เหลือของ API ที่นี่

03:24.520 --> 03:26.150
โดยมีเพียง TypeScript และคอมไพเลอร์

03:26.150 --> 03:31.343
TypeScript และโหนดวานิลลา

03:31.343 --> 03:31.343
จ.
