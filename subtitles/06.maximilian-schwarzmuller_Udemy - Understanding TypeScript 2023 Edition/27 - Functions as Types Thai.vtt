WEBVTT

00:02.140 --> 00:08.100
-: คุณจึงสามารถใช้ประเภทสำหรับพารามิเตอร์ของฟังก์ชันและสำหรับค่าที่ส่งคืนของฟังก์ชันได้

00:08.100 --> 00:10.420
ทีนี้ เพื่อยกระดับไปอีกขั้น

00:10.420 --> 00:14.820
จะเป็นอย่างไรถ้าพวกมันเป็นประเภทฟังก์ชันด้วย

00:14.820 --> 00:17.170
ตอนนี้ให้ฉันพูดให้ชัดเจนว่าฉันหมายถึงอะไร

00:17.170 --> 00:19.333
สมมติว่าเรามีตัวแปร 'combinevalues'

00:21.360 --> 00:24.200
และตัวแปรนี้มีประเภทเป็น 'any' ตามค่าเริ่มต้น ดังที่คุณได้เรียนรู้แล้ว 'ใดๆ' นั้นไม่มีประโยชน์เลย

00:24.200 --> 00:26.860
ในที่สุด สิ่งที่ฉันต้องการทำคือ ฉันต้องการตั้งค่า

00:26.860 --> 00:29.617
'combinevalues' เท่ากับ 'add ดังนั้นฉันต้องการเก็บฟังก์ชัน 'เพิ่ม'

00:29.617 --> 00:32.600
ซึ่งเป็นตัวชี้ที่ฟังก์ชัน 'เพิ่ม' นี้ใน

00:32.600 --> 00:35.330
'combinevalues' เพื่อที่ในตอนท้าย เราสามารถบันทึกบันทึก

00:35.330 --> 00:39.160
รวมค่า และดำเนินการ 'combinevalues' เป็นฟังก์ชันที่มี

00:39.160 --> 00:41.580
8 และ 8.

00:41.580 --> 00:44.520
ทีนี้ ถ้าผมบันทึกมัน และรันมัน หลังจากคอมไพล์มัน

00:44.520 --> 00:47.480
ผมก็คอมไพล์ไฟล์นี้ แล้วเราก็ปล่อยให้มันโหลดใหม่

00:47.480 --> 00:52.130
เราจะได้ 16 ตรงนี้

00:52.130 --> 00:54.660
ใช้งานได้และเราคาดว่ามันจะใช้งานได้เพราะนั่นคือโค้ด

00:54.660 --> 00:55.840
JavaScript ปกติ

00:55.840 --> 00:58.820
เราสามารถเก็บพอยน์เตอร์ไว้ที่ฟังก์ชัน ในตัวแปรตัวเลข

00:58.820 --> 01:03.350
แล้วข้อเสนอเรียกใช้งานตัวแปรนี้เป็นฟังก์ชัน

01:03.350 --> 01:07.300
เพราะมันชี้ไปที่ฟังก์ชัน จริงไหม?

01:07.300 --> 01:08.580
ดังนั้นเราจึงสามารถเรียกใช้ฟังก์ชันนั้นผ่านตัวแปรนั้น

01:08.580 --> 01:09.910
ปัญหาที่เรามีกับตัวอย่างข้อมูลนี้จากมุมมองของ

01:09.910 --> 01:15.900
TypeScript ก็คือ 'combinevalues' คือค่าใดก็ได้

01:15.900 --> 01:20.670
ดังนั้นหากฉันตั้งค่า 'combinevalues' เป็นตัวเลขที่นี่ แน่นอนว่าเราไม่สามารถคอมไพล์ค่านี้ได้

01:20.670 --> 01:27.910
เนื่องจาก TypeScript ไม่มีโอกาสตรวจจับว่าสิ่งนี้ไม่ต้องการหรืออาจทำให้เกิดปัญหาได้

01:27.910 --> 01:30.543
แต่เวลาทำงาน มันจะได้รับข้อผิดพลาดเพราะเห็นได้ชัดว่าเราพยายามเรียกใช้

01:30.543 --> 01:36.220
'combinevalues' เป็นฟังก์ชัน ทั้งที่จริง ๆ แล้วมันเป็นตัวเลข

01:36.220 --> 01:39.090
ตอนนี้เราต้องการหลีกเลี่ยงสิ่งนี้ และเพื่อให้ชัดเจนว่า

01:39.090 --> 01:42.080
'combinevalues' จะเก็บฟังก์ชันไว้

01:42.080 --> 01:48.650
ตอนนี้ขั้นตอนแรกในทิศทางนั้นคือเราตั้งค่าประเภทที่นี่ให้ใช้งานได้

01:48.650 --> 01:50.550
ฟังก์ชันเป็นประเภทที่ TypeScript ให้มาในตอนท้าย

01:50.550 --> 01:57.940
และทำให้ชัดเจนว่าสิ่งที่เราเก็บไว้ในนี้จะต้องเป็นฟังก์ชัน

01:57.940 --> 02:00.870
ดังนั้น ที่นี่ฉันได้รับข้อผิดพลาด เนื่องจาก 5 เป็นตัวเลข

02:00.870 --> 02:02.230
ไม่ใช่ฟังก์ชัน

02:02.230 --> 02:06.660
และถ้าฉันแสดงความคิดเห็น เราสามารถคอมไพล์สิ่งนี้ได้ มิฉะนั้นเราจะได้รับข้อผิดพลาดระหว่างการคอมไพล์

02:06.660 --> 02:09.670
และตอนนี้มันก็รันอีกครั้งตามที่คาดไว้

02:09.670 --> 02:15.380
นี่เป็นสิ่งที่ดี แต่ก็ไม่สมบูรณ์แบบเพราะตอนนี้เราบอกว่านี่ควรเป็นฟังก์ชัน

02:15.380 --> 02:17.940
แต่ก็สามารถตั้งค่า 'combinevalues'

02:17.940 --> 02:21.460
เท่ากับ 'printResult' ได้เช่นกัน

02:21.460 --> 02:29.600
และแน่นอนว่า TypeScript จะไม่บ่นเพราะ 'printResult' เป็นฟังก์ชัน แต่แน่นอนว่าไม่ใช่ฟังก์ชันที่รับสองอาร์กิวเมนต์

02:29.600 --> 02:32.620
อีกครั้งถ้าฉันรวบรวมสิ่งนี้ TypeScript จะไม่บ่น

02:32.620 --> 02:34.800
แต่ถ้าเราโหลดซ้ำ เราจะเห็น undefined ที่นี่และผลลัพธ์ 8

02:34.800 --> 02:42.470
ดังนั้นฉันจึงไม่ได้ผลลัพธ์ที่ต้องการเพราะฉันเก็บฟังก์ชันผิดไว้ที่นั่น

02:42.470 --> 02:47.350
อีกครั้ง คงจะดีถ้า TypeScript จะบอกเราเกี่ยวกับเรื่องนั้น

02:47.350 --> 02:49.980
TypeScript ไม่สามารถแจ้งให้เราทราบเกี่ยวกับเรื่องนี้ได้ เพราะทั้งหมดที่เราบอกกับ

02:49.980 --> 02:51.340
TypeScript คือเราต้องการเก็บฟังก์ชันไว้ที่นั่น

02:51.340 --> 02:54.410
และนี่คือกรณีที่ชัดเจน

02:54.410 --> 03:00.550
ดังนั้นจะเป็นการดีหากเราสามารถระบุได้อย่างแม่นยำมากขึ้นว่าฟังก์ชันควรมีลักษณะอย่างไรที่เราต้องการจัดเก็บใน

03:00.550 --> 03:03.810
'combinevalues' และนั่นคือที่มาของฟังก์ชั่นประเภทต่างๆ

03:03.810 --> 03:11.900
ประเภทฟังก์ชันคือประเภทที่อธิบายถึงฟังก์ชันเกี่ยวกับพารามิเตอร์และค่าส่งคืนของฟังก์ชันนั้น

03:11.900 --> 03:15.690
ประเภทฟังก์ชันถูกสร้างขึ้นด้วยสัญกรณ์ฟังก์ชันลูกศรที่คุณรู้จักจาก

03:15.690 --> 03:19.870
JavaScript หรืออย่างน้อยก็ใกล้เคียงกับสัญกรณ์นั้น

03:19.870 --> 03:25.530
คุณไม่ได้ใส่วงเล็บปีกกาที่นี่ เพราะเราไม่ได้สร้างฟังก์ชันลูกศรที่นี่

03:25.530 --> 03:28.890
แต่เรากำลังสร้างประเภทฟังก์ชันแทน

03:28.890 --> 03:35.450
ที่ด้านขวาของลูกศรนี้ ให้คุณระบุประเภทการส่งคืนของฟังก์ชันที่คุณต้องการจัดเก็บไว้ที่นี่ในที่สุด

03:35.450 --> 03:37.180
นั่นควรเป็นตัวเลข

03:37.180 --> 03:44.120
ตอนนี้เรากำลังพูดว่า 'combinevalues' ยอมรับฟังก์ชันใดๆ ที่ไม่มีพารามิเตอร์แล้วส่งกลับเป็นตัวเลข

03:44.120 --> 03:47.200
แน่นอนว่าไม่ใช่สิ่งที่เราต้องการทั้งหมด

03:47.200 --> 03:51.840
เราต้องการให้แน่ใจว่า 'combinevalues' รับฟังก์ชันหรือสามารถจัดเก็บฟังก์ชันที่รับ

03:51.840 --> 03:54.180
2 ตัวเลขและส่งกลับเป็นตัวเลข

03:54.180 --> 04:01.400
และเพื่อให้เราสามารถเพิ่มพารามิเตอร์ที่นี่ให้กับฟังก์ชันประเภทนี้ได้

04:01.400 --> 04:02.400
เราไม่ต้องจับคู่ชื่อพารามิเตอร์จากที่นั่น

04:02.400 --> 04:05.040
เพียงแค่พิมพ์

04:05.040 --> 04:06.020
เราจึงได้ a ซึ่งควรเป็นหมายเลขประเภท

04:06.020 --> 04:09.060
และ b ซึ่งควรเป็นหมายเลขประเภท

04:09.060 --> 04:10.510
และตอนนี้สิ่งที่เรากำลังพูดกับ

04:10.510 --> 04:18.322
TypeScript คือ 'combinevalues' ควรยอมรับฟังก์ชันใด ๆ ที่ใช้สองพารามิเตอร์โดยที่แต่ละพารามิเตอร์เป็นตัวเลข

04:18.322 --> 04:22.930
และโดยที่ฟังก์ชันโดยรวมจะส่งกลับเป็นตัวเลข

04:22.930 --> 04:24.350
และนั่นเป็นสาเหตุที่ TypeScript ไม่บ่นว่าเราจัดเก็บ

04:24.350 --> 04:29.690
'เพิ่ม' ไว้ในค่ารวม เนื่องจาก 'เพิ่ม' เป็นฟังก์ชันที่ตอบสนองคำจำกัดความประเภทนี้ได้อย่างสมบูรณ์แบบ

04:29.690 --> 04:33.380
แต่มันบ่นเกี่ยวกับ 'printResult' เพราะ 'printResult'

04:33.380 --> 04:36.890
ตามที่บอกเราไว้ที่นี่ เป็นฟังก์ชันของอาร์กิวเมนต์ประเภทที่

04:36.890 --> 04:44.360
1 ซึ่งเป็นตัวเลข ไม่มีการส่งคืน ซึ่งตามที่เราคาดหวังจะได้ฟังก์ชันที่มีอาร์กิวเมนต์

04:44.360 --> 04:52.310
2 ตัว โดยที่แต่ละอาร์กิวเมนต์คือ ตัวเลขและเรายังส่งกลับตัวเลข

04:52.310 --> 04:55.810
ดังนั้นเราจึงมีข้อผิดพลาดตรงนี้ และถ้าผมพยายามคอมไพล์มัน แน่นอนว่าเราจะพบข้อผิดพลาดที่นี่ในคอมไพเลอร์

04:55.810 --> 05:06.270
และเราแก้ไขได้ด้วยการลบโค้ดบรรทัดนี้เท่านั้น

05:06.270 --> 05:07.110
ตอนนี้เราสามารถคอมไพล์ใหม่ได้โดยไม่มีข้อผิดพลาด

05:07.110 --> 05:10.930
และตอนนี้มันก็ทำงานตามที่คาดไว้

05:10.930 --> 05:17.413
ดังนั้น ประเภทของฟังก์ชัน ช่วยให้เราสามารถอธิบายว่าเราต้องการใช้ฟังก์ชันประเภทใดเป็นพิเศษ

05:18.290 --> 05:23.890
เป็นค่าที่คาดหวังในพารามิเตอร์สำหรับสร้างฟังก์ชันที่มีการเรียกกลับหรือตัวแปร

05:23.890 --> 05:25.420
เช่น ที่นี่
