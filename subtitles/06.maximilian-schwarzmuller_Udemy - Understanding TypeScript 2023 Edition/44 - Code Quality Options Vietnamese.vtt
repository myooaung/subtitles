WEBVTT

00:02.220 --> 00:03.053
Người hướng dẫn: Bây

00:03.053 --> 00:04.883
giờ nếu bạn tiếp tục, chúng ta có nhiều tùy chọn

00:04.883 --> 00:07.920
hơn, noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Về cơ bản, điều này giúp bạn với chất lượng mã.

00:10.470 --> 00:13.110
TypeScript sẽ khiếu nại nếu bạn

00:13.110 --> 00:15.930
có một số biến không sử dụng, v.v.

00:15.930 --> 00:20.930
Vì vậy, nếu chúng tôi bật ba tùy chọn này, chẳng hạn, tùy chọn này sẽ giúp

00:21.711 --> 00:24.230
bạn với các câu lệnh Switch, nơi bạn

00:24.230 --> 00:26.270
có thể quên từ khóa break.

00:26.270 --> 00:28.880
Nhưng nếu chúng ta bật ba tùy chọn này, chẳng

00:28.880 --> 00:31.760
hạn, điều mà TypeScript sẽ phàn nàn là nếu bạn

00:31.760 --> 00:33.600
có một biến tên người dùng ở đây,

00:33.600 --> 00:36.730
cục bộ trong hàm này và bạn không sử dụng nó.

00:36.730 --> 00:39.490
Bạn thấy đấy, cái này có những đường nguệch ngoạc màu vàng

00:39.490 --> 00:41.500
bởi vì nó thực sự không phải là một lỗi.

00:41.500 --> 00:43.179
Nó giống như một lời cảnh báo hoặc một gợi ý.

00:43.179 --> 00:45.643
Vì vậy, nếu tôi biên dịch ở đây, bạn sẽ thấy

00:47.750 --> 00:49.500
bây giờ, tuy nhiên, tôi gặp

00:49.500 --> 00:51.900
lỗi vì TypeScript chỉ biết lỗi.

00:51.900 --> 00:54.140
Và ở đó chúng tôi thấy rằng tên người dùng được khai

00:54.140 --> 00:57.080
báo, nhưng giá trị của nó không bao giờ được đọc vì chúng tôi đảm

00:57.080 --> 01:00.550
bảo rằng chúng tôi không muốn các biến cục bộ không được sử dụng.

01:00.550 --> 01:02.483
Các biến toàn cầu không được sử dụng,

01:03.440 --> 01:06.340
vì vậy nếu tôi có thứ gì đó như appId ở đây, thì được cho

01:06.340 --> 01:09.130
phép vì TypeScript không thể biết liệu bạn có thể

01:09.130 --> 01:12.370
cần giá trị được xác định toàn cục đó trong một tệp tập lệnh

01:12.370 --> 01:13.870
khác hay không.

01:13.870 --> 01:14.980
Vì vậy, điều này được cho

01:14.980 --> 01:17.280
phép, nhưng trong một chức năng mà không có nơi nào

01:17.280 --> 01:20.010
khác mà bạn có thể cần đến nó, TypeScript sẽ khiếu nại ngay

01:20.010 --> 01:22.020
bây giờ nếu bạn có mã không sử dụng.

01:22.020 --> 01:23.540
Và đó thường là một ý tưởng tốt.

01:23.540 --> 01:26.021
Cho phép bạn loại bỏ mã không sử dụng như vậy.

01:26.021 --> 01:28.510
Tương tự với các tham số không sử dụng.

01:28.510 --> 01:31.350
Tất nhiên, nếu bạn muốn lấy H ở đây thì một liên kết đã bị

01:31.350 --> 01:33.050
hỏng ngay bây giờ, nhưng ngay cả

01:33.050 --> 01:35.970
khi chúng tôi chuyển cái này vào tác phẩm này, nhưng bây

01:35.970 --> 01:39.220
giờ, một lần nữa, TypeScript và do đó ID cho chúng tôi biết rằng

01:39.220 --> 01:41.780
cái này không được sử dụng và cái này, vì vậy có thể

01:41.780 --> 01:44.293
bạn nên loại bỏ nó hoặc bắt đầu sử dụng nó.

01:45.238 --> 01:48.173
Vì vậy, đó là noUnusedParameters.

01:48.173 --> 01:51.365
Và noImplicitReturns có nghĩa là chúng ta

01:51.365 --> 01:55.620
sẽ gặp lỗi nếu chúng ta có một hàm đôi khi trả về thứ gì đó và

01:55.620 --> 01:57.130
đôi khi không.

01:57.130 --> 02:00.913
Giả sử chúng ta có một hàm khác, add, trong đó chúng ta nhận

02:01.912 --> 02:02.940
được hai số.

02:02.940 --> 02:05.906
Số và n2 là một số.

02:05.906 --> 02:10.906
Và, tất nhiên, chúng ta có thể trả về n1 cộng n2.

02:14.030 --> 02:15.710
Nhưng giả sử vì lý do nào đó,

02:15.710 --> 02:18.518
chúng ta đang kiểm tra xem n1 cộng n2 có lớn hơn

02:18.518 --> 02:21.800
0 hay không, bởi vì chúng ta chỉ muốn trả về nếu chúng

02:21.800 --> 02:23.700
ta có kết quả lớn hơn 0.

02:23.700 --> 02:25.040
Sau đó, chúng tôi muốn một giá trị trả lại.

02:25.040 --> 02:26.940
Nếu không, chúng tôi muốn trả lại không có gì.

02:26.940 --> 02:28.170
Chúng tôi không muốn trở lại.

02:28.170 --> 02:30.550
Chà, sau đó chúng tôi nhận được cảnh báo vì cài đặt

02:30.550 --> 02:32.598
bổ sung đó với noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript phát hiện ra rằng không phải tất cả các nhánh trong hàm này

02:36.401 --> 02:38.760
đều dẫn đến câu lệnh trả về và do cài đặt của chúng

02:38.760 --> 02:40.650
tôi, điều đó không được phép.

02:40.650 --> 02:44.150
Ít nhất chúng tôi phải cố tình không trả lại bất cứ thứ gì ở đây bằng

02:44.150 --> 02:45.790
cách thêm từ khóa trả về.

02:45.790 --> 02:48.260
Chỉ cần bỏ qua nó là không được phép ở đây.

02:48.260 --> 02:49.730
Nó được phép nếu bạn có một hàm

02:49.730 --> 02:52.446
không trả về bất cứ thứ gì, không có nhánh nào, nhưng

02:52.446 --> 02:54.520
nếu bạn có ít nhất một trường hợp trong đó

02:54.520 --> 02:56.423
hàm của bạn trả về một thứ gì đó, thì bạn

02:56.423 --> 02:58.770
phải đảm bảo rằng bạn trả về một thứ gì đó trong

02:58.770 --> 02:59.933
mọi trường hợp.

03:01.830 --> 03:03.130
Và với điều đó, chúng ta sắp kết thúc

03:03.130 --> 03:04.240
hướng dẫn cấu hình này.

03:04.240 --> 03:06.526
Chúng ta có thể bỏ qua moduleResolution ở đây.

03:06.526 --> 03:08.933
Tất cả các tùy chọn này thực sự khá tiên tiến, điều

03:08.933 --> 03:10.830
đó không quan trọng với chúng tôi ở đây,

03:10.830 --> 03:13.510
không quan trọng với bạn trong nhiều dự án.

03:13.510 --> 03:16.600
Tùy chọn bản đồ nguồn cho phép bạn điều chỉnh các bản đồ nguồn này

03:16.600 --> 03:18.180
mà chúng tôi đã xem xét trước đó.

03:18.180 --> 03:21.440
Vì vậy, các tệp dịch này từ JavaScript sang TypeScript.

03:21.440 --> 03:23.720
Các cài đặt mặc định thông thường sẽ ổn ở đây, vì vậy

03:23.720 --> 03:26.000
nếu bạn không biết mình đang thay đổi điều gì và tại

03:26.000 --> 03:27.010
sao lại làm như vậy, thì

03:27.010 --> 03:29.470
bạn thường không cần thay đổi bất cứ điều gì ở đây.

03:29.470 --> 03:31.512
Và liên quan đến các tùy chọn thử

03:31.512 --> 03:34.380
nghiệm này, tôi sẽ xem xét chúng, cụ thể là

03:34.380 --> 03:37.010
tại ExperimentDecorators, sau này trong

03:37.010 --> 03:38.910
mô-đun trang trí.

03:38.910 --> 03:41.810
Về cơ bản, điều này cho phép một số tính năng nhất định được

03:41.810 --> 03:45.060
sử dụng trong TypeScript, những tính năng thực sự mang tính thử nghiệm,

03:45.060 --> 03:48.271
nơi không chắc liệu chúng có kết thúc bằng JavaScript vào một thời

03:48.271 --> 03:50.270
điểm nào đó trong tương lai hay không và nơi

03:50.270 --> 03:52.940
bạn vẫn có thể muốn làm việc với chúng.

03:52.940 --> 03:55.220
Sau đó, bạn phải nói rõ ràng với TypeScript rằng

03:55.220 --> 03:57.070
bạn muốn làm việc với các tính năng này

03:57.070 --> 03:59.390
và bạn có thể làm điều đó với cấu hình đó.

03:59.390 --> 04:01.880
Nhưng một lần nữa, tôi sẽ trở lại với điều đó.

04:01.880 --> 04:04.170
Và do đó, bây giờ, chúng tôi xem qua tệp này, rất

04:04.170 --> 04:05.870
nhiều tùy chọn bạn có thể đặt ở đó.

04:05.870 --> 04:08.222
Và khi TypeScript phát triển, bạn thường cũng

04:08.222 --> 04:10.612
nhận được ngày càng nhiều tùy chọn được thêm

04:10.612 --> 04:13.837
vào đây, do đó, các tài liệu chính thức luôn là nơi tuyệt vời để

04:13.837 --> 04:16.160
tìm hiểu sâu hơn và để đảm bảo rằng bạn không

04:16.160 --> 04:18.210
bỏ lỡ một tùy chọn thú vị nào có thể giúp

04:18.210 --> 04:20.343
ích cho bạn trong dự án của mình.
