WEBVTT

00:02.170 --> 00:03.420
Laten we beginnen.

00:03.420 --> 00:06.330
Zoals ik al zei, maak ik hier een heel eenvoudige

00:06.330 --> 00:09.130
REST API, maar je kunt natuurlijk elke Node-applicatie

00:09.130 --> 00:10.810
bouwen met of zonder express

00:10.810 --> 00:13.780
en op elke manier met TypeScript, dus dit is slechts

00:13.780 --> 00:15.570
een voorbeeld.

00:15.570 --> 00:18.990
Je bent niet beperkt tot deze specifieke toepassing.

00:18.990 --> 00:21.560
In de src-map voeg ik een app toe. ts bestand dat het

00:21.560 --> 00:23.060
root entry point wordt

00:23.060 --> 00:25.970
waar we die server opstarten.

00:25.970 --> 00:29.530
En daar wil ik iets importeren uit Express, uit

00:29.530 --> 00:31.203
dit Express kader.

00:32.970 --> 00:35.460
Nu weet je waarschijnlijk hoe we Express hier kunnen toevoegen

00:35.460 --> 00:37.890
en een webserver met Express kunnen opzetten.

00:37.890 --> 00:41.330
We importeren Express met deze syntax hier

00:41.330 --> 00:46.330
en dan kunnen we Express uitvoeren als een functie.

00:46.380 --> 00:50.170
We krijgen zo'n app-object terug, waarop we listen kunnen aanroepen

00:50.170 --> 00:53.750
om op een bepaalde poort te luisteren naar inkomende verzoeken.

00:53.750 --> 00:56.120
Nu zou dit werken in normaal JavaScript, maar

00:56.120 --> 00:58.420
je ziet al dat ik hier een fout krijg.

00:59.540 --> 01:01.600
Nu krijg ik ook een suggestie

01:01.600 --> 01:03.500
waarom ik deze fout hier krijg,

01:03.500 --> 01:06.290
omdat require eigenlijk een functie is

01:06.290 --> 01:10.100
die bestaat in note. js, maar niet in de browser.

01:10.100 --> 01:12.540
Nu in de tsconfig. json bestand gebruik ik geen

01:12.540 --> 01:16.640
speciale libs die node ondersteunen. js dus in deze TypeScript is het

01:16.640 --> 01:18.120
zich niet bewust van deze

01:18.120 --> 01:20.150
algemene functie die bestaat

01:20.150 --> 01:22.900
in een node. js omgeving.

01:22.900 --> 01:27.140
Om dit te laten werken, moeten we een extra type installeren met "npm install

01:27.140 --> 01:30.220
--save-dev" kunnen we "@types/node" installeren om

01:30.220 --> 01:32.410
alle types te installeren die we nodig

01:32.410 --> 01:36.291
hebben om met node te werken. js Dus laten we dit commando

01:36.291 --> 01:39.460
uitvoeren en kijken of het ons helpt.

01:39.460 --> 01:42.320
Ja, het is gedaan en deze fout is weg.

01:42.320 --> 01:44.390
Maar misschien heb je ook gezien dat ik

01:44.390 --> 01:46.680
op de app geen auto-aanvulling kreeg.

01:46.680 --> 01:50.190
Het geeft ook geen foutmelding, maar als we over app gaan zien we dat

01:50.190 --> 01:52.410
TypeScript niet weet wat er in staat.

01:52.410 --> 01:54.210
Het is van het type "any".

01:54.210 --> 01:56.530
Dus moeten we waarschijnlijk meer types

01:56.530 --> 01:59.930
installeren en ook "@types/express" installeren om express-specifieke

01:59.930 --> 02:02.410
types te installeren.

02:02.410 --> 02:04.320
En dat is een patroon dat je al kent.

02:04.320 --> 02:06.850
Dat hebben we bekeken in het gedeelte over de

02:06.850 --> 02:08.350
bibliotheek van derden.

02:08.350 --> 02:12.030
Daar heb ik ook laten zien hoe u types packages kunt installeren om betere

02:12.030 --> 02:15.220
ondersteuning te krijgen in uw TypeScript scripts.

02:15.220 --> 02:19.320
Dus met dit type toegevoegd, zonder extra configuratie,

02:19.320 --> 02:22.030
Hah, werkt het nog steeds niet.

02:22.030 --> 02:23.140
De reden daarvoor is

02:23.140 --> 02:25.330
de import syntax die we hier gebruiken.

02:25.330 --> 02:28.270
Dit is de gewone gewone. js import syntaxis

02:28.270 --> 02:30.450
die noot. js standaard gebruikt,

02:30.450 --> 02:33.660
maar hier zijn we eigenlijk in een omgeving in TypeScript waar we

02:33.660 --> 02:36.140
een andere importsyntaxis kunnen gebruiken.

02:36.140 --> 02:38.230
We kunnen dezelfde importsyntax gebruiken

02:38.230 --> 02:40.373
die we kennen van ES-modules in de browser.

02:41.240 --> 02:46.240
We kunnen dus bijvoorbeeld "import express from 'express'" gebruiken.

02:46.710 --> 02:48.620
En als we dat doen en dan met de muis over "app" gaan, zie je

02:48.620 --> 02:49.910
dat het nu van het type "Express" is.

02:49.910 --> 02:53.040
Dus nu hebben we TypeScript ondersteuning.

02:53.040 --> 02:54.569
Nu, een belangrijke opmerking.

02:54.569 --> 02:58.790
In notitie. js bestaat ook een syntaxis

02:58.790 --> 03:00.810
die hierop lijkt.

03:00.810 --> 03:03.420
Nu is het onder een experimentele vlag,

03:03.420 --> 03:06.190
en het is al heel lang onder die vlag, dus

03:06.190 --> 03:10.010
gebruikelijk. js in notitie. js is veruit de standaard

03:10.010 --> 03:13.482
en meest gebruikelijke manier om import en export toe te voegen.

03:13.482 --> 03:16.060
Een syntaxis zoals deze wordt ondersteund als u deze

03:16.060 --> 03:18.380
experimentele vlag instelt, maar hier in deze

03:18.380 --> 03:19.990
code gebruiken we deze experimentele

03:19.990 --> 03:24.012
node eigenlijk niet. js syntax.

03:24.012 --> 03:26.209
In plaats daarvan gebruiken we TypeScript.

03:26.209 --> 03:29.859
Zodra we dit compileren naar JavaScript zal dit veranderen.

03:29.859 --> 03:31.860
En ik kan je dit laten zien, zodat

03:31.860 --> 03:34.060
we dit ook kunnen uitvoeren.

03:34.060 --> 03:36.230
Als je hier "tsc" uitvoert,

03:36.230 --> 03:40.330
misschien "tsc-w" om al in watch mode te komen, zie je

03:40.330 --> 03:42.680
dat dit de compilatie start.

03:42.680 --> 03:44.110
Het creÃ«ert een dist map, en daarin

03:44.110 --> 03:46.770
hebben we nu een app. js bestand, en

03:46.770 --> 03:50.040
hier ziet het er nu anders uit.

03:50.040 --> 03:54.500
Zie je, daar wordt die import niet opgezet zoals

03:54.500 --> 03:55.710
hier.

03:55.710 --> 03:58.900
Het gebruikt een andere syntaxis.

03:58.900 --> 04:02.350
Dus dit is de code die daadwerkelijk wordt uitgevoerd.

04:02.350 --> 04:04.780
En we kunnen dit uitvoeren met nodemon met

04:04.780 --> 04:07.640
deze tool die de server automatisch herstart als

04:07.640 --> 04:09.470
onze code verandert door een nieuw

04:09.470 --> 04:12.230
tabblad hier in de terminal te openen.

04:12.230 --> 04:13.620
Houd het andere tabblad open,

04:13.620 --> 04:15.960
want dat is ons TypeScript compilatieproces,

04:15.960 --> 04:18.760
en in dat nieuwe tabblad willen we onze server starten met

04:18.760 --> 04:20.095
behulp van nodemon.

04:20.095 --> 04:22.990
Daarvoor gaan we naar het pakket. json bestand en voeg een

04:22.990 --> 04:26.260
nieuw script toe, een start script misschien, waar

04:26.260 --> 04:30.900
we zeggen "nodemon dist/app. js" zodat nodemon dit bestand

04:30.900 --> 04:34.200
in de dist map uitvoert en daarmee onze

04:34.200 --> 04:36.360
server start.

04:36.360 --> 04:39.430
En met dat erbij en het pakket. json bestand opgeslagen kunnen

04:39.430 --> 04:43.240
we npmstart draaien om onze ontwikkelingsserver op te starten.

04:43.240 --> 04:47.710
En nu dient het deze dist app. js bestand Dat is de algemene opzet

04:47.710 --> 04:49.230
die we hebben, en TypeScript

04:49.230 --> 04:52.030
doet hier al wat werk.

04:52.030 --> 04:53.940
We hebben ook TypeSupport.

04:53.940 --> 04:55.360
En hier zie je in app. ts kunnen we

04:55.360 --> 04:57.756
code schrijven die er heel vertrouwd uitziet

04:57.756 --> 05:01.420
met de import/export syntaxis die we al kennen, maar wat we als

05:01.420 --> 05:03.640
output krijgen is uiteindelijk gewone

05:03.640 --> 05:07.000
JavaScript node. js code en dat

05:07.000 --> 05:09.640
is uiterst nuttig.

05:09.640 --> 05:12.140
Laten we nu eens wat nuttigers doen dan

05:12.140 --> 05:15.003
een server opstarten die niets doet.
