WEBVTT

00:02.440 --> 00:05.170
Instructeur : En ce qui concerne les callbacks et les types

00:05.170 --> 00:08.400
de fonctions, cela fonctionne à peu près de la même manière.

00:08.400 --> 00:10.550
Disons que nous avons une nouvelle

00:11.800 --> 00:14.990
fonction là-haut addAndHandle, disons.

00:14.990 --> 00:18.420
Là, nous nous attendons à obtenir deux chiffres et puis je veux

00:19.740 --> 00:22.320
aussi obtenir une fonction de rappel ici.

00:22.320 --> 00:24.480
Donc une fonction qui est passée et qui est un argument

00:24.480 --> 00:26.670
qui devrait faire quelque chose avec le résultat,

00:26.670 --> 00:29.930
alors ici nous pourrions générer le résultat, bien sûr.

00:29.930 --> 00:31.060
Mais je ne me contente

00:31.060 --> 00:33.290
pas de le renvoyer, je veux aussi appeler la

00:33.290 --> 00:35.670
fonction de rappel et passer le résultat.

00:35.670 --> 00:36.990
Maintenant, pour cela, je veux être

00:36.990 --> 00:39.270
vraiment clair que le callback doit être une fonction.

00:39.270 --> 00:42.190
Donc, encore une fois, j'utilise cette définition

00:42.190 --> 00:45.640
de type de fonction qui ne renvoie peut-être rien mais

00:45.640 --> 00:49.650
qui prend un nombre comme argument parce que nous lui passons

00:49.650 --> 00:51.280
un nombre ici.

00:51.280 --> 00:52.740
Donc la fonction de rappel,

00:52.740 --> 00:55.870
la fonction que nous passons dans cette fonction comme

00:55.870 --> 00:58.460
paramètre doit accepter un nombre.

00:58.460 --> 01:01.890
Maintenant, en bas, on appelle addAndHandle, on

01:01.890 --> 01:05.240
passe dans 10 et 20 et on passe dans une fonction.

01:05.240 --> 01:07.570
Par exemple, une fonction anonyme ici.

01:07.570 --> 01:09.710
Donc maintenant, ici, lorsque nous appelons la fonction,

01:09.710 --> 01:11.470
il ne s'agit bien sûr pas d'un type de fonction

01:11.470 --> 01:13.620
mais d'une valeur concrète que nous passons pour ce

01:13.620 --> 01:15.150
troisième argument.

01:15.150 --> 01:18.870
Donc, voici maintenant une fonction anonyme qui crée ici

01:18.870 --> 01:22.300
et là nous savons que nous allons obtenir un nombre.

01:22.300 --> 01:23.810
Peut-être donner un nom au résultat ici

01:23.810 --> 01:26.110
et ensuite nous pourrons en faire ce que nous voulons.

01:26.110 --> 01:27.623
Et maintenant, si vous compilez

01:28.570 --> 01:31.120
ceci, nous voyons ce journal en bas, 30, qui

01:31.120 --> 01:33.540
est le résultat de notre fonction de rappel

01:33.540 --> 01:35.600
que nous avons passé à addAndHandle

01:35.600 --> 01:38.250
où addAndHandle combine deux nombres et appelle

01:38.250 --> 01:39.850
ensuite le rappel où le rappel

01:39.850 --> 01:43.200
doit remplir cette condition ici.

01:43.200 --> 01:45.870
L'avantage de définir la fonction de rappel ici est

01:45.870 --> 01:49.490
qu'à l'intérieur de la fonction que nous passons, il y a un type de rappel

01:49.490 --> 01:52.240
qui est capable de déduire que le résultat sera un nombre

01:52.240 --> 01:54.000
et donc nous pouvons faire n'importe

01:54.000 --> 01:56.620
quoi avec le résultat ici.

01:56.620 --> 01:58.090
Ce que nous pourrions faire avec

01:58.090 --> 02:00.990
un nombre sans indiquer explicitement le type ici parce que

02:00.990 --> 02:03.226
TypeScript sait que le résultat sera un nombre

02:03.226 --> 02:04.970
parce que nous avons clairement indiqué

02:04.970 --> 02:08.473
que le callback recevra un argument qui est un nombre.

02:09.310 --> 02:12.170
Par conséquent, si nous attendions un deuxième argument ici dans

02:12.170 --> 02:13.060
le callback, nous obtiendrions

02:13.060 --> 02:15.460
une erreur parce que nous savons bien que le callback

02:15.460 --> 02:18.630
que nous attendons dans notre fonction addAndHandle ne doit avoir qu'un

02:18.630 --> 02:20.500
seul argument.

02:20.500 --> 02:22.420
Donc si nous passons ensuite dans une fonction

02:22.420 --> 02:23.950
de rappel qui prend un deuxième argument,

02:23.950 --> 02:26.240
c'est clairement une erreur.

02:26.240 --> 02:28.250
La seule chose que TypeScript ne détecte pas

02:28.250 --> 02:30.280
est que nous retournons quelque chose ici.

02:30.280 --> 02:33.690
Si un résultat est renvoyé et que la callback renvoie quelque chose,

02:33.690 --> 02:34.767
même si nous avons clairement

02:34.767 --> 02:37.300
indiqué qu'elle ne devait rien renvoyer.

02:37.300 --> 02:41.180
Il ne s'agit toutefois pas d'une erreur ou d'un bogue dans TypeScript.

02:41.180 --> 02:43.150
En fait, ça arrive exprès.

02:43.150 --> 02:46.000
En spécifiant void ici sur notre type de callback, nous disons

02:46.000 --> 02:49.520
essentiellement que nous allons ignorer tous les résultats que vous pourriez

02:49.520 --> 02:50.910
retourner ici.

02:50.910 --> 02:54.030
Donc, nous disons essentiellement que dans addAndHandle, où nous

02:54.030 --> 02:56.020
obtenons cette fonction de rappel, nous

02:56.020 --> 02:58.080
ne ferons rien avec le type de retour.

02:58.080 --> 03:00.600
C'est pourquoi vous pourrez retourner quelque

03:00.600 --> 03:03.550
chose ici sans punition, mais vous savez, parce que c'est

03:03.550 --> 03:06.850
clairement défini ici sur le type de callback, que le callback

03:06.850 --> 03:09.230
ne fera rien avec la valeur que vous pourriez

03:09.230 --> 03:10.870
retourner ici.

03:10.870 --> 03:13.543
Ainsi, addAndHandle, à l'intérieur de la fonction,

03:13.543 --> 03:15.680
ne fera rien avec la valeur que vous pourriez

03:15.680 --> 03:17.120
renvoyer.

03:17.120 --> 03:19.620
Et c'est bien sûr un élément d'information utile.

03:19.620 --> 03:21.270
Vous pourriez vous attendre à ce

03:21.270 --> 03:25.710
qu'ici, nous fassions quelque chose avec la valeur renvoyée par le callback, et en spécifiant

03:25.710 --> 03:29.000
ce type ici, nous indiquons clairement qu'à l'intérieur de addAndHandle,

03:29.000 --> 03:31.520
nous ne sommes pas intéressés par une quelconque

03:31.520 --> 03:33.920
valeur de retour.

03:33.920 --> 03:36.410
Ainsi, cela ne vous oblige pas à passer dans un

03:36.410 --> 03:38.260
callback qui ne renvoie rien.

03:38.260 --> 03:40.830
Cela vous indique simplement que tout ce que vous pourriez

03:40.830 --> 03:42.200
rendre ne sera pas utilisé.

03:42.200 --> 03:44.070
Pour les paramètres, c'est bien sûr différent.

03:44.070 --> 03:45.540
Cette règle est appliquée

03:45.540 --> 03:48.310
parce qu'il est important que vous sachiez si vous

03:48.310 --> 03:51.720
passez un callback qui attend plus de paramètres.

03:51.720 --> 03:53.490
Eh bien, vous obtiendrez une erreur ou vous

03:53.490 --> 03:55.350
n'obtiendrez pas le résultat que vous voulez

03:55.350 --> 03:57.740
parce que je ne vous donne qu'un seul résultat.

03:57.740 --> 04:01.290
Donc là, on ne peut pas simplement ignorer ce que l'on veut comme c'est

04:01.290 --> 04:02.840
le cas pour le type de retour.

04:02.840 --> 04:05.506
Nous ignorons cela ici pour le passage de quelque chose

04:05.506 --> 04:08.750
où la fonction addAndHandle est responsable de cela parce que

04:08.750 --> 04:10.920
c'est là que le callback est appelé.

04:10.920 --> 04:13.210
C'est pourquoi les paramètres sont imposés et TypeScript

04:13.210 --> 04:15.060
est vraiment strict en ce qui concerne

04:15.060 --> 04:17.150
le nombre et le type de paramètres des fonctions

04:17.150 --> 04:19.508
de rappel et pourquoi il ne se soucie pas vraiment

04:19.508 --> 04:21.253
du type de retour.
