WEBVTT

00:02.200 --> 00:03.210
Eğitmen: Öyleyse TypeScript

00:03.210 --> 00:05.520
ve Node ile başlayalım. js ve bunun için, aslında

00:05.520 --> 00:08.660
burada boş yeni bir klasördeyim, sadece bazı yapılandırma

00:08.660 --> 00:10.610
dosyaları var ve çok basit bir şekilde

00:10.610 --> 00:12.140
başlayalım.

00:12.140 --> 00:15.020
Bir uygulama ekleyelim. ts dosyası burada.

00:15.020 --> 00:17.370
Elbette istediğiniz ismi verebilirsiniz.

00:17.370 --> 00:19.180
Ve orada, Node ile çalıştırmak istediğimiz

00:19.180 --> 00:22.220
bazı kodlar yazalım. js, ancak TypeScript

00:22.220 --> 00:24.980
kullanmak istediğimiz yerde.

00:24.980 --> 00:26.350
Basit bir komut dosyası, sadece

00:26.350 --> 00:28.910
konsoldan bir şey günlüğe kaydetmek olabilir.

00:28.910 --> 00:30.450
Bu tarayıcıda çalışır, ancak

00:30.450 --> 00:33.350
bu Node ile de çalışır. js.

00:33.350 --> 00:35.840
Şimdi Node aldığınızdan emin olun. js yüklü, ki bu kursu

00:35.840 --> 00:37.220
takip ettiyseniz kesinlikle

00:37.220 --> 00:38.740
sahip olmalısınız çünkü

00:38.740 --> 00:42.077
onu NPM'de Webpack ile ve NPM ile yüklediğimiz diğer

00:42.077 --> 00:43.910
birçok araç ve kütüphaneyle

00:43.910 --> 00:46.710
birlikte kullandık.

00:46.710 --> 00:48.480
Yani Node'a sahip olmalısınız. js yüklü.

00:48.480 --> 00:50.300
Ve eğer yüklediyseniz, JavaScript

00:50.300 --> 00:52.130
olarak derlediğinizde bu dosyayı

00:52.130 --> 00:54.110
çalıştırabilirsiniz.

00:54.110 --> 00:57.000
Yani tsc uygulamasını çalıştırırsam. ve uygulamamı

00:57.000 --> 01:00.360
üretiyorum. js dosyası bu nedenle, bunu

01:00.360 --> 01:02.890
node ile çalıştırabilirim ve buraya bir

01:02.890 --> 01:04.503
şey yazdırabilirim.

01:06.550 --> 01:08.990
Şimdi uygulamayı sildiğimde. js dosyası ve uygulamayı

01:08.990 --> 01:11.890
çalıştırmaya çalışıyorum. node ile birlikte, garip

01:11.890 --> 01:13.810
bir şey göreceksiniz.

01:13.810 --> 01:15.070
Bu da işe yarar.

01:15.070 --> 01:18.010
Peki eğer node TypeScript çalıştırabiliyorsa?

01:18.010 --> 01:20.380
Hayır değil ve bu gerçekten önemli.

01:20.380 --> 01:23.210
Sadece dosya uzantısını önemsemez, ancak dosyada

01:23.210 --> 01:25.260
bulduğu her şeyi normal bir JavaScript

01:25.260 --> 01:27.420
olarak ele alır ve buradaki herhangi

01:27.420 --> 01:30.180
bir TypeScript özelliği kullanmaz, bu yüzden

01:30.180 --> 01:31.370
çalışır.

01:31.370 --> 01:34.340
Buraya farklı içerik eklersek bu durum değişir.

01:34.340 --> 01:36.400
Diyelim ki bunun yerine bir sayı olan bir

01:36.400 --> 01:37.370
yaş değişkenimiz

01:37.370 --> 01:40.080
var ve burada bunu 30 olarak ayarlıyorum ve sonra konsol

01:40.080 --> 01:42.250
ediyorum. yaşı buraya kaydet.

01:42.250 --> 01:44.840
Bu elbette geçerli bir TypeScript kodudur.

01:44.840 --> 01:46.790
Ancak bunu node ile çalıştırmaya çalışırsak,

01:46.790 --> 01:48.370
bir hata aldığımızı göreceksiniz.

01:48.370 --> 01:52.450
Yani node, TypeScript'i ayrıştırma ve derleme yeteneğine sahip değildir,

01:52.450 --> 01:54.210
sadece onunla çalıştırdığınız

01:54.210 --> 01:56.960
her dosyayı JavaScript olarak ele alır.

01:56.960 --> 01:59.030
Ve dosyada herhangi bir TypeScript özelliği

01:59.030 --> 02:01.100
kullanmıyorsanız, evet o zaman çalışır.

02:01.100 --> 02:02.950
Ama yaparsanız, işe yaramaz.

02:02.950 --> 02:04.920
Daha sonra içinde yalnızca geçerli JavaScript

02:04.920 --> 02:06.550
kodu bulunan JavaScript dosyasını

02:06.550 --> 02:08.960
çalıştırmak için her zaman önce dosyayı JavaScript'e

02:08.960 --> 02:11.350
derlemeniz gerekir.

02:11.350 --> 02:13.030
Bunu anlamak gerçekten çok önemli.

02:13.030 --> 02:15.890
Node, TypeScript'i çalıştırmaz.

02:15.890 --> 02:20.710
Şimdi aslında bir paket yükleyebilirsiniz, ts-node, sonuçta size TypeScript

02:20.710 --> 02:24.230
derleyicisini node çalıştırılabilir dosyasıyla birlikte

02:24.230 --> 02:27.880
verir, diyebilirsiniz, böylece TypeScript dosyalarını

02:27.880 --> 02:30.320
çalıştırmak için kullanabileceğiniz

02:30.320 --> 02:34.170
bir aracı global olarak yükleyebilirsiniz.

02:34.170 --> 02:35.210
Ancak perde arkasında

02:35.210 --> 02:37.620
sadece sizin için derleme işlemini yapacak ve derleme

02:37.620 --> 02:39.440
kodunu çalıştıracaktır.

02:39.440 --> 02:42.610
Yani temel olarak tsc ve düğüm adımını tek bir adımda

02:42.610 --> 02:43.890
birleştirir.

02:43.890 --> 02:46.060
Yani, kullanabileceğiniz bir pakettir,

02:46.060 --> 02:49.150
ancak bu geliştirme için güzel olsa da, üretim için,

02:49.150 --> 02:52.330
dosyalarınızı bazı web sunucularında, bazı web barındırıcılarında

02:52.330 --> 02:54.850
gerçekten sunmak için, bu muhtemelen ideal

02:54.850 --> 02:56.950
değildir, çünkü kodunuz her çalıştırıldığında

02:56.950 --> 03:12.090
bu ekstra derleme adımına sahip olmak, geliştirme sırasında iyi olan, ancak kodunuz üretime hazır olduğunda ve gerçekten bir yere sunmak istediğinizde muhtemelen istemediğiniz ekstra bir ek yük ekler.

03:12.090 --> 03:13.260
Bu nedenle bu modülde ts-node

03:13.260 --> 03:15.950
kullanmayacağız ve herhangi bir TypeScript dosyasını

03:15.950 --> 03:18.180
node ile çalıştırmaya çalışmayacağız.

03:18.180 --> 03:21.570
Bunun yerine size burada sadece TypeScript ve TypeScript derleyicisi

03:21.570 --> 03:24.520
ve vanilla node ile bir node express web uygulaması veya rest

03:24.520 --> 03:26.150
API oluşturmak için kullanabileceğimiz

03:26.150 --> 03:31.343
bir kurulum göstereceğim.

03:31.343 --> 03:31.343
js.
