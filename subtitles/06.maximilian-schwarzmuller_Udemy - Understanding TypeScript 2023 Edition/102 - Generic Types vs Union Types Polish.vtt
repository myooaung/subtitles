WEBVTT

00:02.180 --> 00:04.432
-: Teraz jednym wspólnym źródłem zamieszania,

00:04.432 --> 00:06.300
chcę wyjaśnić tutaj, jest różnica

00:06.300 --> 00:09.030
między Generics i Union typy.

00:09.030 --> 00:11.950
Dlaczego można pomylić te dwie rzeczy?

00:11.950 --> 00:14.440
Cóż, na przykład nasze przechowywanie danych tutaj.

00:14.440 --> 00:16.260
Jeśli akceptujemy typy Generic

00:16.260 --> 00:19.240
oparte na tych typach, możemy również przepisać

00:19.240 --> 00:21.157
to tak, aby po prostu powiedzieć:

00:21.157 --> 00:23.750
"Cóż, chcemy przechowywać tutaj ciągi,

00:23.750 --> 00:27.610
liczby lub Booleans, prawda? Więc moglibyśmy to przechowywać, a dokładnie zawinąć to

00:27.610 --> 00:30.470
w nawiasy, tak abyśmy powiedzieli, że któryś

00:30.470 --> 00:32.660
z tych typów jest tablicą.

00:32.660 --> 00:35.040
Następnie tutaj, oczywiście, moglibyśmy również powiedzieć:

00:35.040 --> 00:37.017
"Cóż, to, co otrzymujemy tutaj, gdy dodajemy

00:37.017 --> 00:38.420
element, to albo łańcuch, liczba,

00:38.420 --> 00:39.740
albo Boolean, gdy go usuwamy,

00:39.740 --> 00:41.120
jest to samo. Jaki jest teraz problem z takim podejściem?

00:41.120 --> 00:43.007
Na pierwszy rzut oka może wyglądać, że osiąga to samo, ale

00:44.424 --> 00:45.880
w rzeczywistości robi coś zupełnie innego.

00:45.880 --> 00:49.630
Mówimy tutaj, że przechowujemy tam dowolne dane,

00:49.630 --> 00:52.310
o ile jest to tablica łańcuchów,

00:52.310 --> 00:53.710
liczb lub Booleans,

00:53.710 --> 00:55.690
a następnie dodajemy tutaj

00:55.690 --> 00:57.220
dowolne dane, albo

00:57.220 --> 00:59.730
łańcuch, liczbę lub Boolean,

00:59.730 --> 01:02.930
i to samo dla usuwania.

01:02.930 --> 01:04.670
Teraz mamy już oczywiście jakieś błędy na dole, bo

01:04.670 --> 01:06.650
nie mogę już tego zainicjalizować w sposób generyczny.

01:06.650 --> 01:09.830
Ale poza tym to działa.

01:09.830 --> 01:12.520
Problemem jest jednak to, że w przypadku jednego

01:12.520 --> 01:14.420
z nich nie mówimy, że jest to tablica

01:14.420 --> 01:15.890
łańcuchów, tablica liczb

01:15.890 --> 01:18.260
lub tablica boolowska.

01:18.260 --> 01:20.630
To mówi, mamy tablicę, która może

01:20.630 --> 01:24.190
mieć mieszane ciągi, liczby i Booleans.

01:24.190 --> 01:26.290
Więc jeśli chciałbyś powiedzieć

01:26.290 --> 01:30.190
albo tablica łańcuchów, albo tablica liczb, musielibyśmy powiedzieć

01:30.190 --> 01:32.100
tablica łańcuchów, tablica liczb

01:32.100 --> 01:34.403
lub tablica Boolean.

01:34.403 --> 01:36.020
Cóż, możemy to zrobić, ale teraz mamy tu problem.

01:36.020 --> 01:39.100
Teraz dodajemy ciąg, liczbę lub Boolean, ale

01:39.100 --> 01:41.660
w zależności od tego, czym właściwie ustawiliśmy

01:41.660 --> 01:44.710
tę tablicę danych, albo tablicę liczb, albo tablicę

01:44.710 --> 01:46.750
Boolean, albo tablicę łańcuchów,

01:46.750 --> 01:52.320
nie wolno nam dodać liczby, ani Boolean, ani łańcucha.

01:52.320 --> 01:54.140
Jeśli ustawimy to jako tablicę łańcuchów

01:54.140 --> 01:55.870
to nie możemy dodać tutaj liczby.

01:55.870 --> 01:57.833
Jednak tutaj jestem w porządku z dowolnym parametrem,

01:57.833 --> 01:59.800
o ile jest to liczba, Boolean lub ciąg.

01:59.800 --> 02:02.850
Czyli problem jest tutaj z typami Unii.

02:02.850 --> 02:05.670
Akceptujemy dowolną z tych wartości za każdym razem,

02:05.670 --> 02:08.380
gdy ta metoda zostanie wywołana, lub ta metoda.

02:08.380 --> 02:11.053
Nie mówimy więc: "Hej, kiedy pracujemy

02:11.053 --> 02:14.250
z tą klasą, musisz zdecydować się na jeden typ

02:14.250 --> 02:15.397
i trzymać się go,

02:15.397 --> 02:18.150
zamiast tego mówimy, że kiedy wywołujesz

02:18.150 --> 02:21.830
tę metodę, możesz użyć dowolnego z tych typów.

02:21.830 --> 02:23.440
To nie jest dokładnie to, czego tu chcemy.

02:23.440 --> 02:26.150
Jeśli przywrócę to do poprzedniej konfiguracji,

02:26.150 --> 02:29.640
w której używaliśmy typów generycznych, wtedy otrzymaliśmy

02:29.640 --> 02:33.050
inną konfigurację.

02:33.050 --> 02:34.810
Tutaj mówimy, że musisz raz wybrać,

02:37.580 --> 02:39.450
jaki rodzaj danych chcesz przechowywać,

02:39.450 --> 02:42.060
a następnie możesz dodać tylko ten dokładny

02:42.060 --> 02:43.950
rodzaj danych.

02:43.950 --> 02:45.750
Więc tutaj, jeśli dodaję liczbę,

02:45.750 --> 02:48.523
na przykład, dostaję błąd, ponieważ to nie jest

02:49.710 --> 02:52.623
ciąg i pokazuje, że chcę zarządzać tylko ciągami

02:53.830 --> 02:54.730
tutaj, gdy ustawiam

02:54.730 --> 02:56.170
typ ogólny.

02:56.170 --> 02:57.810
Taka jest różnica między typami unii a typami generycznymi.

02:57.810 --> 03:01.250
Typy unii mogą być świetne, jeśli chcesz mieć funkcję,

03:01.250 --> 03:05.040
którą możesz wywołać z jednym z tych typów za każdym razem,

03:05.040 --> 03:06.920
gdy ją wywołasz.

03:06.920 --> 03:08.690
Typy generyczne są świetne,

03:08.690 --> 03:11.570
jeśli chcesz zamknąć się w określonym typie.

03:11.570 --> 03:13.460
Użyj tego samego typu w całej

03:13.460 --> 03:15.510
tworzonej instancji klasy.

03:15.510 --> 03:18.380
Używaj tego samego typu w całej funkcji.

03:18.380 --> 03:20.070
To właśnie tam chcesz mieć typ generyczny.

03:20.070 --> 03:23.300
Chcesz typów unii, gdy jesteś elastyczny, aby mieć

03:23.300 --> 03:25.850
inny typ z każdym wywołaniem metody, z

03:25.850 --> 03:28.120
każdym wywołaniem funkcji.

03:28.120 --> 03:30.810
Następnie możesz użyć typów unii.

03:30.810 --> 03:33.470
Typy generyczne zamykają się w typie.
