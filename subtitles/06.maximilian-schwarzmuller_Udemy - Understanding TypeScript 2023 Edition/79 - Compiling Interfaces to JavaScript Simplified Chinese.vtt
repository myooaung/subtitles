WEBVTT

00:02.170 --> 00:05.580
教师：现在有很多关于接口和类的讨论｡

00:05.580 --> 00:15.290
现在, 让我们深入了解一下JavaScript实际上产生或提供了什么作为接口的替代｡

00:15.290 --> 00:17.450
我们了解到, 对于类代码,

00:17.450 --> 00:20.560
最终取决于我们编译的版本｡

00:20.560 --> 00:27.160
如果在ts冲突中编译es6, 那么我们的输出将使用class关键字｡

00:27.160 --> 00:29.330
因为我们在这里编译了es5,

00:29.330 --> 00:33.420
所以我们在最后看到了使用构造或函数的解决方案｡

00:33.420 --> 00:36.670
但是, 接口会发生什么情况？

00:36.670 --> 00:38.720
好吧, 我们来看看应用程序｡  js文件中｡ 

00:38.720 --> 00:41.780
你什么也看不见｡ 

00:41.780 --> 00:46.360
您不会看到我们界面的任何翻译｡ 

00:46.360 --> 00:49.410
AddFn､ 已命名､ Greetable｡ 

00:49.410 --> 00:52.970
你在应用程序里找不到这些东西｡  js的｡ 

00:52.970 --> 00:55.440
你可以在这里找到我们的函数,

00:55.440 --> 00:59.180
你可以找到person对象的构造函数, 基本上就是person类的翻译,

00:59.180 --> 01:03.500
以及其他代码｡

01:03.500 --> 01:06.680
在任何接口上都找不到引用｡ 

01:06.680 --> 01:08.240
这是有原因的｡ 

01:08.240 --> 01:11.350
接口没有转换｡ 

01:11.350 --> 01:13.650
JavaScript不知道这个功能｡ 

01:13.650 --> 01:15.550
这是一个纯TypeScript特性,

01:15.550 --> 01:18.830
仅在开发和编译期间可用｡

01:18.830 --> 01:21.640
所以你可以用它来改进你的代码｡ 

01:21.640 --> 01:26.010
不过, JavaScript文件中不会有任何输出,

01:26.010 --> 01:28.390
因此它是一个纯粹的开发特性,

01:28.390 --> 01:30.700
可以帮助您编写更好的代码,

01:30.700 --> 01:34.100
结构清晰的代码遵循明确的规则｡

01:34.100 --> 01:38.720
在运行时, 不会留下这些接口的任何跟踪｡ 

01:38.720 --> 01:41.760
您不会在代码中看到任何与接口相关的内容,

01:41.760 --> 01:47.130
只有函数､ 类和所有其他代码在输出中编译｡

01:47.130 --> 01:50.020
你可以说, 接口是简单的倾倒｡ 

01:50.020 --> 01:54.340
它们在编译过程中用于检查代码, 然后被忽略｡

01:54.340 --> 01:56.690
没有任何内容可以作为它们的输出｡ 
