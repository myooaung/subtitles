WEBVTT

00:02.230 --> 00:04.860
Instructeur: Losjes verwant aan het idee van

00:04.860 --> 00:09.760
een Tuple is het idee om een paar specifieke identifiers te hebben, globale constanten

00:09.760 --> 00:12.710
waar je misschien mee werkt in je app, die je wilt weergeven

00:12.710 --> 00:15.020
als getallen, maar waaraan je een menselijk

00:15.020 --> 00:18.530
leesbaar label wilt toekennen.

00:18.530 --> 00:20.500
En daarvoor heb je het type Enum.

00:20.500 --> 00:23.800
Nogmaals, dat bestaat in sommige hogere programmeertalen.

00:23.800 --> 00:25.780
JavaScript weet het echter niet.

00:25.780 --> 00:26.613
Het ziet er zo uit.

00:26.613 --> 00:28.110
Zo maak je een enum.

00:28.110 --> 00:30.540
Je gebruikt het enum sleutelwoord, dat alleen

00:30.540 --> 00:33.060
bestaat in TypeScript wereld, niet in JavaScript,

00:33.060 --> 00:34.840
daarna heb je accolades, en dan

00:34.840 --> 00:36.810
je identifiers.

00:36.810 --> 00:39.141
En dit type, dat wordt toegevoegd door

00:39.141 --> 00:42.030
TypeScript geeft je een opgesomde lijst.

00:42.030 --> 00:45.070
Dus deze labels worden uiteindelijk gewoon vertaald naar getallen

00:45.070 --> 00:48.580
die beginnen bij nul, zodat je menselijk leesbare labels hebt waarmee je

00:48.580 --> 00:50.133
in je code kunt werken.

00:51.310 --> 00:53.500
Om een voorbeeld te geven, gaan we terug

00:53.500 --> 00:55.620
naar onze persoon met zijn rol.

00:55.620 --> 00:58.010
Ik zal die code kopiëren en dan uitcommentariëren omdat

00:58.010 --> 00:59.710
ik het een beetje ga veranderen.

00:59.710 --> 01:01.600
En dan ga ik hier af van die expliciete

01:01.600 --> 01:05.380
typetoekenning en in plaats daarvan terug naar inferentie, want

01:05.380 --> 01:07.150
ik verander nu van rol.

01:07.150 --> 01:10.330
En laten we nu zeggen dat we een admin, een auteur en misschien een

01:10.330 --> 01:12.350
alleen-lezen gebruiker willen hebben.

01:12.350 --> 01:14.750
De admin heeft een ID van nul, de alleen-lezende

01:14.750 --> 01:18.660
gebruiker heeft er één, de auteur heeft er twee.

01:18.660 --> 01:21.160
Nu kunnen we dat natuurlijk precies zo opslaan

01:21.160 --> 01:22.550
met deze getallen.

01:22.550 --> 01:24.830
Een nadeel is dat we altijd een getal kunnen toevoegen

01:24.830 --> 01:26.670
waarvoor we misschien geen rol hebben

01:26.670 --> 01:30.320
en als we dan later in onze code proberen de rol eruit te halen en de if-controle

01:30.320 --> 01:33.392
gebruiken, kan dat tot fouten leiden.

01:33.392 --> 01:37.160
En bovendien hebben wij als ontwikkelaar moeite om te begrijpen

01:37.160 --> 01:39.690
welke rol deze gebruiker heeft.

01:39.690 --> 01:41.310
Was het voor de auteur?

01:41.310 --> 01:43.020
Of was het de lezing van de gebruiker?

01:43.020 --> 01:46.140
Je zou dit kunnen vergeten als je langere pauzes maakt,

01:46.140 --> 01:48.810
als je in grotere teams werkt, enzovoort.

01:48.810 --> 01:50.540
Dus als ontwikkelaar

01:50.540 --> 01:54.310
wil je misschien menselijk leesbare identificaties,

01:54.310 --> 01:58.630
zoiets als ADMIN, en READ ONLY USER, zoiets.

01:58.630 --> 02:00.240
Nu, natuurlijk, zouden we dat kunnen gebruiken,

02:00.240 --> 02:02.880
we zouden met zulke stringwaarden kunnen werken.

02:02.880 --> 02:06.100
Het probleem is als we dan later een if check nodig hebben,

02:06.100 --> 02:11.100
we controleren of de persoonsrol gelijk is aan, was het READ_ONLY_USER?

02:12.260 --> 02:13.500
Of was het één woord?

02:13.500 --> 02:15.380
Was het met onderstrepingen?

02:15.380 --> 02:17.440
Zie je, dan moeten we onthouden hoe we deze

02:17.440 --> 02:19.020
strings hebben geschreven, welke

02:19.020 --> 02:20.970
tekst we er precies in hebben staan.

02:20.970 --> 02:24.330
Want deze string met de streepjes tussen de woorden

02:24.330 --> 02:27.430
is natuurlijk niet hetzelfde als deze string.

02:27.430 --> 02:29.973
Dus hier zouden we het nooit maken, is alleen

02:31.150 --> 02:36.120
lezen als je dat probeert te compileren en af te drukken, omdat, nou ja, de

02:36.120 --> 02:39.170
controle gewoon niet waar oplevert.

02:39.170 --> 02:42.150
We hebben dat niet als rol bij de persoon, vandaar dat we de uitvoer

02:42.150 --> 02:43.930
hier in de console niet krijgen.

02:43.930 --> 02:47.290
Dus tekenreeksen hebben ook nadelen.

02:47.290 --> 02:50.340
Voor dergelijke scenario's is het in JavaScript heel gewoon

02:50.340 --> 02:52.340
om globale constanten te definiëren.

02:52.340 --> 02:55.580
Bijvoorbeeld admin, die dan bepaalde waarden,

02:55.580 --> 02:58.053
zoals getallen of strings, beide mogelijk

02:58.980 --> 03:00.060
houdt.

03:00.060 --> 03:01.700
Getallen kunnen ons natuurlijk

03:01.700 --> 03:04.370
wat extra code en bits in het geheugen besparen.

03:04.370 --> 03:09.370
En daar hebben we misschien ADMIN, READ_ONLY en AUTHOR en daar

03:09.390 --> 03:10.870
beneden moeten we

03:10.870 --> 03:13.750
dan gewoon die rol gebruiken.

03:13.750 --> 03:16.460
Het voordeel daarvan is dat we dit overal in onze code kunnen

03:16.460 --> 03:17.343
gebruiken.

03:18.230 --> 03:22.600
En daarom hier bijvoorbeeld, als ik deze code uitvoer, als ik het compileer

03:22.600 --> 03:23.680
en dan laten we dit

03:25.260 --> 03:28.570
herladen, zien we als admin hier, dus dit werkt en dit is

03:28.570 --> 03:31.520
een veel voorkomend patroon in JavaScript.

03:31.520 --> 03:34.190
Het nadeel is dat de rol nu weer gewoon een getal

03:34.190 --> 03:37.290
is, dus we kunnen er elk getal in opslaan, zelfs een

03:37.290 --> 03:39.630
getal dat we niet ondersteunen.

03:39.630 --> 03:42.450
En daarnaast moeten we al deze constanten definiëren,

03:42.450 --> 03:44.060
we moeten ze beheren.

03:44.060 --> 03:45.920
Dit is waar een enum ons werk kan besparen.

03:45.920 --> 03:48.730
Dit is helemaal prima, maar een enum maakt het makkelijker.

03:48.730 --> 03:50.970
We maken een enum met het enum sleutelwoord,

03:50.970 --> 03:54.250
we kunnen het Role noemen, conventie is om te beginnen

03:54.250 --> 03:55.550
met een hoofdletter omdat

03:55.550 --> 03:58.620
het enum ook een aangepast type is.

03:58.620 --> 04:01.760
Het is je eerste aangepaste type, we gaan er nog veel meer schrijven

04:01.760 --> 04:03.860
in deze cursus, dit is de eerste.

04:03.860 --> 04:06.560
En dan voeg je na de naam van het type dat je aan dit

04:06.560 --> 04:09.520
enum wilt toekennen accolades toe, gewoon zo, geen

04:09.520 --> 04:14.040
dubbele punt, geen gelijkheidsteken, gewoon accolades na de naam.

04:14.040 --> 04:15.800
Dan een puntkomma.

04:15.800 --> 04:19.433
En nu kunt u hier waarden toekennen als admin,

04:20.650 --> 04:21.973
alleen lezen en

04:22.950 --> 04:24.300
auteur.

04:24.300 --> 04:28.180
En achter de schermen krijgt dit hier het nummer nul,

04:28.180 --> 04:31.780
dit hier nummer één, dit hier nummer twee.

04:31.780 --> 04:34.650
En dan hier, heb je toegang tot Rol. ADMIN, zoals op een object,

04:34.650 --> 04:37.840
krijg je toegang tot je identifier.

04:37.840 --> 04:40.380
En je kunt dat ook ergens anders in je code gebruiken,

04:40.380 --> 04:43.890
hier kunnen we controleren of de rol AUTHOR is, en dan author afdrukken

04:43.890 --> 04:46.710
en natuurlijk zouden we dat niet moeten zien als ik dat

04:46.710 --> 04:50.630
nu uitvoer omdat we hier een rol van ADMIN hebben toegewezen.

04:50.630 --> 04:53.333
Maar het belangrijkste is dat we dat allemaal hebben

04:53.333 --> 04:57.490
gedaan met behulp van het enum, dat labels toekent aan getallen.

04:57.490 --> 04:59.210
Als we dat eens bekijken in JavaScript.

04:59.210 --> 05:02.830
Dus in de gecompileerde code zien we dat het zo wordt opgebouwd.

05:02.830 --> 05:05.080
Op het einde wordt het herbouwd met een als hier.

05:05.080 --> 05:07.940
Dus functie die zichzelf uitvoert.

05:07.940 --> 05:11.770
En Role wordt hier uiteindelijk gewoon beheerd als een object,

05:11.770 --> 05:14.550
dat admin property heeft een read only property

05:14.550 --> 05:17.330
en AUTHOR property, waar we dan onze getalwaarden

05:17.330 --> 05:19.970
opslaan, zou je kunnen zeggen.

05:19.970 --> 05:21.960
Het is dus iets ingewikkelder dan dat, maar

05:21.960 --> 05:24.210
dat is wat TypeScript uiteindelijk doet om deze

05:24.210 --> 05:26.700
enumconstructie te repliceren in JavaScript-code,

05:26.700 --> 05:28.560
wanneer het de code compileert.

05:28.560 --> 05:30.700
Hier hebben we als ontwikkelaar gewoon

05:30.700 --> 05:32.680
deze handig gecreëerde nummers.

05:32.680 --> 05:34.290
Als je erover heen gaat, zie je

05:34.290 --> 05:36.520
het nummer dat we daar opslaan en kun je deze

05:36.520 --> 05:39.883
nummers hier op een menselijk leesbare manier gebruiken.

05:40.750 --> 05:42.840
Voor enums ben je ook niet beperkt

05:42.840 --> 05:44.790
tot het standaard gedrag.

05:44.790 --> 05:47.470
Stel dat u om wat voor reden dan ook niet met nul als

05:47.470 --> 05:50.533
startnummer wilt beginnen, dan kunt u hier een gelijkheidsteken

05:50.533 --> 05:54.080
toevoegen na uw identifier en een ander getal invoeren en nu wordt

05:54.080 --> 05:56.610
admin toegewezen aan het getal vijf en de andere

05:56.610 --> 05:59.610
identifiers na de identifier waar u de waarde aan toekent,

05:59.610 --> 06:04.580
pikken dat op en verhogen eenvoudig deze startwaarde.

06:04.580 --> 06:08.140
Dus nu hebben we prima, zes, zeven, in plaats van nul, één, twee.

06:08.140 --> 06:10.642
U kunt natuurlijk ook uw eigen waarden toekennen

06:10.642 --> 06:14.820
aan al deze identifiers, als u uw eigen nummers nodig hebt.

06:14.820 --> 06:17.070
U bent ook niet beperkt tot getallen, u kunt

06:17.070 --> 06:19.390
hier ook tekst gebruiken, of zelfs een mix

06:19.390 --> 06:21.950
zoals ik hier doe, alles kan daar, maar vaak is

06:21.950 --> 06:24.900
de standaardwaarde van oplopende getallen die bij

06:24.900 --> 06:28.530
nul beginnen wat u wilt, maar als u een ander gedrag nodig hebt,

06:28.530 --> 06:31.530
als u hier een tekenreeks wilt gebruiken, en dan een

06:31.530 --> 06:34.850
getal hier, en hier ook een getal of misschien een tekenreeks,

06:34.850 --> 06:37.890
dan kunt u dat absoluut doen, het voordeel is dat u het

06:37.890 --> 06:40.880
daar definieert, en daarna verwijst u altijd gewoon

06:40.880 --> 06:44.700
naar uw Role-type naar dit aangepaste type dat u hebt gemaakt, naar

06:44.700 --> 06:46.400
dit aangepaste enum dat u hebt

06:46.400 --> 06:48.270
gemaakt.

06:48.270 --> 06:50.320
En je gebruikt dat in je als controles

06:50.320 --> 06:52.970
en je type opdrachten, en je bent goed.

06:52.970 --> 06:56.090
Dat is de kracht van het enum en het is een geweldige constructie

06:56.090 --> 06:59.420
wanneer je identificaties nodig hebt die menselijk leesbaar

06:59.420 --> 07:03.173
zijn en achter de schermen een bepaalde waarde hebben.
