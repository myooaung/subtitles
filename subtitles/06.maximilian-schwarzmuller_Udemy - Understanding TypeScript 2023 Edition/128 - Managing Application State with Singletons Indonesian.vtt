WEBVTT

00:02.310 --> 00:04.580
Instruktur: Jadi, mendapatkan proyek dari A ke B sekarang

00:04.580 --> 00:06.000
menjadi tujuan kita.

00:06.000 --> 00:09.750
Tepatnya, ketika pengguna membuat proyek baru, ketika mereka memasukkan

00:09.750 --> 00:11.850
semua data, kami ingin membuat objek

00:11.850 --> 00:15.790
proyek baru pada akhirnya, yang kemudian kami keluarkan di kelas daftar

00:15.790 --> 00:21.990
proyek kami sebagai bagian dari daftar yang tidak berurutan, yang dirender di sana.

00:21.990 --> 00:23.299
Itulah idenya.

00:23.299 --> 00:26.350
Tentu saja cara sepele untuk mengimplementasikan ini

00:26.350 --> 00:28.890
bisa dengan hanya pergi ke tempat di mana input

00:28.890 --> 00:30.830
pengguna dimasukkan dan kemudian

00:30.830 --> 00:34.513
di sini menggunakan dokumen. getElementbyId, untuk menjangkau

00:36.100 --> 00:39.410
daftar tak berurutan yang kami render sebagai bagian

00:39.410 --> 00:42.270
dari kelas daftar proyek kami, yang memiliki

00:42.270 --> 00:44.470
ID ini di sini, jadi daftar proyek aktif

00:44.470 --> 00:49.110
atau daftar proyek yang sudah selesai, lalu cukup menjangkau daftar itu

00:49.110 --> 00:52.760
dan menambahkan item baru ke dalamnya.

00:52.760 --> 00:54.770
Tetapi itu bukan ide bagaimana

00:54.770 --> 00:57.250
saya ingin membangun aplikasi ini.

00:57.250 --> 00:59.800
Saya ingin membangunnya dengan cara berorientasi

00:59.800 --> 01:02.530
objek di mana kita memiliki kelas-kelas yang

01:02.530 --> 01:06.500
berbeda yang bekerja bersama dengan cara yang reaktif di mana kita

01:06.500 --> 01:08.200
membuat kelas baru dan kemudian

01:08.200 --> 01:10.550
sesuatu terjadi di dom.

01:10.550 --> 01:12.730
Di mana kita memanggil sebuah metode dari sebuah kelas

01:12.730 --> 01:14.650
dan kemudian kelas ini melakukan sesuatu.

01:14.650 --> 01:16.980
Begitulah cara saya ingin hal-hal ini bekerja.

01:16.980 --> 01:19.560
Sekarang tentu saja kita bisa menambahkan metode

01:19.560 --> 01:21.550
ke kelas daftar proyek, katakanlah

01:21.550 --> 01:24.120
saya menambahkan metode proyek.

01:24.120 --> 01:25.890
Metode itu kemudian harus dipanggil

01:25.890 --> 01:28.200
ketika sebuah proyek harus ditambahkan dan dirender,

01:28.200 --> 01:30.700
dan kita harus menemukan beberapa cara untuk memanggilnya

01:30.700 --> 01:32.940
dari dalam input proyek.

01:32.940 --> 01:34.820
Untuk melakukan itu, kita bisa memastikan

01:34.820 --> 01:37.940
bahwa kita benar-benar mengoper referensi ke daftar kita

01:37.940 --> 01:40.330
di sini, ke konstruktor input proyek, sehingga

01:40.330 --> 01:42.810
dari dalam kelas input proyek, kita dapat bekerja

01:42.810 --> 01:45.290
dengan instance konkret ini dan memanggil metode

01:45.290 --> 01:47.570
pada instance ini.

01:47.570 --> 01:50.260
Karena itulah yang harus kita lakukan.

01:50.260 --> 01:52.050
Itu akan menjadi cara yang layak,

01:52.050 --> 01:54.400
pasti pendekatan yang bisa Anda ambil,

01:54.400 --> 01:58.680
tetapi saya ingin mengambil pendekatan yang lebih abstrak.

01:58.680 --> 02:01.393
Pendekatan yang lebih menarik menurut saya.

02:02.330 --> 02:06.210
Saya akan membangun kelas yang mengelola state aplikasi

02:06.210 --> 02:08.110
kita, jadi bisa dikatakan, kelas

02:08.110 --> 02:11.187
yang mengelola proyek kita, atau state apa pun

02:11.187 --> 02:13.840
yang mungkin perlu kita kelola dalam aplikasi,

02:13.840 --> 02:15.530
yang juga memungkinkan kita

02:15.530 --> 02:18.660
untuk mengatur pendengar di berbagai bagian aplikasi

02:18.660 --> 02:21.670
yang tertarik.

02:21.670 --> 02:24.540
Ini adalah pola yang mungkin terdengar akrab bagi Anda

02:24.540 --> 02:27.050
jika Anda bekerja dengan kerangka kerja seperti

02:27.050 --> 02:29.820
Angular atau pustaka seperti React dan Redux.

02:29.820 --> 02:33.423
Bahwa Anda memiliki objek manajemen state global dan Anda

02:33.423 --> 02:35.443
hanya mendengarkan perubahan.

02:35.443 --> 02:37.480
Itulah yang ingin saya terapkan di sini.

02:37.480 --> 02:39.620
Tentu saja ini hanya salah satu cara untuk melakukan ini,

02:39.620 --> 02:41.660
tetapi menurut saya ini adalah cara yang cukup menarik,

02:41.660 --> 02:43.680
dan itulah sebabnya saya ingin menunjukkannya.

02:43.680 --> 02:45.908
Jadi di bagian atas file ts aplikasi,

02:45.908 --> 02:50.350
saya akan menambahkan kelas manajemen status proyek.

02:50.350 --> 02:53.347
Dan saya hanya akan menamai projectState; terdengar

02:54.820 --> 02:57.210
seperti nama yang masuk akal bagi saya.

02:57.210 --> 02:59.900
Sekarang idenya di sini adalah bahwa

02:59.900 --> 03:03.760
di kelas ini kita memiliki properti atau field,

03:03.760 --> 03:06.570
field privat, projects, yang menampung

03:06.570 --> 03:08.800
array proyek.

03:08.800 --> 03:12.000
Sekarang kita juga perlu mendefinisikan bagaimana sebuah proyek seharusnya

03:12.000 --> 03:13.360
terlihat, kita akan melakukannya

03:13.360 --> 03:15.830
di langkah berikutnya, untuk saat ini saya hanya akan mengatakan

03:15.830 --> 03:18.710
bahwa itu adalah array dari apa pun, yang tentu saja tidak sempurna, tidak

03:18.710 --> 03:22.240
final, tetapi saya ingin fokus pada solusi manajemen negara untuk saat ini.

03:22.240 --> 03:25.653
Jadi, kami memiliki daftar proyek di sini.

03:26.530 --> 03:30.163
Sekarang tujuan saya adalah saya ingin menambahkan

03:30.163 --> 03:35.163
item ke daftar itu setiap kali kita, klik tombol tambah proyek di sini.

03:36.940 --> 03:39.970
Untuk membuat hal itu bekerja, di dalam kelas status proyek,

03:39.970 --> 03:43.460
saya akan menambahkan metode tambah proyek, metode publik.

03:43.460 --> 03:45.560
Dan di sana saya berharap mendapatkan

03:45.560 --> 03:47.060
judul, yang seharusnya berupa

03:47.060 --> 03:49.390
string, deskripsi, yang seharusnya berupa

03:49.390 --> 03:53.250
string, dan juga jumlah orang yang mengerjakan proyek, yang seharusnya

03:53.250 --> 03:55.220
berupa angka.

03:55.220 --> 03:58.450
Kemudian di sini, kita bisa membuat proyek baru dengan

03:58.450 --> 04:00.950
notasi objek literal untuk saat ini.

04:00.950 --> 04:03.950
Di mana kita harus memiliki beberapa ID untuk setiap proyek

04:03.950 --> 04:06.050
sehingga kita dapat mengidentifikasinya

04:06.050 --> 04:09.510
secara unik, dan saya akan menghasilkan ID di sini dengan menggunakan

04:09.510 --> 04:12.100
matematika. acak(). toString.

04:12.100 --> 04:14.960
Sekarang angka acak bukanlah ID yang benar-benar unik,

04:14.960 --> 04:17.880
Anda dapat menghasilkan angka yang sama lebih dari sekali,

04:17.880 --> 04:19.300
tetapi itu sangat tidak mungkin,

04:19.300 --> 04:22.570
dan untuk tujuan demo kita di sini, angka itu akan cukup.

04:22.570 --> 04:25.170
Sekarang selain itu setiap proyek harus memiliki

04:25.170 --> 04:28.370
judul dan akan menyimpan argumen judul yang kita dapatkan.

04:28.370 --> 04:30.913
Sama untuk deskripsi, di mana saya akan

04:31.960 --> 04:33.830
menyimpan deskripsi.

04:33.830 --> 04:37.693
Dan umat-Ku di mana Aku akan menyimpan jumlah orang.

04:39.700 --> 04:43.440
Ini, untuk saat ini, adalah proyek yang ingin saya simpan.

04:43.440 --> 04:45.000
Jadi setelah kita membuatnya di

04:45.000 --> 04:48.020
sini, kita dapat menjangkau array projects di projects state,

04:48.020 --> 04:48.853
yang bersifat private,

04:48.853 --> 04:50.320
tetapi dari dalam kelas, yang mana

04:50.320 --> 04:51.530
metode ini, kita dapat mengaksesnya

04:51.530 --> 04:53.340
tentu saja.

04:53.340 --> 04:55.900
Dan di sana saya ingin menambahkan proyek

04:55.900 --> 05:00.380
baru ini dan untuk itu kita cukup mendorong proyek baru kita ke sana.

05:00.380 --> 05:03.350
Sekarang dengan itu, kita dapat menambahkan proyek.

05:03.350 --> 05:07.027
Tetapi, tentu saja kami masih memiliki beberapa pertanyaan yang belum jelas.

05:07.027 --> 05:12.027
Bagaimana kita memanggil add project dari dalam kelas kita di sana di mana kita mengumpulkan

05:12.750 --> 05:14.650
input pengguna dari dalam submit

05:14.650 --> 05:15.990
handler?

05:15.990 --> 05:17.940
Bagaimana kita menyebutnya sebagai proyek tambahan?

05:17.940 --> 05:21.730
Dan bagaimana kita meneruskan daftar proyek yang diperbarui

05:21.730 --> 05:25.690
itu setiap kali berubah ke kelas daftar proyek?

05:25.690 --> 05:29.230
Ini adalah dua masalah yang tentu saja kita hadapi saat ini.

05:29.230 --> 05:31.840
Nah, satu hal yang akan saya lakukan di

05:31.840 --> 05:36.499
sini, adalah saya akan membuat instance project state di sini.

05:36.499 --> 05:39.720
Sebuah instance global, yang bisa kita gunakan dari seluruh file, dan

05:39.720 --> 05:42.760
saya akan melakukannya tepat setelah kita membuat kelas itu.

05:42.760 --> 05:47.050
Jadi di sini saya memiliki konstanta project state saya di mana saya

05:47.050 --> 05:50.370
menginstansiasi project state seperti ini.

05:50.370 --> 05:52.400
Dengan cara ini, ini adalah konstanta global

05:52.400 --> 05:54.620
yang dapat digunakan di mana saja di dalam file,

05:54.620 --> 05:58.000
jadi berbicara dengan kelas itu sekarang sangat sederhana, Anda

05:58.000 --> 06:01.660
hanya perlu menggunakan konstanta global ini di sini.

06:01.660 --> 06:04.850
Kita bahkan dapat menggunakan fitur yang telah kita pelajari,

06:04.850 --> 06:06.430
yaitu konstruktor privat, untuk

06:06.430 --> 06:09.170
menjamin bahwa ini adalah kelas singleton.

06:09.170 --> 06:11.950
Kita bisa membuat konstruktor privat di sini dan kemudian

06:11.950 --> 06:14.300
kita memiliki properti privat lain di sini,

06:14.300 --> 06:16.670
instance, yang bertipe project state, jadi

06:16.670 --> 06:18.933
tipe yang sama dengan kelas ini.

06:20.640 --> 06:24.360
Dan kita kemudian menambahkan metode get instance di sini, metode

06:24.360 --> 06:26.390
statis sebenarnya, di mana kita memeriksa

06:26.390 --> 06:30.050
apakah ini . instance adalah sesuatu, dan untuk

06:30.050 --> 06:31.020
itu, ini sebenarnya

06:31.020 --> 06:33.970
juga harus menjadi instance statis, properti statis,

06:33.970 --> 06:35.800
maksud saya.

06:35.800 --> 06:37.100
Jika ini adalah sesuatu, jika

06:37.100 --> 06:39.550
ya, kita kembalikan ini . instance, jadi kita kembalikan

06:39.550 --> 06:42.230
instance tunggal yang kita dapatkan, jika tidak,

06:42.230 --> 06:44.590
kita membuat instance baru.

06:44.590 --> 06:45.423
Jadi sebaliknya,

06:45.423 --> 06:50.423
ini . instance akan sama dengan status proyek baru.

06:50.450 --> 06:52.963
Dan kemudian kita kembalikan ini. contoh.

06:54.740 --> 06:57.913
Sekarang dengan itu, kita bisa memanggil instance di sana, seperti ini,

06:59.370 --> 07:00.903
ProjectState. getInstance,

07:02.650 --> 07:04.390
dan kita dijamin akan selalu bekerja

07:04.390 --> 07:06.560
dengan objek yang sama persis dan akan

07:06.560 --> 07:10.020
selalu hanya memiliki satu objek dari tipe tersebut di seluruh

07:10.020 --> 07:11.700
aplikasi.

07:11.700 --> 07:12.840
Yang merupakan ide di

07:12.840 --> 07:16.480
sini, karena saya hanya ingin memiliki satu objek manajemen state untuk

07:16.480 --> 07:17.503
proyek kita.

07:17.503 --> 07:19.570
Jadi itulah keadaan proyek ini dengan konstruktor

07:19.570 --> 07:21.563
singleton ini sekarang.

07:22.730 --> 07:25.890
Jadi, sekarang kita memiliki konstanta status proyek kita.

07:25.890 --> 07:28.040
Oleh karena itu, mari kita turun ke kelas input proyek

07:28.040 --> 07:30.270
tempat kita mengumpulkan input pengguna.

07:30.270 --> 07:33.950
Di sini, kita sekarang bisa memanggil projectState. addProject dan meneruskan judul,

07:33.950 --> 07:37.830
deskripsi, dan orang-orang, yang kita dapatkan kembali dari mengumpulkan

07:37.830 --> 07:40.960
input pengguna pada akhirnya.

07:40.960 --> 07:43.920
Jadi sekarang proyek ini harus dibuat.

07:43.920 --> 07:47.140
Sekarang kita hanya perlu mendorong informasi bahwa

07:47.140 --> 07:51.530
kita memiliki proyek baru ke kelas daftar proyek kita, karena kelas

07:51.530 --> 07:53.840
itulah yang bertanggung jawab untuk

07:53.840 --> 07:56.500
mengeluarkan sesuatu ke layar.

07:56.500 --> 07:59.450
Dan untuk itu saya ingin mengatur pola berlangganan

07:59.450 --> 08:00.350
pada akhirnya.

08:00.350 --> 08:03.020
Di mana di dalam status proyek kita mengelola

08:03.020 --> 08:05.730
daftar pendengar, jadi daftar fungsi

08:05.730 --> 08:08.690
pada akhirnya, yang harus dipanggil setiap

08:08.690 --> 08:11.600
kali ada perubahan.

08:11.600 --> 08:12.433
Jadi untuk itu saya

08:12.433 --> 08:15.830
akan menambahkan properti pribadi lainnya di sini, pendengar.

08:15.830 --> 08:18.810
Dan pendengar akan menjadi larik kosong dan untuk

08:18.810 --> 08:22.130
saat ini, sekali lagi, hanya larik apa pun yang akan

08:22.130 --> 08:25.543
kita tentukan ini secara lebih rinci nanti.

08:26.760 --> 08:31.382
Sekarang saya juga ingin memiliki metode di sini addListener

08:31.382 --> 08:35.590
di mana saya mendapatkan fungsi pendengar, jadi ini harus

08:35.590 --> 08:39.150
menjadi fungsi pada akhirnya di sini.

08:39.150 --> 08:41.370
Dan saya kemudian akan menambahkan ini kepada para pendengar saya.

08:41.370 --> 08:43.970
Jadi kita dorong fungsi pendengar

08:43.970 --> 08:46.500
di sini ke, baik array pendengar.

08:46.500 --> 08:49.580
Sekarang, apa ide memiliki larik pendengar itu?

08:49.580 --> 08:51.110
Ini adalah larik fungsi,

08:51.110 --> 08:53.070
dari referensi fungsi, bukan?

08:53.070 --> 08:55.250
Idenya adalah bahwa setiap kali sesuatu berubah,

08:55.250 --> 08:57.310
seperti di sini ketika kita menambahkan proyek

08:57.310 --> 08:59.790
baru, kita memanggil semua fungsi pendengar.

08:59.790 --> 09:03.050
Jadi kita mengulang melalui semua pendengar, dari pendengar

09:03.050 --> 09:04.720
ini, jadi melalui semua fungsi

09:04.720 --> 09:07.330
pendengar, dan kemudian karena ini adalah referensi

09:07.330 --> 09:09.520
fungsi, kita dapat mengeksekusi ini sebagai

09:09.520 --> 09:11.593
fungsi.

09:13.010 --> 09:14.630
Dan ke fungsi itu, kita mengoper

09:14.630 --> 09:18.620
hal yang relevan untuk itu, berdasarkan state yang kita kelola, yang

09:18.620 --> 09:20.130
dalam hal ini, di kelas ini

09:20.130 --> 09:22.020
tentu saja, adalah daftar proyek

09:22.020 --> 09:23.280
kita.

09:23.280 --> 09:27.983
Ini adalah keadaan yang menjadi tanggung jawab kelas ini.

09:29.100 --> 09:29.933
Jadi di sini, saya

09:30.980 --> 09:33.050
meneruskan proyek ini dan saya akan

09:33.050 --> 09:35.170
memanggil slice di atasnya untuk hanya

09:35.170 --> 09:37.550
mengembalikan salinan larik itu dan bukan

09:37.550 --> 09:39.100
larik aslinya.

09:39.100 --> 09:41.880
Sehingga tidak bisa diedit dari tempat di

09:41.880 --> 09:44.210
mana fungsi pendengar berasal.

09:44.210 --> 09:45.760
Karena array dan objek adalah

09:45.760 --> 09:48.110
nilai referensi dalam Javascript, jadi jika

09:48.110 --> 09:50.490
Anda akan meneruskan array asli, kita dapat

09:50.490 --> 09:52.600
mengeditnya dari luar dan juga di sisi

09:52.600 --> 09:54.380
yang sama, jika kita mendorong sesuatu

09:54.380 --> 09:57.020
ke sana dari dalam kelas ini, itu sudah akan berubah

09:57.020 --> 09:59.830
di tempat lain di aplikasi, tetapi tempat-tempat

09:59.830 --> 10:03.540
ini tidak akan benar-benar memperhatikan bahwa itu berubah, jadi

10:03.540 --> 10:05.630
itu bisa menimbulkan bug yang aneh jika

10:05.630 --> 10:08.270
kita meneruskan referensi asli, itulah sebabnya

10:08.270 --> 10:12.770
saya meneruskan salinan baru, array baru di sini.

10:12.770 --> 10:15.390
Jadi sekarang setiap fungsi pendengar akan dieksekusi

10:15.390 --> 10:19.400
dan mendapatkan salinan kita, salinan proyek kita yang baru.

10:19.400 --> 10:21.380
Sekarang kita hanya perlu pergi ke tempat

10:21.380 --> 10:23.800
di mana kita ingin diberitahu tentang perubahan,

10:23.800 --> 10:26.560
dalam kasus kita, kelas daftar proyek di sini, dan menyiapkan

10:26.560 --> 10:29.030
pendengar seperti itu.

10:29.030 --> 10:32.880
Jadi di sini, dalam konstruktor kelas daftar proyek, sebelum

10:32.880 --> 10:35.546
kita melampirkan dan merender konten, saya

10:35.546 --> 10:38.010
akan menjangkau projectState dan memanggil

10:38.010 --> 10:40.110
addListener di sini untuk pada dasarnya

10:40.110 --> 10:43.720
mendaftarkan fungsi pendengar di sini.

10:43.720 --> 10:46.150
Sekarang listener, seperti yang saya katakan, adalah sebuah

10:46.150 --> 10:49.100
fungsi, jadi kita harus mengoper sebuah fungsi ke addListener.

10:49.100 --> 10:51.210
Karena pendengar yang kita kelola di sini

10:51.210 --> 10:52.610
dalam status proyek, itu hanya

10:52.610 --> 10:54.680
daftar fungsi, yang pada akhirnya akan

10:54.680 --> 10:56.300
kita panggil ketika sesuatu berubah,

10:56.300 --> 10:57.773
bukan?

10:58.840 --> 11:01.110
Jadi, saya harus mengoper

11:01.110 --> 11:04.990
fungsi ke fungsi addListener saya di sini.

11:04.990 --> 11:07.520
Di sini saya mengoper fungsi panah anonim.

11:07.520 --> 11:10.770
Dan fungsi itu akan mendapatkan daftar proyek

11:10.770 --> 11:14.400
ketika dipanggil dari dalam projectState.

11:14.400 --> 11:17.430
Jadi kita mendapatkan daftar proyek, kita tahu bahwa, di

11:17.430 --> 11:19.160
dalam badan fungsi ini, kita kemudian

11:19.160 --> 11:21.560
dapat menggunakan daftar proyek ini.

11:21.560 --> 11:26.046
Dan di sini saya akan menambahkan bidang baru ke daftar proyek, assignedProjects

11:26.046 --> 11:28.410
mungkin, yang bertipe array apa pun,

11:28.410 --> 11:30.310
jadi apa pun dalam array, dan

11:30.310 --> 11:32.357
array nilai apa pun, yah tentu saja

11:32.357 --> 11:34.010
saya juga akan menentukan

11:34.010 --> 11:37.630
ini secara lebih rinci nanti.

11:37.630 --> 11:39.890
Maka di sini kita bisa mengatakan proyek yang

11:39.890 --> 11:41.780
ditugaskan ini sama dengan proyek.

11:41.780 --> 11:44.240
Jadi untuk proyek yang kita dapatkan.

11:44.240 --> 11:45.870
Sekarang di sini untuk menghilangkan

11:45.870 --> 11:47.280
kesalahan tipe implisit apa

11:47.280 --> 11:49.900
pun, saya harus jelas bahwa ini sebenarnya akan menjadi

11:49.900 --> 11:51.563
larik apa pun di sini.

11:52.610 --> 11:55.020
Jadi sekarang saya menambahkan proyek-proyek yang saya dapatkan

11:55.020 --> 11:57.660
karena ada sesuatu yang berubah di negara bagian saya.

11:57.660 --> 11:59.490
Di sini untuk proyek yang ditugaskan

11:59.490 --> 12:00.530
di mana saya tidak menambahkannya,

12:00.530 --> 12:02.350
saya menimpa proyek yang ditugaskan

12:02.350 --> 12:04.170
dengan proyek baru.

12:04.170 --> 12:08.223
Dan kemudian ide saya adalah untuk membuat semua proyek ini.

12:09.080 --> 12:10.883
Untuk itu kita bisa menambahkan

12:11.951 --> 12:15.080
method baru; renderPrjects, misalnya.

12:15.080 --> 12:16.920
Yang ingin saya panggil dari

12:16.920 --> 12:20.063
sini, renderProjects ini, seperti ini.

12:22.230 --> 12:24.120
Ini berakhir dari renderProjects.

12:24.120 --> 12:27.480
Saya akan menjangkau daftar ini di sini, benar, kita menetapkan

12:27.480 --> 12:30.150
ID itu ketika kita merender konten, yang kita lakukan

12:30.150 --> 12:31.290
di sini.

12:31.290 --> 12:34.440
Kelihatannya kita melakukan ini setelah renderProjects dipanggil, tetapi

12:34.440 --> 12:36.640
perlu diingat, bahwa itu berakhir dari sebuah fungsi,

12:36.640 --> 12:38.470
yang pada akhirnya hanya akan dipanggil setelah

12:38.470 --> 12:40.230
proyek-proyek baru ditambahkan.

12:40.230 --> 12:43.510
Jadi sebenarnya renderContent akan berjalan terlebih dahulu.

12:43.510 --> 12:47.090
Dan oleh karena itu, dalam renderProjects kita dapat mengandalkan

12:47.090 --> 12:49.370
ID ini yang ditetapkan ke daftar yang tidak berurutan,

12:49.370 --> 12:53.030
jadi di sini kita dapat mengambil ini dan mendapatkan elemen daftar kita

12:53.030 --> 12:58.030
dengan menggunakan document. getElementbyId dan kemudian saya hanya meneruskan

12:58.469 --> 13:00.790
pengidentifikasi ID ini menggunakan tipe

13:00.790 --> 13:03.690
kelas daftar proyek konkret ini.

13:03.690 --> 13:08.563
Dan kemudian juga menggunakan, baik sisa ID yang kami hasilkan ini.

13:09.580 --> 13:11.130
Dan ke daftar itu atau dalam daftar

13:11.130 --> 13:14.170
itu saya ingin membuat semua proyek yang kita miliki.

13:14.170 --> 13:17.670
Jadi, saya akan membahas semua item proyek

13:17.670 --> 13:21.060
dari proyek yang ditugaskan ini di sini.

13:21.060 --> 13:23.150
Dan kemudian untuk setiap item, saya ingin menambahkan sesuatu

13:23.150 --> 13:23.983
ke dalam daftar dan kita

13:23.983 --> 13:25.380
akan menyempurnakannya nanti.

13:25.380 --> 13:29.787
Untuk saat ini, saya hanya akan memanggil appendChild di sini pada

13:30.890 --> 13:32.480
elemen daftar saya.

13:32.480 --> 13:34.490
Ngomong-ngomong, di sini kita harus menambahkan tanda

13:34.490 --> 13:36.970
seru untuk memperjelas bahwa ini tidak akan menjadi nol.

13:36.970 --> 13:41.970
Kita juga dapat mengubahnya menjadi elemen daftar UL HTML, jadi ke elemen daftar

13:42.000 --> 13:43.560
tidak berurutan karena itulah

13:43.560 --> 13:45.420
yang akan terjadi.

13:45.420 --> 13:47.530
Dan kemudian kita dapat menambahkan anak

13:47.530 --> 13:49.740
di sini dan itu harus menjadi item daftar

13:49.740 --> 13:51.980
baru; jadi di sini kita dapat membuat item

13:51.980 --> 13:56.160
daftar kita dengan dokumen. createElement LI.

13:56.160 --> 13:58.350
Dan pada item daftar itu di sini, saya hanya

13:58.350 --> 14:03.950
akan mengatur konten teks sama dengan Item proyek.

14:03.950 --> 14:03.950
judul.

14:03.950 --> 14:06.240
Setiap item proyek akan menjadi proyek saat kita

14:06.240 --> 14:09.940
membuatnya di atas sana dalam status proyek, sehingga akan menjadi objek

14:09.940 --> 14:11.350
seperti itu, dan oleh karena

14:11.350 --> 14:13.100
itu akan memiliki judul.

14:14.210 --> 14:15.940
Sekarang dengan itu jika kita pergi ke sana

14:15.940 --> 14:18.880
kita memiliki item daftar kita yang sekarang ditambahkan di sini.

14:18.880 --> 14:20.730
Dan dengan itu kita hampir sampai di sana,

14:20.730 --> 14:22.340
tetap memperbaiki di sini, saya

14:22.340 --> 14:23.740
menyiapkan bidang itu, tetapi

14:23.740 --> 14:27.080
dalam konstruktor saya tidak pernah mereferensikannya.

14:27.080 --> 14:29.090
Hanya di sini dalam fungsi pendengar saya, tetapi

14:29.090 --> 14:31.230
seperti yang disebutkan, ini tidak langsung berjalan

14:31.230 --> 14:32.640
di konstruktor.

14:32.640 --> 14:37.640
Jadi apa yang akan saya lakukan di sini adalah saya akan mengatur proyek yang ditugaskan ini

14:38.970 --> 14:41.200
sama dengan larik kosong di sini pada awalnya,

14:41.200 --> 14:44.450
sehingga kita semua senang dan ini diinisialisasi.

14:44.450 --> 14:45.510
Sekarang jika kita menyimpan

14:45.510 --> 14:47.780
ini, seharusnya ini akan terkompilasi tanpa kesalahan.

14:47.780 --> 14:50.400
Dan sekarang jika kita menambahkan sesuatu di

14:50.400 --> 14:51.993
sini, apakah ini berhasil?

14:53.480 --> 14:56.270
Kami memang melihatnya muncul dalam daftar kami.

14:56.270 --> 14:58.270
Di kedua daftar saat ini karena kami tidak

14:58.270 --> 15:00.847
memiliki logika penyaringan dan sebagainya.

15:00.847 --> 15:03.210
Dan itu adalah sesuatu yang bisa kita perbaiki

15:03.210 --> 15:04.710
nanti, tetapi itu berhasil,

15:04.710 --> 15:06.220
dan itulah yang penting.

15:06.220 --> 15:08.390
Namun, sekarang Anda lihat, kami juga memiliki bug di sini.

15:08.390 --> 15:10.260
Jika saya menambahkan elemen kedua, kita

15:10.260 --> 15:12.370
menduplikasi elemen terakhir dan menambahkan

15:12.370 --> 15:13.880
elemen baru, jadi itu adalah sesuatu

15:13.880 --> 15:15.490
yang harus kita perbaiki.

15:15.490 --> 15:17.653
Dan ini semua adalah hal-hal yang akan kita

15:17.653 --> 15:21.270
tangani, tetapi sekarang setidaknya kita dapat menghasilkan sesuatu

15:21.270 --> 15:24.450
dengan itu, mari kita selami semua peningkatan seperti menjadi

15:24.450 --> 15:27.160
lebih jelas tentang jenis yang kita gunakan, menghindari

15:27.160 --> 15:29.150
output duplikat, dan banyak hal lainnya

15:29.150 --> 15:30.733
juga.
