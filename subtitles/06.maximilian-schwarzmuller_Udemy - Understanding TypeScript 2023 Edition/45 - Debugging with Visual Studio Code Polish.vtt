WEBVTT

00:02.170 --> 00:03.003
Instruktor: Więc teraz,

00:03.003 --> 00:04.760
gdy mamy już poprawnie skonfigurowany projekt,

00:04.760 --> 00:08.130
zanurkujmy nieco głębiej w to, jak możesz debugować swój projekt lub jak możesz

00:08.130 --> 00:10.500
mieć świetny przepływ deweloperski.

00:10.500 --> 00:13.560
Na początku tego kursu pokazuję moją podstawową konfigurację

00:13.560 --> 00:14.575
IDE.

00:14.575 --> 00:17.750
Naprawdę upewnij się, że masz zainstalowane odpowiednie rozszerzenia.

00:17.750 --> 00:22.750
Tam dla TypeScript, sprowadza się to do ESLint, który może pomóc

00:22.980 --> 00:26.410
w lintingu twojego kodu TypeScript.

00:26.410 --> 00:29.310
Tak więc z poprawą jakości kodu, chociaż możesz

00:29.310 --> 00:31.620
potrzebować dodatkowej konfiguracji,

00:31.620 --> 00:33.900
aby ESLint miał efekt.

00:33.900 --> 00:36.310
To może pomóc w bardziej zaawansowanych

00:37.220 --> 00:38.570
projektach jeszcze

00:38.570 --> 00:40.818
bardziej interesujące niż to, chcesz

00:40.818 --> 00:43.370
naprawdę użyć Prettier do automatycznego

00:43.370 --> 00:45.770
formatowania kodu i mieć ładnie sformatowany

00:45.770 --> 00:49.870
kod i może chcesz dać Debugger dla Chrome spróbować, ponieważ

00:49.870 --> 00:53.140
pozwala to na debugowanie plików TypeScript nawet

00:53.140 --> 00:55.810
z wewnątrz VS Code przez Chrome, ale bez użycia

00:55.810 --> 00:59.440
Chrome Dev Tools.

00:59.440 --> 01:01.820
Oczywiście, możesz korzystać z tych, jak również z tych, których

01:01.820 --> 01:02.653
się nauczyłeś.

01:02.653 --> 01:05.154
Jeśli włączysz sourceMaps tutaj, co oczywiście

01:05.154 --> 01:07.160
możesz zawsze zrobić, otrzymasz te przetłumaczone

01:07.160 --> 01:10.429
pliki również tam, co jest naprawdę miłe.

01:10.429 --> 01:14.170
Ale możesz również użyć VS Code.

01:14.170 --> 01:15.960
Możesz umieścić breakpoints

01:15.960 --> 01:17.340
tutaj, powiedzmy w clickHandler

01:17.340 --> 01:19.842
i teraz, aby uruchomić swoje pliki tutaj

01:19.842 --> 01:24.842
poprzez VS Code, musisz włączyć sourceMaps, jak również, ale nadal będziemy

01:26.100 --> 01:28.690
mogli używać VS Code zamiast przeglądarki

01:28.690 --> 01:30.950
Dev Tools.

01:30.950 --> 01:34.570
Więc włącz sourceMaps, umieść swój punkt przerwania,

01:34.570 --> 01:38.930
a następnie przejdź do Debug, Rozpocznij debugowanie.

01:38.930 --> 01:40.320
Teraz, przy pierwszym uruchomieniu,

01:40.320 --> 01:42.170
powinien zapytać o środowisko i tam

01:42.170 --> 01:45.350
z zainstalowanym rozszerzeniem Debugger for Chrome, powinieneś

01:45.350 --> 01:47.850
być w stanie wybrać Chrome.

01:47.850 --> 01:49.960
Teraz przejdzie do laucnh. json gdzie konfigurujemy

01:49.960 --> 01:53.200
jak ma to uruchomić i tam powinniśmy wskazać

01:53.200 --> 01:56.740
na localhost:3000 bo tam działa nasz serwer deweloperski

01:56.740 --> 01:59.330
i oczywiście ten proces, czyli npm start

01:59.330 --> 02:04.220
process powinien być uruchomiony.

02:04.220 --> 02:06.910
Aby wskazać na localhost:3000 tam i jako webRoot,

02:06.910 --> 02:09.740
możesz zostawić ten placeholder tutaj, co oznacza,

02:09.740 --> 02:11.890
że ten folder projektu jest zakładany

02:11.890 --> 02:13.780
jako host twoich plików, co jest

02:13.780 --> 02:17.120
w tym przypadku i teraz skompiluj swój kod tak, że mapy źródłowe

02:17.120 --> 02:19.780
również są generowane po ustawieniu konfiguracji

02:19.780 --> 02:22.470
sourceMaps na true tak, że teraz mamy je w kodzie

02:22.470 --> 02:25.290
JavaScript.

02:25.290 --> 02:26.870
Następnie z twoim punktem przerwania dodanym tutaj

02:26.870 --> 02:28.400
i twoim uruchomieniem. json skonfigurowany,

02:28.400 --> 02:30.400
uruchommy debugowanie tutaj.

02:30.400 --> 02:32.140
Rozpocznij debugowanie teraz dla prawdziwych

02:32.140 --> 02:34.830
i otworzy nową kartę teraz automatycznie.

02:34.830 --> 02:36.020
Ta zakładka zostanie zamknięta,

02:36.020 --> 02:38.730
gdy zamkniesz proces debugowania lub gdy zamkniesz zakładkę,

02:38.730 --> 02:41.940
proces debugowania zostanie zakończony.

02:41.940 --> 02:44.590
W ten sposób wchodzisz do widoku debugowania w VS

02:44.590 --> 02:46.790
Code, gdzie możesz śledzić zmienne, obserwować

02:46.790 --> 02:48.230
pewne wyrażenia i zobaczyć

02:48.230 --> 02:50.120
bieżący stos wywołań, a jeśli klikniesz

02:50.120 --> 02:51.910
na Click Me, powinieneś zostać przeniesiony

02:51.910 --> 02:56.590
z powrotem do edytora i wykonanie kodu zostanie wstrzymane w punkcie przerwania w

02:56.590 --> 03:01.410
pliku TypeScript, a teraz możesz przejść przez plik, sprawdzić lokalne wartości dla

03:01.410 --> 03:04.540
tego słowa kluczowego lub zmiennej wiadomości, na przykład,

03:04.540 --> 03:07.120
zmienne obejmujące skrypt, które możesz mieć

03:07.120 --> 03:09.750
i zmienne globalne, które masz dostęp do obiektów

03:09.750 --> 03:13.320
globalnych.

03:13.320 --> 03:15.560
Możesz obserwować pewne wyrażenia,

03:15.560 --> 03:19.290
takie jak wiadomość + wiele wykrzykników i dobrze, wtedy

03:19.290 --> 03:22.690
zawsze możesz śledzić wartość, która jest tam tutaj

03:22.690 --> 03:27.483
w tym oknie, jeśli chciałeś, więc to by działało.

03:27.483 --> 03:30.480
I możesz zobaczyć bieżący stos wywołań funkcji, na przykład,

03:30.480 --> 03:33.010
że wystąpi w clickHandler i teraz możesz przejść

03:33.010 --> 03:34.710
przez swój kod z tymi kontrolkami,

03:34.710 --> 03:37.590
aby przejść do następnego kroku, pomijając następne

03:37.590 --> 03:41.500
wywołanie funkcji, wchodząc w wywołanie funkcji lub wychodząc z bieżącego

03:41.500 --> 03:43.827
wywołania funkcji, a stos wywołań, oczywiście,

03:43.827 --> 03:51.920
dostosuje się zgodnie z tym i z tym, może zignorować tę rzecz przeglądarki tutaj, z tym, że zawsze możesz wznowić wykonywanie kodu, klikając

03:51.920 --> 04:00.290
przycisk odtwarzania i tylko wstrzymać, gdy osiągniesz swój punkt przerwania następnym razem.

04:00.290 --> 04:02.080
Tak więc w ten sposób można debugować kod.

04:02.080 --> 04:04.050
Możesz usunąć punkt przerwania klikając na niego.

04:04.050 --> 04:05.910
W ten sposób możesz debugować

04:05.910 --> 04:07.310
kod z wnętrza VS Code za

04:07.310 --> 04:09.728
pomocą wbudowanych narzędzi do debugowania,

04:09.728 --> 04:12.450
rozszerzenia Chrome Debugger, konfiguracji

04:12.450 --> 04:15.470
pochodnej i soureMaps, które są ustawione w twoim

04:15.470 --> 04:17.743
TypeScript config.
