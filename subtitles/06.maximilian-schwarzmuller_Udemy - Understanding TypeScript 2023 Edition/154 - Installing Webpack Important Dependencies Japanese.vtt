WEBVTT

00:02.160 --> 00:05.373
-: プロジェクトに戻って､ そこでwebpackを使いたいなら､

00:07.223 --> 00:09.948
まずコンパイルと現在の開発サーバーを終了して､

00:09.948 --> 00:13.440
statでwebpackが使えることを確認します｡

00:13.440 --> 00:16.420
これはすでにpackage dot jsonファイルのファイルなので､

00:16.420 --> 00:21.050
NPMを使ってこのプロジェクトにさらに依存関係をインストールすることができます｡

00:21.050 --> 00:24.940
つまり､ このプロジェクトに必要なサードパーティライブラリを増やせばいいのです｡

00:24.940 --> 00:31.480
ここでいうサードパーティライブラリとは､ 私たちのコードを使って特定の機能を提供するものではなく､

00:31.480 --> 00:33.930
プロジェクトのワークフローや設定を支援し､

00:33.930 --> 00:40.430
私たちの開発を非常に効率的にしてくれるサードパーティライブラリのことを指します｡

00:40.430 --> 00:45.110
NPMをインストールし､ 開発専用の依存関係であることを示すためにdash

00:45.110 --> 00:48.600
dash safe dash dev､ そしてwebpack

00:48.600 --> 00:53.600
webpack dash CLI､ webpack dash dev dash server

00:53.713 --> 00:58.713
typescript､ ts loaderで行っています｡

01:01.030 --> 01:03.040
つまり､ パッケージの束なのですが､ それらが何をするものなのかは､

01:03.040 --> 01:04.800
後ほどお話しします｡

01:04.800 --> 01:06.680
まずはEnterキーを押して､

01:06.680 --> 01:10.801
これらのパッケージがすべてプロジェクトにインストールされたことを確認し､

01:10.801 --> 01:16.290
その後､ 各パッケージを見て､ なぜそれをインストールしたのかを確認します｡

01:16.290 --> 01:21.710
それでは､ インストールしたものを解析してみましょう｡

01:21.710 --> 01:25.380
package dot json の new dev dependencies セクションに､

01:25.380 --> 01:27.063
あるいは既に存在していたのですが､

01:27.063 --> 01:31.290
そこに新しいパッケージがたくさん追加されたと言うべきでしょう｡

01:31.290 --> 01:33.690
さて､ これらのパッケージは何をするものなのでしょうか？

01:33.690 --> 01:35.460
まずはwebpackから｡ 

01:35.460 --> 01:37.580
Webpackは先ほど説明したツールで､

01:37.580 --> 01:41.780
これから作成するセットアップ全体の中心的存在です｡

01:41.780 --> 01:43.980
これは､ コードを束ねるために特定の機能をプラグインすることができ､

01:43.980 --> 01:49.210
またコードを変換することができるツールです｡

01:49.210 --> 01:54.740
そして､ このコード部分を変形させることが重要なのです｡

01:54.740 --> 01:56.620
もちろん､ webpackを使ってすべてのJavaScript出力をバンドルすることもできますが､

01:56.620 --> 02:03.310
webpackがその両方をやってくれたらもっと素敵です｡

02:03.310 --> 02:06.250
typescriptのコードをJavaScriptに変換し､

02:06.250 --> 02:10.180
実際にバンドルされたJavascriptファイルを生成します｡ webpackはありがたいことに､

02:10.180 --> 02:13.420
これを行うことができます｡

02:13.420 --> 02:16.610
webpack CLI はプロジェクト内で webpack

02:16.610 --> 02:18.922
コマンドを実行し､ webpack

02:18.922 --> 02:21.603
dev server は開発サーバーとして組み込み､

02:21.603 --> 02:27.056
webpack をフードの下で起動し､ ファイルの変更を監視し､ 何かが変更されたら

02:27.056 --> 02:34.760
webpack が自動的にリコンパイルし､ ページを自動的に提供する必要があります｡

02:34.760 --> 02:37.300
そして､ typescriptとtypescript loader､

02:37.300 --> 02:39.460
ここにts loaderがあります｡

02:39.460 --> 02:42.850
さて､ 私たちのマシンにはすでにtypescriptがグローバルにインストールされており､

02:42.850 --> 02:46.208
そのためtsc dash wを実行することができるのです｡

02:46.208 --> 02:49.760
プロジェクトごとにtypescriptのコピーを自動インストールし､

02:49.760 --> 02:56.000
このプロジェクトでは特定のtypescriptのバージョンを取得するようにするのは良い習慣です｡

02:56.000 --> 02:58.320
グローバルなtypescriptのバージョンを変更しても､

02:58.320 --> 03:13.880
プロジェクトのバージョンやtypescript自体の変更が壊れてもプロジェクトの設定が壊れないという利点があり､ プロジェクト用に特定のバージョンのtypescriptをロックすることができます｡

03:13.880 --> 03:18.380
そして､ ts loaderは現在､ webpackと一緒に動作するパッケージになっています｡

03:18.380 --> 03:24.396
ts loaderはwebpackにtypescriptのコードをJavascriptに変換する方法を伝えるパッケージで､

03:24.396 --> 03:29.180
webpackはtypescript loaderの助けを借りてコードをコンパイルし､

03:29.180 --> 03:33.370
typescript loaderはもちろんtypescriptコンパイラを使用し､

03:33.370 --> 03:36.665
さらにwebpackは生成されたjavascriptファイルを一つのバンドルされたjsファイルにバンドルし､

03:36.665 --> 03:44.260
一つのコードファイルにすることができるようにします｡

03:44.260 --> 03:47.440
さて､ それではさっそくwebpackのプロジェクトを立ち上げて､

03:47.440 --> 03:53.223
webpackを使った素敵なことをやってみましょう｡
