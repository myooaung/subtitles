WEBVTT

00:02.340 --> 00:05.860
-: Bei der Arbeit mit Vereinigungsarten, wie dies

00:05.860 --> 00:06.970
und das, kann es mühsam

00:06.970 --> 00:11.070
sein, die Vereinigungsart immer zu wiederholen.

00:11.070 --> 00:13.070
Möglicherweise möchten Sie einen neuen Typ handeln,

00:13.070 --> 00:15.330
der diesen Gewerkschaftstyp wieder einsetzt.

00:15.330 --> 00:18.540
Und das können Sie mit einer anderen coolen Funktion

00:18.540 --> 00:21.410
von types, der Funktion der Typ-Aliase.

00:21.410 --> 00:22.723
Sie erstellen einen solchen

00:24.280 --> 00:25.670
Alias in der Regel, bevor

00:25.670 --> 00:29.240
Sie ihn verwenden, also in diesem Fall hier am Anfang der Datei,

00:29.240 --> 00:31.240
mit dem Schlüsselwort type.

00:31.240 --> 00:34.040
Das Schlüsselwort type ist nicht in JavaScript

00:34.040 --> 00:35.880
integriert, wird aber in TypeScript

00:35.880 --> 00:40.450
unterstützt, und nach type fügen Sie den Namen Ihres benutzerdefinierten Typs

00:40.450 --> 00:42.860
oder Ihres Type-Alias hinzu.

00:42.860 --> 00:44.980
Zum Beispiel kombinierbar.

00:44.980 --> 00:46.720
Aber der Name bleibt Ihnen überlassen.

00:46.720 --> 00:48.380
Sie können hier jeden Namen erfinden,

00:48.380 --> 00:50.520
der nicht in JavaScript oder TypeScript als

00:50.520 --> 00:52.530
Schlüsselname eingebaut ist.

00:52.530 --> 00:54.360
So etwas wie date wäre nicht erlaubt, weil

00:54.360 --> 00:56.250
das in JavaScript eingebaut ist, aber combinable

00:56.250 --> 00:58.900
ist nicht in JavaScript eingebaut, nicht in TypeScript eingebaut,

00:58.900 --> 01:01.170
also können wir es verwenden.

01:01.170 --> 01:04.550
Mit dem Gleichheitszeichen weisen Sie nun den Typ

01:04.550 --> 01:08.320
zu, den Sie sozusagen in Ihrem Alias kodieren wollen.

01:08.320 --> 01:10.300
Wir können hier also eine Zahl speichern,

01:10.300 --> 01:12.790
und wenn wir sicherstellen wollen, dass etwas

01:12.790 --> 01:14.390
eine Zahl ist, können wir stattdessen

01:14.390 --> 01:16.400
combinable verwenden.

01:16.400 --> 01:18.570
Das macht nicht viel Sinn, es würde unseren

01:18.570 --> 01:21.630
Code vielleicht sogar lesbarer machen.

01:21.630 --> 01:25.500
Wenn ich zum Beispiel dort unten combinable verwende, würde das technisch

01:25.500 --> 01:27.420
funktionieren, aber wenn wir nur einen

01:27.420 --> 01:29.550
Blick auf unseren Code werfen, ist es nicht

01:29.550 --> 01:33.180
offensichtlich, dass wir hier eine Zahl oder einen String wollen.

01:33.180 --> 01:35.560
In der Regel verwendet man das in Verbindung

01:35.560 --> 01:37.500
mit Unionstypen.

01:37.500 --> 01:40.380
Wir können also einen Union-Typ in unserem benutzerdefinierten

01:40.380 --> 01:42.250
Typ speichern, sozusagen in unserem

01:42.250 --> 01:45.240
Typ-Alias, und jetzt einfach auf combinable dort unten verweisen,

01:45.240 --> 01:48.170
anstatt auf unseren Union-Typ.

01:48.170 --> 01:51.060
Wir haben also genau den gleichen Aufbau wie zuvor, nur haben

01:51.060 --> 01:54.230
wir hier unseren wiederverwendbaren Typ-Alias, den wir stattdessen

01:54.230 --> 01:55.580
verwenden können.

01:55.580 --> 01:57.660
Dadurch können wir zusätzlichen Code einsparen

01:57.660 --> 01:59.200
und sicherstellen, dass wir uns bei

01:59.200 --> 02:04.200
der Verwendung von combinable immer auf dieselben Typen oder dieselbe Typkonfiguration beziehen.

02:04.234 --> 02:06.600
Und natürlich können wir das nicht nur für Zahlen

02:06.600 --> 02:08.970
und Zeichenketten verwenden, sondern für jeden

02:08.970 --> 02:11.140
Typ, den wir in einem Alias speichern wollen,

02:11.140 --> 02:14.810
zum Beispiel auch für diese beiden literalen Typen.

02:14.810 --> 02:18.210
Für diese beiden Typen hier, für diesen Vereinigungstyp,

02:18.210 --> 02:20.660
könnten wir auch den Typ-Alias, ConversionDescriptor,

02:20.660 --> 02:24.030
oder wie auch immer Sie ihn nennen wollen, verwenden und

02:24.030 --> 02:28.920
genau diesen Typ in diesem Typ-Alias speichern.

02:28.920 --> 02:32.270
Und jetzt können wir diesen Typ-Alias dort unten verwenden.

02:32.270 --> 02:34.970
Typ-Aliase sind also sehr, sehr nützlich.

02:34.970 --> 02:37.490
Sie können komplexere Typdefinitionen in Ihre

02:37.490 --> 02:40.860
eigenen Typen, sozusagen in Ihre eigenen Typnamen, kodieren und

02:40.860 --> 02:43.120
diese überall in Ihrem Code wiederverwenden,

02:43.120 --> 02:45.920
wo Sie genau diesen Typaufbau benötigen.

02:45.920 --> 02:48.060
So vermeiden Sie Tippfehler und können

02:48.060 --> 02:51.000
einfach Code speichern, schneller schreiben und

02:51.000 --> 02:53.490
Ihre Absichten klarer formulieren, indem

02:53.490 --> 02:56.010
Sie zum Beispiel beschreibende Typ-Aliasnamen

02:56.010 --> 02:57.653
wählen.
