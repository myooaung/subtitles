WEBVTT

00:02.170 --> 00:03.290
Instructor: Ahora

00:03.290 --> 00:05.580
se habla mucho de interfaces y clases.

00:05.580 --> 00:07.390
Ahora miremos bajo el

00:07.390 --> 00:11.650
capó y veamos qué produce realmente JavaScript o qué

00:11.650 --> 00:15.290
ofrece como alternativa a la interfaz.

00:15.290 --> 00:17.450
Hemos aprendido que para el código de clase,

00:17.450 --> 00:20.560
al final depende de la versión para la que estamos compilando.

00:20.560 --> 00:24.280
Si se compila para es6 aquí en el conflicto ts, entonces nuestra

00:24.280 --> 00:27.160
salida utilizaría la palabra clave class.

00:27.160 --> 00:29.330
Dado que aquí compilamos para es5, en su

00:29.330 --> 00:31.880
lugar vemos esta solución utilizando constructos

00:31.880 --> 00:33.420
o funciones al final.

00:33.420 --> 00:36.670
Sin embargo, ¿qué ocurre con las interfaces?

00:36.670 --> 00:38.720
Bueno, echemos un vistazo a la aplicación. archivo js.

00:38.720 --> 00:41.780
Y allí no se ve nada.

00:41.780 --> 00:46.360
No verá ninguna traducción de nuestras interfaces.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Estas cosas no se encuentran en ninguna aplicación. js.

00:52.970 --> 00:55.440
Usted acaba de encontrar nuestra función aquí,

00:55.440 --> 00:59.180
usted encuentra nuestra función constructora para el objeto persona,

00:59.180 --> 01:02.320
así que básicamente esa traducción para la clase persona,

01:02.320 --> 01:03.500
y el otro código.

01:03.500 --> 01:06.680
No encuentras ninguna referencia en ninguna interfaz.

01:06.680 --> 01:08.240
Y hay una buena razón para ello.

01:08.240 --> 01:11.350
No hay traducción para las interfaces.

01:11.350 --> 01:13.650
JavaScript no conoce esta característica.

01:13.650 --> 01:15.550
Es una característica pura de TypeScript,

01:15.550 --> 01:18.830
sólo disponible durante el desarrollo y la compilación.

01:18.830 --> 01:21.640
Así que puedes usarlo para mejorar tu código.

01:21.640 --> 01:23.970
Sin embargo, ninguna salida para eso terminará

01:23.970 --> 01:26.010
en sus archivos de JavaScript, por lo que

01:26.010 --> 01:28.390
es una característica de desarrollo pura que

01:28.390 --> 01:30.700
le ayuda a escribir mejor código, código claramente

01:30.700 --> 01:34.100
estructurado siguiendo reglas claras.

01:34.100 --> 01:38.720
En tiempo de ejecución, no se dejará rastro de estas interfaces.

01:38.720 --> 01:41.760
No verás nada relacionado con las interfaces en tu

01:41.760 --> 01:44.710
código, sólo funciones, clases, y todo el resto

01:44.710 --> 01:47.130
del código se compila en la salida.

01:47.130 --> 01:50.020
Se podría decir que las interfaces son simplemente volcadas.

01:50.020 --> 01:53.170
Se utilizan durante la compilación para comprobar el código

01:53.170 --> 01:54.340
y luego se ignoran.

01:54.340 --> 01:56.690
No hay nada que pueda salir para ellos.
