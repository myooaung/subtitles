WEBVTT

00:02.510 --> 00:04.490
المدرب: مع الفصل الأساسي لدينا إذا انتقلنا الآن

00:04.490 --> 00:07.570
إلى مجلد dist وقمنا بفحص التطبيق. js ، نرى ما تم إنشاؤه

00:07.570 --> 00:10.110
في JavaScript ، وهناك ترى أن

00:10.110 --> 00:13.560
لدينا نفس الشفرة بشكل أساسي.

00:13.560 --> 00:17.870
هناك اختلافان مهمان هما ، أن حقل الاسم الذي

00:17.870 --> 00:20.870
لدينا هنا غير موجود مثل هذا هنا

00:20.870 --> 00:22.230
في الفصل.

00:22.230 --> 00:25.460
سيكون هذا مدعومًا بالفعل في JavaScript الحديثة

00:25.460 --> 00:27.910
ولكنه يعتمد على إصدار JavaScript الذي

00:27.910 --> 00:29.130
تقوم ببنائه.

00:29.130 --> 00:33.450
لذلك في ES6 وحده ، لا يتم دعمه بالفعل.

00:33.450 --> 00:35.430
وبالطبع ما هو رائع هو

00:35.430 --> 00:37.360
رؤية نوع المهمة.

00:37.360 --> 00:39.760
على الرغم من ذلك ، لدينا منطقنا الإنشائي

00:39.760 --> 00:43.870
، وبالفعل هذه هي الطريقة التي تضيف بها خصائص إلى الكائنات

00:43.870 --> 00:48.150
التي سيتم إنشاؤها في Vanilla JavaScript عند عدم استخدام

00:48.150 --> 00:51.570
أحدث إصدار من JavaScript حيث يتم دعم بناء جملة

00:51.570 --> 00:54.470
هذا الحقل أيضًا.

00:54.470 --> 00:56.480
هذا ما لدي في JavaScript.

00:56.480 --> 00:58.710
الآن يصبح الأمر ممتعًا إذا ذهبنا

00:58.710 --> 01:02.080
إلى tsconfig. json وقمنا بتبديل الهدف

01:02.080 --> 01:05.970
من ES5 إلى ES6 وقم بالتعليق على lib هنا.

01:05.970 --> 01:08.190
بحيث تتم إضافة المكتبات الصحيحة والموصى

01:08.190 --> 01:10.870
بها بواسطة TypeScript تلقائيًا.

01:10.870 --> 01:14.090
إذا قمت الآن بحفظ ملف التكوين هذا ، وعدت إلى التطبيق. js ترى شيئًا

01:14.090 --> 01:16.350
مختلفًا تمامًا.

01:16.350 --> 01:18.810
وهذا ما نراه هنا مثيرًا للاهتمام.

01:18.810 --> 01:20.960
ماذا لدينا هنا؟

01:20.960 --> 01:23.290
حسنًا ، ما لدينا هنا في النهاية

01:23.290 --> 01:26.453
هو ما يسمى بوظيفة المُنشئ.

01:27.299 --> 01:31.600
وظيفة Constructor هي شيء مدمج في JavaScript

01:31.600 --> 01:33.770
والذي كان موجودًا بشكل

01:33.770 --> 01:35.520
أساسي إلى الأبد ،

01:35.520 --> 01:40.230
وهذه هي طريقة Vanilla غير الحديثة في JavaScript

01:40.230 --> 01:44.480
لإنشاء مخططات الكائنات.

01:44.480 --> 01:47.100
إنها وظيفة يتم استدعاؤها بمساعدة الكلمة

01:47.100 --> 01:50.890
الأساسية الجديدة ثم فجأة ، بطريقة سحرية ، هذه الوظيفة

01:50.890 --> 01:53.640
على الرغم من عدم وجود عبارة عودة بداخلها

01:53.640 --> 01:55.850
، فإنها تعيد شيئًا كما تراه عندما

01:55.850 --> 01:57.540
نسميها هنا.

01:57.540 --> 01:59.730
تقوم بإرجاع كائن.

01:59.730 --> 02:03.110
كائن جديد سيكون له خاصية الاسم.

02:03.110 --> 02:04.940
لذا فإن هذا المفهوم ليس جديدًا

02:04.940 --> 02:08.680
، ولم يتم تقديمه بواسطة JavaScript أو TypeScript.

02:08.680 --> 02:12.500
كانت فكرة وجود مخططات للكائنات موجودة في JavaScript

02:12.500 --> 02:15.180
لفترة طويلة جدًا.

02:15.180 --> 02:19.070
ومع ذلك ، في الماضي ، كان علينا استخدام وظائف المُنشئ

02:19.070 --> 02:21.870
وبما أن هذا قد يكون غير بديهي بعض الشيء

02:21.870 --> 02:24.520
خاصة للمطورين الذين ربما عملوا مع

02:24.520 --> 02:26.600
لغات برمجة مختلفة.

02:26.600 --> 02:30.510
قدمت JavaScript الحديثة فكرة فئات بناء

02:30.510 --> 02:34.950
الجملة الأنظف ، ويدعم TypeScript هذا أيضًا.

02:34.950 --> 02:38.180
وبسبب التجميع القوي لـ TypeScript ، يمكنك اختيار

02:38.180 --> 02:40.830
المكان الذي تريد تجميعه فيه ، النمط القديم

02:40.830 --> 02:44.130
الذي يعمل بالطبع في المزيد من المتصفحات أو في

02:44.130 --> 02:48.280
نمط ES6 الأكثر حداثة الذي رأيناه من قبل.

02:48.280 --> 02:51.700
الذي يشبه إلى حد كبير هذا هنا.

02:51.700 --> 02:54.500
المفتاح هو أن لدينا هذه الميزة مضمنة

02:54.500 --> 02:57.300
في JavaScript وتدعمها TypeScript التي

02:57.300 --> 03:00.163
يمكننا تحديد مخططات الكائنات.
