WEBVTT

00:02.100 --> 00:04.390
Instructor: Ahora, por supuesto, en las aplicaciones

00:04.390 --> 00:08.640
React más grandes, se trabaja con algo más que useRef y useState.

00:08.640 --> 00:10.950
Para entender cómo se utiliza TypeScript allí, es realmente

00:10.950 --> 00:13.460
siempre útil simplemente pasar por encima de las funciones

00:13.460 --> 00:15.180
que está llamando, por lo que los otros ganchos

00:15.180 --> 00:17.090
que está trabajando.

00:17.090 --> 00:20.010
Por ejemplo, si usted necesita la herramienta useEffect aquí,

00:20.010 --> 00:22.660
en el componente NewTodo, por cualquier razón, entonces,

00:22.660 --> 00:26.330
usted puede llamarla y simplemente pasar por encima de ella a partir de entonces,

00:26.330 --> 00:29.010
para entender con qué tipos funciona.

00:29.010 --> 00:30.960
Por ejemplo, que el primer argumento

00:30.960 --> 00:33.720
es un EffectCallback, que es una función especial,

00:33.720 --> 00:37.100
donde TypeScript te avisará si lo configuras mal, que el segundo

00:37.100 --> 00:38.610
argumento es nada o un array de

00:38.610 --> 00:41.480
cualquier cosa, cosas así, esto siempre te ayudará,

00:41.480 --> 00:42.997
también aprenderás que useEffect

00:42.997 --> 00:45.930
no devuelve nada, por ejemplo, y sobre useState, donde

00:45.930 --> 00:49.200
mencioné que siempre devuelve un array con exactamente dos

00:49.200 --> 00:52.410
elementos, pues bien, también ves que aquí, useState devuelve

00:52.410 --> 00:56.310
un array, eso es lo que vemos aquí, corchete de apertura y cierre, donde el

00:56.310 --> 01:01.750
primer elemento es de tu tipo genérico, así que una lista de Todos, porque esa es tu instantánea de estado,

01:01.750 --> 01:08.600
el segundo elemento es un React.

01:08.600 --> 01:08.600
Función

01:08.600 --> 01:11.370
de despacho aquí al final, eso es lo que está pasando aquí.

01:11.370 --> 01:12.690
Así que eso puede ser útil.

01:12.690 --> 01:15.490
Tal vez también estés trabajando con Redux.

01:15.490 --> 01:19.660
Pues bien, por suerte, si buceas en su documentación, también

01:19.660 --> 01:21.360
encontrarás instrucciones

01:21.360 --> 01:24.530
sobre el uso de Redux con TypeScript.

01:24.530 --> 01:27.430
Aquí, en Recetas encuentras Uso con TypeScript,

01:27.430 --> 01:30.710
y allí, puedes aprender cómo puedes añadir tipos a

01:30.710 --> 01:33.270
tus acciones, y a tus reductores, y a tu gestión

01:33.270 --> 01:35.540
de estados con Redux.

01:35.540 --> 01:38.650
Es realmente sencillo, nada complejo, y

01:38.650 --> 01:41.520
añade mucha seguridad de tipo allí.

01:41.520 --> 01:43.230
Quizás también estés usando

01:43.230 --> 01:47.110
el paquete React Router, este paquete de aquí.

01:47.110 --> 01:52.040
Allí, no encuentras anotaciones específicas de TypeScript, bueno, por supuesto

01:52.040 --> 01:54.020
puedes instalar esto en tu proyecto,

01:54.020 --> 01:55.340
también, con npm install

01:55.340 --> 01:58.770
dash dash save react dash router dash dom, que es el comando

01:58.770 --> 02:00.740
que normalmente usarías para instalar

02:00.740 --> 02:03.720
este paquete en tu proyecto React.

02:03.720 --> 02:07.000
Así que esto añadirá el paquete react-router-dom.

02:07.000 --> 02:10.250
Pero este paquete no tiene instrucciones especiales de

02:10.250 --> 02:12.430
tipo en su página aquí, no encuentras

02:12.430 --> 02:14.720
nada específico de TypeScript aquí, al

02:14.720 --> 02:17.570
menos en el momento en que estoy grabando esto.

02:17.570 --> 02:19.163
Sin embargo, por supuesto que podemos

02:19.163 --> 02:21.250
usar esto en un proyecto TypeScript también,

02:21.250 --> 02:23.920
y podemos obtener un buen soporte de tipos allí.

02:23.920 --> 02:25.800
Ahora, con él instalado, te darás

02:25.800 --> 02:29.360
cuenta de que si importo desde react-router-dom, realmente

02:29.360 --> 02:31.880
no tengo un gran soporte de tipos allí.

02:31.880 --> 02:33.870
Por ejemplo, si intento importar algo

02:33.870 --> 02:36.870
aquí, ya me sale una advertencia, que no pudo encontrar una

02:36.870 --> 02:39.210
declaración para el módulo react-router-dom,

02:39.210 --> 02:42.730
por lo que no encontró ninguna información de tipo aquí.

02:42.730 --> 02:45.420
Para arreglar eso, por supuesto, podemos hacer

02:45.420 --> 02:48.450
algo que hicimos antes, npm install dash dash save dash

02:48.450 --> 02:52.530
dev, at types, slash react dash router dash dom, así que cancelamos la búsqueda

02:52.530 --> 02:54.620
de at types aquí, y estamos bien de nuevo,

02:54.620 --> 02:56.860
este es un truco que ya aprendiste, al principio

02:56.860 --> 02:59.097
del curso, pero por supuesto, no hay necesidad

02:59.097 --> 03:02.010
de olvidarse de él, sólo porque tenemos un proyecto

03:02.010 --> 03:03.920
donde mucho ya funciona con TypeScript

03:03.920 --> 03:06.790
fuera de la caja.

03:06.790 --> 03:08.140
Si luego añadimos algo que

03:08.140 --> 03:10.810
no funciona con TypeScript, como esto, podemos añadirlo

03:10.810 --> 03:13.700
así, y ahora es consciente de Route, es consciente de todas

03:13.700 --> 03:15.380
las otras características de este

03:15.380 --> 03:17.270
paquete también.

03:17.270 --> 03:21.070
Así de fácil es añadir soporte para esto, también.

03:21.070 --> 03:23.560
Y así es como deberías enfocar esto en general,

03:23.560 --> 03:26.010
echa un vistazo a los docs oficiales, comprueba

03:26.010 --> 03:29.030
si ves instrucciones sobre el uso con TypeScript allí,

03:29.030 --> 03:31.590
si no, instálalo y mira si tiene soporte de tipos

03:31.590 --> 03:33.720
incorporado, para que al menos tengas

03:33.720 --> 03:37.350
un buen soporte de autocompletado y compilación, y si eso tampoco

03:37.350 --> 03:39.090
existe, instala un paquete de

03:39.090 --> 03:42.080
tipos, como lo hicimos aquí.

03:42.080 --> 03:43.980
Y eso es todo para este módulo, y así es

03:43.980 --> 03:46.410
como puedes utilizar TypeScript, y todas sus

03:46.410 --> 03:49.920
increíbles características en una aplicación React, y por supuesto,

03:49.920 --> 03:52.450
todo lo que aprendes de este curso, se aplica a una

03:52.450 --> 03:54.370
aplicación React también.

03:54.370 --> 03:56.380
Puedes utilizar todas las características de TypeScript

03:56.380 --> 03:59.130
que has aprendido en este curso, en un proyecto React.
