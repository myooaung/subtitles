WEBVTT

00:02.290 --> 00:03.280
المدرب: لنبدأ

00:03.280 --> 00:06.110
مع تطبيق Node typecript الخاص بنا.

00:06.110 --> 00:08.750
الآن ، قد تعتقد أننا بحاجة إلى إعداد معقد مع

00:08.750 --> 00:11.170
حزمة الويب وما إلى ذلك الآن ، لكننا في الواقع

00:11.170 --> 00:12.410
لا نفعل ذلك.

00:12.410 --> 00:16.270
سنستخدم الأمر tsc فقط لتجميع ملفاتنا.

00:16.270 --> 00:18.160
وبعد ذلك ، يمكننا استخدام أمر العقدة

00:18.160 --> 00:19.890
لتنفيذ ملفاتنا المترجمة.

00:19.890 --> 00:21.700
هذا كل ما نحتاجه هنا.

00:21.700 --> 00:25.960
ومع ذلك ، سأقوم بإعداد مشروع هنا باستخدام npm init ببساطة

00:25.960 --> 00:28.810
حتى نحصل على حزمة. json لأنه نظرًا لأننا

00:28.810 --> 00:32.250
سننشئ تطبيق Node عاديًا هنا ، فسنقوم بتثبيت بعض حزم الجهات

00:32.250 --> 00:36.240
الخارجية مثل Express. شبيبة.

00:36.240 --> 00:38.470
وأريد أيضًا تثبيت أداة إضافية

00:38.470 --> 00:40.950
تبسط عملية التطوير لدينا.

00:40.950 --> 00:44.630
لذا قم بتشغيل npm init هنا في أي مجلد فارغ من اختيارك.

00:44.630 --> 00:48.190
يمكنك تأكيد جميع الإعدادات الافتراضية هنا إذا كنت تريد ، وبعد ذلك

00:48.190 --> 00:50.540
، سيكون لديك حزمة. json الذي يجب

00:50.540 --> 00:52.750
أن يبدو مثل هذا.

00:52.750 --> 00:56.210
الآن ، قم أيضًا بتشغيل tsc --init هنا لتهيئة هذا

00:56.210 --> 00:59.390
المشروع أيضًا كمشروع منسوخ بحيث تحصل على tsconfig

00:59.390 --> 01:01.860
هذا. json الذي يمكنك

01:01.860 --> 01:04.313
العثور عليه الآن في متطلباتك.

01:05.770 --> 01:09.020
وهناك ، حصلت بالفعل على أول تعديل أريد إجراؤه.

01:09.020 --> 01:13.300
يمكن بسهولة تعيين الهدف هنا على es2018 على سبيل المثال اعتمادًا

01:13.300 --> 01:16.090
على إصدار العقدة الذي تستخدمه ولكن إذا كنت

01:16.090 --> 01:17.750
تستخدم أحدث إصدار ، فيجب

01:17.750 --> 01:19.630
دعم بنية JavaScript الحديثة

01:19.630 --> 01:21.380
هذه بالتأكيد.

01:21.380 --> 01:24.220
يمكن أن تظل الوحدة النمطية في Commonjs ، ولكن

01:24.220 --> 01:27.460
بعد ذلك ، أريد أيضًا إضافة moduleResolution هنا وتعيين

01:27.460 --> 01:29.010
هذا على العقدة.

01:29.010 --> 01:33.350
يوضح هذا ببساطة كيف ستعمل الملفات والواردات

01:33.350 --> 01:35.483
المختلفة معًا.

01:36.410 --> 01:37.640
ونحتاج إلى ضبط هذا على

01:37.640 --> 01:40.020
العقدة للتأكد من أن كل شيء يعمل بشكل صحيح.

01:40.020 --> 01:42.470
سأقوم أيضًا بتعيين outDir الخاص بي هنا

01:42.470 --> 01:44.790
، والتعليق على هذا وضبطه على dist ، و

01:44.790 --> 01:46.990
rootDir الخاص بي إلى src لأنني أريد

01:46.990 --> 01:49.600
فصل كود المصدر المطبوع على الحروف.

01:49.600 --> 01:50.700
ثم الناتج الذي سيكون

01:50.700 --> 01:53.170
ملفات JavaScript الفعلية التي يمكننا

01:53.170 --> 01:55.733
تنفيذها بمساعدة العقدة.

01:56.820 --> 01:58.850
بخلاف ذلك ، أنا بخير مع الوضع المتشدد

01:58.850 --> 02:00.710
، لكن بالطبع ، يمكنك ضبط كل هذا وفقًا

02:00.710 --> 02:03.030
لاحتياجاتك الشخصية وميولك.

02:03.030 --> 02:06.320
لقد تعلمت كل شيء عن ذلك خلال هذه الدورة التدريبية بعد كل شيء.

02:06.320 --> 02:08.830
وبهذا ، يمكننا حفظ هذا التكوين.

02:08.830 --> 02:11.070
ستجد أيضًا إعداد البداية الأساسي هذا

02:11.070 --> 02:12.460
مرفقًا بالمناسبة.

02:12.460 --> 02:14.120
يمكنك حفظ هذا التكوين.

02:14.120 --> 02:16.170
وسأقوم أيضًا بإنشاء مجلد src

02:16.170 --> 02:18.130
حيث سنكتب كود المصدر الخاص بنا

02:18.130 --> 02:20.230
، وهو كود المصدر المطبوع.

02:20.230 --> 02:23.020
وهذا هو الجزء الذي أريد الآن الغوص فيه.

02:23.020 --> 02:26.370
سنقوم ببناء تطبيقنا باستخدام الكتابة المطبوعة

02:26.370 --> 02:27.960
في مجلد src الآن.

02:27.960 --> 02:30.200
ونظرًا لأننا سنبني خادم ويب بسيطًا ونريد

02:30.200 --> 02:32.920
أيضًا استخدام Express. js هناك ، سأقوم أولاً

02:32.920 --> 02:36.120
وقبل كل شيء بتثبيت بعض التبعيات هنا.

02:36.120 --> 02:38.440
باستخدام npm install --save ،

02:38.440 --> 02:41.040
أريد تثبيت express هنا وهو إطار عمل

02:41.040 --> 02:44.100
Express لـ Node. js التي ، بالطبع ، لا تحتاجها

02:44.100 --> 02:45.680
دائمًا ولكن هنا ، أريد

02:45.680 --> 02:48.440
إنشاء تطبيق Node Express.

02:48.440 --> 02:51.500
وسيقوم بتثبيت حزمة body-parser التي تساعدنا

02:51.500 --> 02:54.403
في تحليل هيئات الطلبات الواردة.

02:55.290 --> 02:58.180
في الوقت الحالي ، هذا كل ما يتعلق بتبعية الإنتاج الخاصة بي.

02:58.180 --> 03:00.110
قد نضيف المزيد لاحقًا.

03:00.110 --> 03:01.523
فلنضغط على Enter هنا.

03:02.960 --> 03:04.120
وبعد تثبيت ذلك

03:04.120 --> 03:07.540
، دعونا نلقي نظرة على تبعيات التطوير.

03:07.540 --> 03:11.450
سوف أقوم بتثبيت أولئك الذين لديهم npm install --save-dev ،

03:11.450 --> 03:13.330
وهناك ، أريد تثبيت modemon ، وهي

03:13.330 --> 03:16.340
أداة تسمح لنا بتنفيذ ملف باستخدام Node ، ولكن بعد

03:16.340 --> 03:18.210
ذلك تراقب الملف والمجلد الموجود

03:18.210 --> 03:19.820
فيه الملف ، أيضًا مثل جميع

03:19.820 --> 03:22.690
المجلدات الفرعية للتغييرات.

03:22.690 --> 03:24.050
عندما يتغير الملف ، فإنه

03:24.050 --> 03:26.030
سيعيد تشغيل خادم العقدة.

03:26.030 --> 03:27.620
سيؤدي هذا ببساطة إلى تسريع

03:27.620 --> 03:29.510
عملية التطوير لأنه سيعيد تشغيل

03:29.510 --> 03:31.490
خادم تطبيق Node تلقائيًا في كل مرة

03:31.490 --> 03:33.500
نقوم فيها بتغيير كود المصدر.

03:33.500 --> 03:36.180
نحتاج إلى إعادة تشغيل الخادم عندما يتغير الرمز

03:36.180 --> 03:39.430
لأنه بخلاف ذلك ، لا يزال خادمنا يعمل على الكود القديم ، ولكن

03:39.430 --> 03:41.340
إعادة التشغيل يدويًا أمر مزعج لذلك

03:41.340 --> 03:44.190
لا يمكننا تسريع هذا الأمر باستخدام nodemon.

03:44.190 --> 03:47.323
وفي الوقت الحالي ، هذا في الواقع كل شيء.

03:49.290 --> 03:50.340
لذلك دعونا نضغط على

03:50.340 --> 03:52.360
Enter هنا ونثبت تبعية التطوير هذه.

03:52.360 --> 03:54.760
لن يكون هذا هو آخر ما نحتاجه في هذه الدورة

03:54.760 --> 03:56.660
، لكن في الوقت الحالي ، نحن بخير.

03:56.660 --> 03:58.830
لذلك دعونا ننتظر حتى ينتهي هذا.

03:58.830 --> 04:00.130
لقد انتهى التثبيت

04:00.130 --> 04:01.450
، والآن لنبدأ في كتابة

04:01.450 --> 04:04.773
وإنشاء تطبيق Node Express أساسي للغاية.
