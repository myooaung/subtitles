WEBVTT

00:02.440 --> 00:05.240
Anlatıcı: Dekoratörlerle, dekoratör fabrikalarıyla

00:05.240 --> 00:08.120
ve ayrıca dekoratörlerin geri dönüş değerlerini

00:08.120 --> 00:11.740
kullanarak nasıl oldukça şaşırtıcı şeyler inşa edebileceğimizi

00:11.740 --> 00:12.790
gördük; örneklerde,

00:12.790 --> 00:14.930
sınıf dekoratörü temel olarak dekoratörü

00:14.930 --> 00:18.740
eklediğimiz sınıfı tamamen farklı, mevcut sınıfın üzerine inşa

00:18.740 --> 00:21.400
edilen bir sınıfla değiştirmemize olanak tanır,

00:21.400 --> 00:23.900
bizim durumumuzda olduğu gibi ve bu nedenle

00:23.900 --> 00:27.230
bazı işlevler ekleyebilir.

00:27.230 --> 00:30.490
Artık diğer dekoratörlerde de değer döndürebilirsiniz,

00:30.490 --> 00:32.030
ancak hepsinde değil.

00:32.030 --> 00:35.430
Ya da hepsinde dönüş değerine saygı gösterilmez.

00:35.430 --> 00:38.150
Şimdi, bir şey döndürebileceğiniz dekoratörler,

00:38.150 --> 00:41.330
metotlara ekleyebileceğiniz dekoratörler ve erişimcilere

00:41.330 --> 00:43.540
eklediğiniz dekoratörlerdir.

00:43.540 --> 00:47.400
Yani burada setter log 2 ve log 3 metodunda bu iki

00:47.400 --> 00:51.210
dekoratör, log 2 ve log 3 de bir şey döndürebilir

00:51.210 --> 00:54.080
ve TypeScript bunu kullanır.

00:54.080 --> 00:58.040
Özellikler ve parametreler üzerindeki dekoratörler de elbette

00:58.040 --> 01:00.670
bir şey döndürebilir ancak TypeScript bunu

01:00.670 --> 01:02.500
göz ardı edecektir.

01:02.500 --> 01:05.030
Dolayısıyla, dönüş değerleri burada desteklenmez

01:05.030 --> 01:07.700
veya kesin olmak için kullanılmaz.

01:07.700 --> 01:09.690
Şimdi günlük 3'te ne iade edebilirsiniz?

01:09.690 --> 01:12.680
Metot dekoratörlerinde ve log 2'de, yani

01:12.680 --> 01:15.320
erişimci dekoratörlerinde.

01:15.320 --> 01:19.320
Yepyeni bir özellik tanımlayıcısı döndürebilirsiniz.

01:19.320 --> 01:22.050
Log 2 ve log 3, bahsettiğim iki dekoratör,

01:22.050 --> 01:23.110
değil mi?

01:23.110 --> 01:28.110
Günlük 2 ve günlük 3, her ikisi de tanımlayıcıyı özellikten, yöntemden alır,

01:28.170 --> 01:30.510
bağlı oldukları söylenebilir.

01:30.510 --> 01:33.034
Çünkü bir erişimci bir tür yöntem gibidir,

01:33.034 --> 01:36.220
orada çalıştırılan bir işleviniz vardır.

01:36.220 --> 01:39.072
Şimdi, özellik tanımlayıcısı bir JavaScript

01:39.072 --> 01:41.980
şeyidir, bildiğiniz gibi, bu sayfaya tekrar bakarsak

01:41.980 --> 01:44.500
ve yeniden yüklersek, örneğin accessor dekoratörümüz

01:44.500 --> 01:47.260
için, özellik tanımlayıcısının yapılandırılabilir

01:47.260 --> 01:54.910
ve numaralandırılabilir ve get ve set özelliklerine sahip olan bu nesne olduğunu görürüz.

01:54.910 --> 01:57.660
Ve metot dekoratörü için tanımlayıcımız, yapılandırılabilir,

01:57.660 --> 01:59.330
numaralandırılabilir, değer

01:59.330 --> 02:02.290
ve yazılabilir olan bu nesnedir.

02:02.290 --> 02:04.410
Bu da vanilya JavaScript.

02:04.410 --> 02:07.830
Vanilla JavaScript'te de özellik tanımlayıcıları vardır.

02:07.830 --> 02:11.710
Bir özelliği daha ayrıntılı olarak tanımlamanızı sağlarlar.

02:11.710 --> 02:14.430
Elbette bir özelliğe bir değer atayabilirsiniz ve bir

02:14.430 --> 02:15.990
yöntemden bahsettiğimiz için,

02:15.990 --> 02:17.940
değer bu durumda bir işlevdir, ancak yazılabilir

02:17.940 --> 02:20.010
olup olmadığını da kontrol edebilirsiniz,

02:20.010 --> 02:22.910
yani oluşturulduktan sonra, nesne oluşturulduktan sonra

02:22.910 --> 02:24.700
değiştirilebilir.

02:24.700 --> 02:25.950
Yapılandırılabilir olup olmadığı,

02:25.950 --> 02:27.140
yani yapılandırmasını değiştirip

02:27.140 --> 02:29.570
değiştiremeyeceğiniz ve bu özelliği silip silemeyeceğiniz.

02:29.570 --> 02:30.770
Ve eğer numaralandırılabilirse,

02:30.770 --> 02:33.166
yani örneğin nesnenizde döngü yaptığınızda

02:33.166 --> 02:35.410
ortaya çıkıyorsa.

02:35.410 --> 02:36.810
Ve bu nedenle, örneğin varsayılan

02:36.810 --> 02:38.790
olarak bir yöntem false olarak ayarlanır,

02:38.790 --> 02:40.930
böylece bir nesne üzerinde bir for in döngüsü

02:40.930 --> 02:44.040
kullanırsanız, bu yöntem bir özellik olarak yazdırılmaz.

02:44.040 --> 02:45.240
Bir accessor için de

02:45.240 --> 02:47.180
configurable ve enumerable'a

02:47.180 --> 02:49.750
sahibiz, ancak get ve set'e sahibiz ve elbette,

02:49.750 --> 02:53.040
örneğin, yepyeni bir set yöntemi atayan veya aniden

02:53.040 --> 02:58.750
bir get işlevi ekleyen yeni bir tanımlayıcı da döndürebilirsiniz.

02:58.750 --> 03:01.585
Dolayısıyla, burada günlük 2 ve günlük 3'te sonunda

03:01.585 --> 03:05.190
yeni bir tanımlayıcı nesnesi döndürebilir ve TypeScript'e bunu

03:05.190 --> 03:08.020
dönerek veya dönüş türünü özellik tanımlayıcısına

03:08.020 --> 03:10.560
ayarlayarak yapacağınızı açıkça belirtebilirsiniz

03:10.560 --> 03:14.860
ve bu nedenle set anahtar sözcüğünü, get anahtar sözcüğünü, yapılandırılabilir

03:14.860 --> 03:17.010
veya numaralandırılabilir özelliği

03:17.010 --> 03:24.800
de ayarlayabilir ve bu erişimcinin veya yöntemin nasıl yapılandırıldığını değiştirebilirsiniz.

03:24.800 --> 03:27.560
Şimdi burada erişimci için bunu yapmak istemiyorum,

03:27.560 --> 03:29.800
onunla yapabileceğim ilginç bir şey yok,

03:29.800 --> 03:32.520
bu nedenle bir özellik tanımlayıcısı döndürmeyeceğim,

03:32.520 --> 03:36.400
ancak aslında size bir şey döndüreceğimiz ve dekoratörlerin yardımıyla

03:36.400 --> 03:42.533
ilginç oluşturabileceğimiz yöntem dekoratörü ile bir örnek göstereceğim.
