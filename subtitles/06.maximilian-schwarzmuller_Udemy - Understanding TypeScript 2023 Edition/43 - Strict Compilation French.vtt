WEBVTT

00:02.120 --> 00:02.953
Instructeur : C'était

00:02.953 --> 00:04.960
donc une première série importante d'options.

00:04.960 --> 00:07.520
Maintenant, plongeons dans ces options strictes

00:07.520 --> 00:09.860
car elles sont assez intéressantes.

00:09.860 --> 00:12.150
Il existe une option "strict true",

00:12.150 --> 00:13.590
qui permet d'activer

00:13.590 --> 00:16.750
toutes les options de vérification stricte

00:16.750 --> 00:18.830
du type, ce qui revient à définir

00:18.830 --> 00:22.110
toutes ces options séparément.

00:22.110 --> 00:24.830
Vous pouvez donc soit définir toutes ces options une par

00:24.830 --> 00:27.110
une, soit définir uniquement cette option.

00:27.110 --> 00:29.510
Bien sûr, vous pouvez définir les options individuelles

00:29.510 --> 00:33.020
si vous souhaitez que certaines options soient définies comme fausses.

00:33.020 --> 00:34.790
Parce que sinon, ils sont tous à true.

00:34.790 --> 00:36.520
Si vous voulez qu'ils soient tous définis

00:36.520 --> 00:39.290
sur vrai, l'utilisation de cette option est bien sûr plus courte.

00:39.290 --> 00:41.360
Mais à quoi servent ces options ?

00:41.360 --> 00:43.213
Commençons par noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny est une option très intéressante qui nous

00:47.410 --> 00:49.180
aide à écrire un meilleur code.

00:49.180 --> 00:51.370
Allons dans notre fichier d'analyse ici,

00:51.370 --> 00:53.963
et ajoutons une fonction, sendAnalytics, qui

00:55.270 --> 00:58.070
reçoit une option de données, disons, et nous pourrions

00:58.070 --> 01:01.010
l'envoyer à un serveur, mais ici, je me contente de l'enregistrer

01:01.010 --> 01:03.430
sur la console.

01:03.430 --> 01:07.500
Puis j'appelle sendAnalytics avec les données, donc

01:07.500 --> 01:08.920
avec la chaîne.

01:08.920 --> 01:11.080
Comme vous le voyez, mon IDE se plaint déjà

01:11.080 --> 01:13.160
ici, tout comme le compilateur TypeScript,

01:13.160 --> 01:14.960
car les deux sont bien sûr liés si j'essayais

01:14.960 --> 01:17.040
de compiler ceci.

01:17.040 --> 01:20.070
Les données de paramètre ont implicitement un type quelconque.

01:20.070 --> 01:21.350
Il semble donc que ce problème

01:21.350 --> 01:23.940
soit lié à l'option noImplicitAny.

01:23.940 --> 01:27.150
En effet, si je mets cette option à false, donc si je mets toutes

01:27.150 --> 01:29.300
les options strictes à true mais que je mets

01:29.300 --> 01:31.521
cette option à false, ce que je peux faire,

01:31.521 --> 01:33.810
alors cette erreur disparaît.

01:33.810 --> 01:37.140
Aussi bien dans l'IDE que lorsque nous compilons le code.

01:37.140 --> 01:38.730
Alors, que fait cette option ?

01:38.730 --> 01:41.440
Cela garantit, et je vais le commenter à nouveau

01:41.440 --> 01:44.210
pour l'activer à cause de strict true, cela

01:44.210 --> 01:47.050
garantit que nous devons être clairs sur nos

01:47.050 --> 01:49.410
paramètres, sur les valeurs avec lesquelles

01:49.410 --> 01:53.020
nous travaillons dans notre code.

01:53.020 --> 01:56.600
Ici, nous ne donnons à TypeScript aucune information sur le type

01:56.600 --> 01:59.930
de données que nous obtiendrons en tant que paramètre.

01:59.930 --> 02:01.320
Et nous devrions.

02:01.320 --> 02:03.800
Si TypeScript est capable de le déduire, alors bien

02:03.800 --> 02:05.360
sûr, c'est parfait, mais ici comment

02:05.360 --> 02:08.770
TypeScript pourrait-il le déduire de cette ligne, et bien gardez à l'esprit

02:08.770 --> 02:11.470
que cette fonction est déclarée avant que ce fichier ne

02:11.470 --> 02:12.950
soit exécuté.

02:12.950 --> 02:15.080
Ainsi, au moment où la fonction est créée,

02:15.080 --> 02:18.380
il n'y a aucune chance de savoir ce qui s'y trouvera.

02:18.380 --> 02:20.100
Donc ici, nous pouvons corriger cette

02:20.100 --> 02:22.570
erreur en déclarant simplement le type et en étant clair

02:22.570 --> 02:24.253
sur le type que nous utilisons ici.

02:25.100 --> 02:29.530
Maintenant, notez que si vous aviez une variable enregistrée, en lui

02:29.530 --> 02:32.650
donnant la valeur true ici, vous n'obtiendriez pas

02:32.650 --> 02:34.720
d'erreur à propos de cette déclaration,

02:34.720 --> 02:37.670
même si le type par défaut est any.

02:37.670 --> 02:39.250
Pour les variables, c'est correct.

02:39.250 --> 02:40.910
Pour les paramètres, ce n'est pas bon.

02:40.910 --> 02:42.480
Pourquoi c'est bon pour les variables ?

02:42.480 --> 02:44.370
Parce que ce que TypeScript fait pour les variables,

02:44.370 --> 02:45.940
ce qui est possible pour les variables, ce

02:45.940 --> 02:47.040
qui n'est pas possible ici parce

02:47.040 --> 02:48.880
que la fonction est créée en premier.

02:48.880 --> 02:52.490
Ici, TypeScript est capable de suivre les valeurs que vous attribuez.

02:52.490 --> 02:54.650
Vous voyez, ok, j'ai

02:54.650 --> 02:56.720
été logué ici comme

02:56.720 --> 02:58.573
ça, maintenant je

02:59.430 --> 03:08.030
l'ai mis à true, donc par la suite, si je console logué ici, c'est un booléen.

03:08.030 --> 03:10.300
Ainsi, TypeScript est ici capable de comprendre

03:10.300 --> 03:11.893
le flux de votre code, et donc, vous

03:11.893 --> 03:14.320
n'avez pas besoin d'être précis concernant un

03:14.320 --> 03:15.430
type ici.

03:15.430 --> 03:18.020
Bien sûr, il faut être précis si l'on veut éviter que

03:18.020 --> 03:20.310
la nouvelle valeur soit librement assignée,

03:20.310 --> 03:22.940
ce que l'on peut faire ici car elle est de type any.

03:22.940 --> 03:25.700
Vous devez donc toujours attribuer un type pour éviter cela, mais

03:25.700 --> 03:27.680
TypeScript est au moins capable de savoir si

03:27.680 --> 03:29.490
le code que vous appelez fonctionne avec

03:29.490 --> 03:31.410
le type qu'il détient actuellement.

03:31.410 --> 03:32.410
Ce n'est pas le cas ici car

03:32.410 --> 03:35.360
la fonction est définie avant que vous ne l'appeliez, et par conséquent,

03:35.360 --> 03:37.800
TypeScript n'a aucune chance de savoir si ce que vous passez

03:37.800 --> 03:39.570
dans la fonction peut être utilisé à l'intérieur

03:39.570 --> 03:41.393
de celle-ci.

03:43.280 --> 03:46.020
strictNullChecks n'est jamais une option importante.

03:46.020 --> 03:48.520
C'est en fait lié à notre sélection de boutons que

03:48.520 --> 03:49.410
nous avons ici.

03:49.410 --> 03:51.820
Tu te souviens que j'ai dû ajouter ce point d'exclamation ici

03:51.820 --> 03:52.670
pour que ça marche.

03:52.670 --> 03:54.380
Sinon, j'obtiendrais une erreur.

03:54.380 --> 03:56.220
Nous pouvons maintenant nous débarrasser

03:56.220 --> 03:58.430
de cette erreur sans ajouter le point d'exclamation

03:58.430 --> 04:02.090
en donnant la valeur false à strictNullChecks.

04:02.090 --> 04:04.200
Faisons-le donc ici et sauvegardons-le.

04:04.200 --> 04:07.860
Et comme vous le voyez, cette erreur a maintenant disparu ici.

04:07.860 --> 04:10.120
Et je peux compiler tous les fichiers.

04:10.120 --> 04:12.340
Maintenant, que font les contrôles strictNullChecks ?

04:12.340 --> 04:16.160
Ils indiquent à TypeScript d'être assez strict quant à la façon dont

04:16.160 --> 04:19.410
vous accédez et travaillez avec des valeurs qui pourraient

04:19.410 --> 04:22.530
potentiellement contenir une valeur nulle.

04:22.530 --> 04:24.850
Et le bouton ici pourrait être nul.

04:24.850 --> 04:29.210
Il ne pointe pas toujours vers un élément de bouton.

04:29.210 --> 04:31.390
Il ne pointe pas toujours vers un tel élément,

04:31.390 --> 04:34.220
car même si vous avez un tel sélecteur ici, un bouton peut

04:34.220 --> 04:36.900
tout simplement ne pas exister sur la page sur laquelle

04:36.900 --> 04:38.490
ce script s'exécute.

04:38.490 --> 04:40.840
Et donc, TypeScript ne peut pas le dire parce

04:40.840 --> 04:43.790
qu'il ne plonge pas dans votre fichier html et ne le

04:43.790 --> 04:44.900
regarde pas.

04:44.900 --> 04:48.240
Il ne peut pas dire si cela sera un succès ou non.

04:48.240 --> 04:53.130
Et si elle ne parvient pas à renvoyer un pointeur et un nœud nul, alors elle renverra

04:53.130 --> 04:56.650
null, enfin indéfini pour être précis, mais cela est traité

04:56.650 --> 04:59.090
de la même manière ici.

04:59.090 --> 05:01.610
Par conséquent, ce bouton pourrait avoir une valeur nulle,

05:01.610 --> 05:03.530
et donc ce code pourrait échouer.

05:03.530 --> 05:06.610
En effet, si je commente ce bouton ici, si je compile maintenant

05:06.610 --> 05:08.480
tout, cela fonctionne parce que j'ai

05:08.480 --> 05:10.733
désactivé les contrôles de nullité.

05:12.000 --> 05:14.100
Mais j'ai maintenant une erreur d'exécution

05:14.100 --> 05:16.210
parce que je ne peux pas appeler l'écouteur d'événement,

05:16.210 --> 05:18.230
addEventListener, sur null.

05:18.230 --> 05:20.970
Et je suis devenu nul ici parce que je n'ai pas de bouton.

05:20.970 --> 05:23.110
C'est une erreur que nous pourrions

05:23.110 --> 05:26.760
éviter en mettant strictNullChecks à true.

05:26.760 --> 05:30.340
Et c'est automatiquement mis en place si nous avons mis strict à true.

05:30.340 --> 05:34.450
TypeScript prévoit que cela peut se produire,

05:34.450 --> 05:38.600
et nous oblige donc à contourner ce problème.

05:38.600 --> 05:40.640
Maintenant, une solution bon marché est

05:40.640 --> 05:42.820
cet opérateur point d'exclamation ici.

05:42.820 --> 05:46.020
Cela indique à TypeScript que vous, le développeur,

05:46.020 --> 05:48.360
savez que ce bouton existe, ou

05:48.360 --> 05:53.360
que cette opération donnera une valeur non nulle.

05:53.710 --> 05:55.830
Maintenant, peut-être que vous le faites,

05:55.830 --> 05:58.990
vous le faites certainement si vous savez que vous travaillez

05:58.990 --> 06:00.430
sur le code HTML et qu'il y a un

06:00.430 --> 06:03.310
bouton ici, que ce sélecteur ici va fonctionner.

06:03.310 --> 06:05.610
Il est donc possible d'utiliser le point d'exclamation

06:05.610 --> 06:06.623
dans ce scénario.

06:07.600 --> 06:09.040
Si vous avez un autre scénario dans

06:09.040 --> 06:11.120
lequel vous ne savez pas avec certitude si cela fonctionne

06:11.120 --> 06:13.050
et que vous espérez simplement que cela fonctionne,

06:13.050 --> 06:14.170
il peut être préférable de

06:14.170 --> 06:18.210
simplement envelopper le code qui pourrait échouer dans une vérification if, qui sera également

06:18.210 --> 06:21.570
présente au moment de l'exécution, bien sûr.

06:21.570 --> 06:24.960
Vous pourriez simplement vérifier si le bouton est vrai ici, ce

06:24.960 --> 06:27.510
qui ne sera pas le cas s'il est nul ou indéfini.

06:27.510 --> 06:30.060
Et déplacez ce code dans ce contrôle si ici.

06:30.060 --> 06:32.470
Maintenant, même sans le point d'exclamation,

06:32.470 --> 06:35.810
en mode strictNullChecks, nous n'obtenons pas d'erreur car

06:35.810 --> 06:37.600
TypeScript comprend que ce code

06:37.600 --> 06:39.750
se trouve à l'intérieur de cette instruction

06:39.750 --> 06:41.991
if et que cette instruction if s'assure

06:41.991 --> 06:46.310
que le bouton n'est pas nul et que cela n'échouera pas.

06:46.310 --> 06:49.310
Cela pourrait donc être la solution la plus propre.

06:49.310 --> 06:51.060
Toutefois, bien entendu, pour économiser

06:51.060 --> 06:54.350
du code, si vous savez avec certitude que quelque chose existe, l'utilisation

06:54.350 --> 06:56.550
du point d'exclamation est plus courte et constitue

06:56.550 --> 06:58.320
une option absolument parfaite.

06:58.320 --> 07:00.450
Ici, j'ai dit les deux pour que nous voyions les deux,

07:00.450 --> 07:02.450
bien sûr vous avez juste besoin d'une des deux choses,

07:02.450 --> 07:04.520
soit le check if, soit le point d'exclamation.

07:04.520 --> 07:07.680
strictFunctionTypes est un paramètre un peu plus avancé

07:07.680 --> 07:12.010
qui permet d'attraper une boîte de niche dont vous ne disposez peut-être

07:12.010 --> 07:14.830
pas dans de nombreuses applications.

07:14.830 --> 07:17.340
Il est lié aux types de fonctions que vous pourriez

07:17.340 --> 07:18.380
mettre en place.

07:18.380 --> 07:20.650
Pas les types à l'intérieur des fonctions, mais si

07:20.650 --> 07:23.690
vous définissez à quoi doit ressembler une fonction en ce qui concerne

07:23.690 --> 07:26.220
ses paramètres et sa valeur de retour, et que vous créez

07:26.220 --> 07:27.840
un tel type de fonction, comme vous l'avez

07:27.840 --> 07:29.990
appris dans le module de base, alors vous pouvez

07:29.990 --> 07:32.650
introduire une boîte si vous travaillez avec des classes

07:32.650 --> 07:35.560
et l'héritage, ce que nous n'avons pas encore appris, ce que nous

07:35.560 --> 07:36.950
n'avons pas encore utilisé, et

07:36.950 --> 07:38.210
donc, pour l'instant, ignorons

07:38.210 --> 07:39.683
cela.

07:40.578 --> 07:43.630
strictBindCallApply, qui peut être utile

07:43.630 --> 07:46.840
si vous travaillez avec bind, call ou apply.

07:46.840 --> 07:49.680
Pour cela, voyons rapidement un exemple.

07:49.680 --> 07:52.040
Ici, nous avons notre bouton et notre fonction.

07:52.040 --> 07:57.040
Disons qu'il s'agit d'une fonction, que nous définissons ici avec le mot

07:57.780 --> 08:01.100
clé function, ou d'une fonction d'erreur.

08:01.100 --> 08:03.650
Peu importe, je vais utiliser le mot clé function ici.

08:04.731 --> 08:09.731
clickHandler, et là, je console. le journal a cliqué.

08:11.960 --> 08:13.810
Et maintenant, ici, nous pointons vers clickHandler,

08:13.810 --> 08:15.560
et pour une raison quelconque, nous voulons

08:15.560 --> 08:17.670
nous assurer que lorsque cela s'exécute, nous

08:17.670 --> 08:19.330
passons dans certains arguments ou nous

08:19.330 --> 08:22.780
définissons le mot-clé this à une certaine valeur.

08:22.780 --> 08:26.480
Disons maintenant que nous attendons un argument de message, qui devrait

08:26.480 --> 08:28.110
être une chaîne de caractères.

08:28.110 --> 08:32.110
Et nous voulons sortir ça ici aussi.

08:32.110 --> 08:34.400
Maintenant, puisque clickHandler est passé à addEventListener

08:34.400 --> 08:36.010
de cette manière pour que le navigateur

08:36.010 --> 08:39.080
exécute essentiellement ceci pour nous, si nous voulons préconfigurer

08:39.080 --> 08:41.070
les arguments qui seront passés, nous pouvons

08:41.070 --> 08:43.570
utiliser bind.

08:43.570 --> 08:47.000
Et bind, comme premier argument, prend ce à quoi nous

08:47.000 --> 08:49.320
voulons lier le mot-clé this.

08:49.320 --> 08:51.650
Et ici nous pourrions dire que cela n'a pas d'importance

08:51.650 --> 08:53.580
pour nous parce que nous ne l'utilisons pas

08:53.580 --> 08:55.930
dans la fonction, donc nous le lions à null.

08:55.930 --> 08:57.700
Maintenant vous voyez ici que j'ai une erreur.

08:57.700 --> 09:00.610
Je reçois une erreur qui peut être évitée

09:00.610 --> 09:04.613
si je règle strictBindCallApply sur false.

09:07.040 --> 09:08.680
Maintenant vous voyez que l'erreur a disparu.

09:08.680 --> 09:10.501
Maintenant, que fait cette option, donc ?

09:10.501 --> 09:14.180
Il vérifie essentiellement quelle fonction vous appelez

09:14.180 --> 09:16.020
: bind, call, ou apply.

09:16.020 --> 09:20.080
Et il vérifie si ce que vous mettez en place ici a un sens.

09:20.080 --> 09:23.440
Et ici TypeScript voit que nous voulons un argument, nous voulons

09:23.440 --> 09:25.450
le paramètre dans clickHandler.

09:25.450 --> 09:28.260
Avec bind, nous ne configurons pas cela cependant.

09:28.260 --> 09:30.600
Et donc, ici nous avons une erreur.

09:30.600 --> 09:32.180
Si je remets cette valeur à true,

09:32.180 --> 09:34.000
ou si je l'ai simplement commentée parce

09:34.000 --> 09:36.230
que, bien sûr, elle est mise à true par défaut

09:36.230 --> 09:37.870
en mettant strict à true, nous obtenons

09:37.870 --> 09:39.790
à nouveau l'erreur.

09:39.790 --> 09:42.350
Maintenant, si nous n'attendions pas d'argument ici,

09:42.350 --> 09:44.750
vous voyez que l'erreur disparaîtrait en bas si nous

09:44.750 --> 09:46.200
supprimions seulement le message,

09:46.200 --> 09:48.140
parce que TypeScript comprend notre code

09:48.140 --> 09:50.660
et voit que vous ne passez aucun argument à cette méthode

09:50.660 --> 09:52.580
ou à cette fonction parce qu'elle n'en prend

09:52.580 --> 09:54.760
aucun, donc c'est bon.

09:54.760 --> 09:57.420
Mais bien sûr, ici nous en voulons un, donc nous obtenons une erreur.

09:57.420 --> 10:00.880
La solution est de fournir ce deuxième argument ici,

10:00.880 --> 10:04.350
qui est le premier argument que vous voulez passer.

10:04.350 --> 10:06.290
Maintenant, TypeScript est vraiment intelligent ici.

10:06.290 --> 10:08.120
Et par exemple, si je passe un nombre, il se plaindra

10:08.120 --> 10:10.310
quand même car il comprend que j'ai besoin d'une chaîne

10:10.310 --> 10:11.610
de caractères ici.

10:12.500 --> 10:15.960
Si je passe une chaîne de caractères correcte, comme

10:15.960 --> 10:17.350
"you're welcome", alors

10:17.350 --> 10:19.070
il ne se plaint plus parce qu'il

10:19.070 --> 10:21.210
comprend cela et voit que cela correspond

10:21.210 --> 10:24.840
à la définition de ma fonction ici.

10:24.840 --> 10:27.370
Il s'agit donc d'un comportement très utile qui permet de s'assurer

10:27.370 --> 10:30.260
que vous n'utilisez pas accidentellement bind, call ou apply d'une

10:30.260 --> 10:32.743
manière qui ne fonctionne pas avec votre code.

10:33.930 --> 10:36.600
Maintenant, strictPropertyInitialization devient important lorsque nous

10:36.600 --> 10:37.810
travaillons avec des classes.

10:37.810 --> 10:39.213
Nous pouvons l'ignorer pour le moment.

10:39.213 --> 10:41.890
noImplicitCela n'a pas non plus d'importance pour le moment.

10:41.890 --> 10:43.650
Cela concerne le mot-clé this

10:43.650 --> 10:45.980
et TypeScript essaie de vous avertir si

10:45.980 --> 10:48.240
vous utilisez ce mot-clé à un endroit où

10:48.240 --> 10:51.020
il n'est pas clair à quoi il fait référence.

10:51.020 --> 10:53.210
Et alwaysStrict contrôle simplement que

10:53.210 --> 10:55.560
les fichiers JavaScript qui sont générés

10:55.560 --> 10:58.663
utilisent le mode strict afin que cela soit ajouté.

10:59.710 --> 11:02.383
Avec cela, nous avons couvert toutes ces options strictes.
