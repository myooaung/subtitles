WEBVTT

00:02.050 --> 00:04.370
Instructor: No podemos ignorar los módulos

00:04.370 --> 00:05.880
aislados, pero hay otra opción,

00:05.880 --> 00:08.000
que en realidad ni siquiera se menciona aquí,

00:08.000 --> 00:10.810
que sin embargo quiero mencionar yo mismo.

00:10.810 --> 00:14.680
Y esa es la opción de no emitir en caso de error.

00:14.680 --> 00:16.200
Se puede establecer como verdadero

00:16.200 --> 00:18.820
o falso y el valor por defecto es falso.

00:18.820 --> 00:19.653
¿Y qué hace esto?

00:19.653 --> 00:21.330
Si lo ponemos en falso, déjame mostrarte

00:21.330 --> 00:23.050
dónde puede ser un problema.

00:23.050 --> 00:26.530
Es un problema si introducimos un error o puede ser

00:26.530 --> 00:27.590
un problema.

00:27.590 --> 00:30.690
Digamos que aquí tengo mi botón y quito este

00:30.690 --> 00:32.410
signo de exclamación.

00:32.410 --> 00:34.750
Ahora bien, aunque no entendamos del todo lo que

00:34.750 --> 00:38.030
está pasando el problema aquí es simplemente que TypeScript no

00:38.030 --> 00:40.610
sabe que ciertamente tenemos un botón aquí.

00:40.610 --> 00:42.790
Al fin y al cabo, al consultar por un botón podríamos

00:42.790 --> 00:45.990
no obtenerlo si no hay ningún elemento en el DOM que satisfaga este

00:45.990 --> 00:47.540
selector, entonces esto devolverá

00:47.540 --> 00:48.800
ahora.

00:48.800 --> 00:50.910
Y eso es básicamente de lo que se queja TypeScript.

00:50.910 --> 00:54.849
Aquí accedemos a algo en un objeto potencialmente

00:54.849 --> 00:57.200
nulo y eso no es bueno.

00:57.200 --> 00:59.300
Eso sí que es un error que tenemos aquí.

00:59.300 --> 01:02.120
Si compilamos nuestro código, también obtenemos

01:02.120 --> 01:04.770
este error aquí en la consola.

01:04.770 --> 01:08.210
Sin embargo, el archivo se crea.

01:08.210 --> 01:11.660
Así que aunque borre la aplicación. jsfile será recreado.

01:11.660 --> 01:13.910
Así que incluso si tenemos un error, TypeScript

01:13.910 --> 01:16.300
crea un archivo JavaScript.

01:16.300 --> 01:18.740
Esto puede ser deseado o no.

01:18.740 --> 01:21.360
Tal vez tengas un error en tu archivo TypeScript y no sepas

01:21.360 --> 01:22.980
muy bien cómo solucionarlo, pero

01:22.980 --> 01:26.000
sabes que no será un problema en la aplicación final.

01:26.000 --> 01:29.410
Como aquí, aunque no sepamos lo del signo de exclamación.

01:29.410 --> 01:31.577
Bueno, si no conocemos el signo de exclamación

01:31.577 --> 01:35.900
no podemos saber cómo desactivar este error, básicamente.

01:35.900 --> 01:39.630
Pero aún así sabemos que esto funcionará en nuestra página aquí.

01:39.630 --> 01:41.890
Así que podríamos estar bien con la compilación

01:41.890 --> 01:43.630
de esto a pesar de tener un error.

01:43.630 --> 01:45.570
Pero, por supuesto, en realidad deberías

01:45.570 --> 01:48.850
aspirar a tener proyectos sin errores y preferir aprender cómo puedes

01:48.850 --> 01:51.720
solucionar este problema en lugar de ignorarlo.

01:51.720 --> 01:54.590
No obstante, puede ponerlo en false o no ponerlo

01:54.590 --> 01:57.590
en absoluto, ya que false es el valor por defecto,

01:57.590 --> 02:00.687
si le parece bien que se generen archivos JavaScript

02:00.687 --> 02:02.590
si se produce un error.

02:02.590 --> 02:04.240
Sin embargo, si se establece

02:04.240 --> 02:07.700
como verdadero, lo que ocurrirá es que no se generarán archivos

02:07.700 --> 02:09.100
problemáticos.

02:09.100 --> 02:10.910
Si ahora vuelvo a ejecutar esto...

02:12.440 --> 02:15.110
Verás, en realidad no se genera nada.

02:15.110 --> 02:18.180
Incluso la analítica. El archivo ts no sale

02:18.180 --> 02:21.440
ahí si tenemos algún contenido ahí

02:21.440 --> 02:26.440
además de la consola. log, ves que no se genera.

02:26.550 --> 02:27.560
Y la razón es que

02:27.560 --> 02:29.600
tenemos un error en el archivo.

02:29.600 --> 02:32.940
Y si algún archivo falla en la compilación no se omitirá

02:32.940 --> 02:34.300
ningún archivo.

02:34.300 --> 02:35.810
Así que aquí, por lo tanto, tenemos que

02:35.810 --> 02:38.850
asegurarnos de arreglar este error antes de que podamos conseguir que TypeScript

02:38.850 --> 02:40.890
vuelva a compilar archivos para nosotros.

02:40.890 --> 02:43.530
Y, por lo tanto, es una opción que normalmente me gusta

02:43.530 --> 02:46.830
establecer porque no me interesa obtener archivos JavaScript si

02:46.830 --> 02:49.703
todavía tengo errores en mis archivos TypeScript.
